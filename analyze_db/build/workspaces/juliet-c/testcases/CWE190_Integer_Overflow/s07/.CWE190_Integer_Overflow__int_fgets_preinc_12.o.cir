!s32i = !cir.int<s, 32>
!s64i = !cir.int<s, 64>
!s8i = !cir.int<s, 8>
!ty__IO_codecvt = !cir.record<struct "_IO_codecvt" incomplete>
!ty__IO_marker = !cir.record<struct "_IO_marker" incomplete>
!ty__IO_wide_data = !cir.record<struct "_IO_wide_data" incomplete>
!u16i = !cir.int<u, 16>
!u64i = !cir.int<u, 64>
!void = !cir.void
#fn_attr = #cir<extra({nothrow = #cir.nothrow})>
#fn_attr1 = #cir<extra({inline = #cir.inline<no>, nothrow = #cir.nothrow, optnone = #cir.optnone, uwtable = #cir.uwtable<async>})>
!ty__IO_FILE = !cir.record<struct "_IO_FILE" {!s32i, !cir.ptr<!s8i>, !cir.ptr<!s8i>, !cir.ptr<!s8i>, !cir.ptr<!s8i>, !cir.ptr<!s8i>, !cir.ptr<!s8i>, !cir.ptr<!s8i>, !cir.ptr<!s8i>, !cir.ptr<!s8i>, !cir.ptr<!s8i>, !cir.ptr<!s8i>, !cir.ptr<!ty__IO_marker>, !cir.ptr<!cir.record<struct "_IO_FILE">>, !s32i, !s32i, !s64i, !u16i, !s8i, !cir.array<!s8i x 1>, !cir.ptr<!void>, !s64i, !cir.ptr<!ty__IO_codecvt>, !cir.ptr<!ty__IO_wide_data>, !cir.ptr<!cir.record<struct "_IO_FILE">>, !cir.ptr<!void>, !u64i, !s32i, !cir.array<!s8i x 20>} #cir.record.decl.ast>
module @"/workspaces/juliet-c/testcases/CWE190_Integer_Overflow/s07/CWE190_Integer_Overflow__int_fgets_preinc_12.c" attributes {cir.lang = #cir.lang<c>, cir.sob = #cir.signed_overflow_behavior<undefined>, cir.triple = "x86_64-unknown-linux-gnu", cir.type_size_info = #cir.type_size_info<char = 8, int = 32, size_t = 64>, cir.uwtable = #cir.uwtable<async>, dlti.dl_spec = #dlti.dl_spec<i64 = dense<64> : vector<2xi64>, i128 = dense<128> : vector<2xi64>, f64 = dense<64> : vector<2xi64>, f128 = dense<128> : vector<2xi64>, f16 = dense<16> : vector<2xi64>, !llvm.ptr<272> = dense<64> : vector<4xi64>, !llvm.ptr<271> = dense<32> : vector<4xi64>, i16 = dense<16> : vector<2xi64>, i8 = dense<8> : vector<2xi64>, i32 = dense<32> : vector<2xi64>, !llvm.ptr<270> = dense<32> : vector<4xi64>, f80 = dense<128> : vector<2xi64>, i1 = dense<8> : vector<2xi64>, !llvm.ptr = dense<64> : vector<4xi64>, "dlti.endianness" = "little", "dlti.mangling_mode" = "e", "dlti.stack_alignment" = 128 : i64>} {
  cir.func no_proto private @globalReturnsTrueOrFalse(...) -> !s32i loc(#loc214)
  cir.func private @fgets(!cir.ptr<!s8i>, !s32i, !cir.ptr<!ty__IO_FILE>) -> !cir.ptr<!s8i> loc(#loc215)
  cir.global "private" external @stdin : !cir.ptr<!ty__IO_FILE> {alignment = 8 : i64} loc(#loc216)
  cir.func private @atoi(!cir.ptr<!s8i>) -> !s32i extra(#fn_attr) loc(#loc217)
  cir.func private @printLine(!cir.ptr<!s8i>) loc(#loc218)
  cir.global "private" constant cir_private dsolocal @".str" = #cir.const_array<"fgets() failed.\00" : !cir.array<!s8i x 16>> : !cir.array<!s8i x 16> {alignment = 1 : i64} loc(#loc11)
  cir.func private @printIntLine(!s32i) loc(#loc219)
  cir.global "private" constant cir_private dsolocal @".str.1" = #cir.const_array<"data value is too large to perform arithmetic safely.\00" : !cir.array<!s8i x 54>> : !cir.array<!s8i x 54> {alignment = 1 : i64} loc(#loc14)
  cir.func no_proto @CWE190_Integer_Overflow__int_fgets_preinc_12_bad() extra(#fn_attr1) {
    %0 = cir.alloca !s32i, !cir.ptr<!s32i>, ["data"] {alignment = 4 : i64} loc(#loc221)
    %1 = cir.const #cir.int<0> : !s32i loc(#loc19)
    cir.store %1, %0 : !s32i, !cir.ptr<!s32i> loc(#loc222)
    cir.scope {
      %2 = cir.get_global @globalReturnsTrueOrFalse : !cir.ptr<!cir.func<(...) -> !s32i>> loc(#loc224)
      %3 = cir.cast(bitcast, %2 : !cir.ptr<!cir.func<(...) -> !s32i>>), !cir.ptr<!cir.func<() -> !s32i>> loc(#loc224)
      %4 = cir.call %3() : (!cir.ptr<!cir.func<() -> !s32i>>) -> !s32i loc(#loc23)
      %5 = cir.cast(int_to_bool, %4 : !s32i), !cir.bool loc(#loc23)
      cir.if %5 {
        cir.scope {
          %6 = cir.alloca !cir.array<!s8i x 14>, !cir.ptr<!cir.array<!s8i x 14>>, ["inputBuffer"] {alignment = 1 : i64} loc(#loc227)
          %7 = cir.const #cir.zero : !cir.array<!s8i x 14> loc(#loc227)
          cir.store %7, %6 : !cir.array<!s8i x 14>, !cir.ptr<!cir.array<!s8i x 14>> loc(#loc227)
          cir.scope {
            %8 = cir.cast(array_to_ptrdecay, %6 : !cir.ptr<!cir.array<!s8i x 14>>), !cir.ptr<!s8i> loc(#loc34)
            %9 = cir.const #cir.int<3> : !s32i loc(#loc35)
            %10 = cir.cast(integral, %9 : !s32i), !u64i loc(#loc35)
            %11 = cir.const #cir.int<4> : !u64i loc(#loc35)
            %12 = cir.binop(mul, %10, %11) : !u64i loc(#loc35)
            %13 = cir.const #cir.int<2> : !s32i loc(#loc35)
            %14 = cir.cast(integral, %13 : !s32i), !u64i loc(#loc35)
            %15 = cir.binop(add, %12, %14) : !u64i loc(#loc35)
            %16 = cir.cast(integral, %15 : !u64i), !s32i loc(#loc35)
            %17 = cir.get_global @stdin : !cir.ptr<!cir.ptr<!ty__IO_FILE>> loc(#loc216)
            %18 = cir.load %17 : !cir.ptr<!cir.ptr<!ty__IO_FILE>>, !cir.ptr<!ty__IO_FILE> loc(#loc36)
            %19 = cir.call @fgets(%8, %16, %18) : (!cir.ptr<!s8i>, !s32i, !cir.ptr<!ty__IO_FILE>) -> !cir.ptr<!s8i> loc(#loc37)
            %20 = cir.const #cir.ptr<null> : !cir.ptr<!void> loc(#loc38)
            %21 = cir.cast(bitcast, %20 : !cir.ptr<!void>), !cir.ptr<!s8i> loc(#loc38)
            %22 = cir.cmp(ne, %19, %21) : !cir.ptr<!s8i>, !cir.bool loc(#loc229)
            cir.if %22 {
              %23 = cir.cast(array_to_ptrdecay, %6 : !cir.ptr<!cir.array<!s8i x 14>>), !cir.ptr<!s8i> loc(#loc42)
              %24 = cir.call @atoi(%23) : (!cir.ptr<!s8i>) -> !s32i side_effect(pure) extra(#fn_attr) loc(#loc43)
              cir.store %24, %0 : !s32i, !cir.ptr<!s32i> loc(#loc231)
            } else {
              %23 = cir.get_global @".str" : !cir.ptr<!cir.array<!s8i x 16>> loc(#loc11)
              %24 = cir.cast(array_to_ptrdecay, %23 : !cir.ptr<!cir.array<!s8i x 16>>), !cir.ptr<!s8i> loc(#loc11)
              cir.call @printLine(%24) : (!cir.ptr<!s8i>) -> () loc(#loc46)
            } loc(#loc230)
          } loc(#loc228)
        } loc(#loc226)
      } else {
        %6 = cir.const #cir.int<2> : !s32i loc(#loc47)
        cir.store %6, %0 : !s32i, !cir.ptr<!s32i> loc(#loc232)
      } loc(#loc225)
    } loc(#loc223)
    cir.scope {
      %2 = cir.get_global @globalReturnsTrueOrFalse : !cir.ptr<!cir.func<(...) -> !s32i>> loc(#loc234)
      %3 = cir.cast(bitcast, %2 : !cir.ptr<!cir.func<(...) -> !s32i>>), !cir.ptr<!cir.func<() -> !s32i>> loc(#loc234)
      %4 = cir.call %3() : (!cir.ptr<!cir.func<() -> !s32i>>) -> !s32i loc(#loc51)
      %5 = cir.cast(int_to_bool, %4 : !s32i), !cir.bool loc(#loc51)
      cir.if %5 {
        cir.scope {
          %6 = cir.alloca !s32i, !cir.ptr<!s32i>, ["result", init] {alignment = 4 : i64} loc(#loc237)
          %7 = cir.load %0 : !cir.ptr<!s32i>, !s32i loc(#loc60)
          %8 = cir.unary(inc, %7) nsw : !s32i, !s32i loc(#loc60)
          cir.store %8, %0 : !s32i, !cir.ptr<!s32i> loc(#loc238)
          %9 = cir.load %0 : !cir.ptr<!s32i>, !s32i loc(#loc59)
          cir.store %9, %6 : !s32i, !cir.ptr<!s32i> loc(#loc237)
          %10 = cir.load %6 : !cir.ptr<!s32i>, !s32i loc(#loc62)
          cir.call @printIntLine(%10) : (!s32i) -> () loc(#loc63)
        } loc(#loc236)
      } else {
        cir.scope {
          %6 = cir.load %0 : !cir.ptr<!s32i>, !s32i loc(#loc66)
          %7 = cir.const #cir.int<2147483647> : !s32i loc(#loc67)
          %8 = cir.cmp(lt, %6, %7) : !s32i, !cir.bool loc(#loc240)
          cir.if %8 {
            %9 = cir.alloca !s32i, !cir.ptr<!s32i>, ["result", init] {alignment = 4 : i64} loc(#loc242)
            %10 = cir.load %0 : !cir.ptr<!s32i>, !s32i loc(#loc73)
            %11 = cir.unary(inc, %10) nsw : !s32i, !s32i loc(#loc73)
            cir.store %11, %0 : !s32i, !cir.ptr<!s32i> loc(#loc243)
            %12 = cir.load %0 : !cir.ptr<!s32i>, !s32i loc(#loc72)
            cir.store %12, %9 : !s32i, !cir.ptr<!s32i> loc(#loc242)
            %13 = cir.load %9 : !cir.ptr<!s32i>, !s32i loc(#loc75)
            cir.call @printIntLine(%13) : (!s32i) -> () loc(#loc76)
          } else {
            %9 = cir.get_global @".str.1" : !cir.ptr<!cir.array<!s8i x 54>> loc(#loc14)
            %10 = cir.cast(array_to_ptrdecay, %9 : !cir.ptr<!cir.array<!s8i x 54>>), !cir.ptr<!s8i> loc(#loc14)
            cir.call @printLine(%10) : (!cir.ptr<!s8i>) -> () loc(#loc77)
          } loc(#loc241)
        } loc(#loc239)
      } loc(#loc235)
    } loc(#loc233)
    cir.return loc(#loc16)
  } loc(#loc220)
  cir.func no_proto @CWE190_Integer_Overflow__int_fgets_preinc_12_good() extra(#fn_attr1) {
    %0 = cir.get_global @goodB2G : !cir.ptr<!cir.func<()>> loc(#loc245)
    cir.call %0() : (!cir.ptr<!cir.func<()>>) -> () loc(#loc80)
    %1 = cir.get_global @goodG2B : !cir.ptr<!cir.func<()>> loc(#loc246)
    cir.call %1() : (!cir.ptr<!cir.func<()>>) -> () loc(#loc82)
    cir.return loc(#loc79)
  } loc(#loc244)
  cir.func no_proto internal private @goodB2G() extra(#fn_attr1) {
    %0 = cir.alloca !s32i, !cir.ptr<!s32i>, ["data"] {alignment = 4 : i64} loc(#loc248)
    %1 = cir.const #cir.int<0> : !s32i loc(#loc88)
    cir.store %1, %0 : !s32i, !cir.ptr<!s32i> loc(#loc249)
    cir.scope {
      %2 = cir.get_global @globalReturnsTrueOrFalse : !cir.ptr<!cir.func<(...) -> !s32i>> loc(#loc251)
      %3 = cir.cast(bitcast, %2 : !cir.ptr<!cir.func<(...) -> !s32i>>), !cir.ptr<!cir.func<() -> !s32i>> loc(#loc251)
      %4 = cir.call %3() : (!cir.ptr<!cir.func<() -> !s32i>>) -> !s32i loc(#loc92)
      %5 = cir.cast(int_to_bool, %4 : !s32i), !cir.bool loc(#loc92)
      cir.if %5 {
        cir.scope {
          %6 = cir.alloca !cir.array<!s8i x 14>, !cir.ptr<!cir.array<!s8i x 14>>, ["inputBuffer"] {alignment = 1 : i64} loc(#loc254)
          %7 = cir.const #cir.zero : !cir.array<!s8i x 14> loc(#loc254)
          cir.store %7, %6 : !cir.array<!s8i x 14>, !cir.ptr<!cir.array<!s8i x 14>> loc(#loc254)
          cir.scope {
            %8 = cir.cast(array_to_ptrdecay, %6 : !cir.ptr<!cir.array<!s8i x 14>>), !cir.ptr<!s8i> loc(#loc103)
            %9 = cir.const #cir.int<3> : !s32i loc(#loc104)
            %10 = cir.cast(integral, %9 : !s32i), !u64i loc(#loc104)
            %11 = cir.const #cir.int<4> : !u64i loc(#loc104)
            %12 = cir.binop(mul, %10, %11) : !u64i loc(#loc104)
            %13 = cir.const #cir.int<2> : !s32i loc(#loc104)
            %14 = cir.cast(integral, %13 : !s32i), !u64i loc(#loc104)
            %15 = cir.binop(add, %12, %14) : !u64i loc(#loc104)
            %16 = cir.cast(integral, %15 : !u64i), !s32i loc(#loc104)
            %17 = cir.get_global @stdin : !cir.ptr<!cir.ptr<!ty__IO_FILE>> loc(#loc216)
            %18 = cir.load %17 : !cir.ptr<!cir.ptr<!ty__IO_FILE>>, !cir.ptr<!ty__IO_FILE> loc(#loc105)
            %19 = cir.call @fgets(%8, %16, %18) : (!cir.ptr<!s8i>, !s32i, !cir.ptr<!ty__IO_FILE>) -> !cir.ptr<!s8i> loc(#loc106)
            %20 = cir.const #cir.ptr<null> : !cir.ptr<!void> loc(#loc107)
            %21 = cir.cast(bitcast, %20 : !cir.ptr<!void>), !cir.ptr<!s8i> loc(#loc107)
            %22 = cir.cmp(ne, %19, %21) : !cir.ptr<!s8i>, !cir.bool loc(#loc256)
            cir.if %22 {
              %23 = cir.cast(array_to_ptrdecay, %6 : !cir.ptr<!cir.array<!s8i x 14>>), !cir.ptr<!s8i> loc(#loc111)
              %24 = cir.call @atoi(%23) : (!cir.ptr<!s8i>) -> !s32i side_effect(pure) extra(#fn_attr) loc(#loc112)
              cir.store %24, %0 : !s32i, !cir.ptr<!s32i> loc(#loc258)
            } else {
              %23 = cir.get_global @".str" : !cir.ptr<!cir.array<!s8i x 16>> loc(#loc115)
              %24 = cir.cast(array_to_ptrdecay, %23 : !cir.ptr<!cir.array<!s8i x 16>>), !cir.ptr<!s8i> loc(#loc115)
              cir.call @printLine(%24) : (!cir.ptr<!s8i>) -> () loc(#loc116)
            } loc(#loc257)
          } loc(#loc255)
        } loc(#loc253)
      } else {
        cir.scope {
          %6 = cir.alloca !cir.array<!s8i x 14>, !cir.ptr<!cir.array<!s8i x 14>>, ["inputBuffer"] {alignment = 1 : i64} loc(#loc260)
          %7 = cir.const #cir.zero : !cir.array<!s8i x 14> loc(#loc260)
          cir.store %7, %6 : !cir.array<!s8i x 14>, !cir.ptr<!cir.array<!s8i x 14>> loc(#loc260)
          cir.scope {
            %8 = cir.cast(array_to_ptrdecay, %6 : !cir.ptr<!cir.array<!s8i x 14>>), !cir.ptr<!s8i> loc(#loc123)
            %9 = cir.const #cir.int<3> : !s32i loc(#loc124)
            %10 = cir.cast(integral, %9 : !s32i), !u64i loc(#loc124)
            %11 = cir.const #cir.int<4> : !u64i loc(#loc124)
            %12 = cir.binop(mul, %10, %11) : !u64i loc(#loc124)
            %13 = cir.const #cir.int<2> : !s32i loc(#loc124)
            %14 = cir.cast(integral, %13 : !s32i), !u64i loc(#loc124)
            %15 = cir.binop(add, %12, %14) : !u64i loc(#loc124)
            %16 = cir.cast(integral, %15 : !u64i), !s32i loc(#loc124)
            %17 = cir.get_global @stdin : !cir.ptr<!cir.ptr<!ty__IO_FILE>> loc(#loc216)
            %18 = cir.load %17 : !cir.ptr<!cir.ptr<!ty__IO_FILE>>, !cir.ptr<!ty__IO_FILE> loc(#loc125)
            %19 = cir.call @fgets(%8, %16, %18) : (!cir.ptr<!s8i>, !s32i, !cir.ptr<!ty__IO_FILE>) -> !cir.ptr<!s8i> loc(#loc126)
            %20 = cir.const #cir.ptr<null> : !cir.ptr<!void> loc(#loc127)
            %21 = cir.cast(bitcast, %20 : !cir.ptr<!void>), !cir.ptr<!s8i> loc(#loc127)
            %22 = cir.cmp(ne, %19, %21) : !cir.ptr<!s8i>, !cir.bool loc(#loc262)
            cir.if %22 {
              %23 = cir.cast(array_to_ptrdecay, %6 : !cir.ptr<!cir.array<!s8i x 14>>), !cir.ptr<!s8i> loc(#loc131)
              %24 = cir.call @atoi(%23) : (!cir.ptr<!s8i>) -> !s32i side_effect(pure) extra(#fn_attr) loc(#loc132)
              cir.store %24, %0 : !s32i, !cir.ptr<!s32i> loc(#loc264)
            } else {
              %23 = cir.get_global @".str" : !cir.ptr<!cir.array<!s8i x 16>> loc(#loc135)
              %24 = cir.cast(array_to_ptrdecay, %23 : !cir.ptr<!cir.array<!s8i x 16>>), !cir.ptr<!s8i> loc(#loc135)
              cir.call @printLine(%24) : (!cir.ptr<!s8i>) -> () loc(#loc136)
            } loc(#loc263)
          } loc(#loc261)
        } loc(#loc259)
      } loc(#loc252)
    } loc(#loc250)
    cir.scope {
      %2 = cir.get_global @globalReturnsTrueOrFalse : !cir.ptr<!cir.func<(...) -> !s32i>> loc(#loc266)
      %3 = cir.cast(bitcast, %2 : !cir.ptr<!cir.func<(...) -> !s32i>>), !cir.ptr<!cir.func<() -> !s32i>> loc(#loc266)
      %4 = cir.call %3() : (!cir.ptr<!cir.func<() -> !s32i>>) -> !s32i loc(#loc139)
      %5 = cir.cast(int_to_bool, %4 : !s32i), !cir.bool loc(#loc139)
      cir.if %5 {
        cir.scope {
          %6 = cir.load %0 : !cir.ptr<!s32i>, !s32i loc(#loc146)
          %7 = cir.const #cir.int<2147483647> : !s32i loc(#loc147)
          %8 = cir.cmp(lt, %6, %7) : !s32i, !cir.bool loc(#loc269)
          cir.if %8 {
            %9 = cir.alloca !s32i, !cir.ptr<!s32i>, ["result", init] {alignment = 4 : i64} loc(#loc271)
            %10 = cir.load %0 : !cir.ptr<!s32i>, !s32i loc(#loc153)
            %11 = cir.unary(inc, %10) nsw : !s32i, !s32i loc(#loc153)
            cir.store %11, %0 : !s32i, !cir.ptr<!s32i> loc(#loc272)
            %12 = cir.load %0 : !cir.ptr<!s32i>, !s32i loc(#loc152)
            cir.store %12, %9 : !s32i, !cir.ptr<!s32i> loc(#loc271)
            %13 = cir.load %9 : !cir.ptr<!s32i>, !s32i loc(#loc155)
            cir.call @printIntLine(%13) : (!s32i) -> () loc(#loc156)
          } else {
            %9 = cir.get_global @".str.1" : !cir.ptr<!cir.array<!s8i x 54>> loc(#loc157)
            %10 = cir.cast(array_to_ptrdecay, %9 : !cir.ptr<!cir.array<!s8i x 54>>), !cir.ptr<!s8i> loc(#loc157)
            cir.call @printLine(%10) : (!cir.ptr<!s8i>) -> () loc(#loc158)
          } loc(#loc270)
        } loc(#loc268)
      } else {
        cir.scope {
          %6 = cir.load %0 : !cir.ptr<!s32i>, !s32i loc(#loc161)
          %7 = cir.const #cir.int<2147483647> : !s32i loc(#loc162)
          %8 = cir.cmp(lt, %6, %7) : !s32i, !cir.bool loc(#loc274)
          cir.if %8 {
            %9 = cir.alloca !s32i, !cir.ptr<!s32i>, ["result", init] {alignment = 4 : i64} loc(#loc276)
            %10 = cir.load %0 : !cir.ptr<!s32i>, !s32i loc(#loc168)
            %11 = cir.unary(inc, %10) nsw : !s32i, !s32i loc(#loc168)
            cir.store %11, %0 : !s32i, !cir.ptr<!s32i> loc(#loc277)
            %12 = cir.load %0 : !cir.ptr<!s32i>, !s32i loc(#loc167)
            cir.store %12, %9 : !s32i, !cir.ptr<!s32i> loc(#loc276)
            %13 = cir.load %9 : !cir.ptr<!s32i>, !s32i loc(#loc170)
            cir.call @printIntLine(%13) : (!s32i) -> () loc(#loc171)
          } else {
            %9 = cir.get_global @".str.1" : !cir.ptr<!cir.array<!s8i x 54>> loc(#loc172)
            %10 = cir.cast(array_to_ptrdecay, %9 : !cir.ptr<!cir.array<!s8i x 54>>), !cir.ptr<!s8i> loc(#loc172)
            cir.call @printLine(%10) : (!cir.ptr<!s8i>) -> () loc(#loc173)
          } loc(#loc275)
        } loc(#loc273)
      } loc(#loc267)
    } loc(#loc265)
    cir.return loc(#loc85)
  } loc(#loc247)
  cir.func no_proto internal private @goodG2B() extra(#fn_attr1) {
    %0 = cir.alloca !s32i, !cir.ptr<!s32i>, ["data"] {alignment = 4 : i64} loc(#loc279)
    %1 = cir.const #cir.int<0> : !s32i loc(#loc178)
    cir.store %1, %0 : !s32i, !cir.ptr<!s32i> loc(#loc280)
    cir.scope {
      %2 = cir.get_global @globalReturnsTrueOrFalse : !cir.ptr<!cir.func<(...) -> !s32i>> loc(#loc282)
      %3 = cir.cast(bitcast, %2 : !cir.ptr<!cir.func<(...) -> !s32i>>), !cir.ptr<!cir.func<() -> !s32i>> loc(#loc282)
      %4 = cir.call %3() : (!cir.ptr<!cir.func<() -> !s32i>>) -> !s32i loc(#loc182)
      %5 = cir.cast(int_to_bool, %4 : !s32i), !cir.bool loc(#loc182)
      cir.if %5 {
        %6 = cir.const #cir.int<2> : !s32i loc(#loc187)
        cir.store %6, %0 : !s32i, !cir.ptr<!s32i> loc(#loc284)
      } else {
        %6 = cir.const #cir.int<2> : !s32i loc(#loc189)
        cir.store %6, %0 : !s32i, !cir.ptr<!s32i> loc(#loc285)
      } loc(#loc283)
    } loc(#loc281)
    cir.scope {
      %2 = cir.get_global @globalReturnsTrueOrFalse : !cir.ptr<!cir.func<(...) -> !s32i>> loc(#loc287)
      %3 = cir.cast(bitcast, %2 : !cir.ptr<!cir.func<(...) -> !s32i>>), !cir.ptr<!cir.func<() -> !s32i>> loc(#loc287)
      %4 = cir.call %3() : (!cir.ptr<!cir.func<() -> !s32i>>) -> !s32i loc(#loc193)
      %5 = cir.cast(int_to_bool, %4 : !s32i), !cir.bool loc(#loc193)
      cir.if %5 {
        cir.scope {
          %6 = cir.alloca !s32i, !cir.ptr<!s32i>, ["result", init] {alignment = 4 : i64} loc(#loc290)
          %7 = cir.load %0 : !cir.ptr<!s32i>, !s32i loc(#loc202)
          %8 = cir.unary(inc, %7) nsw : !s32i, !s32i loc(#loc202)
          cir.store %8, %0 : !s32i, !cir.ptr<!s32i> loc(#loc291)
          %9 = cir.load %0 : !cir.ptr<!s32i>, !s32i loc(#loc201)
          cir.store %9, %6 : !s32i, !cir.ptr<!s32i> loc(#loc290)
          %10 = cir.load %6 : !cir.ptr<!s32i>, !s32i loc(#loc204)
          cir.call @printIntLine(%10) : (!s32i) -> () loc(#loc205)
        } loc(#loc289)
      } else {
        cir.scope {
          %6 = cir.alloca !s32i, !cir.ptr<!s32i>, ["result", init] {alignment = 4 : i64} loc(#loc293)
          %7 = cir.load %0 : !cir.ptr<!s32i>, !s32i loc(#loc210)
          %8 = cir.unary(inc, %7) nsw : !s32i, !s32i loc(#loc210)
          cir.store %8, %0 : !s32i, !cir.ptr<!s32i> loc(#loc294)
          %9 = cir.load %0 : !cir.ptr<!s32i>, !s32i loc(#loc209)
          cir.store %9, %6 : !s32i, !cir.ptr<!s32i> loc(#loc293)
          %10 = cir.load %6 : !cir.ptr<!s32i>, !s32i loc(#loc212)
          cir.call @printIntLine(%10) : (!s32i) -> () loc(#loc213)
        } loc(#loc292)
      } loc(#loc288)
    } loc(#loc286)
    cir.return loc(#loc175)
  } loc(#loc278)
} loc(#loc)
#loc = loc("/workspaces/juliet-c/testcases/CWE190_Integer_Overflow/s07/CWE190_Integer_Overflow__int_fgets_preinc_12.c":0:0)
#loc1 = loc("../../../testcasesupport/std_testcase_io.h":52:1)
#loc2 = loc("../../../testcasesupport/std_testcase_io.h":52:30)
#loc3 = loc("/usr/include/stdio.h":654:1)
#loc4 = loc("/usr/include/stdio.h":655:59)
#loc5 = loc("/usr/include/stdio.h":149:1)
#loc6 = loc("/usr/include/stdio.h":149:14)
#loc7 = loc("/usr/include/stdlib.h":105:1)
#loc8 = loc("/usr/include/stdlib.h":106:33)
#loc9 = loc("../../../testcasesupport/std_testcase_io.h":14:1)
#loc10 = loc("../../../testcasesupport/std_testcase_io.h":14:33)
#loc11 = loc("CWE190_Integer_Overflow__int_fgets_preinc_12.c":41:27)
#loc12 = loc("../../../testcasesupport/std_testcase_io.h":18:1)
#loc13 = loc("../../../testcasesupport/std_testcase_io.h":18:33)
#loc14 = loc("CWE190_Integer_Overflow__int_fgets_preinc_12.c":70:23)
#loc15 = loc("CWE190_Integer_Overflow__int_fgets_preinc_12.c":24:1)
#loc16 = loc("CWE190_Integer_Overflow__int_fgets_preinc_12.c":73:1)
#loc17 = loc("CWE190_Integer_Overflow__int_fgets_preinc_12.c":26:5)
#loc18 = loc("CWE190_Integer_Overflow__int_fgets_preinc_12.c":26:9)
#loc19 = loc("CWE190_Integer_Overflow__int_fgets_preinc_12.c":28:12)
#loc20 = loc("CWE190_Integer_Overflow__int_fgets_preinc_12.c":28:5)
#loc21 = loc("CWE190_Integer_Overflow__int_fgets_preinc_12.c":29:5)
#loc22 = loc("CWE190_Integer_Overflow__int_fgets_preinc_12.c":49:5)
#loc23 = loc("CWE190_Integer_Overflow__int_fgets_preinc_12.c":29:8)
#loc24 = loc("CWE190_Integer_Overflow__int_fgets_preinc_12.c":29:33)
#loc25 = loc("CWE190_Integer_Overflow__int_fgets_preinc_12.c":30:5)
#loc26 = loc("CWE190_Integer_Overflow__int_fgets_preinc_12.c":44:5)
#loc27 = loc("CWE190_Integer_Overflow__int_fgets_preinc_12.c":46:5)
#loc28 = loc("CWE190_Integer_Overflow__int_fgets_preinc_12.c":31:9)
#loc29 = loc("CWE190_Integer_Overflow__int_fgets_preinc_12.c":43:9)
#loc30 = loc("CWE190_Integer_Overflow__int_fgets_preinc_12.c":32:13)
#loc31 = loc("CWE190_Integer_Overflow__int_fgets_preinc_12.c":32:49)
#loc32 = loc("CWE190_Integer_Overflow__int_fgets_preinc_12.c":34:13)
#loc33 = loc("CWE190_Integer_Overflow__int_fgets_preinc_12.c":42:13)
#loc34 = loc("CWE190_Integer_Overflow__int_fgets_preinc_12.c":34:23)
#loc35 = loc("CWE190_Integer_Overflow__int_fgets_preinc_12.c":34:36)
#loc36 = loc("CWE190_Integer_Overflow__int_fgets_preinc_12.c":34:53)
#loc37 = loc("CWE190_Integer_Overflow__int_fgets_preinc_12.c":34:17)
#loc38 = loc("CWE190_Integer_Overflow__int_fgets_preinc_12.c":34:63)
#loc39 = loc("CWE190_Integer_Overflow__int_fgets_preinc_12.c":35:13)
#loc40 = loc("CWE190_Integer_Overflow__int_fgets_preinc_12.c":38:13)
#loc41 = loc("CWE190_Integer_Overflow__int_fgets_preinc_12.c":40:13)
#loc42 = loc("CWE190_Integer_Overflow__int_fgets_preinc_12.c":37:29)
#loc43 = loc("CWE190_Integer_Overflow__int_fgets_preinc_12.c":37:24)
#loc44 = loc("CWE190_Integer_Overflow__int_fgets_preinc_12.c":37:17)
#loc45 = loc("CWE190_Integer_Overflow__int_fgets_preinc_12.c":37:40)
#loc46 = loc("CWE190_Integer_Overflow__int_fgets_preinc_12.c":41:17)
#loc47 = loc("CWE190_Integer_Overflow__int_fgets_preinc_12.c":48:16)
#loc48 = loc("CWE190_Integer_Overflow__int_fgets_preinc_12.c":48:9)
#loc49 = loc("CWE190_Integer_Overflow__int_fgets_preinc_12.c":50:5)
#loc50 = loc("CWE190_Integer_Overflow__int_fgets_preinc_12.c":72:5)
#loc51 = loc("CWE190_Integer_Overflow__int_fgets_preinc_12.c":50:8)
#loc52 = loc("CWE190_Integer_Overflow__int_fgets_preinc_12.c":50:33)
#loc53 = loc("CWE190_Integer_Overflow__int_fgets_preinc_12.c":51:5)
#loc54 = loc("CWE190_Integer_Overflow__int_fgets_preinc_12.c":58:5)
#loc55 = loc("CWE190_Integer_Overflow__int_fgets_preinc_12.c":60:5)
#loc56 = loc("CWE190_Integer_Overflow__int_fgets_preinc_12.c":52:9)
#loc57 = loc("CWE190_Integer_Overflow__int_fgets_preinc_12.c":57:9)
#loc58 = loc("CWE190_Integer_Overflow__int_fgets_preinc_12.c":55:13)
#loc59 = loc("CWE190_Integer_Overflow__int_fgets_preinc_12.c":55:26)
#loc60 = loc("CWE190_Integer_Overflow__int_fgets_preinc_12.c":54:13)
#loc61 = loc("CWE190_Integer_Overflow__int_fgets_preinc_12.c":54:15)
#loc62 = loc("CWE190_Integer_Overflow__int_fgets_preinc_12.c":56:26)
#loc63 = loc("CWE190_Integer_Overflow__int_fgets_preinc_12.c":56:13)
#loc64 = loc("CWE190_Integer_Overflow__int_fgets_preinc_12.c":62:9)
#loc65 = loc("CWE190_Integer_Overflow__int_fgets_preinc_12.c":71:9)
#loc66 = loc("CWE190_Integer_Overflow__int_fgets_preinc_12.c":62:13)
#loc67 = loc("CWE190_Integer_Overflow__int_fgets_preinc_12.c":62:20)
#loc68 = loc("CWE190_Integer_Overflow__int_fgets_preinc_12.c":63:9)
#loc69 = loc("CWE190_Integer_Overflow__int_fgets_preinc_12.c":67:9)
#loc70 = loc("CWE190_Integer_Overflow__int_fgets_preinc_12.c":69:9)
#loc71 = loc("CWE190_Integer_Overflow__int_fgets_preinc_12.c":65:13)
#loc72 = loc("CWE190_Integer_Overflow__int_fgets_preinc_12.c":65:26)
#loc73 = loc("CWE190_Integer_Overflow__int_fgets_preinc_12.c":64:13)
#loc74 = loc("CWE190_Integer_Overflow__int_fgets_preinc_12.c":64:15)
#loc75 = loc("CWE190_Integer_Overflow__int_fgets_preinc_12.c":66:26)
#loc76 = loc("CWE190_Integer_Overflow__int_fgets_preinc_12.c":66:13)
#loc77 = loc("CWE190_Integer_Overflow__int_fgets_preinc_12.c":70:13)
#loc78 = loc("CWE190_Integer_Overflow__int_fgets_preinc_12.c":187:1)
#loc79 = loc("CWE190_Integer_Overflow__int_fgets_preinc_12.c":191:1)
#loc80 = loc("CWE190_Integer_Overflow__int_fgets_preinc_12.c":189:5)
#loc81 = loc("CWE190_Integer_Overflow__int_fgets_preinc_12.c":189:13)
#loc82 = loc("CWE190_Integer_Overflow__int_fgets_preinc_12.c":190:5)
#loc83 = loc("CWE190_Integer_Overflow__int_fgets_preinc_12.c":190:13)
#loc84 = loc("CWE190_Integer_Overflow__int_fgets_preinc_12.c":82:1)
#loc85 = loc("CWE190_Integer_Overflow__int_fgets_preinc_12.c":147:1)
#loc86 = loc("CWE190_Integer_Overflow__int_fgets_preinc_12.c":84:5)
#loc87 = loc("CWE190_Integer_Overflow__int_fgets_preinc_12.c":84:9)
#loc88 = loc("CWE190_Integer_Overflow__int_fgets_preinc_12.c":86:12)
#loc89 = loc("CWE190_Integer_Overflow__int_fgets_preinc_12.c":86:5)
#loc90 = loc("CWE190_Integer_Overflow__int_fgets_preinc_12.c":87:5)
#loc91 = loc("CWE190_Integer_Overflow__int_fgets_preinc_12.c":118:5)
#loc92 = loc("CWE190_Integer_Overflow__int_fgets_preinc_12.c":87:8)
#loc93 = loc("CWE190_Integer_Overflow__int_fgets_preinc_12.c":87:33)
#loc94 = loc("CWE190_Integer_Overflow__int_fgets_preinc_12.c":88:5)
#loc95 = loc("CWE190_Integer_Overflow__int_fgets_preinc_12.c":102:5)
#loc96 = loc("CWE190_Integer_Overflow__int_fgets_preinc_12.c":104:5)
#loc97 = loc("CWE190_Integer_Overflow__int_fgets_preinc_12.c":89:9)
#loc98 = loc("CWE190_Integer_Overflow__int_fgets_preinc_12.c":101:9)
#loc99 = loc("CWE190_Integer_Overflow__int_fgets_preinc_12.c":90:13)
#loc100 = loc("CWE190_Integer_Overflow__int_fgets_preinc_12.c":90:49)
#loc101 = loc("CWE190_Integer_Overflow__int_fgets_preinc_12.c":92:13)
#loc102 = loc("CWE190_Integer_Overflow__int_fgets_preinc_12.c":100:13)
#loc103 = loc("CWE190_Integer_Overflow__int_fgets_preinc_12.c":92:23)
#loc104 = loc("CWE190_Integer_Overflow__int_fgets_preinc_12.c":92:36)
#loc105 = loc("CWE190_Integer_Overflow__int_fgets_preinc_12.c":92:53)
#loc106 = loc("CWE190_Integer_Overflow__int_fgets_preinc_12.c":92:17)
#loc107 = loc("CWE190_Integer_Overflow__int_fgets_preinc_12.c":92:63)
#loc108 = loc("CWE190_Integer_Overflow__int_fgets_preinc_12.c":93:13)
#loc109 = loc("CWE190_Integer_Overflow__int_fgets_preinc_12.c":96:13)
#loc110 = loc("CWE190_Integer_Overflow__int_fgets_preinc_12.c":98:13)
#loc111 = loc("CWE190_Integer_Overflow__int_fgets_preinc_12.c":95:29)
#loc112 = loc("CWE190_Integer_Overflow__int_fgets_preinc_12.c":95:24)
#loc113 = loc("CWE190_Integer_Overflow__int_fgets_preinc_12.c":95:17)
#loc114 = loc("CWE190_Integer_Overflow__int_fgets_preinc_12.c":95:40)
#loc115 = loc("CWE190_Integer_Overflow__int_fgets_preinc_12.c":99:27)
#loc116 = loc("CWE190_Integer_Overflow__int_fgets_preinc_12.c":99:17)
#loc117 = loc("CWE190_Integer_Overflow__int_fgets_preinc_12.c":105:9)
#loc118 = loc("CWE190_Integer_Overflow__int_fgets_preinc_12.c":117:9)
#loc119 = loc("CWE190_Integer_Overflow__int_fgets_preinc_12.c":106:13)
#loc120 = loc("CWE190_Integer_Overflow__int_fgets_preinc_12.c":106:49)
#loc121 = loc("CWE190_Integer_Overflow__int_fgets_preinc_12.c":108:13)
#loc122 = loc("CWE190_Integer_Overflow__int_fgets_preinc_12.c":116:13)
#loc123 = loc("CWE190_Integer_Overflow__int_fgets_preinc_12.c":108:23)
#loc124 = loc("CWE190_Integer_Overflow__int_fgets_preinc_12.c":108:36)
#loc125 = loc("CWE190_Integer_Overflow__int_fgets_preinc_12.c":108:53)
#loc126 = loc("CWE190_Integer_Overflow__int_fgets_preinc_12.c":108:17)
#loc127 = loc("CWE190_Integer_Overflow__int_fgets_preinc_12.c":108:63)
#loc128 = loc("CWE190_Integer_Overflow__int_fgets_preinc_12.c":109:13)
#loc129 = loc("CWE190_Integer_Overflow__int_fgets_preinc_12.c":112:13)
#loc130 = loc("CWE190_Integer_Overflow__int_fgets_preinc_12.c":114:13)
#loc131 = loc("CWE190_Integer_Overflow__int_fgets_preinc_12.c":111:29)
#loc132 = loc("CWE190_Integer_Overflow__int_fgets_preinc_12.c":111:24)
#loc133 = loc("CWE190_Integer_Overflow__int_fgets_preinc_12.c":111:17)
#loc134 = loc("CWE190_Integer_Overflow__int_fgets_preinc_12.c":111:40)
#loc135 = loc("CWE190_Integer_Overflow__int_fgets_preinc_12.c":115:27)
#loc136 = loc("CWE190_Integer_Overflow__int_fgets_preinc_12.c":115:17)
#loc137 = loc("CWE190_Integer_Overflow__int_fgets_preinc_12.c":119:5)
#loc138 = loc("CWE190_Integer_Overflow__int_fgets_preinc_12.c":146:5)
#loc139 = loc("CWE190_Integer_Overflow__int_fgets_preinc_12.c":119:8)
#loc140 = loc("CWE190_Integer_Overflow__int_fgets_preinc_12.c":119:33)
#loc141 = loc("CWE190_Integer_Overflow__int_fgets_preinc_12.c":120:5)
#loc142 = loc("CWE190_Integer_Overflow__int_fgets_preinc_12.c":132:5)
#loc143 = loc("CWE190_Integer_Overflow__int_fgets_preinc_12.c":134:5)
#loc144 = loc("CWE190_Integer_Overflow__int_fgets_preinc_12.c":122:9)
#loc145 = loc("CWE190_Integer_Overflow__int_fgets_preinc_12.c":131:9)
#loc146 = loc("CWE190_Integer_Overflow__int_fgets_preinc_12.c":122:13)
#loc147 = loc("CWE190_Integer_Overflow__int_fgets_preinc_12.c":122:20)
#loc148 = loc("CWE190_Integer_Overflow__int_fgets_preinc_12.c":123:9)
#loc149 = loc("CWE190_Integer_Overflow__int_fgets_preinc_12.c":127:9)
#loc150 = loc("CWE190_Integer_Overflow__int_fgets_preinc_12.c":129:9)
#loc151 = loc("CWE190_Integer_Overflow__int_fgets_preinc_12.c":125:13)
#loc152 = loc("CWE190_Integer_Overflow__int_fgets_preinc_12.c":125:26)
#loc153 = loc("CWE190_Integer_Overflow__int_fgets_preinc_12.c":124:13)
#loc154 = loc("CWE190_Integer_Overflow__int_fgets_preinc_12.c":124:15)
#loc155 = loc("CWE190_Integer_Overflow__int_fgets_preinc_12.c":126:26)
#loc156 = loc("CWE190_Integer_Overflow__int_fgets_preinc_12.c":126:13)
#loc157 = loc("CWE190_Integer_Overflow__int_fgets_preinc_12.c":130:23)
#loc158 = loc("CWE190_Integer_Overflow__int_fgets_preinc_12.c":130:13)
#loc159 = loc("CWE190_Integer_Overflow__int_fgets_preinc_12.c":136:9)
#loc160 = loc("CWE190_Integer_Overflow__int_fgets_preinc_12.c":145:9)
#loc161 = loc("CWE190_Integer_Overflow__int_fgets_preinc_12.c":136:13)
#loc162 = loc("CWE190_Integer_Overflow__int_fgets_preinc_12.c":136:20)
#loc163 = loc("CWE190_Integer_Overflow__int_fgets_preinc_12.c":137:9)
#loc164 = loc("CWE190_Integer_Overflow__int_fgets_preinc_12.c":141:9)
#loc165 = loc("CWE190_Integer_Overflow__int_fgets_preinc_12.c":143:9)
#loc166 = loc("CWE190_Integer_Overflow__int_fgets_preinc_12.c":139:13)
#loc167 = loc("CWE190_Integer_Overflow__int_fgets_preinc_12.c":139:26)
#loc168 = loc("CWE190_Integer_Overflow__int_fgets_preinc_12.c":138:13)
#loc169 = loc("CWE190_Integer_Overflow__int_fgets_preinc_12.c":138:15)
#loc170 = loc("CWE190_Integer_Overflow__int_fgets_preinc_12.c":140:26)
#loc171 = loc("CWE190_Integer_Overflow__int_fgets_preinc_12.c":140:13)
#loc172 = loc("CWE190_Integer_Overflow__int_fgets_preinc_12.c":144:23)
#loc173 = loc("CWE190_Integer_Overflow__int_fgets_preinc_12.c":144:13)
#loc174 = loc("CWE190_Integer_Overflow__int_fgets_preinc_12.c":152:1)
#loc175 = loc("CWE190_Integer_Overflow__int_fgets_preinc_12.c":185:1)
#loc176 = loc("CWE190_Integer_Overflow__int_fgets_preinc_12.c":154:5)
#loc177 = loc("CWE190_Integer_Overflow__int_fgets_preinc_12.c":154:9)
#loc178 = loc("CWE190_Integer_Overflow__int_fgets_preinc_12.c":156:12)
#loc179 = loc("CWE190_Integer_Overflow__int_fgets_preinc_12.c":156:5)
#loc180 = loc("CWE190_Integer_Overflow__int_fgets_preinc_12.c":157:5)
#loc181 = loc("CWE190_Integer_Overflow__int_fgets_preinc_12.c":166:5)
#loc182 = loc("CWE190_Integer_Overflow__int_fgets_preinc_12.c":157:8)
#loc183 = loc("CWE190_Integer_Overflow__int_fgets_preinc_12.c":157:33)
#loc184 = loc("CWE190_Integer_Overflow__int_fgets_preinc_12.c":158:5)
#loc185 = loc("CWE190_Integer_Overflow__int_fgets_preinc_12.c":161:5)
#loc186 = loc("CWE190_Integer_Overflow__int_fgets_preinc_12.c":163:5)
#loc187 = loc("CWE190_Integer_Overflow__int_fgets_preinc_12.c":160:16)
#loc188 = loc("CWE190_Integer_Overflow__int_fgets_preinc_12.c":160:9)
#loc189 = loc("CWE190_Integer_Overflow__int_fgets_preinc_12.c":165:16)
#loc190 = loc("CWE190_Integer_Overflow__int_fgets_preinc_12.c":165:9)
#loc191 = loc("CWE190_Integer_Overflow__int_fgets_preinc_12.c":167:5)
#loc192 = loc("CWE190_Integer_Overflow__int_fgets_preinc_12.c":184:5)
#loc193 = loc("CWE190_Integer_Overflow__int_fgets_preinc_12.c":167:8)
#loc194 = loc("CWE190_Integer_Overflow__int_fgets_preinc_12.c":167:33)
#loc195 = loc("CWE190_Integer_Overflow__int_fgets_preinc_12.c":168:5)
#loc196 = loc("CWE190_Integer_Overflow__int_fgets_preinc_12.c":175:5)
#loc197 = loc("CWE190_Integer_Overflow__int_fgets_preinc_12.c":177:5)
#loc198 = loc("CWE190_Integer_Overflow__int_fgets_preinc_12.c":169:9)
#loc199 = loc("CWE190_Integer_Overflow__int_fgets_preinc_12.c":174:9)
#loc200 = loc("CWE190_Integer_Overflow__int_fgets_preinc_12.c":172:13)
#loc201 = loc("CWE190_Integer_Overflow__int_fgets_preinc_12.c":172:26)
#loc202 = loc("CWE190_Integer_Overflow__int_fgets_preinc_12.c":171:13)
#loc203 = loc("CWE190_Integer_Overflow__int_fgets_preinc_12.c":171:15)
#loc204 = loc("CWE190_Integer_Overflow__int_fgets_preinc_12.c":173:26)
#loc205 = loc("CWE190_Integer_Overflow__int_fgets_preinc_12.c":173:13)
#loc206 = loc("CWE190_Integer_Overflow__int_fgets_preinc_12.c":178:9)
#loc207 = loc("CWE190_Integer_Overflow__int_fgets_preinc_12.c":183:9)
#loc208 = loc("CWE190_Integer_Overflow__int_fgets_preinc_12.c":181:13)
#loc209 = loc("CWE190_Integer_Overflow__int_fgets_preinc_12.c":181:26)
#loc210 = loc("CWE190_Integer_Overflow__int_fgets_preinc_12.c":180:13)
#loc211 = loc("CWE190_Integer_Overflow__int_fgets_preinc_12.c":180:15)
#loc212 = loc("CWE190_Integer_Overflow__int_fgets_preinc_12.c":182:26)
#loc213 = loc("CWE190_Integer_Overflow__int_fgets_preinc_12.c":182:13)
#loc214 = loc(fused[#loc1, #loc2])
#loc215 = loc(fused[#loc3, #loc4])
#loc216 = loc(fused[#loc5, #loc6])
#loc217 = loc(fused[#loc7, #loc8])
#loc218 = loc(fused[#loc9, #loc10])
#loc219 = loc(fused[#loc12, #loc13])
#loc220 = loc(fused[#loc15, #loc16])
#loc221 = loc(fused[#loc17, #loc18])
#loc222 = loc(fused[#loc20, #loc19])
#loc223 = loc(fused[#loc21, #loc22])
#loc224 = loc(fused[#loc23, #loc24])
#loc225 = loc(fused[#loc25, #loc26, #loc27, #loc22])
#loc226 = loc(fused[#loc28, #loc29])
#loc227 = loc(fused[#loc30, #loc31])
#loc228 = loc(fused[#loc32, #loc33])
#loc229 = loc(fused[#loc37, #loc38])
#loc230 = loc(fused[#loc39, #loc40, #loc41, #loc33])
#loc231 = loc(fused[#loc44, #loc45])
#loc232 = loc(fused[#loc48, #loc47])
#loc233 = loc(fused[#loc49, #loc50])
#loc234 = loc(fused[#loc51, #loc52])
#loc235 = loc(fused[#loc53, #loc54, #loc55, #loc50])
#loc236 = loc(fused[#loc56, #loc57])
#loc237 = loc(fused[#loc58, #loc59])
#loc238 = loc(fused[#loc60, #loc61])
#loc239 = loc(fused[#loc64, #loc65])
#loc240 = loc(fused[#loc66, #loc67])
#loc241 = loc(fused[#loc68, #loc69, #loc70, #loc65])
#loc242 = loc(fused[#loc71, #loc72])
#loc243 = loc(fused[#loc73, #loc74])
#loc244 = loc(fused[#loc78, #loc79])
#loc245 = loc(fused[#loc80, #loc81])
#loc246 = loc(fused[#loc82, #loc83])
#loc247 = loc(fused[#loc84, #loc85])
#loc248 = loc(fused[#loc86, #loc87])
#loc249 = loc(fused[#loc89, #loc88])
#loc250 = loc(fused[#loc90, #loc91])
#loc251 = loc(fused[#loc92, #loc93])
#loc252 = loc(fused[#loc94, #loc95, #loc96, #loc91])
#loc253 = loc(fused[#loc97, #loc98])
#loc254 = loc(fused[#loc99, #loc100])
#loc255 = loc(fused[#loc101, #loc102])
#loc256 = loc(fused[#loc106, #loc107])
#loc257 = loc(fused[#loc108, #loc109, #loc110, #loc102])
#loc258 = loc(fused[#loc113, #loc114])
#loc259 = loc(fused[#loc117, #loc118])
#loc260 = loc(fused[#loc119, #loc120])
#loc261 = loc(fused[#loc121, #loc122])
#loc262 = loc(fused[#loc126, #loc127])
#loc263 = loc(fused[#loc128, #loc129, #loc130, #loc122])
#loc264 = loc(fused[#loc133, #loc134])
#loc265 = loc(fused[#loc137, #loc138])
#loc266 = loc(fused[#loc139, #loc140])
#loc267 = loc(fused[#loc141, #loc142, #loc143, #loc138])
#loc268 = loc(fused[#loc144, #loc145])
#loc269 = loc(fused[#loc146, #loc147])
#loc270 = loc(fused[#loc148, #loc149, #loc150, #loc145])
#loc271 = loc(fused[#loc151, #loc152])
#loc272 = loc(fused[#loc153, #loc154])
#loc273 = loc(fused[#loc159, #loc160])
#loc274 = loc(fused[#loc161, #loc162])
#loc275 = loc(fused[#loc163, #loc164, #loc165, #loc160])
#loc276 = loc(fused[#loc166, #loc167])
#loc277 = loc(fused[#loc168, #loc169])
#loc278 = loc(fused[#loc174, #loc175])
#loc279 = loc(fused[#loc176, #loc177])
#loc280 = loc(fused[#loc179, #loc178])
#loc281 = loc(fused[#loc180, #loc181])
#loc282 = loc(fused[#loc182, #loc183])
#loc283 = loc(fused[#loc184, #loc185, #loc186, #loc181])
#loc284 = loc(fused[#loc188, #loc187])
#loc285 = loc(fused[#loc190, #loc189])
#loc286 = loc(fused[#loc191, #loc192])
#loc287 = loc(fused[#loc193, #loc194])
#loc288 = loc(fused[#loc195, #loc196, #loc197, #loc192])
#loc289 = loc(fused[#loc198, #loc199])
#loc290 = loc(fused[#loc200, #loc201])
#loc291 = loc(fused[#loc202, #loc203])
#loc292 = loc(fused[#loc206, #loc207])
#loc293 = loc(fused[#loc208, #loc209])
#loc294 = loc(fused[#loc210, #loc211])
