!s32i = !cir.int<s, 32>
!s8i = !cir.int<s, 8>
!void = !cir.void
#fn_attr = #cir<extra({nothrow = #cir.nothrow})>
#fn_attr1 = #cir<extra({inline = #cir.inline<no>, nothrow = #cir.nothrow, optnone = #cir.optnone})>
module @"/home/ladisgin/git_proj/juliet-c/testcases/CWE391_Unchecked_Error_Condition/CWE391_Unchecked_Error_Condition__sqrt_12.c" attributes {cir.lang = #cir.lang<c>, cir.sob = #cir.signed_overflow_behavior<undefined>, cir.triple = "x86_64-unknown-linux-gnu", dlti.dl_spec = #dlti.dl_spec<i64 = dense<64> : vector<2xi64>, i128 = dense<128> : vector<2xi64>, !llvm.ptr<271> = dense<32> : vector<4xi64>, !llvm.ptr<272> = dense<64> : vector<4xi64>, !llvm.ptr = dense<64> : vector<4xi64>, f80 = dense<128> : vector<2xi64>, i16 = dense<16> : vector<2xi64>, i32 = dense<32> : vector<2xi64>, i1 = dense<8> : vector<2xi64>, i8 = dense<8> : vector<2xi64>, f64 = dense<64> : vector<2xi64>, f128 = dense<128> : vector<2xi64>, f16 = dense<16> : vector<2xi64>, !llvm.ptr<270> = dense<32> : vector<4xi64>, "dlti.stack_alignment" = 128 : i64, "dlti.endianness" = "little">} {
  cir.func no_proto private @globalReturnsTrueOrFalse(...) -> !s32i loc(#loc111)
  cir.func private @sqrt(!cir.double) -> !cir.double extra(#fn_attr) loc(#loc3)
  cir.func private @printDoubleLine(!cir.double) loc(#loc112)
  cir.func private @__errno_location() -> !cir.ptr<!s32i> extra(#fn_attr) loc(#loc113)
  cir.func private @printLine(!cir.ptr<!s8i>) loc(#loc114)
  cir.global "private" constant cir_private dsolocal @".str" = #cir.const_array<"sqrt() failed\00" : !cir.array<!s8i x 14>> : !cir.array<!s8i x 14> {alignment = 1 : i64} loc(#loc10)
  cir.func private @exit(!s32i) extra(#fn_attr) loc(#loc115)
  cir.func no_proto @CWE391_Unchecked_Error_Condition__sqrt_12_bad() extra(#fn_attr1) {
    %0 = cir.alloca !cir.double, !cir.ptr<!cir.double>, ["doubleNumber"] {alignment = 8 : i64} loc(#loc117)
    %1 = cir.alloca !cir.double, !cir.ptr<!cir.double>, ["doubleNumber"] {alignment = 8 : i64} loc(#loc118)
    cir.br ^bb1 loc(#loc119)
  ^bb1:  // pred: ^bb0
    %2 = cir.get_global @globalReturnsTrueOrFalse : !cir.ptr<!cir.func<!s32i (...)>> loc(#loc120)
    %3 = cir.cast(bitcast, %2 : !cir.ptr<!cir.func<!s32i (...)>>), !cir.ptr<!cir.func<!s32i ()>> loc(#loc120)
    %4 = cir.call %3() : (!cir.ptr<!cir.func<!s32i ()>>) -> !s32i loc(#loc21)
    %5 = cir.cast(int_to_bool, %4 : !s32i), !cir.bool loc(#loc21)
    cir.brcond %5 ^bb2, ^bb5 loc(#loc121)
  ^bb2:  // pred: ^bb1
    cir.br ^bb3 loc(#loc122)
  ^bb3:  // pred: ^bb2
    %6 = cir.get_global @sqrt : !cir.ptr<!cir.func<!cir.double (!cir.double)>> loc(#loc28)
    %7 = cir.const #cir.int<1> : !s32i loc(#loc29)
    %8 = cir.unary(minus, %7) : !s32i, !s32i loc(#loc30)
    %9 = cir.cast(int_to_float, %8 : !s32i), !cir.double loc(#loc30)
    %10 = cir.call @sqrt(%9) : (!cir.double) -> !cir.double extra(#fn_attr) loc(#loc28)
    cir.store %10, %0 : !cir.double, !cir.ptr<!cir.double> loc(#loc123)
    %11 = cir.load %0 : !cir.ptr<!cir.double>, !cir.double loc(#loc33)
    cir.call @printDoubleLine(%11) : (!cir.double) -> () loc(#loc34)
    cir.br ^bb4 loc(#loc27)
  ^bb4:  // pred: ^bb3
    cir.br ^bb12 loc(#loc24)
  ^bb5:  // pred: ^bb1
    cir.br ^bb6 loc(#loc124)
  ^bb6:  // pred: ^bb5
    %12 = cir.const #cir.int<0> : !s32i loc(#loc37)
    %13 = cir.call @__errno_location() : () -> !cir.ptr<!s32i> extra(#fn_attr) loc(#loc38)
    cir.store %12, %13 : !s32i, !cir.ptr<!s32i> loc(#loc125)
    %14 = cir.get_global @sqrt : !cir.ptr<!cir.func<!cir.double (!cir.double)>> loc(#loc39)
    %15 = cir.const #cir.int<1> : !s32i loc(#loc40)
    %16 = cir.unary(minus, %15) : !s32i, !s32i loc(#loc41)
    %17 = cir.cast(int_to_float, %16 : !s32i), !cir.double loc(#loc41)
    %18 = cir.call @sqrt(%17) : (!cir.double) -> !cir.double extra(#fn_attr) loc(#loc39)
    cir.store %18, %1 : !cir.double, !cir.ptr<!cir.double> loc(#loc126)
    cir.br ^bb7 loc(#loc127)
  ^bb7:  // pred: ^bb6
    %19 = cir.call @__errno_location() : () -> !cir.ptr<!s32i> extra(#fn_attr) loc(#loc46)
    %20 = cir.load %19 : !cir.ptr<!s32i>, !s32i loc(#loc46)
    %21 = cir.const #cir.int<33> : !s32i loc(#loc47)
    %22 = cir.cmp(eq, %20, %21) : !s32i, !cir.bool loc(#loc128)
    cir.brcond %22 ^bb8, ^bb9 loc(#loc129)
  ^bb8:  // pred: ^bb7
    %23 = cir.get_global @".str" : !cir.ptr<!cir.array<!s8i x 14>> loc(#loc10)
    %24 = cir.cast(array_to_ptrdecay, %23 : !cir.ptr<!cir.array<!s8i x 14>>), !cir.ptr<!s8i> loc(#loc10)
    cir.call @printLine(%24) : (!cir.ptr<!s8i>) -> () loc(#loc49)
    %25 = cir.get_global @exit : !cir.ptr<!cir.func<!void (!s32i)>> loc(#loc50)
    %26 = cir.const #cir.int<1> : !s32i loc(#loc51)
    cir.call @exit(%26) : (!s32i) -> () extra(#fn_attr) loc(#loc50)
    cir.br ^bb9 loc(#loc45)
  ^bb9:  // 2 preds: ^bb7, ^bb8
    cir.br ^bb10 loc(#loc45)
  ^bb10:  // pred: ^bb9
    %27 = cir.load %1 : !cir.ptr<!cir.double>, !cir.double loc(#loc52)
    cir.call @printDoubleLine(%27) : (!cir.double) -> () loc(#loc53)
    cir.br ^bb11 loc(#loc36)
  ^bb11:  // pred: ^bb10
    cir.br ^bb12 loc(#loc20)
  ^bb12:  // 2 preds: ^bb4, ^bb11
    cir.br ^bb13 loc(#loc20)
  ^bb13:  // pred: ^bb12
    cir.return loc(#loc14)
  } loc(#loc116)
  cir.func no_proto @CWE391_Unchecked_Error_Condition__sqrt_12_good() extra(#fn_attr1) {
    %0 = cir.get_global @good1 : !cir.ptr<!cir.func<!void ()>> loc(#loc131)
    cir.call %0() : (!cir.ptr<!cir.func<!void ()>>) -> () loc(#loc56)
    cir.return loc(#loc55)
  } loc(#loc130)
  cir.func no_proto internal private @good1() extra(#fn_attr1) {
    %0 = cir.alloca !cir.double, !cir.ptr<!cir.double>, ["doubleNumber"] {alignment = 8 : i64} loc(#loc133)
    %1 = cir.alloca !cir.double, !cir.ptr<!cir.double>, ["doubleNumber"] {alignment = 8 : i64} loc(#loc134)
    cir.br ^bb1 loc(#loc135)
  ^bb1:  // pred: ^bb0
    %2 = cir.get_global @globalReturnsTrueOrFalse : !cir.ptr<!cir.func<!s32i (...)>> loc(#loc136)
    %3 = cir.cast(bitcast, %2 : !cir.ptr<!cir.func<!s32i (...)>>), !cir.ptr<!cir.func<!s32i ()>> loc(#loc136)
    %4 = cir.call %3() : (!cir.ptr<!cir.func<!s32i ()>>) -> !s32i loc(#loc66)
    %5 = cir.cast(int_to_bool, %4 : !s32i), !cir.bool loc(#loc66)
    cir.brcond %5 ^bb2, ^bb9 loc(#loc137)
  ^bb2:  // pred: ^bb1
    cir.br ^bb3 loc(#loc138)
  ^bb3:  // pred: ^bb2
    %6 = cir.const #cir.int<0> : !s32i loc(#loc73)
    %7 = cir.call @__errno_location() : () -> !cir.ptr<!s32i> extra(#fn_attr) loc(#loc74)
    cir.store %6, %7 : !s32i, !cir.ptr<!s32i> loc(#loc139)
    %8 = cir.get_global @sqrt : !cir.ptr<!cir.func<!cir.double (!cir.double)>> loc(#loc75)
    %9 = cir.const #cir.int<1> : !s32i loc(#loc76)
    %10 = cir.unary(minus, %9) : !s32i, !s32i loc(#loc77)
    %11 = cir.cast(int_to_float, %10 : !s32i), !cir.double loc(#loc77)
    %12 = cir.call @sqrt(%11) : (!cir.double) -> !cir.double extra(#fn_attr) loc(#loc75)
    cir.store %12, %0 : !cir.double, !cir.ptr<!cir.double> loc(#loc140)
    cir.br ^bb4 loc(#loc141)
  ^bb4:  // pred: ^bb3
    %13 = cir.call @__errno_location() : () -> !cir.ptr<!s32i> extra(#fn_attr) loc(#loc82)
    %14 = cir.load %13 : !cir.ptr<!s32i>, !s32i loc(#loc82)
    %15 = cir.const #cir.int<33> : !s32i loc(#loc83)
    %16 = cir.cmp(eq, %14, %15) : !s32i, !cir.bool loc(#loc142)
    cir.brcond %16 ^bb5, ^bb6 loc(#loc143)
  ^bb5:  // pred: ^bb4
    %17 = cir.get_global @".str" : !cir.ptr<!cir.array<!s8i x 14>> loc(#loc85)
    %18 = cir.cast(array_to_ptrdecay, %17 : !cir.ptr<!cir.array<!s8i x 14>>), !cir.ptr<!s8i> loc(#loc85)
    cir.call @printLine(%18) : (!cir.ptr<!s8i>) -> () loc(#loc86)
    %19 = cir.get_global @exit : !cir.ptr<!cir.func<!void (!s32i)>> loc(#loc87)
    %20 = cir.const #cir.int<1> : !s32i loc(#loc88)
    cir.call @exit(%20) : (!s32i) -> () extra(#fn_attr) loc(#loc87)
    cir.br ^bb6 loc(#loc81)
  ^bb6:  // 2 preds: ^bb4, ^bb5
    cir.br ^bb7 loc(#loc81)
  ^bb7:  // pred: ^bb6
    %21 = cir.load %0 : !cir.ptr<!cir.double>, !cir.double loc(#loc89)
    cir.call @printDoubleLine(%21) : (!cir.double) -> () loc(#loc90)
    cir.br ^bb8 loc(#loc72)
  ^bb8:  // pred: ^bb7
    cir.br ^bb16 loc(#loc69)
  ^bb9:  // pred: ^bb1
    cir.br ^bb10 loc(#loc144)
  ^bb10:  // pred: ^bb9
    %22 = cir.const #cir.int<0> : !s32i loc(#loc93)
    %23 = cir.call @__errno_location() : () -> !cir.ptr<!s32i> extra(#fn_attr) loc(#loc94)
    cir.store %22, %23 : !s32i, !cir.ptr<!s32i> loc(#loc145)
    %24 = cir.get_global @sqrt : !cir.ptr<!cir.func<!cir.double (!cir.double)>> loc(#loc95)
    %25 = cir.const #cir.int<1> : !s32i loc(#loc96)
    %26 = cir.unary(minus, %25) : !s32i, !s32i loc(#loc97)
    %27 = cir.cast(int_to_float, %26 : !s32i), !cir.double loc(#loc97)
    %28 = cir.call @sqrt(%27) : (!cir.double) -> !cir.double extra(#fn_attr) loc(#loc95)
    cir.store %28, %1 : !cir.double, !cir.ptr<!cir.double> loc(#loc146)
    cir.br ^bb11 loc(#loc147)
  ^bb11:  // pred: ^bb10
    %29 = cir.call @__errno_location() : () -> !cir.ptr<!s32i> extra(#fn_attr) loc(#loc102)
    %30 = cir.load %29 : !cir.ptr<!s32i>, !s32i loc(#loc102)
    %31 = cir.const #cir.int<33> : !s32i loc(#loc103)
    %32 = cir.cmp(eq, %30, %31) : !s32i, !cir.bool loc(#loc148)
    cir.brcond %32 ^bb12, ^bb13 loc(#loc149)
  ^bb12:  // pred: ^bb11
    %33 = cir.get_global @".str" : !cir.ptr<!cir.array<!s8i x 14>> loc(#loc105)
    %34 = cir.cast(array_to_ptrdecay, %33 : !cir.ptr<!cir.array<!s8i x 14>>), !cir.ptr<!s8i> loc(#loc105)
    cir.call @printLine(%34) : (!cir.ptr<!s8i>) -> () loc(#loc106)
    %35 = cir.get_global @exit : !cir.ptr<!cir.func<!void (!s32i)>> loc(#loc107)
    %36 = cir.const #cir.int<1> : !s32i loc(#loc108)
    cir.call @exit(%36) : (!s32i) -> () extra(#fn_attr) loc(#loc107)
    cir.br ^bb13 loc(#loc101)
  ^bb13:  // 2 preds: ^bb11, ^bb12
    cir.br ^bb14 loc(#loc101)
  ^bb14:  // pred: ^bb13
    %37 = cir.load %1 : !cir.ptr<!cir.double>, !cir.double loc(#loc109)
    cir.call @printDoubleLine(%37) : (!cir.double) -> () loc(#loc110)
    cir.br ^bb15 loc(#loc92)
  ^bb15:  // pred: ^bb14
    cir.br ^bb16 loc(#loc65)
  ^bb16:  // 2 preds: ^bb8, ^bb15
    cir.br ^bb17 loc(#loc65)
  ^bb17:  // pred: ^bb16
    cir.return loc(#loc59)
  } loc(#loc132)
} loc(#loc)
#loc = loc("/home/ladisgin/git_proj/juliet-c/testcases/CWE391_Unchecked_Error_Condition/CWE391_Unchecked_Error_Condition__sqrt_12.c":0:0)
#loc1 = loc("../../testcasesupport/std_testcase_io.h":52:1)
#loc2 = loc("../../testcasesupport/std_testcase_io.h":52:30)
#loc3 = loc("/usr/include/bits/mathcalls.h":158:1)
#loc4 = loc("../../testcasesupport/std_testcase_io.h":38:1)
#loc5 = loc("../../testcasesupport/std_testcase_io.h":38:41)
#loc6 = loc("/usr/include/errno.h":37:1)
#loc7 = loc("/usr/include/errno.h":37:45)
#loc8 = loc("../../testcasesupport/std_testcase_io.h":14:1)
#loc9 = loc("../../testcasesupport/std_testcase_io.h":14:33)
#loc10 = loc("CWE391_Unchecked_Error_Condition__sqrt_12.c":44:27)
#loc11 = loc("/usr/include/stdlib.h":756:1)
#loc12 = loc("/usr/include/stdlib.h":756:70)
#loc13 = loc("CWE391_Unchecked_Error_Condition__sqrt_12.c":24:1)
#loc14 = loc("CWE391_Unchecked_Error_Condition__sqrt_12.c":50:1)
#loc15 = loc("CWE391_Unchecked_Error_Condition__sqrt_12.c":29:13)
#loc16 = loc("CWE391_Unchecked_Error_Condition__sqrt_12.c":29:20)
#loc17 = loc("CWE391_Unchecked_Error_Condition__sqrt_12.c":38:13)
#loc18 = loc("CWE391_Unchecked_Error_Condition__sqrt_12.c":38:20)
#loc19 = loc("CWE391_Unchecked_Error_Condition__sqrt_12.c":26:5)
#loc20 = loc("CWE391_Unchecked_Error_Condition__sqrt_12.c":49:5)
#loc21 = loc("CWE391_Unchecked_Error_Condition__sqrt_12.c":26:8)
#loc22 = loc("CWE391_Unchecked_Error_Condition__sqrt_12.c":26:33)
#loc23 = loc("CWE391_Unchecked_Error_Condition__sqrt_12.c":27:5)
#loc24 = loc("CWE391_Unchecked_Error_Condition__sqrt_12.c":34:5)
#loc25 = loc("CWE391_Unchecked_Error_Condition__sqrt_12.c":36:5)
#loc26 = loc("CWE391_Unchecked_Error_Condition__sqrt_12.c":28:9)
#loc27 = loc("CWE391_Unchecked_Error_Condition__sqrt_12.c":33:9)
#loc28 = loc("CWE391_Unchecked_Error_Condition__sqrt_12.c":30:36)
#loc29 = loc("CWE391_Unchecked_Error_Condition__sqrt_12.c":30:50)
#loc30 = loc("CWE391_Unchecked_Error_Condition__sqrt_12.c":30:49)
#loc31 = loc("CWE391_Unchecked_Error_Condition__sqrt_12.c":30:13)
#loc32 = loc("CWE391_Unchecked_Error_Condition__sqrt_12.c":30:51)
#loc33 = loc("CWE391_Unchecked_Error_Condition__sqrt_12.c":32:29)
#loc34 = loc("CWE391_Unchecked_Error_Condition__sqrt_12.c":32:13)
#loc35 = loc("CWE391_Unchecked_Error_Condition__sqrt_12.c":37:9)
#loc36 = loc("CWE391_Unchecked_Error_Condition__sqrt_12.c":48:9)
#loc37 = loc("CWE391_Unchecked_Error_Condition__sqrt_12.c":39:21)
#loc38 = loc("CWE391_Unchecked_Error_Condition__sqrt_12.c":39:13)
#loc39 = loc("CWE391_Unchecked_Error_Condition__sqrt_12.c":40:36)
#loc40 = loc("CWE391_Unchecked_Error_Condition__sqrt_12.c":40:50)
#loc41 = loc("CWE391_Unchecked_Error_Condition__sqrt_12.c":40:49)
#loc42 = loc("CWE391_Unchecked_Error_Condition__sqrt_12.c":40:13)
#loc43 = loc("CWE391_Unchecked_Error_Condition__sqrt_12.c":40:51)
#loc44 = loc("CWE391_Unchecked_Error_Condition__sqrt_12.c":42:13)
#loc45 = loc("CWE391_Unchecked_Error_Condition__sqrt_12.c":46:13)
#loc46 = loc("CWE391_Unchecked_Error_Condition__sqrt_12.c":42:17)
#loc47 = loc("CWE391_Unchecked_Error_Condition__sqrt_12.c":42:26)
#loc48 = loc("CWE391_Unchecked_Error_Condition__sqrt_12.c":43:13)
#loc49 = loc("CWE391_Unchecked_Error_Condition__sqrt_12.c":44:17)
#loc50 = loc("CWE391_Unchecked_Error_Condition__sqrt_12.c":45:17)
#loc51 = loc("CWE391_Unchecked_Error_Condition__sqrt_12.c":45:22)
#loc52 = loc("CWE391_Unchecked_Error_Condition__sqrt_12.c":47:29)
#loc53 = loc("CWE391_Unchecked_Error_Condition__sqrt_12.c":47:13)
#loc54 = loc("CWE391_Unchecked_Error_Condition__sqrt_12.c":91:1)
#loc55 = loc("CWE391_Unchecked_Error_Condition__sqrt_12.c":94:1)
#loc56 = loc("CWE391_Unchecked_Error_Condition__sqrt_12.c":93:5)
#loc57 = loc("CWE391_Unchecked_Error_Condition__sqrt_12.c":93:11)
#loc58 = loc("CWE391_Unchecked_Error_Condition__sqrt_12.c":57:1)
#loc59 = loc("CWE391_Unchecked_Error_Condition__sqrt_12.c":89:1)
#loc60 = loc("CWE391_Unchecked_Error_Condition__sqrt_12.c":62:13)
#loc61 = loc("CWE391_Unchecked_Error_Condition__sqrt_12.c":62:20)
#loc62 = loc("CWE391_Unchecked_Error_Condition__sqrt_12.c":77:13)
#loc63 = loc("CWE391_Unchecked_Error_Condition__sqrt_12.c":77:20)
#loc64 = loc("CWE391_Unchecked_Error_Condition__sqrt_12.c":59:5)
#loc65 = loc("CWE391_Unchecked_Error_Condition__sqrt_12.c":88:5)
#loc66 = loc("CWE391_Unchecked_Error_Condition__sqrt_12.c":59:8)
#loc67 = loc("CWE391_Unchecked_Error_Condition__sqrt_12.c":59:33)
#loc68 = loc("CWE391_Unchecked_Error_Condition__sqrt_12.c":60:5)
#loc69 = loc("CWE391_Unchecked_Error_Condition__sqrt_12.c":73:5)
#loc70 = loc("CWE391_Unchecked_Error_Condition__sqrt_12.c":75:5)
#loc71 = loc("CWE391_Unchecked_Error_Condition__sqrt_12.c":61:9)
#loc72 = loc("CWE391_Unchecked_Error_Condition__sqrt_12.c":72:9)
#loc73 = loc("CWE391_Unchecked_Error_Condition__sqrt_12.c":63:21)
#loc74 = loc("CWE391_Unchecked_Error_Condition__sqrt_12.c":63:13)
#loc75 = loc("CWE391_Unchecked_Error_Condition__sqrt_12.c":64:36)
#loc76 = loc("CWE391_Unchecked_Error_Condition__sqrt_12.c":64:50)
#loc77 = loc("CWE391_Unchecked_Error_Condition__sqrt_12.c":64:49)
#loc78 = loc("CWE391_Unchecked_Error_Condition__sqrt_12.c":64:13)
#loc79 = loc("CWE391_Unchecked_Error_Condition__sqrt_12.c":64:51)
#loc80 = loc("CWE391_Unchecked_Error_Condition__sqrt_12.c":66:13)
#loc81 = loc("CWE391_Unchecked_Error_Condition__sqrt_12.c":70:13)
#loc82 = loc("CWE391_Unchecked_Error_Condition__sqrt_12.c":66:17)
#loc83 = loc("CWE391_Unchecked_Error_Condition__sqrt_12.c":66:26)
#loc84 = loc("CWE391_Unchecked_Error_Condition__sqrt_12.c":67:13)
#loc85 = loc("CWE391_Unchecked_Error_Condition__sqrt_12.c":68:27)
#loc86 = loc("CWE391_Unchecked_Error_Condition__sqrt_12.c":68:17)
#loc87 = loc("CWE391_Unchecked_Error_Condition__sqrt_12.c":69:17)
#loc88 = loc("CWE391_Unchecked_Error_Condition__sqrt_12.c":69:22)
#loc89 = loc("CWE391_Unchecked_Error_Condition__sqrt_12.c":71:29)
#loc90 = loc("CWE391_Unchecked_Error_Condition__sqrt_12.c":71:13)
#loc91 = loc("CWE391_Unchecked_Error_Condition__sqrt_12.c":76:9)
#loc92 = loc("CWE391_Unchecked_Error_Condition__sqrt_12.c":87:9)
#loc93 = loc("CWE391_Unchecked_Error_Condition__sqrt_12.c":78:21)
#loc94 = loc("CWE391_Unchecked_Error_Condition__sqrt_12.c":78:13)
#loc95 = loc("CWE391_Unchecked_Error_Condition__sqrt_12.c":79:36)
#loc96 = loc("CWE391_Unchecked_Error_Condition__sqrt_12.c":79:50)
#loc97 = loc("CWE391_Unchecked_Error_Condition__sqrt_12.c":79:49)
#loc98 = loc("CWE391_Unchecked_Error_Condition__sqrt_12.c":79:13)
#loc99 = loc("CWE391_Unchecked_Error_Condition__sqrt_12.c":79:51)
#loc100 = loc("CWE391_Unchecked_Error_Condition__sqrt_12.c":81:13)
#loc101 = loc("CWE391_Unchecked_Error_Condition__sqrt_12.c":85:13)
#loc102 = loc("CWE391_Unchecked_Error_Condition__sqrt_12.c":81:17)
#loc103 = loc("CWE391_Unchecked_Error_Condition__sqrt_12.c":81:26)
#loc104 = loc("CWE391_Unchecked_Error_Condition__sqrt_12.c":82:13)
#loc105 = loc("CWE391_Unchecked_Error_Condition__sqrt_12.c":83:27)
#loc106 = loc("CWE391_Unchecked_Error_Condition__sqrt_12.c":83:17)
#loc107 = loc("CWE391_Unchecked_Error_Condition__sqrt_12.c":84:17)
#loc108 = loc("CWE391_Unchecked_Error_Condition__sqrt_12.c":84:22)
#loc109 = loc("CWE391_Unchecked_Error_Condition__sqrt_12.c":86:29)
#loc110 = loc("CWE391_Unchecked_Error_Condition__sqrt_12.c":86:13)
#loc111 = loc(fused[#loc1, #loc2])
#loc112 = loc(fused[#loc4, #loc5])
#loc113 = loc(fused[#loc6, #loc7])
#loc114 = loc(fused[#loc8, #loc9])
#loc115 = loc(fused[#loc11, #loc12])
#loc116 = loc(fused[#loc13, #loc14])
#loc117 = loc(fused[#loc15, #loc16])
#loc118 = loc(fused[#loc17, #loc18])
#loc119 = loc(fused[#loc19, #loc20])
#loc120 = loc(fused[#loc21, #loc22])
#loc121 = loc(fused[#loc23, #loc24, #loc25, #loc20])
#loc122 = loc(fused[#loc26, #loc27])
#loc123 = loc(fused[#loc31, #loc32])
#loc124 = loc(fused[#loc35, #loc36])
#loc125 = loc(fused[#loc38, #loc37])
#loc126 = loc(fused[#loc42, #loc43])
#loc127 = loc(fused[#loc44, #loc45])
#loc128 = loc(fused[#loc46, #loc47])
#loc129 = loc(fused[#loc48, #loc45])
#loc130 = loc(fused[#loc54, #loc55])
#loc131 = loc(fused[#loc56, #loc57])
#loc132 = loc(fused[#loc58, #loc59])
#loc133 = loc(fused[#loc60, #loc61])
#loc134 = loc(fused[#loc62, #loc63])
#loc135 = loc(fused[#loc64, #loc65])
#loc136 = loc(fused[#loc66, #loc67])
#loc137 = loc(fused[#loc68, #loc69, #loc70, #loc65])
#loc138 = loc(fused[#loc71, #loc72])
#loc139 = loc(fused[#loc74, #loc73])
#loc140 = loc(fused[#loc78, #loc79])
#loc141 = loc(fused[#loc80, #loc81])
#loc142 = loc(fused[#loc82, #loc83])
#loc143 = loc(fused[#loc84, #loc81])
#loc144 = loc(fused[#loc91, #loc92])
#loc145 = loc(fused[#loc94, #loc93])
#loc146 = loc(fused[#loc98, #loc99])
#loc147 = loc(fused[#loc100, #loc101])
#loc148 = loc(fused[#loc102, #loc103])
#loc149 = loc(fused[#loc104, #loc101])
