!s32i = !cir.int<s, 32>
!s8i = !cir.int<s, 8>
!void = !cir.void
#fn_attr = #cir<extra({inline = #cir.inline<no>, nothrow = #cir.nothrow, optnone = #cir.optnone})>
module @"/home/ladisgin/git_proj/juliet-c/testcases/CWE570_Expression_Always_False/CWE570_Expression_Always_False__global_const_01.c" attributes {cir.lang = #cir.lang<c>, cir.sob = #cir.signed_overflow_behavior<undefined>, cir.triple = "x86_64-unknown-linux-gnu", dlti.dl_spec = #dlti.dl_spec<i1 = dense<8> : vector<2xi64>, !llvm.ptr = dense<64> : vector<4xi64>, i16 = dense<16> : vector<2xi64>, i8 = dense<8> : vector<2xi64>, i32 = dense<32> : vector<2xi64>, !llvm.ptr<270> = dense<32> : vector<4xi64>, f128 = dense<128> : vector<2xi64>, f64 = dense<64> : vector<2xi64>, f16 = dense<16> : vector<2xi64>, !llvm.ptr<272> = dense<64> : vector<4xi64>, !llvm.ptr<271> = dense<32> : vector<4xi64>, i64 = dense<64> : vector<2xi64>, i128 = dense<128> : vector<2xi64>, f80 = dense<128> : vector<2xi64>, "dlti.endianness" = "little", "dlti.stack_alignment" = 128 : i64>} {
  cir.global "private" constant external @GLOBAL_CONST_FALSE : !s32i {alignment = 4 : i64} loc(#loc29)
  cir.func private @printLine(!cir.ptr<!s8i>) loc(#loc30)
  cir.global "private" constant cir_private dsolocal @".str" = #cir.const_array<"Never prints\00" : !cir.array<!s8i x 13>> : !cir.array<!s8i x 13> {alignment = 1 : i64} loc(#loc5)
  cir.func no_proto @CWE570_Expression_Always_False__global_const_01_bad() extra(#fn_attr) {
    cir.br ^bb1 loc(#loc32)
  ^bb1:  // pred: ^bb0
    %0 = cir.get_global @GLOBAL_CONST_FALSE : !cir.ptr<!s32i> loc(#loc29)
    %1 = cir.load %0 : !cir.ptr<!s32i>, !s32i loc(#loc10)
    %2 = cir.cast(int_to_bool, %1 : !s32i), !cir.bool loc(#loc10)
    cir.brcond %2 ^bb2, ^bb3 loc(#loc33)
  ^bb2:  // pred: ^bb1
    %3 = cir.get_global @".str" : !cir.ptr<!cir.array<!s8i x 13>> loc(#loc5)
    %4 = cir.cast(array_to_ptrdecay, %3 : !cir.ptr<!cir.array<!s8i x 13>>), !cir.ptr<!s8i> loc(#loc5)
    cir.call @printLine(%4) : (!cir.ptr<!s8i>) -> () loc(#loc12)
    cir.br ^bb3 loc(#loc9)
  ^bb3:  // 2 preds: ^bb1, ^bb2
    cir.br ^bb4 loc(#loc9)
  ^bb4:  // pred: ^bb3
    cir.return loc(#loc7)
  } loc(#loc31)
  cir.func no_proto @CWE570_Expression_Always_False__global_const_01_good() extra(#fn_attr) {
    %0 = cir.get_global @good1 : !cir.ptr<!cir.func<!void ()>> loc(#loc35)
    cir.call %0() : (!cir.ptr<!cir.func<!void ()>>) -> () loc(#loc15)
    cir.return loc(#loc14)
  } loc(#loc34)
  cir.func no_proto private @globalReturnsTrueOrFalse(...) -> !s32i loc(#loc36)
  cir.global "private" constant cir_private dsolocal @".str.1" = #cir.const_array<"Sometimes prints\00" : !cir.array<!s8i x 17>> : !cir.array<!s8i x 17> {alignment = 1 : i64} loc(#loc19)
  cir.func no_proto internal private @good1() extra(#fn_attr) {
    cir.br ^bb1 loc(#loc38)
  ^bb1:  // pred: ^bb0
    %0 = cir.get_global @globalReturnsTrueOrFalse : !cir.ptr<!cir.func<!s32i (...)>> loc(#loc39)
    %1 = cir.cast(bitcast, %0 : !cir.ptr<!cir.func<!s32i (...)>>), !cir.ptr<!cir.func<!s32i ()>> loc(#loc39)
    %2 = cir.call %1() : (!cir.ptr<!cir.func<!s32i ()>>) -> !s32i loc(#loc24)
    %3 = cir.get_global @GLOBAL_CONST_FALSE : !cir.ptr<!s32i> loc(#loc29)
    %4 = cir.load %3 : !cir.ptr<!s32i>, !s32i loc(#loc26)
    %5 = cir.cmp(eq, %2, %4) : !s32i, !cir.bool loc(#loc40)
    cir.brcond %5 ^bb2, ^bb3 loc(#loc41)
  ^bb2:  // pred: ^bb1
    %6 = cir.get_global @".str.1" : !cir.ptr<!cir.array<!s8i x 17>> loc(#loc19)
    %7 = cir.cast(array_to_ptrdecay, %6 : !cir.ptr<!cir.array<!s8i x 17>>), !cir.ptr<!s8i> loc(#loc19)
    cir.call @printLine(%7) : (!cir.ptr<!s8i>) -> () loc(#loc28)
    cir.br ^bb3 loc(#loc23)
  ^bb3:  // 2 preds: ^bb1, ^bb2
    cir.br ^bb4 loc(#loc23)
  ^bb4:  // pred: ^bb3
    cir.return loc(#loc21)
  } loc(#loc37)
} loc(#loc)
#loc = loc("/home/ladisgin/git_proj/juliet-c/testcases/CWE570_Expression_Always_False/CWE570_Expression_Always_False__global_const_01.c":0:0)
#loc1 = loc("../../testcasesupport/std_testcase.h":110:1)
#loc2 = loc("../../testcasesupport/std_testcase.h":110:18)
#loc3 = loc("../../testcasesupport/std_testcase_io.h":14:1)
#loc4 = loc("../../testcasesupport/std_testcase_io.h":14:33)
#loc5 = loc("CWE570_Expression_Always_False__global_const_01.c":15:19)
#loc6 = loc("CWE570_Expression_Always_False__global_const_01.c":10:1)
#loc7 = loc("CWE570_Expression_Always_False__global_const_01.c":17:1)
#loc8 = loc("CWE570_Expression_Always_False__global_const_01.c":13:5)
#loc9 = loc("CWE570_Expression_Always_False__global_const_01.c":16:5)
#loc10 = loc("CWE570_Expression_Always_False__global_const_01.c":13:9)
#loc11 = loc("CWE570_Expression_Always_False__global_const_01.c":14:5)
#loc12 = loc("CWE570_Expression_Always_False__global_const_01.c":15:9)
#loc13 = loc("CWE570_Expression_Always_False__global_const_01.c":33:1)
#loc14 = loc("CWE570_Expression_Always_False__global_const_01.c":36:1)
#loc15 = loc("CWE570_Expression_Always_False__global_const_01.c":35:5)
#loc16 = loc("CWE570_Expression_Always_False__global_const_01.c":35:11)
#loc17 = loc("../../testcasesupport/std_testcase_io.h":52:1)
#loc18 = loc("../../testcasesupport/std_testcase_io.h":52:30)
#loc19 = loc("CWE570_Expression_Always_False__global_const_01.c":29:19)
#loc20 = loc("CWE570_Expression_Always_False__global_const_01.c":24:1)
#loc21 = loc("CWE570_Expression_Always_False__global_const_01.c":31:1)
#loc22 = loc("CWE570_Expression_Always_False__global_const_01.c":27:5)
#loc23 = loc("CWE570_Expression_Always_False__global_const_01.c":30:5)
#loc24 = loc("CWE570_Expression_Always_False__global_const_01.c":27:9)
#loc25 = loc("CWE570_Expression_Always_False__global_const_01.c":27:34)
#loc26 = loc("CWE570_Expression_Always_False__global_const_01.c":27:39)
#loc27 = loc("CWE570_Expression_Always_False__global_const_01.c":28:5)
#loc28 = loc("CWE570_Expression_Always_False__global_const_01.c":29:9)
#loc29 = loc(fused[#loc1, #loc2])
#loc30 = loc(fused[#loc3, #loc4])
#loc31 = loc(fused[#loc6, #loc7])
#loc32 = loc(fused[#loc8, #loc9])
#loc33 = loc(fused[#loc11, #loc9])
#loc34 = loc(fused[#loc13, #loc14])
#loc35 = loc(fused[#loc15, #loc16])
#loc36 = loc(fused[#loc17, #loc18])
#loc37 = loc(fused[#loc20, #loc21])
#loc38 = loc(fused[#loc22, #loc23])
#loc39 = loc(fused[#loc24, #loc25])
#loc40 = loc(fused[#loc24, #loc26])
#loc41 = loc(fused[#loc27, #loc23])
