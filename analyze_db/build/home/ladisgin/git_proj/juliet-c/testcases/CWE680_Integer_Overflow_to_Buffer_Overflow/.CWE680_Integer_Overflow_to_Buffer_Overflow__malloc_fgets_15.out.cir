!s32i = !cir.int<s, 32>
!s64i = !cir.int<s, 64>
!s8i = !cir.int<s, 8>
!ty__IO_codecvt = !cir.struct<struct "_IO_codecvt" incomplete>
!ty__IO_marker = !cir.struct<struct "_IO_marker" incomplete>
!ty__IO_wide_data = !cir.struct<struct "_IO_wide_data" incomplete>
!u16i = !cir.int<u, 16>
!u32i = !cir.int<u, 32>
!u64i = !cir.int<u, 64>
!void = !cir.void
#fn_attr = #cir<extra({nothrow = #cir.nothrow})>
#fn_attr1 = #cir<extra({inline = #cir.inline<no>, nothrow = #cir.nothrow, optnone = #cir.optnone})>
#loc109 = loc("CWE680_Integer_Overflow_to_Buffer_Overflow__malloc_fgets_15.c":152:10)
#loc110 = loc("CWE680_Integer_Overflow_to_Buffer_Overflow__malloc_fgets_15.c":152:14)
#loc111 = loc("CWE680_Integer_Overflow_to_Buffer_Overflow__malloc_fgets_15.c":152:20)
#loc112 = loc("CWE680_Integer_Overflow_to_Buffer_Overflow__malloc_fgets_15.c":152:32)
#loc283 = loc(fused[#loc109, #loc110])
#loc284 = loc(fused[#loc111, #loc112])
!ty__IO_FILE = !cir.struct<struct "_IO_FILE" {!s32i, !cir.ptr<!s8i>, !cir.ptr<!s8i>, !cir.ptr<!s8i>, !cir.ptr<!s8i>, !cir.ptr<!s8i>, !cir.ptr<!s8i>, !cir.ptr<!s8i>, !cir.ptr<!s8i>, !cir.ptr<!s8i>, !cir.ptr<!s8i>, !cir.ptr<!s8i>, !cir.ptr<!ty__IO_marker>, !cir.ptr<!cir.struct<struct "_IO_FILE">>, !s32i, !s32i, !s64i, !u16i, !s8i, !cir.array<!s8i x 1>, !cir.ptr<!void>, !s64i, !cir.ptr<!ty__IO_codecvt>, !cir.ptr<!ty__IO_wide_data>, !cir.ptr<!cir.struct<struct "_IO_FILE">>, !cir.ptr<!void>, !cir.ptr<!cir.ptr<!cir.struct<struct "_IO_FILE">>>, !s32i, !cir.array<!s8i x 20>} #cir.record.decl.ast>
module @"/home/ladisgin/git_proj/juliet-c/testcases/CWE680_Integer_Overflow_to_Buffer_Overflow/CWE680_Integer_Overflow_to_Buffer_Overflow__malloc_fgets_15.c" attributes {cir.lang = #cir.lang<c>, cir.sob = #cir.signed_overflow_behavior<undefined>, cir.triple = "x86_64-unknown-linux-gnu", dlti.dl_spec = #dlti.dl_spec<f128 = dense<128> : vector<2xi64>, !llvm.ptr<270> = dense<32> : vector<4xi64>, f64 = dense<64> : vector<2xi64>, f16 = dense<16> : vector<2xi64>, i128 = dense<128> : vector<2xi64>, i64 = dense<64> : vector<2xi64>, !llvm.ptr<271> = dense<32> : vector<4xi64>, !llvm.ptr<272> = dense<64> : vector<4xi64>, !llvm.ptr = dense<64> : vector<4xi64>, f80 = dense<128> : vector<2xi64>, i32 = dense<32> : vector<2xi64>, i16 = dense<16> : vector<2xi64>, i8 = dense<8> : vector<2xi64>, i1 = dense<8> : vector<2xi64>, "dlti.endianness" = "little", "dlti.stack_alignment" = 128 : i64>} {
  cir.func private @fgets(!cir.ptr<!s8i>, !s32i, !cir.ptr<!ty__IO_FILE>) -> !cir.ptr<!s8i> loc(#loc243)
  cir.global "private" external @stdin : !cir.ptr<!ty__IO_FILE> {alignment = 8 : i64} loc(#loc244)
  cir.func private @atoi(!cir.ptr<!s8i>) -> !s32i extra(#fn_attr) loc(#loc245)
  cir.func private @printLine(!cir.ptr<!s8i>) loc(#loc246)
  cir.global "private" constant cir_private dsolocal @".str" = #cir.const_array<"fgets() failed.\00" : !cir.array<!s8i x 16>> : !cir.array<!s8i x 16> {alignment = 1 : i64} loc(#loc9)
  cir.global "private" constant cir_private dsolocal @".str.1" = #cir.const_array<"Benign, fixed string\00" : !cir.array<!s8i x 21>> : !cir.array<!s8i x 21> {alignment = 1 : i64} loc(#loc10)
  cir.func private @malloc(!u64i) -> !cir.ptr<!void> extra(#fn_attr) loc(#loc247)
  cir.func private @exit(!s32i) extra(#fn_attr) loc(#loc248)
  cir.func private @printIntLine(!s32i) loc(#loc249)
  cir.func private @free(!cir.ptr<!void>) extra(#fn_attr) loc(#loc250)
  cir.func no_proto @CWE680_Integer_Overflow_to_Buffer_Overflow__malloc_fgets_15_bad() extra(#fn_attr1) {
    %0 = cir.alloca !s32i, !cir.ptr<!s32i>, ["data"] {alignment = 4 : i64} loc(#loc252)
    %1 = cir.const #cir.int<1> : !s32i loc(#loc23)
    %2 = cir.unary(minus, %1) : !s32i, !s32i loc(#loc24)
    cir.store %2, %0 : !s32i, !cir.ptr<!s32i> loc(#loc253)
    cir.scope {
      %3 = cir.const #cir.int<6> : !s32i loc(#loc28)
      cir.switch (%3 : !s32i) {
        cir.case(equal, [#cir.int<6> : !s32i]) {
          cir.scope {
            %4 = cir.alloca !cir.array<!s8i x 14>, !cir.ptr<!cir.array<!s8i x 14>>, ["inputBuffer"] {alignment = 1 : i64} loc(#loc256)
            %5 = cir.const #cir.zero : !cir.array<!s8i x 14> loc(#loc256)
            cir.store %5, %4 : !cir.array<!s8i x 14>, !cir.ptr<!cir.array<!s8i x 14>> loc(#loc256)
            cir.scope {
              %6 = cir.cast(array_to_ptrdecay, %4 : !cir.ptr<!cir.array<!s8i x 14>>), !cir.ptr<!s8i> loc(#loc36)
              %7 = cir.const #cir.int<3> : !s32i loc(#loc37)
              %8 = cir.cast(integral, %7 : !s32i), !u64i loc(#loc37)
              %9 = cir.const #cir.int<4> : !u64i loc(#loc37)
              %10 = cir.binop(mul, %8, %9) : !u64i loc(#loc37)
              %11 = cir.const #cir.int<2> : !s32i loc(#loc37)
              %12 = cir.cast(integral, %11 : !s32i), !u64i loc(#loc37)
              %13 = cir.binop(add, %10, %12) : !u64i loc(#loc37)
              %14 = cir.cast(integral, %13 : !u64i), !s32i loc(#loc37)
              %15 = cir.get_global @stdin : !cir.ptr<!cir.ptr<!ty__IO_FILE>> loc(#loc244)
              %16 = cir.load %15 : !cir.ptr<!cir.ptr<!ty__IO_FILE>>, !cir.ptr<!ty__IO_FILE> loc(#loc38)
              %17 = cir.call @fgets(%6, %14, %16) : (!cir.ptr<!s8i>, !s32i, !cir.ptr<!ty__IO_FILE>) -> !cir.ptr<!s8i> loc(#loc39)
              %18 = cir.const #cir.ptr<null> : !cir.ptr<!void> loc(#loc40)
              %19 = cir.cast(bitcast, %18 : !cir.ptr<!void>), !cir.ptr<!s8i> loc(#loc40)
              %20 = cir.cmp(ne, %17, %19) : !cir.ptr<!s8i>, !cir.bool loc(#loc258)
              cir.if %20 {
                %21 = cir.cast(array_to_ptrdecay, %4 : !cir.ptr<!cir.array<!s8i x 14>>), !cir.ptr<!s8i> loc(#loc44)
                %22 = cir.call @atoi(%21) : (!cir.ptr<!s8i>) -> !s32i extra(#fn_attr) loc(#loc45)
                cir.store %22, %0 : !s32i, !cir.ptr<!s32i> loc(#loc260)
              } else {
                %21 = cir.get_global @".str" : !cir.ptr<!cir.array<!s8i x 16>> loc(#loc9)
                %22 = cir.cast(array_to_ptrdecay, %21 : !cir.ptr<!cir.array<!s8i x 16>>), !cir.ptr<!s8i> loc(#loc9)
                cir.call @printLine(%22) : (!cir.ptr<!s8i>) -> () loc(#loc48)
              } loc(#loc259)
            } loc(#loc257)
          } loc(#loc255)
          cir.break loc(#loc49)
        } loc(#loc29)
        cir.case(default, []) {
          %4 = cir.get_global @".str.1" : !cir.ptr<!cir.array<!s8i x 21>> loc(#loc10)
          %5 = cir.cast(array_to_ptrdecay, %4 : !cir.ptr<!cir.array<!s8i x 21>>), !cir.ptr<!s8i> loc(#loc10)
          cir.call @printLine(%5) : (!cir.ptr<!s8i>) -> () loc(#loc51)
          cir.break loc(#loc52)
        } loc(#loc50)
        cir.yield loc(#loc26)
      } loc(#loc26)
    } loc(#loc254)
    cir.scope {
      %3 = cir.alloca !u64i, !cir.ptr<!u64i>, ["i"] {alignment = 8 : i64} loc(#loc262)
      %4 = cir.alloca !cir.ptr<!s32i>, !cir.ptr<!cir.ptr<!s32i>>, ["intPointer"] {alignment = 8 : i64} loc(#loc263)
      %5 = cir.get_global @malloc : !cir.ptr<!cir.func<!cir.ptr<!void> (!u64i)>> loc(#loc59)
      %6 = cir.load %0 : !cir.ptr<!s32i>, !s32i loc(#loc60)
      %7 = cir.cast(integral, %6 : !s32i), !u64i loc(#loc60)
      %8 = cir.const #cir.int<4> : !u64i loc(#loc264)
      %9 = cir.binop(mul, %7, %8) : !u64i loc(#loc265)
      %10 = cir.call @malloc(%9) : (!u64i) -> !cir.ptr<!void> extra(#fn_attr) loc(#loc59)
      %11 = cir.cast(bitcast, %10 : !cir.ptr<!void>), !cir.ptr<!s32i> loc(#loc266)
      cir.store %11, %4 : !cir.ptr<!s32i>, !cir.ptr<!cir.ptr<!s32i>> loc(#loc267)
      cir.scope {
        %19 = cir.load %4 : !cir.ptr<!cir.ptr<!s32i>>, !cir.ptr<!s32i> loc(#loc67)
        %20 = cir.const #cir.ptr<null> : !cir.ptr<!void> loc(#loc68)
        %21 = cir.cast(bitcast, %20 : !cir.ptr<!void>), !cir.ptr<!s32i> loc(#loc68)
        %22 = cir.cmp(eq, %19, %21) : !cir.ptr<!s32i>, !cir.bool loc(#loc269)
        cir.if %22 {
          %23 = cir.get_global @exit : !cir.ptr<!cir.func<!void (!s32i)>> loc(#loc70)
          %24 = cir.const #cir.int<1> : !s32i loc(#loc71)
          %25 = cir.unary(minus, %24) : !s32i, !s32i loc(#loc72)
          cir.call @exit(%25) : (!s32i) -> () extra(#fn_attr) loc(#loc70)
        } loc(#loc270)
      } loc(#loc268)
      cir.scope {
        %19 = cir.const #cir.int<0> : !s32i loc(#loc75)
        %20 = cir.cast(integral, %19 : !s32i), !u64i loc(#loc75)
        cir.store %20, %3 : !u64i, !cir.ptr<!u64i> loc(#loc272)
        cir.for : cond {
          %21 = cir.load %3 : !cir.ptr<!u64i>, !u64i loc(#loc77)
          %22 = cir.load %0 : !cir.ptr<!s32i>, !s32i loc(#loc78)
          %23 = cir.cast(integral, %22 : !s32i), !u64i loc(#loc78)
          %24 = cir.cmp(lt, %21, %23) : !u64i, !cir.bool loc(#loc273)
          cir.condition(%24) loc(#loc79)
        } body {
          cir.scope {
            %21 = cir.const #cir.int<0> : !s32i loc(#loc81)
            %22 = cir.load %4 : !cir.ptr<!cir.ptr<!s32i>>, !cir.ptr<!s32i> loc(#loc82)
            %23 = cir.load %3 : !cir.ptr<!u64i>, !u64i loc(#loc83)
            %24 = cir.ptr_stride(%22 : !cir.ptr<!s32i>, %23 : !u64i), !cir.ptr<!s32i> loc(#loc84)
            cir.store %21, %24 : !s32i, !cir.ptr<!s32i> loc(#loc275)
          } loc(#loc274)
          cir.yield loc(#loc74)
        } step {
          %21 = cir.load %3 : !cir.ptr<!u64i>, !u64i loc(#loc85)
          %22 = cir.unary(inc, %21) : !u64i, !u64i loc(#loc86)
          cir.store %22, %3 : !u64i, !cir.ptr<!u64i> loc(#loc276)
          cir.yield loc(#loc271)
        } loc(#loc271)
      } loc(#loc271)
      %12 = cir.load %4 : !cir.ptr<!cir.ptr<!s32i>>, !cir.ptr<!s32i> loc(#loc87)
      %13 = cir.const #cir.int<0> : !s32i loc(#loc88)
      %14 = cir.ptr_stride(%12 : !cir.ptr<!s32i>, %13 : !s32i), !cir.ptr<!s32i> loc(#loc89)
      %15 = cir.load %14 : !cir.ptr<!s32i>, !s32i loc(#loc87)
      cir.call @printIntLine(%15) : (!s32i) -> () loc(#loc90)
      %16 = cir.get_global @free : !cir.ptr<!cir.func<!void (!cir.ptr<!void>)>> loc(#loc91)
      %17 = cir.load %4 : !cir.ptr<!cir.ptr<!s32i>>, !cir.ptr<!s32i> loc(#loc92)
      %18 = cir.cast(bitcast, %17 : !cir.ptr<!s32i>), !cir.ptr<!void> loc(#loc92)
      cir.call @free(%18) : (!cir.ptr<!void>) -> () extra(#fn_attr) loc(#loc91)
    } loc(#loc261)
    cir.return loc(#loc20)
  } loc(#loc251)
  cir.func no_proto @CWE680_Integer_Overflow_to_Buffer_Overflow__malloc_fgets_15_good() extra(#fn_attr1) {
    %0 = cir.get_global @goodG2B1 : !cir.ptr<!cir.func<!void ()>> loc(#loc278)
    cir.call %0() : (!cir.ptr<!cir.func<!void ()>>) -> () loc(#loc95)
    %1 = cir.get_global @goodG2B2 : !cir.ptr<!cir.func<!void ()>> loc(#loc279)
    cir.call %1() : (!cir.ptr<!cir.func<!void ()>>) -> () loc(#loc97)
    cir.return loc(#loc94)
  } loc(#loc277)
  cir.func private @srand(!u32i) extra(#fn_attr) loc(#loc280)
  cir.func private @time(!cir.ptr<!s64i>) -> !s64i extra(#fn_attr) loc(#loc281)
  cir.global "private" constant cir_private dsolocal @".str.2" = #cir.const_array<"Calling good()...\00" : !cir.array<!s8i x 18>> : !cir.array<!s8i x 18> {alignment = 1 : i64} loc(#loc103)
  cir.global "private" constant cir_private dsolocal @".str.3" = #cir.const_array<"Finished good()\00" : !cir.array<!s8i x 16>> : !cir.array<!s8i x 16> {alignment = 1 : i64} loc(#loc104)
  cir.global "private" constant cir_private dsolocal @".str.4" = #cir.const_array<"Calling bad()...\00" : !cir.array<!s8i x 17>> : !cir.array<!s8i x 17> {alignment = 1 : i64} loc(#loc105)
  cir.global "private" constant cir_private dsolocal @".str.5" = #cir.const_array<"Finished bad()\00" : !cir.array<!s8i x 15>> : !cir.array<!s8i x 15> {alignment = 1 : i64} loc(#loc106)
  cir.func @main(%arg0: !s32i loc(fused[#loc109, #loc110]), %arg1: !cir.ptr<!cir.ptr<!s8i>> loc(fused[#loc111, #loc112])) -> !s32i extra(#fn_attr1) {
    %0 = cir.alloca !s32i, !cir.ptr<!s32i>, ["argc", init] {alignment = 4 : i64} loc(#loc283)
    %1 = cir.alloca !cir.ptr<!cir.ptr<!s8i>>, !cir.ptr<!cir.ptr<!cir.ptr<!s8i>>>, ["argv", init] {alignment = 8 : i64} loc(#loc284)
    %2 = cir.alloca !s32i, !cir.ptr<!s32i>, ["__retval"] {alignment = 4 : i64} loc(#loc108)
    cir.store %arg0, %0 : !s32i, !cir.ptr<!s32i> loc(#loc113)
    cir.store %arg1, %1 : !cir.ptr<!cir.ptr<!s8i>>, !cir.ptr<!cir.ptr<!cir.ptr<!s8i>>> loc(#loc113)
    %3 = cir.const #cir.ptr<null> : !cir.ptr<!s64i> loc(#loc114)
    %4 = cir.call @time(%3) : (!cir.ptr<!s64i>) -> !s64i extra(#fn_attr) loc(#loc115)
    %5 = cir.cast(integral, %4 : !s64i), !u32i loc(#loc115)
    cir.call @srand(%5) : (!u32i) -> () extra(#fn_attr) loc(#loc116)
    %6 = cir.get_global @".str.2" : !cir.ptr<!cir.array<!s8i x 18>> loc(#loc103)
    %7 = cir.cast(array_to_ptrdecay, %6 : !cir.ptr<!cir.array<!s8i x 18>>), !cir.ptr<!s8i> loc(#loc103)
    cir.call @printLine(%7) : (!cir.ptr<!s8i>) -> () loc(#loc117)
    %8 = cir.get_global @CWE680_Integer_Overflow_to_Buffer_Overflow__malloc_fgets_15_good : !cir.ptr<!cir.func<!void ()>> loc(#loc285)
    cir.call @CWE680_Integer_Overflow_to_Buffer_Overflow__malloc_fgets_15_good() : () -> () loc(#loc118)
    %9 = cir.get_global @".str.3" : !cir.ptr<!cir.array<!s8i x 16>> loc(#loc104)
    %10 = cir.cast(array_to_ptrdecay, %9 : !cir.ptr<!cir.array<!s8i x 16>>), !cir.ptr<!s8i> loc(#loc104)
    cir.call @printLine(%10) : (!cir.ptr<!s8i>) -> () loc(#loc120)
    %11 = cir.get_global @".str.4" : !cir.ptr<!cir.array<!s8i x 17>> loc(#loc105)
    %12 = cir.cast(array_to_ptrdecay, %11 : !cir.ptr<!cir.array<!s8i x 17>>), !cir.ptr<!s8i> loc(#loc105)
    cir.call @printLine(%12) : (!cir.ptr<!s8i>) -> () loc(#loc121)
    %13 = cir.get_global @CWE680_Integer_Overflow_to_Buffer_Overflow__malloc_fgets_15_bad : !cir.ptr<!cir.func<!void ()>> loc(#loc286)
    cir.call @CWE680_Integer_Overflow_to_Buffer_Overflow__malloc_fgets_15_bad() : () -> () loc(#loc122)
    %14 = cir.get_global @".str.5" : !cir.ptr<!cir.array<!s8i x 15>> loc(#loc106)
    %15 = cir.cast(array_to_ptrdecay, %14 : !cir.ptr<!cir.array<!s8i x 15>>), !cir.ptr<!s8i> loc(#loc106)
    cir.call @printLine(%15) : (!cir.ptr<!s8i>) -> () loc(#loc124)
    %16 = cir.const #cir.int<0> : !s32i loc(#loc125)
    cir.store %16, %2 : !s32i, !cir.ptr<!s32i> loc(#loc287)
    %17 = cir.load %2 : !cir.ptr<!s32i>, !s32i loc(#loc287)
    cir.return %17 : !s32i loc(#loc287)
  } loc(#loc282)
  cir.func no_proto internal private @goodG2B1() extra(#fn_attr1) {
    %0 = cir.alloca !s32i, !cir.ptr<!s32i>, ["data"] {alignment = 4 : i64} loc(#loc289)
    %1 = cir.const #cir.int<1> : !s32i loc(#loc131)
    %2 = cir.unary(minus, %1) : !s32i, !s32i loc(#loc132)
    cir.store %2, %0 : !s32i, !cir.ptr<!s32i> loc(#loc290)
    cir.scope {
      %3 = cir.const #cir.int<5> : !s32i loc(#loc136)
      cir.switch (%3 : !s32i) {
        cir.case(equal, [#cir.int<6> : !s32i]) {
          %4 = cir.get_global @".str.1" : !cir.ptr<!cir.array<!s8i x 21>> loc(#loc138)
          %5 = cir.cast(array_to_ptrdecay, %4 : !cir.ptr<!cir.array<!s8i x 21>>), !cir.ptr<!s8i> loc(#loc138)
          cir.call @printLine(%5) : (!cir.ptr<!s8i>) -> () loc(#loc139)
          cir.break loc(#loc140)
        } loc(#loc137)
        cir.case(default, []) {
          %4 = cir.const #cir.int<20> : !s32i loc(#loc142)
          cir.store %4, %0 : !s32i, !cir.ptr<!s32i> loc(#loc292)
          cir.break loc(#loc144)
        } loc(#loc141)
        cir.yield loc(#loc134)
      } loc(#loc134)
    } loc(#loc291)
    cir.scope {
      %3 = cir.alloca !u64i, !cir.ptr<!u64i>, ["i"] {alignment = 8 : i64} loc(#loc294)
      %4 = cir.alloca !cir.ptr<!s32i>, !cir.ptr<!cir.ptr<!s32i>>, ["intPointer"] {alignment = 8 : i64} loc(#loc295)
      %5 = cir.get_global @malloc : !cir.ptr<!cir.func<!cir.ptr<!void> (!u64i)>> loc(#loc151)
      %6 = cir.load %0 : !cir.ptr<!s32i>, !s32i loc(#loc152)
      %7 = cir.cast(integral, %6 : !s32i), !u64i loc(#loc152)
      %8 = cir.const #cir.int<4> : !u64i loc(#loc296)
      %9 = cir.binop(mul, %7, %8) : !u64i loc(#loc297)
      %10 = cir.call @malloc(%9) : (!u64i) -> !cir.ptr<!void> extra(#fn_attr) loc(#loc151)
      %11 = cir.cast(bitcast, %10 : !cir.ptr<!void>), !cir.ptr<!s32i> loc(#loc298)
      cir.store %11, %4 : !cir.ptr<!s32i>, !cir.ptr<!cir.ptr<!s32i>> loc(#loc299)
      cir.scope {
        %19 = cir.load %4 : !cir.ptr<!cir.ptr<!s32i>>, !cir.ptr<!s32i> loc(#loc159)
        %20 = cir.const #cir.ptr<null> : !cir.ptr<!void> loc(#loc160)
        %21 = cir.cast(bitcast, %20 : !cir.ptr<!void>), !cir.ptr<!s32i> loc(#loc160)
        %22 = cir.cmp(eq, %19, %21) : !cir.ptr<!s32i>, !cir.bool loc(#loc301)
        cir.if %22 {
          %23 = cir.get_global @exit : !cir.ptr<!cir.func<!void (!s32i)>> loc(#loc162)
          %24 = cir.const #cir.int<1> : !s32i loc(#loc163)
          %25 = cir.unary(minus, %24) : !s32i, !s32i loc(#loc164)
          cir.call @exit(%25) : (!s32i) -> () extra(#fn_attr) loc(#loc162)
        } loc(#loc302)
      } loc(#loc300)
      cir.scope {
        %19 = cir.const #cir.int<0> : !s32i loc(#loc167)
        %20 = cir.cast(integral, %19 : !s32i), !u64i loc(#loc167)
        cir.store %20, %3 : !u64i, !cir.ptr<!u64i> loc(#loc304)
        cir.for : cond {
          %21 = cir.load %3 : !cir.ptr<!u64i>, !u64i loc(#loc169)
          %22 = cir.load %0 : !cir.ptr<!s32i>, !s32i loc(#loc170)
          %23 = cir.cast(integral, %22 : !s32i), !u64i loc(#loc170)
          %24 = cir.cmp(lt, %21, %23) : !u64i, !cir.bool loc(#loc305)
          cir.condition(%24) loc(#loc171)
        } body {
          cir.scope {
            %21 = cir.const #cir.int<0> : !s32i loc(#loc173)
            %22 = cir.load %4 : !cir.ptr<!cir.ptr<!s32i>>, !cir.ptr<!s32i> loc(#loc174)
            %23 = cir.load %3 : !cir.ptr<!u64i>, !u64i loc(#loc175)
            %24 = cir.ptr_stride(%22 : !cir.ptr<!s32i>, %23 : !u64i), !cir.ptr<!s32i> loc(#loc176)
            cir.store %21, %24 : !s32i, !cir.ptr<!s32i> loc(#loc307)
          } loc(#loc306)
          cir.yield loc(#loc166)
        } step {
          %21 = cir.load %3 : !cir.ptr<!u64i>, !u64i loc(#loc177)
          %22 = cir.unary(inc, %21) : !u64i, !u64i loc(#loc178)
          cir.store %22, %3 : !u64i, !cir.ptr<!u64i> loc(#loc308)
          cir.yield loc(#loc303)
        } loc(#loc303)
      } loc(#loc303)
      %12 = cir.load %4 : !cir.ptr<!cir.ptr<!s32i>>, !cir.ptr<!s32i> loc(#loc179)
      %13 = cir.const #cir.int<0> : !s32i loc(#loc180)
      %14 = cir.ptr_stride(%12 : !cir.ptr<!s32i>, %13 : !s32i), !cir.ptr<!s32i> loc(#loc181)
      %15 = cir.load %14 : !cir.ptr<!s32i>, !s32i loc(#loc179)
      cir.call @printIntLine(%15) : (!s32i) -> () loc(#loc182)
      %16 = cir.get_global @free : !cir.ptr<!cir.func<!void (!cir.ptr<!void>)>> loc(#loc183)
      %17 = cir.load %4 : !cir.ptr<!cir.ptr<!s32i>>, !cir.ptr<!s32i> loc(#loc184)
      %18 = cir.cast(bitcast, %17 : !cir.ptr<!s32i>), !cir.ptr<!void> loc(#loc184)
      cir.call @free(%18) : (!cir.ptr<!void>) -> () extra(#fn_attr) loc(#loc183)
    } loc(#loc293)
    cir.return loc(#loc128)
  } loc(#loc288)
  cir.func no_proto internal private @goodG2B2() extra(#fn_attr1) {
    %0 = cir.alloca !s32i, !cir.ptr<!s32i>, ["data"] {alignment = 4 : i64} loc(#loc310)
    %1 = cir.const #cir.int<1> : !s32i loc(#loc189)
    %2 = cir.unary(minus, %1) : !s32i, !s32i loc(#loc190)
    cir.store %2, %0 : !s32i, !cir.ptr<!s32i> loc(#loc311)
    cir.scope {
      %3 = cir.const #cir.int<6> : !s32i loc(#loc194)
      cir.switch (%3 : !s32i) {
        cir.case(equal, [#cir.int<6> : !s32i]) {
          %4 = cir.const #cir.int<20> : !s32i loc(#loc196)
          cir.store %4, %0 : !s32i, !cir.ptr<!s32i> loc(#loc313)
          cir.break loc(#loc198)
        } loc(#loc195)
        cir.case(default, []) {
          %4 = cir.get_global @".str.1" : !cir.ptr<!cir.array<!s8i x 21>> loc(#loc200)
          %5 = cir.cast(array_to_ptrdecay, %4 : !cir.ptr<!cir.array<!s8i x 21>>), !cir.ptr<!s8i> loc(#loc200)
          cir.call @printLine(%5) : (!cir.ptr<!s8i>) -> () loc(#loc201)
          cir.break loc(#loc202)
        } loc(#loc199)
        cir.yield loc(#loc192)
      } loc(#loc192)
    } loc(#loc312)
    cir.scope {
      %3 = cir.alloca !u64i, !cir.ptr<!u64i>, ["i"] {alignment = 8 : i64} loc(#loc315)
      %4 = cir.alloca !cir.ptr<!s32i>, !cir.ptr<!cir.ptr<!s32i>>, ["intPointer"] {alignment = 8 : i64} loc(#loc316)
      %5 = cir.get_global @malloc : !cir.ptr<!cir.func<!cir.ptr<!void> (!u64i)>> loc(#loc209)
      %6 = cir.load %0 : !cir.ptr<!s32i>, !s32i loc(#loc210)
      %7 = cir.cast(integral, %6 : !s32i), !u64i loc(#loc210)
      %8 = cir.const #cir.int<4> : !u64i loc(#loc317)
      %9 = cir.binop(mul, %7, %8) : !u64i loc(#loc318)
      %10 = cir.call @malloc(%9) : (!u64i) -> !cir.ptr<!void> extra(#fn_attr) loc(#loc209)
      %11 = cir.cast(bitcast, %10 : !cir.ptr<!void>), !cir.ptr<!s32i> loc(#loc319)
      cir.store %11, %4 : !cir.ptr<!s32i>, !cir.ptr<!cir.ptr<!s32i>> loc(#loc320)
      cir.scope {
        %19 = cir.load %4 : !cir.ptr<!cir.ptr<!s32i>>, !cir.ptr<!s32i> loc(#loc217)
        %20 = cir.const #cir.ptr<null> : !cir.ptr<!void> loc(#loc218)
        %21 = cir.cast(bitcast, %20 : !cir.ptr<!void>), !cir.ptr<!s32i> loc(#loc218)
        %22 = cir.cmp(eq, %19, %21) : !cir.ptr<!s32i>, !cir.bool loc(#loc322)
        cir.if %22 {
          %23 = cir.get_global @exit : !cir.ptr<!cir.func<!void (!s32i)>> loc(#loc220)
          %24 = cir.const #cir.int<1> : !s32i loc(#loc221)
          %25 = cir.unary(minus, %24) : !s32i, !s32i loc(#loc222)
          cir.call @exit(%25) : (!s32i) -> () extra(#fn_attr) loc(#loc220)
        } loc(#loc323)
      } loc(#loc321)
      cir.scope {
        %19 = cir.const #cir.int<0> : !s32i loc(#loc225)
        %20 = cir.cast(integral, %19 : !s32i), !u64i loc(#loc225)
        cir.store %20, %3 : !u64i, !cir.ptr<!u64i> loc(#loc325)
        cir.for : cond {
          %21 = cir.load %3 : !cir.ptr<!u64i>, !u64i loc(#loc227)
          %22 = cir.load %0 : !cir.ptr<!s32i>, !s32i loc(#loc228)
          %23 = cir.cast(integral, %22 : !s32i), !u64i loc(#loc228)
          %24 = cir.cmp(lt, %21, %23) : !u64i, !cir.bool loc(#loc326)
          cir.condition(%24) loc(#loc229)
        } body {
          cir.scope {
            %21 = cir.const #cir.int<0> : !s32i loc(#loc231)
            %22 = cir.load %4 : !cir.ptr<!cir.ptr<!s32i>>, !cir.ptr<!s32i> loc(#loc232)
            %23 = cir.load %3 : !cir.ptr<!u64i>, !u64i loc(#loc233)
            %24 = cir.ptr_stride(%22 : !cir.ptr<!s32i>, %23 : !u64i), !cir.ptr<!s32i> loc(#loc234)
            cir.store %21, %24 : !s32i, !cir.ptr<!s32i> loc(#loc328)
          } loc(#loc327)
          cir.yield loc(#loc224)
        } step {
          %21 = cir.load %3 : !cir.ptr<!u64i>, !u64i loc(#loc235)
          %22 = cir.unary(inc, %21) : !u64i, !u64i loc(#loc236)
          cir.store %22, %3 : !u64i, !cir.ptr<!u64i> loc(#loc329)
          cir.yield loc(#loc324)
        } loc(#loc324)
      } loc(#loc324)
      %12 = cir.load %4 : !cir.ptr<!cir.ptr<!s32i>>, !cir.ptr<!s32i> loc(#loc237)
      %13 = cir.const #cir.int<0> : !s32i loc(#loc238)
      %14 = cir.ptr_stride(%12 : !cir.ptr<!s32i>, %13 : !s32i), !cir.ptr<!s32i> loc(#loc239)
      %15 = cir.load %14 : !cir.ptr<!s32i>, !s32i loc(#loc237)
      cir.call @printIntLine(%15) : (!s32i) -> () loc(#loc240)
      %16 = cir.get_global @free : !cir.ptr<!cir.func<!void (!cir.ptr<!void>)>> loc(#loc241)
      %17 = cir.load %4 : !cir.ptr<!cir.ptr<!s32i>>, !cir.ptr<!s32i> loc(#loc242)
      %18 = cir.cast(bitcast, %17 : !cir.ptr<!s32i>), !cir.ptr<!void> loc(#loc242)
      cir.call @free(%18) : (!cir.ptr<!void>) -> () extra(#fn_attr) loc(#loc241)
    } loc(#loc314)
    cir.return loc(#loc186)
  } loc(#loc309)
} loc(#loc)
#loc = loc("/home/ladisgin/git_proj/juliet-c/testcases/CWE680_Integer_Overflow_to_Buffer_Overflow/CWE680_Integer_Overflow_to_Buffer_Overflow__malloc_fgets_15.c":0:0)
#loc1 = loc("/usr/include/stdio.h":654:1)
#loc2 = loc("/usr/include/stdio.h":655:59)
#loc3 = loc("/usr/include/stdio.h":149:1)
#loc4 = loc("/usr/include/stdio.h":149:14)
#loc5 = loc("/usr/include/stdlib.h":105:1)
#loc6 = loc("/usr/include/stdlib.h":106:33)
#loc7 = loc("../../testcasesupport/std_testcase_io.h":14:1)
#loc8 = loc("../../testcasesupport/std_testcase_io.h":14:33)
#loc9 = loc("CWE680_Integer_Overflow_to_Buffer_Overflow__malloc_fgets_15.c":41:23)
#loc10 = loc("CWE680_Integer_Overflow_to_Buffer_Overflow__malloc_fgets_15.c":47:19)
#loc11 = loc("/usr/include/stdlib.h":672:1)
#loc12 = loc("/usr/include/stdlib.h":672:45)
#loc13 = loc("/usr/include/stdlib.h":756:1)
#loc14 = loc("/usr/include/stdlib.h":756:70)
#loc15 = loc("../../testcasesupport/std_testcase_io.h":18:1)
#loc16 = loc("../../testcasesupport/std_testcase_io.h":18:33)
#loc17 = loc("/usr/include/stdlib.h":687:1)
#loc18 = loc("/usr/include/stdlib.h":687:32)
#loc19 = loc("CWE680_Integer_Overflow_to_Buffer_Overflow__malloc_fgets_15.c":23:1)
#loc20 = loc("CWE680_Integer_Overflow_to_Buffer_Overflow__malloc_fgets_15.c":64:1)
#loc21 = loc("CWE680_Integer_Overflow_to_Buffer_Overflow__malloc_fgets_15.c":25:5)
#loc22 = loc("CWE680_Integer_Overflow_to_Buffer_Overflow__malloc_fgets_15.c":25:9)
#loc23 = loc("CWE680_Integer_Overflow_to_Buffer_Overflow__malloc_fgets_15.c":27:13)
#loc24 = loc("CWE680_Integer_Overflow_to_Buffer_Overflow__malloc_fgets_15.c":27:12)
#loc25 = loc("CWE680_Integer_Overflow_to_Buffer_Overflow__malloc_fgets_15.c":27:5)
#loc26 = loc("CWE680_Integer_Overflow_to_Buffer_Overflow__malloc_fgets_15.c":28:5)
#loc27 = loc("CWE680_Integer_Overflow_to_Buffer_Overflow__malloc_fgets_15.c":49:5)
#loc28 = loc("CWE680_Integer_Overflow_to_Buffer_Overflow__malloc_fgets_15.c":28:12)
#loc29 = loc("CWE680_Integer_Overflow_to_Buffer_Overflow__malloc_fgets_15.c":30:5)
#loc30 = loc("CWE680_Integer_Overflow_to_Buffer_Overflow__malloc_fgets_15.c":31:5)
#loc31 = loc("CWE680_Integer_Overflow_to_Buffer_Overflow__malloc_fgets_15.c":43:5)
#loc32 = loc("CWE680_Integer_Overflow_to_Buffer_Overflow__malloc_fgets_15.c":32:9)
#loc33 = loc("CWE680_Integer_Overflow_to_Buffer_Overflow__malloc_fgets_15.c":32:45)
#loc34 = loc("CWE680_Integer_Overflow_to_Buffer_Overflow__malloc_fgets_15.c":34:9)
#loc35 = loc("CWE680_Integer_Overflow_to_Buffer_Overflow__malloc_fgets_15.c":42:9)
#loc36 = loc("CWE680_Integer_Overflow_to_Buffer_Overflow__malloc_fgets_15.c":34:19)
#loc37 = loc("CWE680_Integer_Overflow_to_Buffer_Overflow__malloc_fgets_15.c":34:32)
#loc38 = loc("CWE680_Integer_Overflow_to_Buffer_Overflow__malloc_fgets_15.c":34:49)
#loc39 = loc("CWE680_Integer_Overflow_to_Buffer_Overflow__malloc_fgets_15.c":34:13)
#loc40 = loc("CWE680_Integer_Overflow_to_Buffer_Overflow__malloc_fgets_15.c":34:59)
#loc41 = loc("CWE680_Integer_Overflow_to_Buffer_Overflow__malloc_fgets_15.c":35:9)
#loc42 = loc("CWE680_Integer_Overflow_to_Buffer_Overflow__malloc_fgets_15.c":38:9)
#loc43 = loc("CWE680_Integer_Overflow_to_Buffer_Overflow__malloc_fgets_15.c":40:9)
#loc44 = loc("CWE680_Integer_Overflow_to_Buffer_Overflow__malloc_fgets_15.c":37:25)
#loc45 = loc("CWE680_Integer_Overflow_to_Buffer_Overflow__malloc_fgets_15.c":37:20)
#loc46 = loc("CWE680_Integer_Overflow_to_Buffer_Overflow__malloc_fgets_15.c":37:13)
#loc47 = loc("CWE680_Integer_Overflow_to_Buffer_Overflow__malloc_fgets_15.c":37:36)
#loc48 = loc("CWE680_Integer_Overflow_to_Buffer_Overflow__malloc_fgets_15.c":41:13)
#loc49 = loc("CWE680_Integer_Overflow_to_Buffer_Overflow__malloc_fgets_15.c":44:5)
#loc50 = loc("CWE680_Integer_Overflow_to_Buffer_Overflow__malloc_fgets_15.c":45:5)
#loc51 = loc("CWE680_Integer_Overflow_to_Buffer_Overflow__malloc_fgets_15.c":47:9)
#loc52 = loc("CWE680_Integer_Overflow_to_Buffer_Overflow__malloc_fgets_15.c":48:9)
#loc53 = loc("CWE680_Integer_Overflow_to_Buffer_Overflow__malloc_fgets_15.c":50:5)
#loc54 = loc("CWE680_Integer_Overflow_to_Buffer_Overflow__malloc_fgets_15.c":63:5)
#loc55 = loc("CWE680_Integer_Overflow_to_Buffer_Overflow__malloc_fgets_15.c":51:9)
#loc56 = loc("CWE680_Integer_Overflow_to_Buffer_Overflow__malloc_fgets_15.c":51:16)
#loc57 = loc("CWE680_Integer_Overflow_to_Buffer_Overflow__malloc_fgets_15.c":52:9)
#loc58 = loc("CWE680_Integer_Overflow_to_Buffer_Overflow__malloc_fgets_15.c":52:14)
#loc59 = loc("CWE680_Integer_Overflow_to_Buffer_Overflow__malloc_fgets_15.c":55:28)
#loc60 = loc("CWE680_Integer_Overflow_to_Buffer_Overflow__malloc_fgets_15.c":55:35)
#loc61 = loc("CWE680_Integer_Overflow_to_Buffer_Overflow__malloc_fgets_15.c":55:42)
#loc62 = loc("CWE680_Integer_Overflow_to_Buffer_Overflow__malloc_fgets_15.c":55:52)
#loc63 = loc("CWE680_Integer_Overflow_to_Buffer_Overflow__malloc_fgets_15.c":55:53)
#loc64 = loc("CWE680_Integer_Overflow_to_Buffer_Overflow__malloc_fgets_15.c":55:9)
#loc65 = loc("CWE680_Integer_Overflow_to_Buffer_Overflow__malloc_fgets_15.c":56:9)
#loc66 = loc("CWE680_Integer_Overflow_to_Buffer_Overflow__malloc_fgets_15.c":56:43)
#loc67 = loc("CWE680_Integer_Overflow_to_Buffer_Overflow__malloc_fgets_15.c":56:13)
#loc68 = loc("CWE680_Integer_Overflow_to_Buffer_Overflow__malloc_fgets_15.c":56:27)
#loc69 = loc("CWE680_Integer_Overflow_to_Buffer_Overflow__malloc_fgets_15.c":56:33)
#loc70 = loc("CWE680_Integer_Overflow_to_Buffer_Overflow__malloc_fgets_15.c":56:34)
#loc71 = loc("CWE680_Integer_Overflow_to_Buffer_Overflow__malloc_fgets_15.c":56:40)
#loc72 = loc("CWE680_Integer_Overflow_to_Buffer_Overflow__malloc_fgets_15.c":56:39)
#loc73 = loc("CWE680_Integer_Overflow_to_Buffer_Overflow__malloc_fgets_15.c":57:9)
#loc74 = loc("CWE680_Integer_Overflow_to_Buffer_Overflow__malloc_fgets_15.c":60:9)
#loc75 = loc("CWE680_Integer_Overflow_to_Buffer_Overflow__malloc_fgets_15.c":57:18)
#loc76 = loc("CWE680_Integer_Overflow_to_Buffer_Overflow__malloc_fgets_15.c":57:14)
#loc77 = loc("CWE680_Integer_Overflow_to_Buffer_Overflow__malloc_fgets_15.c":57:21)
#loc78 = loc("CWE680_Integer_Overflow_to_Buffer_Overflow__malloc_fgets_15.c":57:33)
#loc79 = loc("CWE680_Integer_Overflow_to_Buffer_Overflow__malloc_fgets_15.c":57:23)
#loc80 = loc("CWE680_Integer_Overflow_to_Buffer_Overflow__malloc_fgets_15.c":58:9)
#loc81 = loc("CWE680_Integer_Overflow_to_Buffer_Overflow__malloc_fgets_15.c":59:29)
#loc82 = loc("CWE680_Integer_Overflow_to_Buffer_Overflow__malloc_fgets_15.c":59:13)
#loc83 = loc("CWE680_Integer_Overflow_to_Buffer_Overflow__malloc_fgets_15.c":59:24)
#loc84 = loc("CWE680_Integer_Overflow_to_Buffer_Overflow__malloc_fgets_15.c":59:25)
#loc85 = loc("CWE680_Integer_Overflow_to_Buffer_Overflow__malloc_fgets_15.c":57:40)
#loc86 = loc("CWE680_Integer_Overflow_to_Buffer_Overflow__malloc_fgets_15.c":57:39)
#loc87 = loc("CWE680_Integer_Overflow_to_Buffer_Overflow__malloc_fgets_15.c":61:22)
#loc88 = loc("CWE680_Integer_Overflow_to_Buffer_Overflow__malloc_fgets_15.c":61:33)
#loc89 = loc("CWE680_Integer_Overflow_to_Buffer_Overflow__malloc_fgets_15.c":61:34)
#loc90 = loc("CWE680_Integer_Overflow_to_Buffer_Overflow__malloc_fgets_15.c":61:9)
#loc91 = loc("CWE680_Integer_Overflow_to_Buffer_Overflow__malloc_fgets_15.c":62:9)
#loc92 = loc("CWE680_Integer_Overflow_to_Buffer_Overflow__malloc_fgets_15.c":62:14)
#loc93 = loc("CWE680_Integer_Overflow_to_Buffer_Overflow__malloc_fgets_15.c":136:1)
#loc94 = loc("CWE680_Integer_Overflow_to_Buffer_Overflow__malloc_fgets_15.c":140:1)
#loc95 = loc("CWE680_Integer_Overflow_to_Buffer_Overflow__malloc_fgets_15.c":138:5)
#loc96 = loc("CWE680_Integer_Overflow_to_Buffer_Overflow__malloc_fgets_15.c":138:14)
#loc97 = loc("CWE680_Integer_Overflow_to_Buffer_Overflow__malloc_fgets_15.c":139:5)
#loc98 = loc("CWE680_Integer_Overflow_to_Buffer_Overflow__malloc_fgets_15.c":139:14)
#loc99 = loc("/usr/include/stdlib.h":575:1)
#loc100 = loc("/usr/include/stdlib.h":575:41)
#loc101 = loc("/usr/include/time.h":76:1)
#loc102 = loc("/usr/include/time.h":76:38)
#loc103 = loc("CWE680_Integer_Overflow_to_Buffer_Overflow__malloc_fgets_15.c":157:15)
#loc104 = loc("CWE680_Integer_Overflow_to_Buffer_Overflow__malloc_fgets_15.c":159:15)
#loc105 = loc("CWE680_Integer_Overflow_to_Buffer_Overflow__malloc_fgets_15.c":162:15)
#loc106 = loc("CWE680_Integer_Overflow_to_Buffer_Overflow__malloc_fgets_15.c":164:15)
#loc107 = loc("CWE680_Integer_Overflow_to_Buffer_Overflow__malloc_fgets_15.c":152:1)
#loc108 = loc("CWE680_Integer_Overflow_to_Buffer_Overflow__malloc_fgets_15.c":167:1)
#loc113 = loc("CWE680_Integer_Overflow_to_Buffer_Overflow__malloc_fgets_15.c":153:1)
#loc114 = loc("CWE680_Integer_Overflow_to_Buffer_Overflow__malloc_fgets_15.c":155:27)
#loc115 = loc("CWE680_Integer_Overflow_to_Buffer_Overflow__malloc_fgets_15.c":155:22)
#loc116 = loc("CWE680_Integer_Overflow_to_Buffer_Overflow__malloc_fgets_15.c":155:5)
#loc117 = loc("CWE680_Integer_Overflow_to_Buffer_Overflow__malloc_fgets_15.c":157:5)
#loc118 = loc("CWE680_Integer_Overflow_to_Buffer_Overflow__malloc_fgets_15.c":158:5)
#loc119 = loc("CWE680_Integer_Overflow_to_Buffer_Overflow__malloc_fgets_15.c":158:70)
#loc120 = loc("CWE680_Integer_Overflow_to_Buffer_Overflow__malloc_fgets_15.c":159:5)
#loc121 = loc("CWE680_Integer_Overflow_to_Buffer_Overflow__malloc_fgets_15.c":162:5)
#loc122 = loc("CWE680_Integer_Overflow_to_Buffer_Overflow__malloc_fgets_15.c":163:5)
#loc123 = loc("CWE680_Integer_Overflow_to_Buffer_Overflow__malloc_fgets_15.c":163:69)
#loc124 = loc("CWE680_Integer_Overflow_to_Buffer_Overflow__malloc_fgets_15.c":164:5)
#loc125 = loc("CWE680_Integer_Overflow_to_Buffer_Overflow__malloc_fgets_15.c":166:12)
#loc126 = loc("CWE680_Integer_Overflow_to_Buffer_Overflow__malloc_fgets_15.c":166:5)
#loc127 = loc("CWE680_Integer_Overflow_to_Buffer_Overflow__malloc_fgets_15.c":71:1)
#loc128 = loc("CWE680_Integer_Overflow_to_Buffer_Overflow__malloc_fgets_15.c":101:1)
#loc129 = loc("CWE680_Integer_Overflow_to_Buffer_Overflow__malloc_fgets_15.c":73:5)
#loc130 = loc("CWE680_Integer_Overflow_to_Buffer_Overflow__malloc_fgets_15.c":73:9)
#loc131 = loc("CWE680_Integer_Overflow_to_Buffer_Overflow__malloc_fgets_15.c":75:13)
#loc132 = loc("CWE680_Integer_Overflow_to_Buffer_Overflow__malloc_fgets_15.c":75:12)
#loc133 = loc("CWE680_Integer_Overflow_to_Buffer_Overflow__malloc_fgets_15.c":75:5)
#loc134 = loc("CWE680_Integer_Overflow_to_Buffer_Overflow__malloc_fgets_15.c":76:5)
#loc135 = loc("CWE680_Integer_Overflow_to_Buffer_Overflow__malloc_fgets_15.c":86:5)
#loc136 = loc("CWE680_Integer_Overflow_to_Buffer_Overflow__malloc_fgets_15.c":76:12)
#loc137 = loc("CWE680_Integer_Overflow_to_Buffer_Overflow__malloc_fgets_15.c":78:5)
#loc138 = loc("CWE680_Integer_Overflow_to_Buffer_Overflow__malloc_fgets_15.c":80:19)
#loc139 = loc("CWE680_Integer_Overflow_to_Buffer_Overflow__malloc_fgets_15.c":80:9)
#loc140 = loc("CWE680_Integer_Overflow_to_Buffer_Overflow__malloc_fgets_15.c":81:9)
#loc141 = loc("CWE680_Integer_Overflow_to_Buffer_Overflow__malloc_fgets_15.c":82:5)
#loc142 = loc("CWE680_Integer_Overflow_to_Buffer_Overflow__malloc_fgets_15.c":84:16)
#loc143 = loc("CWE680_Integer_Overflow_to_Buffer_Overflow__malloc_fgets_15.c":84:9)
#loc144 = loc("CWE680_Integer_Overflow_to_Buffer_Overflow__malloc_fgets_15.c":85:9)
#loc145 = loc("CWE680_Integer_Overflow_to_Buffer_Overflow__malloc_fgets_15.c":87:5)
#loc146 = loc("CWE680_Integer_Overflow_to_Buffer_Overflow__malloc_fgets_15.c":100:5)
#loc147 = loc("CWE680_Integer_Overflow_to_Buffer_Overflow__malloc_fgets_15.c":88:9)
#loc148 = loc("CWE680_Integer_Overflow_to_Buffer_Overflow__malloc_fgets_15.c":88:16)
#loc149 = loc("CWE680_Integer_Overflow_to_Buffer_Overflow__malloc_fgets_15.c":89:9)
#loc150 = loc("CWE680_Integer_Overflow_to_Buffer_Overflow__malloc_fgets_15.c":89:14)
#loc151 = loc("CWE680_Integer_Overflow_to_Buffer_Overflow__malloc_fgets_15.c":92:28)
#loc152 = loc("CWE680_Integer_Overflow_to_Buffer_Overflow__malloc_fgets_15.c":92:35)
#loc153 = loc("CWE680_Integer_Overflow_to_Buffer_Overflow__malloc_fgets_15.c":92:42)
#loc154 = loc("CWE680_Integer_Overflow_to_Buffer_Overflow__malloc_fgets_15.c":92:52)
#loc155 = loc("CWE680_Integer_Overflow_to_Buffer_Overflow__malloc_fgets_15.c":92:53)
#loc156 = loc("CWE680_Integer_Overflow_to_Buffer_Overflow__malloc_fgets_15.c":92:9)
#loc157 = loc("CWE680_Integer_Overflow_to_Buffer_Overflow__malloc_fgets_15.c":93:9)
#loc158 = loc("CWE680_Integer_Overflow_to_Buffer_Overflow__malloc_fgets_15.c":93:43)
#loc159 = loc("CWE680_Integer_Overflow_to_Buffer_Overflow__malloc_fgets_15.c":93:13)
#loc160 = loc("CWE680_Integer_Overflow_to_Buffer_Overflow__malloc_fgets_15.c":93:27)
#loc161 = loc("CWE680_Integer_Overflow_to_Buffer_Overflow__malloc_fgets_15.c":93:33)
#loc162 = loc("CWE680_Integer_Overflow_to_Buffer_Overflow__malloc_fgets_15.c":93:34)
#loc163 = loc("CWE680_Integer_Overflow_to_Buffer_Overflow__malloc_fgets_15.c":93:40)
#loc164 = loc("CWE680_Integer_Overflow_to_Buffer_Overflow__malloc_fgets_15.c":93:39)
#loc165 = loc("CWE680_Integer_Overflow_to_Buffer_Overflow__malloc_fgets_15.c":94:9)
#loc166 = loc("CWE680_Integer_Overflow_to_Buffer_Overflow__malloc_fgets_15.c":97:9)
#loc167 = loc("CWE680_Integer_Overflow_to_Buffer_Overflow__malloc_fgets_15.c":94:18)
#loc168 = loc("CWE680_Integer_Overflow_to_Buffer_Overflow__malloc_fgets_15.c":94:14)
#loc169 = loc("CWE680_Integer_Overflow_to_Buffer_Overflow__malloc_fgets_15.c":94:21)
#loc170 = loc("CWE680_Integer_Overflow_to_Buffer_Overflow__malloc_fgets_15.c":94:33)
#loc171 = loc("CWE680_Integer_Overflow_to_Buffer_Overflow__malloc_fgets_15.c":94:23)
#loc172 = loc("CWE680_Integer_Overflow_to_Buffer_Overflow__malloc_fgets_15.c":95:9)
#loc173 = loc("CWE680_Integer_Overflow_to_Buffer_Overflow__malloc_fgets_15.c":96:29)
#loc174 = loc("CWE680_Integer_Overflow_to_Buffer_Overflow__malloc_fgets_15.c":96:13)
#loc175 = loc("CWE680_Integer_Overflow_to_Buffer_Overflow__malloc_fgets_15.c":96:24)
#loc176 = loc("CWE680_Integer_Overflow_to_Buffer_Overflow__malloc_fgets_15.c":96:25)
#loc177 = loc("CWE680_Integer_Overflow_to_Buffer_Overflow__malloc_fgets_15.c":94:40)
#loc178 = loc("CWE680_Integer_Overflow_to_Buffer_Overflow__malloc_fgets_15.c":94:39)
#loc179 = loc("CWE680_Integer_Overflow_to_Buffer_Overflow__malloc_fgets_15.c":98:22)
#loc180 = loc("CWE680_Integer_Overflow_to_Buffer_Overflow__malloc_fgets_15.c":98:33)
#loc181 = loc("CWE680_Integer_Overflow_to_Buffer_Overflow__malloc_fgets_15.c":98:34)
#loc182 = loc("CWE680_Integer_Overflow_to_Buffer_Overflow__malloc_fgets_15.c":98:9)
#loc183 = loc("CWE680_Integer_Overflow_to_Buffer_Overflow__malloc_fgets_15.c":99:9)
#loc184 = loc("CWE680_Integer_Overflow_to_Buffer_Overflow__malloc_fgets_15.c":99:14)
#loc185 = loc("CWE680_Integer_Overflow_to_Buffer_Overflow__malloc_fgets_15.c":104:1)
#loc186 = loc("CWE680_Integer_Overflow_to_Buffer_Overflow__malloc_fgets_15.c":134:1)
#loc187 = loc("CWE680_Integer_Overflow_to_Buffer_Overflow__malloc_fgets_15.c":106:5)
#loc188 = loc("CWE680_Integer_Overflow_to_Buffer_Overflow__malloc_fgets_15.c":106:9)
#loc189 = loc("CWE680_Integer_Overflow_to_Buffer_Overflow__malloc_fgets_15.c":108:13)
#loc190 = loc("CWE680_Integer_Overflow_to_Buffer_Overflow__malloc_fgets_15.c":108:12)
#loc191 = loc("CWE680_Integer_Overflow_to_Buffer_Overflow__malloc_fgets_15.c":108:5)
#loc192 = loc("CWE680_Integer_Overflow_to_Buffer_Overflow__malloc_fgets_15.c":109:5)
#loc193 = loc("CWE680_Integer_Overflow_to_Buffer_Overflow__malloc_fgets_15.c":119:5)
#loc194 = loc("CWE680_Integer_Overflow_to_Buffer_Overflow__malloc_fgets_15.c":109:12)
#loc195 = loc("CWE680_Integer_Overflow_to_Buffer_Overflow__malloc_fgets_15.c":111:5)
#loc196 = loc("CWE680_Integer_Overflow_to_Buffer_Overflow__malloc_fgets_15.c":113:16)
#loc197 = loc("CWE680_Integer_Overflow_to_Buffer_Overflow__malloc_fgets_15.c":113:9)
#loc198 = loc("CWE680_Integer_Overflow_to_Buffer_Overflow__malloc_fgets_15.c":114:9)
#loc199 = loc("CWE680_Integer_Overflow_to_Buffer_Overflow__malloc_fgets_15.c":115:5)
#loc200 = loc("CWE680_Integer_Overflow_to_Buffer_Overflow__malloc_fgets_15.c":117:19)
#loc201 = loc("CWE680_Integer_Overflow_to_Buffer_Overflow__malloc_fgets_15.c":117:9)
#loc202 = loc("CWE680_Integer_Overflow_to_Buffer_Overflow__malloc_fgets_15.c":118:9)
#loc203 = loc("CWE680_Integer_Overflow_to_Buffer_Overflow__malloc_fgets_15.c":120:5)
#loc204 = loc("CWE680_Integer_Overflow_to_Buffer_Overflow__malloc_fgets_15.c":133:5)
#loc205 = loc("CWE680_Integer_Overflow_to_Buffer_Overflow__malloc_fgets_15.c":121:9)
#loc206 = loc("CWE680_Integer_Overflow_to_Buffer_Overflow__malloc_fgets_15.c":121:16)
#loc207 = loc("CWE680_Integer_Overflow_to_Buffer_Overflow__malloc_fgets_15.c":122:9)
#loc208 = loc("CWE680_Integer_Overflow_to_Buffer_Overflow__malloc_fgets_15.c":122:14)
#loc209 = loc("CWE680_Integer_Overflow_to_Buffer_Overflow__malloc_fgets_15.c":125:28)
#loc210 = loc("CWE680_Integer_Overflow_to_Buffer_Overflow__malloc_fgets_15.c":125:35)
#loc211 = loc("CWE680_Integer_Overflow_to_Buffer_Overflow__malloc_fgets_15.c":125:42)
#loc212 = loc("CWE680_Integer_Overflow_to_Buffer_Overflow__malloc_fgets_15.c":125:52)
#loc213 = loc("CWE680_Integer_Overflow_to_Buffer_Overflow__malloc_fgets_15.c":125:53)
#loc214 = loc("CWE680_Integer_Overflow_to_Buffer_Overflow__malloc_fgets_15.c":125:9)
#loc215 = loc("CWE680_Integer_Overflow_to_Buffer_Overflow__malloc_fgets_15.c":126:9)
#loc216 = loc("CWE680_Integer_Overflow_to_Buffer_Overflow__malloc_fgets_15.c":126:43)
#loc217 = loc("CWE680_Integer_Overflow_to_Buffer_Overflow__malloc_fgets_15.c":126:13)
#loc218 = loc("CWE680_Integer_Overflow_to_Buffer_Overflow__malloc_fgets_15.c":126:27)
#loc219 = loc("CWE680_Integer_Overflow_to_Buffer_Overflow__malloc_fgets_15.c":126:33)
#loc220 = loc("CWE680_Integer_Overflow_to_Buffer_Overflow__malloc_fgets_15.c":126:34)
#loc221 = loc("CWE680_Integer_Overflow_to_Buffer_Overflow__malloc_fgets_15.c":126:40)
#loc222 = loc("CWE680_Integer_Overflow_to_Buffer_Overflow__malloc_fgets_15.c":126:39)
#loc223 = loc("CWE680_Integer_Overflow_to_Buffer_Overflow__malloc_fgets_15.c":127:9)
#loc224 = loc("CWE680_Integer_Overflow_to_Buffer_Overflow__malloc_fgets_15.c":130:9)
#loc225 = loc("CWE680_Integer_Overflow_to_Buffer_Overflow__malloc_fgets_15.c":127:18)
#loc226 = loc("CWE680_Integer_Overflow_to_Buffer_Overflow__malloc_fgets_15.c":127:14)
#loc227 = loc("CWE680_Integer_Overflow_to_Buffer_Overflow__malloc_fgets_15.c":127:21)
#loc228 = loc("CWE680_Integer_Overflow_to_Buffer_Overflow__malloc_fgets_15.c":127:33)
#loc229 = loc("CWE680_Integer_Overflow_to_Buffer_Overflow__malloc_fgets_15.c":127:23)
#loc230 = loc("CWE680_Integer_Overflow_to_Buffer_Overflow__malloc_fgets_15.c":128:9)
#loc231 = loc("CWE680_Integer_Overflow_to_Buffer_Overflow__malloc_fgets_15.c":129:29)
#loc232 = loc("CWE680_Integer_Overflow_to_Buffer_Overflow__malloc_fgets_15.c":129:13)
#loc233 = loc("CWE680_Integer_Overflow_to_Buffer_Overflow__malloc_fgets_15.c":129:24)
#loc234 = loc("CWE680_Integer_Overflow_to_Buffer_Overflow__malloc_fgets_15.c":129:25)
#loc235 = loc("CWE680_Integer_Overflow_to_Buffer_Overflow__malloc_fgets_15.c":127:40)
#loc236 = loc("CWE680_Integer_Overflow_to_Buffer_Overflow__malloc_fgets_15.c":127:39)
#loc237 = loc("CWE680_Integer_Overflow_to_Buffer_Overflow__malloc_fgets_15.c":131:22)
#loc238 = loc("CWE680_Integer_Overflow_to_Buffer_Overflow__malloc_fgets_15.c":131:33)
#loc239 = loc("CWE680_Integer_Overflow_to_Buffer_Overflow__malloc_fgets_15.c":131:34)
#loc240 = loc("CWE680_Integer_Overflow_to_Buffer_Overflow__malloc_fgets_15.c":131:9)
#loc241 = loc("CWE680_Integer_Overflow_to_Buffer_Overflow__malloc_fgets_15.c":132:9)
#loc242 = loc("CWE680_Integer_Overflow_to_Buffer_Overflow__malloc_fgets_15.c":132:14)
#loc243 = loc(fused[#loc1, #loc2])
#loc244 = loc(fused[#loc3, #loc4])
#loc245 = loc(fused[#loc5, #loc6])
#loc246 = loc(fused[#loc7, #loc8])
#loc247 = loc(fused[#loc11, #loc12])
#loc248 = loc(fused[#loc13, #loc14])
#loc249 = loc(fused[#loc15, #loc16])
#loc250 = loc(fused[#loc17, #loc18])
#loc251 = loc(fused[#loc19, #loc20])
#loc252 = loc(fused[#loc21, #loc22])
#loc253 = loc(fused[#loc25, #loc23])
#loc254 = loc(fused[#loc26, #loc27])
#loc255 = loc(fused[#loc30, #loc31])
#loc256 = loc(fused[#loc32, #loc33])
#loc257 = loc(fused[#loc34, #loc35])
#loc258 = loc(fused[#loc39, #loc40])
#loc259 = loc(fused[#loc41, #loc42, #loc43, #loc35])
#loc260 = loc(fused[#loc46, #loc47])
#loc261 = loc(fused[#loc53, #loc54])
#loc262 = loc(fused[#loc55, #loc56])
#loc263 = loc(fused[#loc57, #loc58])
#loc264 = loc(fused[#loc61, #loc62])
#loc265 = loc(fused[#loc60, #loc62])
#loc266 = loc(fused[#loc59, #loc63])
#loc267 = loc(fused[#loc64, #loc63])
#loc268 = loc(fused[#loc65, #loc66])
#loc269 = loc(fused[#loc67, #loc68])
#loc270 = loc(fused[#loc69, #loc66])
#loc271 = loc(fused[#loc73, #loc74])
#loc272 = loc(fused[#loc76, #loc75])
#loc273 = loc(fused[#loc77, #loc78])
#loc274 = loc(fused[#loc80, #loc74])
#loc275 = loc(fused[#loc82, #loc81])
#loc276 = loc(fused[#loc86, #loc85])
#loc277 = loc(fused[#loc93, #loc94])
#loc278 = loc(fused[#loc95, #loc96])
#loc279 = loc(fused[#loc97, #loc98])
#loc280 = loc(fused[#loc99, #loc100])
#loc281 = loc(fused[#loc101, #loc102])
#loc282 = loc(fused[#loc107, #loc108])
#loc285 = loc(fused[#loc118, #loc119])
#loc286 = loc(fused[#loc122, #loc123])
#loc287 = loc(fused[#loc126, #loc125])
#loc288 = loc(fused[#loc127, #loc128])
#loc289 = loc(fused[#loc129, #loc130])
#loc290 = loc(fused[#loc133, #loc131])
#loc291 = loc(fused[#loc134, #loc135])
#loc292 = loc(fused[#loc143, #loc142])
#loc293 = loc(fused[#loc145, #loc146])
#loc294 = loc(fused[#loc147, #loc148])
#loc295 = loc(fused[#loc149, #loc150])
#loc296 = loc(fused[#loc153, #loc154])
#loc297 = loc(fused[#loc152, #loc154])
#loc298 = loc(fused[#loc151, #loc155])
#loc299 = loc(fused[#loc156, #loc155])
#loc300 = loc(fused[#loc157, #loc158])
#loc301 = loc(fused[#loc159, #loc160])
#loc302 = loc(fused[#loc161, #loc158])
#loc303 = loc(fused[#loc165, #loc166])
#loc304 = loc(fused[#loc168, #loc167])
#loc305 = loc(fused[#loc169, #loc170])
#loc306 = loc(fused[#loc172, #loc166])
#loc307 = loc(fused[#loc174, #loc173])
#loc308 = loc(fused[#loc178, #loc177])
#loc309 = loc(fused[#loc185, #loc186])
#loc310 = loc(fused[#loc187, #loc188])
#loc311 = loc(fused[#loc191, #loc189])
#loc312 = loc(fused[#loc192, #loc193])
#loc313 = loc(fused[#loc197, #loc196])
#loc314 = loc(fused[#loc203, #loc204])
#loc315 = loc(fused[#loc205, #loc206])
#loc316 = loc(fused[#loc207, #loc208])
#loc317 = loc(fused[#loc211, #loc212])
#loc318 = loc(fused[#loc210, #loc212])
#loc319 = loc(fused[#loc209, #loc213])
#loc320 = loc(fused[#loc214, #loc213])
#loc321 = loc(fused[#loc215, #loc216])
#loc322 = loc(fused[#loc217, #loc218])
#loc323 = loc(fused[#loc219, #loc216])
#loc324 = loc(fused[#loc223, #loc224])
#loc325 = loc(fused[#loc226, #loc225])
#loc326 = loc(fused[#loc227, #loc228])
#loc327 = loc(fused[#loc230, #loc224])
#loc328 = loc(fused[#loc232, #loc231])
#loc329 = loc(fused[#loc236, #loc235])
