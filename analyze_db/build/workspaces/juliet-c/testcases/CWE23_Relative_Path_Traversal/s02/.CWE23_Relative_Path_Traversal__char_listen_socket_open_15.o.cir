!s32i = !cir.int<s, 32>
!s64i = !cir.int<s, 64>
!s8i = !cir.int<s, 8>
!u16i = !cir.int<u, 16>
!u32i = !cir.int<u, 32>
!u64i = !cir.int<u, 64>
!u8i = !cir.int<u, 8>
!void = !cir.void
#false = #cir.bool<false> : !cir.bool
#fn_attr = #cir<extra({nothrow = #cir.nothrow})>
#fn_attr1 = #cir<extra({inline = #cir.inline<no>, optnone = #cir.optnone, uwtable = #cir.uwtable<async>})>
#true = #cir.bool<true> : !cir.bool
!ty_in_addr = !cir.record<struct "in_addr" {!u32i} #cir.record.decl.ast>
!ty_sockaddr = !cir.record<struct "sockaddr" {!u16i, !cir.array<!s8i x 14>} #cir.record.decl.ast>
!ty_sockaddr_in = !cir.record<struct "sockaddr_in" {!u16i, !u16i, !ty_in_addr, !cir.array<!u8i x 8>}>
module @"/workspaces/juliet-c/testcases/CWE23_Relative_Path_Traversal/s02/CWE23_Relative_Path_Traversal__char_listen_socket_open_15.cpp" attributes {cir.lang = #cir.lang<cxx>, cir.sob = #cir.signed_overflow_behavior<undefined>, cir.triple = "x86_64-unknown-linux-gnu", cir.type_size_info = #cir.type_size_info<char = 8, int = 32, size_t = 64>, cir.uwtable = #cir.uwtable<async>, dlti.dl_spec = #dlti.dl_spec<i16 = dense<16> : vector<2xi64>, i8 = dense<8> : vector<2xi64>, f16 = dense<16> : vector<2xi64>, i32 = dense<32> : vector<2xi64>, !llvm.ptr<270> = dense<32> : vector<4xi64>, i1 = dense<8> : vector<2xi64>, !llvm.ptr = dense<64> : vector<4xi64>, i64 = dense<64> : vector<2xi64>, f80 = dense<128> : vector<2xi64>, i128 = dense<128> : vector<2xi64>, f64 = dense<64> : vector<2xi64>, !llvm.ptr<272> = dense<64> : vector<4xi64>, f128 = dense<128> : vector<2xi64>, !llvm.ptr<271> = dense<32> : vector<4xi64>, "dlti.mangling_mode" = "e", "dlti.stack_alignment" = 128 : i64, "dlti.endianness" = "little">} {
  cir.global "private" constant cir_private @__const._ZN57CWE23_Relative_Path_Traversal__char_listen_socket_open_15L8goodG2B2Ev.dataBuffer = #cir.const_array<"/tmp/" : !cir.array<!s8i x 5>, trailing_zeros> : !cir.array<!s8i x 4096> loc(#loc299)
  cir.global "private" constant cir_private @__const._ZN57CWE23_Relative_Path_Traversal__char_listen_socket_open_15L8goodG2B1Ev.dataBuffer = #cir.const_array<"/tmp/" : !cir.array<!s8i x 5>, trailing_zeros> : !cir.array<!s8i x 4096> loc(#loc300)
  cir.global "private" constant cir_private @__const._ZN57CWE23_Relative_Path_Traversal__char_listen_socket_open_153badEv.dataBuffer = #cir.const_array<"/tmp/" : !cir.array<!s8i x 5>, trailing_zeros> : !cir.array<!s8i x 4096> loc(#loc301)
  cir.func private @strlen(!cir.ptr<!s8i>) -> !u64i extra(#fn_attr) loc(#loc302)
  cir.func private @socket(!s32i, !s32i, !s32i) -> !s32i extra(#fn_attr) loc(#loc303)
  cir.func private @htons(!u16i) -> !u16i extra(#fn_attr) loc(#loc304)
  cir.func private @bind(!s32i, !cir.ptr<!ty_sockaddr>, !u32i) -> !s32i extra(#fn_attr) loc(#loc305)
  cir.func private @listen(!s32i, !s32i) -> !s32i extra(#fn_attr) loc(#loc306)
  cir.func private @accept(!s32i, !cir.ptr<!ty_sockaddr>, !cir.ptr<!u32i>) -> !s32i loc(#loc307)
  cir.func private @recv(!s32i, !cir.ptr<!void>, !u64i, !s32i) -> !s64i loc(#loc308)
  cir.func private @strchr(!cir.ptr<!s8i>, !s32i) -> !cir.ptr<!s8i> extra(#fn_attr) loc(#loc309)
  cir.func private @close(!s32i) -> !s32i loc(#loc310)
  cir.func private @printLine(!cir.ptr<!s8i>) loc(#loc311)
  cir.global "private" constant cir_private dsolocal @".str" = #cir.const_array<"Benign, fixed string\00" : !cir.array<!s8i x 21>> : !cir.array<!s8i x 21> {alignment = 1 : i64} loc(#loc27)
  cir.func private @open(!cir.ptr<!s8i>, !s32i, ...) -> !s32i loc(#loc312)
  cir.func @_ZN57CWE23_Relative_Path_Traversal__char_listen_socket_open_153badEv() extra(#fn_attr1) {
    %0 = cir.alloca !cir.ptr<!s8i>, !cir.ptr<!cir.ptr<!s8i>>, ["data"] {alignment = 8 : i64} loc(#loc314)
    %1 = cir.alloca !cir.array<!s8i x 4096>, !cir.ptr<!cir.array<!s8i x 4096>>, ["dataBuffer"] {alignment = 16 : i64} loc(#loc301)
    %2 = cir.get_global @__const._ZN57CWE23_Relative_Path_Traversal__char_listen_socket_open_153badEv.dataBuffer : !cir.ptr<!cir.array<!s8i x 4096>> loc(#loc301)
    cir.copy %2 to %1 : !cir.ptr<!cir.array<!s8i x 4096>> loc(#loc301)
    %3 = cir.cast(array_to_ptrdecay, %1 : !cir.ptr<!cir.array<!s8i x 4096>>), !cir.ptr<!s8i> loc(#loc34)
    cir.store %3, %0 : !cir.ptr<!s8i>, !cir.ptr<!cir.ptr<!s8i>> loc(#loc315)
    cir.scope {
      %4 = cir.const #cir.int<6> : !s32i loc(#loc38)
      cir.switch (%4 : !s32i) {
        cir.case(equal, [#cir.int<6> : !s32i]) {
          cir.scope {
            %5 = cir.alloca !s32i, !cir.ptr<!s32i>, ["recvResult"] {alignment = 4 : i64} loc(#loc318)
            %6 = cir.alloca !ty_sockaddr_in, !cir.ptr<!ty_sockaddr_in>, ["service"] {alignment = 4 : i64} loc(#loc319)
            %7 = cir.alloca !cir.ptr<!s8i>, !cir.ptr<!cir.ptr<!s8i>>, ["replace"] {alignment = 8 : i64} loc(#loc320)
            %8 = cir.alloca !s32i, !cir.ptr<!s32i>, ["listenSocket", init] {alignment = 4 : i64} loc(#loc321)
            %9 = cir.alloca !s32i, !cir.ptr<!s32i>, ["acceptSocket", init] {alignment = 4 : i64} loc(#loc322)
            %10 = cir.alloca !u64i, !cir.ptr<!u64i>, ["dataLen", init] {alignment = 8 : i64} loc(#loc323)
            %11 = cir.const #cir.int<1> : !s32i loc(#loc49)
            %12 = cir.unary(minus, %11) nsw : !s32i, !s32i loc(#loc49)
            cir.store %12, %8 : !s32i, !cir.ptr<!s32i> loc(#loc321)
            %13 = cir.const #cir.int<1> : !s32i loc(#loc51)
            %14 = cir.unary(minus, %13) nsw : !s32i, !s32i loc(#loc51)
            cir.store %14, %9 : !s32i, !cir.ptr<!s32i> loc(#loc322)
            %15 = cir.get_global @strlen : !cir.ptr<!cir.func<(!cir.ptr<!s8i>) -> !u64i>> loc(#loc54)
            %16 = cir.load %0 : !cir.ptr<!cir.ptr<!s8i>>, !cir.ptr<!s8i> loc(#loc55)
            %17 = cir.call @strlen(%16) : (!cir.ptr<!s8i>) -> !u64i side_effect(pure) extra(#fn_attr) loc(#loc54)
            cir.store %17, %10 : !u64i, !cir.ptr<!u64i> loc(#loc323)
            cir.scope {
              cir.do {
                cir.scope {
                  %18 = cir.const #cir.int<2> : !s32i loc(#loc60)
                  %19 = cir.const #cir.int<1> : !u32i loc(#loc61)
                  %20 = cir.cast(integral, %19 : !u32i), !s32i loc(#loc61)
                  %21 = cir.const #cir.int<6> : !u32i loc(#loc62)
                  %22 = cir.cast(integral, %21 : !u32i), !s32i loc(#loc62)
                  %23 = cir.call @socket(%18, %20, %22) : (!s32i, !s32i, !s32i) -> !s32i extra(#fn_attr) loc(#loc63)
                  cir.store %23, %8 : !s32i, !cir.ptr<!s32i> loc(#loc326)
                  cir.scope {
                    %76 = cir.load %8 : !cir.ptr<!s32i>, !s32i loc(#loc68)
                    %77 = cir.const #cir.int<1> : !s32i loc(#loc69)
                    %78 = cir.unary(minus, %77) nsw : !s32i, !s32i loc(#loc69)
                    %79 = cir.cmp(eq, %76, %78) : !s32i, !cir.bool loc(#loc328)
                    cir.if %79 {
                      cir.break loc(#loc71)
                    } loc(#loc329)
                  } loc(#loc327)
                  %24 = cir.cast(bitcast, %6 : !cir.ptr<!ty_sockaddr_in>), !cir.ptr<!void> loc(#loc330)
                  %25 = cir.const #cir.int<0> : !s32i loc(#loc74)
                  %26 = cir.const #cir.int<16> : !u64i loc(#loc331)
                  cir.libc.memset %26 bytes from %24 set to %25 : !cir.ptr<!void>, !s32i, !u64i loc(#loc332)
                  %27 = cir.const #cir.int<2> : !s32i loc(#loc79)
                  %28 = cir.cast(integral, %27 : !s32i), !u16i loc(#loc79)
                  %29 = cir.get_member %6[0] {name = "sin_family"} : !cir.ptr<!ty_sockaddr_in> -> !cir.ptr<!u16i> loc(#loc80)
                  cir.store %28, %29 : !u16i, !cir.ptr<!u16i> loc(#loc333)
                  %30 = cir.const #cir.int<0> : !s32i loc(#loc82)
                  %31 = cir.cast(integral, %30 : !s32i), !u32i loc(#loc82)
                  %32 = cir.get_member %6[2] {name = "sin_addr"} : !cir.ptr<!ty_sockaddr_in> -> !cir.ptr<!ty_in_addr> loc(#loc83)
                  %33 = cir.get_member %32[0] {name = "s_addr"} : !cir.ptr<!ty_in_addr> -> !cir.ptr<!u32i> loc(#loc84)
                  cir.store %31, %33 : !u32i, !cir.ptr<!u32i> loc(#loc334)
                  %34 = cir.const #cir.int<27015> : !s32i loc(#loc86)
                  %35 = cir.cast(integral, %34 : !s32i), !u16i loc(#loc86)
                  %36 = cir.call @htons(%35) : (!u16i) -> !u16i side_effect(const) extra(#fn_attr) loc(#loc87)
                  %37 = cir.get_member %6[1] {name = "sin_port"} : !cir.ptr<!ty_sockaddr_in> -> !cir.ptr<!u16i> loc(#loc88)
                  cir.store %36, %37 : !u16i, !cir.ptr<!u16i> loc(#loc335)
                  cir.scope {
                    %76 = cir.load %8 : !cir.ptr<!s32i>, !s32i loc(#loc93)
                    %77 = cir.cast(bitcast, %6 : !cir.ptr<!ty_sockaddr_in>), !cir.ptr<!ty_sockaddr> loc(#loc337)
                    %78 = cir.const #cir.int<16> : !u64i loc(#loc338)
                    %79 = cir.cast(integral, %78 : !u64i), !u32i loc(#loc338)
                    %80 = cir.call @bind(%76, %77, %79) : (!s32i, !cir.ptr<!ty_sockaddr>, !u32i) -> !s32i extra(#fn_attr) loc(#loc98)
                    %81 = cir.const #cir.int<1> : !s32i loc(#loc99)
                    %82 = cir.unary(minus, %81) nsw : !s32i, !s32i loc(#loc99)
                    %83 = cir.cmp(eq, %80, %82) : !s32i, !cir.bool loc(#loc339)
                    cir.if %83 {
                      cir.break loc(#loc101)
                    } loc(#loc340)
                  } loc(#loc336)
                  cir.scope {
                    %76 = cir.load %8 : !cir.ptr<!s32i>, !s32i loc(#loc104)
                    %77 = cir.const #cir.int<5> : !s32i loc(#loc105)
                    %78 = cir.call @listen(%76, %77) : (!s32i, !s32i) -> !s32i extra(#fn_attr) loc(#loc106)
                    %79 = cir.const #cir.int<1> : !s32i loc(#loc107)
                    %80 = cir.unary(minus, %79) nsw : !s32i, !s32i loc(#loc107)
                    %81 = cir.cmp(eq, %78, %80) : !s32i, !cir.bool loc(#loc342)
                    cir.if %81 {
                      cir.break loc(#loc109)
                    } loc(#loc343)
                  } loc(#loc341)
                  %38 = cir.load %8 : !cir.ptr<!s32i>, !s32i loc(#loc110)
                  %39 = cir.const #cir.ptr<null> : !cir.ptr<!ty_sockaddr> loc(#loc111)
                  %40 = cir.const #cir.ptr<null> : !cir.ptr<!u32i> loc(#loc112)
                  %41 = cir.call @accept(%38, %39, %40) : (!s32i, !cir.ptr<!ty_sockaddr>, !cir.ptr<!u32i>) -> !s32i loc(#loc113)
                  cir.store %41, %9 : !s32i, !cir.ptr<!s32i> loc(#loc344)
                  cir.scope {
                    %76 = cir.load %9 : !cir.ptr<!s32i>, !s32i loc(#loc118)
                    %77 = cir.const #cir.int<1> : !s32i loc(#loc119)
                    %78 = cir.unary(minus, %77) nsw : !s32i, !s32i loc(#loc119)
                    %79 = cir.cmp(eq, %76, %78) : !s32i, !cir.bool loc(#loc346)
                    cir.if %79 {
                      cir.break loc(#loc121)
                    } loc(#loc347)
                  } loc(#loc345)
                  %42 = cir.load %9 : !cir.ptr<!s32i>, !s32i loc(#loc122)
                  %43 = cir.load %0 : !cir.ptr<!cir.ptr<!s8i>>, !cir.ptr<!s8i> loc(#loc123)
                  %44 = cir.load %10 : !cir.ptr<!u64i>, !u64i loc(#loc124)
                  %45 = cir.ptr_stride(%43 : !cir.ptr<!s8i>, %44 : !u64i), !cir.ptr<!s8i> loc(#loc125)
                  %46 = cir.cast(bitcast, %45 : !cir.ptr<!s8i>), !cir.ptr<!void> loc(#loc348)
                  %47 = cir.const #cir.int<1> : !u64i loc(#loc349)
                  %48 = cir.const #cir.int<4096> : !s32i loc(#loc130)
                  %49 = cir.cast(integral, %48 : !s32i), !u64i loc(#loc130)
                  %50 = cir.load %10 : !cir.ptr<!u64i>, !u64i loc(#loc131)
                  %51 = cir.binop(sub, %49, %50) : !u64i loc(#loc350)
                  %52 = cir.const #cir.int<1> : !s32i loc(#loc132)
                  %53 = cir.cast(integral, %52 : !s32i), !u64i loc(#loc132)
                  %54 = cir.binop(sub, %51, %53) : !u64i loc(#loc351)
                  %55 = cir.binop(mul, %47, %54) : !u64i loc(#loc352)
                  %56 = cir.const #cir.int<0> : !s32i loc(#loc134)
                  %57 = cir.call @recv(%42, %46, %55, %56) : (!s32i, !cir.ptr<!void>, !u64i, !s32i) -> !s64i loc(#loc135)
                  %58 = cir.cast(integral, %57 : !s64i), !s32i loc(#loc135)
                  cir.store %58, %5 : !s32i, !cir.ptr<!s32i> loc(#loc353)
                  cir.scope {
                    %76 = cir.load %5 : !cir.ptr<!s32i>, !s32i loc(#loc140)
                    %77 = cir.const #cir.int<1> : !s32i loc(#loc141)
                    %78 = cir.unary(minus, %77) nsw : !s32i, !s32i loc(#loc141)
                    %79 = cir.cmp(eq, %76, %78) : !s32i, !cir.bool loc(#loc355)
                    %80 = cir.ternary(%79, true {
                      %81 = cir.const #true loc(#loc142)
                      cir.yield %81 : !cir.bool loc(#loc142)
                    }, false {
                      %81 = cir.load %5 : !cir.ptr<!s32i>, !s32i loc(#loc143)
                      %82 = cir.const #cir.int<0> : !s32i loc(#loc144)
                      %83 = cir.cmp(eq, %81, %82) : !s32i, !cir.bool loc(#loc356)
                      %84 = cir.ternary(%83, true {
                        %85 = cir.const #true loc(#loc142)
                        cir.yield %85 : !cir.bool loc(#loc142)
                      }, false {
                        %85 = cir.const #false loc(#loc142)
                        cir.yield %85 : !cir.bool loc(#loc142)
                      }) : (!cir.bool) -> !cir.bool loc(#loc142)
                      cir.yield %84 : !cir.bool loc(#loc142)
                    }) : (!cir.bool) -> !cir.bool loc(#loc142)
                    cir.if %80 {
                      cir.break loc(#loc146)
                    } loc(#loc357)
                  } loc(#loc354)
                  %59 = cir.const #cir.int<0> : !s8i loc(#loc147)
                  %60 = cir.load %0 : !cir.ptr<!cir.ptr<!s8i>>, !cir.ptr<!s8i> loc(#loc148)
                  %61 = cir.load %10 : !cir.ptr<!u64i>, !u64i loc(#loc149)
                  %62 = cir.load %5 : !cir.ptr<!s32i>, !s32i loc(#loc150)
                  %63 = cir.cast(integral, %62 : !s32i), !u64i loc(#loc150)
                  %64 = cir.const #cir.int<1> : !u64i loc(#loc358)
                  %65 = cir.binop(div, %63, %64) : !u64i loc(#loc359)
                  %66 = cir.binop(add, %61, %65) : !u64i loc(#loc360)
                  %67 = cir.ptr_stride(%60 : !cir.ptr<!s8i>, %66 : !u64i), !cir.ptr<!s8i> loc(#loc153)
                  cir.store %59, %67 : !s8i, !cir.ptr<!s8i> loc(#loc361)
                  %68 = cir.load %0 : !cir.ptr<!cir.ptr<!s8i>>, !cir.ptr<!s8i> loc(#loc154)
                  %69 = cir.const #cir.int<13> : !s8i loc(#loc155)
                  %70 = cir.cast(integral, %69 : !s8i), !s32i loc(#loc155)
                  %71 = cir.call @strchr(%68, %70) : (!cir.ptr<!s8i>, !s32i) -> !cir.ptr<!s8i> side_effect(pure) extra(#fn_attr) loc(#loc156)
                  cir.store %71, %7 : !cir.ptr<!s8i>, !cir.ptr<!cir.ptr<!s8i>> loc(#loc362)
                  cir.scope {
                    %76 = cir.load %7 : !cir.ptr<!cir.ptr<!s8i>>, !cir.ptr<!s8i> loc(#loc161)
                    %77 = cir.cast(ptr_to_bool, %76 : !cir.ptr<!s8i>), !cir.bool loc(#loc161)
                    cir.if %77 {
                      %78 = cir.const #cir.int<0> : !s8i loc(#loc163)
                      %79 = cir.load deref %7 : !cir.ptr<!cir.ptr<!s8i>>, !cir.ptr<!s8i> loc(#loc164)
                      cir.store %78, %79 : !s8i, !cir.ptr<!s8i> loc(#loc365)
                    } loc(#loc364)
                  } loc(#loc363)
                  %72 = cir.load %0 : !cir.ptr<!cir.ptr<!s8i>>, !cir.ptr<!s8i> loc(#loc166)
                  %73 = cir.const #cir.int<10> : !s8i loc(#loc167)
                  %74 = cir.cast(integral, %73 : !s8i), !s32i loc(#loc167)
                  %75 = cir.call @strchr(%72, %74) : (!cir.ptr<!s8i>, !s32i) -> !cir.ptr<!s8i> side_effect(pure) extra(#fn_attr) loc(#loc168)
                  cir.store %75, %7 : !cir.ptr<!s8i>, !cir.ptr<!cir.ptr<!s8i>> loc(#loc366)
                  cir.scope {
                    %76 = cir.load %7 : !cir.ptr<!cir.ptr<!s8i>>, !cir.ptr<!s8i> loc(#loc173)
                    %77 = cir.cast(ptr_to_bool, %76 : !cir.ptr<!s8i>), !cir.bool loc(#loc173)
                    cir.if %77 {
                      %78 = cir.const #cir.int<0> : !s8i loc(#loc175)
                      %79 = cir.load deref %7 : !cir.ptr<!cir.ptr<!s8i>>, !cir.ptr<!s8i> loc(#loc176)
                      cir.store %78, %79 : !s8i, !cir.ptr<!s8i> loc(#loc369)
                    } loc(#loc368)
                  } loc(#loc367)
                } loc(#loc325)
                cir.yield loc(#loc57)
              } while {
                %18 = cir.const #cir.int<0> : !s32i loc(#loc178)
                %19 = cir.cast(int_to_bool, %18 : !s32i), !cir.bool loc(#loc178)
                cir.condition(%19) loc(#loc178)
              } loc(#loc324)
            } loc(#loc324)
            cir.scope {
              %18 = cir.load %8 : !cir.ptr<!s32i>, !s32i loc(#loc181)
              %19 = cir.const #cir.int<1> : !s32i loc(#loc182)
              %20 = cir.unary(minus, %19) nsw : !s32i, !s32i loc(#loc182)
              %21 = cir.cmp(ne, %18, %20) : !s32i, !cir.bool loc(#loc371)
              cir.if %21 {
                %22 = cir.load %8 : !cir.ptr<!s32i>, !s32i loc(#loc184)
                %23 = cir.call @close(%22) : (!s32i) -> !s32i loc(#loc185)
              } loc(#loc372)
            } loc(#loc370)
            cir.scope {
              %18 = cir.load %9 : !cir.ptr<!s32i>, !s32i loc(#loc188)
              %19 = cir.const #cir.int<1> : !s32i loc(#loc189)
              %20 = cir.unary(minus, %19) nsw : !s32i, !s32i loc(#loc189)
              %21 = cir.cmp(ne, %18, %20) : !s32i, !cir.bool loc(#loc374)
              cir.if %21 {
                %22 = cir.load %9 : !cir.ptr<!s32i>, !s32i loc(#loc191)
                %23 = cir.call @close(%22) : (!s32i) -> !s32i loc(#loc192)
              } loc(#loc375)
            } loc(#loc373)
          } loc(#loc317)
          cir.break loc(#loc193)
        } loc(#loc39)
        cir.case(default, []) {
          %5 = cir.get_global @".str" : !cir.ptr<!cir.array<!s8i x 21>> loc(#loc27)
          %6 = cir.cast(array_to_ptrdecay, %5 : !cir.ptr<!cir.array<!s8i x 21>>), !cir.ptr<!s8i> loc(#loc27)
          cir.call @printLine(%6) : (!cir.ptr<!s8i>) -> () loc(#loc195)
          cir.break loc(#loc196)
        } loc(#loc194)
        cir.yield loc(#loc36)
      } loc(#loc36)
    } loc(#loc316)
    cir.scope {
      %4 = cir.alloca !s32i, !cir.ptr<!s32i>, ["fileDesc"] {alignment = 4 : i64} loc(#loc377)
      %5 = cir.load %0 : !cir.ptr<!cir.ptr<!s8i>>, !cir.ptr<!s8i> loc(#loc201)
      %6 = cir.const #cir.int<2> : !s32i loc(#loc202)
      %7 = cir.const #cir.int<64> : !s32i loc(#loc203)
      %8 = cir.binop(or, %6, %7) : !s32i loc(#loc378)
      %9 = cir.const #cir.int<256> : !s32i loc(#loc204)
      %10 = cir.const #cir.int<128> : !s32i loc(#loc205)
      %11 = cir.binop(or, %9, %10) : !s32i loc(#loc379)
      %12 = cir.call @open(%5, %8, %11) : (!cir.ptr<!s8i>, !s32i, !s32i) -> !s32i loc(#loc206)
      cir.store %12, %4 : !s32i, !cir.ptr<!s32i> loc(#loc380)
      cir.scope {
        %13 = cir.load %4 : !cir.ptr<!s32i>, !s32i loc(#loc211)
        %14 = cir.const #cir.int<1> : !s32i loc(#loc212)
        %15 = cir.unary(minus, %14) nsw : !s32i, !s32i loc(#loc213)
        %16 = cir.cmp(ne, %13, %15) : !s32i, !cir.bool loc(#loc382)
        cir.if %16 {
          %17 = cir.load %4 : !cir.ptr<!s32i>, !s32i loc(#loc215)
          %18 = cir.call @close(%17) : (!s32i) -> !s32i loc(#loc216)
        } loc(#loc383)
      } loc(#loc381)
    } loc(#loc376)
    cir.return loc(#loc31)
  } loc(#loc313)
  cir.func private @strcat(!cir.ptr<!s8i>, !cir.ptr<!s8i>) -> !cir.ptr<!s8i> extra(#fn_attr) loc(#loc384)
  cir.global "private" constant cir_private dsolocal @".str.1" = #cir.const_array<"file.txt\00" : !cir.array<!s8i x 9>> : !cir.array<!s8i x 9> {alignment = 1 : i64} loc(#loc219)
  cir.func internal private @_ZN57CWE23_Relative_Path_Traversal__char_listen_socket_open_15L8goodG2B1Ev() extra(#fn_attr1) {
    %0 = cir.alloca !cir.ptr<!s8i>, !cir.ptr<!cir.ptr<!s8i>>, ["data"] {alignment = 8 : i64} loc(#loc386)
    %1 = cir.alloca !cir.array<!s8i x 4096>, !cir.ptr<!cir.array<!s8i x 4096>>, ["dataBuffer"] {alignment = 16 : i64} loc(#loc300)
    %2 = cir.get_global @__const._ZN57CWE23_Relative_Path_Traversal__char_listen_socket_open_15L8goodG2B1Ev.dataBuffer : !cir.ptr<!cir.array<!s8i x 4096>> loc(#loc300)
    cir.copy %2 to %1 : !cir.ptr<!cir.array<!s8i x 4096>> loc(#loc300)
    %3 = cir.cast(array_to_ptrdecay, %1 : !cir.ptr<!cir.array<!s8i x 4096>>), !cir.ptr<!s8i> loc(#loc224)
    cir.store %3, %0 : !cir.ptr<!s8i>, !cir.ptr<!cir.ptr<!s8i>> loc(#loc387)
    cir.scope {
      %4 = cir.const #cir.int<5> : !s32i loc(#loc228)
      cir.switch (%4 : !s32i) {
        cir.case(equal, [#cir.int<6> : !s32i]) {
          %5 = cir.get_global @".str" : !cir.ptr<!cir.array<!s8i x 21>> loc(#loc230)
          %6 = cir.cast(array_to_ptrdecay, %5 : !cir.ptr<!cir.array<!s8i x 21>>), !cir.ptr<!s8i> loc(#loc230)
          cir.call @printLine(%6) : (!cir.ptr<!s8i>) -> () loc(#loc231)
          cir.break loc(#loc232)
        } loc(#loc229)
        cir.case(default, []) {
          %5 = cir.get_global @strcat : !cir.ptr<!cir.func<(!cir.ptr<!s8i>, !cir.ptr<!s8i>) -> !cir.ptr<!s8i>>> loc(#loc234)
          %6 = cir.load %0 : !cir.ptr<!cir.ptr<!s8i>>, !cir.ptr<!s8i> loc(#loc235)
          %7 = cir.get_global @".str.1" : !cir.ptr<!cir.array<!s8i x 9>> loc(#loc219)
          %8 = cir.cast(array_to_ptrdecay, %7 : !cir.ptr<!cir.array<!s8i x 9>>), !cir.ptr<!s8i> loc(#loc219)
          %9 = cir.call @strcat(%6, %8) : (!cir.ptr<!s8i>, !cir.ptr<!s8i>) -> !cir.ptr<!s8i> extra(#fn_attr) loc(#loc234)
          cir.break loc(#loc236)
        } loc(#loc233)
        cir.yield loc(#loc226)
      } loc(#loc226)
    } loc(#loc388)
    cir.scope {
      %4 = cir.alloca !s32i, !cir.ptr<!s32i>, ["fileDesc"] {alignment = 4 : i64} loc(#loc390)
      %5 = cir.load %0 : !cir.ptr<!cir.ptr<!s8i>>, !cir.ptr<!s8i> loc(#loc241)
      %6 = cir.const #cir.int<2> : !s32i loc(#loc242)
      %7 = cir.const #cir.int<64> : !s32i loc(#loc243)
      %8 = cir.binop(or, %6, %7) : !s32i loc(#loc391)
      %9 = cir.const #cir.int<256> : !s32i loc(#loc244)
      %10 = cir.const #cir.int<128> : !s32i loc(#loc245)
      %11 = cir.binop(or, %9, %10) : !s32i loc(#loc392)
      %12 = cir.call @open(%5, %8, %11) : (!cir.ptr<!s8i>, !s32i, !s32i) -> !s32i loc(#loc246)
      cir.store %12, %4 : !s32i, !cir.ptr<!s32i> loc(#loc393)
      cir.scope {
        %13 = cir.load %4 : !cir.ptr<!s32i>, !s32i loc(#loc251)
        %14 = cir.const #cir.int<1> : !s32i loc(#loc252)
        %15 = cir.unary(minus, %14) nsw : !s32i, !s32i loc(#loc253)
        %16 = cir.cmp(ne, %13, %15) : !s32i, !cir.bool loc(#loc395)
        cir.if %16 {
          %17 = cir.load %4 : !cir.ptr<!s32i>, !s32i loc(#loc255)
          %18 = cir.call @close(%17) : (!s32i) -> !s32i loc(#loc256)
        } loc(#loc396)
      } loc(#loc394)
    } loc(#loc389)
    cir.return loc(#loc221)
  } loc(#loc385)
  cir.func internal private @_ZN57CWE23_Relative_Path_Traversal__char_listen_socket_open_15L8goodG2B2Ev() extra(#fn_attr1) {
    %0 = cir.alloca !cir.ptr<!s8i>, !cir.ptr<!cir.ptr<!s8i>>, ["data"] {alignment = 8 : i64} loc(#loc398)
    %1 = cir.alloca !cir.array<!s8i x 4096>, !cir.ptr<!cir.array<!s8i x 4096>>, ["dataBuffer"] {alignment = 16 : i64} loc(#loc299)
    %2 = cir.get_global @__const._ZN57CWE23_Relative_Path_Traversal__char_listen_socket_open_15L8goodG2B2Ev.dataBuffer : !cir.ptr<!cir.array<!s8i x 4096>> loc(#loc299)
    cir.copy %2 to %1 : !cir.ptr<!cir.array<!s8i x 4096>> loc(#loc299)
    %3 = cir.cast(array_to_ptrdecay, %1 : !cir.ptr<!cir.array<!s8i x 4096>>), !cir.ptr<!s8i> loc(#loc261)
    cir.store %3, %0 : !cir.ptr<!s8i>, !cir.ptr<!cir.ptr<!s8i>> loc(#loc399)
    cir.scope {
      %4 = cir.const #cir.int<6> : !s32i loc(#loc265)
      cir.switch (%4 : !s32i) {
        cir.case(equal, [#cir.int<6> : !s32i]) {
          %5 = cir.get_global @strcat : !cir.ptr<!cir.func<(!cir.ptr<!s8i>, !cir.ptr<!s8i>) -> !cir.ptr<!s8i>>> loc(#loc267)
          %6 = cir.load %0 : !cir.ptr<!cir.ptr<!s8i>>, !cir.ptr<!s8i> loc(#loc268)
          %7 = cir.get_global @".str.1" : !cir.ptr<!cir.array<!s8i x 9>> loc(#loc269)
          %8 = cir.cast(array_to_ptrdecay, %7 : !cir.ptr<!cir.array<!s8i x 9>>), !cir.ptr<!s8i> loc(#loc269)
          %9 = cir.call @strcat(%6, %8) : (!cir.ptr<!s8i>, !cir.ptr<!s8i>) -> !cir.ptr<!s8i> extra(#fn_attr) loc(#loc267)
          cir.break loc(#loc270)
        } loc(#loc266)
        cir.case(default, []) {
          %5 = cir.get_global @".str" : !cir.ptr<!cir.array<!s8i x 21>> loc(#loc272)
          %6 = cir.cast(array_to_ptrdecay, %5 : !cir.ptr<!cir.array<!s8i x 21>>), !cir.ptr<!s8i> loc(#loc272)
          cir.call @printLine(%6) : (!cir.ptr<!s8i>) -> () loc(#loc273)
          cir.break loc(#loc274)
        } loc(#loc271)
        cir.yield loc(#loc263)
      } loc(#loc263)
    } loc(#loc400)
    cir.scope {
      %4 = cir.alloca !s32i, !cir.ptr<!s32i>, ["fileDesc"] {alignment = 4 : i64} loc(#loc402)
      %5 = cir.load %0 : !cir.ptr<!cir.ptr<!s8i>>, !cir.ptr<!s8i> loc(#loc279)
      %6 = cir.const #cir.int<2> : !s32i loc(#loc280)
      %7 = cir.const #cir.int<64> : !s32i loc(#loc281)
      %8 = cir.binop(or, %6, %7) : !s32i loc(#loc403)
      %9 = cir.const #cir.int<256> : !s32i loc(#loc282)
      %10 = cir.const #cir.int<128> : !s32i loc(#loc283)
      %11 = cir.binop(or, %9, %10) : !s32i loc(#loc404)
      %12 = cir.call @open(%5, %8, %11) : (!cir.ptr<!s8i>, !s32i, !s32i) -> !s32i loc(#loc284)
      cir.store %12, %4 : !s32i, !cir.ptr<!s32i> loc(#loc405)
      cir.scope {
        %13 = cir.load %4 : !cir.ptr<!s32i>, !s32i loc(#loc289)
        %14 = cir.const #cir.int<1> : !s32i loc(#loc290)
        %15 = cir.unary(minus, %14) nsw : !s32i, !s32i loc(#loc291)
        %16 = cir.cmp(ne, %13, %15) : !s32i, !cir.bool loc(#loc407)
        cir.if %16 {
          %17 = cir.load %4 : !cir.ptr<!s32i>, !s32i loc(#loc293)
          %18 = cir.call @close(%17) : (!s32i) -> !s32i loc(#loc294)
        } loc(#loc408)
      } loc(#loc406)
    } loc(#loc401)
    cir.return loc(#loc258)
  } loc(#loc397)
  cir.func @_ZN57CWE23_Relative_Path_Traversal__char_listen_socket_open_154goodEv() extra(#fn_attr1) {
    cir.call @_ZN57CWE23_Relative_Path_Traversal__char_listen_socket_open_15L8goodG2B1Ev() : () -> () loc(#loc297)
    cir.call @_ZN57CWE23_Relative_Path_Traversal__char_listen_socket_open_15L8goodG2B2Ev() : () -> () loc(#loc298)
    cir.return loc(#loc296)
  } loc(#loc409)
} loc(#loc)
#loc = loc("/workspaces/juliet-c/testcases/CWE23_Relative_Path_Traversal/s02/CWE23_Relative_Path_Traversal__char_listen_socket_open_15.cpp":0:0)
#loc1 = loc("CWE23_Relative_Path_Traversal__char_listen_socket_open_15.cpp":200:5)
#loc2 = loc("CWE23_Relative_Path_Traversal__char_listen_socket_open_15.cpp":200:37)
#loc3 = loc("CWE23_Relative_Path_Traversal__char_listen_socket_open_15.cpp":172:5)
#loc4 = loc("CWE23_Relative_Path_Traversal__char_listen_socket_open_15.cpp":172:37)
#loc5 = loc("CWE23_Relative_Path_Traversal__char_listen_socket_open_15.cpp":63:5)
#loc6 = loc("CWE23_Relative_Path_Traversal__char_listen_socket_open_15.cpp":63:37)
#loc7 = loc("/usr/include/string.h":407:1)
#loc8 = loc("/usr/include/string.h":408:33)
#loc9 = loc("/usr/include/x86_64-linux-gnu/sys/socket.h":102:1)
#loc10 = loc("/usr/include/x86_64-linux-gnu/sys/socket.h":102:62)
#loc11 = loc("/usr/include/netinet/in.h":402:1)
#loc12 = loc("/usr/include/netinet/in.h":403:40)
#loc13 = loc("/usr/include/x86_64-linux-gnu/sys/socket.h":112:1)
#loc14 = loc("/usr/include/x86_64-linux-gnu/sys/socket.h":113:6)
#loc15 = loc("/usr/include/x86_64-linux-gnu/sys/socket.h":296:1)
#loc16 = loc("/usr/include/x86_64-linux-gnu/sys/socket.h":296:39)
#loc17 = loc("/usr/include/x86_64-linux-gnu/sys/socket.h":306:1)
#loc18 = loc("/usr/include/x86_64-linux-gnu/sys/socket.h":307:38)
#loc19 = loc("/usr/include/x86_64-linux-gnu/sys/socket.h":145:1)
#loc20 = loc("/usr/include/x86_64-linux-gnu/sys/socket.h":145:68)
#loc21 = loc("/usr/include/string.h":226:1)
#loc22 = loc("/usr/include/string.h":227:50)
#loc23 = loc("/usr/include/unistd.h":358:1)
#loc24 = loc("/usr/include/unistd.h":358:27)
#loc25 = loc("../../../testcasesupport/std_testcase_io.h":14:1)
#loc26 = loc("../../../testcasesupport/std_testcase_io.h":14:33)
#loc27 = loc("CWE23_Relative_Path_Traversal__char_listen_socket_open_15.cpp":150:19)
#loc28 = loc("/usr/include/fcntl.h":209:1)
#loc29 = loc("/usr/include/fcntl.h":209:56)
#loc30 = loc("CWE23_Relative_Path_Traversal__char_listen_socket_open_15.cpp":60:1)
#loc31 = loc("CWE23_Relative_Path_Traversal__char_listen_socket_open_15.cpp":162:1)
#loc32 = loc("CWE23_Relative_Path_Traversal__char_listen_socket_open_15.cpp":62:5)
#loc33 = loc("CWE23_Relative_Path_Traversal__char_listen_socket_open_15.cpp":62:12)
#loc34 = loc("CWE23_Relative_Path_Traversal__char_listen_socket_open_15.cpp":64:12)
#loc35 = loc("CWE23_Relative_Path_Traversal__char_listen_socket_open_15.cpp":64:5)
#loc36 = loc("CWE23_Relative_Path_Traversal__char_listen_socket_open_15.cpp":65:5)
#loc37 = loc("CWE23_Relative_Path_Traversal__char_listen_socket_open_15.cpp":152:5)
#loc38 = loc("CWE23_Relative_Path_Traversal__char_listen_socket_open_15.cpp":65:12)
#loc39 = loc("CWE23_Relative_Path_Traversal__char_listen_socket_open_15.cpp":67:5)
#loc40 = loc("CWE23_Relative_Path_Traversal__char_listen_socket_open_15.cpp":68:5)
#loc41 = loc("CWE23_Relative_Path_Traversal__char_listen_socket_open_15.cpp":146:5)
#loc42 = loc("CWE23_Relative_Path_Traversal__char_listen_socket_open_15.cpp":73:9)
#loc43 = loc("CWE23_Relative_Path_Traversal__char_listen_socket_open_15.cpp":73:13)
#loc44 = loc("CWE23_Relative_Path_Traversal__char_listen_socket_open_15.cpp":74:9)
#loc45 = loc("CWE23_Relative_Path_Traversal__char_listen_socket_open_15.cpp":74:28)
#loc46 = loc("CWE23_Relative_Path_Traversal__char_listen_socket_open_15.cpp":75:9)
#loc47 = loc("CWE23_Relative_Path_Traversal__char_listen_socket_open_15.cpp":75:15)
#loc48 = loc("CWE23_Relative_Path_Traversal__char_listen_socket_open_15.cpp":76:9)
#loc49 = loc("CWE23_Relative_Path_Traversal__char_listen_socket_open_15.cpp":76:31)
#loc50 = loc("CWE23_Relative_Path_Traversal__char_listen_socket_open_15.cpp":77:9)
#loc51 = loc("CWE23_Relative_Path_Traversal__char_listen_socket_open_15.cpp":77:31)
#loc52 = loc("CWE23_Relative_Path_Traversal__char_listen_socket_open_15.cpp":78:9)
#loc53 = loc("CWE23_Relative_Path_Traversal__char_listen_socket_open_15.cpp":78:37)
#loc54 = loc("CWE23_Relative_Path_Traversal__char_listen_socket_open_15.cpp":78:26)
#loc55 = loc("CWE23_Relative_Path_Traversal__char_listen_socket_open_15.cpp":78:33)
#loc56 = loc("CWE23_Relative_Path_Traversal__char_listen_socket_open_15.cpp":79:9)
#loc57 = loc("CWE23_Relative_Path_Traversal__char_listen_socket_open_15.cpp":131:17)
#loc58 = loc("CWE23_Relative_Path_Traversal__char_listen_socket_open_15.cpp":80:9)
#loc59 = loc("CWE23_Relative_Path_Traversal__char_listen_socket_open_15.cpp":130:9)
#loc60 = loc("CWE23_Relative_Path_Traversal__char_listen_socket_open_15.cpp":89:35)
#loc61 = loc("CWE23_Relative_Path_Traversal__char_listen_socket_open_15.cpp":89:44)
#loc62 = loc("CWE23_Relative_Path_Traversal__char_listen_socket_open_15.cpp":89:57)
#loc63 = loc("CWE23_Relative_Path_Traversal__char_listen_socket_open_15.cpp":89:28)
#loc64 = loc("CWE23_Relative_Path_Traversal__char_listen_socket_open_15.cpp":89:13)
#loc65 = loc("CWE23_Relative_Path_Traversal__char_listen_socket_open_15.cpp":89:68)
#loc66 = loc("CWE23_Relative_Path_Traversal__char_listen_socket_open_15.cpp":90:13)
#loc67 = loc("CWE23_Relative_Path_Traversal__char_listen_socket_open_15.cpp":93:13)
#loc68 = loc("CWE23_Relative_Path_Traversal__char_listen_socket_open_15.cpp":90:17)
#loc69 = loc("CWE23_Relative_Path_Traversal__char_listen_socket_open_15.cpp":90:33)
#loc70 = loc("CWE23_Relative_Path_Traversal__char_listen_socket_open_15.cpp":91:13)
#loc71 = loc("CWE23_Relative_Path_Traversal__char_listen_socket_open_15.cpp":92:17)
#loc72 = loc("CWE23_Relative_Path_Traversal__char_listen_socket_open_15.cpp":94:20)
#loc73 = loc("CWE23_Relative_Path_Traversal__char_listen_socket_open_15.cpp":94:21)
#loc74 = loc("CWE23_Relative_Path_Traversal__char_listen_socket_open_15.cpp":94:30)
#loc75 = loc("CWE23_Relative_Path_Traversal__char_listen_socket_open_15.cpp":94:33)
#loc76 = loc("CWE23_Relative_Path_Traversal__char_listen_socket_open_15.cpp":94:47)
#loc77 = loc("CWE23_Relative_Path_Traversal__char_listen_socket_open_15.cpp":94:13)
#loc78 = loc("CWE23_Relative_Path_Traversal__char_listen_socket_open_15.cpp":94:48)
#loc79 = loc("CWE23_Relative_Path_Traversal__char_listen_socket_open_15.cpp":95:34)
#loc80 = loc("/usr/include/netinet/in.h":249:5)
#loc81 = loc("CWE23_Relative_Path_Traversal__char_listen_socket_open_15.cpp":95:13)
#loc82 = loc("CWE23_Relative_Path_Traversal__char_listen_socket_open_15.cpp":96:39)
#loc83 = loc("/usr/include/netinet/in.h":251:20)
#loc84 = loc("/usr/include/netinet/in.h":33:15)
#loc85 = loc("CWE23_Relative_Path_Traversal__char_listen_socket_open_15.cpp":96:13)
#loc86 = loc("CWE23_Relative_Path_Traversal__char_listen_socket_open_15.cpp":97:38)
#loc87 = loc("CWE23_Relative_Path_Traversal__char_listen_socket_open_15.cpp":97:32)
#loc88 = loc("/usr/include/netinet/in.h":250:15)
#loc89 = loc("CWE23_Relative_Path_Traversal__char_listen_socket_open_15.cpp":97:13)
#loc90 = loc("CWE23_Relative_Path_Traversal__char_listen_socket_open_15.cpp":97:46)
#loc91 = loc("CWE23_Relative_Path_Traversal__char_listen_socket_open_15.cpp":98:13)
#loc92 = loc("CWE23_Relative_Path_Traversal__char_listen_socket_open_15.cpp":101:13)
#loc93 = loc("CWE23_Relative_Path_Traversal__char_listen_socket_open_15.cpp":98:22)
#loc94 = loc("CWE23_Relative_Path_Traversal__char_listen_socket_open_15.cpp":98:54)
#loc95 = loc("CWE23_Relative_Path_Traversal__char_listen_socket_open_15.cpp":98:55)
#loc96 = loc("CWE23_Relative_Path_Traversal__char_listen_socket_open_15.cpp":98:64)
#loc97 = loc("CWE23_Relative_Path_Traversal__char_listen_socket_open_15.cpp":98:78)
#loc98 = loc("CWE23_Relative_Path_Traversal__char_listen_socket_open_15.cpp":98:17)
#loc99 = loc("CWE23_Relative_Path_Traversal__char_listen_socket_open_15.cpp":98:84)
#loc100 = loc("CWE23_Relative_Path_Traversal__char_listen_socket_open_15.cpp":99:13)
#loc101 = loc("CWE23_Relative_Path_Traversal__char_listen_socket_open_15.cpp":100:17)
#loc102 = loc("CWE23_Relative_Path_Traversal__char_listen_socket_open_15.cpp":102:13)
#loc103 = loc("CWE23_Relative_Path_Traversal__char_listen_socket_open_15.cpp":105:13)
#loc104 = loc("CWE23_Relative_Path_Traversal__char_listen_socket_open_15.cpp":102:24)
#loc105 = loc("CWE23_Relative_Path_Traversal__char_listen_socket_open_15.cpp":102:38)
#loc106 = loc("CWE23_Relative_Path_Traversal__char_listen_socket_open_15.cpp":102:17)
#loc107 = loc("CWE23_Relative_Path_Traversal__char_listen_socket_open_15.cpp":102:57)
#loc108 = loc("CWE23_Relative_Path_Traversal__char_listen_socket_open_15.cpp":103:13)
#loc109 = loc("CWE23_Relative_Path_Traversal__char_listen_socket_open_15.cpp":104:17)
#loc110 = loc("CWE23_Relative_Path_Traversal__char_listen_socket_open_15.cpp":106:35)
#loc111 = loc("CWE23_Relative_Path_Traversal__char_listen_socket_open_15.cpp":106:49)
#loc112 = loc("CWE23_Relative_Path_Traversal__char_listen_socket_open_15.cpp":106:55)
#loc113 = loc("CWE23_Relative_Path_Traversal__char_listen_socket_open_15.cpp":106:28)
#loc114 = loc("CWE23_Relative_Path_Traversal__char_listen_socket_open_15.cpp":106:13)
#loc115 = loc("CWE23_Relative_Path_Traversal__char_listen_socket_open_15.cpp":106:59)
#loc116 = loc("CWE23_Relative_Path_Traversal__char_listen_socket_open_15.cpp":107:13)
#loc117 = loc("CWE23_Relative_Path_Traversal__char_listen_socket_open_15.cpp":110:13)
#loc118 = loc("CWE23_Relative_Path_Traversal__char_listen_socket_open_15.cpp":107:17)
#loc119 = loc("CWE23_Relative_Path_Traversal__char_listen_socket_open_15.cpp":107:33)
#loc120 = loc("CWE23_Relative_Path_Traversal__char_listen_socket_open_15.cpp":108:13)
#loc121 = loc("CWE23_Relative_Path_Traversal__char_listen_socket_open_15.cpp":109:17)
#loc122 = loc("CWE23_Relative_Path_Traversal__char_listen_socket_open_15.cpp":112:31)
#loc123 = loc("CWE23_Relative_Path_Traversal__char_listen_socket_open_15.cpp":112:54)
#loc124 = loc("CWE23_Relative_Path_Traversal__char_listen_socket_open_15.cpp":112:61)
#loc125 = loc("CWE23_Relative_Path_Traversal__char_listen_socket_open_15.cpp":112:59)
#loc126 = loc("CWE23_Relative_Path_Traversal__char_listen_socket_open_15.cpp":112:45)
#loc127 = loc("CWE23_Relative_Path_Traversal__char_listen_socket_open_15.cpp":112:68)
#loc128 = loc("CWE23_Relative_Path_Traversal__char_listen_socket_open_15.cpp":112:71)
#loc129 = loc("CWE23_Relative_Path_Traversal__char_listen_socket_open_15.cpp":112:82)
#loc130 = loc("CWE23_Relative_Path_Traversal__char_listen_socket_open_15.cpp":112:87)
#loc131 = loc("CWE23_Relative_Path_Traversal__char_listen_socket_open_15.cpp":112:102)
#loc132 = loc("CWE23_Relative_Path_Traversal__char_listen_socket_open_15.cpp":112:112)
#loc133 = loc("CWE23_Relative_Path_Traversal__char_listen_socket_open_15.cpp":112:113)
#loc134 = loc("CWE23_Relative_Path_Traversal__char_listen_socket_open_15.cpp":112:116)
#loc135 = loc("CWE23_Relative_Path_Traversal__char_listen_socket_open_15.cpp":112:26)
#loc136 = loc("CWE23_Relative_Path_Traversal__char_listen_socket_open_15.cpp":112:13)
#loc137 = loc("CWE23_Relative_Path_Traversal__char_listen_socket_open_15.cpp":112:117)
#loc138 = loc("CWE23_Relative_Path_Traversal__char_listen_socket_open_15.cpp":113:13)
#loc139 = loc("CWE23_Relative_Path_Traversal__char_listen_socket_open_15.cpp":116:13)
#loc140 = loc("CWE23_Relative_Path_Traversal__char_listen_socket_open_15.cpp":113:17)
#loc141 = loc("CWE23_Relative_Path_Traversal__char_listen_socket_open_15.cpp":113:31)
#loc142 = loc("CWE23_Relative_Path_Traversal__char_listen_socket_open_15.cpp":113:44)
#loc143 = loc("CWE23_Relative_Path_Traversal__char_listen_socket_open_15.cpp":113:47)
#loc144 = loc("CWE23_Relative_Path_Traversal__char_listen_socket_open_15.cpp":113:61)
#loc145 = loc("CWE23_Relative_Path_Traversal__char_listen_socket_open_15.cpp":114:13)
#loc146 = loc("CWE23_Relative_Path_Traversal__char_listen_socket_open_15.cpp":115:17)
#loc147 = loc("CWE23_Relative_Path_Traversal__char_listen_socket_open_15.cpp":118:57)
#loc148 = loc("CWE23_Relative_Path_Traversal__char_listen_socket_open_15.cpp":118:13)
#loc149 = loc("CWE23_Relative_Path_Traversal__char_listen_socket_open_15.cpp":118:18)
#loc150 = loc("CWE23_Relative_Path_Traversal__char_listen_socket_open_15.cpp":118:28)
#loc151 = loc("CWE23_Relative_Path_Traversal__char_listen_socket_open_15.cpp":118:41)
#loc152 = loc("CWE23_Relative_Path_Traversal__char_listen_socket_open_15.cpp":118:52)
#loc153 = loc("CWE23_Relative_Path_Traversal__char_listen_socket_open_15.cpp":118:53)
#loc154 = loc("CWE23_Relative_Path_Traversal__char_listen_socket_open_15.cpp":120:30)
#loc155 = loc("CWE23_Relative_Path_Traversal__char_listen_socket_open_15.cpp":120:36)
#loc156 = loc("CWE23_Relative_Path_Traversal__char_listen_socket_open_15.cpp":120:23)
#loc157 = loc("CWE23_Relative_Path_Traversal__char_listen_socket_open_15.cpp":120:13)
#loc158 = loc("CWE23_Relative_Path_Traversal__char_listen_socket_open_15.cpp":120:40)
#loc159 = loc("CWE23_Relative_Path_Traversal__char_listen_socket_open_15.cpp":121:13)
#loc160 = loc("CWE23_Relative_Path_Traversal__char_listen_socket_open_15.cpp":124:13)
#loc161 = loc("CWE23_Relative_Path_Traversal__char_listen_socket_open_15.cpp":121:17)
#loc162 = loc("CWE23_Relative_Path_Traversal__char_listen_socket_open_15.cpp":122:13)
#loc163 = loc("CWE23_Relative_Path_Traversal__char_listen_socket_open_15.cpp":123:28)
#loc164 = loc("CWE23_Relative_Path_Traversal__char_listen_socket_open_15.cpp":123:18)
#loc165 = loc("CWE23_Relative_Path_Traversal__char_listen_socket_open_15.cpp":123:17)
#loc166 = loc("CWE23_Relative_Path_Traversal__char_listen_socket_open_15.cpp":125:30)
#loc167 = loc("CWE23_Relative_Path_Traversal__char_listen_socket_open_15.cpp":125:36)
#loc168 = loc("CWE23_Relative_Path_Traversal__char_listen_socket_open_15.cpp":125:23)
#loc169 = loc("CWE23_Relative_Path_Traversal__char_listen_socket_open_15.cpp":125:13)
#loc170 = loc("CWE23_Relative_Path_Traversal__char_listen_socket_open_15.cpp":125:40)
#loc171 = loc("CWE23_Relative_Path_Traversal__char_listen_socket_open_15.cpp":126:13)
#loc172 = loc("CWE23_Relative_Path_Traversal__char_listen_socket_open_15.cpp":129:13)
#loc173 = loc("CWE23_Relative_Path_Traversal__char_listen_socket_open_15.cpp":126:17)
#loc174 = loc("CWE23_Relative_Path_Traversal__char_listen_socket_open_15.cpp":127:13)
#loc175 = loc("CWE23_Relative_Path_Traversal__char_listen_socket_open_15.cpp":128:28)
#loc176 = loc("CWE23_Relative_Path_Traversal__char_listen_socket_open_15.cpp":128:18)
#loc177 = loc("CWE23_Relative_Path_Traversal__char_listen_socket_open_15.cpp":128:17)
#loc178 = loc("CWE23_Relative_Path_Traversal__char_listen_socket_open_15.cpp":131:16)
#loc179 = loc("CWE23_Relative_Path_Traversal__char_listen_socket_open_15.cpp":132:9)
#loc180 = loc("CWE23_Relative_Path_Traversal__char_listen_socket_open_15.cpp":135:9)
#loc181 = loc("CWE23_Relative_Path_Traversal__char_listen_socket_open_15.cpp":132:13)
#loc182 = loc("CWE23_Relative_Path_Traversal__char_listen_socket_open_15.cpp":132:29)
#loc183 = loc("CWE23_Relative_Path_Traversal__char_listen_socket_open_15.cpp":133:9)
#loc184 = loc("CWE23_Relative_Path_Traversal__char_listen_socket_open_15.cpp":134:26)
#loc185 = loc("CWE23_Relative_Path_Traversal__char_listen_socket_open_15.cpp":134:13)
#loc186 = loc("CWE23_Relative_Path_Traversal__char_listen_socket_open_15.cpp":136:9)
#loc187 = loc("CWE23_Relative_Path_Traversal__char_listen_socket_open_15.cpp":139:9)
#loc188 = loc("CWE23_Relative_Path_Traversal__char_listen_socket_open_15.cpp":136:13)
#loc189 = loc("CWE23_Relative_Path_Traversal__char_listen_socket_open_15.cpp":136:29)
#loc190 = loc("CWE23_Relative_Path_Traversal__char_listen_socket_open_15.cpp":137:9)
#loc191 = loc("CWE23_Relative_Path_Traversal__char_listen_socket_open_15.cpp":138:26)
#loc192 = loc("CWE23_Relative_Path_Traversal__char_listen_socket_open_15.cpp":138:13)
#loc193 = loc("CWE23_Relative_Path_Traversal__char_listen_socket_open_15.cpp":147:5)
#loc194 = loc("CWE23_Relative_Path_Traversal__char_listen_socket_open_15.cpp":148:5)
#loc195 = loc("CWE23_Relative_Path_Traversal__char_listen_socket_open_15.cpp":150:9)
#loc196 = loc("CWE23_Relative_Path_Traversal__char_listen_socket_open_15.cpp":151:9)
#loc197 = loc("CWE23_Relative_Path_Traversal__char_listen_socket_open_15.cpp":153:5)
#loc198 = loc("CWE23_Relative_Path_Traversal__char_listen_socket_open_15.cpp":161:5)
#loc199 = loc("CWE23_Relative_Path_Traversal__char_listen_socket_open_15.cpp":154:9)
#loc200 = loc("CWE23_Relative_Path_Traversal__char_listen_socket_open_15.cpp":154:13)
#loc201 = loc("CWE23_Relative_Path_Traversal__char_listen_socket_open_15.cpp":156:25)
#loc202 = loc("CWE23_Relative_Path_Traversal__char_listen_socket_open_15.cpp":156:31)
#loc203 = loc("CWE23_Relative_Path_Traversal__char_listen_socket_open_15.cpp":156:38)
#loc204 = loc("CWE23_Relative_Path_Traversal__char_listen_socket_open_15.cpp":156:47)
#loc205 = loc("CWE23_Relative_Path_Traversal__char_listen_socket_open_15.cpp":156:55)
#loc206 = loc("CWE23_Relative_Path_Traversal__char_listen_socket_open_15.cpp":156:20)
#loc207 = loc("CWE23_Relative_Path_Traversal__char_listen_socket_open_15.cpp":156:9)
#loc208 = loc("CWE23_Relative_Path_Traversal__char_listen_socket_open_15.cpp":156:63)
#loc209 = loc("CWE23_Relative_Path_Traversal__char_listen_socket_open_15.cpp":157:9)
#loc210 = loc("CWE23_Relative_Path_Traversal__char_listen_socket_open_15.cpp":160:9)
#loc211 = loc("CWE23_Relative_Path_Traversal__char_listen_socket_open_15.cpp":157:13)
#loc212 = loc("CWE23_Relative_Path_Traversal__char_listen_socket_open_15.cpp":157:26)
#loc213 = loc("CWE23_Relative_Path_Traversal__char_listen_socket_open_15.cpp":157:25)
#loc214 = loc("CWE23_Relative_Path_Traversal__char_listen_socket_open_15.cpp":158:9)
#loc215 = loc("CWE23_Relative_Path_Traversal__char_listen_socket_open_15.cpp":159:19)
#loc216 = loc("CWE23_Relative_Path_Traversal__char_listen_socket_open_15.cpp":159:13)
#loc217 = loc("/usr/include/string.h":149:1)
#loc218 = loc("/usr/include/string.h":150:14)
#loc219 = loc("CWE23_Relative_Path_Traversal__char_listen_socket_open_15.cpp":182:22)
#loc220 = loc("CWE23_Relative_Path_Traversal__char_listen_socket_open_15.cpp":169:1)
#loc221 = loc("CWE23_Relative_Path_Traversal__char_listen_socket_open_15.cpp":194:1)
#loc222 = loc("CWE23_Relative_Path_Traversal__char_listen_socket_open_15.cpp":171:5)
#loc223 = loc("CWE23_Relative_Path_Traversal__char_listen_socket_open_15.cpp":171:12)
#loc224 = loc("CWE23_Relative_Path_Traversal__char_listen_socket_open_15.cpp":173:12)
#loc225 = loc("CWE23_Relative_Path_Traversal__char_listen_socket_open_15.cpp":173:5)
#loc226 = loc("CWE23_Relative_Path_Traversal__char_listen_socket_open_15.cpp":174:5)
#loc227 = loc("CWE23_Relative_Path_Traversal__char_listen_socket_open_15.cpp":184:5)
#loc228 = loc("CWE23_Relative_Path_Traversal__char_listen_socket_open_15.cpp":174:12)
#loc229 = loc("CWE23_Relative_Path_Traversal__char_listen_socket_open_15.cpp":176:5)
#loc230 = loc("CWE23_Relative_Path_Traversal__char_listen_socket_open_15.cpp":178:19)
#loc231 = loc("CWE23_Relative_Path_Traversal__char_listen_socket_open_15.cpp":178:9)
#loc232 = loc("CWE23_Relative_Path_Traversal__char_listen_socket_open_15.cpp":179:9)
#loc233 = loc("CWE23_Relative_Path_Traversal__char_listen_socket_open_15.cpp":180:5)
#loc234 = loc("CWE23_Relative_Path_Traversal__char_listen_socket_open_15.cpp":182:9)
#loc235 = loc("CWE23_Relative_Path_Traversal__char_listen_socket_open_15.cpp":182:16)
#loc236 = loc("CWE23_Relative_Path_Traversal__char_listen_socket_open_15.cpp":183:9)
#loc237 = loc("CWE23_Relative_Path_Traversal__char_listen_socket_open_15.cpp":185:5)
#loc238 = loc("CWE23_Relative_Path_Traversal__char_listen_socket_open_15.cpp":193:5)
#loc239 = loc("CWE23_Relative_Path_Traversal__char_listen_socket_open_15.cpp":186:9)
#loc240 = loc("CWE23_Relative_Path_Traversal__char_listen_socket_open_15.cpp":186:13)
#loc241 = loc("CWE23_Relative_Path_Traversal__char_listen_socket_open_15.cpp":188:25)
#loc242 = loc("CWE23_Relative_Path_Traversal__char_listen_socket_open_15.cpp":188:31)
#loc243 = loc("CWE23_Relative_Path_Traversal__char_listen_socket_open_15.cpp":188:38)
#loc244 = loc("CWE23_Relative_Path_Traversal__char_listen_socket_open_15.cpp":188:47)
#loc245 = loc("CWE23_Relative_Path_Traversal__char_listen_socket_open_15.cpp":188:55)
#loc246 = loc("CWE23_Relative_Path_Traversal__char_listen_socket_open_15.cpp":188:20)
#loc247 = loc("CWE23_Relative_Path_Traversal__char_listen_socket_open_15.cpp":188:9)
#loc248 = loc("CWE23_Relative_Path_Traversal__char_listen_socket_open_15.cpp":188:63)
#loc249 = loc("CWE23_Relative_Path_Traversal__char_listen_socket_open_15.cpp":189:9)
#loc250 = loc("CWE23_Relative_Path_Traversal__char_listen_socket_open_15.cpp":192:9)
#loc251 = loc("CWE23_Relative_Path_Traversal__char_listen_socket_open_15.cpp":189:13)
#loc252 = loc("CWE23_Relative_Path_Traversal__char_listen_socket_open_15.cpp":189:26)
#loc253 = loc("CWE23_Relative_Path_Traversal__char_listen_socket_open_15.cpp":189:25)
#loc254 = loc("CWE23_Relative_Path_Traversal__char_listen_socket_open_15.cpp":190:9)
#loc255 = loc("CWE23_Relative_Path_Traversal__char_listen_socket_open_15.cpp":191:19)
#loc256 = loc("CWE23_Relative_Path_Traversal__char_listen_socket_open_15.cpp":191:13)
#loc257 = loc("CWE23_Relative_Path_Traversal__char_listen_socket_open_15.cpp":197:1)
#loc258 = loc("CWE23_Relative_Path_Traversal__char_listen_socket_open_15.cpp":222:1)
#loc259 = loc("CWE23_Relative_Path_Traversal__char_listen_socket_open_15.cpp":199:5)
#loc260 = loc("CWE23_Relative_Path_Traversal__char_listen_socket_open_15.cpp":199:12)
#loc261 = loc("CWE23_Relative_Path_Traversal__char_listen_socket_open_15.cpp":201:12)
#loc262 = loc("CWE23_Relative_Path_Traversal__char_listen_socket_open_15.cpp":201:5)
#loc263 = loc("CWE23_Relative_Path_Traversal__char_listen_socket_open_15.cpp":202:5)
#loc264 = loc("CWE23_Relative_Path_Traversal__char_listen_socket_open_15.cpp":212:5)
#loc265 = loc("CWE23_Relative_Path_Traversal__char_listen_socket_open_15.cpp":202:12)
#loc266 = loc("CWE23_Relative_Path_Traversal__char_listen_socket_open_15.cpp":204:5)
#loc267 = loc("CWE23_Relative_Path_Traversal__char_listen_socket_open_15.cpp":206:9)
#loc268 = loc("CWE23_Relative_Path_Traversal__char_listen_socket_open_15.cpp":206:16)
#loc269 = loc("CWE23_Relative_Path_Traversal__char_listen_socket_open_15.cpp":206:22)
#loc270 = loc("CWE23_Relative_Path_Traversal__char_listen_socket_open_15.cpp":207:9)
#loc271 = loc("CWE23_Relative_Path_Traversal__char_listen_socket_open_15.cpp":208:5)
#loc272 = loc("CWE23_Relative_Path_Traversal__char_listen_socket_open_15.cpp":210:19)
#loc273 = loc("CWE23_Relative_Path_Traversal__char_listen_socket_open_15.cpp":210:9)
#loc274 = loc("CWE23_Relative_Path_Traversal__char_listen_socket_open_15.cpp":211:9)
#loc275 = loc("CWE23_Relative_Path_Traversal__char_listen_socket_open_15.cpp":213:5)
#loc276 = loc("CWE23_Relative_Path_Traversal__char_listen_socket_open_15.cpp":221:5)
#loc277 = loc("CWE23_Relative_Path_Traversal__char_listen_socket_open_15.cpp":214:9)
#loc278 = loc("CWE23_Relative_Path_Traversal__char_listen_socket_open_15.cpp":214:13)
#loc279 = loc("CWE23_Relative_Path_Traversal__char_listen_socket_open_15.cpp":216:25)
#loc280 = loc("CWE23_Relative_Path_Traversal__char_listen_socket_open_15.cpp":216:31)
#loc281 = loc("CWE23_Relative_Path_Traversal__char_listen_socket_open_15.cpp":216:38)
#loc282 = loc("CWE23_Relative_Path_Traversal__char_listen_socket_open_15.cpp":216:47)
#loc283 = loc("CWE23_Relative_Path_Traversal__char_listen_socket_open_15.cpp":216:55)
#loc284 = loc("CWE23_Relative_Path_Traversal__char_listen_socket_open_15.cpp":216:20)
#loc285 = loc("CWE23_Relative_Path_Traversal__char_listen_socket_open_15.cpp":216:9)
#loc286 = loc("CWE23_Relative_Path_Traversal__char_listen_socket_open_15.cpp":216:63)
#loc287 = loc("CWE23_Relative_Path_Traversal__char_listen_socket_open_15.cpp":217:9)
#loc288 = loc("CWE23_Relative_Path_Traversal__char_listen_socket_open_15.cpp":220:9)
#loc289 = loc("CWE23_Relative_Path_Traversal__char_listen_socket_open_15.cpp":217:13)
#loc290 = loc("CWE23_Relative_Path_Traversal__char_listen_socket_open_15.cpp":217:26)
#loc291 = loc("CWE23_Relative_Path_Traversal__char_listen_socket_open_15.cpp":217:25)
#loc292 = loc("CWE23_Relative_Path_Traversal__char_listen_socket_open_15.cpp":218:9)
#loc293 = loc("CWE23_Relative_Path_Traversal__char_listen_socket_open_15.cpp":219:19)
#loc294 = loc("CWE23_Relative_Path_Traversal__char_listen_socket_open_15.cpp":219:13)
#loc295 = loc("CWE23_Relative_Path_Traversal__char_listen_socket_open_15.cpp":224:1)
#loc296 = loc("CWE23_Relative_Path_Traversal__char_listen_socket_open_15.cpp":228:1)
#loc297 = loc("CWE23_Relative_Path_Traversal__char_listen_socket_open_15.cpp":226:5)
#loc298 = loc("CWE23_Relative_Path_Traversal__char_listen_socket_open_15.cpp":227:5)
#loc299 = loc(fused[#loc1, #loc2])
#loc300 = loc(fused[#loc3, #loc4])
#loc301 = loc(fused[#loc5, #loc6])
#loc302 = loc(fused[#loc7, #loc8])
#loc303 = loc(fused[#loc9, #loc10])
#loc304 = loc(fused[#loc11, #loc12])
#loc305 = loc(fused[#loc13, #loc14])
#loc306 = loc(fused[#loc15, #loc16])
#loc307 = loc(fused[#loc17, #loc18])
#loc308 = loc(fused[#loc19, #loc20])
#loc309 = loc(fused[#loc21, #loc22])
#loc310 = loc(fused[#loc23, #loc24])
#loc311 = loc(fused[#loc25, #loc26])
#loc312 = loc(fused[#loc28, #loc29])
#loc313 = loc(fused[#loc30, #loc31])
#loc314 = loc(fused[#loc32, #loc33])
#loc315 = loc(fused[#loc35, #loc34])
#loc316 = loc(fused[#loc36, #loc37])
#loc317 = loc(fused[#loc40, #loc41])
#loc318 = loc(fused[#loc42, #loc43])
#loc319 = loc(fused[#loc44, #loc45])
#loc320 = loc(fused[#loc46, #loc47])
#loc321 = loc(fused[#loc48, #loc49])
#loc322 = loc(fused[#loc50, #loc51])
#loc323 = loc(fused[#loc52, #loc53])
#loc324 = loc(fused[#loc56, #loc57])
#loc325 = loc(fused[#loc58, #loc59])
#loc326 = loc(fused[#loc64, #loc65])
#loc327 = loc(fused[#loc66, #loc67])
#loc328 = loc(fused[#loc68, #loc69])
#loc329 = loc(fused[#loc70, #loc67])
#loc330 = loc(fused[#loc72, #loc73])
#loc331 = loc(fused[#loc75, #loc76])
#loc332 = loc(fused[#loc77, #loc78])
#loc333 = loc(fused[#loc81, #loc79])
#loc334 = loc(fused[#loc85, #loc82])
#loc335 = loc(fused[#loc89, #loc90])
#loc336 = loc(fused[#loc91, #loc92])
#loc337 = loc(fused[#loc94, #loc95])
#loc338 = loc(fused[#loc96, #loc97])
#loc339 = loc(fused[#loc98, #loc99])
#loc340 = loc(fused[#loc100, #loc92])
#loc341 = loc(fused[#loc102, #loc103])
#loc342 = loc(fused[#loc106, #loc107])
#loc343 = loc(fused[#loc108, #loc103])
#loc344 = loc(fused[#loc114, #loc115])
#loc345 = loc(fused[#loc116, #loc117])
#loc346 = loc(fused[#loc118, #loc119])
#loc347 = loc(fused[#loc120, #loc117])
#loc348 = loc(fused[#loc126, #loc127])
#loc349 = loc(fused[#loc128, #loc129])
#loc350 = loc(fused[#loc130, #loc131])
#loc351 = loc(fused[#loc130, #loc132])
#loc352 = loc(fused[#loc128, #loc133])
#loc353 = loc(fused[#loc136, #loc137])
#loc354 = loc(fused[#loc138, #loc139])
#loc355 = loc(fused[#loc140, #loc141])
#loc356 = loc(fused[#loc143, #loc144])
#loc357 = loc(fused[#loc145, #loc139])
#loc358 = loc(fused[#loc151, #loc152])
#loc359 = loc(fused[#loc150, #loc152])
#loc360 = loc(fused[#loc149, #loc152])
#loc361 = loc(fused[#loc148, #loc147])
#loc362 = loc(fused[#loc157, #loc158])
#loc363 = loc(fused[#loc159, #loc160])
#loc364 = loc(fused[#loc162, #loc160])
#loc365 = loc(fused[#loc165, #loc163])
#loc366 = loc(fused[#loc169, #loc170])
#loc367 = loc(fused[#loc171, #loc172])
#loc368 = loc(fused[#loc174, #loc172])
#loc369 = loc(fused[#loc177, #loc175])
#loc370 = loc(fused[#loc179, #loc180])
#loc371 = loc(fused[#loc181, #loc182])
#loc372 = loc(fused[#loc183, #loc180])
#loc373 = loc(fused[#loc186, #loc187])
#loc374 = loc(fused[#loc188, #loc189])
#loc375 = loc(fused[#loc190, #loc187])
#loc376 = loc(fused[#loc197, #loc198])
#loc377 = loc(fused[#loc199, #loc200])
#loc378 = loc(fused[#loc202, #loc203])
#loc379 = loc(fused[#loc204, #loc205])
#loc380 = loc(fused[#loc207, #loc208])
#loc381 = loc(fused[#loc209, #loc210])
#loc382 = loc(fused[#loc211, #loc212])
#loc383 = loc(fused[#loc214, #loc210])
#loc384 = loc(fused[#loc217, #loc218])
#loc385 = loc(fused[#loc220, #loc221])
#loc386 = loc(fused[#loc222, #loc223])
#loc387 = loc(fused[#loc225, #loc224])
#loc388 = loc(fused[#loc226, #loc227])
#loc389 = loc(fused[#loc237, #loc238])
#loc390 = loc(fused[#loc239, #loc240])
#loc391 = loc(fused[#loc242, #loc243])
#loc392 = loc(fused[#loc244, #loc245])
#loc393 = loc(fused[#loc247, #loc248])
#loc394 = loc(fused[#loc249, #loc250])
#loc395 = loc(fused[#loc251, #loc252])
#loc396 = loc(fused[#loc254, #loc250])
#loc397 = loc(fused[#loc257, #loc258])
#loc398 = loc(fused[#loc259, #loc260])
#loc399 = loc(fused[#loc262, #loc261])
#loc400 = loc(fused[#loc263, #loc264])
#loc401 = loc(fused[#loc275, #loc276])
#loc402 = loc(fused[#loc277, #loc278])
#loc403 = loc(fused[#loc280, #loc281])
#loc404 = loc(fused[#loc282, #loc283])
#loc405 = loc(fused[#loc285, #loc286])
#loc406 = loc(fused[#loc287, #loc288])
#loc407 = loc(fused[#loc289, #loc290])
#loc408 = loc(fused[#loc292, #loc288])
#loc409 = loc(fused[#loc295, #loc296])
