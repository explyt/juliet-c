!s32i = !cir.int<s, 32>
!s64i = !cir.int<s, 64>
!s8i = !cir.int<s, 8>
!u16i = !cir.int<u, 16>
!u32i = !cir.int<u, 32>
!u64i = !cir.int<u, 64>
!u8i = !cir.int<u, 8>
!void = !cir.void
#false = #cir.bool<false> : !cir.bool
#fn_attr = #cir<extra({nothrow = #cir.nothrow})>
#fn_attr1 = #cir<extra({inline = #cir.inline<no>, nothrow = #cir.nothrow, optnone = #cir.optnone})>
#loc207 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_connect_socket_34.c":298:10)
#loc208 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_connect_socket_34.c":298:14)
#loc209 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_connect_socket_34.c":298:20)
#loc210 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_connect_socket_34.c":298:32)
#true = #cir.bool<true> : !cir.bool
!ty_CWE122_Heap_Based_Buffer_Overflow__c_CWE129_connect_socket_34_unionType = !cir.struct<union "CWE122_Heap_Based_Buffer_Overflow__c_CWE129_connect_socket_34_unionType" {!s32i, !s32i}>
!ty_in_addr = !cir.struct<struct "in_addr" {!u32i} #cir.record.decl.ast>
#loc548 = loc(fused[#loc207, #loc208])
#loc549 = loc(fused[#loc209, #loc210])
!ty_sockaddr = !cir.struct<struct "sockaddr" {!u16i, !cir.array<!s8i x 14>} #cir.record.decl.ast>
!ty_sockaddr_in = !cir.struct<struct "sockaddr_in" {!u16i, !u16i, !ty_in_addr, !cir.array<!u8i x 8>}>
module @"/home/ladisgin/git_proj/juliet-c/testcases/CWE122_Heap_Based_Buffer_Overflow/s06/CWE122_Heap_Based_Buffer_Overflow__c_CWE129_connect_socket_34.c" attributes {cir.lang = #cir.lang<c>, cir.sob = #cir.signed_overflow_behavior<undefined>, cir.triple = "x86_64-unknown-linux-gnu", dlti.dl_spec = #dlti.dl_spec<i128 = dense<128> : vector<2xi64>, f80 = dense<128> : vector<2xi64>, !llvm.ptr<271> = dense<32> : vector<4xi64>, !llvm.ptr<272> = dense<64> : vector<4xi64>, i64 = dense<64> : vector<2xi64>, i32 = dense<32> : vector<2xi64>, f64 = dense<64> : vector<2xi64>, f16 = dense<16> : vector<2xi64>, !llvm.ptr<270> = dense<32> : vector<4xi64>, f128 = dense<128> : vector<2xi64>, !llvm.ptr = dense<64> : vector<4xi64>, i1 = dense<8> : vector<2xi64>, i8 = dense<8> : vector<2xi64>, i16 = dense<16> : vector<2xi64>, "dlti.stack_alignment" = 128 : i64, "dlti.endianness" = "little">} {
  cir.func private @socket(!s32i, !s32i, !s32i) -> !s32i extra(#fn_attr) loc(#loc467)
  cir.func private @inet_addr(!cir.ptr<!s8i>) -> !u32i extra(#fn_attr) loc(#loc468)
  cir.global "private" constant cir_private dsolocal @".str" = #cir.const_array<"127.0.0.1\00" : !cir.array<!s8i x 10>> : !cir.array<!s8i x 10> {alignment = 1 : i64} loc(#loc5)
  cir.func private @htons(!u16i) -> !u16i extra(#fn_attr) loc(#loc469)
  cir.func private @connect(!s32i, !cir.ptr<!ty_sockaddr>, !u32i) -> !s32i loc(#loc470)
  cir.func private @recv(!s32i, !cir.ptr<!void>, !u64i, !s32i) -> !s64i loc(#loc471)
  cir.func private @atoi(!cir.ptr<!s8i>) -> !s32i extra(#fn_attr) loc(#loc472)
  cir.func private @close(!s32i) -> !s32i loc(#loc473)
  cir.func private @malloc(!u64i) -> !cir.ptr<!void> extra(#fn_attr) loc(#loc474)
  cir.func private @exit(!s32i) extra(#fn_attr) loc(#loc475)
  cir.func private @printIntLine(!s32i) loc(#loc476)
  cir.func private @printLine(!cir.ptr<!s8i>) loc(#loc477)
  cir.global "private" constant cir_private dsolocal @".str.1" = #cir.const_array<"ERROR: Array index is negative.\00" : !cir.array<!s8i x 32>> : !cir.array<!s8i x 32> {alignment = 1 : i64} loc(#loc24)
  cir.func private @free(!cir.ptr<!void>) extra(#fn_attr) loc(#loc478)
  cir.func no_proto @CWE122_Heap_Based_Buffer_Overflow__c_CWE129_connect_socket_34_bad() extra(#fn_attr1) {
    %0 = cir.alloca !s32i, !cir.ptr<!s32i>, ["data"] {alignment = 4 : i64} loc(#loc480)
    %1 = cir.alloca !ty_CWE122_Heap_Based_Buffer_Overflow__c_CWE129_connect_socket_34_unionType, !cir.ptr<!ty_CWE122_Heap_Based_Buffer_Overflow__c_CWE129_connect_socket_34_unionType>, ["myUnion"] {alignment = 4 : i64} loc(#loc481)
    %2 = cir.const #cir.int<1> : !s32i loc(#loc33)
    %3 = cir.unary(minus, %2) : !s32i, !s32i loc(#loc34)
    cir.store %3, %0 : !s32i, !cir.ptr<!s32i> loc(#loc482)
    cir.scope {
      %6 = cir.alloca !s32i, !cir.ptr<!s32i>, ["recvResult"] {alignment = 4 : i64} loc(#loc484)
      %7 = cir.alloca !ty_sockaddr_in, !cir.ptr<!ty_sockaddr_in>, ["service"] {alignment = 4 : i64} loc(#loc485)
      %8 = cir.alloca !s32i, !cir.ptr<!s32i>, ["connectSocket", init] {alignment = 4 : i64} loc(#loc486)
      %9 = cir.alloca !cir.array<!s8i x 14>, !cir.ptr<!cir.array<!s8i x 14>>, ["inputBuffer"] {alignment = 1 : i64} loc(#loc487)
      %10 = cir.const #cir.int<1> : !s32i loc(#loc43)
      %11 = cir.unary(minus, %10) : !s32i, !s32i loc(#loc43)
      cir.store %11, %8 : !s32i, !cir.ptr<!s32i> loc(#loc486)
      cir.scope {
        cir.do {
          %12 = cir.const #cir.int<2> : !s32i loc(#loc48)
          %13 = cir.const #cir.int<1> : !s32i loc(#loc49)
          %14 = cir.const #cir.int<6> : !s32i loc(#loc50)
          %15 = cir.call @socket(%12, %13, %14) : (!s32i, !s32i, !s32i) -> !s32i extra(#fn_attr) loc(#loc51)
          cir.store %15, %8 : !s32i, !cir.ptr<!s32i> loc(#loc489)
          cir.scope {
            %54 = cir.load %8 : !cir.ptr<!s32i>, !s32i loc(#loc56)
            %55 = cir.const #cir.int<1> : !s32i loc(#loc57)
            %56 = cir.unary(minus, %55) : !s32i, !s32i loc(#loc57)
            %57 = cir.cmp(eq, %54, %56) : !s32i, !cir.bool loc(#loc491)
            cir.if %57 {
              cir.break loc(#loc59)
            } loc(#loc492)
          } loc(#loc490)
          %16 = cir.cast(bitcast, %7 : !cir.ptr<!ty_sockaddr_in>), !cir.ptr<!void> loc(#loc493)
          %17 = cir.const #cir.int<0> : !s32i loc(#loc62)
          %18 = cir.const #cir.int<16> : !u64i loc(#loc494)
          cir.libc.memset %18 bytes from %16 set to %17 : !cir.ptr<!void>, !s32i, !u64i loc(#loc495)
          %19 = cir.const #cir.int<2> : !s32i loc(#loc67)
          %20 = cir.cast(integral, %19 : !s32i), !u16i loc(#loc67)
          %21 = cir.get_member %7[0] {name = "sin_family"} : !cir.ptr<!ty_sockaddr_in> -> !cir.ptr<!u16i> loc(#loc68)
          cir.store %20, %21 : !u16i, !cir.ptr<!u16i> loc(#loc496)
          %22 = cir.get_global @".str" : !cir.ptr<!cir.array<!s8i x 10>> loc(#loc5)
          %23 = cir.cast(array_to_ptrdecay, %22 : !cir.ptr<!cir.array<!s8i x 10>>), !cir.ptr<!s8i> loc(#loc5)
          %24 = cir.call @inet_addr(%23) : (!cir.ptr<!s8i>) -> !u32i extra(#fn_attr) loc(#loc70)
          %25 = cir.get_member %7[2] {name = "sin_addr"} : !cir.ptr<!ty_sockaddr_in> -> !cir.ptr<!ty_in_addr> loc(#loc71)
          %26 = cir.get_member %25[0] {name = "s_addr"} : !cir.ptr<!ty_in_addr> -> !cir.ptr<!u32i> loc(#loc72)
          cir.store %24, %26 : !u32i, !cir.ptr<!u32i> loc(#loc497)
          %27 = cir.const #cir.int<27015> : !s32i loc(#loc75)
          %28 = cir.cast(integral, %27 : !s32i), !u16i loc(#loc75)
          %29 = cir.call @htons(%28) : (!u16i) -> !u16i extra(#fn_attr) loc(#loc76)
          %30 = cir.get_member %7[1] {name = "sin_port"} : !cir.ptr<!ty_sockaddr_in> -> !cir.ptr<!u16i> loc(#loc77)
          cir.store %29, %30 : !u16i, !cir.ptr<!u16i> loc(#loc498)
          cir.scope {
            %54 = cir.load %8 : !cir.ptr<!s32i>, !s32i loc(#loc82)
            %55 = cir.cast(bitcast, %7 : !cir.ptr<!ty_sockaddr_in>), !cir.ptr<!ty_sockaddr> loc(#loc500)
            %56 = cir.const #cir.int<16> : !u64i loc(#loc501)
            %57 = cir.cast(integral, %56 : !u64i), !u32i loc(#loc501)
            %58 = cir.call @connect(%54, %55, %57) : (!s32i, !cir.ptr<!ty_sockaddr>, !u32i) -> !s32i loc(#loc87)
            %59 = cir.const #cir.int<1> : !s32i loc(#loc88)
            %60 = cir.unary(minus, %59) : !s32i, !s32i loc(#loc88)
            %61 = cir.cmp(eq, %58, %60) : !s32i, !cir.bool loc(#loc502)
            cir.if %61 {
              cir.break loc(#loc90)
            } loc(#loc503)
          } loc(#loc499)
          %31 = cir.load %8 : !cir.ptr<!s32i>, !s32i loc(#loc91)
          %32 = cir.cast(array_to_ptrdecay, %9 : !cir.ptr<!cir.array<!s8i x 14>>), !cir.ptr<!s8i> loc(#loc92)
          %33 = cir.cast(bitcast, %32 : !cir.ptr<!s8i>), !cir.ptr<!void> loc(#loc92)
          %34 = cir.const #cir.int<3> : !s32i loc(#loc93)
          %35 = cir.cast(integral, %34 : !s32i), !u64i loc(#loc93)
          %36 = cir.const #cir.int<4> : !u64i loc(#loc93)
          %37 = cir.binop(mul, %35, %36) : !u64i loc(#loc93)
          %38 = cir.const #cir.int<2> : !s32i loc(#loc93)
          %39 = cir.cast(integral, %38 : !s32i), !u64i loc(#loc93)
          %40 = cir.binop(add, %37, %39) : !u64i loc(#loc93)
          %41 = cir.const #cir.int<1> : !s32i loc(#loc94)
          %42 = cir.cast(integral, %41 : !s32i), !u64i loc(#loc94)
          %43 = cir.binop(sub, %40, %42) : !u64i loc(#loc504)
          %44 = cir.const #cir.int<0> : !s32i loc(#loc95)
          %45 = cir.call @recv(%31, %33, %43, %44) : (!s32i, !cir.ptr<!void>, !u64i, !s32i) -> !s64i loc(#loc96)
          %46 = cir.cast(integral, %45 : !s64i), !s32i loc(#loc96)
          cir.store %46, %6 : !s32i, !cir.ptr<!s32i> loc(#loc505)
          cir.scope {
            %54 = cir.load %6 : !cir.ptr<!s32i>, !s32i loc(#loc101)
            %55 = cir.const #cir.int<1> : !s32i loc(#loc102)
            %56 = cir.unary(minus, %55) : !s32i, !s32i loc(#loc102)
            %57 = cir.cmp(eq, %54, %56) : !s32i, !cir.bool loc(#loc507)
            %58 = cir.ternary(%57, true {
              %59 = cir.const #true loc(#loc103)
              cir.yield %59 : !cir.bool loc(#loc103)
            }, false {
              %59 = cir.load %6 : !cir.ptr<!s32i>, !s32i loc(#loc104)
              %60 = cir.const #cir.int<0> : !s32i loc(#loc105)
              %61 = cir.cmp(eq, %59, %60) : !s32i, !cir.bool loc(#loc508)
              %62 = cir.ternary(%61, true {
                %63 = cir.const #true loc(#loc103)
                cir.yield %63 : !cir.bool loc(#loc103)
              }, false {
                %63 = cir.const #false loc(#loc103)
                cir.yield %63 : !cir.bool loc(#loc103)
              }) : (!cir.bool) -> !cir.bool loc(#loc103)
              cir.yield %62 : !cir.bool loc(#loc103)
            }) : (!cir.bool) -> !cir.bool loc(#loc103)
            cir.if %58 {
              cir.break loc(#loc107)
            } loc(#loc509)
          } loc(#loc506)
          %47 = cir.const #cir.int<0> : !s32i loc(#loc108)
          %48 = cir.cast(integral, %47 : !s32i), !s8i loc(#loc108)
          %49 = cir.load %6 : !cir.ptr<!s32i>, !s32i loc(#loc109)
          %50 = cir.cast(array_to_ptrdecay, %9 : !cir.ptr<!cir.array<!s8i x 14>>), !cir.ptr<!s8i> loc(#loc110)
          %51 = cir.ptr_stride(%50 : !cir.ptr<!s8i>, %49 : !s32i), !cir.ptr<!s8i> loc(#loc110)
          cir.store %48, %51 : !s8i, !cir.ptr<!s8i> loc(#loc510)
          %52 = cir.cast(array_to_ptrdecay, %9 : !cir.ptr<!cir.array<!s8i x 14>>), !cir.ptr<!s8i> loc(#loc111)
          %53 = cir.call @atoi(%52) : (!cir.ptr<!s8i>) -> !s32i extra(#fn_attr) loc(#loc112)
          cir.store %53, %0 : !s32i, !cir.ptr<!s32i> loc(#loc511)
          cir.yield loc(#loc47)
        } while {
          %12 = cir.const #cir.int<0> : !s32i loc(#loc115)
          %13 = cir.cast(int_to_bool, %12 : !s32i), !cir.bool loc(#loc115)
          cir.condition(%13) loc(#loc115)
        } loc(#loc488)
      } loc(#loc488)
      cir.scope {
        %12 = cir.load %8 : !cir.ptr<!s32i>, !s32i loc(#loc118)
        %13 = cir.const #cir.int<1> : !s32i loc(#loc119)
        %14 = cir.unary(minus, %13) : !s32i, !s32i loc(#loc119)
        %15 = cir.cmp(ne, %12, %14) : !s32i, !cir.bool loc(#loc513)
        cir.if %15 {
          %16 = cir.load %8 : !cir.ptr<!s32i>, !s32i loc(#loc121)
          %17 = cir.call @close(%16) : (!s32i) -> !s32i loc(#loc122)
        } loc(#loc514)
      } loc(#loc512)
    } loc(#loc483)
    %4 = cir.load %0 : !cir.ptr<!s32i>, !s32i loc(#loc123)
    %5 = cir.get_member %1[0] {name = "unionFirst"} : !cir.ptr<!ty_CWE122_Heap_Based_Buffer_Overflow__c_CWE129_connect_socket_34_unionType> -> !cir.ptr<!s32i> loc(#loc124)
    cir.store %4, %5 : !s32i, !cir.ptr<!s32i> loc(#loc515)
    cir.scope {
      %6 = cir.alloca !s32i, !cir.ptr<!s32i>, ["data", init] {alignment = 4 : i64} loc(#loc517)
      %7 = cir.get_member %1[1] {name = "unionSecond"} : !cir.ptr<!ty_CWE122_Heap_Based_Buffer_Overflow__c_CWE129_connect_socket_34_unionType> -> !cir.ptr<!s32i> loc(#loc130)
      %8 = cir.load %7 : !cir.ptr<!s32i>, !s32i loc(#loc129)
      cir.store %8, %6 : !s32i, !cir.ptr<!s32i> loc(#loc517)
      cir.scope {
        %9 = cir.alloca !s32i, !cir.ptr<!s32i>, ["i"] {alignment = 4 : i64} loc(#loc519)
        %10 = cir.alloca !cir.ptr<!s32i>, !cir.ptr<!cir.ptr<!s32i>>, ["buffer", init] {alignment = 8 : i64} loc(#loc520)
        %11 = cir.get_global @malloc : !cir.ptr<!cir.func<!cir.ptr<!void> (!u64i)>> loc(#loc137)
        %12 = cir.const #cir.int<10> : !s32i loc(#loc138)
        %13 = cir.cast(integral, %12 : !s32i), !u64i loc(#loc138)
        %14 = cir.const #cir.int<4> : !u64i loc(#loc521)
        %15 = cir.binop(mul, %13, %14) : !u64i loc(#loc522)
        %16 = cir.call @malloc(%15) : (!u64i) -> !cir.ptr<!void> extra(#fn_attr) loc(#loc137)
        %17 = cir.cast(bitcast, %16 : !cir.ptr<!void>), !cir.ptr<!s32i> loc(#loc523)
        cir.store %17, %10 : !cir.ptr<!s32i>, !cir.ptr<!cir.ptr<!s32i>> loc(#loc520)
        cir.scope {
          %21 = cir.load %10 : !cir.ptr<!cir.ptr<!s32i>>, !cir.ptr<!s32i> loc(#loc143)
          %22 = cir.const #cir.ptr<null> : !cir.ptr<!void> loc(#loc144)
          %23 = cir.cast(bitcast, %22 : !cir.ptr<!void>), !cir.ptr<!s32i> loc(#loc144)
          %24 = cir.cmp(eq, %21, %23) : !cir.ptr<!s32i>, !cir.bool loc(#loc525)
          cir.if %24 {
            %25 = cir.get_global @exit : !cir.ptr<!cir.func<!void (!s32i)>> loc(#loc146)
            %26 = cir.const #cir.int<1> : !s32i loc(#loc147)
            %27 = cir.unary(minus, %26) : !s32i, !s32i loc(#loc148)
            cir.call @exit(%27) : (!s32i) -> () extra(#fn_attr) loc(#loc146)
          } loc(#loc526)
        } loc(#loc524)
        cir.scope {
          %21 = cir.const #cir.int<0> : !s32i loc(#loc151)
          cir.store %21, %9 : !s32i, !cir.ptr<!s32i> loc(#loc528)
          cir.for : cond {
            %22 = cir.load %9 : !cir.ptr<!s32i>, !s32i loc(#loc153)
            %23 = cir.const #cir.int<10> : !s32i loc(#loc154)
            %24 = cir.cmp(lt, %22, %23) : !s32i, !cir.bool loc(#loc529)
            cir.condition(%24) loc(#loc155)
          } body {
            cir.scope {
              %22 = cir.const #cir.int<0> : !s32i loc(#loc157)
              %23 = cir.load %10 : !cir.ptr<!cir.ptr<!s32i>>, !cir.ptr<!s32i> loc(#loc158)
              %24 = cir.load %9 : !cir.ptr<!s32i>, !s32i loc(#loc159)
              %25 = cir.ptr_stride(%23 : !cir.ptr<!s32i>, %24 : !s32i), !cir.ptr<!s32i> loc(#loc160)
              cir.store %22, %25 : !s32i, !cir.ptr<!s32i> loc(#loc531)
            } loc(#loc530)
            cir.yield loc(#loc150)
          } step {
            %22 = cir.load %9 : !cir.ptr<!s32i>, !s32i loc(#loc161)
            %23 = cir.unary(inc, %22) : !s32i, !s32i loc(#loc162)
            cir.store %23, %9 : !s32i, !cir.ptr<!s32i> loc(#loc532)
            cir.yield loc(#loc527)
          } loc(#loc527)
        } loc(#loc527)
        cir.scope {
          %21 = cir.load %6 : !cir.ptr<!s32i>, !s32i loc(#loc165)
          %22 = cir.const #cir.int<0> : !s32i loc(#loc166)
          %23 = cir.cmp(ge, %21, %22) : !s32i, !cir.bool loc(#loc534)
          cir.if %23 {
            %24 = cir.const #cir.int<1> : !s32i loc(#loc170)
            %25 = cir.load %10 : !cir.ptr<!cir.ptr<!s32i>>, !cir.ptr<!s32i> loc(#loc171)
            %26 = cir.load %6 : !cir.ptr<!s32i>, !s32i loc(#loc172)
            %27 = cir.ptr_stride(%25 : !cir.ptr<!s32i>, %26 : !s32i), !cir.ptr<!s32i> loc(#loc173)
            cir.store %24, %27 : !s32i, !cir.ptr<!s32i> loc(#loc536)
            cir.scope {
              %28 = cir.const #cir.int<0> : !s32i loc(#loc176)
              cir.store %28, %9 : !s32i, !cir.ptr<!s32i> loc(#loc538)
              cir.for : cond {
                %29 = cir.load %9 : !cir.ptr<!s32i>, !s32i loc(#loc178)
                %30 = cir.const #cir.int<10> : !s32i loc(#loc179)
                %31 = cir.cmp(lt, %29, %30) : !s32i, !cir.bool loc(#loc539)
                cir.condition(%31) loc(#loc180)
              } body {
                cir.scope {
                  %29 = cir.load %10 : !cir.ptr<!cir.ptr<!s32i>>, !cir.ptr<!s32i> loc(#loc182)
                  %30 = cir.load %9 : !cir.ptr<!s32i>, !s32i loc(#loc183)
                  %31 = cir.ptr_stride(%29 : !cir.ptr<!s32i>, %30 : !s32i), !cir.ptr<!s32i> loc(#loc184)
                  %32 = cir.load %31 : !cir.ptr<!s32i>, !s32i loc(#loc182)
                  cir.call @printIntLine(%32) : (!s32i) -> () loc(#loc185)
                } loc(#loc540)
                cir.yield loc(#loc175)
              } step {
                %29 = cir.load %9 : !cir.ptr<!s32i>, !s32i loc(#loc186)
                %30 = cir.unary(inc, %29) : !s32i, !s32i loc(#loc187)
                cir.store %30, %9 : !s32i, !cir.ptr<!s32i> loc(#loc541)
                cir.yield loc(#loc537)
              } loc(#loc537)
            } loc(#loc537)
          } else {
            %24 = cir.get_global @".str.1" : !cir.ptr<!cir.array<!s8i x 32>> loc(#loc24)
            %25 = cir.cast(array_to_ptrdecay, %24 : !cir.ptr<!cir.array<!s8i x 32>>), !cir.ptr<!s8i> loc(#loc24)
            cir.call @printLine(%25) : (!cir.ptr<!s8i>) -> () loc(#loc188)
          } loc(#loc535)
        } loc(#loc533)
        %18 = cir.get_global @free : !cir.ptr<!cir.func<!void (!cir.ptr<!void>)>> loc(#loc189)
        %19 = cir.load %10 : !cir.ptr<!cir.ptr<!s32i>>, !cir.ptr<!s32i> loc(#loc190)
        %20 = cir.cast(bitcast, %19 : !cir.ptr<!s32i>), !cir.ptr<!void> loc(#loc190)
        cir.call @free(%20) : (!cir.ptr<!void>) -> () extra(#fn_attr) loc(#loc189)
      } loc(#loc518)
    } loc(#loc516)
    cir.return loc(#loc28)
  } loc(#loc479)
  cir.func no_proto @CWE122_Heap_Based_Buffer_Overflow__c_CWE129_connect_socket_34_good() extra(#fn_attr1) {
    %0 = cir.get_global @goodG2B : !cir.ptr<!cir.func<!void ()>> loc(#loc543)
    cir.call %0() : (!cir.ptr<!cir.func<!void ()>>) -> () loc(#loc193)
    %1 = cir.get_global @goodB2G : !cir.ptr<!cir.func<!void ()>> loc(#loc544)
    cir.call %1() : (!cir.ptr<!cir.func<!void ()>>) -> () loc(#loc195)
    cir.return loc(#loc192)
  } loc(#loc542)
  cir.func private @srand(!u32i) extra(#fn_attr) loc(#loc545)
  cir.func private @time(!cir.ptr<!s64i>) -> !s64i extra(#fn_attr) loc(#loc546)
  cir.global "private" constant cir_private dsolocal @".str.2" = #cir.const_array<"Calling good()...\00" : !cir.array<!s8i x 18>> : !cir.array<!s8i x 18> {alignment = 1 : i64} loc(#loc201)
  cir.global "private" constant cir_private dsolocal @".str.3" = #cir.const_array<"Finished good()\00" : !cir.array<!s8i x 16>> : !cir.array<!s8i x 16> {alignment = 1 : i64} loc(#loc202)
  cir.global "private" constant cir_private dsolocal @".str.4" = #cir.const_array<"Calling bad()...\00" : !cir.array<!s8i x 17>> : !cir.array<!s8i x 17> {alignment = 1 : i64} loc(#loc203)
  cir.global "private" constant cir_private dsolocal @".str.5" = #cir.const_array<"Finished bad()\00" : !cir.array<!s8i x 15>> : !cir.array<!s8i x 15> {alignment = 1 : i64} loc(#loc204)
  cir.func @main(%arg0: !s32i loc(fused[#loc207, #loc208]), %arg1: !cir.ptr<!cir.ptr<!s8i>> loc(fused[#loc209, #loc210])) -> !s32i extra(#fn_attr1) {
    %0 = cir.alloca !s32i, !cir.ptr<!s32i>, ["argc", init] {alignment = 4 : i64} loc(#loc548)
    %1 = cir.alloca !cir.ptr<!cir.ptr<!s8i>>, !cir.ptr<!cir.ptr<!cir.ptr<!s8i>>>, ["argv", init] {alignment = 8 : i64} loc(#loc549)
    %2 = cir.alloca !s32i, !cir.ptr<!s32i>, ["__retval"] {alignment = 4 : i64} loc(#loc206)
    cir.store %arg0, %0 : !s32i, !cir.ptr<!s32i> loc(#loc211)
    cir.store %arg1, %1 : !cir.ptr<!cir.ptr<!s8i>>, !cir.ptr<!cir.ptr<!cir.ptr<!s8i>>> loc(#loc211)
    %3 = cir.const #cir.ptr<null> : !cir.ptr<!s64i> loc(#loc212)
    %4 = cir.call @time(%3) : (!cir.ptr<!s64i>) -> !s64i extra(#fn_attr) loc(#loc213)
    %5 = cir.cast(integral, %4 : !s64i), !u32i loc(#loc213)
    cir.call @srand(%5) : (!u32i) -> () extra(#fn_attr) loc(#loc214)
    %6 = cir.get_global @".str.2" : !cir.ptr<!cir.array<!s8i x 18>> loc(#loc201)
    %7 = cir.cast(array_to_ptrdecay, %6 : !cir.ptr<!cir.array<!s8i x 18>>), !cir.ptr<!s8i> loc(#loc201)
    cir.call @printLine(%7) : (!cir.ptr<!s8i>) -> () loc(#loc215)
    %8 = cir.get_global @CWE122_Heap_Based_Buffer_Overflow__c_CWE129_connect_socket_34_good : !cir.ptr<!cir.func<!void ()>> loc(#loc550)
    cir.call @CWE122_Heap_Based_Buffer_Overflow__c_CWE129_connect_socket_34_good() : () -> () loc(#loc216)
    %9 = cir.get_global @".str.3" : !cir.ptr<!cir.array<!s8i x 16>> loc(#loc202)
    %10 = cir.cast(array_to_ptrdecay, %9 : !cir.ptr<!cir.array<!s8i x 16>>), !cir.ptr<!s8i> loc(#loc202)
    cir.call @printLine(%10) : (!cir.ptr<!s8i>) -> () loc(#loc218)
    %11 = cir.get_global @".str.4" : !cir.ptr<!cir.array<!s8i x 17>> loc(#loc203)
    %12 = cir.cast(array_to_ptrdecay, %11 : !cir.ptr<!cir.array<!s8i x 17>>), !cir.ptr<!s8i> loc(#loc203)
    cir.call @printLine(%12) : (!cir.ptr<!s8i>) -> () loc(#loc219)
    %13 = cir.get_global @CWE122_Heap_Based_Buffer_Overflow__c_CWE129_connect_socket_34_bad : !cir.ptr<!cir.func<!void ()>> loc(#loc551)
    cir.call @CWE122_Heap_Based_Buffer_Overflow__c_CWE129_connect_socket_34_bad() : () -> () loc(#loc220)
    %14 = cir.get_global @".str.5" : !cir.ptr<!cir.array<!s8i x 15>> loc(#loc204)
    %15 = cir.cast(array_to_ptrdecay, %14 : !cir.ptr<!cir.array<!s8i x 15>>), !cir.ptr<!s8i> loc(#loc204)
    cir.call @printLine(%15) : (!cir.ptr<!s8i>) -> () loc(#loc222)
    %16 = cir.const #cir.int<0> : !s32i loc(#loc223)
    cir.store %16, %2 : !s32i, !cir.ptr<!s32i> loc(#loc552)
    %17 = cir.load %2 : !cir.ptr<!s32i>, !s32i loc(#loc552)
    cir.return %17 : !s32i loc(#loc552)
  } loc(#loc547)
  cir.func no_proto internal private @goodG2B() extra(#fn_attr1) {
    %0 = cir.alloca !s32i, !cir.ptr<!s32i>, ["data"] {alignment = 4 : i64} loc(#loc554)
    %1 = cir.alloca !ty_CWE122_Heap_Based_Buffer_Overflow__c_CWE129_connect_socket_34_unionType, !cir.ptr<!ty_CWE122_Heap_Based_Buffer_Overflow__c_CWE129_connect_socket_34_unionType>, ["myUnion"] {alignment = 4 : i64} loc(#loc555)
    %2 = cir.const #cir.int<1> : !s32i loc(#loc231)
    %3 = cir.unary(minus, %2) : !s32i, !s32i loc(#loc232)
    cir.store %3, %0 : !s32i, !cir.ptr<!s32i> loc(#loc556)
    %4 = cir.const #cir.int<7> : !s32i loc(#loc234)
    cir.store %4, %0 : !s32i, !cir.ptr<!s32i> loc(#loc557)
    %5 = cir.load %0 : !cir.ptr<!s32i>, !s32i loc(#loc236)
    %6 = cir.get_member %1[0] {name = "unionFirst"} : !cir.ptr<!ty_CWE122_Heap_Based_Buffer_Overflow__c_CWE129_connect_socket_34_unionType> -> !cir.ptr<!s32i> loc(#loc124)
    cir.store %5, %6 : !s32i, !cir.ptr<!s32i> loc(#loc558)
    cir.scope {
      %7 = cir.alloca !s32i, !cir.ptr<!s32i>, ["data", init] {alignment = 4 : i64} loc(#loc560)
      %8 = cir.get_member %1[1] {name = "unionSecond"} : !cir.ptr<!ty_CWE122_Heap_Based_Buffer_Overflow__c_CWE129_connect_socket_34_unionType> -> !cir.ptr<!s32i> loc(#loc130)
      %9 = cir.load %8 : !cir.ptr<!s32i>, !s32i loc(#loc241)
      cir.store %9, %7 : !s32i, !cir.ptr<!s32i> loc(#loc560)
      cir.scope {
        %10 = cir.alloca !s32i, !cir.ptr<!s32i>, ["i"] {alignment = 4 : i64} loc(#loc562)
        %11 = cir.alloca !cir.ptr<!s32i>, !cir.ptr<!cir.ptr<!s32i>>, ["buffer", init] {alignment = 8 : i64} loc(#loc563)
        %12 = cir.get_global @malloc : !cir.ptr<!cir.func<!cir.ptr<!void> (!u64i)>> loc(#loc248)
        %13 = cir.const #cir.int<10> : !s32i loc(#loc249)
        %14 = cir.cast(integral, %13 : !s32i), !u64i loc(#loc249)
        %15 = cir.const #cir.int<4> : !u64i loc(#loc564)
        %16 = cir.binop(mul, %14, %15) : !u64i loc(#loc565)
        %17 = cir.call @malloc(%16) : (!u64i) -> !cir.ptr<!void> extra(#fn_attr) loc(#loc248)
        %18 = cir.cast(bitcast, %17 : !cir.ptr<!void>), !cir.ptr<!s32i> loc(#loc566)
        cir.store %18, %11 : !cir.ptr<!s32i>, !cir.ptr<!cir.ptr<!s32i>> loc(#loc563)
        cir.scope {
          %22 = cir.load %11 : !cir.ptr<!cir.ptr<!s32i>>, !cir.ptr<!s32i> loc(#loc254)
          %23 = cir.const #cir.ptr<null> : !cir.ptr<!void> loc(#loc255)
          %24 = cir.cast(bitcast, %23 : !cir.ptr<!void>), !cir.ptr<!s32i> loc(#loc255)
          %25 = cir.cmp(eq, %22, %24) : !cir.ptr<!s32i>, !cir.bool loc(#loc568)
          cir.if %25 {
            %26 = cir.get_global @exit : !cir.ptr<!cir.func<!void (!s32i)>> loc(#loc257)
            %27 = cir.const #cir.int<1> : !s32i loc(#loc258)
            %28 = cir.unary(minus, %27) : !s32i, !s32i loc(#loc259)
            cir.call @exit(%28) : (!s32i) -> () extra(#fn_attr) loc(#loc257)
          } loc(#loc569)
        } loc(#loc567)
        cir.scope {
          %22 = cir.const #cir.int<0> : !s32i loc(#loc262)
          cir.store %22, %10 : !s32i, !cir.ptr<!s32i> loc(#loc571)
          cir.for : cond {
            %23 = cir.load %10 : !cir.ptr<!s32i>, !s32i loc(#loc264)
            %24 = cir.const #cir.int<10> : !s32i loc(#loc265)
            %25 = cir.cmp(lt, %23, %24) : !s32i, !cir.bool loc(#loc572)
            cir.condition(%25) loc(#loc266)
          } body {
            cir.scope {
              %23 = cir.const #cir.int<0> : !s32i loc(#loc268)
              %24 = cir.load %11 : !cir.ptr<!cir.ptr<!s32i>>, !cir.ptr<!s32i> loc(#loc269)
              %25 = cir.load %10 : !cir.ptr<!s32i>, !s32i loc(#loc270)
              %26 = cir.ptr_stride(%24 : !cir.ptr<!s32i>, %25 : !s32i), !cir.ptr<!s32i> loc(#loc271)
              cir.store %23, %26 : !s32i, !cir.ptr<!s32i> loc(#loc574)
            } loc(#loc573)
            cir.yield loc(#loc261)
          } step {
            %23 = cir.load %10 : !cir.ptr<!s32i>, !s32i loc(#loc272)
            %24 = cir.unary(inc, %23) : !s32i, !s32i loc(#loc273)
            cir.store %24, %10 : !s32i, !cir.ptr<!s32i> loc(#loc575)
            cir.yield loc(#loc570)
          } loc(#loc570)
        } loc(#loc570)
        cir.scope {
          %22 = cir.load %7 : !cir.ptr<!s32i>, !s32i loc(#loc276)
          %23 = cir.const #cir.int<0> : !s32i loc(#loc277)
          %24 = cir.cmp(ge, %22, %23) : !s32i, !cir.bool loc(#loc577)
          cir.if %24 {
            %25 = cir.const #cir.int<1> : !s32i loc(#loc281)
            %26 = cir.load %11 : !cir.ptr<!cir.ptr<!s32i>>, !cir.ptr<!s32i> loc(#loc282)
            %27 = cir.load %7 : !cir.ptr<!s32i>, !s32i loc(#loc283)
            %28 = cir.ptr_stride(%26 : !cir.ptr<!s32i>, %27 : !s32i), !cir.ptr<!s32i> loc(#loc284)
            cir.store %25, %28 : !s32i, !cir.ptr<!s32i> loc(#loc579)
            cir.scope {
              %29 = cir.const #cir.int<0> : !s32i loc(#loc287)
              cir.store %29, %10 : !s32i, !cir.ptr<!s32i> loc(#loc581)
              cir.for : cond {
                %30 = cir.load %10 : !cir.ptr<!s32i>, !s32i loc(#loc289)
                %31 = cir.const #cir.int<10> : !s32i loc(#loc290)
                %32 = cir.cmp(lt, %30, %31) : !s32i, !cir.bool loc(#loc582)
                cir.condition(%32) loc(#loc291)
              } body {
                cir.scope {
                  %30 = cir.load %11 : !cir.ptr<!cir.ptr<!s32i>>, !cir.ptr<!s32i> loc(#loc293)
                  %31 = cir.load %10 : !cir.ptr<!s32i>, !s32i loc(#loc294)
                  %32 = cir.ptr_stride(%30 : !cir.ptr<!s32i>, %31 : !s32i), !cir.ptr<!s32i> loc(#loc295)
                  %33 = cir.load %32 : !cir.ptr<!s32i>, !s32i loc(#loc293)
                  cir.call @printIntLine(%33) : (!s32i) -> () loc(#loc296)
                } loc(#loc583)
                cir.yield loc(#loc286)
              } step {
                %30 = cir.load %10 : !cir.ptr<!s32i>, !s32i loc(#loc297)
                %31 = cir.unary(inc, %30) : !s32i, !s32i loc(#loc298)
                cir.store %31, %10 : !s32i, !cir.ptr<!s32i> loc(#loc584)
                cir.yield loc(#loc580)
              } loc(#loc580)
            } loc(#loc580)
          } else {
            %25 = cir.get_global @".str.1" : !cir.ptr<!cir.array<!s8i x 32>> loc(#loc299)
            %26 = cir.cast(array_to_ptrdecay, %25 : !cir.ptr<!cir.array<!s8i x 32>>), !cir.ptr<!s8i> loc(#loc299)
            cir.call @printLine(%26) : (!cir.ptr<!s8i>) -> () loc(#loc300)
          } loc(#loc578)
        } loc(#loc576)
        %19 = cir.get_global @free : !cir.ptr<!cir.func<!void (!cir.ptr<!void>)>> loc(#loc301)
        %20 = cir.load %11 : !cir.ptr<!cir.ptr<!s32i>>, !cir.ptr<!s32i> loc(#loc302)
        %21 = cir.cast(bitcast, %20 : !cir.ptr<!s32i>), !cir.ptr<!void> loc(#loc302)
        cir.call @free(%21) : (!cir.ptr<!void>) -> () extra(#fn_attr) loc(#loc301)
      } loc(#loc561)
    } loc(#loc559)
    cir.return loc(#loc226)
  } loc(#loc553)
  cir.global "private" constant cir_private dsolocal @".str.6" = #cir.const_array<"ERROR: Array index is out-of-bounds\00" : !cir.array<!s8i x 36>> : !cir.array<!s8i x 36> {alignment = 1 : i64} loc(#loc303)
  cir.func no_proto internal private @goodB2G() extra(#fn_attr1) {
    %0 = cir.alloca !s32i, !cir.ptr<!s32i>, ["data"] {alignment = 4 : i64} loc(#loc586)
    %1 = cir.alloca !ty_CWE122_Heap_Based_Buffer_Overflow__c_CWE129_connect_socket_34_unionType, !cir.ptr<!ty_CWE122_Heap_Based_Buffer_Overflow__c_CWE129_connect_socket_34_unionType>, ["myUnion"] {alignment = 4 : i64} loc(#loc587)
    %2 = cir.const #cir.int<1> : !s32i loc(#loc310)
    %3 = cir.unary(minus, %2) : !s32i, !s32i loc(#loc311)
    cir.store %3, %0 : !s32i, !cir.ptr<!s32i> loc(#loc588)
    cir.scope {
      %6 = cir.alloca !s32i, !cir.ptr<!s32i>, ["recvResult"] {alignment = 4 : i64} loc(#loc590)
      %7 = cir.alloca !ty_sockaddr_in, !cir.ptr<!ty_sockaddr_in>, ["service"] {alignment = 4 : i64} loc(#loc591)
      %8 = cir.alloca !s32i, !cir.ptr<!s32i>, ["connectSocket", init] {alignment = 4 : i64} loc(#loc592)
      %9 = cir.alloca !cir.array<!s8i x 14>, !cir.ptr<!cir.array<!s8i x 14>>, ["inputBuffer"] {alignment = 1 : i64} loc(#loc593)
      %10 = cir.const #cir.int<1> : !s32i loc(#loc320)
      %11 = cir.unary(minus, %10) : !s32i, !s32i loc(#loc320)
      cir.store %11, %8 : !s32i, !cir.ptr<!s32i> loc(#loc592)
      cir.scope {
        cir.do {
          %12 = cir.const #cir.int<2> : !s32i loc(#loc325)
          %13 = cir.const #cir.int<1> : !s32i loc(#loc326)
          %14 = cir.const #cir.int<6> : !s32i loc(#loc327)
          %15 = cir.call @socket(%12, %13, %14) : (!s32i, !s32i, !s32i) -> !s32i extra(#fn_attr) loc(#loc328)
          cir.store %15, %8 : !s32i, !cir.ptr<!s32i> loc(#loc595)
          cir.scope {
            %54 = cir.load %8 : !cir.ptr<!s32i>, !s32i loc(#loc333)
            %55 = cir.const #cir.int<1> : !s32i loc(#loc334)
            %56 = cir.unary(minus, %55) : !s32i, !s32i loc(#loc334)
            %57 = cir.cmp(eq, %54, %56) : !s32i, !cir.bool loc(#loc597)
            cir.if %57 {
              cir.break loc(#loc336)
            } loc(#loc598)
          } loc(#loc596)
          %16 = cir.cast(bitcast, %7 : !cir.ptr<!ty_sockaddr_in>), !cir.ptr<!void> loc(#loc599)
          %17 = cir.const #cir.int<0> : !s32i loc(#loc339)
          %18 = cir.const #cir.int<16> : !u64i loc(#loc600)
          cir.libc.memset %18 bytes from %16 set to %17 : !cir.ptr<!void>, !s32i, !u64i loc(#loc601)
          %19 = cir.const #cir.int<2> : !s32i loc(#loc344)
          %20 = cir.cast(integral, %19 : !s32i), !u16i loc(#loc344)
          %21 = cir.get_member %7[0] {name = "sin_family"} : !cir.ptr<!ty_sockaddr_in> -> !cir.ptr<!u16i> loc(#loc68)
          cir.store %20, %21 : !u16i, !cir.ptr<!u16i> loc(#loc602)
          %22 = cir.get_global @".str" : !cir.ptr<!cir.array<!s8i x 10>> loc(#loc346)
          %23 = cir.cast(array_to_ptrdecay, %22 : !cir.ptr<!cir.array<!s8i x 10>>), !cir.ptr<!s8i> loc(#loc346)
          %24 = cir.call @inet_addr(%23) : (!cir.ptr<!s8i>) -> !u32i extra(#fn_attr) loc(#loc347)
          %25 = cir.get_member %7[2] {name = "sin_addr"} : !cir.ptr<!ty_sockaddr_in> -> !cir.ptr<!ty_in_addr> loc(#loc71)
          %26 = cir.get_member %25[0] {name = "s_addr"} : !cir.ptr<!ty_in_addr> -> !cir.ptr<!u32i> loc(#loc72)
          cir.store %24, %26 : !u32i, !cir.ptr<!u32i> loc(#loc603)
          %27 = cir.const #cir.int<27015> : !s32i loc(#loc350)
          %28 = cir.cast(integral, %27 : !s32i), !u16i loc(#loc350)
          %29 = cir.call @htons(%28) : (!u16i) -> !u16i extra(#fn_attr) loc(#loc351)
          %30 = cir.get_member %7[1] {name = "sin_port"} : !cir.ptr<!ty_sockaddr_in> -> !cir.ptr<!u16i> loc(#loc77)
          cir.store %29, %30 : !u16i, !cir.ptr<!u16i> loc(#loc604)
          cir.scope {
            %54 = cir.load %8 : !cir.ptr<!s32i>, !s32i loc(#loc356)
            %55 = cir.cast(bitcast, %7 : !cir.ptr<!ty_sockaddr_in>), !cir.ptr<!ty_sockaddr> loc(#loc606)
            %56 = cir.const #cir.int<16> : !u64i loc(#loc607)
            %57 = cir.cast(integral, %56 : !u64i), !u32i loc(#loc607)
            %58 = cir.call @connect(%54, %55, %57) : (!s32i, !cir.ptr<!ty_sockaddr>, !u32i) -> !s32i loc(#loc361)
            %59 = cir.const #cir.int<1> : !s32i loc(#loc362)
            %60 = cir.unary(minus, %59) : !s32i, !s32i loc(#loc362)
            %61 = cir.cmp(eq, %58, %60) : !s32i, !cir.bool loc(#loc608)
            cir.if %61 {
              cir.break loc(#loc364)
            } loc(#loc609)
          } loc(#loc605)
          %31 = cir.load %8 : !cir.ptr<!s32i>, !s32i loc(#loc365)
          %32 = cir.cast(array_to_ptrdecay, %9 : !cir.ptr<!cir.array<!s8i x 14>>), !cir.ptr<!s8i> loc(#loc366)
          %33 = cir.cast(bitcast, %32 : !cir.ptr<!s8i>), !cir.ptr<!void> loc(#loc366)
          %34 = cir.const #cir.int<3> : !s32i loc(#loc367)
          %35 = cir.cast(integral, %34 : !s32i), !u64i loc(#loc367)
          %36 = cir.const #cir.int<4> : !u64i loc(#loc367)
          %37 = cir.binop(mul, %35, %36) : !u64i loc(#loc367)
          %38 = cir.const #cir.int<2> : !s32i loc(#loc367)
          %39 = cir.cast(integral, %38 : !s32i), !u64i loc(#loc367)
          %40 = cir.binop(add, %37, %39) : !u64i loc(#loc367)
          %41 = cir.const #cir.int<1> : !s32i loc(#loc368)
          %42 = cir.cast(integral, %41 : !s32i), !u64i loc(#loc368)
          %43 = cir.binop(sub, %40, %42) : !u64i loc(#loc610)
          %44 = cir.const #cir.int<0> : !s32i loc(#loc369)
          %45 = cir.call @recv(%31, %33, %43, %44) : (!s32i, !cir.ptr<!void>, !u64i, !s32i) -> !s64i loc(#loc370)
          %46 = cir.cast(integral, %45 : !s64i), !s32i loc(#loc370)
          cir.store %46, %6 : !s32i, !cir.ptr<!s32i> loc(#loc611)
          cir.scope {
            %54 = cir.load %6 : !cir.ptr<!s32i>, !s32i loc(#loc375)
            %55 = cir.const #cir.int<1> : !s32i loc(#loc376)
            %56 = cir.unary(minus, %55) : !s32i, !s32i loc(#loc376)
            %57 = cir.cmp(eq, %54, %56) : !s32i, !cir.bool loc(#loc613)
            %58 = cir.ternary(%57, true {
              %59 = cir.const #true loc(#loc377)
              cir.yield %59 : !cir.bool loc(#loc377)
            }, false {
              %59 = cir.load %6 : !cir.ptr<!s32i>, !s32i loc(#loc378)
              %60 = cir.const #cir.int<0> : !s32i loc(#loc379)
              %61 = cir.cmp(eq, %59, %60) : !s32i, !cir.bool loc(#loc614)
              %62 = cir.ternary(%61, true {
                %63 = cir.const #true loc(#loc377)
                cir.yield %63 : !cir.bool loc(#loc377)
              }, false {
                %63 = cir.const #false loc(#loc377)
                cir.yield %63 : !cir.bool loc(#loc377)
              }) : (!cir.bool) -> !cir.bool loc(#loc377)
              cir.yield %62 : !cir.bool loc(#loc377)
            }) : (!cir.bool) -> !cir.bool loc(#loc377)
            cir.if %58 {
              cir.break loc(#loc381)
            } loc(#loc615)
          } loc(#loc612)
          %47 = cir.const #cir.int<0> : !s32i loc(#loc382)
          %48 = cir.cast(integral, %47 : !s32i), !s8i loc(#loc382)
          %49 = cir.load %6 : !cir.ptr<!s32i>, !s32i loc(#loc383)
          %50 = cir.cast(array_to_ptrdecay, %9 : !cir.ptr<!cir.array<!s8i x 14>>), !cir.ptr<!s8i> loc(#loc384)
          %51 = cir.ptr_stride(%50 : !cir.ptr<!s8i>, %49 : !s32i), !cir.ptr<!s8i> loc(#loc384)
          cir.store %48, %51 : !s8i, !cir.ptr<!s8i> loc(#loc616)
          %52 = cir.cast(array_to_ptrdecay, %9 : !cir.ptr<!cir.array<!s8i x 14>>), !cir.ptr<!s8i> loc(#loc385)
          %53 = cir.call @atoi(%52) : (!cir.ptr<!s8i>) -> !s32i extra(#fn_attr) loc(#loc386)
          cir.store %53, %0 : !s32i, !cir.ptr<!s32i> loc(#loc617)
          cir.yield loc(#loc324)
        } while {
          %12 = cir.const #cir.int<0> : !s32i loc(#loc389)
          %13 = cir.cast(int_to_bool, %12 : !s32i), !cir.bool loc(#loc389)
          cir.condition(%13) loc(#loc389)
        } loc(#loc594)
      } loc(#loc594)
      cir.scope {
        %12 = cir.load %8 : !cir.ptr<!s32i>, !s32i loc(#loc392)
        %13 = cir.const #cir.int<1> : !s32i loc(#loc393)
        %14 = cir.unary(minus, %13) : !s32i, !s32i loc(#loc393)
        %15 = cir.cmp(ne, %12, %14) : !s32i, !cir.bool loc(#loc619)
        cir.if %15 {
          %16 = cir.load %8 : !cir.ptr<!s32i>, !s32i loc(#loc395)
          %17 = cir.call @close(%16) : (!s32i) -> !s32i loc(#loc396)
        } loc(#loc620)
      } loc(#loc618)
    } loc(#loc589)
    %4 = cir.load %0 : !cir.ptr<!s32i>, !s32i loc(#loc397)
    %5 = cir.get_member %1[0] {name = "unionFirst"} : !cir.ptr<!ty_CWE122_Heap_Based_Buffer_Overflow__c_CWE129_connect_socket_34_unionType> -> !cir.ptr<!s32i> loc(#loc124)
    cir.store %4, %5 : !s32i, !cir.ptr<!s32i> loc(#loc621)
    cir.scope {
      %6 = cir.alloca !s32i, !cir.ptr<!s32i>, ["data", init] {alignment = 4 : i64} loc(#loc623)
      %7 = cir.get_member %1[1] {name = "unionSecond"} : !cir.ptr<!ty_CWE122_Heap_Based_Buffer_Overflow__c_CWE129_connect_socket_34_unionType> -> !cir.ptr<!s32i> loc(#loc130)
      %8 = cir.load %7 : !cir.ptr<!s32i>, !s32i loc(#loc402)
      cir.store %8, %6 : !s32i, !cir.ptr<!s32i> loc(#loc623)
      cir.scope {
        %9 = cir.alloca !s32i, !cir.ptr<!s32i>, ["i"] {alignment = 4 : i64} loc(#loc625)
        %10 = cir.alloca !cir.ptr<!s32i>, !cir.ptr<!cir.ptr<!s32i>>, ["buffer", init] {alignment = 8 : i64} loc(#loc626)
        %11 = cir.get_global @malloc : !cir.ptr<!cir.func<!cir.ptr<!void> (!u64i)>> loc(#loc409)
        %12 = cir.const #cir.int<10> : !s32i loc(#loc410)
        %13 = cir.cast(integral, %12 : !s32i), !u64i loc(#loc410)
        %14 = cir.const #cir.int<4> : !u64i loc(#loc627)
        %15 = cir.binop(mul, %13, %14) : !u64i loc(#loc628)
        %16 = cir.call @malloc(%15) : (!u64i) -> !cir.ptr<!void> extra(#fn_attr) loc(#loc409)
        %17 = cir.cast(bitcast, %16 : !cir.ptr<!void>), !cir.ptr<!s32i> loc(#loc629)
        cir.store %17, %10 : !cir.ptr<!s32i>, !cir.ptr<!cir.ptr<!s32i>> loc(#loc626)
        cir.scope {
          %21 = cir.load %10 : !cir.ptr<!cir.ptr<!s32i>>, !cir.ptr<!s32i> loc(#loc415)
          %22 = cir.const #cir.ptr<null> : !cir.ptr<!void> loc(#loc416)
          %23 = cir.cast(bitcast, %22 : !cir.ptr<!void>), !cir.ptr<!s32i> loc(#loc416)
          %24 = cir.cmp(eq, %21, %23) : !cir.ptr<!s32i>, !cir.bool loc(#loc631)
          cir.if %24 {
            %25 = cir.get_global @exit : !cir.ptr<!cir.func<!void (!s32i)>> loc(#loc418)
            %26 = cir.const #cir.int<1> : !s32i loc(#loc419)
            %27 = cir.unary(minus, %26) : !s32i, !s32i loc(#loc420)
            cir.call @exit(%27) : (!s32i) -> () extra(#fn_attr) loc(#loc418)
          } loc(#loc632)
        } loc(#loc630)
        cir.scope {
          %21 = cir.const #cir.int<0> : !s32i loc(#loc423)
          cir.store %21, %9 : !s32i, !cir.ptr<!s32i> loc(#loc634)
          cir.for : cond {
            %22 = cir.load %9 : !cir.ptr<!s32i>, !s32i loc(#loc425)
            %23 = cir.const #cir.int<10> : !s32i loc(#loc426)
            %24 = cir.cmp(lt, %22, %23) : !s32i, !cir.bool loc(#loc635)
            cir.condition(%24) loc(#loc427)
          } body {
            cir.scope {
              %22 = cir.const #cir.int<0> : !s32i loc(#loc429)
              %23 = cir.load %10 : !cir.ptr<!cir.ptr<!s32i>>, !cir.ptr<!s32i> loc(#loc430)
              %24 = cir.load %9 : !cir.ptr<!s32i>, !s32i loc(#loc431)
              %25 = cir.ptr_stride(%23 : !cir.ptr<!s32i>, %24 : !s32i), !cir.ptr<!s32i> loc(#loc432)
              cir.store %22, %25 : !s32i, !cir.ptr<!s32i> loc(#loc637)
            } loc(#loc636)
            cir.yield loc(#loc422)
          } step {
            %22 = cir.load %9 : !cir.ptr<!s32i>, !s32i loc(#loc433)
            %23 = cir.unary(inc, %22) : !s32i, !s32i loc(#loc434)
            cir.store %23, %9 : !s32i, !cir.ptr<!s32i> loc(#loc638)
            cir.yield loc(#loc633)
          } loc(#loc633)
        } loc(#loc633)
        cir.scope {
          %21 = cir.load %6 : !cir.ptr<!s32i>, !s32i loc(#loc437)
          %22 = cir.const #cir.int<0> : !s32i loc(#loc438)
          %23 = cir.cmp(ge, %21, %22) : !s32i, !cir.bool loc(#loc640)
          %24 = cir.ternary(%23, true {
            %25 = cir.load %6 : !cir.ptr<!s32i>, !s32i loc(#loc440)
            %26 = cir.const #cir.int<10> : !s32i loc(#loc441)
            %27 = cir.cmp(lt, %25, %26) : !s32i, !cir.bool loc(#loc641)
            %28 = cir.ternary(%27, true {
              %29 = cir.const #true loc(#loc439)
              cir.yield %29 : !cir.bool loc(#loc439)
            }, false {
              %29 = cir.const #false loc(#loc439)
              cir.yield %29 : !cir.bool loc(#loc439)
            }) : (!cir.bool) -> !cir.bool loc(#loc439)
            cir.yield %28 : !cir.bool loc(#loc439)
          }, false {
            %25 = cir.const #false loc(#loc439)
            cir.yield %25 : !cir.bool loc(#loc439)
          }) : (!cir.bool) -> !cir.bool loc(#loc439)
          cir.if %24 {
            %25 = cir.const #cir.int<1> : !s32i loc(#loc446)
            %26 = cir.load %10 : !cir.ptr<!cir.ptr<!s32i>>, !cir.ptr<!s32i> loc(#loc447)
            %27 = cir.load %6 : !cir.ptr<!s32i>, !s32i loc(#loc448)
            %28 = cir.ptr_stride(%26 : !cir.ptr<!s32i>, %27 : !s32i), !cir.ptr<!s32i> loc(#loc449)
            cir.store %25, %28 : !s32i, !cir.ptr<!s32i> loc(#loc643)
            cir.scope {
              %29 = cir.const #cir.int<0> : !s32i loc(#loc452)
              cir.store %29, %9 : !s32i, !cir.ptr<!s32i> loc(#loc645)
              cir.for : cond {
                %30 = cir.load %9 : !cir.ptr<!s32i>, !s32i loc(#loc454)
                %31 = cir.const #cir.int<10> : !s32i loc(#loc455)
                %32 = cir.cmp(lt, %30, %31) : !s32i, !cir.bool loc(#loc646)
                cir.condition(%32) loc(#loc456)
              } body {
                cir.scope {
                  %30 = cir.load %10 : !cir.ptr<!cir.ptr<!s32i>>, !cir.ptr<!s32i> loc(#loc458)
                  %31 = cir.load %9 : !cir.ptr<!s32i>, !s32i loc(#loc459)
                  %32 = cir.ptr_stride(%30 : !cir.ptr<!s32i>, %31 : !s32i), !cir.ptr<!s32i> loc(#loc460)
                  %33 = cir.load %32 : !cir.ptr<!s32i>, !s32i loc(#loc458)
                  cir.call @printIntLine(%33) : (!s32i) -> () loc(#loc461)
                } loc(#loc647)
                cir.yield loc(#loc451)
              } step {
                %30 = cir.load %9 : !cir.ptr<!s32i>, !s32i loc(#loc462)
                %31 = cir.unary(inc, %30) : !s32i, !s32i loc(#loc463)
                cir.store %31, %9 : !s32i, !cir.ptr<!s32i> loc(#loc648)
                cir.yield loc(#loc644)
              } loc(#loc644)
            } loc(#loc644)
          } else {
            %25 = cir.get_global @".str.6" : !cir.ptr<!cir.array<!s8i x 36>> loc(#loc303)
            %26 = cir.cast(array_to_ptrdecay, %25 : !cir.ptr<!cir.array<!s8i x 36>>), !cir.ptr<!s8i> loc(#loc303)
            cir.call @printLine(%26) : (!cir.ptr<!s8i>) -> () loc(#loc464)
          } loc(#loc642)
        } loc(#loc639)
        %18 = cir.get_global @free : !cir.ptr<!cir.func<!void (!cir.ptr<!void>)>> loc(#loc465)
        %19 = cir.load %10 : !cir.ptr<!cir.ptr<!s32i>>, !cir.ptr<!s32i> loc(#loc466)
        %20 = cir.cast(bitcast, %19 : !cir.ptr<!s32i>), !cir.ptr<!void> loc(#loc466)
        cir.call @free(%20) : (!cir.ptr<!void>) -> () extra(#fn_attr) loc(#loc465)
      } loc(#loc624)
    } loc(#loc622)
    cir.return loc(#loc305)
  } loc(#loc585)
} loc(#loc)
#loc = loc("/home/ladisgin/git_proj/juliet-c/testcases/CWE122_Heap_Based_Buffer_Overflow/s06/CWE122_Heap_Based_Buffer_Overflow__c_CWE129_connect_socket_34.c":0:0)
#loc1 = loc("/usr/include/sys/socket.h":102:1)
#loc2 = loc("/usr/include/sys/socket.h":102:62)
#loc3 = loc("/usr/include/arpa/inet.h":34:1)
#loc4 = loc("/usr/include/arpa/inet.h":34:47)
#loc5 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_connect_socket_34.c":82:49)
#loc6 = loc("/usr/include/netinet/in.h":404:1)
#loc7 = loc("/usr/include/netinet/in.h":405:40)
#loc8 = loc("/usr/include/sys/socket.h":126:1)
#loc9 = loc("/usr/include/sys/socket.h":126:75)
#loc10 = loc("/usr/include/sys/socket.h":145:1)
#loc11 = loc("/usr/include/sys/socket.h":145:68)
#loc12 = loc("/usr/include/stdlib.h":105:1)
#loc13 = loc("/usr/include/stdlib.h":106:33)
#loc14 = loc("/usr/include/unistd.h":358:1)
#loc15 = loc("/usr/include/unistd.h":358:27)
#loc16 = loc("/usr/include/stdlib.h":672:1)
#loc17 = loc("/usr/include/stdlib.h":672:45)
#loc18 = loc("/usr/include/stdlib.h":756:1)
#loc19 = loc("/usr/include/stdlib.h":756:70)
#loc20 = loc("../../../testcasesupport/std_testcase_io.h":18:1)
#loc21 = loc("../../../testcasesupport/std_testcase_io.h":18:33)
#loc22 = loc("../../../testcasesupport/std_testcase_io.h":14:1)
#loc23 = loc("../../../testcasesupport/std_testcase_io.h":14:33)
#loc24 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_connect_socket_34.c":137:27)
#loc25 = loc("/usr/include/stdlib.h":687:1)
#loc26 = loc("/usr/include/stdlib.h":687:32)
#loc27 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_connect_socket_34.c":50:1)
#loc28 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_connect_socket_34.c":142:1)
#loc29 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_connect_socket_34.c":52:5)
#loc30 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_connect_socket_34.c":52:9)
#loc31 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_connect_socket_34.c":53:5)
#loc32 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_connect_socket_34.c":53:77)
#loc33 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_connect_socket_34.c":55:13)
#loc34 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_connect_socket_34.c":55:12)
#loc35 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_connect_socket_34.c":55:5)
#loc36 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_connect_socket_34.c":56:5)
#loc37 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_connect_socket_34.c":111:5)
#loc38 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_connect_socket_34.c":61:9)
#loc39 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_connect_socket_34.c":61:13)
#loc40 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_connect_socket_34.c":62:9)
#loc41 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_connect_socket_34.c":62:28)
#loc42 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_connect_socket_34.c":63:9)
#loc43 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_connect_socket_34.c":63:32)
#loc44 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_connect_socket_34.c":64:9)
#loc45 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_connect_socket_34.c":64:41)
#loc46 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_connect_socket_34.c":65:9)
#loc47 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_connect_socket_34.c":100:17)
#loc48 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_connect_socket_34.c":75:36)
#loc49 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_connect_socket_34.c":75:45)
#loc50 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_connect_socket_34.c":75:58)
#loc51 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_connect_socket_34.c":75:29)
#loc52 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_connect_socket_34.c":75:13)
#loc53 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_connect_socket_34.c":75:69)
#loc54 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_connect_socket_34.c":76:13)
#loc55 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_connect_socket_34.c":79:13)
#loc56 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_connect_socket_34.c":76:17)
#loc57 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_connect_socket_34.c":76:34)
#loc58 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_connect_socket_34.c":77:13)
#loc59 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_connect_socket_34.c":78:17)
#loc60 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_connect_socket_34.c":80:20)
#loc61 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_connect_socket_34.c":80:21)
#loc62 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_connect_socket_34.c":80:30)
#loc63 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_connect_socket_34.c":80:33)
#loc64 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_connect_socket_34.c":80:47)
#loc65 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_connect_socket_34.c":80:13)
#loc66 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_connect_socket_34.c":80:48)
#loc67 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_connect_socket_34.c":81:34)
#loc68 = loc("/usr/include/netinet/in.h":249:5)
#loc69 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_connect_socket_34.c":81:13)
#loc70 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_connect_socket_34.c":82:39)
#loc71 = loc("/usr/include/netinet/in.h":251:20)
#loc72 = loc("/usr/include/netinet/in.h":33:15)
#loc73 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_connect_socket_34.c":82:13)
#loc74 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_connect_socket_34.c":82:59)
#loc75 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_connect_socket_34.c":83:38)
#loc76 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_connect_socket_34.c":83:32)
#loc77 = loc("/usr/include/netinet/in.h":250:15)
#loc78 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_connect_socket_34.c":83:13)
#loc79 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_connect_socket_34.c":83:46)
#loc80 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_connect_socket_34.c":84:13)
#loc81 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_connect_socket_34.c":87:13)
#loc82 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_connect_socket_34.c":84:25)
#loc83 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_connect_socket_34.c":84:58)
#loc84 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_connect_socket_34.c":84:59)
#loc85 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_connect_socket_34.c":84:68)
#loc86 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_connect_socket_34.c":84:82)
#loc87 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_connect_socket_34.c":84:17)
#loc88 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_connect_socket_34.c":84:88)
#loc89 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_connect_socket_34.c":85:13)
#loc90 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_connect_socket_34.c":86:17)
#loc91 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_connect_socket_34.c":90:31)
#loc92 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_connect_socket_34.c":90:46)
#loc93 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_connect_socket_34.c":90:59)
#loc94 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_connect_socket_34.c":90:77)
#loc95 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_connect_socket_34.c":90:80)
#loc96 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_connect_socket_34.c":90:26)
#loc97 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_connect_socket_34.c":90:13)
#loc98 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_connect_socket_34.c":90:81)
#loc99 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_connect_socket_34.c":91:13)
#loc100 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_connect_socket_34.c":94:13)
#loc101 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_connect_socket_34.c":91:17)
#loc102 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_connect_socket_34.c":91:31)
#loc103 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_connect_socket_34.c":91:44)
#loc104 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_connect_socket_34.c":91:47)
#loc105 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_connect_socket_34.c":91:61)
#loc106 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_connect_socket_34.c":92:13)
#loc107 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_connect_socket_34.c":93:17)
#loc108 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_connect_socket_34.c":96:39)
#loc109 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_connect_socket_34.c":96:25)
#loc110 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_connect_socket_34.c":96:13)
#loc111 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_connect_socket_34.c":98:25)
#loc112 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_connect_socket_34.c":98:20)
#loc113 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_connect_socket_34.c":98:13)
#loc114 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_connect_socket_34.c":98:36)
#loc115 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_connect_socket_34.c":100:16)
#loc116 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_connect_socket_34.c":101:9)
#loc117 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_connect_socket_34.c":104:9)
#loc118 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_connect_socket_34.c":101:13)
#loc119 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_connect_socket_34.c":101:30)
#loc120 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_connect_socket_34.c":102:9)
#loc121 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_connect_socket_34.c":103:26)
#loc122 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_connect_socket_34.c":103:13)
#loc123 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_connect_socket_34.c":112:26)
#loc124 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_connect_socket_34.c":44:9)
#loc125 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_connect_socket_34.c":112:5)
#loc126 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_connect_socket_34.c":113:5)
#loc127 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_connect_socket_34.c":141:5)
#loc128 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_connect_socket_34.c":114:9)
#loc129 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_connect_socket_34.c":114:28)
#loc130 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_connect_socket_34.c":45:9)
#loc131 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_connect_socket_34.c":115:9)
#loc132 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_connect_socket_34.c":140:9)
#loc133 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_connect_socket_34.c":116:13)
#loc134 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_connect_socket_34.c":116:17)
#loc135 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_connect_socket_34.c":117:13)
#loc136 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_connect_socket_34.c":117:58)
#loc137 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_connect_socket_34.c":117:35)
#loc138 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_connect_socket_34.c":117:42)
#loc139 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_connect_socket_34.c":117:47)
#loc140 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_connect_socket_34.c":117:57)
#loc141 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_connect_socket_34.c":118:13)
#loc142 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_connect_socket_34.c":118:43)
#loc143 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_connect_socket_34.c":118:17)
#loc144 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_connect_socket_34.c":118:27)
#loc145 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_connect_socket_34.c":118:33)
#loc146 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_connect_socket_34.c":118:34)
#loc147 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_connect_socket_34.c":118:40)
#loc148 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_connect_socket_34.c":118:39)
#loc149 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_connect_socket_34.c":120:13)
#loc150 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_connect_socket_34.c":123:13)
#loc151 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_connect_socket_34.c":120:22)
#loc152 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_connect_socket_34.c":120:18)
#loc153 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_connect_socket_34.c":120:25)
#loc154 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_connect_socket_34.c":120:29)
#loc155 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_connect_socket_34.c":120:27)
#loc156 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_connect_socket_34.c":121:13)
#loc157 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_connect_socket_34.c":122:29)
#loc158 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_connect_socket_34.c":122:17)
#loc159 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_connect_socket_34.c":122:24)
#loc160 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_connect_socket_34.c":122:25)
#loc161 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_connect_socket_34.c":120:34)
#loc162 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_connect_socket_34.c":120:33)
#loc163 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_connect_socket_34.c":126:13)
#loc164 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_connect_socket_34.c":138:13)
#loc165 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_connect_socket_34.c":126:17)
#loc166 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_connect_socket_34.c":126:25)
#loc167 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_connect_socket_34.c":127:13)
#loc168 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_connect_socket_34.c":134:13)
#loc169 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_connect_socket_34.c":136:13)
#loc170 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_connect_socket_34.c":128:32)
#loc171 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_connect_socket_34.c":128:17)
#loc172 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_connect_socket_34.c":128:24)
#loc173 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_connect_socket_34.c":128:28)
#loc174 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_connect_socket_34.c":130:17)
#loc175 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_connect_socket_34.c":133:17)
#loc176 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_connect_socket_34.c":130:25)
#loc177 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_connect_socket_34.c":130:21)
#loc178 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_connect_socket_34.c":130:28)
#loc179 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_connect_socket_34.c":130:32)
#loc180 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_connect_socket_34.c":130:30)
#loc181 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_connect_socket_34.c":131:17)
#loc182 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_connect_socket_34.c":132:34)
#loc183 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_connect_socket_34.c":132:41)
#loc184 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_connect_socket_34.c":132:42)
#loc185 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_connect_socket_34.c":132:21)
#loc186 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_connect_socket_34.c":130:37)
#loc187 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_connect_socket_34.c":130:36)
#loc188 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_connect_socket_34.c":137:17)
#loc189 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_connect_socket_34.c":139:13)
#loc190 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_connect_socket_34.c":139:18)
#loc191 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_connect_socket_34.c":284:1)
#loc192 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_connect_socket_34.c":288:1)
#loc193 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_connect_socket_34.c":286:5)
#loc194 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_connect_socket_34.c":286:13)
#loc195 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_connect_socket_34.c":287:5)
#loc196 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_connect_socket_34.c":287:13)
#loc197 = loc("/usr/include/stdlib.h":575:1)
#loc198 = loc("/usr/include/stdlib.h":575:41)
#loc199 = loc("/usr/include/time.h":76:1)
#loc200 = loc("/usr/include/time.h":76:38)
#loc201 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_connect_socket_34.c":303:15)
#loc202 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_connect_socket_34.c":305:15)
#loc203 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_connect_socket_34.c":308:15)
#loc204 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_connect_socket_34.c":310:15)
#loc205 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_connect_socket_34.c":298:1)
#loc206 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_connect_socket_34.c":313:1)
#loc211 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_connect_socket_34.c":299:1)
#loc212 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_connect_socket_34.c":301:27)
#loc213 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_connect_socket_34.c":301:22)
#loc214 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_connect_socket_34.c":301:5)
#loc215 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_connect_socket_34.c":303:5)
#loc216 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_connect_socket_34.c":304:5)
#loc217 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_connect_socket_34.c":304:72)
#loc218 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_connect_socket_34.c":305:5)
#loc219 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_connect_socket_34.c":308:5)
#loc220 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_connect_socket_34.c":309:5)
#loc221 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_connect_socket_34.c":309:71)
#loc222 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_connect_socket_34.c":310:5)
#loc223 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_connect_socket_34.c":312:12)
#loc224 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_connect_socket_34.c":312:5)
#loc225 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_connect_socket_34.c":149:1)
#loc226 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_connect_socket_34.c":188:1)
#loc227 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_connect_socket_34.c":151:5)
#loc228 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_connect_socket_34.c":151:9)
#loc229 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_connect_socket_34.c":152:5)
#loc230 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_connect_socket_34.c":152:77)
#loc231 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_connect_socket_34.c":154:13)
#loc232 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_connect_socket_34.c":154:12)
#loc233 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_connect_socket_34.c":154:5)
#loc234 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_connect_socket_34.c":157:12)
#loc235 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_connect_socket_34.c":157:5)
#loc236 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_connect_socket_34.c":158:26)
#loc237 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_connect_socket_34.c":158:5)
#loc238 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_connect_socket_34.c":159:5)
#loc239 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_connect_socket_34.c":187:5)
#loc240 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_connect_socket_34.c":160:9)
#loc241 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_connect_socket_34.c":160:28)
#loc242 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_connect_socket_34.c":161:9)
#loc243 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_connect_socket_34.c":186:9)
#loc244 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_connect_socket_34.c":162:13)
#loc245 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_connect_socket_34.c":162:17)
#loc246 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_connect_socket_34.c":163:13)
#loc247 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_connect_socket_34.c":163:58)
#loc248 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_connect_socket_34.c":163:35)
#loc249 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_connect_socket_34.c":163:42)
#loc250 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_connect_socket_34.c":163:47)
#loc251 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_connect_socket_34.c":163:57)
#loc252 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_connect_socket_34.c":164:13)
#loc253 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_connect_socket_34.c":164:43)
#loc254 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_connect_socket_34.c":164:17)
#loc255 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_connect_socket_34.c":164:27)
#loc256 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_connect_socket_34.c":164:33)
#loc257 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_connect_socket_34.c":164:34)
#loc258 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_connect_socket_34.c":164:40)
#loc259 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_connect_socket_34.c":164:39)
#loc260 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_connect_socket_34.c":166:13)
#loc261 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_connect_socket_34.c":169:13)
#loc262 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_connect_socket_34.c":166:22)
#loc263 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_connect_socket_34.c":166:18)
#loc264 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_connect_socket_34.c":166:25)
#loc265 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_connect_socket_34.c":166:29)
#loc266 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_connect_socket_34.c":166:27)
#loc267 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_connect_socket_34.c":167:13)
#loc268 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_connect_socket_34.c":168:29)
#loc269 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_connect_socket_34.c":168:17)
#loc270 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_connect_socket_34.c":168:24)
#loc271 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_connect_socket_34.c":168:25)
#loc272 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_connect_socket_34.c":166:34)
#loc273 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_connect_socket_34.c":166:33)
#loc274 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_connect_socket_34.c":172:13)
#loc275 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_connect_socket_34.c":184:13)
#loc276 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_connect_socket_34.c":172:17)
#loc277 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_connect_socket_34.c":172:25)
#loc278 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_connect_socket_34.c":173:13)
#loc279 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_connect_socket_34.c":180:13)
#loc280 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_connect_socket_34.c":182:13)
#loc281 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_connect_socket_34.c":174:32)
#loc282 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_connect_socket_34.c":174:17)
#loc283 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_connect_socket_34.c":174:24)
#loc284 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_connect_socket_34.c":174:28)
#loc285 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_connect_socket_34.c":176:17)
#loc286 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_connect_socket_34.c":179:17)
#loc287 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_connect_socket_34.c":176:25)
#loc288 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_connect_socket_34.c":176:21)
#loc289 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_connect_socket_34.c":176:28)
#loc290 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_connect_socket_34.c":176:32)
#loc291 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_connect_socket_34.c":176:30)
#loc292 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_connect_socket_34.c":177:17)
#loc293 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_connect_socket_34.c":178:34)
#loc294 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_connect_socket_34.c":178:41)
#loc295 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_connect_socket_34.c":178:42)
#loc296 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_connect_socket_34.c":178:21)
#loc297 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_connect_socket_34.c":176:37)
#loc298 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_connect_socket_34.c":176:36)
#loc299 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_connect_socket_34.c":183:27)
#loc300 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_connect_socket_34.c":183:17)
#loc301 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_connect_socket_34.c":185:13)
#loc302 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_connect_socket_34.c":185:18)
#loc303 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_connect_socket_34.c":277:27)
#loc304 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_connect_socket_34.c":191:1)
#loc305 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_connect_socket_34.c":282:1)
#loc306 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_connect_socket_34.c":193:5)
#loc307 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_connect_socket_34.c":193:9)
#loc308 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_connect_socket_34.c":194:5)
#loc309 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_connect_socket_34.c":194:77)
#loc310 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_connect_socket_34.c":196:13)
#loc311 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_connect_socket_34.c":196:12)
#loc312 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_connect_socket_34.c":196:5)
#loc313 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_connect_socket_34.c":197:5)
#loc314 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_connect_socket_34.c":252:5)
#loc315 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_connect_socket_34.c":202:9)
#loc316 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_connect_socket_34.c":202:13)
#loc317 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_connect_socket_34.c":203:9)
#loc318 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_connect_socket_34.c":203:28)
#loc319 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_connect_socket_34.c":204:9)
#loc320 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_connect_socket_34.c":204:32)
#loc321 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_connect_socket_34.c":205:9)
#loc322 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_connect_socket_34.c":205:41)
#loc323 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_connect_socket_34.c":206:9)
#loc324 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_connect_socket_34.c":241:17)
#loc325 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_connect_socket_34.c":216:36)
#loc326 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_connect_socket_34.c":216:45)
#loc327 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_connect_socket_34.c":216:58)
#loc328 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_connect_socket_34.c":216:29)
#loc329 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_connect_socket_34.c":216:13)
#loc330 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_connect_socket_34.c":216:69)
#loc331 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_connect_socket_34.c":217:13)
#loc332 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_connect_socket_34.c":220:13)
#loc333 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_connect_socket_34.c":217:17)
#loc334 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_connect_socket_34.c":217:34)
#loc335 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_connect_socket_34.c":218:13)
#loc336 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_connect_socket_34.c":219:17)
#loc337 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_connect_socket_34.c":221:20)
#loc338 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_connect_socket_34.c":221:21)
#loc339 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_connect_socket_34.c":221:30)
#loc340 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_connect_socket_34.c":221:33)
#loc341 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_connect_socket_34.c":221:47)
#loc342 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_connect_socket_34.c":221:13)
#loc343 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_connect_socket_34.c":221:48)
#loc344 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_connect_socket_34.c":222:34)
#loc345 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_connect_socket_34.c":222:13)
#loc346 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_connect_socket_34.c":223:49)
#loc347 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_connect_socket_34.c":223:39)
#loc348 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_connect_socket_34.c":223:13)
#loc349 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_connect_socket_34.c":223:59)
#loc350 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_connect_socket_34.c":224:38)
#loc351 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_connect_socket_34.c":224:32)
#loc352 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_connect_socket_34.c":224:13)
#loc353 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_connect_socket_34.c":224:46)
#loc354 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_connect_socket_34.c":225:13)
#loc355 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_connect_socket_34.c":228:13)
#loc356 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_connect_socket_34.c":225:25)
#loc357 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_connect_socket_34.c":225:58)
#loc358 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_connect_socket_34.c":225:59)
#loc359 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_connect_socket_34.c":225:68)
#loc360 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_connect_socket_34.c":225:82)
#loc361 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_connect_socket_34.c":225:17)
#loc362 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_connect_socket_34.c":225:88)
#loc363 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_connect_socket_34.c":226:13)
#loc364 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_connect_socket_34.c":227:17)
#loc365 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_connect_socket_34.c":231:31)
#loc366 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_connect_socket_34.c":231:46)
#loc367 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_connect_socket_34.c":231:59)
#loc368 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_connect_socket_34.c":231:77)
#loc369 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_connect_socket_34.c":231:80)
#loc370 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_connect_socket_34.c":231:26)
#loc371 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_connect_socket_34.c":231:13)
#loc372 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_connect_socket_34.c":231:81)
#loc373 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_connect_socket_34.c":232:13)
#loc374 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_connect_socket_34.c":235:13)
#loc375 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_connect_socket_34.c":232:17)
#loc376 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_connect_socket_34.c":232:31)
#loc377 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_connect_socket_34.c":232:44)
#loc378 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_connect_socket_34.c":232:47)
#loc379 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_connect_socket_34.c":232:61)
#loc380 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_connect_socket_34.c":233:13)
#loc381 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_connect_socket_34.c":234:17)
#loc382 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_connect_socket_34.c":237:39)
#loc383 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_connect_socket_34.c":237:25)
#loc384 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_connect_socket_34.c":237:13)
#loc385 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_connect_socket_34.c":239:25)
#loc386 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_connect_socket_34.c":239:20)
#loc387 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_connect_socket_34.c":239:13)
#loc388 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_connect_socket_34.c":239:36)
#loc389 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_connect_socket_34.c":241:16)
#loc390 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_connect_socket_34.c":242:9)
#loc391 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_connect_socket_34.c":245:9)
#loc392 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_connect_socket_34.c":242:13)
#loc393 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_connect_socket_34.c":242:30)
#loc394 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_connect_socket_34.c":243:9)
#loc395 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_connect_socket_34.c":244:26)
#loc396 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_connect_socket_34.c":244:13)
#loc397 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_connect_socket_34.c":253:26)
#loc398 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_connect_socket_34.c":253:5)
#loc399 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_connect_socket_34.c":254:5)
#loc400 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_connect_socket_34.c":281:5)
#loc401 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_connect_socket_34.c":255:9)
#loc402 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_connect_socket_34.c":255:28)
#loc403 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_connect_socket_34.c":256:9)
#loc404 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_connect_socket_34.c":280:9)
#loc405 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_connect_socket_34.c":257:13)
#loc406 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_connect_socket_34.c":257:17)
#loc407 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_connect_socket_34.c":258:13)
#loc408 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_connect_socket_34.c":258:58)
#loc409 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_connect_socket_34.c":258:35)
#loc410 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_connect_socket_34.c":258:42)
#loc411 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_connect_socket_34.c":258:47)
#loc412 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_connect_socket_34.c":258:57)
#loc413 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_connect_socket_34.c":259:13)
#loc414 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_connect_socket_34.c":259:43)
#loc415 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_connect_socket_34.c":259:17)
#loc416 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_connect_socket_34.c":259:27)
#loc417 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_connect_socket_34.c":259:33)
#loc418 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_connect_socket_34.c":259:34)
#loc419 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_connect_socket_34.c":259:40)
#loc420 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_connect_socket_34.c":259:39)
#loc421 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_connect_socket_34.c":261:13)
#loc422 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_connect_socket_34.c":264:13)
#loc423 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_connect_socket_34.c":261:22)
#loc424 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_connect_socket_34.c":261:18)
#loc425 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_connect_socket_34.c":261:25)
#loc426 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_connect_socket_34.c":261:29)
#loc427 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_connect_socket_34.c":261:27)
#loc428 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_connect_socket_34.c":262:13)
#loc429 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_connect_socket_34.c":263:29)
#loc430 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_connect_socket_34.c":263:17)
#loc431 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_connect_socket_34.c":263:24)
#loc432 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_connect_socket_34.c":263:25)
#loc433 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_connect_socket_34.c":261:34)
#loc434 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_connect_socket_34.c":261:33)
#loc435 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_connect_socket_34.c":266:13)
#loc436 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_connect_socket_34.c":278:13)
#loc437 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_connect_socket_34.c":266:17)
#loc438 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_connect_socket_34.c":266:25)
#loc439 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_connect_socket_34.c":266:27)
#loc440 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_connect_socket_34.c":266:30)
#loc441 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_connect_socket_34.c":266:38)
#loc442 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_connect_socket_34.c":266:40)
#loc443 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_connect_socket_34.c":267:13)
#loc444 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_connect_socket_34.c":274:13)
#loc445 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_connect_socket_34.c":276:13)
#loc446 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_connect_socket_34.c":268:32)
#loc447 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_connect_socket_34.c":268:17)
#loc448 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_connect_socket_34.c":268:24)
#loc449 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_connect_socket_34.c":268:28)
#loc450 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_connect_socket_34.c":270:17)
#loc451 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_connect_socket_34.c":273:17)
#loc452 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_connect_socket_34.c":270:25)
#loc453 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_connect_socket_34.c":270:21)
#loc454 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_connect_socket_34.c":270:28)
#loc455 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_connect_socket_34.c":270:32)
#loc456 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_connect_socket_34.c":270:30)
#loc457 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_connect_socket_34.c":271:17)
#loc458 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_connect_socket_34.c":272:34)
#loc459 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_connect_socket_34.c":272:41)
#loc460 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_connect_socket_34.c":272:42)
#loc461 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_connect_socket_34.c":272:21)
#loc462 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_connect_socket_34.c":270:37)
#loc463 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_connect_socket_34.c":270:36)
#loc464 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_connect_socket_34.c":277:17)
#loc465 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_connect_socket_34.c":279:13)
#loc466 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_connect_socket_34.c":279:18)
#loc467 = loc(fused[#loc1, #loc2])
#loc468 = loc(fused[#loc3, #loc4])
#loc469 = loc(fused[#loc6, #loc7])
#loc470 = loc(fused[#loc8, #loc9])
#loc471 = loc(fused[#loc10, #loc11])
#loc472 = loc(fused[#loc12, #loc13])
#loc473 = loc(fused[#loc14, #loc15])
#loc474 = loc(fused[#loc16, #loc17])
#loc475 = loc(fused[#loc18, #loc19])
#loc476 = loc(fused[#loc20, #loc21])
#loc477 = loc(fused[#loc22, #loc23])
#loc478 = loc(fused[#loc25, #loc26])
#loc479 = loc(fused[#loc27, #loc28])
#loc480 = loc(fused[#loc29, #loc30])
#loc481 = loc(fused[#loc31, #loc32])
#loc482 = loc(fused[#loc35, #loc33])
#loc483 = loc(fused[#loc36, #loc37])
#loc484 = loc(fused[#loc38, #loc39])
#loc485 = loc(fused[#loc40, #loc41])
#loc486 = loc(fused[#loc42, #loc43])
#loc487 = loc(fused[#loc44, #loc45])
#loc488 = loc(fused[#loc46, #loc47])
#loc489 = loc(fused[#loc52, #loc53])
#loc490 = loc(fused[#loc54, #loc55])
#loc491 = loc(fused[#loc56, #loc57])
#loc492 = loc(fused[#loc58, #loc55])
#loc493 = loc(fused[#loc60, #loc61])
#loc494 = loc(fused[#loc63, #loc64])
#loc495 = loc(fused[#loc65, #loc66])
#loc496 = loc(fused[#loc69, #loc67])
#loc497 = loc(fused[#loc73, #loc74])
#loc498 = loc(fused[#loc78, #loc79])
#loc499 = loc(fused[#loc80, #loc81])
#loc500 = loc(fused[#loc83, #loc84])
#loc501 = loc(fused[#loc85, #loc86])
#loc502 = loc(fused[#loc87, #loc88])
#loc503 = loc(fused[#loc89, #loc81])
#loc504 = loc(fused[#loc93, #loc94])
#loc505 = loc(fused[#loc97, #loc98])
#loc506 = loc(fused[#loc99, #loc100])
#loc507 = loc(fused[#loc101, #loc102])
#loc508 = loc(fused[#loc104, #loc105])
#loc509 = loc(fused[#loc106, #loc100])
#loc510 = loc(fused[#loc110, #loc108])
#loc511 = loc(fused[#loc113, #loc114])
#loc512 = loc(fused[#loc116, #loc117])
#loc513 = loc(fused[#loc118, #loc119])
#loc514 = loc(fused[#loc120, #loc117])
#loc515 = loc(fused[#loc125, #loc123])
#loc516 = loc(fused[#loc126, #loc127])
#loc517 = loc(fused[#loc128, #loc129])
#loc518 = loc(fused[#loc131, #loc132])
#loc519 = loc(fused[#loc133, #loc134])
#loc520 = loc(fused[#loc135, #loc136])
#loc521 = loc(fused[#loc139, #loc140])
#loc522 = loc(fused[#loc138, #loc140])
#loc523 = loc(fused[#loc137, #loc136])
#loc524 = loc(fused[#loc141, #loc142])
#loc525 = loc(fused[#loc143, #loc144])
#loc526 = loc(fused[#loc145, #loc142])
#loc527 = loc(fused[#loc149, #loc150])
#loc528 = loc(fused[#loc152, #loc151])
#loc529 = loc(fused[#loc153, #loc154])
#loc530 = loc(fused[#loc156, #loc150])
#loc531 = loc(fused[#loc158, #loc157])
#loc532 = loc(fused[#loc162, #loc161])
#loc533 = loc(fused[#loc163, #loc164])
#loc534 = loc(fused[#loc165, #loc166])
#loc535 = loc(fused[#loc167, #loc168, #loc169, #loc164])
#loc536 = loc(fused[#loc171, #loc170])
#loc537 = loc(fused[#loc174, #loc175])
#loc538 = loc(fused[#loc177, #loc176])
#loc539 = loc(fused[#loc178, #loc179])
#loc540 = loc(fused[#loc181, #loc175])
#loc541 = loc(fused[#loc187, #loc186])
#loc542 = loc(fused[#loc191, #loc192])
#loc543 = loc(fused[#loc193, #loc194])
#loc544 = loc(fused[#loc195, #loc196])
#loc545 = loc(fused[#loc197, #loc198])
#loc546 = loc(fused[#loc199, #loc200])
#loc547 = loc(fused[#loc205, #loc206])
#loc550 = loc(fused[#loc216, #loc217])
#loc551 = loc(fused[#loc220, #loc221])
#loc552 = loc(fused[#loc224, #loc223])
#loc553 = loc(fused[#loc225, #loc226])
#loc554 = loc(fused[#loc227, #loc228])
#loc555 = loc(fused[#loc229, #loc230])
#loc556 = loc(fused[#loc233, #loc231])
#loc557 = loc(fused[#loc235, #loc234])
#loc558 = loc(fused[#loc237, #loc236])
#loc559 = loc(fused[#loc238, #loc239])
#loc560 = loc(fused[#loc240, #loc241])
#loc561 = loc(fused[#loc242, #loc243])
#loc562 = loc(fused[#loc244, #loc245])
#loc563 = loc(fused[#loc246, #loc247])
#loc564 = loc(fused[#loc250, #loc251])
#loc565 = loc(fused[#loc249, #loc251])
#loc566 = loc(fused[#loc248, #loc247])
#loc567 = loc(fused[#loc252, #loc253])
#loc568 = loc(fused[#loc254, #loc255])
#loc569 = loc(fused[#loc256, #loc253])
#loc570 = loc(fused[#loc260, #loc261])
#loc571 = loc(fused[#loc263, #loc262])
#loc572 = loc(fused[#loc264, #loc265])
#loc573 = loc(fused[#loc267, #loc261])
#loc574 = loc(fused[#loc269, #loc268])
#loc575 = loc(fused[#loc273, #loc272])
#loc576 = loc(fused[#loc274, #loc275])
#loc577 = loc(fused[#loc276, #loc277])
#loc578 = loc(fused[#loc278, #loc279, #loc280, #loc275])
#loc579 = loc(fused[#loc282, #loc281])
#loc580 = loc(fused[#loc285, #loc286])
#loc581 = loc(fused[#loc288, #loc287])
#loc582 = loc(fused[#loc289, #loc290])
#loc583 = loc(fused[#loc292, #loc286])
#loc584 = loc(fused[#loc298, #loc297])
#loc585 = loc(fused[#loc304, #loc305])
#loc586 = loc(fused[#loc306, #loc307])
#loc587 = loc(fused[#loc308, #loc309])
#loc588 = loc(fused[#loc312, #loc310])
#loc589 = loc(fused[#loc313, #loc314])
#loc590 = loc(fused[#loc315, #loc316])
#loc591 = loc(fused[#loc317, #loc318])
#loc592 = loc(fused[#loc319, #loc320])
#loc593 = loc(fused[#loc321, #loc322])
#loc594 = loc(fused[#loc323, #loc324])
#loc595 = loc(fused[#loc329, #loc330])
#loc596 = loc(fused[#loc331, #loc332])
#loc597 = loc(fused[#loc333, #loc334])
#loc598 = loc(fused[#loc335, #loc332])
#loc599 = loc(fused[#loc337, #loc338])
#loc600 = loc(fused[#loc340, #loc341])
#loc601 = loc(fused[#loc342, #loc343])
#loc602 = loc(fused[#loc345, #loc344])
#loc603 = loc(fused[#loc348, #loc349])
#loc604 = loc(fused[#loc352, #loc353])
#loc605 = loc(fused[#loc354, #loc355])
#loc606 = loc(fused[#loc357, #loc358])
#loc607 = loc(fused[#loc359, #loc360])
#loc608 = loc(fused[#loc361, #loc362])
#loc609 = loc(fused[#loc363, #loc355])
#loc610 = loc(fused[#loc367, #loc368])
#loc611 = loc(fused[#loc371, #loc372])
#loc612 = loc(fused[#loc373, #loc374])
#loc613 = loc(fused[#loc375, #loc376])
#loc614 = loc(fused[#loc378, #loc379])
#loc615 = loc(fused[#loc380, #loc374])
#loc616 = loc(fused[#loc384, #loc382])
#loc617 = loc(fused[#loc387, #loc388])
#loc618 = loc(fused[#loc390, #loc391])
#loc619 = loc(fused[#loc392, #loc393])
#loc620 = loc(fused[#loc394, #loc391])
#loc621 = loc(fused[#loc398, #loc397])
#loc622 = loc(fused[#loc399, #loc400])
#loc623 = loc(fused[#loc401, #loc402])
#loc624 = loc(fused[#loc403, #loc404])
#loc625 = loc(fused[#loc405, #loc406])
#loc626 = loc(fused[#loc407, #loc408])
#loc627 = loc(fused[#loc411, #loc412])
#loc628 = loc(fused[#loc410, #loc412])
#loc629 = loc(fused[#loc409, #loc408])
#loc630 = loc(fused[#loc413, #loc414])
#loc631 = loc(fused[#loc415, #loc416])
#loc632 = loc(fused[#loc417, #loc414])
#loc633 = loc(fused[#loc421, #loc422])
#loc634 = loc(fused[#loc424, #loc423])
#loc635 = loc(fused[#loc425, #loc426])
#loc636 = loc(fused[#loc428, #loc422])
#loc637 = loc(fused[#loc430, #loc429])
#loc638 = loc(fused[#loc434, #loc433])
#loc639 = loc(fused[#loc435, #loc436])
#loc640 = loc(fused[#loc437, #loc438])
#loc641 = loc(fused[#loc440, #loc442])
#loc642 = loc(fused[#loc443, #loc444, #loc445, #loc436])
#loc643 = loc(fused[#loc447, #loc446])
#loc644 = loc(fused[#loc450, #loc451])
#loc645 = loc(fused[#loc453, #loc452])
#loc646 = loc(fused[#loc454, #loc455])
#loc647 = loc(fused[#loc457, #loc451])
#loc648 = loc(fused[#loc463, #loc462])
