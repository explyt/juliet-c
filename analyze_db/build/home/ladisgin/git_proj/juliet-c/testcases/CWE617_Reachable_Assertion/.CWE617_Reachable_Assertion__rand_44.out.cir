!s32i = !cir.int<s, 32>
!s64i = !cir.int<s, 64>
!s8i = !cir.int<s, 8>
!u32i = !cir.int<u, 32>
!u64i = !cir.int<u, 64>
!void = !cir.void
#fn_attr = #cir<extra({nothrow = #cir.nothrow})>
#fn_attr1 = #cir<extra({inline = #cir.inline<no>, nothrow = #cir.nothrow, optnone = #cir.optnone})>
#loc6 = loc("CWE617_Reachable_Assertion__rand_44.c":25:21)
#loc7 = loc("CWE617_Reachable_Assertion__rand_44.c":25:25)
#loc20 = loc("CWE617_Reachable_Assertion__rand_44.c":39:12)
#loc40 = loc("CWE617_Reachable_Assertion__rand_44.c":80:10)
#loc41 = loc("CWE617_Reachable_Assertion__rand_44.c":80:14)
#loc42 = loc("CWE617_Reachable_Assertion__rand_44.c":80:20)
#loc43 = loc("CWE617_Reachable_Assertion__rand_44.c":80:32)
#loc61 = loc("CWE617_Reachable_Assertion__rand_44.c":49:25)
#loc62 = loc("CWE617_Reachable_Assertion__rand_44.c":49:29)
#loc80 = loc(fused[#loc6, #loc7])
#loc93 = loc(fused[#loc40, #loc41])
#loc94 = loc(fused[#loc42, #loc43])
#loc99 = loc(fused[#loc61, #loc62])
module @"/home/ladisgin/git_proj/juliet-c/testcases/CWE617_Reachable_Assertion/CWE617_Reachable_Assertion__rand_44.c" attributes {cir.lang = #cir.lang<c>, cir.sob = #cir.signed_overflow_behavior<undefined>, cir.triple = "x86_64-unknown-linux-gnu", dlti.dl_spec = #dlti.dl_spec<!llvm.ptr<272> = dense<64> : vector<4xi64>, i64 = dense<64> : vector<2xi64>, i128 = dense<128> : vector<2xi64>, f64 = dense<64> : vector<2xi64>, !llvm.ptr<270> = dense<32> : vector<4xi64>, f16 = dense<16> : vector<2xi64>, f128 = dense<128> : vector<2xi64>, !llvm.ptr<271> = dense<32> : vector<4xi64>, i8 = dense<8> : vector<2xi64>, i16 = dense<16> : vector<2xi64>, i32 = dense<32> : vector<2xi64>, f80 = dense<128> : vector<2xi64>, !llvm.ptr = dense<64> : vector<4xi64>, i1 = dense<8> : vector<2xi64>, "dlti.endianness" = "little", "dlti.stack_alignment" = 128 : i64>} {
  cir.func private @__assert_fail(!cir.ptr<!s8i>, !cir.ptr<!s8i>, !u32i, !cir.ptr<!s8i>) extra(#fn_attr) loc(#loc78)
  cir.global "private" constant cir_private dsolocal @".str.4" = #cir.const_array<"data > ASSERT_VALUE\00" : !cir.array<!s8i x 20>> : !cir.array<!s8i x 20> {alignment = 1 : i64} loc(#loc3)
  cir.global "private" constant cir_private dsolocal @".str.5" = #cir.const_array<"CWE617_Reachable_Assertion__rand_44.c\00" : !cir.array<!s8i x 38>> : !cir.array<!s8i x 38> {alignment = 1 : i64} loc(#loc3)
  cir.global "private" constant cir_private dsolocal @".str.6" = #cir.const_array<"void badSink(int)\00" : !cir.array<!s8i x 18>> : !cir.array<!s8i x 18> {alignment = 1 : i64} loc(#loc3)
  cir.func internal private @badSink(%arg0: !s32i loc(fused[#loc6, #loc7])) extra(#fn_attr1) {
    %0 = cir.alloca !s32i, !cir.ptr<!s32i>, ["data", init] {alignment = 4 : i64} loc(#loc80)
    cir.store %arg0, %0 : !s32i, !cir.ptr<!s32i> loc(#loc8)
    %1 = cir.const #cir.int<4> : !u64i loc(#loc3)
    cir.br ^bb1 loc(#loc3)
  ^bb1:  // pred: ^bb0
    cir.br ^bb2 loc(#loc3)
  ^bb2:  // pred: ^bb1
    %2 = cir.load %0 : !cir.ptr<!s32i>, !s32i loc(#loc3)
    %3 = cir.const #cir.int<5> : !s32i loc(#loc3)
    %4 = cir.cmp(gt, %2, %3) : !s32i, !cir.bool loc(#loc3)
    cir.brcond %4 ^bb3, ^bb4 loc(#loc3)
  ^bb3:  // pred: ^bb2
    cir.br ^bb5 loc(#loc3)
  ^bb4:  // pred: ^bb2
    %5 = cir.get_global @".str.4" : !cir.ptr<!cir.array<!s8i x 20>> loc(#loc3)
    %6 = cir.cast(array_to_ptrdecay, %5 : !cir.ptr<!cir.array<!s8i x 20>>), !cir.ptr<!s8i> loc(#loc3)
    %7 = cir.get_global @".str.5" : !cir.ptr<!cir.array<!s8i x 38>> loc(#loc3)
    %8 = cir.cast(array_to_ptrdecay, %7 : !cir.ptr<!cir.array<!s8i x 38>>), !cir.ptr<!s8i> loc(#loc3)
    %9 = cir.const #cir.int<28> : !s32i loc(#loc3)
    %10 = cir.cast(integral, %9 : !s32i), !u32i loc(#loc3)
    %11 = cir.get_global @".str.6" : !cir.ptr<!cir.array<!s8i x 18>> loc(#loc3)
    %12 = cir.cast(array_to_ptrdecay, %11 : !cir.ptr<!cir.array<!s8i x 18>>), !cir.ptr<!s8i> loc(#loc3)
    cir.call @__assert_fail(%6, %8, %10, %12) : (!cir.ptr<!s8i>, !cir.ptr<!s8i>, !u32i, !cir.ptr<!s8i>) -> () extra(#fn_attr) loc(#loc3)
    cir.br ^bb5 loc(#loc3)
  ^bb5:  // 2 preds: ^bb3, ^bb4
    cir.br ^bb6 loc(#loc3)
  ^bb6:  // pred: ^bb5
    cir.br ^bb7 loc(#loc3)
  ^bb7:  // pred: ^bb6
    cir.return loc(#loc5)
  } loc(#loc79)
  cir.func private @rand() -> !s32i extra(#fn_attr) loc(#loc81)
  cir.func no_proto @CWE617_Reachable_Assertion__rand_44_bad() extra(#fn_attr1) {
    %0 = cir.alloca !s32i, !cir.ptr<!s32i>, ["data"] {alignment = 4 : i64} loc(#loc83)
    %1 = cir.alloca !cir.ptr<!cir.func<!void (!s32i)>>, !cir.ptr<!cir.ptr<!cir.func<!void (!s32i)>>>, ["funcPtr", init] {alignment = 8 : i64} loc(#loc84)
    %2 = cir.get_global @badSink : !cir.ptr<!cir.func<!void (!s32i)>> loc(#loc16)
    cir.store %2, %1 : !cir.ptr<!cir.func<!void (!s32i)>>, !cir.ptr<!cir.ptr<!cir.func<!void (!s32i)>>> loc(#loc84)
    %3 = cir.const #cir.int<1> : !s32i loc(#loc17)
    %4 = cir.unary(minus, %3) : !s32i, !s32i loc(#loc18)
    cir.store %4, %0 : !s32i, !cir.ptr<!s32i> loc(#loc85)
    %5 = cir.call @rand() : () -> !s32i extra(#fn_attr) loc(#loc20)
    %6 = cir.const #cir.int<1> : !s32i loc(#loc20)
    %7 = cir.binop(and, %5, %6) : !s32i loc(#loc20)
    %8 = cir.cast(int_to_bool, %7 : !s32i), !cir.bool loc(#loc20)
    cir.brcond %8 ^bb1, ^bb2 loc(#loc20)
  ^bb1:  // pred: ^bb0
    %9 = cir.call @rand() : () -> !s32i extra(#fn_attr) loc(#loc20)
    %10 = cir.cast(integral, %9 : !s32i), !u32i loc(#loc20)
    %11 = cir.const #cir.int<30> : !s32i loc(#loc20)
    %12 = cir.shift(left, %10 : !u32i, %11 : !s32i) -> !u32i loc(#loc20)
    %13 = cir.call @rand() : () -> !s32i extra(#fn_attr) loc(#loc20)
    %14 = cir.cast(integral, %13 : !s32i), !u32i loc(#loc20)
    %15 = cir.const #cir.int<15> : !s32i loc(#loc20)
    %16 = cir.shift(left, %14 : !u32i, %15 : !s32i) -> !u32i loc(#loc20)
    %17 = cir.binop(xor, %12, %16) : !u32i loc(#loc20)
    %18 = cir.call @rand() : () -> !s32i extra(#fn_attr) loc(#loc20)
    %19 = cir.cast(integral, %18 : !s32i), !u32i loc(#loc20)
    %20 = cir.binop(xor, %17, %19) : !u32i loc(#loc20)
    cir.br ^bb3(%20 : !u32i) loc(#loc20)
  ^bb2:  // pred: ^bb0
    %21 = cir.call @rand() : () -> !s32i extra(#fn_attr) loc(#loc20)
    %22 = cir.cast(integral, %21 : !s32i), !u32i loc(#loc20)
    %23 = cir.const #cir.int<30> : !s32i loc(#loc20)
    %24 = cir.shift(left, %22 : !u32i, %23 : !s32i) -> !u32i loc(#loc20)
    %25 = cir.call @rand() : () -> !s32i extra(#fn_attr) loc(#loc20)
    %26 = cir.cast(integral, %25 : !s32i), !u32i loc(#loc20)
    %27 = cir.const #cir.int<15> : !s32i loc(#loc20)
    %28 = cir.shift(left, %26 : !u32i, %27 : !s32i) -> !u32i loc(#loc20)
    %29 = cir.binop(xor, %24, %28) : !u32i loc(#loc20)
    %30 = cir.call @rand() : () -> !s32i extra(#fn_attr) loc(#loc20)
    %31 = cir.cast(integral, %30 : !s32i), !u32i loc(#loc20)
    %32 = cir.binop(xor, %29, %31) : !u32i loc(#loc20)
    %33 = cir.unary(minus, %32) : !u32i, !u32i loc(#loc20)
    %34 = cir.const #cir.int<1> : !s32i loc(#loc20)
    %35 = cir.cast(integral, %34 : !s32i), !u32i loc(#loc20)
    %36 = cir.binop(sub, %33, %35) : !u32i loc(#loc20)
    cir.br ^bb3(%36 : !u32i) loc(#loc20)
  ^bb3(%37: !u32i loc("CWE617_Reachable_Assertion__rand_44.c":39:12)):  // 2 preds: ^bb1, ^bb2
    cir.br ^bb4 loc(#loc20)
  ^bb4:  // pred: ^bb3
    %38 = cir.cast(integral, %37 : !u32i), !s32i loc(#loc20)
    cir.store %38, %0 : !s32i, !cir.ptr<!s32i> loc(#loc86)
    %39 = cir.load %1 : !cir.ptr<!cir.ptr<!cir.func<!void (!s32i)>>>, !cir.ptr<!cir.func<!void (!s32i)>> loc(#loc22)
    %40 = cir.load %0 : !cir.ptr<!s32i>, !s32i loc(#loc23)
    cir.call %39(%40) : (!cir.ptr<!cir.func<!void (!s32i)>>, !s32i) -> () loc(#loc22)
    cir.return loc(#loc12)
  } loc(#loc82)
  cir.func no_proto @CWE617_Reachable_Assertion__rand_44_good() extra(#fn_attr1) {
    %0 = cir.get_global @goodG2B : !cir.ptr<!cir.func<!void ()>> loc(#loc88)
    cir.call %0() : (!cir.ptr<!cir.func<!void ()>>) -> () loc(#loc26)
    cir.return loc(#loc25)
  } loc(#loc87)
  cir.func private @srand(!u32i) extra(#fn_attr) loc(#loc89)
  cir.func private @time(!cir.ptr<!s64i>) -> !s64i extra(#fn_attr) loc(#loc90)
  cir.func private @printLine(!cir.ptr<!s8i>) loc(#loc91)
  cir.global "private" constant cir_private dsolocal @".str" = #cir.const_array<"Calling good()...\00" : !cir.array<!s8i x 18>> : !cir.array<!s8i x 18> {alignment = 1 : i64} loc(#loc34)
  cir.global "private" constant cir_private dsolocal @".str.1" = #cir.const_array<"Finished good()\00" : !cir.array<!s8i x 16>> : !cir.array<!s8i x 16> {alignment = 1 : i64} loc(#loc35)
  cir.global "private" constant cir_private dsolocal @".str.2" = #cir.const_array<"Calling bad()...\00" : !cir.array<!s8i x 17>> : !cir.array<!s8i x 17> {alignment = 1 : i64} loc(#loc36)
  cir.global "private" constant cir_private dsolocal @".str.3" = #cir.const_array<"Finished bad()\00" : !cir.array<!s8i x 15>> : !cir.array<!s8i x 15> {alignment = 1 : i64} loc(#loc37)
  cir.func @main(%arg0: !s32i loc(fused[#loc40, #loc41]), %arg1: !cir.ptr<!cir.ptr<!s8i>> loc(fused[#loc42, #loc43])) -> !s32i extra(#fn_attr1) {
    %0 = cir.alloca !s32i, !cir.ptr<!s32i>, ["argc", init] {alignment = 4 : i64} loc(#loc93)
    %1 = cir.alloca !cir.ptr<!cir.ptr<!s8i>>, !cir.ptr<!cir.ptr<!cir.ptr<!s8i>>>, ["argv", init] {alignment = 8 : i64} loc(#loc94)
    %2 = cir.alloca !s32i, !cir.ptr<!s32i>, ["__retval"] {alignment = 4 : i64} loc(#loc39)
    cir.store %arg0, %0 : !s32i, !cir.ptr<!s32i> loc(#loc44)
    cir.store %arg1, %1 : !cir.ptr<!cir.ptr<!s8i>>, !cir.ptr<!cir.ptr<!cir.ptr<!s8i>>> loc(#loc44)
    %3 = cir.const #cir.ptr<null> : !cir.ptr<!s64i> loc(#loc45)
    %4 = cir.call @time(%3) : (!cir.ptr<!s64i>) -> !s64i extra(#fn_attr) loc(#loc46)
    %5 = cir.cast(integral, %4 : !s64i), !u32i loc(#loc46)
    cir.call @srand(%5) : (!u32i) -> () extra(#fn_attr) loc(#loc47)
    %6 = cir.get_global @".str" : !cir.ptr<!cir.array<!s8i x 18>> loc(#loc34)
    %7 = cir.cast(array_to_ptrdecay, %6 : !cir.ptr<!cir.array<!s8i x 18>>), !cir.ptr<!s8i> loc(#loc34)
    cir.call @printLine(%7) : (!cir.ptr<!s8i>) -> () loc(#loc48)
    %8 = cir.get_global @CWE617_Reachable_Assertion__rand_44_good : !cir.ptr<!cir.func<!void ()>> loc(#loc95)
    cir.call @CWE617_Reachable_Assertion__rand_44_good() : () -> () loc(#loc49)
    %9 = cir.get_global @".str.1" : !cir.ptr<!cir.array<!s8i x 16>> loc(#loc35)
    %10 = cir.cast(array_to_ptrdecay, %9 : !cir.ptr<!cir.array<!s8i x 16>>), !cir.ptr<!s8i> loc(#loc35)
    cir.call @printLine(%10) : (!cir.ptr<!s8i>) -> () loc(#loc51)
    %11 = cir.get_global @".str.2" : !cir.ptr<!cir.array<!s8i x 17>> loc(#loc36)
    %12 = cir.cast(array_to_ptrdecay, %11 : !cir.ptr<!cir.array<!s8i x 17>>), !cir.ptr<!s8i> loc(#loc36)
    cir.call @printLine(%12) : (!cir.ptr<!s8i>) -> () loc(#loc52)
    %13 = cir.get_global @CWE617_Reachable_Assertion__rand_44_bad : !cir.ptr<!cir.func<!void ()>> loc(#loc96)
    cir.call @CWE617_Reachable_Assertion__rand_44_bad() : () -> () loc(#loc53)
    %14 = cir.get_global @".str.3" : !cir.ptr<!cir.array<!s8i x 15>> loc(#loc37)
    %15 = cir.cast(array_to_ptrdecay, %14 : !cir.ptr<!cir.array<!s8i x 15>>), !cir.ptr<!s8i> loc(#loc37)
    cir.call @printLine(%15) : (!cir.ptr<!s8i>) -> () loc(#loc55)
    %16 = cir.const #cir.int<0> : !s32i loc(#loc56)
    cir.store %16, %2 : !s32i, !cir.ptr<!s32i> loc(#loc97)
    %17 = cir.load %2 : !cir.ptr<!s32i>, !s32i loc(#loc97)
    cir.return %17 : !s32i loc(#loc97)
  } loc(#loc92)
  cir.global "private" constant cir_private dsolocal @".str.7" = #cir.const_array<"void goodG2BSink(int)\00" : !cir.array<!s8i x 22>> : !cir.array<!s8i x 22> {alignment = 1 : i64} loc(#loc58)
  cir.func internal private @goodG2BSink(%arg0: !s32i loc(fused[#loc61, #loc62])) extra(#fn_attr1) {
    %0 = cir.alloca !s32i, !cir.ptr<!s32i>, ["data", init] {alignment = 4 : i64} loc(#loc99)
    cir.store %arg0, %0 : !s32i, !cir.ptr<!s32i> loc(#loc63)
    %1 = cir.const #cir.int<4> : !u64i loc(#loc58)
    cir.br ^bb1 loc(#loc58)
  ^bb1:  // pred: ^bb0
    cir.br ^bb2 loc(#loc58)
  ^bb2:  // pred: ^bb1
    %2 = cir.load %0 : !cir.ptr<!s32i>, !s32i loc(#loc58)
    %3 = cir.const #cir.int<5> : !s32i loc(#loc58)
    %4 = cir.cmp(gt, %2, %3) : !s32i, !cir.bool loc(#loc58)
    cir.brcond %4 ^bb3, ^bb4 loc(#loc58)
  ^bb3:  // pred: ^bb2
    cir.br ^bb5 loc(#loc58)
  ^bb4:  // pred: ^bb2
    %5 = cir.get_global @".str.4" : !cir.ptr<!cir.array<!s8i x 20>> loc(#loc58)
    %6 = cir.cast(array_to_ptrdecay, %5 : !cir.ptr<!cir.array<!s8i x 20>>), !cir.ptr<!s8i> loc(#loc58)
    %7 = cir.get_global @".str.5" : !cir.ptr<!cir.array<!s8i x 38>> loc(#loc58)
    %8 = cir.cast(array_to_ptrdecay, %7 : !cir.ptr<!cir.array<!s8i x 38>>), !cir.ptr<!s8i> loc(#loc58)
    %9 = cir.const #cir.int<52> : !s32i loc(#loc58)
    %10 = cir.cast(integral, %9 : !s32i), !u32i loc(#loc58)
    %11 = cir.get_global @".str.7" : !cir.ptr<!cir.array<!s8i x 22>> loc(#loc58)
    %12 = cir.cast(array_to_ptrdecay, %11 : !cir.ptr<!cir.array<!s8i x 22>>), !cir.ptr<!s8i> loc(#loc58)
    cir.call @__assert_fail(%6, %8, %10, %12) : (!cir.ptr<!s8i>, !cir.ptr<!s8i>, !u32i, !cir.ptr<!s8i>) -> () extra(#fn_attr) loc(#loc58)
    cir.br ^bb5 loc(#loc58)
  ^bb5:  // 2 preds: ^bb3, ^bb4
    cir.br ^bb6 loc(#loc58)
  ^bb6:  // pred: ^bb5
    cir.br ^bb7 loc(#loc58)
  ^bb7:  // pred: ^bb6
    cir.return loc(#loc60)
  } loc(#loc98)
  cir.func no_proto internal private @goodG2B() extra(#fn_attr1) {
    %0 = cir.alloca !s32i, !cir.ptr<!s32i>, ["data"] {alignment = 4 : i64} loc(#loc101)
    %1 = cir.alloca !cir.ptr<!cir.func<!void (!s32i)>>, !cir.ptr<!cir.ptr<!cir.func<!void (!s32i)>>>, ["funcPtr", init] {alignment = 8 : i64} loc(#loc102)
    %2 = cir.get_global @goodG2BSink : !cir.ptr<!cir.func<!void (!s32i)>> loc(#loc69)
    cir.store %2, %1 : !cir.ptr<!cir.func<!void (!s32i)>>, !cir.ptr<!cir.ptr<!cir.func<!void (!s32i)>>> loc(#loc102)
    %3 = cir.const #cir.int<1> : !s32i loc(#loc70)
    %4 = cir.unary(minus, %3) : !s32i, !s32i loc(#loc71)
    cir.store %4, %0 : !s32i, !cir.ptr<!s32i> loc(#loc103)
    %5 = cir.const #cir.int<5> : !s32i loc(#loc73)
    %6 = cir.const #cir.int<1> : !s32i loc(#loc74)
    %7 = cir.binop(add, %5, %6) nsw : !s32i loc(#loc73)
    cir.store %7, %0 : !s32i, !cir.ptr<!s32i> loc(#loc104)
    %8 = cir.load %1 : !cir.ptr<!cir.ptr<!cir.func<!void (!s32i)>>>, !cir.ptr<!cir.func<!void (!s32i)>> loc(#loc76)
    %9 = cir.load %0 : !cir.ptr<!s32i>, !s32i loc(#loc77)
    cir.call %8(%9) : (!cir.ptr<!cir.func<!void (!s32i)>>, !s32i) -> () loc(#loc76)
    cir.return loc(#loc65)
  } loc(#loc100)
} loc(#loc)
#loc = loc("/home/ladisgin/git_proj/juliet-c/testcases/CWE617_Reachable_Assertion/CWE617_Reachable_Assertion__rand_44.c":0:0)
#loc1 = loc("/usr/include/assert.h":67:1)
#loc2 = loc("/usr/include/assert.h":69:43)
#loc3 = loc("CWE617_Reachable_Assertion__rand_44.c":28:5)
#loc4 = loc("CWE617_Reachable_Assertion__rand_44.c":25:1)
#loc5 = loc("CWE617_Reachable_Assertion__rand_44.c":29:1)
#loc8 = loc("CWE617_Reachable_Assertion__rand_44.c":26:1)
#loc9 = loc("/usr/include/stdlib.h":573:1)
#loc10 = loc("/usr/include/stdlib.h":573:24)
#loc11 = loc("CWE617_Reachable_Assertion__rand_44.c":31:1)
#loc12 = loc("CWE617_Reachable_Assertion__rand_44.c":42:1)
#loc13 = loc("CWE617_Reachable_Assertion__rand_44.c":33:5)
#loc14 = loc("CWE617_Reachable_Assertion__rand_44.c":33:9)
#loc15 = loc("CWE617_Reachable_Assertion__rand_44.c":35:5)
#loc16 = loc("CWE617_Reachable_Assertion__rand_44.c":35:29)
#loc17 = loc("CWE617_Reachable_Assertion__rand_44.c":37:13)
#loc18 = loc("CWE617_Reachable_Assertion__rand_44.c":37:12)
#loc19 = loc("CWE617_Reachable_Assertion__rand_44.c":37:5)
#loc21 = loc("CWE617_Reachable_Assertion__rand_44.c":39:5)
#loc22 = loc("CWE617_Reachable_Assertion__rand_44.c":41:5)
#loc23 = loc("CWE617_Reachable_Assertion__rand_44.c":41:13)
#loc24 = loc("CWE617_Reachable_Assertion__rand_44.c":66:1)
#loc25 = loc("CWE617_Reachable_Assertion__rand_44.c":69:1)
#loc26 = loc("CWE617_Reachable_Assertion__rand_44.c":68:5)
#loc27 = loc("CWE617_Reachable_Assertion__rand_44.c":68:13)
#loc28 = loc("/usr/include/stdlib.h":575:1)
#loc29 = loc("/usr/include/stdlib.h":575:41)
#loc30 = loc("/usr/include/time.h":76:1)
#loc31 = loc("/usr/include/time.h":76:38)
#loc32 = loc("../../testcasesupport/std_testcase_io.h":14:1)
#loc33 = loc("../../testcasesupport/std_testcase_io.h":14:33)
#loc34 = loc("CWE617_Reachable_Assertion__rand_44.c":85:15)
#loc35 = loc("CWE617_Reachable_Assertion__rand_44.c":87:15)
#loc36 = loc("CWE617_Reachable_Assertion__rand_44.c":90:15)
#loc37 = loc("CWE617_Reachable_Assertion__rand_44.c":92:15)
#loc38 = loc("CWE617_Reachable_Assertion__rand_44.c":80:1)
#loc39 = loc("CWE617_Reachable_Assertion__rand_44.c":95:1)
#loc44 = loc("CWE617_Reachable_Assertion__rand_44.c":81:1)
#loc45 = loc("CWE617_Reachable_Assertion__rand_44.c":83:27)
#loc46 = loc("CWE617_Reachable_Assertion__rand_44.c":83:22)
#loc47 = loc("CWE617_Reachable_Assertion__rand_44.c":83:5)
#loc48 = loc("CWE617_Reachable_Assertion__rand_44.c":85:5)
#loc49 = loc("CWE617_Reachable_Assertion__rand_44.c":86:5)
#loc50 = loc("CWE617_Reachable_Assertion__rand_44.c":86:46)
#loc51 = loc("CWE617_Reachable_Assertion__rand_44.c":87:5)
#loc52 = loc("CWE617_Reachable_Assertion__rand_44.c":90:5)
#loc53 = loc("CWE617_Reachable_Assertion__rand_44.c":91:5)
#loc54 = loc("CWE617_Reachable_Assertion__rand_44.c":91:45)
#loc55 = loc("CWE617_Reachable_Assertion__rand_44.c":92:5)
#loc56 = loc("CWE617_Reachable_Assertion__rand_44.c":94:12)
#loc57 = loc("CWE617_Reachable_Assertion__rand_44.c":94:5)
#loc58 = loc("CWE617_Reachable_Assertion__rand_44.c":52:5)
#loc59 = loc("CWE617_Reachable_Assertion__rand_44.c":49:1)
#loc60 = loc("CWE617_Reachable_Assertion__rand_44.c":53:1)
#loc63 = loc("CWE617_Reachable_Assertion__rand_44.c":50:1)
#loc64 = loc("CWE617_Reachable_Assertion__rand_44.c":55:1)
#loc65 = loc("CWE617_Reachable_Assertion__rand_44.c":64:1)
#loc66 = loc("CWE617_Reachable_Assertion__rand_44.c":57:5)
#loc67 = loc("CWE617_Reachable_Assertion__rand_44.c":57:9)
#loc68 = loc("CWE617_Reachable_Assertion__rand_44.c":58:5)
#loc69 = loc("CWE617_Reachable_Assertion__rand_44.c":58:29)
#loc70 = loc("CWE617_Reachable_Assertion__rand_44.c":60:13)
#loc71 = loc("CWE617_Reachable_Assertion__rand_44.c":60:12)
#loc72 = loc("CWE617_Reachable_Assertion__rand_44.c":60:5)
#loc73 = loc("CWE617_Reachable_Assertion__rand_44.c":62:12)
#loc74 = loc("CWE617_Reachable_Assertion__rand_44.c":62:25)
#loc75 = loc("CWE617_Reachable_Assertion__rand_44.c":62:5)
#loc76 = loc("CWE617_Reachable_Assertion__rand_44.c":63:5)
#loc77 = loc("CWE617_Reachable_Assertion__rand_44.c":63:13)
#loc78 = loc(fused[#loc1, #loc2])
#loc79 = loc(fused[#loc4, #loc5])
#loc81 = loc(fused[#loc9, #loc10])
#loc82 = loc(fused[#loc11, #loc12])
#loc83 = loc(fused[#loc13, #loc14])
#loc84 = loc(fused[#loc15, #loc16])
#loc85 = loc(fused[#loc19, #loc17])
#loc86 = loc(fused[#loc21, #loc20])
#loc87 = loc(fused[#loc24, #loc25])
#loc88 = loc(fused[#loc26, #loc27])
#loc89 = loc(fused[#loc28, #loc29])
#loc90 = loc(fused[#loc30, #loc31])
#loc91 = loc(fused[#loc32, #loc33])
#loc92 = loc(fused[#loc38, #loc39])
#loc95 = loc(fused[#loc49, #loc50])
#loc96 = loc(fused[#loc53, #loc54])
#loc97 = loc(fused[#loc57, #loc56])
#loc98 = loc(fused[#loc59, #loc60])
#loc100 = loc(fused[#loc64, #loc65])
#loc101 = loc(fused[#loc66, #loc67])
#loc102 = loc(fused[#loc68, #loc69])
#loc103 = loc(fused[#loc72, #loc70])
#loc104 = loc(fused[#loc75, #loc74])
