!s32i = !cir.int<s, 32>
!s64i = !cir.int<s, 64>
!s8i = !cir.int<s, 8>
!u32i = !cir.int<u, 32>
!void = !cir.void
#fn_attr = #cir<extra({nothrow = #cir.nothrow})>
#fn_attr1 = #cir<extra({inline = #cir.inline<no>, nothrow = #cir.nothrow, optnone = #cir.optnone})>
#loc52 = loc("CWE398_Poor_Code_Quality__empty_if_17.c":82:10)
#loc53 = loc("CWE398_Poor_Code_Quality__empty_if_17.c":82:14)
#loc54 = loc("CWE398_Poor_Code_Quality__empty_if_17.c":82:20)
#loc55 = loc("CWE398_Poor_Code_Quality__empty_if_17.c":82:32)
#loc126 = loc(fused[#loc52, #loc53])
#loc127 = loc(fused[#loc54, #loc55])
module @"/home/ladisgin/git_proj/juliet-c/testcases/CWE398_Poor_Code_Quality/CWE398_Poor_Code_Quality__empty_if_17.c" attributes {cir.lang = #cir.lang<c>, cir.sob = #cir.signed_overflow_behavior<undefined>, cir.triple = "x86_64-unknown-linux-gnu", dlti.dl_spec = #dlti.dl_spec<i8 = dense<8> : vector<2xi64>, i16 = dense<16> : vector<2xi64>, i32 = dense<32> : vector<2xi64>, f80 = dense<128> : vector<2xi64>, !llvm.ptr = dense<64> : vector<4xi64>, i1 = dense<8> : vector<2xi64>, !llvm.ptr<272> = dense<64> : vector<4xi64>, i64 = dense<64> : vector<2xi64>, i128 = dense<128> : vector<2xi64>, f64 = dense<64> : vector<2xi64>, !llvm.ptr<270> = dense<32> : vector<4xi64>, f16 = dense<16> : vector<2xi64>, f128 = dense<128> : vector<2xi64>, !llvm.ptr<271> = dense<32> : vector<4xi64>, "dlti.endianness" = "little", "dlti.stack_alignment" = 128 : i64>} {
  cir.func private @rand() -> !s32i extra(#fn_attr) loc(#loc105)
  cir.func private @printLine(!cir.ptr<!s8i>) loc(#loc106)
  cir.global "private" constant cir_private dsolocal @".str" = #cir.const_array<"Inside the else statement\00" : !cir.array<!s8i x 26>> : !cir.array<!s8i x 26> {alignment = 1 : i64} loc(#loc5)
  cir.global "private" constant cir_private dsolocal @".str.1" = #cir.const_array<"Hello from bad()\00" : !cir.array<!s8i x 17>> : !cir.array<!s8i x 17> {alignment = 1 : i64} loc(#loc6)
  cir.func no_proto @CWE398_Poor_Code_Quality__empty_if_17_bad() extra(#fn_attr1) {
    %0 = cir.alloca !s32i, !cir.ptr<!s32i>, ["x"] {alignment = 4 : i64} loc(#loc108)
    %1 = cir.alloca !s32i, !cir.ptr<!s32i>, ["j"] {alignment = 4 : i64} loc(#loc109)
    cir.br ^bb1 loc(#loc110)
  ^bb1:  // pred: ^bb0
    %2 = cir.const #cir.int<0> : !s32i loc(#loc15)
    cir.store %2, %1 : !s32i, !cir.ptr<!s32i> loc(#loc111)
    cir.br ^bb2 loc(#loc110)
  ^bb2:  // 2 preds: ^bb1, ^bb13
    %3 = cir.load %1 : !cir.ptr<!s32i>, !s32i loc(#loc17)
    %4 = cir.const #cir.int<1> : !s32i loc(#loc18)
    %5 = cir.cmp(lt, %3, %4) : !s32i, !cir.bool loc(#loc112)
    cir.brcond %5 ^bb3, ^bb14 loc(#loc19)
  ^bb3:  // pred: ^bb2
    cir.br ^bb4 loc(#loc113)
  ^bb4:  // pred: ^bb3
    cir.br ^bb5 loc(#loc114)
  ^bb5:  // pred: ^bb4
    %6 = cir.call @rand() : () -> !s32i extra(#fn_attr) loc(#loc23)
    %7 = cir.const #cir.int<3> : !s32i loc(#loc24)
    %8 = cir.binop(rem, %6, %7) : !s32i loc(#loc115)
    cir.store %8, %0 : !s32i, !cir.ptr<!s32i> loc(#loc116)
    cir.br ^bb6 loc(#loc117)
  ^bb6:  // pred: ^bb5
    %9 = cir.load %0 : !cir.ptr<!s32i>, !s32i loc(#loc29)
    %10 = cir.const #cir.int<0> : !s32i loc(#loc30)
    %11 = cir.cmp(eq, %9, %10) : !s32i, !cir.bool loc(#loc118)
    cir.brcond %11 ^bb7, ^bb8 loc(#loc119)
  ^bb7:  // pred: ^bb6
    cir.br ^bb9 loc(#loc32)
  ^bb8:  // pred: ^bb6
    %12 = cir.get_global @".str" : !cir.ptr<!cir.array<!s8i x 26>> loc(#loc5)
    %13 = cir.cast(array_to_ptrdecay, %12 : !cir.ptr<!cir.array<!s8i x 26>>), !cir.ptr<!s8i> loc(#loc5)
    cir.call @printLine(%13) : (!cir.ptr<!s8i>) -> () loc(#loc34)
    cir.br ^bb9 loc(#loc28)
  ^bb9:  // 2 preds: ^bb7, ^bb8
    cir.br ^bb10 loc(#loc28)
  ^bb10:  // pred: ^bb9
    cir.br ^bb11 loc(#loc22)
  ^bb11:  // pred: ^bb10
    %14 = cir.get_global @".str.1" : !cir.ptr<!cir.array<!s8i x 17>> loc(#loc6)
    %15 = cir.cast(array_to_ptrdecay, %14 : !cir.ptr<!cir.array<!s8i x 17>>), !cir.ptr<!s8i> loc(#loc6)
    cir.call @printLine(%15) : (!cir.ptr<!s8i>) -> () loc(#loc35)
    cir.br ^bb12 loc(#loc14)
  ^bb12:  // pred: ^bb11
    cir.br ^bb13 loc(#loc14)
  ^bb13:  // pred: ^bb12
    %16 = cir.load %1 : !cir.ptr<!s32i>, !s32i loc(#loc36)
    %17 = cir.unary(inc, %16) : !s32i, !s32i loc(#loc37)
    cir.store %17, %1 : !s32i, !cir.ptr<!s32i> loc(#loc120)
    cir.br ^bb2 loc(#loc110)
  ^bb14:  // pred: ^bb2
    cir.br ^bb15 loc(#loc14)
  ^bb15:  // pred: ^bb14
    cir.return loc(#loc8)
  } loc(#loc107)
  cir.func no_proto @CWE398_Poor_Code_Quality__empty_if_17_good() extra(#fn_attr1) {
    %0 = cir.get_global @good1 : !cir.ptr<!cir.func<!void ()>> loc(#loc122)
    cir.call %0() : (!cir.ptr<!cir.func<!void ()>>) -> () loc(#loc40)
    cir.return loc(#loc39)
  } loc(#loc121)
  cir.func private @srand(!u32i) extra(#fn_attr) loc(#loc123)
  cir.func private @time(!cir.ptr<!s64i>) -> !s64i extra(#fn_attr) loc(#loc124)
  cir.global "private" constant cir_private dsolocal @".str.2" = #cir.const_array<"Calling good()...\00" : !cir.array<!s8i x 18>> : !cir.array<!s8i x 18> {alignment = 1 : i64} loc(#loc46)
  cir.global "private" constant cir_private dsolocal @".str.3" = #cir.const_array<"Finished good()\00" : !cir.array<!s8i x 16>> : !cir.array<!s8i x 16> {alignment = 1 : i64} loc(#loc47)
  cir.global "private" constant cir_private dsolocal @".str.4" = #cir.const_array<"Calling bad()...\00" : !cir.array<!s8i x 17>> : !cir.array<!s8i x 17> {alignment = 1 : i64} loc(#loc48)
  cir.global "private" constant cir_private dsolocal @".str.5" = #cir.const_array<"Finished bad()\00" : !cir.array<!s8i x 15>> : !cir.array<!s8i x 15> {alignment = 1 : i64} loc(#loc49)
  cir.func @main(%arg0: !s32i loc(fused[#loc52, #loc53]), %arg1: !cir.ptr<!cir.ptr<!s8i>> loc(fused[#loc54, #loc55])) -> !s32i extra(#fn_attr1) {
    %0 = cir.alloca !s32i, !cir.ptr<!s32i>, ["argc", init] {alignment = 4 : i64} loc(#loc126)
    %1 = cir.alloca !cir.ptr<!cir.ptr<!s8i>>, !cir.ptr<!cir.ptr<!cir.ptr<!s8i>>>, ["argv", init] {alignment = 8 : i64} loc(#loc127)
    %2 = cir.alloca !s32i, !cir.ptr<!s32i>, ["__retval"] {alignment = 4 : i64} loc(#loc51)
    cir.store %arg0, %0 : !s32i, !cir.ptr<!s32i> loc(#loc56)
    cir.store %arg1, %1 : !cir.ptr<!cir.ptr<!s8i>>, !cir.ptr<!cir.ptr<!cir.ptr<!s8i>>> loc(#loc56)
    %3 = cir.const #cir.ptr<null> : !cir.ptr<!s64i> loc(#loc57)
    %4 = cir.call @time(%3) : (!cir.ptr<!s64i>) -> !s64i extra(#fn_attr) loc(#loc58)
    %5 = cir.cast(integral, %4 : !s64i), !u32i loc(#loc58)
    cir.call @srand(%5) : (!u32i) -> () extra(#fn_attr) loc(#loc59)
    %6 = cir.get_global @".str.2" : !cir.ptr<!cir.array<!s8i x 18>> loc(#loc46)
    %7 = cir.cast(array_to_ptrdecay, %6 : !cir.ptr<!cir.array<!s8i x 18>>), !cir.ptr<!s8i> loc(#loc46)
    cir.call @printLine(%7) : (!cir.ptr<!s8i>) -> () loc(#loc60)
    %8 = cir.get_global @CWE398_Poor_Code_Quality__empty_if_17_good : !cir.ptr<!cir.func<!void ()>> loc(#loc128)
    cir.call @CWE398_Poor_Code_Quality__empty_if_17_good() : () -> () loc(#loc61)
    %9 = cir.get_global @".str.3" : !cir.ptr<!cir.array<!s8i x 16>> loc(#loc47)
    %10 = cir.cast(array_to_ptrdecay, %9 : !cir.ptr<!cir.array<!s8i x 16>>), !cir.ptr<!s8i> loc(#loc47)
    cir.call @printLine(%10) : (!cir.ptr<!s8i>) -> () loc(#loc63)
    %11 = cir.get_global @".str.4" : !cir.ptr<!cir.array<!s8i x 17>> loc(#loc48)
    %12 = cir.cast(array_to_ptrdecay, %11 : !cir.ptr<!cir.array<!s8i x 17>>), !cir.ptr<!s8i> loc(#loc48)
    cir.call @printLine(%12) : (!cir.ptr<!s8i>) -> () loc(#loc64)
    %13 = cir.get_global @CWE398_Poor_Code_Quality__empty_if_17_bad : !cir.ptr<!cir.func<!void ()>> loc(#loc129)
    cir.call @CWE398_Poor_Code_Quality__empty_if_17_bad() : () -> () loc(#loc65)
    %14 = cir.get_global @".str.5" : !cir.ptr<!cir.array<!s8i x 15>> loc(#loc49)
    %15 = cir.cast(array_to_ptrdecay, %14 : !cir.ptr<!cir.array<!s8i x 15>>), !cir.ptr<!s8i> loc(#loc49)
    cir.call @printLine(%15) : (!cir.ptr<!s8i>) -> () loc(#loc67)
    %16 = cir.const #cir.int<0> : !s32i loc(#loc68)
    cir.store %16, %2 : !s32i, !cir.ptr<!s32i> loc(#loc130)
    %17 = cir.load %2 : !cir.ptr<!s32i>, !s32i loc(#loc130)
    cir.return %17 : !s32i loc(#loc130)
  } loc(#loc125)
  cir.global "private" constant cir_private dsolocal @".str.6" = #cir.const_array<"Inside the if statement\00" : !cir.array<!s8i x 24>> : !cir.array<!s8i x 24> {alignment = 1 : i64} loc(#loc70)
  cir.global "private" constant cir_private dsolocal @".str.7" = #cir.const_array<"Hello from good()\00" : !cir.array<!s8i x 18>> : !cir.array<!s8i x 18> {alignment = 1 : i64} loc(#loc71)
  cir.func no_proto internal private @good1() extra(#fn_attr1) {
    %0 = cir.alloca !s32i, !cir.ptr<!s32i>, ["x"] {alignment = 4 : i64} loc(#loc132)
    %1 = cir.alloca !s32i, !cir.ptr<!s32i>, ["k"] {alignment = 4 : i64} loc(#loc133)
    cir.br ^bb1 loc(#loc134)
  ^bb1:  // pred: ^bb0
    %2 = cir.const #cir.int<0> : !s32i loc(#loc80)
    cir.store %2, %1 : !s32i, !cir.ptr<!s32i> loc(#loc135)
    cir.br ^bb2 loc(#loc134)
  ^bb2:  // 2 preds: ^bb1, ^bb13
    %3 = cir.load %1 : !cir.ptr<!s32i>, !s32i loc(#loc82)
    %4 = cir.const #cir.int<1> : !s32i loc(#loc83)
    %5 = cir.cmp(lt, %3, %4) : !s32i, !cir.bool loc(#loc136)
    cir.brcond %5 ^bb3, ^bb14 loc(#loc84)
  ^bb3:  // pred: ^bb2
    cir.br ^bb4 loc(#loc137)
  ^bb4:  // pred: ^bb3
    cir.br ^bb5 loc(#loc138)
  ^bb5:  // pred: ^bb4
    %6 = cir.call @rand() : () -> !s32i extra(#fn_attr) loc(#loc88)
    %7 = cir.const #cir.int<3> : !s32i loc(#loc89)
    %8 = cir.binop(rem, %6, %7) : !s32i loc(#loc139)
    cir.store %8, %0 : !s32i, !cir.ptr<!s32i> loc(#loc140)
    cir.br ^bb6 loc(#loc141)
  ^bb6:  // pred: ^bb5
    %9 = cir.load %0 : !cir.ptr<!s32i>, !s32i loc(#loc94)
    %10 = cir.const #cir.int<0> : !s32i loc(#loc95)
    %11 = cir.cmp(eq, %9, %10) : !s32i, !cir.bool loc(#loc142)
    cir.brcond %11 ^bb7, ^bb8 loc(#loc143)
  ^bb7:  // pred: ^bb6
    %12 = cir.get_global @".str.6" : !cir.ptr<!cir.array<!s8i x 24>> loc(#loc70)
    %13 = cir.cast(array_to_ptrdecay, %12 : !cir.ptr<!cir.array<!s8i x 24>>), !cir.ptr<!s8i> loc(#loc70)
    cir.call @printLine(%13) : (!cir.ptr<!s8i>) -> () loc(#loc99)
    cir.br ^bb9 loc(#loc97)
  ^bb8:  // pred: ^bb6
    %14 = cir.get_global @".str" : !cir.ptr<!cir.array<!s8i x 26>> loc(#loc100)
    %15 = cir.cast(array_to_ptrdecay, %14 : !cir.ptr<!cir.array<!s8i x 26>>), !cir.ptr<!s8i> loc(#loc100)
    cir.call @printLine(%15) : (!cir.ptr<!s8i>) -> () loc(#loc101)
    cir.br ^bb9 loc(#loc93)
  ^bb9:  // 2 preds: ^bb7, ^bb8
    cir.br ^bb10 loc(#loc93)
  ^bb10:  // pred: ^bb9
    cir.br ^bb11 loc(#loc87)
  ^bb11:  // pred: ^bb10
    %16 = cir.get_global @".str.7" : !cir.ptr<!cir.array<!s8i x 18>> loc(#loc71)
    %17 = cir.cast(array_to_ptrdecay, %16 : !cir.ptr<!cir.array<!s8i x 18>>), !cir.ptr<!s8i> loc(#loc71)
    cir.call @printLine(%17) : (!cir.ptr<!s8i>) -> () loc(#loc102)
    cir.br ^bb12 loc(#loc79)
  ^bb12:  // pred: ^bb11
    cir.br ^bb13 loc(#loc79)
  ^bb13:  // pred: ^bb12
    %18 = cir.load %1 : !cir.ptr<!s32i>, !s32i loc(#loc103)
    %19 = cir.unary(inc, %18) : !s32i, !s32i loc(#loc104)
    cir.store %19, %1 : !s32i, !cir.ptr<!s32i> loc(#loc144)
    cir.br ^bb2 loc(#loc134)
  ^bb14:  // pred: ^bb2
    cir.br ^bb15 loc(#loc79)
  ^bb15:  // pred: ^bb14
    cir.return loc(#loc73)
  } loc(#loc131)
} loc(#loc)
#loc = loc("/home/ladisgin/git_proj/juliet-c/testcases/CWE398_Poor_Code_Quality/CWE398_Poor_Code_Quality__empty_if_17.c":0:0)
#loc1 = loc("/usr/include/stdlib.h":573:1)
#loc2 = loc("/usr/include/stdlib.h":573:24)
#loc3 = loc("../../testcasesupport/std_testcase_io.h":14:1)
#loc4 = loc("../../testcasesupport/std_testcase_io.h":14:33)
#loc5 = loc("CWE398_Poor_Code_Quality__empty_if_17.c":34:27)
#loc6 = loc("CWE398_Poor_Code_Quality__empty_if_17.c":37:19)
#loc7 = loc("CWE398_Poor_Code_Quality__empty_if_17.c":20:1)
#loc8 = loc("CWE398_Poor_Code_Quality__empty_if_17.c":39:1)
#loc9 = loc("CWE398_Poor_Code_Quality__empty_if_17.c":27:13)
#loc10 = loc("CWE398_Poor_Code_Quality__empty_if_17.c":27:17)
#loc11 = loc("CWE398_Poor_Code_Quality__empty_if_17.c":22:5)
#loc12 = loc("CWE398_Poor_Code_Quality__empty_if_17.c":22:9)
#loc13 = loc("CWE398_Poor_Code_Quality__empty_if_17.c":23:5)
#loc14 = loc("CWE398_Poor_Code_Quality__empty_if_17.c":38:5)
#loc15 = loc("CWE398_Poor_Code_Quality__empty_if_17.c":23:13)
#loc16 = loc("CWE398_Poor_Code_Quality__empty_if_17.c":23:9)
#loc17 = loc("CWE398_Poor_Code_Quality__empty_if_17.c":23:16)
#loc18 = loc("CWE398_Poor_Code_Quality__empty_if_17.c":23:20)
#loc19 = loc("CWE398_Poor_Code_Quality__empty_if_17.c":23:18)
#loc20 = loc("CWE398_Poor_Code_Quality__empty_if_17.c":24:5)
#loc21 = loc("CWE398_Poor_Code_Quality__empty_if_17.c":26:9)
#loc22 = loc("CWE398_Poor_Code_Quality__empty_if_17.c":36:9)
#loc23 = loc("CWE398_Poor_Code_Quality__empty_if_17.c":28:18)
#loc24 = loc("CWE398_Poor_Code_Quality__empty_if_17.c":28:27)
#loc25 = loc("CWE398_Poor_Code_Quality__empty_if_17.c":28:13)
#loc26 = loc("CWE398_Poor_Code_Quality__empty_if_17.c":28:28)
#loc27 = loc("CWE398_Poor_Code_Quality__empty_if_17.c":29:13)
#loc28 = loc("CWE398_Poor_Code_Quality__empty_if_17.c":35:13)
#loc29 = loc("CWE398_Poor_Code_Quality__empty_if_17.c":29:17)
#loc30 = loc("CWE398_Poor_Code_Quality__empty_if_17.c":29:22)
#loc31 = loc("CWE398_Poor_Code_Quality__empty_if_17.c":30:13)
#loc32 = loc("CWE398_Poor_Code_Quality__empty_if_17.c":31:13)
#loc33 = loc("CWE398_Poor_Code_Quality__empty_if_17.c":33:13)
#loc34 = loc("CWE398_Poor_Code_Quality__empty_if_17.c":34:17)
#loc35 = loc("CWE398_Poor_Code_Quality__empty_if_17.c":37:9)
#loc36 = loc("CWE398_Poor_Code_Quality__empty_if_17.c":23:24)
#loc37 = loc("CWE398_Poor_Code_Quality__empty_if_17.c":23:23)
#loc38 = loc("CWE398_Poor_Code_Quality__empty_if_17.c":68:1)
#loc39 = loc("CWE398_Poor_Code_Quality__empty_if_17.c":71:1)
#loc40 = loc("CWE398_Poor_Code_Quality__empty_if_17.c":70:5)
#loc41 = loc("CWE398_Poor_Code_Quality__empty_if_17.c":70:11)
#loc42 = loc("/usr/include/stdlib.h":575:1)
#loc43 = loc("/usr/include/stdlib.h":575:41)
#loc44 = loc("/usr/include/time.h":76:1)
#loc45 = loc("/usr/include/time.h":76:38)
#loc46 = loc("CWE398_Poor_Code_Quality__empty_if_17.c":87:15)
#loc47 = loc("CWE398_Poor_Code_Quality__empty_if_17.c":89:15)
#loc48 = loc("CWE398_Poor_Code_Quality__empty_if_17.c":92:15)
#loc49 = loc("CWE398_Poor_Code_Quality__empty_if_17.c":94:15)
#loc50 = loc("CWE398_Poor_Code_Quality__empty_if_17.c":82:1)
#loc51 = loc("CWE398_Poor_Code_Quality__empty_if_17.c":97:1)
#loc56 = loc("CWE398_Poor_Code_Quality__empty_if_17.c":83:1)
#loc57 = loc("CWE398_Poor_Code_Quality__empty_if_17.c":85:27)
#loc58 = loc("CWE398_Poor_Code_Quality__empty_if_17.c":85:22)
#loc59 = loc("CWE398_Poor_Code_Quality__empty_if_17.c":85:5)
#loc60 = loc("CWE398_Poor_Code_Quality__empty_if_17.c":87:5)
#loc61 = loc("CWE398_Poor_Code_Quality__empty_if_17.c":88:5)
#loc62 = loc("CWE398_Poor_Code_Quality__empty_if_17.c":88:48)
#loc63 = loc("CWE398_Poor_Code_Quality__empty_if_17.c":89:5)
#loc64 = loc("CWE398_Poor_Code_Quality__empty_if_17.c":92:5)
#loc65 = loc("CWE398_Poor_Code_Quality__empty_if_17.c":93:5)
#loc66 = loc("CWE398_Poor_Code_Quality__empty_if_17.c":93:47)
#loc67 = loc("CWE398_Poor_Code_Quality__empty_if_17.c":94:5)
#loc68 = loc("CWE398_Poor_Code_Quality__empty_if_17.c":96:12)
#loc69 = loc("CWE398_Poor_Code_Quality__empty_if_17.c":96:5)
#loc70 = loc("CWE398_Poor_Code_Quality__empty_if_17.c":57:27)
#loc71 = loc("CWE398_Poor_Code_Quality__empty_if_17.c":64:19)
#loc72 = loc("CWE398_Poor_Code_Quality__empty_if_17.c":46:1)
#loc73 = loc("CWE398_Poor_Code_Quality__empty_if_17.c":66:1)
#loc74 = loc("CWE398_Poor_Code_Quality__empty_if_17.c":53:13)
#loc75 = loc("CWE398_Poor_Code_Quality__empty_if_17.c":53:17)
#loc76 = loc("CWE398_Poor_Code_Quality__empty_if_17.c":48:5)
#loc77 = loc("CWE398_Poor_Code_Quality__empty_if_17.c":48:9)
#loc78 = loc("CWE398_Poor_Code_Quality__empty_if_17.c":49:5)
#loc79 = loc("CWE398_Poor_Code_Quality__empty_if_17.c":65:5)
#loc80 = loc("CWE398_Poor_Code_Quality__empty_if_17.c":49:13)
#loc81 = loc("CWE398_Poor_Code_Quality__empty_if_17.c":49:9)
#loc82 = loc("CWE398_Poor_Code_Quality__empty_if_17.c":49:16)
#loc83 = loc("CWE398_Poor_Code_Quality__empty_if_17.c":49:20)
#loc84 = loc("CWE398_Poor_Code_Quality__empty_if_17.c":49:18)
#loc85 = loc("CWE398_Poor_Code_Quality__empty_if_17.c":50:5)
#loc86 = loc("CWE398_Poor_Code_Quality__empty_if_17.c":52:9)
#loc87 = loc("CWE398_Poor_Code_Quality__empty_if_17.c":63:9)
#loc88 = loc("CWE398_Poor_Code_Quality__empty_if_17.c":54:18)
#loc89 = loc("CWE398_Poor_Code_Quality__empty_if_17.c":54:27)
#loc90 = loc("CWE398_Poor_Code_Quality__empty_if_17.c":54:13)
#loc91 = loc("CWE398_Poor_Code_Quality__empty_if_17.c":54:28)
#loc92 = loc("CWE398_Poor_Code_Quality__empty_if_17.c":55:13)
#loc93 = loc("CWE398_Poor_Code_Quality__empty_if_17.c":62:13)
#loc94 = loc("CWE398_Poor_Code_Quality__empty_if_17.c":55:17)
#loc95 = loc("CWE398_Poor_Code_Quality__empty_if_17.c":55:22)
#loc96 = loc("CWE398_Poor_Code_Quality__empty_if_17.c":56:13)
#loc97 = loc("CWE398_Poor_Code_Quality__empty_if_17.c":58:13)
#loc98 = loc("CWE398_Poor_Code_Quality__empty_if_17.c":60:13)
#loc99 = loc("CWE398_Poor_Code_Quality__empty_if_17.c":57:17)
#loc100 = loc("CWE398_Poor_Code_Quality__empty_if_17.c":61:27)
#loc101 = loc("CWE398_Poor_Code_Quality__empty_if_17.c":61:17)
#loc102 = loc("CWE398_Poor_Code_Quality__empty_if_17.c":64:9)
#loc103 = loc("CWE398_Poor_Code_Quality__empty_if_17.c":49:24)
#loc104 = loc("CWE398_Poor_Code_Quality__empty_if_17.c":49:23)
#loc105 = loc(fused[#loc1, #loc2])
#loc106 = loc(fused[#loc3, #loc4])
#loc107 = loc(fused[#loc7, #loc8])
#loc108 = loc(fused[#loc9, #loc10])
#loc109 = loc(fused[#loc11, #loc12])
#loc110 = loc(fused[#loc13, #loc14])
#loc111 = loc(fused[#loc16, #loc15])
#loc112 = loc(fused[#loc17, #loc18])
#loc113 = loc(fused[#loc20, #loc14])
#loc114 = loc(fused[#loc21, #loc22])
#loc115 = loc(fused[#loc23, #loc24])
#loc116 = loc(fused[#loc25, #loc26])
#loc117 = loc(fused[#loc27, #loc28])
#loc118 = loc(fused[#loc29, #loc30])
#loc119 = loc(fused[#loc31, #loc32, #loc33, #loc28])
#loc120 = loc(fused[#loc37, #loc36])
#loc121 = loc(fused[#loc38, #loc39])
#loc122 = loc(fused[#loc40, #loc41])
#loc123 = loc(fused[#loc42, #loc43])
#loc124 = loc(fused[#loc44, #loc45])
#loc125 = loc(fused[#loc50, #loc51])
#loc128 = loc(fused[#loc61, #loc62])
#loc129 = loc(fused[#loc65, #loc66])
#loc130 = loc(fused[#loc69, #loc68])
#loc131 = loc(fused[#loc72, #loc73])
#loc132 = loc(fused[#loc74, #loc75])
#loc133 = loc(fused[#loc76, #loc77])
#loc134 = loc(fused[#loc78, #loc79])
#loc135 = loc(fused[#loc81, #loc80])
#loc136 = loc(fused[#loc82, #loc83])
#loc137 = loc(fused[#loc85, #loc79])
#loc138 = loc(fused[#loc86, #loc87])
#loc139 = loc(fused[#loc88, #loc89])
#loc140 = loc(fused[#loc90, #loc91])
#loc141 = loc(fused[#loc92, #loc93])
#loc142 = loc(fused[#loc94, #loc95])
#loc143 = loc(fused[#loc96, #loc97, #loc98, #loc93])
#loc144 = loc(fused[#loc104, #loc103])
