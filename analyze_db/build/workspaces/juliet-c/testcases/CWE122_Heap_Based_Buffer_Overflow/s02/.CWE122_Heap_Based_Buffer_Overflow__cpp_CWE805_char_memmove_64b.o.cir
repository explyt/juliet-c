!s32i = !cir.int<s, 32>
!s8i = !cir.int<s, 8>
!u64i = !cir.int<u, 64>
!void = !cir.void
#fn_attr = #cir<extra({inline = #cir.inline<no>, optnone = #cir.optnone, uwtable = #cir.uwtable<async>})>
#loc5 = loc("CWE122_Heap_Based_Buffer_Overflow__cpp_CWE805_char_memmove_64b.cpp":26:14)
#loc6 = loc("CWE122_Heap_Based_Buffer_Overflow__cpp_CWE805_char_memmove_64b.cpp":26:21)
#loc45 = loc("CWE122_Heap_Based_Buffer_Overflow__cpp_CWE805_char_memmove_64b.cpp":49:18)
#loc46 = loc("CWE122_Heap_Based_Buffer_Overflow__cpp_CWE805_char_memmove_64b.cpp":49:25)
#loc85 = loc(fused[#loc5, #loc6])
#loc97 = loc(fused[#loc45, #loc46])
module @"/workspaces/juliet-c/testcases/CWE122_Heap_Based_Buffer_Overflow/s02/CWE122_Heap_Based_Buffer_Overflow__cpp_CWE805_char_memmove_64b.cpp" attributes {cir.lang = #cir.lang<cxx>, cir.sob = #cir.signed_overflow_behavior<undefined>, cir.triple = "x86_64-unknown-linux-gnu", cir.type_size_info = #cir.type_size_info<char = 8, int = 32, size_t = 64>, cir.uwtable = #cir.uwtable<async>, dlti.dl_spec = #dlti.dl_spec<!llvm.ptr<272> = dense<64> : vector<4xi64>, !llvm.ptr<271> = dense<32> : vector<4xi64>, i64 = dense<64> : vector<2xi64>, i32 = dense<32> : vector<2xi64>, f128 = dense<128> : vector<2xi64>, f64 = dense<64> : vector<2xi64>, f16 = dense<16> : vector<2xi64>, i1 = dense<8> : vector<2xi64>, !llvm.ptr<270> = dense<32> : vector<4xi64>, !llvm.ptr = dense<64> : vector<4xi64>, i16 = dense<16> : vector<2xi64>, i8 = dense<8> : vector<2xi64>, f80 = dense<128> : vector<2xi64>, i128 = dense<128> : vector<2xi64>, "dlti.endianness" = "little", "dlti.mangling_mode" = "e", "dlti.stack_alignment" = 128 : i64>} {
  cir.func private @printLine(!cir.ptr<!s8i>) loc(#loc83)
  cir.func @_ZN61CWE122_Heap_Based_Buffer_Overflow__cpp_CWE805_char_memmove_647badSinkEPv(%arg0: !cir.ptr<!void> loc(fused[#loc5, #loc6])) extra(#fn_attr) {
    %0 = cir.alloca !cir.ptr<!void>, !cir.ptr<!cir.ptr<!void>>, ["dataVoidPtr", init] {alignment = 8 : i64} loc(#loc85)
    %1 = cir.alloca !cir.ptr<!cir.ptr<!s8i>>, !cir.ptr<!cir.ptr<!cir.ptr<!s8i>>>, ["dataPtr", init] {alignment = 8 : i64} loc(#loc86)
    %2 = cir.alloca !cir.ptr<!s8i>, !cir.ptr<!cir.ptr<!s8i>>, ["data", init] {alignment = 8 : i64} loc(#loc87)
    cir.store %arg0, %0 : !cir.ptr<!void>, !cir.ptr<!cir.ptr<!void>> loc(#loc11)
    %3 = cir.load %0 : !cir.ptr<!cir.ptr<!void>>, !cir.ptr<!void> loc(#loc8)
    %4 = cir.cast(bitcast, %3 : !cir.ptr<!void>), !cir.ptr<!cir.ptr<!s8i>> loc(#loc8)
    cir.store %4, %1 : !cir.ptr<!cir.ptr<!s8i>>, !cir.ptr<!cir.ptr<!cir.ptr<!s8i>>> loc(#loc86)
    %5 = cir.load deref %1 : !cir.ptr<!cir.ptr<!cir.ptr<!s8i>>>, !cir.ptr<!cir.ptr<!s8i>> loc(#loc12)
    %6 = cir.load %5 : !cir.ptr<!cir.ptr<!s8i>>, !cir.ptr<!s8i> loc(#loc13)
    cir.store %6, %2 : !cir.ptr<!s8i>, !cir.ptr<!cir.ptr<!s8i>> loc(#loc87)
    cir.scope {
      %7 = cir.alloca !cir.array<!s8i x 100>, !cir.ptr<!cir.array<!s8i x 100>>, ["source"] {alignment = 16 : i64} loc(#loc89)
      %8 = cir.cast(array_to_ptrdecay, %7 : !cir.ptr<!cir.array<!s8i x 100>>), !cir.ptr<!s8i> loc(#loc18)
      %9 = cir.cast(bitcast, %8 : !cir.ptr<!s8i>), !cir.ptr<!void> loc(#loc18)
      %10 = cir.const #cir.int<67> : !s8i loc(#loc19)
      %11 = cir.cast(integral, %10 : !s8i), !s32i loc(#loc19)
      %12 = cir.const #cir.int<100> : !s32i loc(#loc20)
      %13 = cir.const #cir.int<1> : !s32i loc(#loc21)
      %14 = cir.binop(sub, %12, %13) nsw : !s32i loc(#loc20)
      %15 = cir.cast(integral, %14 : !s32i), !u64i loc(#loc20)
      cir.libc.memset %15 bytes from %9 set to %11 : !cir.ptr<!void>, !s32i, !u64i loc(#loc90)
      %16 = cir.const #cir.int<0> : !s8i loc(#loc24)
      %17 = cir.const #cir.int<100> : !s32i loc(#loc25)
      %18 = cir.const #cir.int<1> : !s32i loc(#loc26)
      %19 = cir.binop(sub, %17, %18) nsw : !s32i loc(#loc25)
      %20 = cir.cast(array_to_ptrdecay, %7 : !cir.ptr<!cir.array<!s8i x 100>>), !cir.ptr<!s8i> loc(#loc27)
      %21 = cir.ptr_stride(%20 : !cir.ptr<!s8i>, %19 : !s32i), !cir.ptr<!s8i> loc(#loc27)
      cir.store %16, %21 : !s8i, !cir.ptr<!s8i> loc(#loc91)
      %22 = cir.load %2 : !cir.ptr<!cir.ptr<!s8i>>, !cir.ptr<!s8i> loc(#loc28)
      %23 = cir.cast(bitcast, %22 : !cir.ptr<!s8i>), !cir.ptr<!void> loc(#loc28)
      %24 = cir.cast(array_to_ptrdecay, %7 : !cir.ptr<!cir.array<!s8i x 100>>), !cir.ptr<!s8i> loc(#loc29)
      %25 = cir.cast(bitcast, %24 : !cir.ptr<!s8i>), !cir.ptr<!void> loc(#loc29)
      %26 = cir.const #cir.int<100> : !s32i loc(#loc30)
      %27 = cir.cast(integral, %26 : !s32i), !u64i loc(#loc30)
      %28 = cir.const #cir.int<1> : !u64i loc(#loc92)
      %29 = cir.binop(mul, %27, %28) : !u64i loc(#loc93)
      cir.libc.memmove %29 bytes from %25 to %23 : !cir.ptr<!void>, !u64i loc(#loc94)
      %30 = cir.const #cir.int<0> : !s8i loc(#loc35)
      %31 = cir.load %2 : !cir.ptr<!cir.ptr<!s8i>>, !cir.ptr<!s8i> loc(#loc36)
      %32 = cir.const #cir.int<100> : !s32i loc(#loc37)
      %33 = cir.const #cir.int<1> : !s32i loc(#loc38)
      %34 = cir.binop(sub, %32, %33) nsw : !s32i loc(#loc37)
      %35 = cir.ptr_stride(%31 : !cir.ptr<!s8i>, %34 : !s32i), !cir.ptr<!s8i> loc(#loc39)
      cir.store %30, %35 : !s8i, !cir.ptr<!s8i> loc(#loc95)
      %36 = cir.load %2 : !cir.ptr<!cir.ptr<!s8i>>, !cir.ptr<!s8i> loc(#loc40)
      cir.call @printLine(%36) : (!cir.ptr<!s8i>) -> () loc(#loc41)
      %37 = cir.load %2 : !cir.ptr<!cir.ptr<!s8i>>, !cir.ptr<!s8i> loc(#loc42)
      cir.delete.array %37 : <!s8i> loc(#loc42)
    } loc(#loc88)
    cir.return loc(#loc4)
  } loc(#loc84)
  cir.func @_ZN61CWE122_Heap_Based_Buffer_Overflow__cpp_CWE805_char_memmove_6411goodG2BSinkEPv(%arg0: !cir.ptr<!void> loc(fused[#loc45, #loc46])) extra(#fn_attr) {
    %0 = cir.alloca !cir.ptr<!void>, !cir.ptr<!cir.ptr<!void>>, ["dataVoidPtr", init] {alignment = 8 : i64} loc(#loc97)
    %1 = cir.alloca !cir.ptr<!cir.ptr<!s8i>>, !cir.ptr<!cir.ptr<!cir.ptr<!s8i>>>, ["dataPtr", init] {alignment = 8 : i64} loc(#loc98)
    %2 = cir.alloca !cir.ptr<!s8i>, !cir.ptr<!cir.ptr<!s8i>>, ["data", init] {alignment = 8 : i64} loc(#loc99)
    cir.store %arg0, %0 : !cir.ptr<!void>, !cir.ptr<!cir.ptr<!void>> loc(#loc51)
    %3 = cir.load %0 : !cir.ptr<!cir.ptr<!void>>, !cir.ptr<!void> loc(#loc48)
    %4 = cir.cast(bitcast, %3 : !cir.ptr<!void>), !cir.ptr<!cir.ptr<!s8i>> loc(#loc48)
    cir.store %4, %1 : !cir.ptr<!cir.ptr<!s8i>>, !cir.ptr<!cir.ptr<!cir.ptr<!s8i>>> loc(#loc98)
    %5 = cir.load deref %1 : !cir.ptr<!cir.ptr<!cir.ptr<!s8i>>>, !cir.ptr<!cir.ptr<!s8i>> loc(#loc52)
    %6 = cir.load %5 : !cir.ptr<!cir.ptr<!s8i>>, !cir.ptr<!s8i> loc(#loc53)
    cir.store %6, %2 : !cir.ptr<!s8i>, !cir.ptr<!cir.ptr<!s8i>> loc(#loc99)
    cir.scope {
      %7 = cir.alloca !cir.array<!s8i x 100>, !cir.ptr<!cir.array<!s8i x 100>>, ["source"] {alignment = 16 : i64} loc(#loc101)
      %8 = cir.cast(array_to_ptrdecay, %7 : !cir.ptr<!cir.array<!s8i x 100>>), !cir.ptr<!s8i> loc(#loc58)
      %9 = cir.cast(bitcast, %8 : !cir.ptr<!s8i>), !cir.ptr<!void> loc(#loc58)
      %10 = cir.const #cir.int<67> : !s8i loc(#loc59)
      %11 = cir.cast(integral, %10 : !s8i), !s32i loc(#loc59)
      %12 = cir.const #cir.int<100> : !s32i loc(#loc60)
      %13 = cir.const #cir.int<1> : !s32i loc(#loc61)
      %14 = cir.binop(sub, %12, %13) nsw : !s32i loc(#loc60)
      %15 = cir.cast(integral, %14 : !s32i), !u64i loc(#loc60)
      cir.libc.memset %15 bytes from %9 set to %11 : !cir.ptr<!void>, !s32i, !u64i loc(#loc102)
      %16 = cir.const #cir.int<0> : !s8i loc(#loc64)
      %17 = cir.const #cir.int<100> : !s32i loc(#loc65)
      %18 = cir.const #cir.int<1> : !s32i loc(#loc66)
      %19 = cir.binop(sub, %17, %18) nsw : !s32i loc(#loc65)
      %20 = cir.cast(array_to_ptrdecay, %7 : !cir.ptr<!cir.array<!s8i x 100>>), !cir.ptr<!s8i> loc(#loc67)
      %21 = cir.ptr_stride(%20 : !cir.ptr<!s8i>, %19 : !s32i), !cir.ptr<!s8i> loc(#loc67)
      cir.store %16, %21 : !s8i, !cir.ptr<!s8i> loc(#loc103)
      %22 = cir.load %2 : !cir.ptr<!cir.ptr<!s8i>>, !cir.ptr<!s8i> loc(#loc68)
      %23 = cir.cast(bitcast, %22 : !cir.ptr<!s8i>), !cir.ptr<!void> loc(#loc68)
      %24 = cir.cast(array_to_ptrdecay, %7 : !cir.ptr<!cir.array<!s8i x 100>>), !cir.ptr<!s8i> loc(#loc69)
      %25 = cir.cast(bitcast, %24 : !cir.ptr<!s8i>), !cir.ptr<!void> loc(#loc69)
      %26 = cir.const #cir.int<100> : !s32i loc(#loc70)
      %27 = cir.cast(integral, %26 : !s32i), !u64i loc(#loc70)
      %28 = cir.const #cir.int<1> : !u64i loc(#loc104)
      %29 = cir.binop(mul, %27, %28) : !u64i loc(#loc105)
      cir.libc.memmove %29 bytes from %25 to %23 : !cir.ptr<!void>, !u64i loc(#loc106)
      %30 = cir.const #cir.int<0> : !s8i loc(#loc75)
      %31 = cir.load %2 : !cir.ptr<!cir.ptr<!s8i>>, !cir.ptr<!s8i> loc(#loc76)
      %32 = cir.const #cir.int<100> : !s32i loc(#loc77)
      %33 = cir.const #cir.int<1> : !s32i loc(#loc78)
      %34 = cir.binop(sub, %32, %33) nsw : !s32i loc(#loc77)
      %35 = cir.ptr_stride(%31 : !cir.ptr<!s8i>, %34 : !s32i), !cir.ptr<!s8i> loc(#loc79)
      cir.store %30, %35 : !s8i, !cir.ptr<!s8i> loc(#loc107)
      %36 = cir.load %2 : !cir.ptr<!cir.ptr<!s8i>>, !cir.ptr<!s8i> loc(#loc80)
      cir.call @printLine(%36) : (!cir.ptr<!s8i>) -> () loc(#loc81)
      %37 = cir.load %2 : !cir.ptr<!cir.ptr<!s8i>>, !cir.ptr<!s8i> loc(#loc82)
      cir.delete.array %37 : <!s8i> loc(#loc82)
    } loc(#loc100)
    cir.return loc(#loc44)
  } loc(#loc96)
} loc(#loc)
#loc = loc("/workspaces/juliet-c/testcases/CWE122_Heap_Based_Buffer_Overflow/s02/CWE122_Heap_Based_Buffer_Overflow__cpp_CWE805_char_memmove_64b.cpp":0:0)
#loc1 = loc("../../../testcasesupport/std_testcase_io.h":14:1)
#loc2 = loc("../../../testcasesupport/std_testcase_io.h":14:33)
#loc3 = loc("CWE122_Heap_Based_Buffer_Overflow__cpp_CWE805_char_memmove_64b.cpp":26:1)
#loc4 = loc("CWE122_Heap_Based_Buffer_Overflow__cpp_CWE805_char_memmove_64b.cpp":42:1)
#loc7 = loc("CWE122_Heap_Based_Buffer_Overflow__cpp_CWE805_char_memmove_64b.cpp":29:5)
#loc8 = loc("CWE122_Heap_Based_Buffer_Overflow__cpp_CWE805_char_memmove_64b.cpp":29:34)
#loc9 = loc("CWE122_Heap_Based_Buffer_Overflow__cpp_CWE805_char_memmove_64b.cpp":31:5)
#loc10 = loc("CWE122_Heap_Based_Buffer_Overflow__cpp_CWE805_char_memmove_64b.cpp":31:28)
#loc11 = loc("CWE122_Heap_Based_Buffer_Overflow__cpp_CWE805_char_memmove_64b.cpp":27:1)
#loc12 = loc("CWE122_Heap_Based_Buffer_Overflow__cpp_CWE805_char_memmove_64b.cpp":31:21)
#loc13 = loc("CWE122_Heap_Based_Buffer_Overflow__cpp_CWE805_char_memmove_64b.cpp":31:20)
#loc14 = loc("CWE122_Heap_Based_Buffer_Overflow__cpp_CWE805_char_memmove_64b.cpp":32:5)
#loc15 = loc("CWE122_Heap_Based_Buffer_Overflow__cpp_CWE805_char_memmove_64b.cpp":41:5)
#loc16 = loc("CWE122_Heap_Based_Buffer_Overflow__cpp_CWE805_char_memmove_64b.cpp":33:9)
#loc17 = loc("CWE122_Heap_Based_Buffer_Overflow__cpp_CWE805_char_memmove_64b.cpp":33:24)
#loc18 = loc("CWE122_Heap_Based_Buffer_Overflow__cpp_CWE805_char_memmove_64b.cpp":34:16)
#loc19 = loc("CWE122_Heap_Based_Buffer_Overflow__cpp_CWE805_char_memmove_64b.cpp":34:24)
#loc20 = loc("CWE122_Heap_Based_Buffer_Overflow__cpp_CWE805_char_memmove_64b.cpp":34:29)
#loc21 = loc("CWE122_Heap_Based_Buffer_Overflow__cpp_CWE805_char_memmove_64b.cpp":34:33)
#loc22 = loc("CWE122_Heap_Based_Buffer_Overflow__cpp_CWE805_char_memmove_64b.cpp":34:9)
#loc23 = loc("CWE122_Heap_Based_Buffer_Overflow__cpp_CWE805_char_memmove_64b.cpp":34:34)
#loc24 = loc("CWE122_Heap_Based_Buffer_Overflow__cpp_CWE805_char_memmove_64b.cpp":35:25)
#loc25 = loc("CWE122_Heap_Based_Buffer_Overflow__cpp_CWE805_char_memmove_64b.cpp":35:16)
#loc26 = loc("CWE122_Heap_Based_Buffer_Overflow__cpp_CWE805_char_memmove_64b.cpp":35:20)
#loc27 = loc("CWE122_Heap_Based_Buffer_Overflow__cpp_CWE805_char_memmove_64b.cpp":35:9)
#loc28 = loc("CWE122_Heap_Based_Buffer_Overflow__cpp_CWE805_char_memmove_64b.cpp":37:17)
#loc29 = loc("CWE122_Heap_Based_Buffer_Overflow__cpp_CWE805_char_memmove_64b.cpp":37:23)
#loc30 = loc("CWE122_Heap_Based_Buffer_Overflow__cpp_CWE805_char_memmove_64b.cpp":37:31)
#loc31 = loc("CWE122_Heap_Based_Buffer_Overflow__cpp_CWE805_char_memmove_64b.cpp":37:35)
#loc32 = loc("CWE122_Heap_Based_Buffer_Overflow__cpp_CWE805_char_memmove_64b.cpp":37:46)
#loc33 = loc("CWE122_Heap_Based_Buffer_Overflow__cpp_CWE805_char_memmove_64b.cpp":37:9)
#loc34 = loc("CWE122_Heap_Based_Buffer_Overflow__cpp_CWE805_char_memmove_64b.cpp":37:47)
#loc35 = loc("CWE122_Heap_Based_Buffer_Overflow__cpp_CWE805_char_memmove_64b.cpp":38:23)
#loc36 = loc("CWE122_Heap_Based_Buffer_Overflow__cpp_CWE805_char_memmove_64b.cpp":38:9)
#loc37 = loc("CWE122_Heap_Based_Buffer_Overflow__cpp_CWE805_char_memmove_64b.cpp":38:14)
#loc38 = loc("CWE122_Heap_Based_Buffer_Overflow__cpp_CWE805_char_memmove_64b.cpp":38:18)
#loc39 = loc("CWE122_Heap_Based_Buffer_Overflow__cpp_CWE805_char_memmove_64b.cpp":38:19)
#loc40 = loc("CWE122_Heap_Based_Buffer_Overflow__cpp_CWE805_char_memmove_64b.cpp":39:19)
#loc41 = loc("CWE122_Heap_Based_Buffer_Overflow__cpp_CWE805_char_memmove_64b.cpp":39:9)
#loc42 = loc("CWE122_Heap_Based_Buffer_Overflow__cpp_CWE805_char_memmove_64b.cpp":40:19)
#loc43 = loc("CWE122_Heap_Based_Buffer_Overflow__cpp_CWE805_char_memmove_64b.cpp":49:1)
#loc44 = loc("CWE122_Heap_Based_Buffer_Overflow__cpp_CWE805_char_memmove_64b.cpp":65:1)
#loc47 = loc("CWE122_Heap_Based_Buffer_Overflow__cpp_CWE805_char_memmove_64b.cpp":52:5)
#loc48 = loc("CWE122_Heap_Based_Buffer_Overflow__cpp_CWE805_char_memmove_64b.cpp":52:34)
#loc49 = loc("CWE122_Heap_Based_Buffer_Overflow__cpp_CWE805_char_memmove_64b.cpp":54:5)
#loc50 = loc("CWE122_Heap_Based_Buffer_Overflow__cpp_CWE805_char_memmove_64b.cpp":54:28)
#loc51 = loc("CWE122_Heap_Based_Buffer_Overflow__cpp_CWE805_char_memmove_64b.cpp":50:1)
#loc52 = loc("CWE122_Heap_Based_Buffer_Overflow__cpp_CWE805_char_memmove_64b.cpp":54:21)
#loc53 = loc("CWE122_Heap_Based_Buffer_Overflow__cpp_CWE805_char_memmove_64b.cpp":54:20)
#loc54 = loc("CWE122_Heap_Based_Buffer_Overflow__cpp_CWE805_char_memmove_64b.cpp":55:5)
#loc55 = loc("CWE122_Heap_Based_Buffer_Overflow__cpp_CWE805_char_memmove_64b.cpp":64:5)
#loc56 = loc("CWE122_Heap_Based_Buffer_Overflow__cpp_CWE805_char_memmove_64b.cpp":56:9)
#loc57 = loc("CWE122_Heap_Based_Buffer_Overflow__cpp_CWE805_char_memmove_64b.cpp":56:24)
#loc58 = loc("CWE122_Heap_Based_Buffer_Overflow__cpp_CWE805_char_memmove_64b.cpp":57:16)
#loc59 = loc("CWE122_Heap_Based_Buffer_Overflow__cpp_CWE805_char_memmove_64b.cpp":57:24)
#loc60 = loc("CWE122_Heap_Based_Buffer_Overflow__cpp_CWE805_char_memmove_64b.cpp":57:29)
#loc61 = loc("CWE122_Heap_Based_Buffer_Overflow__cpp_CWE805_char_memmove_64b.cpp":57:33)
#loc62 = loc("CWE122_Heap_Based_Buffer_Overflow__cpp_CWE805_char_memmove_64b.cpp":57:9)
#loc63 = loc("CWE122_Heap_Based_Buffer_Overflow__cpp_CWE805_char_memmove_64b.cpp":57:34)
#loc64 = loc("CWE122_Heap_Based_Buffer_Overflow__cpp_CWE805_char_memmove_64b.cpp":58:25)
#loc65 = loc("CWE122_Heap_Based_Buffer_Overflow__cpp_CWE805_char_memmove_64b.cpp":58:16)
#loc66 = loc("CWE122_Heap_Based_Buffer_Overflow__cpp_CWE805_char_memmove_64b.cpp":58:20)
#loc67 = loc("CWE122_Heap_Based_Buffer_Overflow__cpp_CWE805_char_memmove_64b.cpp":58:9)
#loc68 = loc("CWE122_Heap_Based_Buffer_Overflow__cpp_CWE805_char_memmove_64b.cpp":60:17)
#loc69 = loc("CWE122_Heap_Based_Buffer_Overflow__cpp_CWE805_char_memmove_64b.cpp":60:23)
#loc70 = loc("CWE122_Heap_Based_Buffer_Overflow__cpp_CWE805_char_memmove_64b.cpp":60:31)
#loc71 = loc("CWE122_Heap_Based_Buffer_Overflow__cpp_CWE805_char_memmove_64b.cpp":60:35)
#loc72 = loc("CWE122_Heap_Based_Buffer_Overflow__cpp_CWE805_char_memmove_64b.cpp":60:46)
#loc73 = loc("CWE122_Heap_Based_Buffer_Overflow__cpp_CWE805_char_memmove_64b.cpp":60:9)
#loc74 = loc("CWE122_Heap_Based_Buffer_Overflow__cpp_CWE805_char_memmove_64b.cpp":60:47)
#loc75 = loc("CWE122_Heap_Based_Buffer_Overflow__cpp_CWE805_char_memmove_64b.cpp":61:23)
#loc76 = loc("CWE122_Heap_Based_Buffer_Overflow__cpp_CWE805_char_memmove_64b.cpp":61:9)
#loc77 = loc("CWE122_Heap_Based_Buffer_Overflow__cpp_CWE805_char_memmove_64b.cpp":61:14)
#loc78 = loc("CWE122_Heap_Based_Buffer_Overflow__cpp_CWE805_char_memmove_64b.cpp":61:18)
#loc79 = loc("CWE122_Heap_Based_Buffer_Overflow__cpp_CWE805_char_memmove_64b.cpp":61:19)
#loc80 = loc("CWE122_Heap_Based_Buffer_Overflow__cpp_CWE805_char_memmove_64b.cpp":62:19)
#loc81 = loc("CWE122_Heap_Based_Buffer_Overflow__cpp_CWE805_char_memmove_64b.cpp":62:9)
#loc82 = loc("CWE122_Heap_Based_Buffer_Overflow__cpp_CWE805_char_memmove_64b.cpp":63:19)
#loc83 = loc(fused[#loc1, #loc2])
#loc84 = loc(fused[#loc3, #loc4])
#loc86 = loc(fused[#loc7, #loc8])
#loc87 = loc(fused[#loc9, #loc10])
#loc88 = loc(fused[#loc14, #loc15])
#loc89 = loc(fused[#loc16, #loc17])
#loc90 = loc(fused[#loc22, #loc23])
#loc91 = loc(fused[#loc27, #loc24])
#loc92 = loc(fused[#loc31, #loc32])
#loc93 = loc(fused[#loc30, #loc32])
#loc94 = loc(fused[#loc33, #loc34])
#loc95 = loc(fused[#loc36, #loc35])
#loc96 = loc(fused[#loc43, #loc44])
#loc98 = loc(fused[#loc47, #loc48])
#loc99 = loc(fused[#loc49, #loc50])
#loc100 = loc(fused[#loc54, #loc55])
#loc101 = loc(fused[#loc56, #loc57])
#loc102 = loc(fused[#loc62, #loc63])
#loc103 = loc(fused[#loc67, #loc64])
#loc104 = loc(fused[#loc71, #loc72])
#loc105 = loc(fused[#loc70, #loc72])
#loc106 = loc(fused[#loc73, #loc74])
#loc107 = loc(fused[#loc76, #loc75])
