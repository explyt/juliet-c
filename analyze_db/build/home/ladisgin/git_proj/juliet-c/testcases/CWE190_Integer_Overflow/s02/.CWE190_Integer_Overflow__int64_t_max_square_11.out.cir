!s32i = !cir.int<s, 32>
!s64i = !cir.int<s, 64>
!s8i = !cir.int<s, 8>
!u32i = !cir.int<u, 32>
!void = !cir.void
#fn_attr = #cir<extra({inline = #cir.inline<no>, nothrow = #cir.nothrow, optnone = #cir.optnone})>
#fn_attr1 = #cir<extra({nothrow = #cir.nothrow})>
#loc52 = loc("CWE190_Integer_Overflow__int64_t_max_square_11.c":165:10)
#loc53 = loc("CWE190_Integer_Overflow__int64_t_max_square_11.c":165:14)
#loc54 = loc("CWE190_Integer_Overflow__int64_t_max_square_11.c":165:20)
#loc55 = loc("CWE190_Integer_Overflow__int64_t_max_square_11.c":165:32)
#loc226 = loc(fused[#loc52, #loc53])
#loc227 = loc(fused[#loc54, #loc55])
module @"/home/ladisgin/git_proj/juliet-c/testcases/CWE190_Integer_Overflow/s02/CWE190_Integer_Overflow__int64_t_max_square_11.c" attributes {cir.lang = #cir.lang<c>, cir.sob = #cir.signed_overflow_behavior<undefined>, cir.triple = "x86_64-unknown-linux-gnu", dlti.dl_spec = #dlti.dl_spec<!llvm.ptr<271> = dense<32> : vector<4xi64>, !llvm.ptr<272> = dense<64> : vector<4xi64>, f128 = dense<128> : vector<2xi64>, f16 = dense<16> : vector<2xi64>, !llvm.ptr<270> = dense<32> : vector<4xi64>, f64 = dense<64> : vector<2xi64>, i32 = dense<32> : vector<2xi64>, i16 = dense<16> : vector<2xi64>, i8 = dense<8> : vector<2xi64>, i1 = dense<8> : vector<2xi64>, !llvm.ptr = dense<64> : vector<4xi64>, f80 = dense<128> : vector<2xi64>, i128 = dense<128> : vector<2xi64>, i64 = dense<64> : vector<2xi64>, "dlti.endianness" = "little", "dlti.stack_alignment" = 128 : i64>} {
  cir.func no_proto private @globalReturnsTrue(...) -> !s32i loc(#loc203)
  cir.func private @printLongLongLine(!s64i) loc(#loc204)
  cir.func no_proto @CWE190_Integer_Overflow__int64_t_max_square_11_bad() extra(#fn_attr) {
    %0 = cir.alloca !s64i, !cir.ptr<!s64i>, ["result", init] {alignment = 8 : i64} loc(#loc206)
    %1 = cir.alloca !s64i, !cir.ptr<!s64i>, ["data"] {alignment = 8 : i64} loc(#loc207)
    %2 = cir.const #cir.int<0> : !s64i loc(#loc11)
    cir.store %2, %1 : !s64i, !cir.ptr<!s64i> loc(#loc208)
    cir.br ^bb1 loc(#loc209)
  ^bb1:  // pred: ^bb0
    %3 = cir.get_global @globalReturnsTrue : !cir.ptr<!cir.func<!s32i (...)>> loc(#loc210)
    %4 = cir.cast(bitcast, %3 : !cir.ptr<!cir.func<!s32i (...)>>), !cir.ptr<!cir.func<!s32i ()>> loc(#loc210)
    %5 = cir.call %4() : (!cir.ptr<!cir.func<!s32i ()>>) -> !s32i loc(#loc15)
    %6 = cir.cast(int_to_bool, %5 : !s32i), !cir.bool loc(#loc15)
    cir.brcond %6 ^bb2, ^bb3 loc(#loc211)
  ^bb2:  // pred: ^bb1
    %7 = cir.const #cir.int<9223372036854775807> : !s64i loc(#loc18)
    cir.store %7, %1 : !s64i, !cir.ptr<!s64i> loc(#loc212)
    cir.br ^bb3 loc(#loc14)
  ^bb3:  // 2 preds: ^bb1, ^bb2
    cir.br ^bb4 loc(#loc14)
  ^bb4:  // pred: ^bb3
    cir.br ^bb5 loc(#loc213)
  ^bb5:  // pred: ^bb4
    %8 = cir.get_global @globalReturnsTrue : !cir.ptr<!cir.func<!s32i (...)>> loc(#loc214)
    %9 = cir.cast(bitcast, %8 : !cir.ptr<!cir.func<!s32i (...)>>), !cir.ptr<!cir.func<!s32i ()>> loc(#loc214)
    %10 = cir.call %9() : (!cir.ptr<!cir.func<!s32i ()>>) -> !s32i loc(#loc22)
    %11 = cir.cast(int_to_bool, %10 : !s32i), !cir.bool loc(#loc22)
    cir.brcond %11 ^bb6, ^bb9 loc(#loc215)
  ^bb6:  // pred: ^bb5
    cir.br ^bb7 loc(#loc216)
  ^bb7:  // pred: ^bb6
    %12 = cir.load %1 : !cir.ptr<!s64i>, !s64i loc(#loc27)
    %13 = cir.load %1 : !cir.ptr<!s64i>, !s64i loc(#loc8)
    %14 = cir.binop(mul, %12, %13) nsw : !s64i loc(#loc27)
    cir.store %14, %0 : !s64i, !cir.ptr<!s64i> loc(#loc206)
    %15 = cir.load %0 : !cir.ptr<!s64i>, !s64i loc(#loc28)
    cir.call @printLongLongLine(%15) : (!s64i) -> () loc(#loc29)
    cir.br ^bb8 loc(#loc26)
  ^bb8:  // pred: ^bb7
    cir.br ^bb9 loc(#loc21)
  ^bb9:  // 2 preds: ^bb5, ^bb8
    cir.br ^bb10 loc(#loc21)
  ^bb10:  // pred: ^bb9
    cir.return loc(#loc6)
  } loc(#loc205)
  cir.func no_proto @CWE190_Integer_Overflow__int64_t_max_square_11_good() extra(#fn_attr) {
    %0 = cir.get_global @goodB2G1 : !cir.ptr<!cir.func<!void ()>> loc(#loc218)
    cir.call %0() : (!cir.ptr<!cir.func<!void ()>>) -> () loc(#loc32)
    %1 = cir.get_global @goodB2G2 : !cir.ptr<!cir.func<!void ()>> loc(#loc219)
    cir.call %1() : (!cir.ptr<!cir.func<!void ()>>) -> () loc(#loc34)
    %2 = cir.get_global @goodG2B1 : !cir.ptr<!cir.func<!void ()>> loc(#loc220)
    cir.call %2() : (!cir.ptr<!cir.func<!void ()>>) -> () loc(#loc36)
    %3 = cir.get_global @goodG2B2 : !cir.ptr<!cir.func<!void ()>> loc(#loc221)
    cir.call %3() : (!cir.ptr<!cir.func<!void ()>>) -> () loc(#loc38)
    cir.return loc(#loc31)
  } loc(#loc217)
  cir.func private @srand(!u32i) extra(#fn_attr1) loc(#loc222)
  cir.func private @time(!cir.ptr<!s64i>) -> !s64i extra(#fn_attr1) loc(#loc223)
  cir.func private @printLine(!cir.ptr<!s8i>) loc(#loc224)
  cir.global "private" constant cir_private dsolocal @".str" = #cir.const_array<"Calling good()...\00" : !cir.array<!s8i x 18>> : !cir.array<!s8i x 18> {alignment = 1 : i64} loc(#loc46)
  cir.global "private" constant cir_private dsolocal @".str.1" = #cir.const_array<"Finished good()\00" : !cir.array<!s8i x 16>> : !cir.array<!s8i x 16> {alignment = 1 : i64} loc(#loc47)
  cir.global "private" constant cir_private dsolocal @".str.2" = #cir.const_array<"Calling bad()...\00" : !cir.array<!s8i x 17>> : !cir.array<!s8i x 17> {alignment = 1 : i64} loc(#loc48)
  cir.global "private" constant cir_private dsolocal @".str.3" = #cir.const_array<"Finished bad()\00" : !cir.array<!s8i x 15>> : !cir.array<!s8i x 15> {alignment = 1 : i64} loc(#loc49)
  cir.func @main(%arg0: !s32i loc(fused[#loc52, #loc53]), %arg1: !cir.ptr<!cir.ptr<!s8i>> loc(fused[#loc54, #loc55])) -> !s32i extra(#fn_attr) {
    %0 = cir.alloca !s32i, !cir.ptr<!s32i>, ["argc", init] {alignment = 4 : i64} loc(#loc226)
    %1 = cir.alloca !cir.ptr<!cir.ptr<!s8i>>, !cir.ptr<!cir.ptr<!cir.ptr<!s8i>>>, ["argv", init] {alignment = 8 : i64} loc(#loc227)
    %2 = cir.alloca !s32i, !cir.ptr<!s32i>, ["__retval"] {alignment = 4 : i64} loc(#loc51)
    cir.store %arg0, %0 : !s32i, !cir.ptr<!s32i> loc(#loc56)
    cir.store %arg1, %1 : !cir.ptr<!cir.ptr<!s8i>>, !cir.ptr<!cir.ptr<!cir.ptr<!s8i>>> loc(#loc56)
    %3 = cir.const #cir.ptr<null> : !cir.ptr<!s64i> loc(#loc57)
    %4 = cir.call @time(%3) : (!cir.ptr<!s64i>) -> !s64i extra(#fn_attr1) loc(#loc58)
    %5 = cir.cast(integral, %4 : !s64i), !u32i loc(#loc58)
    cir.call @srand(%5) : (!u32i) -> () extra(#fn_attr1) loc(#loc59)
    %6 = cir.get_global @".str" : !cir.ptr<!cir.array<!s8i x 18>> loc(#loc46)
    %7 = cir.cast(array_to_ptrdecay, %6 : !cir.ptr<!cir.array<!s8i x 18>>), !cir.ptr<!s8i> loc(#loc46)
    cir.call @printLine(%7) : (!cir.ptr<!s8i>) -> () loc(#loc60)
    %8 = cir.get_global @CWE190_Integer_Overflow__int64_t_max_square_11_good : !cir.ptr<!cir.func<!void ()>> loc(#loc228)
    cir.call @CWE190_Integer_Overflow__int64_t_max_square_11_good() : () -> () loc(#loc61)
    %9 = cir.get_global @".str.1" : !cir.ptr<!cir.array<!s8i x 16>> loc(#loc47)
    %10 = cir.cast(array_to_ptrdecay, %9 : !cir.ptr<!cir.array<!s8i x 16>>), !cir.ptr<!s8i> loc(#loc47)
    cir.call @printLine(%10) : (!cir.ptr<!s8i>) -> () loc(#loc63)
    %11 = cir.get_global @".str.2" : !cir.ptr<!cir.array<!s8i x 17>> loc(#loc48)
    %12 = cir.cast(array_to_ptrdecay, %11 : !cir.ptr<!cir.array<!s8i x 17>>), !cir.ptr<!s8i> loc(#loc48)
    cir.call @printLine(%12) : (!cir.ptr<!s8i>) -> () loc(#loc64)
    %13 = cir.get_global @CWE190_Integer_Overflow__int64_t_max_square_11_bad : !cir.ptr<!cir.func<!void ()>> loc(#loc229)
    cir.call @CWE190_Integer_Overflow__int64_t_max_square_11_bad() : () -> () loc(#loc65)
    %14 = cir.get_global @".str.3" : !cir.ptr<!cir.array<!s8i x 15>> loc(#loc49)
    %15 = cir.cast(array_to_ptrdecay, %14 : !cir.ptr<!cir.array<!s8i x 15>>), !cir.ptr<!s8i> loc(#loc49)
    cir.call @printLine(%15) : (!cir.ptr<!s8i>) -> () loc(#loc67)
    %16 = cir.const #cir.int<0> : !s32i loc(#loc68)
    cir.store %16, %2 : !s32i, !cir.ptr<!s32i> loc(#loc230)
    %17 = cir.load %2 : !cir.ptr<!s32i>, !s32i loc(#loc230)
    cir.return %17 : !s32i loc(#loc230)
  } loc(#loc225)
  cir.func no_proto private @globalReturnsFalse(...) -> !s32i loc(#loc231)
  cir.global "private" constant cir_private dsolocal @".str.4" = #cir.const_array<"Benign, fixed string\00" : !cir.array<!s8i x 21>> : !cir.array<!s8i x 21> {alignment = 1 : i64} loc(#loc72)
  cir.func private @imaxabs(!s64i) -> !s64i extra(#fn_attr1) loc(#loc232)
  cir.func private @sqrtl(!cir.long_double<!cir.f80>) -> !cir.long_double<!cir.f80> extra(#fn_attr1) loc(#loc75)
  cir.global "private" constant cir_private dsolocal @".str.5" = #cir.const_array<"data value is too large to perform arithmetic safely.\00" : !cir.array<!s8i x 54>> : !cir.array<!s8i x 54> {alignment = 1 : i64} loc(#loc76)
  cir.func no_proto internal private @goodB2G1() extra(#fn_attr) {
    %0 = cir.alloca !s64i, !cir.ptr<!s64i>, ["result", init] {alignment = 8 : i64} loc(#loc234)
    %1 = cir.alloca !s64i, !cir.ptr<!s64i>, ["data"] {alignment = 8 : i64} loc(#loc235)
    %2 = cir.const #cir.int<0> : !s64i loc(#loc83)
    cir.store %2, %1 : !s64i, !cir.ptr<!s64i> loc(#loc236)
    cir.br ^bb1 loc(#loc237)
  ^bb1:  // pred: ^bb0
    %3 = cir.get_global @globalReturnsTrue : !cir.ptr<!cir.func<!s32i (...)>> loc(#loc238)
    %4 = cir.cast(bitcast, %3 : !cir.ptr<!cir.func<!s32i (...)>>), !cir.ptr<!cir.func<!s32i ()>> loc(#loc238)
    %5 = cir.call %4() : (!cir.ptr<!cir.func<!s32i ()>>) -> !s32i loc(#loc87)
    %6 = cir.cast(int_to_bool, %5 : !s32i), !cir.bool loc(#loc87)
    cir.brcond %6 ^bb2, ^bb3 loc(#loc239)
  ^bb2:  // pred: ^bb1
    %7 = cir.const #cir.int<9223372036854775807> : !s64i loc(#loc90)
    cir.store %7, %1 : !s64i, !cir.ptr<!s64i> loc(#loc240)
    cir.br ^bb3 loc(#loc86)
  ^bb3:  // 2 preds: ^bb1, ^bb2
    cir.br ^bb4 loc(#loc86)
  ^bb4:  // pred: ^bb3
    cir.br ^bb5 loc(#loc241)
  ^bb5:  // pred: ^bb4
    %8 = cir.get_global @globalReturnsFalse : !cir.ptr<!cir.func<!s32i (...)>> loc(#loc242)
    %9 = cir.cast(bitcast, %8 : !cir.ptr<!cir.func<!s32i (...)>>), !cir.ptr<!cir.func<!s32i ()>> loc(#loc242)
    %10 = cir.call %9() : (!cir.ptr<!cir.func<!s32i ()>>) -> !s32i loc(#loc94)
    %11 = cir.cast(int_to_bool, %10 : !s32i), !cir.bool loc(#loc94)
    cir.brcond %11 ^bb6, ^bb7 loc(#loc243)
  ^bb6:  // pred: ^bb5
    %12 = cir.get_global @".str.4" : !cir.ptr<!cir.array<!s8i x 21>> loc(#loc72)
    %13 = cir.cast(array_to_ptrdecay, %12 : !cir.ptr<!cir.array<!s8i x 21>>), !cir.ptr<!s8i> loc(#loc72)
    cir.call @printLine(%13) : (!cir.ptr<!s8i>) -> () loc(#loc99)
    cir.br ^bb13 loc(#loc97)
  ^bb7:  // pred: ^bb5
    cir.br ^bb8 loc(#loc244)
  ^bb8:  // pred: ^bb7
    %14 = cir.load %1 : !cir.ptr<!s64i>, !s64i loc(#loc102)
    %15 = cir.call @imaxabs(%14) : (!s64i) -> !s64i extra(#fn_attr1) loc(#loc103)
    %16 = cir.cast(int_to_float, %15 : !s64i), !cir.long_double<!cir.f80> loc(#loc103)
    %17 = cir.get_global @sqrtl : !cir.ptr<!cir.func<!cir.long_double<!cir.f80> (!cir.long_double<!cir.f80>)>> loc(#loc104)
    %18 = cir.const #cir.int<9223372036854775807> : !s64i loc(#loc105)
    %19 = cir.cast(int_to_float, %18 : !s64i), !cir.long_double<!cir.f80> loc(#loc105)
    %20 = cir.call @sqrtl(%19) : (!cir.long_double<!cir.f80>) -> !cir.long_double<!cir.f80> extra(#fn_attr1) loc(#loc104)
    %21 = cir.cmp(le, %16, %20) : !cir.long_double<!cir.f80>, !cir.bool loc(#loc245)
    cir.brcond %21 ^bb9, ^bb10 loc(#loc246)
  ^bb9:  // pred: ^bb8
    %22 = cir.load %1 : !cir.ptr<!s64i>, !s64i loc(#loc110)
    %23 = cir.load %1 : !cir.ptr<!s64i>, !s64i loc(#loc80)
    %24 = cir.binop(mul, %22, %23) nsw : !s64i loc(#loc110)
    cir.store %24, %0 : !s64i, !cir.ptr<!s64i> loc(#loc234)
    %25 = cir.load %0 : !cir.ptr<!s64i>, !s64i loc(#loc111)
    cir.call @printLongLongLine(%25) : (!s64i) -> () loc(#loc112)
    cir.br ^bb11 loc(#loc108)
  ^bb10:  // pred: ^bb8
    %26 = cir.get_global @".str.5" : !cir.ptr<!cir.array<!s8i x 54>> loc(#loc76)
    %27 = cir.cast(array_to_ptrdecay, %26 : !cir.ptr<!cir.array<!s8i x 54>>), !cir.ptr<!s8i> loc(#loc76)
    cir.call @printLine(%27) : (!cir.ptr<!s8i>) -> () loc(#loc113)
    cir.br ^bb11 loc(#loc101)
  ^bb11:  // 2 preds: ^bb9, ^bb10
    cir.br ^bb12 loc(#loc101)
  ^bb12:  // pred: ^bb11
    cir.br ^bb13 loc(#loc93)
  ^bb13:  // 2 preds: ^bb6, ^bb12
    cir.br ^bb14 loc(#loc93)
  ^bb14:  // pred: ^bb13
    cir.return loc(#loc78)
  } loc(#loc233)
  cir.func no_proto internal private @goodB2G2() extra(#fn_attr) {
    %0 = cir.alloca !s64i, !cir.ptr<!s64i>, ["result", init] {alignment = 8 : i64} loc(#loc248)
    %1 = cir.alloca !s64i, !cir.ptr<!s64i>, ["data"] {alignment = 8 : i64} loc(#loc249)
    %2 = cir.const #cir.int<0> : !s64i loc(#loc120)
    cir.store %2, %1 : !s64i, !cir.ptr<!s64i> loc(#loc250)
    cir.br ^bb1 loc(#loc251)
  ^bb1:  // pred: ^bb0
    %3 = cir.get_global @globalReturnsTrue : !cir.ptr<!cir.func<!s32i (...)>> loc(#loc252)
    %4 = cir.cast(bitcast, %3 : !cir.ptr<!cir.func<!s32i (...)>>), !cir.ptr<!cir.func<!s32i ()>> loc(#loc252)
    %5 = cir.call %4() : (!cir.ptr<!cir.func<!s32i ()>>) -> !s32i loc(#loc124)
    %6 = cir.cast(int_to_bool, %5 : !s32i), !cir.bool loc(#loc124)
    cir.brcond %6 ^bb2, ^bb3 loc(#loc253)
  ^bb2:  // pred: ^bb1
    %7 = cir.const #cir.int<9223372036854775807> : !s64i loc(#loc127)
    cir.store %7, %1 : !s64i, !cir.ptr<!s64i> loc(#loc254)
    cir.br ^bb3 loc(#loc123)
  ^bb3:  // 2 preds: ^bb1, ^bb2
    cir.br ^bb4 loc(#loc123)
  ^bb4:  // pred: ^bb3
    cir.br ^bb5 loc(#loc255)
  ^bb5:  // pred: ^bb4
    %8 = cir.get_global @globalReturnsTrue : !cir.ptr<!cir.func<!s32i (...)>> loc(#loc256)
    %9 = cir.cast(bitcast, %8 : !cir.ptr<!cir.func<!s32i (...)>>), !cir.ptr<!cir.func<!s32i ()>> loc(#loc256)
    %10 = cir.call %9() : (!cir.ptr<!cir.func<!s32i ()>>) -> !s32i loc(#loc131)
    %11 = cir.cast(int_to_bool, %10 : !s32i), !cir.bool loc(#loc131)
    cir.brcond %11 ^bb6, ^bb12 loc(#loc257)
  ^bb6:  // pred: ^bb5
    cir.br ^bb7 loc(#loc258)
  ^bb7:  // pred: ^bb6
    %12 = cir.load %1 : !cir.ptr<!s64i>, !s64i loc(#loc136)
    %13 = cir.call @imaxabs(%12) : (!s64i) -> !s64i extra(#fn_attr1) loc(#loc137)
    %14 = cir.cast(int_to_float, %13 : !s64i), !cir.long_double<!cir.f80> loc(#loc137)
    %15 = cir.get_global @sqrtl : !cir.ptr<!cir.func<!cir.long_double<!cir.f80> (!cir.long_double<!cir.f80>)>> loc(#loc138)
    %16 = cir.const #cir.int<9223372036854775807> : !s64i loc(#loc139)
    %17 = cir.cast(int_to_float, %16 : !s64i), !cir.long_double<!cir.f80> loc(#loc139)
    %18 = cir.call @sqrtl(%17) : (!cir.long_double<!cir.f80>) -> !cir.long_double<!cir.f80> extra(#fn_attr1) loc(#loc138)
    %19 = cir.cmp(le, %14, %18) : !cir.long_double<!cir.f80>, !cir.bool loc(#loc259)
    cir.brcond %19 ^bb8, ^bb9 loc(#loc260)
  ^bb8:  // pred: ^bb7
    %20 = cir.load %1 : !cir.ptr<!s64i>, !s64i loc(#loc144)
    %21 = cir.load %1 : !cir.ptr<!s64i>, !s64i loc(#loc117)
    %22 = cir.binop(mul, %20, %21) nsw : !s64i loc(#loc144)
    cir.store %22, %0 : !s64i, !cir.ptr<!s64i> loc(#loc248)
    %23 = cir.load %0 : !cir.ptr<!s64i>, !s64i loc(#loc145)
    cir.call @printLongLongLine(%23) : (!s64i) -> () loc(#loc146)
    cir.br ^bb10 loc(#loc142)
  ^bb9:  // pred: ^bb7
    %24 = cir.get_global @".str.5" : !cir.ptr<!cir.array<!s8i x 54>> loc(#loc147)
    %25 = cir.cast(array_to_ptrdecay, %24 : !cir.ptr<!cir.array<!s8i x 54>>), !cir.ptr<!s8i> loc(#loc147)
    cir.call @printLine(%25) : (!cir.ptr<!s8i>) -> () loc(#loc148)
    cir.br ^bb10 loc(#loc135)
  ^bb10:  // 2 preds: ^bb8, ^bb9
    cir.br ^bb11 loc(#loc135)
  ^bb11:  // pred: ^bb10
    cir.br ^bb12 loc(#loc130)
  ^bb12:  // 2 preds: ^bb5, ^bb11
    cir.br ^bb13 loc(#loc130)
  ^bb13:  // pred: ^bb12
    cir.return loc(#loc115)
  } loc(#loc247)
  cir.func no_proto internal private @goodG2B1() extra(#fn_attr) {
    %0 = cir.alloca !s64i, !cir.ptr<!s64i>, ["result", init] {alignment = 8 : i64} loc(#loc262)
    %1 = cir.alloca !s64i, !cir.ptr<!s64i>, ["data"] {alignment = 8 : i64} loc(#loc263)
    %2 = cir.const #cir.int<0> : !s64i loc(#loc155)
    cir.store %2, %1 : !s64i, !cir.ptr<!s64i> loc(#loc264)
    cir.br ^bb1 loc(#loc265)
  ^bb1:  // pred: ^bb0
    %3 = cir.get_global @globalReturnsFalse : !cir.ptr<!cir.func<!s32i (...)>> loc(#loc266)
    %4 = cir.cast(bitcast, %3 : !cir.ptr<!cir.func<!s32i (...)>>), !cir.ptr<!cir.func<!s32i ()>> loc(#loc266)
    %5 = cir.call %4() : (!cir.ptr<!cir.func<!s32i ()>>) -> !s32i loc(#loc159)
    %6 = cir.cast(int_to_bool, %5 : !s32i), !cir.bool loc(#loc159)
    cir.brcond %6 ^bb2, ^bb3 loc(#loc267)
  ^bb2:  // pred: ^bb1
    %7 = cir.get_global @".str.4" : !cir.ptr<!cir.array<!s8i x 21>> loc(#loc164)
    %8 = cir.cast(array_to_ptrdecay, %7 : !cir.ptr<!cir.array<!s8i x 21>>), !cir.ptr<!s8i> loc(#loc164)
    cir.call @printLine(%8) : (!cir.ptr<!s8i>) -> () loc(#loc165)
    cir.br ^bb4 loc(#loc162)
  ^bb3:  // pred: ^bb1
    %9 = cir.const #cir.int<2> : !s32i loc(#loc166)
    %10 = cir.cast(integral, %9 : !s32i), !s64i loc(#loc166)
    cir.store %10, %1 : !s64i, !cir.ptr<!s64i> loc(#loc268)
    cir.br ^bb4 loc(#loc158)
  ^bb4:  // 2 preds: ^bb2, ^bb3
    cir.br ^bb5 loc(#loc158)
  ^bb5:  // pred: ^bb4
    cir.br ^bb6 loc(#loc269)
  ^bb6:  // pred: ^bb5
    %11 = cir.get_global @globalReturnsTrue : !cir.ptr<!cir.func<!s32i (...)>> loc(#loc270)
    %12 = cir.cast(bitcast, %11 : !cir.ptr<!cir.func<!s32i (...)>>), !cir.ptr<!cir.func<!s32i ()>> loc(#loc270)
    %13 = cir.call %12() : (!cir.ptr<!cir.func<!s32i ()>>) -> !s32i loc(#loc170)
    %14 = cir.cast(int_to_bool, %13 : !s32i), !cir.bool loc(#loc170)
    cir.brcond %14 ^bb7, ^bb10 loc(#loc271)
  ^bb7:  // pred: ^bb6
    cir.br ^bb8 loc(#loc272)
  ^bb8:  // pred: ^bb7
    %15 = cir.load %1 : !cir.ptr<!s64i>, !s64i loc(#loc175)
    %16 = cir.load %1 : !cir.ptr<!s64i>, !s64i loc(#loc152)
    %17 = cir.binop(mul, %15, %16) nsw : !s64i loc(#loc175)
    cir.store %17, %0 : !s64i, !cir.ptr<!s64i> loc(#loc262)
    %18 = cir.load %0 : !cir.ptr<!s64i>, !s64i loc(#loc176)
    cir.call @printLongLongLine(%18) : (!s64i) -> () loc(#loc177)
    cir.br ^bb9 loc(#loc174)
  ^bb9:  // pred: ^bb8
    cir.br ^bb10 loc(#loc169)
  ^bb10:  // 2 preds: ^bb6, ^bb9
    cir.br ^bb11 loc(#loc169)
  ^bb11:  // pred: ^bb10
    cir.return loc(#loc150)
  } loc(#loc261)
  cir.func no_proto internal private @goodG2B2() extra(#fn_attr) {
    %0 = cir.alloca !s64i, !cir.ptr<!s64i>, ["result", init] {alignment = 8 : i64} loc(#loc274)
    %1 = cir.alloca !s64i, !cir.ptr<!s64i>, ["data"] {alignment = 8 : i64} loc(#loc275)
    %2 = cir.const #cir.int<0> : !s64i loc(#loc184)
    cir.store %2, %1 : !s64i, !cir.ptr<!s64i> loc(#loc276)
    cir.br ^bb1 loc(#loc277)
  ^bb1:  // pred: ^bb0
    %3 = cir.get_global @globalReturnsTrue : !cir.ptr<!cir.func<!s32i (...)>> loc(#loc278)
    %4 = cir.cast(bitcast, %3 : !cir.ptr<!cir.func<!s32i (...)>>), !cir.ptr<!cir.func<!s32i ()>> loc(#loc278)
    %5 = cir.call %4() : (!cir.ptr<!cir.func<!s32i ()>>) -> !s32i loc(#loc188)
    %6 = cir.cast(int_to_bool, %5 : !s32i), !cir.bool loc(#loc188)
    cir.brcond %6 ^bb2, ^bb3 loc(#loc279)
  ^bb2:  // pred: ^bb1
    %7 = cir.const #cir.int<2> : !s32i loc(#loc191)
    %8 = cir.cast(integral, %7 : !s32i), !s64i loc(#loc191)
    cir.store %8, %1 : !s64i, !cir.ptr<!s64i> loc(#loc280)
    cir.br ^bb3 loc(#loc187)
  ^bb3:  // 2 preds: ^bb1, ^bb2
    cir.br ^bb4 loc(#loc187)
  ^bb4:  // pred: ^bb3
    cir.br ^bb5 loc(#loc281)
  ^bb5:  // pred: ^bb4
    %9 = cir.get_global @globalReturnsTrue : !cir.ptr<!cir.func<!s32i (...)>> loc(#loc282)
    %10 = cir.cast(bitcast, %9 : !cir.ptr<!cir.func<!s32i (...)>>), !cir.ptr<!cir.func<!s32i ()>> loc(#loc282)
    %11 = cir.call %10() : (!cir.ptr<!cir.func<!s32i ()>>) -> !s32i loc(#loc195)
    %12 = cir.cast(int_to_bool, %11 : !s32i), !cir.bool loc(#loc195)
    cir.brcond %12 ^bb6, ^bb9 loc(#loc283)
  ^bb6:  // pred: ^bb5
    cir.br ^bb7 loc(#loc284)
  ^bb7:  // pred: ^bb6
    %13 = cir.load %1 : !cir.ptr<!s64i>, !s64i loc(#loc200)
    %14 = cir.load %1 : !cir.ptr<!s64i>, !s64i loc(#loc181)
    %15 = cir.binop(mul, %13, %14) nsw : !s64i loc(#loc200)
    cir.store %15, %0 : !s64i, !cir.ptr<!s64i> loc(#loc274)
    %16 = cir.load %0 : !cir.ptr<!s64i>, !s64i loc(#loc201)
    cir.call @printLongLongLine(%16) : (!s64i) -> () loc(#loc202)
    cir.br ^bb8 loc(#loc199)
  ^bb8:  // pred: ^bb7
    cir.br ^bb9 loc(#loc194)
  ^bb9:  // 2 preds: ^bb5, ^bb8
    cir.br ^bb10 loc(#loc194)
  ^bb10:  // pred: ^bb9
    cir.return loc(#loc179)
  } loc(#loc273)
} loc(#loc)
#loc = loc("/home/ladisgin/git_proj/juliet-c/testcases/CWE190_Integer_Overflow/s02/CWE190_Integer_Overflow__int64_t_max_square_11.c":0:0)
#loc1 = loc("../../../testcasesupport/std_testcase_io.h":48:1)
#loc2 = loc("../../../testcasesupport/std_testcase_io.h":48:23)
#loc3 = loc("../../../testcasesupport/std_testcase_io.h":26:1)
#loc4 = loc("../../../testcasesupport/std_testcase_io.h":26:49)
#loc5 = loc("CWE190_Integer_Overflow__int64_t_max_square_11.c":25:1)
#loc6 = loc("CWE190_Integer_Overflow__int64_t_max_square_11.c":42:1)
#loc7 = loc("CWE190_Integer_Overflow__int64_t_max_square_11.c":38:13)
#loc8 = loc("CWE190_Integer_Overflow__int64_t_max_square_11.c":38:37)
#loc9 = loc("CWE190_Integer_Overflow__int64_t_max_square_11.c":27:5)
#loc10 = loc("CWE190_Integer_Overflow__int64_t_max_square_11.c":27:13)
#loc11 = loc("CWE190_Integer_Overflow__int64_t_max_square_11.c":28:12)
#loc12 = loc("CWE190_Integer_Overflow__int64_t_max_square_11.c":28:5)
#loc13 = loc("CWE190_Integer_Overflow__int64_t_max_square_11.c":29:5)
#loc14 = loc("CWE190_Integer_Overflow__int64_t_max_square_11.c":33:5)
#loc15 = loc("CWE190_Integer_Overflow__int64_t_max_square_11.c":29:8)
#loc16 = loc("CWE190_Integer_Overflow__int64_t_max_square_11.c":29:26)
#loc17 = loc("CWE190_Integer_Overflow__int64_t_max_square_11.c":30:5)
#loc18 = loc("CWE190_Integer_Overflow__int64_t_max_square_11.c":32:16)
#loc19 = loc("CWE190_Integer_Overflow__int64_t_max_square_11.c":32:9)
#loc20 = loc("CWE190_Integer_Overflow__int64_t_max_square_11.c":34:5)
#loc21 = loc("CWE190_Integer_Overflow__int64_t_max_square_11.c":41:5)
#loc22 = loc("CWE190_Integer_Overflow__int64_t_max_square_11.c":34:8)
#loc23 = loc("CWE190_Integer_Overflow__int64_t_max_square_11.c":34:26)
#loc24 = loc("CWE190_Integer_Overflow__int64_t_max_square_11.c":35:5)
#loc25 = loc("CWE190_Integer_Overflow__int64_t_max_square_11.c":36:9)
#loc26 = loc("CWE190_Integer_Overflow__int64_t_max_square_11.c":40:9)
#loc27 = loc("CWE190_Integer_Overflow__int64_t_max_square_11.c":38:30)
#loc28 = loc("CWE190_Integer_Overflow__int64_t_max_square_11.c":39:31)
#loc29 = loc("CWE190_Integer_Overflow__int64_t_max_square_11.c":39:13)
#loc30 = loc("CWE190_Integer_Overflow__int64_t_max_square_11.c":148:1)
#loc31 = loc("CWE190_Integer_Overflow__int64_t_max_square_11.c":154:1)
#loc32 = loc("CWE190_Integer_Overflow__int64_t_max_square_11.c":150:5)
#loc33 = loc("CWE190_Integer_Overflow__int64_t_max_square_11.c":150:14)
#loc34 = loc("CWE190_Integer_Overflow__int64_t_max_square_11.c":151:5)
#loc35 = loc("CWE190_Integer_Overflow__int64_t_max_square_11.c":151:14)
#loc36 = loc("CWE190_Integer_Overflow__int64_t_max_square_11.c":152:5)
#loc37 = loc("CWE190_Integer_Overflow__int64_t_max_square_11.c":152:14)
#loc38 = loc("CWE190_Integer_Overflow__int64_t_max_square_11.c":153:5)
#loc39 = loc("CWE190_Integer_Overflow__int64_t_max_square_11.c":153:14)
#loc40 = loc("/usr/include/stdlib.h":575:1)
#loc41 = loc("/usr/include/stdlib.h":575:41)
#loc42 = loc("/usr/include/time.h":76:1)
#loc43 = loc("/usr/include/time.h":76:38)
#loc44 = loc("../../../testcasesupport/std_testcase_io.h":14:1)
#loc45 = loc("../../../testcasesupport/std_testcase_io.h":14:33)
#loc46 = loc("CWE190_Integer_Overflow__int64_t_max_square_11.c":170:15)
#loc47 = loc("CWE190_Integer_Overflow__int64_t_max_square_11.c":172:15)
#loc48 = loc("CWE190_Integer_Overflow__int64_t_max_square_11.c":175:15)
#loc49 = loc("CWE190_Integer_Overflow__int64_t_max_square_11.c":177:15)
#loc50 = loc("CWE190_Integer_Overflow__int64_t_max_square_11.c":165:1)
#loc51 = loc("CWE190_Integer_Overflow__int64_t_max_square_11.c":180:1)
#loc56 = loc("CWE190_Integer_Overflow__int64_t_max_square_11.c":166:1)
#loc57 = loc("CWE190_Integer_Overflow__int64_t_max_square_11.c":168:27)
#loc58 = loc("CWE190_Integer_Overflow__int64_t_max_square_11.c":168:22)
#loc59 = loc("CWE190_Integer_Overflow__int64_t_max_square_11.c":168:5)
#loc60 = loc("CWE190_Integer_Overflow__int64_t_max_square_11.c":170:5)
#loc61 = loc("CWE190_Integer_Overflow__int64_t_max_square_11.c":171:5)
#loc62 = loc("CWE190_Integer_Overflow__int64_t_max_square_11.c":171:57)
#loc63 = loc("CWE190_Integer_Overflow__int64_t_max_square_11.c":172:5)
#loc64 = loc("CWE190_Integer_Overflow__int64_t_max_square_11.c":175:5)
#loc65 = loc("CWE190_Integer_Overflow__int64_t_max_square_11.c":176:5)
#loc66 = loc("CWE190_Integer_Overflow__int64_t_max_square_11.c":176:56)
#loc67 = loc("CWE190_Integer_Overflow__int64_t_max_square_11.c":177:5)
#loc68 = loc("CWE190_Integer_Overflow__int64_t_max_square_11.c":179:12)
#loc69 = loc("CWE190_Integer_Overflow__int64_t_max_square_11.c":179:5)
#loc70 = loc("../../../testcasesupport/std_testcase_io.h":50:1)
#loc71 = loc("../../../testcasesupport/std_testcase_io.h":50:24)
#loc72 = loc("CWE190_Integer_Overflow__int64_t_max_square_11.c":61:19)
#loc73 = loc("/usr/include/inttypes.h":351:1)
#loc74 = loc("/usr/include/inttypes.h":351:74)
#loc75 = loc("/usr/include/bits/mathcalls.h":158:1)
#loc76 = loc("CWE190_Integer_Overflow__int64_t_max_square_11.c":73:23)
#loc77 = loc("CWE190_Integer_Overflow__int64_t_max_square_11.c":49:1)
#loc78 = loc("CWE190_Integer_Overflow__int64_t_max_square_11.c":76:1)
#loc79 = loc("CWE190_Integer_Overflow__int64_t_max_square_11.c":68:13)
#loc80 = loc("CWE190_Integer_Overflow__int64_t_max_square_11.c":68:37)
#loc81 = loc("CWE190_Integer_Overflow__int64_t_max_square_11.c":51:5)
#loc82 = loc("CWE190_Integer_Overflow__int64_t_max_square_11.c":51:13)
#loc83 = loc("CWE190_Integer_Overflow__int64_t_max_square_11.c":52:12)
#loc84 = loc("CWE190_Integer_Overflow__int64_t_max_square_11.c":52:5)
#loc85 = loc("CWE190_Integer_Overflow__int64_t_max_square_11.c":53:5)
#loc86 = loc("CWE190_Integer_Overflow__int64_t_max_square_11.c":57:5)
#loc87 = loc("CWE190_Integer_Overflow__int64_t_max_square_11.c":53:8)
#loc88 = loc("CWE190_Integer_Overflow__int64_t_max_square_11.c":53:26)
#loc89 = loc("CWE190_Integer_Overflow__int64_t_max_square_11.c":54:5)
#loc90 = loc("CWE190_Integer_Overflow__int64_t_max_square_11.c":56:16)
#loc91 = loc("CWE190_Integer_Overflow__int64_t_max_square_11.c":56:9)
#loc92 = loc("CWE190_Integer_Overflow__int64_t_max_square_11.c":58:5)
#loc93 = loc("CWE190_Integer_Overflow__int64_t_max_square_11.c":75:5)
#loc94 = loc("CWE190_Integer_Overflow__int64_t_max_square_11.c":58:8)
#loc95 = loc("CWE190_Integer_Overflow__int64_t_max_square_11.c":58:27)
#loc96 = loc("CWE190_Integer_Overflow__int64_t_max_square_11.c":59:5)
#loc97 = loc("CWE190_Integer_Overflow__int64_t_max_square_11.c":62:5)
#loc98 = loc("CWE190_Integer_Overflow__int64_t_max_square_11.c":64:5)
#loc99 = loc("CWE190_Integer_Overflow__int64_t_max_square_11.c":61:9)
#loc100 = loc("CWE190_Integer_Overflow__int64_t_max_square_11.c":66:9)
#loc101 = loc("CWE190_Integer_Overflow__int64_t_max_square_11.c":74:9)
#loc102 = loc("CWE190_Integer_Overflow__int64_t_max_square_11.c":66:31)
#loc103 = loc("CWE190_Integer_Overflow__int64_t_max_square_11.c":66:13)
#loc104 = loc("CWE190_Integer_Overflow__int64_t_max_square_11.c":66:40)
#loc105 = loc("CWE190_Integer_Overflow__int64_t_max_square_11.c":66:46)
#loc106 = loc("CWE190_Integer_Overflow__int64_t_max_square_11.c":66:55)
#loc107 = loc("CWE190_Integer_Overflow__int64_t_max_square_11.c":67:9)
#loc108 = loc("CWE190_Integer_Overflow__int64_t_max_square_11.c":70:9)
#loc109 = loc("CWE190_Integer_Overflow__int64_t_max_square_11.c":72:9)
#loc110 = loc("CWE190_Integer_Overflow__int64_t_max_square_11.c":68:30)
#loc111 = loc("CWE190_Integer_Overflow__int64_t_max_square_11.c":69:31)
#loc112 = loc("CWE190_Integer_Overflow__int64_t_max_square_11.c":69:13)
#loc113 = loc("CWE190_Integer_Overflow__int64_t_max_square_11.c":73:13)
#loc114 = loc("CWE190_Integer_Overflow__int64_t_max_square_11.c":79:1)
#loc115 = loc("CWE190_Integer_Overflow__int64_t_max_square_11.c":101:1)
#loc116 = loc("CWE190_Integer_Overflow__int64_t_max_square_11.c":93:13)
#loc117 = loc("CWE190_Integer_Overflow__int64_t_max_square_11.c":93:37)
#loc118 = loc("CWE190_Integer_Overflow__int64_t_max_square_11.c":81:5)
#loc119 = loc("CWE190_Integer_Overflow__int64_t_max_square_11.c":81:13)
#loc120 = loc("CWE190_Integer_Overflow__int64_t_max_square_11.c":82:12)
#loc121 = loc("CWE190_Integer_Overflow__int64_t_max_square_11.c":82:5)
#loc122 = loc("CWE190_Integer_Overflow__int64_t_max_square_11.c":83:5)
#loc123 = loc("CWE190_Integer_Overflow__int64_t_max_square_11.c":87:5)
#loc124 = loc("CWE190_Integer_Overflow__int64_t_max_square_11.c":83:8)
#loc125 = loc("CWE190_Integer_Overflow__int64_t_max_square_11.c":83:26)
#loc126 = loc("CWE190_Integer_Overflow__int64_t_max_square_11.c":84:5)
#loc127 = loc("CWE190_Integer_Overflow__int64_t_max_square_11.c":86:16)
#loc128 = loc("CWE190_Integer_Overflow__int64_t_max_square_11.c":86:9)
#loc129 = loc("CWE190_Integer_Overflow__int64_t_max_square_11.c":88:5)
#loc130 = loc("CWE190_Integer_Overflow__int64_t_max_square_11.c":100:5)
#loc131 = loc("CWE190_Integer_Overflow__int64_t_max_square_11.c":88:8)
#loc132 = loc("CWE190_Integer_Overflow__int64_t_max_square_11.c":88:26)
#loc133 = loc("CWE190_Integer_Overflow__int64_t_max_square_11.c":89:5)
#loc134 = loc("CWE190_Integer_Overflow__int64_t_max_square_11.c":91:9)
#loc135 = loc("CWE190_Integer_Overflow__int64_t_max_square_11.c":99:9)
#loc136 = loc("CWE190_Integer_Overflow__int64_t_max_square_11.c":91:31)
#loc137 = loc("CWE190_Integer_Overflow__int64_t_max_square_11.c":91:13)
#loc138 = loc("CWE190_Integer_Overflow__int64_t_max_square_11.c":91:40)
#loc139 = loc("CWE190_Integer_Overflow__int64_t_max_square_11.c":91:46)
#loc140 = loc("CWE190_Integer_Overflow__int64_t_max_square_11.c":91:55)
#loc141 = loc("CWE190_Integer_Overflow__int64_t_max_square_11.c":92:9)
#loc142 = loc("CWE190_Integer_Overflow__int64_t_max_square_11.c":95:9)
#loc143 = loc("CWE190_Integer_Overflow__int64_t_max_square_11.c":97:9)
#loc144 = loc("CWE190_Integer_Overflow__int64_t_max_square_11.c":93:30)
#loc145 = loc("CWE190_Integer_Overflow__int64_t_max_square_11.c":94:31)
#loc146 = loc("CWE190_Integer_Overflow__int64_t_max_square_11.c":94:13)
#loc147 = loc("CWE190_Integer_Overflow__int64_t_max_square_11.c":98:23)
#loc148 = loc("CWE190_Integer_Overflow__int64_t_max_square_11.c":98:13)
#loc149 = loc("CWE190_Integer_Overflow__int64_t_max_square_11.c":104:1)
#loc150 = loc("CWE190_Integer_Overflow__int64_t_max_square_11.c":126:1)
#loc151 = loc("CWE190_Integer_Overflow__int64_t_max_square_11.c":122:13)
#loc152 = loc("CWE190_Integer_Overflow__int64_t_max_square_11.c":122:37)
#loc153 = loc("CWE190_Integer_Overflow__int64_t_max_square_11.c":106:5)
#loc154 = loc("CWE190_Integer_Overflow__int64_t_max_square_11.c":106:13)
#loc155 = loc("CWE190_Integer_Overflow__int64_t_max_square_11.c":107:12)
#loc156 = loc("CWE190_Integer_Overflow__int64_t_max_square_11.c":107:5)
#loc157 = loc("CWE190_Integer_Overflow__int64_t_max_square_11.c":108:5)
#loc158 = loc("CWE190_Integer_Overflow__int64_t_max_square_11.c":117:5)
#loc159 = loc("CWE190_Integer_Overflow__int64_t_max_square_11.c":108:8)
#loc160 = loc("CWE190_Integer_Overflow__int64_t_max_square_11.c":108:27)
#loc161 = loc("CWE190_Integer_Overflow__int64_t_max_square_11.c":109:5)
#loc162 = loc("CWE190_Integer_Overflow__int64_t_max_square_11.c":112:5)
#loc163 = loc("CWE190_Integer_Overflow__int64_t_max_square_11.c":114:5)
#loc164 = loc("CWE190_Integer_Overflow__int64_t_max_square_11.c":111:19)
#loc165 = loc("CWE190_Integer_Overflow__int64_t_max_square_11.c":111:9)
#loc166 = loc("CWE190_Integer_Overflow__int64_t_max_square_11.c":116:16)
#loc167 = loc("CWE190_Integer_Overflow__int64_t_max_square_11.c":116:9)
#loc168 = loc("CWE190_Integer_Overflow__int64_t_max_square_11.c":118:5)
#loc169 = loc("CWE190_Integer_Overflow__int64_t_max_square_11.c":125:5)
#loc170 = loc("CWE190_Integer_Overflow__int64_t_max_square_11.c":118:8)
#loc171 = loc("CWE190_Integer_Overflow__int64_t_max_square_11.c":118:26)
#loc172 = loc("CWE190_Integer_Overflow__int64_t_max_square_11.c":119:5)
#loc173 = loc("CWE190_Integer_Overflow__int64_t_max_square_11.c":120:9)
#loc174 = loc("CWE190_Integer_Overflow__int64_t_max_square_11.c":124:9)
#loc175 = loc("CWE190_Integer_Overflow__int64_t_max_square_11.c":122:30)
#loc176 = loc("CWE190_Integer_Overflow__int64_t_max_square_11.c":123:31)
#loc177 = loc("CWE190_Integer_Overflow__int64_t_max_square_11.c":123:13)
#loc178 = loc("CWE190_Integer_Overflow__int64_t_max_square_11.c":129:1)
#loc179 = loc("CWE190_Integer_Overflow__int64_t_max_square_11.c":146:1)
#loc180 = loc("CWE190_Integer_Overflow__int64_t_max_square_11.c":142:13)
#loc181 = loc("CWE190_Integer_Overflow__int64_t_max_square_11.c":142:37)
#loc182 = loc("CWE190_Integer_Overflow__int64_t_max_square_11.c":131:5)
#loc183 = loc("CWE190_Integer_Overflow__int64_t_max_square_11.c":131:13)
#loc184 = loc("CWE190_Integer_Overflow__int64_t_max_square_11.c":132:12)
#loc185 = loc("CWE190_Integer_Overflow__int64_t_max_square_11.c":132:5)
#loc186 = loc("CWE190_Integer_Overflow__int64_t_max_square_11.c":133:5)
#loc187 = loc("CWE190_Integer_Overflow__int64_t_max_square_11.c":137:5)
#loc188 = loc("CWE190_Integer_Overflow__int64_t_max_square_11.c":133:8)
#loc189 = loc("CWE190_Integer_Overflow__int64_t_max_square_11.c":133:26)
#loc190 = loc("CWE190_Integer_Overflow__int64_t_max_square_11.c":134:5)
#loc191 = loc("CWE190_Integer_Overflow__int64_t_max_square_11.c":136:16)
#loc192 = loc("CWE190_Integer_Overflow__int64_t_max_square_11.c":136:9)
#loc193 = loc("CWE190_Integer_Overflow__int64_t_max_square_11.c":138:5)
#loc194 = loc("CWE190_Integer_Overflow__int64_t_max_square_11.c":145:5)
#loc195 = loc("CWE190_Integer_Overflow__int64_t_max_square_11.c":138:8)
#loc196 = loc("CWE190_Integer_Overflow__int64_t_max_square_11.c":138:26)
#loc197 = loc("CWE190_Integer_Overflow__int64_t_max_square_11.c":139:5)
#loc198 = loc("CWE190_Integer_Overflow__int64_t_max_square_11.c":140:9)
#loc199 = loc("CWE190_Integer_Overflow__int64_t_max_square_11.c":144:9)
#loc200 = loc("CWE190_Integer_Overflow__int64_t_max_square_11.c":142:30)
#loc201 = loc("CWE190_Integer_Overflow__int64_t_max_square_11.c":143:31)
#loc202 = loc("CWE190_Integer_Overflow__int64_t_max_square_11.c":143:13)
#loc203 = loc(fused[#loc1, #loc2])
#loc204 = loc(fused[#loc3, #loc4])
#loc205 = loc(fused[#loc5, #loc6])
#loc206 = loc(fused[#loc7, #loc8])
#loc207 = loc(fused[#loc9, #loc10])
#loc208 = loc(fused[#loc12, #loc11])
#loc209 = loc(fused[#loc13, #loc14])
#loc210 = loc(fused[#loc15, #loc16])
#loc211 = loc(fused[#loc17, #loc14])
#loc212 = loc(fused[#loc19, #loc18])
#loc213 = loc(fused[#loc20, #loc21])
#loc214 = loc(fused[#loc22, #loc23])
#loc215 = loc(fused[#loc24, #loc21])
#loc216 = loc(fused[#loc25, #loc26])
#loc217 = loc(fused[#loc30, #loc31])
#loc218 = loc(fused[#loc32, #loc33])
#loc219 = loc(fused[#loc34, #loc35])
#loc220 = loc(fused[#loc36, #loc37])
#loc221 = loc(fused[#loc38, #loc39])
#loc222 = loc(fused[#loc40, #loc41])
#loc223 = loc(fused[#loc42, #loc43])
#loc224 = loc(fused[#loc44, #loc45])
#loc225 = loc(fused[#loc50, #loc51])
#loc228 = loc(fused[#loc61, #loc62])
#loc229 = loc(fused[#loc65, #loc66])
#loc230 = loc(fused[#loc69, #loc68])
#loc231 = loc(fused[#loc70, #loc71])
#loc232 = loc(fused[#loc73, #loc74])
#loc233 = loc(fused[#loc77, #loc78])
#loc234 = loc(fused[#loc79, #loc80])
#loc235 = loc(fused[#loc81, #loc82])
#loc236 = loc(fused[#loc84, #loc83])
#loc237 = loc(fused[#loc85, #loc86])
#loc238 = loc(fused[#loc87, #loc88])
#loc239 = loc(fused[#loc89, #loc86])
#loc240 = loc(fused[#loc91, #loc90])
#loc241 = loc(fused[#loc92, #loc93])
#loc242 = loc(fused[#loc94, #loc95])
#loc243 = loc(fused[#loc96, #loc97, #loc98, #loc93])
#loc244 = loc(fused[#loc100, #loc101])
#loc245 = loc(fused[#loc103, #loc106])
#loc246 = loc(fused[#loc107, #loc108, #loc109, #loc101])
#loc247 = loc(fused[#loc114, #loc115])
#loc248 = loc(fused[#loc116, #loc117])
#loc249 = loc(fused[#loc118, #loc119])
#loc250 = loc(fused[#loc121, #loc120])
#loc251 = loc(fused[#loc122, #loc123])
#loc252 = loc(fused[#loc124, #loc125])
#loc253 = loc(fused[#loc126, #loc123])
#loc254 = loc(fused[#loc128, #loc127])
#loc255 = loc(fused[#loc129, #loc130])
#loc256 = loc(fused[#loc131, #loc132])
#loc257 = loc(fused[#loc133, #loc130])
#loc258 = loc(fused[#loc134, #loc135])
#loc259 = loc(fused[#loc137, #loc140])
#loc260 = loc(fused[#loc141, #loc142, #loc143, #loc135])
#loc261 = loc(fused[#loc149, #loc150])
#loc262 = loc(fused[#loc151, #loc152])
#loc263 = loc(fused[#loc153, #loc154])
#loc264 = loc(fused[#loc156, #loc155])
#loc265 = loc(fused[#loc157, #loc158])
#loc266 = loc(fused[#loc159, #loc160])
#loc267 = loc(fused[#loc161, #loc162, #loc163, #loc158])
#loc268 = loc(fused[#loc167, #loc166])
#loc269 = loc(fused[#loc168, #loc169])
#loc270 = loc(fused[#loc170, #loc171])
#loc271 = loc(fused[#loc172, #loc169])
#loc272 = loc(fused[#loc173, #loc174])
#loc273 = loc(fused[#loc178, #loc179])
#loc274 = loc(fused[#loc180, #loc181])
#loc275 = loc(fused[#loc182, #loc183])
#loc276 = loc(fused[#loc185, #loc184])
#loc277 = loc(fused[#loc186, #loc187])
#loc278 = loc(fused[#loc188, #loc189])
#loc279 = loc(fused[#loc190, #loc187])
#loc280 = loc(fused[#loc192, #loc191])
#loc281 = loc(fused[#loc193, #loc194])
#loc282 = loc(fused[#loc195, #loc196])
#loc283 = loc(fused[#loc197, #loc194])
#loc284 = loc(fused[#loc198, #loc199])
