!s32i = !cir.int<s, 32>
!s64i = !cir.int<s, 64>
!s8i = !cir.int<s, 8>
!u64i = !cir.int<u, 64>
#fn_attr = #cir<extra({inline = #cir.inline<no>, nothrow = #cir.nothrow, optnone = #cir.optnone, uwtable = #cir.uwtable<async>})>
#fn_attr1 = #cir<extra({inline = #cir.inline<no>, optnone = #cir.optnone, uwtable = #cir.uwtable<async>})>
#fn_attr2 = #cir<extra({nothrow = #cir.nothrow})>
#loc3 = loc("/usr/lib/gcc/x86_64-linux-gnu/13/../../../../include/c++/13/bits/stl_vector.h":1126:7)
#loc4 = loc("/usr/lib/gcc/x86_64-linux-gnu/13/../../../../include/c++/13/bits/stl_vector.h":1126:18)
#loc5 = loc("/usr/lib/gcc/x86_64-linux-gnu/13/../../../../include/c++/13/bits/stl_vector.h":1126:28)
#loc19 = loc("CWE190_Integer_Overflow__char_fscanf_square_72b.cpp":30:14)
#loc20 = loc("CWE190_Integer_Overflow__char_fscanf_square_72b.cpp":30:27)
#loc35 = loc("CWE190_Integer_Overflow__char_fscanf_square_72b.cpp":46:18)
#loc36 = loc("CWE190_Integer_Overflow__char_fscanf_square_72b.cpp":46:31)
#loc51 = loc("/usr/lib/gcc/x86_64-linux-gnu/13/../../../../include/c++/13/bits/std_abs.h":56:7)
#loc52 = loc("/usr/lib/gcc/x86_64-linux-gnu/13/../../../../include/c++/13/bits/std_abs.h":56:12)
#loc64 = loc("CWE190_Integer_Overflow__char_fscanf_square_72b.cpp":57:18)
#loc65 = loc("CWE190_Integer_Overflow__char_fscanf_square_72b.cpp":57:31)
#loc88 = loc(fused[#loc4, #loc5])
#loc92 = loc(fused[#loc19, #loc20])
#loc97 = loc(fused[#loc35, #loc36])
#loc102 = loc(fused[#loc51, #loc52])
#loc106 = loc(fused[#loc64, #loc65])
!ty_std3A3A_Vector_base3Cchar2C_std3A3Aallocator3Cchar3E3E3A3A_Vector_impl_data = !cir.record<struct "std::_Vector_base<char, std::allocator<char>>::_Vector_impl_data" {!cir.ptr<!s8i>, !cir.ptr<!s8i>, !cir.ptr<!s8i>} #cir.record.decl.ast>
!ty_std3A3A_Vector_base3Cchar2C_std3A3Aallocator3Cchar3E3E3A3A_Vector_impl = !cir.record<struct "std::_Vector_base<char, std::allocator<char>>::_Vector_impl" {!ty_std3A3A_Vector_base3Cchar2C_std3A3Aallocator3Cchar3E3E3A3A_Vector_impl_data} #cir.record.decl.ast>
!ty_std3A3A_Vector_base3Cchar2C_std3A3Aallocator3Cchar3E3E = !cir.record<struct "std::_Vector_base<char, std::allocator<char>>" {!ty_std3A3A_Vector_base3Cchar2C_std3A3Aallocator3Cchar3E3E3A3A_Vector_impl} #cir.record.decl.ast>
!ty_std3A3Avector3Cchar2C_std3A3Aallocator3Cchar3E3E = !cir.record<class "std::vector<char, std::allocator<char>>" {!ty_std3A3A_Vector_base3Cchar2C_std3A3Aallocator3Cchar3E3E}>
module @"/workspaces/juliet-c/testcases/CWE190_Integer_Overflow/s01/CWE190_Integer_Overflow__char_fscanf_square_72b.cpp" attributes {cir.lang = #cir.lang<cxx>, cir.sob = #cir.signed_overflow_behavior<undefined>, cir.triple = "x86_64-unknown-linux-gnu", cir.type_size_info = #cir.type_size_info<char = 8, int = 32, size_t = 64>, cir.uwtable = #cir.uwtable<async>, dlti.dl_spec = #dlti.dl_spec<i1 = dense<8> : vector<2xi64>, !llvm.ptr = dense<64> : vector<4xi64>, i16 = dense<16> : vector<2xi64>, i8 = dense<8> : vector<2xi64>, i32 = dense<32> : vector<2xi64>, f16 = dense<16> : vector<2xi64>, f64 = dense<64> : vector<2xi64>, !llvm.ptr<270> = dense<32> : vector<4xi64>, f128 = dense<128> : vector<2xi64>, !llvm.ptr<271> = dense<32> : vector<4xi64>, !llvm.ptr<272> = dense<64> : vector<4xi64>, i64 = dense<64> : vector<2xi64>, i128 = dense<128> : vector<2xi64>, f80 = dense<128> : vector<2xi64>, "dlti.mangling_mode" = "e", "dlti.endianness" = "little", "dlti.stack_alignment" = 128 : i64>} {
  cir.func linkonce_odr @_ZNSt6vectorIcSaIcEEixEm(%arg0: !cir.ptr<!ty_std3A3Avector3Cchar2C_std3A3Aallocator3Cchar3E3E> loc("/usr/lib/gcc/x86_64-linux-gnu/13/../../../../include/c++/13/bits/stl_vector.h":1126:7), %arg1: !u64i loc(fused[#loc4, #loc5])) -> !cir.ptr<!s8i> extra(#fn_attr) {
    %0 = cir.alloca !cir.ptr<!ty_std3A3Avector3Cchar2C_std3A3Aallocator3Cchar3E3E>, !cir.ptr<!cir.ptr<!ty_std3A3Avector3Cchar2C_std3A3Aallocator3Cchar3E3E>>, ["this", init] {alignment = 8 : i64} loc(#loc3)
    %1 = cir.alloca !u64i, !cir.ptr<!u64i>, ["__n", init] {alignment = 8 : i64} loc(#loc88)
    %2 = cir.alloca !cir.ptr<!s8i>, !cir.ptr<!cir.ptr<!s8i>>, ["__retval"] {alignment = 8 : i64} loc(#loc2)
    cir.store %arg0, %0 : !cir.ptr<!ty_std3A3Avector3Cchar2C_std3A3Aallocator3Cchar3E3E>, !cir.ptr<!cir.ptr<!ty_std3A3Avector3Cchar2C_std3A3Aallocator3Cchar3E3E>> loc(#loc6)
    cir.store %arg1, %1 : !u64i, !cir.ptr<!u64i> loc(#loc6)
    %3 = cir.load %0 : !cir.ptr<!cir.ptr<!ty_std3A3Avector3Cchar2C_std3A3Aallocator3Cchar3E3E>>, !cir.ptr<!ty_std3A3Avector3Cchar2C_std3A3Aallocator3Cchar3E3E> loc(#loc3)
    %4 = cir.base_class_addr(%3 : !cir.ptr<!ty_std3A3Avector3Cchar2C_std3A3Aallocator3Cchar3E3E> nonnull) [0] -> !cir.ptr<!ty_std3A3A_Vector_base3Cchar2C_std3A3Aallocator3Cchar3E3E> loc(#loc7)
    %5 = cir.get_member %4[0] {name = "_M_impl"} : !cir.ptr<!ty_std3A3A_Vector_base3Cchar2C_std3A3Aallocator3Cchar3E3E> -> !cir.ptr<!ty_std3A3A_Vector_base3Cchar2C_std3A3Aallocator3Cchar3E3E3A3A_Vector_impl> loc(#loc8)
    %6 = cir.base_class_addr(%5 : !cir.ptr<!ty_std3A3A_Vector_base3Cchar2C_std3A3Aallocator3Cchar3E3E3A3A_Vector_impl> nonnull) [0] -> !cir.ptr<!ty_std3A3A_Vector_base3Cchar2C_std3A3Aallocator3Cchar3E3E3A3A_Vector_impl_data> loc(#loc7)
    %7 = cir.get_member %6[0] {name = "_M_start"} : !cir.ptr<!ty_std3A3A_Vector_base3Cchar2C_std3A3Aallocator3Cchar3E3E3A3A_Vector_impl_data> -> !cir.ptr<!cir.ptr<!s8i>> loc(#loc9)
    %8 = cir.load %7 : !cir.ptr<!cir.ptr<!s8i>>, !cir.ptr<!s8i> loc(#loc10)
    %9 = cir.load %1 : !cir.ptr<!u64i>, !u64i loc(#loc11)
    %10 = cir.ptr_stride(%8 : !cir.ptr<!s8i>, %9 : !u64i), !cir.ptr<!s8i> loc(#loc12)
    cir.store %10, %2 : !cir.ptr<!s8i>, !cir.ptr<!cir.ptr<!s8i>> loc(#loc89)
    %11 = cir.load %2 : !cir.ptr<!cir.ptr<!s8i>>, !cir.ptr<!s8i> loc(#loc89)
    cir.return %11 : !cir.ptr<!s8i> loc(#loc89)
  } loc(#loc87)
  cir.func private @printHexCharLine(!s8i) loc(#loc90)
  cir.func @_ZN46CWE190_Integer_Overflow__char_fscanf_square_727badSinkESt6vectorIcSaIcEE(%arg0: !ty_std3A3Avector3Cchar2C_std3A3Aallocator3Cchar3E3E loc(fused[#loc19, #loc20])) extra(#fn_attr1) {
    %0 = cir.alloca !ty_std3A3Avector3Cchar2C_std3A3Aallocator3Cchar3E3E, !cir.ptr<!ty_std3A3Avector3Cchar2C_std3A3Aallocator3Cchar3E3E>, ["dataVector", init] {alignment = 8 : i64} loc(#loc92)
    %1 = cir.alloca !s8i, !cir.ptr<!s8i>, ["data", init] {alignment = 1 : i64} loc(#loc93)
    cir.store %arg0, %0 : !ty_std3A3Avector3Cchar2C_std3A3Aallocator3Cchar3E3E, !cir.ptr<!ty_std3A3Avector3Cchar2C_std3A3Aallocator3Cchar3E3E> loc(#loc23)
    %2 = cir.const #cir.int<2> : !s32i loc(#loc24)
    %3 = cir.cast(integral, %2 : !s32i), !u64i loc(#loc24)
    %4 = cir.call @_ZNSt6vectorIcSaIcEEixEm(%0, %3) : (!cir.ptr<!ty_std3A3Avector3Cchar2C_std3A3Aallocator3Cchar3E3E>, !u64i) -> !cir.ptr<!s8i> extra(#fn_attr2) loc(#loc25)
    %5 = cir.load %4 : !cir.ptr<!s8i>, !s8i loc(#loc25)
    cir.store %5, %1 : !s8i, !cir.ptr<!s8i> loc(#loc93)
    cir.scope {
      %6 = cir.alloca !s8i, !cir.ptr<!s8i>, ["result", init] {alignment = 1 : i64} loc(#loc95)
      %7 = cir.load %1 : !cir.ptr<!s8i>, !s8i loc(#loc30)
      %8 = cir.cast(integral, %7 : !s8i), !s32i loc(#loc30)
      %9 = cir.load %1 : !cir.ptr<!s8i>, !s8i loc(#loc29)
      %10 = cir.cast(integral, %9 : !s8i), !s32i loc(#loc29)
      %11 = cir.binop(mul, %8, %10) nsw : !s32i loc(#loc30)
      %12 = cir.cast(integral, %11 : !s32i), !s8i loc(#loc30)
      cir.store %12, %6 : !s8i, !cir.ptr<!s8i> loc(#loc95)
      %13 = cir.load %6 : !cir.ptr<!s8i>, !s8i loc(#loc31)
      cir.call @printHexCharLine(%13) : (!s8i) -> () loc(#loc32)
    } loc(#loc94)
    cir.return loc(#loc18)
  } loc(#loc91)
  cir.func @_ZN46CWE190_Integer_Overflow__char_fscanf_square_7211goodG2BSinkESt6vectorIcSaIcEE(%arg0: !ty_std3A3Avector3Cchar2C_std3A3Aallocator3Cchar3E3E loc(fused[#loc35, #loc36])) extra(#fn_attr1) {
    %0 = cir.alloca !ty_std3A3Avector3Cchar2C_std3A3Aallocator3Cchar3E3E, !cir.ptr<!ty_std3A3Avector3Cchar2C_std3A3Aallocator3Cchar3E3E>, ["dataVector", init] {alignment = 8 : i64} loc(#loc97)
    %1 = cir.alloca !s8i, !cir.ptr<!s8i>, ["data", init] {alignment = 1 : i64} loc(#loc98)
    cir.store %arg0, %0 : !ty_std3A3Avector3Cchar2C_std3A3Aallocator3Cchar3E3E, !cir.ptr<!ty_std3A3Avector3Cchar2C_std3A3Aallocator3Cchar3E3E> loc(#loc39)
    %2 = cir.const #cir.int<2> : !s32i loc(#loc40)
    %3 = cir.cast(integral, %2 : !s32i), !u64i loc(#loc40)
    %4 = cir.call @_ZNSt6vectorIcSaIcEEixEm(%0, %3) : (!cir.ptr<!ty_std3A3Avector3Cchar2C_std3A3Aallocator3Cchar3E3E>, !u64i) -> !cir.ptr<!s8i> extra(#fn_attr2) loc(#loc41)
    %5 = cir.load %4 : !cir.ptr<!s8i>, !s8i loc(#loc41)
    cir.store %5, %1 : !s8i, !cir.ptr<!s8i> loc(#loc98)
    cir.scope {
      %6 = cir.alloca !s8i, !cir.ptr<!s8i>, ["result", init] {alignment = 1 : i64} loc(#loc100)
      %7 = cir.load %1 : !cir.ptr<!s8i>, !s8i loc(#loc46)
      %8 = cir.cast(integral, %7 : !s8i), !s32i loc(#loc46)
      %9 = cir.load %1 : !cir.ptr<!s8i>, !s8i loc(#loc45)
      %10 = cir.cast(integral, %9 : !s8i), !s32i loc(#loc45)
      %11 = cir.binop(mul, %8, %10) nsw : !s32i loc(#loc46)
      %12 = cir.cast(integral, %11 : !s32i), !s8i loc(#loc46)
      cir.store %12, %6 : !s8i, !cir.ptr<!s8i> loc(#loc100)
      %13 = cir.load %6 : !cir.ptr<!s8i>, !s8i loc(#loc47)
      cir.call @printHexCharLine(%13) : (!s8i) -> () loc(#loc48)
    } loc(#loc99)
    cir.return loc(#loc34)
  } loc(#loc96)
  cir.func linkonce_odr @_ZSt3absl(%arg0: !s64i loc(fused[#loc51, #loc52])) -> !s64i extra(#fn_attr1) {
    %0 = cir.alloca !s64i, !cir.ptr<!s64i>, ["__i", init] {alignment = 8 : i64} loc(#loc102)
    %1 = cir.alloca !s64i, !cir.ptr<!s64i>, ["__retval"] {alignment = 8 : i64} loc(#loc50)
    cir.store %arg0, %0 : !s64i, !cir.ptr<!s64i> loc(#loc53)
    %2 = cir.load %0 : !cir.ptr<!s64i>, !s64i loc(#loc54)
    %3 = cir.abs %2 poison : !s64i loc(#loc55)
    cir.store %3, %1 : !s64i, !cir.ptr<!s64i> loc(#loc103)
    %4 = cir.load %1 : !cir.ptr<!s64i>, !s64i loc(#loc103)
    cir.return %4 : !s64i loc(#loc103)
  } loc(#loc101)
  cir.func private @sqrt(!cir.double) -> !cir.double extra(#fn_attr2) loc(#loc58)
  cir.func private @printLine(!cir.ptr<!s8i>) loc(#loc104)
  cir.global "private" constant cir_private dsolocal @".str" = #cir.const_array<"data value is too large to perform arithmetic safely.\00" : !cir.array<!s8i x 54>> : !cir.array<!s8i x 54> {alignment = 1 : i64} loc(#loc61)
  cir.func @_ZN46CWE190_Integer_Overflow__char_fscanf_square_7211goodB2GSinkESt6vectorIcSaIcEE(%arg0: !ty_std3A3Avector3Cchar2C_std3A3Aallocator3Cchar3E3E loc(fused[#loc64, #loc65])) extra(#fn_attr1) {
    %0 = cir.alloca !ty_std3A3Avector3Cchar2C_std3A3Aallocator3Cchar3E3E, !cir.ptr<!ty_std3A3Avector3Cchar2C_std3A3Aallocator3Cchar3E3E>, ["dataVector", init] {alignment = 8 : i64} loc(#loc106)
    %1 = cir.alloca !s8i, !cir.ptr<!s8i>, ["data", init] {alignment = 1 : i64} loc(#loc107)
    cir.store %arg0, %0 : !ty_std3A3Avector3Cchar2C_std3A3Aallocator3Cchar3E3E, !cir.ptr<!ty_std3A3Avector3Cchar2C_std3A3Aallocator3Cchar3E3E> loc(#loc68)
    %2 = cir.const #cir.int<2> : !s32i loc(#loc69)
    %3 = cir.cast(integral, %2 : !s32i), !u64i loc(#loc69)
    %4 = cir.call @_ZNSt6vectorIcSaIcEEixEm(%0, %3) : (!cir.ptr<!ty_std3A3Avector3Cchar2C_std3A3Aallocator3Cchar3E3E>, !u64i) -> !cir.ptr<!s8i> extra(#fn_attr2) loc(#loc70)
    %5 = cir.load %4 : !cir.ptr<!s8i>, !s8i loc(#loc70)
    cir.store %5, %1 : !s8i, !cir.ptr<!s8i> loc(#loc107)
    cir.scope {
      %6 = cir.load %1 : !cir.ptr<!s8i>, !s8i loc(#loc73)
      %7 = cir.cast(integral, %6 : !s8i), !s64i loc(#loc73)
      %8 = cir.call @_ZSt3absl(%7) : (!s64i) -> !s64i loc(#loc74)
      %9 = cir.get_global @sqrt : !cir.ptr<!cir.func<(!cir.double) -> !cir.double>> loc(#loc75)
      %10 = cir.const #cir.int<127> : !s32i loc(#loc76)
      %11 = cir.cast(int_to_float, %10 : !s32i), !cir.double loc(#loc76)
      %12 = cir.call @sqrt(%11) : (!cir.double) -> !cir.double extra(#fn_attr2) loc(#loc75)
      %13 = cir.cast(float_to_int, %12 : !cir.double), !s64i loc(#loc75)
      %14 = cir.cmp(le, %8, %13) : !s64i, !cir.bool loc(#loc109)
      cir.if %14 {
        %15 = cir.alloca !s8i, !cir.ptr<!s8i>, ["result", init] {alignment = 1 : i64} loc(#loc111)
        %16 = cir.load %1 : !cir.ptr<!s8i>, !s8i loc(#loc83)
        %17 = cir.cast(integral, %16 : !s8i), !s32i loc(#loc83)
        %18 = cir.load %1 : !cir.ptr<!s8i>, !s8i loc(#loc82)
        %19 = cir.cast(integral, %18 : !s8i), !s32i loc(#loc82)
        %20 = cir.binop(mul, %17, %19) nsw : !s32i loc(#loc83)
        %21 = cir.cast(integral, %20 : !s32i), !s8i loc(#loc83)
        cir.store %21, %15 : !s8i, !cir.ptr<!s8i> loc(#loc111)
        %22 = cir.load %15 : !cir.ptr<!s8i>, !s8i loc(#loc84)
        cir.call @printHexCharLine(%22) : (!s8i) -> () loc(#loc85)
      } else {
        %15 = cir.get_global @".str" : !cir.ptr<!cir.array<!s8i x 54>> loc(#loc61)
        %16 = cir.cast(array_to_ptrdecay, %15 : !cir.ptr<!cir.array<!s8i x 54>>), !cir.ptr<!s8i> loc(#loc61)
        cir.call @printLine(%16) : (!cir.ptr<!s8i>) -> () loc(#loc86)
      } loc(#loc110)
    } loc(#loc108)
    cir.return loc(#loc63)
  } loc(#loc105)
} loc(#loc)
#loc = loc("/workspaces/juliet-c/testcases/CWE190_Integer_Overflow/s01/CWE190_Integer_Overflow__char_fscanf_square_72b.cpp":0:0)
#loc1 = loc("/usr/lib/gcc/x86_64-linux-gnu/13/../../../../include/c++/13/bits/stl_vector.h":1125:7)
#loc2 = loc("/usr/lib/gcc/x86_64-linux-gnu/13/../../../../include/c++/13/bits/stl_vector.h":1130:7)
#loc6 = loc("/usr/lib/gcc/x86_64-linux-gnu/13/../../../../include/c++/13/bits/stl_vector.h":1127:7)
#loc7 = loc("/usr/lib/gcc/x86_64-linux-gnu/13/../../../../include/c++/13/bits/stl_vector.h":1129:11)
#loc8 = loc("/usr/lib/gcc/x86_64-linux-gnu/13/../../../../include/c++/13/bits/stl_vector.h":374:20)
#loc9 = loc("/usr/lib/gcc/x86_64-linux-gnu/13/../../../../include/c++/13/bits/stl_vector.h":94:10)
#loc10 = loc("/usr/lib/gcc/x86_64-linux-gnu/13/../../../../include/c++/13/bits/stl_vector.h":1129:25)
#loc11 = loc("/usr/lib/gcc/x86_64-linux-gnu/13/../../../../include/c++/13/bits/stl_vector.h":1129:36)
#loc12 = loc("/usr/lib/gcc/x86_64-linux-gnu/13/../../../../include/c++/13/bits/stl_vector.h":1129:34)
#loc13 = loc("/usr/lib/gcc/x86_64-linux-gnu/13/../../../../include/c++/13/bits/stl_vector.h":1129:2)
#loc14 = loc("/usr/lib/gcc/x86_64-linux-gnu/13/../../../../include/c++/13/bits/stl_vector.h":1129:39)
#loc15 = loc("../../../testcasesupport/std_testcase_io.h":30:1)
#loc16 = loc("../../../testcasesupport/std_testcase_io.h":30:35)
#loc17 = loc("CWE190_Integer_Overflow__char_fscanf_square_72b.cpp":30:1)
#loc18 = loc("CWE190_Integer_Overflow__char_fscanf_square_72b.cpp":39:1)
#loc21 = loc("CWE190_Integer_Overflow__char_fscanf_square_72b.cpp":33:5)
#loc22 = loc("CWE190_Integer_Overflow__char_fscanf_square_72b.cpp":33:29)
#loc23 = loc("CWE190_Integer_Overflow__char_fscanf_square_72b.cpp":31:1)
#loc24 = loc("CWE190_Integer_Overflow__char_fscanf_square_72b.cpp":33:28)
#loc25 = loc("CWE190_Integer_Overflow__char_fscanf_square_72b.cpp":33:17)
#loc26 = loc("CWE190_Integer_Overflow__char_fscanf_square_72b.cpp":34:5)
#loc27 = loc("CWE190_Integer_Overflow__char_fscanf_square_72b.cpp":38:5)
#loc28 = loc("CWE190_Integer_Overflow__char_fscanf_square_72b.cpp":36:9)
#loc29 = loc("CWE190_Integer_Overflow__char_fscanf_square_72b.cpp":36:30)
#loc30 = loc("CWE190_Integer_Overflow__char_fscanf_square_72b.cpp":36:23)
#loc31 = loc("CWE190_Integer_Overflow__char_fscanf_square_72b.cpp":37:26)
#loc32 = loc("CWE190_Integer_Overflow__char_fscanf_square_72b.cpp":37:9)
#loc33 = loc("CWE190_Integer_Overflow__char_fscanf_square_72b.cpp":46:1)
#loc34 = loc("CWE190_Integer_Overflow__char_fscanf_square_72b.cpp":54:1)
#loc37 = loc("CWE190_Integer_Overflow__char_fscanf_square_72b.cpp":48:5)
#loc38 = loc("CWE190_Integer_Overflow__char_fscanf_square_72b.cpp":48:29)
#loc39 = loc("CWE190_Integer_Overflow__char_fscanf_square_72b.cpp":47:1)
#loc40 = loc("CWE190_Integer_Overflow__char_fscanf_square_72b.cpp":48:28)
#loc41 = loc("CWE190_Integer_Overflow__char_fscanf_square_72b.cpp":48:17)
#loc42 = loc("CWE190_Integer_Overflow__char_fscanf_square_72b.cpp":49:5)
#loc43 = loc("CWE190_Integer_Overflow__char_fscanf_square_72b.cpp":53:5)
#loc44 = loc("CWE190_Integer_Overflow__char_fscanf_square_72b.cpp":51:9)
#loc45 = loc("CWE190_Integer_Overflow__char_fscanf_square_72b.cpp":51:30)
#loc46 = loc("CWE190_Integer_Overflow__char_fscanf_square_72b.cpp":51:23)
#loc47 = loc("CWE190_Integer_Overflow__char_fscanf_square_72b.cpp":52:26)
#loc48 = loc("CWE190_Integer_Overflow__char_fscanf_square_72b.cpp":52:9)
#loc49 = loc("/usr/lib/gcc/x86_64-linux-gnu/13/../../../../include/c++/13/bits/std_abs.h":55:3)
#loc50 = loc("/usr/lib/gcc/x86_64-linux-gnu/13/../../../../include/c++/13/bits/std_abs.h":56:47)
#loc53 = loc("/usr/lib/gcc/x86_64-linux-gnu/13/../../../../include/c++/13/bits/std_abs.h":56:17)
#loc54 = loc("/usr/lib/gcc/x86_64-linux-gnu/13/../../../../include/c++/13/bits/std_abs.h":56:41)
#loc55 = loc("/usr/lib/gcc/x86_64-linux-gnu/13/../../../../include/c++/13/bits/std_abs.h":56:26)
#loc56 = loc("/usr/lib/gcc/x86_64-linux-gnu/13/../../../../include/c++/13/bits/std_abs.h":56:19)
#loc57 = loc("/usr/lib/gcc/x86_64-linux-gnu/13/../../../../include/c++/13/bits/std_abs.h":56:44)
#loc58 = loc("/usr/include/x86_64-linux-gnu/bits/mathcalls.h":143:1)
#loc59 = loc("../../../testcasesupport/std_testcase_io.h":14:1)
#loc60 = loc("../../../testcasesupport/std_testcase_io.h":14:33)
#loc61 = loc("CWE190_Integer_Overflow__char_fscanf_square_72b.cpp":68:19)
#loc62 = loc("CWE190_Integer_Overflow__char_fscanf_square_72b.cpp":57:1)
#loc63 = loc("CWE190_Integer_Overflow__char_fscanf_square_72b.cpp":70:1)
#loc66 = loc("CWE190_Integer_Overflow__char_fscanf_square_72b.cpp":59:5)
#loc67 = loc("CWE190_Integer_Overflow__char_fscanf_square_72b.cpp":59:29)
#loc68 = loc("CWE190_Integer_Overflow__char_fscanf_square_72b.cpp":58:1)
#loc69 = loc("CWE190_Integer_Overflow__char_fscanf_square_72b.cpp":59:28)
#loc70 = loc("CWE190_Integer_Overflow__char_fscanf_square_72b.cpp":59:17)
#loc71 = loc("CWE190_Integer_Overflow__char_fscanf_square_72b.cpp":61:5)
#loc72 = loc("CWE190_Integer_Overflow__char_fscanf_square_72b.cpp":69:5)
#loc73 = loc("CWE190_Integer_Overflow__char_fscanf_square_72b.cpp":61:19)
#loc74 = loc("CWE190_Integer_Overflow__char_fscanf_square_72b.cpp":61:9)
#loc75 = loc("CWE190_Integer_Overflow__char_fscanf_square_72b.cpp":61:34)
#loc76 = loc("CWE190_Integer_Overflow__char_fscanf_square_72b.cpp":61:47)
#loc77 = loc("CWE190_Integer_Overflow__char_fscanf_square_72b.cpp":61:55)
#loc78 = loc("CWE190_Integer_Overflow__char_fscanf_square_72b.cpp":62:5)
#loc79 = loc("CWE190_Integer_Overflow__char_fscanf_square_72b.cpp":65:5)
#loc80 = loc("CWE190_Integer_Overflow__char_fscanf_square_72b.cpp":67:5)
#loc81 = loc("CWE190_Integer_Overflow__char_fscanf_square_72b.cpp":63:9)
#loc82 = loc("CWE190_Integer_Overflow__char_fscanf_square_72b.cpp":63:30)
#loc83 = loc("CWE190_Integer_Overflow__char_fscanf_square_72b.cpp":63:23)
#loc84 = loc("CWE190_Integer_Overflow__char_fscanf_square_72b.cpp":64:26)
#loc85 = loc("CWE190_Integer_Overflow__char_fscanf_square_72b.cpp":64:9)
#loc86 = loc("CWE190_Integer_Overflow__char_fscanf_square_72b.cpp":68:9)
#loc87 = loc(fused[#loc1, #loc2])
#loc89 = loc(fused[#loc13, #loc14])
#loc90 = loc(fused[#loc15, #loc16])
#loc91 = loc(fused[#loc17, #loc18])
#loc93 = loc(fused[#loc21, #loc22])
#loc94 = loc(fused[#loc26, #loc27])
#loc95 = loc(fused[#loc28, #loc29])
#loc96 = loc(fused[#loc33, #loc34])
#loc98 = loc(fused[#loc37, #loc38])
#loc99 = loc(fused[#loc42, #loc43])
#loc100 = loc(fused[#loc44, #loc45])
#loc101 = loc(fused[#loc49, #loc50])
#loc103 = loc(fused[#loc56, #loc57])
#loc104 = loc(fused[#loc59, #loc60])
#loc105 = loc(fused[#loc62, #loc63])
#loc107 = loc(fused[#loc66, #loc67])
#loc108 = loc(fused[#loc71, #loc72])
#loc109 = loc(fused[#loc74, #loc77])
#loc110 = loc(fused[#loc78, #loc79, #loc80, #loc72])
#loc111 = loc(fused[#loc81, #loc82])
