!s32i = !cir.int<s, 32>
!s8i = !cir.int<s, 8>
!u32i = !cir.int<u, 32>
#fn_attr = #cir<extra({nothrow = #cir.nothrow})>
#fn_attr1 = #cir<extra({inline = #cir.inline<no>, nothrow = #cir.nothrow, optnone = #cir.optnone, uwtable = #cir.uwtable<async>})>
#loc17 = loc("CWE191_Integer_Underflow__char_rand_sub_16.c":29:22)
#loc51 = loc("CWE191_Integer_Underflow__char_rand_sub_16.c":55:22)
module @"/workspaces/juliet-c/testcases/CWE191_Integer_Underflow/s01/CWE191_Integer_Underflow__char_rand_sub_16.c" attributes {cir.lang = #cir.lang<c>, cir.sob = #cir.signed_overflow_behavior<undefined>, cir.triple = "x86_64-unknown-linux-gnu", cir.type_size_info = #cir.type_size_info<char = 8, int = 32, size_t = 64>, cir.uwtable = #cir.uwtable<async>, dlti.dl_spec = #dlti.dl_spec<i32 = dense<32> : vector<2xi64>, f64 = dense<64> : vector<2xi64>, f16 = dense<16> : vector<2xi64>, f128 = dense<128> : vector<2xi64>, !llvm.ptr = dense<64> : vector<4xi64>, i1 = dense<8> : vector<2xi64>, i8 = dense<8> : vector<2xi64>, i16 = dense<16> : vector<2xi64>, i128 = dense<128> : vector<2xi64>, !llvm.ptr<270> = dense<32> : vector<4xi64>, f80 = dense<128> : vector<2xi64>, !llvm.ptr<271> = dense<32> : vector<4xi64>, !llvm.ptr<272> = dense<64> : vector<4xi64>, i64 = dense<64> : vector<2xi64>, "dlti.stack_alignment" = 128 : i64, "dlti.endianness" = "little", "dlti.mangling_mode" = "e">} {
  cir.func private @rand() -> !s32i extra(#fn_attr) loc(#loc96)
  cir.func private @printHexCharLine(!s8i) loc(#loc97)
  cir.func no_proto @CWE191_Integer_Underflow__char_rand_sub_16_bad() extra(#fn_attr1) {
    %0 = cir.alloca !s8i, !cir.ptr<!s8i>, ["result", init] {alignment = 1 : i64} loc(#loc99)
    %1 = cir.alloca !s8i, !cir.ptr<!s8i>, ["data"] {alignment = 1 : i64} loc(#loc100)
    %2 = cir.const #cir.int<32> : !s32i loc(#loc11)
    %3 = cir.cast(integral, %2 : !s32i), !s8i loc(#loc11)
    cir.store %3, %1 : !s8i, !cir.ptr<!s8i> loc(#loc101)
    cir.br ^bb1 loc(#loc102)
  ^bb1:  // pred: ^bb0
    cir.br ^bb2 loc(#loc102)
  ^bb2:  // 2 preds: ^bb1, ^bb9
    %4 = cir.const #cir.int<1> : !s32i loc(#loc15)
    %5 = cir.cast(int_to_bool, %4 : !s32i), !cir.bool loc(#loc15)
    cir.brcond %5 ^bb3, ^bb10 loc(#loc15)
  ^bb3:  // pred: ^bb2
    cir.br ^bb4 loc(#loc103)
  ^bb4:  // pred: ^bb3
    %6 = cir.call @rand() : () -> !s32i extra(#fn_attr) loc(#loc17)
    %7 = cir.const #cir.int<1> : !s32i loc(#loc17)
    %8 = cir.binop(and, %6, %7) : !s32i loc(#loc17)
    %9 = cir.cast(int_to_bool, %8 : !s32i), !cir.bool loc(#loc17)
    cir.brcond %9 ^bb5, ^bb6 loc(#loc17)
  ^bb5:  // pred: ^bb4
    %10 = cir.call @rand() : () -> !s32i extra(#fn_attr) loc(#loc17)
    %11 = cir.cast(integral, %10 : !s32i), !u32i loc(#loc17)
    %12 = cir.const #cir.int<30> : !s32i loc(#loc17)
    %13 = cir.shift(left, %11 : !u32i, %12 : !s32i) -> !u32i loc(#loc17)
    %14 = cir.call @rand() : () -> !s32i extra(#fn_attr) loc(#loc17)
    %15 = cir.cast(integral, %14 : !s32i), !u32i loc(#loc17)
    %16 = cir.const #cir.int<15> : !s32i loc(#loc17)
    %17 = cir.shift(left, %15 : !u32i, %16 : !s32i) -> !u32i loc(#loc17)
    %18 = cir.binop(xor, %13, %17) : !u32i loc(#loc17)
    %19 = cir.call @rand() : () -> !s32i extra(#fn_attr) loc(#loc17)
    %20 = cir.cast(integral, %19 : !s32i), !u32i loc(#loc17)
    %21 = cir.binop(xor, %18, %20) : !u32i loc(#loc17)
    cir.br ^bb7(%21 : !u32i) loc(#loc17)
  ^bb6:  // pred: ^bb4
    %22 = cir.call @rand() : () -> !s32i extra(#fn_attr) loc(#loc17)
    %23 = cir.cast(integral, %22 : !s32i), !u32i loc(#loc17)
    %24 = cir.const #cir.int<30> : !s32i loc(#loc17)
    %25 = cir.shift(left, %23 : !u32i, %24 : !s32i) -> !u32i loc(#loc17)
    %26 = cir.call @rand() : () -> !s32i extra(#fn_attr) loc(#loc17)
    %27 = cir.cast(integral, %26 : !s32i), !u32i loc(#loc17)
    %28 = cir.const #cir.int<15> : !s32i loc(#loc17)
    %29 = cir.shift(left, %27 : !u32i, %28 : !s32i) -> !u32i loc(#loc17)
    %30 = cir.binop(xor, %25, %29) : !u32i loc(#loc17)
    %31 = cir.call @rand() : () -> !s32i extra(#fn_attr) loc(#loc17)
    %32 = cir.cast(integral, %31 : !s32i), !u32i loc(#loc17)
    %33 = cir.binop(xor, %30, %32) : !u32i loc(#loc17)
    %34 = cir.unary(minus, %33) : !u32i, !u32i loc(#loc17)
    %35 = cir.const #cir.int<1> : !s32i loc(#loc17)
    %36 = cir.cast(integral, %35 : !s32i), !u32i loc(#loc17)
    %37 = cir.binop(sub, %34, %36) : !u32i loc(#loc17)
    cir.br ^bb7(%37 : !u32i) loc(#loc17)
  ^bb7(%38: !u32i loc("CWE191_Integer_Underflow__char_rand_sub_16.c":29:22)):  // 2 preds: ^bb5, ^bb6
    cir.br ^bb8 loc(#loc17)
  ^bb8:  // pred: ^bb7
    %39 = cir.cast(integral, %38 : !u32i), !s32i loc(#loc17)
    %40 = cir.cast(integral, %39 : !s32i), !s8i loc(#loc17)
    cir.store %40, %1 : !s8i, !cir.ptr<!s8i> loc(#loc104)
    cir.br ^bb10 loc(#loc19)
  ^bb9:  // no predecessors
    cir.br ^bb2 loc(#loc14)
  ^bb10:  // 2 preds: ^bb2, ^bb8
    cir.br ^bb11 loc(#loc14)
  ^bb11:  // pred: ^bb10
    cir.br ^bb12 loc(#loc105)
  ^bb12:  // pred: ^bb11
    cir.br ^bb13 loc(#loc105)
  ^bb13:  // 2 preds: ^bb12, ^bb18
    %41 = cir.const #cir.int<1> : !s32i loc(#loc22)
    %42 = cir.cast(int_to_bool, %41 : !s32i), !cir.bool loc(#loc22)
    cir.brcond %42 ^bb14, ^bb19 loc(#loc22)
  ^bb14:  // pred: ^bb13
    cir.br ^bb15 loc(#loc106)
  ^bb15:  // pred: ^bb14
    cir.br ^bb16 loc(#loc107)
  ^bb16:  // pred: ^bb15
    %43 = cir.load %1 : !cir.ptr<!s8i>, !s8i loc(#loc26)
    %44 = cir.cast(integral, %43 : !s8i), !s32i loc(#loc26)
    %45 = cir.const #cir.int<1> : !s32i loc(#loc8)
    %46 = cir.binop(sub, %44, %45) nsw : !s32i loc(#loc26)
    %47 = cir.cast(integral, %46 : !s32i), !s8i loc(#loc26)
    cir.store %47, %0 : !s8i, !cir.ptr<!s8i> loc(#loc99)
    %48 = cir.load %0 : !cir.ptr<!s8i>, !s8i loc(#loc27)
    cir.call @printHexCharLine(%48) : (!s8i) -> () loc(#loc28)
    cir.br ^bb17 loc(#loc25)
  ^bb17:  // pred: ^bb16
    cir.br ^bb19 loc(#loc29)
  ^bb18:  // no predecessors
    cir.br ^bb13 loc(#loc21)
  ^bb19:  // 2 preds: ^bb13, ^bb17
    cir.br ^bb20 loc(#loc21)
  ^bb20:  // pred: ^bb19
    cir.return loc(#loc6)
  } loc(#loc98)
  cir.func no_proto @CWE191_Integer_Underflow__char_rand_sub_16_good() extra(#fn_attr1) {
    %0 = cir.get_global @goodB2G : !cir.ptr<!cir.func<()>> loc(#loc109)
    cir.call %0() : (!cir.ptr<!cir.func<()>>) -> () loc(#loc32)
    %1 = cir.get_global @goodG2B : !cir.ptr<!cir.func<()>> loc(#loc110)
    cir.call %1() : (!cir.ptr<!cir.func<()>>) -> () loc(#loc34)
    cir.return loc(#loc31)
  } loc(#loc108)
  cir.func private @printLine(!cir.ptr<!s8i>) loc(#loc111)
  cir.global "private" constant cir_private dsolocal @".str" = #cir.const_array<"data value is too large to perform subtraction.\00" : !cir.array<!s8i x 48>> : !cir.array<!s8i x 48> {alignment = 1 : i64} loc(#loc38)
  cir.func no_proto internal private @goodB2G() extra(#fn_attr1) {
    %0 = cir.alloca !s8i, !cir.ptr<!s8i>, ["result", init] {alignment = 1 : i64} loc(#loc113)
    %1 = cir.alloca !s8i, !cir.ptr<!s8i>, ["data"] {alignment = 1 : i64} loc(#loc114)
    %2 = cir.const #cir.int<32> : !s32i loc(#loc45)
    %3 = cir.cast(integral, %2 : !s32i), !s8i loc(#loc45)
    cir.store %3, %1 : !s8i, !cir.ptr<!s8i> loc(#loc115)
    cir.br ^bb1 loc(#loc116)
  ^bb1:  // pred: ^bb0
    cir.br ^bb2 loc(#loc116)
  ^bb2:  // 2 preds: ^bb1, ^bb9
    %4 = cir.const #cir.int<1> : !s32i loc(#loc49)
    %5 = cir.cast(int_to_bool, %4 : !s32i), !cir.bool loc(#loc49)
    cir.brcond %5 ^bb3, ^bb10 loc(#loc49)
  ^bb3:  // pred: ^bb2
    cir.br ^bb4 loc(#loc117)
  ^bb4:  // pred: ^bb3
    %6 = cir.call @rand() : () -> !s32i extra(#fn_attr) loc(#loc51)
    %7 = cir.const #cir.int<1> : !s32i loc(#loc51)
    %8 = cir.binop(and, %6, %7) : !s32i loc(#loc51)
    %9 = cir.cast(int_to_bool, %8 : !s32i), !cir.bool loc(#loc51)
    cir.brcond %9 ^bb5, ^bb6 loc(#loc51)
  ^bb5:  // pred: ^bb4
    %10 = cir.call @rand() : () -> !s32i extra(#fn_attr) loc(#loc51)
    %11 = cir.cast(integral, %10 : !s32i), !u32i loc(#loc51)
    %12 = cir.const #cir.int<30> : !s32i loc(#loc51)
    %13 = cir.shift(left, %11 : !u32i, %12 : !s32i) -> !u32i loc(#loc51)
    %14 = cir.call @rand() : () -> !s32i extra(#fn_attr) loc(#loc51)
    %15 = cir.cast(integral, %14 : !s32i), !u32i loc(#loc51)
    %16 = cir.const #cir.int<15> : !s32i loc(#loc51)
    %17 = cir.shift(left, %15 : !u32i, %16 : !s32i) -> !u32i loc(#loc51)
    %18 = cir.binop(xor, %13, %17) : !u32i loc(#loc51)
    %19 = cir.call @rand() : () -> !s32i extra(#fn_attr) loc(#loc51)
    %20 = cir.cast(integral, %19 : !s32i), !u32i loc(#loc51)
    %21 = cir.binop(xor, %18, %20) : !u32i loc(#loc51)
    cir.br ^bb7(%21 : !u32i) loc(#loc51)
  ^bb6:  // pred: ^bb4
    %22 = cir.call @rand() : () -> !s32i extra(#fn_attr) loc(#loc51)
    %23 = cir.cast(integral, %22 : !s32i), !u32i loc(#loc51)
    %24 = cir.const #cir.int<30> : !s32i loc(#loc51)
    %25 = cir.shift(left, %23 : !u32i, %24 : !s32i) -> !u32i loc(#loc51)
    %26 = cir.call @rand() : () -> !s32i extra(#fn_attr) loc(#loc51)
    %27 = cir.cast(integral, %26 : !s32i), !u32i loc(#loc51)
    %28 = cir.const #cir.int<15> : !s32i loc(#loc51)
    %29 = cir.shift(left, %27 : !u32i, %28 : !s32i) -> !u32i loc(#loc51)
    %30 = cir.binop(xor, %25, %29) : !u32i loc(#loc51)
    %31 = cir.call @rand() : () -> !s32i extra(#fn_attr) loc(#loc51)
    %32 = cir.cast(integral, %31 : !s32i), !u32i loc(#loc51)
    %33 = cir.binop(xor, %30, %32) : !u32i loc(#loc51)
    %34 = cir.unary(minus, %33) : !u32i, !u32i loc(#loc51)
    %35 = cir.const #cir.int<1> : !s32i loc(#loc51)
    %36 = cir.cast(integral, %35 : !s32i), !u32i loc(#loc51)
    %37 = cir.binop(sub, %34, %36) : !u32i loc(#loc51)
    cir.br ^bb7(%37 : !u32i) loc(#loc51)
  ^bb7(%38: !u32i loc("CWE191_Integer_Underflow__char_rand_sub_16.c":55:22)):  // 2 preds: ^bb5, ^bb6
    cir.br ^bb8 loc(#loc51)
  ^bb8:  // pred: ^bb7
    %39 = cir.cast(integral, %38 : !u32i), !s32i loc(#loc51)
    %40 = cir.cast(integral, %39 : !s32i), !s8i loc(#loc51)
    cir.store %40, %1 : !s8i, !cir.ptr<!s8i> loc(#loc118)
    cir.br ^bb10 loc(#loc53)
  ^bb9:  // no predecessors
    cir.br ^bb2 loc(#loc48)
  ^bb10:  // 2 preds: ^bb2, ^bb8
    cir.br ^bb11 loc(#loc48)
  ^bb11:  // pred: ^bb10
    cir.br ^bb12 loc(#loc119)
  ^bb12:  // pred: ^bb11
    cir.br ^bb13 loc(#loc119)
  ^bb13:  // 2 preds: ^bb12, ^bb21
    %41 = cir.const #cir.int<1> : !s32i loc(#loc56)
    %42 = cir.cast(int_to_bool, %41 : !s32i), !cir.bool loc(#loc56)
    cir.brcond %42 ^bb14, ^bb22 loc(#loc56)
  ^bb14:  // pred: ^bb13
    cir.br ^bb15 loc(#loc120)
  ^bb15:  // pred: ^bb14
    cir.br ^bb16 loc(#loc121)
  ^bb16:  // pred: ^bb15
    %43 = cir.load %1 : !cir.ptr<!s8i>, !s8i loc(#loc60)
    %44 = cir.cast(integral, %43 : !s8i), !s32i loc(#loc60)
    %45 = cir.const #cir.int<127> : !s32i loc(#loc61)
    %46 = cir.unary(minus, %45) nsw : !s32i, !s32i loc(#loc61)
    %47 = cir.const #cir.int<1> : !s32i loc(#loc61)
    %48 = cir.binop(sub, %46, %47) nsw : !s32i loc(#loc61)
    %49 = cir.cmp(gt, %44, %48) : !s32i, !cir.bool loc(#loc122)
    cir.brcond %49 ^bb17, ^bb18 loc(#loc123)
  ^bb17:  // pred: ^bb16
    %50 = cir.load %1 : !cir.ptr<!s8i>, !s8i loc(#loc65)
    %51 = cir.cast(integral, %50 : !s8i), !s32i loc(#loc65)
    %52 = cir.const #cir.int<1> : !s32i loc(#loc42)
    %53 = cir.binop(sub, %51, %52) nsw : !s32i loc(#loc65)
    %54 = cir.cast(integral, %53 : !s32i), !s8i loc(#loc65)
    cir.store %54, %0 : !s8i, !cir.ptr<!s8i> loc(#loc113)
    %55 = cir.load %0 : !cir.ptr<!s8i>, !s8i loc(#loc66)
    cir.call @printHexCharLine(%55) : (!s8i) -> () loc(#loc67)
    cir.br ^bb19 loc(#loc63)
  ^bb18:  // pred: ^bb16
    %56 = cir.get_global @".str" : !cir.ptr<!cir.array<!s8i x 48>> loc(#loc38)
    %57 = cir.cast(array_to_ptrdecay, %56 : !cir.ptr<!cir.array<!s8i x 48>>), !cir.ptr<!s8i> loc(#loc38)
    cir.call @printLine(%57) : (!cir.ptr<!s8i>) -> () loc(#loc68)
    cir.br ^bb19 loc(#loc59)
  ^bb19:  // 2 preds: ^bb17, ^bb18
    cir.br ^bb20 loc(#loc59)
  ^bb20:  // pred: ^bb19
    cir.br ^bb22 loc(#loc69)
  ^bb21:  // no predecessors
    cir.br ^bb13 loc(#loc55)
  ^bb22:  // 2 preds: ^bb13, ^bb20
    cir.br ^bb23 loc(#loc55)
  ^bb23:  // pred: ^bb22
    cir.return loc(#loc40)
  } loc(#loc112)
  cir.func no_proto internal private @goodG2B() extra(#fn_attr1) {
    %0 = cir.alloca !s8i, !cir.ptr<!s8i>, ["result", init] {alignment = 1 : i64} loc(#loc125)
    %1 = cir.alloca !s8i, !cir.ptr<!s8i>, ["data"] {alignment = 1 : i64} loc(#loc126)
    %2 = cir.const #cir.int<32> : !s32i loc(#loc76)
    %3 = cir.cast(integral, %2 : !s32i), !s8i loc(#loc76)
    cir.store %3, %1 : !s8i, !cir.ptr<!s8i> loc(#loc127)
    cir.br ^bb1 loc(#loc128)
  ^bb1:  // pred: ^bb0
    cir.br ^bb2 loc(#loc128)
  ^bb2:  // 2 preds: ^bb1, ^bb5
    %4 = cir.const #cir.int<1> : !s32i loc(#loc80)
    %5 = cir.cast(int_to_bool, %4 : !s32i), !cir.bool loc(#loc80)
    cir.brcond %5 ^bb3, ^bb6 loc(#loc80)
  ^bb3:  // pred: ^bb2
    cir.br ^bb4 loc(#loc129)
  ^bb4:  // pred: ^bb3
    %6 = cir.const #cir.int<2> : !s32i loc(#loc82)
    %7 = cir.unary(minus, %6) nsw : !s32i, !s32i loc(#loc83)
    %8 = cir.cast(integral, %7 : !s32i), !s8i loc(#loc83)
    cir.store %8, %1 : !s8i, !cir.ptr<!s8i> loc(#loc130)
    cir.br ^bb6 loc(#loc85)
  ^bb5:  // no predecessors
    cir.br ^bb2 loc(#loc79)
  ^bb6:  // 2 preds: ^bb2, ^bb4
    cir.br ^bb7 loc(#loc79)
  ^bb7:  // pred: ^bb6
    cir.br ^bb8 loc(#loc131)
  ^bb8:  // pred: ^bb7
    cir.br ^bb9 loc(#loc131)
  ^bb9:  // 2 preds: ^bb8, ^bb14
    %9 = cir.const #cir.int<1> : !s32i loc(#loc88)
    %10 = cir.cast(int_to_bool, %9 : !s32i), !cir.bool loc(#loc88)
    cir.brcond %10 ^bb10, ^bb15 loc(#loc88)
  ^bb10:  // pred: ^bb9
    cir.br ^bb11 loc(#loc132)
  ^bb11:  // pred: ^bb10
    cir.br ^bb12 loc(#loc133)
  ^bb12:  // pred: ^bb11
    %11 = cir.load %1 : !cir.ptr<!s8i>, !s8i loc(#loc92)
    %12 = cir.cast(integral, %11 : !s8i), !s32i loc(#loc92)
    %13 = cir.const #cir.int<1> : !s32i loc(#loc73)
    %14 = cir.binop(sub, %12, %13) nsw : !s32i loc(#loc92)
    %15 = cir.cast(integral, %14 : !s32i), !s8i loc(#loc92)
    cir.store %15, %0 : !s8i, !cir.ptr<!s8i> loc(#loc125)
    %16 = cir.load %0 : !cir.ptr<!s8i>, !s8i loc(#loc93)
    cir.call @printHexCharLine(%16) : (!s8i) -> () loc(#loc94)
    cir.br ^bb13 loc(#loc91)
  ^bb13:  // pred: ^bb12
    cir.br ^bb15 loc(#loc95)
  ^bb14:  // no predecessors
    cir.br ^bb9 loc(#loc87)
  ^bb15:  // 2 preds: ^bb9, ^bb13
    cir.br ^bb16 loc(#loc87)
  ^bb16:  // pred: ^bb15
    cir.return loc(#loc71)
  } loc(#loc124)
} loc(#loc)
#loc = loc("/workspaces/juliet-c/testcases/CWE191_Integer_Underflow/s01/CWE191_Integer_Underflow__char_rand_sub_16.c":0:0)
#loc1 = loc("/usr/include/stdlib.h":573:1)
#loc2 = loc("/usr/include/stdlib.h":573:24)
#loc3 = loc("../../../testcasesupport/std_testcase_io.h":30:1)
#loc4 = loc("../../../testcasesupport/std_testcase_io.h":30:35)
#loc5 = loc("CWE191_Integer_Underflow__char_rand_sub_16.c":22:1)
#loc6 = loc("CWE191_Integer_Underflow__char_rand_sub_16.c":41:1)
#loc7 = loc("CWE191_Integer_Underflow__char_rand_sub_16.c":36:13)
#loc8 = loc("CWE191_Integer_Underflow__char_rand_sub_16.c":36:34)
#loc9 = loc("CWE191_Integer_Underflow__char_rand_sub_16.c":24:5)
#loc10 = loc("CWE191_Integer_Underflow__char_rand_sub_16.c":24:10)
#loc11 = loc("CWE191_Integer_Underflow__char_rand_sub_16.c":25:12)
#loc12 = loc("CWE191_Integer_Underflow__char_rand_sub_16.c":25:5)
#loc13 = loc("CWE191_Integer_Underflow__char_rand_sub_16.c":26:5)
#loc14 = loc("CWE191_Integer_Underflow__char_rand_sub_16.c":31:5)
#loc15 = loc("CWE191_Integer_Underflow__char_rand_sub_16.c":26:11)
#loc16 = loc("CWE191_Integer_Underflow__char_rand_sub_16.c":27:5)
#loc18 = loc("CWE191_Integer_Underflow__char_rand_sub_16.c":29:9)
#loc19 = loc("CWE191_Integer_Underflow__char_rand_sub_16.c":30:9)
#loc20 = loc("CWE191_Integer_Underflow__char_rand_sub_16.c":32:5)
#loc21 = loc("CWE191_Integer_Underflow__char_rand_sub_16.c":40:5)
#loc22 = loc("CWE191_Integer_Underflow__char_rand_sub_16.c":32:11)
#loc23 = loc("CWE191_Integer_Underflow__char_rand_sub_16.c":33:5)
#loc24 = loc("CWE191_Integer_Underflow__char_rand_sub_16.c":34:9)
#loc25 = loc("CWE191_Integer_Underflow__char_rand_sub_16.c":38:9)
#loc26 = loc("CWE191_Integer_Underflow__char_rand_sub_16.c":36:27)
#loc27 = loc("CWE191_Integer_Underflow__char_rand_sub_16.c":37:30)
#loc28 = loc("CWE191_Integer_Underflow__char_rand_sub_16.c":37:13)
#loc29 = loc("CWE191_Integer_Underflow__char_rand_sub_16.c":39:9)
#loc30 = loc("CWE191_Integer_Underflow__char_rand_sub_16.c":96:1)
#loc31 = loc("CWE191_Integer_Underflow__char_rand_sub_16.c":100:1)
#loc32 = loc("CWE191_Integer_Underflow__char_rand_sub_16.c":98:5)
#loc33 = loc("CWE191_Integer_Underflow__char_rand_sub_16.c":98:13)
#loc34 = loc("CWE191_Integer_Underflow__char_rand_sub_16.c":99:5)
#loc35 = loc("CWE191_Integer_Underflow__char_rand_sub_16.c":99:13)
#loc36 = loc("../../../testcasesupport/std_testcase_io.h":14:1)
#loc37 = loc("../../../testcasesupport/std_testcase_io.h":14:33)
#loc38 = loc("CWE191_Integer_Underflow__char_rand_sub_16.c":68:23)
#loc39 = loc("CWE191_Integer_Underflow__char_rand_sub_16.c":48:1)
#loc40 = loc("CWE191_Integer_Underflow__char_rand_sub_16.c":72:1)
#loc41 = loc("CWE191_Integer_Underflow__char_rand_sub_16.c":63:13)
#loc42 = loc("CWE191_Integer_Underflow__char_rand_sub_16.c":63:34)
#loc43 = loc("CWE191_Integer_Underflow__char_rand_sub_16.c":50:5)
#loc44 = loc("CWE191_Integer_Underflow__char_rand_sub_16.c":50:10)
#loc45 = loc("CWE191_Integer_Underflow__char_rand_sub_16.c":51:12)
#loc46 = loc("CWE191_Integer_Underflow__char_rand_sub_16.c":51:5)
#loc47 = loc("CWE191_Integer_Underflow__char_rand_sub_16.c":52:5)
#loc48 = loc("CWE191_Integer_Underflow__char_rand_sub_16.c":57:5)
#loc49 = loc("CWE191_Integer_Underflow__char_rand_sub_16.c":52:11)
#loc50 = loc("CWE191_Integer_Underflow__char_rand_sub_16.c":53:5)
#loc52 = loc("CWE191_Integer_Underflow__char_rand_sub_16.c":55:9)
#loc53 = loc("CWE191_Integer_Underflow__char_rand_sub_16.c":56:9)
#loc54 = loc("CWE191_Integer_Underflow__char_rand_sub_16.c":58:5)
#loc55 = loc("CWE191_Integer_Underflow__char_rand_sub_16.c":71:5)
#loc56 = loc("CWE191_Integer_Underflow__char_rand_sub_16.c":58:11)
#loc57 = loc("CWE191_Integer_Underflow__char_rand_sub_16.c":59:5)
#loc58 = loc("CWE191_Integer_Underflow__char_rand_sub_16.c":61:9)
#loc59 = loc("CWE191_Integer_Underflow__char_rand_sub_16.c":69:9)
#loc60 = loc("CWE191_Integer_Underflow__char_rand_sub_16.c":61:13)
#loc61 = loc("CWE191_Integer_Underflow__char_rand_sub_16.c":61:20)
#loc62 = loc("CWE191_Integer_Underflow__char_rand_sub_16.c":62:9)
#loc63 = loc("CWE191_Integer_Underflow__char_rand_sub_16.c":65:9)
#loc64 = loc("CWE191_Integer_Underflow__char_rand_sub_16.c":67:9)
#loc65 = loc("CWE191_Integer_Underflow__char_rand_sub_16.c":63:27)
#loc66 = loc("CWE191_Integer_Underflow__char_rand_sub_16.c":64:30)
#loc67 = loc("CWE191_Integer_Underflow__char_rand_sub_16.c":64:13)
#loc68 = loc("CWE191_Integer_Underflow__char_rand_sub_16.c":68:13)
#loc69 = loc("CWE191_Integer_Underflow__char_rand_sub_16.c":70:9)
#loc70 = loc("CWE191_Integer_Underflow__char_rand_sub_16.c":75:1)
#loc71 = loc("CWE191_Integer_Underflow__char_rand_sub_16.c":94:1)
#loc72 = loc("CWE191_Integer_Underflow__char_rand_sub_16.c":89:13)
#loc73 = loc("CWE191_Integer_Underflow__char_rand_sub_16.c":89:34)
#loc74 = loc("CWE191_Integer_Underflow__char_rand_sub_16.c":77:5)
#loc75 = loc("CWE191_Integer_Underflow__char_rand_sub_16.c":77:10)
#loc76 = loc("CWE191_Integer_Underflow__char_rand_sub_16.c":78:12)
#loc77 = loc("CWE191_Integer_Underflow__char_rand_sub_16.c":78:5)
#loc78 = loc("CWE191_Integer_Underflow__char_rand_sub_16.c":79:5)
#loc79 = loc("CWE191_Integer_Underflow__char_rand_sub_16.c":84:5)
#loc80 = loc("CWE191_Integer_Underflow__char_rand_sub_16.c":79:11)
#loc81 = loc("CWE191_Integer_Underflow__char_rand_sub_16.c":80:5)
#loc82 = loc("CWE191_Integer_Underflow__char_rand_sub_16.c":82:17)
#loc83 = loc("CWE191_Integer_Underflow__char_rand_sub_16.c":82:16)
#loc84 = loc("CWE191_Integer_Underflow__char_rand_sub_16.c":82:9)
#loc85 = loc("CWE191_Integer_Underflow__char_rand_sub_16.c":83:9)
#loc86 = loc("CWE191_Integer_Underflow__char_rand_sub_16.c":85:5)
#loc87 = loc("CWE191_Integer_Underflow__char_rand_sub_16.c":93:5)
#loc88 = loc("CWE191_Integer_Underflow__char_rand_sub_16.c":85:11)
#loc89 = loc("CWE191_Integer_Underflow__char_rand_sub_16.c":86:5)
#loc90 = loc("CWE191_Integer_Underflow__char_rand_sub_16.c":87:9)
#loc91 = loc("CWE191_Integer_Underflow__char_rand_sub_16.c":91:9)
#loc92 = loc("CWE191_Integer_Underflow__char_rand_sub_16.c":89:27)
#loc93 = loc("CWE191_Integer_Underflow__char_rand_sub_16.c":90:30)
#loc94 = loc("CWE191_Integer_Underflow__char_rand_sub_16.c":90:13)
#loc95 = loc("CWE191_Integer_Underflow__char_rand_sub_16.c":92:9)
#loc96 = loc(fused[#loc1, #loc2])
#loc97 = loc(fused[#loc3, #loc4])
#loc98 = loc(fused[#loc5, #loc6])
#loc99 = loc(fused[#loc7, #loc8])
#loc100 = loc(fused[#loc9, #loc10])
#loc101 = loc(fused[#loc12, #loc11])
#loc102 = loc(fused[#loc13, #loc14])
#loc103 = loc(fused[#loc16, #loc14])
#loc104 = loc(fused[#loc18, #loc17])
#loc105 = loc(fused[#loc20, #loc21])
#loc106 = loc(fused[#loc23, #loc21])
#loc107 = loc(fused[#loc24, #loc25])
#loc108 = loc(fused[#loc30, #loc31])
#loc109 = loc(fused[#loc32, #loc33])
#loc110 = loc(fused[#loc34, #loc35])
#loc111 = loc(fused[#loc36, #loc37])
#loc112 = loc(fused[#loc39, #loc40])
#loc113 = loc(fused[#loc41, #loc42])
#loc114 = loc(fused[#loc43, #loc44])
#loc115 = loc(fused[#loc46, #loc45])
#loc116 = loc(fused[#loc47, #loc48])
#loc117 = loc(fused[#loc50, #loc48])
#loc118 = loc(fused[#loc52, #loc51])
#loc119 = loc(fused[#loc54, #loc55])
#loc120 = loc(fused[#loc57, #loc55])
#loc121 = loc(fused[#loc58, #loc59])
#loc122 = loc(fused[#loc60, #loc61])
#loc123 = loc(fused[#loc62, #loc63, #loc64, #loc59])
#loc124 = loc(fused[#loc70, #loc71])
#loc125 = loc(fused[#loc72, #loc73])
#loc126 = loc(fused[#loc74, #loc75])
#loc127 = loc(fused[#loc77, #loc76])
#loc128 = loc(fused[#loc78, #loc79])
#loc129 = loc(fused[#loc81, #loc79])
#loc130 = loc(fused[#loc84, #loc82])
#loc131 = loc(fused[#loc86, #loc87])
#loc132 = loc(fused[#loc89, #loc87])
#loc133 = loc(fused[#loc90, #loc91])
