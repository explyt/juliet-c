!s32i = !cir.int<s, 32>
!s8i = !cir.int<s, 8>
!u32i = !cir.int<u, 32>
!void = !cir.void
#fn_attr = #cir<extra({nothrow = #cir.nothrow})>
#fn_attr1 = #cir<extra({inline = #cir.inline<no>, nothrow = #cir.nothrow, optnone = #cir.optnone})>
#loc27 = loc("CWE190_Integer_Overflow__unsigned_int_rand_preinc_12.c":29:30)
#loc79 = loc("CWE190_Integer_Overflow__unsigned_int_rand_preinc_12.c":75:30)
#loc81 = loc("CWE190_Integer_Overflow__unsigned_int_rand_preinc_12.c":80:30)
module @"/home/ladisgin/git_proj/juliet-c/testcases/CWE190_Integer_Overflow/s07/CWE190_Integer_Overflow__unsigned_int_rand_preinc_12.c" attributes {cir.lang = #cir.lang<c>, cir.sob = #cir.signed_overflow_behavior<undefined>, cir.triple = "x86_64-unknown-linux-gnu", dlti.dl_spec = #dlti.dl_spec<i128 = dense<128> : vector<2xi64>, i64 = dense<64> : vector<2xi64>, f80 = dense<128> : vector<2xi64>, !llvm.ptr<271> = dense<32> : vector<4xi64>, !llvm.ptr<270> = dense<32> : vector<4xi64>, f128 = dense<128> : vector<2xi64>, !llvm.ptr<272> = dense<64> : vector<4xi64>, f16 = dense<16> : vector<2xi64>, f64 = dense<64> : vector<2xi64>, i16 = dense<16> : vector<2xi64>, i32 = dense<32> : vector<2xi64>, i1 = dense<8> : vector<2xi64>, i8 = dense<8> : vector<2xi64>, !llvm.ptr = dense<64> : vector<4xi64>, "dlti.stack_alignment" = 128 : i64, "dlti.endianness" = "little">} {
  cir.func no_proto private @globalReturnsTrueOrFalse(...) -> !s32i loc(#loc156)
  cir.func private @rand() -> !s32i extra(#fn_attr) loc(#loc157)
  cir.func private @printUnsignedLine(!u32i) loc(#loc158)
  cir.func private @printLine(!cir.ptr<!s8i>) loc(#loc159)
  cir.global "private" constant cir_private dsolocal @".str" = #cir.const_array<"data value is too large to perform arithmetic safely.\00" : !cir.array<!s8i x 54>> : !cir.array<!s8i x 54> {alignment = 1 : i64} loc(#loc9)
  cir.func no_proto @CWE190_Integer_Overflow__unsigned_int_rand_preinc_12_bad() extra(#fn_attr1) {
    %0 = cir.alloca !u32i, !cir.ptr<!u32i>, ["result", init] {alignment = 4 : i64} loc(#loc161)
    %1 = cir.alloca !u32i, !cir.ptr<!u32i>, ["result", init] {alignment = 4 : i64} loc(#loc162)
    %2 = cir.alloca !u32i, !cir.ptr<!u32i>, ["data"] {alignment = 4 : i64} loc(#loc163)
    %3 = cir.const #cir.int<0> : !s32i loc(#loc18)
    %4 = cir.cast(integral, %3 : !s32i), !u32i loc(#loc18)
    cir.store %4, %2 : !u32i, !cir.ptr<!u32i> loc(#loc164)
    cir.br ^bb1 loc(#loc165)
  ^bb1:  // pred: ^bb0
    %5 = cir.get_global @globalReturnsTrueOrFalse : !cir.ptr<!cir.func<!s32i (...)>> loc(#loc166)
    %6 = cir.cast(bitcast, %5 : !cir.ptr<!cir.func<!s32i (...)>>), !cir.ptr<!cir.func<!s32i ()>> loc(#loc166)
    %7 = cir.call %6() : (!cir.ptr<!cir.func<!s32i ()>>) -> !s32i loc(#loc22)
    %8 = cir.cast(int_to_bool, %7 : !s32i), !cir.bool loc(#loc22)
    cir.brcond %8 ^bb2, ^bb7 loc(#loc167)
  ^bb2:  // pred: ^bb1
    %9 = cir.call @rand() : () -> !s32i extra(#fn_attr) loc(#loc27)
    %10 = cir.const #cir.int<1> : !s32i loc(#loc27)
    %11 = cir.binop(and, %9, %10) : !s32i loc(#loc27)
    %12 = cir.cast(int_to_bool, %11 : !s32i), !cir.bool loc(#loc27)
    cir.brcond %12 ^bb3, ^bb4 loc(#loc27)
  ^bb3:  // pred: ^bb2
    %13 = cir.call @rand() : () -> !s32i extra(#fn_attr) loc(#loc27)
    %14 = cir.cast(integral, %13 : !s32i), !u32i loc(#loc27)
    %15 = cir.const #cir.int<30> : !s32i loc(#loc27)
    %16 = cir.shift(left, %14 : !u32i, %15 : !s32i) -> !u32i loc(#loc27)
    %17 = cir.call @rand() : () -> !s32i extra(#fn_attr) loc(#loc27)
    %18 = cir.cast(integral, %17 : !s32i), !u32i loc(#loc27)
    %19 = cir.const #cir.int<15> : !s32i loc(#loc27)
    %20 = cir.shift(left, %18 : !u32i, %19 : !s32i) -> !u32i loc(#loc27)
    %21 = cir.binop(xor, %16, %20) : !u32i loc(#loc27)
    %22 = cir.call @rand() : () -> !s32i extra(#fn_attr) loc(#loc27)
    %23 = cir.cast(integral, %22 : !s32i), !u32i loc(#loc27)
    %24 = cir.binop(xor, %21, %23) : !u32i loc(#loc27)
    cir.br ^bb5(%24 : !u32i) loc(#loc27)
  ^bb4:  // pred: ^bb2
    %25 = cir.call @rand() : () -> !s32i extra(#fn_attr) loc(#loc27)
    %26 = cir.cast(integral, %25 : !s32i), !u32i loc(#loc27)
    %27 = cir.const #cir.int<30> : !s32i loc(#loc27)
    %28 = cir.shift(left, %26 : !u32i, %27 : !s32i) -> !u32i loc(#loc27)
    %29 = cir.call @rand() : () -> !s32i extra(#fn_attr) loc(#loc27)
    %30 = cir.cast(integral, %29 : !s32i), !u32i loc(#loc27)
    %31 = cir.const #cir.int<15> : !s32i loc(#loc27)
    %32 = cir.shift(left, %30 : !u32i, %31 : !s32i) -> !u32i loc(#loc27)
    %33 = cir.binop(xor, %28, %32) : !u32i loc(#loc27)
    %34 = cir.call @rand() : () -> !s32i extra(#fn_attr) loc(#loc27)
    %35 = cir.cast(integral, %34 : !s32i), !u32i loc(#loc27)
    %36 = cir.binop(xor, %33, %35) : !u32i loc(#loc27)
    %37 = cir.unary(minus, %36) : !u32i, !u32i loc(#loc27)
    %38 = cir.const #cir.int<1> : !s32i loc(#loc27)
    %39 = cir.cast(integral, %38 : !s32i), !u32i loc(#loc27)
    %40 = cir.binop(sub, %37, %39) : !u32i loc(#loc27)
    cir.br ^bb5(%40 : !u32i) loc(#loc27)
  ^bb5(%41: !u32i loc("CWE190_Integer_Overflow__unsigned_int_rand_preinc_12.c":29:30)):  // 2 preds: ^bb3, ^bb4
    cir.br ^bb6 loc(#loc27)
  ^bb6:  // pred: ^bb5
    %42 = cir.cast(integral, %41 : !u32i), !s32i loc(#loc27)
    %43 = cir.cast(integral, %42 : !s32i), !u32i loc(#loc27)
    cir.store %43, %2 : !u32i, !cir.ptr<!u32i> loc(#loc168)
    cir.br ^bb8 loc(#loc25)
  ^bb7:  // pred: ^bb1
    %44 = cir.const #cir.int<2> : !s32i loc(#loc29)
    %45 = cir.cast(integral, %44 : !s32i), !u32i loc(#loc29)
    cir.store %45, %2 : !u32i, !cir.ptr<!u32i> loc(#loc169)
    cir.br ^bb8 loc(#loc21)
  ^bb8:  // 2 preds: ^bb6, ^bb7
    cir.br ^bb9 loc(#loc21)
  ^bb9:  // pred: ^bb8
    cir.br ^bb10 loc(#loc170)
  ^bb10:  // pred: ^bb9
    %46 = cir.get_global @globalReturnsTrueOrFalse : !cir.ptr<!cir.func<!s32i (...)>> loc(#loc171)
    %47 = cir.cast(bitcast, %46 : !cir.ptr<!cir.func<!s32i (...)>>), !cir.ptr<!cir.func<!s32i ()>> loc(#loc171)
    %48 = cir.call %47() : (!cir.ptr<!cir.func<!s32i ()>>) -> !s32i loc(#loc33)
    %49 = cir.cast(int_to_bool, %48 : !s32i), !cir.bool loc(#loc33)
    cir.brcond %49 ^bb11, ^bb14 loc(#loc172)
  ^bb11:  // pred: ^bb10
    cir.br ^bb12 loc(#loc173)
  ^bb12:  // pred: ^bb11
    %50 = cir.load %2 : !cir.ptr<!u32i>, !u32i loc(#loc40)
    %51 = cir.unary(inc, %50) : !u32i, !u32i loc(#loc40)
    cir.store %51, %2 : !u32i, !cir.ptr<!u32i> loc(#loc174)
    %52 = cir.load %2 : !cir.ptr<!u32i>, !u32i loc(#loc13)
    cir.store %52, %0 : !u32i, !cir.ptr<!u32i> loc(#loc161)
    %53 = cir.load %0 : !cir.ptr<!u32i>, !u32i loc(#loc42)
    cir.call @printUnsignedLine(%53) : (!u32i) -> () loc(#loc43)
    cir.br ^bb13 loc(#loc39)
  ^bb13:  // pred: ^bb12
    cir.br ^bb20 loc(#loc36)
  ^bb14:  // pred: ^bb10
    cir.br ^bb15 loc(#loc175)
  ^bb15:  // pred: ^bb14
    %54 = cir.load %2 : !cir.ptr<!u32i>, !u32i loc(#loc46)
    %55 = cir.const #cir.int<2147483647> : !s32i loc(#loc47)
    %56 = cir.cast(integral, %55 : !s32i), !u32i loc(#loc47)
    %57 = cir.const #cir.int<2> : !u32i loc(#loc47)
    %58 = cir.binop(mul, %56, %57) : !u32i loc(#loc47)
    %59 = cir.const #cir.int<1> : !u32i loc(#loc47)
    %60 = cir.binop(add, %58, %59) : !u32i loc(#loc47)
    %61 = cir.cmp(lt, %54, %60) : !u32i, !cir.bool loc(#loc176)
    cir.brcond %61 ^bb16, ^bb17 loc(#loc177)
  ^bb16:  // pred: ^bb15
    %62 = cir.load %2 : !cir.ptr<!u32i>, !u32i loc(#loc51)
    %63 = cir.unary(inc, %62) : !u32i, !u32i loc(#loc51)
    cir.store %63, %2 : !u32i, !cir.ptr<!u32i> loc(#loc178)
    %64 = cir.load %2 : !cir.ptr<!u32i>, !u32i loc(#loc15)
    cir.store %64, %1 : !u32i, !cir.ptr<!u32i> loc(#loc162)
    %65 = cir.load %1 : !cir.ptr<!u32i>, !u32i loc(#loc53)
    cir.call @printUnsignedLine(%65) : (!u32i) -> () loc(#loc54)
    cir.br ^bb18 loc(#loc49)
  ^bb17:  // pred: ^bb15
    %66 = cir.get_global @".str" : !cir.ptr<!cir.array<!s8i x 54>> loc(#loc9)
    %67 = cir.cast(array_to_ptrdecay, %66 : !cir.ptr<!cir.array<!s8i x 54>>), !cir.ptr<!s8i> loc(#loc9)
    cir.call @printLine(%67) : (!cir.ptr<!s8i>) -> () loc(#loc55)
    cir.br ^bb18 loc(#loc45)
  ^bb18:  // 2 preds: ^bb16, ^bb17
    cir.br ^bb19 loc(#loc45)
  ^bb19:  // pred: ^bb18
    cir.br ^bb20 loc(#loc32)
  ^bb20:  // 2 preds: ^bb13, ^bb19
    cir.br ^bb21 loc(#loc32)
  ^bb21:  // pred: ^bb20
    cir.return loc(#loc11)
  } loc(#loc160)
  cir.func no_proto @CWE190_Integer_Overflow__unsigned_int_rand_preinc_12_good() extra(#fn_attr1) {
    %0 = cir.get_global @goodB2G : !cir.ptr<!cir.func<!void ()>> loc(#loc180)
    cir.call %0() : (!cir.ptr<!cir.func<!void ()>>) -> () loc(#loc58)
    %1 = cir.get_global @goodG2B : !cir.ptr<!cir.func<!void ()>> loc(#loc181)
    cir.call %1() : (!cir.ptr<!cir.func<!void ()>>) -> () loc(#loc60)
    cir.return loc(#loc57)
  } loc(#loc179)
  cir.func no_proto internal private @goodB2G() extra(#fn_attr1) {
    %0 = cir.alloca !u32i, !cir.ptr<!u32i>, ["result", init] {alignment = 4 : i64} loc(#loc183)
    %1 = cir.alloca !u32i, !cir.ptr<!u32i>, ["result", init] {alignment = 4 : i64} loc(#loc184)
    %2 = cir.alloca !u32i, !cir.ptr<!u32i>, ["data"] {alignment = 4 : i64} loc(#loc185)
    %3 = cir.const #cir.int<0> : !s32i loc(#loc70)
    %4 = cir.cast(integral, %3 : !s32i), !u32i loc(#loc70)
    cir.store %4, %2 : !u32i, !cir.ptr<!u32i> loc(#loc186)
    cir.br ^bb1 loc(#loc187)
  ^bb1:  // pred: ^bb0
    %5 = cir.get_global @globalReturnsTrueOrFalse : !cir.ptr<!cir.func<!s32i (...)>> loc(#loc188)
    %6 = cir.cast(bitcast, %5 : !cir.ptr<!cir.func<!s32i (...)>>), !cir.ptr<!cir.func<!s32i ()>> loc(#loc188)
    %7 = cir.call %6() : (!cir.ptr<!cir.func<!s32i ()>>) -> !s32i loc(#loc74)
    %8 = cir.cast(int_to_bool, %7 : !s32i), !cir.bool loc(#loc74)
    cir.brcond %8 ^bb2, ^bb7 loc(#loc189)
  ^bb2:  // pred: ^bb1
    %9 = cir.call @rand() : () -> !s32i extra(#fn_attr) loc(#loc79)
    %10 = cir.const #cir.int<1> : !s32i loc(#loc79)
    %11 = cir.binop(and, %9, %10) : !s32i loc(#loc79)
    %12 = cir.cast(int_to_bool, %11 : !s32i), !cir.bool loc(#loc79)
    cir.brcond %12 ^bb3, ^bb4 loc(#loc79)
  ^bb3:  // pred: ^bb2
    %13 = cir.call @rand() : () -> !s32i extra(#fn_attr) loc(#loc79)
    %14 = cir.cast(integral, %13 : !s32i), !u32i loc(#loc79)
    %15 = cir.const #cir.int<30> : !s32i loc(#loc79)
    %16 = cir.shift(left, %14 : !u32i, %15 : !s32i) -> !u32i loc(#loc79)
    %17 = cir.call @rand() : () -> !s32i extra(#fn_attr) loc(#loc79)
    %18 = cir.cast(integral, %17 : !s32i), !u32i loc(#loc79)
    %19 = cir.const #cir.int<15> : !s32i loc(#loc79)
    %20 = cir.shift(left, %18 : !u32i, %19 : !s32i) -> !u32i loc(#loc79)
    %21 = cir.binop(xor, %16, %20) : !u32i loc(#loc79)
    %22 = cir.call @rand() : () -> !s32i extra(#fn_attr) loc(#loc79)
    %23 = cir.cast(integral, %22 : !s32i), !u32i loc(#loc79)
    %24 = cir.binop(xor, %21, %23) : !u32i loc(#loc79)
    cir.br ^bb5(%24 : !u32i) loc(#loc79)
  ^bb4:  // pred: ^bb2
    %25 = cir.call @rand() : () -> !s32i extra(#fn_attr) loc(#loc79)
    %26 = cir.cast(integral, %25 : !s32i), !u32i loc(#loc79)
    %27 = cir.const #cir.int<30> : !s32i loc(#loc79)
    %28 = cir.shift(left, %26 : !u32i, %27 : !s32i) -> !u32i loc(#loc79)
    %29 = cir.call @rand() : () -> !s32i extra(#fn_attr) loc(#loc79)
    %30 = cir.cast(integral, %29 : !s32i), !u32i loc(#loc79)
    %31 = cir.const #cir.int<15> : !s32i loc(#loc79)
    %32 = cir.shift(left, %30 : !u32i, %31 : !s32i) -> !u32i loc(#loc79)
    %33 = cir.binop(xor, %28, %32) : !u32i loc(#loc79)
    %34 = cir.call @rand() : () -> !s32i extra(#fn_attr) loc(#loc79)
    %35 = cir.cast(integral, %34 : !s32i), !u32i loc(#loc79)
    %36 = cir.binop(xor, %33, %35) : !u32i loc(#loc79)
    %37 = cir.unary(minus, %36) : !u32i, !u32i loc(#loc79)
    %38 = cir.const #cir.int<1> : !s32i loc(#loc79)
    %39 = cir.cast(integral, %38 : !s32i), !u32i loc(#loc79)
    %40 = cir.binop(sub, %37, %39) : !u32i loc(#loc79)
    cir.br ^bb5(%40 : !u32i) loc(#loc79)
  ^bb5(%41: !u32i loc("CWE190_Integer_Overflow__unsigned_int_rand_preinc_12.c":75:30)):  // 2 preds: ^bb3, ^bb4
    cir.br ^bb6 loc(#loc79)
  ^bb6:  // pred: ^bb5
    %42 = cir.cast(integral, %41 : !u32i), !s32i loc(#loc79)
    %43 = cir.cast(integral, %42 : !s32i), !u32i loc(#loc79)
    cir.store %43, %2 : !u32i, !cir.ptr<!u32i> loc(#loc190)
    cir.br ^bb12 loc(#loc77)
  ^bb7:  // pred: ^bb1
    %44 = cir.call @rand() : () -> !s32i extra(#fn_attr) loc(#loc81)
    %45 = cir.const #cir.int<1> : !s32i loc(#loc81)
    %46 = cir.binop(and, %44, %45) : !s32i loc(#loc81)
    %47 = cir.cast(int_to_bool, %46 : !s32i), !cir.bool loc(#loc81)
    cir.brcond %47 ^bb8, ^bb9 loc(#loc81)
  ^bb8:  // pred: ^bb7
    %48 = cir.call @rand() : () -> !s32i extra(#fn_attr) loc(#loc81)
    %49 = cir.cast(integral, %48 : !s32i), !u32i loc(#loc81)
    %50 = cir.const #cir.int<30> : !s32i loc(#loc81)
    %51 = cir.shift(left, %49 : !u32i, %50 : !s32i) -> !u32i loc(#loc81)
    %52 = cir.call @rand() : () -> !s32i extra(#fn_attr) loc(#loc81)
    %53 = cir.cast(integral, %52 : !s32i), !u32i loc(#loc81)
    %54 = cir.const #cir.int<15> : !s32i loc(#loc81)
    %55 = cir.shift(left, %53 : !u32i, %54 : !s32i) -> !u32i loc(#loc81)
    %56 = cir.binop(xor, %51, %55) : !u32i loc(#loc81)
    %57 = cir.call @rand() : () -> !s32i extra(#fn_attr) loc(#loc81)
    %58 = cir.cast(integral, %57 : !s32i), !u32i loc(#loc81)
    %59 = cir.binop(xor, %56, %58) : !u32i loc(#loc81)
    cir.br ^bb10(%59 : !u32i) loc(#loc81)
  ^bb9:  // pred: ^bb7
    %60 = cir.call @rand() : () -> !s32i extra(#fn_attr) loc(#loc81)
    %61 = cir.cast(integral, %60 : !s32i), !u32i loc(#loc81)
    %62 = cir.const #cir.int<30> : !s32i loc(#loc81)
    %63 = cir.shift(left, %61 : !u32i, %62 : !s32i) -> !u32i loc(#loc81)
    %64 = cir.call @rand() : () -> !s32i extra(#fn_attr) loc(#loc81)
    %65 = cir.cast(integral, %64 : !s32i), !u32i loc(#loc81)
    %66 = cir.const #cir.int<15> : !s32i loc(#loc81)
    %67 = cir.shift(left, %65 : !u32i, %66 : !s32i) -> !u32i loc(#loc81)
    %68 = cir.binop(xor, %63, %67) : !u32i loc(#loc81)
    %69 = cir.call @rand() : () -> !s32i extra(#fn_attr) loc(#loc81)
    %70 = cir.cast(integral, %69 : !s32i), !u32i loc(#loc81)
    %71 = cir.binop(xor, %68, %70) : !u32i loc(#loc81)
    %72 = cir.unary(minus, %71) : !u32i, !u32i loc(#loc81)
    %73 = cir.const #cir.int<1> : !s32i loc(#loc81)
    %74 = cir.cast(integral, %73 : !s32i), !u32i loc(#loc81)
    %75 = cir.binop(sub, %72, %74) : !u32i loc(#loc81)
    cir.br ^bb10(%75 : !u32i) loc(#loc81)
  ^bb10(%76: !u32i loc("CWE190_Integer_Overflow__unsigned_int_rand_preinc_12.c":80:30)):  // 2 preds: ^bb8, ^bb9
    cir.br ^bb11 loc(#loc81)
  ^bb11:  // pred: ^bb10
    %77 = cir.cast(integral, %76 : !u32i), !s32i loc(#loc81)
    %78 = cir.cast(integral, %77 : !s32i), !u32i loc(#loc81)
    cir.store %78, %2 : !u32i, !cir.ptr<!u32i> loc(#loc191)
    cir.br ^bb12 loc(#loc73)
  ^bb12:  // 2 preds: ^bb6, ^bb11
    cir.br ^bb13 loc(#loc73)
  ^bb13:  // pred: ^bb12
    cir.br ^bb14 loc(#loc192)
  ^bb14:  // pred: ^bb13
    %79 = cir.get_global @globalReturnsTrueOrFalse : !cir.ptr<!cir.func<!s32i (...)>> loc(#loc193)
    %80 = cir.cast(bitcast, %79 : !cir.ptr<!cir.func<!s32i (...)>>), !cir.ptr<!cir.func<!s32i ()>> loc(#loc193)
    %81 = cir.call %80() : (!cir.ptr<!cir.func<!s32i ()>>) -> !s32i loc(#loc85)
    %82 = cir.cast(int_to_bool, %81 : !s32i), !cir.bool loc(#loc85)
    cir.brcond %82 ^bb15, ^bb21 loc(#loc194)
  ^bb15:  // pred: ^bb14
    cir.br ^bb16 loc(#loc195)
  ^bb16:  // pred: ^bb15
    %83 = cir.load %2 : !cir.ptr<!u32i>, !u32i loc(#loc92)
    %84 = cir.const #cir.int<2147483647> : !s32i loc(#loc93)
    %85 = cir.cast(integral, %84 : !s32i), !u32i loc(#loc93)
    %86 = cir.const #cir.int<2> : !u32i loc(#loc93)
    %87 = cir.binop(mul, %85, %86) : !u32i loc(#loc93)
    %88 = cir.const #cir.int<1> : !u32i loc(#loc93)
    %89 = cir.binop(add, %87, %88) : !u32i loc(#loc93)
    %90 = cir.cmp(lt, %83, %89) : !u32i, !cir.bool loc(#loc196)
    cir.brcond %90 ^bb17, ^bb18 loc(#loc197)
  ^bb17:  // pred: ^bb16
    %91 = cir.load %2 : !cir.ptr<!u32i>, !u32i loc(#loc97)
    %92 = cir.unary(inc, %91) : !u32i, !u32i loc(#loc97)
    cir.store %92, %2 : !u32i, !cir.ptr<!u32i> loc(#loc198)
    %93 = cir.load %2 : !cir.ptr<!u32i>, !u32i loc(#loc65)
    cir.store %93, %0 : !u32i, !cir.ptr<!u32i> loc(#loc183)
    %94 = cir.load %0 : !cir.ptr<!u32i>, !u32i loc(#loc99)
    cir.call @printUnsignedLine(%94) : (!u32i) -> () loc(#loc100)
    cir.br ^bb19 loc(#loc95)
  ^bb18:  // pred: ^bb16
    %95 = cir.get_global @".str" : !cir.ptr<!cir.array<!s8i x 54>> loc(#loc101)
    %96 = cir.cast(array_to_ptrdecay, %95 : !cir.ptr<!cir.array<!s8i x 54>>), !cir.ptr<!s8i> loc(#loc101)
    cir.call @printLine(%96) : (!cir.ptr<!s8i>) -> () loc(#loc102)
    cir.br ^bb19 loc(#loc91)
  ^bb19:  // 2 preds: ^bb17, ^bb18
    cir.br ^bb20 loc(#loc91)
  ^bb20:  // pred: ^bb19
    cir.br ^bb27 loc(#loc88)
  ^bb21:  // pred: ^bb14
    cir.br ^bb22 loc(#loc199)
  ^bb22:  // pred: ^bb21
    %97 = cir.load %2 : !cir.ptr<!u32i>, !u32i loc(#loc105)
    %98 = cir.const #cir.int<2147483647> : !s32i loc(#loc106)
    %99 = cir.cast(integral, %98 : !s32i), !u32i loc(#loc106)
    %100 = cir.const #cir.int<2> : !u32i loc(#loc106)
    %101 = cir.binop(mul, %99, %100) : !u32i loc(#loc106)
    %102 = cir.const #cir.int<1> : !u32i loc(#loc106)
    %103 = cir.binop(add, %101, %102) : !u32i loc(#loc106)
    %104 = cir.cmp(lt, %97, %103) : !u32i, !cir.bool loc(#loc200)
    cir.brcond %104 ^bb23, ^bb24 loc(#loc201)
  ^bb23:  // pred: ^bb22
    %105 = cir.load %2 : !cir.ptr<!u32i>, !u32i loc(#loc110)
    %106 = cir.unary(inc, %105) : !u32i, !u32i loc(#loc110)
    cir.store %106, %2 : !u32i, !cir.ptr<!u32i> loc(#loc202)
    %107 = cir.load %2 : !cir.ptr<!u32i>, !u32i loc(#loc67)
    cir.store %107, %1 : !u32i, !cir.ptr<!u32i> loc(#loc184)
    %108 = cir.load %1 : !cir.ptr<!u32i>, !u32i loc(#loc112)
    cir.call @printUnsignedLine(%108) : (!u32i) -> () loc(#loc113)
    cir.br ^bb25 loc(#loc108)
  ^bb24:  // pred: ^bb22
    %109 = cir.get_global @".str" : !cir.ptr<!cir.array<!s8i x 54>> loc(#loc114)
    %110 = cir.cast(array_to_ptrdecay, %109 : !cir.ptr<!cir.array<!s8i x 54>>), !cir.ptr<!s8i> loc(#loc114)
    cir.call @printLine(%110) : (!cir.ptr<!s8i>) -> () loc(#loc115)
    cir.br ^bb25 loc(#loc104)
  ^bb25:  // 2 preds: ^bb23, ^bb24
    cir.br ^bb26 loc(#loc104)
  ^bb26:  // pred: ^bb25
    cir.br ^bb27 loc(#loc84)
  ^bb27:  // 2 preds: ^bb20, ^bb26
    cir.br ^bb28 loc(#loc84)
  ^bb28:  // pred: ^bb27
    cir.return loc(#loc63)
  } loc(#loc182)
  cir.func no_proto internal private @goodG2B() extra(#fn_attr1) {
    %0 = cir.alloca !u32i, !cir.ptr<!u32i>, ["result", init] {alignment = 4 : i64} loc(#loc204)
    %1 = cir.alloca !u32i, !cir.ptr<!u32i>, ["result", init] {alignment = 4 : i64} loc(#loc205)
    %2 = cir.alloca !u32i, !cir.ptr<!u32i>, ["data"] {alignment = 4 : i64} loc(#loc206)
    %3 = cir.const #cir.int<0> : !s32i loc(#loc124)
    %4 = cir.cast(integral, %3 : !s32i), !u32i loc(#loc124)
    cir.store %4, %2 : !u32i, !cir.ptr<!u32i> loc(#loc207)
    cir.br ^bb1 loc(#loc208)
  ^bb1:  // pred: ^bb0
    %5 = cir.get_global @globalReturnsTrueOrFalse : !cir.ptr<!cir.func<!s32i (...)>> loc(#loc209)
    %6 = cir.cast(bitcast, %5 : !cir.ptr<!cir.func<!s32i (...)>>), !cir.ptr<!cir.func<!s32i ()>> loc(#loc209)
    %7 = cir.call %6() : (!cir.ptr<!cir.func<!s32i ()>>) -> !s32i loc(#loc128)
    %8 = cir.cast(int_to_bool, %7 : !s32i), !cir.bool loc(#loc128)
    cir.brcond %8 ^bb2, ^bb3 loc(#loc210)
  ^bb2:  // pred: ^bb1
    %9 = cir.const #cir.int<2> : !s32i loc(#loc133)
    %10 = cir.cast(integral, %9 : !s32i), !u32i loc(#loc133)
    cir.store %10, %2 : !u32i, !cir.ptr<!u32i> loc(#loc211)
    cir.br ^bb4 loc(#loc131)
  ^bb3:  // pred: ^bb1
    %11 = cir.const #cir.int<2> : !s32i loc(#loc135)
    %12 = cir.cast(integral, %11 : !s32i), !u32i loc(#loc135)
    cir.store %12, %2 : !u32i, !cir.ptr<!u32i> loc(#loc212)
    cir.br ^bb4 loc(#loc127)
  ^bb4:  // 2 preds: ^bb2, ^bb3
    cir.br ^bb5 loc(#loc127)
  ^bb5:  // pred: ^bb4
    cir.br ^bb6 loc(#loc213)
  ^bb6:  // pred: ^bb5
    %13 = cir.get_global @globalReturnsTrueOrFalse : !cir.ptr<!cir.func<!s32i (...)>> loc(#loc214)
    %14 = cir.cast(bitcast, %13 : !cir.ptr<!cir.func<!s32i (...)>>), !cir.ptr<!cir.func<!s32i ()>> loc(#loc214)
    %15 = cir.call %14() : (!cir.ptr<!cir.func<!s32i ()>>) -> !s32i loc(#loc139)
    %16 = cir.cast(int_to_bool, %15 : !s32i), !cir.bool loc(#loc139)
    cir.brcond %16 ^bb7, ^bb10 loc(#loc215)
  ^bb7:  // pred: ^bb6
    cir.br ^bb8 loc(#loc216)
  ^bb8:  // pred: ^bb7
    %17 = cir.load %2 : !cir.ptr<!u32i>, !u32i loc(#loc146)
    %18 = cir.unary(inc, %17) : !u32i, !u32i loc(#loc146)
    cir.store %18, %2 : !u32i, !cir.ptr<!u32i> loc(#loc217)
    %19 = cir.load %2 : !cir.ptr<!u32i>, !u32i loc(#loc119)
    cir.store %19, %0 : !u32i, !cir.ptr<!u32i> loc(#loc204)
    %20 = cir.load %0 : !cir.ptr<!u32i>, !u32i loc(#loc148)
    cir.call @printUnsignedLine(%20) : (!u32i) -> () loc(#loc149)
    cir.br ^bb9 loc(#loc145)
  ^bb9:  // pred: ^bb8
    cir.br ^bb13 loc(#loc142)
  ^bb10:  // pred: ^bb6
    cir.br ^bb11 loc(#loc218)
  ^bb11:  // pred: ^bb10
    %21 = cir.load %2 : !cir.ptr<!u32i>, !u32i loc(#loc152)
    %22 = cir.unary(inc, %21) : !u32i, !u32i loc(#loc152)
    cir.store %22, %2 : !u32i, !cir.ptr<!u32i> loc(#loc219)
    %23 = cir.load %2 : !cir.ptr<!u32i>, !u32i loc(#loc121)
    cir.store %23, %1 : !u32i, !cir.ptr<!u32i> loc(#loc205)
    %24 = cir.load %1 : !cir.ptr<!u32i>, !u32i loc(#loc154)
    cir.call @printUnsignedLine(%24) : (!u32i) -> () loc(#loc155)
    cir.br ^bb12 loc(#loc151)
  ^bb12:  // pred: ^bb11
    cir.br ^bb13 loc(#loc138)
  ^bb13:  // 2 preds: ^bb9, ^bb12
    cir.br ^bb14 loc(#loc138)
  ^bb14:  // pred: ^bb13
    cir.return loc(#loc117)
  } loc(#loc203)
} loc(#loc)
#loc = loc("/home/ladisgin/git_proj/juliet-c/testcases/CWE190_Integer_Overflow/s07/CWE190_Integer_Overflow__unsigned_int_rand_preinc_12.c":0:0)
#loc1 = loc("../../../testcasesupport/std_testcase_io.h":52:1)
#loc2 = loc("../../../testcasesupport/std_testcase_io.h":52:30)
#loc3 = loc("/usr/include/stdlib.h":573:1)
#loc4 = loc("/usr/include/stdlib.h":573:24)
#loc5 = loc("../../../testcasesupport/std_testcase_io.h":34:1)
#loc6 = loc("../../../testcasesupport/std_testcase_io.h":34:47)
#loc7 = loc("../../../testcasesupport/std_testcase_io.h":14:1)
#loc8 = loc("../../../testcasesupport/std_testcase_io.h":14:33)
#loc9 = loc("CWE190_Integer_Overflow__unsigned_int_rand_preinc_12.c":56:23)
#loc10 = loc("CWE190_Integer_Overflow__unsigned_int_rand_preinc_12.c":22:1)
#loc11 = loc("CWE190_Integer_Overflow__unsigned_int_rand_preinc_12.c":59:1)
#loc12 = loc("CWE190_Integer_Overflow__unsigned_int_rand_preinc_12.c":41:13)
#loc13 = loc("CWE190_Integer_Overflow__unsigned_int_rand_preinc_12.c":41:35)
#loc14 = loc("CWE190_Integer_Overflow__unsigned_int_rand_preinc_12.c":51:13)
#loc15 = loc("CWE190_Integer_Overflow__unsigned_int_rand_preinc_12.c":51:35)
#loc16 = loc("CWE190_Integer_Overflow__unsigned_int_rand_preinc_12.c":24:5)
#loc17 = loc("CWE190_Integer_Overflow__unsigned_int_rand_preinc_12.c":24:18)
#loc18 = loc("CWE190_Integer_Overflow__unsigned_int_rand_preinc_12.c":25:12)
#loc19 = loc("CWE190_Integer_Overflow__unsigned_int_rand_preinc_12.c":25:5)
#loc20 = loc("CWE190_Integer_Overflow__unsigned_int_rand_preinc_12.c":26:5)
#loc21 = loc("CWE190_Integer_Overflow__unsigned_int_rand_preinc_12.c":35:5)
#loc22 = loc("CWE190_Integer_Overflow__unsigned_int_rand_preinc_12.c":26:8)
#loc23 = loc("CWE190_Integer_Overflow__unsigned_int_rand_preinc_12.c":26:33)
#loc24 = loc("CWE190_Integer_Overflow__unsigned_int_rand_preinc_12.c":27:5)
#loc25 = loc("CWE190_Integer_Overflow__unsigned_int_rand_preinc_12.c":30:5)
#loc26 = loc("CWE190_Integer_Overflow__unsigned_int_rand_preinc_12.c":32:5)
#loc28 = loc("CWE190_Integer_Overflow__unsigned_int_rand_preinc_12.c":29:9)
#loc29 = loc("CWE190_Integer_Overflow__unsigned_int_rand_preinc_12.c":34:16)
#loc30 = loc("CWE190_Integer_Overflow__unsigned_int_rand_preinc_12.c":34:9)
#loc31 = loc("CWE190_Integer_Overflow__unsigned_int_rand_preinc_12.c":36:5)
#loc32 = loc("CWE190_Integer_Overflow__unsigned_int_rand_preinc_12.c":58:5)
#loc33 = loc("CWE190_Integer_Overflow__unsigned_int_rand_preinc_12.c":36:8)
#loc34 = loc("CWE190_Integer_Overflow__unsigned_int_rand_preinc_12.c":36:33)
#loc35 = loc("CWE190_Integer_Overflow__unsigned_int_rand_preinc_12.c":37:5)
#loc36 = loc("CWE190_Integer_Overflow__unsigned_int_rand_preinc_12.c":44:5)
#loc37 = loc("CWE190_Integer_Overflow__unsigned_int_rand_preinc_12.c":46:5)
#loc38 = loc("CWE190_Integer_Overflow__unsigned_int_rand_preinc_12.c":38:9)
#loc39 = loc("CWE190_Integer_Overflow__unsigned_int_rand_preinc_12.c":43:9)
#loc40 = loc("CWE190_Integer_Overflow__unsigned_int_rand_preinc_12.c":40:13)
#loc41 = loc("CWE190_Integer_Overflow__unsigned_int_rand_preinc_12.c":40:15)
#loc42 = loc("CWE190_Integer_Overflow__unsigned_int_rand_preinc_12.c":42:31)
#loc43 = loc("CWE190_Integer_Overflow__unsigned_int_rand_preinc_12.c":42:13)
#loc44 = loc("CWE190_Integer_Overflow__unsigned_int_rand_preinc_12.c":48:9)
#loc45 = loc("CWE190_Integer_Overflow__unsigned_int_rand_preinc_12.c":57:9)
#loc46 = loc("CWE190_Integer_Overflow__unsigned_int_rand_preinc_12.c":48:13)
#loc47 = loc("CWE190_Integer_Overflow__unsigned_int_rand_preinc_12.c":48:20)
#loc48 = loc("CWE190_Integer_Overflow__unsigned_int_rand_preinc_12.c":49:9)
#loc49 = loc("CWE190_Integer_Overflow__unsigned_int_rand_preinc_12.c":53:9)
#loc50 = loc("CWE190_Integer_Overflow__unsigned_int_rand_preinc_12.c":55:9)
#loc51 = loc("CWE190_Integer_Overflow__unsigned_int_rand_preinc_12.c":50:13)
#loc52 = loc("CWE190_Integer_Overflow__unsigned_int_rand_preinc_12.c":50:15)
#loc53 = loc("CWE190_Integer_Overflow__unsigned_int_rand_preinc_12.c":52:31)
#loc54 = loc("CWE190_Integer_Overflow__unsigned_int_rand_preinc_12.c":52:13)
#loc55 = loc("CWE190_Integer_Overflow__unsigned_int_rand_preinc_12.c":56:13)
#loc56 = loc("CWE190_Integer_Overflow__unsigned_int_rand_preinc_12.c":149:1)
#loc57 = loc("CWE190_Integer_Overflow__unsigned_int_rand_preinc_12.c":153:1)
#loc58 = loc("CWE190_Integer_Overflow__unsigned_int_rand_preinc_12.c":151:5)
#loc59 = loc("CWE190_Integer_Overflow__unsigned_int_rand_preinc_12.c":151:13)
#loc60 = loc("CWE190_Integer_Overflow__unsigned_int_rand_preinc_12.c":152:5)
#loc61 = loc("CWE190_Integer_Overflow__unsigned_int_rand_preinc_12.c":152:13)
#loc62 = loc("CWE190_Integer_Overflow__unsigned_int_rand_preinc_12.c":68:1)
#loc63 = loc("CWE190_Integer_Overflow__unsigned_int_rand_preinc_12.c":110:1)
#loc64 = loc("CWE190_Integer_Overflow__unsigned_int_rand_preinc_12.c":88:13)
#loc65 = loc("CWE190_Integer_Overflow__unsigned_int_rand_preinc_12.c":88:35)
#loc66 = loc("CWE190_Integer_Overflow__unsigned_int_rand_preinc_12.c":102:13)
#loc67 = loc("CWE190_Integer_Overflow__unsigned_int_rand_preinc_12.c":102:35)
#loc68 = loc("CWE190_Integer_Overflow__unsigned_int_rand_preinc_12.c":70:5)
#loc69 = loc("CWE190_Integer_Overflow__unsigned_int_rand_preinc_12.c":70:18)
#loc70 = loc("CWE190_Integer_Overflow__unsigned_int_rand_preinc_12.c":71:12)
#loc71 = loc("CWE190_Integer_Overflow__unsigned_int_rand_preinc_12.c":71:5)
#loc72 = loc("CWE190_Integer_Overflow__unsigned_int_rand_preinc_12.c":72:5)
#loc73 = loc("CWE190_Integer_Overflow__unsigned_int_rand_preinc_12.c":81:5)
#loc74 = loc("CWE190_Integer_Overflow__unsigned_int_rand_preinc_12.c":72:8)
#loc75 = loc("CWE190_Integer_Overflow__unsigned_int_rand_preinc_12.c":72:33)
#loc76 = loc("CWE190_Integer_Overflow__unsigned_int_rand_preinc_12.c":73:5)
#loc77 = loc("CWE190_Integer_Overflow__unsigned_int_rand_preinc_12.c":76:5)
#loc78 = loc("CWE190_Integer_Overflow__unsigned_int_rand_preinc_12.c":78:5)
#loc80 = loc("CWE190_Integer_Overflow__unsigned_int_rand_preinc_12.c":75:9)
#loc82 = loc("CWE190_Integer_Overflow__unsigned_int_rand_preinc_12.c":80:9)
#loc83 = loc("CWE190_Integer_Overflow__unsigned_int_rand_preinc_12.c":82:5)
#loc84 = loc("CWE190_Integer_Overflow__unsigned_int_rand_preinc_12.c":109:5)
#loc85 = loc("CWE190_Integer_Overflow__unsigned_int_rand_preinc_12.c":82:8)
#loc86 = loc("CWE190_Integer_Overflow__unsigned_int_rand_preinc_12.c":82:33)
#loc87 = loc("CWE190_Integer_Overflow__unsigned_int_rand_preinc_12.c":83:5)
#loc88 = loc("CWE190_Integer_Overflow__unsigned_int_rand_preinc_12.c":95:5)
#loc89 = loc("CWE190_Integer_Overflow__unsigned_int_rand_preinc_12.c":97:5)
#loc90 = loc("CWE190_Integer_Overflow__unsigned_int_rand_preinc_12.c":85:9)
#loc91 = loc("CWE190_Integer_Overflow__unsigned_int_rand_preinc_12.c":94:9)
#loc92 = loc("CWE190_Integer_Overflow__unsigned_int_rand_preinc_12.c":85:13)
#loc93 = loc("CWE190_Integer_Overflow__unsigned_int_rand_preinc_12.c":85:20)
#loc94 = loc("CWE190_Integer_Overflow__unsigned_int_rand_preinc_12.c":86:9)
#loc95 = loc("CWE190_Integer_Overflow__unsigned_int_rand_preinc_12.c":90:9)
#loc96 = loc("CWE190_Integer_Overflow__unsigned_int_rand_preinc_12.c":92:9)
#loc97 = loc("CWE190_Integer_Overflow__unsigned_int_rand_preinc_12.c":87:13)
#loc98 = loc("CWE190_Integer_Overflow__unsigned_int_rand_preinc_12.c":87:15)
#loc99 = loc("CWE190_Integer_Overflow__unsigned_int_rand_preinc_12.c":89:31)
#loc100 = loc("CWE190_Integer_Overflow__unsigned_int_rand_preinc_12.c":89:13)
#loc101 = loc("CWE190_Integer_Overflow__unsigned_int_rand_preinc_12.c":93:23)
#loc102 = loc("CWE190_Integer_Overflow__unsigned_int_rand_preinc_12.c":93:13)
#loc103 = loc("CWE190_Integer_Overflow__unsigned_int_rand_preinc_12.c":99:9)
#loc104 = loc("CWE190_Integer_Overflow__unsigned_int_rand_preinc_12.c":108:9)
#loc105 = loc("CWE190_Integer_Overflow__unsigned_int_rand_preinc_12.c":99:13)
#loc106 = loc("CWE190_Integer_Overflow__unsigned_int_rand_preinc_12.c":99:20)
#loc107 = loc("CWE190_Integer_Overflow__unsigned_int_rand_preinc_12.c":100:9)
#loc108 = loc("CWE190_Integer_Overflow__unsigned_int_rand_preinc_12.c":104:9)
#loc109 = loc("CWE190_Integer_Overflow__unsigned_int_rand_preinc_12.c":106:9)
#loc110 = loc("CWE190_Integer_Overflow__unsigned_int_rand_preinc_12.c":101:13)
#loc111 = loc("CWE190_Integer_Overflow__unsigned_int_rand_preinc_12.c":101:15)
#loc112 = loc("CWE190_Integer_Overflow__unsigned_int_rand_preinc_12.c":103:31)
#loc113 = loc("CWE190_Integer_Overflow__unsigned_int_rand_preinc_12.c":103:13)
#loc114 = loc("CWE190_Integer_Overflow__unsigned_int_rand_preinc_12.c":107:23)
#loc115 = loc("CWE190_Integer_Overflow__unsigned_int_rand_preinc_12.c":107:13)
#loc116 = loc("CWE190_Integer_Overflow__unsigned_int_rand_preinc_12.c":115:1)
#loc117 = loc("CWE190_Integer_Overflow__unsigned_int_rand_preinc_12.c":147:1)
#loc118 = loc("CWE190_Integer_Overflow__unsigned_int_rand_preinc_12.c":134:13)
#loc119 = loc("CWE190_Integer_Overflow__unsigned_int_rand_preinc_12.c":134:35)
#loc120 = loc("CWE190_Integer_Overflow__unsigned_int_rand_preinc_12.c":143:13)
#loc121 = loc("CWE190_Integer_Overflow__unsigned_int_rand_preinc_12.c":143:35)
#loc122 = loc("CWE190_Integer_Overflow__unsigned_int_rand_preinc_12.c":117:5)
#loc123 = loc("CWE190_Integer_Overflow__unsigned_int_rand_preinc_12.c":117:18)
#loc124 = loc("CWE190_Integer_Overflow__unsigned_int_rand_preinc_12.c":118:12)
#loc125 = loc("CWE190_Integer_Overflow__unsigned_int_rand_preinc_12.c":118:5)
#loc126 = loc("CWE190_Integer_Overflow__unsigned_int_rand_preinc_12.c":119:5)
#loc127 = loc("CWE190_Integer_Overflow__unsigned_int_rand_preinc_12.c":128:5)
#loc128 = loc("CWE190_Integer_Overflow__unsigned_int_rand_preinc_12.c":119:8)
#loc129 = loc("CWE190_Integer_Overflow__unsigned_int_rand_preinc_12.c":119:33)
#loc130 = loc("CWE190_Integer_Overflow__unsigned_int_rand_preinc_12.c":120:5)
#loc131 = loc("CWE190_Integer_Overflow__unsigned_int_rand_preinc_12.c":123:5)
#loc132 = loc("CWE190_Integer_Overflow__unsigned_int_rand_preinc_12.c":125:5)
#loc133 = loc("CWE190_Integer_Overflow__unsigned_int_rand_preinc_12.c":122:16)
#loc134 = loc("CWE190_Integer_Overflow__unsigned_int_rand_preinc_12.c":122:9)
#loc135 = loc("CWE190_Integer_Overflow__unsigned_int_rand_preinc_12.c":127:16)
#loc136 = loc("CWE190_Integer_Overflow__unsigned_int_rand_preinc_12.c":127:9)
#loc137 = loc("CWE190_Integer_Overflow__unsigned_int_rand_preinc_12.c":129:5)
#loc138 = loc("CWE190_Integer_Overflow__unsigned_int_rand_preinc_12.c":146:5)
#loc139 = loc("CWE190_Integer_Overflow__unsigned_int_rand_preinc_12.c":129:8)
#loc140 = loc("CWE190_Integer_Overflow__unsigned_int_rand_preinc_12.c":129:33)
#loc141 = loc("CWE190_Integer_Overflow__unsigned_int_rand_preinc_12.c":130:5)
#loc142 = loc("CWE190_Integer_Overflow__unsigned_int_rand_preinc_12.c":137:5)
#loc143 = loc("CWE190_Integer_Overflow__unsigned_int_rand_preinc_12.c":139:5)
#loc144 = loc("CWE190_Integer_Overflow__unsigned_int_rand_preinc_12.c":131:9)
#loc145 = loc("CWE190_Integer_Overflow__unsigned_int_rand_preinc_12.c":136:9)
#loc146 = loc("CWE190_Integer_Overflow__unsigned_int_rand_preinc_12.c":133:13)
#loc147 = loc("CWE190_Integer_Overflow__unsigned_int_rand_preinc_12.c":133:15)
#loc148 = loc("CWE190_Integer_Overflow__unsigned_int_rand_preinc_12.c":135:31)
#loc149 = loc("CWE190_Integer_Overflow__unsigned_int_rand_preinc_12.c":135:13)
#loc150 = loc("CWE190_Integer_Overflow__unsigned_int_rand_preinc_12.c":140:9)
#loc151 = loc("CWE190_Integer_Overflow__unsigned_int_rand_preinc_12.c":145:9)
#loc152 = loc("CWE190_Integer_Overflow__unsigned_int_rand_preinc_12.c":142:13)
#loc153 = loc("CWE190_Integer_Overflow__unsigned_int_rand_preinc_12.c":142:15)
#loc154 = loc("CWE190_Integer_Overflow__unsigned_int_rand_preinc_12.c":144:31)
#loc155 = loc("CWE190_Integer_Overflow__unsigned_int_rand_preinc_12.c":144:13)
#loc156 = loc(fused[#loc1, #loc2])
#loc157 = loc(fused[#loc3, #loc4])
#loc158 = loc(fused[#loc5, #loc6])
#loc159 = loc(fused[#loc7, #loc8])
#loc160 = loc(fused[#loc10, #loc11])
#loc161 = loc(fused[#loc12, #loc13])
#loc162 = loc(fused[#loc14, #loc15])
#loc163 = loc(fused[#loc16, #loc17])
#loc164 = loc(fused[#loc19, #loc18])
#loc165 = loc(fused[#loc20, #loc21])
#loc166 = loc(fused[#loc22, #loc23])
#loc167 = loc(fused[#loc24, #loc25, #loc26, #loc21])
#loc168 = loc(fused[#loc28, #loc27])
#loc169 = loc(fused[#loc30, #loc29])
#loc170 = loc(fused[#loc31, #loc32])
#loc171 = loc(fused[#loc33, #loc34])
#loc172 = loc(fused[#loc35, #loc36, #loc37, #loc32])
#loc173 = loc(fused[#loc38, #loc39])
#loc174 = loc(fused[#loc40, #loc41])
#loc175 = loc(fused[#loc44, #loc45])
#loc176 = loc(fused[#loc46, #loc47])
#loc177 = loc(fused[#loc48, #loc49, #loc50, #loc45])
#loc178 = loc(fused[#loc51, #loc52])
#loc179 = loc(fused[#loc56, #loc57])
#loc180 = loc(fused[#loc58, #loc59])
#loc181 = loc(fused[#loc60, #loc61])
#loc182 = loc(fused[#loc62, #loc63])
#loc183 = loc(fused[#loc64, #loc65])
#loc184 = loc(fused[#loc66, #loc67])
#loc185 = loc(fused[#loc68, #loc69])
#loc186 = loc(fused[#loc71, #loc70])
#loc187 = loc(fused[#loc72, #loc73])
#loc188 = loc(fused[#loc74, #loc75])
#loc189 = loc(fused[#loc76, #loc77, #loc78, #loc73])
#loc190 = loc(fused[#loc80, #loc79])
#loc191 = loc(fused[#loc82, #loc81])
#loc192 = loc(fused[#loc83, #loc84])
#loc193 = loc(fused[#loc85, #loc86])
#loc194 = loc(fused[#loc87, #loc88, #loc89, #loc84])
#loc195 = loc(fused[#loc90, #loc91])
#loc196 = loc(fused[#loc92, #loc93])
#loc197 = loc(fused[#loc94, #loc95, #loc96, #loc91])
#loc198 = loc(fused[#loc97, #loc98])
#loc199 = loc(fused[#loc103, #loc104])
#loc200 = loc(fused[#loc105, #loc106])
#loc201 = loc(fused[#loc107, #loc108, #loc109, #loc104])
#loc202 = loc(fused[#loc110, #loc111])
#loc203 = loc(fused[#loc116, #loc117])
#loc204 = loc(fused[#loc118, #loc119])
#loc205 = loc(fused[#loc120, #loc121])
#loc206 = loc(fused[#loc122, #loc123])
#loc207 = loc(fused[#loc125, #loc124])
#loc208 = loc(fused[#loc126, #loc127])
#loc209 = loc(fused[#loc128, #loc129])
#loc210 = loc(fused[#loc130, #loc131, #loc132, #loc127])
#loc211 = loc(fused[#loc134, #loc133])
#loc212 = loc(fused[#loc136, #loc135])
#loc213 = loc(fused[#loc137, #loc138])
#loc214 = loc(fused[#loc139, #loc140])
#loc215 = loc(fused[#loc141, #loc142, #loc143, #loc138])
#loc216 = loc(fused[#loc144, #loc145])
#loc217 = loc(fused[#loc146, #loc147])
#loc218 = loc(fused[#loc150, #loc151])
#loc219 = loc(fused[#loc152, #loc153])
