!s32i = !cir.int<s, 32>
!s8i = !cir.int<s, 8>
!u32i = !cir.int<u, 32>
!void = !cir.void
#fn_attr = #cir<extra({nothrow = #cir.nothrow})>
#fn_attr1 = #cir<extra({inline = #cir.inline<no>, nothrow = #cir.nothrow, optnone = #cir.optnone})>
module @"/home/ladisgin/git_proj/juliet-c/testcases/CWE617_Reachable_Assertion/CWE617_Reachable_Assertion__fixed_17.c" attributes {cir.lang = #cir.lang<c>, cir.sob = #cir.signed_overflow_behavior<undefined>, cir.triple = "x86_64-unknown-linux-gnu", dlti.dl_spec = #dlti.dl_spec<i1 = dense<8> : vector<2xi64>, !llvm.ptr = dense<64> : vector<4xi64>, i8 = dense<8> : vector<2xi64>, i128 = dense<128> : vector<2xi64>, f80 = dense<128> : vector<2xi64>, !llvm.ptr<271> = dense<32> : vector<4xi64>, !llvm.ptr<270> = dense<32> : vector<4xi64>, f128 = dense<128> : vector<2xi64>, i64 = dense<64> : vector<2xi64>, !llvm.ptr<272> = dense<64> : vector<4xi64>, i32 = dense<32> : vector<2xi64>, i16 = dense<16> : vector<2xi64>, f64 = dense<64> : vector<2xi64>, f16 = dense<16> : vector<2xi64>, "dlti.stack_alignment" = 128 : i64, "dlti.endianness" = "little">} {
  cir.func private @__assert_fail(!cir.ptr<!s8i>, !cir.ptr<!s8i>, !u32i, !cir.ptr<!s8i>) extra(#fn_attr) loc(#loc53)
  cir.global "private" constant cir_private dsolocal @".str" = #cir.const_array<"data > ASSERT_VALUE\00" : !cir.array<!s8i x 20>> : !cir.array<!s8i x 20> {alignment = 1 : i64} loc(#loc3)
  cir.global "private" constant cir_private dsolocal @".str.1" = #cir.const_array<"CWE617_Reachable_Assertion__fixed_17.c\00" : !cir.array<!s8i x 39>> : !cir.array<!s8i x 39> {alignment = 1 : i64} loc(#loc3)
  cir.global "private" constant cir_private dsolocal @".str.2" = #cir.const_array<"void CWE617_Reachable_Assertion__fixed_17_bad()\00" : !cir.array<!s8i x 48>> : !cir.array<!s8i x 48> {alignment = 1 : i64} loc(#loc3)
  cir.func no_proto @CWE617_Reachable_Assertion__fixed_17_bad() extra(#fn_attr1) {
    %0 = cir.alloca !s32i, !cir.ptr<!s32i>, ["i"] {alignment = 4 : i64} loc(#loc55)
    %1 = cir.alloca !s32i, !cir.ptr<!s32i>, ["data"] {alignment = 4 : i64} loc(#loc56)
    %2 = cir.const #cir.int<1> : !s32i loc(#loc10)
    %3 = cir.unary(minus, %2) : !s32i, !s32i loc(#loc11)
    cir.store %3, %1 : !s32i, !cir.ptr<!s32i> loc(#loc57)
    cir.br ^bb1 loc(#loc58)
  ^bb1:  // pred: ^bb0
    %4 = cir.const #cir.int<0> : !s32i loc(#loc15)
    cir.store %4, %0 : !s32i, !cir.ptr<!s32i> loc(#loc59)
    cir.br ^bb2 loc(#loc58)
  ^bb2:  // 2 preds: ^bb1, ^bb6
    %5 = cir.load %0 : !cir.ptr<!s32i>, !s32i loc(#loc17)
    %6 = cir.const #cir.int<1> : !s32i loc(#loc18)
    %7 = cir.cmp(lt, %5, %6) : !s32i, !cir.bool loc(#loc60)
    cir.brcond %7 ^bb3, ^bb7 loc(#loc19)
  ^bb3:  // pred: ^bb2
    cir.br ^bb4 loc(#loc61)
  ^bb4:  // pred: ^bb3
    %8 = cir.const #cir.int<5> : !s32i loc(#loc21)
    %9 = cir.const #cir.int<1> : !s32i loc(#loc22)
    %10 = cir.binop(sub, %8, %9) nsw : !s32i loc(#loc21)
    cir.store %10, %1 : !s32i, !cir.ptr<!s32i> loc(#loc62)
    cir.br ^bb5 loc(#loc14)
  ^bb5:  // pred: ^bb4
    cir.br ^bb6 loc(#loc14)
  ^bb6:  // pred: ^bb5
    %11 = cir.load %0 : !cir.ptr<!s32i>, !s32i loc(#loc24)
    %12 = cir.unary(inc, %11) : !s32i, !s32i loc(#loc25)
    cir.store %12, %0 : !s32i, !cir.ptr<!s32i> loc(#loc63)
    cir.br ^bb2 loc(#loc58)
  ^bb7:  // pred: ^bb2
    cir.br ^bb8 loc(#loc14)
  ^bb8:  // pred: ^bb7
    cir.br ^bb9 loc(#loc3)
  ^bb9:  // pred: ^bb8
    cir.br ^bb10 loc(#loc3)
  ^bb10:  // pred: ^bb9
    %13 = cir.load %1 : !cir.ptr<!s32i>, !s32i loc(#loc3)
    %14 = cir.const #cir.int<5> : !s32i loc(#loc3)
    %15 = cir.cmp(gt, %13, %14) : !s32i, !cir.bool loc(#loc3)
    cir.brcond %15 ^bb11, ^bb12 loc(#loc3)
  ^bb11:  // pred: ^bb10
    cir.br ^bb13 loc(#loc3)
  ^bb12:  // pred: ^bb10
    %16 = cir.get_global @".str" : !cir.ptr<!cir.array<!s8i x 20>> loc(#loc3)
    %17 = cir.cast(array_to_ptrdecay, %16 : !cir.ptr<!cir.array<!s8i x 20>>), !cir.ptr<!s8i> loc(#loc3)
    %18 = cir.get_global @".str.1" : !cir.ptr<!cir.array<!s8i x 39>> loc(#loc3)
    %19 = cir.cast(array_to_ptrdecay, %18 : !cir.ptr<!cir.array<!s8i x 39>>), !cir.ptr<!s8i> loc(#loc3)
    %20 = cir.const #cir.int<37> : !s32i loc(#loc3)
    %21 = cir.cast(integral, %20 : !s32i), !u32i loc(#loc3)
    %22 = cir.get_global @".str.2" : !cir.ptr<!cir.array<!s8i x 48>> loc(#loc3)
    %23 = cir.cast(array_to_ptrdecay, %22 : !cir.ptr<!cir.array<!s8i x 48>>), !cir.ptr<!s8i> loc(#loc3)
    cir.call @__assert_fail(%17, %19, %21, %23) : (!cir.ptr<!s8i>, !cir.ptr<!s8i>, !u32i, !cir.ptr<!s8i>) -> () extra(#fn_attr) loc(#loc3)
    cir.br ^bb13 loc(#loc3)
  ^bb13:  // 2 preds: ^bb11, ^bb12
    cir.br ^bb14 loc(#loc3)
  ^bb14:  // pred: ^bb13
    cir.br ^bb15 loc(#loc3)
  ^bb15:  // pred: ^bb14
    cir.return loc(#loc5)
  } loc(#loc54)
  cir.func no_proto @CWE617_Reachable_Assertion__fixed_17_good() extra(#fn_attr1) {
    %0 = cir.get_global @goodG2B : !cir.ptr<!cir.func<!void ()>> loc(#loc65)
    cir.call %0() : (!cir.ptr<!cir.func<!void ()>>) -> () loc(#loc28)
    cir.return loc(#loc27)
  } loc(#loc64)
  cir.global "private" constant cir_private dsolocal @".str.3" = #cir.const_array<"void goodG2B()\00" : !cir.array<!s8i x 15>> : !cir.array<!s8i x 15> {alignment = 1 : i64} loc(#loc30)
  cir.func no_proto internal private @goodG2B() extra(#fn_attr1) {
    %0 = cir.alloca !s32i, !cir.ptr<!s32i>, ["h"] {alignment = 4 : i64} loc(#loc67)
    %1 = cir.alloca !s32i, !cir.ptr<!s32i>, ["data"] {alignment = 4 : i64} loc(#loc68)
    %2 = cir.const #cir.int<1> : !s32i loc(#loc37)
    %3 = cir.unary(minus, %2) : !s32i, !s32i loc(#loc38)
    cir.store %3, %1 : !s32i, !cir.ptr<!s32i> loc(#loc69)
    cir.br ^bb1 loc(#loc70)
  ^bb1:  // pred: ^bb0
    %4 = cir.const #cir.int<0> : !s32i loc(#loc42)
    cir.store %4, %0 : !s32i, !cir.ptr<!s32i> loc(#loc71)
    cir.br ^bb2 loc(#loc70)
  ^bb2:  // 2 preds: ^bb1, ^bb6
    %5 = cir.load %0 : !cir.ptr<!s32i>, !s32i loc(#loc44)
    %6 = cir.const #cir.int<1> : !s32i loc(#loc45)
    %7 = cir.cmp(lt, %5, %6) : !s32i, !cir.bool loc(#loc72)
    cir.brcond %7 ^bb3, ^bb7 loc(#loc46)
  ^bb3:  // pred: ^bb2
    cir.br ^bb4 loc(#loc73)
  ^bb4:  // pred: ^bb3
    %8 = cir.const #cir.int<5> : !s32i loc(#loc48)
    %9 = cir.const #cir.int<1> : !s32i loc(#loc49)
    %10 = cir.binop(add, %8, %9) nsw : !s32i loc(#loc48)
    cir.store %10, %1 : !s32i, !cir.ptr<!s32i> loc(#loc74)
    cir.br ^bb5 loc(#loc41)
  ^bb5:  // pred: ^bb4
    cir.br ^bb6 loc(#loc41)
  ^bb6:  // pred: ^bb5
    %11 = cir.load %0 : !cir.ptr<!s32i>, !s32i loc(#loc51)
    %12 = cir.unary(inc, %11) : !s32i, !s32i loc(#loc52)
    cir.store %12, %0 : !s32i, !cir.ptr<!s32i> loc(#loc75)
    cir.br ^bb2 loc(#loc70)
  ^bb7:  // pred: ^bb2
    cir.br ^bb8 loc(#loc41)
  ^bb8:  // pred: ^bb7
    cir.br ^bb9 loc(#loc30)
  ^bb9:  // pred: ^bb8
    cir.br ^bb10 loc(#loc30)
  ^bb10:  // pred: ^bb9
    %13 = cir.load %1 : !cir.ptr<!s32i>, !s32i loc(#loc30)
    %14 = cir.const #cir.int<5> : !s32i loc(#loc30)
    %15 = cir.cmp(gt, %13, %14) : !s32i, !cir.bool loc(#loc30)
    cir.brcond %15 ^bb11, ^bb12 loc(#loc30)
  ^bb11:  // pred: ^bb10
    cir.br ^bb13 loc(#loc30)
  ^bb12:  // pred: ^bb10
    %16 = cir.get_global @".str" : !cir.ptr<!cir.array<!s8i x 20>> loc(#loc30)
    %17 = cir.cast(array_to_ptrdecay, %16 : !cir.ptr<!cir.array<!s8i x 20>>), !cir.ptr<!s8i> loc(#loc30)
    %18 = cir.get_global @".str.1" : !cir.ptr<!cir.array<!s8i x 39>> loc(#loc30)
    %19 = cir.cast(array_to_ptrdecay, %18 : !cir.ptr<!cir.array<!s8i x 39>>), !cir.ptr<!s8i> loc(#loc30)
    %20 = cir.const #cir.int<57> : !s32i loc(#loc30)
    %21 = cir.cast(integral, %20 : !s32i), !u32i loc(#loc30)
    %22 = cir.get_global @".str.3" : !cir.ptr<!cir.array<!s8i x 15>> loc(#loc30)
    %23 = cir.cast(array_to_ptrdecay, %22 : !cir.ptr<!cir.array<!s8i x 15>>), !cir.ptr<!s8i> loc(#loc30)
    cir.call @__assert_fail(%17, %19, %21, %23) : (!cir.ptr<!s8i>, !cir.ptr<!s8i>, !u32i, !cir.ptr<!s8i>) -> () extra(#fn_attr) loc(#loc30)
    cir.br ^bb13 loc(#loc30)
  ^bb13:  // 2 preds: ^bb11, ^bb12
    cir.br ^bb14 loc(#loc30)
  ^bb14:  // pred: ^bb13
    cir.br ^bb15 loc(#loc30)
  ^bb15:  // pred: ^bb14
    cir.return loc(#loc32)
  } loc(#loc66)
} loc(#loc)
#loc = loc("/home/ladisgin/git_proj/juliet-c/testcases/CWE617_Reachable_Assertion/CWE617_Reachable_Assertion__fixed_17.c":0:0)
#loc1 = loc("/usr/include/assert.h":67:1)
#loc2 = loc("/usr/include/assert.h":69:43)
#loc3 = loc("CWE617_Reachable_Assertion__fixed_17.c":37:5)
#loc4 = loc("CWE617_Reachable_Assertion__fixed_17.c":25:1)
#loc5 = loc("CWE617_Reachable_Assertion__fixed_17.c":38:1)
#loc6 = loc("CWE617_Reachable_Assertion__fixed_17.c":27:5)
#loc7 = loc("CWE617_Reachable_Assertion__fixed_17.c":27:9)
#loc8 = loc("CWE617_Reachable_Assertion__fixed_17.c":28:5)
#loc9 = loc("CWE617_Reachable_Assertion__fixed_17.c":28:9)
#loc10 = loc("CWE617_Reachable_Assertion__fixed_17.c":30:13)
#loc11 = loc("CWE617_Reachable_Assertion__fixed_17.c":30:12)
#loc12 = loc("CWE617_Reachable_Assertion__fixed_17.c":30:5)
#loc13 = loc("CWE617_Reachable_Assertion__fixed_17.c":31:5)
#loc14 = loc("CWE617_Reachable_Assertion__fixed_17.c":35:5)
#loc15 = loc("CWE617_Reachable_Assertion__fixed_17.c":31:13)
#loc16 = loc("CWE617_Reachable_Assertion__fixed_17.c":31:9)
#loc17 = loc("CWE617_Reachable_Assertion__fixed_17.c":31:16)
#loc18 = loc("CWE617_Reachable_Assertion__fixed_17.c":31:20)
#loc19 = loc("CWE617_Reachable_Assertion__fixed_17.c":31:18)
#loc20 = loc("CWE617_Reachable_Assertion__fixed_17.c":32:5)
#loc21 = loc("CWE617_Reachable_Assertion__fixed_17.c":34:16)
#loc22 = loc("CWE617_Reachable_Assertion__fixed_17.c":34:29)
#loc23 = loc("CWE617_Reachable_Assertion__fixed_17.c":34:9)
#loc24 = loc("CWE617_Reachable_Assertion__fixed_17.c":31:24)
#loc25 = loc("CWE617_Reachable_Assertion__fixed_17.c":31:23)
#loc26 = loc("CWE617_Reachable_Assertion__fixed_17.c":60:1)
#loc27 = loc("CWE617_Reachable_Assertion__fixed_17.c":63:1)
#loc28 = loc("CWE617_Reachable_Assertion__fixed_17.c":62:5)
#loc29 = loc("CWE617_Reachable_Assertion__fixed_17.c":62:13)
#loc30 = loc("CWE617_Reachable_Assertion__fixed_17.c":57:5)
#loc31 = loc("CWE617_Reachable_Assertion__fixed_17.c":45:1)
#loc32 = loc("CWE617_Reachable_Assertion__fixed_17.c":58:1)
#loc33 = loc("CWE617_Reachable_Assertion__fixed_17.c":47:5)
#loc34 = loc("CWE617_Reachable_Assertion__fixed_17.c":47:9)
#loc35 = loc("CWE617_Reachable_Assertion__fixed_17.c":48:5)
#loc36 = loc("CWE617_Reachable_Assertion__fixed_17.c":48:9)
#loc37 = loc("CWE617_Reachable_Assertion__fixed_17.c":50:13)
#loc38 = loc("CWE617_Reachable_Assertion__fixed_17.c":50:12)
#loc39 = loc("CWE617_Reachable_Assertion__fixed_17.c":50:5)
#loc40 = loc("CWE617_Reachable_Assertion__fixed_17.c":51:5)
#loc41 = loc("CWE617_Reachable_Assertion__fixed_17.c":55:5)
#loc42 = loc("CWE617_Reachable_Assertion__fixed_17.c":51:13)
#loc43 = loc("CWE617_Reachable_Assertion__fixed_17.c":51:9)
#loc44 = loc("CWE617_Reachable_Assertion__fixed_17.c":51:16)
#loc45 = loc("CWE617_Reachable_Assertion__fixed_17.c":51:20)
#loc46 = loc("CWE617_Reachable_Assertion__fixed_17.c":51:18)
#loc47 = loc("CWE617_Reachable_Assertion__fixed_17.c":52:5)
#loc48 = loc("CWE617_Reachable_Assertion__fixed_17.c":54:16)
#loc49 = loc("CWE617_Reachable_Assertion__fixed_17.c":54:29)
#loc50 = loc("CWE617_Reachable_Assertion__fixed_17.c":54:9)
#loc51 = loc("CWE617_Reachable_Assertion__fixed_17.c":51:24)
#loc52 = loc("CWE617_Reachable_Assertion__fixed_17.c":51:23)
#loc53 = loc(fused[#loc1, #loc2])
#loc54 = loc(fused[#loc4, #loc5])
#loc55 = loc(fused[#loc6, #loc7])
#loc56 = loc(fused[#loc8, #loc9])
#loc57 = loc(fused[#loc12, #loc10])
#loc58 = loc(fused[#loc13, #loc14])
#loc59 = loc(fused[#loc16, #loc15])
#loc60 = loc(fused[#loc17, #loc18])
#loc61 = loc(fused[#loc20, #loc14])
#loc62 = loc(fused[#loc23, #loc22])
#loc63 = loc(fused[#loc25, #loc24])
#loc64 = loc(fused[#loc26, #loc27])
#loc65 = loc(fused[#loc28, #loc29])
#loc66 = loc(fused[#loc31, #loc32])
#loc67 = loc(fused[#loc33, #loc34])
#loc68 = loc(fused[#loc35, #loc36])
#loc69 = loc(fused[#loc39, #loc37])
#loc70 = loc(fused[#loc40, #loc41])
#loc71 = loc(fused[#loc43, #loc42])
#loc72 = loc(fused[#loc44, #loc45])
#loc73 = loc(fused[#loc47, #loc41])
#loc74 = loc(fused[#loc50, #loc49])
#loc75 = loc(fused[#loc52, #loc51])
