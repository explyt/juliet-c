!s16i = !cir.int<s, 16>
!s32i = !cir.int<s, 32>
!s8i = !cir.int<s, 8>
!u32i = !cir.int<u, 32>
#fn_attr = #cir<extra({nothrow = #cir.nothrow})>
#fn_attr1 = #cir<extra({inline = #cir.inline<no>, nothrow = #cir.nothrow, optnone = #cir.optnone, uwtable = #cir.uwtable<async>})>
#loc17 = loc("CWE191_Integer_Underflow__short_rand_multiply_31.c":27:19)
#loc75 = loc("CWE191_Integer_Underflow__short_rand_multiply_31.c":69:19)
module @"/workspaces/juliet-c/testcases/CWE191_Integer_Underflow/s03/CWE191_Integer_Underflow__short_rand_multiply_31.c" attributes {cir.lang = #cir.lang<c>, cir.sob = #cir.signed_overflow_behavior<undefined>, cir.triple = "x86_64-unknown-linux-gnu", cir.type_size_info = #cir.type_size_info<char = 8, int = 32, size_t = 64>, cir.uwtable = #cir.uwtable<async>, dlti.dl_spec = #dlti.dl_spec<i8 = dense<8> : vector<2xi64>, i16 = dense<16> : vector<2xi64>, !llvm.ptr = dense<64> : vector<4xi64>, i1 = dense<8> : vector<2xi64>, f16 = dense<16> : vector<2xi64>, f128 = dense<128> : vector<2xi64>, f64 = dense<64> : vector<2xi64>, i32 = dense<32> : vector<2xi64>, i64 = dense<64> : vector<2xi64>, !llvm.ptr<272> = dense<64> : vector<4xi64>, !llvm.ptr<271> = dense<32> : vector<4xi64>, !llvm.ptr<270> = dense<32> : vector<4xi64>, f80 = dense<128> : vector<2xi64>, i128 = dense<128> : vector<2xi64>, "dlti.endianness" = "little", "dlti.stack_alignment" = 128 : i64, "dlti.mangling_mode" = "e">} {
  cir.func private @rand() -> !s32i extra(#fn_attr) loc(#loc97)
  cir.func private @printIntLine(!s32i) loc(#loc98)
  cir.func no_proto @CWE191_Integer_Underflow__short_rand_multiply_31_bad() extra(#fn_attr1) {
    %0 = cir.alloca !s16i, !cir.ptr<!s16i>, ["dataCopy", init] {alignment = 2 : i64} loc(#loc100)
    %1 = cir.alloca !s16i, !cir.ptr<!s16i>, ["data", init] {alignment = 2 : i64} loc(#loc101)
    %2 = cir.alloca !s16i, !cir.ptr<!s16i>, ["result", init] {alignment = 2 : i64} loc(#loc102)
    %3 = cir.alloca !s16i, !cir.ptr<!s16i>, ["data"] {alignment = 2 : i64} loc(#loc103)
    %4 = cir.const #cir.int<0> : !s32i loc(#loc15)
    %5 = cir.cast(integral, %4 : !s32i), !s16i loc(#loc15)
    cir.store %5, %3 : !s16i, !cir.ptr<!s16i> loc(#loc104)
    %6 = cir.call @rand() : () -> !s32i extra(#fn_attr) loc(#loc17)
    %7 = cir.const #cir.int<1> : !s32i loc(#loc17)
    %8 = cir.binop(and, %6, %7) : !s32i loc(#loc17)
    %9 = cir.cast(int_to_bool, %8 : !s32i), !cir.bool loc(#loc17)
    cir.brcond %9 ^bb1, ^bb2 loc(#loc17)
  ^bb1:  // pred: ^bb0
    %10 = cir.call @rand() : () -> !s32i extra(#fn_attr) loc(#loc17)
    %11 = cir.cast(integral, %10 : !s32i), !u32i loc(#loc17)
    %12 = cir.const #cir.int<30> : !s32i loc(#loc17)
    %13 = cir.shift(left, %11 : !u32i, %12 : !s32i) -> !u32i loc(#loc17)
    %14 = cir.call @rand() : () -> !s32i extra(#fn_attr) loc(#loc17)
    %15 = cir.cast(integral, %14 : !s32i), !u32i loc(#loc17)
    %16 = cir.const #cir.int<15> : !s32i loc(#loc17)
    %17 = cir.shift(left, %15 : !u32i, %16 : !s32i) -> !u32i loc(#loc17)
    %18 = cir.binop(xor, %13, %17) : !u32i loc(#loc17)
    %19 = cir.call @rand() : () -> !s32i extra(#fn_attr) loc(#loc17)
    %20 = cir.cast(integral, %19 : !s32i), !u32i loc(#loc17)
    %21 = cir.binop(xor, %18, %20) : !u32i loc(#loc17)
    cir.br ^bb3(%21 : !u32i) loc(#loc17)
  ^bb2:  // pred: ^bb0
    %22 = cir.call @rand() : () -> !s32i extra(#fn_attr) loc(#loc17)
    %23 = cir.cast(integral, %22 : !s32i), !u32i loc(#loc17)
    %24 = cir.const #cir.int<30> : !s32i loc(#loc17)
    %25 = cir.shift(left, %23 : !u32i, %24 : !s32i) -> !u32i loc(#loc17)
    %26 = cir.call @rand() : () -> !s32i extra(#fn_attr) loc(#loc17)
    %27 = cir.cast(integral, %26 : !s32i), !u32i loc(#loc17)
    %28 = cir.const #cir.int<15> : !s32i loc(#loc17)
    %29 = cir.shift(left, %27 : !u32i, %28 : !s32i) -> !u32i loc(#loc17)
    %30 = cir.binop(xor, %25, %29) : !u32i loc(#loc17)
    %31 = cir.call @rand() : () -> !s32i extra(#fn_attr) loc(#loc17)
    %32 = cir.cast(integral, %31 : !s32i), !u32i loc(#loc17)
    %33 = cir.binop(xor, %30, %32) : !u32i loc(#loc17)
    %34 = cir.unary(minus, %33) : !u32i, !u32i loc(#loc17)
    %35 = cir.const #cir.int<1> : !s32i loc(#loc17)
    %36 = cir.cast(integral, %35 : !s32i), !u32i loc(#loc17)
    %37 = cir.binop(sub, %34, %36) : !u32i loc(#loc17)
    cir.br ^bb3(%37 : !u32i) loc(#loc17)
  ^bb3(%38: !u32i loc("CWE191_Integer_Underflow__short_rand_multiply_31.c":27:19)):  // 2 preds: ^bb1, ^bb2
    cir.br ^bb4 loc(#loc17)
  ^bb4:  // pred: ^bb3
    %39 = cir.cast(integral, %38 : !u32i), !s32i loc(#loc17)
    %40 = cir.cast(integral, %39 : !s32i), !s16i loc(#loc17)
    cir.store %40, %3 : !s16i, !cir.ptr<!s16i> loc(#loc105)
    cir.br ^bb5 loc(#loc106)
  ^bb5:  // pred: ^bb4
    %41 = cir.load %3 : !cir.ptr<!s16i>, !s16i loc(#loc8)
    cir.store %41, %0 : !s16i, !cir.ptr<!s16i> loc(#loc100)
    %42 = cir.load %0 : !cir.ptr<!s16i>, !s16i loc(#loc10)
    cir.store %42, %1 : !s16i, !cir.ptr<!s16i> loc(#loc101)
    cir.br ^bb6 loc(#loc107)
  ^bb6:  // pred: ^bb5
    %43 = cir.load %1 : !cir.ptr<!s16i>, !s16i loc(#loc23)
    %44 = cir.cast(integral, %43 : !s16i), !s32i loc(#loc23)
    %45 = cir.const #cir.int<0> : !s32i loc(#loc24)
    %46 = cir.cmp(lt, %44, %45) : !s32i, !cir.bool loc(#loc108)
    cir.brcond %46 ^bb7, ^bb8 loc(#loc109)
  ^bb7:  // pred: ^bb6
    %47 = cir.load %1 : !cir.ptr<!s16i>, !s16i loc(#loc26)
    %48 = cir.cast(integral, %47 : !s16i), !s32i loc(#loc26)
    %49 = cir.const #cir.int<2> : !s32i loc(#loc12)
    %50 = cir.binop(mul, %48, %49) nsw : !s32i loc(#loc26)
    %51 = cir.cast(integral, %50 : !s32i), !s16i loc(#loc26)
    cir.store %51, %2 : !s16i, !cir.ptr<!s16i> loc(#loc102)
    %52 = cir.load %2 : !cir.ptr<!s16i>, !s16i loc(#loc27)
    %53 = cir.cast(integral, %52 : !s16i), !s32i loc(#loc27)
    cir.call @printIntLine(%53) : (!s32i) -> () loc(#loc28)
    cir.br ^bb8 loc(#loc22)
  ^bb8:  // 2 preds: ^bb6, ^bb7
    cir.br ^bb9 loc(#loc22)
  ^bb9:  // pred: ^bb8
    cir.br ^bb10 loc(#loc20)
  ^bb10:  // pred: ^bb9
    cir.return loc(#loc6)
  } loc(#loc99)
  cir.func no_proto @CWE191_Integer_Underflow__short_rand_multiply_31_good() extra(#fn_attr1) {
    %0 = cir.get_global @goodG2B : !cir.ptr<!cir.func<()>> loc(#loc111)
    cir.call %0() : (!cir.ptr<!cir.func<()>>) -> () loc(#loc31)
    %1 = cir.get_global @goodB2G : !cir.ptr<!cir.func<()>> loc(#loc112)
    cir.call %1() : (!cir.ptr<!cir.func<()>>) -> () loc(#loc33)
    cir.return loc(#loc30)
  } loc(#loc110)
  cir.func no_proto internal private @goodG2B() extra(#fn_attr1) {
    %0 = cir.alloca !s16i, !cir.ptr<!s16i>, ["dataCopy", init] {alignment = 2 : i64} loc(#loc114)
    %1 = cir.alloca !s16i, !cir.ptr<!s16i>, ["data", init] {alignment = 2 : i64} loc(#loc115)
    %2 = cir.alloca !s16i, !cir.ptr<!s16i>, ["result", init] {alignment = 2 : i64} loc(#loc116)
    %3 = cir.alloca !s16i, !cir.ptr<!s16i>, ["data"] {alignment = 2 : i64} loc(#loc117)
    %4 = cir.const #cir.int<0> : !s32i loc(#loc45)
    %5 = cir.cast(integral, %4 : !s32i), !s16i loc(#loc45)
    cir.store %5, %3 : !s16i, !cir.ptr<!s16i> loc(#loc118)
    %6 = cir.const #cir.int<2> : !s32i loc(#loc47)
    %7 = cir.unary(minus, %6) nsw : !s32i, !s32i loc(#loc48)
    %8 = cir.cast(integral, %7 : !s32i), !s16i loc(#loc48)
    cir.store %8, %3 : !s16i, !cir.ptr<!s16i> loc(#loc119)
    cir.br ^bb1 loc(#loc120)
  ^bb1:  // pred: ^bb0
    %9 = cir.load %3 : !cir.ptr<!s16i>, !s16i loc(#loc38)
    cir.store %9, %0 : !s16i, !cir.ptr<!s16i> loc(#loc114)
    %10 = cir.load %0 : !cir.ptr<!s16i>, !s16i loc(#loc40)
    cir.store %10, %1 : !s16i, !cir.ptr<!s16i> loc(#loc115)
    cir.br ^bb2 loc(#loc121)
  ^bb2:  // pred: ^bb1
    %11 = cir.load %1 : !cir.ptr<!s16i>, !s16i loc(#loc54)
    %12 = cir.cast(integral, %11 : !s16i), !s32i loc(#loc54)
    %13 = cir.const #cir.int<0> : !s32i loc(#loc55)
    %14 = cir.cmp(lt, %12, %13) : !s32i, !cir.bool loc(#loc122)
    cir.brcond %14 ^bb3, ^bb4 loc(#loc123)
  ^bb3:  // pred: ^bb2
    %15 = cir.load %1 : !cir.ptr<!s16i>, !s16i loc(#loc57)
    %16 = cir.cast(integral, %15 : !s16i), !s32i loc(#loc57)
    %17 = cir.const #cir.int<2> : !s32i loc(#loc42)
    %18 = cir.binop(mul, %16, %17) nsw : !s32i loc(#loc57)
    %19 = cir.cast(integral, %18 : !s32i), !s16i loc(#loc57)
    cir.store %19, %2 : !s16i, !cir.ptr<!s16i> loc(#loc116)
    %20 = cir.load %2 : !cir.ptr<!s16i>, !s16i loc(#loc58)
    %21 = cir.cast(integral, %20 : !s16i), !s32i loc(#loc58)
    cir.call @printIntLine(%21) : (!s32i) -> () loc(#loc59)
    cir.br ^bb4 loc(#loc53)
  ^bb4:  // 2 preds: ^bb2, ^bb3
    cir.br ^bb5 loc(#loc53)
  ^bb5:  // pred: ^bb4
    cir.br ^bb6 loc(#loc51)
  ^bb6:  // pred: ^bb5
    cir.return loc(#loc36)
  } loc(#loc113)
  cir.func private @printLine(!cir.ptr<!s8i>) loc(#loc124)
  cir.global "private" constant cir_private dsolocal @".str" = #cir.const_array<"data value is too small to perform multiplication.\00" : !cir.array<!s8i x 51>> : !cir.array<!s8i x 51> {alignment = 1 : i64} loc(#loc62)
  cir.func no_proto internal private @goodB2G() extra(#fn_attr1) {
    %0 = cir.alloca !s16i, !cir.ptr<!s16i>, ["dataCopy", init] {alignment = 2 : i64} loc(#loc126)
    %1 = cir.alloca !s16i, !cir.ptr<!s16i>, ["data", init] {alignment = 2 : i64} loc(#loc127)
    %2 = cir.alloca !s16i, !cir.ptr<!s16i>, ["result", init] {alignment = 2 : i64} loc(#loc128)
    %3 = cir.alloca !s16i, !cir.ptr<!s16i>, ["data"] {alignment = 2 : i64} loc(#loc129)
    %4 = cir.const #cir.int<0> : !s32i loc(#loc73)
    %5 = cir.cast(integral, %4 : !s32i), !s16i loc(#loc73)
    cir.store %5, %3 : !s16i, !cir.ptr<!s16i> loc(#loc130)
    %6 = cir.call @rand() : () -> !s32i extra(#fn_attr) loc(#loc75)
    %7 = cir.const #cir.int<1> : !s32i loc(#loc75)
    %8 = cir.binop(and, %6, %7) : !s32i loc(#loc75)
    %9 = cir.cast(int_to_bool, %8 : !s32i), !cir.bool loc(#loc75)
    cir.brcond %9 ^bb1, ^bb2 loc(#loc75)
  ^bb1:  // pred: ^bb0
    %10 = cir.call @rand() : () -> !s32i extra(#fn_attr) loc(#loc75)
    %11 = cir.cast(integral, %10 : !s32i), !u32i loc(#loc75)
    %12 = cir.const #cir.int<30> : !s32i loc(#loc75)
    %13 = cir.shift(left, %11 : !u32i, %12 : !s32i) -> !u32i loc(#loc75)
    %14 = cir.call @rand() : () -> !s32i extra(#fn_attr) loc(#loc75)
    %15 = cir.cast(integral, %14 : !s32i), !u32i loc(#loc75)
    %16 = cir.const #cir.int<15> : !s32i loc(#loc75)
    %17 = cir.shift(left, %15 : !u32i, %16 : !s32i) -> !u32i loc(#loc75)
    %18 = cir.binop(xor, %13, %17) : !u32i loc(#loc75)
    %19 = cir.call @rand() : () -> !s32i extra(#fn_attr) loc(#loc75)
    %20 = cir.cast(integral, %19 : !s32i), !u32i loc(#loc75)
    %21 = cir.binop(xor, %18, %20) : !u32i loc(#loc75)
    cir.br ^bb3(%21 : !u32i) loc(#loc75)
  ^bb2:  // pred: ^bb0
    %22 = cir.call @rand() : () -> !s32i extra(#fn_attr) loc(#loc75)
    %23 = cir.cast(integral, %22 : !s32i), !u32i loc(#loc75)
    %24 = cir.const #cir.int<30> : !s32i loc(#loc75)
    %25 = cir.shift(left, %23 : !u32i, %24 : !s32i) -> !u32i loc(#loc75)
    %26 = cir.call @rand() : () -> !s32i extra(#fn_attr) loc(#loc75)
    %27 = cir.cast(integral, %26 : !s32i), !u32i loc(#loc75)
    %28 = cir.const #cir.int<15> : !s32i loc(#loc75)
    %29 = cir.shift(left, %27 : !u32i, %28 : !s32i) -> !u32i loc(#loc75)
    %30 = cir.binop(xor, %25, %29) : !u32i loc(#loc75)
    %31 = cir.call @rand() : () -> !s32i extra(#fn_attr) loc(#loc75)
    %32 = cir.cast(integral, %31 : !s32i), !u32i loc(#loc75)
    %33 = cir.binop(xor, %30, %32) : !u32i loc(#loc75)
    %34 = cir.unary(minus, %33) : !u32i, !u32i loc(#loc75)
    %35 = cir.const #cir.int<1> : !s32i loc(#loc75)
    %36 = cir.cast(integral, %35 : !s32i), !u32i loc(#loc75)
    %37 = cir.binop(sub, %34, %36) : !u32i loc(#loc75)
    cir.br ^bb3(%37 : !u32i) loc(#loc75)
  ^bb3(%38: !u32i loc("CWE191_Integer_Underflow__short_rand_multiply_31.c":69:19)):  // 2 preds: ^bb1, ^bb2
    cir.br ^bb4 loc(#loc75)
  ^bb4:  // pred: ^bb3
    %39 = cir.cast(integral, %38 : !u32i), !s32i loc(#loc75)
    %40 = cir.cast(integral, %39 : !s32i), !s16i loc(#loc75)
    cir.store %40, %3 : !s16i, !cir.ptr<!s16i> loc(#loc131)
    cir.br ^bb5 loc(#loc132)
  ^bb5:  // pred: ^bb4
    %41 = cir.load %3 : !cir.ptr<!s16i>, !s16i loc(#loc66)
    cir.store %41, %0 : !s16i, !cir.ptr<!s16i> loc(#loc126)
    %42 = cir.load %0 : !cir.ptr<!s16i>, !s16i loc(#loc68)
    cir.store %42, %1 : !s16i, !cir.ptr<!s16i> loc(#loc127)
    cir.br ^bb6 loc(#loc133)
  ^bb6:  // pred: ^bb5
    %43 = cir.load %1 : !cir.ptr<!s16i>, !s16i loc(#loc81)
    %44 = cir.cast(integral, %43 : !s16i), !s32i loc(#loc81)
    %45 = cir.const #cir.int<0> : !s32i loc(#loc82)
    %46 = cir.cmp(lt, %44, %45) : !s32i, !cir.bool loc(#loc134)
    cir.brcond %46 ^bb7, ^bb13 loc(#loc135)
  ^bb7:  // pred: ^bb6
    cir.br ^bb8 loc(#loc136)
  ^bb8:  // pred: ^bb7
    %47 = cir.load %1 : !cir.ptr<!s16i>, !s16i loc(#loc86)
    %48 = cir.cast(integral, %47 : !s16i), !s32i loc(#loc86)
    %49 = cir.const #cir.int<32767> : !s32i loc(#loc87)
    %50 = cir.unary(minus, %49) nsw : !s32i, !s32i loc(#loc87)
    %51 = cir.const #cir.int<1> : !s32i loc(#loc87)
    %52 = cir.binop(sub, %50, %51) nsw : !s32i loc(#loc87)
    %53 = cir.const #cir.int<2> : !s32i loc(#loc88)
    %54 = cir.binop(div, %52, %53) : !s32i loc(#loc137)
    %55 = cir.cmp(gt, %48, %54) : !s32i, !cir.bool loc(#loc138)
    cir.brcond %55 ^bb9, ^bb10 loc(#loc139)
  ^bb9:  // pred: ^bb8
    %56 = cir.load %1 : !cir.ptr<!s16i>, !s16i loc(#loc93)
    %57 = cir.cast(integral, %56 : !s16i), !s32i loc(#loc93)
    %58 = cir.const #cir.int<2> : !s32i loc(#loc70)
    %59 = cir.binop(mul, %57, %58) nsw : !s32i loc(#loc93)
    %60 = cir.cast(integral, %59 : !s32i), !s16i loc(#loc93)
    cir.store %60, %2 : !s16i, !cir.ptr<!s16i> loc(#loc128)
    %61 = cir.load %2 : !cir.ptr<!s16i>, !s16i loc(#loc94)
    %62 = cir.cast(integral, %61 : !s16i), !s32i loc(#loc94)
    cir.call @printIntLine(%62) : (!s32i) -> () loc(#loc95)
    cir.br ^bb11 loc(#loc91)
  ^bb10:  // pred: ^bb8
    %63 = cir.get_global @".str" : !cir.ptr<!cir.array<!s8i x 51>> loc(#loc62)
    %64 = cir.cast(array_to_ptrdecay, %63 : !cir.ptr<!cir.array<!s8i x 51>>), !cir.ptr<!s8i> loc(#loc62)
    cir.call @printLine(%64) : (!cir.ptr<!s8i>) -> () loc(#loc96)
    cir.br ^bb11 loc(#loc85)
  ^bb11:  // 2 preds: ^bb9, ^bb10
    cir.br ^bb12 loc(#loc85)
  ^bb12:  // pred: ^bb11
    cir.br ^bb13 loc(#loc80)
  ^bb13:  // 2 preds: ^bb6, ^bb12
    cir.br ^bb14 loc(#loc80)
  ^bb14:  // pred: ^bb13
    cir.br ^bb15 loc(#loc78)
  ^bb15:  // pred: ^bb14
    cir.return loc(#loc64)
  } loc(#loc125)
} loc(#loc)
#loc = loc("/workspaces/juliet-c/testcases/CWE191_Integer_Underflow/s03/CWE191_Integer_Underflow__short_rand_multiply_31.c":0:0)
#loc1 = loc("/usr/include/stdlib.h":573:1)
#loc2 = loc("/usr/include/stdlib.h":573:24)
#loc3 = loc("../../../testcasesupport/std_testcase_io.h":18:1)
#loc4 = loc("../../../testcasesupport/std_testcase_io.h":18:33)
#loc5 = loc("CWE191_Integer_Underflow__short_rand_multiply_31.c":22:1)
#loc6 = loc("CWE191_Integer_Underflow__short_rand_multiply_31.c":38:1)
#loc7 = loc("CWE191_Integer_Underflow__short_rand_multiply_31.c":29:9)
#loc8 = loc("CWE191_Integer_Underflow__short_rand_multiply_31.c":29:26)
#loc9 = loc("CWE191_Integer_Underflow__short_rand_multiply_31.c":30:9)
#loc10 = loc("CWE191_Integer_Underflow__short_rand_multiply_31.c":30:22)
#loc11 = loc("CWE191_Integer_Underflow__short_rand_multiply_31.c":34:13)
#loc12 = loc("CWE191_Integer_Underflow__short_rand_multiply_31.c":34:35)
#loc13 = loc("CWE191_Integer_Underflow__short_rand_multiply_31.c":24:5)
#loc14 = loc("CWE191_Integer_Underflow__short_rand_multiply_31.c":24:11)
#loc15 = loc("CWE191_Integer_Underflow__short_rand_multiply_31.c":25:12)
#loc16 = loc("CWE191_Integer_Underflow__short_rand_multiply_31.c":25:5)
#loc18 = loc("CWE191_Integer_Underflow__short_rand_multiply_31.c":27:5)
#loc19 = loc("CWE191_Integer_Underflow__short_rand_multiply_31.c":28:5)
#loc20 = loc("CWE191_Integer_Underflow__short_rand_multiply_31.c":37:5)
#loc21 = loc("CWE191_Integer_Underflow__short_rand_multiply_31.c":31:9)
#loc22 = loc("CWE191_Integer_Underflow__short_rand_multiply_31.c":36:9)
#loc23 = loc("CWE191_Integer_Underflow__short_rand_multiply_31.c":31:12)
#loc24 = loc("CWE191_Integer_Underflow__short_rand_multiply_31.c":31:19)
#loc25 = loc("CWE191_Integer_Underflow__short_rand_multiply_31.c":32:9)
#loc26 = loc("CWE191_Integer_Underflow__short_rand_multiply_31.c":34:28)
#loc27 = loc("CWE191_Integer_Underflow__short_rand_multiply_31.c":35:26)
#loc28 = loc("CWE191_Integer_Underflow__short_rand_multiply_31.c":35:13)
#loc29 = loc("CWE191_Integer_Underflow__short_rand_multiply_31.c":89:1)
#loc30 = loc("CWE191_Integer_Underflow__short_rand_multiply_31.c":93:1)
#loc31 = loc("CWE191_Integer_Underflow__short_rand_multiply_31.c":91:5)
#loc32 = loc("CWE191_Integer_Underflow__short_rand_multiply_31.c":91:13)
#loc33 = loc("CWE191_Integer_Underflow__short_rand_multiply_31.c":92:5)
#loc34 = loc("CWE191_Integer_Underflow__short_rand_multiply_31.c":92:13)
#loc35 = loc("CWE191_Integer_Underflow__short_rand_multiply_31.c":45:1)
#loc36 = loc("CWE191_Integer_Underflow__short_rand_multiply_31.c":61:1)
#loc37 = loc("CWE191_Integer_Underflow__short_rand_multiply_31.c":52:9)
#loc38 = loc("CWE191_Integer_Underflow__short_rand_multiply_31.c":52:26)
#loc39 = loc("CWE191_Integer_Underflow__short_rand_multiply_31.c":53:9)
#loc40 = loc("CWE191_Integer_Underflow__short_rand_multiply_31.c":53:22)
#loc41 = loc("CWE191_Integer_Underflow__short_rand_multiply_31.c":57:13)
#loc42 = loc("CWE191_Integer_Underflow__short_rand_multiply_31.c":57:35)
#loc43 = loc("CWE191_Integer_Underflow__short_rand_multiply_31.c":47:5)
#loc44 = loc("CWE191_Integer_Underflow__short_rand_multiply_31.c":47:11)
#loc45 = loc("CWE191_Integer_Underflow__short_rand_multiply_31.c":48:12)
#loc46 = loc("CWE191_Integer_Underflow__short_rand_multiply_31.c":48:5)
#loc47 = loc("CWE191_Integer_Underflow__short_rand_multiply_31.c":50:13)
#loc48 = loc("CWE191_Integer_Underflow__short_rand_multiply_31.c":50:12)
#loc49 = loc("CWE191_Integer_Underflow__short_rand_multiply_31.c":50:5)
#loc50 = loc("CWE191_Integer_Underflow__short_rand_multiply_31.c":51:5)
#loc51 = loc("CWE191_Integer_Underflow__short_rand_multiply_31.c":60:5)
#loc52 = loc("CWE191_Integer_Underflow__short_rand_multiply_31.c":54:9)
#loc53 = loc("CWE191_Integer_Underflow__short_rand_multiply_31.c":59:9)
#loc54 = loc("CWE191_Integer_Underflow__short_rand_multiply_31.c":54:12)
#loc55 = loc("CWE191_Integer_Underflow__short_rand_multiply_31.c":54:19)
#loc56 = loc("CWE191_Integer_Underflow__short_rand_multiply_31.c":55:9)
#loc57 = loc("CWE191_Integer_Underflow__short_rand_multiply_31.c":57:28)
#loc58 = loc("CWE191_Integer_Underflow__short_rand_multiply_31.c":58:26)
#loc59 = loc("CWE191_Integer_Underflow__short_rand_multiply_31.c":58:13)
#loc60 = loc("../../../testcasesupport/std_testcase_io.h":14:1)
#loc61 = loc("../../../testcasesupport/std_testcase_io.h":14:33)
#loc62 = loc("CWE191_Integer_Underflow__short_rand_multiply_31.c":83:27)
#loc63 = loc("CWE191_Integer_Underflow__short_rand_multiply_31.c":64:1)
#loc64 = loc("CWE191_Integer_Underflow__short_rand_multiply_31.c":87:1)
#loc65 = loc("CWE191_Integer_Underflow__short_rand_multiply_31.c":71:9)
#loc66 = loc("CWE191_Integer_Underflow__short_rand_multiply_31.c":71:26)
#loc67 = loc("CWE191_Integer_Underflow__short_rand_multiply_31.c":72:9)
#loc68 = loc("CWE191_Integer_Underflow__short_rand_multiply_31.c":72:22)
#loc69 = loc("CWE191_Integer_Underflow__short_rand_multiply_31.c":78:17)
#loc70 = loc("CWE191_Integer_Underflow__short_rand_multiply_31.c":78:39)
#loc71 = loc("CWE191_Integer_Underflow__short_rand_multiply_31.c":66:5)
#loc72 = loc("CWE191_Integer_Underflow__short_rand_multiply_31.c":66:11)
#loc73 = loc("CWE191_Integer_Underflow__short_rand_multiply_31.c":67:12)
#loc74 = loc("CWE191_Integer_Underflow__short_rand_multiply_31.c":67:5)
#loc76 = loc("CWE191_Integer_Underflow__short_rand_multiply_31.c":69:5)
#loc77 = loc("CWE191_Integer_Underflow__short_rand_multiply_31.c":70:5)
#loc78 = loc("CWE191_Integer_Underflow__short_rand_multiply_31.c":86:5)
#loc79 = loc("CWE191_Integer_Underflow__short_rand_multiply_31.c":73:9)
#loc80 = loc("CWE191_Integer_Underflow__short_rand_multiply_31.c":85:9)
#loc81 = loc("CWE191_Integer_Underflow__short_rand_multiply_31.c":73:12)
#loc82 = loc("CWE191_Integer_Underflow__short_rand_multiply_31.c":73:19)
#loc83 = loc("CWE191_Integer_Underflow__short_rand_multiply_31.c":74:9)
#loc84 = loc("CWE191_Integer_Underflow__short_rand_multiply_31.c":76:13)
#loc85 = loc("CWE191_Integer_Underflow__short_rand_multiply_31.c":84:13)
#loc86 = loc("CWE191_Integer_Underflow__short_rand_multiply_31.c":76:17)
#loc87 = loc("CWE191_Integer_Underflow__short_rand_multiply_31.c":76:25)
#loc88 = loc("CWE191_Integer_Underflow__short_rand_multiply_31.c":76:34)
#loc89 = loc("CWE191_Integer_Underflow__short_rand_multiply_31.c":76:35)
#loc90 = loc("CWE191_Integer_Underflow__short_rand_multiply_31.c":77:13)
#loc91 = loc("CWE191_Integer_Underflow__short_rand_multiply_31.c":80:13)
#loc92 = loc("CWE191_Integer_Underflow__short_rand_multiply_31.c":82:13)
#loc93 = loc("CWE191_Integer_Underflow__short_rand_multiply_31.c":78:32)
#loc94 = loc("CWE191_Integer_Underflow__short_rand_multiply_31.c":79:30)
#loc95 = loc("CWE191_Integer_Underflow__short_rand_multiply_31.c":79:17)
#loc96 = loc("CWE191_Integer_Underflow__short_rand_multiply_31.c":83:17)
#loc97 = loc(fused[#loc1, #loc2])
#loc98 = loc(fused[#loc3, #loc4])
#loc99 = loc(fused[#loc5, #loc6])
#loc100 = loc(fused[#loc7, #loc8])
#loc101 = loc(fused[#loc9, #loc10])
#loc102 = loc(fused[#loc11, #loc12])
#loc103 = loc(fused[#loc13, #loc14])
#loc104 = loc(fused[#loc16, #loc15])
#loc105 = loc(fused[#loc18, #loc17])
#loc106 = loc(fused[#loc19, #loc20])
#loc107 = loc(fused[#loc21, #loc22])
#loc108 = loc(fused[#loc23, #loc24])
#loc109 = loc(fused[#loc25, #loc22])
#loc110 = loc(fused[#loc29, #loc30])
#loc111 = loc(fused[#loc31, #loc32])
#loc112 = loc(fused[#loc33, #loc34])
#loc113 = loc(fused[#loc35, #loc36])
#loc114 = loc(fused[#loc37, #loc38])
#loc115 = loc(fused[#loc39, #loc40])
#loc116 = loc(fused[#loc41, #loc42])
#loc117 = loc(fused[#loc43, #loc44])
#loc118 = loc(fused[#loc46, #loc45])
#loc119 = loc(fused[#loc49, #loc47])
#loc120 = loc(fused[#loc50, #loc51])
#loc121 = loc(fused[#loc52, #loc53])
#loc122 = loc(fused[#loc54, #loc55])
#loc123 = loc(fused[#loc56, #loc53])
#loc124 = loc(fused[#loc60, #loc61])
#loc125 = loc(fused[#loc63, #loc64])
#loc126 = loc(fused[#loc65, #loc66])
#loc127 = loc(fused[#loc67, #loc68])
#loc128 = loc(fused[#loc69, #loc70])
#loc129 = loc(fused[#loc71, #loc72])
#loc130 = loc(fused[#loc74, #loc73])
#loc131 = loc(fused[#loc76, #loc75])
#loc132 = loc(fused[#loc77, #loc78])
#loc133 = loc(fused[#loc79, #loc80])
#loc134 = loc(fused[#loc81, #loc82])
#loc135 = loc(fused[#loc83, #loc80])
#loc136 = loc(fused[#loc84, #loc85])
#loc137 = loc(fused[#loc87, #loc88])
#loc138 = loc(fused[#loc86, #loc89])
#loc139 = loc(fused[#loc90, #loc91, #loc92, #loc85])
