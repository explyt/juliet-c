!s32i = !cir.int<s, 32>
!s64i = !cir.int<s, 64>
!s8i = !cir.int<s, 8>
!ty__IO_codecvt = !cir.struct<struct "_IO_codecvt" incomplete>
!ty__IO_marker = !cir.struct<struct "_IO_marker" incomplete>
!ty__IO_wide_data = !cir.struct<struct "_IO_wide_data" incomplete>
!u16i = !cir.int<u, 16>
!void = !cir.void
#fn_attr = #cir<extra({inline = #cir.inline<no>, nothrow = #cir.nothrow, optnone = #cir.optnone})>
#fn_attr1 = #cir<extra({nothrow = #cir.nothrow})>
#loc11 = loc("CWE190_Integer_Overflow__int64_t_fscanf_square_41.c":25:21)
#loc12 = loc("CWE190_Integer_Overflow__int64_t_fscanf_square_41.c":25:29)
#loc45 = loc("CWE190_Integer_Overflow__int64_t_fscanf_square_41.c":67:25)
#loc46 = loc("CWE190_Integer_Overflow__int64_t_fscanf_square_41.c":67:33)
#loc78 = loc("CWE190_Integer_Overflow__int64_t_fscanf_square_41.c":48:25)
#loc79 = loc("CWE190_Integer_Overflow__int64_t_fscanf_square_41.c":48:33)
#loc103 = loc(fused[#loc11, #loc12])
#loc115 = loc(fused[#loc45, #loc46])
#loc125 = loc(fused[#loc78, #loc79])
!ty__IO_FILE = !cir.struct<struct "_IO_FILE" {!s32i, !cir.ptr<!s8i>, !cir.ptr<!s8i>, !cir.ptr<!s8i>, !cir.ptr<!s8i>, !cir.ptr<!s8i>, !cir.ptr<!s8i>, !cir.ptr<!s8i>, !cir.ptr<!s8i>, !cir.ptr<!s8i>, !cir.ptr<!s8i>, !cir.ptr<!s8i>, !cir.ptr<!ty__IO_marker>, !cir.ptr<!cir.struct<struct "_IO_FILE">>, !s32i, !s32i, !s64i, !u16i, !s8i, !cir.array<!s8i x 1>, !cir.ptr<!void>, !s64i, !cir.ptr<!ty__IO_codecvt>, !cir.ptr<!ty__IO_wide_data>, !cir.ptr<!cir.struct<struct "_IO_FILE">>, !cir.ptr<!void>, !cir.ptr<!cir.ptr<!cir.struct<struct "_IO_FILE">>>, !s32i, !cir.array<!s8i x 20>} #cir.record.decl.ast>
module @"/home/ladisgin/git_proj/juliet-c/testcases/CWE190_Integer_Overflow/s02/CWE190_Integer_Overflow__int64_t_fscanf_square_41.c" attributes {cir.lang = #cir.lang<c>, cir.sob = #cir.signed_overflow_behavior<undefined>, cir.triple = "x86_64-unknown-linux-gnu", dlti.dl_spec = #dlti.dl_spec<f64 = dense<64> : vector<2xi64>, f80 = dense<128> : vector<2xi64>, i128 = dense<128> : vector<2xi64>, i64 = dense<64> : vector<2xi64>, i8 = dense<8> : vector<2xi64>, i1 = dense<8> : vector<2xi64>, !llvm.ptr = dense<64> : vector<4xi64>, f16 = dense<16> : vector<2xi64>, i32 = dense<32> : vector<2xi64>, i16 = dense<16> : vector<2xi64>, !llvm.ptr<271> = dense<32> : vector<4xi64>, !llvm.ptr<272> = dense<64> : vector<4xi64>, f128 = dense<128> : vector<2xi64>, !llvm.ptr<270> = dense<32> : vector<4xi64>, "dlti.stack_alignment" = 128 : i64, "dlti.endianness" = "little">} {
  cir.func private @__isoc99_fscanf(!cir.ptr<!ty__IO_FILE>, !cir.ptr<!s8i>, ...) -> !s32i loc(#loc98)
  cir.global "private" external @stdin : !cir.ptr<!ty__IO_FILE> {alignment = 8 : i64} loc(#loc99)
  cir.global "private" constant cir_private dsolocal @".str" = #cir.const_array<"%ld\00" : !cir.array<!s8i x 4>> : !cir.array<!s8i x 4> {alignment = 1 : i64} loc(#loc100)
  cir.func private @printLongLongLine(!s64i) loc(#loc101)
  cir.func internal private @badSink(%arg0: !s64i loc(fused[#loc11, #loc12])) extra(#fn_attr) {
    %0 = cir.alloca !s64i, !cir.ptr<!s64i>, ["result", init] {alignment = 8 : i64} loc(#loc104)
    %1 = cir.alloca !s64i, !cir.ptr<!s64i>, ["data", init] {alignment = 8 : i64} loc(#loc103)
    cir.store %arg0, %1 : !s64i, !cir.ptr<!s64i> loc(#loc15)
    cir.br ^bb1 loc(#loc105)
  ^bb1:  // pred: ^bb0
    %2 = cir.load %1 : !cir.ptr<!s64i>, !s64i loc(#loc18)
    %3 = cir.load %1 : !cir.ptr<!s64i>, !s64i loc(#loc14)
    %4 = cir.binop(mul, %2, %3) nsw : !s64i loc(#loc18)
    cir.store %4, %0 : !s64i, !cir.ptr<!s64i> loc(#loc104)
    %5 = cir.load %0 : !cir.ptr<!s64i>, !s64i loc(#loc19)
    cir.call @printLongLongLine(%5) : (!s64i) -> () loc(#loc20)
    cir.br ^bb2 loc(#loc17)
  ^bb2:  // pred: ^bb1
    cir.return loc(#loc10)
  } loc(#loc102)
  cir.func no_proto @CWE190_Integer_Overflow__int64_t_fscanf_square_41_bad() extra(#fn_attr) {
    %0 = cir.alloca !s64i, !cir.ptr<!s64i>, ["data"] {alignment = 8 : i64} loc(#loc107)
    %1 = cir.const #cir.int<0> : !s64i loc(#loc25)
    cir.store %1, %0 : !s64i, !cir.ptr<!s64i> loc(#loc108)
    %2 = cir.get_global @__isoc99_fscanf : !cir.ptr<!cir.func<!s32i (!cir.ptr<!ty__IO_FILE>, !cir.ptr<!s8i>, ...)>> loc(#loc27)
    %3 = cir.get_global @stdin : !cir.ptr<!cir.ptr<!ty__IO_FILE>> loc(#loc99)
    %4 = cir.load %3 : !cir.ptr<!cir.ptr<!ty__IO_FILE>>, !cir.ptr<!ty__IO_FILE> loc(#loc28)
    %5 = cir.get_global @".str" : !cir.ptr<!cir.array<!s8i x 4>> loc(#loc100)
    %6 = cir.cast(array_to_ptrdecay, %5 : !cir.ptr<!cir.array<!s8i x 4>>), !cir.ptr<!s8i> loc(#loc100)
    %7 = cir.call @__isoc99_fscanf(%4, %6, %0) : (!cir.ptr<!ty__IO_FILE>, !cir.ptr<!s8i>, !cir.ptr<!s64i>) -> !s32i loc(#loc27)
    %8 = cir.load %0 : !cir.ptr<!s64i>, !s64i loc(#loc29)
    cir.call @badSink(%8) : (!s64i) -> () loc(#loc30)
    cir.return loc(#loc22)
  } loc(#loc106)
  cir.func no_proto @CWE190_Integer_Overflow__int64_t_fscanf_square_41_good() extra(#fn_attr) {
    %0 = cir.get_global @goodB2G : !cir.ptr<!cir.func<!void ()>> loc(#loc110)
    cir.call %0() : (!cir.ptr<!cir.func<!void ()>>) -> () loc(#loc33)
    %1 = cir.get_global @goodG2B : !cir.ptr<!cir.func<!void ()>> loc(#loc111)
    cir.call %1() : (!cir.ptr<!cir.func<!void ()>>) -> () loc(#loc35)
    cir.return loc(#loc32)
  } loc(#loc109)
  cir.func private @imaxabs(!s64i) -> !s64i extra(#fn_attr1) loc(#loc112)
  cir.func private @sqrtl(!cir.long_double<!cir.f80>) -> !cir.long_double<!cir.f80> extra(#fn_attr1) loc(#loc39)
  cir.func private @printLine(!cir.ptr<!s8i>) loc(#loc113)
  cir.global "private" constant cir_private dsolocal @".str.1" = #cir.const_array<"data value is too large to perform arithmetic safely.\00" : !cir.array<!s8i x 54>> : !cir.array<!s8i x 54> {alignment = 1 : i64} loc(#loc42)
  cir.func internal private @goodB2GSink(%arg0: !s64i loc(fused[#loc45, #loc46])) extra(#fn_attr) {
    %0 = cir.alloca !s64i, !cir.ptr<!s64i>, ["result", init] {alignment = 8 : i64} loc(#loc116)
    %1 = cir.alloca !s64i, !cir.ptr<!s64i>, ["data", init] {alignment = 8 : i64} loc(#loc115)
    cir.store %arg0, %1 : !s64i, !cir.ptr<!s64i> loc(#loc49)
    cir.br ^bb1 loc(#loc117)
  ^bb1:  // pred: ^bb0
    %2 = cir.load %1 : !cir.ptr<!s64i>, !s64i loc(#loc52)
    %3 = cir.call @imaxabs(%2) : (!s64i) -> !s64i extra(#fn_attr1) loc(#loc53)
    %4 = cir.cast(int_to_float, %3 : !s64i), !cir.long_double<!cir.f80> loc(#loc53)
    %5 = cir.get_global @sqrtl : !cir.ptr<!cir.func<!cir.long_double<!cir.f80> (!cir.long_double<!cir.f80>)>> loc(#loc54)
    %6 = cir.const #cir.int<9223372036854775807> : !s64i loc(#loc55)
    %7 = cir.cast(int_to_float, %6 : !s64i), !cir.long_double<!cir.f80> loc(#loc55)
    %8 = cir.call @sqrtl(%7) : (!cir.long_double<!cir.f80>) -> !cir.long_double<!cir.f80> extra(#fn_attr1) loc(#loc54)
    %9 = cir.cmp(le, %4, %8) : !cir.long_double<!cir.f80>, !cir.bool loc(#loc118)
    cir.brcond %9 ^bb2, ^bb3 loc(#loc119)
  ^bb2:  // pred: ^bb1
    %10 = cir.load %1 : !cir.ptr<!s64i>, !s64i loc(#loc60)
    %11 = cir.load %1 : !cir.ptr<!s64i>, !s64i loc(#loc48)
    %12 = cir.binop(mul, %10, %11) nsw : !s64i loc(#loc60)
    cir.store %12, %0 : !s64i, !cir.ptr<!s64i> loc(#loc116)
    %13 = cir.load %0 : !cir.ptr<!s64i>, !s64i loc(#loc61)
    cir.call @printLongLongLine(%13) : (!s64i) -> () loc(#loc62)
    cir.br ^bb4 loc(#loc58)
  ^bb3:  // pred: ^bb1
    %14 = cir.get_global @".str.1" : !cir.ptr<!cir.array<!s8i x 54>> loc(#loc42)
    %15 = cir.cast(array_to_ptrdecay, %14 : !cir.ptr<!cir.array<!s8i x 54>>), !cir.ptr<!s8i> loc(#loc42)
    cir.call @printLine(%15) : (!cir.ptr<!s8i>) -> () loc(#loc63)
    cir.br ^bb4 loc(#loc51)
  ^bb4:  // 2 preds: ^bb2, ^bb3
    cir.br ^bb5 loc(#loc51)
  ^bb5:  // pred: ^bb4
    cir.return loc(#loc44)
  } loc(#loc114)
  cir.func no_proto internal private @goodB2G() extra(#fn_attr) {
    %0 = cir.alloca !s64i, !cir.ptr<!s64i>, ["data"] {alignment = 8 : i64} loc(#loc121)
    %1 = cir.const #cir.int<0> : !s64i loc(#loc68)
    cir.store %1, %0 : !s64i, !cir.ptr<!s64i> loc(#loc122)
    %2 = cir.get_global @__isoc99_fscanf : !cir.ptr<!cir.func<!s32i (!cir.ptr<!ty__IO_FILE>, !cir.ptr<!s8i>, ...)>> loc(#loc70)
    %3 = cir.get_global @stdin : !cir.ptr<!cir.ptr<!ty__IO_FILE>> loc(#loc99)
    %4 = cir.load %3 : !cir.ptr<!cir.ptr<!ty__IO_FILE>>, !cir.ptr<!ty__IO_FILE> loc(#loc71)
    %5 = cir.get_global @".str" : !cir.ptr<!cir.array<!s8i x 4>> loc(#loc123)
    %6 = cir.cast(array_to_ptrdecay, %5 : !cir.ptr<!cir.array<!s8i x 4>>), !cir.ptr<!s8i> loc(#loc123)
    %7 = cir.call @__isoc99_fscanf(%4, %6, %0) : (!cir.ptr<!ty__IO_FILE>, !cir.ptr<!s8i>, !cir.ptr<!s64i>) -> !s32i loc(#loc70)
    %8 = cir.load %0 : !cir.ptr<!s64i>, !s64i loc(#loc74)
    cir.call @goodB2GSink(%8) : (!s64i) -> () loc(#loc75)
    cir.return loc(#loc65)
  } loc(#loc120)
  cir.func internal private @goodG2BSink(%arg0: !s64i loc(fused[#loc78, #loc79])) extra(#fn_attr) {
    %0 = cir.alloca !s64i, !cir.ptr<!s64i>, ["result", init] {alignment = 8 : i64} loc(#loc126)
    %1 = cir.alloca !s64i, !cir.ptr<!s64i>, ["data", init] {alignment = 8 : i64} loc(#loc125)
    cir.store %arg0, %1 : !s64i, !cir.ptr<!s64i> loc(#loc82)
    cir.br ^bb1 loc(#loc127)
  ^bb1:  // pred: ^bb0
    %2 = cir.load %1 : !cir.ptr<!s64i>, !s64i loc(#loc85)
    %3 = cir.load %1 : !cir.ptr<!s64i>, !s64i loc(#loc81)
    %4 = cir.binop(mul, %2, %3) nsw : !s64i loc(#loc85)
    cir.store %4, %0 : !s64i, !cir.ptr<!s64i> loc(#loc126)
    %5 = cir.load %0 : !cir.ptr<!s64i>, !s64i loc(#loc86)
    cir.call @printLongLongLine(%5) : (!s64i) -> () loc(#loc87)
    cir.br ^bb2 loc(#loc84)
  ^bb2:  // pred: ^bb1
    cir.return loc(#loc77)
  } loc(#loc124)
  cir.func no_proto internal private @goodG2B() extra(#fn_attr) {
    %0 = cir.alloca !s64i, !cir.ptr<!s64i>, ["data"] {alignment = 8 : i64} loc(#loc129)
    %1 = cir.const #cir.int<0> : !s64i loc(#loc92)
    cir.store %1, %0 : !s64i, !cir.ptr<!s64i> loc(#loc130)
    %2 = cir.const #cir.int<2> : !s32i loc(#loc94)
    %3 = cir.cast(integral, %2 : !s32i), !s64i loc(#loc94)
    cir.store %3, %0 : !s64i, !cir.ptr<!s64i> loc(#loc131)
    %4 = cir.load %0 : !cir.ptr<!s64i>, !s64i loc(#loc96)
    cir.call @goodG2BSink(%4) : (!s64i) -> () loc(#loc97)
    cir.return loc(#loc89)
  } loc(#loc128)
} loc(#loc)
#loc = loc("/home/ladisgin/git_proj/juliet-c/testcases/CWE190_Integer_Overflow/s02/CWE190_Integer_Overflow__int64_t_fscanf_square_41.c":0:0)
#loc1 = loc("/usr/include/stdio.h":463:1)
#loc2 = loc("/usr/include/stdio.h":465:33)
#loc3 = loc("/usr/include/stdio.h":149:1)
#loc4 = loc("/usr/include/stdio.h":149:14)
#loc5 = loc("CWE190_Integer_Overflow__int64_t_fscanf_square_41.c":39:20)
#loc6 = loc("CWE190_Integer_Overflow__int64_t_fscanf_square_41.c":39:24)
#loc7 = loc("../../../testcasesupport/std_testcase_io.h":26:1)
#loc8 = loc("../../../testcasesupport/std_testcase_io.h":26:49)
#loc9 = loc("CWE190_Integer_Overflow__int64_t_fscanf_square_41.c":25:1)
#loc10 = loc("CWE190_Integer_Overflow__int64_t_fscanf_square_41.c":32:1)
#loc13 = loc("CWE190_Integer_Overflow__int64_t_fscanf_square_41.c":29:9)
#loc14 = loc("CWE190_Integer_Overflow__int64_t_fscanf_square_41.c":29:33)
#loc15 = loc("CWE190_Integer_Overflow__int64_t_fscanf_square_41.c":26:1)
#loc16 = loc("CWE190_Integer_Overflow__int64_t_fscanf_square_41.c":27:5)
#loc17 = loc("CWE190_Integer_Overflow__int64_t_fscanf_square_41.c":31:5)
#loc18 = loc("CWE190_Integer_Overflow__int64_t_fscanf_square_41.c":29:26)
#loc19 = loc("CWE190_Integer_Overflow__int64_t_fscanf_square_41.c":30:27)
#loc20 = loc("CWE190_Integer_Overflow__int64_t_fscanf_square_41.c":30:9)
#loc21 = loc("CWE190_Integer_Overflow__int64_t_fscanf_square_41.c":34:1)
#loc22 = loc("CWE190_Integer_Overflow__int64_t_fscanf_square_41.c":41:1)
#loc23 = loc("CWE190_Integer_Overflow__int64_t_fscanf_square_41.c":36:5)
#loc24 = loc("CWE190_Integer_Overflow__int64_t_fscanf_square_41.c":36:13)
#loc25 = loc("CWE190_Integer_Overflow__int64_t_fscanf_square_41.c":37:12)
#loc26 = loc("CWE190_Integer_Overflow__int64_t_fscanf_square_41.c":37:5)
#loc27 = loc("CWE190_Integer_Overflow__int64_t_fscanf_square_41.c":39:5)
#loc28 = loc("CWE190_Integer_Overflow__int64_t_fscanf_square_41.c":39:13)
#loc29 = loc("CWE190_Integer_Overflow__int64_t_fscanf_square_41.c":40:13)
#loc30 = loc("CWE190_Integer_Overflow__int64_t_fscanf_square_41.c":40:5)
#loc31 = loc("CWE190_Integer_Overflow__int64_t_fscanf_square_41.c":90:1)
#loc32 = loc("CWE190_Integer_Overflow__int64_t_fscanf_square_41.c":94:1)
#loc33 = loc("CWE190_Integer_Overflow__int64_t_fscanf_square_41.c":92:5)
#loc34 = loc("CWE190_Integer_Overflow__int64_t_fscanf_square_41.c":92:13)
#loc35 = loc("CWE190_Integer_Overflow__int64_t_fscanf_square_41.c":93:5)
#loc36 = loc("CWE190_Integer_Overflow__int64_t_fscanf_square_41.c":93:13)
#loc37 = loc("/usr/include/inttypes.h":351:1)
#loc38 = loc("/usr/include/inttypes.h":351:74)
#loc39 = loc("/usr/include/bits/mathcalls.h":158:1)
#loc40 = loc("../../../testcasesupport/std_testcase_io.h":14:1)
#loc41 = loc("../../../testcasesupport/std_testcase_io.h":14:33)
#loc42 = loc("CWE190_Integer_Overflow__int64_t_fscanf_square_41.c":77:19)
#loc43 = loc("CWE190_Integer_Overflow__int64_t_fscanf_square_41.c":67:1)
#loc44 = loc("CWE190_Integer_Overflow__int64_t_fscanf_square_41.c":79:1)
#loc47 = loc("CWE190_Integer_Overflow__int64_t_fscanf_square_41.c":72:9)
#loc48 = loc("CWE190_Integer_Overflow__int64_t_fscanf_square_41.c":72:33)
#loc49 = loc("CWE190_Integer_Overflow__int64_t_fscanf_square_41.c":68:1)
#loc50 = loc("CWE190_Integer_Overflow__int64_t_fscanf_square_41.c":70:5)
#loc51 = loc("CWE190_Integer_Overflow__int64_t_fscanf_square_41.c":78:5)
#loc52 = loc("CWE190_Integer_Overflow__int64_t_fscanf_square_41.c":70:27)
#loc53 = loc("CWE190_Integer_Overflow__int64_t_fscanf_square_41.c":70:9)
#loc54 = loc("CWE190_Integer_Overflow__int64_t_fscanf_square_41.c":70:36)
#loc55 = loc("CWE190_Integer_Overflow__int64_t_fscanf_square_41.c":70:42)
#loc56 = loc("CWE190_Integer_Overflow__int64_t_fscanf_square_41.c":70:51)
#loc57 = loc("CWE190_Integer_Overflow__int64_t_fscanf_square_41.c":71:5)
#loc58 = loc("CWE190_Integer_Overflow__int64_t_fscanf_square_41.c":74:5)
#loc59 = loc("CWE190_Integer_Overflow__int64_t_fscanf_square_41.c":76:5)
#loc60 = loc("CWE190_Integer_Overflow__int64_t_fscanf_square_41.c":72:26)
#loc61 = loc("CWE190_Integer_Overflow__int64_t_fscanf_square_41.c":73:27)
#loc62 = loc("CWE190_Integer_Overflow__int64_t_fscanf_square_41.c":73:9)
#loc63 = loc("CWE190_Integer_Overflow__int64_t_fscanf_square_41.c":77:9)
#loc64 = loc("CWE190_Integer_Overflow__int64_t_fscanf_square_41.c":81:1)
#loc65 = loc("CWE190_Integer_Overflow__int64_t_fscanf_square_41.c":88:1)
#loc66 = loc("CWE190_Integer_Overflow__int64_t_fscanf_square_41.c":83:5)
#loc67 = loc("CWE190_Integer_Overflow__int64_t_fscanf_square_41.c":83:13)
#loc68 = loc("CWE190_Integer_Overflow__int64_t_fscanf_square_41.c":84:12)
#loc69 = loc("CWE190_Integer_Overflow__int64_t_fscanf_square_41.c":84:5)
#loc70 = loc("CWE190_Integer_Overflow__int64_t_fscanf_square_41.c":86:5)
#loc71 = loc("CWE190_Integer_Overflow__int64_t_fscanf_square_41.c":86:13)
#loc72 = loc("CWE190_Integer_Overflow__int64_t_fscanf_square_41.c":86:20)
#loc73 = loc("CWE190_Integer_Overflow__int64_t_fscanf_square_41.c":86:24)
#loc74 = loc("CWE190_Integer_Overflow__int64_t_fscanf_square_41.c":87:17)
#loc75 = loc("CWE190_Integer_Overflow__int64_t_fscanf_square_41.c":87:5)
#loc76 = loc("CWE190_Integer_Overflow__int64_t_fscanf_square_41.c":48:1)
#loc77 = loc("CWE190_Integer_Overflow__int64_t_fscanf_square_41.c":55:1)
#loc80 = loc("CWE190_Integer_Overflow__int64_t_fscanf_square_41.c":52:9)
#loc81 = loc("CWE190_Integer_Overflow__int64_t_fscanf_square_41.c":52:33)
#loc82 = loc("CWE190_Integer_Overflow__int64_t_fscanf_square_41.c":49:1)
#loc83 = loc("CWE190_Integer_Overflow__int64_t_fscanf_square_41.c":50:5)
#loc84 = loc("CWE190_Integer_Overflow__int64_t_fscanf_square_41.c":54:5)
#loc85 = loc("CWE190_Integer_Overflow__int64_t_fscanf_square_41.c":52:26)
#loc86 = loc("CWE190_Integer_Overflow__int64_t_fscanf_square_41.c":53:27)
#loc87 = loc("CWE190_Integer_Overflow__int64_t_fscanf_square_41.c":53:9)
#loc88 = loc("CWE190_Integer_Overflow__int64_t_fscanf_square_41.c":57:1)
#loc89 = loc("CWE190_Integer_Overflow__int64_t_fscanf_square_41.c":64:1)
#loc90 = loc("CWE190_Integer_Overflow__int64_t_fscanf_square_41.c":59:5)
#loc91 = loc("CWE190_Integer_Overflow__int64_t_fscanf_square_41.c":59:13)
#loc92 = loc("CWE190_Integer_Overflow__int64_t_fscanf_square_41.c":60:12)
#loc93 = loc("CWE190_Integer_Overflow__int64_t_fscanf_square_41.c":60:5)
#loc94 = loc("CWE190_Integer_Overflow__int64_t_fscanf_square_41.c":62:12)
#loc95 = loc("CWE190_Integer_Overflow__int64_t_fscanf_square_41.c":62:5)
#loc96 = loc("CWE190_Integer_Overflow__int64_t_fscanf_square_41.c":63:17)
#loc97 = loc("CWE190_Integer_Overflow__int64_t_fscanf_square_41.c":63:5)
#loc98 = loc(fused[#loc1, #loc2])
#loc99 = loc(fused[#loc3, #loc4])
#loc100 = loc(fused[#loc5, #loc6])
#loc101 = loc(fused[#loc7, #loc8])
#loc102 = loc(fused[#loc9, #loc10])
#loc104 = loc(fused[#loc13, #loc14])
#loc105 = loc(fused[#loc16, #loc17])
#loc106 = loc(fused[#loc21, #loc22])
#loc107 = loc(fused[#loc23, #loc24])
#loc108 = loc(fused[#loc26, #loc25])
#loc109 = loc(fused[#loc31, #loc32])
#loc110 = loc(fused[#loc33, #loc34])
#loc111 = loc(fused[#loc35, #loc36])
#loc112 = loc(fused[#loc37, #loc38])
#loc113 = loc(fused[#loc40, #loc41])
#loc114 = loc(fused[#loc43, #loc44])
#loc116 = loc(fused[#loc47, #loc48])
#loc117 = loc(fused[#loc50, #loc51])
#loc118 = loc(fused[#loc53, #loc56])
#loc119 = loc(fused[#loc57, #loc58, #loc59, #loc51])
#loc120 = loc(fused[#loc64, #loc65])
#loc121 = loc(fused[#loc66, #loc67])
#loc122 = loc(fused[#loc69, #loc68])
#loc123 = loc(fused[#loc72, #loc73])
#loc124 = loc(fused[#loc76, #loc77])
#loc126 = loc(fused[#loc80, #loc81])
#loc127 = loc(fused[#loc83, #loc84])
#loc128 = loc(fused[#loc88, #loc89])
#loc129 = loc(fused[#loc90, #loc91])
#loc130 = loc(fused[#loc93, #loc92])
#loc131 = loc(fused[#loc95, #loc94])
