!s32i = !cir.int<s, 32>
!s64i = !cir.int<s, 64>
!s8i = !cir.int<s, 8>
!u16i = !cir.int<u, 16>
!u32i = !cir.int<u, 32>
!u64i = !cir.int<u, 64>
!u8i = !cir.int<u, 8>
!void = !cir.void
#false = #cir.bool<false> : !cir.bool
#fn_attr = #cir<extra({nothrow = #cir.nothrow})>
#fn_attr1 = #cir<extra({inline = #cir.inline<no>, nothrow = #cir.nothrow, optnone = #cir.optnone})>
#loc211 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_connect_socket_06.c":451:10)
#loc212 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_connect_socket_06.c":451:14)
#loc213 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_connect_socket_06.c":451:20)
#loc214 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_connect_socket_06.c":451:32)
#true = #cir.bool<true> : !cir.bool
!ty_in_addr = !cir.struct<struct "in_addr" {!u32i} #cir.record.decl.ast>
#loc814 = loc(fused[#loc211, #loc212])
#loc815 = loc(fused[#loc213, #loc214])
!ty_sockaddr = !cir.struct<struct "sockaddr" {!u16i, !cir.array<!s8i x 14>} #cir.record.decl.ast>
!ty_sockaddr_in = !cir.struct<struct "sockaddr_in" {!u16i, !u16i, !ty_in_addr, !cir.array<!u8i x 8>}>
module @"/home/ladisgin/git_proj/juliet-c/testcases/CWE122_Heap_Based_Buffer_Overflow/s06/CWE122_Heap_Based_Buffer_Overflow__c_CWE129_connect_socket_06.c" attributes {cir.lang = #cir.lang<c>, cir.sob = #cir.signed_overflow_behavior<undefined>, cir.triple = "x86_64-unknown-linux-gnu", dlti.dl_spec = #dlti.dl_spec<!llvm.ptr = dense<64> : vector<4xi64>, i1 = dense<8> : vector<2xi64>, i8 = dense<8> : vector<2xi64>, i16 = dense<16> : vector<2xi64>, i32 = dense<32> : vector<2xi64>, f64 = dense<64> : vector<2xi64>, f16 = dense<16> : vector<2xi64>, !llvm.ptr<270> = dense<32> : vector<4xi64>, f128 = dense<128> : vector<2xi64>, !llvm.ptr<271> = dense<32> : vector<4xi64>, !llvm.ptr<272> = dense<64> : vector<4xi64>, i64 = dense<64> : vector<2xi64>, i128 = dense<128> : vector<2xi64>, f80 = dense<128> : vector<2xi64>, "dlti.endianness" = "little", "dlti.stack_alignment" = 128 : i64>} {
  cir.func private @socket(!s32i, !s32i, !s32i) -> !s32i extra(#fn_attr) loc(#loc729)
  cir.func private @inet_addr(!cir.ptr<!s8i>) -> !u32i extra(#fn_attr) loc(#loc730)
  cir.global "private" constant cir_private dsolocal @".str" = #cir.const_array<"127.0.0.1\00" : !cir.array<!s8i x 10>> : !cir.array<!s8i x 10> {alignment = 1 : i64} loc(#loc5)
  cir.func private @htons(!u16i) -> !u16i extra(#fn_attr) loc(#loc731)
  cir.func private @connect(!s32i, !cir.ptr<!ty_sockaddr>, !u32i) -> !s32i loc(#loc732)
  cir.func private @recv(!s32i, !cir.ptr<!void>, !u64i, !s32i) -> !s64i loc(#loc733)
  cir.func private @atoi(!cir.ptr<!s8i>) -> !s32i extra(#fn_attr) loc(#loc734)
  cir.func private @close(!s32i) -> !s32i loc(#loc735)
  cir.func private @malloc(!u64i) -> !cir.ptr<!void> extra(#fn_attr) loc(#loc736)
  cir.func private @exit(!s32i) extra(#fn_attr) loc(#loc737)
  cir.func private @printIntLine(!s32i) loc(#loc738)
  cir.func private @printLine(!cir.ptr<!s8i>) loc(#loc739)
  cir.global "private" constant cir_private dsolocal @".str.1" = #cir.const_array<"ERROR: Array index is negative.\00" : !cir.array<!s8i x 32>> : !cir.array<!s8i x 32> {alignment = 1 : i64} loc(#loc24)
  cir.func private @free(!cir.ptr<!void>) extra(#fn_attr) loc(#loc740)
  cir.func no_proto @CWE122_Heap_Based_Buffer_Overflow__c_CWE129_connect_socket_06_bad() extra(#fn_attr1) {
    %0 = cir.alloca !s32i, !cir.ptr<!s32i>, ["data"] {alignment = 4 : i64} loc(#loc742)
    %1 = cir.const #cir.int<1> : !s32i loc(#loc31)
    %2 = cir.unary(minus, %1) : !s32i, !s32i loc(#loc32)
    cir.store %2, %0 : !s32i, !cir.ptr<!s32i> loc(#loc743)
    cir.scope {
      %3 = cir.const #cir.int<5> : !s32i loc(#loc36)
      %4 = cir.const #cir.int<5> : !s32i loc(#loc37)
      %5 = cir.cmp(eq, %3, %4) : !s32i, !cir.bool loc(#loc745)
      cir.if %5 {
        cir.scope {
          %6 = cir.alloca !s32i, !cir.ptr<!s32i>, ["recvResult"] {alignment = 4 : i64} loc(#loc748)
          %7 = cir.alloca !ty_sockaddr_in, !cir.ptr<!ty_sockaddr_in>, ["service"] {alignment = 4 : i64} loc(#loc749)
          %8 = cir.alloca !s32i, !cir.ptr<!s32i>, ["connectSocket", init] {alignment = 4 : i64} loc(#loc750)
          %9 = cir.alloca !cir.array<!s8i x 14>, !cir.ptr<!cir.array<!s8i x 14>>, ["inputBuffer"] {alignment = 1 : i64} loc(#loc751)
          %10 = cir.const #cir.int<1> : !s32i loc(#loc46)
          %11 = cir.unary(minus, %10) : !s32i, !s32i loc(#loc46)
          cir.store %11, %8 : !s32i, !cir.ptr<!s32i> loc(#loc750)
          cir.scope {
            cir.do {
              %12 = cir.const #cir.int<2> : !s32i loc(#loc51)
              %13 = cir.const #cir.int<1> : !s32i loc(#loc52)
              %14 = cir.const #cir.int<6> : !s32i loc(#loc53)
              %15 = cir.call @socket(%12, %13, %14) : (!s32i, !s32i, !s32i) -> !s32i extra(#fn_attr) loc(#loc54)
              cir.store %15, %8 : !s32i, !cir.ptr<!s32i> loc(#loc753)
              cir.scope {
                %54 = cir.load %8 : !cir.ptr<!s32i>, !s32i loc(#loc59)
                %55 = cir.const #cir.int<1> : !s32i loc(#loc60)
                %56 = cir.unary(minus, %55) : !s32i, !s32i loc(#loc60)
                %57 = cir.cmp(eq, %54, %56) : !s32i, !cir.bool loc(#loc755)
                cir.if %57 {
                  cir.break loc(#loc62)
                } loc(#loc756)
              } loc(#loc754)
              %16 = cir.cast(bitcast, %7 : !cir.ptr<!ty_sockaddr_in>), !cir.ptr<!void> loc(#loc757)
              %17 = cir.const #cir.int<0> : !s32i loc(#loc65)
              %18 = cir.const #cir.int<16> : !u64i loc(#loc758)
              cir.libc.memset %18 bytes from %16 set to %17 : !cir.ptr<!void>, !s32i, !u64i loc(#loc759)
              %19 = cir.const #cir.int<2> : !s32i loc(#loc70)
              %20 = cir.cast(integral, %19 : !s32i), !u16i loc(#loc70)
              %21 = cir.get_member %7[0] {name = "sin_family"} : !cir.ptr<!ty_sockaddr_in> -> !cir.ptr<!u16i> loc(#loc71)
              cir.store %20, %21 : !u16i, !cir.ptr<!u16i> loc(#loc760)
              %22 = cir.get_global @".str" : !cir.ptr<!cir.array<!s8i x 10>> loc(#loc5)
              %23 = cir.cast(array_to_ptrdecay, %22 : !cir.ptr<!cir.array<!s8i x 10>>), !cir.ptr<!s8i> loc(#loc5)
              %24 = cir.call @inet_addr(%23) : (!cir.ptr<!s8i>) -> !u32i extra(#fn_attr) loc(#loc73)
              %25 = cir.get_member %7[2] {name = "sin_addr"} : !cir.ptr<!ty_sockaddr_in> -> !cir.ptr<!ty_in_addr> loc(#loc74)
              %26 = cir.get_member %25[0] {name = "s_addr"} : !cir.ptr<!ty_in_addr> -> !cir.ptr<!u32i> loc(#loc75)
              cir.store %24, %26 : !u32i, !cir.ptr<!u32i> loc(#loc761)
              %27 = cir.const #cir.int<27015> : !s32i loc(#loc78)
              %28 = cir.cast(integral, %27 : !s32i), !u16i loc(#loc78)
              %29 = cir.call @htons(%28) : (!u16i) -> !u16i extra(#fn_attr) loc(#loc79)
              %30 = cir.get_member %7[1] {name = "sin_port"} : !cir.ptr<!ty_sockaddr_in> -> !cir.ptr<!u16i> loc(#loc80)
              cir.store %29, %30 : !u16i, !cir.ptr<!u16i> loc(#loc762)
              cir.scope {
                %54 = cir.load %8 : !cir.ptr<!s32i>, !s32i loc(#loc85)
                %55 = cir.cast(bitcast, %7 : !cir.ptr<!ty_sockaddr_in>), !cir.ptr<!ty_sockaddr> loc(#loc764)
                %56 = cir.const #cir.int<16> : !u64i loc(#loc765)
                %57 = cir.cast(integral, %56 : !u64i), !u32i loc(#loc765)
                %58 = cir.call @connect(%54, %55, %57) : (!s32i, !cir.ptr<!ty_sockaddr>, !u32i) -> !s32i loc(#loc90)
                %59 = cir.const #cir.int<1> : !s32i loc(#loc91)
                %60 = cir.unary(minus, %59) : !s32i, !s32i loc(#loc91)
                %61 = cir.cmp(eq, %58, %60) : !s32i, !cir.bool loc(#loc766)
                cir.if %61 {
                  cir.break loc(#loc93)
                } loc(#loc767)
              } loc(#loc763)
              %31 = cir.load %8 : !cir.ptr<!s32i>, !s32i loc(#loc94)
              %32 = cir.cast(array_to_ptrdecay, %9 : !cir.ptr<!cir.array<!s8i x 14>>), !cir.ptr<!s8i> loc(#loc95)
              %33 = cir.cast(bitcast, %32 : !cir.ptr<!s8i>), !cir.ptr<!void> loc(#loc95)
              %34 = cir.const #cir.int<3> : !s32i loc(#loc96)
              %35 = cir.cast(integral, %34 : !s32i), !u64i loc(#loc96)
              %36 = cir.const #cir.int<4> : !u64i loc(#loc96)
              %37 = cir.binop(mul, %35, %36) : !u64i loc(#loc96)
              %38 = cir.const #cir.int<2> : !s32i loc(#loc96)
              %39 = cir.cast(integral, %38 : !s32i), !u64i loc(#loc96)
              %40 = cir.binop(add, %37, %39) : !u64i loc(#loc96)
              %41 = cir.const #cir.int<1> : !s32i loc(#loc97)
              %42 = cir.cast(integral, %41 : !s32i), !u64i loc(#loc97)
              %43 = cir.binop(sub, %40, %42) : !u64i loc(#loc768)
              %44 = cir.const #cir.int<0> : !s32i loc(#loc98)
              %45 = cir.call @recv(%31, %33, %43, %44) : (!s32i, !cir.ptr<!void>, !u64i, !s32i) -> !s64i loc(#loc99)
              %46 = cir.cast(integral, %45 : !s64i), !s32i loc(#loc99)
              cir.store %46, %6 : !s32i, !cir.ptr<!s32i> loc(#loc769)
              cir.scope {
                %54 = cir.load %6 : !cir.ptr<!s32i>, !s32i loc(#loc104)
                %55 = cir.const #cir.int<1> : !s32i loc(#loc105)
                %56 = cir.unary(minus, %55) : !s32i, !s32i loc(#loc105)
                %57 = cir.cmp(eq, %54, %56) : !s32i, !cir.bool loc(#loc771)
                %58 = cir.ternary(%57, true {
                  %59 = cir.const #true loc(#loc106)
                  cir.yield %59 : !cir.bool loc(#loc106)
                }, false {
                  %59 = cir.load %6 : !cir.ptr<!s32i>, !s32i loc(#loc107)
                  %60 = cir.const #cir.int<0> : !s32i loc(#loc108)
                  %61 = cir.cmp(eq, %59, %60) : !s32i, !cir.bool loc(#loc772)
                  %62 = cir.ternary(%61, true {
                    %63 = cir.const #true loc(#loc106)
                    cir.yield %63 : !cir.bool loc(#loc106)
                  }, false {
                    %63 = cir.const #false loc(#loc106)
                    cir.yield %63 : !cir.bool loc(#loc106)
                  }) : (!cir.bool) -> !cir.bool loc(#loc106)
                  cir.yield %62 : !cir.bool loc(#loc106)
                }) : (!cir.bool) -> !cir.bool loc(#loc106)
                cir.if %58 {
                  cir.break loc(#loc110)
                } loc(#loc773)
              } loc(#loc770)
              %47 = cir.const #cir.int<0> : !s32i loc(#loc111)
              %48 = cir.cast(integral, %47 : !s32i), !s8i loc(#loc111)
              %49 = cir.load %6 : !cir.ptr<!s32i>, !s32i loc(#loc112)
              %50 = cir.cast(array_to_ptrdecay, %9 : !cir.ptr<!cir.array<!s8i x 14>>), !cir.ptr<!s8i> loc(#loc113)
              %51 = cir.ptr_stride(%50 : !cir.ptr<!s8i>, %49 : !s32i), !cir.ptr<!s8i> loc(#loc113)
              cir.store %48, %51 : !s8i, !cir.ptr<!s8i> loc(#loc774)
              %52 = cir.cast(array_to_ptrdecay, %9 : !cir.ptr<!cir.array<!s8i x 14>>), !cir.ptr<!s8i> loc(#loc114)
              %53 = cir.call @atoi(%52) : (!cir.ptr<!s8i>) -> !s32i extra(#fn_attr) loc(#loc115)
              cir.store %53, %0 : !s32i, !cir.ptr<!s32i> loc(#loc775)
              cir.yield loc(#loc50)
            } while {
              %12 = cir.const #cir.int<0> : !s32i loc(#loc118)
              %13 = cir.cast(int_to_bool, %12 : !s32i), !cir.bool loc(#loc118)
              cir.condition(%13) loc(#loc118)
            } loc(#loc752)
          } loc(#loc752)
          cir.scope {
            %12 = cir.load %8 : !cir.ptr<!s32i>, !s32i loc(#loc121)
            %13 = cir.const #cir.int<1> : !s32i loc(#loc122)
            %14 = cir.unary(minus, %13) : !s32i, !s32i loc(#loc122)
            %15 = cir.cmp(ne, %12, %14) : !s32i, !cir.bool loc(#loc777)
            cir.if %15 {
              %16 = cir.load %8 : !cir.ptr<!s32i>, !s32i loc(#loc124)
              %17 = cir.call @close(%16) : (!s32i) -> !s32i loc(#loc125)
            } loc(#loc778)
          } loc(#loc776)
        } loc(#loc747)
      } loc(#loc746)
    } loc(#loc744)
    cir.scope {
      %3 = cir.const #cir.int<5> : !s32i loc(#loc128)
      %4 = cir.const #cir.int<5> : !s32i loc(#loc129)
      %5 = cir.cmp(eq, %3, %4) : !s32i, !cir.bool loc(#loc780)
      cir.if %5 {
        cir.scope {
          %6 = cir.alloca !s32i, !cir.ptr<!s32i>, ["i"] {alignment = 4 : i64} loc(#loc783)
          %7 = cir.alloca !cir.ptr<!s32i>, !cir.ptr<!cir.ptr<!s32i>>, ["buffer", init] {alignment = 8 : i64} loc(#loc784)
          %8 = cir.get_global @malloc : !cir.ptr<!cir.func<!cir.ptr<!void> (!u64i)>> loc(#loc137)
          %9 = cir.const #cir.int<10> : !s32i loc(#loc138)
          %10 = cir.cast(integral, %9 : !s32i), !u64i loc(#loc138)
          %11 = cir.const #cir.int<4> : !u64i loc(#loc785)
          %12 = cir.binop(mul, %10, %11) : !u64i loc(#loc786)
          %13 = cir.call @malloc(%12) : (!u64i) -> !cir.ptr<!void> extra(#fn_attr) loc(#loc137)
          %14 = cir.cast(bitcast, %13 : !cir.ptr<!void>), !cir.ptr<!s32i> loc(#loc787)
          cir.store %14, %7 : !cir.ptr<!s32i>, !cir.ptr<!cir.ptr<!s32i>> loc(#loc784)
          cir.scope {
            %18 = cir.load %7 : !cir.ptr<!cir.ptr<!s32i>>, !cir.ptr<!s32i> loc(#loc143)
            %19 = cir.const #cir.ptr<null> : !cir.ptr<!void> loc(#loc144)
            %20 = cir.cast(bitcast, %19 : !cir.ptr<!void>), !cir.ptr<!s32i> loc(#loc144)
            %21 = cir.cmp(eq, %18, %20) : !cir.ptr<!s32i>, !cir.bool loc(#loc789)
            cir.if %21 {
              %22 = cir.get_global @exit : !cir.ptr<!cir.func<!void (!s32i)>> loc(#loc146)
              %23 = cir.const #cir.int<1> : !s32i loc(#loc147)
              %24 = cir.unary(minus, %23) : !s32i, !s32i loc(#loc148)
              cir.call @exit(%24) : (!s32i) -> () extra(#fn_attr) loc(#loc146)
            } loc(#loc790)
          } loc(#loc788)
          cir.scope {
            %18 = cir.const #cir.int<0> : !s32i loc(#loc151)
            cir.store %18, %6 : !s32i, !cir.ptr<!s32i> loc(#loc792)
            cir.for : cond {
              %19 = cir.load %6 : !cir.ptr<!s32i>, !s32i loc(#loc153)
              %20 = cir.const #cir.int<10> : !s32i loc(#loc154)
              %21 = cir.cmp(lt, %19, %20) : !s32i, !cir.bool loc(#loc793)
              cir.condition(%21) loc(#loc155)
            } body {
              cir.scope {
                %19 = cir.const #cir.int<0> : !s32i loc(#loc157)
                %20 = cir.load %7 : !cir.ptr<!cir.ptr<!s32i>>, !cir.ptr<!s32i> loc(#loc158)
                %21 = cir.load %6 : !cir.ptr<!s32i>, !s32i loc(#loc159)
                %22 = cir.ptr_stride(%20 : !cir.ptr<!s32i>, %21 : !s32i), !cir.ptr<!s32i> loc(#loc160)
                cir.store %19, %22 : !s32i, !cir.ptr<!s32i> loc(#loc795)
              } loc(#loc794)
              cir.yield loc(#loc150)
            } step {
              %19 = cir.load %6 : !cir.ptr<!s32i>, !s32i loc(#loc161)
              %20 = cir.unary(inc, %19) : !s32i, !s32i loc(#loc162)
              cir.store %20, %6 : !s32i, !cir.ptr<!s32i> loc(#loc796)
              cir.yield loc(#loc791)
            } loc(#loc791)
          } loc(#loc791)
          cir.scope {
            %18 = cir.load %0 : !cir.ptr<!s32i>, !s32i loc(#loc165)
            %19 = cir.const #cir.int<0> : !s32i loc(#loc166)
            %20 = cir.cmp(ge, %18, %19) : !s32i, !cir.bool loc(#loc798)
            cir.if %20 {
              %21 = cir.const #cir.int<1> : !s32i loc(#loc170)
              %22 = cir.load %7 : !cir.ptr<!cir.ptr<!s32i>>, !cir.ptr<!s32i> loc(#loc171)
              %23 = cir.load %0 : !cir.ptr<!s32i>, !s32i loc(#loc172)
              %24 = cir.ptr_stride(%22 : !cir.ptr<!s32i>, %23 : !s32i), !cir.ptr<!s32i> loc(#loc173)
              cir.store %21, %24 : !s32i, !cir.ptr<!s32i> loc(#loc800)
              cir.scope {
                %25 = cir.const #cir.int<0> : !s32i loc(#loc176)
                cir.store %25, %6 : !s32i, !cir.ptr<!s32i> loc(#loc802)
                cir.for : cond {
                  %26 = cir.load %6 : !cir.ptr<!s32i>, !s32i loc(#loc178)
                  %27 = cir.const #cir.int<10> : !s32i loc(#loc179)
                  %28 = cir.cmp(lt, %26, %27) : !s32i, !cir.bool loc(#loc803)
                  cir.condition(%28) loc(#loc180)
                } body {
                  cir.scope {
                    %26 = cir.load %7 : !cir.ptr<!cir.ptr<!s32i>>, !cir.ptr<!s32i> loc(#loc182)
                    %27 = cir.load %6 : !cir.ptr<!s32i>, !s32i loc(#loc183)
                    %28 = cir.ptr_stride(%26 : !cir.ptr<!s32i>, %27 : !s32i), !cir.ptr<!s32i> loc(#loc184)
                    %29 = cir.load %28 : !cir.ptr<!s32i>, !s32i loc(#loc182)
                    cir.call @printIntLine(%29) : (!s32i) -> () loc(#loc185)
                  } loc(#loc804)
                  cir.yield loc(#loc175)
                } step {
                  %26 = cir.load %6 : !cir.ptr<!s32i>, !s32i loc(#loc186)
                  %27 = cir.unary(inc, %26) : !s32i, !s32i loc(#loc187)
                  cir.store %27, %6 : !s32i, !cir.ptr<!s32i> loc(#loc805)
                  cir.yield loc(#loc801)
                } loc(#loc801)
              } loc(#loc801)
            } else {
              %21 = cir.get_global @".str.1" : !cir.ptr<!cir.array<!s8i x 32>> loc(#loc24)
              %22 = cir.cast(array_to_ptrdecay, %21 : !cir.ptr<!cir.array<!s8i x 32>>), !cir.ptr<!s8i> loc(#loc24)
              cir.call @printLine(%22) : (!cir.ptr<!s8i>) -> () loc(#loc188)
            } loc(#loc799)
          } loc(#loc797)
          %15 = cir.get_global @free : !cir.ptr<!cir.func<!void (!cir.ptr<!void>)>> loc(#loc189)
          %16 = cir.load %7 : !cir.ptr<!cir.ptr<!s32i>>, !cir.ptr<!s32i> loc(#loc190)
          %17 = cir.cast(bitcast, %16 : !cir.ptr<!s32i>), !cir.ptr<!void> loc(#loc190)
          cir.call @free(%17) : (!cir.ptr<!void>) -> () extra(#fn_attr) loc(#loc189)
        } loc(#loc782)
      } loc(#loc781)
    } loc(#loc779)
    cir.return loc(#loc28)
  } loc(#loc741)
  cir.func no_proto @CWE122_Heap_Based_Buffer_Overflow__c_CWE129_connect_socket_06_good() extra(#fn_attr1) {
    %0 = cir.get_global @goodB2G1 : !cir.ptr<!cir.func<!void ()>> loc(#loc807)
    cir.call %0() : (!cir.ptr<!cir.func<!void ()>>) -> () loc(#loc193)
    %1 = cir.get_global @goodB2G2 : !cir.ptr<!cir.func<!void ()>> loc(#loc808)
    cir.call %1() : (!cir.ptr<!cir.func<!void ()>>) -> () loc(#loc195)
    %2 = cir.get_global @goodG2B1 : !cir.ptr<!cir.func<!void ()>> loc(#loc809)
    cir.call %2() : (!cir.ptr<!cir.func<!void ()>>) -> () loc(#loc197)
    %3 = cir.get_global @goodG2B2 : !cir.ptr<!cir.func<!void ()>> loc(#loc810)
    cir.call %3() : (!cir.ptr<!cir.func<!void ()>>) -> () loc(#loc199)
    cir.return loc(#loc192)
  } loc(#loc806)
  cir.func private @srand(!u32i) extra(#fn_attr) loc(#loc811)
  cir.func private @time(!cir.ptr<!s64i>) -> !s64i extra(#fn_attr) loc(#loc812)
  cir.global "private" constant cir_private dsolocal @".str.2" = #cir.const_array<"Calling good()...\00" : !cir.array<!s8i x 18>> : !cir.array<!s8i x 18> {alignment = 1 : i64} loc(#loc205)
  cir.global "private" constant cir_private dsolocal @".str.3" = #cir.const_array<"Finished good()\00" : !cir.array<!s8i x 16>> : !cir.array<!s8i x 16> {alignment = 1 : i64} loc(#loc206)
  cir.global "private" constant cir_private dsolocal @".str.4" = #cir.const_array<"Calling bad()...\00" : !cir.array<!s8i x 17>> : !cir.array<!s8i x 17> {alignment = 1 : i64} loc(#loc207)
  cir.global "private" constant cir_private dsolocal @".str.5" = #cir.const_array<"Finished bad()\00" : !cir.array<!s8i x 15>> : !cir.array<!s8i x 15> {alignment = 1 : i64} loc(#loc208)
  cir.func @main(%arg0: !s32i loc(fused[#loc211, #loc212]), %arg1: !cir.ptr<!cir.ptr<!s8i>> loc(fused[#loc213, #loc214])) -> !s32i extra(#fn_attr1) {
    %0 = cir.alloca !s32i, !cir.ptr<!s32i>, ["argc", init] {alignment = 4 : i64} loc(#loc814)
    %1 = cir.alloca !cir.ptr<!cir.ptr<!s8i>>, !cir.ptr<!cir.ptr<!cir.ptr<!s8i>>>, ["argv", init] {alignment = 8 : i64} loc(#loc815)
    %2 = cir.alloca !s32i, !cir.ptr<!s32i>, ["__retval"] {alignment = 4 : i64} loc(#loc210)
    cir.store %arg0, %0 : !s32i, !cir.ptr<!s32i> loc(#loc215)
    cir.store %arg1, %1 : !cir.ptr<!cir.ptr<!s8i>>, !cir.ptr<!cir.ptr<!cir.ptr<!s8i>>> loc(#loc215)
    %3 = cir.const #cir.ptr<null> : !cir.ptr<!s64i> loc(#loc216)
    %4 = cir.call @time(%3) : (!cir.ptr<!s64i>) -> !s64i extra(#fn_attr) loc(#loc217)
    %5 = cir.cast(integral, %4 : !s64i), !u32i loc(#loc217)
    cir.call @srand(%5) : (!u32i) -> () extra(#fn_attr) loc(#loc218)
    %6 = cir.get_global @".str.2" : !cir.ptr<!cir.array<!s8i x 18>> loc(#loc205)
    %7 = cir.cast(array_to_ptrdecay, %6 : !cir.ptr<!cir.array<!s8i x 18>>), !cir.ptr<!s8i> loc(#loc205)
    cir.call @printLine(%7) : (!cir.ptr<!s8i>) -> () loc(#loc219)
    %8 = cir.get_global @CWE122_Heap_Based_Buffer_Overflow__c_CWE129_connect_socket_06_good : !cir.ptr<!cir.func<!void ()>> loc(#loc816)
    cir.call @CWE122_Heap_Based_Buffer_Overflow__c_CWE129_connect_socket_06_good() : () -> () loc(#loc220)
    %9 = cir.get_global @".str.3" : !cir.ptr<!cir.array<!s8i x 16>> loc(#loc206)
    %10 = cir.cast(array_to_ptrdecay, %9 : !cir.ptr<!cir.array<!s8i x 16>>), !cir.ptr<!s8i> loc(#loc206)
    cir.call @printLine(%10) : (!cir.ptr<!s8i>) -> () loc(#loc222)
    %11 = cir.get_global @".str.4" : !cir.ptr<!cir.array<!s8i x 17>> loc(#loc207)
    %12 = cir.cast(array_to_ptrdecay, %11 : !cir.ptr<!cir.array<!s8i x 17>>), !cir.ptr<!s8i> loc(#loc207)
    cir.call @printLine(%12) : (!cir.ptr<!s8i>) -> () loc(#loc223)
    %13 = cir.get_global @CWE122_Heap_Based_Buffer_Overflow__c_CWE129_connect_socket_06_bad : !cir.ptr<!cir.func<!void ()>> loc(#loc817)
    cir.call @CWE122_Heap_Based_Buffer_Overflow__c_CWE129_connect_socket_06_bad() : () -> () loc(#loc224)
    %14 = cir.get_global @".str.5" : !cir.ptr<!cir.array<!s8i x 15>> loc(#loc208)
    %15 = cir.cast(array_to_ptrdecay, %14 : !cir.ptr<!cir.array<!s8i x 15>>), !cir.ptr<!s8i> loc(#loc208)
    cir.call @printLine(%15) : (!cir.ptr<!s8i>) -> () loc(#loc226)
    %16 = cir.const #cir.int<0> : !s32i loc(#loc227)
    cir.store %16, %2 : !s32i, !cir.ptr<!s32i> loc(#loc818)
    %17 = cir.load %2 : !cir.ptr<!s32i>, !s32i loc(#loc818)
    cir.return %17 : !s32i loc(#loc818)
  } loc(#loc813)
  cir.global "private" constant cir_private dsolocal @".str.6" = #cir.const_array<"Benign, fixed string\00" : !cir.array<!s8i x 21>> : !cir.array<!s8i x 21> {alignment = 1 : i64} loc(#loc229)
  cir.global "private" constant cir_private dsolocal @".str.7" = #cir.const_array<"ERROR: Array index is out-of-bounds\00" : !cir.array<!s8i x 36>> : !cir.array<!s8i x 36> {alignment = 1 : i64} loc(#loc230)
  cir.func no_proto internal private @goodB2G1() extra(#fn_attr1) {
    %0 = cir.alloca !s32i, !cir.ptr<!s32i>, ["data"] {alignment = 4 : i64} loc(#loc820)
    %1 = cir.const #cir.int<1> : !s32i loc(#loc235)
    %2 = cir.unary(minus, %1) : !s32i, !s32i loc(#loc236)
    cir.store %2, %0 : !s32i, !cir.ptr<!s32i> loc(#loc821)
    cir.scope {
      %3 = cir.const #cir.int<5> : !s32i loc(#loc240)
      %4 = cir.const #cir.int<5> : !s32i loc(#loc241)
      %5 = cir.cmp(eq, %3, %4) : !s32i, !cir.bool loc(#loc823)
      cir.if %5 {
        cir.scope {
          %6 = cir.alloca !s32i, !cir.ptr<!s32i>, ["recvResult"] {alignment = 4 : i64} loc(#loc826)
          %7 = cir.alloca !ty_sockaddr_in, !cir.ptr<!ty_sockaddr_in>, ["service"] {alignment = 4 : i64} loc(#loc827)
          %8 = cir.alloca !s32i, !cir.ptr<!s32i>, ["connectSocket", init] {alignment = 4 : i64} loc(#loc828)
          %9 = cir.alloca !cir.array<!s8i x 14>, !cir.ptr<!cir.array<!s8i x 14>>, ["inputBuffer"] {alignment = 1 : i64} loc(#loc829)
          %10 = cir.const #cir.int<1> : !s32i loc(#loc250)
          %11 = cir.unary(minus, %10) : !s32i, !s32i loc(#loc250)
          cir.store %11, %8 : !s32i, !cir.ptr<!s32i> loc(#loc828)
          cir.scope {
            cir.do {
              %12 = cir.const #cir.int<2> : !s32i loc(#loc255)
              %13 = cir.const #cir.int<1> : !s32i loc(#loc256)
              %14 = cir.const #cir.int<6> : !s32i loc(#loc257)
              %15 = cir.call @socket(%12, %13, %14) : (!s32i, !s32i, !s32i) -> !s32i extra(#fn_attr) loc(#loc258)
              cir.store %15, %8 : !s32i, !cir.ptr<!s32i> loc(#loc831)
              cir.scope {
                %54 = cir.load %8 : !cir.ptr<!s32i>, !s32i loc(#loc263)
                %55 = cir.const #cir.int<1> : !s32i loc(#loc264)
                %56 = cir.unary(minus, %55) : !s32i, !s32i loc(#loc264)
                %57 = cir.cmp(eq, %54, %56) : !s32i, !cir.bool loc(#loc833)
                cir.if %57 {
                  cir.break loc(#loc266)
                } loc(#loc834)
              } loc(#loc832)
              %16 = cir.cast(bitcast, %7 : !cir.ptr<!ty_sockaddr_in>), !cir.ptr<!void> loc(#loc835)
              %17 = cir.const #cir.int<0> : !s32i loc(#loc269)
              %18 = cir.const #cir.int<16> : !u64i loc(#loc836)
              cir.libc.memset %18 bytes from %16 set to %17 : !cir.ptr<!void>, !s32i, !u64i loc(#loc837)
              %19 = cir.const #cir.int<2> : !s32i loc(#loc274)
              %20 = cir.cast(integral, %19 : !s32i), !u16i loc(#loc274)
              %21 = cir.get_member %7[0] {name = "sin_family"} : !cir.ptr<!ty_sockaddr_in> -> !cir.ptr<!u16i> loc(#loc71)
              cir.store %20, %21 : !u16i, !cir.ptr<!u16i> loc(#loc838)
              %22 = cir.get_global @".str" : !cir.ptr<!cir.array<!s8i x 10>> loc(#loc276)
              %23 = cir.cast(array_to_ptrdecay, %22 : !cir.ptr<!cir.array<!s8i x 10>>), !cir.ptr<!s8i> loc(#loc276)
              %24 = cir.call @inet_addr(%23) : (!cir.ptr<!s8i>) -> !u32i extra(#fn_attr) loc(#loc277)
              %25 = cir.get_member %7[2] {name = "sin_addr"} : !cir.ptr<!ty_sockaddr_in> -> !cir.ptr<!ty_in_addr> loc(#loc74)
              %26 = cir.get_member %25[0] {name = "s_addr"} : !cir.ptr<!ty_in_addr> -> !cir.ptr<!u32i> loc(#loc75)
              cir.store %24, %26 : !u32i, !cir.ptr<!u32i> loc(#loc839)
              %27 = cir.const #cir.int<27015> : !s32i loc(#loc280)
              %28 = cir.cast(integral, %27 : !s32i), !u16i loc(#loc280)
              %29 = cir.call @htons(%28) : (!u16i) -> !u16i extra(#fn_attr) loc(#loc281)
              %30 = cir.get_member %7[1] {name = "sin_port"} : !cir.ptr<!ty_sockaddr_in> -> !cir.ptr<!u16i> loc(#loc80)
              cir.store %29, %30 : !u16i, !cir.ptr<!u16i> loc(#loc840)
              cir.scope {
                %54 = cir.load %8 : !cir.ptr<!s32i>, !s32i loc(#loc286)
                %55 = cir.cast(bitcast, %7 : !cir.ptr<!ty_sockaddr_in>), !cir.ptr<!ty_sockaddr> loc(#loc842)
                %56 = cir.const #cir.int<16> : !u64i loc(#loc843)
                %57 = cir.cast(integral, %56 : !u64i), !u32i loc(#loc843)
                %58 = cir.call @connect(%54, %55, %57) : (!s32i, !cir.ptr<!ty_sockaddr>, !u32i) -> !s32i loc(#loc291)
                %59 = cir.const #cir.int<1> : !s32i loc(#loc292)
                %60 = cir.unary(minus, %59) : !s32i, !s32i loc(#loc292)
                %61 = cir.cmp(eq, %58, %60) : !s32i, !cir.bool loc(#loc844)
                cir.if %61 {
                  cir.break loc(#loc294)
                } loc(#loc845)
              } loc(#loc841)
              %31 = cir.load %8 : !cir.ptr<!s32i>, !s32i loc(#loc295)
              %32 = cir.cast(array_to_ptrdecay, %9 : !cir.ptr<!cir.array<!s8i x 14>>), !cir.ptr<!s8i> loc(#loc296)
              %33 = cir.cast(bitcast, %32 : !cir.ptr<!s8i>), !cir.ptr<!void> loc(#loc296)
              %34 = cir.const #cir.int<3> : !s32i loc(#loc297)
              %35 = cir.cast(integral, %34 : !s32i), !u64i loc(#loc297)
              %36 = cir.const #cir.int<4> : !u64i loc(#loc297)
              %37 = cir.binop(mul, %35, %36) : !u64i loc(#loc297)
              %38 = cir.const #cir.int<2> : !s32i loc(#loc297)
              %39 = cir.cast(integral, %38 : !s32i), !u64i loc(#loc297)
              %40 = cir.binop(add, %37, %39) : !u64i loc(#loc297)
              %41 = cir.const #cir.int<1> : !s32i loc(#loc298)
              %42 = cir.cast(integral, %41 : !s32i), !u64i loc(#loc298)
              %43 = cir.binop(sub, %40, %42) : !u64i loc(#loc846)
              %44 = cir.const #cir.int<0> : !s32i loc(#loc299)
              %45 = cir.call @recv(%31, %33, %43, %44) : (!s32i, !cir.ptr<!void>, !u64i, !s32i) -> !s64i loc(#loc300)
              %46 = cir.cast(integral, %45 : !s64i), !s32i loc(#loc300)
              cir.store %46, %6 : !s32i, !cir.ptr<!s32i> loc(#loc847)
              cir.scope {
                %54 = cir.load %6 : !cir.ptr<!s32i>, !s32i loc(#loc305)
                %55 = cir.const #cir.int<1> : !s32i loc(#loc306)
                %56 = cir.unary(minus, %55) : !s32i, !s32i loc(#loc306)
                %57 = cir.cmp(eq, %54, %56) : !s32i, !cir.bool loc(#loc849)
                %58 = cir.ternary(%57, true {
                  %59 = cir.const #true loc(#loc307)
                  cir.yield %59 : !cir.bool loc(#loc307)
                }, false {
                  %59 = cir.load %6 : !cir.ptr<!s32i>, !s32i loc(#loc308)
                  %60 = cir.const #cir.int<0> : !s32i loc(#loc309)
                  %61 = cir.cmp(eq, %59, %60) : !s32i, !cir.bool loc(#loc850)
                  %62 = cir.ternary(%61, true {
                    %63 = cir.const #true loc(#loc307)
                    cir.yield %63 : !cir.bool loc(#loc307)
                  }, false {
                    %63 = cir.const #false loc(#loc307)
                    cir.yield %63 : !cir.bool loc(#loc307)
                  }) : (!cir.bool) -> !cir.bool loc(#loc307)
                  cir.yield %62 : !cir.bool loc(#loc307)
                }) : (!cir.bool) -> !cir.bool loc(#loc307)
                cir.if %58 {
                  cir.break loc(#loc311)
                } loc(#loc851)
              } loc(#loc848)
              %47 = cir.const #cir.int<0> : !s32i loc(#loc312)
              %48 = cir.cast(integral, %47 : !s32i), !s8i loc(#loc312)
              %49 = cir.load %6 : !cir.ptr<!s32i>, !s32i loc(#loc313)
              %50 = cir.cast(array_to_ptrdecay, %9 : !cir.ptr<!cir.array<!s8i x 14>>), !cir.ptr<!s8i> loc(#loc314)
              %51 = cir.ptr_stride(%50 : !cir.ptr<!s8i>, %49 : !s32i), !cir.ptr<!s8i> loc(#loc314)
              cir.store %48, %51 : !s8i, !cir.ptr<!s8i> loc(#loc852)
              %52 = cir.cast(array_to_ptrdecay, %9 : !cir.ptr<!cir.array<!s8i x 14>>), !cir.ptr<!s8i> loc(#loc315)
              %53 = cir.call @atoi(%52) : (!cir.ptr<!s8i>) -> !s32i extra(#fn_attr) loc(#loc316)
              cir.store %53, %0 : !s32i, !cir.ptr<!s32i> loc(#loc853)
              cir.yield loc(#loc254)
            } while {
              %12 = cir.const #cir.int<0> : !s32i loc(#loc319)
              %13 = cir.cast(int_to_bool, %12 : !s32i), !cir.bool loc(#loc319)
              cir.condition(%13) loc(#loc319)
            } loc(#loc830)
          } loc(#loc830)
          cir.scope {
            %12 = cir.load %8 : !cir.ptr<!s32i>, !s32i loc(#loc322)
            %13 = cir.const #cir.int<1> : !s32i loc(#loc323)
            %14 = cir.unary(minus, %13) : !s32i, !s32i loc(#loc323)
            %15 = cir.cmp(ne, %12, %14) : !s32i, !cir.bool loc(#loc855)
            cir.if %15 {
              %16 = cir.load %8 : !cir.ptr<!s32i>, !s32i loc(#loc325)
              %17 = cir.call @close(%16) : (!s32i) -> !s32i loc(#loc326)
            } loc(#loc856)
          } loc(#loc854)
        } loc(#loc825)
      } loc(#loc824)
    } loc(#loc822)
    cir.scope {
      %3 = cir.const #cir.int<5> : !s32i loc(#loc329)
      %4 = cir.const #cir.int<5> : !s32i loc(#loc330)
      %5 = cir.cmp(ne, %3, %4) : !s32i, !cir.bool loc(#loc858)
      cir.if %5 {
        %6 = cir.get_global @".str.6" : !cir.ptr<!cir.array<!s8i x 21>> loc(#loc229)
        %7 = cir.cast(array_to_ptrdecay, %6 : !cir.ptr<!cir.array<!s8i x 21>>), !cir.ptr<!s8i> loc(#loc229)
        cir.call @printLine(%7) : (!cir.ptr<!s8i>) -> () loc(#loc334)
      } else {
        cir.scope {
          %6 = cir.alloca !s32i, !cir.ptr<!s32i>, ["i"] {alignment = 4 : i64} loc(#loc861)
          %7 = cir.alloca !cir.ptr<!s32i>, !cir.ptr<!cir.ptr<!s32i>>, ["buffer", init] {alignment = 8 : i64} loc(#loc862)
          %8 = cir.get_global @malloc : !cir.ptr<!cir.func<!cir.ptr<!void> (!u64i)>> loc(#loc341)
          %9 = cir.const #cir.int<10> : !s32i loc(#loc342)
          %10 = cir.cast(integral, %9 : !s32i), !u64i loc(#loc342)
          %11 = cir.const #cir.int<4> : !u64i loc(#loc863)
          %12 = cir.binop(mul, %10, %11) : !u64i loc(#loc864)
          %13 = cir.call @malloc(%12) : (!u64i) -> !cir.ptr<!void> extra(#fn_attr) loc(#loc341)
          %14 = cir.cast(bitcast, %13 : !cir.ptr<!void>), !cir.ptr<!s32i> loc(#loc865)
          cir.store %14, %7 : !cir.ptr<!s32i>, !cir.ptr<!cir.ptr<!s32i>> loc(#loc862)
          cir.scope {
            %18 = cir.load %7 : !cir.ptr<!cir.ptr<!s32i>>, !cir.ptr<!s32i> loc(#loc347)
            %19 = cir.const #cir.ptr<null> : !cir.ptr<!void> loc(#loc348)
            %20 = cir.cast(bitcast, %19 : !cir.ptr<!void>), !cir.ptr<!s32i> loc(#loc348)
            %21 = cir.cmp(eq, %18, %20) : !cir.ptr<!s32i>, !cir.bool loc(#loc867)
            cir.if %21 {
              %22 = cir.get_global @exit : !cir.ptr<!cir.func<!void (!s32i)>> loc(#loc350)
              %23 = cir.const #cir.int<1> : !s32i loc(#loc351)
              %24 = cir.unary(minus, %23) : !s32i, !s32i loc(#loc352)
              cir.call @exit(%24) : (!s32i) -> () extra(#fn_attr) loc(#loc350)
            } loc(#loc868)
          } loc(#loc866)
          cir.scope {
            %18 = cir.const #cir.int<0> : !s32i loc(#loc355)
            cir.store %18, %6 : !s32i, !cir.ptr<!s32i> loc(#loc870)
            cir.for : cond {
              %19 = cir.load %6 : !cir.ptr<!s32i>, !s32i loc(#loc357)
              %20 = cir.const #cir.int<10> : !s32i loc(#loc358)
              %21 = cir.cmp(lt, %19, %20) : !s32i, !cir.bool loc(#loc871)
              cir.condition(%21) loc(#loc359)
            } body {
              cir.scope {
                %19 = cir.const #cir.int<0> : !s32i loc(#loc361)
                %20 = cir.load %7 : !cir.ptr<!cir.ptr<!s32i>>, !cir.ptr<!s32i> loc(#loc362)
                %21 = cir.load %6 : !cir.ptr<!s32i>, !s32i loc(#loc363)
                %22 = cir.ptr_stride(%20 : !cir.ptr<!s32i>, %21 : !s32i), !cir.ptr<!s32i> loc(#loc364)
                cir.store %19, %22 : !s32i, !cir.ptr<!s32i> loc(#loc873)
              } loc(#loc872)
              cir.yield loc(#loc354)
            } step {
              %19 = cir.load %6 : !cir.ptr<!s32i>, !s32i loc(#loc365)
              %20 = cir.unary(inc, %19) : !s32i, !s32i loc(#loc366)
              cir.store %20, %6 : !s32i, !cir.ptr<!s32i> loc(#loc874)
              cir.yield loc(#loc869)
            } loc(#loc869)
          } loc(#loc869)
          cir.scope {
            %18 = cir.load %0 : !cir.ptr<!s32i>, !s32i loc(#loc369)
            %19 = cir.const #cir.int<0> : !s32i loc(#loc370)
            %20 = cir.cmp(ge, %18, %19) : !s32i, !cir.bool loc(#loc876)
            %21 = cir.ternary(%20, true {
              %22 = cir.load %0 : !cir.ptr<!s32i>, !s32i loc(#loc372)
              %23 = cir.const #cir.int<10> : !s32i loc(#loc373)
              %24 = cir.cmp(lt, %22, %23) : !s32i, !cir.bool loc(#loc877)
              %25 = cir.ternary(%24, true {
                %26 = cir.const #true loc(#loc371)
                cir.yield %26 : !cir.bool loc(#loc371)
              }, false {
                %26 = cir.const #false loc(#loc371)
                cir.yield %26 : !cir.bool loc(#loc371)
              }) : (!cir.bool) -> !cir.bool loc(#loc371)
              cir.yield %25 : !cir.bool loc(#loc371)
            }, false {
              %22 = cir.const #false loc(#loc371)
              cir.yield %22 : !cir.bool loc(#loc371)
            }) : (!cir.bool) -> !cir.bool loc(#loc371)
            cir.if %21 {
              %22 = cir.const #cir.int<1> : !s32i loc(#loc378)
              %23 = cir.load %7 : !cir.ptr<!cir.ptr<!s32i>>, !cir.ptr<!s32i> loc(#loc379)
              %24 = cir.load %0 : !cir.ptr<!s32i>, !s32i loc(#loc380)
              %25 = cir.ptr_stride(%23 : !cir.ptr<!s32i>, %24 : !s32i), !cir.ptr<!s32i> loc(#loc381)
              cir.store %22, %25 : !s32i, !cir.ptr<!s32i> loc(#loc879)
              cir.scope {
                %26 = cir.const #cir.int<0> : !s32i loc(#loc384)
                cir.store %26, %6 : !s32i, !cir.ptr<!s32i> loc(#loc881)
                cir.for : cond {
                  %27 = cir.load %6 : !cir.ptr<!s32i>, !s32i loc(#loc386)
                  %28 = cir.const #cir.int<10> : !s32i loc(#loc387)
                  %29 = cir.cmp(lt, %27, %28) : !s32i, !cir.bool loc(#loc882)
                  cir.condition(%29) loc(#loc388)
                } body {
                  cir.scope {
                    %27 = cir.load %7 : !cir.ptr<!cir.ptr<!s32i>>, !cir.ptr<!s32i> loc(#loc390)
                    %28 = cir.load %6 : !cir.ptr<!s32i>, !s32i loc(#loc391)
                    %29 = cir.ptr_stride(%27 : !cir.ptr<!s32i>, %28 : !s32i), !cir.ptr<!s32i> loc(#loc392)
                    %30 = cir.load %29 : !cir.ptr<!s32i>, !s32i loc(#loc390)
                    cir.call @printIntLine(%30) : (!s32i) -> () loc(#loc393)
                  } loc(#loc883)
                  cir.yield loc(#loc383)
                } step {
                  %27 = cir.load %6 : !cir.ptr<!s32i>, !s32i loc(#loc394)
                  %28 = cir.unary(inc, %27) : !s32i, !s32i loc(#loc395)
                  cir.store %28, %6 : !s32i, !cir.ptr<!s32i> loc(#loc884)
                  cir.yield loc(#loc880)
                } loc(#loc880)
              } loc(#loc880)
            } else {
              %22 = cir.get_global @".str.7" : !cir.ptr<!cir.array<!s8i x 36>> loc(#loc230)
              %23 = cir.cast(array_to_ptrdecay, %22 : !cir.ptr<!cir.array<!s8i x 36>>), !cir.ptr<!s8i> loc(#loc230)
              cir.call @printLine(%23) : (!cir.ptr<!s8i>) -> () loc(#loc396)
            } loc(#loc878)
          } loc(#loc875)
          %15 = cir.get_global @free : !cir.ptr<!cir.func<!void (!cir.ptr<!void>)>> loc(#loc397)
          %16 = cir.load %7 : !cir.ptr<!cir.ptr<!s32i>>, !cir.ptr<!s32i> loc(#loc398)
          %17 = cir.cast(bitcast, %16 : !cir.ptr<!s32i>), !cir.ptr<!void> loc(#loc398)
          cir.call @free(%17) : (!cir.ptr<!void>) -> () extra(#fn_attr) loc(#loc397)
        } loc(#loc860)
      } loc(#loc859)
    } loc(#loc857)
    cir.return loc(#loc232)
  } loc(#loc819)
  cir.func no_proto internal private @goodB2G2() extra(#fn_attr1) {
    %0 = cir.alloca !s32i, !cir.ptr<!s32i>, ["data"] {alignment = 4 : i64} loc(#loc886)
    %1 = cir.const #cir.int<1> : !s32i loc(#loc403)
    %2 = cir.unary(minus, %1) : !s32i, !s32i loc(#loc404)
    cir.store %2, %0 : !s32i, !cir.ptr<!s32i> loc(#loc887)
    cir.scope {
      %3 = cir.const #cir.int<5> : !s32i loc(#loc408)
      %4 = cir.const #cir.int<5> : !s32i loc(#loc409)
      %5 = cir.cmp(eq, %3, %4) : !s32i, !cir.bool loc(#loc889)
      cir.if %5 {
        cir.scope {
          %6 = cir.alloca !s32i, !cir.ptr<!s32i>, ["recvResult"] {alignment = 4 : i64} loc(#loc892)
          %7 = cir.alloca !ty_sockaddr_in, !cir.ptr<!ty_sockaddr_in>, ["service"] {alignment = 4 : i64} loc(#loc893)
          %8 = cir.alloca !s32i, !cir.ptr<!s32i>, ["connectSocket", init] {alignment = 4 : i64} loc(#loc894)
          %9 = cir.alloca !cir.array<!s8i x 14>, !cir.ptr<!cir.array<!s8i x 14>>, ["inputBuffer"] {alignment = 1 : i64} loc(#loc895)
          %10 = cir.const #cir.int<1> : !s32i loc(#loc418)
          %11 = cir.unary(minus, %10) : !s32i, !s32i loc(#loc418)
          cir.store %11, %8 : !s32i, !cir.ptr<!s32i> loc(#loc894)
          cir.scope {
            cir.do {
              %12 = cir.const #cir.int<2> : !s32i loc(#loc423)
              %13 = cir.const #cir.int<1> : !s32i loc(#loc424)
              %14 = cir.const #cir.int<6> : !s32i loc(#loc425)
              %15 = cir.call @socket(%12, %13, %14) : (!s32i, !s32i, !s32i) -> !s32i extra(#fn_attr) loc(#loc426)
              cir.store %15, %8 : !s32i, !cir.ptr<!s32i> loc(#loc897)
              cir.scope {
                %54 = cir.load %8 : !cir.ptr<!s32i>, !s32i loc(#loc431)
                %55 = cir.const #cir.int<1> : !s32i loc(#loc432)
                %56 = cir.unary(minus, %55) : !s32i, !s32i loc(#loc432)
                %57 = cir.cmp(eq, %54, %56) : !s32i, !cir.bool loc(#loc899)
                cir.if %57 {
                  cir.break loc(#loc434)
                } loc(#loc900)
              } loc(#loc898)
              %16 = cir.cast(bitcast, %7 : !cir.ptr<!ty_sockaddr_in>), !cir.ptr<!void> loc(#loc901)
              %17 = cir.const #cir.int<0> : !s32i loc(#loc437)
              %18 = cir.const #cir.int<16> : !u64i loc(#loc902)
              cir.libc.memset %18 bytes from %16 set to %17 : !cir.ptr<!void>, !s32i, !u64i loc(#loc903)
              %19 = cir.const #cir.int<2> : !s32i loc(#loc442)
              %20 = cir.cast(integral, %19 : !s32i), !u16i loc(#loc442)
              %21 = cir.get_member %7[0] {name = "sin_family"} : !cir.ptr<!ty_sockaddr_in> -> !cir.ptr<!u16i> loc(#loc71)
              cir.store %20, %21 : !u16i, !cir.ptr<!u16i> loc(#loc904)
              %22 = cir.get_global @".str" : !cir.ptr<!cir.array<!s8i x 10>> loc(#loc444)
              %23 = cir.cast(array_to_ptrdecay, %22 : !cir.ptr<!cir.array<!s8i x 10>>), !cir.ptr<!s8i> loc(#loc444)
              %24 = cir.call @inet_addr(%23) : (!cir.ptr<!s8i>) -> !u32i extra(#fn_attr) loc(#loc445)
              %25 = cir.get_member %7[2] {name = "sin_addr"} : !cir.ptr<!ty_sockaddr_in> -> !cir.ptr<!ty_in_addr> loc(#loc74)
              %26 = cir.get_member %25[0] {name = "s_addr"} : !cir.ptr<!ty_in_addr> -> !cir.ptr<!u32i> loc(#loc75)
              cir.store %24, %26 : !u32i, !cir.ptr<!u32i> loc(#loc905)
              %27 = cir.const #cir.int<27015> : !s32i loc(#loc448)
              %28 = cir.cast(integral, %27 : !s32i), !u16i loc(#loc448)
              %29 = cir.call @htons(%28) : (!u16i) -> !u16i extra(#fn_attr) loc(#loc449)
              %30 = cir.get_member %7[1] {name = "sin_port"} : !cir.ptr<!ty_sockaddr_in> -> !cir.ptr<!u16i> loc(#loc80)
              cir.store %29, %30 : !u16i, !cir.ptr<!u16i> loc(#loc906)
              cir.scope {
                %54 = cir.load %8 : !cir.ptr<!s32i>, !s32i loc(#loc454)
                %55 = cir.cast(bitcast, %7 : !cir.ptr<!ty_sockaddr_in>), !cir.ptr<!ty_sockaddr> loc(#loc908)
                %56 = cir.const #cir.int<16> : !u64i loc(#loc909)
                %57 = cir.cast(integral, %56 : !u64i), !u32i loc(#loc909)
                %58 = cir.call @connect(%54, %55, %57) : (!s32i, !cir.ptr<!ty_sockaddr>, !u32i) -> !s32i loc(#loc459)
                %59 = cir.const #cir.int<1> : !s32i loc(#loc460)
                %60 = cir.unary(minus, %59) : !s32i, !s32i loc(#loc460)
                %61 = cir.cmp(eq, %58, %60) : !s32i, !cir.bool loc(#loc910)
                cir.if %61 {
                  cir.break loc(#loc462)
                } loc(#loc911)
              } loc(#loc907)
              %31 = cir.load %8 : !cir.ptr<!s32i>, !s32i loc(#loc463)
              %32 = cir.cast(array_to_ptrdecay, %9 : !cir.ptr<!cir.array<!s8i x 14>>), !cir.ptr<!s8i> loc(#loc464)
              %33 = cir.cast(bitcast, %32 : !cir.ptr<!s8i>), !cir.ptr<!void> loc(#loc464)
              %34 = cir.const #cir.int<3> : !s32i loc(#loc465)
              %35 = cir.cast(integral, %34 : !s32i), !u64i loc(#loc465)
              %36 = cir.const #cir.int<4> : !u64i loc(#loc465)
              %37 = cir.binop(mul, %35, %36) : !u64i loc(#loc465)
              %38 = cir.const #cir.int<2> : !s32i loc(#loc465)
              %39 = cir.cast(integral, %38 : !s32i), !u64i loc(#loc465)
              %40 = cir.binop(add, %37, %39) : !u64i loc(#loc465)
              %41 = cir.const #cir.int<1> : !s32i loc(#loc466)
              %42 = cir.cast(integral, %41 : !s32i), !u64i loc(#loc466)
              %43 = cir.binop(sub, %40, %42) : !u64i loc(#loc912)
              %44 = cir.const #cir.int<0> : !s32i loc(#loc467)
              %45 = cir.call @recv(%31, %33, %43, %44) : (!s32i, !cir.ptr<!void>, !u64i, !s32i) -> !s64i loc(#loc468)
              %46 = cir.cast(integral, %45 : !s64i), !s32i loc(#loc468)
              cir.store %46, %6 : !s32i, !cir.ptr<!s32i> loc(#loc913)
              cir.scope {
                %54 = cir.load %6 : !cir.ptr<!s32i>, !s32i loc(#loc473)
                %55 = cir.const #cir.int<1> : !s32i loc(#loc474)
                %56 = cir.unary(minus, %55) : !s32i, !s32i loc(#loc474)
                %57 = cir.cmp(eq, %54, %56) : !s32i, !cir.bool loc(#loc915)
                %58 = cir.ternary(%57, true {
                  %59 = cir.const #true loc(#loc475)
                  cir.yield %59 : !cir.bool loc(#loc475)
                }, false {
                  %59 = cir.load %6 : !cir.ptr<!s32i>, !s32i loc(#loc476)
                  %60 = cir.const #cir.int<0> : !s32i loc(#loc477)
                  %61 = cir.cmp(eq, %59, %60) : !s32i, !cir.bool loc(#loc916)
                  %62 = cir.ternary(%61, true {
                    %63 = cir.const #true loc(#loc475)
                    cir.yield %63 : !cir.bool loc(#loc475)
                  }, false {
                    %63 = cir.const #false loc(#loc475)
                    cir.yield %63 : !cir.bool loc(#loc475)
                  }) : (!cir.bool) -> !cir.bool loc(#loc475)
                  cir.yield %62 : !cir.bool loc(#loc475)
                }) : (!cir.bool) -> !cir.bool loc(#loc475)
                cir.if %58 {
                  cir.break loc(#loc479)
                } loc(#loc917)
              } loc(#loc914)
              %47 = cir.const #cir.int<0> : !s32i loc(#loc480)
              %48 = cir.cast(integral, %47 : !s32i), !s8i loc(#loc480)
              %49 = cir.load %6 : !cir.ptr<!s32i>, !s32i loc(#loc481)
              %50 = cir.cast(array_to_ptrdecay, %9 : !cir.ptr<!cir.array<!s8i x 14>>), !cir.ptr<!s8i> loc(#loc482)
              %51 = cir.ptr_stride(%50 : !cir.ptr<!s8i>, %49 : !s32i), !cir.ptr<!s8i> loc(#loc482)
              cir.store %48, %51 : !s8i, !cir.ptr<!s8i> loc(#loc918)
              %52 = cir.cast(array_to_ptrdecay, %9 : !cir.ptr<!cir.array<!s8i x 14>>), !cir.ptr<!s8i> loc(#loc483)
              %53 = cir.call @atoi(%52) : (!cir.ptr<!s8i>) -> !s32i extra(#fn_attr) loc(#loc484)
              cir.store %53, %0 : !s32i, !cir.ptr<!s32i> loc(#loc919)
              cir.yield loc(#loc422)
            } while {
              %12 = cir.const #cir.int<0> : !s32i loc(#loc487)
              %13 = cir.cast(int_to_bool, %12 : !s32i), !cir.bool loc(#loc487)
              cir.condition(%13) loc(#loc487)
            } loc(#loc896)
          } loc(#loc896)
          cir.scope {
            %12 = cir.load %8 : !cir.ptr<!s32i>, !s32i loc(#loc490)
            %13 = cir.const #cir.int<1> : !s32i loc(#loc491)
            %14 = cir.unary(minus, %13) : !s32i, !s32i loc(#loc491)
            %15 = cir.cmp(ne, %12, %14) : !s32i, !cir.bool loc(#loc921)
            cir.if %15 {
              %16 = cir.load %8 : !cir.ptr<!s32i>, !s32i loc(#loc493)
              %17 = cir.call @close(%16) : (!s32i) -> !s32i loc(#loc494)
            } loc(#loc922)
          } loc(#loc920)
        } loc(#loc891)
      } loc(#loc890)
    } loc(#loc888)
    cir.scope {
      %3 = cir.const #cir.int<5> : !s32i loc(#loc497)
      %4 = cir.const #cir.int<5> : !s32i loc(#loc498)
      %5 = cir.cmp(eq, %3, %4) : !s32i, !cir.bool loc(#loc924)
      cir.if %5 {
        cir.scope {
          %6 = cir.alloca !s32i, !cir.ptr<!s32i>, ["i"] {alignment = 4 : i64} loc(#loc927)
          %7 = cir.alloca !cir.ptr<!s32i>, !cir.ptr<!cir.ptr<!s32i>>, ["buffer", init] {alignment = 8 : i64} loc(#loc928)
          %8 = cir.get_global @malloc : !cir.ptr<!cir.func<!cir.ptr<!void> (!u64i)>> loc(#loc506)
          %9 = cir.const #cir.int<10> : !s32i loc(#loc507)
          %10 = cir.cast(integral, %9 : !s32i), !u64i loc(#loc507)
          %11 = cir.const #cir.int<4> : !u64i loc(#loc929)
          %12 = cir.binop(mul, %10, %11) : !u64i loc(#loc930)
          %13 = cir.call @malloc(%12) : (!u64i) -> !cir.ptr<!void> extra(#fn_attr) loc(#loc506)
          %14 = cir.cast(bitcast, %13 : !cir.ptr<!void>), !cir.ptr<!s32i> loc(#loc931)
          cir.store %14, %7 : !cir.ptr<!s32i>, !cir.ptr<!cir.ptr<!s32i>> loc(#loc928)
          cir.scope {
            %18 = cir.load %7 : !cir.ptr<!cir.ptr<!s32i>>, !cir.ptr<!s32i> loc(#loc512)
            %19 = cir.const #cir.ptr<null> : !cir.ptr<!void> loc(#loc513)
            %20 = cir.cast(bitcast, %19 : !cir.ptr<!void>), !cir.ptr<!s32i> loc(#loc513)
            %21 = cir.cmp(eq, %18, %20) : !cir.ptr<!s32i>, !cir.bool loc(#loc933)
            cir.if %21 {
              %22 = cir.get_global @exit : !cir.ptr<!cir.func<!void (!s32i)>> loc(#loc515)
              %23 = cir.const #cir.int<1> : !s32i loc(#loc516)
              %24 = cir.unary(minus, %23) : !s32i, !s32i loc(#loc517)
              cir.call @exit(%24) : (!s32i) -> () extra(#fn_attr) loc(#loc515)
            } loc(#loc934)
          } loc(#loc932)
          cir.scope {
            %18 = cir.const #cir.int<0> : !s32i loc(#loc520)
            cir.store %18, %6 : !s32i, !cir.ptr<!s32i> loc(#loc936)
            cir.for : cond {
              %19 = cir.load %6 : !cir.ptr<!s32i>, !s32i loc(#loc522)
              %20 = cir.const #cir.int<10> : !s32i loc(#loc523)
              %21 = cir.cmp(lt, %19, %20) : !s32i, !cir.bool loc(#loc937)
              cir.condition(%21) loc(#loc524)
            } body {
              cir.scope {
                %19 = cir.const #cir.int<0> : !s32i loc(#loc526)
                %20 = cir.load %7 : !cir.ptr<!cir.ptr<!s32i>>, !cir.ptr<!s32i> loc(#loc527)
                %21 = cir.load %6 : !cir.ptr<!s32i>, !s32i loc(#loc528)
                %22 = cir.ptr_stride(%20 : !cir.ptr<!s32i>, %21 : !s32i), !cir.ptr<!s32i> loc(#loc529)
                cir.store %19, %22 : !s32i, !cir.ptr<!s32i> loc(#loc939)
              } loc(#loc938)
              cir.yield loc(#loc519)
            } step {
              %19 = cir.load %6 : !cir.ptr<!s32i>, !s32i loc(#loc530)
              %20 = cir.unary(inc, %19) : !s32i, !s32i loc(#loc531)
              cir.store %20, %6 : !s32i, !cir.ptr<!s32i> loc(#loc940)
              cir.yield loc(#loc935)
            } loc(#loc935)
          } loc(#loc935)
          cir.scope {
            %18 = cir.load %0 : !cir.ptr<!s32i>, !s32i loc(#loc534)
            %19 = cir.const #cir.int<0> : !s32i loc(#loc535)
            %20 = cir.cmp(ge, %18, %19) : !s32i, !cir.bool loc(#loc942)
            %21 = cir.ternary(%20, true {
              %22 = cir.load %0 : !cir.ptr<!s32i>, !s32i loc(#loc537)
              %23 = cir.const #cir.int<10> : !s32i loc(#loc538)
              %24 = cir.cmp(lt, %22, %23) : !s32i, !cir.bool loc(#loc943)
              %25 = cir.ternary(%24, true {
                %26 = cir.const #true loc(#loc536)
                cir.yield %26 : !cir.bool loc(#loc536)
              }, false {
                %26 = cir.const #false loc(#loc536)
                cir.yield %26 : !cir.bool loc(#loc536)
              }) : (!cir.bool) -> !cir.bool loc(#loc536)
              cir.yield %25 : !cir.bool loc(#loc536)
            }, false {
              %22 = cir.const #false loc(#loc536)
              cir.yield %22 : !cir.bool loc(#loc536)
            }) : (!cir.bool) -> !cir.bool loc(#loc536)
            cir.if %21 {
              %22 = cir.const #cir.int<1> : !s32i loc(#loc543)
              %23 = cir.load %7 : !cir.ptr<!cir.ptr<!s32i>>, !cir.ptr<!s32i> loc(#loc544)
              %24 = cir.load %0 : !cir.ptr<!s32i>, !s32i loc(#loc545)
              %25 = cir.ptr_stride(%23 : !cir.ptr<!s32i>, %24 : !s32i), !cir.ptr<!s32i> loc(#loc546)
              cir.store %22, %25 : !s32i, !cir.ptr<!s32i> loc(#loc945)
              cir.scope {
                %26 = cir.const #cir.int<0> : !s32i loc(#loc549)
                cir.store %26, %6 : !s32i, !cir.ptr<!s32i> loc(#loc947)
                cir.for : cond {
                  %27 = cir.load %6 : !cir.ptr<!s32i>, !s32i loc(#loc551)
                  %28 = cir.const #cir.int<10> : !s32i loc(#loc552)
                  %29 = cir.cmp(lt, %27, %28) : !s32i, !cir.bool loc(#loc948)
                  cir.condition(%29) loc(#loc553)
                } body {
                  cir.scope {
                    %27 = cir.load %7 : !cir.ptr<!cir.ptr<!s32i>>, !cir.ptr<!s32i> loc(#loc555)
                    %28 = cir.load %6 : !cir.ptr<!s32i>, !s32i loc(#loc556)
                    %29 = cir.ptr_stride(%27 : !cir.ptr<!s32i>, %28 : !s32i), !cir.ptr<!s32i> loc(#loc557)
                    %30 = cir.load %29 : !cir.ptr<!s32i>, !s32i loc(#loc555)
                    cir.call @printIntLine(%30) : (!s32i) -> () loc(#loc558)
                  } loc(#loc949)
                  cir.yield loc(#loc548)
                } step {
                  %27 = cir.load %6 : !cir.ptr<!s32i>, !s32i loc(#loc559)
                  %28 = cir.unary(inc, %27) : !s32i, !s32i loc(#loc560)
                  cir.store %28, %6 : !s32i, !cir.ptr<!s32i> loc(#loc950)
                  cir.yield loc(#loc946)
                } loc(#loc946)
              } loc(#loc946)
            } else {
              %22 = cir.get_global @".str.7" : !cir.ptr<!cir.array<!s8i x 36>> loc(#loc561)
              %23 = cir.cast(array_to_ptrdecay, %22 : !cir.ptr<!cir.array<!s8i x 36>>), !cir.ptr<!s8i> loc(#loc561)
              cir.call @printLine(%23) : (!cir.ptr<!s8i>) -> () loc(#loc562)
            } loc(#loc944)
          } loc(#loc941)
          %15 = cir.get_global @free : !cir.ptr<!cir.func<!void (!cir.ptr<!void>)>> loc(#loc563)
          %16 = cir.load %7 : !cir.ptr<!cir.ptr<!s32i>>, !cir.ptr<!s32i> loc(#loc564)
          %17 = cir.cast(bitcast, %16 : !cir.ptr<!s32i>), !cir.ptr<!void> loc(#loc564)
          cir.call @free(%17) : (!cir.ptr<!void>) -> () extra(#fn_attr) loc(#loc563)
        } loc(#loc926)
      } loc(#loc925)
    } loc(#loc923)
    cir.return loc(#loc400)
  } loc(#loc885)
  cir.func no_proto internal private @goodG2B1() extra(#fn_attr1) {
    %0 = cir.alloca !s32i, !cir.ptr<!s32i>, ["data"] {alignment = 4 : i64} loc(#loc952)
    %1 = cir.const #cir.int<1> : !s32i loc(#loc569)
    %2 = cir.unary(minus, %1) : !s32i, !s32i loc(#loc570)
    cir.store %2, %0 : !s32i, !cir.ptr<!s32i> loc(#loc953)
    cir.scope {
      %3 = cir.const #cir.int<5> : !s32i loc(#loc574)
      %4 = cir.const #cir.int<5> : !s32i loc(#loc575)
      %5 = cir.cmp(ne, %3, %4) : !s32i, !cir.bool loc(#loc955)
      cir.if %5 {
        %6 = cir.get_global @".str.6" : !cir.ptr<!cir.array<!s8i x 21>> loc(#loc579)
        %7 = cir.cast(array_to_ptrdecay, %6 : !cir.ptr<!cir.array<!s8i x 21>>), !cir.ptr<!s8i> loc(#loc579)
        cir.call @printLine(%7) : (!cir.ptr<!s8i>) -> () loc(#loc580)
      } else {
        %6 = cir.const #cir.int<7> : !s32i loc(#loc581)
        cir.store %6, %0 : !s32i, !cir.ptr<!s32i> loc(#loc957)
      } loc(#loc956)
    } loc(#loc954)
    cir.scope {
      %3 = cir.const #cir.int<5> : !s32i loc(#loc585)
      %4 = cir.const #cir.int<5> : !s32i loc(#loc586)
      %5 = cir.cmp(eq, %3, %4) : !s32i, !cir.bool loc(#loc959)
      cir.if %5 {
        cir.scope {
          %6 = cir.alloca !s32i, !cir.ptr<!s32i>, ["i"] {alignment = 4 : i64} loc(#loc962)
          %7 = cir.alloca !cir.ptr<!s32i>, !cir.ptr<!cir.ptr<!s32i>>, ["buffer", init] {alignment = 8 : i64} loc(#loc963)
          %8 = cir.get_global @malloc : !cir.ptr<!cir.func<!cir.ptr<!void> (!u64i)>> loc(#loc594)
          %9 = cir.const #cir.int<10> : !s32i loc(#loc595)
          %10 = cir.cast(integral, %9 : !s32i), !u64i loc(#loc595)
          %11 = cir.const #cir.int<4> : !u64i loc(#loc964)
          %12 = cir.binop(mul, %10, %11) : !u64i loc(#loc965)
          %13 = cir.call @malloc(%12) : (!u64i) -> !cir.ptr<!void> extra(#fn_attr) loc(#loc594)
          %14 = cir.cast(bitcast, %13 : !cir.ptr<!void>), !cir.ptr<!s32i> loc(#loc966)
          cir.store %14, %7 : !cir.ptr<!s32i>, !cir.ptr<!cir.ptr<!s32i>> loc(#loc963)
          cir.scope {
            %18 = cir.load %7 : !cir.ptr<!cir.ptr<!s32i>>, !cir.ptr<!s32i> loc(#loc600)
            %19 = cir.const #cir.ptr<null> : !cir.ptr<!void> loc(#loc601)
            %20 = cir.cast(bitcast, %19 : !cir.ptr<!void>), !cir.ptr<!s32i> loc(#loc601)
            %21 = cir.cmp(eq, %18, %20) : !cir.ptr<!s32i>, !cir.bool loc(#loc968)
            cir.if %21 {
              %22 = cir.get_global @exit : !cir.ptr<!cir.func<!void (!s32i)>> loc(#loc603)
              %23 = cir.const #cir.int<1> : !s32i loc(#loc604)
              %24 = cir.unary(minus, %23) : !s32i, !s32i loc(#loc605)
              cir.call @exit(%24) : (!s32i) -> () extra(#fn_attr) loc(#loc603)
            } loc(#loc969)
          } loc(#loc967)
          cir.scope {
            %18 = cir.const #cir.int<0> : !s32i loc(#loc608)
            cir.store %18, %6 : !s32i, !cir.ptr<!s32i> loc(#loc971)
            cir.for : cond {
              %19 = cir.load %6 : !cir.ptr<!s32i>, !s32i loc(#loc610)
              %20 = cir.const #cir.int<10> : !s32i loc(#loc611)
              %21 = cir.cmp(lt, %19, %20) : !s32i, !cir.bool loc(#loc972)
              cir.condition(%21) loc(#loc612)
            } body {
              cir.scope {
                %19 = cir.const #cir.int<0> : !s32i loc(#loc614)
                %20 = cir.load %7 : !cir.ptr<!cir.ptr<!s32i>>, !cir.ptr<!s32i> loc(#loc615)
                %21 = cir.load %6 : !cir.ptr<!s32i>, !s32i loc(#loc616)
                %22 = cir.ptr_stride(%20 : !cir.ptr<!s32i>, %21 : !s32i), !cir.ptr<!s32i> loc(#loc617)
                cir.store %19, %22 : !s32i, !cir.ptr<!s32i> loc(#loc974)
              } loc(#loc973)
              cir.yield loc(#loc607)
            } step {
              %19 = cir.load %6 : !cir.ptr<!s32i>, !s32i loc(#loc618)
              %20 = cir.unary(inc, %19) : !s32i, !s32i loc(#loc619)
              cir.store %20, %6 : !s32i, !cir.ptr<!s32i> loc(#loc975)
              cir.yield loc(#loc970)
            } loc(#loc970)
          } loc(#loc970)
          cir.scope {
            %18 = cir.load %0 : !cir.ptr<!s32i>, !s32i loc(#loc622)
            %19 = cir.const #cir.int<0> : !s32i loc(#loc623)
            %20 = cir.cmp(ge, %18, %19) : !s32i, !cir.bool loc(#loc977)
            cir.if %20 {
              %21 = cir.const #cir.int<1> : !s32i loc(#loc627)
              %22 = cir.load %7 : !cir.ptr<!cir.ptr<!s32i>>, !cir.ptr<!s32i> loc(#loc628)
              %23 = cir.load %0 : !cir.ptr<!s32i>, !s32i loc(#loc629)
              %24 = cir.ptr_stride(%22 : !cir.ptr<!s32i>, %23 : !s32i), !cir.ptr<!s32i> loc(#loc630)
              cir.store %21, %24 : !s32i, !cir.ptr<!s32i> loc(#loc979)
              cir.scope {
                %25 = cir.const #cir.int<0> : !s32i loc(#loc633)
                cir.store %25, %6 : !s32i, !cir.ptr<!s32i> loc(#loc981)
                cir.for : cond {
                  %26 = cir.load %6 : !cir.ptr<!s32i>, !s32i loc(#loc635)
                  %27 = cir.const #cir.int<10> : !s32i loc(#loc636)
                  %28 = cir.cmp(lt, %26, %27) : !s32i, !cir.bool loc(#loc982)
                  cir.condition(%28) loc(#loc637)
                } body {
                  cir.scope {
                    %26 = cir.load %7 : !cir.ptr<!cir.ptr<!s32i>>, !cir.ptr<!s32i> loc(#loc639)
                    %27 = cir.load %6 : !cir.ptr<!s32i>, !s32i loc(#loc640)
                    %28 = cir.ptr_stride(%26 : !cir.ptr<!s32i>, %27 : !s32i), !cir.ptr<!s32i> loc(#loc641)
                    %29 = cir.load %28 : !cir.ptr<!s32i>, !s32i loc(#loc639)
                    cir.call @printIntLine(%29) : (!s32i) -> () loc(#loc642)
                  } loc(#loc983)
                  cir.yield loc(#loc632)
                } step {
                  %26 = cir.load %6 : !cir.ptr<!s32i>, !s32i loc(#loc643)
                  %27 = cir.unary(inc, %26) : !s32i, !s32i loc(#loc644)
                  cir.store %27, %6 : !s32i, !cir.ptr<!s32i> loc(#loc984)
                  cir.yield loc(#loc980)
                } loc(#loc980)
              } loc(#loc980)
            } else {
              %21 = cir.get_global @".str.1" : !cir.ptr<!cir.array<!s8i x 32>> loc(#loc645)
              %22 = cir.cast(array_to_ptrdecay, %21 : !cir.ptr<!cir.array<!s8i x 32>>), !cir.ptr<!s8i> loc(#loc645)
              cir.call @printLine(%22) : (!cir.ptr<!s8i>) -> () loc(#loc646)
            } loc(#loc978)
          } loc(#loc976)
          %15 = cir.get_global @free : !cir.ptr<!cir.func<!void (!cir.ptr<!void>)>> loc(#loc647)
          %16 = cir.load %7 : !cir.ptr<!cir.ptr<!s32i>>, !cir.ptr<!s32i> loc(#loc648)
          %17 = cir.cast(bitcast, %16 : !cir.ptr<!s32i>), !cir.ptr<!void> loc(#loc648)
          cir.call @free(%17) : (!cir.ptr<!void>) -> () extra(#fn_attr) loc(#loc647)
        } loc(#loc961)
      } loc(#loc960)
    } loc(#loc958)
    cir.return loc(#loc566)
  } loc(#loc951)
  cir.func no_proto internal private @goodG2B2() extra(#fn_attr1) {
    %0 = cir.alloca !s32i, !cir.ptr<!s32i>, ["data"] {alignment = 4 : i64} loc(#loc986)
    %1 = cir.const #cir.int<1> : !s32i loc(#loc653)
    %2 = cir.unary(minus, %1) : !s32i, !s32i loc(#loc654)
    cir.store %2, %0 : !s32i, !cir.ptr<!s32i> loc(#loc987)
    cir.scope {
      %3 = cir.const #cir.int<5> : !s32i loc(#loc658)
      %4 = cir.const #cir.int<5> : !s32i loc(#loc659)
      %5 = cir.cmp(eq, %3, %4) : !s32i, !cir.bool loc(#loc989)
      cir.if %5 {
        %6 = cir.const #cir.int<7> : !s32i loc(#loc661)
        cir.store %6, %0 : !s32i, !cir.ptr<!s32i> loc(#loc991)
      } loc(#loc990)
    } loc(#loc988)
    cir.scope {
      %3 = cir.const #cir.int<5> : !s32i loc(#loc665)
      %4 = cir.const #cir.int<5> : !s32i loc(#loc666)
      %5 = cir.cmp(eq, %3, %4) : !s32i, !cir.bool loc(#loc993)
      cir.if %5 {
        cir.scope {
          %6 = cir.alloca !s32i, !cir.ptr<!s32i>, ["i"] {alignment = 4 : i64} loc(#loc996)
          %7 = cir.alloca !cir.ptr<!s32i>, !cir.ptr<!cir.ptr<!s32i>>, ["buffer", init] {alignment = 8 : i64} loc(#loc997)
          %8 = cir.get_global @malloc : !cir.ptr<!cir.func<!cir.ptr<!void> (!u64i)>> loc(#loc674)
          %9 = cir.const #cir.int<10> : !s32i loc(#loc675)
          %10 = cir.cast(integral, %9 : !s32i), !u64i loc(#loc675)
          %11 = cir.const #cir.int<4> : !u64i loc(#loc998)
          %12 = cir.binop(mul, %10, %11) : !u64i loc(#loc999)
          %13 = cir.call @malloc(%12) : (!u64i) -> !cir.ptr<!void> extra(#fn_attr) loc(#loc674)
          %14 = cir.cast(bitcast, %13 : !cir.ptr<!void>), !cir.ptr<!s32i> loc(#loc1000)
          cir.store %14, %7 : !cir.ptr<!s32i>, !cir.ptr<!cir.ptr<!s32i>> loc(#loc997)
          cir.scope {
            %18 = cir.load %7 : !cir.ptr<!cir.ptr<!s32i>>, !cir.ptr<!s32i> loc(#loc680)
            %19 = cir.const #cir.ptr<null> : !cir.ptr<!void> loc(#loc681)
            %20 = cir.cast(bitcast, %19 : !cir.ptr<!void>), !cir.ptr<!s32i> loc(#loc681)
            %21 = cir.cmp(eq, %18, %20) : !cir.ptr<!s32i>, !cir.bool loc(#loc1002)
            cir.if %21 {
              %22 = cir.get_global @exit : !cir.ptr<!cir.func<!void (!s32i)>> loc(#loc683)
              %23 = cir.const #cir.int<1> : !s32i loc(#loc684)
              %24 = cir.unary(minus, %23) : !s32i, !s32i loc(#loc685)
              cir.call @exit(%24) : (!s32i) -> () extra(#fn_attr) loc(#loc683)
            } loc(#loc1003)
          } loc(#loc1001)
          cir.scope {
            %18 = cir.const #cir.int<0> : !s32i loc(#loc688)
            cir.store %18, %6 : !s32i, !cir.ptr<!s32i> loc(#loc1005)
            cir.for : cond {
              %19 = cir.load %6 : !cir.ptr<!s32i>, !s32i loc(#loc690)
              %20 = cir.const #cir.int<10> : !s32i loc(#loc691)
              %21 = cir.cmp(lt, %19, %20) : !s32i, !cir.bool loc(#loc1006)
              cir.condition(%21) loc(#loc692)
            } body {
              cir.scope {
                %19 = cir.const #cir.int<0> : !s32i loc(#loc694)
                %20 = cir.load %7 : !cir.ptr<!cir.ptr<!s32i>>, !cir.ptr<!s32i> loc(#loc695)
                %21 = cir.load %6 : !cir.ptr<!s32i>, !s32i loc(#loc696)
                %22 = cir.ptr_stride(%20 : !cir.ptr<!s32i>, %21 : !s32i), !cir.ptr<!s32i> loc(#loc697)
                cir.store %19, %22 : !s32i, !cir.ptr<!s32i> loc(#loc1008)
              } loc(#loc1007)
              cir.yield loc(#loc687)
            } step {
              %19 = cir.load %6 : !cir.ptr<!s32i>, !s32i loc(#loc698)
              %20 = cir.unary(inc, %19) : !s32i, !s32i loc(#loc699)
              cir.store %20, %6 : !s32i, !cir.ptr<!s32i> loc(#loc1009)
              cir.yield loc(#loc1004)
            } loc(#loc1004)
          } loc(#loc1004)
          cir.scope {
            %18 = cir.load %0 : !cir.ptr<!s32i>, !s32i loc(#loc702)
            %19 = cir.const #cir.int<0> : !s32i loc(#loc703)
            %20 = cir.cmp(ge, %18, %19) : !s32i, !cir.bool loc(#loc1011)
            cir.if %20 {
              %21 = cir.const #cir.int<1> : !s32i loc(#loc707)
              %22 = cir.load %7 : !cir.ptr<!cir.ptr<!s32i>>, !cir.ptr<!s32i> loc(#loc708)
              %23 = cir.load %0 : !cir.ptr<!s32i>, !s32i loc(#loc709)
              %24 = cir.ptr_stride(%22 : !cir.ptr<!s32i>, %23 : !s32i), !cir.ptr<!s32i> loc(#loc710)
              cir.store %21, %24 : !s32i, !cir.ptr<!s32i> loc(#loc1013)
              cir.scope {
                %25 = cir.const #cir.int<0> : !s32i loc(#loc713)
                cir.store %25, %6 : !s32i, !cir.ptr<!s32i> loc(#loc1015)
                cir.for : cond {
                  %26 = cir.load %6 : !cir.ptr<!s32i>, !s32i loc(#loc715)
                  %27 = cir.const #cir.int<10> : !s32i loc(#loc716)
                  %28 = cir.cmp(lt, %26, %27) : !s32i, !cir.bool loc(#loc1016)
                  cir.condition(%28) loc(#loc717)
                } body {
                  cir.scope {
                    %26 = cir.load %7 : !cir.ptr<!cir.ptr<!s32i>>, !cir.ptr<!s32i> loc(#loc719)
                    %27 = cir.load %6 : !cir.ptr<!s32i>, !s32i loc(#loc720)
                    %28 = cir.ptr_stride(%26 : !cir.ptr<!s32i>, %27 : !s32i), !cir.ptr<!s32i> loc(#loc721)
                    %29 = cir.load %28 : !cir.ptr<!s32i>, !s32i loc(#loc719)
                    cir.call @printIntLine(%29) : (!s32i) -> () loc(#loc722)
                  } loc(#loc1017)
                  cir.yield loc(#loc712)
                } step {
                  %26 = cir.load %6 : !cir.ptr<!s32i>, !s32i loc(#loc723)
                  %27 = cir.unary(inc, %26) : !s32i, !s32i loc(#loc724)
                  cir.store %27, %6 : !s32i, !cir.ptr<!s32i> loc(#loc1018)
                  cir.yield loc(#loc1014)
                } loc(#loc1014)
              } loc(#loc1014)
            } else {
              %21 = cir.get_global @".str.1" : !cir.ptr<!cir.array<!s8i x 32>> loc(#loc725)
              %22 = cir.cast(array_to_ptrdecay, %21 : !cir.ptr<!cir.array<!s8i x 32>>), !cir.ptr<!s8i> loc(#loc725)
              cir.call @printLine(%22) : (!cir.ptr<!s8i>) -> () loc(#loc726)
            } loc(#loc1012)
          } loc(#loc1010)
          %15 = cir.get_global @free : !cir.ptr<!cir.func<!void (!cir.ptr<!void>)>> loc(#loc727)
          %16 = cir.load %7 : !cir.ptr<!cir.ptr<!s32i>>, !cir.ptr<!s32i> loc(#loc728)
          %17 = cir.cast(bitcast, %16 : !cir.ptr<!s32i>), !cir.ptr<!void> loc(#loc728)
          cir.call @free(%17) : (!cir.ptr<!void>) -> () extra(#fn_attr) loc(#loc727)
        } loc(#loc995)
      } loc(#loc994)
    } loc(#loc992)
    cir.return loc(#loc650)
  } loc(#loc985)
} loc(#loc)
#loc = loc("/home/ladisgin/git_proj/juliet-c/testcases/CWE122_Heap_Based_Buffer_Overflow/s06/CWE122_Heap_Based_Buffer_Overflow__c_CWE129_connect_socket_06.c":0:0)
#loc1 = loc("/usr/include/sys/socket.h":102:1)
#loc2 = loc("/usr/include/sys/socket.h":102:62)
#loc3 = loc("/usr/include/arpa/inet.h":34:1)
#loc4 = loc("/usr/include/arpa/inet.h":34:47)
#loc5 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_connect_socket_06.c":82:53)
#loc6 = loc("/usr/include/netinet/in.h":404:1)
#loc7 = loc("/usr/include/netinet/in.h":405:40)
#loc8 = loc("/usr/include/sys/socket.h":126:1)
#loc9 = loc("/usr/include/sys/socket.h":126:75)
#loc10 = loc("/usr/include/sys/socket.h":145:1)
#loc11 = loc("/usr/include/sys/socket.h":145:68)
#loc12 = loc("/usr/include/stdlib.h":105:1)
#loc13 = loc("/usr/include/stdlib.h":106:33)
#loc14 = loc("/usr/include/unistd.h":358:1)
#loc15 = loc("/usr/include/unistd.h":358:27)
#loc16 = loc("/usr/include/stdlib.h":672:1)
#loc17 = loc("/usr/include/stdlib.h":672:45)
#loc18 = loc("/usr/include/stdlib.h":756:1)
#loc19 = loc("/usr/include/stdlib.h":756:70)
#loc20 = loc("../../../testcasesupport/std_testcase_io.h":18:1)
#loc21 = loc("../../../testcasesupport/std_testcase_io.h":18:33)
#loc22 = loc("../../../testcasesupport/std_testcase_io.h":14:1)
#loc23 = loc("../../../testcasesupport/std_testcase_io.h":14:33)
#loc24 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_connect_socket_06.c":137:27)
#loc25 = loc("/usr/include/stdlib.h":687:1)
#loc26 = loc("/usr/include/stdlib.h":687:32)
#loc27 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_connect_socket_06.c":49:1)
#loc28 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_connect_socket_06.c":142:1)
#loc29 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_connect_socket_06.c":51:5)
#loc30 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_connect_socket_06.c":51:9)
#loc31 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_connect_socket_06.c":53:13)
#loc32 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_connect_socket_06.c":53:12)
#loc33 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_connect_socket_06.c":53:5)
#loc34 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_connect_socket_06.c":54:5)
#loc35 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_connect_socket_06.c":112:5)
#loc36 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_connect_socket_06.c":54:8)
#loc37 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_connect_socket_06.c":54:27)
#loc38 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_connect_socket_06.c":55:5)
#loc39 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_connect_socket_06.c":56:9)
#loc40 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_connect_socket_06.c":111:9)
#loc41 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_connect_socket_06.c":61:13)
#loc42 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_connect_socket_06.c":61:17)
#loc43 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_connect_socket_06.c":62:13)
#loc44 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_connect_socket_06.c":62:32)
#loc45 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_connect_socket_06.c":63:13)
#loc46 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_connect_socket_06.c":63:36)
#loc47 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_connect_socket_06.c":64:13)
#loc48 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_connect_socket_06.c":64:45)
#loc49 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_connect_socket_06.c":65:13)
#loc50 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_connect_socket_06.c":100:21)
#loc51 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_connect_socket_06.c":75:40)
#loc52 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_connect_socket_06.c":75:49)
#loc53 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_connect_socket_06.c":75:62)
#loc54 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_connect_socket_06.c":75:33)
#loc55 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_connect_socket_06.c":75:17)
#loc56 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_connect_socket_06.c":75:73)
#loc57 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_connect_socket_06.c":76:17)
#loc58 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_connect_socket_06.c":79:17)
#loc59 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_connect_socket_06.c":76:21)
#loc60 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_connect_socket_06.c":76:38)
#loc61 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_connect_socket_06.c":77:17)
#loc62 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_connect_socket_06.c":78:21)
#loc63 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_connect_socket_06.c":80:24)
#loc64 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_connect_socket_06.c":80:25)
#loc65 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_connect_socket_06.c":80:34)
#loc66 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_connect_socket_06.c":80:37)
#loc67 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_connect_socket_06.c":80:51)
#loc68 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_connect_socket_06.c":80:17)
#loc69 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_connect_socket_06.c":80:52)
#loc70 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_connect_socket_06.c":81:38)
#loc71 = loc("/usr/include/netinet/in.h":249:5)
#loc72 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_connect_socket_06.c":81:17)
#loc73 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_connect_socket_06.c":82:43)
#loc74 = loc("/usr/include/netinet/in.h":251:20)
#loc75 = loc("/usr/include/netinet/in.h":33:15)
#loc76 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_connect_socket_06.c":82:17)
#loc77 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_connect_socket_06.c":82:63)
#loc78 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_connect_socket_06.c":83:42)
#loc79 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_connect_socket_06.c":83:36)
#loc80 = loc("/usr/include/netinet/in.h":250:15)
#loc81 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_connect_socket_06.c":83:17)
#loc82 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_connect_socket_06.c":83:50)
#loc83 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_connect_socket_06.c":84:17)
#loc84 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_connect_socket_06.c":87:17)
#loc85 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_connect_socket_06.c":84:29)
#loc86 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_connect_socket_06.c":84:62)
#loc87 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_connect_socket_06.c":84:63)
#loc88 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_connect_socket_06.c":84:72)
#loc89 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_connect_socket_06.c":84:86)
#loc90 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_connect_socket_06.c":84:21)
#loc91 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_connect_socket_06.c":84:92)
#loc92 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_connect_socket_06.c":85:17)
#loc93 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_connect_socket_06.c":86:21)
#loc94 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_connect_socket_06.c":90:35)
#loc95 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_connect_socket_06.c":90:50)
#loc96 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_connect_socket_06.c":90:63)
#loc97 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_connect_socket_06.c":90:81)
#loc98 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_connect_socket_06.c":90:84)
#loc99 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_connect_socket_06.c":90:30)
#loc100 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_connect_socket_06.c":90:17)
#loc101 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_connect_socket_06.c":90:85)
#loc102 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_connect_socket_06.c":91:17)
#loc103 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_connect_socket_06.c":94:17)
#loc104 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_connect_socket_06.c":91:21)
#loc105 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_connect_socket_06.c":91:35)
#loc106 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_connect_socket_06.c":91:48)
#loc107 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_connect_socket_06.c":91:51)
#loc108 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_connect_socket_06.c":91:65)
#loc109 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_connect_socket_06.c":92:17)
#loc110 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_connect_socket_06.c":93:21)
#loc111 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_connect_socket_06.c":96:43)
#loc112 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_connect_socket_06.c":96:29)
#loc113 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_connect_socket_06.c":96:17)
#loc114 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_connect_socket_06.c":98:29)
#loc115 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_connect_socket_06.c":98:24)
#loc116 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_connect_socket_06.c":98:17)
#loc117 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_connect_socket_06.c":98:40)
#loc118 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_connect_socket_06.c":100:20)
#loc119 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_connect_socket_06.c":101:13)
#loc120 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_connect_socket_06.c":104:13)
#loc121 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_connect_socket_06.c":101:17)
#loc122 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_connect_socket_06.c":101:34)
#loc123 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_connect_socket_06.c":102:13)
#loc124 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_connect_socket_06.c":103:30)
#loc125 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_connect_socket_06.c":103:17)
#loc126 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_connect_socket_06.c":113:5)
#loc127 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_connect_socket_06.c":141:5)
#loc128 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_connect_socket_06.c":113:8)
#loc129 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_connect_socket_06.c":113:27)
#loc130 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_connect_socket_06.c":114:5)
#loc131 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_connect_socket_06.c":115:9)
#loc132 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_connect_socket_06.c":140:9)
#loc133 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_connect_socket_06.c":116:13)
#loc134 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_connect_socket_06.c":116:17)
#loc135 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_connect_socket_06.c":117:13)
#loc136 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_connect_socket_06.c":117:58)
#loc137 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_connect_socket_06.c":117:35)
#loc138 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_connect_socket_06.c":117:42)
#loc139 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_connect_socket_06.c":117:47)
#loc140 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_connect_socket_06.c":117:57)
#loc141 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_connect_socket_06.c":118:13)
#loc142 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_connect_socket_06.c":118:43)
#loc143 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_connect_socket_06.c":118:17)
#loc144 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_connect_socket_06.c":118:27)
#loc145 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_connect_socket_06.c":118:33)
#loc146 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_connect_socket_06.c":118:34)
#loc147 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_connect_socket_06.c":118:40)
#loc148 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_connect_socket_06.c":118:39)
#loc149 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_connect_socket_06.c":120:13)
#loc150 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_connect_socket_06.c":123:13)
#loc151 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_connect_socket_06.c":120:22)
#loc152 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_connect_socket_06.c":120:18)
#loc153 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_connect_socket_06.c":120:25)
#loc154 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_connect_socket_06.c":120:29)
#loc155 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_connect_socket_06.c":120:27)
#loc156 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_connect_socket_06.c":121:13)
#loc157 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_connect_socket_06.c":122:29)
#loc158 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_connect_socket_06.c":122:17)
#loc159 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_connect_socket_06.c":122:24)
#loc160 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_connect_socket_06.c":122:25)
#loc161 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_connect_socket_06.c":120:34)
#loc162 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_connect_socket_06.c":120:33)
#loc163 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_connect_socket_06.c":126:13)
#loc164 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_connect_socket_06.c":138:13)
#loc165 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_connect_socket_06.c":126:17)
#loc166 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_connect_socket_06.c":126:25)
#loc167 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_connect_socket_06.c":127:13)
#loc168 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_connect_socket_06.c":134:13)
#loc169 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_connect_socket_06.c":136:13)
#loc170 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_connect_socket_06.c":128:32)
#loc171 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_connect_socket_06.c":128:17)
#loc172 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_connect_socket_06.c":128:24)
#loc173 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_connect_socket_06.c":128:28)
#loc174 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_connect_socket_06.c":130:17)
#loc175 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_connect_socket_06.c":133:17)
#loc176 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_connect_socket_06.c":130:25)
#loc177 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_connect_socket_06.c":130:21)
#loc178 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_connect_socket_06.c":130:28)
#loc179 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_connect_socket_06.c":130:32)
#loc180 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_connect_socket_06.c":130:30)
#loc181 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_connect_socket_06.c":131:17)
#loc182 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_connect_socket_06.c":132:34)
#loc183 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_connect_socket_06.c":132:41)
#loc184 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_connect_socket_06.c":132:42)
#loc185 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_connect_socket_06.c":132:21)
#loc186 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_connect_socket_06.c":130:37)
#loc187 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_connect_socket_06.c":130:36)
#loc188 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_connect_socket_06.c":137:17)
#loc189 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_connect_socket_06.c":139:13)
#loc190 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_connect_socket_06.c":139:18)
#loc191 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_connect_socket_06.c":434:1)
#loc192 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_connect_socket_06.c":440:1)
#loc193 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_connect_socket_06.c":436:5)
#loc194 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_connect_socket_06.c":436:14)
#loc195 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_connect_socket_06.c":437:5)
#loc196 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_connect_socket_06.c":437:14)
#loc197 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_connect_socket_06.c":438:5)
#loc198 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_connect_socket_06.c":438:14)
#loc199 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_connect_socket_06.c":439:5)
#loc200 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_connect_socket_06.c":439:14)
#loc201 = loc("/usr/include/stdlib.h":575:1)
#loc202 = loc("/usr/include/stdlib.h":575:41)
#loc203 = loc("/usr/include/time.h":76:1)
#loc204 = loc("/usr/include/time.h":76:38)
#loc205 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_connect_socket_06.c":456:15)
#loc206 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_connect_socket_06.c":458:15)
#loc207 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_connect_socket_06.c":461:15)
#loc208 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_connect_socket_06.c":463:15)
#loc209 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_connect_socket_06.c":451:1)
#loc210 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_connect_socket_06.c":466:1)
#loc215 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_connect_socket_06.c":452:1)
#loc216 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_connect_socket_06.c":454:27)
#loc217 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_connect_socket_06.c":454:22)
#loc218 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_connect_socket_06.c":454:5)
#loc219 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_connect_socket_06.c":456:5)
#loc220 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_connect_socket_06.c":457:5)
#loc221 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_connect_socket_06.c":457:72)
#loc222 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_connect_socket_06.c":458:5)
#loc223 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_connect_socket_06.c":461:5)
#loc224 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_connect_socket_06.c":462:5)
#loc225 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_connect_socket_06.c":462:71)
#loc226 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_connect_socket_06.c":463:5)
#loc227 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_connect_socket_06.c":465:12)
#loc228 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_connect_socket_06.c":465:5)
#loc229 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_connect_socket_06.c":216:19)
#loc230 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_connect_socket_06.c":241:27)
#loc231 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_connect_socket_06.c":149:1)
#loc232 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_connect_socket_06.c":246:1)
#loc233 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_connect_socket_06.c":151:5)
#loc234 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_connect_socket_06.c":151:9)
#loc235 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_connect_socket_06.c":153:13)
#loc236 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_connect_socket_06.c":153:12)
#loc237 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_connect_socket_06.c":153:5)
#loc238 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_connect_socket_06.c":154:5)
#loc239 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_connect_socket_06.c":212:5)
#loc240 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_connect_socket_06.c":154:8)
#loc241 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_connect_socket_06.c":154:27)
#loc242 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_connect_socket_06.c":155:5)
#loc243 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_connect_socket_06.c":156:9)
#loc244 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_connect_socket_06.c":211:9)
#loc245 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_connect_socket_06.c":161:13)
#loc246 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_connect_socket_06.c":161:17)
#loc247 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_connect_socket_06.c":162:13)
#loc248 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_connect_socket_06.c":162:32)
#loc249 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_connect_socket_06.c":163:13)
#loc250 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_connect_socket_06.c":163:36)
#loc251 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_connect_socket_06.c":164:13)
#loc252 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_connect_socket_06.c":164:45)
#loc253 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_connect_socket_06.c":165:13)
#loc254 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_connect_socket_06.c":200:21)
#loc255 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_connect_socket_06.c":175:40)
#loc256 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_connect_socket_06.c":175:49)
#loc257 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_connect_socket_06.c":175:62)
#loc258 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_connect_socket_06.c":175:33)
#loc259 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_connect_socket_06.c":175:17)
#loc260 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_connect_socket_06.c":175:73)
#loc261 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_connect_socket_06.c":176:17)
#loc262 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_connect_socket_06.c":179:17)
#loc263 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_connect_socket_06.c":176:21)
#loc264 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_connect_socket_06.c":176:38)
#loc265 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_connect_socket_06.c":177:17)
#loc266 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_connect_socket_06.c":178:21)
#loc267 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_connect_socket_06.c":180:24)
#loc268 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_connect_socket_06.c":180:25)
#loc269 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_connect_socket_06.c":180:34)
#loc270 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_connect_socket_06.c":180:37)
#loc271 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_connect_socket_06.c":180:51)
#loc272 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_connect_socket_06.c":180:17)
#loc273 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_connect_socket_06.c":180:52)
#loc274 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_connect_socket_06.c":181:38)
#loc275 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_connect_socket_06.c":181:17)
#loc276 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_connect_socket_06.c":182:53)
#loc277 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_connect_socket_06.c":182:43)
#loc278 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_connect_socket_06.c":182:17)
#loc279 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_connect_socket_06.c":182:63)
#loc280 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_connect_socket_06.c":183:42)
#loc281 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_connect_socket_06.c":183:36)
#loc282 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_connect_socket_06.c":183:17)
#loc283 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_connect_socket_06.c":183:50)
#loc284 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_connect_socket_06.c":184:17)
#loc285 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_connect_socket_06.c":187:17)
#loc286 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_connect_socket_06.c":184:29)
#loc287 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_connect_socket_06.c":184:62)
#loc288 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_connect_socket_06.c":184:63)
#loc289 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_connect_socket_06.c":184:72)
#loc290 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_connect_socket_06.c":184:86)
#loc291 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_connect_socket_06.c":184:21)
#loc292 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_connect_socket_06.c":184:92)
#loc293 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_connect_socket_06.c":185:17)
#loc294 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_connect_socket_06.c":186:21)
#loc295 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_connect_socket_06.c":190:35)
#loc296 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_connect_socket_06.c":190:50)
#loc297 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_connect_socket_06.c":190:63)
#loc298 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_connect_socket_06.c":190:81)
#loc299 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_connect_socket_06.c":190:84)
#loc300 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_connect_socket_06.c":190:30)
#loc301 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_connect_socket_06.c":190:17)
#loc302 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_connect_socket_06.c":190:85)
#loc303 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_connect_socket_06.c":191:17)
#loc304 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_connect_socket_06.c":194:17)
#loc305 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_connect_socket_06.c":191:21)
#loc306 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_connect_socket_06.c":191:35)
#loc307 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_connect_socket_06.c":191:48)
#loc308 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_connect_socket_06.c":191:51)
#loc309 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_connect_socket_06.c":191:65)
#loc310 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_connect_socket_06.c":192:17)
#loc311 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_connect_socket_06.c":193:21)
#loc312 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_connect_socket_06.c":196:43)
#loc313 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_connect_socket_06.c":196:29)
#loc314 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_connect_socket_06.c":196:17)
#loc315 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_connect_socket_06.c":198:29)
#loc316 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_connect_socket_06.c":198:24)
#loc317 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_connect_socket_06.c":198:17)
#loc318 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_connect_socket_06.c":198:40)
#loc319 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_connect_socket_06.c":200:20)
#loc320 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_connect_socket_06.c":201:13)
#loc321 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_connect_socket_06.c":204:13)
#loc322 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_connect_socket_06.c":201:17)
#loc323 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_connect_socket_06.c":201:34)
#loc324 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_connect_socket_06.c":202:13)
#loc325 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_connect_socket_06.c":203:30)
#loc326 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_connect_socket_06.c":203:17)
#loc327 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_connect_socket_06.c":213:5)
#loc328 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_connect_socket_06.c":245:5)
#loc329 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_connect_socket_06.c":213:8)
#loc330 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_connect_socket_06.c":213:27)
#loc331 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_connect_socket_06.c":214:5)
#loc332 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_connect_socket_06.c":217:5)
#loc333 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_connect_socket_06.c":219:5)
#loc334 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_connect_socket_06.c":216:9)
#loc335 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_connect_socket_06.c":220:9)
#loc336 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_connect_socket_06.c":244:9)
#loc337 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_connect_socket_06.c":221:13)
#loc338 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_connect_socket_06.c":221:17)
#loc339 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_connect_socket_06.c":222:13)
#loc340 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_connect_socket_06.c":222:58)
#loc341 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_connect_socket_06.c":222:35)
#loc342 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_connect_socket_06.c":222:42)
#loc343 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_connect_socket_06.c":222:47)
#loc344 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_connect_socket_06.c":222:57)
#loc345 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_connect_socket_06.c":223:13)
#loc346 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_connect_socket_06.c":223:43)
#loc347 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_connect_socket_06.c":223:17)
#loc348 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_connect_socket_06.c":223:27)
#loc349 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_connect_socket_06.c":223:33)
#loc350 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_connect_socket_06.c":223:34)
#loc351 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_connect_socket_06.c":223:40)
#loc352 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_connect_socket_06.c":223:39)
#loc353 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_connect_socket_06.c":225:13)
#loc354 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_connect_socket_06.c":228:13)
#loc355 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_connect_socket_06.c":225:22)
#loc356 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_connect_socket_06.c":225:18)
#loc357 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_connect_socket_06.c":225:25)
#loc358 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_connect_socket_06.c":225:29)
#loc359 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_connect_socket_06.c":225:27)
#loc360 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_connect_socket_06.c":226:13)
#loc361 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_connect_socket_06.c":227:29)
#loc362 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_connect_socket_06.c":227:17)
#loc363 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_connect_socket_06.c":227:24)
#loc364 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_connect_socket_06.c":227:25)
#loc365 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_connect_socket_06.c":225:34)
#loc366 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_connect_socket_06.c":225:33)
#loc367 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_connect_socket_06.c":230:13)
#loc368 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_connect_socket_06.c":242:13)
#loc369 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_connect_socket_06.c":230:17)
#loc370 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_connect_socket_06.c":230:25)
#loc371 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_connect_socket_06.c":230:27)
#loc372 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_connect_socket_06.c":230:30)
#loc373 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_connect_socket_06.c":230:38)
#loc374 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_connect_socket_06.c":230:40)
#loc375 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_connect_socket_06.c":231:13)
#loc376 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_connect_socket_06.c":238:13)
#loc377 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_connect_socket_06.c":240:13)
#loc378 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_connect_socket_06.c":232:32)
#loc379 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_connect_socket_06.c":232:17)
#loc380 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_connect_socket_06.c":232:24)
#loc381 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_connect_socket_06.c":232:28)
#loc382 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_connect_socket_06.c":234:17)
#loc383 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_connect_socket_06.c":237:17)
#loc384 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_connect_socket_06.c":234:25)
#loc385 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_connect_socket_06.c":234:21)
#loc386 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_connect_socket_06.c":234:28)
#loc387 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_connect_socket_06.c":234:32)
#loc388 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_connect_socket_06.c":234:30)
#loc389 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_connect_socket_06.c":235:17)
#loc390 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_connect_socket_06.c":236:34)
#loc391 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_connect_socket_06.c":236:41)
#loc392 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_connect_socket_06.c":236:42)
#loc393 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_connect_socket_06.c":236:21)
#loc394 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_connect_socket_06.c":234:37)
#loc395 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_connect_socket_06.c":234:36)
#loc396 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_connect_socket_06.c":241:17)
#loc397 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_connect_socket_06.c":243:13)
#loc398 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_connect_socket_06.c":243:18)
#loc399 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_connect_socket_06.c":249:1)
#loc400 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_connect_socket_06.c":341:1)
#loc401 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_connect_socket_06.c":251:5)
#loc402 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_connect_socket_06.c":251:9)
#loc403 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_connect_socket_06.c":253:13)
#loc404 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_connect_socket_06.c":253:12)
#loc405 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_connect_socket_06.c":253:5)
#loc406 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_connect_socket_06.c":254:5)
#loc407 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_connect_socket_06.c":312:5)
#loc408 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_connect_socket_06.c":254:8)
#loc409 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_connect_socket_06.c":254:27)
#loc410 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_connect_socket_06.c":255:5)
#loc411 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_connect_socket_06.c":256:9)
#loc412 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_connect_socket_06.c":311:9)
#loc413 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_connect_socket_06.c":261:13)
#loc414 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_connect_socket_06.c":261:17)
#loc415 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_connect_socket_06.c":262:13)
#loc416 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_connect_socket_06.c":262:32)
#loc417 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_connect_socket_06.c":263:13)
#loc418 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_connect_socket_06.c":263:36)
#loc419 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_connect_socket_06.c":264:13)
#loc420 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_connect_socket_06.c":264:45)
#loc421 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_connect_socket_06.c":265:13)
#loc422 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_connect_socket_06.c":300:21)
#loc423 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_connect_socket_06.c":275:40)
#loc424 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_connect_socket_06.c":275:49)
#loc425 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_connect_socket_06.c":275:62)
#loc426 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_connect_socket_06.c":275:33)
#loc427 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_connect_socket_06.c":275:17)
#loc428 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_connect_socket_06.c":275:73)
#loc429 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_connect_socket_06.c":276:17)
#loc430 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_connect_socket_06.c":279:17)
#loc431 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_connect_socket_06.c":276:21)
#loc432 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_connect_socket_06.c":276:38)
#loc433 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_connect_socket_06.c":277:17)
#loc434 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_connect_socket_06.c":278:21)
#loc435 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_connect_socket_06.c":280:24)
#loc436 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_connect_socket_06.c":280:25)
#loc437 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_connect_socket_06.c":280:34)
#loc438 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_connect_socket_06.c":280:37)
#loc439 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_connect_socket_06.c":280:51)
#loc440 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_connect_socket_06.c":280:17)
#loc441 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_connect_socket_06.c":280:52)
#loc442 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_connect_socket_06.c":281:38)
#loc443 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_connect_socket_06.c":281:17)
#loc444 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_connect_socket_06.c":282:53)
#loc445 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_connect_socket_06.c":282:43)
#loc446 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_connect_socket_06.c":282:17)
#loc447 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_connect_socket_06.c":282:63)
#loc448 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_connect_socket_06.c":283:42)
#loc449 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_connect_socket_06.c":283:36)
#loc450 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_connect_socket_06.c":283:17)
#loc451 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_connect_socket_06.c":283:50)
#loc452 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_connect_socket_06.c":284:17)
#loc453 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_connect_socket_06.c":287:17)
#loc454 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_connect_socket_06.c":284:29)
#loc455 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_connect_socket_06.c":284:62)
#loc456 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_connect_socket_06.c":284:63)
#loc457 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_connect_socket_06.c":284:72)
#loc458 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_connect_socket_06.c":284:86)
#loc459 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_connect_socket_06.c":284:21)
#loc460 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_connect_socket_06.c":284:92)
#loc461 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_connect_socket_06.c":285:17)
#loc462 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_connect_socket_06.c":286:21)
#loc463 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_connect_socket_06.c":290:35)
#loc464 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_connect_socket_06.c":290:50)
#loc465 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_connect_socket_06.c":290:63)
#loc466 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_connect_socket_06.c":290:81)
#loc467 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_connect_socket_06.c":290:84)
#loc468 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_connect_socket_06.c":290:30)
#loc469 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_connect_socket_06.c":290:17)
#loc470 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_connect_socket_06.c":290:85)
#loc471 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_connect_socket_06.c":291:17)
#loc472 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_connect_socket_06.c":294:17)
#loc473 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_connect_socket_06.c":291:21)
#loc474 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_connect_socket_06.c":291:35)
#loc475 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_connect_socket_06.c":291:48)
#loc476 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_connect_socket_06.c":291:51)
#loc477 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_connect_socket_06.c":291:65)
#loc478 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_connect_socket_06.c":292:17)
#loc479 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_connect_socket_06.c":293:21)
#loc480 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_connect_socket_06.c":296:43)
#loc481 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_connect_socket_06.c":296:29)
#loc482 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_connect_socket_06.c":296:17)
#loc483 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_connect_socket_06.c":298:29)
#loc484 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_connect_socket_06.c":298:24)
#loc485 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_connect_socket_06.c":298:17)
#loc486 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_connect_socket_06.c":298:40)
#loc487 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_connect_socket_06.c":300:20)
#loc488 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_connect_socket_06.c":301:13)
#loc489 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_connect_socket_06.c":304:13)
#loc490 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_connect_socket_06.c":301:17)
#loc491 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_connect_socket_06.c":301:34)
#loc492 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_connect_socket_06.c":302:13)
#loc493 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_connect_socket_06.c":303:30)
#loc494 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_connect_socket_06.c":303:17)
#loc495 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_connect_socket_06.c":313:5)
#loc496 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_connect_socket_06.c":340:5)
#loc497 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_connect_socket_06.c":313:8)
#loc498 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_connect_socket_06.c":313:27)
#loc499 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_connect_socket_06.c":314:5)
#loc500 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_connect_socket_06.c":315:9)
#loc501 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_connect_socket_06.c":339:9)
#loc502 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_connect_socket_06.c":316:13)
#loc503 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_connect_socket_06.c":316:17)
#loc504 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_connect_socket_06.c":317:13)
#loc505 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_connect_socket_06.c":317:58)
#loc506 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_connect_socket_06.c":317:35)
#loc507 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_connect_socket_06.c":317:42)
#loc508 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_connect_socket_06.c":317:47)
#loc509 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_connect_socket_06.c":317:57)
#loc510 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_connect_socket_06.c":318:13)
#loc511 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_connect_socket_06.c":318:43)
#loc512 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_connect_socket_06.c":318:17)
#loc513 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_connect_socket_06.c":318:27)
#loc514 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_connect_socket_06.c":318:33)
#loc515 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_connect_socket_06.c":318:34)
#loc516 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_connect_socket_06.c":318:40)
#loc517 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_connect_socket_06.c":318:39)
#loc518 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_connect_socket_06.c":320:13)
#loc519 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_connect_socket_06.c":323:13)
#loc520 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_connect_socket_06.c":320:22)
#loc521 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_connect_socket_06.c":320:18)
#loc522 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_connect_socket_06.c":320:25)
#loc523 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_connect_socket_06.c":320:29)
#loc524 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_connect_socket_06.c":320:27)
#loc525 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_connect_socket_06.c":321:13)
#loc526 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_connect_socket_06.c":322:29)
#loc527 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_connect_socket_06.c":322:17)
#loc528 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_connect_socket_06.c":322:24)
#loc529 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_connect_socket_06.c":322:25)
#loc530 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_connect_socket_06.c":320:34)
#loc531 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_connect_socket_06.c":320:33)
#loc532 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_connect_socket_06.c":325:13)
#loc533 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_connect_socket_06.c":337:13)
#loc534 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_connect_socket_06.c":325:17)
#loc535 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_connect_socket_06.c":325:25)
#loc536 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_connect_socket_06.c":325:27)
#loc537 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_connect_socket_06.c":325:30)
#loc538 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_connect_socket_06.c":325:38)
#loc539 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_connect_socket_06.c":325:40)
#loc540 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_connect_socket_06.c":326:13)
#loc541 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_connect_socket_06.c":333:13)
#loc542 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_connect_socket_06.c":335:13)
#loc543 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_connect_socket_06.c":327:32)
#loc544 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_connect_socket_06.c":327:17)
#loc545 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_connect_socket_06.c":327:24)
#loc546 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_connect_socket_06.c":327:28)
#loc547 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_connect_socket_06.c":329:17)
#loc548 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_connect_socket_06.c":332:17)
#loc549 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_connect_socket_06.c":329:25)
#loc550 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_connect_socket_06.c":329:21)
#loc551 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_connect_socket_06.c":329:28)
#loc552 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_connect_socket_06.c":329:32)
#loc553 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_connect_socket_06.c":329:30)
#loc554 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_connect_socket_06.c":330:17)
#loc555 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_connect_socket_06.c":331:34)
#loc556 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_connect_socket_06.c":331:41)
#loc557 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_connect_socket_06.c":331:42)
#loc558 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_connect_socket_06.c":331:21)
#loc559 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_connect_socket_06.c":329:37)
#loc560 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_connect_socket_06.c":329:36)
#loc561 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_connect_socket_06.c":336:27)
#loc562 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_connect_socket_06.c":336:17)
#loc563 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_connect_socket_06.c":338:13)
#loc564 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_connect_socket_06.c":338:18)
#loc565 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_connect_socket_06.c":344:1)
#loc566 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_connect_socket_06.c":389:1)
#loc567 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_connect_socket_06.c":346:5)
#loc568 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_connect_socket_06.c":346:9)
#loc569 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_connect_socket_06.c":348:13)
#loc570 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_connect_socket_06.c":348:12)
#loc571 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_connect_socket_06.c":348:5)
#loc572 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_connect_socket_06.c":349:5)
#loc573 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_connect_socket_06.c":359:5)
#loc574 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_connect_socket_06.c":349:8)
#loc575 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_connect_socket_06.c":349:27)
#loc576 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_connect_socket_06.c":350:5)
#loc577 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_connect_socket_06.c":353:5)
#loc578 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_connect_socket_06.c":355:5)
#loc579 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_connect_socket_06.c":352:19)
#loc580 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_connect_socket_06.c":352:9)
#loc581 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_connect_socket_06.c":358:16)
#loc582 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_connect_socket_06.c":358:9)
#loc583 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_connect_socket_06.c":360:5)
#loc584 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_connect_socket_06.c":388:5)
#loc585 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_connect_socket_06.c":360:8)
#loc586 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_connect_socket_06.c":360:27)
#loc587 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_connect_socket_06.c":361:5)
#loc588 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_connect_socket_06.c":362:9)
#loc589 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_connect_socket_06.c":387:9)
#loc590 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_connect_socket_06.c":363:13)
#loc591 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_connect_socket_06.c":363:17)
#loc592 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_connect_socket_06.c":364:13)
#loc593 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_connect_socket_06.c":364:58)
#loc594 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_connect_socket_06.c":364:35)
#loc595 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_connect_socket_06.c":364:42)
#loc596 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_connect_socket_06.c":364:47)
#loc597 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_connect_socket_06.c":364:57)
#loc598 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_connect_socket_06.c":365:13)
#loc599 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_connect_socket_06.c":365:43)
#loc600 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_connect_socket_06.c":365:17)
#loc601 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_connect_socket_06.c":365:27)
#loc602 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_connect_socket_06.c":365:33)
#loc603 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_connect_socket_06.c":365:34)
#loc604 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_connect_socket_06.c":365:40)
#loc605 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_connect_socket_06.c":365:39)
#loc606 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_connect_socket_06.c":367:13)
#loc607 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_connect_socket_06.c":370:13)
#loc608 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_connect_socket_06.c":367:22)
#loc609 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_connect_socket_06.c":367:18)
#loc610 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_connect_socket_06.c":367:25)
#loc611 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_connect_socket_06.c":367:29)
#loc612 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_connect_socket_06.c":367:27)
#loc613 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_connect_socket_06.c":368:13)
#loc614 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_connect_socket_06.c":369:29)
#loc615 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_connect_socket_06.c":369:17)
#loc616 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_connect_socket_06.c":369:24)
#loc617 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_connect_socket_06.c":369:25)
#loc618 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_connect_socket_06.c":367:34)
#loc619 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_connect_socket_06.c":367:33)
#loc620 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_connect_socket_06.c":373:13)
#loc621 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_connect_socket_06.c":385:13)
#loc622 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_connect_socket_06.c":373:17)
#loc623 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_connect_socket_06.c":373:25)
#loc624 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_connect_socket_06.c":374:13)
#loc625 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_connect_socket_06.c":381:13)
#loc626 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_connect_socket_06.c":383:13)
#loc627 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_connect_socket_06.c":375:32)
#loc628 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_connect_socket_06.c":375:17)
#loc629 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_connect_socket_06.c":375:24)
#loc630 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_connect_socket_06.c":375:28)
#loc631 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_connect_socket_06.c":377:17)
#loc632 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_connect_socket_06.c":380:17)
#loc633 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_connect_socket_06.c":377:25)
#loc634 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_connect_socket_06.c":377:21)
#loc635 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_connect_socket_06.c":377:28)
#loc636 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_connect_socket_06.c":377:32)
#loc637 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_connect_socket_06.c":377:30)
#loc638 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_connect_socket_06.c":378:17)
#loc639 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_connect_socket_06.c":379:34)
#loc640 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_connect_socket_06.c":379:41)
#loc641 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_connect_socket_06.c":379:42)
#loc642 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_connect_socket_06.c":379:21)
#loc643 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_connect_socket_06.c":377:37)
#loc644 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_connect_socket_06.c":377:36)
#loc645 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_connect_socket_06.c":384:27)
#loc646 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_connect_socket_06.c":384:17)
#loc647 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_connect_socket_06.c":386:13)
#loc648 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_connect_socket_06.c":386:18)
#loc649 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_connect_socket_06.c":392:1)
#loc650 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_connect_socket_06.c":432:1)
#loc651 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_connect_socket_06.c":394:5)
#loc652 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_connect_socket_06.c":394:9)
#loc653 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_connect_socket_06.c":396:13)
#loc654 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_connect_socket_06.c":396:12)
#loc655 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_connect_socket_06.c":396:5)
#loc656 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_connect_socket_06.c":397:5)
#loc657 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_connect_socket_06.c":402:5)
#loc658 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_connect_socket_06.c":397:8)
#loc659 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_connect_socket_06.c":397:27)
#loc660 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_connect_socket_06.c":398:5)
#loc661 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_connect_socket_06.c":401:16)
#loc662 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_connect_socket_06.c":401:9)
#loc663 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_connect_socket_06.c":403:5)
#loc664 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_connect_socket_06.c":431:5)
#loc665 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_connect_socket_06.c":403:8)
#loc666 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_connect_socket_06.c":403:27)
#loc667 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_connect_socket_06.c":404:5)
#loc668 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_connect_socket_06.c":405:9)
#loc669 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_connect_socket_06.c":430:9)
#loc670 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_connect_socket_06.c":406:13)
#loc671 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_connect_socket_06.c":406:17)
#loc672 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_connect_socket_06.c":407:13)
#loc673 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_connect_socket_06.c":407:58)
#loc674 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_connect_socket_06.c":407:35)
#loc675 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_connect_socket_06.c":407:42)
#loc676 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_connect_socket_06.c":407:47)
#loc677 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_connect_socket_06.c":407:57)
#loc678 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_connect_socket_06.c":408:13)
#loc679 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_connect_socket_06.c":408:43)
#loc680 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_connect_socket_06.c":408:17)
#loc681 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_connect_socket_06.c":408:27)
#loc682 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_connect_socket_06.c":408:33)
#loc683 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_connect_socket_06.c":408:34)
#loc684 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_connect_socket_06.c":408:40)
#loc685 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_connect_socket_06.c":408:39)
#loc686 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_connect_socket_06.c":410:13)
#loc687 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_connect_socket_06.c":413:13)
#loc688 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_connect_socket_06.c":410:22)
#loc689 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_connect_socket_06.c":410:18)
#loc690 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_connect_socket_06.c":410:25)
#loc691 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_connect_socket_06.c":410:29)
#loc692 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_connect_socket_06.c":410:27)
#loc693 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_connect_socket_06.c":411:13)
#loc694 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_connect_socket_06.c":412:29)
#loc695 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_connect_socket_06.c":412:17)
#loc696 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_connect_socket_06.c":412:24)
#loc697 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_connect_socket_06.c":412:25)
#loc698 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_connect_socket_06.c":410:34)
#loc699 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_connect_socket_06.c":410:33)
#loc700 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_connect_socket_06.c":416:13)
#loc701 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_connect_socket_06.c":428:13)
#loc702 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_connect_socket_06.c":416:17)
#loc703 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_connect_socket_06.c":416:25)
#loc704 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_connect_socket_06.c":417:13)
#loc705 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_connect_socket_06.c":424:13)
#loc706 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_connect_socket_06.c":426:13)
#loc707 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_connect_socket_06.c":418:32)
#loc708 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_connect_socket_06.c":418:17)
#loc709 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_connect_socket_06.c":418:24)
#loc710 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_connect_socket_06.c":418:28)
#loc711 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_connect_socket_06.c":420:17)
#loc712 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_connect_socket_06.c":423:17)
#loc713 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_connect_socket_06.c":420:25)
#loc714 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_connect_socket_06.c":420:21)
#loc715 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_connect_socket_06.c":420:28)
#loc716 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_connect_socket_06.c":420:32)
#loc717 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_connect_socket_06.c":420:30)
#loc718 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_connect_socket_06.c":421:17)
#loc719 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_connect_socket_06.c":422:34)
#loc720 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_connect_socket_06.c":422:41)
#loc721 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_connect_socket_06.c":422:42)
#loc722 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_connect_socket_06.c":422:21)
#loc723 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_connect_socket_06.c":420:37)
#loc724 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_connect_socket_06.c":420:36)
#loc725 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_connect_socket_06.c":427:27)
#loc726 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_connect_socket_06.c":427:17)
#loc727 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_connect_socket_06.c":429:13)
#loc728 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_connect_socket_06.c":429:18)
#loc729 = loc(fused[#loc1, #loc2])
#loc730 = loc(fused[#loc3, #loc4])
#loc731 = loc(fused[#loc6, #loc7])
#loc732 = loc(fused[#loc8, #loc9])
#loc733 = loc(fused[#loc10, #loc11])
#loc734 = loc(fused[#loc12, #loc13])
#loc735 = loc(fused[#loc14, #loc15])
#loc736 = loc(fused[#loc16, #loc17])
#loc737 = loc(fused[#loc18, #loc19])
#loc738 = loc(fused[#loc20, #loc21])
#loc739 = loc(fused[#loc22, #loc23])
#loc740 = loc(fused[#loc25, #loc26])
#loc741 = loc(fused[#loc27, #loc28])
#loc742 = loc(fused[#loc29, #loc30])
#loc743 = loc(fused[#loc33, #loc31])
#loc744 = loc(fused[#loc34, #loc35])
#loc745 = loc(fused[#loc36, #loc37])
#loc746 = loc(fused[#loc38, #loc35])
#loc747 = loc(fused[#loc39, #loc40])
#loc748 = loc(fused[#loc41, #loc42])
#loc749 = loc(fused[#loc43, #loc44])
#loc750 = loc(fused[#loc45, #loc46])
#loc751 = loc(fused[#loc47, #loc48])
#loc752 = loc(fused[#loc49, #loc50])
#loc753 = loc(fused[#loc55, #loc56])
#loc754 = loc(fused[#loc57, #loc58])
#loc755 = loc(fused[#loc59, #loc60])
#loc756 = loc(fused[#loc61, #loc58])
#loc757 = loc(fused[#loc63, #loc64])
#loc758 = loc(fused[#loc66, #loc67])
#loc759 = loc(fused[#loc68, #loc69])
#loc760 = loc(fused[#loc72, #loc70])
#loc761 = loc(fused[#loc76, #loc77])
#loc762 = loc(fused[#loc81, #loc82])
#loc763 = loc(fused[#loc83, #loc84])
#loc764 = loc(fused[#loc86, #loc87])
#loc765 = loc(fused[#loc88, #loc89])
#loc766 = loc(fused[#loc90, #loc91])
#loc767 = loc(fused[#loc92, #loc84])
#loc768 = loc(fused[#loc96, #loc97])
#loc769 = loc(fused[#loc100, #loc101])
#loc770 = loc(fused[#loc102, #loc103])
#loc771 = loc(fused[#loc104, #loc105])
#loc772 = loc(fused[#loc107, #loc108])
#loc773 = loc(fused[#loc109, #loc103])
#loc774 = loc(fused[#loc113, #loc111])
#loc775 = loc(fused[#loc116, #loc117])
#loc776 = loc(fused[#loc119, #loc120])
#loc777 = loc(fused[#loc121, #loc122])
#loc778 = loc(fused[#loc123, #loc120])
#loc779 = loc(fused[#loc126, #loc127])
#loc780 = loc(fused[#loc128, #loc129])
#loc781 = loc(fused[#loc130, #loc127])
#loc782 = loc(fused[#loc131, #loc132])
#loc783 = loc(fused[#loc133, #loc134])
#loc784 = loc(fused[#loc135, #loc136])
#loc785 = loc(fused[#loc139, #loc140])
#loc786 = loc(fused[#loc138, #loc140])
#loc787 = loc(fused[#loc137, #loc136])
#loc788 = loc(fused[#loc141, #loc142])
#loc789 = loc(fused[#loc143, #loc144])
#loc790 = loc(fused[#loc145, #loc142])
#loc791 = loc(fused[#loc149, #loc150])
#loc792 = loc(fused[#loc152, #loc151])
#loc793 = loc(fused[#loc153, #loc154])
#loc794 = loc(fused[#loc156, #loc150])
#loc795 = loc(fused[#loc158, #loc157])
#loc796 = loc(fused[#loc162, #loc161])
#loc797 = loc(fused[#loc163, #loc164])
#loc798 = loc(fused[#loc165, #loc166])
#loc799 = loc(fused[#loc167, #loc168, #loc169, #loc164])
#loc800 = loc(fused[#loc171, #loc170])
#loc801 = loc(fused[#loc174, #loc175])
#loc802 = loc(fused[#loc177, #loc176])
#loc803 = loc(fused[#loc178, #loc179])
#loc804 = loc(fused[#loc181, #loc175])
#loc805 = loc(fused[#loc187, #loc186])
#loc806 = loc(fused[#loc191, #loc192])
#loc807 = loc(fused[#loc193, #loc194])
#loc808 = loc(fused[#loc195, #loc196])
#loc809 = loc(fused[#loc197, #loc198])
#loc810 = loc(fused[#loc199, #loc200])
#loc811 = loc(fused[#loc201, #loc202])
#loc812 = loc(fused[#loc203, #loc204])
#loc813 = loc(fused[#loc209, #loc210])
#loc816 = loc(fused[#loc220, #loc221])
#loc817 = loc(fused[#loc224, #loc225])
#loc818 = loc(fused[#loc228, #loc227])
#loc819 = loc(fused[#loc231, #loc232])
#loc820 = loc(fused[#loc233, #loc234])
#loc821 = loc(fused[#loc237, #loc235])
#loc822 = loc(fused[#loc238, #loc239])
#loc823 = loc(fused[#loc240, #loc241])
#loc824 = loc(fused[#loc242, #loc239])
#loc825 = loc(fused[#loc243, #loc244])
#loc826 = loc(fused[#loc245, #loc246])
#loc827 = loc(fused[#loc247, #loc248])
#loc828 = loc(fused[#loc249, #loc250])
#loc829 = loc(fused[#loc251, #loc252])
#loc830 = loc(fused[#loc253, #loc254])
#loc831 = loc(fused[#loc259, #loc260])
#loc832 = loc(fused[#loc261, #loc262])
#loc833 = loc(fused[#loc263, #loc264])
#loc834 = loc(fused[#loc265, #loc262])
#loc835 = loc(fused[#loc267, #loc268])
#loc836 = loc(fused[#loc270, #loc271])
#loc837 = loc(fused[#loc272, #loc273])
#loc838 = loc(fused[#loc275, #loc274])
#loc839 = loc(fused[#loc278, #loc279])
#loc840 = loc(fused[#loc282, #loc283])
#loc841 = loc(fused[#loc284, #loc285])
#loc842 = loc(fused[#loc287, #loc288])
#loc843 = loc(fused[#loc289, #loc290])
#loc844 = loc(fused[#loc291, #loc292])
#loc845 = loc(fused[#loc293, #loc285])
#loc846 = loc(fused[#loc297, #loc298])
#loc847 = loc(fused[#loc301, #loc302])
#loc848 = loc(fused[#loc303, #loc304])
#loc849 = loc(fused[#loc305, #loc306])
#loc850 = loc(fused[#loc308, #loc309])
#loc851 = loc(fused[#loc310, #loc304])
#loc852 = loc(fused[#loc314, #loc312])
#loc853 = loc(fused[#loc317, #loc318])
#loc854 = loc(fused[#loc320, #loc321])
#loc855 = loc(fused[#loc322, #loc323])
#loc856 = loc(fused[#loc324, #loc321])
#loc857 = loc(fused[#loc327, #loc328])
#loc858 = loc(fused[#loc329, #loc330])
#loc859 = loc(fused[#loc331, #loc332, #loc333, #loc328])
#loc860 = loc(fused[#loc335, #loc336])
#loc861 = loc(fused[#loc337, #loc338])
#loc862 = loc(fused[#loc339, #loc340])
#loc863 = loc(fused[#loc343, #loc344])
#loc864 = loc(fused[#loc342, #loc344])
#loc865 = loc(fused[#loc341, #loc340])
#loc866 = loc(fused[#loc345, #loc346])
#loc867 = loc(fused[#loc347, #loc348])
#loc868 = loc(fused[#loc349, #loc346])
#loc869 = loc(fused[#loc353, #loc354])
#loc870 = loc(fused[#loc356, #loc355])
#loc871 = loc(fused[#loc357, #loc358])
#loc872 = loc(fused[#loc360, #loc354])
#loc873 = loc(fused[#loc362, #loc361])
#loc874 = loc(fused[#loc366, #loc365])
#loc875 = loc(fused[#loc367, #loc368])
#loc876 = loc(fused[#loc369, #loc370])
#loc877 = loc(fused[#loc372, #loc374])
#loc878 = loc(fused[#loc375, #loc376, #loc377, #loc368])
#loc879 = loc(fused[#loc379, #loc378])
#loc880 = loc(fused[#loc382, #loc383])
#loc881 = loc(fused[#loc385, #loc384])
#loc882 = loc(fused[#loc386, #loc387])
#loc883 = loc(fused[#loc389, #loc383])
#loc884 = loc(fused[#loc395, #loc394])
#loc885 = loc(fused[#loc399, #loc400])
#loc886 = loc(fused[#loc401, #loc402])
#loc887 = loc(fused[#loc405, #loc403])
#loc888 = loc(fused[#loc406, #loc407])
#loc889 = loc(fused[#loc408, #loc409])
#loc890 = loc(fused[#loc410, #loc407])
#loc891 = loc(fused[#loc411, #loc412])
#loc892 = loc(fused[#loc413, #loc414])
#loc893 = loc(fused[#loc415, #loc416])
#loc894 = loc(fused[#loc417, #loc418])
#loc895 = loc(fused[#loc419, #loc420])
#loc896 = loc(fused[#loc421, #loc422])
#loc897 = loc(fused[#loc427, #loc428])
#loc898 = loc(fused[#loc429, #loc430])
#loc899 = loc(fused[#loc431, #loc432])
#loc900 = loc(fused[#loc433, #loc430])
#loc901 = loc(fused[#loc435, #loc436])
#loc902 = loc(fused[#loc438, #loc439])
#loc903 = loc(fused[#loc440, #loc441])
#loc904 = loc(fused[#loc443, #loc442])
#loc905 = loc(fused[#loc446, #loc447])
#loc906 = loc(fused[#loc450, #loc451])
#loc907 = loc(fused[#loc452, #loc453])
#loc908 = loc(fused[#loc455, #loc456])
#loc909 = loc(fused[#loc457, #loc458])
#loc910 = loc(fused[#loc459, #loc460])
#loc911 = loc(fused[#loc461, #loc453])
#loc912 = loc(fused[#loc465, #loc466])
#loc913 = loc(fused[#loc469, #loc470])
#loc914 = loc(fused[#loc471, #loc472])
#loc915 = loc(fused[#loc473, #loc474])
#loc916 = loc(fused[#loc476, #loc477])
#loc917 = loc(fused[#loc478, #loc472])
#loc918 = loc(fused[#loc482, #loc480])
#loc919 = loc(fused[#loc485, #loc486])
#loc920 = loc(fused[#loc488, #loc489])
#loc921 = loc(fused[#loc490, #loc491])
#loc922 = loc(fused[#loc492, #loc489])
#loc923 = loc(fused[#loc495, #loc496])
#loc924 = loc(fused[#loc497, #loc498])
#loc925 = loc(fused[#loc499, #loc496])
#loc926 = loc(fused[#loc500, #loc501])
#loc927 = loc(fused[#loc502, #loc503])
#loc928 = loc(fused[#loc504, #loc505])
#loc929 = loc(fused[#loc508, #loc509])
#loc930 = loc(fused[#loc507, #loc509])
#loc931 = loc(fused[#loc506, #loc505])
#loc932 = loc(fused[#loc510, #loc511])
#loc933 = loc(fused[#loc512, #loc513])
#loc934 = loc(fused[#loc514, #loc511])
#loc935 = loc(fused[#loc518, #loc519])
#loc936 = loc(fused[#loc521, #loc520])
#loc937 = loc(fused[#loc522, #loc523])
#loc938 = loc(fused[#loc525, #loc519])
#loc939 = loc(fused[#loc527, #loc526])
#loc940 = loc(fused[#loc531, #loc530])
#loc941 = loc(fused[#loc532, #loc533])
#loc942 = loc(fused[#loc534, #loc535])
#loc943 = loc(fused[#loc537, #loc539])
#loc944 = loc(fused[#loc540, #loc541, #loc542, #loc533])
#loc945 = loc(fused[#loc544, #loc543])
#loc946 = loc(fused[#loc547, #loc548])
#loc947 = loc(fused[#loc550, #loc549])
#loc948 = loc(fused[#loc551, #loc552])
#loc949 = loc(fused[#loc554, #loc548])
#loc950 = loc(fused[#loc560, #loc559])
#loc951 = loc(fused[#loc565, #loc566])
#loc952 = loc(fused[#loc567, #loc568])
#loc953 = loc(fused[#loc571, #loc569])
#loc954 = loc(fused[#loc572, #loc573])
#loc955 = loc(fused[#loc574, #loc575])
#loc956 = loc(fused[#loc576, #loc577, #loc578, #loc573])
#loc957 = loc(fused[#loc582, #loc581])
#loc958 = loc(fused[#loc583, #loc584])
#loc959 = loc(fused[#loc585, #loc586])
#loc960 = loc(fused[#loc587, #loc584])
#loc961 = loc(fused[#loc588, #loc589])
#loc962 = loc(fused[#loc590, #loc591])
#loc963 = loc(fused[#loc592, #loc593])
#loc964 = loc(fused[#loc596, #loc597])
#loc965 = loc(fused[#loc595, #loc597])
#loc966 = loc(fused[#loc594, #loc593])
#loc967 = loc(fused[#loc598, #loc599])
#loc968 = loc(fused[#loc600, #loc601])
#loc969 = loc(fused[#loc602, #loc599])
#loc970 = loc(fused[#loc606, #loc607])
#loc971 = loc(fused[#loc609, #loc608])
#loc972 = loc(fused[#loc610, #loc611])
#loc973 = loc(fused[#loc613, #loc607])
#loc974 = loc(fused[#loc615, #loc614])
#loc975 = loc(fused[#loc619, #loc618])
#loc976 = loc(fused[#loc620, #loc621])
#loc977 = loc(fused[#loc622, #loc623])
#loc978 = loc(fused[#loc624, #loc625, #loc626, #loc621])
#loc979 = loc(fused[#loc628, #loc627])
#loc980 = loc(fused[#loc631, #loc632])
#loc981 = loc(fused[#loc634, #loc633])
#loc982 = loc(fused[#loc635, #loc636])
#loc983 = loc(fused[#loc638, #loc632])
#loc984 = loc(fused[#loc644, #loc643])
#loc985 = loc(fused[#loc649, #loc650])
#loc986 = loc(fused[#loc651, #loc652])
#loc987 = loc(fused[#loc655, #loc653])
#loc988 = loc(fused[#loc656, #loc657])
#loc989 = loc(fused[#loc658, #loc659])
#loc990 = loc(fused[#loc660, #loc657])
#loc991 = loc(fused[#loc662, #loc661])
#loc992 = loc(fused[#loc663, #loc664])
#loc993 = loc(fused[#loc665, #loc666])
#loc994 = loc(fused[#loc667, #loc664])
#loc995 = loc(fused[#loc668, #loc669])
#loc996 = loc(fused[#loc670, #loc671])
#loc997 = loc(fused[#loc672, #loc673])
#loc998 = loc(fused[#loc676, #loc677])
#loc999 = loc(fused[#loc675, #loc677])
#loc1000 = loc(fused[#loc674, #loc673])
#loc1001 = loc(fused[#loc678, #loc679])
#loc1002 = loc(fused[#loc680, #loc681])
#loc1003 = loc(fused[#loc682, #loc679])
#loc1004 = loc(fused[#loc686, #loc687])
#loc1005 = loc(fused[#loc689, #loc688])
#loc1006 = loc(fused[#loc690, #loc691])
#loc1007 = loc(fused[#loc693, #loc687])
#loc1008 = loc(fused[#loc695, #loc694])
#loc1009 = loc(fused[#loc699, #loc698])
#loc1010 = loc(fused[#loc700, #loc701])
#loc1011 = loc(fused[#loc702, #loc703])
#loc1012 = loc(fused[#loc704, #loc705, #loc706, #loc701])
#loc1013 = loc(fused[#loc708, #loc707])
#loc1014 = loc(fused[#loc711, #loc712])
#loc1015 = loc(fused[#loc714, #loc713])
#loc1016 = loc(fused[#loc715, #loc716])
#loc1017 = loc(fused[#loc718, #loc712])
#loc1018 = loc(fused[#loc724, #loc723])
