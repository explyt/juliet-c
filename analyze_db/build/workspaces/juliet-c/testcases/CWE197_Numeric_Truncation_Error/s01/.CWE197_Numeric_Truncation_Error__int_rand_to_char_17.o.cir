!s32i = !cir.int<s, 32>
!s8i = !cir.int<s, 8>
!u32i = !cir.int<u, 32>
#fn_attr = #cir<extra({nothrow = #cir.nothrow})>
#fn_attr1 = #cir<extra({inline = #cir.inline<no>, nothrow = #cir.nothrow, optnone = #cir.optnone, uwtable = #cir.uwtable<async>})>
module @"/workspaces/juliet-c/testcases/CWE197_Numeric_Truncation_Error/s01/CWE197_Numeric_Truncation_Error__int_rand_to_char_17.c" attributes {cir.lang = #cir.lang<c>, cir.sob = #cir.signed_overflow_behavior<undefined>, cir.triple = "x86_64-unknown-linux-gnu", cir.type_size_info = #cir.type_size_info<char = 8, int = 32, size_t = 64>, cir.uwtable = #cir.uwtable<async>, dlti.dl_spec = #dlti.dl_spec<i8 = dense<8> : vector<2xi64>, i1 = dense<8> : vector<2xi64>, !llvm.ptr<270> = dense<32> : vector<4xi64>, i16 = dense<16> : vector<2xi64>, f80 = dense<128> : vector<2xi64>, !llvm.ptr = dense<64> : vector<4xi64>, !llvm.ptr<272> = dense<64> : vector<4xi64>, !llvm.ptr<271> = dense<32> : vector<4xi64>, i128 = dense<128> : vector<2xi64>, i64 = dense<64> : vector<2xi64>, f64 = dense<64> : vector<2xi64>, f128 = dense<128> : vector<2xi64>, i32 = dense<32> : vector<2xi64>, f16 = dense<16> : vector<2xi64>, "dlti.mangling_mode" = "e", "dlti.stack_alignment" = 128 : i64, "dlti.endianness" = "little">} {
  cir.func private @rand() -> !s32i extra(#fn_attr) loc(#loc64)
  cir.func private @printHexCharLine(!s8i) loc(#loc65)
  cir.func no_proto @CWE197_Numeric_Truncation_Error__int_rand_to_char_17_bad() extra(#fn_attr1) {
    %0 = cir.alloca !s32i, !cir.ptr<!s32i>, ["i"] {alignment = 4 : i64} loc(#loc67)
    %1 = cir.alloca !s32i, !cir.ptr<!s32i>, ["data"] {alignment = 4 : i64} loc(#loc68)
    %2 = cir.const #cir.int<1> : !s32i loc(#loc11)
    %3 = cir.unary(minus, %2) nsw : !s32i, !s32i loc(#loc12)
    cir.store %3, %1 : !s32i, !cir.ptr<!s32i> loc(#loc69)
    cir.scope {
      %4 = cir.const #cir.int<0> : !s32i loc(#loc16)
      cir.store %4, %0 : !s32i, !cir.ptr<!s32i> loc(#loc71)
      cir.for : cond {
        %5 = cir.load %0 : !cir.ptr<!s32i>, !s32i loc(#loc18)
        %6 = cir.const #cir.int<1> : !s32i loc(#loc19)
        %7 = cir.cmp(lt, %5, %6) : !s32i, !cir.bool loc(#loc72)
        cir.condition(%7) loc(#loc20)
      } body {
        cir.scope {
          %5 = cir.call @rand() : () -> !s32i extra(#fn_attr) loc(#loc22)
          %6 = cir.const #cir.int<1> : !s32i loc(#loc22)
          %7 = cir.binop(and, %5, %6) : !s32i loc(#loc22)
          %8 = cir.cast(int_to_bool, %7 : !s32i), !cir.bool loc(#loc22)
          %9 = cir.ternary(%8, true {
            %11 = cir.call @rand() : () -> !s32i extra(#fn_attr) loc(#loc22)
            %12 = cir.cast(integral, %11 : !s32i), !u32i loc(#loc22)
            %13 = cir.const #cir.int<30> : !s32i loc(#loc22)
            %14 = cir.shift(left, %12 : !u32i, %13 : !s32i) -> !u32i loc(#loc22)
            %15 = cir.call @rand() : () -> !s32i extra(#fn_attr) loc(#loc22)
            %16 = cir.cast(integral, %15 : !s32i), !u32i loc(#loc22)
            %17 = cir.const #cir.int<15> : !s32i loc(#loc22)
            %18 = cir.shift(left, %16 : !u32i, %17 : !s32i) -> !u32i loc(#loc22)
            %19 = cir.binop(xor, %14, %18) : !u32i loc(#loc22)
            %20 = cir.call @rand() : () -> !s32i extra(#fn_attr) loc(#loc22)
            %21 = cir.cast(integral, %20 : !s32i), !u32i loc(#loc22)
            %22 = cir.binop(xor, %19, %21) : !u32i loc(#loc22)
            cir.yield %22 : !u32i loc(#loc22)
          }, false {
            %11 = cir.call @rand() : () -> !s32i extra(#fn_attr) loc(#loc22)
            %12 = cir.cast(integral, %11 : !s32i), !u32i loc(#loc22)
            %13 = cir.const #cir.int<30> : !s32i loc(#loc22)
            %14 = cir.shift(left, %12 : !u32i, %13 : !s32i) -> !u32i loc(#loc22)
            %15 = cir.call @rand() : () -> !s32i extra(#fn_attr) loc(#loc22)
            %16 = cir.cast(integral, %15 : !s32i), !u32i loc(#loc22)
            %17 = cir.const #cir.int<15> : !s32i loc(#loc22)
            %18 = cir.shift(left, %16 : !u32i, %17 : !s32i) -> !u32i loc(#loc22)
            %19 = cir.binop(xor, %14, %18) : !u32i loc(#loc22)
            %20 = cir.call @rand() : () -> !s32i extra(#fn_attr) loc(#loc22)
            %21 = cir.cast(integral, %20 : !s32i), !u32i loc(#loc22)
            %22 = cir.binop(xor, %19, %21) : !u32i loc(#loc22)
            %23 = cir.unary(minus, %22) : !u32i, !u32i loc(#loc22)
            %24 = cir.const #cir.int<1> : !s32i loc(#loc22)
            %25 = cir.cast(integral, %24 : !s32i), !u32i loc(#loc22)
            %26 = cir.binop(sub, %23, %25) : !u32i loc(#loc22)
            cir.yield %26 : !u32i loc(#loc22)
          }) : (!cir.bool) -> !u32i loc(#loc22)
          %10 = cir.cast(integral, %9 : !u32i), !s32i loc(#loc22)
          cir.store %10, %1 : !s32i, !cir.ptr<!s32i> loc(#loc74)
        } loc(#loc73)
        cir.yield loc(#loc15)
      } step {
        %5 = cir.load %0 : !cir.ptr<!s32i>, !s32i loc(#loc24)
        %6 = cir.unary(inc, %5) nsw : !s32i, !s32i loc(#loc25)
        cir.store %6, %0 : !s32i, !cir.ptr<!s32i> loc(#loc75)
        cir.yield loc(#loc70)
      } loc(#loc70)
    } loc(#loc70)
    cir.scope {
      %4 = cir.alloca !s8i, !cir.ptr<!s8i>, ["charData", init] {alignment = 1 : i64} loc(#loc77)
      %5 = cir.load %1 : !cir.ptr<!s32i>, !s32i loc(#loc29)
      %6 = cir.cast(integral, %5 : !s32i), !s8i loc(#loc29)
      cir.store %6, %4 : !s8i, !cir.ptr<!s8i> loc(#loc77)
      %7 = cir.load %4 : !cir.ptr<!s8i>, !s8i loc(#loc30)
      cir.call @printHexCharLine(%7) : (!s8i) -> () loc(#loc31)
    } loc(#loc76)
    cir.return loc(#loc6)
  } loc(#loc66)
  cir.func no_proto @CWE197_Numeric_Truncation_Error__int_rand_to_char_17_good() extra(#fn_attr1) {
    %0 = cir.get_global @goodG2B : !cir.ptr<!cir.func<()>> loc(#loc79)
    cir.call %0() : (!cir.ptr<!cir.func<()>>) -> () loc(#loc34)
    cir.return loc(#loc33)
  } loc(#loc78)
  cir.func no_proto internal private @goodG2B() extra(#fn_attr1) {
    %0 = cir.alloca !s32i, !cir.ptr<!s32i>, ["h"] {alignment = 4 : i64} loc(#loc81)
    %1 = cir.alloca !s32i, !cir.ptr<!s32i>, ["data"] {alignment = 4 : i64} loc(#loc82)
    %2 = cir.const #cir.int<1> : !s32i loc(#loc42)
    %3 = cir.unary(minus, %2) nsw : !s32i, !s32i loc(#loc43)
    cir.store %3, %1 : !s32i, !cir.ptr<!s32i> loc(#loc83)
    cir.scope {
      %4 = cir.const #cir.int<0> : !s32i loc(#loc47)
      cir.store %4, %0 : !s32i, !cir.ptr<!s32i> loc(#loc85)
      cir.for : cond {
        %5 = cir.load %0 : !cir.ptr<!s32i>, !s32i loc(#loc49)
        %6 = cir.const #cir.int<1> : !s32i loc(#loc50)
        %7 = cir.cmp(lt, %5, %6) : !s32i, !cir.bool loc(#loc86)
        cir.condition(%7) loc(#loc51)
      } body {
        cir.scope {
          %5 = cir.const #cir.int<127> : !s32i loc(#loc53)
          %6 = cir.const #cir.int<5> : !s32i loc(#loc54)
          %7 = cir.binop(sub, %5, %6) nsw : !s32i loc(#loc53)
          cir.store %7, %1 : !s32i, !cir.ptr<!s32i> loc(#loc88)
        } loc(#loc87)
        cir.yield loc(#loc46)
      } step {
        %5 = cir.load %0 : !cir.ptr<!s32i>, !s32i loc(#loc56)
        %6 = cir.unary(inc, %5) nsw : !s32i, !s32i loc(#loc57)
        cir.store %6, %0 : !s32i, !cir.ptr<!s32i> loc(#loc89)
        cir.yield loc(#loc84)
      } loc(#loc84)
    } loc(#loc84)
    cir.scope {
      %4 = cir.alloca !s8i, !cir.ptr<!s8i>, ["charData", init] {alignment = 1 : i64} loc(#loc91)
      %5 = cir.load %1 : !cir.ptr<!s32i>, !s32i loc(#loc61)
      %6 = cir.cast(integral, %5 : !s32i), !s8i loc(#loc61)
      cir.store %6, %4 : !s8i, !cir.ptr<!s8i> loc(#loc91)
      %7 = cir.load %4 : !cir.ptr<!s8i>, !s8i loc(#loc62)
      cir.call @printHexCharLine(%7) : (!s8i) -> () loc(#loc63)
    } loc(#loc90)
    cir.return loc(#loc37)
  } loc(#loc80)
} loc(#loc)
#loc = loc("/workspaces/juliet-c/testcases/CWE197_Numeric_Truncation_Error/s01/CWE197_Numeric_Truncation_Error__int_rand_to_char_17.c":0:0)
#loc1 = loc("/usr/include/stdlib.h":573:1)
#loc2 = loc("/usr/include/stdlib.h":573:24)
#loc3 = loc("../../../testcasesupport/std_testcase_io.h":30:1)
#loc4 = loc("../../../testcasesupport/std_testcase_io.h":30:35)
#loc5 = loc("CWE197_Numeric_Truncation_Error__int_rand_to_char_17.c":21:1)
#loc6 = loc("CWE197_Numeric_Truncation_Error__int_rand_to_char_17.c":37:1)
#loc7 = loc("CWE197_Numeric_Truncation_Error__int_rand_to_char_17.c":23:5)
#loc8 = loc("CWE197_Numeric_Truncation_Error__int_rand_to_char_17.c":23:9)
#loc9 = loc("CWE197_Numeric_Truncation_Error__int_rand_to_char_17.c":24:5)
#loc10 = loc("CWE197_Numeric_Truncation_Error__int_rand_to_char_17.c":24:9)
#loc11 = loc("CWE197_Numeric_Truncation_Error__int_rand_to_char_17.c":26:13)
#loc12 = loc("CWE197_Numeric_Truncation_Error__int_rand_to_char_17.c":26:12)
#loc13 = loc("CWE197_Numeric_Truncation_Error__int_rand_to_char_17.c":26:5)
#loc14 = loc("CWE197_Numeric_Truncation_Error__int_rand_to_char_17.c":27:5)
#loc15 = loc("CWE197_Numeric_Truncation_Error__int_rand_to_char_17.c":31:5)
#loc16 = loc("CWE197_Numeric_Truncation_Error__int_rand_to_char_17.c":27:13)
#loc17 = loc("CWE197_Numeric_Truncation_Error__int_rand_to_char_17.c":27:9)
#loc18 = loc("CWE197_Numeric_Truncation_Error__int_rand_to_char_17.c":27:16)
#loc19 = loc("CWE197_Numeric_Truncation_Error__int_rand_to_char_17.c":27:20)
#loc20 = loc("CWE197_Numeric_Truncation_Error__int_rand_to_char_17.c":27:18)
#loc21 = loc("CWE197_Numeric_Truncation_Error__int_rand_to_char_17.c":28:5)
#loc22 = loc("CWE197_Numeric_Truncation_Error__int_rand_to_char_17.c":30:16)
#loc23 = loc("CWE197_Numeric_Truncation_Error__int_rand_to_char_17.c":30:9)
#loc24 = loc("CWE197_Numeric_Truncation_Error__int_rand_to_char_17.c":27:24)
#loc25 = loc("CWE197_Numeric_Truncation_Error__int_rand_to_char_17.c":27:23)
#loc26 = loc("CWE197_Numeric_Truncation_Error__int_rand_to_char_17.c":32:5)
#loc27 = loc("CWE197_Numeric_Truncation_Error__int_rand_to_char_17.c":36:5)
#loc28 = loc("CWE197_Numeric_Truncation_Error__int_rand_to_char_17.c":34:9)
#loc29 = loc("CWE197_Numeric_Truncation_Error__int_rand_to_char_17.c":34:31)
#loc30 = loc("CWE197_Numeric_Truncation_Error__int_rand_to_char_17.c":35:26)
#loc31 = loc("CWE197_Numeric_Truncation_Error__int_rand_to_char_17.c":35:9)
#loc32 = loc("CWE197_Numeric_Truncation_Error__int_rand_to_char_17.c":62:1)
#loc33 = loc("CWE197_Numeric_Truncation_Error__int_rand_to_char_17.c":65:1)
#loc34 = loc("CWE197_Numeric_Truncation_Error__int_rand_to_char_17.c":64:5)
#loc35 = loc("CWE197_Numeric_Truncation_Error__int_rand_to_char_17.c":64:13)
#loc36 = loc("CWE197_Numeric_Truncation_Error__int_rand_to_char_17.c":44:1)
#loc37 = loc("CWE197_Numeric_Truncation_Error__int_rand_to_char_17.c":60:1)
#loc38 = loc("CWE197_Numeric_Truncation_Error__int_rand_to_char_17.c":46:5)
#loc39 = loc("CWE197_Numeric_Truncation_Error__int_rand_to_char_17.c":46:9)
#loc40 = loc("CWE197_Numeric_Truncation_Error__int_rand_to_char_17.c":47:5)
#loc41 = loc("CWE197_Numeric_Truncation_Error__int_rand_to_char_17.c":47:9)
#loc42 = loc("CWE197_Numeric_Truncation_Error__int_rand_to_char_17.c":49:13)
#loc43 = loc("CWE197_Numeric_Truncation_Error__int_rand_to_char_17.c":49:12)
#loc44 = loc("CWE197_Numeric_Truncation_Error__int_rand_to_char_17.c":49:5)
#loc45 = loc("CWE197_Numeric_Truncation_Error__int_rand_to_char_17.c":50:5)
#loc46 = loc("CWE197_Numeric_Truncation_Error__int_rand_to_char_17.c":54:5)
#loc47 = loc("CWE197_Numeric_Truncation_Error__int_rand_to_char_17.c":50:13)
#loc48 = loc("CWE197_Numeric_Truncation_Error__int_rand_to_char_17.c":50:9)
#loc49 = loc("CWE197_Numeric_Truncation_Error__int_rand_to_char_17.c":50:16)
#loc50 = loc("CWE197_Numeric_Truncation_Error__int_rand_to_char_17.c":50:20)
#loc51 = loc("CWE197_Numeric_Truncation_Error__int_rand_to_char_17.c":50:18)
#loc52 = loc("CWE197_Numeric_Truncation_Error__int_rand_to_char_17.c":51:5)
#loc53 = loc("CWE197_Numeric_Truncation_Error__int_rand_to_char_17.c":53:16)
#loc54 = loc("CWE197_Numeric_Truncation_Error__int_rand_to_char_17.c":53:25)
#loc55 = loc("CWE197_Numeric_Truncation_Error__int_rand_to_char_17.c":53:9)
#loc56 = loc("CWE197_Numeric_Truncation_Error__int_rand_to_char_17.c":50:24)
#loc57 = loc("CWE197_Numeric_Truncation_Error__int_rand_to_char_17.c":50:23)
#loc58 = loc("CWE197_Numeric_Truncation_Error__int_rand_to_char_17.c":55:5)
#loc59 = loc("CWE197_Numeric_Truncation_Error__int_rand_to_char_17.c":59:5)
#loc60 = loc("CWE197_Numeric_Truncation_Error__int_rand_to_char_17.c":57:9)
#loc61 = loc("CWE197_Numeric_Truncation_Error__int_rand_to_char_17.c":57:31)
#loc62 = loc("CWE197_Numeric_Truncation_Error__int_rand_to_char_17.c":58:26)
#loc63 = loc("CWE197_Numeric_Truncation_Error__int_rand_to_char_17.c":58:9)
#loc64 = loc(fused[#loc1, #loc2])
#loc65 = loc(fused[#loc3, #loc4])
#loc66 = loc(fused[#loc5, #loc6])
#loc67 = loc(fused[#loc7, #loc8])
#loc68 = loc(fused[#loc9, #loc10])
#loc69 = loc(fused[#loc13, #loc11])
#loc70 = loc(fused[#loc14, #loc15])
#loc71 = loc(fused[#loc17, #loc16])
#loc72 = loc(fused[#loc18, #loc19])
#loc73 = loc(fused[#loc21, #loc15])
#loc74 = loc(fused[#loc23, #loc22])
#loc75 = loc(fused[#loc25, #loc24])
#loc76 = loc(fused[#loc26, #loc27])
#loc77 = loc(fused[#loc28, #loc29])
#loc78 = loc(fused[#loc32, #loc33])
#loc79 = loc(fused[#loc34, #loc35])
#loc80 = loc(fused[#loc36, #loc37])
#loc81 = loc(fused[#loc38, #loc39])
#loc82 = loc(fused[#loc40, #loc41])
#loc83 = loc(fused[#loc44, #loc42])
#loc84 = loc(fused[#loc45, #loc46])
#loc85 = loc(fused[#loc48, #loc47])
#loc86 = loc(fused[#loc49, #loc50])
#loc87 = loc(fused[#loc52, #loc46])
#loc88 = loc(fused[#loc55, #loc54])
#loc89 = loc(fused[#loc57, #loc56])
#loc90 = loc(fused[#loc58, #loc59])
#loc91 = loc(fused[#loc60, #loc61])
