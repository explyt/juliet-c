!s32i = !cir.int<s, 32>
!s64i = !cir.int<s, 64>
!s8i = !cir.int<s, 8>
!ty__IO_codecvt = !cir.record<struct "_IO_codecvt" incomplete>
!ty__IO_marker = !cir.record<struct "_IO_marker" incomplete>
!ty__IO_wide_data = !cir.record<struct "_IO_wide_data" incomplete>
!u16i = !cir.int<u, 16>
!u64i = !cir.int<u, 64>
!void = !cir.void
#fn_attr = #cir<extra({inline = #cir.inline<no>, nothrow = #cir.nothrow, optnone = #cir.optnone, uwtable = #cir.uwtable<async>})>
#fn_attr1 = #cir<extra({nothrow = #cir.nothrow})>
!ty__IO_FILE = !cir.record<struct "_IO_FILE" {!s32i, !cir.ptr<!s8i>, !cir.ptr<!s8i>, !cir.ptr<!s8i>, !cir.ptr<!s8i>, !cir.ptr<!s8i>, !cir.ptr<!s8i>, !cir.ptr<!s8i>, !cir.ptr<!s8i>, !cir.ptr<!s8i>, !cir.ptr<!s8i>, !cir.ptr<!s8i>, !cir.ptr<!ty__IO_marker>, !cir.ptr<!cir.record<struct "_IO_FILE">>, !s32i, !s32i, !s64i, !u16i, !s8i, !cir.array<!s8i x 1>, !cir.ptr<!void>, !s64i, !cir.ptr<!ty__IO_codecvt>, !cir.ptr<!ty__IO_wide_data>, !cir.ptr<!cir.record<struct "_IO_FILE">>, !cir.ptr<!void>, !u64i, !s32i, !cir.array<!s8i x 20>} #cir.record.decl.ast>
module @"/workspaces/juliet-c/testcases/CWE190_Integer_Overflow/s01/CWE190_Integer_Overflow__char_fscanf_square_03.c" attributes {cir.lang = #cir.lang<c>, cir.sob = #cir.signed_overflow_behavior<undefined>, cir.triple = "x86_64-unknown-linux-gnu", cir.type_size_info = #cir.type_size_info<char = 8, int = 32, size_t = 64>, cir.uwtable = #cir.uwtable<async>, dlti.dl_spec = #dlti.dl_spec<i8 = dense<8> : vector<2xi64>, i1 = dense<8> : vector<2xi64>, !llvm.ptr = dense<64> : vector<4xi64>, f80 = dense<128> : vector<2xi64>, i128 = dense<128> : vector<2xi64>, i64 = dense<64> : vector<2xi64>, !llvm.ptr<272> = dense<64> : vector<4xi64>, !llvm.ptr<271> = dense<32> : vector<4xi64>, f128 = dense<128> : vector<2xi64>, f64 = dense<64> : vector<2xi64>, f16 = dense<16> : vector<2xi64>, !llvm.ptr<270> = dense<32> : vector<4xi64>, i32 = dense<32> : vector<2xi64>, i16 = dense<16> : vector<2xi64>, "dlti.endianness" = "little", "dlti.stack_alignment" = 128 : i64, "dlti.mangling_mode" = "e">} {
  cir.func private @__isoc99_fscanf(!cir.ptr<!ty__IO_FILE>, !cir.ptr<!s8i>, ...) -> !s32i loc(#loc176)
  cir.global "private" external @stdin : !cir.ptr<!ty__IO_FILE> {alignment = 8 : i64} loc(#loc177)
  cir.global "private" constant cir_private dsolocal @".str" = #cir.const_array<"%c\00" : !cir.array<!s8i x 3>> : !cir.array<!s8i x 3> {alignment = 1 : i64} loc(#loc5)
  cir.func private @printHexCharLine(!s8i) loc(#loc178)
  cir.func no_proto @CWE190_Integer_Overflow__char_fscanf_square_03_bad() extra(#fn_attr) {
    %0 = cir.alloca !s8i, !cir.ptr<!s8i>, ["data"] {alignment = 1 : i64} loc(#loc180)
    %1 = cir.const #cir.int<32> : !s32i loc(#loc12)
    %2 = cir.cast(integral, %1 : !s32i), !s8i loc(#loc12)
    cir.store %2, %0 : !s8i, !cir.ptr<!s8i> loc(#loc181)
    cir.scope {
      %3 = cir.const #cir.int<5> : !s32i loc(#loc16)
      %4 = cir.const #cir.int<5> : !s32i loc(#loc17)
      %5 = cir.cmp(eq, %3, %4) : !s32i, !cir.bool loc(#loc183)
      cir.if %5 {
        %6 = cir.get_global @__isoc99_fscanf : !cir.ptr<!cir.func<(!cir.ptr<!ty__IO_FILE>, !cir.ptr<!s8i>, ...) -> !s32i>> loc(#loc19)
        %7 = cir.get_global @stdin : !cir.ptr<!cir.ptr<!ty__IO_FILE>> loc(#loc177)
        %8 = cir.load %7 : !cir.ptr<!cir.ptr<!ty__IO_FILE>>, !cir.ptr<!ty__IO_FILE> loc(#loc20)
        %9 = cir.get_global @".str" : !cir.ptr<!cir.array<!s8i x 3>> loc(#loc5)
        %10 = cir.cast(array_to_ptrdecay, %9 : !cir.ptr<!cir.array<!s8i x 3>>), !cir.ptr<!s8i> loc(#loc5)
        %11 = cir.call @__isoc99_fscanf(%8, %10, %0) : (!cir.ptr<!ty__IO_FILE>, !cir.ptr<!s8i>, !cir.ptr<!s8i>) -> !s32i loc(#loc19)
      } loc(#loc184)
    } loc(#loc182)
    cir.scope {
      %3 = cir.const #cir.int<5> : !s32i loc(#loc23)
      %4 = cir.const #cir.int<5> : !s32i loc(#loc24)
      %5 = cir.cmp(eq, %3, %4) : !s32i, !cir.bool loc(#loc186)
      cir.if %5 {
        cir.scope {
          %6 = cir.alloca !s8i, !cir.ptr<!s8i>, ["result", init] {alignment = 1 : i64} loc(#loc189)
          %7 = cir.load %0 : !cir.ptr<!s8i>, !s8i loc(#loc30)
          %8 = cir.cast(integral, %7 : !s8i), !s32i loc(#loc30)
          %9 = cir.load %0 : !cir.ptr<!s8i>, !s8i loc(#loc29)
          %10 = cir.cast(integral, %9 : !s8i), !s32i loc(#loc29)
          %11 = cir.binop(mul, %8, %10) nsw : !s32i loc(#loc30)
          %12 = cir.cast(integral, %11 : !s32i), !s8i loc(#loc30)
          cir.store %12, %6 : !s8i, !cir.ptr<!s8i> loc(#loc189)
          %13 = cir.load %6 : !cir.ptr<!s8i>, !s8i loc(#loc31)
          cir.call @printHexCharLine(%13) : (!s8i) -> () loc(#loc32)
        } loc(#loc188)
      } loc(#loc187)
    } loc(#loc185)
    cir.return loc(#loc9)
  } loc(#loc179)
  cir.func no_proto @CWE190_Integer_Overflow__char_fscanf_square_03_good() extra(#fn_attr) {
    %0 = cir.get_global @goodB2G1 : !cir.ptr<!cir.func<()>> loc(#loc191)
    cir.call %0() : (!cir.ptr<!cir.func<()>>) -> () loc(#loc35)
    %1 = cir.get_global @goodB2G2 : !cir.ptr<!cir.func<()>> loc(#loc192)
    cir.call %1() : (!cir.ptr<!cir.func<()>>) -> () loc(#loc37)
    %2 = cir.get_global @goodG2B1 : !cir.ptr<!cir.func<()>> loc(#loc193)
    cir.call %2() : (!cir.ptr<!cir.func<()>>) -> () loc(#loc39)
    %3 = cir.get_global @goodG2B2 : !cir.ptr<!cir.func<()>> loc(#loc194)
    cir.call %3() : (!cir.ptr<!cir.func<()>>) -> () loc(#loc41)
    cir.return loc(#loc34)
  } loc(#loc190)
  cir.func private @printLine(!cir.ptr<!s8i>) loc(#loc195)
  cir.global "private" constant cir_private dsolocal @".str.1" = #cir.const_array<"Benign, fixed string\00" : !cir.array<!s8i x 21>> : !cir.array<!s8i x 21> {alignment = 1 : i64} loc(#loc45)
  cir.func private @sqrt(!cir.double) -> !cir.double extra(#fn_attr1) loc(#loc46)
  cir.global "private" constant cir_private dsolocal @".str.2" = #cir.const_array<"data value is too large to perform arithmetic safely.\00" : !cir.array<!s8i x 54>> : !cir.array<!s8i x 54> {alignment = 1 : i64} loc(#loc47)
  cir.func no_proto internal private @goodB2G1() extra(#fn_attr) {
    %0 = cir.alloca !s8i, !cir.ptr<!s8i>, ["data"] {alignment = 1 : i64} loc(#loc197)
    %1 = cir.const #cir.int<32> : !s32i loc(#loc52)
    %2 = cir.cast(integral, %1 : !s32i), !s8i loc(#loc52)
    cir.store %2, %0 : !s8i, !cir.ptr<!s8i> loc(#loc198)
    cir.scope {
      %3 = cir.const #cir.int<5> : !s32i loc(#loc56)
      %4 = cir.const #cir.int<5> : !s32i loc(#loc57)
      %5 = cir.cmp(eq, %3, %4) : !s32i, !cir.bool loc(#loc200)
      cir.if %5 {
        %6 = cir.get_global @__isoc99_fscanf : !cir.ptr<!cir.func<(!cir.ptr<!ty__IO_FILE>, !cir.ptr<!s8i>, ...) -> !s32i>> loc(#loc59)
        %7 = cir.get_global @stdin : !cir.ptr<!cir.ptr<!ty__IO_FILE>> loc(#loc177)
        %8 = cir.load %7 : !cir.ptr<!cir.ptr<!ty__IO_FILE>>, !cir.ptr<!ty__IO_FILE> loc(#loc60)
        %9 = cir.get_global @".str" : !cir.ptr<!cir.array<!s8i x 3>> loc(#loc61)
        %10 = cir.cast(array_to_ptrdecay, %9 : !cir.ptr<!cir.array<!s8i x 3>>), !cir.ptr<!s8i> loc(#loc61)
        %11 = cir.call @__isoc99_fscanf(%8, %10, %0) : (!cir.ptr<!ty__IO_FILE>, !cir.ptr<!s8i>, !cir.ptr<!s8i>) -> !s32i loc(#loc59)
      } loc(#loc201)
    } loc(#loc199)
    cir.scope {
      %3 = cir.const #cir.int<5> : !s32i loc(#loc64)
      %4 = cir.const #cir.int<5> : !s32i loc(#loc65)
      %5 = cir.cmp(ne, %3, %4) : !s32i, !cir.bool loc(#loc203)
      cir.if %5 {
        %6 = cir.get_global @".str.1" : !cir.ptr<!cir.array<!s8i x 21>> loc(#loc45)
        %7 = cir.cast(array_to_ptrdecay, %6 : !cir.ptr<!cir.array<!s8i x 21>>), !cir.ptr<!s8i> loc(#loc45)
        cir.call @printLine(%7) : (!cir.ptr<!s8i>) -> () loc(#loc69)
      } else {
        cir.scope {
          %6 = cir.load %0 : !cir.ptr<!s8i>, !s8i loc(#loc72)
          %7 = cir.cast(integral, %6 : !s8i), !s64i loc(#loc72)
          %8 = cir.cast(integral, %7 : !s64i), !s32i loc(#loc72)
          %9 = cir.abs %8 poison : !s32i loc(#loc73)
          %10 = cir.cast(integral, %9 : !s32i), !s64i loc(#loc73)
          %11 = cir.get_global @sqrt : !cir.ptr<!cir.func<(!cir.double) -> !cir.double>> loc(#loc74)
          %12 = cir.const #cir.int<127> : !s32i loc(#loc75)
          %13 = cir.cast(int_to_float, %12 : !s32i), !cir.double loc(#loc75)
          %14 = cir.call @sqrt(%13) : (!cir.double) -> !cir.double extra(#fn_attr1) loc(#loc74)
          %15 = cir.cast(float_to_int, %14 : !cir.double), !s64i loc(#loc74)
          %16 = cir.cmp(le, %10, %15) : !s64i, !cir.bool loc(#loc206)
          cir.if %16 {
            %17 = cir.alloca !s8i, !cir.ptr<!s8i>, ["result", init] {alignment = 1 : i64} loc(#loc208)
            %18 = cir.load %0 : !cir.ptr<!s8i>, !s8i loc(#loc82)
            %19 = cir.cast(integral, %18 : !s8i), !s32i loc(#loc82)
            %20 = cir.load %0 : !cir.ptr<!s8i>, !s8i loc(#loc81)
            %21 = cir.cast(integral, %20 : !s8i), !s32i loc(#loc81)
            %22 = cir.binop(mul, %19, %21) nsw : !s32i loc(#loc82)
            %23 = cir.cast(integral, %22 : !s32i), !s8i loc(#loc82)
            cir.store %23, %17 : !s8i, !cir.ptr<!s8i> loc(#loc208)
            %24 = cir.load %17 : !cir.ptr<!s8i>, !s8i loc(#loc83)
            cir.call @printHexCharLine(%24) : (!s8i) -> () loc(#loc84)
          } else {
            %17 = cir.get_global @".str.2" : !cir.ptr<!cir.array<!s8i x 54>> loc(#loc47)
            %18 = cir.cast(array_to_ptrdecay, %17 : !cir.ptr<!cir.array<!s8i x 54>>), !cir.ptr<!s8i> loc(#loc47)
            cir.call @printLine(%18) : (!cir.ptr<!s8i>) -> () loc(#loc85)
          } loc(#loc207)
        } loc(#loc205)
      } loc(#loc204)
    } loc(#loc202)
    cir.return loc(#loc49)
  } loc(#loc196)
  cir.func no_proto internal private @goodB2G2() extra(#fn_attr) {
    %0 = cir.alloca !s8i, !cir.ptr<!s8i>, ["data"] {alignment = 1 : i64} loc(#loc210)
    %1 = cir.const #cir.int<32> : !s32i loc(#loc90)
    %2 = cir.cast(integral, %1 : !s32i), !s8i loc(#loc90)
    cir.store %2, %0 : !s8i, !cir.ptr<!s8i> loc(#loc211)
    cir.scope {
      %3 = cir.const #cir.int<5> : !s32i loc(#loc94)
      %4 = cir.const #cir.int<5> : !s32i loc(#loc95)
      %5 = cir.cmp(eq, %3, %4) : !s32i, !cir.bool loc(#loc213)
      cir.if %5 {
        %6 = cir.get_global @__isoc99_fscanf : !cir.ptr<!cir.func<(!cir.ptr<!ty__IO_FILE>, !cir.ptr<!s8i>, ...) -> !s32i>> loc(#loc97)
        %7 = cir.get_global @stdin : !cir.ptr<!cir.ptr<!ty__IO_FILE>> loc(#loc177)
        %8 = cir.load %7 : !cir.ptr<!cir.ptr<!ty__IO_FILE>>, !cir.ptr<!ty__IO_FILE> loc(#loc98)
        %9 = cir.get_global @".str" : !cir.ptr<!cir.array<!s8i x 3>> loc(#loc99)
        %10 = cir.cast(array_to_ptrdecay, %9 : !cir.ptr<!cir.array<!s8i x 3>>), !cir.ptr<!s8i> loc(#loc99)
        %11 = cir.call @__isoc99_fscanf(%8, %10, %0) : (!cir.ptr<!ty__IO_FILE>, !cir.ptr<!s8i>, !cir.ptr<!s8i>) -> !s32i loc(#loc97)
      } loc(#loc214)
    } loc(#loc212)
    cir.scope {
      %3 = cir.const #cir.int<5> : !s32i loc(#loc102)
      %4 = cir.const #cir.int<5> : !s32i loc(#loc103)
      %5 = cir.cmp(eq, %3, %4) : !s32i, !cir.bool loc(#loc216)
      cir.if %5 {
        cir.scope {
          %6 = cir.load %0 : !cir.ptr<!s8i>, !s8i loc(#loc107)
          %7 = cir.cast(integral, %6 : !s8i), !s64i loc(#loc107)
          %8 = cir.cast(integral, %7 : !s64i), !s32i loc(#loc107)
          %9 = cir.abs %8 poison : !s32i loc(#loc108)
          %10 = cir.cast(integral, %9 : !s32i), !s64i loc(#loc108)
          %11 = cir.get_global @sqrt : !cir.ptr<!cir.func<(!cir.double) -> !cir.double>> loc(#loc109)
          %12 = cir.const #cir.int<127> : !s32i loc(#loc110)
          %13 = cir.cast(int_to_float, %12 : !s32i), !cir.double loc(#loc110)
          %14 = cir.call @sqrt(%13) : (!cir.double) -> !cir.double extra(#fn_attr1) loc(#loc109)
          %15 = cir.cast(float_to_int, %14 : !cir.double), !s64i loc(#loc109)
          %16 = cir.cmp(le, %10, %15) : !s64i, !cir.bool loc(#loc219)
          cir.if %16 {
            %17 = cir.alloca !s8i, !cir.ptr<!s8i>, ["result", init] {alignment = 1 : i64} loc(#loc221)
            %18 = cir.load %0 : !cir.ptr<!s8i>, !s8i loc(#loc117)
            %19 = cir.cast(integral, %18 : !s8i), !s32i loc(#loc117)
            %20 = cir.load %0 : !cir.ptr<!s8i>, !s8i loc(#loc116)
            %21 = cir.cast(integral, %20 : !s8i), !s32i loc(#loc116)
            %22 = cir.binop(mul, %19, %21) nsw : !s32i loc(#loc117)
            %23 = cir.cast(integral, %22 : !s32i), !s8i loc(#loc117)
            cir.store %23, %17 : !s8i, !cir.ptr<!s8i> loc(#loc221)
            %24 = cir.load %17 : !cir.ptr<!s8i>, !s8i loc(#loc118)
            cir.call @printHexCharLine(%24) : (!s8i) -> () loc(#loc119)
          } else {
            %17 = cir.get_global @".str.2" : !cir.ptr<!cir.array<!s8i x 54>> loc(#loc120)
            %18 = cir.cast(array_to_ptrdecay, %17 : !cir.ptr<!cir.array<!s8i x 54>>), !cir.ptr<!s8i> loc(#loc120)
            cir.call @printLine(%18) : (!cir.ptr<!s8i>) -> () loc(#loc121)
          } loc(#loc220)
        } loc(#loc218)
      } loc(#loc217)
    } loc(#loc215)
    cir.return loc(#loc87)
  } loc(#loc209)
  cir.func no_proto internal private @goodG2B1() extra(#fn_attr) {
    %0 = cir.alloca !s8i, !cir.ptr<!s8i>, ["data"] {alignment = 1 : i64} loc(#loc223)
    %1 = cir.const #cir.int<32> : !s32i loc(#loc126)
    %2 = cir.cast(integral, %1 : !s32i), !s8i loc(#loc126)
    cir.store %2, %0 : !s8i, !cir.ptr<!s8i> loc(#loc224)
    cir.scope {
      %3 = cir.const #cir.int<5> : !s32i loc(#loc130)
      %4 = cir.const #cir.int<5> : !s32i loc(#loc131)
      %5 = cir.cmp(ne, %3, %4) : !s32i, !cir.bool loc(#loc226)
      cir.if %5 {
        %6 = cir.get_global @".str.1" : !cir.ptr<!cir.array<!s8i x 21>> loc(#loc135)
        %7 = cir.cast(array_to_ptrdecay, %6 : !cir.ptr<!cir.array<!s8i x 21>>), !cir.ptr<!s8i> loc(#loc135)
        cir.call @printLine(%7) : (!cir.ptr<!s8i>) -> () loc(#loc136)
      } else {
        %6 = cir.const #cir.int<2> : !s32i loc(#loc137)
        %7 = cir.cast(integral, %6 : !s32i), !s8i loc(#loc137)
        cir.store %7, %0 : !s8i, !cir.ptr<!s8i> loc(#loc228)
      } loc(#loc227)
    } loc(#loc225)
    cir.scope {
      %3 = cir.const #cir.int<5> : !s32i loc(#loc141)
      %4 = cir.const #cir.int<5> : !s32i loc(#loc142)
      %5 = cir.cmp(eq, %3, %4) : !s32i, !cir.bool loc(#loc230)
      cir.if %5 {
        cir.scope {
          %6 = cir.alloca !s8i, !cir.ptr<!s8i>, ["result", init] {alignment = 1 : i64} loc(#loc233)
          %7 = cir.load %0 : !cir.ptr<!s8i>, !s8i loc(#loc148)
          %8 = cir.cast(integral, %7 : !s8i), !s32i loc(#loc148)
          %9 = cir.load %0 : !cir.ptr<!s8i>, !s8i loc(#loc147)
          %10 = cir.cast(integral, %9 : !s8i), !s32i loc(#loc147)
          %11 = cir.binop(mul, %8, %10) nsw : !s32i loc(#loc148)
          %12 = cir.cast(integral, %11 : !s32i), !s8i loc(#loc148)
          cir.store %12, %6 : !s8i, !cir.ptr<!s8i> loc(#loc233)
          %13 = cir.load %6 : !cir.ptr<!s8i>, !s8i loc(#loc149)
          cir.call @printHexCharLine(%13) : (!s8i) -> () loc(#loc150)
        } loc(#loc232)
      } loc(#loc231)
    } loc(#loc229)
    cir.return loc(#loc123)
  } loc(#loc222)
  cir.func no_proto internal private @goodG2B2() extra(#fn_attr) {
    %0 = cir.alloca !s8i, !cir.ptr<!s8i>, ["data"] {alignment = 1 : i64} loc(#loc235)
    %1 = cir.const #cir.int<32> : !s32i loc(#loc155)
    %2 = cir.cast(integral, %1 : !s32i), !s8i loc(#loc155)
    cir.store %2, %0 : !s8i, !cir.ptr<!s8i> loc(#loc236)
    cir.scope {
      %3 = cir.const #cir.int<5> : !s32i loc(#loc159)
      %4 = cir.const #cir.int<5> : !s32i loc(#loc160)
      %5 = cir.cmp(eq, %3, %4) : !s32i, !cir.bool loc(#loc238)
      cir.if %5 {
        %6 = cir.const #cir.int<2> : !s32i loc(#loc162)
        %7 = cir.cast(integral, %6 : !s32i), !s8i loc(#loc162)
        cir.store %7, %0 : !s8i, !cir.ptr<!s8i> loc(#loc240)
      } loc(#loc239)
    } loc(#loc237)
    cir.scope {
      %3 = cir.const #cir.int<5> : !s32i loc(#loc166)
      %4 = cir.const #cir.int<5> : !s32i loc(#loc167)
      %5 = cir.cmp(eq, %3, %4) : !s32i, !cir.bool loc(#loc242)
      cir.if %5 {
        cir.scope {
          %6 = cir.alloca !s8i, !cir.ptr<!s8i>, ["result", init] {alignment = 1 : i64} loc(#loc245)
          %7 = cir.load %0 : !cir.ptr<!s8i>, !s8i loc(#loc173)
          %8 = cir.cast(integral, %7 : !s8i), !s32i loc(#loc173)
          %9 = cir.load %0 : !cir.ptr<!s8i>, !s8i loc(#loc172)
          %10 = cir.cast(integral, %9 : !s8i), !s32i loc(#loc172)
          %11 = cir.binop(mul, %8, %10) nsw : !s32i loc(#loc173)
          %12 = cir.cast(integral, %11 : !s32i), !s8i loc(#loc173)
          cir.store %12, %6 : !s8i, !cir.ptr<!s8i> loc(#loc245)
          %13 = cir.load %6 : !cir.ptr<!s8i>, !s8i loc(#loc174)
          cir.call @printHexCharLine(%13) : (!s8i) -> () loc(#loc175)
        } loc(#loc244)
      } loc(#loc243)
    } loc(#loc241)
    cir.return loc(#loc152)
  } loc(#loc234)
} loc(#loc)
#loc = loc("/workspaces/juliet-c/testcases/CWE190_Integer_Overflow/s01/CWE190_Integer_Overflow__char_fscanf_square_03.c":0:0)
#loc1 = loc("/usr/include/stdio.h":463:1)
#loc2 = loc("/usr/include/stdio.h":465:33)
#loc3 = loc("/usr/include/stdio.h":149:1)
#loc4 = loc("/usr/include/stdio.h":149:14)
#loc5 = loc("CWE190_Integer_Overflow__char_fscanf_square_03.c":31:24)
#loc6 = loc("../../../testcasesupport/std_testcase_io.h":30:1)
#loc7 = loc("../../../testcasesupport/std_testcase_io.h":30:35)
#loc8 = loc("CWE190_Integer_Overflow__char_fscanf_square_03.c":24:1)
#loc9 = loc("CWE190_Integer_Overflow__char_fscanf_square_03.c":41:1)
#loc10 = loc("CWE190_Integer_Overflow__char_fscanf_square_03.c":26:5)
#loc11 = loc("CWE190_Integer_Overflow__char_fscanf_square_03.c":26:10)
#loc12 = loc("CWE190_Integer_Overflow__char_fscanf_square_03.c":27:12)
#loc13 = loc("CWE190_Integer_Overflow__char_fscanf_square_03.c":27:5)
#loc14 = loc("CWE190_Integer_Overflow__char_fscanf_square_03.c":28:5)
#loc15 = loc("CWE190_Integer_Overflow__char_fscanf_square_03.c":32:5)
#loc16 = loc("CWE190_Integer_Overflow__char_fscanf_square_03.c":28:8)
#loc17 = loc("CWE190_Integer_Overflow__char_fscanf_square_03.c":28:11)
#loc18 = loc("CWE190_Integer_Overflow__char_fscanf_square_03.c":29:5)
#loc19 = loc("CWE190_Integer_Overflow__char_fscanf_square_03.c":31:9)
#loc20 = loc("CWE190_Integer_Overflow__char_fscanf_square_03.c":31:17)
#loc21 = loc("CWE190_Integer_Overflow__char_fscanf_square_03.c":33:5)
#loc22 = loc("CWE190_Integer_Overflow__char_fscanf_square_03.c":40:5)
#loc23 = loc("CWE190_Integer_Overflow__char_fscanf_square_03.c":33:8)
#loc24 = loc("CWE190_Integer_Overflow__char_fscanf_square_03.c":33:11)
#loc25 = loc("CWE190_Integer_Overflow__char_fscanf_square_03.c":34:5)
#loc26 = loc("CWE190_Integer_Overflow__char_fscanf_square_03.c":35:9)
#loc27 = loc("CWE190_Integer_Overflow__char_fscanf_square_03.c":39:9)
#loc28 = loc("CWE190_Integer_Overflow__char_fscanf_square_03.c":37:13)
#loc29 = loc("CWE190_Integer_Overflow__char_fscanf_square_03.c":37:34)
#loc30 = loc("CWE190_Integer_Overflow__char_fscanf_square_03.c":37:27)
#loc31 = loc("CWE190_Integer_Overflow__char_fscanf_square_03.c":38:30)
#loc32 = loc("CWE190_Integer_Overflow__char_fscanf_square_03.c":38:13)
#loc33 = loc("CWE190_Integer_Overflow__char_fscanf_square_03.c":147:1)
#loc34 = loc("CWE190_Integer_Overflow__char_fscanf_square_03.c":153:1)
#loc35 = loc("CWE190_Integer_Overflow__char_fscanf_square_03.c":149:5)
#loc36 = loc("CWE190_Integer_Overflow__char_fscanf_square_03.c":149:14)
#loc37 = loc("CWE190_Integer_Overflow__char_fscanf_square_03.c":150:5)
#loc38 = loc("CWE190_Integer_Overflow__char_fscanf_square_03.c":150:14)
#loc39 = loc("CWE190_Integer_Overflow__char_fscanf_square_03.c":151:5)
#loc40 = loc("CWE190_Integer_Overflow__char_fscanf_square_03.c":151:14)
#loc41 = loc("CWE190_Integer_Overflow__char_fscanf_square_03.c":152:5)
#loc42 = loc("CWE190_Integer_Overflow__char_fscanf_square_03.c":152:14)
#loc43 = loc("../../../testcasesupport/std_testcase_io.h":14:1)
#loc44 = loc("../../../testcasesupport/std_testcase_io.h":14:33)
#loc45 = loc("CWE190_Integer_Overflow__char_fscanf_square_03.c":60:19)
#loc46 = loc("/usr/include/x86_64-linux-gnu/bits/mathcalls.h":143:1)
#loc47 = loc("CWE190_Integer_Overflow__char_fscanf_square_03.c":72:23)
#loc48 = loc("CWE190_Integer_Overflow__char_fscanf_square_03.c":48:1)
#loc49 = loc("CWE190_Integer_Overflow__char_fscanf_square_03.c":75:1)
#loc50 = loc("CWE190_Integer_Overflow__char_fscanf_square_03.c":50:5)
#loc51 = loc("CWE190_Integer_Overflow__char_fscanf_square_03.c":50:10)
#loc52 = loc("CWE190_Integer_Overflow__char_fscanf_square_03.c":51:12)
#loc53 = loc("CWE190_Integer_Overflow__char_fscanf_square_03.c":51:5)
#loc54 = loc("CWE190_Integer_Overflow__char_fscanf_square_03.c":52:5)
#loc55 = loc("CWE190_Integer_Overflow__char_fscanf_square_03.c":56:5)
#loc56 = loc("CWE190_Integer_Overflow__char_fscanf_square_03.c":52:8)
#loc57 = loc("CWE190_Integer_Overflow__char_fscanf_square_03.c":52:11)
#loc58 = loc("CWE190_Integer_Overflow__char_fscanf_square_03.c":53:5)
#loc59 = loc("CWE190_Integer_Overflow__char_fscanf_square_03.c":55:9)
#loc60 = loc("CWE190_Integer_Overflow__char_fscanf_square_03.c":55:17)
#loc61 = loc("CWE190_Integer_Overflow__char_fscanf_square_03.c":55:24)
#loc62 = loc("CWE190_Integer_Overflow__char_fscanf_square_03.c":57:5)
#loc63 = loc("CWE190_Integer_Overflow__char_fscanf_square_03.c":74:5)
#loc64 = loc("CWE190_Integer_Overflow__char_fscanf_square_03.c":57:8)
#loc65 = loc("CWE190_Integer_Overflow__char_fscanf_square_03.c":57:11)
#loc66 = loc("CWE190_Integer_Overflow__char_fscanf_square_03.c":58:5)
#loc67 = loc("CWE190_Integer_Overflow__char_fscanf_square_03.c":61:5)
#loc68 = loc("CWE190_Integer_Overflow__char_fscanf_square_03.c":63:5)
#loc69 = loc("CWE190_Integer_Overflow__char_fscanf_square_03.c":60:9)
#loc70 = loc("CWE190_Integer_Overflow__char_fscanf_square_03.c":65:9)
#loc71 = loc("CWE190_Integer_Overflow__char_fscanf_square_03.c":73:9)
#loc72 = loc("CWE190_Integer_Overflow__char_fscanf_square_03.c":65:23)
#loc73 = loc("CWE190_Integer_Overflow__char_fscanf_square_03.c":65:13)
#loc74 = loc("CWE190_Integer_Overflow__char_fscanf_square_03.c":65:38)
#loc75 = loc("CWE190_Integer_Overflow__char_fscanf_square_03.c":65:51)
#loc76 = loc("CWE190_Integer_Overflow__char_fscanf_square_03.c":65:59)
#loc77 = loc("CWE190_Integer_Overflow__char_fscanf_square_03.c":66:9)
#loc78 = loc("CWE190_Integer_Overflow__char_fscanf_square_03.c":69:9)
#loc79 = loc("CWE190_Integer_Overflow__char_fscanf_square_03.c":71:9)
#loc80 = loc("CWE190_Integer_Overflow__char_fscanf_square_03.c":67:13)
#loc81 = loc("CWE190_Integer_Overflow__char_fscanf_square_03.c":67:34)
#loc82 = loc("CWE190_Integer_Overflow__char_fscanf_square_03.c":67:27)
#loc83 = loc("CWE190_Integer_Overflow__char_fscanf_square_03.c":68:30)
#loc84 = loc("CWE190_Integer_Overflow__char_fscanf_square_03.c":68:13)
#loc85 = loc("CWE190_Integer_Overflow__char_fscanf_square_03.c":72:13)
#loc86 = loc("CWE190_Integer_Overflow__char_fscanf_square_03.c":78:1)
#loc87 = loc("CWE190_Integer_Overflow__char_fscanf_square_03.c":100:1)
#loc88 = loc("CWE190_Integer_Overflow__char_fscanf_square_03.c":80:5)
#loc89 = loc("CWE190_Integer_Overflow__char_fscanf_square_03.c":80:10)
#loc90 = loc("CWE190_Integer_Overflow__char_fscanf_square_03.c":81:12)
#loc91 = loc("CWE190_Integer_Overflow__char_fscanf_square_03.c":81:5)
#loc92 = loc("CWE190_Integer_Overflow__char_fscanf_square_03.c":82:5)
#loc93 = loc("CWE190_Integer_Overflow__char_fscanf_square_03.c":86:5)
#loc94 = loc("CWE190_Integer_Overflow__char_fscanf_square_03.c":82:8)
#loc95 = loc("CWE190_Integer_Overflow__char_fscanf_square_03.c":82:11)
#loc96 = loc("CWE190_Integer_Overflow__char_fscanf_square_03.c":83:5)
#loc97 = loc("CWE190_Integer_Overflow__char_fscanf_square_03.c":85:9)
#loc98 = loc("CWE190_Integer_Overflow__char_fscanf_square_03.c":85:17)
#loc99 = loc("CWE190_Integer_Overflow__char_fscanf_square_03.c":85:24)
#loc100 = loc("CWE190_Integer_Overflow__char_fscanf_square_03.c":87:5)
#loc101 = loc("CWE190_Integer_Overflow__char_fscanf_square_03.c":99:5)
#loc102 = loc("CWE190_Integer_Overflow__char_fscanf_square_03.c":87:8)
#loc103 = loc("CWE190_Integer_Overflow__char_fscanf_square_03.c":87:11)
#loc104 = loc("CWE190_Integer_Overflow__char_fscanf_square_03.c":88:5)
#loc105 = loc("CWE190_Integer_Overflow__char_fscanf_square_03.c":90:9)
#loc106 = loc("CWE190_Integer_Overflow__char_fscanf_square_03.c":98:9)
#loc107 = loc("CWE190_Integer_Overflow__char_fscanf_square_03.c":90:23)
#loc108 = loc("CWE190_Integer_Overflow__char_fscanf_square_03.c":90:13)
#loc109 = loc("CWE190_Integer_Overflow__char_fscanf_square_03.c":90:38)
#loc110 = loc("CWE190_Integer_Overflow__char_fscanf_square_03.c":90:51)
#loc111 = loc("CWE190_Integer_Overflow__char_fscanf_square_03.c":90:59)
#loc112 = loc("CWE190_Integer_Overflow__char_fscanf_square_03.c":91:9)
#loc113 = loc("CWE190_Integer_Overflow__char_fscanf_square_03.c":94:9)
#loc114 = loc("CWE190_Integer_Overflow__char_fscanf_square_03.c":96:9)
#loc115 = loc("CWE190_Integer_Overflow__char_fscanf_square_03.c":92:13)
#loc116 = loc("CWE190_Integer_Overflow__char_fscanf_square_03.c":92:34)
#loc117 = loc("CWE190_Integer_Overflow__char_fscanf_square_03.c":92:27)
#loc118 = loc("CWE190_Integer_Overflow__char_fscanf_square_03.c":93:30)
#loc119 = loc("CWE190_Integer_Overflow__char_fscanf_square_03.c":93:13)
#loc120 = loc("CWE190_Integer_Overflow__char_fscanf_square_03.c":97:23)
#loc121 = loc("CWE190_Integer_Overflow__char_fscanf_square_03.c":97:13)
#loc122 = loc("CWE190_Integer_Overflow__char_fscanf_square_03.c":103:1)
#loc123 = loc("CWE190_Integer_Overflow__char_fscanf_square_03.c":125:1)
#loc124 = loc("CWE190_Integer_Overflow__char_fscanf_square_03.c":105:5)
#loc125 = loc("CWE190_Integer_Overflow__char_fscanf_square_03.c":105:10)
#loc126 = loc("CWE190_Integer_Overflow__char_fscanf_square_03.c":106:12)
#loc127 = loc("CWE190_Integer_Overflow__char_fscanf_square_03.c":106:5)
#loc128 = loc("CWE190_Integer_Overflow__char_fscanf_square_03.c":107:5)
#loc129 = loc("CWE190_Integer_Overflow__char_fscanf_square_03.c":116:5)
#loc130 = loc("CWE190_Integer_Overflow__char_fscanf_square_03.c":107:8)
#loc131 = loc("CWE190_Integer_Overflow__char_fscanf_square_03.c":107:11)
#loc132 = loc("CWE190_Integer_Overflow__char_fscanf_square_03.c":108:5)
#loc133 = loc("CWE190_Integer_Overflow__char_fscanf_square_03.c":111:5)
#loc134 = loc("CWE190_Integer_Overflow__char_fscanf_square_03.c":113:5)
#loc135 = loc("CWE190_Integer_Overflow__char_fscanf_square_03.c":110:19)
#loc136 = loc("CWE190_Integer_Overflow__char_fscanf_square_03.c":110:9)
#loc137 = loc("CWE190_Integer_Overflow__char_fscanf_square_03.c":115:16)
#loc138 = loc("CWE190_Integer_Overflow__char_fscanf_square_03.c":115:9)
#loc139 = loc("CWE190_Integer_Overflow__char_fscanf_square_03.c":117:5)
#loc140 = loc("CWE190_Integer_Overflow__char_fscanf_square_03.c":124:5)
#loc141 = loc("CWE190_Integer_Overflow__char_fscanf_square_03.c":117:8)
#loc142 = loc("CWE190_Integer_Overflow__char_fscanf_square_03.c":117:11)
#loc143 = loc("CWE190_Integer_Overflow__char_fscanf_square_03.c":118:5)
#loc144 = loc("CWE190_Integer_Overflow__char_fscanf_square_03.c":119:9)
#loc145 = loc("CWE190_Integer_Overflow__char_fscanf_square_03.c":123:9)
#loc146 = loc("CWE190_Integer_Overflow__char_fscanf_square_03.c":121:13)
#loc147 = loc("CWE190_Integer_Overflow__char_fscanf_square_03.c":121:34)
#loc148 = loc("CWE190_Integer_Overflow__char_fscanf_square_03.c":121:27)
#loc149 = loc("CWE190_Integer_Overflow__char_fscanf_square_03.c":122:30)
#loc150 = loc("CWE190_Integer_Overflow__char_fscanf_square_03.c":122:13)
#loc151 = loc("CWE190_Integer_Overflow__char_fscanf_square_03.c":128:1)
#loc152 = loc("CWE190_Integer_Overflow__char_fscanf_square_03.c":145:1)
#loc153 = loc("CWE190_Integer_Overflow__char_fscanf_square_03.c":130:5)
#loc154 = loc("CWE190_Integer_Overflow__char_fscanf_square_03.c":130:10)
#loc155 = loc("CWE190_Integer_Overflow__char_fscanf_square_03.c":131:12)
#loc156 = loc("CWE190_Integer_Overflow__char_fscanf_square_03.c":131:5)
#loc157 = loc("CWE190_Integer_Overflow__char_fscanf_square_03.c":132:5)
#loc158 = loc("CWE190_Integer_Overflow__char_fscanf_square_03.c":136:5)
#loc159 = loc("CWE190_Integer_Overflow__char_fscanf_square_03.c":132:8)
#loc160 = loc("CWE190_Integer_Overflow__char_fscanf_square_03.c":132:11)
#loc161 = loc("CWE190_Integer_Overflow__char_fscanf_square_03.c":133:5)
#loc162 = loc("CWE190_Integer_Overflow__char_fscanf_square_03.c":135:16)
#loc163 = loc("CWE190_Integer_Overflow__char_fscanf_square_03.c":135:9)
#loc164 = loc("CWE190_Integer_Overflow__char_fscanf_square_03.c":137:5)
#loc165 = loc("CWE190_Integer_Overflow__char_fscanf_square_03.c":144:5)
#loc166 = loc("CWE190_Integer_Overflow__char_fscanf_square_03.c":137:8)
#loc167 = loc("CWE190_Integer_Overflow__char_fscanf_square_03.c":137:11)
#loc168 = loc("CWE190_Integer_Overflow__char_fscanf_square_03.c":138:5)
#loc169 = loc("CWE190_Integer_Overflow__char_fscanf_square_03.c":139:9)
#loc170 = loc("CWE190_Integer_Overflow__char_fscanf_square_03.c":143:9)
#loc171 = loc("CWE190_Integer_Overflow__char_fscanf_square_03.c":141:13)
#loc172 = loc("CWE190_Integer_Overflow__char_fscanf_square_03.c":141:34)
#loc173 = loc("CWE190_Integer_Overflow__char_fscanf_square_03.c":141:27)
#loc174 = loc("CWE190_Integer_Overflow__char_fscanf_square_03.c":142:30)
#loc175 = loc("CWE190_Integer_Overflow__char_fscanf_square_03.c":142:13)
#loc176 = loc(fused[#loc1, #loc2])
#loc177 = loc(fused[#loc3, #loc4])
#loc178 = loc(fused[#loc6, #loc7])
#loc179 = loc(fused[#loc8, #loc9])
#loc180 = loc(fused[#loc10, #loc11])
#loc181 = loc(fused[#loc13, #loc12])
#loc182 = loc(fused[#loc14, #loc15])
#loc183 = loc(fused[#loc16, #loc17])
#loc184 = loc(fused[#loc18, #loc15])
#loc185 = loc(fused[#loc21, #loc22])
#loc186 = loc(fused[#loc23, #loc24])
#loc187 = loc(fused[#loc25, #loc22])
#loc188 = loc(fused[#loc26, #loc27])
#loc189 = loc(fused[#loc28, #loc29])
#loc190 = loc(fused[#loc33, #loc34])
#loc191 = loc(fused[#loc35, #loc36])
#loc192 = loc(fused[#loc37, #loc38])
#loc193 = loc(fused[#loc39, #loc40])
#loc194 = loc(fused[#loc41, #loc42])
#loc195 = loc(fused[#loc43, #loc44])
#loc196 = loc(fused[#loc48, #loc49])
#loc197 = loc(fused[#loc50, #loc51])
#loc198 = loc(fused[#loc53, #loc52])
#loc199 = loc(fused[#loc54, #loc55])
#loc200 = loc(fused[#loc56, #loc57])
#loc201 = loc(fused[#loc58, #loc55])
#loc202 = loc(fused[#loc62, #loc63])
#loc203 = loc(fused[#loc64, #loc65])
#loc204 = loc(fused[#loc66, #loc67, #loc68, #loc63])
#loc205 = loc(fused[#loc70, #loc71])
#loc206 = loc(fused[#loc73, #loc76])
#loc207 = loc(fused[#loc77, #loc78, #loc79, #loc71])
#loc208 = loc(fused[#loc80, #loc81])
#loc209 = loc(fused[#loc86, #loc87])
#loc210 = loc(fused[#loc88, #loc89])
#loc211 = loc(fused[#loc91, #loc90])
#loc212 = loc(fused[#loc92, #loc93])
#loc213 = loc(fused[#loc94, #loc95])
#loc214 = loc(fused[#loc96, #loc93])
#loc215 = loc(fused[#loc100, #loc101])
#loc216 = loc(fused[#loc102, #loc103])
#loc217 = loc(fused[#loc104, #loc101])
#loc218 = loc(fused[#loc105, #loc106])
#loc219 = loc(fused[#loc108, #loc111])
#loc220 = loc(fused[#loc112, #loc113, #loc114, #loc106])
#loc221 = loc(fused[#loc115, #loc116])
#loc222 = loc(fused[#loc122, #loc123])
#loc223 = loc(fused[#loc124, #loc125])
#loc224 = loc(fused[#loc127, #loc126])
#loc225 = loc(fused[#loc128, #loc129])
#loc226 = loc(fused[#loc130, #loc131])
#loc227 = loc(fused[#loc132, #loc133, #loc134, #loc129])
#loc228 = loc(fused[#loc138, #loc137])
#loc229 = loc(fused[#loc139, #loc140])
#loc230 = loc(fused[#loc141, #loc142])
#loc231 = loc(fused[#loc143, #loc140])
#loc232 = loc(fused[#loc144, #loc145])
#loc233 = loc(fused[#loc146, #loc147])
#loc234 = loc(fused[#loc151, #loc152])
#loc235 = loc(fused[#loc153, #loc154])
#loc236 = loc(fused[#loc156, #loc155])
#loc237 = loc(fused[#loc157, #loc158])
#loc238 = loc(fused[#loc159, #loc160])
#loc239 = loc(fused[#loc161, #loc158])
#loc240 = loc(fused[#loc163, #loc162])
#loc241 = loc(fused[#loc164, #loc165])
#loc242 = loc(fused[#loc166, #loc167])
#loc243 = loc(fused[#loc168, #loc165])
#loc244 = loc(fused[#loc169, #loc170])
#loc245 = loc(fused[#loc171, #loc172])
