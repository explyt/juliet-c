!s32i = !cir.int<s, 32>
!s8i = !cir.int<s, 8>
!void = !cir.void
#fn_attr = #cir<extra({inline = #cir.inline<no>, nothrow = #cir.nothrow, optnone = #cir.optnone})>
module @"/home/ladisgin/git_proj/test_projects/juliet-c/testcases/CWE190_Integer_Overflow/s06/CWE190_Integer_Overflow__char_max_postinc_16.c" attributes {cir.lang = #cir.lang<c>, cir.sob = #cir.signed_overflow_behavior<undefined>, cir.triple = "x86_64-unknown-linux-gnu", dlti.dl_spec = #dlti.dl_spec<#dlti.dl_entry<i64, dense<64> : vector<2xi64>>, #dlti.dl_entry<i128, dense<128> : vector<2xi64>>, #dlti.dl_entry<f80, dense<128> : vector<2xi64>>, #dlti.dl_entry<!llvm.ptr<270>, dense<32> : vector<4xi64>>, #dlti.dl_entry<f64, dense<64> : vector<2xi64>>, #dlti.dl_entry<f128, dense<128> : vector<2xi64>>, #dlti.dl_entry<!llvm.ptr<272>, dense<64> : vector<4xi64>>, #dlti.dl_entry<!llvm.ptr<271>, dense<32> : vector<4xi64>>, #dlti.dl_entry<i8, dense<8> : vector<2xi64>>, #dlti.dl_entry<i16, dense<16> : vector<2xi64>>, #dlti.dl_entry<f16, dense<16> : vector<2xi64>>, #dlti.dl_entry<i32, dense<32> : vector<2xi64>>, #dlti.dl_entry<!llvm.ptr, dense<64> : vector<4xi64>>, #dlti.dl_entry<i1, dense<8> : vector<2xi64>>, #dlti.dl_entry<"dlti.endianness", "little">, #dlti.dl_entry<"dlti.stack_alignment", 128 : i64>>, llvm.data_layout = "e-m:e-p270:32:32-p271:32:32-p272:64:64-i64:64-i128:128-f80:128-n8:16:32:64-S128"} {
  cir.func private  @printHexCharLine(!s8i) loc(#loc91)
  cir.func no_proto  @CWE190_Integer_Overflow__char_max_postinc_16_bad() extra(#fn_attr) {
    %0 = cir.alloca !s8i, !cir.ptr<!s8i>, ["data"] {alignment = 1 : i64} loc(#loc93)
    %1 = cir.const #cir.int<32> : !s32i loc(#loc7)
    %2 = cir.cast(integral, %1 : !s32i), !s8i loc(#loc7)
    cir.store %2, %0 : !s8i, !cir.ptr<!s8i> loc(#loc94)
    cir.scope {
      cir.while {
        %3 = cir.const #cir.int<1> : !s32i loc(#loc11)
        %4 = cir.cast(int_to_bool, %3 : !s32i), !cir.bool loc(#loc11)
        cir.condition(%4) loc(#loc11)
      } do {
        %3 = cir.const #cir.int<127> : !s32i loc(#loc12)
        %4 = cir.cast(integral, %3 : !s32i), !s8i loc(#loc12)
        cir.store %4, %0 : !s8i, !cir.ptr<!s8i> loc(#loc96)
        cir.break loc(#loc14)
      } loc(#loc95)
    } loc(#loc95)
    cir.scope {
      cir.while {
        %3 = cir.const #cir.int<1> : !s32i loc(#loc17)
        %4 = cir.cast(int_to_bool, %3 : !s32i), !cir.bool loc(#loc17)
        cir.condition(%4) loc(#loc17)
      } do {
        cir.scope {
          %3 = cir.alloca !s8i, !cir.ptr<!s8i>, ["result", init] {alignment = 1 : i64} loc(#loc99)
          %4 = cir.load %0 : !cir.ptr<!s8i>, !s8i loc(#loc22)
          %5 = cir.unary(inc, %4) : !s8i, !s8i loc(#loc23)
          cir.store %5, %0 : !s8i, !cir.ptr<!s8i> loc(#loc100)
          %6 = cir.load %0 : !cir.ptr<!s8i>, !s8i loc(#loc21)
          cir.store %6, %3 : !s8i, !cir.ptr<!s8i> loc(#loc99)
          %7 = cir.load %3 : !cir.ptr<!s8i>, !s8i loc(#loc24)
          cir.call @printHexCharLine(%7) : (!s8i) -> () loc(#loc25)
        } loc(#loc98)
        cir.break loc(#loc26)
      } loc(#loc97)
    } loc(#loc97)
    cir.return loc(#loc4)
  } loc(#loc92)
  cir.func no_proto  @CWE190_Integer_Overflow__char_max_postinc_16_good() extra(#fn_attr) {
    %0 = cir.get_global @goodB2G : !cir.ptr<!cir.func<!void ()>> loc(#loc102)
    cir.call %0() : (!cir.ptr<!cir.func<!void ()>>) -> () loc(#loc29)
    %1 = cir.get_global @goodG2B : !cir.ptr<!cir.func<!void ()>> loc(#loc103)
    cir.call %1() : (!cir.ptr<!cir.func<!void ()>>) -> () loc(#loc31)
    cir.return loc(#loc28)
  } loc(#loc101)
  cir.func private  @printLine(!cir.ptr<!s8i>) loc(#loc104)
  cir.global "private"  constant internal dsolocal @".str" = #cir.const_array<"data value is too large to perform arithmetic safely.\00" : !cir.array<!s8i x 54>> : !cir.array<!s8i x 54> {alignment = 1 : i64} loc(#loc35)
  cir.func no_proto internal private  @goodB2G() extra(#fn_attr) {
    %0 = cir.alloca !s8i, !cir.ptr<!s8i>, ["data"] {alignment = 1 : i64} loc(#loc106)
    %1 = cir.const #cir.int<32> : !s32i loc(#loc40)
    %2 = cir.cast(integral, %1 : !s32i), !s8i loc(#loc40)
    cir.store %2, %0 : !s8i, !cir.ptr<!s8i> loc(#loc107)
    cir.scope {
      cir.while {
        %3 = cir.const #cir.int<1> : !s32i loc(#loc44)
        %4 = cir.cast(int_to_bool, %3 : !s32i), !cir.bool loc(#loc44)
        cir.condition(%4) loc(#loc44)
      } do {
        %3 = cir.const #cir.int<127> : !s32i loc(#loc45)
        %4 = cir.cast(integral, %3 : !s32i), !s8i loc(#loc45)
        cir.store %4, %0 : !s8i, !cir.ptr<!s8i> loc(#loc109)
        cir.break loc(#loc47)
      } loc(#loc108)
    } loc(#loc108)
    cir.scope {
      cir.while {
        %3 = cir.const #cir.int<1> : !s32i loc(#loc50)
        %4 = cir.cast(int_to_bool, %3 : !s32i), !cir.bool loc(#loc50)
        cir.condition(%4) loc(#loc50)
      } do {
        cir.scope {
          %3 = cir.load %0 : !cir.ptr<!s8i>, !s8i loc(#loc53)
          %4 = cir.cast(integral, %3 : !s8i), !s32i loc(#loc53)
          %5 = cir.const #cir.int<127> : !s32i loc(#loc54)
          %6 = cir.cmp(lt, %4, %5) : !s32i, !s32i loc(#loc112)
          %7 = cir.cast(int_to_bool, %6 : !s32i), !cir.bool loc(#loc55)
          cir.if %7 {
            %8 = cir.alloca !s8i, !cir.ptr<!s8i>, ["result", init] {alignment = 1 : i64} loc(#loc114)
            %9 = cir.load %0 : !cir.ptr<!s8i>, !s8i loc(#loc61)
            %10 = cir.unary(inc, %9) : !s8i, !s8i loc(#loc62)
            cir.store %10, %0 : !s8i, !cir.ptr<!s8i> loc(#loc115)
            %11 = cir.load %0 : !cir.ptr<!s8i>, !s8i loc(#loc60)
            cir.store %11, %8 : !s8i, !cir.ptr<!s8i> loc(#loc114)
            %12 = cir.load %8 : !cir.ptr<!s8i>, !s8i loc(#loc63)
            cir.call @printHexCharLine(%12) : (!s8i) -> () loc(#loc64)
          } else {
            %8 = cir.get_global @".str" : !cir.ptr<!cir.array<!s8i x 54>> loc(#loc35)
            %9 = cir.cast(array_to_ptrdecay, %8 : !cir.ptr<!cir.array<!s8i x 54>>), !cir.ptr<!s8i> loc(#loc35)
            cir.call @printLine(%9) : (!cir.ptr<!s8i>) -> () loc(#loc65)
          } loc(#loc113)
        } loc(#loc111)
        cir.break loc(#loc66)
      } loc(#loc110)
    } loc(#loc110)
    cir.return loc(#loc37)
  } loc(#loc105)
  cir.func no_proto internal private  @goodG2B() extra(#fn_attr) {
    %0 = cir.alloca !s8i, !cir.ptr<!s8i>, ["data"] {alignment = 1 : i64} loc(#loc117)
    %1 = cir.const #cir.int<32> : !s32i loc(#loc71)
    %2 = cir.cast(integral, %1 : !s32i), !s8i loc(#loc71)
    cir.store %2, %0 : !s8i, !cir.ptr<!s8i> loc(#loc118)
    cir.scope {
      cir.while {
        %3 = cir.const #cir.int<1> : !s32i loc(#loc75)
        %4 = cir.cast(int_to_bool, %3 : !s32i), !cir.bool loc(#loc75)
        cir.condition(%4) loc(#loc75)
      } do {
        %3 = cir.const #cir.int<2> : !s32i loc(#loc76)
        %4 = cir.cast(integral, %3 : !s32i), !s8i loc(#loc76)
        cir.store %4, %0 : !s8i, !cir.ptr<!s8i> loc(#loc120)
        cir.break loc(#loc78)
      } loc(#loc119)
    } loc(#loc119)
    cir.scope {
      cir.while {
        %3 = cir.const #cir.int<1> : !s32i loc(#loc81)
        %4 = cir.cast(int_to_bool, %3 : !s32i), !cir.bool loc(#loc81)
        cir.condition(%4) loc(#loc81)
      } do {
        cir.scope {
          %3 = cir.alloca !s8i, !cir.ptr<!s8i>, ["result", init] {alignment = 1 : i64} loc(#loc123)
          %4 = cir.load %0 : !cir.ptr<!s8i>, !s8i loc(#loc86)
          %5 = cir.unary(inc, %4) : !s8i, !s8i loc(#loc87)
          cir.store %5, %0 : !s8i, !cir.ptr<!s8i> loc(#loc124)
          %6 = cir.load %0 : !cir.ptr<!s8i>, !s8i loc(#loc85)
          cir.store %6, %3 : !s8i, !cir.ptr<!s8i> loc(#loc123)
          %7 = cir.load %3 : !cir.ptr<!s8i>, !s8i loc(#loc88)
          cir.call @printHexCharLine(%7) : (!s8i) -> () loc(#loc89)
        } loc(#loc122)
        cir.break loc(#loc90)
      } loc(#loc121)
    } loc(#loc121)
    cir.return loc(#loc68)
  } loc(#loc116)
} loc(#loc)
#loc = loc("/home/ladisgin/git_proj/test_projects/juliet-c/testcases/CWE190_Integer_Overflow/s06/CWE190_Integer_Overflow__char_max_postinc_16.c":0:0)
#loc1 = loc("../../../testcasesupport/std_testcase_io.h":30:1)
#loc2 = loc("../../../testcasesupport/std_testcase_io.h":30:35)
#loc3 = loc("CWE190_Integer_Overflow__char_max_postinc_16.c":22:1)
#loc4 = loc("CWE190_Integer_Overflow__char_max_postinc_16.c":42:1)
#loc5 = loc("CWE190_Integer_Overflow__char_max_postinc_16.c":24:5)
#loc6 = loc("CWE190_Integer_Overflow__char_max_postinc_16.c":24:10)
#loc7 = loc("CWE190_Integer_Overflow__char_max_postinc_16.c":25:12)
#loc8 = loc("CWE190_Integer_Overflow__char_max_postinc_16.c":25:5)
#loc9 = loc("CWE190_Integer_Overflow__char_max_postinc_16.c":26:5)
#loc10 = loc("CWE190_Integer_Overflow__char_max_postinc_16.c":31:5)
#loc11 = loc("CWE190_Integer_Overflow__char_max_postinc_16.c":26:11)
#loc12 = loc("CWE190_Integer_Overflow__char_max_postinc_16.c":29:16)
#loc13 = loc("CWE190_Integer_Overflow__char_max_postinc_16.c":29:9)
#loc14 = loc("CWE190_Integer_Overflow__char_max_postinc_16.c":30:9)
#loc15 = loc("CWE190_Integer_Overflow__char_max_postinc_16.c":32:5)
#loc16 = loc("CWE190_Integer_Overflow__char_max_postinc_16.c":41:5)
#loc17 = loc("CWE190_Integer_Overflow__char_max_postinc_16.c":32:11)
#loc18 = loc("CWE190_Integer_Overflow__char_max_postinc_16.c":34:9)
#loc19 = loc("CWE190_Integer_Overflow__char_max_postinc_16.c":39:9)
#loc20 = loc("CWE190_Integer_Overflow__char_max_postinc_16.c":37:13)
#loc21 = loc("CWE190_Integer_Overflow__char_max_postinc_16.c":37:27)
#loc22 = loc("CWE190_Integer_Overflow__char_max_postinc_16.c":36:17)
#loc23 = loc("CWE190_Integer_Overflow__char_max_postinc_16.c":36:13)
#loc24 = loc("CWE190_Integer_Overflow__char_max_postinc_16.c":38:30)
#loc25 = loc("CWE190_Integer_Overflow__char_max_postinc_16.c":38:13)
#loc26 = loc("CWE190_Integer_Overflow__char_max_postinc_16.c":40:9)
#loc27 = loc("CWE190_Integer_Overflow__char_max_postinc_16.c":99:1)
#loc28 = loc("CWE190_Integer_Overflow__char_max_postinc_16.c":103:1)
#loc29 = loc("CWE190_Integer_Overflow__char_max_postinc_16.c":101:5)
#loc30 = loc("CWE190_Integer_Overflow__char_max_postinc_16.c":101:13)
#loc31 = loc("CWE190_Integer_Overflow__char_max_postinc_16.c":102:5)
#loc32 = loc("CWE190_Integer_Overflow__char_max_postinc_16.c":102:13)
#loc33 = loc("../../../testcasesupport/std_testcase_io.h":14:1)
#loc34 = loc("../../../testcasesupport/std_testcase_io.h":14:33)
#loc35 = loc("CWE190_Integer_Overflow__char_max_postinc_16.c":70:23)
#loc36 = loc("CWE190_Integer_Overflow__char_max_postinc_16.c":49:1)
#loc37 = loc("CWE190_Integer_Overflow__char_max_postinc_16.c":74:1)
#loc38 = loc("CWE190_Integer_Overflow__char_max_postinc_16.c":51:5)
#loc39 = loc("CWE190_Integer_Overflow__char_max_postinc_16.c":51:10)
#loc40 = loc("CWE190_Integer_Overflow__char_max_postinc_16.c":52:12)
#loc41 = loc("CWE190_Integer_Overflow__char_max_postinc_16.c":52:5)
#loc42 = loc("CWE190_Integer_Overflow__char_max_postinc_16.c":53:5)
#loc43 = loc("CWE190_Integer_Overflow__char_max_postinc_16.c":58:5)
#loc44 = loc("CWE190_Integer_Overflow__char_max_postinc_16.c":53:11)
#loc45 = loc("CWE190_Integer_Overflow__char_max_postinc_16.c":56:16)
#loc46 = loc("CWE190_Integer_Overflow__char_max_postinc_16.c":56:9)
#loc47 = loc("CWE190_Integer_Overflow__char_max_postinc_16.c":57:9)
#loc48 = loc("CWE190_Integer_Overflow__char_max_postinc_16.c":59:5)
#loc49 = loc("CWE190_Integer_Overflow__char_max_postinc_16.c":73:5)
#loc50 = loc("CWE190_Integer_Overflow__char_max_postinc_16.c":59:11)
#loc51 = loc("CWE190_Integer_Overflow__char_max_postinc_16.c":62:9)
#loc52 = loc("CWE190_Integer_Overflow__char_max_postinc_16.c":71:9)
#loc53 = loc("CWE190_Integer_Overflow__char_max_postinc_16.c":62:13)
#loc54 = loc("CWE190_Integer_Overflow__char_max_postinc_16.c":62:20)
#loc55 = loc("CWE190_Integer_Overflow__char_max_postinc_16.c":62:18)
#loc56 = loc("CWE190_Integer_Overflow__char_max_postinc_16.c":63:9)
#loc57 = loc("CWE190_Integer_Overflow__char_max_postinc_16.c":67:9)
#loc58 = loc("CWE190_Integer_Overflow__char_max_postinc_16.c":69:9)
#loc59 = loc("CWE190_Integer_Overflow__char_max_postinc_16.c":65:13)
#loc60 = loc("CWE190_Integer_Overflow__char_max_postinc_16.c":65:27)
#loc61 = loc("CWE190_Integer_Overflow__char_max_postinc_16.c":64:17)
#loc62 = loc("CWE190_Integer_Overflow__char_max_postinc_16.c":64:13)
#loc63 = loc("CWE190_Integer_Overflow__char_max_postinc_16.c":66:30)
#loc64 = loc("CWE190_Integer_Overflow__char_max_postinc_16.c":66:13)
#loc65 = loc("CWE190_Integer_Overflow__char_max_postinc_16.c":70:13)
#loc66 = loc("CWE190_Integer_Overflow__char_max_postinc_16.c":72:9)
#loc67 = loc("CWE190_Integer_Overflow__char_max_postinc_16.c":77:1)
#loc68 = loc("CWE190_Integer_Overflow__char_max_postinc_16.c":97:1)
#loc69 = loc("CWE190_Integer_Overflow__char_max_postinc_16.c":79:5)
#loc70 = loc("CWE190_Integer_Overflow__char_max_postinc_16.c":79:10)
#loc71 = loc("CWE190_Integer_Overflow__char_max_postinc_16.c":80:12)
#loc72 = loc("CWE190_Integer_Overflow__char_max_postinc_16.c":80:5)
#loc73 = loc("CWE190_Integer_Overflow__char_max_postinc_16.c":81:5)
#loc74 = loc("CWE190_Integer_Overflow__char_max_postinc_16.c":86:5)
#loc75 = loc("CWE190_Integer_Overflow__char_max_postinc_16.c":81:11)
#loc76 = loc("CWE190_Integer_Overflow__char_max_postinc_16.c":84:16)
#loc77 = loc("CWE190_Integer_Overflow__char_max_postinc_16.c":84:9)
#loc78 = loc("CWE190_Integer_Overflow__char_max_postinc_16.c":85:9)
#loc79 = loc("CWE190_Integer_Overflow__char_max_postinc_16.c":87:5)
#loc80 = loc("CWE190_Integer_Overflow__char_max_postinc_16.c":96:5)
#loc81 = loc("CWE190_Integer_Overflow__char_max_postinc_16.c":87:11)
#loc82 = loc("CWE190_Integer_Overflow__char_max_postinc_16.c":89:9)
#loc83 = loc("CWE190_Integer_Overflow__char_max_postinc_16.c":94:9)
#loc84 = loc("CWE190_Integer_Overflow__char_max_postinc_16.c":92:13)
#loc85 = loc("CWE190_Integer_Overflow__char_max_postinc_16.c":92:27)
#loc86 = loc("CWE190_Integer_Overflow__char_max_postinc_16.c":91:17)
#loc87 = loc("CWE190_Integer_Overflow__char_max_postinc_16.c":91:13)
#loc88 = loc("CWE190_Integer_Overflow__char_max_postinc_16.c":93:30)
#loc89 = loc("CWE190_Integer_Overflow__char_max_postinc_16.c":93:13)
#loc90 = loc("CWE190_Integer_Overflow__char_max_postinc_16.c":95:9)
#loc91 = loc(fused[#loc1, #loc2])
#loc92 = loc(fused[#loc3, #loc4])
#loc93 = loc(fused[#loc5, #loc6])
#loc94 = loc(fused[#loc8, #loc7])
#loc95 = loc(fused[#loc9, #loc10])
#loc96 = loc(fused[#loc13, #loc12])
#loc97 = loc(fused[#loc15, #loc16])
#loc98 = loc(fused[#loc18, #loc19])
#loc99 = loc(fused[#loc20, #loc21])
#loc100 = loc(fused[#loc23, #loc22])
#loc101 = loc(fused[#loc27, #loc28])
#loc102 = loc(fused[#loc29, #loc30])
#loc103 = loc(fused[#loc31, #loc32])
#loc104 = loc(fused[#loc33, #loc34])
#loc105 = loc(fused[#loc36, #loc37])
#loc106 = loc(fused[#loc38, #loc39])
#loc107 = loc(fused[#loc41, #loc40])
#loc108 = loc(fused[#loc42, #loc43])
#loc109 = loc(fused[#loc46, #loc45])
#loc110 = loc(fused[#loc48, #loc49])
#loc111 = loc(fused[#loc51, #loc52])
#loc112 = loc(fused[#loc53, #loc54])
#loc113 = loc(fused[#loc56, #loc57, #loc58, #loc52])
#loc114 = loc(fused[#loc59, #loc60])
#loc115 = loc(fused[#loc62, #loc61])
#loc116 = loc(fused[#loc67, #loc68])
#loc117 = loc(fused[#loc69, #loc70])
#loc118 = loc(fused[#loc72, #loc71])
#loc119 = loc(fused[#loc73, #loc74])
#loc120 = loc(fused[#loc77, #loc76])
#loc121 = loc(fused[#loc79, #loc80])
#loc122 = loc(fused[#loc82, #loc83])
#loc123 = loc(fused[#loc84, #loc85])
#loc124 = loc(fused[#loc87, #loc86])
