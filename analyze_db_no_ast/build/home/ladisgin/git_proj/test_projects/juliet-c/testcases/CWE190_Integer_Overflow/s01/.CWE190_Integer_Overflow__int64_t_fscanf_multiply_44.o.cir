!s32i = !cir.int<s, 32>
!s64i = !cir.int<s, 64>
!s8i = !cir.int<s, 8>
!ty__IO_codecvt = !cir.struct<struct "_IO_codecvt" incomplete>
!ty__IO_marker = !cir.struct<struct "_IO_marker" incomplete>
!ty__IO_wide_data = !cir.struct<struct "_IO_wide_data" incomplete>
!u16i = !cir.int<u, 16>
!u64i = !cir.int<u, 64>
!void = !cir.void
#fn_attr = #cir<extra({inline = #cir.inline<no>, nothrow = #cir.nothrow, optnone = #cir.optnone})>
#loc5 = loc("CWE190_Integer_Overflow__int64_t_fscanf_multiply_44.c":23:21)
#loc6 = loc("CWE190_Integer_Overflow__int64_t_fscanf_multiply_44.c":23:29)
#loc45 = loc("CWE190_Integer_Overflow__int64_t_fscanf_multiply_44.c":50:25)
#loc46 = loc("CWE190_Integer_Overflow__int64_t_fscanf_multiply_44.c":50:33)
#loc76 = loc("CWE190_Integer_Overflow__int64_t_fscanf_multiply_44.c":71:25)
#loc77 = loc("CWE190_Integer_Overflow__int64_t_fscanf_multiply_44.c":71:33)
#loc117 = loc(fused[#loc5, #loc6])
#loc133 = loc(fused[#loc45, #loc46])
#loc145 = loc(fused[#loc76, #loc77])
!ty__IO_FILE = !cir.struct<struct "_IO_FILE" {!s32i, !cir.ptr<!s8i>, !cir.ptr<!s8i>, !cir.ptr<!s8i>, !cir.ptr<!s8i>, !cir.ptr<!s8i>, !cir.ptr<!s8i>, !cir.ptr<!s8i>, !cir.ptr<!s8i>, !cir.ptr<!s8i>, !cir.ptr<!s8i>, !cir.ptr<!s8i>, !cir.ptr<!ty__IO_marker>, !cir.ptr<!cir.struct<struct "_IO_FILE">>, !s32i, !s32i, !s64i, !u16i, !s8i, !cir.array<!s8i x 1>, !cir.ptr<!void>, !s64i, !cir.ptr<!ty__IO_codecvt>, !cir.ptr<!ty__IO_wide_data>, !cir.ptr<!cir.struct<struct "_IO_FILE">>, !cir.ptr<!void>, !u64i, !s32i, !cir.array<!s8i x 20>} #cir.record.decl.ast>
module @"/home/ladisgin/git_proj/test_projects/juliet-c/testcases/CWE190_Integer_Overflow/s01/CWE190_Integer_Overflow__int64_t_fscanf_multiply_44.c" attributes {cir.lang = #cir.lang<c>, cir.sob = #cir.signed_overflow_behavior<undefined>, cir.triple = "x86_64-unknown-linux-gnu", dlti.dl_spec = #dlti.dl_spec<#dlti.dl_entry<f128, dense<128> : vector<2xi64>>, #dlti.dl_entry<!llvm.ptr<271>, dense<32> : vector<4xi64>>, #dlti.dl_entry<f16, dense<16> : vector<2xi64>>, #dlti.dl_entry<!llvm.ptr<270>, dense<32> : vector<4xi64>>, #dlti.dl_entry<f64, dense<64> : vector<2xi64>>, #dlti.dl_entry<i64, dense<64> : vector<2xi64>>, #dlti.dl_entry<!llvm.ptr<272>, dense<64> : vector<4xi64>>, #dlti.dl_entry<i128, dense<128> : vector<2xi64>>, #dlti.dl_entry<f80, dense<128> : vector<2xi64>>, #dlti.dl_entry<i1, dense<8> : vector<2xi64>>, #dlti.dl_entry<!llvm.ptr, dense<64> : vector<4xi64>>, #dlti.dl_entry<i8, dense<8> : vector<2xi64>>, #dlti.dl_entry<i32, dense<32> : vector<2xi64>>, #dlti.dl_entry<i16, dense<16> : vector<2xi64>>, #dlti.dl_entry<"dlti.endianness", "little">, #dlti.dl_entry<"dlti.stack_alignment", 128 : i64>>, llvm.data_layout = "e-m:e-p270:32:32-p271:32:32-p272:64:64-i64:64-i128:128-f80:128-n8:16:32:64-S128"} {
  cir.func private  @printLongLongLine(!s64i) loc(#loc115)
  cir.func internal private  @badSink(%arg0: !s64i loc(fused[#loc5, #loc6])) extra(#fn_attr) {
    %0 = cir.alloca !s64i, !cir.ptr<!s64i>, ["data", init] {alignment = 8 : i64} loc(#loc117)
    cir.store %arg0, %0 : !s64i, !cir.ptr<!s64i> loc(#loc7)
    cir.scope {
      %1 = cir.load %0 : !cir.ptr<!s64i>, !s64i loc(#loc10)
      %2 = cir.const #cir.int<0> : !s32i loc(#loc11)
      %3 = cir.cast(integral, %2 : !s32i), !s64i loc(#loc11)
      %4 = cir.cmp(gt, %1, %3) : !s64i, !s32i loc(#loc119)
      %5 = cir.cast(int_to_bool, %4 : !s32i), !cir.bool loc(#loc12)
      cir.if %5 {
        %6 = cir.alloca !s64i, !cir.ptr<!s64i>, ["result", init] {alignment = 8 : i64} loc(#loc121)
        %7 = cir.load %0 : !cir.ptr<!s64i>, !s64i loc(#loc16)
        %8 = cir.const #cir.int<2> : !s32i loc(#loc15)
        %9 = cir.cast(integral, %8 : !s32i), !s64i loc(#loc15)
        %10 = cir.binop(mul, %7, %9) nsw : !s64i loc(#loc16)
        cir.store %10, %6 : !s64i, !cir.ptr<!s64i> loc(#loc121)
        %11 = cir.load %6 : !cir.ptr<!s64i>, !s64i loc(#loc17)
        cir.call @printLongLongLine(%11) : (!s64i) -> () loc(#loc18)
      } loc(#loc120)
    } loc(#loc118)
    cir.return loc(#loc4)
  } loc(#loc116)
  cir.func private  @__isoc99_fscanf(!cir.ptr<!ty__IO_FILE>, !cir.ptr<!s8i>, ...) -> !s32i loc(#loc122)
  cir.global "private"  external @stdin : !cir.ptr<!ty__IO_FILE> {alignment = 8 : i64} loc(#loc123)
  cir.global "private"  constant internal dsolocal @".str" = #cir.const_array<"%ld\00" : !cir.array<!s8i x 4>> : !cir.array<!s8i x 4> {alignment = 1 : i64} loc(#loc124)
  cir.func no_proto  @CWE190_Integer_Overflow__int64_t_fscanf_multiply_44_bad() extra(#fn_attr) {
    %0 = cir.alloca !s64i, !cir.ptr<!s64i>, ["data"] {alignment = 8 : i64} loc(#loc126)
    %1 = cir.alloca !cir.ptr<!cir.func<!void (!s64i)>>, !cir.ptr<!cir.ptr<!cir.func<!void (!s64i)>>>, ["funcPtr", init] {alignment = 8 : i64} loc(#loc127)
    %2 = cir.get_global @badSink : !cir.ptr<!cir.func<!void (!s64i)>> loc(#loc30)
    cir.store %2, %1 : !cir.ptr<!cir.func<!void (!s64i)>>, !cir.ptr<!cir.ptr<!cir.func<!void (!s64i)>>> loc(#loc127)
    %3 = cir.const #cir.int<0> : !s64i loc(#loc31)
    cir.store %3, %0 : !s64i, !cir.ptr<!s64i> loc(#loc128)
    %4 = cir.get_global @__isoc99_fscanf : !cir.ptr<!cir.func<!s32i (!cir.ptr<!ty__IO_FILE>, !cir.ptr<!s8i>, ...)>> loc(#loc33)
    %5 = cir.get_global @stdin : !cir.ptr<!cir.ptr<!ty__IO_FILE>> loc(#loc123)
    %6 = cir.load %5 : !cir.ptr<!cir.ptr<!ty__IO_FILE>>, !cir.ptr<!ty__IO_FILE> loc(#loc34)
    %7 = cir.get_global @".str" : !cir.ptr<!cir.array<!s8i x 4>> loc(#loc124)
    %8 = cir.cast(array_to_ptrdecay, %7 : !cir.ptr<!cir.array<!s8i x 4>>), !cir.ptr<!s8i> loc(#loc124)
    %9 = cir.call @__isoc99_fscanf(%6, %8, %0) : (!cir.ptr<!ty__IO_FILE>, !cir.ptr<!s8i>, !cir.ptr<!s64i>) -> !s32i loc(#loc33)
    %10 = cir.load %1 : !cir.ptr<!cir.ptr<!cir.func<!void (!s64i)>>>, !cir.ptr<!cir.func<!void (!s64i)>> loc(#loc35)
    %11 = cir.load %0 : !cir.ptr<!s64i>, !s64i loc(#loc36)
    cir.call %10(%11) : (!cir.ptr<!cir.func<!void (!s64i)>>, !s64i) -> () loc(#loc35)
    cir.return loc(#loc26)
  } loc(#loc125)
  cir.func no_proto  @CWE190_Integer_Overflow__int64_t_fscanf_multiply_44_good() extra(#fn_attr) {
    %0 = cir.get_global @goodG2B : !cir.ptr<!cir.func<!void ()>> loc(#loc130)
    cir.call %0() : (!cir.ptr<!cir.func<!void ()>>) -> () loc(#loc39)
    %1 = cir.get_global @goodB2G : !cir.ptr<!cir.func<!void ()>> loc(#loc131)
    cir.call %1() : (!cir.ptr<!cir.func<!void ()>>) -> () loc(#loc41)
    cir.return loc(#loc38)
  } loc(#loc129)
  cir.func internal private  @goodG2BSink(%arg0: !s64i loc(fused[#loc45, #loc46])) extra(#fn_attr) {
    %0 = cir.alloca !s64i, !cir.ptr<!s64i>, ["data", init] {alignment = 8 : i64} loc(#loc133)
    cir.store %arg0, %0 : !s64i, !cir.ptr<!s64i> loc(#loc47)
    cir.scope {
      %1 = cir.load %0 : !cir.ptr<!s64i>, !s64i loc(#loc50)
      %2 = cir.const #cir.int<0> : !s32i loc(#loc51)
      %3 = cir.cast(integral, %2 : !s32i), !s64i loc(#loc51)
      %4 = cir.cmp(gt, %1, %3) : !s64i, !s32i loc(#loc135)
      %5 = cir.cast(int_to_bool, %4 : !s32i), !cir.bool loc(#loc52)
      cir.if %5 {
        %6 = cir.alloca !s64i, !cir.ptr<!s64i>, ["result", init] {alignment = 8 : i64} loc(#loc137)
        %7 = cir.load %0 : !cir.ptr<!s64i>, !s64i loc(#loc56)
        %8 = cir.const #cir.int<2> : !s32i loc(#loc55)
        %9 = cir.cast(integral, %8 : !s32i), !s64i loc(#loc55)
        %10 = cir.binop(mul, %7, %9) nsw : !s64i loc(#loc56)
        cir.store %10, %6 : !s64i, !cir.ptr<!s64i> loc(#loc137)
        %11 = cir.load %6 : !cir.ptr<!s64i>, !s64i loc(#loc57)
        cir.call @printLongLongLine(%11) : (!s64i) -> () loc(#loc58)
      } loc(#loc136)
    } loc(#loc134)
    cir.return loc(#loc44)
  } loc(#loc132)
  cir.func no_proto internal private  @goodG2B() extra(#fn_attr) {
    %0 = cir.alloca !s64i, !cir.ptr<!s64i>, ["data"] {alignment = 8 : i64} loc(#loc139)
    %1 = cir.alloca !cir.ptr<!cir.func<!void (!s64i)>>, !cir.ptr<!cir.ptr<!cir.func<!void (!s64i)>>>, ["funcPtr", init] {alignment = 8 : i64} loc(#loc140)
    %2 = cir.get_global @goodG2BSink : !cir.ptr<!cir.func<!void (!s64i)>> loc(#loc64)
    cir.store %2, %1 : !cir.ptr<!cir.func<!void (!s64i)>>, !cir.ptr<!cir.ptr<!cir.func<!void (!s64i)>>> loc(#loc140)
    %3 = cir.const #cir.int<0> : !s64i loc(#loc65)
    cir.store %3, %0 : !s64i, !cir.ptr<!s64i> loc(#loc141)
    %4 = cir.const #cir.int<2> : !s32i loc(#loc67)
    %5 = cir.cast(integral, %4 : !s32i), !s64i loc(#loc67)
    cir.store %5, %0 : !s64i, !cir.ptr<!s64i> loc(#loc142)
    %6 = cir.load %1 : !cir.ptr<!cir.ptr<!cir.func<!void (!s64i)>>>, !cir.ptr<!cir.func<!void (!s64i)>> loc(#loc69)
    %7 = cir.load %0 : !cir.ptr<!s64i>, !s64i loc(#loc70)
    cir.call %6(%7) : (!cir.ptr<!cir.func<!void (!s64i)>>, !s64i) -> () loc(#loc69)
    cir.return loc(#loc60)
  } loc(#loc138)
  cir.func private  @printLine(!cir.ptr<!s8i>) loc(#loc143)
  cir.global "private"  constant internal dsolocal @".str1" = #cir.const_array<"data value is too large to perform arithmetic safely.\00" : !cir.array<!s8i x 54>> : !cir.array<!s8i x 54> {alignment = 1 : i64} loc(#loc73)
  cir.func internal private  @goodB2GSink(%arg0: !s64i loc(fused[#loc76, #loc77])) extra(#fn_attr) {
    %0 = cir.alloca !s64i, !cir.ptr<!s64i>, ["data", init] {alignment = 8 : i64} loc(#loc145)
    cir.store %arg0, %0 : !s64i, !cir.ptr<!s64i> loc(#loc78)
    cir.scope {
      %1 = cir.load %0 : !cir.ptr<!s64i>, !s64i loc(#loc81)
      %2 = cir.const #cir.int<0> : !s32i loc(#loc82)
      %3 = cir.cast(integral, %2 : !s32i), !s64i loc(#loc82)
      %4 = cir.cmp(gt, %1, %3) : !s64i, !s32i loc(#loc147)
      %5 = cir.cast(int_to_bool, %4 : !s32i), !cir.bool loc(#loc83)
      cir.if %5 {
        cir.scope {
          %6 = cir.load %0 : !cir.ptr<!s64i>, !s64i loc(#loc87)
          %7 = cir.const #cir.int<9223372036854775807> : !s64i loc(#loc88)
          %8 = cir.const #cir.int<2> : !s32i loc(#loc89)
          %9 = cir.cast(integral, %8 : !s32i), !s64i loc(#loc89)
          %10 = cir.binop(div, %7, %9) : !s64i loc(#loc150)
          %11 = cir.cmp(lt, %6, %10) : !s64i, !s32i loc(#loc151)
          %12 = cir.cast(int_to_bool, %11 : !s32i), !cir.bool loc(#loc91)
          cir.if %12 {
            %13 = cir.alloca !s64i, !cir.ptr<!s64i>, ["result", init] {alignment = 8 : i64} loc(#loc153)
            %14 = cir.load %0 : !cir.ptr<!s64i>, !s64i loc(#loc97)
            %15 = cir.const #cir.int<2> : !s32i loc(#loc96)
            %16 = cir.cast(integral, %15 : !s32i), !s64i loc(#loc96)
            %17 = cir.binop(mul, %14, %16) nsw : !s64i loc(#loc97)
            cir.store %17, %13 : !s64i, !cir.ptr<!s64i> loc(#loc153)
            %18 = cir.load %13 : !cir.ptr<!s64i>, !s64i loc(#loc98)
            cir.call @printLongLongLine(%18) : (!s64i) -> () loc(#loc99)
          } else {
            %13 = cir.get_global @".str1" : !cir.ptr<!cir.array<!s8i x 54>> loc(#loc73)
            %14 = cir.cast(array_to_ptrdecay, %13 : !cir.ptr<!cir.array<!s8i x 54>>), !cir.ptr<!s8i> loc(#loc73)
            cir.call @printLine(%14) : (!cir.ptr<!s8i>) -> () loc(#loc100)
          } loc(#loc152)
        } loc(#loc149)
      } loc(#loc148)
    } loc(#loc146)
    cir.return loc(#loc75)
  } loc(#loc144)
  cir.func no_proto internal private  @goodB2G() extra(#fn_attr) {
    %0 = cir.alloca !s64i, !cir.ptr<!s64i>, ["data"] {alignment = 8 : i64} loc(#loc155)
    %1 = cir.alloca !cir.ptr<!cir.func<!void (!s64i)>>, !cir.ptr<!cir.ptr<!cir.func<!void (!s64i)>>>, ["funcPtr", init] {alignment = 8 : i64} loc(#loc156)
    %2 = cir.get_global @goodB2GSink : !cir.ptr<!cir.func<!void (!s64i)>> loc(#loc106)
    cir.store %2, %1 : !cir.ptr<!cir.func<!void (!s64i)>>, !cir.ptr<!cir.ptr<!cir.func<!void (!s64i)>>> loc(#loc156)
    %3 = cir.const #cir.int<0> : !s64i loc(#loc107)
    cir.store %3, %0 : !s64i, !cir.ptr<!s64i> loc(#loc157)
    %4 = cir.get_global @__isoc99_fscanf : !cir.ptr<!cir.func<!s32i (!cir.ptr<!ty__IO_FILE>, !cir.ptr<!s8i>, ...)>> loc(#loc109)
    %5 = cir.get_global @stdin : !cir.ptr<!cir.ptr<!ty__IO_FILE>> loc(#loc123)
    %6 = cir.load %5 : !cir.ptr<!cir.ptr<!ty__IO_FILE>>, !cir.ptr<!ty__IO_FILE> loc(#loc110)
    %7 = cir.get_global @".str" : !cir.ptr<!cir.array<!s8i x 4>> loc(#loc158)
    %8 = cir.cast(array_to_ptrdecay, %7 : !cir.ptr<!cir.array<!s8i x 4>>), !cir.ptr<!s8i> loc(#loc158)
    %9 = cir.call @__isoc99_fscanf(%6, %8, %0) : (!cir.ptr<!ty__IO_FILE>, !cir.ptr<!s8i>, !cir.ptr<!s64i>) -> !s32i loc(#loc109)
    %10 = cir.load %1 : !cir.ptr<!cir.ptr<!cir.func<!void (!s64i)>>>, !cir.ptr<!cir.func<!void (!s64i)>> loc(#loc113)
    %11 = cir.load %0 : !cir.ptr<!s64i>, !s64i loc(#loc114)
    cir.call %10(%11) : (!cir.ptr<!cir.func<!void (!s64i)>>, !s64i) -> () loc(#loc113)
    cir.return loc(#loc102)
  } loc(#loc154)
} loc(#loc)
#loc = loc("/home/ladisgin/git_proj/test_projects/juliet-c/testcases/CWE190_Integer_Overflow/s01/CWE190_Integer_Overflow__int64_t_fscanf_multiply_44.c":0:0)
#loc1 = loc("../../../testcasesupport/std_testcase_io.h":26:1)
#loc2 = loc("../../../testcasesupport/std_testcase_io.h":26:49)
#loc3 = loc("CWE190_Integer_Overflow__int64_t_fscanf_multiply_44.c":23:1)
#loc4 = loc("CWE190_Integer_Overflow__int64_t_fscanf_multiply_44.c":31:1)
#loc7 = loc("CWE190_Integer_Overflow__int64_t_fscanf_multiply_44.c":24:1)
#loc8 = loc("CWE190_Integer_Overflow__int64_t_fscanf_multiply_44.c":25:5)
#loc9 = loc("CWE190_Integer_Overflow__int64_t_fscanf_multiply_44.c":30:5)
#loc10 = loc("CWE190_Integer_Overflow__int64_t_fscanf_multiply_44.c":25:8)
#loc11 = loc("CWE190_Integer_Overflow__int64_t_fscanf_multiply_44.c":25:15)
#loc12 = loc("CWE190_Integer_Overflow__int64_t_fscanf_multiply_44.c":25:13)
#loc13 = loc("CWE190_Integer_Overflow__int64_t_fscanf_multiply_44.c":26:5)
#loc14 = loc("CWE190_Integer_Overflow__int64_t_fscanf_multiply_44.c":28:9)
#loc15 = loc("CWE190_Integer_Overflow__int64_t_fscanf_multiply_44.c":28:33)
#loc16 = loc("CWE190_Integer_Overflow__int64_t_fscanf_multiply_44.c":28:26)
#loc17 = loc("CWE190_Integer_Overflow__int64_t_fscanf_multiply_44.c":29:27)
#loc18 = loc("CWE190_Integer_Overflow__int64_t_fscanf_multiply_44.c":29:9)
#loc19 = loc("/usr/include/stdio.h":463:1)
#loc20 = loc("/usr/include/stdio.h":465:33)
#loc21 = loc("/usr/include/stdio.h":149:1)
#loc22 = loc("/usr/include/stdio.h":149:14)
#loc23 = loc("CWE190_Integer_Overflow__int64_t_fscanf_multiply_44.c":40:20)
#loc24 = loc("CWE190_Integer_Overflow__int64_t_fscanf_multiply_44.c":40:24)
#loc25 = loc("CWE190_Integer_Overflow__int64_t_fscanf_multiply_44.c":33:1)
#loc26 = loc("CWE190_Integer_Overflow__int64_t_fscanf_multiply_44.c":43:1)
#loc27 = loc("CWE190_Integer_Overflow__int64_t_fscanf_multiply_44.c":35:5)
#loc28 = loc("CWE190_Integer_Overflow__int64_t_fscanf_multiply_44.c":35:13)
#loc29 = loc("CWE190_Integer_Overflow__int64_t_fscanf_multiply_44.c":37:5)
#loc30 = loc("CWE190_Integer_Overflow__int64_t_fscanf_multiply_44.c":37:33)
#loc31 = loc("CWE190_Integer_Overflow__int64_t_fscanf_multiply_44.c":38:12)
#loc32 = loc("CWE190_Integer_Overflow__int64_t_fscanf_multiply_44.c":38:5)
#loc33 = loc("CWE190_Integer_Overflow__int64_t_fscanf_multiply_44.c":40:5)
#loc34 = loc("CWE190_Integer_Overflow__int64_t_fscanf_multiply_44.c":40:13)
#loc35 = loc("CWE190_Integer_Overflow__int64_t_fscanf_multiply_44.c":42:5)
#loc36 = loc("CWE190_Integer_Overflow__int64_t_fscanf_multiply_44.c":42:13)
#loc37 = loc("CWE190_Integer_Overflow__int64_t_fscanf_multiply_44.c":98:1)
#loc38 = loc("CWE190_Integer_Overflow__int64_t_fscanf_multiply_44.c":102:1)
#loc39 = loc("CWE190_Integer_Overflow__int64_t_fscanf_multiply_44.c":100:5)
#loc40 = loc("CWE190_Integer_Overflow__int64_t_fscanf_multiply_44.c":100:13)
#loc41 = loc("CWE190_Integer_Overflow__int64_t_fscanf_multiply_44.c":101:5)
#loc42 = loc("CWE190_Integer_Overflow__int64_t_fscanf_multiply_44.c":101:13)
#loc43 = loc("CWE190_Integer_Overflow__int64_t_fscanf_multiply_44.c":50:1)
#loc44 = loc("CWE190_Integer_Overflow__int64_t_fscanf_multiply_44.c":58:1)
#loc47 = loc("CWE190_Integer_Overflow__int64_t_fscanf_multiply_44.c":51:1)
#loc48 = loc("CWE190_Integer_Overflow__int64_t_fscanf_multiply_44.c":52:5)
#loc49 = loc("CWE190_Integer_Overflow__int64_t_fscanf_multiply_44.c":57:5)
#loc50 = loc("CWE190_Integer_Overflow__int64_t_fscanf_multiply_44.c":52:8)
#loc51 = loc("CWE190_Integer_Overflow__int64_t_fscanf_multiply_44.c":52:15)
#loc52 = loc("CWE190_Integer_Overflow__int64_t_fscanf_multiply_44.c":52:13)
#loc53 = loc("CWE190_Integer_Overflow__int64_t_fscanf_multiply_44.c":53:5)
#loc54 = loc("CWE190_Integer_Overflow__int64_t_fscanf_multiply_44.c":55:9)
#loc55 = loc("CWE190_Integer_Overflow__int64_t_fscanf_multiply_44.c":55:33)
#loc56 = loc("CWE190_Integer_Overflow__int64_t_fscanf_multiply_44.c":55:26)
#loc57 = loc("CWE190_Integer_Overflow__int64_t_fscanf_multiply_44.c":56:27)
#loc58 = loc("CWE190_Integer_Overflow__int64_t_fscanf_multiply_44.c":56:9)
#loc59 = loc("CWE190_Integer_Overflow__int64_t_fscanf_multiply_44.c":60:1)
#loc60 = loc("CWE190_Integer_Overflow__int64_t_fscanf_multiply_44.c":68:1)
#loc61 = loc("CWE190_Integer_Overflow__int64_t_fscanf_multiply_44.c":62:5)
#loc62 = loc("CWE190_Integer_Overflow__int64_t_fscanf_multiply_44.c":62:13)
#loc63 = loc("CWE190_Integer_Overflow__int64_t_fscanf_multiply_44.c":63:5)
#loc64 = loc("CWE190_Integer_Overflow__int64_t_fscanf_multiply_44.c":63:33)
#loc65 = loc("CWE190_Integer_Overflow__int64_t_fscanf_multiply_44.c":64:12)
#loc66 = loc("CWE190_Integer_Overflow__int64_t_fscanf_multiply_44.c":64:5)
#loc67 = loc("CWE190_Integer_Overflow__int64_t_fscanf_multiply_44.c":66:12)
#loc68 = loc("CWE190_Integer_Overflow__int64_t_fscanf_multiply_44.c":66:5)
#loc69 = loc("CWE190_Integer_Overflow__int64_t_fscanf_multiply_44.c":67:5)
#loc70 = loc("CWE190_Integer_Overflow__int64_t_fscanf_multiply_44.c":67:13)
#loc71 = loc("../../../testcasesupport/std_testcase_io.h":14:1)
#loc72 = loc("../../../testcasesupport/std_testcase_io.h":14:33)
#loc73 = loc("CWE190_Integer_Overflow__int64_t_fscanf_multiply_44.c":83:23)
#loc74 = loc("CWE190_Integer_Overflow__int64_t_fscanf_multiply_44.c":71:1)
#loc75 = loc("CWE190_Integer_Overflow__int64_t_fscanf_multiply_44.c":86:1)
#loc78 = loc("CWE190_Integer_Overflow__int64_t_fscanf_multiply_44.c":72:1)
#loc79 = loc("CWE190_Integer_Overflow__int64_t_fscanf_multiply_44.c":73:5)
#loc80 = loc("CWE190_Integer_Overflow__int64_t_fscanf_multiply_44.c":85:5)
#loc81 = loc("CWE190_Integer_Overflow__int64_t_fscanf_multiply_44.c":73:8)
#loc82 = loc("CWE190_Integer_Overflow__int64_t_fscanf_multiply_44.c":73:15)
#loc83 = loc("CWE190_Integer_Overflow__int64_t_fscanf_multiply_44.c":73:13)
#loc84 = loc("CWE190_Integer_Overflow__int64_t_fscanf_multiply_44.c":74:5)
#loc85 = loc("CWE190_Integer_Overflow__int64_t_fscanf_multiply_44.c":76:9)
#loc86 = loc("CWE190_Integer_Overflow__int64_t_fscanf_multiply_44.c":84:9)
#loc87 = loc("CWE190_Integer_Overflow__int64_t_fscanf_multiply_44.c":76:13)
#loc88 = loc("CWE190_Integer_Overflow__int64_t_fscanf_multiply_44.c":76:21)
#loc89 = loc("CWE190_Integer_Overflow__int64_t_fscanf_multiply_44.c":76:31)
#loc90 = loc("CWE190_Integer_Overflow__int64_t_fscanf_multiply_44.c":76:32)
#loc91 = loc("CWE190_Integer_Overflow__int64_t_fscanf_multiply_44.c":76:18)
#loc92 = loc("CWE190_Integer_Overflow__int64_t_fscanf_multiply_44.c":77:9)
#loc93 = loc("CWE190_Integer_Overflow__int64_t_fscanf_multiply_44.c":80:9)
#loc94 = loc("CWE190_Integer_Overflow__int64_t_fscanf_multiply_44.c":82:9)
#loc95 = loc("CWE190_Integer_Overflow__int64_t_fscanf_multiply_44.c":78:13)
#loc96 = loc("CWE190_Integer_Overflow__int64_t_fscanf_multiply_44.c":78:37)
#loc97 = loc("CWE190_Integer_Overflow__int64_t_fscanf_multiply_44.c":78:30)
#loc98 = loc("CWE190_Integer_Overflow__int64_t_fscanf_multiply_44.c":79:31)
#loc99 = loc("CWE190_Integer_Overflow__int64_t_fscanf_multiply_44.c":79:13)
#loc100 = loc("CWE190_Integer_Overflow__int64_t_fscanf_multiply_44.c":83:13)
#loc101 = loc("CWE190_Integer_Overflow__int64_t_fscanf_multiply_44.c":88:1)
#loc102 = loc("CWE190_Integer_Overflow__int64_t_fscanf_multiply_44.c":96:1)
#loc103 = loc("CWE190_Integer_Overflow__int64_t_fscanf_multiply_44.c":90:5)
#loc104 = loc("CWE190_Integer_Overflow__int64_t_fscanf_multiply_44.c":90:13)
#loc105 = loc("CWE190_Integer_Overflow__int64_t_fscanf_multiply_44.c":91:5)
#loc106 = loc("CWE190_Integer_Overflow__int64_t_fscanf_multiply_44.c":91:33)
#loc107 = loc("CWE190_Integer_Overflow__int64_t_fscanf_multiply_44.c":92:12)
#loc108 = loc("CWE190_Integer_Overflow__int64_t_fscanf_multiply_44.c":92:5)
#loc109 = loc("CWE190_Integer_Overflow__int64_t_fscanf_multiply_44.c":94:5)
#loc110 = loc("CWE190_Integer_Overflow__int64_t_fscanf_multiply_44.c":94:13)
#loc111 = loc("CWE190_Integer_Overflow__int64_t_fscanf_multiply_44.c":94:20)
#loc112 = loc("CWE190_Integer_Overflow__int64_t_fscanf_multiply_44.c":94:24)
#loc113 = loc("CWE190_Integer_Overflow__int64_t_fscanf_multiply_44.c":95:5)
#loc114 = loc("CWE190_Integer_Overflow__int64_t_fscanf_multiply_44.c":95:13)
#loc115 = loc(fused[#loc1, #loc2])
#loc116 = loc(fused[#loc3, #loc4])
#loc118 = loc(fused[#loc8, #loc9])
#loc119 = loc(fused[#loc10, #loc11])
#loc120 = loc(fused[#loc13, #loc9])
#loc121 = loc(fused[#loc14, #loc15])
#loc122 = loc(fused[#loc19, #loc20])
#loc123 = loc(fused[#loc21, #loc22])
#loc124 = loc(fused[#loc23, #loc24])
#loc125 = loc(fused[#loc25, #loc26])
#loc126 = loc(fused[#loc27, #loc28])
#loc127 = loc(fused[#loc29, #loc30])
#loc128 = loc(fused[#loc32, #loc31])
#loc129 = loc(fused[#loc37, #loc38])
#loc130 = loc(fused[#loc39, #loc40])
#loc131 = loc(fused[#loc41, #loc42])
#loc132 = loc(fused[#loc43, #loc44])
#loc134 = loc(fused[#loc48, #loc49])
#loc135 = loc(fused[#loc50, #loc51])
#loc136 = loc(fused[#loc53, #loc49])
#loc137 = loc(fused[#loc54, #loc55])
#loc138 = loc(fused[#loc59, #loc60])
#loc139 = loc(fused[#loc61, #loc62])
#loc140 = loc(fused[#loc63, #loc64])
#loc141 = loc(fused[#loc66, #loc65])
#loc142 = loc(fused[#loc68, #loc67])
#loc143 = loc(fused[#loc71, #loc72])
#loc144 = loc(fused[#loc74, #loc75])
#loc146 = loc(fused[#loc79, #loc80])
#loc147 = loc(fused[#loc81, #loc82])
#loc148 = loc(fused[#loc84, #loc80])
#loc149 = loc(fused[#loc85, #loc86])
#loc150 = loc(fused[#loc88, #loc89])
#loc151 = loc(fused[#loc87, #loc90])
#loc152 = loc(fused[#loc92, #loc93, #loc94, #loc86])
#loc153 = loc(fused[#loc95, #loc96])
#loc154 = loc(fused[#loc101, #loc102])
#loc155 = loc(fused[#loc103, #loc104])
#loc156 = loc(fused[#loc105, #loc106])
#loc157 = loc(fused[#loc108, #loc107])
#loc158 = loc(fused[#loc111, #loc112])
