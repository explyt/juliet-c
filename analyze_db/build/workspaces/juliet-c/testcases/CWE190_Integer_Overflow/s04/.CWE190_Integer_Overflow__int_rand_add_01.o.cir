!s32i = !cir.int<s, 32>
!s8i = !cir.int<s, 8>
!u32i = !cir.int<u, 32>
#fn_attr = #cir<extra({nothrow = #cir.nothrow})>
#fn_attr1 = #cir<extra({inline = #cir.inline<no>, nothrow = #cir.nothrow, optnone = #cir.optnone, uwtable = #cir.uwtable<async>})>
module @"/workspaces/juliet-c/testcases/CWE190_Integer_Overflow/s04/CWE190_Integer_Overflow__int_rand_add_01.c" attributes {cir.lang = #cir.lang<c>, cir.sob = #cir.signed_overflow_behavior<undefined>, cir.triple = "x86_64-unknown-linux-gnu", cir.type_size_info = #cir.type_size_info<char = 8, int = 32, size_t = 64>, cir.uwtable = #cir.uwtable<async>, dlti.dl_spec = #dlti.dl_spec<i8 = dense<8> : vector<2xi64>, i16 = dense<16> : vector<2xi64>, i32 = dense<32> : vector<2xi64>, f64 = dense<64> : vector<2xi64>, f16 = dense<16> : vector<2xi64>, !llvm.ptr<271> = dense<32> : vector<4xi64>, f128 = dense<128> : vector<2xi64>, !llvm.ptr<272> = dense<64> : vector<4xi64>, i64 = dense<64> : vector<2xi64>, i128 = dense<128> : vector<2xi64>, f80 = dense<128> : vector<2xi64>, !llvm.ptr<270> = dense<32> : vector<4xi64>, i1 = dense<8> : vector<2xi64>, !llvm.ptr = dense<64> : vector<4xi64>, "dlti.endianness" = "little", "dlti.stack_alignment" = 128 : i64, "dlti.mangling_mode" = "e">} {
  cir.func private @rand() -> !s32i extra(#fn_attr) loc(#loc65)
  cir.func private @printIntLine(!s32i) loc(#loc66)
  cir.func no_proto @CWE190_Integer_Overflow__int_rand_add_01_bad() extra(#fn_attr1) {
    %0 = cir.alloca !s32i, !cir.ptr<!s32i>, ["data"] {alignment = 4 : i64} loc(#loc68)
    %1 = cir.const #cir.int<0> : !s32i loc(#loc9)
    cir.store %1, %0 : !s32i, !cir.ptr<!s32i> loc(#loc69)
    %2 = cir.call @rand() : () -> !s32i extra(#fn_attr) loc(#loc11)
    %3 = cir.const #cir.int<1> : !s32i loc(#loc11)
    %4 = cir.binop(and, %2, %3) : !s32i loc(#loc11)
    %5 = cir.cast(int_to_bool, %4 : !s32i), !cir.bool loc(#loc11)
    %6 = cir.ternary(%5, true {
      %8 = cir.call @rand() : () -> !s32i extra(#fn_attr) loc(#loc11)
      %9 = cir.cast(integral, %8 : !s32i), !u32i loc(#loc11)
      %10 = cir.const #cir.int<30> : !s32i loc(#loc11)
      %11 = cir.shift(left, %9 : !u32i, %10 : !s32i) -> !u32i loc(#loc11)
      %12 = cir.call @rand() : () -> !s32i extra(#fn_attr) loc(#loc11)
      %13 = cir.cast(integral, %12 : !s32i), !u32i loc(#loc11)
      %14 = cir.const #cir.int<15> : !s32i loc(#loc11)
      %15 = cir.shift(left, %13 : !u32i, %14 : !s32i) -> !u32i loc(#loc11)
      %16 = cir.binop(xor, %11, %15) : !u32i loc(#loc11)
      %17 = cir.call @rand() : () -> !s32i extra(#fn_attr) loc(#loc11)
      %18 = cir.cast(integral, %17 : !s32i), !u32i loc(#loc11)
      %19 = cir.binop(xor, %16, %18) : !u32i loc(#loc11)
      cir.yield %19 : !u32i loc(#loc11)
    }, false {
      %8 = cir.call @rand() : () -> !s32i extra(#fn_attr) loc(#loc11)
      %9 = cir.cast(integral, %8 : !s32i), !u32i loc(#loc11)
      %10 = cir.const #cir.int<30> : !s32i loc(#loc11)
      %11 = cir.shift(left, %9 : !u32i, %10 : !s32i) -> !u32i loc(#loc11)
      %12 = cir.call @rand() : () -> !s32i extra(#fn_attr) loc(#loc11)
      %13 = cir.cast(integral, %12 : !s32i), !u32i loc(#loc11)
      %14 = cir.const #cir.int<15> : !s32i loc(#loc11)
      %15 = cir.shift(left, %13 : !u32i, %14 : !s32i) -> !u32i loc(#loc11)
      %16 = cir.binop(xor, %11, %15) : !u32i loc(#loc11)
      %17 = cir.call @rand() : () -> !s32i extra(#fn_attr) loc(#loc11)
      %18 = cir.cast(integral, %17 : !s32i), !u32i loc(#loc11)
      %19 = cir.binop(xor, %16, %18) : !u32i loc(#loc11)
      %20 = cir.unary(minus, %19) : !u32i, !u32i loc(#loc11)
      %21 = cir.const #cir.int<1> : !s32i loc(#loc11)
      %22 = cir.cast(integral, %21 : !s32i), !u32i loc(#loc11)
      %23 = cir.binop(sub, %20, %22) : !u32i loc(#loc11)
      cir.yield %23 : !u32i loc(#loc11)
    }) : (!cir.bool) -> !u32i loc(#loc11)
    %7 = cir.cast(integral, %6 : !u32i), !s32i loc(#loc11)
    cir.store %7, %0 : !s32i, !cir.ptr<!s32i> loc(#loc70)
    cir.scope {
      %8 = cir.alloca !s32i, !cir.ptr<!s32i>, ["result", init] {alignment = 4 : i64} loc(#loc72)
      %9 = cir.load %0 : !cir.ptr<!s32i>, !s32i loc(#loc17)
      %10 = cir.const #cir.int<1> : !s32i loc(#loc16)
      %11 = cir.binop(add, %9, %10) nsw : !s32i loc(#loc17)
      cir.store %11, %8 : !s32i, !cir.ptr<!s32i> loc(#loc72)
      %12 = cir.load %8 : !cir.ptr<!s32i>, !s32i loc(#loc18)
      cir.call @printIntLine(%12) : (!s32i) -> () loc(#loc19)
    } loc(#loc71)
    cir.return loc(#loc6)
  } loc(#loc67)
  cir.func no_proto @CWE190_Integer_Overflow__int_rand_add_01_good() extra(#fn_attr1) {
    %0 = cir.get_global @goodG2B : !cir.ptr<!cir.func<()>> loc(#loc74)
    cir.call %0() : (!cir.ptr<!cir.func<()>>) -> () loc(#loc22)
    %1 = cir.get_global @goodB2G : !cir.ptr<!cir.func<()>> loc(#loc75)
    cir.call %1() : (!cir.ptr<!cir.func<()>>) -> () loc(#loc24)
    cir.return loc(#loc21)
  } loc(#loc73)
  cir.func no_proto internal private @goodG2B() extra(#fn_attr1) {
    %0 = cir.alloca !s32i, !cir.ptr<!s32i>, ["data"] {alignment = 4 : i64} loc(#loc77)
    %1 = cir.const #cir.int<0> : !s32i loc(#loc30)
    cir.store %1, %0 : !s32i, !cir.ptr<!s32i> loc(#loc78)
    %2 = cir.const #cir.int<2> : !s32i loc(#loc32)
    cir.store %2, %0 : !s32i, !cir.ptr<!s32i> loc(#loc79)
    cir.scope {
      %3 = cir.alloca !s32i, !cir.ptr<!s32i>, ["result", init] {alignment = 4 : i64} loc(#loc81)
      %4 = cir.load %0 : !cir.ptr<!s32i>, !s32i loc(#loc38)
      %5 = cir.const #cir.int<1> : !s32i loc(#loc37)
      %6 = cir.binop(add, %4, %5) nsw : !s32i loc(#loc38)
      cir.store %6, %3 : !s32i, !cir.ptr<!s32i> loc(#loc81)
      %7 = cir.load %3 : !cir.ptr<!s32i>, !s32i loc(#loc39)
      cir.call @printIntLine(%7) : (!s32i) -> () loc(#loc40)
    } loc(#loc80)
    cir.return loc(#loc27)
  } loc(#loc76)
  cir.func private @printLine(!cir.ptr<!s8i>) loc(#loc82)
  cir.global "private" constant cir_private dsolocal @".str" = #cir.const_array<"data value is too large to perform arithmetic safely.\00" : !cir.array<!s8i x 54>> : !cir.array<!s8i x 54> {alignment = 1 : i64} loc(#loc43)
  cir.func no_proto internal private @goodB2G() extra(#fn_attr1) {
    %0 = cir.alloca !s32i, !cir.ptr<!s32i>, ["data"] {alignment = 4 : i64} loc(#loc84)
    %1 = cir.const #cir.int<0> : !s32i loc(#loc48)
    cir.store %1, %0 : !s32i, !cir.ptr<!s32i> loc(#loc85)
    %2 = cir.call @rand() : () -> !s32i extra(#fn_attr) loc(#loc50)
    %3 = cir.const #cir.int<1> : !s32i loc(#loc50)
    %4 = cir.binop(and, %2, %3) : !s32i loc(#loc50)
    %5 = cir.cast(int_to_bool, %4 : !s32i), !cir.bool loc(#loc50)
    %6 = cir.ternary(%5, true {
      %8 = cir.call @rand() : () -> !s32i extra(#fn_attr) loc(#loc50)
      %9 = cir.cast(integral, %8 : !s32i), !u32i loc(#loc50)
      %10 = cir.const #cir.int<30> : !s32i loc(#loc50)
      %11 = cir.shift(left, %9 : !u32i, %10 : !s32i) -> !u32i loc(#loc50)
      %12 = cir.call @rand() : () -> !s32i extra(#fn_attr) loc(#loc50)
      %13 = cir.cast(integral, %12 : !s32i), !u32i loc(#loc50)
      %14 = cir.const #cir.int<15> : !s32i loc(#loc50)
      %15 = cir.shift(left, %13 : !u32i, %14 : !s32i) -> !u32i loc(#loc50)
      %16 = cir.binop(xor, %11, %15) : !u32i loc(#loc50)
      %17 = cir.call @rand() : () -> !s32i extra(#fn_attr) loc(#loc50)
      %18 = cir.cast(integral, %17 : !s32i), !u32i loc(#loc50)
      %19 = cir.binop(xor, %16, %18) : !u32i loc(#loc50)
      cir.yield %19 : !u32i loc(#loc50)
    }, false {
      %8 = cir.call @rand() : () -> !s32i extra(#fn_attr) loc(#loc50)
      %9 = cir.cast(integral, %8 : !s32i), !u32i loc(#loc50)
      %10 = cir.const #cir.int<30> : !s32i loc(#loc50)
      %11 = cir.shift(left, %9 : !u32i, %10 : !s32i) -> !u32i loc(#loc50)
      %12 = cir.call @rand() : () -> !s32i extra(#fn_attr) loc(#loc50)
      %13 = cir.cast(integral, %12 : !s32i), !u32i loc(#loc50)
      %14 = cir.const #cir.int<15> : !s32i loc(#loc50)
      %15 = cir.shift(left, %13 : !u32i, %14 : !s32i) -> !u32i loc(#loc50)
      %16 = cir.binop(xor, %11, %15) : !u32i loc(#loc50)
      %17 = cir.call @rand() : () -> !s32i extra(#fn_attr) loc(#loc50)
      %18 = cir.cast(integral, %17 : !s32i), !u32i loc(#loc50)
      %19 = cir.binop(xor, %16, %18) : !u32i loc(#loc50)
      %20 = cir.unary(minus, %19) : !u32i, !u32i loc(#loc50)
      %21 = cir.const #cir.int<1> : !s32i loc(#loc50)
      %22 = cir.cast(integral, %21 : !s32i), !u32i loc(#loc50)
      %23 = cir.binop(sub, %20, %22) : !u32i loc(#loc50)
      cir.yield %23 : !u32i loc(#loc50)
    }) : (!cir.bool) -> !u32i loc(#loc50)
    %7 = cir.cast(integral, %6 : !u32i), !s32i loc(#loc50)
    cir.store %7, %0 : !s32i, !cir.ptr<!s32i> loc(#loc86)
    cir.scope {
      %8 = cir.load %0 : !cir.ptr<!s32i>, !s32i loc(#loc54)
      %9 = cir.const #cir.int<2147483647> : !s32i loc(#loc55)
      %10 = cir.cmp(lt, %8, %9) : !s32i, !cir.bool loc(#loc88)
      cir.if %10 {
        %11 = cir.alloca !s32i, !cir.ptr<!s32i>, ["result", init] {alignment = 4 : i64} loc(#loc90)
        %12 = cir.load %0 : !cir.ptr<!s32i>, !s32i loc(#loc61)
        %13 = cir.const #cir.int<1> : !s32i loc(#loc60)
        %14 = cir.binop(add, %12, %13) nsw : !s32i loc(#loc61)
        cir.store %14, %11 : !s32i, !cir.ptr<!s32i> loc(#loc90)
        %15 = cir.load %11 : !cir.ptr<!s32i>, !s32i loc(#loc62)
        cir.call @printIntLine(%15) : (!s32i) -> () loc(#loc63)
      } else {
        %11 = cir.get_global @".str" : !cir.ptr<!cir.array<!s8i x 54>> loc(#loc43)
        %12 = cir.cast(array_to_ptrdecay, %11 : !cir.ptr<!cir.array<!s8i x 54>>), !cir.ptr<!s8i> loc(#loc43)
        cir.call @printLine(%12) : (!cir.ptr<!s8i>) -> () loc(#loc64)
      } loc(#loc89)
    } loc(#loc87)
    cir.return loc(#loc45)
  } loc(#loc83)
} loc(#loc)
#loc = loc("/workspaces/juliet-c/testcases/CWE190_Integer_Overflow/s04/CWE190_Integer_Overflow__int_rand_add_01.c":0:0)
#loc1 = loc("/usr/include/stdlib.h":573:1)
#loc2 = loc("/usr/include/stdlib.h":573:24)
#loc3 = loc("../../../testcasesupport/std_testcase_io.h":18:1)
#loc4 = loc("../../../testcasesupport/std_testcase_io.h":18:33)
#loc5 = loc("CWE190_Integer_Overflow__int_rand_add_01.c":22:1)
#loc6 = loc("CWE190_Integer_Overflow__int_rand_add_01.c":34:1)
#loc7 = loc("CWE190_Integer_Overflow__int_rand_add_01.c":24:5)
#loc8 = loc("CWE190_Integer_Overflow__int_rand_add_01.c":24:9)
#loc9 = loc("CWE190_Integer_Overflow__int_rand_add_01.c":26:12)
#loc10 = loc("CWE190_Integer_Overflow__int_rand_add_01.c":26:5)
#loc11 = loc("CWE190_Integer_Overflow__int_rand_add_01.c":28:12)
#loc12 = loc("CWE190_Integer_Overflow__int_rand_add_01.c":28:5)
#loc13 = loc("CWE190_Integer_Overflow__int_rand_add_01.c":29:5)
#loc14 = loc("CWE190_Integer_Overflow__int_rand_add_01.c":33:5)
#loc15 = loc("CWE190_Integer_Overflow__int_rand_add_01.c":31:9)
#loc16 = loc("CWE190_Integer_Overflow__int_rand_add_01.c":31:29)
#loc17 = loc("CWE190_Integer_Overflow__int_rand_add_01.c":31:22)
#loc18 = loc("CWE190_Integer_Overflow__int_rand_add_01.c":32:22)
#loc19 = loc("CWE190_Integer_Overflow__int_rand_add_01.c":32:9)
#loc20 = loc("CWE190_Integer_Overflow__int_rand_add_01.c":75:1)
#loc21 = loc("CWE190_Integer_Overflow__int_rand_add_01.c":79:1)
#loc22 = loc("CWE190_Integer_Overflow__int_rand_add_01.c":77:5)
#loc23 = loc("CWE190_Integer_Overflow__int_rand_add_01.c":77:13)
#loc24 = loc("CWE190_Integer_Overflow__int_rand_add_01.c":78:5)
#loc25 = loc("CWE190_Integer_Overflow__int_rand_add_01.c":78:13)
#loc26 = loc("CWE190_Integer_Overflow__int_rand_add_01.c":41:1)
#loc27 = loc("CWE190_Integer_Overflow__int_rand_add_01.c":53:1)
#loc28 = loc("CWE190_Integer_Overflow__int_rand_add_01.c":43:5)
#loc29 = loc("CWE190_Integer_Overflow__int_rand_add_01.c":43:9)
#loc30 = loc("CWE190_Integer_Overflow__int_rand_add_01.c":45:12)
#loc31 = loc("CWE190_Integer_Overflow__int_rand_add_01.c":45:5)
#loc32 = loc("CWE190_Integer_Overflow__int_rand_add_01.c":47:12)
#loc33 = loc("CWE190_Integer_Overflow__int_rand_add_01.c":47:5)
#loc34 = loc("CWE190_Integer_Overflow__int_rand_add_01.c":48:5)
#loc35 = loc("CWE190_Integer_Overflow__int_rand_add_01.c":52:5)
#loc36 = loc("CWE190_Integer_Overflow__int_rand_add_01.c":50:9)
#loc37 = loc("CWE190_Integer_Overflow__int_rand_add_01.c":50:29)
#loc38 = loc("CWE190_Integer_Overflow__int_rand_add_01.c":50:22)
#loc39 = loc("CWE190_Integer_Overflow__int_rand_add_01.c":51:22)
#loc40 = loc("CWE190_Integer_Overflow__int_rand_add_01.c":51:9)
#loc41 = loc("../../../testcasesupport/std_testcase_io.h":14:1)
#loc42 = loc("../../../testcasesupport/std_testcase_io.h":14:33)
#loc43 = loc("CWE190_Integer_Overflow__int_rand_add_01.c":71:19)
#loc44 = loc("CWE190_Integer_Overflow__int_rand_add_01.c":56:1)
#loc45 = loc("CWE190_Integer_Overflow__int_rand_add_01.c":73:1)
#loc46 = loc("CWE190_Integer_Overflow__int_rand_add_01.c":58:5)
#loc47 = loc("CWE190_Integer_Overflow__int_rand_add_01.c":58:9)
#loc48 = loc("CWE190_Integer_Overflow__int_rand_add_01.c":60:12)
#loc49 = loc("CWE190_Integer_Overflow__int_rand_add_01.c":60:5)
#loc50 = loc("CWE190_Integer_Overflow__int_rand_add_01.c":62:12)
#loc51 = loc("CWE190_Integer_Overflow__int_rand_add_01.c":62:5)
#loc52 = loc("CWE190_Integer_Overflow__int_rand_add_01.c":64:5)
#loc53 = loc("CWE190_Integer_Overflow__int_rand_add_01.c":72:5)
#loc54 = loc("CWE190_Integer_Overflow__int_rand_add_01.c":64:9)
#loc55 = loc("CWE190_Integer_Overflow__int_rand_add_01.c":64:16)
#loc56 = loc("CWE190_Integer_Overflow__int_rand_add_01.c":65:5)
#loc57 = loc("CWE190_Integer_Overflow__int_rand_add_01.c":68:5)
#loc58 = loc("CWE190_Integer_Overflow__int_rand_add_01.c":70:5)
#loc59 = loc("CWE190_Integer_Overflow__int_rand_add_01.c":66:9)
#loc60 = loc("CWE190_Integer_Overflow__int_rand_add_01.c":66:29)
#loc61 = loc("CWE190_Integer_Overflow__int_rand_add_01.c":66:22)
#loc62 = loc("CWE190_Integer_Overflow__int_rand_add_01.c":67:22)
#loc63 = loc("CWE190_Integer_Overflow__int_rand_add_01.c":67:9)
#loc64 = loc("CWE190_Integer_Overflow__int_rand_add_01.c":71:9)
#loc65 = loc(fused[#loc1, #loc2])
#loc66 = loc(fused[#loc3, #loc4])
#loc67 = loc(fused[#loc5, #loc6])
#loc68 = loc(fused[#loc7, #loc8])
#loc69 = loc(fused[#loc10, #loc9])
#loc70 = loc(fused[#loc12, #loc11])
#loc71 = loc(fused[#loc13, #loc14])
#loc72 = loc(fused[#loc15, #loc16])
#loc73 = loc(fused[#loc20, #loc21])
#loc74 = loc(fused[#loc22, #loc23])
#loc75 = loc(fused[#loc24, #loc25])
#loc76 = loc(fused[#loc26, #loc27])
#loc77 = loc(fused[#loc28, #loc29])
#loc78 = loc(fused[#loc31, #loc30])
#loc79 = loc(fused[#loc33, #loc32])
#loc80 = loc(fused[#loc34, #loc35])
#loc81 = loc(fused[#loc36, #loc37])
#loc82 = loc(fused[#loc41, #loc42])
#loc83 = loc(fused[#loc44, #loc45])
#loc84 = loc(fused[#loc46, #loc47])
#loc85 = loc(fused[#loc49, #loc48])
#loc86 = loc(fused[#loc51, #loc50])
#loc87 = loc(fused[#loc52, #loc53])
#loc88 = loc(fused[#loc54, #loc55])
#loc89 = loc(fused[#loc56, #loc57, #loc58, #loc53])
#loc90 = loc(fused[#loc59, #loc60])
