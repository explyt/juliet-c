!s16i = !cir.int<s, 16>
!s32i = !cir.int<s, 32>
!s8i = !cir.int<s, 8>
!u32i = !cir.int<u, 32>
!void = !cir.void
#fn_attr = #cir<extra({nothrow = #cir.nothrow})>
#fn_attr1 = #cir<extra({inline = #cir.inline<no>, nothrow = #cir.nothrow, optnone = #cir.optnone})>
#loc21 = loc("CWE197_Numeric_Truncation_Error__short_rand_11.c":29:23)
module @"/home/ladisgin/git_proj/juliet-c/testcases/CWE197_Numeric_Truncation_Error/s02/CWE197_Numeric_Truncation_Error__short_rand_11.c" attributes {cir.lang = #cir.lang<c>, cir.sob = #cir.signed_overflow_behavior<undefined>, cir.triple = "x86_64-unknown-linux-gnu", dlti.dl_spec = #dlti.dl_spec<i64 = dense<64> : vector<2xi64>, i128 = dense<128> : vector<2xi64>, f80 = dense<128> : vector<2xi64>, i1 = dense<8> : vector<2xi64>, !llvm.ptr = dense<64> : vector<4xi64>, i16 = dense<16> : vector<2xi64>, i8 = dense<8> : vector<2xi64>, i32 = dense<32> : vector<2xi64>, f128 = dense<128> : vector<2xi64>, !llvm.ptr<270> = dense<32> : vector<4xi64>, f64 = dense<64> : vector<2xi64>, f16 = dense<16> : vector<2xi64>, !llvm.ptr<271> = dense<32> : vector<4xi64>, !llvm.ptr<272> = dense<64> : vector<4xi64>, "dlti.stack_alignment" = 128 : i64, "dlti.endianness" = "little">} {
  cir.func no_proto private @globalReturnsTrue(...) -> !s32i loc(#loc83)
  cir.func private @rand() -> !s32i extra(#fn_attr) loc(#loc84)
  cir.func private @printHexCharLine(!s8i) loc(#loc85)
  cir.func no_proto @CWE197_Numeric_Truncation_Error__short_rand_11_bad() extra(#fn_attr1) {
    %0 = cir.alloca !s8i, !cir.ptr<!s8i>, ["charData", init] {alignment = 1 : i64} loc(#loc87)
    %1 = cir.alloca !s16i, !cir.ptr<!s16i>, ["data"] {alignment = 2 : i64} loc(#loc88)
    %2 = cir.const #cir.int<1> : !s32i loc(#loc13)
    %3 = cir.unary(minus, %2) : !s32i, !s32i loc(#loc14)
    %4 = cir.cast(integral, %3 : !s32i), !s16i loc(#loc14)
    cir.store %4, %1 : !s16i, !cir.ptr<!s16i> loc(#loc89)
    cir.br ^bb1 loc(#loc90)
  ^bb1:  // pred: ^bb0
    %5 = cir.get_global @globalReturnsTrue : !cir.ptr<!cir.func<!s32i (...)>> loc(#loc91)
    %6 = cir.cast(bitcast, %5 : !cir.ptr<!cir.func<!s32i (...)>>), !cir.ptr<!cir.func<!s32i ()>> loc(#loc91)
    %7 = cir.call %6() : (!cir.ptr<!cir.func<!s32i ()>>) -> !s32i loc(#loc18)
    %8 = cir.cast(int_to_bool, %7 : !s32i), !cir.bool loc(#loc18)
    cir.brcond %8 ^bb2, ^bb7 loc(#loc92)
  ^bb2:  // pred: ^bb1
    %9 = cir.call @rand() : () -> !s32i extra(#fn_attr) loc(#loc21)
    %10 = cir.const #cir.int<1> : !s32i loc(#loc21)
    %11 = cir.binop(and, %9, %10) : !s32i loc(#loc21)
    %12 = cir.cast(int_to_bool, %11 : !s32i), !cir.bool loc(#loc21)
    cir.brcond %12 ^bb3, ^bb4 loc(#loc21)
  ^bb3:  // pred: ^bb2
    %13 = cir.call @rand() : () -> !s32i extra(#fn_attr) loc(#loc21)
    %14 = cir.cast(integral, %13 : !s32i), !u32i loc(#loc21)
    %15 = cir.const #cir.int<30> : !s32i loc(#loc21)
    %16 = cir.shift(left, %14 : !u32i, %15 : !s32i) -> !u32i loc(#loc21)
    %17 = cir.call @rand() : () -> !s32i extra(#fn_attr) loc(#loc21)
    %18 = cir.cast(integral, %17 : !s32i), !u32i loc(#loc21)
    %19 = cir.const #cir.int<15> : !s32i loc(#loc21)
    %20 = cir.shift(left, %18 : !u32i, %19 : !s32i) -> !u32i loc(#loc21)
    %21 = cir.binop(xor, %16, %20) : !u32i loc(#loc21)
    %22 = cir.call @rand() : () -> !s32i extra(#fn_attr) loc(#loc21)
    %23 = cir.cast(integral, %22 : !s32i), !u32i loc(#loc21)
    %24 = cir.binop(xor, %21, %23) : !u32i loc(#loc21)
    cir.br ^bb5(%24 : !u32i) loc(#loc21)
  ^bb4:  // pred: ^bb2
    %25 = cir.call @rand() : () -> !s32i extra(#fn_attr) loc(#loc21)
    %26 = cir.cast(integral, %25 : !s32i), !u32i loc(#loc21)
    %27 = cir.const #cir.int<30> : !s32i loc(#loc21)
    %28 = cir.shift(left, %26 : !u32i, %27 : !s32i) -> !u32i loc(#loc21)
    %29 = cir.call @rand() : () -> !s32i extra(#fn_attr) loc(#loc21)
    %30 = cir.cast(integral, %29 : !s32i), !u32i loc(#loc21)
    %31 = cir.const #cir.int<15> : !s32i loc(#loc21)
    %32 = cir.shift(left, %30 : !u32i, %31 : !s32i) -> !u32i loc(#loc21)
    %33 = cir.binop(xor, %28, %32) : !u32i loc(#loc21)
    %34 = cir.call @rand() : () -> !s32i extra(#fn_attr) loc(#loc21)
    %35 = cir.cast(integral, %34 : !s32i), !u32i loc(#loc21)
    %36 = cir.binop(xor, %33, %35) : !u32i loc(#loc21)
    %37 = cir.unary(minus, %36) : !u32i, !u32i loc(#loc21)
    %38 = cir.const #cir.int<1> : !s32i loc(#loc21)
    %39 = cir.cast(integral, %38 : !s32i), !u32i loc(#loc21)
    %40 = cir.binop(sub, %37, %39) : !u32i loc(#loc21)
    cir.br ^bb5(%40 : !u32i) loc(#loc21)
  ^bb5(%41: !u32i loc("CWE197_Numeric_Truncation_Error__short_rand_11.c":29:23)):  // 2 preds: ^bb3, ^bb4
    cir.br ^bb6 loc(#loc21)
  ^bb6:  // pred: ^bb5
    %42 = cir.cast(integral, %41 : !u32i), !s32i loc(#loc21)
    %43 = cir.cast(integral, %42 : !s32i), !s16i loc(#loc21)
    cir.store %43, %1 : !s16i, !cir.ptr<!s16i> loc(#loc93)
    cir.br ^bb7 loc(#loc17)
  ^bb7:  // 2 preds: ^bb1, ^bb6
    cir.br ^bb8 loc(#loc17)
  ^bb8:  // pred: ^bb7
    cir.br ^bb9 loc(#loc94)
  ^bb9:  // pred: ^bb8
    %44 = cir.load %1 : !cir.ptr<!s16i>, !s16i loc(#loc10)
    %45 = cir.cast(integral, %44 : !s16i), !s8i loc(#loc10)
    cir.store %45, %0 : !s8i, !cir.ptr<!s8i> loc(#loc87)
    %46 = cir.load %0 : !cir.ptr<!s8i>, !s8i loc(#loc25)
    cir.call @printHexCharLine(%46) : (!s8i) -> () loc(#loc26)
    cir.br ^bb10 loc(#loc24)
  ^bb10:  // pred: ^bb9
    cir.return loc(#loc8)
  } loc(#loc86)
  cir.func no_proto @CWE197_Numeric_Truncation_Error__short_rand_11_good() extra(#fn_attr1) {
    %0 = cir.get_global @goodG2B1 : !cir.ptr<!cir.func<!void ()>> loc(#loc96)
    cir.call %0() : (!cir.ptr<!cir.func<!void ()>>) -> () loc(#loc29)
    %1 = cir.get_global @goodG2B2 : !cir.ptr<!cir.func<!void ()>> loc(#loc97)
    cir.call %1() : (!cir.ptr<!cir.func<!void ()>>) -> () loc(#loc31)
    cir.return loc(#loc28)
  } loc(#loc95)
  cir.func no_proto private @globalReturnsFalse(...) -> !s32i loc(#loc98)
  cir.func private @printLine(!cir.ptr<!s8i>) loc(#loc99)
  cir.global "private" constant cir_private dsolocal @".str" = #cir.const_array<"Benign, fixed string\00" : !cir.array<!s8i x 21>> : !cir.array<!s8i x 21> {alignment = 1 : i64} loc(#loc37)
  cir.func no_proto internal private @goodG2B1() extra(#fn_attr1) {
    %0 = cir.alloca !s8i, !cir.ptr<!s8i>, ["charData", init] {alignment = 1 : i64} loc(#loc101)
    %1 = cir.alloca !s16i, !cir.ptr<!s16i>, ["data"] {alignment = 2 : i64} loc(#loc102)
    %2 = cir.const #cir.int<1> : !s32i loc(#loc44)
    %3 = cir.unary(minus, %2) : !s32i, !s32i loc(#loc45)
    %4 = cir.cast(integral, %3 : !s32i), !s16i loc(#loc45)
    cir.store %4, %1 : !s16i, !cir.ptr<!s16i> loc(#loc103)
    cir.br ^bb1 loc(#loc104)
  ^bb1:  // pred: ^bb0
    %5 = cir.get_global @globalReturnsFalse : !cir.ptr<!cir.func<!s32i (...)>> loc(#loc105)
    %6 = cir.cast(bitcast, %5 : !cir.ptr<!cir.func<!s32i (...)>>), !cir.ptr<!cir.func<!s32i ()>> loc(#loc105)
    %7 = cir.call %6() : (!cir.ptr<!cir.func<!s32i ()>>) -> !s32i loc(#loc49)
    %8 = cir.cast(int_to_bool, %7 : !s32i), !cir.bool loc(#loc49)
    cir.brcond %8 ^bb2, ^bb3 loc(#loc106)
  ^bb2:  // pred: ^bb1
    %9 = cir.get_global @".str" : !cir.ptr<!cir.array<!s8i x 21>> loc(#loc37)
    %10 = cir.cast(array_to_ptrdecay, %9 : !cir.ptr<!cir.array<!s8i x 21>>), !cir.ptr<!s8i> loc(#loc37)
    cir.call @printLine(%10) : (!cir.ptr<!s8i>) -> () loc(#loc54)
    cir.br ^bb4 loc(#loc52)
  ^bb3:  // pred: ^bb1
    %11 = cir.const #cir.int<127> : !s32i loc(#loc55)
    %12 = cir.const #cir.int<5> : !s32i loc(#loc56)
    %13 = cir.binop(sub, %11, %12) nsw : !s32i loc(#loc55)
    %14 = cir.cast(integral, %13 : !s32i), !s16i loc(#loc55)
    cir.store %14, %1 : !s16i, !cir.ptr<!s16i> loc(#loc107)
    cir.br ^bb4 loc(#loc48)
  ^bb4:  // 2 preds: ^bb2, ^bb3
    cir.br ^bb5 loc(#loc48)
  ^bb5:  // pred: ^bb4
    cir.br ^bb6 loc(#loc108)
  ^bb6:  // pred: ^bb5
    %15 = cir.load %1 : !cir.ptr<!s16i>, !s16i loc(#loc41)
    %16 = cir.cast(integral, %15 : !s16i), !s8i loc(#loc41)
    cir.store %16, %0 : !s8i, !cir.ptr<!s8i> loc(#loc101)
    %17 = cir.load %0 : !cir.ptr<!s8i>, !s8i loc(#loc60)
    cir.call @printHexCharLine(%17) : (!s8i) -> () loc(#loc61)
    cir.br ^bb7 loc(#loc59)
  ^bb7:  // pred: ^bb6
    cir.return loc(#loc39)
  } loc(#loc100)
  cir.func no_proto internal private @goodG2B2() extra(#fn_attr1) {
    %0 = cir.alloca !s8i, !cir.ptr<!s8i>, ["charData", init] {alignment = 1 : i64} loc(#loc110)
    %1 = cir.alloca !s16i, !cir.ptr<!s16i>, ["data"] {alignment = 2 : i64} loc(#loc111)
    %2 = cir.const #cir.int<1> : !s32i loc(#loc68)
    %3 = cir.unary(minus, %2) : !s32i, !s32i loc(#loc69)
    %4 = cir.cast(integral, %3 : !s32i), !s16i loc(#loc69)
    cir.store %4, %1 : !s16i, !cir.ptr<!s16i> loc(#loc112)
    cir.br ^bb1 loc(#loc113)
  ^bb1:  // pred: ^bb0
    %5 = cir.get_global @globalReturnsTrue : !cir.ptr<!cir.func<!s32i (...)>> loc(#loc114)
    %6 = cir.cast(bitcast, %5 : !cir.ptr<!cir.func<!s32i (...)>>), !cir.ptr<!cir.func<!s32i ()>> loc(#loc114)
    %7 = cir.call %6() : (!cir.ptr<!cir.func<!s32i ()>>) -> !s32i loc(#loc73)
    %8 = cir.cast(int_to_bool, %7 : !s32i), !cir.bool loc(#loc73)
    cir.brcond %8 ^bb2, ^bb3 loc(#loc115)
  ^bb2:  // pred: ^bb1
    %9 = cir.const #cir.int<127> : !s32i loc(#loc76)
    %10 = cir.const #cir.int<5> : !s32i loc(#loc77)
    %11 = cir.binop(sub, %9, %10) nsw : !s32i loc(#loc76)
    %12 = cir.cast(integral, %11 : !s32i), !s16i loc(#loc76)
    cir.store %12, %1 : !s16i, !cir.ptr<!s16i> loc(#loc116)
    cir.br ^bb3 loc(#loc72)
  ^bb3:  // 2 preds: ^bb1, ^bb2
    cir.br ^bb4 loc(#loc72)
  ^bb4:  // pred: ^bb3
    cir.br ^bb5 loc(#loc117)
  ^bb5:  // pred: ^bb4
    %13 = cir.load %1 : !cir.ptr<!s16i>, !s16i loc(#loc65)
    %14 = cir.cast(integral, %13 : !s16i), !s8i loc(#loc65)
    cir.store %14, %0 : !s8i, !cir.ptr<!s8i> loc(#loc110)
    %15 = cir.load %0 : !cir.ptr<!s8i>, !s8i loc(#loc81)
    cir.call @printHexCharLine(%15) : (!s8i) -> () loc(#loc82)
    cir.br ^bb6 loc(#loc80)
  ^bb6:  // pred: ^bb5
    cir.return loc(#loc63)
  } loc(#loc109)
} loc(#loc)
#loc = loc("/home/ladisgin/git_proj/juliet-c/testcases/CWE197_Numeric_Truncation_Error/s02/CWE197_Numeric_Truncation_Error__short_rand_11.c":0:0)
#loc1 = loc("../../../testcasesupport/std_testcase_io.h":48:1)
#loc2 = loc("../../../testcasesupport/std_testcase_io.h":48:23)
#loc3 = loc("/usr/include/stdlib.h":573:1)
#loc4 = loc("/usr/include/stdlib.h":573:24)
#loc5 = loc("../../../testcasesupport/std_testcase_io.h":30:1)
#loc6 = loc("../../../testcasesupport/std_testcase_io.h":30:35)
#loc7 = loc("CWE197_Numeric_Truncation_Error__short_rand_11.c":21:1)
#loc8 = loc("CWE197_Numeric_Truncation_Error__short_rand_11.c":36:1)
#loc9 = loc("CWE197_Numeric_Truncation_Error__short_rand_11.c":33:9)
#loc10 = loc("CWE197_Numeric_Truncation_Error__short_rand_11.c":33:31)
#loc11 = loc("CWE197_Numeric_Truncation_Error__short_rand_11.c":23:5)
#loc12 = loc("CWE197_Numeric_Truncation_Error__short_rand_11.c":23:11)
#loc13 = loc("CWE197_Numeric_Truncation_Error__short_rand_11.c":25:13)
#loc14 = loc("CWE197_Numeric_Truncation_Error__short_rand_11.c":25:12)
#loc15 = loc("CWE197_Numeric_Truncation_Error__short_rand_11.c":25:5)
#loc16 = loc("CWE197_Numeric_Truncation_Error__short_rand_11.c":26:5)
#loc17 = loc("CWE197_Numeric_Truncation_Error__short_rand_11.c":30:5)
#loc18 = loc("CWE197_Numeric_Truncation_Error__short_rand_11.c":26:8)
#loc19 = loc("CWE197_Numeric_Truncation_Error__short_rand_11.c":26:26)
#loc20 = loc("CWE197_Numeric_Truncation_Error__short_rand_11.c":27:5)
#loc22 = loc("CWE197_Numeric_Truncation_Error__short_rand_11.c":29:9)
#loc23 = loc("CWE197_Numeric_Truncation_Error__short_rand_11.c":31:5)
#loc24 = loc("CWE197_Numeric_Truncation_Error__short_rand_11.c":35:5)
#loc25 = loc("CWE197_Numeric_Truncation_Error__short_rand_11.c":34:26)
#loc26 = loc("CWE197_Numeric_Truncation_Error__short_rand_11.c":34:9)
#loc27 = loc("CWE197_Numeric_Truncation_Error__short_rand_11.c":83:1)
#loc28 = loc("CWE197_Numeric_Truncation_Error__short_rand_11.c":87:1)
#loc29 = loc("CWE197_Numeric_Truncation_Error__short_rand_11.c":85:5)
#loc30 = loc("CWE197_Numeric_Truncation_Error__short_rand_11.c":85:14)
#loc31 = loc("CWE197_Numeric_Truncation_Error__short_rand_11.c":86:5)
#loc32 = loc("CWE197_Numeric_Truncation_Error__short_rand_11.c":86:14)
#loc33 = loc("../../../testcasesupport/std_testcase_io.h":50:1)
#loc34 = loc("../../../testcasesupport/std_testcase_io.h":50:24)
#loc35 = loc("../../../testcasesupport/std_testcase_io.h":14:1)
#loc36 = loc("../../../testcasesupport/std_testcase_io.h":14:33)
#loc37 = loc("CWE197_Numeric_Truncation_Error__short_rand_11.c":51:19)
#loc38 = loc("CWE197_Numeric_Truncation_Error__short_rand_11.c":43:1)
#loc39 = loc("CWE197_Numeric_Truncation_Error__short_rand_11.c":63:1)
#loc40 = loc("CWE197_Numeric_Truncation_Error__short_rand_11.c":60:9)
#loc41 = loc("CWE197_Numeric_Truncation_Error__short_rand_11.c":60:31)
#loc42 = loc("CWE197_Numeric_Truncation_Error__short_rand_11.c":45:5)
#loc43 = loc("CWE197_Numeric_Truncation_Error__short_rand_11.c":45:11)
#loc44 = loc("CWE197_Numeric_Truncation_Error__short_rand_11.c":47:13)
#loc45 = loc("CWE197_Numeric_Truncation_Error__short_rand_11.c":47:12)
#loc46 = loc("CWE197_Numeric_Truncation_Error__short_rand_11.c":47:5)
#loc47 = loc("CWE197_Numeric_Truncation_Error__short_rand_11.c":48:5)
#loc48 = loc("CWE197_Numeric_Truncation_Error__short_rand_11.c":57:5)
#loc49 = loc("CWE197_Numeric_Truncation_Error__short_rand_11.c":48:8)
#loc50 = loc("CWE197_Numeric_Truncation_Error__short_rand_11.c":48:27)
#loc51 = loc("CWE197_Numeric_Truncation_Error__short_rand_11.c":49:5)
#loc52 = loc("CWE197_Numeric_Truncation_Error__short_rand_11.c":52:5)
#loc53 = loc("CWE197_Numeric_Truncation_Error__short_rand_11.c":54:5)
#loc54 = loc("CWE197_Numeric_Truncation_Error__short_rand_11.c":51:9)
#loc55 = loc("CWE197_Numeric_Truncation_Error__short_rand_11.c":56:16)
#loc56 = loc("CWE197_Numeric_Truncation_Error__short_rand_11.c":56:25)
#loc57 = loc("CWE197_Numeric_Truncation_Error__short_rand_11.c":56:9)
#loc58 = loc("CWE197_Numeric_Truncation_Error__short_rand_11.c":58:5)
#loc59 = loc("CWE197_Numeric_Truncation_Error__short_rand_11.c":62:5)
#loc60 = loc("CWE197_Numeric_Truncation_Error__short_rand_11.c":61:26)
#loc61 = loc("CWE197_Numeric_Truncation_Error__short_rand_11.c":61:9)
#loc62 = loc("CWE197_Numeric_Truncation_Error__short_rand_11.c":66:1)
#loc63 = loc("CWE197_Numeric_Truncation_Error__short_rand_11.c":81:1)
#loc64 = loc("CWE197_Numeric_Truncation_Error__short_rand_11.c":78:9)
#loc65 = loc("CWE197_Numeric_Truncation_Error__short_rand_11.c":78:31)
#loc66 = loc("CWE197_Numeric_Truncation_Error__short_rand_11.c":68:5)
#loc67 = loc("CWE197_Numeric_Truncation_Error__short_rand_11.c":68:11)
#loc68 = loc("CWE197_Numeric_Truncation_Error__short_rand_11.c":70:13)
#loc69 = loc("CWE197_Numeric_Truncation_Error__short_rand_11.c":70:12)
#loc70 = loc("CWE197_Numeric_Truncation_Error__short_rand_11.c":70:5)
#loc71 = loc("CWE197_Numeric_Truncation_Error__short_rand_11.c":71:5)
#loc72 = loc("CWE197_Numeric_Truncation_Error__short_rand_11.c":75:5)
#loc73 = loc("CWE197_Numeric_Truncation_Error__short_rand_11.c":71:8)
#loc74 = loc("CWE197_Numeric_Truncation_Error__short_rand_11.c":71:26)
#loc75 = loc("CWE197_Numeric_Truncation_Error__short_rand_11.c":72:5)
#loc76 = loc("CWE197_Numeric_Truncation_Error__short_rand_11.c":74:16)
#loc77 = loc("CWE197_Numeric_Truncation_Error__short_rand_11.c":74:25)
#loc78 = loc("CWE197_Numeric_Truncation_Error__short_rand_11.c":74:9)
#loc79 = loc("CWE197_Numeric_Truncation_Error__short_rand_11.c":76:5)
#loc80 = loc("CWE197_Numeric_Truncation_Error__short_rand_11.c":80:5)
#loc81 = loc("CWE197_Numeric_Truncation_Error__short_rand_11.c":79:26)
#loc82 = loc("CWE197_Numeric_Truncation_Error__short_rand_11.c":79:9)
#loc83 = loc(fused[#loc1, #loc2])
#loc84 = loc(fused[#loc3, #loc4])
#loc85 = loc(fused[#loc5, #loc6])
#loc86 = loc(fused[#loc7, #loc8])
#loc87 = loc(fused[#loc9, #loc10])
#loc88 = loc(fused[#loc11, #loc12])
#loc89 = loc(fused[#loc15, #loc13])
#loc90 = loc(fused[#loc16, #loc17])
#loc91 = loc(fused[#loc18, #loc19])
#loc92 = loc(fused[#loc20, #loc17])
#loc93 = loc(fused[#loc22, #loc21])
#loc94 = loc(fused[#loc23, #loc24])
#loc95 = loc(fused[#loc27, #loc28])
#loc96 = loc(fused[#loc29, #loc30])
#loc97 = loc(fused[#loc31, #loc32])
#loc98 = loc(fused[#loc33, #loc34])
#loc99 = loc(fused[#loc35, #loc36])
#loc100 = loc(fused[#loc38, #loc39])
#loc101 = loc(fused[#loc40, #loc41])
#loc102 = loc(fused[#loc42, #loc43])
#loc103 = loc(fused[#loc46, #loc44])
#loc104 = loc(fused[#loc47, #loc48])
#loc105 = loc(fused[#loc49, #loc50])
#loc106 = loc(fused[#loc51, #loc52, #loc53, #loc48])
#loc107 = loc(fused[#loc57, #loc56])
#loc108 = loc(fused[#loc58, #loc59])
#loc109 = loc(fused[#loc62, #loc63])
#loc110 = loc(fused[#loc64, #loc65])
#loc111 = loc(fused[#loc66, #loc67])
#loc112 = loc(fused[#loc70, #loc68])
#loc113 = loc(fused[#loc71, #loc72])
#loc114 = loc(fused[#loc73, #loc74])
#loc115 = loc(fused[#loc75, #loc72])
#loc116 = loc(fused[#loc78, #loc77])
#loc117 = loc(fused[#loc79, #loc80])
