!s32i = !cir.int<s, 32>
!s64i = !cir.int<s, 64>
!s8i = !cir.int<s, 8>
!ty__IO_codecvt = !cir.record<struct "_IO_codecvt" incomplete>
!ty__IO_marker = !cir.record<struct "_IO_marker" incomplete>
!ty__IO_wide_data = !cir.record<struct "_IO_wide_data" incomplete>
!u16i = !cir.int<u, 16>
!u64i = !cir.int<u, 64>
!void = !cir.void
#false = #cir.bool<false> : !cir.bool
#fn_attr = #cir<extra({nothrow = #cir.nothrow})>
#fn_attr1 = #cir<extra({inline = #cir.inline<no>, nothrow = #cir.nothrow, optnone = #cir.optnone, uwtable = #cir.uwtable<async>})>
#loc10 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_42.c":24:22)
#loc11 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_42.c":24:26)
#loc124 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_42.c":124:26)
#loc125 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_42.c":124:30)
#loc227 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_42.c":81:26)
#loc228 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_42.c":81:30)
#true = #cir.bool<true> : !cir.bool
#loc310 = loc(fused[#loc10, #loc11])
#loc355 = loc(fused[#loc124, #loc125])
#loc393 = loc(fused[#loc227, #loc228])
!ty__IO_FILE = !cir.record<struct "_IO_FILE" {!s32i, !cir.ptr<!s8i>, !cir.ptr<!s8i>, !cir.ptr<!s8i>, !cir.ptr<!s8i>, !cir.ptr<!s8i>, !cir.ptr<!s8i>, !cir.ptr<!s8i>, !cir.ptr<!s8i>, !cir.ptr<!s8i>, !cir.ptr<!s8i>, !cir.ptr<!s8i>, !cir.ptr<!ty__IO_marker>, !cir.ptr<!cir.record<struct "_IO_FILE">>, !s32i, !s32i, !s64i, !u16i, !s8i, !cir.array<!s8i x 1>, !cir.ptr<!void>, !s64i, !cir.ptr<!ty__IO_codecvt>, !cir.ptr<!ty__IO_wide_data>, !cir.ptr<!cir.record<struct "_IO_FILE">>, !cir.ptr<!void>, !u64i, !s32i, !cir.array<!s8i x 20>} #cir.record.decl.ast>
module @"/workspaces/juliet-c/testcases/CWE122_Heap_Based_Buffer_Overflow/s06/CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_42.c" attributes {cir.lang = #cir.lang<c>, cir.sob = #cir.signed_overflow_behavior<undefined>, cir.triple = "x86_64-unknown-linux-gnu", cir.type_size_info = #cir.type_size_info<char = 8, int = 32, size_t = 64>, cir.uwtable = #cir.uwtable<async>, dlti.dl_spec = #dlti.dl_spec<f128 = dense<128> : vector<2xi64>, f64 = dense<64> : vector<2xi64>, f16 = dense<16> : vector<2xi64>, !llvm.ptr<271> = dense<32> : vector<4xi64>, !llvm.ptr<272> = dense<64> : vector<4xi64>, i64 = dense<64> : vector<2xi64>, i128 = dense<128> : vector<2xi64>, !llvm.ptr<270> = dense<32> : vector<4xi64>, f80 = dense<128> : vector<2xi64>, i1 = dense<8> : vector<2xi64>, !llvm.ptr = dense<64> : vector<4xi64>, i16 = dense<16> : vector<2xi64>, i8 = dense<8> : vector<2xi64>, i32 = dense<32> : vector<2xi64>, "dlti.stack_alignment" = 128 : i64, "dlti.mangling_mode" = "e", "dlti.endianness" = "little">} {
  cir.func private @fgets(!cir.ptr<!s8i>, !s32i, !cir.ptr<!ty__IO_FILE>) -> !cir.ptr<!s8i> loc(#loc306)
  cir.global "private" external @stdin : !cir.ptr<!ty__IO_FILE> {alignment = 8 : i64} loc(#loc307)
  cir.func private @atoi(!cir.ptr<!s8i>) -> !s32i extra(#fn_attr) loc(#loc308)
  cir.global "private" constant cir_private dsolocal @".str.1" = #cir.const_array<"fgets() failed.\00" : !cir.array<!s8i x 16>> : !cir.array<!s8i x 16> {alignment = 1 : i64} loc(#loc7)
  cir.func internal private @badSource(%arg0: !s32i loc(fused[#loc10, #loc11])) -> !s32i extra(#fn_attr1) {
    %0 = cir.alloca !s32i, !cir.ptr<!s32i>, ["data", init] {alignment = 4 : i64} loc(#loc310)
    %1 = cir.alloca !s32i, !cir.ptr<!s32i>, ["__retval"] {alignment = 4 : i64} loc(#loc9)
    cir.store %arg0, %0 : !s32i, !cir.ptr<!s32i> loc(#loc12)
    cir.scope {
      %4 = cir.alloca !cir.array<!s8i x 14>, !cir.ptr<!cir.array<!s8i x 14>>, ["inputBuffer"] {alignment = 1 : i64} loc(#loc312)
      %5 = cir.const #cir.zero : !cir.array<!s8i x 14> loc(#loc312)
      cir.store %5, %4 : !cir.array<!s8i x 14>, !cir.ptr<!cir.array<!s8i x 14>> loc(#loc312)
      cir.scope {
        %6 = cir.cast(array_to_ptrdecay, %4 : !cir.ptr<!cir.array<!s8i x 14>>), !cir.ptr<!s8i> loc(#loc19)
        %7 = cir.const #cir.int<3> : !s32i loc(#loc20)
        %8 = cir.cast(integral, %7 : !s32i), !u64i loc(#loc20)
        %9 = cir.const #cir.int<4> : !u64i loc(#loc20)
        %10 = cir.binop(mul, %8, %9) : !u64i loc(#loc20)
        %11 = cir.const #cir.int<2> : !s32i loc(#loc20)
        %12 = cir.cast(integral, %11 : !s32i), !u64i loc(#loc20)
        %13 = cir.binop(add, %10, %12) : !u64i loc(#loc20)
        %14 = cir.cast(integral, %13 : !u64i), !s32i loc(#loc20)
        %15 = cir.get_global @stdin : !cir.ptr<!cir.ptr<!ty__IO_FILE>> loc(#loc307)
        %16 = cir.load %15 : !cir.ptr<!cir.ptr<!ty__IO_FILE>>, !cir.ptr<!ty__IO_FILE> loc(#loc21)
        %17 = cir.call @fgets(%6, %14, %16) : (!cir.ptr<!s8i>, !s32i, !cir.ptr<!ty__IO_FILE>) -> !cir.ptr<!s8i> loc(#loc22)
        %18 = cir.const #cir.ptr<null> : !cir.ptr<!void> loc(#loc23)
        %19 = cir.cast(bitcast, %18 : !cir.ptr<!void>), !cir.ptr<!s8i> loc(#loc23)
        %20 = cir.cmp(ne, %17, %19) : !cir.ptr<!s8i>, !cir.bool loc(#loc314)
        cir.if %20 {
          %21 = cir.cast(array_to_ptrdecay, %4 : !cir.ptr<!cir.array<!s8i x 14>>), !cir.ptr<!s8i> loc(#loc27)
          %22 = cir.call @atoi(%21) : (!cir.ptr<!s8i>) -> !s32i side_effect(pure) extra(#fn_attr) loc(#loc28)
          cir.store %22, %0 : !s32i, !cir.ptr<!s32i> loc(#loc316)
        } else {
          %21 = cir.get_global @".str.1" : !cir.ptr<!cir.array<!s8i x 16>> loc(#loc7)
          %22 = cir.cast(array_to_ptrdecay, %21 : !cir.ptr<!cir.array<!s8i x 16>>), !cir.ptr<!s8i> loc(#loc7)
          cir.call @printLine(%22) : (!cir.ptr<!s8i>) -> () loc(#loc31)
        } loc(#loc315)
      } loc(#loc313)
    } loc(#loc311)
    %2 = cir.load %0 : !cir.ptr<!s32i>, !s32i loc(#loc32)
    cir.store %2, %1 : !s32i, !cir.ptr<!s32i> loc(#loc317)
    %3 = cir.load %1 : !cir.ptr<!s32i>, !s32i loc(#loc317)
    cir.return %3 : !s32i loc(#loc317)
  } loc(#loc309)
  cir.func private @malloc(!u64i) -> !cir.ptr<!void> extra(#fn_attr) loc(#loc318)
  cir.func private @exit(!s32i) extra(#fn_attr) loc(#loc319)
  cir.func private @printIntLine(!s32i) loc(#loc320)
  cir.func private @printLine(!cir.ptr<!s8i>) loc(#loc321)
  cir.global "private" constant cir_private dsolocal @".str" = #cir.const_array<"ERROR: Array index is negative.\00" : !cir.array<!s8i x 32>> : !cir.array<!s8i x 32> {alignment = 1 : i64} loc(#loc42)
  cir.func private @free(!cir.ptr<!void>) extra(#fn_attr) loc(#loc322)
  cir.func no_proto @CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_42_bad() extra(#fn_attr1) {
    %0 = cir.alloca !s32i, !cir.ptr<!s32i>, ["data"] {alignment = 4 : i64} loc(#loc324)
    %1 = cir.const #cir.int<1> : !s32i loc(#loc49)
    %2 = cir.unary(minus, %1) nsw : !s32i, !s32i loc(#loc50)
    cir.store %2, %0 : !s32i, !cir.ptr<!s32i> loc(#loc325)
    %3 = cir.load %0 : !cir.ptr<!s32i>, !s32i loc(#loc52)
    %4 = cir.call @badSource(%3) : (!s32i) -> !s32i loc(#loc53)
    cir.store %4, %0 : !s32i, !cir.ptr<!s32i> loc(#loc326)
    cir.scope {
      %5 = cir.alloca !s32i, !cir.ptr<!s32i>, ["i"] {alignment = 4 : i64} loc(#loc328)
      %6 = cir.alloca !cir.ptr<!s32i>, !cir.ptr<!cir.ptr<!s32i>>, ["buffer", init] {alignment = 8 : i64} loc(#loc329)
      %7 = cir.get_global @malloc : !cir.ptr<!cir.func<(!u64i) -> !cir.ptr<!void>>> loc(#loc62)
      %8 = cir.const #cir.int<10> : !s32i loc(#loc63)
      %9 = cir.cast(integral, %8 : !s32i), !u64i loc(#loc63)
      %10 = cir.const #cir.int<4> : !u64i loc(#loc330)
      %11 = cir.binop(mul, %9, %10) : !u64i loc(#loc331)
      %12 = cir.call @malloc(%11) : (!u64i) -> !cir.ptr<!void> extra(#fn_attr) loc(#loc62)
      %13 = cir.cast(bitcast, %12 : !cir.ptr<!void>), !cir.ptr<!s32i> loc(#loc332)
      cir.store %13, %6 : !cir.ptr<!s32i>, !cir.ptr<!cir.ptr<!s32i>> loc(#loc329)
      cir.scope {
        %17 = cir.load %6 : !cir.ptr<!cir.ptr<!s32i>>, !cir.ptr<!s32i> loc(#loc68)
        %18 = cir.const #cir.ptr<null> : !cir.ptr<!void> loc(#loc69)
        %19 = cir.cast(bitcast, %18 : !cir.ptr<!void>), !cir.ptr<!s32i> loc(#loc69)
        %20 = cir.cmp(eq, %17, %19) : !cir.ptr<!s32i>, !cir.bool loc(#loc334)
        cir.if %20 {
          %21 = cir.get_global @exit : !cir.ptr<!cir.func<(!s32i)>> loc(#loc71)
          %22 = cir.const #cir.int<1> : !s32i loc(#loc72)
          %23 = cir.unary(minus, %22) nsw : !s32i, !s32i loc(#loc73)
          cir.call @exit(%23) : (!s32i) -> () extra(#fn_attr) loc(#loc71)
        } loc(#loc335)
      } loc(#loc333)
      cir.scope {
        %17 = cir.const #cir.int<0> : !s32i loc(#loc76)
        cir.store %17, %5 : !s32i, !cir.ptr<!s32i> loc(#loc337)
        cir.for : cond {
          %18 = cir.load %5 : !cir.ptr<!s32i>, !s32i loc(#loc78)
          %19 = cir.const #cir.int<10> : !s32i loc(#loc79)
          %20 = cir.cmp(lt, %18, %19) : !s32i, !cir.bool loc(#loc338)
          cir.condition(%20) loc(#loc80)
        } body {
          cir.scope {
            %18 = cir.const #cir.int<0> : !s32i loc(#loc82)
            %19 = cir.load %6 : !cir.ptr<!cir.ptr<!s32i>>, !cir.ptr<!s32i> loc(#loc83)
            %20 = cir.load %5 : !cir.ptr<!s32i>, !s32i loc(#loc84)
            %21 = cir.ptr_stride(%19 : !cir.ptr<!s32i>, %20 : !s32i), !cir.ptr<!s32i> loc(#loc85)
            cir.store %18, %21 : !s32i, !cir.ptr<!s32i> loc(#loc340)
          } loc(#loc339)
          cir.yield loc(#loc75)
        } step {
          %18 = cir.load %5 : !cir.ptr<!s32i>, !s32i loc(#loc86)
          %19 = cir.unary(inc, %18) nsw : !s32i, !s32i loc(#loc87)
          cir.store %19, %5 : !s32i, !cir.ptr<!s32i> loc(#loc341)
          cir.yield loc(#loc336)
        } loc(#loc336)
      } loc(#loc336)
      cir.scope {
        %17 = cir.load %0 : !cir.ptr<!s32i>, !s32i loc(#loc90)
        %18 = cir.const #cir.int<0> : !s32i loc(#loc91)
        %19 = cir.cmp(ge, %17, %18) : !s32i, !cir.bool loc(#loc343)
        cir.if %19 {
          %20 = cir.const #cir.int<1> : !s32i loc(#loc95)
          %21 = cir.load %6 : !cir.ptr<!cir.ptr<!s32i>>, !cir.ptr<!s32i> loc(#loc96)
          %22 = cir.load %0 : !cir.ptr<!s32i>, !s32i loc(#loc97)
          %23 = cir.ptr_stride(%21 : !cir.ptr<!s32i>, %22 : !s32i), !cir.ptr<!s32i> loc(#loc98)
          cir.store %20, %23 : !s32i, !cir.ptr<!s32i> loc(#loc345)
          cir.scope {
            %24 = cir.const #cir.int<0> : !s32i loc(#loc101)
            cir.store %24, %5 : !s32i, !cir.ptr<!s32i> loc(#loc347)
            cir.for : cond {
              %25 = cir.load %5 : !cir.ptr<!s32i>, !s32i loc(#loc103)
              %26 = cir.const #cir.int<10> : !s32i loc(#loc104)
              %27 = cir.cmp(lt, %25, %26) : !s32i, !cir.bool loc(#loc348)
              cir.condition(%27) loc(#loc105)
            } body {
              cir.scope {
                %25 = cir.load %6 : !cir.ptr<!cir.ptr<!s32i>>, !cir.ptr<!s32i> loc(#loc107)
                %26 = cir.load %5 : !cir.ptr<!s32i>, !s32i loc(#loc108)
                %27 = cir.ptr_stride(%25 : !cir.ptr<!s32i>, %26 : !s32i), !cir.ptr<!s32i> loc(#loc109)
                %28 = cir.load %27 : !cir.ptr<!s32i>, !s32i loc(#loc107)
                cir.call @printIntLine(%28) : (!s32i) -> () loc(#loc110)
              } loc(#loc349)
              cir.yield loc(#loc100)
            } step {
              %25 = cir.load %5 : !cir.ptr<!s32i>, !s32i loc(#loc111)
              %26 = cir.unary(inc, %25) nsw : !s32i, !s32i loc(#loc112)
              cir.store %26, %5 : !s32i, !cir.ptr<!s32i> loc(#loc350)
              cir.yield loc(#loc346)
            } loc(#loc346)
          } loc(#loc346)
        } else {
          %20 = cir.get_global @".str" : !cir.ptr<!cir.array<!s8i x 32>> loc(#loc42)
          %21 = cir.cast(array_to_ptrdecay, %20 : !cir.ptr<!cir.array<!s8i x 32>>), !cir.ptr<!s8i> loc(#loc42)
          cir.call @printLine(%21) : (!cir.ptr<!s8i>) -> () loc(#loc113)
        } loc(#loc344)
      } loc(#loc342)
      %14 = cir.get_global @free : !cir.ptr<!cir.func<(!cir.ptr<!void>)>> loc(#loc114)
      %15 = cir.load %6 : !cir.ptr<!cir.ptr<!s32i>>, !cir.ptr<!s32i> loc(#loc115)
      %16 = cir.cast(bitcast, %15 : !cir.ptr<!s32i>), !cir.ptr<!void> loc(#loc115)
      cir.call @free(%16) : (!cir.ptr<!void>) -> () extra(#fn_attr) loc(#loc114)
    } loc(#loc327)
    cir.return loc(#loc46)
  } loc(#loc323)
  cir.func no_proto @CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_42_good() extra(#fn_attr1) {
    %0 = cir.get_global @goodB2G : !cir.ptr<!cir.func<()>> loc(#loc352)
    cir.call %0() : (!cir.ptr<!cir.func<()>>) -> () loc(#loc118)
    %1 = cir.get_global @goodG2B : !cir.ptr<!cir.func<()>> loc(#loc353)
    cir.call %1() : (!cir.ptr<!cir.func<()>>) -> () loc(#loc120)
    cir.return loc(#loc117)
  } loc(#loc351)
  cir.func internal private @goodB2GSource(%arg0: !s32i loc(fused[#loc124, #loc125])) -> !s32i extra(#fn_attr1) {
    %0 = cir.alloca !s32i, !cir.ptr<!s32i>, ["data", init] {alignment = 4 : i64} loc(#loc355)
    %1 = cir.alloca !s32i, !cir.ptr<!s32i>, ["__retval"] {alignment = 4 : i64} loc(#loc123)
    cir.store %arg0, %0 : !s32i, !cir.ptr<!s32i> loc(#loc126)
    cir.scope {
      %4 = cir.alloca !cir.array<!s8i x 14>, !cir.ptr<!cir.array<!s8i x 14>>, ["inputBuffer"] {alignment = 1 : i64} loc(#loc357)
      %5 = cir.const #cir.zero : !cir.array<!s8i x 14> loc(#loc357)
      cir.store %5, %4 : !cir.array<!s8i x 14>, !cir.ptr<!cir.array<!s8i x 14>> loc(#loc357)
      cir.scope {
        %6 = cir.cast(array_to_ptrdecay, %4 : !cir.ptr<!cir.array<!s8i x 14>>), !cir.ptr<!s8i> loc(#loc133)
        %7 = cir.const #cir.int<3> : !s32i loc(#loc134)
        %8 = cir.cast(integral, %7 : !s32i), !u64i loc(#loc134)
        %9 = cir.const #cir.int<4> : !u64i loc(#loc134)
        %10 = cir.binop(mul, %8, %9) : !u64i loc(#loc134)
        %11 = cir.const #cir.int<2> : !s32i loc(#loc134)
        %12 = cir.cast(integral, %11 : !s32i), !u64i loc(#loc134)
        %13 = cir.binop(add, %10, %12) : !u64i loc(#loc134)
        %14 = cir.cast(integral, %13 : !u64i), !s32i loc(#loc134)
        %15 = cir.get_global @stdin : !cir.ptr<!cir.ptr<!ty__IO_FILE>> loc(#loc307)
        %16 = cir.load %15 : !cir.ptr<!cir.ptr<!ty__IO_FILE>>, !cir.ptr<!ty__IO_FILE> loc(#loc135)
        %17 = cir.call @fgets(%6, %14, %16) : (!cir.ptr<!s8i>, !s32i, !cir.ptr<!ty__IO_FILE>) -> !cir.ptr<!s8i> loc(#loc136)
        %18 = cir.const #cir.ptr<null> : !cir.ptr<!void> loc(#loc137)
        %19 = cir.cast(bitcast, %18 : !cir.ptr<!void>), !cir.ptr<!s8i> loc(#loc137)
        %20 = cir.cmp(ne, %17, %19) : !cir.ptr<!s8i>, !cir.bool loc(#loc359)
        cir.if %20 {
          %21 = cir.cast(array_to_ptrdecay, %4 : !cir.ptr<!cir.array<!s8i x 14>>), !cir.ptr<!s8i> loc(#loc141)
          %22 = cir.call @atoi(%21) : (!cir.ptr<!s8i>) -> !s32i side_effect(pure) extra(#fn_attr) loc(#loc142)
          cir.store %22, %0 : !s32i, !cir.ptr<!s32i> loc(#loc361)
        } else {
          %21 = cir.get_global @".str.1" : !cir.ptr<!cir.array<!s8i x 16>> loc(#loc145)
          %22 = cir.cast(array_to_ptrdecay, %21 : !cir.ptr<!cir.array<!s8i x 16>>), !cir.ptr<!s8i> loc(#loc145)
          cir.call @printLine(%22) : (!cir.ptr<!s8i>) -> () loc(#loc146)
        } loc(#loc360)
      } loc(#loc358)
    } loc(#loc356)
    %2 = cir.load %0 : !cir.ptr<!s32i>, !s32i loc(#loc147)
    cir.store %2, %1 : !s32i, !cir.ptr<!s32i> loc(#loc362)
    %3 = cir.load %1 : !cir.ptr<!s32i>, !s32i loc(#loc362)
    cir.return %3 : !s32i loc(#loc362)
  } loc(#loc354)
  cir.global "private" constant cir_private dsolocal @".str.2" = #cir.const_array<"ERROR: Array index is out-of-bounds\00" : !cir.array<!s8i x 36>> : !cir.array<!s8i x 36> {alignment = 1 : i64} loc(#loc149)
  cir.func no_proto internal private @goodB2G() extra(#fn_attr1) {
    %0 = cir.alloca !s32i, !cir.ptr<!s32i>, ["data"] {alignment = 4 : i64} loc(#loc364)
    %1 = cir.const #cir.int<1> : !s32i loc(#loc154)
    %2 = cir.unary(minus, %1) nsw : !s32i, !s32i loc(#loc155)
    cir.store %2, %0 : !s32i, !cir.ptr<!s32i> loc(#loc365)
    %3 = cir.load %0 : !cir.ptr<!s32i>, !s32i loc(#loc157)
    %4 = cir.call @goodB2GSource(%3) : (!s32i) -> !s32i loc(#loc158)
    cir.store %4, %0 : !s32i, !cir.ptr<!s32i> loc(#loc366)
    cir.scope {
      %5 = cir.alloca !s32i, !cir.ptr<!s32i>, ["i"] {alignment = 4 : i64} loc(#loc368)
      %6 = cir.alloca !cir.ptr<!s32i>, !cir.ptr<!cir.ptr<!s32i>>, ["buffer", init] {alignment = 8 : i64} loc(#loc369)
      %7 = cir.get_global @malloc : !cir.ptr<!cir.func<(!u64i) -> !cir.ptr<!void>>> loc(#loc167)
      %8 = cir.const #cir.int<10> : !s32i loc(#loc168)
      %9 = cir.cast(integral, %8 : !s32i), !u64i loc(#loc168)
      %10 = cir.const #cir.int<4> : !u64i loc(#loc370)
      %11 = cir.binop(mul, %9, %10) : !u64i loc(#loc371)
      %12 = cir.call @malloc(%11) : (!u64i) -> !cir.ptr<!void> extra(#fn_attr) loc(#loc167)
      %13 = cir.cast(bitcast, %12 : !cir.ptr<!void>), !cir.ptr<!s32i> loc(#loc372)
      cir.store %13, %6 : !cir.ptr<!s32i>, !cir.ptr<!cir.ptr<!s32i>> loc(#loc369)
      cir.scope {
        %17 = cir.load %6 : !cir.ptr<!cir.ptr<!s32i>>, !cir.ptr<!s32i> loc(#loc173)
        %18 = cir.const #cir.ptr<null> : !cir.ptr<!void> loc(#loc174)
        %19 = cir.cast(bitcast, %18 : !cir.ptr<!void>), !cir.ptr<!s32i> loc(#loc174)
        %20 = cir.cmp(eq, %17, %19) : !cir.ptr<!s32i>, !cir.bool loc(#loc374)
        cir.if %20 {
          %21 = cir.get_global @exit : !cir.ptr<!cir.func<(!s32i)>> loc(#loc176)
          %22 = cir.const #cir.int<1> : !s32i loc(#loc177)
          %23 = cir.unary(minus, %22) nsw : !s32i, !s32i loc(#loc178)
          cir.call @exit(%23) : (!s32i) -> () extra(#fn_attr) loc(#loc176)
        } loc(#loc375)
      } loc(#loc373)
      cir.scope {
        %17 = cir.const #cir.int<0> : !s32i loc(#loc181)
        cir.store %17, %5 : !s32i, !cir.ptr<!s32i> loc(#loc377)
        cir.for : cond {
          %18 = cir.load %5 : !cir.ptr<!s32i>, !s32i loc(#loc183)
          %19 = cir.const #cir.int<10> : !s32i loc(#loc184)
          %20 = cir.cmp(lt, %18, %19) : !s32i, !cir.bool loc(#loc378)
          cir.condition(%20) loc(#loc185)
        } body {
          cir.scope {
            %18 = cir.const #cir.int<0> : !s32i loc(#loc187)
            %19 = cir.load %6 : !cir.ptr<!cir.ptr<!s32i>>, !cir.ptr<!s32i> loc(#loc188)
            %20 = cir.load %5 : !cir.ptr<!s32i>, !s32i loc(#loc189)
            %21 = cir.ptr_stride(%19 : !cir.ptr<!s32i>, %20 : !s32i), !cir.ptr<!s32i> loc(#loc190)
            cir.store %18, %21 : !s32i, !cir.ptr<!s32i> loc(#loc380)
          } loc(#loc379)
          cir.yield loc(#loc180)
        } step {
          %18 = cir.load %5 : !cir.ptr<!s32i>, !s32i loc(#loc191)
          %19 = cir.unary(inc, %18) nsw : !s32i, !s32i loc(#loc192)
          cir.store %19, %5 : !s32i, !cir.ptr<!s32i> loc(#loc381)
          cir.yield loc(#loc376)
        } loc(#loc376)
      } loc(#loc376)
      cir.scope {
        %17 = cir.load %0 : !cir.ptr<!s32i>, !s32i loc(#loc195)
        %18 = cir.const #cir.int<0> : !s32i loc(#loc196)
        %19 = cir.cmp(ge, %17, %18) : !s32i, !cir.bool loc(#loc383)
        %20 = cir.ternary(%19, true {
          %21 = cir.load %0 : !cir.ptr<!s32i>, !s32i loc(#loc198)
          %22 = cir.const #cir.int<10> : !s32i loc(#loc199)
          %23 = cir.cmp(lt, %21, %22) : !s32i, !cir.bool loc(#loc384)
          %24 = cir.ternary(%23, true {
            %25 = cir.const #true loc(#loc197)
            cir.yield %25 : !cir.bool loc(#loc197)
          }, false {
            %25 = cir.const #false loc(#loc197)
            cir.yield %25 : !cir.bool loc(#loc197)
          }) : (!cir.bool) -> !cir.bool loc(#loc197)
          cir.yield %24 : !cir.bool loc(#loc197)
        }, false {
          %21 = cir.const #false loc(#loc197)
          cir.yield %21 : !cir.bool loc(#loc197)
        }) : (!cir.bool) -> !cir.bool loc(#loc197)
        cir.if %20 {
          %21 = cir.const #cir.int<1> : !s32i loc(#loc204)
          %22 = cir.load %6 : !cir.ptr<!cir.ptr<!s32i>>, !cir.ptr<!s32i> loc(#loc205)
          %23 = cir.load %0 : !cir.ptr<!s32i>, !s32i loc(#loc206)
          %24 = cir.ptr_stride(%22 : !cir.ptr<!s32i>, %23 : !s32i), !cir.ptr<!s32i> loc(#loc207)
          cir.store %21, %24 : !s32i, !cir.ptr<!s32i> loc(#loc386)
          cir.scope {
            %25 = cir.const #cir.int<0> : !s32i loc(#loc210)
            cir.store %25, %5 : !s32i, !cir.ptr<!s32i> loc(#loc388)
            cir.for : cond {
              %26 = cir.load %5 : !cir.ptr<!s32i>, !s32i loc(#loc212)
              %27 = cir.const #cir.int<10> : !s32i loc(#loc213)
              %28 = cir.cmp(lt, %26, %27) : !s32i, !cir.bool loc(#loc389)
              cir.condition(%28) loc(#loc214)
            } body {
              cir.scope {
                %26 = cir.load %6 : !cir.ptr<!cir.ptr<!s32i>>, !cir.ptr<!s32i> loc(#loc216)
                %27 = cir.load %5 : !cir.ptr<!s32i>, !s32i loc(#loc217)
                %28 = cir.ptr_stride(%26 : !cir.ptr<!s32i>, %27 : !s32i), !cir.ptr<!s32i> loc(#loc218)
                %29 = cir.load %28 : !cir.ptr<!s32i>, !s32i loc(#loc216)
                cir.call @printIntLine(%29) : (!s32i) -> () loc(#loc219)
              } loc(#loc390)
              cir.yield loc(#loc209)
            } step {
              %26 = cir.load %5 : !cir.ptr<!s32i>, !s32i loc(#loc220)
              %27 = cir.unary(inc, %26) nsw : !s32i, !s32i loc(#loc221)
              cir.store %27, %5 : !s32i, !cir.ptr<!s32i> loc(#loc391)
              cir.yield loc(#loc387)
            } loc(#loc387)
          } loc(#loc387)
        } else {
          %21 = cir.get_global @".str.2" : !cir.ptr<!cir.array<!s8i x 36>> loc(#loc149)
          %22 = cir.cast(array_to_ptrdecay, %21 : !cir.ptr<!cir.array<!s8i x 36>>), !cir.ptr<!s8i> loc(#loc149)
          cir.call @printLine(%22) : (!cir.ptr<!s8i>) -> () loc(#loc222)
        } loc(#loc385)
      } loc(#loc382)
      %14 = cir.get_global @free : !cir.ptr<!cir.func<(!cir.ptr<!void>)>> loc(#loc223)
      %15 = cir.load %6 : !cir.ptr<!cir.ptr<!s32i>>, !cir.ptr<!s32i> loc(#loc224)
      %16 = cir.cast(bitcast, %15 : !cir.ptr<!s32i>), !cir.ptr<!void> loc(#loc224)
      cir.call @free(%16) : (!cir.ptr<!void>) -> () extra(#fn_attr) loc(#loc223)
    } loc(#loc367)
    cir.return loc(#loc151)
  } loc(#loc363)
  cir.func internal private @goodG2BSource(%arg0: !s32i loc(fused[#loc227, #loc228])) -> !s32i extra(#fn_attr1) {
    %0 = cir.alloca !s32i, !cir.ptr<!s32i>, ["data", init] {alignment = 4 : i64} loc(#loc393)
    %1 = cir.alloca !s32i, !cir.ptr<!s32i>, ["__retval"] {alignment = 4 : i64} loc(#loc226)
    cir.store %arg0, %0 : !s32i, !cir.ptr<!s32i> loc(#loc229)
    %2 = cir.const #cir.int<7> : !s32i loc(#loc230)
    cir.store %2, %0 : !s32i, !cir.ptr<!s32i> loc(#loc394)
    %3 = cir.load %0 : !cir.ptr<!s32i>, !s32i loc(#loc232)
    cir.store %3, %1 : !s32i, !cir.ptr<!s32i> loc(#loc395)
    %4 = cir.load %1 : !cir.ptr<!s32i>, !s32i loc(#loc395)
    cir.return %4 : !s32i loc(#loc395)
  } loc(#loc392)
  cir.func no_proto internal private @goodG2B() extra(#fn_attr1) {
    %0 = cir.alloca !s32i, !cir.ptr<!s32i>, ["data"] {alignment = 4 : i64} loc(#loc397)
    %1 = cir.const #cir.int<1> : !s32i loc(#loc238)
    %2 = cir.unary(minus, %1) nsw : !s32i, !s32i loc(#loc239)
    cir.store %2, %0 : !s32i, !cir.ptr<!s32i> loc(#loc398)
    %3 = cir.load %0 : !cir.ptr<!s32i>, !s32i loc(#loc241)
    %4 = cir.call @goodG2BSource(%3) : (!s32i) -> !s32i loc(#loc242)
    cir.store %4, %0 : !s32i, !cir.ptr<!s32i> loc(#loc399)
    cir.scope {
      %5 = cir.alloca !s32i, !cir.ptr<!s32i>, ["i"] {alignment = 4 : i64} loc(#loc401)
      %6 = cir.alloca !cir.ptr<!s32i>, !cir.ptr<!cir.ptr<!s32i>>, ["buffer", init] {alignment = 8 : i64} loc(#loc402)
      %7 = cir.get_global @malloc : !cir.ptr<!cir.func<(!u64i) -> !cir.ptr<!void>>> loc(#loc251)
      %8 = cir.const #cir.int<10> : !s32i loc(#loc252)
      %9 = cir.cast(integral, %8 : !s32i), !u64i loc(#loc252)
      %10 = cir.const #cir.int<4> : !u64i loc(#loc403)
      %11 = cir.binop(mul, %9, %10) : !u64i loc(#loc404)
      %12 = cir.call @malloc(%11) : (!u64i) -> !cir.ptr<!void> extra(#fn_attr) loc(#loc251)
      %13 = cir.cast(bitcast, %12 : !cir.ptr<!void>), !cir.ptr<!s32i> loc(#loc405)
      cir.store %13, %6 : !cir.ptr<!s32i>, !cir.ptr<!cir.ptr<!s32i>> loc(#loc402)
      cir.scope {
        %17 = cir.load %6 : !cir.ptr<!cir.ptr<!s32i>>, !cir.ptr<!s32i> loc(#loc257)
        %18 = cir.const #cir.ptr<null> : !cir.ptr<!void> loc(#loc258)
        %19 = cir.cast(bitcast, %18 : !cir.ptr<!void>), !cir.ptr<!s32i> loc(#loc258)
        %20 = cir.cmp(eq, %17, %19) : !cir.ptr<!s32i>, !cir.bool loc(#loc407)
        cir.if %20 {
          %21 = cir.get_global @exit : !cir.ptr<!cir.func<(!s32i)>> loc(#loc260)
          %22 = cir.const #cir.int<1> : !s32i loc(#loc261)
          %23 = cir.unary(minus, %22) nsw : !s32i, !s32i loc(#loc262)
          cir.call @exit(%23) : (!s32i) -> () extra(#fn_attr) loc(#loc260)
        } loc(#loc408)
      } loc(#loc406)
      cir.scope {
        %17 = cir.const #cir.int<0> : !s32i loc(#loc265)
        cir.store %17, %5 : !s32i, !cir.ptr<!s32i> loc(#loc410)
        cir.for : cond {
          %18 = cir.load %5 : !cir.ptr<!s32i>, !s32i loc(#loc267)
          %19 = cir.const #cir.int<10> : !s32i loc(#loc268)
          %20 = cir.cmp(lt, %18, %19) : !s32i, !cir.bool loc(#loc411)
          cir.condition(%20) loc(#loc269)
        } body {
          cir.scope {
            %18 = cir.const #cir.int<0> : !s32i loc(#loc271)
            %19 = cir.load %6 : !cir.ptr<!cir.ptr<!s32i>>, !cir.ptr<!s32i> loc(#loc272)
            %20 = cir.load %5 : !cir.ptr<!s32i>, !s32i loc(#loc273)
            %21 = cir.ptr_stride(%19 : !cir.ptr<!s32i>, %20 : !s32i), !cir.ptr<!s32i> loc(#loc274)
            cir.store %18, %21 : !s32i, !cir.ptr<!s32i> loc(#loc413)
          } loc(#loc412)
          cir.yield loc(#loc264)
        } step {
          %18 = cir.load %5 : !cir.ptr<!s32i>, !s32i loc(#loc275)
          %19 = cir.unary(inc, %18) nsw : !s32i, !s32i loc(#loc276)
          cir.store %19, %5 : !s32i, !cir.ptr<!s32i> loc(#loc414)
          cir.yield loc(#loc409)
        } loc(#loc409)
      } loc(#loc409)
      cir.scope {
        %17 = cir.load %0 : !cir.ptr<!s32i>, !s32i loc(#loc279)
        %18 = cir.const #cir.int<0> : !s32i loc(#loc280)
        %19 = cir.cmp(ge, %17, %18) : !s32i, !cir.bool loc(#loc416)
        cir.if %19 {
          %20 = cir.const #cir.int<1> : !s32i loc(#loc284)
          %21 = cir.load %6 : !cir.ptr<!cir.ptr<!s32i>>, !cir.ptr<!s32i> loc(#loc285)
          %22 = cir.load %0 : !cir.ptr<!s32i>, !s32i loc(#loc286)
          %23 = cir.ptr_stride(%21 : !cir.ptr<!s32i>, %22 : !s32i), !cir.ptr<!s32i> loc(#loc287)
          cir.store %20, %23 : !s32i, !cir.ptr<!s32i> loc(#loc418)
          cir.scope {
            %24 = cir.const #cir.int<0> : !s32i loc(#loc290)
            cir.store %24, %5 : !s32i, !cir.ptr<!s32i> loc(#loc420)
            cir.for : cond {
              %25 = cir.load %5 : !cir.ptr<!s32i>, !s32i loc(#loc292)
              %26 = cir.const #cir.int<10> : !s32i loc(#loc293)
              %27 = cir.cmp(lt, %25, %26) : !s32i, !cir.bool loc(#loc421)
              cir.condition(%27) loc(#loc294)
            } body {
              cir.scope {
                %25 = cir.load %6 : !cir.ptr<!cir.ptr<!s32i>>, !cir.ptr<!s32i> loc(#loc296)
                %26 = cir.load %5 : !cir.ptr<!s32i>, !s32i loc(#loc297)
                %27 = cir.ptr_stride(%25 : !cir.ptr<!s32i>, %26 : !s32i), !cir.ptr<!s32i> loc(#loc298)
                %28 = cir.load %27 : !cir.ptr<!s32i>, !s32i loc(#loc296)
                cir.call @printIntLine(%28) : (!s32i) -> () loc(#loc299)
              } loc(#loc422)
              cir.yield loc(#loc289)
            } step {
              %25 = cir.load %5 : !cir.ptr<!s32i>, !s32i loc(#loc300)
              %26 = cir.unary(inc, %25) nsw : !s32i, !s32i loc(#loc301)
              cir.store %26, %5 : !s32i, !cir.ptr<!s32i> loc(#loc423)
              cir.yield loc(#loc419)
            } loc(#loc419)
          } loc(#loc419)
        } else {
          %20 = cir.get_global @".str" : !cir.ptr<!cir.array<!s8i x 32>> loc(#loc302)
          %21 = cir.cast(array_to_ptrdecay, %20 : !cir.ptr<!cir.array<!s8i x 32>>), !cir.ptr<!s8i> loc(#loc302)
          cir.call @printLine(%21) : (!cir.ptr<!s8i>) -> () loc(#loc303)
        } loc(#loc417)
      } loc(#loc415)
      %14 = cir.get_global @free : !cir.ptr<!cir.func<(!cir.ptr<!void>)>> loc(#loc304)
      %15 = cir.load %6 : !cir.ptr<!cir.ptr<!s32i>>, !cir.ptr<!s32i> loc(#loc305)
      %16 = cir.cast(bitcast, %15 : !cir.ptr<!s32i>), !cir.ptr<!void> loc(#loc305)
      cir.call @free(%16) : (!cir.ptr<!void>) -> () extra(#fn_attr) loc(#loc304)
    } loc(#loc400)
    cir.return loc(#loc235)
  } loc(#loc396)
} loc(#loc)
#loc = loc("/workspaces/juliet-c/testcases/CWE122_Heap_Based_Buffer_Overflow/s06/CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_42.c":0:0)
#loc1 = loc("/usr/include/stdio.h":654:1)
#loc2 = loc("/usr/include/stdio.h":655:59)
#loc3 = loc("/usr/include/stdio.h":149:1)
#loc4 = loc("/usr/include/stdio.h":149:14)
#loc5 = loc("/usr/include/stdlib.h":105:1)
#loc6 = loc("/usr/include/stdlib.h":106:33)
#loc7 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_42.c":36:23)
#loc8 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_42.c":24:1)
#loc9 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_42.c":40:1)
#loc12 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_42.c":25:1)
#loc13 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_42.c":26:5)
#loc14 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_42.c":38:5)
#loc15 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_42.c":27:9)
#loc16 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_42.c":27:45)
#loc17 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_42.c":29:9)
#loc18 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_42.c":37:9)
#loc19 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_42.c":29:19)
#loc20 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_42.c":29:32)
#loc21 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_42.c":29:49)
#loc22 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_42.c":29:13)
#loc23 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_42.c":29:59)
#loc24 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_42.c":30:9)
#loc25 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_42.c":33:9)
#loc26 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_42.c":35:9)
#loc27 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_42.c":32:25)
#loc28 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_42.c":32:20)
#loc29 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_42.c":32:13)
#loc30 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_42.c":32:36)
#loc31 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_42.c":36:13)
#loc32 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_42.c":39:12)
#loc33 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_42.c":39:5)
#loc34 = loc("/usr/include/stdlib.h":672:1)
#loc35 = loc("/usr/include/stdlib.h":672:45)
#loc36 = loc("/usr/include/stdlib.h":756:1)
#loc37 = loc("/usr/include/stdlib.h":756:70)
#loc38 = loc("../../../testcasesupport/std_testcase_io.h":18:1)
#loc39 = loc("../../../testcasesupport/std_testcase_io.h":18:33)
#loc40 = loc("../../../testcasesupport/std_testcase_io.h":14:1)
#loc41 = loc("../../../testcasesupport/std_testcase_io.h":14:33)
#loc42 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_42.c":70:23)
#loc43 = loc("/usr/include/stdlib.h":687:1)
#loc44 = loc("/usr/include/stdlib.h":687:32)
#loc45 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_42.c":42:1)
#loc46 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_42.c":74:1)
#loc47 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_42.c":44:5)
#loc48 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_42.c":44:9)
#loc49 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_42.c":46:13)
#loc50 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_42.c":46:12)
#loc51 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_42.c":46:5)
#loc52 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_42.c":47:22)
#loc53 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_42.c":47:12)
#loc54 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_42.c":47:5)
#loc55 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_42.c":47:26)
#loc56 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_42.c":48:5)
#loc57 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_42.c":73:5)
#loc58 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_42.c":49:9)
#loc59 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_42.c":49:13)
#loc60 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_42.c":50:9)
#loc61 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_42.c":50:54)
#loc62 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_42.c":50:31)
#loc63 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_42.c":50:38)
#loc64 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_42.c":50:43)
#loc65 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_42.c":50:53)
#loc66 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_42.c":51:9)
#loc67 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_42.c":51:39)
#loc68 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_42.c":51:13)
#loc69 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_42.c":51:23)
#loc70 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_42.c":51:29)
#loc71 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_42.c":51:30)
#loc72 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_42.c":51:36)
#loc73 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_42.c":51:35)
#loc74 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_42.c":53:9)
#loc75 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_42.c":56:9)
#loc76 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_42.c":53:18)
#loc77 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_42.c":53:14)
#loc78 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_42.c":53:21)
#loc79 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_42.c":53:25)
#loc80 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_42.c":53:23)
#loc81 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_42.c":54:9)
#loc82 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_42.c":55:25)
#loc83 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_42.c":55:13)
#loc84 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_42.c":55:20)
#loc85 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_42.c":55:21)
#loc86 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_42.c":53:30)
#loc87 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_42.c":53:29)
#loc88 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_42.c":59:9)
#loc89 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_42.c":71:9)
#loc90 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_42.c":59:13)
#loc91 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_42.c":59:21)
#loc92 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_42.c":60:9)
#loc93 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_42.c":67:9)
#loc94 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_42.c":69:9)
#loc95 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_42.c":61:28)
#loc96 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_42.c":61:13)
#loc97 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_42.c":61:20)
#loc98 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_42.c":61:24)
#loc99 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_42.c":63:13)
#loc100 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_42.c":66:13)
#loc101 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_42.c":63:21)
#loc102 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_42.c":63:17)
#loc103 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_42.c":63:24)
#loc104 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_42.c":63:28)
#loc105 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_42.c":63:26)
#loc106 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_42.c":64:13)
#loc107 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_42.c":65:30)
#loc108 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_42.c":65:37)
#loc109 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_42.c":65:38)
#loc110 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_42.c":65:17)
#loc111 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_42.c":63:33)
#loc112 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_42.c":63:32)
#loc113 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_42.c":70:13)
#loc114 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_42.c":72:9)
#loc115 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_42.c":72:14)
#loc116 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_42.c":175:1)
#loc117 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_42.c":179:1)
#loc118 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_42.c":177:5)
#loc119 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_42.c":177:13)
#loc120 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_42.c":178:5)
#loc121 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_42.c":178:13)
#loc122 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_42.c":124:1)
#loc123 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_42.c":140:1)
#loc126 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_42.c":125:1)
#loc127 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_42.c":126:5)
#loc128 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_42.c":138:5)
#loc129 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_42.c":127:9)
#loc130 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_42.c":127:45)
#loc131 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_42.c":129:9)
#loc132 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_42.c":137:9)
#loc133 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_42.c":129:19)
#loc134 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_42.c":129:32)
#loc135 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_42.c":129:49)
#loc136 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_42.c":129:13)
#loc137 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_42.c":129:59)
#loc138 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_42.c":130:9)
#loc139 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_42.c":133:9)
#loc140 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_42.c":135:9)
#loc141 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_42.c":132:25)
#loc142 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_42.c":132:20)
#loc143 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_42.c":132:13)
#loc144 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_42.c":132:36)
#loc145 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_42.c":136:23)
#loc146 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_42.c":136:13)
#loc147 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_42.c":139:12)
#loc148 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_42.c":139:5)
#loc149 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_42.c":169:23)
#loc150 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_42.c":142:1)
#loc151 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_42.c":173:1)
#loc152 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_42.c":144:5)
#loc153 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_42.c":144:9)
#loc154 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_42.c":146:13)
#loc155 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_42.c":146:12)
#loc156 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_42.c":146:5)
#loc157 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_42.c":147:26)
#loc158 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_42.c":147:12)
#loc159 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_42.c":147:5)
#loc160 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_42.c":147:30)
#loc161 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_42.c":148:5)
#loc162 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_42.c":172:5)
#loc163 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_42.c":149:9)
#loc164 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_42.c":149:13)
#loc165 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_42.c":150:9)
#loc166 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_42.c":150:54)
#loc167 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_42.c":150:31)
#loc168 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_42.c":150:38)
#loc169 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_42.c":150:43)
#loc170 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_42.c":150:53)
#loc171 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_42.c":151:9)
#loc172 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_42.c":151:39)
#loc173 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_42.c":151:13)
#loc174 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_42.c":151:23)
#loc175 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_42.c":151:29)
#loc176 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_42.c":151:30)
#loc177 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_42.c":151:36)
#loc178 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_42.c":151:35)
#loc179 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_42.c":153:9)
#loc180 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_42.c":156:9)
#loc181 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_42.c":153:18)
#loc182 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_42.c":153:14)
#loc183 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_42.c":153:21)
#loc184 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_42.c":153:25)
#loc185 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_42.c":153:23)
#loc186 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_42.c":154:9)
#loc187 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_42.c":155:25)
#loc188 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_42.c":155:13)
#loc189 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_42.c":155:20)
#loc190 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_42.c":155:21)
#loc191 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_42.c":153:30)
#loc192 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_42.c":153:29)
#loc193 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_42.c":158:9)
#loc194 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_42.c":170:9)
#loc195 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_42.c":158:13)
#loc196 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_42.c":158:21)
#loc197 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_42.c":158:23)
#loc198 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_42.c":158:26)
#loc199 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_42.c":158:34)
#loc200 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_42.c":158:36)
#loc201 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_42.c":159:9)
#loc202 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_42.c":166:9)
#loc203 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_42.c":168:9)
#loc204 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_42.c":160:28)
#loc205 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_42.c":160:13)
#loc206 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_42.c":160:20)
#loc207 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_42.c":160:24)
#loc208 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_42.c":162:13)
#loc209 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_42.c":165:13)
#loc210 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_42.c":162:21)
#loc211 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_42.c":162:17)
#loc212 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_42.c":162:24)
#loc213 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_42.c":162:28)
#loc214 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_42.c":162:26)
#loc215 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_42.c":163:13)
#loc216 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_42.c":164:30)
#loc217 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_42.c":164:37)
#loc218 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_42.c":164:38)
#loc219 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_42.c":164:17)
#loc220 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_42.c":162:33)
#loc221 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_42.c":162:32)
#loc222 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_42.c":169:13)
#loc223 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_42.c":171:9)
#loc224 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_42.c":171:14)
#loc225 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_42.c":81:1)
#loc226 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_42.c":87:1)
#loc229 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_42.c":82:1)
#loc230 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_42.c":85:12)
#loc231 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_42.c":85:5)
#loc232 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_42.c":86:12)
#loc233 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_42.c":86:5)
#loc234 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_42.c":89:1)
#loc235 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_42.c":121:1)
#loc236 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_42.c":91:5)
#loc237 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_42.c":91:9)
#loc238 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_42.c":93:13)
#loc239 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_42.c":93:12)
#loc240 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_42.c":93:5)
#loc241 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_42.c":94:26)
#loc242 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_42.c":94:12)
#loc243 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_42.c":94:5)
#loc244 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_42.c":94:30)
#loc245 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_42.c":95:5)
#loc246 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_42.c":120:5)
#loc247 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_42.c":96:9)
#loc248 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_42.c":96:13)
#loc249 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_42.c":97:9)
#loc250 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_42.c":97:54)
#loc251 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_42.c":97:31)
#loc252 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_42.c":97:38)
#loc253 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_42.c":97:43)
#loc254 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_42.c":97:53)
#loc255 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_42.c":98:9)
#loc256 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_42.c":98:39)
#loc257 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_42.c":98:13)
#loc258 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_42.c":98:23)
#loc259 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_42.c":98:29)
#loc260 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_42.c":98:30)
#loc261 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_42.c":98:36)
#loc262 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_42.c":98:35)
#loc263 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_42.c":100:9)
#loc264 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_42.c":103:9)
#loc265 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_42.c":100:18)
#loc266 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_42.c":100:14)
#loc267 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_42.c":100:21)
#loc268 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_42.c":100:25)
#loc269 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_42.c":100:23)
#loc270 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_42.c":101:9)
#loc271 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_42.c":102:25)
#loc272 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_42.c":102:13)
#loc273 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_42.c":102:20)
#loc274 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_42.c":102:21)
#loc275 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_42.c":100:30)
#loc276 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_42.c":100:29)
#loc277 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_42.c":106:9)
#loc278 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_42.c":118:9)
#loc279 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_42.c":106:13)
#loc280 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_42.c":106:21)
#loc281 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_42.c":107:9)
#loc282 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_42.c":114:9)
#loc283 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_42.c":116:9)
#loc284 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_42.c":108:28)
#loc285 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_42.c":108:13)
#loc286 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_42.c":108:20)
#loc287 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_42.c":108:24)
#loc288 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_42.c":110:13)
#loc289 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_42.c":113:13)
#loc290 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_42.c":110:21)
#loc291 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_42.c":110:17)
#loc292 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_42.c":110:24)
#loc293 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_42.c":110:28)
#loc294 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_42.c":110:26)
#loc295 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_42.c":111:13)
#loc296 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_42.c":112:30)
#loc297 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_42.c":112:37)
#loc298 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_42.c":112:38)
#loc299 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_42.c":112:17)
#loc300 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_42.c":110:33)
#loc301 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_42.c":110:32)
#loc302 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_42.c":117:23)
#loc303 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_42.c":117:13)
#loc304 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_42.c":119:9)
#loc305 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_42.c":119:14)
#loc306 = loc(fused[#loc1, #loc2])
#loc307 = loc(fused[#loc3, #loc4])
#loc308 = loc(fused[#loc5, #loc6])
#loc309 = loc(fused[#loc8, #loc9])
#loc311 = loc(fused[#loc13, #loc14])
#loc312 = loc(fused[#loc15, #loc16])
#loc313 = loc(fused[#loc17, #loc18])
#loc314 = loc(fused[#loc22, #loc23])
#loc315 = loc(fused[#loc24, #loc25, #loc26, #loc18])
#loc316 = loc(fused[#loc29, #loc30])
#loc317 = loc(fused[#loc33, #loc32])
#loc318 = loc(fused[#loc34, #loc35])
#loc319 = loc(fused[#loc36, #loc37])
#loc320 = loc(fused[#loc38, #loc39])
#loc321 = loc(fused[#loc40, #loc41])
#loc322 = loc(fused[#loc43, #loc44])
#loc323 = loc(fused[#loc45, #loc46])
#loc324 = loc(fused[#loc47, #loc48])
#loc325 = loc(fused[#loc51, #loc49])
#loc326 = loc(fused[#loc54, #loc55])
#loc327 = loc(fused[#loc56, #loc57])
#loc328 = loc(fused[#loc58, #loc59])
#loc329 = loc(fused[#loc60, #loc61])
#loc330 = loc(fused[#loc64, #loc65])
#loc331 = loc(fused[#loc63, #loc65])
#loc332 = loc(fused[#loc62, #loc61])
#loc333 = loc(fused[#loc66, #loc67])
#loc334 = loc(fused[#loc68, #loc69])
#loc335 = loc(fused[#loc70, #loc67])
#loc336 = loc(fused[#loc74, #loc75])
#loc337 = loc(fused[#loc77, #loc76])
#loc338 = loc(fused[#loc78, #loc79])
#loc339 = loc(fused[#loc81, #loc75])
#loc340 = loc(fused[#loc83, #loc82])
#loc341 = loc(fused[#loc87, #loc86])
#loc342 = loc(fused[#loc88, #loc89])
#loc343 = loc(fused[#loc90, #loc91])
#loc344 = loc(fused[#loc92, #loc93, #loc94, #loc89])
#loc345 = loc(fused[#loc96, #loc95])
#loc346 = loc(fused[#loc99, #loc100])
#loc347 = loc(fused[#loc102, #loc101])
#loc348 = loc(fused[#loc103, #loc104])
#loc349 = loc(fused[#loc106, #loc100])
#loc350 = loc(fused[#loc112, #loc111])
#loc351 = loc(fused[#loc116, #loc117])
#loc352 = loc(fused[#loc118, #loc119])
#loc353 = loc(fused[#loc120, #loc121])
#loc354 = loc(fused[#loc122, #loc123])
#loc356 = loc(fused[#loc127, #loc128])
#loc357 = loc(fused[#loc129, #loc130])
#loc358 = loc(fused[#loc131, #loc132])
#loc359 = loc(fused[#loc136, #loc137])
#loc360 = loc(fused[#loc138, #loc139, #loc140, #loc132])
#loc361 = loc(fused[#loc143, #loc144])
#loc362 = loc(fused[#loc148, #loc147])
#loc363 = loc(fused[#loc150, #loc151])
#loc364 = loc(fused[#loc152, #loc153])
#loc365 = loc(fused[#loc156, #loc154])
#loc366 = loc(fused[#loc159, #loc160])
#loc367 = loc(fused[#loc161, #loc162])
#loc368 = loc(fused[#loc163, #loc164])
#loc369 = loc(fused[#loc165, #loc166])
#loc370 = loc(fused[#loc169, #loc170])
#loc371 = loc(fused[#loc168, #loc170])
#loc372 = loc(fused[#loc167, #loc166])
#loc373 = loc(fused[#loc171, #loc172])
#loc374 = loc(fused[#loc173, #loc174])
#loc375 = loc(fused[#loc175, #loc172])
#loc376 = loc(fused[#loc179, #loc180])
#loc377 = loc(fused[#loc182, #loc181])
#loc378 = loc(fused[#loc183, #loc184])
#loc379 = loc(fused[#loc186, #loc180])
#loc380 = loc(fused[#loc188, #loc187])
#loc381 = loc(fused[#loc192, #loc191])
#loc382 = loc(fused[#loc193, #loc194])
#loc383 = loc(fused[#loc195, #loc196])
#loc384 = loc(fused[#loc198, #loc200])
#loc385 = loc(fused[#loc201, #loc202, #loc203, #loc194])
#loc386 = loc(fused[#loc205, #loc204])
#loc387 = loc(fused[#loc208, #loc209])
#loc388 = loc(fused[#loc211, #loc210])
#loc389 = loc(fused[#loc212, #loc213])
#loc390 = loc(fused[#loc215, #loc209])
#loc391 = loc(fused[#loc221, #loc220])
#loc392 = loc(fused[#loc225, #loc226])
#loc394 = loc(fused[#loc231, #loc230])
#loc395 = loc(fused[#loc233, #loc232])
#loc396 = loc(fused[#loc234, #loc235])
#loc397 = loc(fused[#loc236, #loc237])
#loc398 = loc(fused[#loc240, #loc238])
#loc399 = loc(fused[#loc243, #loc244])
#loc400 = loc(fused[#loc245, #loc246])
#loc401 = loc(fused[#loc247, #loc248])
#loc402 = loc(fused[#loc249, #loc250])
#loc403 = loc(fused[#loc253, #loc254])
#loc404 = loc(fused[#loc252, #loc254])
#loc405 = loc(fused[#loc251, #loc250])
#loc406 = loc(fused[#loc255, #loc256])
#loc407 = loc(fused[#loc257, #loc258])
#loc408 = loc(fused[#loc259, #loc256])
#loc409 = loc(fused[#loc263, #loc264])
#loc410 = loc(fused[#loc266, #loc265])
#loc411 = loc(fused[#loc267, #loc268])
#loc412 = loc(fused[#loc270, #loc264])
#loc413 = loc(fused[#loc272, #loc271])
#loc414 = loc(fused[#loc276, #loc275])
#loc415 = loc(fused[#loc277, #loc278])
#loc416 = loc(fused[#loc279, #loc280])
#loc417 = loc(fused[#loc281, #loc282, #loc283, #loc278])
#loc418 = loc(fused[#loc285, #loc284])
#loc419 = loc(fused[#loc288, #loc289])
#loc420 = loc(fused[#loc291, #loc290])
#loc421 = loc(fused[#loc292, #loc293])
#loc422 = loc(fused[#loc295, #loc289])
#loc423 = loc(fused[#loc301, #loc300])
