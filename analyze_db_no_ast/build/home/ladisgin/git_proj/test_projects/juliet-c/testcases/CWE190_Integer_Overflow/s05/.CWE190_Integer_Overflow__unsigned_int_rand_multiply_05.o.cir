!s32i = !cir.int<s, 32>
!s8i = !cir.int<s, 8>
!u32i = !cir.int<u, 32>
!void = !cir.void
#fn_attr = #cir<extra({nothrow = #cir.nothrow})>
#fn_attr1 = #cir<extra({inline = #cir.inline<no>, nothrow = #cir.nothrow, optnone = #cir.optnone})>
module @"/home/ladisgin/git_proj/test_projects/juliet-c/testcases/CWE190_Integer_Overflow/s05/CWE190_Integer_Overflow__unsigned_int_rand_multiply_05.c" attributes {cir.lang = #cir.lang<c>, cir.sob = #cir.signed_overflow_behavior<undefined>, cir.triple = "x86_64-unknown-linux-gnu", dlti.dl_spec = #dlti.dl_spec<#dlti.dl_entry<f16, dense<16> : vector<2xi64>>, #dlti.dl_entry<i32, dense<32> : vector<2xi64>>, #dlti.dl_entry<i16, dense<16> : vector<2xi64>>, #dlti.dl_entry<!llvm.ptr<272>, dense<64> : vector<4xi64>>, #dlti.dl_entry<!llvm.ptr<271>, dense<32> : vector<4xi64>>, #dlti.dl_entry<!llvm.ptr<270>, dense<32> : vector<4xi64>>, #dlti.dl_entry<f64, dense<64> : vector<2xi64>>, #dlti.dl_entry<f128, dense<128> : vector<2xi64>>, #dlti.dl_entry<f80, dense<128> : vector<2xi64>>, #dlti.dl_entry<i128, dense<128> : vector<2xi64>>, #dlti.dl_entry<i64, dense<64> : vector<2xi64>>, #dlti.dl_entry<i8, dense<8> : vector<2xi64>>, #dlti.dl_entry<i1, dense<8> : vector<2xi64>>, #dlti.dl_entry<!llvm.ptr, dense<64> : vector<4xi64>>, #dlti.dl_entry<"dlti.endianness", "little">, #dlti.dl_entry<"dlti.stack_alignment", 128 : i64>>, llvm.data_layout = "e-m:e-p270:32:32-p271:32:32-p272:64:64-i64:64-i128:128-f80:128-n8:16:32:64-S128"} {
  cir.global "private"  internal dsolocal @staticTrue = #cir.int<1> : !s32i {alignment = 4 : i64} loc(#loc188)
  cir.func private  @rand() -> !s32i extra(#fn_attr) loc(#loc189)
  cir.func private  @printUnsignedLine(!u32i) loc(#loc190)
  cir.func no_proto  @CWE190_Integer_Overflow__unsigned_int_rand_multiply_05_bad() extra(#fn_attr1) {
    %0 = cir.alloca !u32i, !cir.ptr<!u32i>, ["data"] {alignment = 4 : i64} loc(#loc192)
    %1 = cir.const #cir.int<0> : !s32i loc(#loc11)
    %2 = cir.cast(integral, %1 : !s32i), !u32i loc(#loc11)
    cir.store %2, %0 : !u32i, !cir.ptr<!u32i> loc(#loc193)
    cir.scope {
      %3 = cir.get_global @staticTrue : !cir.ptr<!s32i> loc(#loc188)
      %4 = cir.load %3 : !cir.ptr<!s32i>, !s32i loc(#loc15)
      %5 = cir.cast(int_to_bool, %4 : !s32i), !cir.bool loc(#loc15)
      cir.if %5 {
        %6 = cir.call @rand() : () -> !s32i extra(#fn_attr) loc(#loc17)
        %7 = cir.const #cir.int<1> : !s32i loc(#loc17)
        %8 = cir.binop(and, %6, %7) : !s32i loc(#loc17)
        %9 = cir.cast(int_to_bool, %8 : !s32i), !cir.bool loc(#loc17)
        %10 = cir.ternary(%9, true {
          %13 = cir.call @rand() : () -> !s32i extra(#fn_attr) loc(#loc17)
          %14 = cir.cast(integral, %13 : !s32i), !u32i loc(#loc17)
          %15 = cir.const #cir.int<30> : !s32i loc(#loc17)
          %16 = cir.shift(left, %14 : !u32i, %15 : !s32i) -> !u32i loc(#loc17)
          %17 = cir.call @rand() : () -> !s32i extra(#fn_attr) loc(#loc17)
          %18 = cir.cast(integral, %17 : !s32i), !u32i loc(#loc17)
          %19 = cir.const #cir.int<15> : !s32i loc(#loc17)
          %20 = cir.shift(left, %18 : !u32i, %19 : !s32i) -> !u32i loc(#loc17)
          %21 = cir.binop(xor, %16, %20) : !u32i loc(#loc17)
          %22 = cir.call @rand() : () -> !s32i extra(#fn_attr) loc(#loc17)
          %23 = cir.cast(integral, %22 : !s32i), !u32i loc(#loc17)
          %24 = cir.binop(xor, %21, %23) : !u32i loc(#loc17)
          cir.yield %24 : !u32i loc(#loc17)
        }, false {
          %13 = cir.call @rand() : () -> !s32i extra(#fn_attr) loc(#loc17)
          %14 = cir.cast(integral, %13 : !s32i), !u32i loc(#loc17)
          %15 = cir.const #cir.int<30> : !s32i loc(#loc17)
          %16 = cir.shift(left, %14 : !u32i, %15 : !s32i) -> !u32i loc(#loc17)
          %17 = cir.call @rand() : () -> !s32i extra(#fn_attr) loc(#loc17)
          %18 = cir.cast(integral, %17 : !s32i), !u32i loc(#loc17)
          %19 = cir.const #cir.int<15> : !s32i loc(#loc17)
          %20 = cir.shift(left, %18 : !u32i, %19 : !s32i) -> !u32i loc(#loc17)
          %21 = cir.binop(xor, %16, %20) : !u32i loc(#loc17)
          %22 = cir.call @rand() : () -> !s32i extra(#fn_attr) loc(#loc17)
          %23 = cir.cast(integral, %22 : !s32i), !u32i loc(#loc17)
          %24 = cir.binop(xor, %21, %23) : !u32i loc(#loc17)
          %25 = cir.unary(minus, %24) : !u32i, !u32i loc(#loc17)
          %26 = cir.const #cir.int<1> : !s32i loc(#loc17)
          %27 = cir.cast(integral, %26 : !s32i), !u32i loc(#loc17)
          %28 = cir.binop(sub, %25, %27) : !u32i loc(#loc17)
          cir.yield %28 : !u32i loc(#loc17)
        }) : (!cir.bool) -> !u32i loc(#loc17)
        %11 = cir.cast(integral, %10 : !u32i), !s32i loc(#loc17)
        %12 = cir.cast(integral, %11 : !s32i), !u32i loc(#loc17)
        cir.store %12, %0 : !u32i, !cir.ptr<!u32i> loc(#loc196)
      } loc(#loc195)
    } loc(#loc194)
    cir.scope {
      %3 = cir.get_global @staticTrue : !cir.ptr<!s32i> loc(#loc188)
      %4 = cir.load %3 : !cir.ptr<!s32i>, !s32i loc(#loc21)
      %5 = cir.cast(int_to_bool, %4 : !s32i), !cir.bool loc(#loc21)
      cir.if %5 {
        cir.scope {
          %6 = cir.load %0 : !cir.ptr<!u32i>, !u32i loc(#loc25)
          %7 = cir.const #cir.int<0> : !s32i loc(#loc26)
          %8 = cir.cast(integral, %7 : !s32i), !u32i loc(#loc26)
          %9 = cir.cmp(gt, %6, %8) : !u32i, !s32i loc(#loc200)
          %10 = cir.cast(int_to_bool, %9 : !s32i), !cir.bool loc(#loc27)
          cir.if %10 {
            %11 = cir.alloca !u32i, !cir.ptr<!u32i>, ["result", init] {alignment = 4 : i64} loc(#loc202)
            %12 = cir.load %0 : !cir.ptr<!u32i>, !u32i loc(#loc31)
            %13 = cir.const #cir.int<2> : !s32i loc(#loc30)
            %14 = cir.cast(integral, %13 : !s32i), !u32i loc(#loc30)
            %15 = cir.binop(mul, %12, %14) : !u32i loc(#loc203)
            cir.store %15, %11 : !u32i, !cir.ptr<!u32i> loc(#loc202)
            %16 = cir.load %11 : !cir.ptr<!u32i>, !u32i loc(#loc32)
            cir.call @printUnsignedLine(%16) : (!u32i) -> () loc(#loc33)
          } loc(#loc201)
        } loc(#loc199)
      } loc(#loc198)
    } loc(#loc197)
    cir.return loc(#loc8)
  } loc(#loc191)
  cir.func no_proto  @CWE190_Integer_Overflow__unsigned_int_rand_multiply_05_good() extra(#fn_attr1) {
    %0 = cir.get_global @goodB2G1 : !cir.ptr<!cir.func<!void ()>> loc(#loc205)
    cir.call %0() : (!cir.ptr<!cir.func<!void ()>>) -> () loc(#loc36)
    %1 = cir.get_global @goodB2G2 : !cir.ptr<!cir.func<!void ()>> loc(#loc206)
    cir.call %1() : (!cir.ptr<!cir.func<!void ()>>) -> () loc(#loc38)
    %2 = cir.get_global @goodG2B1 : !cir.ptr<!cir.func<!void ()>> loc(#loc207)
    cir.call %2() : (!cir.ptr<!cir.func<!void ()>>) -> () loc(#loc40)
    %3 = cir.get_global @goodG2B2 : !cir.ptr<!cir.func<!void ()>> loc(#loc208)
    cir.call %3() : (!cir.ptr<!cir.func<!void ()>>) -> () loc(#loc42)
    cir.return loc(#loc35)
  } loc(#loc204)
  cir.global "private"  internal dsolocal @staticFalse = #cir.int<0> : !s32i {alignment = 4 : i64} loc(#loc209)
  cir.func private  @printLine(!cir.ptr<!s8i>) loc(#loc210)
  cir.global "private"  constant internal dsolocal @".str" = #cir.const_array<"Benign, fixed string\00" : !cir.array<!s8i x 21>> : !cir.array<!s8i x 21> {alignment = 1 : i64} loc(#loc48)
  cir.global "private"  constant internal dsolocal @".str1" = #cir.const_array<"data value is too large to perform arithmetic safely.\00" : !cir.array<!s8i x 54>> : !cir.array<!s8i x 54> {alignment = 1 : i64} loc(#loc49)
  cir.func no_proto internal private  @goodB2G1() extra(#fn_attr1) {
    %0 = cir.alloca !u32i, !cir.ptr<!u32i>, ["data"] {alignment = 4 : i64} loc(#loc212)
    %1 = cir.const #cir.int<0> : !s32i loc(#loc54)
    %2 = cir.cast(integral, %1 : !s32i), !u32i loc(#loc54)
    cir.store %2, %0 : !u32i, !cir.ptr<!u32i> loc(#loc213)
    cir.scope {
      %3 = cir.get_global @staticTrue : !cir.ptr<!s32i> loc(#loc188)
      %4 = cir.load %3 : !cir.ptr<!s32i>, !s32i loc(#loc58)
      %5 = cir.cast(int_to_bool, %4 : !s32i), !cir.bool loc(#loc58)
      cir.if %5 {
        %6 = cir.call @rand() : () -> !s32i extra(#fn_attr) loc(#loc60)
        %7 = cir.const #cir.int<1> : !s32i loc(#loc60)
        %8 = cir.binop(and, %6, %7) : !s32i loc(#loc60)
        %9 = cir.cast(int_to_bool, %8 : !s32i), !cir.bool loc(#loc60)
        %10 = cir.ternary(%9, true {
          %13 = cir.call @rand() : () -> !s32i extra(#fn_attr) loc(#loc60)
          %14 = cir.cast(integral, %13 : !s32i), !u32i loc(#loc60)
          %15 = cir.const #cir.int<30> : !s32i loc(#loc60)
          %16 = cir.shift(left, %14 : !u32i, %15 : !s32i) -> !u32i loc(#loc60)
          %17 = cir.call @rand() : () -> !s32i extra(#fn_attr) loc(#loc60)
          %18 = cir.cast(integral, %17 : !s32i), !u32i loc(#loc60)
          %19 = cir.const #cir.int<15> : !s32i loc(#loc60)
          %20 = cir.shift(left, %18 : !u32i, %19 : !s32i) -> !u32i loc(#loc60)
          %21 = cir.binop(xor, %16, %20) : !u32i loc(#loc60)
          %22 = cir.call @rand() : () -> !s32i extra(#fn_attr) loc(#loc60)
          %23 = cir.cast(integral, %22 : !s32i), !u32i loc(#loc60)
          %24 = cir.binop(xor, %21, %23) : !u32i loc(#loc60)
          cir.yield %24 : !u32i loc(#loc60)
        }, false {
          %13 = cir.call @rand() : () -> !s32i extra(#fn_attr) loc(#loc60)
          %14 = cir.cast(integral, %13 : !s32i), !u32i loc(#loc60)
          %15 = cir.const #cir.int<30> : !s32i loc(#loc60)
          %16 = cir.shift(left, %14 : !u32i, %15 : !s32i) -> !u32i loc(#loc60)
          %17 = cir.call @rand() : () -> !s32i extra(#fn_attr) loc(#loc60)
          %18 = cir.cast(integral, %17 : !s32i), !u32i loc(#loc60)
          %19 = cir.const #cir.int<15> : !s32i loc(#loc60)
          %20 = cir.shift(left, %18 : !u32i, %19 : !s32i) -> !u32i loc(#loc60)
          %21 = cir.binop(xor, %16, %20) : !u32i loc(#loc60)
          %22 = cir.call @rand() : () -> !s32i extra(#fn_attr) loc(#loc60)
          %23 = cir.cast(integral, %22 : !s32i), !u32i loc(#loc60)
          %24 = cir.binop(xor, %21, %23) : !u32i loc(#loc60)
          %25 = cir.unary(minus, %24) : !u32i, !u32i loc(#loc60)
          %26 = cir.const #cir.int<1> : !s32i loc(#loc60)
          %27 = cir.cast(integral, %26 : !s32i), !u32i loc(#loc60)
          %28 = cir.binop(sub, %25, %27) : !u32i loc(#loc60)
          cir.yield %28 : !u32i loc(#loc60)
        }) : (!cir.bool) -> !u32i loc(#loc60)
        %11 = cir.cast(integral, %10 : !u32i), !s32i loc(#loc60)
        %12 = cir.cast(integral, %11 : !s32i), !u32i loc(#loc60)
        cir.store %12, %0 : !u32i, !cir.ptr<!u32i> loc(#loc216)
      } loc(#loc215)
    } loc(#loc214)
    cir.scope {
      %3 = cir.get_global @staticFalse : !cir.ptr<!s32i> loc(#loc209)
      %4 = cir.load %3 : !cir.ptr<!s32i>, !s32i loc(#loc64)
      %5 = cir.cast(int_to_bool, %4 : !s32i), !cir.bool loc(#loc64)
      cir.if %5 {
        %6 = cir.get_global @".str" : !cir.ptr<!cir.array<!s8i x 21>> loc(#loc48)
        %7 = cir.cast(array_to_ptrdecay, %6 : !cir.ptr<!cir.array<!s8i x 21>>), !cir.ptr<!s8i> loc(#loc48)
        cir.call @printLine(%7) : (!cir.ptr<!s8i>) -> () loc(#loc68)
      } else {
        cir.scope {
          %6 = cir.load %0 : !cir.ptr<!u32i>, !u32i loc(#loc71)
          %7 = cir.const #cir.int<0> : !s32i loc(#loc72)
          %8 = cir.cast(integral, %7 : !s32i), !u32i loc(#loc72)
          %9 = cir.cmp(gt, %6, %8) : !u32i, !s32i loc(#loc220)
          %10 = cir.cast(int_to_bool, %9 : !s32i), !cir.bool loc(#loc73)
          cir.if %10 {
            cir.scope {
              %11 = cir.load %0 : !cir.ptr<!u32i>, !u32i loc(#loc77)
              %12 = cir.const #cir.int<2147483647> : !s32i loc(#loc78)
              %13 = cir.cast(integral, %12 : !s32i), !u32i loc(#loc78)
              %14 = cir.const #cir.int<2> : !u32i loc(#loc78)
              %15 = cir.binop(mul, %13, %14) : !u32i loc(#loc78)
              %16 = cir.const #cir.int<1> : !u32i loc(#loc78)
              %17 = cir.binop(add, %15, %16) : !u32i loc(#loc78)
              %18 = cir.const #cir.int<2> : !s32i loc(#loc79)
              %19 = cir.cast(integral, %18 : !s32i), !u32i loc(#loc79)
              %20 = cir.binop(div, %17, %19) : !u32i loc(#loc223)
              %21 = cir.cmp(lt, %11, %20) : !u32i, !s32i loc(#loc224)
              %22 = cir.cast(int_to_bool, %21 : !s32i), !cir.bool loc(#loc81)
              cir.if %22 {
                %23 = cir.alloca !u32i, !cir.ptr<!u32i>, ["result", init] {alignment = 4 : i64} loc(#loc226)
                %24 = cir.load %0 : !cir.ptr<!u32i>, !u32i loc(#loc87)
                %25 = cir.const #cir.int<2> : !s32i loc(#loc86)
                %26 = cir.cast(integral, %25 : !s32i), !u32i loc(#loc86)
                %27 = cir.binop(mul, %24, %26) : !u32i loc(#loc227)
                cir.store %27, %23 : !u32i, !cir.ptr<!u32i> loc(#loc226)
                %28 = cir.load %23 : !cir.ptr<!u32i>, !u32i loc(#loc88)
                cir.call @printUnsignedLine(%28) : (!u32i) -> () loc(#loc89)
              } else {
                %23 = cir.get_global @".str1" : !cir.ptr<!cir.array<!s8i x 54>> loc(#loc49)
                %24 = cir.cast(array_to_ptrdecay, %23 : !cir.ptr<!cir.array<!s8i x 54>>), !cir.ptr<!s8i> loc(#loc49)
                cir.call @printLine(%24) : (!cir.ptr<!s8i>) -> () loc(#loc90)
              } loc(#loc225)
            } loc(#loc222)
          } loc(#loc221)
        } loc(#loc219)
      } loc(#loc218)
    } loc(#loc217)
    cir.return loc(#loc51)
  } loc(#loc211)
  cir.func no_proto internal private  @goodB2G2() extra(#fn_attr1) {
    %0 = cir.alloca !u32i, !cir.ptr<!u32i>, ["data"] {alignment = 4 : i64} loc(#loc229)
    %1 = cir.const #cir.int<0> : !s32i loc(#loc95)
    %2 = cir.cast(integral, %1 : !s32i), !u32i loc(#loc95)
    cir.store %2, %0 : !u32i, !cir.ptr<!u32i> loc(#loc230)
    cir.scope {
      %3 = cir.get_global @staticTrue : !cir.ptr<!s32i> loc(#loc188)
      %4 = cir.load %3 : !cir.ptr<!s32i>, !s32i loc(#loc99)
      %5 = cir.cast(int_to_bool, %4 : !s32i), !cir.bool loc(#loc99)
      cir.if %5 {
        %6 = cir.call @rand() : () -> !s32i extra(#fn_attr) loc(#loc101)
        %7 = cir.const #cir.int<1> : !s32i loc(#loc101)
        %8 = cir.binop(and, %6, %7) : !s32i loc(#loc101)
        %9 = cir.cast(int_to_bool, %8 : !s32i), !cir.bool loc(#loc101)
        %10 = cir.ternary(%9, true {
          %13 = cir.call @rand() : () -> !s32i extra(#fn_attr) loc(#loc101)
          %14 = cir.cast(integral, %13 : !s32i), !u32i loc(#loc101)
          %15 = cir.const #cir.int<30> : !s32i loc(#loc101)
          %16 = cir.shift(left, %14 : !u32i, %15 : !s32i) -> !u32i loc(#loc101)
          %17 = cir.call @rand() : () -> !s32i extra(#fn_attr) loc(#loc101)
          %18 = cir.cast(integral, %17 : !s32i), !u32i loc(#loc101)
          %19 = cir.const #cir.int<15> : !s32i loc(#loc101)
          %20 = cir.shift(left, %18 : !u32i, %19 : !s32i) -> !u32i loc(#loc101)
          %21 = cir.binop(xor, %16, %20) : !u32i loc(#loc101)
          %22 = cir.call @rand() : () -> !s32i extra(#fn_attr) loc(#loc101)
          %23 = cir.cast(integral, %22 : !s32i), !u32i loc(#loc101)
          %24 = cir.binop(xor, %21, %23) : !u32i loc(#loc101)
          cir.yield %24 : !u32i loc(#loc101)
        }, false {
          %13 = cir.call @rand() : () -> !s32i extra(#fn_attr) loc(#loc101)
          %14 = cir.cast(integral, %13 : !s32i), !u32i loc(#loc101)
          %15 = cir.const #cir.int<30> : !s32i loc(#loc101)
          %16 = cir.shift(left, %14 : !u32i, %15 : !s32i) -> !u32i loc(#loc101)
          %17 = cir.call @rand() : () -> !s32i extra(#fn_attr) loc(#loc101)
          %18 = cir.cast(integral, %17 : !s32i), !u32i loc(#loc101)
          %19 = cir.const #cir.int<15> : !s32i loc(#loc101)
          %20 = cir.shift(left, %18 : !u32i, %19 : !s32i) -> !u32i loc(#loc101)
          %21 = cir.binop(xor, %16, %20) : !u32i loc(#loc101)
          %22 = cir.call @rand() : () -> !s32i extra(#fn_attr) loc(#loc101)
          %23 = cir.cast(integral, %22 : !s32i), !u32i loc(#loc101)
          %24 = cir.binop(xor, %21, %23) : !u32i loc(#loc101)
          %25 = cir.unary(minus, %24) : !u32i, !u32i loc(#loc101)
          %26 = cir.const #cir.int<1> : !s32i loc(#loc101)
          %27 = cir.cast(integral, %26 : !s32i), !u32i loc(#loc101)
          %28 = cir.binop(sub, %25, %27) : !u32i loc(#loc101)
          cir.yield %28 : !u32i loc(#loc101)
        }) : (!cir.bool) -> !u32i loc(#loc101)
        %11 = cir.cast(integral, %10 : !u32i), !s32i loc(#loc101)
        %12 = cir.cast(integral, %11 : !s32i), !u32i loc(#loc101)
        cir.store %12, %0 : !u32i, !cir.ptr<!u32i> loc(#loc233)
      } loc(#loc232)
    } loc(#loc231)
    cir.scope {
      %3 = cir.get_global @staticTrue : !cir.ptr<!s32i> loc(#loc188)
      %4 = cir.load %3 : !cir.ptr<!s32i>, !s32i loc(#loc105)
      %5 = cir.cast(int_to_bool, %4 : !s32i), !cir.bool loc(#loc105)
      cir.if %5 {
        cir.scope {
          %6 = cir.load %0 : !cir.ptr<!u32i>, !u32i loc(#loc109)
          %7 = cir.const #cir.int<0> : !s32i loc(#loc110)
          %8 = cir.cast(integral, %7 : !s32i), !u32i loc(#loc110)
          %9 = cir.cmp(gt, %6, %8) : !u32i, !s32i loc(#loc237)
          %10 = cir.cast(int_to_bool, %9 : !s32i), !cir.bool loc(#loc111)
          cir.if %10 {
            cir.scope {
              %11 = cir.load %0 : !cir.ptr<!u32i>, !u32i loc(#loc115)
              %12 = cir.const #cir.int<2147483647> : !s32i loc(#loc116)
              %13 = cir.cast(integral, %12 : !s32i), !u32i loc(#loc116)
              %14 = cir.const #cir.int<2> : !u32i loc(#loc116)
              %15 = cir.binop(mul, %13, %14) : !u32i loc(#loc116)
              %16 = cir.const #cir.int<1> : !u32i loc(#loc116)
              %17 = cir.binop(add, %15, %16) : !u32i loc(#loc116)
              %18 = cir.const #cir.int<2> : !s32i loc(#loc117)
              %19 = cir.cast(integral, %18 : !s32i), !u32i loc(#loc117)
              %20 = cir.binop(div, %17, %19) : !u32i loc(#loc240)
              %21 = cir.cmp(lt, %11, %20) : !u32i, !s32i loc(#loc241)
              %22 = cir.cast(int_to_bool, %21 : !s32i), !cir.bool loc(#loc119)
              cir.if %22 {
                %23 = cir.alloca !u32i, !cir.ptr<!u32i>, ["result", init] {alignment = 4 : i64} loc(#loc243)
                %24 = cir.load %0 : !cir.ptr<!u32i>, !u32i loc(#loc125)
                %25 = cir.const #cir.int<2> : !s32i loc(#loc124)
                %26 = cir.cast(integral, %25 : !s32i), !u32i loc(#loc124)
                %27 = cir.binop(mul, %24, %26) : !u32i loc(#loc244)
                cir.store %27, %23 : !u32i, !cir.ptr<!u32i> loc(#loc243)
                %28 = cir.load %23 : !cir.ptr<!u32i>, !u32i loc(#loc126)
                cir.call @printUnsignedLine(%28) : (!u32i) -> () loc(#loc127)
              } else {
                %23 = cir.get_global @".str1" : !cir.ptr<!cir.array<!s8i x 54>> loc(#loc128)
                %24 = cir.cast(array_to_ptrdecay, %23 : !cir.ptr<!cir.array<!s8i x 54>>), !cir.ptr<!s8i> loc(#loc128)
                cir.call @printLine(%24) : (!cir.ptr<!s8i>) -> () loc(#loc129)
              } loc(#loc242)
            } loc(#loc239)
          } loc(#loc238)
        } loc(#loc236)
      } loc(#loc235)
    } loc(#loc234)
    cir.return loc(#loc92)
  } loc(#loc228)
  cir.func no_proto internal private  @goodG2B1() extra(#fn_attr1) {
    %0 = cir.alloca !u32i, !cir.ptr<!u32i>, ["data"] {alignment = 4 : i64} loc(#loc246)
    %1 = cir.const #cir.int<0> : !s32i loc(#loc134)
    %2 = cir.cast(integral, %1 : !s32i), !u32i loc(#loc134)
    cir.store %2, %0 : !u32i, !cir.ptr<!u32i> loc(#loc247)
    cir.scope {
      %3 = cir.get_global @staticFalse : !cir.ptr<!s32i> loc(#loc209)
      %4 = cir.load %3 : !cir.ptr<!s32i>, !s32i loc(#loc138)
      %5 = cir.cast(int_to_bool, %4 : !s32i), !cir.bool loc(#loc138)
      cir.if %5 {
        %6 = cir.get_global @".str" : !cir.ptr<!cir.array<!s8i x 21>> loc(#loc142)
        %7 = cir.cast(array_to_ptrdecay, %6 : !cir.ptr<!cir.array<!s8i x 21>>), !cir.ptr<!s8i> loc(#loc142)
        cir.call @printLine(%7) : (!cir.ptr<!s8i>) -> () loc(#loc143)
      } else {
        %6 = cir.const #cir.int<2> : !s32i loc(#loc144)
        %7 = cir.cast(integral, %6 : !s32i), !u32i loc(#loc144)
        cir.store %7, %0 : !u32i, !cir.ptr<!u32i> loc(#loc250)
      } loc(#loc249)
    } loc(#loc248)
    cir.scope {
      %3 = cir.get_global @staticTrue : !cir.ptr<!s32i> loc(#loc188)
      %4 = cir.load %3 : !cir.ptr<!s32i>, !s32i loc(#loc148)
      %5 = cir.cast(int_to_bool, %4 : !s32i), !cir.bool loc(#loc148)
      cir.if %5 {
        cir.scope {
          %6 = cir.load %0 : !cir.ptr<!u32i>, !u32i loc(#loc152)
          %7 = cir.const #cir.int<0> : !s32i loc(#loc153)
          %8 = cir.cast(integral, %7 : !s32i), !u32i loc(#loc153)
          %9 = cir.cmp(gt, %6, %8) : !u32i, !s32i loc(#loc254)
          %10 = cir.cast(int_to_bool, %9 : !s32i), !cir.bool loc(#loc154)
          cir.if %10 {
            %11 = cir.alloca !u32i, !cir.ptr<!u32i>, ["result", init] {alignment = 4 : i64} loc(#loc256)
            %12 = cir.load %0 : !cir.ptr<!u32i>, !u32i loc(#loc158)
            %13 = cir.const #cir.int<2> : !s32i loc(#loc157)
            %14 = cir.cast(integral, %13 : !s32i), !u32i loc(#loc157)
            %15 = cir.binop(mul, %12, %14) : !u32i loc(#loc257)
            cir.store %15, %11 : !u32i, !cir.ptr<!u32i> loc(#loc256)
            %16 = cir.load %11 : !cir.ptr<!u32i>, !u32i loc(#loc159)
            cir.call @printUnsignedLine(%16) : (!u32i) -> () loc(#loc160)
          } loc(#loc255)
        } loc(#loc253)
      } loc(#loc252)
    } loc(#loc251)
    cir.return loc(#loc131)
  } loc(#loc245)
  cir.func no_proto internal private  @goodG2B2() extra(#fn_attr1) {
    %0 = cir.alloca !u32i, !cir.ptr<!u32i>, ["data"] {alignment = 4 : i64} loc(#loc259)
    %1 = cir.const #cir.int<0> : !s32i loc(#loc165)
    %2 = cir.cast(integral, %1 : !s32i), !u32i loc(#loc165)
    cir.store %2, %0 : !u32i, !cir.ptr<!u32i> loc(#loc260)
    cir.scope {
      %3 = cir.get_global @staticTrue : !cir.ptr<!s32i> loc(#loc188)
      %4 = cir.load %3 : !cir.ptr<!s32i>, !s32i loc(#loc169)
      %5 = cir.cast(int_to_bool, %4 : !s32i), !cir.bool loc(#loc169)
      cir.if %5 {
        %6 = cir.const #cir.int<2> : !s32i loc(#loc171)
        %7 = cir.cast(integral, %6 : !s32i), !u32i loc(#loc171)
        cir.store %7, %0 : !u32i, !cir.ptr<!u32i> loc(#loc263)
      } loc(#loc262)
    } loc(#loc261)
    cir.scope {
      %3 = cir.get_global @staticTrue : !cir.ptr<!s32i> loc(#loc188)
      %4 = cir.load %3 : !cir.ptr<!s32i>, !s32i loc(#loc175)
      %5 = cir.cast(int_to_bool, %4 : !s32i), !cir.bool loc(#loc175)
      cir.if %5 {
        cir.scope {
          %6 = cir.load %0 : !cir.ptr<!u32i>, !u32i loc(#loc179)
          %7 = cir.const #cir.int<0> : !s32i loc(#loc180)
          %8 = cir.cast(integral, %7 : !s32i), !u32i loc(#loc180)
          %9 = cir.cmp(gt, %6, %8) : !u32i, !s32i loc(#loc267)
          %10 = cir.cast(int_to_bool, %9 : !s32i), !cir.bool loc(#loc181)
          cir.if %10 {
            %11 = cir.alloca !u32i, !cir.ptr<!u32i>, ["result", init] {alignment = 4 : i64} loc(#loc269)
            %12 = cir.load %0 : !cir.ptr<!u32i>, !u32i loc(#loc185)
            %13 = cir.const #cir.int<2> : !s32i loc(#loc184)
            %14 = cir.cast(integral, %13 : !s32i), !u32i loc(#loc184)
            %15 = cir.binop(mul, %12, %14) : !u32i loc(#loc270)
            cir.store %15, %11 : !u32i, !cir.ptr<!u32i> loc(#loc269)
            %16 = cir.load %11 : !cir.ptr<!u32i>, !u32i loc(#loc186)
            cir.call @printUnsignedLine(%16) : (!u32i) -> () loc(#loc187)
          } loc(#loc268)
        } loc(#loc266)
      } loc(#loc265)
    } loc(#loc264)
    cir.return loc(#loc162)
  } loc(#loc258)
} loc(#loc)
#loc = loc("/home/ladisgin/git_proj/test_projects/juliet-c/testcases/CWE190_Integer_Overflow/s05/CWE190_Integer_Overflow__unsigned_int_rand_multiply_05.c":0:0)
#loc1 = loc("CWE190_Integer_Overflow__unsigned_int_rand_multiply_05.c":23:1)
#loc2 = loc("CWE190_Integer_Overflow__unsigned_int_rand_multiply_05.c":23:25)
#loc3 = loc("/usr/include/stdlib.h":573:1)
#loc4 = loc("/usr/include/stdlib.h":573:24)
#loc5 = loc("../../../testcasesupport/std_testcase_io.h":34:1)
#loc6 = loc("../../../testcasesupport/std_testcase_io.h":34:47)
#loc7 = loc("CWE190_Integer_Overflow__unsigned_int_rand_multiply_05.c":28:1)
#loc8 = loc("CWE190_Integer_Overflow__unsigned_int_rand_multiply_05.c":46:1)
#loc9 = loc("CWE190_Integer_Overflow__unsigned_int_rand_multiply_05.c":30:5)
#loc10 = loc("CWE190_Integer_Overflow__unsigned_int_rand_multiply_05.c":30:18)
#loc11 = loc("CWE190_Integer_Overflow__unsigned_int_rand_multiply_05.c":31:12)
#loc12 = loc("CWE190_Integer_Overflow__unsigned_int_rand_multiply_05.c":31:5)
#loc13 = loc("CWE190_Integer_Overflow__unsigned_int_rand_multiply_05.c":32:5)
#loc14 = loc("CWE190_Integer_Overflow__unsigned_int_rand_multiply_05.c":36:5)
#loc15 = loc("CWE190_Integer_Overflow__unsigned_int_rand_multiply_05.c":32:8)
#loc16 = loc("CWE190_Integer_Overflow__unsigned_int_rand_multiply_05.c":33:5)
#loc17 = loc("CWE190_Integer_Overflow__unsigned_int_rand_multiply_05.c":35:30)
#loc18 = loc("CWE190_Integer_Overflow__unsigned_int_rand_multiply_05.c":35:9)
#loc19 = loc("CWE190_Integer_Overflow__unsigned_int_rand_multiply_05.c":37:5)
#loc20 = loc("CWE190_Integer_Overflow__unsigned_int_rand_multiply_05.c":45:5)
#loc21 = loc("CWE190_Integer_Overflow__unsigned_int_rand_multiply_05.c":37:8)
#loc22 = loc("CWE190_Integer_Overflow__unsigned_int_rand_multiply_05.c":38:5)
#loc23 = loc("CWE190_Integer_Overflow__unsigned_int_rand_multiply_05.c":39:9)
#loc24 = loc("CWE190_Integer_Overflow__unsigned_int_rand_multiply_05.c":44:9)
#loc25 = loc("CWE190_Integer_Overflow__unsigned_int_rand_multiply_05.c":39:12)
#loc26 = loc("CWE190_Integer_Overflow__unsigned_int_rand_multiply_05.c":39:19)
#loc27 = loc("CWE190_Integer_Overflow__unsigned_int_rand_multiply_05.c":39:17)
#loc28 = loc("CWE190_Integer_Overflow__unsigned_int_rand_multiply_05.c":40:9)
#loc29 = loc("CWE190_Integer_Overflow__unsigned_int_rand_multiply_05.c":42:13)
#loc30 = loc("CWE190_Integer_Overflow__unsigned_int_rand_multiply_05.c":42:42)
#loc31 = loc("CWE190_Integer_Overflow__unsigned_int_rand_multiply_05.c":42:35)
#loc32 = loc("CWE190_Integer_Overflow__unsigned_int_rand_multiply_05.c":43:31)
#loc33 = loc("CWE190_Integer_Overflow__unsigned_int_rand_multiply_05.c":43:13)
#loc34 = loc("CWE190_Integer_Overflow__unsigned_int_rand_multiply_05.c":160:1)
#loc35 = loc("CWE190_Integer_Overflow__unsigned_int_rand_multiply_05.c":166:1)
#loc36 = loc("CWE190_Integer_Overflow__unsigned_int_rand_multiply_05.c":162:5)
#loc37 = loc("CWE190_Integer_Overflow__unsigned_int_rand_multiply_05.c":162:14)
#loc38 = loc("CWE190_Integer_Overflow__unsigned_int_rand_multiply_05.c":163:5)
#loc39 = loc("CWE190_Integer_Overflow__unsigned_int_rand_multiply_05.c":163:14)
#loc40 = loc("CWE190_Integer_Overflow__unsigned_int_rand_multiply_05.c":164:5)
#loc41 = loc("CWE190_Integer_Overflow__unsigned_int_rand_multiply_05.c":164:14)
#loc42 = loc("CWE190_Integer_Overflow__unsigned_int_rand_multiply_05.c":165:5)
#loc43 = loc("CWE190_Integer_Overflow__unsigned_int_rand_multiply_05.c":165:14)
#loc44 = loc("CWE190_Integer_Overflow__unsigned_int_rand_multiply_05.c":24:1)
#loc45 = loc("CWE190_Integer_Overflow__unsigned_int_rand_multiply_05.c":24:26)
#loc46 = loc("../../../testcasesupport/std_testcase_io.h":14:1)
#loc47 = loc("../../../testcasesupport/std_testcase_io.h":14:33)
#loc48 = loc("CWE190_Integer_Overflow__unsigned_int_rand_multiply_05.c":65:19)
#loc49 = loc("CWE190_Integer_Overflow__unsigned_int_rand_multiply_05.c":79:27)
#loc50 = loc("CWE190_Integer_Overflow__unsigned_int_rand_multiply_05.c":53:1)
#loc51 = loc("CWE190_Integer_Overflow__unsigned_int_rand_multiply_05.c":83:1)
#loc52 = loc("CWE190_Integer_Overflow__unsigned_int_rand_multiply_05.c":55:5)
#loc53 = loc("CWE190_Integer_Overflow__unsigned_int_rand_multiply_05.c":55:18)
#loc54 = loc("CWE190_Integer_Overflow__unsigned_int_rand_multiply_05.c":56:12)
#loc55 = loc("CWE190_Integer_Overflow__unsigned_int_rand_multiply_05.c":56:5)
#loc56 = loc("CWE190_Integer_Overflow__unsigned_int_rand_multiply_05.c":57:5)
#loc57 = loc("CWE190_Integer_Overflow__unsigned_int_rand_multiply_05.c":61:5)
#loc58 = loc("CWE190_Integer_Overflow__unsigned_int_rand_multiply_05.c":57:8)
#loc59 = loc("CWE190_Integer_Overflow__unsigned_int_rand_multiply_05.c":58:5)
#loc60 = loc("CWE190_Integer_Overflow__unsigned_int_rand_multiply_05.c":60:30)
#loc61 = loc("CWE190_Integer_Overflow__unsigned_int_rand_multiply_05.c":60:9)
#loc62 = loc("CWE190_Integer_Overflow__unsigned_int_rand_multiply_05.c":62:5)
#loc63 = loc("CWE190_Integer_Overflow__unsigned_int_rand_multiply_05.c":82:5)
#loc64 = loc("CWE190_Integer_Overflow__unsigned_int_rand_multiply_05.c":62:8)
#loc65 = loc("CWE190_Integer_Overflow__unsigned_int_rand_multiply_05.c":63:5)
#loc66 = loc("CWE190_Integer_Overflow__unsigned_int_rand_multiply_05.c":66:5)
#loc67 = loc("CWE190_Integer_Overflow__unsigned_int_rand_multiply_05.c":68:5)
#loc68 = loc("CWE190_Integer_Overflow__unsigned_int_rand_multiply_05.c":65:9)
#loc69 = loc("CWE190_Integer_Overflow__unsigned_int_rand_multiply_05.c":69:9)
#loc70 = loc("CWE190_Integer_Overflow__unsigned_int_rand_multiply_05.c":81:9)
#loc71 = loc("CWE190_Integer_Overflow__unsigned_int_rand_multiply_05.c":69:12)
#loc72 = loc("CWE190_Integer_Overflow__unsigned_int_rand_multiply_05.c":69:19)
#loc73 = loc("CWE190_Integer_Overflow__unsigned_int_rand_multiply_05.c":69:17)
#loc74 = loc("CWE190_Integer_Overflow__unsigned_int_rand_multiply_05.c":70:9)
#loc75 = loc("CWE190_Integer_Overflow__unsigned_int_rand_multiply_05.c":72:13)
#loc76 = loc("CWE190_Integer_Overflow__unsigned_int_rand_multiply_05.c":80:13)
#loc77 = loc("CWE190_Integer_Overflow__unsigned_int_rand_multiply_05.c":72:17)
#loc78 = loc("CWE190_Integer_Overflow__unsigned_int_rand_multiply_05.c":72:25)
#loc79 = loc("CWE190_Integer_Overflow__unsigned_int_rand_multiply_05.c":72:34)
#loc80 = loc("CWE190_Integer_Overflow__unsigned_int_rand_multiply_05.c":72:35)
#loc81 = loc("CWE190_Integer_Overflow__unsigned_int_rand_multiply_05.c":72:22)
#loc82 = loc("CWE190_Integer_Overflow__unsigned_int_rand_multiply_05.c":73:13)
#loc83 = loc("CWE190_Integer_Overflow__unsigned_int_rand_multiply_05.c":76:13)
#loc84 = loc("CWE190_Integer_Overflow__unsigned_int_rand_multiply_05.c":78:13)
#loc85 = loc("CWE190_Integer_Overflow__unsigned_int_rand_multiply_05.c":74:17)
#loc86 = loc("CWE190_Integer_Overflow__unsigned_int_rand_multiply_05.c":74:46)
#loc87 = loc("CWE190_Integer_Overflow__unsigned_int_rand_multiply_05.c":74:39)
#loc88 = loc("CWE190_Integer_Overflow__unsigned_int_rand_multiply_05.c":75:35)
#loc89 = loc("CWE190_Integer_Overflow__unsigned_int_rand_multiply_05.c":75:17)
#loc90 = loc("CWE190_Integer_Overflow__unsigned_int_rand_multiply_05.c":79:17)
#loc91 = loc("CWE190_Integer_Overflow__unsigned_int_rand_multiply_05.c":86:1)
#loc92 = loc("CWE190_Integer_Overflow__unsigned_int_rand_multiply_05.c":111:1)
#loc93 = loc("CWE190_Integer_Overflow__unsigned_int_rand_multiply_05.c":88:5)
#loc94 = loc("CWE190_Integer_Overflow__unsigned_int_rand_multiply_05.c":88:18)
#loc95 = loc("CWE190_Integer_Overflow__unsigned_int_rand_multiply_05.c":89:12)
#loc96 = loc("CWE190_Integer_Overflow__unsigned_int_rand_multiply_05.c":89:5)
#loc97 = loc("CWE190_Integer_Overflow__unsigned_int_rand_multiply_05.c":90:5)
#loc98 = loc("CWE190_Integer_Overflow__unsigned_int_rand_multiply_05.c":94:5)
#loc99 = loc("CWE190_Integer_Overflow__unsigned_int_rand_multiply_05.c":90:8)
#loc100 = loc("CWE190_Integer_Overflow__unsigned_int_rand_multiply_05.c":91:5)
#loc101 = loc("CWE190_Integer_Overflow__unsigned_int_rand_multiply_05.c":93:30)
#loc102 = loc("CWE190_Integer_Overflow__unsigned_int_rand_multiply_05.c":93:9)
#loc103 = loc("CWE190_Integer_Overflow__unsigned_int_rand_multiply_05.c":95:5)
#loc104 = loc("CWE190_Integer_Overflow__unsigned_int_rand_multiply_05.c":110:5)
#loc105 = loc("CWE190_Integer_Overflow__unsigned_int_rand_multiply_05.c":95:8)
#loc106 = loc("CWE190_Integer_Overflow__unsigned_int_rand_multiply_05.c":96:5)
#loc107 = loc("CWE190_Integer_Overflow__unsigned_int_rand_multiply_05.c":97:9)
#loc108 = loc("CWE190_Integer_Overflow__unsigned_int_rand_multiply_05.c":109:9)
#loc109 = loc("CWE190_Integer_Overflow__unsigned_int_rand_multiply_05.c":97:12)
#loc110 = loc("CWE190_Integer_Overflow__unsigned_int_rand_multiply_05.c":97:19)
#loc111 = loc("CWE190_Integer_Overflow__unsigned_int_rand_multiply_05.c":97:17)
#loc112 = loc("CWE190_Integer_Overflow__unsigned_int_rand_multiply_05.c":98:9)
#loc113 = loc("CWE190_Integer_Overflow__unsigned_int_rand_multiply_05.c":100:13)
#loc114 = loc("CWE190_Integer_Overflow__unsigned_int_rand_multiply_05.c":108:13)
#loc115 = loc("CWE190_Integer_Overflow__unsigned_int_rand_multiply_05.c":100:17)
#loc116 = loc("CWE190_Integer_Overflow__unsigned_int_rand_multiply_05.c":100:25)
#loc117 = loc("CWE190_Integer_Overflow__unsigned_int_rand_multiply_05.c":100:34)
#loc118 = loc("CWE190_Integer_Overflow__unsigned_int_rand_multiply_05.c":100:35)
#loc119 = loc("CWE190_Integer_Overflow__unsigned_int_rand_multiply_05.c":100:22)
#loc120 = loc("CWE190_Integer_Overflow__unsigned_int_rand_multiply_05.c":101:13)
#loc121 = loc("CWE190_Integer_Overflow__unsigned_int_rand_multiply_05.c":104:13)
#loc122 = loc("CWE190_Integer_Overflow__unsigned_int_rand_multiply_05.c":106:13)
#loc123 = loc("CWE190_Integer_Overflow__unsigned_int_rand_multiply_05.c":102:17)
#loc124 = loc("CWE190_Integer_Overflow__unsigned_int_rand_multiply_05.c":102:46)
#loc125 = loc("CWE190_Integer_Overflow__unsigned_int_rand_multiply_05.c":102:39)
#loc126 = loc("CWE190_Integer_Overflow__unsigned_int_rand_multiply_05.c":103:35)
#loc127 = loc("CWE190_Integer_Overflow__unsigned_int_rand_multiply_05.c":103:17)
#loc128 = loc("CWE190_Integer_Overflow__unsigned_int_rand_multiply_05.c":107:27)
#loc129 = loc("CWE190_Integer_Overflow__unsigned_int_rand_multiply_05.c":107:17)
#loc130 = loc("CWE190_Integer_Overflow__unsigned_int_rand_multiply_05.c":114:1)
#loc131 = loc("CWE190_Integer_Overflow__unsigned_int_rand_multiply_05.c":137:1)
#loc132 = loc("CWE190_Integer_Overflow__unsigned_int_rand_multiply_05.c":116:5)
#loc133 = loc("CWE190_Integer_Overflow__unsigned_int_rand_multiply_05.c":116:18)
#loc134 = loc("CWE190_Integer_Overflow__unsigned_int_rand_multiply_05.c":117:12)
#loc135 = loc("CWE190_Integer_Overflow__unsigned_int_rand_multiply_05.c":117:5)
#loc136 = loc("CWE190_Integer_Overflow__unsigned_int_rand_multiply_05.c":118:5)
#loc137 = loc("CWE190_Integer_Overflow__unsigned_int_rand_multiply_05.c":127:5)
#loc138 = loc("CWE190_Integer_Overflow__unsigned_int_rand_multiply_05.c":118:8)
#loc139 = loc("CWE190_Integer_Overflow__unsigned_int_rand_multiply_05.c":119:5)
#loc140 = loc("CWE190_Integer_Overflow__unsigned_int_rand_multiply_05.c":122:5)
#loc141 = loc("CWE190_Integer_Overflow__unsigned_int_rand_multiply_05.c":124:5)
#loc142 = loc("CWE190_Integer_Overflow__unsigned_int_rand_multiply_05.c":121:19)
#loc143 = loc("CWE190_Integer_Overflow__unsigned_int_rand_multiply_05.c":121:9)
#loc144 = loc("CWE190_Integer_Overflow__unsigned_int_rand_multiply_05.c":126:16)
#loc145 = loc("CWE190_Integer_Overflow__unsigned_int_rand_multiply_05.c":126:9)
#loc146 = loc("CWE190_Integer_Overflow__unsigned_int_rand_multiply_05.c":128:5)
#loc147 = loc("CWE190_Integer_Overflow__unsigned_int_rand_multiply_05.c":136:5)
#loc148 = loc("CWE190_Integer_Overflow__unsigned_int_rand_multiply_05.c":128:8)
#loc149 = loc("CWE190_Integer_Overflow__unsigned_int_rand_multiply_05.c":129:5)
#loc150 = loc("CWE190_Integer_Overflow__unsigned_int_rand_multiply_05.c":130:9)
#loc151 = loc("CWE190_Integer_Overflow__unsigned_int_rand_multiply_05.c":135:9)
#loc152 = loc("CWE190_Integer_Overflow__unsigned_int_rand_multiply_05.c":130:12)
#loc153 = loc("CWE190_Integer_Overflow__unsigned_int_rand_multiply_05.c":130:19)
#loc154 = loc("CWE190_Integer_Overflow__unsigned_int_rand_multiply_05.c":130:17)
#loc155 = loc("CWE190_Integer_Overflow__unsigned_int_rand_multiply_05.c":131:9)
#loc156 = loc("CWE190_Integer_Overflow__unsigned_int_rand_multiply_05.c":133:13)
#loc157 = loc("CWE190_Integer_Overflow__unsigned_int_rand_multiply_05.c":133:42)
#loc158 = loc("CWE190_Integer_Overflow__unsigned_int_rand_multiply_05.c":133:35)
#loc159 = loc("CWE190_Integer_Overflow__unsigned_int_rand_multiply_05.c":134:31)
#loc160 = loc("CWE190_Integer_Overflow__unsigned_int_rand_multiply_05.c":134:13)
#loc161 = loc("CWE190_Integer_Overflow__unsigned_int_rand_multiply_05.c":140:1)
#loc162 = loc("CWE190_Integer_Overflow__unsigned_int_rand_multiply_05.c":158:1)
#loc163 = loc("CWE190_Integer_Overflow__unsigned_int_rand_multiply_05.c":142:5)
#loc164 = loc("CWE190_Integer_Overflow__unsigned_int_rand_multiply_05.c":142:18)
#loc165 = loc("CWE190_Integer_Overflow__unsigned_int_rand_multiply_05.c":143:12)
#loc166 = loc("CWE190_Integer_Overflow__unsigned_int_rand_multiply_05.c":143:5)
#loc167 = loc("CWE190_Integer_Overflow__unsigned_int_rand_multiply_05.c":144:5)
#loc168 = loc("CWE190_Integer_Overflow__unsigned_int_rand_multiply_05.c":148:5)
#loc169 = loc("CWE190_Integer_Overflow__unsigned_int_rand_multiply_05.c":144:8)
#loc170 = loc("CWE190_Integer_Overflow__unsigned_int_rand_multiply_05.c":145:5)
#loc171 = loc("CWE190_Integer_Overflow__unsigned_int_rand_multiply_05.c":147:16)
#loc172 = loc("CWE190_Integer_Overflow__unsigned_int_rand_multiply_05.c":147:9)
#loc173 = loc("CWE190_Integer_Overflow__unsigned_int_rand_multiply_05.c":149:5)
#loc174 = loc("CWE190_Integer_Overflow__unsigned_int_rand_multiply_05.c":157:5)
#loc175 = loc("CWE190_Integer_Overflow__unsigned_int_rand_multiply_05.c":149:8)
#loc176 = loc("CWE190_Integer_Overflow__unsigned_int_rand_multiply_05.c":150:5)
#loc177 = loc("CWE190_Integer_Overflow__unsigned_int_rand_multiply_05.c":151:9)
#loc178 = loc("CWE190_Integer_Overflow__unsigned_int_rand_multiply_05.c":156:9)
#loc179 = loc("CWE190_Integer_Overflow__unsigned_int_rand_multiply_05.c":151:12)
#loc180 = loc("CWE190_Integer_Overflow__unsigned_int_rand_multiply_05.c":151:19)
#loc181 = loc("CWE190_Integer_Overflow__unsigned_int_rand_multiply_05.c":151:17)
#loc182 = loc("CWE190_Integer_Overflow__unsigned_int_rand_multiply_05.c":152:9)
#loc183 = loc("CWE190_Integer_Overflow__unsigned_int_rand_multiply_05.c":154:13)
#loc184 = loc("CWE190_Integer_Overflow__unsigned_int_rand_multiply_05.c":154:42)
#loc185 = loc("CWE190_Integer_Overflow__unsigned_int_rand_multiply_05.c":154:35)
#loc186 = loc("CWE190_Integer_Overflow__unsigned_int_rand_multiply_05.c":155:31)
#loc187 = loc("CWE190_Integer_Overflow__unsigned_int_rand_multiply_05.c":155:13)
#loc188 = loc(fused[#loc1, #loc2])
#loc189 = loc(fused[#loc3, #loc4])
#loc190 = loc(fused[#loc5, #loc6])
#loc191 = loc(fused[#loc7, #loc8])
#loc192 = loc(fused[#loc9, #loc10])
#loc193 = loc(fused[#loc12, #loc11])
#loc194 = loc(fused[#loc13, #loc14])
#loc195 = loc(fused[#loc16, #loc14])
#loc196 = loc(fused[#loc18, #loc17])
#loc197 = loc(fused[#loc19, #loc20])
#loc198 = loc(fused[#loc22, #loc20])
#loc199 = loc(fused[#loc23, #loc24])
#loc200 = loc(fused[#loc25, #loc26])
#loc201 = loc(fused[#loc28, #loc24])
#loc202 = loc(fused[#loc29, #loc30])
#loc203 = loc(fused[#loc31, #loc30])
#loc204 = loc(fused[#loc34, #loc35])
#loc205 = loc(fused[#loc36, #loc37])
#loc206 = loc(fused[#loc38, #loc39])
#loc207 = loc(fused[#loc40, #loc41])
#loc208 = loc(fused[#loc42, #loc43])
#loc209 = loc(fused[#loc44, #loc45])
#loc210 = loc(fused[#loc46, #loc47])
#loc211 = loc(fused[#loc50, #loc51])
#loc212 = loc(fused[#loc52, #loc53])
#loc213 = loc(fused[#loc55, #loc54])
#loc214 = loc(fused[#loc56, #loc57])
#loc215 = loc(fused[#loc59, #loc57])
#loc216 = loc(fused[#loc61, #loc60])
#loc217 = loc(fused[#loc62, #loc63])
#loc218 = loc(fused[#loc65, #loc66, #loc67, #loc63])
#loc219 = loc(fused[#loc69, #loc70])
#loc220 = loc(fused[#loc71, #loc72])
#loc221 = loc(fused[#loc74, #loc70])
#loc222 = loc(fused[#loc75, #loc76])
#loc223 = loc(fused[#loc78, #loc79])
#loc224 = loc(fused[#loc77, #loc80])
#loc225 = loc(fused[#loc82, #loc83, #loc84, #loc76])
#loc226 = loc(fused[#loc85, #loc86])
#loc227 = loc(fused[#loc87, #loc86])
#loc228 = loc(fused[#loc91, #loc92])
#loc229 = loc(fused[#loc93, #loc94])
#loc230 = loc(fused[#loc96, #loc95])
#loc231 = loc(fused[#loc97, #loc98])
#loc232 = loc(fused[#loc100, #loc98])
#loc233 = loc(fused[#loc102, #loc101])
#loc234 = loc(fused[#loc103, #loc104])
#loc235 = loc(fused[#loc106, #loc104])
#loc236 = loc(fused[#loc107, #loc108])
#loc237 = loc(fused[#loc109, #loc110])
#loc238 = loc(fused[#loc112, #loc108])
#loc239 = loc(fused[#loc113, #loc114])
#loc240 = loc(fused[#loc116, #loc117])
#loc241 = loc(fused[#loc115, #loc118])
#loc242 = loc(fused[#loc120, #loc121, #loc122, #loc114])
#loc243 = loc(fused[#loc123, #loc124])
#loc244 = loc(fused[#loc125, #loc124])
#loc245 = loc(fused[#loc130, #loc131])
#loc246 = loc(fused[#loc132, #loc133])
#loc247 = loc(fused[#loc135, #loc134])
#loc248 = loc(fused[#loc136, #loc137])
#loc249 = loc(fused[#loc139, #loc140, #loc141, #loc137])
#loc250 = loc(fused[#loc145, #loc144])
#loc251 = loc(fused[#loc146, #loc147])
#loc252 = loc(fused[#loc149, #loc147])
#loc253 = loc(fused[#loc150, #loc151])
#loc254 = loc(fused[#loc152, #loc153])
#loc255 = loc(fused[#loc155, #loc151])
#loc256 = loc(fused[#loc156, #loc157])
#loc257 = loc(fused[#loc158, #loc157])
#loc258 = loc(fused[#loc161, #loc162])
#loc259 = loc(fused[#loc163, #loc164])
#loc260 = loc(fused[#loc166, #loc165])
#loc261 = loc(fused[#loc167, #loc168])
#loc262 = loc(fused[#loc170, #loc168])
#loc263 = loc(fused[#loc172, #loc171])
#loc264 = loc(fused[#loc173, #loc174])
#loc265 = loc(fused[#loc176, #loc174])
#loc266 = loc(fused[#loc177, #loc178])
#loc267 = loc(fused[#loc179, #loc180])
#loc268 = loc(fused[#loc182, #loc178])
#loc269 = loc(fused[#loc183, #loc184])
#loc270 = loc(fused[#loc185, #loc184])
