!s32i = !cir.int<s, 32>
!s8i = !cir.int<s, 8>
!u64i = !cir.int<u, 64>
!u8i = !cir.int<u, 8>
!void = !cir.void
#fn_attr = #cir<extra({nothrow = #cir.nothrow})>
#fn_attr1 = #cir<extra({inline = #cir.inline<no>, nothrow = #cir.nothrow, optnone = #cir.optnone})>
module @"/home/ladisgin/git_proj/test_projects/juliet-c/testcases/CWE401_Memory_Leak/s02/CWE401_Memory_Leak__strdup_char_04.c" attributes {cir.lang = #cir.lang<c>, cir.sob = #cir.signed_overflow_behavior<undefined>, cir.triple = "x86_64-unknown-linux-gnu", dlti.dl_spec = #dlti.dl_spec<#dlti.dl_entry<f80, dense<128> : vector<2xi64>>, #dlti.dl_entry<!llvm.ptr, dense<64> : vector<4xi64>>, #dlti.dl_entry<!llvm.ptr<272>, dense<64> : vector<4xi64>>, #dlti.dl_entry<!llvm.ptr<271>, dense<32> : vector<4xi64>>, #dlti.dl_entry<i64, dense<64> : vector<2xi64>>, #dlti.dl_entry<i128, dense<128> : vector<2xi64>>, #dlti.dl_entry<i32, dense<32> : vector<2xi64>>, #dlti.dl_entry<f16, dense<16> : vector<2xi64>>, #dlti.dl_entry<f128, dense<128> : vector<2xi64>>, #dlti.dl_entry<!llvm.ptr<270>, dense<32> : vector<4xi64>>, #dlti.dl_entry<f64, dense<64> : vector<2xi64>>, #dlti.dl_entry<i1, dense<8> : vector<2xi64>>, #dlti.dl_entry<i16, dense<16> : vector<2xi64>>, #dlti.dl_entry<i8, dense<8> : vector<2xi64>>, #dlti.dl_entry<"dlti.stack_alignment", 128 : i64>, #dlti.dl_entry<"dlti.endianness", "little">>, llvm.data_layout = "e-m:e-p270:32:32-p271:32:32-p272:64:64-i64:64-i128:128-f80:128-n8:16:32:64-S128"} {
  cir.func private  @strdup(!cir.ptr<!s8i>) -> !cir.ptr<!s8i> extra(#fn_attr) loc(#loc145)
  cir.func private  @printLine(!cir.ptr<!s8i>) loc(#loc146)
  cir.func no_proto  @CWE401_Memory_Leak__strdup_char_04_bad() extra(#fn_attr1) {
    %0 = cir.alloca !cir.ptr<!s8i>, !cir.ptr<!cir.ptr<!s8i>>, ["data"] {alignment = 8 : i64} loc(#loc148)
    %1 = cir.const #cir.ptr<null> : !cir.ptr<!s8i> loc(#loc9)
    cir.store %1, %0 : !cir.ptr<!s8i>, !cir.ptr<!cir.ptr<!s8i>> loc(#loc149)
    cir.scope {
      %2 = cir.const #cir.int<1> : !s32i loc(#loc13)
      %3 = cir.cast(int_to_bool, %2 : !s32i), !cir.bool loc(#loc13)
      cir.if %3 {
        cir.scope {
          %4 = cir.alloca !cir.array<!s8i x 9>, !cir.ptr<!cir.array<!s8i x 9>>, ["myString"] {alignment = 1 : i64} loc(#loc153)
          %5 = cir.const #cir.const_array<"myString\00" : !cir.array<!s8i x 9>> : !cir.array<!s8i x 9> loc(#loc153)
          cir.store %5, %4 : !cir.array<!s8i x 9>, !cir.ptr<!cir.array<!s8i x 9>> loc(#loc153)
          %6 = cir.get_global @strdup : !cir.ptr<!cir.func<!cir.ptr<!s8i> (!cir.ptr<!s8i>)>> loc(#loc19)
          %7 = cir.cast(array_to_ptrdecay, %4 : !cir.ptr<!cir.array<!s8i x 9>>), !cir.ptr<!s8i> loc(#loc20)
          %8 = cir.call @strdup(%7) : (!cir.ptr<!s8i>) -> !cir.ptr<!s8i> extra(#fn_attr) loc(#loc19)
          cir.store %8, %0 : !cir.ptr<!s8i>, !cir.ptr<!cir.ptr<!s8i>> loc(#loc154)
          %9 = cir.load %0 : !cir.ptr<!cir.ptr<!s8i>>, !cir.ptr<!s8i> loc(#loc23)
          cir.call @printLine(%9) : (!cir.ptr<!s8i>) -> () loc(#loc24)
        } loc(#loc152)
      } loc(#loc151)
    } loc(#loc150)
    cir.scope {
      %2 = cir.const #cir.int<1> : !s32i loc(#loc27)
      %3 = cir.cast(int_to_bool, %2 : !s32i), !cir.bool loc(#loc27)
      cir.if %3 {
      } loc(#loc156)
    } loc(#loc155)
    cir.return loc(#loc6)
  } loc(#loc147)
  cir.func no_proto  @CWE401_Memory_Leak__strdup_char_04_good() extra(#fn_attr1) {
    %0 = cir.get_global @goodB2G1 : !cir.ptr<!cir.func<!void ()>> loc(#loc158)
    cir.call %0() : (!cir.ptr<!cir.func<!void ()>>) -> () loc(#loc31)
    %1 = cir.get_global @goodB2G2 : !cir.ptr<!cir.func<!void ()>> loc(#loc159)
    cir.call %1() : (!cir.ptr<!cir.func<!void ()>>) -> () loc(#loc33)
    %2 = cir.get_global @goodG2B1 : !cir.ptr<!cir.func<!void ()>> loc(#loc160)
    cir.call %2() : (!cir.ptr<!cir.func<!void ()>>) -> () loc(#loc35)
    %3 = cir.get_global @goodG2B2 : !cir.ptr<!cir.func<!void ()>> loc(#loc161)
    cir.call %3() : (!cir.ptr<!cir.func<!void ()>>) -> () loc(#loc37)
    cir.return loc(#loc30)
  } loc(#loc157)
  cir.global "private"  constant internal dsolocal @".str" = #cir.const_array<"Benign, fixed string\00" : !cir.array<!s8i x 21>> : !cir.array<!s8i x 21> {alignment = 1 : i64} loc(#loc39)
  cir.func private  @free(!cir.ptr<!void>) extra(#fn_attr) loc(#loc162)
  cir.func no_proto internal private  @goodB2G1() extra(#fn_attr1) {
    %0 = cir.alloca !cir.ptr<!s8i>, !cir.ptr<!cir.ptr<!s8i>>, ["data"] {alignment = 8 : i64} loc(#loc164)
    %1 = cir.const #cir.ptr<null> : !cir.ptr<!s8i> loc(#loc46)
    cir.store %1, %0 : !cir.ptr<!s8i>, !cir.ptr<!cir.ptr<!s8i>> loc(#loc165)
    cir.scope {
      %2 = cir.const #cir.int<1> : !s32i loc(#loc50)
      %3 = cir.cast(int_to_bool, %2 : !s32i), !cir.bool loc(#loc50)
      cir.if %3 {
        cir.scope {
          %4 = cir.alloca !cir.array<!s8i x 9>, !cir.ptr<!cir.array<!s8i x 9>>, ["myString"] {alignment = 1 : i64} loc(#loc169)
          %5 = cir.const #cir.const_array<"myString\00" : !cir.array<!s8i x 9>> : !cir.array<!s8i x 9> loc(#loc169)
          cir.store %5, %4 : !cir.array<!s8i x 9>, !cir.ptr<!cir.array<!s8i x 9>> loc(#loc169)
          %6 = cir.get_global @strdup : !cir.ptr<!cir.func<!cir.ptr<!s8i> (!cir.ptr<!s8i>)>> loc(#loc56)
          %7 = cir.cast(array_to_ptrdecay, %4 : !cir.ptr<!cir.array<!s8i x 9>>), !cir.ptr<!s8i> loc(#loc57)
          %8 = cir.call @strdup(%7) : (!cir.ptr<!s8i>) -> !cir.ptr<!s8i> extra(#fn_attr) loc(#loc56)
          cir.store %8, %0 : !cir.ptr<!s8i>, !cir.ptr<!cir.ptr<!s8i>> loc(#loc170)
          %9 = cir.load %0 : !cir.ptr<!cir.ptr<!s8i>>, !cir.ptr<!s8i> loc(#loc60)
          cir.call @printLine(%9) : (!cir.ptr<!s8i>) -> () loc(#loc61)
        } loc(#loc168)
      } loc(#loc167)
    } loc(#loc166)
    cir.scope {
      %2 = cir.const #cir.int<0> : !s32i loc(#loc64)
      %3 = cir.cast(int_to_bool, %2 : !s32i), !cir.bool loc(#loc64)
      cir.if %3 {
        %4 = cir.get_global @".str" : !cir.ptr<!cir.array<!s8i x 21>> loc(#loc39)
        %5 = cir.cast(array_to_ptrdecay, %4 : !cir.ptr<!cir.array<!s8i x 21>>), !cir.ptr<!s8i> loc(#loc39)
        cir.call @printLine(%5) : (!cir.ptr<!s8i>) -> () loc(#loc68)
      } else {
        %4 = cir.get_global @free : !cir.ptr<!cir.func<!void (!cir.ptr<!void>)>> loc(#loc69)
        %5 = cir.load %0 : !cir.ptr<!cir.ptr<!s8i>>, !cir.ptr<!s8i> loc(#loc70)
        %6 = cir.cast(bitcast, %5 : !cir.ptr<!s8i>), !cir.ptr<!void> loc(#loc70)
        cir.call @free(%6) : (!cir.ptr<!void>) -> () extra(#fn_attr) loc(#loc69)
      } loc(#loc172)
    } loc(#loc171)
    cir.return loc(#loc43)
  } loc(#loc163)
  cir.func no_proto internal private  @goodB2G2() extra(#fn_attr1) {
    %0 = cir.alloca !cir.ptr<!s8i>, !cir.ptr<!cir.ptr<!s8i>>, ["data"] {alignment = 8 : i64} loc(#loc174)
    %1 = cir.const #cir.ptr<null> : !cir.ptr<!s8i> loc(#loc75)
    cir.store %1, %0 : !cir.ptr<!s8i>, !cir.ptr<!cir.ptr<!s8i>> loc(#loc175)
    cir.scope {
      %2 = cir.const #cir.int<1> : !s32i loc(#loc79)
      %3 = cir.cast(int_to_bool, %2 : !s32i), !cir.bool loc(#loc79)
      cir.if %3 {
        cir.scope {
          %4 = cir.alloca !cir.array<!s8i x 9>, !cir.ptr<!cir.array<!s8i x 9>>, ["myString"] {alignment = 1 : i64} loc(#loc179)
          %5 = cir.const #cir.const_array<"myString\00" : !cir.array<!s8i x 9>> : !cir.array<!s8i x 9> loc(#loc179)
          cir.store %5, %4 : !cir.array<!s8i x 9>, !cir.ptr<!cir.array<!s8i x 9>> loc(#loc179)
          %6 = cir.get_global @strdup : !cir.ptr<!cir.func<!cir.ptr<!s8i> (!cir.ptr<!s8i>)>> loc(#loc85)
          %7 = cir.cast(array_to_ptrdecay, %4 : !cir.ptr<!cir.array<!s8i x 9>>), !cir.ptr<!s8i> loc(#loc86)
          %8 = cir.call @strdup(%7) : (!cir.ptr<!s8i>) -> !cir.ptr<!s8i> extra(#fn_attr) loc(#loc85)
          cir.store %8, %0 : !cir.ptr<!s8i>, !cir.ptr<!cir.ptr<!s8i>> loc(#loc180)
          %9 = cir.load %0 : !cir.ptr<!cir.ptr<!s8i>>, !cir.ptr<!s8i> loc(#loc89)
          cir.call @printLine(%9) : (!cir.ptr<!s8i>) -> () loc(#loc90)
        } loc(#loc178)
      } loc(#loc177)
    } loc(#loc176)
    cir.scope {
      %2 = cir.const #cir.int<1> : !s32i loc(#loc93)
      %3 = cir.cast(int_to_bool, %2 : !s32i), !cir.bool loc(#loc93)
      cir.if %3 {
        %4 = cir.get_global @free : !cir.ptr<!cir.func<!void (!cir.ptr<!void>)>> loc(#loc95)
        %5 = cir.load %0 : !cir.ptr<!cir.ptr<!s8i>>, !cir.ptr<!s8i> loc(#loc96)
        %6 = cir.cast(bitcast, %5 : !cir.ptr<!s8i>), !cir.ptr<!void> loc(#loc96)
        cir.call @free(%6) : (!cir.ptr<!void>) -> () extra(#fn_attr) loc(#loc95)
      } loc(#loc182)
    } loc(#loc181)
    cir.return loc(#loc72)
  } loc(#loc173)
  cir.func private  @strcpy(!cir.ptr<!s8i>, !cir.ptr<!s8i>) -> !cir.ptr<!s8i> extra(#fn_attr) loc(#loc183)
  cir.global "private"  constant internal dsolocal @".str1" = #cir.const_array<"a string\00" : !cir.array<!s8i x 9>> : !cir.array<!s8i x 9> {alignment = 1 : i64} loc(#loc99)
  cir.func no_proto internal private  @goodG2B1() extra(#fn_attr1) {
    %0 = cir.alloca !cir.ptr<!s8i>, !cir.ptr<!cir.ptr<!s8i>>, ["data"] {alignment = 8 : i64} loc(#loc185)
    %1 = cir.const #cir.ptr<null> : !cir.ptr<!s8i> loc(#loc104)
    cir.store %1, %0 : !cir.ptr<!s8i>, !cir.ptr<!cir.ptr<!s8i>> loc(#loc186)
    cir.scope {
      %2 = cir.const #cir.int<0> : !s32i loc(#loc108)
      %3 = cir.cast(int_to_bool, %2 : !s32i), !cir.bool loc(#loc108)
      cir.if %3 {
        %4 = cir.get_global @".str" : !cir.ptr<!cir.array<!s8i x 21>> loc(#loc112)
        %5 = cir.cast(array_to_ptrdecay, %4 : !cir.ptr<!cir.array<!s8i x 21>>), !cir.ptr<!s8i> loc(#loc112)
        cir.call @printLine(%5) : (!cir.ptr<!s8i>) -> () loc(#loc113)
      } else {
        %4 = cir.const #cir.int<100> : !s32i loc(#loc114)
        %5 = cir.cast(integral, %4 : !s32i), !u64i loc(#loc114)
        %6 = cir.const #cir.int<1> : !u64i loc(#loc114)
        %7 = cir.binop(mul, %5, %6) : !u64i loc(#loc114)
        %8 = cir.alloca !u8i, !cir.ptr<!u8i>, %7 : !u64i, ["bi_alloca"] {alignment = 16 : i64} loc(#loc114)
        %9 = cir.cast(bitcast, %8 : !cir.ptr<!u8i>), !cir.ptr<!void> loc(#loc114)
        %10 = cir.cast(bitcast, %9 : !cir.ptr<!void>), !cir.ptr<!s8i> loc(#loc114)
        cir.store %10, %0 : !cir.ptr<!s8i>, !cir.ptr<!cir.ptr<!s8i>> loc(#loc189)
        %11 = cir.get_global @strcpy : !cir.ptr<!cir.func<!cir.ptr<!s8i> (!cir.ptr<!s8i>, !cir.ptr<!s8i>)>> loc(#loc116)
        %12 = cir.load %0 : !cir.ptr<!cir.ptr<!s8i>>, !cir.ptr<!s8i> loc(#loc117)
        %13 = cir.get_global @".str1" : !cir.ptr<!cir.array<!s8i x 9>> loc(#loc99)
        %14 = cir.cast(array_to_ptrdecay, %13 : !cir.ptr<!cir.array<!s8i x 9>>), !cir.ptr<!s8i> loc(#loc99)
        %15 = cir.call @strcpy(%12, %14) : (!cir.ptr<!s8i>, !cir.ptr<!s8i>) -> !cir.ptr<!s8i> extra(#fn_attr) loc(#loc116)
        %16 = cir.load %0 : !cir.ptr<!cir.ptr<!s8i>>, !cir.ptr<!s8i> loc(#loc118)
        cir.call @printLine(%16) : (!cir.ptr<!s8i>) -> () loc(#loc119)
      } loc(#loc188)
    } loc(#loc187)
    cir.scope {
      %2 = cir.const #cir.int<1> : !s32i loc(#loc122)
      %3 = cir.cast(int_to_bool, %2 : !s32i), !cir.bool loc(#loc122)
      cir.if %3 {
      } loc(#loc191)
    } loc(#loc190)
    cir.return loc(#loc101)
  } loc(#loc184)
  cir.func no_proto internal private  @goodG2B2() extra(#fn_attr1) {
    %0 = cir.alloca !cir.ptr<!s8i>, !cir.ptr<!cir.ptr<!s8i>>, ["data"] {alignment = 8 : i64} loc(#loc193)
    %1 = cir.const #cir.ptr<null> : !cir.ptr<!s8i> loc(#loc128)
    cir.store %1, %0 : !cir.ptr<!s8i>, !cir.ptr<!cir.ptr<!s8i>> loc(#loc194)
    cir.scope {
      %2 = cir.const #cir.int<1> : !s32i loc(#loc132)
      %3 = cir.cast(int_to_bool, %2 : !s32i), !cir.bool loc(#loc132)
      cir.if %3 {
        %4 = cir.const #cir.int<100> : !s32i loc(#loc134)
        %5 = cir.cast(integral, %4 : !s32i), !u64i loc(#loc134)
        %6 = cir.const #cir.int<1> : !u64i loc(#loc134)
        %7 = cir.binop(mul, %5, %6) : !u64i loc(#loc134)
        %8 = cir.alloca !u8i, !cir.ptr<!u8i>, %7 : !u64i, ["bi_alloca"] {alignment = 16 : i64} loc(#loc134)
        %9 = cir.cast(bitcast, %8 : !cir.ptr<!u8i>), !cir.ptr<!void> loc(#loc134)
        %10 = cir.cast(bitcast, %9 : !cir.ptr<!void>), !cir.ptr<!s8i> loc(#loc134)
        cir.store %10, %0 : !cir.ptr<!s8i>, !cir.ptr<!cir.ptr<!s8i>> loc(#loc197)
        %11 = cir.get_global @strcpy : !cir.ptr<!cir.func<!cir.ptr<!s8i> (!cir.ptr<!s8i>, !cir.ptr<!s8i>)>> loc(#loc136)
        %12 = cir.load %0 : !cir.ptr<!cir.ptr<!s8i>>, !cir.ptr<!s8i> loc(#loc137)
        %13 = cir.get_global @".str1" : !cir.ptr<!cir.array<!s8i x 9>> loc(#loc138)
        %14 = cir.cast(array_to_ptrdecay, %13 : !cir.ptr<!cir.array<!s8i x 9>>), !cir.ptr<!s8i> loc(#loc138)
        %15 = cir.call @strcpy(%12, %14) : (!cir.ptr<!s8i>, !cir.ptr<!s8i>) -> !cir.ptr<!s8i> extra(#fn_attr) loc(#loc136)
        %16 = cir.load %0 : !cir.ptr<!cir.ptr<!s8i>>, !cir.ptr<!s8i> loc(#loc139)
        cir.call @printLine(%16) : (!cir.ptr<!s8i>) -> () loc(#loc140)
      } loc(#loc196)
    } loc(#loc195)
    cir.scope {
      %2 = cir.const #cir.int<1> : !s32i loc(#loc143)
      %3 = cir.cast(int_to_bool, %2 : !s32i), !cir.bool loc(#loc143)
      cir.if %3 {
      } loc(#loc199)
    } loc(#loc198)
    cir.return loc(#loc125)
  } loc(#loc192)
} loc(#loc)
#loc = loc("/home/ladisgin/git_proj/test_projects/juliet-c/testcases/CWE401_Memory_Leak/s02/CWE401_Memory_Leak__strdup_char_04.c":0:0)
#loc1 = loc("/usr/include/string.h":187:1)
#loc2 = loc("/usr/include/string.h":188:35)
#loc3 = loc("../../../testcasesupport/std_testcase_io.h":14:1)
#loc4 = loc("../../../testcasesupport/std_testcase_io.h":14:33)
#loc5 = loc("CWE401_Memory_Leak__strdup_char_04.c":30:1)
#loc6 = loc("CWE401_Memory_Leak__strdup_char_04.c":50:1)
#loc7 = loc("CWE401_Memory_Leak__strdup_char_04.c":32:5)
#loc8 = loc("CWE401_Memory_Leak__strdup_char_04.c":32:12)
#loc9 = loc("CWE401_Memory_Leak__strdup_char_04.c":33:12)
#loc10 = loc("CWE401_Memory_Leak__strdup_char_04.c":33:5)
#loc11 = loc("CWE401_Memory_Leak__strdup_char_04.c":34:5)
#loc12 = loc("CWE401_Memory_Leak__strdup_char_04.c":43:5)
#loc13 = loc("CWE401_Memory_Leak__strdup_char_04.c":34:8)
#loc14 = loc("CWE401_Memory_Leak__strdup_char_04.c":35:5)
#loc15 = loc("CWE401_Memory_Leak__strdup_char_04.c":36:9)
#loc16 = loc("CWE401_Memory_Leak__strdup_char_04.c":42:9)
#loc17 = loc("CWE401_Memory_Leak__strdup_char_04.c":37:13)
#loc18 = loc("CWE401_Memory_Leak__strdup_char_04.c":37:31)
#loc19 = loc("CWE401_Memory_Leak__strdup_char_04.c":39:20)
#loc20 = loc("CWE401_Memory_Leak__strdup_char_04.c":39:27)
#loc21 = loc("CWE401_Memory_Leak__strdup_char_04.c":39:13)
#loc22 = loc("CWE401_Memory_Leak__strdup_char_04.c":39:35)
#loc23 = loc("CWE401_Memory_Leak__strdup_char_04.c":41:23)
#loc24 = loc("CWE401_Memory_Leak__strdup_char_04.c":41:13)
#loc25 = loc("CWE401_Memory_Leak__strdup_char_04.c":44:5)
#loc26 = loc("CWE401_Memory_Leak__strdup_char_04.c":49:5)
#loc27 = loc("CWE401_Memory_Leak__strdup_char_04.c":44:8)
#loc28 = loc("CWE401_Memory_Leak__strdup_char_04.c":45:5)
#loc29 = loc("CWE401_Memory_Leak__strdup_char_04.c":152:1)
#loc30 = loc("CWE401_Memory_Leak__strdup_char_04.c":158:1)
#loc31 = loc("CWE401_Memory_Leak__strdup_char_04.c":154:5)
#loc32 = loc("CWE401_Memory_Leak__strdup_char_04.c":154:14)
#loc33 = loc("CWE401_Memory_Leak__strdup_char_04.c":155:5)
#loc34 = loc("CWE401_Memory_Leak__strdup_char_04.c":155:14)
#loc35 = loc("CWE401_Memory_Leak__strdup_char_04.c":156:5)
#loc36 = loc("CWE401_Memory_Leak__strdup_char_04.c":156:14)
#loc37 = loc("CWE401_Memory_Leak__strdup_char_04.c":157:5)
#loc38 = loc("CWE401_Memory_Leak__strdup_char_04.c":157:14)
#loc39 = loc("CWE401_Memory_Leak__strdup_char_04.c":74:19)
#loc40 = loc("/usr/include/stdlib.h":687:1)
#loc41 = loc("/usr/include/stdlib.h":687:32)
#loc42 = loc("CWE401_Memory_Leak__strdup_char_04.c":57:1)
#loc43 = loc("CWE401_Memory_Leak__strdup_char_04.c":81:1)
#loc44 = loc("CWE401_Memory_Leak__strdup_char_04.c":59:5)
#loc45 = loc("CWE401_Memory_Leak__strdup_char_04.c":59:12)
#loc46 = loc("CWE401_Memory_Leak__strdup_char_04.c":60:12)
#loc47 = loc("CWE401_Memory_Leak__strdup_char_04.c":60:5)
#loc48 = loc("CWE401_Memory_Leak__strdup_char_04.c":61:5)
#loc49 = loc("CWE401_Memory_Leak__strdup_char_04.c":70:5)
#loc50 = loc("CWE401_Memory_Leak__strdup_char_04.c":61:8)
#loc51 = loc("CWE401_Memory_Leak__strdup_char_04.c":62:5)
#loc52 = loc("CWE401_Memory_Leak__strdup_char_04.c":63:9)
#loc53 = loc("CWE401_Memory_Leak__strdup_char_04.c":69:9)
#loc54 = loc("CWE401_Memory_Leak__strdup_char_04.c":64:13)
#loc55 = loc("CWE401_Memory_Leak__strdup_char_04.c":64:31)
#loc56 = loc("CWE401_Memory_Leak__strdup_char_04.c":66:20)
#loc57 = loc("CWE401_Memory_Leak__strdup_char_04.c":66:27)
#loc58 = loc("CWE401_Memory_Leak__strdup_char_04.c":66:13)
#loc59 = loc("CWE401_Memory_Leak__strdup_char_04.c":66:35)
#loc60 = loc("CWE401_Memory_Leak__strdup_char_04.c":68:23)
#loc61 = loc("CWE401_Memory_Leak__strdup_char_04.c":68:13)
#loc62 = loc("CWE401_Memory_Leak__strdup_char_04.c":71:5)
#loc63 = loc("CWE401_Memory_Leak__strdup_char_04.c":80:5)
#loc64 = loc("CWE401_Memory_Leak__strdup_char_04.c":71:8)
#loc65 = loc("CWE401_Memory_Leak__strdup_char_04.c":72:5)
#loc66 = loc("CWE401_Memory_Leak__strdup_char_04.c":75:5)
#loc67 = loc("CWE401_Memory_Leak__strdup_char_04.c":77:5)
#loc68 = loc("CWE401_Memory_Leak__strdup_char_04.c":74:9)
#loc69 = loc("CWE401_Memory_Leak__strdup_char_04.c":79:9)
#loc70 = loc("CWE401_Memory_Leak__strdup_char_04.c":79:14)
#loc71 = loc("CWE401_Memory_Leak__strdup_char_04.c":84:1)
#loc72 = loc("CWE401_Memory_Leak__strdup_char_04.c":103:1)
#loc73 = loc("CWE401_Memory_Leak__strdup_char_04.c":86:5)
#loc74 = loc("CWE401_Memory_Leak__strdup_char_04.c":86:12)
#loc75 = loc("CWE401_Memory_Leak__strdup_char_04.c":87:12)
#loc76 = loc("CWE401_Memory_Leak__strdup_char_04.c":87:5)
#loc77 = loc("CWE401_Memory_Leak__strdup_char_04.c":88:5)
#loc78 = loc("CWE401_Memory_Leak__strdup_char_04.c":97:5)
#loc79 = loc("CWE401_Memory_Leak__strdup_char_04.c":88:8)
#loc80 = loc("CWE401_Memory_Leak__strdup_char_04.c":89:5)
#loc81 = loc("CWE401_Memory_Leak__strdup_char_04.c":90:9)
#loc82 = loc("CWE401_Memory_Leak__strdup_char_04.c":96:9)
#loc83 = loc("CWE401_Memory_Leak__strdup_char_04.c":91:13)
#loc84 = loc("CWE401_Memory_Leak__strdup_char_04.c":91:31)
#loc85 = loc("CWE401_Memory_Leak__strdup_char_04.c":93:20)
#loc86 = loc("CWE401_Memory_Leak__strdup_char_04.c":93:27)
#loc87 = loc("CWE401_Memory_Leak__strdup_char_04.c":93:13)
#loc88 = loc("CWE401_Memory_Leak__strdup_char_04.c":93:35)
#loc89 = loc("CWE401_Memory_Leak__strdup_char_04.c":95:23)
#loc90 = loc("CWE401_Memory_Leak__strdup_char_04.c":95:13)
#loc91 = loc("CWE401_Memory_Leak__strdup_char_04.c":98:5)
#loc92 = loc("CWE401_Memory_Leak__strdup_char_04.c":102:5)
#loc93 = loc("CWE401_Memory_Leak__strdup_char_04.c":98:8)
#loc94 = loc("CWE401_Memory_Leak__strdup_char_04.c":99:5)
#loc95 = loc("CWE401_Memory_Leak__strdup_char_04.c":101:9)
#loc96 = loc("CWE401_Memory_Leak__strdup_char_04.c":101:14)
#loc97 = loc("/usr/include/string.h":141:1)
#loc98 = loc("/usr/include/string.h":142:14)
#loc99 = loc("CWE401_Memory_Leak__strdup_char_04.c":120:22)
#loc100 = loc("CWE401_Memory_Leak__strdup_char_04.c":106:1)
#loc101 = loc("CWE401_Memory_Leak__strdup_char_04.c":129:1)
#loc102 = loc("CWE401_Memory_Leak__strdup_char_04.c":108:5)
#loc103 = loc("CWE401_Memory_Leak__strdup_char_04.c":108:12)
#loc104 = loc("CWE401_Memory_Leak__strdup_char_04.c":109:12)
#loc105 = loc("CWE401_Memory_Leak__strdup_char_04.c":109:5)
#loc106 = loc("CWE401_Memory_Leak__strdup_char_04.c":110:5)
#loc107 = loc("CWE401_Memory_Leak__strdup_char_04.c":122:5)
#loc108 = loc("CWE401_Memory_Leak__strdup_char_04.c":110:8)
#loc109 = loc("CWE401_Memory_Leak__strdup_char_04.c":111:5)
#loc110 = loc("CWE401_Memory_Leak__strdup_char_04.c":114:5)
#loc111 = loc("CWE401_Memory_Leak__strdup_char_04.c":116:5)
#loc112 = loc("CWE401_Memory_Leak__strdup_char_04.c":113:19)
#loc113 = loc("CWE401_Memory_Leak__strdup_char_04.c":113:9)
#loc114 = loc("CWE401_Memory_Leak__strdup_char_04.c":118:24)
#loc115 = loc("CWE401_Memory_Leak__strdup_char_04.c":118:9)
#loc116 = loc("CWE401_Memory_Leak__strdup_char_04.c":120:9)
#loc117 = loc("CWE401_Memory_Leak__strdup_char_04.c":120:16)
#loc118 = loc("CWE401_Memory_Leak__strdup_char_04.c":121:19)
#loc119 = loc("CWE401_Memory_Leak__strdup_char_04.c":121:9)
#loc120 = loc("CWE401_Memory_Leak__strdup_char_04.c":123:5)
#loc121 = loc("CWE401_Memory_Leak__strdup_char_04.c":128:5)
#loc122 = loc("CWE401_Memory_Leak__strdup_char_04.c":123:8)
#loc123 = loc("CWE401_Memory_Leak__strdup_char_04.c":124:5)
#loc124 = loc("CWE401_Memory_Leak__strdup_char_04.c":132:1)
#loc125 = loc("CWE401_Memory_Leak__strdup_char_04.c":150:1)
#loc126 = loc("CWE401_Memory_Leak__strdup_char_04.c":134:5)
#loc127 = loc("CWE401_Memory_Leak__strdup_char_04.c":134:12)
#loc128 = loc("CWE401_Memory_Leak__strdup_char_04.c":135:12)
#loc129 = loc("CWE401_Memory_Leak__strdup_char_04.c":135:5)
#loc130 = loc("CWE401_Memory_Leak__strdup_char_04.c":136:5)
#loc131 = loc("CWE401_Memory_Leak__strdup_char_04.c":143:5)
#loc132 = loc("CWE401_Memory_Leak__strdup_char_04.c":136:8)
#loc133 = loc("CWE401_Memory_Leak__strdup_char_04.c":137:5)
#loc134 = loc("CWE401_Memory_Leak__strdup_char_04.c":139:24)
#loc135 = loc("CWE401_Memory_Leak__strdup_char_04.c":139:9)
#loc136 = loc("CWE401_Memory_Leak__strdup_char_04.c":141:9)
#loc137 = loc("CWE401_Memory_Leak__strdup_char_04.c":141:16)
#loc138 = loc("CWE401_Memory_Leak__strdup_char_04.c":141:22)
#loc139 = loc("CWE401_Memory_Leak__strdup_char_04.c":142:19)
#loc140 = loc("CWE401_Memory_Leak__strdup_char_04.c":142:9)
#loc141 = loc("CWE401_Memory_Leak__strdup_char_04.c":144:5)
#loc142 = loc("CWE401_Memory_Leak__strdup_char_04.c":149:5)
#loc143 = loc("CWE401_Memory_Leak__strdup_char_04.c":144:8)
#loc144 = loc("CWE401_Memory_Leak__strdup_char_04.c":145:5)
#loc145 = loc(fused[#loc1, #loc2])
#loc146 = loc(fused[#loc3, #loc4])
#loc147 = loc(fused[#loc5, #loc6])
#loc148 = loc(fused[#loc7, #loc8])
#loc149 = loc(fused[#loc10, #loc9])
#loc150 = loc(fused[#loc11, #loc12])
#loc151 = loc(fused[#loc14, #loc12])
#loc152 = loc(fused[#loc15, #loc16])
#loc153 = loc(fused[#loc17, #loc18])
#loc154 = loc(fused[#loc21, #loc22])
#loc155 = loc(fused[#loc25, #loc26])
#loc156 = loc(fused[#loc28, #loc26])
#loc157 = loc(fused[#loc29, #loc30])
#loc158 = loc(fused[#loc31, #loc32])
#loc159 = loc(fused[#loc33, #loc34])
#loc160 = loc(fused[#loc35, #loc36])
#loc161 = loc(fused[#loc37, #loc38])
#loc162 = loc(fused[#loc40, #loc41])
#loc163 = loc(fused[#loc42, #loc43])
#loc164 = loc(fused[#loc44, #loc45])
#loc165 = loc(fused[#loc47, #loc46])
#loc166 = loc(fused[#loc48, #loc49])
#loc167 = loc(fused[#loc51, #loc49])
#loc168 = loc(fused[#loc52, #loc53])
#loc169 = loc(fused[#loc54, #loc55])
#loc170 = loc(fused[#loc58, #loc59])
#loc171 = loc(fused[#loc62, #loc63])
#loc172 = loc(fused[#loc65, #loc66, #loc67, #loc63])
#loc173 = loc(fused[#loc71, #loc72])
#loc174 = loc(fused[#loc73, #loc74])
#loc175 = loc(fused[#loc76, #loc75])
#loc176 = loc(fused[#loc77, #loc78])
#loc177 = loc(fused[#loc80, #loc78])
#loc178 = loc(fused[#loc81, #loc82])
#loc179 = loc(fused[#loc83, #loc84])
#loc180 = loc(fused[#loc87, #loc88])
#loc181 = loc(fused[#loc91, #loc92])
#loc182 = loc(fused[#loc94, #loc92])
#loc183 = loc(fused[#loc97, #loc98])
#loc184 = loc(fused[#loc100, #loc101])
#loc185 = loc(fused[#loc102, #loc103])
#loc186 = loc(fused[#loc105, #loc104])
#loc187 = loc(fused[#loc106, #loc107])
#loc188 = loc(fused[#loc109, #loc110, #loc111, #loc107])
#loc189 = loc(fused[#loc115, #loc114])
#loc190 = loc(fused[#loc120, #loc121])
#loc191 = loc(fused[#loc123, #loc121])
#loc192 = loc(fused[#loc124, #loc125])
#loc193 = loc(fused[#loc126, #loc127])
#loc194 = loc(fused[#loc129, #loc128])
#loc195 = loc(fused[#loc130, #loc131])
#loc196 = loc(fused[#loc133, #loc131])
#loc197 = loc(fused[#loc135, #loc134])
#loc198 = loc(fused[#loc141, #loc142])
#loc199 = loc(fused[#loc144, #loc142])
