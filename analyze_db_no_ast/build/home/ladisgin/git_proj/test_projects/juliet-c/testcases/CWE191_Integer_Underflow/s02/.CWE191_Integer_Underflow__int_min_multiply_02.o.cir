!s32i = !cir.int<s, 32>
!s8i = !cir.int<s, 8>
!void = !cir.void
#fn_attr = #cir<extra({inline = #cir.inline<no>, nothrow = #cir.nothrow, optnone = #cir.optnone})>
module @"/home/ladisgin/git_proj/test_projects/juliet-c/testcases/CWE191_Integer_Underflow/s02/CWE191_Integer_Underflow__int_min_multiply_02.c" attributes {cir.lang = #cir.lang<c>, cir.sob = #cir.signed_overflow_behavior<undefined>, cir.triple = "x86_64-unknown-linux-gnu", dlti.dl_spec = #dlti.dl_spec<#dlti.dl_entry<f16, dense<16> : vector<2xi64>>, #dlti.dl_entry<f64, dense<64> : vector<2xi64>>, #dlti.dl_entry<f128, dense<128> : vector<2xi64>>, #dlti.dl_entry<!llvm.ptr<271>, dense<32> : vector<4xi64>>, #dlti.dl_entry<i8, dense<8> : vector<2xi64>>, #dlti.dl_entry<i16, dense<16> : vector<2xi64>>, #dlti.dl_entry<!llvm.ptr<270>, dense<32> : vector<4xi64>>, #dlti.dl_entry<i32, dense<32> : vector<2xi64>>, #dlti.dl_entry<f80, dense<128> : vector<2xi64>>, #dlti.dl_entry<!llvm.ptr, dense<64> : vector<4xi64>>, #dlti.dl_entry<i1, dense<8> : vector<2xi64>>, #dlti.dl_entry<!llvm.ptr<272>, dense<64> : vector<4xi64>>, #dlti.dl_entry<i64, dense<64> : vector<2xi64>>, #dlti.dl_entry<i128, dense<128> : vector<2xi64>>, #dlti.dl_entry<"dlti.endianness", "little">, #dlti.dl_entry<"dlti.stack_alignment", 128 : i64>>, llvm.data_layout = "e-m:e-p270:32:32-p271:32:32-p272:64:64-i64:64-i128:128-f80:128-n8:16:32:64-S128"} {
  cir.func private  @printIntLine(!s32i) loc(#loc184)
  cir.func no_proto  @CWE191_Integer_Underflow__int_min_multiply_02_bad() extra(#fn_attr) {
    %0 = cir.alloca !s32i, !cir.ptr<!s32i>, ["data"] {alignment = 4 : i64} loc(#loc186)
    %1 = cir.const #cir.int<0> : !s32i loc(#loc7)
    cir.store %1, %0 : !s32i, !cir.ptr<!s32i> loc(#loc187)
    cir.scope {
      %2 = cir.const #cir.int<1> : !s32i loc(#loc11)
      %3 = cir.cast(int_to_bool, %2 : !s32i), !cir.bool loc(#loc11)
      cir.if %3 {
        %4 = cir.const #cir.int<2147483647> : !s32i loc(#loc13)
        %5 = cir.unary(minus, %4) : !s32i, !s32i loc(#loc13)
        %6 = cir.const #cir.int<1> : !s32i loc(#loc13)
        %7 = cir.binop(sub, %5, %6) nsw : !s32i loc(#loc13)
        cir.store %7, %0 : !s32i, !cir.ptr<!s32i> loc(#loc190)
      } loc(#loc189)
    } loc(#loc188)
    cir.scope {
      %2 = cir.const #cir.int<1> : !s32i loc(#loc17)
      %3 = cir.cast(int_to_bool, %2 : !s32i), !cir.bool loc(#loc17)
      cir.if %3 {
        cir.scope {
          %4 = cir.load %0 : !cir.ptr<!s32i>, !s32i loc(#loc21)
          %5 = cir.const #cir.int<0> : !s32i loc(#loc22)
          %6 = cir.cmp(lt, %4, %5) : !s32i, !s32i loc(#loc194)
          %7 = cir.cast(int_to_bool, %6 : !s32i), !cir.bool loc(#loc23)
          cir.if %7 {
            %8 = cir.alloca !s32i, !cir.ptr<!s32i>, ["result", init] {alignment = 4 : i64} loc(#loc196)
            %9 = cir.load %0 : !cir.ptr<!s32i>, !s32i loc(#loc27)
            %10 = cir.const #cir.int<2> : !s32i loc(#loc26)
            %11 = cir.binop(mul, %9, %10) nsw : !s32i loc(#loc27)
            cir.store %11, %8 : !s32i, !cir.ptr<!s32i> loc(#loc196)
            %12 = cir.load %8 : !cir.ptr<!s32i>, !s32i loc(#loc28)
            cir.call @printIntLine(%12) : (!s32i) -> () loc(#loc29)
          } loc(#loc195)
        } loc(#loc193)
      } loc(#loc192)
    } loc(#loc191)
    cir.return loc(#loc4)
  } loc(#loc185)
  cir.func no_proto  @CWE191_Integer_Underflow__int_min_multiply_02_good() extra(#fn_attr) {
    %0 = cir.get_global @goodB2G1 : !cir.ptr<!cir.func<!void ()>> loc(#loc198)
    cir.call %0() : (!cir.ptr<!cir.func<!void ()>>) -> () loc(#loc32)
    %1 = cir.get_global @goodB2G2 : !cir.ptr<!cir.func<!void ()>> loc(#loc199)
    cir.call %1() : (!cir.ptr<!cir.func<!void ()>>) -> () loc(#loc34)
    %2 = cir.get_global @goodG2B1 : !cir.ptr<!cir.func<!void ()>> loc(#loc200)
    cir.call %2() : (!cir.ptr<!cir.func<!void ()>>) -> () loc(#loc36)
    %3 = cir.get_global @goodG2B2 : !cir.ptr<!cir.func<!void ()>> loc(#loc201)
    cir.call %3() : (!cir.ptr<!cir.func<!void ()>>) -> () loc(#loc38)
    cir.return loc(#loc31)
  } loc(#loc197)
  cir.func private  @printLine(!cir.ptr<!s8i>) loc(#loc202)
  cir.global "private"  constant internal dsolocal @".str" = #cir.const_array<"Benign, fixed string\00" : !cir.array<!s8i x 21>> : !cir.array<!s8i x 21> {alignment = 1 : i64} loc(#loc42)
  cir.global "private"  constant internal dsolocal @".str1" = #cir.const_array<"data value is too small to perform multiplication.\00" : !cir.array<!s8i x 51>> : !cir.array<!s8i x 51> {alignment = 1 : i64} loc(#loc43)
  cir.func no_proto internal private  @goodB2G1() extra(#fn_attr) {
    %0 = cir.alloca !s32i, !cir.ptr<!s32i>, ["data"] {alignment = 4 : i64} loc(#loc204)
    %1 = cir.const #cir.int<0> : !s32i loc(#loc48)
    cir.store %1, %0 : !s32i, !cir.ptr<!s32i> loc(#loc205)
    cir.scope {
      %2 = cir.const #cir.int<1> : !s32i loc(#loc52)
      %3 = cir.cast(int_to_bool, %2 : !s32i), !cir.bool loc(#loc52)
      cir.if %3 {
        %4 = cir.const #cir.int<2147483647> : !s32i loc(#loc54)
        %5 = cir.unary(minus, %4) : !s32i, !s32i loc(#loc54)
        %6 = cir.const #cir.int<1> : !s32i loc(#loc54)
        %7 = cir.binop(sub, %5, %6) nsw : !s32i loc(#loc54)
        cir.store %7, %0 : !s32i, !cir.ptr<!s32i> loc(#loc208)
      } loc(#loc207)
    } loc(#loc206)
    cir.scope {
      %2 = cir.const #cir.int<0> : !s32i loc(#loc58)
      %3 = cir.cast(int_to_bool, %2 : !s32i), !cir.bool loc(#loc58)
      cir.if %3 {
        %4 = cir.get_global @".str" : !cir.ptr<!cir.array<!s8i x 21>> loc(#loc42)
        %5 = cir.cast(array_to_ptrdecay, %4 : !cir.ptr<!cir.array<!s8i x 21>>), !cir.ptr<!s8i> loc(#loc42)
        cir.call @printLine(%5) : (!cir.ptr<!s8i>) -> () loc(#loc62)
      } else {
        cir.scope {
          %4 = cir.load %0 : !cir.ptr<!s32i>, !s32i loc(#loc65)
          %5 = cir.const #cir.int<0> : !s32i loc(#loc66)
          %6 = cir.cmp(lt, %4, %5) : !s32i, !s32i loc(#loc212)
          %7 = cir.cast(int_to_bool, %6 : !s32i), !cir.bool loc(#loc67)
          cir.if %7 {
            cir.scope {
              %8 = cir.load %0 : !cir.ptr<!s32i>, !s32i loc(#loc71)
              %9 = cir.const #cir.int<2147483647> : !s32i loc(#loc72)
              %10 = cir.unary(minus, %9) : !s32i, !s32i loc(#loc72)
              %11 = cir.const #cir.int<1> : !s32i loc(#loc72)
              %12 = cir.binop(sub, %10, %11) nsw : !s32i loc(#loc72)
              %13 = cir.const #cir.int<2> : !s32i loc(#loc73)
              %14 = cir.binop(div, %12, %13) : !s32i loc(#loc215)
              %15 = cir.cmp(gt, %8, %14) : !s32i, !s32i loc(#loc216)
              %16 = cir.cast(int_to_bool, %15 : !s32i), !cir.bool loc(#loc75)
              cir.if %16 {
                %17 = cir.alloca !s32i, !cir.ptr<!s32i>, ["result", init] {alignment = 4 : i64} loc(#loc218)
                %18 = cir.load %0 : !cir.ptr<!s32i>, !s32i loc(#loc81)
                %19 = cir.const #cir.int<2> : !s32i loc(#loc80)
                %20 = cir.binop(mul, %18, %19) nsw : !s32i loc(#loc81)
                cir.store %20, %17 : !s32i, !cir.ptr<!s32i> loc(#loc218)
                %21 = cir.load %17 : !cir.ptr<!s32i>, !s32i loc(#loc82)
                cir.call @printIntLine(%21) : (!s32i) -> () loc(#loc83)
              } else {
                %17 = cir.get_global @".str1" : !cir.ptr<!cir.array<!s8i x 51>> loc(#loc43)
                %18 = cir.cast(array_to_ptrdecay, %17 : !cir.ptr<!cir.array<!s8i x 51>>), !cir.ptr<!s8i> loc(#loc43)
                cir.call @printLine(%18) : (!cir.ptr<!s8i>) -> () loc(#loc84)
              } loc(#loc217)
            } loc(#loc214)
          } loc(#loc213)
        } loc(#loc211)
      } loc(#loc210)
    } loc(#loc209)
    cir.return loc(#loc45)
  } loc(#loc203)
  cir.func no_proto internal private  @goodB2G2() extra(#fn_attr) {
    %0 = cir.alloca !s32i, !cir.ptr<!s32i>, ["data"] {alignment = 4 : i64} loc(#loc220)
    %1 = cir.const #cir.int<0> : !s32i loc(#loc89)
    cir.store %1, %0 : !s32i, !cir.ptr<!s32i> loc(#loc221)
    cir.scope {
      %2 = cir.const #cir.int<1> : !s32i loc(#loc93)
      %3 = cir.cast(int_to_bool, %2 : !s32i), !cir.bool loc(#loc93)
      cir.if %3 {
        %4 = cir.const #cir.int<2147483647> : !s32i loc(#loc95)
        %5 = cir.unary(minus, %4) : !s32i, !s32i loc(#loc95)
        %6 = cir.const #cir.int<1> : !s32i loc(#loc95)
        %7 = cir.binop(sub, %5, %6) nsw : !s32i loc(#loc95)
        cir.store %7, %0 : !s32i, !cir.ptr<!s32i> loc(#loc224)
      } loc(#loc223)
    } loc(#loc222)
    cir.scope {
      %2 = cir.const #cir.int<1> : !s32i loc(#loc99)
      %3 = cir.cast(int_to_bool, %2 : !s32i), !cir.bool loc(#loc99)
      cir.if %3 {
        cir.scope {
          %4 = cir.load %0 : !cir.ptr<!s32i>, !s32i loc(#loc103)
          %5 = cir.const #cir.int<0> : !s32i loc(#loc104)
          %6 = cir.cmp(lt, %4, %5) : !s32i, !s32i loc(#loc228)
          %7 = cir.cast(int_to_bool, %6 : !s32i), !cir.bool loc(#loc105)
          cir.if %7 {
            cir.scope {
              %8 = cir.load %0 : !cir.ptr<!s32i>, !s32i loc(#loc109)
              %9 = cir.const #cir.int<2147483647> : !s32i loc(#loc110)
              %10 = cir.unary(minus, %9) : !s32i, !s32i loc(#loc110)
              %11 = cir.const #cir.int<1> : !s32i loc(#loc110)
              %12 = cir.binop(sub, %10, %11) nsw : !s32i loc(#loc110)
              %13 = cir.const #cir.int<2> : !s32i loc(#loc111)
              %14 = cir.binop(div, %12, %13) : !s32i loc(#loc231)
              %15 = cir.cmp(gt, %8, %14) : !s32i, !s32i loc(#loc232)
              %16 = cir.cast(int_to_bool, %15 : !s32i), !cir.bool loc(#loc113)
              cir.if %16 {
                %17 = cir.alloca !s32i, !cir.ptr<!s32i>, ["result", init] {alignment = 4 : i64} loc(#loc234)
                %18 = cir.load %0 : !cir.ptr<!s32i>, !s32i loc(#loc119)
                %19 = cir.const #cir.int<2> : !s32i loc(#loc118)
                %20 = cir.binop(mul, %18, %19) nsw : !s32i loc(#loc119)
                cir.store %20, %17 : !s32i, !cir.ptr<!s32i> loc(#loc234)
                %21 = cir.load %17 : !cir.ptr<!s32i>, !s32i loc(#loc120)
                cir.call @printIntLine(%21) : (!s32i) -> () loc(#loc121)
              } else {
                %17 = cir.get_global @".str1" : !cir.ptr<!cir.array<!s8i x 51>> loc(#loc122)
                %18 = cir.cast(array_to_ptrdecay, %17 : !cir.ptr<!cir.array<!s8i x 51>>), !cir.ptr<!s8i> loc(#loc122)
                cir.call @printLine(%18) : (!cir.ptr<!s8i>) -> () loc(#loc123)
              } loc(#loc233)
            } loc(#loc230)
          } loc(#loc229)
        } loc(#loc227)
      } loc(#loc226)
    } loc(#loc225)
    cir.return loc(#loc86)
  } loc(#loc219)
  cir.func no_proto internal private  @goodG2B1() extra(#fn_attr) {
    %0 = cir.alloca !s32i, !cir.ptr<!s32i>, ["data"] {alignment = 4 : i64} loc(#loc236)
    %1 = cir.const #cir.int<0> : !s32i loc(#loc128)
    cir.store %1, %0 : !s32i, !cir.ptr<!s32i> loc(#loc237)
    cir.scope {
      %2 = cir.const #cir.int<0> : !s32i loc(#loc132)
      %3 = cir.cast(int_to_bool, %2 : !s32i), !cir.bool loc(#loc132)
      cir.if %3 {
        %4 = cir.get_global @".str" : !cir.ptr<!cir.array<!s8i x 21>> loc(#loc136)
        %5 = cir.cast(array_to_ptrdecay, %4 : !cir.ptr<!cir.array<!s8i x 21>>), !cir.ptr<!s8i> loc(#loc136)
        cir.call @printLine(%5) : (!cir.ptr<!s8i>) -> () loc(#loc137)
      } else {
        %4 = cir.const #cir.int<2> : !s32i loc(#loc138)
        %5 = cir.unary(minus, %4) : !s32i, !s32i loc(#loc139)
        cir.store %5, %0 : !s32i, !cir.ptr<!s32i> loc(#loc240)
      } loc(#loc239)
    } loc(#loc238)
    cir.scope {
      %2 = cir.const #cir.int<1> : !s32i loc(#loc143)
      %3 = cir.cast(int_to_bool, %2 : !s32i), !cir.bool loc(#loc143)
      cir.if %3 {
        cir.scope {
          %4 = cir.load %0 : !cir.ptr<!s32i>, !s32i loc(#loc147)
          %5 = cir.const #cir.int<0> : !s32i loc(#loc148)
          %6 = cir.cmp(lt, %4, %5) : !s32i, !s32i loc(#loc244)
          %7 = cir.cast(int_to_bool, %6 : !s32i), !cir.bool loc(#loc149)
          cir.if %7 {
            %8 = cir.alloca !s32i, !cir.ptr<!s32i>, ["result", init] {alignment = 4 : i64} loc(#loc246)
            %9 = cir.load %0 : !cir.ptr<!s32i>, !s32i loc(#loc153)
            %10 = cir.const #cir.int<2> : !s32i loc(#loc152)
            %11 = cir.binop(mul, %9, %10) nsw : !s32i loc(#loc153)
            cir.store %11, %8 : !s32i, !cir.ptr<!s32i> loc(#loc246)
            %12 = cir.load %8 : !cir.ptr<!s32i>, !s32i loc(#loc154)
            cir.call @printIntLine(%12) : (!s32i) -> () loc(#loc155)
          } loc(#loc245)
        } loc(#loc243)
      } loc(#loc242)
    } loc(#loc241)
    cir.return loc(#loc125)
  } loc(#loc235)
  cir.func no_proto internal private  @goodG2B2() extra(#fn_attr) {
    %0 = cir.alloca !s32i, !cir.ptr<!s32i>, ["data"] {alignment = 4 : i64} loc(#loc248)
    %1 = cir.const #cir.int<0> : !s32i loc(#loc160)
    cir.store %1, %0 : !s32i, !cir.ptr<!s32i> loc(#loc249)
    cir.scope {
      %2 = cir.const #cir.int<1> : !s32i loc(#loc164)
      %3 = cir.cast(int_to_bool, %2 : !s32i), !cir.bool loc(#loc164)
      cir.if %3 {
        %4 = cir.const #cir.int<2> : !s32i loc(#loc166)
        %5 = cir.unary(minus, %4) : !s32i, !s32i loc(#loc167)
        cir.store %5, %0 : !s32i, !cir.ptr<!s32i> loc(#loc252)
      } loc(#loc251)
    } loc(#loc250)
    cir.scope {
      %2 = cir.const #cir.int<1> : !s32i loc(#loc171)
      %3 = cir.cast(int_to_bool, %2 : !s32i), !cir.bool loc(#loc171)
      cir.if %3 {
        cir.scope {
          %4 = cir.load %0 : !cir.ptr<!s32i>, !s32i loc(#loc175)
          %5 = cir.const #cir.int<0> : !s32i loc(#loc176)
          %6 = cir.cmp(lt, %4, %5) : !s32i, !s32i loc(#loc256)
          %7 = cir.cast(int_to_bool, %6 : !s32i), !cir.bool loc(#loc177)
          cir.if %7 {
            %8 = cir.alloca !s32i, !cir.ptr<!s32i>, ["result", init] {alignment = 4 : i64} loc(#loc258)
            %9 = cir.load %0 : !cir.ptr<!s32i>, !s32i loc(#loc181)
            %10 = cir.const #cir.int<2> : !s32i loc(#loc180)
            %11 = cir.binop(mul, %9, %10) nsw : !s32i loc(#loc181)
            cir.store %11, %8 : !s32i, !cir.ptr<!s32i> loc(#loc258)
            %12 = cir.load %8 : !cir.ptr<!s32i>, !s32i loc(#loc182)
            cir.call @printIntLine(%12) : (!s32i) -> () loc(#loc183)
          } loc(#loc257)
        } loc(#loc255)
      } loc(#loc254)
    } loc(#loc253)
    cir.return loc(#loc157)
  } loc(#loc247)
} loc(#loc)
#loc = loc("/home/ladisgin/git_proj/test_projects/juliet-c/testcases/CWE191_Integer_Underflow/s02/CWE191_Integer_Underflow__int_min_multiply_02.c":0:0)
#loc1 = loc("../../../testcasesupport/std_testcase_io.h":18:1)
#loc2 = loc("../../../testcasesupport/std_testcase_io.h":18:33)
#loc3 = loc("CWE191_Integer_Underflow__int_min_multiply_02.c":22:1)
#loc4 = loc("CWE191_Integer_Underflow__int_min_multiply_02.c":41:1)
#loc5 = loc("CWE191_Integer_Underflow__int_min_multiply_02.c":24:5)
#loc6 = loc("CWE191_Integer_Underflow__int_min_multiply_02.c":24:9)
#loc7 = loc("CWE191_Integer_Underflow__int_min_multiply_02.c":26:12)
#loc8 = loc("CWE191_Integer_Underflow__int_min_multiply_02.c":26:5)
#loc9 = loc("CWE191_Integer_Underflow__int_min_multiply_02.c":27:5)
#loc10 = loc("CWE191_Integer_Underflow__int_min_multiply_02.c":31:5)
#loc11 = loc("CWE191_Integer_Underflow__int_min_multiply_02.c":27:8)
#loc12 = loc("CWE191_Integer_Underflow__int_min_multiply_02.c":28:5)
#loc13 = loc("CWE191_Integer_Underflow__int_min_multiply_02.c":30:16)
#loc14 = loc("CWE191_Integer_Underflow__int_min_multiply_02.c":30:9)
#loc15 = loc("CWE191_Integer_Underflow__int_min_multiply_02.c":32:5)
#loc16 = loc("CWE191_Integer_Underflow__int_min_multiply_02.c":40:5)
#loc17 = loc("CWE191_Integer_Underflow__int_min_multiply_02.c":32:8)
#loc18 = loc("CWE191_Integer_Underflow__int_min_multiply_02.c":33:5)
#loc19 = loc("CWE191_Integer_Underflow__int_min_multiply_02.c":34:9)
#loc20 = loc("CWE191_Integer_Underflow__int_min_multiply_02.c":39:9)
#loc21 = loc("CWE191_Integer_Underflow__int_min_multiply_02.c":34:12)
#loc22 = loc("CWE191_Integer_Underflow__int_min_multiply_02.c":34:19)
#loc23 = loc("CWE191_Integer_Underflow__int_min_multiply_02.c":34:17)
#loc24 = loc("CWE191_Integer_Underflow__int_min_multiply_02.c":35:9)
#loc25 = loc("CWE191_Integer_Underflow__int_min_multiply_02.c":37:13)
#loc26 = loc("CWE191_Integer_Underflow__int_min_multiply_02.c":37:33)
#loc27 = loc("CWE191_Integer_Underflow__int_min_multiply_02.c":37:26)
#loc28 = loc("CWE191_Integer_Underflow__int_min_multiply_02.c":38:26)
#loc29 = loc("CWE191_Integer_Underflow__int_min_multiply_02.c":38:13)
#loc30 = loc("CWE191_Integer_Underflow__int_min_multiply_02.c":159:1)
#loc31 = loc("CWE191_Integer_Underflow__int_min_multiply_02.c":165:1)
#loc32 = loc("CWE191_Integer_Underflow__int_min_multiply_02.c":161:5)
#loc33 = loc("CWE191_Integer_Underflow__int_min_multiply_02.c":161:14)
#loc34 = loc("CWE191_Integer_Underflow__int_min_multiply_02.c":162:5)
#loc35 = loc("CWE191_Integer_Underflow__int_min_multiply_02.c":162:14)
#loc36 = loc("CWE191_Integer_Underflow__int_min_multiply_02.c":163:5)
#loc37 = loc("CWE191_Integer_Underflow__int_min_multiply_02.c":163:14)
#loc38 = loc("CWE191_Integer_Underflow__int_min_multiply_02.c":164:5)
#loc39 = loc("CWE191_Integer_Underflow__int_min_multiply_02.c":164:14)
#loc40 = loc("../../../testcasesupport/std_testcase_io.h":14:1)
#loc41 = loc("../../../testcasesupport/std_testcase_io.h":14:33)
#loc42 = loc("CWE191_Integer_Underflow__int_min_multiply_02.c":61:19)
#loc43 = loc("CWE191_Integer_Underflow__int_min_multiply_02.c":75:27)
#loc44 = loc("CWE191_Integer_Underflow__int_min_multiply_02.c":48:1)
#loc45 = loc("CWE191_Integer_Underflow__int_min_multiply_02.c":79:1)
#loc46 = loc("CWE191_Integer_Underflow__int_min_multiply_02.c":50:5)
#loc47 = loc("CWE191_Integer_Underflow__int_min_multiply_02.c":50:9)
#loc48 = loc("CWE191_Integer_Underflow__int_min_multiply_02.c":52:12)
#loc49 = loc("CWE191_Integer_Underflow__int_min_multiply_02.c":52:5)
#loc50 = loc("CWE191_Integer_Underflow__int_min_multiply_02.c":53:5)
#loc51 = loc("CWE191_Integer_Underflow__int_min_multiply_02.c":57:5)
#loc52 = loc("CWE191_Integer_Underflow__int_min_multiply_02.c":53:8)
#loc53 = loc("CWE191_Integer_Underflow__int_min_multiply_02.c":54:5)
#loc54 = loc("CWE191_Integer_Underflow__int_min_multiply_02.c":56:16)
#loc55 = loc("CWE191_Integer_Underflow__int_min_multiply_02.c":56:9)
#loc56 = loc("CWE191_Integer_Underflow__int_min_multiply_02.c":58:5)
#loc57 = loc("CWE191_Integer_Underflow__int_min_multiply_02.c":78:5)
#loc58 = loc("CWE191_Integer_Underflow__int_min_multiply_02.c":58:8)
#loc59 = loc("CWE191_Integer_Underflow__int_min_multiply_02.c":59:5)
#loc60 = loc("CWE191_Integer_Underflow__int_min_multiply_02.c":62:5)
#loc61 = loc("CWE191_Integer_Underflow__int_min_multiply_02.c":64:5)
#loc62 = loc("CWE191_Integer_Underflow__int_min_multiply_02.c":61:9)
#loc63 = loc("CWE191_Integer_Underflow__int_min_multiply_02.c":65:9)
#loc64 = loc("CWE191_Integer_Underflow__int_min_multiply_02.c":77:9)
#loc65 = loc("CWE191_Integer_Underflow__int_min_multiply_02.c":65:12)
#loc66 = loc("CWE191_Integer_Underflow__int_min_multiply_02.c":65:19)
#loc67 = loc("CWE191_Integer_Underflow__int_min_multiply_02.c":65:17)
#loc68 = loc("CWE191_Integer_Underflow__int_min_multiply_02.c":66:9)
#loc69 = loc("CWE191_Integer_Underflow__int_min_multiply_02.c":68:13)
#loc70 = loc("CWE191_Integer_Underflow__int_min_multiply_02.c":76:13)
#loc71 = loc("CWE191_Integer_Underflow__int_min_multiply_02.c":68:17)
#loc72 = loc("CWE191_Integer_Underflow__int_min_multiply_02.c":68:25)
#loc73 = loc("CWE191_Integer_Underflow__int_min_multiply_02.c":68:33)
#loc74 = loc("CWE191_Integer_Underflow__int_min_multiply_02.c":68:34)
#loc75 = loc("CWE191_Integer_Underflow__int_min_multiply_02.c":68:22)
#loc76 = loc("CWE191_Integer_Underflow__int_min_multiply_02.c":69:13)
#loc77 = loc("CWE191_Integer_Underflow__int_min_multiply_02.c":72:13)
#loc78 = loc("CWE191_Integer_Underflow__int_min_multiply_02.c":74:13)
#loc79 = loc("CWE191_Integer_Underflow__int_min_multiply_02.c":70:17)
#loc80 = loc("CWE191_Integer_Underflow__int_min_multiply_02.c":70:37)
#loc81 = loc("CWE191_Integer_Underflow__int_min_multiply_02.c":70:30)
#loc82 = loc("CWE191_Integer_Underflow__int_min_multiply_02.c":71:30)
#loc83 = loc("CWE191_Integer_Underflow__int_min_multiply_02.c":71:17)
#loc84 = loc("CWE191_Integer_Underflow__int_min_multiply_02.c":75:17)
#loc85 = loc("CWE191_Integer_Underflow__int_min_multiply_02.c":82:1)
#loc86 = loc("CWE191_Integer_Underflow__int_min_multiply_02.c":108:1)
#loc87 = loc("CWE191_Integer_Underflow__int_min_multiply_02.c":84:5)
#loc88 = loc("CWE191_Integer_Underflow__int_min_multiply_02.c":84:9)
#loc89 = loc("CWE191_Integer_Underflow__int_min_multiply_02.c":86:12)
#loc90 = loc("CWE191_Integer_Underflow__int_min_multiply_02.c":86:5)
#loc91 = loc("CWE191_Integer_Underflow__int_min_multiply_02.c":87:5)
#loc92 = loc("CWE191_Integer_Underflow__int_min_multiply_02.c":91:5)
#loc93 = loc("CWE191_Integer_Underflow__int_min_multiply_02.c":87:8)
#loc94 = loc("CWE191_Integer_Underflow__int_min_multiply_02.c":88:5)
#loc95 = loc("CWE191_Integer_Underflow__int_min_multiply_02.c":90:16)
#loc96 = loc("CWE191_Integer_Underflow__int_min_multiply_02.c":90:9)
#loc97 = loc("CWE191_Integer_Underflow__int_min_multiply_02.c":92:5)
#loc98 = loc("CWE191_Integer_Underflow__int_min_multiply_02.c":107:5)
#loc99 = loc("CWE191_Integer_Underflow__int_min_multiply_02.c":92:8)
#loc100 = loc("CWE191_Integer_Underflow__int_min_multiply_02.c":93:5)
#loc101 = loc("CWE191_Integer_Underflow__int_min_multiply_02.c":94:9)
#loc102 = loc("CWE191_Integer_Underflow__int_min_multiply_02.c":106:9)
#loc103 = loc("CWE191_Integer_Underflow__int_min_multiply_02.c":94:12)
#loc104 = loc("CWE191_Integer_Underflow__int_min_multiply_02.c":94:19)
#loc105 = loc("CWE191_Integer_Underflow__int_min_multiply_02.c":94:17)
#loc106 = loc("CWE191_Integer_Underflow__int_min_multiply_02.c":95:9)
#loc107 = loc("CWE191_Integer_Underflow__int_min_multiply_02.c":97:13)
#loc108 = loc("CWE191_Integer_Underflow__int_min_multiply_02.c":105:13)
#loc109 = loc("CWE191_Integer_Underflow__int_min_multiply_02.c":97:17)
#loc110 = loc("CWE191_Integer_Underflow__int_min_multiply_02.c":97:25)
#loc111 = loc("CWE191_Integer_Underflow__int_min_multiply_02.c":97:33)
#loc112 = loc("CWE191_Integer_Underflow__int_min_multiply_02.c":97:34)
#loc113 = loc("CWE191_Integer_Underflow__int_min_multiply_02.c":97:22)
#loc114 = loc("CWE191_Integer_Underflow__int_min_multiply_02.c":98:13)
#loc115 = loc("CWE191_Integer_Underflow__int_min_multiply_02.c":101:13)
#loc116 = loc("CWE191_Integer_Underflow__int_min_multiply_02.c":103:13)
#loc117 = loc("CWE191_Integer_Underflow__int_min_multiply_02.c":99:17)
#loc118 = loc("CWE191_Integer_Underflow__int_min_multiply_02.c":99:37)
#loc119 = loc("CWE191_Integer_Underflow__int_min_multiply_02.c":99:30)
#loc120 = loc("CWE191_Integer_Underflow__int_min_multiply_02.c":100:30)
#loc121 = loc("CWE191_Integer_Underflow__int_min_multiply_02.c":100:17)
#loc122 = loc("CWE191_Integer_Underflow__int_min_multiply_02.c":104:27)
#loc123 = loc("CWE191_Integer_Underflow__int_min_multiply_02.c":104:17)
#loc124 = loc("CWE191_Integer_Underflow__int_min_multiply_02.c":111:1)
#loc125 = loc("CWE191_Integer_Underflow__int_min_multiply_02.c":135:1)
#loc126 = loc("CWE191_Integer_Underflow__int_min_multiply_02.c":113:5)
#loc127 = loc("CWE191_Integer_Underflow__int_min_multiply_02.c":113:9)
#loc128 = loc("CWE191_Integer_Underflow__int_min_multiply_02.c":115:12)
#loc129 = loc("CWE191_Integer_Underflow__int_min_multiply_02.c":115:5)
#loc130 = loc("CWE191_Integer_Underflow__int_min_multiply_02.c":116:5)
#loc131 = loc("CWE191_Integer_Underflow__int_min_multiply_02.c":125:5)
#loc132 = loc("CWE191_Integer_Underflow__int_min_multiply_02.c":116:8)
#loc133 = loc("CWE191_Integer_Underflow__int_min_multiply_02.c":117:5)
#loc134 = loc("CWE191_Integer_Underflow__int_min_multiply_02.c":120:5)
#loc135 = loc("CWE191_Integer_Underflow__int_min_multiply_02.c":122:5)
#loc136 = loc("CWE191_Integer_Underflow__int_min_multiply_02.c":119:19)
#loc137 = loc("CWE191_Integer_Underflow__int_min_multiply_02.c":119:9)
#loc138 = loc("CWE191_Integer_Underflow__int_min_multiply_02.c":124:17)
#loc139 = loc("CWE191_Integer_Underflow__int_min_multiply_02.c":124:16)
#loc140 = loc("CWE191_Integer_Underflow__int_min_multiply_02.c":124:9)
#loc141 = loc("CWE191_Integer_Underflow__int_min_multiply_02.c":126:5)
#loc142 = loc("CWE191_Integer_Underflow__int_min_multiply_02.c":134:5)
#loc143 = loc("CWE191_Integer_Underflow__int_min_multiply_02.c":126:8)
#loc144 = loc("CWE191_Integer_Underflow__int_min_multiply_02.c":127:5)
#loc145 = loc("CWE191_Integer_Underflow__int_min_multiply_02.c":128:9)
#loc146 = loc("CWE191_Integer_Underflow__int_min_multiply_02.c":133:9)
#loc147 = loc("CWE191_Integer_Underflow__int_min_multiply_02.c":128:12)
#loc148 = loc("CWE191_Integer_Underflow__int_min_multiply_02.c":128:19)
#loc149 = loc("CWE191_Integer_Underflow__int_min_multiply_02.c":128:17)
#loc150 = loc("CWE191_Integer_Underflow__int_min_multiply_02.c":129:9)
#loc151 = loc("CWE191_Integer_Underflow__int_min_multiply_02.c":131:13)
#loc152 = loc("CWE191_Integer_Underflow__int_min_multiply_02.c":131:33)
#loc153 = loc("CWE191_Integer_Underflow__int_min_multiply_02.c":131:26)
#loc154 = loc("CWE191_Integer_Underflow__int_min_multiply_02.c":132:26)
#loc155 = loc("CWE191_Integer_Underflow__int_min_multiply_02.c":132:13)
#loc156 = loc("CWE191_Integer_Underflow__int_min_multiply_02.c":138:1)
#loc157 = loc("CWE191_Integer_Underflow__int_min_multiply_02.c":157:1)
#loc158 = loc("CWE191_Integer_Underflow__int_min_multiply_02.c":140:5)
#loc159 = loc("CWE191_Integer_Underflow__int_min_multiply_02.c":140:9)
#loc160 = loc("CWE191_Integer_Underflow__int_min_multiply_02.c":142:12)
#loc161 = loc("CWE191_Integer_Underflow__int_min_multiply_02.c":142:5)
#loc162 = loc("CWE191_Integer_Underflow__int_min_multiply_02.c":143:5)
#loc163 = loc("CWE191_Integer_Underflow__int_min_multiply_02.c":147:5)
#loc164 = loc("CWE191_Integer_Underflow__int_min_multiply_02.c":143:8)
#loc165 = loc("CWE191_Integer_Underflow__int_min_multiply_02.c":144:5)
#loc166 = loc("CWE191_Integer_Underflow__int_min_multiply_02.c":146:17)
#loc167 = loc("CWE191_Integer_Underflow__int_min_multiply_02.c":146:16)
#loc168 = loc("CWE191_Integer_Underflow__int_min_multiply_02.c":146:9)
#loc169 = loc("CWE191_Integer_Underflow__int_min_multiply_02.c":148:5)
#loc170 = loc("CWE191_Integer_Underflow__int_min_multiply_02.c":156:5)
#loc171 = loc("CWE191_Integer_Underflow__int_min_multiply_02.c":148:8)
#loc172 = loc("CWE191_Integer_Underflow__int_min_multiply_02.c":149:5)
#loc173 = loc("CWE191_Integer_Underflow__int_min_multiply_02.c":150:9)
#loc174 = loc("CWE191_Integer_Underflow__int_min_multiply_02.c":155:9)
#loc175 = loc("CWE191_Integer_Underflow__int_min_multiply_02.c":150:12)
#loc176 = loc("CWE191_Integer_Underflow__int_min_multiply_02.c":150:19)
#loc177 = loc("CWE191_Integer_Underflow__int_min_multiply_02.c":150:17)
#loc178 = loc("CWE191_Integer_Underflow__int_min_multiply_02.c":151:9)
#loc179 = loc("CWE191_Integer_Underflow__int_min_multiply_02.c":153:13)
#loc180 = loc("CWE191_Integer_Underflow__int_min_multiply_02.c":153:33)
#loc181 = loc("CWE191_Integer_Underflow__int_min_multiply_02.c":153:26)
#loc182 = loc("CWE191_Integer_Underflow__int_min_multiply_02.c":154:26)
#loc183 = loc("CWE191_Integer_Underflow__int_min_multiply_02.c":154:13)
#loc184 = loc(fused[#loc1, #loc2])
#loc185 = loc(fused[#loc3, #loc4])
#loc186 = loc(fused[#loc5, #loc6])
#loc187 = loc(fused[#loc8, #loc7])
#loc188 = loc(fused[#loc9, #loc10])
#loc189 = loc(fused[#loc12, #loc10])
#loc190 = loc(fused[#loc14, #loc13])
#loc191 = loc(fused[#loc15, #loc16])
#loc192 = loc(fused[#loc18, #loc16])
#loc193 = loc(fused[#loc19, #loc20])
#loc194 = loc(fused[#loc21, #loc22])
#loc195 = loc(fused[#loc24, #loc20])
#loc196 = loc(fused[#loc25, #loc26])
#loc197 = loc(fused[#loc30, #loc31])
#loc198 = loc(fused[#loc32, #loc33])
#loc199 = loc(fused[#loc34, #loc35])
#loc200 = loc(fused[#loc36, #loc37])
#loc201 = loc(fused[#loc38, #loc39])
#loc202 = loc(fused[#loc40, #loc41])
#loc203 = loc(fused[#loc44, #loc45])
#loc204 = loc(fused[#loc46, #loc47])
#loc205 = loc(fused[#loc49, #loc48])
#loc206 = loc(fused[#loc50, #loc51])
#loc207 = loc(fused[#loc53, #loc51])
#loc208 = loc(fused[#loc55, #loc54])
#loc209 = loc(fused[#loc56, #loc57])
#loc210 = loc(fused[#loc59, #loc60, #loc61, #loc57])
#loc211 = loc(fused[#loc63, #loc64])
#loc212 = loc(fused[#loc65, #loc66])
#loc213 = loc(fused[#loc68, #loc64])
#loc214 = loc(fused[#loc69, #loc70])
#loc215 = loc(fused[#loc72, #loc73])
#loc216 = loc(fused[#loc71, #loc74])
#loc217 = loc(fused[#loc76, #loc77, #loc78, #loc70])
#loc218 = loc(fused[#loc79, #loc80])
#loc219 = loc(fused[#loc85, #loc86])
#loc220 = loc(fused[#loc87, #loc88])
#loc221 = loc(fused[#loc90, #loc89])
#loc222 = loc(fused[#loc91, #loc92])
#loc223 = loc(fused[#loc94, #loc92])
#loc224 = loc(fused[#loc96, #loc95])
#loc225 = loc(fused[#loc97, #loc98])
#loc226 = loc(fused[#loc100, #loc98])
#loc227 = loc(fused[#loc101, #loc102])
#loc228 = loc(fused[#loc103, #loc104])
#loc229 = loc(fused[#loc106, #loc102])
#loc230 = loc(fused[#loc107, #loc108])
#loc231 = loc(fused[#loc110, #loc111])
#loc232 = loc(fused[#loc109, #loc112])
#loc233 = loc(fused[#loc114, #loc115, #loc116, #loc108])
#loc234 = loc(fused[#loc117, #loc118])
#loc235 = loc(fused[#loc124, #loc125])
#loc236 = loc(fused[#loc126, #loc127])
#loc237 = loc(fused[#loc129, #loc128])
#loc238 = loc(fused[#loc130, #loc131])
#loc239 = loc(fused[#loc133, #loc134, #loc135, #loc131])
#loc240 = loc(fused[#loc140, #loc138])
#loc241 = loc(fused[#loc141, #loc142])
#loc242 = loc(fused[#loc144, #loc142])
#loc243 = loc(fused[#loc145, #loc146])
#loc244 = loc(fused[#loc147, #loc148])
#loc245 = loc(fused[#loc150, #loc146])
#loc246 = loc(fused[#loc151, #loc152])
#loc247 = loc(fused[#loc156, #loc157])
#loc248 = loc(fused[#loc158, #loc159])
#loc249 = loc(fused[#loc161, #loc160])
#loc250 = loc(fused[#loc162, #loc163])
#loc251 = loc(fused[#loc165, #loc163])
#loc252 = loc(fused[#loc168, #loc166])
#loc253 = loc(fused[#loc169, #loc170])
#loc254 = loc(fused[#loc172, #loc170])
#loc255 = loc(fused[#loc173, #loc174])
#loc256 = loc(fused[#loc175, #loc176])
#loc257 = loc(fused[#loc178, #loc174])
#loc258 = loc(fused[#loc179, #loc180])
