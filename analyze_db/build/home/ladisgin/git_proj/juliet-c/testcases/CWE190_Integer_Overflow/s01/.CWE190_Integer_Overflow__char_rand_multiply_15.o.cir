!s32i = !cir.int<s, 32>
!s8i = !cir.int<s, 8>
!u32i = !cir.int<u, 32>
!void = !cir.void
#fn_attr = #cir<extra({nothrow = #cir.nothrow})>
#fn_attr1 = #cir<extra({inline = #cir.inline<no>, nothrow = #cir.nothrow, optnone = #cir.optnone})>
#loc20 = loc("CWE190_Integer_Overflow__char_rand_multiply_15.c":30:22)
#loc64 = loc("CWE190_Integer_Overflow__char_rand_multiply_15.c":67:22)
#loc108 = loc("CWE190_Integer_Overflow__char_rand_multiply_15.c":107:22)
module @"/home/ladisgin/git_proj/juliet-c/testcases/CWE190_Integer_Overflow/s01/CWE190_Integer_Overflow__char_rand_multiply_15.c" attributes {cir.lang = #cir.lang<c>, cir.sob = #cir.signed_overflow_behavior<undefined>, cir.triple = "x86_64-unknown-linux-gnu", dlti.dl_spec = #dlti.dl_spec<i32 = dense<32> : vector<2xi64>, i8 = dense<8> : vector<2xi64>, i16 = dense<16> : vector<2xi64>, f128 = dense<128> : vector<2xi64>, !llvm.ptr<271> = dense<32> : vector<4xi64>, f16 = dense<16> : vector<2xi64>, !llvm.ptr<270> = dense<32> : vector<4xi64>, f64 = dense<64> : vector<2xi64>, i64 = dense<64> : vector<2xi64>, !llvm.ptr<272> = dense<64> : vector<4xi64>, i128 = dense<128> : vector<2xi64>, f80 = dense<128> : vector<2xi64>, i1 = dense<8> : vector<2xi64>, !llvm.ptr = dense<64> : vector<4xi64>, "dlti.endianness" = "little", "dlti.stack_alignment" = 128 : i64>} {
  cir.func private @rand() -> !s32i extra(#fn_attr) loc(#loc209)
  cir.func private @printLine(!cir.ptr<!s8i>) loc(#loc210)
  cir.global "private" constant cir_private dsolocal @".str" = #cir.const_array<"Benign, fixed string\00" : !cir.array<!s8i x 21>> : !cir.array<!s8i x 21> {alignment = 1 : i64} loc(#loc5)
  cir.func private @printHexCharLine(!s8i) loc(#loc211)
  cir.func no_proto @CWE190_Integer_Overflow__char_rand_multiply_15_bad() extra(#fn_attr1) {
    %0 = cir.alloca !s8i, !cir.ptr<!s8i>, ["result", init] {alignment = 1 : i64} loc(#loc213)
    %1 = cir.alloca !s8i, !cir.ptr<!s8i>, ["data"] {alignment = 1 : i64} loc(#loc214)
    %2 = cir.const #cir.int<32> : !s32i loc(#loc14)
    %3 = cir.cast(integral, %2 : !s32i), !s8i loc(#loc14)
    cir.store %3, %1 : !s8i, !cir.ptr<!s8i> loc(#loc215)
    cir.br ^bb1 loc(#loc216)
  ^bb1:  // pred: ^bb0
    %4 = cir.const #cir.int<6> : !s32i loc(#loc18)
    cir.br ^bb2 loc(#loc16)
  ^bb2:  // pred: ^bb1
    cir.switch.flat %4 : !s32i, ^bb9 [
      6: ^bb4
    ] loc(#loc16)
  ^bb3:  // no predecessors
    cir.br ^bb4 loc(#loc19)
  ^bb4:  // 2 preds: ^bb2, ^bb3
    %5 = cir.call @rand() : () -> !s32i extra(#fn_attr) loc(#loc20)
    %6 = cir.const #cir.int<1> : !s32i loc(#loc20)
    %7 = cir.binop(and, %5, %6) : !s32i loc(#loc20)
    %8 = cir.cast(int_to_bool, %7 : !s32i), !cir.bool loc(#loc20)
    cir.brcond %8 ^bb5, ^bb6 loc(#loc20)
  ^bb5:  // pred: ^bb4
    %9 = cir.call @rand() : () -> !s32i extra(#fn_attr) loc(#loc20)
    %10 = cir.cast(integral, %9 : !s32i), !u32i loc(#loc20)
    %11 = cir.const #cir.int<30> : !s32i loc(#loc20)
    %12 = cir.shift(left, %10 : !u32i, %11 : !s32i) -> !u32i loc(#loc20)
    %13 = cir.call @rand() : () -> !s32i extra(#fn_attr) loc(#loc20)
    %14 = cir.cast(integral, %13 : !s32i), !u32i loc(#loc20)
    %15 = cir.const #cir.int<15> : !s32i loc(#loc20)
    %16 = cir.shift(left, %14 : !u32i, %15 : !s32i) -> !u32i loc(#loc20)
    %17 = cir.binop(xor, %12, %16) : !u32i loc(#loc20)
    %18 = cir.call @rand() : () -> !s32i extra(#fn_attr) loc(#loc20)
    %19 = cir.cast(integral, %18 : !s32i), !u32i loc(#loc20)
    %20 = cir.binop(xor, %17, %19) : !u32i loc(#loc20)
    cir.br ^bb7(%20 : !u32i) loc(#loc20)
  ^bb6:  // pred: ^bb4
    %21 = cir.call @rand() : () -> !s32i extra(#fn_attr) loc(#loc20)
    %22 = cir.cast(integral, %21 : !s32i), !u32i loc(#loc20)
    %23 = cir.const #cir.int<30> : !s32i loc(#loc20)
    %24 = cir.shift(left, %22 : !u32i, %23 : !s32i) -> !u32i loc(#loc20)
    %25 = cir.call @rand() : () -> !s32i extra(#fn_attr) loc(#loc20)
    %26 = cir.cast(integral, %25 : !s32i), !u32i loc(#loc20)
    %27 = cir.const #cir.int<15> : !s32i loc(#loc20)
    %28 = cir.shift(left, %26 : !u32i, %27 : !s32i) -> !u32i loc(#loc20)
    %29 = cir.binop(xor, %24, %28) : !u32i loc(#loc20)
    %30 = cir.call @rand() : () -> !s32i extra(#fn_attr) loc(#loc20)
    %31 = cir.cast(integral, %30 : !s32i), !u32i loc(#loc20)
    %32 = cir.binop(xor, %29, %31) : !u32i loc(#loc20)
    %33 = cir.unary(minus, %32) : !u32i, !u32i loc(#loc20)
    %34 = cir.const #cir.int<1> : !s32i loc(#loc20)
    %35 = cir.cast(integral, %34 : !s32i), !u32i loc(#loc20)
    %36 = cir.binop(sub, %33, %35) : !u32i loc(#loc20)
    cir.br ^bb7(%36 : !u32i) loc(#loc20)
  ^bb7(%37: !u32i loc("CWE190_Integer_Overflow__char_rand_multiply_15.c":30:22)):  // 2 preds: ^bb5, ^bb6
    cir.br ^bb8 loc(#loc20)
  ^bb8:  // pred: ^bb7
    %38 = cir.cast(integral, %37 : !u32i), !s32i loc(#loc20)
    %39 = cir.cast(integral, %38 : !s32i), !s8i loc(#loc20)
    cir.store %39, %1 : !s8i, !cir.ptr<!s8i> loc(#loc217)
    cir.br ^bb10 loc(#loc22)
  ^bb9:  // pred: ^bb2
    %40 = cir.get_global @".str" : !cir.ptr<!cir.array<!s8i x 21>> loc(#loc5)
    %41 = cir.cast(array_to_ptrdecay, %40 : !cir.ptr<!cir.array<!s8i x 21>>), !cir.ptr<!s8i> loc(#loc5)
    cir.call @printLine(%41) : (!cir.ptr<!s8i>) -> () loc(#loc23)
    cir.br ^bb10 loc(#loc24)
  ^bb10:  // 2 preds: ^bb8, ^bb9
    cir.br ^bb11 loc(#loc17)
  ^bb11:  // pred: ^bb10
    cir.br ^bb12 loc(#loc218)
  ^bb12:  // pred: ^bb11
    %42 = cir.const #cir.int<7> : !s32i loc(#loc27)
    cir.br ^bb13 loc(#loc25)
  ^bb13:  // pred: ^bb12
    cir.switch.flat %42 : !s32i, ^bb20 [
      7: ^bb15
    ] loc(#loc25)
  ^bb14:  // no predecessors
    cir.br ^bb15 loc(#loc28)
  ^bb15:  // 2 preds: ^bb13, ^bb14
    cir.br ^bb16 loc(#loc219)
  ^bb16:  // pred: ^bb15
    %43 = cir.load %1 : !cir.ptr<!s8i>, !s8i loc(#loc31)
    %44 = cir.cast(integral, %43 : !s8i), !s32i loc(#loc31)
    %45 = cir.const #cir.int<0> : !s32i loc(#loc32)
    %46 = cir.cmp(gt, %44, %45) : !s32i, !cir.bool loc(#loc220)
    cir.brcond %46 ^bb17, ^bb18 loc(#loc221)
  ^bb17:  // pred: ^bb16
    %47 = cir.load %1 : !cir.ptr<!s8i>, !s8i loc(#loc34)
    %48 = cir.cast(integral, %47 : !s8i), !s32i loc(#loc34)
    %49 = cir.const #cir.int<2> : !s32i loc(#loc11)
    %50 = cir.binop(mul, %48, %49) nsw : !s32i loc(#loc34)
    %51 = cir.cast(integral, %50 : !s32i), !s8i loc(#loc34)
    cir.store %51, %0 : !s8i, !cir.ptr<!s8i> loc(#loc213)
    %52 = cir.load %0 : !cir.ptr<!s8i>, !s8i loc(#loc35)
    cir.call @printHexCharLine(%52) : (!s8i) -> () loc(#loc36)
    cir.br ^bb18 loc(#loc30)
  ^bb18:  // 2 preds: ^bb16, ^bb17
    cir.br ^bb19 loc(#loc30)
  ^bb19:  // pred: ^bb18
    cir.br ^bb21 loc(#loc37)
  ^bb20:  // pred: ^bb13
    %53 = cir.get_global @".str" : !cir.ptr<!cir.array<!s8i x 21>> loc(#loc38)
    %54 = cir.cast(array_to_ptrdecay, %53 : !cir.ptr<!cir.array<!s8i x 21>>), !cir.ptr<!s8i> loc(#loc38)
    cir.call @printLine(%54) : (!cir.ptr<!s8i>) -> () loc(#loc39)
    cir.br ^bb21 loc(#loc40)
  ^bb21:  // 2 preds: ^bb19, ^bb20
    cir.br ^bb22 loc(#loc26)
  ^bb22:  // pred: ^bb21
    cir.return loc(#loc9)
  } loc(#loc212)
  cir.func no_proto @CWE190_Integer_Overflow__char_rand_multiply_15_good() extra(#fn_attr1) {
    %0 = cir.get_global @goodB2G1 : !cir.ptr<!cir.func<!void ()>> loc(#loc223)
    cir.call %0() : (!cir.ptr<!cir.func<!void ()>>) -> () loc(#loc43)
    %1 = cir.get_global @goodB2G2 : !cir.ptr<!cir.func<!void ()>> loc(#loc224)
    cir.call %1() : (!cir.ptr<!cir.func<!void ()>>) -> () loc(#loc45)
    %2 = cir.get_global @goodG2B1 : !cir.ptr<!cir.func<!void ()>> loc(#loc225)
    cir.call %2() : (!cir.ptr<!cir.func<!void ()>>) -> () loc(#loc47)
    %3 = cir.get_global @goodG2B2 : !cir.ptr<!cir.func<!void ()>> loc(#loc226)
    cir.call %3() : (!cir.ptr<!cir.func<!void ()>>) -> () loc(#loc49)
    cir.return loc(#loc42)
  } loc(#loc222)
  cir.global "private" constant cir_private dsolocal @".str.1" = #cir.const_array<"data value is too large to perform arithmetic safely.\00" : !cir.array<!s8i x 54>> : !cir.array<!s8i x 54> {alignment = 1 : i64} loc(#loc51)
  cir.func no_proto internal private @goodB2G1() extra(#fn_attr1) {
    %0 = cir.alloca !s8i, !cir.ptr<!s8i>, ["result", init] {alignment = 1 : i64} loc(#loc228)
    %1 = cir.alloca !s8i, !cir.ptr<!s8i>, ["data"] {alignment = 1 : i64} loc(#loc229)
    %2 = cir.const #cir.int<32> : !s32i loc(#loc58)
    %3 = cir.cast(integral, %2 : !s32i), !s8i loc(#loc58)
    cir.store %3, %1 : !s8i, !cir.ptr<!s8i> loc(#loc230)
    cir.br ^bb1 loc(#loc231)
  ^bb1:  // pred: ^bb0
    %4 = cir.const #cir.int<6> : !s32i loc(#loc62)
    cir.br ^bb2 loc(#loc60)
  ^bb2:  // pred: ^bb1
    cir.switch.flat %4 : !s32i, ^bb9 [
      6: ^bb4
    ] loc(#loc60)
  ^bb3:  // no predecessors
    cir.br ^bb4 loc(#loc63)
  ^bb4:  // 2 preds: ^bb2, ^bb3
    %5 = cir.call @rand() : () -> !s32i extra(#fn_attr) loc(#loc64)
    %6 = cir.const #cir.int<1> : !s32i loc(#loc64)
    %7 = cir.binop(and, %5, %6) : !s32i loc(#loc64)
    %8 = cir.cast(int_to_bool, %7 : !s32i), !cir.bool loc(#loc64)
    cir.brcond %8 ^bb5, ^bb6 loc(#loc64)
  ^bb5:  // pred: ^bb4
    %9 = cir.call @rand() : () -> !s32i extra(#fn_attr) loc(#loc64)
    %10 = cir.cast(integral, %9 : !s32i), !u32i loc(#loc64)
    %11 = cir.const #cir.int<30> : !s32i loc(#loc64)
    %12 = cir.shift(left, %10 : !u32i, %11 : !s32i) -> !u32i loc(#loc64)
    %13 = cir.call @rand() : () -> !s32i extra(#fn_attr) loc(#loc64)
    %14 = cir.cast(integral, %13 : !s32i), !u32i loc(#loc64)
    %15 = cir.const #cir.int<15> : !s32i loc(#loc64)
    %16 = cir.shift(left, %14 : !u32i, %15 : !s32i) -> !u32i loc(#loc64)
    %17 = cir.binop(xor, %12, %16) : !u32i loc(#loc64)
    %18 = cir.call @rand() : () -> !s32i extra(#fn_attr) loc(#loc64)
    %19 = cir.cast(integral, %18 : !s32i), !u32i loc(#loc64)
    %20 = cir.binop(xor, %17, %19) : !u32i loc(#loc64)
    cir.br ^bb7(%20 : !u32i) loc(#loc64)
  ^bb6:  // pred: ^bb4
    %21 = cir.call @rand() : () -> !s32i extra(#fn_attr) loc(#loc64)
    %22 = cir.cast(integral, %21 : !s32i), !u32i loc(#loc64)
    %23 = cir.const #cir.int<30> : !s32i loc(#loc64)
    %24 = cir.shift(left, %22 : !u32i, %23 : !s32i) -> !u32i loc(#loc64)
    %25 = cir.call @rand() : () -> !s32i extra(#fn_attr) loc(#loc64)
    %26 = cir.cast(integral, %25 : !s32i), !u32i loc(#loc64)
    %27 = cir.const #cir.int<15> : !s32i loc(#loc64)
    %28 = cir.shift(left, %26 : !u32i, %27 : !s32i) -> !u32i loc(#loc64)
    %29 = cir.binop(xor, %24, %28) : !u32i loc(#loc64)
    %30 = cir.call @rand() : () -> !s32i extra(#fn_attr) loc(#loc64)
    %31 = cir.cast(integral, %30 : !s32i), !u32i loc(#loc64)
    %32 = cir.binop(xor, %29, %31) : !u32i loc(#loc64)
    %33 = cir.unary(minus, %32) : !u32i, !u32i loc(#loc64)
    %34 = cir.const #cir.int<1> : !s32i loc(#loc64)
    %35 = cir.cast(integral, %34 : !s32i), !u32i loc(#loc64)
    %36 = cir.binop(sub, %33, %35) : !u32i loc(#loc64)
    cir.br ^bb7(%36 : !u32i) loc(#loc64)
  ^bb7(%37: !u32i loc("CWE190_Integer_Overflow__char_rand_multiply_15.c":67:22)):  // 2 preds: ^bb5, ^bb6
    cir.br ^bb8 loc(#loc64)
  ^bb8:  // pred: ^bb7
    %38 = cir.cast(integral, %37 : !u32i), !s32i loc(#loc64)
    %39 = cir.cast(integral, %38 : !s32i), !s8i loc(#loc64)
    cir.store %39, %1 : !s8i, !cir.ptr<!s8i> loc(#loc232)
    cir.br ^bb10 loc(#loc66)
  ^bb9:  // pred: ^bb2
    %40 = cir.get_global @".str" : !cir.ptr<!cir.array<!s8i x 21>> loc(#loc67)
    %41 = cir.cast(array_to_ptrdecay, %40 : !cir.ptr<!cir.array<!s8i x 21>>), !cir.ptr<!s8i> loc(#loc67)
    cir.call @printLine(%41) : (!cir.ptr<!s8i>) -> () loc(#loc68)
    cir.br ^bb10 loc(#loc69)
  ^bb10:  // 2 preds: ^bb8, ^bb9
    cir.br ^bb11 loc(#loc61)
  ^bb11:  // pred: ^bb10
    cir.br ^bb12 loc(#loc233)
  ^bb12:  // pred: ^bb11
    %42 = cir.const #cir.int<8> : !s32i loc(#loc72)
    cir.br ^bb13 loc(#loc70)
  ^bb13:  // pred: ^bb12
    cir.switch.flat %42 : !s32i, ^bb16 [
      7: ^bb15
    ] loc(#loc70)
  ^bb14:  // no predecessors
    cir.br ^bb15 loc(#loc73)
  ^bb15:  // 2 preds: ^bb13, ^bb14
    %43 = cir.get_global @".str" : !cir.ptr<!cir.array<!s8i x 21>> loc(#loc74)
    %44 = cir.cast(array_to_ptrdecay, %43 : !cir.ptr<!cir.array<!s8i x 21>>), !cir.ptr<!s8i> loc(#loc74)
    cir.call @printLine(%44) : (!cir.ptr<!s8i>) -> () loc(#loc75)
    cir.br ^bb26 loc(#loc76)
  ^bb16:  // pred: ^bb13
    cir.br ^bb17 loc(#loc234)
  ^bb17:  // pred: ^bb16
    %45 = cir.load %1 : !cir.ptr<!s8i>, !s8i loc(#loc79)
    %46 = cir.cast(integral, %45 : !s8i), !s32i loc(#loc79)
    %47 = cir.const #cir.int<0> : !s32i loc(#loc80)
    %48 = cir.cmp(gt, %46, %47) : !s32i, !cir.bool loc(#loc235)
    cir.brcond %48 ^bb18, ^bb24 loc(#loc236)
  ^bb18:  // pred: ^bb17
    cir.br ^bb19 loc(#loc237)
  ^bb19:  // pred: ^bb18
    %49 = cir.load %1 : !cir.ptr<!s8i>, !s8i loc(#loc84)
    %50 = cir.cast(integral, %49 : !s8i), !s32i loc(#loc84)
    %51 = cir.const #cir.int<127> : !s32i loc(#loc85)
    %52 = cir.const #cir.int<2> : !s32i loc(#loc86)
    %53 = cir.binop(div, %51, %52) : !s32i loc(#loc238)
    %54 = cir.cmp(lt, %50, %53) : !s32i, !cir.bool loc(#loc239)
    cir.brcond %54 ^bb20, ^bb21 loc(#loc240)
  ^bb20:  // pred: ^bb19
    %55 = cir.load %1 : !cir.ptr<!s8i>, !s8i loc(#loc91)
    %56 = cir.cast(integral, %55 : !s8i), !s32i loc(#loc91)
    %57 = cir.const #cir.int<2> : !s32i loc(#loc55)
    %58 = cir.binop(mul, %56, %57) nsw : !s32i loc(#loc91)
    %59 = cir.cast(integral, %58 : !s32i), !s8i loc(#loc91)
    cir.store %59, %0 : !s8i, !cir.ptr<!s8i> loc(#loc228)
    %60 = cir.load %0 : !cir.ptr<!s8i>, !s8i loc(#loc92)
    cir.call @printHexCharLine(%60) : (!s8i) -> () loc(#loc93)
    cir.br ^bb22 loc(#loc89)
  ^bb21:  // pred: ^bb19
    %61 = cir.get_global @".str.1" : !cir.ptr<!cir.array<!s8i x 54>> loc(#loc51)
    %62 = cir.cast(array_to_ptrdecay, %61 : !cir.ptr<!cir.array<!s8i x 54>>), !cir.ptr<!s8i> loc(#loc51)
    cir.call @printLine(%62) : (!cir.ptr<!s8i>) -> () loc(#loc94)
    cir.br ^bb22 loc(#loc83)
  ^bb22:  // 2 preds: ^bb20, ^bb21
    cir.br ^bb23 loc(#loc83)
  ^bb23:  // pred: ^bb22
    cir.br ^bb24 loc(#loc78)
  ^bb24:  // 2 preds: ^bb17, ^bb23
    cir.br ^bb25 loc(#loc78)
  ^bb25:  // pred: ^bb24
    cir.br ^bb26 loc(#loc95)
  ^bb26:  // 2 preds: ^bb15, ^bb25
    cir.br ^bb27 loc(#loc71)
  ^bb27:  // pred: ^bb26
    cir.return loc(#loc53)
  } loc(#loc227)
  cir.func no_proto internal private @goodB2G2() extra(#fn_attr1) {
    %0 = cir.alloca !s8i, !cir.ptr<!s8i>, ["result", init] {alignment = 1 : i64} loc(#loc242)
    %1 = cir.alloca !s8i, !cir.ptr<!s8i>, ["data"] {alignment = 1 : i64} loc(#loc243)
    %2 = cir.const #cir.int<32> : !s32i loc(#loc102)
    %3 = cir.cast(integral, %2 : !s32i), !s8i loc(#loc102)
    cir.store %3, %1 : !s8i, !cir.ptr<!s8i> loc(#loc244)
    cir.br ^bb1 loc(#loc245)
  ^bb1:  // pred: ^bb0
    %4 = cir.const #cir.int<6> : !s32i loc(#loc106)
    cir.br ^bb2 loc(#loc104)
  ^bb2:  // pred: ^bb1
    cir.switch.flat %4 : !s32i, ^bb9 [
      6: ^bb4
    ] loc(#loc104)
  ^bb3:  // no predecessors
    cir.br ^bb4 loc(#loc107)
  ^bb4:  // 2 preds: ^bb2, ^bb3
    %5 = cir.call @rand() : () -> !s32i extra(#fn_attr) loc(#loc108)
    %6 = cir.const #cir.int<1> : !s32i loc(#loc108)
    %7 = cir.binop(and, %5, %6) : !s32i loc(#loc108)
    %8 = cir.cast(int_to_bool, %7 : !s32i), !cir.bool loc(#loc108)
    cir.brcond %8 ^bb5, ^bb6 loc(#loc108)
  ^bb5:  // pred: ^bb4
    %9 = cir.call @rand() : () -> !s32i extra(#fn_attr) loc(#loc108)
    %10 = cir.cast(integral, %9 : !s32i), !u32i loc(#loc108)
    %11 = cir.const #cir.int<30> : !s32i loc(#loc108)
    %12 = cir.shift(left, %10 : !u32i, %11 : !s32i) -> !u32i loc(#loc108)
    %13 = cir.call @rand() : () -> !s32i extra(#fn_attr) loc(#loc108)
    %14 = cir.cast(integral, %13 : !s32i), !u32i loc(#loc108)
    %15 = cir.const #cir.int<15> : !s32i loc(#loc108)
    %16 = cir.shift(left, %14 : !u32i, %15 : !s32i) -> !u32i loc(#loc108)
    %17 = cir.binop(xor, %12, %16) : !u32i loc(#loc108)
    %18 = cir.call @rand() : () -> !s32i extra(#fn_attr) loc(#loc108)
    %19 = cir.cast(integral, %18 : !s32i), !u32i loc(#loc108)
    %20 = cir.binop(xor, %17, %19) : !u32i loc(#loc108)
    cir.br ^bb7(%20 : !u32i) loc(#loc108)
  ^bb6:  // pred: ^bb4
    %21 = cir.call @rand() : () -> !s32i extra(#fn_attr) loc(#loc108)
    %22 = cir.cast(integral, %21 : !s32i), !u32i loc(#loc108)
    %23 = cir.const #cir.int<30> : !s32i loc(#loc108)
    %24 = cir.shift(left, %22 : !u32i, %23 : !s32i) -> !u32i loc(#loc108)
    %25 = cir.call @rand() : () -> !s32i extra(#fn_attr) loc(#loc108)
    %26 = cir.cast(integral, %25 : !s32i), !u32i loc(#loc108)
    %27 = cir.const #cir.int<15> : !s32i loc(#loc108)
    %28 = cir.shift(left, %26 : !u32i, %27 : !s32i) -> !u32i loc(#loc108)
    %29 = cir.binop(xor, %24, %28) : !u32i loc(#loc108)
    %30 = cir.call @rand() : () -> !s32i extra(#fn_attr) loc(#loc108)
    %31 = cir.cast(integral, %30 : !s32i), !u32i loc(#loc108)
    %32 = cir.binop(xor, %29, %31) : !u32i loc(#loc108)
    %33 = cir.unary(minus, %32) : !u32i, !u32i loc(#loc108)
    %34 = cir.const #cir.int<1> : !s32i loc(#loc108)
    %35 = cir.cast(integral, %34 : !s32i), !u32i loc(#loc108)
    %36 = cir.binop(sub, %33, %35) : !u32i loc(#loc108)
    cir.br ^bb7(%36 : !u32i) loc(#loc108)
  ^bb7(%37: !u32i loc("CWE190_Integer_Overflow__char_rand_multiply_15.c":107:22)):  // 2 preds: ^bb5, ^bb6
    cir.br ^bb8 loc(#loc108)
  ^bb8:  // pred: ^bb7
    %38 = cir.cast(integral, %37 : !u32i), !s32i loc(#loc108)
    %39 = cir.cast(integral, %38 : !s32i), !s8i loc(#loc108)
    cir.store %39, %1 : !s8i, !cir.ptr<!s8i> loc(#loc246)
    cir.br ^bb10 loc(#loc110)
  ^bb9:  // pred: ^bb2
    %40 = cir.get_global @".str" : !cir.ptr<!cir.array<!s8i x 21>> loc(#loc111)
    %41 = cir.cast(array_to_ptrdecay, %40 : !cir.ptr<!cir.array<!s8i x 21>>), !cir.ptr<!s8i> loc(#loc111)
    cir.call @printLine(%41) : (!cir.ptr<!s8i>) -> () loc(#loc112)
    cir.br ^bb10 loc(#loc113)
  ^bb10:  // 2 preds: ^bb8, ^bb9
    cir.br ^bb11 loc(#loc105)
  ^bb11:  // pred: ^bb10
    cir.br ^bb12 loc(#loc247)
  ^bb12:  // pred: ^bb11
    %42 = cir.const #cir.int<7> : !s32i loc(#loc116)
    cir.br ^bb13 loc(#loc114)
  ^bb13:  // pred: ^bb12
    cir.switch.flat %42 : !s32i, ^bb25 [
      7: ^bb15
    ] loc(#loc114)
  ^bb14:  // no predecessors
    cir.br ^bb15 loc(#loc117)
  ^bb15:  // 2 preds: ^bb13, ^bb14
    cir.br ^bb16 loc(#loc248)
  ^bb16:  // pred: ^bb15
    %43 = cir.load %1 : !cir.ptr<!s8i>, !s8i loc(#loc120)
    %44 = cir.cast(integral, %43 : !s8i), !s32i loc(#loc120)
    %45 = cir.const #cir.int<0> : !s32i loc(#loc121)
    %46 = cir.cmp(gt, %44, %45) : !s32i, !cir.bool loc(#loc249)
    cir.brcond %46 ^bb17, ^bb23 loc(#loc250)
  ^bb17:  // pred: ^bb16
    cir.br ^bb18 loc(#loc251)
  ^bb18:  // pred: ^bb17
    %47 = cir.load %1 : !cir.ptr<!s8i>, !s8i loc(#loc125)
    %48 = cir.cast(integral, %47 : !s8i), !s32i loc(#loc125)
    %49 = cir.const #cir.int<127> : !s32i loc(#loc126)
    %50 = cir.const #cir.int<2> : !s32i loc(#loc127)
    %51 = cir.binop(div, %49, %50) : !s32i loc(#loc252)
    %52 = cir.cmp(lt, %48, %51) : !s32i, !cir.bool loc(#loc253)
    cir.brcond %52 ^bb19, ^bb20 loc(#loc254)
  ^bb19:  // pred: ^bb18
    %53 = cir.load %1 : !cir.ptr<!s8i>, !s8i loc(#loc132)
    %54 = cir.cast(integral, %53 : !s8i), !s32i loc(#loc132)
    %55 = cir.const #cir.int<2> : !s32i loc(#loc99)
    %56 = cir.binop(mul, %54, %55) nsw : !s32i loc(#loc132)
    %57 = cir.cast(integral, %56 : !s32i), !s8i loc(#loc132)
    cir.store %57, %0 : !s8i, !cir.ptr<!s8i> loc(#loc242)
    %58 = cir.load %0 : !cir.ptr<!s8i>, !s8i loc(#loc133)
    cir.call @printHexCharLine(%58) : (!s8i) -> () loc(#loc134)
    cir.br ^bb21 loc(#loc130)
  ^bb20:  // pred: ^bb18
    %59 = cir.get_global @".str.1" : !cir.ptr<!cir.array<!s8i x 54>> loc(#loc135)
    %60 = cir.cast(array_to_ptrdecay, %59 : !cir.ptr<!cir.array<!s8i x 54>>), !cir.ptr<!s8i> loc(#loc135)
    cir.call @printLine(%60) : (!cir.ptr<!s8i>) -> () loc(#loc136)
    cir.br ^bb21 loc(#loc124)
  ^bb21:  // 2 preds: ^bb19, ^bb20
    cir.br ^bb22 loc(#loc124)
  ^bb22:  // pred: ^bb21
    cir.br ^bb23 loc(#loc119)
  ^bb23:  // 2 preds: ^bb16, ^bb22
    cir.br ^bb24 loc(#loc119)
  ^bb24:  // pred: ^bb23
    cir.br ^bb26 loc(#loc137)
  ^bb25:  // pred: ^bb13
    %61 = cir.get_global @".str" : !cir.ptr<!cir.array<!s8i x 21>> loc(#loc138)
    %62 = cir.cast(array_to_ptrdecay, %61 : !cir.ptr<!cir.array<!s8i x 21>>), !cir.ptr<!s8i> loc(#loc138)
    cir.call @printLine(%62) : (!cir.ptr<!s8i>) -> () loc(#loc139)
    cir.br ^bb26 loc(#loc140)
  ^bb26:  // 2 preds: ^bb24, ^bb25
    cir.br ^bb27 loc(#loc115)
  ^bb27:  // pred: ^bb26
    cir.return loc(#loc97)
  } loc(#loc241)
  cir.func no_proto internal private @goodG2B1() extra(#fn_attr1) {
    %0 = cir.alloca !s8i, !cir.ptr<!s8i>, ["result", init] {alignment = 1 : i64} loc(#loc256)
    %1 = cir.alloca !s8i, !cir.ptr<!s8i>, ["data"] {alignment = 1 : i64} loc(#loc257)
    %2 = cir.const #cir.int<32> : !s32i loc(#loc147)
    %3 = cir.cast(integral, %2 : !s32i), !s8i loc(#loc147)
    cir.store %3, %1 : !s8i, !cir.ptr<!s8i> loc(#loc258)
    cir.br ^bb1 loc(#loc259)
  ^bb1:  // pred: ^bb0
    %4 = cir.const #cir.int<5> : !s32i loc(#loc151)
    cir.br ^bb2 loc(#loc149)
  ^bb2:  // pred: ^bb1
    cir.switch.flat %4 : !s32i, ^bb5 [
      6: ^bb4
    ] loc(#loc149)
  ^bb3:  // no predecessors
    cir.br ^bb4 loc(#loc152)
  ^bb4:  // 2 preds: ^bb2, ^bb3
    %5 = cir.get_global @".str" : !cir.ptr<!cir.array<!s8i x 21>> loc(#loc153)
    %6 = cir.cast(array_to_ptrdecay, %5 : !cir.ptr<!cir.array<!s8i x 21>>), !cir.ptr<!s8i> loc(#loc153)
    cir.call @printLine(%6) : (!cir.ptr<!s8i>) -> () loc(#loc154)
    cir.br ^bb6 loc(#loc155)
  ^bb5:  // pred: ^bb2
    %7 = cir.const #cir.int<2> : !s32i loc(#loc156)
    %8 = cir.cast(integral, %7 : !s32i), !s8i loc(#loc156)
    cir.store %8, %1 : !s8i, !cir.ptr<!s8i> loc(#loc260)
    cir.br ^bb6 loc(#loc158)
  ^bb6:  // 2 preds: ^bb4, ^bb5
    cir.br ^bb7 loc(#loc150)
  ^bb7:  // pred: ^bb6
    cir.br ^bb8 loc(#loc261)
  ^bb8:  // pred: ^bb7
    %9 = cir.const #cir.int<7> : !s32i loc(#loc161)
    cir.br ^bb9 loc(#loc159)
  ^bb9:  // pred: ^bb8
    cir.switch.flat %9 : !s32i, ^bb16 [
      7: ^bb11
    ] loc(#loc159)
  ^bb10:  // no predecessors
    cir.br ^bb11 loc(#loc162)
  ^bb11:  // 2 preds: ^bb9, ^bb10
    cir.br ^bb12 loc(#loc262)
  ^bb12:  // pred: ^bb11
    %10 = cir.load %1 : !cir.ptr<!s8i>, !s8i loc(#loc165)
    %11 = cir.cast(integral, %10 : !s8i), !s32i loc(#loc165)
    %12 = cir.const #cir.int<0> : !s32i loc(#loc166)
    %13 = cir.cmp(gt, %11, %12) : !s32i, !cir.bool loc(#loc263)
    cir.brcond %13 ^bb13, ^bb14 loc(#loc264)
  ^bb13:  // pred: ^bb12
    %14 = cir.load %1 : !cir.ptr<!s8i>, !s8i loc(#loc168)
    %15 = cir.cast(integral, %14 : !s8i), !s32i loc(#loc168)
    %16 = cir.const #cir.int<2> : !s32i loc(#loc144)
    %17 = cir.binop(mul, %15, %16) nsw : !s32i loc(#loc168)
    %18 = cir.cast(integral, %17 : !s32i), !s8i loc(#loc168)
    cir.store %18, %0 : !s8i, !cir.ptr<!s8i> loc(#loc256)
    %19 = cir.load %0 : !cir.ptr<!s8i>, !s8i loc(#loc169)
    cir.call @printHexCharLine(%19) : (!s8i) -> () loc(#loc170)
    cir.br ^bb14 loc(#loc164)
  ^bb14:  // 2 preds: ^bb12, ^bb13
    cir.br ^bb15 loc(#loc164)
  ^bb15:  // pred: ^bb14
    cir.br ^bb17 loc(#loc171)
  ^bb16:  // pred: ^bb9
    %20 = cir.get_global @".str" : !cir.ptr<!cir.array<!s8i x 21>> loc(#loc172)
    %21 = cir.cast(array_to_ptrdecay, %20 : !cir.ptr<!cir.array<!s8i x 21>>), !cir.ptr<!s8i> loc(#loc172)
    cir.call @printLine(%21) : (!cir.ptr<!s8i>) -> () loc(#loc173)
    cir.br ^bb17 loc(#loc174)
  ^bb17:  // 2 preds: ^bb15, ^bb16
    cir.br ^bb18 loc(#loc160)
  ^bb18:  // pred: ^bb17
    cir.return loc(#loc142)
  } loc(#loc255)
  cir.func no_proto internal private @goodG2B2() extra(#fn_attr1) {
    %0 = cir.alloca !s8i, !cir.ptr<!s8i>, ["result", init] {alignment = 1 : i64} loc(#loc266)
    %1 = cir.alloca !s8i, !cir.ptr<!s8i>, ["data"] {alignment = 1 : i64} loc(#loc267)
    %2 = cir.const #cir.int<32> : !s32i loc(#loc181)
    %3 = cir.cast(integral, %2 : !s32i), !s8i loc(#loc181)
    cir.store %3, %1 : !s8i, !cir.ptr<!s8i> loc(#loc268)
    cir.br ^bb1 loc(#loc269)
  ^bb1:  // pred: ^bb0
    %4 = cir.const #cir.int<6> : !s32i loc(#loc185)
    cir.br ^bb2 loc(#loc183)
  ^bb2:  // pred: ^bb1
    cir.switch.flat %4 : !s32i, ^bb5 [
      6: ^bb4
    ] loc(#loc183)
  ^bb3:  // no predecessors
    cir.br ^bb4 loc(#loc186)
  ^bb4:  // 2 preds: ^bb2, ^bb3
    %5 = cir.const #cir.int<2> : !s32i loc(#loc187)
    %6 = cir.cast(integral, %5 : !s32i), !s8i loc(#loc187)
    cir.store %6, %1 : !s8i, !cir.ptr<!s8i> loc(#loc270)
    cir.br ^bb6 loc(#loc189)
  ^bb5:  // pred: ^bb2
    %7 = cir.get_global @".str" : !cir.ptr<!cir.array<!s8i x 21>> loc(#loc190)
    %8 = cir.cast(array_to_ptrdecay, %7 : !cir.ptr<!cir.array<!s8i x 21>>), !cir.ptr<!s8i> loc(#loc190)
    cir.call @printLine(%8) : (!cir.ptr<!s8i>) -> () loc(#loc191)
    cir.br ^bb6 loc(#loc192)
  ^bb6:  // 2 preds: ^bb4, ^bb5
    cir.br ^bb7 loc(#loc184)
  ^bb7:  // pred: ^bb6
    cir.br ^bb8 loc(#loc271)
  ^bb8:  // pred: ^bb7
    %9 = cir.const #cir.int<7> : !s32i loc(#loc195)
    cir.br ^bb9 loc(#loc193)
  ^bb9:  // pred: ^bb8
    cir.switch.flat %9 : !s32i, ^bb16 [
      7: ^bb11
    ] loc(#loc193)
  ^bb10:  // no predecessors
    cir.br ^bb11 loc(#loc196)
  ^bb11:  // 2 preds: ^bb9, ^bb10
    cir.br ^bb12 loc(#loc272)
  ^bb12:  // pred: ^bb11
    %10 = cir.load %1 : !cir.ptr<!s8i>, !s8i loc(#loc199)
    %11 = cir.cast(integral, %10 : !s8i), !s32i loc(#loc199)
    %12 = cir.const #cir.int<0> : !s32i loc(#loc200)
    %13 = cir.cmp(gt, %11, %12) : !s32i, !cir.bool loc(#loc273)
    cir.brcond %13 ^bb13, ^bb14 loc(#loc274)
  ^bb13:  // pred: ^bb12
    %14 = cir.load %1 : !cir.ptr<!s8i>, !s8i loc(#loc202)
    %15 = cir.cast(integral, %14 : !s8i), !s32i loc(#loc202)
    %16 = cir.const #cir.int<2> : !s32i loc(#loc178)
    %17 = cir.binop(mul, %15, %16) nsw : !s32i loc(#loc202)
    %18 = cir.cast(integral, %17 : !s32i), !s8i loc(#loc202)
    cir.store %18, %0 : !s8i, !cir.ptr<!s8i> loc(#loc266)
    %19 = cir.load %0 : !cir.ptr<!s8i>, !s8i loc(#loc203)
    cir.call @printHexCharLine(%19) : (!s8i) -> () loc(#loc204)
    cir.br ^bb14 loc(#loc198)
  ^bb14:  // 2 preds: ^bb12, ^bb13
    cir.br ^bb15 loc(#loc198)
  ^bb15:  // pred: ^bb14
    cir.br ^bb17 loc(#loc205)
  ^bb16:  // pred: ^bb9
    %20 = cir.get_global @".str" : !cir.ptr<!cir.array<!s8i x 21>> loc(#loc206)
    %21 = cir.cast(array_to_ptrdecay, %20 : !cir.ptr<!cir.array<!s8i x 21>>), !cir.ptr<!s8i> loc(#loc206)
    cir.call @printLine(%21) : (!cir.ptr<!s8i>) -> () loc(#loc207)
    cir.br ^bb17 loc(#loc208)
  ^bb17:  // 2 preds: ^bb15, ^bb16
    cir.br ^bb18 loc(#loc194)
  ^bb18:  // pred: ^bb17
    cir.return loc(#loc176)
  } loc(#loc265)
} loc(#loc)
#loc = loc("/home/ladisgin/git_proj/juliet-c/testcases/CWE190_Integer_Overflow/s01/CWE190_Integer_Overflow__char_rand_multiply_15.c":0:0)
#loc1 = loc("/usr/include/stdlib.h":573:1)
#loc2 = loc("/usr/include/stdlib.h":573:24)
#loc3 = loc("../../../testcasesupport/std_testcase_io.h":14:1)
#loc4 = loc("../../../testcasesupport/std_testcase_io.h":14:33)
#loc5 = loc("CWE190_Integer_Overflow__char_rand_multiply_15.c":34:19)
#loc6 = loc("../../../testcasesupport/std_testcase_io.h":30:1)
#loc7 = loc("../../../testcasesupport/std_testcase_io.h":30:35)
#loc8 = loc("CWE190_Integer_Overflow__char_rand_multiply_15.c":22:1)
#loc9 = loc("CWE190_Integer_Overflow__char_rand_multiply_15.c":52:1)
#loc10 = loc("CWE190_Integer_Overflow__char_rand_multiply_15.c":43:13)
#loc11 = loc("CWE190_Integer_Overflow__char_rand_multiply_15.c":43:34)
#loc12 = loc("CWE190_Integer_Overflow__char_rand_multiply_15.c":24:5)
#loc13 = loc("CWE190_Integer_Overflow__char_rand_multiply_15.c":24:10)
#loc14 = loc("CWE190_Integer_Overflow__char_rand_multiply_15.c":25:12)
#loc15 = loc("CWE190_Integer_Overflow__char_rand_multiply_15.c":25:5)
#loc16 = loc("CWE190_Integer_Overflow__char_rand_multiply_15.c":26:5)
#loc17 = loc("CWE190_Integer_Overflow__char_rand_multiply_15.c":36:5)
#loc18 = loc("CWE190_Integer_Overflow__char_rand_multiply_15.c":26:12)
#loc19 = loc("CWE190_Integer_Overflow__char_rand_multiply_15.c":28:5)
#loc21 = loc("CWE190_Integer_Overflow__char_rand_multiply_15.c":30:9)
#loc22 = loc("CWE190_Integer_Overflow__char_rand_multiply_15.c":31:9)
#loc23 = loc("CWE190_Integer_Overflow__char_rand_multiply_15.c":34:9)
#loc24 = loc("CWE190_Integer_Overflow__char_rand_multiply_15.c":35:9)
#loc25 = loc("CWE190_Integer_Overflow__char_rand_multiply_15.c":37:5)
#loc26 = loc("CWE190_Integer_Overflow__char_rand_multiply_15.c":51:5)
#loc27 = loc("CWE190_Integer_Overflow__char_rand_multiply_15.c":37:12)
#loc28 = loc("CWE190_Integer_Overflow__char_rand_multiply_15.c":39:5)
#loc29 = loc("CWE190_Integer_Overflow__char_rand_multiply_15.c":40:9)
#loc30 = loc("CWE190_Integer_Overflow__char_rand_multiply_15.c":45:9)
#loc31 = loc("CWE190_Integer_Overflow__char_rand_multiply_15.c":40:12)
#loc32 = loc("CWE190_Integer_Overflow__char_rand_multiply_15.c":40:19)
#loc33 = loc("CWE190_Integer_Overflow__char_rand_multiply_15.c":41:9)
#loc34 = loc("CWE190_Integer_Overflow__char_rand_multiply_15.c":43:27)
#loc35 = loc("CWE190_Integer_Overflow__char_rand_multiply_15.c":44:30)
#loc36 = loc("CWE190_Integer_Overflow__char_rand_multiply_15.c":44:13)
#loc37 = loc("CWE190_Integer_Overflow__char_rand_multiply_15.c":46:9)
#loc38 = loc("CWE190_Integer_Overflow__char_rand_multiply_15.c":49:19)
#loc39 = loc("CWE190_Integer_Overflow__char_rand_multiply_15.c":49:9)
#loc40 = loc("CWE190_Integer_Overflow__char_rand_multiply_15.c":50:9)
#loc41 = loc("CWE190_Integer_Overflow__char_rand_multiply_15.c":204:1)
#loc42 = loc("CWE190_Integer_Overflow__char_rand_multiply_15.c":210:1)
#loc43 = loc("CWE190_Integer_Overflow__char_rand_multiply_15.c":206:5)
#loc44 = loc("CWE190_Integer_Overflow__char_rand_multiply_15.c":206:14)
#loc45 = loc("CWE190_Integer_Overflow__char_rand_multiply_15.c":207:5)
#loc46 = loc("CWE190_Integer_Overflow__char_rand_multiply_15.c":207:14)
#loc47 = loc("CWE190_Integer_Overflow__char_rand_multiply_15.c":208:5)
#loc48 = loc("CWE190_Integer_Overflow__char_rand_multiply_15.c":208:14)
#loc49 = loc("CWE190_Integer_Overflow__char_rand_multiply_15.c":209:5)
#loc50 = loc("CWE190_Integer_Overflow__char_rand_multiply_15.c":209:14)
#loc51 = loc("CWE190_Integer_Overflow__char_rand_multiply_15.c":91:27)
#loc52 = loc("CWE190_Integer_Overflow__char_rand_multiply_15.c":59:1)
#loc53 = loc("CWE190_Integer_Overflow__char_rand_multiply_15.c":96:1)
#loc54 = loc("CWE190_Integer_Overflow__char_rand_multiply_15.c":86:17)
#loc55 = loc("CWE190_Integer_Overflow__char_rand_multiply_15.c":86:38)
#loc56 = loc("CWE190_Integer_Overflow__char_rand_multiply_15.c":61:5)
#loc57 = loc("CWE190_Integer_Overflow__char_rand_multiply_15.c":61:10)
#loc58 = loc("CWE190_Integer_Overflow__char_rand_multiply_15.c":62:12)
#loc59 = loc("CWE190_Integer_Overflow__char_rand_multiply_15.c":62:5)
#loc60 = loc("CWE190_Integer_Overflow__char_rand_multiply_15.c":63:5)
#loc61 = loc("CWE190_Integer_Overflow__char_rand_multiply_15.c":73:5)
#loc62 = loc("CWE190_Integer_Overflow__char_rand_multiply_15.c":63:12)
#loc63 = loc("CWE190_Integer_Overflow__char_rand_multiply_15.c":65:5)
#loc65 = loc("CWE190_Integer_Overflow__char_rand_multiply_15.c":67:9)
#loc66 = loc("CWE190_Integer_Overflow__char_rand_multiply_15.c":68:9)
#loc67 = loc("CWE190_Integer_Overflow__char_rand_multiply_15.c":71:19)
#loc68 = loc("CWE190_Integer_Overflow__char_rand_multiply_15.c":71:9)
#loc69 = loc("CWE190_Integer_Overflow__char_rand_multiply_15.c":72:9)
#loc70 = loc("CWE190_Integer_Overflow__char_rand_multiply_15.c":74:5)
#loc71 = loc("CWE190_Integer_Overflow__char_rand_multiply_15.c":95:5)
#loc72 = loc("CWE190_Integer_Overflow__char_rand_multiply_15.c":74:12)
#loc73 = loc("CWE190_Integer_Overflow__char_rand_multiply_15.c":76:5)
#loc74 = loc("CWE190_Integer_Overflow__char_rand_multiply_15.c":78:19)
#loc75 = loc("CWE190_Integer_Overflow__char_rand_multiply_15.c":78:9)
#loc76 = loc("CWE190_Integer_Overflow__char_rand_multiply_15.c":79:9)
#loc77 = loc("CWE190_Integer_Overflow__char_rand_multiply_15.c":81:9)
#loc78 = loc("CWE190_Integer_Overflow__char_rand_multiply_15.c":93:9)
#loc79 = loc("CWE190_Integer_Overflow__char_rand_multiply_15.c":81:12)
#loc80 = loc("CWE190_Integer_Overflow__char_rand_multiply_15.c":81:19)
#loc81 = loc("CWE190_Integer_Overflow__char_rand_multiply_15.c":82:9)
#loc82 = loc("CWE190_Integer_Overflow__char_rand_multiply_15.c":84:13)
#loc83 = loc("CWE190_Integer_Overflow__char_rand_multiply_15.c":92:13)
#loc84 = loc("CWE190_Integer_Overflow__char_rand_multiply_15.c":84:17)
#loc85 = loc("CWE190_Integer_Overflow__char_rand_multiply_15.c":84:25)
#loc86 = loc("CWE190_Integer_Overflow__char_rand_multiply_15.c":84:34)
#loc87 = loc("CWE190_Integer_Overflow__char_rand_multiply_15.c":84:35)
#loc88 = loc("CWE190_Integer_Overflow__char_rand_multiply_15.c":85:13)
#loc89 = loc("CWE190_Integer_Overflow__char_rand_multiply_15.c":88:13)
#loc90 = loc("CWE190_Integer_Overflow__char_rand_multiply_15.c":90:13)
#loc91 = loc("CWE190_Integer_Overflow__char_rand_multiply_15.c":86:31)
#loc92 = loc("CWE190_Integer_Overflow__char_rand_multiply_15.c":87:34)
#loc93 = loc("CWE190_Integer_Overflow__char_rand_multiply_15.c":87:17)
#loc94 = loc("CWE190_Integer_Overflow__char_rand_multiply_15.c":91:17)
#loc95 = loc("CWE190_Integer_Overflow__char_rand_multiply_15.c":94:9)
#loc96 = loc("CWE190_Integer_Overflow__char_rand_multiply_15.c":99:1)
#loc97 = loc("CWE190_Integer_Overflow__char_rand_multiply_15.c":136:1)
#loc98 = loc("CWE190_Integer_Overflow__char_rand_multiply_15.c":122:17)
#loc99 = loc("CWE190_Integer_Overflow__char_rand_multiply_15.c":122:38)
#loc100 = loc("CWE190_Integer_Overflow__char_rand_multiply_15.c":101:5)
#loc101 = loc("CWE190_Integer_Overflow__char_rand_multiply_15.c":101:10)
#loc102 = loc("CWE190_Integer_Overflow__char_rand_multiply_15.c":102:12)
#loc103 = loc("CWE190_Integer_Overflow__char_rand_multiply_15.c":102:5)
#loc104 = loc("CWE190_Integer_Overflow__char_rand_multiply_15.c":103:5)
#loc105 = loc("CWE190_Integer_Overflow__char_rand_multiply_15.c":113:5)
#loc106 = loc("CWE190_Integer_Overflow__char_rand_multiply_15.c":103:12)
#loc107 = loc("CWE190_Integer_Overflow__char_rand_multiply_15.c":105:5)
#loc109 = loc("CWE190_Integer_Overflow__char_rand_multiply_15.c":107:9)
#loc110 = loc("CWE190_Integer_Overflow__char_rand_multiply_15.c":108:9)
#loc111 = loc("CWE190_Integer_Overflow__char_rand_multiply_15.c":111:19)
#loc112 = loc("CWE190_Integer_Overflow__char_rand_multiply_15.c":111:9)
#loc113 = loc("CWE190_Integer_Overflow__char_rand_multiply_15.c":112:9)
#loc114 = loc("CWE190_Integer_Overflow__char_rand_multiply_15.c":114:5)
#loc115 = loc("CWE190_Integer_Overflow__char_rand_multiply_15.c":135:5)
#loc116 = loc("CWE190_Integer_Overflow__char_rand_multiply_15.c":114:12)
#loc117 = loc("CWE190_Integer_Overflow__char_rand_multiply_15.c":116:5)
#loc118 = loc("CWE190_Integer_Overflow__char_rand_multiply_15.c":117:9)
#loc119 = loc("CWE190_Integer_Overflow__char_rand_multiply_15.c":129:9)
#loc120 = loc("CWE190_Integer_Overflow__char_rand_multiply_15.c":117:12)
#loc121 = loc("CWE190_Integer_Overflow__char_rand_multiply_15.c":117:19)
#loc122 = loc("CWE190_Integer_Overflow__char_rand_multiply_15.c":118:9)
#loc123 = loc("CWE190_Integer_Overflow__char_rand_multiply_15.c":120:13)
#loc124 = loc("CWE190_Integer_Overflow__char_rand_multiply_15.c":128:13)
#loc125 = loc("CWE190_Integer_Overflow__char_rand_multiply_15.c":120:17)
#loc126 = loc("CWE190_Integer_Overflow__char_rand_multiply_15.c":120:25)
#loc127 = loc("CWE190_Integer_Overflow__char_rand_multiply_15.c":120:34)
#loc128 = loc("CWE190_Integer_Overflow__char_rand_multiply_15.c":120:35)
#loc129 = loc("CWE190_Integer_Overflow__char_rand_multiply_15.c":121:13)
#loc130 = loc("CWE190_Integer_Overflow__char_rand_multiply_15.c":124:13)
#loc131 = loc("CWE190_Integer_Overflow__char_rand_multiply_15.c":126:13)
#loc132 = loc("CWE190_Integer_Overflow__char_rand_multiply_15.c":122:31)
#loc133 = loc("CWE190_Integer_Overflow__char_rand_multiply_15.c":123:34)
#loc134 = loc("CWE190_Integer_Overflow__char_rand_multiply_15.c":123:17)
#loc135 = loc("CWE190_Integer_Overflow__char_rand_multiply_15.c":127:27)
#loc136 = loc("CWE190_Integer_Overflow__char_rand_multiply_15.c":127:17)
#loc137 = loc("CWE190_Integer_Overflow__char_rand_multiply_15.c":130:9)
#loc138 = loc("CWE190_Integer_Overflow__char_rand_multiply_15.c":133:19)
#loc139 = loc("CWE190_Integer_Overflow__char_rand_multiply_15.c":133:9)
#loc140 = loc("CWE190_Integer_Overflow__char_rand_multiply_15.c":134:9)
#loc141 = loc("CWE190_Integer_Overflow__char_rand_multiply_15.c":139:1)
#loc142 = loc("CWE190_Integer_Overflow__char_rand_multiply_15.c":169:1)
#loc143 = loc("CWE190_Integer_Overflow__char_rand_multiply_15.c":160:13)
#loc144 = loc("CWE190_Integer_Overflow__char_rand_multiply_15.c":160:34)
#loc145 = loc("CWE190_Integer_Overflow__char_rand_multiply_15.c":141:5)
#loc146 = loc("CWE190_Integer_Overflow__char_rand_multiply_15.c":141:10)
#loc147 = loc("CWE190_Integer_Overflow__char_rand_multiply_15.c":142:12)
#loc148 = loc("CWE190_Integer_Overflow__char_rand_multiply_15.c":142:5)
#loc149 = loc("CWE190_Integer_Overflow__char_rand_multiply_15.c":143:5)
#loc150 = loc("CWE190_Integer_Overflow__char_rand_multiply_15.c":153:5)
#loc151 = loc("CWE190_Integer_Overflow__char_rand_multiply_15.c":143:12)
#loc152 = loc("CWE190_Integer_Overflow__char_rand_multiply_15.c":145:5)
#loc153 = loc("CWE190_Integer_Overflow__char_rand_multiply_15.c":147:19)
#loc154 = loc("CWE190_Integer_Overflow__char_rand_multiply_15.c":147:9)
#loc155 = loc("CWE190_Integer_Overflow__char_rand_multiply_15.c":148:9)
#loc156 = loc("CWE190_Integer_Overflow__char_rand_multiply_15.c":151:16)
#loc157 = loc("CWE190_Integer_Overflow__char_rand_multiply_15.c":151:9)
#loc158 = loc("CWE190_Integer_Overflow__char_rand_multiply_15.c":152:9)
#loc159 = loc("CWE190_Integer_Overflow__char_rand_multiply_15.c":154:5)
#loc160 = loc("CWE190_Integer_Overflow__char_rand_multiply_15.c":168:5)
#loc161 = loc("CWE190_Integer_Overflow__char_rand_multiply_15.c":154:12)
#loc162 = loc("CWE190_Integer_Overflow__char_rand_multiply_15.c":156:5)
#loc163 = loc("CWE190_Integer_Overflow__char_rand_multiply_15.c":157:9)
#loc164 = loc("CWE190_Integer_Overflow__char_rand_multiply_15.c":162:9)
#loc165 = loc("CWE190_Integer_Overflow__char_rand_multiply_15.c":157:12)
#loc166 = loc("CWE190_Integer_Overflow__char_rand_multiply_15.c":157:19)
#loc167 = loc("CWE190_Integer_Overflow__char_rand_multiply_15.c":158:9)
#loc168 = loc("CWE190_Integer_Overflow__char_rand_multiply_15.c":160:27)
#loc169 = loc("CWE190_Integer_Overflow__char_rand_multiply_15.c":161:30)
#loc170 = loc("CWE190_Integer_Overflow__char_rand_multiply_15.c":161:13)
#loc171 = loc("CWE190_Integer_Overflow__char_rand_multiply_15.c":163:9)
#loc172 = loc("CWE190_Integer_Overflow__char_rand_multiply_15.c":166:19)
#loc173 = loc("CWE190_Integer_Overflow__char_rand_multiply_15.c":166:9)
#loc174 = loc("CWE190_Integer_Overflow__char_rand_multiply_15.c":167:9)
#loc175 = loc("CWE190_Integer_Overflow__char_rand_multiply_15.c":172:1)
#loc176 = loc("CWE190_Integer_Overflow__char_rand_multiply_15.c":202:1)
#loc177 = loc("CWE190_Integer_Overflow__char_rand_multiply_15.c":193:13)
#loc178 = loc("CWE190_Integer_Overflow__char_rand_multiply_15.c":193:34)
#loc179 = loc("CWE190_Integer_Overflow__char_rand_multiply_15.c":174:5)
#loc180 = loc("CWE190_Integer_Overflow__char_rand_multiply_15.c":174:10)
#loc181 = loc("CWE190_Integer_Overflow__char_rand_multiply_15.c":175:12)
#loc182 = loc("CWE190_Integer_Overflow__char_rand_multiply_15.c":175:5)
#loc183 = loc("CWE190_Integer_Overflow__char_rand_multiply_15.c":176:5)
#loc184 = loc("CWE190_Integer_Overflow__char_rand_multiply_15.c":186:5)
#loc185 = loc("CWE190_Integer_Overflow__char_rand_multiply_15.c":176:12)
#loc186 = loc("CWE190_Integer_Overflow__char_rand_multiply_15.c":178:5)
#loc187 = loc("CWE190_Integer_Overflow__char_rand_multiply_15.c":180:16)
#loc188 = loc("CWE190_Integer_Overflow__char_rand_multiply_15.c":180:9)
#loc189 = loc("CWE190_Integer_Overflow__char_rand_multiply_15.c":181:9)
#loc190 = loc("CWE190_Integer_Overflow__char_rand_multiply_15.c":184:19)
#loc191 = loc("CWE190_Integer_Overflow__char_rand_multiply_15.c":184:9)
#loc192 = loc("CWE190_Integer_Overflow__char_rand_multiply_15.c":185:9)
#loc193 = loc("CWE190_Integer_Overflow__char_rand_multiply_15.c":187:5)
#loc194 = loc("CWE190_Integer_Overflow__char_rand_multiply_15.c":201:5)
#loc195 = loc("CWE190_Integer_Overflow__char_rand_multiply_15.c":187:12)
#loc196 = loc("CWE190_Integer_Overflow__char_rand_multiply_15.c":189:5)
#loc197 = loc("CWE190_Integer_Overflow__char_rand_multiply_15.c":190:9)
#loc198 = loc("CWE190_Integer_Overflow__char_rand_multiply_15.c":195:9)
#loc199 = loc("CWE190_Integer_Overflow__char_rand_multiply_15.c":190:12)
#loc200 = loc("CWE190_Integer_Overflow__char_rand_multiply_15.c":190:19)
#loc201 = loc("CWE190_Integer_Overflow__char_rand_multiply_15.c":191:9)
#loc202 = loc("CWE190_Integer_Overflow__char_rand_multiply_15.c":193:27)
#loc203 = loc("CWE190_Integer_Overflow__char_rand_multiply_15.c":194:30)
#loc204 = loc("CWE190_Integer_Overflow__char_rand_multiply_15.c":194:13)
#loc205 = loc("CWE190_Integer_Overflow__char_rand_multiply_15.c":196:9)
#loc206 = loc("CWE190_Integer_Overflow__char_rand_multiply_15.c":199:19)
#loc207 = loc("CWE190_Integer_Overflow__char_rand_multiply_15.c":199:9)
#loc208 = loc("CWE190_Integer_Overflow__char_rand_multiply_15.c":200:9)
#loc209 = loc(fused[#loc1, #loc2])
#loc210 = loc(fused[#loc3, #loc4])
#loc211 = loc(fused[#loc6, #loc7])
#loc212 = loc(fused[#loc8, #loc9])
#loc213 = loc(fused[#loc10, #loc11])
#loc214 = loc(fused[#loc12, #loc13])
#loc215 = loc(fused[#loc15, #loc14])
#loc216 = loc(fused[#loc16, #loc17])
#loc217 = loc(fused[#loc21, #loc20])
#loc218 = loc(fused[#loc25, #loc26])
#loc219 = loc(fused[#loc29, #loc30])
#loc220 = loc(fused[#loc31, #loc32])
#loc221 = loc(fused[#loc33, #loc30])
#loc222 = loc(fused[#loc41, #loc42])
#loc223 = loc(fused[#loc43, #loc44])
#loc224 = loc(fused[#loc45, #loc46])
#loc225 = loc(fused[#loc47, #loc48])
#loc226 = loc(fused[#loc49, #loc50])
#loc227 = loc(fused[#loc52, #loc53])
#loc228 = loc(fused[#loc54, #loc55])
#loc229 = loc(fused[#loc56, #loc57])
#loc230 = loc(fused[#loc59, #loc58])
#loc231 = loc(fused[#loc60, #loc61])
#loc232 = loc(fused[#loc65, #loc64])
#loc233 = loc(fused[#loc70, #loc71])
#loc234 = loc(fused[#loc77, #loc78])
#loc235 = loc(fused[#loc79, #loc80])
#loc236 = loc(fused[#loc81, #loc78])
#loc237 = loc(fused[#loc82, #loc83])
#loc238 = loc(fused[#loc85, #loc86])
#loc239 = loc(fused[#loc84, #loc87])
#loc240 = loc(fused[#loc88, #loc89, #loc90, #loc83])
#loc241 = loc(fused[#loc96, #loc97])
#loc242 = loc(fused[#loc98, #loc99])
#loc243 = loc(fused[#loc100, #loc101])
#loc244 = loc(fused[#loc103, #loc102])
#loc245 = loc(fused[#loc104, #loc105])
#loc246 = loc(fused[#loc109, #loc108])
#loc247 = loc(fused[#loc114, #loc115])
#loc248 = loc(fused[#loc118, #loc119])
#loc249 = loc(fused[#loc120, #loc121])
#loc250 = loc(fused[#loc122, #loc119])
#loc251 = loc(fused[#loc123, #loc124])
#loc252 = loc(fused[#loc126, #loc127])
#loc253 = loc(fused[#loc125, #loc128])
#loc254 = loc(fused[#loc129, #loc130, #loc131, #loc124])
#loc255 = loc(fused[#loc141, #loc142])
#loc256 = loc(fused[#loc143, #loc144])
#loc257 = loc(fused[#loc145, #loc146])
#loc258 = loc(fused[#loc148, #loc147])
#loc259 = loc(fused[#loc149, #loc150])
#loc260 = loc(fused[#loc157, #loc156])
#loc261 = loc(fused[#loc159, #loc160])
#loc262 = loc(fused[#loc163, #loc164])
#loc263 = loc(fused[#loc165, #loc166])
#loc264 = loc(fused[#loc167, #loc164])
#loc265 = loc(fused[#loc175, #loc176])
#loc266 = loc(fused[#loc177, #loc178])
#loc267 = loc(fused[#loc179, #loc180])
#loc268 = loc(fused[#loc182, #loc181])
#loc269 = loc(fused[#loc183, #loc184])
#loc270 = loc(fused[#loc188, #loc187])
#loc271 = loc(fused[#loc193, #loc194])
#loc272 = loc(fused[#loc197, #loc198])
#loc273 = loc(fused[#loc199, #loc200])
#loc274 = loc(fused[#loc201, #loc198])
