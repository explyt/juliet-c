!s32i = !cir.int<s, 32>
!s64i = !cir.int<s, 64>
!s8i = !cir.int<s, 8>
!u16i = !cir.int<u, 16>
!u32i = !cir.int<u, 32>
!u64i = !cir.int<u, 64>
!u8i = !cir.int<u, 8>
!void = !cir.void
#false = #cir.bool<false> : !cir.bool
#fn_attr = #cir<extra({nothrow = #cir.nothrow})>
#fn_attr1 = #cir<extra({inline = #cir.inline<no>, nothrow = #cir.nothrow, optnone = #cir.optnone, uwtable = #cir.uwtable<async>})>
#true = #cir.bool<true> : !cir.bool
!ty_in_addr = !cir.record<struct "in_addr" {!u32i} #cir.record.decl.ast>
!ty_sockaddr = !cir.record<struct "sockaddr" {!u16i, !cir.array<!s8i x 14>} #cir.record.decl.ast>
!ty_sockaddr_in = !cir.record<struct "sockaddr_in" {!u16i, !u16i, !ty_in_addr, !cir.array<!u8i x 8>}>
module @"/workspaces/juliet-c/testcases/CWE369_Divide_by_Zero/s01/CWE369_Divide_by_Zero__float_listenSocket_16.c" attributes {cir.lang = #cir.lang<c>, cir.sob = #cir.signed_overflow_behavior<undefined>, cir.triple = "x86_64-unknown-linux-gnu", cir.type_size_info = #cir.type_size_info<char = 8, int = 32, size_t = 64>, cir.uwtable = #cir.uwtable<async>, dlti.dl_spec = #dlti.dl_spec<!llvm.ptr<270> = dense<32> : vector<4xi64>, i1 = dense<8> : vector<2xi64>, !llvm.ptr = dense<64> : vector<4xi64>, i16 = dense<16> : vector<2xi64>, i8 = dense<8> : vector<2xi64>, f16 = dense<16> : vector<2xi64>, i32 = dense<32> : vector<2xi64>, !llvm.ptr<272> = dense<64> : vector<4xi64>, f64 = dense<64> : vector<2xi64>, !llvm.ptr<271> = dense<32> : vector<4xi64>, f128 = dense<128> : vector<2xi64>, i64 = dense<64> : vector<2xi64>, f80 = dense<128> : vector<2xi64>, i128 = dense<128> : vector<2xi64>, "dlti.stack_alignment" = 128 : i64, "dlti.mangling_mode" = "e", "dlti.endianness" = "little">} {
  cir.func private @socket(!s32i, !s32i, !s32i) -> !s32i extra(#fn_attr) loc(#loc339)
  cir.func private @htons(!u16i) -> !u16i extra(#fn_attr) loc(#loc340)
  cir.func private @bind(!s32i, !cir.ptr<!ty_sockaddr>, !u32i) -> !s32i extra(#fn_attr) loc(#loc341)
  cir.func private @listen(!s32i, !s32i) -> !s32i extra(#fn_attr) loc(#loc342)
  cir.func private @accept(!s32i, !cir.ptr<!ty_sockaddr>, !cir.ptr<!u32i>) -> !s32i loc(#loc343)
  cir.func private @recv(!s32i, !cir.ptr<!void>, !u64i, !s32i) -> !s64i loc(#loc344)
  cir.func private @atof(!cir.ptr<!s8i>) -> !cir.double extra(#fn_attr) loc(#loc345)
  cir.func private @close(!s32i) -> !s32i loc(#loc346)
  cir.func private @printIntLine(!s32i) loc(#loc347)
  cir.func no_proto @CWE369_Divide_by_Zero__float_listenSocket_16_bad() extra(#fn_attr1) {
    %0 = cir.alloca !cir.float, !cir.ptr<!cir.float>, ["data"] {alignment = 4 : i64} loc(#loc349)
    %1 = cir.const #cir.fp<0.000000e+00> : !cir.float loc(#loc23)
    cir.store %1, %0 : !cir.float, !cir.ptr<!cir.float> loc(#loc350)
    cir.scope {
      cir.while {
        %2 = cir.const #cir.int<1> : !s32i loc(#loc27)
        %3 = cir.cast(int_to_bool, %2 : !s32i), !cir.bool loc(#loc27)
        cir.condition(%3) loc(#loc27)
      } do {
        cir.scope {
          cir.scope {
            %2 = cir.alloca !s32i, !cir.ptr<!s32i>, ["recvResult"] {alignment = 4 : i64} loc(#loc354)
            %3 = cir.alloca !ty_sockaddr_in, !cir.ptr<!ty_sockaddr_in>, ["service"] {alignment = 4 : i64} loc(#loc355)
            %4 = cir.alloca !s32i, !cir.ptr<!s32i>, ["listenSocket", init] {alignment = 4 : i64} loc(#loc356)
            %5 = cir.alloca !s32i, !cir.ptr<!s32i>, ["acceptSocket", init] {alignment = 4 : i64} loc(#loc357)
            %6 = cir.alloca !cir.array<!s8i x 20>, !cir.ptr<!cir.array<!s8i x 20>>, ["inputBuffer"] {alignment = 16 : i64} loc(#loc358)
            %7 = cir.const #cir.int<1> : !s32i loc(#loc36)
            %8 = cir.unary(minus, %7) nsw : !s32i, !s32i loc(#loc36)
            cir.store %8, %4 : !s32i, !cir.ptr<!s32i> loc(#loc356)
            %9 = cir.const #cir.int<1> : !s32i loc(#loc38)
            %10 = cir.unary(minus, %9) nsw : !s32i, !s32i loc(#loc38)
            cir.store %10, %5 : !s32i, !cir.ptr<!s32i> loc(#loc357)
            cir.scope {
              cir.do {
                cir.scope {
                  %11 = cir.const #cir.int<2> : !s32i loc(#loc45)
                  %12 = cir.const #cir.int<1> : !s32i loc(#loc46)
                  %13 = cir.const #cir.int<6> : !s32i loc(#loc47)
                  %14 = cir.call @socket(%11, %12, %13) : (!s32i, !s32i, !s32i) -> !s32i extra(#fn_attr) loc(#loc48)
                  cir.store %14, %4 : !s32i, !cir.ptr<!s32i> loc(#loc361)
                  cir.scope {
                    %51 = cir.load %4 : !cir.ptr<!s32i>, !s32i loc(#loc53)
                    %52 = cir.const #cir.int<1> : !s32i loc(#loc54)
                    %53 = cir.unary(minus, %52) nsw : !s32i, !s32i loc(#loc54)
                    %54 = cir.cmp(eq, %51, %53) : !s32i, !cir.bool loc(#loc363)
                    cir.if %54 {
                      cir.break loc(#loc56)
                    } loc(#loc364)
                  } loc(#loc362)
                  %15 = cir.cast(bitcast, %3 : !cir.ptr<!ty_sockaddr_in>), !cir.ptr<!void> loc(#loc365)
                  %16 = cir.const #cir.int<0> : !s32i loc(#loc59)
                  %17 = cir.const #cir.int<16> : !u64i loc(#loc366)
                  cir.libc.memset %17 bytes from %15 set to %16 : !cir.ptr<!void>, !s32i, !u64i loc(#loc367)
                  %18 = cir.const #cir.int<2> : !s32i loc(#loc64)
                  %19 = cir.cast(integral, %18 : !s32i), !u16i loc(#loc64)
                  %20 = cir.get_member %3[0] {name = "sin_family"} : !cir.ptr<!ty_sockaddr_in> -> !cir.ptr<!u16i> loc(#loc65)
                  cir.store %19, %20 : !u16i, !cir.ptr<!u16i> loc(#loc368)
                  %21 = cir.const #cir.int<0> : !s32i loc(#loc67)
                  %22 = cir.cast(integral, %21 : !s32i), !u32i loc(#loc67)
                  %23 = cir.get_member %3[2] {name = "sin_addr"} : !cir.ptr<!ty_sockaddr_in> -> !cir.ptr<!ty_in_addr> loc(#loc68)
                  %24 = cir.get_member %23[0] {name = "s_addr"} : !cir.ptr<!ty_in_addr> -> !cir.ptr<!u32i> loc(#loc69)
                  cir.store %22, %24 : !u32i, !cir.ptr<!u32i> loc(#loc369)
                  %25 = cir.const #cir.int<27015> : !s32i loc(#loc71)
                  %26 = cir.cast(integral, %25 : !s32i), !u16i loc(#loc71)
                  %27 = cir.call @htons(%26) : (!u16i) -> !u16i side_effect(const) extra(#fn_attr) loc(#loc72)
                  %28 = cir.get_member %3[1] {name = "sin_port"} : !cir.ptr<!ty_sockaddr_in> -> !cir.ptr<!u16i> loc(#loc73)
                  cir.store %27, %28 : !u16i, !cir.ptr<!u16i> loc(#loc370)
                  cir.scope {
                    %51 = cir.load %4 : !cir.ptr<!s32i>, !s32i loc(#loc78)
                    %52 = cir.cast(bitcast, %3 : !cir.ptr<!ty_sockaddr_in>), !cir.ptr<!ty_sockaddr> loc(#loc372)
                    %53 = cir.const #cir.int<16> : !u64i loc(#loc373)
                    %54 = cir.cast(integral, %53 : !u64i), !u32i loc(#loc373)
                    %55 = cir.call @bind(%51, %52, %54) : (!s32i, !cir.ptr<!ty_sockaddr>, !u32i) -> !s32i extra(#fn_attr) loc(#loc83)
                    %56 = cir.const #cir.int<1> : !s32i loc(#loc84)
                    %57 = cir.unary(minus, %56) nsw : !s32i, !s32i loc(#loc84)
                    %58 = cir.cmp(eq, %55, %57) : !s32i, !cir.bool loc(#loc374)
                    cir.if %58 {
                      cir.break loc(#loc86)
                    } loc(#loc375)
                  } loc(#loc371)
                  cir.scope {
                    %51 = cir.load %4 : !cir.ptr<!s32i>, !s32i loc(#loc89)
                    %52 = cir.const #cir.int<5> : !s32i loc(#loc90)
                    %53 = cir.call @listen(%51, %52) : (!s32i, !s32i) -> !s32i extra(#fn_attr) loc(#loc91)
                    %54 = cir.const #cir.int<1> : !s32i loc(#loc92)
                    %55 = cir.unary(minus, %54) nsw : !s32i, !s32i loc(#loc92)
                    %56 = cir.cmp(eq, %53, %55) : !s32i, !cir.bool loc(#loc377)
                    cir.if %56 {
                      cir.break loc(#loc94)
                    } loc(#loc378)
                  } loc(#loc376)
                  %29 = cir.load %4 : !cir.ptr<!s32i>, !s32i loc(#loc95)
                  %30 = cir.const #cir.ptr<null> : !cir.ptr<!ty_sockaddr> loc(#loc96)
                  %31 = cir.const #cir.ptr<null> : !cir.ptr<!u32i> loc(#loc97)
                  %32 = cir.call @accept(%29, %30, %31) : (!s32i, !cir.ptr<!ty_sockaddr>, !cir.ptr<!u32i>) -> !s32i loc(#loc98)
                  cir.store %32, %5 : !s32i, !cir.ptr<!s32i> loc(#loc379)
                  cir.scope {
                    %51 = cir.load %5 : !cir.ptr<!s32i>, !s32i loc(#loc103)
                    %52 = cir.const #cir.int<1> : !s32i loc(#loc104)
                    %53 = cir.unary(minus, %52) nsw : !s32i, !s32i loc(#loc104)
                    %54 = cir.cmp(eq, %51, %53) : !s32i, !cir.bool loc(#loc381)
                    cir.if %54 {
                      cir.break loc(#loc106)
                    } loc(#loc382)
                  } loc(#loc380)
                  %33 = cir.load %5 : !cir.ptr<!s32i>, !s32i loc(#loc107)
                  %34 = cir.cast(array_to_ptrdecay, %6 : !cir.ptr<!cir.array<!s8i x 20>>), !cir.ptr<!s8i> loc(#loc108)
                  %35 = cir.cast(bitcast, %34 : !cir.ptr<!s8i>), !cir.ptr<!void> loc(#loc108)
                  %36 = cir.const #cir.int<20> : !s32i loc(#loc109)
                  %37 = cir.const #cir.int<1> : !s32i loc(#loc110)
                  %38 = cir.binop(sub, %36, %37) nsw : !s32i loc(#loc109)
                  %39 = cir.cast(integral, %38 : !s32i), !u64i loc(#loc109)
                  %40 = cir.const #cir.int<0> : !s32i loc(#loc111)
                  %41 = cir.call @recv(%33, %35, %39, %40) : (!s32i, !cir.ptr<!void>, !u64i, !s32i) -> !s64i loc(#loc112)
                  %42 = cir.cast(integral, %41 : !s64i), !s32i loc(#loc112)
                  cir.store %42, %2 : !s32i, !cir.ptr<!s32i> loc(#loc383)
                  cir.scope {
                    %51 = cir.load %2 : !cir.ptr<!s32i>, !s32i loc(#loc117)
                    %52 = cir.const #cir.int<1> : !s32i loc(#loc118)
                    %53 = cir.unary(minus, %52) nsw : !s32i, !s32i loc(#loc118)
                    %54 = cir.cmp(eq, %51, %53) : !s32i, !cir.bool loc(#loc385)
                    %55 = cir.ternary(%54, true {
                      %56 = cir.const #true loc(#loc119)
                      cir.yield %56 : !cir.bool loc(#loc119)
                    }, false {
                      %56 = cir.load %2 : !cir.ptr<!s32i>, !s32i loc(#loc120)
                      %57 = cir.const #cir.int<0> : !s32i loc(#loc121)
                      %58 = cir.cmp(eq, %56, %57) : !s32i, !cir.bool loc(#loc386)
                      %59 = cir.ternary(%58, true {
                        %60 = cir.const #true loc(#loc119)
                        cir.yield %60 : !cir.bool loc(#loc119)
                      }, false {
                        %60 = cir.const #false loc(#loc119)
                        cir.yield %60 : !cir.bool loc(#loc119)
                      }) : (!cir.bool) -> !cir.bool loc(#loc119)
                      cir.yield %59 : !cir.bool loc(#loc119)
                    }) : (!cir.bool) -> !cir.bool loc(#loc119)
                    cir.if %55 {
                      cir.break loc(#loc123)
                    } loc(#loc387)
                  } loc(#loc384)
                  %43 = cir.const #cir.int<0> : !s32i loc(#loc124)
                  %44 = cir.cast(integral, %43 : !s32i), !s8i loc(#loc124)
                  %45 = cir.load %2 : !cir.ptr<!s32i>, !s32i loc(#loc125)
                  %46 = cir.cast(array_to_ptrdecay, %6 : !cir.ptr<!cir.array<!s8i x 20>>), !cir.ptr<!s8i> loc(#loc126)
                  %47 = cir.ptr_stride(%46 : !cir.ptr<!s8i>, %45 : !s32i), !cir.ptr<!s8i> loc(#loc126)
                  cir.store %44, %47 : !s8i, !cir.ptr<!s8i> loc(#loc388)
                  %48 = cir.cast(array_to_ptrdecay, %6 : !cir.ptr<!cir.array<!s8i x 20>>), !cir.ptr<!s8i> loc(#loc127)
                  %49 = cir.call @atof(%48) : (!cir.ptr<!s8i>) -> !cir.double side_effect(pure) extra(#fn_attr) loc(#loc128)
                  %50 = cir.cast(floating, %49 : !cir.double), !cir.float loc(#loc128)
                  cir.store %50, %0 : !cir.float, !cir.ptr<!cir.float> loc(#loc389)
                } loc(#loc360)
                cir.yield loc(#loc42)
              } while {
                %11 = cir.const #cir.int<0> : !s32i loc(#loc131)
                %12 = cir.cast(int_to_bool, %11 : !s32i), !cir.bool loc(#loc131)
                cir.condition(%12) loc(#loc131)
              } loc(#loc359)
            } loc(#loc359)
            cir.scope {
              %11 = cir.load %4 : !cir.ptr<!s32i>, !s32i loc(#loc134)
              %12 = cir.const #cir.int<1> : !s32i loc(#loc135)
              %13 = cir.unary(minus, %12) nsw : !s32i, !s32i loc(#loc135)
              %14 = cir.cmp(ne, %11, %13) : !s32i, !cir.bool loc(#loc391)
              cir.if %14 {
                %15 = cir.load %4 : !cir.ptr<!s32i>, !s32i loc(#loc137)
                %16 = cir.call @close(%15) : (!s32i) -> !s32i loc(#loc138)
              } loc(#loc392)
            } loc(#loc390)
            cir.scope {
              %11 = cir.load %5 : !cir.ptr<!s32i>, !s32i loc(#loc141)
              %12 = cir.const #cir.int<1> : !s32i loc(#loc142)
              %13 = cir.unary(minus, %12) nsw : !s32i, !s32i loc(#loc142)
              %14 = cir.cmp(ne, %11, %13) : !s32i, !cir.bool loc(#loc394)
              cir.if %14 {
                %15 = cir.load %5 : !cir.ptr<!s32i>, !s32i loc(#loc144)
                %16 = cir.call @close(%15) : (!s32i) -> !s32i loc(#loc145)
              } loc(#loc395)
            } loc(#loc393)
          } loc(#loc353)
          cir.break loc(#loc146)
        } loc(#loc352)
        cir.yield loc(#loc26)
      } loc(#loc351)
    } loc(#loc351)
    cir.scope {
      cir.while {
        %2 = cir.const #cir.int<1> : !s32i loc(#loc149)
        %3 = cir.cast(int_to_bool, %2 : !s32i), !cir.bool loc(#loc149)
        cir.condition(%3) loc(#loc149)
      } do {
        cir.scope {
          cir.scope {
            %2 = cir.alloca !s32i, !cir.ptr<!s32i>, ["result", init] {alignment = 4 : i64} loc(#loc399)
            %3 = cir.const #cir.fp<1.000000e+02> : !cir.double loc(#loc155)
            %4 = cir.load %0 : !cir.ptr<!cir.float>, !cir.float loc(#loc156)
            %5 = cir.cast(floating, %4 : !cir.float), !cir.double loc(#loc156)
            %6 = cir.binop(div, %3, %5) : !cir.double loc(#loc400)
            %7 = cir.cast(float_to_int, %6 : !cir.double), !s32i loc(#loc400)
            cir.store %7, %2 : !s32i, !cir.ptr<!s32i> loc(#loc399)
            %8 = cir.load %2 : !cir.ptr<!s32i>, !s32i loc(#loc157)
            cir.call @printIntLine(%8) : (!s32i) -> () loc(#loc158)
          } loc(#loc398)
          cir.break loc(#loc159)
        } loc(#loc397)
        cir.yield loc(#loc148)
      } loc(#loc396)
    } loc(#loc396)
    cir.return loc(#loc20)
  } loc(#loc348)
  cir.func no_proto @CWE369_Divide_by_Zero__float_listenSocket_16_good() extra(#fn_attr1) {
    %0 = cir.get_global @goodB2G : !cir.ptr<!cir.func<()>> loc(#loc402)
    cir.call %0() : (!cir.ptr<!cir.func<()>>) -> () loc(#loc162)
    %1 = cir.get_global @goodG2B : !cir.ptr<!cir.func<()>> loc(#loc403)
    cir.call %1() : (!cir.ptr<!cir.func<()>>) -> () loc(#loc164)
    cir.return loc(#loc161)
  } loc(#loc401)
  cir.func private @printLine(!cir.ptr<!s8i>) loc(#loc404)
  cir.global "private" constant cir_private dsolocal @".str" = #cir.const_array<"This would result in a divide by zero\00" : !cir.array<!s8i x 38>> : !cir.array<!s8i x 38> {alignment = 1 : i64} loc(#loc168)
  cir.func no_proto internal private @goodB2G() extra(#fn_attr1) {
    %0 = cir.alloca !cir.float, !cir.ptr<!cir.float>, ["data"] {alignment = 4 : i64} loc(#loc406)
    %1 = cir.const #cir.fp<0.000000e+00> : !cir.float loc(#loc173)
    cir.store %1, %0 : !cir.float, !cir.ptr<!cir.float> loc(#loc407)
    cir.scope {
      cir.while {
        %2 = cir.const #cir.int<1> : !s32i loc(#loc177)
        %3 = cir.cast(int_to_bool, %2 : !s32i), !cir.bool loc(#loc177)
        cir.condition(%3) loc(#loc177)
      } do {
        cir.scope {
          cir.scope {
            %2 = cir.alloca !s32i, !cir.ptr<!s32i>, ["recvResult"] {alignment = 4 : i64} loc(#loc411)
            %3 = cir.alloca !ty_sockaddr_in, !cir.ptr<!ty_sockaddr_in>, ["service"] {alignment = 4 : i64} loc(#loc412)
            %4 = cir.alloca !s32i, !cir.ptr<!s32i>, ["listenSocket", init] {alignment = 4 : i64} loc(#loc413)
            %5 = cir.alloca !s32i, !cir.ptr<!s32i>, ["acceptSocket", init] {alignment = 4 : i64} loc(#loc414)
            %6 = cir.alloca !cir.array<!s8i x 20>, !cir.ptr<!cir.array<!s8i x 20>>, ["inputBuffer"] {alignment = 16 : i64} loc(#loc415)
            %7 = cir.const #cir.int<1> : !s32i loc(#loc186)
            %8 = cir.unary(minus, %7) nsw : !s32i, !s32i loc(#loc186)
            cir.store %8, %4 : !s32i, !cir.ptr<!s32i> loc(#loc413)
            %9 = cir.const #cir.int<1> : !s32i loc(#loc188)
            %10 = cir.unary(minus, %9) nsw : !s32i, !s32i loc(#loc188)
            cir.store %10, %5 : !s32i, !cir.ptr<!s32i> loc(#loc414)
            cir.scope {
              cir.do {
                cir.scope {
                  %11 = cir.const #cir.int<2> : !s32i loc(#loc195)
                  %12 = cir.const #cir.int<1> : !s32i loc(#loc196)
                  %13 = cir.const #cir.int<6> : !s32i loc(#loc197)
                  %14 = cir.call @socket(%11, %12, %13) : (!s32i, !s32i, !s32i) -> !s32i extra(#fn_attr) loc(#loc198)
                  cir.store %14, %4 : !s32i, !cir.ptr<!s32i> loc(#loc418)
                  cir.scope {
                    %51 = cir.load %4 : !cir.ptr<!s32i>, !s32i loc(#loc203)
                    %52 = cir.const #cir.int<1> : !s32i loc(#loc204)
                    %53 = cir.unary(minus, %52) nsw : !s32i, !s32i loc(#loc204)
                    %54 = cir.cmp(eq, %51, %53) : !s32i, !cir.bool loc(#loc420)
                    cir.if %54 {
                      cir.break loc(#loc206)
                    } loc(#loc421)
                  } loc(#loc419)
                  %15 = cir.cast(bitcast, %3 : !cir.ptr<!ty_sockaddr_in>), !cir.ptr<!void> loc(#loc422)
                  %16 = cir.const #cir.int<0> : !s32i loc(#loc209)
                  %17 = cir.const #cir.int<16> : !u64i loc(#loc423)
                  cir.libc.memset %17 bytes from %15 set to %16 : !cir.ptr<!void>, !s32i, !u64i loc(#loc424)
                  %18 = cir.const #cir.int<2> : !s32i loc(#loc214)
                  %19 = cir.cast(integral, %18 : !s32i), !u16i loc(#loc214)
                  %20 = cir.get_member %3[0] {name = "sin_family"} : !cir.ptr<!ty_sockaddr_in> -> !cir.ptr<!u16i> loc(#loc65)
                  cir.store %19, %20 : !u16i, !cir.ptr<!u16i> loc(#loc425)
                  %21 = cir.const #cir.int<0> : !s32i loc(#loc216)
                  %22 = cir.cast(integral, %21 : !s32i), !u32i loc(#loc216)
                  %23 = cir.get_member %3[2] {name = "sin_addr"} : !cir.ptr<!ty_sockaddr_in> -> !cir.ptr<!ty_in_addr> loc(#loc68)
                  %24 = cir.get_member %23[0] {name = "s_addr"} : !cir.ptr<!ty_in_addr> -> !cir.ptr<!u32i> loc(#loc69)
                  cir.store %22, %24 : !u32i, !cir.ptr<!u32i> loc(#loc426)
                  %25 = cir.const #cir.int<27015> : !s32i loc(#loc218)
                  %26 = cir.cast(integral, %25 : !s32i), !u16i loc(#loc218)
                  %27 = cir.call @htons(%26) : (!u16i) -> !u16i side_effect(const) extra(#fn_attr) loc(#loc219)
                  %28 = cir.get_member %3[1] {name = "sin_port"} : !cir.ptr<!ty_sockaddr_in> -> !cir.ptr<!u16i> loc(#loc73)
                  cir.store %27, %28 : !u16i, !cir.ptr<!u16i> loc(#loc427)
                  cir.scope {
                    %51 = cir.load %4 : !cir.ptr<!s32i>, !s32i loc(#loc224)
                    %52 = cir.cast(bitcast, %3 : !cir.ptr<!ty_sockaddr_in>), !cir.ptr<!ty_sockaddr> loc(#loc429)
                    %53 = cir.const #cir.int<16> : !u64i loc(#loc430)
                    %54 = cir.cast(integral, %53 : !u64i), !u32i loc(#loc430)
                    %55 = cir.call @bind(%51, %52, %54) : (!s32i, !cir.ptr<!ty_sockaddr>, !u32i) -> !s32i extra(#fn_attr) loc(#loc229)
                    %56 = cir.const #cir.int<1> : !s32i loc(#loc230)
                    %57 = cir.unary(minus, %56) nsw : !s32i, !s32i loc(#loc230)
                    %58 = cir.cmp(eq, %55, %57) : !s32i, !cir.bool loc(#loc431)
                    cir.if %58 {
                      cir.break loc(#loc232)
                    } loc(#loc432)
                  } loc(#loc428)
                  cir.scope {
                    %51 = cir.load %4 : !cir.ptr<!s32i>, !s32i loc(#loc235)
                    %52 = cir.const #cir.int<5> : !s32i loc(#loc236)
                    %53 = cir.call @listen(%51, %52) : (!s32i, !s32i) -> !s32i extra(#fn_attr) loc(#loc237)
                    %54 = cir.const #cir.int<1> : !s32i loc(#loc238)
                    %55 = cir.unary(minus, %54) nsw : !s32i, !s32i loc(#loc238)
                    %56 = cir.cmp(eq, %53, %55) : !s32i, !cir.bool loc(#loc434)
                    cir.if %56 {
                      cir.break loc(#loc240)
                    } loc(#loc435)
                  } loc(#loc433)
                  %29 = cir.load %4 : !cir.ptr<!s32i>, !s32i loc(#loc241)
                  %30 = cir.const #cir.ptr<null> : !cir.ptr<!ty_sockaddr> loc(#loc242)
                  %31 = cir.const #cir.ptr<null> : !cir.ptr<!u32i> loc(#loc243)
                  %32 = cir.call @accept(%29, %30, %31) : (!s32i, !cir.ptr<!ty_sockaddr>, !cir.ptr<!u32i>) -> !s32i loc(#loc244)
                  cir.store %32, %5 : !s32i, !cir.ptr<!s32i> loc(#loc436)
                  cir.scope {
                    %51 = cir.load %5 : !cir.ptr<!s32i>, !s32i loc(#loc249)
                    %52 = cir.const #cir.int<1> : !s32i loc(#loc250)
                    %53 = cir.unary(minus, %52) nsw : !s32i, !s32i loc(#loc250)
                    %54 = cir.cmp(eq, %51, %53) : !s32i, !cir.bool loc(#loc438)
                    cir.if %54 {
                      cir.break loc(#loc252)
                    } loc(#loc439)
                  } loc(#loc437)
                  %33 = cir.load %5 : !cir.ptr<!s32i>, !s32i loc(#loc253)
                  %34 = cir.cast(array_to_ptrdecay, %6 : !cir.ptr<!cir.array<!s8i x 20>>), !cir.ptr<!s8i> loc(#loc254)
                  %35 = cir.cast(bitcast, %34 : !cir.ptr<!s8i>), !cir.ptr<!void> loc(#loc254)
                  %36 = cir.const #cir.int<20> : !s32i loc(#loc255)
                  %37 = cir.const #cir.int<1> : !s32i loc(#loc256)
                  %38 = cir.binop(sub, %36, %37) nsw : !s32i loc(#loc255)
                  %39 = cir.cast(integral, %38 : !s32i), !u64i loc(#loc255)
                  %40 = cir.const #cir.int<0> : !s32i loc(#loc257)
                  %41 = cir.call @recv(%33, %35, %39, %40) : (!s32i, !cir.ptr<!void>, !u64i, !s32i) -> !s64i loc(#loc258)
                  %42 = cir.cast(integral, %41 : !s64i), !s32i loc(#loc258)
                  cir.store %42, %2 : !s32i, !cir.ptr<!s32i> loc(#loc440)
                  cir.scope {
                    %51 = cir.load %2 : !cir.ptr<!s32i>, !s32i loc(#loc263)
                    %52 = cir.const #cir.int<1> : !s32i loc(#loc264)
                    %53 = cir.unary(minus, %52) nsw : !s32i, !s32i loc(#loc264)
                    %54 = cir.cmp(eq, %51, %53) : !s32i, !cir.bool loc(#loc442)
                    %55 = cir.ternary(%54, true {
                      %56 = cir.const #true loc(#loc265)
                      cir.yield %56 : !cir.bool loc(#loc265)
                    }, false {
                      %56 = cir.load %2 : !cir.ptr<!s32i>, !s32i loc(#loc266)
                      %57 = cir.const #cir.int<0> : !s32i loc(#loc267)
                      %58 = cir.cmp(eq, %56, %57) : !s32i, !cir.bool loc(#loc443)
                      %59 = cir.ternary(%58, true {
                        %60 = cir.const #true loc(#loc265)
                        cir.yield %60 : !cir.bool loc(#loc265)
                      }, false {
                        %60 = cir.const #false loc(#loc265)
                        cir.yield %60 : !cir.bool loc(#loc265)
                      }) : (!cir.bool) -> !cir.bool loc(#loc265)
                      cir.yield %59 : !cir.bool loc(#loc265)
                    }) : (!cir.bool) -> !cir.bool loc(#loc265)
                    cir.if %55 {
                      cir.break loc(#loc269)
                    } loc(#loc444)
                  } loc(#loc441)
                  %43 = cir.const #cir.int<0> : !s32i loc(#loc270)
                  %44 = cir.cast(integral, %43 : !s32i), !s8i loc(#loc270)
                  %45 = cir.load %2 : !cir.ptr<!s32i>, !s32i loc(#loc271)
                  %46 = cir.cast(array_to_ptrdecay, %6 : !cir.ptr<!cir.array<!s8i x 20>>), !cir.ptr<!s8i> loc(#loc272)
                  %47 = cir.ptr_stride(%46 : !cir.ptr<!s8i>, %45 : !s32i), !cir.ptr<!s8i> loc(#loc272)
                  cir.store %44, %47 : !s8i, !cir.ptr<!s8i> loc(#loc445)
                  %48 = cir.cast(array_to_ptrdecay, %6 : !cir.ptr<!cir.array<!s8i x 20>>), !cir.ptr<!s8i> loc(#loc273)
                  %49 = cir.call @atof(%48) : (!cir.ptr<!s8i>) -> !cir.double side_effect(pure) extra(#fn_attr) loc(#loc274)
                  %50 = cir.cast(floating, %49 : !cir.double), !cir.float loc(#loc274)
                  cir.store %50, %0 : !cir.float, !cir.ptr<!cir.float> loc(#loc446)
                } loc(#loc417)
                cir.yield loc(#loc192)
              } while {
                %11 = cir.const #cir.int<0> : !s32i loc(#loc277)
                %12 = cir.cast(int_to_bool, %11 : !s32i), !cir.bool loc(#loc277)
                cir.condition(%12) loc(#loc277)
              } loc(#loc416)
            } loc(#loc416)
            cir.scope {
              %11 = cir.load %4 : !cir.ptr<!s32i>, !s32i loc(#loc280)
              %12 = cir.const #cir.int<1> : !s32i loc(#loc281)
              %13 = cir.unary(minus, %12) nsw : !s32i, !s32i loc(#loc281)
              %14 = cir.cmp(ne, %11, %13) : !s32i, !cir.bool loc(#loc448)
              cir.if %14 {
                %15 = cir.load %4 : !cir.ptr<!s32i>, !s32i loc(#loc283)
                %16 = cir.call @close(%15) : (!s32i) -> !s32i loc(#loc284)
              } loc(#loc449)
            } loc(#loc447)
            cir.scope {
              %11 = cir.load %5 : !cir.ptr<!s32i>, !s32i loc(#loc287)
              %12 = cir.const #cir.int<1> : !s32i loc(#loc288)
              %13 = cir.unary(minus, %12) nsw : !s32i, !s32i loc(#loc288)
              %14 = cir.cmp(ne, %11, %13) : !s32i, !cir.bool loc(#loc451)
              cir.if %14 {
                %15 = cir.load %5 : !cir.ptr<!s32i>, !s32i loc(#loc290)
                %16 = cir.call @close(%15) : (!s32i) -> !s32i loc(#loc291)
              } loc(#loc452)
            } loc(#loc450)
          } loc(#loc410)
          cir.break loc(#loc292)
        } loc(#loc409)
        cir.yield loc(#loc176)
      } loc(#loc408)
    } loc(#loc408)
    cir.scope {
      cir.while {
        %2 = cir.const #cir.int<1> : !s32i loc(#loc295)
        %3 = cir.cast(int_to_bool, %2 : !s32i), !cir.bool loc(#loc295)
        cir.condition(%3) loc(#loc295)
      } do {
        cir.scope {
          cir.scope {
            %2 = cir.load %0 : !cir.ptr<!cir.float>, !cir.float loc(#loc299)
            %3 = cir.cast(floating, %2 : !cir.float), !cir.double loc(#loc299)
            %4 = cir.fabs %3 : !cir.double loc(#loc299)
            %5 = cir.const #cir.fp<9.9999999999999995E-7> : !cir.double loc(#loc300)
            %6 = cir.cmp(gt, %4, %5) : !cir.double, !cir.bool loc(#loc456)
            cir.if %6 {
              %7 = cir.alloca !s32i, !cir.ptr<!s32i>, ["result", init] {alignment = 4 : i64} loc(#loc458)
              %8 = cir.const #cir.fp<1.000000e+02> : !cir.double loc(#loc307)
              %9 = cir.load %0 : !cir.ptr<!cir.float>, !cir.float loc(#loc308)
              %10 = cir.cast(floating, %9 : !cir.float), !cir.double loc(#loc308)
              %11 = cir.binop(div, %8, %10) : !cir.double loc(#loc459)
              %12 = cir.cast(float_to_int, %11 : !cir.double), !s32i loc(#loc459)
              cir.store %12, %7 : !s32i, !cir.ptr<!s32i> loc(#loc458)
              %13 = cir.load %7 : !cir.ptr<!s32i>, !s32i loc(#loc309)
              cir.call @printIntLine(%13) : (!s32i) -> () loc(#loc310)
            } else {
              %7 = cir.get_global @".str" : !cir.ptr<!cir.array<!s8i x 38>> loc(#loc168)
              %8 = cir.cast(array_to_ptrdecay, %7 : !cir.ptr<!cir.array<!s8i x 38>>), !cir.ptr<!s8i> loc(#loc168)
              cir.call @printLine(%8) : (!cir.ptr<!s8i>) -> () loc(#loc311)
            } loc(#loc457)
          } loc(#loc455)
          cir.break loc(#loc312)
        } loc(#loc454)
        cir.yield loc(#loc294)
      } loc(#loc453)
    } loc(#loc453)
    cir.return loc(#loc170)
  } loc(#loc405)
  cir.func no_proto internal private @goodG2B() extra(#fn_attr1) {
    %0 = cir.alloca !cir.float, !cir.ptr<!cir.float>, ["data"] {alignment = 4 : i64} loc(#loc461)
    %1 = cir.const #cir.fp<0.000000e+00> : !cir.float loc(#loc317)
    cir.store %1, %0 : !cir.float, !cir.ptr<!cir.float> loc(#loc462)
    cir.scope {
      cir.while {
        %2 = cir.const #cir.int<1> : !s32i loc(#loc321)
        %3 = cir.cast(int_to_bool, %2 : !s32i), !cir.bool loc(#loc321)
        cir.condition(%3) loc(#loc321)
      } do {
        cir.scope {
          %2 = cir.const #cir.fp<2.000000e+00> : !cir.float loc(#loc323)
          cir.store %2, %0 : !cir.float, !cir.ptr<!cir.float> loc(#loc465)
          cir.break loc(#loc325)
        } loc(#loc464)
        cir.yield loc(#loc320)
      } loc(#loc463)
    } loc(#loc463)
    cir.scope {
      cir.while {
        %2 = cir.const #cir.int<1> : !s32i loc(#loc328)
        %3 = cir.cast(int_to_bool, %2 : !s32i), !cir.bool loc(#loc328)
        cir.condition(%3) loc(#loc328)
      } do {
        cir.scope {
          cir.scope {
            %2 = cir.alloca !s32i, !cir.ptr<!s32i>, ["result", init] {alignment = 4 : i64} loc(#loc469)
            %3 = cir.const #cir.fp<1.000000e+02> : !cir.double loc(#loc334)
            %4 = cir.load %0 : !cir.ptr<!cir.float>, !cir.float loc(#loc335)
            %5 = cir.cast(floating, %4 : !cir.float), !cir.double loc(#loc335)
            %6 = cir.binop(div, %3, %5) : !cir.double loc(#loc470)
            %7 = cir.cast(float_to_int, %6 : !cir.double), !s32i loc(#loc470)
            cir.store %7, %2 : !s32i, !cir.ptr<!s32i> loc(#loc469)
            %8 = cir.load %2 : !cir.ptr<!s32i>, !s32i loc(#loc336)
            cir.call @printIntLine(%8) : (!s32i) -> () loc(#loc337)
          } loc(#loc468)
          cir.break loc(#loc338)
        } loc(#loc467)
        cir.yield loc(#loc327)
      } loc(#loc466)
    } loc(#loc466)
    cir.return loc(#loc314)
  } loc(#loc460)
} loc(#loc)
#loc = loc("/workspaces/juliet-c/testcases/CWE369_Divide_by_Zero/s01/CWE369_Divide_by_Zero__float_listenSocket_16.c":0:0)
#loc1 = loc("/usr/include/x86_64-linux-gnu/sys/socket.h":102:1)
#loc2 = loc("/usr/include/x86_64-linux-gnu/sys/socket.h":102:62)
#loc3 = loc("/usr/include/netinet/in.h":402:1)
#loc4 = loc("/usr/include/netinet/in.h":403:40)
#loc5 = loc("/usr/include/x86_64-linux-gnu/sys/socket.h":112:1)
#loc6 = loc("/usr/include/x86_64-linux-gnu/sys/socket.h":113:6)
#loc7 = loc("/usr/include/x86_64-linux-gnu/sys/socket.h":296:1)
#loc8 = loc("/usr/include/x86_64-linux-gnu/sys/socket.h":296:39)
#loc9 = loc("/usr/include/x86_64-linux-gnu/sys/socket.h":306:1)
#loc10 = loc("/usr/include/x86_64-linux-gnu/sys/socket.h":307:38)
#loc11 = loc("/usr/include/x86_64-linux-gnu/sys/socket.h":145:1)
#loc12 = loc("/usr/include/x86_64-linux-gnu/sys/socket.h":145:68)
#loc13 = loc("/usr/include/stdlib.h":102:1)
#loc14 = loc("/usr/include/stdlib.h":103:33)
#loc15 = loc("/usr/include/unistd.h":358:1)
#loc16 = loc("/usr/include/unistd.h":358:27)
#loc17 = loc("../../../testcasesupport/std_testcase_io.h":18:1)
#loc18 = loc("../../../testcasesupport/std_testcase_io.h":18:33)
#loc19 = loc("CWE369_Divide_by_Zero__float_listenSocket_16.c":46:1)
#loc20 = loc("CWE369_Divide_by_Zero__float_listenSocket_16.c":133:1)
#loc21 = loc("CWE369_Divide_by_Zero__float_listenSocket_16.c":48:5)
#loc22 = loc("CWE369_Divide_by_Zero__float_listenSocket_16.c":48:11)
#loc23 = loc("CWE369_Divide_by_Zero__float_listenSocket_16.c":50:12)
#loc24 = loc("CWE369_Divide_by_Zero__float_listenSocket_16.c":50:5)
#loc25 = loc("CWE369_Divide_by_Zero__float_listenSocket_16.c":51:5)
#loc26 = loc("CWE369_Divide_by_Zero__float_listenSocket_16.c":123:5)
#loc27 = loc("CWE369_Divide_by_Zero__float_listenSocket_16.c":51:11)
#loc28 = loc("CWE369_Divide_by_Zero__float_listenSocket_16.c":52:5)
#loc29 = loc("CWE369_Divide_by_Zero__float_listenSocket_16.c":53:9)
#loc30 = loc("CWE369_Divide_by_Zero__float_listenSocket_16.c":121:9)
#loc31 = loc("CWE369_Divide_by_Zero__float_listenSocket_16.c":58:13)
#loc32 = loc("CWE369_Divide_by_Zero__float_listenSocket_16.c":58:17)
#loc33 = loc("CWE369_Divide_by_Zero__float_listenSocket_16.c":59:13)
#loc34 = loc("CWE369_Divide_by_Zero__float_listenSocket_16.c":59:32)
#loc35 = loc("CWE369_Divide_by_Zero__float_listenSocket_16.c":60:13)
#loc36 = loc("CWE369_Divide_by_Zero__float_listenSocket_16.c":60:35)
#loc37 = loc("CWE369_Divide_by_Zero__float_listenSocket_16.c":61:13)
#loc38 = loc("CWE369_Divide_by_Zero__float_listenSocket_16.c":61:35)
#loc39 = loc("CWE369_Divide_by_Zero__float_listenSocket_16.c":62:13)
#loc40 = loc("CWE369_Divide_by_Zero__float_listenSocket_16.c":62:45)
#loc41 = loc("CWE369_Divide_by_Zero__float_listenSocket_16.c":63:13)
#loc42 = loc("CWE369_Divide_by_Zero__float_listenSocket_16.c":106:21)
#loc43 = loc("CWE369_Divide_by_Zero__float_listenSocket_16.c":64:13)
#loc44 = loc("CWE369_Divide_by_Zero__float_listenSocket_16.c":105:13)
#loc45 = loc("CWE369_Divide_by_Zero__float_listenSocket_16.c":72:39)
#loc46 = loc("CWE369_Divide_by_Zero__float_listenSocket_16.c":72:48)
#loc47 = loc("CWE369_Divide_by_Zero__float_listenSocket_16.c":72:61)
#loc48 = loc("CWE369_Divide_by_Zero__float_listenSocket_16.c":72:32)
#loc49 = loc("CWE369_Divide_by_Zero__float_listenSocket_16.c":72:17)
#loc50 = loc("CWE369_Divide_by_Zero__float_listenSocket_16.c":72:72)
#loc51 = loc("CWE369_Divide_by_Zero__float_listenSocket_16.c":73:17)
#loc52 = loc("CWE369_Divide_by_Zero__float_listenSocket_16.c":76:17)
#loc53 = loc("CWE369_Divide_by_Zero__float_listenSocket_16.c":73:21)
#loc54 = loc("CWE369_Divide_by_Zero__float_listenSocket_16.c":73:37)
#loc55 = loc("CWE369_Divide_by_Zero__float_listenSocket_16.c":74:17)
#loc56 = loc("CWE369_Divide_by_Zero__float_listenSocket_16.c":75:21)
#loc57 = loc("CWE369_Divide_by_Zero__float_listenSocket_16.c":77:24)
#loc58 = loc("CWE369_Divide_by_Zero__float_listenSocket_16.c":77:25)
#loc59 = loc("CWE369_Divide_by_Zero__float_listenSocket_16.c":77:34)
#loc60 = loc("CWE369_Divide_by_Zero__float_listenSocket_16.c":77:37)
#loc61 = loc("CWE369_Divide_by_Zero__float_listenSocket_16.c":77:51)
#loc62 = loc("CWE369_Divide_by_Zero__float_listenSocket_16.c":77:17)
#loc63 = loc("CWE369_Divide_by_Zero__float_listenSocket_16.c":77:52)
#loc64 = loc("CWE369_Divide_by_Zero__float_listenSocket_16.c":78:38)
#loc65 = loc("/usr/include/netinet/in.h":249:5)
#loc66 = loc("CWE369_Divide_by_Zero__float_listenSocket_16.c":78:17)
#loc67 = loc("CWE369_Divide_by_Zero__float_listenSocket_16.c":79:43)
#loc68 = loc("/usr/include/netinet/in.h":251:20)
#loc69 = loc("/usr/include/netinet/in.h":33:15)
#loc70 = loc("CWE369_Divide_by_Zero__float_listenSocket_16.c":79:17)
#loc71 = loc("CWE369_Divide_by_Zero__float_listenSocket_16.c":80:42)
#loc72 = loc("CWE369_Divide_by_Zero__float_listenSocket_16.c":80:36)
#loc73 = loc("/usr/include/netinet/in.h":250:15)
#loc74 = loc("CWE369_Divide_by_Zero__float_listenSocket_16.c":80:17)
#loc75 = loc("CWE369_Divide_by_Zero__float_listenSocket_16.c":80:50)
#loc76 = loc("CWE369_Divide_by_Zero__float_listenSocket_16.c":81:17)
#loc77 = loc("CWE369_Divide_by_Zero__float_listenSocket_16.c":84:17)
#loc78 = loc("CWE369_Divide_by_Zero__float_listenSocket_16.c":81:26)
#loc79 = loc("CWE369_Divide_by_Zero__float_listenSocket_16.c":81:58)
#loc80 = loc("CWE369_Divide_by_Zero__float_listenSocket_16.c":81:59)
#loc81 = loc("CWE369_Divide_by_Zero__float_listenSocket_16.c":81:68)
#loc82 = loc("CWE369_Divide_by_Zero__float_listenSocket_16.c":81:82)
#loc83 = loc("CWE369_Divide_by_Zero__float_listenSocket_16.c":81:21)
#loc84 = loc("CWE369_Divide_by_Zero__float_listenSocket_16.c":81:88)
#loc85 = loc("CWE369_Divide_by_Zero__float_listenSocket_16.c":82:17)
#loc86 = loc("CWE369_Divide_by_Zero__float_listenSocket_16.c":83:21)
#loc87 = loc("CWE369_Divide_by_Zero__float_listenSocket_16.c":85:17)
#loc88 = loc("CWE369_Divide_by_Zero__float_listenSocket_16.c":88:17)
#loc89 = loc("CWE369_Divide_by_Zero__float_listenSocket_16.c":85:28)
#loc90 = loc("CWE369_Divide_by_Zero__float_listenSocket_16.c":85:42)
#loc91 = loc("CWE369_Divide_by_Zero__float_listenSocket_16.c":85:21)
#loc92 = loc("CWE369_Divide_by_Zero__float_listenSocket_16.c":85:61)
#loc93 = loc("CWE369_Divide_by_Zero__float_listenSocket_16.c":86:17)
#loc94 = loc("CWE369_Divide_by_Zero__float_listenSocket_16.c":87:21)
#loc95 = loc("CWE369_Divide_by_Zero__float_listenSocket_16.c":89:39)
#loc96 = loc("CWE369_Divide_by_Zero__float_listenSocket_16.c":89:53)
#loc97 = loc("CWE369_Divide_by_Zero__float_listenSocket_16.c":89:59)
#loc98 = loc("CWE369_Divide_by_Zero__float_listenSocket_16.c":89:32)
#loc99 = loc("CWE369_Divide_by_Zero__float_listenSocket_16.c":89:17)
#loc100 = loc("CWE369_Divide_by_Zero__float_listenSocket_16.c":89:63)
#loc101 = loc("CWE369_Divide_by_Zero__float_listenSocket_16.c":90:17)
#loc102 = loc("CWE369_Divide_by_Zero__float_listenSocket_16.c":93:17)
#loc103 = loc("CWE369_Divide_by_Zero__float_listenSocket_16.c":90:21)
#loc104 = loc("CWE369_Divide_by_Zero__float_listenSocket_16.c":90:37)
#loc105 = loc("CWE369_Divide_by_Zero__float_listenSocket_16.c":91:17)
#loc106 = loc("CWE369_Divide_by_Zero__float_listenSocket_16.c":92:21)
#loc107 = loc("CWE369_Divide_by_Zero__float_listenSocket_16.c":96:35)
#loc108 = loc("CWE369_Divide_by_Zero__float_listenSocket_16.c":96:49)
#loc109 = loc("CWE369_Divide_by_Zero__float_listenSocket_16.c":96:62)
#loc110 = loc("CWE369_Divide_by_Zero__float_listenSocket_16.c":96:80)
#loc111 = loc("CWE369_Divide_by_Zero__float_listenSocket_16.c":96:83)
#loc112 = loc("CWE369_Divide_by_Zero__float_listenSocket_16.c":96:30)
#loc113 = loc("CWE369_Divide_by_Zero__float_listenSocket_16.c":96:17)
#loc114 = loc("CWE369_Divide_by_Zero__float_listenSocket_16.c":96:84)
#loc115 = loc("CWE369_Divide_by_Zero__float_listenSocket_16.c":97:17)
#loc116 = loc("CWE369_Divide_by_Zero__float_listenSocket_16.c":100:17)
#loc117 = loc("CWE369_Divide_by_Zero__float_listenSocket_16.c":97:21)
#loc118 = loc("CWE369_Divide_by_Zero__float_listenSocket_16.c":97:35)
#loc119 = loc("CWE369_Divide_by_Zero__float_listenSocket_16.c":97:48)
#loc120 = loc("CWE369_Divide_by_Zero__float_listenSocket_16.c":97:51)
#loc121 = loc("CWE369_Divide_by_Zero__float_listenSocket_16.c":97:65)
#loc122 = loc("CWE369_Divide_by_Zero__float_listenSocket_16.c":98:17)
#loc123 = loc("CWE369_Divide_by_Zero__float_listenSocket_16.c":99:21)
#loc124 = loc("CWE369_Divide_by_Zero__float_listenSocket_16.c":102:43)
#loc125 = loc("CWE369_Divide_by_Zero__float_listenSocket_16.c":102:29)
#loc126 = loc("CWE369_Divide_by_Zero__float_listenSocket_16.c":102:17)
#loc127 = loc("CWE369_Divide_by_Zero__float_listenSocket_16.c":104:36)
#loc128 = loc("CWE369_Divide_by_Zero__float_listenSocket_16.c":104:31)
#loc129 = loc("CWE369_Divide_by_Zero__float_listenSocket_16.c":104:17)
#loc130 = loc("CWE369_Divide_by_Zero__float_listenSocket_16.c":104:47)
#loc131 = loc("CWE369_Divide_by_Zero__float_listenSocket_16.c":106:20)
#loc132 = loc("CWE369_Divide_by_Zero__float_listenSocket_16.c":107:13)
#loc133 = loc("CWE369_Divide_by_Zero__float_listenSocket_16.c":110:13)
#loc134 = loc("CWE369_Divide_by_Zero__float_listenSocket_16.c":107:17)
#loc135 = loc("CWE369_Divide_by_Zero__float_listenSocket_16.c":107:33)
#loc136 = loc("CWE369_Divide_by_Zero__float_listenSocket_16.c":108:13)
#loc137 = loc("CWE369_Divide_by_Zero__float_listenSocket_16.c":109:30)
#loc138 = loc("CWE369_Divide_by_Zero__float_listenSocket_16.c":109:17)
#loc139 = loc("CWE369_Divide_by_Zero__float_listenSocket_16.c":111:13)
#loc140 = loc("CWE369_Divide_by_Zero__float_listenSocket_16.c":114:13)
#loc141 = loc("CWE369_Divide_by_Zero__float_listenSocket_16.c":111:17)
#loc142 = loc("CWE369_Divide_by_Zero__float_listenSocket_16.c":111:33)
#loc143 = loc("CWE369_Divide_by_Zero__float_listenSocket_16.c":112:13)
#loc144 = loc("CWE369_Divide_by_Zero__float_listenSocket_16.c":113:30)
#loc145 = loc("CWE369_Divide_by_Zero__float_listenSocket_16.c":113:17)
#loc146 = loc("CWE369_Divide_by_Zero__float_listenSocket_16.c":122:9)
#loc147 = loc("CWE369_Divide_by_Zero__float_listenSocket_16.c":124:5)
#loc148 = loc("CWE369_Divide_by_Zero__float_listenSocket_16.c":132:5)
#loc149 = loc("CWE369_Divide_by_Zero__float_listenSocket_16.c":124:11)
#loc150 = loc("CWE369_Divide_by_Zero__float_listenSocket_16.c":125:5)
#loc151 = loc("CWE369_Divide_by_Zero__float_listenSocket_16.c":126:9)
#loc152 = loc("CWE369_Divide_by_Zero__float_listenSocket_16.c":130:9)
#loc153 = loc("CWE369_Divide_by_Zero__float_listenSocket_16.c":128:13)
#loc154 = loc("CWE369_Divide_by_Zero__float_listenSocket_16.c":128:44)
#loc155 = loc("CWE369_Divide_by_Zero__float_listenSocket_16.c":128:32)
#loc156 = loc("CWE369_Divide_by_Zero__float_listenSocket_16.c":128:40)
#loc157 = loc("CWE369_Divide_by_Zero__float_listenSocket_16.c":129:26)
#loc158 = loc("CWE369_Divide_by_Zero__float_listenSocket_16.c":129:13)
#loc159 = loc("CWE369_Divide_by_Zero__float_listenSocket_16.c":131:9)
#loc160 = loc("CWE369_Divide_by_Zero__float_listenSocket_16.c":257:1)
#loc161 = loc("CWE369_Divide_by_Zero__float_listenSocket_16.c":261:1)
#loc162 = loc("CWE369_Divide_by_Zero__float_listenSocket_16.c":259:5)
#loc163 = loc("CWE369_Divide_by_Zero__float_listenSocket_16.c":259:13)
#loc164 = loc("CWE369_Divide_by_Zero__float_listenSocket_16.c":260:5)
#loc165 = loc("CWE369_Divide_by_Zero__float_listenSocket_16.c":260:13)
#loc166 = loc("../../../testcasesupport/std_testcase_io.h":14:1)
#loc167 = loc("../../../testcasesupport/std_testcase_io.h":14:33)
#loc168 = loc("CWE369_Divide_by_Zero__float_listenSocket_16.c":228:23)
#loc169 = loc("CWE369_Divide_by_Zero__float_listenSocket_16.c":140:1)
#loc170 = loc("CWE369_Divide_by_Zero__float_listenSocket_16.c":232:1)
#loc171 = loc("CWE369_Divide_by_Zero__float_listenSocket_16.c":142:5)
#loc172 = loc("CWE369_Divide_by_Zero__float_listenSocket_16.c":142:11)
#loc173 = loc("CWE369_Divide_by_Zero__float_listenSocket_16.c":144:12)
#loc174 = loc("CWE369_Divide_by_Zero__float_listenSocket_16.c":144:5)
#loc175 = loc("CWE369_Divide_by_Zero__float_listenSocket_16.c":145:5)
#loc176 = loc("CWE369_Divide_by_Zero__float_listenSocket_16.c":217:5)
#loc177 = loc("CWE369_Divide_by_Zero__float_listenSocket_16.c":145:11)
#loc178 = loc("CWE369_Divide_by_Zero__float_listenSocket_16.c":146:5)
#loc179 = loc("CWE369_Divide_by_Zero__float_listenSocket_16.c":147:9)
#loc180 = loc("CWE369_Divide_by_Zero__float_listenSocket_16.c":215:9)
#loc181 = loc("CWE369_Divide_by_Zero__float_listenSocket_16.c":152:13)
#loc182 = loc("CWE369_Divide_by_Zero__float_listenSocket_16.c":152:17)
#loc183 = loc("CWE369_Divide_by_Zero__float_listenSocket_16.c":153:13)
#loc184 = loc("CWE369_Divide_by_Zero__float_listenSocket_16.c":153:32)
#loc185 = loc("CWE369_Divide_by_Zero__float_listenSocket_16.c":154:13)
#loc186 = loc("CWE369_Divide_by_Zero__float_listenSocket_16.c":154:35)
#loc187 = loc("CWE369_Divide_by_Zero__float_listenSocket_16.c":155:13)
#loc188 = loc("CWE369_Divide_by_Zero__float_listenSocket_16.c":155:35)
#loc189 = loc("CWE369_Divide_by_Zero__float_listenSocket_16.c":156:13)
#loc190 = loc("CWE369_Divide_by_Zero__float_listenSocket_16.c":156:45)
#loc191 = loc("CWE369_Divide_by_Zero__float_listenSocket_16.c":157:13)
#loc192 = loc("CWE369_Divide_by_Zero__float_listenSocket_16.c":200:21)
#loc193 = loc("CWE369_Divide_by_Zero__float_listenSocket_16.c":158:13)
#loc194 = loc("CWE369_Divide_by_Zero__float_listenSocket_16.c":199:13)
#loc195 = loc("CWE369_Divide_by_Zero__float_listenSocket_16.c":166:39)
#loc196 = loc("CWE369_Divide_by_Zero__float_listenSocket_16.c":166:48)
#loc197 = loc("CWE369_Divide_by_Zero__float_listenSocket_16.c":166:61)
#loc198 = loc("CWE369_Divide_by_Zero__float_listenSocket_16.c":166:32)
#loc199 = loc("CWE369_Divide_by_Zero__float_listenSocket_16.c":166:17)
#loc200 = loc("CWE369_Divide_by_Zero__float_listenSocket_16.c":166:72)
#loc201 = loc("CWE369_Divide_by_Zero__float_listenSocket_16.c":167:17)
#loc202 = loc("CWE369_Divide_by_Zero__float_listenSocket_16.c":170:17)
#loc203 = loc("CWE369_Divide_by_Zero__float_listenSocket_16.c":167:21)
#loc204 = loc("CWE369_Divide_by_Zero__float_listenSocket_16.c":167:37)
#loc205 = loc("CWE369_Divide_by_Zero__float_listenSocket_16.c":168:17)
#loc206 = loc("CWE369_Divide_by_Zero__float_listenSocket_16.c":169:21)
#loc207 = loc("CWE369_Divide_by_Zero__float_listenSocket_16.c":171:24)
#loc208 = loc("CWE369_Divide_by_Zero__float_listenSocket_16.c":171:25)
#loc209 = loc("CWE369_Divide_by_Zero__float_listenSocket_16.c":171:34)
#loc210 = loc("CWE369_Divide_by_Zero__float_listenSocket_16.c":171:37)
#loc211 = loc("CWE369_Divide_by_Zero__float_listenSocket_16.c":171:51)
#loc212 = loc("CWE369_Divide_by_Zero__float_listenSocket_16.c":171:17)
#loc213 = loc("CWE369_Divide_by_Zero__float_listenSocket_16.c":171:52)
#loc214 = loc("CWE369_Divide_by_Zero__float_listenSocket_16.c":172:38)
#loc215 = loc("CWE369_Divide_by_Zero__float_listenSocket_16.c":172:17)
#loc216 = loc("CWE369_Divide_by_Zero__float_listenSocket_16.c":173:43)
#loc217 = loc("CWE369_Divide_by_Zero__float_listenSocket_16.c":173:17)
#loc218 = loc("CWE369_Divide_by_Zero__float_listenSocket_16.c":174:42)
#loc219 = loc("CWE369_Divide_by_Zero__float_listenSocket_16.c":174:36)
#loc220 = loc("CWE369_Divide_by_Zero__float_listenSocket_16.c":174:17)
#loc221 = loc("CWE369_Divide_by_Zero__float_listenSocket_16.c":174:50)
#loc222 = loc("CWE369_Divide_by_Zero__float_listenSocket_16.c":175:17)
#loc223 = loc("CWE369_Divide_by_Zero__float_listenSocket_16.c":178:17)
#loc224 = loc("CWE369_Divide_by_Zero__float_listenSocket_16.c":175:26)
#loc225 = loc("CWE369_Divide_by_Zero__float_listenSocket_16.c":175:58)
#loc226 = loc("CWE369_Divide_by_Zero__float_listenSocket_16.c":175:59)
#loc227 = loc("CWE369_Divide_by_Zero__float_listenSocket_16.c":175:68)
#loc228 = loc("CWE369_Divide_by_Zero__float_listenSocket_16.c":175:82)
#loc229 = loc("CWE369_Divide_by_Zero__float_listenSocket_16.c":175:21)
#loc230 = loc("CWE369_Divide_by_Zero__float_listenSocket_16.c":175:88)
#loc231 = loc("CWE369_Divide_by_Zero__float_listenSocket_16.c":176:17)
#loc232 = loc("CWE369_Divide_by_Zero__float_listenSocket_16.c":177:21)
#loc233 = loc("CWE369_Divide_by_Zero__float_listenSocket_16.c":179:17)
#loc234 = loc("CWE369_Divide_by_Zero__float_listenSocket_16.c":182:17)
#loc235 = loc("CWE369_Divide_by_Zero__float_listenSocket_16.c":179:28)
#loc236 = loc("CWE369_Divide_by_Zero__float_listenSocket_16.c":179:42)
#loc237 = loc("CWE369_Divide_by_Zero__float_listenSocket_16.c":179:21)
#loc238 = loc("CWE369_Divide_by_Zero__float_listenSocket_16.c":179:61)
#loc239 = loc("CWE369_Divide_by_Zero__float_listenSocket_16.c":180:17)
#loc240 = loc("CWE369_Divide_by_Zero__float_listenSocket_16.c":181:21)
#loc241 = loc("CWE369_Divide_by_Zero__float_listenSocket_16.c":183:39)
#loc242 = loc("CWE369_Divide_by_Zero__float_listenSocket_16.c":183:53)
#loc243 = loc("CWE369_Divide_by_Zero__float_listenSocket_16.c":183:59)
#loc244 = loc("CWE369_Divide_by_Zero__float_listenSocket_16.c":183:32)
#loc245 = loc("CWE369_Divide_by_Zero__float_listenSocket_16.c":183:17)
#loc246 = loc("CWE369_Divide_by_Zero__float_listenSocket_16.c":183:63)
#loc247 = loc("CWE369_Divide_by_Zero__float_listenSocket_16.c":184:17)
#loc248 = loc("CWE369_Divide_by_Zero__float_listenSocket_16.c":187:17)
#loc249 = loc("CWE369_Divide_by_Zero__float_listenSocket_16.c":184:21)
#loc250 = loc("CWE369_Divide_by_Zero__float_listenSocket_16.c":184:37)
#loc251 = loc("CWE369_Divide_by_Zero__float_listenSocket_16.c":185:17)
#loc252 = loc("CWE369_Divide_by_Zero__float_listenSocket_16.c":186:21)
#loc253 = loc("CWE369_Divide_by_Zero__float_listenSocket_16.c":190:35)
#loc254 = loc("CWE369_Divide_by_Zero__float_listenSocket_16.c":190:49)
#loc255 = loc("CWE369_Divide_by_Zero__float_listenSocket_16.c":190:62)
#loc256 = loc("CWE369_Divide_by_Zero__float_listenSocket_16.c":190:80)
#loc257 = loc("CWE369_Divide_by_Zero__float_listenSocket_16.c":190:83)
#loc258 = loc("CWE369_Divide_by_Zero__float_listenSocket_16.c":190:30)
#loc259 = loc("CWE369_Divide_by_Zero__float_listenSocket_16.c":190:17)
#loc260 = loc("CWE369_Divide_by_Zero__float_listenSocket_16.c":190:84)
#loc261 = loc("CWE369_Divide_by_Zero__float_listenSocket_16.c":191:17)
#loc262 = loc("CWE369_Divide_by_Zero__float_listenSocket_16.c":194:17)
#loc263 = loc("CWE369_Divide_by_Zero__float_listenSocket_16.c":191:21)
#loc264 = loc("CWE369_Divide_by_Zero__float_listenSocket_16.c":191:35)
#loc265 = loc("CWE369_Divide_by_Zero__float_listenSocket_16.c":191:48)
#loc266 = loc("CWE369_Divide_by_Zero__float_listenSocket_16.c":191:51)
#loc267 = loc("CWE369_Divide_by_Zero__float_listenSocket_16.c":191:65)
#loc268 = loc("CWE369_Divide_by_Zero__float_listenSocket_16.c":192:17)
#loc269 = loc("CWE369_Divide_by_Zero__float_listenSocket_16.c":193:21)
#loc270 = loc("CWE369_Divide_by_Zero__float_listenSocket_16.c":196:43)
#loc271 = loc("CWE369_Divide_by_Zero__float_listenSocket_16.c":196:29)
#loc272 = loc("CWE369_Divide_by_Zero__float_listenSocket_16.c":196:17)
#loc273 = loc("CWE369_Divide_by_Zero__float_listenSocket_16.c":198:36)
#loc274 = loc("CWE369_Divide_by_Zero__float_listenSocket_16.c":198:31)
#loc275 = loc("CWE369_Divide_by_Zero__float_listenSocket_16.c":198:17)
#loc276 = loc("CWE369_Divide_by_Zero__float_listenSocket_16.c":198:47)
#loc277 = loc("CWE369_Divide_by_Zero__float_listenSocket_16.c":200:20)
#loc278 = loc("CWE369_Divide_by_Zero__float_listenSocket_16.c":201:13)
#loc279 = loc("CWE369_Divide_by_Zero__float_listenSocket_16.c":204:13)
#loc280 = loc("CWE369_Divide_by_Zero__float_listenSocket_16.c":201:17)
#loc281 = loc("CWE369_Divide_by_Zero__float_listenSocket_16.c":201:33)
#loc282 = loc("CWE369_Divide_by_Zero__float_listenSocket_16.c":202:13)
#loc283 = loc("CWE369_Divide_by_Zero__float_listenSocket_16.c":203:30)
#loc284 = loc("CWE369_Divide_by_Zero__float_listenSocket_16.c":203:17)
#loc285 = loc("CWE369_Divide_by_Zero__float_listenSocket_16.c":205:13)
#loc286 = loc("CWE369_Divide_by_Zero__float_listenSocket_16.c":208:13)
#loc287 = loc("CWE369_Divide_by_Zero__float_listenSocket_16.c":205:17)
#loc288 = loc("CWE369_Divide_by_Zero__float_listenSocket_16.c":205:33)
#loc289 = loc("CWE369_Divide_by_Zero__float_listenSocket_16.c":206:13)
#loc290 = loc("CWE369_Divide_by_Zero__float_listenSocket_16.c":207:30)
#loc291 = loc("CWE369_Divide_by_Zero__float_listenSocket_16.c":207:17)
#loc292 = loc("CWE369_Divide_by_Zero__float_listenSocket_16.c":216:9)
#loc293 = loc("CWE369_Divide_by_Zero__float_listenSocket_16.c":218:5)
#loc294 = loc("CWE369_Divide_by_Zero__float_listenSocket_16.c":231:5)
#loc295 = loc("CWE369_Divide_by_Zero__float_listenSocket_16.c":218:11)
#loc296 = loc("CWE369_Divide_by_Zero__float_listenSocket_16.c":219:5)
#loc297 = loc("CWE369_Divide_by_Zero__float_listenSocket_16.c":221:9)
#loc298 = loc("CWE369_Divide_by_Zero__float_listenSocket_16.c":229:9)
#loc299 = loc("CWE369_Divide_by_Zero__float_listenSocket_16.c":221:17)
#loc300 = loc("CWE369_Divide_by_Zero__float_listenSocket_16.c":221:25)
#loc301 = loc("CWE369_Divide_by_Zero__float_listenSocket_16.c":221:12)
#loc302 = loc("CWE369_Divide_by_Zero__float_listenSocket_16.c":222:9)
#loc303 = loc("CWE369_Divide_by_Zero__float_listenSocket_16.c":225:9)
#loc304 = loc("CWE369_Divide_by_Zero__float_listenSocket_16.c":227:9)
#loc305 = loc("CWE369_Divide_by_Zero__float_listenSocket_16.c":223:13)
#loc306 = loc("CWE369_Divide_by_Zero__float_listenSocket_16.c":223:44)
#loc307 = loc("CWE369_Divide_by_Zero__float_listenSocket_16.c":223:32)
#loc308 = loc("CWE369_Divide_by_Zero__float_listenSocket_16.c":223:40)
#loc309 = loc("CWE369_Divide_by_Zero__float_listenSocket_16.c":224:26)
#loc310 = loc("CWE369_Divide_by_Zero__float_listenSocket_16.c":224:13)
#loc311 = loc("CWE369_Divide_by_Zero__float_listenSocket_16.c":228:13)
#loc312 = loc("CWE369_Divide_by_Zero__float_listenSocket_16.c":230:9)
#loc313 = loc("CWE369_Divide_by_Zero__float_listenSocket_16.c":235:1)
#loc314 = loc("CWE369_Divide_by_Zero__float_listenSocket_16.c":255:1)
#loc315 = loc("CWE369_Divide_by_Zero__float_listenSocket_16.c":237:5)
#loc316 = loc("CWE369_Divide_by_Zero__float_listenSocket_16.c":237:11)
#loc317 = loc("CWE369_Divide_by_Zero__float_listenSocket_16.c":239:12)
#loc318 = loc("CWE369_Divide_by_Zero__float_listenSocket_16.c":239:5)
#loc319 = loc("CWE369_Divide_by_Zero__float_listenSocket_16.c":240:5)
#loc320 = loc("CWE369_Divide_by_Zero__float_listenSocket_16.c":245:5)
#loc321 = loc("CWE369_Divide_by_Zero__float_listenSocket_16.c":240:11)
#loc322 = loc("CWE369_Divide_by_Zero__float_listenSocket_16.c":241:5)
#loc323 = loc("CWE369_Divide_by_Zero__float_listenSocket_16.c":243:16)
#loc324 = loc("CWE369_Divide_by_Zero__float_listenSocket_16.c":243:9)
#loc325 = loc("CWE369_Divide_by_Zero__float_listenSocket_16.c":244:9)
#loc326 = loc("CWE369_Divide_by_Zero__float_listenSocket_16.c":246:5)
#loc327 = loc("CWE369_Divide_by_Zero__float_listenSocket_16.c":254:5)
#loc328 = loc("CWE369_Divide_by_Zero__float_listenSocket_16.c":246:11)
#loc329 = loc("CWE369_Divide_by_Zero__float_listenSocket_16.c":247:5)
#loc330 = loc("CWE369_Divide_by_Zero__float_listenSocket_16.c":248:9)
#loc331 = loc("CWE369_Divide_by_Zero__float_listenSocket_16.c":252:9)
#loc332 = loc("CWE369_Divide_by_Zero__float_listenSocket_16.c":250:13)
#loc333 = loc("CWE369_Divide_by_Zero__float_listenSocket_16.c":250:44)
#loc334 = loc("CWE369_Divide_by_Zero__float_listenSocket_16.c":250:32)
#loc335 = loc("CWE369_Divide_by_Zero__float_listenSocket_16.c":250:40)
#loc336 = loc("CWE369_Divide_by_Zero__float_listenSocket_16.c":251:26)
#loc337 = loc("CWE369_Divide_by_Zero__float_listenSocket_16.c":251:13)
#loc338 = loc("CWE369_Divide_by_Zero__float_listenSocket_16.c":253:9)
#loc339 = loc(fused[#loc1, #loc2])
#loc340 = loc(fused[#loc3, #loc4])
#loc341 = loc(fused[#loc5, #loc6])
#loc342 = loc(fused[#loc7, #loc8])
#loc343 = loc(fused[#loc9, #loc10])
#loc344 = loc(fused[#loc11, #loc12])
#loc345 = loc(fused[#loc13, #loc14])
#loc346 = loc(fused[#loc15, #loc16])
#loc347 = loc(fused[#loc17, #loc18])
#loc348 = loc(fused[#loc19, #loc20])
#loc349 = loc(fused[#loc21, #loc22])
#loc350 = loc(fused[#loc24, #loc23])
#loc351 = loc(fused[#loc25, #loc26])
#loc352 = loc(fused[#loc28, #loc26])
#loc353 = loc(fused[#loc29, #loc30])
#loc354 = loc(fused[#loc31, #loc32])
#loc355 = loc(fused[#loc33, #loc34])
#loc356 = loc(fused[#loc35, #loc36])
#loc357 = loc(fused[#loc37, #loc38])
#loc358 = loc(fused[#loc39, #loc40])
#loc359 = loc(fused[#loc41, #loc42])
#loc360 = loc(fused[#loc43, #loc44])
#loc361 = loc(fused[#loc49, #loc50])
#loc362 = loc(fused[#loc51, #loc52])
#loc363 = loc(fused[#loc53, #loc54])
#loc364 = loc(fused[#loc55, #loc52])
#loc365 = loc(fused[#loc57, #loc58])
#loc366 = loc(fused[#loc60, #loc61])
#loc367 = loc(fused[#loc62, #loc63])
#loc368 = loc(fused[#loc66, #loc64])
#loc369 = loc(fused[#loc70, #loc67])
#loc370 = loc(fused[#loc74, #loc75])
#loc371 = loc(fused[#loc76, #loc77])
#loc372 = loc(fused[#loc79, #loc80])
#loc373 = loc(fused[#loc81, #loc82])
#loc374 = loc(fused[#loc83, #loc84])
#loc375 = loc(fused[#loc85, #loc77])
#loc376 = loc(fused[#loc87, #loc88])
#loc377 = loc(fused[#loc91, #loc92])
#loc378 = loc(fused[#loc93, #loc88])
#loc379 = loc(fused[#loc99, #loc100])
#loc380 = loc(fused[#loc101, #loc102])
#loc381 = loc(fused[#loc103, #loc104])
#loc382 = loc(fused[#loc105, #loc102])
#loc383 = loc(fused[#loc113, #loc114])
#loc384 = loc(fused[#loc115, #loc116])
#loc385 = loc(fused[#loc117, #loc118])
#loc386 = loc(fused[#loc120, #loc121])
#loc387 = loc(fused[#loc122, #loc116])
#loc388 = loc(fused[#loc126, #loc124])
#loc389 = loc(fused[#loc129, #loc130])
#loc390 = loc(fused[#loc132, #loc133])
#loc391 = loc(fused[#loc134, #loc135])
#loc392 = loc(fused[#loc136, #loc133])
#loc393 = loc(fused[#loc139, #loc140])
#loc394 = loc(fused[#loc141, #loc142])
#loc395 = loc(fused[#loc143, #loc140])
#loc396 = loc(fused[#loc147, #loc148])
#loc397 = loc(fused[#loc150, #loc148])
#loc398 = loc(fused[#loc151, #loc152])
#loc399 = loc(fused[#loc153, #loc154])
#loc400 = loc(fused[#loc155, #loc156])
#loc401 = loc(fused[#loc160, #loc161])
#loc402 = loc(fused[#loc162, #loc163])
#loc403 = loc(fused[#loc164, #loc165])
#loc404 = loc(fused[#loc166, #loc167])
#loc405 = loc(fused[#loc169, #loc170])
#loc406 = loc(fused[#loc171, #loc172])
#loc407 = loc(fused[#loc174, #loc173])
#loc408 = loc(fused[#loc175, #loc176])
#loc409 = loc(fused[#loc178, #loc176])
#loc410 = loc(fused[#loc179, #loc180])
#loc411 = loc(fused[#loc181, #loc182])
#loc412 = loc(fused[#loc183, #loc184])
#loc413 = loc(fused[#loc185, #loc186])
#loc414 = loc(fused[#loc187, #loc188])
#loc415 = loc(fused[#loc189, #loc190])
#loc416 = loc(fused[#loc191, #loc192])
#loc417 = loc(fused[#loc193, #loc194])
#loc418 = loc(fused[#loc199, #loc200])
#loc419 = loc(fused[#loc201, #loc202])
#loc420 = loc(fused[#loc203, #loc204])
#loc421 = loc(fused[#loc205, #loc202])
#loc422 = loc(fused[#loc207, #loc208])
#loc423 = loc(fused[#loc210, #loc211])
#loc424 = loc(fused[#loc212, #loc213])
#loc425 = loc(fused[#loc215, #loc214])
#loc426 = loc(fused[#loc217, #loc216])
#loc427 = loc(fused[#loc220, #loc221])
#loc428 = loc(fused[#loc222, #loc223])
#loc429 = loc(fused[#loc225, #loc226])
#loc430 = loc(fused[#loc227, #loc228])
#loc431 = loc(fused[#loc229, #loc230])
#loc432 = loc(fused[#loc231, #loc223])
#loc433 = loc(fused[#loc233, #loc234])
#loc434 = loc(fused[#loc237, #loc238])
#loc435 = loc(fused[#loc239, #loc234])
#loc436 = loc(fused[#loc245, #loc246])
#loc437 = loc(fused[#loc247, #loc248])
#loc438 = loc(fused[#loc249, #loc250])
#loc439 = loc(fused[#loc251, #loc248])
#loc440 = loc(fused[#loc259, #loc260])
#loc441 = loc(fused[#loc261, #loc262])
#loc442 = loc(fused[#loc263, #loc264])
#loc443 = loc(fused[#loc266, #loc267])
#loc444 = loc(fused[#loc268, #loc262])
#loc445 = loc(fused[#loc272, #loc270])
#loc446 = loc(fused[#loc275, #loc276])
#loc447 = loc(fused[#loc278, #loc279])
#loc448 = loc(fused[#loc280, #loc281])
#loc449 = loc(fused[#loc282, #loc279])
#loc450 = loc(fused[#loc285, #loc286])
#loc451 = loc(fused[#loc287, #loc288])
#loc452 = loc(fused[#loc289, #loc286])
#loc453 = loc(fused[#loc293, #loc294])
#loc454 = loc(fused[#loc296, #loc294])
#loc455 = loc(fused[#loc297, #loc298])
#loc456 = loc(fused[#loc301, #loc300])
#loc457 = loc(fused[#loc302, #loc303, #loc304, #loc298])
#loc458 = loc(fused[#loc305, #loc306])
#loc459 = loc(fused[#loc307, #loc308])
#loc460 = loc(fused[#loc313, #loc314])
#loc461 = loc(fused[#loc315, #loc316])
#loc462 = loc(fused[#loc318, #loc317])
#loc463 = loc(fused[#loc319, #loc320])
#loc464 = loc(fused[#loc322, #loc320])
#loc465 = loc(fused[#loc324, #loc323])
#loc466 = loc(fused[#loc326, #loc327])
#loc467 = loc(fused[#loc329, #loc327])
#loc468 = loc(fused[#loc330, #loc331])
#loc469 = loc(fused[#loc332, #loc333])
#loc470 = loc(fused[#loc334, #loc335])
