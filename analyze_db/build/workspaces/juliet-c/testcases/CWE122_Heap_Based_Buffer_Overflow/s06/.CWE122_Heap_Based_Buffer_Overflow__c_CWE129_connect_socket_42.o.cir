!s32i = !cir.int<s, 32>
!s64i = !cir.int<s, 64>
!s8i = !cir.int<s, 8>
!u16i = !cir.int<u, 16>
!u32i = !cir.int<u, 32>
!u64i = !cir.int<u, 64>
!u8i = !cir.int<u, 8>
!void = !cir.void
#false = #cir.bool<false> : !cir.bool
#fn_attr = #cir<extra({nothrow = #cir.nothrow})>
#fn_attr1 = #cir<extra({inline = #cir.inline<no>, nothrow = #cir.nothrow, optnone = #cir.optnone, uwtable = #cir.uwtable<async>})>
#loc18 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_connect_socket_42.c":44:22)
#loc19 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_connect_socket_42.c":44:26)
#loc202 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_connect_socket_42.c":187:26)
#loc203 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_connect_socket_42.c":187:30)
#loc371 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_connect_socket_42.c":144:26)
#loc372 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_connect_socket_42.c":144:30)
#true = #cir.bool<true> : !cir.bool
!ty_in_addr = !cir.record<struct "in_addr" {!u32i} #cir.record.decl.ast>
#loc458 = loc(fused[#loc18, #loc19])
#loc530 = loc(fused[#loc202, #loc203])
#loc595 = loc(fused[#loc371, #loc372])
!ty_sockaddr = !cir.record<struct "sockaddr" {!u16i, !cir.array<!s8i x 14>} #cir.record.decl.ast>
!ty_sockaddr_in = !cir.record<struct "sockaddr_in" {!u16i, !u16i, !ty_in_addr, !cir.array<!u8i x 8>}>
module @"/workspaces/juliet-c/testcases/CWE122_Heap_Based_Buffer_Overflow/s06/CWE122_Heap_Based_Buffer_Overflow__c_CWE129_connect_socket_42.c" attributes {cir.lang = #cir.lang<c>, cir.sob = #cir.signed_overflow_behavior<undefined>, cir.triple = "x86_64-unknown-linux-gnu", cir.type_size_info = #cir.type_size_info<char = 8, int = 32, size_t = 64>, cir.uwtable = #cir.uwtable<async>, dlti.dl_spec = #dlti.dl_spec<i64 = dense<64> : vector<2xi64>, i128 = dense<128> : vector<2xi64>, f80 = dense<128> : vector<2xi64>, !llvm.ptr = dense<64> : vector<4xi64>, i1 = dense<8> : vector<2xi64>, i16 = dense<16> : vector<2xi64>, i8 = dense<8> : vector<2xi64>, i32 = dense<32> : vector<2xi64>, !llvm.ptr<270> = dense<32> : vector<4xi64>, f64 = dense<64> : vector<2xi64>, f128 = dense<128> : vector<2xi64>, f16 = dense<16> : vector<2xi64>, !llvm.ptr<272> = dense<64> : vector<4xi64>, !llvm.ptr<271> = dense<32> : vector<4xi64>, "dlti.stack_alignment" = 128 : i64, "dlti.endianness" = "little", "dlti.mangling_mode" = "e">} {
  cir.func private @socket(!s32i, !s32i, !s32i) -> !s32i extra(#fn_attr) loc(#loc450)
  cir.func private @inet_addr(!cir.ptr<!s8i>) -> !u32i extra(#fn_attr) loc(#loc451)
  cir.global "private" constant cir_private dsolocal @".str.1" = #cir.const_array<"127.0.0.1\00" : !cir.array<!s8i x 10>> : !cir.array<!s8i x 10> {alignment = 1 : i64} loc(#loc5)
  cir.func private @htons(!u16i) -> !u16i extra(#fn_attr) loc(#loc452)
  cir.func private @connect(!s32i, !cir.ptr<!ty_sockaddr>, !u32i) -> !s32i loc(#loc453)
  cir.func private @recv(!s32i, !cir.ptr<!void>, !u64i, !s32i) -> !s64i loc(#loc454)
  cir.func private @atoi(!cir.ptr<!s8i>) -> !s32i extra(#fn_attr) loc(#loc455)
  cir.func private @close(!s32i) -> !s32i loc(#loc456)
  cir.func internal private @badSource(%arg0: !s32i loc(fused[#loc18, #loc19])) -> !s32i extra(#fn_attr1) {
    %0 = cir.alloca !s32i, !cir.ptr<!s32i>, ["data", init] {alignment = 4 : i64} loc(#loc458)
    %1 = cir.alloca !s32i, !cir.ptr<!s32i>, ["__retval"] {alignment = 4 : i64} loc(#loc17)
    cir.store %arg0, %0 : !s32i, !cir.ptr<!s32i> loc(#loc20)
    cir.scope {
      %4 = cir.alloca !s32i, !cir.ptr<!s32i>, ["recvResult"] {alignment = 4 : i64} loc(#loc460)
      %5 = cir.alloca !ty_sockaddr_in, !cir.ptr<!ty_sockaddr_in>, ["service"] {alignment = 4 : i64} loc(#loc461)
      %6 = cir.alloca !s32i, !cir.ptr<!s32i>, ["connectSocket", init] {alignment = 4 : i64} loc(#loc462)
      %7 = cir.alloca !cir.array<!s8i x 14>, !cir.ptr<!cir.array<!s8i x 14>>, ["inputBuffer"] {alignment = 1 : i64} loc(#loc463)
      %8 = cir.const #cir.int<1> : !s32i loc(#loc28)
      %9 = cir.unary(minus, %8) nsw : !s32i, !s32i loc(#loc28)
      cir.store %9, %6 : !s32i, !cir.ptr<!s32i> loc(#loc462)
      cir.scope {
        cir.do {
          cir.scope {
            %10 = cir.const #cir.int<2> : !s32i loc(#loc35)
            %11 = cir.const #cir.int<1> : !s32i loc(#loc36)
            %12 = cir.const #cir.int<6> : !s32i loc(#loc37)
            %13 = cir.call @socket(%10, %11, %12) : (!s32i, !s32i, !s32i) -> !s32i extra(#fn_attr) loc(#loc38)
            cir.store %13, %6 : !s32i, !cir.ptr<!s32i> loc(#loc466)
            cir.scope {
              %52 = cir.load %6 : !cir.ptr<!s32i>, !s32i loc(#loc43)
              %53 = cir.const #cir.int<1> : !s32i loc(#loc44)
              %54 = cir.unary(minus, %53) nsw : !s32i, !s32i loc(#loc44)
              %55 = cir.cmp(eq, %52, %54) : !s32i, !cir.bool loc(#loc468)
              cir.if %55 {
                cir.break loc(#loc46)
              } loc(#loc469)
            } loc(#loc467)
            %14 = cir.cast(bitcast, %5 : !cir.ptr<!ty_sockaddr_in>), !cir.ptr<!void> loc(#loc470)
            %15 = cir.const #cir.int<0> : !s32i loc(#loc49)
            %16 = cir.const #cir.int<16> : !u64i loc(#loc471)
            cir.libc.memset %16 bytes from %14 set to %15 : !cir.ptr<!void>, !s32i, !u64i loc(#loc472)
            %17 = cir.const #cir.int<2> : !s32i loc(#loc54)
            %18 = cir.cast(integral, %17 : !s32i), !u16i loc(#loc54)
            %19 = cir.get_member %5[0] {name = "sin_family"} : !cir.ptr<!ty_sockaddr_in> -> !cir.ptr<!u16i> loc(#loc55)
            cir.store %18, %19 : !u16i, !cir.ptr<!u16i> loc(#loc473)
            %20 = cir.get_global @".str.1" : !cir.ptr<!cir.array<!s8i x 10>> loc(#loc5)
            %21 = cir.cast(array_to_ptrdecay, %20 : !cir.ptr<!cir.array<!s8i x 10>>), !cir.ptr<!s8i> loc(#loc5)
            %22 = cir.call @inet_addr(%21) : (!cir.ptr<!s8i>) -> !u32i extra(#fn_attr) loc(#loc57)
            %23 = cir.get_member %5[2] {name = "sin_addr"} : !cir.ptr<!ty_sockaddr_in> -> !cir.ptr<!ty_in_addr> loc(#loc58)
            %24 = cir.get_member %23[0] {name = "s_addr"} : !cir.ptr<!ty_in_addr> -> !cir.ptr<!u32i> loc(#loc59)
            cir.store %22, %24 : !u32i, !cir.ptr<!u32i> loc(#loc474)
            %25 = cir.const #cir.int<27015> : !s32i loc(#loc62)
            %26 = cir.cast(integral, %25 : !s32i), !u16i loc(#loc62)
            %27 = cir.call @htons(%26) : (!u16i) -> !u16i side_effect(const) extra(#fn_attr) loc(#loc63)
            %28 = cir.get_member %5[1] {name = "sin_port"} : !cir.ptr<!ty_sockaddr_in> -> !cir.ptr<!u16i> loc(#loc64)
            cir.store %27, %28 : !u16i, !cir.ptr<!u16i> loc(#loc475)
            cir.scope {
              %52 = cir.load %6 : !cir.ptr<!s32i>, !s32i loc(#loc69)
              %53 = cir.cast(bitcast, %5 : !cir.ptr<!ty_sockaddr_in>), !cir.ptr<!ty_sockaddr> loc(#loc477)
              %54 = cir.const #cir.int<16> : !u64i loc(#loc478)
              %55 = cir.cast(integral, %54 : !u64i), !u32i loc(#loc478)
              %56 = cir.call @connect(%52, %53, %55) : (!s32i, !cir.ptr<!ty_sockaddr>, !u32i) -> !s32i loc(#loc74)
              %57 = cir.const #cir.int<1> : !s32i loc(#loc75)
              %58 = cir.unary(minus, %57) nsw : !s32i, !s32i loc(#loc75)
              %59 = cir.cmp(eq, %56, %58) : !s32i, !cir.bool loc(#loc479)
              cir.if %59 {
                cir.break loc(#loc77)
              } loc(#loc480)
            } loc(#loc476)
            %29 = cir.load %6 : !cir.ptr<!s32i>, !s32i loc(#loc78)
            %30 = cir.cast(array_to_ptrdecay, %7 : !cir.ptr<!cir.array<!s8i x 14>>), !cir.ptr<!s8i> loc(#loc79)
            %31 = cir.cast(bitcast, %30 : !cir.ptr<!s8i>), !cir.ptr<!void> loc(#loc79)
            %32 = cir.const #cir.int<3> : !s32i loc(#loc80)
            %33 = cir.cast(integral, %32 : !s32i), !u64i loc(#loc80)
            %34 = cir.const #cir.int<4> : !u64i loc(#loc80)
            %35 = cir.binop(mul, %33, %34) : !u64i loc(#loc80)
            %36 = cir.const #cir.int<2> : !s32i loc(#loc80)
            %37 = cir.cast(integral, %36 : !s32i), !u64i loc(#loc80)
            %38 = cir.binop(add, %35, %37) : !u64i loc(#loc80)
            %39 = cir.const #cir.int<1> : !s32i loc(#loc81)
            %40 = cir.cast(integral, %39 : !s32i), !u64i loc(#loc81)
            %41 = cir.binop(sub, %38, %40) : !u64i loc(#loc481)
            %42 = cir.const #cir.int<0> : !s32i loc(#loc82)
            %43 = cir.call @recv(%29, %31, %41, %42) : (!s32i, !cir.ptr<!void>, !u64i, !s32i) -> !s64i loc(#loc83)
            %44 = cir.cast(integral, %43 : !s64i), !s32i loc(#loc83)
            cir.store %44, %4 : !s32i, !cir.ptr<!s32i> loc(#loc482)
            cir.scope {
              %52 = cir.load %4 : !cir.ptr<!s32i>, !s32i loc(#loc88)
              %53 = cir.const #cir.int<1> : !s32i loc(#loc89)
              %54 = cir.unary(minus, %53) nsw : !s32i, !s32i loc(#loc89)
              %55 = cir.cmp(eq, %52, %54) : !s32i, !cir.bool loc(#loc484)
              %56 = cir.ternary(%55, true {
                %57 = cir.const #true loc(#loc90)
                cir.yield %57 : !cir.bool loc(#loc90)
              }, false {
                %57 = cir.load %4 : !cir.ptr<!s32i>, !s32i loc(#loc91)
                %58 = cir.const #cir.int<0> : !s32i loc(#loc92)
                %59 = cir.cmp(eq, %57, %58) : !s32i, !cir.bool loc(#loc485)
                %60 = cir.ternary(%59, true {
                  %61 = cir.const #true loc(#loc90)
                  cir.yield %61 : !cir.bool loc(#loc90)
                }, false {
                  %61 = cir.const #false loc(#loc90)
                  cir.yield %61 : !cir.bool loc(#loc90)
                }) : (!cir.bool) -> !cir.bool loc(#loc90)
                cir.yield %60 : !cir.bool loc(#loc90)
              }) : (!cir.bool) -> !cir.bool loc(#loc90)
              cir.if %56 {
                cir.break loc(#loc94)
              } loc(#loc486)
            } loc(#loc483)
            %45 = cir.const #cir.int<0> : !s32i loc(#loc95)
            %46 = cir.cast(integral, %45 : !s32i), !s8i loc(#loc95)
            %47 = cir.load %4 : !cir.ptr<!s32i>, !s32i loc(#loc96)
            %48 = cir.cast(array_to_ptrdecay, %7 : !cir.ptr<!cir.array<!s8i x 14>>), !cir.ptr<!s8i> loc(#loc97)
            %49 = cir.ptr_stride(%48 : !cir.ptr<!s8i>, %47 : !s32i), !cir.ptr<!s8i> loc(#loc97)
            cir.store %46, %49 : !s8i, !cir.ptr<!s8i> loc(#loc487)
            %50 = cir.cast(array_to_ptrdecay, %7 : !cir.ptr<!cir.array<!s8i x 14>>), !cir.ptr<!s8i> loc(#loc98)
            %51 = cir.call @atoi(%50) : (!cir.ptr<!s8i>) -> !s32i side_effect(pure) extra(#fn_attr) loc(#loc99)
            cir.store %51, %0 : !s32i, !cir.ptr<!s32i> loc(#loc488)
          } loc(#loc465)
          cir.yield loc(#loc32)
        } while {
          %10 = cir.const #cir.int<0> : !s32i loc(#loc102)
          %11 = cir.cast(int_to_bool, %10 : !s32i), !cir.bool loc(#loc102)
          cir.condition(%11) loc(#loc102)
        } loc(#loc464)
      } loc(#loc464)
      cir.scope {
        %10 = cir.load %6 : !cir.ptr<!s32i>, !s32i loc(#loc105)
        %11 = cir.const #cir.int<1> : !s32i loc(#loc106)
        %12 = cir.unary(minus, %11) nsw : !s32i, !s32i loc(#loc106)
        %13 = cir.cmp(ne, %10, %12) : !s32i, !cir.bool loc(#loc490)
        cir.if %13 {
          %14 = cir.load %6 : !cir.ptr<!s32i>, !s32i loc(#loc108)
          %15 = cir.call @close(%14) : (!s32i) -> !s32i loc(#loc109)
        } loc(#loc491)
      } loc(#loc489)
    } loc(#loc459)
    %2 = cir.load %0 : !cir.ptr<!s32i>, !s32i loc(#loc110)
    cir.store %2, %1 : !s32i, !cir.ptr<!s32i> loc(#loc492)
    %3 = cir.load %1 : !cir.ptr<!s32i>, !s32i loc(#loc492)
    cir.return %3 : !s32i loc(#loc492)
  } loc(#loc457)
  cir.func private @malloc(!u64i) -> !cir.ptr<!void> extra(#fn_attr) loc(#loc493)
  cir.func private @exit(!s32i) extra(#fn_attr) loc(#loc494)
  cir.func private @printIntLine(!s32i) loc(#loc495)
  cir.func private @printLine(!cir.ptr<!s8i>) loc(#loc496)
  cir.global "private" constant cir_private dsolocal @".str" = #cir.const_array<"ERROR: Array index is negative.\00" : !cir.array<!s8i x 32>> : !cir.array<!s8i x 32> {alignment = 1 : i64} loc(#loc120)
  cir.func private @free(!cir.ptr<!void>) extra(#fn_attr) loc(#loc497)
  cir.func no_proto @CWE122_Heap_Based_Buffer_Overflow__c_CWE129_connect_socket_42_bad() extra(#fn_attr1) {
    %0 = cir.alloca !s32i, !cir.ptr<!s32i>, ["data"] {alignment = 4 : i64} loc(#loc499)
    %1 = cir.const #cir.int<1> : !s32i loc(#loc127)
    %2 = cir.unary(minus, %1) nsw : !s32i, !s32i loc(#loc128)
    cir.store %2, %0 : !s32i, !cir.ptr<!s32i> loc(#loc500)
    %3 = cir.load %0 : !cir.ptr<!s32i>, !s32i loc(#loc130)
    %4 = cir.call @badSource(%3) : (!s32i) -> !s32i loc(#loc131)
    cir.store %4, %0 : !s32i, !cir.ptr<!s32i> loc(#loc501)
    cir.scope {
      %5 = cir.alloca !s32i, !cir.ptr<!s32i>, ["i"] {alignment = 4 : i64} loc(#loc503)
      %6 = cir.alloca !cir.ptr<!s32i>, !cir.ptr<!cir.ptr<!s32i>>, ["buffer", init] {alignment = 8 : i64} loc(#loc504)
      %7 = cir.get_global @malloc : !cir.ptr<!cir.func<(!u64i) -> !cir.ptr<!void>>> loc(#loc140)
      %8 = cir.const #cir.int<10> : !s32i loc(#loc141)
      %9 = cir.cast(integral, %8 : !s32i), !u64i loc(#loc141)
      %10 = cir.const #cir.int<4> : !u64i loc(#loc505)
      %11 = cir.binop(mul, %9, %10) : !u64i loc(#loc506)
      %12 = cir.call @malloc(%11) : (!u64i) -> !cir.ptr<!void> extra(#fn_attr) loc(#loc140)
      %13 = cir.cast(bitcast, %12 : !cir.ptr<!void>), !cir.ptr<!s32i> loc(#loc507)
      cir.store %13, %6 : !cir.ptr<!s32i>, !cir.ptr<!cir.ptr<!s32i>> loc(#loc504)
      cir.scope {
        %17 = cir.load %6 : !cir.ptr<!cir.ptr<!s32i>>, !cir.ptr<!s32i> loc(#loc146)
        %18 = cir.const #cir.ptr<null> : !cir.ptr<!void> loc(#loc147)
        %19 = cir.cast(bitcast, %18 : !cir.ptr<!void>), !cir.ptr<!s32i> loc(#loc147)
        %20 = cir.cmp(eq, %17, %19) : !cir.ptr<!s32i>, !cir.bool loc(#loc509)
        cir.if %20 {
          %21 = cir.get_global @exit : !cir.ptr<!cir.func<(!s32i)>> loc(#loc149)
          %22 = cir.const #cir.int<1> : !s32i loc(#loc150)
          %23 = cir.unary(minus, %22) nsw : !s32i, !s32i loc(#loc151)
          cir.call @exit(%23) : (!s32i) -> () extra(#fn_attr) loc(#loc149)
        } loc(#loc510)
      } loc(#loc508)
      cir.scope {
        %17 = cir.const #cir.int<0> : !s32i loc(#loc154)
        cir.store %17, %5 : !s32i, !cir.ptr<!s32i> loc(#loc512)
        cir.for : cond {
          %18 = cir.load %5 : !cir.ptr<!s32i>, !s32i loc(#loc156)
          %19 = cir.const #cir.int<10> : !s32i loc(#loc157)
          %20 = cir.cmp(lt, %18, %19) : !s32i, !cir.bool loc(#loc513)
          cir.condition(%20) loc(#loc158)
        } body {
          cir.scope {
            %18 = cir.const #cir.int<0> : !s32i loc(#loc160)
            %19 = cir.load %6 : !cir.ptr<!cir.ptr<!s32i>>, !cir.ptr<!s32i> loc(#loc161)
            %20 = cir.load %5 : !cir.ptr<!s32i>, !s32i loc(#loc162)
            %21 = cir.ptr_stride(%19 : !cir.ptr<!s32i>, %20 : !s32i), !cir.ptr<!s32i> loc(#loc163)
            cir.store %18, %21 : !s32i, !cir.ptr<!s32i> loc(#loc515)
          } loc(#loc514)
          cir.yield loc(#loc153)
        } step {
          %18 = cir.load %5 : !cir.ptr<!s32i>, !s32i loc(#loc164)
          %19 = cir.unary(inc, %18) nsw : !s32i, !s32i loc(#loc165)
          cir.store %19, %5 : !s32i, !cir.ptr<!s32i> loc(#loc516)
          cir.yield loc(#loc511)
        } loc(#loc511)
      } loc(#loc511)
      cir.scope {
        %17 = cir.load %0 : !cir.ptr<!s32i>, !s32i loc(#loc168)
        %18 = cir.const #cir.int<0> : !s32i loc(#loc169)
        %19 = cir.cmp(ge, %17, %18) : !s32i, !cir.bool loc(#loc518)
        cir.if %19 {
          %20 = cir.const #cir.int<1> : !s32i loc(#loc173)
          %21 = cir.load %6 : !cir.ptr<!cir.ptr<!s32i>>, !cir.ptr<!s32i> loc(#loc174)
          %22 = cir.load %0 : !cir.ptr<!s32i>, !s32i loc(#loc175)
          %23 = cir.ptr_stride(%21 : !cir.ptr<!s32i>, %22 : !s32i), !cir.ptr<!s32i> loc(#loc176)
          cir.store %20, %23 : !s32i, !cir.ptr<!s32i> loc(#loc520)
          cir.scope {
            %24 = cir.const #cir.int<0> : !s32i loc(#loc179)
            cir.store %24, %5 : !s32i, !cir.ptr<!s32i> loc(#loc522)
            cir.for : cond {
              %25 = cir.load %5 : !cir.ptr<!s32i>, !s32i loc(#loc181)
              %26 = cir.const #cir.int<10> : !s32i loc(#loc182)
              %27 = cir.cmp(lt, %25, %26) : !s32i, !cir.bool loc(#loc523)
              cir.condition(%27) loc(#loc183)
            } body {
              cir.scope {
                %25 = cir.load %6 : !cir.ptr<!cir.ptr<!s32i>>, !cir.ptr<!s32i> loc(#loc185)
                %26 = cir.load %5 : !cir.ptr<!s32i>, !s32i loc(#loc186)
                %27 = cir.ptr_stride(%25 : !cir.ptr<!s32i>, %26 : !s32i), !cir.ptr<!s32i> loc(#loc187)
                %28 = cir.load %27 : !cir.ptr<!s32i>, !s32i loc(#loc185)
                cir.call @printIntLine(%28) : (!s32i) -> () loc(#loc188)
              } loc(#loc524)
              cir.yield loc(#loc178)
            } step {
              %25 = cir.load %5 : !cir.ptr<!s32i>, !s32i loc(#loc189)
              %26 = cir.unary(inc, %25) nsw : !s32i, !s32i loc(#loc190)
              cir.store %26, %5 : !s32i, !cir.ptr<!s32i> loc(#loc525)
              cir.yield loc(#loc521)
            } loc(#loc521)
          } loc(#loc521)
        } else {
          %20 = cir.get_global @".str" : !cir.ptr<!cir.array<!s8i x 32>> loc(#loc120)
          %21 = cir.cast(array_to_ptrdecay, %20 : !cir.ptr<!cir.array<!s8i x 32>>), !cir.ptr<!s8i> loc(#loc120)
          cir.call @printLine(%21) : (!cir.ptr<!s8i>) -> () loc(#loc191)
        } loc(#loc519)
      } loc(#loc517)
      %14 = cir.get_global @free : !cir.ptr<!cir.func<(!cir.ptr<!void>)>> loc(#loc192)
      %15 = cir.load %6 : !cir.ptr<!cir.ptr<!s32i>>, !cir.ptr<!s32i> loc(#loc193)
      %16 = cir.cast(bitcast, %15 : !cir.ptr<!s32i>), !cir.ptr<!void> loc(#loc193)
      cir.call @free(%16) : (!cir.ptr<!void>) -> () extra(#fn_attr) loc(#loc192)
    } loc(#loc502)
    cir.return loc(#loc124)
  } loc(#loc498)
  cir.func no_proto @CWE122_Heap_Based_Buffer_Overflow__c_CWE129_connect_socket_42_good() extra(#fn_attr1) {
    %0 = cir.get_global @goodB2G : !cir.ptr<!cir.func<()>> loc(#loc527)
    cir.call %0() : (!cir.ptr<!cir.func<()>>) -> () loc(#loc196)
    %1 = cir.get_global @goodG2B : !cir.ptr<!cir.func<()>> loc(#loc528)
    cir.call %1() : (!cir.ptr<!cir.func<()>>) -> () loc(#loc198)
    cir.return loc(#loc195)
  } loc(#loc526)
  cir.func internal private @goodB2GSource(%arg0: !s32i loc(fused[#loc202, #loc203])) -> !s32i extra(#fn_attr1) {
    %0 = cir.alloca !s32i, !cir.ptr<!s32i>, ["data", init] {alignment = 4 : i64} loc(#loc530)
    %1 = cir.alloca !s32i, !cir.ptr<!s32i>, ["__retval"] {alignment = 4 : i64} loc(#loc201)
    cir.store %arg0, %0 : !s32i, !cir.ptr<!s32i> loc(#loc204)
    cir.scope {
      %4 = cir.alloca !s32i, !cir.ptr<!s32i>, ["recvResult"] {alignment = 4 : i64} loc(#loc532)
      %5 = cir.alloca !ty_sockaddr_in, !cir.ptr<!ty_sockaddr_in>, ["service"] {alignment = 4 : i64} loc(#loc533)
      %6 = cir.alloca !s32i, !cir.ptr<!s32i>, ["connectSocket", init] {alignment = 4 : i64} loc(#loc534)
      %7 = cir.alloca !cir.array<!s8i x 14>, !cir.ptr<!cir.array<!s8i x 14>>, ["inputBuffer"] {alignment = 1 : i64} loc(#loc535)
      %8 = cir.const #cir.int<1> : !s32i loc(#loc212)
      %9 = cir.unary(minus, %8) nsw : !s32i, !s32i loc(#loc212)
      cir.store %9, %6 : !s32i, !cir.ptr<!s32i> loc(#loc534)
      cir.scope {
        cir.do {
          cir.scope {
            %10 = cir.const #cir.int<2> : !s32i loc(#loc219)
            %11 = cir.const #cir.int<1> : !s32i loc(#loc220)
            %12 = cir.const #cir.int<6> : !s32i loc(#loc221)
            %13 = cir.call @socket(%10, %11, %12) : (!s32i, !s32i, !s32i) -> !s32i extra(#fn_attr) loc(#loc222)
            cir.store %13, %6 : !s32i, !cir.ptr<!s32i> loc(#loc538)
            cir.scope {
              %52 = cir.load %6 : !cir.ptr<!s32i>, !s32i loc(#loc227)
              %53 = cir.const #cir.int<1> : !s32i loc(#loc228)
              %54 = cir.unary(minus, %53) nsw : !s32i, !s32i loc(#loc228)
              %55 = cir.cmp(eq, %52, %54) : !s32i, !cir.bool loc(#loc540)
              cir.if %55 {
                cir.break loc(#loc230)
              } loc(#loc541)
            } loc(#loc539)
            %14 = cir.cast(bitcast, %5 : !cir.ptr<!ty_sockaddr_in>), !cir.ptr<!void> loc(#loc542)
            %15 = cir.const #cir.int<0> : !s32i loc(#loc233)
            %16 = cir.const #cir.int<16> : !u64i loc(#loc543)
            cir.libc.memset %16 bytes from %14 set to %15 : !cir.ptr<!void>, !s32i, !u64i loc(#loc544)
            %17 = cir.const #cir.int<2> : !s32i loc(#loc238)
            %18 = cir.cast(integral, %17 : !s32i), !u16i loc(#loc238)
            %19 = cir.get_member %5[0] {name = "sin_family"} : !cir.ptr<!ty_sockaddr_in> -> !cir.ptr<!u16i> loc(#loc55)
            cir.store %18, %19 : !u16i, !cir.ptr<!u16i> loc(#loc545)
            %20 = cir.get_global @".str.1" : !cir.ptr<!cir.array<!s8i x 10>> loc(#loc240)
            %21 = cir.cast(array_to_ptrdecay, %20 : !cir.ptr<!cir.array<!s8i x 10>>), !cir.ptr<!s8i> loc(#loc240)
            %22 = cir.call @inet_addr(%21) : (!cir.ptr<!s8i>) -> !u32i extra(#fn_attr) loc(#loc241)
            %23 = cir.get_member %5[2] {name = "sin_addr"} : !cir.ptr<!ty_sockaddr_in> -> !cir.ptr<!ty_in_addr> loc(#loc58)
            %24 = cir.get_member %23[0] {name = "s_addr"} : !cir.ptr<!ty_in_addr> -> !cir.ptr<!u32i> loc(#loc59)
            cir.store %22, %24 : !u32i, !cir.ptr<!u32i> loc(#loc546)
            %25 = cir.const #cir.int<27015> : !s32i loc(#loc244)
            %26 = cir.cast(integral, %25 : !s32i), !u16i loc(#loc244)
            %27 = cir.call @htons(%26) : (!u16i) -> !u16i side_effect(const) extra(#fn_attr) loc(#loc245)
            %28 = cir.get_member %5[1] {name = "sin_port"} : !cir.ptr<!ty_sockaddr_in> -> !cir.ptr<!u16i> loc(#loc64)
            cir.store %27, %28 : !u16i, !cir.ptr<!u16i> loc(#loc547)
            cir.scope {
              %52 = cir.load %6 : !cir.ptr<!s32i>, !s32i loc(#loc250)
              %53 = cir.cast(bitcast, %5 : !cir.ptr<!ty_sockaddr_in>), !cir.ptr<!ty_sockaddr> loc(#loc549)
              %54 = cir.const #cir.int<16> : !u64i loc(#loc550)
              %55 = cir.cast(integral, %54 : !u64i), !u32i loc(#loc550)
              %56 = cir.call @connect(%52, %53, %55) : (!s32i, !cir.ptr<!ty_sockaddr>, !u32i) -> !s32i loc(#loc255)
              %57 = cir.const #cir.int<1> : !s32i loc(#loc256)
              %58 = cir.unary(minus, %57) nsw : !s32i, !s32i loc(#loc256)
              %59 = cir.cmp(eq, %56, %58) : !s32i, !cir.bool loc(#loc551)
              cir.if %59 {
                cir.break loc(#loc258)
              } loc(#loc552)
            } loc(#loc548)
            %29 = cir.load %6 : !cir.ptr<!s32i>, !s32i loc(#loc259)
            %30 = cir.cast(array_to_ptrdecay, %7 : !cir.ptr<!cir.array<!s8i x 14>>), !cir.ptr<!s8i> loc(#loc260)
            %31 = cir.cast(bitcast, %30 : !cir.ptr<!s8i>), !cir.ptr<!void> loc(#loc260)
            %32 = cir.const #cir.int<3> : !s32i loc(#loc261)
            %33 = cir.cast(integral, %32 : !s32i), !u64i loc(#loc261)
            %34 = cir.const #cir.int<4> : !u64i loc(#loc261)
            %35 = cir.binop(mul, %33, %34) : !u64i loc(#loc261)
            %36 = cir.const #cir.int<2> : !s32i loc(#loc261)
            %37 = cir.cast(integral, %36 : !s32i), !u64i loc(#loc261)
            %38 = cir.binop(add, %35, %37) : !u64i loc(#loc261)
            %39 = cir.const #cir.int<1> : !s32i loc(#loc262)
            %40 = cir.cast(integral, %39 : !s32i), !u64i loc(#loc262)
            %41 = cir.binop(sub, %38, %40) : !u64i loc(#loc553)
            %42 = cir.const #cir.int<0> : !s32i loc(#loc263)
            %43 = cir.call @recv(%29, %31, %41, %42) : (!s32i, !cir.ptr<!void>, !u64i, !s32i) -> !s64i loc(#loc264)
            %44 = cir.cast(integral, %43 : !s64i), !s32i loc(#loc264)
            cir.store %44, %4 : !s32i, !cir.ptr<!s32i> loc(#loc554)
            cir.scope {
              %52 = cir.load %4 : !cir.ptr<!s32i>, !s32i loc(#loc269)
              %53 = cir.const #cir.int<1> : !s32i loc(#loc270)
              %54 = cir.unary(minus, %53) nsw : !s32i, !s32i loc(#loc270)
              %55 = cir.cmp(eq, %52, %54) : !s32i, !cir.bool loc(#loc556)
              %56 = cir.ternary(%55, true {
                %57 = cir.const #true loc(#loc271)
                cir.yield %57 : !cir.bool loc(#loc271)
              }, false {
                %57 = cir.load %4 : !cir.ptr<!s32i>, !s32i loc(#loc272)
                %58 = cir.const #cir.int<0> : !s32i loc(#loc273)
                %59 = cir.cmp(eq, %57, %58) : !s32i, !cir.bool loc(#loc557)
                %60 = cir.ternary(%59, true {
                  %61 = cir.const #true loc(#loc271)
                  cir.yield %61 : !cir.bool loc(#loc271)
                }, false {
                  %61 = cir.const #false loc(#loc271)
                  cir.yield %61 : !cir.bool loc(#loc271)
                }) : (!cir.bool) -> !cir.bool loc(#loc271)
                cir.yield %60 : !cir.bool loc(#loc271)
              }) : (!cir.bool) -> !cir.bool loc(#loc271)
              cir.if %56 {
                cir.break loc(#loc275)
              } loc(#loc558)
            } loc(#loc555)
            %45 = cir.const #cir.int<0> : !s32i loc(#loc276)
            %46 = cir.cast(integral, %45 : !s32i), !s8i loc(#loc276)
            %47 = cir.load %4 : !cir.ptr<!s32i>, !s32i loc(#loc277)
            %48 = cir.cast(array_to_ptrdecay, %7 : !cir.ptr<!cir.array<!s8i x 14>>), !cir.ptr<!s8i> loc(#loc278)
            %49 = cir.ptr_stride(%48 : !cir.ptr<!s8i>, %47 : !s32i), !cir.ptr<!s8i> loc(#loc278)
            cir.store %46, %49 : !s8i, !cir.ptr<!s8i> loc(#loc559)
            %50 = cir.cast(array_to_ptrdecay, %7 : !cir.ptr<!cir.array<!s8i x 14>>), !cir.ptr<!s8i> loc(#loc279)
            %51 = cir.call @atoi(%50) : (!cir.ptr<!s8i>) -> !s32i side_effect(pure) extra(#fn_attr) loc(#loc280)
            cir.store %51, %0 : !s32i, !cir.ptr<!s32i> loc(#loc560)
          } loc(#loc537)
          cir.yield loc(#loc216)
        } while {
          %10 = cir.const #cir.int<0> : !s32i loc(#loc283)
          %11 = cir.cast(int_to_bool, %10 : !s32i), !cir.bool loc(#loc283)
          cir.condition(%11) loc(#loc283)
        } loc(#loc536)
      } loc(#loc536)
      cir.scope {
        %10 = cir.load %6 : !cir.ptr<!s32i>, !s32i loc(#loc286)
        %11 = cir.const #cir.int<1> : !s32i loc(#loc287)
        %12 = cir.unary(minus, %11) nsw : !s32i, !s32i loc(#loc287)
        %13 = cir.cmp(ne, %10, %12) : !s32i, !cir.bool loc(#loc562)
        cir.if %13 {
          %14 = cir.load %6 : !cir.ptr<!s32i>, !s32i loc(#loc289)
          %15 = cir.call @close(%14) : (!s32i) -> !s32i loc(#loc290)
        } loc(#loc563)
      } loc(#loc561)
    } loc(#loc531)
    %2 = cir.load %0 : !cir.ptr<!s32i>, !s32i loc(#loc291)
    cir.store %2, %1 : !s32i, !cir.ptr<!s32i> loc(#loc564)
    %3 = cir.load %1 : !cir.ptr<!s32i>, !s32i loc(#loc564)
    cir.return %3 : !s32i loc(#loc564)
  } loc(#loc529)
  cir.global "private" constant cir_private dsolocal @".str.2" = #cir.const_array<"ERROR: Array index is out-of-bounds\00" : !cir.array<!s8i x 36>> : !cir.array<!s8i x 36> {alignment = 1 : i64} loc(#loc293)
  cir.func no_proto internal private @goodB2G() extra(#fn_attr1) {
    %0 = cir.alloca !s32i, !cir.ptr<!s32i>, ["data"] {alignment = 4 : i64} loc(#loc566)
    %1 = cir.const #cir.int<1> : !s32i loc(#loc298)
    %2 = cir.unary(minus, %1) nsw : !s32i, !s32i loc(#loc299)
    cir.store %2, %0 : !s32i, !cir.ptr<!s32i> loc(#loc567)
    %3 = cir.load %0 : !cir.ptr<!s32i>, !s32i loc(#loc301)
    %4 = cir.call @goodB2GSource(%3) : (!s32i) -> !s32i loc(#loc302)
    cir.store %4, %0 : !s32i, !cir.ptr<!s32i> loc(#loc568)
    cir.scope {
      %5 = cir.alloca !s32i, !cir.ptr<!s32i>, ["i"] {alignment = 4 : i64} loc(#loc570)
      %6 = cir.alloca !cir.ptr<!s32i>, !cir.ptr<!cir.ptr<!s32i>>, ["buffer", init] {alignment = 8 : i64} loc(#loc571)
      %7 = cir.get_global @malloc : !cir.ptr<!cir.func<(!u64i) -> !cir.ptr<!void>>> loc(#loc311)
      %8 = cir.const #cir.int<10> : !s32i loc(#loc312)
      %9 = cir.cast(integral, %8 : !s32i), !u64i loc(#loc312)
      %10 = cir.const #cir.int<4> : !u64i loc(#loc572)
      %11 = cir.binop(mul, %9, %10) : !u64i loc(#loc573)
      %12 = cir.call @malloc(%11) : (!u64i) -> !cir.ptr<!void> extra(#fn_attr) loc(#loc311)
      %13 = cir.cast(bitcast, %12 : !cir.ptr<!void>), !cir.ptr<!s32i> loc(#loc574)
      cir.store %13, %6 : !cir.ptr<!s32i>, !cir.ptr<!cir.ptr<!s32i>> loc(#loc571)
      cir.scope {
        %17 = cir.load %6 : !cir.ptr<!cir.ptr<!s32i>>, !cir.ptr<!s32i> loc(#loc317)
        %18 = cir.const #cir.ptr<null> : !cir.ptr<!void> loc(#loc318)
        %19 = cir.cast(bitcast, %18 : !cir.ptr<!void>), !cir.ptr<!s32i> loc(#loc318)
        %20 = cir.cmp(eq, %17, %19) : !cir.ptr<!s32i>, !cir.bool loc(#loc576)
        cir.if %20 {
          %21 = cir.get_global @exit : !cir.ptr<!cir.func<(!s32i)>> loc(#loc320)
          %22 = cir.const #cir.int<1> : !s32i loc(#loc321)
          %23 = cir.unary(minus, %22) nsw : !s32i, !s32i loc(#loc322)
          cir.call @exit(%23) : (!s32i) -> () extra(#fn_attr) loc(#loc320)
        } loc(#loc577)
      } loc(#loc575)
      cir.scope {
        %17 = cir.const #cir.int<0> : !s32i loc(#loc325)
        cir.store %17, %5 : !s32i, !cir.ptr<!s32i> loc(#loc579)
        cir.for : cond {
          %18 = cir.load %5 : !cir.ptr<!s32i>, !s32i loc(#loc327)
          %19 = cir.const #cir.int<10> : !s32i loc(#loc328)
          %20 = cir.cmp(lt, %18, %19) : !s32i, !cir.bool loc(#loc580)
          cir.condition(%20) loc(#loc329)
        } body {
          cir.scope {
            %18 = cir.const #cir.int<0> : !s32i loc(#loc331)
            %19 = cir.load %6 : !cir.ptr<!cir.ptr<!s32i>>, !cir.ptr<!s32i> loc(#loc332)
            %20 = cir.load %5 : !cir.ptr<!s32i>, !s32i loc(#loc333)
            %21 = cir.ptr_stride(%19 : !cir.ptr<!s32i>, %20 : !s32i), !cir.ptr<!s32i> loc(#loc334)
            cir.store %18, %21 : !s32i, !cir.ptr<!s32i> loc(#loc582)
          } loc(#loc581)
          cir.yield loc(#loc324)
        } step {
          %18 = cir.load %5 : !cir.ptr<!s32i>, !s32i loc(#loc335)
          %19 = cir.unary(inc, %18) nsw : !s32i, !s32i loc(#loc336)
          cir.store %19, %5 : !s32i, !cir.ptr<!s32i> loc(#loc583)
          cir.yield loc(#loc578)
        } loc(#loc578)
      } loc(#loc578)
      cir.scope {
        %17 = cir.load %0 : !cir.ptr<!s32i>, !s32i loc(#loc339)
        %18 = cir.const #cir.int<0> : !s32i loc(#loc340)
        %19 = cir.cmp(ge, %17, %18) : !s32i, !cir.bool loc(#loc585)
        %20 = cir.ternary(%19, true {
          %21 = cir.load %0 : !cir.ptr<!s32i>, !s32i loc(#loc342)
          %22 = cir.const #cir.int<10> : !s32i loc(#loc343)
          %23 = cir.cmp(lt, %21, %22) : !s32i, !cir.bool loc(#loc586)
          %24 = cir.ternary(%23, true {
            %25 = cir.const #true loc(#loc341)
            cir.yield %25 : !cir.bool loc(#loc341)
          }, false {
            %25 = cir.const #false loc(#loc341)
            cir.yield %25 : !cir.bool loc(#loc341)
          }) : (!cir.bool) -> !cir.bool loc(#loc341)
          cir.yield %24 : !cir.bool loc(#loc341)
        }, false {
          %21 = cir.const #false loc(#loc341)
          cir.yield %21 : !cir.bool loc(#loc341)
        }) : (!cir.bool) -> !cir.bool loc(#loc341)
        cir.if %20 {
          %21 = cir.const #cir.int<1> : !s32i loc(#loc348)
          %22 = cir.load %6 : !cir.ptr<!cir.ptr<!s32i>>, !cir.ptr<!s32i> loc(#loc349)
          %23 = cir.load %0 : !cir.ptr<!s32i>, !s32i loc(#loc350)
          %24 = cir.ptr_stride(%22 : !cir.ptr<!s32i>, %23 : !s32i), !cir.ptr<!s32i> loc(#loc351)
          cir.store %21, %24 : !s32i, !cir.ptr<!s32i> loc(#loc588)
          cir.scope {
            %25 = cir.const #cir.int<0> : !s32i loc(#loc354)
            cir.store %25, %5 : !s32i, !cir.ptr<!s32i> loc(#loc590)
            cir.for : cond {
              %26 = cir.load %5 : !cir.ptr<!s32i>, !s32i loc(#loc356)
              %27 = cir.const #cir.int<10> : !s32i loc(#loc357)
              %28 = cir.cmp(lt, %26, %27) : !s32i, !cir.bool loc(#loc591)
              cir.condition(%28) loc(#loc358)
            } body {
              cir.scope {
                %26 = cir.load %6 : !cir.ptr<!cir.ptr<!s32i>>, !cir.ptr<!s32i> loc(#loc360)
                %27 = cir.load %5 : !cir.ptr<!s32i>, !s32i loc(#loc361)
                %28 = cir.ptr_stride(%26 : !cir.ptr<!s32i>, %27 : !s32i), !cir.ptr<!s32i> loc(#loc362)
                %29 = cir.load %28 : !cir.ptr<!s32i>, !s32i loc(#loc360)
                cir.call @printIntLine(%29) : (!s32i) -> () loc(#loc363)
              } loc(#loc592)
              cir.yield loc(#loc353)
            } step {
              %26 = cir.load %5 : !cir.ptr<!s32i>, !s32i loc(#loc364)
              %27 = cir.unary(inc, %26) nsw : !s32i, !s32i loc(#loc365)
              cir.store %27, %5 : !s32i, !cir.ptr<!s32i> loc(#loc593)
              cir.yield loc(#loc589)
            } loc(#loc589)
          } loc(#loc589)
        } else {
          %21 = cir.get_global @".str.2" : !cir.ptr<!cir.array<!s8i x 36>> loc(#loc293)
          %22 = cir.cast(array_to_ptrdecay, %21 : !cir.ptr<!cir.array<!s8i x 36>>), !cir.ptr<!s8i> loc(#loc293)
          cir.call @printLine(%22) : (!cir.ptr<!s8i>) -> () loc(#loc366)
        } loc(#loc587)
      } loc(#loc584)
      %14 = cir.get_global @free : !cir.ptr<!cir.func<(!cir.ptr<!void>)>> loc(#loc367)
      %15 = cir.load %6 : !cir.ptr<!cir.ptr<!s32i>>, !cir.ptr<!s32i> loc(#loc368)
      %16 = cir.cast(bitcast, %15 : !cir.ptr<!s32i>), !cir.ptr<!void> loc(#loc368)
      cir.call @free(%16) : (!cir.ptr<!void>) -> () extra(#fn_attr) loc(#loc367)
    } loc(#loc569)
    cir.return loc(#loc295)
  } loc(#loc565)
  cir.func internal private @goodG2BSource(%arg0: !s32i loc(fused[#loc371, #loc372])) -> !s32i extra(#fn_attr1) {
    %0 = cir.alloca !s32i, !cir.ptr<!s32i>, ["data", init] {alignment = 4 : i64} loc(#loc595)
    %1 = cir.alloca !s32i, !cir.ptr<!s32i>, ["__retval"] {alignment = 4 : i64} loc(#loc370)
    cir.store %arg0, %0 : !s32i, !cir.ptr<!s32i> loc(#loc373)
    %2 = cir.const #cir.int<7> : !s32i loc(#loc374)
    cir.store %2, %0 : !s32i, !cir.ptr<!s32i> loc(#loc596)
    %3 = cir.load %0 : !cir.ptr<!s32i>, !s32i loc(#loc376)
    cir.store %3, %1 : !s32i, !cir.ptr<!s32i> loc(#loc597)
    %4 = cir.load %1 : !cir.ptr<!s32i>, !s32i loc(#loc597)
    cir.return %4 : !s32i loc(#loc597)
  } loc(#loc594)
  cir.func no_proto internal private @goodG2B() extra(#fn_attr1) {
    %0 = cir.alloca !s32i, !cir.ptr<!s32i>, ["data"] {alignment = 4 : i64} loc(#loc599)
    %1 = cir.const #cir.int<1> : !s32i loc(#loc382)
    %2 = cir.unary(minus, %1) nsw : !s32i, !s32i loc(#loc383)
    cir.store %2, %0 : !s32i, !cir.ptr<!s32i> loc(#loc600)
    %3 = cir.load %0 : !cir.ptr<!s32i>, !s32i loc(#loc385)
    %4 = cir.call @goodG2BSource(%3) : (!s32i) -> !s32i loc(#loc386)
    cir.store %4, %0 : !s32i, !cir.ptr<!s32i> loc(#loc601)
    cir.scope {
      %5 = cir.alloca !s32i, !cir.ptr<!s32i>, ["i"] {alignment = 4 : i64} loc(#loc603)
      %6 = cir.alloca !cir.ptr<!s32i>, !cir.ptr<!cir.ptr<!s32i>>, ["buffer", init] {alignment = 8 : i64} loc(#loc604)
      %7 = cir.get_global @malloc : !cir.ptr<!cir.func<(!u64i) -> !cir.ptr<!void>>> loc(#loc395)
      %8 = cir.const #cir.int<10> : !s32i loc(#loc396)
      %9 = cir.cast(integral, %8 : !s32i), !u64i loc(#loc396)
      %10 = cir.const #cir.int<4> : !u64i loc(#loc605)
      %11 = cir.binop(mul, %9, %10) : !u64i loc(#loc606)
      %12 = cir.call @malloc(%11) : (!u64i) -> !cir.ptr<!void> extra(#fn_attr) loc(#loc395)
      %13 = cir.cast(bitcast, %12 : !cir.ptr<!void>), !cir.ptr<!s32i> loc(#loc607)
      cir.store %13, %6 : !cir.ptr<!s32i>, !cir.ptr<!cir.ptr<!s32i>> loc(#loc604)
      cir.scope {
        %17 = cir.load %6 : !cir.ptr<!cir.ptr<!s32i>>, !cir.ptr<!s32i> loc(#loc401)
        %18 = cir.const #cir.ptr<null> : !cir.ptr<!void> loc(#loc402)
        %19 = cir.cast(bitcast, %18 : !cir.ptr<!void>), !cir.ptr<!s32i> loc(#loc402)
        %20 = cir.cmp(eq, %17, %19) : !cir.ptr<!s32i>, !cir.bool loc(#loc609)
        cir.if %20 {
          %21 = cir.get_global @exit : !cir.ptr<!cir.func<(!s32i)>> loc(#loc404)
          %22 = cir.const #cir.int<1> : !s32i loc(#loc405)
          %23 = cir.unary(minus, %22) nsw : !s32i, !s32i loc(#loc406)
          cir.call @exit(%23) : (!s32i) -> () extra(#fn_attr) loc(#loc404)
        } loc(#loc610)
      } loc(#loc608)
      cir.scope {
        %17 = cir.const #cir.int<0> : !s32i loc(#loc409)
        cir.store %17, %5 : !s32i, !cir.ptr<!s32i> loc(#loc612)
        cir.for : cond {
          %18 = cir.load %5 : !cir.ptr<!s32i>, !s32i loc(#loc411)
          %19 = cir.const #cir.int<10> : !s32i loc(#loc412)
          %20 = cir.cmp(lt, %18, %19) : !s32i, !cir.bool loc(#loc613)
          cir.condition(%20) loc(#loc413)
        } body {
          cir.scope {
            %18 = cir.const #cir.int<0> : !s32i loc(#loc415)
            %19 = cir.load %6 : !cir.ptr<!cir.ptr<!s32i>>, !cir.ptr<!s32i> loc(#loc416)
            %20 = cir.load %5 : !cir.ptr<!s32i>, !s32i loc(#loc417)
            %21 = cir.ptr_stride(%19 : !cir.ptr<!s32i>, %20 : !s32i), !cir.ptr<!s32i> loc(#loc418)
            cir.store %18, %21 : !s32i, !cir.ptr<!s32i> loc(#loc615)
          } loc(#loc614)
          cir.yield loc(#loc408)
        } step {
          %18 = cir.load %5 : !cir.ptr<!s32i>, !s32i loc(#loc419)
          %19 = cir.unary(inc, %18) nsw : !s32i, !s32i loc(#loc420)
          cir.store %19, %5 : !s32i, !cir.ptr<!s32i> loc(#loc616)
          cir.yield loc(#loc611)
        } loc(#loc611)
      } loc(#loc611)
      cir.scope {
        %17 = cir.load %0 : !cir.ptr<!s32i>, !s32i loc(#loc423)
        %18 = cir.const #cir.int<0> : !s32i loc(#loc424)
        %19 = cir.cmp(ge, %17, %18) : !s32i, !cir.bool loc(#loc618)
        cir.if %19 {
          %20 = cir.const #cir.int<1> : !s32i loc(#loc428)
          %21 = cir.load %6 : !cir.ptr<!cir.ptr<!s32i>>, !cir.ptr<!s32i> loc(#loc429)
          %22 = cir.load %0 : !cir.ptr<!s32i>, !s32i loc(#loc430)
          %23 = cir.ptr_stride(%21 : !cir.ptr<!s32i>, %22 : !s32i), !cir.ptr<!s32i> loc(#loc431)
          cir.store %20, %23 : !s32i, !cir.ptr<!s32i> loc(#loc620)
          cir.scope {
            %24 = cir.const #cir.int<0> : !s32i loc(#loc434)
            cir.store %24, %5 : !s32i, !cir.ptr<!s32i> loc(#loc622)
            cir.for : cond {
              %25 = cir.load %5 : !cir.ptr<!s32i>, !s32i loc(#loc436)
              %26 = cir.const #cir.int<10> : !s32i loc(#loc437)
              %27 = cir.cmp(lt, %25, %26) : !s32i, !cir.bool loc(#loc623)
              cir.condition(%27) loc(#loc438)
            } body {
              cir.scope {
                %25 = cir.load %6 : !cir.ptr<!cir.ptr<!s32i>>, !cir.ptr<!s32i> loc(#loc440)
                %26 = cir.load %5 : !cir.ptr<!s32i>, !s32i loc(#loc441)
                %27 = cir.ptr_stride(%25 : !cir.ptr<!s32i>, %26 : !s32i), !cir.ptr<!s32i> loc(#loc442)
                %28 = cir.load %27 : !cir.ptr<!s32i>, !s32i loc(#loc440)
                cir.call @printIntLine(%28) : (!s32i) -> () loc(#loc443)
              } loc(#loc624)
              cir.yield loc(#loc433)
            } step {
              %25 = cir.load %5 : !cir.ptr<!s32i>, !s32i loc(#loc444)
              %26 = cir.unary(inc, %25) nsw : !s32i, !s32i loc(#loc445)
              cir.store %26, %5 : !s32i, !cir.ptr<!s32i> loc(#loc625)
              cir.yield loc(#loc621)
            } loc(#loc621)
          } loc(#loc621)
        } else {
          %20 = cir.get_global @".str" : !cir.ptr<!cir.array<!s8i x 32>> loc(#loc446)
          %21 = cir.cast(array_to_ptrdecay, %20 : !cir.ptr<!cir.array<!s8i x 32>>), !cir.ptr<!s8i> loc(#loc446)
          cir.call @printLine(%21) : (!cir.ptr<!s8i>) -> () loc(#loc447)
        } loc(#loc619)
      } loc(#loc617)
      %14 = cir.get_global @free : !cir.ptr<!cir.func<(!cir.ptr<!void>)>> loc(#loc448)
      %15 = cir.load %6 : !cir.ptr<!cir.ptr<!s32i>>, !cir.ptr<!s32i> loc(#loc449)
      %16 = cir.cast(bitcast, %15 : !cir.ptr<!s32i>), !cir.ptr<!void> loc(#loc449)
      cir.call @free(%16) : (!cir.ptr<!void>) -> () extra(#fn_attr) loc(#loc448)
    } loc(#loc602)
    cir.return loc(#loc379)
  } loc(#loc598)
} loc(#loc)
#loc = loc("/workspaces/juliet-c/testcases/CWE122_Heap_Based_Buffer_Overflow/s06/CWE122_Heap_Based_Buffer_Overflow__c_CWE129_connect_socket_42.c":0:0)
#loc1 = loc("/usr/include/x86_64-linux-gnu/sys/socket.h":102:1)
#loc2 = loc("/usr/include/x86_64-linux-gnu/sys/socket.h":102:62)
#loc3 = loc("/usr/include/arpa/inet.h":34:1)
#loc4 = loc("/usr/include/arpa/inet.h":34:47)
#loc5 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_connect_socket_42.c":72:49)
#loc6 = loc("/usr/include/netinet/in.h":402:1)
#loc7 = loc("/usr/include/netinet/in.h":403:40)
#loc8 = loc("/usr/include/x86_64-linux-gnu/sys/socket.h":126:1)
#loc9 = loc("/usr/include/x86_64-linux-gnu/sys/socket.h":126:75)
#loc10 = loc("/usr/include/x86_64-linux-gnu/sys/socket.h":145:1)
#loc11 = loc("/usr/include/x86_64-linux-gnu/sys/socket.h":145:68)
#loc12 = loc("/usr/include/stdlib.h":105:1)
#loc13 = loc("/usr/include/stdlib.h":106:33)
#loc14 = loc("/usr/include/unistd.h":358:1)
#loc15 = loc("/usr/include/unistd.h":358:27)
#loc16 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_connect_socket_42.c":44:1)
#loc17 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_connect_socket_42.c":103:1)
#loc20 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_connect_socket_42.c":45:1)
#loc21 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_connect_socket_42.c":46:5)
#loc22 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_connect_socket_42.c":101:5)
#loc23 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_connect_socket_42.c":51:9)
#loc24 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_connect_socket_42.c":51:13)
#loc25 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_connect_socket_42.c":52:9)
#loc26 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_connect_socket_42.c":52:28)
#loc27 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_connect_socket_42.c":53:9)
#loc28 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_connect_socket_42.c":53:32)
#loc29 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_connect_socket_42.c":54:9)
#loc30 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_connect_socket_42.c":54:41)
#loc31 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_connect_socket_42.c":55:9)
#loc32 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_connect_socket_42.c":90:17)
#loc33 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_connect_socket_42.c":56:9)
#loc34 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_connect_socket_42.c":89:9)
#loc35 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_connect_socket_42.c":65:36)
#loc36 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_connect_socket_42.c":65:45)
#loc37 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_connect_socket_42.c":65:58)
#loc38 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_connect_socket_42.c":65:29)
#loc39 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_connect_socket_42.c":65:13)
#loc40 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_connect_socket_42.c":65:69)
#loc41 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_connect_socket_42.c":66:13)
#loc42 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_connect_socket_42.c":69:13)
#loc43 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_connect_socket_42.c":66:17)
#loc44 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_connect_socket_42.c":66:34)
#loc45 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_connect_socket_42.c":67:13)
#loc46 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_connect_socket_42.c":68:17)
#loc47 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_connect_socket_42.c":70:20)
#loc48 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_connect_socket_42.c":70:21)
#loc49 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_connect_socket_42.c":70:30)
#loc50 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_connect_socket_42.c":70:33)
#loc51 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_connect_socket_42.c":70:47)
#loc52 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_connect_socket_42.c":70:13)
#loc53 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_connect_socket_42.c":70:48)
#loc54 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_connect_socket_42.c":71:34)
#loc55 = loc("/usr/include/netinet/in.h":249:5)
#loc56 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_connect_socket_42.c":71:13)
#loc57 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_connect_socket_42.c":72:39)
#loc58 = loc("/usr/include/netinet/in.h":251:20)
#loc59 = loc("/usr/include/netinet/in.h":33:15)
#loc60 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_connect_socket_42.c":72:13)
#loc61 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_connect_socket_42.c":72:59)
#loc62 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_connect_socket_42.c":73:38)
#loc63 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_connect_socket_42.c":73:32)
#loc64 = loc("/usr/include/netinet/in.h":250:15)
#loc65 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_connect_socket_42.c":73:13)
#loc66 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_connect_socket_42.c":73:46)
#loc67 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_connect_socket_42.c":74:13)
#loc68 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_connect_socket_42.c":77:13)
#loc69 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_connect_socket_42.c":74:25)
#loc70 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_connect_socket_42.c":74:58)
#loc71 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_connect_socket_42.c":74:59)
#loc72 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_connect_socket_42.c":74:68)
#loc73 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_connect_socket_42.c":74:82)
#loc74 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_connect_socket_42.c":74:17)
#loc75 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_connect_socket_42.c":74:88)
#loc76 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_connect_socket_42.c":75:13)
#loc77 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_connect_socket_42.c":76:17)
#loc78 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_connect_socket_42.c":80:31)
#loc79 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_connect_socket_42.c":80:46)
#loc80 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_connect_socket_42.c":80:59)
#loc81 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_connect_socket_42.c":80:77)
#loc82 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_connect_socket_42.c":80:80)
#loc83 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_connect_socket_42.c":80:26)
#loc84 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_connect_socket_42.c":80:13)
#loc85 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_connect_socket_42.c":80:81)
#loc86 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_connect_socket_42.c":81:13)
#loc87 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_connect_socket_42.c":84:13)
#loc88 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_connect_socket_42.c":81:17)
#loc89 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_connect_socket_42.c":81:31)
#loc90 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_connect_socket_42.c":81:44)
#loc91 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_connect_socket_42.c":81:47)
#loc92 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_connect_socket_42.c":81:61)
#loc93 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_connect_socket_42.c":82:13)
#loc94 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_connect_socket_42.c":83:17)
#loc95 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_connect_socket_42.c":86:39)
#loc96 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_connect_socket_42.c":86:25)
#loc97 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_connect_socket_42.c":86:13)
#loc98 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_connect_socket_42.c":88:25)
#loc99 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_connect_socket_42.c":88:20)
#loc100 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_connect_socket_42.c":88:13)
#loc101 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_connect_socket_42.c":88:36)
#loc102 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_connect_socket_42.c":90:16)
#loc103 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_connect_socket_42.c":91:9)
#loc104 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_connect_socket_42.c":94:9)
#loc105 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_connect_socket_42.c":91:13)
#loc106 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_connect_socket_42.c":91:30)
#loc107 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_connect_socket_42.c":92:9)
#loc108 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_connect_socket_42.c":93:26)
#loc109 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_connect_socket_42.c":93:13)
#loc110 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_connect_socket_42.c":102:12)
#loc111 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_connect_socket_42.c":102:5)
#loc112 = loc("/usr/include/stdlib.h":672:1)
#loc113 = loc("/usr/include/stdlib.h":672:45)
#loc114 = loc("/usr/include/stdlib.h":756:1)
#loc115 = loc("/usr/include/stdlib.h":756:70)
#loc116 = loc("../../../testcasesupport/std_testcase_io.h":18:1)
#loc117 = loc("../../../testcasesupport/std_testcase_io.h":18:33)
#loc118 = loc("../../../testcasesupport/std_testcase_io.h":14:1)
#loc119 = loc("../../../testcasesupport/std_testcase_io.h":14:33)
#loc120 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_connect_socket_42.c":133:23)
#loc121 = loc("/usr/include/stdlib.h":687:1)
#loc122 = loc("/usr/include/stdlib.h":687:32)
#loc123 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_connect_socket_42.c":105:1)
#loc124 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_connect_socket_42.c":137:1)
#loc125 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_connect_socket_42.c":107:5)
#loc126 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_connect_socket_42.c":107:9)
#loc127 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_connect_socket_42.c":109:13)
#loc128 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_connect_socket_42.c":109:12)
#loc129 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_connect_socket_42.c":109:5)
#loc130 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_connect_socket_42.c":110:22)
#loc131 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_connect_socket_42.c":110:12)
#loc132 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_connect_socket_42.c":110:5)
#loc133 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_connect_socket_42.c":110:26)
#loc134 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_connect_socket_42.c":111:5)
#loc135 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_connect_socket_42.c":136:5)
#loc136 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_connect_socket_42.c":112:9)
#loc137 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_connect_socket_42.c":112:13)
#loc138 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_connect_socket_42.c":113:9)
#loc139 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_connect_socket_42.c":113:54)
#loc140 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_connect_socket_42.c":113:31)
#loc141 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_connect_socket_42.c":113:38)
#loc142 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_connect_socket_42.c":113:43)
#loc143 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_connect_socket_42.c":113:53)
#loc144 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_connect_socket_42.c":114:9)
#loc145 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_connect_socket_42.c":114:39)
#loc146 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_connect_socket_42.c":114:13)
#loc147 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_connect_socket_42.c":114:23)
#loc148 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_connect_socket_42.c":114:29)
#loc149 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_connect_socket_42.c":114:30)
#loc150 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_connect_socket_42.c":114:36)
#loc151 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_connect_socket_42.c":114:35)
#loc152 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_connect_socket_42.c":116:9)
#loc153 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_connect_socket_42.c":119:9)
#loc154 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_connect_socket_42.c":116:18)
#loc155 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_connect_socket_42.c":116:14)
#loc156 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_connect_socket_42.c":116:21)
#loc157 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_connect_socket_42.c":116:25)
#loc158 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_connect_socket_42.c":116:23)
#loc159 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_connect_socket_42.c":117:9)
#loc160 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_connect_socket_42.c":118:25)
#loc161 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_connect_socket_42.c":118:13)
#loc162 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_connect_socket_42.c":118:20)
#loc163 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_connect_socket_42.c":118:21)
#loc164 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_connect_socket_42.c":116:30)
#loc165 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_connect_socket_42.c":116:29)
#loc166 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_connect_socket_42.c":122:9)
#loc167 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_connect_socket_42.c":134:9)
#loc168 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_connect_socket_42.c":122:13)
#loc169 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_connect_socket_42.c":122:21)
#loc170 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_connect_socket_42.c":123:9)
#loc171 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_connect_socket_42.c":130:9)
#loc172 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_connect_socket_42.c":132:9)
#loc173 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_connect_socket_42.c":124:28)
#loc174 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_connect_socket_42.c":124:13)
#loc175 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_connect_socket_42.c":124:20)
#loc176 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_connect_socket_42.c":124:24)
#loc177 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_connect_socket_42.c":126:13)
#loc178 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_connect_socket_42.c":129:13)
#loc179 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_connect_socket_42.c":126:21)
#loc180 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_connect_socket_42.c":126:17)
#loc181 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_connect_socket_42.c":126:24)
#loc182 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_connect_socket_42.c":126:28)
#loc183 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_connect_socket_42.c":126:26)
#loc184 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_connect_socket_42.c":127:13)
#loc185 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_connect_socket_42.c":128:30)
#loc186 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_connect_socket_42.c":128:37)
#loc187 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_connect_socket_42.c":128:38)
#loc188 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_connect_socket_42.c":128:17)
#loc189 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_connect_socket_42.c":126:33)
#loc190 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_connect_socket_42.c":126:32)
#loc191 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_connect_socket_42.c":133:13)
#loc192 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_connect_socket_42.c":135:9)
#loc193 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_connect_socket_42.c":135:14)
#loc194 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_connect_socket_42.c":281:1)
#loc195 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_connect_socket_42.c":285:1)
#loc196 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_connect_socket_42.c":283:5)
#loc197 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_connect_socket_42.c":283:13)
#loc198 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_connect_socket_42.c":284:5)
#loc199 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_connect_socket_42.c":284:13)
#loc200 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_connect_socket_42.c":187:1)
#loc201 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_connect_socket_42.c":246:1)
#loc204 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_connect_socket_42.c":188:1)
#loc205 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_connect_socket_42.c":189:5)
#loc206 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_connect_socket_42.c":244:5)
#loc207 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_connect_socket_42.c":194:9)
#loc208 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_connect_socket_42.c":194:13)
#loc209 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_connect_socket_42.c":195:9)
#loc210 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_connect_socket_42.c":195:28)
#loc211 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_connect_socket_42.c":196:9)
#loc212 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_connect_socket_42.c":196:32)
#loc213 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_connect_socket_42.c":197:9)
#loc214 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_connect_socket_42.c":197:41)
#loc215 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_connect_socket_42.c":198:9)
#loc216 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_connect_socket_42.c":233:17)
#loc217 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_connect_socket_42.c":199:9)
#loc218 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_connect_socket_42.c":232:9)
#loc219 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_connect_socket_42.c":208:36)
#loc220 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_connect_socket_42.c":208:45)
#loc221 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_connect_socket_42.c":208:58)
#loc222 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_connect_socket_42.c":208:29)
#loc223 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_connect_socket_42.c":208:13)
#loc224 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_connect_socket_42.c":208:69)
#loc225 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_connect_socket_42.c":209:13)
#loc226 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_connect_socket_42.c":212:13)
#loc227 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_connect_socket_42.c":209:17)
#loc228 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_connect_socket_42.c":209:34)
#loc229 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_connect_socket_42.c":210:13)
#loc230 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_connect_socket_42.c":211:17)
#loc231 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_connect_socket_42.c":213:20)
#loc232 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_connect_socket_42.c":213:21)
#loc233 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_connect_socket_42.c":213:30)
#loc234 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_connect_socket_42.c":213:33)
#loc235 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_connect_socket_42.c":213:47)
#loc236 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_connect_socket_42.c":213:13)
#loc237 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_connect_socket_42.c":213:48)
#loc238 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_connect_socket_42.c":214:34)
#loc239 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_connect_socket_42.c":214:13)
#loc240 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_connect_socket_42.c":215:49)
#loc241 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_connect_socket_42.c":215:39)
#loc242 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_connect_socket_42.c":215:13)
#loc243 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_connect_socket_42.c":215:59)
#loc244 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_connect_socket_42.c":216:38)
#loc245 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_connect_socket_42.c":216:32)
#loc246 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_connect_socket_42.c":216:13)
#loc247 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_connect_socket_42.c":216:46)
#loc248 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_connect_socket_42.c":217:13)
#loc249 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_connect_socket_42.c":220:13)
#loc250 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_connect_socket_42.c":217:25)
#loc251 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_connect_socket_42.c":217:58)
#loc252 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_connect_socket_42.c":217:59)
#loc253 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_connect_socket_42.c":217:68)
#loc254 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_connect_socket_42.c":217:82)
#loc255 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_connect_socket_42.c":217:17)
#loc256 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_connect_socket_42.c":217:88)
#loc257 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_connect_socket_42.c":218:13)
#loc258 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_connect_socket_42.c":219:17)
#loc259 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_connect_socket_42.c":223:31)
#loc260 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_connect_socket_42.c":223:46)
#loc261 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_connect_socket_42.c":223:59)
#loc262 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_connect_socket_42.c":223:77)
#loc263 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_connect_socket_42.c":223:80)
#loc264 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_connect_socket_42.c":223:26)
#loc265 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_connect_socket_42.c":223:13)
#loc266 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_connect_socket_42.c":223:81)
#loc267 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_connect_socket_42.c":224:13)
#loc268 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_connect_socket_42.c":227:13)
#loc269 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_connect_socket_42.c":224:17)
#loc270 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_connect_socket_42.c":224:31)
#loc271 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_connect_socket_42.c":224:44)
#loc272 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_connect_socket_42.c":224:47)
#loc273 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_connect_socket_42.c":224:61)
#loc274 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_connect_socket_42.c":225:13)
#loc275 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_connect_socket_42.c":226:17)
#loc276 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_connect_socket_42.c":229:39)
#loc277 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_connect_socket_42.c":229:25)
#loc278 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_connect_socket_42.c":229:13)
#loc279 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_connect_socket_42.c":231:25)
#loc280 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_connect_socket_42.c":231:20)
#loc281 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_connect_socket_42.c":231:13)
#loc282 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_connect_socket_42.c":231:36)
#loc283 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_connect_socket_42.c":233:16)
#loc284 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_connect_socket_42.c":234:9)
#loc285 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_connect_socket_42.c":237:9)
#loc286 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_connect_socket_42.c":234:13)
#loc287 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_connect_socket_42.c":234:30)
#loc288 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_connect_socket_42.c":235:9)
#loc289 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_connect_socket_42.c":236:26)
#loc290 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_connect_socket_42.c":236:13)
#loc291 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_connect_socket_42.c":245:12)
#loc292 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_connect_socket_42.c":245:5)
#loc293 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_connect_socket_42.c":275:23)
#loc294 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_connect_socket_42.c":248:1)
#loc295 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_connect_socket_42.c":279:1)
#loc296 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_connect_socket_42.c":250:5)
#loc297 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_connect_socket_42.c":250:9)
#loc298 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_connect_socket_42.c":252:13)
#loc299 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_connect_socket_42.c":252:12)
#loc300 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_connect_socket_42.c":252:5)
#loc301 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_connect_socket_42.c":253:26)
#loc302 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_connect_socket_42.c":253:12)
#loc303 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_connect_socket_42.c":253:5)
#loc304 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_connect_socket_42.c":253:30)
#loc305 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_connect_socket_42.c":254:5)
#loc306 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_connect_socket_42.c":278:5)
#loc307 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_connect_socket_42.c":255:9)
#loc308 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_connect_socket_42.c":255:13)
#loc309 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_connect_socket_42.c":256:9)
#loc310 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_connect_socket_42.c":256:54)
#loc311 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_connect_socket_42.c":256:31)
#loc312 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_connect_socket_42.c":256:38)
#loc313 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_connect_socket_42.c":256:43)
#loc314 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_connect_socket_42.c":256:53)
#loc315 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_connect_socket_42.c":257:9)
#loc316 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_connect_socket_42.c":257:39)
#loc317 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_connect_socket_42.c":257:13)
#loc318 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_connect_socket_42.c":257:23)
#loc319 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_connect_socket_42.c":257:29)
#loc320 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_connect_socket_42.c":257:30)
#loc321 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_connect_socket_42.c":257:36)
#loc322 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_connect_socket_42.c":257:35)
#loc323 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_connect_socket_42.c":259:9)
#loc324 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_connect_socket_42.c":262:9)
#loc325 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_connect_socket_42.c":259:18)
#loc326 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_connect_socket_42.c":259:14)
#loc327 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_connect_socket_42.c":259:21)
#loc328 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_connect_socket_42.c":259:25)
#loc329 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_connect_socket_42.c":259:23)
#loc330 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_connect_socket_42.c":260:9)
#loc331 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_connect_socket_42.c":261:25)
#loc332 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_connect_socket_42.c":261:13)
#loc333 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_connect_socket_42.c":261:20)
#loc334 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_connect_socket_42.c":261:21)
#loc335 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_connect_socket_42.c":259:30)
#loc336 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_connect_socket_42.c":259:29)
#loc337 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_connect_socket_42.c":264:9)
#loc338 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_connect_socket_42.c":276:9)
#loc339 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_connect_socket_42.c":264:13)
#loc340 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_connect_socket_42.c":264:21)
#loc341 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_connect_socket_42.c":264:23)
#loc342 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_connect_socket_42.c":264:26)
#loc343 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_connect_socket_42.c":264:34)
#loc344 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_connect_socket_42.c":264:36)
#loc345 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_connect_socket_42.c":265:9)
#loc346 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_connect_socket_42.c":272:9)
#loc347 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_connect_socket_42.c":274:9)
#loc348 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_connect_socket_42.c":266:28)
#loc349 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_connect_socket_42.c":266:13)
#loc350 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_connect_socket_42.c":266:20)
#loc351 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_connect_socket_42.c":266:24)
#loc352 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_connect_socket_42.c":268:13)
#loc353 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_connect_socket_42.c":271:13)
#loc354 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_connect_socket_42.c":268:21)
#loc355 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_connect_socket_42.c":268:17)
#loc356 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_connect_socket_42.c":268:24)
#loc357 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_connect_socket_42.c":268:28)
#loc358 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_connect_socket_42.c":268:26)
#loc359 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_connect_socket_42.c":269:13)
#loc360 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_connect_socket_42.c":270:30)
#loc361 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_connect_socket_42.c":270:37)
#loc362 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_connect_socket_42.c":270:38)
#loc363 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_connect_socket_42.c":270:17)
#loc364 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_connect_socket_42.c":268:33)
#loc365 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_connect_socket_42.c":268:32)
#loc366 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_connect_socket_42.c":275:13)
#loc367 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_connect_socket_42.c":277:9)
#loc368 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_connect_socket_42.c":277:14)
#loc369 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_connect_socket_42.c":144:1)
#loc370 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_connect_socket_42.c":150:1)
#loc373 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_connect_socket_42.c":145:1)
#loc374 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_connect_socket_42.c":148:12)
#loc375 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_connect_socket_42.c":148:5)
#loc376 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_connect_socket_42.c":149:12)
#loc377 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_connect_socket_42.c":149:5)
#loc378 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_connect_socket_42.c":152:1)
#loc379 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_connect_socket_42.c":184:1)
#loc380 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_connect_socket_42.c":154:5)
#loc381 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_connect_socket_42.c":154:9)
#loc382 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_connect_socket_42.c":156:13)
#loc383 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_connect_socket_42.c":156:12)
#loc384 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_connect_socket_42.c":156:5)
#loc385 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_connect_socket_42.c":157:26)
#loc386 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_connect_socket_42.c":157:12)
#loc387 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_connect_socket_42.c":157:5)
#loc388 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_connect_socket_42.c":157:30)
#loc389 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_connect_socket_42.c":158:5)
#loc390 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_connect_socket_42.c":183:5)
#loc391 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_connect_socket_42.c":159:9)
#loc392 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_connect_socket_42.c":159:13)
#loc393 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_connect_socket_42.c":160:9)
#loc394 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_connect_socket_42.c":160:54)
#loc395 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_connect_socket_42.c":160:31)
#loc396 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_connect_socket_42.c":160:38)
#loc397 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_connect_socket_42.c":160:43)
#loc398 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_connect_socket_42.c":160:53)
#loc399 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_connect_socket_42.c":161:9)
#loc400 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_connect_socket_42.c":161:39)
#loc401 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_connect_socket_42.c":161:13)
#loc402 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_connect_socket_42.c":161:23)
#loc403 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_connect_socket_42.c":161:29)
#loc404 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_connect_socket_42.c":161:30)
#loc405 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_connect_socket_42.c":161:36)
#loc406 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_connect_socket_42.c":161:35)
#loc407 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_connect_socket_42.c":163:9)
#loc408 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_connect_socket_42.c":166:9)
#loc409 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_connect_socket_42.c":163:18)
#loc410 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_connect_socket_42.c":163:14)
#loc411 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_connect_socket_42.c":163:21)
#loc412 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_connect_socket_42.c":163:25)
#loc413 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_connect_socket_42.c":163:23)
#loc414 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_connect_socket_42.c":164:9)
#loc415 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_connect_socket_42.c":165:25)
#loc416 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_connect_socket_42.c":165:13)
#loc417 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_connect_socket_42.c":165:20)
#loc418 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_connect_socket_42.c":165:21)
#loc419 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_connect_socket_42.c":163:30)
#loc420 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_connect_socket_42.c":163:29)
#loc421 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_connect_socket_42.c":169:9)
#loc422 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_connect_socket_42.c":181:9)
#loc423 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_connect_socket_42.c":169:13)
#loc424 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_connect_socket_42.c":169:21)
#loc425 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_connect_socket_42.c":170:9)
#loc426 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_connect_socket_42.c":177:9)
#loc427 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_connect_socket_42.c":179:9)
#loc428 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_connect_socket_42.c":171:28)
#loc429 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_connect_socket_42.c":171:13)
#loc430 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_connect_socket_42.c":171:20)
#loc431 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_connect_socket_42.c":171:24)
#loc432 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_connect_socket_42.c":173:13)
#loc433 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_connect_socket_42.c":176:13)
#loc434 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_connect_socket_42.c":173:21)
#loc435 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_connect_socket_42.c":173:17)
#loc436 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_connect_socket_42.c":173:24)
#loc437 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_connect_socket_42.c":173:28)
#loc438 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_connect_socket_42.c":173:26)
#loc439 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_connect_socket_42.c":174:13)
#loc440 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_connect_socket_42.c":175:30)
#loc441 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_connect_socket_42.c":175:37)
#loc442 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_connect_socket_42.c":175:38)
#loc443 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_connect_socket_42.c":175:17)
#loc444 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_connect_socket_42.c":173:33)
#loc445 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_connect_socket_42.c":173:32)
#loc446 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_connect_socket_42.c":180:23)
#loc447 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_connect_socket_42.c":180:13)
#loc448 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_connect_socket_42.c":182:9)
#loc449 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_connect_socket_42.c":182:14)
#loc450 = loc(fused[#loc1, #loc2])
#loc451 = loc(fused[#loc3, #loc4])
#loc452 = loc(fused[#loc6, #loc7])
#loc453 = loc(fused[#loc8, #loc9])
#loc454 = loc(fused[#loc10, #loc11])
#loc455 = loc(fused[#loc12, #loc13])
#loc456 = loc(fused[#loc14, #loc15])
#loc457 = loc(fused[#loc16, #loc17])
#loc459 = loc(fused[#loc21, #loc22])
#loc460 = loc(fused[#loc23, #loc24])
#loc461 = loc(fused[#loc25, #loc26])
#loc462 = loc(fused[#loc27, #loc28])
#loc463 = loc(fused[#loc29, #loc30])
#loc464 = loc(fused[#loc31, #loc32])
#loc465 = loc(fused[#loc33, #loc34])
#loc466 = loc(fused[#loc39, #loc40])
#loc467 = loc(fused[#loc41, #loc42])
#loc468 = loc(fused[#loc43, #loc44])
#loc469 = loc(fused[#loc45, #loc42])
#loc470 = loc(fused[#loc47, #loc48])
#loc471 = loc(fused[#loc50, #loc51])
#loc472 = loc(fused[#loc52, #loc53])
#loc473 = loc(fused[#loc56, #loc54])
#loc474 = loc(fused[#loc60, #loc61])
#loc475 = loc(fused[#loc65, #loc66])
#loc476 = loc(fused[#loc67, #loc68])
#loc477 = loc(fused[#loc70, #loc71])
#loc478 = loc(fused[#loc72, #loc73])
#loc479 = loc(fused[#loc74, #loc75])
#loc480 = loc(fused[#loc76, #loc68])
#loc481 = loc(fused[#loc80, #loc81])
#loc482 = loc(fused[#loc84, #loc85])
#loc483 = loc(fused[#loc86, #loc87])
#loc484 = loc(fused[#loc88, #loc89])
#loc485 = loc(fused[#loc91, #loc92])
#loc486 = loc(fused[#loc93, #loc87])
#loc487 = loc(fused[#loc97, #loc95])
#loc488 = loc(fused[#loc100, #loc101])
#loc489 = loc(fused[#loc103, #loc104])
#loc490 = loc(fused[#loc105, #loc106])
#loc491 = loc(fused[#loc107, #loc104])
#loc492 = loc(fused[#loc111, #loc110])
#loc493 = loc(fused[#loc112, #loc113])
#loc494 = loc(fused[#loc114, #loc115])
#loc495 = loc(fused[#loc116, #loc117])
#loc496 = loc(fused[#loc118, #loc119])
#loc497 = loc(fused[#loc121, #loc122])
#loc498 = loc(fused[#loc123, #loc124])
#loc499 = loc(fused[#loc125, #loc126])
#loc500 = loc(fused[#loc129, #loc127])
#loc501 = loc(fused[#loc132, #loc133])
#loc502 = loc(fused[#loc134, #loc135])
#loc503 = loc(fused[#loc136, #loc137])
#loc504 = loc(fused[#loc138, #loc139])
#loc505 = loc(fused[#loc142, #loc143])
#loc506 = loc(fused[#loc141, #loc143])
#loc507 = loc(fused[#loc140, #loc139])
#loc508 = loc(fused[#loc144, #loc145])
#loc509 = loc(fused[#loc146, #loc147])
#loc510 = loc(fused[#loc148, #loc145])
#loc511 = loc(fused[#loc152, #loc153])
#loc512 = loc(fused[#loc155, #loc154])
#loc513 = loc(fused[#loc156, #loc157])
#loc514 = loc(fused[#loc159, #loc153])
#loc515 = loc(fused[#loc161, #loc160])
#loc516 = loc(fused[#loc165, #loc164])
#loc517 = loc(fused[#loc166, #loc167])
#loc518 = loc(fused[#loc168, #loc169])
#loc519 = loc(fused[#loc170, #loc171, #loc172, #loc167])
#loc520 = loc(fused[#loc174, #loc173])
#loc521 = loc(fused[#loc177, #loc178])
#loc522 = loc(fused[#loc180, #loc179])
#loc523 = loc(fused[#loc181, #loc182])
#loc524 = loc(fused[#loc184, #loc178])
#loc525 = loc(fused[#loc190, #loc189])
#loc526 = loc(fused[#loc194, #loc195])
#loc527 = loc(fused[#loc196, #loc197])
#loc528 = loc(fused[#loc198, #loc199])
#loc529 = loc(fused[#loc200, #loc201])
#loc531 = loc(fused[#loc205, #loc206])
#loc532 = loc(fused[#loc207, #loc208])
#loc533 = loc(fused[#loc209, #loc210])
#loc534 = loc(fused[#loc211, #loc212])
#loc535 = loc(fused[#loc213, #loc214])
#loc536 = loc(fused[#loc215, #loc216])
#loc537 = loc(fused[#loc217, #loc218])
#loc538 = loc(fused[#loc223, #loc224])
#loc539 = loc(fused[#loc225, #loc226])
#loc540 = loc(fused[#loc227, #loc228])
#loc541 = loc(fused[#loc229, #loc226])
#loc542 = loc(fused[#loc231, #loc232])
#loc543 = loc(fused[#loc234, #loc235])
#loc544 = loc(fused[#loc236, #loc237])
#loc545 = loc(fused[#loc239, #loc238])
#loc546 = loc(fused[#loc242, #loc243])
#loc547 = loc(fused[#loc246, #loc247])
#loc548 = loc(fused[#loc248, #loc249])
#loc549 = loc(fused[#loc251, #loc252])
#loc550 = loc(fused[#loc253, #loc254])
#loc551 = loc(fused[#loc255, #loc256])
#loc552 = loc(fused[#loc257, #loc249])
#loc553 = loc(fused[#loc261, #loc262])
#loc554 = loc(fused[#loc265, #loc266])
#loc555 = loc(fused[#loc267, #loc268])
#loc556 = loc(fused[#loc269, #loc270])
#loc557 = loc(fused[#loc272, #loc273])
#loc558 = loc(fused[#loc274, #loc268])
#loc559 = loc(fused[#loc278, #loc276])
#loc560 = loc(fused[#loc281, #loc282])
#loc561 = loc(fused[#loc284, #loc285])
#loc562 = loc(fused[#loc286, #loc287])
#loc563 = loc(fused[#loc288, #loc285])
#loc564 = loc(fused[#loc292, #loc291])
#loc565 = loc(fused[#loc294, #loc295])
#loc566 = loc(fused[#loc296, #loc297])
#loc567 = loc(fused[#loc300, #loc298])
#loc568 = loc(fused[#loc303, #loc304])
#loc569 = loc(fused[#loc305, #loc306])
#loc570 = loc(fused[#loc307, #loc308])
#loc571 = loc(fused[#loc309, #loc310])
#loc572 = loc(fused[#loc313, #loc314])
#loc573 = loc(fused[#loc312, #loc314])
#loc574 = loc(fused[#loc311, #loc310])
#loc575 = loc(fused[#loc315, #loc316])
#loc576 = loc(fused[#loc317, #loc318])
#loc577 = loc(fused[#loc319, #loc316])
#loc578 = loc(fused[#loc323, #loc324])
#loc579 = loc(fused[#loc326, #loc325])
#loc580 = loc(fused[#loc327, #loc328])
#loc581 = loc(fused[#loc330, #loc324])
#loc582 = loc(fused[#loc332, #loc331])
#loc583 = loc(fused[#loc336, #loc335])
#loc584 = loc(fused[#loc337, #loc338])
#loc585 = loc(fused[#loc339, #loc340])
#loc586 = loc(fused[#loc342, #loc344])
#loc587 = loc(fused[#loc345, #loc346, #loc347, #loc338])
#loc588 = loc(fused[#loc349, #loc348])
#loc589 = loc(fused[#loc352, #loc353])
#loc590 = loc(fused[#loc355, #loc354])
#loc591 = loc(fused[#loc356, #loc357])
#loc592 = loc(fused[#loc359, #loc353])
#loc593 = loc(fused[#loc365, #loc364])
#loc594 = loc(fused[#loc369, #loc370])
#loc596 = loc(fused[#loc375, #loc374])
#loc597 = loc(fused[#loc377, #loc376])
#loc598 = loc(fused[#loc378, #loc379])
#loc599 = loc(fused[#loc380, #loc381])
#loc600 = loc(fused[#loc384, #loc382])
#loc601 = loc(fused[#loc387, #loc388])
#loc602 = loc(fused[#loc389, #loc390])
#loc603 = loc(fused[#loc391, #loc392])
#loc604 = loc(fused[#loc393, #loc394])
#loc605 = loc(fused[#loc397, #loc398])
#loc606 = loc(fused[#loc396, #loc398])
#loc607 = loc(fused[#loc395, #loc394])
#loc608 = loc(fused[#loc399, #loc400])
#loc609 = loc(fused[#loc401, #loc402])
#loc610 = loc(fused[#loc403, #loc400])
#loc611 = loc(fused[#loc407, #loc408])
#loc612 = loc(fused[#loc410, #loc409])
#loc613 = loc(fused[#loc411, #loc412])
#loc614 = loc(fused[#loc414, #loc408])
#loc615 = loc(fused[#loc416, #loc415])
#loc616 = loc(fused[#loc420, #loc419])
#loc617 = loc(fused[#loc421, #loc422])
#loc618 = loc(fused[#loc423, #loc424])
#loc619 = loc(fused[#loc425, #loc426, #loc427, #loc422])
#loc620 = loc(fused[#loc429, #loc428])
#loc621 = loc(fused[#loc432, #loc433])
#loc622 = loc(fused[#loc435, #loc434])
#loc623 = loc(fused[#loc436, #loc437])
#loc624 = loc(fused[#loc439, #loc433])
#loc625 = loc(fused[#loc445, #loc444])
