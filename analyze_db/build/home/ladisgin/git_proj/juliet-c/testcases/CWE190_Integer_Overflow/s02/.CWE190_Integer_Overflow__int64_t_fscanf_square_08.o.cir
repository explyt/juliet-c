!s32i = !cir.int<s, 32>
!s64i = !cir.int<s, 64>
!s8i = !cir.int<s, 8>
!ty__IO_codecvt = !cir.struct<struct "_IO_codecvt" incomplete>
!ty__IO_marker = !cir.struct<struct "_IO_marker" incomplete>
!ty__IO_wide_data = !cir.struct<struct "_IO_wide_data" incomplete>
!u16i = !cir.int<u, 16>
!void = !cir.void
#fn_attr = #cir<extra({inline = #cir.inline<no>, nothrow = #cir.nothrow, optnone = #cir.optnone})>
#fn_attr1 = #cir<extra({nothrow = #cir.nothrow})>
!ty__IO_FILE = !cir.struct<struct "_IO_FILE" {!s32i, !cir.ptr<!s8i>, !cir.ptr<!s8i>, !cir.ptr<!s8i>, !cir.ptr<!s8i>, !cir.ptr<!s8i>, !cir.ptr<!s8i>, !cir.ptr<!s8i>, !cir.ptr<!s8i>, !cir.ptr<!s8i>, !cir.ptr<!s8i>, !cir.ptr<!s8i>, !cir.ptr<!ty__IO_marker>, !cir.ptr<!cir.struct<struct "_IO_FILE">>, !s32i, !s32i, !s64i, !u16i, !s8i, !cir.array<!s8i x 1>, !cir.ptr<!void>, !s64i, !cir.ptr<!ty__IO_codecvt>, !cir.ptr<!ty__IO_wide_data>, !cir.ptr<!cir.struct<struct "_IO_FILE">>, !cir.ptr<!void>, !cir.ptr<!cir.ptr<!cir.struct<struct "_IO_FILE">>>, !s32i, !cir.array<!s8i x 20>} #cir.record.decl.ast>
module @"/home/ladisgin/git_proj/juliet-c/testcases/CWE190_Integer_Overflow/s02/CWE190_Integer_Overflow__int64_t_fscanf_square_08.c" attributes {cir.lang = #cir.lang<c>, cir.sob = #cir.signed_overflow_behavior<undefined>, cir.triple = "x86_64-unknown-linux-gnu", dlti.dl_spec = #dlti.dl_spec<f64 = dense<64> : vector<2xi64>, f80 = dense<128> : vector<2xi64>, i128 = dense<128> : vector<2xi64>, i64 = dense<64> : vector<2xi64>, i8 = dense<8> : vector<2xi64>, i1 = dense<8> : vector<2xi64>, !llvm.ptr = dense<64> : vector<4xi64>, f16 = dense<16> : vector<2xi64>, i32 = dense<32> : vector<2xi64>, i16 = dense<16> : vector<2xi64>, !llvm.ptr<271> = dense<32> : vector<4xi64>, !llvm.ptr<272> = dense<64> : vector<4xi64>, f128 = dense<128> : vector<2xi64>, !llvm.ptr<270> = dense<32> : vector<4xi64>, "dlti.stack_alignment" = 128 : i64, "dlti.endianness" = "little">} {
  cir.func private @__isoc99_fscanf(!cir.ptr<!ty__IO_FILE>, !cir.ptr<!s8i>, ...) -> !s32i loc(#loc189)
  cir.global "private" external @stdin : !cir.ptr<!ty__IO_FILE> {alignment = 8 : i64} loc(#loc190)
  cir.global "private" constant cir_private dsolocal @".str" = #cir.const_array<"%ld\00" : !cir.array<!s8i x 4>> : !cir.array<!s8i x 4> {alignment = 1 : i64} loc(#loc191)
  cir.func private @printLongLongLine(!s64i) loc(#loc192)
  cir.func no_proto @CWE190_Integer_Overflow__int64_t_fscanf_square_08_bad() extra(#fn_attr) {
    %0 = cir.alloca !s64i, !cir.ptr<!s64i>, ["result", init] {alignment = 8 : i64} loc(#loc194)
    %1 = cir.alloca !s64i, !cir.ptr<!s64i>, ["data"] {alignment = 8 : i64} loc(#loc195)
    %2 = cir.const #cir.int<0> : !s64i loc(#loc15)
    cir.store %2, %1 : !s64i, !cir.ptr<!s64i> loc(#loc196)
    cir.br ^bb1 loc(#loc197)
  ^bb1:  // pred: ^bb0
    %3 = cir.get_global @staticReturnsTrue : !cir.ptr<!cir.func<!s32i ()>> loc(#loc198)
    %4 = cir.call %3() : (!cir.ptr<!cir.func<!s32i ()>>) -> !s32i loc(#loc19)
    %5 = cir.cast(int_to_bool, %4 : !s32i), !cir.bool loc(#loc19)
    cir.brcond %5 ^bb2, ^bb3 loc(#loc199)
  ^bb2:  // pred: ^bb1
    %6 = cir.get_global @__isoc99_fscanf : !cir.ptr<!cir.func<!s32i (!cir.ptr<!ty__IO_FILE>, !cir.ptr<!s8i>, ...)>> loc(#loc22)
    %7 = cir.get_global @stdin : !cir.ptr<!cir.ptr<!ty__IO_FILE>> loc(#loc190)
    %8 = cir.load %7 : !cir.ptr<!cir.ptr<!ty__IO_FILE>>, !cir.ptr<!ty__IO_FILE> loc(#loc23)
    %9 = cir.get_global @".str" : !cir.ptr<!cir.array<!s8i x 4>> loc(#loc191)
    %10 = cir.cast(array_to_ptrdecay, %9 : !cir.ptr<!cir.array<!s8i x 4>>), !cir.ptr<!s8i> loc(#loc191)
    %11 = cir.call @__isoc99_fscanf(%8, %10, %1) : (!cir.ptr<!ty__IO_FILE>, !cir.ptr<!s8i>, !cir.ptr<!s64i>) -> !s32i loc(#loc22)
    cir.br ^bb3 loc(#loc18)
  ^bb3:  // 2 preds: ^bb1, ^bb2
    cir.br ^bb4 loc(#loc18)
  ^bb4:  // pred: ^bb3
    cir.br ^bb5 loc(#loc200)
  ^bb5:  // pred: ^bb4
    %12 = cir.get_global @staticReturnsTrue : !cir.ptr<!cir.func<!s32i ()>> loc(#loc201)
    %13 = cir.call %12() : (!cir.ptr<!cir.func<!s32i ()>>) -> !s32i loc(#loc26)
    %14 = cir.cast(int_to_bool, %13 : !s32i), !cir.bool loc(#loc26)
    cir.brcond %14 ^bb6, ^bb9 loc(#loc202)
  ^bb6:  // pred: ^bb5
    cir.br ^bb7 loc(#loc203)
  ^bb7:  // pred: ^bb6
    %15 = cir.load %1 : !cir.ptr<!s64i>, !s64i loc(#loc31)
    %16 = cir.load %1 : !cir.ptr<!s64i>, !s64i loc(#loc12)
    %17 = cir.binop(mul, %15, %16) nsw : !s64i loc(#loc31)
    cir.store %17, %0 : !s64i, !cir.ptr<!s64i> loc(#loc194)
    %18 = cir.load %0 : !cir.ptr<!s64i>, !s64i loc(#loc32)
    cir.call @printLongLongLine(%18) : (!s64i) -> () loc(#loc33)
    cir.br ^bb8 loc(#loc30)
  ^bb8:  // pred: ^bb7
    cir.br ^bb9 loc(#loc25)
  ^bb9:  // 2 preds: ^bb5, ^bb8
    cir.br ^bb10 loc(#loc25)
  ^bb10:  // pred: ^bb9
    cir.return loc(#loc10)
  } loc(#loc193)
  cir.func no_proto @CWE190_Integer_Overflow__int64_t_fscanf_square_08_good() extra(#fn_attr) {
    %0 = cir.get_global @goodB2G1 : !cir.ptr<!cir.func<!void ()>> loc(#loc205)
    cir.call %0() : (!cir.ptr<!cir.func<!void ()>>) -> () loc(#loc36)
    %1 = cir.get_global @goodB2G2 : !cir.ptr<!cir.func<!void ()>> loc(#loc206)
    cir.call %1() : (!cir.ptr<!cir.func<!void ()>>) -> () loc(#loc38)
    %2 = cir.get_global @goodG2B1 : !cir.ptr<!cir.func<!void ()>> loc(#loc207)
    cir.call %2() : (!cir.ptr<!cir.func<!void ()>>) -> () loc(#loc40)
    %3 = cir.get_global @goodG2B2 : !cir.ptr<!cir.func<!void ()>> loc(#loc208)
    cir.call %3() : (!cir.ptr<!cir.func<!void ()>>) -> () loc(#loc42)
    cir.return loc(#loc35)
  } loc(#loc204)
  cir.func no_proto internal private @staticReturnsTrue() -> !s32i extra(#fn_attr) {
    %0 = cir.alloca !s32i, !cir.ptr<!s32i>, ["__retval"] {alignment = 4 : i64} loc(#loc45)
    %1 = cir.const #cir.int<1> : !s32i loc(#loc46)
    cir.store %1, %0 : !s32i, !cir.ptr<!s32i> loc(#loc210)
    %2 = cir.load %0 : !cir.ptr<!s32i>, !s32i loc(#loc210)
    cir.return %2 : !s32i loc(#loc210)
  } loc(#loc209)
  cir.func private @printLine(!cir.ptr<!s8i>) loc(#loc211)
  cir.global "private" constant cir_private dsolocal @".str.1" = #cir.const_array<"Benign, fixed string\00" : !cir.array<!s8i x 21>> : !cir.array<!s8i x 21> {alignment = 1 : i64} loc(#loc50)
  cir.func private @imaxabs(!s64i) -> !s64i extra(#fn_attr1) loc(#loc212)
  cir.func private @sqrtl(!cir.long_double<!cir.f80>) -> !cir.long_double<!cir.f80> extra(#fn_attr1) loc(#loc53)
  cir.global "private" constant cir_private dsolocal @".str.2" = #cir.const_array<"data value is too large to perform arithmetic safely.\00" : !cir.array<!s8i x 54>> : !cir.array<!s8i x 54> {alignment = 1 : i64} loc(#loc54)
  cir.func no_proto internal private @goodB2G1() extra(#fn_attr) {
    %0 = cir.alloca !s64i, !cir.ptr<!s64i>, ["result", init] {alignment = 8 : i64} loc(#loc214)
    %1 = cir.alloca !s64i, !cir.ptr<!s64i>, ["data"] {alignment = 8 : i64} loc(#loc215)
    %2 = cir.const #cir.int<0> : !s64i loc(#loc61)
    cir.store %2, %1 : !s64i, !cir.ptr<!s64i> loc(#loc216)
    cir.br ^bb1 loc(#loc217)
  ^bb1:  // pred: ^bb0
    %3 = cir.get_global @staticReturnsTrue : !cir.ptr<!cir.func<!s32i ()>> loc(#loc218)
    %4 = cir.call @staticReturnsTrue() : () -> !s32i loc(#loc65)
    %5 = cir.cast(int_to_bool, %4 : !s32i), !cir.bool loc(#loc65)
    cir.brcond %5 ^bb2, ^bb3 loc(#loc219)
  ^bb2:  // pred: ^bb1
    %6 = cir.get_global @__isoc99_fscanf : !cir.ptr<!cir.func<!s32i (!cir.ptr<!ty__IO_FILE>, !cir.ptr<!s8i>, ...)>> loc(#loc68)
    %7 = cir.get_global @stdin : !cir.ptr<!cir.ptr<!ty__IO_FILE>> loc(#loc190)
    %8 = cir.load %7 : !cir.ptr<!cir.ptr<!ty__IO_FILE>>, !cir.ptr<!ty__IO_FILE> loc(#loc69)
    %9 = cir.get_global @".str" : !cir.ptr<!cir.array<!s8i x 4>> loc(#loc220)
    %10 = cir.cast(array_to_ptrdecay, %9 : !cir.ptr<!cir.array<!s8i x 4>>), !cir.ptr<!s8i> loc(#loc220)
    %11 = cir.call @__isoc99_fscanf(%8, %10, %1) : (!cir.ptr<!ty__IO_FILE>, !cir.ptr<!s8i>, !cir.ptr<!s64i>) -> !s32i loc(#loc68)
    cir.br ^bb3 loc(#loc64)
  ^bb3:  // 2 preds: ^bb1, ^bb2
    cir.br ^bb4 loc(#loc64)
  ^bb4:  // pred: ^bb3
    cir.br ^bb5 loc(#loc221)
  ^bb5:  // pred: ^bb4
    %12 = cir.get_global @staticReturnsFalse : !cir.ptr<!cir.func<!s32i ()>> loc(#loc222)
    %13 = cir.call %12() : (!cir.ptr<!cir.func<!s32i ()>>) -> !s32i loc(#loc74)
    %14 = cir.cast(int_to_bool, %13 : !s32i), !cir.bool loc(#loc74)
    cir.brcond %14 ^bb6, ^bb7 loc(#loc223)
  ^bb6:  // pred: ^bb5
    %15 = cir.get_global @".str.1" : !cir.ptr<!cir.array<!s8i x 21>> loc(#loc50)
    %16 = cir.cast(array_to_ptrdecay, %15 : !cir.ptr<!cir.array<!s8i x 21>>), !cir.ptr<!s8i> loc(#loc50)
    cir.call @printLine(%16) : (!cir.ptr<!s8i>) -> () loc(#loc79)
    cir.br ^bb13 loc(#loc77)
  ^bb7:  // pred: ^bb5
    cir.br ^bb8 loc(#loc224)
  ^bb8:  // pred: ^bb7
    %17 = cir.load %1 : !cir.ptr<!s64i>, !s64i loc(#loc82)
    %18 = cir.call @imaxabs(%17) : (!s64i) -> !s64i extra(#fn_attr1) loc(#loc83)
    %19 = cir.cast(int_to_float, %18 : !s64i), !cir.long_double<!cir.f80> loc(#loc83)
    %20 = cir.get_global @sqrtl : !cir.ptr<!cir.func<!cir.long_double<!cir.f80> (!cir.long_double<!cir.f80>)>> loc(#loc84)
    %21 = cir.const #cir.int<9223372036854775807> : !s64i loc(#loc85)
    %22 = cir.cast(int_to_float, %21 : !s64i), !cir.long_double<!cir.f80> loc(#loc85)
    %23 = cir.call @sqrtl(%22) : (!cir.long_double<!cir.f80>) -> !cir.long_double<!cir.f80> extra(#fn_attr1) loc(#loc84)
    %24 = cir.cmp(le, %19, %23) : !cir.long_double<!cir.f80>, !cir.bool loc(#loc225)
    cir.brcond %24 ^bb9, ^bb10 loc(#loc226)
  ^bb9:  // pred: ^bb8
    %25 = cir.load %1 : !cir.ptr<!s64i>, !s64i loc(#loc90)
    %26 = cir.load %1 : !cir.ptr<!s64i>, !s64i loc(#loc58)
    %27 = cir.binop(mul, %25, %26) nsw : !s64i loc(#loc90)
    cir.store %27, %0 : !s64i, !cir.ptr<!s64i> loc(#loc214)
    %28 = cir.load %0 : !cir.ptr<!s64i>, !s64i loc(#loc91)
    cir.call @printLongLongLine(%28) : (!s64i) -> () loc(#loc92)
    cir.br ^bb11 loc(#loc88)
  ^bb10:  // pred: ^bb8
    %29 = cir.get_global @".str.2" : !cir.ptr<!cir.array<!s8i x 54>> loc(#loc54)
    %30 = cir.cast(array_to_ptrdecay, %29 : !cir.ptr<!cir.array<!s8i x 54>>), !cir.ptr<!s8i> loc(#loc54)
    cir.call @printLine(%30) : (!cir.ptr<!s8i>) -> () loc(#loc93)
    cir.br ^bb11 loc(#loc81)
  ^bb11:  // 2 preds: ^bb9, ^bb10
    cir.br ^bb12 loc(#loc81)
  ^bb12:  // pred: ^bb11
    cir.br ^bb13 loc(#loc73)
  ^bb13:  // 2 preds: ^bb6, ^bb12
    cir.br ^bb14 loc(#loc73)
  ^bb14:  // pred: ^bb13
    cir.return loc(#loc56)
  } loc(#loc213)
  cir.func no_proto internal private @staticReturnsFalse() -> !s32i extra(#fn_attr) {
    %0 = cir.alloca !s32i, !cir.ptr<!s32i>, ["__retval"] {alignment = 4 : i64} loc(#loc95)
    %1 = cir.const #cir.int<0> : !s32i loc(#loc96)
    cir.store %1, %0 : !s32i, !cir.ptr<!s32i> loc(#loc228)
    %2 = cir.load %0 : !cir.ptr<!s32i>, !s32i loc(#loc228)
    cir.return %2 : !s32i loc(#loc228)
  } loc(#loc227)
  cir.func no_proto internal private @goodB2G2() extra(#fn_attr) {
    %0 = cir.alloca !s64i, !cir.ptr<!s64i>, ["result", init] {alignment = 8 : i64} loc(#loc230)
    %1 = cir.alloca !s64i, !cir.ptr<!s64i>, ["data"] {alignment = 8 : i64} loc(#loc231)
    %2 = cir.const #cir.int<0> : !s64i loc(#loc104)
    cir.store %2, %1 : !s64i, !cir.ptr<!s64i> loc(#loc232)
    cir.br ^bb1 loc(#loc233)
  ^bb1:  // pred: ^bb0
    %3 = cir.get_global @staticReturnsTrue : !cir.ptr<!cir.func<!s32i ()>> loc(#loc234)
    %4 = cir.call @staticReturnsTrue() : () -> !s32i loc(#loc108)
    %5 = cir.cast(int_to_bool, %4 : !s32i), !cir.bool loc(#loc108)
    cir.brcond %5 ^bb2, ^bb3 loc(#loc235)
  ^bb2:  // pred: ^bb1
    %6 = cir.get_global @__isoc99_fscanf : !cir.ptr<!cir.func<!s32i (!cir.ptr<!ty__IO_FILE>, !cir.ptr<!s8i>, ...)>> loc(#loc111)
    %7 = cir.get_global @stdin : !cir.ptr<!cir.ptr<!ty__IO_FILE>> loc(#loc190)
    %8 = cir.load %7 : !cir.ptr<!cir.ptr<!ty__IO_FILE>>, !cir.ptr<!ty__IO_FILE> loc(#loc112)
    %9 = cir.get_global @".str" : !cir.ptr<!cir.array<!s8i x 4>> loc(#loc236)
    %10 = cir.cast(array_to_ptrdecay, %9 : !cir.ptr<!cir.array<!s8i x 4>>), !cir.ptr<!s8i> loc(#loc236)
    %11 = cir.call @__isoc99_fscanf(%8, %10, %1) : (!cir.ptr<!ty__IO_FILE>, !cir.ptr<!s8i>, !cir.ptr<!s64i>) -> !s32i loc(#loc111)
    cir.br ^bb3 loc(#loc107)
  ^bb3:  // 2 preds: ^bb1, ^bb2
    cir.br ^bb4 loc(#loc107)
  ^bb4:  // pred: ^bb3
    cir.br ^bb5 loc(#loc237)
  ^bb5:  // pred: ^bb4
    %12 = cir.get_global @staticReturnsTrue : !cir.ptr<!cir.func<!s32i ()>> loc(#loc238)
    %13 = cir.call @staticReturnsTrue() : () -> !s32i loc(#loc117)
    %14 = cir.cast(int_to_bool, %13 : !s32i), !cir.bool loc(#loc117)
    cir.brcond %14 ^bb6, ^bb12 loc(#loc239)
  ^bb6:  // pred: ^bb5
    cir.br ^bb7 loc(#loc240)
  ^bb7:  // pred: ^bb6
    %15 = cir.load %1 : !cir.ptr<!s64i>, !s64i loc(#loc122)
    %16 = cir.call @imaxabs(%15) : (!s64i) -> !s64i extra(#fn_attr1) loc(#loc123)
    %17 = cir.cast(int_to_float, %16 : !s64i), !cir.long_double<!cir.f80> loc(#loc123)
    %18 = cir.get_global @sqrtl : !cir.ptr<!cir.func<!cir.long_double<!cir.f80> (!cir.long_double<!cir.f80>)>> loc(#loc124)
    %19 = cir.const #cir.int<9223372036854775807> : !s64i loc(#loc125)
    %20 = cir.cast(int_to_float, %19 : !s64i), !cir.long_double<!cir.f80> loc(#loc125)
    %21 = cir.call @sqrtl(%20) : (!cir.long_double<!cir.f80>) -> !cir.long_double<!cir.f80> extra(#fn_attr1) loc(#loc124)
    %22 = cir.cmp(le, %17, %21) : !cir.long_double<!cir.f80>, !cir.bool loc(#loc241)
    cir.brcond %22 ^bb8, ^bb9 loc(#loc242)
  ^bb8:  // pred: ^bb7
    %23 = cir.load %1 : !cir.ptr<!s64i>, !s64i loc(#loc130)
    %24 = cir.load %1 : !cir.ptr<!s64i>, !s64i loc(#loc101)
    %25 = cir.binop(mul, %23, %24) nsw : !s64i loc(#loc130)
    cir.store %25, %0 : !s64i, !cir.ptr<!s64i> loc(#loc230)
    %26 = cir.load %0 : !cir.ptr<!s64i>, !s64i loc(#loc131)
    cir.call @printLongLongLine(%26) : (!s64i) -> () loc(#loc132)
    cir.br ^bb10 loc(#loc128)
  ^bb9:  // pred: ^bb7
    %27 = cir.get_global @".str.2" : !cir.ptr<!cir.array<!s8i x 54>> loc(#loc133)
    %28 = cir.cast(array_to_ptrdecay, %27 : !cir.ptr<!cir.array<!s8i x 54>>), !cir.ptr<!s8i> loc(#loc133)
    cir.call @printLine(%28) : (!cir.ptr<!s8i>) -> () loc(#loc134)
    cir.br ^bb10 loc(#loc121)
  ^bb10:  // 2 preds: ^bb8, ^bb9
    cir.br ^bb11 loc(#loc121)
  ^bb11:  // pred: ^bb10
    cir.br ^bb12 loc(#loc116)
  ^bb12:  // 2 preds: ^bb5, ^bb11
    cir.br ^bb13 loc(#loc116)
  ^bb13:  // pred: ^bb12
    cir.return loc(#loc99)
  } loc(#loc229)
  cir.func no_proto internal private @goodG2B1() extra(#fn_attr) {
    %0 = cir.alloca !s64i, !cir.ptr<!s64i>, ["result", init] {alignment = 8 : i64} loc(#loc244)
    %1 = cir.alloca !s64i, !cir.ptr<!s64i>, ["data"] {alignment = 8 : i64} loc(#loc245)
    %2 = cir.const #cir.int<0> : !s64i loc(#loc141)
    cir.store %2, %1 : !s64i, !cir.ptr<!s64i> loc(#loc246)
    cir.br ^bb1 loc(#loc247)
  ^bb1:  // pred: ^bb0
    %3 = cir.get_global @staticReturnsFalse : !cir.ptr<!cir.func<!s32i ()>> loc(#loc248)
    %4 = cir.call @staticReturnsFalse() : () -> !s32i loc(#loc145)
    %5 = cir.cast(int_to_bool, %4 : !s32i), !cir.bool loc(#loc145)
    cir.brcond %5 ^bb2, ^bb3 loc(#loc249)
  ^bb2:  // pred: ^bb1
    %6 = cir.get_global @".str.1" : !cir.ptr<!cir.array<!s8i x 21>> loc(#loc150)
    %7 = cir.cast(array_to_ptrdecay, %6 : !cir.ptr<!cir.array<!s8i x 21>>), !cir.ptr<!s8i> loc(#loc150)
    cir.call @printLine(%7) : (!cir.ptr<!s8i>) -> () loc(#loc151)
    cir.br ^bb4 loc(#loc148)
  ^bb3:  // pred: ^bb1
    %8 = cir.const #cir.int<2> : !s32i loc(#loc152)
    %9 = cir.cast(integral, %8 : !s32i), !s64i loc(#loc152)
    cir.store %9, %1 : !s64i, !cir.ptr<!s64i> loc(#loc250)
    cir.br ^bb4 loc(#loc144)
  ^bb4:  // 2 preds: ^bb2, ^bb3
    cir.br ^bb5 loc(#loc144)
  ^bb5:  // pred: ^bb4
    cir.br ^bb6 loc(#loc251)
  ^bb6:  // pred: ^bb5
    %10 = cir.get_global @staticReturnsTrue : !cir.ptr<!cir.func<!s32i ()>> loc(#loc252)
    %11 = cir.call @staticReturnsTrue() : () -> !s32i loc(#loc156)
    %12 = cir.cast(int_to_bool, %11 : !s32i), !cir.bool loc(#loc156)
    cir.brcond %12 ^bb7, ^bb10 loc(#loc253)
  ^bb7:  // pred: ^bb6
    cir.br ^bb8 loc(#loc254)
  ^bb8:  // pred: ^bb7
    %13 = cir.load %1 : !cir.ptr<!s64i>, !s64i loc(#loc161)
    %14 = cir.load %1 : !cir.ptr<!s64i>, !s64i loc(#loc138)
    %15 = cir.binop(mul, %13, %14) nsw : !s64i loc(#loc161)
    cir.store %15, %0 : !s64i, !cir.ptr<!s64i> loc(#loc244)
    %16 = cir.load %0 : !cir.ptr<!s64i>, !s64i loc(#loc162)
    cir.call @printLongLongLine(%16) : (!s64i) -> () loc(#loc163)
    cir.br ^bb9 loc(#loc160)
  ^bb9:  // pred: ^bb8
    cir.br ^bb10 loc(#loc155)
  ^bb10:  // 2 preds: ^bb6, ^bb9
    cir.br ^bb11 loc(#loc155)
  ^bb11:  // pred: ^bb10
    cir.return loc(#loc136)
  } loc(#loc243)
  cir.func no_proto internal private @goodG2B2() extra(#fn_attr) {
    %0 = cir.alloca !s64i, !cir.ptr<!s64i>, ["result", init] {alignment = 8 : i64} loc(#loc256)
    %1 = cir.alloca !s64i, !cir.ptr<!s64i>, ["data"] {alignment = 8 : i64} loc(#loc257)
    %2 = cir.const #cir.int<0> : !s64i loc(#loc170)
    cir.store %2, %1 : !s64i, !cir.ptr<!s64i> loc(#loc258)
    cir.br ^bb1 loc(#loc259)
  ^bb1:  // pred: ^bb0
    %3 = cir.get_global @staticReturnsTrue : !cir.ptr<!cir.func<!s32i ()>> loc(#loc260)
    %4 = cir.call @staticReturnsTrue() : () -> !s32i loc(#loc174)
    %5 = cir.cast(int_to_bool, %4 : !s32i), !cir.bool loc(#loc174)
    cir.brcond %5 ^bb2, ^bb3 loc(#loc261)
  ^bb2:  // pred: ^bb1
    %6 = cir.const #cir.int<2> : !s32i loc(#loc177)
    %7 = cir.cast(integral, %6 : !s32i), !s64i loc(#loc177)
    cir.store %7, %1 : !s64i, !cir.ptr<!s64i> loc(#loc262)
    cir.br ^bb3 loc(#loc173)
  ^bb3:  // 2 preds: ^bb1, ^bb2
    cir.br ^bb4 loc(#loc173)
  ^bb4:  // pred: ^bb3
    cir.br ^bb5 loc(#loc263)
  ^bb5:  // pred: ^bb4
    %8 = cir.get_global @staticReturnsTrue : !cir.ptr<!cir.func<!s32i ()>> loc(#loc264)
    %9 = cir.call @staticReturnsTrue() : () -> !s32i loc(#loc181)
    %10 = cir.cast(int_to_bool, %9 : !s32i), !cir.bool loc(#loc181)
    cir.brcond %10 ^bb6, ^bb9 loc(#loc265)
  ^bb6:  // pred: ^bb5
    cir.br ^bb7 loc(#loc266)
  ^bb7:  // pred: ^bb6
    %11 = cir.load %1 : !cir.ptr<!s64i>, !s64i loc(#loc186)
    %12 = cir.load %1 : !cir.ptr<!s64i>, !s64i loc(#loc167)
    %13 = cir.binop(mul, %11, %12) nsw : !s64i loc(#loc186)
    cir.store %13, %0 : !s64i, !cir.ptr<!s64i> loc(#loc256)
    %14 = cir.load %0 : !cir.ptr<!s64i>, !s64i loc(#loc187)
    cir.call @printLongLongLine(%14) : (!s64i) -> () loc(#loc188)
    cir.br ^bb8 loc(#loc185)
  ^bb8:  // pred: ^bb7
    cir.br ^bb9 loc(#loc180)
  ^bb9:  // 2 preds: ^bb5, ^bb8
    cir.br ^bb10 loc(#loc180)
  ^bb10:  // pred: ^bb9
    cir.return loc(#loc165)
  } loc(#loc255)
} loc(#loc)
#loc = loc("/home/ladisgin/git_proj/juliet-c/testcases/CWE190_Integer_Overflow/s02/CWE190_Integer_Overflow__int64_t_fscanf_square_08.c":0:0)
#loc1 = loc("/usr/include/stdio.h":463:1)
#loc2 = loc("/usr/include/stdio.h":465:33)
#loc3 = loc("/usr/include/stdio.h":149:1)
#loc4 = loc("/usr/include/stdio.h":149:14)
#loc5 = loc("CWE190_Integer_Overflow__int64_t_fscanf_square_08.c":45:24)
#loc6 = loc("CWE190_Integer_Overflow__int64_t_fscanf_square_08.c":45:28)
#loc7 = loc("../../../testcasesupport/std_testcase_io.h":26:1)
#loc8 = loc("../../../testcasesupport/std_testcase_io.h":26:49)
#loc9 = loc("CWE190_Integer_Overflow__int64_t_fscanf_square_08.c":38:1)
#loc10 = loc("CWE190_Integer_Overflow__int64_t_fscanf_square_08.c":55:1)
#loc11 = loc("CWE190_Integer_Overflow__int64_t_fscanf_square_08.c":51:13)
#loc12 = loc("CWE190_Integer_Overflow__int64_t_fscanf_square_08.c":51:37)
#loc13 = loc("CWE190_Integer_Overflow__int64_t_fscanf_square_08.c":40:5)
#loc14 = loc("CWE190_Integer_Overflow__int64_t_fscanf_square_08.c":40:13)
#loc15 = loc("CWE190_Integer_Overflow__int64_t_fscanf_square_08.c":41:12)
#loc16 = loc("CWE190_Integer_Overflow__int64_t_fscanf_square_08.c":41:5)
#loc17 = loc("CWE190_Integer_Overflow__int64_t_fscanf_square_08.c":42:5)
#loc18 = loc("CWE190_Integer_Overflow__int64_t_fscanf_square_08.c":46:5)
#loc19 = loc("CWE190_Integer_Overflow__int64_t_fscanf_square_08.c":42:8)
#loc20 = loc("CWE190_Integer_Overflow__int64_t_fscanf_square_08.c":42:26)
#loc21 = loc("CWE190_Integer_Overflow__int64_t_fscanf_square_08.c":43:5)
#loc22 = loc("CWE190_Integer_Overflow__int64_t_fscanf_square_08.c":45:9)
#loc23 = loc("CWE190_Integer_Overflow__int64_t_fscanf_square_08.c":45:17)
#loc24 = loc("CWE190_Integer_Overflow__int64_t_fscanf_square_08.c":47:5)
#loc25 = loc("CWE190_Integer_Overflow__int64_t_fscanf_square_08.c":54:5)
#loc26 = loc("CWE190_Integer_Overflow__int64_t_fscanf_square_08.c":47:8)
#loc27 = loc("CWE190_Integer_Overflow__int64_t_fscanf_square_08.c":47:26)
#loc28 = loc("CWE190_Integer_Overflow__int64_t_fscanf_square_08.c":48:5)
#loc29 = loc("CWE190_Integer_Overflow__int64_t_fscanf_square_08.c":49:9)
#loc30 = loc("CWE190_Integer_Overflow__int64_t_fscanf_square_08.c":53:9)
#loc31 = loc("CWE190_Integer_Overflow__int64_t_fscanf_square_08.c":51:30)
#loc32 = loc("CWE190_Integer_Overflow__int64_t_fscanf_square_08.c":52:31)
#loc33 = loc("CWE190_Integer_Overflow__int64_t_fscanf_square_08.c":52:13)
#loc34 = loc("CWE190_Integer_Overflow__int64_t_fscanf_square_08.c":161:1)
#loc35 = loc("CWE190_Integer_Overflow__int64_t_fscanf_square_08.c":167:1)
#loc36 = loc("CWE190_Integer_Overflow__int64_t_fscanf_square_08.c":163:5)
#loc37 = loc("CWE190_Integer_Overflow__int64_t_fscanf_square_08.c":163:14)
#loc38 = loc("CWE190_Integer_Overflow__int64_t_fscanf_square_08.c":164:5)
#loc39 = loc("CWE190_Integer_Overflow__int64_t_fscanf_square_08.c":164:14)
#loc40 = loc("CWE190_Integer_Overflow__int64_t_fscanf_square_08.c":165:5)
#loc41 = loc("CWE190_Integer_Overflow__int64_t_fscanf_square_08.c":165:14)
#loc42 = loc("CWE190_Integer_Overflow__int64_t_fscanf_square_08.c":166:5)
#loc43 = loc("CWE190_Integer_Overflow__int64_t_fscanf_square_08.c":166:14)
#loc44 = loc("CWE190_Integer_Overflow__int64_t_fscanf_square_08.c":26:1)
#loc45 = loc("CWE190_Integer_Overflow__int64_t_fscanf_square_08.c":29:1)
#loc46 = loc("CWE190_Integer_Overflow__int64_t_fscanf_square_08.c":28:12)
#loc47 = loc("CWE190_Integer_Overflow__int64_t_fscanf_square_08.c":28:5)
#loc48 = loc("../../../testcasesupport/std_testcase_io.h":14:1)
#loc49 = loc("../../../testcasesupport/std_testcase_io.h":14:33)
#loc50 = loc("CWE190_Integer_Overflow__int64_t_fscanf_square_08.c":74:19)
#loc51 = loc("/usr/include/inttypes.h":351:1)
#loc52 = loc("/usr/include/inttypes.h":351:74)
#loc53 = loc("/usr/include/bits/mathcalls.h":158:1)
#loc54 = loc("CWE190_Integer_Overflow__int64_t_fscanf_square_08.c":86:23)
#loc55 = loc("CWE190_Integer_Overflow__int64_t_fscanf_square_08.c":62:1)
#loc56 = loc("CWE190_Integer_Overflow__int64_t_fscanf_square_08.c":89:1)
#loc57 = loc("CWE190_Integer_Overflow__int64_t_fscanf_square_08.c":81:13)
#loc58 = loc("CWE190_Integer_Overflow__int64_t_fscanf_square_08.c":81:37)
#loc59 = loc("CWE190_Integer_Overflow__int64_t_fscanf_square_08.c":64:5)
#loc60 = loc("CWE190_Integer_Overflow__int64_t_fscanf_square_08.c":64:13)
#loc61 = loc("CWE190_Integer_Overflow__int64_t_fscanf_square_08.c":65:12)
#loc62 = loc("CWE190_Integer_Overflow__int64_t_fscanf_square_08.c":65:5)
#loc63 = loc("CWE190_Integer_Overflow__int64_t_fscanf_square_08.c":66:5)
#loc64 = loc("CWE190_Integer_Overflow__int64_t_fscanf_square_08.c":70:5)
#loc65 = loc("CWE190_Integer_Overflow__int64_t_fscanf_square_08.c":66:8)
#loc66 = loc("CWE190_Integer_Overflow__int64_t_fscanf_square_08.c":66:26)
#loc67 = loc("CWE190_Integer_Overflow__int64_t_fscanf_square_08.c":67:5)
#loc68 = loc("CWE190_Integer_Overflow__int64_t_fscanf_square_08.c":69:9)
#loc69 = loc("CWE190_Integer_Overflow__int64_t_fscanf_square_08.c":69:17)
#loc70 = loc("CWE190_Integer_Overflow__int64_t_fscanf_square_08.c":69:24)
#loc71 = loc("CWE190_Integer_Overflow__int64_t_fscanf_square_08.c":69:28)
#loc72 = loc("CWE190_Integer_Overflow__int64_t_fscanf_square_08.c":71:5)
#loc73 = loc("CWE190_Integer_Overflow__int64_t_fscanf_square_08.c":88:5)
#loc74 = loc("CWE190_Integer_Overflow__int64_t_fscanf_square_08.c":71:8)
#loc75 = loc("CWE190_Integer_Overflow__int64_t_fscanf_square_08.c":71:27)
#loc76 = loc("CWE190_Integer_Overflow__int64_t_fscanf_square_08.c":72:5)
#loc77 = loc("CWE190_Integer_Overflow__int64_t_fscanf_square_08.c":75:5)
#loc78 = loc("CWE190_Integer_Overflow__int64_t_fscanf_square_08.c":77:5)
#loc79 = loc("CWE190_Integer_Overflow__int64_t_fscanf_square_08.c":74:9)
#loc80 = loc("CWE190_Integer_Overflow__int64_t_fscanf_square_08.c":79:9)
#loc81 = loc("CWE190_Integer_Overflow__int64_t_fscanf_square_08.c":87:9)
#loc82 = loc("CWE190_Integer_Overflow__int64_t_fscanf_square_08.c":79:31)
#loc83 = loc("CWE190_Integer_Overflow__int64_t_fscanf_square_08.c":79:13)
#loc84 = loc("CWE190_Integer_Overflow__int64_t_fscanf_square_08.c":79:40)
#loc85 = loc("CWE190_Integer_Overflow__int64_t_fscanf_square_08.c":79:46)
#loc86 = loc("CWE190_Integer_Overflow__int64_t_fscanf_square_08.c":79:55)
#loc87 = loc("CWE190_Integer_Overflow__int64_t_fscanf_square_08.c":80:9)
#loc88 = loc("CWE190_Integer_Overflow__int64_t_fscanf_square_08.c":83:9)
#loc89 = loc("CWE190_Integer_Overflow__int64_t_fscanf_square_08.c":85:9)
#loc90 = loc("CWE190_Integer_Overflow__int64_t_fscanf_square_08.c":81:30)
#loc91 = loc("CWE190_Integer_Overflow__int64_t_fscanf_square_08.c":82:31)
#loc92 = loc("CWE190_Integer_Overflow__int64_t_fscanf_square_08.c":82:13)
#loc93 = loc("CWE190_Integer_Overflow__int64_t_fscanf_square_08.c":86:13)
#loc94 = loc("CWE190_Integer_Overflow__int64_t_fscanf_square_08.c":31:1)
#loc95 = loc("CWE190_Integer_Overflow__int64_t_fscanf_square_08.c":34:1)
#loc96 = loc("CWE190_Integer_Overflow__int64_t_fscanf_square_08.c":33:12)
#loc97 = loc("CWE190_Integer_Overflow__int64_t_fscanf_square_08.c":33:5)
#loc98 = loc("CWE190_Integer_Overflow__int64_t_fscanf_square_08.c":92:1)
#loc99 = loc("CWE190_Integer_Overflow__int64_t_fscanf_square_08.c":114:1)
#loc100 = loc("CWE190_Integer_Overflow__int64_t_fscanf_square_08.c":106:13)
#loc101 = loc("CWE190_Integer_Overflow__int64_t_fscanf_square_08.c":106:37)
#loc102 = loc("CWE190_Integer_Overflow__int64_t_fscanf_square_08.c":94:5)
#loc103 = loc("CWE190_Integer_Overflow__int64_t_fscanf_square_08.c":94:13)
#loc104 = loc("CWE190_Integer_Overflow__int64_t_fscanf_square_08.c":95:12)
#loc105 = loc("CWE190_Integer_Overflow__int64_t_fscanf_square_08.c":95:5)
#loc106 = loc("CWE190_Integer_Overflow__int64_t_fscanf_square_08.c":96:5)
#loc107 = loc("CWE190_Integer_Overflow__int64_t_fscanf_square_08.c":100:5)
#loc108 = loc("CWE190_Integer_Overflow__int64_t_fscanf_square_08.c":96:8)
#loc109 = loc("CWE190_Integer_Overflow__int64_t_fscanf_square_08.c":96:26)
#loc110 = loc("CWE190_Integer_Overflow__int64_t_fscanf_square_08.c":97:5)
#loc111 = loc("CWE190_Integer_Overflow__int64_t_fscanf_square_08.c":99:9)
#loc112 = loc("CWE190_Integer_Overflow__int64_t_fscanf_square_08.c":99:17)
#loc113 = loc("CWE190_Integer_Overflow__int64_t_fscanf_square_08.c":99:24)
#loc114 = loc("CWE190_Integer_Overflow__int64_t_fscanf_square_08.c":99:28)
#loc115 = loc("CWE190_Integer_Overflow__int64_t_fscanf_square_08.c":101:5)
#loc116 = loc("CWE190_Integer_Overflow__int64_t_fscanf_square_08.c":113:5)
#loc117 = loc("CWE190_Integer_Overflow__int64_t_fscanf_square_08.c":101:8)
#loc118 = loc("CWE190_Integer_Overflow__int64_t_fscanf_square_08.c":101:26)
#loc119 = loc("CWE190_Integer_Overflow__int64_t_fscanf_square_08.c":102:5)
#loc120 = loc("CWE190_Integer_Overflow__int64_t_fscanf_square_08.c":104:9)
#loc121 = loc("CWE190_Integer_Overflow__int64_t_fscanf_square_08.c":112:9)
#loc122 = loc("CWE190_Integer_Overflow__int64_t_fscanf_square_08.c":104:31)
#loc123 = loc("CWE190_Integer_Overflow__int64_t_fscanf_square_08.c":104:13)
#loc124 = loc("CWE190_Integer_Overflow__int64_t_fscanf_square_08.c":104:40)
#loc125 = loc("CWE190_Integer_Overflow__int64_t_fscanf_square_08.c":104:46)
#loc126 = loc("CWE190_Integer_Overflow__int64_t_fscanf_square_08.c":104:55)
#loc127 = loc("CWE190_Integer_Overflow__int64_t_fscanf_square_08.c":105:9)
#loc128 = loc("CWE190_Integer_Overflow__int64_t_fscanf_square_08.c":108:9)
#loc129 = loc("CWE190_Integer_Overflow__int64_t_fscanf_square_08.c":110:9)
#loc130 = loc("CWE190_Integer_Overflow__int64_t_fscanf_square_08.c":106:30)
#loc131 = loc("CWE190_Integer_Overflow__int64_t_fscanf_square_08.c":107:31)
#loc132 = loc("CWE190_Integer_Overflow__int64_t_fscanf_square_08.c":107:13)
#loc133 = loc("CWE190_Integer_Overflow__int64_t_fscanf_square_08.c":111:23)
#loc134 = loc("CWE190_Integer_Overflow__int64_t_fscanf_square_08.c":111:13)
#loc135 = loc("CWE190_Integer_Overflow__int64_t_fscanf_square_08.c":117:1)
#loc136 = loc("CWE190_Integer_Overflow__int64_t_fscanf_square_08.c":139:1)
#loc137 = loc("CWE190_Integer_Overflow__int64_t_fscanf_square_08.c":135:13)
#loc138 = loc("CWE190_Integer_Overflow__int64_t_fscanf_square_08.c":135:37)
#loc139 = loc("CWE190_Integer_Overflow__int64_t_fscanf_square_08.c":119:5)
#loc140 = loc("CWE190_Integer_Overflow__int64_t_fscanf_square_08.c":119:13)
#loc141 = loc("CWE190_Integer_Overflow__int64_t_fscanf_square_08.c":120:12)
#loc142 = loc("CWE190_Integer_Overflow__int64_t_fscanf_square_08.c":120:5)
#loc143 = loc("CWE190_Integer_Overflow__int64_t_fscanf_square_08.c":121:5)
#loc144 = loc("CWE190_Integer_Overflow__int64_t_fscanf_square_08.c":130:5)
#loc145 = loc("CWE190_Integer_Overflow__int64_t_fscanf_square_08.c":121:8)
#loc146 = loc("CWE190_Integer_Overflow__int64_t_fscanf_square_08.c":121:27)
#loc147 = loc("CWE190_Integer_Overflow__int64_t_fscanf_square_08.c":122:5)
#loc148 = loc("CWE190_Integer_Overflow__int64_t_fscanf_square_08.c":125:5)
#loc149 = loc("CWE190_Integer_Overflow__int64_t_fscanf_square_08.c":127:5)
#loc150 = loc("CWE190_Integer_Overflow__int64_t_fscanf_square_08.c":124:19)
#loc151 = loc("CWE190_Integer_Overflow__int64_t_fscanf_square_08.c":124:9)
#loc152 = loc("CWE190_Integer_Overflow__int64_t_fscanf_square_08.c":129:16)
#loc153 = loc("CWE190_Integer_Overflow__int64_t_fscanf_square_08.c":129:9)
#loc154 = loc("CWE190_Integer_Overflow__int64_t_fscanf_square_08.c":131:5)
#loc155 = loc("CWE190_Integer_Overflow__int64_t_fscanf_square_08.c":138:5)
#loc156 = loc("CWE190_Integer_Overflow__int64_t_fscanf_square_08.c":131:8)
#loc157 = loc("CWE190_Integer_Overflow__int64_t_fscanf_square_08.c":131:26)
#loc158 = loc("CWE190_Integer_Overflow__int64_t_fscanf_square_08.c":132:5)
#loc159 = loc("CWE190_Integer_Overflow__int64_t_fscanf_square_08.c":133:9)
#loc160 = loc("CWE190_Integer_Overflow__int64_t_fscanf_square_08.c":137:9)
#loc161 = loc("CWE190_Integer_Overflow__int64_t_fscanf_square_08.c":135:30)
#loc162 = loc("CWE190_Integer_Overflow__int64_t_fscanf_square_08.c":136:31)
#loc163 = loc("CWE190_Integer_Overflow__int64_t_fscanf_square_08.c":136:13)
#loc164 = loc("CWE190_Integer_Overflow__int64_t_fscanf_square_08.c":142:1)
#loc165 = loc("CWE190_Integer_Overflow__int64_t_fscanf_square_08.c":159:1)
#loc166 = loc("CWE190_Integer_Overflow__int64_t_fscanf_square_08.c":155:13)
#loc167 = loc("CWE190_Integer_Overflow__int64_t_fscanf_square_08.c":155:37)
#loc168 = loc("CWE190_Integer_Overflow__int64_t_fscanf_square_08.c":144:5)
#loc169 = loc("CWE190_Integer_Overflow__int64_t_fscanf_square_08.c":144:13)
#loc170 = loc("CWE190_Integer_Overflow__int64_t_fscanf_square_08.c":145:12)
#loc171 = loc("CWE190_Integer_Overflow__int64_t_fscanf_square_08.c":145:5)
#loc172 = loc("CWE190_Integer_Overflow__int64_t_fscanf_square_08.c":146:5)
#loc173 = loc("CWE190_Integer_Overflow__int64_t_fscanf_square_08.c":150:5)
#loc174 = loc("CWE190_Integer_Overflow__int64_t_fscanf_square_08.c":146:8)
#loc175 = loc("CWE190_Integer_Overflow__int64_t_fscanf_square_08.c":146:26)
#loc176 = loc("CWE190_Integer_Overflow__int64_t_fscanf_square_08.c":147:5)
#loc177 = loc("CWE190_Integer_Overflow__int64_t_fscanf_square_08.c":149:16)
#loc178 = loc("CWE190_Integer_Overflow__int64_t_fscanf_square_08.c":149:9)
#loc179 = loc("CWE190_Integer_Overflow__int64_t_fscanf_square_08.c":151:5)
#loc180 = loc("CWE190_Integer_Overflow__int64_t_fscanf_square_08.c":158:5)
#loc181 = loc("CWE190_Integer_Overflow__int64_t_fscanf_square_08.c":151:8)
#loc182 = loc("CWE190_Integer_Overflow__int64_t_fscanf_square_08.c":151:26)
#loc183 = loc("CWE190_Integer_Overflow__int64_t_fscanf_square_08.c":152:5)
#loc184 = loc("CWE190_Integer_Overflow__int64_t_fscanf_square_08.c":153:9)
#loc185 = loc("CWE190_Integer_Overflow__int64_t_fscanf_square_08.c":157:9)
#loc186 = loc("CWE190_Integer_Overflow__int64_t_fscanf_square_08.c":155:30)
#loc187 = loc("CWE190_Integer_Overflow__int64_t_fscanf_square_08.c":156:31)
#loc188 = loc("CWE190_Integer_Overflow__int64_t_fscanf_square_08.c":156:13)
#loc189 = loc(fused[#loc1, #loc2])
#loc190 = loc(fused[#loc3, #loc4])
#loc191 = loc(fused[#loc5, #loc6])
#loc192 = loc(fused[#loc7, #loc8])
#loc193 = loc(fused[#loc9, #loc10])
#loc194 = loc(fused[#loc11, #loc12])
#loc195 = loc(fused[#loc13, #loc14])
#loc196 = loc(fused[#loc16, #loc15])
#loc197 = loc(fused[#loc17, #loc18])
#loc198 = loc(fused[#loc19, #loc20])
#loc199 = loc(fused[#loc21, #loc18])
#loc200 = loc(fused[#loc24, #loc25])
#loc201 = loc(fused[#loc26, #loc27])
#loc202 = loc(fused[#loc28, #loc25])
#loc203 = loc(fused[#loc29, #loc30])
#loc204 = loc(fused[#loc34, #loc35])
#loc205 = loc(fused[#loc36, #loc37])
#loc206 = loc(fused[#loc38, #loc39])
#loc207 = loc(fused[#loc40, #loc41])
#loc208 = loc(fused[#loc42, #loc43])
#loc209 = loc(fused[#loc44, #loc45])
#loc210 = loc(fused[#loc47, #loc46])
#loc211 = loc(fused[#loc48, #loc49])
#loc212 = loc(fused[#loc51, #loc52])
#loc213 = loc(fused[#loc55, #loc56])
#loc214 = loc(fused[#loc57, #loc58])
#loc215 = loc(fused[#loc59, #loc60])
#loc216 = loc(fused[#loc62, #loc61])
#loc217 = loc(fused[#loc63, #loc64])
#loc218 = loc(fused[#loc65, #loc66])
#loc219 = loc(fused[#loc67, #loc64])
#loc220 = loc(fused[#loc70, #loc71])
#loc221 = loc(fused[#loc72, #loc73])
#loc222 = loc(fused[#loc74, #loc75])
#loc223 = loc(fused[#loc76, #loc77, #loc78, #loc73])
#loc224 = loc(fused[#loc80, #loc81])
#loc225 = loc(fused[#loc83, #loc86])
#loc226 = loc(fused[#loc87, #loc88, #loc89, #loc81])
#loc227 = loc(fused[#loc94, #loc95])
#loc228 = loc(fused[#loc97, #loc96])
#loc229 = loc(fused[#loc98, #loc99])
#loc230 = loc(fused[#loc100, #loc101])
#loc231 = loc(fused[#loc102, #loc103])
#loc232 = loc(fused[#loc105, #loc104])
#loc233 = loc(fused[#loc106, #loc107])
#loc234 = loc(fused[#loc108, #loc109])
#loc235 = loc(fused[#loc110, #loc107])
#loc236 = loc(fused[#loc113, #loc114])
#loc237 = loc(fused[#loc115, #loc116])
#loc238 = loc(fused[#loc117, #loc118])
#loc239 = loc(fused[#loc119, #loc116])
#loc240 = loc(fused[#loc120, #loc121])
#loc241 = loc(fused[#loc123, #loc126])
#loc242 = loc(fused[#loc127, #loc128, #loc129, #loc121])
#loc243 = loc(fused[#loc135, #loc136])
#loc244 = loc(fused[#loc137, #loc138])
#loc245 = loc(fused[#loc139, #loc140])
#loc246 = loc(fused[#loc142, #loc141])
#loc247 = loc(fused[#loc143, #loc144])
#loc248 = loc(fused[#loc145, #loc146])
#loc249 = loc(fused[#loc147, #loc148, #loc149, #loc144])
#loc250 = loc(fused[#loc153, #loc152])
#loc251 = loc(fused[#loc154, #loc155])
#loc252 = loc(fused[#loc156, #loc157])
#loc253 = loc(fused[#loc158, #loc155])
#loc254 = loc(fused[#loc159, #loc160])
#loc255 = loc(fused[#loc164, #loc165])
#loc256 = loc(fused[#loc166, #loc167])
#loc257 = loc(fused[#loc168, #loc169])
#loc258 = loc(fused[#loc171, #loc170])
#loc259 = loc(fused[#loc172, #loc173])
#loc260 = loc(fused[#loc174, #loc175])
#loc261 = loc(fused[#loc176, #loc173])
#loc262 = loc(fused[#loc178, #loc177])
#loc263 = loc(fused[#loc179, #loc180])
#loc264 = loc(fused[#loc181, #loc182])
#loc265 = loc(fused[#loc183, #loc180])
#loc266 = loc(fused[#loc184, #loc185])
