!s32i = !cir.int<s, 32>
!s8i = !cir.int<s, 8>
#fn_attr = #cir<extra({nothrow = #cir.nothrow})>
#fn_attr1 = #cir<extra({inline = #cir.inline<no>, nothrow = #cir.nothrow, optnone = #cir.optnone, uwtable = #cir.uwtable<async>})>
module @"/workspaces/juliet-c/testcases/CWE484_Omitted_Break_Statement_in_Switch/CWE484_Omitted_Break_Statement_in_Switch__basic_17.c" attributes {cir.lang = #cir.lang<c>, cir.sob = #cir.signed_overflow_behavior<undefined>, cir.triple = "x86_64-unknown-linux-gnu", cir.type_size_info = #cir.type_size_info<char = 8, int = 32, size_t = 64>, cir.uwtable = #cir.uwtable<async>, dlti.dl_spec = #dlti.dl_spec<i16 = dense<16> : vector<2xi64>, i8 = dense<8> : vector<2xi64>, i1 = dense<8> : vector<2xi64>, !llvm.ptr = dense<64> : vector<4xi64>, i128 = dense<128> : vector<2xi64>, f80 = dense<128> : vector<2xi64>, i64 = dense<64> : vector<2xi64>, !llvm.ptr<271> = dense<32> : vector<4xi64>, !llvm.ptr<272> = dense<64> : vector<4xi64>, f128 = dense<128> : vector<2xi64>, !llvm.ptr<270> = dense<32> : vector<4xi64>, f64 = dense<64> : vector<2xi64>, f16 = dense<16> : vector<2xi64>, i32 = dense<32> : vector<2xi64>, "dlti.endianness" = "little", "dlti.mangling_mode" = "e", "dlti.stack_alignment" = 128 : i64>} {
  cir.func private @rand() -> !s32i extra(#fn_attr) loc(#loc86)
  cir.func private @printLine(!cir.ptr<!s8i>) loc(#loc87)
  cir.global "private" constant cir_private dsolocal @".str" = #cir.const_array<"0\00" : !cir.array<!s8i x 2>> : !cir.array<!s8i x 2> {alignment = 1 : i64} loc(#loc5)
  cir.global "private" constant cir_private dsolocal @".str.1" = #cir.const_array<"1\00" : !cir.array<!s8i x 2>> : !cir.array<!s8i x 2> {alignment = 1 : i64} loc(#loc6)
  cir.global "private" constant cir_private dsolocal @".str.2" = #cir.const_array<"2\00" : !cir.array<!s8i x 2>> : !cir.array<!s8i x 2> {alignment = 1 : i64} loc(#loc7)
  cir.global "private" constant cir_private dsolocal @".str.3" = #cir.const_array<"Invalid Number\00" : !cir.array<!s8i x 15>> : !cir.array<!s8i x 15> {alignment = 1 : i64} loc(#loc8)
  cir.func no_proto @CWE484_Omitted_Break_Statement_in_Switch__basic_17_bad() extra(#fn_attr1) {
    %0 = cir.alloca !s32i, !cir.ptr<!s32i>, ["j"] {alignment = 4 : i64} loc(#loc89)
    cir.scope {
      %1 = cir.const #cir.int<0> : !s32i loc(#loc15)
      cir.store %1, %0 : !s32i, !cir.ptr<!s32i> loc(#loc91)
      cir.for : cond {
        %2 = cir.load %0 : !cir.ptr<!s32i>, !s32i loc(#loc17)
        %3 = cir.const #cir.int<1> : !s32i loc(#loc18)
        %4 = cir.cmp(lt, %2, %3) : !s32i, !cir.bool loc(#loc92)
        cir.condition(%4) loc(#loc19)
      } body {
        cir.scope {
          cir.scope {
            %2 = cir.alloca !s32i, !cir.ptr<!s32i>, ["x", init] {alignment = 4 : i64} loc(#loc95)
            %3 = cir.call @rand() : () -> !s32i extra(#fn_attr) loc(#loc25)
            %4 = cir.const #cir.int<3> : !s32i loc(#loc26)
            %5 = cir.binop(rem, %3, %4) : !s32i loc(#loc96)
            cir.store %5, %2 : !s32i, !cir.ptr<!s32i> loc(#loc95)
            cir.scope {
              %6 = cir.load %2 : !cir.ptr<!s32i>, !s32i loc(#loc29)
              cir.switch (%6 : !s32i) {
                cir.case(equal, [#cir.int<0> : !s32i]) {
                  %7 = cir.get_global @".str" : !cir.ptr<!cir.array<!s8i x 2>> loc(#loc5)
                  %8 = cir.cast(array_to_ptrdecay, %7 : !cir.ptr<!cir.array<!s8i x 2>>), !cir.ptr<!s8i> loc(#loc5)
                  cir.call @printLine(%8) : (!cir.ptr<!s8i>) -> () loc(#loc31)
                  cir.yield loc(#loc30)
                } loc(#loc30)
                cir.case(equal, [#cir.int<1> : !s32i]) {
                  %7 = cir.get_global @".str.1" : !cir.ptr<!cir.array<!s8i x 2>> loc(#loc6)
                  %8 = cir.cast(array_to_ptrdecay, %7 : !cir.ptr<!cir.array<!s8i x 2>>), !cir.ptr<!s8i> loc(#loc6)
                  cir.call @printLine(%8) : (!cir.ptr<!s8i>) -> () loc(#loc33)
                  cir.break loc(#loc34)
                } loc(#loc32)
                cir.case(equal, [#cir.int<2> : !s32i]) {
                  %7 = cir.get_global @".str.2" : !cir.ptr<!cir.array<!s8i x 2>> loc(#loc7)
                  %8 = cir.cast(array_to_ptrdecay, %7 : !cir.ptr<!cir.array<!s8i x 2>>), !cir.ptr<!s8i> loc(#loc7)
                  cir.call @printLine(%8) : (!cir.ptr<!s8i>) -> () loc(#loc36)
                  cir.break loc(#loc37)
                } loc(#loc35)
                cir.case(default, []) {
                  %7 = cir.get_global @".str.3" : !cir.ptr<!cir.array<!s8i x 15>> loc(#loc8)
                  %8 = cir.cast(array_to_ptrdecay, %7 : !cir.ptr<!cir.array<!s8i x 15>>), !cir.ptr<!s8i> loc(#loc8)
                  cir.call @printLine(%8) : (!cir.ptr<!s8i>) -> () loc(#loc39)
                  cir.break loc(#loc40)
                } loc(#loc38)
                cir.yield loc(#loc27)
              } loc(#loc27)
            } loc(#loc97)
          } loc(#loc94)
        } loc(#loc93)
        cir.yield loc(#loc14)
      } step {
        %2 = cir.load %0 : !cir.ptr<!s32i>, !s32i loc(#loc41)
        %3 = cir.unary(inc, %2) nsw : !s32i, !s32i loc(#loc42)
        cir.store %3, %0 : !s32i, !cir.ptr<!s32i> loc(#loc98)
        cir.yield loc(#loc90)
      } loc(#loc90)
    } loc(#loc90)
    cir.return loc(#loc10)
  } loc(#loc88)
  cir.func no_proto @CWE484_Omitted_Break_Statement_in_Switch__basic_17_good() extra(#fn_attr1) {
    %0 = cir.get_global @good1 : !cir.ptr<!cir.func<()>> loc(#loc100)
    cir.call %0() : (!cir.ptr<!cir.func<()>>) -> () loc(#loc45)
    cir.return loc(#loc44)
  } loc(#loc99)
  cir.func no_proto internal private @good1() extra(#fn_attr1) {
    %0 = cir.alloca !s32i, !cir.ptr<!s32i>, ["k"] {alignment = 4 : i64} loc(#loc102)
    cir.scope {
      %1 = cir.const #cir.int<0> : !s32i loc(#loc53)
      cir.store %1, %0 : !s32i, !cir.ptr<!s32i> loc(#loc104)
      cir.for : cond {
        %2 = cir.load %0 : !cir.ptr<!s32i>, !s32i loc(#loc55)
        %3 = cir.const #cir.int<1> : !s32i loc(#loc56)
        %4 = cir.cmp(lt, %2, %3) : !s32i, !cir.bool loc(#loc105)
        cir.condition(%4) loc(#loc57)
      } body {
        cir.scope {
          cir.scope {
            %2 = cir.alloca !s32i, !cir.ptr<!s32i>, ["x", init] {alignment = 4 : i64} loc(#loc108)
            %3 = cir.call @rand() : () -> !s32i extra(#fn_attr) loc(#loc63)
            %4 = cir.const #cir.int<3> : !s32i loc(#loc64)
            %5 = cir.binop(rem, %3, %4) : !s32i loc(#loc109)
            cir.store %5, %2 : !s32i, !cir.ptr<!s32i> loc(#loc108)
            cir.scope {
              %6 = cir.load %2 : !cir.ptr<!s32i>, !s32i loc(#loc67)
              cir.switch (%6 : !s32i) {
                cir.case(equal, [#cir.int<0> : !s32i]) {
                  %7 = cir.get_global @".str" : !cir.ptr<!cir.array<!s8i x 2>> loc(#loc69)
                  %8 = cir.cast(array_to_ptrdecay, %7 : !cir.ptr<!cir.array<!s8i x 2>>), !cir.ptr<!s8i> loc(#loc69)
                  cir.call @printLine(%8) : (!cir.ptr<!s8i>) -> () loc(#loc70)
                  cir.break loc(#loc71)
                } loc(#loc68)
                cir.case(equal, [#cir.int<1> : !s32i]) {
                  %7 = cir.get_global @".str.1" : !cir.ptr<!cir.array<!s8i x 2>> loc(#loc73)
                  %8 = cir.cast(array_to_ptrdecay, %7 : !cir.ptr<!cir.array<!s8i x 2>>), !cir.ptr<!s8i> loc(#loc73)
                  cir.call @printLine(%8) : (!cir.ptr<!s8i>) -> () loc(#loc74)
                  cir.break loc(#loc75)
                } loc(#loc72)
                cir.case(equal, [#cir.int<2> : !s32i]) {
                  %7 = cir.get_global @".str.2" : !cir.ptr<!cir.array<!s8i x 2>> loc(#loc77)
                  %8 = cir.cast(array_to_ptrdecay, %7 : !cir.ptr<!cir.array<!s8i x 2>>), !cir.ptr<!s8i> loc(#loc77)
                  cir.call @printLine(%8) : (!cir.ptr<!s8i>) -> () loc(#loc78)
                  cir.break loc(#loc79)
                } loc(#loc76)
                cir.case(default, []) {
                  %7 = cir.get_global @".str.3" : !cir.ptr<!cir.array<!s8i x 15>> loc(#loc81)
                  %8 = cir.cast(array_to_ptrdecay, %7 : !cir.ptr<!cir.array<!s8i x 15>>), !cir.ptr<!s8i> loc(#loc81)
                  cir.call @printLine(%8) : (!cir.ptr<!s8i>) -> () loc(#loc82)
                  cir.break loc(#loc83)
                } loc(#loc80)
                cir.yield loc(#loc65)
              } loc(#loc65)
            } loc(#loc110)
          } loc(#loc107)
        } loc(#loc106)
        cir.yield loc(#loc52)
      } step {
        %2 = cir.load %0 : !cir.ptr<!s32i>, !s32i loc(#loc84)
        %3 = cir.unary(inc, %2) nsw : !s32i, !s32i loc(#loc85)
        cir.store %3, %0 : !s32i, !cir.ptr<!s32i> loc(#loc111)
        cir.yield loc(#loc103)
      } loc(#loc103)
    } loc(#loc103)
    cir.return loc(#loc48)
  } loc(#loc101)
} loc(#loc)
#loc = loc("/workspaces/juliet-c/testcases/CWE484_Omitted_Break_Statement_in_Switch/CWE484_Omitted_Break_Statement_in_Switch__basic_17.c":0:0)
#loc1 = loc("/usr/include/stdlib.h":573:1)
#loc2 = loc("/usr/include/stdlib.h":573:24)
#loc3 = loc("../../testcasesupport/std_testcase_io.h":14:1)
#loc4 = loc("../../testcasesupport/std_testcase_io.h":14:33)
#loc5 = loc("CWE484_Omitted_Break_Statement_in_Switch__basic_17.c":31:27)
#loc6 = loc("CWE484_Omitted_Break_Statement_in_Switch__basic_17.c":33:27)
#loc7 = loc("CWE484_Omitted_Break_Statement_in_Switch__basic_17.c":36:27)
#loc8 = loc("CWE484_Omitted_Break_Statement_in_Switch__basic_17.c":39:27)
#loc9 = loc("CWE484_Omitted_Break_Statement_in_Switch__basic_17.c":20:1)
#loc10 = loc("CWE484_Omitted_Break_Statement_in_Switch__basic_17.c":44:1)
#loc11 = loc("CWE484_Omitted_Break_Statement_in_Switch__basic_17.c":22:5)
#loc12 = loc("CWE484_Omitted_Break_Statement_in_Switch__basic_17.c":22:9)
#loc13 = loc("CWE484_Omitted_Break_Statement_in_Switch__basic_17.c":23:5)
#loc14 = loc("CWE484_Omitted_Break_Statement_in_Switch__basic_17.c":43:5)
#loc15 = loc("CWE484_Omitted_Break_Statement_in_Switch__basic_17.c":23:13)
#loc16 = loc("CWE484_Omitted_Break_Statement_in_Switch__basic_17.c":23:9)
#loc17 = loc("CWE484_Omitted_Break_Statement_in_Switch__basic_17.c":23:16)
#loc18 = loc("CWE484_Omitted_Break_Statement_in_Switch__basic_17.c":23:20)
#loc19 = loc("CWE484_Omitted_Break_Statement_in_Switch__basic_17.c":23:18)
#loc20 = loc("CWE484_Omitted_Break_Statement_in_Switch__basic_17.c":24:5)
#loc21 = loc("CWE484_Omitted_Break_Statement_in_Switch__basic_17.c":25:9)
#loc22 = loc("CWE484_Omitted_Break_Statement_in_Switch__basic_17.c":42:9)
#loc23 = loc("CWE484_Omitted_Break_Statement_in_Switch__basic_17.c":26:13)
#loc24 = loc("CWE484_Omitted_Break_Statement_in_Switch__basic_17.c":26:32)
#loc25 = loc("CWE484_Omitted_Break_Statement_in_Switch__basic_17.c":26:22)
#loc26 = loc("CWE484_Omitted_Break_Statement_in_Switch__basic_17.c":26:31)
#loc27 = loc("CWE484_Omitted_Break_Statement_in_Switch__basic_17.c":28:13)
#loc28 = loc("CWE484_Omitted_Break_Statement_in_Switch__basic_17.c":41:13)
#loc29 = loc("CWE484_Omitted_Break_Statement_in_Switch__basic_17.c":28:21)
#loc30 = loc("CWE484_Omitted_Break_Statement_in_Switch__basic_17.c":30:13)
#loc31 = loc("CWE484_Omitted_Break_Statement_in_Switch__basic_17.c":31:17)
#loc32 = loc("CWE484_Omitted_Break_Statement_in_Switch__basic_17.c":32:13)
#loc33 = loc("CWE484_Omitted_Break_Statement_in_Switch__basic_17.c":33:17)
#loc34 = loc("CWE484_Omitted_Break_Statement_in_Switch__basic_17.c":34:17)
#loc35 = loc("CWE484_Omitted_Break_Statement_in_Switch__basic_17.c":35:13)
#loc36 = loc("CWE484_Omitted_Break_Statement_in_Switch__basic_17.c":36:17)
#loc37 = loc("CWE484_Omitted_Break_Statement_in_Switch__basic_17.c":37:17)
#loc38 = loc("CWE484_Omitted_Break_Statement_in_Switch__basic_17.c":38:13)
#loc39 = loc("CWE484_Omitted_Break_Statement_in_Switch__basic_17.c":39:17)
#loc40 = loc("CWE484_Omitted_Break_Statement_in_Switch__basic_17.c":40:17)
#loc41 = loc("CWE484_Omitted_Break_Statement_in_Switch__basic_17.c":23:24)
#loc42 = loc("CWE484_Omitted_Break_Statement_in_Switch__basic_17.c":23:23)
#loc43 = loc("CWE484_Omitted_Break_Statement_in_Switch__basic_17.c":79:1)
#loc44 = loc("CWE484_Omitted_Break_Statement_in_Switch__basic_17.c":82:1)
#loc45 = loc("CWE484_Omitted_Break_Statement_in_Switch__basic_17.c":81:5)
#loc46 = loc("CWE484_Omitted_Break_Statement_in_Switch__basic_17.c":81:11)
#loc47 = loc("CWE484_Omitted_Break_Statement_in_Switch__basic_17.c":51:1)
#loc48 = loc("CWE484_Omitted_Break_Statement_in_Switch__basic_17.c":77:1)
#loc49 = loc("CWE484_Omitted_Break_Statement_in_Switch__basic_17.c":53:5)
#loc50 = loc("CWE484_Omitted_Break_Statement_in_Switch__basic_17.c":53:9)
#loc51 = loc("CWE484_Omitted_Break_Statement_in_Switch__basic_17.c":54:5)
#loc52 = loc("CWE484_Omitted_Break_Statement_in_Switch__basic_17.c":76:5)
#loc53 = loc("CWE484_Omitted_Break_Statement_in_Switch__basic_17.c":54:13)
#loc54 = loc("CWE484_Omitted_Break_Statement_in_Switch__basic_17.c":54:9)
#loc55 = loc("CWE484_Omitted_Break_Statement_in_Switch__basic_17.c":54:16)
#loc56 = loc("CWE484_Omitted_Break_Statement_in_Switch__basic_17.c":54:20)
#loc57 = loc("CWE484_Omitted_Break_Statement_in_Switch__basic_17.c":54:18)
#loc58 = loc("CWE484_Omitted_Break_Statement_in_Switch__basic_17.c":55:5)
#loc59 = loc("CWE484_Omitted_Break_Statement_in_Switch__basic_17.c":56:9)
#loc60 = loc("CWE484_Omitted_Break_Statement_in_Switch__basic_17.c":75:9)
#loc61 = loc("CWE484_Omitted_Break_Statement_in_Switch__basic_17.c":57:13)
#loc62 = loc("CWE484_Omitted_Break_Statement_in_Switch__basic_17.c":57:32)
#loc63 = loc("CWE484_Omitted_Break_Statement_in_Switch__basic_17.c":57:22)
#loc64 = loc("CWE484_Omitted_Break_Statement_in_Switch__basic_17.c":57:31)
#loc65 = loc("CWE484_Omitted_Break_Statement_in_Switch__basic_17.c":60:13)
#loc66 = loc("CWE484_Omitted_Break_Statement_in_Switch__basic_17.c":74:13)
#loc67 = loc("CWE484_Omitted_Break_Statement_in_Switch__basic_17.c":60:21)
#loc68 = loc("CWE484_Omitted_Break_Statement_in_Switch__basic_17.c":62:13)
#loc69 = loc("CWE484_Omitted_Break_Statement_in_Switch__basic_17.c":63:27)
#loc70 = loc("CWE484_Omitted_Break_Statement_in_Switch__basic_17.c":63:17)
#loc71 = loc("CWE484_Omitted_Break_Statement_in_Switch__basic_17.c":64:17)
#loc72 = loc("CWE484_Omitted_Break_Statement_in_Switch__basic_17.c":65:13)
#loc73 = loc("CWE484_Omitted_Break_Statement_in_Switch__basic_17.c":66:27)
#loc74 = loc("CWE484_Omitted_Break_Statement_in_Switch__basic_17.c":66:17)
#loc75 = loc("CWE484_Omitted_Break_Statement_in_Switch__basic_17.c":67:17)
#loc76 = loc("CWE484_Omitted_Break_Statement_in_Switch__basic_17.c":68:13)
#loc77 = loc("CWE484_Omitted_Break_Statement_in_Switch__basic_17.c":69:27)
#loc78 = loc("CWE484_Omitted_Break_Statement_in_Switch__basic_17.c":69:17)
#loc79 = loc("CWE484_Omitted_Break_Statement_in_Switch__basic_17.c":70:17)
#loc80 = loc("CWE484_Omitted_Break_Statement_in_Switch__basic_17.c":71:13)
#loc81 = loc("CWE484_Omitted_Break_Statement_in_Switch__basic_17.c":72:27)
#loc82 = loc("CWE484_Omitted_Break_Statement_in_Switch__basic_17.c":72:17)
#loc83 = loc("CWE484_Omitted_Break_Statement_in_Switch__basic_17.c":73:17)
#loc84 = loc("CWE484_Omitted_Break_Statement_in_Switch__basic_17.c":54:24)
#loc85 = loc("CWE484_Omitted_Break_Statement_in_Switch__basic_17.c":54:23)
#loc86 = loc(fused[#loc1, #loc2])
#loc87 = loc(fused[#loc3, #loc4])
#loc88 = loc(fused[#loc9, #loc10])
#loc89 = loc(fused[#loc11, #loc12])
#loc90 = loc(fused[#loc13, #loc14])
#loc91 = loc(fused[#loc16, #loc15])
#loc92 = loc(fused[#loc17, #loc18])
#loc93 = loc(fused[#loc20, #loc14])
#loc94 = loc(fused[#loc21, #loc22])
#loc95 = loc(fused[#loc23, #loc24])
#loc96 = loc(fused[#loc25, #loc26])
#loc97 = loc(fused[#loc27, #loc28])
#loc98 = loc(fused[#loc42, #loc41])
#loc99 = loc(fused[#loc43, #loc44])
#loc100 = loc(fused[#loc45, #loc46])
#loc101 = loc(fused[#loc47, #loc48])
#loc102 = loc(fused[#loc49, #loc50])
#loc103 = loc(fused[#loc51, #loc52])
#loc104 = loc(fused[#loc54, #loc53])
#loc105 = loc(fused[#loc55, #loc56])
#loc106 = loc(fused[#loc58, #loc52])
#loc107 = loc(fused[#loc59, #loc60])
#loc108 = loc(fused[#loc61, #loc62])
#loc109 = loc(fused[#loc63, #loc64])
#loc110 = loc(fused[#loc65, #loc66])
#loc111 = loc(fused[#loc85, #loc84])
