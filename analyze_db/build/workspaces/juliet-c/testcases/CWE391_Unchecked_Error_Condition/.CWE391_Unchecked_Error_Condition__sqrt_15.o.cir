!s32i = !cir.int<s, 32>
!s8i = !cir.int<s, 8>
#fn_attr = #cir<extra({nothrow = #cir.nothrow})>
#fn_attr1 = #cir<extra({inline = #cir.inline<no>, nothrow = #cir.nothrow, optnone = #cir.optnone, uwtable = #cir.uwtable<async>})>
module @"/workspaces/juliet-c/testcases/CWE391_Unchecked_Error_Condition/CWE391_Unchecked_Error_Condition__sqrt_15.c" attributes {cir.lang = #cir.lang<c>, cir.sob = #cir.signed_overflow_behavior<undefined>, cir.triple = "x86_64-unknown-linux-gnu", cir.type_size_info = #cir.type_size_info<char = 8, int = 32, size_t = 64>, cir.uwtable = #cir.uwtable<async>, dlti.dl_spec = #dlti.dl_spec<!llvm.ptr<270> = dense<32> : vector<4xi64>, i1 = dense<8> : vector<2xi64>, !llvm.ptr = dense<64> : vector<4xi64>, i8 = dense<8> : vector<2xi64>, i16 = dense<16> : vector<2xi64>, i32 = dense<32> : vector<2xi64>, f64 = dense<64> : vector<2xi64>, f16 = dense<16> : vector<2xi64>, !llvm.ptr<271> = dense<32> : vector<4xi64>, f128 = dense<128> : vector<2xi64>, !llvm.ptr<272> = dense<64> : vector<4xi64>, i64 = dense<64> : vector<2xi64>, i128 = dense<128> : vector<2xi64>, f80 = dense<128> : vector<2xi64>, "dlti.mangling_mode" = "e", "dlti.endianness" = "little", "dlti.stack_alignment" = 128 : i64>} {
  cir.func private @sqrt(!cir.double) -> !cir.double extra(#fn_attr) loc(#loc1)
  cir.func private @printDoubleLine(!cir.double) loc(#loc104)
  cir.func private @printLine(!cir.ptr<!s8i>) loc(#loc105)
  cir.global "private" constant cir_private dsolocal @".str" = #cir.const_array<"Benign, fixed string\00" : !cir.array<!s8i x 21>> : !cir.array<!s8i x 21> {alignment = 1 : i64} loc(#loc6)
  cir.func no_proto @CWE391_Unchecked_Error_Condition__sqrt_15_bad() extra(#fn_attr1) {
    cir.scope {
      %0 = cir.const #cir.int<6> : !s32i loc(#loc11)
      cir.switch (%0 : !s32i) {
        cir.case(equal, [#cir.int<6> : !s32i]) {
          cir.scope {
            %1 = cir.alloca !cir.double, !cir.ptr<!cir.double>, ["doubleNumber"] {alignment = 8 : i64} loc(#loc109)
            %2 = cir.get_global @sqrt : !cir.ptr<!cir.func<(!cir.double) -> !cir.double>> loc(#loc17)
            %3 = cir.const #cir.int<1> : !s32i loc(#loc18)
            %4 = cir.unary(minus, %3) nsw : !s32i, !s32i loc(#loc19)
            %5 = cir.cast(int_to_float, %4 : !s32i), !cir.double loc(#loc19)
            %6 = cir.call @sqrt(%5) : (!cir.double) -> !cir.double extra(#fn_attr) loc(#loc17)
            cir.store %6, %1 : !cir.double, !cir.ptr<!cir.double> loc(#loc110)
            %7 = cir.load %1 : !cir.ptr<!cir.double>, !cir.double loc(#loc22)
            cir.call @printDoubleLine(%7) : (!cir.double) -> () loc(#loc23)
          } loc(#loc108)
          cir.break loc(#loc24)
        } loc(#loc12)
        cir.case(default, []) {
          %1 = cir.get_global @".str" : !cir.ptr<!cir.array<!s8i x 21>> loc(#loc6)
          %2 = cir.cast(array_to_ptrdecay, %1 : !cir.ptr<!cir.array<!s8i x 21>>), !cir.ptr<!s8i> loc(#loc6)
          cir.call @printLine(%2) : (!cir.ptr<!s8i>) -> () loc(#loc26)
          cir.break loc(#loc27)
        } loc(#loc25)
        cir.yield loc(#loc9)
      } loc(#loc9)
    } loc(#loc107)
    cir.return loc(#loc8)
  } loc(#loc106)
  cir.func no_proto @CWE391_Unchecked_Error_Condition__sqrt_15_good() extra(#fn_attr1) {
    %0 = cir.get_global @good1 : !cir.ptr<!cir.func<()>> loc(#loc112)
    cir.call %0() : (!cir.ptr<!cir.func<()>>) -> () loc(#loc30)
    %1 = cir.get_global @good2 : !cir.ptr<!cir.func<()>> loc(#loc113)
    cir.call %1() : (!cir.ptr<!cir.func<()>>) -> () loc(#loc32)
    cir.return loc(#loc29)
  } loc(#loc111)
  cir.func private @__errno_location() -> !cir.ptr<!s32i> extra(#fn_attr) loc(#loc114)
  cir.global "private" constant cir_private dsolocal @".str.1" = #cir.const_array<"sqrt() failed\00" : !cir.array<!s8i x 14>> : !cir.array<!s8i x 14> {alignment = 1 : i64} loc(#loc36)
  cir.func private @exit(!s32i) extra(#fn_attr) loc(#loc115)
  cir.func no_proto internal private @good1() extra(#fn_attr1) {
    cir.scope {
      %0 = cir.const #cir.int<5> : !s32i loc(#loc43)
      cir.switch (%0 : !s32i) {
        cir.case(equal, [#cir.int<6> : !s32i]) {
          %1 = cir.get_global @".str" : !cir.ptr<!cir.array<!s8i x 21>> loc(#loc45)
          %2 = cir.cast(array_to_ptrdecay, %1 : !cir.ptr<!cir.array<!s8i x 21>>), !cir.ptr<!s8i> loc(#loc45)
          cir.call @printLine(%2) : (!cir.ptr<!s8i>) -> () loc(#loc46)
          cir.break loc(#loc47)
        } loc(#loc44)
        cir.case(default, []) {
          cir.scope {
            %1 = cir.alloca !cir.double, !cir.ptr<!cir.double>, ["doubleNumber"] {alignment = 8 : i64} loc(#loc119)
            %2 = cir.const #cir.int<0> : !s32i loc(#loc53)
            %3 = cir.call @__errno_location() : () -> !cir.ptr<!s32i> side_effect(const) extra(#fn_attr) loc(#loc54)
            cir.store %2, %3 : !s32i, !cir.ptr<!s32i> loc(#loc120)
            %4 = cir.get_global @sqrt : !cir.ptr<!cir.func<(!cir.double) -> !cir.double>> loc(#loc55)
            %5 = cir.const #cir.int<1> : !s32i loc(#loc56)
            %6 = cir.unary(minus, %5) nsw : !s32i, !s32i loc(#loc57)
            %7 = cir.cast(int_to_float, %6 : !s32i), !cir.double loc(#loc57)
            %8 = cir.call @sqrt(%7) : (!cir.double) -> !cir.double extra(#fn_attr) loc(#loc55)
            cir.store %8, %1 : !cir.double, !cir.ptr<!cir.double> loc(#loc121)
            cir.scope {
              %10 = cir.call @__errno_location() : () -> !cir.ptr<!s32i> side_effect(const) extra(#fn_attr) loc(#loc62)
              %11 = cir.load %10 : !cir.ptr<!s32i>, !s32i loc(#loc62)
              %12 = cir.const #cir.int<33> : !s32i loc(#loc63)
              %13 = cir.cmp(eq, %11, %12) : !s32i, !cir.bool loc(#loc123)
              cir.if %13 {
                %14 = cir.get_global @".str.1" : !cir.ptr<!cir.array<!s8i x 14>> loc(#loc36)
                %15 = cir.cast(array_to_ptrdecay, %14 : !cir.ptr<!cir.array<!s8i x 14>>), !cir.ptr<!s8i> loc(#loc36)
                cir.call @printLine(%15) : (!cir.ptr<!s8i>) -> () loc(#loc65)
                %16 = cir.get_global @exit : !cir.ptr<!cir.func<(!s32i)>> loc(#loc66)
                %17 = cir.const #cir.int<1> : !s32i loc(#loc67)
                cir.call @exit(%17) : (!s32i) -> () extra(#fn_attr) loc(#loc66)
              } loc(#loc124)
            } loc(#loc122)
            %9 = cir.load %1 : !cir.ptr<!cir.double>, !cir.double loc(#loc68)
            cir.call @printDoubleLine(%9) : (!cir.double) -> () loc(#loc69)
          } loc(#loc118)
          cir.break loc(#loc70)
        } loc(#loc48)
        cir.yield loc(#loc41)
      } loc(#loc41)
    } loc(#loc117)
    cir.return loc(#loc40)
  } loc(#loc116)
  cir.func no_proto internal private @good2() extra(#fn_attr1) {
    cir.scope {
      %0 = cir.const #cir.int<6> : !s32i loc(#loc75)
      cir.switch (%0 : !s32i) {
        cir.case(equal, [#cir.int<6> : !s32i]) {
          cir.scope {
            %1 = cir.alloca !cir.double, !cir.ptr<!cir.double>, ["doubleNumber"] {alignment = 8 : i64} loc(#loc128)
            %2 = cir.const #cir.int<0> : !s32i loc(#loc81)
            %3 = cir.call @__errno_location() : () -> !cir.ptr<!s32i> side_effect(const) extra(#fn_attr) loc(#loc82)
            cir.store %2, %3 : !s32i, !cir.ptr<!s32i> loc(#loc129)
            %4 = cir.get_global @sqrt : !cir.ptr<!cir.func<(!cir.double) -> !cir.double>> loc(#loc83)
            %5 = cir.const #cir.int<1> : !s32i loc(#loc84)
            %6 = cir.unary(minus, %5) nsw : !s32i, !s32i loc(#loc85)
            %7 = cir.cast(int_to_float, %6 : !s32i), !cir.double loc(#loc85)
            %8 = cir.call @sqrt(%7) : (!cir.double) -> !cir.double extra(#fn_attr) loc(#loc83)
            cir.store %8, %1 : !cir.double, !cir.ptr<!cir.double> loc(#loc130)
            cir.scope {
              %10 = cir.call @__errno_location() : () -> !cir.ptr<!s32i> side_effect(const) extra(#fn_attr) loc(#loc90)
              %11 = cir.load %10 : !cir.ptr<!s32i>, !s32i loc(#loc90)
              %12 = cir.const #cir.int<33> : !s32i loc(#loc91)
              %13 = cir.cmp(eq, %11, %12) : !s32i, !cir.bool loc(#loc132)
              cir.if %13 {
                %14 = cir.get_global @".str.1" : !cir.ptr<!cir.array<!s8i x 14>> loc(#loc93)
                %15 = cir.cast(array_to_ptrdecay, %14 : !cir.ptr<!cir.array<!s8i x 14>>), !cir.ptr<!s8i> loc(#loc93)
                cir.call @printLine(%15) : (!cir.ptr<!s8i>) -> () loc(#loc94)
                %16 = cir.get_global @exit : !cir.ptr<!cir.func<(!s32i)>> loc(#loc95)
                %17 = cir.const #cir.int<1> : !s32i loc(#loc96)
                cir.call @exit(%17) : (!s32i) -> () extra(#fn_attr) loc(#loc95)
              } loc(#loc133)
            } loc(#loc131)
            %9 = cir.load %1 : !cir.ptr<!cir.double>, !cir.double loc(#loc97)
            cir.call @printDoubleLine(%9) : (!cir.double) -> () loc(#loc98)
          } loc(#loc127)
          cir.break loc(#loc99)
        } loc(#loc76)
        cir.case(default, []) {
          %1 = cir.get_global @".str" : !cir.ptr<!cir.array<!s8i x 21>> loc(#loc101)
          %2 = cir.cast(array_to_ptrdecay, %1 : !cir.ptr<!cir.array<!s8i x 21>>), !cir.ptr<!s8i> loc(#loc101)
          cir.call @printLine(%2) : (!cir.ptr<!s8i>) -> () loc(#loc102)
          cir.break loc(#loc103)
        } loc(#loc100)
        cir.yield loc(#loc73)
      } loc(#loc73)
    } loc(#loc126)
    cir.return loc(#loc72)
  } loc(#loc125)
} loc(#loc)
#loc = loc("/workspaces/juliet-c/testcases/CWE391_Unchecked_Error_Condition/CWE391_Unchecked_Error_Condition__sqrt_15.c":0:0)
#loc1 = loc("/usr/include/x86_64-linux-gnu/bits/mathcalls.h":143:1)
#loc2 = loc("../../testcasesupport/std_testcase_io.h":38:1)
#loc3 = loc("../../testcasesupport/std_testcase_io.h":38:41)
#loc4 = loc("../../testcasesupport/std_testcase_io.h":14:1)
#loc5 = loc("../../testcasesupport/std_testcase_io.h":14:33)
#loc6 = loc("CWE391_Unchecked_Error_Condition__sqrt_15.c":38:19)
#loc7 = loc("CWE391_Unchecked_Error_Condition__sqrt_15.c":24:1)
#loc8 = loc("CWE391_Unchecked_Error_Condition__sqrt_15.c":41:1)
#loc9 = loc("CWE391_Unchecked_Error_Condition__sqrt_15.c":26:5)
#loc10 = loc("CWE391_Unchecked_Error_Condition__sqrt_15.c":40:5)
#loc11 = loc("CWE391_Unchecked_Error_Condition__sqrt_15.c":26:12)
#loc12 = loc("CWE391_Unchecked_Error_Condition__sqrt_15.c":28:5)
#loc13 = loc("CWE391_Unchecked_Error_Condition__sqrt_15.c":29:5)
#loc14 = loc("CWE391_Unchecked_Error_Condition__sqrt_15.c":34:5)
#loc15 = loc("CWE391_Unchecked_Error_Condition__sqrt_15.c":30:9)
#loc16 = loc("CWE391_Unchecked_Error_Condition__sqrt_15.c":30:16)
#loc17 = loc("CWE391_Unchecked_Error_Condition__sqrt_15.c":31:32)
#loc18 = loc("CWE391_Unchecked_Error_Condition__sqrt_15.c":31:46)
#loc19 = loc("CWE391_Unchecked_Error_Condition__sqrt_15.c":31:45)
#loc20 = loc("CWE391_Unchecked_Error_Condition__sqrt_15.c":31:9)
#loc21 = loc("CWE391_Unchecked_Error_Condition__sqrt_15.c":31:47)
#loc22 = loc("CWE391_Unchecked_Error_Condition__sqrt_15.c":33:25)
#loc23 = loc("CWE391_Unchecked_Error_Condition__sqrt_15.c":33:9)
#loc24 = loc("CWE391_Unchecked_Error_Condition__sqrt_15.c":35:5)
#loc25 = loc("CWE391_Unchecked_Error_Condition__sqrt_15.c":36:5)
#loc26 = loc("CWE391_Unchecked_Error_Condition__sqrt_15.c":38:9)
#loc27 = loc("CWE391_Unchecked_Error_Condition__sqrt_15.c":39:9)
#loc28 = loc("CWE391_Unchecked_Error_Condition__sqrt_15.c":99:1)
#loc29 = loc("CWE391_Unchecked_Error_Condition__sqrt_15.c":103:1)
#loc30 = loc("CWE391_Unchecked_Error_Condition__sqrt_15.c":101:5)
#loc31 = loc("CWE391_Unchecked_Error_Condition__sqrt_15.c":101:11)
#loc32 = loc("CWE391_Unchecked_Error_Condition__sqrt_15.c":102:5)
#loc33 = loc("CWE391_Unchecked_Error_Condition__sqrt_15.c":102:11)
#loc34 = loc("/usr/include/errno.h":37:1)
#loc35 = loc("/usr/include/errno.h":37:45)
#loc36 = loc("CWE391_Unchecked_Error_Condition__sqrt_15.c":64:23)
#loc37 = loc("/usr/include/stdlib.h":756:1)
#loc38 = loc("/usr/include/stdlib.h":756:70)
#loc39 = loc("CWE391_Unchecked_Error_Condition__sqrt_15.c":48:1)
#loc40 = loc("CWE391_Unchecked_Error_Condition__sqrt_15.c":71:1)
#loc41 = loc("CWE391_Unchecked_Error_Condition__sqrt_15.c":50:5)
#loc42 = loc("CWE391_Unchecked_Error_Condition__sqrt_15.c":70:5)
#loc43 = loc("CWE391_Unchecked_Error_Condition__sqrt_15.c":50:12)
#loc44 = loc("CWE391_Unchecked_Error_Condition__sqrt_15.c":52:5)
#loc45 = loc("CWE391_Unchecked_Error_Condition__sqrt_15.c":54:19)
#loc46 = loc("CWE391_Unchecked_Error_Condition__sqrt_15.c":54:9)
#loc47 = loc("CWE391_Unchecked_Error_Condition__sqrt_15.c":55:9)
#loc48 = loc("CWE391_Unchecked_Error_Condition__sqrt_15.c":56:5)
#loc49 = loc("CWE391_Unchecked_Error_Condition__sqrt_15.c":57:5)
#loc50 = loc("CWE391_Unchecked_Error_Condition__sqrt_15.c":68:5)
#loc51 = loc("CWE391_Unchecked_Error_Condition__sqrt_15.c":58:9)
#loc52 = loc("CWE391_Unchecked_Error_Condition__sqrt_15.c":58:16)
#loc53 = loc("CWE391_Unchecked_Error_Condition__sqrt_15.c":59:17)
#loc54 = loc("CWE391_Unchecked_Error_Condition__sqrt_15.c":59:9)
#loc55 = loc("CWE391_Unchecked_Error_Condition__sqrt_15.c":60:32)
#loc56 = loc("CWE391_Unchecked_Error_Condition__sqrt_15.c":60:46)
#loc57 = loc("CWE391_Unchecked_Error_Condition__sqrt_15.c":60:45)
#loc58 = loc("CWE391_Unchecked_Error_Condition__sqrt_15.c":60:9)
#loc59 = loc("CWE391_Unchecked_Error_Condition__sqrt_15.c":60:47)
#loc60 = loc("CWE391_Unchecked_Error_Condition__sqrt_15.c":62:9)
#loc61 = loc("CWE391_Unchecked_Error_Condition__sqrt_15.c":66:9)
#loc62 = loc("CWE391_Unchecked_Error_Condition__sqrt_15.c":62:13)
#loc63 = loc("CWE391_Unchecked_Error_Condition__sqrt_15.c":62:22)
#loc64 = loc("CWE391_Unchecked_Error_Condition__sqrt_15.c":63:9)
#loc65 = loc("CWE391_Unchecked_Error_Condition__sqrt_15.c":64:13)
#loc66 = loc("CWE391_Unchecked_Error_Condition__sqrt_15.c":65:13)
#loc67 = loc("CWE391_Unchecked_Error_Condition__sqrt_15.c":65:18)
#loc68 = loc("CWE391_Unchecked_Error_Condition__sqrt_15.c":67:25)
#loc69 = loc("CWE391_Unchecked_Error_Condition__sqrt_15.c":67:9)
#loc70 = loc("CWE391_Unchecked_Error_Condition__sqrt_15.c":69:5)
#loc71 = loc("CWE391_Unchecked_Error_Condition__sqrt_15.c":74:1)
#loc72 = loc("CWE391_Unchecked_Error_Condition__sqrt_15.c":97:1)
#loc73 = loc("CWE391_Unchecked_Error_Condition__sqrt_15.c":76:5)
#loc74 = loc("CWE391_Unchecked_Error_Condition__sqrt_15.c":96:5)
#loc75 = loc("CWE391_Unchecked_Error_Condition__sqrt_15.c":76:12)
#loc76 = loc("CWE391_Unchecked_Error_Condition__sqrt_15.c":78:5)
#loc77 = loc("CWE391_Unchecked_Error_Condition__sqrt_15.c":79:5)
#loc78 = loc("CWE391_Unchecked_Error_Condition__sqrt_15.c":90:5)
#loc79 = loc("CWE391_Unchecked_Error_Condition__sqrt_15.c":80:9)
#loc80 = loc("CWE391_Unchecked_Error_Condition__sqrt_15.c":80:16)
#loc81 = loc("CWE391_Unchecked_Error_Condition__sqrt_15.c":81:17)
#loc82 = loc("CWE391_Unchecked_Error_Condition__sqrt_15.c":81:9)
#loc83 = loc("CWE391_Unchecked_Error_Condition__sqrt_15.c":82:32)
#loc84 = loc("CWE391_Unchecked_Error_Condition__sqrt_15.c":82:46)
#loc85 = loc("CWE391_Unchecked_Error_Condition__sqrt_15.c":82:45)
#loc86 = loc("CWE391_Unchecked_Error_Condition__sqrt_15.c":82:9)
#loc87 = loc("CWE391_Unchecked_Error_Condition__sqrt_15.c":82:47)
#loc88 = loc("CWE391_Unchecked_Error_Condition__sqrt_15.c":84:9)
#loc89 = loc("CWE391_Unchecked_Error_Condition__sqrt_15.c":88:9)
#loc90 = loc("CWE391_Unchecked_Error_Condition__sqrt_15.c":84:13)
#loc91 = loc("CWE391_Unchecked_Error_Condition__sqrt_15.c":84:22)
#loc92 = loc("CWE391_Unchecked_Error_Condition__sqrt_15.c":85:9)
#loc93 = loc("CWE391_Unchecked_Error_Condition__sqrt_15.c":86:23)
#loc94 = loc("CWE391_Unchecked_Error_Condition__sqrt_15.c":86:13)
#loc95 = loc("CWE391_Unchecked_Error_Condition__sqrt_15.c":87:13)
#loc96 = loc("CWE391_Unchecked_Error_Condition__sqrt_15.c":87:18)
#loc97 = loc("CWE391_Unchecked_Error_Condition__sqrt_15.c":89:25)
#loc98 = loc("CWE391_Unchecked_Error_Condition__sqrt_15.c":89:9)
#loc99 = loc("CWE391_Unchecked_Error_Condition__sqrt_15.c":91:5)
#loc100 = loc("CWE391_Unchecked_Error_Condition__sqrt_15.c":92:5)
#loc101 = loc("CWE391_Unchecked_Error_Condition__sqrt_15.c":94:19)
#loc102 = loc("CWE391_Unchecked_Error_Condition__sqrt_15.c":94:9)
#loc103 = loc("CWE391_Unchecked_Error_Condition__sqrt_15.c":95:9)
#loc104 = loc(fused[#loc2, #loc3])
#loc105 = loc(fused[#loc4, #loc5])
#loc106 = loc(fused[#loc7, #loc8])
#loc107 = loc(fused[#loc9, #loc10])
#loc108 = loc(fused[#loc13, #loc14])
#loc109 = loc(fused[#loc15, #loc16])
#loc110 = loc(fused[#loc20, #loc21])
#loc111 = loc(fused[#loc28, #loc29])
#loc112 = loc(fused[#loc30, #loc31])
#loc113 = loc(fused[#loc32, #loc33])
#loc114 = loc(fused[#loc34, #loc35])
#loc115 = loc(fused[#loc37, #loc38])
#loc116 = loc(fused[#loc39, #loc40])
#loc117 = loc(fused[#loc41, #loc42])
#loc118 = loc(fused[#loc49, #loc50])
#loc119 = loc(fused[#loc51, #loc52])
#loc120 = loc(fused[#loc54, #loc53])
#loc121 = loc(fused[#loc58, #loc59])
#loc122 = loc(fused[#loc60, #loc61])
#loc123 = loc(fused[#loc62, #loc63])
#loc124 = loc(fused[#loc64, #loc61])
#loc125 = loc(fused[#loc71, #loc72])
#loc126 = loc(fused[#loc73, #loc74])
#loc127 = loc(fused[#loc77, #loc78])
#loc128 = loc(fused[#loc79, #loc80])
#loc129 = loc(fused[#loc82, #loc81])
#loc130 = loc(fused[#loc86, #loc87])
#loc131 = loc(fused[#loc88, #loc89])
#loc132 = loc(fused[#loc90, #loc91])
#loc133 = loc(fused[#loc92, #loc89])
