!s32i = !cir.int<s, 32>
!s64i = !cir.int<s, 64>
!u64i = !cir.int<u, 64>
#fn_attr = #cir<extra({nothrow = #cir.nothrow})>
#fn_attr1 = #cir<extra({inline = #cir.inline<no>, optnone = #cir.optnone, uwtable = #cir.uwtable<async>})>
#fn_attr2 = #cir<extra({inline = #cir.inline<no>, nothrow = #cir.nothrow, optnone = #cir.optnone, uwtable = #cir.uwtable<async>})>
#loc5 = loc("CWE191_Integer_Underflow__int64_t_rand_multiply_83_bad.cpp":24:57)
#loc6 = loc("CWE191_Integer_Underflow__int64_t_rand_multiply_83_bad.cpp":24:112)
#loc7 = loc("CWE191_Integer_Underflow__int64_t_rand_multiply_83_bad.cpp":24:120)
#loc18 = loc("CWE191_Integer_Underflow__int64_t_rand_multiply_83_bad.cpp":31:57)
!ty_CWE191_Integer_Underflow__int64_t_rand_multiply_833A3ACWE191_Integer_Underflow__int64_t_rand_multiply_83_bad = !cir.record<class "CWE191_Integer_Underflow__int64_t_rand_multiply_83::CWE191_Integer_Underflow__int64_t_rand_multiply_83_bad" {!s64i} #cir.record.decl.ast>
#loc32 = loc(fused[#loc6, #loc7])
module @"/workspaces/juliet-c/testcases/CWE191_Integer_Underflow/s01/CWE191_Integer_Underflow__int64_t_rand_multiply_83_bad.cpp" attributes {cir.lang = #cir.lang<cxx>, cir.sob = #cir.signed_overflow_behavior<undefined>, cir.triple = "x86_64-unknown-linux-gnu", cir.type_size_info = #cir.type_size_info<char = 8, int = 32, size_t = 64>, cir.uwtable = #cir.uwtable<async>, dlti.dl_spec = #dlti.dl_spec<i1 = dense<8> : vector<2xi64>, !llvm.ptr = dense<64> : vector<4xi64>, f80 = dense<128> : vector<2xi64>, !llvm.ptr<270> = dense<32> : vector<4xi64>, i32 = dense<32> : vector<2xi64>, i16 = dense<16> : vector<2xi64>, i8 = dense<8> : vector<2xi64>, !llvm.ptr<272> = dense<64> : vector<4xi64>, !llvm.ptr<271> = dense<32> : vector<4xi64>, f16 = dense<16> : vector<2xi64>, f64 = dense<64> : vector<2xi64>, i128 = dense<128> : vector<2xi64>, f128 = dense<128> : vector<2xi64>, i64 = dense<64> : vector<2xi64>, "dlti.stack_alignment" = 128 : i64, "dlti.mangling_mode" = "e", "dlti.endianness" = "little">} {
  cir.func private @rand() -> !s32i extra(#fn_attr) loc(#loc30)
  cir.func @_ZN50CWE191_Integer_Underflow__int64_t_rand_multiply_8354CWE191_Integer_Underflow__int64_t_rand_multiply_83_badC2El(%arg0: !cir.ptr<!ty_CWE191_Integer_Underflow__int64_t_rand_multiply_833A3ACWE191_Integer_Underflow__int64_t_rand_multiply_83_bad> loc("CWE191_Integer_Underflow__int64_t_rand_multiply_83_bad.cpp":24:57), %arg1: !s64i loc(fused[#loc6, #loc7])) extra(#fn_attr1) {
    %0 = cir.alloca !cir.ptr<!ty_CWE191_Integer_Underflow__int64_t_rand_multiply_833A3ACWE191_Integer_Underflow__int64_t_rand_multiply_83_bad>, !cir.ptr<!cir.ptr<!ty_CWE191_Integer_Underflow__int64_t_rand_multiply_833A3ACWE191_Integer_Underflow__int64_t_rand_multiply_83_bad>>, ["this", init] {alignment = 8 : i64} loc(#loc5)
    %1 = cir.alloca !s64i, !cir.ptr<!s64i>, ["dataCopy", init] {alignment = 8 : i64} loc(#loc32)
    cir.store %arg0, %0 : !cir.ptr<!ty_CWE191_Integer_Underflow__int64_t_rand_multiply_833A3ACWE191_Integer_Underflow__int64_t_rand_multiply_83_bad>, !cir.ptr<!cir.ptr<!ty_CWE191_Integer_Underflow__int64_t_rand_multiply_833A3ACWE191_Integer_Underflow__int64_t_rand_multiply_83_bad>> loc(#loc8)
    cir.store %arg1, %1 : !s64i, !cir.ptr<!s64i> loc(#loc8)
    %2 = cir.load %0 : !cir.ptr<!cir.ptr<!ty_CWE191_Integer_Underflow__int64_t_rand_multiply_833A3ACWE191_Integer_Underflow__int64_t_rand_multiply_83_bad>>, !cir.ptr<!ty_CWE191_Integer_Underflow__int64_t_rand_multiply_833A3ACWE191_Integer_Underflow__int64_t_rand_multiply_83_bad> loc(#loc5)
    %3 = cir.load %1 : !cir.ptr<!s64i>, !s64i loc(#loc9)
    %4 = cir.get_member %2[0] {name = "data"} : !cir.ptr<!ty_CWE191_Integer_Underflow__int64_t_rand_multiply_833A3ACWE191_Integer_Underflow__int64_t_rand_multiply_83_bad> -> !cir.ptr<!s64i> loc(#loc10)
    cir.store %3, %4 : !s64i, !cir.ptr<!s64i> loc(#loc33)
    %5 = cir.call @rand() : () -> !s32i extra(#fn_attr) loc(#loc12)
    %6 = cir.const #cir.int<1> : !s32i loc(#loc12)
    %7 = cir.binop(and, %5, %6) : !s32i loc(#loc12)
    %8 = cir.cast(int_to_bool, %7 : !s32i), !cir.bool loc(#loc12)
    %9 = cir.ternary(%8, true {
      %12 = cir.call @rand() : () -> !s32i extra(#fn_attr) loc(#loc12)
      %13 = cir.cast(integral, %12 : !s32i), !u64i loc(#loc12)
      %14 = cir.const #cir.int<60> : !s32i loc(#loc12)
      %15 = cir.shift(left, %13 : !u64i, %14 : !s32i) -> !u64i loc(#loc12)
      %16 = cir.call @rand() : () -> !s32i extra(#fn_attr) loc(#loc12)
      %17 = cir.cast(integral, %16 : !s32i), !u64i loc(#loc12)
      %18 = cir.const #cir.int<45> : !s32i loc(#loc12)
      %19 = cir.shift(left, %17 : !u64i, %18 : !s32i) -> !u64i loc(#loc12)
      %20 = cir.binop(xor, %15, %19) : !u64i loc(#loc12)
      %21 = cir.call @rand() : () -> !s32i extra(#fn_attr) loc(#loc12)
      %22 = cir.cast(integral, %21 : !s32i), !u64i loc(#loc12)
      %23 = cir.const #cir.int<30> : !s32i loc(#loc12)
      %24 = cir.shift(left, %22 : !u64i, %23 : !s32i) -> !u64i loc(#loc12)
      %25 = cir.binop(xor, %20, %24) : !u64i loc(#loc12)
      %26 = cir.call @rand() : () -> !s32i extra(#fn_attr) loc(#loc12)
      %27 = cir.cast(integral, %26 : !s32i), !u64i loc(#loc12)
      %28 = cir.const #cir.int<15> : !s32i loc(#loc12)
      %29 = cir.shift(left, %27 : !u64i, %28 : !s32i) -> !u64i loc(#loc12)
      %30 = cir.binop(xor, %25, %29) : !u64i loc(#loc12)
      %31 = cir.call @rand() : () -> !s32i extra(#fn_attr) loc(#loc12)
      %32 = cir.cast(integral, %31 : !s32i), !u64i loc(#loc12)
      %33 = cir.binop(xor, %30, %32) : !u64i loc(#loc12)
      cir.yield %33 : !u64i loc(#loc12)
    }, false {
      %12 = cir.call @rand() : () -> !s32i extra(#fn_attr) loc(#loc12)
      %13 = cir.cast(integral, %12 : !s32i), !u64i loc(#loc12)
      %14 = cir.const #cir.int<60> : !s32i loc(#loc12)
      %15 = cir.shift(left, %13 : !u64i, %14 : !s32i) -> !u64i loc(#loc12)
      %16 = cir.call @rand() : () -> !s32i extra(#fn_attr) loc(#loc12)
      %17 = cir.cast(integral, %16 : !s32i), !u64i loc(#loc12)
      %18 = cir.const #cir.int<45> : !s32i loc(#loc12)
      %19 = cir.shift(left, %17 : !u64i, %18 : !s32i) -> !u64i loc(#loc12)
      %20 = cir.binop(xor, %15, %19) : !u64i loc(#loc12)
      %21 = cir.call @rand() : () -> !s32i extra(#fn_attr) loc(#loc12)
      %22 = cir.cast(integral, %21 : !s32i), !u64i loc(#loc12)
      %23 = cir.const #cir.int<30> : !s32i loc(#loc12)
      %24 = cir.shift(left, %22 : !u64i, %23 : !s32i) -> !u64i loc(#loc12)
      %25 = cir.binop(xor, %20, %24) : !u64i loc(#loc12)
      %26 = cir.call @rand() : () -> !s32i extra(#fn_attr) loc(#loc12)
      %27 = cir.cast(integral, %26 : !s32i), !u64i loc(#loc12)
      %28 = cir.const #cir.int<15> : !s32i loc(#loc12)
      %29 = cir.shift(left, %27 : !u64i, %28 : !s32i) -> !u64i loc(#loc12)
      %30 = cir.binop(xor, %25, %29) : !u64i loc(#loc12)
      %31 = cir.call @rand() : () -> !s32i extra(#fn_attr) loc(#loc12)
      %32 = cir.cast(integral, %31 : !s32i), !u64i loc(#loc12)
      %33 = cir.binop(xor, %30, %32) : !u64i loc(#loc12)
      %34 = cir.unary(minus, %33) : !u64i, !u64i loc(#loc12)
      %35 = cir.const #cir.int<1> : !s32i loc(#loc12)
      %36 = cir.cast(integral, %35 : !s32i), !u64i loc(#loc12)
      %37 = cir.binop(sub, %34, %36) : !u64i loc(#loc12)
      cir.yield %37 : !u64i loc(#loc12)
    }) : (!cir.bool) -> !u64i loc(#loc12)
    %10 = cir.cast(integral, %9 : !u64i), !s64i loc(#loc12)
    %11 = cir.get_member %2[0] {name = "data"} : !cir.ptr<!ty_CWE191_Integer_Underflow__int64_t_rand_multiply_833A3ACWE191_Integer_Underflow__int64_t_rand_multiply_83_bad> -> !cir.ptr<!s64i> loc(#loc10)
    cir.store %10, %11 : !s64i, !cir.ptr<!s64i> loc(#loc34)
    cir.return loc(#loc4)
  } loc(#loc31)
  cir.func private @_ZN50CWE191_Integer_Underflow__int64_t_rand_multiply_8354CWE191_Integer_Underflow__int64_t_rand_multiply_83_badC1El(!cir.ptr<!ty_CWE191_Integer_Underflow__int64_t_rand_multiply_833A3ACWE191_Integer_Underflow__int64_t_rand_multiply_83_bad>, !s64i) alias(@_ZN50CWE191_Integer_Underflow__int64_t_rand_multiply_8354CWE191_Integer_Underflow__int64_t_rand_multiply_83_badC2El) loc(#loc31)
  cir.func private @printLongLongLine(!s64i) loc(#loc35)
  cir.func @_ZN50CWE191_Integer_Underflow__int64_t_rand_multiply_8354CWE191_Integer_Underflow__int64_t_rand_multiply_83_badD2Ev(%arg0: !cir.ptr<!ty_CWE191_Integer_Underflow__int64_t_rand_multiply_833A3ACWE191_Integer_Underflow__int64_t_rand_multiply_83_bad> loc("CWE191_Integer_Underflow__int64_t_rand_multiply_83_bad.cpp":31:57)) extra(#fn_attr2) {
    %0 = cir.alloca !cir.ptr<!ty_CWE191_Integer_Underflow__int64_t_rand_multiply_833A3ACWE191_Integer_Underflow__int64_t_rand_multiply_83_bad>, !cir.ptr<!cir.ptr<!ty_CWE191_Integer_Underflow__int64_t_rand_multiply_833A3ACWE191_Integer_Underflow__int64_t_rand_multiply_83_bad>>, ["this", init] {alignment = 8 : i64} loc(#loc18)
    cir.store %arg0, %0 : !cir.ptr<!ty_CWE191_Integer_Underflow__int64_t_rand_multiply_833A3ACWE191_Integer_Underflow__int64_t_rand_multiply_83_bad>, !cir.ptr<!cir.ptr<!ty_CWE191_Integer_Underflow__int64_t_rand_multiply_833A3ACWE191_Integer_Underflow__int64_t_rand_multiply_83_bad>> loc(#loc19)
    %1 = cir.load %0 : !cir.ptr<!cir.ptr<!ty_CWE191_Integer_Underflow__int64_t_rand_multiply_833A3ACWE191_Integer_Underflow__int64_t_rand_multiply_83_bad>>, !cir.ptr<!ty_CWE191_Integer_Underflow__int64_t_rand_multiply_833A3ACWE191_Integer_Underflow__int64_t_rand_multiply_83_bad> loc(#loc18)
    cir.scope {
      %2 = cir.get_member %1[0] {name = "data"} : !cir.ptr<!ty_CWE191_Integer_Underflow__int64_t_rand_multiply_833A3ACWE191_Integer_Underflow__int64_t_rand_multiply_83_bad> -> !cir.ptr<!s64i> loc(#loc10)
      %3 = cir.load %2 : !cir.ptr<!s64i>, !s64i loc(#loc22)
      %4 = cir.const #cir.int<0> : !s32i loc(#loc23)
      %5 = cir.cast(integral, %4 : !s32i), !s64i loc(#loc23)
      %6 = cir.cmp(lt, %3, %5) : !s64i, !cir.bool loc(#loc38)
      cir.if %6 {
        %7 = cir.alloca !s64i, !cir.ptr<!s64i>, ["result", init] {alignment = 8 : i64} loc(#loc40)
        %8 = cir.get_member %1[0] {name = "data"} : !cir.ptr<!ty_CWE191_Integer_Underflow__int64_t_rand_multiply_833A3ACWE191_Integer_Underflow__int64_t_rand_multiply_83_bad> -> !cir.ptr<!s64i> loc(#loc10)
        %9 = cir.load %8 : !cir.ptr<!s64i>, !s64i loc(#loc27)
        %10 = cir.const #cir.int<2> : !s32i loc(#loc26)
        %11 = cir.cast(integral, %10 : !s32i), !s64i loc(#loc26)
        %12 = cir.binop(mul, %9, %11) nsw : !s64i loc(#loc27)
        cir.store %12, %7 : !s64i, !cir.ptr<!s64i> loc(#loc40)
        %13 = cir.load %7 : !cir.ptr<!s64i>, !s64i loc(#loc28)
        cir.call @printLongLongLine(%13) : (!s64i) -> () loc(#loc29)
      } loc(#loc39)
    } loc(#loc37)
    cir.return loc(#loc17)
  } loc(#loc36)
  cir.func private @_ZN50CWE191_Integer_Underflow__int64_t_rand_multiply_8354CWE191_Integer_Underflow__int64_t_rand_multiply_83_badD1Ev(!cir.ptr<!ty_CWE191_Integer_Underflow__int64_t_rand_multiply_833A3ACWE191_Integer_Underflow__int64_t_rand_multiply_83_bad>) alias(@_ZN50CWE191_Integer_Underflow__int64_t_rand_multiply_8354CWE191_Integer_Underflow__int64_t_rand_multiply_83_badD2Ev) loc(#loc36)
} loc(#loc)
#loc = loc("/workspaces/juliet-c/testcases/CWE191_Integer_Underflow/s01/CWE191_Integer_Underflow__int64_t_rand_multiply_83_bad.cpp":0:0)
#loc1 = loc("/usr/include/stdlib.h":573:1)
#loc2 = loc("/usr/include/stdlib.h":573:24)
#loc3 = loc("CWE191_Integer_Underflow__int64_t_rand_multiply_83_bad.cpp":24:1)
#loc4 = loc("CWE191_Integer_Underflow__int64_t_rand_multiply_83_bad.cpp":29:1)
#loc8 = loc("CWE191_Integer_Underflow__int64_t_rand_multiply_83_bad.cpp":25:1)
#loc9 = loc("CWE191_Integer_Underflow__int64_t_rand_multiply_83_bad.cpp":26:12)
#loc10 = loc("./CWE191_Integer_Underflow__int64_t_rand_multiply_83.h":32:13)
#loc11 = loc("CWE191_Integer_Underflow__int64_t_rand_multiply_83_bad.cpp":26:5)
#loc12 = loc("CWE191_Integer_Underflow__int64_t_rand_multiply_83_bad.cpp":28:21)
#loc13 = loc("CWE191_Integer_Underflow__int64_t_rand_multiply_83_bad.cpp":28:5)
#loc14 = loc("../../../testcasesupport/std_testcase_io.h":26:1)
#loc15 = loc("../../../testcasesupport/std_testcase_io.h":26:49)
#loc16 = loc("CWE191_Integer_Underflow__int64_t_rand_multiply_83_bad.cpp":31:1)
#loc17 = loc("CWE191_Integer_Underflow__int64_t_rand_multiply_83_bad.cpp":39:1)
#loc19 = loc("CWE191_Integer_Underflow__int64_t_rand_multiply_83_bad.cpp":32:1)
#loc20 = loc("CWE191_Integer_Underflow__int64_t_rand_multiply_83_bad.cpp":33:5)
#loc21 = loc("CWE191_Integer_Underflow__int64_t_rand_multiply_83_bad.cpp":38:5)
#loc22 = loc("CWE191_Integer_Underflow__int64_t_rand_multiply_83_bad.cpp":33:8)
#loc23 = loc("CWE191_Integer_Underflow__int64_t_rand_multiply_83_bad.cpp":33:15)
#loc24 = loc("CWE191_Integer_Underflow__int64_t_rand_multiply_83_bad.cpp":34:5)
#loc25 = loc("CWE191_Integer_Underflow__int64_t_rand_multiply_83_bad.cpp":36:9)
#loc26 = loc("CWE191_Integer_Underflow__int64_t_rand_multiply_83_bad.cpp":36:33)
#loc27 = loc("CWE191_Integer_Underflow__int64_t_rand_multiply_83_bad.cpp":36:26)
#loc28 = loc("CWE191_Integer_Underflow__int64_t_rand_multiply_83_bad.cpp":37:27)
#loc29 = loc("CWE191_Integer_Underflow__int64_t_rand_multiply_83_bad.cpp":37:9)
#loc30 = loc(fused[#loc1, #loc2])
#loc31 = loc(fused[#loc3, #loc4])
#loc33 = loc(fused[#loc11, #loc9])
#loc34 = loc(fused[#loc13, #loc12])
#loc35 = loc(fused[#loc14, #loc15])
#loc36 = loc(fused[#loc16, #loc17])
#loc37 = loc(fused[#loc20, #loc21])
#loc38 = loc(fused[#loc22, #loc23])
#loc39 = loc(fused[#loc24, #loc21])
#loc40 = loc(fused[#loc25, #loc26])
