!s32i = !cir.int<s, 32>
!s64i = !cir.int<s, 64>
!s8i = !cir.int<s, 8>
!ty__IO_codecvt = !cir.struct<struct "_IO_codecvt" incomplete>
!ty__IO_marker = !cir.struct<struct "_IO_marker" incomplete>
!ty__IO_wide_data = !cir.struct<struct "_IO_wide_data" incomplete>
!u16i = !cir.int<u, 16>
!u32i = !cir.int<u, 32>
!void = !cir.void
#fn_attr = #cir<extra({inline = #cir.inline<no>, nothrow = #cir.nothrow, optnone = #cir.optnone})>
#fn_attr1 = #cir<extra({nothrow = #cir.nothrow})>
#loc73 = loc("CWE190_Integer_Overflow__char_fscanf_add_12.c":158:10)
#loc74 = loc("CWE190_Integer_Overflow__char_fscanf_add_12.c":158:14)
#loc75 = loc("CWE190_Integer_Overflow__char_fscanf_add_12.c":158:20)
#loc76 = loc("CWE190_Integer_Overflow__char_fscanf_add_12.c":158:32)
#loc210 = loc(fused[#loc73, #loc74])
#loc211 = loc(fused[#loc75, #loc76])
!ty__IO_FILE = !cir.struct<struct "_IO_FILE" {!s32i, !cir.ptr<!s8i>, !cir.ptr<!s8i>, !cir.ptr<!s8i>, !cir.ptr<!s8i>, !cir.ptr<!s8i>, !cir.ptr<!s8i>, !cir.ptr<!s8i>, !cir.ptr<!s8i>, !cir.ptr<!s8i>, !cir.ptr<!s8i>, !cir.ptr<!s8i>, !cir.ptr<!ty__IO_marker>, !cir.ptr<!cir.struct<struct "_IO_FILE">>, !s32i, !s32i, !s64i, !u16i, !s8i, !cir.array<!s8i x 1>, !cir.ptr<!void>, !s64i, !cir.ptr<!ty__IO_codecvt>, !cir.ptr<!ty__IO_wide_data>, !cir.ptr<!cir.struct<struct "_IO_FILE">>, !cir.ptr<!void>, !cir.ptr<!cir.ptr<!cir.struct<struct "_IO_FILE">>>, !s32i, !cir.array<!s8i x 20>} #cir.record.decl.ast>
module @"/home/ladisgin/git_proj/juliet-c/testcases/CWE190_Integer_Overflow/s01/CWE190_Integer_Overflow__char_fscanf_add_12.c" attributes {cir.lang = #cir.lang<c>, cir.sob = #cir.signed_overflow_behavior<undefined>, cir.triple = "x86_64-unknown-linux-gnu", dlti.dl_spec = #dlti.dl_spec<!llvm.ptr = dense<64> : vector<4xi64>, i1 = dense<8> : vector<2xi64>, i8 = dense<8> : vector<2xi64>, i16 = dense<16> : vector<2xi64>, i32 = dense<32> : vector<2xi64>, f64 = dense<64> : vector<2xi64>, f16 = dense<16> : vector<2xi64>, !llvm.ptr<270> = dense<32> : vector<4xi64>, f128 = dense<128> : vector<2xi64>, !llvm.ptr<271> = dense<32> : vector<4xi64>, !llvm.ptr<272> = dense<64> : vector<4xi64>, i64 = dense<64> : vector<2xi64>, i128 = dense<128> : vector<2xi64>, f80 = dense<128> : vector<2xi64>, "dlti.stack_alignment" = 128 : i64, "dlti.endianness" = "little">} {
  cir.func no_proto private @globalReturnsTrueOrFalse(...) -> !s32i loc(#loc183)
  cir.func private @__isoc99_fscanf(!cir.ptr<!ty__IO_FILE>, !cir.ptr<!s8i>, ...) -> !s32i loc(#loc184)
  cir.global "private" external @stdin : !cir.ptr<!ty__IO_FILE> {alignment = 8 : i64} loc(#loc185)
  cir.global "private" constant cir_private dsolocal @".str" = #cir.const_array<"%c\00" : !cir.array<!s8i x 3>> : !cir.array<!s8i x 3> {alignment = 1 : i64} loc(#loc7)
  cir.func private @printHexCharLine(!s8i) loc(#loc186)
  cir.func private @printLine(!cir.ptr<!s8i>) loc(#loc187)
  cir.global "private" constant cir_private dsolocal @".str.1" = #cir.const_array<"data value is too large to perform arithmetic safely.\00" : !cir.array<!s8i x 54>> : !cir.array<!s8i x 54> {alignment = 1 : i64} loc(#loc12)
  cir.func no_proto @CWE190_Integer_Overflow__char_fscanf_add_12_bad() extra(#fn_attr) {
    %0 = cir.alloca !s8i, !cir.ptr<!s8i>, ["data"] {alignment = 1 : i64} loc(#loc189)
    %1 = cir.const #cir.int<32> : !s32i loc(#loc17)
    %2 = cir.cast(integral, %1 : !s32i), !s8i loc(#loc17)
    cir.store %2, %0 : !s8i, !cir.ptr<!s8i> loc(#loc190)
    cir.scope {
      %3 = cir.get_global @globalReturnsTrueOrFalse : !cir.ptr<!cir.func<!s32i (...)>> loc(#loc192)
      %4 = cir.cast(bitcast, %3 : !cir.ptr<!cir.func<!s32i (...)>>), !cir.ptr<!cir.func<!s32i ()>> loc(#loc192)
      %5 = cir.call %4() : (!cir.ptr<!cir.func<!s32i ()>>) -> !s32i loc(#loc21)
      %6 = cir.cast(int_to_bool, %5 : !s32i), !cir.bool loc(#loc21)
      cir.if %6 {
        %7 = cir.get_global @__isoc99_fscanf : !cir.ptr<!cir.func<!s32i (!cir.ptr<!ty__IO_FILE>, !cir.ptr<!s8i>, ...)>> loc(#loc26)
        %8 = cir.get_global @stdin : !cir.ptr<!cir.ptr<!ty__IO_FILE>> loc(#loc185)
        %9 = cir.load %8 : !cir.ptr<!cir.ptr<!ty__IO_FILE>>, !cir.ptr<!ty__IO_FILE> loc(#loc27)
        %10 = cir.get_global @".str" : !cir.ptr<!cir.array<!s8i x 3>> loc(#loc7)
        %11 = cir.cast(array_to_ptrdecay, %10 : !cir.ptr<!cir.array<!s8i x 3>>), !cir.ptr<!s8i> loc(#loc7)
        %12 = cir.call @__isoc99_fscanf(%9, %11, %0) : (!cir.ptr<!ty__IO_FILE>, !cir.ptr<!s8i>, !cir.ptr<!s8i>) -> !s32i loc(#loc26)
      } else {
        %7 = cir.const #cir.int<2> : !s32i loc(#loc28)
        %8 = cir.cast(integral, %7 : !s32i), !s8i loc(#loc28)
        cir.store %8, %0 : !s8i, !cir.ptr<!s8i> loc(#loc194)
      } loc(#loc193)
    } loc(#loc191)
    cir.scope {
      %3 = cir.get_global @globalReturnsTrueOrFalse : !cir.ptr<!cir.func<!s32i (...)>> loc(#loc196)
      %4 = cir.cast(bitcast, %3 : !cir.ptr<!cir.func<!s32i (...)>>), !cir.ptr<!cir.func<!s32i ()>> loc(#loc196)
      %5 = cir.call %4() : (!cir.ptr<!cir.func<!s32i ()>>) -> !s32i loc(#loc32)
      %6 = cir.cast(int_to_bool, %5 : !s32i), !cir.bool loc(#loc32)
      cir.if %6 {
        cir.scope {
          %7 = cir.alloca !s8i, !cir.ptr<!s8i>, ["result", init] {alignment = 1 : i64} loc(#loc199)
          %8 = cir.load %0 : !cir.ptr<!s8i>, !s8i loc(#loc41)
          %9 = cir.cast(integral, %8 : !s8i), !s32i loc(#loc41)
          %10 = cir.const #cir.int<1> : !s32i loc(#loc40)
          %11 = cir.binop(add, %9, %10) nsw : !s32i loc(#loc41)
          %12 = cir.cast(integral, %11 : !s32i), !s8i loc(#loc41)
          cir.store %12, %7 : !s8i, !cir.ptr<!s8i> loc(#loc199)
          %13 = cir.load %7 : !cir.ptr<!s8i>, !s8i loc(#loc42)
          cir.call @printHexCharLine(%13) : (!s8i) -> () loc(#loc43)
        } loc(#loc198)
      } else {
        cir.scope {
          %7 = cir.load %0 : !cir.ptr<!s8i>, !s8i loc(#loc46)
          %8 = cir.cast(integral, %7 : !s8i), !s32i loc(#loc46)
          %9 = cir.const #cir.int<127> : !s32i loc(#loc47)
          %10 = cir.cmp(lt, %8, %9) : !s32i, !cir.bool loc(#loc201)
          cir.if %10 {
            %11 = cir.alloca !s8i, !cir.ptr<!s8i>, ["result", init] {alignment = 1 : i64} loc(#loc203)
            %12 = cir.load %0 : !cir.ptr<!s8i>, !s8i loc(#loc53)
            %13 = cir.cast(integral, %12 : !s8i), !s32i loc(#loc53)
            %14 = cir.const #cir.int<1> : !s32i loc(#loc52)
            %15 = cir.binop(add, %13, %14) nsw : !s32i loc(#loc53)
            %16 = cir.cast(integral, %15 : !s32i), !s8i loc(#loc53)
            cir.store %16, %11 : !s8i, !cir.ptr<!s8i> loc(#loc203)
            %17 = cir.load %11 : !cir.ptr<!s8i>, !s8i loc(#loc54)
            cir.call @printHexCharLine(%17) : (!s8i) -> () loc(#loc55)
          } else {
            %11 = cir.get_global @".str.1" : !cir.ptr<!cir.array<!s8i x 54>> loc(#loc12)
            %12 = cir.cast(array_to_ptrdecay, %11 : !cir.ptr<!cir.array<!s8i x 54>>), !cir.ptr<!s8i> loc(#loc12)
            cir.call @printLine(%12) : (!cir.ptr<!s8i>) -> () loc(#loc56)
          } loc(#loc202)
        } loc(#loc200)
      } loc(#loc197)
    } loc(#loc195)
    cir.return loc(#loc14)
  } loc(#loc188)
  cir.func no_proto @CWE190_Integer_Overflow__char_fscanf_add_12_good() extra(#fn_attr) {
    %0 = cir.get_global @goodB2G : !cir.ptr<!cir.func<!void ()>> loc(#loc205)
    cir.call %0() : (!cir.ptr<!cir.func<!void ()>>) -> () loc(#loc59)
    %1 = cir.get_global @goodG2B : !cir.ptr<!cir.func<!void ()>> loc(#loc206)
    cir.call %1() : (!cir.ptr<!cir.func<!void ()>>) -> () loc(#loc61)
    cir.return loc(#loc58)
  } loc(#loc204)
  cir.func private @srand(!u32i) extra(#fn_attr1) loc(#loc207)
  cir.func private @time(!cir.ptr<!s64i>) -> !s64i extra(#fn_attr1) loc(#loc208)
  cir.global "private" constant cir_private dsolocal @".str.2" = #cir.const_array<"Calling good()...\00" : !cir.array<!s8i x 18>> : !cir.array<!s8i x 18> {alignment = 1 : i64} loc(#loc67)
  cir.global "private" constant cir_private dsolocal @".str.3" = #cir.const_array<"Finished good()\00" : !cir.array<!s8i x 16>> : !cir.array<!s8i x 16> {alignment = 1 : i64} loc(#loc68)
  cir.global "private" constant cir_private dsolocal @".str.4" = #cir.const_array<"Calling bad()...\00" : !cir.array<!s8i x 17>> : !cir.array<!s8i x 17> {alignment = 1 : i64} loc(#loc69)
  cir.global "private" constant cir_private dsolocal @".str.5" = #cir.const_array<"Finished bad()\00" : !cir.array<!s8i x 15>> : !cir.array<!s8i x 15> {alignment = 1 : i64} loc(#loc70)
  cir.func @main(%arg0: !s32i loc(fused[#loc73, #loc74]), %arg1: !cir.ptr<!cir.ptr<!s8i>> loc(fused[#loc75, #loc76])) -> !s32i extra(#fn_attr) {
    %0 = cir.alloca !s32i, !cir.ptr<!s32i>, ["argc", init] {alignment = 4 : i64} loc(#loc210)
    %1 = cir.alloca !cir.ptr<!cir.ptr<!s8i>>, !cir.ptr<!cir.ptr<!cir.ptr<!s8i>>>, ["argv", init] {alignment = 8 : i64} loc(#loc211)
    %2 = cir.alloca !s32i, !cir.ptr<!s32i>, ["__retval"] {alignment = 4 : i64} loc(#loc72)
    cir.store %arg0, %0 : !s32i, !cir.ptr<!s32i> loc(#loc77)
    cir.store %arg1, %1 : !cir.ptr<!cir.ptr<!s8i>>, !cir.ptr<!cir.ptr<!cir.ptr<!s8i>>> loc(#loc77)
    %3 = cir.const #cir.ptr<null> : !cir.ptr<!s64i> loc(#loc78)
    %4 = cir.call @time(%3) : (!cir.ptr<!s64i>) -> !s64i extra(#fn_attr1) loc(#loc79)
    %5 = cir.cast(integral, %4 : !s64i), !u32i loc(#loc79)
    cir.call @srand(%5) : (!u32i) -> () extra(#fn_attr1) loc(#loc80)
    %6 = cir.get_global @".str.2" : !cir.ptr<!cir.array<!s8i x 18>> loc(#loc67)
    %7 = cir.cast(array_to_ptrdecay, %6 : !cir.ptr<!cir.array<!s8i x 18>>), !cir.ptr<!s8i> loc(#loc67)
    cir.call @printLine(%7) : (!cir.ptr<!s8i>) -> () loc(#loc81)
    %8 = cir.get_global @CWE190_Integer_Overflow__char_fscanf_add_12_good : !cir.ptr<!cir.func<!void ()>> loc(#loc212)
    cir.call @CWE190_Integer_Overflow__char_fscanf_add_12_good() : () -> () loc(#loc82)
    %9 = cir.get_global @".str.3" : !cir.ptr<!cir.array<!s8i x 16>> loc(#loc68)
    %10 = cir.cast(array_to_ptrdecay, %9 : !cir.ptr<!cir.array<!s8i x 16>>), !cir.ptr<!s8i> loc(#loc68)
    cir.call @printLine(%10) : (!cir.ptr<!s8i>) -> () loc(#loc84)
    %11 = cir.get_global @".str.4" : !cir.ptr<!cir.array<!s8i x 17>> loc(#loc69)
    %12 = cir.cast(array_to_ptrdecay, %11 : !cir.ptr<!cir.array<!s8i x 17>>), !cir.ptr<!s8i> loc(#loc69)
    cir.call @printLine(%12) : (!cir.ptr<!s8i>) -> () loc(#loc85)
    %13 = cir.get_global @CWE190_Integer_Overflow__char_fscanf_add_12_bad : !cir.ptr<!cir.func<!void ()>> loc(#loc213)
    cir.call @CWE190_Integer_Overflow__char_fscanf_add_12_bad() : () -> () loc(#loc86)
    %14 = cir.get_global @".str.5" : !cir.ptr<!cir.array<!s8i x 15>> loc(#loc70)
    %15 = cir.cast(array_to_ptrdecay, %14 : !cir.ptr<!cir.array<!s8i x 15>>), !cir.ptr<!s8i> loc(#loc70)
    cir.call @printLine(%15) : (!cir.ptr<!s8i>) -> () loc(#loc88)
    %16 = cir.const #cir.int<0> : !s32i loc(#loc89)
    cir.store %16, %2 : !s32i, !cir.ptr<!s32i> loc(#loc214)
    %17 = cir.load %2 : !cir.ptr<!s32i>, !s32i loc(#loc214)
    cir.return %17 : !s32i loc(#loc214)
  } loc(#loc209)
  cir.func no_proto internal private @goodB2G() extra(#fn_attr) {
    %0 = cir.alloca !s8i, !cir.ptr<!s8i>, ["data"] {alignment = 1 : i64} loc(#loc216)
    %1 = cir.const #cir.int<32> : !s32i loc(#loc95)
    %2 = cir.cast(integral, %1 : !s32i), !s8i loc(#loc95)
    cir.store %2, %0 : !s8i, !cir.ptr<!s8i> loc(#loc217)
    cir.scope {
      %3 = cir.get_global @globalReturnsTrueOrFalse : !cir.ptr<!cir.func<!s32i (...)>> loc(#loc219)
      %4 = cir.cast(bitcast, %3 : !cir.ptr<!cir.func<!s32i (...)>>), !cir.ptr<!cir.func<!s32i ()>> loc(#loc219)
      %5 = cir.call %4() : (!cir.ptr<!cir.func<!s32i ()>>) -> !s32i loc(#loc99)
      %6 = cir.cast(int_to_bool, %5 : !s32i), !cir.bool loc(#loc99)
      cir.if %6 {
        %7 = cir.get_global @__isoc99_fscanf : !cir.ptr<!cir.func<!s32i (!cir.ptr<!ty__IO_FILE>, !cir.ptr<!s8i>, ...)>> loc(#loc104)
        %8 = cir.get_global @stdin : !cir.ptr<!cir.ptr<!ty__IO_FILE>> loc(#loc185)
        %9 = cir.load %8 : !cir.ptr<!cir.ptr<!ty__IO_FILE>>, !cir.ptr<!ty__IO_FILE> loc(#loc105)
        %10 = cir.get_global @".str" : !cir.ptr<!cir.array<!s8i x 3>> loc(#loc106)
        %11 = cir.cast(array_to_ptrdecay, %10 : !cir.ptr<!cir.array<!s8i x 3>>), !cir.ptr<!s8i> loc(#loc106)
        %12 = cir.call @__isoc99_fscanf(%9, %11, %0) : (!cir.ptr<!ty__IO_FILE>, !cir.ptr<!s8i>, !cir.ptr<!s8i>) -> !s32i loc(#loc104)
      } else {
        %7 = cir.get_global @__isoc99_fscanf : !cir.ptr<!cir.func<!s32i (!cir.ptr<!ty__IO_FILE>, !cir.ptr<!s8i>, ...)>> loc(#loc107)
        %8 = cir.get_global @stdin : !cir.ptr<!cir.ptr<!ty__IO_FILE>> loc(#loc185)
        %9 = cir.load %8 : !cir.ptr<!cir.ptr<!ty__IO_FILE>>, !cir.ptr<!ty__IO_FILE> loc(#loc108)
        %10 = cir.get_global @".str" : !cir.ptr<!cir.array<!s8i x 3>> loc(#loc109)
        %11 = cir.cast(array_to_ptrdecay, %10 : !cir.ptr<!cir.array<!s8i x 3>>), !cir.ptr<!s8i> loc(#loc109)
        %12 = cir.call @__isoc99_fscanf(%9, %11, %0) : (!cir.ptr<!ty__IO_FILE>, !cir.ptr<!s8i>, !cir.ptr<!s8i>) -> !s32i loc(#loc107)
      } loc(#loc220)
    } loc(#loc218)
    cir.scope {
      %3 = cir.get_global @globalReturnsTrueOrFalse : !cir.ptr<!cir.func<!s32i (...)>> loc(#loc222)
      %4 = cir.cast(bitcast, %3 : !cir.ptr<!cir.func<!s32i (...)>>), !cir.ptr<!cir.func<!s32i ()>> loc(#loc222)
      %5 = cir.call %4() : (!cir.ptr<!cir.func<!s32i ()>>) -> !s32i loc(#loc112)
      %6 = cir.cast(int_to_bool, %5 : !s32i), !cir.bool loc(#loc112)
      cir.if %6 {
        cir.scope {
          %7 = cir.load %0 : !cir.ptr<!s8i>, !s8i loc(#loc119)
          %8 = cir.cast(integral, %7 : !s8i), !s32i loc(#loc119)
          %9 = cir.const #cir.int<127> : !s32i loc(#loc120)
          %10 = cir.cmp(lt, %8, %9) : !s32i, !cir.bool loc(#loc225)
          cir.if %10 {
            %11 = cir.alloca !s8i, !cir.ptr<!s8i>, ["result", init] {alignment = 1 : i64} loc(#loc227)
            %12 = cir.load %0 : !cir.ptr<!s8i>, !s8i loc(#loc126)
            %13 = cir.cast(integral, %12 : !s8i), !s32i loc(#loc126)
            %14 = cir.const #cir.int<1> : !s32i loc(#loc125)
            %15 = cir.binop(add, %13, %14) nsw : !s32i loc(#loc126)
            %16 = cir.cast(integral, %15 : !s32i), !s8i loc(#loc126)
            cir.store %16, %11 : !s8i, !cir.ptr<!s8i> loc(#loc227)
            %17 = cir.load %11 : !cir.ptr<!s8i>, !s8i loc(#loc127)
            cir.call @printHexCharLine(%17) : (!s8i) -> () loc(#loc128)
          } else {
            %11 = cir.get_global @".str.1" : !cir.ptr<!cir.array<!s8i x 54>> loc(#loc129)
            %12 = cir.cast(array_to_ptrdecay, %11 : !cir.ptr<!cir.array<!s8i x 54>>), !cir.ptr<!s8i> loc(#loc129)
            cir.call @printLine(%12) : (!cir.ptr<!s8i>) -> () loc(#loc130)
          } loc(#loc226)
        } loc(#loc224)
      } else {
        cir.scope {
          %7 = cir.load %0 : !cir.ptr<!s8i>, !s8i loc(#loc133)
          %8 = cir.cast(integral, %7 : !s8i), !s32i loc(#loc133)
          %9 = cir.const #cir.int<127> : !s32i loc(#loc134)
          %10 = cir.cmp(lt, %8, %9) : !s32i, !cir.bool loc(#loc229)
          cir.if %10 {
            %11 = cir.alloca !s8i, !cir.ptr<!s8i>, ["result", init] {alignment = 1 : i64} loc(#loc231)
            %12 = cir.load %0 : !cir.ptr<!s8i>, !s8i loc(#loc140)
            %13 = cir.cast(integral, %12 : !s8i), !s32i loc(#loc140)
            %14 = cir.const #cir.int<1> : !s32i loc(#loc139)
            %15 = cir.binop(add, %13, %14) nsw : !s32i loc(#loc140)
            %16 = cir.cast(integral, %15 : !s32i), !s8i loc(#loc140)
            cir.store %16, %11 : !s8i, !cir.ptr<!s8i> loc(#loc231)
            %17 = cir.load %11 : !cir.ptr<!s8i>, !s8i loc(#loc141)
            cir.call @printHexCharLine(%17) : (!s8i) -> () loc(#loc142)
          } else {
            %11 = cir.get_global @".str.1" : !cir.ptr<!cir.array<!s8i x 54>> loc(#loc143)
            %12 = cir.cast(array_to_ptrdecay, %11 : !cir.ptr<!cir.array<!s8i x 54>>), !cir.ptr<!s8i> loc(#loc143)
            cir.call @printLine(%12) : (!cir.ptr<!s8i>) -> () loc(#loc144)
          } loc(#loc230)
        } loc(#loc228)
      } loc(#loc223)
    } loc(#loc221)
    cir.return loc(#loc92)
  } loc(#loc215)
  cir.func no_proto internal private @goodG2B() extra(#fn_attr) {
    %0 = cir.alloca !s8i, !cir.ptr<!s8i>, ["data"] {alignment = 1 : i64} loc(#loc233)
    %1 = cir.const #cir.int<32> : !s32i loc(#loc149)
    %2 = cir.cast(integral, %1 : !s32i), !s8i loc(#loc149)
    cir.store %2, %0 : !s8i, !cir.ptr<!s8i> loc(#loc234)
    cir.scope {
      %3 = cir.get_global @globalReturnsTrueOrFalse : !cir.ptr<!cir.func<!s32i (...)>> loc(#loc236)
      %4 = cir.cast(bitcast, %3 : !cir.ptr<!cir.func<!s32i (...)>>), !cir.ptr<!cir.func<!s32i ()>> loc(#loc236)
      %5 = cir.call %4() : (!cir.ptr<!cir.func<!s32i ()>>) -> !s32i loc(#loc153)
      %6 = cir.cast(int_to_bool, %5 : !s32i), !cir.bool loc(#loc153)
      cir.if %6 {
        %7 = cir.const #cir.int<2> : !s32i loc(#loc158)
        %8 = cir.cast(integral, %7 : !s32i), !s8i loc(#loc158)
        cir.store %8, %0 : !s8i, !cir.ptr<!s8i> loc(#loc238)
      } else {
        %7 = cir.const #cir.int<2> : !s32i loc(#loc160)
        %8 = cir.cast(integral, %7 : !s32i), !s8i loc(#loc160)
        cir.store %8, %0 : !s8i, !cir.ptr<!s8i> loc(#loc239)
      } loc(#loc237)
    } loc(#loc235)
    cir.scope {
      %3 = cir.get_global @globalReturnsTrueOrFalse : !cir.ptr<!cir.func<!s32i (...)>> loc(#loc241)
      %4 = cir.cast(bitcast, %3 : !cir.ptr<!cir.func<!s32i (...)>>), !cir.ptr<!cir.func<!s32i ()>> loc(#loc241)
      %5 = cir.call %4() : (!cir.ptr<!cir.func<!s32i ()>>) -> !s32i loc(#loc164)
      %6 = cir.cast(int_to_bool, %5 : !s32i), !cir.bool loc(#loc164)
      cir.if %6 {
        cir.scope {
          %7 = cir.alloca !s8i, !cir.ptr<!s8i>, ["result", init] {alignment = 1 : i64} loc(#loc244)
          %8 = cir.load %0 : !cir.ptr<!s8i>, !s8i loc(#loc173)
          %9 = cir.cast(integral, %8 : !s8i), !s32i loc(#loc173)
          %10 = cir.const #cir.int<1> : !s32i loc(#loc172)
          %11 = cir.binop(add, %9, %10) nsw : !s32i loc(#loc173)
          %12 = cir.cast(integral, %11 : !s32i), !s8i loc(#loc173)
          cir.store %12, %7 : !s8i, !cir.ptr<!s8i> loc(#loc244)
          %13 = cir.load %7 : !cir.ptr<!s8i>, !s8i loc(#loc174)
          cir.call @printHexCharLine(%13) : (!s8i) -> () loc(#loc175)
        } loc(#loc243)
      } else {
        cir.scope {
          %7 = cir.alloca !s8i, !cir.ptr<!s8i>, ["result", init] {alignment = 1 : i64} loc(#loc246)
          %8 = cir.load %0 : !cir.ptr<!s8i>, !s8i loc(#loc180)
          %9 = cir.cast(integral, %8 : !s8i), !s32i loc(#loc180)
          %10 = cir.const #cir.int<1> : !s32i loc(#loc179)
          %11 = cir.binop(add, %9, %10) nsw : !s32i loc(#loc180)
          %12 = cir.cast(integral, %11 : !s32i), !s8i loc(#loc180)
          cir.store %12, %7 : !s8i, !cir.ptr<!s8i> loc(#loc246)
          %13 = cir.load %7 : !cir.ptr<!s8i>, !s8i loc(#loc181)
          cir.call @printHexCharLine(%13) : (!s8i) -> () loc(#loc182)
        } loc(#loc245)
      } loc(#loc242)
    } loc(#loc240)
    cir.return loc(#loc146)
  } loc(#loc232)
} loc(#loc)
#loc = loc("/home/ladisgin/git_proj/juliet-c/testcases/CWE190_Integer_Overflow/s01/CWE190_Integer_Overflow__char_fscanf_add_12.c":0:0)
#loc1 = loc("../../../testcasesupport/std_testcase_io.h":52:1)
#loc2 = loc("../../../testcasesupport/std_testcase_io.h":52:30)
#loc3 = loc("/usr/include/stdio.h":463:1)
#loc4 = loc("/usr/include/stdio.h":465:33)
#loc5 = loc("/usr/include/stdio.h":149:1)
#loc6 = loc("/usr/include/stdio.h":149:14)
#loc7 = loc("CWE190_Integer_Overflow__char_fscanf_add_12.c":29:24)
#loc8 = loc("../../../testcasesupport/std_testcase_io.h":30:1)
#loc9 = loc("../../../testcasesupport/std_testcase_io.h":30:35)
#loc10 = loc("../../../testcasesupport/std_testcase_io.h":14:1)
#loc11 = loc("../../../testcasesupport/std_testcase_io.h":14:33)
#loc12 = loc("CWE190_Integer_Overflow__char_fscanf_add_12.c":54:23)
#loc13 = loc("CWE190_Integer_Overflow__char_fscanf_add_12.c":22:1)
#loc14 = loc("CWE190_Integer_Overflow__char_fscanf_add_12.c":57:1)
#loc15 = loc("CWE190_Integer_Overflow__char_fscanf_add_12.c":24:5)
#loc16 = loc("CWE190_Integer_Overflow__char_fscanf_add_12.c":24:10)
#loc17 = loc("CWE190_Integer_Overflow__char_fscanf_add_12.c":25:12)
#loc18 = loc("CWE190_Integer_Overflow__char_fscanf_add_12.c":25:5)
#loc19 = loc("CWE190_Integer_Overflow__char_fscanf_add_12.c":26:5)
#loc20 = loc("CWE190_Integer_Overflow__char_fscanf_add_12.c":35:5)
#loc21 = loc("CWE190_Integer_Overflow__char_fscanf_add_12.c":26:8)
#loc22 = loc("CWE190_Integer_Overflow__char_fscanf_add_12.c":26:33)
#loc23 = loc("CWE190_Integer_Overflow__char_fscanf_add_12.c":27:5)
#loc24 = loc("CWE190_Integer_Overflow__char_fscanf_add_12.c":30:5)
#loc25 = loc("CWE190_Integer_Overflow__char_fscanf_add_12.c":32:5)
#loc26 = loc("CWE190_Integer_Overflow__char_fscanf_add_12.c":29:9)
#loc27 = loc("CWE190_Integer_Overflow__char_fscanf_add_12.c":29:17)
#loc28 = loc("CWE190_Integer_Overflow__char_fscanf_add_12.c":34:16)
#loc29 = loc("CWE190_Integer_Overflow__char_fscanf_add_12.c":34:9)
#loc30 = loc("CWE190_Integer_Overflow__char_fscanf_add_12.c":36:5)
#loc31 = loc("CWE190_Integer_Overflow__char_fscanf_add_12.c":56:5)
#loc32 = loc("CWE190_Integer_Overflow__char_fscanf_add_12.c":36:8)
#loc33 = loc("CWE190_Integer_Overflow__char_fscanf_add_12.c":36:33)
#loc34 = loc("CWE190_Integer_Overflow__char_fscanf_add_12.c":37:5)
#loc35 = loc("CWE190_Integer_Overflow__char_fscanf_add_12.c":43:5)
#loc36 = loc("CWE190_Integer_Overflow__char_fscanf_add_12.c":45:5)
#loc37 = loc("CWE190_Integer_Overflow__char_fscanf_add_12.c":38:9)
#loc38 = loc("CWE190_Integer_Overflow__char_fscanf_add_12.c":42:9)
#loc39 = loc("CWE190_Integer_Overflow__char_fscanf_add_12.c":40:13)
#loc40 = loc("CWE190_Integer_Overflow__char_fscanf_add_12.c":40:34)
#loc41 = loc("CWE190_Integer_Overflow__char_fscanf_add_12.c":40:27)
#loc42 = loc("CWE190_Integer_Overflow__char_fscanf_add_12.c":41:30)
#loc43 = loc("CWE190_Integer_Overflow__char_fscanf_add_12.c":41:13)
#loc44 = loc("CWE190_Integer_Overflow__char_fscanf_add_12.c":47:9)
#loc45 = loc("CWE190_Integer_Overflow__char_fscanf_add_12.c":55:9)
#loc46 = loc("CWE190_Integer_Overflow__char_fscanf_add_12.c":47:13)
#loc47 = loc("CWE190_Integer_Overflow__char_fscanf_add_12.c":47:20)
#loc48 = loc("CWE190_Integer_Overflow__char_fscanf_add_12.c":48:9)
#loc49 = loc("CWE190_Integer_Overflow__char_fscanf_add_12.c":51:9)
#loc50 = loc("CWE190_Integer_Overflow__char_fscanf_add_12.c":53:9)
#loc51 = loc("CWE190_Integer_Overflow__char_fscanf_add_12.c":49:13)
#loc52 = loc("CWE190_Integer_Overflow__char_fscanf_add_12.c":49:34)
#loc53 = loc("CWE190_Integer_Overflow__char_fscanf_add_12.c":49:27)
#loc54 = loc("CWE190_Integer_Overflow__char_fscanf_add_12.c":50:30)
#loc55 = loc("CWE190_Integer_Overflow__char_fscanf_add_12.c":50:13)
#loc56 = loc("CWE190_Integer_Overflow__char_fscanf_add_12.c":54:13)
#loc57 = loc("CWE190_Integer_Overflow__char_fscanf_add_12.c":143:1)
#loc58 = loc("CWE190_Integer_Overflow__char_fscanf_add_12.c":147:1)
#loc59 = loc("CWE190_Integer_Overflow__char_fscanf_add_12.c":145:5)
#loc60 = loc("CWE190_Integer_Overflow__char_fscanf_add_12.c":145:13)
#loc61 = loc("CWE190_Integer_Overflow__char_fscanf_add_12.c":146:5)
#loc62 = loc("CWE190_Integer_Overflow__char_fscanf_add_12.c":146:13)
#loc63 = loc("/usr/include/stdlib.h":575:1)
#loc64 = loc("/usr/include/stdlib.h":575:41)
#loc65 = loc("/usr/include/time.h":76:1)
#loc66 = loc("/usr/include/time.h":76:38)
#loc67 = loc("CWE190_Integer_Overflow__char_fscanf_add_12.c":163:15)
#loc68 = loc("CWE190_Integer_Overflow__char_fscanf_add_12.c":165:15)
#loc69 = loc("CWE190_Integer_Overflow__char_fscanf_add_12.c":168:15)
#loc70 = loc("CWE190_Integer_Overflow__char_fscanf_add_12.c":170:15)
#loc71 = loc("CWE190_Integer_Overflow__char_fscanf_add_12.c":158:1)
#loc72 = loc("CWE190_Integer_Overflow__char_fscanf_add_12.c":173:1)
#loc77 = loc("CWE190_Integer_Overflow__char_fscanf_add_12.c":159:1)
#loc78 = loc("CWE190_Integer_Overflow__char_fscanf_add_12.c":161:27)
#loc79 = loc("CWE190_Integer_Overflow__char_fscanf_add_12.c":161:22)
#loc80 = loc("CWE190_Integer_Overflow__char_fscanf_add_12.c":161:5)
#loc81 = loc("CWE190_Integer_Overflow__char_fscanf_add_12.c":163:5)
#loc82 = loc("CWE190_Integer_Overflow__char_fscanf_add_12.c":164:5)
#loc83 = loc("CWE190_Integer_Overflow__char_fscanf_add_12.c":164:54)
#loc84 = loc("CWE190_Integer_Overflow__char_fscanf_add_12.c":165:5)
#loc85 = loc("CWE190_Integer_Overflow__char_fscanf_add_12.c":168:5)
#loc86 = loc("CWE190_Integer_Overflow__char_fscanf_add_12.c":169:5)
#loc87 = loc("CWE190_Integer_Overflow__char_fscanf_add_12.c":169:53)
#loc88 = loc("CWE190_Integer_Overflow__char_fscanf_add_12.c":170:5)
#loc89 = loc("CWE190_Integer_Overflow__char_fscanf_add_12.c":172:12)
#loc90 = loc("CWE190_Integer_Overflow__char_fscanf_add_12.c":172:5)
#loc91 = loc("CWE190_Integer_Overflow__char_fscanf_add_12.c":66:1)
#loc92 = loc("CWE190_Integer_Overflow__char_fscanf_add_12.c":106:1)
#loc93 = loc("CWE190_Integer_Overflow__char_fscanf_add_12.c":68:5)
#loc94 = loc("CWE190_Integer_Overflow__char_fscanf_add_12.c":68:10)
#loc95 = loc("CWE190_Integer_Overflow__char_fscanf_add_12.c":69:12)
#loc96 = loc("CWE190_Integer_Overflow__char_fscanf_add_12.c":69:5)
#loc97 = loc("CWE190_Integer_Overflow__char_fscanf_add_12.c":70:5)
#loc98 = loc("CWE190_Integer_Overflow__char_fscanf_add_12.c":79:5)
#loc99 = loc("CWE190_Integer_Overflow__char_fscanf_add_12.c":70:8)
#loc100 = loc("CWE190_Integer_Overflow__char_fscanf_add_12.c":70:33)
#loc101 = loc("CWE190_Integer_Overflow__char_fscanf_add_12.c":71:5)
#loc102 = loc("CWE190_Integer_Overflow__char_fscanf_add_12.c":74:5)
#loc103 = loc("CWE190_Integer_Overflow__char_fscanf_add_12.c":76:5)
#loc104 = loc("CWE190_Integer_Overflow__char_fscanf_add_12.c":73:9)
#loc105 = loc("CWE190_Integer_Overflow__char_fscanf_add_12.c":73:17)
#loc106 = loc("CWE190_Integer_Overflow__char_fscanf_add_12.c":73:24)
#loc107 = loc("CWE190_Integer_Overflow__char_fscanf_add_12.c":78:9)
#loc108 = loc("CWE190_Integer_Overflow__char_fscanf_add_12.c":78:17)
#loc109 = loc("CWE190_Integer_Overflow__char_fscanf_add_12.c":78:24)
#loc110 = loc("CWE190_Integer_Overflow__char_fscanf_add_12.c":80:5)
#loc111 = loc("CWE190_Integer_Overflow__char_fscanf_add_12.c":105:5)
#loc112 = loc("CWE190_Integer_Overflow__char_fscanf_add_12.c":80:8)
#loc113 = loc("CWE190_Integer_Overflow__char_fscanf_add_12.c":80:33)
#loc114 = loc("CWE190_Integer_Overflow__char_fscanf_add_12.c":81:5)
#loc115 = loc("CWE190_Integer_Overflow__char_fscanf_add_12.c":92:5)
#loc116 = loc("CWE190_Integer_Overflow__char_fscanf_add_12.c":94:5)
#loc117 = loc("CWE190_Integer_Overflow__char_fscanf_add_12.c":83:9)
#loc118 = loc("CWE190_Integer_Overflow__char_fscanf_add_12.c":91:9)
#loc119 = loc("CWE190_Integer_Overflow__char_fscanf_add_12.c":83:13)
#loc120 = loc("CWE190_Integer_Overflow__char_fscanf_add_12.c":83:20)
#loc121 = loc("CWE190_Integer_Overflow__char_fscanf_add_12.c":84:9)
#loc122 = loc("CWE190_Integer_Overflow__char_fscanf_add_12.c":87:9)
#loc123 = loc("CWE190_Integer_Overflow__char_fscanf_add_12.c":89:9)
#loc124 = loc("CWE190_Integer_Overflow__char_fscanf_add_12.c":85:13)
#loc125 = loc("CWE190_Integer_Overflow__char_fscanf_add_12.c":85:34)
#loc126 = loc("CWE190_Integer_Overflow__char_fscanf_add_12.c":85:27)
#loc127 = loc("CWE190_Integer_Overflow__char_fscanf_add_12.c":86:30)
#loc128 = loc("CWE190_Integer_Overflow__char_fscanf_add_12.c":86:13)
#loc129 = loc("CWE190_Integer_Overflow__char_fscanf_add_12.c":90:23)
#loc130 = loc("CWE190_Integer_Overflow__char_fscanf_add_12.c":90:13)
#loc131 = loc("CWE190_Integer_Overflow__char_fscanf_add_12.c":96:9)
#loc132 = loc("CWE190_Integer_Overflow__char_fscanf_add_12.c":104:9)
#loc133 = loc("CWE190_Integer_Overflow__char_fscanf_add_12.c":96:13)
#loc134 = loc("CWE190_Integer_Overflow__char_fscanf_add_12.c":96:20)
#loc135 = loc("CWE190_Integer_Overflow__char_fscanf_add_12.c":97:9)
#loc136 = loc("CWE190_Integer_Overflow__char_fscanf_add_12.c":100:9)
#loc137 = loc("CWE190_Integer_Overflow__char_fscanf_add_12.c":102:9)
#loc138 = loc("CWE190_Integer_Overflow__char_fscanf_add_12.c":98:13)
#loc139 = loc("CWE190_Integer_Overflow__char_fscanf_add_12.c":98:34)
#loc140 = loc("CWE190_Integer_Overflow__char_fscanf_add_12.c":98:27)
#loc141 = loc("CWE190_Integer_Overflow__char_fscanf_add_12.c":99:30)
#loc142 = loc("CWE190_Integer_Overflow__char_fscanf_add_12.c":99:13)
#loc143 = loc("CWE190_Integer_Overflow__char_fscanf_add_12.c":103:23)
#loc144 = loc("CWE190_Integer_Overflow__char_fscanf_add_12.c":103:13)
#loc145 = loc("CWE190_Integer_Overflow__char_fscanf_add_12.c":111:1)
#loc146 = loc("CWE190_Integer_Overflow__char_fscanf_add_12.c":141:1)
#loc147 = loc("CWE190_Integer_Overflow__char_fscanf_add_12.c":113:5)
#loc148 = loc("CWE190_Integer_Overflow__char_fscanf_add_12.c":113:10)
#loc149 = loc("CWE190_Integer_Overflow__char_fscanf_add_12.c":114:12)
#loc150 = loc("CWE190_Integer_Overflow__char_fscanf_add_12.c":114:5)
#loc151 = loc("CWE190_Integer_Overflow__char_fscanf_add_12.c":115:5)
#loc152 = loc("CWE190_Integer_Overflow__char_fscanf_add_12.c":124:5)
#loc153 = loc("CWE190_Integer_Overflow__char_fscanf_add_12.c":115:8)
#loc154 = loc("CWE190_Integer_Overflow__char_fscanf_add_12.c":115:33)
#loc155 = loc("CWE190_Integer_Overflow__char_fscanf_add_12.c":116:5)
#loc156 = loc("CWE190_Integer_Overflow__char_fscanf_add_12.c":119:5)
#loc157 = loc("CWE190_Integer_Overflow__char_fscanf_add_12.c":121:5)
#loc158 = loc("CWE190_Integer_Overflow__char_fscanf_add_12.c":118:16)
#loc159 = loc("CWE190_Integer_Overflow__char_fscanf_add_12.c":118:9)
#loc160 = loc("CWE190_Integer_Overflow__char_fscanf_add_12.c":123:16)
#loc161 = loc("CWE190_Integer_Overflow__char_fscanf_add_12.c":123:9)
#loc162 = loc("CWE190_Integer_Overflow__char_fscanf_add_12.c":125:5)
#loc163 = loc("CWE190_Integer_Overflow__char_fscanf_add_12.c":140:5)
#loc164 = loc("CWE190_Integer_Overflow__char_fscanf_add_12.c":125:8)
#loc165 = loc("CWE190_Integer_Overflow__char_fscanf_add_12.c":125:33)
#loc166 = loc("CWE190_Integer_Overflow__char_fscanf_add_12.c":126:5)
#loc167 = loc("CWE190_Integer_Overflow__char_fscanf_add_12.c":132:5)
#loc168 = loc("CWE190_Integer_Overflow__char_fscanf_add_12.c":134:5)
#loc169 = loc("CWE190_Integer_Overflow__char_fscanf_add_12.c":127:9)
#loc170 = loc("CWE190_Integer_Overflow__char_fscanf_add_12.c":131:9)
#loc171 = loc("CWE190_Integer_Overflow__char_fscanf_add_12.c":129:13)
#loc172 = loc("CWE190_Integer_Overflow__char_fscanf_add_12.c":129:34)
#loc173 = loc("CWE190_Integer_Overflow__char_fscanf_add_12.c":129:27)
#loc174 = loc("CWE190_Integer_Overflow__char_fscanf_add_12.c":130:30)
#loc175 = loc("CWE190_Integer_Overflow__char_fscanf_add_12.c":130:13)
#loc176 = loc("CWE190_Integer_Overflow__char_fscanf_add_12.c":135:9)
#loc177 = loc("CWE190_Integer_Overflow__char_fscanf_add_12.c":139:9)
#loc178 = loc("CWE190_Integer_Overflow__char_fscanf_add_12.c":137:13)
#loc179 = loc("CWE190_Integer_Overflow__char_fscanf_add_12.c":137:34)
#loc180 = loc("CWE190_Integer_Overflow__char_fscanf_add_12.c":137:27)
#loc181 = loc("CWE190_Integer_Overflow__char_fscanf_add_12.c":138:30)
#loc182 = loc("CWE190_Integer_Overflow__char_fscanf_add_12.c":138:13)
#loc183 = loc(fused[#loc1, #loc2])
#loc184 = loc(fused[#loc3, #loc4])
#loc185 = loc(fused[#loc5, #loc6])
#loc186 = loc(fused[#loc8, #loc9])
#loc187 = loc(fused[#loc10, #loc11])
#loc188 = loc(fused[#loc13, #loc14])
#loc189 = loc(fused[#loc15, #loc16])
#loc190 = loc(fused[#loc18, #loc17])
#loc191 = loc(fused[#loc19, #loc20])
#loc192 = loc(fused[#loc21, #loc22])
#loc193 = loc(fused[#loc23, #loc24, #loc25, #loc20])
#loc194 = loc(fused[#loc29, #loc28])
#loc195 = loc(fused[#loc30, #loc31])
#loc196 = loc(fused[#loc32, #loc33])
#loc197 = loc(fused[#loc34, #loc35, #loc36, #loc31])
#loc198 = loc(fused[#loc37, #loc38])
#loc199 = loc(fused[#loc39, #loc40])
#loc200 = loc(fused[#loc44, #loc45])
#loc201 = loc(fused[#loc46, #loc47])
#loc202 = loc(fused[#loc48, #loc49, #loc50, #loc45])
#loc203 = loc(fused[#loc51, #loc52])
#loc204 = loc(fused[#loc57, #loc58])
#loc205 = loc(fused[#loc59, #loc60])
#loc206 = loc(fused[#loc61, #loc62])
#loc207 = loc(fused[#loc63, #loc64])
#loc208 = loc(fused[#loc65, #loc66])
#loc209 = loc(fused[#loc71, #loc72])
#loc212 = loc(fused[#loc82, #loc83])
#loc213 = loc(fused[#loc86, #loc87])
#loc214 = loc(fused[#loc90, #loc89])
#loc215 = loc(fused[#loc91, #loc92])
#loc216 = loc(fused[#loc93, #loc94])
#loc217 = loc(fused[#loc96, #loc95])
#loc218 = loc(fused[#loc97, #loc98])
#loc219 = loc(fused[#loc99, #loc100])
#loc220 = loc(fused[#loc101, #loc102, #loc103, #loc98])
#loc221 = loc(fused[#loc110, #loc111])
#loc222 = loc(fused[#loc112, #loc113])
#loc223 = loc(fused[#loc114, #loc115, #loc116, #loc111])
#loc224 = loc(fused[#loc117, #loc118])
#loc225 = loc(fused[#loc119, #loc120])
#loc226 = loc(fused[#loc121, #loc122, #loc123, #loc118])
#loc227 = loc(fused[#loc124, #loc125])
#loc228 = loc(fused[#loc131, #loc132])
#loc229 = loc(fused[#loc133, #loc134])
#loc230 = loc(fused[#loc135, #loc136, #loc137, #loc132])
#loc231 = loc(fused[#loc138, #loc139])
#loc232 = loc(fused[#loc145, #loc146])
#loc233 = loc(fused[#loc147, #loc148])
#loc234 = loc(fused[#loc150, #loc149])
#loc235 = loc(fused[#loc151, #loc152])
#loc236 = loc(fused[#loc153, #loc154])
#loc237 = loc(fused[#loc155, #loc156, #loc157, #loc152])
#loc238 = loc(fused[#loc159, #loc158])
#loc239 = loc(fused[#loc161, #loc160])
#loc240 = loc(fused[#loc162, #loc163])
#loc241 = loc(fused[#loc164, #loc165])
#loc242 = loc(fused[#loc166, #loc167, #loc168, #loc163])
#loc243 = loc(fused[#loc169, #loc170])
#loc244 = loc(fused[#loc171, #loc172])
#loc245 = loc(fused[#loc176, #loc177])
#loc246 = loc(fused[#loc178, #loc179])
