!s32i = !cir.int<s, 32>
!u64i = !cir.int<u, 64>
!u8i = !cir.int<u, 8>
!void = !cir.void
#fn_attr = #cir<extra({inline = #cir.inline<no>, nothrow = #cir.nothrow, optnone = #cir.optnone})>
#loc5 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE805_struct_alloca_loop_44.c":21:21)
#loc6 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE805_struct_alloca_loop_44.c":21:37)
#loc77 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE805_struct_alloca_loop_44.c":65:25)
#loc78 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE805_struct_alloca_loop_44.c":65:41)
!ty__twoIntsStruct = !cir.struct<struct "_twoIntsStruct" {!s32i, !s32i} #cir.record.decl.ast>
#loc143 = loc(fused[#loc5, #loc6])
#loc171 = loc(fused[#loc77, #loc78])
module @"/home/ladisgin/git_proj/test_projects/juliet-c/testcases/CWE121_Stack_Based_Buffer_Overflow/s04/CWE121_Stack_Based_Buffer_Overflow__CWE805_struct_alloca_loop_44.c" attributes {cir.lang = #cir.lang<c>, cir.sob = #cir.signed_overflow_behavior<undefined>, cir.triple = "x86_64-unknown-linux-gnu", dlti.dl_spec = #dlti.dl_spec<#dlti.dl_entry<f64, dense<64> : vector<2xi64>>, #dlti.dl_entry<!llvm.ptr<270>, dense<32> : vector<4xi64>>, #dlti.dl_entry<f16, dense<16> : vector<2xi64>>, #dlti.dl_entry<f128, dense<128> : vector<2xi64>>, #dlti.dl_entry<!llvm.ptr<271>, dense<32> : vector<4xi64>>, #dlti.dl_entry<i8, dense<8> : vector<2xi64>>, #dlti.dl_entry<i16, dense<16> : vector<2xi64>>, #dlti.dl_entry<i32, dense<32> : vector<2xi64>>, #dlti.dl_entry<f80, dense<128> : vector<2xi64>>, #dlti.dl_entry<!llvm.ptr, dense<64> : vector<4xi64>>, #dlti.dl_entry<i1, dense<8> : vector<2xi64>>, #dlti.dl_entry<i64, dense<64> : vector<2xi64>>, #dlti.dl_entry<!llvm.ptr<272>, dense<64> : vector<4xi64>>, #dlti.dl_entry<i128, dense<128> : vector<2xi64>>, #dlti.dl_entry<"dlti.endianness", "little">, #dlti.dl_entry<"dlti.stack_alignment", 128 : i64>>, llvm.data_layout = "e-m:e-p270:32:32-p271:32:32-p272:64:64-i64:64-i128:128-f80:128-n8:16:32:64-S128"} {
  cir.func private  @printStructLine(!cir.ptr<!ty__twoIntsStruct>) loc(#loc141)
  cir.func internal private  @badSink(%arg0: !cir.ptr<!ty__twoIntsStruct> loc(fused[#loc5, #loc6])) extra(#fn_attr) {
    %0 = cir.alloca !cir.ptr<!ty__twoIntsStruct>, !cir.ptr<!cir.ptr<!ty__twoIntsStruct>>, ["data", init] {alignment = 8 : i64} loc(#loc143)
    cir.store %arg0, %0 : !cir.ptr<!ty__twoIntsStruct>, !cir.ptr<!cir.ptr<!ty__twoIntsStruct>> loc(#loc7)
    cir.scope {
      %1 = cir.alloca !cir.array<!ty__twoIntsStruct x 100>, !cir.ptr<!cir.array<!ty__twoIntsStruct x 100>>, ["source"] {alignment = 16 : i64} loc(#loc145)
      cir.scope {
        %2 = cir.alloca !u64i, !cir.ptr<!u64i>, ["i"] {alignment = 8 : i64} loc(#loc147)
        cir.scope {
          %3 = cir.const #cir.int<0> : !s32i loc(#loc18)
          %4 = cir.cast(integral, %3 : !s32i), !u64i loc(#loc18)
          cir.store %4, %2 : !u64i, !cir.ptr<!u64i> loc(#loc149)
          cir.for : cond {
            %5 = cir.load %2 : !cir.ptr<!u64i>, !u64i loc(#loc20)
            %6 = cir.const #cir.int<100> : !s32i loc(#loc21)
            %7 = cir.cast(integral, %6 : !s32i), !u64i loc(#loc21)
            %8 = cir.cmp(lt, %5, %7) : !u64i, !s32i loc(#loc150)
            %9 = cir.cast(int_to_bool, %8 : !s32i), !cir.bool loc(#loc22)
            cir.condition(%9) loc(#loc22)
          } body {
            cir.scope {
              %5 = cir.const #cir.int<0> : !s32i loc(#loc24)
              %6 = cir.load %2 : !cir.ptr<!u64i>, !u64i loc(#loc25)
              %7 = cir.cast(array_to_ptrdecay, %1 : !cir.ptr<!cir.array<!ty__twoIntsStruct x 100>>), !cir.ptr<!ty__twoIntsStruct> loc(#loc26)
              %8 = cir.ptr_stride(%7 : !cir.ptr<!ty__twoIntsStruct>, %6 : !u64i), !cir.ptr<!ty__twoIntsStruct> loc(#loc26)
              %9 = cir.get_member %8[0] {name = "intOne"} : !cir.ptr<!ty__twoIntsStruct> -> !cir.ptr<!s32i> loc(#loc27)
              cir.store %5, %9 : !s32i, !cir.ptr<!s32i> loc(#loc152)
              %10 = cir.const #cir.int<0> : !s32i loc(#loc28)
              %11 = cir.load %2 : !cir.ptr<!u64i>, !u64i loc(#loc29)
              %12 = cir.cast(array_to_ptrdecay, %1 : !cir.ptr<!cir.array<!ty__twoIntsStruct x 100>>), !cir.ptr<!ty__twoIntsStruct> loc(#loc30)
              %13 = cir.ptr_stride(%12 : !cir.ptr<!ty__twoIntsStruct>, %11 : !u64i), !cir.ptr<!ty__twoIntsStruct> loc(#loc30)
              %14 = cir.get_member %13[1] {name = "intTwo"} : !cir.ptr<!ty__twoIntsStruct> -> !cir.ptr<!s32i> loc(#loc31)
              cir.store %10, %14 : !s32i, !cir.ptr<!s32i> loc(#loc153)
            } loc(#loc151)
            cir.yield loc(#loc17)
          } step {
            %5 = cir.load %2 : !cir.ptr<!u64i>, !u64i loc(#loc32)
            %6 = cir.unary(inc, %5) : !u64i, !u64i loc(#loc33)
            cir.store %6, %2 : !u64i, !cir.ptr<!u64i> loc(#loc154)
            cir.yield loc(#loc148)
          } loc(#loc148)
        } loc(#loc148)
      } loc(#loc146)
      cir.scope {
        %2 = cir.alloca !u64i, !cir.ptr<!u64i>, ["i"] {alignment = 8 : i64} loc(#loc156)
        cir.scope {
          %6 = cir.const #cir.int<0> : !s32i loc(#loc40)
          %7 = cir.cast(integral, %6 : !s32i), !u64i loc(#loc40)
          cir.store %7, %2 : !u64i, !cir.ptr<!u64i> loc(#loc158)
          cir.for : cond {
            %8 = cir.load %2 : !cir.ptr<!u64i>, !u64i loc(#loc42)
            %9 = cir.const #cir.int<100> : !s32i loc(#loc43)
            %10 = cir.cast(integral, %9 : !s32i), !u64i loc(#loc43)
            %11 = cir.cmp(lt, %8, %10) : !u64i, !s32i loc(#loc159)
            %12 = cir.cast(int_to_bool, %11 : !s32i), !cir.bool loc(#loc44)
            cir.condition(%12) loc(#loc44)
          } body {
            cir.scope {
              %8 = cir.load %0 : !cir.ptr<!cir.ptr<!ty__twoIntsStruct>>, !cir.ptr<!ty__twoIntsStruct> loc(#loc46)
              %9 = cir.load %2 : !cir.ptr<!u64i>, !u64i loc(#loc47)
              %10 = cir.ptr_stride(%8 : !cir.ptr<!ty__twoIntsStruct>, %9 : !u64i), !cir.ptr<!ty__twoIntsStruct> loc(#loc48)
              %11 = cir.load %2 : !cir.ptr<!u64i>, !u64i loc(#loc49)
              %12 = cir.cast(array_to_ptrdecay, %1 : !cir.ptr<!cir.array<!ty__twoIntsStruct x 100>>), !cir.ptr<!ty__twoIntsStruct> loc(#loc50)
              %13 = cir.ptr_stride(%12 : !cir.ptr<!ty__twoIntsStruct>, %11 : !u64i), !cir.ptr<!ty__twoIntsStruct> loc(#loc50)
              cir.copy %13 to %10 : !cir.ptr<!ty__twoIntsStruct> loc(#loc48)
            } loc(#loc160)
            cir.yield loc(#loc39)
          } step {
            %8 = cir.load %2 : !cir.ptr<!u64i>, !u64i loc(#loc51)
            %9 = cir.unary(inc, %8) : !u64i, !u64i loc(#loc52)
            cir.store %9, %2 : !u64i, !cir.ptr<!u64i> loc(#loc161)
            cir.yield loc(#loc157)
          } loc(#loc157)
        } loc(#loc157)
        %3 = cir.load %0 : !cir.ptr<!cir.ptr<!ty__twoIntsStruct>>, !cir.ptr<!ty__twoIntsStruct> loc(#loc53)
        %4 = cir.const #cir.int<0> : !s32i loc(#loc54)
        %5 = cir.ptr_stride(%3 : !cir.ptr<!ty__twoIntsStruct>, %4 : !s32i), !cir.ptr<!ty__twoIntsStruct> loc(#loc55)
        cir.call @printStructLine(%5) : (!cir.ptr<!ty__twoIntsStruct>) -> () loc(#loc56)
      } loc(#loc155)
    } loc(#loc144)
    cir.return loc(#loc4)
  } loc(#loc142)
  cir.func no_proto  @CWE121_Stack_Based_Buffer_Overflow__CWE805_struct_alloca_loop_44_bad() extra(#fn_attr) {
    %0 = cir.alloca !cir.ptr<!ty__twoIntsStruct>, !cir.ptr<!cir.ptr<!ty__twoIntsStruct>>, ["data"] {alignment = 8 : i64} loc(#loc163)
    %1 = cir.alloca !cir.ptr<!cir.func<!void (!cir.ptr<!ty__twoIntsStruct>)>>, !cir.ptr<!cir.ptr<!cir.func<!void (!cir.ptr<!ty__twoIntsStruct>)>>>, ["funcPtr", init] {alignment = 8 : i64} loc(#loc164)
    %2 = cir.alloca !cir.ptr<!ty__twoIntsStruct>, !cir.ptr<!cir.ptr<!ty__twoIntsStruct>>, ["dataBadBuffer", init] {alignment = 8 : i64} loc(#loc165)
    %3 = cir.get_global @badSink : !cir.ptr<!cir.func<!void (!cir.ptr<!ty__twoIntsStruct>)>> loc(#loc62)
    cir.store %3, %1 : !cir.ptr<!cir.func<!void (!cir.ptr<!ty__twoIntsStruct>)>>, !cir.ptr<!cir.ptr<!cir.func<!void (!cir.ptr<!ty__twoIntsStruct>)>>> loc(#loc164)
    %4 = cir.const #cir.int<50> : !s32i loc(#loc64)
    %5 = cir.cast(integral, %4 : !s32i), !u64i loc(#loc64)
    %6 = cir.const #cir.int<8> : !u64i loc(#loc64)
    %7 = cir.binop(mul, %5, %6) : !u64i loc(#loc64)
    %8 = cir.alloca !u8i, !cir.ptr<!u8i>, %7 : !u64i, ["bi_alloca"] {alignment = 16 : i64} loc(#loc64)
    %9 = cir.alloca !cir.ptr<!ty__twoIntsStruct>, !cir.ptr<!cir.ptr<!ty__twoIntsStruct>>, ["dataGoodBuffer", init] {alignment = 8 : i64} loc(#loc166)
    %10 = cir.cast(bitcast, %8 : !cir.ptr<!u8i>), !cir.ptr<!void> loc(#loc64)
    %11 = cir.cast(bitcast, %10 : !cir.ptr<!void>), !cir.ptr<!ty__twoIntsStruct> loc(#loc64)
    cir.store %11, %2 : !cir.ptr<!ty__twoIntsStruct>, !cir.ptr<!cir.ptr<!ty__twoIntsStruct>> loc(#loc165)
    %12 = cir.const #cir.int<100> : !s32i loc(#loc66)
    %13 = cir.cast(integral, %12 : !s32i), !u64i loc(#loc66)
    %14 = cir.const #cir.int<8> : !u64i loc(#loc66)
    %15 = cir.binop(mul, %13, %14) : !u64i loc(#loc66)
    %16 = cir.alloca !u8i, !cir.ptr<!u8i>, %15 : !u64i, ["bi_alloca"] {alignment = 16 : i64} loc(#loc66)
    %17 = cir.cast(bitcast, %16 : !cir.ptr<!u8i>), !cir.ptr<!void> loc(#loc66)
    %18 = cir.cast(bitcast, %17 : !cir.ptr<!void>), !cir.ptr<!ty__twoIntsStruct> loc(#loc66)
    cir.store %18, %9 : !cir.ptr<!ty__twoIntsStruct>, !cir.ptr<!cir.ptr<!ty__twoIntsStruct>> loc(#loc166)
    %19 = cir.load %2 : !cir.ptr<!cir.ptr<!ty__twoIntsStruct>>, !cir.ptr<!ty__twoIntsStruct> loc(#loc67)
    cir.store %19, %0 : !cir.ptr<!ty__twoIntsStruct>, !cir.ptr<!cir.ptr<!ty__twoIntsStruct>> loc(#loc167)
    %20 = cir.load %1 : !cir.ptr<!cir.ptr<!cir.func<!void (!cir.ptr<!ty__twoIntsStruct>)>>>, !cir.ptr<!cir.func<!void (!cir.ptr<!ty__twoIntsStruct>)>> loc(#loc69)
    %21 = cir.load %0 : !cir.ptr<!cir.ptr<!ty__twoIntsStruct>>, !cir.ptr<!ty__twoIntsStruct> loc(#loc70)
    cir.call %20(%21) : (!cir.ptr<!cir.func<!void (!cir.ptr<!ty__twoIntsStruct>)>>, !cir.ptr<!ty__twoIntsStruct>) -> () loc(#loc69)
    cir.return loc(#loc58)
  } loc(#loc162)
  cir.func no_proto  @CWE121_Stack_Based_Buffer_Overflow__CWE805_struct_alloca_loop_44_good() extra(#fn_attr) {
    %0 = cir.get_global @goodG2B : !cir.ptr<!cir.func<!void ()>> loc(#loc169)
    cir.call %0() : (!cir.ptr<!cir.func<!void ()>>) -> () loc(#loc73)
    cir.return loc(#loc72)
  } loc(#loc168)
  cir.func internal private  @goodG2BSink(%arg0: !cir.ptr<!ty__twoIntsStruct> loc(fused[#loc77, #loc78])) extra(#fn_attr) {
    %0 = cir.alloca !cir.ptr<!ty__twoIntsStruct>, !cir.ptr<!cir.ptr<!ty__twoIntsStruct>>, ["data", init] {alignment = 8 : i64} loc(#loc171)
    cir.store %arg0, %0 : !cir.ptr<!ty__twoIntsStruct>, !cir.ptr<!cir.ptr<!ty__twoIntsStruct>> loc(#loc79)
    cir.scope {
      %1 = cir.alloca !cir.array<!ty__twoIntsStruct x 100>, !cir.ptr<!cir.array<!ty__twoIntsStruct x 100>>, ["source"] {alignment = 16 : i64} loc(#loc173)
      cir.scope {
        %2 = cir.alloca !u64i, !cir.ptr<!u64i>, ["i"] {alignment = 8 : i64} loc(#loc175)
        cir.scope {
          %3 = cir.const #cir.int<0> : !s32i loc(#loc90)
          %4 = cir.cast(integral, %3 : !s32i), !u64i loc(#loc90)
          cir.store %4, %2 : !u64i, !cir.ptr<!u64i> loc(#loc177)
          cir.for : cond {
            %5 = cir.load %2 : !cir.ptr<!u64i>, !u64i loc(#loc92)
            %6 = cir.const #cir.int<100> : !s32i loc(#loc93)
            %7 = cir.cast(integral, %6 : !s32i), !u64i loc(#loc93)
            %8 = cir.cmp(lt, %5, %7) : !u64i, !s32i loc(#loc178)
            %9 = cir.cast(int_to_bool, %8 : !s32i), !cir.bool loc(#loc94)
            cir.condition(%9) loc(#loc94)
          } body {
            cir.scope {
              %5 = cir.const #cir.int<0> : !s32i loc(#loc96)
              %6 = cir.load %2 : !cir.ptr<!u64i>, !u64i loc(#loc97)
              %7 = cir.cast(array_to_ptrdecay, %1 : !cir.ptr<!cir.array<!ty__twoIntsStruct x 100>>), !cir.ptr<!ty__twoIntsStruct> loc(#loc98)
              %8 = cir.ptr_stride(%7 : !cir.ptr<!ty__twoIntsStruct>, %6 : !u64i), !cir.ptr<!ty__twoIntsStruct> loc(#loc98)
              %9 = cir.get_member %8[0] {name = "intOne"} : !cir.ptr<!ty__twoIntsStruct> -> !cir.ptr<!s32i> loc(#loc27)
              cir.store %5, %9 : !s32i, !cir.ptr<!s32i> loc(#loc180)
              %10 = cir.const #cir.int<0> : !s32i loc(#loc99)
              %11 = cir.load %2 : !cir.ptr<!u64i>, !u64i loc(#loc100)
              %12 = cir.cast(array_to_ptrdecay, %1 : !cir.ptr<!cir.array<!ty__twoIntsStruct x 100>>), !cir.ptr<!ty__twoIntsStruct> loc(#loc101)
              %13 = cir.ptr_stride(%12 : !cir.ptr<!ty__twoIntsStruct>, %11 : !u64i), !cir.ptr<!ty__twoIntsStruct> loc(#loc101)
              %14 = cir.get_member %13[1] {name = "intTwo"} : !cir.ptr<!ty__twoIntsStruct> -> !cir.ptr<!s32i> loc(#loc31)
              cir.store %10, %14 : !s32i, !cir.ptr<!s32i> loc(#loc181)
            } loc(#loc179)
            cir.yield loc(#loc89)
          } step {
            %5 = cir.load %2 : !cir.ptr<!u64i>, !u64i loc(#loc102)
            %6 = cir.unary(inc, %5) : !u64i, !u64i loc(#loc103)
            cir.store %6, %2 : !u64i, !cir.ptr<!u64i> loc(#loc182)
            cir.yield loc(#loc176)
          } loc(#loc176)
        } loc(#loc176)
      } loc(#loc174)
      cir.scope {
        %2 = cir.alloca !u64i, !cir.ptr<!u64i>, ["i"] {alignment = 8 : i64} loc(#loc184)
        cir.scope {
          %6 = cir.const #cir.int<0> : !s32i loc(#loc110)
          %7 = cir.cast(integral, %6 : !s32i), !u64i loc(#loc110)
          cir.store %7, %2 : !u64i, !cir.ptr<!u64i> loc(#loc186)
          cir.for : cond {
            %8 = cir.load %2 : !cir.ptr<!u64i>, !u64i loc(#loc112)
            %9 = cir.const #cir.int<100> : !s32i loc(#loc113)
            %10 = cir.cast(integral, %9 : !s32i), !u64i loc(#loc113)
            %11 = cir.cmp(lt, %8, %10) : !u64i, !s32i loc(#loc187)
            %12 = cir.cast(int_to_bool, %11 : !s32i), !cir.bool loc(#loc114)
            cir.condition(%12) loc(#loc114)
          } body {
            cir.scope {
              %8 = cir.load %0 : !cir.ptr<!cir.ptr<!ty__twoIntsStruct>>, !cir.ptr<!ty__twoIntsStruct> loc(#loc116)
              %9 = cir.load %2 : !cir.ptr<!u64i>, !u64i loc(#loc117)
              %10 = cir.ptr_stride(%8 : !cir.ptr<!ty__twoIntsStruct>, %9 : !u64i), !cir.ptr<!ty__twoIntsStruct> loc(#loc118)
              %11 = cir.load %2 : !cir.ptr<!u64i>, !u64i loc(#loc119)
              %12 = cir.cast(array_to_ptrdecay, %1 : !cir.ptr<!cir.array<!ty__twoIntsStruct x 100>>), !cir.ptr<!ty__twoIntsStruct> loc(#loc120)
              %13 = cir.ptr_stride(%12 : !cir.ptr<!ty__twoIntsStruct>, %11 : !u64i), !cir.ptr<!ty__twoIntsStruct> loc(#loc120)
              cir.copy %13 to %10 : !cir.ptr<!ty__twoIntsStruct> loc(#loc118)
            } loc(#loc188)
            cir.yield loc(#loc109)
          } step {
            %8 = cir.load %2 : !cir.ptr<!u64i>, !u64i loc(#loc121)
            %9 = cir.unary(inc, %8) : !u64i, !u64i loc(#loc122)
            cir.store %9, %2 : !u64i, !cir.ptr<!u64i> loc(#loc189)
            cir.yield loc(#loc185)
          } loc(#loc185)
        } loc(#loc185)
        %3 = cir.load %0 : !cir.ptr<!cir.ptr<!ty__twoIntsStruct>>, !cir.ptr<!ty__twoIntsStruct> loc(#loc123)
        %4 = cir.const #cir.int<0> : !s32i loc(#loc124)
        %5 = cir.ptr_stride(%3 : !cir.ptr<!ty__twoIntsStruct>, %4 : !s32i), !cir.ptr<!ty__twoIntsStruct> loc(#loc125)
        cir.call @printStructLine(%5) : (!cir.ptr<!ty__twoIntsStruct>) -> () loc(#loc126)
      } loc(#loc183)
    } loc(#loc172)
    cir.return loc(#loc76)
  } loc(#loc170)
  cir.func no_proto internal private  @goodG2B() extra(#fn_attr) {
    %0 = cir.alloca !cir.ptr<!ty__twoIntsStruct>, !cir.ptr<!cir.ptr<!ty__twoIntsStruct>>, ["data"] {alignment = 8 : i64} loc(#loc191)
    %1 = cir.alloca !cir.ptr<!cir.func<!void (!cir.ptr<!ty__twoIntsStruct>)>>, !cir.ptr<!cir.ptr<!cir.func<!void (!cir.ptr<!ty__twoIntsStruct>)>>>, ["funcPtr", init] {alignment = 8 : i64} loc(#loc192)
    %2 = cir.alloca !cir.ptr<!ty__twoIntsStruct>, !cir.ptr<!cir.ptr<!ty__twoIntsStruct>>, ["dataBadBuffer", init] {alignment = 8 : i64} loc(#loc193)
    %3 = cir.get_global @goodG2BSink : !cir.ptr<!cir.func<!void (!cir.ptr<!ty__twoIntsStruct>)>> loc(#loc132)
    cir.store %3, %1 : !cir.ptr<!cir.func<!void (!cir.ptr<!ty__twoIntsStruct>)>>, !cir.ptr<!cir.ptr<!cir.func<!void (!cir.ptr<!ty__twoIntsStruct>)>>> loc(#loc192)
    %4 = cir.const #cir.int<50> : !s32i loc(#loc134)
    %5 = cir.cast(integral, %4 : !s32i), !u64i loc(#loc134)
    %6 = cir.const #cir.int<8> : !u64i loc(#loc134)
    %7 = cir.binop(mul, %5, %6) : !u64i loc(#loc134)
    %8 = cir.alloca !u8i, !cir.ptr<!u8i>, %7 : !u64i, ["bi_alloca"] {alignment = 16 : i64} loc(#loc134)
    %9 = cir.alloca !cir.ptr<!ty__twoIntsStruct>, !cir.ptr<!cir.ptr<!ty__twoIntsStruct>>, ["dataGoodBuffer", init] {alignment = 8 : i64} loc(#loc194)
    %10 = cir.cast(bitcast, %8 : !cir.ptr<!u8i>), !cir.ptr<!void> loc(#loc134)
    %11 = cir.cast(bitcast, %10 : !cir.ptr<!void>), !cir.ptr<!ty__twoIntsStruct> loc(#loc134)
    cir.store %11, %2 : !cir.ptr<!ty__twoIntsStruct>, !cir.ptr<!cir.ptr<!ty__twoIntsStruct>> loc(#loc193)
    %12 = cir.const #cir.int<100> : !s32i loc(#loc136)
    %13 = cir.cast(integral, %12 : !s32i), !u64i loc(#loc136)
    %14 = cir.const #cir.int<8> : !u64i loc(#loc136)
    %15 = cir.binop(mul, %13, %14) : !u64i loc(#loc136)
    %16 = cir.alloca !u8i, !cir.ptr<!u8i>, %15 : !u64i, ["bi_alloca"] {alignment = 16 : i64} loc(#loc136)
    %17 = cir.cast(bitcast, %16 : !cir.ptr<!u8i>), !cir.ptr<!void> loc(#loc136)
    %18 = cir.cast(bitcast, %17 : !cir.ptr<!void>), !cir.ptr<!ty__twoIntsStruct> loc(#loc136)
    cir.store %18, %9 : !cir.ptr<!ty__twoIntsStruct>, !cir.ptr<!cir.ptr<!ty__twoIntsStruct>> loc(#loc194)
    %19 = cir.load %9 : !cir.ptr<!cir.ptr<!ty__twoIntsStruct>>, !cir.ptr<!ty__twoIntsStruct> loc(#loc137)
    cir.store %19, %0 : !cir.ptr<!ty__twoIntsStruct>, !cir.ptr<!cir.ptr<!ty__twoIntsStruct>> loc(#loc195)
    %20 = cir.load %1 : !cir.ptr<!cir.ptr<!cir.func<!void (!cir.ptr<!ty__twoIntsStruct>)>>>, !cir.ptr<!cir.func<!void (!cir.ptr<!ty__twoIntsStruct>)>> loc(#loc139)
    %21 = cir.load %0 : !cir.ptr<!cir.ptr<!ty__twoIntsStruct>>, !cir.ptr<!ty__twoIntsStruct> loc(#loc140)
    cir.call %20(%21) : (!cir.ptr<!cir.func<!void (!cir.ptr<!ty__twoIntsStruct>)>>, !cir.ptr<!ty__twoIntsStruct>) -> () loc(#loc139)
    cir.return loc(#loc128)
  } loc(#loc190)
} loc(#loc)
#loc = loc("/home/ladisgin/git_proj/test_projects/juliet-c/testcases/CWE121_Stack_Based_Buffer_Overflow/s04/CWE121_Stack_Based_Buffer_Overflow__CWE805_struct_alloca_loop_44.c":0:0)
#loc1 = loc("../../../testcasesupport/std_testcase_io.h":40:1)
#loc2 = loc("../../../testcasesupport/std_testcase_io.h":40:63)
#loc3 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE805_struct_alloca_loop_44.c":21:1)
#loc4 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE805_struct_alloca_loop_44.c":44:1)
#loc7 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE805_struct_alloca_loop_44.c":22:1)
#loc8 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE805_struct_alloca_loop_44.c":23:5)
#loc9 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE805_struct_alloca_loop_44.c":43:5)
#loc10 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE805_struct_alloca_loop_44.c":24:9)
#loc11 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE805_struct_alloca_loop_44.c":24:33)
#loc12 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE805_struct_alloca_loop_44.c":25:9)
#loc13 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE805_struct_alloca_loop_44.c":33:9)
#loc14 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE805_struct_alloca_loop_44.c":26:13)
#loc15 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE805_struct_alloca_loop_44.c":26:20)
#loc16 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE805_struct_alloca_loop_44.c":28:13)
#loc17 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE805_struct_alloca_loop_44.c":32:13)
#loc18 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE805_struct_alloca_loop_44.c":28:22)
#loc19 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE805_struct_alloca_loop_44.c":28:18)
#loc20 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE805_struct_alloca_loop_44.c":28:25)
#loc21 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE805_struct_alloca_loop_44.c":28:29)
#loc22 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE805_struct_alloca_loop_44.c":28:27)
#loc23 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE805_struct_alloca_loop_44.c":29:13)
#loc24 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE805_struct_alloca_loop_44.c":30:36)
#loc25 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE805_struct_alloca_loop_44.c":30:24)
#loc26 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE805_struct_alloca_loop_44.c":30:17)
#loc27 = loc("../../../testcasesupport/std_testcase.h":98:9)
#loc28 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE805_struct_alloca_loop_44.c":31:36)
#loc29 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE805_struct_alloca_loop_44.c":31:24)
#loc30 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE805_struct_alloca_loop_44.c":31:17)
#loc31 = loc("../../../testcasesupport/std_testcase.h":99:9)
#loc32 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE805_struct_alloca_loop_44.c":28:35)
#loc33 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE805_struct_alloca_loop_44.c":28:34)
#loc34 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE805_struct_alloca_loop_44.c":34:9)
#loc35 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE805_struct_alloca_loop_44.c":42:9)
#loc36 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE805_struct_alloca_loop_44.c":35:13)
#loc37 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE805_struct_alloca_loop_44.c":35:20)
#loc38 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE805_struct_alloca_loop_44.c":37:13)
#loc39 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE805_struct_alloca_loop_44.c":40:13)
#loc40 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE805_struct_alloca_loop_44.c":37:22)
#loc41 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE805_struct_alloca_loop_44.c":37:18)
#loc42 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE805_struct_alloca_loop_44.c":37:25)
#loc43 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE805_struct_alloca_loop_44.c":37:29)
#loc44 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE805_struct_alloca_loop_44.c":37:27)
#loc45 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE805_struct_alloca_loop_44.c":38:13)
#loc46 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE805_struct_alloca_loop_44.c":39:17)
#loc47 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE805_struct_alloca_loop_44.c":39:22)
#loc48 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE805_struct_alloca_loop_44.c":39:23)
#loc49 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE805_struct_alloca_loop_44.c":39:34)
#loc50 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE805_struct_alloca_loop_44.c":39:27)
#loc51 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE805_struct_alloca_loop_44.c":37:35)
#loc52 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE805_struct_alloca_loop_44.c":37:34)
#loc53 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE805_struct_alloca_loop_44.c":41:30)
#loc54 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE805_struct_alloca_loop_44.c":41:35)
#loc55 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE805_struct_alloca_loop_44.c":41:36)
#loc56 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE805_struct_alloca_loop_44.c":41:13)
#loc57 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE805_struct_alloca_loop_44.c":46:1)
#loc58 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE805_struct_alloca_loop_44.c":58:1)
#loc59 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE805_struct_alloca_loop_44.c":48:5)
#loc60 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE805_struct_alloca_loop_44.c":48:21)
#loc61 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE805_struct_alloca_loop_44.c":50:5)
#loc62 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE805_struct_alloca_loop_44.c":50:41)
#loc63 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE805_struct_alloca_loop_44.c":51:5)
#loc64 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE805_struct_alloca_loop_44.c":51:54)
#loc65 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE805_struct_alloca_loop_44.c":52:5)
#loc66 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE805_struct_alloca_loop_44.c":52:55)
#loc67 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE805_struct_alloca_loop_44.c":55:12)
#loc68 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE805_struct_alloca_loop_44.c":55:5)
#loc69 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE805_struct_alloca_loop_44.c":57:5)
#loc70 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE805_struct_alloca_loop_44.c":57:13)
#loc71 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE805_struct_alloca_loop_44.c":101:1)
#loc72 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE805_struct_alloca_loop_44.c":104:1)
#loc73 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE805_struct_alloca_loop_44.c":103:5)
#loc74 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE805_struct_alloca_loop_44.c":103:13)
#loc75 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE805_struct_alloca_loop_44.c":65:1)
#loc76 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE805_struct_alloca_loop_44.c":88:1)
#loc79 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE805_struct_alloca_loop_44.c":66:1)
#loc80 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE805_struct_alloca_loop_44.c":67:5)
#loc81 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE805_struct_alloca_loop_44.c":87:5)
#loc82 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE805_struct_alloca_loop_44.c":68:9)
#loc83 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE805_struct_alloca_loop_44.c":68:33)
#loc84 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE805_struct_alloca_loop_44.c":69:9)
#loc85 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE805_struct_alloca_loop_44.c":77:9)
#loc86 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE805_struct_alloca_loop_44.c":70:13)
#loc87 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE805_struct_alloca_loop_44.c":70:20)
#loc88 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE805_struct_alloca_loop_44.c":72:13)
#loc89 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE805_struct_alloca_loop_44.c":76:13)
#loc90 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE805_struct_alloca_loop_44.c":72:22)
#loc91 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE805_struct_alloca_loop_44.c":72:18)
#loc92 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE805_struct_alloca_loop_44.c":72:25)
#loc93 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE805_struct_alloca_loop_44.c":72:29)
#loc94 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE805_struct_alloca_loop_44.c":72:27)
#loc95 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE805_struct_alloca_loop_44.c":73:13)
#loc96 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE805_struct_alloca_loop_44.c":74:36)
#loc97 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE805_struct_alloca_loop_44.c":74:24)
#loc98 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE805_struct_alloca_loop_44.c":74:17)
#loc99 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE805_struct_alloca_loop_44.c":75:36)
#loc100 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE805_struct_alloca_loop_44.c":75:24)
#loc101 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE805_struct_alloca_loop_44.c":75:17)
#loc102 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE805_struct_alloca_loop_44.c":72:35)
#loc103 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE805_struct_alloca_loop_44.c":72:34)
#loc104 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE805_struct_alloca_loop_44.c":78:9)
#loc105 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE805_struct_alloca_loop_44.c":86:9)
#loc106 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE805_struct_alloca_loop_44.c":79:13)
#loc107 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE805_struct_alloca_loop_44.c":79:20)
#loc108 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE805_struct_alloca_loop_44.c":81:13)
#loc109 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE805_struct_alloca_loop_44.c":84:13)
#loc110 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE805_struct_alloca_loop_44.c":81:22)
#loc111 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE805_struct_alloca_loop_44.c":81:18)
#loc112 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE805_struct_alloca_loop_44.c":81:25)
#loc113 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE805_struct_alloca_loop_44.c":81:29)
#loc114 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE805_struct_alloca_loop_44.c":81:27)
#loc115 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE805_struct_alloca_loop_44.c":82:13)
#loc116 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE805_struct_alloca_loop_44.c":83:17)
#loc117 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE805_struct_alloca_loop_44.c":83:22)
#loc118 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE805_struct_alloca_loop_44.c":83:23)
#loc119 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE805_struct_alloca_loop_44.c":83:34)
#loc120 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE805_struct_alloca_loop_44.c":83:27)
#loc121 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE805_struct_alloca_loop_44.c":81:35)
#loc122 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE805_struct_alloca_loop_44.c":81:34)
#loc123 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE805_struct_alloca_loop_44.c":85:30)
#loc124 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE805_struct_alloca_loop_44.c":85:35)
#loc125 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE805_struct_alloca_loop_44.c":85:36)
#loc126 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE805_struct_alloca_loop_44.c":85:13)
#loc127 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE805_struct_alloca_loop_44.c":90:1)
#loc128 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE805_struct_alloca_loop_44.c":99:1)
#loc129 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE805_struct_alloca_loop_44.c":92:5)
#loc130 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE805_struct_alloca_loop_44.c":92:21)
#loc131 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE805_struct_alloca_loop_44.c":93:5)
#loc132 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE805_struct_alloca_loop_44.c":93:41)
#loc133 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE805_struct_alloca_loop_44.c":94:5)
#loc134 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE805_struct_alloca_loop_44.c":94:54)
#loc135 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE805_struct_alloca_loop_44.c":95:5)
#loc136 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE805_struct_alloca_loop_44.c":95:55)
#loc137 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE805_struct_alloca_loop_44.c":97:12)
#loc138 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE805_struct_alloca_loop_44.c":97:5)
#loc139 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE805_struct_alloca_loop_44.c":98:5)
#loc140 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE805_struct_alloca_loop_44.c":98:13)
#loc141 = loc(fused[#loc1, #loc2])
#loc142 = loc(fused[#loc3, #loc4])
#loc144 = loc(fused[#loc8, #loc9])
#loc145 = loc(fused[#loc10, #loc11])
#loc146 = loc(fused[#loc12, #loc13])
#loc147 = loc(fused[#loc14, #loc15])
#loc148 = loc(fused[#loc16, #loc17])
#loc149 = loc(fused[#loc19, #loc18])
#loc150 = loc(fused[#loc20, #loc21])
#loc151 = loc(fused[#loc23, #loc17])
#loc152 = loc(fused[#loc26, #loc24])
#loc153 = loc(fused[#loc30, #loc28])
#loc154 = loc(fused[#loc33, #loc32])
#loc155 = loc(fused[#loc34, #loc35])
#loc156 = loc(fused[#loc36, #loc37])
#loc157 = loc(fused[#loc38, #loc39])
#loc158 = loc(fused[#loc41, #loc40])
#loc159 = loc(fused[#loc42, #loc43])
#loc160 = loc(fused[#loc45, #loc39])
#loc161 = loc(fused[#loc52, #loc51])
#loc162 = loc(fused[#loc57, #loc58])
#loc163 = loc(fused[#loc59, #loc60])
#loc164 = loc(fused[#loc61, #loc62])
#loc165 = loc(fused[#loc63, #loc64])
#loc166 = loc(fused[#loc65, #loc66])
#loc167 = loc(fused[#loc68, #loc67])
#loc168 = loc(fused[#loc71, #loc72])
#loc169 = loc(fused[#loc73, #loc74])
#loc170 = loc(fused[#loc75, #loc76])
#loc172 = loc(fused[#loc80, #loc81])
#loc173 = loc(fused[#loc82, #loc83])
#loc174 = loc(fused[#loc84, #loc85])
#loc175 = loc(fused[#loc86, #loc87])
#loc176 = loc(fused[#loc88, #loc89])
#loc177 = loc(fused[#loc91, #loc90])
#loc178 = loc(fused[#loc92, #loc93])
#loc179 = loc(fused[#loc95, #loc89])
#loc180 = loc(fused[#loc98, #loc96])
#loc181 = loc(fused[#loc101, #loc99])
#loc182 = loc(fused[#loc103, #loc102])
#loc183 = loc(fused[#loc104, #loc105])
#loc184 = loc(fused[#loc106, #loc107])
#loc185 = loc(fused[#loc108, #loc109])
#loc186 = loc(fused[#loc111, #loc110])
#loc187 = loc(fused[#loc112, #loc113])
#loc188 = loc(fused[#loc115, #loc109])
#loc189 = loc(fused[#loc122, #loc121])
#loc190 = loc(fused[#loc127, #loc128])
#loc191 = loc(fused[#loc129, #loc130])
#loc192 = loc(fused[#loc131, #loc132])
#loc193 = loc(fused[#loc133, #loc134])
#loc194 = loc(fused[#loc135, #loc136])
#loc195 = loc(fused[#loc138, #loc137])
