!s32i = !cir.int<s, 32>
!u32i = !cir.int<u, 32>
#fn_attr = #cir<extra({nothrow = #cir.nothrow})>
#fn_attr1 = #cir<extra({inline = #cir.inline<no>, optnone = #cir.optnone, uwtable = #cir.uwtable<async>})>
module @"/workspaces/juliet-c/testcases/CWE680_Integer_Overflow_to_Buffer_Overflow/CWE680_Integer_Overflow_to_Buffer_Overflow__new_rand_68a.cpp" attributes {cir.lang = #cir.lang<cxx>, cir.sob = #cir.signed_overflow_behavior<undefined>, cir.triple = "x86_64-unknown-linux-gnu", cir.type_size_info = #cir.type_size_info<char = 8, int = 32, size_t = 64>, cir.uwtable = #cir.uwtable<async>, dlti.dl_spec = #dlti.dl_spec<!llvm.ptr = dense<64> : vector<4xi64>, f80 = dense<128> : vector<2xi64>, i128 = dense<128> : vector<2xi64>, i64 = dense<64> : vector<2xi64>, !llvm.ptr<270> = dense<32> : vector<4xi64>, !llvm.ptr<271> = dense<32> : vector<4xi64>, !llvm.ptr<272> = dense<64> : vector<4xi64>, f128 = dense<128> : vector<2xi64>, f64 = dense<64> : vector<2xi64>, f16 = dense<16> : vector<2xi64>, i32 = dense<32> : vector<2xi64>, i16 = dense<16> : vector<2xi64>, i8 = dense<8> : vector<2xi64>, i1 = dense<8> : vector<2xi64>, "dlti.endianness" = "little", "dlti.stack_alignment" = 128 : i64, "dlti.mangling_mode" = "e">} {
  cir.global external dsolocal @CWE680_Integer_Overflow_to_Buffer_Overflow__new_rand_68_badData = #cir.int<0> : !s32i {alignment = 4 : i64} loc(#loc38)
  cir.global external dsolocal @CWE680_Integer_Overflow_to_Buffer_Overflow__new_rand_68_goodG2BData = #cir.int<0> : !s32i {alignment = 4 : i64} loc(#loc39)
  cir.func private @rand() -> !s32i extra(#fn_attr) loc(#loc40)
  cir.func private @_ZN55CWE680_Integer_Overflow_to_Buffer_Overflow__new_rand_687badSinkEv() loc(#loc41)
  cir.func @_ZN55CWE680_Integer_Overflow_to_Buffer_Overflow__new_rand_683badEv() extra(#fn_attr1) {
    %0 = cir.alloca !s32i, !cir.ptr<!s32i>, ["data"] {alignment = 4 : i64} loc(#loc43)
    %1 = cir.const #cir.int<1> : !s32i loc(#loc13)
    %2 = cir.unary(minus, %1) nsw : !s32i, !s32i loc(#loc14)
    cir.store %2, %0 : !s32i, !cir.ptr<!s32i> loc(#loc44)
    %3 = cir.call @rand() : () -> !s32i extra(#fn_attr) loc(#loc16)
    %4 = cir.const #cir.int<1> : !s32i loc(#loc16)
    %5 = cir.binop(and, %3, %4) : !s32i loc(#loc16)
    %6 = cir.cast(int_to_bool, %5 : !s32i), !cir.bool loc(#loc16)
    %7 = cir.ternary(%6, true {
      %11 = cir.call @rand() : () -> !s32i extra(#fn_attr) loc(#loc16)
      %12 = cir.cast(integral, %11 : !s32i), !u32i loc(#loc16)
      %13 = cir.const #cir.int<30> : !s32i loc(#loc16)
      %14 = cir.shift(left, %12 : !u32i, %13 : !s32i) -> !u32i loc(#loc16)
      %15 = cir.call @rand() : () -> !s32i extra(#fn_attr) loc(#loc16)
      %16 = cir.cast(integral, %15 : !s32i), !u32i loc(#loc16)
      %17 = cir.const #cir.int<15> : !s32i loc(#loc16)
      %18 = cir.shift(left, %16 : !u32i, %17 : !s32i) -> !u32i loc(#loc16)
      %19 = cir.binop(xor, %14, %18) : !u32i loc(#loc16)
      %20 = cir.call @rand() : () -> !s32i extra(#fn_attr) loc(#loc16)
      %21 = cir.cast(integral, %20 : !s32i), !u32i loc(#loc16)
      %22 = cir.binop(xor, %19, %21) : !u32i loc(#loc16)
      cir.yield %22 : !u32i loc(#loc16)
    }, false {
      %11 = cir.call @rand() : () -> !s32i extra(#fn_attr) loc(#loc16)
      %12 = cir.cast(integral, %11 : !s32i), !u32i loc(#loc16)
      %13 = cir.const #cir.int<30> : !s32i loc(#loc16)
      %14 = cir.shift(left, %12 : !u32i, %13 : !s32i) -> !u32i loc(#loc16)
      %15 = cir.call @rand() : () -> !s32i extra(#fn_attr) loc(#loc16)
      %16 = cir.cast(integral, %15 : !s32i), !u32i loc(#loc16)
      %17 = cir.const #cir.int<15> : !s32i loc(#loc16)
      %18 = cir.shift(left, %16 : !u32i, %17 : !s32i) -> !u32i loc(#loc16)
      %19 = cir.binop(xor, %14, %18) : !u32i loc(#loc16)
      %20 = cir.call @rand() : () -> !s32i extra(#fn_attr) loc(#loc16)
      %21 = cir.cast(integral, %20 : !s32i), !u32i loc(#loc16)
      %22 = cir.binop(xor, %19, %21) : !u32i loc(#loc16)
      %23 = cir.unary(minus, %22) : !u32i, !u32i loc(#loc16)
      %24 = cir.const #cir.int<1> : !s32i loc(#loc16)
      %25 = cir.cast(integral, %24 : !s32i), !u32i loc(#loc16)
      %26 = cir.binop(sub, %23, %25) : !u32i loc(#loc16)
      cir.yield %26 : !u32i loc(#loc16)
    }) : (!cir.bool) -> !u32i loc(#loc16)
    %8 = cir.cast(integral, %7 : !u32i), !s32i loc(#loc16)
    cir.store %8, %0 : !s32i, !cir.ptr<!s32i> loc(#loc45)
    %9 = cir.load %0 : !cir.ptr<!s32i>, !s32i loc(#loc18)
    %10 = cir.get_global @CWE680_Integer_Overflow_to_Buffer_Overflow__new_rand_68_badData : !cir.ptr<!s32i> loc(#loc38)
    cir.store %9, %10 : !s32i, !cir.ptr<!s32i> loc(#loc46)
    cir.call @_ZN55CWE680_Integer_Overflow_to_Buffer_Overflow__new_rand_687badSinkEv() : () -> () loc(#loc20)
    cir.return loc(#loc10)
  } loc(#loc42)
  cir.func private @_ZN55CWE680_Integer_Overflow_to_Buffer_Overflow__new_rand_6811goodG2BSinkEv() loc(#loc47)
  cir.func internal private @_ZN55CWE680_Integer_Overflow_to_Buffer_Overflow__new_rand_68L7goodG2BEv() extra(#fn_attr1) {
    %0 = cir.alloca !s32i, !cir.ptr<!s32i>, ["data"] {alignment = 4 : i64} loc(#loc49)
    %1 = cir.const #cir.int<1> : !s32i loc(#loc27)
    %2 = cir.unary(minus, %1) nsw : !s32i, !s32i loc(#loc28)
    cir.store %2, %0 : !s32i, !cir.ptr<!s32i> loc(#loc50)
    %3 = cir.const #cir.int<20> : !s32i loc(#loc30)
    cir.store %3, %0 : !s32i, !cir.ptr<!s32i> loc(#loc51)
    %4 = cir.load %0 : !cir.ptr<!s32i>, !s32i loc(#loc32)
    %5 = cir.get_global @CWE680_Integer_Overflow_to_Buffer_Overflow__new_rand_68_goodG2BData : !cir.ptr<!s32i> loc(#loc39)
    cir.store %4, %5 : !s32i, !cir.ptr<!s32i> loc(#loc52)
    cir.call @_ZN55CWE680_Integer_Overflow_to_Buffer_Overflow__new_rand_6811goodG2BSinkEv() : () -> () loc(#loc34)
    cir.return loc(#loc24)
  } loc(#loc48)
  cir.func @_ZN55CWE680_Integer_Overflow_to_Buffer_Overflow__new_rand_684goodEv() extra(#fn_attr1) {
    cir.call @_ZN55CWE680_Integer_Overflow_to_Buffer_Overflow__new_rand_68L7goodG2BEv() : () -> () loc(#loc37)
    cir.return loc(#loc36)
  } loc(#loc53)
} loc(#loc)
#loc = loc("/workspaces/juliet-c/testcases/CWE680_Integer_Overflow_to_Buffer_Overflow/CWE680_Integer_Overflow_to_Buffer_Overflow__new_rand_68a.cpp":0:0)
#loc1 = loc("CWE680_Integer_Overflow_to_Buffer_Overflow__new_rand_68a.cpp":19:1)
#loc2 = loc("CWE680_Integer_Overflow_to_Buffer_Overflow__new_rand_68a.cpp":19:5)
#loc3 = loc("CWE680_Integer_Overflow_to_Buffer_Overflow__new_rand_68a.cpp":20:1)
#loc4 = loc("CWE680_Integer_Overflow_to_Buffer_Overflow__new_rand_68a.cpp":20:5)
#loc5 = loc("/usr/include/stdlib.h":573:1)
#loc6 = loc("/usr/include/stdlib.h":573:24)
#loc7 = loc("CWE680_Integer_Overflow_to_Buffer_Overflow__new_rand_68a.cpp":28:1)
#loc8 = loc("CWE680_Integer_Overflow_to_Buffer_Overflow__new_rand_68a.cpp":28:14)
#loc9 = loc("CWE680_Integer_Overflow_to_Buffer_Overflow__new_rand_68a.cpp":30:1)
#loc10 = loc("CWE680_Integer_Overflow_to_Buffer_Overflow__new_rand_68a.cpp":39:1)
#loc11 = loc("CWE680_Integer_Overflow_to_Buffer_Overflow__new_rand_68a.cpp":32:5)
#loc12 = loc("CWE680_Integer_Overflow_to_Buffer_Overflow__new_rand_68a.cpp":32:9)
#loc13 = loc("CWE680_Integer_Overflow_to_Buffer_Overflow__new_rand_68a.cpp":34:13)
#loc14 = loc("CWE680_Integer_Overflow_to_Buffer_Overflow__new_rand_68a.cpp":34:12)
#loc15 = loc("CWE680_Integer_Overflow_to_Buffer_Overflow__new_rand_68a.cpp":34:5)
#loc16 = loc("CWE680_Integer_Overflow_to_Buffer_Overflow__new_rand_68a.cpp":36:12)
#loc17 = loc("CWE680_Integer_Overflow_to_Buffer_Overflow__new_rand_68a.cpp":36:5)
#loc18 = loc("CWE680_Integer_Overflow_to_Buffer_Overflow__new_rand_68a.cpp":37:71)
#loc19 = loc("CWE680_Integer_Overflow_to_Buffer_Overflow__new_rand_68a.cpp":37:5)
#loc20 = loc("CWE680_Integer_Overflow_to_Buffer_Overflow__new_rand_68a.cpp":38:5)
#loc21 = loc("CWE680_Integer_Overflow_to_Buffer_Overflow__new_rand_68a.cpp":46:1)
#loc22 = loc("CWE680_Integer_Overflow_to_Buffer_Overflow__new_rand_68a.cpp":46:18)
#loc23 = loc("CWE680_Integer_Overflow_to_Buffer_Overflow__new_rand_68a.cpp":49:1)
#loc24 = loc("CWE680_Integer_Overflow_to_Buffer_Overflow__new_rand_68a.cpp":58:1)
#loc25 = loc("CWE680_Integer_Overflow_to_Buffer_Overflow__new_rand_68a.cpp":51:5)
#loc26 = loc("CWE680_Integer_Overflow_to_Buffer_Overflow__new_rand_68a.cpp":51:9)
#loc27 = loc("CWE680_Integer_Overflow_to_Buffer_Overflow__new_rand_68a.cpp":53:13)
#loc28 = loc("CWE680_Integer_Overflow_to_Buffer_Overflow__new_rand_68a.cpp":53:12)
#loc29 = loc("CWE680_Integer_Overflow_to_Buffer_Overflow__new_rand_68a.cpp":53:5)
#loc30 = loc("CWE680_Integer_Overflow_to_Buffer_Overflow__new_rand_68a.cpp":55:12)
#loc31 = loc("CWE680_Integer_Overflow_to_Buffer_Overflow__new_rand_68a.cpp":55:5)
#loc32 = loc("CWE680_Integer_Overflow_to_Buffer_Overflow__new_rand_68a.cpp":56:75)
#loc33 = loc("CWE680_Integer_Overflow_to_Buffer_Overflow__new_rand_68a.cpp":56:5)
#loc34 = loc("CWE680_Integer_Overflow_to_Buffer_Overflow__new_rand_68a.cpp":57:5)
#loc35 = loc("CWE680_Integer_Overflow_to_Buffer_Overflow__new_rand_68a.cpp":60:1)
#loc36 = loc("CWE680_Integer_Overflow_to_Buffer_Overflow__new_rand_68a.cpp":63:1)
#loc37 = loc("CWE680_Integer_Overflow_to_Buffer_Overflow__new_rand_68a.cpp":62:5)
#loc38 = loc(fused[#loc1, #loc2])
#loc39 = loc(fused[#loc3, #loc4])
#loc40 = loc(fused[#loc5, #loc6])
#loc41 = loc(fused[#loc7, #loc8])
#loc42 = loc(fused[#loc9, #loc10])
#loc43 = loc(fused[#loc11, #loc12])
#loc44 = loc(fused[#loc15, #loc13])
#loc45 = loc(fused[#loc17, #loc16])
#loc46 = loc(fused[#loc19, #loc18])
#loc47 = loc(fused[#loc21, #loc22])
#loc48 = loc(fused[#loc23, #loc24])
#loc49 = loc(fused[#loc25, #loc26])
#loc50 = loc(fused[#loc29, #loc27])
#loc51 = loc(fused[#loc31, #loc30])
#loc52 = loc(fused[#loc33, #loc32])
#loc53 = loc(fused[#loc35, #loc36])
