!s32i = !cir.int<s, 32>
!s64i = !cir.int<s, 64>
!s8i = !cir.int<s, 8>
!u64i = !cir.int<u, 64>
!void = !cir.void
#fn_attr = #cir<extra({nothrow = #cir.nothrow})>
#fn_attr1 = #cir<extra({inline = #cir.inline<no>, nothrow = #cir.nothrow, optnone = #cir.optnone, uwtable = #cir.uwtable<async>})>
#loc9 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_int64_t_memmove_21.c":24:28)
#loc10 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_int64_t_memmove_21.c":24:38)
#loc78 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_int64_t_memmove_21.c":59:33)
#loc79 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_int64_t_memmove_21.c":59:43)
#loc137 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_int64_t_memmove_21.c":91:33)
#loc138 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_int64_t_memmove_21.c":91:43)
#loc193 = loc(fused[#loc9, #loc10])
#loc222 = loc(fused[#loc78, #loc79])
#loc245 = loc(fused[#loc137, #loc138])
module @"/workspaces/juliet-c/testcases/CWE122_Heap_Based_Buffer_Overflow/s08/CWE122_Heap_Based_Buffer_Overflow__c_CWE805_int64_t_memmove_21.c" attributes {cir.lang = #cir.lang<c>, cir.sob = #cir.signed_overflow_behavior<undefined>, cir.triple = "x86_64-unknown-linux-gnu", cir.type_size_info = #cir.type_size_info<char = 8, int = 32, size_t = 64>, cir.uwtable = #cir.uwtable<async>, dlti.dl_spec = #dlti.dl_spec<i8 = dense<8> : vector<2xi64>, i16 = dense<16> : vector<2xi64>, i1 = dense<8> : vector<2xi64>, !llvm.ptr = dense<64> : vector<4xi64>, !llvm.ptr<270> = dense<32> : vector<4xi64>, i128 = dense<128> : vector<2xi64>, f80 = dense<128> : vector<2xi64>, i64 = dense<64> : vector<2xi64>, !llvm.ptr<271> = dense<32> : vector<4xi64>, !llvm.ptr<272> = dense<64> : vector<4xi64>, f64 = dense<64> : vector<2xi64>, f16 = dense<16> : vector<2xi64>, f128 = dense<128> : vector<2xi64>, i32 = dense<32> : vector<2xi64>, "dlti.mangling_mode" = "e", "dlti.endianness" = "little", "dlti.stack_alignment" = 128 : i64>} {
  cir.global "private" internal dsolocal @badStatic = #cir.int<0> : !s32i {alignment = 4 : i64} loc(#loc189)
  cir.func private @malloc(!u64i) -> !cir.ptr<!void> extra(#fn_attr) loc(#loc190)
  cir.func private @exit(!s32i) extra(#fn_attr) loc(#loc191)
  cir.func internal private @badSource(%arg0: !cir.ptr<!s64i> loc(fused[#loc9, #loc10])) -> !cir.ptr<!s64i> extra(#fn_attr1) {
    %0 = cir.alloca !cir.ptr<!s64i>, !cir.ptr<!cir.ptr<!s64i>>, ["data", init] {alignment = 8 : i64} loc(#loc193)
    %1 = cir.alloca !cir.ptr<!s64i>, !cir.ptr<!cir.ptr<!s64i>>, ["__retval"] {alignment = 8 : i64} loc(#loc8)
    cir.store %arg0, %0 : !cir.ptr<!s64i>, !cir.ptr<!cir.ptr<!s64i>> loc(#loc11)
    cir.br ^bb1 loc(#loc194)
  ^bb1:  // pred: ^bb0
    %2 = cir.get_global @badStatic : !cir.ptr<!s32i> loc(#loc189)
    %3 = cir.load %2 : !cir.ptr<!s32i>, !s32i loc(#loc14)
    %4 = cir.cast(int_to_bool, %3 : !s32i), !cir.bool loc(#loc14)
    cir.brcond %4 ^bb2, ^bb7 loc(#loc195)
  ^bb2:  // pred: ^bb1
    %5 = cir.get_global @malloc : !cir.ptr<!cir.func<(!u64i) -> !cir.ptr<!void>>> loc(#loc16)
    %6 = cir.const #cir.int<50> : !s32i loc(#loc17)
    %7 = cir.cast(integral, %6 : !s32i), !u64i loc(#loc17)
    %8 = cir.const #cir.int<8> : !u64i loc(#loc196)
    %9 = cir.binop(mul, %7, %8) : !u64i loc(#loc197)
    %10 = cir.call @malloc(%9) : (!u64i) -> !cir.ptr<!void> extra(#fn_attr) loc(#loc16)
    %11 = cir.cast(bitcast, %10 : !cir.ptr<!void>), !cir.ptr<!s64i> loc(#loc198)
    cir.store %11, %0 : !cir.ptr<!s64i>, !cir.ptr<!cir.ptr<!s64i>> loc(#loc199)
    cir.br ^bb3 loc(#loc200)
  ^bb3:  // pred: ^bb2
    %12 = cir.load %0 : !cir.ptr<!cir.ptr<!s64i>>, !cir.ptr<!s64i> loc(#loc24)
    %13 = cir.const #cir.ptr<null> : !cir.ptr<!void> loc(#loc25)
    %14 = cir.cast(bitcast, %13 : !cir.ptr<!void>), !cir.ptr<!s64i> loc(#loc25)
    %15 = cir.cmp(eq, %12, %14) : !cir.ptr<!s64i>, !cir.bool loc(#loc201)
    cir.brcond %15 ^bb4, ^bb5 loc(#loc202)
  ^bb4:  // pred: ^bb3
    %16 = cir.get_global @exit : !cir.ptr<!cir.func<(!s32i)>> loc(#loc27)
    %17 = cir.const #cir.int<1> : !s32i loc(#loc28)
    %18 = cir.unary(minus, %17) nsw : !s32i, !s32i loc(#loc29)
    cir.call @exit(%18) : (!s32i) -> () extra(#fn_attr) loc(#loc27)
    cir.br ^bb5 loc(#loc23)
  ^bb5:  // 2 preds: ^bb3, ^bb4
    cir.br ^bb6 loc(#loc23)
  ^bb6:  // pred: ^bb5
    cir.br ^bb7 loc(#loc13)
  ^bb7:  // 2 preds: ^bb1, ^bb6
    cir.br ^bb8 loc(#loc13)
  ^bb8:  // pred: ^bb7
    %19 = cir.load %0 : !cir.ptr<!cir.ptr<!s64i>>, !cir.ptr<!s64i> loc(#loc30)
    cir.store %19, %1 : !cir.ptr<!s64i>, !cir.ptr<!cir.ptr<!s64i>> loc(#loc203)
    %20 = cir.load %1 : !cir.ptr<!cir.ptr<!s64i>>, !cir.ptr<!s64i> loc(#loc203)
    cir.return %20 : !cir.ptr<!s64i> loc(#loc203)
  } loc(#loc192)
  cir.func private @printLongLongLine(!s64i) loc(#loc204)
  cir.func private @free(!cir.ptr<!void>) extra(#fn_attr) loc(#loc205)
  cir.func no_proto @CWE122_Heap_Based_Buffer_Overflow__c_CWE805_int64_t_memmove_21_bad() extra(#fn_attr1) {
    %0 = cir.alloca !cir.array<!s64i x 100>, !cir.ptr<!cir.array<!s64i x 100>>, ["source"] {alignment = 16 : i64} loc(#loc207)
    %1 = cir.alloca !cir.ptr<!s64i>, !cir.ptr<!cir.ptr<!s64i>>, ["data"] {alignment = 8 : i64} loc(#loc208)
    %2 = cir.const #cir.ptr<null> : !cir.ptr<!s64i> loc(#loc42)
    cir.store %2, %1 : !cir.ptr<!s64i>, !cir.ptr<!cir.ptr<!s64i>> loc(#loc209)
    %3 = cir.const #cir.int<1> : !s32i loc(#loc44)
    %4 = cir.get_global @badStatic : !cir.ptr<!s32i> loc(#loc189)
    cir.store %3, %4 : !s32i, !cir.ptr<!s32i> loc(#loc210)
    %5 = cir.load %1 : !cir.ptr<!cir.ptr<!s64i>>, !cir.ptr<!s64i> loc(#loc46)
    %6 = cir.call @badSource(%5) : (!cir.ptr<!s64i>) -> !cir.ptr<!s64i> loc(#loc47)
    cir.store %6, %1 : !cir.ptr<!s64i>, !cir.ptr<!cir.ptr<!s64i>> loc(#loc211)
    cir.br ^bb1 loc(#loc212)
  ^bb1:  // pred: ^bb0
    %7 = cir.const #cir.zero : !cir.array<!s64i x 100> loc(#loc207)
    cir.store %7, %0 : !cir.array<!s64i x 100>, !cir.ptr<!cir.array<!s64i x 100>> loc(#loc207)
    %8 = cir.load %1 : !cir.ptr<!cir.ptr<!s64i>>, !cir.ptr<!s64i> loc(#loc52)
    %9 = cir.cast(bitcast, %8 : !cir.ptr<!s64i>), !cir.ptr<!void> loc(#loc52)
    %10 = cir.cast(array_to_ptrdecay, %0 : !cir.ptr<!cir.array<!s64i x 100>>), !cir.ptr<!s64i> loc(#loc53)
    %11 = cir.cast(bitcast, %10 : !cir.ptr<!s64i>), !cir.ptr<!void> loc(#loc53)
    %12 = cir.const #cir.int<100> : !s32i loc(#loc54)
    %13 = cir.cast(integral, %12 : !s32i), !u64i loc(#loc54)
    %14 = cir.const #cir.int<8> : !u64i loc(#loc213)
    %15 = cir.binop(mul, %13, %14) : !u64i loc(#loc214)
    cir.libc.memmove %15 bytes from %11 to %9 : !cir.ptr<!void>, !u64i loc(#loc215)
    %16 = cir.load %1 : !cir.ptr<!cir.ptr<!s64i>>, !cir.ptr<!s64i> loc(#loc59)
    %17 = cir.const #cir.int<0> : !s32i loc(#loc60)
    %18 = cir.ptr_stride(%16 : !cir.ptr<!s64i>, %17 : !s32i), !cir.ptr<!s64i> loc(#loc61)
    %19 = cir.load %18 : !cir.ptr<!s64i>, !s64i loc(#loc59)
    cir.call @printLongLongLine(%19) : (!s64i) -> () loc(#loc62)
    %20 = cir.get_global @free : !cir.ptr<!cir.func<(!cir.ptr<!void>)>> loc(#loc63)
    %21 = cir.load %1 : !cir.ptr<!cir.ptr<!s64i>>, !cir.ptr<!s64i> loc(#loc64)
    %22 = cir.cast(bitcast, %21 : !cir.ptr<!s64i>), !cir.ptr<!void> loc(#loc64)
    cir.call @free(%22) : (!cir.ptr<!void>) -> () extra(#fn_attr) loc(#loc63)
    cir.br ^bb2 loc(#loc51)
  ^bb2:  // pred: ^bb1
    cir.return loc(#loc37)
  } loc(#loc206)
  cir.func no_proto @CWE122_Heap_Based_Buffer_Overflow__c_CWE805_int64_t_memmove_21_good() extra(#fn_attr1) {
    %0 = cir.get_global @goodG2B1 : !cir.ptr<!cir.func<()>> loc(#loc217)
    cir.call %0() : (!cir.ptr<!cir.func<()>>) -> () loc(#loc67)
    %1 = cir.get_global @goodG2B2 : !cir.ptr<!cir.func<()>> loc(#loc218)
    cir.call %1() : (!cir.ptr<!cir.func<()>>) -> () loc(#loc69)
    cir.return loc(#loc66)
  } loc(#loc216)
  cir.global "private" internal dsolocal @goodG2B1Static = #cir.int<0> : !s32i {alignment = 4 : i64} loc(#loc219)
  cir.func private @printLine(!cir.ptr<!s8i>) loc(#loc220)
  cir.global "private" constant cir_private dsolocal @".str" = #cir.const_array<"Benign, fixed string\00" : !cir.array<!s8i x 21>> : !cir.array<!s8i x 21> {alignment = 1 : i64} loc(#loc75)
  cir.func internal private @goodG2B1Source(%arg0: !cir.ptr<!s64i> loc(fused[#loc78, #loc79])) -> !cir.ptr<!s64i> extra(#fn_attr1) {
    %0 = cir.alloca !cir.ptr<!s64i>, !cir.ptr<!cir.ptr<!s64i>>, ["data", init] {alignment = 8 : i64} loc(#loc222)
    %1 = cir.alloca !cir.ptr<!s64i>, !cir.ptr<!cir.ptr<!s64i>>, ["__retval"] {alignment = 8 : i64} loc(#loc77)
    cir.store %arg0, %0 : !cir.ptr<!s64i>, !cir.ptr<!cir.ptr<!s64i>> loc(#loc80)
    cir.br ^bb1 loc(#loc223)
  ^bb1:  // pred: ^bb0
    %2 = cir.get_global @goodG2B1Static : !cir.ptr<!s32i> loc(#loc219)
    %3 = cir.load %2 : !cir.ptr<!s32i>, !s32i loc(#loc83)
    %4 = cir.cast(int_to_bool, %3 : !s32i), !cir.bool loc(#loc83)
    cir.brcond %4 ^bb2, ^bb3 loc(#loc224)
  ^bb2:  // pred: ^bb1
    %5 = cir.get_global @".str" : !cir.ptr<!cir.array<!s8i x 21>> loc(#loc75)
    %6 = cir.cast(array_to_ptrdecay, %5 : !cir.ptr<!cir.array<!s8i x 21>>), !cir.ptr<!s8i> loc(#loc75)
    cir.call @printLine(%6) : (!cir.ptr<!s8i>) -> () loc(#loc87)
    cir.br ^bb8 loc(#loc85)
  ^bb3:  // pred: ^bb1
    %7 = cir.get_global @malloc : !cir.ptr<!cir.func<(!u64i) -> !cir.ptr<!void>>> loc(#loc88)
    %8 = cir.const #cir.int<100> : !s32i loc(#loc89)
    %9 = cir.cast(integral, %8 : !s32i), !u64i loc(#loc89)
    %10 = cir.const #cir.int<8> : !u64i loc(#loc225)
    %11 = cir.binop(mul, %9, %10) : !u64i loc(#loc226)
    %12 = cir.call @malloc(%11) : (!u64i) -> !cir.ptr<!void> extra(#fn_attr) loc(#loc88)
    %13 = cir.cast(bitcast, %12 : !cir.ptr<!void>), !cir.ptr<!s64i> loc(#loc227)
    cir.store %13, %0 : !cir.ptr<!s64i>, !cir.ptr<!cir.ptr<!s64i>> loc(#loc228)
    cir.br ^bb4 loc(#loc229)
  ^bb4:  // pred: ^bb3
    %14 = cir.load %0 : !cir.ptr<!cir.ptr<!s64i>>, !cir.ptr<!s64i> loc(#loc96)
    %15 = cir.const #cir.ptr<null> : !cir.ptr<!void> loc(#loc97)
    %16 = cir.cast(bitcast, %15 : !cir.ptr<!void>), !cir.ptr<!s64i> loc(#loc97)
    %17 = cir.cmp(eq, %14, %16) : !cir.ptr<!s64i>, !cir.bool loc(#loc230)
    cir.brcond %17 ^bb5, ^bb6 loc(#loc231)
  ^bb5:  // pred: ^bb4
    %18 = cir.get_global @exit : !cir.ptr<!cir.func<(!s32i)>> loc(#loc99)
    %19 = cir.const #cir.int<1> : !s32i loc(#loc100)
    %20 = cir.unary(minus, %19) nsw : !s32i, !s32i loc(#loc101)
    cir.call @exit(%20) : (!s32i) -> () extra(#fn_attr) loc(#loc99)
    cir.br ^bb6 loc(#loc95)
  ^bb6:  // 2 preds: ^bb4, ^bb5
    cir.br ^bb7 loc(#loc95)
  ^bb7:  // pred: ^bb6
    cir.br ^bb8 loc(#loc82)
  ^bb8:  // 2 preds: ^bb2, ^bb7
    cir.br ^bb9 loc(#loc82)
  ^bb9:  // pred: ^bb8
    %21 = cir.load %0 : !cir.ptr<!cir.ptr<!s64i>>, !cir.ptr<!s64i> loc(#loc102)
    cir.store %21, %1 : !cir.ptr<!s64i>, !cir.ptr<!cir.ptr<!s64i>> loc(#loc232)
    %22 = cir.load %1 : !cir.ptr<!cir.ptr<!s64i>>, !cir.ptr<!s64i> loc(#loc232)
    cir.return %22 : !cir.ptr<!s64i> loc(#loc232)
  } loc(#loc221)
  cir.func no_proto internal private @goodG2B1() extra(#fn_attr1) {
    %0 = cir.alloca !cir.array<!s64i x 100>, !cir.ptr<!cir.array<!s64i x 100>>, ["source"] {alignment = 16 : i64} loc(#loc234)
    %1 = cir.alloca !cir.ptr<!s64i>, !cir.ptr<!cir.ptr<!s64i>>, ["data"] {alignment = 8 : i64} loc(#loc235)
    %2 = cir.const #cir.ptr<null> : !cir.ptr<!s64i> loc(#loc110)
    cir.store %2, %1 : !cir.ptr<!s64i>, !cir.ptr<!cir.ptr<!s64i>> loc(#loc236)
    %3 = cir.const #cir.int<0> : !s32i loc(#loc112)
    %4 = cir.get_global @goodG2B1Static : !cir.ptr<!s32i> loc(#loc219)
    cir.store %3, %4 : !s32i, !cir.ptr<!s32i> loc(#loc237)
    %5 = cir.load %1 : !cir.ptr<!cir.ptr<!s64i>>, !cir.ptr<!s64i> loc(#loc114)
    %6 = cir.call @goodG2B1Source(%5) : (!cir.ptr<!s64i>) -> !cir.ptr<!s64i> loc(#loc115)
    cir.store %6, %1 : !cir.ptr<!s64i>, !cir.ptr<!cir.ptr<!s64i>> loc(#loc238)
    cir.br ^bb1 loc(#loc239)
  ^bb1:  // pred: ^bb0
    %7 = cir.const #cir.zero : !cir.array<!s64i x 100> loc(#loc234)
    cir.store %7, %0 : !cir.array<!s64i x 100>, !cir.ptr<!cir.array<!s64i x 100>> loc(#loc234)
    %8 = cir.load %1 : !cir.ptr<!cir.ptr<!s64i>>, !cir.ptr<!s64i> loc(#loc120)
    %9 = cir.cast(bitcast, %8 : !cir.ptr<!s64i>), !cir.ptr<!void> loc(#loc120)
    %10 = cir.cast(array_to_ptrdecay, %0 : !cir.ptr<!cir.array<!s64i x 100>>), !cir.ptr<!s64i> loc(#loc121)
    %11 = cir.cast(bitcast, %10 : !cir.ptr<!s64i>), !cir.ptr<!void> loc(#loc121)
    %12 = cir.const #cir.int<100> : !s32i loc(#loc122)
    %13 = cir.cast(integral, %12 : !s32i), !u64i loc(#loc122)
    %14 = cir.const #cir.int<8> : !u64i loc(#loc240)
    %15 = cir.binop(mul, %13, %14) : !u64i loc(#loc241)
    cir.libc.memmove %15 bytes from %11 to %9 : !cir.ptr<!void>, !u64i loc(#loc242)
    %16 = cir.load %1 : !cir.ptr<!cir.ptr<!s64i>>, !cir.ptr<!s64i> loc(#loc127)
    %17 = cir.const #cir.int<0> : !s32i loc(#loc128)
    %18 = cir.ptr_stride(%16 : !cir.ptr<!s64i>, %17 : !s32i), !cir.ptr<!s64i> loc(#loc129)
    %19 = cir.load %18 : !cir.ptr<!s64i>, !s64i loc(#loc127)
    cir.call @printLongLongLine(%19) : (!s64i) -> () loc(#loc130)
    %20 = cir.get_global @free : !cir.ptr<!cir.func<(!cir.ptr<!void>)>> loc(#loc131)
    %21 = cir.load %1 : !cir.ptr<!cir.ptr<!s64i>>, !cir.ptr<!s64i> loc(#loc132)
    %22 = cir.cast(bitcast, %21 : !cir.ptr<!s64i>), !cir.ptr<!void> loc(#loc132)
    cir.call @free(%22) : (!cir.ptr<!void>) -> () extra(#fn_attr) loc(#loc131)
    cir.br ^bb2 loc(#loc119)
  ^bb2:  // pred: ^bb1
    cir.return loc(#loc105)
  } loc(#loc233)
  cir.global "private" internal dsolocal @goodG2B2Static = #cir.int<0> : !s32i {alignment = 4 : i64} loc(#loc243)
  cir.func internal private @goodG2B2Source(%arg0: !cir.ptr<!s64i> loc(fused[#loc137, #loc138])) -> !cir.ptr<!s64i> extra(#fn_attr1) {
    %0 = cir.alloca !cir.ptr<!s64i>, !cir.ptr<!cir.ptr<!s64i>>, ["data", init] {alignment = 8 : i64} loc(#loc245)
    %1 = cir.alloca !cir.ptr<!s64i>, !cir.ptr<!cir.ptr<!s64i>>, ["__retval"] {alignment = 8 : i64} loc(#loc136)
    cir.store %arg0, %0 : !cir.ptr<!s64i>, !cir.ptr<!cir.ptr<!s64i>> loc(#loc139)
    cir.br ^bb1 loc(#loc246)
  ^bb1:  // pred: ^bb0
    %2 = cir.get_global @goodG2B2Static : !cir.ptr<!s32i> loc(#loc243)
    %3 = cir.load %2 : !cir.ptr<!s32i>, !s32i loc(#loc142)
    %4 = cir.cast(int_to_bool, %3 : !s32i), !cir.bool loc(#loc142)
    cir.brcond %4 ^bb2, ^bb7 loc(#loc247)
  ^bb2:  // pred: ^bb1
    %5 = cir.get_global @malloc : !cir.ptr<!cir.func<(!u64i) -> !cir.ptr<!void>>> loc(#loc144)
    %6 = cir.const #cir.int<100> : !s32i loc(#loc145)
    %7 = cir.cast(integral, %6 : !s32i), !u64i loc(#loc145)
    %8 = cir.const #cir.int<8> : !u64i loc(#loc248)
    %9 = cir.binop(mul, %7, %8) : !u64i loc(#loc249)
    %10 = cir.call @malloc(%9) : (!u64i) -> !cir.ptr<!void> extra(#fn_attr) loc(#loc144)
    %11 = cir.cast(bitcast, %10 : !cir.ptr<!void>), !cir.ptr<!s64i> loc(#loc250)
    cir.store %11, %0 : !cir.ptr<!s64i>, !cir.ptr<!cir.ptr<!s64i>> loc(#loc251)
    cir.br ^bb3 loc(#loc252)
  ^bb3:  // pred: ^bb2
    %12 = cir.load %0 : !cir.ptr<!cir.ptr<!s64i>>, !cir.ptr<!s64i> loc(#loc152)
    %13 = cir.const #cir.ptr<null> : !cir.ptr<!void> loc(#loc153)
    %14 = cir.cast(bitcast, %13 : !cir.ptr<!void>), !cir.ptr<!s64i> loc(#loc153)
    %15 = cir.cmp(eq, %12, %14) : !cir.ptr<!s64i>, !cir.bool loc(#loc253)
    cir.brcond %15 ^bb4, ^bb5 loc(#loc254)
  ^bb4:  // pred: ^bb3
    %16 = cir.get_global @exit : !cir.ptr<!cir.func<(!s32i)>> loc(#loc155)
    %17 = cir.const #cir.int<1> : !s32i loc(#loc156)
    %18 = cir.unary(minus, %17) nsw : !s32i, !s32i loc(#loc157)
    cir.call @exit(%18) : (!s32i) -> () extra(#fn_attr) loc(#loc155)
    cir.br ^bb5 loc(#loc151)
  ^bb5:  // 2 preds: ^bb3, ^bb4
    cir.br ^bb6 loc(#loc151)
  ^bb6:  // pred: ^bb5
    cir.br ^bb7 loc(#loc141)
  ^bb7:  // 2 preds: ^bb1, ^bb6
    cir.br ^bb8 loc(#loc141)
  ^bb8:  // pred: ^bb7
    %19 = cir.load %0 : !cir.ptr<!cir.ptr<!s64i>>, !cir.ptr<!s64i> loc(#loc158)
    cir.store %19, %1 : !cir.ptr<!s64i>, !cir.ptr<!cir.ptr<!s64i>> loc(#loc255)
    %20 = cir.load %1 : !cir.ptr<!cir.ptr<!s64i>>, !cir.ptr<!s64i> loc(#loc255)
    cir.return %20 : !cir.ptr<!s64i> loc(#loc255)
  } loc(#loc244)
  cir.func no_proto internal private @goodG2B2() extra(#fn_attr1) {
    %0 = cir.alloca !cir.array<!s64i x 100>, !cir.ptr<!cir.array<!s64i x 100>>, ["source"] {alignment = 16 : i64} loc(#loc257)
    %1 = cir.alloca !cir.ptr<!s64i>, !cir.ptr<!cir.ptr<!s64i>>, ["data"] {alignment = 8 : i64} loc(#loc258)
    %2 = cir.const #cir.ptr<null> : !cir.ptr<!s64i> loc(#loc166)
    cir.store %2, %1 : !cir.ptr<!s64i>, !cir.ptr<!cir.ptr<!s64i>> loc(#loc259)
    %3 = cir.const #cir.int<1> : !s32i loc(#loc168)
    %4 = cir.get_global @goodG2B2Static : !cir.ptr<!s32i> loc(#loc243)
    cir.store %3, %4 : !s32i, !cir.ptr<!s32i> loc(#loc260)
    %5 = cir.load %1 : !cir.ptr<!cir.ptr<!s64i>>, !cir.ptr<!s64i> loc(#loc170)
    %6 = cir.call @goodG2B2Source(%5) : (!cir.ptr<!s64i>) -> !cir.ptr<!s64i> loc(#loc171)
    cir.store %6, %1 : !cir.ptr<!s64i>, !cir.ptr<!cir.ptr<!s64i>> loc(#loc261)
    cir.br ^bb1 loc(#loc262)
  ^bb1:  // pred: ^bb0
    %7 = cir.const #cir.zero : !cir.array<!s64i x 100> loc(#loc257)
    cir.store %7, %0 : !cir.array<!s64i x 100>, !cir.ptr<!cir.array<!s64i x 100>> loc(#loc257)
    %8 = cir.load %1 : !cir.ptr<!cir.ptr<!s64i>>, !cir.ptr<!s64i> loc(#loc176)
    %9 = cir.cast(bitcast, %8 : !cir.ptr<!s64i>), !cir.ptr<!void> loc(#loc176)
    %10 = cir.cast(array_to_ptrdecay, %0 : !cir.ptr<!cir.array<!s64i x 100>>), !cir.ptr<!s64i> loc(#loc177)
    %11 = cir.cast(bitcast, %10 : !cir.ptr<!s64i>), !cir.ptr<!void> loc(#loc177)
    %12 = cir.const #cir.int<100> : !s32i loc(#loc178)
    %13 = cir.cast(integral, %12 : !s32i), !u64i loc(#loc178)
    %14 = cir.const #cir.int<8> : !u64i loc(#loc263)
    %15 = cir.binop(mul, %13, %14) : !u64i loc(#loc264)
    cir.libc.memmove %15 bytes from %11 to %9 : !cir.ptr<!void>, !u64i loc(#loc265)
    %16 = cir.load %1 : !cir.ptr<!cir.ptr<!s64i>>, !cir.ptr<!s64i> loc(#loc183)
    %17 = cir.const #cir.int<0> : !s32i loc(#loc184)
    %18 = cir.ptr_stride(%16 : !cir.ptr<!s64i>, %17 : !s32i), !cir.ptr<!s64i> loc(#loc185)
    %19 = cir.load %18 : !cir.ptr<!s64i>, !s64i loc(#loc183)
    cir.call @printLongLongLine(%19) : (!s64i) -> () loc(#loc186)
    %20 = cir.get_global @free : !cir.ptr<!cir.func<(!cir.ptr<!void>)>> loc(#loc187)
    %21 = cir.load %1 : !cir.ptr<!cir.ptr<!s64i>>, !cir.ptr<!s64i> loc(#loc188)
    %22 = cir.cast(bitcast, %21 : !cir.ptr<!s64i>), !cir.ptr<!void> loc(#loc188)
    cir.call @free(%22) : (!cir.ptr<!void>) -> () extra(#fn_attr) loc(#loc187)
    cir.br ^bb2 loc(#loc175)
  ^bb2:  // pred: ^bb1
    cir.return loc(#loc161)
  } loc(#loc256)
} loc(#loc)
#loc = loc("/workspaces/juliet-c/testcases/CWE122_Heap_Based_Buffer_Overflow/s08/CWE122_Heap_Based_Buffer_Overflow__c_CWE805_int64_t_memmove_21.c":0:0)
#loc1 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_int64_t_memmove_21.c":22:1)
#loc2 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_int64_t_memmove_21.c":22:24)
#loc3 = loc("/usr/include/stdlib.h":672:1)
#loc4 = loc("/usr/include/stdlib.h":672:45)
#loc5 = loc("/usr/include/stdlib.h":756:1)
#loc6 = loc("/usr/include/stdlib.h":756:70)
#loc7 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_int64_t_memmove_21.c":24:1)
#loc8 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_int64_t_memmove_21.c":33:1)
#loc11 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_int64_t_memmove_21.c":25:1)
#loc12 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_int64_t_memmove_21.c":26:5)
#loc13 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_int64_t_memmove_21.c":31:5)
#loc14 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_int64_t_memmove_21.c":26:8)
#loc15 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_int64_t_memmove_21.c":27:5)
#loc16 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_int64_t_memmove_21.c":29:27)
#loc17 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_int64_t_memmove_21.c":29:34)
#loc18 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_int64_t_memmove_21.c":29:37)
#loc19 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_int64_t_memmove_21.c":29:51)
#loc20 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_int64_t_memmove_21.c":29:52)
#loc21 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_int64_t_memmove_21.c":29:9)
#loc22 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_int64_t_memmove_21.c":30:9)
#loc23 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_int64_t_memmove_21.c":30:37)
#loc24 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_int64_t_memmove_21.c":30:13)
#loc25 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_int64_t_memmove_21.c":30:21)
#loc26 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_int64_t_memmove_21.c":30:27)
#loc27 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_int64_t_memmove_21.c":30:28)
#loc28 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_int64_t_memmove_21.c":30:34)
#loc29 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_int64_t_memmove_21.c":30:33)
#loc30 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_int64_t_memmove_21.c":32:12)
#loc31 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_int64_t_memmove_21.c":32:5)
#loc32 = loc("../../../testcasesupport/std_testcase_io.h":26:1)
#loc33 = loc("../../../testcasesupport/std_testcase_io.h":26:49)
#loc34 = loc("/usr/include/stdlib.h":687:1)
#loc35 = loc("/usr/include/stdlib.h":687:32)
#loc36 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_int64_t_memmove_21.c":35:1)
#loc37 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_int64_t_memmove_21.c":48:1)
#loc38 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_int64_t_memmove_21.c":42:9)
#loc39 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_int64_t_memmove_21.c":42:33)
#loc40 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_int64_t_memmove_21.c":37:5)
#loc41 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_int64_t_memmove_21.c":37:15)
#loc42 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_int64_t_memmove_21.c":38:12)
#loc43 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_int64_t_memmove_21.c":38:5)
#loc44 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_int64_t_memmove_21.c":39:17)
#loc45 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_int64_t_memmove_21.c":39:5)
#loc46 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_int64_t_memmove_21.c":40:22)
#loc47 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_int64_t_memmove_21.c":40:12)
#loc48 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_int64_t_memmove_21.c":40:5)
#loc49 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_int64_t_memmove_21.c":40:26)
#loc50 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_int64_t_memmove_21.c":41:5)
#loc51 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_int64_t_memmove_21.c":47:5)
#loc52 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_int64_t_memmove_21.c":44:17)
#loc53 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_int64_t_memmove_21.c":44:23)
#loc54 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_int64_t_memmove_21.c":44:31)
#loc55 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_int64_t_memmove_21.c":44:35)
#loc56 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_int64_t_memmove_21.c":44:49)
#loc57 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_int64_t_memmove_21.c":44:9)
#loc58 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_int64_t_memmove_21.c":44:50)
#loc59 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_int64_t_memmove_21.c":45:27)
#loc60 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_int64_t_memmove_21.c":45:32)
#loc61 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_int64_t_memmove_21.c":45:33)
#loc62 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_int64_t_memmove_21.c":45:9)
#loc63 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_int64_t_memmove_21.c":46:9)
#loc64 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_int64_t_memmove_21.c":46:14)
#loc65 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_int64_t_memmove_21.c":117:1)
#loc66 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_int64_t_memmove_21.c":121:1)
#loc67 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_int64_t_memmove_21.c":119:5)
#loc68 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_int64_t_memmove_21.c":119:14)
#loc69 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_int64_t_memmove_21.c":120:5)
#loc70 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_int64_t_memmove_21.c":120:14)
#loc71 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_int64_t_memmove_21.c":55:1)
#loc72 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_int64_t_memmove_21.c":55:29)
#loc73 = loc("../../../testcasesupport/std_testcase_io.h":14:1)
#loc74 = loc("../../../testcasesupport/std_testcase_io.h":14:33)
#loc75 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_int64_t_memmove_21.c":64:19)
#loc76 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_int64_t_memmove_21.c":59:1)
#loc77 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_int64_t_memmove_21.c":73:1)
#loc80 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_int64_t_memmove_21.c":60:1)
#loc81 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_int64_t_memmove_21.c":61:5)
#loc82 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_int64_t_memmove_21.c":71:5)
#loc83 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_int64_t_memmove_21.c":61:8)
#loc84 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_int64_t_memmove_21.c":62:5)
#loc85 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_int64_t_memmove_21.c":65:5)
#loc86 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_int64_t_memmove_21.c":67:5)
#loc87 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_int64_t_memmove_21.c":64:9)
#loc88 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_int64_t_memmove_21.c":69:27)
#loc89 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_int64_t_memmove_21.c":69:34)
#loc90 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_int64_t_memmove_21.c":69:38)
#loc91 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_int64_t_memmove_21.c":69:52)
#loc92 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_int64_t_memmove_21.c":69:53)
#loc93 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_int64_t_memmove_21.c":69:9)
#loc94 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_int64_t_memmove_21.c":70:9)
#loc95 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_int64_t_memmove_21.c":70:37)
#loc96 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_int64_t_memmove_21.c":70:13)
#loc97 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_int64_t_memmove_21.c":70:21)
#loc98 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_int64_t_memmove_21.c":70:27)
#loc99 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_int64_t_memmove_21.c":70:28)
#loc100 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_int64_t_memmove_21.c":70:34)
#loc101 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_int64_t_memmove_21.c":70:33)
#loc102 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_int64_t_memmove_21.c":72:12)
#loc103 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_int64_t_memmove_21.c":72:5)
#loc104 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_int64_t_memmove_21.c":75:1)
#loc105 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_int64_t_memmove_21.c":88:1)
#loc106 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_int64_t_memmove_21.c":82:9)
#loc107 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_int64_t_memmove_21.c":82:33)
#loc108 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_int64_t_memmove_21.c":77:5)
#loc109 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_int64_t_memmove_21.c":77:15)
#loc110 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_int64_t_memmove_21.c":78:12)
#loc111 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_int64_t_memmove_21.c":78:5)
#loc112 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_int64_t_memmove_21.c":79:22)
#loc113 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_int64_t_memmove_21.c":79:5)
#loc114 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_int64_t_memmove_21.c":80:27)
#loc115 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_int64_t_memmove_21.c":80:12)
#loc116 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_int64_t_memmove_21.c":80:5)
#loc117 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_int64_t_memmove_21.c":80:31)
#loc118 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_int64_t_memmove_21.c":81:5)
#loc119 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_int64_t_memmove_21.c":87:5)
#loc120 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_int64_t_memmove_21.c":84:17)
#loc121 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_int64_t_memmove_21.c":84:23)
#loc122 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_int64_t_memmove_21.c":84:31)
#loc123 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_int64_t_memmove_21.c":84:35)
#loc124 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_int64_t_memmove_21.c":84:49)
#loc125 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_int64_t_memmove_21.c":84:9)
#loc126 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_int64_t_memmove_21.c":84:50)
#loc127 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_int64_t_memmove_21.c":85:27)
#loc128 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_int64_t_memmove_21.c":85:32)
#loc129 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_int64_t_memmove_21.c":85:33)
#loc130 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_int64_t_memmove_21.c":85:9)
#loc131 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_int64_t_memmove_21.c":86:9)
#loc132 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_int64_t_memmove_21.c":86:14)
#loc133 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_int64_t_memmove_21.c":56:1)
#loc134 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_int64_t_memmove_21.c":56:29)
#loc135 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_int64_t_memmove_21.c":91:1)
#loc136 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_int64_t_memmove_21.c":100:1)
#loc139 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_int64_t_memmove_21.c":92:1)
#loc140 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_int64_t_memmove_21.c":93:5)
#loc141 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_int64_t_memmove_21.c":98:5)
#loc142 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_int64_t_memmove_21.c":93:8)
#loc143 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_int64_t_memmove_21.c":94:5)
#loc144 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_int64_t_memmove_21.c":96:27)
#loc145 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_int64_t_memmove_21.c":96:34)
#loc146 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_int64_t_memmove_21.c":96:38)
#loc147 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_int64_t_memmove_21.c":96:52)
#loc148 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_int64_t_memmove_21.c":96:53)
#loc149 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_int64_t_memmove_21.c":96:9)
#loc150 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_int64_t_memmove_21.c":97:9)
#loc151 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_int64_t_memmove_21.c":97:37)
#loc152 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_int64_t_memmove_21.c":97:13)
#loc153 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_int64_t_memmove_21.c":97:21)
#loc154 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_int64_t_memmove_21.c":97:27)
#loc155 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_int64_t_memmove_21.c":97:28)
#loc156 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_int64_t_memmove_21.c":97:34)
#loc157 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_int64_t_memmove_21.c":97:33)
#loc158 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_int64_t_memmove_21.c":99:12)
#loc159 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_int64_t_memmove_21.c":99:5)
#loc160 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_int64_t_memmove_21.c":102:1)
#loc161 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_int64_t_memmove_21.c":115:1)
#loc162 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_int64_t_memmove_21.c":109:9)
#loc163 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_int64_t_memmove_21.c":109:33)
#loc164 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_int64_t_memmove_21.c":104:5)
#loc165 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_int64_t_memmove_21.c":104:15)
#loc166 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_int64_t_memmove_21.c":105:12)
#loc167 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_int64_t_memmove_21.c":105:5)
#loc168 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_int64_t_memmove_21.c":106:22)
#loc169 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_int64_t_memmove_21.c":106:5)
#loc170 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_int64_t_memmove_21.c":107:27)
#loc171 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_int64_t_memmove_21.c":107:12)
#loc172 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_int64_t_memmove_21.c":107:5)
#loc173 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_int64_t_memmove_21.c":107:31)
#loc174 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_int64_t_memmove_21.c":108:5)
#loc175 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_int64_t_memmove_21.c":114:5)
#loc176 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_int64_t_memmove_21.c":111:17)
#loc177 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_int64_t_memmove_21.c":111:23)
#loc178 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_int64_t_memmove_21.c":111:31)
#loc179 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_int64_t_memmove_21.c":111:35)
#loc180 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_int64_t_memmove_21.c":111:49)
#loc181 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_int64_t_memmove_21.c":111:9)
#loc182 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_int64_t_memmove_21.c":111:50)
#loc183 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_int64_t_memmove_21.c":112:27)
#loc184 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_int64_t_memmove_21.c":112:32)
#loc185 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_int64_t_memmove_21.c":112:33)
#loc186 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_int64_t_memmove_21.c":112:9)
#loc187 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_int64_t_memmove_21.c":113:9)
#loc188 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_int64_t_memmove_21.c":113:14)
#loc189 = loc(fused[#loc1, #loc2])
#loc190 = loc(fused[#loc3, #loc4])
#loc191 = loc(fused[#loc5, #loc6])
#loc192 = loc(fused[#loc7, #loc8])
#loc194 = loc(fused[#loc12, #loc13])
#loc195 = loc(fused[#loc15, #loc13])
#loc196 = loc(fused[#loc18, #loc19])
#loc197 = loc(fused[#loc17, #loc19])
#loc198 = loc(fused[#loc16, #loc20])
#loc199 = loc(fused[#loc21, #loc20])
#loc200 = loc(fused[#loc22, #loc23])
#loc201 = loc(fused[#loc24, #loc25])
#loc202 = loc(fused[#loc26, #loc23])
#loc203 = loc(fused[#loc31, #loc30])
#loc204 = loc(fused[#loc32, #loc33])
#loc205 = loc(fused[#loc34, #loc35])
#loc206 = loc(fused[#loc36, #loc37])
#loc207 = loc(fused[#loc38, #loc39])
#loc208 = loc(fused[#loc40, #loc41])
#loc209 = loc(fused[#loc43, #loc42])
#loc210 = loc(fused[#loc45, #loc44])
#loc211 = loc(fused[#loc48, #loc49])
#loc212 = loc(fused[#loc50, #loc51])
#loc213 = loc(fused[#loc55, #loc56])
#loc214 = loc(fused[#loc54, #loc56])
#loc215 = loc(fused[#loc57, #loc58])
#loc216 = loc(fused[#loc65, #loc66])
#loc217 = loc(fused[#loc67, #loc68])
#loc218 = loc(fused[#loc69, #loc70])
#loc219 = loc(fused[#loc71, #loc72])
#loc220 = loc(fused[#loc73, #loc74])
#loc221 = loc(fused[#loc76, #loc77])
#loc223 = loc(fused[#loc81, #loc82])
#loc224 = loc(fused[#loc84, #loc85, #loc86, #loc82])
#loc225 = loc(fused[#loc90, #loc91])
#loc226 = loc(fused[#loc89, #loc91])
#loc227 = loc(fused[#loc88, #loc92])
#loc228 = loc(fused[#loc93, #loc92])
#loc229 = loc(fused[#loc94, #loc95])
#loc230 = loc(fused[#loc96, #loc97])
#loc231 = loc(fused[#loc98, #loc95])
#loc232 = loc(fused[#loc103, #loc102])
#loc233 = loc(fused[#loc104, #loc105])
#loc234 = loc(fused[#loc106, #loc107])
#loc235 = loc(fused[#loc108, #loc109])
#loc236 = loc(fused[#loc111, #loc110])
#loc237 = loc(fused[#loc113, #loc112])
#loc238 = loc(fused[#loc116, #loc117])
#loc239 = loc(fused[#loc118, #loc119])
#loc240 = loc(fused[#loc123, #loc124])
#loc241 = loc(fused[#loc122, #loc124])
#loc242 = loc(fused[#loc125, #loc126])
#loc243 = loc(fused[#loc133, #loc134])
#loc244 = loc(fused[#loc135, #loc136])
#loc246 = loc(fused[#loc140, #loc141])
#loc247 = loc(fused[#loc143, #loc141])
#loc248 = loc(fused[#loc146, #loc147])
#loc249 = loc(fused[#loc145, #loc147])
#loc250 = loc(fused[#loc144, #loc148])
#loc251 = loc(fused[#loc149, #loc148])
#loc252 = loc(fused[#loc150, #loc151])
#loc253 = loc(fused[#loc152, #loc153])
#loc254 = loc(fused[#loc154, #loc151])
#loc255 = loc(fused[#loc159, #loc158])
#loc256 = loc(fused[#loc160, #loc161])
#loc257 = loc(fused[#loc162, #loc163])
#loc258 = loc(fused[#loc164, #loc165])
#loc259 = loc(fused[#loc167, #loc166])
#loc260 = loc(fused[#loc169, #loc168])
#loc261 = loc(fused[#loc172, #loc173])
#loc262 = loc(fused[#loc174, #loc175])
#loc263 = loc(fused[#loc179, #loc180])
#loc264 = loc(fused[#loc178, #loc180])
#loc265 = loc(fused[#loc181, #loc182])
