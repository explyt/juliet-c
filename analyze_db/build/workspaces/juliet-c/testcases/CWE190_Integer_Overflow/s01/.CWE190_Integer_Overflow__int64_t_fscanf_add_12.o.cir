!s32i = !cir.int<s, 32>
!s64i = !cir.int<s, 64>
!s8i = !cir.int<s, 8>
!ty__IO_codecvt = !cir.record<struct "_IO_codecvt" incomplete>
!ty__IO_marker = !cir.record<struct "_IO_marker" incomplete>
!ty__IO_wide_data = !cir.record<struct "_IO_wide_data" incomplete>
!u16i = !cir.int<u, 16>
!u64i = !cir.int<u, 64>
!void = !cir.void
#fn_attr = #cir<extra({inline = #cir.inline<no>, nothrow = #cir.nothrow, optnone = #cir.optnone, uwtable = #cir.uwtable<async>})>
!ty__IO_FILE = !cir.record<struct "_IO_FILE" {!s32i, !cir.ptr<!s8i>, !cir.ptr<!s8i>, !cir.ptr<!s8i>, !cir.ptr<!s8i>, !cir.ptr<!s8i>, !cir.ptr<!s8i>, !cir.ptr<!s8i>, !cir.ptr<!s8i>, !cir.ptr<!s8i>, !cir.ptr<!s8i>, !cir.ptr<!s8i>, !cir.ptr<!ty__IO_marker>, !cir.ptr<!cir.record<struct "_IO_FILE">>, !s32i, !s32i, !s64i, !u16i, !s8i, !cir.array<!s8i x 1>, !cir.ptr<!void>, !s64i, !cir.ptr<!ty__IO_codecvt>, !cir.ptr<!ty__IO_wide_data>, !cir.ptr<!cir.record<struct "_IO_FILE">>, !cir.ptr<!void>, !u64i, !s32i, !cir.array<!s8i x 20>} #cir.record.decl.ast>
module @"/workspaces/juliet-c/testcases/CWE190_Integer_Overflow/s01/CWE190_Integer_Overflow__int64_t_fscanf_add_12.c" attributes {cir.lang = #cir.lang<c>, cir.sob = #cir.signed_overflow_behavior<undefined>, cir.triple = "x86_64-unknown-linux-gnu", cir.type_size_info = #cir.type_size_info<char = 8, int = 32, size_t = 64>, cir.uwtable = #cir.uwtable<async>, dlti.dl_spec = #dlti.dl_spec<!llvm.ptr = dense<64> : vector<4xi64>, i1 = dense<8> : vector<2xi64>, i8 = dense<8> : vector<2xi64>, i16 = dense<16> : vector<2xi64>, i32 = dense<32> : vector<2xi64>, !llvm.ptr<270> = dense<32> : vector<4xi64>, f64 = dense<64> : vector<2xi64>, f16 = dense<16> : vector<2xi64>, !llvm.ptr<271> = dense<32> : vector<4xi64>, f128 = dense<128> : vector<2xi64>, !llvm.ptr<272> = dense<64> : vector<4xi64>, i64 = dense<64> : vector<2xi64>, i128 = dense<128> : vector<2xi64>, f80 = dense<128> : vector<2xi64>, "dlti.endianness" = "little", "dlti.mangling_mode" = "e", "dlti.stack_alignment" = 128 : i64>} {
  cir.func no_proto private @globalReturnsTrueOrFalse(...) -> !s32i loc(#loc158)
  cir.func private @__isoc99_fscanf(!cir.ptr<!ty__IO_FILE>, !cir.ptr<!s8i>, ...) -> !s32i loc(#loc159)
  cir.global "private" external @stdin : !cir.ptr<!ty__IO_FILE> {alignment = 8 : i64} loc(#loc160)
  cir.global "private" constant cir_private dsolocal @".str" = #cir.const_array<"%ld\00" : !cir.array<!s8i x 4>> : !cir.array<!s8i x 4> {alignment = 1 : i64} loc(#loc161)
  cir.func private @printLongLongLine(!s64i) loc(#loc162)
  cir.func private @printLine(!cir.ptr<!s8i>) loc(#loc163)
  cir.global "private" constant cir_private dsolocal @".str.1" = #cir.const_array<"data value is too large to perform arithmetic safely.\00" : !cir.array<!s8i x 54>> : !cir.array<!s8i x 54> {alignment = 1 : i64} loc(#loc13)
  cir.func no_proto @CWE190_Integer_Overflow__int64_t_fscanf_add_12_bad() extra(#fn_attr) {
    %0 = cir.alloca !s64i, !cir.ptr<!s64i>, ["data"] {alignment = 8 : i64} loc(#loc165)
    %1 = cir.const #cir.int<0> : !s64i loc(#loc18)
    cir.store %1, %0 : !s64i, !cir.ptr<!s64i> loc(#loc166)
    cir.scope {
      %2 = cir.get_global @globalReturnsTrueOrFalse : !cir.ptr<!cir.func<(...) -> !s32i>> loc(#loc168)
      %3 = cir.cast(bitcast, %2 : !cir.ptr<!cir.func<(...) -> !s32i>>), !cir.ptr<!cir.func<() -> !s32i>> loc(#loc168)
      %4 = cir.call %3() : (!cir.ptr<!cir.func<() -> !s32i>>) -> !s32i loc(#loc22)
      %5 = cir.cast(int_to_bool, %4 : !s32i), !cir.bool loc(#loc22)
      cir.if %5 {
        %6 = cir.get_global @__isoc99_fscanf : !cir.ptr<!cir.func<(!cir.ptr<!ty__IO_FILE>, !cir.ptr<!s8i>, ...) -> !s32i>> loc(#loc27)
        %7 = cir.get_global @stdin : !cir.ptr<!cir.ptr<!ty__IO_FILE>> loc(#loc160)
        %8 = cir.load %7 : !cir.ptr<!cir.ptr<!ty__IO_FILE>>, !cir.ptr<!ty__IO_FILE> loc(#loc28)
        %9 = cir.get_global @".str" : !cir.ptr<!cir.array<!s8i x 4>> loc(#loc161)
        %10 = cir.cast(array_to_ptrdecay, %9 : !cir.ptr<!cir.array<!s8i x 4>>), !cir.ptr<!s8i> loc(#loc161)
        %11 = cir.call @__isoc99_fscanf(%8, %10, %0) : (!cir.ptr<!ty__IO_FILE>, !cir.ptr<!s8i>, !cir.ptr<!s64i>) -> !s32i loc(#loc27)
      } else {
        %6 = cir.const #cir.int<2> : !s32i loc(#loc29)
        %7 = cir.cast(integral, %6 : !s32i), !s64i loc(#loc29)
        cir.store %7, %0 : !s64i, !cir.ptr<!s64i> loc(#loc170)
      } loc(#loc169)
    } loc(#loc167)
    cir.scope {
      %2 = cir.get_global @globalReturnsTrueOrFalse : !cir.ptr<!cir.func<(...) -> !s32i>> loc(#loc172)
      %3 = cir.cast(bitcast, %2 : !cir.ptr<!cir.func<(...) -> !s32i>>), !cir.ptr<!cir.func<() -> !s32i>> loc(#loc172)
      %4 = cir.call %3() : (!cir.ptr<!cir.func<() -> !s32i>>) -> !s32i loc(#loc33)
      %5 = cir.cast(int_to_bool, %4 : !s32i), !cir.bool loc(#loc33)
      cir.if %5 {
        cir.scope {
          %6 = cir.alloca !s64i, !cir.ptr<!s64i>, ["result", init] {alignment = 8 : i64} loc(#loc175)
          %7 = cir.load %0 : !cir.ptr<!s64i>, !s64i loc(#loc42)
          %8 = cir.const #cir.int<1> : !s32i loc(#loc41)
          %9 = cir.cast(integral, %8 : !s32i), !s64i loc(#loc41)
          %10 = cir.binop(add, %7, %9) nsw : !s64i loc(#loc42)
          cir.store %10, %6 : !s64i, !cir.ptr<!s64i> loc(#loc175)
          %11 = cir.load %6 : !cir.ptr<!s64i>, !s64i loc(#loc43)
          cir.call @printLongLongLine(%11) : (!s64i) -> () loc(#loc44)
        } loc(#loc174)
      } else {
        cir.scope {
          %6 = cir.load %0 : !cir.ptr<!s64i>, !s64i loc(#loc47)
          %7 = cir.const #cir.int<9223372036854775807> : !s64i loc(#loc48)
          %8 = cir.cmp(lt, %6, %7) : !s64i, !cir.bool loc(#loc177)
          cir.if %8 {
            %9 = cir.alloca !s64i, !cir.ptr<!s64i>, ["result", init] {alignment = 8 : i64} loc(#loc179)
            %10 = cir.load %0 : !cir.ptr<!s64i>, !s64i loc(#loc54)
            %11 = cir.const #cir.int<1> : !s32i loc(#loc53)
            %12 = cir.cast(integral, %11 : !s32i), !s64i loc(#loc53)
            %13 = cir.binop(add, %10, %12) nsw : !s64i loc(#loc54)
            cir.store %13, %9 : !s64i, !cir.ptr<!s64i> loc(#loc179)
            %14 = cir.load %9 : !cir.ptr<!s64i>, !s64i loc(#loc55)
            cir.call @printLongLongLine(%14) : (!s64i) -> () loc(#loc56)
          } else {
            %9 = cir.get_global @".str.1" : !cir.ptr<!cir.array<!s8i x 54>> loc(#loc13)
            %10 = cir.cast(array_to_ptrdecay, %9 : !cir.ptr<!cir.array<!s8i x 54>>), !cir.ptr<!s8i> loc(#loc13)
            cir.call @printLine(%10) : (!cir.ptr<!s8i>) -> () loc(#loc57)
          } loc(#loc178)
        } loc(#loc176)
      } loc(#loc173)
    } loc(#loc171)
    cir.return loc(#loc15)
  } loc(#loc164)
  cir.func no_proto @CWE190_Integer_Overflow__int64_t_fscanf_add_12_good() extra(#fn_attr) {
    %0 = cir.get_global @goodB2G : !cir.ptr<!cir.func<()>> loc(#loc181)
    cir.call %0() : (!cir.ptr<!cir.func<()>>) -> () loc(#loc60)
    %1 = cir.get_global @goodG2B : !cir.ptr<!cir.func<()>> loc(#loc182)
    cir.call %1() : (!cir.ptr<!cir.func<()>>) -> () loc(#loc62)
    cir.return loc(#loc59)
  } loc(#loc180)
  cir.func no_proto internal private @goodB2G() extra(#fn_attr) {
    %0 = cir.alloca !s64i, !cir.ptr<!s64i>, ["data"] {alignment = 8 : i64} loc(#loc184)
    %1 = cir.const #cir.int<0> : !s64i loc(#loc68)
    cir.store %1, %0 : !s64i, !cir.ptr<!s64i> loc(#loc185)
    cir.scope {
      %2 = cir.get_global @globalReturnsTrueOrFalse : !cir.ptr<!cir.func<(...) -> !s32i>> loc(#loc187)
      %3 = cir.cast(bitcast, %2 : !cir.ptr<!cir.func<(...) -> !s32i>>), !cir.ptr<!cir.func<() -> !s32i>> loc(#loc187)
      %4 = cir.call %3() : (!cir.ptr<!cir.func<() -> !s32i>>) -> !s32i loc(#loc72)
      %5 = cir.cast(int_to_bool, %4 : !s32i), !cir.bool loc(#loc72)
      cir.if %5 {
        %6 = cir.get_global @__isoc99_fscanf : !cir.ptr<!cir.func<(!cir.ptr<!ty__IO_FILE>, !cir.ptr<!s8i>, ...) -> !s32i>> loc(#loc77)
        %7 = cir.get_global @stdin : !cir.ptr<!cir.ptr<!ty__IO_FILE>> loc(#loc160)
        %8 = cir.load %7 : !cir.ptr<!cir.ptr<!ty__IO_FILE>>, !cir.ptr<!ty__IO_FILE> loc(#loc78)
        %9 = cir.get_global @".str" : !cir.ptr<!cir.array<!s8i x 4>> loc(#loc189)
        %10 = cir.cast(array_to_ptrdecay, %9 : !cir.ptr<!cir.array<!s8i x 4>>), !cir.ptr<!s8i> loc(#loc189)
        %11 = cir.call @__isoc99_fscanf(%8, %10, %0) : (!cir.ptr<!ty__IO_FILE>, !cir.ptr<!s8i>, !cir.ptr<!s64i>) -> !s32i loc(#loc77)
      } else {
        %6 = cir.get_global @__isoc99_fscanf : !cir.ptr<!cir.func<(!cir.ptr<!ty__IO_FILE>, !cir.ptr<!s8i>, ...) -> !s32i>> loc(#loc81)
        %7 = cir.get_global @stdin : !cir.ptr<!cir.ptr<!ty__IO_FILE>> loc(#loc160)
        %8 = cir.load %7 : !cir.ptr<!cir.ptr<!ty__IO_FILE>>, !cir.ptr<!ty__IO_FILE> loc(#loc82)
        %9 = cir.get_global @".str" : !cir.ptr<!cir.array<!s8i x 4>> loc(#loc190)
        %10 = cir.cast(array_to_ptrdecay, %9 : !cir.ptr<!cir.array<!s8i x 4>>), !cir.ptr<!s8i> loc(#loc190)
        %11 = cir.call @__isoc99_fscanf(%8, %10, %0) : (!cir.ptr<!ty__IO_FILE>, !cir.ptr<!s8i>, !cir.ptr<!s64i>) -> !s32i loc(#loc81)
      } loc(#loc188)
    } loc(#loc186)
    cir.scope {
      %2 = cir.get_global @globalReturnsTrueOrFalse : !cir.ptr<!cir.func<(...) -> !s32i>> loc(#loc192)
      %3 = cir.cast(bitcast, %2 : !cir.ptr<!cir.func<(...) -> !s32i>>), !cir.ptr<!cir.func<() -> !s32i>> loc(#loc192)
      %4 = cir.call %3() : (!cir.ptr<!cir.func<() -> !s32i>>) -> !s32i loc(#loc87)
      %5 = cir.cast(int_to_bool, %4 : !s32i), !cir.bool loc(#loc87)
      cir.if %5 {
        cir.scope {
          %6 = cir.load %0 : !cir.ptr<!s64i>, !s64i loc(#loc94)
          %7 = cir.const #cir.int<9223372036854775807> : !s64i loc(#loc95)
          %8 = cir.cmp(lt, %6, %7) : !s64i, !cir.bool loc(#loc195)
          cir.if %8 {
            %9 = cir.alloca !s64i, !cir.ptr<!s64i>, ["result", init] {alignment = 8 : i64} loc(#loc197)
            %10 = cir.load %0 : !cir.ptr<!s64i>, !s64i loc(#loc101)
            %11 = cir.const #cir.int<1> : !s32i loc(#loc100)
            %12 = cir.cast(integral, %11 : !s32i), !s64i loc(#loc100)
            %13 = cir.binop(add, %10, %12) nsw : !s64i loc(#loc101)
            cir.store %13, %9 : !s64i, !cir.ptr<!s64i> loc(#loc197)
            %14 = cir.load %9 : !cir.ptr<!s64i>, !s64i loc(#loc102)
            cir.call @printLongLongLine(%14) : (!s64i) -> () loc(#loc103)
          } else {
            %9 = cir.get_global @".str.1" : !cir.ptr<!cir.array<!s8i x 54>> loc(#loc104)
            %10 = cir.cast(array_to_ptrdecay, %9 : !cir.ptr<!cir.array<!s8i x 54>>), !cir.ptr<!s8i> loc(#loc104)
            cir.call @printLine(%10) : (!cir.ptr<!s8i>) -> () loc(#loc105)
          } loc(#loc196)
        } loc(#loc194)
      } else {
        cir.scope {
          %6 = cir.load %0 : !cir.ptr<!s64i>, !s64i loc(#loc108)
          %7 = cir.const #cir.int<9223372036854775807> : !s64i loc(#loc109)
          %8 = cir.cmp(lt, %6, %7) : !s64i, !cir.bool loc(#loc199)
          cir.if %8 {
            %9 = cir.alloca !s64i, !cir.ptr<!s64i>, ["result", init] {alignment = 8 : i64} loc(#loc201)
            %10 = cir.load %0 : !cir.ptr<!s64i>, !s64i loc(#loc115)
            %11 = cir.const #cir.int<1> : !s32i loc(#loc114)
            %12 = cir.cast(integral, %11 : !s32i), !s64i loc(#loc114)
            %13 = cir.binop(add, %10, %12) nsw : !s64i loc(#loc115)
            cir.store %13, %9 : !s64i, !cir.ptr<!s64i> loc(#loc201)
            %14 = cir.load %9 : !cir.ptr<!s64i>, !s64i loc(#loc116)
            cir.call @printLongLongLine(%14) : (!s64i) -> () loc(#loc117)
          } else {
            %9 = cir.get_global @".str.1" : !cir.ptr<!cir.array<!s8i x 54>> loc(#loc118)
            %10 = cir.cast(array_to_ptrdecay, %9 : !cir.ptr<!cir.array<!s8i x 54>>), !cir.ptr<!s8i> loc(#loc118)
            cir.call @printLine(%10) : (!cir.ptr<!s8i>) -> () loc(#loc119)
          } loc(#loc200)
        } loc(#loc198)
      } loc(#loc193)
    } loc(#loc191)
    cir.return loc(#loc65)
  } loc(#loc183)
  cir.func no_proto internal private @goodG2B() extra(#fn_attr) {
    %0 = cir.alloca !s64i, !cir.ptr<!s64i>, ["data"] {alignment = 8 : i64} loc(#loc203)
    %1 = cir.const #cir.int<0> : !s64i loc(#loc124)
    cir.store %1, %0 : !s64i, !cir.ptr<!s64i> loc(#loc204)
    cir.scope {
      %2 = cir.get_global @globalReturnsTrueOrFalse : !cir.ptr<!cir.func<(...) -> !s32i>> loc(#loc206)
      %3 = cir.cast(bitcast, %2 : !cir.ptr<!cir.func<(...) -> !s32i>>), !cir.ptr<!cir.func<() -> !s32i>> loc(#loc206)
      %4 = cir.call %3() : (!cir.ptr<!cir.func<() -> !s32i>>) -> !s32i loc(#loc128)
      %5 = cir.cast(int_to_bool, %4 : !s32i), !cir.bool loc(#loc128)
      cir.if %5 {
        %6 = cir.const #cir.int<2> : !s32i loc(#loc133)
        %7 = cir.cast(integral, %6 : !s32i), !s64i loc(#loc133)
        cir.store %7, %0 : !s64i, !cir.ptr<!s64i> loc(#loc208)
      } else {
        %6 = cir.const #cir.int<2> : !s32i loc(#loc135)
        %7 = cir.cast(integral, %6 : !s32i), !s64i loc(#loc135)
        cir.store %7, %0 : !s64i, !cir.ptr<!s64i> loc(#loc209)
      } loc(#loc207)
    } loc(#loc205)
    cir.scope {
      %2 = cir.get_global @globalReturnsTrueOrFalse : !cir.ptr<!cir.func<(...) -> !s32i>> loc(#loc211)
      %3 = cir.cast(bitcast, %2 : !cir.ptr<!cir.func<(...) -> !s32i>>), !cir.ptr<!cir.func<() -> !s32i>> loc(#loc211)
      %4 = cir.call %3() : (!cir.ptr<!cir.func<() -> !s32i>>) -> !s32i loc(#loc139)
      %5 = cir.cast(int_to_bool, %4 : !s32i), !cir.bool loc(#loc139)
      cir.if %5 {
        cir.scope {
          %6 = cir.alloca !s64i, !cir.ptr<!s64i>, ["result", init] {alignment = 8 : i64} loc(#loc214)
          %7 = cir.load %0 : !cir.ptr<!s64i>, !s64i loc(#loc148)
          %8 = cir.const #cir.int<1> : !s32i loc(#loc147)
          %9 = cir.cast(integral, %8 : !s32i), !s64i loc(#loc147)
          %10 = cir.binop(add, %7, %9) nsw : !s64i loc(#loc148)
          cir.store %10, %6 : !s64i, !cir.ptr<!s64i> loc(#loc214)
          %11 = cir.load %6 : !cir.ptr<!s64i>, !s64i loc(#loc149)
          cir.call @printLongLongLine(%11) : (!s64i) -> () loc(#loc150)
        } loc(#loc213)
      } else {
        cir.scope {
          %6 = cir.alloca !s64i, !cir.ptr<!s64i>, ["result", init] {alignment = 8 : i64} loc(#loc216)
          %7 = cir.load %0 : !cir.ptr<!s64i>, !s64i loc(#loc155)
          %8 = cir.const #cir.int<1> : !s32i loc(#loc154)
          %9 = cir.cast(integral, %8 : !s32i), !s64i loc(#loc154)
          %10 = cir.binop(add, %7, %9) nsw : !s64i loc(#loc155)
          cir.store %10, %6 : !s64i, !cir.ptr<!s64i> loc(#loc216)
          %11 = cir.load %6 : !cir.ptr<!s64i>, !s64i loc(#loc156)
          cir.call @printLongLongLine(%11) : (!s64i) -> () loc(#loc157)
        } loc(#loc215)
      } loc(#loc212)
    } loc(#loc210)
    cir.return loc(#loc121)
  } loc(#loc202)
} loc(#loc)
#loc = loc("/workspaces/juliet-c/testcases/CWE190_Integer_Overflow/s01/CWE190_Integer_Overflow__int64_t_fscanf_add_12.c":0:0)
#loc1 = loc("../../../testcasesupport/std_testcase_io.h":52:1)
#loc2 = loc("../../../testcasesupport/std_testcase_io.h":52:30)
#loc3 = loc("/usr/include/stdio.h":463:1)
#loc4 = loc("/usr/include/stdio.h":465:33)
#loc5 = loc("/usr/include/stdio.h":149:1)
#loc6 = loc("/usr/include/stdio.h":149:14)
#loc7 = loc("CWE190_Integer_Overflow__int64_t_fscanf_add_12.c":30:24)
#loc8 = loc("CWE190_Integer_Overflow__int64_t_fscanf_add_12.c":30:28)
#loc9 = loc("../../../testcasesupport/std_testcase_io.h":26:1)
#loc10 = loc("../../../testcasesupport/std_testcase_io.h":26:49)
#loc11 = loc("../../../testcasesupport/std_testcase_io.h":14:1)
#loc12 = loc("../../../testcasesupport/std_testcase_io.h":14:33)
#loc13 = loc("CWE190_Integer_Overflow__int64_t_fscanf_add_12.c":55:23)
#loc14 = loc("CWE190_Integer_Overflow__int64_t_fscanf_add_12.c":23:1)
#loc15 = loc("CWE190_Integer_Overflow__int64_t_fscanf_add_12.c":58:1)
#loc16 = loc("CWE190_Integer_Overflow__int64_t_fscanf_add_12.c":25:5)
#loc17 = loc("CWE190_Integer_Overflow__int64_t_fscanf_add_12.c":25:13)
#loc18 = loc("CWE190_Integer_Overflow__int64_t_fscanf_add_12.c":26:12)
#loc19 = loc("CWE190_Integer_Overflow__int64_t_fscanf_add_12.c":26:5)
#loc20 = loc("CWE190_Integer_Overflow__int64_t_fscanf_add_12.c":27:5)
#loc21 = loc("CWE190_Integer_Overflow__int64_t_fscanf_add_12.c":36:5)
#loc22 = loc("CWE190_Integer_Overflow__int64_t_fscanf_add_12.c":27:8)
#loc23 = loc("CWE190_Integer_Overflow__int64_t_fscanf_add_12.c":27:33)
#loc24 = loc("CWE190_Integer_Overflow__int64_t_fscanf_add_12.c":28:5)
#loc25 = loc("CWE190_Integer_Overflow__int64_t_fscanf_add_12.c":31:5)
#loc26 = loc("CWE190_Integer_Overflow__int64_t_fscanf_add_12.c":33:5)
#loc27 = loc("CWE190_Integer_Overflow__int64_t_fscanf_add_12.c":30:9)
#loc28 = loc("CWE190_Integer_Overflow__int64_t_fscanf_add_12.c":30:17)
#loc29 = loc("CWE190_Integer_Overflow__int64_t_fscanf_add_12.c":35:16)
#loc30 = loc("CWE190_Integer_Overflow__int64_t_fscanf_add_12.c":35:9)
#loc31 = loc("CWE190_Integer_Overflow__int64_t_fscanf_add_12.c":37:5)
#loc32 = loc("CWE190_Integer_Overflow__int64_t_fscanf_add_12.c":57:5)
#loc33 = loc("CWE190_Integer_Overflow__int64_t_fscanf_add_12.c":37:8)
#loc34 = loc("CWE190_Integer_Overflow__int64_t_fscanf_add_12.c":37:33)
#loc35 = loc("CWE190_Integer_Overflow__int64_t_fscanf_add_12.c":38:5)
#loc36 = loc("CWE190_Integer_Overflow__int64_t_fscanf_add_12.c":44:5)
#loc37 = loc("CWE190_Integer_Overflow__int64_t_fscanf_add_12.c":46:5)
#loc38 = loc("CWE190_Integer_Overflow__int64_t_fscanf_add_12.c":39:9)
#loc39 = loc("CWE190_Integer_Overflow__int64_t_fscanf_add_12.c":43:9)
#loc40 = loc("CWE190_Integer_Overflow__int64_t_fscanf_add_12.c":41:13)
#loc41 = loc("CWE190_Integer_Overflow__int64_t_fscanf_add_12.c":41:37)
#loc42 = loc("CWE190_Integer_Overflow__int64_t_fscanf_add_12.c":41:30)
#loc43 = loc("CWE190_Integer_Overflow__int64_t_fscanf_add_12.c":42:31)
#loc44 = loc("CWE190_Integer_Overflow__int64_t_fscanf_add_12.c":42:13)
#loc45 = loc("CWE190_Integer_Overflow__int64_t_fscanf_add_12.c":48:9)
#loc46 = loc("CWE190_Integer_Overflow__int64_t_fscanf_add_12.c":56:9)
#loc47 = loc("CWE190_Integer_Overflow__int64_t_fscanf_add_12.c":48:13)
#loc48 = loc("CWE190_Integer_Overflow__int64_t_fscanf_add_12.c":48:20)
#loc49 = loc("CWE190_Integer_Overflow__int64_t_fscanf_add_12.c":49:9)
#loc50 = loc("CWE190_Integer_Overflow__int64_t_fscanf_add_12.c":52:9)
#loc51 = loc("CWE190_Integer_Overflow__int64_t_fscanf_add_12.c":54:9)
#loc52 = loc("CWE190_Integer_Overflow__int64_t_fscanf_add_12.c":50:13)
#loc53 = loc("CWE190_Integer_Overflow__int64_t_fscanf_add_12.c":50:37)
#loc54 = loc("CWE190_Integer_Overflow__int64_t_fscanf_add_12.c":50:30)
#loc55 = loc("CWE190_Integer_Overflow__int64_t_fscanf_add_12.c":51:31)
#loc56 = loc("CWE190_Integer_Overflow__int64_t_fscanf_add_12.c":51:13)
#loc57 = loc("CWE190_Integer_Overflow__int64_t_fscanf_add_12.c":55:13)
#loc58 = loc("CWE190_Integer_Overflow__int64_t_fscanf_add_12.c":144:1)
#loc59 = loc("CWE190_Integer_Overflow__int64_t_fscanf_add_12.c":148:1)
#loc60 = loc("CWE190_Integer_Overflow__int64_t_fscanf_add_12.c":146:5)
#loc61 = loc("CWE190_Integer_Overflow__int64_t_fscanf_add_12.c":146:13)
#loc62 = loc("CWE190_Integer_Overflow__int64_t_fscanf_add_12.c":147:5)
#loc63 = loc("CWE190_Integer_Overflow__int64_t_fscanf_add_12.c":147:13)
#loc64 = loc("CWE190_Integer_Overflow__int64_t_fscanf_add_12.c":67:1)
#loc65 = loc("CWE190_Integer_Overflow__int64_t_fscanf_add_12.c":107:1)
#loc66 = loc("CWE190_Integer_Overflow__int64_t_fscanf_add_12.c":69:5)
#loc67 = loc("CWE190_Integer_Overflow__int64_t_fscanf_add_12.c":69:13)
#loc68 = loc("CWE190_Integer_Overflow__int64_t_fscanf_add_12.c":70:12)
#loc69 = loc("CWE190_Integer_Overflow__int64_t_fscanf_add_12.c":70:5)
#loc70 = loc("CWE190_Integer_Overflow__int64_t_fscanf_add_12.c":71:5)
#loc71 = loc("CWE190_Integer_Overflow__int64_t_fscanf_add_12.c":80:5)
#loc72 = loc("CWE190_Integer_Overflow__int64_t_fscanf_add_12.c":71:8)
#loc73 = loc("CWE190_Integer_Overflow__int64_t_fscanf_add_12.c":71:33)
#loc74 = loc("CWE190_Integer_Overflow__int64_t_fscanf_add_12.c":72:5)
#loc75 = loc("CWE190_Integer_Overflow__int64_t_fscanf_add_12.c":75:5)
#loc76 = loc("CWE190_Integer_Overflow__int64_t_fscanf_add_12.c":77:5)
#loc77 = loc("CWE190_Integer_Overflow__int64_t_fscanf_add_12.c":74:9)
#loc78 = loc("CWE190_Integer_Overflow__int64_t_fscanf_add_12.c":74:17)
#loc79 = loc("CWE190_Integer_Overflow__int64_t_fscanf_add_12.c":74:24)
#loc80 = loc("CWE190_Integer_Overflow__int64_t_fscanf_add_12.c":74:28)
#loc81 = loc("CWE190_Integer_Overflow__int64_t_fscanf_add_12.c":79:9)
#loc82 = loc("CWE190_Integer_Overflow__int64_t_fscanf_add_12.c":79:17)
#loc83 = loc("CWE190_Integer_Overflow__int64_t_fscanf_add_12.c":79:24)
#loc84 = loc("CWE190_Integer_Overflow__int64_t_fscanf_add_12.c":79:28)
#loc85 = loc("CWE190_Integer_Overflow__int64_t_fscanf_add_12.c":81:5)
#loc86 = loc("CWE190_Integer_Overflow__int64_t_fscanf_add_12.c":106:5)
#loc87 = loc("CWE190_Integer_Overflow__int64_t_fscanf_add_12.c":81:8)
#loc88 = loc("CWE190_Integer_Overflow__int64_t_fscanf_add_12.c":81:33)
#loc89 = loc("CWE190_Integer_Overflow__int64_t_fscanf_add_12.c":82:5)
#loc90 = loc("CWE190_Integer_Overflow__int64_t_fscanf_add_12.c":93:5)
#loc91 = loc("CWE190_Integer_Overflow__int64_t_fscanf_add_12.c":95:5)
#loc92 = loc("CWE190_Integer_Overflow__int64_t_fscanf_add_12.c":84:9)
#loc93 = loc("CWE190_Integer_Overflow__int64_t_fscanf_add_12.c":92:9)
#loc94 = loc("CWE190_Integer_Overflow__int64_t_fscanf_add_12.c":84:13)
#loc95 = loc("CWE190_Integer_Overflow__int64_t_fscanf_add_12.c":84:20)
#loc96 = loc("CWE190_Integer_Overflow__int64_t_fscanf_add_12.c":85:9)
#loc97 = loc("CWE190_Integer_Overflow__int64_t_fscanf_add_12.c":88:9)
#loc98 = loc("CWE190_Integer_Overflow__int64_t_fscanf_add_12.c":90:9)
#loc99 = loc("CWE190_Integer_Overflow__int64_t_fscanf_add_12.c":86:13)
#loc100 = loc("CWE190_Integer_Overflow__int64_t_fscanf_add_12.c":86:37)
#loc101 = loc("CWE190_Integer_Overflow__int64_t_fscanf_add_12.c":86:30)
#loc102 = loc("CWE190_Integer_Overflow__int64_t_fscanf_add_12.c":87:31)
#loc103 = loc("CWE190_Integer_Overflow__int64_t_fscanf_add_12.c":87:13)
#loc104 = loc("CWE190_Integer_Overflow__int64_t_fscanf_add_12.c":91:23)
#loc105 = loc("CWE190_Integer_Overflow__int64_t_fscanf_add_12.c":91:13)
#loc106 = loc("CWE190_Integer_Overflow__int64_t_fscanf_add_12.c":97:9)
#loc107 = loc("CWE190_Integer_Overflow__int64_t_fscanf_add_12.c":105:9)
#loc108 = loc("CWE190_Integer_Overflow__int64_t_fscanf_add_12.c":97:13)
#loc109 = loc("CWE190_Integer_Overflow__int64_t_fscanf_add_12.c":97:20)
#loc110 = loc("CWE190_Integer_Overflow__int64_t_fscanf_add_12.c":98:9)
#loc111 = loc("CWE190_Integer_Overflow__int64_t_fscanf_add_12.c":101:9)
#loc112 = loc("CWE190_Integer_Overflow__int64_t_fscanf_add_12.c":103:9)
#loc113 = loc("CWE190_Integer_Overflow__int64_t_fscanf_add_12.c":99:13)
#loc114 = loc("CWE190_Integer_Overflow__int64_t_fscanf_add_12.c":99:37)
#loc115 = loc("CWE190_Integer_Overflow__int64_t_fscanf_add_12.c":99:30)
#loc116 = loc("CWE190_Integer_Overflow__int64_t_fscanf_add_12.c":100:31)
#loc117 = loc("CWE190_Integer_Overflow__int64_t_fscanf_add_12.c":100:13)
#loc118 = loc("CWE190_Integer_Overflow__int64_t_fscanf_add_12.c":104:23)
#loc119 = loc("CWE190_Integer_Overflow__int64_t_fscanf_add_12.c":104:13)
#loc120 = loc("CWE190_Integer_Overflow__int64_t_fscanf_add_12.c":112:1)
#loc121 = loc("CWE190_Integer_Overflow__int64_t_fscanf_add_12.c":142:1)
#loc122 = loc("CWE190_Integer_Overflow__int64_t_fscanf_add_12.c":114:5)
#loc123 = loc("CWE190_Integer_Overflow__int64_t_fscanf_add_12.c":114:13)
#loc124 = loc("CWE190_Integer_Overflow__int64_t_fscanf_add_12.c":115:12)
#loc125 = loc("CWE190_Integer_Overflow__int64_t_fscanf_add_12.c":115:5)
#loc126 = loc("CWE190_Integer_Overflow__int64_t_fscanf_add_12.c":116:5)
#loc127 = loc("CWE190_Integer_Overflow__int64_t_fscanf_add_12.c":125:5)
#loc128 = loc("CWE190_Integer_Overflow__int64_t_fscanf_add_12.c":116:8)
#loc129 = loc("CWE190_Integer_Overflow__int64_t_fscanf_add_12.c":116:33)
#loc130 = loc("CWE190_Integer_Overflow__int64_t_fscanf_add_12.c":117:5)
#loc131 = loc("CWE190_Integer_Overflow__int64_t_fscanf_add_12.c":120:5)
#loc132 = loc("CWE190_Integer_Overflow__int64_t_fscanf_add_12.c":122:5)
#loc133 = loc("CWE190_Integer_Overflow__int64_t_fscanf_add_12.c":119:16)
#loc134 = loc("CWE190_Integer_Overflow__int64_t_fscanf_add_12.c":119:9)
#loc135 = loc("CWE190_Integer_Overflow__int64_t_fscanf_add_12.c":124:16)
#loc136 = loc("CWE190_Integer_Overflow__int64_t_fscanf_add_12.c":124:9)
#loc137 = loc("CWE190_Integer_Overflow__int64_t_fscanf_add_12.c":126:5)
#loc138 = loc("CWE190_Integer_Overflow__int64_t_fscanf_add_12.c":141:5)
#loc139 = loc("CWE190_Integer_Overflow__int64_t_fscanf_add_12.c":126:8)
#loc140 = loc("CWE190_Integer_Overflow__int64_t_fscanf_add_12.c":126:33)
#loc141 = loc("CWE190_Integer_Overflow__int64_t_fscanf_add_12.c":127:5)
#loc142 = loc("CWE190_Integer_Overflow__int64_t_fscanf_add_12.c":133:5)
#loc143 = loc("CWE190_Integer_Overflow__int64_t_fscanf_add_12.c":135:5)
#loc144 = loc("CWE190_Integer_Overflow__int64_t_fscanf_add_12.c":128:9)
#loc145 = loc("CWE190_Integer_Overflow__int64_t_fscanf_add_12.c":132:9)
#loc146 = loc("CWE190_Integer_Overflow__int64_t_fscanf_add_12.c":130:13)
#loc147 = loc("CWE190_Integer_Overflow__int64_t_fscanf_add_12.c":130:37)
#loc148 = loc("CWE190_Integer_Overflow__int64_t_fscanf_add_12.c":130:30)
#loc149 = loc("CWE190_Integer_Overflow__int64_t_fscanf_add_12.c":131:31)
#loc150 = loc("CWE190_Integer_Overflow__int64_t_fscanf_add_12.c":131:13)
#loc151 = loc("CWE190_Integer_Overflow__int64_t_fscanf_add_12.c":136:9)
#loc152 = loc("CWE190_Integer_Overflow__int64_t_fscanf_add_12.c":140:9)
#loc153 = loc("CWE190_Integer_Overflow__int64_t_fscanf_add_12.c":138:13)
#loc154 = loc("CWE190_Integer_Overflow__int64_t_fscanf_add_12.c":138:37)
#loc155 = loc("CWE190_Integer_Overflow__int64_t_fscanf_add_12.c":138:30)
#loc156 = loc("CWE190_Integer_Overflow__int64_t_fscanf_add_12.c":139:31)
#loc157 = loc("CWE190_Integer_Overflow__int64_t_fscanf_add_12.c":139:13)
#loc158 = loc(fused[#loc1, #loc2])
#loc159 = loc(fused[#loc3, #loc4])
#loc160 = loc(fused[#loc5, #loc6])
#loc161 = loc(fused[#loc7, #loc8])
#loc162 = loc(fused[#loc9, #loc10])
#loc163 = loc(fused[#loc11, #loc12])
#loc164 = loc(fused[#loc14, #loc15])
#loc165 = loc(fused[#loc16, #loc17])
#loc166 = loc(fused[#loc19, #loc18])
#loc167 = loc(fused[#loc20, #loc21])
#loc168 = loc(fused[#loc22, #loc23])
#loc169 = loc(fused[#loc24, #loc25, #loc26, #loc21])
#loc170 = loc(fused[#loc30, #loc29])
#loc171 = loc(fused[#loc31, #loc32])
#loc172 = loc(fused[#loc33, #loc34])
#loc173 = loc(fused[#loc35, #loc36, #loc37, #loc32])
#loc174 = loc(fused[#loc38, #loc39])
#loc175 = loc(fused[#loc40, #loc41])
#loc176 = loc(fused[#loc45, #loc46])
#loc177 = loc(fused[#loc47, #loc48])
#loc178 = loc(fused[#loc49, #loc50, #loc51, #loc46])
#loc179 = loc(fused[#loc52, #loc53])
#loc180 = loc(fused[#loc58, #loc59])
#loc181 = loc(fused[#loc60, #loc61])
#loc182 = loc(fused[#loc62, #loc63])
#loc183 = loc(fused[#loc64, #loc65])
#loc184 = loc(fused[#loc66, #loc67])
#loc185 = loc(fused[#loc69, #loc68])
#loc186 = loc(fused[#loc70, #loc71])
#loc187 = loc(fused[#loc72, #loc73])
#loc188 = loc(fused[#loc74, #loc75, #loc76, #loc71])
#loc189 = loc(fused[#loc79, #loc80])
#loc190 = loc(fused[#loc83, #loc84])
#loc191 = loc(fused[#loc85, #loc86])
#loc192 = loc(fused[#loc87, #loc88])
#loc193 = loc(fused[#loc89, #loc90, #loc91, #loc86])
#loc194 = loc(fused[#loc92, #loc93])
#loc195 = loc(fused[#loc94, #loc95])
#loc196 = loc(fused[#loc96, #loc97, #loc98, #loc93])
#loc197 = loc(fused[#loc99, #loc100])
#loc198 = loc(fused[#loc106, #loc107])
#loc199 = loc(fused[#loc108, #loc109])
#loc200 = loc(fused[#loc110, #loc111, #loc112, #loc107])
#loc201 = loc(fused[#loc113, #loc114])
#loc202 = loc(fused[#loc120, #loc121])
#loc203 = loc(fused[#loc122, #loc123])
#loc204 = loc(fused[#loc125, #loc124])
#loc205 = loc(fused[#loc126, #loc127])
#loc206 = loc(fused[#loc128, #loc129])
#loc207 = loc(fused[#loc130, #loc131, #loc132, #loc127])
#loc208 = loc(fused[#loc134, #loc133])
#loc209 = loc(fused[#loc136, #loc135])
#loc210 = loc(fused[#loc137, #loc138])
#loc211 = loc(fused[#loc139, #loc140])
#loc212 = loc(fused[#loc141, #loc142, #loc143, #loc138])
#loc213 = loc(fused[#loc144, #loc145])
#loc214 = loc(fused[#loc146, #loc147])
#loc215 = loc(fused[#loc151, #loc152])
#loc216 = loc(fused[#loc153, #loc154])
