!s32i = !cir.int<s, 32>
!u64i = !cir.int<u, 64>
!void = !cir.void
#fn_attr = #cir<extra({nothrow = #cir.nothrow})>
#fn_attr1 = #cir<extra({inline = #cir.inline<no>, optnone = #cir.optnone})>
#loc7 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE131_loop_62b.cpp":24:16)
#loc8 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE131_loop_62b.cpp":24:23)
#loc24 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE131_loop_62b.cpp":36:20)
#loc25 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE131_loop_62b.cpp":36:27)
#loc44 = loc(fused[#loc7, #loc8])
#loc51 = loc(fused[#loc24, #loc25])
module @"/home/ladisgin/git_proj/test_projects/juliet-c/testcases/CWE122_Heap_Based_Buffer_Overflow/s05/CWE122_Heap_Based_Buffer_Overflow__CWE131_loop_62b.cpp" attributes {cir.lang = #cir.lang<cxx>, cir.sob = #cir.signed_overflow_behavior<undefined>, cir.triple = "x86_64-unknown-linux-gnu", dlti.dl_spec = #dlti.dl_spec<#dlti.dl_entry<i128, dense<128> : vector<2xi64>>, #dlti.dl_entry<f80, dense<128> : vector<2xi64>>, #dlti.dl_entry<!llvm.ptr, dense<64> : vector<4xi64>>, #dlti.dl_entry<i1, dense<8> : vector<2xi64>>, #dlti.dl_entry<i8, dense<8> : vector<2xi64>>, #dlti.dl_entry<i16, dense<16> : vector<2xi64>>, #dlti.dl_entry<i32, dense<32> : vector<2xi64>>, #dlti.dl_entry<f128, dense<128> : vector<2xi64>>, #dlti.dl_entry<f16, dense<16> : vector<2xi64>>, #dlti.dl_entry<!llvm.ptr<270>, dense<32> : vector<4xi64>>, #dlti.dl_entry<f64, dense<64> : vector<2xi64>>, #dlti.dl_entry<!llvm.ptr<271>, dense<32> : vector<4xi64>>, #dlti.dl_entry<!llvm.ptr<272>, dense<64> : vector<4xi64>>, #dlti.dl_entry<i64, dense<64> : vector<2xi64>>, #dlti.dl_entry<"dlti.stack_alignment", 128 : i64>, #dlti.dl_entry<"dlti.endianness", "little">>, llvm.data_layout = "e-m:e-p270:32:32-p271:32:32-p272:64:64-i64:64-i128:128-f80:128-n8:16:32:64-S128"} {
  cir.func private  @malloc(!u64i) -> !cir.ptr<!void> extra(#fn_attr) loc(#loc41)
  cir.func private  @exit(!s32i) extra(#fn_attr) loc(#loc42)
  cir.func  @_ZN49CWE122_Heap_Based_Buffer_Overflow__CWE131_loop_629badSourceERPi(%arg0: !cir.ptr<!cir.ptr<!s32i>> loc(fused[#loc7, #loc8])) extra(#fn_attr1) {
    %0 = cir.alloca !cir.ptr<!cir.ptr<!s32i>>, !cir.ptr<!cir.ptr<!cir.ptr<!s32i>>>, ["data", init, const] {alignment = 8 : i64} loc(#loc44)
    cir.store %arg0, %0 : !cir.ptr<!cir.ptr<!s32i>>, !cir.ptr<!cir.ptr<!cir.ptr<!s32i>>> loc(#loc9)
    %1 = cir.get_global @malloc : !cir.ptr<!cir.func<!cir.ptr<!void> (!u64i)>> loc(#loc10)
    %2 = cir.const #cir.int<10> : !s32i loc(#loc11)
    %3 = cir.cast(integral, %2 : !s32i), !u64i loc(#loc11)
    %4 = cir.call @malloc(%3) : (!u64i) -> !cir.ptr<!void> extra(#fn_attr) loc(#loc10)
    %5 = cir.cast(bitcast, %4 : !cir.ptr<!void>), !cir.ptr<!s32i> loc(#loc45)
    %6 = cir.load %0 : !cir.ptr<!cir.ptr<!cir.ptr<!s32i>>>, !cir.ptr<!cir.ptr<!s32i>> loc(#loc13)
    cir.store %5, %6 : !cir.ptr<!s32i>, !cir.ptr<!cir.ptr<!s32i>> loc(#loc46)
    cir.scope {
      %7 = cir.load %0 : !cir.ptr<!cir.ptr<!cir.ptr<!s32i>>>, !cir.ptr<!cir.ptr<!s32i>> loc(#loc16)
      %8 = cir.load %7 : !cir.ptr<!cir.ptr<!s32i>>, !cir.ptr<!s32i> loc(#loc16)
      %9 = cir.const #cir.ptr<null> : !cir.ptr<!s32i> loc(#loc17)
      %10 = cir.cmp(eq, %8, %9) : !cir.ptr<!s32i>, !cir.bool loc(#loc48)
      cir.if %10 {
        %11 = cir.get_global @exit : !cir.ptr<!cir.func<!void (!s32i)>> loc(#loc19)
        %12 = cir.const #cir.int<1> : !s32i loc(#loc20)
        %13 = cir.unary(minus, %12) : !s32i, !s32i loc(#loc21)
        cir.call @exit(%13) : (!s32i) -> () extra(#fn_attr) loc(#loc19)
      } loc(#loc49)
    } loc(#loc47)
    cir.return loc(#loc6)
  } loc(#loc43)
  cir.func  @_ZN49CWE122_Heap_Based_Buffer_Overflow__CWE131_loop_6213goodG2BSourceERPi(%arg0: !cir.ptr<!cir.ptr<!s32i>> loc(fused[#loc24, #loc25])) extra(#fn_attr1) {
    %0 = cir.alloca !cir.ptr<!cir.ptr<!s32i>>, !cir.ptr<!cir.ptr<!cir.ptr<!s32i>>>, ["data", init, const] {alignment = 8 : i64} loc(#loc51)
    cir.store %arg0, %0 : !cir.ptr<!cir.ptr<!s32i>>, !cir.ptr<!cir.ptr<!cir.ptr<!s32i>>> loc(#loc26)
    %1 = cir.get_global @malloc : !cir.ptr<!cir.func<!cir.ptr<!void> (!u64i)>> loc(#loc27)
    %2 = cir.const #cir.int<10> : !s32i loc(#loc28)
    %3 = cir.cast(integral, %2 : !s32i), !u64i loc(#loc28)
    %4 = cir.const #cir.int<4> : !u64i loc(#loc52)
    %5 = cir.binop(mul, %3, %4) : !u64i loc(#loc53)
    %6 = cir.call @malloc(%5) : (!u64i) -> !cir.ptr<!void> extra(#fn_attr) loc(#loc27)
    %7 = cir.cast(bitcast, %6 : !cir.ptr<!void>), !cir.ptr<!s32i> loc(#loc54)
    %8 = cir.load %0 : !cir.ptr<!cir.ptr<!cir.ptr<!s32i>>>, !cir.ptr<!cir.ptr<!s32i>> loc(#loc32)
    cir.store %7, %8 : !cir.ptr<!s32i>, !cir.ptr<!cir.ptr<!s32i>> loc(#loc55)
    cir.scope {
      %9 = cir.load %0 : !cir.ptr<!cir.ptr<!cir.ptr<!s32i>>>, !cir.ptr<!cir.ptr<!s32i>> loc(#loc35)
      %10 = cir.load %9 : !cir.ptr<!cir.ptr<!s32i>>, !cir.ptr<!s32i> loc(#loc35)
      %11 = cir.const #cir.ptr<null> : !cir.ptr<!s32i> loc(#loc36)
      %12 = cir.cmp(eq, %10, %11) : !cir.ptr<!s32i>, !cir.bool loc(#loc57)
      cir.if %12 {
        %13 = cir.get_global @exit : !cir.ptr<!cir.func<!void (!s32i)>> loc(#loc38)
        %14 = cir.const #cir.int<1> : !s32i loc(#loc39)
        %15 = cir.unary(minus, %14) : !s32i, !s32i loc(#loc40)
        cir.call @exit(%15) : (!s32i) -> () extra(#fn_attr) loc(#loc38)
      } loc(#loc58)
    } loc(#loc56)
    cir.return loc(#loc23)
  } loc(#loc50)
} loc(#loc)
#loc = loc("/home/ladisgin/git_proj/test_projects/juliet-c/testcases/CWE122_Heap_Based_Buffer_Overflow/s05/CWE122_Heap_Based_Buffer_Overflow__CWE131_loop_62b.cpp":0:0)
#loc1 = loc("/usr/include/stdlib.h":672:1)
#loc2 = loc("/usr/include/stdlib.h":672:45)
#loc3 = loc("/usr/include/stdlib.h":756:1)
#loc4 = loc("/usr/include/stdlib.h":756:70)
#loc5 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE131_loop_62b.cpp":24:1)
#loc6 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE131_loop_62b.cpp":29:1)
#loc9 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE131_loop_62b.cpp":25:1)
#loc10 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE131_loop_62b.cpp":27:19)
#loc11 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE131_loop_62b.cpp":27:26)
#loc12 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE131_loop_62b.cpp":27:28)
#loc13 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE131_loop_62b.cpp":27:5)
#loc14 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE131_loop_62b.cpp":28:5)
#loc15 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE131_loop_62b.cpp":28:33)
#loc16 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE131_loop_62b.cpp":28:9)
#loc17 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE131_loop_62b.cpp":28:17)
#loc18 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE131_loop_62b.cpp":28:23)
#loc19 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE131_loop_62b.cpp":28:24)
#loc20 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE131_loop_62b.cpp":28:30)
#loc21 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE131_loop_62b.cpp":28:29)
#loc22 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE131_loop_62b.cpp":36:1)
#loc23 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE131_loop_62b.cpp":41:1)
#loc26 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE131_loop_62b.cpp":37:1)
#loc27 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE131_loop_62b.cpp":39:19)
#loc28 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE131_loop_62b.cpp":39:26)
#loc29 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE131_loop_62b.cpp":39:29)
#loc30 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE131_loop_62b.cpp":39:39)
#loc31 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE131_loop_62b.cpp":39:40)
#loc32 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE131_loop_62b.cpp":39:5)
#loc33 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE131_loop_62b.cpp":40:5)
#loc34 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE131_loop_62b.cpp":40:33)
#loc35 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE131_loop_62b.cpp":40:9)
#loc36 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE131_loop_62b.cpp":40:17)
#loc37 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE131_loop_62b.cpp":40:23)
#loc38 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE131_loop_62b.cpp":40:24)
#loc39 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE131_loop_62b.cpp":40:30)
#loc40 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE131_loop_62b.cpp":40:29)
#loc41 = loc(fused[#loc1, #loc2])
#loc42 = loc(fused[#loc3, #loc4])
#loc43 = loc(fused[#loc5, #loc6])
#loc45 = loc(fused[#loc10, #loc12])
#loc46 = loc(fused[#loc13, #loc12])
#loc47 = loc(fused[#loc14, #loc15])
#loc48 = loc(fused[#loc16, #loc17])
#loc49 = loc(fused[#loc18, #loc15])
#loc50 = loc(fused[#loc22, #loc23])
#loc52 = loc(fused[#loc29, #loc30])
#loc53 = loc(fused[#loc28, #loc30])
#loc54 = loc(fused[#loc27, #loc31])
#loc55 = loc(fused[#loc32, #loc31])
#loc56 = loc(fused[#loc33, #loc34])
#loc57 = loc(fused[#loc35, #loc36])
#loc58 = loc(fused[#loc37, #loc34])
