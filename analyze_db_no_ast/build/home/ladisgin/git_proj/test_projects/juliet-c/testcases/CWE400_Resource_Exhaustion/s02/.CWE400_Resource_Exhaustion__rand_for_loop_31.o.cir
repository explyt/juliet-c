!s32i = !cir.int<s, 32>
!s8i = !cir.int<s, 8>
!u32i = !cir.int<u, 32>
!u64i = !cir.int<u, 64>
!void = !cir.void
#false = #cir.bool<false> : !cir.bool
#fn_attr = #cir<extra({nothrow = #cir.nothrow})>
#fn_attr1 = #cir<extra({inline = #cir.inline<no>, nothrow = #cir.nothrow, optnone = #cir.optnone})>
#true = #cir.bool<true> : !cir.bool
module @"/home/ladisgin/git_proj/test_projects/juliet-c/testcases/CWE400_Resource_Exhaustion/s02/CWE400_Resource_Exhaustion__rand_for_loop_31.c" attributes {cir.lang = #cir.lang<c>, cir.sob = #cir.signed_overflow_behavior<undefined>, cir.triple = "x86_64-unknown-linux-gnu", dlti.dl_spec = #dlti.dl_spec<#dlti.dl_entry<!llvm.ptr<272>, dense<64> : vector<4xi64>>, #dlti.dl_entry<i64, dense<64> : vector<2xi64>>, #dlti.dl_entry<!llvm.ptr<270>, dense<32> : vector<4xi64>>, #dlti.dl_entry<!llvm.ptr<271>, dense<32> : vector<4xi64>>, #dlti.dl_entry<f128, dense<128> : vector<2xi64>>, #dlti.dl_entry<f80, dense<128> : vector<2xi64>>, #dlti.dl_entry<i128, dense<128> : vector<2xi64>>, #dlti.dl_entry<i16, dense<16> : vector<2xi64>>, #dlti.dl_entry<i8, dense<8> : vector<2xi64>>, #dlti.dl_entry<i1, dense<8> : vector<2xi64>>, #dlti.dl_entry<!llvm.ptr, dense<64> : vector<4xi64>>, #dlti.dl_entry<f16, dense<16> : vector<2xi64>>, #dlti.dl_entry<f64, dense<64> : vector<2xi64>>, #dlti.dl_entry<i32, dense<32> : vector<2xi64>>, #dlti.dl_entry<"dlti.stack_alignment", 128 : i64>, #dlti.dl_entry<"dlti.endianness", "little">>, llvm.data_layout = "e-m:e-p270:32:32-p271:32:32-p272:64:64-i64:64-i128:128-f80:128-n8:16:32:64-S128"} {
  cir.func private  @rand() -> !s32i extra(#fn_attr) loc(#loc114)
  cir.func private  @printLine(!cir.ptr<!s8i>) loc(#loc115)
  cir.global "private"  constant internal dsolocal @".str" = #cir.const_array<"Hello\00" : !cir.array<!s8i x 6>> : !cir.array<!s8i x 6> {alignment = 1 : i64} loc(#loc5)
  cir.func no_proto  @CWE400_Resource_Exhaustion__rand_for_loop_31_bad() extra(#fn_attr1) {
    %0 = cir.alloca !s32i, !cir.ptr<!s32i>, ["count"] {alignment = 4 : i64} loc(#loc117)
    %1 = cir.const #cir.int<1> : !s32i loc(#loc10)
    %2 = cir.unary(minus, %1) : !s32i, !s32i loc(#loc11)
    cir.store %2, %0 : !s32i, !cir.ptr<!s32i> loc(#loc118)
    %3 = cir.call @rand() : () -> !s32i extra(#fn_attr) loc(#loc13)
    %4 = cir.const #cir.int<1> : !s32i loc(#loc13)
    %5 = cir.binop(and, %3, %4) : !s32i loc(#loc13)
    %6 = cir.cast(int_to_bool, %5 : !s32i), !cir.bool loc(#loc13)
    %7 = cir.ternary(%6, true {
      %9 = cir.call @rand() : () -> !s32i extra(#fn_attr) loc(#loc13)
      %10 = cir.cast(integral, %9 : !s32i), !u32i loc(#loc13)
      %11 = cir.const #cir.int<30> : !s32i loc(#loc13)
      %12 = cir.shift(left, %10 : !u32i, %11 : !s32i) -> !u32i loc(#loc13)
      %13 = cir.call @rand() : () -> !s32i extra(#fn_attr) loc(#loc13)
      %14 = cir.cast(integral, %13 : !s32i), !u32i loc(#loc13)
      %15 = cir.const #cir.int<15> : !s32i loc(#loc13)
      %16 = cir.shift(left, %14 : !u32i, %15 : !s32i) -> !u32i loc(#loc13)
      %17 = cir.binop(xor, %12, %16) : !u32i loc(#loc13)
      %18 = cir.call @rand() : () -> !s32i extra(#fn_attr) loc(#loc13)
      %19 = cir.cast(integral, %18 : !s32i), !u32i loc(#loc13)
      %20 = cir.binop(xor, %17, %19) : !u32i loc(#loc13)
      cir.yield %20 : !u32i loc(#loc13)
    }, false {
      %9 = cir.call @rand() : () -> !s32i extra(#fn_attr) loc(#loc13)
      %10 = cir.cast(integral, %9 : !s32i), !u32i loc(#loc13)
      %11 = cir.const #cir.int<30> : !s32i loc(#loc13)
      %12 = cir.shift(left, %10 : !u32i, %11 : !s32i) -> !u32i loc(#loc13)
      %13 = cir.call @rand() : () -> !s32i extra(#fn_attr) loc(#loc13)
      %14 = cir.cast(integral, %13 : !s32i), !u32i loc(#loc13)
      %15 = cir.const #cir.int<15> : !s32i loc(#loc13)
      %16 = cir.shift(left, %14 : !u32i, %15 : !s32i) -> !u32i loc(#loc13)
      %17 = cir.binop(xor, %12, %16) : !u32i loc(#loc13)
      %18 = cir.call @rand() : () -> !s32i extra(#fn_attr) loc(#loc13)
      %19 = cir.cast(integral, %18 : !s32i), !u32i loc(#loc13)
      %20 = cir.binop(xor, %17, %19) : !u32i loc(#loc13)
      %21 = cir.unary(minus, %20) : !u32i, !u32i loc(#loc13)
      %22 = cir.const #cir.int<1> : !s32i loc(#loc13)
      %23 = cir.cast(integral, %22 : !s32i), !u32i loc(#loc13)
      %24 = cir.binop(sub, %21, %23) : !u32i loc(#loc13)
      cir.yield %24 : !u32i loc(#loc13)
    }) : (!cir.bool) -> !u32i loc(#loc13)
    %8 = cir.cast(integral, %7 : !u32i), !s32i loc(#loc13)
    cir.store %8, %0 : !s32i, !cir.ptr<!s32i> loc(#loc119)
    cir.scope {
      %9 = cir.alloca !s32i, !cir.ptr<!s32i>, ["countCopy", init] {alignment = 4 : i64} loc(#loc121)
      %10 = cir.alloca !s32i, !cir.ptr<!s32i>, ["count", init] {alignment = 4 : i64} loc(#loc122)
      %11 = cir.load %0 : !cir.ptr<!s32i>, !s32i loc(#loc18)
      cir.store %11, %9 : !s32i, !cir.ptr<!s32i> loc(#loc121)
      %12 = cir.load %9 : !cir.ptr<!s32i>, !s32i loc(#loc20)
      cir.store %12, %10 : !s32i, !cir.ptr<!s32i> loc(#loc122)
      cir.scope {
        %13 = cir.alloca !u64i, !cir.ptr<!u64i>, ["i", init] {alignment = 8 : i64} loc(#loc124)
        %14 = cir.const #cir.int<0> : !s32i loc(#loc24)
        %15 = cir.cast(integral, %14 : !s32i), !u64i loc(#loc24)
        cir.store %15, %13 : !u64i, !cir.ptr<!u64i> loc(#loc124)
        cir.scope {
          %16 = cir.const #cir.int<0> : !s32i loc(#loc27)
          %17 = cir.cast(integral, %16 : !s32i), !u64i loc(#loc27)
          cir.store %17, %13 : !u64i, !cir.ptr<!u64i> loc(#loc126)
          cir.for : cond {
            %18 = cir.load %13 : !cir.ptr<!u64i>, !u64i loc(#loc29)
            %19 = cir.load %10 : !cir.ptr<!s32i>, !s32i loc(#loc30)
            %20 = cir.cast(integral, %19 : !s32i), !u64i loc(#loc30)
            %21 = cir.cmp(lt, %18, %20) : !u64i, !s32i loc(#loc127)
            %22 = cir.cast(int_to_bool, %21 : !s32i), !cir.bool loc(#loc31)
            cir.condition(%22) loc(#loc31)
          } body {
            cir.scope {
              %18 = cir.get_global @".str" : !cir.ptr<!cir.array<!s8i x 6>> loc(#loc5)
              %19 = cir.cast(array_to_ptrdecay, %18 : !cir.ptr<!cir.array<!s8i x 6>>), !cir.ptr<!s8i> loc(#loc5)
              cir.call @printLine(%19) : (!cir.ptr<!s8i>) -> () loc(#loc33)
            } loc(#loc128)
            cir.yield loc(#loc26)
          } step {
            %18 = cir.load %13 : !cir.ptr<!u64i>, !u64i loc(#loc34)
            %19 = cir.unary(inc, %18) : !u64i, !u64i loc(#loc35)
            cir.store %19, %13 : !u64i, !cir.ptr<!u64i> loc(#loc129)
            cir.yield loc(#loc125)
          } loc(#loc125)
        } loc(#loc125)
      } loc(#loc123)
    } loc(#loc120)
    cir.return loc(#loc7)
  } loc(#loc116)
  cir.func no_proto  @CWE400_Resource_Exhaustion__rand_for_loop_31_good() extra(#fn_attr1) {
    %0 = cir.get_global @goodG2B : !cir.ptr<!cir.func<!void ()>> loc(#loc131)
    cir.call %0() : (!cir.ptr<!cir.func<!void ()>>) -> () loc(#loc38)
    %1 = cir.get_global @goodB2G : !cir.ptr<!cir.func<!void ()>> loc(#loc132)
    cir.call %1() : (!cir.ptr<!cir.func<!void ()>>) -> () loc(#loc40)
    cir.return loc(#loc37)
  } loc(#loc130)
  cir.func no_proto internal private  @goodG2B() extra(#fn_attr1) {
    %0 = cir.alloca !s32i, !cir.ptr<!s32i>, ["count"] {alignment = 4 : i64} loc(#loc134)
    %1 = cir.const #cir.int<1> : !s32i loc(#loc46)
    %2 = cir.unary(minus, %1) : !s32i, !s32i loc(#loc47)
    cir.store %2, %0 : !s32i, !cir.ptr<!s32i> loc(#loc135)
    %3 = cir.const #cir.int<20> : !s32i loc(#loc49)
    cir.store %3, %0 : !s32i, !cir.ptr<!s32i> loc(#loc136)
    cir.scope {
      %4 = cir.alloca !s32i, !cir.ptr<!s32i>, ["countCopy", init] {alignment = 4 : i64} loc(#loc138)
      %5 = cir.alloca !s32i, !cir.ptr<!s32i>, ["count", init] {alignment = 4 : i64} loc(#loc139)
      %6 = cir.load %0 : !cir.ptr<!s32i>, !s32i loc(#loc54)
      cir.store %6, %4 : !s32i, !cir.ptr<!s32i> loc(#loc138)
      %7 = cir.load %4 : !cir.ptr<!s32i>, !s32i loc(#loc56)
      cir.store %7, %5 : !s32i, !cir.ptr<!s32i> loc(#loc139)
      cir.scope {
        %8 = cir.alloca !u64i, !cir.ptr<!u64i>, ["i", init] {alignment = 8 : i64} loc(#loc141)
        %9 = cir.const #cir.int<0> : !s32i loc(#loc60)
        %10 = cir.cast(integral, %9 : !s32i), !u64i loc(#loc60)
        cir.store %10, %8 : !u64i, !cir.ptr<!u64i> loc(#loc141)
        cir.scope {
          %11 = cir.const #cir.int<0> : !s32i loc(#loc63)
          %12 = cir.cast(integral, %11 : !s32i), !u64i loc(#loc63)
          cir.store %12, %8 : !u64i, !cir.ptr<!u64i> loc(#loc143)
          cir.for : cond {
            %13 = cir.load %8 : !cir.ptr<!u64i>, !u64i loc(#loc65)
            %14 = cir.load %5 : !cir.ptr<!s32i>, !s32i loc(#loc66)
            %15 = cir.cast(integral, %14 : !s32i), !u64i loc(#loc66)
            %16 = cir.cmp(lt, %13, %15) : !u64i, !s32i loc(#loc144)
            %17 = cir.cast(int_to_bool, %16 : !s32i), !cir.bool loc(#loc67)
            cir.condition(%17) loc(#loc67)
          } body {
            cir.scope {
              %13 = cir.get_global @".str" : !cir.ptr<!cir.array<!s8i x 6>> loc(#loc69)
              %14 = cir.cast(array_to_ptrdecay, %13 : !cir.ptr<!cir.array<!s8i x 6>>), !cir.ptr<!s8i> loc(#loc69)
              cir.call @printLine(%14) : (!cir.ptr<!s8i>) -> () loc(#loc70)
            } loc(#loc145)
            cir.yield loc(#loc62)
          } step {
            %13 = cir.load %8 : !cir.ptr<!u64i>, !u64i loc(#loc71)
            %14 = cir.unary(inc, %13) : !u64i, !u64i loc(#loc72)
            cir.store %14, %8 : !u64i, !cir.ptr<!u64i> loc(#loc146)
            cir.yield loc(#loc142)
          } loc(#loc142)
        } loc(#loc142)
      } loc(#loc140)
    } loc(#loc137)
    cir.return loc(#loc43)
  } loc(#loc133)
  cir.func no_proto internal private  @goodB2G() extra(#fn_attr1) {
    %0 = cir.alloca !s32i, !cir.ptr<!s32i>, ["count"] {alignment = 4 : i64} loc(#loc148)
    %1 = cir.const #cir.int<1> : !s32i loc(#loc77)
    %2 = cir.unary(minus, %1) : !s32i, !s32i loc(#loc78)
    cir.store %2, %0 : !s32i, !cir.ptr<!s32i> loc(#loc149)
    %3 = cir.call @rand() : () -> !s32i extra(#fn_attr) loc(#loc80)
    %4 = cir.const #cir.int<1> : !s32i loc(#loc80)
    %5 = cir.binop(and, %3, %4) : !s32i loc(#loc80)
    %6 = cir.cast(int_to_bool, %5 : !s32i), !cir.bool loc(#loc80)
    %7 = cir.ternary(%6, true {
      %9 = cir.call @rand() : () -> !s32i extra(#fn_attr) loc(#loc80)
      %10 = cir.cast(integral, %9 : !s32i), !u32i loc(#loc80)
      %11 = cir.const #cir.int<30> : !s32i loc(#loc80)
      %12 = cir.shift(left, %10 : !u32i, %11 : !s32i) -> !u32i loc(#loc80)
      %13 = cir.call @rand() : () -> !s32i extra(#fn_attr) loc(#loc80)
      %14 = cir.cast(integral, %13 : !s32i), !u32i loc(#loc80)
      %15 = cir.const #cir.int<15> : !s32i loc(#loc80)
      %16 = cir.shift(left, %14 : !u32i, %15 : !s32i) -> !u32i loc(#loc80)
      %17 = cir.binop(xor, %12, %16) : !u32i loc(#loc80)
      %18 = cir.call @rand() : () -> !s32i extra(#fn_attr) loc(#loc80)
      %19 = cir.cast(integral, %18 : !s32i), !u32i loc(#loc80)
      %20 = cir.binop(xor, %17, %19) : !u32i loc(#loc80)
      cir.yield %20 : !u32i loc(#loc80)
    }, false {
      %9 = cir.call @rand() : () -> !s32i extra(#fn_attr) loc(#loc80)
      %10 = cir.cast(integral, %9 : !s32i), !u32i loc(#loc80)
      %11 = cir.const #cir.int<30> : !s32i loc(#loc80)
      %12 = cir.shift(left, %10 : !u32i, %11 : !s32i) -> !u32i loc(#loc80)
      %13 = cir.call @rand() : () -> !s32i extra(#fn_attr) loc(#loc80)
      %14 = cir.cast(integral, %13 : !s32i), !u32i loc(#loc80)
      %15 = cir.const #cir.int<15> : !s32i loc(#loc80)
      %16 = cir.shift(left, %14 : !u32i, %15 : !s32i) -> !u32i loc(#loc80)
      %17 = cir.binop(xor, %12, %16) : !u32i loc(#loc80)
      %18 = cir.call @rand() : () -> !s32i extra(#fn_attr) loc(#loc80)
      %19 = cir.cast(integral, %18 : !s32i), !u32i loc(#loc80)
      %20 = cir.binop(xor, %17, %19) : !u32i loc(#loc80)
      %21 = cir.unary(minus, %20) : !u32i, !u32i loc(#loc80)
      %22 = cir.const #cir.int<1> : !s32i loc(#loc80)
      %23 = cir.cast(integral, %22 : !s32i), !u32i loc(#loc80)
      %24 = cir.binop(sub, %21, %23) : !u32i loc(#loc80)
      cir.yield %24 : !u32i loc(#loc80)
    }) : (!cir.bool) -> !u32i loc(#loc80)
    %8 = cir.cast(integral, %7 : !u32i), !s32i loc(#loc80)
    cir.store %8, %0 : !s32i, !cir.ptr<!s32i> loc(#loc150)
    cir.scope {
      %9 = cir.alloca !s32i, !cir.ptr<!s32i>, ["countCopy", init] {alignment = 4 : i64} loc(#loc152)
      %10 = cir.alloca !s32i, !cir.ptr<!s32i>, ["count", init] {alignment = 4 : i64} loc(#loc153)
      %11 = cir.load %0 : !cir.ptr<!s32i>, !s32i loc(#loc85)
      cir.store %11, %9 : !s32i, !cir.ptr<!s32i> loc(#loc152)
      %12 = cir.load %9 : !cir.ptr<!s32i>, !s32i loc(#loc87)
      cir.store %12, %10 : !s32i, !cir.ptr<!s32i> loc(#loc153)
      cir.scope {
        %13 = cir.alloca !u64i, !cir.ptr<!u64i>, ["i", init] {alignment = 8 : i64} loc(#loc155)
        %14 = cir.const #cir.int<0> : !s32i loc(#loc91)
        %15 = cir.cast(integral, %14 : !s32i), !u64i loc(#loc91)
        cir.store %15, %13 : !u64i, !cir.ptr<!u64i> loc(#loc155)
        cir.scope {
          %16 = cir.load %10 : !cir.ptr<!s32i>, !s32i loc(#loc94)
          %17 = cir.const #cir.int<0> : !s32i loc(#loc95)
          %18 = cir.cmp(gt, %16, %17) : !s32i, !s32i loc(#loc157)
          %19 = cir.cast(int_to_bool, %18 : !s32i), !cir.bool loc(#loc96)
          %20 = cir.ternary(%19, true {
            %21 = cir.load %10 : !cir.ptr<!s32i>, !s32i loc(#loc98)
            %22 = cir.const #cir.int<20> : !s32i loc(#loc99)
            %23 = cir.cmp(le, %21, %22) : !s32i, !s32i loc(#loc158)
            %24 = cir.cast(int_to_bool, %23 : !s32i), !cir.bool loc(#loc100)
            %25 = cir.ternary(%24, true {
              %26 = cir.const #true loc(#loc97)
              cir.yield %26 : !cir.bool loc(#loc97)
            }, false {
              %26 = cir.const #false loc(#loc97)
              cir.yield %26 : !cir.bool loc(#loc97)
            }) : (!cir.bool) -> !cir.bool loc(#loc97)
            cir.yield %25 : !cir.bool loc(#loc97)
          }, false {
            %21 = cir.const #false loc(#loc97)
            cir.yield %21 : !cir.bool loc(#loc97)
          }) : (!cir.bool) -> !cir.bool loc(#loc97)
          cir.if %20 {
            cir.scope {
              %21 = cir.const #cir.int<0> : !s32i loc(#loc104)
              %22 = cir.cast(integral, %21 : !s32i), !u64i loc(#loc104)
              cir.store %22, %13 : !u64i, !cir.ptr<!u64i> loc(#loc161)
              cir.for : cond {
                %23 = cir.load %13 : !cir.ptr<!u64i>, !u64i loc(#loc106)
                %24 = cir.load %10 : !cir.ptr<!s32i>, !s32i loc(#loc107)
                %25 = cir.cast(integral, %24 : !s32i), !u64i loc(#loc107)
                %26 = cir.cmp(lt, %23, %25) : !u64i, !s32i loc(#loc162)
                %27 = cir.cast(int_to_bool, %26 : !s32i), !cir.bool loc(#loc108)
                cir.condition(%27) loc(#loc108)
              } body {
                cir.scope {
                  %23 = cir.get_global @".str" : !cir.ptr<!cir.array<!s8i x 6>> loc(#loc110)
                  %24 = cir.cast(array_to_ptrdecay, %23 : !cir.ptr<!cir.array<!s8i x 6>>), !cir.ptr<!s8i> loc(#loc110)
                  cir.call @printLine(%24) : (!cir.ptr<!s8i>) -> () loc(#loc111)
                } loc(#loc163)
                cir.yield loc(#loc103)
              } step {
                %23 = cir.load %13 : !cir.ptr<!u64i>, !u64i loc(#loc112)
                %24 = cir.unary(inc, %23) : !u64i, !u64i loc(#loc113)
                cir.store %24, %13 : !u64i, !cir.ptr<!u64i> loc(#loc164)
                cir.yield loc(#loc160)
              } loc(#loc160)
            } loc(#loc160)
          } loc(#loc159)
        } loc(#loc156)
      } loc(#loc154)
    } loc(#loc151)
    cir.return loc(#loc74)
  } loc(#loc147)
} loc(#loc)
#loc = loc("/home/ladisgin/git_proj/test_projects/juliet-c/testcases/CWE400_Resource_Exhaustion/s02/CWE400_Resource_Exhaustion__rand_for_loop_31.c":0:0)
#loc1 = loc("/usr/include/stdlib.h":573:1)
#loc2 = loc("/usr/include/stdlib.h":573:24)
#loc3 = loc("../../../testcasesupport/std_testcase_io.h":14:1)
#loc4 = loc("../../../testcasesupport/std_testcase_io.h":14:33)
#loc5 = loc("CWE400_Resource_Exhaustion__rand_for_loop_31.c":37:27)
#loc6 = loc("CWE400_Resource_Exhaustion__rand_for_loop_31.c":22:1)
#loc7 = loc("CWE400_Resource_Exhaustion__rand_for_loop_31.c":41:1)
#loc8 = loc("CWE400_Resource_Exhaustion__rand_for_loop_31.c":24:5)
#loc9 = loc("CWE400_Resource_Exhaustion__rand_for_loop_31.c":24:9)
#loc10 = loc("CWE400_Resource_Exhaustion__rand_for_loop_31.c":26:14)
#loc11 = loc("CWE400_Resource_Exhaustion__rand_for_loop_31.c":26:13)
#loc12 = loc("CWE400_Resource_Exhaustion__rand_for_loop_31.c":26:5)
#loc13 = loc("CWE400_Resource_Exhaustion__rand_for_loop_31.c":28:13)
#loc14 = loc("CWE400_Resource_Exhaustion__rand_for_loop_31.c":28:5)
#loc15 = loc("CWE400_Resource_Exhaustion__rand_for_loop_31.c":29:5)
#loc16 = loc("CWE400_Resource_Exhaustion__rand_for_loop_31.c":40:5)
#loc17 = loc("CWE400_Resource_Exhaustion__rand_for_loop_31.c":30:9)
#loc18 = loc("CWE400_Resource_Exhaustion__rand_for_loop_31.c":30:25)
#loc19 = loc("CWE400_Resource_Exhaustion__rand_for_loop_31.c":31:9)
#loc20 = loc("CWE400_Resource_Exhaustion__rand_for_loop_31.c":31:21)
#loc21 = loc("CWE400_Resource_Exhaustion__rand_for_loop_31.c":32:9)
#loc22 = loc("CWE400_Resource_Exhaustion__rand_for_loop_31.c":39:9)
#loc23 = loc("CWE400_Resource_Exhaustion__rand_for_loop_31.c":33:13)
#loc24 = loc("CWE400_Resource_Exhaustion__rand_for_loop_31.c":33:24)
#loc25 = loc("CWE400_Resource_Exhaustion__rand_for_loop_31.c":35:13)
#loc26 = loc("CWE400_Resource_Exhaustion__rand_for_loop_31.c":38:13)
#loc27 = loc("CWE400_Resource_Exhaustion__rand_for_loop_31.c":35:22)
#loc28 = loc("CWE400_Resource_Exhaustion__rand_for_loop_31.c":35:18)
#loc29 = loc("CWE400_Resource_Exhaustion__rand_for_loop_31.c":35:25)
#loc30 = loc("CWE400_Resource_Exhaustion__rand_for_loop_31.c":35:37)
#loc31 = loc("CWE400_Resource_Exhaustion__rand_for_loop_31.c":35:27)
#loc32 = loc("CWE400_Resource_Exhaustion__rand_for_loop_31.c":36:13)
#loc33 = loc("CWE400_Resource_Exhaustion__rand_for_loop_31.c":37:17)
#loc34 = loc("CWE400_Resource_Exhaustion__rand_for_loop_31.c":35:45)
#loc35 = loc("CWE400_Resource_Exhaustion__rand_for_loop_31.c":35:44)
#loc36 = loc("CWE400_Resource_Exhaustion__rand_for_loop_31.c":94:1)
#loc37 = loc("CWE400_Resource_Exhaustion__rand_for_loop_31.c":98:1)
#loc38 = loc("CWE400_Resource_Exhaustion__rand_for_loop_31.c":96:5)
#loc39 = loc("CWE400_Resource_Exhaustion__rand_for_loop_31.c":96:13)
#loc40 = loc("CWE400_Resource_Exhaustion__rand_for_loop_31.c":97:5)
#loc41 = loc("CWE400_Resource_Exhaustion__rand_for_loop_31.c":97:13)
#loc42 = loc("CWE400_Resource_Exhaustion__rand_for_loop_31.c":48:1)
#loc43 = loc("CWE400_Resource_Exhaustion__rand_for_loop_31.c":67:1)
#loc44 = loc("CWE400_Resource_Exhaustion__rand_for_loop_31.c":50:5)
#loc45 = loc("CWE400_Resource_Exhaustion__rand_for_loop_31.c":50:9)
#loc46 = loc("CWE400_Resource_Exhaustion__rand_for_loop_31.c":52:14)
#loc47 = loc("CWE400_Resource_Exhaustion__rand_for_loop_31.c":52:13)
#loc48 = loc("CWE400_Resource_Exhaustion__rand_for_loop_31.c":52:5)
#loc49 = loc("CWE400_Resource_Exhaustion__rand_for_loop_31.c":54:13)
#loc50 = loc("CWE400_Resource_Exhaustion__rand_for_loop_31.c":54:5)
#loc51 = loc("CWE400_Resource_Exhaustion__rand_for_loop_31.c":55:5)
#loc52 = loc("CWE400_Resource_Exhaustion__rand_for_loop_31.c":66:5)
#loc53 = loc("CWE400_Resource_Exhaustion__rand_for_loop_31.c":56:9)
#loc54 = loc("CWE400_Resource_Exhaustion__rand_for_loop_31.c":56:25)
#loc55 = loc("CWE400_Resource_Exhaustion__rand_for_loop_31.c":57:9)
#loc56 = loc("CWE400_Resource_Exhaustion__rand_for_loop_31.c":57:21)
#loc57 = loc("CWE400_Resource_Exhaustion__rand_for_loop_31.c":58:9)
#loc58 = loc("CWE400_Resource_Exhaustion__rand_for_loop_31.c":65:9)
#loc59 = loc("CWE400_Resource_Exhaustion__rand_for_loop_31.c":59:13)
#loc60 = loc("CWE400_Resource_Exhaustion__rand_for_loop_31.c":59:24)
#loc61 = loc("CWE400_Resource_Exhaustion__rand_for_loop_31.c":61:13)
#loc62 = loc("CWE400_Resource_Exhaustion__rand_for_loop_31.c":64:13)
#loc63 = loc("CWE400_Resource_Exhaustion__rand_for_loop_31.c":61:22)
#loc64 = loc("CWE400_Resource_Exhaustion__rand_for_loop_31.c":61:18)
#loc65 = loc("CWE400_Resource_Exhaustion__rand_for_loop_31.c":61:25)
#loc66 = loc("CWE400_Resource_Exhaustion__rand_for_loop_31.c":61:37)
#loc67 = loc("CWE400_Resource_Exhaustion__rand_for_loop_31.c":61:27)
#loc68 = loc("CWE400_Resource_Exhaustion__rand_for_loop_31.c":62:13)
#loc69 = loc("CWE400_Resource_Exhaustion__rand_for_loop_31.c":63:27)
#loc70 = loc("CWE400_Resource_Exhaustion__rand_for_loop_31.c":63:17)
#loc71 = loc("CWE400_Resource_Exhaustion__rand_for_loop_31.c":61:45)
#loc72 = loc("CWE400_Resource_Exhaustion__rand_for_loop_31.c":61:44)
#loc73 = loc("CWE400_Resource_Exhaustion__rand_for_loop_31.c":70:1)
#loc74 = loc("CWE400_Resource_Exhaustion__rand_for_loop_31.c":92:1)
#loc75 = loc("CWE400_Resource_Exhaustion__rand_for_loop_31.c":72:5)
#loc76 = loc("CWE400_Resource_Exhaustion__rand_for_loop_31.c":72:9)
#loc77 = loc("CWE400_Resource_Exhaustion__rand_for_loop_31.c":74:14)
#loc78 = loc("CWE400_Resource_Exhaustion__rand_for_loop_31.c":74:13)
#loc79 = loc("CWE400_Resource_Exhaustion__rand_for_loop_31.c":74:5)
#loc80 = loc("CWE400_Resource_Exhaustion__rand_for_loop_31.c":76:13)
#loc81 = loc("CWE400_Resource_Exhaustion__rand_for_loop_31.c":76:5)
#loc82 = loc("CWE400_Resource_Exhaustion__rand_for_loop_31.c":77:5)
#loc83 = loc("CWE400_Resource_Exhaustion__rand_for_loop_31.c":91:5)
#loc84 = loc("CWE400_Resource_Exhaustion__rand_for_loop_31.c":78:9)
#loc85 = loc("CWE400_Resource_Exhaustion__rand_for_loop_31.c":78:25)
#loc86 = loc("CWE400_Resource_Exhaustion__rand_for_loop_31.c":79:9)
#loc87 = loc("CWE400_Resource_Exhaustion__rand_for_loop_31.c":79:21)
#loc88 = loc("CWE400_Resource_Exhaustion__rand_for_loop_31.c":80:9)
#loc89 = loc("CWE400_Resource_Exhaustion__rand_for_loop_31.c":90:9)
#loc90 = loc("CWE400_Resource_Exhaustion__rand_for_loop_31.c":81:13)
#loc91 = loc("CWE400_Resource_Exhaustion__rand_for_loop_31.c":81:24)
#loc92 = loc("CWE400_Resource_Exhaustion__rand_for_loop_31.c":83:13)
#loc93 = loc("CWE400_Resource_Exhaustion__rand_for_loop_31.c":89:13)
#loc94 = loc("CWE400_Resource_Exhaustion__rand_for_loop_31.c":83:17)
#loc95 = loc("CWE400_Resource_Exhaustion__rand_for_loop_31.c":83:25)
#loc96 = loc("CWE400_Resource_Exhaustion__rand_for_loop_31.c":83:23)
#loc97 = loc("CWE400_Resource_Exhaustion__rand_for_loop_31.c":83:27)
#loc98 = loc("CWE400_Resource_Exhaustion__rand_for_loop_31.c":83:30)
#loc99 = loc("CWE400_Resource_Exhaustion__rand_for_loop_31.c":83:39)
#loc100 = loc("CWE400_Resource_Exhaustion__rand_for_loop_31.c":83:36)
#loc101 = loc("CWE400_Resource_Exhaustion__rand_for_loop_31.c":84:13)
#loc102 = loc("CWE400_Resource_Exhaustion__rand_for_loop_31.c":85:17)
#loc103 = loc("CWE400_Resource_Exhaustion__rand_for_loop_31.c":88:17)
#loc104 = loc("CWE400_Resource_Exhaustion__rand_for_loop_31.c":85:26)
#loc105 = loc("CWE400_Resource_Exhaustion__rand_for_loop_31.c":85:22)
#loc106 = loc("CWE400_Resource_Exhaustion__rand_for_loop_31.c":85:29)
#loc107 = loc("CWE400_Resource_Exhaustion__rand_for_loop_31.c":85:41)
#loc108 = loc("CWE400_Resource_Exhaustion__rand_for_loop_31.c":85:31)
#loc109 = loc("CWE400_Resource_Exhaustion__rand_for_loop_31.c":86:17)
#loc110 = loc("CWE400_Resource_Exhaustion__rand_for_loop_31.c":87:31)
#loc111 = loc("CWE400_Resource_Exhaustion__rand_for_loop_31.c":87:21)
#loc112 = loc("CWE400_Resource_Exhaustion__rand_for_loop_31.c":85:49)
#loc113 = loc("CWE400_Resource_Exhaustion__rand_for_loop_31.c":85:48)
#loc114 = loc(fused[#loc1, #loc2])
#loc115 = loc(fused[#loc3, #loc4])
#loc116 = loc(fused[#loc6, #loc7])
#loc117 = loc(fused[#loc8, #loc9])
#loc118 = loc(fused[#loc12, #loc10])
#loc119 = loc(fused[#loc14, #loc13])
#loc120 = loc(fused[#loc15, #loc16])
#loc121 = loc(fused[#loc17, #loc18])
#loc122 = loc(fused[#loc19, #loc20])
#loc123 = loc(fused[#loc21, #loc22])
#loc124 = loc(fused[#loc23, #loc24])
#loc125 = loc(fused[#loc25, #loc26])
#loc126 = loc(fused[#loc28, #loc27])
#loc127 = loc(fused[#loc29, #loc30])
#loc128 = loc(fused[#loc32, #loc26])
#loc129 = loc(fused[#loc35, #loc34])
#loc130 = loc(fused[#loc36, #loc37])
#loc131 = loc(fused[#loc38, #loc39])
#loc132 = loc(fused[#loc40, #loc41])
#loc133 = loc(fused[#loc42, #loc43])
#loc134 = loc(fused[#loc44, #loc45])
#loc135 = loc(fused[#loc48, #loc46])
#loc136 = loc(fused[#loc50, #loc49])
#loc137 = loc(fused[#loc51, #loc52])
#loc138 = loc(fused[#loc53, #loc54])
#loc139 = loc(fused[#loc55, #loc56])
#loc140 = loc(fused[#loc57, #loc58])
#loc141 = loc(fused[#loc59, #loc60])
#loc142 = loc(fused[#loc61, #loc62])
#loc143 = loc(fused[#loc64, #loc63])
#loc144 = loc(fused[#loc65, #loc66])
#loc145 = loc(fused[#loc68, #loc62])
#loc146 = loc(fused[#loc72, #loc71])
#loc147 = loc(fused[#loc73, #loc74])
#loc148 = loc(fused[#loc75, #loc76])
#loc149 = loc(fused[#loc79, #loc77])
#loc150 = loc(fused[#loc81, #loc80])
#loc151 = loc(fused[#loc82, #loc83])
#loc152 = loc(fused[#loc84, #loc85])
#loc153 = loc(fused[#loc86, #loc87])
#loc154 = loc(fused[#loc88, #loc89])
#loc155 = loc(fused[#loc90, #loc91])
#loc156 = loc(fused[#loc92, #loc93])
#loc157 = loc(fused[#loc94, #loc95])
#loc158 = loc(fused[#loc98, #loc99])
#loc159 = loc(fused[#loc101, #loc93])
#loc160 = loc(fused[#loc102, #loc103])
#loc161 = loc(fused[#loc105, #loc104])
#loc162 = loc(fused[#loc106, #loc107])
#loc163 = loc(fused[#loc109, #loc103])
#loc164 = loc(fused[#loc113, #loc112])
