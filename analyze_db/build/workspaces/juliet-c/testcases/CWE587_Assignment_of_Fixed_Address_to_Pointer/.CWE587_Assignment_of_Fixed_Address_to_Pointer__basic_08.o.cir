!s32i = !cir.int<s, 32>
!s8i = !cir.int<s, 8>
!u64i = !cir.int<u, 64>
#fn_attr = #cir<extra({inline = #cir.inline<no>, nothrow = #cir.nothrow, optnone = #cir.optnone, uwtable = #cir.uwtable<async>})>
module @"/workspaces/juliet-c/testcases/CWE587_Assignment_of_Fixed_Address_to_Pointer/CWE587_Assignment_of_Fixed_Address_to_Pointer__basic_08.c" attributes {cir.lang = #cir.lang<c>, cir.sob = #cir.signed_overflow_behavior<undefined>, cir.triple = "x86_64-unknown-linux-gnu", cir.type_size_info = #cir.type_size_info<char = 8, int = 32, size_t = 64>, cir.uwtable = #cir.uwtable<async>, dlti.dl_spec = #dlti.dl_spec<i1 = dense<8> : vector<2xi64>, !llvm.ptr = dense<64> : vector<4xi64>, !llvm.ptr<270> = dense<32> : vector<4xi64>, i16 = dense<16> : vector<2xi64>, i8 = dense<8> : vector<2xi64>, i128 = dense<128> : vector<2xi64>, f80 = dense<128> : vector<2xi64>, f128 = dense<128> : vector<2xi64>, !llvm.ptr<271> = dense<32> : vector<4xi64>, !llvm.ptr<272> = dense<64> : vector<4xi64>, i64 = dense<64> : vector<2xi64>, i32 = dense<32> : vector<2xi64>, f16 = dense<16> : vector<2xi64>, f64 = dense<64> : vector<2xi64>, "dlti.stack_alignment" = 128 : i64, "dlti.mangling_mode" = "e", "dlti.endianness" = "little">} {
  cir.func private @printHexCharLine(!s8i) loc(#loc69)
  cir.func no_proto @CWE587_Assignment_of_Fixed_Address_to_Pointer__basic_08_bad() extra(#fn_attr) {
    cir.scope {
      %0 = cir.get_global @staticReturnsTrue : !cir.ptr<!cir.func<() -> !s32i>> loc(#loc72)
      %1 = cir.call %0() : (!cir.ptr<!cir.func<() -> !s32i>>) -> !s32i loc(#loc7)
      %2 = cir.cast(int_to_bool, %1 : !s32i), !cir.bool loc(#loc7)
      cir.if %2 {
        cir.scope {
          %3 = cir.alloca !cir.ptr<!s8i>, !cir.ptr<!cir.ptr<!s8i>>, ["charPointer", init] {alignment = 8 : i64} loc(#loc75)
          %4 = cir.const #cir.int<4194304> : !s32i loc(#loc13)
          %5 = cir.cast(integral, %4 : !s32i), !u64i loc(#loc13)
          %6 = cir.cast(int_to_ptr, %5 : !u64i), !cir.ptr<!s8i> loc(#loc13)
          cir.store %6, %3 : !cir.ptr<!s8i>, !cir.ptr<!cir.ptr<!s8i>> loc(#loc75)
          %7 = cir.load deref %3 : !cir.ptr<!cir.ptr<!s8i>>, !cir.ptr<!s8i> loc(#loc14)
          %8 = cir.load %7 : !cir.ptr<!s8i>, !s8i loc(#loc15)
          cir.call @printHexCharLine(%8) : (!s8i) -> () loc(#loc16)
        } loc(#loc74)
      } loc(#loc73)
    } loc(#loc71)
    cir.return loc(#loc4)
  } loc(#loc70)
  cir.func no_proto @CWE587_Assignment_of_Fixed_Address_to_Pointer__basic_08_good() extra(#fn_attr) {
    %0 = cir.get_global @good1 : !cir.ptr<!cir.func<()>> loc(#loc77)
    cir.call %0() : (!cir.ptr<!cir.func<()>>) -> () loc(#loc19)
    %1 = cir.get_global @good2 : !cir.ptr<!cir.func<()>> loc(#loc78)
    cir.call %1() : (!cir.ptr<!cir.func<()>>) -> () loc(#loc21)
    cir.return loc(#loc18)
  } loc(#loc76)
  cir.func no_proto internal private @staticReturnsTrue() -> !s32i extra(#fn_attr) {
    %0 = cir.alloca !s32i, !cir.ptr<!s32i>, ["__retval"] {alignment = 4 : i64} loc(#loc24)
    %1 = cir.const #cir.int<1> : !s32i loc(#loc25)
    cir.store %1, %0 : !s32i, !cir.ptr<!s32i> loc(#loc80)
    %2 = cir.load %0 : !cir.ptr<!s32i>, !s32i loc(#loc80)
    cir.return %2 : !s32i loc(#loc80)
  } loc(#loc79)
  cir.func private @printLine(!cir.ptr<!s8i>) loc(#loc81)
  cir.global "private" constant cir_private dsolocal @".str" = #cir.const_array<"Benign, fixed string\00" : !cir.array<!s8i x 21>> : !cir.array<!s8i x 21> {alignment = 1 : i64} loc(#loc29)
  cir.func no_proto internal private @good1() extra(#fn_attr) {
    cir.scope {
      %0 = cir.get_global @staticReturnsFalse : !cir.ptr<!cir.func<() -> !s32i>> loc(#loc84)
      %1 = cir.call %0() : (!cir.ptr<!cir.func<() -> !s32i>>) -> !s32i loc(#loc34)
      %2 = cir.cast(int_to_bool, %1 : !s32i), !cir.bool loc(#loc34)
      cir.if %2 {
        %3 = cir.get_global @".str" : !cir.ptr<!cir.array<!s8i x 21>> loc(#loc29)
        %4 = cir.cast(array_to_ptrdecay, %3 : !cir.ptr<!cir.array<!s8i x 21>>), !cir.ptr<!s8i> loc(#loc29)
        cir.call @printLine(%4) : (!cir.ptr<!s8i>) -> () loc(#loc39)
      } else {
        cir.scope {
          %3 = cir.alloca !s8i, !cir.ptr<!s8i>, ["charStack", init] {alignment = 1 : i64} loc(#loc87)
          %4 = cir.alloca !cir.ptr<!s8i>, !cir.ptr<!cir.ptr<!s8i>>, ["charPointer", init] {alignment = 8 : i64} loc(#loc88)
          %5 = cir.const #cir.int<97> : !s32i loc(#loc43)
          %6 = cir.cast(integral, %5 : !s32i), !s8i loc(#loc43)
          cir.store %6, %3 : !s8i, !cir.ptr<!s8i> loc(#loc87)
          cir.store %3, %4 : !cir.ptr<!s8i>, !cir.ptr<!cir.ptr<!s8i>> loc(#loc88)
          %7 = cir.load deref %4 : !cir.ptr<!cir.ptr<!s8i>>, !cir.ptr<!s8i> loc(#loc46)
          %8 = cir.load %7 : !cir.ptr<!s8i>, !s8i loc(#loc47)
          cir.call @printHexCharLine(%8) : (!s8i) -> () loc(#loc48)
        } loc(#loc86)
      } loc(#loc85)
    } loc(#loc83)
    cir.return loc(#loc31)
  } loc(#loc82)
  cir.func no_proto internal private @staticReturnsFalse() -> !s32i extra(#fn_attr) {
    %0 = cir.alloca !s32i, !cir.ptr<!s32i>, ["__retval"] {alignment = 4 : i64} loc(#loc50)
    %1 = cir.const #cir.int<0> : !s32i loc(#loc51)
    cir.store %1, %0 : !s32i, !cir.ptr<!s32i> loc(#loc90)
    %2 = cir.load %0 : !cir.ptr<!s32i>, !s32i loc(#loc90)
    cir.return %2 : !s32i loc(#loc90)
  } loc(#loc89)
  cir.func no_proto internal private @good2() extra(#fn_attr) {
    cir.scope {
      %0 = cir.get_global @staticReturnsTrue : !cir.ptr<!cir.func<() -> !s32i>> loc(#loc93)
      %1 = cir.call @staticReturnsTrue() : () -> !s32i loc(#loc57)
      %2 = cir.cast(int_to_bool, %1 : !s32i), !cir.bool loc(#loc57)
      cir.if %2 {
        cir.scope {
          %3 = cir.alloca !s8i, !cir.ptr<!s8i>, ["charStack", init] {alignment = 1 : i64} loc(#loc96)
          %4 = cir.alloca !cir.ptr<!s8i>, !cir.ptr<!cir.ptr<!s8i>>, ["charPointer", init] {alignment = 8 : i64} loc(#loc97)
          %5 = cir.const #cir.int<97> : !s32i loc(#loc63)
          %6 = cir.cast(integral, %5 : !s32i), !s8i loc(#loc63)
          cir.store %6, %3 : !s8i, !cir.ptr<!s8i> loc(#loc96)
          cir.store %3, %4 : !cir.ptr<!s8i>, !cir.ptr<!cir.ptr<!s8i>> loc(#loc97)
          %7 = cir.load deref %4 : !cir.ptr<!cir.ptr<!s8i>>, !cir.ptr<!s8i> loc(#loc66)
          %8 = cir.load %7 : !cir.ptr<!s8i>, !s8i loc(#loc67)
          cir.call @printHexCharLine(%8) : (!s8i) -> () loc(#loc68)
        } loc(#loc95)
      } loc(#loc94)
    } loc(#loc92)
    cir.return loc(#loc54)
  } loc(#loc91)
} loc(#loc)
#loc = loc("/workspaces/juliet-c/testcases/CWE587_Assignment_of_Fixed_Address_to_Pointer/CWE587_Assignment_of_Fixed_Address_to_Pointer__basic_08.c":0:0)
#loc1 = loc("../../testcasesupport/std_testcase_io.h":30:1)
#loc2 = loc("../../testcasesupport/std_testcase_io.h":30:35)
#loc3 = loc("CWE587_Assignment_of_Fixed_Address_to_Pointer__basic_08.c":33:1)
#loc4 = loc("CWE587_Assignment_of_Fixed_Address_to_Pointer__basic_08.c":43:1)
#loc5 = loc("CWE587_Assignment_of_Fixed_Address_to_Pointer__basic_08.c":35:5)
#loc6 = loc("CWE587_Assignment_of_Fixed_Address_to_Pointer__basic_08.c":42:5)
#loc7 = loc("CWE587_Assignment_of_Fixed_Address_to_Pointer__basic_08.c":35:8)
#loc8 = loc("CWE587_Assignment_of_Fixed_Address_to_Pointer__basic_08.c":35:26)
#loc9 = loc("CWE587_Assignment_of_Fixed_Address_to_Pointer__basic_08.c":36:5)
#loc10 = loc("CWE587_Assignment_of_Fixed_Address_to_Pointer__basic_08.c":37:9)
#loc11 = loc("CWE587_Assignment_of_Fixed_Address_to_Pointer__basic_08.c":41:9)
#loc12 = loc("CWE587_Assignment_of_Fixed_Address_to_Pointer__basic_08.c":39:13)
#loc13 = loc("CWE587_Assignment_of_Fixed_Address_to_Pointer__basic_08.c":39:40)
#loc14 = loc("CWE587_Assignment_of_Fixed_Address_to_Pointer__basic_08.c":40:31)
#loc15 = loc("CWE587_Assignment_of_Fixed_Address_to_Pointer__basic_08.c":40:30)
#loc16 = loc("CWE587_Assignment_of_Fixed_Address_to_Pointer__basic_08.c":40:13)
#loc17 = loc("CWE587_Assignment_of_Fixed_Address_to_Pointer__basic_08.c":82:1)
#loc18 = loc("CWE587_Assignment_of_Fixed_Address_to_Pointer__basic_08.c":86:1)
#loc19 = loc("CWE587_Assignment_of_Fixed_Address_to_Pointer__basic_08.c":84:5)
#loc20 = loc("CWE587_Assignment_of_Fixed_Address_to_Pointer__basic_08.c":84:11)
#loc21 = loc("CWE587_Assignment_of_Fixed_Address_to_Pointer__basic_08.c":85:5)
#loc22 = loc("CWE587_Assignment_of_Fixed_Address_to_Pointer__basic_08.c":85:11)
#loc23 = loc("CWE587_Assignment_of_Fixed_Address_to_Pointer__basic_08.c":21:1)
#loc24 = loc("CWE587_Assignment_of_Fixed_Address_to_Pointer__basic_08.c":24:1)
#loc25 = loc("CWE587_Assignment_of_Fixed_Address_to_Pointer__basic_08.c":23:12)
#loc26 = loc("CWE587_Assignment_of_Fixed_Address_to_Pointer__basic_08.c":23:5)
#loc27 = loc("../../testcasesupport/std_testcase_io.h":14:1)
#loc28 = loc("../../testcasesupport/std_testcase_io.h":14:33)
#loc29 = loc("CWE587_Assignment_of_Fixed_Address_to_Pointer__basic_08.c":55:19)
#loc30 = loc("CWE587_Assignment_of_Fixed_Address_to_Pointer__basic_08.c":50:1)
#loc31 = loc("CWE587_Assignment_of_Fixed_Address_to_Pointer__basic_08.c":66:1)
#loc32 = loc("CWE587_Assignment_of_Fixed_Address_to_Pointer__basic_08.c":52:5)
#loc33 = loc("CWE587_Assignment_of_Fixed_Address_to_Pointer__basic_08.c":65:5)
#loc34 = loc("CWE587_Assignment_of_Fixed_Address_to_Pointer__basic_08.c":52:8)
#loc35 = loc("CWE587_Assignment_of_Fixed_Address_to_Pointer__basic_08.c":52:27)
#loc36 = loc("CWE587_Assignment_of_Fixed_Address_to_Pointer__basic_08.c":53:5)
#loc37 = loc("CWE587_Assignment_of_Fixed_Address_to_Pointer__basic_08.c":56:5)
#loc38 = loc("CWE587_Assignment_of_Fixed_Address_to_Pointer__basic_08.c":58:5)
#loc39 = loc("CWE587_Assignment_of_Fixed_Address_to_Pointer__basic_08.c":55:9)
#loc40 = loc("CWE587_Assignment_of_Fixed_Address_to_Pointer__basic_08.c":59:9)
#loc41 = loc("CWE587_Assignment_of_Fixed_Address_to_Pointer__basic_08.c":64:9)
#loc42 = loc("CWE587_Assignment_of_Fixed_Address_to_Pointer__basic_08.c":61:13)
#loc43 = loc("CWE587_Assignment_of_Fixed_Address_to_Pointer__basic_08.c":61:30)
#loc44 = loc("CWE587_Assignment_of_Fixed_Address_to_Pointer__basic_08.c":62:13)
#loc45 = loc("CWE587_Assignment_of_Fixed_Address_to_Pointer__basic_08.c":62:34)
#loc46 = loc("CWE587_Assignment_of_Fixed_Address_to_Pointer__basic_08.c":63:31)
#loc47 = loc("CWE587_Assignment_of_Fixed_Address_to_Pointer__basic_08.c":63:30)
#loc48 = loc("CWE587_Assignment_of_Fixed_Address_to_Pointer__basic_08.c":63:13)
#loc49 = loc("CWE587_Assignment_of_Fixed_Address_to_Pointer__basic_08.c":26:1)
#loc50 = loc("CWE587_Assignment_of_Fixed_Address_to_Pointer__basic_08.c":29:1)
#loc51 = loc("CWE587_Assignment_of_Fixed_Address_to_Pointer__basic_08.c":28:12)
#loc52 = loc("CWE587_Assignment_of_Fixed_Address_to_Pointer__basic_08.c":28:5)
#loc53 = loc("CWE587_Assignment_of_Fixed_Address_to_Pointer__basic_08.c":69:1)
#loc54 = loc("CWE587_Assignment_of_Fixed_Address_to_Pointer__basic_08.c":80:1)
#loc55 = loc("CWE587_Assignment_of_Fixed_Address_to_Pointer__basic_08.c":71:5)
#loc56 = loc("CWE587_Assignment_of_Fixed_Address_to_Pointer__basic_08.c":79:5)
#loc57 = loc("CWE587_Assignment_of_Fixed_Address_to_Pointer__basic_08.c":71:8)
#loc58 = loc("CWE587_Assignment_of_Fixed_Address_to_Pointer__basic_08.c":71:26)
#loc59 = loc("CWE587_Assignment_of_Fixed_Address_to_Pointer__basic_08.c":72:5)
#loc60 = loc("CWE587_Assignment_of_Fixed_Address_to_Pointer__basic_08.c":73:9)
#loc61 = loc("CWE587_Assignment_of_Fixed_Address_to_Pointer__basic_08.c":78:9)
#loc62 = loc("CWE587_Assignment_of_Fixed_Address_to_Pointer__basic_08.c":75:13)
#loc63 = loc("CWE587_Assignment_of_Fixed_Address_to_Pointer__basic_08.c":75:30)
#loc64 = loc("CWE587_Assignment_of_Fixed_Address_to_Pointer__basic_08.c":76:13)
#loc65 = loc("CWE587_Assignment_of_Fixed_Address_to_Pointer__basic_08.c":76:34)
#loc66 = loc("CWE587_Assignment_of_Fixed_Address_to_Pointer__basic_08.c":77:31)
#loc67 = loc("CWE587_Assignment_of_Fixed_Address_to_Pointer__basic_08.c":77:30)
#loc68 = loc("CWE587_Assignment_of_Fixed_Address_to_Pointer__basic_08.c":77:13)
#loc69 = loc(fused[#loc1, #loc2])
#loc70 = loc(fused[#loc3, #loc4])
#loc71 = loc(fused[#loc5, #loc6])
#loc72 = loc(fused[#loc7, #loc8])
#loc73 = loc(fused[#loc9, #loc6])
#loc74 = loc(fused[#loc10, #loc11])
#loc75 = loc(fused[#loc12, #loc13])
#loc76 = loc(fused[#loc17, #loc18])
#loc77 = loc(fused[#loc19, #loc20])
#loc78 = loc(fused[#loc21, #loc22])
#loc79 = loc(fused[#loc23, #loc24])
#loc80 = loc(fused[#loc26, #loc25])
#loc81 = loc(fused[#loc27, #loc28])
#loc82 = loc(fused[#loc30, #loc31])
#loc83 = loc(fused[#loc32, #loc33])
#loc84 = loc(fused[#loc34, #loc35])
#loc85 = loc(fused[#loc36, #loc37, #loc38, #loc33])
#loc86 = loc(fused[#loc40, #loc41])
#loc87 = loc(fused[#loc42, #loc43])
#loc88 = loc(fused[#loc44, #loc45])
#loc89 = loc(fused[#loc49, #loc50])
#loc90 = loc(fused[#loc52, #loc51])
#loc91 = loc(fused[#loc53, #loc54])
#loc92 = loc(fused[#loc55, #loc56])
#loc93 = loc(fused[#loc57, #loc58])
#loc94 = loc(fused[#loc59, #loc56])
#loc95 = loc(fused[#loc60, #loc61])
#loc96 = loc(fused[#loc62, #loc63])
#loc97 = loc(fused[#loc64, #loc65])
