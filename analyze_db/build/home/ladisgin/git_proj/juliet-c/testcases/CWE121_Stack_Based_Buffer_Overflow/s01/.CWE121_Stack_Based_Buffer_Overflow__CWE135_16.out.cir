!s32i = !cir.int<s, 32>
!s64i = !cir.int<s, 64>
!s8i = !cir.int<s, 8>
!u32i = !cir.int<u, 32>
!u64i = !cir.int<u, 64>
!u8i = !cir.int<u, 8>
!void = !cir.void
#fn_attr = #cir<extra({nothrow = #cir.nothrow})>
#fn_attr1 = #cir<extra({inline = #cir.inline<no>, nothrow = #cir.nothrow, optnone = #cir.optnone})>
#loc52 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE135_16.c":117:10)
#loc53 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE135_16.c":117:14)
#loc54 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE135_16.c":117:20)
#loc55 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE135_16.c":117:32)
#loc152 = loc(fused[#loc52, #loc53])
#loc153 = loc(fused[#loc54, #loc55])
module @"/home/ladisgin/git_proj/juliet-c/testcases/CWE121_Stack_Based_Buffer_Overflow/s01/CWE121_Stack_Based_Buffer_Overflow__CWE135_16.c" attributes {cir.lang = #cir.lang<c>, cir.sob = #cir.signed_overflow_behavior<undefined>, cir.triple = "x86_64-unknown-linux-gnu", dlti.dl_spec = #dlti.dl_spec<f64 = dense<64> : vector<2xi64>, f16 = dense<16> : vector<2xi64>, !llvm.ptr<271> = dense<32> : vector<4xi64>, !llvm.ptr<270> = dense<32> : vector<4xi64>, f128 = dense<128> : vector<2xi64>, i8 = dense<8> : vector<2xi64>, i1 = dense<8> : vector<2xi64>, i32 = dense<32> : vector<2xi64>, i16 = dense<16> : vector<2xi64>, f80 = dense<128> : vector<2xi64>, !llvm.ptr = dense<64> : vector<4xi64>, i64 = dense<64> : vector<2xi64>, !llvm.ptr<272> = dense<64> : vector<4xi64>, i128 = dense<128> : vector<2xi64>, "dlti.endianness" = "little", "dlti.stack_alignment" = 128 : i64>} {
  cir.global "private" constant cir_private dsolocal @".str" = #cir.const_array<[#cir.int<65> : !s32i, #cir.int<65> : !s32i, #cir.int<65> : !s32i, #cir.int<65> : !s32i, #cir.int<65> : !s32i, #cir.int<65> : !s32i, #cir.int<65> : !s32i, #cir.int<65> : !s32i, #cir.int<65> : !s32i, #cir.int<65> : !s32i, #cir.int<65> : !s32i, #cir.int<65> : !s32i, #cir.int<65> : !s32i, #cir.int<65> : !s32i, #cir.int<65> : !s32i, #cir.int<65> : !s32i, #cir.int<65> : !s32i, #cir.int<65> : !s32i, #cir.int<65> : !s32i, #cir.int<65> : !s32i, #cir.int<65> : !s32i, #cir.int<65> : !s32i, #cir.int<65> : !s32i, #cir.int<65> : !s32i, #cir.int<65> : !s32i, #cir.int<65> : !s32i, #cir.int<65> : !s32i, #cir.int<65> : !s32i, #cir.int<65> : !s32i, #cir.int<65> : !s32i, #cir.int<65> : !s32i, #cir.int<65> : !s32i, #cir.int<65> : !s32i, #cir.int<65> : !s32i, #cir.int<65> : !s32i, #cir.int<65> : !s32i, #cir.int<65> : !s32i, #cir.int<65> : !s32i, #cir.int<65> : !s32i, #cir.int<65> : !s32i, #cir.int<65> : !s32i, #cir.int<65> : !s32i, #cir.int<0> : !s32i]> : !cir.array<!s32i x 43> {alignment = 4 : i64} loc(#loc1)
  cir.func private @strlen(!cir.ptr<!s8i>) -> !u64i extra(#fn_attr) loc(#loc134)
  cir.func private @wcscpy(!cir.ptr<!s32i>, !cir.ptr<!s32i>) -> !cir.ptr<!s32i> extra(#fn_attr) loc(#loc135)
  cir.func private @printLine(!cir.ptr<!s8i>) loc(#loc136)
  cir.func no_proto @CWE121_Stack_Based_Buffer_Overflow__CWE135_16_bad() extra(#fn_attr1) {
    %0 = cir.alloca !u64i, !cir.ptr<!u64i>, ["dataLen", init] {alignment = 8 : i64} loc(#loc138)
    %1 = cir.alloca !cir.ptr<!void>, !cir.ptr<!cir.ptr<!void>>, ["dest", init] {alignment = 8 : i64} loc(#loc139)
    %2 = cir.alloca !cir.ptr<!void>, !cir.ptr<!cir.ptr<!void>>, ["data"] {alignment = 8 : i64} loc(#loc140)
    %3 = cir.const #cir.ptr<null> : !cir.ptr<!void> loc(#loc16)
    cir.store %3, %2 : !cir.ptr<!void>, !cir.ptr<!cir.ptr<!void>> loc(#loc141)
    cir.br ^bb1 loc(#loc142)
  ^bb1:  // pred: ^bb0
    cir.br ^bb2 loc(#loc142)
  ^bb2:  // pred: ^bb1
    %4 = cir.const #cir.int<1> : !s32i loc(#loc20)
    %5 = cir.cast(int_to_bool, %4 : !s32i), !cir.bool loc(#loc20)
    cir.brcond %5 ^bb3, ^bb4 loc(#loc20)
  ^bb3:  // pred: ^bb2
    %6 = cir.get_global @".str" : !cir.ptr<!cir.array<!s32i x 43>> loc(#loc1)
    %7 = cir.cast(array_to_ptrdecay, %6 : !cir.ptr<!cir.array<!s32i x 43>>), !cir.ptr<!s32i> loc(#loc1)
    %8 = cir.cast(bitcast, %7 : !cir.ptr<!s32i>), !cir.ptr<!void> loc(#loc1)
    cir.store %8, %2 : !cir.ptr<!void>, !cir.ptr<!cir.ptr<!void>> loc(#loc143)
    cir.br ^bb4 loc(#loc22)
  ^bb4:  // 2 preds: ^bb2, ^bb3
    cir.br ^bb5 loc(#loc19)
  ^bb5:  // pred: ^bb4
    cir.br ^bb6 loc(#loc144)
  ^bb6:  // pred: ^bb5
    cir.br ^bb7 loc(#loc144)
  ^bb7:  // pred: ^bb6
    %9 = cir.const #cir.int<1> : !s32i loc(#loc25)
    %10 = cir.cast(int_to_bool, %9 : !s32i), !cir.bool loc(#loc25)
    cir.brcond %10 ^bb8, ^bb11 loc(#loc25)
  ^bb8:  // pred: ^bb7
    cir.br ^bb9 loc(#loc145)
  ^bb9:  // pred: ^bb8
    %11 = cir.get_global @strlen : !cir.ptr<!cir.func<!u64i (!cir.ptr<!s8i>)>> loc(#loc28)
    %12 = cir.load %2 : !cir.ptr<!cir.ptr<!void>>, !cir.ptr<!void> loc(#loc29)
    %13 = cir.cast(bitcast, %12 : !cir.ptr<!void>), !cir.ptr<!s8i> loc(#loc29)
    %14 = cir.call @strlen(%13) : (!cir.ptr<!s8i>) -> !u64i extra(#fn_attr) loc(#loc28)
    cir.store %14, %0 : !u64i, !cir.ptr<!u64i> loc(#loc138)
    %15 = cir.load %0 : !cir.ptr<!u64i>, !u64i loc(#loc13)
    %16 = cir.const #cir.int<1> : !s32i loc(#loc13)
    %17 = cir.cast(integral, %16 : !s32i), !u64i loc(#loc13)
    %18 = cir.binop(add, %15, %17) : !u64i loc(#loc13)
    %19 = cir.const #cir.int<4> : !u64i loc(#loc13)
    %20 = cir.binop(mul, %18, %19) : !u64i loc(#loc13)
    %21 = cir.alloca !u8i, !cir.ptr<!u8i>, %20 : !u64i, ["bi_alloca"] {alignment = 16 : i64} loc(#loc13)
    %22 = cir.cast(bitcast, %21 : !cir.ptr<!u8i>), !cir.ptr<!void> loc(#loc13)
    cir.store %22, %1 : !cir.ptr<!void>, !cir.ptr<!cir.ptr<!void>> loc(#loc139)
    %23 = cir.load %1 : !cir.ptr<!cir.ptr<!void>>, !cir.ptr<!void> loc(#loc30)
    %24 = cir.cast(bitcast, %23 : !cir.ptr<!void>), !cir.ptr<!s32i> loc(#loc30)
    %25 = cir.load %2 : !cir.ptr<!cir.ptr<!void>>, !cir.ptr<!void> loc(#loc31)
    %26 = cir.cast(bitcast, %25 : !cir.ptr<!void>), !cir.ptr<!s32i> loc(#loc31)
    %27 = cir.call @wcscpy(%24, %26) : (!cir.ptr<!s32i>, !cir.ptr<!s32i>) -> !cir.ptr<!s32i> extra(#fn_attr) loc(#loc32)
    %28 = cir.load %1 : !cir.ptr<!cir.ptr<!void>>, !cir.ptr<!void> loc(#loc33)
    %29 = cir.cast(bitcast, %28 : !cir.ptr<!void>), !cir.ptr<!s8i> loc(#loc33)
    cir.call @printLine(%29) : (!cir.ptr<!s8i>) -> () loc(#loc34)
    cir.br ^bb10 loc(#loc27)
  ^bb10:  // pred: ^bb9
    cir.br ^bb11 loc(#loc35)
  ^bb11:  // 2 preds: ^bb7, ^bb10
    cir.br ^bb12 loc(#loc24)
  ^bb12:  // pred: ^bb11
    cir.return loc(#loc9)
  } loc(#loc137)
  cir.func no_proto @CWE121_Stack_Based_Buffer_Overflow__CWE135_16_good() extra(#fn_attr1) {
    %0 = cir.get_global @goodB2G : !cir.ptr<!cir.func<!void ()>> loc(#loc147)
    cir.call %0() : (!cir.ptr<!cir.func<!void ()>>) -> () loc(#loc38)
    %1 = cir.get_global @goodG2B : !cir.ptr<!cir.func<!void ()>> loc(#loc148)
    cir.call %1() : (!cir.ptr<!cir.func<!void ()>>) -> () loc(#loc40)
    cir.return loc(#loc37)
  } loc(#loc146)
  cir.func private @srand(!u32i) extra(#fn_attr) loc(#loc149)
  cir.func private @time(!cir.ptr<!s64i>) -> !s64i extra(#fn_attr) loc(#loc150)
  cir.global "private" constant cir_private dsolocal @".str.1" = #cir.const_array<"Calling good()...\00" : !cir.array<!s8i x 18>> : !cir.array<!s8i x 18> {alignment = 1 : i64} loc(#loc46)
  cir.global "private" constant cir_private dsolocal @".str.2" = #cir.const_array<"Finished good()\00" : !cir.array<!s8i x 16>> : !cir.array<!s8i x 16> {alignment = 1 : i64} loc(#loc47)
  cir.global "private" constant cir_private dsolocal @".str.3" = #cir.const_array<"Calling bad()...\00" : !cir.array<!s8i x 17>> : !cir.array<!s8i x 17> {alignment = 1 : i64} loc(#loc48)
  cir.global "private" constant cir_private dsolocal @".str.4" = #cir.const_array<"Finished bad()\00" : !cir.array<!s8i x 15>> : !cir.array<!s8i x 15> {alignment = 1 : i64} loc(#loc49)
  cir.func @main(%arg0: !s32i loc(fused[#loc52, #loc53]), %arg1: !cir.ptr<!cir.ptr<!s8i>> loc(fused[#loc54, #loc55])) -> !s32i extra(#fn_attr1) {
    %0 = cir.alloca !s32i, !cir.ptr<!s32i>, ["argc", init] {alignment = 4 : i64} loc(#loc152)
    %1 = cir.alloca !cir.ptr<!cir.ptr<!s8i>>, !cir.ptr<!cir.ptr<!cir.ptr<!s8i>>>, ["argv", init] {alignment = 8 : i64} loc(#loc153)
    %2 = cir.alloca !s32i, !cir.ptr<!s32i>, ["__retval"] {alignment = 4 : i64} loc(#loc51)
    cir.store %arg0, %0 : !s32i, !cir.ptr<!s32i> loc(#loc56)
    cir.store %arg1, %1 : !cir.ptr<!cir.ptr<!s8i>>, !cir.ptr<!cir.ptr<!cir.ptr<!s8i>>> loc(#loc56)
    %3 = cir.const #cir.ptr<null> : !cir.ptr<!s64i> loc(#loc57)
    %4 = cir.call @time(%3) : (!cir.ptr<!s64i>) -> !s64i extra(#fn_attr) loc(#loc58)
    %5 = cir.cast(integral, %4 : !s64i), !u32i loc(#loc58)
    cir.call @srand(%5) : (!u32i) -> () extra(#fn_attr) loc(#loc59)
    %6 = cir.get_global @".str.1" : !cir.ptr<!cir.array<!s8i x 18>> loc(#loc46)
    %7 = cir.cast(array_to_ptrdecay, %6 : !cir.ptr<!cir.array<!s8i x 18>>), !cir.ptr<!s8i> loc(#loc46)
    cir.call @printLine(%7) : (!cir.ptr<!s8i>) -> () loc(#loc60)
    %8 = cir.get_global @CWE121_Stack_Based_Buffer_Overflow__CWE135_16_good : !cir.ptr<!cir.func<!void ()>> loc(#loc154)
    cir.call @CWE121_Stack_Based_Buffer_Overflow__CWE135_16_good() : () -> () loc(#loc61)
    %9 = cir.get_global @".str.2" : !cir.ptr<!cir.array<!s8i x 16>> loc(#loc47)
    %10 = cir.cast(array_to_ptrdecay, %9 : !cir.ptr<!cir.array<!s8i x 16>>), !cir.ptr<!s8i> loc(#loc47)
    cir.call @printLine(%10) : (!cir.ptr<!s8i>) -> () loc(#loc63)
    %11 = cir.get_global @".str.3" : !cir.ptr<!cir.array<!s8i x 17>> loc(#loc48)
    %12 = cir.cast(array_to_ptrdecay, %11 : !cir.ptr<!cir.array<!s8i x 17>>), !cir.ptr<!s8i> loc(#loc48)
    cir.call @printLine(%12) : (!cir.ptr<!s8i>) -> () loc(#loc64)
    %13 = cir.get_global @CWE121_Stack_Based_Buffer_Overflow__CWE135_16_bad : !cir.ptr<!cir.func<!void ()>> loc(#loc155)
    cir.call @CWE121_Stack_Based_Buffer_Overflow__CWE135_16_bad() : () -> () loc(#loc65)
    %14 = cir.get_global @".str.4" : !cir.ptr<!cir.array<!s8i x 15>> loc(#loc49)
    %15 = cir.cast(array_to_ptrdecay, %14 : !cir.ptr<!cir.array<!s8i x 15>>), !cir.ptr<!s8i> loc(#loc49)
    cir.call @printLine(%15) : (!cir.ptr<!s8i>) -> () loc(#loc67)
    %16 = cir.const #cir.int<0> : !s32i loc(#loc68)
    cir.store %16, %2 : !s32i, !cir.ptr<!s32i> loc(#loc156)
    %17 = cir.load %2 : !cir.ptr<!s32i>, !s32i loc(#loc156)
    cir.return %17 : !s32i loc(#loc156)
  } loc(#loc151)
  cir.func private @wcslen(!cir.ptr<!s32i>) -> !u64i extra(#fn_attr) loc(#loc157)
  cir.func private @printWLine(!cir.ptr<!s32i>) loc(#loc158)
  cir.func no_proto internal private @goodB2G() extra(#fn_attr1) {
    %0 = cir.alloca !u64i, !cir.ptr<!u64i>, ["dataLen", init] {alignment = 8 : i64} loc(#loc160)
    %1 = cir.alloca !cir.ptr<!void>, !cir.ptr<!cir.ptr<!void>>, ["dest", init] {alignment = 8 : i64} loc(#loc161)
    %2 = cir.alloca !cir.ptr<!void>, !cir.ptr<!cir.ptr<!void>>, ["data"] {alignment = 8 : i64} loc(#loc162)
    %3 = cir.const #cir.ptr<null> : !cir.ptr<!void> loc(#loc82)
    cir.store %3, %2 : !cir.ptr<!void>, !cir.ptr<!cir.ptr<!void>> loc(#loc163)
    cir.br ^bb1 loc(#loc164)
  ^bb1:  // pred: ^bb0
    cir.br ^bb2 loc(#loc164)
  ^bb2:  // pred: ^bb1
    %4 = cir.const #cir.int<1> : !s32i loc(#loc86)
    %5 = cir.cast(int_to_bool, %4 : !s32i), !cir.bool loc(#loc86)
    cir.brcond %5 ^bb3, ^bb4 loc(#loc86)
  ^bb3:  // pred: ^bb2
    %6 = cir.get_global @".str" : !cir.ptr<!cir.array<!s32i x 43>> loc(#loc87)
    %7 = cir.cast(array_to_ptrdecay, %6 : !cir.ptr<!cir.array<!s32i x 43>>), !cir.ptr<!s32i> loc(#loc87)
    %8 = cir.cast(bitcast, %7 : !cir.ptr<!s32i>), !cir.ptr<!void> loc(#loc87)
    cir.store %8, %2 : !cir.ptr<!void>, !cir.ptr<!cir.ptr<!void>> loc(#loc165)
    cir.br ^bb4 loc(#loc89)
  ^bb4:  // 2 preds: ^bb2, ^bb3
    cir.br ^bb5 loc(#loc85)
  ^bb5:  // pred: ^bb4
    cir.br ^bb6 loc(#loc166)
  ^bb6:  // pred: ^bb5
    cir.br ^bb7 loc(#loc166)
  ^bb7:  // pred: ^bb6
    %9 = cir.const #cir.int<1> : !s32i loc(#loc92)
    %10 = cir.cast(int_to_bool, %9 : !s32i), !cir.bool loc(#loc92)
    cir.brcond %10 ^bb8, ^bb11 loc(#loc92)
  ^bb8:  // pred: ^bb7
    cir.br ^bb9 loc(#loc167)
  ^bb9:  // pred: ^bb8
    %11 = cir.get_global @wcslen : !cir.ptr<!cir.func<!u64i (!cir.ptr<!s32i>)>> loc(#loc95)
    %12 = cir.load %2 : !cir.ptr<!cir.ptr<!void>>, !cir.ptr<!void> loc(#loc96)
    %13 = cir.cast(bitcast, %12 : !cir.ptr<!void>), !cir.ptr<!s32i> loc(#loc96)
    %14 = cir.call @wcslen(%13) : (!cir.ptr<!s32i>) -> !u64i extra(#fn_attr) loc(#loc95)
    cir.store %14, %0 : !u64i, !cir.ptr<!u64i> loc(#loc160)
    %15 = cir.load %0 : !cir.ptr<!u64i>, !u64i loc(#loc79)
    %16 = cir.const #cir.int<1> : !s32i loc(#loc79)
    %17 = cir.cast(integral, %16 : !s32i), !u64i loc(#loc79)
    %18 = cir.binop(add, %15, %17) : !u64i loc(#loc79)
    %19 = cir.const #cir.int<4> : !u64i loc(#loc79)
    %20 = cir.binop(mul, %18, %19) : !u64i loc(#loc79)
    %21 = cir.alloca !u8i, !cir.ptr<!u8i>, %20 : !u64i, ["bi_alloca"] {alignment = 16 : i64} loc(#loc79)
    %22 = cir.cast(bitcast, %21 : !cir.ptr<!u8i>), !cir.ptr<!void> loc(#loc79)
    cir.store %22, %1 : !cir.ptr<!void>, !cir.ptr<!cir.ptr<!void>> loc(#loc161)
    %23 = cir.load %1 : !cir.ptr<!cir.ptr<!void>>, !cir.ptr<!void> loc(#loc97)
    %24 = cir.cast(bitcast, %23 : !cir.ptr<!void>), !cir.ptr<!s32i> loc(#loc97)
    %25 = cir.load %2 : !cir.ptr<!cir.ptr<!void>>, !cir.ptr<!void> loc(#loc98)
    %26 = cir.cast(bitcast, %25 : !cir.ptr<!void>), !cir.ptr<!s32i> loc(#loc98)
    %27 = cir.call @wcscpy(%24, %26) : (!cir.ptr<!s32i>, !cir.ptr<!s32i>) -> !cir.ptr<!s32i> extra(#fn_attr) loc(#loc99)
    %28 = cir.load %1 : !cir.ptr<!cir.ptr<!void>>, !cir.ptr<!void> loc(#loc100)
    %29 = cir.cast(bitcast, %28 : !cir.ptr<!void>), !cir.ptr<!s32i> loc(#loc100)
    cir.call @printWLine(%29) : (!cir.ptr<!s32i>) -> () loc(#loc101)
    cir.br ^bb10 loc(#loc94)
  ^bb10:  // pred: ^bb9
    cir.br ^bb11 loc(#loc102)
  ^bb11:  // 2 preds: ^bb7, ^bb10
    cir.br ^bb12 loc(#loc91)
  ^bb12:  // pred: ^bb11
    cir.return loc(#loc75)
  } loc(#loc159)
  cir.global "private" constant cir_private dsolocal @".str.5" = #cir.const_array<"AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA\00" : !cir.array<!s8i x 43>> : !cir.array<!s8i x 43> {alignment = 1 : i64} loc(#loc103)
  cir.func private @strcpy(!cir.ptr<!s8i>, !cir.ptr<!s8i>) -> !cir.ptr<!s8i> extra(#fn_attr) loc(#loc168)
  cir.func no_proto internal private @goodG2B() extra(#fn_attr1) {
    %0 = cir.alloca !u64i, !cir.ptr<!u64i>, ["dataLen", init] {alignment = 8 : i64} loc(#loc170)
    %1 = cir.alloca !cir.ptr<!void>, !cir.ptr<!cir.ptr<!void>>, ["dest", init] {alignment = 8 : i64} loc(#loc171)
    %2 = cir.alloca !cir.ptr<!void>, !cir.ptr<!cir.ptr<!void>>, ["data"] {alignment = 8 : i64} loc(#loc172)
    %3 = cir.const #cir.ptr<null> : !cir.ptr<!void> loc(#loc114)
    cir.store %3, %2 : !cir.ptr<!void>, !cir.ptr<!cir.ptr<!void>> loc(#loc173)
    cir.br ^bb1 loc(#loc174)
  ^bb1:  // pred: ^bb0
    cir.br ^bb2 loc(#loc174)
  ^bb2:  // pred: ^bb1
    %4 = cir.const #cir.int<1> : !s32i loc(#loc118)
    %5 = cir.cast(int_to_bool, %4 : !s32i), !cir.bool loc(#loc118)
    cir.brcond %5 ^bb3, ^bb4 loc(#loc118)
  ^bb3:  // pred: ^bb2
    %6 = cir.get_global @".str.5" : !cir.ptr<!cir.array<!s8i x 43>> loc(#loc103)
    %7 = cir.cast(array_to_ptrdecay, %6 : !cir.ptr<!cir.array<!s8i x 43>>), !cir.ptr<!s8i> loc(#loc103)
    %8 = cir.cast(bitcast, %7 : !cir.ptr<!s8i>), !cir.ptr<!void> loc(#loc103)
    cir.store %8, %2 : !cir.ptr<!void>, !cir.ptr<!cir.ptr<!void>> loc(#loc175)
    cir.br ^bb4 loc(#loc120)
  ^bb4:  // 2 preds: ^bb2, ^bb3
    cir.br ^bb5 loc(#loc117)
  ^bb5:  // pred: ^bb4
    cir.br ^bb6 loc(#loc176)
  ^bb6:  // pred: ^bb5
    cir.br ^bb7 loc(#loc176)
  ^bb7:  // pred: ^bb6
    %9 = cir.const #cir.int<1> : !s32i loc(#loc123)
    %10 = cir.cast(int_to_bool, %9 : !s32i), !cir.bool loc(#loc123)
    cir.brcond %10 ^bb8, ^bb11 loc(#loc123)
  ^bb8:  // pred: ^bb7
    cir.br ^bb9 loc(#loc177)
  ^bb9:  // pred: ^bb8
    %11 = cir.get_global @strlen : !cir.ptr<!cir.func<!u64i (!cir.ptr<!s8i>)>> loc(#loc126)
    %12 = cir.load %2 : !cir.ptr<!cir.ptr<!void>>, !cir.ptr<!void> loc(#loc127)
    %13 = cir.cast(bitcast, %12 : !cir.ptr<!void>), !cir.ptr<!s8i> loc(#loc127)
    %14 = cir.call @strlen(%13) : (!cir.ptr<!s8i>) -> !u64i extra(#fn_attr) loc(#loc126)
    cir.store %14, %0 : !u64i, !cir.ptr<!u64i> loc(#loc170)
    %15 = cir.load %0 : !cir.ptr<!u64i>, !u64i loc(#loc111)
    %16 = cir.const #cir.int<1> : !s32i loc(#loc111)
    %17 = cir.cast(integral, %16 : !s32i), !u64i loc(#loc111)
    %18 = cir.binop(add, %15, %17) : !u64i loc(#loc111)
    %19 = cir.const #cir.int<1> : !s32i loc(#loc111)
    %20 = cir.cast(integral, %19 : !s32i), !u64i loc(#loc111)
    %21 = cir.binop(mul, %18, %20) : !u64i loc(#loc111)
    %22 = cir.alloca !u8i, !cir.ptr<!u8i>, %21 : !u64i, ["bi_alloca"] {alignment = 16 : i64} loc(#loc111)
    %23 = cir.cast(bitcast, %22 : !cir.ptr<!u8i>), !cir.ptr<!void> loc(#loc111)
    cir.store %23, %1 : !cir.ptr<!void>, !cir.ptr<!cir.ptr<!void>> loc(#loc171)
    %24 = cir.get_global @strcpy : !cir.ptr<!cir.func<!cir.ptr<!s8i> (!cir.ptr<!s8i>, !cir.ptr<!s8i>)>> loc(#loc128)
    %25 = cir.load %1 : !cir.ptr<!cir.ptr<!void>>, !cir.ptr<!void> loc(#loc129)
    %26 = cir.cast(bitcast, %25 : !cir.ptr<!void>), !cir.ptr<!s8i> loc(#loc129)
    %27 = cir.load %2 : !cir.ptr<!cir.ptr<!void>>, !cir.ptr<!void> loc(#loc130)
    %28 = cir.cast(bitcast, %27 : !cir.ptr<!void>), !cir.ptr<!s8i> loc(#loc130)
    %29 = cir.call @strcpy(%26, %28) : (!cir.ptr<!s8i>, !cir.ptr<!s8i>) -> !cir.ptr<!s8i> extra(#fn_attr) loc(#loc128)
    %30 = cir.load %1 : !cir.ptr<!cir.ptr<!void>>, !cir.ptr<!void> loc(#loc131)
    %31 = cir.cast(bitcast, %30 : !cir.ptr<!void>), !cir.ptr<!s8i> loc(#loc131)
    cir.call @printLine(%31) : (!cir.ptr<!s8i>) -> () loc(#loc132)
    cir.br ^bb10 loc(#loc125)
  ^bb10:  // pred: ^bb9
    cir.br ^bb11 loc(#loc133)
  ^bb11:  // 2 preds: ^bb7, ^bb10
    cir.br ^bb12 loc(#loc122)
  ^bb12:  // pred: ^bb11
    cir.return loc(#loc107)
  } loc(#loc169)
} loc(#loc)
#loc = loc("/home/ladisgin/git_proj/juliet-c/testcases/CWE121_Stack_Based_Buffer_Overflow/s01/CWE121_Stack_Based_Buffer_Overflow__CWE135_16.c":0:0)
#loc1 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE135_16.c":34:24)
#loc2 = loc("/usr/include/string.h":407:1)
#loc3 = loc("/usr/include/string.h":408:33)
#loc4 = loc("/usr/include/wchar.h":98:1)
#loc5 = loc("/usr/include/wchar.h":100:14)
#loc6 = loc("../../../testcasesupport/std_testcase_io.h":14:1)
#loc7 = loc("../../../testcasesupport/std_testcase_io.h":14:33)
#loc8 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE135_16.c":27:1)
#loc9 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE135_16.c":48:1)
#loc10 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE135_16.c":41:13)
#loc11 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE135_16.c":41:49)
#loc12 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE135_16.c":42:13)
#loc13 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE135_16.c":42:35)
#loc14 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE135_16.c":29:5)
#loc15 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE135_16.c":29:12)
#loc16 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE135_16.c":30:12)
#loc17 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE135_16.c":30:5)
#loc18 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE135_16.c":31:5)
#loc19 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE135_16.c":36:5)
#loc20 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE135_16.c":31:11)
#loc21 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE135_16.c":34:9)
#loc22 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE135_16.c":35:9)
#loc23 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE135_16.c":37:5)
#loc24 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE135_16.c":47:5)
#loc25 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE135_16.c":37:11)
#loc26 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE135_16.c":39:9)
#loc27 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE135_16.c":45:9)
#loc28 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE135_16.c":41:30)
#loc29 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE135_16.c":41:45)
#loc30 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE135_16.c":43:26)
#loc31 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE135_16.c":43:32)
#loc32 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE135_16.c":43:19)
#loc33 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE135_16.c":44:31)
#loc34 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE135_16.c":44:13)
#loc35 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE135_16.c":46:9)
#loc36 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE135_16.c":102:1)
#loc37 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE135_16.c":106:1)
#loc38 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE135_16.c":104:5)
#loc39 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE135_16.c":104:13)
#loc40 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE135_16.c":105:5)
#loc41 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE135_16.c":105:13)
#loc42 = loc("/usr/include/stdlib.h":575:1)
#loc43 = loc("/usr/include/stdlib.h":575:41)
#loc44 = loc("/usr/include/time.h":76:1)
#loc45 = loc("/usr/include/time.h":76:38)
#loc46 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE135_16.c":122:15)
#loc47 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE135_16.c":124:15)
#loc48 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE135_16.c":127:15)
#loc49 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE135_16.c":129:15)
#loc50 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE135_16.c":117:1)
#loc51 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE135_16.c":132:1)
#loc56 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE135_16.c":118:1)
#loc57 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE135_16.c":120:27)
#loc58 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE135_16.c":120:22)
#loc59 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE135_16.c":120:5)
#loc60 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE135_16.c":122:5)
#loc61 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE135_16.c":123:5)
#loc62 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE135_16.c":123:56)
#loc63 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE135_16.c":124:5)
#loc64 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE135_16.c":127:5)
#loc65 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE135_16.c":128:5)
#loc66 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE135_16.c":128:55)
#loc67 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE135_16.c":129:5)
#loc68 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE135_16.c":131:12)
#loc69 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE135_16.c":131:5)
#loc70 = loc("/usr/include/wchar.h":247:1)
#loc71 = loc("/usr/include/wchar.h":247:51)
#loc72 = loc("../../../testcasesupport/std_testcase_io.h":16:1)
#loc73 = loc("../../../testcasesupport/std_testcase_io.h":16:37)
#loc74 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE135_16.c":55:1)
#loc75 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE135_16.c":76:1)
#loc76 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE135_16.c":69:13)
#loc77 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE135_16.c":69:52)
#loc78 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE135_16.c":70:13)
#loc79 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE135_16.c":70:35)
#loc80 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE135_16.c":57:5)
#loc81 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE135_16.c":57:12)
#loc82 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE135_16.c":58:12)
#loc83 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE135_16.c":58:5)
#loc84 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE135_16.c":59:5)
#loc85 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE135_16.c":64:5)
#loc86 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE135_16.c":59:11)
#loc87 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE135_16.c":62:24)
#loc88 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE135_16.c":62:9)
#loc89 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE135_16.c":63:9)
#loc90 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE135_16.c":65:5)
#loc91 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE135_16.c":75:5)
#loc92 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE135_16.c":65:11)
#loc93 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE135_16.c":67:9)
#loc94 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE135_16.c":73:9)
#loc95 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE135_16.c":69:30)
#loc96 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE135_16.c":69:48)
#loc97 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE135_16.c":71:26)
#loc98 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE135_16.c":71:32)
#loc99 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE135_16.c":71:19)
#loc100 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE135_16.c":72:35)
#loc101 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE135_16.c":72:13)
#loc102 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE135_16.c":74:9)
#loc103 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE135_16.c":86:24)
#loc104 = loc("/usr/include/string.h":141:1)
#loc105 = loc("/usr/include/string.h":142:14)
#loc106 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE135_16.c":79:1)
#loc107 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE135_16.c":100:1)
#loc108 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE135_16.c":93:13)
#loc109 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE135_16.c":93:49)
#loc110 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE135_16.c":94:13)
#loc111 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE135_16.c":94:35)
#loc112 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE135_16.c":81:5)
#loc113 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE135_16.c":81:12)
#loc114 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE135_16.c":82:12)
#loc115 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE135_16.c":82:5)
#loc116 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE135_16.c":83:5)
#loc117 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE135_16.c":88:5)
#loc118 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE135_16.c":83:11)
#loc119 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE135_16.c":86:9)
#loc120 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE135_16.c":87:9)
#loc121 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE135_16.c":89:5)
#loc122 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE135_16.c":99:5)
#loc123 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE135_16.c":89:11)
#loc124 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE135_16.c":91:9)
#loc125 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE135_16.c":97:9)
#loc126 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE135_16.c":93:30)
#loc127 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE135_16.c":93:45)
#loc128 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE135_16.c":95:19)
#loc129 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE135_16.c":95:26)
#loc130 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE135_16.c":95:32)
#loc131 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE135_16.c":96:31)
#loc132 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE135_16.c":96:13)
#loc133 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE135_16.c":98:9)
#loc134 = loc(fused[#loc2, #loc3])
#loc135 = loc(fused[#loc4, #loc5])
#loc136 = loc(fused[#loc6, #loc7])
#loc137 = loc(fused[#loc8, #loc9])
#loc138 = loc(fused[#loc10, #loc11])
#loc139 = loc(fused[#loc12, #loc13])
#loc140 = loc(fused[#loc14, #loc15])
#loc141 = loc(fused[#loc17, #loc16])
#loc142 = loc(fused[#loc18, #loc19])
#loc143 = loc(fused[#loc21, #loc1])
#loc144 = loc(fused[#loc23, #loc24])
#loc145 = loc(fused[#loc26, #loc27])
#loc146 = loc(fused[#loc36, #loc37])
#loc147 = loc(fused[#loc38, #loc39])
#loc148 = loc(fused[#loc40, #loc41])
#loc149 = loc(fused[#loc42, #loc43])
#loc150 = loc(fused[#loc44, #loc45])
#loc151 = loc(fused[#loc50, #loc51])
#loc154 = loc(fused[#loc61, #loc62])
#loc155 = loc(fused[#loc65, #loc66])
#loc156 = loc(fused[#loc69, #loc68])
#loc157 = loc(fused[#loc70, #loc71])
#loc158 = loc(fused[#loc72, #loc73])
#loc159 = loc(fused[#loc74, #loc75])
#loc160 = loc(fused[#loc76, #loc77])
#loc161 = loc(fused[#loc78, #loc79])
#loc162 = loc(fused[#loc80, #loc81])
#loc163 = loc(fused[#loc83, #loc82])
#loc164 = loc(fused[#loc84, #loc85])
#loc165 = loc(fused[#loc88, #loc87])
#loc166 = loc(fused[#loc90, #loc91])
#loc167 = loc(fused[#loc93, #loc94])
#loc168 = loc(fused[#loc104, #loc105])
#loc169 = loc(fused[#loc106, #loc107])
#loc170 = loc(fused[#loc108, #loc109])
#loc171 = loc(fused[#loc110, #loc111])
#loc172 = loc(fused[#loc112, #loc113])
#loc173 = loc(fused[#loc115, #loc114])
#loc174 = loc(fused[#loc116, #loc117])
#loc175 = loc(fused[#loc119, #loc103])
#loc176 = loc(fused[#loc121, #loc122])
#loc177 = loc(fused[#loc124, #loc125])
