!s32i = !cir.int<s, 32>
!s64i = !cir.int<s, 64>
!s8i = !cir.int<s, 8>
!u64i = !cir.int<u, 64>
#fn_attr = #cir<extra({nothrow = #cir.nothrow})>
#fn_attr1 = #cir<extra({inline = #cir.inline<no>, nothrow = #cir.nothrow, optnone = #cir.optnone, uwtable = #cir.uwtable<async>})>
module @"/workspaces/juliet-c/testcases/CWE190_Integer_Overflow/s02/CWE190_Integer_Overflow__int64_t_rand_square_18.c" attributes {cir.lang = #cir.lang<c>, cir.sob = #cir.signed_overflow_behavior<undefined>, cir.triple = "x86_64-unknown-linux-gnu", cir.type_size_info = #cir.type_size_info<char = 8, int = 32, size_t = 64>, cir.uwtable = #cir.uwtable<async>, dlti.dl_spec = #dlti.dl_spec<f128 = dense<128> : vector<2xi64>, !llvm.ptr<271> = dense<32> : vector<4xi64>, f16 = dense<16> : vector<2xi64>, f64 = dense<64> : vector<2xi64>, i128 = dense<128> : vector<2xi64>, !llvm.ptr<272> = dense<64> : vector<4xi64>, i64 = dense<64> : vector<2xi64>, !llvm.ptr = dense<64> : vector<4xi64>, i1 = dense<8> : vector<2xi64>, f80 = dense<128> : vector<2xi64>, i32 = dense<32> : vector<2xi64>, i16 = dense<16> : vector<2xi64>, !llvm.ptr<270> = dense<32> : vector<4xi64>, i8 = dense<8> : vector<2xi64>, "dlti.mangling_mode" = "e", "dlti.endianness" = "little", "dlti.stack_alignment" = 128 : i64>} {
  cir.func private @rand() -> !s32i extra(#fn_attr) loc(#loc85)
  cir.func private @printLongLongLine(!s64i) loc(#loc86)
  cir.func no_proto @CWE190_Integer_Overflow__int64_t_rand_square_18_bad() extra(#fn_attr1) {
    %0 = cir.alloca !s64i, !cir.ptr<!s64i>, ["data"] {alignment = 8 : i64} loc(#loc88)
    %1 = cir.alloca !s64i, !cir.ptr<!s64i>, ["result", init] {alignment = 8 : i64} loc(#loc89)
    %2 = cir.const #cir.int<0> : !s64i loc(#loc11)
    cir.store %2, %0 : !s64i, !cir.ptr<!s64i> loc(#loc90)
    cir.goto "source" loc(#loc91)
  ^bb1:  // no predecessors
    cir.label "source" loc(#loc15)
    %3 = cir.call @rand() : () -> !s32i extra(#fn_attr) loc(#loc16)
    %4 = cir.const #cir.int<1> : !s32i loc(#loc16)
    %5 = cir.binop(and, %3, %4) : !s32i loc(#loc16)
    %6 = cir.cast(int_to_bool, %5 : !s32i), !cir.bool loc(#loc16)
    %7 = cir.ternary(%6, true {
      %13 = cir.call @rand() : () -> !s32i extra(#fn_attr) loc(#loc16)
      %14 = cir.cast(integral, %13 : !s32i), !u64i loc(#loc16)
      %15 = cir.const #cir.int<60> : !s32i loc(#loc16)
      %16 = cir.shift(left, %14 : !u64i, %15 : !s32i) -> !u64i loc(#loc16)
      %17 = cir.call @rand() : () -> !s32i extra(#fn_attr) loc(#loc16)
      %18 = cir.cast(integral, %17 : !s32i), !u64i loc(#loc16)
      %19 = cir.const #cir.int<45> : !s32i loc(#loc16)
      %20 = cir.shift(left, %18 : !u64i, %19 : !s32i) -> !u64i loc(#loc16)
      %21 = cir.binop(xor, %16, %20) : !u64i loc(#loc16)
      %22 = cir.call @rand() : () -> !s32i extra(#fn_attr) loc(#loc16)
      %23 = cir.cast(integral, %22 : !s32i), !u64i loc(#loc16)
      %24 = cir.const #cir.int<30> : !s32i loc(#loc16)
      %25 = cir.shift(left, %23 : !u64i, %24 : !s32i) -> !u64i loc(#loc16)
      %26 = cir.binop(xor, %21, %25) : !u64i loc(#loc16)
      %27 = cir.call @rand() : () -> !s32i extra(#fn_attr) loc(#loc16)
      %28 = cir.cast(integral, %27 : !s32i), !u64i loc(#loc16)
      %29 = cir.const #cir.int<15> : !s32i loc(#loc16)
      %30 = cir.shift(left, %28 : !u64i, %29 : !s32i) -> !u64i loc(#loc16)
      %31 = cir.binop(xor, %26, %30) : !u64i loc(#loc16)
      %32 = cir.call @rand() : () -> !s32i extra(#fn_attr) loc(#loc16)
      %33 = cir.cast(integral, %32 : !s32i), !u64i loc(#loc16)
      %34 = cir.binop(xor, %31, %33) : !u64i loc(#loc16)
      cir.yield %34 : !u64i loc(#loc16)
    }, false {
      %13 = cir.call @rand() : () -> !s32i extra(#fn_attr) loc(#loc16)
      %14 = cir.cast(integral, %13 : !s32i), !u64i loc(#loc16)
      %15 = cir.const #cir.int<60> : !s32i loc(#loc16)
      %16 = cir.shift(left, %14 : !u64i, %15 : !s32i) -> !u64i loc(#loc16)
      %17 = cir.call @rand() : () -> !s32i extra(#fn_attr) loc(#loc16)
      %18 = cir.cast(integral, %17 : !s32i), !u64i loc(#loc16)
      %19 = cir.const #cir.int<45> : !s32i loc(#loc16)
      %20 = cir.shift(left, %18 : !u64i, %19 : !s32i) -> !u64i loc(#loc16)
      %21 = cir.binop(xor, %16, %20) : !u64i loc(#loc16)
      %22 = cir.call @rand() : () -> !s32i extra(#fn_attr) loc(#loc16)
      %23 = cir.cast(integral, %22 : !s32i), !u64i loc(#loc16)
      %24 = cir.const #cir.int<30> : !s32i loc(#loc16)
      %25 = cir.shift(left, %23 : !u64i, %24 : !s32i) -> !u64i loc(#loc16)
      %26 = cir.binop(xor, %21, %25) : !u64i loc(#loc16)
      %27 = cir.call @rand() : () -> !s32i extra(#fn_attr) loc(#loc16)
      %28 = cir.cast(integral, %27 : !s32i), !u64i loc(#loc16)
      %29 = cir.const #cir.int<15> : !s32i loc(#loc16)
      %30 = cir.shift(left, %28 : !u64i, %29 : !s32i) -> !u64i loc(#loc16)
      %31 = cir.binop(xor, %26, %30) : !u64i loc(#loc16)
      %32 = cir.call @rand() : () -> !s32i extra(#fn_attr) loc(#loc16)
      %33 = cir.cast(integral, %32 : !s32i), !u64i loc(#loc16)
      %34 = cir.binop(xor, %31, %33) : !u64i loc(#loc16)
      %35 = cir.unary(minus, %34) : !u64i, !u64i loc(#loc16)
      %36 = cir.const #cir.int<1> : !s32i loc(#loc16)
      %37 = cir.cast(integral, %36 : !s32i), !u64i loc(#loc16)
      %38 = cir.binop(sub, %35, %37) : !u64i loc(#loc16)
      cir.yield %38 : !u64i loc(#loc16)
    }) : (!cir.bool) -> !u64i loc(#loc16)
    %8 = cir.cast(integral, %7 : !u64i), !s64i loc(#loc16)
    cir.store %8, %0 : !s64i, !cir.ptr<!s64i> loc(#loc92)
    cir.goto "sink" loc(#loc93)
  ^bb2:  // no predecessors
    cir.label "sink" loc(#loc20)
    %9 = cir.load %0 : !cir.ptr<!s64i>, !s64i loc(#loc21)
    %10 = cir.load %0 : !cir.ptr<!s64i>, !s64i loc(#loc10)
    %11 = cir.binop(mul, %9, %10) nsw : !s64i loc(#loc21)
    cir.store %11, %1 : !s64i, !cir.ptr<!s64i> loc(#loc89)
    %12 = cir.load %1 : !cir.ptr<!s64i>, !s64i loc(#loc22)
    cir.call @printLongLongLine(%12) : (!s64i) -> () loc(#loc23)
    cir.return loc(#loc6)
  } loc(#loc87)
  cir.func no_proto @CWE190_Integer_Overflow__int64_t_rand_square_18_good() extra(#fn_attr1) {
    %0 = cir.get_global @goodB2G : !cir.ptr<!cir.func<()>> loc(#loc95)
    cir.call %0() : (!cir.ptr<!cir.func<()>>) -> () loc(#loc26)
    %1 = cir.get_global @goodG2B : !cir.ptr<!cir.func<()>> loc(#loc96)
    cir.call %1() : (!cir.ptr<!cir.func<()>>) -> () loc(#loc28)
    cir.return loc(#loc25)
  } loc(#loc94)
  cir.func private @imaxabs(!s64i) -> !s64i extra(#fn_attr) loc(#loc97)
  cir.func private @sqrtl(!cir.long_double<!cir.f80>) -> !cir.long_double<!cir.f80> extra(#fn_attr) loc(#loc32)
  cir.func private @printLine(!cir.ptr<!s8i>) loc(#loc98)
  cir.global "private" constant cir_private dsolocal @".str" = #cir.const_array<"data value is too large to perform arithmetic safely.\00" : !cir.array<!s8i x 54>> : !cir.array<!s8i x 54> {alignment = 1 : i64} loc(#loc35)
  cir.func no_proto internal private @goodB2G() extra(#fn_attr1) {
    %0 = cir.alloca !s64i, !cir.ptr<!s64i>, ["data"] {alignment = 8 : i64} loc(#loc100)
    %1 = cir.const #cir.int<0> : !s64i loc(#loc40)
    cir.store %1, %0 : !s64i, !cir.ptr<!s64i> loc(#loc101)
    cir.goto "source" loc(#loc102)
  ^bb1:  // no predecessors
    cir.label "source" loc(#loc44)
    %2 = cir.call @rand() : () -> !s32i extra(#fn_attr) loc(#loc45)
    %3 = cir.const #cir.int<1> : !s32i loc(#loc45)
    %4 = cir.binop(and, %2, %3) : !s32i loc(#loc45)
    %5 = cir.cast(int_to_bool, %4 : !s32i), !cir.bool loc(#loc45)
    %6 = cir.ternary(%5, true {
      %8 = cir.call @rand() : () -> !s32i extra(#fn_attr) loc(#loc45)
      %9 = cir.cast(integral, %8 : !s32i), !u64i loc(#loc45)
      %10 = cir.const #cir.int<60> : !s32i loc(#loc45)
      %11 = cir.shift(left, %9 : !u64i, %10 : !s32i) -> !u64i loc(#loc45)
      %12 = cir.call @rand() : () -> !s32i extra(#fn_attr) loc(#loc45)
      %13 = cir.cast(integral, %12 : !s32i), !u64i loc(#loc45)
      %14 = cir.const #cir.int<45> : !s32i loc(#loc45)
      %15 = cir.shift(left, %13 : !u64i, %14 : !s32i) -> !u64i loc(#loc45)
      %16 = cir.binop(xor, %11, %15) : !u64i loc(#loc45)
      %17 = cir.call @rand() : () -> !s32i extra(#fn_attr) loc(#loc45)
      %18 = cir.cast(integral, %17 : !s32i), !u64i loc(#loc45)
      %19 = cir.const #cir.int<30> : !s32i loc(#loc45)
      %20 = cir.shift(left, %18 : !u64i, %19 : !s32i) -> !u64i loc(#loc45)
      %21 = cir.binop(xor, %16, %20) : !u64i loc(#loc45)
      %22 = cir.call @rand() : () -> !s32i extra(#fn_attr) loc(#loc45)
      %23 = cir.cast(integral, %22 : !s32i), !u64i loc(#loc45)
      %24 = cir.const #cir.int<15> : !s32i loc(#loc45)
      %25 = cir.shift(left, %23 : !u64i, %24 : !s32i) -> !u64i loc(#loc45)
      %26 = cir.binop(xor, %21, %25) : !u64i loc(#loc45)
      %27 = cir.call @rand() : () -> !s32i extra(#fn_attr) loc(#loc45)
      %28 = cir.cast(integral, %27 : !s32i), !u64i loc(#loc45)
      %29 = cir.binop(xor, %26, %28) : !u64i loc(#loc45)
      cir.yield %29 : !u64i loc(#loc45)
    }, false {
      %8 = cir.call @rand() : () -> !s32i extra(#fn_attr) loc(#loc45)
      %9 = cir.cast(integral, %8 : !s32i), !u64i loc(#loc45)
      %10 = cir.const #cir.int<60> : !s32i loc(#loc45)
      %11 = cir.shift(left, %9 : !u64i, %10 : !s32i) -> !u64i loc(#loc45)
      %12 = cir.call @rand() : () -> !s32i extra(#fn_attr) loc(#loc45)
      %13 = cir.cast(integral, %12 : !s32i), !u64i loc(#loc45)
      %14 = cir.const #cir.int<45> : !s32i loc(#loc45)
      %15 = cir.shift(left, %13 : !u64i, %14 : !s32i) -> !u64i loc(#loc45)
      %16 = cir.binop(xor, %11, %15) : !u64i loc(#loc45)
      %17 = cir.call @rand() : () -> !s32i extra(#fn_attr) loc(#loc45)
      %18 = cir.cast(integral, %17 : !s32i), !u64i loc(#loc45)
      %19 = cir.const #cir.int<30> : !s32i loc(#loc45)
      %20 = cir.shift(left, %18 : !u64i, %19 : !s32i) -> !u64i loc(#loc45)
      %21 = cir.binop(xor, %16, %20) : !u64i loc(#loc45)
      %22 = cir.call @rand() : () -> !s32i extra(#fn_attr) loc(#loc45)
      %23 = cir.cast(integral, %22 : !s32i), !u64i loc(#loc45)
      %24 = cir.const #cir.int<15> : !s32i loc(#loc45)
      %25 = cir.shift(left, %23 : !u64i, %24 : !s32i) -> !u64i loc(#loc45)
      %26 = cir.binop(xor, %21, %25) : !u64i loc(#loc45)
      %27 = cir.call @rand() : () -> !s32i extra(#fn_attr) loc(#loc45)
      %28 = cir.cast(integral, %27 : !s32i), !u64i loc(#loc45)
      %29 = cir.binop(xor, %26, %28) : !u64i loc(#loc45)
      %30 = cir.unary(minus, %29) : !u64i, !u64i loc(#loc45)
      %31 = cir.const #cir.int<1> : !s32i loc(#loc45)
      %32 = cir.cast(integral, %31 : !s32i), !u64i loc(#loc45)
      %33 = cir.binop(sub, %30, %32) : !u64i loc(#loc45)
      cir.yield %33 : !u64i loc(#loc45)
    }) : (!cir.bool) -> !u64i loc(#loc45)
    %7 = cir.cast(integral, %6 : !u64i), !s64i loc(#loc45)
    cir.store %7, %0 : !s64i, !cir.ptr<!s64i> loc(#loc103)
    cir.goto "sink" loc(#loc104)
  ^bb2:  // no predecessors
    cir.label "sink" loc(#loc49)
    cir.scope {
      %8 = cir.load %0 : !cir.ptr<!s64i>, !s64i loc(#loc52)
      %9 = cir.call @imaxabs(%8) : (!s64i) -> !s64i side_effect(const) extra(#fn_attr) loc(#loc53)
      %10 = cir.cast(int_to_float, %9 : !s64i), !cir.long_double<!cir.f80> loc(#loc53)
      %11 = cir.get_global @sqrtl : !cir.ptr<!cir.func<(!cir.long_double<!cir.f80>) -> !cir.long_double<!cir.f80>>> loc(#loc54)
      %12 = cir.const #cir.int<9223372036854775807> : !s64i loc(#loc55)
      %13 = cir.cast(int_to_float, %12 : !s64i), !cir.long_double<!cir.f80> loc(#loc55)
      %14 = cir.call @sqrtl(%13) : (!cir.long_double<!cir.f80>) -> !cir.long_double<!cir.f80> extra(#fn_attr) loc(#loc54)
      %15 = cir.cmp(le, %10, %14) : !cir.long_double<!cir.f80>, !cir.bool loc(#loc106)
      cir.if %15 {
        %16 = cir.alloca !s64i, !cir.ptr<!s64i>, ["result", init] {alignment = 8 : i64} loc(#loc108)
        %17 = cir.load %0 : !cir.ptr<!s64i>, !s64i loc(#loc62)
        %18 = cir.load %0 : !cir.ptr<!s64i>, !s64i loc(#loc61)
        %19 = cir.binop(mul, %17, %18) nsw : !s64i loc(#loc62)
        cir.store %19, %16 : !s64i, !cir.ptr<!s64i> loc(#loc108)
        %20 = cir.load %16 : !cir.ptr<!s64i>, !s64i loc(#loc63)
        cir.call @printLongLongLine(%20) : (!s64i) -> () loc(#loc64)
      } else {
        %16 = cir.get_global @".str" : !cir.ptr<!cir.array<!s8i x 54>> loc(#loc35)
        %17 = cir.cast(array_to_ptrdecay, %16 : !cir.ptr<!cir.array<!s8i x 54>>), !cir.ptr<!s8i> loc(#loc35)
        cir.call @printLine(%17) : (!cir.ptr<!s8i>) -> () loc(#loc65)
      } loc(#loc107)
    } loc(#loc105)
    cir.return loc(#loc37)
  } loc(#loc99)
  cir.func no_proto internal private @goodG2B() extra(#fn_attr1) {
    %0 = cir.alloca !s64i, !cir.ptr<!s64i>, ["data"] {alignment = 8 : i64} loc(#loc110)
    %1 = cir.alloca !s64i, !cir.ptr<!s64i>, ["result", init] {alignment = 8 : i64} loc(#loc111)
    %2 = cir.const #cir.int<0> : !s64i loc(#loc72)
    cir.store %2, %0 : !s64i, !cir.ptr<!s64i> loc(#loc112)
    cir.goto "source" loc(#loc113)
  ^bb1:  // no predecessors
    cir.label "source" loc(#loc76)
    %3 = cir.const #cir.int<2> : !s32i loc(#loc77)
    %4 = cir.cast(integral, %3 : !s32i), !s64i loc(#loc77)
    cir.store %4, %0 : !s64i, !cir.ptr<!s64i> loc(#loc114)
    cir.goto "sink" loc(#loc115)
  ^bb2:  // no predecessors
    cir.label "sink" loc(#loc81)
    %5 = cir.load %0 : !cir.ptr<!s64i>, !s64i loc(#loc82)
    %6 = cir.load %0 : !cir.ptr<!s64i>, !s64i loc(#loc71)
    %7 = cir.binop(mul, %5, %6) nsw : !s64i loc(#loc82)
    cir.store %7, %1 : !s64i, !cir.ptr<!s64i> loc(#loc111)
    %8 = cir.load %1 : !cir.ptr<!s64i>, !s64i loc(#loc83)
    cir.call @printLongLongLine(%8) : (!s64i) -> () loc(#loc84)
    cir.return loc(#loc67)
  } loc(#loc109)
} loc(#loc)
#loc = loc("/workspaces/juliet-c/testcases/CWE190_Integer_Overflow/s02/CWE190_Integer_Overflow__int64_t_rand_square_18.c":0:0)
#loc1 = loc("/usr/include/stdlib.h":573:1)
#loc2 = loc("/usr/include/stdlib.h":573:24)
#loc3 = loc("../../../testcasesupport/std_testcase_io.h":26:1)
#loc4 = loc("../../../testcasesupport/std_testcase_io.h":26:49)
#loc5 = loc("CWE190_Integer_Overflow__int64_t_rand_square_18.c":25:1)
#loc6 = loc("CWE190_Integer_Overflow__int64_t_rand_square_18.c":40:1)
#loc7 = loc("CWE190_Integer_Overflow__int64_t_rand_square_18.c":27:5)
#loc8 = loc("CWE190_Integer_Overflow__int64_t_rand_square_18.c":27:13)
#loc9 = loc("CWE190_Integer_Overflow__int64_t_rand_square_18.c":37:9)
#loc10 = loc("CWE190_Integer_Overflow__int64_t_rand_square_18.c":37:33)
#loc11 = loc("CWE190_Integer_Overflow__int64_t_rand_square_18.c":28:12)
#loc12 = loc("CWE190_Integer_Overflow__int64_t_rand_square_18.c":28:5)
#loc13 = loc("CWE190_Integer_Overflow__int64_t_rand_square_18.c":29:5)
#loc14 = loc("CWE190_Integer_Overflow__int64_t_rand_square_18.c":29:10)
#loc15 = loc("CWE190_Integer_Overflow__int64_t_rand_square_18.c":30:1)
#loc16 = loc("CWE190_Integer_Overflow__int64_t_rand_square_18.c":32:21)
#loc17 = loc("CWE190_Integer_Overflow__int64_t_rand_square_18.c":32:5)
#loc18 = loc("CWE190_Integer_Overflow__int64_t_rand_square_18.c":33:5)
#loc19 = loc("CWE190_Integer_Overflow__int64_t_rand_square_18.c":33:10)
#loc20 = loc("CWE190_Integer_Overflow__int64_t_rand_square_18.c":34:1)
#loc21 = loc("CWE190_Integer_Overflow__int64_t_rand_square_18.c":37:26)
#loc22 = loc("CWE190_Integer_Overflow__int64_t_rand_square_18.c":38:27)
#loc23 = loc("CWE190_Integer_Overflow__int64_t_rand_square_18.c":38:9)
#loc24 = loc("CWE190_Integer_Overflow__int64_t_rand_square_18.c":87:1)
#loc25 = loc("CWE190_Integer_Overflow__int64_t_rand_square_18.c":91:1)
#loc26 = loc("CWE190_Integer_Overflow__int64_t_rand_square_18.c":89:5)
#loc27 = loc("CWE190_Integer_Overflow__int64_t_rand_square_18.c":89:13)
#loc28 = loc("CWE190_Integer_Overflow__int64_t_rand_square_18.c":90:5)
#loc29 = loc("CWE190_Integer_Overflow__int64_t_rand_square_18.c":90:13)
#loc30 = loc("/usr/include/inttypes.h":351:1)
#loc31 = loc("/usr/include/inttypes.h":351:74)
#loc32 = loc("/usr/include/x86_64-linux-gnu/bits/mathcalls.h":143:1)
#loc33 = loc("../../../testcasesupport/std_testcase_io.h":14:1)
#loc34 = loc("../../../testcasesupport/std_testcase_io.h":14:33)
#loc35 = loc("CWE190_Integer_Overflow__int64_t_rand_square_18.c":65:19)
#loc36 = loc("CWE190_Integer_Overflow__int64_t_rand_square_18.c":47:1)
#loc37 = loc("CWE190_Integer_Overflow__int64_t_rand_square_18.c":67:1)
#loc38 = loc("CWE190_Integer_Overflow__int64_t_rand_square_18.c":49:5)
#loc39 = loc("CWE190_Integer_Overflow__int64_t_rand_square_18.c":49:13)
#loc40 = loc("CWE190_Integer_Overflow__int64_t_rand_square_18.c":50:12)
#loc41 = loc("CWE190_Integer_Overflow__int64_t_rand_square_18.c":50:5)
#loc42 = loc("CWE190_Integer_Overflow__int64_t_rand_square_18.c":51:5)
#loc43 = loc("CWE190_Integer_Overflow__int64_t_rand_square_18.c":51:10)
#loc44 = loc("CWE190_Integer_Overflow__int64_t_rand_square_18.c":52:1)
#loc45 = loc("CWE190_Integer_Overflow__int64_t_rand_square_18.c":54:21)
#loc46 = loc("CWE190_Integer_Overflow__int64_t_rand_square_18.c":54:5)
#loc47 = loc("CWE190_Integer_Overflow__int64_t_rand_square_18.c":55:5)
#loc48 = loc("CWE190_Integer_Overflow__int64_t_rand_square_18.c":55:10)
#loc49 = loc("CWE190_Integer_Overflow__int64_t_rand_square_18.c":56:1)
#loc50 = loc("CWE190_Integer_Overflow__int64_t_rand_square_18.c":58:5)
#loc51 = loc("CWE190_Integer_Overflow__int64_t_rand_square_18.c":66:5)
#loc52 = loc("CWE190_Integer_Overflow__int64_t_rand_square_18.c":58:27)
#loc53 = loc("CWE190_Integer_Overflow__int64_t_rand_square_18.c":58:9)
#loc54 = loc("CWE190_Integer_Overflow__int64_t_rand_square_18.c":58:36)
#loc55 = loc("CWE190_Integer_Overflow__int64_t_rand_square_18.c":58:42)
#loc56 = loc("CWE190_Integer_Overflow__int64_t_rand_square_18.c":58:51)
#loc57 = loc("CWE190_Integer_Overflow__int64_t_rand_square_18.c":59:5)
#loc58 = loc("CWE190_Integer_Overflow__int64_t_rand_square_18.c":62:5)
#loc59 = loc("CWE190_Integer_Overflow__int64_t_rand_square_18.c":64:5)
#loc60 = loc("CWE190_Integer_Overflow__int64_t_rand_square_18.c":60:9)
#loc61 = loc("CWE190_Integer_Overflow__int64_t_rand_square_18.c":60:33)
#loc62 = loc("CWE190_Integer_Overflow__int64_t_rand_square_18.c":60:26)
#loc63 = loc("CWE190_Integer_Overflow__int64_t_rand_square_18.c":61:27)
#loc64 = loc("CWE190_Integer_Overflow__int64_t_rand_square_18.c":61:9)
#loc65 = loc("CWE190_Integer_Overflow__int64_t_rand_square_18.c":65:9)
#loc66 = loc("CWE190_Integer_Overflow__int64_t_rand_square_18.c":70:1)
#loc67 = loc("CWE190_Integer_Overflow__int64_t_rand_square_18.c":85:1)
#loc68 = loc("CWE190_Integer_Overflow__int64_t_rand_square_18.c":72:5)
#loc69 = loc("CWE190_Integer_Overflow__int64_t_rand_square_18.c":72:13)
#loc70 = loc("CWE190_Integer_Overflow__int64_t_rand_square_18.c":82:9)
#loc71 = loc("CWE190_Integer_Overflow__int64_t_rand_square_18.c":82:33)
#loc72 = loc("CWE190_Integer_Overflow__int64_t_rand_square_18.c":73:12)
#loc73 = loc("CWE190_Integer_Overflow__int64_t_rand_square_18.c":73:5)
#loc74 = loc("CWE190_Integer_Overflow__int64_t_rand_square_18.c":74:5)
#loc75 = loc("CWE190_Integer_Overflow__int64_t_rand_square_18.c":74:10)
#loc76 = loc("CWE190_Integer_Overflow__int64_t_rand_square_18.c":75:1)
#loc77 = loc("CWE190_Integer_Overflow__int64_t_rand_square_18.c":77:12)
#loc78 = loc("CWE190_Integer_Overflow__int64_t_rand_square_18.c":77:5)
#loc79 = loc("CWE190_Integer_Overflow__int64_t_rand_square_18.c":78:5)
#loc80 = loc("CWE190_Integer_Overflow__int64_t_rand_square_18.c":78:10)
#loc81 = loc("CWE190_Integer_Overflow__int64_t_rand_square_18.c":79:1)
#loc82 = loc("CWE190_Integer_Overflow__int64_t_rand_square_18.c":82:26)
#loc83 = loc("CWE190_Integer_Overflow__int64_t_rand_square_18.c":83:27)
#loc84 = loc("CWE190_Integer_Overflow__int64_t_rand_square_18.c":83:9)
#loc85 = loc(fused[#loc1, #loc2])
#loc86 = loc(fused[#loc3, #loc4])
#loc87 = loc(fused[#loc5, #loc6])
#loc88 = loc(fused[#loc7, #loc8])
#loc89 = loc(fused[#loc9, #loc10])
#loc90 = loc(fused[#loc12, #loc11])
#loc91 = loc(fused[#loc13, #loc14])
#loc92 = loc(fused[#loc17, #loc16])
#loc93 = loc(fused[#loc18, #loc19])
#loc94 = loc(fused[#loc24, #loc25])
#loc95 = loc(fused[#loc26, #loc27])
#loc96 = loc(fused[#loc28, #loc29])
#loc97 = loc(fused[#loc30, #loc31])
#loc98 = loc(fused[#loc33, #loc34])
#loc99 = loc(fused[#loc36, #loc37])
#loc100 = loc(fused[#loc38, #loc39])
#loc101 = loc(fused[#loc41, #loc40])
#loc102 = loc(fused[#loc42, #loc43])
#loc103 = loc(fused[#loc46, #loc45])
#loc104 = loc(fused[#loc47, #loc48])
#loc105 = loc(fused[#loc50, #loc51])
#loc106 = loc(fused[#loc53, #loc56])
#loc107 = loc(fused[#loc57, #loc58, #loc59, #loc51])
#loc108 = loc(fused[#loc60, #loc61])
#loc109 = loc(fused[#loc66, #loc67])
#loc110 = loc(fused[#loc68, #loc69])
#loc111 = loc(fused[#loc70, #loc71])
#loc112 = loc(fused[#loc73, #loc72])
#loc113 = loc(fused[#loc74, #loc75])
#loc114 = loc(fused[#loc78, #loc77])
#loc115 = loc(fused[#loc79, #loc80])
