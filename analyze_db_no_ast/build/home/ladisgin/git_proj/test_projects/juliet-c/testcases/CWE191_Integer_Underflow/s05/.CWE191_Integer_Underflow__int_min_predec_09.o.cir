!s32i = !cir.int<s, 32>
!s8i = !cir.int<s, 8>
!void = !cir.void
#fn_attr = #cir<extra({inline = #cir.inline<no>, nothrow = #cir.nothrow, optnone = #cir.optnone})>
module @"/home/ladisgin/git_proj/test_projects/juliet-c/testcases/CWE191_Integer_Underflow/s05/CWE191_Integer_Underflow__int_min_predec_09.c" attributes {cir.lang = #cir.lang<c>, cir.sob = #cir.signed_overflow_behavior<undefined>, cir.triple = "x86_64-unknown-linux-gnu", dlti.dl_spec = #dlti.dl_spec<#dlti.dl_entry<i8, dense<8> : vector<2xi64>>, #dlti.dl_entry<i16, dense<16> : vector<2xi64>>, #dlti.dl_entry<!llvm.ptr, dense<64> : vector<4xi64>>, #dlti.dl_entry<i1, dense<8> : vector<2xi64>>, #dlti.dl_entry<f64, dense<64> : vector<2xi64>>, #dlti.dl_entry<f128, dense<128> : vector<2xi64>>, #dlti.dl_entry<i32, dense<32> : vector<2xi64>>, #dlti.dl_entry<!llvm.ptr<270>, dense<32> : vector<4xi64>>, #dlti.dl_entry<f16, dense<16> : vector<2xi64>>, #dlti.dl_entry<i64, dense<64> : vector<2xi64>>, #dlti.dl_entry<!llvm.ptr<271>, dense<32> : vector<4xi64>>, #dlti.dl_entry<!llvm.ptr<272>, dense<64> : vector<4xi64>>, #dlti.dl_entry<i128, dense<128> : vector<2xi64>>, #dlti.dl_entry<f80, dense<128> : vector<2xi64>>, #dlti.dl_entry<"dlti.endianness", "little">, #dlti.dl_entry<"dlti.stack_alignment", 128 : i64>>, llvm.data_layout = "e-m:e-p270:32:32-p271:32:32-p272:64:64-i64:64-i128:128-f80:128-n8:16:32:64-S128"} {
  cir.global "private"  constant external @GLOBAL_CONST_TRUE : !s32i {alignment = 4 : i64} loc(#loc165)
  cir.func private  @printIntLine(!s32i) loc(#loc166)
  cir.func no_proto  @CWE191_Integer_Underflow__int_min_predec_09_bad() extra(#fn_attr) {
    %0 = cir.alloca !s32i, !cir.ptr<!s32i>, ["data"] {alignment = 4 : i64} loc(#loc168)
    %1 = cir.const #cir.int<0> : !s32i loc(#loc9)
    cir.store %1, %0 : !s32i, !cir.ptr<!s32i> loc(#loc169)
    cir.scope {
      %2 = cir.get_global @GLOBAL_CONST_TRUE : !cir.ptr<!s32i> loc(#loc165)
      %3 = cir.load %2 : !cir.ptr<!s32i>, !s32i loc(#loc13)
      %4 = cir.cast(int_to_bool, %3 : !s32i), !cir.bool loc(#loc13)
      cir.if %4 {
        %5 = cir.const #cir.int<2147483647> : !s32i loc(#loc15)
        %6 = cir.unary(minus, %5) : !s32i, !s32i loc(#loc15)
        %7 = cir.const #cir.int<1> : !s32i loc(#loc15)
        %8 = cir.binop(sub, %6, %7) nsw : !s32i loc(#loc15)
        cir.store %8, %0 : !s32i, !cir.ptr<!s32i> loc(#loc172)
      } loc(#loc171)
    } loc(#loc170)
    cir.scope {
      %2 = cir.get_global @GLOBAL_CONST_TRUE : !cir.ptr<!s32i> loc(#loc165)
      %3 = cir.load %2 : !cir.ptr<!s32i>, !s32i loc(#loc19)
      %4 = cir.cast(int_to_bool, %3 : !s32i), !cir.bool loc(#loc19)
      cir.if %4 {
        cir.scope {
          %5 = cir.alloca !s32i, !cir.ptr<!s32i>, ["result", init] {alignment = 4 : i64} loc(#loc176)
          %6 = cir.load %0 : !cir.ptr<!s32i>, !s32i loc(#loc25)
          %7 = cir.unary(dec, %6) : !s32i, !s32i loc(#loc25)
          cir.store %7, %0 : !s32i, !cir.ptr<!s32i> loc(#loc177)
          %8 = cir.load %0 : !cir.ptr<!s32i>, !s32i loc(#loc24)
          cir.store %8, %5 : !s32i, !cir.ptr<!s32i> loc(#loc176)
          %9 = cir.load %5 : !cir.ptr<!s32i>, !s32i loc(#loc27)
          cir.call @printIntLine(%9) : (!s32i) -> () loc(#loc28)
        } loc(#loc175)
      } loc(#loc174)
    } loc(#loc173)
    cir.return loc(#loc6)
  } loc(#loc167)
  cir.func no_proto  @CWE191_Integer_Underflow__int_min_predec_09_good() extra(#fn_attr) {
    %0 = cir.get_global @goodB2G1 : !cir.ptr<!cir.func<!void ()>> loc(#loc179)
    cir.call %0() : (!cir.ptr<!cir.func<!void ()>>) -> () loc(#loc31)
    %1 = cir.get_global @goodB2G2 : !cir.ptr<!cir.func<!void ()>> loc(#loc180)
    cir.call %1() : (!cir.ptr<!cir.func<!void ()>>) -> () loc(#loc33)
    %2 = cir.get_global @goodG2B1 : !cir.ptr<!cir.func<!void ()>> loc(#loc181)
    cir.call %2() : (!cir.ptr<!cir.func<!void ()>>) -> () loc(#loc35)
    %3 = cir.get_global @goodG2B2 : !cir.ptr<!cir.func<!void ()>> loc(#loc182)
    cir.call %3() : (!cir.ptr<!cir.func<!void ()>>) -> () loc(#loc37)
    cir.return loc(#loc30)
  } loc(#loc178)
  cir.global "private"  constant external @GLOBAL_CONST_FALSE : !s32i {alignment = 4 : i64} loc(#loc183)
  cir.func private  @printLine(!cir.ptr<!s8i>) loc(#loc184)
  cir.global "private"  constant internal dsolocal @".str" = #cir.const_array<"Benign, fixed string\00" : !cir.array<!s8i x 21>> : !cir.array<!s8i x 21> {alignment = 1 : i64} loc(#loc43)
  cir.global "private"  constant internal dsolocal @".str1" = #cir.const_array<"data value is too large to perform arithmetic safely.\00" : !cir.array<!s8i x 54>> : !cir.array<!s8i x 54> {alignment = 1 : i64} loc(#loc44)
  cir.func no_proto internal private  @goodB2G1() extra(#fn_attr) {
    %0 = cir.alloca !s32i, !cir.ptr<!s32i>, ["data"] {alignment = 4 : i64} loc(#loc186)
    %1 = cir.const #cir.int<0> : !s32i loc(#loc49)
    cir.store %1, %0 : !s32i, !cir.ptr<!s32i> loc(#loc187)
    cir.scope {
      %2 = cir.get_global @GLOBAL_CONST_TRUE : !cir.ptr<!s32i> loc(#loc165)
      %3 = cir.load %2 : !cir.ptr<!s32i>, !s32i loc(#loc53)
      %4 = cir.cast(int_to_bool, %3 : !s32i), !cir.bool loc(#loc53)
      cir.if %4 {
        %5 = cir.const #cir.int<2147483647> : !s32i loc(#loc55)
        %6 = cir.unary(minus, %5) : !s32i, !s32i loc(#loc55)
        %7 = cir.const #cir.int<1> : !s32i loc(#loc55)
        %8 = cir.binop(sub, %6, %7) nsw : !s32i loc(#loc55)
        cir.store %8, %0 : !s32i, !cir.ptr<!s32i> loc(#loc190)
      } loc(#loc189)
    } loc(#loc188)
    cir.scope {
      %2 = cir.get_global @GLOBAL_CONST_FALSE : !cir.ptr<!s32i> loc(#loc183)
      %3 = cir.load %2 : !cir.ptr<!s32i>, !s32i loc(#loc59)
      %4 = cir.cast(int_to_bool, %3 : !s32i), !cir.bool loc(#loc59)
      cir.if %4 {
        %5 = cir.get_global @".str" : !cir.ptr<!cir.array<!s8i x 21>> loc(#loc43)
        %6 = cir.cast(array_to_ptrdecay, %5 : !cir.ptr<!cir.array<!s8i x 21>>), !cir.ptr<!s8i> loc(#loc43)
        cir.call @printLine(%6) : (!cir.ptr<!s8i>) -> () loc(#loc63)
      } else {
        cir.scope {
          %5 = cir.load %0 : !cir.ptr<!s32i>, !s32i loc(#loc66)
          %6 = cir.const #cir.int<2147483647> : !s32i loc(#loc67)
          %7 = cir.unary(minus, %6) : !s32i, !s32i loc(#loc67)
          %8 = cir.const #cir.int<1> : !s32i loc(#loc67)
          %9 = cir.binop(sub, %7, %8) nsw : !s32i loc(#loc67)
          %10 = cir.cmp(gt, %5, %9) : !s32i, !s32i loc(#loc194)
          %11 = cir.cast(int_to_bool, %10 : !s32i), !cir.bool loc(#loc68)
          cir.if %11 {
            %12 = cir.alloca !s32i, !cir.ptr<!s32i>, ["result", init] {alignment = 4 : i64} loc(#loc196)
            %13 = cir.load %0 : !cir.ptr<!s32i>, !s32i loc(#loc74)
            %14 = cir.unary(dec, %13) : !s32i, !s32i loc(#loc74)
            cir.store %14, %0 : !s32i, !cir.ptr<!s32i> loc(#loc197)
            %15 = cir.load %0 : !cir.ptr<!s32i>, !s32i loc(#loc73)
            cir.store %15, %12 : !s32i, !cir.ptr<!s32i> loc(#loc196)
            %16 = cir.load %12 : !cir.ptr<!s32i>, !s32i loc(#loc76)
            cir.call @printIntLine(%16) : (!s32i) -> () loc(#loc77)
          } else {
            %12 = cir.get_global @".str1" : !cir.ptr<!cir.array<!s8i x 54>> loc(#loc44)
            %13 = cir.cast(array_to_ptrdecay, %12 : !cir.ptr<!cir.array<!s8i x 54>>), !cir.ptr<!s8i> loc(#loc44)
            cir.call @printLine(%13) : (!cir.ptr<!s8i>) -> () loc(#loc78)
          } loc(#loc195)
        } loc(#loc193)
      } loc(#loc192)
    } loc(#loc191)
    cir.return loc(#loc46)
  } loc(#loc185)
  cir.func no_proto internal private  @goodB2G2() extra(#fn_attr) {
    %0 = cir.alloca !s32i, !cir.ptr<!s32i>, ["data"] {alignment = 4 : i64} loc(#loc199)
    %1 = cir.const #cir.int<0> : !s32i loc(#loc83)
    cir.store %1, %0 : !s32i, !cir.ptr<!s32i> loc(#loc200)
    cir.scope {
      %2 = cir.get_global @GLOBAL_CONST_TRUE : !cir.ptr<!s32i> loc(#loc165)
      %3 = cir.load %2 : !cir.ptr<!s32i>, !s32i loc(#loc87)
      %4 = cir.cast(int_to_bool, %3 : !s32i), !cir.bool loc(#loc87)
      cir.if %4 {
        %5 = cir.const #cir.int<2147483647> : !s32i loc(#loc89)
        %6 = cir.unary(minus, %5) : !s32i, !s32i loc(#loc89)
        %7 = cir.const #cir.int<1> : !s32i loc(#loc89)
        %8 = cir.binop(sub, %6, %7) nsw : !s32i loc(#loc89)
        cir.store %8, %0 : !s32i, !cir.ptr<!s32i> loc(#loc203)
      } loc(#loc202)
    } loc(#loc201)
    cir.scope {
      %2 = cir.get_global @GLOBAL_CONST_TRUE : !cir.ptr<!s32i> loc(#loc165)
      %3 = cir.load %2 : !cir.ptr<!s32i>, !s32i loc(#loc93)
      %4 = cir.cast(int_to_bool, %3 : !s32i), !cir.bool loc(#loc93)
      cir.if %4 {
        cir.scope {
          %5 = cir.load %0 : !cir.ptr<!s32i>, !s32i loc(#loc97)
          %6 = cir.const #cir.int<2147483647> : !s32i loc(#loc98)
          %7 = cir.unary(minus, %6) : !s32i, !s32i loc(#loc98)
          %8 = cir.const #cir.int<1> : !s32i loc(#loc98)
          %9 = cir.binop(sub, %7, %8) nsw : !s32i loc(#loc98)
          %10 = cir.cmp(gt, %5, %9) : !s32i, !s32i loc(#loc207)
          %11 = cir.cast(int_to_bool, %10 : !s32i), !cir.bool loc(#loc99)
          cir.if %11 {
            %12 = cir.alloca !s32i, !cir.ptr<!s32i>, ["result", init] {alignment = 4 : i64} loc(#loc209)
            %13 = cir.load %0 : !cir.ptr<!s32i>, !s32i loc(#loc105)
            %14 = cir.unary(dec, %13) : !s32i, !s32i loc(#loc105)
            cir.store %14, %0 : !s32i, !cir.ptr<!s32i> loc(#loc210)
            %15 = cir.load %0 : !cir.ptr<!s32i>, !s32i loc(#loc104)
            cir.store %15, %12 : !s32i, !cir.ptr<!s32i> loc(#loc209)
            %16 = cir.load %12 : !cir.ptr<!s32i>, !s32i loc(#loc107)
            cir.call @printIntLine(%16) : (!s32i) -> () loc(#loc108)
          } else {
            %12 = cir.get_global @".str1" : !cir.ptr<!cir.array<!s8i x 54>> loc(#loc109)
            %13 = cir.cast(array_to_ptrdecay, %12 : !cir.ptr<!cir.array<!s8i x 54>>), !cir.ptr<!s8i> loc(#loc109)
            cir.call @printLine(%13) : (!cir.ptr<!s8i>) -> () loc(#loc110)
          } loc(#loc208)
        } loc(#loc206)
      } loc(#loc205)
    } loc(#loc204)
    cir.return loc(#loc80)
  } loc(#loc198)
  cir.func no_proto internal private  @goodG2B1() extra(#fn_attr) {
    %0 = cir.alloca !s32i, !cir.ptr<!s32i>, ["data"] {alignment = 4 : i64} loc(#loc212)
    %1 = cir.const #cir.int<0> : !s32i loc(#loc115)
    cir.store %1, %0 : !s32i, !cir.ptr<!s32i> loc(#loc213)
    cir.scope {
      %2 = cir.get_global @GLOBAL_CONST_FALSE : !cir.ptr<!s32i> loc(#loc183)
      %3 = cir.load %2 : !cir.ptr<!s32i>, !s32i loc(#loc119)
      %4 = cir.cast(int_to_bool, %3 : !s32i), !cir.bool loc(#loc119)
      cir.if %4 {
        %5 = cir.get_global @".str" : !cir.ptr<!cir.array<!s8i x 21>> loc(#loc123)
        %6 = cir.cast(array_to_ptrdecay, %5 : !cir.ptr<!cir.array<!s8i x 21>>), !cir.ptr<!s8i> loc(#loc123)
        cir.call @printLine(%6) : (!cir.ptr<!s8i>) -> () loc(#loc124)
      } else {
        %5 = cir.const #cir.int<2> : !s32i loc(#loc125)
        %6 = cir.unary(minus, %5) : !s32i, !s32i loc(#loc126)
        cir.store %6, %0 : !s32i, !cir.ptr<!s32i> loc(#loc216)
      } loc(#loc215)
    } loc(#loc214)
    cir.scope {
      %2 = cir.get_global @GLOBAL_CONST_TRUE : !cir.ptr<!s32i> loc(#loc165)
      %3 = cir.load %2 : !cir.ptr<!s32i>, !s32i loc(#loc130)
      %4 = cir.cast(int_to_bool, %3 : !s32i), !cir.bool loc(#loc130)
      cir.if %4 {
        cir.scope {
          %5 = cir.alloca !s32i, !cir.ptr<!s32i>, ["result", init] {alignment = 4 : i64} loc(#loc220)
          %6 = cir.load %0 : !cir.ptr<!s32i>, !s32i loc(#loc136)
          %7 = cir.unary(dec, %6) : !s32i, !s32i loc(#loc136)
          cir.store %7, %0 : !s32i, !cir.ptr<!s32i> loc(#loc221)
          %8 = cir.load %0 : !cir.ptr<!s32i>, !s32i loc(#loc135)
          cir.store %8, %5 : !s32i, !cir.ptr<!s32i> loc(#loc220)
          %9 = cir.load %5 : !cir.ptr<!s32i>, !s32i loc(#loc138)
          cir.call @printIntLine(%9) : (!s32i) -> () loc(#loc139)
        } loc(#loc219)
      } loc(#loc218)
    } loc(#loc217)
    cir.return loc(#loc112)
  } loc(#loc211)
  cir.func no_proto internal private  @goodG2B2() extra(#fn_attr) {
    %0 = cir.alloca !s32i, !cir.ptr<!s32i>, ["data"] {alignment = 4 : i64} loc(#loc223)
    %1 = cir.const #cir.int<0> : !s32i loc(#loc144)
    cir.store %1, %0 : !s32i, !cir.ptr<!s32i> loc(#loc224)
    cir.scope {
      %2 = cir.get_global @GLOBAL_CONST_TRUE : !cir.ptr<!s32i> loc(#loc165)
      %3 = cir.load %2 : !cir.ptr<!s32i>, !s32i loc(#loc148)
      %4 = cir.cast(int_to_bool, %3 : !s32i), !cir.bool loc(#loc148)
      cir.if %4 {
        %5 = cir.const #cir.int<2> : !s32i loc(#loc150)
        %6 = cir.unary(minus, %5) : !s32i, !s32i loc(#loc151)
        cir.store %6, %0 : !s32i, !cir.ptr<!s32i> loc(#loc227)
      } loc(#loc226)
    } loc(#loc225)
    cir.scope {
      %2 = cir.get_global @GLOBAL_CONST_TRUE : !cir.ptr<!s32i> loc(#loc165)
      %3 = cir.load %2 : !cir.ptr<!s32i>, !s32i loc(#loc155)
      %4 = cir.cast(int_to_bool, %3 : !s32i), !cir.bool loc(#loc155)
      cir.if %4 {
        cir.scope {
          %5 = cir.alloca !s32i, !cir.ptr<!s32i>, ["result", init] {alignment = 4 : i64} loc(#loc231)
          %6 = cir.load %0 : !cir.ptr<!s32i>, !s32i loc(#loc161)
          %7 = cir.unary(dec, %6) : !s32i, !s32i loc(#loc161)
          cir.store %7, %0 : !s32i, !cir.ptr<!s32i> loc(#loc232)
          %8 = cir.load %0 : !cir.ptr<!s32i>, !s32i loc(#loc160)
          cir.store %8, %5 : !s32i, !cir.ptr<!s32i> loc(#loc231)
          %9 = cir.load %5 : !cir.ptr<!s32i>, !s32i loc(#loc163)
          cir.call @printIntLine(%9) : (!s32i) -> () loc(#loc164)
        } loc(#loc230)
      } loc(#loc229)
    } loc(#loc228)
    cir.return loc(#loc141)
  } loc(#loc222)
} loc(#loc)
#loc = loc("/home/ladisgin/git_proj/test_projects/juliet-c/testcases/CWE191_Integer_Underflow/s05/CWE191_Integer_Underflow__int_min_predec_09.c":0:0)
#loc1 = loc("../../../testcasesupport/std_testcase.h":109:1)
#loc2 = loc("../../../testcasesupport/std_testcase.h":109:18)
#loc3 = loc("../../../testcasesupport/std_testcase_io.h":18:1)
#loc4 = loc("../../../testcasesupport/std_testcase_io.h":18:33)
#loc5 = loc("CWE191_Integer_Underflow__int_min_predec_09.c":22:1)
#loc6 = loc("CWE191_Integer_Underflow__int_min_predec_09.c":41:1)
#loc7 = loc("CWE191_Integer_Underflow__int_min_predec_09.c":24:5)
#loc8 = loc("CWE191_Integer_Underflow__int_min_predec_09.c":24:9)
#loc9 = loc("CWE191_Integer_Underflow__int_min_predec_09.c":26:12)
#loc10 = loc("CWE191_Integer_Underflow__int_min_predec_09.c":26:5)
#loc11 = loc("CWE191_Integer_Underflow__int_min_predec_09.c":27:5)
#loc12 = loc("CWE191_Integer_Underflow__int_min_predec_09.c":31:5)
#loc13 = loc("CWE191_Integer_Underflow__int_min_predec_09.c":27:8)
#loc14 = loc("CWE191_Integer_Underflow__int_min_predec_09.c":28:5)
#loc15 = loc("CWE191_Integer_Underflow__int_min_predec_09.c":30:16)
#loc16 = loc("CWE191_Integer_Underflow__int_min_predec_09.c":30:9)
#loc17 = loc("CWE191_Integer_Underflow__int_min_predec_09.c":32:5)
#loc18 = loc("CWE191_Integer_Underflow__int_min_predec_09.c":40:5)
#loc19 = loc("CWE191_Integer_Underflow__int_min_predec_09.c":32:8)
#loc20 = loc("CWE191_Integer_Underflow__int_min_predec_09.c":33:5)
#loc21 = loc("CWE191_Integer_Underflow__int_min_predec_09.c":34:9)
#loc22 = loc("CWE191_Integer_Underflow__int_min_predec_09.c":39:9)
#loc23 = loc("CWE191_Integer_Underflow__int_min_predec_09.c":37:13)
#loc24 = loc("CWE191_Integer_Underflow__int_min_predec_09.c":37:26)
#loc25 = loc("CWE191_Integer_Underflow__int_min_predec_09.c":36:13)
#loc26 = loc("CWE191_Integer_Underflow__int_min_predec_09.c":36:15)
#loc27 = loc("CWE191_Integer_Underflow__int_min_predec_09.c":38:26)
#loc28 = loc("CWE191_Integer_Underflow__int_min_predec_09.c":38:13)
#loc29 = loc("CWE191_Integer_Underflow__int_min_predec_09.c":155:1)
#loc30 = loc("CWE191_Integer_Underflow__int_min_predec_09.c":161:1)
#loc31 = loc("CWE191_Integer_Underflow__int_min_predec_09.c":157:5)
#loc32 = loc("CWE191_Integer_Underflow__int_min_predec_09.c":157:14)
#loc33 = loc("CWE191_Integer_Underflow__int_min_predec_09.c":158:5)
#loc34 = loc("CWE191_Integer_Underflow__int_min_predec_09.c":158:14)
#loc35 = loc("CWE191_Integer_Underflow__int_min_predec_09.c":159:5)
#loc36 = loc("CWE191_Integer_Underflow__int_min_predec_09.c":159:14)
#loc37 = loc("CWE191_Integer_Underflow__int_min_predec_09.c":160:5)
#loc38 = loc("CWE191_Integer_Underflow__int_min_predec_09.c":160:14)
#loc39 = loc("../../../testcasesupport/std_testcase.h":110:1)
#loc40 = loc("../../../testcasesupport/std_testcase.h":110:18)
#loc41 = loc("../../../testcasesupport/std_testcase_io.h":14:1)
#loc42 = loc("../../../testcasesupport/std_testcase_io.h":14:33)
#loc43 = loc("CWE191_Integer_Underflow__int_min_predec_09.c":61:19)
#loc44 = loc("CWE191_Integer_Underflow__int_min_predec_09.c":74:23)
#loc45 = loc("CWE191_Integer_Underflow__int_min_predec_09.c":48:1)
#loc46 = loc("CWE191_Integer_Underflow__int_min_predec_09.c":77:1)
#loc47 = loc("CWE191_Integer_Underflow__int_min_predec_09.c":50:5)
#loc48 = loc("CWE191_Integer_Underflow__int_min_predec_09.c":50:9)
#loc49 = loc("CWE191_Integer_Underflow__int_min_predec_09.c":52:12)
#loc50 = loc("CWE191_Integer_Underflow__int_min_predec_09.c":52:5)
#loc51 = loc("CWE191_Integer_Underflow__int_min_predec_09.c":53:5)
#loc52 = loc("CWE191_Integer_Underflow__int_min_predec_09.c":57:5)
#loc53 = loc("CWE191_Integer_Underflow__int_min_predec_09.c":53:8)
#loc54 = loc("CWE191_Integer_Underflow__int_min_predec_09.c":54:5)
#loc55 = loc("CWE191_Integer_Underflow__int_min_predec_09.c":56:16)
#loc56 = loc("CWE191_Integer_Underflow__int_min_predec_09.c":56:9)
#loc57 = loc("CWE191_Integer_Underflow__int_min_predec_09.c":58:5)
#loc58 = loc("CWE191_Integer_Underflow__int_min_predec_09.c":76:5)
#loc59 = loc("CWE191_Integer_Underflow__int_min_predec_09.c":58:8)
#loc60 = loc("CWE191_Integer_Underflow__int_min_predec_09.c":59:5)
#loc61 = loc("CWE191_Integer_Underflow__int_min_predec_09.c":62:5)
#loc62 = loc("CWE191_Integer_Underflow__int_min_predec_09.c":64:5)
#loc63 = loc("CWE191_Integer_Underflow__int_min_predec_09.c":61:9)
#loc64 = loc("CWE191_Integer_Underflow__int_min_predec_09.c":66:9)
#loc65 = loc("CWE191_Integer_Underflow__int_min_predec_09.c":75:9)
#loc66 = loc("CWE191_Integer_Underflow__int_min_predec_09.c":66:13)
#loc67 = loc("CWE191_Integer_Underflow__int_min_predec_09.c":66:20)
#loc68 = loc("CWE191_Integer_Underflow__int_min_predec_09.c":66:18)
#loc69 = loc("CWE191_Integer_Underflow__int_min_predec_09.c":67:9)
#loc70 = loc("CWE191_Integer_Underflow__int_min_predec_09.c":71:9)
#loc71 = loc("CWE191_Integer_Underflow__int_min_predec_09.c":73:9)
#loc72 = loc("CWE191_Integer_Underflow__int_min_predec_09.c":69:13)
#loc73 = loc("CWE191_Integer_Underflow__int_min_predec_09.c":69:26)
#loc74 = loc("CWE191_Integer_Underflow__int_min_predec_09.c":68:13)
#loc75 = loc("CWE191_Integer_Underflow__int_min_predec_09.c":68:15)
#loc76 = loc("CWE191_Integer_Underflow__int_min_predec_09.c":70:26)
#loc77 = loc("CWE191_Integer_Underflow__int_min_predec_09.c":70:13)
#loc78 = loc("CWE191_Integer_Underflow__int_min_predec_09.c":74:13)
#loc79 = loc("CWE191_Integer_Underflow__int_min_predec_09.c":80:1)
#loc80 = loc("CWE191_Integer_Underflow__int_min_predec_09.c":104:1)
#loc81 = loc("CWE191_Integer_Underflow__int_min_predec_09.c":82:5)
#loc82 = loc("CWE191_Integer_Underflow__int_min_predec_09.c":82:9)
#loc83 = loc("CWE191_Integer_Underflow__int_min_predec_09.c":84:12)
#loc84 = loc("CWE191_Integer_Underflow__int_min_predec_09.c":84:5)
#loc85 = loc("CWE191_Integer_Underflow__int_min_predec_09.c":85:5)
#loc86 = loc("CWE191_Integer_Underflow__int_min_predec_09.c":89:5)
#loc87 = loc("CWE191_Integer_Underflow__int_min_predec_09.c":85:8)
#loc88 = loc("CWE191_Integer_Underflow__int_min_predec_09.c":86:5)
#loc89 = loc("CWE191_Integer_Underflow__int_min_predec_09.c":88:16)
#loc90 = loc("CWE191_Integer_Underflow__int_min_predec_09.c":88:9)
#loc91 = loc("CWE191_Integer_Underflow__int_min_predec_09.c":90:5)
#loc92 = loc("CWE191_Integer_Underflow__int_min_predec_09.c":103:5)
#loc93 = loc("CWE191_Integer_Underflow__int_min_predec_09.c":90:8)
#loc94 = loc("CWE191_Integer_Underflow__int_min_predec_09.c":91:5)
#loc95 = loc("CWE191_Integer_Underflow__int_min_predec_09.c":93:9)
#loc96 = loc("CWE191_Integer_Underflow__int_min_predec_09.c":102:9)
#loc97 = loc("CWE191_Integer_Underflow__int_min_predec_09.c":93:13)
#loc98 = loc("CWE191_Integer_Underflow__int_min_predec_09.c":93:20)
#loc99 = loc("CWE191_Integer_Underflow__int_min_predec_09.c":93:18)
#loc100 = loc("CWE191_Integer_Underflow__int_min_predec_09.c":94:9)
#loc101 = loc("CWE191_Integer_Underflow__int_min_predec_09.c":98:9)
#loc102 = loc("CWE191_Integer_Underflow__int_min_predec_09.c":100:9)
#loc103 = loc("CWE191_Integer_Underflow__int_min_predec_09.c":96:13)
#loc104 = loc("CWE191_Integer_Underflow__int_min_predec_09.c":96:26)
#loc105 = loc("CWE191_Integer_Underflow__int_min_predec_09.c":95:13)
#loc106 = loc("CWE191_Integer_Underflow__int_min_predec_09.c":95:15)
#loc107 = loc("CWE191_Integer_Underflow__int_min_predec_09.c":97:26)
#loc108 = loc("CWE191_Integer_Underflow__int_min_predec_09.c":97:13)
#loc109 = loc("CWE191_Integer_Underflow__int_min_predec_09.c":101:23)
#loc110 = loc("CWE191_Integer_Underflow__int_min_predec_09.c":101:13)
#loc111 = loc("CWE191_Integer_Underflow__int_min_predec_09.c":107:1)
#loc112 = loc("CWE191_Integer_Underflow__int_min_predec_09.c":131:1)
#loc113 = loc("CWE191_Integer_Underflow__int_min_predec_09.c":109:5)
#loc114 = loc("CWE191_Integer_Underflow__int_min_predec_09.c":109:9)
#loc115 = loc("CWE191_Integer_Underflow__int_min_predec_09.c":111:12)
#loc116 = loc("CWE191_Integer_Underflow__int_min_predec_09.c":111:5)
#loc117 = loc("CWE191_Integer_Underflow__int_min_predec_09.c":112:5)
#loc118 = loc("CWE191_Integer_Underflow__int_min_predec_09.c":121:5)
#loc119 = loc("CWE191_Integer_Underflow__int_min_predec_09.c":112:8)
#loc120 = loc("CWE191_Integer_Underflow__int_min_predec_09.c":113:5)
#loc121 = loc("CWE191_Integer_Underflow__int_min_predec_09.c":116:5)
#loc122 = loc("CWE191_Integer_Underflow__int_min_predec_09.c":118:5)
#loc123 = loc("CWE191_Integer_Underflow__int_min_predec_09.c":115:19)
#loc124 = loc("CWE191_Integer_Underflow__int_min_predec_09.c":115:9)
#loc125 = loc("CWE191_Integer_Underflow__int_min_predec_09.c":120:17)
#loc126 = loc("CWE191_Integer_Underflow__int_min_predec_09.c":120:16)
#loc127 = loc("CWE191_Integer_Underflow__int_min_predec_09.c":120:9)
#loc128 = loc("CWE191_Integer_Underflow__int_min_predec_09.c":122:5)
#loc129 = loc("CWE191_Integer_Underflow__int_min_predec_09.c":130:5)
#loc130 = loc("CWE191_Integer_Underflow__int_min_predec_09.c":122:8)
#loc131 = loc("CWE191_Integer_Underflow__int_min_predec_09.c":123:5)
#loc132 = loc("CWE191_Integer_Underflow__int_min_predec_09.c":124:9)
#loc133 = loc("CWE191_Integer_Underflow__int_min_predec_09.c":129:9)
#loc134 = loc("CWE191_Integer_Underflow__int_min_predec_09.c":127:13)
#loc135 = loc("CWE191_Integer_Underflow__int_min_predec_09.c":127:26)
#loc136 = loc("CWE191_Integer_Underflow__int_min_predec_09.c":126:13)
#loc137 = loc("CWE191_Integer_Underflow__int_min_predec_09.c":126:15)
#loc138 = loc("CWE191_Integer_Underflow__int_min_predec_09.c":128:26)
#loc139 = loc("CWE191_Integer_Underflow__int_min_predec_09.c":128:13)
#loc140 = loc("CWE191_Integer_Underflow__int_min_predec_09.c":134:1)
#loc141 = loc("CWE191_Integer_Underflow__int_min_predec_09.c":153:1)
#loc142 = loc("CWE191_Integer_Underflow__int_min_predec_09.c":136:5)
#loc143 = loc("CWE191_Integer_Underflow__int_min_predec_09.c":136:9)
#loc144 = loc("CWE191_Integer_Underflow__int_min_predec_09.c":138:12)
#loc145 = loc("CWE191_Integer_Underflow__int_min_predec_09.c":138:5)
#loc146 = loc("CWE191_Integer_Underflow__int_min_predec_09.c":139:5)
#loc147 = loc("CWE191_Integer_Underflow__int_min_predec_09.c":143:5)
#loc148 = loc("CWE191_Integer_Underflow__int_min_predec_09.c":139:8)
#loc149 = loc("CWE191_Integer_Underflow__int_min_predec_09.c":140:5)
#loc150 = loc("CWE191_Integer_Underflow__int_min_predec_09.c":142:17)
#loc151 = loc("CWE191_Integer_Underflow__int_min_predec_09.c":142:16)
#loc152 = loc("CWE191_Integer_Underflow__int_min_predec_09.c":142:9)
#loc153 = loc("CWE191_Integer_Underflow__int_min_predec_09.c":144:5)
#loc154 = loc("CWE191_Integer_Underflow__int_min_predec_09.c":152:5)
#loc155 = loc("CWE191_Integer_Underflow__int_min_predec_09.c":144:8)
#loc156 = loc("CWE191_Integer_Underflow__int_min_predec_09.c":145:5)
#loc157 = loc("CWE191_Integer_Underflow__int_min_predec_09.c":146:9)
#loc158 = loc("CWE191_Integer_Underflow__int_min_predec_09.c":151:9)
#loc159 = loc("CWE191_Integer_Underflow__int_min_predec_09.c":149:13)
#loc160 = loc("CWE191_Integer_Underflow__int_min_predec_09.c":149:26)
#loc161 = loc("CWE191_Integer_Underflow__int_min_predec_09.c":148:13)
#loc162 = loc("CWE191_Integer_Underflow__int_min_predec_09.c":148:15)
#loc163 = loc("CWE191_Integer_Underflow__int_min_predec_09.c":150:26)
#loc164 = loc("CWE191_Integer_Underflow__int_min_predec_09.c":150:13)
#loc165 = loc(fused[#loc1, #loc2])
#loc166 = loc(fused[#loc3, #loc4])
#loc167 = loc(fused[#loc5, #loc6])
#loc168 = loc(fused[#loc7, #loc8])
#loc169 = loc(fused[#loc10, #loc9])
#loc170 = loc(fused[#loc11, #loc12])
#loc171 = loc(fused[#loc14, #loc12])
#loc172 = loc(fused[#loc16, #loc15])
#loc173 = loc(fused[#loc17, #loc18])
#loc174 = loc(fused[#loc20, #loc18])
#loc175 = loc(fused[#loc21, #loc22])
#loc176 = loc(fused[#loc23, #loc24])
#loc177 = loc(fused[#loc25, #loc26])
#loc178 = loc(fused[#loc29, #loc30])
#loc179 = loc(fused[#loc31, #loc32])
#loc180 = loc(fused[#loc33, #loc34])
#loc181 = loc(fused[#loc35, #loc36])
#loc182 = loc(fused[#loc37, #loc38])
#loc183 = loc(fused[#loc39, #loc40])
#loc184 = loc(fused[#loc41, #loc42])
#loc185 = loc(fused[#loc45, #loc46])
#loc186 = loc(fused[#loc47, #loc48])
#loc187 = loc(fused[#loc50, #loc49])
#loc188 = loc(fused[#loc51, #loc52])
#loc189 = loc(fused[#loc54, #loc52])
#loc190 = loc(fused[#loc56, #loc55])
#loc191 = loc(fused[#loc57, #loc58])
#loc192 = loc(fused[#loc60, #loc61, #loc62, #loc58])
#loc193 = loc(fused[#loc64, #loc65])
#loc194 = loc(fused[#loc66, #loc67])
#loc195 = loc(fused[#loc69, #loc70, #loc71, #loc65])
#loc196 = loc(fused[#loc72, #loc73])
#loc197 = loc(fused[#loc74, #loc75])
#loc198 = loc(fused[#loc79, #loc80])
#loc199 = loc(fused[#loc81, #loc82])
#loc200 = loc(fused[#loc84, #loc83])
#loc201 = loc(fused[#loc85, #loc86])
#loc202 = loc(fused[#loc88, #loc86])
#loc203 = loc(fused[#loc90, #loc89])
#loc204 = loc(fused[#loc91, #loc92])
#loc205 = loc(fused[#loc94, #loc92])
#loc206 = loc(fused[#loc95, #loc96])
#loc207 = loc(fused[#loc97, #loc98])
#loc208 = loc(fused[#loc100, #loc101, #loc102, #loc96])
#loc209 = loc(fused[#loc103, #loc104])
#loc210 = loc(fused[#loc105, #loc106])
#loc211 = loc(fused[#loc111, #loc112])
#loc212 = loc(fused[#loc113, #loc114])
#loc213 = loc(fused[#loc116, #loc115])
#loc214 = loc(fused[#loc117, #loc118])
#loc215 = loc(fused[#loc120, #loc121, #loc122, #loc118])
#loc216 = loc(fused[#loc127, #loc125])
#loc217 = loc(fused[#loc128, #loc129])
#loc218 = loc(fused[#loc131, #loc129])
#loc219 = loc(fused[#loc132, #loc133])
#loc220 = loc(fused[#loc134, #loc135])
#loc221 = loc(fused[#loc136, #loc137])
#loc222 = loc(fused[#loc140, #loc141])
#loc223 = loc(fused[#loc142, #loc143])
#loc224 = loc(fused[#loc145, #loc144])
#loc225 = loc(fused[#loc146, #loc147])
#loc226 = loc(fused[#loc149, #loc147])
#loc227 = loc(fused[#loc152, #loc150])
#loc228 = loc(fused[#loc153, #loc154])
#loc229 = loc(fused[#loc156, #loc154])
#loc230 = loc(fused[#loc157, #loc158])
#loc231 = loc(fused[#loc159, #loc160])
#loc232 = loc(fused[#loc161, #loc162])
