!s32i = !cir.int<s, 32>
!s8i = !cir.int<s, 8>
#false = #cir.bool<false> : !cir.bool
#fn_attr = #cir<extra({inline = #cir.inline<no>, optnone = #cir.optnone})>
#true = #cir.bool<true> : !cir.bool
module @"/home/ladisgin/git_proj/test_projects/juliet-c/testcases/CWE121_Stack_Based_Buffer_Overflow/s01/CWE121_Stack_Based_Buffer_Overflow__CWE129_listen_socket_62a.cpp" attributes {cir.lang = #cir.lang<cxx>, cir.sob = #cir.signed_overflow_behavior<undefined>, cir.triple = "x86_64-unknown-linux-gnu", dlti.dl_spec = #dlti.dl_spec<#dlti.dl_entry<f80, dense<128> : vector<2xi64>>, #dlti.dl_entry<i1, dense<8> : vector<2xi64>>, #dlti.dl_entry<!llvm.ptr, dense<64> : vector<4xi64>>, #dlti.dl_entry<i16, dense<16> : vector<2xi64>>, #dlti.dl_entry<i8, dense<8> : vector<2xi64>>, #dlti.dl_entry<i32, dense<32> : vector<2xi64>>, #dlti.dl_entry<f64, dense<64> : vector<2xi64>>, #dlti.dl_entry<!llvm.ptr<270>, dense<32> : vector<4xi64>>, #dlti.dl_entry<f16, dense<16> : vector<2xi64>>, #dlti.dl_entry<f128, dense<128> : vector<2xi64>>, #dlti.dl_entry<!llvm.ptr<271>, dense<32> : vector<4xi64>>, #dlti.dl_entry<!llvm.ptr<272>, dense<64> : vector<4xi64>>, #dlti.dl_entry<i64, dense<64> : vector<2xi64>>, #dlti.dl_entry<i128, dense<128> : vector<2xi64>>, #dlti.dl_entry<"dlti.stack_alignment", 128 : i64>, #dlti.dl_entry<"dlti.endianness", "little">>, llvm.data_layout = "e-m:e-p270:32:32-p271:32:32-p272:64:64-i64:64-i128:128-f80:128-n8:16:32:64-S128"} {
  cir.func private  @_ZN59CWE121_Stack_Based_Buffer_Overflow__CWE129_listen_socket_629badSourceERi(!cir.ptr<!s32i>) loc(#loc130)
  cir.func private  @printIntLine(!s32i) loc(#loc131)
  cir.func private  @printLine(!cir.ptr<!s8i>) loc(#loc132)
  cir.global "private"  constant internal dsolocal @".str" = #cir.const_array<"ERROR: Array index is negative.\00" : !cir.array<!s8i x 32>> : !cir.array<!s8i x 32> {alignment = 1 : i64} loc(#loc7)
  cir.func  @_ZN59CWE121_Stack_Based_Buffer_Overflow__CWE129_listen_socket_623badEv() extra(#fn_attr) {
    %0 = cir.alloca !s32i, !cir.ptr<!s32i>, ["data"] {alignment = 4 : i64} loc(#loc134)
    %1 = cir.const #cir.int<1> : !s32i loc(#loc12)
    %2 = cir.unary(minus, %1) : !s32i, !s32i loc(#loc13)
    cir.store %2, %0 : !s32i, !cir.ptr<!s32i> loc(#loc135)
    cir.call @_ZN59CWE121_Stack_Based_Buffer_Overflow__CWE129_listen_socket_629badSourceERi(%0) : (!cir.ptr<!s32i>) -> () loc(#loc15)
    cir.scope {
      %3 = cir.alloca !s32i, !cir.ptr<!s32i>, ["i"] {alignment = 4 : i64} loc(#loc137)
      %4 = cir.alloca !cir.array<!s32i x 10>, !cir.ptr<!cir.array<!s32i x 10>>, ["buffer"] {alignment = 16 : i64} loc(#loc138)
      %5 = cir.const #cir.zero : !cir.array<!s32i x 10> loc(#loc138)
      cir.store %5, %4 : !cir.array<!s32i x 10>, !cir.ptr<!cir.array<!s32i x 10>> loc(#loc138)
      cir.scope {
        %6 = cir.load %0 : !cir.ptr<!s32i>, !s32i loc(#loc24)
        %7 = cir.const #cir.int<0> : !s32i loc(#loc25)
        %8 = cir.cmp(ge, %6, %7) : !s32i, !cir.bool loc(#loc140)
        cir.if %8 {
          %9 = cir.const #cir.int<1> : !s32i loc(#loc29)
          %10 = cir.load %0 : !cir.ptr<!s32i>, !s32i loc(#loc30)
          %11 = cir.cast(array_to_ptrdecay, %4 : !cir.ptr<!cir.array<!s32i x 10>>), !cir.ptr<!s32i> loc(#loc31)
          %12 = cir.ptr_stride(%11 : !cir.ptr<!s32i>, %10 : !s32i), !cir.ptr<!s32i> loc(#loc31)
          cir.store %9, %12 : !s32i, !cir.ptr<!s32i> loc(#loc142)
          cir.scope {
            %13 = cir.const #cir.int<0> : !s32i loc(#loc34)
            cir.store %13, %3 : !s32i, !cir.ptr<!s32i> loc(#loc144)
            cir.for : cond {
              %14 = cir.load %3 : !cir.ptr<!s32i>, !s32i loc(#loc36)
              %15 = cir.const #cir.int<10> : !s32i loc(#loc37)
              %16 = cir.cmp(lt, %14, %15) : !s32i, !cir.bool loc(#loc145)
              cir.condition(%16) loc(#loc145)
            } body {
              %14 = cir.load %3 : !cir.ptr<!s32i>, !s32i loc(#loc38)
              %15 = cir.cast(array_to_ptrdecay, %4 : !cir.ptr<!cir.array<!s32i x 10>>), !cir.ptr<!s32i> loc(#loc39)
              %16 = cir.ptr_stride(%15 : !cir.ptr<!s32i>, %14 : !s32i), !cir.ptr<!s32i> loc(#loc39)
              %17 = cir.load %16 : !cir.ptr<!s32i>, !s32i loc(#loc39)
              cir.call @printIntLine(%17) : (!s32i) -> () loc(#loc40)
              cir.yield loc(#loc33)
            } step {
              %14 = cir.load %3 : !cir.ptr<!s32i>, !s32i loc(#loc41)
              %15 = cir.unary(inc, %14) : !s32i, !s32i loc(#loc42)
              cir.store %15, %3 : !s32i, !cir.ptr<!s32i> loc(#loc146)
              cir.yield loc(#loc143)
            } loc(#loc143)
          } loc(#loc143)
        } else {
          %9 = cir.get_global @".str" : !cir.ptr<!cir.array<!s8i x 32>> loc(#loc7)
          %10 = cir.cast(array_to_ptrdecay, %9 : !cir.ptr<!cir.array<!s8i x 32>>), !cir.ptr<!s8i> loc(#loc7)
          cir.call @printLine(%10) : (!cir.ptr<!s8i>) -> () loc(#loc43)
        } loc(#loc141)
      } loc(#loc139)
    } loc(#loc136)
    cir.return loc(#loc9)
  } loc(#loc133)
  cir.func private  @_ZN59CWE121_Stack_Based_Buffer_Overflow__CWE129_listen_socket_6213goodG2BSourceERi(!cir.ptr<!s32i>) loc(#loc147)
  cir.func internal private  @_ZN59CWE121_Stack_Based_Buffer_Overflow__CWE129_listen_socket_62L7goodG2BEv() extra(#fn_attr) {
    %0 = cir.alloca !s32i, !cir.ptr<!s32i>, ["data"] {alignment = 4 : i64} loc(#loc149)
    %1 = cir.const #cir.int<1> : !s32i loc(#loc50)
    %2 = cir.unary(minus, %1) : !s32i, !s32i loc(#loc51)
    cir.store %2, %0 : !s32i, !cir.ptr<!s32i> loc(#loc150)
    cir.call @_ZN59CWE121_Stack_Based_Buffer_Overflow__CWE129_listen_socket_6213goodG2BSourceERi(%0) : (!cir.ptr<!s32i>) -> () loc(#loc53)
    cir.scope {
      %3 = cir.alloca !s32i, !cir.ptr<!s32i>, ["i"] {alignment = 4 : i64} loc(#loc152)
      %4 = cir.alloca !cir.array<!s32i x 10>, !cir.ptr<!cir.array<!s32i x 10>>, ["buffer"] {alignment = 16 : i64} loc(#loc153)
      %5 = cir.const #cir.zero : !cir.array<!s32i x 10> loc(#loc153)
      cir.store %5, %4 : !cir.array<!s32i x 10>, !cir.ptr<!cir.array<!s32i x 10>> loc(#loc153)
      cir.scope {
        %6 = cir.load %0 : !cir.ptr<!s32i>, !s32i loc(#loc62)
        %7 = cir.const #cir.int<0> : !s32i loc(#loc63)
        %8 = cir.cmp(ge, %6, %7) : !s32i, !cir.bool loc(#loc155)
        cir.if %8 {
          %9 = cir.const #cir.int<1> : !s32i loc(#loc67)
          %10 = cir.load %0 : !cir.ptr<!s32i>, !s32i loc(#loc68)
          %11 = cir.cast(array_to_ptrdecay, %4 : !cir.ptr<!cir.array<!s32i x 10>>), !cir.ptr<!s32i> loc(#loc69)
          %12 = cir.ptr_stride(%11 : !cir.ptr<!s32i>, %10 : !s32i), !cir.ptr<!s32i> loc(#loc69)
          cir.store %9, %12 : !s32i, !cir.ptr<!s32i> loc(#loc157)
          cir.scope {
            %13 = cir.const #cir.int<0> : !s32i loc(#loc72)
            cir.store %13, %3 : !s32i, !cir.ptr<!s32i> loc(#loc159)
            cir.for : cond {
              %14 = cir.load %3 : !cir.ptr<!s32i>, !s32i loc(#loc74)
              %15 = cir.const #cir.int<10> : !s32i loc(#loc75)
              %16 = cir.cmp(lt, %14, %15) : !s32i, !cir.bool loc(#loc160)
              cir.condition(%16) loc(#loc160)
            } body {
              %14 = cir.load %3 : !cir.ptr<!s32i>, !s32i loc(#loc76)
              %15 = cir.cast(array_to_ptrdecay, %4 : !cir.ptr<!cir.array<!s32i x 10>>), !cir.ptr<!s32i> loc(#loc77)
              %16 = cir.ptr_stride(%15 : !cir.ptr<!s32i>, %14 : !s32i), !cir.ptr<!s32i> loc(#loc77)
              %17 = cir.load %16 : !cir.ptr<!s32i>, !s32i loc(#loc77)
              cir.call @printIntLine(%17) : (!s32i) -> () loc(#loc78)
              cir.yield loc(#loc71)
            } step {
              %14 = cir.load %3 : !cir.ptr<!s32i>, !s32i loc(#loc79)
              %15 = cir.unary(inc, %14) : !s32i, !s32i loc(#loc80)
              cir.store %15, %3 : !s32i, !cir.ptr<!s32i> loc(#loc161)
              cir.yield loc(#loc158)
            } loc(#loc158)
          } loc(#loc158)
        } else {
          %9 = cir.get_global @".str" : !cir.ptr<!cir.array<!s8i x 32>> loc(#loc81)
          %10 = cir.cast(array_to_ptrdecay, %9 : !cir.ptr<!cir.array<!s8i x 32>>), !cir.ptr<!s8i> loc(#loc81)
          cir.call @printLine(%10) : (!cir.ptr<!s8i>) -> () loc(#loc82)
        } loc(#loc156)
      } loc(#loc154)
    } loc(#loc151)
    cir.return loc(#loc47)
  } loc(#loc148)
  cir.func private  @_ZN59CWE121_Stack_Based_Buffer_Overflow__CWE129_listen_socket_6213goodB2GSourceERi(!cir.ptr<!s32i>) loc(#loc162)
  cir.global "private"  constant internal dsolocal @".str1" = #cir.const_array<"ERROR: Array index is out-of-bounds\00" : !cir.array<!s8i x 36>> : !cir.array<!s8i x 36> {alignment = 1 : i64} loc(#loc85)
  cir.func internal private  @_ZN59CWE121_Stack_Based_Buffer_Overflow__CWE129_listen_socket_62L7goodB2GEv() extra(#fn_attr) {
    %0 = cir.alloca !s32i, !cir.ptr<!s32i>, ["data"] {alignment = 4 : i64} loc(#loc164)
    %1 = cir.const #cir.int<1> : !s32i loc(#loc90)
    %2 = cir.unary(minus, %1) : !s32i, !s32i loc(#loc91)
    cir.store %2, %0 : !s32i, !cir.ptr<!s32i> loc(#loc165)
    cir.call @_ZN59CWE121_Stack_Based_Buffer_Overflow__CWE129_listen_socket_6213goodB2GSourceERi(%0) : (!cir.ptr<!s32i>) -> () loc(#loc93)
    cir.scope {
      %3 = cir.alloca !s32i, !cir.ptr<!s32i>, ["i"] {alignment = 4 : i64} loc(#loc167)
      %4 = cir.alloca !cir.array<!s32i x 10>, !cir.ptr<!cir.array<!s32i x 10>>, ["buffer"] {alignment = 16 : i64} loc(#loc168)
      %5 = cir.const #cir.zero : !cir.array<!s32i x 10> loc(#loc168)
      cir.store %5, %4 : !cir.array<!s32i x 10>, !cir.ptr<!cir.array<!s32i x 10>> loc(#loc168)
      cir.scope {
        %6 = cir.load %0 : !cir.ptr<!s32i>, !s32i loc(#loc102)
        %7 = cir.const #cir.int<0> : !s32i loc(#loc103)
        %8 = cir.cmp(ge, %6, %7) : !s32i, !cir.bool loc(#loc170)
        %9 = cir.ternary(%8, true {
          %10 = cir.load %0 : !cir.ptr<!s32i>, !s32i loc(#loc105)
          %11 = cir.const #cir.int<10> : !s32i loc(#loc106)
          %12 = cir.cmp(lt, %10, %11) : !s32i, !cir.bool loc(#loc171)
          %13 = cir.ternary(%12, true {
            %14 = cir.const #true loc(#loc104)
            cir.yield %14 : !cir.bool loc(#loc104)
          }, false {
            %14 = cir.const #false loc(#loc104)
            cir.yield %14 : !cir.bool loc(#loc104)
          }) : (!cir.bool) -> !cir.bool loc(#loc104)
          cir.yield %13 : !cir.bool loc(#loc104)
        }, false {
          %10 = cir.const #false loc(#loc104)
          cir.yield %10 : !cir.bool loc(#loc104)
        }) : (!cir.bool) -> !cir.bool loc(#loc104)
        cir.if %9 {
          %10 = cir.const #cir.int<1> : !s32i loc(#loc111)
          %11 = cir.load %0 : !cir.ptr<!s32i>, !s32i loc(#loc112)
          %12 = cir.cast(array_to_ptrdecay, %4 : !cir.ptr<!cir.array<!s32i x 10>>), !cir.ptr<!s32i> loc(#loc113)
          %13 = cir.ptr_stride(%12 : !cir.ptr<!s32i>, %11 : !s32i), !cir.ptr<!s32i> loc(#loc113)
          cir.store %10, %13 : !s32i, !cir.ptr<!s32i> loc(#loc173)
          cir.scope {
            %14 = cir.const #cir.int<0> : !s32i loc(#loc116)
            cir.store %14, %3 : !s32i, !cir.ptr<!s32i> loc(#loc175)
            cir.for : cond {
              %15 = cir.load %3 : !cir.ptr<!s32i>, !s32i loc(#loc118)
              %16 = cir.const #cir.int<10> : !s32i loc(#loc119)
              %17 = cir.cmp(lt, %15, %16) : !s32i, !cir.bool loc(#loc176)
              cir.condition(%17) loc(#loc176)
            } body {
              %15 = cir.load %3 : !cir.ptr<!s32i>, !s32i loc(#loc120)
              %16 = cir.cast(array_to_ptrdecay, %4 : !cir.ptr<!cir.array<!s32i x 10>>), !cir.ptr<!s32i> loc(#loc121)
              %17 = cir.ptr_stride(%16 : !cir.ptr<!s32i>, %15 : !s32i), !cir.ptr<!s32i> loc(#loc121)
              %18 = cir.load %17 : !cir.ptr<!s32i>, !s32i loc(#loc121)
              cir.call @printIntLine(%18) : (!s32i) -> () loc(#loc122)
              cir.yield loc(#loc115)
            } step {
              %15 = cir.load %3 : !cir.ptr<!s32i>, !s32i loc(#loc123)
              %16 = cir.unary(inc, %15) : !s32i, !s32i loc(#loc124)
              cir.store %16, %3 : !s32i, !cir.ptr<!s32i> loc(#loc177)
              cir.yield loc(#loc174)
            } loc(#loc174)
          } loc(#loc174)
        } else {
          %10 = cir.get_global @".str1" : !cir.ptr<!cir.array<!s8i x 36>> loc(#loc85)
          %11 = cir.cast(array_to_ptrdecay, %10 : !cir.ptr<!cir.array<!s8i x 36>>), !cir.ptr<!s8i> loc(#loc85)
          cir.call @printLine(%11) : (!cir.ptr<!s8i>) -> () loc(#loc125)
        } loc(#loc172)
      } loc(#loc169)
    } loc(#loc166)
    cir.return loc(#loc87)
  } loc(#loc163)
  cir.func  @_ZN59CWE121_Stack_Based_Buffer_Overflow__CWE129_listen_socket_624goodEv() extra(#fn_attr) {
    cir.call @_ZN59CWE121_Stack_Based_Buffer_Overflow__CWE129_listen_socket_62L7goodG2BEv() : () -> () loc(#loc128)
    cir.call @_ZN59CWE121_Stack_Based_Buffer_Overflow__CWE129_listen_socket_62L7goodB2GEv() : () -> () loc(#loc129)
    cir.return loc(#loc127)
  } loc(#loc178)
} loc(#loc)
#loc = loc("/home/ladisgin/git_proj/test_projects/juliet-c/testcases/CWE121_Stack_Based_Buffer_Overflow/s01/CWE121_Stack_Based_Buffer_Overflow__CWE129_listen_socket_62a.cpp":0:0)
#loc1 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE129_listen_socket_62a.cpp":26:1)
#loc2 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE129_listen_socket_62a.cpp":26:25)
#loc3 = loc("../../../testcasesupport/std_testcase_io.h":18:1)
#loc4 = loc("../../../testcasesupport/std_testcase_io.h":18:33)
#loc5 = loc("../../../testcasesupport/std_testcase_io.h":14:1)
#loc6 = loc("../../../testcasesupport/std_testcase_io.h":14:33)
#loc7 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE129_listen_socket_62a.cpp":50:23)
#loc8 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE129_listen_socket_62a.cpp":28:1)
#loc9 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE129_listen_socket_62a.cpp":53:1)
#loc10 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE129_listen_socket_62a.cpp":30:5)
#loc11 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE129_listen_socket_62a.cpp":30:9)
#loc12 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE129_listen_socket_62a.cpp":32:13)
#loc13 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE129_listen_socket_62a.cpp":32:12)
#loc14 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE129_listen_socket_62a.cpp":32:5)
#loc15 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE129_listen_socket_62a.cpp":33:5)
#loc16 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE129_listen_socket_62a.cpp":34:5)
#loc17 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE129_listen_socket_62a.cpp":52:5)
#loc18 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE129_listen_socket_62a.cpp":35:9)
#loc19 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE129_listen_socket_62a.cpp":35:13)
#loc20 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE129_listen_socket_62a.cpp":36:9)
#loc21 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE129_listen_socket_62a.cpp":36:30)
#loc22 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE129_listen_socket_62a.cpp":39:9)
#loc23 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE129_listen_socket_62a.cpp":51:9)
#loc24 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE129_listen_socket_62a.cpp":39:13)
#loc25 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE129_listen_socket_62a.cpp":39:21)
#loc26 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE129_listen_socket_62a.cpp":40:9)
#loc27 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE129_listen_socket_62a.cpp":47:9)
#loc28 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE129_listen_socket_62a.cpp":49:9)
#loc29 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE129_listen_socket_62a.cpp":41:28)
#loc30 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE129_listen_socket_62a.cpp":41:20)
#loc31 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE129_listen_socket_62a.cpp":41:13)
#loc32 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE129_listen_socket_62a.cpp":43:13)
#loc33 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE129_listen_socket_62a.cpp":46:13)
#loc34 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE129_listen_socket_62a.cpp":43:21)
#loc35 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE129_listen_socket_62a.cpp":43:17)
#loc36 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE129_listen_socket_62a.cpp":43:24)
#loc37 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE129_listen_socket_62a.cpp":43:28)
#loc38 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE129_listen_socket_62a.cpp":45:37)
#loc39 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE129_listen_socket_62a.cpp":45:30)
#loc40 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE129_listen_socket_62a.cpp":45:17)
#loc41 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE129_listen_socket_62a.cpp":43:33)
#loc42 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE129_listen_socket_62a.cpp":43:32)
#loc43 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE129_listen_socket_62a.cpp":50:13)
#loc44 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE129_listen_socket_62a.cpp":60:1)
#loc45 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE129_listen_socket_62a.cpp":60:29)
#loc46 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE129_listen_socket_62a.cpp":62:1)
#loc47 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE129_listen_socket_62a.cpp":87:1)
#loc48 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE129_listen_socket_62a.cpp":64:5)
#loc49 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE129_listen_socket_62a.cpp":64:9)
#loc50 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE129_listen_socket_62a.cpp":66:13)
#loc51 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE129_listen_socket_62a.cpp":66:12)
#loc52 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE129_listen_socket_62a.cpp":66:5)
#loc53 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE129_listen_socket_62a.cpp":67:5)
#loc54 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE129_listen_socket_62a.cpp":68:5)
#loc55 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE129_listen_socket_62a.cpp":86:5)
#loc56 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE129_listen_socket_62a.cpp":69:9)
#loc57 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE129_listen_socket_62a.cpp":69:13)
#loc58 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE129_listen_socket_62a.cpp":70:9)
#loc59 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE129_listen_socket_62a.cpp":70:30)
#loc60 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE129_listen_socket_62a.cpp":73:9)
#loc61 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE129_listen_socket_62a.cpp":85:9)
#loc62 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE129_listen_socket_62a.cpp":73:13)
#loc63 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE129_listen_socket_62a.cpp":73:21)
#loc64 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE129_listen_socket_62a.cpp":74:9)
#loc65 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE129_listen_socket_62a.cpp":81:9)
#loc66 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE129_listen_socket_62a.cpp":83:9)
#loc67 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE129_listen_socket_62a.cpp":75:28)
#loc68 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE129_listen_socket_62a.cpp":75:20)
#loc69 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE129_listen_socket_62a.cpp":75:13)
#loc70 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE129_listen_socket_62a.cpp":77:13)
#loc71 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE129_listen_socket_62a.cpp":80:13)
#loc72 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE129_listen_socket_62a.cpp":77:21)
#loc73 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE129_listen_socket_62a.cpp":77:17)
#loc74 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE129_listen_socket_62a.cpp":77:24)
#loc75 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE129_listen_socket_62a.cpp":77:28)
#loc76 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE129_listen_socket_62a.cpp":79:37)
#loc77 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE129_listen_socket_62a.cpp":79:30)
#loc78 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE129_listen_socket_62a.cpp":79:17)
#loc79 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE129_listen_socket_62a.cpp":77:33)
#loc80 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE129_listen_socket_62a.cpp":77:32)
#loc81 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE129_listen_socket_62a.cpp":84:23)
#loc82 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE129_listen_socket_62a.cpp":84:13)
#loc83 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE129_listen_socket_62a.cpp":90:1)
#loc84 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE129_listen_socket_62a.cpp":90:29)
#loc85 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE129_listen_socket_62a.cpp":113:23)
#loc86 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE129_listen_socket_62a.cpp":92:1)
#loc87 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE129_listen_socket_62a.cpp":116:1)
#loc88 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE129_listen_socket_62a.cpp":94:5)
#loc89 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE129_listen_socket_62a.cpp":94:9)
#loc90 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE129_listen_socket_62a.cpp":96:13)
#loc91 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE129_listen_socket_62a.cpp":96:12)
#loc92 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE129_listen_socket_62a.cpp":96:5)
#loc93 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE129_listen_socket_62a.cpp":97:5)
#loc94 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE129_listen_socket_62a.cpp":98:5)
#loc95 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE129_listen_socket_62a.cpp":115:5)
#loc96 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE129_listen_socket_62a.cpp":99:9)
#loc97 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE129_listen_socket_62a.cpp":99:13)
#loc98 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE129_listen_socket_62a.cpp":100:9)
#loc99 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE129_listen_socket_62a.cpp":100:30)
#loc100 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE129_listen_socket_62a.cpp":102:9)
#loc101 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE129_listen_socket_62a.cpp":114:9)
#loc102 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE129_listen_socket_62a.cpp":102:13)
#loc103 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE129_listen_socket_62a.cpp":102:21)
#loc104 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE129_listen_socket_62a.cpp":102:23)
#loc105 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE129_listen_socket_62a.cpp":102:26)
#loc106 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE129_listen_socket_62a.cpp":102:34)
#loc107 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE129_listen_socket_62a.cpp":102:36)
#loc108 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE129_listen_socket_62a.cpp":103:9)
#loc109 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE129_listen_socket_62a.cpp":110:9)
#loc110 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE129_listen_socket_62a.cpp":112:9)
#loc111 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE129_listen_socket_62a.cpp":104:28)
#loc112 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE129_listen_socket_62a.cpp":104:20)
#loc113 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE129_listen_socket_62a.cpp":104:13)
#loc114 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE129_listen_socket_62a.cpp":106:13)
#loc115 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE129_listen_socket_62a.cpp":109:13)
#loc116 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE129_listen_socket_62a.cpp":106:21)
#loc117 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE129_listen_socket_62a.cpp":106:17)
#loc118 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE129_listen_socket_62a.cpp":106:24)
#loc119 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE129_listen_socket_62a.cpp":106:28)
#loc120 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE129_listen_socket_62a.cpp":108:37)
#loc121 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE129_listen_socket_62a.cpp":108:30)
#loc122 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE129_listen_socket_62a.cpp":108:17)
#loc123 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE129_listen_socket_62a.cpp":106:33)
#loc124 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE129_listen_socket_62a.cpp":106:32)
#loc125 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE129_listen_socket_62a.cpp":113:13)
#loc126 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE129_listen_socket_62a.cpp":118:1)
#loc127 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE129_listen_socket_62a.cpp":122:1)
#loc128 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE129_listen_socket_62a.cpp":120:5)
#loc129 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE129_listen_socket_62a.cpp":121:5)
#loc130 = loc(fused[#loc1, #loc2])
#loc131 = loc(fused[#loc3, #loc4])
#loc132 = loc(fused[#loc5, #loc6])
#loc133 = loc(fused[#loc8, #loc9])
#loc134 = loc(fused[#loc10, #loc11])
#loc135 = loc(fused[#loc14, #loc12])
#loc136 = loc(fused[#loc16, #loc17])
#loc137 = loc(fused[#loc18, #loc19])
#loc138 = loc(fused[#loc20, #loc21])
#loc139 = loc(fused[#loc22, #loc23])
#loc140 = loc(fused[#loc24, #loc25])
#loc141 = loc(fused[#loc26, #loc27, #loc28, #loc23])
#loc142 = loc(fused[#loc31, #loc29])
#loc143 = loc(fused[#loc32, #loc33])
#loc144 = loc(fused[#loc35, #loc34])
#loc145 = loc(fused[#loc36, #loc37])
#loc146 = loc(fused[#loc42, #loc41])
#loc147 = loc(fused[#loc44, #loc45])
#loc148 = loc(fused[#loc46, #loc47])
#loc149 = loc(fused[#loc48, #loc49])
#loc150 = loc(fused[#loc52, #loc50])
#loc151 = loc(fused[#loc54, #loc55])
#loc152 = loc(fused[#loc56, #loc57])
#loc153 = loc(fused[#loc58, #loc59])
#loc154 = loc(fused[#loc60, #loc61])
#loc155 = loc(fused[#loc62, #loc63])
#loc156 = loc(fused[#loc64, #loc65, #loc66, #loc61])
#loc157 = loc(fused[#loc69, #loc67])
#loc158 = loc(fused[#loc70, #loc71])
#loc159 = loc(fused[#loc73, #loc72])
#loc160 = loc(fused[#loc74, #loc75])
#loc161 = loc(fused[#loc80, #loc79])
#loc162 = loc(fused[#loc83, #loc84])
#loc163 = loc(fused[#loc86, #loc87])
#loc164 = loc(fused[#loc88, #loc89])
#loc165 = loc(fused[#loc92, #loc90])
#loc166 = loc(fused[#loc94, #loc95])
#loc167 = loc(fused[#loc96, #loc97])
#loc168 = loc(fused[#loc98, #loc99])
#loc169 = loc(fused[#loc100, #loc101])
#loc170 = loc(fused[#loc102, #loc103])
#loc171 = loc(fused[#loc105, #loc107])
#loc172 = loc(fused[#loc108, #loc109, #loc110, #loc101])
#loc173 = loc(fused[#loc113, #loc111])
#loc174 = loc(fused[#loc114, #loc115])
#loc175 = loc(fused[#loc117, #loc116])
#loc176 = loc(fused[#loc118, #loc119])
#loc177 = loc(fused[#loc124, #loc123])
#loc178 = loc(fused[#loc126, #loc127])
