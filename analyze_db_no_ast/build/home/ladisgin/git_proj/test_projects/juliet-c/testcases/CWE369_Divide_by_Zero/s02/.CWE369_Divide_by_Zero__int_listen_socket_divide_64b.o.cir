!s32i = !cir.int<s, 32>
!s8i = !cir.int<s, 8>
!void = !cir.void
#fn_attr = #cir<extra({inline = #cir.inline<no>, nothrow = #cir.nothrow, optnone = #cir.optnone})>
#loc5 = loc("CWE369_Divide_by_Zero__int_listen_socket_divide_64b.c":44:66)
#loc6 = loc("CWE369_Divide_by_Zero__int_listen_socket_divide_64b.c":44:73)
#loc19 = loc("CWE369_Divide_by_Zero__int_listen_socket_divide_64b.c":59:70)
#loc20 = loc("CWE369_Divide_by_Zero__int_listen_socket_divide_64b.c":59:77)
#loc36 = loc("CWE369_Divide_by_Zero__int_listen_socket_divide_64b.c":70:70)
#loc37 = loc("CWE369_Divide_by_Zero__int_listen_socket_divide_64b.c":70:77)
#loc59 = loc(fused[#loc5, #loc6])
#loc64 = loc(fused[#loc19, #loc20])
#loc70 = loc(fused[#loc36, #loc37])
module @"/home/ladisgin/git_proj/test_projects/juliet-c/testcases/CWE369_Divide_by_Zero/s02/CWE369_Divide_by_Zero__int_listen_socket_divide_64b.c" attributes {cir.lang = #cir.lang<c>, cir.sob = #cir.signed_overflow_behavior<undefined>, cir.triple = "x86_64-unknown-linux-gnu", dlti.dl_spec = #dlti.dl_spec<#dlti.dl_entry<f128, dense<128> : vector<2xi64>>, #dlti.dl_entry<!llvm.ptr<270>, dense<32> : vector<4xi64>>, #dlti.dl_entry<f64, dense<64> : vector<2xi64>>, #dlti.dl_entry<f16, dense<16> : vector<2xi64>>, #dlti.dl_entry<i32, dense<32> : vector<2xi64>>, #dlti.dl_entry<i16, dense<16> : vector<2xi64>>, #dlti.dl_entry<i8, dense<8> : vector<2xi64>>, #dlti.dl_entry<i1, dense<8> : vector<2xi64>>, #dlti.dl_entry<!llvm.ptr, dense<64> : vector<4xi64>>, #dlti.dl_entry<f80, dense<128> : vector<2xi64>>, #dlti.dl_entry<i128, dense<128> : vector<2xi64>>, #dlti.dl_entry<i64, dense<64> : vector<2xi64>>, #dlti.dl_entry<!llvm.ptr<271>, dense<32> : vector<4xi64>>, #dlti.dl_entry<!llvm.ptr<272>, dense<64> : vector<4xi64>>, #dlti.dl_entry<"dlti.endianness", "little">, #dlti.dl_entry<"dlti.stack_alignment", 128 : i64>>, llvm.data_layout = "e-m:e-p270:32:32-p271:32:32-p272:64:64-i64:64-i128:128-f80:128-n8:16:32:64-S128"} {
  cir.func private  @printIntLine(!s32i) loc(#loc57)
  cir.func  @CWE369_Divide_by_Zero__int_listen_socket_divide_64b_badSink(%arg0: !cir.ptr<!void> loc(fused[#loc5, #loc6])) extra(#fn_attr) {
    %0 = cir.alloca !cir.ptr<!void>, !cir.ptr<!cir.ptr<!void>>, ["dataVoidPtr", init] {alignment = 8 : i64} loc(#loc59)
    %1 = cir.alloca !cir.ptr<!s32i>, !cir.ptr<!cir.ptr<!s32i>>, ["dataPtr", init] {alignment = 8 : i64} loc(#loc60)
    %2 = cir.alloca !s32i, !cir.ptr<!s32i>, ["data", init] {alignment = 4 : i64} loc(#loc61)
    cir.store %arg0, %0 : !cir.ptr<!void>, !cir.ptr<!cir.ptr<!void>> loc(#loc11)
    %3 = cir.load %0 : !cir.ptr<!cir.ptr<!void>>, !cir.ptr<!void> loc(#loc8)
    %4 = cir.cast(bitcast, %3 : !cir.ptr<!void>), !cir.ptr<!s32i> loc(#loc8)
    cir.store %4, %1 : !cir.ptr<!s32i>, !cir.ptr<!cir.ptr<!s32i>> loc(#loc60)
    %5 = cir.load deref %1 : !cir.ptr<!cir.ptr<!s32i>>, !cir.ptr<!s32i> loc(#loc12)
    %6 = cir.load %5 : !cir.ptr<!s32i>, !s32i loc(#loc13)
    cir.store %6, %2 : !s32i, !cir.ptr<!s32i> loc(#loc61)
    %7 = cir.const #cir.int<100> : !s32i loc(#loc14)
    %8 = cir.load %2 : !cir.ptr<!s32i>, !s32i loc(#loc15)
    %9 = cir.binop(div, %7, %8) : !s32i loc(#loc62)
    cir.call @printIntLine(%9) : (!s32i) -> () loc(#loc16)
    cir.return loc(#loc4)
  } loc(#loc58)
  cir.func  @CWE369_Divide_by_Zero__int_listen_socket_divide_64b_goodG2BSink(%arg0: !cir.ptr<!void> loc(fused[#loc19, #loc20])) extra(#fn_attr) {
    %0 = cir.alloca !cir.ptr<!void>, !cir.ptr<!cir.ptr<!void>>, ["dataVoidPtr", init] {alignment = 8 : i64} loc(#loc64)
    %1 = cir.alloca !cir.ptr<!s32i>, !cir.ptr<!cir.ptr<!s32i>>, ["dataPtr", init] {alignment = 8 : i64} loc(#loc65)
    %2 = cir.alloca !s32i, !cir.ptr<!s32i>, ["data", init] {alignment = 4 : i64} loc(#loc66)
    cir.store %arg0, %0 : !cir.ptr<!void>, !cir.ptr<!cir.ptr<!void>> loc(#loc25)
    %3 = cir.load %0 : !cir.ptr<!cir.ptr<!void>>, !cir.ptr<!void> loc(#loc22)
    %4 = cir.cast(bitcast, %3 : !cir.ptr<!void>), !cir.ptr<!s32i> loc(#loc22)
    cir.store %4, %1 : !cir.ptr<!s32i>, !cir.ptr<!cir.ptr<!s32i>> loc(#loc65)
    %5 = cir.load deref %1 : !cir.ptr<!cir.ptr<!s32i>>, !cir.ptr<!s32i> loc(#loc26)
    %6 = cir.load %5 : !cir.ptr<!s32i>, !s32i loc(#loc27)
    cir.store %6, %2 : !s32i, !cir.ptr<!s32i> loc(#loc66)
    %7 = cir.const #cir.int<100> : !s32i loc(#loc28)
    %8 = cir.load %2 : !cir.ptr<!s32i>, !s32i loc(#loc29)
    %9 = cir.binop(div, %7, %8) : !s32i loc(#loc67)
    cir.call @printIntLine(%9) : (!s32i) -> () loc(#loc30)
    cir.return loc(#loc18)
  } loc(#loc63)
  cir.func private  @printLine(!cir.ptr<!s8i>) loc(#loc68)
  cir.global "private"  constant internal dsolocal @".str" = #cir.const_array<"This would result in a divide by zero\00" : !cir.array<!s8i x 38>> : !cir.array<!s8i x 38> {alignment = 1 : i64} loc(#loc33)
  cir.func  @CWE369_Divide_by_Zero__int_listen_socket_divide_64b_goodB2GSink(%arg0: !cir.ptr<!void> loc(fused[#loc36, #loc37])) extra(#fn_attr) {
    %0 = cir.alloca !cir.ptr<!void>, !cir.ptr<!cir.ptr<!void>>, ["dataVoidPtr", init] {alignment = 8 : i64} loc(#loc70)
    %1 = cir.alloca !cir.ptr<!s32i>, !cir.ptr<!cir.ptr<!s32i>>, ["dataPtr", init] {alignment = 8 : i64} loc(#loc71)
    %2 = cir.alloca !s32i, !cir.ptr<!s32i>, ["data", init] {alignment = 4 : i64} loc(#loc72)
    cir.store %arg0, %0 : !cir.ptr<!void>, !cir.ptr<!cir.ptr<!void>> loc(#loc42)
    %3 = cir.load %0 : !cir.ptr<!cir.ptr<!void>>, !cir.ptr<!void> loc(#loc39)
    %4 = cir.cast(bitcast, %3 : !cir.ptr<!void>), !cir.ptr<!s32i> loc(#loc39)
    cir.store %4, %1 : !cir.ptr<!s32i>, !cir.ptr<!cir.ptr<!s32i>> loc(#loc71)
    %5 = cir.load deref %1 : !cir.ptr<!cir.ptr<!s32i>>, !cir.ptr<!s32i> loc(#loc43)
    %6 = cir.load %5 : !cir.ptr<!s32i>, !s32i loc(#loc44)
    cir.store %6, %2 : !s32i, !cir.ptr<!s32i> loc(#loc72)
    cir.scope {
      %7 = cir.load %2 : !cir.ptr<!s32i>, !s32i loc(#loc47)
      %8 = cir.const #cir.int<0> : !s32i loc(#loc48)
      %9 = cir.cmp(ne, %7, %8) : !s32i, !s32i loc(#loc74)
      %10 = cir.cast(int_to_bool, %9 : !s32i), !cir.bool loc(#loc49)
      cir.if %10 {
        %11 = cir.const #cir.int<100> : !s32i loc(#loc53)
        %12 = cir.load %2 : !cir.ptr<!s32i>, !s32i loc(#loc54)
        %13 = cir.binop(div, %11, %12) : !s32i loc(#loc76)
        cir.call @printIntLine(%13) : (!s32i) -> () loc(#loc55)
      } else {
        %11 = cir.get_global @".str" : !cir.ptr<!cir.array<!s8i x 38>> loc(#loc33)
        %12 = cir.cast(array_to_ptrdecay, %11 : !cir.ptr<!cir.array<!s8i x 38>>), !cir.ptr<!s8i> loc(#loc33)
        cir.call @printLine(%12) : (!cir.ptr<!s8i>) -> () loc(#loc56)
      } loc(#loc75)
    } loc(#loc73)
    cir.return loc(#loc35)
  } loc(#loc69)
} loc(#loc)
#loc = loc("/home/ladisgin/git_proj/test_projects/juliet-c/testcases/CWE369_Divide_by_Zero/s02/CWE369_Divide_by_Zero__int_listen_socket_divide_64b.c":0:0)
#loc1 = loc("../../../testcasesupport/std_testcase_io.h":18:1)
#loc2 = loc("../../../testcasesupport/std_testcase_io.h":18:33)
#loc3 = loc("CWE369_Divide_by_Zero__int_listen_socket_divide_64b.c":44:1)
#loc4 = loc("CWE369_Divide_by_Zero__int_listen_socket_divide_64b.c":52:1)
#loc7 = loc("CWE369_Divide_by_Zero__int_listen_socket_divide_64b.c":47:5)
#loc8 = loc("CWE369_Divide_by_Zero__int_listen_socket_divide_64b.c":47:28)
#loc9 = loc("CWE369_Divide_by_Zero__int_listen_socket_divide_64b.c":49:5)
#loc10 = loc("CWE369_Divide_by_Zero__int_listen_socket_divide_64b.c":49:25)
#loc11 = loc("CWE369_Divide_by_Zero__int_listen_socket_divide_64b.c":45:1)
#loc12 = loc("CWE369_Divide_by_Zero__int_listen_socket_divide_64b.c":49:18)
#loc13 = loc("CWE369_Divide_by_Zero__int_listen_socket_divide_64b.c":49:17)
#loc14 = loc("CWE369_Divide_by_Zero__int_listen_socket_divide_64b.c":51:18)
#loc15 = loc("CWE369_Divide_by_Zero__int_listen_socket_divide_64b.c":51:24)
#loc16 = loc("CWE369_Divide_by_Zero__int_listen_socket_divide_64b.c":51:5)
#loc17 = loc("CWE369_Divide_by_Zero__int_listen_socket_divide_64b.c":59:1)
#loc18 = loc("CWE369_Divide_by_Zero__int_listen_socket_divide_64b.c":67:1)
#loc21 = loc("CWE369_Divide_by_Zero__int_listen_socket_divide_64b.c":62:5)
#loc22 = loc("CWE369_Divide_by_Zero__int_listen_socket_divide_64b.c":62:28)
#loc23 = loc("CWE369_Divide_by_Zero__int_listen_socket_divide_64b.c":64:5)
#loc24 = loc("CWE369_Divide_by_Zero__int_listen_socket_divide_64b.c":64:25)
#loc25 = loc("CWE369_Divide_by_Zero__int_listen_socket_divide_64b.c":60:1)
#loc26 = loc("CWE369_Divide_by_Zero__int_listen_socket_divide_64b.c":64:18)
#loc27 = loc("CWE369_Divide_by_Zero__int_listen_socket_divide_64b.c":64:17)
#loc28 = loc("CWE369_Divide_by_Zero__int_listen_socket_divide_64b.c":66:18)
#loc29 = loc("CWE369_Divide_by_Zero__int_listen_socket_divide_64b.c":66:24)
#loc30 = loc("CWE369_Divide_by_Zero__int_listen_socket_divide_64b.c":66:5)
#loc31 = loc("../../../testcasesupport/std_testcase_io.h":14:1)
#loc32 = loc("../../../testcasesupport/std_testcase_io.h":14:33)
#loc33 = loc("CWE369_Divide_by_Zero__int_listen_socket_divide_64b.c":83:19)
#loc34 = loc("CWE369_Divide_by_Zero__int_listen_socket_divide_64b.c":70:1)
#loc35 = loc("CWE369_Divide_by_Zero__int_listen_socket_divide_64b.c":85:1)
#loc38 = loc("CWE369_Divide_by_Zero__int_listen_socket_divide_64b.c":73:5)
#loc39 = loc("CWE369_Divide_by_Zero__int_listen_socket_divide_64b.c":73:28)
#loc40 = loc("CWE369_Divide_by_Zero__int_listen_socket_divide_64b.c":75:5)
#loc41 = loc("CWE369_Divide_by_Zero__int_listen_socket_divide_64b.c":75:25)
#loc42 = loc("CWE369_Divide_by_Zero__int_listen_socket_divide_64b.c":71:1)
#loc43 = loc("CWE369_Divide_by_Zero__int_listen_socket_divide_64b.c":75:18)
#loc44 = loc("CWE369_Divide_by_Zero__int_listen_socket_divide_64b.c":75:17)
#loc45 = loc("CWE369_Divide_by_Zero__int_listen_socket_divide_64b.c":77:5)
#loc46 = loc("CWE369_Divide_by_Zero__int_listen_socket_divide_64b.c":84:5)
#loc47 = loc("CWE369_Divide_by_Zero__int_listen_socket_divide_64b.c":77:9)
#loc48 = loc("CWE369_Divide_by_Zero__int_listen_socket_divide_64b.c":77:17)
#loc49 = loc("CWE369_Divide_by_Zero__int_listen_socket_divide_64b.c":77:14)
#loc50 = loc("CWE369_Divide_by_Zero__int_listen_socket_divide_64b.c":78:5)
#loc51 = loc("CWE369_Divide_by_Zero__int_listen_socket_divide_64b.c":80:5)
#loc52 = loc("CWE369_Divide_by_Zero__int_listen_socket_divide_64b.c":82:5)
#loc53 = loc("CWE369_Divide_by_Zero__int_listen_socket_divide_64b.c":79:22)
#loc54 = loc("CWE369_Divide_by_Zero__int_listen_socket_divide_64b.c":79:28)
#loc55 = loc("CWE369_Divide_by_Zero__int_listen_socket_divide_64b.c":79:9)
#loc56 = loc("CWE369_Divide_by_Zero__int_listen_socket_divide_64b.c":83:9)
#loc57 = loc(fused[#loc1, #loc2])
#loc58 = loc(fused[#loc3, #loc4])
#loc60 = loc(fused[#loc7, #loc8])
#loc61 = loc(fused[#loc9, #loc10])
#loc62 = loc(fused[#loc14, #loc15])
#loc63 = loc(fused[#loc17, #loc18])
#loc65 = loc(fused[#loc21, #loc22])
#loc66 = loc(fused[#loc23, #loc24])
#loc67 = loc(fused[#loc28, #loc29])
#loc68 = loc(fused[#loc31, #loc32])
#loc69 = loc(fused[#loc34, #loc35])
#loc71 = loc(fused[#loc38, #loc39])
#loc72 = loc(fused[#loc40, #loc41])
#loc73 = loc(fused[#loc45, #loc46])
#loc74 = loc(fused[#loc47, #loc48])
#loc75 = loc(fused[#loc50, #loc51, #loc52, #loc46])
#loc76 = loc(fused[#loc53, #loc54])
