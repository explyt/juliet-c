!s32i = !cir.int<s, 32>
!s64i = !cir.int<s, 64>
!s8i = !cir.int<s, 8>
!ty__IO_codecvt = !cir.struct<struct "_IO_codecvt" incomplete>
!ty__IO_marker = !cir.struct<struct "_IO_marker" incomplete>
!ty__IO_wide_data = !cir.struct<struct "_IO_wide_data" incomplete>
!u16i = !cir.int<u, 16>
!u64i = !cir.int<u, 64>
!void = !cir.void
#fn_attr = #cir<extra({nothrow = #cir.nothrow})>
#fn_attr1 = #cir<extra({inline = #cir.inline<no>, nothrow = #cir.nothrow, optnone = #cir.optnone})>
!ty__IO_FILE = !cir.struct<struct "_IO_FILE" {!s32i, !cir.ptr<!s8i>, !cir.ptr<!s8i>, !cir.ptr<!s8i>, !cir.ptr<!s8i>, !cir.ptr<!s8i>, !cir.ptr<!s8i>, !cir.ptr<!s8i>, !cir.ptr<!s8i>, !cir.ptr<!s8i>, !cir.ptr<!s8i>, !cir.ptr<!s8i>, !cir.ptr<!ty__IO_marker>, !cir.ptr<!cir.struct<struct "_IO_FILE">>, !s32i, !s32i, !s64i, !u16i, !s8i, !cir.array<!s8i x 1>, !cir.ptr<!void>, !s64i, !cir.ptr<!ty__IO_codecvt>, !cir.ptr<!ty__IO_wide_data>, !cir.ptr<!cir.struct<struct "_IO_FILE">>, !cir.ptr<!void>, !u64i, !s32i, !cir.array<!s8i x 20>} #cir.record.decl.ast>
module @"/home/ladisgin/git_proj/test_projects/juliet-c/testcases/CWE369_Divide_by_Zero/s01/CWE369_Divide_by_Zero__int_fgets_divide_18.c" attributes {cir.lang = #cir.lang<c>, cir.sob = #cir.signed_overflow_behavior<undefined>, cir.triple = "x86_64-unknown-linux-gnu", dlti.dl_spec = #dlti.dl_spec<#dlti.dl_entry<f16, dense<16> : vector<2xi64>>, #dlti.dl_entry<i32, dense<32> : vector<2xi64>>, #dlti.dl_entry<f128, dense<128> : vector<2xi64>>, #dlti.dl_entry<!llvm.ptr<270>, dense<32> : vector<4xi64>>, #dlti.dl_entry<f64, dense<64> : vector<2xi64>>, #dlti.dl_entry<!llvm.ptr<271>, dense<32> : vector<4xi64>>, #dlti.dl_entry<!llvm.ptr<272>, dense<64> : vector<4xi64>>, #dlti.dl_entry<i128, dense<128> : vector<2xi64>>, #dlti.dl_entry<i64, dense<64> : vector<2xi64>>, #dlti.dl_entry<f80, dense<128> : vector<2xi64>>, #dlti.dl_entry<!llvm.ptr, dense<64> : vector<4xi64>>, #dlti.dl_entry<i1, dense<8> : vector<2xi64>>, #dlti.dl_entry<i16, dense<16> : vector<2xi64>>, #dlti.dl_entry<i8, dense<8> : vector<2xi64>>, #dlti.dl_entry<"dlti.endianness", "little">, #dlti.dl_entry<"dlti.stack_alignment", 128 : i64>>, llvm.data_layout = "e-m:e-p270:32:32-p271:32:32-p272:64:64-i64:64-i128:128-f80:128-n8:16:32:64-S128"} {
  cir.func private  @fgets(!cir.ptr<!s8i>, !s32i, !cir.ptr<!ty__IO_FILE>) -> !cir.ptr<!s8i> loc(#loc115)
  cir.global "private"  external @stdin : !cir.ptr<!ty__IO_FILE> {alignment = 8 : i64} loc(#loc116)
  cir.func private  @atoi(!cir.ptr<!s8i>) -> !s32i extra(#fn_attr) loc(#loc117)
  cir.func private  @printLine(!cir.ptr<!s8i>) loc(#loc118)
  cir.global "private"  constant internal dsolocal @".str" = #cir.const_array<"fgets() failed.\00" : !cir.array<!s8i x 16>> : !cir.array<!s8i x 16> {alignment = 1 : i64} loc(#loc9)
  cir.func private  @printIntLine(!s32i) loc(#loc119)
  cir.func no_proto  @CWE369_Divide_by_Zero__int_fgets_divide_18_bad() extra(#fn_attr1) {
    %0 = cir.alloca !s32i, !cir.ptr<!s32i>, ["data"] {alignment = 4 : i64} loc(#loc121)
    %1 = cir.alloca !cir.array<!s8i x 14>, !cir.ptr<!cir.array<!s8i x 14>>, ["inputBuffer"] {alignment = 1 : i64} loc(#loc122)
    %2 = cir.const #cir.int<1> : !s32i loc(#loc18)
    %3 = cir.unary(minus, %2) : !s32i, !s32i loc(#loc19)
    cir.store %3, %0 : !s32i, !cir.ptr<!s32i> loc(#loc123)
    cir.goto "source" loc(#loc124)
  ^bb1:  // no predecessors
    cir.label "source" loc(#loc23)
    %4 = cir.const #cir.zero : !cir.array<!s8i x 14> loc(#loc122)
    cir.store %4, %1 : !cir.array<!s8i x 14>, !cir.ptr<!cir.array<!s8i x 14>> loc(#loc122)
    cir.scope {
      %8 = cir.cast(array_to_ptrdecay, %1 : !cir.ptr<!cir.array<!s8i x 14>>), !cir.ptr<!s8i> loc(#loc26)
      %9 = cir.const #cir.int<3> : !s32i loc(#loc27)
      %10 = cir.cast(integral, %9 : !s32i), !u64i loc(#loc27)
      %11 = cir.const #cir.int<4> : !u64i loc(#loc27)
      %12 = cir.binop(mul, %10, %11) : !u64i loc(#loc27)
      %13 = cir.const #cir.int<2> : !s32i loc(#loc27)
      %14 = cir.cast(integral, %13 : !s32i), !u64i loc(#loc27)
      %15 = cir.binop(add, %12, %14) : !u64i loc(#loc27)
      %16 = cir.cast(integral, %15 : !u64i), !s32i loc(#loc27)
      %17 = cir.get_global @stdin : !cir.ptr<!cir.ptr<!ty__IO_FILE>> loc(#loc116)
      %18 = cir.load %17 : !cir.ptr<!cir.ptr<!ty__IO_FILE>>, !cir.ptr<!ty__IO_FILE> loc(#loc28)
      %19 = cir.call @fgets(%8, %16, %18) : (!cir.ptr<!s8i>, !s32i, !cir.ptr<!ty__IO_FILE>) -> !cir.ptr<!s8i> loc(#loc29)
      %20 = cir.const #cir.ptr<null> : !cir.ptr<!void> loc(#loc30)
      %21 = cir.cast(bitcast, %20 : !cir.ptr<!void>), !cir.ptr<!s8i> loc(#loc30)
      %22 = cir.cmp(ne, %19, %21) : !cir.ptr<!s8i>, !s32i loc(#loc126)
      %23 = cir.cast(int_to_bool, %22 : !s32i), !cir.bool loc(#loc31)
      cir.if %23 {
        %24 = cir.cast(array_to_ptrdecay, %1 : !cir.ptr<!cir.array<!s8i x 14>>), !cir.ptr<!s8i> loc(#loc35)
        %25 = cir.call @atoi(%24) : (!cir.ptr<!s8i>) -> !s32i extra(#fn_attr) loc(#loc36)
        cir.store %25, %0 : !s32i, !cir.ptr<!s32i> loc(#loc128)
      } else {
        %24 = cir.get_global @".str" : !cir.ptr<!cir.array<!s8i x 16>> loc(#loc9)
        %25 = cir.cast(array_to_ptrdecay, %24 : !cir.ptr<!cir.array<!s8i x 16>>), !cir.ptr<!s8i> loc(#loc9)
        cir.call @printLine(%25) : (!cir.ptr<!s8i>) -> () loc(#loc39)
      } loc(#loc127)
    } loc(#loc125)
    cir.goto "sink" loc(#loc129)
  ^bb2:  // no predecessors
    cir.label "sink" loc(#loc42)
    %5 = cir.const #cir.int<100> : !s32i loc(#loc43)
    %6 = cir.load %0 : !cir.ptr<!s32i>, !s32i loc(#loc44)
    %7 = cir.binop(div, %5, %6) : !s32i loc(#loc130)
    cir.call @printIntLine(%7) : (!s32i) -> () loc(#loc45)
    cir.return loc(#loc13)
  } loc(#loc120)
  cir.func no_proto  @CWE369_Divide_by_Zero__int_fgets_divide_18_good() extra(#fn_attr1) {
    %0 = cir.get_global @goodB2G : !cir.ptr<!cir.func<!void ()>> loc(#loc132)
    cir.call %0() : (!cir.ptr<!cir.func<!void ()>>) -> () loc(#loc48)
    %1 = cir.get_global @goodG2B : !cir.ptr<!cir.func<!void ()>> loc(#loc133)
    cir.call %1() : (!cir.ptr<!cir.func<!void ()>>) -> () loc(#loc50)
    cir.return loc(#loc47)
  } loc(#loc131)
  cir.global "private"  constant internal dsolocal @".str1" = #cir.const_array<"This would result in a divide by zero\00" : !cir.array<!s8i x 38>> : !cir.array<!s8i x 38> {alignment = 1 : i64} loc(#loc52)
  cir.func no_proto internal private  @goodB2G() extra(#fn_attr1) {
    %0 = cir.alloca !s32i, !cir.ptr<!s32i>, ["data"] {alignment = 4 : i64} loc(#loc135)
    %1 = cir.alloca !cir.array<!s8i x 14>, !cir.ptr<!cir.array<!s8i x 14>>, ["inputBuffer"] {alignment = 1 : i64} loc(#loc136)
    %2 = cir.const #cir.int<1> : !s32i loc(#loc59)
    %3 = cir.unary(minus, %2) : !s32i, !s32i loc(#loc60)
    cir.store %3, %0 : !s32i, !cir.ptr<!s32i> loc(#loc137)
    cir.goto "source" loc(#loc138)
  ^bb1:  // no predecessors
    cir.label "source" loc(#loc64)
    %4 = cir.const #cir.zero : !cir.array<!s8i x 14> loc(#loc136)
    cir.store %4, %1 : !cir.array<!s8i x 14>, !cir.ptr<!cir.array<!s8i x 14>> loc(#loc136)
    cir.scope {
      %5 = cir.cast(array_to_ptrdecay, %1 : !cir.ptr<!cir.array<!s8i x 14>>), !cir.ptr<!s8i> loc(#loc67)
      %6 = cir.const #cir.int<3> : !s32i loc(#loc68)
      %7 = cir.cast(integral, %6 : !s32i), !u64i loc(#loc68)
      %8 = cir.const #cir.int<4> : !u64i loc(#loc68)
      %9 = cir.binop(mul, %7, %8) : !u64i loc(#loc68)
      %10 = cir.const #cir.int<2> : !s32i loc(#loc68)
      %11 = cir.cast(integral, %10 : !s32i), !u64i loc(#loc68)
      %12 = cir.binop(add, %9, %11) : !u64i loc(#loc68)
      %13 = cir.cast(integral, %12 : !u64i), !s32i loc(#loc68)
      %14 = cir.get_global @stdin : !cir.ptr<!cir.ptr<!ty__IO_FILE>> loc(#loc116)
      %15 = cir.load %14 : !cir.ptr<!cir.ptr<!ty__IO_FILE>>, !cir.ptr<!ty__IO_FILE> loc(#loc69)
      %16 = cir.call @fgets(%5, %13, %15) : (!cir.ptr<!s8i>, !s32i, !cir.ptr<!ty__IO_FILE>) -> !cir.ptr<!s8i> loc(#loc70)
      %17 = cir.const #cir.ptr<null> : !cir.ptr<!void> loc(#loc71)
      %18 = cir.cast(bitcast, %17 : !cir.ptr<!void>), !cir.ptr<!s8i> loc(#loc71)
      %19 = cir.cmp(ne, %16, %18) : !cir.ptr<!s8i>, !s32i loc(#loc140)
      %20 = cir.cast(int_to_bool, %19 : !s32i), !cir.bool loc(#loc72)
      cir.if %20 {
        %21 = cir.cast(array_to_ptrdecay, %1 : !cir.ptr<!cir.array<!s8i x 14>>), !cir.ptr<!s8i> loc(#loc76)
        %22 = cir.call @atoi(%21) : (!cir.ptr<!s8i>) -> !s32i extra(#fn_attr) loc(#loc77)
        cir.store %22, %0 : !s32i, !cir.ptr<!s32i> loc(#loc142)
      } else {
        %21 = cir.get_global @".str" : !cir.ptr<!cir.array<!s8i x 16>> loc(#loc80)
        %22 = cir.cast(array_to_ptrdecay, %21 : !cir.ptr<!cir.array<!s8i x 16>>), !cir.ptr<!s8i> loc(#loc80)
        cir.call @printLine(%22) : (!cir.ptr<!s8i>) -> () loc(#loc81)
      } loc(#loc141)
    } loc(#loc139)
    cir.goto "sink" loc(#loc143)
  ^bb2:  // no predecessors
    cir.label "sink" loc(#loc84)
    cir.scope {
      %5 = cir.load %0 : !cir.ptr<!s32i>, !s32i loc(#loc87)
      %6 = cir.const #cir.int<0> : !s32i loc(#loc88)
      %7 = cir.cmp(ne, %5, %6) : !s32i, !s32i loc(#loc145)
      %8 = cir.cast(int_to_bool, %7 : !s32i), !cir.bool loc(#loc89)
      cir.if %8 {
        %9 = cir.const #cir.int<100> : !s32i loc(#loc93)
        %10 = cir.load %0 : !cir.ptr<!s32i>, !s32i loc(#loc94)
        %11 = cir.binop(div, %9, %10) : !s32i loc(#loc147)
        cir.call @printIntLine(%11) : (!s32i) -> () loc(#loc95)
      } else {
        %9 = cir.get_global @".str1" : !cir.ptr<!cir.array<!s8i x 38>> loc(#loc52)
        %10 = cir.cast(array_to_ptrdecay, %9 : !cir.ptr<!cir.array<!s8i x 38>>), !cir.ptr<!s8i> loc(#loc52)
        cir.call @printLine(%10) : (!cir.ptr<!s8i>) -> () loc(#loc96)
      } loc(#loc146)
    } loc(#loc144)
    cir.return loc(#loc54)
  } loc(#loc134)
  cir.func no_proto internal private  @goodG2B() extra(#fn_attr1) {
    %0 = cir.alloca !s32i, !cir.ptr<!s32i>, ["data"] {alignment = 4 : i64} loc(#loc149)
    %1 = cir.const #cir.int<1> : !s32i loc(#loc101)
    %2 = cir.unary(minus, %1) : !s32i, !s32i loc(#loc102)
    cir.store %2, %0 : !s32i, !cir.ptr<!s32i> loc(#loc150)
    cir.goto "source" loc(#loc151)
  ^bb1:  // no predecessors
    cir.label "source" loc(#loc106)
    %3 = cir.const #cir.int<7> : !s32i loc(#loc107)
    cir.store %3, %0 : !s32i, !cir.ptr<!s32i> loc(#loc152)
    cir.goto "sink" loc(#loc153)
  ^bb2:  // no predecessors
    cir.label "sink" loc(#loc111)
    %4 = cir.const #cir.int<100> : !s32i loc(#loc112)
    %5 = cir.load %0 : !cir.ptr<!s32i>, !s32i loc(#loc113)
    %6 = cir.binop(div, %4, %5) : !s32i loc(#loc154)
    cir.call @printIntLine(%6) : (!s32i) -> () loc(#loc114)
    cir.return loc(#loc98)
  } loc(#loc148)
} loc(#loc)
#loc = loc("/home/ladisgin/git_proj/test_projects/juliet-c/testcases/CWE369_Divide_by_Zero/s01/CWE369_Divide_by_Zero__int_fgets_divide_18.c":0:0)
#loc1 = loc("/usr/include/stdio.h":654:1)
#loc2 = loc("/usr/include/stdio.h":655:59)
#loc3 = loc("/usr/include/stdio.h":149:1)
#loc4 = loc("/usr/include/stdio.h":149:14)
#loc5 = loc("/usr/include/stdlib.h":105:1)
#loc6 = loc("/usr/include/stdlib.h":106:33)
#loc7 = loc("../../../testcasesupport/std_testcase_io.h":14:1)
#loc8 = loc("../../../testcasesupport/std_testcase_io.h":14:33)
#loc9 = loc("CWE369_Divide_by_Zero__int_fgets_divide_18.c":41:23)
#loc10 = loc("../../../testcasesupport/std_testcase_io.h":18:1)
#loc11 = loc("../../../testcasesupport/std_testcase_io.h":18:33)
#loc12 = loc("CWE369_Divide_by_Zero__int_fgets_divide_18.c":24:1)
#loc13 = loc("CWE369_Divide_by_Zero__int_fgets_divide_18.c":48:1)
#loc14 = loc("CWE369_Divide_by_Zero__int_fgets_divide_18.c":26:5)
#loc15 = loc("CWE369_Divide_by_Zero__int_fgets_divide_18.c":26:9)
#loc16 = loc("CWE369_Divide_by_Zero__int_fgets_divide_18.c":32:9)
#loc17 = loc("CWE369_Divide_by_Zero__int_fgets_divide_18.c":32:45)
#loc18 = loc("CWE369_Divide_by_Zero__int_fgets_divide_18.c":28:13)
#loc19 = loc("CWE369_Divide_by_Zero__int_fgets_divide_18.c":28:12)
#loc20 = loc("CWE369_Divide_by_Zero__int_fgets_divide_18.c":28:5)
#loc21 = loc("CWE369_Divide_by_Zero__int_fgets_divide_18.c":29:5)
#loc22 = loc("CWE369_Divide_by_Zero__int_fgets_divide_18.c":29:10)
#loc23 = loc("CWE369_Divide_by_Zero__int_fgets_divide_18.c":30:1)
#loc24 = loc("CWE369_Divide_by_Zero__int_fgets_divide_18.c":34:9)
#loc25 = loc("CWE369_Divide_by_Zero__int_fgets_divide_18.c":42:9)
#loc26 = loc("CWE369_Divide_by_Zero__int_fgets_divide_18.c":34:19)
#loc27 = loc("CWE369_Divide_by_Zero__int_fgets_divide_18.c":34:32)
#loc28 = loc("CWE369_Divide_by_Zero__int_fgets_divide_18.c":34:49)
#loc29 = loc("CWE369_Divide_by_Zero__int_fgets_divide_18.c":34:13)
#loc30 = loc("CWE369_Divide_by_Zero__int_fgets_divide_18.c":34:59)
#loc31 = loc("CWE369_Divide_by_Zero__int_fgets_divide_18.c":34:56)
#loc32 = loc("CWE369_Divide_by_Zero__int_fgets_divide_18.c":35:9)
#loc33 = loc("CWE369_Divide_by_Zero__int_fgets_divide_18.c":38:9)
#loc34 = loc("CWE369_Divide_by_Zero__int_fgets_divide_18.c":40:9)
#loc35 = loc("CWE369_Divide_by_Zero__int_fgets_divide_18.c":37:25)
#loc36 = loc("CWE369_Divide_by_Zero__int_fgets_divide_18.c":37:20)
#loc37 = loc("CWE369_Divide_by_Zero__int_fgets_divide_18.c":37:13)
#loc38 = loc("CWE369_Divide_by_Zero__int_fgets_divide_18.c":37:36)
#loc39 = loc("CWE369_Divide_by_Zero__int_fgets_divide_18.c":41:13)
#loc40 = loc("CWE369_Divide_by_Zero__int_fgets_divide_18.c":44:5)
#loc41 = loc("CWE369_Divide_by_Zero__int_fgets_divide_18.c":44:10)
#loc42 = loc("CWE369_Divide_by_Zero__int_fgets_divide_18.c":45:1)
#loc43 = loc("CWE369_Divide_by_Zero__int_fgets_divide_18.c":47:18)
#loc44 = loc("CWE369_Divide_by_Zero__int_fgets_divide_18.c":47:24)
#loc45 = loc("CWE369_Divide_by_Zero__int_fgets_divide_18.c":47:5)
#loc46 = loc("CWE369_Divide_by_Zero__int_fgets_divide_18.c":104:1)
#loc47 = loc("CWE369_Divide_by_Zero__int_fgets_divide_18.c":108:1)
#loc48 = loc("CWE369_Divide_by_Zero__int_fgets_divide_18.c":106:5)
#loc49 = loc("CWE369_Divide_by_Zero__int_fgets_divide_18.c":106:13)
#loc50 = loc("CWE369_Divide_by_Zero__int_fgets_divide_18.c":107:5)
#loc51 = loc("CWE369_Divide_by_Zero__int_fgets_divide_18.c":107:13)
#loc52 = loc("CWE369_Divide_by_Zero__int_fgets_divide_18.c":84:19)
#loc53 = loc("CWE369_Divide_by_Zero__int_fgets_divide_18.c":55:1)
#loc54 = loc("CWE369_Divide_by_Zero__int_fgets_divide_18.c":86:1)
#loc55 = loc("CWE369_Divide_by_Zero__int_fgets_divide_18.c":57:5)
#loc56 = loc("CWE369_Divide_by_Zero__int_fgets_divide_18.c":57:9)
#loc57 = loc("CWE369_Divide_by_Zero__int_fgets_divide_18.c":63:9)
#loc58 = loc("CWE369_Divide_by_Zero__int_fgets_divide_18.c":63:45)
#loc59 = loc("CWE369_Divide_by_Zero__int_fgets_divide_18.c":59:13)
#loc60 = loc("CWE369_Divide_by_Zero__int_fgets_divide_18.c":59:12)
#loc61 = loc("CWE369_Divide_by_Zero__int_fgets_divide_18.c":59:5)
#loc62 = loc("CWE369_Divide_by_Zero__int_fgets_divide_18.c":60:5)
#loc63 = loc("CWE369_Divide_by_Zero__int_fgets_divide_18.c":60:10)
#loc64 = loc("CWE369_Divide_by_Zero__int_fgets_divide_18.c":61:1)
#loc65 = loc("CWE369_Divide_by_Zero__int_fgets_divide_18.c":65:9)
#loc66 = loc("CWE369_Divide_by_Zero__int_fgets_divide_18.c":73:9)
#loc67 = loc("CWE369_Divide_by_Zero__int_fgets_divide_18.c":65:19)
#loc68 = loc("CWE369_Divide_by_Zero__int_fgets_divide_18.c":65:32)
#loc69 = loc("CWE369_Divide_by_Zero__int_fgets_divide_18.c":65:49)
#loc70 = loc("CWE369_Divide_by_Zero__int_fgets_divide_18.c":65:13)
#loc71 = loc("CWE369_Divide_by_Zero__int_fgets_divide_18.c":65:59)
#loc72 = loc("CWE369_Divide_by_Zero__int_fgets_divide_18.c":65:56)
#loc73 = loc("CWE369_Divide_by_Zero__int_fgets_divide_18.c":66:9)
#loc74 = loc("CWE369_Divide_by_Zero__int_fgets_divide_18.c":69:9)
#loc75 = loc("CWE369_Divide_by_Zero__int_fgets_divide_18.c":71:9)
#loc76 = loc("CWE369_Divide_by_Zero__int_fgets_divide_18.c":68:25)
#loc77 = loc("CWE369_Divide_by_Zero__int_fgets_divide_18.c":68:20)
#loc78 = loc("CWE369_Divide_by_Zero__int_fgets_divide_18.c":68:13)
#loc79 = loc("CWE369_Divide_by_Zero__int_fgets_divide_18.c":68:36)
#loc80 = loc("CWE369_Divide_by_Zero__int_fgets_divide_18.c":72:23)
#loc81 = loc("CWE369_Divide_by_Zero__int_fgets_divide_18.c":72:13)
#loc82 = loc("CWE369_Divide_by_Zero__int_fgets_divide_18.c":75:5)
#loc83 = loc("CWE369_Divide_by_Zero__int_fgets_divide_18.c":75:10)
#loc84 = loc("CWE369_Divide_by_Zero__int_fgets_divide_18.c":76:1)
#loc85 = loc("CWE369_Divide_by_Zero__int_fgets_divide_18.c":78:5)
#loc86 = loc("CWE369_Divide_by_Zero__int_fgets_divide_18.c":85:5)
#loc87 = loc("CWE369_Divide_by_Zero__int_fgets_divide_18.c":78:9)
#loc88 = loc("CWE369_Divide_by_Zero__int_fgets_divide_18.c":78:17)
#loc89 = loc("CWE369_Divide_by_Zero__int_fgets_divide_18.c":78:14)
#loc90 = loc("CWE369_Divide_by_Zero__int_fgets_divide_18.c":79:5)
#loc91 = loc("CWE369_Divide_by_Zero__int_fgets_divide_18.c":81:5)
#loc92 = loc("CWE369_Divide_by_Zero__int_fgets_divide_18.c":83:5)
#loc93 = loc("CWE369_Divide_by_Zero__int_fgets_divide_18.c":80:22)
#loc94 = loc("CWE369_Divide_by_Zero__int_fgets_divide_18.c":80:28)
#loc95 = loc("CWE369_Divide_by_Zero__int_fgets_divide_18.c":80:9)
#loc96 = loc("CWE369_Divide_by_Zero__int_fgets_divide_18.c":84:9)
#loc97 = loc("CWE369_Divide_by_Zero__int_fgets_divide_18.c":89:1)
#loc98 = loc("CWE369_Divide_by_Zero__int_fgets_divide_18.c":102:1)
#loc99 = loc("CWE369_Divide_by_Zero__int_fgets_divide_18.c":91:5)
#loc100 = loc("CWE369_Divide_by_Zero__int_fgets_divide_18.c":91:9)
#loc101 = loc("CWE369_Divide_by_Zero__int_fgets_divide_18.c":93:13)
#loc102 = loc("CWE369_Divide_by_Zero__int_fgets_divide_18.c":93:12)
#loc103 = loc("CWE369_Divide_by_Zero__int_fgets_divide_18.c":93:5)
#loc104 = loc("CWE369_Divide_by_Zero__int_fgets_divide_18.c":94:5)
#loc105 = loc("CWE369_Divide_by_Zero__int_fgets_divide_18.c":94:10)
#loc106 = loc("CWE369_Divide_by_Zero__int_fgets_divide_18.c":95:1)
#loc107 = loc("CWE369_Divide_by_Zero__int_fgets_divide_18.c":97:12)
#loc108 = loc("CWE369_Divide_by_Zero__int_fgets_divide_18.c":97:5)
#loc109 = loc("CWE369_Divide_by_Zero__int_fgets_divide_18.c":98:5)
#loc110 = loc("CWE369_Divide_by_Zero__int_fgets_divide_18.c":98:10)
#loc111 = loc("CWE369_Divide_by_Zero__int_fgets_divide_18.c":99:1)
#loc112 = loc("CWE369_Divide_by_Zero__int_fgets_divide_18.c":101:18)
#loc113 = loc("CWE369_Divide_by_Zero__int_fgets_divide_18.c":101:24)
#loc114 = loc("CWE369_Divide_by_Zero__int_fgets_divide_18.c":101:5)
#loc115 = loc(fused[#loc1, #loc2])
#loc116 = loc(fused[#loc3, #loc4])
#loc117 = loc(fused[#loc5, #loc6])
#loc118 = loc(fused[#loc7, #loc8])
#loc119 = loc(fused[#loc10, #loc11])
#loc120 = loc(fused[#loc12, #loc13])
#loc121 = loc(fused[#loc14, #loc15])
#loc122 = loc(fused[#loc16, #loc17])
#loc123 = loc(fused[#loc20, #loc18])
#loc124 = loc(fused[#loc21, #loc22])
#loc125 = loc(fused[#loc24, #loc25])
#loc126 = loc(fused[#loc29, #loc30])
#loc127 = loc(fused[#loc32, #loc33, #loc34, #loc25])
#loc128 = loc(fused[#loc37, #loc38])
#loc129 = loc(fused[#loc40, #loc41])
#loc130 = loc(fused[#loc43, #loc44])
#loc131 = loc(fused[#loc46, #loc47])
#loc132 = loc(fused[#loc48, #loc49])
#loc133 = loc(fused[#loc50, #loc51])
#loc134 = loc(fused[#loc53, #loc54])
#loc135 = loc(fused[#loc55, #loc56])
#loc136 = loc(fused[#loc57, #loc58])
#loc137 = loc(fused[#loc61, #loc59])
#loc138 = loc(fused[#loc62, #loc63])
#loc139 = loc(fused[#loc65, #loc66])
#loc140 = loc(fused[#loc70, #loc71])
#loc141 = loc(fused[#loc73, #loc74, #loc75, #loc66])
#loc142 = loc(fused[#loc78, #loc79])
#loc143 = loc(fused[#loc82, #loc83])
#loc144 = loc(fused[#loc85, #loc86])
#loc145 = loc(fused[#loc87, #loc88])
#loc146 = loc(fused[#loc90, #loc91, #loc92, #loc86])
#loc147 = loc(fused[#loc93, #loc94])
#loc148 = loc(fused[#loc97, #loc98])
#loc149 = loc(fused[#loc99, #loc100])
#loc150 = loc(fused[#loc103, #loc101])
#loc151 = loc(fused[#loc104, #loc105])
#loc152 = loc(fused[#loc108, #loc107])
#loc153 = loc(fused[#loc109, #loc110])
#loc154 = loc(fused[#loc112, #loc113])
