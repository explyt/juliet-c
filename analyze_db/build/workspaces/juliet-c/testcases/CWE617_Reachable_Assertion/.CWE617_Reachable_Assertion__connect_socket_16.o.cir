!s32i = !cir.int<s, 32>
!s64i = !cir.int<s, 64>
!s8i = !cir.int<s, 8>
!u16i = !cir.int<u, 16>
!u32i = !cir.int<u, 32>
!u64i = !cir.int<u, 64>
!u8i = !cir.int<u, 8>
!void = !cir.void
#false = #cir.bool<false> : !cir.bool
#fn_attr = #cir<extra({nothrow = #cir.nothrow})>
#fn_attr1 = #cir<extra({inline = #cir.inline<no>, nothrow = #cir.nothrow, optnone = #cir.optnone, uwtable = #cir.uwtable<async>})>
#true = #cir.bool<true> : !cir.bool
!ty_in_addr = !cir.record<struct "in_addr" {!u32i} #cir.record.decl.ast>
!ty_sockaddr = !cir.record<struct "sockaddr" {!u16i, !cir.array<!s8i x 14>} #cir.record.decl.ast>
!ty_sockaddr_in = !cir.record<struct "sockaddr_in" {!u16i, !u16i, !ty_in_addr, !cir.array<!u8i x 8>}>
module @"/workspaces/juliet-c/testcases/CWE617_Reachable_Assertion/CWE617_Reachable_Assertion__connect_socket_16.c" attributes {cir.lang = #cir.lang<c>, cir.sob = #cir.signed_overflow_behavior<undefined>, cir.triple = "x86_64-unknown-linux-gnu", cir.type_size_info = #cir.type_size_info<char = 8, int = 32, size_t = 64>, cir.uwtable = #cir.uwtable<async>, dlti.dl_spec = #dlti.dl_spec<!llvm.ptr = dense<64> : vector<4xi64>, i1 = dense<8> : vector<2xi64>, i64 = dense<64> : vector<2xi64>, i128 = dense<128> : vector<2xi64>, f80 = dense<128> : vector<2xi64>, f64 = dense<64> : vector<2xi64>, f16 = dense<16> : vector<2xi64>, !llvm.ptr<270> = dense<32> : vector<4xi64>, f128 = dense<128> : vector<2xi64>, !llvm.ptr<271> = dense<32> : vector<4xi64>, !llvm.ptr<272> = dense<64> : vector<4xi64>, i8 = dense<8> : vector<2xi64>, i16 = dense<16> : vector<2xi64>, i32 = dense<32> : vector<2xi64>, "dlti.stack_alignment" = 128 : i64, "dlti.endianness" = "little", "dlti.mangling_mode" = "e">} {
  cir.func private @socket(!s32i, !s32i, !s32i) -> !s32i extra(#fn_attr) loc(#loc140)
  cir.func private @inet_addr(!cir.ptr<!s8i>) -> !u32i extra(#fn_attr) loc(#loc141)
  cir.global "private" constant cir_private dsolocal @".str" = #cir.const_array<"127.0.0.1\00" : !cir.array<!s8i x 10>> : !cir.array<!s8i x 10> {alignment = 1 : i64} loc(#loc5)
  cir.func private @htons(!u16i) -> !u16i extra(#fn_attr) loc(#loc142)
  cir.func private @connect(!s32i, !cir.ptr<!ty_sockaddr>, !u32i) -> !s32i loc(#loc143)
  cir.func private @recv(!s32i, !cir.ptr<!void>, !u64i, !s32i) -> !s64i loc(#loc144)
  cir.func private @atoi(!cir.ptr<!s8i>) -> !s32i extra(#fn_attr) loc(#loc145)
  cir.func private @close(!s32i) -> !s32i loc(#loc146)
  cir.func private @__assert_fail(!cir.ptr<!s8i>, !cir.ptr<!s8i>, !u32i, !cir.ptr<!s8i>) extra(#fn_attr) loc(#loc147)
  cir.global "private" constant cir_private dsolocal @".str.1" = #cir.const_array<"data > ASSERT_VALUE\00" : !cir.array<!s8i x 20>> : !cir.array<!s8i x 20> {alignment = 1 : i64} loc(#loc18)
  cir.global "private" constant cir_private dsolocal @".str.2" = #cir.const_array<"CWE617_Reachable_Assertion__connect_socket_16.c\00" : !cir.array<!s8i x 48>> : !cir.array<!s8i x 48> {alignment = 1 : i64} loc(#loc18)
  cir.global "private" constant cir_private dsolocal @".str.3" = #cir.const_array<"void CWE617_Reachable_Assertion__connect_socket_16_bad()\00" : !cir.array<!s8i x 57>> : !cir.array<!s8i x 57> {alignment = 1 : i64} loc(#loc18)
  cir.func no_proto @CWE617_Reachable_Assertion__connect_socket_16_bad() extra(#fn_attr1) {
    %0 = cir.alloca !s32i, !cir.ptr<!s32i>, ["data"] {alignment = 4 : i64} loc(#loc149)
    %1 = cir.const #cir.int<1> : !s32i loc(#loc23)
    %2 = cir.unary(minus, %1) nsw : !s32i, !s32i loc(#loc24)
    cir.store %2, %0 : !s32i, !cir.ptr<!s32i> loc(#loc150)
    cir.scope {
      cir.while {
        %4 = cir.const #cir.int<1> : !s32i loc(#loc28)
        %5 = cir.cast(int_to_bool, %4 : !s32i), !cir.bool loc(#loc28)
        cir.condition(%5) loc(#loc28)
      } do {
        cir.scope {
          cir.scope {
            %4 = cir.alloca !s32i, !cir.ptr<!s32i>, ["recvResult"] {alignment = 4 : i64} loc(#loc154)
            %5 = cir.alloca !ty_sockaddr_in, !cir.ptr<!ty_sockaddr_in>, ["service"] {alignment = 4 : i64} loc(#loc155)
            %6 = cir.alloca !s32i, !cir.ptr<!s32i>, ["connectSocket", init] {alignment = 4 : i64} loc(#loc156)
            %7 = cir.alloca !cir.array<!s8i x 14>, !cir.ptr<!cir.array<!s8i x 14>>, ["inputBuffer"] {alignment = 1 : i64} loc(#loc157)
            %8 = cir.const #cir.int<1> : !s32i loc(#loc37)
            %9 = cir.unary(minus, %8) nsw : !s32i, !s32i loc(#loc37)
            cir.store %9, %6 : !s32i, !cir.ptr<!s32i> loc(#loc156)
            cir.scope {
              cir.do {
                cir.scope {
                  %10 = cir.const #cir.int<2> : !s32i loc(#loc44)
                  %11 = cir.const #cir.int<1> : !s32i loc(#loc45)
                  %12 = cir.const #cir.int<6> : !s32i loc(#loc46)
                  %13 = cir.call @socket(%10, %11, %12) : (!s32i, !s32i, !s32i) -> !s32i extra(#fn_attr) loc(#loc47)
                  cir.store %13, %6 : !s32i, !cir.ptr<!s32i> loc(#loc160)
                  cir.scope {
                    %52 = cir.load %6 : !cir.ptr<!s32i>, !s32i loc(#loc52)
                    %53 = cir.const #cir.int<1> : !s32i loc(#loc53)
                    %54 = cir.unary(minus, %53) nsw : !s32i, !s32i loc(#loc53)
                    %55 = cir.cmp(eq, %52, %54) : !s32i, !cir.bool loc(#loc162)
                    cir.if %55 {
                      cir.break loc(#loc55)
                    } loc(#loc163)
                  } loc(#loc161)
                  %14 = cir.cast(bitcast, %5 : !cir.ptr<!ty_sockaddr_in>), !cir.ptr<!void> loc(#loc164)
                  %15 = cir.const #cir.int<0> : !s32i loc(#loc58)
                  %16 = cir.const #cir.int<16> : !u64i loc(#loc165)
                  cir.libc.memset %16 bytes from %14 set to %15 : !cir.ptr<!void>, !s32i, !u64i loc(#loc166)
                  %17 = cir.const #cir.int<2> : !s32i loc(#loc63)
                  %18 = cir.cast(integral, %17 : !s32i), !u16i loc(#loc63)
                  %19 = cir.get_member %5[0] {name = "sin_family"} : !cir.ptr<!ty_sockaddr_in> -> !cir.ptr<!u16i> loc(#loc64)
                  cir.store %18, %19 : !u16i, !cir.ptr<!u16i> loc(#loc167)
                  %20 = cir.get_global @".str" : !cir.ptr<!cir.array<!s8i x 10>> loc(#loc5)
                  %21 = cir.cast(array_to_ptrdecay, %20 : !cir.ptr<!cir.array<!s8i x 10>>), !cir.ptr<!s8i> loc(#loc5)
                  %22 = cir.call @inet_addr(%21) : (!cir.ptr<!s8i>) -> !u32i extra(#fn_attr) loc(#loc66)
                  %23 = cir.get_member %5[2] {name = "sin_addr"} : !cir.ptr<!ty_sockaddr_in> -> !cir.ptr<!ty_in_addr> loc(#loc67)
                  %24 = cir.get_member %23[0] {name = "s_addr"} : !cir.ptr<!ty_in_addr> -> !cir.ptr<!u32i> loc(#loc68)
                  cir.store %22, %24 : !u32i, !cir.ptr<!u32i> loc(#loc168)
                  %25 = cir.const #cir.int<27015> : !s32i loc(#loc71)
                  %26 = cir.cast(integral, %25 : !s32i), !u16i loc(#loc71)
                  %27 = cir.call @htons(%26) : (!u16i) -> !u16i side_effect(const) extra(#fn_attr) loc(#loc72)
                  %28 = cir.get_member %5[1] {name = "sin_port"} : !cir.ptr<!ty_sockaddr_in> -> !cir.ptr<!u16i> loc(#loc73)
                  cir.store %27, %28 : !u16i, !cir.ptr<!u16i> loc(#loc169)
                  cir.scope {
                    %52 = cir.load %6 : !cir.ptr<!s32i>, !s32i loc(#loc78)
                    %53 = cir.cast(bitcast, %5 : !cir.ptr<!ty_sockaddr_in>), !cir.ptr<!ty_sockaddr> loc(#loc171)
                    %54 = cir.const #cir.int<16> : !u64i loc(#loc172)
                    %55 = cir.cast(integral, %54 : !u64i), !u32i loc(#loc172)
                    %56 = cir.call @connect(%52, %53, %55) : (!s32i, !cir.ptr<!ty_sockaddr>, !u32i) -> !s32i loc(#loc83)
                    %57 = cir.const #cir.int<1> : !s32i loc(#loc84)
                    %58 = cir.unary(minus, %57) nsw : !s32i, !s32i loc(#loc84)
                    %59 = cir.cmp(eq, %56, %58) : !s32i, !cir.bool loc(#loc173)
                    cir.if %59 {
                      cir.break loc(#loc86)
                    } loc(#loc174)
                  } loc(#loc170)
                  %29 = cir.load %6 : !cir.ptr<!s32i>, !s32i loc(#loc87)
                  %30 = cir.cast(array_to_ptrdecay, %7 : !cir.ptr<!cir.array<!s8i x 14>>), !cir.ptr<!s8i> loc(#loc88)
                  %31 = cir.cast(bitcast, %30 : !cir.ptr<!s8i>), !cir.ptr<!void> loc(#loc88)
                  %32 = cir.const #cir.int<3> : !s32i loc(#loc89)
                  %33 = cir.cast(integral, %32 : !s32i), !u64i loc(#loc89)
                  %34 = cir.const #cir.int<4> : !u64i loc(#loc89)
                  %35 = cir.binop(mul, %33, %34) : !u64i loc(#loc89)
                  %36 = cir.const #cir.int<2> : !s32i loc(#loc89)
                  %37 = cir.cast(integral, %36 : !s32i), !u64i loc(#loc89)
                  %38 = cir.binop(add, %35, %37) : !u64i loc(#loc89)
                  %39 = cir.const #cir.int<1> : !s32i loc(#loc90)
                  %40 = cir.cast(integral, %39 : !s32i), !u64i loc(#loc90)
                  %41 = cir.binop(sub, %38, %40) : !u64i loc(#loc175)
                  %42 = cir.const #cir.int<0> : !s32i loc(#loc91)
                  %43 = cir.call @recv(%29, %31, %41, %42) : (!s32i, !cir.ptr<!void>, !u64i, !s32i) -> !s64i loc(#loc92)
                  %44 = cir.cast(integral, %43 : !s64i), !s32i loc(#loc92)
                  cir.store %44, %4 : !s32i, !cir.ptr<!s32i> loc(#loc176)
                  cir.scope {
                    %52 = cir.load %4 : !cir.ptr<!s32i>, !s32i loc(#loc97)
                    %53 = cir.const #cir.int<1> : !s32i loc(#loc98)
                    %54 = cir.unary(minus, %53) nsw : !s32i, !s32i loc(#loc98)
                    %55 = cir.cmp(eq, %52, %54) : !s32i, !cir.bool loc(#loc178)
                    %56 = cir.ternary(%55, true {
                      %57 = cir.const #true loc(#loc99)
                      cir.yield %57 : !cir.bool loc(#loc99)
                    }, false {
                      %57 = cir.load %4 : !cir.ptr<!s32i>, !s32i loc(#loc100)
                      %58 = cir.const #cir.int<0> : !s32i loc(#loc101)
                      %59 = cir.cmp(eq, %57, %58) : !s32i, !cir.bool loc(#loc179)
                      %60 = cir.ternary(%59, true {
                        %61 = cir.const #true loc(#loc99)
                        cir.yield %61 : !cir.bool loc(#loc99)
                      }, false {
                        %61 = cir.const #false loc(#loc99)
                        cir.yield %61 : !cir.bool loc(#loc99)
                      }) : (!cir.bool) -> !cir.bool loc(#loc99)
                      cir.yield %60 : !cir.bool loc(#loc99)
                    }) : (!cir.bool) -> !cir.bool loc(#loc99)
                    cir.if %56 {
                      cir.break loc(#loc103)
                    } loc(#loc180)
                  } loc(#loc177)
                  %45 = cir.const #cir.int<0> : !s32i loc(#loc104)
                  %46 = cir.cast(integral, %45 : !s32i), !s8i loc(#loc104)
                  %47 = cir.load %4 : !cir.ptr<!s32i>, !s32i loc(#loc105)
                  %48 = cir.cast(array_to_ptrdecay, %7 : !cir.ptr<!cir.array<!s8i x 14>>), !cir.ptr<!s8i> loc(#loc106)
                  %49 = cir.ptr_stride(%48 : !cir.ptr<!s8i>, %47 : !s32i), !cir.ptr<!s8i> loc(#loc106)
                  cir.store %46, %49 : !s8i, !cir.ptr<!s8i> loc(#loc181)
                  %50 = cir.cast(array_to_ptrdecay, %7 : !cir.ptr<!cir.array<!s8i x 14>>), !cir.ptr<!s8i> loc(#loc107)
                  %51 = cir.call @atoi(%50) : (!cir.ptr<!s8i>) -> !s32i side_effect(pure) extra(#fn_attr) loc(#loc108)
                  cir.store %51, %0 : !s32i, !cir.ptr<!s32i> loc(#loc182)
                } loc(#loc159)
                cir.yield loc(#loc41)
              } while {
                %10 = cir.const #cir.int<0> : !s32i loc(#loc111)
                %11 = cir.cast(int_to_bool, %10 : !s32i), !cir.bool loc(#loc111)
                cir.condition(%11) loc(#loc111)
              } loc(#loc158)
            } loc(#loc158)
            cir.scope {
              %10 = cir.load %6 : !cir.ptr<!s32i>, !s32i loc(#loc114)
              %11 = cir.const #cir.int<1> : !s32i loc(#loc115)
              %12 = cir.unary(minus, %11) nsw : !s32i, !s32i loc(#loc115)
              %13 = cir.cmp(ne, %10, %12) : !s32i, !cir.bool loc(#loc184)
              cir.if %13 {
                %14 = cir.load %6 : !cir.ptr<!s32i>, !s32i loc(#loc117)
                %15 = cir.call @close(%14) : (!s32i) -> !s32i loc(#loc118)
              } loc(#loc185)
            } loc(#loc183)
          } loc(#loc153)
          cir.break loc(#loc119)
        } loc(#loc152)
        cir.yield loc(#loc27)
      } loc(#loc151)
    } loc(#loc151)
    %3 = cir.const #cir.int<4> : !u64i loc(#loc18)
    cir.scope {
      cir.scope {
        %4 = cir.load %0 : !cir.ptr<!s32i>, !s32i loc(#loc18)
        %5 = cir.const #cir.int<5> : !s32i loc(#loc18)
        %6 = cir.cmp(gt, %4, %5) : !s32i, !cir.bool loc(#loc18)
        cir.if %6 {
        } else {
          %7 = cir.get_global @".str.1" : !cir.ptr<!cir.array<!s8i x 20>> loc(#loc18)
          %8 = cir.cast(array_to_ptrdecay, %7 : !cir.ptr<!cir.array<!s8i x 20>>), !cir.ptr<!s8i> loc(#loc18)
          %9 = cir.get_global @".str.2" : !cir.ptr<!cir.array<!s8i x 48>> loc(#loc18)
          %10 = cir.cast(array_to_ptrdecay, %9 : !cir.ptr<!cir.array<!s8i x 48>>), !cir.ptr<!s8i> loc(#loc18)
          %11 = cir.const #cir.int<113> : !s32i loc(#loc18)
          %12 = cir.cast(integral, %11 : !s32i), !u32i loc(#loc18)
          %13 = cir.get_global @".str.3" : !cir.ptr<!cir.array<!s8i x 57>> loc(#loc18)
          %14 = cir.cast(array_to_ptrdecay, %13 : !cir.ptr<!cir.array<!s8i x 57>>), !cir.ptr<!s8i> loc(#loc18)
          cir.call @__assert_fail(%8, %10, %12, %14) : (!cir.ptr<!s8i>, !cir.ptr<!s8i>, !u32i, !cir.ptr<!s8i>) -> () extra(#fn_attr) loc(#loc18)
        } loc(#loc18)
      } loc(#loc18)
    } loc(#loc18)
    cir.return loc(#loc20)
  } loc(#loc148)
  cir.func no_proto @CWE617_Reachable_Assertion__connect_socket_16_good() extra(#fn_attr1) {
    %0 = cir.get_global @goodG2B : !cir.ptr<!cir.func<()>> loc(#loc187)
    cir.call %0() : (!cir.ptr<!cir.func<()>>) -> () loc(#loc122)
    cir.return loc(#loc121)
  } loc(#loc186)
  cir.global "private" constant cir_private dsolocal @".str.4" = #cir.const_array<"void goodG2B()\00" : !cir.array<!s8i x 15>> : !cir.array<!s8i x 15> {alignment = 1 : i64} loc(#loc124)
  cir.func no_proto internal private @goodG2B() extra(#fn_attr1) {
    %0 = cir.alloca !s32i, !cir.ptr<!s32i>, ["data"] {alignment = 4 : i64} loc(#loc189)
    %1 = cir.const #cir.int<1> : !s32i loc(#loc129)
    %2 = cir.unary(minus, %1) nsw : !s32i, !s32i loc(#loc130)
    cir.store %2, %0 : !s32i, !cir.ptr<!s32i> loc(#loc190)
    cir.scope {
      cir.while {
        %4 = cir.const #cir.int<1> : !s32i loc(#loc134)
        %5 = cir.cast(int_to_bool, %4 : !s32i), !cir.bool loc(#loc134)
        cir.condition(%5) loc(#loc134)
      } do {
        cir.scope {
          %4 = cir.const #cir.int<5> : !s32i loc(#loc136)
          %5 = cir.const #cir.int<1> : !s32i loc(#loc137)
          %6 = cir.binop(add, %4, %5) nsw : !s32i loc(#loc136)
          cir.store %6, %0 : !s32i, !cir.ptr<!s32i> loc(#loc193)
          cir.break loc(#loc139)
        } loc(#loc192)
        cir.yield loc(#loc133)
      } loc(#loc191)
    } loc(#loc191)
    %3 = cir.const #cir.int<4> : !u64i loc(#loc124)
    cir.scope {
      cir.scope {
        %4 = cir.load %0 : !cir.ptr<!s32i>, !s32i loc(#loc124)
        %5 = cir.const #cir.int<5> : !s32i loc(#loc124)
        %6 = cir.cmp(gt, %4, %5) : !s32i, !cir.bool loc(#loc124)
        cir.if %6 {
        } else {
          %7 = cir.get_global @".str.1" : !cir.ptr<!cir.array<!s8i x 20>> loc(#loc124)
          %8 = cir.cast(array_to_ptrdecay, %7 : !cir.ptr<!cir.array<!s8i x 20>>), !cir.ptr<!s8i> loc(#loc124)
          %9 = cir.get_global @".str.2" : !cir.ptr<!cir.array<!s8i x 48>> loc(#loc124)
          %10 = cir.cast(array_to_ptrdecay, %9 : !cir.ptr<!cir.array<!s8i x 48>>), !cir.ptr<!s8i> loc(#loc124)
          %11 = cir.const #cir.int<133> : !s32i loc(#loc124)
          %12 = cir.cast(integral, %11 : !s32i), !u32i loc(#loc124)
          %13 = cir.get_global @".str.4" : !cir.ptr<!cir.array<!s8i x 15>> loc(#loc124)
          %14 = cir.cast(array_to_ptrdecay, %13 : !cir.ptr<!cir.array<!s8i x 15>>), !cir.ptr<!s8i> loc(#loc124)
          cir.call @__assert_fail(%8, %10, %12, %14) : (!cir.ptr<!s8i>, !cir.ptr<!s8i>, !u32i, !cir.ptr<!s8i>) -> () extra(#fn_attr) loc(#loc124)
        } loc(#loc124)
      } loc(#loc124)
    } loc(#loc124)
    cir.return loc(#loc126)
  } loc(#loc188)
} loc(#loc)
#loc = loc("/workspaces/juliet-c/testcases/CWE617_Reachable_Assertion/CWE617_Reachable_Assertion__connect_socket_16.c":0:0)
#loc1 = loc("/usr/include/x86_64-linux-gnu/sys/socket.h":102:1)
#loc2 = loc("/usr/include/x86_64-linux-gnu/sys/socket.h":102:62)
#loc3 = loc("/usr/include/arpa/inet.h":34:1)
#loc4 = loc("/usr/include/arpa/inet.h":34:47)
#loc5 = loc("CWE617_Reachable_Assertion__connect_socket_16.c":80:53)
#loc6 = loc("/usr/include/netinet/in.h":402:1)
#loc7 = loc("/usr/include/netinet/in.h":403:40)
#loc8 = loc("/usr/include/x86_64-linux-gnu/sys/socket.h":126:1)
#loc9 = loc("/usr/include/x86_64-linux-gnu/sys/socket.h":126:75)
#loc10 = loc("/usr/include/x86_64-linux-gnu/sys/socket.h":145:1)
#loc11 = loc("/usr/include/x86_64-linux-gnu/sys/socket.h":145:68)
#loc12 = loc("/usr/include/stdlib.h":105:1)
#loc13 = loc("/usr/include/stdlib.h":106:33)
#loc14 = loc("/usr/include/unistd.h":358:1)
#loc15 = loc("/usr/include/unistd.h":358:27)
#loc16 = loc("/usr/include/assert.h":69:1)
#loc17 = loc("/usr/include/assert.h":71:43)
#loc18 = loc("CWE617_Reachable_Assertion__connect_socket_16.c":113:5)
#loc19 = loc("CWE617_Reachable_Assertion__connect_socket_16.c":47:1)
#loc20 = loc("CWE617_Reachable_Assertion__connect_socket_16.c":114:1)
#loc21 = loc("CWE617_Reachable_Assertion__connect_socket_16.c":49:5)
#loc22 = loc("CWE617_Reachable_Assertion__connect_socket_16.c":49:9)
#loc23 = loc("CWE617_Reachable_Assertion__connect_socket_16.c":51:13)
#loc24 = loc("CWE617_Reachable_Assertion__connect_socket_16.c":51:12)
#loc25 = loc("CWE617_Reachable_Assertion__connect_socket_16.c":51:5)
#loc26 = loc("CWE617_Reachable_Assertion__connect_socket_16.c":52:5)
#loc27 = loc("CWE617_Reachable_Assertion__connect_socket_16.c":111:5)
#loc28 = loc("CWE617_Reachable_Assertion__connect_socket_16.c":52:11)
#loc29 = loc("CWE617_Reachable_Assertion__connect_socket_16.c":53:5)
#loc30 = loc("CWE617_Reachable_Assertion__connect_socket_16.c":54:9)
#loc31 = loc("CWE617_Reachable_Assertion__connect_socket_16.c":109:9)
#loc32 = loc("CWE617_Reachable_Assertion__connect_socket_16.c":59:13)
#loc33 = loc("CWE617_Reachable_Assertion__connect_socket_16.c":59:17)
#loc34 = loc("CWE617_Reachable_Assertion__connect_socket_16.c":60:13)
#loc35 = loc("CWE617_Reachable_Assertion__connect_socket_16.c":60:32)
#loc36 = loc("CWE617_Reachable_Assertion__connect_socket_16.c":61:13)
#loc37 = loc("CWE617_Reachable_Assertion__connect_socket_16.c":61:36)
#loc38 = loc("CWE617_Reachable_Assertion__connect_socket_16.c":62:13)
#loc39 = loc("CWE617_Reachable_Assertion__connect_socket_16.c":62:45)
#loc40 = loc("CWE617_Reachable_Assertion__connect_socket_16.c":63:13)
#loc41 = loc("CWE617_Reachable_Assertion__connect_socket_16.c":98:21)
#loc42 = loc("CWE617_Reachable_Assertion__connect_socket_16.c":64:13)
#loc43 = loc("CWE617_Reachable_Assertion__connect_socket_16.c":97:13)
#loc44 = loc("CWE617_Reachable_Assertion__connect_socket_16.c":73:40)
#loc45 = loc("CWE617_Reachable_Assertion__connect_socket_16.c":73:49)
#loc46 = loc("CWE617_Reachable_Assertion__connect_socket_16.c":73:62)
#loc47 = loc("CWE617_Reachable_Assertion__connect_socket_16.c":73:33)
#loc48 = loc("CWE617_Reachable_Assertion__connect_socket_16.c":73:17)
#loc49 = loc("CWE617_Reachable_Assertion__connect_socket_16.c":73:73)
#loc50 = loc("CWE617_Reachable_Assertion__connect_socket_16.c":74:17)
#loc51 = loc("CWE617_Reachable_Assertion__connect_socket_16.c":77:17)
#loc52 = loc("CWE617_Reachable_Assertion__connect_socket_16.c":74:21)
#loc53 = loc("CWE617_Reachable_Assertion__connect_socket_16.c":74:38)
#loc54 = loc("CWE617_Reachable_Assertion__connect_socket_16.c":75:17)
#loc55 = loc("CWE617_Reachable_Assertion__connect_socket_16.c":76:21)
#loc56 = loc("CWE617_Reachable_Assertion__connect_socket_16.c":78:24)
#loc57 = loc("CWE617_Reachable_Assertion__connect_socket_16.c":78:25)
#loc58 = loc("CWE617_Reachable_Assertion__connect_socket_16.c":78:34)
#loc59 = loc("CWE617_Reachable_Assertion__connect_socket_16.c":78:37)
#loc60 = loc("CWE617_Reachable_Assertion__connect_socket_16.c":78:51)
#loc61 = loc("CWE617_Reachable_Assertion__connect_socket_16.c":78:17)
#loc62 = loc("CWE617_Reachable_Assertion__connect_socket_16.c":78:52)
#loc63 = loc("CWE617_Reachable_Assertion__connect_socket_16.c":79:38)
#loc64 = loc("/usr/include/netinet/in.h":249:5)
#loc65 = loc("CWE617_Reachable_Assertion__connect_socket_16.c":79:17)
#loc66 = loc("CWE617_Reachable_Assertion__connect_socket_16.c":80:43)
#loc67 = loc("/usr/include/netinet/in.h":251:20)
#loc68 = loc("/usr/include/netinet/in.h":33:15)
#loc69 = loc("CWE617_Reachable_Assertion__connect_socket_16.c":80:17)
#loc70 = loc("CWE617_Reachable_Assertion__connect_socket_16.c":80:63)
#loc71 = loc("CWE617_Reachable_Assertion__connect_socket_16.c":81:42)
#loc72 = loc("CWE617_Reachable_Assertion__connect_socket_16.c":81:36)
#loc73 = loc("/usr/include/netinet/in.h":250:15)
#loc74 = loc("CWE617_Reachable_Assertion__connect_socket_16.c":81:17)
#loc75 = loc("CWE617_Reachable_Assertion__connect_socket_16.c":81:50)
#loc76 = loc("CWE617_Reachable_Assertion__connect_socket_16.c":82:17)
#loc77 = loc("CWE617_Reachable_Assertion__connect_socket_16.c":85:17)
#loc78 = loc("CWE617_Reachable_Assertion__connect_socket_16.c":82:29)
#loc79 = loc("CWE617_Reachable_Assertion__connect_socket_16.c":82:62)
#loc80 = loc("CWE617_Reachable_Assertion__connect_socket_16.c":82:63)
#loc81 = loc("CWE617_Reachable_Assertion__connect_socket_16.c":82:72)
#loc82 = loc("CWE617_Reachable_Assertion__connect_socket_16.c":82:86)
#loc83 = loc("CWE617_Reachable_Assertion__connect_socket_16.c":82:21)
#loc84 = loc("CWE617_Reachable_Assertion__connect_socket_16.c":82:92)
#loc85 = loc("CWE617_Reachable_Assertion__connect_socket_16.c":83:17)
#loc86 = loc("CWE617_Reachable_Assertion__connect_socket_16.c":84:21)
#loc87 = loc("CWE617_Reachable_Assertion__connect_socket_16.c":88:35)
#loc88 = loc("CWE617_Reachable_Assertion__connect_socket_16.c":88:50)
#loc89 = loc("CWE617_Reachable_Assertion__connect_socket_16.c":88:63)
#loc90 = loc("CWE617_Reachable_Assertion__connect_socket_16.c":88:81)
#loc91 = loc("CWE617_Reachable_Assertion__connect_socket_16.c":88:84)
#loc92 = loc("CWE617_Reachable_Assertion__connect_socket_16.c":88:30)
#loc93 = loc("CWE617_Reachable_Assertion__connect_socket_16.c":88:17)
#loc94 = loc("CWE617_Reachable_Assertion__connect_socket_16.c":88:85)
#loc95 = loc("CWE617_Reachable_Assertion__connect_socket_16.c":89:17)
#loc96 = loc("CWE617_Reachable_Assertion__connect_socket_16.c":92:17)
#loc97 = loc("CWE617_Reachable_Assertion__connect_socket_16.c":89:21)
#loc98 = loc("CWE617_Reachable_Assertion__connect_socket_16.c":89:35)
#loc99 = loc("CWE617_Reachable_Assertion__connect_socket_16.c":89:48)
#loc100 = loc("CWE617_Reachable_Assertion__connect_socket_16.c":89:51)
#loc101 = loc("CWE617_Reachable_Assertion__connect_socket_16.c":89:65)
#loc102 = loc("CWE617_Reachable_Assertion__connect_socket_16.c":90:17)
#loc103 = loc("CWE617_Reachable_Assertion__connect_socket_16.c":91:21)
#loc104 = loc("CWE617_Reachable_Assertion__connect_socket_16.c":94:43)
#loc105 = loc("CWE617_Reachable_Assertion__connect_socket_16.c":94:29)
#loc106 = loc("CWE617_Reachable_Assertion__connect_socket_16.c":94:17)
#loc107 = loc("CWE617_Reachable_Assertion__connect_socket_16.c":96:29)
#loc108 = loc("CWE617_Reachable_Assertion__connect_socket_16.c":96:24)
#loc109 = loc("CWE617_Reachable_Assertion__connect_socket_16.c":96:17)
#loc110 = loc("CWE617_Reachable_Assertion__connect_socket_16.c":96:40)
#loc111 = loc("CWE617_Reachable_Assertion__connect_socket_16.c":98:20)
#loc112 = loc("CWE617_Reachable_Assertion__connect_socket_16.c":99:13)
#loc113 = loc("CWE617_Reachable_Assertion__connect_socket_16.c":102:13)
#loc114 = loc("CWE617_Reachable_Assertion__connect_socket_16.c":99:17)
#loc115 = loc("CWE617_Reachable_Assertion__connect_socket_16.c":99:34)
#loc116 = loc("CWE617_Reachable_Assertion__connect_socket_16.c":100:13)
#loc117 = loc("CWE617_Reachable_Assertion__connect_socket_16.c":101:30)
#loc118 = loc("CWE617_Reachable_Assertion__connect_socket_16.c":101:17)
#loc119 = loc("CWE617_Reachable_Assertion__connect_socket_16.c":110:9)
#loc120 = loc("CWE617_Reachable_Assertion__connect_socket_16.c":136:1)
#loc121 = loc("CWE617_Reachable_Assertion__connect_socket_16.c":139:1)
#loc122 = loc("CWE617_Reachable_Assertion__connect_socket_16.c":138:5)
#loc123 = loc("CWE617_Reachable_Assertion__connect_socket_16.c":138:13)
#loc124 = loc("CWE617_Reachable_Assertion__connect_socket_16.c":133:5)
#loc125 = loc("CWE617_Reachable_Assertion__connect_socket_16.c":121:1)
#loc126 = loc("CWE617_Reachable_Assertion__connect_socket_16.c":134:1)
#loc127 = loc("CWE617_Reachable_Assertion__connect_socket_16.c":123:5)
#loc128 = loc("CWE617_Reachable_Assertion__connect_socket_16.c":123:9)
#loc129 = loc("CWE617_Reachable_Assertion__connect_socket_16.c":125:13)
#loc130 = loc("CWE617_Reachable_Assertion__connect_socket_16.c":125:12)
#loc131 = loc("CWE617_Reachable_Assertion__connect_socket_16.c":125:5)
#loc132 = loc("CWE617_Reachable_Assertion__connect_socket_16.c":126:5)
#loc133 = loc("CWE617_Reachable_Assertion__connect_socket_16.c":131:5)
#loc134 = loc("CWE617_Reachable_Assertion__connect_socket_16.c":126:11)
#loc135 = loc("CWE617_Reachable_Assertion__connect_socket_16.c":127:5)
#loc136 = loc("CWE617_Reachable_Assertion__connect_socket_16.c":129:16)
#loc137 = loc("CWE617_Reachable_Assertion__connect_socket_16.c":129:29)
#loc138 = loc("CWE617_Reachable_Assertion__connect_socket_16.c":129:9)
#loc139 = loc("CWE617_Reachable_Assertion__connect_socket_16.c":130:9)
#loc140 = loc(fused[#loc1, #loc2])
#loc141 = loc(fused[#loc3, #loc4])
#loc142 = loc(fused[#loc6, #loc7])
#loc143 = loc(fused[#loc8, #loc9])
#loc144 = loc(fused[#loc10, #loc11])
#loc145 = loc(fused[#loc12, #loc13])
#loc146 = loc(fused[#loc14, #loc15])
#loc147 = loc(fused[#loc16, #loc17])
#loc148 = loc(fused[#loc19, #loc20])
#loc149 = loc(fused[#loc21, #loc22])
#loc150 = loc(fused[#loc25, #loc23])
#loc151 = loc(fused[#loc26, #loc27])
#loc152 = loc(fused[#loc29, #loc27])
#loc153 = loc(fused[#loc30, #loc31])
#loc154 = loc(fused[#loc32, #loc33])
#loc155 = loc(fused[#loc34, #loc35])
#loc156 = loc(fused[#loc36, #loc37])
#loc157 = loc(fused[#loc38, #loc39])
#loc158 = loc(fused[#loc40, #loc41])
#loc159 = loc(fused[#loc42, #loc43])
#loc160 = loc(fused[#loc48, #loc49])
#loc161 = loc(fused[#loc50, #loc51])
#loc162 = loc(fused[#loc52, #loc53])
#loc163 = loc(fused[#loc54, #loc51])
#loc164 = loc(fused[#loc56, #loc57])
#loc165 = loc(fused[#loc59, #loc60])
#loc166 = loc(fused[#loc61, #loc62])
#loc167 = loc(fused[#loc65, #loc63])
#loc168 = loc(fused[#loc69, #loc70])
#loc169 = loc(fused[#loc74, #loc75])
#loc170 = loc(fused[#loc76, #loc77])
#loc171 = loc(fused[#loc79, #loc80])
#loc172 = loc(fused[#loc81, #loc82])
#loc173 = loc(fused[#loc83, #loc84])
#loc174 = loc(fused[#loc85, #loc77])
#loc175 = loc(fused[#loc89, #loc90])
#loc176 = loc(fused[#loc93, #loc94])
#loc177 = loc(fused[#loc95, #loc96])
#loc178 = loc(fused[#loc97, #loc98])
#loc179 = loc(fused[#loc100, #loc101])
#loc180 = loc(fused[#loc102, #loc96])
#loc181 = loc(fused[#loc106, #loc104])
#loc182 = loc(fused[#loc109, #loc110])
#loc183 = loc(fused[#loc112, #loc113])
#loc184 = loc(fused[#loc114, #loc115])
#loc185 = loc(fused[#loc116, #loc113])
#loc186 = loc(fused[#loc120, #loc121])
#loc187 = loc(fused[#loc122, #loc123])
#loc188 = loc(fused[#loc125, #loc126])
#loc189 = loc(fused[#loc127, #loc128])
#loc190 = loc(fused[#loc131, #loc129])
#loc191 = loc(fused[#loc132, #loc133])
#loc192 = loc(fused[#loc135, #loc133])
#loc193 = loc(fused[#loc138, #loc137])
