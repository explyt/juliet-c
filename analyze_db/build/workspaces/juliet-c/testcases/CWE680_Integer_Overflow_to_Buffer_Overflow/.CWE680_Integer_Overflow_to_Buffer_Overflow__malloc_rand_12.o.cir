!s32i = !cir.int<s, 32>
!u32i = !cir.int<u, 32>
!u64i = !cir.int<u, 64>
!void = !cir.void
#fn_attr = #cir<extra({nothrow = #cir.nothrow})>
#fn_attr1 = #cir<extra({inline = #cir.inline<no>, nothrow = #cir.nothrow, optnone = #cir.optnone, uwtable = #cir.uwtable<async>})>
module @"/workspaces/juliet-c/testcases/CWE680_Integer_Overflow_to_Buffer_Overflow/CWE680_Integer_Overflow_to_Buffer_Overflow__malloc_rand_12.c" attributes {cir.lang = #cir.lang<c>, cir.sob = #cir.signed_overflow_behavior<undefined>, cir.triple = "x86_64-unknown-linux-gnu", cir.type_size_info = #cir.type_size_info<char = 8, int = 32, size_t = 64>, cir.uwtable = #cir.uwtable<async>, dlti.dl_spec = #dlti.dl_spec<i128 = dense<128> : vector<2xi64>, i64 = dense<64> : vector<2xi64>, i1 = dense<8> : vector<2xi64>, !llvm.ptr = dense<64> : vector<4xi64>, f80 = dense<128> : vector<2xi64>, f16 = dense<16> : vector<2xi64>, f64 = dense<64> : vector<2xi64>, f128 = dense<128> : vector<2xi64>, !llvm.ptr<272> = dense<64> : vector<4xi64>, !llvm.ptr<270> = dense<32> : vector<4xi64>, !llvm.ptr<271> = dense<32> : vector<4xi64>, i8 = dense<8> : vector<2xi64>, i16 = dense<16> : vector<2xi64>, i32 = dense<32> : vector<2xi64>, "dlti.stack_alignment" = 128 : i64, "dlti.endianness" = "little", "dlti.mangling_mode" = "e">} {
  cir.func no_proto private @globalReturnsTrueOrFalse(...) -> !s32i loc(#loc133)
  cir.func private @rand() -> !s32i extra(#fn_attr) loc(#loc134)
  cir.func private @malloc(!u64i) -> !cir.ptr<!void> extra(#fn_attr) loc(#loc135)
  cir.func private @exit(!s32i) extra(#fn_attr) loc(#loc136)
  cir.func private @printIntLine(!s32i) loc(#loc137)
  cir.func private @free(!cir.ptr<!void>) extra(#fn_attr) loc(#loc138)
  cir.func no_proto @CWE680_Integer_Overflow_to_Buffer_Overflow__malloc_rand_12_bad() extra(#fn_attr1) {
    %0 = cir.alloca !s32i, !cir.ptr<!s32i>, ["data"] {alignment = 4 : i64} loc(#loc140)
    %1 = cir.const #cir.int<1> : !s32i loc(#loc17)
    %2 = cir.unary(minus, %1) nsw : !s32i, !s32i loc(#loc18)
    cir.store %2, %0 : !s32i, !cir.ptr<!s32i> loc(#loc141)
    cir.scope {
      %3 = cir.get_global @globalReturnsTrueOrFalse : !cir.ptr<!cir.func<(...) -> !s32i>> loc(#loc143)
      %4 = cir.cast(bitcast, %3 : !cir.ptr<!cir.func<(...) -> !s32i>>), !cir.ptr<!cir.func<() -> !s32i>> loc(#loc143)
      %5 = cir.call %4() : (!cir.ptr<!cir.func<() -> !s32i>>) -> !s32i loc(#loc22)
      %6 = cir.cast(int_to_bool, %5 : !s32i), !cir.bool loc(#loc22)
      cir.if %6 {
        %7 = cir.call @rand() : () -> !s32i extra(#fn_attr) loc(#loc27)
        %8 = cir.const #cir.int<1> : !s32i loc(#loc27)
        %9 = cir.binop(and, %7, %8) : !s32i loc(#loc27)
        %10 = cir.cast(int_to_bool, %9 : !s32i), !cir.bool loc(#loc27)
        %11 = cir.ternary(%10, true {
          %13 = cir.call @rand() : () -> !s32i extra(#fn_attr) loc(#loc27)
          %14 = cir.cast(integral, %13 : !s32i), !u32i loc(#loc27)
          %15 = cir.const #cir.int<30> : !s32i loc(#loc27)
          %16 = cir.shift(left, %14 : !u32i, %15 : !s32i) -> !u32i loc(#loc27)
          %17 = cir.call @rand() : () -> !s32i extra(#fn_attr) loc(#loc27)
          %18 = cir.cast(integral, %17 : !s32i), !u32i loc(#loc27)
          %19 = cir.const #cir.int<15> : !s32i loc(#loc27)
          %20 = cir.shift(left, %18 : !u32i, %19 : !s32i) -> !u32i loc(#loc27)
          %21 = cir.binop(xor, %16, %20) : !u32i loc(#loc27)
          %22 = cir.call @rand() : () -> !s32i extra(#fn_attr) loc(#loc27)
          %23 = cir.cast(integral, %22 : !s32i), !u32i loc(#loc27)
          %24 = cir.binop(xor, %21, %23) : !u32i loc(#loc27)
          cir.yield %24 : !u32i loc(#loc27)
        }, false {
          %13 = cir.call @rand() : () -> !s32i extra(#fn_attr) loc(#loc27)
          %14 = cir.cast(integral, %13 : !s32i), !u32i loc(#loc27)
          %15 = cir.const #cir.int<30> : !s32i loc(#loc27)
          %16 = cir.shift(left, %14 : !u32i, %15 : !s32i) -> !u32i loc(#loc27)
          %17 = cir.call @rand() : () -> !s32i extra(#fn_attr) loc(#loc27)
          %18 = cir.cast(integral, %17 : !s32i), !u32i loc(#loc27)
          %19 = cir.const #cir.int<15> : !s32i loc(#loc27)
          %20 = cir.shift(left, %18 : !u32i, %19 : !s32i) -> !u32i loc(#loc27)
          %21 = cir.binop(xor, %16, %20) : !u32i loc(#loc27)
          %22 = cir.call @rand() : () -> !s32i extra(#fn_attr) loc(#loc27)
          %23 = cir.cast(integral, %22 : !s32i), !u32i loc(#loc27)
          %24 = cir.binop(xor, %21, %23) : !u32i loc(#loc27)
          %25 = cir.unary(minus, %24) : !u32i, !u32i loc(#loc27)
          %26 = cir.const #cir.int<1> : !s32i loc(#loc27)
          %27 = cir.cast(integral, %26 : !s32i), !u32i loc(#loc27)
          %28 = cir.binop(sub, %25, %27) : !u32i loc(#loc27)
          cir.yield %28 : !u32i loc(#loc27)
        }) : (!cir.bool) -> !u32i loc(#loc27)
        %12 = cir.cast(integral, %11 : !u32i), !s32i loc(#loc27)
        cir.store %12, %0 : !s32i, !cir.ptr<!s32i> loc(#loc145)
      } else {
        %7 = cir.const #cir.int<20> : !s32i loc(#loc29)
        cir.store %7, %0 : !s32i, !cir.ptr<!s32i> loc(#loc146)
      } loc(#loc144)
    } loc(#loc142)
    cir.scope {
      %3 = cir.alloca !u64i, !cir.ptr<!u64i>, ["i"] {alignment = 8 : i64} loc(#loc148)
      %4 = cir.alloca !cir.ptr<!s32i>, !cir.ptr<!cir.ptr<!s32i>>, ["intPointer"] {alignment = 8 : i64} loc(#loc149)
      %5 = cir.get_global @malloc : !cir.ptr<!cir.func<(!u64i) -> !cir.ptr<!void>>> loc(#loc37)
      %6 = cir.load %0 : !cir.ptr<!s32i>, !s32i loc(#loc38)
      %7 = cir.cast(integral, %6 : !s32i), !u64i loc(#loc38)
      %8 = cir.const #cir.int<4> : !u64i loc(#loc150)
      %9 = cir.binop(mul, %7, %8) : !u64i loc(#loc151)
      %10 = cir.call @malloc(%9) : (!u64i) -> !cir.ptr<!void> extra(#fn_attr) loc(#loc37)
      %11 = cir.cast(bitcast, %10 : !cir.ptr<!void>), !cir.ptr<!s32i> loc(#loc152)
      cir.store %11, %4 : !cir.ptr<!s32i>, !cir.ptr<!cir.ptr<!s32i>> loc(#loc153)
      cir.scope {
        %19 = cir.load %4 : !cir.ptr<!cir.ptr<!s32i>>, !cir.ptr<!s32i> loc(#loc45)
        %20 = cir.const #cir.ptr<null> : !cir.ptr<!void> loc(#loc46)
        %21 = cir.cast(bitcast, %20 : !cir.ptr<!void>), !cir.ptr<!s32i> loc(#loc46)
        %22 = cir.cmp(eq, %19, %21) : !cir.ptr<!s32i>, !cir.bool loc(#loc155)
        cir.if %22 {
          %23 = cir.get_global @exit : !cir.ptr<!cir.func<(!s32i)>> loc(#loc48)
          %24 = cir.const #cir.int<1> : !s32i loc(#loc49)
          %25 = cir.unary(minus, %24) nsw : !s32i, !s32i loc(#loc50)
          cir.call @exit(%25) : (!s32i) -> () extra(#fn_attr) loc(#loc48)
        } loc(#loc156)
      } loc(#loc154)
      cir.scope {
        %19 = cir.const #cir.int<0> : !s32i loc(#loc53)
        %20 = cir.cast(integral, %19 : !s32i), !u64i loc(#loc53)
        cir.store %20, %3 : !u64i, !cir.ptr<!u64i> loc(#loc158)
        cir.for : cond {
          %21 = cir.load %3 : !cir.ptr<!u64i>, !u64i loc(#loc55)
          %22 = cir.load %0 : !cir.ptr<!s32i>, !s32i loc(#loc56)
          %23 = cir.cast(integral, %22 : !s32i), !u64i loc(#loc56)
          %24 = cir.cmp(lt, %21, %23) : !u64i, !cir.bool loc(#loc159)
          cir.condition(%24) loc(#loc57)
        } body {
          cir.scope {
            %21 = cir.const #cir.int<0> : !s32i loc(#loc59)
            %22 = cir.load %4 : !cir.ptr<!cir.ptr<!s32i>>, !cir.ptr<!s32i> loc(#loc60)
            %23 = cir.load %3 : !cir.ptr<!u64i>, !u64i loc(#loc61)
            %24 = cir.ptr_stride(%22 : !cir.ptr<!s32i>, %23 : !u64i), !cir.ptr<!s32i> loc(#loc62)
            cir.store %21, %24 : !s32i, !cir.ptr<!s32i> loc(#loc161)
          } loc(#loc160)
          cir.yield loc(#loc52)
        } step {
          %21 = cir.load %3 : !cir.ptr<!u64i>, !u64i loc(#loc63)
          %22 = cir.unary(inc, %21) : !u64i, !u64i loc(#loc64)
          cir.store %22, %3 : !u64i, !cir.ptr<!u64i> loc(#loc162)
          cir.yield loc(#loc157)
        } loc(#loc157)
      } loc(#loc157)
      %12 = cir.load %4 : !cir.ptr<!cir.ptr<!s32i>>, !cir.ptr<!s32i> loc(#loc65)
      %13 = cir.const #cir.int<0> : !s32i loc(#loc66)
      %14 = cir.ptr_stride(%12 : !cir.ptr<!s32i>, %13 : !s32i), !cir.ptr<!s32i> loc(#loc67)
      %15 = cir.load %14 : !cir.ptr<!s32i>, !s32i loc(#loc65)
      cir.call @printIntLine(%15) : (!s32i) -> () loc(#loc68)
      %16 = cir.get_global @free : !cir.ptr<!cir.func<(!cir.ptr<!void>)>> loc(#loc69)
      %17 = cir.load %4 : !cir.ptr<!cir.ptr<!s32i>>, !cir.ptr<!s32i> loc(#loc70)
      %18 = cir.cast(bitcast, %17 : !cir.ptr<!s32i>), !cir.ptr<!void> loc(#loc70)
      cir.call @free(%18) : (!cir.ptr<!void>) -> () extra(#fn_attr) loc(#loc69)
    } loc(#loc147)
    cir.return loc(#loc14)
  } loc(#loc139)
  cir.func no_proto @CWE680_Integer_Overflow_to_Buffer_Overflow__malloc_rand_12_good() extra(#fn_attr1) {
    %0 = cir.get_global @goodG2B : !cir.ptr<!cir.func<()>> loc(#loc164)
    cir.call %0() : (!cir.ptr<!cir.func<()>>) -> () loc(#loc73)
    cir.return loc(#loc72)
  } loc(#loc163)
  cir.func no_proto internal private @goodG2B() extra(#fn_attr1) {
    %0 = cir.alloca !s32i, !cir.ptr<!s32i>, ["data"] {alignment = 4 : i64} loc(#loc166)
    %1 = cir.const #cir.int<1> : !s32i loc(#loc79)
    %2 = cir.unary(minus, %1) nsw : !s32i, !s32i loc(#loc80)
    cir.store %2, %0 : !s32i, !cir.ptr<!s32i> loc(#loc167)
    cir.scope {
      %3 = cir.get_global @globalReturnsTrueOrFalse : !cir.ptr<!cir.func<(...) -> !s32i>> loc(#loc169)
      %4 = cir.cast(bitcast, %3 : !cir.ptr<!cir.func<(...) -> !s32i>>), !cir.ptr<!cir.func<() -> !s32i>> loc(#loc169)
      %5 = cir.call %4() : (!cir.ptr<!cir.func<() -> !s32i>>) -> !s32i loc(#loc84)
      %6 = cir.cast(int_to_bool, %5 : !s32i), !cir.bool loc(#loc84)
      cir.if %6 {
        %7 = cir.const #cir.int<20> : !s32i loc(#loc89)
        cir.store %7, %0 : !s32i, !cir.ptr<!s32i> loc(#loc171)
      } else {
        %7 = cir.const #cir.int<20> : !s32i loc(#loc91)
        cir.store %7, %0 : !s32i, !cir.ptr<!s32i> loc(#loc172)
      } loc(#loc170)
    } loc(#loc168)
    cir.scope {
      %3 = cir.alloca !u64i, !cir.ptr<!u64i>, ["i"] {alignment = 8 : i64} loc(#loc174)
      %4 = cir.alloca !cir.ptr<!s32i>, !cir.ptr<!cir.ptr<!s32i>>, ["intPointer"] {alignment = 8 : i64} loc(#loc175)
      %5 = cir.get_global @malloc : !cir.ptr<!cir.func<(!u64i) -> !cir.ptr<!void>>> loc(#loc99)
      %6 = cir.load %0 : !cir.ptr<!s32i>, !s32i loc(#loc100)
      %7 = cir.cast(integral, %6 : !s32i), !u64i loc(#loc100)
      %8 = cir.const #cir.int<4> : !u64i loc(#loc176)
      %9 = cir.binop(mul, %7, %8) : !u64i loc(#loc177)
      %10 = cir.call @malloc(%9) : (!u64i) -> !cir.ptr<!void> extra(#fn_attr) loc(#loc99)
      %11 = cir.cast(bitcast, %10 : !cir.ptr<!void>), !cir.ptr<!s32i> loc(#loc178)
      cir.store %11, %4 : !cir.ptr<!s32i>, !cir.ptr<!cir.ptr<!s32i>> loc(#loc179)
      cir.scope {
        %19 = cir.load %4 : !cir.ptr<!cir.ptr<!s32i>>, !cir.ptr<!s32i> loc(#loc107)
        %20 = cir.const #cir.ptr<null> : !cir.ptr<!void> loc(#loc108)
        %21 = cir.cast(bitcast, %20 : !cir.ptr<!void>), !cir.ptr<!s32i> loc(#loc108)
        %22 = cir.cmp(eq, %19, %21) : !cir.ptr<!s32i>, !cir.bool loc(#loc181)
        cir.if %22 {
          %23 = cir.get_global @exit : !cir.ptr<!cir.func<(!s32i)>> loc(#loc110)
          %24 = cir.const #cir.int<1> : !s32i loc(#loc111)
          %25 = cir.unary(minus, %24) nsw : !s32i, !s32i loc(#loc112)
          cir.call @exit(%25) : (!s32i) -> () extra(#fn_attr) loc(#loc110)
        } loc(#loc182)
      } loc(#loc180)
      cir.scope {
        %19 = cir.const #cir.int<0> : !s32i loc(#loc115)
        %20 = cir.cast(integral, %19 : !s32i), !u64i loc(#loc115)
        cir.store %20, %3 : !u64i, !cir.ptr<!u64i> loc(#loc184)
        cir.for : cond {
          %21 = cir.load %3 : !cir.ptr<!u64i>, !u64i loc(#loc117)
          %22 = cir.load %0 : !cir.ptr<!s32i>, !s32i loc(#loc118)
          %23 = cir.cast(integral, %22 : !s32i), !u64i loc(#loc118)
          %24 = cir.cmp(lt, %21, %23) : !u64i, !cir.bool loc(#loc185)
          cir.condition(%24) loc(#loc119)
        } body {
          cir.scope {
            %21 = cir.const #cir.int<0> : !s32i loc(#loc121)
            %22 = cir.load %4 : !cir.ptr<!cir.ptr<!s32i>>, !cir.ptr<!s32i> loc(#loc122)
            %23 = cir.load %3 : !cir.ptr<!u64i>, !u64i loc(#loc123)
            %24 = cir.ptr_stride(%22 : !cir.ptr<!s32i>, %23 : !u64i), !cir.ptr<!s32i> loc(#loc124)
            cir.store %21, %24 : !s32i, !cir.ptr<!s32i> loc(#loc187)
          } loc(#loc186)
          cir.yield loc(#loc114)
        } step {
          %21 = cir.load %3 : !cir.ptr<!u64i>, !u64i loc(#loc125)
          %22 = cir.unary(inc, %21) : !u64i, !u64i loc(#loc126)
          cir.store %22, %3 : !u64i, !cir.ptr<!u64i> loc(#loc188)
          cir.yield loc(#loc183)
        } loc(#loc183)
      } loc(#loc183)
      %12 = cir.load %4 : !cir.ptr<!cir.ptr<!s32i>>, !cir.ptr<!s32i> loc(#loc127)
      %13 = cir.const #cir.int<0> : !s32i loc(#loc128)
      %14 = cir.ptr_stride(%12 : !cir.ptr<!s32i>, %13 : !s32i), !cir.ptr<!s32i> loc(#loc129)
      %15 = cir.load %14 : !cir.ptr<!s32i>, !s32i loc(#loc127)
      cir.call @printIntLine(%15) : (!s32i) -> () loc(#loc130)
      %16 = cir.get_global @free : !cir.ptr<!cir.func<(!cir.ptr<!void>)>> loc(#loc131)
      %17 = cir.load %4 : !cir.ptr<!cir.ptr<!s32i>>, !cir.ptr<!s32i> loc(#loc132)
      %18 = cir.cast(bitcast, %17 : !cir.ptr<!s32i>), !cir.ptr<!void> loc(#loc132)
      cir.call @free(%18) : (!cir.ptr<!void>) -> () extra(#fn_attr) loc(#loc131)
    } loc(#loc173)
    cir.return loc(#loc76)
  } loc(#loc165)
} loc(#loc)
#loc = loc("/workspaces/juliet-c/testcases/CWE680_Integer_Overflow_to_Buffer_Overflow/CWE680_Integer_Overflow_to_Buffer_Overflow__malloc_rand_12.c":0:0)
#loc1 = loc("../../testcasesupport/std_testcase_io.h":52:1)
#loc2 = loc("../../testcasesupport/std_testcase_io.h":52:30)
#loc3 = loc("/usr/include/stdlib.h":573:1)
#loc4 = loc("/usr/include/stdlib.h":573:24)
#loc5 = loc("/usr/include/stdlib.h":672:1)
#loc6 = loc("/usr/include/stdlib.h":672:45)
#loc7 = loc("/usr/include/stdlib.h":756:1)
#loc8 = loc("/usr/include/stdlib.h":756:70)
#loc9 = loc("../../testcasesupport/std_testcase_io.h":18:1)
#loc10 = loc("../../testcasesupport/std_testcase_io.h":18:33)
#loc11 = loc("/usr/include/stdlib.h":687:1)
#loc12 = loc("/usr/include/stdlib.h":687:32)
#loc13 = loc("CWE680_Integer_Overflow_to_Buffer_Overflow__malloc_rand_12.c":21:1)
#loc14 = loc("CWE680_Integer_Overflow_to_Buffer_Overflow__malloc_rand_12.c":50:1)
#loc15 = loc("CWE680_Integer_Overflow_to_Buffer_Overflow__malloc_rand_12.c":23:5)
#loc16 = loc("CWE680_Integer_Overflow_to_Buffer_Overflow__malloc_rand_12.c":23:9)
#loc17 = loc("CWE680_Integer_Overflow_to_Buffer_Overflow__malloc_rand_12.c":25:13)
#loc18 = loc("CWE680_Integer_Overflow_to_Buffer_Overflow__malloc_rand_12.c":25:12)
#loc19 = loc("CWE680_Integer_Overflow_to_Buffer_Overflow__malloc_rand_12.c":25:5)
#loc20 = loc("CWE680_Integer_Overflow_to_Buffer_Overflow__malloc_rand_12.c":26:5)
#loc21 = loc("CWE680_Integer_Overflow_to_Buffer_Overflow__malloc_rand_12.c":35:5)
#loc22 = loc("CWE680_Integer_Overflow_to_Buffer_Overflow__malloc_rand_12.c":26:8)
#loc23 = loc("CWE680_Integer_Overflow_to_Buffer_Overflow__malloc_rand_12.c":26:33)
#loc24 = loc("CWE680_Integer_Overflow_to_Buffer_Overflow__malloc_rand_12.c":27:5)
#loc25 = loc("CWE680_Integer_Overflow_to_Buffer_Overflow__malloc_rand_12.c":30:5)
#loc26 = loc("CWE680_Integer_Overflow_to_Buffer_Overflow__malloc_rand_12.c":32:5)
#loc27 = loc("CWE680_Integer_Overflow_to_Buffer_Overflow__malloc_rand_12.c":29:16)
#loc28 = loc("CWE680_Integer_Overflow_to_Buffer_Overflow__malloc_rand_12.c":29:9)
#loc29 = loc("CWE680_Integer_Overflow_to_Buffer_Overflow__malloc_rand_12.c":34:16)
#loc30 = loc("CWE680_Integer_Overflow_to_Buffer_Overflow__malloc_rand_12.c":34:9)
#loc31 = loc("CWE680_Integer_Overflow_to_Buffer_Overflow__malloc_rand_12.c":36:5)
#loc32 = loc("CWE680_Integer_Overflow_to_Buffer_Overflow__malloc_rand_12.c":49:5)
#loc33 = loc("CWE680_Integer_Overflow_to_Buffer_Overflow__malloc_rand_12.c":37:9)
#loc34 = loc("CWE680_Integer_Overflow_to_Buffer_Overflow__malloc_rand_12.c":37:16)
#loc35 = loc("CWE680_Integer_Overflow_to_Buffer_Overflow__malloc_rand_12.c":38:9)
#loc36 = loc("CWE680_Integer_Overflow_to_Buffer_Overflow__malloc_rand_12.c":38:14)
#loc37 = loc("CWE680_Integer_Overflow_to_Buffer_Overflow__malloc_rand_12.c":41:28)
#loc38 = loc("CWE680_Integer_Overflow_to_Buffer_Overflow__malloc_rand_12.c":41:35)
#loc39 = loc("CWE680_Integer_Overflow_to_Buffer_Overflow__malloc_rand_12.c":41:42)
#loc40 = loc("CWE680_Integer_Overflow_to_Buffer_Overflow__malloc_rand_12.c":41:52)
#loc41 = loc("CWE680_Integer_Overflow_to_Buffer_Overflow__malloc_rand_12.c":41:53)
#loc42 = loc("CWE680_Integer_Overflow_to_Buffer_Overflow__malloc_rand_12.c":41:9)
#loc43 = loc("CWE680_Integer_Overflow_to_Buffer_Overflow__malloc_rand_12.c":42:9)
#loc44 = loc("CWE680_Integer_Overflow_to_Buffer_Overflow__malloc_rand_12.c":42:43)
#loc45 = loc("CWE680_Integer_Overflow_to_Buffer_Overflow__malloc_rand_12.c":42:13)
#loc46 = loc("CWE680_Integer_Overflow_to_Buffer_Overflow__malloc_rand_12.c":42:27)
#loc47 = loc("CWE680_Integer_Overflow_to_Buffer_Overflow__malloc_rand_12.c":42:33)
#loc48 = loc("CWE680_Integer_Overflow_to_Buffer_Overflow__malloc_rand_12.c":42:34)
#loc49 = loc("CWE680_Integer_Overflow_to_Buffer_Overflow__malloc_rand_12.c":42:40)
#loc50 = loc("CWE680_Integer_Overflow_to_Buffer_Overflow__malloc_rand_12.c":42:39)
#loc51 = loc("CWE680_Integer_Overflow_to_Buffer_Overflow__malloc_rand_12.c":43:9)
#loc52 = loc("CWE680_Integer_Overflow_to_Buffer_Overflow__malloc_rand_12.c":46:9)
#loc53 = loc("CWE680_Integer_Overflow_to_Buffer_Overflow__malloc_rand_12.c":43:18)
#loc54 = loc("CWE680_Integer_Overflow_to_Buffer_Overflow__malloc_rand_12.c":43:14)
#loc55 = loc("CWE680_Integer_Overflow_to_Buffer_Overflow__malloc_rand_12.c":43:21)
#loc56 = loc("CWE680_Integer_Overflow_to_Buffer_Overflow__malloc_rand_12.c":43:33)
#loc57 = loc("CWE680_Integer_Overflow_to_Buffer_Overflow__malloc_rand_12.c":43:23)
#loc58 = loc("CWE680_Integer_Overflow_to_Buffer_Overflow__malloc_rand_12.c":44:9)
#loc59 = loc("CWE680_Integer_Overflow_to_Buffer_Overflow__malloc_rand_12.c":45:29)
#loc60 = loc("CWE680_Integer_Overflow_to_Buffer_Overflow__malloc_rand_12.c":45:13)
#loc61 = loc("CWE680_Integer_Overflow_to_Buffer_Overflow__malloc_rand_12.c":45:24)
#loc62 = loc("CWE680_Integer_Overflow_to_Buffer_Overflow__malloc_rand_12.c":45:25)
#loc63 = loc("CWE680_Integer_Overflow_to_Buffer_Overflow__malloc_rand_12.c":43:40)
#loc64 = loc("CWE680_Integer_Overflow_to_Buffer_Overflow__malloc_rand_12.c":43:39)
#loc65 = loc("CWE680_Integer_Overflow_to_Buffer_Overflow__malloc_rand_12.c":47:22)
#loc66 = loc("CWE680_Integer_Overflow_to_Buffer_Overflow__malloc_rand_12.c":47:33)
#loc67 = loc("CWE680_Integer_Overflow_to_Buffer_Overflow__malloc_rand_12.c":47:34)
#loc68 = loc("CWE680_Integer_Overflow_to_Buffer_Overflow__malloc_rand_12.c":47:9)
#loc69 = loc("CWE680_Integer_Overflow_to_Buffer_Overflow__malloc_rand_12.c":48:9)
#loc70 = loc("CWE680_Integer_Overflow_to_Buffer_Overflow__malloc_rand_12.c":48:14)
#loc71 = loc("CWE680_Integer_Overflow_to_Buffer_Overflow__malloc_rand_12.c":89:1)
#loc72 = loc("CWE680_Integer_Overflow_to_Buffer_Overflow__malloc_rand_12.c":92:1)
#loc73 = loc("CWE680_Integer_Overflow_to_Buffer_Overflow__malloc_rand_12.c":91:5)
#loc74 = loc("CWE680_Integer_Overflow_to_Buffer_Overflow__malloc_rand_12.c":91:13)
#loc75 = loc("CWE680_Integer_Overflow_to_Buffer_Overflow__malloc_rand_12.c":58:1)
#loc76 = loc("CWE680_Integer_Overflow_to_Buffer_Overflow__malloc_rand_12.c":87:1)
#loc77 = loc("CWE680_Integer_Overflow_to_Buffer_Overflow__malloc_rand_12.c":60:5)
#loc78 = loc("CWE680_Integer_Overflow_to_Buffer_Overflow__malloc_rand_12.c":60:9)
#loc79 = loc("CWE680_Integer_Overflow_to_Buffer_Overflow__malloc_rand_12.c":62:13)
#loc80 = loc("CWE680_Integer_Overflow_to_Buffer_Overflow__malloc_rand_12.c":62:12)
#loc81 = loc("CWE680_Integer_Overflow_to_Buffer_Overflow__malloc_rand_12.c":62:5)
#loc82 = loc("CWE680_Integer_Overflow_to_Buffer_Overflow__malloc_rand_12.c":63:5)
#loc83 = loc("CWE680_Integer_Overflow_to_Buffer_Overflow__malloc_rand_12.c":72:5)
#loc84 = loc("CWE680_Integer_Overflow_to_Buffer_Overflow__malloc_rand_12.c":63:8)
#loc85 = loc("CWE680_Integer_Overflow_to_Buffer_Overflow__malloc_rand_12.c":63:33)
#loc86 = loc("CWE680_Integer_Overflow_to_Buffer_Overflow__malloc_rand_12.c":64:5)
#loc87 = loc("CWE680_Integer_Overflow_to_Buffer_Overflow__malloc_rand_12.c":67:5)
#loc88 = loc("CWE680_Integer_Overflow_to_Buffer_Overflow__malloc_rand_12.c":69:5)
#loc89 = loc("CWE680_Integer_Overflow_to_Buffer_Overflow__malloc_rand_12.c":66:16)
#loc90 = loc("CWE680_Integer_Overflow_to_Buffer_Overflow__malloc_rand_12.c":66:9)
#loc91 = loc("CWE680_Integer_Overflow_to_Buffer_Overflow__malloc_rand_12.c":71:16)
#loc92 = loc("CWE680_Integer_Overflow_to_Buffer_Overflow__malloc_rand_12.c":71:9)
#loc93 = loc("CWE680_Integer_Overflow_to_Buffer_Overflow__malloc_rand_12.c":73:5)
#loc94 = loc("CWE680_Integer_Overflow_to_Buffer_Overflow__malloc_rand_12.c":86:5)
#loc95 = loc("CWE680_Integer_Overflow_to_Buffer_Overflow__malloc_rand_12.c":74:9)
#loc96 = loc("CWE680_Integer_Overflow_to_Buffer_Overflow__malloc_rand_12.c":74:16)
#loc97 = loc("CWE680_Integer_Overflow_to_Buffer_Overflow__malloc_rand_12.c":75:9)
#loc98 = loc("CWE680_Integer_Overflow_to_Buffer_Overflow__malloc_rand_12.c":75:14)
#loc99 = loc("CWE680_Integer_Overflow_to_Buffer_Overflow__malloc_rand_12.c":78:28)
#loc100 = loc("CWE680_Integer_Overflow_to_Buffer_Overflow__malloc_rand_12.c":78:35)
#loc101 = loc("CWE680_Integer_Overflow_to_Buffer_Overflow__malloc_rand_12.c":78:42)
#loc102 = loc("CWE680_Integer_Overflow_to_Buffer_Overflow__malloc_rand_12.c":78:52)
#loc103 = loc("CWE680_Integer_Overflow_to_Buffer_Overflow__malloc_rand_12.c":78:53)
#loc104 = loc("CWE680_Integer_Overflow_to_Buffer_Overflow__malloc_rand_12.c":78:9)
#loc105 = loc("CWE680_Integer_Overflow_to_Buffer_Overflow__malloc_rand_12.c":79:9)
#loc106 = loc("CWE680_Integer_Overflow_to_Buffer_Overflow__malloc_rand_12.c":79:43)
#loc107 = loc("CWE680_Integer_Overflow_to_Buffer_Overflow__malloc_rand_12.c":79:13)
#loc108 = loc("CWE680_Integer_Overflow_to_Buffer_Overflow__malloc_rand_12.c":79:27)
#loc109 = loc("CWE680_Integer_Overflow_to_Buffer_Overflow__malloc_rand_12.c":79:33)
#loc110 = loc("CWE680_Integer_Overflow_to_Buffer_Overflow__malloc_rand_12.c":79:34)
#loc111 = loc("CWE680_Integer_Overflow_to_Buffer_Overflow__malloc_rand_12.c":79:40)
#loc112 = loc("CWE680_Integer_Overflow_to_Buffer_Overflow__malloc_rand_12.c":79:39)
#loc113 = loc("CWE680_Integer_Overflow_to_Buffer_Overflow__malloc_rand_12.c":80:9)
#loc114 = loc("CWE680_Integer_Overflow_to_Buffer_Overflow__malloc_rand_12.c":83:9)
#loc115 = loc("CWE680_Integer_Overflow_to_Buffer_Overflow__malloc_rand_12.c":80:18)
#loc116 = loc("CWE680_Integer_Overflow_to_Buffer_Overflow__malloc_rand_12.c":80:14)
#loc117 = loc("CWE680_Integer_Overflow_to_Buffer_Overflow__malloc_rand_12.c":80:21)
#loc118 = loc("CWE680_Integer_Overflow_to_Buffer_Overflow__malloc_rand_12.c":80:33)
#loc119 = loc("CWE680_Integer_Overflow_to_Buffer_Overflow__malloc_rand_12.c":80:23)
#loc120 = loc("CWE680_Integer_Overflow_to_Buffer_Overflow__malloc_rand_12.c":81:9)
#loc121 = loc("CWE680_Integer_Overflow_to_Buffer_Overflow__malloc_rand_12.c":82:29)
#loc122 = loc("CWE680_Integer_Overflow_to_Buffer_Overflow__malloc_rand_12.c":82:13)
#loc123 = loc("CWE680_Integer_Overflow_to_Buffer_Overflow__malloc_rand_12.c":82:24)
#loc124 = loc("CWE680_Integer_Overflow_to_Buffer_Overflow__malloc_rand_12.c":82:25)
#loc125 = loc("CWE680_Integer_Overflow_to_Buffer_Overflow__malloc_rand_12.c":80:40)
#loc126 = loc("CWE680_Integer_Overflow_to_Buffer_Overflow__malloc_rand_12.c":80:39)
#loc127 = loc("CWE680_Integer_Overflow_to_Buffer_Overflow__malloc_rand_12.c":84:22)
#loc128 = loc("CWE680_Integer_Overflow_to_Buffer_Overflow__malloc_rand_12.c":84:33)
#loc129 = loc("CWE680_Integer_Overflow_to_Buffer_Overflow__malloc_rand_12.c":84:34)
#loc130 = loc("CWE680_Integer_Overflow_to_Buffer_Overflow__malloc_rand_12.c":84:9)
#loc131 = loc("CWE680_Integer_Overflow_to_Buffer_Overflow__malloc_rand_12.c":85:9)
#loc132 = loc("CWE680_Integer_Overflow_to_Buffer_Overflow__malloc_rand_12.c":85:14)
#loc133 = loc(fused[#loc1, #loc2])
#loc134 = loc(fused[#loc3, #loc4])
#loc135 = loc(fused[#loc5, #loc6])
#loc136 = loc(fused[#loc7, #loc8])
#loc137 = loc(fused[#loc9, #loc10])
#loc138 = loc(fused[#loc11, #loc12])
#loc139 = loc(fused[#loc13, #loc14])
#loc140 = loc(fused[#loc15, #loc16])
#loc141 = loc(fused[#loc19, #loc17])
#loc142 = loc(fused[#loc20, #loc21])
#loc143 = loc(fused[#loc22, #loc23])
#loc144 = loc(fused[#loc24, #loc25, #loc26, #loc21])
#loc145 = loc(fused[#loc28, #loc27])
#loc146 = loc(fused[#loc30, #loc29])
#loc147 = loc(fused[#loc31, #loc32])
#loc148 = loc(fused[#loc33, #loc34])
#loc149 = loc(fused[#loc35, #loc36])
#loc150 = loc(fused[#loc39, #loc40])
#loc151 = loc(fused[#loc38, #loc40])
#loc152 = loc(fused[#loc37, #loc41])
#loc153 = loc(fused[#loc42, #loc41])
#loc154 = loc(fused[#loc43, #loc44])
#loc155 = loc(fused[#loc45, #loc46])
#loc156 = loc(fused[#loc47, #loc44])
#loc157 = loc(fused[#loc51, #loc52])
#loc158 = loc(fused[#loc54, #loc53])
#loc159 = loc(fused[#loc55, #loc56])
#loc160 = loc(fused[#loc58, #loc52])
#loc161 = loc(fused[#loc60, #loc59])
#loc162 = loc(fused[#loc64, #loc63])
#loc163 = loc(fused[#loc71, #loc72])
#loc164 = loc(fused[#loc73, #loc74])
#loc165 = loc(fused[#loc75, #loc76])
#loc166 = loc(fused[#loc77, #loc78])
#loc167 = loc(fused[#loc81, #loc79])
#loc168 = loc(fused[#loc82, #loc83])
#loc169 = loc(fused[#loc84, #loc85])
#loc170 = loc(fused[#loc86, #loc87, #loc88, #loc83])
#loc171 = loc(fused[#loc90, #loc89])
#loc172 = loc(fused[#loc92, #loc91])
#loc173 = loc(fused[#loc93, #loc94])
#loc174 = loc(fused[#loc95, #loc96])
#loc175 = loc(fused[#loc97, #loc98])
#loc176 = loc(fused[#loc101, #loc102])
#loc177 = loc(fused[#loc100, #loc102])
#loc178 = loc(fused[#loc99, #loc103])
#loc179 = loc(fused[#loc104, #loc103])
#loc180 = loc(fused[#loc105, #loc106])
#loc181 = loc(fused[#loc107, #loc108])
#loc182 = loc(fused[#loc109, #loc106])
#loc183 = loc(fused[#loc113, #loc114])
#loc184 = loc(fused[#loc116, #loc115])
#loc185 = loc(fused[#loc117, #loc118])
#loc186 = loc(fused[#loc120, #loc114])
#loc187 = loc(fused[#loc122, #loc121])
#loc188 = loc(fused[#loc126, #loc125])
