!s16i = !cir.int<s, 16>
!s32i = !cir.int<s, 32>
!s8i = !cir.int<s, 8>
#fn_attr = #cir<extra({inline = #cir.inline<no>, nothrow = #cir.nothrow, optnone = #cir.optnone, uwtable = #cir.uwtable<async>})>
#loc5 = loc("CWE191_Integer_Underflow__short_fscanf_multiply_54e.c":22:66)
#loc6 = loc("CWE191_Integer_Underflow__short_fscanf_multiply_54e.c":22:72)
#loc20 = loc("CWE191_Integer_Underflow__short_fscanf_multiply_54e.c":37:70)
#loc21 = loc("CWE191_Integer_Underflow__short_fscanf_multiply_54e.c":37:76)
#loc38 = loc("CWE191_Integer_Underflow__short_fscanf_multiply_54e.c":48:70)
#loc39 = loc("CWE191_Integer_Underflow__short_fscanf_multiply_54e.c":48:76)
#loc63 = loc(fused[#loc5, #loc6])
#loc69 = loc(fused[#loc20, #loc21])
#loc76 = loc(fused[#loc38, #loc39])
module @"/workspaces/juliet-c/testcases/CWE191_Integer_Underflow/s03/CWE191_Integer_Underflow__short_fscanf_multiply_54e.c" attributes {cir.lang = #cir.lang<c>, cir.sob = #cir.signed_overflow_behavior<undefined>, cir.triple = "x86_64-unknown-linux-gnu", cir.type_size_info = #cir.type_size_info<char = 8, int = 32, size_t = 64>, cir.uwtable = #cir.uwtable<async>, dlti.dl_spec = #dlti.dl_spec<i128 = dense<128> : vector<2xi64>, !llvm.ptr<270> = dense<32> : vector<4xi64>, f80 = dense<128> : vector<2xi64>, !llvm.ptr = dense<64> : vector<4xi64>, i1 = dense<8> : vector<2xi64>, i8 = dense<8> : vector<2xi64>, i32 = dense<32> : vector<2xi64>, i16 = dense<16> : vector<2xi64>, f64 = dense<64> : vector<2xi64>, f16 = dense<16> : vector<2xi64>, !llvm.ptr<271> = dense<32> : vector<4xi64>, f128 = dense<128> : vector<2xi64>, i64 = dense<64> : vector<2xi64>, !llvm.ptr<272> = dense<64> : vector<4xi64>, "dlti.stack_alignment" = 128 : i64, "dlti.mangling_mode" = "e", "dlti.endianness" = "little">} {
  cir.func private @printIntLine(!s32i) loc(#loc61)
  cir.func @CWE191_Integer_Underflow__short_fscanf_multiply_54e_badSink(%arg0: !s16i loc(fused[#loc5, #loc6])) extra(#fn_attr) {
    %0 = cir.alloca !s16i, !cir.ptr<!s16i>, ["result", init] {alignment = 2 : i64} loc(#loc64)
    %1 = cir.alloca !s16i, !cir.ptr<!s16i>, ["data", init] {alignment = 2 : i64} loc(#loc63)
    cir.store %arg0, %1 : !s16i, !cir.ptr<!s16i> loc(#loc9)
    cir.br ^bb1 loc(#loc65)
  ^bb1:  // pred: ^bb0
    %2 = cir.load %1 : !cir.ptr<!s16i>, !s16i loc(#loc12)
    %3 = cir.cast(integral, %2 : !s16i), !s32i loc(#loc12)
    %4 = cir.const #cir.int<0> : !s32i loc(#loc13)
    %5 = cir.cmp(lt, %3, %4) : !s32i, !cir.bool loc(#loc66)
    cir.brcond %5 ^bb2, ^bb3 loc(#loc67)
  ^bb2:  // pred: ^bb1
    %6 = cir.load %1 : !cir.ptr<!s16i>, !s16i loc(#loc15)
    %7 = cir.cast(integral, %6 : !s16i), !s32i loc(#loc15)
    %8 = cir.const #cir.int<2> : !s32i loc(#loc8)
    %9 = cir.binop(mul, %7, %8) nsw : !s32i loc(#loc15)
    %10 = cir.cast(integral, %9 : !s32i), !s16i loc(#loc15)
    cir.store %10, %0 : !s16i, !cir.ptr<!s16i> loc(#loc64)
    %11 = cir.load %0 : !cir.ptr<!s16i>, !s16i loc(#loc16)
    %12 = cir.cast(integral, %11 : !s16i), !s32i loc(#loc16)
    cir.call @printIntLine(%12) : (!s32i) -> () loc(#loc17)
    cir.br ^bb3 loc(#loc11)
  ^bb3:  // 2 preds: ^bb1, ^bb2
    cir.br ^bb4 loc(#loc11)
  ^bb4:  // pred: ^bb3
    cir.return loc(#loc4)
  } loc(#loc62)
  cir.func @CWE191_Integer_Underflow__short_fscanf_multiply_54e_goodG2BSink(%arg0: !s16i loc(fused[#loc20, #loc21])) extra(#fn_attr) {
    %0 = cir.alloca !s16i, !cir.ptr<!s16i>, ["result", init] {alignment = 2 : i64} loc(#loc70)
    %1 = cir.alloca !s16i, !cir.ptr<!s16i>, ["data", init] {alignment = 2 : i64} loc(#loc69)
    cir.store %arg0, %1 : !s16i, !cir.ptr<!s16i> loc(#loc24)
    cir.br ^bb1 loc(#loc71)
  ^bb1:  // pred: ^bb0
    %2 = cir.load %1 : !cir.ptr<!s16i>, !s16i loc(#loc27)
    %3 = cir.cast(integral, %2 : !s16i), !s32i loc(#loc27)
    %4 = cir.const #cir.int<0> : !s32i loc(#loc28)
    %5 = cir.cmp(lt, %3, %4) : !s32i, !cir.bool loc(#loc72)
    cir.brcond %5 ^bb2, ^bb3 loc(#loc73)
  ^bb2:  // pred: ^bb1
    %6 = cir.load %1 : !cir.ptr<!s16i>, !s16i loc(#loc30)
    %7 = cir.cast(integral, %6 : !s16i), !s32i loc(#loc30)
    %8 = cir.const #cir.int<2> : !s32i loc(#loc23)
    %9 = cir.binop(mul, %7, %8) nsw : !s32i loc(#loc30)
    %10 = cir.cast(integral, %9 : !s32i), !s16i loc(#loc30)
    cir.store %10, %0 : !s16i, !cir.ptr<!s16i> loc(#loc70)
    %11 = cir.load %0 : !cir.ptr<!s16i>, !s16i loc(#loc31)
    %12 = cir.cast(integral, %11 : !s16i), !s32i loc(#loc31)
    cir.call @printIntLine(%12) : (!s32i) -> () loc(#loc32)
    cir.br ^bb3 loc(#loc26)
  ^bb3:  // 2 preds: ^bb1, ^bb2
    cir.br ^bb4 loc(#loc26)
  ^bb4:  // pred: ^bb3
    cir.return loc(#loc19)
  } loc(#loc68)
  cir.func private @printLine(!cir.ptr<!s8i>) loc(#loc74)
  cir.global "private" constant cir_private dsolocal @".str" = #cir.const_array<"data value is too small to perform multiplication.\00" : !cir.array<!s8i x 51>> : !cir.array<!s8i x 51> {alignment = 1 : i64} loc(#loc35)
  cir.func @CWE191_Integer_Underflow__short_fscanf_multiply_54e_goodB2GSink(%arg0: !s16i loc(fused[#loc38, #loc39])) extra(#fn_attr) {
    %0 = cir.alloca !s16i, !cir.ptr<!s16i>, ["result", init] {alignment = 2 : i64} loc(#loc77)
    %1 = cir.alloca !s16i, !cir.ptr<!s16i>, ["data", init] {alignment = 2 : i64} loc(#loc76)
    cir.store %arg0, %1 : !s16i, !cir.ptr<!s16i> loc(#loc42)
    cir.br ^bb1 loc(#loc78)
  ^bb1:  // pred: ^bb0
    %2 = cir.load %1 : !cir.ptr<!s16i>, !s16i loc(#loc45)
    %3 = cir.cast(integral, %2 : !s16i), !s32i loc(#loc45)
    %4 = cir.const #cir.int<0> : !s32i loc(#loc46)
    %5 = cir.cmp(lt, %3, %4) : !s32i, !cir.bool loc(#loc79)
    cir.brcond %5 ^bb2, ^bb8 loc(#loc80)
  ^bb2:  // pred: ^bb1
    cir.br ^bb3 loc(#loc81)
  ^bb3:  // pred: ^bb2
    %6 = cir.load %1 : !cir.ptr<!s16i>, !s16i loc(#loc50)
    %7 = cir.cast(integral, %6 : !s16i), !s32i loc(#loc50)
    %8 = cir.const #cir.int<32767> : !s32i loc(#loc51)
    %9 = cir.unary(minus, %8) nsw : !s32i, !s32i loc(#loc51)
    %10 = cir.const #cir.int<1> : !s32i loc(#loc51)
    %11 = cir.binop(sub, %9, %10) nsw : !s32i loc(#loc51)
    %12 = cir.const #cir.int<2> : !s32i loc(#loc52)
    %13 = cir.binop(div, %11, %12) : !s32i loc(#loc82)
    %14 = cir.cmp(gt, %7, %13) : !s32i, !cir.bool loc(#loc83)
    cir.brcond %14 ^bb4, ^bb5 loc(#loc84)
  ^bb4:  // pred: ^bb3
    %15 = cir.load %1 : !cir.ptr<!s16i>, !s16i loc(#loc57)
    %16 = cir.cast(integral, %15 : !s16i), !s32i loc(#loc57)
    %17 = cir.const #cir.int<2> : !s32i loc(#loc41)
    %18 = cir.binop(mul, %16, %17) nsw : !s32i loc(#loc57)
    %19 = cir.cast(integral, %18 : !s32i), !s16i loc(#loc57)
    cir.store %19, %0 : !s16i, !cir.ptr<!s16i> loc(#loc77)
    %20 = cir.load %0 : !cir.ptr<!s16i>, !s16i loc(#loc58)
    %21 = cir.cast(integral, %20 : !s16i), !s32i loc(#loc58)
    cir.call @printIntLine(%21) : (!s32i) -> () loc(#loc59)
    cir.br ^bb6 loc(#loc55)
  ^bb5:  // pred: ^bb3
    %22 = cir.get_global @".str" : !cir.ptr<!cir.array<!s8i x 51>> loc(#loc35)
    %23 = cir.cast(array_to_ptrdecay, %22 : !cir.ptr<!cir.array<!s8i x 51>>), !cir.ptr<!s8i> loc(#loc35)
    cir.call @printLine(%23) : (!cir.ptr<!s8i>) -> () loc(#loc60)
    cir.br ^bb6 loc(#loc49)
  ^bb6:  // 2 preds: ^bb4, ^bb5
    cir.br ^bb7 loc(#loc49)
  ^bb7:  // pred: ^bb6
    cir.br ^bb8 loc(#loc44)
  ^bb8:  // 2 preds: ^bb1, ^bb7
    cir.br ^bb9 loc(#loc44)
  ^bb9:  // pred: ^bb8
    cir.return loc(#loc37)
  } loc(#loc75)
} loc(#loc)
#loc = loc("/workspaces/juliet-c/testcases/CWE191_Integer_Underflow/s03/CWE191_Integer_Underflow__short_fscanf_multiply_54e.c":0:0)
#loc1 = loc("../../../testcasesupport/std_testcase_io.h":18:1)
#loc2 = loc("../../../testcasesupport/std_testcase_io.h":18:33)
#loc3 = loc("CWE191_Integer_Underflow__short_fscanf_multiply_54e.c":22:1)
#loc4 = loc("CWE191_Integer_Underflow__short_fscanf_multiply_54e.c":30:1)
#loc7 = loc("CWE191_Integer_Underflow__short_fscanf_multiply_54e.c":27:9)
#loc8 = loc("CWE191_Integer_Underflow__short_fscanf_multiply_54e.c":27:31)
#loc9 = loc("CWE191_Integer_Underflow__short_fscanf_multiply_54e.c":23:1)
#loc10 = loc("CWE191_Integer_Underflow__short_fscanf_multiply_54e.c":24:5)
#loc11 = loc("CWE191_Integer_Underflow__short_fscanf_multiply_54e.c":29:5)
#loc12 = loc("CWE191_Integer_Underflow__short_fscanf_multiply_54e.c":24:8)
#loc13 = loc("CWE191_Integer_Underflow__short_fscanf_multiply_54e.c":24:15)
#loc14 = loc("CWE191_Integer_Underflow__short_fscanf_multiply_54e.c":25:5)
#loc15 = loc("CWE191_Integer_Underflow__short_fscanf_multiply_54e.c":27:24)
#loc16 = loc("CWE191_Integer_Underflow__short_fscanf_multiply_54e.c":28:22)
#loc17 = loc("CWE191_Integer_Underflow__short_fscanf_multiply_54e.c":28:9)
#loc18 = loc("CWE191_Integer_Underflow__short_fscanf_multiply_54e.c":37:1)
#loc19 = loc("CWE191_Integer_Underflow__short_fscanf_multiply_54e.c":45:1)
#loc22 = loc("CWE191_Integer_Underflow__short_fscanf_multiply_54e.c":42:9)
#loc23 = loc("CWE191_Integer_Underflow__short_fscanf_multiply_54e.c":42:31)
#loc24 = loc("CWE191_Integer_Underflow__short_fscanf_multiply_54e.c":38:1)
#loc25 = loc("CWE191_Integer_Underflow__short_fscanf_multiply_54e.c":39:5)
#loc26 = loc("CWE191_Integer_Underflow__short_fscanf_multiply_54e.c":44:5)
#loc27 = loc("CWE191_Integer_Underflow__short_fscanf_multiply_54e.c":39:8)
#loc28 = loc("CWE191_Integer_Underflow__short_fscanf_multiply_54e.c":39:15)
#loc29 = loc("CWE191_Integer_Underflow__short_fscanf_multiply_54e.c":40:5)
#loc30 = loc("CWE191_Integer_Underflow__short_fscanf_multiply_54e.c":42:24)
#loc31 = loc("CWE191_Integer_Underflow__short_fscanf_multiply_54e.c":43:22)
#loc32 = loc("CWE191_Integer_Underflow__short_fscanf_multiply_54e.c":43:9)
#loc33 = loc("../../../testcasesupport/std_testcase_io.h":14:1)
#loc34 = loc("../../../testcasesupport/std_testcase_io.h":14:33)
#loc35 = loc("CWE191_Integer_Underflow__short_fscanf_multiply_54e.c":60:23)
#loc36 = loc("CWE191_Integer_Underflow__short_fscanf_multiply_54e.c":48:1)
#loc37 = loc("CWE191_Integer_Underflow__short_fscanf_multiply_54e.c":63:1)
#loc40 = loc("CWE191_Integer_Underflow__short_fscanf_multiply_54e.c":55:13)
#loc41 = loc("CWE191_Integer_Underflow__short_fscanf_multiply_54e.c":55:35)
#loc42 = loc("CWE191_Integer_Underflow__short_fscanf_multiply_54e.c":49:1)
#loc43 = loc("CWE191_Integer_Underflow__short_fscanf_multiply_54e.c":50:5)
#loc44 = loc("CWE191_Integer_Underflow__short_fscanf_multiply_54e.c":62:5)
#loc45 = loc("CWE191_Integer_Underflow__short_fscanf_multiply_54e.c":50:8)
#loc46 = loc("CWE191_Integer_Underflow__short_fscanf_multiply_54e.c":50:15)
#loc47 = loc("CWE191_Integer_Underflow__short_fscanf_multiply_54e.c":51:5)
#loc48 = loc("CWE191_Integer_Underflow__short_fscanf_multiply_54e.c":53:9)
#loc49 = loc("CWE191_Integer_Underflow__short_fscanf_multiply_54e.c":61:9)
#loc50 = loc("CWE191_Integer_Underflow__short_fscanf_multiply_54e.c":53:13)
#loc51 = loc("CWE191_Integer_Underflow__short_fscanf_multiply_54e.c":53:21)
#loc52 = loc("CWE191_Integer_Underflow__short_fscanf_multiply_54e.c":53:30)
#loc53 = loc("CWE191_Integer_Underflow__short_fscanf_multiply_54e.c":53:31)
#loc54 = loc("CWE191_Integer_Underflow__short_fscanf_multiply_54e.c":54:9)
#loc55 = loc("CWE191_Integer_Underflow__short_fscanf_multiply_54e.c":57:9)
#loc56 = loc("CWE191_Integer_Underflow__short_fscanf_multiply_54e.c":59:9)
#loc57 = loc("CWE191_Integer_Underflow__short_fscanf_multiply_54e.c":55:28)
#loc58 = loc("CWE191_Integer_Underflow__short_fscanf_multiply_54e.c":56:26)
#loc59 = loc("CWE191_Integer_Underflow__short_fscanf_multiply_54e.c":56:13)
#loc60 = loc("CWE191_Integer_Underflow__short_fscanf_multiply_54e.c":60:13)
#loc61 = loc(fused[#loc1, #loc2])
#loc62 = loc(fused[#loc3, #loc4])
#loc64 = loc(fused[#loc7, #loc8])
#loc65 = loc(fused[#loc10, #loc11])
#loc66 = loc(fused[#loc12, #loc13])
#loc67 = loc(fused[#loc14, #loc11])
#loc68 = loc(fused[#loc18, #loc19])
#loc70 = loc(fused[#loc22, #loc23])
#loc71 = loc(fused[#loc25, #loc26])
#loc72 = loc(fused[#loc27, #loc28])
#loc73 = loc(fused[#loc29, #loc26])
#loc74 = loc(fused[#loc33, #loc34])
#loc75 = loc(fused[#loc36, #loc37])
#loc77 = loc(fused[#loc40, #loc41])
#loc78 = loc(fused[#loc43, #loc44])
#loc79 = loc(fused[#loc45, #loc46])
#loc80 = loc(fused[#loc47, #loc44])
#loc81 = loc(fused[#loc48, #loc49])
#loc82 = loc(fused[#loc51, #loc52])
#loc83 = loc(fused[#loc50, #loc53])
#loc84 = loc(fused[#loc54, #loc55, #loc56, #loc49])
