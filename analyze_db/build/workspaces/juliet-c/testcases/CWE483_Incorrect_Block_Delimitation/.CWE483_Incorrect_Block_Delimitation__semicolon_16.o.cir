!s32i = !cir.int<s, 32>
!s8i = !cir.int<s, 8>
#fn_attr = #cir<extra({nothrow = #cir.nothrow})>
#fn_attr1 = #cir<extra({inline = #cir.inline<no>, nothrow = #cir.nothrow, optnone = #cir.optnone, uwtable = #cir.uwtable<async>})>
module @"/workspaces/juliet-c/testcases/CWE483_Incorrect_Block_Delimitation/CWE483_Incorrect_Block_Delimitation__semicolon_16.c" attributes {cir.lang = #cir.lang<c>, cir.sob = #cir.signed_overflow_behavior<undefined>, cir.triple = "x86_64-unknown-linux-gnu", cir.type_size_info = #cir.type_size_info<char = 8, int = 32, size_t = 64>, cir.uwtable = #cir.uwtable<async>, dlti.dl_spec = #dlti.dl_spec<i32 = dense<32> : vector<2xi64>, f64 = dense<64> : vector<2xi64>, f16 = dense<16> : vector<2xi64>, !llvm.ptr<270> = dense<32> : vector<4xi64>, f128 = dense<128> : vector<2xi64>, !llvm.ptr<271> = dense<32> : vector<4xi64>, !llvm.ptr<272> = dense<64> : vector<4xi64>, i64 = dense<64> : vector<2xi64>, i128 = dense<128> : vector<2xi64>, f80 = dense<128> : vector<2xi64>, !llvm.ptr = dense<64> : vector<4xi64>, i1 = dense<8> : vector<2xi64>, i8 = dense<8> : vector<2xi64>, i16 = dense<16> : vector<2xi64>, "dlti.stack_alignment" = 128 : i64, "dlti.mangling_mode" = "e", "dlti.endianness" = "little">} {
  cir.func private @rand() -> !s32i extra(#fn_attr) loc(#loc70)
  cir.func private @printLine(!cir.ptr<!s8i>) loc(#loc71)
  cir.global "private" constant cir_private dsolocal @".str" = #cir.const_array<"x == 0\00" : !cir.array<!s8i x 7>> : !cir.array<!s8i x 7> {alignment = 1 : i64} loc(#loc5)
  cir.global "private" constant cir_private dsolocal @".str.1" = #cir.const_array<"x was 0\0A\00" : !cir.array<!s8i x 9>> : !cir.array<!s8i x 9> {alignment = 1 : i64} loc(#loc6)
  cir.func no_proto @CWE483_Incorrect_Block_Delimitation__semicolon_16_bad() extra(#fn_attr1) {
    cir.scope {
      cir.while {
        %0 = cir.const #cir.int<1> : !s32i loc(#loc11)
        %1 = cir.cast(int_to_bool, %0 : !s32i), !cir.bool loc(#loc11)
        cir.condition(%1) loc(#loc11)
      } do {
        cir.scope {
          cir.scope {
            %0 = cir.alloca !s32i, !cir.ptr<!s32i>, ["x", init] {alignment = 4 : i64} loc(#loc76)
            %1 = cir.alloca !s32i, !cir.ptr<!s32i>, ["y", init] {alignment = 4 : i64} loc(#loc77)
            %2 = cir.call @rand() : () -> !s32i extra(#fn_attr) loc(#loc19)
            %3 = cir.const #cir.int<3> : !s32i loc(#loc20)
            %4 = cir.binop(rem, %2, %3) : !s32i loc(#loc78)
            cir.store %4, %0 : !s32i, !cir.ptr<!s32i> loc(#loc76)
            %5 = cir.const #cir.int<0> : !s32i loc(#loc18)
            cir.store %5, %1 : !s32i, !cir.ptr<!s32i> loc(#loc77)
            cir.scope {
              %6 = cir.load %0 : !cir.ptr<!s32i>, !s32i loc(#loc23)
              %7 = cir.const #cir.int<0> : !s32i loc(#loc24)
              %8 = cir.cmp(eq, %6, %7) : !s32i, !cir.bool loc(#loc80)
              cir.if %8 {
              } loc(#loc22)
            } loc(#loc79)
            cir.scope {
              %6 = cir.get_global @".str" : !cir.ptr<!cir.array<!s8i x 7>> loc(#loc5)
              %7 = cir.cast(array_to_ptrdecay, %6 : !cir.ptr<!cir.array<!s8i x 7>>), !cir.ptr<!s8i> loc(#loc5)
              cir.call @printLine(%7) : (!cir.ptr<!s8i>) -> () loc(#loc27)
              %8 = cir.const #cir.int<1> : !s32i loc(#loc28)
              cir.store %8, %1 : !s32i, !cir.ptr<!s32i> loc(#loc82)
            } loc(#loc81)
            cir.scope {
              %6 = cir.load %1 : !cir.ptr<!s32i>, !s32i loc(#loc32)
              %7 = cir.cast(int_to_bool, %6 : !s32i), !cir.bool loc(#loc32)
              cir.if %7 {
                %8 = cir.get_global @".str.1" : !cir.ptr<!cir.array<!s8i x 9>> loc(#loc6)
                %9 = cir.cast(array_to_ptrdecay, %8 : !cir.ptr<!cir.array<!s8i x 9>>), !cir.ptr<!s8i> loc(#loc6)
                cir.call @printLine(%9) : (!cir.ptr<!s8i>) -> () loc(#loc34)
              } loc(#loc84)
            } loc(#loc83)
          } loc(#loc75)
          cir.break loc(#loc35)
        } loc(#loc74)
        cir.yield loc(#loc10)
      } loc(#loc73)
    } loc(#loc73)
    cir.return loc(#loc8)
  } loc(#loc72)
  cir.func no_proto @CWE483_Incorrect_Block_Delimitation__semicolon_16_good() extra(#fn_attr1) {
    %0 = cir.get_global @good1 : !cir.ptr<!cir.func<()>> loc(#loc86)
    cir.call %0() : (!cir.ptr<!cir.func<()>>) -> () loc(#loc38)
    cir.return loc(#loc37)
  } loc(#loc85)
  cir.func no_proto internal private @good1() extra(#fn_attr1) {
    cir.scope {
      cir.while {
        %0 = cir.const #cir.int<1> : !s32i loc(#loc44)
        %1 = cir.cast(int_to_bool, %0 : !s32i), !cir.bool loc(#loc44)
        cir.condition(%1) loc(#loc44)
      } do {
        cir.scope {
          cir.scope {
            %0 = cir.alloca !s32i, !cir.ptr<!s32i>, ["x", init] {alignment = 4 : i64} loc(#loc91)
            %1 = cir.alloca !s32i, !cir.ptr<!s32i>, ["y", init] {alignment = 4 : i64} loc(#loc92)
            %2 = cir.call @rand() : () -> !s32i extra(#fn_attr) loc(#loc52)
            %3 = cir.const #cir.int<3> : !s32i loc(#loc53)
            %4 = cir.binop(rem, %2, %3) : !s32i loc(#loc93)
            cir.store %4, %0 : !s32i, !cir.ptr<!s32i> loc(#loc91)
            %5 = cir.const #cir.int<0> : !s32i loc(#loc51)
            cir.store %5, %1 : !s32i, !cir.ptr<!s32i> loc(#loc92)
            cir.scope {
              %6 = cir.load %0 : !cir.ptr<!s32i>, !s32i loc(#loc56)
              %7 = cir.const #cir.int<0> : !s32i loc(#loc57)
              %8 = cir.cmp(eq, %6, %7) : !s32i, !cir.bool loc(#loc95)
              cir.if %8 {
                %9 = cir.get_global @".str" : !cir.ptr<!cir.array<!s8i x 7>> loc(#loc59)
                %10 = cir.cast(array_to_ptrdecay, %9 : !cir.ptr<!cir.array<!s8i x 7>>), !cir.ptr<!s8i> loc(#loc59)
                cir.call @printLine(%10) : (!cir.ptr<!s8i>) -> () loc(#loc60)
                %11 = cir.const #cir.int<1> : !s32i loc(#loc61)
                cir.store %11, %1 : !s32i, !cir.ptr<!s32i> loc(#loc97)
              } loc(#loc96)
            } loc(#loc94)
            cir.scope {
              %6 = cir.load %1 : !cir.ptr<!s32i>, !s32i loc(#loc65)
              %7 = cir.cast(int_to_bool, %6 : !s32i), !cir.bool loc(#loc65)
              cir.if %7 {
                %8 = cir.get_global @".str.1" : !cir.ptr<!cir.array<!s8i x 9>> loc(#loc67)
                %9 = cir.cast(array_to_ptrdecay, %8 : !cir.ptr<!cir.array<!s8i x 9>>), !cir.ptr<!s8i> loc(#loc67)
                cir.call @printLine(%9) : (!cir.ptr<!s8i>) -> () loc(#loc68)
              } loc(#loc99)
            } loc(#loc98)
          } loc(#loc90)
          cir.break loc(#loc69)
        } loc(#loc89)
        cir.yield loc(#loc43)
      } loc(#loc88)
    } loc(#loc88)
    cir.return loc(#loc41)
  } loc(#loc87)
} loc(#loc)
#loc = loc("/workspaces/juliet-c/testcases/CWE483_Incorrect_Block_Delimitation/CWE483_Incorrect_Block_Delimitation__semicolon_16.c":0:0)
#loc1 = loc("/usr/include/stdlib.h":573:1)
#loc2 = loc("/usr/include/stdlib.h":573:24)
#loc3 = loc("../../testcasesupport/std_testcase_io.h":14:1)
#loc4 = loc("../../testcasesupport/std_testcase_io.h":14:33)
#loc5 = loc("CWE483_Incorrect_Block_Delimitation__semicolon_16.c":30:27)
#loc6 = loc("CWE483_Incorrect_Block_Delimitation__semicolon_16.c":35:27)
#loc7 = loc("CWE483_Incorrect_Block_Delimitation__semicolon_16.c":20:1)
#loc8 = loc("CWE483_Incorrect_Block_Delimitation__semicolon_16.c":40:1)
#loc9 = loc("CWE483_Incorrect_Block_Delimitation__semicolon_16.c":22:5)
#loc10 = loc("CWE483_Incorrect_Block_Delimitation__semicolon_16.c":39:5)
#loc11 = loc("CWE483_Incorrect_Block_Delimitation__semicolon_16.c":22:11)
#loc12 = loc("CWE483_Incorrect_Block_Delimitation__semicolon_16.c":23:5)
#loc13 = loc("CWE483_Incorrect_Block_Delimitation__semicolon_16.c":24:9)
#loc14 = loc("CWE483_Incorrect_Block_Delimitation__semicolon_16.c":37:9)
#loc15 = loc("CWE483_Incorrect_Block_Delimitation__semicolon_16.c":25:13)
#loc16 = loc("CWE483_Incorrect_Block_Delimitation__semicolon_16.c":25:32)
#loc17 = loc("CWE483_Incorrect_Block_Delimitation__semicolon_16.c":26:13)
#loc18 = loc("CWE483_Incorrect_Block_Delimitation__semicolon_16.c":26:21)
#loc19 = loc("CWE483_Incorrect_Block_Delimitation__semicolon_16.c":25:22)
#loc20 = loc("CWE483_Incorrect_Block_Delimitation__semicolon_16.c":25:31)
#loc21 = loc("CWE483_Incorrect_Block_Delimitation__semicolon_16.c":28:13)
#loc22 = loc("CWE483_Incorrect_Block_Delimitation__semicolon_16.c":28:24)
#loc23 = loc("CWE483_Incorrect_Block_Delimitation__semicolon_16.c":28:17)
#loc24 = loc("CWE483_Incorrect_Block_Delimitation__semicolon_16.c":28:22)
#loc25 = loc("CWE483_Incorrect_Block_Delimitation__semicolon_16.c":29:13)
#loc26 = loc("CWE483_Incorrect_Block_Delimitation__semicolon_16.c":32:13)
#loc27 = loc("CWE483_Incorrect_Block_Delimitation__semicolon_16.c":30:17)
#loc28 = loc("CWE483_Incorrect_Block_Delimitation__semicolon_16.c":31:21)
#loc29 = loc("CWE483_Incorrect_Block_Delimitation__semicolon_16.c":31:17)
#loc30 = loc("CWE483_Incorrect_Block_Delimitation__semicolon_16.c":33:13)
#loc31 = loc("CWE483_Incorrect_Block_Delimitation__semicolon_16.c":36:13)
#loc32 = loc("CWE483_Incorrect_Block_Delimitation__semicolon_16.c":33:17)
#loc33 = loc("CWE483_Incorrect_Block_Delimitation__semicolon_16.c":34:13)
#loc34 = loc("CWE483_Incorrect_Block_Delimitation__semicolon_16.c":35:17)
#loc35 = loc("CWE483_Incorrect_Block_Delimitation__semicolon_16.c":38:9)
#loc36 = loc("CWE483_Incorrect_Block_Delimitation__semicolon_16.c":69:1)
#loc37 = loc("CWE483_Incorrect_Block_Delimitation__semicolon_16.c":72:1)
#loc38 = loc("CWE483_Incorrect_Block_Delimitation__semicolon_16.c":71:5)
#loc39 = loc("CWE483_Incorrect_Block_Delimitation__semicolon_16.c":71:11)
#loc40 = loc("CWE483_Incorrect_Block_Delimitation__semicolon_16.c":47:1)
#loc41 = loc("CWE483_Incorrect_Block_Delimitation__semicolon_16.c":67:1)
#loc42 = loc("CWE483_Incorrect_Block_Delimitation__semicolon_16.c":49:5)
#loc43 = loc("CWE483_Incorrect_Block_Delimitation__semicolon_16.c":66:5)
#loc44 = loc("CWE483_Incorrect_Block_Delimitation__semicolon_16.c":49:11)
#loc45 = loc("CWE483_Incorrect_Block_Delimitation__semicolon_16.c":50:5)
#loc46 = loc("CWE483_Incorrect_Block_Delimitation__semicolon_16.c":51:9)
#loc47 = loc("CWE483_Incorrect_Block_Delimitation__semicolon_16.c":64:9)
#loc48 = loc("CWE483_Incorrect_Block_Delimitation__semicolon_16.c":52:13)
#loc49 = loc("CWE483_Incorrect_Block_Delimitation__semicolon_16.c":52:32)
#loc50 = loc("CWE483_Incorrect_Block_Delimitation__semicolon_16.c":53:13)
#loc51 = loc("CWE483_Incorrect_Block_Delimitation__semicolon_16.c":53:21)
#loc52 = loc("CWE483_Incorrect_Block_Delimitation__semicolon_16.c":52:22)
#loc53 = loc("CWE483_Incorrect_Block_Delimitation__semicolon_16.c":52:31)
#loc54 = loc("CWE483_Incorrect_Block_Delimitation__semicolon_16.c":55:13)
#loc55 = loc("CWE483_Incorrect_Block_Delimitation__semicolon_16.c":59:13)
#loc56 = loc("CWE483_Incorrect_Block_Delimitation__semicolon_16.c":55:17)
#loc57 = loc("CWE483_Incorrect_Block_Delimitation__semicolon_16.c":55:22)
#loc58 = loc("CWE483_Incorrect_Block_Delimitation__semicolon_16.c":56:13)
#loc59 = loc("CWE483_Incorrect_Block_Delimitation__semicolon_16.c":57:27)
#loc60 = loc("CWE483_Incorrect_Block_Delimitation__semicolon_16.c":57:17)
#loc61 = loc("CWE483_Incorrect_Block_Delimitation__semicolon_16.c":58:21)
#loc62 = loc("CWE483_Incorrect_Block_Delimitation__semicolon_16.c":58:17)
#loc63 = loc("CWE483_Incorrect_Block_Delimitation__semicolon_16.c":60:13)
#loc64 = loc("CWE483_Incorrect_Block_Delimitation__semicolon_16.c":63:13)
#loc65 = loc("CWE483_Incorrect_Block_Delimitation__semicolon_16.c":60:17)
#loc66 = loc("CWE483_Incorrect_Block_Delimitation__semicolon_16.c":61:13)
#loc67 = loc("CWE483_Incorrect_Block_Delimitation__semicolon_16.c":62:27)
#loc68 = loc("CWE483_Incorrect_Block_Delimitation__semicolon_16.c":62:17)
#loc69 = loc("CWE483_Incorrect_Block_Delimitation__semicolon_16.c":65:9)
#loc70 = loc(fused[#loc1, #loc2])
#loc71 = loc(fused[#loc3, #loc4])
#loc72 = loc(fused[#loc7, #loc8])
#loc73 = loc(fused[#loc9, #loc10])
#loc74 = loc(fused[#loc12, #loc10])
#loc75 = loc(fused[#loc13, #loc14])
#loc76 = loc(fused[#loc15, #loc16])
#loc77 = loc(fused[#loc17, #loc18])
#loc78 = loc(fused[#loc19, #loc20])
#loc79 = loc(fused[#loc21, #loc22])
#loc80 = loc(fused[#loc23, #loc24])
#loc81 = loc(fused[#loc25, #loc26])
#loc82 = loc(fused[#loc29, #loc28])
#loc83 = loc(fused[#loc30, #loc31])
#loc84 = loc(fused[#loc33, #loc31])
#loc85 = loc(fused[#loc36, #loc37])
#loc86 = loc(fused[#loc38, #loc39])
#loc87 = loc(fused[#loc40, #loc41])
#loc88 = loc(fused[#loc42, #loc43])
#loc89 = loc(fused[#loc45, #loc43])
#loc90 = loc(fused[#loc46, #loc47])
#loc91 = loc(fused[#loc48, #loc49])
#loc92 = loc(fused[#loc50, #loc51])
#loc93 = loc(fused[#loc52, #loc53])
#loc94 = loc(fused[#loc54, #loc55])
#loc95 = loc(fused[#loc56, #loc57])
#loc96 = loc(fused[#loc58, #loc55])
#loc97 = loc(fused[#loc62, #loc61])
#loc98 = loc(fused[#loc63, #loc64])
#loc99 = loc(fused[#loc66, #loc64])
