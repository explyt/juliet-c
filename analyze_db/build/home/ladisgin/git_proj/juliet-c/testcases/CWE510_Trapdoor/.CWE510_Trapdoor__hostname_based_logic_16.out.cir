!s32i = !cir.int<s, 32>
!s64i = !cir.int<s, 64>
!s8i = !cir.int<s, 8>
!u16i = !cir.int<u, 16>
!u32i = !cir.int<u, 32>
!u64i = !cir.int<u, 64>
!u8i = !cir.int<u, 8>
!void = !cir.void
#fn_attr = #cir<extra({nothrow = #cir.nothrow})>
#fn_attr1 = #cir<extra({inline = #cir.inline<no>, nothrow = #cir.nothrow, optnone = #cir.optnone})>
#loc197 = loc("CWE510_Trapdoor__hostname_based_logic_16.c":229:10)
#loc198 = loc("CWE510_Trapdoor__hostname_based_logic_16.c":229:14)
#loc199 = loc("CWE510_Trapdoor__hostname_based_logic_16.c":229:20)
#loc200 = loc("CWE510_Trapdoor__hostname_based_logic_16.c":229:32)
!ty_in_addr = !cir.struct<struct "in_addr" {!u32i} #cir.record.decl.ast>
#loc393 = loc(fused[#loc197, #loc198])
#loc394 = loc(fused[#loc199, #loc200])
!ty_sockaddr = !cir.struct<struct "sockaddr" {!u16i, !cir.array<!s8i x 14>} #cir.record.decl.ast>
!ty_sockaddr_in = !cir.struct<struct "sockaddr_in" {!u16i, !u16i, !ty_in_addr, !cir.array<!u8i x 8>}>
module @"/home/ladisgin/git_proj/juliet-c/testcases/CWE510_Trapdoor/CWE510_Trapdoor__hostname_based_logic_16.c" attributes {cir.lang = #cir.lang<c>, cir.sob = #cir.signed_overflow_behavior<undefined>, cir.triple = "x86_64-unknown-linux-gnu", dlti.dl_spec = #dlti.dl_spec<i16 = dense<16> : vector<2xi64>, i8 = dense<8> : vector<2xi64>, i32 = dense<32> : vector<2xi64>, f80 = dense<128> : vector<2xi64>, i1 = dense<8> : vector<2xi64>, !llvm.ptr = dense<64> : vector<4xi64>, !llvm.ptr<272> = dense<64> : vector<4xi64>, i64 = dense<64> : vector<2xi64>, i128 = dense<128> : vector<2xi64>, f64 = dense<64> : vector<2xi64>, f16 = dense<16> : vector<2xi64>, !llvm.ptr<270> = dense<32> : vector<4xi64>, !llvm.ptr<271> = dense<32> : vector<4xi64>, f128 = dense<128> : vector<2xi64>, "dlti.stack_alignment" = 128 : i64, "dlti.endianness" = "little">} {
  cir.func private @socket(!s32i, !s32i, !s32i) -> !s32i extra(#fn_attr) loc(#loc316)
  cir.func private @htons(!u16i) -> !u16i extra(#fn_attr) loc(#loc317)
  cir.func private @bind(!s32i, !cir.ptr<!ty_sockaddr>, !u32i) -> !s32i extra(#fn_attr) loc(#loc318)
  cir.func private @listen(!s32i, !s32i) -> !s32i extra(#fn_attr) loc(#loc319)
  cir.func private @accept(!s32i, !cir.ptr<!ty_sockaddr>, !cir.ptr<!u32i>) -> !s32i loc(#loc320)
  cir.func private @getsockname(!s32i, !cir.ptr<!ty_sockaddr>, !cir.ptr<!u32i>) -> !s32i extra(#fn_attr) loc(#loc321)
  cir.func private @getnameinfo(!cir.ptr<!ty_sockaddr>, !u32i, !cir.ptr<!s8i>, !u32i, !cir.ptr<!s8i>, !u32i, !s32i) -> !s32i loc(#loc322)
  cir.func private @strcmp(!cir.ptr<!s8i>, !cir.ptr<!s8i>) -> !s32i extra(#fn_attr) loc(#loc323)
  cir.global "private" constant cir_private dsolocal @".str" = #cir.const_array<"admin.google.com\00" : !cir.array<!s8i x 17>> : !cir.array<!s8i x 17> {alignment = 1 : i64} loc(#loc17)
  cir.func private @send(!s32i, !cir.ptr<!void>, !u64i, !s32i) -> !s64i loc(#loc324)
  cir.global "private" constant cir_private dsolocal @".str.1" = #cir.const_array<"Welcome, admin!\00" : !cir.array<!s8i x 16>> : !cir.array<!s8i x 16> {alignment = 1 : i64} loc(#loc20)
  cir.global "private" constant cir_private dsolocal @".str.2" = #cir.const_array<"Welcome!\00" : !cir.array<!s8i x 9>> : !cir.array<!s8i x 9> {alignment = 1 : i64} loc(#loc21)
  cir.func private @printLine(!cir.ptr<!s8i>) loc(#loc325)
  cir.global "private" constant cir_private dsolocal @".str.3" = #cir.const_array<"Send failed!\00" : !cir.array<!s8i x 13>> : !cir.array<!s8i x 13> {alignment = 1 : i64} loc(#loc24)
  cir.func private @close(!s32i) -> !s32i loc(#loc326)
  cir.func no_proto @CWE510_Trapdoor__hostname_based_logic_16_bad() extra(#fn_attr1) {
    cir.scope {
      cir.while {
        %0 = cir.const #cir.int<1> : !s32i loc(#loc31)
        %1 = cir.cast(int_to_bool, %0 : !s32i), !cir.bool loc(#loc31)
        cir.condition(%1) loc(#loc31)
      } do {
        cir.scope {
          %0 = cir.alloca !ty_sockaddr_in, !cir.ptr<!ty_sockaddr_in>, ["service"] {alignment = 4 : i64} loc(#loc330)
          %1 = cir.alloca !ty_sockaddr_in, !cir.ptr<!ty_sockaddr_in>, ["acceptService"] {alignment = 4 : i64} loc(#loc331)
          %2 = cir.alloca !s32i, !cir.ptr<!s32i>, ["acceptServiceLen", init] {alignment = 4 : i64} loc(#loc332)
          %3 = cir.alloca !s32i, !cir.ptr<!s32i>, ["listenSocket", init] {alignment = 4 : i64} loc(#loc333)
          %4 = cir.alloca !s32i, !cir.ptr<!s32i>, ["acceptSocket", init] {alignment = 4 : i64} loc(#loc334)
          %5 = cir.alloca !cir.array<!s8i x 1025>, !cir.ptr<!cir.array<!s8i x 1025>>, ["hostname"] {alignment = 16 : i64} loc(#loc335)
          %6 = cir.alloca !cir.array<!s8i x 32>, !cir.ptr<!cir.array<!s8i x 32>>, ["servInfo"] {alignment = 16 : i64} loc(#loc336)
          %7 = cir.const #cir.int<16> : !u64i loc(#loc337)
          %8 = cir.cast(integral, %7 : !u64i), !s32i loc(#loc337)
          cir.store %8, %2 : !s32i, !cir.ptr<!s32i> loc(#loc332)
          %9 = cir.const #cir.int<1> : !s32i loc(#loc40)
          %10 = cir.unary(minus, %9) : !s32i, !s32i loc(#loc40)
          cir.store %10, %3 : !s32i, !cir.ptr<!s32i> loc(#loc333)
          %11 = cir.const #cir.int<1> : !s32i loc(#loc42)
          %12 = cir.unary(minus, %11) : !s32i, !s32i loc(#loc42)
          cir.store %12, %4 : !s32i, !cir.ptr<!s32i> loc(#loc334)
          cir.scope {
            cir.do {
              %13 = cir.const #cir.int<2> : !s32i loc(#loc50)
              %14 = cir.const #cir.int<1> : !s32i loc(#loc51)
              %15 = cir.const #cir.int<6> : !s32i loc(#loc52)
              %16 = cir.call @socket(%13, %14, %15) : (!s32i, !s32i, !s32i) -> !s32i extra(#fn_attr) loc(#loc53)
              cir.store %16, %3 : !s32i, !cir.ptr<!s32i> loc(#loc339)
              cir.scope {
                %35 = cir.load %3 : !cir.ptr<!s32i>, !s32i loc(#loc58)
                %36 = cir.const #cir.int<1> : !s32i loc(#loc59)
                %37 = cir.unary(minus, %36) : !s32i, !s32i loc(#loc59)
                %38 = cir.cmp(eq, %35, %37) : !s32i, !cir.bool loc(#loc341)
                cir.if %38 {
                  cir.break loc(#loc61)
                } loc(#loc342)
              } loc(#loc340)
              %17 = cir.cast(bitcast, %0 : !cir.ptr<!ty_sockaddr_in>), !cir.ptr<!void> loc(#loc343)
              %18 = cir.const #cir.int<0> : !s32i loc(#loc64)
              %19 = cir.const #cir.int<16> : !u64i loc(#loc344)
              cir.libc.memset %19 bytes from %17 set to %18 : !cir.ptr<!void>, !s32i, !u64i loc(#loc345)
              %20 = cir.const #cir.int<2> : !s32i loc(#loc69)
              %21 = cir.cast(integral, %20 : !s32i), !u16i loc(#loc69)
              %22 = cir.get_member %0[0] {name = "sin_family"} : !cir.ptr<!ty_sockaddr_in> -> !cir.ptr<!u16i> loc(#loc70)
              cir.store %21, %22 : !u16i, !cir.ptr<!u16i> loc(#loc346)
              %23 = cir.const #cir.int<0> : !s32i loc(#loc72)
              %24 = cir.cast(integral, %23 : !s32i), !u32i loc(#loc72)
              %25 = cir.get_member %0[2] {name = "sin_addr"} : !cir.ptr<!ty_sockaddr_in> -> !cir.ptr<!ty_in_addr> loc(#loc73)
              %26 = cir.get_member %25[0] {name = "s_addr"} : !cir.ptr<!ty_in_addr> -> !cir.ptr<!u32i> loc(#loc74)
              cir.store %24, %26 : !u32i, !cir.ptr<!u32i> loc(#loc347)
              %27 = cir.const #cir.int<20000> : !s32i loc(#loc76)
              %28 = cir.cast(integral, %27 : !s32i), !u16i loc(#loc76)
              %29 = cir.call @htons(%28) : (!u16i) -> !u16i extra(#fn_attr) loc(#loc77)
              %30 = cir.get_member %0[1] {name = "sin_port"} : !cir.ptr<!ty_sockaddr_in> -> !cir.ptr<!u16i> loc(#loc78)
              cir.store %29, %30 : !u16i, !cir.ptr<!u16i> loc(#loc348)
              cir.scope {
                %35 = cir.load %3 : !cir.ptr<!s32i>, !s32i loc(#loc83)
                %36 = cir.cast(bitcast, %0 : !cir.ptr<!ty_sockaddr_in>), !cir.ptr<!ty_sockaddr> loc(#loc350)
                %37 = cir.const #cir.int<16> : !u64i loc(#loc351)
                %38 = cir.cast(integral, %37 : !u64i), !u32i loc(#loc351)
                %39 = cir.call @bind(%35, %36, %38) : (!s32i, !cir.ptr<!ty_sockaddr>, !u32i) -> !s32i extra(#fn_attr) loc(#loc88)
                %40 = cir.const #cir.int<1> : !s32i loc(#loc89)
                %41 = cir.unary(minus, %40) : !s32i, !s32i loc(#loc89)
                %42 = cir.cmp(eq, %39, %41) : !s32i, !cir.bool loc(#loc352)
                cir.if %42 {
                  cir.break loc(#loc91)
                } loc(#loc353)
              } loc(#loc349)
              cir.scope {
                %35 = cir.load %3 : !cir.ptr<!s32i>, !s32i loc(#loc94)
                %36 = cir.const #cir.int<5> : !s32i loc(#loc95)
                %37 = cir.call @listen(%35, %36) : (!s32i, !s32i) -> !s32i extra(#fn_attr) loc(#loc96)
                %38 = cir.const #cir.int<1> : !s32i loc(#loc97)
                %39 = cir.unary(minus, %38) : !s32i, !s32i loc(#loc97)
                %40 = cir.cmp(eq, %37, %39) : !s32i, !cir.bool loc(#loc355)
                cir.if %40 {
                  cir.break loc(#loc99)
                } loc(#loc356)
              } loc(#loc354)
              %31 = cir.load %3 : !cir.ptr<!s32i>, !s32i loc(#loc100)
              %32 = cir.const #cir.ptr<null> : !cir.ptr<!ty_sockaddr> loc(#loc101)
              %33 = cir.const #cir.ptr<null> : !cir.ptr<!u32i> loc(#loc102)
              %34 = cir.call @accept(%31, %32, %33) : (!s32i, !cir.ptr<!ty_sockaddr>, !cir.ptr<!u32i>) -> !s32i loc(#loc103)
              cir.store %34, %4 : !s32i, !cir.ptr<!s32i> loc(#loc357)
              cir.scope {
                %35 = cir.load %4 : !cir.ptr<!s32i>, !s32i loc(#loc108)
                %36 = cir.const #cir.int<1> : !s32i loc(#loc109)
                %37 = cir.unary(minus, %36) : !s32i, !s32i loc(#loc109)
                %38 = cir.cmp(eq, %35, %37) : !s32i, !cir.bool loc(#loc359)
                cir.if %38 {
                  cir.break loc(#loc111)
                } loc(#loc360)
              } loc(#loc358)
              cir.scope {
                %35 = cir.load %4 : !cir.ptr<!s32i>, !s32i loc(#loc114)
                %36 = cir.cast(bitcast, %1 : !cir.ptr<!ty_sockaddr_in>), !cir.ptr<!ty_sockaddr> loc(#loc362)
                %37 = cir.cast(bitcast, %2 : !cir.ptr<!s32i>), !cir.ptr<!u32i> loc(#loc363)
                %38 = cir.call @getsockname(%35, %36, %37) : (!s32i, !cir.ptr<!ty_sockaddr>, !cir.ptr<!u32i>) -> !s32i extra(#fn_attr) loc(#loc119)
                %39 = cir.const #cir.int<1> : !s32i loc(#loc120)
                %40 = cir.unary(minus, %39) : !s32i, !s32i loc(#loc121)
                %41 = cir.cmp(eq, %38, %40) : !s32i, !cir.bool loc(#loc364)
                cir.if %41 {
                  cir.break loc(#loc123)
                } loc(#loc365)
              } loc(#loc361)
              cir.scope {
                %35 = cir.cast(bitcast, %1 : !cir.ptr<!ty_sockaddr_in>), !cir.ptr<!ty_sockaddr> loc(#loc367)
                %36 = cir.const #cir.int<16> : !u64i loc(#loc368)
                %37 = cir.cast(integral, %36 : !u64i), !u32i loc(#loc368)
                %38 = cir.cast(array_to_ptrdecay, %5 : !cir.ptr<!cir.array<!s8i x 1025>>), !cir.ptr<!s8i> loc(#loc130)
                %39 = cir.const #cir.int<1025> : !s32i loc(#loc131)
                %40 = cir.cast(integral, %39 : !s32i), !u32i loc(#loc131)
                %41 = cir.cast(array_to_ptrdecay, %6 : !cir.ptr<!cir.array<!s8i x 32>>), !cir.ptr<!s8i> loc(#loc132)
                %42 = cir.const #cir.int<32> : !s32i loc(#loc133)
                %43 = cir.cast(integral, %42 : !s32i), !u32i loc(#loc133)
                %44 = cir.const #cir.int<2> : !s32i loc(#loc134)
                %45 = cir.call @getnameinfo(%35, %37, %38, %40, %41, %43, %44) : (!cir.ptr<!ty_sockaddr>, !u32i, !cir.ptr<!s8i>, !u32i, !cir.ptr<!s8i>, !u32i, !s32i) -> !s32i loc(#loc135)
                %46 = cir.const #cir.int<0> : !s32i loc(#loc136)
                %47 = cir.cmp(ne, %45, %46) : !s32i, !cir.bool loc(#loc369)
                cir.if %47 {
                  cir.break loc(#loc138)
                } loc(#loc370)
              } loc(#loc366)
              cir.scope {
                %35 = cir.get_global @strcmp : !cir.ptr<!cir.func<!s32i (!cir.ptr<!s8i>, !cir.ptr<!s8i>)>> loc(#loc141)
                %36 = cir.get_global @".str" : !cir.ptr<!cir.array<!s8i x 17>> loc(#loc17)
                %37 = cir.cast(array_to_ptrdecay, %36 : !cir.ptr<!cir.array<!s8i x 17>>), !cir.ptr<!s8i> loc(#loc17)
                %38 = cir.cast(array_to_ptrdecay, %5 : !cir.ptr<!cir.array<!s8i x 1025>>), !cir.ptr<!s8i> loc(#loc142)
                %39 = cir.call @strcmp(%37, %38) : (!cir.ptr<!s8i>, !cir.ptr<!s8i>) -> !s32i extra(#fn_attr) loc(#loc141)
                %40 = cir.const #cir.int<0> : !s32i loc(#loc143)
                %41 = cir.cmp(eq, %39, %40) : !s32i, !cir.bool loc(#loc372)
                cir.if %41 {
                  cir.scope {
                    %42 = cir.load %4 : !cir.ptr<!s32i>, !s32i loc(#loc149)
                    %43 = cir.get_global @".str.1" : !cir.ptr<!cir.array<!s8i x 16>> loc(#loc20)
                    %44 = cir.cast(array_to_ptrdecay, %43 : !cir.ptr<!cir.array<!s8i x 16>>), !cir.ptr<!s8i> loc(#loc20)
                    %45 = cir.cast(bitcast, %44 : !cir.ptr<!s8i>), !cir.ptr<!void> loc(#loc20)
                    %46 = cir.const #cir.int<15> : !u64i loc(#loc375)
                    %47 = cir.const #cir.int<0> : !s32i loc(#loc152)
                    %48 = cir.call @send(%42, %45, %46, %47) : (!s32i, !cir.ptr<!void>, !u64i, !s32i) -> !s64i loc(#loc153)
                    %49 = cir.const #cir.int<1> : !s32i loc(#loc154)
                    %50 = cir.unary(minus, %49) : !s32i, !s32i loc(#loc154)
                    %51 = cir.cast(integral, %50 : !s32i), !s64i loc(#loc154)
                    %52 = cir.cmp(eq, %48, %51) : !s64i, !cir.bool loc(#loc376)
                    cir.if %52 {
                      cir.break loc(#loc156)
                    } loc(#loc377)
                  } loc(#loc374)
                } else {
                  cir.scope {
                    %42 = cir.load %4 : !cir.ptr<!s32i>, !s32i loc(#loc159)
                    %43 = cir.get_global @".str.2" : !cir.ptr<!cir.array<!s8i x 9>> loc(#loc21)
                    %44 = cir.cast(array_to_ptrdecay, %43 : !cir.ptr<!cir.array<!s8i x 9>>), !cir.ptr<!s8i> loc(#loc21)
                    %45 = cir.cast(bitcast, %44 : !cir.ptr<!s8i>), !cir.ptr<!void> loc(#loc21)
                    %46 = cir.const #cir.int<8> : !u64i loc(#loc379)
                    %47 = cir.const #cir.int<0> : !s32i loc(#loc162)
                    %48 = cir.call @send(%42, %45, %46, %47) : (!s32i, !cir.ptr<!void>, !u64i, !s32i) -> !s64i loc(#loc163)
                    %49 = cir.const #cir.int<1> : !s32i loc(#loc164)
                    %50 = cir.unary(minus, %49) : !s32i, !s32i loc(#loc164)
                    %51 = cir.cast(integral, %50 : !s32i), !s64i loc(#loc164)
                    %52 = cir.cmp(eq, %48, %51) : !s64i, !cir.bool loc(#loc380)
                    cir.if %52 {
                      %53 = cir.get_global @".str.3" : !cir.ptr<!cir.array<!s8i x 13>> loc(#loc24)
                      %54 = cir.cast(array_to_ptrdecay, %53 : !cir.ptr<!cir.array<!s8i x 13>>), !cir.ptr<!s8i> loc(#loc24)
                      cir.call @printLine(%54) : (!cir.ptr<!s8i>) -> () loc(#loc166)
                    } loc(#loc381)
                  } loc(#loc378)
                } loc(#loc373)
              } loc(#loc371)
              cir.yield loc(#loc49)
            } while {
              %13 = cir.const #cir.int<0> : !s32i loc(#loc167)
              %14 = cir.cast(int_to_bool, %13 : !s32i), !cir.bool loc(#loc167)
              cir.condition(%14) loc(#loc167)
            } loc(#loc338)
          } loc(#loc338)
          cir.scope {
            %13 = cir.load %3 : !cir.ptr<!s32i>, !s32i loc(#loc170)
            %14 = cir.const #cir.int<1> : !s32i loc(#loc171)
            %15 = cir.unary(minus, %14) : !s32i, !s32i loc(#loc171)
            %16 = cir.cmp(ne, %13, %15) : !s32i, !cir.bool loc(#loc383)
            cir.if %16 {
              %17 = cir.load %3 : !cir.ptr<!s32i>, !s32i loc(#loc173)
              %18 = cir.call @close(%17) : (!s32i) -> !s32i loc(#loc174)
            } loc(#loc384)
          } loc(#loc382)
          cir.scope {
            %13 = cir.load %4 : !cir.ptr<!s32i>, !s32i loc(#loc177)
            %14 = cir.const #cir.int<1> : !s32i loc(#loc178)
            %15 = cir.unary(minus, %14) : !s32i, !s32i loc(#loc178)
            %16 = cir.cmp(ne, %13, %15) : !s32i, !cir.bool loc(#loc386)
            cir.if %16 {
              %17 = cir.load %4 : !cir.ptr<!s32i>, !s32i loc(#loc180)
              %18 = cir.call @close(%17) : (!s32i) -> !s32i loc(#loc181)
            } loc(#loc387)
          } loc(#loc385)
        } loc(#loc329)
        cir.break loc(#loc182)
      } loc(#loc328)
    } loc(#loc328)
    cir.return loc(#loc28)
  } loc(#loc327)
  cir.func no_proto @CWE510_Trapdoor__hostname_based_logic_16_good() extra(#fn_attr1) {
    %0 = cir.get_global @good1 : !cir.ptr<!cir.func<!void ()>> loc(#loc389)
    cir.call %0() : (!cir.ptr<!cir.func<!void ()>>) -> () loc(#loc185)
    cir.return loc(#loc184)
  } loc(#loc388)
  cir.func private @srand(!u32i) extra(#fn_attr) loc(#loc390)
  cir.func private @time(!cir.ptr<!s64i>) -> !s64i extra(#fn_attr) loc(#loc391)
  cir.global "private" constant cir_private dsolocal @".str.4" = #cir.const_array<"Calling good()...\00" : !cir.array<!s8i x 18>> : !cir.array<!s8i x 18> {alignment = 1 : i64} loc(#loc191)
  cir.global "private" constant cir_private dsolocal @".str.5" = #cir.const_array<"Finished good()\00" : !cir.array<!s8i x 16>> : !cir.array<!s8i x 16> {alignment = 1 : i64} loc(#loc192)
  cir.global "private" constant cir_private dsolocal @".str.6" = #cir.const_array<"Calling bad()...\00" : !cir.array<!s8i x 17>> : !cir.array<!s8i x 17> {alignment = 1 : i64} loc(#loc193)
  cir.global "private" constant cir_private dsolocal @".str.7" = #cir.const_array<"Finished bad()\00" : !cir.array<!s8i x 15>> : !cir.array<!s8i x 15> {alignment = 1 : i64} loc(#loc194)
  cir.func @main(%arg0: !s32i loc(fused[#loc197, #loc198]), %arg1: !cir.ptr<!cir.ptr<!s8i>> loc(fused[#loc199, #loc200])) -> !s32i extra(#fn_attr1) {
    %0 = cir.alloca !s32i, !cir.ptr<!s32i>, ["argc", init] {alignment = 4 : i64} loc(#loc393)
    %1 = cir.alloca !cir.ptr<!cir.ptr<!s8i>>, !cir.ptr<!cir.ptr<!cir.ptr<!s8i>>>, ["argv", init] {alignment = 8 : i64} loc(#loc394)
    %2 = cir.alloca !s32i, !cir.ptr<!s32i>, ["__retval"] {alignment = 4 : i64} loc(#loc196)
    cir.store %arg0, %0 : !s32i, !cir.ptr<!s32i> loc(#loc201)
    cir.store %arg1, %1 : !cir.ptr<!cir.ptr<!s8i>>, !cir.ptr<!cir.ptr<!cir.ptr<!s8i>>> loc(#loc201)
    %3 = cir.const #cir.ptr<null> : !cir.ptr<!s64i> loc(#loc202)
    %4 = cir.call @time(%3) : (!cir.ptr<!s64i>) -> !s64i extra(#fn_attr) loc(#loc203)
    %5 = cir.cast(integral, %4 : !s64i), !u32i loc(#loc203)
    cir.call @srand(%5) : (!u32i) -> () extra(#fn_attr) loc(#loc204)
    %6 = cir.get_global @".str.4" : !cir.ptr<!cir.array<!s8i x 18>> loc(#loc191)
    %7 = cir.cast(array_to_ptrdecay, %6 : !cir.ptr<!cir.array<!s8i x 18>>), !cir.ptr<!s8i> loc(#loc191)
    cir.call @printLine(%7) : (!cir.ptr<!s8i>) -> () loc(#loc205)
    %8 = cir.get_global @CWE510_Trapdoor__hostname_based_logic_16_good : !cir.ptr<!cir.func<!void ()>> loc(#loc395)
    cir.call @CWE510_Trapdoor__hostname_based_logic_16_good() : () -> () loc(#loc206)
    %9 = cir.get_global @".str.5" : !cir.ptr<!cir.array<!s8i x 16>> loc(#loc192)
    %10 = cir.cast(array_to_ptrdecay, %9 : !cir.ptr<!cir.array<!s8i x 16>>), !cir.ptr<!s8i> loc(#loc192)
    cir.call @printLine(%10) : (!cir.ptr<!s8i>) -> () loc(#loc208)
    %11 = cir.get_global @".str.6" : !cir.ptr<!cir.array<!s8i x 17>> loc(#loc193)
    %12 = cir.cast(array_to_ptrdecay, %11 : !cir.ptr<!cir.array<!s8i x 17>>), !cir.ptr<!s8i> loc(#loc193)
    cir.call @printLine(%12) : (!cir.ptr<!s8i>) -> () loc(#loc209)
    %13 = cir.get_global @CWE510_Trapdoor__hostname_based_logic_16_bad : !cir.ptr<!cir.func<!void ()>> loc(#loc396)
    cir.call @CWE510_Trapdoor__hostname_based_logic_16_bad() : () -> () loc(#loc210)
    %14 = cir.get_global @".str.7" : !cir.ptr<!cir.array<!s8i x 15>> loc(#loc194)
    %15 = cir.cast(array_to_ptrdecay, %14 : !cir.ptr<!cir.array<!s8i x 15>>), !cir.ptr<!s8i> loc(#loc194)
    cir.call @printLine(%15) : (!cir.ptr<!s8i>) -> () loc(#loc212)
    %16 = cir.const #cir.int<0> : !s32i loc(#loc213)
    cir.store %16, %2 : !s32i, !cir.ptr<!s32i> loc(#loc397)
    %17 = cir.load %2 : !cir.ptr<!s32i>, !s32i loc(#loc397)
    cir.return %17 : !s32i loc(#loc397)
  } loc(#loc392)
  cir.func no_proto internal private @good1() extra(#fn_attr1) {
    cir.scope {
      cir.while {
        %0 = cir.const #cir.int<1> : !s32i loc(#loc219)
        %1 = cir.cast(int_to_bool, %0 : !s32i), !cir.bool loc(#loc219)
        cir.condition(%1) loc(#loc219)
      } do {
        cir.scope {
          %0 = cir.alloca !ty_sockaddr_in, !cir.ptr<!ty_sockaddr_in>, ["service"] {alignment = 4 : i64} loc(#loc401)
          %1 = cir.alloca !s32i, !cir.ptr<!s32i>, ["listenSocket", init] {alignment = 4 : i64} loc(#loc402)
          %2 = cir.alloca !s32i, !cir.ptr<!s32i>, ["acceptSocket", init] {alignment = 4 : i64} loc(#loc403)
          %3 = cir.const #cir.int<1> : !s32i loc(#loc225)
          %4 = cir.unary(minus, %3) : !s32i, !s32i loc(#loc225)
          cir.store %4, %1 : !s32i, !cir.ptr<!s32i> loc(#loc402)
          %5 = cir.const #cir.int<1> : !s32i loc(#loc227)
          %6 = cir.unary(minus, %5) : !s32i, !s32i loc(#loc227)
          cir.store %6, %2 : !s32i, !cir.ptr<!s32i> loc(#loc403)
          cir.scope {
            cir.do {
              %7 = cir.const #cir.int<2> : !s32i loc(#loc230)
              %8 = cir.const #cir.int<1> : !s32i loc(#loc231)
              %9 = cir.const #cir.int<6> : !s32i loc(#loc232)
              %10 = cir.call @socket(%7, %8, %9) : (!s32i, !s32i, !s32i) -> !s32i extra(#fn_attr) loc(#loc233)
              cir.store %10, %1 : !s32i, !cir.ptr<!s32i> loc(#loc405)
              cir.scope {
                %29 = cir.load %1 : !cir.ptr<!s32i>, !s32i loc(#loc238)
                %30 = cir.const #cir.int<1> : !s32i loc(#loc239)
                %31 = cir.unary(minus, %30) : !s32i, !s32i loc(#loc239)
                %32 = cir.cmp(eq, %29, %31) : !s32i, !cir.bool loc(#loc407)
                cir.if %32 {
                  cir.break loc(#loc241)
                } loc(#loc408)
              } loc(#loc406)
              %11 = cir.cast(bitcast, %0 : !cir.ptr<!ty_sockaddr_in>), !cir.ptr<!void> loc(#loc409)
              %12 = cir.const #cir.int<0> : !s32i loc(#loc244)
              %13 = cir.const #cir.int<16> : !u64i loc(#loc410)
              cir.libc.memset %13 bytes from %11 set to %12 : !cir.ptr<!void>, !s32i, !u64i loc(#loc411)
              %14 = cir.const #cir.int<2> : !s32i loc(#loc249)
              %15 = cir.cast(integral, %14 : !s32i), !u16i loc(#loc249)
              %16 = cir.get_member %0[0] {name = "sin_family"} : !cir.ptr<!ty_sockaddr_in> -> !cir.ptr<!u16i> loc(#loc70)
              cir.store %15, %16 : !u16i, !cir.ptr<!u16i> loc(#loc412)
              %17 = cir.const #cir.int<0> : !s32i loc(#loc251)
              %18 = cir.cast(integral, %17 : !s32i), !u32i loc(#loc251)
              %19 = cir.get_member %0[2] {name = "sin_addr"} : !cir.ptr<!ty_sockaddr_in> -> !cir.ptr<!ty_in_addr> loc(#loc73)
              %20 = cir.get_member %19[0] {name = "s_addr"} : !cir.ptr<!ty_in_addr> -> !cir.ptr<!u32i> loc(#loc74)
              cir.store %18, %20 : !u32i, !cir.ptr<!u32i> loc(#loc413)
              %21 = cir.const #cir.int<20000> : !s32i loc(#loc253)
              %22 = cir.cast(integral, %21 : !s32i), !u16i loc(#loc253)
              %23 = cir.call @htons(%22) : (!u16i) -> !u16i extra(#fn_attr) loc(#loc254)
              %24 = cir.get_member %0[1] {name = "sin_port"} : !cir.ptr<!ty_sockaddr_in> -> !cir.ptr<!u16i> loc(#loc78)
              cir.store %23, %24 : !u16i, !cir.ptr<!u16i> loc(#loc414)
              cir.scope {
                %29 = cir.load %1 : !cir.ptr<!s32i>, !s32i loc(#loc259)
                %30 = cir.cast(bitcast, %0 : !cir.ptr<!ty_sockaddr_in>), !cir.ptr<!ty_sockaddr> loc(#loc416)
                %31 = cir.const #cir.int<16> : !u64i loc(#loc417)
                %32 = cir.cast(integral, %31 : !u64i), !u32i loc(#loc417)
                %33 = cir.call @bind(%29, %30, %32) : (!s32i, !cir.ptr<!ty_sockaddr>, !u32i) -> !s32i extra(#fn_attr) loc(#loc264)
                %34 = cir.const #cir.int<1> : !s32i loc(#loc265)
                %35 = cir.unary(minus, %34) : !s32i, !s32i loc(#loc265)
                %36 = cir.cmp(eq, %33, %35) : !s32i, !cir.bool loc(#loc418)
                cir.if %36 {
                  cir.break loc(#loc267)
                } loc(#loc419)
              } loc(#loc415)
              cir.scope {
                %29 = cir.load %1 : !cir.ptr<!s32i>, !s32i loc(#loc270)
                %30 = cir.const #cir.int<5> : !s32i loc(#loc271)
                %31 = cir.call @listen(%29, %30) : (!s32i, !s32i) -> !s32i extra(#fn_attr) loc(#loc272)
                %32 = cir.const #cir.int<1> : !s32i loc(#loc273)
                %33 = cir.unary(minus, %32) : !s32i, !s32i loc(#loc273)
                %34 = cir.cmp(eq, %31, %33) : !s32i, !cir.bool loc(#loc421)
                cir.if %34 {
                  cir.break loc(#loc275)
                } loc(#loc422)
              } loc(#loc420)
              %25 = cir.load %1 : !cir.ptr<!s32i>, !s32i loc(#loc276)
              %26 = cir.const #cir.ptr<null> : !cir.ptr<!ty_sockaddr> loc(#loc277)
              %27 = cir.const #cir.ptr<null> : !cir.ptr<!u32i> loc(#loc278)
              %28 = cir.call @accept(%25, %26, %27) : (!s32i, !cir.ptr<!ty_sockaddr>, !cir.ptr<!u32i>) -> !s32i loc(#loc279)
              cir.store %28, %2 : !s32i, !cir.ptr<!s32i> loc(#loc423)
              cir.scope {
                %29 = cir.load %2 : !cir.ptr<!s32i>, !s32i loc(#loc284)
                %30 = cir.const #cir.int<1> : !s32i loc(#loc285)
                %31 = cir.unary(minus, %30) : !s32i, !s32i loc(#loc285)
                %32 = cir.cmp(eq, %29, %31) : !s32i, !cir.bool loc(#loc425)
                cir.if %32 {
                  cir.break loc(#loc287)
                } loc(#loc426)
              } loc(#loc424)
              cir.scope {
                %29 = cir.load %2 : !cir.ptr<!s32i>, !s32i loc(#loc290)
                %30 = cir.get_global @".str.2" : !cir.ptr<!cir.array<!s8i x 9>> loc(#loc291)
                %31 = cir.cast(array_to_ptrdecay, %30 : !cir.ptr<!cir.array<!s8i x 9>>), !cir.ptr<!s8i> loc(#loc291)
                %32 = cir.cast(bitcast, %31 : !cir.ptr<!s8i>), !cir.ptr<!void> loc(#loc291)
                %33 = cir.const #cir.int<8> : !u64i loc(#loc428)
                %34 = cir.const #cir.int<0> : !s32i loc(#loc294)
                %35 = cir.call @send(%29, %32, %33, %34) : (!s32i, !cir.ptr<!void>, !u64i, !s32i) -> !s64i loc(#loc295)
                %36 = cir.const #cir.int<1> : !s32i loc(#loc296)
                %37 = cir.unary(minus, %36) : !s32i, !s32i loc(#loc296)
                %38 = cir.cast(integral, %37 : !s32i), !s64i loc(#loc296)
                %39 = cir.cmp(eq, %35, %38) : !s64i, !cir.bool loc(#loc429)
                cir.if %39 {
                  %40 = cir.get_global @".str.3" : !cir.ptr<!cir.array<!s8i x 13>> loc(#loc298)
                  %41 = cir.cast(array_to_ptrdecay, %40 : !cir.ptr<!cir.array<!s8i x 13>>), !cir.ptr<!s8i> loc(#loc298)
                  cir.call @printLine(%41) : (!cir.ptr<!s8i>) -> () loc(#loc299)
                } loc(#loc430)
              } loc(#loc427)
              cir.yield loc(#loc229)
            } while {
              %7 = cir.const #cir.int<0> : !s32i loc(#loc300)
              %8 = cir.cast(int_to_bool, %7 : !s32i), !cir.bool loc(#loc300)
              cir.condition(%8) loc(#loc300)
            } loc(#loc404)
          } loc(#loc404)
          cir.scope {
            %7 = cir.load %1 : !cir.ptr<!s32i>, !s32i loc(#loc303)
            %8 = cir.const #cir.int<1> : !s32i loc(#loc304)
            %9 = cir.unary(minus, %8) : !s32i, !s32i loc(#loc304)
            %10 = cir.cmp(ne, %7, %9) : !s32i, !cir.bool loc(#loc432)
            cir.if %10 {
              %11 = cir.load %1 : !cir.ptr<!s32i>, !s32i loc(#loc306)
              %12 = cir.call @close(%11) : (!s32i) -> !s32i loc(#loc307)
            } loc(#loc433)
          } loc(#loc431)
          cir.scope {
            %7 = cir.load %2 : !cir.ptr<!s32i>, !s32i loc(#loc310)
            %8 = cir.const #cir.int<1> : !s32i loc(#loc311)
            %9 = cir.unary(minus, %8) : !s32i, !s32i loc(#loc311)
            %10 = cir.cmp(ne, %7, %9) : !s32i, !cir.bool loc(#loc435)
            cir.if %10 {
              %11 = cir.load %2 : !cir.ptr<!s32i>, !s32i loc(#loc313)
              %12 = cir.call @close(%11) : (!s32i) -> !s32i loc(#loc314)
            } loc(#loc436)
          } loc(#loc434)
        } loc(#loc400)
        cir.break loc(#loc315)
      } loc(#loc399)
    } loc(#loc399)
    cir.return loc(#loc216)
  } loc(#loc398)
} loc(#loc)
#loc = loc("/home/ladisgin/git_proj/juliet-c/testcases/CWE510_Trapdoor/CWE510_Trapdoor__hostname_based_logic_16.c":0:0)
#loc1 = loc("/usr/include/sys/socket.h":102:1)
#loc2 = loc("/usr/include/sys/socket.h":102:62)
#loc3 = loc("/usr/include/netinet/in.h":404:1)
#loc4 = loc("/usr/include/netinet/in.h":405:40)
#loc5 = loc("/usr/include/sys/socket.h":112:1)
#loc6 = loc("/usr/include/sys/socket.h":113:6)
#loc7 = loc("/usr/include/sys/socket.h":296:1)
#loc8 = loc("/usr/include/sys/socket.h":296:39)
#loc9 = loc("/usr/include/sys/socket.h":306:1)
#loc10 = loc("/usr/include/sys/socket.h":307:38)
#loc11 = loc("/usr/include/sys/socket.h":116:1)
#loc12 = loc("/usr/include/sys/socket.h":117:33)
#loc13 = loc("/usr/include/netdb.h":675:1)
#loc14 = loc("/usr/include/netdb.h":678:36)
#loc15 = loc("/usr/include/string.h":156:1)
#loc16 = loc("/usr/include/string.h":157:33)
#loc17 = loc("CWE510_Trapdoor__hostname_based_logic_16.c":105:28)
#loc18 = loc("/usr/include/sys/socket.h":138:1)
#loc19 = loc("/usr/include/sys/socket.h":138:74)
#loc20 = loc("CWE510_Trapdoor__hostname_based_logic_16.c":107:44)
#loc21 = loc("CWE510_Trapdoor__hostname_based_logic_16.c":115:44)
#loc22 = loc("../../testcasesupport/std_testcase_io.h":14:1)
#loc23 = loc("../../testcasesupport/std_testcase_io.h":14:33)
#loc24 = loc("CWE510_Trapdoor__hostname_based_logic_16.c":117:35)
#loc25 = loc("/usr/include/unistd.h":358:1)
#loc26 = loc("/usr/include/unistd.h":358:27)
#loc27 = loc("CWE510_Trapdoor__hostname_based_logic_16.c":47:1)
#loc28 = loc("CWE510_Trapdoor__hostname_based_logic_16.c":139:1)
#loc29 = loc("CWE510_Trapdoor__hostname_based_logic_16.c":49:5)
#loc30 = loc("CWE510_Trapdoor__hostname_based_logic_16.c":138:5)
#loc31 = loc("CWE510_Trapdoor__hostname_based_logic_16.c":49:11)
#loc32 = loc("CWE510_Trapdoor__hostname_based_logic_16.c":51:9)
#loc33 = loc("CWE510_Trapdoor__hostname_based_logic_16.c":136:9)
#loc34 = loc("CWE510_Trapdoor__hostname_based_logic_16.c":56:13)
#loc35 = loc("CWE510_Trapdoor__hostname_based_logic_16.c":56:32)
#loc36 = loc("CWE510_Trapdoor__hostname_based_logic_16.c":56:41)
#loc37 = loc("CWE510_Trapdoor__hostname_based_logic_16.c":57:13)
#loc38 = loc("CWE510_Trapdoor__hostname_based_logic_16.c":57:56)
#loc39 = loc("CWE510_Trapdoor__hostname_based_logic_16.c":58:13)
#loc40 = loc("CWE510_Trapdoor__hostname_based_logic_16.c":58:35)
#loc41 = loc("CWE510_Trapdoor__hostname_based_logic_16.c":59:13)
#loc42 = loc("CWE510_Trapdoor__hostname_based_logic_16.c":59:35)
#loc43 = loc("CWE510_Trapdoor__hostname_based_logic_16.c":60:13)
#loc44 = loc("CWE510_Trapdoor__hostname_based_logic_16.c":60:37)
#loc45 = loc("CWE510_Trapdoor__hostname_based_logic_16.c":61:13)
#loc46 = loc("CWE510_Trapdoor__hostname_based_logic_16.c":61:37)
#loc47 = loc("CWE510_Trapdoor__hostname_based_logic_16.c":57:36)
#loc48 = loc("CWE510_Trapdoor__hostname_based_logic_16.c":62:13)
#loc49 = loc("CWE510_Trapdoor__hostname_based_logic_16.c":121:21)
#loc50 = loc("CWE510_Trapdoor__hostname_based_logic_16.c":71:39)
#loc51 = loc("CWE510_Trapdoor__hostname_based_logic_16.c":71:48)
#loc52 = loc("CWE510_Trapdoor__hostname_based_logic_16.c":71:61)
#loc53 = loc("CWE510_Trapdoor__hostname_based_logic_16.c":71:32)
#loc54 = loc("CWE510_Trapdoor__hostname_based_logic_16.c":71:17)
#loc55 = loc("CWE510_Trapdoor__hostname_based_logic_16.c":71:72)
#loc56 = loc("CWE510_Trapdoor__hostname_based_logic_16.c":72:17)
#loc57 = loc("CWE510_Trapdoor__hostname_based_logic_16.c":75:17)
#loc58 = loc("CWE510_Trapdoor__hostname_based_logic_16.c":72:21)
#loc59 = loc("CWE510_Trapdoor__hostname_based_logic_16.c":72:37)
#loc60 = loc("CWE510_Trapdoor__hostname_based_logic_16.c":73:17)
#loc61 = loc("CWE510_Trapdoor__hostname_based_logic_16.c":74:21)
#loc62 = loc("CWE510_Trapdoor__hostname_based_logic_16.c":76:24)
#loc63 = loc("CWE510_Trapdoor__hostname_based_logic_16.c":76:25)
#loc64 = loc("CWE510_Trapdoor__hostname_based_logic_16.c":76:34)
#loc65 = loc("CWE510_Trapdoor__hostname_based_logic_16.c":76:37)
#loc66 = loc("CWE510_Trapdoor__hostname_based_logic_16.c":76:51)
#loc67 = loc("CWE510_Trapdoor__hostname_based_logic_16.c":76:17)
#loc68 = loc("CWE510_Trapdoor__hostname_based_logic_16.c":76:52)
#loc69 = loc("CWE510_Trapdoor__hostname_based_logic_16.c":77:38)
#loc70 = loc("/usr/include/netinet/in.h":249:5)
#loc71 = loc("CWE510_Trapdoor__hostname_based_logic_16.c":77:17)
#loc72 = loc("CWE510_Trapdoor__hostname_based_logic_16.c":78:43)
#loc73 = loc("/usr/include/netinet/in.h":251:20)
#loc74 = loc("/usr/include/netinet/in.h":33:15)
#loc75 = loc("CWE510_Trapdoor__hostname_based_logic_16.c":78:17)
#loc76 = loc("CWE510_Trapdoor__hostname_based_logic_16.c":79:42)
#loc77 = loc("CWE510_Trapdoor__hostname_based_logic_16.c":79:36)
#loc78 = loc("/usr/include/netinet/in.h":250:15)
#loc79 = loc("CWE510_Trapdoor__hostname_based_logic_16.c":79:17)
#loc80 = loc("CWE510_Trapdoor__hostname_based_logic_16.c":79:47)
#loc81 = loc("CWE510_Trapdoor__hostname_based_logic_16.c":80:17)
#loc82 = loc("CWE510_Trapdoor__hostname_based_logic_16.c":83:17)
#loc83 = loc("CWE510_Trapdoor__hostname_based_logic_16.c":80:26)
#loc84 = loc("CWE510_Trapdoor__hostname_based_logic_16.c":80:58)
#loc85 = loc("CWE510_Trapdoor__hostname_based_logic_16.c":80:59)
#loc86 = loc("CWE510_Trapdoor__hostname_based_logic_16.c":80:68)
#loc87 = loc("CWE510_Trapdoor__hostname_based_logic_16.c":80:82)
#loc88 = loc("CWE510_Trapdoor__hostname_based_logic_16.c":80:21)
#loc89 = loc("CWE510_Trapdoor__hostname_based_logic_16.c":80:88)
#loc90 = loc("CWE510_Trapdoor__hostname_based_logic_16.c":81:17)
#loc91 = loc("CWE510_Trapdoor__hostname_based_logic_16.c":82:21)
#loc92 = loc("CWE510_Trapdoor__hostname_based_logic_16.c":84:17)
#loc93 = loc("CWE510_Trapdoor__hostname_based_logic_16.c":87:17)
#loc94 = loc("CWE510_Trapdoor__hostname_based_logic_16.c":84:28)
#loc95 = loc("CWE510_Trapdoor__hostname_based_logic_16.c":84:42)
#loc96 = loc("CWE510_Trapdoor__hostname_based_logic_16.c":84:21)
#loc97 = loc("CWE510_Trapdoor__hostname_based_logic_16.c":84:48)
#loc98 = loc("CWE510_Trapdoor__hostname_based_logic_16.c":85:17)
#loc99 = loc("CWE510_Trapdoor__hostname_based_logic_16.c":86:21)
#loc100 = loc("CWE510_Trapdoor__hostname_based_logic_16.c":88:39)
#loc101 = loc("CWE510_Trapdoor__hostname_based_logic_16.c":88:53)
#loc102 = loc("CWE510_Trapdoor__hostname_based_logic_16.c":88:59)
#loc103 = loc("CWE510_Trapdoor__hostname_based_logic_16.c":88:32)
#loc104 = loc("CWE510_Trapdoor__hostname_based_logic_16.c":88:17)
#loc105 = loc("CWE510_Trapdoor__hostname_based_logic_16.c":88:63)
#loc106 = loc("CWE510_Trapdoor__hostname_based_logic_16.c":89:17)
#loc107 = loc("CWE510_Trapdoor__hostname_based_logic_16.c":92:17)
#loc108 = loc("CWE510_Trapdoor__hostname_based_logic_16.c":89:21)
#loc109 = loc("CWE510_Trapdoor__hostname_based_logic_16.c":89:37)
#loc110 = loc("CWE510_Trapdoor__hostname_based_logic_16.c":90:17)
#loc111 = loc("CWE510_Trapdoor__hostname_based_logic_16.c":91:21)
#loc112 = loc("CWE510_Trapdoor__hostname_based_logic_16.c":93:17)
#loc113 = loc("CWE510_Trapdoor__hostname_based_logic_16.c":96:17)
#loc114 = loc("CWE510_Trapdoor__hostname_based_logic_16.c":93:33)
#loc115 = loc("CWE510_Trapdoor__hostname_based_logic_16.c":93:66)
#loc116 = loc("CWE510_Trapdoor__hostname_based_logic_16.c":93:67)
#loc117 = loc("CWE510_Trapdoor__hostname_based_logic_16.c":93:82)
#loc118 = loc("CWE510_Trapdoor__hostname_based_logic_16.c":93:83)
#loc119 = loc("CWE510_Trapdoor__hostname_based_logic_16.c":93:21)
#loc120 = loc("CWE510_Trapdoor__hostname_based_logic_16.c":93:105)
#loc121 = loc("CWE510_Trapdoor__hostname_based_logic_16.c":93:104)
#loc122 = loc("CWE510_Trapdoor__hostname_based_logic_16.c":94:17)
#loc123 = loc("CWE510_Trapdoor__hostname_based_logic_16.c":95:21)
#loc124 = loc("CWE510_Trapdoor__hostname_based_logic_16.c":97:17)
#loc125 = loc("CWE510_Trapdoor__hostname_based_logic_16.c":103:17)
#loc126 = loc("CWE510_Trapdoor__hostname_based_logic_16.c":97:52)
#loc127 = loc("CWE510_Trapdoor__hostname_based_logic_16.c":97:53)
#loc128 = loc("CWE510_Trapdoor__hostname_based_logic_16.c":98:33)
#loc129 = loc("CWE510_Trapdoor__hostname_based_logic_16.c":98:55)
#loc130 = loc("CWE510_Trapdoor__hostname_based_logic_16.c":99:33)
#loc131 = loc("CWE510_Trapdoor__hostname_based_logic_16.c":100:33)
#loc132 = loc("CWE510_Trapdoor__hostname_based_logic_16.c":100:45)
#loc133 = loc("CWE510_Trapdoor__hostname_based_logic_16.c":100:55)
#loc134 = loc("CWE510_Trapdoor__hostname_based_logic_16.c":100:67)
#loc135 = loc("CWE510_Trapdoor__hostname_based_logic_16.c":97:21)
#loc136 = loc("CWE510_Trapdoor__hostname_based_logic_16.c":100:86)
#loc137 = loc("CWE510_Trapdoor__hostname_based_logic_16.c":101:17)
#loc138 = loc("CWE510_Trapdoor__hostname_based_logic_16.c":102:21)
#loc139 = loc("CWE510_Trapdoor__hostname_based_logic_16.c":105:17)
#loc140 = loc("CWE510_Trapdoor__hostname_based_logic_16.c":119:17)
#loc141 = loc("CWE510_Trapdoor__hostname_based_logic_16.c":105:21)
#loc142 = loc("CWE510_Trapdoor__hostname_based_logic_16.c":105:48)
#loc143 = loc("CWE510_Trapdoor__hostname_based_logic_16.c":105:61)
#loc144 = loc("CWE510_Trapdoor__hostname_based_logic_16.c":106:17)
#loc145 = loc("CWE510_Trapdoor__hostname_based_logic_16.c":112:17)
#loc146 = loc("CWE510_Trapdoor__hostname_based_logic_16.c":114:17)
#loc147 = loc("CWE510_Trapdoor__hostname_based_logic_16.c":107:21)
#loc148 = loc("CWE510_Trapdoor__hostname_based_logic_16.c":111:21)
#loc149 = loc("CWE510_Trapdoor__hostname_based_logic_16.c":107:30)
#loc150 = loc("CWE510_Trapdoor__hostname_based_logic_16.c":107:59)
#loc151 = loc("CWE510_Trapdoor__hostname_based_logic_16.c":107:79)
#loc152 = loc("CWE510_Trapdoor__hostname_based_logic_16.c":107:82)
#loc153 = loc("CWE510_Trapdoor__hostname_based_logic_16.c":107:25)
#loc154 = loc("CWE510_Trapdoor__hostname_based_logic_16.c":107:89)
#loc155 = loc("CWE510_Trapdoor__hostname_based_logic_16.c":108:21)
#loc156 = loc("CWE510_Trapdoor__hostname_based_logic_16.c":110:25)
#loc157 = loc("CWE510_Trapdoor__hostname_based_logic_16.c":115:21)
#loc158 = loc("CWE510_Trapdoor__hostname_based_logic_16.c":118:21)
#loc159 = loc("CWE510_Trapdoor__hostname_based_logic_16.c":115:30)
#loc160 = loc("CWE510_Trapdoor__hostname_based_logic_16.c":115:61)
#loc161 = loc("CWE510_Trapdoor__hostname_based_logic_16.c":115:83)
#loc162 = loc("CWE510_Trapdoor__hostname_based_logic_16.c":115:86)
#loc163 = loc("CWE510_Trapdoor__hostname_based_logic_16.c":115:25)
#loc164 = loc("CWE510_Trapdoor__hostname_based_logic_16.c":115:92)
#loc165 = loc("CWE510_Trapdoor__hostname_based_logic_16.c":116:21)
#loc166 = loc("CWE510_Trapdoor__hostname_based_logic_16.c":117:25)
#loc167 = loc("CWE510_Trapdoor__hostname_based_logic_16.c":121:20)
#loc168 = loc("CWE510_Trapdoor__hostname_based_logic_16.c":122:13)
#loc169 = loc("CWE510_Trapdoor__hostname_based_logic_16.c":125:13)
#loc170 = loc("CWE510_Trapdoor__hostname_based_logic_16.c":122:17)
#loc171 = loc("CWE510_Trapdoor__hostname_based_logic_16.c":122:33)
#loc172 = loc("CWE510_Trapdoor__hostname_based_logic_16.c":123:13)
#loc173 = loc("CWE510_Trapdoor__hostname_based_logic_16.c":124:30)
#loc174 = loc("CWE510_Trapdoor__hostname_based_logic_16.c":124:17)
#loc175 = loc("CWE510_Trapdoor__hostname_based_logic_16.c":126:13)
#loc176 = loc("CWE510_Trapdoor__hostname_based_logic_16.c":129:13)
#loc177 = loc("CWE510_Trapdoor__hostname_based_logic_16.c":126:17)
#loc178 = loc("CWE510_Trapdoor__hostname_based_logic_16.c":126:33)
#loc179 = loc("CWE510_Trapdoor__hostname_based_logic_16.c":127:13)
#loc180 = loc("CWE510_Trapdoor__hostname_based_logic_16.c":128:30)
#loc181 = loc("CWE510_Trapdoor__hostname_based_logic_16.c":128:17)
#loc182 = loc("CWE510_Trapdoor__hostname_based_logic_16.c":137:9)
#loc183 = loc("CWE510_Trapdoor__hostname_based_logic_16.c":215:1)
#loc184 = loc("CWE510_Trapdoor__hostname_based_logic_16.c":218:1)
#loc185 = loc("CWE510_Trapdoor__hostname_based_logic_16.c":217:5)
#loc186 = loc("CWE510_Trapdoor__hostname_based_logic_16.c":217:11)
#loc187 = loc("/usr/include/stdlib.h":575:1)
#loc188 = loc("/usr/include/stdlib.h":575:41)
#loc189 = loc("/usr/include/time.h":76:1)
#loc190 = loc("/usr/include/time.h":76:38)
#loc191 = loc("CWE510_Trapdoor__hostname_based_logic_16.c":234:15)
#loc192 = loc("CWE510_Trapdoor__hostname_based_logic_16.c":236:15)
#loc193 = loc("CWE510_Trapdoor__hostname_based_logic_16.c":239:15)
#loc194 = loc("CWE510_Trapdoor__hostname_based_logic_16.c":241:15)
#loc195 = loc("CWE510_Trapdoor__hostname_based_logic_16.c":229:1)
#loc196 = loc("CWE510_Trapdoor__hostname_based_logic_16.c":244:1)
#loc201 = loc("CWE510_Trapdoor__hostname_based_logic_16.c":230:1)
#loc202 = loc("CWE510_Trapdoor__hostname_based_logic_16.c":232:27)
#loc203 = loc("CWE510_Trapdoor__hostname_based_logic_16.c":232:22)
#loc204 = loc("CWE510_Trapdoor__hostname_based_logic_16.c":232:5)
#loc205 = loc("CWE510_Trapdoor__hostname_based_logic_16.c":234:5)
#loc206 = loc("CWE510_Trapdoor__hostname_based_logic_16.c":235:5)
#loc207 = loc("CWE510_Trapdoor__hostname_based_logic_16.c":235:51)
#loc208 = loc("CWE510_Trapdoor__hostname_based_logic_16.c":236:5)
#loc209 = loc("CWE510_Trapdoor__hostname_based_logic_16.c":239:5)
#loc210 = loc("CWE510_Trapdoor__hostname_based_logic_16.c":240:5)
#loc211 = loc("CWE510_Trapdoor__hostname_based_logic_16.c":240:50)
#loc212 = loc("CWE510_Trapdoor__hostname_based_logic_16.c":241:5)
#loc213 = loc("CWE510_Trapdoor__hostname_based_logic_16.c":243:12)
#loc214 = loc("CWE510_Trapdoor__hostname_based_logic_16.c":243:5)
#loc215 = loc("CWE510_Trapdoor__hostname_based_logic_16.c":146:1)
#loc216 = loc("CWE510_Trapdoor__hostname_based_logic_16.c":213:1)
#loc217 = loc("CWE510_Trapdoor__hostname_based_logic_16.c":148:5)
#loc218 = loc("CWE510_Trapdoor__hostname_based_logic_16.c":212:5)
#loc219 = loc("CWE510_Trapdoor__hostname_based_logic_16.c":148:11)
#loc220 = loc("CWE510_Trapdoor__hostname_based_logic_16.c":150:9)
#loc221 = loc("CWE510_Trapdoor__hostname_based_logic_16.c":210:9)
#loc222 = loc("CWE510_Trapdoor__hostname_based_logic_16.c":155:13)
#loc223 = loc("CWE510_Trapdoor__hostname_based_logic_16.c":155:32)
#loc224 = loc("CWE510_Trapdoor__hostname_based_logic_16.c":156:13)
#loc225 = loc("CWE510_Trapdoor__hostname_based_logic_16.c":156:35)
#loc226 = loc("CWE510_Trapdoor__hostname_based_logic_16.c":157:13)
#loc227 = loc("CWE510_Trapdoor__hostname_based_logic_16.c":157:35)
#loc228 = loc("CWE510_Trapdoor__hostname_based_logic_16.c":158:13)
#loc229 = loc("CWE510_Trapdoor__hostname_based_logic_16.c":195:21)
#loc230 = loc("CWE510_Trapdoor__hostname_based_logic_16.c":167:39)
#loc231 = loc("CWE510_Trapdoor__hostname_based_logic_16.c":167:48)
#loc232 = loc("CWE510_Trapdoor__hostname_based_logic_16.c":167:61)
#loc233 = loc("CWE510_Trapdoor__hostname_based_logic_16.c":167:32)
#loc234 = loc("CWE510_Trapdoor__hostname_based_logic_16.c":167:17)
#loc235 = loc("CWE510_Trapdoor__hostname_based_logic_16.c":167:72)
#loc236 = loc("CWE510_Trapdoor__hostname_based_logic_16.c":168:17)
#loc237 = loc("CWE510_Trapdoor__hostname_based_logic_16.c":171:17)
#loc238 = loc("CWE510_Trapdoor__hostname_based_logic_16.c":168:21)
#loc239 = loc("CWE510_Trapdoor__hostname_based_logic_16.c":168:37)
#loc240 = loc("CWE510_Trapdoor__hostname_based_logic_16.c":169:17)
#loc241 = loc("CWE510_Trapdoor__hostname_based_logic_16.c":170:21)
#loc242 = loc("CWE510_Trapdoor__hostname_based_logic_16.c":172:24)
#loc243 = loc("CWE510_Trapdoor__hostname_based_logic_16.c":172:25)
#loc244 = loc("CWE510_Trapdoor__hostname_based_logic_16.c":172:34)
#loc245 = loc("CWE510_Trapdoor__hostname_based_logic_16.c":172:37)
#loc246 = loc("CWE510_Trapdoor__hostname_based_logic_16.c":172:51)
#loc247 = loc("CWE510_Trapdoor__hostname_based_logic_16.c":172:17)
#loc248 = loc("CWE510_Trapdoor__hostname_based_logic_16.c":172:52)
#loc249 = loc("CWE510_Trapdoor__hostname_based_logic_16.c":173:38)
#loc250 = loc("CWE510_Trapdoor__hostname_based_logic_16.c":173:17)
#loc251 = loc("CWE510_Trapdoor__hostname_based_logic_16.c":174:43)
#loc252 = loc("CWE510_Trapdoor__hostname_based_logic_16.c":174:17)
#loc253 = loc("CWE510_Trapdoor__hostname_based_logic_16.c":175:42)
#loc254 = loc("CWE510_Trapdoor__hostname_based_logic_16.c":175:36)
#loc255 = loc("CWE510_Trapdoor__hostname_based_logic_16.c":175:17)
#loc256 = loc("CWE510_Trapdoor__hostname_based_logic_16.c":175:47)
#loc257 = loc("CWE510_Trapdoor__hostname_based_logic_16.c":176:17)
#loc258 = loc("CWE510_Trapdoor__hostname_based_logic_16.c":179:17)
#loc259 = loc("CWE510_Trapdoor__hostname_based_logic_16.c":176:26)
#loc260 = loc("CWE510_Trapdoor__hostname_based_logic_16.c":176:58)
#loc261 = loc("CWE510_Trapdoor__hostname_based_logic_16.c":176:59)
#loc262 = loc("CWE510_Trapdoor__hostname_based_logic_16.c":176:68)
#loc263 = loc("CWE510_Trapdoor__hostname_based_logic_16.c":176:82)
#loc264 = loc("CWE510_Trapdoor__hostname_based_logic_16.c":176:21)
#loc265 = loc("CWE510_Trapdoor__hostname_based_logic_16.c":176:88)
#loc266 = loc("CWE510_Trapdoor__hostname_based_logic_16.c":177:17)
#loc267 = loc("CWE510_Trapdoor__hostname_based_logic_16.c":178:21)
#loc268 = loc("CWE510_Trapdoor__hostname_based_logic_16.c":180:17)
#loc269 = loc("CWE510_Trapdoor__hostname_based_logic_16.c":183:17)
#loc270 = loc("CWE510_Trapdoor__hostname_based_logic_16.c":180:28)
#loc271 = loc("CWE510_Trapdoor__hostname_based_logic_16.c":180:42)
#loc272 = loc("CWE510_Trapdoor__hostname_based_logic_16.c":180:21)
#loc273 = loc("CWE510_Trapdoor__hostname_based_logic_16.c":180:48)
#loc274 = loc("CWE510_Trapdoor__hostname_based_logic_16.c":181:17)
#loc275 = loc("CWE510_Trapdoor__hostname_based_logic_16.c":182:21)
#loc276 = loc("CWE510_Trapdoor__hostname_based_logic_16.c":184:39)
#loc277 = loc("CWE510_Trapdoor__hostname_based_logic_16.c":184:53)
#loc278 = loc("CWE510_Trapdoor__hostname_based_logic_16.c":184:59)
#loc279 = loc("CWE510_Trapdoor__hostname_based_logic_16.c":184:32)
#loc280 = loc("CWE510_Trapdoor__hostname_based_logic_16.c":184:17)
#loc281 = loc("CWE510_Trapdoor__hostname_based_logic_16.c":184:63)
#loc282 = loc("CWE510_Trapdoor__hostname_based_logic_16.c":185:17)
#loc283 = loc("CWE510_Trapdoor__hostname_based_logic_16.c":188:17)
#loc284 = loc("CWE510_Trapdoor__hostname_based_logic_16.c":185:21)
#loc285 = loc("CWE510_Trapdoor__hostname_based_logic_16.c":185:37)
#loc286 = loc("CWE510_Trapdoor__hostname_based_logic_16.c":186:17)
#loc287 = loc("CWE510_Trapdoor__hostname_based_logic_16.c":187:21)
#loc288 = loc("CWE510_Trapdoor__hostname_based_logic_16.c":190:17)
#loc289 = loc("CWE510_Trapdoor__hostname_based_logic_16.c":193:17)
#loc290 = loc("CWE510_Trapdoor__hostname_based_logic_16.c":190:26)
#loc291 = loc("CWE510_Trapdoor__hostname_based_logic_16.c":190:40)
#loc292 = loc("CWE510_Trapdoor__hostname_based_logic_16.c":190:57)
#loc293 = loc("CWE510_Trapdoor__hostname_based_logic_16.c":190:79)
#loc294 = loc("CWE510_Trapdoor__hostname_based_logic_16.c":190:82)
#loc295 = loc("CWE510_Trapdoor__hostname_based_logic_16.c":190:21)
#loc296 = loc("CWE510_Trapdoor__hostname_based_logic_16.c":190:88)
#loc297 = loc("CWE510_Trapdoor__hostname_based_logic_16.c":191:17)
#loc298 = loc("CWE510_Trapdoor__hostname_based_logic_16.c":192:31)
#loc299 = loc("CWE510_Trapdoor__hostname_based_logic_16.c":192:21)
#loc300 = loc("CWE510_Trapdoor__hostname_based_logic_16.c":195:20)
#loc301 = loc("CWE510_Trapdoor__hostname_based_logic_16.c":196:13)
#loc302 = loc("CWE510_Trapdoor__hostname_based_logic_16.c":199:13)
#loc303 = loc("CWE510_Trapdoor__hostname_based_logic_16.c":196:17)
#loc304 = loc("CWE510_Trapdoor__hostname_based_logic_16.c":196:33)
#loc305 = loc("CWE510_Trapdoor__hostname_based_logic_16.c":197:13)
#loc306 = loc("CWE510_Trapdoor__hostname_based_logic_16.c":198:30)
#loc307 = loc("CWE510_Trapdoor__hostname_based_logic_16.c":198:17)
#loc308 = loc("CWE510_Trapdoor__hostname_based_logic_16.c":200:13)
#loc309 = loc("CWE510_Trapdoor__hostname_based_logic_16.c":203:13)
#loc310 = loc("CWE510_Trapdoor__hostname_based_logic_16.c":200:17)
#loc311 = loc("CWE510_Trapdoor__hostname_based_logic_16.c":200:33)
#loc312 = loc("CWE510_Trapdoor__hostname_based_logic_16.c":201:13)
#loc313 = loc("CWE510_Trapdoor__hostname_based_logic_16.c":202:30)
#loc314 = loc("CWE510_Trapdoor__hostname_based_logic_16.c":202:17)
#loc315 = loc("CWE510_Trapdoor__hostname_based_logic_16.c":211:9)
#loc316 = loc(fused[#loc1, #loc2])
#loc317 = loc(fused[#loc3, #loc4])
#loc318 = loc(fused[#loc5, #loc6])
#loc319 = loc(fused[#loc7, #loc8])
#loc320 = loc(fused[#loc9, #loc10])
#loc321 = loc(fused[#loc11, #loc12])
#loc322 = loc(fused[#loc13, #loc14])
#loc323 = loc(fused[#loc15, #loc16])
#loc324 = loc(fused[#loc18, #loc19])
#loc325 = loc(fused[#loc22, #loc23])
#loc326 = loc(fused[#loc25, #loc26])
#loc327 = loc(fused[#loc27, #loc28])
#loc328 = loc(fused[#loc29, #loc30])
#loc329 = loc(fused[#loc32, #loc33])
#loc330 = loc(fused[#loc34, #loc35])
#loc331 = loc(fused[#loc34, #loc36])
#loc332 = loc(fused[#loc37, #loc38])
#loc333 = loc(fused[#loc39, #loc40])
#loc334 = loc(fused[#loc41, #loc42])
#loc335 = loc(fused[#loc43, #loc44])
#loc336 = loc(fused[#loc45, #loc46])
#loc337 = loc(fused[#loc47, #loc38])
#loc338 = loc(fused[#loc48, #loc49])
#loc339 = loc(fused[#loc54, #loc55])
#loc340 = loc(fused[#loc56, #loc57])
#loc341 = loc(fused[#loc58, #loc59])
#loc342 = loc(fused[#loc60, #loc57])
#loc343 = loc(fused[#loc62, #loc63])
#loc344 = loc(fused[#loc65, #loc66])
#loc345 = loc(fused[#loc67, #loc68])
#loc346 = loc(fused[#loc71, #loc69])
#loc347 = loc(fused[#loc75, #loc72])
#loc348 = loc(fused[#loc79, #loc80])
#loc349 = loc(fused[#loc81, #loc82])
#loc350 = loc(fused[#loc84, #loc85])
#loc351 = loc(fused[#loc86, #loc87])
#loc352 = loc(fused[#loc88, #loc89])
#loc353 = loc(fused[#loc90, #loc82])
#loc354 = loc(fused[#loc92, #loc93])
#loc355 = loc(fused[#loc96, #loc97])
#loc356 = loc(fused[#loc98, #loc93])
#loc357 = loc(fused[#loc104, #loc105])
#loc358 = loc(fused[#loc106, #loc107])
#loc359 = loc(fused[#loc108, #loc109])
#loc360 = loc(fused[#loc110, #loc107])
#loc361 = loc(fused[#loc112, #loc113])
#loc362 = loc(fused[#loc115, #loc116])
#loc363 = loc(fused[#loc117, #loc118])
#loc364 = loc(fused[#loc119, #loc120])
#loc365 = loc(fused[#loc122, #loc113])
#loc366 = loc(fused[#loc124, #loc125])
#loc367 = loc(fused[#loc126, #loc127])
#loc368 = loc(fused[#loc128, #loc129])
#loc369 = loc(fused[#loc135, #loc136])
#loc370 = loc(fused[#loc137, #loc125])
#loc371 = loc(fused[#loc139, #loc140])
#loc372 = loc(fused[#loc141, #loc143])
#loc373 = loc(fused[#loc144, #loc145, #loc146, #loc140])
#loc374 = loc(fused[#loc147, #loc148])
#loc375 = loc(fused[#loc150, #loc151])
#loc376 = loc(fused[#loc153, #loc154])
#loc377 = loc(fused[#loc155, #loc148])
#loc378 = loc(fused[#loc157, #loc158])
#loc379 = loc(fused[#loc160, #loc161])
#loc380 = loc(fused[#loc163, #loc164])
#loc381 = loc(fused[#loc165, #loc158])
#loc382 = loc(fused[#loc168, #loc169])
#loc383 = loc(fused[#loc170, #loc171])
#loc384 = loc(fused[#loc172, #loc169])
#loc385 = loc(fused[#loc175, #loc176])
#loc386 = loc(fused[#loc177, #loc178])
#loc387 = loc(fused[#loc179, #loc176])
#loc388 = loc(fused[#loc183, #loc184])
#loc389 = loc(fused[#loc185, #loc186])
#loc390 = loc(fused[#loc187, #loc188])
#loc391 = loc(fused[#loc189, #loc190])
#loc392 = loc(fused[#loc195, #loc196])
#loc395 = loc(fused[#loc206, #loc207])
#loc396 = loc(fused[#loc210, #loc211])
#loc397 = loc(fused[#loc214, #loc213])
#loc398 = loc(fused[#loc215, #loc216])
#loc399 = loc(fused[#loc217, #loc218])
#loc400 = loc(fused[#loc220, #loc221])
#loc401 = loc(fused[#loc222, #loc223])
#loc402 = loc(fused[#loc224, #loc225])
#loc403 = loc(fused[#loc226, #loc227])
#loc404 = loc(fused[#loc228, #loc229])
#loc405 = loc(fused[#loc234, #loc235])
#loc406 = loc(fused[#loc236, #loc237])
#loc407 = loc(fused[#loc238, #loc239])
#loc408 = loc(fused[#loc240, #loc237])
#loc409 = loc(fused[#loc242, #loc243])
#loc410 = loc(fused[#loc245, #loc246])
#loc411 = loc(fused[#loc247, #loc248])
#loc412 = loc(fused[#loc250, #loc249])
#loc413 = loc(fused[#loc252, #loc251])
#loc414 = loc(fused[#loc255, #loc256])
#loc415 = loc(fused[#loc257, #loc258])
#loc416 = loc(fused[#loc260, #loc261])
#loc417 = loc(fused[#loc262, #loc263])
#loc418 = loc(fused[#loc264, #loc265])
#loc419 = loc(fused[#loc266, #loc258])
#loc420 = loc(fused[#loc268, #loc269])
#loc421 = loc(fused[#loc272, #loc273])
#loc422 = loc(fused[#loc274, #loc269])
#loc423 = loc(fused[#loc280, #loc281])
#loc424 = loc(fused[#loc282, #loc283])
#loc425 = loc(fused[#loc284, #loc285])
#loc426 = loc(fused[#loc286, #loc283])
#loc427 = loc(fused[#loc288, #loc289])
#loc428 = loc(fused[#loc292, #loc293])
#loc429 = loc(fused[#loc295, #loc296])
#loc430 = loc(fused[#loc297, #loc289])
#loc431 = loc(fused[#loc301, #loc302])
#loc432 = loc(fused[#loc303, #loc304])
#loc433 = loc(fused[#loc305, #loc302])
#loc434 = loc(fused[#loc308, #loc309])
#loc435 = loc(fused[#loc310, #loc311])
#loc436 = loc(fused[#loc312, #loc309])
