!s32i = !cir.int<s, 32>
!s8i = !cir.int<s, 8>
#fn_attr = #cir<extra({inline = #cir.inline<no>, nothrow = #cir.nothrow, optnone = #cir.optnone, uwtable = #cir.uwtable<async>})>
module @"/workspaces/juliet-c/testcases/CWE190_Integer_Overflow/s01/CWE190_Integer_Overflow__char_max_multiply_31.c" attributes {cir.lang = #cir.lang<c>, cir.sob = #cir.signed_overflow_behavior<undefined>, cir.triple = "x86_64-unknown-linux-gnu", cir.type_size_info = #cir.type_size_info<char = 8, int = 32, size_t = 64>, cir.uwtable = #cir.uwtable<async>, dlti.dl_spec = #dlti.dl_spec<f16 = dense<16> : vector<2xi64>, f64 = dense<64> : vector<2xi64>, f128 = dense<128> : vector<2xi64>, i32 = dense<32> : vector<2xi64>, i8 = dense<8> : vector<2xi64>, i16 = dense<16> : vector<2xi64>, !llvm.ptr = dense<64> : vector<4xi64>, i1 = dense<8> : vector<2xi64>, i128 = dense<128> : vector<2xi64>, !llvm.ptr<270> = dense<32> : vector<4xi64>, f80 = dense<128> : vector<2xi64>, !llvm.ptr<272> = dense<64> : vector<4xi64>, !llvm.ptr<271> = dense<32> : vector<4xi64>, i64 = dense<64> : vector<2xi64>, "dlti.endianness" = "little", "dlti.mangling_mode" = "e", "dlti.stack_alignment" = 128 : i64>} {
  cir.func private @printHexCharLine(!s8i) loc(#loc94)
  cir.func no_proto @CWE190_Integer_Overflow__char_max_multiply_31_bad() extra(#fn_attr) {
    %0 = cir.alloca !s8i, !cir.ptr<!s8i>, ["data"] {alignment = 1 : i64} loc(#loc96)
    %1 = cir.const #cir.int<32> : !s32i loc(#loc7)
    %2 = cir.cast(integral, %1 : !s32i), !s8i loc(#loc7)
    cir.store %2, %0 : !s8i, !cir.ptr<!s8i> loc(#loc97)
    %3 = cir.const #cir.int<127> : !s32i loc(#loc9)
    %4 = cir.cast(integral, %3 : !s32i), !s8i loc(#loc9)
    cir.store %4, %0 : !s8i, !cir.ptr<!s8i> loc(#loc98)
    cir.scope {
      %5 = cir.alloca !s8i, !cir.ptr<!s8i>, ["dataCopy", init] {alignment = 1 : i64} loc(#loc100)
      %6 = cir.alloca !s8i, !cir.ptr<!s8i>, ["data", init] {alignment = 1 : i64} loc(#loc101)
      %7 = cir.load %0 : !cir.ptr<!s8i>, !s8i loc(#loc14)
      cir.store %7, %5 : !s8i, !cir.ptr<!s8i> loc(#loc100)
      %8 = cir.load %5 : !cir.ptr<!s8i>, !s8i loc(#loc16)
      cir.store %8, %6 : !s8i, !cir.ptr<!s8i> loc(#loc101)
      cir.scope {
        %9 = cir.load %6 : !cir.ptr<!s8i>, !s8i loc(#loc19)
        %10 = cir.cast(integral, %9 : !s8i), !s32i loc(#loc19)
        %11 = cir.const #cir.int<0> : !s32i loc(#loc20)
        %12 = cir.cmp(gt, %10, %11) : !s32i, !cir.bool loc(#loc103)
        cir.if %12 {
          %13 = cir.alloca !s8i, !cir.ptr<!s8i>, ["result", init] {alignment = 1 : i64} loc(#loc105)
          %14 = cir.load %6 : !cir.ptr<!s8i>, !s8i loc(#loc24)
          %15 = cir.cast(integral, %14 : !s8i), !s32i loc(#loc24)
          %16 = cir.const #cir.int<2> : !s32i loc(#loc23)
          %17 = cir.binop(mul, %15, %16) nsw : !s32i loc(#loc24)
          %18 = cir.cast(integral, %17 : !s32i), !s8i loc(#loc24)
          cir.store %18, %13 : !s8i, !cir.ptr<!s8i> loc(#loc105)
          %19 = cir.load %13 : !cir.ptr<!s8i>, !s8i loc(#loc25)
          cir.call @printHexCharLine(%19) : (!s8i) -> () loc(#loc26)
        } loc(#loc104)
      } loc(#loc102)
    } loc(#loc99)
    cir.return loc(#loc4)
  } loc(#loc95)
  cir.func no_proto @CWE190_Integer_Overflow__char_max_multiply_31_good() extra(#fn_attr) {
    %0 = cir.get_global @goodG2B : !cir.ptr<!cir.func<()>> loc(#loc107)
    cir.call %0() : (!cir.ptr<!cir.func<()>>) -> () loc(#loc29)
    %1 = cir.get_global @goodB2G : !cir.ptr<!cir.func<()>> loc(#loc108)
    cir.call %1() : (!cir.ptr<!cir.func<()>>) -> () loc(#loc31)
    cir.return loc(#loc28)
  } loc(#loc106)
  cir.func no_proto internal private @goodG2B() extra(#fn_attr) {
    %0 = cir.alloca !s8i, !cir.ptr<!s8i>, ["data"] {alignment = 1 : i64} loc(#loc110)
    %1 = cir.const #cir.int<32> : !s32i loc(#loc37)
    %2 = cir.cast(integral, %1 : !s32i), !s8i loc(#loc37)
    cir.store %2, %0 : !s8i, !cir.ptr<!s8i> loc(#loc111)
    %3 = cir.const #cir.int<2> : !s32i loc(#loc39)
    %4 = cir.cast(integral, %3 : !s32i), !s8i loc(#loc39)
    cir.store %4, %0 : !s8i, !cir.ptr<!s8i> loc(#loc112)
    cir.scope {
      %5 = cir.alloca !s8i, !cir.ptr<!s8i>, ["dataCopy", init] {alignment = 1 : i64} loc(#loc114)
      %6 = cir.alloca !s8i, !cir.ptr<!s8i>, ["data", init] {alignment = 1 : i64} loc(#loc115)
      %7 = cir.load %0 : !cir.ptr<!s8i>, !s8i loc(#loc44)
      cir.store %7, %5 : !s8i, !cir.ptr<!s8i> loc(#loc114)
      %8 = cir.load %5 : !cir.ptr<!s8i>, !s8i loc(#loc46)
      cir.store %8, %6 : !s8i, !cir.ptr<!s8i> loc(#loc115)
      cir.scope {
        %9 = cir.load %6 : !cir.ptr<!s8i>, !s8i loc(#loc49)
        %10 = cir.cast(integral, %9 : !s8i), !s32i loc(#loc49)
        %11 = cir.const #cir.int<0> : !s32i loc(#loc50)
        %12 = cir.cmp(gt, %10, %11) : !s32i, !cir.bool loc(#loc117)
        cir.if %12 {
          %13 = cir.alloca !s8i, !cir.ptr<!s8i>, ["result", init] {alignment = 1 : i64} loc(#loc119)
          %14 = cir.load %6 : !cir.ptr<!s8i>, !s8i loc(#loc54)
          %15 = cir.cast(integral, %14 : !s8i), !s32i loc(#loc54)
          %16 = cir.const #cir.int<2> : !s32i loc(#loc53)
          %17 = cir.binop(mul, %15, %16) nsw : !s32i loc(#loc54)
          %18 = cir.cast(integral, %17 : !s32i), !s8i loc(#loc54)
          cir.store %18, %13 : !s8i, !cir.ptr<!s8i> loc(#loc119)
          %19 = cir.load %13 : !cir.ptr<!s8i>, !s8i loc(#loc55)
          cir.call @printHexCharLine(%19) : (!s8i) -> () loc(#loc56)
        } loc(#loc118)
      } loc(#loc116)
    } loc(#loc113)
    cir.return loc(#loc34)
  } loc(#loc109)
  cir.func private @printLine(!cir.ptr<!s8i>) loc(#loc120)
  cir.global "private" constant cir_private dsolocal @".str" = #cir.const_array<"data value is too large to perform arithmetic safely.\00" : !cir.array<!s8i x 54>> : !cir.array<!s8i x 54> {alignment = 1 : i64} loc(#loc59)
  cir.func no_proto internal private @goodB2G() extra(#fn_attr) {
    %0 = cir.alloca !s8i, !cir.ptr<!s8i>, ["data"] {alignment = 1 : i64} loc(#loc122)
    %1 = cir.const #cir.int<32> : !s32i loc(#loc64)
    %2 = cir.cast(integral, %1 : !s32i), !s8i loc(#loc64)
    cir.store %2, %0 : !s8i, !cir.ptr<!s8i> loc(#loc123)
    %3 = cir.const #cir.int<127> : !s32i loc(#loc66)
    %4 = cir.cast(integral, %3 : !s32i), !s8i loc(#loc66)
    cir.store %4, %0 : !s8i, !cir.ptr<!s8i> loc(#loc124)
    cir.scope {
      %5 = cir.alloca !s8i, !cir.ptr<!s8i>, ["dataCopy", init] {alignment = 1 : i64} loc(#loc126)
      %6 = cir.alloca !s8i, !cir.ptr<!s8i>, ["data", init] {alignment = 1 : i64} loc(#loc127)
      %7 = cir.load %0 : !cir.ptr<!s8i>, !s8i loc(#loc71)
      cir.store %7, %5 : !s8i, !cir.ptr<!s8i> loc(#loc126)
      %8 = cir.load %5 : !cir.ptr<!s8i>, !s8i loc(#loc73)
      cir.store %8, %6 : !s8i, !cir.ptr<!s8i> loc(#loc127)
      cir.scope {
        %9 = cir.load %6 : !cir.ptr<!s8i>, !s8i loc(#loc76)
        %10 = cir.cast(integral, %9 : !s8i), !s32i loc(#loc76)
        %11 = cir.const #cir.int<0> : !s32i loc(#loc77)
        %12 = cir.cmp(gt, %10, %11) : !s32i, !cir.bool loc(#loc129)
        cir.if %12 {
          cir.scope {
            %13 = cir.load %6 : !cir.ptr<!s8i>, !s8i loc(#loc81)
            %14 = cir.cast(integral, %13 : !s8i), !s32i loc(#loc81)
            %15 = cir.const #cir.int<127> : !s32i loc(#loc82)
            %16 = cir.const #cir.int<2> : !s32i loc(#loc83)
            %17 = cir.binop(div, %15, %16) : !s32i loc(#loc132)
            %18 = cir.cmp(lt, %14, %17) : !s32i, !cir.bool loc(#loc133)
            cir.if %18 {
              %19 = cir.alloca !s8i, !cir.ptr<!s8i>, ["result", init] {alignment = 1 : i64} loc(#loc135)
              %20 = cir.load %6 : !cir.ptr<!s8i>, !s8i loc(#loc90)
              %21 = cir.cast(integral, %20 : !s8i), !s32i loc(#loc90)
              %22 = cir.const #cir.int<2> : !s32i loc(#loc89)
              %23 = cir.binop(mul, %21, %22) nsw : !s32i loc(#loc90)
              %24 = cir.cast(integral, %23 : !s32i), !s8i loc(#loc90)
              cir.store %24, %19 : !s8i, !cir.ptr<!s8i> loc(#loc135)
              %25 = cir.load %19 : !cir.ptr<!s8i>, !s8i loc(#loc91)
              cir.call @printHexCharLine(%25) : (!s8i) -> () loc(#loc92)
            } else {
              %19 = cir.get_global @".str" : !cir.ptr<!cir.array<!s8i x 54>> loc(#loc59)
              %20 = cir.cast(array_to_ptrdecay, %19 : !cir.ptr<!cir.array<!s8i x 54>>), !cir.ptr<!s8i> loc(#loc59)
              cir.call @printLine(%20) : (!cir.ptr<!s8i>) -> () loc(#loc93)
            } loc(#loc134)
          } loc(#loc131)
        } loc(#loc130)
      } loc(#loc128)
    } loc(#loc125)
    cir.return loc(#loc61)
  } loc(#loc121)
} loc(#loc)
#loc = loc("/workspaces/juliet-c/testcases/CWE190_Integer_Overflow/s01/CWE190_Integer_Overflow__char_max_multiply_31.c":0:0)
#loc1 = loc("../../../testcasesupport/std_testcase_io.h":30:1)
#loc2 = loc("../../../testcasesupport/std_testcase_io.h":30:35)
#loc3 = loc("CWE190_Integer_Overflow__char_max_multiply_31.c":22:1)
#loc4 = loc("CWE190_Integer_Overflow__char_max_multiply_31.c":38:1)
#loc5 = loc("CWE190_Integer_Overflow__char_max_multiply_31.c":24:5)
#loc6 = loc("CWE190_Integer_Overflow__char_max_multiply_31.c":24:10)
#loc7 = loc("CWE190_Integer_Overflow__char_max_multiply_31.c":25:12)
#loc8 = loc("CWE190_Integer_Overflow__char_max_multiply_31.c":25:5)
#loc9 = loc("CWE190_Integer_Overflow__char_max_multiply_31.c":27:12)
#loc10 = loc("CWE190_Integer_Overflow__char_max_multiply_31.c":27:5)
#loc11 = loc("CWE190_Integer_Overflow__char_max_multiply_31.c":28:5)
#loc12 = loc("CWE190_Integer_Overflow__char_max_multiply_31.c":37:5)
#loc13 = loc("CWE190_Integer_Overflow__char_max_multiply_31.c":29:9)
#loc14 = loc("CWE190_Integer_Overflow__char_max_multiply_31.c":29:25)
#loc15 = loc("CWE190_Integer_Overflow__char_max_multiply_31.c":30:9)
#loc16 = loc("CWE190_Integer_Overflow__char_max_multiply_31.c":30:21)
#loc17 = loc("CWE190_Integer_Overflow__char_max_multiply_31.c":31:9)
#loc18 = loc("CWE190_Integer_Overflow__char_max_multiply_31.c":36:9)
#loc19 = loc("CWE190_Integer_Overflow__char_max_multiply_31.c":31:12)
#loc20 = loc("CWE190_Integer_Overflow__char_max_multiply_31.c":31:19)
#loc21 = loc("CWE190_Integer_Overflow__char_max_multiply_31.c":32:9)
#loc22 = loc("CWE190_Integer_Overflow__char_max_multiply_31.c":34:13)
#loc23 = loc("CWE190_Integer_Overflow__char_max_multiply_31.c":34:34)
#loc24 = loc("CWE190_Integer_Overflow__char_max_multiply_31.c":34:27)
#loc25 = loc("CWE190_Integer_Overflow__char_max_multiply_31.c":35:30)
#loc26 = loc("CWE190_Integer_Overflow__char_max_multiply_31.c":35:13)
#loc27 = loc("CWE190_Integer_Overflow__char_max_multiply_31.c":89:1)
#loc28 = loc("CWE190_Integer_Overflow__char_max_multiply_31.c":93:1)
#loc29 = loc("CWE190_Integer_Overflow__char_max_multiply_31.c":91:5)
#loc30 = loc("CWE190_Integer_Overflow__char_max_multiply_31.c":91:13)
#loc31 = loc("CWE190_Integer_Overflow__char_max_multiply_31.c":92:5)
#loc32 = loc("CWE190_Integer_Overflow__char_max_multiply_31.c":92:13)
#loc33 = loc("CWE190_Integer_Overflow__char_max_multiply_31.c":45:1)
#loc34 = loc("CWE190_Integer_Overflow__char_max_multiply_31.c":61:1)
#loc35 = loc("CWE190_Integer_Overflow__char_max_multiply_31.c":47:5)
#loc36 = loc("CWE190_Integer_Overflow__char_max_multiply_31.c":47:10)
#loc37 = loc("CWE190_Integer_Overflow__char_max_multiply_31.c":48:12)
#loc38 = loc("CWE190_Integer_Overflow__char_max_multiply_31.c":48:5)
#loc39 = loc("CWE190_Integer_Overflow__char_max_multiply_31.c":50:12)
#loc40 = loc("CWE190_Integer_Overflow__char_max_multiply_31.c":50:5)
#loc41 = loc("CWE190_Integer_Overflow__char_max_multiply_31.c":51:5)
#loc42 = loc("CWE190_Integer_Overflow__char_max_multiply_31.c":60:5)
#loc43 = loc("CWE190_Integer_Overflow__char_max_multiply_31.c":52:9)
#loc44 = loc("CWE190_Integer_Overflow__char_max_multiply_31.c":52:25)
#loc45 = loc("CWE190_Integer_Overflow__char_max_multiply_31.c":53:9)
#loc46 = loc("CWE190_Integer_Overflow__char_max_multiply_31.c":53:21)
#loc47 = loc("CWE190_Integer_Overflow__char_max_multiply_31.c":54:9)
#loc48 = loc("CWE190_Integer_Overflow__char_max_multiply_31.c":59:9)
#loc49 = loc("CWE190_Integer_Overflow__char_max_multiply_31.c":54:12)
#loc50 = loc("CWE190_Integer_Overflow__char_max_multiply_31.c":54:19)
#loc51 = loc("CWE190_Integer_Overflow__char_max_multiply_31.c":55:9)
#loc52 = loc("CWE190_Integer_Overflow__char_max_multiply_31.c":57:13)
#loc53 = loc("CWE190_Integer_Overflow__char_max_multiply_31.c":57:34)
#loc54 = loc("CWE190_Integer_Overflow__char_max_multiply_31.c":57:27)
#loc55 = loc("CWE190_Integer_Overflow__char_max_multiply_31.c":58:30)
#loc56 = loc("CWE190_Integer_Overflow__char_max_multiply_31.c":58:13)
#loc57 = loc("../../../testcasesupport/std_testcase_io.h":14:1)
#loc58 = loc("../../../testcasesupport/std_testcase_io.h":14:33)
#loc59 = loc("CWE190_Integer_Overflow__char_max_multiply_31.c":83:27)
#loc60 = loc("CWE190_Integer_Overflow__char_max_multiply_31.c":64:1)
#loc61 = loc("CWE190_Integer_Overflow__char_max_multiply_31.c":87:1)
#loc62 = loc("CWE190_Integer_Overflow__char_max_multiply_31.c":66:5)
#loc63 = loc("CWE190_Integer_Overflow__char_max_multiply_31.c":66:10)
#loc64 = loc("CWE190_Integer_Overflow__char_max_multiply_31.c":67:12)
#loc65 = loc("CWE190_Integer_Overflow__char_max_multiply_31.c":67:5)
#loc66 = loc("CWE190_Integer_Overflow__char_max_multiply_31.c":69:12)
#loc67 = loc("CWE190_Integer_Overflow__char_max_multiply_31.c":69:5)
#loc68 = loc("CWE190_Integer_Overflow__char_max_multiply_31.c":70:5)
#loc69 = loc("CWE190_Integer_Overflow__char_max_multiply_31.c":86:5)
#loc70 = loc("CWE190_Integer_Overflow__char_max_multiply_31.c":71:9)
#loc71 = loc("CWE190_Integer_Overflow__char_max_multiply_31.c":71:25)
#loc72 = loc("CWE190_Integer_Overflow__char_max_multiply_31.c":72:9)
#loc73 = loc("CWE190_Integer_Overflow__char_max_multiply_31.c":72:21)
#loc74 = loc("CWE190_Integer_Overflow__char_max_multiply_31.c":73:9)
#loc75 = loc("CWE190_Integer_Overflow__char_max_multiply_31.c":85:9)
#loc76 = loc("CWE190_Integer_Overflow__char_max_multiply_31.c":73:12)
#loc77 = loc("CWE190_Integer_Overflow__char_max_multiply_31.c":73:19)
#loc78 = loc("CWE190_Integer_Overflow__char_max_multiply_31.c":74:9)
#loc79 = loc("CWE190_Integer_Overflow__char_max_multiply_31.c":76:13)
#loc80 = loc("CWE190_Integer_Overflow__char_max_multiply_31.c":84:13)
#loc81 = loc("CWE190_Integer_Overflow__char_max_multiply_31.c":76:17)
#loc82 = loc("CWE190_Integer_Overflow__char_max_multiply_31.c":76:25)
#loc83 = loc("CWE190_Integer_Overflow__char_max_multiply_31.c":76:34)
#loc84 = loc("CWE190_Integer_Overflow__char_max_multiply_31.c":76:35)
#loc85 = loc("CWE190_Integer_Overflow__char_max_multiply_31.c":77:13)
#loc86 = loc("CWE190_Integer_Overflow__char_max_multiply_31.c":80:13)
#loc87 = loc("CWE190_Integer_Overflow__char_max_multiply_31.c":82:13)
#loc88 = loc("CWE190_Integer_Overflow__char_max_multiply_31.c":78:17)
#loc89 = loc("CWE190_Integer_Overflow__char_max_multiply_31.c":78:38)
#loc90 = loc("CWE190_Integer_Overflow__char_max_multiply_31.c":78:31)
#loc91 = loc("CWE190_Integer_Overflow__char_max_multiply_31.c":79:34)
#loc92 = loc("CWE190_Integer_Overflow__char_max_multiply_31.c":79:17)
#loc93 = loc("CWE190_Integer_Overflow__char_max_multiply_31.c":83:17)
#loc94 = loc(fused[#loc1, #loc2])
#loc95 = loc(fused[#loc3, #loc4])
#loc96 = loc(fused[#loc5, #loc6])
#loc97 = loc(fused[#loc8, #loc7])
#loc98 = loc(fused[#loc10, #loc9])
#loc99 = loc(fused[#loc11, #loc12])
#loc100 = loc(fused[#loc13, #loc14])
#loc101 = loc(fused[#loc15, #loc16])
#loc102 = loc(fused[#loc17, #loc18])
#loc103 = loc(fused[#loc19, #loc20])
#loc104 = loc(fused[#loc21, #loc18])
#loc105 = loc(fused[#loc22, #loc23])
#loc106 = loc(fused[#loc27, #loc28])
#loc107 = loc(fused[#loc29, #loc30])
#loc108 = loc(fused[#loc31, #loc32])
#loc109 = loc(fused[#loc33, #loc34])
#loc110 = loc(fused[#loc35, #loc36])
#loc111 = loc(fused[#loc38, #loc37])
#loc112 = loc(fused[#loc40, #loc39])
#loc113 = loc(fused[#loc41, #loc42])
#loc114 = loc(fused[#loc43, #loc44])
#loc115 = loc(fused[#loc45, #loc46])
#loc116 = loc(fused[#loc47, #loc48])
#loc117 = loc(fused[#loc49, #loc50])
#loc118 = loc(fused[#loc51, #loc48])
#loc119 = loc(fused[#loc52, #loc53])
#loc120 = loc(fused[#loc57, #loc58])
#loc121 = loc(fused[#loc60, #loc61])
#loc122 = loc(fused[#loc62, #loc63])
#loc123 = loc(fused[#loc65, #loc64])
#loc124 = loc(fused[#loc67, #loc66])
#loc125 = loc(fused[#loc68, #loc69])
#loc126 = loc(fused[#loc70, #loc71])
#loc127 = loc(fused[#loc72, #loc73])
#loc128 = loc(fused[#loc74, #loc75])
#loc129 = loc(fused[#loc76, #loc77])
#loc130 = loc(fused[#loc78, #loc75])
#loc131 = loc(fused[#loc79, #loc80])
#loc132 = loc(fused[#loc82, #loc83])
#loc133 = loc(fused[#loc81, #loc84])
#loc134 = loc(fused[#loc85, #loc86, #loc87, #loc80])
#loc135 = loc(fused[#loc88, #loc89])
