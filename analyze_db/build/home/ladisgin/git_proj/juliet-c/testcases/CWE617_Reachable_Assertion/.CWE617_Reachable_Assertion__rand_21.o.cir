!s32i = !cir.int<s, 32>
!s8i = !cir.int<s, 8>
!u32i = !cir.int<u, 32>
!u64i = !cir.int<u, 64>
!void = !cir.void
#fn_attr = #cir<extra({nothrow = #cir.nothrow})>
#fn_attr1 = #cir<extra({inline = #cir.inline<no>, nothrow = #cir.nothrow, optnone = #cir.optnone})>
#loc7 = loc("CWE617_Reachable_Assertion__rand_21.c":28:22)
#loc8 = loc("CWE617_Reachable_Assertion__rand_21.c":28:26)
#loc14 = loc("CWE617_Reachable_Assertion__rand_21.c":33:16)
#loc47 = loc("CWE617_Reachable_Assertion__rand_21.c":58:27)
#loc48 = loc("CWE617_Reachable_Assertion__rand_21.c":58:31)
#loc80 = loc("CWE617_Reachable_Assertion__rand_21.c":85:27)
#loc81 = loc("CWE617_Reachable_Assertion__rand_21.c":85:31)
#loc109 = loc(fused[#loc7, #loc8])
#loc126 = loc(fused[#loc47, #loc48])
#loc138 = loc(fused[#loc80, #loc81])
module @"/home/ladisgin/git_proj/juliet-c/testcases/CWE617_Reachable_Assertion/CWE617_Reachable_Assertion__rand_21.c" attributes {cir.lang = #cir.lang<c>, cir.sob = #cir.signed_overflow_behavior<undefined>, cir.triple = "x86_64-unknown-linux-gnu", dlti.dl_spec = #dlti.dl_spec<!llvm.ptr<271> = dense<32> : vector<4xi64>, !llvm.ptr<270> = dense<32> : vector<4xi64>, f128 = dense<128> : vector<2xi64>, i64 = dense<64> : vector<2xi64>, !llvm.ptr<272> = dense<64> : vector<4xi64>, i32 = dense<32> : vector<2xi64>, i16 = dense<16> : vector<2xi64>, f64 = dense<64> : vector<2xi64>, f16 = dense<16> : vector<2xi64>, i1 = dense<8> : vector<2xi64>, !llvm.ptr = dense<64> : vector<4xi64>, i8 = dense<8> : vector<2xi64>, i128 = dense<128> : vector<2xi64>, f80 = dense<128> : vector<2xi64>, "dlti.endianness" = "little", "dlti.stack_alignment" = 128 : i64>} {
  cir.global "private" internal dsolocal @badStatic = #cir.int<0> : !s32i {alignment = 4 : i64} loc(#loc106)
  cir.func private @rand() -> !s32i extra(#fn_attr) loc(#loc107)
  cir.func internal private @badSource(%arg0: !s32i loc(fused[#loc7, #loc8])) -> !s32i extra(#fn_attr1) {
    %0 = cir.alloca !s32i, !cir.ptr<!s32i>, ["data", init] {alignment = 4 : i64} loc(#loc109)
    %1 = cir.alloca !s32i, !cir.ptr<!s32i>, ["__retval"] {alignment = 4 : i64} loc(#loc6)
    cir.store %arg0, %0 : !s32i, !cir.ptr<!s32i> loc(#loc9)
    cir.br ^bb1 loc(#loc110)
  ^bb1:  // pred: ^bb0
    %2 = cir.get_global @badStatic : !cir.ptr<!s32i> loc(#loc106)
    %3 = cir.load %2 : !cir.ptr<!s32i>, !s32i loc(#loc12)
    %4 = cir.cast(int_to_bool, %3 : !s32i), !cir.bool loc(#loc12)
    cir.brcond %4 ^bb2, ^bb7 loc(#loc111)
  ^bb2:  // pred: ^bb1
    %5 = cir.call @rand() : () -> !s32i extra(#fn_attr) loc(#loc14)
    %6 = cir.const #cir.int<1> : !s32i loc(#loc14)
    %7 = cir.binop(and, %5, %6) : !s32i loc(#loc14)
    %8 = cir.cast(int_to_bool, %7 : !s32i), !cir.bool loc(#loc14)
    cir.brcond %8 ^bb3, ^bb4 loc(#loc14)
  ^bb3:  // pred: ^bb2
    %9 = cir.call @rand() : () -> !s32i extra(#fn_attr) loc(#loc14)
    %10 = cir.cast(integral, %9 : !s32i), !u32i loc(#loc14)
    %11 = cir.const #cir.int<30> : !s32i loc(#loc14)
    %12 = cir.shift(left, %10 : !u32i, %11 : !s32i) -> !u32i loc(#loc14)
    %13 = cir.call @rand() : () -> !s32i extra(#fn_attr) loc(#loc14)
    %14 = cir.cast(integral, %13 : !s32i), !u32i loc(#loc14)
    %15 = cir.const #cir.int<15> : !s32i loc(#loc14)
    %16 = cir.shift(left, %14 : !u32i, %15 : !s32i) -> !u32i loc(#loc14)
    %17 = cir.binop(xor, %12, %16) : !u32i loc(#loc14)
    %18 = cir.call @rand() : () -> !s32i extra(#fn_attr) loc(#loc14)
    %19 = cir.cast(integral, %18 : !s32i), !u32i loc(#loc14)
    %20 = cir.binop(xor, %17, %19) : !u32i loc(#loc14)
    cir.br ^bb5(%20 : !u32i) loc(#loc14)
  ^bb4:  // pred: ^bb2
    %21 = cir.call @rand() : () -> !s32i extra(#fn_attr) loc(#loc14)
    %22 = cir.cast(integral, %21 : !s32i), !u32i loc(#loc14)
    %23 = cir.const #cir.int<30> : !s32i loc(#loc14)
    %24 = cir.shift(left, %22 : !u32i, %23 : !s32i) -> !u32i loc(#loc14)
    %25 = cir.call @rand() : () -> !s32i extra(#fn_attr) loc(#loc14)
    %26 = cir.cast(integral, %25 : !s32i), !u32i loc(#loc14)
    %27 = cir.const #cir.int<15> : !s32i loc(#loc14)
    %28 = cir.shift(left, %26 : !u32i, %27 : !s32i) -> !u32i loc(#loc14)
    %29 = cir.binop(xor, %24, %28) : !u32i loc(#loc14)
    %30 = cir.call @rand() : () -> !s32i extra(#fn_attr) loc(#loc14)
    %31 = cir.cast(integral, %30 : !s32i), !u32i loc(#loc14)
    %32 = cir.binop(xor, %29, %31) : !u32i loc(#loc14)
    %33 = cir.unary(minus, %32) : !u32i, !u32i loc(#loc14)
    %34 = cir.const #cir.int<1> : !s32i loc(#loc14)
    %35 = cir.cast(integral, %34 : !s32i), !u32i loc(#loc14)
    %36 = cir.binop(sub, %33, %35) : !u32i loc(#loc14)
    cir.br ^bb5(%36 : !u32i) loc(#loc14)
  ^bb5(%37: !u32i loc("CWE617_Reachable_Assertion__rand_21.c":33:16)):  // 2 preds: ^bb3, ^bb4
    cir.br ^bb6 loc(#loc14)
  ^bb6:  // pred: ^bb5
    %38 = cir.cast(integral, %37 : !u32i), !s32i loc(#loc14)
    cir.store %38, %0 : !s32i, !cir.ptr<!s32i> loc(#loc112)
    cir.br ^bb7 loc(#loc11)
  ^bb7:  // 2 preds: ^bb1, ^bb6
    cir.br ^bb8 loc(#loc11)
  ^bb8:  // pred: ^bb7
    %39 = cir.load %0 : !cir.ptr<!s32i>, !s32i loc(#loc16)
    cir.store %39, %1 : !s32i, !cir.ptr<!s32i> loc(#loc113)
    %40 = cir.load %1 : !cir.ptr<!s32i>, !s32i loc(#loc113)
    cir.return %40 : !s32i loc(#loc113)
  } loc(#loc108)
  cir.func private @__assert_fail(!cir.ptr<!s8i>, !cir.ptr<!s8i>, !u32i, !cir.ptr<!s8i>) extra(#fn_attr) loc(#loc114)
  cir.global "private" constant cir_private dsolocal @".str" = #cir.const_array<"data > ASSERT_VALUE\00" : !cir.array<!s8i x 20>> : !cir.array<!s8i x 20> {alignment = 1 : i64} loc(#loc20)
  cir.global "private" constant cir_private dsolocal @".str.1" = #cir.const_array<"CWE617_Reachable_Assertion__rand_21.c\00" : !cir.array<!s8i x 38>> : !cir.array<!s8i x 38> {alignment = 1 : i64} loc(#loc20)
  cir.global "private" constant cir_private dsolocal @".str.2" = #cir.const_array<"void CWE617_Reachable_Assertion__rand_21_bad()\00" : !cir.array<!s8i x 47>> : !cir.array<!s8i x 47> {alignment = 1 : i64} loc(#loc20)
  cir.func no_proto @CWE617_Reachable_Assertion__rand_21_bad() extra(#fn_attr1) {
    %0 = cir.alloca !s32i, !cir.ptr<!s32i>, ["data"] {alignment = 4 : i64} loc(#loc116)
    %1 = cir.const #cir.int<1> : !s32i loc(#loc25)
    %2 = cir.unary(minus, %1) : !s32i, !s32i loc(#loc26)
    cir.store %2, %0 : !s32i, !cir.ptr<!s32i> loc(#loc117)
    %3 = cir.const #cir.int<1> : !s32i loc(#loc28)
    %4 = cir.get_global @badStatic : !cir.ptr<!s32i> loc(#loc106)
    cir.store %3, %4 : !s32i, !cir.ptr<!s32i> loc(#loc118)
    %5 = cir.load %0 : !cir.ptr<!s32i>, !s32i loc(#loc30)
    %6 = cir.call @badSource(%5) : (!s32i) -> !s32i loc(#loc31)
    cir.store %6, %0 : !s32i, !cir.ptr<!s32i> loc(#loc119)
    %7 = cir.const #cir.int<4> : !u64i loc(#loc20)
    cir.br ^bb1 loc(#loc20)
  ^bb1:  // pred: ^bb0
    cir.br ^bb2 loc(#loc20)
  ^bb2:  // pred: ^bb1
    %8 = cir.load %0 : !cir.ptr<!s32i>, !s32i loc(#loc20)
    %9 = cir.const #cir.int<5> : !s32i loc(#loc20)
    %10 = cir.cmp(gt, %8, %9) : !s32i, !cir.bool loc(#loc20)
    cir.brcond %10 ^bb3, ^bb4 loc(#loc20)
  ^bb3:  // pred: ^bb2
    cir.br ^bb5 loc(#loc20)
  ^bb4:  // pred: ^bb2
    %11 = cir.get_global @".str" : !cir.ptr<!cir.array<!s8i x 20>> loc(#loc20)
    %12 = cir.cast(array_to_ptrdecay, %11 : !cir.ptr<!cir.array<!s8i x 20>>), !cir.ptr<!s8i> loc(#loc20)
    %13 = cir.get_global @".str.1" : !cir.ptr<!cir.array<!s8i x 38>> loc(#loc20)
    %14 = cir.cast(array_to_ptrdecay, %13 : !cir.ptr<!cir.array<!s8i x 38>>), !cir.ptr<!s8i> loc(#loc20)
    %15 = cir.const #cir.int<46> : !s32i loc(#loc20)
    %16 = cir.cast(integral, %15 : !s32i), !u32i loc(#loc20)
    %17 = cir.get_global @".str.2" : !cir.ptr<!cir.array<!s8i x 47>> loc(#loc20)
    %18 = cir.cast(array_to_ptrdecay, %17 : !cir.ptr<!cir.array<!s8i x 47>>), !cir.ptr<!s8i> loc(#loc20)
    cir.call @__assert_fail(%12, %14, %16, %18) : (!cir.ptr<!s8i>, !cir.ptr<!s8i>, !u32i, !cir.ptr<!s8i>) -> () extra(#fn_attr) loc(#loc20)
    cir.br ^bb5 loc(#loc20)
  ^bb5:  // 2 preds: ^bb3, ^bb4
    cir.br ^bb6 loc(#loc20)
  ^bb6:  // pred: ^bb5
    cir.br ^bb7 loc(#loc20)
  ^bb7:  // pred: ^bb6
    cir.return loc(#loc22)
  } loc(#loc115)
  cir.func no_proto @CWE617_Reachable_Assertion__rand_21_good() extra(#fn_attr1) {
    %0 = cir.get_global @goodG2B1 : !cir.ptr<!cir.func<!void ()>> loc(#loc121)
    cir.call %0() : (!cir.ptr<!cir.func<!void ()>>) -> () loc(#loc36)
    %1 = cir.get_global @goodG2B2 : !cir.ptr<!cir.func<!void ()>> loc(#loc122)
    cir.call %1() : (!cir.ptr<!cir.func<!void ()>>) -> () loc(#loc38)
    cir.return loc(#loc35)
  } loc(#loc120)
  cir.global "private" internal dsolocal @goodG2B1Static = #cir.int<0> : !s32i {alignment = 4 : i64} loc(#loc123)
  cir.func private @printLine(!cir.ptr<!s8i>) loc(#loc124)
  cir.global "private" constant cir_private dsolocal @".str.4" = #cir.const_array<"Benign, fixed string\00" : !cir.array<!s8i x 21>> : !cir.array<!s8i x 21> {alignment = 1 : i64} loc(#loc44)
  cir.func internal private @goodG2B1Source(%arg0: !s32i loc(fused[#loc47, #loc48])) -> !s32i extra(#fn_attr1) {
    %0 = cir.alloca !s32i, !cir.ptr<!s32i>, ["data", init] {alignment = 4 : i64} loc(#loc126)
    %1 = cir.alloca !s32i, !cir.ptr<!s32i>, ["__retval"] {alignment = 4 : i64} loc(#loc46)
    cir.store %arg0, %0 : !s32i, !cir.ptr<!s32i> loc(#loc49)
    cir.br ^bb1 loc(#loc127)
  ^bb1:  // pred: ^bb0
    %2 = cir.get_global @goodG2B1Static : !cir.ptr<!s32i> loc(#loc123)
    %3 = cir.load %2 : !cir.ptr<!s32i>, !s32i loc(#loc52)
    %4 = cir.cast(int_to_bool, %3 : !s32i), !cir.bool loc(#loc52)
    cir.brcond %4 ^bb2, ^bb3 loc(#loc128)
  ^bb2:  // pred: ^bb1
    %5 = cir.get_global @".str.4" : !cir.ptr<!cir.array<!s8i x 21>> loc(#loc44)
    %6 = cir.cast(array_to_ptrdecay, %5 : !cir.ptr<!cir.array<!s8i x 21>>), !cir.ptr<!s8i> loc(#loc44)
    cir.call @printLine(%6) : (!cir.ptr<!s8i>) -> () loc(#loc56)
    cir.br ^bb4 loc(#loc54)
  ^bb3:  // pred: ^bb1
    %7 = cir.const #cir.int<5> : !s32i loc(#loc57)
    %8 = cir.const #cir.int<1> : !s32i loc(#loc58)
    %9 = cir.binop(add, %7, %8) nsw : !s32i loc(#loc57)
    cir.store %9, %0 : !s32i, !cir.ptr<!s32i> loc(#loc129)
    cir.br ^bb4 loc(#loc51)
  ^bb4:  // 2 preds: ^bb2, ^bb3
    cir.br ^bb5 loc(#loc51)
  ^bb5:  // pred: ^bb4
    %10 = cir.load %0 : !cir.ptr<!s32i>, !s32i loc(#loc60)
    cir.store %10, %1 : !s32i, !cir.ptr<!s32i> loc(#loc130)
    %11 = cir.load %1 : !cir.ptr<!s32i>, !s32i loc(#loc130)
    cir.return %11 : !s32i loc(#loc130)
  } loc(#loc125)
  cir.global "private" constant cir_private dsolocal @".str.3" = #cir.const_array<"void goodG2B1()\00" : !cir.array<!s8i x 16>> : !cir.array<!s8i x 16> {alignment = 1 : i64} loc(#loc62)
  cir.func no_proto internal private @goodG2B1() extra(#fn_attr1) {
    %0 = cir.alloca !s32i, !cir.ptr<!s32i>, ["data"] {alignment = 4 : i64} loc(#loc132)
    %1 = cir.const #cir.int<1> : !s32i loc(#loc67)
    %2 = cir.unary(minus, %1) : !s32i, !s32i loc(#loc68)
    cir.store %2, %0 : !s32i, !cir.ptr<!s32i> loc(#loc133)
    %3 = cir.const #cir.int<0> : !s32i loc(#loc70)
    %4 = cir.get_global @goodG2B1Static : !cir.ptr<!s32i> loc(#loc123)
    cir.store %3, %4 : !s32i, !cir.ptr<!s32i> loc(#loc134)
    %5 = cir.load %0 : !cir.ptr<!s32i>, !s32i loc(#loc72)
    %6 = cir.call @goodG2B1Source(%5) : (!s32i) -> !s32i loc(#loc73)
    cir.store %6, %0 : !s32i, !cir.ptr<!s32i> loc(#loc135)
    %7 = cir.const #cir.int<4> : !u64i loc(#loc62)
    cir.br ^bb1 loc(#loc62)
  ^bb1:  // pred: ^bb0
    cir.br ^bb2 loc(#loc62)
  ^bb2:  // pred: ^bb1
    %8 = cir.load %0 : !cir.ptr<!s32i>, !s32i loc(#loc62)
    %9 = cir.const #cir.int<5> : !s32i loc(#loc62)
    %10 = cir.cmp(gt, %8, %9) : !s32i, !cir.bool loc(#loc62)
    cir.brcond %10 ^bb3, ^bb4 loc(#loc62)
  ^bb3:  // pred: ^bb2
    cir.br ^bb5 loc(#loc62)
  ^bb4:  // pred: ^bb2
    %11 = cir.get_global @".str" : !cir.ptr<!cir.array<!s8i x 20>> loc(#loc62)
    %12 = cir.cast(array_to_ptrdecay, %11 : !cir.ptr<!cir.array<!s8i x 20>>), !cir.ptr<!s8i> loc(#loc62)
    %13 = cir.get_global @".str.1" : !cir.ptr<!cir.array<!s8i x 38>> loc(#loc62)
    %14 = cir.cast(array_to_ptrdecay, %13 : !cir.ptr<!cir.array<!s8i x 38>>), !cir.ptr<!s8i> loc(#loc62)
    %15 = cir.const #cir.int<81> : !s32i loc(#loc62)
    %16 = cir.cast(integral, %15 : !s32i), !u32i loc(#loc62)
    %17 = cir.get_global @".str.3" : !cir.ptr<!cir.array<!s8i x 16>> loc(#loc62)
    %18 = cir.cast(array_to_ptrdecay, %17 : !cir.ptr<!cir.array<!s8i x 16>>), !cir.ptr<!s8i> loc(#loc62)
    cir.call @__assert_fail(%12, %14, %16, %18) : (!cir.ptr<!s8i>, !cir.ptr<!s8i>, !u32i, !cir.ptr<!s8i>) -> () extra(#fn_attr) loc(#loc62)
    cir.br ^bb5 loc(#loc62)
  ^bb5:  // 2 preds: ^bb3, ^bb4
    cir.br ^bb6 loc(#loc62)
  ^bb6:  // pred: ^bb5
    cir.br ^bb7 loc(#loc62)
  ^bb7:  // pred: ^bb6
    cir.return loc(#loc64)
  } loc(#loc131)
  cir.global "private" internal dsolocal @goodG2B2Static = #cir.int<0> : !s32i {alignment = 4 : i64} loc(#loc136)
  cir.func internal private @goodG2B2Source(%arg0: !s32i loc(fused[#loc80, #loc81])) -> !s32i extra(#fn_attr1) {
    %0 = cir.alloca !s32i, !cir.ptr<!s32i>, ["data", init] {alignment = 4 : i64} loc(#loc138)
    %1 = cir.alloca !s32i, !cir.ptr<!s32i>, ["__retval"] {alignment = 4 : i64} loc(#loc79)
    cir.store %arg0, %0 : !s32i, !cir.ptr<!s32i> loc(#loc82)
    cir.br ^bb1 loc(#loc139)
  ^bb1:  // pred: ^bb0
    %2 = cir.get_global @goodG2B2Static : !cir.ptr<!s32i> loc(#loc136)
    %3 = cir.load %2 : !cir.ptr<!s32i>, !s32i loc(#loc85)
    %4 = cir.cast(int_to_bool, %3 : !s32i), !cir.bool loc(#loc85)
    cir.brcond %4 ^bb2, ^bb3 loc(#loc140)
  ^bb2:  // pred: ^bb1
    %5 = cir.const #cir.int<5> : !s32i loc(#loc87)
    %6 = cir.const #cir.int<1> : !s32i loc(#loc88)
    %7 = cir.binop(add, %5, %6) nsw : !s32i loc(#loc87)
    cir.store %7, %0 : !s32i, !cir.ptr<!s32i> loc(#loc141)
    cir.br ^bb3 loc(#loc84)
  ^bb3:  // 2 preds: ^bb1, ^bb2
    cir.br ^bb4 loc(#loc84)
  ^bb4:  // pred: ^bb3
    %8 = cir.load %0 : !cir.ptr<!s32i>, !s32i loc(#loc90)
    cir.store %8, %1 : !s32i, !cir.ptr<!s32i> loc(#loc142)
    %9 = cir.load %1 : !cir.ptr<!s32i>, !s32i loc(#loc142)
    cir.return %9 : !s32i loc(#loc142)
  } loc(#loc137)
  cir.global "private" constant cir_private dsolocal @".str.5" = #cir.const_array<"void goodG2B2()\00" : !cir.array<!s8i x 16>> : !cir.array<!s8i x 16> {alignment = 1 : i64} loc(#loc92)
  cir.func no_proto internal private @goodG2B2() extra(#fn_attr1) {
    %0 = cir.alloca !s32i, !cir.ptr<!s32i>, ["data"] {alignment = 4 : i64} loc(#loc144)
    %1 = cir.const #cir.int<1> : !s32i loc(#loc97)
    %2 = cir.unary(minus, %1) : !s32i, !s32i loc(#loc98)
    cir.store %2, %0 : !s32i, !cir.ptr<!s32i> loc(#loc145)
    %3 = cir.const #cir.int<1> : !s32i loc(#loc100)
    %4 = cir.get_global @goodG2B2Static : !cir.ptr<!s32i> loc(#loc136)
    cir.store %3, %4 : !s32i, !cir.ptr<!s32i> loc(#loc146)
    %5 = cir.load %0 : !cir.ptr<!s32i>, !s32i loc(#loc102)
    %6 = cir.call @goodG2B2Source(%5) : (!s32i) -> !s32i loc(#loc103)
    cir.store %6, %0 : !s32i, !cir.ptr<!s32i> loc(#loc147)
    %7 = cir.const #cir.int<4> : !u64i loc(#loc92)
    cir.br ^bb1 loc(#loc92)
  ^bb1:  // pred: ^bb0
    cir.br ^bb2 loc(#loc92)
  ^bb2:  // pred: ^bb1
    %8 = cir.load %0 : !cir.ptr<!s32i>, !s32i loc(#loc92)
    %9 = cir.const #cir.int<5> : !s32i loc(#loc92)
    %10 = cir.cmp(gt, %8, %9) : !s32i, !cir.bool loc(#loc92)
    cir.brcond %10 ^bb3, ^bb4 loc(#loc92)
  ^bb3:  // pred: ^bb2
    cir.br ^bb5 loc(#loc92)
  ^bb4:  // pred: ^bb2
    %11 = cir.get_global @".str" : !cir.ptr<!cir.array<!s8i x 20>> loc(#loc92)
    %12 = cir.cast(array_to_ptrdecay, %11 : !cir.ptr<!cir.array<!s8i x 20>>), !cir.ptr<!s8i> loc(#loc92)
    %13 = cir.get_global @".str.1" : !cir.ptr<!cir.array<!s8i x 38>> loc(#loc92)
    %14 = cir.cast(array_to_ptrdecay, %13 : !cir.ptr<!cir.array<!s8i x 38>>), !cir.ptr<!s8i> loc(#loc92)
    %15 = cir.const #cir.int<103> : !s32i loc(#loc92)
    %16 = cir.cast(integral, %15 : !s32i), !u32i loc(#loc92)
    %17 = cir.get_global @".str.5" : !cir.ptr<!cir.array<!s8i x 16>> loc(#loc92)
    %18 = cir.cast(array_to_ptrdecay, %17 : !cir.ptr<!cir.array<!s8i x 16>>), !cir.ptr<!s8i> loc(#loc92)
    cir.call @__assert_fail(%12, %14, %16, %18) : (!cir.ptr<!s8i>, !cir.ptr<!s8i>, !u32i, !cir.ptr<!s8i>) -> () extra(#fn_attr) loc(#loc92)
    cir.br ^bb5 loc(#loc92)
  ^bb5:  // 2 preds: ^bb3, ^bb4
    cir.br ^bb6 loc(#loc92)
  ^bb6:  // pred: ^bb5
    cir.br ^bb7 loc(#loc92)
  ^bb7:  // pred: ^bb6
    cir.return loc(#loc94)
  } loc(#loc143)
} loc(#loc)
#loc = loc("/home/ladisgin/git_proj/juliet-c/testcases/CWE617_Reachable_Assertion/CWE617_Reachable_Assertion__rand_21.c":0:0)
#loc1 = loc("CWE617_Reachable_Assertion__rand_21.c":26:1)
#loc2 = loc("CWE617_Reachable_Assertion__rand_21.c":26:24)
#loc3 = loc("/usr/include/stdlib.h":573:1)
#loc4 = loc("/usr/include/stdlib.h":573:24)
#loc5 = loc("CWE617_Reachable_Assertion__rand_21.c":28:1)
#loc6 = loc("CWE617_Reachable_Assertion__rand_21.c":36:1)
#loc9 = loc("CWE617_Reachable_Assertion__rand_21.c":29:1)
#loc10 = loc("CWE617_Reachable_Assertion__rand_21.c":30:5)
#loc11 = loc("CWE617_Reachable_Assertion__rand_21.c":34:5)
#loc12 = loc("CWE617_Reachable_Assertion__rand_21.c":30:8)
#loc13 = loc("CWE617_Reachable_Assertion__rand_21.c":31:5)
#loc15 = loc("CWE617_Reachable_Assertion__rand_21.c":33:9)
#loc16 = loc("CWE617_Reachable_Assertion__rand_21.c":35:12)
#loc17 = loc("CWE617_Reachable_Assertion__rand_21.c":35:5)
#loc18 = loc("/usr/include/assert.h":67:1)
#loc19 = loc("/usr/include/assert.h":69:43)
#loc20 = loc("CWE617_Reachable_Assertion__rand_21.c":46:5)
#loc21 = loc("CWE617_Reachable_Assertion__rand_21.c":38:1)
#loc22 = loc("CWE617_Reachable_Assertion__rand_21.c":47:1)
#loc23 = loc("CWE617_Reachable_Assertion__rand_21.c":40:5)
#loc24 = loc("CWE617_Reachable_Assertion__rand_21.c":40:9)
#loc25 = loc("CWE617_Reachable_Assertion__rand_21.c":42:13)
#loc26 = loc("CWE617_Reachable_Assertion__rand_21.c":42:12)
#loc27 = loc("CWE617_Reachable_Assertion__rand_21.c":42:5)
#loc28 = loc("CWE617_Reachable_Assertion__rand_21.c":43:17)
#loc29 = loc("CWE617_Reachable_Assertion__rand_21.c":43:5)
#loc30 = loc("CWE617_Reachable_Assertion__rand_21.c":44:22)
#loc31 = loc("CWE617_Reachable_Assertion__rand_21.c":44:12)
#loc32 = loc("CWE617_Reachable_Assertion__rand_21.c":44:5)
#loc33 = loc("CWE617_Reachable_Assertion__rand_21.c":44:26)
#loc34 = loc("CWE617_Reachable_Assertion__rand_21.c":106:1)
#loc35 = loc("CWE617_Reachable_Assertion__rand_21.c":110:1)
#loc36 = loc("CWE617_Reachable_Assertion__rand_21.c":108:5)
#loc37 = loc("CWE617_Reachable_Assertion__rand_21.c":108:14)
#loc38 = loc("CWE617_Reachable_Assertion__rand_21.c":109:5)
#loc39 = loc("CWE617_Reachable_Assertion__rand_21.c":109:14)
#loc40 = loc("CWE617_Reachable_Assertion__rand_21.c":54:1)
#loc41 = loc("CWE617_Reachable_Assertion__rand_21.c":54:29)
#loc42 = loc("../../testcasesupport/std_testcase_io.h":14:1)
#loc43 = loc("../../testcasesupport/std_testcase_io.h":14:33)
#loc44 = loc("CWE617_Reachable_Assertion__rand_21.c":63:19)
#loc45 = loc("CWE617_Reachable_Assertion__rand_21.c":58:1)
#loc46 = loc("CWE617_Reachable_Assertion__rand_21.c":71:1)
#loc49 = loc("CWE617_Reachable_Assertion__rand_21.c":59:1)
#loc50 = loc("CWE617_Reachable_Assertion__rand_21.c":60:5)
#loc51 = loc("CWE617_Reachable_Assertion__rand_21.c":69:5)
#loc52 = loc("CWE617_Reachable_Assertion__rand_21.c":60:8)
#loc53 = loc("CWE617_Reachable_Assertion__rand_21.c":61:5)
#loc54 = loc("CWE617_Reachable_Assertion__rand_21.c":64:5)
#loc55 = loc("CWE617_Reachable_Assertion__rand_21.c":66:5)
#loc56 = loc("CWE617_Reachable_Assertion__rand_21.c":63:9)
#loc57 = loc("CWE617_Reachable_Assertion__rand_21.c":68:16)
#loc58 = loc("CWE617_Reachable_Assertion__rand_21.c":68:29)
#loc59 = loc("CWE617_Reachable_Assertion__rand_21.c":68:9)
#loc60 = loc("CWE617_Reachable_Assertion__rand_21.c":70:12)
#loc61 = loc("CWE617_Reachable_Assertion__rand_21.c":70:5)
#loc62 = loc("CWE617_Reachable_Assertion__rand_21.c":81:5)
#loc63 = loc("CWE617_Reachable_Assertion__rand_21.c":73:1)
#loc64 = loc("CWE617_Reachable_Assertion__rand_21.c":82:1)
#loc65 = loc("CWE617_Reachable_Assertion__rand_21.c":75:5)
#loc66 = loc("CWE617_Reachable_Assertion__rand_21.c":75:9)
#loc67 = loc("CWE617_Reachable_Assertion__rand_21.c":77:13)
#loc68 = loc("CWE617_Reachable_Assertion__rand_21.c":77:12)
#loc69 = loc("CWE617_Reachable_Assertion__rand_21.c":77:5)
#loc70 = loc("CWE617_Reachable_Assertion__rand_21.c":78:22)
#loc71 = loc("CWE617_Reachable_Assertion__rand_21.c":78:5)
#loc72 = loc("CWE617_Reachable_Assertion__rand_21.c":79:27)
#loc73 = loc("CWE617_Reachable_Assertion__rand_21.c":79:12)
#loc74 = loc("CWE617_Reachable_Assertion__rand_21.c":79:5)
#loc75 = loc("CWE617_Reachable_Assertion__rand_21.c":79:31)
#loc76 = loc("CWE617_Reachable_Assertion__rand_21.c":55:1)
#loc77 = loc("CWE617_Reachable_Assertion__rand_21.c":55:29)
#loc78 = loc("CWE617_Reachable_Assertion__rand_21.c":85:1)
#loc79 = loc("CWE617_Reachable_Assertion__rand_21.c":93:1)
#loc82 = loc("CWE617_Reachable_Assertion__rand_21.c":86:1)
#loc83 = loc("CWE617_Reachable_Assertion__rand_21.c":87:5)
#loc84 = loc("CWE617_Reachable_Assertion__rand_21.c":91:5)
#loc85 = loc("CWE617_Reachable_Assertion__rand_21.c":87:8)
#loc86 = loc("CWE617_Reachable_Assertion__rand_21.c":88:5)
#loc87 = loc("CWE617_Reachable_Assertion__rand_21.c":90:16)
#loc88 = loc("CWE617_Reachable_Assertion__rand_21.c":90:29)
#loc89 = loc("CWE617_Reachable_Assertion__rand_21.c":90:9)
#loc90 = loc("CWE617_Reachable_Assertion__rand_21.c":92:12)
#loc91 = loc("CWE617_Reachable_Assertion__rand_21.c":92:5)
#loc92 = loc("CWE617_Reachable_Assertion__rand_21.c":103:5)
#loc93 = loc("CWE617_Reachable_Assertion__rand_21.c":95:1)
#loc94 = loc("CWE617_Reachable_Assertion__rand_21.c":104:1)
#loc95 = loc("CWE617_Reachable_Assertion__rand_21.c":97:5)
#loc96 = loc("CWE617_Reachable_Assertion__rand_21.c":97:9)
#loc97 = loc("CWE617_Reachable_Assertion__rand_21.c":99:13)
#loc98 = loc("CWE617_Reachable_Assertion__rand_21.c":99:12)
#loc99 = loc("CWE617_Reachable_Assertion__rand_21.c":99:5)
#loc100 = loc("CWE617_Reachable_Assertion__rand_21.c":100:22)
#loc101 = loc("CWE617_Reachable_Assertion__rand_21.c":100:5)
#loc102 = loc("CWE617_Reachable_Assertion__rand_21.c":101:27)
#loc103 = loc("CWE617_Reachable_Assertion__rand_21.c":101:12)
#loc104 = loc("CWE617_Reachable_Assertion__rand_21.c":101:5)
#loc105 = loc("CWE617_Reachable_Assertion__rand_21.c":101:31)
#loc106 = loc(fused[#loc1, #loc2])
#loc107 = loc(fused[#loc3, #loc4])
#loc108 = loc(fused[#loc5, #loc6])
#loc110 = loc(fused[#loc10, #loc11])
#loc111 = loc(fused[#loc13, #loc11])
#loc112 = loc(fused[#loc15, #loc14])
#loc113 = loc(fused[#loc17, #loc16])
#loc114 = loc(fused[#loc18, #loc19])
#loc115 = loc(fused[#loc21, #loc22])
#loc116 = loc(fused[#loc23, #loc24])
#loc117 = loc(fused[#loc27, #loc25])
#loc118 = loc(fused[#loc29, #loc28])
#loc119 = loc(fused[#loc32, #loc33])
#loc120 = loc(fused[#loc34, #loc35])
#loc121 = loc(fused[#loc36, #loc37])
#loc122 = loc(fused[#loc38, #loc39])
#loc123 = loc(fused[#loc40, #loc41])
#loc124 = loc(fused[#loc42, #loc43])
#loc125 = loc(fused[#loc45, #loc46])
#loc127 = loc(fused[#loc50, #loc51])
#loc128 = loc(fused[#loc53, #loc54, #loc55, #loc51])
#loc129 = loc(fused[#loc59, #loc58])
#loc130 = loc(fused[#loc61, #loc60])
#loc131 = loc(fused[#loc63, #loc64])
#loc132 = loc(fused[#loc65, #loc66])
#loc133 = loc(fused[#loc69, #loc67])
#loc134 = loc(fused[#loc71, #loc70])
#loc135 = loc(fused[#loc74, #loc75])
#loc136 = loc(fused[#loc76, #loc77])
#loc137 = loc(fused[#loc78, #loc79])
#loc139 = loc(fused[#loc83, #loc84])
#loc140 = loc(fused[#loc86, #loc84])
#loc141 = loc(fused[#loc89, #loc88])
#loc142 = loc(fused[#loc91, #loc90])
#loc143 = loc(fused[#loc93, #loc94])
#loc144 = loc(fused[#loc95, #loc96])
#loc145 = loc(fused[#loc99, #loc97])
#loc146 = loc(fused[#loc101, #loc100])
#loc147 = loc(fused[#loc104, #loc105])
