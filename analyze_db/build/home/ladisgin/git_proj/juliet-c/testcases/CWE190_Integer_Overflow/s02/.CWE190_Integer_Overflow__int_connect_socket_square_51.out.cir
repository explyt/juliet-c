!s32i = !cir.int<s, 32>
!s64i = !cir.int<s, 64>
!s8i = !cir.int<s, 8>
#false = #cir.bool<false> : !cir.bool
#fn_attr = #cir<extra({inline = #cir.inline<no>, nothrow = #cir.nothrow, optnone = #cir.optnone})>
#fn_attr1 = #cir<extra({nothrow = #cir.nothrow})>
#loc5 = loc("CWE190_Integer_Overflow__int_connect_socket_square_51b.c":46:69)
#loc6 = loc("CWE190_Integer_Overflow__int_connect_socket_square_51b.c":46:73)
#loc17 = loc("CWE190_Integer_Overflow__int_connect_socket_square_51b.c":60:73)
#loc18 = loc("CWE190_Integer_Overflow__int_connect_socket_square_51b.c":60:77)
#loc33 = loc("CWE190_Integer_Overflow__int_connect_socket_square_51b.c":70:73)
#loc34 = loc("CWE190_Integer_Overflow__int_connect_socket_square_51b.c":70:77)
#true = #cir.bool<true> : !cir.bool
#loc57 = loc(fused[#loc5, #loc6])
#loc61 = loc(fused[#loc17, #loc18])
#loc66 = loc(fused[#loc33, #loc34])
module @"/home/ladisgin/git_proj/juliet-c/testcases/CWE190_Integer_Overflow/s02/CWE190_Integer_Overflow__int_connect_socket_square_51b.c" attributes {cir.lang = #cir.lang<c>, cir.sob = #cir.signed_overflow_behavior<undefined>, cir.triple = "x86_64-unknown-linux-gnu", dlti.dl_spec = #dlti.dl_spec<i16 = dense<16> : vector<2xi64>, i8 = dense<8> : vector<2xi64>, i32 = dense<32> : vector<2xi64>, !llvm.ptr<270> = dense<32> : vector<4xi64>, f64 = dense<64> : vector<2xi64>, f16 = dense<16> : vector<2xi64>, !llvm.ptr<271> = dense<32> : vector<4xi64>, f128 = dense<128> : vector<2xi64>, i64 = dense<64> : vector<2xi64>, !llvm.ptr<272> = dense<64> : vector<4xi64>, i128 = dense<128> : vector<2xi64>, f80 = dense<128> : vector<2xi64>, i1 = dense<8> : vector<2xi64>, !llvm.ptr = dense<64> : vector<4xi64>, "dlti.endianness" = "little", "dlti.stack_alignment" = 128 : i64>} {
  cir.func private @printIntLine(!s32i) loc(#loc55)
  cir.func @CWE190_Integer_Overflow__int_connect_socket_square_51b_badSink(%arg0: !s32i loc(fused[#loc5, #loc6])) extra(#fn_attr) {
    %0 = cir.alloca !s32i, !cir.ptr<!s32i>, ["data", init] {alignment = 4 : i64} loc(#loc57)
    cir.store %arg0, %0 : !s32i, !cir.ptr<!s32i> loc(#loc7)
    cir.scope {
      %1 = cir.alloca !s32i, !cir.ptr<!s32i>, ["result", init] {alignment = 4 : i64} loc(#loc59)
      %2 = cir.load %0 : !cir.ptr<!s32i>, !s32i loc(#loc12)
      %3 = cir.load %0 : !cir.ptr<!s32i>, !s32i loc(#loc11)
      %4 = cir.binop(mul, %2, %3) nsw : !s32i loc(#loc12)
      cir.store %4, %1 : !s32i, !cir.ptr<!s32i> loc(#loc59)
      %5 = cir.load %1 : !cir.ptr<!s32i>, !s32i loc(#loc13)
      cir.call @printIntLine(%5) : (!s32i) -> () loc(#loc14)
    } loc(#loc58)
    cir.return loc(#loc4)
  } loc(#loc56)
  cir.func @CWE190_Integer_Overflow__int_connect_socket_square_51b_goodG2BSink(%arg0: !s32i loc(fused[#loc17, #loc18])) extra(#fn_attr) {
    %0 = cir.alloca !s32i, !cir.ptr<!s32i>, ["data", init] {alignment = 4 : i64} loc(#loc61)
    cir.store %arg0, %0 : !s32i, !cir.ptr<!s32i> loc(#loc19)
    cir.scope {
      %1 = cir.alloca !s32i, !cir.ptr<!s32i>, ["result", init] {alignment = 4 : i64} loc(#loc63)
      %2 = cir.load %0 : !cir.ptr<!s32i>, !s32i loc(#loc24)
      %3 = cir.load %0 : !cir.ptr<!s32i>, !s32i loc(#loc23)
      %4 = cir.binop(mul, %2, %3) nsw : !s32i loc(#loc24)
      cir.store %4, %1 : !s32i, !cir.ptr<!s32i> loc(#loc63)
      %5 = cir.load %1 : !cir.ptr<!s32i>, !s32i loc(#loc25)
      cir.call @printIntLine(%5) : (!s32i) -> () loc(#loc26)
    } loc(#loc62)
    cir.return loc(#loc16)
  } loc(#loc60)
  cir.func private @sqrt(!cir.double) -> !cir.double extra(#fn_attr1) loc(#loc27)
  cir.func private @printLine(!cir.ptr<!s8i>) loc(#loc64)
  cir.global "private" constant cir_private dsolocal @".str" = #cir.const_array<"data value is too large to perform arithmetic safely.\00" : !cir.array<!s8i x 54>> : !cir.array<!s8i x 54> {alignment = 1 : i64} loc(#loc30)
  cir.func @CWE190_Integer_Overflow__int_connect_socket_square_51b_goodB2GSink(%arg0: !s32i loc(fused[#loc33, #loc34])) extra(#fn_attr) {
    %0 = cir.alloca !s32i, !cir.ptr<!s32i>, ["data", init] {alignment = 4 : i64} loc(#loc66)
    cir.store %arg0, %0 : !s32i, !cir.ptr<!s32i> loc(#loc35)
    cir.scope {
      %1 = cir.load %0 : !cir.ptr<!s32i>, !s32i loc(#loc38)
      %2 = cir.const #cir.int<2147483647> : !s32i loc(#loc39)
      %3 = cir.unary(minus, %2) : !s32i, !s32i loc(#loc39)
      %4 = cir.const #cir.int<1> : !s32i loc(#loc39)
      %5 = cir.binop(sub, %3, %4) nsw : !s32i loc(#loc39)
      %6 = cir.cmp(gt, %1, %5) : !s32i, !cir.bool loc(#loc68)
      %7 = cir.ternary(%6, true {
        %8 = cir.load %0 : !cir.ptr<!s32i>, !s32i loc(#loc41)
        %9 = cir.abs %8 poison : !s32i loc(#loc42)
        %10 = cir.cast(integral, %9 : !s32i), !s64i loc(#loc42)
        %11 = cir.get_global @sqrt : !cir.ptr<!cir.func<!cir.double (!cir.double)>> loc(#loc43)
        %12 = cir.const #cir.int<2147483647> : !s32i loc(#loc44)
        %13 = cir.cast(int_to_float, %12 : !s32i), !cir.double loc(#loc44)
        %14 = cir.call @sqrt(%13) : (!cir.double) -> !cir.double extra(#fn_attr1) loc(#loc43)
        %15 = cir.cast(float_to_int, %14 : !cir.double), !s64i loc(#loc43)
        %16 = cir.cmp(lt, %10, %15) : !s64i, !cir.bool loc(#loc69)
        %17 = cir.ternary(%16, true {
          %18 = cir.const #true loc(#loc40)
          cir.yield %18 : !cir.bool loc(#loc40)
        }, false {
          %18 = cir.const #false loc(#loc40)
          cir.yield %18 : !cir.bool loc(#loc40)
        }) : (!cir.bool) -> !cir.bool loc(#loc40)
        cir.yield %17 : !cir.bool loc(#loc40)
      }, false {
        %8 = cir.const #false loc(#loc40)
        cir.yield %8 : !cir.bool loc(#loc40)
      }) : (!cir.bool) -> !cir.bool loc(#loc40)
      cir.if %7 {
        %8 = cir.alloca !s32i, !cir.ptr<!s32i>, ["result", init] {alignment = 4 : i64} loc(#loc71)
        %9 = cir.load %0 : !cir.ptr<!s32i>, !s32i loc(#loc51)
        %10 = cir.load %0 : !cir.ptr<!s32i>, !s32i loc(#loc50)
        %11 = cir.binop(mul, %9, %10) nsw : !s32i loc(#loc51)
        cir.store %11, %8 : !s32i, !cir.ptr<!s32i> loc(#loc71)
        %12 = cir.load %8 : !cir.ptr<!s32i>, !s32i loc(#loc52)
        cir.call @printIntLine(%12) : (!s32i) -> () loc(#loc53)
      } else {
        %8 = cir.get_global @".str" : !cir.ptr<!cir.array<!s8i x 54>> loc(#loc30)
        %9 = cir.cast(array_to_ptrdecay, %8 : !cir.ptr<!cir.array<!s8i x 54>>), !cir.ptr<!s8i> loc(#loc30)
        cir.call @printLine(%9) : (!cir.ptr<!s8i>) -> () loc(#loc54)
      } loc(#loc70)
    } loc(#loc67)
    cir.return loc(#loc32)
  } loc(#loc65)
} loc(#loc)
#loc = loc("/home/ladisgin/git_proj/juliet-c/testcases/CWE190_Integer_Overflow/s02/CWE190_Integer_Overflow__int_connect_socket_square_51b.c":0:0)
#loc1 = loc("../../../testcasesupport/std_testcase_io.h":18:1)
#loc2 = loc("../../../testcasesupport/std_testcase_io.h":18:33)
#loc3 = loc("CWE190_Integer_Overflow__int_connect_socket_square_51b.c":46:1)
#loc4 = loc("CWE190_Integer_Overflow__int_connect_socket_square_51b.c":53:1)
#loc7 = loc("CWE190_Integer_Overflow__int_connect_socket_square_51b.c":47:1)
#loc8 = loc("CWE190_Integer_Overflow__int_connect_socket_square_51b.c":48:5)
#loc9 = loc("CWE190_Integer_Overflow__int_connect_socket_square_51b.c":52:5)
#loc10 = loc("CWE190_Integer_Overflow__int_connect_socket_square_51b.c":50:9)
#loc11 = loc("CWE190_Integer_Overflow__int_connect_socket_square_51b.c":50:29)
#loc12 = loc("CWE190_Integer_Overflow__int_connect_socket_square_51b.c":50:22)
#loc13 = loc("CWE190_Integer_Overflow__int_connect_socket_square_51b.c":51:22)
#loc14 = loc("CWE190_Integer_Overflow__int_connect_socket_square_51b.c":51:9)
#loc15 = loc("CWE190_Integer_Overflow__int_connect_socket_square_51b.c":60:1)
#loc16 = loc("CWE190_Integer_Overflow__int_connect_socket_square_51b.c":67:1)
#loc19 = loc("CWE190_Integer_Overflow__int_connect_socket_square_51b.c":61:1)
#loc20 = loc("CWE190_Integer_Overflow__int_connect_socket_square_51b.c":62:5)
#loc21 = loc("CWE190_Integer_Overflow__int_connect_socket_square_51b.c":66:5)
#loc22 = loc("CWE190_Integer_Overflow__int_connect_socket_square_51b.c":64:9)
#loc23 = loc("CWE190_Integer_Overflow__int_connect_socket_square_51b.c":64:29)
#loc24 = loc("CWE190_Integer_Overflow__int_connect_socket_square_51b.c":64:22)
#loc25 = loc("CWE190_Integer_Overflow__int_connect_socket_square_51b.c":65:22)
#loc26 = loc("CWE190_Integer_Overflow__int_connect_socket_square_51b.c":65:9)
#loc27 = loc("/usr/include/bits/mathcalls.h":158:1)
#loc28 = loc("../../../testcasesupport/std_testcase_io.h":14:1)
#loc29 = loc("../../../testcasesupport/std_testcase_io.h":14:33)
#loc30 = loc("CWE190_Integer_Overflow__int_connect_socket_square_51b.c":80:19)
#loc31 = loc("CWE190_Integer_Overflow__int_connect_socket_square_51b.c":70:1)
#loc32 = loc("CWE190_Integer_Overflow__int_connect_socket_square_51b.c":82:1)
#loc35 = loc("CWE190_Integer_Overflow__int_connect_socket_square_51b.c":71:1)
#loc36 = loc("CWE190_Integer_Overflow__int_connect_socket_square_51b.c":73:5)
#loc37 = loc("CWE190_Integer_Overflow__int_connect_socket_square_51b.c":81:5)
#loc38 = loc("CWE190_Integer_Overflow__int_connect_socket_square_51b.c":73:9)
#loc39 = loc("CWE190_Integer_Overflow__int_connect_socket_square_51b.c":73:16)
#loc40 = loc("CWE190_Integer_Overflow__int_connect_socket_square_51b.c":73:24)
#loc41 = loc("CWE190_Integer_Overflow__int_connect_socket_square_51b.c":73:31)
#loc42 = loc("CWE190_Integer_Overflow__int_connect_socket_square_51b.c":73:27)
#loc43 = loc("CWE190_Integer_Overflow__int_connect_socket_square_51b.c":73:45)
#loc44 = loc("CWE190_Integer_Overflow__int_connect_socket_square_51b.c":73:58)
#loc45 = loc("CWE190_Integer_Overflow__int_connect_socket_square_51b.c":73:65)
#loc46 = loc("CWE190_Integer_Overflow__int_connect_socket_square_51b.c":74:5)
#loc47 = loc("CWE190_Integer_Overflow__int_connect_socket_square_51b.c":77:5)
#loc48 = loc("CWE190_Integer_Overflow__int_connect_socket_square_51b.c":79:5)
#loc49 = loc("CWE190_Integer_Overflow__int_connect_socket_square_51b.c":75:9)
#loc50 = loc("CWE190_Integer_Overflow__int_connect_socket_square_51b.c":75:29)
#loc51 = loc("CWE190_Integer_Overflow__int_connect_socket_square_51b.c":75:22)
#loc52 = loc("CWE190_Integer_Overflow__int_connect_socket_square_51b.c":76:22)
#loc53 = loc("CWE190_Integer_Overflow__int_connect_socket_square_51b.c":76:9)
#loc54 = loc("CWE190_Integer_Overflow__int_connect_socket_square_51b.c":80:9)
#loc55 = loc(fused[#loc1, #loc2])
#loc56 = loc(fused[#loc3, #loc4])
#loc58 = loc(fused[#loc8, #loc9])
#loc59 = loc(fused[#loc10, #loc11])
#loc60 = loc(fused[#loc15, #loc16])
#loc62 = loc(fused[#loc20, #loc21])
#loc63 = loc(fused[#loc22, #loc23])
#loc64 = loc(fused[#loc28, #loc29])
#loc65 = loc(fused[#loc31, #loc32])
#loc67 = loc(fused[#loc36, #loc37])
#loc68 = loc(fused[#loc38, #loc39])
#loc69 = loc(fused[#loc42, #loc45])
#loc70 = loc(fused[#loc46, #loc47, #loc48, #loc37])
#loc71 = loc(fused[#loc49, #loc50])
