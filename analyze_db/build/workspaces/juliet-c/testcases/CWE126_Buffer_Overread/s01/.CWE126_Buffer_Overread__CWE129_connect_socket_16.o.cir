!s32i = !cir.int<s, 32>
!s64i = !cir.int<s, 64>
!s8i = !cir.int<s, 8>
!u16i = !cir.int<u, 16>
!u32i = !cir.int<u, 32>
!u64i = !cir.int<u, 64>
!u8i = !cir.int<u, 8>
!void = !cir.void
#false = #cir.bool<false> : !cir.bool
#fn_attr = #cir<extra({nothrow = #cir.nothrow})>
#fn_attr1 = #cir<extra({inline = #cir.inline<no>, nothrow = #cir.nothrow, optnone = #cir.optnone, uwtable = #cir.uwtable<async>})>
#true = #cir.bool<true> : !cir.bool
!ty_in_addr = !cir.record<struct "in_addr" {!u32i} #cir.record.decl.ast>
!ty_sockaddr = !cir.record<struct "sockaddr" {!u16i, !cir.array<!s8i x 14>} #cir.record.decl.ast>
!ty_sockaddr_in = !cir.record<struct "sockaddr_in" {!u16i, !u16i, !ty_in_addr, !cir.array<!u8i x 8>}>
module @"/workspaces/juliet-c/testcases/CWE126_Buffer_Overread/s01/CWE126_Buffer_Overread__CWE129_connect_socket_16.c" attributes {cir.lang = #cir.lang<c>, cir.sob = #cir.signed_overflow_behavior<undefined>, cir.triple = "x86_64-unknown-linux-gnu", cir.type_size_info = #cir.type_size_info<char = 8, int = 32, size_t = 64>, cir.uwtable = #cir.uwtable<async>, dlti.dl_spec = #dlti.dl_spec<f80 = dense<128> : vector<2xi64>, !llvm.ptr = dense<64> : vector<4xi64>, !llvm.ptr<272> = dense<64> : vector<4xi64>, !llvm.ptr<270> = dense<32> : vector<4xi64>, !llvm.ptr<271> = dense<32> : vector<4xi64>, i128 = dense<128> : vector<2xi64>, i64 = dense<64> : vector<2xi64>, f64 = dense<64> : vector<2xi64>, f128 = dense<128> : vector<2xi64>, i32 = dense<32> : vector<2xi64>, f16 = dense<16> : vector<2xi64>, i16 = dense<16> : vector<2xi64>, i1 = dense<8> : vector<2xi64>, i8 = dense<8> : vector<2xi64>, "dlti.stack_alignment" = 128 : i64, "dlti.mangling_mode" = "e", "dlti.endianness" = "little">} {
  cir.func private @socket(!s32i, !s32i, !s32i) -> !s32i extra(#fn_attr) loc(#loc306)
  cir.func private @inet_addr(!cir.ptr<!s8i>) -> !u32i extra(#fn_attr) loc(#loc307)
  cir.global "private" constant cir_private dsolocal @".str" = #cir.const_array<"127.0.0.1\00" : !cir.array<!s8i x 10>> : !cir.array<!s8i x 10> {alignment = 1 : i64} loc(#loc5)
  cir.func private @htons(!u16i) -> !u16i extra(#fn_attr) loc(#loc308)
  cir.func private @connect(!s32i, !cir.ptr<!ty_sockaddr>, !u32i) -> !s32i loc(#loc309)
  cir.func private @recv(!s32i, !cir.ptr<!void>, !u64i, !s32i) -> !s64i loc(#loc310)
  cir.func private @atoi(!cir.ptr<!s8i>) -> !s32i extra(#fn_attr) loc(#loc311)
  cir.func private @close(!s32i) -> !s32i loc(#loc312)
  cir.func private @printIntLine(!s32i) loc(#loc313)
  cir.func private @printLine(!cir.ptr<!s8i>) loc(#loc314)
  cir.global "private" constant cir_private dsolocal @".str.1" = #cir.const_array<"ERROR: Array index is negative\00" : !cir.array<!s8i x 31>> : !cir.array<!s8i x 31> {alignment = 1 : i64} loc(#loc20)
  cir.func no_proto @CWE126_Buffer_Overread__CWE129_connect_socket_16_bad() extra(#fn_attr1) {
    %0 = cir.alloca !s32i, !cir.ptr<!s32i>, ["data"] {alignment = 4 : i64} loc(#loc316)
    %1 = cir.const #cir.int<1> : !s32i loc(#loc25)
    %2 = cir.unary(minus, %1) nsw : !s32i, !s32i loc(#loc26)
    cir.store %2, %0 : !s32i, !cir.ptr<!s32i> loc(#loc317)
    cir.scope {
      cir.while {
        %3 = cir.const #cir.int<1> : !s32i loc(#loc30)
        %4 = cir.cast(int_to_bool, %3 : !s32i), !cir.bool loc(#loc30)
        cir.condition(%4) loc(#loc30)
      } do {
        cir.scope {
          cir.scope {
            %3 = cir.alloca !s32i, !cir.ptr<!s32i>, ["recvResult"] {alignment = 4 : i64} loc(#loc321)
            %4 = cir.alloca !ty_sockaddr_in, !cir.ptr<!ty_sockaddr_in>, ["service"] {alignment = 4 : i64} loc(#loc322)
            %5 = cir.alloca !s32i, !cir.ptr<!s32i>, ["connectSocket", init] {alignment = 4 : i64} loc(#loc323)
            %6 = cir.alloca !cir.array<!s8i x 14>, !cir.ptr<!cir.array<!s8i x 14>>, ["inputBuffer"] {alignment = 1 : i64} loc(#loc324)
            %7 = cir.const #cir.int<1> : !s32i loc(#loc39)
            %8 = cir.unary(minus, %7) nsw : !s32i, !s32i loc(#loc39)
            cir.store %8, %5 : !s32i, !cir.ptr<!s32i> loc(#loc323)
            cir.scope {
              cir.do {
                cir.scope {
                  %9 = cir.const #cir.int<2> : !s32i loc(#loc46)
                  %10 = cir.const #cir.int<1> : !s32i loc(#loc47)
                  %11 = cir.const #cir.int<6> : !s32i loc(#loc48)
                  %12 = cir.call @socket(%9, %10, %11) : (!s32i, !s32i, !s32i) -> !s32i extra(#fn_attr) loc(#loc49)
                  cir.store %12, %5 : !s32i, !cir.ptr<!s32i> loc(#loc327)
                  cir.scope {
                    %51 = cir.load %5 : !cir.ptr<!s32i>, !s32i loc(#loc54)
                    %52 = cir.const #cir.int<1> : !s32i loc(#loc55)
                    %53 = cir.unary(minus, %52) nsw : !s32i, !s32i loc(#loc55)
                    %54 = cir.cmp(eq, %51, %53) : !s32i, !cir.bool loc(#loc329)
                    cir.if %54 {
                      cir.break loc(#loc57)
                    } loc(#loc330)
                  } loc(#loc328)
                  %13 = cir.cast(bitcast, %4 : !cir.ptr<!ty_sockaddr_in>), !cir.ptr<!void> loc(#loc331)
                  %14 = cir.const #cir.int<0> : !s32i loc(#loc60)
                  %15 = cir.const #cir.int<16> : !u64i loc(#loc332)
                  cir.libc.memset %15 bytes from %13 set to %14 : !cir.ptr<!void>, !s32i, !u64i loc(#loc333)
                  %16 = cir.const #cir.int<2> : !s32i loc(#loc65)
                  %17 = cir.cast(integral, %16 : !s32i), !u16i loc(#loc65)
                  %18 = cir.get_member %4[0] {name = "sin_family"} : !cir.ptr<!ty_sockaddr_in> -> !cir.ptr<!u16i> loc(#loc66)
                  cir.store %17, %18 : !u16i, !cir.ptr<!u16i> loc(#loc334)
                  %19 = cir.get_global @".str" : !cir.ptr<!cir.array<!s8i x 10>> loc(#loc5)
                  %20 = cir.cast(array_to_ptrdecay, %19 : !cir.ptr<!cir.array<!s8i x 10>>), !cir.ptr<!s8i> loc(#loc5)
                  %21 = cir.call @inet_addr(%20) : (!cir.ptr<!s8i>) -> !u32i extra(#fn_attr) loc(#loc68)
                  %22 = cir.get_member %4[2] {name = "sin_addr"} : !cir.ptr<!ty_sockaddr_in> -> !cir.ptr<!ty_in_addr> loc(#loc69)
                  %23 = cir.get_member %22[0] {name = "s_addr"} : !cir.ptr<!ty_in_addr> -> !cir.ptr<!u32i> loc(#loc70)
                  cir.store %21, %23 : !u32i, !cir.ptr<!u32i> loc(#loc335)
                  %24 = cir.const #cir.int<27015> : !s32i loc(#loc73)
                  %25 = cir.cast(integral, %24 : !s32i), !u16i loc(#loc73)
                  %26 = cir.call @htons(%25) : (!u16i) -> !u16i side_effect(const) extra(#fn_attr) loc(#loc74)
                  %27 = cir.get_member %4[1] {name = "sin_port"} : !cir.ptr<!ty_sockaddr_in> -> !cir.ptr<!u16i> loc(#loc75)
                  cir.store %26, %27 : !u16i, !cir.ptr<!u16i> loc(#loc336)
                  cir.scope {
                    %51 = cir.load %5 : !cir.ptr<!s32i>, !s32i loc(#loc80)
                    %52 = cir.cast(bitcast, %4 : !cir.ptr<!ty_sockaddr_in>), !cir.ptr<!ty_sockaddr> loc(#loc338)
                    %53 = cir.const #cir.int<16> : !u64i loc(#loc339)
                    %54 = cir.cast(integral, %53 : !u64i), !u32i loc(#loc339)
                    %55 = cir.call @connect(%51, %52, %54) : (!s32i, !cir.ptr<!ty_sockaddr>, !u32i) -> !s32i loc(#loc85)
                    %56 = cir.const #cir.int<1> : !s32i loc(#loc86)
                    %57 = cir.unary(minus, %56) nsw : !s32i, !s32i loc(#loc86)
                    %58 = cir.cmp(eq, %55, %57) : !s32i, !cir.bool loc(#loc340)
                    cir.if %58 {
                      cir.break loc(#loc88)
                    } loc(#loc341)
                  } loc(#loc337)
                  %28 = cir.load %5 : !cir.ptr<!s32i>, !s32i loc(#loc89)
                  %29 = cir.cast(array_to_ptrdecay, %6 : !cir.ptr<!cir.array<!s8i x 14>>), !cir.ptr<!s8i> loc(#loc90)
                  %30 = cir.cast(bitcast, %29 : !cir.ptr<!s8i>), !cir.ptr<!void> loc(#loc90)
                  %31 = cir.const #cir.int<3> : !s32i loc(#loc91)
                  %32 = cir.cast(integral, %31 : !s32i), !u64i loc(#loc91)
                  %33 = cir.const #cir.int<4> : !u64i loc(#loc91)
                  %34 = cir.binop(mul, %32, %33) : !u64i loc(#loc91)
                  %35 = cir.const #cir.int<2> : !s32i loc(#loc91)
                  %36 = cir.cast(integral, %35 : !s32i), !u64i loc(#loc91)
                  %37 = cir.binop(add, %34, %36) : !u64i loc(#loc91)
                  %38 = cir.const #cir.int<1> : !s32i loc(#loc92)
                  %39 = cir.cast(integral, %38 : !s32i), !u64i loc(#loc92)
                  %40 = cir.binop(sub, %37, %39) : !u64i loc(#loc342)
                  %41 = cir.const #cir.int<0> : !s32i loc(#loc93)
                  %42 = cir.call @recv(%28, %30, %40, %41) : (!s32i, !cir.ptr<!void>, !u64i, !s32i) -> !s64i loc(#loc94)
                  %43 = cir.cast(integral, %42 : !s64i), !s32i loc(#loc94)
                  cir.store %43, %3 : !s32i, !cir.ptr<!s32i> loc(#loc343)
                  cir.scope {
                    %51 = cir.load %3 : !cir.ptr<!s32i>, !s32i loc(#loc99)
                    %52 = cir.const #cir.int<1> : !s32i loc(#loc100)
                    %53 = cir.unary(minus, %52) nsw : !s32i, !s32i loc(#loc100)
                    %54 = cir.cmp(eq, %51, %53) : !s32i, !cir.bool loc(#loc345)
                    %55 = cir.ternary(%54, true {
                      %56 = cir.const #true loc(#loc101)
                      cir.yield %56 : !cir.bool loc(#loc101)
                    }, false {
                      %56 = cir.load %3 : !cir.ptr<!s32i>, !s32i loc(#loc102)
                      %57 = cir.const #cir.int<0> : !s32i loc(#loc103)
                      %58 = cir.cmp(eq, %56, %57) : !s32i, !cir.bool loc(#loc346)
                      %59 = cir.ternary(%58, true {
                        %60 = cir.const #true loc(#loc101)
                        cir.yield %60 : !cir.bool loc(#loc101)
                      }, false {
                        %60 = cir.const #false loc(#loc101)
                        cir.yield %60 : !cir.bool loc(#loc101)
                      }) : (!cir.bool) -> !cir.bool loc(#loc101)
                      cir.yield %59 : !cir.bool loc(#loc101)
                    }) : (!cir.bool) -> !cir.bool loc(#loc101)
                    cir.if %55 {
                      cir.break loc(#loc105)
                    } loc(#loc347)
                  } loc(#loc344)
                  %44 = cir.const #cir.int<0> : !s32i loc(#loc106)
                  %45 = cir.cast(integral, %44 : !s32i), !s8i loc(#loc106)
                  %46 = cir.load %3 : !cir.ptr<!s32i>, !s32i loc(#loc107)
                  %47 = cir.cast(array_to_ptrdecay, %6 : !cir.ptr<!cir.array<!s8i x 14>>), !cir.ptr<!s8i> loc(#loc108)
                  %48 = cir.ptr_stride(%47 : !cir.ptr<!s8i>, %46 : !s32i), !cir.ptr<!s8i> loc(#loc108)
                  cir.store %45, %48 : !s8i, !cir.ptr<!s8i> loc(#loc348)
                  %49 = cir.cast(array_to_ptrdecay, %6 : !cir.ptr<!cir.array<!s8i x 14>>), !cir.ptr<!s8i> loc(#loc109)
                  %50 = cir.call @atoi(%49) : (!cir.ptr<!s8i>) -> !s32i side_effect(pure) extra(#fn_attr) loc(#loc110)
                  cir.store %50, %0 : !s32i, !cir.ptr<!s32i> loc(#loc349)
                } loc(#loc326)
                cir.yield loc(#loc43)
              } while {
                %9 = cir.const #cir.int<0> : !s32i loc(#loc113)
                %10 = cir.cast(int_to_bool, %9 : !s32i), !cir.bool loc(#loc113)
                cir.condition(%10) loc(#loc113)
              } loc(#loc325)
            } loc(#loc325)
            cir.scope {
              %9 = cir.load %5 : !cir.ptr<!s32i>, !s32i loc(#loc116)
              %10 = cir.const #cir.int<1> : !s32i loc(#loc117)
              %11 = cir.unary(minus, %10) nsw : !s32i, !s32i loc(#loc117)
              %12 = cir.cmp(ne, %9, %11) : !s32i, !cir.bool loc(#loc351)
              cir.if %12 {
                %13 = cir.load %5 : !cir.ptr<!s32i>, !s32i loc(#loc119)
                %14 = cir.call @close(%13) : (!s32i) -> !s32i loc(#loc120)
              } loc(#loc352)
            } loc(#loc350)
          } loc(#loc320)
          cir.break loc(#loc121)
        } loc(#loc319)
        cir.yield loc(#loc29)
      } loc(#loc318)
    } loc(#loc318)
    cir.scope {
      cir.while {
        %3 = cir.const #cir.int<1> : !s32i loc(#loc124)
        %4 = cir.cast(int_to_bool, %3 : !s32i), !cir.bool loc(#loc124)
        cir.condition(%4) loc(#loc124)
      } do {
        cir.scope {
          cir.scope {
            %3 = cir.alloca !cir.array<!s32i x 10>, !cir.ptr<!cir.array<!s32i x 10>>, ["buffer"] {alignment = 16 : i64} loc(#loc356)
            %4 = cir.const #cir.zero : !cir.array<!s32i x 10> loc(#loc356)
            cir.store %4, %3 : !cir.array<!s32i x 10>, !cir.ptr<!cir.array<!s32i x 10>> loc(#loc356)
            cir.scope {
              %5 = cir.load %0 : !cir.ptr<!s32i>, !s32i loc(#loc132)
              %6 = cir.const #cir.int<0> : !s32i loc(#loc133)
              %7 = cir.cmp(ge, %5, %6) : !s32i, !cir.bool loc(#loc358)
              cir.if %7 {
                %8 = cir.load %0 : !cir.ptr<!s32i>, !s32i loc(#loc137)
                %9 = cir.cast(array_to_ptrdecay, %3 : !cir.ptr<!cir.array<!s32i x 10>>), !cir.ptr<!s32i> loc(#loc138)
                %10 = cir.ptr_stride(%9 : !cir.ptr<!s32i>, %8 : !s32i), !cir.ptr<!s32i> loc(#loc138)
                %11 = cir.load %10 : !cir.ptr<!s32i>, !s32i loc(#loc138)
                cir.call @printIntLine(%11) : (!s32i) -> () loc(#loc139)
              } else {
                %8 = cir.get_global @".str.1" : !cir.ptr<!cir.array<!s8i x 31>> loc(#loc20)
                %9 = cir.cast(array_to_ptrdecay, %8 : !cir.ptr<!cir.array<!s8i x 31>>), !cir.ptr<!s8i> loc(#loc20)
                cir.call @printLine(%9) : (!cir.ptr<!s8i>) -> () loc(#loc140)
              } loc(#loc359)
            } loc(#loc357)
          } loc(#loc355)
          cir.break loc(#loc141)
        } loc(#loc354)
        cir.yield loc(#loc123)
      } loc(#loc353)
    } loc(#loc353)
    cir.return loc(#loc22)
  } loc(#loc315)
  cir.func no_proto @CWE126_Buffer_Overread__CWE129_connect_socket_16_good() extra(#fn_attr1) {
    %0 = cir.get_global @goodB2G : !cir.ptr<!cir.func<()>> loc(#loc361)
    cir.call %0() : (!cir.ptr<!cir.func<()>>) -> () loc(#loc144)
    %1 = cir.get_global @goodG2B : !cir.ptr<!cir.func<()>> loc(#loc362)
    cir.call %1() : (!cir.ptr<!cir.func<()>>) -> () loc(#loc146)
    cir.return loc(#loc143)
  } loc(#loc360)
  cir.global "private" constant cir_private dsolocal @".str.2" = #cir.const_array<"ERROR: Array index is out-of-bounds\00" : !cir.array<!s8i x 36>> : !cir.array<!s8i x 36> {alignment = 1 : i64} loc(#loc148)
  cir.func no_proto internal private @goodB2G() extra(#fn_attr1) {
    %0 = cir.alloca !s32i, !cir.ptr<!s32i>, ["data"] {alignment = 4 : i64} loc(#loc364)
    %1 = cir.const #cir.int<1> : !s32i loc(#loc153)
    %2 = cir.unary(minus, %1) nsw : !s32i, !s32i loc(#loc154)
    cir.store %2, %0 : !s32i, !cir.ptr<!s32i> loc(#loc365)
    cir.scope {
      cir.while {
        %3 = cir.const #cir.int<1> : !s32i loc(#loc158)
        %4 = cir.cast(int_to_bool, %3 : !s32i), !cir.bool loc(#loc158)
        cir.condition(%4) loc(#loc158)
      } do {
        cir.scope {
          cir.scope {
            %3 = cir.alloca !s32i, !cir.ptr<!s32i>, ["recvResult"] {alignment = 4 : i64} loc(#loc369)
            %4 = cir.alloca !ty_sockaddr_in, !cir.ptr<!ty_sockaddr_in>, ["service"] {alignment = 4 : i64} loc(#loc370)
            %5 = cir.alloca !s32i, !cir.ptr<!s32i>, ["connectSocket", init] {alignment = 4 : i64} loc(#loc371)
            %6 = cir.alloca !cir.array<!s8i x 14>, !cir.ptr<!cir.array<!s8i x 14>>, ["inputBuffer"] {alignment = 1 : i64} loc(#loc372)
            %7 = cir.const #cir.int<1> : !s32i loc(#loc167)
            %8 = cir.unary(minus, %7) nsw : !s32i, !s32i loc(#loc167)
            cir.store %8, %5 : !s32i, !cir.ptr<!s32i> loc(#loc371)
            cir.scope {
              cir.do {
                cir.scope {
                  %9 = cir.const #cir.int<2> : !s32i loc(#loc174)
                  %10 = cir.const #cir.int<1> : !s32i loc(#loc175)
                  %11 = cir.const #cir.int<6> : !s32i loc(#loc176)
                  %12 = cir.call @socket(%9, %10, %11) : (!s32i, !s32i, !s32i) -> !s32i extra(#fn_attr) loc(#loc177)
                  cir.store %12, %5 : !s32i, !cir.ptr<!s32i> loc(#loc375)
                  cir.scope {
                    %51 = cir.load %5 : !cir.ptr<!s32i>, !s32i loc(#loc182)
                    %52 = cir.const #cir.int<1> : !s32i loc(#loc183)
                    %53 = cir.unary(minus, %52) nsw : !s32i, !s32i loc(#loc183)
                    %54 = cir.cmp(eq, %51, %53) : !s32i, !cir.bool loc(#loc377)
                    cir.if %54 {
                      cir.break loc(#loc185)
                    } loc(#loc378)
                  } loc(#loc376)
                  %13 = cir.cast(bitcast, %4 : !cir.ptr<!ty_sockaddr_in>), !cir.ptr<!void> loc(#loc379)
                  %14 = cir.const #cir.int<0> : !s32i loc(#loc188)
                  %15 = cir.const #cir.int<16> : !u64i loc(#loc380)
                  cir.libc.memset %15 bytes from %13 set to %14 : !cir.ptr<!void>, !s32i, !u64i loc(#loc381)
                  %16 = cir.const #cir.int<2> : !s32i loc(#loc193)
                  %17 = cir.cast(integral, %16 : !s32i), !u16i loc(#loc193)
                  %18 = cir.get_member %4[0] {name = "sin_family"} : !cir.ptr<!ty_sockaddr_in> -> !cir.ptr<!u16i> loc(#loc66)
                  cir.store %17, %18 : !u16i, !cir.ptr<!u16i> loc(#loc382)
                  %19 = cir.get_global @".str" : !cir.ptr<!cir.array<!s8i x 10>> loc(#loc195)
                  %20 = cir.cast(array_to_ptrdecay, %19 : !cir.ptr<!cir.array<!s8i x 10>>), !cir.ptr<!s8i> loc(#loc195)
                  %21 = cir.call @inet_addr(%20) : (!cir.ptr<!s8i>) -> !u32i extra(#fn_attr) loc(#loc196)
                  %22 = cir.get_member %4[2] {name = "sin_addr"} : !cir.ptr<!ty_sockaddr_in> -> !cir.ptr<!ty_in_addr> loc(#loc69)
                  %23 = cir.get_member %22[0] {name = "s_addr"} : !cir.ptr<!ty_in_addr> -> !cir.ptr<!u32i> loc(#loc70)
                  cir.store %21, %23 : !u32i, !cir.ptr<!u32i> loc(#loc383)
                  %24 = cir.const #cir.int<27015> : !s32i loc(#loc199)
                  %25 = cir.cast(integral, %24 : !s32i), !u16i loc(#loc199)
                  %26 = cir.call @htons(%25) : (!u16i) -> !u16i side_effect(const) extra(#fn_attr) loc(#loc200)
                  %27 = cir.get_member %4[1] {name = "sin_port"} : !cir.ptr<!ty_sockaddr_in> -> !cir.ptr<!u16i> loc(#loc75)
                  cir.store %26, %27 : !u16i, !cir.ptr<!u16i> loc(#loc384)
                  cir.scope {
                    %51 = cir.load %5 : !cir.ptr<!s32i>, !s32i loc(#loc205)
                    %52 = cir.cast(bitcast, %4 : !cir.ptr<!ty_sockaddr_in>), !cir.ptr<!ty_sockaddr> loc(#loc386)
                    %53 = cir.const #cir.int<16> : !u64i loc(#loc387)
                    %54 = cir.cast(integral, %53 : !u64i), !u32i loc(#loc387)
                    %55 = cir.call @connect(%51, %52, %54) : (!s32i, !cir.ptr<!ty_sockaddr>, !u32i) -> !s32i loc(#loc210)
                    %56 = cir.const #cir.int<1> : !s32i loc(#loc211)
                    %57 = cir.unary(minus, %56) nsw : !s32i, !s32i loc(#loc211)
                    %58 = cir.cmp(eq, %55, %57) : !s32i, !cir.bool loc(#loc388)
                    cir.if %58 {
                      cir.break loc(#loc213)
                    } loc(#loc389)
                  } loc(#loc385)
                  %28 = cir.load %5 : !cir.ptr<!s32i>, !s32i loc(#loc214)
                  %29 = cir.cast(array_to_ptrdecay, %6 : !cir.ptr<!cir.array<!s8i x 14>>), !cir.ptr<!s8i> loc(#loc215)
                  %30 = cir.cast(bitcast, %29 : !cir.ptr<!s8i>), !cir.ptr<!void> loc(#loc215)
                  %31 = cir.const #cir.int<3> : !s32i loc(#loc216)
                  %32 = cir.cast(integral, %31 : !s32i), !u64i loc(#loc216)
                  %33 = cir.const #cir.int<4> : !u64i loc(#loc216)
                  %34 = cir.binop(mul, %32, %33) : !u64i loc(#loc216)
                  %35 = cir.const #cir.int<2> : !s32i loc(#loc216)
                  %36 = cir.cast(integral, %35 : !s32i), !u64i loc(#loc216)
                  %37 = cir.binop(add, %34, %36) : !u64i loc(#loc216)
                  %38 = cir.const #cir.int<1> : !s32i loc(#loc217)
                  %39 = cir.cast(integral, %38 : !s32i), !u64i loc(#loc217)
                  %40 = cir.binop(sub, %37, %39) : !u64i loc(#loc390)
                  %41 = cir.const #cir.int<0> : !s32i loc(#loc218)
                  %42 = cir.call @recv(%28, %30, %40, %41) : (!s32i, !cir.ptr<!void>, !u64i, !s32i) -> !s64i loc(#loc219)
                  %43 = cir.cast(integral, %42 : !s64i), !s32i loc(#loc219)
                  cir.store %43, %3 : !s32i, !cir.ptr<!s32i> loc(#loc391)
                  cir.scope {
                    %51 = cir.load %3 : !cir.ptr<!s32i>, !s32i loc(#loc224)
                    %52 = cir.const #cir.int<1> : !s32i loc(#loc225)
                    %53 = cir.unary(minus, %52) nsw : !s32i, !s32i loc(#loc225)
                    %54 = cir.cmp(eq, %51, %53) : !s32i, !cir.bool loc(#loc393)
                    %55 = cir.ternary(%54, true {
                      %56 = cir.const #true loc(#loc226)
                      cir.yield %56 : !cir.bool loc(#loc226)
                    }, false {
                      %56 = cir.load %3 : !cir.ptr<!s32i>, !s32i loc(#loc227)
                      %57 = cir.const #cir.int<0> : !s32i loc(#loc228)
                      %58 = cir.cmp(eq, %56, %57) : !s32i, !cir.bool loc(#loc394)
                      %59 = cir.ternary(%58, true {
                        %60 = cir.const #true loc(#loc226)
                        cir.yield %60 : !cir.bool loc(#loc226)
                      }, false {
                        %60 = cir.const #false loc(#loc226)
                        cir.yield %60 : !cir.bool loc(#loc226)
                      }) : (!cir.bool) -> !cir.bool loc(#loc226)
                      cir.yield %59 : !cir.bool loc(#loc226)
                    }) : (!cir.bool) -> !cir.bool loc(#loc226)
                    cir.if %55 {
                      cir.break loc(#loc230)
                    } loc(#loc395)
                  } loc(#loc392)
                  %44 = cir.const #cir.int<0> : !s32i loc(#loc231)
                  %45 = cir.cast(integral, %44 : !s32i), !s8i loc(#loc231)
                  %46 = cir.load %3 : !cir.ptr<!s32i>, !s32i loc(#loc232)
                  %47 = cir.cast(array_to_ptrdecay, %6 : !cir.ptr<!cir.array<!s8i x 14>>), !cir.ptr<!s8i> loc(#loc233)
                  %48 = cir.ptr_stride(%47 : !cir.ptr<!s8i>, %46 : !s32i), !cir.ptr<!s8i> loc(#loc233)
                  cir.store %45, %48 : !s8i, !cir.ptr<!s8i> loc(#loc396)
                  %49 = cir.cast(array_to_ptrdecay, %6 : !cir.ptr<!cir.array<!s8i x 14>>), !cir.ptr<!s8i> loc(#loc234)
                  %50 = cir.call @atoi(%49) : (!cir.ptr<!s8i>) -> !s32i side_effect(pure) extra(#fn_attr) loc(#loc235)
                  cir.store %50, %0 : !s32i, !cir.ptr<!s32i> loc(#loc397)
                } loc(#loc374)
                cir.yield loc(#loc171)
              } while {
                %9 = cir.const #cir.int<0> : !s32i loc(#loc238)
                %10 = cir.cast(int_to_bool, %9 : !s32i), !cir.bool loc(#loc238)
                cir.condition(%10) loc(#loc238)
              } loc(#loc373)
            } loc(#loc373)
            cir.scope {
              %9 = cir.load %5 : !cir.ptr<!s32i>, !s32i loc(#loc241)
              %10 = cir.const #cir.int<1> : !s32i loc(#loc242)
              %11 = cir.unary(minus, %10) nsw : !s32i, !s32i loc(#loc242)
              %12 = cir.cmp(ne, %9, %11) : !s32i, !cir.bool loc(#loc399)
              cir.if %12 {
                %13 = cir.load %5 : !cir.ptr<!s32i>, !s32i loc(#loc244)
                %14 = cir.call @close(%13) : (!s32i) -> !s32i loc(#loc245)
              } loc(#loc400)
            } loc(#loc398)
          } loc(#loc368)
          cir.break loc(#loc246)
        } loc(#loc367)
        cir.yield loc(#loc157)
      } loc(#loc366)
    } loc(#loc366)
    cir.scope {
      cir.while {
        %3 = cir.const #cir.int<1> : !s32i loc(#loc249)
        %4 = cir.cast(int_to_bool, %3 : !s32i), !cir.bool loc(#loc249)
        cir.condition(%4) loc(#loc249)
      } do {
        cir.scope {
          cir.scope {
            %3 = cir.alloca !cir.array<!s32i x 10>, !cir.ptr<!cir.array<!s32i x 10>>, ["buffer"] {alignment = 16 : i64} loc(#loc404)
            %4 = cir.const #cir.zero : !cir.array<!s32i x 10> loc(#loc404)
            cir.store %4, %3 : !cir.array<!s32i x 10>, !cir.ptr<!cir.array<!s32i x 10>> loc(#loc404)
            cir.scope {
              %5 = cir.load %0 : !cir.ptr<!s32i>, !s32i loc(#loc257)
              %6 = cir.const #cir.int<0> : !s32i loc(#loc258)
              %7 = cir.cmp(ge, %5, %6) : !s32i, !cir.bool loc(#loc406)
              %8 = cir.ternary(%7, true {
                %9 = cir.load %0 : !cir.ptr<!s32i>, !s32i loc(#loc260)
                %10 = cir.const #cir.int<10> : !s32i loc(#loc261)
                %11 = cir.cmp(lt, %9, %10) : !s32i, !cir.bool loc(#loc407)
                %12 = cir.ternary(%11, true {
                  %13 = cir.const #true loc(#loc259)
                  cir.yield %13 : !cir.bool loc(#loc259)
                }, false {
                  %13 = cir.const #false loc(#loc259)
                  cir.yield %13 : !cir.bool loc(#loc259)
                }) : (!cir.bool) -> !cir.bool loc(#loc259)
                cir.yield %12 : !cir.bool loc(#loc259)
              }, false {
                %9 = cir.const #false loc(#loc259)
                cir.yield %9 : !cir.bool loc(#loc259)
              }) : (!cir.bool) -> !cir.bool loc(#loc259)
              cir.if %8 {
                %9 = cir.load %0 : !cir.ptr<!s32i>, !s32i loc(#loc266)
                %10 = cir.cast(array_to_ptrdecay, %3 : !cir.ptr<!cir.array<!s32i x 10>>), !cir.ptr<!s32i> loc(#loc267)
                %11 = cir.ptr_stride(%10 : !cir.ptr<!s32i>, %9 : !s32i), !cir.ptr<!s32i> loc(#loc267)
                %12 = cir.load %11 : !cir.ptr<!s32i>, !s32i loc(#loc267)
                cir.call @printIntLine(%12) : (!s32i) -> () loc(#loc268)
              } else {
                %9 = cir.get_global @".str.2" : !cir.ptr<!cir.array<!s8i x 36>> loc(#loc148)
                %10 = cir.cast(array_to_ptrdecay, %9 : !cir.ptr<!cir.array<!s8i x 36>>), !cir.ptr<!s8i> loc(#loc148)
                cir.call @printLine(%10) : (!cir.ptr<!s8i>) -> () loc(#loc269)
              } loc(#loc408)
            } loc(#loc405)
          } loc(#loc403)
          cir.break loc(#loc270)
        } loc(#loc402)
        cir.yield loc(#loc248)
      } loc(#loc401)
    } loc(#loc401)
    cir.return loc(#loc150)
  } loc(#loc363)
  cir.func no_proto internal private @goodG2B() extra(#fn_attr1) {
    %0 = cir.alloca !s32i, !cir.ptr<!s32i>, ["data"] {alignment = 4 : i64} loc(#loc410)
    %1 = cir.const #cir.int<1> : !s32i loc(#loc275)
    %2 = cir.unary(minus, %1) nsw : !s32i, !s32i loc(#loc276)
    cir.store %2, %0 : !s32i, !cir.ptr<!s32i> loc(#loc411)
    cir.scope {
      cir.while {
        %3 = cir.const #cir.int<1> : !s32i loc(#loc280)
        %4 = cir.cast(int_to_bool, %3 : !s32i), !cir.bool loc(#loc280)
        cir.condition(%4) loc(#loc280)
      } do {
        cir.scope {
          %3 = cir.const #cir.int<7> : !s32i loc(#loc282)
          cir.store %3, %0 : !s32i, !cir.ptr<!s32i> loc(#loc414)
          cir.break loc(#loc284)
        } loc(#loc413)
        cir.yield loc(#loc279)
      } loc(#loc412)
    } loc(#loc412)
    cir.scope {
      cir.while {
        %3 = cir.const #cir.int<1> : !s32i loc(#loc287)
        %4 = cir.cast(int_to_bool, %3 : !s32i), !cir.bool loc(#loc287)
        cir.condition(%4) loc(#loc287)
      } do {
        cir.scope {
          cir.scope {
            %3 = cir.alloca !cir.array<!s32i x 10>, !cir.ptr<!cir.array<!s32i x 10>>, ["buffer"] {alignment = 16 : i64} loc(#loc418)
            %4 = cir.const #cir.zero : !cir.array<!s32i x 10> loc(#loc418)
            cir.store %4, %3 : !cir.array<!s32i x 10>, !cir.ptr<!cir.array<!s32i x 10>> loc(#loc418)
            cir.scope {
              %5 = cir.load %0 : !cir.ptr<!s32i>, !s32i loc(#loc295)
              %6 = cir.const #cir.int<0> : !s32i loc(#loc296)
              %7 = cir.cmp(ge, %5, %6) : !s32i, !cir.bool loc(#loc420)
              cir.if %7 {
                %8 = cir.load %0 : !cir.ptr<!s32i>, !s32i loc(#loc300)
                %9 = cir.cast(array_to_ptrdecay, %3 : !cir.ptr<!cir.array<!s32i x 10>>), !cir.ptr<!s32i> loc(#loc301)
                %10 = cir.ptr_stride(%9 : !cir.ptr<!s32i>, %8 : !s32i), !cir.ptr<!s32i> loc(#loc301)
                %11 = cir.load %10 : !cir.ptr<!s32i>, !s32i loc(#loc301)
                cir.call @printIntLine(%11) : (!s32i) -> () loc(#loc302)
              } else {
                %8 = cir.get_global @".str.1" : !cir.ptr<!cir.array<!s8i x 31>> loc(#loc303)
                %9 = cir.cast(array_to_ptrdecay, %8 : !cir.ptr<!cir.array<!s8i x 31>>), !cir.ptr<!s8i> loc(#loc303)
                cir.call @printLine(%9) : (!cir.ptr<!s8i>) -> () loc(#loc304)
              } loc(#loc421)
            } loc(#loc419)
          } loc(#loc417)
          cir.break loc(#loc305)
        } loc(#loc416)
        cir.yield loc(#loc286)
      } loc(#loc415)
    } loc(#loc415)
    cir.return loc(#loc272)
  } loc(#loc409)
} loc(#loc)
#loc = loc("/workspaces/juliet-c/testcases/CWE126_Buffer_Overread/s01/CWE126_Buffer_Overread__CWE129_connect_socket_16.c":0:0)
#loc1 = loc("/usr/include/x86_64-linux-gnu/sys/socket.h":102:1)
#loc2 = loc("/usr/include/x86_64-linux-gnu/sys/socket.h":102:62)
#loc3 = loc("/usr/include/arpa/inet.h":34:1)
#loc4 = loc("/usr/include/arpa/inet.h":34:47)
#loc5 = loc("CWE126_Buffer_Overread__CWE129_connect_socket_16.c":77:53)
#loc6 = loc("/usr/include/netinet/in.h":402:1)
#loc7 = loc("/usr/include/netinet/in.h":403:40)
#loc8 = loc("/usr/include/x86_64-linux-gnu/sys/socket.h":126:1)
#loc9 = loc("/usr/include/x86_64-linux-gnu/sys/socket.h":126:75)
#loc10 = loc("/usr/include/x86_64-linux-gnu/sys/socket.h":145:1)
#loc11 = loc("/usr/include/x86_64-linux-gnu/sys/socket.h":145:68)
#loc12 = loc("/usr/include/stdlib.h":105:1)
#loc13 = loc("/usr/include/stdlib.h":106:33)
#loc14 = loc("/usr/include/unistd.h":358:1)
#loc15 = loc("/usr/include/unistd.h":358:27)
#loc16 = loc("../../../testcasesupport/std_testcase_io.h":18:1)
#loc17 = loc("../../../testcasesupport/std_testcase_io.h":18:33)
#loc18 = loc("../../../testcasesupport/std_testcase_io.h":14:1)
#loc19 = loc("../../../testcasesupport/std_testcase_io.h":14:33)
#loc20 = loc("CWE126_Buffer_Overread__CWE129_connect_socket_16.c":121:27)
#loc21 = loc("CWE126_Buffer_Overread__CWE129_connect_socket_16.c":44:1)
#loc22 = loc("CWE126_Buffer_Overread__CWE129_connect_socket_16.c":126:1)
#loc23 = loc("CWE126_Buffer_Overread__CWE129_connect_socket_16.c":46:5)
#loc24 = loc("CWE126_Buffer_Overread__CWE129_connect_socket_16.c":46:9)
#loc25 = loc("CWE126_Buffer_Overread__CWE129_connect_socket_16.c":48:13)
#loc26 = loc("CWE126_Buffer_Overread__CWE129_connect_socket_16.c":48:12)
#loc27 = loc("CWE126_Buffer_Overread__CWE129_connect_socket_16.c":48:5)
#loc28 = loc("CWE126_Buffer_Overread__CWE129_connect_socket_16.c":49:5)
#loc29 = loc("CWE126_Buffer_Overread__CWE129_connect_socket_16.c":108:5)
#loc30 = loc("CWE126_Buffer_Overread__CWE129_connect_socket_16.c":49:11)
#loc31 = loc("CWE126_Buffer_Overread__CWE129_connect_socket_16.c":50:5)
#loc32 = loc("CWE126_Buffer_Overread__CWE129_connect_socket_16.c":51:9)
#loc33 = loc("CWE126_Buffer_Overread__CWE129_connect_socket_16.c":106:9)
#loc34 = loc("CWE126_Buffer_Overread__CWE129_connect_socket_16.c":56:13)
#loc35 = loc("CWE126_Buffer_Overread__CWE129_connect_socket_16.c":56:17)
#loc36 = loc("CWE126_Buffer_Overread__CWE129_connect_socket_16.c":57:13)
#loc37 = loc("CWE126_Buffer_Overread__CWE129_connect_socket_16.c":57:32)
#loc38 = loc("CWE126_Buffer_Overread__CWE129_connect_socket_16.c":58:13)
#loc39 = loc("CWE126_Buffer_Overread__CWE129_connect_socket_16.c":58:36)
#loc40 = loc("CWE126_Buffer_Overread__CWE129_connect_socket_16.c":59:13)
#loc41 = loc("CWE126_Buffer_Overread__CWE129_connect_socket_16.c":59:45)
#loc42 = loc("CWE126_Buffer_Overread__CWE129_connect_socket_16.c":60:13)
#loc43 = loc("CWE126_Buffer_Overread__CWE129_connect_socket_16.c":95:21)
#loc44 = loc("CWE126_Buffer_Overread__CWE129_connect_socket_16.c":61:13)
#loc45 = loc("CWE126_Buffer_Overread__CWE129_connect_socket_16.c":94:13)
#loc46 = loc("CWE126_Buffer_Overread__CWE129_connect_socket_16.c":70:40)
#loc47 = loc("CWE126_Buffer_Overread__CWE129_connect_socket_16.c":70:49)
#loc48 = loc("CWE126_Buffer_Overread__CWE129_connect_socket_16.c":70:62)
#loc49 = loc("CWE126_Buffer_Overread__CWE129_connect_socket_16.c":70:33)
#loc50 = loc("CWE126_Buffer_Overread__CWE129_connect_socket_16.c":70:17)
#loc51 = loc("CWE126_Buffer_Overread__CWE129_connect_socket_16.c":70:73)
#loc52 = loc("CWE126_Buffer_Overread__CWE129_connect_socket_16.c":71:17)
#loc53 = loc("CWE126_Buffer_Overread__CWE129_connect_socket_16.c":74:17)
#loc54 = loc("CWE126_Buffer_Overread__CWE129_connect_socket_16.c":71:21)
#loc55 = loc("CWE126_Buffer_Overread__CWE129_connect_socket_16.c":71:38)
#loc56 = loc("CWE126_Buffer_Overread__CWE129_connect_socket_16.c":72:17)
#loc57 = loc("CWE126_Buffer_Overread__CWE129_connect_socket_16.c":73:21)
#loc58 = loc("CWE126_Buffer_Overread__CWE129_connect_socket_16.c":75:24)
#loc59 = loc("CWE126_Buffer_Overread__CWE129_connect_socket_16.c":75:25)
#loc60 = loc("CWE126_Buffer_Overread__CWE129_connect_socket_16.c":75:34)
#loc61 = loc("CWE126_Buffer_Overread__CWE129_connect_socket_16.c":75:37)
#loc62 = loc("CWE126_Buffer_Overread__CWE129_connect_socket_16.c":75:51)
#loc63 = loc("CWE126_Buffer_Overread__CWE129_connect_socket_16.c":75:17)
#loc64 = loc("CWE126_Buffer_Overread__CWE129_connect_socket_16.c":75:52)
#loc65 = loc("CWE126_Buffer_Overread__CWE129_connect_socket_16.c":76:38)
#loc66 = loc("/usr/include/netinet/in.h":249:5)
#loc67 = loc("CWE126_Buffer_Overread__CWE129_connect_socket_16.c":76:17)
#loc68 = loc("CWE126_Buffer_Overread__CWE129_connect_socket_16.c":77:43)
#loc69 = loc("/usr/include/netinet/in.h":251:20)
#loc70 = loc("/usr/include/netinet/in.h":33:15)
#loc71 = loc("CWE126_Buffer_Overread__CWE129_connect_socket_16.c":77:17)
#loc72 = loc("CWE126_Buffer_Overread__CWE129_connect_socket_16.c":77:63)
#loc73 = loc("CWE126_Buffer_Overread__CWE129_connect_socket_16.c":78:42)
#loc74 = loc("CWE126_Buffer_Overread__CWE129_connect_socket_16.c":78:36)
#loc75 = loc("/usr/include/netinet/in.h":250:15)
#loc76 = loc("CWE126_Buffer_Overread__CWE129_connect_socket_16.c":78:17)
#loc77 = loc("CWE126_Buffer_Overread__CWE129_connect_socket_16.c":78:50)
#loc78 = loc("CWE126_Buffer_Overread__CWE129_connect_socket_16.c":79:17)
#loc79 = loc("CWE126_Buffer_Overread__CWE129_connect_socket_16.c":82:17)
#loc80 = loc("CWE126_Buffer_Overread__CWE129_connect_socket_16.c":79:29)
#loc81 = loc("CWE126_Buffer_Overread__CWE129_connect_socket_16.c":79:62)
#loc82 = loc("CWE126_Buffer_Overread__CWE129_connect_socket_16.c":79:63)
#loc83 = loc("CWE126_Buffer_Overread__CWE129_connect_socket_16.c":79:72)
#loc84 = loc("CWE126_Buffer_Overread__CWE129_connect_socket_16.c":79:86)
#loc85 = loc("CWE126_Buffer_Overread__CWE129_connect_socket_16.c":79:21)
#loc86 = loc("CWE126_Buffer_Overread__CWE129_connect_socket_16.c":79:92)
#loc87 = loc("CWE126_Buffer_Overread__CWE129_connect_socket_16.c":80:17)
#loc88 = loc("CWE126_Buffer_Overread__CWE129_connect_socket_16.c":81:21)
#loc89 = loc("CWE126_Buffer_Overread__CWE129_connect_socket_16.c":85:35)
#loc90 = loc("CWE126_Buffer_Overread__CWE129_connect_socket_16.c":85:50)
#loc91 = loc("CWE126_Buffer_Overread__CWE129_connect_socket_16.c":85:63)
#loc92 = loc("CWE126_Buffer_Overread__CWE129_connect_socket_16.c":85:81)
#loc93 = loc("CWE126_Buffer_Overread__CWE129_connect_socket_16.c":85:84)
#loc94 = loc("CWE126_Buffer_Overread__CWE129_connect_socket_16.c":85:30)
#loc95 = loc("CWE126_Buffer_Overread__CWE129_connect_socket_16.c":85:17)
#loc96 = loc("CWE126_Buffer_Overread__CWE129_connect_socket_16.c":85:85)
#loc97 = loc("CWE126_Buffer_Overread__CWE129_connect_socket_16.c":86:17)
#loc98 = loc("CWE126_Buffer_Overread__CWE129_connect_socket_16.c":89:17)
#loc99 = loc("CWE126_Buffer_Overread__CWE129_connect_socket_16.c":86:21)
#loc100 = loc("CWE126_Buffer_Overread__CWE129_connect_socket_16.c":86:35)
#loc101 = loc("CWE126_Buffer_Overread__CWE129_connect_socket_16.c":86:48)
#loc102 = loc("CWE126_Buffer_Overread__CWE129_connect_socket_16.c":86:51)
#loc103 = loc("CWE126_Buffer_Overread__CWE129_connect_socket_16.c":86:65)
#loc104 = loc("CWE126_Buffer_Overread__CWE129_connect_socket_16.c":87:17)
#loc105 = loc("CWE126_Buffer_Overread__CWE129_connect_socket_16.c":88:21)
#loc106 = loc("CWE126_Buffer_Overread__CWE129_connect_socket_16.c":91:43)
#loc107 = loc("CWE126_Buffer_Overread__CWE129_connect_socket_16.c":91:29)
#loc108 = loc("CWE126_Buffer_Overread__CWE129_connect_socket_16.c":91:17)
#loc109 = loc("CWE126_Buffer_Overread__CWE129_connect_socket_16.c":93:29)
#loc110 = loc("CWE126_Buffer_Overread__CWE129_connect_socket_16.c":93:24)
#loc111 = loc("CWE126_Buffer_Overread__CWE129_connect_socket_16.c":93:17)
#loc112 = loc("CWE126_Buffer_Overread__CWE129_connect_socket_16.c":93:40)
#loc113 = loc("CWE126_Buffer_Overread__CWE129_connect_socket_16.c":95:20)
#loc114 = loc("CWE126_Buffer_Overread__CWE129_connect_socket_16.c":96:13)
#loc115 = loc("CWE126_Buffer_Overread__CWE129_connect_socket_16.c":99:13)
#loc116 = loc("CWE126_Buffer_Overread__CWE129_connect_socket_16.c":96:17)
#loc117 = loc("CWE126_Buffer_Overread__CWE129_connect_socket_16.c":96:34)
#loc118 = loc("CWE126_Buffer_Overread__CWE129_connect_socket_16.c":97:13)
#loc119 = loc("CWE126_Buffer_Overread__CWE129_connect_socket_16.c":98:30)
#loc120 = loc("CWE126_Buffer_Overread__CWE129_connect_socket_16.c":98:17)
#loc121 = loc("CWE126_Buffer_Overread__CWE129_connect_socket_16.c":107:9)
#loc122 = loc("CWE126_Buffer_Overread__CWE129_connect_socket_16.c":109:5)
#loc123 = loc("CWE126_Buffer_Overread__CWE129_connect_socket_16.c":125:5)
#loc124 = loc("CWE126_Buffer_Overread__CWE129_connect_socket_16.c":109:11)
#loc125 = loc("CWE126_Buffer_Overread__CWE129_connect_socket_16.c":110:5)
#loc126 = loc("CWE126_Buffer_Overread__CWE129_connect_socket_16.c":111:9)
#loc127 = loc("CWE126_Buffer_Overread__CWE129_connect_socket_16.c":123:9)
#loc128 = loc("CWE126_Buffer_Overread__CWE129_connect_socket_16.c":112:13)
#loc129 = loc("CWE126_Buffer_Overread__CWE129_connect_socket_16.c":112:34)
#loc130 = loc("CWE126_Buffer_Overread__CWE129_connect_socket_16.c":115:13)
#loc131 = loc("CWE126_Buffer_Overread__CWE129_connect_socket_16.c":122:13)
#loc132 = loc("CWE126_Buffer_Overread__CWE129_connect_socket_16.c":115:17)
#loc133 = loc("CWE126_Buffer_Overread__CWE129_connect_socket_16.c":115:25)
#loc134 = loc("CWE126_Buffer_Overread__CWE129_connect_socket_16.c":116:13)
#loc135 = loc("CWE126_Buffer_Overread__CWE129_connect_socket_16.c":118:13)
#loc136 = loc("CWE126_Buffer_Overread__CWE129_connect_socket_16.c":120:13)
#loc137 = loc("CWE126_Buffer_Overread__CWE129_connect_socket_16.c":117:37)
#loc138 = loc("CWE126_Buffer_Overread__CWE129_connect_socket_16.c":117:30)
#loc139 = loc("CWE126_Buffer_Overread__CWE129_connect_socket_16.c":117:17)
#loc140 = loc("CWE126_Buffer_Overread__CWE129_connect_socket_16.c":121:17)
#loc141 = loc("CWE126_Buffer_Overread__CWE129_connect_socket_16.c":124:9)
#loc142 = loc("CWE126_Buffer_Overread__CWE129_connect_socket_16.c":248:1)
#loc143 = loc("CWE126_Buffer_Overread__CWE129_connect_socket_16.c":252:1)
#loc144 = loc("CWE126_Buffer_Overread__CWE129_connect_socket_16.c":250:5)
#loc145 = loc("CWE126_Buffer_Overread__CWE129_connect_socket_16.c":250:13)
#loc146 = loc("CWE126_Buffer_Overread__CWE129_connect_socket_16.c":251:5)
#loc147 = loc("CWE126_Buffer_Overread__CWE129_connect_socket_16.c":251:13)
#loc148 = loc("CWE126_Buffer_Overread__CWE129_connect_socket_16.c":209:27)
#loc149 = loc("CWE126_Buffer_Overread__CWE129_connect_socket_16.c":133:1)
#loc150 = loc("CWE126_Buffer_Overread__CWE129_connect_socket_16.c":214:1)
#loc151 = loc("CWE126_Buffer_Overread__CWE129_connect_socket_16.c":135:5)
#loc152 = loc("CWE126_Buffer_Overread__CWE129_connect_socket_16.c":135:9)
#loc153 = loc("CWE126_Buffer_Overread__CWE129_connect_socket_16.c":137:13)
#loc154 = loc("CWE126_Buffer_Overread__CWE129_connect_socket_16.c":137:12)
#loc155 = loc("CWE126_Buffer_Overread__CWE129_connect_socket_16.c":137:5)
#loc156 = loc("CWE126_Buffer_Overread__CWE129_connect_socket_16.c":138:5)
#loc157 = loc("CWE126_Buffer_Overread__CWE129_connect_socket_16.c":197:5)
#loc158 = loc("CWE126_Buffer_Overread__CWE129_connect_socket_16.c":138:11)
#loc159 = loc("CWE126_Buffer_Overread__CWE129_connect_socket_16.c":139:5)
#loc160 = loc("CWE126_Buffer_Overread__CWE129_connect_socket_16.c":140:9)
#loc161 = loc("CWE126_Buffer_Overread__CWE129_connect_socket_16.c":195:9)
#loc162 = loc("CWE126_Buffer_Overread__CWE129_connect_socket_16.c":145:13)
#loc163 = loc("CWE126_Buffer_Overread__CWE129_connect_socket_16.c":145:17)
#loc164 = loc("CWE126_Buffer_Overread__CWE129_connect_socket_16.c":146:13)
#loc165 = loc("CWE126_Buffer_Overread__CWE129_connect_socket_16.c":146:32)
#loc166 = loc("CWE126_Buffer_Overread__CWE129_connect_socket_16.c":147:13)
#loc167 = loc("CWE126_Buffer_Overread__CWE129_connect_socket_16.c":147:36)
#loc168 = loc("CWE126_Buffer_Overread__CWE129_connect_socket_16.c":148:13)
#loc169 = loc("CWE126_Buffer_Overread__CWE129_connect_socket_16.c":148:45)
#loc170 = loc("CWE126_Buffer_Overread__CWE129_connect_socket_16.c":149:13)
#loc171 = loc("CWE126_Buffer_Overread__CWE129_connect_socket_16.c":184:21)
#loc172 = loc("CWE126_Buffer_Overread__CWE129_connect_socket_16.c":150:13)
#loc173 = loc("CWE126_Buffer_Overread__CWE129_connect_socket_16.c":183:13)
#loc174 = loc("CWE126_Buffer_Overread__CWE129_connect_socket_16.c":159:40)
#loc175 = loc("CWE126_Buffer_Overread__CWE129_connect_socket_16.c":159:49)
#loc176 = loc("CWE126_Buffer_Overread__CWE129_connect_socket_16.c":159:62)
#loc177 = loc("CWE126_Buffer_Overread__CWE129_connect_socket_16.c":159:33)
#loc178 = loc("CWE126_Buffer_Overread__CWE129_connect_socket_16.c":159:17)
#loc179 = loc("CWE126_Buffer_Overread__CWE129_connect_socket_16.c":159:73)
#loc180 = loc("CWE126_Buffer_Overread__CWE129_connect_socket_16.c":160:17)
#loc181 = loc("CWE126_Buffer_Overread__CWE129_connect_socket_16.c":163:17)
#loc182 = loc("CWE126_Buffer_Overread__CWE129_connect_socket_16.c":160:21)
#loc183 = loc("CWE126_Buffer_Overread__CWE129_connect_socket_16.c":160:38)
#loc184 = loc("CWE126_Buffer_Overread__CWE129_connect_socket_16.c":161:17)
#loc185 = loc("CWE126_Buffer_Overread__CWE129_connect_socket_16.c":162:21)
#loc186 = loc("CWE126_Buffer_Overread__CWE129_connect_socket_16.c":164:24)
#loc187 = loc("CWE126_Buffer_Overread__CWE129_connect_socket_16.c":164:25)
#loc188 = loc("CWE126_Buffer_Overread__CWE129_connect_socket_16.c":164:34)
#loc189 = loc("CWE126_Buffer_Overread__CWE129_connect_socket_16.c":164:37)
#loc190 = loc("CWE126_Buffer_Overread__CWE129_connect_socket_16.c":164:51)
#loc191 = loc("CWE126_Buffer_Overread__CWE129_connect_socket_16.c":164:17)
#loc192 = loc("CWE126_Buffer_Overread__CWE129_connect_socket_16.c":164:52)
#loc193 = loc("CWE126_Buffer_Overread__CWE129_connect_socket_16.c":165:38)
#loc194 = loc("CWE126_Buffer_Overread__CWE129_connect_socket_16.c":165:17)
#loc195 = loc("CWE126_Buffer_Overread__CWE129_connect_socket_16.c":166:53)
#loc196 = loc("CWE126_Buffer_Overread__CWE129_connect_socket_16.c":166:43)
#loc197 = loc("CWE126_Buffer_Overread__CWE129_connect_socket_16.c":166:17)
#loc198 = loc("CWE126_Buffer_Overread__CWE129_connect_socket_16.c":166:63)
#loc199 = loc("CWE126_Buffer_Overread__CWE129_connect_socket_16.c":167:42)
#loc200 = loc("CWE126_Buffer_Overread__CWE129_connect_socket_16.c":167:36)
#loc201 = loc("CWE126_Buffer_Overread__CWE129_connect_socket_16.c":167:17)
#loc202 = loc("CWE126_Buffer_Overread__CWE129_connect_socket_16.c":167:50)
#loc203 = loc("CWE126_Buffer_Overread__CWE129_connect_socket_16.c":168:17)
#loc204 = loc("CWE126_Buffer_Overread__CWE129_connect_socket_16.c":171:17)
#loc205 = loc("CWE126_Buffer_Overread__CWE129_connect_socket_16.c":168:29)
#loc206 = loc("CWE126_Buffer_Overread__CWE129_connect_socket_16.c":168:62)
#loc207 = loc("CWE126_Buffer_Overread__CWE129_connect_socket_16.c":168:63)
#loc208 = loc("CWE126_Buffer_Overread__CWE129_connect_socket_16.c":168:72)
#loc209 = loc("CWE126_Buffer_Overread__CWE129_connect_socket_16.c":168:86)
#loc210 = loc("CWE126_Buffer_Overread__CWE129_connect_socket_16.c":168:21)
#loc211 = loc("CWE126_Buffer_Overread__CWE129_connect_socket_16.c":168:92)
#loc212 = loc("CWE126_Buffer_Overread__CWE129_connect_socket_16.c":169:17)
#loc213 = loc("CWE126_Buffer_Overread__CWE129_connect_socket_16.c":170:21)
#loc214 = loc("CWE126_Buffer_Overread__CWE129_connect_socket_16.c":174:35)
#loc215 = loc("CWE126_Buffer_Overread__CWE129_connect_socket_16.c":174:50)
#loc216 = loc("CWE126_Buffer_Overread__CWE129_connect_socket_16.c":174:63)
#loc217 = loc("CWE126_Buffer_Overread__CWE129_connect_socket_16.c":174:81)
#loc218 = loc("CWE126_Buffer_Overread__CWE129_connect_socket_16.c":174:84)
#loc219 = loc("CWE126_Buffer_Overread__CWE129_connect_socket_16.c":174:30)
#loc220 = loc("CWE126_Buffer_Overread__CWE129_connect_socket_16.c":174:17)
#loc221 = loc("CWE126_Buffer_Overread__CWE129_connect_socket_16.c":174:85)
#loc222 = loc("CWE126_Buffer_Overread__CWE129_connect_socket_16.c":175:17)
#loc223 = loc("CWE126_Buffer_Overread__CWE129_connect_socket_16.c":178:17)
#loc224 = loc("CWE126_Buffer_Overread__CWE129_connect_socket_16.c":175:21)
#loc225 = loc("CWE126_Buffer_Overread__CWE129_connect_socket_16.c":175:35)
#loc226 = loc("CWE126_Buffer_Overread__CWE129_connect_socket_16.c":175:48)
#loc227 = loc("CWE126_Buffer_Overread__CWE129_connect_socket_16.c":175:51)
#loc228 = loc("CWE126_Buffer_Overread__CWE129_connect_socket_16.c":175:65)
#loc229 = loc("CWE126_Buffer_Overread__CWE129_connect_socket_16.c":176:17)
#loc230 = loc("CWE126_Buffer_Overread__CWE129_connect_socket_16.c":177:21)
#loc231 = loc("CWE126_Buffer_Overread__CWE129_connect_socket_16.c":180:43)
#loc232 = loc("CWE126_Buffer_Overread__CWE129_connect_socket_16.c":180:29)
#loc233 = loc("CWE126_Buffer_Overread__CWE129_connect_socket_16.c":180:17)
#loc234 = loc("CWE126_Buffer_Overread__CWE129_connect_socket_16.c":182:29)
#loc235 = loc("CWE126_Buffer_Overread__CWE129_connect_socket_16.c":182:24)
#loc236 = loc("CWE126_Buffer_Overread__CWE129_connect_socket_16.c":182:17)
#loc237 = loc("CWE126_Buffer_Overread__CWE129_connect_socket_16.c":182:40)
#loc238 = loc("CWE126_Buffer_Overread__CWE129_connect_socket_16.c":184:20)
#loc239 = loc("CWE126_Buffer_Overread__CWE129_connect_socket_16.c":185:13)
#loc240 = loc("CWE126_Buffer_Overread__CWE129_connect_socket_16.c":188:13)
#loc241 = loc("CWE126_Buffer_Overread__CWE129_connect_socket_16.c":185:17)
#loc242 = loc("CWE126_Buffer_Overread__CWE129_connect_socket_16.c":185:34)
#loc243 = loc("CWE126_Buffer_Overread__CWE129_connect_socket_16.c":186:13)
#loc244 = loc("CWE126_Buffer_Overread__CWE129_connect_socket_16.c":187:30)
#loc245 = loc("CWE126_Buffer_Overread__CWE129_connect_socket_16.c":187:17)
#loc246 = loc("CWE126_Buffer_Overread__CWE129_connect_socket_16.c":196:9)
#loc247 = loc("CWE126_Buffer_Overread__CWE129_connect_socket_16.c":198:5)
#loc248 = loc("CWE126_Buffer_Overread__CWE129_connect_socket_16.c":213:5)
#loc249 = loc("CWE126_Buffer_Overread__CWE129_connect_socket_16.c":198:11)
#loc250 = loc("CWE126_Buffer_Overread__CWE129_connect_socket_16.c":199:5)
#loc251 = loc("CWE126_Buffer_Overread__CWE129_connect_socket_16.c":200:9)
#loc252 = loc("CWE126_Buffer_Overread__CWE129_connect_socket_16.c":211:9)
#loc253 = loc("CWE126_Buffer_Overread__CWE129_connect_socket_16.c":201:13)
#loc254 = loc("CWE126_Buffer_Overread__CWE129_connect_socket_16.c":201:34)
#loc255 = loc("CWE126_Buffer_Overread__CWE129_connect_socket_16.c":203:13)
#loc256 = loc("CWE126_Buffer_Overread__CWE129_connect_socket_16.c":210:13)
#loc257 = loc("CWE126_Buffer_Overread__CWE129_connect_socket_16.c":203:17)
#loc258 = loc("CWE126_Buffer_Overread__CWE129_connect_socket_16.c":203:25)
#loc259 = loc("CWE126_Buffer_Overread__CWE129_connect_socket_16.c":203:27)
#loc260 = loc("CWE126_Buffer_Overread__CWE129_connect_socket_16.c":203:30)
#loc261 = loc("CWE126_Buffer_Overread__CWE129_connect_socket_16.c":203:38)
#loc262 = loc("CWE126_Buffer_Overread__CWE129_connect_socket_16.c":203:40)
#loc263 = loc("CWE126_Buffer_Overread__CWE129_connect_socket_16.c":204:13)
#loc264 = loc("CWE126_Buffer_Overread__CWE129_connect_socket_16.c":206:13)
#loc265 = loc("CWE126_Buffer_Overread__CWE129_connect_socket_16.c":208:13)
#loc266 = loc("CWE126_Buffer_Overread__CWE129_connect_socket_16.c":205:37)
#loc267 = loc("CWE126_Buffer_Overread__CWE129_connect_socket_16.c":205:30)
#loc268 = loc("CWE126_Buffer_Overread__CWE129_connect_socket_16.c":205:17)
#loc269 = loc("CWE126_Buffer_Overread__CWE129_connect_socket_16.c":209:17)
#loc270 = loc("CWE126_Buffer_Overread__CWE129_connect_socket_16.c":212:9)
#loc271 = loc("CWE126_Buffer_Overread__CWE129_connect_socket_16.c":217:1)
#loc272 = loc("CWE126_Buffer_Overread__CWE129_connect_socket_16.c":246:1)
#loc273 = loc("CWE126_Buffer_Overread__CWE129_connect_socket_16.c":219:5)
#loc274 = loc("CWE126_Buffer_Overread__CWE129_connect_socket_16.c":219:9)
#loc275 = loc("CWE126_Buffer_Overread__CWE129_connect_socket_16.c":221:13)
#loc276 = loc("CWE126_Buffer_Overread__CWE129_connect_socket_16.c":221:12)
#loc277 = loc("CWE126_Buffer_Overread__CWE129_connect_socket_16.c":221:5)
#loc278 = loc("CWE126_Buffer_Overread__CWE129_connect_socket_16.c":222:5)
#loc279 = loc("CWE126_Buffer_Overread__CWE129_connect_socket_16.c":228:5)
#loc280 = loc("CWE126_Buffer_Overread__CWE129_connect_socket_16.c":222:11)
#loc281 = loc("CWE126_Buffer_Overread__CWE129_connect_socket_16.c":223:5)
#loc282 = loc("CWE126_Buffer_Overread__CWE129_connect_socket_16.c":226:16)
#loc283 = loc("CWE126_Buffer_Overread__CWE129_connect_socket_16.c":226:9)
#loc284 = loc("CWE126_Buffer_Overread__CWE129_connect_socket_16.c":227:9)
#loc285 = loc("CWE126_Buffer_Overread__CWE129_connect_socket_16.c":229:5)
#loc286 = loc("CWE126_Buffer_Overread__CWE129_connect_socket_16.c":245:5)
#loc287 = loc("CWE126_Buffer_Overread__CWE129_connect_socket_16.c":229:11)
#loc288 = loc("CWE126_Buffer_Overread__CWE129_connect_socket_16.c":230:5)
#loc289 = loc("CWE126_Buffer_Overread__CWE129_connect_socket_16.c":231:9)
#loc290 = loc("CWE126_Buffer_Overread__CWE129_connect_socket_16.c":243:9)
#loc291 = loc("CWE126_Buffer_Overread__CWE129_connect_socket_16.c":232:13)
#loc292 = loc("CWE126_Buffer_Overread__CWE129_connect_socket_16.c":232:34)
#loc293 = loc("CWE126_Buffer_Overread__CWE129_connect_socket_16.c":235:13)
#loc294 = loc("CWE126_Buffer_Overread__CWE129_connect_socket_16.c":242:13)
#loc295 = loc("CWE126_Buffer_Overread__CWE129_connect_socket_16.c":235:17)
#loc296 = loc("CWE126_Buffer_Overread__CWE129_connect_socket_16.c":235:25)
#loc297 = loc("CWE126_Buffer_Overread__CWE129_connect_socket_16.c":236:13)
#loc298 = loc("CWE126_Buffer_Overread__CWE129_connect_socket_16.c":238:13)
#loc299 = loc("CWE126_Buffer_Overread__CWE129_connect_socket_16.c":240:13)
#loc300 = loc("CWE126_Buffer_Overread__CWE129_connect_socket_16.c":237:37)
#loc301 = loc("CWE126_Buffer_Overread__CWE129_connect_socket_16.c":237:30)
#loc302 = loc("CWE126_Buffer_Overread__CWE129_connect_socket_16.c":237:17)
#loc303 = loc("CWE126_Buffer_Overread__CWE129_connect_socket_16.c":241:27)
#loc304 = loc("CWE126_Buffer_Overread__CWE129_connect_socket_16.c":241:17)
#loc305 = loc("CWE126_Buffer_Overread__CWE129_connect_socket_16.c":244:9)
#loc306 = loc(fused[#loc1, #loc2])
#loc307 = loc(fused[#loc3, #loc4])
#loc308 = loc(fused[#loc6, #loc7])
#loc309 = loc(fused[#loc8, #loc9])
#loc310 = loc(fused[#loc10, #loc11])
#loc311 = loc(fused[#loc12, #loc13])
#loc312 = loc(fused[#loc14, #loc15])
#loc313 = loc(fused[#loc16, #loc17])
#loc314 = loc(fused[#loc18, #loc19])
#loc315 = loc(fused[#loc21, #loc22])
#loc316 = loc(fused[#loc23, #loc24])
#loc317 = loc(fused[#loc27, #loc25])
#loc318 = loc(fused[#loc28, #loc29])
#loc319 = loc(fused[#loc31, #loc29])
#loc320 = loc(fused[#loc32, #loc33])
#loc321 = loc(fused[#loc34, #loc35])
#loc322 = loc(fused[#loc36, #loc37])
#loc323 = loc(fused[#loc38, #loc39])
#loc324 = loc(fused[#loc40, #loc41])
#loc325 = loc(fused[#loc42, #loc43])
#loc326 = loc(fused[#loc44, #loc45])
#loc327 = loc(fused[#loc50, #loc51])
#loc328 = loc(fused[#loc52, #loc53])
#loc329 = loc(fused[#loc54, #loc55])
#loc330 = loc(fused[#loc56, #loc53])
#loc331 = loc(fused[#loc58, #loc59])
#loc332 = loc(fused[#loc61, #loc62])
#loc333 = loc(fused[#loc63, #loc64])
#loc334 = loc(fused[#loc67, #loc65])
#loc335 = loc(fused[#loc71, #loc72])
#loc336 = loc(fused[#loc76, #loc77])
#loc337 = loc(fused[#loc78, #loc79])
#loc338 = loc(fused[#loc81, #loc82])
#loc339 = loc(fused[#loc83, #loc84])
#loc340 = loc(fused[#loc85, #loc86])
#loc341 = loc(fused[#loc87, #loc79])
#loc342 = loc(fused[#loc91, #loc92])
#loc343 = loc(fused[#loc95, #loc96])
#loc344 = loc(fused[#loc97, #loc98])
#loc345 = loc(fused[#loc99, #loc100])
#loc346 = loc(fused[#loc102, #loc103])
#loc347 = loc(fused[#loc104, #loc98])
#loc348 = loc(fused[#loc108, #loc106])
#loc349 = loc(fused[#loc111, #loc112])
#loc350 = loc(fused[#loc114, #loc115])
#loc351 = loc(fused[#loc116, #loc117])
#loc352 = loc(fused[#loc118, #loc115])
#loc353 = loc(fused[#loc122, #loc123])
#loc354 = loc(fused[#loc125, #loc123])
#loc355 = loc(fused[#loc126, #loc127])
#loc356 = loc(fused[#loc128, #loc129])
#loc357 = loc(fused[#loc130, #loc131])
#loc358 = loc(fused[#loc132, #loc133])
#loc359 = loc(fused[#loc134, #loc135, #loc136, #loc131])
#loc360 = loc(fused[#loc142, #loc143])
#loc361 = loc(fused[#loc144, #loc145])
#loc362 = loc(fused[#loc146, #loc147])
#loc363 = loc(fused[#loc149, #loc150])
#loc364 = loc(fused[#loc151, #loc152])
#loc365 = loc(fused[#loc155, #loc153])
#loc366 = loc(fused[#loc156, #loc157])
#loc367 = loc(fused[#loc159, #loc157])
#loc368 = loc(fused[#loc160, #loc161])
#loc369 = loc(fused[#loc162, #loc163])
#loc370 = loc(fused[#loc164, #loc165])
#loc371 = loc(fused[#loc166, #loc167])
#loc372 = loc(fused[#loc168, #loc169])
#loc373 = loc(fused[#loc170, #loc171])
#loc374 = loc(fused[#loc172, #loc173])
#loc375 = loc(fused[#loc178, #loc179])
#loc376 = loc(fused[#loc180, #loc181])
#loc377 = loc(fused[#loc182, #loc183])
#loc378 = loc(fused[#loc184, #loc181])
#loc379 = loc(fused[#loc186, #loc187])
#loc380 = loc(fused[#loc189, #loc190])
#loc381 = loc(fused[#loc191, #loc192])
#loc382 = loc(fused[#loc194, #loc193])
#loc383 = loc(fused[#loc197, #loc198])
#loc384 = loc(fused[#loc201, #loc202])
#loc385 = loc(fused[#loc203, #loc204])
#loc386 = loc(fused[#loc206, #loc207])
#loc387 = loc(fused[#loc208, #loc209])
#loc388 = loc(fused[#loc210, #loc211])
#loc389 = loc(fused[#loc212, #loc204])
#loc390 = loc(fused[#loc216, #loc217])
#loc391 = loc(fused[#loc220, #loc221])
#loc392 = loc(fused[#loc222, #loc223])
#loc393 = loc(fused[#loc224, #loc225])
#loc394 = loc(fused[#loc227, #loc228])
#loc395 = loc(fused[#loc229, #loc223])
#loc396 = loc(fused[#loc233, #loc231])
#loc397 = loc(fused[#loc236, #loc237])
#loc398 = loc(fused[#loc239, #loc240])
#loc399 = loc(fused[#loc241, #loc242])
#loc400 = loc(fused[#loc243, #loc240])
#loc401 = loc(fused[#loc247, #loc248])
#loc402 = loc(fused[#loc250, #loc248])
#loc403 = loc(fused[#loc251, #loc252])
#loc404 = loc(fused[#loc253, #loc254])
#loc405 = loc(fused[#loc255, #loc256])
#loc406 = loc(fused[#loc257, #loc258])
#loc407 = loc(fused[#loc260, #loc262])
#loc408 = loc(fused[#loc263, #loc264, #loc265, #loc256])
#loc409 = loc(fused[#loc271, #loc272])
#loc410 = loc(fused[#loc273, #loc274])
#loc411 = loc(fused[#loc277, #loc275])
#loc412 = loc(fused[#loc278, #loc279])
#loc413 = loc(fused[#loc281, #loc279])
#loc414 = loc(fused[#loc283, #loc282])
#loc415 = loc(fused[#loc285, #loc286])
#loc416 = loc(fused[#loc288, #loc286])
#loc417 = loc(fused[#loc289, #loc290])
#loc418 = loc(fused[#loc291, #loc292])
#loc419 = loc(fused[#loc293, #loc294])
#loc420 = loc(fused[#loc295, #loc296])
#loc421 = loc(fused[#loc297, #loc298, #loc299, #loc294])
