!s32i = !cir.int<s, 32>
!s8i = !cir.int<s, 8>
!u64i = !cir.int<u, 64>
!void = !cir.void
#fn_attr = #cir<extra({nothrow = #cir.nothrow})>
#fn_attr1 = #cir<extra({inline = #cir.inline<no>, nothrow = #cir.nothrow, optnone = #cir.optnone, uwtable = #cir.uwtable<async>})>
#loc21 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE135_21.c":27:21)
#loc22 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE135_21.c":27:28)
#loc111 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE135_21.c":69:26)
#loc112 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE135_21.c":69:33)
#loc191 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE135_21.c":107:26)
#loc192 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE135_21.c":107:33)
#loc270 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE135_21.c":140:25)
#loc271 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE135_21.c":140:32)
#loc353 = loc(fused[#loc21, #loc22])
#loc386 = loc(fused[#loc111, #loc112])
#loc413 = loc(fused[#loc191, #loc192])
#loc441 = loc(fused[#loc270, #loc271])
module @"/workspaces/juliet-c/testcases/CWE122_Heap_Based_Buffer_Overflow/s06/CWE122_Heap_Based_Buffer_Overflow__CWE135_21.c" attributes {cir.lang = #cir.lang<c>, cir.sob = #cir.signed_overflow_behavior<undefined>, cir.triple = "x86_64-unknown-linux-gnu", cir.type_size_info = #cir.type_size_info<char = 8, int = 32, size_t = 64>, cir.uwtable = #cir.uwtable<async>, dlti.dl_spec = #dlti.dl_spec<!llvm.ptr<271> = dense<32> : vector<4xi64>, i128 = dense<128> : vector<2xi64>, f16 = dense<16> : vector<2xi64>, f64 = dense<64> : vector<2xi64>, i64 = dense<64> : vector<2xi64>, f128 = dense<128> : vector<2xi64>, !llvm.ptr<272> = dense<64> : vector<4xi64>, i1 = dense<8> : vector<2xi64>, !llvm.ptr = dense<64> : vector<4xi64>, !llvm.ptr<270> = dense<32> : vector<4xi64>, f80 = dense<128> : vector<2xi64>, i32 = dense<32> : vector<2xi64>, i16 = dense<16> : vector<2xi64>, i8 = dense<8> : vector<2xi64>, "dlti.endianness" = "little", "dlti.mangling_mode" = "e", "dlti.stack_alignment" = 128 : i64>} {
  cir.func private @malloc(!u64i) -> !cir.ptr<!void> extra(#fn_attr) loc(#loc343)
  cir.func private @exit(!s32i) extra(#fn_attr) loc(#loc344)
  cir.func private @wmemset(!cir.ptr<!s32i>, !s32i, !u64i) -> !cir.ptr<!s32i> extra(#fn_attr) loc(#loc345)
  cir.global "private" internal dsolocal @badStatic = #cir.int<0> : !s32i {alignment = 4 : i64} loc(#loc346)
  cir.func private @strlen(!cir.ptr<!s8i>) -> !u64i extra(#fn_attr) loc(#loc347)
  cir.func private @calloc(!u64i, !u64i) -> !cir.ptr<!void> extra(#fn_attr) loc(#loc348)
  cir.func private @wcscpy(!cir.ptr<!s32i>, !cir.ptr<!s32i>) -> !cir.ptr<!s32i> extra(#fn_attr) loc(#loc349)
  cir.func private @printLine(!cir.ptr<!s8i>) loc(#loc350)
  cir.func private @free(!cir.ptr<!void>) extra(#fn_attr) loc(#loc351)
  cir.func internal private @badSink(%arg0: !cir.ptr<!void> loc(fused[#loc21, #loc22])) extra(#fn_attr1) {
    %0 = cir.alloca !cir.ptr<!void>, !cir.ptr<!cir.ptr<!void>>, ["data", init] {alignment = 8 : i64} loc(#loc353)
    cir.store %arg0, %0 : !cir.ptr<!void>, !cir.ptr<!cir.ptr<!void>> loc(#loc23)
    cir.scope {
      %1 = cir.get_global @badStatic : !cir.ptr<!s32i> loc(#loc346)
      %2 = cir.load %1 : !cir.ptr<!s32i>, !s32i loc(#loc26)
      %3 = cir.cast(int_to_bool, %2 : !s32i), !cir.bool loc(#loc26)
      cir.if %3 {
        cir.scope {
          %4 = cir.alloca !u64i, !cir.ptr<!u64i>, ["dataLen", init] {alignment = 8 : i64} loc(#loc357)
          %5 = cir.alloca !cir.ptr<!void>, !cir.ptr<!cir.ptr<!void>>, ["dest", init] {alignment = 8 : i64} loc(#loc358)
          %6 = cir.get_global @strlen : !cir.ptr<!cir.func<(!cir.ptr<!s8i>) -> !u64i>> loc(#loc34)
          %7 = cir.load %0 : !cir.ptr<!cir.ptr<!void>>, !cir.ptr<!void> loc(#loc35)
          %8 = cir.cast(bitcast, %7 : !cir.ptr<!void>), !cir.ptr<!s8i> loc(#loc35)
          %9 = cir.call @strlen(%8) : (!cir.ptr<!s8i>) -> !u64i side_effect(pure) extra(#fn_attr) loc(#loc34)
          cir.store %9, %4 : !u64i, !cir.ptr<!u64i> loc(#loc357)
          %10 = cir.get_global @calloc : !cir.ptr<!cir.func<(!u64i, !u64i) -> !cir.ptr<!void>>> loc(#loc36)
          %11 = cir.load %4 : !cir.ptr<!u64i>, !u64i loc(#loc37)
          %12 = cir.const #cir.int<1> : !s32i loc(#loc38)
          %13 = cir.cast(integral, %12 : !s32i), !u64i loc(#loc38)
          %14 = cir.binop(add, %11, %13) : !u64i loc(#loc359)
          %15 = cir.const #cir.int<4> : !u64i loc(#loc360)
          %16 = cir.call @calloc(%14, %15) : (!u64i, !u64i) -> !cir.ptr<!void> extra(#fn_attr) loc(#loc36)
          cir.store %16, %5 : !cir.ptr<!void>, !cir.ptr<!cir.ptr<!void>> loc(#loc358)
          cir.scope {
            %26 = cir.load %5 : !cir.ptr<!cir.ptr<!void>>, !cir.ptr<!void> loc(#loc43)
            %27 = cir.const #cir.ptr<null> : !cir.ptr<!void> loc(#loc44)
            %28 = cir.cmp(eq, %26, %27) : !cir.ptr<!void>, !cir.bool loc(#loc362)
            cir.if %28 {
              %29 = cir.get_global @exit : !cir.ptr<!cir.func<(!s32i)>> loc(#loc46)
              %30 = cir.const #cir.int<1> : !s32i loc(#loc47)
              %31 = cir.unary(minus, %30) nsw : !s32i, !s32i loc(#loc48)
              cir.call @exit(%31) : (!s32i) -> () extra(#fn_attr) loc(#loc46)
            } loc(#loc363)
          } loc(#loc361)
          %17 = cir.load %5 : !cir.ptr<!cir.ptr<!void>>, !cir.ptr<!void> loc(#loc49)
          %18 = cir.cast(bitcast, %17 : !cir.ptr<!void>), !cir.ptr<!s32i> loc(#loc49)
          %19 = cir.load %0 : !cir.ptr<!cir.ptr<!void>>, !cir.ptr<!void> loc(#loc50)
          %20 = cir.cast(bitcast, %19 : !cir.ptr<!void>), !cir.ptr<!s32i> loc(#loc50)
          %21 = cir.call @wcscpy(%18, %20) : (!cir.ptr<!s32i>, !cir.ptr<!s32i>) -> !cir.ptr<!s32i> extra(#fn_attr) loc(#loc51)
          %22 = cir.load %5 : !cir.ptr<!cir.ptr<!void>>, !cir.ptr<!void> loc(#loc52)
          %23 = cir.cast(bitcast, %22 : !cir.ptr<!void>), !cir.ptr<!s8i> loc(#loc52)
          cir.call @printLine(%23) : (!cir.ptr<!s8i>) -> () loc(#loc53)
          %24 = cir.get_global @free : !cir.ptr<!cir.func<(!cir.ptr<!void>)>> loc(#loc54)
          %25 = cir.load %5 : !cir.ptr<!cir.ptr<!void>>, !cir.ptr<!void> loc(#loc55)
          cir.call @free(%25) : (!cir.ptr<!void>) -> () extra(#fn_attr) loc(#loc54)
        } loc(#loc356)
      } loc(#loc355)
    } loc(#loc354)
    cir.return loc(#loc20)
  } loc(#loc352)
  cir.func no_proto @CWE122_Heap_Based_Buffer_Overflow__CWE135_21_bad() extra(#fn_attr1) {
    %0 = cir.alloca !cir.ptr<!void>, !cir.ptr<!cir.ptr<!void>>, ["data"] {alignment = 8 : i64} loc(#loc365)
    %1 = cir.const #cir.ptr<null> : !cir.ptr<!void> loc(#loc60)
    cir.store %1, %0 : !cir.ptr<!void>, !cir.ptr<!cir.ptr<!void>> loc(#loc366)
    cir.scope {
      %5 = cir.alloca !cir.ptr<!s32i>, !cir.ptr<!cir.ptr<!s32i>>, ["dataBadBuffer", init] {alignment = 8 : i64} loc(#loc368)
      %6 = cir.get_global @malloc : !cir.ptr<!cir.func<(!u64i) -> !cir.ptr<!void>>> loc(#loc66)
      %7 = cir.const #cir.int<50> : !s32i loc(#loc67)
      %8 = cir.cast(integral, %7 : !s32i), !u64i loc(#loc67)
      %9 = cir.const #cir.int<4> : !u64i loc(#loc369)
      %10 = cir.binop(mul, %8, %9) : !u64i loc(#loc370)
      %11 = cir.call @malloc(%10) : (!u64i) -> !cir.ptr<!void> extra(#fn_attr) loc(#loc66)
      %12 = cir.cast(bitcast, %11 : !cir.ptr<!void>), !cir.ptr<!s32i> loc(#loc371)
      cir.store %12, %5 : !cir.ptr<!s32i>, !cir.ptr<!cir.ptr<!s32i>> loc(#loc368)
      cir.scope {
        %28 = cir.load %5 : !cir.ptr<!cir.ptr<!s32i>>, !cir.ptr<!s32i> loc(#loc72)
        %29 = cir.const #cir.ptr<null> : !cir.ptr<!void> loc(#loc73)
        %30 = cir.cast(bitcast, %29 : !cir.ptr<!void>), !cir.ptr<!s32i> loc(#loc73)
        %31 = cir.cmp(eq, %28, %30) : !cir.ptr<!s32i>, !cir.bool loc(#loc373)
        cir.if %31 {
          %32 = cir.get_global @exit : !cir.ptr<!cir.func<(!s32i)>> loc(#loc75)
          %33 = cir.const #cir.int<1> : !s32i loc(#loc76)
          %34 = cir.unary(minus, %33) nsw : !s32i, !s32i loc(#loc77)
          cir.call @exit(%34) : (!s32i) -> () extra(#fn_attr) loc(#loc75)
        } loc(#loc374)
      } loc(#loc372)
      %13 = cir.load %5 : !cir.ptr<!cir.ptr<!s32i>>, !cir.ptr<!s32i> loc(#loc78)
      %14 = cir.const #cir.int<65> : !s32i loc(#loc79)
      %15 = cir.const #cir.int<50> : !s32i loc(#loc80)
      %16 = cir.const #cir.int<1> : !s32i loc(#loc81)
      %17 = cir.binop(sub, %15, %16) nsw : !s32i loc(#loc80)
      %18 = cir.cast(integral, %17 : !s32i), !u64i loc(#loc80)
      %19 = cir.call @wmemset(%13, %14, %18) : (!cir.ptr<!s32i>, !s32i, !u64i) -> !cir.ptr<!s32i> extra(#fn_attr) loc(#loc82)
      %20 = cir.const #cir.int<0> : !s32i loc(#loc83)
      %21 = cir.load %5 : !cir.ptr<!cir.ptr<!s32i>>, !cir.ptr<!s32i> loc(#loc84)
      %22 = cir.const #cir.int<50> : !s32i loc(#loc85)
      %23 = cir.const #cir.int<1> : !s32i loc(#loc86)
      %24 = cir.binop(sub, %22, %23) nsw : !s32i loc(#loc85)
      %25 = cir.ptr_stride(%21 : !cir.ptr<!s32i>, %24 : !s32i), !cir.ptr<!s32i> loc(#loc87)
      cir.store %20, %25 : !s32i, !cir.ptr<!s32i> loc(#loc375)
      %26 = cir.load %5 : !cir.ptr<!cir.ptr<!s32i>>, !cir.ptr<!s32i> loc(#loc88)
      %27 = cir.cast(bitcast, %26 : !cir.ptr<!s32i>), !cir.ptr<!void> loc(#loc88)
      cir.store %27, %0 : !cir.ptr<!void>, !cir.ptr<!cir.ptr<!void>> loc(#loc376)
    } loc(#loc367)
    %2 = cir.const #cir.int<1> : !s32i loc(#loc90)
    %3 = cir.get_global @badStatic : !cir.ptr<!s32i> loc(#loc346)
    cir.store %2, %3 : !s32i, !cir.ptr<!s32i> loc(#loc377)
    %4 = cir.load %0 : !cir.ptr<!cir.ptr<!void>>, !cir.ptr<!void> loc(#loc92)
    cir.call @badSink(%4) : (!cir.ptr<!void>) -> () loc(#loc93)
    cir.return loc(#loc57)
  } loc(#loc364)
  cir.func no_proto @CWE122_Heap_Based_Buffer_Overflow__CWE135_21_good() extra(#fn_attr1) {
    %0 = cir.get_global @goodB2G1 : !cir.ptr<!cir.func<()>> loc(#loc379)
    cir.call %0() : (!cir.ptr<!cir.func<()>>) -> () loc(#loc96)
    %1 = cir.get_global @goodB2G2 : !cir.ptr<!cir.func<()>> loc(#loc380)
    cir.call %1() : (!cir.ptr<!cir.func<()>>) -> () loc(#loc98)
    %2 = cir.get_global @goodG2B : !cir.ptr<!cir.func<()>> loc(#loc381)
    cir.call %2() : (!cir.ptr<!cir.func<()>>) -> () loc(#loc100)
    cir.return loc(#loc95)
  } loc(#loc378)
  cir.global "private" internal dsolocal @goodB2G1Static = #cir.int<0> : !s32i {alignment = 4 : i64} loc(#loc382)
  cir.global "private" constant cir_private dsolocal @".str" = #cir.const_array<"Benign, fixed string\00" : !cir.array<!s8i x 21>> : !cir.array<!s8i x 21> {alignment = 1 : i64} loc(#loc104)
  cir.func private @wcslen(!cir.ptr<!s32i>) -> !u64i extra(#fn_attr) loc(#loc383)
  cir.func private @printWLine(!cir.ptr<!s32i>) loc(#loc384)
  cir.func internal private @goodB2G1Sink(%arg0: !cir.ptr<!void> loc(fused[#loc111, #loc112])) extra(#fn_attr1) {
    %0 = cir.alloca !cir.ptr<!void>, !cir.ptr<!cir.ptr<!void>>, ["data", init] {alignment = 8 : i64} loc(#loc386)
    cir.store %arg0, %0 : !cir.ptr<!void>, !cir.ptr<!cir.ptr<!void>> loc(#loc113)
    cir.scope {
      %1 = cir.get_global @goodB2G1Static : !cir.ptr<!s32i> loc(#loc382)
      %2 = cir.load %1 : !cir.ptr<!s32i>, !s32i loc(#loc116)
      %3 = cir.cast(int_to_bool, %2 : !s32i), !cir.bool loc(#loc116)
      cir.if %3 {
        %4 = cir.get_global @".str" : !cir.ptr<!cir.array<!s8i x 21>> loc(#loc104)
        %5 = cir.cast(array_to_ptrdecay, %4 : !cir.ptr<!cir.array<!s8i x 21>>), !cir.ptr<!s8i> loc(#loc104)
        cir.call @printLine(%5) : (!cir.ptr<!s8i>) -> () loc(#loc120)
      } else {
        cir.scope {
          %4 = cir.alloca !u64i, !cir.ptr<!u64i>, ["dataLen", init] {alignment = 8 : i64} loc(#loc390)
          %5 = cir.alloca !cir.ptr<!void>, !cir.ptr<!cir.ptr<!void>>, ["dest", init] {alignment = 8 : i64} loc(#loc391)
          %6 = cir.get_global @wcslen : !cir.ptr<!cir.func<(!cir.ptr<!s32i>) -> !u64i>> loc(#loc127)
          %7 = cir.load %0 : !cir.ptr<!cir.ptr<!void>>, !cir.ptr<!void> loc(#loc128)
          %8 = cir.cast(bitcast, %7 : !cir.ptr<!void>), !cir.ptr<!s32i> loc(#loc128)
          %9 = cir.call @wcslen(%8) : (!cir.ptr<!s32i>) -> !u64i side_effect(pure) extra(#fn_attr) loc(#loc127)
          cir.store %9, %4 : !u64i, !cir.ptr<!u64i> loc(#loc390)
          %10 = cir.get_global @calloc : !cir.ptr<!cir.func<(!u64i, !u64i) -> !cir.ptr<!void>>> loc(#loc129)
          %11 = cir.load %4 : !cir.ptr<!u64i>, !u64i loc(#loc130)
          %12 = cir.const #cir.int<1> : !s32i loc(#loc131)
          %13 = cir.cast(integral, %12 : !s32i), !u64i loc(#loc131)
          %14 = cir.binop(add, %11, %13) : !u64i loc(#loc392)
          %15 = cir.const #cir.int<4> : !u64i loc(#loc393)
          %16 = cir.call @calloc(%14, %15) : (!u64i, !u64i) -> !cir.ptr<!void> extra(#fn_attr) loc(#loc129)
          cir.store %16, %5 : !cir.ptr<!void>, !cir.ptr<!cir.ptr<!void>> loc(#loc391)
          cir.scope {
            %26 = cir.load %5 : !cir.ptr<!cir.ptr<!void>>, !cir.ptr<!void> loc(#loc136)
            %27 = cir.const #cir.ptr<null> : !cir.ptr<!void> loc(#loc137)
            %28 = cir.cmp(eq, %26, %27) : !cir.ptr<!void>, !cir.bool loc(#loc395)
            cir.if %28 {
              %29 = cir.get_global @exit : !cir.ptr<!cir.func<(!s32i)>> loc(#loc139)
              %30 = cir.const #cir.int<1> : !s32i loc(#loc140)
              %31 = cir.unary(minus, %30) nsw : !s32i, !s32i loc(#loc141)
              cir.call @exit(%31) : (!s32i) -> () extra(#fn_attr) loc(#loc139)
            } loc(#loc396)
          } loc(#loc394)
          %17 = cir.load %5 : !cir.ptr<!cir.ptr<!void>>, !cir.ptr<!void> loc(#loc142)
          %18 = cir.cast(bitcast, %17 : !cir.ptr<!void>), !cir.ptr<!s32i> loc(#loc142)
          %19 = cir.load %0 : !cir.ptr<!cir.ptr<!void>>, !cir.ptr<!void> loc(#loc143)
          %20 = cir.cast(bitcast, %19 : !cir.ptr<!void>), !cir.ptr<!s32i> loc(#loc143)
          %21 = cir.call @wcscpy(%18, %20) : (!cir.ptr<!s32i>, !cir.ptr<!s32i>) -> !cir.ptr<!s32i> extra(#fn_attr) loc(#loc144)
          %22 = cir.load %5 : !cir.ptr<!cir.ptr<!void>>, !cir.ptr<!void> loc(#loc145)
          %23 = cir.cast(bitcast, %22 : !cir.ptr<!void>), !cir.ptr<!s32i> loc(#loc145)
          cir.call @printWLine(%23) : (!cir.ptr<!s32i>) -> () loc(#loc146)
          %24 = cir.get_global @free : !cir.ptr<!cir.func<(!cir.ptr<!void>)>> loc(#loc147)
          %25 = cir.load %5 : !cir.ptr<!cir.ptr<!void>>, !cir.ptr<!void> loc(#loc148)
          cir.call @free(%25) : (!cir.ptr<!void>) -> () extra(#fn_attr) loc(#loc147)
        } loc(#loc389)
      } loc(#loc388)
    } loc(#loc387)
    cir.return loc(#loc110)
  } loc(#loc385)
  cir.func no_proto internal private @goodB2G1() extra(#fn_attr1) {
    %0 = cir.alloca !cir.ptr<!void>, !cir.ptr<!cir.ptr<!void>>, ["data"] {alignment = 8 : i64} loc(#loc398)
    %1 = cir.const #cir.ptr<null> : !cir.ptr<!void> loc(#loc153)
    cir.store %1, %0 : !cir.ptr<!void>, !cir.ptr<!cir.ptr<!void>> loc(#loc399)
    cir.scope {
      %5 = cir.alloca !cir.ptr<!s32i>, !cir.ptr<!cir.ptr<!s32i>>, ["dataBadBuffer", init] {alignment = 8 : i64} loc(#loc401)
      %6 = cir.get_global @malloc : !cir.ptr<!cir.func<(!u64i) -> !cir.ptr<!void>>> loc(#loc159)
      %7 = cir.const #cir.int<50> : !s32i loc(#loc160)
      %8 = cir.cast(integral, %7 : !s32i), !u64i loc(#loc160)
      %9 = cir.const #cir.int<4> : !u64i loc(#loc402)
      %10 = cir.binop(mul, %8, %9) : !u64i loc(#loc403)
      %11 = cir.call @malloc(%10) : (!u64i) -> !cir.ptr<!void> extra(#fn_attr) loc(#loc159)
      %12 = cir.cast(bitcast, %11 : !cir.ptr<!void>), !cir.ptr<!s32i> loc(#loc404)
      cir.store %12, %5 : !cir.ptr<!s32i>, !cir.ptr<!cir.ptr<!s32i>> loc(#loc401)
      cir.scope {
        %28 = cir.load %5 : !cir.ptr<!cir.ptr<!s32i>>, !cir.ptr<!s32i> loc(#loc165)
        %29 = cir.const #cir.ptr<null> : !cir.ptr<!void> loc(#loc166)
        %30 = cir.cast(bitcast, %29 : !cir.ptr<!void>), !cir.ptr<!s32i> loc(#loc166)
        %31 = cir.cmp(eq, %28, %30) : !cir.ptr<!s32i>, !cir.bool loc(#loc406)
        cir.if %31 {
          %32 = cir.get_global @exit : !cir.ptr<!cir.func<(!s32i)>> loc(#loc168)
          %33 = cir.const #cir.int<1> : !s32i loc(#loc169)
          %34 = cir.unary(minus, %33) nsw : !s32i, !s32i loc(#loc170)
          cir.call @exit(%34) : (!s32i) -> () extra(#fn_attr) loc(#loc168)
        } loc(#loc407)
      } loc(#loc405)
      %13 = cir.load %5 : !cir.ptr<!cir.ptr<!s32i>>, !cir.ptr<!s32i> loc(#loc171)
      %14 = cir.const #cir.int<65> : !s32i loc(#loc172)
      %15 = cir.const #cir.int<50> : !s32i loc(#loc173)
      %16 = cir.const #cir.int<1> : !s32i loc(#loc174)
      %17 = cir.binop(sub, %15, %16) nsw : !s32i loc(#loc173)
      %18 = cir.cast(integral, %17 : !s32i), !u64i loc(#loc173)
      %19 = cir.call @wmemset(%13, %14, %18) : (!cir.ptr<!s32i>, !s32i, !u64i) -> !cir.ptr<!s32i> extra(#fn_attr) loc(#loc175)
      %20 = cir.const #cir.int<0> : !s32i loc(#loc176)
      %21 = cir.load %5 : !cir.ptr<!cir.ptr<!s32i>>, !cir.ptr<!s32i> loc(#loc177)
      %22 = cir.const #cir.int<50> : !s32i loc(#loc178)
      %23 = cir.const #cir.int<1> : !s32i loc(#loc179)
      %24 = cir.binop(sub, %22, %23) nsw : !s32i loc(#loc178)
      %25 = cir.ptr_stride(%21 : !cir.ptr<!s32i>, %24 : !s32i), !cir.ptr<!s32i> loc(#loc180)
      cir.store %20, %25 : !s32i, !cir.ptr<!s32i> loc(#loc408)
      %26 = cir.load %5 : !cir.ptr<!cir.ptr<!s32i>>, !cir.ptr<!s32i> loc(#loc181)
      %27 = cir.cast(bitcast, %26 : !cir.ptr<!s32i>), !cir.ptr<!void> loc(#loc181)
      cir.store %27, %0 : !cir.ptr<!void>, !cir.ptr<!cir.ptr<!void>> loc(#loc409)
    } loc(#loc400)
    %2 = cir.const #cir.int<0> : !s32i loc(#loc183)
    %3 = cir.get_global @goodB2G1Static : !cir.ptr<!s32i> loc(#loc382)
    cir.store %2, %3 : !s32i, !cir.ptr<!s32i> loc(#loc410)
    %4 = cir.load %0 : !cir.ptr<!cir.ptr<!void>>, !cir.ptr<!void> loc(#loc185)
    cir.call @goodB2G1Sink(%4) : (!cir.ptr<!void>) -> () loc(#loc186)
    cir.return loc(#loc150)
  } loc(#loc397)
  cir.global "private" internal dsolocal @goodB2G2Static = #cir.int<0> : !s32i {alignment = 4 : i64} loc(#loc411)
  cir.func internal private @goodB2G2Sink(%arg0: !cir.ptr<!void> loc(fused[#loc191, #loc192])) extra(#fn_attr1) {
    %0 = cir.alloca !cir.ptr<!void>, !cir.ptr<!cir.ptr<!void>>, ["data", init] {alignment = 8 : i64} loc(#loc413)
    cir.store %arg0, %0 : !cir.ptr<!void>, !cir.ptr<!cir.ptr<!void>> loc(#loc193)
    cir.scope {
      %1 = cir.get_global @goodB2G2Static : !cir.ptr<!s32i> loc(#loc411)
      %2 = cir.load %1 : !cir.ptr<!s32i>, !s32i loc(#loc196)
      %3 = cir.cast(int_to_bool, %2 : !s32i), !cir.bool loc(#loc196)
      cir.if %3 {
        cir.scope {
          %4 = cir.alloca !u64i, !cir.ptr<!u64i>, ["dataLen", init] {alignment = 8 : i64} loc(#loc417)
          %5 = cir.alloca !cir.ptr<!void>, !cir.ptr<!cir.ptr<!void>>, ["dest", init] {alignment = 8 : i64} loc(#loc418)
          %6 = cir.get_global @wcslen : !cir.ptr<!cir.func<(!cir.ptr<!s32i>) -> !u64i>> loc(#loc204)
          %7 = cir.load %0 : !cir.ptr<!cir.ptr<!void>>, !cir.ptr<!void> loc(#loc205)
          %8 = cir.cast(bitcast, %7 : !cir.ptr<!void>), !cir.ptr<!s32i> loc(#loc205)
          %9 = cir.call @wcslen(%8) : (!cir.ptr<!s32i>) -> !u64i side_effect(pure) extra(#fn_attr) loc(#loc204)
          cir.store %9, %4 : !u64i, !cir.ptr<!u64i> loc(#loc417)
          %10 = cir.get_global @calloc : !cir.ptr<!cir.func<(!u64i, !u64i) -> !cir.ptr<!void>>> loc(#loc206)
          %11 = cir.load %4 : !cir.ptr<!u64i>, !u64i loc(#loc207)
          %12 = cir.const #cir.int<1> : !s32i loc(#loc208)
          %13 = cir.cast(integral, %12 : !s32i), !u64i loc(#loc208)
          %14 = cir.binop(add, %11, %13) : !u64i loc(#loc419)
          %15 = cir.const #cir.int<4> : !u64i loc(#loc420)
          %16 = cir.call @calloc(%14, %15) : (!u64i, !u64i) -> !cir.ptr<!void> extra(#fn_attr) loc(#loc206)
          cir.store %16, %5 : !cir.ptr<!void>, !cir.ptr<!cir.ptr<!void>> loc(#loc418)
          cir.scope {
            %26 = cir.load %5 : !cir.ptr<!cir.ptr<!void>>, !cir.ptr<!void> loc(#loc213)
            %27 = cir.const #cir.ptr<null> : !cir.ptr<!void> loc(#loc214)
            %28 = cir.cmp(eq, %26, %27) : !cir.ptr<!void>, !cir.bool loc(#loc422)
            cir.if %28 {
              %29 = cir.get_global @exit : !cir.ptr<!cir.func<(!s32i)>> loc(#loc216)
              %30 = cir.const #cir.int<1> : !s32i loc(#loc217)
              %31 = cir.unary(minus, %30) nsw : !s32i, !s32i loc(#loc218)
              cir.call @exit(%31) : (!s32i) -> () extra(#fn_attr) loc(#loc216)
            } loc(#loc423)
          } loc(#loc421)
          %17 = cir.load %5 : !cir.ptr<!cir.ptr<!void>>, !cir.ptr<!void> loc(#loc219)
          %18 = cir.cast(bitcast, %17 : !cir.ptr<!void>), !cir.ptr<!s32i> loc(#loc219)
          %19 = cir.load %0 : !cir.ptr<!cir.ptr<!void>>, !cir.ptr<!void> loc(#loc220)
          %20 = cir.cast(bitcast, %19 : !cir.ptr<!void>), !cir.ptr<!s32i> loc(#loc220)
          %21 = cir.call @wcscpy(%18, %20) : (!cir.ptr<!s32i>, !cir.ptr<!s32i>) -> !cir.ptr<!s32i> extra(#fn_attr) loc(#loc221)
          %22 = cir.load %5 : !cir.ptr<!cir.ptr<!void>>, !cir.ptr<!void> loc(#loc222)
          %23 = cir.cast(bitcast, %22 : !cir.ptr<!void>), !cir.ptr<!s32i> loc(#loc222)
          cir.call @printWLine(%23) : (!cir.ptr<!s32i>) -> () loc(#loc223)
          %24 = cir.get_global @free : !cir.ptr<!cir.func<(!cir.ptr<!void>)>> loc(#loc224)
          %25 = cir.load %5 : !cir.ptr<!cir.ptr<!void>>, !cir.ptr<!void> loc(#loc225)
          cir.call @free(%25) : (!cir.ptr<!void>) -> () extra(#fn_attr) loc(#loc224)
        } loc(#loc416)
      } loc(#loc415)
    } loc(#loc414)
    cir.return loc(#loc190)
  } loc(#loc412)
  cir.func no_proto internal private @goodB2G2() extra(#fn_attr1) {
    %0 = cir.alloca !cir.ptr<!void>, !cir.ptr<!cir.ptr<!void>>, ["data"] {alignment = 8 : i64} loc(#loc425)
    %1 = cir.const #cir.ptr<null> : !cir.ptr<!void> loc(#loc230)
    cir.store %1, %0 : !cir.ptr<!void>, !cir.ptr<!cir.ptr<!void>> loc(#loc426)
    cir.scope {
      %5 = cir.alloca !cir.ptr<!s32i>, !cir.ptr<!cir.ptr<!s32i>>, ["dataBadBuffer", init] {alignment = 8 : i64} loc(#loc428)
      %6 = cir.get_global @malloc : !cir.ptr<!cir.func<(!u64i) -> !cir.ptr<!void>>> loc(#loc236)
      %7 = cir.const #cir.int<50> : !s32i loc(#loc237)
      %8 = cir.cast(integral, %7 : !s32i), !u64i loc(#loc237)
      %9 = cir.const #cir.int<4> : !u64i loc(#loc429)
      %10 = cir.binop(mul, %8, %9) : !u64i loc(#loc430)
      %11 = cir.call @malloc(%10) : (!u64i) -> !cir.ptr<!void> extra(#fn_attr) loc(#loc236)
      %12 = cir.cast(bitcast, %11 : !cir.ptr<!void>), !cir.ptr<!s32i> loc(#loc431)
      cir.store %12, %5 : !cir.ptr<!s32i>, !cir.ptr<!cir.ptr<!s32i>> loc(#loc428)
      cir.scope {
        %28 = cir.load %5 : !cir.ptr<!cir.ptr<!s32i>>, !cir.ptr<!s32i> loc(#loc242)
        %29 = cir.const #cir.ptr<null> : !cir.ptr<!void> loc(#loc243)
        %30 = cir.cast(bitcast, %29 : !cir.ptr<!void>), !cir.ptr<!s32i> loc(#loc243)
        %31 = cir.cmp(eq, %28, %30) : !cir.ptr<!s32i>, !cir.bool loc(#loc433)
        cir.if %31 {
          %32 = cir.get_global @exit : !cir.ptr<!cir.func<(!s32i)>> loc(#loc245)
          %33 = cir.const #cir.int<1> : !s32i loc(#loc246)
          %34 = cir.unary(minus, %33) nsw : !s32i, !s32i loc(#loc247)
          cir.call @exit(%34) : (!s32i) -> () extra(#fn_attr) loc(#loc245)
        } loc(#loc434)
      } loc(#loc432)
      %13 = cir.load %5 : !cir.ptr<!cir.ptr<!s32i>>, !cir.ptr<!s32i> loc(#loc248)
      %14 = cir.const #cir.int<65> : !s32i loc(#loc249)
      %15 = cir.const #cir.int<50> : !s32i loc(#loc250)
      %16 = cir.const #cir.int<1> : !s32i loc(#loc251)
      %17 = cir.binop(sub, %15, %16) nsw : !s32i loc(#loc250)
      %18 = cir.cast(integral, %17 : !s32i), !u64i loc(#loc250)
      %19 = cir.call @wmemset(%13, %14, %18) : (!cir.ptr<!s32i>, !s32i, !u64i) -> !cir.ptr<!s32i> extra(#fn_attr) loc(#loc252)
      %20 = cir.const #cir.int<0> : !s32i loc(#loc253)
      %21 = cir.load %5 : !cir.ptr<!cir.ptr<!s32i>>, !cir.ptr<!s32i> loc(#loc254)
      %22 = cir.const #cir.int<50> : !s32i loc(#loc255)
      %23 = cir.const #cir.int<1> : !s32i loc(#loc256)
      %24 = cir.binop(sub, %22, %23) nsw : !s32i loc(#loc255)
      %25 = cir.ptr_stride(%21 : !cir.ptr<!s32i>, %24 : !s32i), !cir.ptr<!s32i> loc(#loc257)
      cir.store %20, %25 : !s32i, !cir.ptr<!s32i> loc(#loc435)
      %26 = cir.load %5 : !cir.ptr<!cir.ptr<!s32i>>, !cir.ptr<!s32i> loc(#loc258)
      %27 = cir.cast(bitcast, %26 : !cir.ptr<!s32i>), !cir.ptr<!void> loc(#loc258)
      cir.store %27, %0 : !cir.ptr<!void>, !cir.ptr<!cir.ptr<!void>> loc(#loc436)
    } loc(#loc427)
    %2 = cir.const #cir.int<1> : !s32i loc(#loc260)
    %3 = cir.get_global @goodB2G2Static : !cir.ptr<!s32i> loc(#loc411)
    cir.store %2, %3 : !s32i, !cir.ptr<!s32i> loc(#loc437)
    %4 = cir.load %0 : !cir.ptr<!cir.ptr<!void>>, !cir.ptr<!void> loc(#loc262)
    cir.call @goodB2G2Sink(%4) : (!cir.ptr<!void>) -> () loc(#loc263)
    cir.return loc(#loc227)
  } loc(#loc424)
  cir.global "private" internal dsolocal @goodG2BStatic = #cir.int<0> : !s32i {alignment = 4 : i64} loc(#loc438)
  cir.func private @strcpy(!cir.ptr<!s8i>, !cir.ptr<!s8i>) -> !cir.ptr<!s8i> extra(#fn_attr) loc(#loc439)
  cir.func internal private @goodG2BSink(%arg0: !cir.ptr<!void> loc(fused[#loc270, #loc271])) extra(#fn_attr1) {
    %0 = cir.alloca !cir.ptr<!void>, !cir.ptr<!cir.ptr<!void>>, ["data", init] {alignment = 8 : i64} loc(#loc441)
    cir.store %arg0, %0 : !cir.ptr<!void>, !cir.ptr<!cir.ptr<!void>> loc(#loc272)
    cir.scope {
      %1 = cir.get_global @goodG2BStatic : !cir.ptr<!s32i> loc(#loc438)
      %2 = cir.load %1 : !cir.ptr<!s32i>, !s32i loc(#loc275)
      %3 = cir.cast(int_to_bool, %2 : !s32i), !cir.bool loc(#loc275)
      cir.if %3 {
        cir.scope {
          %4 = cir.alloca !u64i, !cir.ptr<!u64i>, ["dataLen", init] {alignment = 8 : i64} loc(#loc445)
          %5 = cir.alloca !cir.ptr<!void>, !cir.ptr<!cir.ptr<!void>>, ["dest", init] {alignment = 8 : i64} loc(#loc446)
          %6 = cir.get_global @strlen : !cir.ptr<!cir.func<(!cir.ptr<!s8i>) -> !u64i>> loc(#loc283)
          %7 = cir.load %0 : !cir.ptr<!cir.ptr<!void>>, !cir.ptr<!void> loc(#loc284)
          %8 = cir.cast(bitcast, %7 : !cir.ptr<!void>), !cir.ptr<!s8i> loc(#loc284)
          %9 = cir.call @strlen(%8) : (!cir.ptr<!s8i>) -> !u64i side_effect(pure) extra(#fn_attr) loc(#loc283)
          cir.store %9, %4 : !u64i, !cir.ptr<!u64i> loc(#loc445)
          %10 = cir.get_global @calloc : !cir.ptr<!cir.func<(!u64i, !u64i) -> !cir.ptr<!void>>> loc(#loc285)
          %11 = cir.load %4 : !cir.ptr<!u64i>, !u64i loc(#loc286)
          %12 = cir.const #cir.int<1> : !s32i loc(#loc287)
          %13 = cir.cast(integral, %12 : !s32i), !u64i loc(#loc287)
          %14 = cir.binop(add, %11, %13) : !u64i loc(#loc447)
          %15 = cir.const #cir.int<1> : !s32i loc(#loc288)
          %16 = cir.cast(integral, %15 : !s32i), !u64i loc(#loc288)
          %17 = cir.call @calloc(%14, %16) : (!u64i, !u64i) -> !cir.ptr<!void> extra(#fn_attr) loc(#loc285)
          cir.store %17, %5 : !cir.ptr<!void>, !cir.ptr<!cir.ptr<!void>> loc(#loc446)
          cir.scope {
            %28 = cir.load %5 : !cir.ptr<!cir.ptr<!void>>, !cir.ptr<!void> loc(#loc291)
            %29 = cir.const #cir.ptr<null> : !cir.ptr<!void> loc(#loc292)
            %30 = cir.cmp(eq, %28, %29) : !cir.ptr<!void>, !cir.bool loc(#loc449)
            cir.if %30 {
              %31 = cir.get_global @exit : !cir.ptr<!cir.func<(!s32i)>> loc(#loc294)
              %32 = cir.const #cir.int<1> : !s32i loc(#loc295)
              %33 = cir.unary(minus, %32) nsw : !s32i, !s32i loc(#loc296)
              cir.call @exit(%33) : (!s32i) -> () extra(#fn_attr) loc(#loc294)
            } loc(#loc450)
          } loc(#loc448)
          %18 = cir.get_global @strcpy : !cir.ptr<!cir.func<(!cir.ptr<!s8i>, !cir.ptr<!s8i>) -> !cir.ptr<!s8i>>> loc(#loc297)
          %19 = cir.load %5 : !cir.ptr<!cir.ptr<!void>>, !cir.ptr<!void> loc(#loc298)
          %20 = cir.cast(bitcast, %19 : !cir.ptr<!void>), !cir.ptr<!s8i> loc(#loc298)
          %21 = cir.load %0 : !cir.ptr<!cir.ptr<!void>>, !cir.ptr<!void> loc(#loc299)
          %22 = cir.cast(bitcast, %21 : !cir.ptr<!void>), !cir.ptr<!s8i> loc(#loc299)
          %23 = cir.call @strcpy(%20, %22) : (!cir.ptr<!s8i>, !cir.ptr<!s8i>) -> !cir.ptr<!s8i> extra(#fn_attr) loc(#loc297)
          %24 = cir.load %5 : !cir.ptr<!cir.ptr<!void>>, !cir.ptr<!void> loc(#loc300)
          %25 = cir.cast(bitcast, %24 : !cir.ptr<!void>), !cir.ptr<!s8i> loc(#loc300)
          cir.call @printLine(%25) : (!cir.ptr<!s8i>) -> () loc(#loc301)
          %26 = cir.get_global @free : !cir.ptr<!cir.func<(!cir.ptr<!void>)>> loc(#loc302)
          %27 = cir.load %5 : !cir.ptr<!cir.ptr<!void>>, !cir.ptr<!void> loc(#loc303)
          cir.call @free(%27) : (!cir.ptr<!void>) -> () extra(#fn_attr) loc(#loc302)
        } loc(#loc444)
      } loc(#loc443)
    } loc(#loc442)
    cir.return loc(#loc269)
  } loc(#loc440)
  cir.func no_proto internal private @goodG2B() extra(#fn_attr1) {
    %0 = cir.alloca !cir.ptr<!void>, !cir.ptr<!cir.ptr<!void>>, ["data"] {alignment = 8 : i64} loc(#loc452)
    %1 = cir.const #cir.ptr<null> : !cir.ptr<!void> loc(#loc308)
    cir.store %1, %0 : !cir.ptr<!void>, !cir.ptr<!cir.ptr<!void>> loc(#loc453)
    cir.scope {
      %5 = cir.alloca !cir.ptr<!s8i>, !cir.ptr<!cir.ptr<!s8i>>, ["dataGoodBuffer", init] {alignment = 8 : i64} loc(#loc455)
      %6 = cir.get_global @malloc : !cir.ptr<!cir.func<(!u64i) -> !cir.ptr<!void>>> loc(#loc314)
      %7 = cir.const #cir.int<50> : !s32i loc(#loc315)
      %8 = cir.cast(integral, %7 : !s32i), !u64i loc(#loc315)
      %9 = cir.const #cir.int<1> : !u64i loc(#loc456)
      %10 = cir.binop(mul, %8, %9) : !u64i loc(#loc457)
      %11 = cir.call @malloc(%10) : (!u64i) -> !cir.ptr<!void> extra(#fn_attr) loc(#loc314)
      %12 = cir.cast(bitcast, %11 : !cir.ptr<!void>), !cir.ptr<!s8i> loc(#loc458)
      cir.store %12, %5 : !cir.ptr<!s8i>, !cir.ptr<!cir.ptr<!s8i>> loc(#loc455)
      cir.scope {
        %29 = cir.load %5 : !cir.ptr<!cir.ptr<!s8i>>, !cir.ptr<!s8i> loc(#loc320)
        %30 = cir.const #cir.ptr<null> : !cir.ptr<!void> loc(#loc321)
        %31 = cir.cast(bitcast, %30 : !cir.ptr<!void>), !cir.ptr<!s8i> loc(#loc321)
        %32 = cir.cmp(eq, %29, %31) : !cir.ptr<!s8i>, !cir.bool loc(#loc460)
        cir.if %32 {
          %33 = cir.get_global @exit : !cir.ptr<!cir.func<(!s32i)>> loc(#loc323)
          %34 = cir.const #cir.int<1> : !s32i loc(#loc324)
          %35 = cir.unary(minus, %34) nsw : !s32i, !s32i loc(#loc325)
          cir.call @exit(%35) : (!s32i) -> () extra(#fn_attr) loc(#loc323)
        } loc(#loc461)
      } loc(#loc459)
      %13 = cir.load %5 : !cir.ptr<!cir.ptr<!s8i>>, !cir.ptr<!s8i> loc(#loc326)
      %14 = cir.cast(bitcast, %13 : !cir.ptr<!s8i>), !cir.ptr<!void> loc(#loc326)
      %15 = cir.const #cir.int<65> : !s32i loc(#loc327)
      %16 = cir.const #cir.int<50> : !s32i loc(#loc328)
      %17 = cir.const #cir.int<1> : !s32i loc(#loc329)
      %18 = cir.binop(sub, %16, %17) nsw : !s32i loc(#loc328)
      %19 = cir.cast(integral, %18 : !s32i), !u64i loc(#loc328)
      cir.libc.memset %19 bytes from %14 set to %15 : !cir.ptr<!void>, !s32i, !u64i loc(#loc462)
      %20 = cir.const #cir.int<0> : !s32i loc(#loc332)
      %21 = cir.cast(integral, %20 : !s32i), !s8i loc(#loc332)
      %22 = cir.load %5 : !cir.ptr<!cir.ptr<!s8i>>, !cir.ptr<!s8i> loc(#loc333)
      %23 = cir.const #cir.int<50> : !s32i loc(#loc334)
      %24 = cir.const #cir.int<1> : !s32i loc(#loc335)
      %25 = cir.binop(sub, %23, %24) nsw : !s32i loc(#loc334)
      %26 = cir.ptr_stride(%22 : !cir.ptr<!s8i>, %25 : !s32i), !cir.ptr<!s8i> loc(#loc336)
      cir.store %21, %26 : !s8i, !cir.ptr<!s8i> loc(#loc463)
      %27 = cir.load %5 : !cir.ptr<!cir.ptr<!s8i>>, !cir.ptr<!s8i> loc(#loc337)
      %28 = cir.cast(bitcast, %27 : !cir.ptr<!s8i>), !cir.ptr<!void> loc(#loc337)
      cir.store %28, %0 : !cir.ptr<!void>, !cir.ptr<!cir.ptr<!void>> loc(#loc464)
    } loc(#loc454)
    %2 = cir.const #cir.int<1> : !s32i loc(#loc339)
    %3 = cir.get_global @goodG2BStatic : !cir.ptr<!s32i> loc(#loc438)
    cir.store %2, %3 : !s32i, !cir.ptr<!s32i> loc(#loc465)
    %4 = cir.load %0 : !cir.ptr<!cir.ptr<!void>>, !cir.ptr<!void> loc(#loc341)
    cir.call @goodG2BSink(%4) : (!cir.ptr<!void>) -> () loc(#loc342)
    cir.return loc(#loc305)
  } loc(#loc451)
} loc(#loc)
#loc = loc("/workspaces/juliet-c/testcases/CWE122_Heap_Based_Buffer_Overflow/s06/CWE122_Heap_Based_Buffer_Overflow__CWE135_21.c":0:0)
#loc1 = loc("/usr/include/stdlib.h":672:1)
#loc2 = loc("/usr/include/stdlib.h":672:45)
#loc3 = loc("/usr/include/stdlib.h":756:1)
#loc4 = loc("/usr/include/stdlib.h":756:70)
#loc5 = loc("/usr/include/wchar.h":296:1)
#loc6 = loc("/usr/include/wchar.h":296:65)
#loc7 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE135_21.c":25:1)
#loc8 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE135_21.c":25:24)
#loc9 = loc("/usr/include/string.h":407:1)
#loc10 = loc("/usr/include/string.h":408:33)
#loc11 = loc("/usr/include/stdlib.h":675:1)
#loc12 = loc("/usr/include/stdlib.h":676:14)
#loc13 = loc("/usr/include/wchar.h":98:1)
#loc14 = loc("/usr/include/wchar.h":100:14)
#loc15 = loc("../../../testcasesupport/std_testcase_io.h":14:1)
#loc16 = loc("../../../testcasesupport/std_testcase_io.h":14:33)
#loc17 = loc("/usr/include/stdlib.h":687:1)
#loc18 = loc("/usr/include/stdlib.h":687:32)
#loc19 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE135_21.c":27:1)
#loc20 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE135_21.c":41:1)
#loc23 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE135_21.c":28:1)
#loc24 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE135_21.c":29:5)
#loc25 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE135_21.c":40:5)
#loc26 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE135_21.c":29:8)
#loc27 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE135_21.c":30:5)
#loc28 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE135_21.c":31:9)
#loc29 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE135_21.c":39:9)
#loc30 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE135_21.c":33:13)
#loc31 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE135_21.c":33:49)
#loc32 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE135_21.c":34:13)
#loc33 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE135_21.c":34:68)
#loc34 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE135_21.c":33:30)
#loc35 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE135_21.c":33:45)
#loc36 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE135_21.c":34:35)
#loc37 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE135_21.c":34:42)
#loc38 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE135_21.c":34:50)
#loc39 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE135_21.c":34:53)
#loc40 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE135_21.c":34:67)
#loc41 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE135_21.c":35:13)
#loc42 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE135_21.c":35:41)
#loc43 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE135_21.c":35:17)
#loc44 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE135_21.c":35:25)
#loc45 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE135_21.c":35:31)
#loc46 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE135_21.c":35:32)
#loc47 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE135_21.c":35:38)
#loc48 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE135_21.c":35:37)
#loc49 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE135_21.c":36:26)
#loc50 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE135_21.c":36:32)
#loc51 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE135_21.c":36:19)
#loc52 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE135_21.c":37:31)
#loc53 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE135_21.c":37:13)
#loc54 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE135_21.c":38:13)
#loc55 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE135_21.c":38:18)
#loc56 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE135_21.c":43:1)
#loc57 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE135_21.c":57:1)
#loc58 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE135_21.c":45:5)
#loc59 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE135_21.c":45:12)
#loc60 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE135_21.c":46:12)
#loc61 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE135_21.c":46:5)
#loc62 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE135_21.c":47:5)
#loc63 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE135_21.c":54:5)
#loc64 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE135_21.c":48:9)
#loc65 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE135_21.c":48:71)
#loc66 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE135_21.c":48:46)
#loc67 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE135_21.c":48:53)
#loc68 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE135_21.c":48:56)
#loc69 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE135_21.c":48:70)
#loc70 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE135_21.c":49:9)
#loc71 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE135_21.c":49:46)
#loc72 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE135_21.c":49:13)
#loc73 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE135_21.c":49:30)
#loc74 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE135_21.c":49:36)
#loc75 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE135_21.c":49:37)
#loc76 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE135_21.c":49:43)
#loc77 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE135_21.c":49:42)
#loc78 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE135_21.c":50:17)
#loc79 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE135_21.c":50:32)
#loc80 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE135_21.c":50:38)
#loc81 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE135_21.c":50:41)
#loc82 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE135_21.c":50:9)
#loc83 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE135_21.c":51:31)
#loc84 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE135_21.c":51:9)
#loc85 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE135_21.c":51:23)
#loc86 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE135_21.c":51:26)
#loc87 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE135_21.c":51:27)
#loc88 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE135_21.c":53:24)
#loc89 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE135_21.c":53:9)
#loc90 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE135_21.c":55:17)
#loc91 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE135_21.c":55:5)
#loc92 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE135_21.c":56:13)
#loc93 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE135_21.c":56:5)
#loc94 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE135_21.c":172:1)
#loc95 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE135_21.c":177:1)
#loc96 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE135_21.c":174:5)
#loc97 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE135_21.c":174:14)
#loc98 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE135_21.c":175:5)
#loc99 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE135_21.c":175:14)
#loc100 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE135_21.c":176:5)
#loc101 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE135_21.c":176:13)
#loc102 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE135_21.c":64:1)
#loc103 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE135_21.c":64:29)
#loc104 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE135_21.c":74:19)
#loc105 = loc("/usr/include/wchar.h":247:1)
#loc106 = loc("/usr/include/wchar.h":247:51)
#loc107 = loc("../../../testcasesupport/std_testcase_io.h":16:1)
#loc108 = loc("../../../testcasesupport/std_testcase_io.h":16:37)
#loc109 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE135_21.c":69:1)
#loc110 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE135_21.c":88:1)
#loc113 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE135_21.c":70:1)
#loc114 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE135_21.c":71:5)
#loc115 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE135_21.c":87:5)
#loc116 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE135_21.c":71:8)
#loc117 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE135_21.c":72:5)
#loc118 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE135_21.c":75:5)
#loc119 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE135_21.c":77:5)
#loc120 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE135_21.c":74:9)
#loc121 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE135_21.c":78:9)
#loc122 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE135_21.c":86:9)
#loc123 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE135_21.c":80:13)
#loc124 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE135_21.c":80:52)
#loc125 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE135_21.c":81:13)
#loc126 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE135_21.c":81:68)
#loc127 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE135_21.c":80:30)
#loc128 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE135_21.c":80:48)
#loc129 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE135_21.c":81:35)
#loc130 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE135_21.c":81:42)
#loc131 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE135_21.c":81:50)
#loc132 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE135_21.c":81:53)
#loc133 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE135_21.c":81:67)
#loc134 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE135_21.c":82:13)
#loc135 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE135_21.c":82:41)
#loc136 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE135_21.c":82:17)
#loc137 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE135_21.c":82:25)
#loc138 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE135_21.c":82:31)
#loc139 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE135_21.c":82:32)
#loc140 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE135_21.c":82:38)
#loc141 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE135_21.c":82:37)
#loc142 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE135_21.c":83:26)
#loc143 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE135_21.c":83:32)
#loc144 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE135_21.c":83:19)
#loc145 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE135_21.c":84:35)
#loc146 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE135_21.c":84:13)
#loc147 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE135_21.c":85:13)
#loc148 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE135_21.c":85:18)
#loc149 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE135_21.c":90:1)
#loc150 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE135_21.c":104:1)
#loc151 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE135_21.c":92:5)
#loc152 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE135_21.c":92:12)
#loc153 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE135_21.c":93:12)
#loc154 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE135_21.c":93:5)
#loc155 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE135_21.c":94:5)
#loc156 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE135_21.c":101:5)
#loc157 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE135_21.c":95:9)
#loc158 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE135_21.c":95:71)
#loc159 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE135_21.c":95:46)
#loc160 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE135_21.c":95:53)
#loc161 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE135_21.c":95:56)
#loc162 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE135_21.c":95:70)
#loc163 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE135_21.c":96:9)
#loc164 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE135_21.c":96:46)
#loc165 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE135_21.c":96:13)
#loc166 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE135_21.c":96:30)
#loc167 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE135_21.c":96:36)
#loc168 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE135_21.c":96:37)
#loc169 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE135_21.c":96:43)
#loc170 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE135_21.c":96:42)
#loc171 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE135_21.c":97:17)
#loc172 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE135_21.c":97:32)
#loc173 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE135_21.c":97:38)
#loc174 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE135_21.c":97:41)
#loc175 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE135_21.c":97:9)
#loc176 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE135_21.c":98:31)
#loc177 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE135_21.c":98:9)
#loc178 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE135_21.c":98:23)
#loc179 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE135_21.c":98:26)
#loc180 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE135_21.c":98:27)
#loc181 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE135_21.c":100:24)
#loc182 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE135_21.c":100:9)
#loc183 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE135_21.c":102:22)
#loc184 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE135_21.c":102:5)
#loc185 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE135_21.c":103:18)
#loc186 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE135_21.c":103:5)
#loc187 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE135_21.c":65:1)
#loc188 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE135_21.c":65:29)
#loc189 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE135_21.c":107:1)
#loc190 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE135_21.c":121:1)
#loc193 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE135_21.c":108:1)
#loc194 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE135_21.c":109:5)
#loc195 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE135_21.c":120:5)
#loc196 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE135_21.c":109:8)
#loc197 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE135_21.c":110:5)
#loc198 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE135_21.c":111:9)
#loc199 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE135_21.c":119:9)
#loc200 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE135_21.c":113:13)
#loc201 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE135_21.c":113:52)
#loc202 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE135_21.c":114:13)
#loc203 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE135_21.c":114:68)
#loc204 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE135_21.c":113:30)
#loc205 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE135_21.c":113:48)
#loc206 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE135_21.c":114:35)
#loc207 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE135_21.c":114:42)
#loc208 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE135_21.c":114:50)
#loc209 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE135_21.c":114:53)
#loc210 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE135_21.c":114:67)
#loc211 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE135_21.c":115:13)
#loc212 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE135_21.c":115:41)
#loc213 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE135_21.c":115:17)
#loc214 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE135_21.c":115:25)
#loc215 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE135_21.c":115:31)
#loc216 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE135_21.c":115:32)
#loc217 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE135_21.c":115:38)
#loc218 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE135_21.c":115:37)
#loc219 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE135_21.c":116:26)
#loc220 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE135_21.c":116:32)
#loc221 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE135_21.c":116:19)
#loc222 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE135_21.c":117:35)
#loc223 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE135_21.c":117:13)
#loc224 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE135_21.c":118:13)
#loc225 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE135_21.c":118:18)
#loc226 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE135_21.c":123:1)
#loc227 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE135_21.c":137:1)
#loc228 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE135_21.c":125:5)
#loc229 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE135_21.c":125:12)
#loc230 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE135_21.c":126:12)
#loc231 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE135_21.c":126:5)
#loc232 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE135_21.c":127:5)
#loc233 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE135_21.c":134:5)
#loc234 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE135_21.c":128:9)
#loc235 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE135_21.c":128:71)
#loc236 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE135_21.c":128:46)
#loc237 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE135_21.c":128:53)
#loc238 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE135_21.c":128:56)
#loc239 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE135_21.c":128:70)
#loc240 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE135_21.c":129:9)
#loc241 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE135_21.c":129:46)
#loc242 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE135_21.c":129:13)
#loc243 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE135_21.c":129:30)
#loc244 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE135_21.c":129:36)
#loc245 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE135_21.c":129:37)
#loc246 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE135_21.c":129:43)
#loc247 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE135_21.c":129:42)
#loc248 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE135_21.c":130:17)
#loc249 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE135_21.c":130:32)
#loc250 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE135_21.c":130:38)
#loc251 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE135_21.c":130:41)
#loc252 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE135_21.c":130:9)
#loc253 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE135_21.c":131:31)
#loc254 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE135_21.c":131:9)
#loc255 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE135_21.c":131:23)
#loc256 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE135_21.c":131:26)
#loc257 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE135_21.c":131:27)
#loc258 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE135_21.c":133:24)
#loc259 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE135_21.c":133:9)
#loc260 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE135_21.c":135:22)
#loc261 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE135_21.c":135:5)
#loc262 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE135_21.c":136:18)
#loc263 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE135_21.c":136:5)
#loc264 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE135_21.c":66:1)
#loc265 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE135_21.c":66:28)
#loc266 = loc("/usr/include/string.h":141:1)
#loc267 = loc("/usr/include/string.h":142:14)
#loc268 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE135_21.c":140:1)
#loc269 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE135_21.c":154:1)
#loc272 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE135_21.c":141:1)
#loc273 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE135_21.c":142:5)
#loc274 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE135_21.c":153:5)
#loc275 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE135_21.c":142:8)
#loc276 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE135_21.c":143:5)
#loc277 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE135_21.c":144:9)
#loc278 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE135_21.c":152:9)
#loc279 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE135_21.c":146:13)
#loc280 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE135_21.c":146:49)
#loc281 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE135_21.c":147:13)
#loc282 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE135_21.c":147:54)
#loc283 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE135_21.c":146:30)
#loc284 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE135_21.c":146:45)
#loc285 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE135_21.c":147:35)
#loc286 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE135_21.c":147:42)
#loc287 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE135_21.c":147:50)
#loc288 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE135_21.c":147:53)
#loc289 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE135_21.c":148:13)
#loc290 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE135_21.c":148:41)
#loc291 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE135_21.c":148:17)
#loc292 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE135_21.c":148:25)
#loc293 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE135_21.c":148:31)
#loc294 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE135_21.c":148:32)
#loc295 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE135_21.c":148:38)
#loc296 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE135_21.c":148:37)
#loc297 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE135_21.c":149:19)
#loc298 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE135_21.c":149:26)
#loc299 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE135_21.c":149:32)
#loc300 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE135_21.c":150:31)
#loc301 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE135_21.c":150:13)
#loc302 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE135_21.c":151:13)
#loc303 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE135_21.c":151:18)
#loc304 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE135_21.c":156:1)
#loc305 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE135_21.c":170:1)
#loc306 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE135_21.c":158:5)
#loc307 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE135_21.c":158:12)
#loc308 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE135_21.c":159:12)
#loc309 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE135_21.c":159:5)
#loc310 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE135_21.c":160:5)
#loc311 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE135_21.c":167:5)
#loc312 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE135_21.c":161:9)
#loc313 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE135_21.c":161:63)
#loc314 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE135_21.c":161:41)
#loc315 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE135_21.c":161:48)
#loc316 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE135_21.c":161:51)
#loc317 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE135_21.c":161:62)
#loc318 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE135_21.c":162:9)
#loc319 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE135_21.c":162:47)
#loc320 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE135_21.c":162:13)
#loc321 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE135_21.c":162:31)
#loc322 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE135_21.c":162:37)
#loc323 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE135_21.c":162:38)
#loc324 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE135_21.c":162:44)
#loc325 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE135_21.c":162:43)
#loc326 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE135_21.c":163:16)
#loc327 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE135_21.c":163:32)
#loc328 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE135_21.c":163:37)
#loc329 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE135_21.c":163:40)
#loc330 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE135_21.c":163:9)
#loc331 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE135_21.c":163:41)
#loc332 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE135_21.c":164:32)
#loc333 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE135_21.c":164:9)
#loc334 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE135_21.c":164:24)
#loc335 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE135_21.c":164:27)
#loc336 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE135_21.c":164:28)
#loc337 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE135_21.c":166:24)
#loc338 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE135_21.c":166:9)
#loc339 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE135_21.c":168:21)
#loc340 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE135_21.c":168:5)
#loc341 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE135_21.c":169:17)
#loc342 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE135_21.c":169:5)
#loc343 = loc(fused[#loc1, #loc2])
#loc344 = loc(fused[#loc3, #loc4])
#loc345 = loc(fused[#loc5, #loc6])
#loc346 = loc(fused[#loc7, #loc8])
#loc347 = loc(fused[#loc9, #loc10])
#loc348 = loc(fused[#loc11, #loc12])
#loc349 = loc(fused[#loc13, #loc14])
#loc350 = loc(fused[#loc15, #loc16])
#loc351 = loc(fused[#loc17, #loc18])
#loc352 = loc(fused[#loc19, #loc20])
#loc354 = loc(fused[#loc24, #loc25])
#loc355 = loc(fused[#loc27, #loc25])
#loc356 = loc(fused[#loc28, #loc29])
#loc357 = loc(fused[#loc30, #loc31])
#loc358 = loc(fused[#loc32, #loc33])
#loc359 = loc(fused[#loc37, #loc38])
#loc360 = loc(fused[#loc39, #loc40])
#loc361 = loc(fused[#loc41, #loc42])
#loc362 = loc(fused[#loc43, #loc44])
#loc363 = loc(fused[#loc45, #loc42])
#loc364 = loc(fused[#loc56, #loc57])
#loc365 = loc(fused[#loc58, #loc59])
#loc366 = loc(fused[#loc61, #loc60])
#loc367 = loc(fused[#loc62, #loc63])
#loc368 = loc(fused[#loc64, #loc65])
#loc369 = loc(fused[#loc68, #loc69])
#loc370 = loc(fused[#loc67, #loc69])
#loc371 = loc(fused[#loc66, #loc65])
#loc372 = loc(fused[#loc70, #loc71])
#loc373 = loc(fused[#loc72, #loc73])
#loc374 = loc(fused[#loc74, #loc71])
#loc375 = loc(fused[#loc84, #loc83])
#loc376 = loc(fused[#loc89, #loc88])
#loc377 = loc(fused[#loc91, #loc90])
#loc378 = loc(fused[#loc94, #loc95])
#loc379 = loc(fused[#loc96, #loc97])
#loc380 = loc(fused[#loc98, #loc99])
#loc381 = loc(fused[#loc100, #loc101])
#loc382 = loc(fused[#loc102, #loc103])
#loc383 = loc(fused[#loc105, #loc106])
#loc384 = loc(fused[#loc107, #loc108])
#loc385 = loc(fused[#loc109, #loc110])
#loc387 = loc(fused[#loc114, #loc115])
#loc388 = loc(fused[#loc117, #loc118, #loc119, #loc115])
#loc389 = loc(fused[#loc121, #loc122])
#loc390 = loc(fused[#loc123, #loc124])
#loc391 = loc(fused[#loc125, #loc126])
#loc392 = loc(fused[#loc130, #loc131])
#loc393 = loc(fused[#loc132, #loc133])
#loc394 = loc(fused[#loc134, #loc135])
#loc395 = loc(fused[#loc136, #loc137])
#loc396 = loc(fused[#loc138, #loc135])
#loc397 = loc(fused[#loc149, #loc150])
#loc398 = loc(fused[#loc151, #loc152])
#loc399 = loc(fused[#loc154, #loc153])
#loc400 = loc(fused[#loc155, #loc156])
#loc401 = loc(fused[#loc157, #loc158])
#loc402 = loc(fused[#loc161, #loc162])
#loc403 = loc(fused[#loc160, #loc162])
#loc404 = loc(fused[#loc159, #loc158])
#loc405 = loc(fused[#loc163, #loc164])
#loc406 = loc(fused[#loc165, #loc166])
#loc407 = loc(fused[#loc167, #loc164])
#loc408 = loc(fused[#loc177, #loc176])
#loc409 = loc(fused[#loc182, #loc181])
#loc410 = loc(fused[#loc184, #loc183])
#loc411 = loc(fused[#loc187, #loc188])
#loc412 = loc(fused[#loc189, #loc190])
#loc414 = loc(fused[#loc194, #loc195])
#loc415 = loc(fused[#loc197, #loc195])
#loc416 = loc(fused[#loc198, #loc199])
#loc417 = loc(fused[#loc200, #loc201])
#loc418 = loc(fused[#loc202, #loc203])
#loc419 = loc(fused[#loc207, #loc208])
#loc420 = loc(fused[#loc209, #loc210])
#loc421 = loc(fused[#loc211, #loc212])
#loc422 = loc(fused[#loc213, #loc214])
#loc423 = loc(fused[#loc215, #loc212])
#loc424 = loc(fused[#loc226, #loc227])
#loc425 = loc(fused[#loc228, #loc229])
#loc426 = loc(fused[#loc231, #loc230])
#loc427 = loc(fused[#loc232, #loc233])
#loc428 = loc(fused[#loc234, #loc235])
#loc429 = loc(fused[#loc238, #loc239])
#loc430 = loc(fused[#loc237, #loc239])
#loc431 = loc(fused[#loc236, #loc235])
#loc432 = loc(fused[#loc240, #loc241])
#loc433 = loc(fused[#loc242, #loc243])
#loc434 = loc(fused[#loc244, #loc241])
#loc435 = loc(fused[#loc254, #loc253])
#loc436 = loc(fused[#loc259, #loc258])
#loc437 = loc(fused[#loc261, #loc260])
#loc438 = loc(fused[#loc264, #loc265])
#loc439 = loc(fused[#loc266, #loc267])
#loc440 = loc(fused[#loc268, #loc269])
#loc442 = loc(fused[#loc273, #loc274])
#loc443 = loc(fused[#loc276, #loc274])
#loc444 = loc(fused[#loc277, #loc278])
#loc445 = loc(fused[#loc279, #loc280])
#loc446 = loc(fused[#loc281, #loc282])
#loc447 = loc(fused[#loc286, #loc287])
#loc448 = loc(fused[#loc289, #loc290])
#loc449 = loc(fused[#loc291, #loc292])
#loc450 = loc(fused[#loc293, #loc290])
#loc451 = loc(fused[#loc304, #loc305])
#loc452 = loc(fused[#loc306, #loc307])
#loc453 = loc(fused[#loc309, #loc308])
#loc454 = loc(fused[#loc310, #loc311])
#loc455 = loc(fused[#loc312, #loc313])
#loc456 = loc(fused[#loc316, #loc317])
#loc457 = loc(fused[#loc315, #loc317])
#loc458 = loc(fused[#loc314, #loc313])
#loc459 = loc(fused[#loc318, #loc319])
#loc460 = loc(fused[#loc320, #loc321])
#loc461 = loc(fused[#loc322, #loc319])
#loc462 = loc(fused[#loc330, #loc331])
#loc463 = loc(fused[#loc333, #loc332])
#loc464 = loc(fused[#loc338, #loc337])
#loc465 = loc(fused[#loc340, #loc339])
