clang: warning: argument unused during compilation: '-c' [-Wunused-command-line-argument]
warning: unknown warning option '-Wno-terminate' [-Wunknown-warning-option]
clang: /workspaces/clangir/clang/lib/CIR/CodeGen/CIRGenExprCXX.cpp:635: mlir::Value emitCXXNewAllocSize(CIRGenFunction &, const CXXNewExpr *, unsigned int, mlir::Value &, mlir::Value &): Assertion `numElementsWidth == sizeWidth && "Expected a size_t array size constant"' failed.
PLEASE submit a bug report to https://github.com/llvm/llvm-project/issues/ and include the crash backtrace, preprocessed source, and associated run script.
Stack dump:
0.	Program arguments: /workspaces/clangir/install/bin/clang -S -Xclang -emit-cir -std=c++11 -Wno-terminate -std=c++11 -I ../../../testcasesupport -c CWE122_Heap_Based_Buffer_Overflow__cpp_CWE129_fscanf_05.cpp -o /workspaces/juliet-c/testcases/CWE122_Heap_Based_Buffer_Overflow/s01/.CWE122_Heap_Based_Buffer_Overflow__cpp_CWE129_fscanf_05.o.cir
1.	<eof> parser at end of file
2.	CWE122_Heap_Based_Buffer_Overflow__cpp_CWE129_fscanf_05.cpp:26:11: LLVM IR generation of declaration 'CWE122_Heap_Based_Buffer_Overflow__cpp_CWE129_fscanf_05'
Stack dump without symbol names (ensure you have llvm-symbolizer in your PATH or set the environment var `LLVM_SYMBOLIZER_PATH` to point to it):
0  clang     0x0000558660859b68 llvm::sys::PrintStackTrace(llvm::raw_ostream&, int) + 40
1  clang     0x000055866085773e llvm::sys::RunSignalHandlers() + 238
2  clang     0x00005586607c8946
3  libc.so.6 0x00007fe4c4c45330
4  libc.so.6 0x00007fe4c4c9eb2c pthread_kill + 284
5  libc.so.6 0x00007fe4c4c4527e gsignal + 30
6  libc.so.6 0x00007fe4c4c288ff abort + 223
7  libc.so.6 0x00007fe4c4c2881b
8  libc.so.6 0x00007fe4c4c3b517
9  clang     0x0000558661ca24fc clang::CIRGen::CIRGenFunction::emitCXXNewExpr(clang::CXXNewExpr const*) + 12028
10 clang     0x0000558661ca5d1f clang::CIRGen::CIRGenFunction::emitScalarExpr(clang::Expr const*) + 63
11 clang     0x0000558661c54844 clang::CIRGen::CIRGenFunction::emitExprAsInit(clang::Expr const*, clang::ValueDecl const*, clang::CIRGen::LValue, bool) + 516
12 clang     0x0000558661c53e4e clang::CIRGen::CIRGenFunction::emitAutoVarInit(clang::CIRGen::CIRGenFunction::AutoVarEmission const&) + 990
13 clang     0x0000558661c551a8 clang::CIRGen::CIRGenFunction::emitVarDecl(clang::VarDecl const&) + 328
14 clang     0x0000558661c56d97 clang::CIRGen::CIRGenFunction::emitDecl(clang::Decl const&) + 119
15 clang     0x0000558661cd8dcb clang::CIRGen::CIRGenFunction::emitSimpleStmt(clang::Stmt const*, bool) + 859
16 clang     0x0000558661cd84b0 clang::CIRGen::CIRGenFunction::emitStmt(clang::Stmt const*, bool, llvm::ArrayRef<clang::Attr const*>) + 16
17 clang     0x0000558661cd8284 clang::CIRGen::CIRGenFunction::emitCompoundStmtWithoutScope(clang::CompoundStmt const&, bool, clang::CIRGen::AggValueSlot) + 260
18 clang     0x0000558661cd8955 clang::CIRGen::CIRGenFunction::emitCompoundStmt(clang::CompoundStmt const&, bool, clang::CIRGen::AggValueSlot) + 453
19 clang     0x0000558661cd8d65 clang::CIRGen::CIRGenFunction::emitSimpleStmt(clang::Stmt const*, bool) + 757
20 clang     0x0000558661cd84b0 clang::CIRGen::CIRGenFunction::emitStmt(clang::Stmt const*, bool, llvm::ArrayRef<clang::Attr const*>) + 16
21 clang     0x0000558661cd8bd4 clang::CIRGen::CIRGenFunction::emitSimpleStmt(clang::Stmt const*, bool) + 356
22 clang     0x0000558661cd84b0 clang::CIRGen::CIRGenFunction::emitStmt(clang::Stmt const*, bool, llvm::ArrayRef<clang::Attr const*>) + 16
23 clang     0x0000558661c75a4b
24 clang     0x0000558662dc5888 cir::IfOp::build(mlir::OpBuilder&, mlir::OperationState&, mlir::Value, bool, llvm::function_ref<void (mlir::OpBuilder&, mlir::Location)>, llvm::function_ref<void (mlir::OpBuilder&, mlir::Location)>) + 152
25 clang     0x0000558661c6fa1a
26 clang     0x0000558661c6f595 clang::CIRGen::CIRGenFunction::emitIfOnBoolExpr(clang::Expr const*, llvm::function_ref<void (mlir::OpBuilder&, mlir::Location)>, mlir::Location, llvm::function_ref<void (mlir::OpBuilder&, mlir::Location)>, std::optional<mlir::Location>) + 245
27 clang     0x0000558661c6f47c clang::CIRGen::CIRGenFunction::emitIfOnBoolExpr(clang::Expr const*, clang::Stmt const*, clang::Stmt const*) + 396
28 clang     0x0000558661cdcada
29 clang     0x0000558662dc5e86 cir::ScopeOp::build(mlir::OpBuilder&, mlir::OperationState&, llvm::function_ref<void (mlir::OpBuilder&, mlir::Location)>) + 134
30 clang     0x0000558661cd8fce clang::CIRGen::CIRGenFunction::emitIfStmt(clang::IfStmt const&) + 286
31 clang     0x0000558661cd8587 clang::CIRGen::CIRGenFunction::emitStmt(clang::Stmt const*, bool, llvm::ArrayRef<clang::Attr const*>) + 231
32 clang     0x0000558661cd8284 clang::CIRGen::CIRGenFunction::emitCompoundStmtWithoutScope(clang::CompoundStmt const&, bool, clang::CIRGen::AggValueSlot) + 260
33 clang     0x0000558661cc281a clang::CIRGen::CIRGenFunction::generateCode(clang::GlobalDecl, cir::FuncOp, clang::CIRGen::CIRGenFunctionInfo const&) + 1514
34 clang     0x0000558661c15839 clang::CIRGen::CIRGenModule::emitGlobalFunctionDefinition(clang::GlobalDecl, mlir::Operation*) + 393
35 clang     0x0000558661c13968 clang::CIRGen::CIRGenModule::emitGlobal(clang::GlobalDecl) + 1656
36 clang     0x0000558661c1e28c clang::CIRGen::CIRGenModule::emitTopLevelDecl(clang::Decl*) + 236
37 clang     0x0000558661c1e16a clang::CIRGen::CIRGenModule::emitDeclContext(clang::DeclContext const*) + 58
38 clang     0x0000558661c104af cir::CIRGenerator::HandleTopLevelDecl(clang::DeclGroupRef) + 159
39 clang     0x0000558661b029e1
40 clang     0x0000558663c04ada clang::ParseAST(clang::Sema&, bool, bool) + 826
41 clang     0x000055866131fd36 clang::FrontendAction::Execute() + 38
42 clang     0x000055866128b3ad clang::CompilerInstance::ExecuteAction(clang::FrontendAction&) + 1149
43 clang     0x0000558661408edf clang::ExecuteCompilerInvocation(clang::CompilerInstance*) + 815
44 clang     0x000055865f62ba7a cc1_main(llvm::ArrayRef<char const*>, char const*, void*) + 6074
45 clang     0x000055865f62806d
46 clang     0x00005586610d2339
47 clang     0x00005586607c8686 llvm::CrashRecoveryContext::RunSafely(llvm::function_ref<void ()>) + 150
48 clang     0x00005586610d1892 clang::driver::CC1Command::Execute(llvm::ArrayRef<std::optional<llvm::StringRef>>, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char>>*, bool*) const + 242
49 clang     0x000055866108dc27 clang::driver::Compilation::ExecuteCommand(clang::driver::Command const&, clang::driver::Command const*&, bool) const + 455
50 clang     0x000055866108df17 clang::driver::Compilation::ExecuteJobs(clang::driver::JobList const&, llvm::SmallVectorImpl<std::pair<int, clang::driver::Command const*>>&, bool) const + 135
51 clang     0x00005586610ad928 clang::driver::Driver::ExecuteCompilation(clang::driver::Compilation&, llvm::SmallVectorImpl<std::pair<int, clang::driver::Command const*>>&) + 904
52 clang     0x000055865f6276ba clang_main(int, char**, llvm::ToolContext const&) + 6090
53 clang     0x000055865f637147 main + 87
54 libc.so.6 0x00007fe4c4c2a1ca
55 libc.so.6 0x00007fe4c4c2a28b __libc_start_main + 139
56 clang     0x000055865f625aa5 _start + 37
clang: error: clang frontend command failed with exit code 134 (use -v to see invocation)
clang version 21.0.0git (git@github.com:llvm/clangir.git 4e7a2236d38507e994cbe5b79c888cf86427e7db)
Target: x86_64-unknown-linux-gnu
Thread model: posix
InstalledDir: /workspaces/clangir/install/bin
Build config: +assertions
clang: error: unable to execute command: Aborted (core dumped)
clang: note: diagnostic msg: Error generating preprocessed source(s).
