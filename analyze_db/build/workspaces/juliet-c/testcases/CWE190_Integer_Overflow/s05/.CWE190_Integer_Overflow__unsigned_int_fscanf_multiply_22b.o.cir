!s32i = !cir.int<s, 32>
!s8i = !cir.int<s, 8>
!u32i = !cir.int<u, 32>
#fn_attr = #cir<extra({inline = #cir.inline<no>, nothrow = #cir.nothrow, optnone = #cir.optnone, uwtable = #cir.uwtable<async>})>
#loc7 = loc("CWE190_Integer_Overflow__unsigned_int_fscanf_multiply_22b.c":25:71)
#loc8 = loc("CWE190_Integer_Overflow__unsigned_int_fscanf_multiply_22b.c":25:84)
#loc32 = loc("CWE190_Integer_Overflow__unsigned_int_fscanf_multiply_22b.c":48:76)
#loc33 = loc("CWE190_Integer_Overflow__unsigned_int_fscanf_multiply_22b.c":48:89)
#loc66 = loc("CWE190_Integer_Overflow__unsigned_int_fscanf_multiply_22b.c":74:76)
#loc67 = loc("CWE190_Integer_Overflow__unsigned_int_fscanf_multiply_22b.c":74:89)
#loc98 = loc("CWE190_Integer_Overflow__unsigned_int_fscanf_multiply_22b.c":95:75)
#loc99 = loc("CWE190_Integer_Overflow__unsigned_int_fscanf_multiply_22b.c":95:88)
#loc118 = loc(fused[#loc7, #loc8])
#loc129 = loc(fused[#loc32, #loc33])
#loc143 = loc(fused[#loc66, #loc67])
#loc157 = loc(fused[#loc98, #loc99])
module @"/workspaces/juliet-c/testcases/CWE190_Integer_Overflow/s05/CWE190_Integer_Overflow__unsigned_int_fscanf_multiply_22b.c" attributes {cir.lang = #cir.lang<c>, cir.sob = #cir.signed_overflow_behavior<undefined>, cir.triple = "x86_64-unknown-linux-gnu", cir.type_size_info = #cir.type_size_info<char = 8, int = 32, size_t = 64>, cir.uwtable = #cir.uwtable<async>, dlti.dl_spec = #dlti.dl_spec<i128 = dense<128> : vector<2xi64>, i64 = dense<64> : vector<2xi64>, !llvm.ptr<271> = dense<32> : vector<4xi64>, !llvm.ptr<272> = dense<64> : vector<4xi64>, f128 = dense<128> : vector<2xi64>, f64 = dense<64> : vector<2xi64>, f16 = dense<16> : vector<2xi64>, i32 = dense<32> : vector<2xi64>, i16 = dense<16> : vector<2xi64>, i8 = dense<8> : vector<2xi64>, !llvm.ptr<270> = dense<32> : vector<4xi64>, i1 = dense<8> : vector<2xi64>, !llvm.ptr = dense<64> : vector<4xi64>, f80 = dense<128> : vector<2xi64>, "dlti.endianness" = "little", "dlti.mangling_mode" = "e", "dlti.stack_alignment" = 128 : i64>} {
  cir.global "private" external @CWE190_Integer_Overflow__unsigned_int_fscanf_multiply_22_badGlobal : !s32i {alignment = 4 : i64} loc(#loc115)
  cir.func private @printUnsignedLine(!u32i) loc(#loc116)
  cir.func @CWE190_Integer_Overflow__unsigned_int_fscanf_multiply_22_badSink(%arg0: !u32i loc(fused[#loc7, #loc8])) extra(#fn_attr) {
    %0 = cir.alloca !u32i, !cir.ptr<!u32i>, ["result", init] {alignment = 4 : i64} loc(#loc119)
    %1 = cir.alloca !u32i, !cir.ptr<!u32i>, ["data", init] {alignment = 4 : i64} loc(#loc118)
    cir.store %arg0, %1 : !u32i, !cir.ptr<!u32i> loc(#loc11)
    cir.br ^bb1 loc(#loc120)
  ^bb1:  // pred: ^bb0
    %2 = cir.get_global @CWE190_Integer_Overflow__unsigned_int_fscanf_multiply_22_badGlobal : !cir.ptr<!s32i> loc(#loc115)
    %3 = cir.load %2 : !cir.ptr<!s32i>, !s32i loc(#loc14)
    %4 = cir.cast(int_to_bool, %3 : !s32i), !cir.bool loc(#loc14)
    cir.brcond %4 ^bb2, ^bb7 loc(#loc121)
  ^bb2:  // pred: ^bb1
    cir.br ^bb3 loc(#loc122)
  ^bb3:  // pred: ^bb2
    %5 = cir.load %1 : !cir.ptr<!u32i>, !u32i loc(#loc18)
    %6 = cir.const #cir.int<0> : !s32i loc(#loc19)
    %7 = cir.cast(integral, %6 : !s32i), !u32i loc(#loc19)
    %8 = cir.cmp(gt, %5, %7) : !u32i, !cir.bool loc(#loc123)
    cir.brcond %8 ^bb4, ^bb5 loc(#loc124)
  ^bb4:  // pred: ^bb3
    %9 = cir.load %1 : !cir.ptr<!u32i>, !u32i loc(#loc21)
    %10 = cir.const #cir.int<2> : !s32i loc(#loc10)
    %11 = cir.cast(integral, %10 : !s32i), !u32i loc(#loc10)
    %12 = cir.binop(mul, %9, %11) : !u32i loc(#loc125)
    cir.store %12, %0 : !u32i, !cir.ptr<!u32i> loc(#loc119)
    %13 = cir.load %0 : !cir.ptr<!u32i>, !u32i loc(#loc22)
    cir.call @printUnsignedLine(%13) : (!u32i) -> () loc(#loc23)
    cir.br ^bb5 loc(#loc17)
  ^bb5:  // 2 preds: ^bb3, ^bb4
    cir.br ^bb6 loc(#loc17)
  ^bb6:  // pred: ^bb5
    cir.br ^bb7 loc(#loc13)
  ^bb7:  // 2 preds: ^bb1, ^bb6
    cir.br ^bb8 loc(#loc13)
  ^bb8:  // pred: ^bb7
    cir.return loc(#loc6)
  } loc(#loc117)
  cir.global "private" external @CWE190_Integer_Overflow__unsigned_int_fscanf_multiply_22_goodB2G1Global : !s32i {alignment = 4 : i64} loc(#loc126)
  cir.func private @printLine(!cir.ptr<!s8i>) loc(#loc127)
  cir.global "private" constant cir_private dsolocal @".str" = #cir.const_array<"Benign, fixed string\00" : !cir.array<!s8i x 21>> : !cir.array<!s8i x 21> {alignment = 1 : i64} loc(#loc28)
  cir.global "private" constant cir_private dsolocal @".str.1" = #cir.const_array<"data value is too large to perform arithmetic safely.\00" : !cir.array<!s8i x 54>> : !cir.array<!s8i x 54> {alignment = 1 : i64} loc(#loc29)
  cir.func @CWE190_Integer_Overflow__unsigned_int_fscanf_multiply_22_goodB2G1Sink(%arg0: !u32i loc(fused[#loc32, #loc33])) extra(#fn_attr) {
    %0 = cir.alloca !u32i, !cir.ptr<!u32i>, ["result", init] {alignment = 4 : i64} loc(#loc130)
    %1 = cir.alloca !u32i, !cir.ptr<!u32i>, ["data", init] {alignment = 4 : i64} loc(#loc129)
    cir.store %arg0, %1 : !u32i, !cir.ptr<!u32i> loc(#loc36)
    cir.br ^bb1 loc(#loc131)
  ^bb1:  // pred: ^bb0
    %2 = cir.get_global @CWE190_Integer_Overflow__unsigned_int_fscanf_multiply_22_goodB2G1Global : !cir.ptr<!s32i> loc(#loc126)
    %3 = cir.load %2 : !cir.ptr<!s32i>, !s32i loc(#loc39)
    %4 = cir.cast(int_to_bool, %3 : !s32i), !cir.bool loc(#loc39)
    cir.brcond %4 ^bb2, ^bb3 loc(#loc132)
  ^bb2:  // pred: ^bb1
    %5 = cir.get_global @".str" : !cir.ptr<!cir.array<!s8i x 21>> loc(#loc28)
    %6 = cir.cast(array_to_ptrdecay, %5 : !cir.ptr<!cir.array<!s8i x 21>>), !cir.ptr<!s8i> loc(#loc28)
    cir.call @printLine(%6) : (!cir.ptr<!s8i>) -> () loc(#loc43)
    cir.br ^bb13 loc(#loc41)
  ^bb3:  // pred: ^bb1
    cir.br ^bb4 loc(#loc133)
  ^bb4:  // pred: ^bb3
    %7 = cir.load %1 : !cir.ptr<!u32i>, !u32i loc(#loc46)
    %8 = cir.const #cir.int<0> : !s32i loc(#loc47)
    %9 = cir.cast(integral, %8 : !s32i), !u32i loc(#loc47)
    %10 = cir.cmp(gt, %7, %9) : !u32i, !cir.bool loc(#loc134)
    cir.brcond %10 ^bb5, ^bb11 loc(#loc135)
  ^bb5:  // pred: ^bb4
    cir.br ^bb6 loc(#loc136)
  ^bb6:  // pred: ^bb5
    %11 = cir.load %1 : !cir.ptr<!u32i>, !u32i loc(#loc51)
    %12 = cir.const #cir.int<2147483647> : !s32i loc(#loc52)
    %13 = cir.cast(integral, %12 : !s32i), !u32i loc(#loc52)
    %14 = cir.const #cir.int<2> : !u32i loc(#loc52)
    %15 = cir.binop(mul, %13, %14) : !u32i loc(#loc52)
    %16 = cir.const #cir.int<1> : !u32i loc(#loc52)
    %17 = cir.binop(add, %15, %16) : !u32i loc(#loc52)
    %18 = cir.const #cir.int<2> : !s32i loc(#loc53)
    %19 = cir.cast(integral, %18 : !s32i), !u32i loc(#loc53)
    %20 = cir.binop(div, %17, %19) : !u32i loc(#loc137)
    %21 = cir.cmp(lt, %11, %20) : !u32i, !cir.bool loc(#loc138)
    cir.brcond %21 ^bb7, ^bb8 loc(#loc139)
  ^bb7:  // pred: ^bb6
    %22 = cir.load %1 : !cir.ptr<!u32i>, !u32i loc(#loc58)
    %23 = cir.const #cir.int<2> : !s32i loc(#loc35)
    %24 = cir.cast(integral, %23 : !s32i), !u32i loc(#loc35)
    %25 = cir.binop(mul, %22, %24) : !u32i loc(#loc140)
    cir.store %25, %0 : !u32i, !cir.ptr<!u32i> loc(#loc130)
    %26 = cir.load %0 : !cir.ptr<!u32i>, !u32i loc(#loc59)
    cir.call @printUnsignedLine(%26) : (!u32i) -> () loc(#loc60)
    cir.br ^bb9 loc(#loc56)
  ^bb8:  // pred: ^bb6
    %27 = cir.get_global @".str.1" : !cir.ptr<!cir.array<!s8i x 54>> loc(#loc29)
    %28 = cir.cast(array_to_ptrdecay, %27 : !cir.ptr<!cir.array<!s8i x 54>>), !cir.ptr<!s8i> loc(#loc29)
    cir.call @printLine(%28) : (!cir.ptr<!s8i>) -> () loc(#loc61)
    cir.br ^bb9 loc(#loc50)
  ^bb9:  // 2 preds: ^bb7, ^bb8
    cir.br ^bb10 loc(#loc50)
  ^bb10:  // pred: ^bb9
    cir.br ^bb11 loc(#loc45)
  ^bb11:  // 2 preds: ^bb4, ^bb10
    cir.br ^bb12 loc(#loc45)
  ^bb12:  // pred: ^bb11
    cir.br ^bb13 loc(#loc38)
  ^bb13:  // 2 preds: ^bb2, ^bb12
    cir.br ^bb14 loc(#loc38)
  ^bb14:  // pred: ^bb13
    cir.return loc(#loc31)
  } loc(#loc128)
  cir.global "private" external @CWE190_Integer_Overflow__unsigned_int_fscanf_multiply_22_goodB2G2Global : !s32i {alignment = 4 : i64} loc(#loc141)
  cir.func @CWE190_Integer_Overflow__unsigned_int_fscanf_multiply_22_goodB2G2Sink(%arg0: !u32i loc(fused[#loc66, #loc67])) extra(#fn_attr) {
    %0 = cir.alloca !u32i, !cir.ptr<!u32i>, ["result", init] {alignment = 4 : i64} loc(#loc144)
    %1 = cir.alloca !u32i, !cir.ptr<!u32i>, ["data", init] {alignment = 4 : i64} loc(#loc143)
    cir.store %arg0, %1 : !u32i, !cir.ptr<!u32i> loc(#loc70)
    cir.br ^bb1 loc(#loc145)
  ^bb1:  // pred: ^bb0
    %2 = cir.get_global @CWE190_Integer_Overflow__unsigned_int_fscanf_multiply_22_goodB2G2Global : !cir.ptr<!s32i> loc(#loc141)
    %3 = cir.load %2 : !cir.ptr<!s32i>, !s32i loc(#loc73)
    %4 = cir.cast(int_to_bool, %3 : !s32i), !cir.bool loc(#loc73)
    cir.brcond %4 ^bb2, ^bb12 loc(#loc146)
  ^bb2:  // pred: ^bb1
    cir.br ^bb3 loc(#loc147)
  ^bb3:  // pred: ^bb2
    %5 = cir.load %1 : !cir.ptr<!u32i>, !u32i loc(#loc77)
    %6 = cir.const #cir.int<0> : !s32i loc(#loc78)
    %7 = cir.cast(integral, %6 : !s32i), !u32i loc(#loc78)
    %8 = cir.cmp(gt, %5, %7) : !u32i, !cir.bool loc(#loc148)
    cir.brcond %8 ^bb4, ^bb10 loc(#loc149)
  ^bb4:  // pred: ^bb3
    cir.br ^bb5 loc(#loc150)
  ^bb5:  // pred: ^bb4
    %9 = cir.load %1 : !cir.ptr<!u32i>, !u32i loc(#loc82)
    %10 = cir.const #cir.int<2147483647> : !s32i loc(#loc83)
    %11 = cir.cast(integral, %10 : !s32i), !u32i loc(#loc83)
    %12 = cir.const #cir.int<2> : !u32i loc(#loc83)
    %13 = cir.binop(mul, %11, %12) : !u32i loc(#loc83)
    %14 = cir.const #cir.int<1> : !u32i loc(#loc83)
    %15 = cir.binop(add, %13, %14) : !u32i loc(#loc83)
    %16 = cir.const #cir.int<2> : !s32i loc(#loc84)
    %17 = cir.cast(integral, %16 : !s32i), !u32i loc(#loc84)
    %18 = cir.binop(div, %15, %17) : !u32i loc(#loc151)
    %19 = cir.cmp(lt, %9, %18) : !u32i, !cir.bool loc(#loc152)
    cir.brcond %19 ^bb6, ^bb7 loc(#loc153)
  ^bb6:  // pred: ^bb5
    %20 = cir.load %1 : !cir.ptr<!u32i>, !u32i loc(#loc89)
    %21 = cir.const #cir.int<2> : !s32i loc(#loc69)
    %22 = cir.cast(integral, %21 : !s32i), !u32i loc(#loc69)
    %23 = cir.binop(mul, %20, %22) : !u32i loc(#loc154)
    cir.store %23, %0 : !u32i, !cir.ptr<!u32i> loc(#loc144)
    %24 = cir.load %0 : !cir.ptr<!u32i>, !u32i loc(#loc90)
    cir.call @printUnsignedLine(%24) : (!u32i) -> () loc(#loc91)
    cir.br ^bb8 loc(#loc87)
  ^bb7:  // pred: ^bb5
    %25 = cir.get_global @".str.1" : !cir.ptr<!cir.array<!s8i x 54>> loc(#loc92)
    %26 = cir.cast(array_to_ptrdecay, %25 : !cir.ptr<!cir.array<!s8i x 54>>), !cir.ptr<!s8i> loc(#loc92)
    cir.call @printLine(%26) : (!cir.ptr<!s8i>) -> () loc(#loc93)
    cir.br ^bb8 loc(#loc81)
  ^bb8:  // 2 preds: ^bb6, ^bb7
    cir.br ^bb9 loc(#loc81)
  ^bb9:  // pred: ^bb8
    cir.br ^bb10 loc(#loc76)
  ^bb10:  // 2 preds: ^bb3, ^bb9
    cir.br ^bb11 loc(#loc76)
  ^bb11:  // pred: ^bb10
    cir.br ^bb12 loc(#loc72)
  ^bb12:  // 2 preds: ^bb1, ^bb11
    cir.br ^bb13 loc(#loc72)
  ^bb13:  // pred: ^bb12
    cir.return loc(#loc65)
  } loc(#loc142)
  cir.global "private" external @CWE190_Integer_Overflow__unsigned_int_fscanf_multiply_22_goodG2BGlobal : !s32i {alignment = 4 : i64} loc(#loc155)
  cir.func @CWE190_Integer_Overflow__unsigned_int_fscanf_multiply_22_goodG2BSink(%arg0: !u32i loc(fused[#loc98, #loc99])) extra(#fn_attr) {
    %0 = cir.alloca !u32i, !cir.ptr<!u32i>, ["result", init] {alignment = 4 : i64} loc(#loc158)
    %1 = cir.alloca !u32i, !cir.ptr<!u32i>, ["data", init] {alignment = 4 : i64} loc(#loc157)
    cir.store %arg0, %1 : !u32i, !cir.ptr<!u32i> loc(#loc102)
    cir.br ^bb1 loc(#loc159)
  ^bb1:  // pred: ^bb0
    %2 = cir.get_global @CWE190_Integer_Overflow__unsigned_int_fscanf_multiply_22_goodG2BGlobal : !cir.ptr<!s32i> loc(#loc155)
    %3 = cir.load %2 : !cir.ptr<!s32i>, !s32i loc(#loc105)
    %4 = cir.cast(int_to_bool, %3 : !s32i), !cir.bool loc(#loc105)
    cir.brcond %4 ^bb2, ^bb7 loc(#loc160)
  ^bb2:  // pred: ^bb1
    cir.br ^bb3 loc(#loc161)
  ^bb3:  // pred: ^bb2
    %5 = cir.load %1 : !cir.ptr<!u32i>, !u32i loc(#loc109)
    %6 = cir.const #cir.int<0> : !s32i loc(#loc110)
    %7 = cir.cast(integral, %6 : !s32i), !u32i loc(#loc110)
    %8 = cir.cmp(gt, %5, %7) : !u32i, !cir.bool loc(#loc162)
    cir.brcond %8 ^bb4, ^bb5 loc(#loc163)
  ^bb4:  // pred: ^bb3
    %9 = cir.load %1 : !cir.ptr<!u32i>, !u32i loc(#loc112)
    %10 = cir.const #cir.int<2> : !s32i loc(#loc101)
    %11 = cir.cast(integral, %10 : !s32i), !u32i loc(#loc101)
    %12 = cir.binop(mul, %9, %11) : !u32i loc(#loc164)
    cir.store %12, %0 : !u32i, !cir.ptr<!u32i> loc(#loc158)
    %13 = cir.load %0 : !cir.ptr<!u32i>, !u32i loc(#loc113)
    cir.call @printUnsignedLine(%13) : (!u32i) -> () loc(#loc114)
    cir.br ^bb5 loc(#loc108)
  ^bb5:  // 2 preds: ^bb3, ^bb4
    cir.br ^bb6 loc(#loc108)
  ^bb6:  // pred: ^bb5
    cir.br ^bb7 loc(#loc104)
  ^bb7:  // 2 preds: ^bb1, ^bb6
    cir.br ^bb8 loc(#loc104)
  ^bb8:  // pred: ^bb7
    cir.return loc(#loc97)
  } loc(#loc156)
} loc(#loc)
#loc = loc("/workspaces/juliet-c/testcases/CWE190_Integer_Overflow/s05/CWE190_Integer_Overflow__unsigned_int_fscanf_multiply_22b.c":0:0)
#loc1 = loc("CWE190_Integer_Overflow__unsigned_int_fscanf_multiply_22b.c":23:1)
#loc2 = loc("CWE190_Integer_Overflow__unsigned_int_fscanf_multiply_22b.c":23:12)
#loc3 = loc("../../../testcasesupport/std_testcase_io.h":34:1)
#loc4 = loc("../../../testcasesupport/std_testcase_io.h":34:47)
#loc5 = loc("CWE190_Integer_Overflow__unsigned_int_fscanf_multiply_22b.c":25:1)
#loc6 = loc("CWE190_Integer_Overflow__unsigned_int_fscanf_multiply_22b.c":36:1)
#loc9 = loc("CWE190_Integer_Overflow__unsigned_int_fscanf_multiply_22b.c":32:13)
#loc10 = loc("CWE190_Integer_Overflow__unsigned_int_fscanf_multiply_22b.c":32:42)
#loc11 = loc("CWE190_Integer_Overflow__unsigned_int_fscanf_multiply_22b.c":26:1)
#loc12 = loc("CWE190_Integer_Overflow__unsigned_int_fscanf_multiply_22b.c":27:5)
#loc13 = loc("CWE190_Integer_Overflow__unsigned_int_fscanf_multiply_22b.c":35:5)
#loc14 = loc("CWE190_Integer_Overflow__unsigned_int_fscanf_multiply_22b.c":27:8)
#loc15 = loc("CWE190_Integer_Overflow__unsigned_int_fscanf_multiply_22b.c":28:5)
#loc16 = loc("CWE190_Integer_Overflow__unsigned_int_fscanf_multiply_22b.c":29:9)
#loc17 = loc("CWE190_Integer_Overflow__unsigned_int_fscanf_multiply_22b.c":34:9)
#loc18 = loc("CWE190_Integer_Overflow__unsigned_int_fscanf_multiply_22b.c":29:12)
#loc19 = loc("CWE190_Integer_Overflow__unsigned_int_fscanf_multiply_22b.c":29:19)
#loc20 = loc("CWE190_Integer_Overflow__unsigned_int_fscanf_multiply_22b.c":30:9)
#loc21 = loc("CWE190_Integer_Overflow__unsigned_int_fscanf_multiply_22b.c":32:35)
#loc22 = loc("CWE190_Integer_Overflow__unsigned_int_fscanf_multiply_22b.c":33:31)
#loc23 = loc("CWE190_Integer_Overflow__unsigned_int_fscanf_multiply_22b.c":33:13)
#loc24 = loc("CWE190_Integer_Overflow__unsigned_int_fscanf_multiply_22b.c":43:1)
#loc25 = loc("CWE190_Integer_Overflow__unsigned_int_fscanf_multiply_22b.c":43:12)
#loc26 = loc("../../../testcasesupport/std_testcase_io.h":14:1)
#loc27 = loc("../../../testcasesupport/std_testcase_io.h":14:33)
#loc28 = loc("CWE190_Integer_Overflow__unsigned_int_fscanf_multiply_22b.c":53:19)
#loc29 = loc("CWE190_Integer_Overflow__unsigned_int_fscanf_multiply_22b.c":67:27)
#loc30 = loc("CWE190_Integer_Overflow__unsigned_int_fscanf_multiply_22b.c":48:1)
#loc31 = loc("CWE190_Integer_Overflow__unsigned_int_fscanf_multiply_22b.c":71:1)
#loc34 = loc("CWE190_Integer_Overflow__unsigned_int_fscanf_multiply_22b.c":62:17)
#loc35 = loc("CWE190_Integer_Overflow__unsigned_int_fscanf_multiply_22b.c":62:46)
#loc36 = loc("CWE190_Integer_Overflow__unsigned_int_fscanf_multiply_22b.c":49:1)
#loc37 = loc("CWE190_Integer_Overflow__unsigned_int_fscanf_multiply_22b.c":50:5)
#loc38 = loc("CWE190_Integer_Overflow__unsigned_int_fscanf_multiply_22b.c":70:5)
#loc39 = loc("CWE190_Integer_Overflow__unsigned_int_fscanf_multiply_22b.c":50:8)
#loc40 = loc("CWE190_Integer_Overflow__unsigned_int_fscanf_multiply_22b.c":51:5)
#loc41 = loc("CWE190_Integer_Overflow__unsigned_int_fscanf_multiply_22b.c":54:5)
#loc42 = loc("CWE190_Integer_Overflow__unsigned_int_fscanf_multiply_22b.c":56:5)
#loc43 = loc("CWE190_Integer_Overflow__unsigned_int_fscanf_multiply_22b.c":53:9)
#loc44 = loc("CWE190_Integer_Overflow__unsigned_int_fscanf_multiply_22b.c":57:9)
#loc45 = loc("CWE190_Integer_Overflow__unsigned_int_fscanf_multiply_22b.c":69:9)
#loc46 = loc("CWE190_Integer_Overflow__unsigned_int_fscanf_multiply_22b.c":57:12)
#loc47 = loc("CWE190_Integer_Overflow__unsigned_int_fscanf_multiply_22b.c":57:19)
#loc48 = loc("CWE190_Integer_Overflow__unsigned_int_fscanf_multiply_22b.c":58:9)
#loc49 = loc("CWE190_Integer_Overflow__unsigned_int_fscanf_multiply_22b.c":60:13)
#loc50 = loc("CWE190_Integer_Overflow__unsigned_int_fscanf_multiply_22b.c":68:13)
#loc51 = loc("CWE190_Integer_Overflow__unsigned_int_fscanf_multiply_22b.c":60:17)
#loc52 = loc("CWE190_Integer_Overflow__unsigned_int_fscanf_multiply_22b.c":60:25)
#loc53 = loc("CWE190_Integer_Overflow__unsigned_int_fscanf_multiply_22b.c":60:34)
#loc54 = loc("CWE190_Integer_Overflow__unsigned_int_fscanf_multiply_22b.c":60:35)
#loc55 = loc("CWE190_Integer_Overflow__unsigned_int_fscanf_multiply_22b.c":61:13)
#loc56 = loc("CWE190_Integer_Overflow__unsigned_int_fscanf_multiply_22b.c":64:13)
#loc57 = loc("CWE190_Integer_Overflow__unsigned_int_fscanf_multiply_22b.c":66:13)
#loc58 = loc("CWE190_Integer_Overflow__unsigned_int_fscanf_multiply_22b.c":62:39)
#loc59 = loc("CWE190_Integer_Overflow__unsigned_int_fscanf_multiply_22b.c":63:35)
#loc60 = loc("CWE190_Integer_Overflow__unsigned_int_fscanf_multiply_22b.c":63:17)
#loc61 = loc("CWE190_Integer_Overflow__unsigned_int_fscanf_multiply_22b.c":67:17)
#loc62 = loc("CWE190_Integer_Overflow__unsigned_int_fscanf_multiply_22b.c":44:1)
#loc63 = loc("CWE190_Integer_Overflow__unsigned_int_fscanf_multiply_22b.c":44:12)
#loc64 = loc("CWE190_Integer_Overflow__unsigned_int_fscanf_multiply_22b.c":74:1)
#loc65 = loc("CWE190_Integer_Overflow__unsigned_int_fscanf_multiply_22b.c":92:1)
#loc68 = loc("CWE190_Integer_Overflow__unsigned_int_fscanf_multiply_22b.c":83:17)
#loc69 = loc("CWE190_Integer_Overflow__unsigned_int_fscanf_multiply_22b.c":83:46)
#loc70 = loc("CWE190_Integer_Overflow__unsigned_int_fscanf_multiply_22b.c":75:1)
#loc71 = loc("CWE190_Integer_Overflow__unsigned_int_fscanf_multiply_22b.c":76:5)
#loc72 = loc("CWE190_Integer_Overflow__unsigned_int_fscanf_multiply_22b.c":91:5)
#loc73 = loc("CWE190_Integer_Overflow__unsigned_int_fscanf_multiply_22b.c":76:8)
#loc74 = loc("CWE190_Integer_Overflow__unsigned_int_fscanf_multiply_22b.c":77:5)
#loc75 = loc("CWE190_Integer_Overflow__unsigned_int_fscanf_multiply_22b.c":78:9)
#loc76 = loc("CWE190_Integer_Overflow__unsigned_int_fscanf_multiply_22b.c":90:9)
#loc77 = loc("CWE190_Integer_Overflow__unsigned_int_fscanf_multiply_22b.c":78:12)
#loc78 = loc("CWE190_Integer_Overflow__unsigned_int_fscanf_multiply_22b.c":78:19)
#loc79 = loc("CWE190_Integer_Overflow__unsigned_int_fscanf_multiply_22b.c":79:9)
#loc80 = loc("CWE190_Integer_Overflow__unsigned_int_fscanf_multiply_22b.c":81:13)
#loc81 = loc("CWE190_Integer_Overflow__unsigned_int_fscanf_multiply_22b.c":89:13)
#loc82 = loc("CWE190_Integer_Overflow__unsigned_int_fscanf_multiply_22b.c":81:17)
#loc83 = loc("CWE190_Integer_Overflow__unsigned_int_fscanf_multiply_22b.c":81:25)
#loc84 = loc("CWE190_Integer_Overflow__unsigned_int_fscanf_multiply_22b.c":81:34)
#loc85 = loc("CWE190_Integer_Overflow__unsigned_int_fscanf_multiply_22b.c":81:35)
#loc86 = loc("CWE190_Integer_Overflow__unsigned_int_fscanf_multiply_22b.c":82:13)
#loc87 = loc("CWE190_Integer_Overflow__unsigned_int_fscanf_multiply_22b.c":85:13)
#loc88 = loc("CWE190_Integer_Overflow__unsigned_int_fscanf_multiply_22b.c":87:13)
#loc89 = loc("CWE190_Integer_Overflow__unsigned_int_fscanf_multiply_22b.c":83:39)
#loc90 = loc("CWE190_Integer_Overflow__unsigned_int_fscanf_multiply_22b.c":84:35)
#loc91 = loc("CWE190_Integer_Overflow__unsigned_int_fscanf_multiply_22b.c":84:17)
#loc92 = loc("CWE190_Integer_Overflow__unsigned_int_fscanf_multiply_22b.c":88:27)
#loc93 = loc("CWE190_Integer_Overflow__unsigned_int_fscanf_multiply_22b.c":88:17)
#loc94 = loc("CWE190_Integer_Overflow__unsigned_int_fscanf_multiply_22b.c":45:1)
#loc95 = loc("CWE190_Integer_Overflow__unsigned_int_fscanf_multiply_22b.c":45:12)
#loc96 = loc("CWE190_Integer_Overflow__unsigned_int_fscanf_multiply_22b.c":95:1)
#loc97 = loc("CWE190_Integer_Overflow__unsigned_int_fscanf_multiply_22b.c":106:1)
#loc100 = loc("CWE190_Integer_Overflow__unsigned_int_fscanf_multiply_22b.c":102:13)
#loc101 = loc("CWE190_Integer_Overflow__unsigned_int_fscanf_multiply_22b.c":102:42)
#loc102 = loc("CWE190_Integer_Overflow__unsigned_int_fscanf_multiply_22b.c":96:1)
#loc103 = loc("CWE190_Integer_Overflow__unsigned_int_fscanf_multiply_22b.c":97:5)
#loc104 = loc("CWE190_Integer_Overflow__unsigned_int_fscanf_multiply_22b.c":105:5)
#loc105 = loc("CWE190_Integer_Overflow__unsigned_int_fscanf_multiply_22b.c":97:8)
#loc106 = loc("CWE190_Integer_Overflow__unsigned_int_fscanf_multiply_22b.c":98:5)
#loc107 = loc("CWE190_Integer_Overflow__unsigned_int_fscanf_multiply_22b.c":99:9)
#loc108 = loc("CWE190_Integer_Overflow__unsigned_int_fscanf_multiply_22b.c":104:9)
#loc109 = loc("CWE190_Integer_Overflow__unsigned_int_fscanf_multiply_22b.c":99:12)
#loc110 = loc("CWE190_Integer_Overflow__unsigned_int_fscanf_multiply_22b.c":99:19)
#loc111 = loc("CWE190_Integer_Overflow__unsigned_int_fscanf_multiply_22b.c":100:9)
#loc112 = loc("CWE190_Integer_Overflow__unsigned_int_fscanf_multiply_22b.c":102:35)
#loc113 = loc("CWE190_Integer_Overflow__unsigned_int_fscanf_multiply_22b.c":103:31)
#loc114 = loc("CWE190_Integer_Overflow__unsigned_int_fscanf_multiply_22b.c":103:13)
#loc115 = loc(fused[#loc1, #loc2])
#loc116 = loc(fused[#loc3, #loc4])
#loc117 = loc(fused[#loc5, #loc6])
#loc119 = loc(fused[#loc9, #loc10])
#loc120 = loc(fused[#loc12, #loc13])
#loc121 = loc(fused[#loc15, #loc13])
#loc122 = loc(fused[#loc16, #loc17])
#loc123 = loc(fused[#loc18, #loc19])
#loc124 = loc(fused[#loc20, #loc17])
#loc125 = loc(fused[#loc21, #loc10])
#loc126 = loc(fused[#loc24, #loc25])
#loc127 = loc(fused[#loc26, #loc27])
#loc128 = loc(fused[#loc30, #loc31])
#loc130 = loc(fused[#loc34, #loc35])
#loc131 = loc(fused[#loc37, #loc38])
#loc132 = loc(fused[#loc40, #loc41, #loc42, #loc38])
#loc133 = loc(fused[#loc44, #loc45])
#loc134 = loc(fused[#loc46, #loc47])
#loc135 = loc(fused[#loc48, #loc45])
#loc136 = loc(fused[#loc49, #loc50])
#loc137 = loc(fused[#loc52, #loc53])
#loc138 = loc(fused[#loc51, #loc54])
#loc139 = loc(fused[#loc55, #loc56, #loc57, #loc50])
#loc140 = loc(fused[#loc58, #loc35])
#loc141 = loc(fused[#loc62, #loc63])
#loc142 = loc(fused[#loc64, #loc65])
#loc144 = loc(fused[#loc68, #loc69])
#loc145 = loc(fused[#loc71, #loc72])
#loc146 = loc(fused[#loc74, #loc72])
#loc147 = loc(fused[#loc75, #loc76])
#loc148 = loc(fused[#loc77, #loc78])
#loc149 = loc(fused[#loc79, #loc76])
#loc150 = loc(fused[#loc80, #loc81])
#loc151 = loc(fused[#loc83, #loc84])
#loc152 = loc(fused[#loc82, #loc85])
#loc153 = loc(fused[#loc86, #loc87, #loc88, #loc81])
#loc154 = loc(fused[#loc89, #loc69])
#loc155 = loc(fused[#loc94, #loc95])
#loc156 = loc(fused[#loc96, #loc97])
#loc158 = loc(fused[#loc100, #loc101])
#loc159 = loc(fused[#loc103, #loc104])
#loc160 = loc(fused[#loc106, #loc104])
#loc161 = loc(fused[#loc107, #loc108])
#loc162 = loc(fused[#loc109, #loc110])
#loc163 = loc(fused[#loc111, #loc108])
#loc164 = loc(fused[#loc112, #loc101])
