!s32i = !cir.int<s, 32>
!s64i = !cir.int<s, 64>
!s8i = !cir.int<s, 8>
!u64i = !cir.int<u, 64>
!void = !cir.void
#fn_attr = #cir<extra({nothrow = #cir.nothrow})>
#fn_attr1 = #cir<extra({inline = #cir.inline<no>, nothrow = #cir.nothrow, optnone = #cir.optnone, uwtable = #cir.uwtable<async>})>
module @"/workspaces/juliet-c/testcases/CWE122_Heap_Based_Buffer_Overflow/s08/CWE122_Heap_Based_Buffer_Overflow__c_CWE805_int64_t_memmove_08.c" attributes {cir.lang = #cir.lang<c>, cir.sob = #cir.signed_overflow_behavior<undefined>, cir.triple = "x86_64-unknown-linux-gnu", cir.type_size_info = #cir.type_size_info<char = 8, int = 32, size_t = 64>, cir.uwtable = #cir.uwtable<async>, dlti.dl_spec = #dlti.dl_spec<i64 = dense<64> : vector<2xi64>, i128 = dense<128> : vector<2xi64>, f80 = dense<128> : vector<2xi64>, f128 = dense<128> : vector<2xi64>, !llvm.ptr<271> = dense<32> : vector<4xi64>, !llvm.ptr<272> = dense<64> : vector<4xi64>, i16 = dense<16> : vector<2xi64>, !llvm.ptr<270> = dense<32> : vector<4xi64>, i32 = dense<32> : vector<2xi64>, f16 = dense<16> : vector<2xi64>, f64 = dense<64> : vector<2xi64>, !llvm.ptr = dense<64> : vector<4xi64>, i1 = dense<8> : vector<2xi64>, i8 = dense<8> : vector<2xi64>, "dlti.stack_alignment" = 128 : i64, "dlti.mangling_mode" = "e", "dlti.endianness" = "little">} {
  cir.func private @malloc(!u64i) -> !cir.ptr<!void> extra(#fn_attr) loc(#loc155)
  cir.func private @exit(!s32i) extra(#fn_attr) loc(#loc156)
  cir.func private @printLongLongLine(!s64i) loc(#loc157)
  cir.func private @free(!cir.ptr<!void>) extra(#fn_attr) loc(#loc158)
  cir.func no_proto @CWE122_Heap_Based_Buffer_Overflow__c_CWE805_int64_t_memmove_08_bad() extra(#fn_attr1) {
    %0 = cir.alloca !cir.array<!s64i x 100>, !cir.ptr<!cir.array<!s64i x 100>>, ["source"] {alignment = 16 : i64} loc(#loc160)
    %1 = cir.alloca !cir.ptr<!s64i>, !cir.ptr<!cir.ptr<!s64i>>, ["data"] {alignment = 8 : i64} loc(#loc161)
    %2 = cir.const #cir.ptr<null> : !cir.ptr<!s64i> loc(#loc15)
    cir.store %2, %1 : !cir.ptr<!s64i>, !cir.ptr<!cir.ptr<!s64i>> loc(#loc162)
    cir.br ^bb1 loc(#loc163)
  ^bb1:  // pred: ^bb0
    %3 = cir.get_global @staticReturnsTrue : !cir.ptr<!cir.func<() -> !s32i>> loc(#loc164)
    %4 = cir.call %3() : (!cir.ptr<!cir.func<() -> !s32i>>) -> !s32i loc(#loc19)
    %5 = cir.cast(int_to_bool, %4 : !s32i), !cir.bool loc(#loc19)
    cir.brcond %5 ^bb2, ^bb7 loc(#loc165)
  ^bb2:  // pred: ^bb1
    %6 = cir.get_global @malloc : !cir.ptr<!cir.func<(!u64i) -> !cir.ptr<!void>>> loc(#loc22)
    %7 = cir.const #cir.int<50> : !s32i loc(#loc23)
    %8 = cir.cast(integral, %7 : !s32i), !u64i loc(#loc23)
    %9 = cir.const #cir.int<8> : !u64i loc(#loc166)
    %10 = cir.binop(mul, %8, %9) : !u64i loc(#loc167)
    %11 = cir.call @malloc(%10) : (!u64i) -> !cir.ptr<!void> extra(#fn_attr) loc(#loc22)
    %12 = cir.cast(bitcast, %11 : !cir.ptr<!void>), !cir.ptr<!s64i> loc(#loc168)
    cir.store %12, %1 : !cir.ptr<!s64i>, !cir.ptr<!cir.ptr<!s64i>> loc(#loc169)
    cir.br ^bb3 loc(#loc170)
  ^bb3:  // pred: ^bb2
    %13 = cir.load %1 : !cir.ptr<!cir.ptr<!s64i>>, !cir.ptr<!s64i> loc(#loc30)
    %14 = cir.const #cir.ptr<null> : !cir.ptr<!void> loc(#loc31)
    %15 = cir.cast(bitcast, %14 : !cir.ptr<!void>), !cir.ptr<!s64i> loc(#loc31)
    %16 = cir.cmp(eq, %13, %15) : !cir.ptr<!s64i>, !cir.bool loc(#loc171)
    cir.brcond %16 ^bb4, ^bb5 loc(#loc172)
  ^bb4:  // pred: ^bb3
    %17 = cir.get_global @exit : !cir.ptr<!cir.func<(!s32i)>> loc(#loc33)
    %18 = cir.const #cir.int<1> : !s32i loc(#loc34)
    %19 = cir.unary(minus, %18) nsw : !s32i, !s32i loc(#loc35)
    cir.call @exit(%19) : (!s32i) -> () extra(#fn_attr) loc(#loc33)
    cir.br ^bb5 loc(#loc29)
  ^bb5:  // 2 preds: ^bb3, ^bb4
    cir.br ^bb6 loc(#loc29)
  ^bb6:  // pred: ^bb5
    cir.br ^bb7 loc(#loc18)
  ^bb7:  // 2 preds: ^bb1, ^bb6
    cir.br ^bb8 loc(#loc18)
  ^bb8:  // pred: ^bb7
    cir.br ^bb9 loc(#loc173)
  ^bb9:  // pred: ^bb8
    %20 = cir.const #cir.zero : !cir.array<!s64i x 100> loc(#loc160)
    cir.store %20, %0 : !cir.array<!s64i x 100>, !cir.ptr<!cir.array<!s64i x 100>> loc(#loc160)
    %21 = cir.load %1 : !cir.ptr<!cir.ptr<!s64i>>, !cir.ptr<!s64i> loc(#loc38)
    %22 = cir.cast(bitcast, %21 : !cir.ptr<!s64i>), !cir.ptr<!void> loc(#loc38)
    %23 = cir.cast(array_to_ptrdecay, %0 : !cir.ptr<!cir.array<!s64i x 100>>), !cir.ptr<!s64i> loc(#loc39)
    %24 = cir.cast(bitcast, %23 : !cir.ptr<!s64i>), !cir.ptr<!void> loc(#loc39)
    %25 = cir.const #cir.int<100> : !s32i loc(#loc40)
    %26 = cir.cast(integral, %25 : !s32i), !u64i loc(#loc40)
    %27 = cir.const #cir.int<8> : !u64i loc(#loc174)
    %28 = cir.binop(mul, %26, %27) : !u64i loc(#loc175)
    cir.libc.memmove %28 bytes from %24 to %22 : !cir.ptr<!void>, !u64i loc(#loc176)
    %29 = cir.load %1 : !cir.ptr<!cir.ptr<!s64i>>, !cir.ptr<!s64i> loc(#loc45)
    %30 = cir.const #cir.int<0> : !s32i loc(#loc46)
    %31 = cir.ptr_stride(%29 : !cir.ptr<!s64i>, %30 : !s32i), !cir.ptr<!s64i> loc(#loc47)
    %32 = cir.load %31 : !cir.ptr<!s64i>, !s64i loc(#loc45)
    cir.call @printLongLongLine(%32) : (!s64i) -> () loc(#loc48)
    %33 = cir.get_global @free : !cir.ptr<!cir.func<(!cir.ptr<!void>)>> loc(#loc49)
    %34 = cir.load %1 : !cir.ptr<!cir.ptr<!s64i>>, !cir.ptr<!s64i> loc(#loc50)
    %35 = cir.cast(bitcast, %34 : !cir.ptr<!s64i>), !cir.ptr<!void> loc(#loc50)
    cir.call @free(%35) : (!cir.ptr<!void>) -> () extra(#fn_attr) loc(#loc49)
    cir.br ^bb10 loc(#loc37)
  ^bb10:  // pred: ^bb9
    cir.return loc(#loc10)
  } loc(#loc159)
  cir.func no_proto @CWE122_Heap_Based_Buffer_Overflow__c_CWE805_int64_t_memmove_08_good() extra(#fn_attr1) {
    %0 = cir.get_global @goodG2B1 : !cir.ptr<!cir.func<()>> loc(#loc178)
    cir.call %0() : (!cir.ptr<!cir.func<()>>) -> () loc(#loc53)
    %1 = cir.get_global @goodG2B2 : !cir.ptr<!cir.func<()>> loc(#loc179)
    cir.call %1() : (!cir.ptr<!cir.func<()>>) -> () loc(#loc55)
    cir.return loc(#loc52)
  } loc(#loc177)
  cir.func no_proto internal private @staticReturnsTrue() -> !s32i extra(#fn_attr1) {
    %0 = cir.alloca !s32i, !cir.ptr<!s32i>, ["__retval"] {alignment = 4 : i64} loc(#loc58)
    %1 = cir.const #cir.int<1> : !s32i loc(#loc59)
    cir.store %1, %0 : !s32i, !cir.ptr<!s32i> loc(#loc181)
    %2 = cir.load %0 : !cir.ptr<!s32i>, !s32i loc(#loc181)
    cir.return %2 : !s32i loc(#loc181)
  } loc(#loc180)
  cir.func private @printLine(!cir.ptr<!s8i>) loc(#loc182)
  cir.global "private" constant cir_private dsolocal @".str" = #cir.const_array<"Benign, fixed string\00" : !cir.array<!s8i x 21>> : !cir.array<!s8i x 21> {alignment = 1 : i64} loc(#loc63)
  cir.func no_proto internal private @goodG2B1() extra(#fn_attr1) {
    %0 = cir.alloca !cir.array<!s64i x 100>, !cir.ptr<!cir.array<!s64i x 100>>, ["source"] {alignment = 16 : i64} loc(#loc184)
    %1 = cir.alloca !cir.ptr<!s64i>, !cir.ptr<!cir.ptr<!s64i>>, ["data"] {alignment = 8 : i64} loc(#loc185)
    %2 = cir.const #cir.ptr<null> : !cir.ptr<!s64i> loc(#loc70)
    cir.store %2, %1 : !cir.ptr<!s64i>, !cir.ptr<!cir.ptr<!s64i>> loc(#loc186)
    cir.br ^bb1 loc(#loc187)
  ^bb1:  // pred: ^bb0
    %3 = cir.get_global @staticReturnsFalse : !cir.ptr<!cir.func<() -> !s32i>> loc(#loc188)
    %4 = cir.call %3() : (!cir.ptr<!cir.func<() -> !s32i>>) -> !s32i loc(#loc74)
    %5 = cir.cast(int_to_bool, %4 : !s32i), !cir.bool loc(#loc74)
    cir.brcond %5 ^bb2, ^bb3 loc(#loc189)
  ^bb2:  // pred: ^bb1
    %6 = cir.get_global @".str" : !cir.ptr<!cir.array<!s8i x 21>> loc(#loc63)
    %7 = cir.cast(array_to_ptrdecay, %6 : !cir.ptr<!cir.array<!s8i x 21>>), !cir.ptr<!s8i> loc(#loc63)
    cir.call @printLine(%7) : (!cir.ptr<!s8i>) -> () loc(#loc79)
    cir.br ^bb8 loc(#loc77)
  ^bb3:  // pred: ^bb1
    %8 = cir.get_global @malloc : !cir.ptr<!cir.func<(!u64i) -> !cir.ptr<!void>>> loc(#loc80)
    %9 = cir.const #cir.int<100> : !s32i loc(#loc81)
    %10 = cir.cast(integral, %9 : !s32i), !u64i loc(#loc81)
    %11 = cir.const #cir.int<8> : !u64i loc(#loc190)
    %12 = cir.binop(mul, %10, %11) : !u64i loc(#loc191)
    %13 = cir.call @malloc(%12) : (!u64i) -> !cir.ptr<!void> extra(#fn_attr) loc(#loc80)
    %14 = cir.cast(bitcast, %13 : !cir.ptr<!void>), !cir.ptr<!s64i> loc(#loc192)
    cir.store %14, %1 : !cir.ptr<!s64i>, !cir.ptr<!cir.ptr<!s64i>> loc(#loc193)
    cir.br ^bb4 loc(#loc194)
  ^bb4:  // pred: ^bb3
    %15 = cir.load %1 : !cir.ptr<!cir.ptr<!s64i>>, !cir.ptr<!s64i> loc(#loc88)
    %16 = cir.const #cir.ptr<null> : !cir.ptr<!void> loc(#loc89)
    %17 = cir.cast(bitcast, %16 : !cir.ptr<!void>), !cir.ptr<!s64i> loc(#loc89)
    %18 = cir.cmp(eq, %15, %17) : !cir.ptr<!s64i>, !cir.bool loc(#loc195)
    cir.brcond %18 ^bb5, ^bb6 loc(#loc196)
  ^bb5:  // pred: ^bb4
    %19 = cir.get_global @exit : !cir.ptr<!cir.func<(!s32i)>> loc(#loc91)
    %20 = cir.const #cir.int<1> : !s32i loc(#loc92)
    %21 = cir.unary(minus, %20) nsw : !s32i, !s32i loc(#loc93)
    cir.call @exit(%21) : (!s32i) -> () extra(#fn_attr) loc(#loc91)
    cir.br ^bb6 loc(#loc87)
  ^bb6:  // 2 preds: ^bb4, ^bb5
    cir.br ^bb7 loc(#loc87)
  ^bb7:  // pred: ^bb6
    cir.br ^bb8 loc(#loc73)
  ^bb8:  // 2 preds: ^bb2, ^bb7
    cir.br ^bb9 loc(#loc73)
  ^bb9:  // pred: ^bb8
    cir.br ^bb10 loc(#loc197)
  ^bb10:  // pred: ^bb9
    %22 = cir.const #cir.zero : !cir.array<!s64i x 100> loc(#loc184)
    cir.store %22, %0 : !cir.array<!s64i x 100>, !cir.ptr<!cir.array<!s64i x 100>> loc(#loc184)
    %23 = cir.load %1 : !cir.ptr<!cir.ptr<!s64i>>, !cir.ptr<!s64i> loc(#loc96)
    %24 = cir.cast(bitcast, %23 : !cir.ptr<!s64i>), !cir.ptr<!void> loc(#loc96)
    %25 = cir.cast(array_to_ptrdecay, %0 : !cir.ptr<!cir.array<!s64i x 100>>), !cir.ptr<!s64i> loc(#loc97)
    %26 = cir.cast(bitcast, %25 : !cir.ptr<!s64i>), !cir.ptr<!void> loc(#loc97)
    %27 = cir.const #cir.int<100> : !s32i loc(#loc98)
    %28 = cir.cast(integral, %27 : !s32i), !u64i loc(#loc98)
    %29 = cir.const #cir.int<8> : !u64i loc(#loc198)
    %30 = cir.binop(mul, %28, %29) : !u64i loc(#loc199)
    cir.libc.memmove %30 bytes from %26 to %24 : !cir.ptr<!void>, !u64i loc(#loc200)
    %31 = cir.load %1 : !cir.ptr<!cir.ptr<!s64i>>, !cir.ptr<!s64i> loc(#loc103)
    %32 = cir.const #cir.int<0> : !s32i loc(#loc104)
    %33 = cir.ptr_stride(%31 : !cir.ptr<!s64i>, %32 : !s32i), !cir.ptr<!s64i> loc(#loc105)
    %34 = cir.load %33 : !cir.ptr<!s64i>, !s64i loc(#loc103)
    cir.call @printLongLongLine(%34) : (!s64i) -> () loc(#loc106)
    %35 = cir.get_global @free : !cir.ptr<!cir.func<(!cir.ptr<!void>)>> loc(#loc107)
    %36 = cir.load %1 : !cir.ptr<!cir.ptr<!s64i>>, !cir.ptr<!s64i> loc(#loc108)
    %37 = cir.cast(bitcast, %36 : !cir.ptr<!s64i>), !cir.ptr<!void> loc(#loc108)
    cir.call @free(%37) : (!cir.ptr<!void>) -> () extra(#fn_attr) loc(#loc107)
    cir.br ^bb11 loc(#loc95)
  ^bb11:  // pred: ^bb10
    cir.return loc(#loc65)
  } loc(#loc183)
  cir.func no_proto internal private @staticReturnsFalse() -> !s32i extra(#fn_attr1) {
    %0 = cir.alloca !s32i, !cir.ptr<!s32i>, ["__retval"] {alignment = 4 : i64} loc(#loc110)
    %1 = cir.const #cir.int<0> : !s32i loc(#loc111)
    cir.store %1, %0 : !s32i, !cir.ptr<!s32i> loc(#loc202)
    %2 = cir.load %0 : !cir.ptr<!s32i>, !s32i loc(#loc202)
    cir.return %2 : !s32i loc(#loc202)
  } loc(#loc201)
  cir.func no_proto internal private @goodG2B2() extra(#fn_attr1) {
    %0 = cir.alloca !cir.array<!s64i x 100>, !cir.ptr<!cir.array<!s64i x 100>>, ["source"] {alignment = 16 : i64} loc(#loc204)
    %1 = cir.alloca !cir.ptr<!s64i>, !cir.ptr<!cir.ptr<!s64i>>, ["data"] {alignment = 8 : i64} loc(#loc205)
    %2 = cir.const #cir.ptr<null> : !cir.ptr<!s64i> loc(#loc119)
    cir.store %2, %1 : !cir.ptr<!s64i>, !cir.ptr<!cir.ptr<!s64i>> loc(#loc206)
    cir.br ^bb1 loc(#loc207)
  ^bb1:  // pred: ^bb0
    %3 = cir.get_global @staticReturnsTrue : !cir.ptr<!cir.func<() -> !s32i>> loc(#loc208)
    %4 = cir.call @staticReturnsTrue() : () -> !s32i loc(#loc123)
    %5 = cir.cast(int_to_bool, %4 : !s32i), !cir.bool loc(#loc123)
    cir.brcond %5 ^bb2, ^bb7 loc(#loc209)
  ^bb2:  // pred: ^bb1
    %6 = cir.get_global @malloc : !cir.ptr<!cir.func<(!u64i) -> !cir.ptr<!void>>> loc(#loc126)
    %7 = cir.const #cir.int<100> : !s32i loc(#loc127)
    %8 = cir.cast(integral, %7 : !s32i), !u64i loc(#loc127)
    %9 = cir.const #cir.int<8> : !u64i loc(#loc210)
    %10 = cir.binop(mul, %8, %9) : !u64i loc(#loc211)
    %11 = cir.call @malloc(%10) : (!u64i) -> !cir.ptr<!void> extra(#fn_attr) loc(#loc126)
    %12 = cir.cast(bitcast, %11 : !cir.ptr<!void>), !cir.ptr<!s64i> loc(#loc212)
    cir.store %12, %1 : !cir.ptr<!s64i>, !cir.ptr<!cir.ptr<!s64i>> loc(#loc213)
    cir.br ^bb3 loc(#loc214)
  ^bb3:  // pred: ^bb2
    %13 = cir.load %1 : !cir.ptr<!cir.ptr<!s64i>>, !cir.ptr<!s64i> loc(#loc134)
    %14 = cir.const #cir.ptr<null> : !cir.ptr<!void> loc(#loc135)
    %15 = cir.cast(bitcast, %14 : !cir.ptr<!void>), !cir.ptr<!s64i> loc(#loc135)
    %16 = cir.cmp(eq, %13, %15) : !cir.ptr<!s64i>, !cir.bool loc(#loc215)
    cir.brcond %16 ^bb4, ^bb5 loc(#loc216)
  ^bb4:  // pred: ^bb3
    %17 = cir.get_global @exit : !cir.ptr<!cir.func<(!s32i)>> loc(#loc137)
    %18 = cir.const #cir.int<1> : !s32i loc(#loc138)
    %19 = cir.unary(minus, %18) nsw : !s32i, !s32i loc(#loc139)
    cir.call @exit(%19) : (!s32i) -> () extra(#fn_attr) loc(#loc137)
    cir.br ^bb5 loc(#loc133)
  ^bb5:  // 2 preds: ^bb3, ^bb4
    cir.br ^bb6 loc(#loc133)
  ^bb6:  // pred: ^bb5
    cir.br ^bb7 loc(#loc122)
  ^bb7:  // 2 preds: ^bb1, ^bb6
    cir.br ^bb8 loc(#loc122)
  ^bb8:  // pred: ^bb7
    cir.br ^bb9 loc(#loc217)
  ^bb9:  // pred: ^bb8
    %20 = cir.const #cir.zero : !cir.array<!s64i x 100> loc(#loc204)
    cir.store %20, %0 : !cir.array<!s64i x 100>, !cir.ptr<!cir.array<!s64i x 100>> loc(#loc204)
    %21 = cir.load %1 : !cir.ptr<!cir.ptr<!s64i>>, !cir.ptr<!s64i> loc(#loc142)
    %22 = cir.cast(bitcast, %21 : !cir.ptr<!s64i>), !cir.ptr<!void> loc(#loc142)
    %23 = cir.cast(array_to_ptrdecay, %0 : !cir.ptr<!cir.array<!s64i x 100>>), !cir.ptr<!s64i> loc(#loc143)
    %24 = cir.cast(bitcast, %23 : !cir.ptr<!s64i>), !cir.ptr<!void> loc(#loc143)
    %25 = cir.const #cir.int<100> : !s32i loc(#loc144)
    %26 = cir.cast(integral, %25 : !s32i), !u64i loc(#loc144)
    %27 = cir.const #cir.int<8> : !u64i loc(#loc218)
    %28 = cir.binop(mul, %26, %27) : !u64i loc(#loc219)
    cir.libc.memmove %28 bytes from %24 to %22 : !cir.ptr<!void>, !u64i loc(#loc220)
    %29 = cir.load %1 : !cir.ptr<!cir.ptr<!s64i>>, !cir.ptr<!s64i> loc(#loc149)
    %30 = cir.const #cir.int<0> : !s32i loc(#loc150)
    %31 = cir.ptr_stride(%29 : !cir.ptr<!s64i>, %30 : !s32i), !cir.ptr<!s64i> loc(#loc151)
    %32 = cir.load %31 : !cir.ptr<!s64i>, !s64i loc(#loc149)
    cir.call @printLongLongLine(%32) : (!s64i) -> () loc(#loc152)
    %33 = cir.get_global @free : !cir.ptr<!cir.func<(!cir.ptr<!void>)>> loc(#loc153)
    %34 = cir.load %1 : !cir.ptr<!cir.ptr<!s64i>>, !cir.ptr<!s64i> loc(#loc154)
    %35 = cir.cast(bitcast, %34 : !cir.ptr<!s64i>), !cir.ptr<!void> loc(#loc154)
    cir.call @free(%35) : (!cir.ptr<!void>) -> () extra(#fn_attr) loc(#loc153)
    cir.br ^bb10 loc(#loc141)
  ^bb10:  // pred: ^bb9
    cir.return loc(#loc114)
  } loc(#loc203)
} loc(#loc)
#loc = loc("/workspaces/juliet-c/testcases/CWE122_Heap_Based_Buffer_Overflow/s08/CWE122_Heap_Based_Buffer_Overflow__c_CWE805_int64_t_memmove_08.c":0:0)
#loc1 = loc("/usr/include/stdlib.h":672:1)
#loc2 = loc("/usr/include/stdlib.h":672:45)
#loc3 = loc("/usr/include/stdlib.h":756:1)
#loc4 = loc("/usr/include/stdlib.h":756:70)
#loc5 = loc("../../../testcasesupport/std_testcase_io.h":26:1)
#loc6 = loc("../../../testcasesupport/std_testcase_io.h":26:49)
#loc7 = loc("/usr/include/stdlib.h":687:1)
#loc8 = loc("/usr/include/stdlib.h":687:32)
#loc9 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_int64_t_memmove_08.c":35:1)
#loc10 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_int64_t_memmove_08.c":52:1)
#loc11 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_int64_t_memmove_08.c":46:9)
#loc12 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_int64_t_memmove_08.c":46:33)
#loc13 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_int64_t_memmove_08.c":37:5)
#loc14 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_int64_t_memmove_08.c":37:15)
#loc15 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_int64_t_memmove_08.c":38:12)
#loc16 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_int64_t_memmove_08.c":38:5)
#loc17 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_int64_t_memmove_08.c":39:5)
#loc18 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_int64_t_memmove_08.c":44:5)
#loc19 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_int64_t_memmove_08.c":39:8)
#loc20 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_int64_t_memmove_08.c":39:26)
#loc21 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_int64_t_memmove_08.c":40:5)
#loc22 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_int64_t_memmove_08.c":42:27)
#loc23 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_int64_t_memmove_08.c":42:34)
#loc24 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_int64_t_memmove_08.c":42:37)
#loc25 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_int64_t_memmove_08.c":42:51)
#loc26 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_int64_t_memmove_08.c":42:52)
#loc27 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_int64_t_memmove_08.c":42:9)
#loc28 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_int64_t_memmove_08.c":43:9)
#loc29 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_int64_t_memmove_08.c":43:37)
#loc30 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_int64_t_memmove_08.c":43:13)
#loc31 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_int64_t_memmove_08.c":43:21)
#loc32 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_int64_t_memmove_08.c":43:27)
#loc33 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_int64_t_memmove_08.c":43:28)
#loc34 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_int64_t_memmove_08.c":43:34)
#loc35 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_int64_t_memmove_08.c":43:33)
#loc36 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_int64_t_memmove_08.c":45:5)
#loc37 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_int64_t_memmove_08.c":51:5)
#loc38 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_int64_t_memmove_08.c":48:17)
#loc39 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_int64_t_memmove_08.c":48:23)
#loc40 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_int64_t_memmove_08.c":48:31)
#loc41 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_int64_t_memmove_08.c":48:35)
#loc42 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_int64_t_memmove_08.c":48:49)
#loc43 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_int64_t_memmove_08.c":48:9)
#loc44 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_int64_t_memmove_08.c":48:50)
#loc45 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_int64_t_memmove_08.c":49:27)
#loc46 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_int64_t_memmove_08.c":49:32)
#loc47 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_int64_t_memmove_08.c":49:33)
#loc48 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_int64_t_memmove_08.c":49:9)
#loc49 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_int64_t_memmove_08.c":50:9)
#loc50 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_int64_t_memmove_08.c":50:14)
#loc51 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_int64_t_memmove_08.c":103:1)
#loc52 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_int64_t_memmove_08.c":107:1)
#loc53 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_int64_t_memmove_08.c":105:5)
#loc54 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_int64_t_memmove_08.c":105:14)
#loc55 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_int64_t_memmove_08.c":106:5)
#loc56 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_int64_t_memmove_08.c":106:14)
#loc57 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_int64_t_memmove_08.c":23:1)
#loc58 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_int64_t_memmove_08.c":26:1)
#loc59 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_int64_t_memmove_08.c":25:12)
#loc60 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_int64_t_memmove_08.c":25:5)
#loc61 = loc("../../../testcasesupport/std_testcase_io.h":14:1)
#loc62 = loc("../../../testcasesupport/std_testcase_io.h":14:33)
#loc63 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_int64_t_memmove_08.c":66:19)
#loc64 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_int64_t_memmove_08.c":59:1)
#loc65 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_int64_t_memmove_08.c":81:1)
#loc66 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_int64_t_memmove_08.c":75:9)
#loc67 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_int64_t_memmove_08.c":75:33)
#loc68 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_int64_t_memmove_08.c":61:5)
#loc69 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_int64_t_memmove_08.c":61:15)
#loc70 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_int64_t_memmove_08.c":62:12)
#loc71 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_int64_t_memmove_08.c":62:5)
#loc72 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_int64_t_memmove_08.c":63:5)
#loc73 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_int64_t_memmove_08.c":73:5)
#loc74 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_int64_t_memmove_08.c":63:8)
#loc75 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_int64_t_memmove_08.c":63:27)
#loc76 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_int64_t_memmove_08.c":64:5)
#loc77 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_int64_t_memmove_08.c":67:5)
#loc78 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_int64_t_memmove_08.c":69:5)
#loc79 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_int64_t_memmove_08.c":66:9)
#loc80 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_int64_t_memmove_08.c":71:27)
#loc81 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_int64_t_memmove_08.c":71:34)
#loc82 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_int64_t_memmove_08.c":71:38)
#loc83 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_int64_t_memmove_08.c":71:52)
#loc84 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_int64_t_memmove_08.c":71:53)
#loc85 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_int64_t_memmove_08.c":71:9)
#loc86 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_int64_t_memmove_08.c":72:9)
#loc87 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_int64_t_memmove_08.c":72:37)
#loc88 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_int64_t_memmove_08.c":72:13)
#loc89 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_int64_t_memmove_08.c":72:21)
#loc90 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_int64_t_memmove_08.c":72:27)
#loc91 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_int64_t_memmove_08.c":72:28)
#loc92 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_int64_t_memmove_08.c":72:34)
#loc93 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_int64_t_memmove_08.c":72:33)
#loc94 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_int64_t_memmove_08.c":74:5)
#loc95 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_int64_t_memmove_08.c":80:5)
#loc96 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_int64_t_memmove_08.c":77:17)
#loc97 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_int64_t_memmove_08.c":77:23)
#loc98 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_int64_t_memmove_08.c":77:31)
#loc99 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_int64_t_memmove_08.c":77:35)
#loc100 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_int64_t_memmove_08.c":77:49)
#loc101 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_int64_t_memmove_08.c":77:9)
#loc102 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_int64_t_memmove_08.c":77:50)
#loc103 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_int64_t_memmove_08.c":78:27)
#loc104 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_int64_t_memmove_08.c":78:32)
#loc105 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_int64_t_memmove_08.c":78:33)
#loc106 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_int64_t_memmove_08.c":78:9)
#loc107 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_int64_t_memmove_08.c":79:9)
#loc108 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_int64_t_memmove_08.c":79:14)
#loc109 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_int64_t_memmove_08.c":28:1)
#loc110 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_int64_t_memmove_08.c":31:1)
#loc111 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_int64_t_memmove_08.c":30:12)
#loc112 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_int64_t_memmove_08.c":30:5)
#loc113 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_int64_t_memmove_08.c":84:1)
#loc114 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_int64_t_memmove_08.c":101:1)
#loc115 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_int64_t_memmove_08.c":95:9)
#loc116 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_int64_t_memmove_08.c":95:33)
#loc117 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_int64_t_memmove_08.c":86:5)
#loc118 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_int64_t_memmove_08.c":86:15)
#loc119 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_int64_t_memmove_08.c":87:12)
#loc120 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_int64_t_memmove_08.c":87:5)
#loc121 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_int64_t_memmove_08.c":88:5)
#loc122 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_int64_t_memmove_08.c":93:5)
#loc123 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_int64_t_memmove_08.c":88:8)
#loc124 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_int64_t_memmove_08.c":88:26)
#loc125 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_int64_t_memmove_08.c":89:5)
#loc126 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_int64_t_memmove_08.c":91:27)
#loc127 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_int64_t_memmove_08.c":91:34)
#loc128 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_int64_t_memmove_08.c":91:38)
#loc129 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_int64_t_memmove_08.c":91:52)
#loc130 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_int64_t_memmove_08.c":91:53)
#loc131 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_int64_t_memmove_08.c":91:9)
#loc132 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_int64_t_memmove_08.c":92:9)
#loc133 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_int64_t_memmove_08.c":92:37)
#loc134 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_int64_t_memmove_08.c":92:13)
#loc135 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_int64_t_memmove_08.c":92:21)
#loc136 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_int64_t_memmove_08.c":92:27)
#loc137 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_int64_t_memmove_08.c":92:28)
#loc138 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_int64_t_memmove_08.c":92:34)
#loc139 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_int64_t_memmove_08.c":92:33)
#loc140 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_int64_t_memmove_08.c":94:5)
#loc141 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_int64_t_memmove_08.c":100:5)
#loc142 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_int64_t_memmove_08.c":97:17)
#loc143 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_int64_t_memmove_08.c":97:23)
#loc144 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_int64_t_memmove_08.c":97:31)
#loc145 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_int64_t_memmove_08.c":97:35)
#loc146 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_int64_t_memmove_08.c":97:49)
#loc147 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_int64_t_memmove_08.c":97:9)
#loc148 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_int64_t_memmove_08.c":97:50)
#loc149 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_int64_t_memmove_08.c":98:27)
#loc150 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_int64_t_memmove_08.c":98:32)
#loc151 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_int64_t_memmove_08.c":98:33)
#loc152 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_int64_t_memmove_08.c":98:9)
#loc153 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_int64_t_memmove_08.c":99:9)
#loc154 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_int64_t_memmove_08.c":99:14)
#loc155 = loc(fused[#loc1, #loc2])
#loc156 = loc(fused[#loc3, #loc4])
#loc157 = loc(fused[#loc5, #loc6])
#loc158 = loc(fused[#loc7, #loc8])
#loc159 = loc(fused[#loc9, #loc10])
#loc160 = loc(fused[#loc11, #loc12])
#loc161 = loc(fused[#loc13, #loc14])
#loc162 = loc(fused[#loc16, #loc15])
#loc163 = loc(fused[#loc17, #loc18])
#loc164 = loc(fused[#loc19, #loc20])
#loc165 = loc(fused[#loc21, #loc18])
#loc166 = loc(fused[#loc24, #loc25])
#loc167 = loc(fused[#loc23, #loc25])
#loc168 = loc(fused[#loc22, #loc26])
#loc169 = loc(fused[#loc27, #loc26])
#loc170 = loc(fused[#loc28, #loc29])
#loc171 = loc(fused[#loc30, #loc31])
#loc172 = loc(fused[#loc32, #loc29])
#loc173 = loc(fused[#loc36, #loc37])
#loc174 = loc(fused[#loc41, #loc42])
#loc175 = loc(fused[#loc40, #loc42])
#loc176 = loc(fused[#loc43, #loc44])
#loc177 = loc(fused[#loc51, #loc52])
#loc178 = loc(fused[#loc53, #loc54])
#loc179 = loc(fused[#loc55, #loc56])
#loc180 = loc(fused[#loc57, #loc58])
#loc181 = loc(fused[#loc60, #loc59])
#loc182 = loc(fused[#loc61, #loc62])
#loc183 = loc(fused[#loc64, #loc65])
#loc184 = loc(fused[#loc66, #loc67])
#loc185 = loc(fused[#loc68, #loc69])
#loc186 = loc(fused[#loc71, #loc70])
#loc187 = loc(fused[#loc72, #loc73])
#loc188 = loc(fused[#loc74, #loc75])
#loc189 = loc(fused[#loc76, #loc77, #loc78, #loc73])
#loc190 = loc(fused[#loc82, #loc83])
#loc191 = loc(fused[#loc81, #loc83])
#loc192 = loc(fused[#loc80, #loc84])
#loc193 = loc(fused[#loc85, #loc84])
#loc194 = loc(fused[#loc86, #loc87])
#loc195 = loc(fused[#loc88, #loc89])
#loc196 = loc(fused[#loc90, #loc87])
#loc197 = loc(fused[#loc94, #loc95])
#loc198 = loc(fused[#loc99, #loc100])
#loc199 = loc(fused[#loc98, #loc100])
#loc200 = loc(fused[#loc101, #loc102])
#loc201 = loc(fused[#loc109, #loc110])
#loc202 = loc(fused[#loc112, #loc111])
#loc203 = loc(fused[#loc113, #loc114])
#loc204 = loc(fused[#loc115, #loc116])
#loc205 = loc(fused[#loc117, #loc118])
#loc206 = loc(fused[#loc120, #loc119])
#loc207 = loc(fused[#loc121, #loc122])
#loc208 = loc(fused[#loc123, #loc124])
#loc209 = loc(fused[#loc125, #loc122])
#loc210 = loc(fused[#loc128, #loc129])
#loc211 = loc(fused[#loc127, #loc129])
#loc212 = loc(fused[#loc126, #loc130])
#loc213 = loc(fused[#loc131, #loc130])
#loc214 = loc(fused[#loc132, #loc133])
#loc215 = loc(fused[#loc134, #loc135])
#loc216 = loc(fused[#loc136, #loc133])
#loc217 = loc(fused[#loc140, #loc141])
#loc218 = loc(fused[#loc145, #loc146])
#loc219 = loc(fused[#loc144, #loc146])
#loc220 = loc(fused[#loc147, #loc148])
