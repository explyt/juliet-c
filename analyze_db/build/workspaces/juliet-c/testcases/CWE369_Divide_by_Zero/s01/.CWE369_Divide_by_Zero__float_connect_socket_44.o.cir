!s32i = !cir.int<s, 32>
!s64i = !cir.int<s, 64>
!s8i = !cir.int<s, 8>
!u16i = !cir.int<u, 16>
!u32i = !cir.int<u, 32>
!u64i = !cir.int<u, 64>
!u8i = !cir.int<u, 8>
!void = !cir.void
#false = #cir.bool<false> : !cir.bool
#fn_attr = #cir<extra({inline = #cir.inline<no>, nothrow = #cir.nothrow, optnone = #cir.optnone, uwtable = #cir.uwtable<async>})>
#fn_attr1 = #cir<extra({nothrow = #cir.nothrow})>
#loc5 = loc("CWE369_Divide_by_Zero__float_connect_socket_44.c":46:21)
#loc6 = loc("CWE369_Divide_by_Zero__float_connect_socket_44.c":46:27)
#loc138 = loc("CWE369_Divide_by_Zero__float_connect_socket_44.c":127:25)
#loc139 = loc("CWE369_Divide_by_Zero__float_connect_socket_44.c":127:31)
#loc166 = loc("CWE369_Divide_by_Zero__float_connect_socket_44.c":148:25)
#loc167 = loc("CWE369_Divide_by_Zero__float_connect_socket_44.c":148:31)
#true = #cir.bool<true> : !cir.bool
!ty_in_addr = !cir.record<struct "in_addr" {!u32i} #cir.record.decl.ast>
#loc282 = loc(fused[#loc5, #loc6])
#loc333 = loc(fused[#loc138, #loc139])
#loc344 = loc(fused[#loc166, #loc167])
!ty_sockaddr = !cir.record<struct "sockaddr" {!u16i, !cir.array<!s8i x 14>} #cir.record.decl.ast>
!ty_sockaddr_in = !cir.record<struct "sockaddr_in" {!u16i, !u16i, !ty_in_addr, !cir.array<!u8i x 8>}>
module @"/workspaces/juliet-c/testcases/CWE369_Divide_by_Zero/s01/CWE369_Divide_by_Zero__float_connect_socket_44.c" attributes {cir.lang = #cir.lang<c>, cir.sob = #cir.signed_overflow_behavior<undefined>, cir.triple = "x86_64-unknown-linux-gnu", cir.type_size_info = #cir.type_size_info<char = 8, int = 32, size_t = 64>, cir.uwtable = #cir.uwtable<async>, dlti.dl_spec = #dlti.dl_spec<f80 = dense<128> : vector<2xi64>, i64 = dense<64> : vector<2xi64>, i128 = dense<128> : vector<2xi64>, !llvm.ptr<271> = dense<32> : vector<4xi64>, !llvm.ptr<272> = dense<64> : vector<4xi64>, f128 = dense<128> : vector<2xi64>, f64 = dense<64> : vector<2xi64>, i32 = dense<32> : vector<2xi64>, f16 = dense<16> : vector<2xi64>, i16 = dense<16> : vector<2xi64>, i1 = dense<8> : vector<2xi64>, i8 = dense<8> : vector<2xi64>, !llvm.ptr<270> = dense<32> : vector<4xi64>, !llvm.ptr = dense<64> : vector<4xi64>, "dlti.stack_alignment" = 128 : i64, "dlti.mangling_mode" = "e", "dlti.endianness" = "little">} {
  cir.func private @printIntLine(!s32i) loc(#loc280)
  cir.func internal private @badSink(%arg0: !cir.float loc(fused[#loc5, #loc6])) extra(#fn_attr) {
    %0 = cir.alloca !cir.float, !cir.ptr<!cir.float>, ["data", init] {alignment = 4 : i64} loc(#loc282)
    cir.store %arg0, %0 : !cir.float, !cir.ptr<!cir.float> loc(#loc7)
    cir.scope {
      %1 = cir.alloca !s32i, !cir.ptr<!s32i>, ["result", init] {alignment = 4 : i64} loc(#loc284)
      %2 = cir.const #cir.fp<1.000000e+02> : !cir.double loc(#loc12)
      %3 = cir.load %0 : !cir.ptr<!cir.float>, !cir.float loc(#loc13)
      %4 = cir.cast(floating, %3 : !cir.float), !cir.double loc(#loc13)
      %5 = cir.binop(div, %2, %4) : !cir.double loc(#loc285)
      %6 = cir.cast(float_to_int, %5 : !cir.double), !s32i loc(#loc285)
      cir.store %6, %1 : !s32i, !cir.ptr<!s32i> loc(#loc284)
      %7 = cir.load %1 : !cir.ptr<!s32i>, !s32i loc(#loc14)
      cir.call @printIntLine(%7) : (!s32i) -> () loc(#loc15)
    } loc(#loc283)
    cir.return loc(#loc4)
  } loc(#loc281)
  cir.func private @socket(!s32i, !s32i, !s32i) -> !s32i extra(#fn_attr1) loc(#loc286)
  cir.func private @inet_addr(!cir.ptr<!s8i>) -> !u32i extra(#fn_attr1) loc(#loc287)
  cir.global "private" constant cir_private dsolocal @".str" = #cir.const_array<"127.0.0.1\00" : !cir.array<!s8i x 10>> : !cir.array<!s8i x 10> {alignment = 1 : i64} loc(#loc20)
  cir.func private @htons(!u16i) -> !u16i extra(#fn_attr1) loc(#loc288)
  cir.func private @connect(!s32i, !cir.ptr<!ty_sockaddr>, !u32i) -> !s32i loc(#loc289)
  cir.func private @recv(!s32i, !cir.ptr<!void>, !u64i, !s32i) -> !s64i loc(#loc290)
  cir.func private @atof(!cir.ptr<!s8i>) -> !cir.double extra(#fn_attr1) loc(#loc291)
  cir.func private @close(!s32i) -> !s32i loc(#loc292)
  cir.func no_proto @CWE369_Divide_by_Zero__float_connect_socket_44_bad() extra(#fn_attr) {
    %0 = cir.alloca !cir.float, !cir.ptr<!cir.float>, ["data"] {alignment = 4 : i64} loc(#loc294)
    %1 = cir.alloca !cir.ptr<!cir.func<(!cir.float)>>, !cir.ptr<!cir.ptr<!cir.func<(!cir.float)>>>, ["funcPtr", init] {alignment = 8 : i64} loc(#loc295)
    %2 = cir.get_global @badSink : !cir.ptr<!cir.func<(!cir.float)>> loc(#loc36)
    cir.store %2, %1 : !cir.ptr<!cir.func<(!cir.float)>>, !cir.ptr<!cir.ptr<!cir.func<(!cir.float)>>> loc(#loc295)
    %3 = cir.const #cir.fp<0.000000e+00> : !cir.float loc(#loc37)
    cir.store %3, %0 : !cir.float, !cir.ptr<!cir.float> loc(#loc296)
    cir.scope {
      %6 = cir.alloca !s32i, !cir.ptr<!s32i>, ["recvResult"] {alignment = 4 : i64} loc(#loc298)
      %7 = cir.alloca !ty_sockaddr_in, !cir.ptr<!ty_sockaddr_in>, ["service"] {alignment = 4 : i64} loc(#loc299)
      %8 = cir.alloca !s32i, !cir.ptr<!s32i>, ["connectSocket", init] {alignment = 4 : i64} loc(#loc300)
      %9 = cir.alloca !cir.array<!s8i x 20>, !cir.ptr<!cir.array<!s8i x 20>>, ["inputBuffer"] {alignment = 16 : i64} loc(#loc301)
      %10 = cir.const #cir.int<1> : !s32i loc(#loc46)
      %11 = cir.unary(minus, %10) nsw : !s32i, !s32i loc(#loc46)
      cir.store %11, %8 : !s32i, !cir.ptr<!s32i> loc(#loc300)
      cir.scope {
        cir.do {
          cir.scope {
            %12 = cir.const #cir.int<2> : !s32i loc(#loc53)
            %13 = cir.const #cir.int<1> : !s32i loc(#loc54)
            %14 = cir.const #cir.int<6> : !s32i loc(#loc55)
            %15 = cir.call @socket(%12, %13, %14) : (!s32i, !s32i, !s32i) -> !s32i extra(#fn_attr1) loc(#loc56)
            cir.store %15, %8 : !s32i, !cir.ptr<!s32i> loc(#loc304)
            cir.scope {
              %49 = cir.load %8 : !cir.ptr<!s32i>, !s32i loc(#loc61)
              %50 = cir.const #cir.int<1> : !s32i loc(#loc62)
              %51 = cir.unary(minus, %50) nsw : !s32i, !s32i loc(#loc62)
              %52 = cir.cmp(eq, %49, %51) : !s32i, !cir.bool loc(#loc306)
              cir.if %52 {
                cir.break loc(#loc64)
              } loc(#loc307)
            } loc(#loc305)
            %16 = cir.cast(bitcast, %7 : !cir.ptr<!ty_sockaddr_in>), !cir.ptr<!void> loc(#loc308)
            %17 = cir.const #cir.int<0> : !s32i loc(#loc67)
            %18 = cir.const #cir.int<16> : !u64i loc(#loc309)
            cir.libc.memset %18 bytes from %16 set to %17 : !cir.ptr<!void>, !s32i, !u64i loc(#loc310)
            %19 = cir.const #cir.int<2> : !s32i loc(#loc72)
            %20 = cir.cast(integral, %19 : !s32i), !u16i loc(#loc72)
            %21 = cir.get_member %7[0] {name = "sin_family"} : !cir.ptr<!ty_sockaddr_in> -> !cir.ptr<!u16i> loc(#loc73)
            cir.store %20, %21 : !u16i, !cir.ptr<!u16i> loc(#loc311)
            %22 = cir.get_global @".str" : !cir.ptr<!cir.array<!s8i x 10>> loc(#loc20)
            %23 = cir.cast(array_to_ptrdecay, %22 : !cir.ptr<!cir.array<!s8i x 10>>), !cir.ptr<!s8i> loc(#loc20)
            %24 = cir.call @inet_addr(%23) : (!cir.ptr<!s8i>) -> !u32i extra(#fn_attr1) loc(#loc75)
            %25 = cir.get_member %7[2] {name = "sin_addr"} : !cir.ptr<!ty_sockaddr_in> -> !cir.ptr<!ty_in_addr> loc(#loc76)
            %26 = cir.get_member %25[0] {name = "s_addr"} : !cir.ptr<!ty_in_addr> -> !cir.ptr<!u32i> loc(#loc77)
            cir.store %24, %26 : !u32i, !cir.ptr<!u32i> loc(#loc312)
            %27 = cir.const #cir.int<27015> : !s32i loc(#loc80)
            %28 = cir.cast(integral, %27 : !s32i), !u16i loc(#loc80)
            %29 = cir.call @htons(%28) : (!u16i) -> !u16i side_effect(const) extra(#fn_attr1) loc(#loc81)
            %30 = cir.get_member %7[1] {name = "sin_port"} : !cir.ptr<!ty_sockaddr_in> -> !cir.ptr<!u16i> loc(#loc82)
            cir.store %29, %30 : !u16i, !cir.ptr<!u16i> loc(#loc313)
            cir.scope {
              %49 = cir.load %8 : !cir.ptr<!s32i>, !s32i loc(#loc87)
              %50 = cir.cast(bitcast, %7 : !cir.ptr<!ty_sockaddr_in>), !cir.ptr<!ty_sockaddr> loc(#loc315)
              %51 = cir.const #cir.int<16> : !u64i loc(#loc316)
              %52 = cir.cast(integral, %51 : !u64i), !u32i loc(#loc316)
              %53 = cir.call @connect(%49, %50, %52) : (!s32i, !cir.ptr<!ty_sockaddr>, !u32i) -> !s32i loc(#loc92)
              %54 = cir.const #cir.int<1> : !s32i loc(#loc93)
              %55 = cir.unary(minus, %54) nsw : !s32i, !s32i loc(#loc93)
              %56 = cir.cmp(eq, %53, %55) : !s32i, !cir.bool loc(#loc317)
              cir.if %56 {
                cir.break loc(#loc95)
              } loc(#loc318)
            } loc(#loc314)
            %31 = cir.load %8 : !cir.ptr<!s32i>, !s32i loc(#loc96)
            %32 = cir.cast(array_to_ptrdecay, %9 : !cir.ptr<!cir.array<!s8i x 20>>), !cir.ptr<!s8i> loc(#loc97)
            %33 = cir.cast(bitcast, %32 : !cir.ptr<!s8i>), !cir.ptr<!void> loc(#loc97)
            %34 = cir.const #cir.int<20> : !s32i loc(#loc98)
            %35 = cir.const #cir.int<1> : !s32i loc(#loc99)
            %36 = cir.binop(sub, %34, %35) nsw : !s32i loc(#loc98)
            %37 = cir.cast(integral, %36 : !s32i), !u64i loc(#loc98)
            %38 = cir.const #cir.int<0> : !s32i loc(#loc100)
            %39 = cir.call @recv(%31, %33, %37, %38) : (!s32i, !cir.ptr<!void>, !u64i, !s32i) -> !s64i loc(#loc101)
            %40 = cir.cast(integral, %39 : !s64i), !s32i loc(#loc101)
            cir.store %40, %6 : !s32i, !cir.ptr<!s32i> loc(#loc319)
            cir.scope {
              %49 = cir.load %6 : !cir.ptr<!s32i>, !s32i loc(#loc106)
              %50 = cir.const #cir.int<1> : !s32i loc(#loc107)
              %51 = cir.unary(minus, %50) nsw : !s32i, !s32i loc(#loc107)
              %52 = cir.cmp(eq, %49, %51) : !s32i, !cir.bool loc(#loc321)
              %53 = cir.ternary(%52, true {
                %54 = cir.const #true loc(#loc108)
                cir.yield %54 : !cir.bool loc(#loc108)
              }, false {
                %54 = cir.load %6 : !cir.ptr<!s32i>, !s32i loc(#loc109)
                %55 = cir.const #cir.int<0> : !s32i loc(#loc110)
                %56 = cir.cmp(eq, %54, %55) : !s32i, !cir.bool loc(#loc322)
                %57 = cir.ternary(%56, true {
                  %58 = cir.const #true loc(#loc108)
                  cir.yield %58 : !cir.bool loc(#loc108)
                }, false {
                  %58 = cir.const #false loc(#loc108)
                  cir.yield %58 : !cir.bool loc(#loc108)
                }) : (!cir.bool) -> !cir.bool loc(#loc108)
                cir.yield %57 : !cir.bool loc(#loc108)
              }) : (!cir.bool) -> !cir.bool loc(#loc108)
              cir.if %53 {
                cir.break loc(#loc112)
              } loc(#loc323)
            } loc(#loc320)
            %41 = cir.const #cir.int<0> : !s32i loc(#loc113)
            %42 = cir.cast(integral, %41 : !s32i), !s8i loc(#loc113)
            %43 = cir.load %6 : !cir.ptr<!s32i>, !s32i loc(#loc114)
            %44 = cir.cast(array_to_ptrdecay, %9 : !cir.ptr<!cir.array<!s8i x 20>>), !cir.ptr<!s8i> loc(#loc115)
            %45 = cir.ptr_stride(%44 : !cir.ptr<!s8i>, %43 : !s32i), !cir.ptr<!s8i> loc(#loc115)
            cir.store %42, %45 : !s8i, !cir.ptr<!s8i> loc(#loc324)
            %46 = cir.cast(array_to_ptrdecay, %9 : !cir.ptr<!cir.array<!s8i x 20>>), !cir.ptr<!s8i> loc(#loc116)
            %47 = cir.call @atof(%46) : (!cir.ptr<!s8i>) -> !cir.double side_effect(pure) extra(#fn_attr1) loc(#loc117)
            %48 = cir.cast(floating, %47 : !cir.double), !cir.float loc(#loc117)
            cir.store %48, %0 : !cir.float, !cir.ptr<!cir.float> loc(#loc325)
          } loc(#loc303)
          cir.yield loc(#loc50)
        } while {
          %12 = cir.const #cir.int<0> : !s32i loc(#loc120)
          %13 = cir.cast(int_to_bool, %12 : !s32i), !cir.bool loc(#loc120)
          cir.condition(%13) loc(#loc120)
        } loc(#loc302)
      } loc(#loc302)
      cir.scope {
        %12 = cir.load %8 : !cir.ptr<!s32i>, !s32i loc(#loc123)
        %13 = cir.const #cir.int<1> : !s32i loc(#loc124)
        %14 = cir.unary(minus, %13) nsw : !s32i, !s32i loc(#loc124)
        %15 = cir.cmp(ne, %12, %14) : !s32i, !cir.bool loc(#loc327)
        cir.if %15 {
          %16 = cir.load %8 : !cir.ptr<!s32i>, !s32i loc(#loc126)
          %17 = cir.call @close(%16) : (!s32i) -> !s32i loc(#loc127)
        } loc(#loc328)
      } loc(#loc326)
    } loc(#loc297)
    %4 = cir.load %1 : !cir.ptr<!cir.ptr<!cir.func<(!cir.float)>>>, !cir.ptr<!cir.func<(!cir.float)>> loc(#loc128)
    %5 = cir.load %0 : !cir.ptr<!cir.float>, !cir.float loc(#loc129)
    cir.call %4(%5) : (!cir.ptr<!cir.func<(!cir.float)>>, !cir.float) -> () loc(#loc128)
    cir.return loc(#loc32)
  } loc(#loc293)
  cir.func no_proto @CWE369_Divide_by_Zero__float_connect_socket_44_good() extra(#fn_attr) {
    %0 = cir.get_global @goodG2B : !cir.ptr<!cir.func<()>> loc(#loc330)
    cir.call %0() : (!cir.ptr<!cir.func<()>>) -> () loc(#loc132)
    %1 = cir.get_global @goodB2G : !cir.ptr<!cir.func<()>> loc(#loc331)
    cir.call %1() : (!cir.ptr<!cir.func<()>>) -> () loc(#loc134)
    cir.return loc(#loc131)
  } loc(#loc329)
  cir.func internal private @goodG2BSink(%arg0: !cir.float loc(fused[#loc138, #loc139])) extra(#fn_attr) {
    %0 = cir.alloca !cir.float, !cir.ptr<!cir.float>, ["data", init] {alignment = 4 : i64} loc(#loc333)
    cir.store %arg0, %0 : !cir.float, !cir.ptr<!cir.float> loc(#loc140)
    cir.scope {
      %1 = cir.alloca !s32i, !cir.ptr<!s32i>, ["result", init] {alignment = 4 : i64} loc(#loc335)
      %2 = cir.const #cir.fp<1.000000e+02> : !cir.double loc(#loc145)
      %3 = cir.load %0 : !cir.ptr<!cir.float>, !cir.float loc(#loc146)
      %4 = cir.cast(floating, %3 : !cir.float), !cir.double loc(#loc146)
      %5 = cir.binop(div, %2, %4) : !cir.double loc(#loc336)
      %6 = cir.cast(float_to_int, %5 : !cir.double), !s32i loc(#loc336)
      cir.store %6, %1 : !s32i, !cir.ptr<!s32i> loc(#loc335)
      %7 = cir.load %1 : !cir.ptr<!s32i>, !s32i loc(#loc147)
      cir.call @printIntLine(%7) : (!s32i) -> () loc(#loc148)
    } loc(#loc334)
    cir.return loc(#loc137)
  } loc(#loc332)
  cir.func no_proto internal private @goodG2B() extra(#fn_attr) {
    %0 = cir.alloca !cir.float, !cir.ptr<!cir.float>, ["data"] {alignment = 4 : i64} loc(#loc338)
    %1 = cir.alloca !cir.ptr<!cir.func<(!cir.float)>>, !cir.ptr<!cir.ptr<!cir.func<(!cir.float)>>>, ["funcPtr", init] {alignment = 8 : i64} loc(#loc339)
    %2 = cir.get_global @goodG2BSink : !cir.ptr<!cir.func<(!cir.float)>> loc(#loc154)
    cir.store %2, %1 : !cir.ptr<!cir.func<(!cir.float)>>, !cir.ptr<!cir.ptr<!cir.func<(!cir.float)>>> loc(#loc339)
    %3 = cir.const #cir.fp<0.000000e+00> : !cir.float loc(#loc155)
    cir.store %3, %0 : !cir.float, !cir.ptr<!cir.float> loc(#loc340)
    %4 = cir.const #cir.fp<2.000000e+00> : !cir.float loc(#loc157)
    cir.store %4, %0 : !cir.float, !cir.ptr<!cir.float> loc(#loc341)
    %5 = cir.load %1 : !cir.ptr<!cir.ptr<!cir.func<(!cir.float)>>>, !cir.ptr<!cir.func<(!cir.float)>> loc(#loc159)
    %6 = cir.load %0 : !cir.ptr<!cir.float>, !cir.float loc(#loc160)
    cir.call %5(%6) : (!cir.ptr<!cir.func<(!cir.float)>>, !cir.float) -> () loc(#loc159)
    cir.return loc(#loc150)
  } loc(#loc337)
  cir.func private @printLine(!cir.ptr<!s8i>) loc(#loc342)
  cir.global "private" constant cir_private dsolocal @".str.1" = #cir.const_array<"This would result in a divide by zero\00" : !cir.array<!s8i x 38>> : !cir.array<!s8i x 38> {alignment = 1 : i64} loc(#loc163)
  cir.func internal private @goodB2GSink(%arg0: !cir.float loc(fused[#loc166, #loc167])) extra(#fn_attr) {
    %0 = cir.alloca !cir.float, !cir.ptr<!cir.float>, ["data", init] {alignment = 4 : i64} loc(#loc344)
    cir.store %arg0, %0 : !cir.float, !cir.ptr<!cir.float> loc(#loc168)
    cir.scope {
      %1 = cir.load %0 : !cir.ptr<!cir.float>, !cir.float loc(#loc171)
      %2 = cir.cast(floating, %1 : !cir.float), !cir.double loc(#loc171)
      %3 = cir.fabs %2 : !cir.double loc(#loc171)
      %4 = cir.const #cir.fp<9.9999999999999995E-7> : !cir.double loc(#loc172)
      %5 = cir.cmp(gt, %3, %4) : !cir.double, !cir.bool loc(#loc346)
      cir.if %5 {
        %6 = cir.alloca !s32i, !cir.ptr<!s32i>, ["result", init] {alignment = 4 : i64} loc(#loc348)
        %7 = cir.const #cir.fp<1.000000e+02> : !cir.double loc(#loc179)
        %8 = cir.load %0 : !cir.ptr<!cir.float>, !cir.float loc(#loc180)
        %9 = cir.cast(floating, %8 : !cir.float), !cir.double loc(#loc180)
        %10 = cir.binop(div, %7, %9) : !cir.double loc(#loc349)
        %11 = cir.cast(float_to_int, %10 : !cir.double), !s32i loc(#loc349)
        cir.store %11, %6 : !s32i, !cir.ptr<!s32i> loc(#loc348)
        %12 = cir.load %6 : !cir.ptr<!s32i>, !s32i loc(#loc181)
        cir.call @printIntLine(%12) : (!s32i) -> () loc(#loc182)
      } else {
        %6 = cir.get_global @".str.1" : !cir.ptr<!cir.array<!s8i x 38>> loc(#loc163)
        %7 = cir.cast(array_to_ptrdecay, %6 : !cir.ptr<!cir.array<!s8i x 38>>), !cir.ptr<!s8i> loc(#loc163)
        cir.call @printLine(%7) : (!cir.ptr<!s8i>) -> () loc(#loc183)
      } loc(#loc347)
    } loc(#loc345)
    cir.return loc(#loc165)
  } loc(#loc343)
  cir.func no_proto internal private @goodB2G() extra(#fn_attr) {
    %0 = cir.alloca !cir.float, !cir.ptr<!cir.float>, ["data"] {alignment = 4 : i64} loc(#loc351)
    %1 = cir.alloca !cir.ptr<!cir.func<(!cir.float)>>, !cir.ptr<!cir.ptr<!cir.func<(!cir.float)>>>, ["funcPtr", init] {alignment = 8 : i64} loc(#loc352)
    %2 = cir.get_global @goodB2GSink : !cir.ptr<!cir.func<(!cir.float)>> loc(#loc189)
    cir.store %2, %1 : !cir.ptr<!cir.func<(!cir.float)>>, !cir.ptr<!cir.ptr<!cir.func<(!cir.float)>>> loc(#loc352)
    %3 = cir.const #cir.fp<0.000000e+00> : !cir.float loc(#loc190)
    cir.store %3, %0 : !cir.float, !cir.ptr<!cir.float> loc(#loc353)
    cir.scope {
      %6 = cir.alloca !s32i, !cir.ptr<!s32i>, ["recvResult"] {alignment = 4 : i64} loc(#loc355)
      %7 = cir.alloca !ty_sockaddr_in, !cir.ptr<!ty_sockaddr_in>, ["service"] {alignment = 4 : i64} loc(#loc356)
      %8 = cir.alloca !s32i, !cir.ptr<!s32i>, ["connectSocket", init] {alignment = 4 : i64} loc(#loc357)
      %9 = cir.alloca !cir.array<!s8i x 20>, !cir.ptr<!cir.array<!s8i x 20>>, ["inputBuffer"] {alignment = 16 : i64} loc(#loc358)
      %10 = cir.const #cir.int<1> : !s32i loc(#loc199)
      %11 = cir.unary(minus, %10) nsw : !s32i, !s32i loc(#loc199)
      cir.store %11, %8 : !s32i, !cir.ptr<!s32i> loc(#loc357)
      cir.scope {
        cir.do {
          cir.scope {
            %12 = cir.const #cir.int<2> : !s32i loc(#loc206)
            %13 = cir.const #cir.int<1> : !s32i loc(#loc207)
            %14 = cir.const #cir.int<6> : !s32i loc(#loc208)
            %15 = cir.call @socket(%12, %13, %14) : (!s32i, !s32i, !s32i) -> !s32i extra(#fn_attr1) loc(#loc209)
            cir.store %15, %8 : !s32i, !cir.ptr<!s32i> loc(#loc361)
            cir.scope {
              %49 = cir.load %8 : !cir.ptr<!s32i>, !s32i loc(#loc214)
              %50 = cir.const #cir.int<1> : !s32i loc(#loc215)
              %51 = cir.unary(minus, %50) nsw : !s32i, !s32i loc(#loc215)
              %52 = cir.cmp(eq, %49, %51) : !s32i, !cir.bool loc(#loc363)
              cir.if %52 {
                cir.break loc(#loc217)
              } loc(#loc364)
            } loc(#loc362)
            %16 = cir.cast(bitcast, %7 : !cir.ptr<!ty_sockaddr_in>), !cir.ptr<!void> loc(#loc365)
            %17 = cir.const #cir.int<0> : !s32i loc(#loc220)
            %18 = cir.const #cir.int<16> : !u64i loc(#loc366)
            cir.libc.memset %18 bytes from %16 set to %17 : !cir.ptr<!void>, !s32i, !u64i loc(#loc367)
            %19 = cir.const #cir.int<2> : !s32i loc(#loc225)
            %20 = cir.cast(integral, %19 : !s32i), !u16i loc(#loc225)
            %21 = cir.get_member %7[0] {name = "sin_family"} : !cir.ptr<!ty_sockaddr_in> -> !cir.ptr<!u16i> loc(#loc73)
            cir.store %20, %21 : !u16i, !cir.ptr<!u16i> loc(#loc368)
            %22 = cir.get_global @".str" : !cir.ptr<!cir.array<!s8i x 10>> loc(#loc227)
            %23 = cir.cast(array_to_ptrdecay, %22 : !cir.ptr<!cir.array<!s8i x 10>>), !cir.ptr<!s8i> loc(#loc227)
            %24 = cir.call @inet_addr(%23) : (!cir.ptr<!s8i>) -> !u32i extra(#fn_attr1) loc(#loc228)
            %25 = cir.get_member %7[2] {name = "sin_addr"} : !cir.ptr<!ty_sockaddr_in> -> !cir.ptr<!ty_in_addr> loc(#loc76)
            %26 = cir.get_member %25[0] {name = "s_addr"} : !cir.ptr<!ty_in_addr> -> !cir.ptr<!u32i> loc(#loc77)
            cir.store %24, %26 : !u32i, !cir.ptr<!u32i> loc(#loc369)
            %27 = cir.const #cir.int<27015> : !s32i loc(#loc231)
            %28 = cir.cast(integral, %27 : !s32i), !u16i loc(#loc231)
            %29 = cir.call @htons(%28) : (!u16i) -> !u16i side_effect(const) extra(#fn_attr1) loc(#loc232)
            %30 = cir.get_member %7[1] {name = "sin_port"} : !cir.ptr<!ty_sockaddr_in> -> !cir.ptr<!u16i> loc(#loc82)
            cir.store %29, %30 : !u16i, !cir.ptr<!u16i> loc(#loc370)
            cir.scope {
              %49 = cir.load %8 : !cir.ptr<!s32i>, !s32i loc(#loc237)
              %50 = cir.cast(bitcast, %7 : !cir.ptr<!ty_sockaddr_in>), !cir.ptr<!ty_sockaddr> loc(#loc372)
              %51 = cir.const #cir.int<16> : !u64i loc(#loc373)
              %52 = cir.cast(integral, %51 : !u64i), !u32i loc(#loc373)
              %53 = cir.call @connect(%49, %50, %52) : (!s32i, !cir.ptr<!ty_sockaddr>, !u32i) -> !s32i loc(#loc242)
              %54 = cir.const #cir.int<1> : !s32i loc(#loc243)
              %55 = cir.unary(minus, %54) nsw : !s32i, !s32i loc(#loc243)
              %56 = cir.cmp(eq, %53, %55) : !s32i, !cir.bool loc(#loc374)
              cir.if %56 {
                cir.break loc(#loc245)
              } loc(#loc375)
            } loc(#loc371)
            %31 = cir.load %8 : !cir.ptr<!s32i>, !s32i loc(#loc246)
            %32 = cir.cast(array_to_ptrdecay, %9 : !cir.ptr<!cir.array<!s8i x 20>>), !cir.ptr<!s8i> loc(#loc247)
            %33 = cir.cast(bitcast, %32 : !cir.ptr<!s8i>), !cir.ptr<!void> loc(#loc247)
            %34 = cir.const #cir.int<20> : !s32i loc(#loc248)
            %35 = cir.const #cir.int<1> : !s32i loc(#loc249)
            %36 = cir.binop(sub, %34, %35) nsw : !s32i loc(#loc248)
            %37 = cir.cast(integral, %36 : !s32i), !u64i loc(#loc248)
            %38 = cir.const #cir.int<0> : !s32i loc(#loc250)
            %39 = cir.call @recv(%31, %33, %37, %38) : (!s32i, !cir.ptr<!void>, !u64i, !s32i) -> !s64i loc(#loc251)
            %40 = cir.cast(integral, %39 : !s64i), !s32i loc(#loc251)
            cir.store %40, %6 : !s32i, !cir.ptr<!s32i> loc(#loc376)
            cir.scope {
              %49 = cir.load %6 : !cir.ptr<!s32i>, !s32i loc(#loc256)
              %50 = cir.const #cir.int<1> : !s32i loc(#loc257)
              %51 = cir.unary(minus, %50) nsw : !s32i, !s32i loc(#loc257)
              %52 = cir.cmp(eq, %49, %51) : !s32i, !cir.bool loc(#loc378)
              %53 = cir.ternary(%52, true {
                %54 = cir.const #true loc(#loc258)
                cir.yield %54 : !cir.bool loc(#loc258)
              }, false {
                %54 = cir.load %6 : !cir.ptr<!s32i>, !s32i loc(#loc259)
                %55 = cir.const #cir.int<0> : !s32i loc(#loc260)
                %56 = cir.cmp(eq, %54, %55) : !s32i, !cir.bool loc(#loc379)
                %57 = cir.ternary(%56, true {
                  %58 = cir.const #true loc(#loc258)
                  cir.yield %58 : !cir.bool loc(#loc258)
                }, false {
                  %58 = cir.const #false loc(#loc258)
                  cir.yield %58 : !cir.bool loc(#loc258)
                }) : (!cir.bool) -> !cir.bool loc(#loc258)
                cir.yield %57 : !cir.bool loc(#loc258)
              }) : (!cir.bool) -> !cir.bool loc(#loc258)
              cir.if %53 {
                cir.break loc(#loc262)
              } loc(#loc380)
            } loc(#loc377)
            %41 = cir.const #cir.int<0> : !s32i loc(#loc263)
            %42 = cir.cast(integral, %41 : !s32i), !s8i loc(#loc263)
            %43 = cir.load %6 : !cir.ptr<!s32i>, !s32i loc(#loc264)
            %44 = cir.cast(array_to_ptrdecay, %9 : !cir.ptr<!cir.array<!s8i x 20>>), !cir.ptr<!s8i> loc(#loc265)
            %45 = cir.ptr_stride(%44 : !cir.ptr<!s8i>, %43 : !s32i), !cir.ptr<!s8i> loc(#loc265)
            cir.store %42, %45 : !s8i, !cir.ptr<!s8i> loc(#loc381)
            %46 = cir.cast(array_to_ptrdecay, %9 : !cir.ptr<!cir.array<!s8i x 20>>), !cir.ptr<!s8i> loc(#loc266)
            %47 = cir.call @atof(%46) : (!cir.ptr<!s8i>) -> !cir.double side_effect(pure) extra(#fn_attr1) loc(#loc267)
            %48 = cir.cast(floating, %47 : !cir.double), !cir.float loc(#loc267)
            cir.store %48, %0 : !cir.float, !cir.ptr<!cir.float> loc(#loc382)
          } loc(#loc360)
          cir.yield loc(#loc203)
        } while {
          %12 = cir.const #cir.int<0> : !s32i loc(#loc270)
          %13 = cir.cast(int_to_bool, %12 : !s32i), !cir.bool loc(#loc270)
          cir.condition(%13) loc(#loc270)
        } loc(#loc359)
      } loc(#loc359)
      cir.scope {
        %12 = cir.load %8 : !cir.ptr<!s32i>, !s32i loc(#loc273)
        %13 = cir.const #cir.int<1> : !s32i loc(#loc274)
        %14 = cir.unary(minus, %13) nsw : !s32i, !s32i loc(#loc274)
        %15 = cir.cmp(ne, %12, %14) : !s32i, !cir.bool loc(#loc384)
        cir.if %15 {
          %16 = cir.load %8 : !cir.ptr<!s32i>, !s32i loc(#loc276)
          %17 = cir.call @close(%16) : (!s32i) -> !s32i loc(#loc277)
        } loc(#loc385)
      } loc(#loc383)
    } loc(#loc354)
    %4 = cir.load %1 : !cir.ptr<!cir.ptr<!cir.func<(!cir.float)>>>, !cir.ptr<!cir.func<(!cir.float)>> loc(#loc278)
    %5 = cir.load %0 : !cir.ptr<!cir.float>, !cir.float loc(#loc279)
    cir.call %4(%5) : (!cir.ptr<!cir.func<(!cir.float)>>, !cir.float) -> () loc(#loc278)
    cir.return loc(#loc185)
  } loc(#loc350)
} loc(#loc)
#loc = loc("/workspaces/juliet-c/testcases/CWE369_Divide_by_Zero/s01/CWE369_Divide_by_Zero__float_connect_socket_44.c":0:0)
#loc1 = loc("../../../testcasesupport/std_testcase_io.h":18:1)
#loc2 = loc("../../../testcasesupport/std_testcase_io.h":18:33)
#loc3 = loc("CWE369_Divide_by_Zero__float_connect_socket_44.c":46:1)
#loc4 = loc("CWE369_Divide_by_Zero__float_connect_socket_44.c":53:1)
#loc7 = loc("CWE369_Divide_by_Zero__float_connect_socket_44.c":47:1)
#loc8 = loc("CWE369_Divide_by_Zero__float_connect_socket_44.c":48:5)
#loc9 = loc("CWE369_Divide_by_Zero__float_connect_socket_44.c":52:5)
#loc10 = loc("CWE369_Divide_by_Zero__float_connect_socket_44.c":50:9)
#loc11 = loc("CWE369_Divide_by_Zero__float_connect_socket_44.c":50:40)
#loc12 = loc("CWE369_Divide_by_Zero__float_connect_socket_44.c":50:28)
#loc13 = loc("CWE369_Divide_by_Zero__float_connect_socket_44.c":50:36)
#loc14 = loc("CWE369_Divide_by_Zero__float_connect_socket_44.c":51:22)
#loc15 = loc("CWE369_Divide_by_Zero__float_connect_socket_44.c":51:9)
#loc16 = loc("/usr/include/x86_64-linux-gnu/sys/socket.h":102:1)
#loc17 = loc("/usr/include/x86_64-linux-gnu/sys/socket.h":102:62)
#loc18 = loc("/usr/include/arpa/inet.h":34:1)
#loc19 = loc("/usr/include/arpa/inet.h":34:47)
#loc20 = loc("CWE369_Divide_by_Zero__float_connect_socket_44.c":87:49)
#loc21 = loc("/usr/include/netinet/in.h":402:1)
#loc22 = loc("/usr/include/netinet/in.h":403:40)
#loc23 = loc("/usr/include/x86_64-linux-gnu/sys/socket.h":126:1)
#loc24 = loc("/usr/include/x86_64-linux-gnu/sys/socket.h":126:75)
#loc25 = loc("/usr/include/x86_64-linux-gnu/sys/socket.h":145:1)
#loc26 = loc("/usr/include/x86_64-linux-gnu/sys/socket.h":145:68)
#loc27 = loc("/usr/include/stdlib.h":102:1)
#loc28 = loc("/usr/include/stdlib.h":103:33)
#loc29 = loc("/usr/include/unistd.h":358:1)
#loc30 = loc("/usr/include/unistd.h":358:27)
#loc31 = loc("CWE369_Divide_by_Zero__float_connect_socket_44.c":55:1)
#loc32 = loc("CWE369_Divide_by_Zero__float_connect_socket_44.c":120:1)
#loc33 = loc("CWE369_Divide_by_Zero__float_connect_socket_44.c":57:5)
#loc34 = loc("CWE369_Divide_by_Zero__float_connect_socket_44.c":57:11)
#loc35 = loc("CWE369_Divide_by_Zero__float_connect_socket_44.c":59:5)
#loc36 = loc("CWE369_Divide_by_Zero__float_connect_socket_44.c":59:31)
#loc37 = loc("CWE369_Divide_by_Zero__float_connect_socket_44.c":61:12)
#loc38 = loc("CWE369_Divide_by_Zero__float_connect_socket_44.c":61:5)
#loc39 = loc("CWE369_Divide_by_Zero__float_connect_socket_44.c":62:5)
#loc40 = loc("CWE369_Divide_by_Zero__float_connect_socket_44.c":117:5)
#loc41 = loc("CWE369_Divide_by_Zero__float_connect_socket_44.c":67:9)
#loc42 = loc("CWE369_Divide_by_Zero__float_connect_socket_44.c":67:13)
#loc43 = loc("CWE369_Divide_by_Zero__float_connect_socket_44.c":68:9)
#loc44 = loc("CWE369_Divide_by_Zero__float_connect_socket_44.c":68:28)
#loc45 = loc("CWE369_Divide_by_Zero__float_connect_socket_44.c":69:9)
#loc46 = loc("CWE369_Divide_by_Zero__float_connect_socket_44.c":69:32)
#loc47 = loc("CWE369_Divide_by_Zero__float_connect_socket_44.c":70:9)
#loc48 = loc("CWE369_Divide_by_Zero__float_connect_socket_44.c":70:41)
#loc49 = loc("CWE369_Divide_by_Zero__float_connect_socket_44.c":71:9)
#loc50 = loc("CWE369_Divide_by_Zero__float_connect_socket_44.c":106:17)
#loc51 = loc("CWE369_Divide_by_Zero__float_connect_socket_44.c":72:9)
#loc52 = loc("CWE369_Divide_by_Zero__float_connect_socket_44.c":105:9)
#loc53 = loc("CWE369_Divide_by_Zero__float_connect_socket_44.c":80:36)
#loc54 = loc("CWE369_Divide_by_Zero__float_connect_socket_44.c":80:45)
#loc55 = loc("CWE369_Divide_by_Zero__float_connect_socket_44.c":80:58)
#loc56 = loc("CWE369_Divide_by_Zero__float_connect_socket_44.c":80:29)
#loc57 = loc("CWE369_Divide_by_Zero__float_connect_socket_44.c":80:13)
#loc58 = loc("CWE369_Divide_by_Zero__float_connect_socket_44.c":80:69)
#loc59 = loc("CWE369_Divide_by_Zero__float_connect_socket_44.c":81:13)
#loc60 = loc("CWE369_Divide_by_Zero__float_connect_socket_44.c":84:13)
#loc61 = loc("CWE369_Divide_by_Zero__float_connect_socket_44.c":81:17)
#loc62 = loc("CWE369_Divide_by_Zero__float_connect_socket_44.c":81:34)
#loc63 = loc("CWE369_Divide_by_Zero__float_connect_socket_44.c":82:13)
#loc64 = loc("CWE369_Divide_by_Zero__float_connect_socket_44.c":83:17)
#loc65 = loc("CWE369_Divide_by_Zero__float_connect_socket_44.c":85:20)
#loc66 = loc("CWE369_Divide_by_Zero__float_connect_socket_44.c":85:21)
#loc67 = loc("CWE369_Divide_by_Zero__float_connect_socket_44.c":85:30)
#loc68 = loc("CWE369_Divide_by_Zero__float_connect_socket_44.c":85:33)
#loc69 = loc("CWE369_Divide_by_Zero__float_connect_socket_44.c":85:47)
#loc70 = loc("CWE369_Divide_by_Zero__float_connect_socket_44.c":85:13)
#loc71 = loc("CWE369_Divide_by_Zero__float_connect_socket_44.c":85:48)
#loc72 = loc("CWE369_Divide_by_Zero__float_connect_socket_44.c":86:34)
#loc73 = loc("/usr/include/netinet/in.h":249:5)
#loc74 = loc("CWE369_Divide_by_Zero__float_connect_socket_44.c":86:13)
#loc75 = loc("CWE369_Divide_by_Zero__float_connect_socket_44.c":87:39)
#loc76 = loc("/usr/include/netinet/in.h":251:20)
#loc77 = loc("/usr/include/netinet/in.h":33:15)
#loc78 = loc("CWE369_Divide_by_Zero__float_connect_socket_44.c":87:13)
#loc79 = loc("CWE369_Divide_by_Zero__float_connect_socket_44.c":87:59)
#loc80 = loc("CWE369_Divide_by_Zero__float_connect_socket_44.c":88:38)
#loc81 = loc("CWE369_Divide_by_Zero__float_connect_socket_44.c":88:32)
#loc82 = loc("/usr/include/netinet/in.h":250:15)
#loc83 = loc("CWE369_Divide_by_Zero__float_connect_socket_44.c":88:13)
#loc84 = loc("CWE369_Divide_by_Zero__float_connect_socket_44.c":88:46)
#loc85 = loc("CWE369_Divide_by_Zero__float_connect_socket_44.c":89:13)
#loc86 = loc("CWE369_Divide_by_Zero__float_connect_socket_44.c":92:13)
#loc87 = loc("CWE369_Divide_by_Zero__float_connect_socket_44.c":89:25)
#loc88 = loc("CWE369_Divide_by_Zero__float_connect_socket_44.c":89:58)
#loc89 = loc("CWE369_Divide_by_Zero__float_connect_socket_44.c":89:59)
#loc90 = loc("CWE369_Divide_by_Zero__float_connect_socket_44.c":89:68)
#loc91 = loc("CWE369_Divide_by_Zero__float_connect_socket_44.c":89:82)
#loc92 = loc("CWE369_Divide_by_Zero__float_connect_socket_44.c":89:17)
#loc93 = loc("CWE369_Divide_by_Zero__float_connect_socket_44.c":89:88)
#loc94 = loc("CWE369_Divide_by_Zero__float_connect_socket_44.c":90:13)
#loc95 = loc("CWE369_Divide_by_Zero__float_connect_socket_44.c":91:17)
#loc96 = loc("CWE369_Divide_by_Zero__float_connect_socket_44.c":96:31)
#loc97 = loc("CWE369_Divide_by_Zero__float_connect_socket_44.c":96:46)
#loc98 = loc("CWE369_Divide_by_Zero__float_connect_socket_44.c":96:59)
#loc99 = loc("CWE369_Divide_by_Zero__float_connect_socket_44.c":96:77)
#loc100 = loc("CWE369_Divide_by_Zero__float_connect_socket_44.c":96:80)
#loc101 = loc("CWE369_Divide_by_Zero__float_connect_socket_44.c":96:26)
#loc102 = loc("CWE369_Divide_by_Zero__float_connect_socket_44.c":96:13)
#loc103 = loc("CWE369_Divide_by_Zero__float_connect_socket_44.c":96:81)
#loc104 = loc("CWE369_Divide_by_Zero__float_connect_socket_44.c":97:13)
#loc105 = loc("CWE369_Divide_by_Zero__float_connect_socket_44.c":100:13)
#loc106 = loc("CWE369_Divide_by_Zero__float_connect_socket_44.c":97:17)
#loc107 = loc("CWE369_Divide_by_Zero__float_connect_socket_44.c":97:31)
#loc108 = loc("CWE369_Divide_by_Zero__float_connect_socket_44.c":97:44)
#loc109 = loc("CWE369_Divide_by_Zero__float_connect_socket_44.c":97:47)
#loc110 = loc("CWE369_Divide_by_Zero__float_connect_socket_44.c":97:61)
#loc111 = loc("CWE369_Divide_by_Zero__float_connect_socket_44.c":98:13)
#loc112 = loc("CWE369_Divide_by_Zero__float_connect_socket_44.c":99:17)
#loc113 = loc("CWE369_Divide_by_Zero__float_connect_socket_44.c":102:39)
#loc114 = loc("CWE369_Divide_by_Zero__float_connect_socket_44.c":102:25)
#loc115 = loc("CWE369_Divide_by_Zero__float_connect_socket_44.c":102:13)
#loc116 = loc("CWE369_Divide_by_Zero__float_connect_socket_44.c":104:32)
#loc117 = loc("CWE369_Divide_by_Zero__float_connect_socket_44.c":104:27)
#loc118 = loc("CWE369_Divide_by_Zero__float_connect_socket_44.c":104:13)
#loc119 = loc("CWE369_Divide_by_Zero__float_connect_socket_44.c":104:43)
#loc120 = loc("CWE369_Divide_by_Zero__float_connect_socket_44.c":106:16)
#loc121 = loc("CWE369_Divide_by_Zero__float_connect_socket_44.c":107:9)
#loc122 = loc("CWE369_Divide_by_Zero__float_connect_socket_44.c":110:9)
#loc123 = loc("CWE369_Divide_by_Zero__float_connect_socket_44.c":107:13)
#loc124 = loc("CWE369_Divide_by_Zero__float_connect_socket_44.c":107:30)
#loc125 = loc("CWE369_Divide_by_Zero__float_connect_socket_44.c":108:9)
#loc126 = loc("CWE369_Divide_by_Zero__float_connect_socket_44.c":109:26)
#loc127 = loc("CWE369_Divide_by_Zero__float_connect_socket_44.c":109:13)
#loc128 = loc("CWE369_Divide_by_Zero__float_connect_socket_44.c":119:5)
#loc129 = loc("CWE369_Divide_by_Zero__float_connect_socket_44.c":119:13)
#loc130 = loc("CWE369_Divide_by_Zero__float_connect_socket_44.c":227:1)
#loc131 = loc("CWE369_Divide_by_Zero__float_connect_socket_44.c":231:1)
#loc132 = loc("CWE369_Divide_by_Zero__float_connect_socket_44.c":229:5)
#loc133 = loc("CWE369_Divide_by_Zero__float_connect_socket_44.c":229:13)
#loc134 = loc("CWE369_Divide_by_Zero__float_connect_socket_44.c":230:5)
#loc135 = loc("CWE369_Divide_by_Zero__float_connect_socket_44.c":230:13)
#loc136 = loc("CWE369_Divide_by_Zero__float_connect_socket_44.c":127:1)
#loc137 = loc("CWE369_Divide_by_Zero__float_connect_socket_44.c":134:1)
#loc140 = loc("CWE369_Divide_by_Zero__float_connect_socket_44.c":128:1)
#loc141 = loc("CWE369_Divide_by_Zero__float_connect_socket_44.c":129:5)
#loc142 = loc("CWE369_Divide_by_Zero__float_connect_socket_44.c":133:5)
#loc143 = loc("CWE369_Divide_by_Zero__float_connect_socket_44.c":131:9)
#loc144 = loc("CWE369_Divide_by_Zero__float_connect_socket_44.c":131:40)
#loc145 = loc("CWE369_Divide_by_Zero__float_connect_socket_44.c":131:28)
#loc146 = loc("CWE369_Divide_by_Zero__float_connect_socket_44.c":131:36)
#loc147 = loc("CWE369_Divide_by_Zero__float_connect_socket_44.c":132:22)
#loc148 = loc("CWE369_Divide_by_Zero__float_connect_socket_44.c":132:9)
#loc149 = loc("CWE369_Divide_by_Zero__float_connect_socket_44.c":136:1)
#loc150 = loc("CWE369_Divide_by_Zero__float_connect_socket_44.c":145:1)
#loc151 = loc("CWE369_Divide_by_Zero__float_connect_socket_44.c":138:5)
#loc152 = loc("CWE369_Divide_by_Zero__float_connect_socket_44.c":138:11)
#loc153 = loc("CWE369_Divide_by_Zero__float_connect_socket_44.c":139:5)
#loc154 = loc("CWE369_Divide_by_Zero__float_connect_socket_44.c":139:31)
#loc155 = loc("CWE369_Divide_by_Zero__float_connect_socket_44.c":141:12)
#loc156 = loc("CWE369_Divide_by_Zero__float_connect_socket_44.c":141:5)
#loc157 = loc("CWE369_Divide_by_Zero__float_connect_socket_44.c":143:12)
#loc158 = loc("CWE369_Divide_by_Zero__float_connect_socket_44.c":143:5)
#loc159 = loc("CWE369_Divide_by_Zero__float_connect_socket_44.c":144:5)
#loc160 = loc("CWE369_Divide_by_Zero__float_connect_socket_44.c":144:13)
#loc161 = loc("../../../testcasesupport/std_testcase_io.h":14:1)
#loc162 = loc("../../../testcasesupport/std_testcase_io.h":14:33)
#loc163 = loc("CWE369_Divide_by_Zero__float_connect_socket_44.c":158:19)
#loc164 = loc("CWE369_Divide_by_Zero__float_connect_socket_44.c":148:1)
#loc165 = loc("CWE369_Divide_by_Zero__float_connect_socket_44.c":160:1)
#loc168 = loc("CWE369_Divide_by_Zero__float_connect_socket_44.c":149:1)
#loc169 = loc("CWE369_Divide_by_Zero__float_connect_socket_44.c":151:5)
#loc170 = loc("CWE369_Divide_by_Zero__float_connect_socket_44.c":159:5)
#loc171 = loc("CWE369_Divide_by_Zero__float_connect_socket_44.c":151:13)
#loc172 = loc("CWE369_Divide_by_Zero__float_connect_socket_44.c":151:21)
#loc173 = loc("CWE369_Divide_by_Zero__float_connect_socket_44.c":151:8)
#loc174 = loc("CWE369_Divide_by_Zero__float_connect_socket_44.c":152:5)
#loc175 = loc("CWE369_Divide_by_Zero__float_connect_socket_44.c":155:5)
#loc176 = loc("CWE369_Divide_by_Zero__float_connect_socket_44.c":157:5)
#loc177 = loc("CWE369_Divide_by_Zero__float_connect_socket_44.c":153:9)
#loc178 = loc("CWE369_Divide_by_Zero__float_connect_socket_44.c":153:40)
#loc179 = loc("CWE369_Divide_by_Zero__float_connect_socket_44.c":153:28)
#loc180 = loc("CWE369_Divide_by_Zero__float_connect_socket_44.c":153:36)
#loc181 = loc("CWE369_Divide_by_Zero__float_connect_socket_44.c":154:22)
#loc182 = loc("CWE369_Divide_by_Zero__float_connect_socket_44.c":154:9)
#loc183 = loc("CWE369_Divide_by_Zero__float_connect_socket_44.c":158:9)
#loc184 = loc("CWE369_Divide_by_Zero__float_connect_socket_44.c":162:1)
#loc185 = loc("CWE369_Divide_by_Zero__float_connect_socket_44.c":225:1)
#loc186 = loc("CWE369_Divide_by_Zero__float_connect_socket_44.c":164:5)
#loc187 = loc("CWE369_Divide_by_Zero__float_connect_socket_44.c":164:11)
#loc188 = loc("CWE369_Divide_by_Zero__float_connect_socket_44.c":165:5)
#loc189 = loc("CWE369_Divide_by_Zero__float_connect_socket_44.c":165:31)
#loc190 = loc("CWE369_Divide_by_Zero__float_connect_socket_44.c":167:12)
#loc191 = loc("CWE369_Divide_by_Zero__float_connect_socket_44.c":167:5)
#loc192 = loc("CWE369_Divide_by_Zero__float_connect_socket_44.c":168:5)
#loc193 = loc("CWE369_Divide_by_Zero__float_connect_socket_44.c":223:5)
#loc194 = loc("CWE369_Divide_by_Zero__float_connect_socket_44.c":173:9)
#loc195 = loc("CWE369_Divide_by_Zero__float_connect_socket_44.c":173:13)
#loc196 = loc("CWE369_Divide_by_Zero__float_connect_socket_44.c":174:9)
#loc197 = loc("CWE369_Divide_by_Zero__float_connect_socket_44.c":174:28)
#loc198 = loc("CWE369_Divide_by_Zero__float_connect_socket_44.c":175:9)
#loc199 = loc("CWE369_Divide_by_Zero__float_connect_socket_44.c":175:32)
#loc200 = loc("CWE369_Divide_by_Zero__float_connect_socket_44.c":176:9)
#loc201 = loc("CWE369_Divide_by_Zero__float_connect_socket_44.c":176:41)
#loc202 = loc("CWE369_Divide_by_Zero__float_connect_socket_44.c":177:9)
#loc203 = loc("CWE369_Divide_by_Zero__float_connect_socket_44.c":212:17)
#loc204 = loc("CWE369_Divide_by_Zero__float_connect_socket_44.c":178:9)
#loc205 = loc("CWE369_Divide_by_Zero__float_connect_socket_44.c":211:9)
#loc206 = loc("CWE369_Divide_by_Zero__float_connect_socket_44.c":186:36)
#loc207 = loc("CWE369_Divide_by_Zero__float_connect_socket_44.c":186:45)
#loc208 = loc("CWE369_Divide_by_Zero__float_connect_socket_44.c":186:58)
#loc209 = loc("CWE369_Divide_by_Zero__float_connect_socket_44.c":186:29)
#loc210 = loc("CWE369_Divide_by_Zero__float_connect_socket_44.c":186:13)
#loc211 = loc("CWE369_Divide_by_Zero__float_connect_socket_44.c":186:69)
#loc212 = loc("CWE369_Divide_by_Zero__float_connect_socket_44.c":187:13)
#loc213 = loc("CWE369_Divide_by_Zero__float_connect_socket_44.c":190:13)
#loc214 = loc("CWE369_Divide_by_Zero__float_connect_socket_44.c":187:17)
#loc215 = loc("CWE369_Divide_by_Zero__float_connect_socket_44.c":187:34)
#loc216 = loc("CWE369_Divide_by_Zero__float_connect_socket_44.c":188:13)
#loc217 = loc("CWE369_Divide_by_Zero__float_connect_socket_44.c":189:17)
#loc218 = loc("CWE369_Divide_by_Zero__float_connect_socket_44.c":191:20)
#loc219 = loc("CWE369_Divide_by_Zero__float_connect_socket_44.c":191:21)
#loc220 = loc("CWE369_Divide_by_Zero__float_connect_socket_44.c":191:30)
#loc221 = loc("CWE369_Divide_by_Zero__float_connect_socket_44.c":191:33)
#loc222 = loc("CWE369_Divide_by_Zero__float_connect_socket_44.c":191:47)
#loc223 = loc("CWE369_Divide_by_Zero__float_connect_socket_44.c":191:13)
#loc224 = loc("CWE369_Divide_by_Zero__float_connect_socket_44.c":191:48)
#loc225 = loc("CWE369_Divide_by_Zero__float_connect_socket_44.c":192:34)
#loc226 = loc("CWE369_Divide_by_Zero__float_connect_socket_44.c":192:13)
#loc227 = loc("CWE369_Divide_by_Zero__float_connect_socket_44.c":193:49)
#loc228 = loc("CWE369_Divide_by_Zero__float_connect_socket_44.c":193:39)
#loc229 = loc("CWE369_Divide_by_Zero__float_connect_socket_44.c":193:13)
#loc230 = loc("CWE369_Divide_by_Zero__float_connect_socket_44.c":193:59)
#loc231 = loc("CWE369_Divide_by_Zero__float_connect_socket_44.c":194:38)
#loc232 = loc("CWE369_Divide_by_Zero__float_connect_socket_44.c":194:32)
#loc233 = loc("CWE369_Divide_by_Zero__float_connect_socket_44.c":194:13)
#loc234 = loc("CWE369_Divide_by_Zero__float_connect_socket_44.c":194:46)
#loc235 = loc("CWE369_Divide_by_Zero__float_connect_socket_44.c":195:13)
#loc236 = loc("CWE369_Divide_by_Zero__float_connect_socket_44.c":198:13)
#loc237 = loc("CWE369_Divide_by_Zero__float_connect_socket_44.c":195:25)
#loc238 = loc("CWE369_Divide_by_Zero__float_connect_socket_44.c":195:58)
#loc239 = loc("CWE369_Divide_by_Zero__float_connect_socket_44.c":195:59)
#loc240 = loc("CWE369_Divide_by_Zero__float_connect_socket_44.c":195:68)
#loc241 = loc("CWE369_Divide_by_Zero__float_connect_socket_44.c":195:82)
#loc242 = loc("CWE369_Divide_by_Zero__float_connect_socket_44.c":195:17)
#loc243 = loc("CWE369_Divide_by_Zero__float_connect_socket_44.c":195:88)
#loc244 = loc("CWE369_Divide_by_Zero__float_connect_socket_44.c":196:13)
#loc245 = loc("CWE369_Divide_by_Zero__float_connect_socket_44.c":197:17)
#loc246 = loc("CWE369_Divide_by_Zero__float_connect_socket_44.c":202:31)
#loc247 = loc("CWE369_Divide_by_Zero__float_connect_socket_44.c":202:46)
#loc248 = loc("CWE369_Divide_by_Zero__float_connect_socket_44.c":202:59)
#loc249 = loc("CWE369_Divide_by_Zero__float_connect_socket_44.c":202:77)
#loc250 = loc("CWE369_Divide_by_Zero__float_connect_socket_44.c":202:80)
#loc251 = loc("CWE369_Divide_by_Zero__float_connect_socket_44.c":202:26)
#loc252 = loc("CWE369_Divide_by_Zero__float_connect_socket_44.c":202:13)
#loc253 = loc("CWE369_Divide_by_Zero__float_connect_socket_44.c":202:81)
#loc254 = loc("CWE369_Divide_by_Zero__float_connect_socket_44.c":203:13)
#loc255 = loc("CWE369_Divide_by_Zero__float_connect_socket_44.c":206:13)
#loc256 = loc("CWE369_Divide_by_Zero__float_connect_socket_44.c":203:17)
#loc257 = loc("CWE369_Divide_by_Zero__float_connect_socket_44.c":203:31)
#loc258 = loc("CWE369_Divide_by_Zero__float_connect_socket_44.c":203:44)
#loc259 = loc("CWE369_Divide_by_Zero__float_connect_socket_44.c":203:47)
#loc260 = loc("CWE369_Divide_by_Zero__float_connect_socket_44.c":203:61)
#loc261 = loc("CWE369_Divide_by_Zero__float_connect_socket_44.c":204:13)
#loc262 = loc("CWE369_Divide_by_Zero__float_connect_socket_44.c":205:17)
#loc263 = loc("CWE369_Divide_by_Zero__float_connect_socket_44.c":208:39)
#loc264 = loc("CWE369_Divide_by_Zero__float_connect_socket_44.c":208:25)
#loc265 = loc("CWE369_Divide_by_Zero__float_connect_socket_44.c":208:13)
#loc266 = loc("CWE369_Divide_by_Zero__float_connect_socket_44.c":210:32)
#loc267 = loc("CWE369_Divide_by_Zero__float_connect_socket_44.c":210:27)
#loc268 = loc("CWE369_Divide_by_Zero__float_connect_socket_44.c":210:13)
#loc269 = loc("CWE369_Divide_by_Zero__float_connect_socket_44.c":210:43)
#loc270 = loc("CWE369_Divide_by_Zero__float_connect_socket_44.c":212:16)
#loc271 = loc("CWE369_Divide_by_Zero__float_connect_socket_44.c":213:9)
#loc272 = loc("CWE369_Divide_by_Zero__float_connect_socket_44.c":216:9)
#loc273 = loc("CWE369_Divide_by_Zero__float_connect_socket_44.c":213:13)
#loc274 = loc("CWE369_Divide_by_Zero__float_connect_socket_44.c":213:30)
#loc275 = loc("CWE369_Divide_by_Zero__float_connect_socket_44.c":214:9)
#loc276 = loc("CWE369_Divide_by_Zero__float_connect_socket_44.c":215:26)
#loc277 = loc("CWE369_Divide_by_Zero__float_connect_socket_44.c":215:13)
#loc278 = loc("CWE369_Divide_by_Zero__float_connect_socket_44.c":224:5)
#loc279 = loc("CWE369_Divide_by_Zero__float_connect_socket_44.c":224:13)
#loc280 = loc(fused[#loc1, #loc2])
#loc281 = loc(fused[#loc3, #loc4])
#loc283 = loc(fused[#loc8, #loc9])
#loc284 = loc(fused[#loc10, #loc11])
#loc285 = loc(fused[#loc12, #loc13])
#loc286 = loc(fused[#loc16, #loc17])
#loc287 = loc(fused[#loc18, #loc19])
#loc288 = loc(fused[#loc21, #loc22])
#loc289 = loc(fused[#loc23, #loc24])
#loc290 = loc(fused[#loc25, #loc26])
#loc291 = loc(fused[#loc27, #loc28])
#loc292 = loc(fused[#loc29, #loc30])
#loc293 = loc(fused[#loc31, #loc32])
#loc294 = loc(fused[#loc33, #loc34])
#loc295 = loc(fused[#loc35, #loc36])
#loc296 = loc(fused[#loc38, #loc37])
#loc297 = loc(fused[#loc39, #loc40])
#loc298 = loc(fused[#loc41, #loc42])
#loc299 = loc(fused[#loc43, #loc44])
#loc300 = loc(fused[#loc45, #loc46])
#loc301 = loc(fused[#loc47, #loc48])
#loc302 = loc(fused[#loc49, #loc50])
#loc303 = loc(fused[#loc51, #loc52])
#loc304 = loc(fused[#loc57, #loc58])
#loc305 = loc(fused[#loc59, #loc60])
#loc306 = loc(fused[#loc61, #loc62])
#loc307 = loc(fused[#loc63, #loc60])
#loc308 = loc(fused[#loc65, #loc66])
#loc309 = loc(fused[#loc68, #loc69])
#loc310 = loc(fused[#loc70, #loc71])
#loc311 = loc(fused[#loc74, #loc72])
#loc312 = loc(fused[#loc78, #loc79])
#loc313 = loc(fused[#loc83, #loc84])
#loc314 = loc(fused[#loc85, #loc86])
#loc315 = loc(fused[#loc88, #loc89])
#loc316 = loc(fused[#loc90, #loc91])
#loc317 = loc(fused[#loc92, #loc93])
#loc318 = loc(fused[#loc94, #loc86])
#loc319 = loc(fused[#loc102, #loc103])
#loc320 = loc(fused[#loc104, #loc105])
#loc321 = loc(fused[#loc106, #loc107])
#loc322 = loc(fused[#loc109, #loc110])
#loc323 = loc(fused[#loc111, #loc105])
#loc324 = loc(fused[#loc115, #loc113])
#loc325 = loc(fused[#loc118, #loc119])
#loc326 = loc(fused[#loc121, #loc122])
#loc327 = loc(fused[#loc123, #loc124])
#loc328 = loc(fused[#loc125, #loc122])
#loc329 = loc(fused[#loc130, #loc131])
#loc330 = loc(fused[#loc132, #loc133])
#loc331 = loc(fused[#loc134, #loc135])
#loc332 = loc(fused[#loc136, #loc137])
#loc334 = loc(fused[#loc141, #loc142])
#loc335 = loc(fused[#loc143, #loc144])
#loc336 = loc(fused[#loc145, #loc146])
#loc337 = loc(fused[#loc149, #loc150])
#loc338 = loc(fused[#loc151, #loc152])
#loc339 = loc(fused[#loc153, #loc154])
#loc340 = loc(fused[#loc156, #loc155])
#loc341 = loc(fused[#loc158, #loc157])
#loc342 = loc(fused[#loc161, #loc162])
#loc343 = loc(fused[#loc164, #loc165])
#loc345 = loc(fused[#loc169, #loc170])
#loc346 = loc(fused[#loc173, #loc172])
#loc347 = loc(fused[#loc174, #loc175, #loc176, #loc170])
#loc348 = loc(fused[#loc177, #loc178])
#loc349 = loc(fused[#loc179, #loc180])
#loc350 = loc(fused[#loc184, #loc185])
#loc351 = loc(fused[#loc186, #loc187])
#loc352 = loc(fused[#loc188, #loc189])
#loc353 = loc(fused[#loc191, #loc190])
#loc354 = loc(fused[#loc192, #loc193])
#loc355 = loc(fused[#loc194, #loc195])
#loc356 = loc(fused[#loc196, #loc197])
#loc357 = loc(fused[#loc198, #loc199])
#loc358 = loc(fused[#loc200, #loc201])
#loc359 = loc(fused[#loc202, #loc203])
#loc360 = loc(fused[#loc204, #loc205])
#loc361 = loc(fused[#loc210, #loc211])
#loc362 = loc(fused[#loc212, #loc213])
#loc363 = loc(fused[#loc214, #loc215])
#loc364 = loc(fused[#loc216, #loc213])
#loc365 = loc(fused[#loc218, #loc219])
#loc366 = loc(fused[#loc221, #loc222])
#loc367 = loc(fused[#loc223, #loc224])
#loc368 = loc(fused[#loc226, #loc225])
#loc369 = loc(fused[#loc229, #loc230])
#loc370 = loc(fused[#loc233, #loc234])
#loc371 = loc(fused[#loc235, #loc236])
#loc372 = loc(fused[#loc238, #loc239])
#loc373 = loc(fused[#loc240, #loc241])
#loc374 = loc(fused[#loc242, #loc243])
#loc375 = loc(fused[#loc244, #loc236])
#loc376 = loc(fused[#loc252, #loc253])
#loc377 = loc(fused[#loc254, #loc255])
#loc378 = loc(fused[#loc256, #loc257])
#loc379 = loc(fused[#loc259, #loc260])
#loc380 = loc(fused[#loc261, #loc255])
#loc381 = loc(fused[#loc265, #loc263])
#loc382 = loc(fused[#loc268, #loc269])
#loc383 = loc(fused[#loc271, #loc272])
#loc384 = loc(fused[#loc273, #loc274])
#loc385 = loc(fused[#loc275, #loc272])
