!s32i = !cir.int<s, 32>
!s8i = !cir.int<s, 8>
!u64i = !cir.int<u, 64>
!void = !cir.void
#fn_attr = #cir<extra({nothrow = #cir.nothrow})>
#fn_attr1 = #cir<extra({inline = #cir.inline<no>, optnone = #cir.optnone, uwtable = #cir.uwtable<async>})>
module @"/workspaces/juliet-c/testcases/CWE122_Heap_Based_Buffer_Overflow/s11/CWE122_Heap_Based_Buffer_Overflow__placement_new_64a.cpp" attributes {cir.lang = #cir.lang<cxx>, cir.sob = #cir.signed_overflow_behavior<undefined>, cir.triple = "x86_64-unknown-linux-gnu", cir.type_size_info = #cir.type_size_info<char = 8, int = 32, size_t = 64>, cir.uwtable = #cir.uwtable<async>, dlti.dl_spec = #dlti.dl_spec<!llvm.ptr<271> = dense<32> : vector<4xi64>, !llvm.ptr<272> = dense<64> : vector<4xi64>, f128 = dense<128> : vector<2xi64>, f64 = dense<64> : vector<2xi64>, f80 = dense<128> : vector<2xi64>, i64 = dense<64> : vector<2xi64>, i128 = dense<128> : vector<2xi64>, i1 = dense<8> : vector<2xi64>, i8 = dense<8> : vector<2xi64>, !llvm.ptr = dense<64> : vector<4xi64>, i32 = dense<32> : vector<2xi64>, f16 = dense<16> : vector<2xi64>, !llvm.ptr<270> = dense<32> : vector<4xi64>, i16 = dense<16> : vector<2xi64>, "dlti.endianness" = "little", "dlti.mangling_mode" = "e", "dlti.stack_alignment" = 128 : i64>} {
  cir.func private @malloc(!u64i) -> !cir.ptr<!void> extra(#fn_attr) loc(#loc120)
  cir.func private @exit(!s32i) extra(#fn_attr) loc(#loc121)
  cir.func private @_ZN51CWE122_Heap_Based_Buffer_Overflow__placement_new_647badSinkEPv(!cir.ptr<!void>) loc(#loc122)
  cir.func @_ZN51CWE122_Heap_Based_Buffer_Overflow__placement_new_643badEv() extra(#fn_attr1) {
    %0 = cir.alloca !cir.ptr<!s8i>, !cir.ptr<!cir.ptr<!s8i>>, ["data"] {alignment = 8 : i64} loc(#loc124)
    %1 = cir.alloca !cir.ptr<!s8i>, !cir.ptr<!cir.ptr<!s8i>>, ["dataBadBuffer", init] {alignment = 8 : i64} loc(#loc125)
    %2 = cir.alloca !cir.ptr<!s8i>, !cir.ptr<!cir.ptr<!s8i>>, ["dataGoodBuffer", init] {alignment = 8 : i64} loc(#loc126)
    %3 = cir.get_global @malloc : !cir.ptr<!cir.func<(!u64i) -> !cir.ptr<!void>>> loc(#loc15)
    %4 = cir.const #cir.int<4> : !u64i loc(#loc127)
    %5 = cir.call @malloc(%4) : (!u64i) -> !cir.ptr<!void> extra(#fn_attr) loc(#loc15)
    %6 = cir.cast(bitcast, %5 : !cir.ptr<!void>), !cir.ptr<!s8i> loc(#loc128)
    cir.store %6, %1 : !cir.ptr<!s8i>, !cir.ptr<!cir.ptr<!s8i>> loc(#loc125)
    cir.scope {
      %13 = cir.load %1 : !cir.ptr<!cir.ptr<!s8i>>, !cir.ptr<!s8i> loc(#loc20)
      %14 = cir.const #cir.ptr<null> : !cir.ptr<!s8i> loc(#loc21)
      %15 = cir.cmp(eq, %13, %14) : !cir.ptr<!s8i>, !cir.bool loc(#loc130)
      cir.if %15 {
        %16 = cir.get_global @exit : !cir.ptr<!cir.func<(!s32i)>> loc(#loc23)
        %17 = cir.const #cir.int<1> : !s32i loc(#loc24)
        %18 = cir.unary(minus, %17) nsw : !s32i, !s32i loc(#loc25)
        cir.call @exit(%18) : (!s32i) -> () extra(#fn_attr) loc(#loc23)
      } loc(#loc131)
    } loc(#loc129)
    %7 = cir.get_global @malloc : !cir.ptr<!cir.func<(!u64i) -> !cir.ptr<!void>>> loc(#loc26)
    %8 = cir.const #cir.int<8> : !u64i loc(#loc132)
    %9 = cir.call @malloc(%8) : (!u64i) -> !cir.ptr<!void> extra(#fn_attr) loc(#loc26)
    %10 = cir.cast(bitcast, %9 : !cir.ptr<!void>), !cir.ptr<!s8i> loc(#loc133)
    cir.store %10, %2 : !cir.ptr<!s8i>, !cir.ptr<!cir.ptr<!s8i>> loc(#loc126)
    cir.scope {
      %13 = cir.load %2 : !cir.ptr<!cir.ptr<!s8i>>, !cir.ptr<!s8i> loc(#loc31)
      %14 = cir.const #cir.ptr<null> : !cir.ptr<!s8i> loc(#loc32)
      %15 = cir.cmp(eq, %13, %14) : !cir.ptr<!s8i>, !cir.bool loc(#loc135)
      cir.if %15 {
        %16 = cir.get_global @exit : !cir.ptr<!cir.func<(!s32i)>> loc(#loc34)
        %17 = cir.const #cir.int<1> : !s32i loc(#loc35)
        %18 = cir.unary(minus, %17) nsw : !s32i, !s32i loc(#loc36)
        cir.call @exit(%18) : (!s32i) -> () extra(#fn_attr) loc(#loc34)
      } loc(#loc136)
    } loc(#loc134)
    %11 = cir.load %1 : !cir.ptr<!cir.ptr<!s8i>>, !cir.ptr<!s8i> loc(#loc37)
    cir.store %11, %0 : !cir.ptr<!s8i>, !cir.ptr<!cir.ptr<!s8i>> loc(#loc137)
    %12 = cir.cast(bitcast, %0 : !cir.ptr<!cir.ptr<!s8i>>), !cir.ptr<!void> loc(#loc138)
    cir.call @_ZN51CWE122_Heap_Based_Buffer_Overflow__placement_new_647badSinkEPv(%12) : (!cir.ptr<!void>) -> () loc(#loc41)
    cir.return loc(#loc8)
  } loc(#loc123)
  cir.func private @_ZN51CWE122_Heap_Based_Buffer_Overflow__placement_new_6411goodG2BSinkEPv(!cir.ptr<!void>) loc(#loc139)
  cir.func internal private @_ZN51CWE122_Heap_Based_Buffer_Overflow__placement_new_64L7goodG2BEv() extra(#fn_attr1) {
    %0 = cir.alloca !cir.ptr<!s8i>, !cir.ptr<!cir.ptr<!s8i>>, ["data"] {alignment = 8 : i64} loc(#loc141)
    %1 = cir.alloca !cir.ptr<!s8i>, !cir.ptr<!cir.ptr<!s8i>>, ["dataBadBuffer", init] {alignment = 8 : i64} loc(#loc142)
    %2 = cir.alloca !cir.ptr<!s8i>, !cir.ptr<!cir.ptr<!s8i>>, ["dataGoodBuffer", init] {alignment = 8 : i64} loc(#loc143)
    %3 = cir.get_global @malloc : !cir.ptr<!cir.func<(!u64i) -> !cir.ptr<!void>>> loc(#loc52)
    %4 = cir.const #cir.int<4> : !u64i loc(#loc144)
    %5 = cir.call @malloc(%4) : (!u64i) -> !cir.ptr<!void> extra(#fn_attr) loc(#loc52)
    %6 = cir.cast(bitcast, %5 : !cir.ptr<!void>), !cir.ptr<!s8i> loc(#loc145)
    cir.store %6, %1 : !cir.ptr<!s8i>, !cir.ptr<!cir.ptr<!s8i>> loc(#loc142)
    cir.scope {
      %13 = cir.load %1 : !cir.ptr<!cir.ptr<!s8i>>, !cir.ptr<!s8i> loc(#loc57)
      %14 = cir.const #cir.ptr<null> : !cir.ptr<!s8i> loc(#loc58)
      %15 = cir.cmp(eq, %13, %14) : !cir.ptr<!s8i>, !cir.bool loc(#loc147)
      cir.if %15 {
        %16 = cir.get_global @exit : !cir.ptr<!cir.func<(!s32i)>> loc(#loc60)
        %17 = cir.const #cir.int<1> : !s32i loc(#loc61)
        %18 = cir.unary(minus, %17) nsw : !s32i, !s32i loc(#loc62)
        cir.call @exit(%18) : (!s32i) -> () extra(#fn_attr) loc(#loc60)
      } loc(#loc148)
    } loc(#loc146)
    %7 = cir.get_global @malloc : !cir.ptr<!cir.func<(!u64i) -> !cir.ptr<!void>>> loc(#loc63)
    %8 = cir.const #cir.int<8> : !u64i loc(#loc149)
    %9 = cir.call @malloc(%8) : (!u64i) -> !cir.ptr<!void> extra(#fn_attr) loc(#loc63)
    %10 = cir.cast(bitcast, %9 : !cir.ptr<!void>), !cir.ptr<!s8i> loc(#loc150)
    cir.store %10, %2 : !cir.ptr<!s8i>, !cir.ptr<!cir.ptr<!s8i>> loc(#loc143)
    cir.scope {
      %13 = cir.load %2 : !cir.ptr<!cir.ptr<!s8i>>, !cir.ptr<!s8i> loc(#loc68)
      %14 = cir.const #cir.ptr<null> : !cir.ptr<!s8i> loc(#loc69)
      %15 = cir.cmp(eq, %13, %14) : !cir.ptr<!s8i>, !cir.bool loc(#loc152)
      cir.if %15 {
        %16 = cir.get_global @exit : !cir.ptr<!cir.func<(!s32i)>> loc(#loc71)
        %17 = cir.const #cir.int<1> : !s32i loc(#loc72)
        %18 = cir.unary(minus, %17) nsw : !s32i, !s32i loc(#loc73)
        cir.call @exit(%18) : (!s32i) -> () extra(#fn_attr) loc(#loc71)
      } loc(#loc153)
    } loc(#loc151)
    %11 = cir.load %2 : !cir.ptr<!cir.ptr<!s8i>>, !cir.ptr<!s8i> loc(#loc74)
    cir.store %11, %0 : !cir.ptr<!s8i>, !cir.ptr<!cir.ptr<!s8i>> loc(#loc154)
    %12 = cir.cast(bitcast, %0 : !cir.ptr<!cir.ptr<!s8i>>), !cir.ptr<!void> loc(#loc155)
    cir.call @_ZN51CWE122_Heap_Based_Buffer_Overflow__placement_new_6411goodG2BSinkEPv(%12) : (!cir.ptr<!void>) -> () loc(#loc78)
    cir.return loc(#loc45)
  } loc(#loc140)
  cir.func private @_ZN51CWE122_Heap_Based_Buffer_Overflow__placement_new_6411goodB2GSinkEPv(!cir.ptr<!void>) loc(#loc156)
  cir.func internal private @_ZN51CWE122_Heap_Based_Buffer_Overflow__placement_new_64L7goodB2GEv() extra(#fn_attr1) {
    %0 = cir.alloca !cir.ptr<!s8i>, !cir.ptr<!cir.ptr<!s8i>>, ["data"] {alignment = 8 : i64} loc(#loc158)
    %1 = cir.alloca !cir.ptr<!s8i>, !cir.ptr<!cir.ptr<!s8i>>, ["dataBadBuffer", init] {alignment = 8 : i64} loc(#loc159)
    %2 = cir.alloca !cir.ptr<!s8i>, !cir.ptr<!cir.ptr<!s8i>>, ["dataGoodBuffer", init] {alignment = 8 : i64} loc(#loc160)
    %3 = cir.get_global @malloc : !cir.ptr<!cir.func<(!u64i) -> !cir.ptr<!void>>> loc(#loc89)
    %4 = cir.const #cir.int<4> : !u64i loc(#loc161)
    %5 = cir.call @malloc(%4) : (!u64i) -> !cir.ptr<!void> extra(#fn_attr) loc(#loc89)
    %6 = cir.cast(bitcast, %5 : !cir.ptr<!void>), !cir.ptr<!s8i> loc(#loc162)
    cir.store %6, %1 : !cir.ptr<!s8i>, !cir.ptr<!cir.ptr<!s8i>> loc(#loc159)
    cir.scope {
      %13 = cir.load %1 : !cir.ptr<!cir.ptr<!s8i>>, !cir.ptr<!s8i> loc(#loc94)
      %14 = cir.const #cir.ptr<null> : !cir.ptr<!s8i> loc(#loc95)
      %15 = cir.cmp(eq, %13, %14) : !cir.ptr<!s8i>, !cir.bool loc(#loc164)
      cir.if %15 {
        %16 = cir.get_global @exit : !cir.ptr<!cir.func<(!s32i)>> loc(#loc97)
        %17 = cir.const #cir.int<1> : !s32i loc(#loc98)
        %18 = cir.unary(minus, %17) nsw : !s32i, !s32i loc(#loc99)
        cir.call @exit(%18) : (!s32i) -> () extra(#fn_attr) loc(#loc97)
      } loc(#loc165)
    } loc(#loc163)
    %7 = cir.get_global @malloc : !cir.ptr<!cir.func<(!u64i) -> !cir.ptr<!void>>> loc(#loc100)
    %8 = cir.const #cir.int<8> : !u64i loc(#loc166)
    %9 = cir.call @malloc(%8) : (!u64i) -> !cir.ptr<!void> extra(#fn_attr) loc(#loc100)
    %10 = cir.cast(bitcast, %9 : !cir.ptr<!void>), !cir.ptr<!s8i> loc(#loc167)
    cir.store %10, %2 : !cir.ptr<!s8i>, !cir.ptr<!cir.ptr<!s8i>> loc(#loc160)
    cir.scope {
      %13 = cir.load %2 : !cir.ptr<!cir.ptr<!s8i>>, !cir.ptr<!s8i> loc(#loc105)
      %14 = cir.const #cir.ptr<null> : !cir.ptr<!s8i> loc(#loc106)
      %15 = cir.cmp(eq, %13, %14) : !cir.ptr<!s8i>, !cir.bool loc(#loc169)
      cir.if %15 {
        %16 = cir.get_global @exit : !cir.ptr<!cir.func<(!s32i)>> loc(#loc108)
        %17 = cir.const #cir.int<1> : !s32i loc(#loc109)
        %18 = cir.unary(minus, %17) nsw : !s32i, !s32i loc(#loc110)
        cir.call @exit(%18) : (!s32i) -> () extra(#fn_attr) loc(#loc108)
      } loc(#loc170)
    } loc(#loc168)
    %11 = cir.load %1 : !cir.ptr<!cir.ptr<!s8i>>, !cir.ptr<!s8i> loc(#loc111)
    cir.store %11, %0 : !cir.ptr<!s8i>, !cir.ptr<!cir.ptr<!s8i>> loc(#loc171)
    %12 = cir.cast(bitcast, %0 : !cir.ptr<!cir.ptr<!s8i>>), !cir.ptr<!void> loc(#loc172)
    cir.call @_ZN51CWE122_Heap_Based_Buffer_Overflow__placement_new_6411goodB2GSinkEPv(%12) : (!cir.ptr<!void>) -> () loc(#loc115)
    cir.return loc(#loc82)
  } loc(#loc157)
  cir.func @_ZN51CWE122_Heap_Based_Buffer_Overflow__placement_new_644goodEv() extra(#fn_attr1) {
    cir.call @_ZN51CWE122_Heap_Based_Buffer_Overflow__placement_new_64L7goodG2BEv() : () -> () loc(#loc118)
    cir.call @_ZN51CWE122_Heap_Based_Buffer_Overflow__placement_new_64L7goodB2GEv() : () -> () loc(#loc119)
    cir.return loc(#loc117)
  } loc(#loc173)
} loc(#loc)
#loc = loc("/workspaces/juliet-c/testcases/CWE122_Heap_Based_Buffer_Overflow/s11/CWE122_Heap_Based_Buffer_Overflow__placement_new_64a.cpp":0:0)
#loc1 = loc("/usr/include/stdlib.h":672:1)
#loc2 = loc("/usr/include/stdlib.h":672:45)
#loc3 = loc("/usr/include/stdlib.h":756:1)
#loc4 = loc("/usr/include/stdlib.h":756:70)
#loc5 = loc("CWE122_Heap_Based_Buffer_Overflow__placement_new_64a.cpp":26:1)
#loc6 = loc("CWE122_Heap_Based_Buffer_Overflow__placement_new_64a.cpp":26:32)
#loc7 = loc("CWE122_Heap_Based_Buffer_Overflow__placement_new_64a.cpp":28:1)
#loc8 = loc("CWE122_Heap_Based_Buffer_Overflow__placement_new_64a.cpp":38:1)
#loc9 = loc("CWE122_Heap_Based_Buffer_Overflow__placement_new_64a.cpp":30:5)
#loc10 = loc("CWE122_Heap_Based_Buffer_Overflow__placement_new_64a.cpp":30:12)
#loc11 = loc("CWE122_Heap_Based_Buffer_Overflow__placement_new_64a.cpp":31:5)
#loc12 = loc("CWE122_Heap_Based_Buffer_Overflow__placement_new_64a.cpp":31:62)
#loc13 = loc("CWE122_Heap_Based_Buffer_Overflow__placement_new_64a.cpp":33:5)
#loc14 = loc("CWE122_Heap_Based_Buffer_Overflow__placement_new_64a.cpp":33:64)
#loc15 = loc("CWE122_Heap_Based_Buffer_Overflow__placement_new_64a.cpp":31:36)
#loc16 = loc("CWE122_Heap_Based_Buffer_Overflow__placement_new_64a.cpp":31:43)
#loc17 = loc("CWE122_Heap_Based_Buffer_Overflow__placement_new_64a.cpp":31:61)
#loc18 = loc("CWE122_Heap_Based_Buffer_Overflow__placement_new_64a.cpp":32:5)
#loc19 = loc("CWE122_Heap_Based_Buffer_Overflow__placement_new_64a.cpp":32:42)
#loc20 = loc("CWE122_Heap_Based_Buffer_Overflow__placement_new_64a.cpp":32:9)
#loc21 = loc("CWE122_Heap_Based_Buffer_Overflow__placement_new_64a.cpp":32:26)
#loc22 = loc("CWE122_Heap_Based_Buffer_Overflow__placement_new_64a.cpp":32:32)
#loc23 = loc("CWE122_Heap_Based_Buffer_Overflow__placement_new_64a.cpp":32:33)
#loc24 = loc("CWE122_Heap_Based_Buffer_Overflow__placement_new_64a.cpp":32:39)
#loc25 = loc("CWE122_Heap_Based_Buffer_Overflow__placement_new_64a.cpp":32:38)
#loc26 = loc("CWE122_Heap_Based_Buffer_Overflow__placement_new_64a.cpp":33:37)
#loc27 = loc("CWE122_Heap_Based_Buffer_Overflow__placement_new_64a.cpp":33:44)
#loc28 = loc("CWE122_Heap_Based_Buffer_Overflow__placement_new_64a.cpp":33:63)
#loc29 = loc("CWE122_Heap_Based_Buffer_Overflow__placement_new_64a.cpp":34:5)
#loc30 = loc("CWE122_Heap_Based_Buffer_Overflow__placement_new_64a.cpp":34:43)
#loc31 = loc("CWE122_Heap_Based_Buffer_Overflow__placement_new_64a.cpp":34:9)
#loc32 = loc("CWE122_Heap_Based_Buffer_Overflow__placement_new_64a.cpp":34:27)
#loc33 = loc("CWE122_Heap_Based_Buffer_Overflow__placement_new_64a.cpp":34:33)
#loc34 = loc("CWE122_Heap_Based_Buffer_Overflow__placement_new_64a.cpp":34:34)
#loc35 = loc("CWE122_Heap_Based_Buffer_Overflow__placement_new_64a.cpp":34:40)
#loc36 = loc("CWE122_Heap_Based_Buffer_Overflow__placement_new_64a.cpp":34:39)
#loc37 = loc("CWE122_Heap_Based_Buffer_Overflow__placement_new_64a.cpp":36:12)
#loc38 = loc("CWE122_Heap_Based_Buffer_Overflow__placement_new_64a.cpp":36:5)
#loc39 = loc("CWE122_Heap_Based_Buffer_Overflow__placement_new_64a.cpp":37:13)
#loc40 = loc("CWE122_Heap_Based_Buffer_Overflow__placement_new_64a.cpp":37:14)
#loc41 = loc("CWE122_Heap_Based_Buffer_Overflow__placement_new_64a.cpp":37:5)
#loc42 = loc("CWE122_Heap_Based_Buffer_Overflow__placement_new_64a.cpp":45:1)
#loc43 = loc("CWE122_Heap_Based_Buffer_Overflow__placement_new_64a.cpp":45:36)
#loc44 = loc("CWE122_Heap_Based_Buffer_Overflow__placement_new_64a.cpp":47:1)
#loc45 = loc("CWE122_Heap_Based_Buffer_Overflow__placement_new_64a.cpp":57:1)
#loc46 = loc("CWE122_Heap_Based_Buffer_Overflow__placement_new_64a.cpp":49:5)
#loc47 = loc("CWE122_Heap_Based_Buffer_Overflow__placement_new_64a.cpp":49:12)
#loc48 = loc("CWE122_Heap_Based_Buffer_Overflow__placement_new_64a.cpp":50:5)
#loc49 = loc("CWE122_Heap_Based_Buffer_Overflow__placement_new_64a.cpp":50:62)
#loc50 = loc("CWE122_Heap_Based_Buffer_Overflow__placement_new_64a.cpp":52:5)
#loc51 = loc("CWE122_Heap_Based_Buffer_Overflow__placement_new_64a.cpp":52:64)
#loc52 = loc("CWE122_Heap_Based_Buffer_Overflow__placement_new_64a.cpp":50:36)
#loc53 = loc("CWE122_Heap_Based_Buffer_Overflow__placement_new_64a.cpp":50:43)
#loc54 = loc("CWE122_Heap_Based_Buffer_Overflow__placement_new_64a.cpp":50:61)
#loc55 = loc("CWE122_Heap_Based_Buffer_Overflow__placement_new_64a.cpp":51:5)
#loc56 = loc("CWE122_Heap_Based_Buffer_Overflow__placement_new_64a.cpp":51:42)
#loc57 = loc("CWE122_Heap_Based_Buffer_Overflow__placement_new_64a.cpp":51:9)
#loc58 = loc("CWE122_Heap_Based_Buffer_Overflow__placement_new_64a.cpp":51:26)
#loc59 = loc("CWE122_Heap_Based_Buffer_Overflow__placement_new_64a.cpp":51:32)
#loc60 = loc("CWE122_Heap_Based_Buffer_Overflow__placement_new_64a.cpp":51:33)
#loc61 = loc("CWE122_Heap_Based_Buffer_Overflow__placement_new_64a.cpp":51:39)
#loc62 = loc("CWE122_Heap_Based_Buffer_Overflow__placement_new_64a.cpp":51:38)
#loc63 = loc("CWE122_Heap_Based_Buffer_Overflow__placement_new_64a.cpp":52:37)
#loc64 = loc("CWE122_Heap_Based_Buffer_Overflow__placement_new_64a.cpp":52:44)
#loc65 = loc("CWE122_Heap_Based_Buffer_Overflow__placement_new_64a.cpp":52:63)
#loc66 = loc("CWE122_Heap_Based_Buffer_Overflow__placement_new_64a.cpp":53:5)
#loc67 = loc("CWE122_Heap_Based_Buffer_Overflow__placement_new_64a.cpp":53:43)
#loc68 = loc("CWE122_Heap_Based_Buffer_Overflow__placement_new_64a.cpp":53:9)
#loc69 = loc("CWE122_Heap_Based_Buffer_Overflow__placement_new_64a.cpp":53:27)
#loc70 = loc("CWE122_Heap_Based_Buffer_Overflow__placement_new_64a.cpp":53:33)
#loc71 = loc("CWE122_Heap_Based_Buffer_Overflow__placement_new_64a.cpp":53:34)
#loc72 = loc("CWE122_Heap_Based_Buffer_Overflow__placement_new_64a.cpp":53:40)
#loc73 = loc("CWE122_Heap_Based_Buffer_Overflow__placement_new_64a.cpp":53:39)
#loc74 = loc("CWE122_Heap_Based_Buffer_Overflow__placement_new_64a.cpp":55:12)
#loc75 = loc("CWE122_Heap_Based_Buffer_Overflow__placement_new_64a.cpp":55:5)
#loc76 = loc("CWE122_Heap_Based_Buffer_Overflow__placement_new_64a.cpp":56:17)
#loc77 = loc("CWE122_Heap_Based_Buffer_Overflow__placement_new_64a.cpp":56:18)
#loc78 = loc("CWE122_Heap_Based_Buffer_Overflow__placement_new_64a.cpp":56:5)
#loc79 = loc("CWE122_Heap_Based_Buffer_Overflow__placement_new_64a.cpp":60:1)
#loc80 = loc("CWE122_Heap_Based_Buffer_Overflow__placement_new_64a.cpp":60:36)
#loc81 = loc("CWE122_Heap_Based_Buffer_Overflow__placement_new_64a.cpp":62:1)
#loc82 = loc("CWE122_Heap_Based_Buffer_Overflow__placement_new_64a.cpp":72:1)
#loc83 = loc("CWE122_Heap_Based_Buffer_Overflow__placement_new_64a.cpp":64:5)
#loc84 = loc("CWE122_Heap_Based_Buffer_Overflow__placement_new_64a.cpp":64:12)
#loc85 = loc("CWE122_Heap_Based_Buffer_Overflow__placement_new_64a.cpp":65:5)
#loc86 = loc("CWE122_Heap_Based_Buffer_Overflow__placement_new_64a.cpp":65:62)
#loc87 = loc("CWE122_Heap_Based_Buffer_Overflow__placement_new_64a.cpp":67:5)
#loc88 = loc("CWE122_Heap_Based_Buffer_Overflow__placement_new_64a.cpp":67:64)
#loc89 = loc("CWE122_Heap_Based_Buffer_Overflow__placement_new_64a.cpp":65:36)
#loc90 = loc("CWE122_Heap_Based_Buffer_Overflow__placement_new_64a.cpp":65:43)
#loc91 = loc("CWE122_Heap_Based_Buffer_Overflow__placement_new_64a.cpp":65:61)
#loc92 = loc("CWE122_Heap_Based_Buffer_Overflow__placement_new_64a.cpp":66:5)
#loc93 = loc("CWE122_Heap_Based_Buffer_Overflow__placement_new_64a.cpp":66:42)
#loc94 = loc("CWE122_Heap_Based_Buffer_Overflow__placement_new_64a.cpp":66:9)
#loc95 = loc("CWE122_Heap_Based_Buffer_Overflow__placement_new_64a.cpp":66:26)
#loc96 = loc("CWE122_Heap_Based_Buffer_Overflow__placement_new_64a.cpp":66:32)
#loc97 = loc("CWE122_Heap_Based_Buffer_Overflow__placement_new_64a.cpp":66:33)
#loc98 = loc("CWE122_Heap_Based_Buffer_Overflow__placement_new_64a.cpp":66:39)
#loc99 = loc("CWE122_Heap_Based_Buffer_Overflow__placement_new_64a.cpp":66:38)
#loc100 = loc("CWE122_Heap_Based_Buffer_Overflow__placement_new_64a.cpp":67:37)
#loc101 = loc("CWE122_Heap_Based_Buffer_Overflow__placement_new_64a.cpp":67:44)
#loc102 = loc("CWE122_Heap_Based_Buffer_Overflow__placement_new_64a.cpp":67:63)
#loc103 = loc("CWE122_Heap_Based_Buffer_Overflow__placement_new_64a.cpp":68:5)
#loc104 = loc("CWE122_Heap_Based_Buffer_Overflow__placement_new_64a.cpp":68:43)
#loc105 = loc("CWE122_Heap_Based_Buffer_Overflow__placement_new_64a.cpp":68:9)
#loc106 = loc("CWE122_Heap_Based_Buffer_Overflow__placement_new_64a.cpp":68:27)
#loc107 = loc("CWE122_Heap_Based_Buffer_Overflow__placement_new_64a.cpp":68:33)
#loc108 = loc("CWE122_Heap_Based_Buffer_Overflow__placement_new_64a.cpp":68:34)
#loc109 = loc("CWE122_Heap_Based_Buffer_Overflow__placement_new_64a.cpp":68:40)
#loc110 = loc("CWE122_Heap_Based_Buffer_Overflow__placement_new_64a.cpp":68:39)
#loc111 = loc("CWE122_Heap_Based_Buffer_Overflow__placement_new_64a.cpp":70:12)
#loc112 = loc("CWE122_Heap_Based_Buffer_Overflow__placement_new_64a.cpp":70:5)
#loc113 = loc("CWE122_Heap_Based_Buffer_Overflow__placement_new_64a.cpp":71:17)
#loc114 = loc("CWE122_Heap_Based_Buffer_Overflow__placement_new_64a.cpp":71:18)
#loc115 = loc("CWE122_Heap_Based_Buffer_Overflow__placement_new_64a.cpp":71:5)
#loc116 = loc("CWE122_Heap_Based_Buffer_Overflow__placement_new_64a.cpp":74:1)
#loc117 = loc("CWE122_Heap_Based_Buffer_Overflow__placement_new_64a.cpp":78:1)
#loc118 = loc("CWE122_Heap_Based_Buffer_Overflow__placement_new_64a.cpp":76:5)
#loc119 = loc("CWE122_Heap_Based_Buffer_Overflow__placement_new_64a.cpp":77:5)
#loc120 = loc(fused[#loc1, #loc2])
#loc121 = loc(fused[#loc3, #loc4])
#loc122 = loc(fused[#loc5, #loc6])
#loc123 = loc(fused[#loc7, #loc8])
#loc124 = loc(fused[#loc9, #loc10])
#loc125 = loc(fused[#loc11, #loc12])
#loc126 = loc(fused[#loc13, #loc14])
#loc127 = loc(fused[#loc16, #loc17])
#loc128 = loc(fused[#loc15, #loc12])
#loc129 = loc(fused[#loc18, #loc19])
#loc130 = loc(fused[#loc20, #loc21])
#loc131 = loc(fused[#loc22, #loc19])
#loc132 = loc(fused[#loc27, #loc28])
#loc133 = loc(fused[#loc26, #loc14])
#loc134 = loc(fused[#loc29, #loc30])
#loc135 = loc(fused[#loc31, #loc32])
#loc136 = loc(fused[#loc33, #loc30])
#loc137 = loc(fused[#loc38, #loc37])
#loc138 = loc(fused[#loc39, #loc40])
#loc139 = loc(fused[#loc42, #loc43])
#loc140 = loc(fused[#loc44, #loc45])
#loc141 = loc(fused[#loc46, #loc47])
#loc142 = loc(fused[#loc48, #loc49])
#loc143 = loc(fused[#loc50, #loc51])
#loc144 = loc(fused[#loc53, #loc54])
#loc145 = loc(fused[#loc52, #loc49])
#loc146 = loc(fused[#loc55, #loc56])
#loc147 = loc(fused[#loc57, #loc58])
#loc148 = loc(fused[#loc59, #loc56])
#loc149 = loc(fused[#loc64, #loc65])
#loc150 = loc(fused[#loc63, #loc51])
#loc151 = loc(fused[#loc66, #loc67])
#loc152 = loc(fused[#loc68, #loc69])
#loc153 = loc(fused[#loc70, #loc67])
#loc154 = loc(fused[#loc75, #loc74])
#loc155 = loc(fused[#loc76, #loc77])
#loc156 = loc(fused[#loc79, #loc80])
#loc157 = loc(fused[#loc81, #loc82])
#loc158 = loc(fused[#loc83, #loc84])
#loc159 = loc(fused[#loc85, #loc86])
#loc160 = loc(fused[#loc87, #loc88])
#loc161 = loc(fused[#loc90, #loc91])
#loc162 = loc(fused[#loc89, #loc86])
#loc163 = loc(fused[#loc92, #loc93])
#loc164 = loc(fused[#loc94, #loc95])
#loc165 = loc(fused[#loc96, #loc93])
#loc166 = loc(fused[#loc101, #loc102])
#loc167 = loc(fused[#loc100, #loc88])
#loc168 = loc(fused[#loc103, #loc104])
#loc169 = loc(fused[#loc105, #loc106])
#loc170 = loc(fused[#loc107, #loc104])
#loc171 = loc(fused[#loc112, #loc111])
#loc172 = loc(fused[#loc113, #loc114])
#loc173 = loc(fused[#loc116, #loc117])
