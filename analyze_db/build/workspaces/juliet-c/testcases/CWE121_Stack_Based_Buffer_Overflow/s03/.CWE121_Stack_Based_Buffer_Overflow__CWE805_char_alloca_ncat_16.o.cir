!s32i = !cir.int<s, 32>
!s8i = !cir.int<s, 8>
!u64i = !cir.int<u, 64>
!u8i = !cir.int<u, 8>
!void = !cir.void
#fn_attr = #cir<extra({nothrow = #cir.nothrow})>
#fn_attr1 = #cir<extra({inline = #cir.inline<no>, nothrow = #cir.nothrow, optnone = #cir.optnone, uwtable = #cir.uwtable<async>})>
module @"/workspaces/juliet-c/testcases/CWE121_Stack_Based_Buffer_Overflow/s03/CWE121_Stack_Based_Buffer_Overflow__CWE805_char_alloca_ncat_16.c" attributes {cir.lang = #cir.lang<c>, cir.sob = #cir.signed_overflow_behavior<undefined>, cir.triple = "x86_64-unknown-linux-gnu", cir.type_size_info = #cir.type_size_info<char = 8, int = 32, size_t = 64>, cir.uwtable = #cir.uwtable<async>, dlti.dl_spec = #dlti.dl_spec<!llvm.ptr<271> = dense<32> : vector<4xi64>, !llvm.ptr<272> = dense<64> : vector<4xi64>, i64 = dense<64> : vector<2xi64>, i32 = dense<32> : vector<2xi64>, f64 = dense<64> : vector<2xi64>, f16 = dense<16> : vector<2xi64>, f128 = dense<128> : vector<2xi64>, i1 = dense<8> : vector<2xi64>, !llvm.ptr = dense<64> : vector<4xi64>, i8 = dense<8> : vector<2xi64>, i16 = dense<16> : vector<2xi64>, i128 = dense<128> : vector<2xi64>, !llvm.ptr<270> = dense<32> : vector<4xi64>, f80 = dense<128> : vector<2xi64>, "dlti.endianness" = "little", "dlti.stack_alignment" = 128 : i64, "dlti.mangling_mode" = "e">} {
  cir.func private @strncat(!cir.ptr<!s8i>, !cir.ptr<!s8i>, !u64i) -> !cir.ptr<!s8i> extra(#fn_attr) loc(#loc87)
  cir.func private @printLine(!cir.ptr<!s8i>) loc(#loc88)
  cir.func no_proto @CWE121_Stack_Based_Buffer_Overflow__CWE805_char_alloca_ncat_16_bad() extra(#fn_attr1) {
    %0 = cir.alloca !cir.array<!s8i x 100>, !cir.ptr<!cir.array<!s8i x 100>>, ["source"] {alignment = 16 : i64} loc(#loc90)
    %1 = cir.alloca !cir.ptr<!s8i>, !cir.ptr<!cir.ptr<!s8i>>, ["data"] {alignment = 8 : i64} loc(#loc91)
    %2 = cir.alloca !cir.ptr<!s8i>, !cir.ptr<!cir.ptr<!s8i>>, ["dataBadBuffer", init] {alignment = 8 : i64} loc(#loc92)
    %3 = cir.const #cir.int<50> : !s32i loc(#loc12)
    %4 = cir.cast(integral, %3 : !s32i), !u64i loc(#loc12)
    %5 = cir.const #cir.int<1> : !u64i loc(#loc12)
    %6 = cir.binop(mul, %4, %5) : !u64i loc(#loc12)
    %7 = cir.alloca !u8i, !cir.ptr<!u8i>, %6 : !u64i, ["bi_alloca"] {alignment = 16 : i64} loc(#loc12)
    %8 = cir.alloca !cir.ptr<!s8i>, !cir.ptr<!cir.ptr<!s8i>>, ["dataGoodBuffer", init] {alignment = 8 : i64} loc(#loc93)
    %9 = cir.cast(bitcast, %7 : !cir.ptr<!u8i>), !cir.ptr<!void> loc(#loc12)
    %10 = cir.cast(bitcast, %9 : !cir.ptr<!void>), !cir.ptr<!s8i> loc(#loc12)
    cir.store %10, %2 : !cir.ptr<!s8i>, !cir.ptr<!cir.ptr<!s8i>> loc(#loc92)
    %11 = cir.const #cir.int<100> : !s32i loc(#loc14)
    %12 = cir.cast(integral, %11 : !s32i), !u64i loc(#loc14)
    %13 = cir.const #cir.int<1> : !u64i loc(#loc14)
    %14 = cir.binop(mul, %12, %13) : !u64i loc(#loc14)
    %15 = cir.alloca !u8i, !cir.ptr<!u8i>, %14 : !u64i, ["bi_alloca"] {alignment = 16 : i64} loc(#loc14)
    %16 = cir.cast(bitcast, %15 : !cir.ptr<!u8i>), !cir.ptr<!void> loc(#loc14)
    %17 = cir.cast(bitcast, %16 : !cir.ptr<!void>), !cir.ptr<!s8i> loc(#loc14)
    cir.store %17, %8 : !cir.ptr<!s8i>, !cir.ptr<!cir.ptr<!s8i>> loc(#loc93)
    cir.br ^bb1 loc(#loc94)
  ^bb1:  // pred: ^bb0
    cir.br ^bb2 loc(#loc94)
  ^bb2:  // 2 preds: ^bb1, ^bb5
    %18 = cir.const #cir.int<1> : !s32i loc(#loc17)
    %19 = cir.cast(int_to_bool, %18 : !s32i), !cir.bool loc(#loc17)
    cir.brcond %19 ^bb3, ^bb6 loc(#loc17)
  ^bb3:  // pred: ^bb2
    cir.br ^bb4 loc(#loc95)
  ^bb4:  // pred: ^bb3
    %20 = cir.load %2 : !cir.ptr<!cir.ptr<!s8i>>, !cir.ptr<!s8i> loc(#loc19)
    cir.store %20, %1 : !cir.ptr<!s8i>, !cir.ptr<!cir.ptr<!s8i>> loc(#loc96)
    %21 = cir.const #cir.int<0> : !s32i loc(#loc21)
    %22 = cir.cast(integral, %21 : !s32i), !s8i loc(#loc21)
    %23 = cir.load %1 : !cir.ptr<!cir.ptr<!s8i>>, !cir.ptr<!s8i> loc(#loc22)
    %24 = cir.const #cir.int<0> : !s32i loc(#loc23)
    %25 = cir.ptr_stride(%23 : !cir.ptr<!s8i>, %24 : !s32i), !cir.ptr<!s8i> loc(#loc24)
    cir.store %22, %25 : !s8i, !cir.ptr<!s8i> loc(#loc97)
    cir.br ^bb6 loc(#loc25)
  ^bb5:  // no predecessors
    cir.br ^bb2 loc(#loc16)
  ^bb6:  // 2 preds: ^bb2, ^bb4
    cir.br ^bb7 loc(#loc16)
  ^bb7:  // pred: ^bb6
    cir.br ^bb8 loc(#loc98)
  ^bb8:  // pred: ^bb7
    %26 = cir.cast(array_to_ptrdecay, %0 : !cir.ptr<!cir.array<!s8i x 100>>), !cir.ptr<!s8i> loc(#loc28)
    %27 = cir.cast(bitcast, %26 : !cir.ptr<!s8i>), !cir.ptr<!void> loc(#loc28)
    %28 = cir.const #cir.int<67> : !s32i loc(#loc29)
    %29 = cir.const #cir.int<100> : !s32i loc(#loc30)
    %30 = cir.const #cir.int<1> : !s32i loc(#loc31)
    %31 = cir.binop(sub, %29, %30) nsw : !s32i loc(#loc30)
    %32 = cir.cast(integral, %31 : !s32i), !u64i loc(#loc30)
    cir.libc.memset %32 bytes from %27 set to %28 : !cir.ptr<!void>, !s32i, !u64i loc(#loc99)
    %33 = cir.const #cir.int<0> : !s32i loc(#loc34)
    %34 = cir.cast(integral, %33 : !s32i), !s8i loc(#loc34)
    %35 = cir.const #cir.int<100> : !s32i loc(#loc35)
    %36 = cir.const #cir.int<1> : !s32i loc(#loc36)
    %37 = cir.binop(sub, %35, %36) nsw : !s32i loc(#loc35)
    %38 = cir.cast(array_to_ptrdecay, %0 : !cir.ptr<!cir.array<!s8i x 100>>), !cir.ptr<!s8i> loc(#loc37)
    %39 = cir.ptr_stride(%38 : !cir.ptr<!s8i>, %37 : !s32i), !cir.ptr<!s8i> loc(#loc37)
    cir.store %34, %39 : !s8i, !cir.ptr<!s8i> loc(#loc100)
    %40 = cir.get_global @strncat : !cir.ptr<!cir.func<(!cir.ptr<!s8i>, !cir.ptr<!s8i>, !u64i) -> !cir.ptr<!s8i>>> loc(#loc38)
    %41 = cir.load %1 : !cir.ptr<!cir.ptr<!s8i>>, !cir.ptr<!s8i> loc(#loc39)
    %42 = cir.cast(array_to_ptrdecay, %0 : !cir.ptr<!cir.array<!s8i x 100>>), !cir.ptr<!s8i> loc(#loc40)
    %43 = cir.const #cir.int<100> : !s32i loc(#loc41)
    %44 = cir.cast(integral, %43 : !s32i), !u64i loc(#loc41)
    %45 = cir.call @strncat(%41, %42, %44) : (!cir.ptr<!s8i>, !cir.ptr<!s8i>, !u64i) -> !cir.ptr<!s8i> extra(#fn_attr) loc(#loc38)
    %46 = cir.load %1 : !cir.ptr<!cir.ptr<!s8i>>, !cir.ptr<!s8i> loc(#loc42)
    cir.call @printLine(%46) : (!cir.ptr<!s8i>) -> () loc(#loc43)
    cir.br ^bb9 loc(#loc27)
  ^bb9:  // pred: ^bb8
    cir.return loc(#loc6)
  } loc(#loc89)
  cir.func no_proto @CWE121_Stack_Based_Buffer_Overflow__CWE805_char_alloca_ncat_16_good() extra(#fn_attr1) {
    %0 = cir.get_global @goodG2B : !cir.ptr<!cir.func<()>> loc(#loc102)
    cir.call %0() : (!cir.ptr<!cir.func<()>>) -> () loc(#loc46)
    cir.return loc(#loc45)
  } loc(#loc101)
  cir.func no_proto internal private @goodG2B() extra(#fn_attr1) {
    %0 = cir.alloca !cir.array<!s8i x 100>, !cir.ptr<!cir.array<!s8i x 100>>, ["source"] {alignment = 16 : i64} loc(#loc104)
    %1 = cir.alloca !cir.ptr<!s8i>, !cir.ptr<!cir.ptr<!s8i>>, ["data"] {alignment = 8 : i64} loc(#loc105)
    %2 = cir.alloca !cir.ptr<!s8i>, !cir.ptr<!cir.ptr<!s8i>>, ["dataBadBuffer", init] {alignment = 8 : i64} loc(#loc106)
    %3 = cir.const #cir.int<50> : !s32i loc(#loc55)
    %4 = cir.cast(integral, %3 : !s32i), !u64i loc(#loc55)
    %5 = cir.const #cir.int<1> : !u64i loc(#loc55)
    %6 = cir.binop(mul, %4, %5) : !u64i loc(#loc55)
    %7 = cir.alloca !u8i, !cir.ptr<!u8i>, %6 : !u64i, ["bi_alloca"] {alignment = 16 : i64} loc(#loc55)
    %8 = cir.alloca !cir.ptr<!s8i>, !cir.ptr<!cir.ptr<!s8i>>, ["dataGoodBuffer", init] {alignment = 8 : i64} loc(#loc107)
    %9 = cir.cast(bitcast, %7 : !cir.ptr<!u8i>), !cir.ptr<!void> loc(#loc55)
    %10 = cir.cast(bitcast, %9 : !cir.ptr<!void>), !cir.ptr<!s8i> loc(#loc55)
    cir.store %10, %2 : !cir.ptr<!s8i>, !cir.ptr<!cir.ptr<!s8i>> loc(#loc106)
    %11 = cir.const #cir.int<100> : !s32i loc(#loc57)
    %12 = cir.cast(integral, %11 : !s32i), !u64i loc(#loc57)
    %13 = cir.const #cir.int<1> : !u64i loc(#loc57)
    %14 = cir.binop(mul, %12, %13) : !u64i loc(#loc57)
    %15 = cir.alloca !u8i, !cir.ptr<!u8i>, %14 : !u64i, ["bi_alloca"] {alignment = 16 : i64} loc(#loc57)
    %16 = cir.cast(bitcast, %15 : !cir.ptr<!u8i>), !cir.ptr<!void> loc(#loc57)
    %17 = cir.cast(bitcast, %16 : !cir.ptr<!void>), !cir.ptr<!s8i> loc(#loc57)
    cir.store %17, %8 : !cir.ptr<!s8i>, !cir.ptr<!cir.ptr<!s8i>> loc(#loc107)
    cir.br ^bb1 loc(#loc108)
  ^bb1:  // pred: ^bb0
    cir.br ^bb2 loc(#loc108)
  ^bb2:  // 2 preds: ^bb1, ^bb5
    %18 = cir.const #cir.int<1> : !s32i loc(#loc60)
    %19 = cir.cast(int_to_bool, %18 : !s32i), !cir.bool loc(#loc60)
    cir.brcond %19 ^bb3, ^bb6 loc(#loc60)
  ^bb3:  // pred: ^bb2
    cir.br ^bb4 loc(#loc109)
  ^bb4:  // pred: ^bb3
    %20 = cir.load %8 : !cir.ptr<!cir.ptr<!s8i>>, !cir.ptr<!s8i> loc(#loc62)
    cir.store %20, %1 : !cir.ptr<!s8i>, !cir.ptr<!cir.ptr<!s8i>> loc(#loc110)
    %21 = cir.const #cir.int<0> : !s32i loc(#loc64)
    %22 = cir.cast(integral, %21 : !s32i), !s8i loc(#loc64)
    %23 = cir.load %1 : !cir.ptr<!cir.ptr<!s8i>>, !cir.ptr<!s8i> loc(#loc65)
    %24 = cir.const #cir.int<0> : !s32i loc(#loc66)
    %25 = cir.ptr_stride(%23 : !cir.ptr<!s8i>, %24 : !s32i), !cir.ptr<!s8i> loc(#loc67)
    cir.store %22, %25 : !s8i, !cir.ptr<!s8i> loc(#loc111)
    cir.br ^bb6 loc(#loc68)
  ^bb5:  // no predecessors
    cir.br ^bb2 loc(#loc59)
  ^bb6:  // 2 preds: ^bb2, ^bb4
    cir.br ^bb7 loc(#loc59)
  ^bb7:  // pred: ^bb6
    cir.br ^bb8 loc(#loc112)
  ^bb8:  // pred: ^bb7
    %26 = cir.cast(array_to_ptrdecay, %0 : !cir.ptr<!cir.array<!s8i x 100>>), !cir.ptr<!s8i> loc(#loc71)
    %27 = cir.cast(bitcast, %26 : !cir.ptr<!s8i>), !cir.ptr<!void> loc(#loc71)
    %28 = cir.const #cir.int<67> : !s32i loc(#loc72)
    %29 = cir.const #cir.int<100> : !s32i loc(#loc73)
    %30 = cir.const #cir.int<1> : !s32i loc(#loc74)
    %31 = cir.binop(sub, %29, %30) nsw : !s32i loc(#loc73)
    %32 = cir.cast(integral, %31 : !s32i), !u64i loc(#loc73)
    cir.libc.memset %32 bytes from %27 set to %28 : !cir.ptr<!void>, !s32i, !u64i loc(#loc113)
    %33 = cir.const #cir.int<0> : !s32i loc(#loc77)
    %34 = cir.cast(integral, %33 : !s32i), !s8i loc(#loc77)
    %35 = cir.const #cir.int<100> : !s32i loc(#loc78)
    %36 = cir.const #cir.int<1> : !s32i loc(#loc79)
    %37 = cir.binop(sub, %35, %36) nsw : !s32i loc(#loc78)
    %38 = cir.cast(array_to_ptrdecay, %0 : !cir.ptr<!cir.array<!s8i x 100>>), !cir.ptr<!s8i> loc(#loc80)
    %39 = cir.ptr_stride(%38 : !cir.ptr<!s8i>, %37 : !s32i), !cir.ptr<!s8i> loc(#loc80)
    cir.store %34, %39 : !s8i, !cir.ptr<!s8i> loc(#loc114)
    %40 = cir.get_global @strncat : !cir.ptr<!cir.func<(!cir.ptr<!s8i>, !cir.ptr<!s8i>, !u64i) -> !cir.ptr<!s8i>>> loc(#loc81)
    %41 = cir.load %1 : !cir.ptr<!cir.ptr<!s8i>>, !cir.ptr<!s8i> loc(#loc82)
    %42 = cir.cast(array_to_ptrdecay, %0 : !cir.ptr<!cir.array<!s8i x 100>>), !cir.ptr<!s8i> loc(#loc83)
    %43 = cir.const #cir.int<100> : !s32i loc(#loc84)
    %44 = cir.cast(integral, %43 : !s32i), !u64i loc(#loc84)
    %45 = cir.call @strncat(%41, %42, %44) : (!cir.ptr<!s8i>, !cir.ptr<!s8i>, !u64i) -> !cir.ptr<!s8i> extra(#fn_attr) loc(#loc81)
    %46 = cir.load %1 : !cir.ptr<!cir.ptr<!s8i>>, !cir.ptr<!s8i> loc(#loc85)
    cir.call @printLine(%46) : (!cir.ptr<!s8i>) -> () loc(#loc86)
    cir.br ^bb9 loc(#loc70)
  ^bb9:  // pred: ^bb8
    cir.return loc(#loc49)
  } loc(#loc103)
} loc(#loc)
#loc = loc("/workspaces/juliet-c/testcases/CWE121_Stack_Based_Buffer_Overflow/s03/CWE121_Stack_Based_Buffer_Overflow__CWE805_char_alloca_ncat_16.c":0:0)
#loc1 = loc("/usr/include/string.h":152:1)
#loc2 = loc("/usr/include/string.h":153:29)
#loc3 = loc("../../../testcasesupport/std_testcase_io.h":14:1)
#loc4 = loc("../../../testcasesupport/std_testcase_io.h":14:33)
#loc5 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE805_char_alloca_ncat_16.c":23:1)
#loc6 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE805_char_alloca_ncat_16.c":44:1)
#loc7 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE805_char_alloca_ncat_16.c":37:9)
#loc8 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE805_char_alloca_ncat_16.c":37:24)
#loc9 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE805_char_alloca_ncat_16.c":25:5)
#loc10 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE805_char_alloca_ncat_16.c":25:12)
#loc11 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE805_char_alloca_ncat_16.c":26:5)
#loc12 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE805_char_alloca_ncat_16.c":26:36)
#loc13 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE805_char_alloca_ncat_16.c":27:5)
#loc14 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE805_char_alloca_ncat_16.c":27:37)
#loc15 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE805_char_alloca_ncat_16.c":28:5)
#loc16 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE805_char_alloca_ncat_16.c":35:5)
#loc17 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE805_char_alloca_ncat_16.c":28:11)
#loc18 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE805_char_alloca_ncat_16.c":29:5)
#loc19 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE805_char_alloca_ncat_16.c":32:16)
#loc20 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE805_char_alloca_ncat_16.c":32:9)
#loc21 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE805_char_alloca_ncat_16.c":33:19)
#loc22 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE805_char_alloca_ncat_16.c":33:9)
#loc23 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE805_char_alloca_ncat_16.c":33:14)
#loc24 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE805_char_alloca_ncat_16.c":33:15)
#loc25 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE805_char_alloca_ncat_16.c":34:9)
#loc26 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE805_char_alloca_ncat_16.c":36:5)
#loc27 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE805_char_alloca_ncat_16.c":43:5)
#loc28 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE805_char_alloca_ncat_16.c":38:16)
#loc29 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE805_char_alloca_ncat_16.c":38:24)
#loc30 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE805_char_alloca_ncat_16.c":38:29)
#loc31 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE805_char_alloca_ncat_16.c":38:33)
#loc32 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE805_char_alloca_ncat_16.c":38:9)
#loc33 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE805_char_alloca_ncat_16.c":38:34)
#loc34 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE805_char_alloca_ncat_16.c":39:25)
#loc35 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE805_char_alloca_ncat_16.c":39:16)
#loc36 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE805_char_alloca_ncat_16.c":39:20)
#loc37 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE805_char_alloca_ncat_16.c":39:9)
#loc38 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE805_char_alloca_ncat_16.c":41:9)
#loc39 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE805_char_alloca_ncat_16.c":41:17)
#loc40 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE805_char_alloca_ncat_16.c":41:23)
#loc41 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE805_char_alloca_ncat_16.c":41:31)
#loc42 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE805_char_alloca_ncat_16.c":42:19)
#loc43 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE805_char_alloca_ncat_16.c":42:9)
#loc44 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE805_char_alloca_ncat_16.c":73:1)
#loc45 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE805_char_alloca_ncat_16.c":76:1)
#loc46 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE805_char_alloca_ncat_16.c":75:5)
#loc47 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE805_char_alloca_ncat_16.c":75:13)
#loc48 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE805_char_alloca_ncat_16.c":51:1)
#loc49 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE805_char_alloca_ncat_16.c":71:1)
#loc50 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE805_char_alloca_ncat_16.c":64:9)
#loc51 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE805_char_alloca_ncat_16.c":64:24)
#loc52 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE805_char_alloca_ncat_16.c":53:5)
#loc53 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE805_char_alloca_ncat_16.c":53:12)
#loc54 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE805_char_alloca_ncat_16.c":54:5)
#loc55 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE805_char_alloca_ncat_16.c":54:36)
#loc56 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE805_char_alloca_ncat_16.c":55:5)
#loc57 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE805_char_alloca_ncat_16.c":55:37)
#loc58 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE805_char_alloca_ncat_16.c":56:5)
#loc59 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE805_char_alloca_ncat_16.c":62:5)
#loc60 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE805_char_alloca_ncat_16.c":56:11)
#loc61 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE805_char_alloca_ncat_16.c":57:5)
#loc62 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE805_char_alloca_ncat_16.c":59:16)
#loc63 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE805_char_alloca_ncat_16.c":59:9)
#loc64 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE805_char_alloca_ncat_16.c":60:19)
#loc65 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE805_char_alloca_ncat_16.c":60:9)
#loc66 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE805_char_alloca_ncat_16.c":60:14)
#loc67 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE805_char_alloca_ncat_16.c":60:15)
#loc68 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE805_char_alloca_ncat_16.c":61:9)
#loc69 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE805_char_alloca_ncat_16.c":63:5)
#loc70 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE805_char_alloca_ncat_16.c":70:5)
#loc71 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE805_char_alloca_ncat_16.c":65:16)
#loc72 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE805_char_alloca_ncat_16.c":65:24)
#loc73 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE805_char_alloca_ncat_16.c":65:29)
#loc74 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE805_char_alloca_ncat_16.c":65:33)
#loc75 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE805_char_alloca_ncat_16.c":65:9)
#loc76 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE805_char_alloca_ncat_16.c":65:34)
#loc77 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE805_char_alloca_ncat_16.c":66:25)
#loc78 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE805_char_alloca_ncat_16.c":66:16)
#loc79 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE805_char_alloca_ncat_16.c":66:20)
#loc80 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE805_char_alloca_ncat_16.c":66:9)
#loc81 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE805_char_alloca_ncat_16.c":68:9)
#loc82 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE805_char_alloca_ncat_16.c":68:17)
#loc83 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE805_char_alloca_ncat_16.c":68:23)
#loc84 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE805_char_alloca_ncat_16.c":68:31)
#loc85 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE805_char_alloca_ncat_16.c":69:19)
#loc86 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE805_char_alloca_ncat_16.c":69:9)
#loc87 = loc(fused[#loc1, #loc2])
#loc88 = loc(fused[#loc3, #loc4])
#loc89 = loc(fused[#loc5, #loc6])
#loc90 = loc(fused[#loc7, #loc8])
#loc91 = loc(fused[#loc9, #loc10])
#loc92 = loc(fused[#loc11, #loc12])
#loc93 = loc(fused[#loc13, #loc14])
#loc94 = loc(fused[#loc15, #loc16])
#loc95 = loc(fused[#loc18, #loc16])
#loc96 = loc(fused[#loc20, #loc19])
#loc97 = loc(fused[#loc22, #loc21])
#loc98 = loc(fused[#loc26, #loc27])
#loc99 = loc(fused[#loc32, #loc33])
#loc100 = loc(fused[#loc37, #loc34])
#loc101 = loc(fused[#loc44, #loc45])
#loc102 = loc(fused[#loc46, #loc47])
#loc103 = loc(fused[#loc48, #loc49])
#loc104 = loc(fused[#loc50, #loc51])
#loc105 = loc(fused[#loc52, #loc53])
#loc106 = loc(fused[#loc54, #loc55])
#loc107 = loc(fused[#loc56, #loc57])
#loc108 = loc(fused[#loc58, #loc59])
#loc109 = loc(fused[#loc61, #loc59])
#loc110 = loc(fused[#loc63, #loc62])
#loc111 = loc(fused[#loc65, #loc64])
#loc112 = loc(fused[#loc69, #loc70])
#loc113 = loc(fused[#loc75, #loc76])
#loc114 = loc(fused[#loc80, #loc77])
