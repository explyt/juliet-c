!s32i = !cir.int<s, 32>
!s64i = !cir.int<s, 64>
!s8i = !cir.int<s, 8>
!u16i = !cir.int<u, 16>
!u32i = !cir.int<u, 32>
!u64i = !cir.int<u, 64>
!u8i = !cir.int<u, 8>
!void = !cir.void
#false = #cir.bool<false> : !cir.bool
#fn_attr = #cir<extra({nothrow = #cir.nothrow})>
#fn_attr1 = #cir<extra({inline = #cir.inline<no>, optnone = #cir.optnone, uwtable = #cir.uwtable<async>})>
#true = #cir.bool<true> : !cir.bool
!ty_in_addr = !cir.record<struct "in_addr" {!u32i} #cir.record.decl.ast>
!ty_sockaddr = !cir.record<struct "sockaddr" {!u16i, !cir.array<!s8i x 14>} #cir.record.decl.ast>
!ty_sockaddr_in = !cir.record<struct "sockaddr_in" {!u16i, !u16i, !ty_in_addr, !cir.array<!u8i x 8>}>
module @"/workspaces/juliet-c/testcases/CWE680_Integer_Overflow_to_Buffer_Overflow/CWE680_Integer_Overflow_to_Buffer_Overflow__new_connect_socket_16.cpp" attributes {cir.lang = #cir.lang<cxx>, cir.sob = #cir.signed_overflow_behavior<undefined>, cir.triple = "x86_64-unknown-linux-gnu", cir.type_size_info = #cir.type_size_info<char = 8, int = 32, size_t = 64>, cir.uwtable = #cir.uwtable<async>, dlti.dl_spec = #dlti.dl_spec<i32 = dense<32> : vector<2xi64>, f16 = dense<16> : vector<2xi64>, f64 = dense<64> : vector<2xi64>, f128 = dense<128> : vector<2xi64>, i1 = dense<8> : vector<2xi64>, i8 = dense<8> : vector<2xi64>, !llvm.ptr<270> = dense<32> : vector<4xi64>, i16 = dense<16> : vector<2xi64>, i128 = dense<128> : vector<2xi64>, i64 = dense<64> : vector<2xi64>, !llvm.ptr<272> = dense<64> : vector<4xi64>, !llvm.ptr<271> = dense<32> : vector<4xi64>, !llvm.ptr = dense<64> : vector<4xi64>, f80 = dense<128> : vector<2xi64>, "dlti.mangling_mode" = "e", "dlti.endianness" = "little", "dlti.stack_alignment" = 128 : i64>} {
  cir.func private @socket(!s32i, !s32i, !s32i) -> !s32i extra(#fn_attr) loc(#loc206)
  cir.func private @inet_addr(!cir.ptr<!s8i>) -> !u32i extra(#fn_attr) loc(#loc207)
  cir.global "private" constant cir_private dsolocal @".str" = #cir.const_array<"127.0.0.1\00" : !cir.array<!s8i x 10>> : !cir.array<!s8i x 10> {alignment = 1 : i64} loc(#loc5)
  cir.func private @htons(!u16i) -> !u16i extra(#fn_attr) loc(#loc208)
  cir.func private @connect(!s32i, !cir.ptr<!ty_sockaddr>, !u32i) -> !s32i loc(#loc209)
  cir.func private @recv(!s32i, !cir.ptr<!void>, !u64i, !s32i) -> !s64i loc(#loc210)
  cir.func private @atoi(!cir.ptr<!s8i>) -> !s32i extra(#fn_attr) loc(#loc211)
  cir.func private @close(!s32i) -> !s32i loc(#loc212)
  cir.func private @_Znam(!u64i) -> !cir.ptr<!void> loc(#loc213)
  cir.func private @printIntLine(!s32i) loc(#loc214)
  cir.func @_ZN65CWE680_Integer_Overflow_to_Buffer_Overflow__new_connect_socket_163badEv() extra(#fn_attr1) {
    %0 = cir.alloca !s32i, !cir.ptr<!s32i>, ["data"] {alignment = 4 : i64} loc(#loc216)
    %1 = cir.const #cir.int<1> : !s32i loc(#loc24)
    %2 = cir.unary(minus, %1) nsw : !s32i, !s32i loc(#loc25)
    cir.store %2, %0 : !s32i, !cir.ptr<!s32i> loc(#loc217)
    cir.scope {
      cir.while {
        %3 = cir.const #cir.int<1> : !s32i loc(#loc29)
        %4 = cir.cast(int_to_bool, %3 : !s32i), !cir.bool loc(#loc29)
        cir.condition(%4) loc(#loc29)
      } do {
        cir.scope {
          cir.scope {
            %3 = cir.alloca !s32i, !cir.ptr<!s32i>, ["recvResult"] {alignment = 4 : i64} loc(#loc221)
            %4 = cir.alloca !ty_sockaddr_in, !cir.ptr<!ty_sockaddr_in>, ["service"] {alignment = 4 : i64} loc(#loc222)
            %5 = cir.alloca !s32i, !cir.ptr<!s32i>, ["connectSocket", init] {alignment = 4 : i64} loc(#loc223)
            %6 = cir.alloca !cir.array<!s8i x 14>, !cir.ptr<!cir.array<!s8i x 14>>, ["inputBuffer"] {alignment = 1 : i64} loc(#loc224)
            %7 = cir.const #cir.int<1> : !s32i loc(#loc38)
            %8 = cir.unary(minus, %7) nsw : !s32i, !s32i loc(#loc38)
            cir.store %8, %5 : !s32i, !cir.ptr<!s32i> loc(#loc223)
            cir.scope {
              cir.do {
                cir.scope {
                  %9 = cir.const #cir.int<2> : !s32i loc(#loc45)
                  %10 = cir.const #cir.int<1> : !u32i loc(#loc46)
                  %11 = cir.cast(integral, %10 : !u32i), !s32i loc(#loc46)
                  %12 = cir.const #cir.int<6> : !u32i loc(#loc47)
                  %13 = cir.cast(integral, %12 : !u32i), !s32i loc(#loc47)
                  %14 = cir.call @socket(%9, %11, %13) : (!s32i, !s32i, !s32i) -> !s32i extra(#fn_attr) loc(#loc48)
                  cir.store %14, %5 : !s32i, !cir.ptr<!s32i> loc(#loc227)
                  cir.scope {
                    %52 = cir.load %5 : !cir.ptr<!s32i>, !s32i loc(#loc53)
                    %53 = cir.const #cir.int<1> : !s32i loc(#loc54)
                    %54 = cir.unary(minus, %53) nsw : !s32i, !s32i loc(#loc54)
                    %55 = cir.cmp(eq, %52, %54) : !s32i, !cir.bool loc(#loc229)
                    cir.if %55 {
                      cir.break loc(#loc56)
                    } loc(#loc230)
                  } loc(#loc228)
                  %15 = cir.cast(bitcast, %4 : !cir.ptr<!ty_sockaddr_in>), !cir.ptr<!void> loc(#loc231)
                  %16 = cir.const #cir.int<0> : !s32i loc(#loc59)
                  %17 = cir.const #cir.int<16> : !u64i loc(#loc232)
                  cir.libc.memset %17 bytes from %15 set to %16 : !cir.ptr<!void>, !s32i, !u64i loc(#loc233)
                  %18 = cir.const #cir.int<2> : !s32i loc(#loc64)
                  %19 = cir.cast(integral, %18 : !s32i), !u16i loc(#loc64)
                  %20 = cir.get_member %4[0] {name = "sin_family"} : !cir.ptr<!ty_sockaddr_in> -> !cir.ptr<!u16i> loc(#loc65)
                  cir.store %19, %20 : !u16i, !cir.ptr<!u16i> loc(#loc234)
                  %21 = cir.get_global @".str" : !cir.ptr<!cir.array<!s8i x 10>> loc(#loc5)
                  %22 = cir.cast(array_to_ptrdecay, %21 : !cir.ptr<!cir.array<!s8i x 10>>), !cir.ptr<!s8i> loc(#loc5)
                  %23 = cir.call @inet_addr(%22) : (!cir.ptr<!s8i>) -> !u32i extra(#fn_attr) loc(#loc67)
                  %24 = cir.get_member %4[2] {name = "sin_addr"} : !cir.ptr<!ty_sockaddr_in> -> !cir.ptr<!ty_in_addr> loc(#loc68)
                  %25 = cir.get_member %24[0] {name = "s_addr"} : !cir.ptr<!ty_in_addr> -> !cir.ptr<!u32i> loc(#loc69)
                  cir.store %23, %25 : !u32i, !cir.ptr<!u32i> loc(#loc235)
                  %26 = cir.const #cir.int<27015> : !s32i loc(#loc72)
                  %27 = cir.cast(integral, %26 : !s32i), !u16i loc(#loc72)
                  %28 = cir.call @htons(%27) : (!u16i) -> !u16i side_effect(const) extra(#fn_attr) loc(#loc73)
                  %29 = cir.get_member %4[1] {name = "sin_port"} : !cir.ptr<!ty_sockaddr_in> -> !cir.ptr<!u16i> loc(#loc74)
                  cir.store %28, %29 : !u16i, !cir.ptr<!u16i> loc(#loc236)
                  cir.scope {
                    %52 = cir.load %5 : !cir.ptr<!s32i>, !s32i loc(#loc79)
                    %53 = cir.cast(bitcast, %4 : !cir.ptr<!ty_sockaddr_in>), !cir.ptr<!ty_sockaddr> loc(#loc238)
                    %54 = cir.const #cir.int<16> : !u64i loc(#loc239)
                    %55 = cir.cast(integral, %54 : !u64i), !u32i loc(#loc239)
                    %56 = cir.call @connect(%52, %53, %55) : (!s32i, !cir.ptr<!ty_sockaddr>, !u32i) -> !s32i loc(#loc84)
                    %57 = cir.const #cir.int<1> : !s32i loc(#loc85)
                    %58 = cir.unary(minus, %57) nsw : !s32i, !s32i loc(#loc85)
                    %59 = cir.cmp(eq, %56, %58) : !s32i, !cir.bool loc(#loc240)
                    cir.if %59 {
                      cir.break loc(#loc87)
                    } loc(#loc241)
                  } loc(#loc237)
                  %30 = cir.load %5 : !cir.ptr<!s32i>, !s32i loc(#loc88)
                  %31 = cir.cast(array_to_ptrdecay, %6 : !cir.ptr<!cir.array<!s8i x 14>>), !cir.ptr<!s8i> loc(#loc89)
                  %32 = cir.cast(bitcast, %31 : !cir.ptr<!s8i>), !cir.ptr<!void> loc(#loc89)
                  %33 = cir.const #cir.int<3> : !s32i loc(#loc90)
                  %34 = cir.cast(integral, %33 : !s32i), !u64i loc(#loc90)
                  %35 = cir.const #cir.int<4> : !u64i loc(#loc90)
                  %36 = cir.binop(mul, %34, %35) : !u64i loc(#loc90)
                  %37 = cir.const #cir.int<2> : !s32i loc(#loc90)
                  %38 = cir.cast(integral, %37 : !s32i), !u64i loc(#loc90)
                  %39 = cir.binop(add, %36, %38) : !u64i loc(#loc90)
                  %40 = cir.const #cir.int<1> : !s32i loc(#loc91)
                  %41 = cir.cast(integral, %40 : !s32i), !u64i loc(#loc91)
                  %42 = cir.binop(sub, %39, %41) : !u64i loc(#loc242)
                  %43 = cir.const #cir.int<0> : !s32i loc(#loc92)
                  %44 = cir.call @recv(%30, %32, %42, %43) : (!s32i, !cir.ptr<!void>, !u64i, !s32i) -> !s64i loc(#loc93)
                  %45 = cir.cast(integral, %44 : !s64i), !s32i loc(#loc93)
                  cir.store %45, %3 : !s32i, !cir.ptr<!s32i> loc(#loc243)
                  cir.scope {
                    %52 = cir.load %3 : !cir.ptr<!s32i>, !s32i loc(#loc98)
                    %53 = cir.const #cir.int<1> : !s32i loc(#loc99)
                    %54 = cir.unary(minus, %53) nsw : !s32i, !s32i loc(#loc99)
                    %55 = cir.cmp(eq, %52, %54) : !s32i, !cir.bool loc(#loc245)
                    %56 = cir.ternary(%55, true {
                      %57 = cir.const #true loc(#loc100)
                      cir.yield %57 : !cir.bool loc(#loc100)
                    }, false {
                      %57 = cir.load %3 : !cir.ptr<!s32i>, !s32i loc(#loc101)
                      %58 = cir.const #cir.int<0> : !s32i loc(#loc102)
                      %59 = cir.cmp(eq, %57, %58) : !s32i, !cir.bool loc(#loc246)
                      %60 = cir.ternary(%59, true {
                        %61 = cir.const #true loc(#loc100)
                        cir.yield %61 : !cir.bool loc(#loc100)
                      }, false {
                        %61 = cir.const #false loc(#loc100)
                        cir.yield %61 : !cir.bool loc(#loc100)
                      }) : (!cir.bool) -> !cir.bool loc(#loc100)
                      cir.yield %60 : !cir.bool loc(#loc100)
                    }) : (!cir.bool) -> !cir.bool loc(#loc100)
                    cir.if %56 {
                      cir.break loc(#loc104)
                    } loc(#loc247)
                  } loc(#loc244)
                  %46 = cir.const #cir.int<0> : !s8i loc(#loc105)
                  %47 = cir.load %3 : !cir.ptr<!s32i>, !s32i loc(#loc106)
                  %48 = cir.cast(array_to_ptrdecay, %6 : !cir.ptr<!cir.array<!s8i x 14>>), !cir.ptr<!s8i> loc(#loc107)
                  %49 = cir.ptr_stride(%48 : !cir.ptr<!s8i>, %47 : !s32i), !cir.ptr<!s8i> loc(#loc107)
                  cir.store %46, %49 : !s8i, !cir.ptr<!s8i> loc(#loc248)
                  %50 = cir.cast(array_to_ptrdecay, %6 : !cir.ptr<!cir.array<!s8i x 14>>), !cir.ptr<!s8i> loc(#loc108)
                  %51 = cir.call @atoi(%50) : (!cir.ptr<!s8i>) -> !s32i side_effect(pure) extra(#fn_attr) loc(#loc109)
                  cir.store %51, %0 : !s32i, !cir.ptr<!s32i> loc(#loc249)
                } loc(#loc226)
                cir.yield loc(#loc42)
              } while {
                %9 = cir.const #cir.int<0> : !s32i loc(#loc112)
                %10 = cir.cast(int_to_bool, %9 : !s32i), !cir.bool loc(#loc112)
                cir.condition(%10) loc(#loc112)
              } loc(#loc225)
            } loc(#loc225)
            cir.scope {
              %9 = cir.load %5 : !cir.ptr<!s32i>, !s32i loc(#loc115)
              %10 = cir.const #cir.int<1> : !s32i loc(#loc116)
              %11 = cir.unary(minus, %10) nsw : !s32i, !s32i loc(#loc116)
              %12 = cir.cmp(ne, %9, %11) : !s32i, !cir.bool loc(#loc251)
              cir.if %12 {
                %13 = cir.load %5 : !cir.ptr<!s32i>, !s32i loc(#loc118)
                %14 = cir.call @close(%13) : (!s32i) -> !s32i loc(#loc119)
              } loc(#loc252)
            } loc(#loc250)
          } loc(#loc220)
          cir.break loc(#loc120)
        } loc(#loc219)
        cir.yield loc(#loc28)
      } loc(#loc218)
    } loc(#loc218)
    cir.scope {
      %3 = cir.alloca !u64i, !cir.ptr<!u64i>, ["dataBytes"] {alignment = 8 : i64} loc(#loc254)
      %4 = cir.alloca !u64i, !cir.ptr<!u64i>, ["i"] {alignment = 8 : i64} loc(#loc255)
      %5 = cir.alloca !cir.ptr<!s32i>, !cir.ptr<!cir.ptr<!s32i>>, ["intPointer"] {alignment = 8 : i64} loc(#loc256)
      %6 = cir.load %0 : !cir.ptr<!s32i>, !s32i loc(#loc128)
      %7 = cir.cast(integral, %6 : !s32i), !u64i loc(#loc128)
      %8 = cir.const #cir.int<4> : !u64i loc(#loc257)
      %9 = cir.binop(mul, %7, %8) : !u64i loc(#loc258)
      cir.store %9, %3 : !u64i, !cir.ptr<!u64i> loc(#loc259)
      %10 = cir.load %3 : !cir.ptr<!u64i>, !u64i loc(#loc132)
      %11 = cir.call @_Znam(%10) : (!u64i) -> !cir.ptr<!void> loc(#loc133)
      %12 = cir.cast(bitcast, %11 : !cir.ptr<!void>), !cir.ptr<!s8i> loc(#loc260)
      %13 = cir.cast(bitcast, %12 : !cir.ptr<!s8i>), !cir.ptr<!s32i> loc(#loc260)
      cir.store %13, %5 : !cir.ptr<!s32i>, !cir.ptr<!cir.ptr<!s32i>> loc(#loc261)
      cir.scope {
        %19 = cir.const #cir.int<0> : !s32i loc(#loc139)
        %20 = cir.cast(integral, %19 : !s32i), !u64i loc(#loc139)
        cir.store %20, %4 : !u64i, !cir.ptr<!u64i> loc(#loc263)
        cir.for : cond {
          %21 = cir.load %4 : !cir.ptr<!u64i>, !u64i loc(#loc141)
          %22 = cir.load %0 : !cir.ptr<!s32i>, !s32i loc(#loc142)
          %23 = cir.cast(integral, %22 : !s32i), !u64i loc(#loc142)
          %24 = cir.cmp(lt, %21, %23) : !u64i, !cir.bool loc(#loc264)
          cir.condition(%24) loc(#loc264)
        } body {
          cir.scope {
            %21 = cir.const #cir.int<0> : !s32i loc(#loc144)
            %22 = cir.load %5 : !cir.ptr<!cir.ptr<!s32i>>, !cir.ptr<!s32i> loc(#loc145)
            %23 = cir.load %4 : !cir.ptr<!u64i>, !u64i loc(#loc146)
            %24 = cir.ptr_stride(%22 : !cir.ptr<!s32i>, %23 : !u64i), !cir.ptr<!s32i> loc(#loc147)
            cir.store %21, %24 : !s32i, !cir.ptr<!s32i> loc(#loc266)
          } loc(#loc265)
          cir.yield loc(#loc138)
        } step {
          %21 = cir.load %4 : !cir.ptr<!u64i>, !u64i loc(#loc148)
          %22 = cir.unary(inc, %21) : !u64i, !u64i loc(#loc149)
          cir.store %22, %4 : !u64i, !cir.ptr<!u64i> loc(#loc267)
          cir.yield loc(#loc262)
        } loc(#loc262)
      } loc(#loc262)
      %14 = cir.load %5 : !cir.ptr<!cir.ptr<!s32i>>, !cir.ptr<!s32i> loc(#loc150)
      %15 = cir.const #cir.int<0> : !s32i loc(#loc151)
      %16 = cir.ptr_stride(%14 : !cir.ptr<!s32i>, %15 : !s32i), !cir.ptr<!s32i> loc(#loc152)
      %17 = cir.load %16 : !cir.ptr<!s32i>, !s32i loc(#loc150)
      cir.call @printIntLine(%17) : (!s32i) -> () loc(#loc153)
      %18 = cir.load %5 : !cir.ptr<!cir.ptr<!s32i>>, !cir.ptr<!s32i> loc(#loc154)
      cir.delete.array %18 : <!s32i> loc(#loc154)
    } loc(#loc253)
    cir.return loc(#loc21)
  } loc(#loc215)
  cir.func internal private @_ZN65CWE680_Integer_Overflow_to_Buffer_Overflow__new_connect_socket_16L7goodG2BEv() extra(#fn_attr1) {
    %0 = cir.alloca !s32i, !cir.ptr<!s32i>, ["data"] {alignment = 4 : i64} loc(#loc269)
    %1 = cir.const #cir.int<1> : !s32i loc(#loc159)
    %2 = cir.unary(minus, %1) nsw : !s32i, !s32i loc(#loc160)
    cir.store %2, %0 : !s32i, !cir.ptr<!s32i> loc(#loc270)
    cir.scope {
      cir.while {
        %3 = cir.const #cir.int<1> : !s32i loc(#loc164)
        %4 = cir.cast(int_to_bool, %3 : !s32i), !cir.bool loc(#loc164)
        cir.condition(%4) loc(#loc164)
      } do {
        cir.scope {
          %3 = cir.const #cir.int<20> : !s32i loc(#loc166)
          cir.store %3, %0 : !s32i, !cir.ptr<!s32i> loc(#loc273)
          cir.break loc(#loc168)
        } loc(#loc272)
        cir.yield loc(#loc163)
      } loc(#loc271)
    } loc(#loc271)
    cir.scope {
      %3 = cir.alloca !u64i, !cir.ptr<!u64i>, ["dataBytes"] {alignment = 8 : i64} loc(#loc275)
      %4 = cir.alloca !u64i, !cir.ptr<!u64i>, ["i"] {alignment = 8 : i64} loc(#loc276)
      %5 = cir.alloca !cir.ptr<!s32i>, !cir.ptr<!cir.ptr<!s32i>>, ["intPointer"] {alignment = 8 : i64} loc(#loc277)
      %6 = cir.load %0 : !cir.ptr<!s32i>, !s32i loc(#loc176)
      %7 = cir.cast(integral, %6 : !s32i), !u64i loc(#loc176)
      %8 = cir.const #cir.int<4> : !u64i loc(#loc278)
      %9 = cir.binop(mul, %7, %8) : !u64i loc(#loc279)
      cir.store %9, %3 : !u64i, !cir.ptr<!u64i> loc(#loc280)
      %10 = cir.load %3 : !cir.ptr<!u64i>, !u64i loc(#loc180)
      %11 = cir.call @_Znam(%10) : (!u64i) -> !cir.ptr<!void> loc(#loc181)
      %12 = cir.cast(bitcast, %11 : !cir.ptr<!void>), !cir.ptr<!s8i> loc(#loc281)
      %13 = cir.cast(bitcast, %12 : !cir.ptr<!s8i>), !cir.ptr<!s32i> loc(#loc281)
      cir.store %13, %5 : !cir.ptr<!s32i>, !cir.ptr<!cir.ptr<!s32i>> loc(#loc282)
      cir.scope {
        %19 = cir.const #cir.int<0> : !s32i loc(#loc187)
        %20 = cir.cast(integral, %19 : !s32i), !u64i loc(#loc187)
        cir.store %20, %4 : !u64i, !cir.ptr<!u64i> loc(#loc284)
        cir.for : cond {
          %21 = cir.load %4 : !cir.ptr<!u64i>, !u64i loc(#loc189)
          %22 = cir.load %0 : !cir.ptr<!s32i>, !s32i loc(#loc190)
          %23 = cir.cast(integral, %22 : !s32i), !u64i loc(#loc190)
          %24 = cir.cmp(lt, %21, %23) : !u64i, !cir.bool loc(#loc285)
          cir.condition(%24) loc(#loc285)
        } body {
          cir.scope {
            %21 = cir.const #cir.int<0> : !s32i loc(#loc192)
            %22 = cir.load %5 : !cir.ptr<!cir.ptr<!s32i>>, !cir.ptr<!s32i> loc(#loc193)
            %23 = cir.load %4 : !cir.ptr<!u64i>, !u64i loc(#loc194)
            %24 = cir.ptr_stride(%22 : !cir.ptr<!s32i>, %23 : !u64i), !cir.ptr<!s32i> loc(#loc195)
            cir.store %21, %24 : !s32i, !cir.ptr<!s32i> loc(#loc287)
          } loc(#loc286)
          cir.yield loc(#loc186)
        } step {
          %21 = cir.load %4 : !cir.ptr<!u64i>, !u64i loc(#loc196)
          %22 = cir.unary(inc, %21) : !u64i, !u64i loc(#loc197)
          cir.store %22, %4 : !u64i, !cir.ptr<!u64i> loc(#loc288)
          cir.yield loc(#loc283)
        } loc(#loc283)
      } loc(#loc283)
      %14 = cir.load %5 : !cir.ptr<!cir.ptr<!s32i>>, !cir.ptr<!s32i> loc(#loc198)
      %15 = cir.const #cir.int<0> : !s32i loc(#loc199)
      %16 = cir.ptr_stride(%14 : !cir.ptr<!s32i>, %15 : !s32i), !cir.ptr<!s32i> loc(#loc200)
      %17 = cir.load %16 : !cir.ptr<!s32i>, !s32i loc(#loc198)
      cir.call @printIntLine(%17) : (!s32i) -> () loc(#loc201)
      %18 = cir.load %5 : !cir.ptr<!cir.ptr<!s32i>>, !cir.ptr<!s32i> loc(#loc202)
      cir.delete.array %18 : <!s32i> loc(#loc202)
    } loc(#loc274)
    cir.return loc(#loc156)
  } loc(#loc268)
  cir.func @_ZN65CWE680_Integer_Overflow_to_Buffer_Overflow__new_connect_socket_164goodEv() extra(#fn_attr1) {
    cir.call @_ZN65CWE680_Integer_Overflow_to_Buffer_Overflow__new_connect_socket_16L7goodG2BEv() : () -> () loc(#loc205)
    cir.return loc(#loc204)
  } loc(#loc289)
} loc(#loc)
#loc = loc("/workspaces/juliet-c/testcases/CWE680_Integer_Overflow_to_Buffer_Overflow/CWE680_Integer_Overflow_to_Buffer_Overflow__new_connect_socket_16.cpp":0:0)
#loc1 = loc("/usr/include/x86_64-linux-gnu/sys/socket.h":102:1)
#loc2 = loc("/usr/include/x86_64-linux-gnu/sys/socket.h":102:62)
#loc3 = loc("/usr/include/arpa/inet.h":34:1)
#loc4 = loc("/usr/include/arpa/inet.h":34:47)
#loc5 = loc("CWE680_Integer_Overflow_to_Buffer_Overflow__new_connect_socket_16.cpp":79:53)
#loc6 = loc("/usr/include/netinet/in.h":402:1)
#loc7 = loc("/usr/include/netinet/in.h":403:40)
#loc8 = loc("/usr/include/x86_64-linux-gnu/sys/socket.h":126:1)
#loc9 = loc("/usr/include/x86_64-linux-gnu/sys/socket.h":126:75)
#loc10 = loc("/usr/include/x86_64-linux-gnu/sys/socket.h":145:1)
#loc11 = loc("/usr/include/x86_64-linux-gnu/sys/socket.h":145:68)
#loc12 = loc("/usr/include/stdlib.h":105:1)
#loc13 = loc("/usr/include/stdlib.h":106:33)
#loc14 = loc("/usr/include/unistd.h":358:1)
#loc15 = loc("/usr/include/unistd.h":358:27)
#loc16 = loc("/usr/lib/gcc/x86_64-linux-gnu/13/../../../../include/c++/13/new":128:20)
#loc17 = loc("/usr/lib/gcc/x86_64-linux-gnu/13/../../../../include/c++/13/new":129:41)
#loc18 = loc("../../testcasesupport/std_testcase_io.h":18:1)
#loc19 = loc("../../testcasesupport/std_testcase_io.h":18:33)
#loc20 = loc("CWE680_Integer_Overflow_to_Buffer_Overflow__new_connect_socket_16.cpp":46:1)
#loc21 = loc("CWE680_Integer_Overflow_to_Buffer_Overflow__new_connect_socket_16.cpp":124:1)
#loc22 = loc("CWE680_Integer_Overflow_to_Buffer_Overflow__new_connect_socket_16.cpp":48:5)
#loc23 = loc("CWE680_Integer_Overflow_to_Buffer_Overflow__new_connect_socket_16.cpp":48:9)
#loc24 = loc("CWE680_Integer_Overflow_to_Buffer_Overflow__new_connect_socket_16.cpp":50:13)
#loc25 = loc("CWE680_Integer_Overflow_to_Buffer_Overflow__new_connect_socket_16.cpp":50:12)
#loc26 = loc("CWE680_Integer_Overflow_to_Buffer_Overflow__new_connect_socket_16.cpp":50:5)
#loc27 = loc("CWE680_Integer_Overflow_to_Buffer_Overflow__new_connect_socket_16.cpp":51:5)
#loc28 = loc("CWE680_Integer_Overflow_to_Buffer_Overflow__new_connect_socket_16.cpp":110:5)
#loc29 = loc("CWE680_Integer_Overflow_to_Buffer_Overflow__new_connect_socket_16.cpp":51:11)
#loc30 = loc("CWE680_Integer_Overflow_to_Buffer_Overflow__new_connect_socket_16.cpp":52:5)
#loc31 = loc("CWE680_Integer_Overflow_to_Buffer_Overflow__new_connect_socket_16.cpp":53:9)
#loc32 = loc("CWE680_Integer_Overflow_to_Buffer_Overflow__new_connect_socket_16.cpp":108:9)
#loc33 = loc("CWE680_Integer_Overflow_to_Buffer_Overflow__new_connect_socket_16.cpp":58:13)
#loc34 = loc("CWE680_Integer_Overflow_to_Buffer_Overflow__new_connect_socket_16.cpp":58:17)
#loc35 = loc("CWE680_Integer_Overflow_to_Buffer_Overflow__new_connect_socket_16.cpp":59:13)
#loc36 = loc("CWE680_Integer_Overflow_to_Buffer_Overflow__new_connect_socket_16.cpp":59:32)
#loc37 = loc("CWE680_Integer_Overflow_to_Buffer_Overflow__new_connect_socket_16.cpp":60:13)
#loc38 = loc("CWE680_Integer_Overflow_to_Buffer_Overflow__new_connect_socket_16.cpp":60:36)
#loc39 = loc("CWE680_Integer_Overflow_to_Buffer_Overflow__new_connect_socket_16.cpp":61:13)
#loc40 = loc("CWE680_Integer_Overflow_to_Buffer_Overflow__new_connect_socket_16.cpp":61:45)
#loc41 = loc("CWE680_Integer_Overflow_to_Buffer_Overflow__new_connect_socket_16.cpp":62:13)
#loc42 = loc("CWE680_Integer_Overflow_to_Buffer_Overflow__new_connect_socket_16.cpp":97:21)
#loc43 = loc("CWE680_Integer_Overflow_to_Buffer_Overflow__new_connect_socket_16.cpp":63:13)
#loc44 = loc("CWE680_Integer_Overflow_to_Buffer_Overflow__new_connect_socket_16.cpp":96:13)
#loc45 = loc("CWE680_Integer_Overflow_to_Buffer_Overflow__new_connect_socket_16.cpp":72:40)
#loc46 = loc("CWE680_Integer_Overflow_to_Buffer_Overflow__new_connect_socket_16.cpp":72:49)
#loc47 = loc("CWE680_Integer_Overflow_to_Buffer_Overflow__new_connect_socket_16.cpp":72:62)
#loc48 = loc("CWE680_Integer_Overflow_to_Buffer_Overflow__new_connect_socket_16.cpp":72:33)
#loc49 = loc("CWE680_Integer_Overflow_to_Buffer_Overflow__new_connect_socket_16.cpp":72:17)
#loc50 = loc("CWE680_Integer_Overflow_to_Buffer_Overflow__new_connect_socket_16.cpp":72:73)
#loc51 = loc("CWE680_Integer_Overflow_to_Buffer_Overflow__new_connect_socket_16.cpp":73:17)
#loc52 = loc("CWE680_Integer_Overflow_to_Buffer_Overflow__new_connect_socket_16.cpp":76:17)
#loc53 = loc("CWE680_Integer_Overflow_to_Buffer_Overflow__new_connect_socket_16.cpp":73:21)
#loc54 = loc("CWE680_Integer_Overflow_to_Buffer_Overflow__new_connect_socket_16.cpp":73:38)
#loc55 = loc("CWE680_Integer_Overflow_to_Buffer_Overflow__new_connect_socket_16.cpp":74:17)
#loc56 = loc("CWE680_Integer_Overflow_to_Buffer_Overflow__new_connect_socket_16.cpp":75:21)
#loc57 = loc("CWE680_Integer_Overflow_to_Buffer_Overflow__new_connect_socket_16.cpp":77:24)
#loc58 = loc("CWE680_Integer_Overflow_to_Buffer_Overflow__new_connect_socket_16.cpp":77:25)
#loc59 = loc("CWE680_Integer_Overflow_to_Buffer_Overflow__new_connect_socket_16.cpp":77:34)
#loc60 = loc("CWE680_Integer_Overflow_to_Buffer_Overflow__new_connect_socket_16.cpp":77:37)
#loc61 = loc("CWE680_Integer_Overflow_to_Buffer_Overflow__new_connect_socket_16.cpp":77:51)
#loc62 = loc("CWE680_Integer_Overflow_to_Buffer_Overflow__new_connect_socket_16.cpp":77:17)
#loc63 = loc("CWE680_Integer_Overflow_to_Buffer_Overflow__new_connect_socket_16.cpp":77:52)
#loc64 = loc("CWE680_Integer_Overflow_to_Buffer_Overflow__new_connect_socket_16.cpp":78:38)
#loc65 = loc("/usr/include/netinet/in.h":249:5)
#loc66 = loc("CWE680_Integer_Overflow_to_Buffer_Overflow__new_connect_socket_16.cpp":78:17)
#loc67 = loc("CWE680_Integer_Overflow_to_Buffer_Overflow__new_connect_socket_16.cpp":79:43)
#loc68 = loc("/usr/include/netinet/in.h":251:20)
#loc69 = loc("/usr/include/netinet/in.h":33:15)
#loc70 = loc("CWE680_Integer_Overflow_to_Buffer_Overflow__new_connect_socket_16.cpp":79:17)
#loc71 = loc("CWE680_Integer_Overflow_to_Buffer_Overflow__new_connect_socket_16.cpp":79:63)
#loc72 = loc("CWE680_Integer_Overflow_to_Buffer_Overflow__new_connect_socket_16.cpp":80:42)
#loc73 = loc("CWE680_Integer_Overflow_to_Buffer_Overflow__new_connect_socket_16.cpp":80:36)
#loc74 = loc("/usr/include/netinet/in.h":250:15)
#loc75 = loc("CWE680_Integer_Overflow_to_Buffer_Overflow__new_connect_socket_16.cpp":80:17)
#loc76 = loc("CWE680_Integer_Overflow_to_Buffer_Overflow__new_connect_socket_16.cpp":80:50)
#loc77 = loc("CWE680_Integer_Overflow_to_Buffer_Overflow__new_connect_socket_16.cpp":81:17)
#loc78 = loc("CWE680_Integer_Overflow_to_Buffer_Overflow__new_connect_socket_16.cpp":84:17)
#loc79 = loc("CWE680_Integer_Overflow_to_Buffer_Overflow__new_connect_socket_16.cpp":81:29)
#loc80 = loc("CWE680_Integer_Overflow_to_Buffer_Overflow__new_connect_socket_16.cpp":81:62)
#loc81 = loc("CWE680_Integer_Overflow_to_Buffer_Overflow__new_connect_socket_16.cpp":81:63)
#loc82 = loc("CWE680_Integer_Overflow_to_Buffer_Overflow__new_connect_socket_16.cpp":81:72)
#loc83 = loc("CWE680_Integer_Overflow_to_Buffer_Overflow__new_connect_socket_16.cpp":81:86)
#loc84 = loc("CWE680_Integer_Overflow_to_Buffer_Overflow__new_connect_socket_16.cpp":81:21)
#loc85 = loc("CWE680_Integer_Overflow_to_Buffer_Overflow__new_connect_socket_16.cpp":81:92)
#loc86 = loc("CWE680_Integer_Overflow_to_Buffer_Overflow__new_connect_socket_16.cpp":82:17)
#loc87 = loc("CWE680_Integer_Overflow_to_Buffer_Overflow__new_connect_socket_16.cpp":83:21)
#loc88 = loc("CWE680_Integer_Overflow_to_Buffer_Overflow__new_connect_socket_16.cpp":87:35)
#loc89 = loc("CWE680_Integer_Overflow_to_Buffer_Overflow__new_connect_socket_16.cpp":87:50)
#loc90 = loc("CWE680_Integer_Overflow_to_Buffer_Overflow__new_connect_socket_16.cpp":87:63)
#loc91 = loc("CWE680_Integer_Overflow_to_Buffer_Overflow__new_connect_socket_16.cpp":87:81)
#loc92 = loc("CWE680_Integer_Overflow_to_Buffer_Overflow__new_connect_socket_16.cpp":87:84)
#loc93 = loc("CWE680_Integer_Overflow_to_Buffer_Overflow__new_connect_socket_16.cpp":87:30)
#loc94 = loc("CWE680_Integer_Overflow_to_Buffer_Overflow__new_connect_socket_16.cpp":87:17)
#loc95 = loc("CWE680_Integer_Overflow_to_Buffer_Overflow__new_connect_socket_16.cpp":87:85)
#loc96 = loc("CWE680_Integer_Overflow_to_Buffer_Overflow__new_connect_socket_16.cpp":88:17)
#loc97 = loc("CWE680_Integer_Overflow_to_Buffer_Overflow__new_connect_socket_16.cpp":91:17)
#loc98 = loc("CWE680_Integer_Overflow_to_Buffer_Overflow__new_connect_socket_16.cpp":88:21)
#loc99 = loc("CWE680_Integer_Overflow_to_Buffer_Overflow__new_connect_socket_16.cpp":88:35)
#loc100 = loc("CWE680_Integer_Overflow_to_Buffer_Overflow__new_connect_socket_16.cpp":88:48)
#loc101 = loc("CWE680_Integer_Overflow_to_Buffer_Overflow__new_connect_socket_16.cpp":88:51)
#loc102 = loc("CWE680_Integer_Overflow_to_Buffer_Overflow__new_connect_socket_16.cpp":88:65)
#loc103 = loc("CWE680_Integer_Overflow_to_Buffer_Overflow__new_connect_socket_16.cpp":89:17)
#loc104 = loc("CWE680_Integer_Overflow_to_Buffer_Overflow__new_connect_socket_16.cpp":90:21)
#loc105 = loc("CWE680_Integer_Overflow_to_Buffer_Overflow__new_connect_socket_16.cpp":93:43)
#loc106 = loc("CWE680_Integer_Overflow_to_Buffer_Overflow__new_connect_socket_16.cpp":93:29)
#loc107 = loc("CWE680_Integer_Overflow_to_Buffer_Overflow__new_connect_socket_16.cpp":93:17)
#loc108 = loc("CWE680_Integer_Overflow_to_Buffer_Overflow__new_connect_socket_16.cpp":95:29)
#loc109 = loc("CWE680_Integer_Overflow_to_Buffer_Overflow__new_connect_socket_16.cpp":95:24)
#loc110 = loc("CWE680_Integer_Overflow_to_Buffer_Overflow__new_connect_socket_16.cpp":95:17)
#loc111 = loc("CWE680_Integer_Overflow_to_Buffer_Overflow__new_connect_socket_16.cpp":95:40)
#loc112 = loc("CWE680_Integer_Overflow_to_Buffer_Overflow__new_connect_socket_16.cpp":97:20)
#loc113 = loc("CWE680_Integer_Overflow_to_Buffer_Overflow__new_connect_socket_16.cpp":98:13)
#loc114 = loc("CWE680_Integer_Overflow_to_Buffer_Overflow__new_connect_socket_16.cpp":101:13)
#loc115 = loc("CWE680_Integer_Overflow_to_Buffer_Overflow__new_connect_socket_16.cpp":98:17)
#loc116 = loc("CWE680_Integer_Overflow_to_Buffer_Overflow__new_connect_socket_16.cpp":98:34)
#loc117 = loc("CWE680_Integer_Overflow_to_Buffer_Overflow__new_connect_socket_16.cpp":99:13)
#loc118 = loc("CWE680_Integer_Overflow_to_Buffer_Overflow__new_connect_socket_16.cpp":100:30)
#loc119 = loc("CWE680_Integer_Overflow_to_Buffer_Overflow__new_connect_socket_16.cpp":100:17)
#loc120 = loc("CWE680_Integer_Overflow_to_Buffer_Overflow__new_connect_socket_16.cpp":109:9)
#loc121 = loc("CWE680_Integer_Overflow_to_Buffer_Overflow__new_connect_socket_16.cpp":111:5)
#loc122 = loc("CWE680_Integer_Overflow_to_Buffer_Overflow__new_connect_socket_16.cpp":123:5)
#loc123 = loc("CWE680_Integer_Overflow_to_Buffer_Overflow__new_connect_socket_16.cpp":112:9)
#loc124 = loc("CWE680_Integer_Overflow_to_Buffer_Overflow__new_connect_socket_16.cpp":112:16)
#loc125 = loc("CWE680_Integer_Overflow_to_Buffer_Overflow__new_connect_socket_16.cpp":112:26)
#loc126 = loc("CWE680_Integer_Overflow_to_Buffer_Overflow__new_connect_socket_16.cpp":113:9)
#loc127 = loc("CWE680_Integer_Overflow_to_Buffer_Overflow__new_connect_socket_16.cpp":113:14)
#loc128 = loc("CWE680_Integer_Overflow_to_Buffer_Overflow__new_connect_socket_16.cpp":115:21)
#loc129 = loc("CWE680_Integer_Overflow_to_Buffer_Overflow__new_connect_socket_16.cpp":115:28)
#loc130 = loc("CWE680_Integer_Overflow_to_Buffer_Overflow__new_connect_socket_16.cpp":115:38)
#loc131 = loc("CWE680_Integer_Overflow_to_Buffer_Overflow__new_connect_socket_16.cpp":115:9)
#loc132 = loc("CWE680_Integer_Overflow_to_Buffer_Overflow__new_connect_socket_16.cpp":116:37)
#loc133 = loc("CWE680_Integer_Overflow_to_Buffer_Overflow__new_connect_socket_16.cpp":46:6)
#loc134 = loc("CWE680_Integer_Overflow_to_Buffer_Overflow__new_connect_socket_16.cpp":116:28)
#loc135 = loc("CWE680_Integer_Overflow_to_Buffer_Overflow__new_connect_socket_16.cpp":116:46)
#loc136 = loc("CWE680_Integer_Overflow_to_Buffer_Overflow__new_connect_socket_16.cpp":116:9)
#loc137 = loc("CWE680_Integer_Overflow_to_Buffer_Overflow__new_connect_socket_16.cpp":117:9)
#loc138 = loc("CWE680_Integer_Overflow_to_Buffer_Overflow__new_connect_socket_16.cpp":120:9)
#loc139 = loc("CWE680_Integer_Overflow_to_Buffer_Overflow__new_connect_socket_16.cpp":117:18)
#loc140 = loc("CWE680_Integer_Overflow_to_Buffer_Overflow__new_connect_socket_16.cpp":117:14)
#loc141 = loc("CWE680_Integer_Overflow_to_Buffer_Overflow__new_connect_socket_16.cpp":117:21)
#loc142 = loc("CWE680_Integer_Overflow_to_Buffer_Overflow__new_connect_socket_16.cpp":117:33)
#loc143 = loc("CWE680_Integer_Overflow_to_Buffer_Overflow__new_connect_socket_16.cpp":118:9)
#loc144 = loc("CWE680_Integer_Overflow_to_Buffer_Overflow__new_connect_socket_16.cpp":119:29)
#loc145 = loc("CWE680_Integer_Overflow_to_Buffer_Overflow__new_connect_socket_16.cpp":119:13)
#loc146 = loc("CWE680_Integer_Overflow_to_Buffer_Overflow__new_connect_socket_16.cpp":119:24)
#loc147 = loc("CWE680_Integer_Overflow_to_Buffer_Overflow__new_connect_socket_16.cpp":119:25)
#loc148 = loc("CWE680_Integer_Overflow_to_Buffer_Overflow__new_connect_socket_16.cpp":117:40)
#loc149 = loc("CWE680_Integer_Overflow_to_Buffer_Overflow__new_connect_socket_16.cpp":117:39)
#loc150 = loc("CWE680_Integer_Overflow_to_Buffer_Overflow__new_connect_socket_16.cpp":121:22)
#loc151 = loc("CWE680_Integer_Overflow_to_Buffer_Overflow__new_connect_socket_16.cpp":121:33)
#loc152 = loc("CWE680_Integer_Overflow_to_Buffer_Overflow__new_connect_socket_16.cpp":121:34)
#loc153 = loc("CWE680_Integer_Overflow_to_Buffer_Overflow__new_connect_socket_16.cpp":121:9)
#loc154 = loc("CWE680_Integer_Overflow_to_Buffer_Overflow__new_connect_socket_16.cpp":122:19)
#loc155 = loc("CWE680_Integer_Overflow_to_Buffer_Overflow__new_connect_socket_16.cpp":131:1)
#loc156 = loc("CWE680_Integer_Overflow_to_Buffer_Overflow__new_connect_socket_16.cpp":155:1)
#loc157 = loc("CWE680_Integer_Overflow_to_Buffer_Overflow__new_connect_socket_16.cpp":133:5)
#loc158 = loc("CWE680_Integer_Overflow_to_Buffer_Overflow__new_connect_socket_16.cpp":133:9)
#loc159 = loc("CWE680_Integer_Overflow_to_Buffer_Overflow__new_connect_socket_16.cpp":135:13)
#loc160 = loc("CWE680_Integer_Overflow_to_Buffer_Overflow__new_connect_socket_16.cpp":135:12)
#loc161 = loc("CWE680_Integer_Overflow_to_Buffer_Overflow__new_connect_socket_16.cpp":135:5)
#loc162 = loc("CWE680_Integer_Overflow_to_Buffer_Overflow__new_connect_socket_16.cpp":136:5)
#loc163 = loc("CWE680_Integer_Overflow_to_Buffer_Overflow__new_connect_socket_16.cpp":141:5)
#loc164 = loc("CWE680_Integer_Overflow_to_Buffer_Overflow__new_connect_socket_16.cpp":136:11)
#loc165 = loc("CWE680_Integer_Overflow_to_Buffer_Overflow__new_connect_socket_16.cpp":137:5)
#loc166 = loc("CWE680_Integer_Overflow_to_Buffer_Overflow__new_connect_socket_16.cpp":139:16)
#loc167 = loc("CWE680_Integer_Overflow_to_Buffer_Overflow__new_connect_socket_16.cpp":139:9)
#loc168 = loc("CWE680_Integer_Overflow_to_Buffer_Overflow__new_connect_socket_16.cpp":140:9)
#loc169 = loc("CWE680_Integer_Overflow_to_Buffer_Overflow__new_connect_socket_16.cpp":142:5)
#loc170 = loc("CWE680_Integer_Overflow_to_Buffer_Overflow__new_connect_socket_16.cpp":154:5)
#loc171 = loc("CWE680_Integer_Overflow_to_Buffer_Overflow__new_connect_socket_16.cpp":143:9)
#loc172 = loc("CWE680_Integer_Overflow_to_Buffer_Overflow__new_connect_socket_16.cpp":143:16)
#loc173 = loc("CWE680_Integer_Overflow_to_Buffer_Overflow__new_connect_socket_16.cpp":143:26)
#loc174 = loc("CWE680_Integer_Overflow_to_Buffer_Overflow__new_connect_socket_16.cpp":144:9)
#loc175 = loc("CWE680_Integer_Overflow_to_Buffer_Overflow__new_connect_socket_16.cpp":144:14)
#loc176 = loc("CWE680_Integer_Overflow_to_Buffer_Overflow__new_connect_socket_16.cpp":146:21)
#loc177 = loc("CWE680_Integer_Overflow_to_Buffer_Overflow__new_connect_socket_16.cpp":146:28)
#loc178 = loc("CWE680_Integer_Overflow_to_Buffer_Overflow__new_connect_socket_16.cpp":146:38)
#loc179 = loc("CWE680_Integer_Overflow_to_Buffer_Overflow__new_connect_socket_16.cpp":146:9)
#loc180 = loc("CWE680_Integer_Overflow_to_Buffer_Overflow__new_connect_socket_16.cpp":147:37)
#loc181 = loc("CWE680_Integer_Overflow_to_Buffer_Overflow__new_connect_socket_16.cpp":131:13)
#loc182 = loc("CWE680_Integer_Overflow_to_Buffer_Overflow__new_connect_socket_16.cpp":147:28)
#loc183 = loc("CWE680_Integer_Overflow_to_Buffer_Overflow__new_connect_socket_16.cpp":147:46)
#loc184 = loc("CWE680_Integer_Overflow_to_Buffer_Overflow__new_connect_socket_16.cpp":147:9)
#loc185 = loc("CWE680_Integer_Overflow_to_Buffer_Overflow__new_connect_socket_16.cpp":148:9)
#loc186 = loc("CWE680_Integer_Overflow_to_Buffer_Overflow__new_connect_socket_16.cpp":151:9)
#loc187 = loc("CWE680_Integer_Overflow_to_Buffer_Overflow__new_connect_socket_16.cpp":148:18)
#loc188 = loc("CWE680_Integer_Overflow_to_Buffer_Overflow__new_connect_socket_16.cpp":148:14)
#loc189 = loc("CWE680_Integer_Overflow_to_Buffer_Overflow__new_connect_socket_16.cpp":148:21)
#loc190 = loc("CWE680_Integer_Overflow_to_Buffer_Overflow__new_connect_socket_16.cpp":148:33)
#loc191 = loc("CWE680_Integer_Overflow_to_Buffer_Overflow__new_connect_socket_16.cpp":149:9)
#loc192 = loc("CWE680_Integer_Overflow_to_Buffer_Overflow__new_connect_socket_16.cpp":150:29)
#loc193 = loc("CWE680_Integer_Overflow_to_Buffer_Overflow__new_connect_socket_16.cpp":150:13)
#loc194 = loc("CWE680_Integer_Overflow_to_Buffer_Overflow__new_connect_socket_16.cpp":150:24)
#loc195 = loc("CWE680_Integer_Overflow_to_Buffer_Overflow__new_connect_socket_16.cpp":150:25)
#loc196 = loc("CWE680_Integer_Overflow_to_Buffer_Overflow__new_connect_socket_16.cpp":148:40)
#loc197 = loc("CWE680_Integer_Overflow_to_Buffer_Overflow__new_connect_socket_16.cpp":148:39)
#loc198 = loc("CWE680_Integer_Overflow_to_Buffer_Overflow__new_connect_socket_16.cpp":152:22)
#loc199 = loc("CWE680_Integer_Overflow_to_Buffer_Overflow__new_connect_socket_16.cpp":152:33)
#loc200 = loc("CWE680_Integer_Overflow_to_Buffer_Overflow__new_connect_socket_16.cpp":152:34)
#loc201 = loc("CWE680_Integer_Overflow_to_Buffer_Overflow__new_connect_socket_16.cpp":152:9)
#loc202 = loc("CWE680_Integer_Overflow_to_Buffer_Overflow__new_connect_socket_16.cpp":153:19)
#loc203 = loc("CWE680_Integer_Overflow_to_Buffer_Overflow__new_connect_socket_16.cpp":157:1)
#loc204 = loc("CWE680_Integer_Overflow_to_Buffer_Overflow__new_connect_socket_16.cpp":160:1)
#loc205 = loc("CWE680_Integer_Overflow_to_Buffer_Overflow__new_connect_socket_16.cpp":159:5)
#loc206 = loc(fused[#loc1, #loc2])
#loc207 = loc(fused[#loc3, #loc4])
#loc208 = loc(fused[#loc6, #loc7])
#loc209 = loc(fused[#loc8, #loc9])
#loc210 = loc(fused[#loc10, #loc11])
#loc211 = loc(fused[#loc12, #loc13])
#loc212 = loc(fused[#loc14, #loc15])
#loc213 = loc(fused[#loc16, #loc17])
#loc214 = loc(fused[#loc18, #loc19])
#loc215 = loc(fused[#loc20, #loc21])
#loc216 = loc(fused[#loc22, #loc23])
#loc217 = loc(fused[#loc26, #loc24])
#loc218 = loc(fused[#loc27, #loc28])
#loc219 = loc(fused[#loc30, #loc28])
#loc220 = loc(fused[#loc31, #loc32])
#loc221 = loc(fused[#loc33, #loc34])
#loc222 = loc(fused[#loc35, #loc36])
#loc223 = loc(fused[#loc37, #loc38])
#loc224 = loc(fused[#loc39, #loc40])
#loc225 = loc(fused[#loc41, #loc42])
#loc226 = loc(fused[#loc43, #loc44])
#loc227 = loc(fused[#loc49, #loc50])
#loc228 = loc(fused[#loc51, #loc52])
#loc229 = loc(fused[#loc53, #loc54])
#loc230 = loc(fused[#loc55, #loc52])
#loc231 = loc(fused[#loc57, #loc58])
#loc232 = loc(fused[#loc60, #loc61])
#loc233 = loc(fused[#loc62, #loc63])
#loc234 = loc(fused[#loc66, #loc64])
#loc235 = loc(fused[#loc70, #loc71])
#loc236 = loc(fused[#loc75, #loc76])
#loc237 = loc(fused[#loc77, #loc78])
#loc238 = loc(fused[#loc80, #loc81])
#loc239 = loc(fused[#loc82, #loc83])
#loc240 = loc(fused[#loc84, #loc85])
#loc241 = loc(fused[#loc86, #loc78])
#loc242 = loc(fused[#loc90, #loc91])
#loc243 = loc(fused[#loc94, #loc95])
#loc244 = loc(fused[#loc96, #loc97])
#loc245 = loc(fused[#loc98, #loc99])
#loc246 = loc(fused[#loc101, #loc102])
#loc247 = loc(fused[#loc103, #loc97])
#loc248 = loc(fused[#loc107, #loc105])
#loc249 = loc(fused[#loc110, #loc111])
#loc250 = loc(fused[#loc113, #loc114])
#loc251 = loc(fused[#loc115, #loc116])
#loc252 = loc(fused[#loc117, #loc114])
#loc253 = loc(fused[#loc121, #loc122])
#loc254 = loc(fused[#loc123, #loc124])
#loc255 = loc(fused[#loc123, #loc125])
#loc256 = loc(fused[#loc126, #loc127])
#loc257 = loc(fused[#loc129, #loc130])
#loc258 = loc(fused[#loc128, #loc130])
#loc259 = loc(fused[#loc131, #loc130])
#loc260 = loc(fused[#loc134, #loc135])
#loc261 = loc(fused[#loc136, #loc135])
#loc262 = loc(fused[#loc137, #loc138])
#loc263 = loc(fused[#loc140, #loc139])
#loc264 = loc(fused[#loc141, #loc142])
#loc265 = loc(fused[#loc143, #loc138])
#loc266 = loc(fused[#loc145, #loc144])
#loc267 = loc(fused[#loc149, #loc148])
#loc268 = loc(fused[#loc155, #loc156])
#loc269 = loc(fused[#loc157, #loc158])
#loc270 = loc(fused[#loc161, #loc159])
#loc271 = loc(fused[#loc162, #loc163])
#loc272 = loc(fused[#loc165, #loc163])
#loc273 = loc(fused[#loc167, #loc166])
#loc274 = loc(fused[#loc169, #loc170])
#loc275 = loc(fused[#loc171, #loc172])
#loc276 = loc(fused[#loc171, #loc173])
#loc277 = loc(fused[#loc174, #loc175])
#loc278 = loc(fused[#loc177, #loc178])
#loc279 = loc(fused[#loc176, #loc178])
#loc280 = loc(fused[#loc179, #loc178])
#loc281 = loc(fused[#loc182, #loc183])
#loc282 = loc(fused[#loc184, #loc183])
#loc283 = loc(fused[#loc185, #loc186])
#loc284 = loc(fused[#loc188, #loc187])
#loc285 = loc(fused[#loc189, #loc190])
#loc286 = loc(fused[#loc191, #loc186])
#loc287 = loc(fused[#loc193, #loc192])
#loc288 = loc(fused[#loc197, #loc196])
#loc289 = loc(fused[#loc203, #loc204])
