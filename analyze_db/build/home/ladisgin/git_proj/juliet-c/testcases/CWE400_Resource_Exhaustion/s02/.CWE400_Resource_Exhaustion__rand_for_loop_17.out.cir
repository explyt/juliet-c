!s32i = !cir.int<s, 32>
!s64i = !cir.int<s, 64>
!s8i = !cir.int<s, 8>
!u32i = !cir.int<u, 32>
!u64i = !cir.int<u, 64>
!void = !cir.void
#false = #cir.bool<false> : !cir.bool
#fn_attr = #cir<extra({nothrow = #cir.nothrow})>
#fn_attr1 = #cir<extra({inline = #cir.inline<no>, nothrow = #cir.nothrow, optnone = #cir.optnone})>
#loc69 = loc("CWE400_Resource_Exhaustion__rand_for_loop_17.c":118:10)
#loc70 = loc("CWE400_Resource_Exhaustion__rand_for_loop_17.c":118:14)
#loc71 = loc("CWE400_Resource_Exhaustion__rand_for_loop_17.c":118:20)
#loc72 = loc("CWE400_Resource_Exhaustion__rand_for_loop_17.c":118:32)
#true = #cir.bool<true> : !cir.bool
#loc222 = loc(fused[#loc69, #loc70])
#loc223 = loc(fused[#loc71, #loc72])
module @"/home/ladisgin/git_proj/juliet-c/testcases/CWE400_Resource_Exhaustion/s02/CWE400_Resource_Exhaustion__rand_for_loop_17.c" attributes {cir.lang = #cir.lang<c>, cir.sob = #cir.signed_overflow_behavior<undefined>, cir.triple = "x86_64-unknown-linux-gnu", dlti.dl_spec = #dlti.dl_spec<!llvm.ptr<271> = dense<32> : vector<4xi64>, !llvm.ptr<272> = dense<64> : vector<4xi64>, i64 = dense<64> : vector<2xi64>, i32 = dense<32> : vector<2xi64>, f16 = dense<16> : vector<2xi64>, !llvm.ptr<270> = dense<32> : vector<4xi64>, f64 = dense<64> : vector<2xi64>, f128 = dense<128> : vector<2xi64>, !llvm.ptr = dense<64> : vector<4xi64>, i1 = dense<8> : vector<2xi64>, i8 = dense<8> : vector<2xi64>, i16 = dense<16> : vector<2xi64>, i128 = dense<128> : vector<2xi64>, f80 = dense<128> : vector<2xi64>, "dlti.endianness" = "little", "dlti.stack_alignment" = 128 : i64>} {
  cir.func private @rand() -> !s32i extra(#fn_attr) loc(#loc191)
  cir.func private @printLine(!cir.ptr<!s8i>) loc(#loc192)
  cir.global "private" constant cir_private dsolocal @".str" = #cir.const_array<"Hello\00" : !cir.array<!s8i x 6>> : !cir.array<!s8i x 6> {alignment = 1 : i64} loc(#loc5)
  cir.func no_proto @CWE400_Resource_Exhaustion__rand_for_loop_17_bad() extra(#fn_attr1) {
    %0 = cir.alloca !s32i, !cir.ptr<!s32i>, ["i"] {alignment = 4 : i64} loc(#loc194)
    %1 = cir.alloca !s32i, !cir.ptr<!s32i>, ["j"] {alignment = 4 : i64} loc(#loc195)
    %2 = cir.alloca !s32i, !cir.ptr<!s32i>, ["count"] {alignment = 4 : i64} loc(#loc196)
    %3 = cir.const #cir.int<1> : !s32i loc(#loc13)
    %4 = cir.unary(minus, %3) : !s32i, !s32i loc(#loc14)
    cir.store %4, %2 : !s32i, !cir.ptr<!s32i> loc(#loc197)
    cir.scope {
      %5 = cir.const #cir.int<0> : !s32i loc(#loc18)
      cir.store %5, %0 : !s32i, !cir.ptr<!s32i> loc(#loc199)
      cir.for : cond {
        %6 = cir.load %0 : !cir.ptr<!s32i>, !s32i loc(#loc20)
        %7 = cir.const #cir.int<1> : !s32i loc(#loc21)
        %8 = cir.cmp(lt, %6, %7) : !s32i, !cir.bool loc(#loc200)
        cir.condition(%8) loc(#loc22)
      } body {
        cir.scope {
          %6 = cir.call @rand() : () -> !s32i extra(#fn_attr) loc(#loc24)
          %7 = cir.const #cir.int<1> : !s32i loc(#loc24)
          %8 = cir.binop(and, %6, %7) : !s32i loc(#loc24)
          %9 = cir.cast(int_to_bool, %8 : !s32i), !cir.bool loc(#loc24)
          %10 = cir.ternary(%9, true {
            %12 = cir.call @rand() : () -> !s32i extra(#fn_attr) loc(#loc24)
            %13 = cir.cast(integral, %12 : !s32i), !u32i loc(#loc24)
            %14 = cir.const #cir.int<30> : !s32i loc(#loc24)
            %15 = cir.shift(left, %13 : !u32i, %14 : !s32i) -> !u32i loc(#loc24)
            %16 = cir.call @rand() : () -> !s32i extra(#fn_attr) loc(#loc24)
            %17 = cir.cast(integral, %16 : !s32i), !u32i loc(#loc24)
            %18 = cir.const #cir.int<15> : !s32i loc(#loc24)
            %19 = cir.shift(left, %17 : !u32i, %18 : !s32i) -> !u32i loc(#loc24)
            %20 = cir.binop(xor, %15, %19) : !u32i loc(#loc24)
            %21 = cir.call @rand() : () -> !s32i extra(#fn_attr) loc(#loc24)
            %22 = cir.cast(integral, %21 : !s32i), !u32i loc(#loc24)
            %23 = cir.binop(xor, %20, %22) : !u32i loc(#loc24)
            cir.yield %23 : !u32i loc(#loc24)
          }, false {
            %12 = cir.call @rand() : () -> !s32i extra(#fn_attr) loc(#loc24)
            %13 = cir.cast(integral, %12 : !s32i), !u32i loc(#loc24)
            %14 = cir.const #cir.int<30> : !s32i loc(#loc24)
            %15 = cir.shift(left, %13 : !u32i, %14 : !s32i) -> !u32i loc(#loc24)
            %16 = cir.call @rand() : () -> !s32i extra(#fn_attr) loc(#loc24)
            %17 = cir.cast(integral, %16 : !s32i), !u32i loc(#loc24)
            %18 = cir.const #cir.int<15> : !s32i loc(#loc24)
            %19 = cir.shift(left, %17 : !u32i, %18 : !s32i) -> !u32i loc(#loc24)
            %20 = cir.binop(xor, %15, %19) : !u32i loc(#loc24)
            %21 = cir.call @rand() : () -> !s32i extra(#fn_attr) loc(#loc24)
            %22 = cir.cast(integral, %21 : !s32i), !u32i loc(#loc24)
            %23 = cir.binop(xor, %20, %22) : !u32i loc(#loc24)
            %24 = cir.unary(minus, %23) : !u32i, !u32i loc(#loc24)
            %25 = cir.const #cir.int<1> : !s32i loc(#loc24)
            %26 = cir.cast(integral, %25 : !s32i), !u32i loc(#loc24)
            %27 = cir.binop(sub, %24, %26) : !u32i loc(#loc24)
            cir.yield %27 : !u32i loc(#loc24)
          }) : (!cir.bool) -> !u32i loc(#loc24)
          %11 = cir.cast(integral, %10 : !u32i), !s32i loc(#loc24)
          cir.store %11, %2 : !s32i, !cir.ptr<!s32i> loc(#loc202)
        } loc(#loc201)
        cir.yield loc(#loc17)
      } step {
        %6 = cir.load %0 : !cir.ptr<!s32i>, !s32i loc(#loc26)
        %7 = cir.unary(inc, %6) : !s32i, !s32i loc(#loc27)
        cir.store %7, %0 : !s32i, !cir.ptr<!s32i> loc(#loc203)
        cir.yield loc(#loc198)
      } loc(#loc198)
    } loc(#loc198)
    cir.scope {
      %5 = cir.const #cir.int<0> : !s32i loc(#loc30)
      cir.store %5, %1 : !s32i, !cir.ptr<!s32i> loc(#loc205)
      cir.for : cond {
        %6 = cir.load %1 : !cir.ptr<!s32i>, !s32i loc(#loc32)
        %7 = cir.const #cir.int<1> : !s32i loc(#loc33)
        %8 = cir.cmp(lt, %6, %7) : !s32i, !cir.bool loc(#loc206)
        cir.condition(%8) loc(#loc34)
      } body {
        cir.scope {
          cir.scope {
            %6 = cir.alloca !u64i, !cir.ptr<!u64i>, ["i", init] {alignment = 8 : i64} loc(#loc209)
            %7 = cir.const #cir.int<0> : !s32i loc(#loc39)
            %8 = cir.cast(integral, %7 : !s32i), !u64i loc(#loc39)
            cir.store %8, %6 : !u64i, !cir.ptr<!u64i> loc(#loc209)
            cir.scope {
              %9 = cir.const #cir.int<0> : !s32i loc(#loc42)
              %10 = cir.cast(integral, %9 : !s32i), !u64i loc(#loc42)
              cir.store %10, %6 : !u64i, !cir.ptr<!u64i> loc(#loc211)
              cir.for : cond {
                %11 = cir.load %6 : !cir.ptr<!u64i>, !u64i loc(#loc44)
                %12 = cir.load %2 : !cir.ptr<!s32i>, !s32i loc(#loc45)
                %13 = cir.cast(integral, %12 : !s32i), !u64i loc(#loc45)
                %14 = cir.cmp(lt, %11, %13) : !u64i, !cir.bool loc(#loc212)
                cir.condition(%14) loc(#loc46)
              } body {
                cir.scope {
                  %11 = cir.get_global @".str" : !cir.ptr<!cir.array<!s8i x 6>> loc(#loc5)
                  %12 = cir.cast(array_to_ptrdecay, %11 : !cir.ptr<!cir.array<!s8i x 6>>), !cir.ptr<!s8i> loc(#loc5)
                  cir.call @printLine(%12) : (!cir.ptr<!s8i>) -> () loc(#loc48)
                } loc(#loc213)
                cir.yield loc(#loc41)
              } step {
                %11 = cir.load %6 : !cir.ptr<!u64i>, !u64i loc(#loc49)
                %12 = cir.unary(inc, %11) : !u64i, !u64i loc(#loc50)
                cir.store %12, %6 : !u64i, !cir.ptr<!u64i> loc(#loc214)
                cir.yield loc(#loc210)
              } loc(#loc210)
            } loc(#loc210)
          } loc(#loc208)
        } loc(#loc207)
        cir.yield loc(#loc29)
      } step {
        %6 = cir.load %1 : !cir.ptr<!s32i>, !s32i loc(#loc51)
        %7 = cir.unary(inc, %6) : !s32i, !s32i loc(#loc52)
        cir.store %7, %1 : !s32i, !cir.ptr<!s32i> loc(#loc215)
        cir.yield loc(#loc204)
      } loc(#loc204)
    } loc(#loc204)
    cir.return loc(#loc7)
  } loc(#loc193)
  cir.func no_proto @CWE400_Resource_Exhaustion__rand_for_loop_17_good() extra(#fn_attr1) {
    %0 = cir.get_global @goodB2G : !cir.ptr<!cir.func<!void ()>> loc(#loc217)
    cir.call %0() : (!cir.ptr<!cir.func<!void ()>>) -> () loc(#loc55)
    %1 = cir.get_global @goodG2B : !cir.ptr<!cir.func<!void ()>> loc(#loc218)
    cir.call %1() : (!cir.ptr<!cir.func<!void ()>>) -> () loc(#loc57)
    cir.return loc(#loc54)
  } loc(#loc216)
  cir.func private @srand(!u32i) extra(#fn_attr) loc(#loc219)
  cir.func private @time(!cir.ptr<!s64i>) -> !s64i extra(#fn_attr) loc(#loc220)
  cir.global "private" constant cir_private dsolocal @".str.1" = #cir.const_array<"Calling good()...\00" : !cir.array<!s8i x 18>> : !cir.array<!s8i x 18> {alignment = 1 : i64} loc(#loc63)
  cir.global "private" constant cir_private dsolocal @".str.2" = #cir.const_array<"Finished good()\00" : !cir.array<!s8i x 16>> : !cir.array<!s8i x 16> {alignment = 1 : i64} loc(#loc64)
  cir.global "private" constant cir_private dsolocal @".str.3" = #cir.const_array<"Calling bad()...\00" : !cir.array<!s8i x 17>> : !cir.array<!s8i x 17> {alignment = 1 : i64} loc(#loc65)
  cir.global "private" constant cir_private dsolocal @".str.4" = #cir.const_array<"Finished bad()\00" : !cir.array<!s8i x 15>> : !cir.array<!s8i x 15> {alignment = 1 : i64} loc(#loc66)
  cir.func @main(%arg0: !s32i loc(fused[#loc69, #loc70]), %arg1: !cir.ptr<!cir.ptr<!s8i>> loc(fused[#loc71, #loc72])) -> !s32i extra(#fn_attr1) {
    %0 = cir.alloca !s32i, !cir.ptr<!s32i>, ["argc", init] {alignment = 4 : i64} loc(#loc222)
    %1 = cir.alloca !cir.ptr<!cir.ptr<!s8i>>, !cir.ptr<!cir.ptr<!cir.ptr<!s8i>>>, ["argv", init] {alignment = 8 : i64} loc(#loc223)
    %2 = cir.alloca !s32i, !cir.ptr<!s32i>, ["__retval"] {alignment = 4 : i64} loc(#loc68)
    cir.store %arg0, %0 : !s32i, !cir.ptr<!s32i> loc(#loc73)
    cir.store %arg1, %1 : !cir.ptr<!cir.ptr<!s8i>>, !cir.ptr<!cir.ptr<!cir.ptr<!s8i>>> loc(#loc73)
    %3 = cir.const #cir.ptr<null> : !cir.ptr<!s64i> loc(#loc74)
    %4 = cir.call @time(%3) : (!cir.ptr<!s64i>) -> !s64i extra(#fn_attr) loc(#loc75)
    %5 = cir.cast(integral, %4 : !s64i), !u32i loc(#loc75)
    cir.call @srand(%5) : (!u32i) -> () extra(#fn_attr) loc(#loc76)
    %6 = cir.get_global @".str.1" : !cir.ptr<!cir.array<!s8i x 18>> loc(#loc63)
    %7 = cir.cast(array_to_ptrdecay, %6 : !cir.ptr<!cir.array<!s8i x 18>>), !cir.ptr<!s8i> loc(#loc63)
    cir.call @printLine(%7) : (!cir.ptr<!s8i>) -> () loc(#loc77)
    %8 = cir.get_global @CWE400_Resource_Exhaustion__rand_for_loop_17_good : !cir.ptr<!cir.func<!void ()>> loc(#loc224)
    cir.call @CWE400_Resource_Exhaustion__rand_for_loop_17_good() : () -> () loc(#loc78)
    %9 = cir.get_global @".str.2" : !cir.ptr<!cir.array<!s8i x 16>> loc(#loc64)
    %10 = cir.cast(array_to_ptrdecay, %9 : !cir.ptr<!cir.array<!s8i x 16>>), !cir.ptr<!s8i> loc(#loc64)
    cir.call @printLine(%10) : (!cir.ptr<!s8i>) -> () loc(#loc80)
    %11 = cir.get_global @".str.3" : !cir.ptr<!cir.array<!s8i x 17>> loc(#loc65)
    %12 = cir.cast(array_to_ptrdecay, %11 : !cir.ptr<!cir.array<!s8i x 17>>), !cir.ptr<!s8i> loc(#loc65)
    cir.call @printLine(%12) : (!cir.ptr<!s8i>) -> () loc(#loc81)
    %13 = cir.get_global @CWE400_Resource_Exhaustion__rand_for_loop_17_bad : !cir.ptr<!cir.func<!void ()>> loc(#loc225)
    cir.call @CWE400_Resource_Exhaustion__rand_for_loop_17_bad() : () -> () loc(#loc82)
    %14 = cir.get_global @".str.4" : !cir.ptr<!cir.array<!s8i x 15>> loc(#loc66)
    %15 = cir.cast(array_to_ptrdecay, %14 : !cir.ptr<!cir.array<!s8i x 15>>), !cir.ptr<!s8i> loc(#loc66)
    cir.call @printLine(%15) : (!cir.ptr<!s8i>) -> () loc(#loc84)
    %16 = cir.const #cir.int<0> : !s32i loc(#loc85)
    cir.store %16, %2 : !s32i, !cir.ptr<!s32i> loc(#loc226)
    %17 = cir.load %2 : !cir.ptr<!s32i>, !s32i loc(#loc226)
    cir.return %17 : !s32i loc(#loc226)
  } loc(#loc221)
  cir.func no_proto internal private @goodB2G() extra(#fn_attr1) {
    %0 = cir.alloca !s32i, !cir.ptr<!s32i>, ["i"] {alignment = 4 : i64} loc(#loc228)
    %1 = cir.alloca !s32i, !cir.ptr<!s32i>, ["k"] {alignment = 4 : i64} loc(#loc229)
    %2 = cir.alloca !s32i, !cir.ptr<!s32i>, ["count"] {alignment = 4 : i64} loc(#loc230)
    %3 = cir.const #cir.int<1> : !s32i loc(#loc94)
    %4 = cir.unary(minus, %3) : !s32i, !s32i loc(#loc95)
    cir.store %4, %2 : !s32i, !cir.ptr<!s32i> loc(#loc231)
    cir.scope {
      %5 = cir.const #cir.int<0> : !s32i loc(#loc99)
      cir.store %5, %0 : !s32i, !cir.ptr<!s32i> loc(#loc233)
      cir.for : cond {
        %6 = cir.load %0 : !cir.ptr<!s32i>, !s32i loc(#loc101)
        %7 = cir.const #cir.int<1> : !s32i loc(#loc102)
        %8 = cir.cmp(lt, %6, %7) : !s32i, !cir.bool loc(#loc234)
        cir.condition(%8) loc(#loc103)
      } body {
        cir.scope {
          %6 = cir.call @rand() : () -> !s32i extra(#fn_attr) loc(#loc105)
          %7 = cir.const #cir.int<1> : !s32i loc(#loc105)
          %8 = cir.binop(and, %6, %7) : !s32i loc(#loc105)
          %9 = cir.cast(int_to_bool, %8 : !s32i), !cir.bool loc(#loc105)
          %10 = cir.ternary(%9, true {
            %12 = cir.call @rand() : () -> !s32i extra(#fn_attr) loc(#loc105)
            %13 = cir.cast(integral, %12 : !s32i), !u32i loc(#loc105)
            %14 = cir.const #cir.int<30> : !s32i loc(#loc105)
            %15 = cir.shift(left, %13 : !u32i, %14 : !s32i) -> !u32i loc(#loc105)
            %16 = cir.call @rand() : () -> !s32i extra(#fn_attr) loc(#loc105)
            %17 = cir.cast(integral, %16 : !s32i), !u32i loc(#loc105)
            %18 = cir.const #cir.int<15> : !s32i loc(#loc105)
            %19 = cir.shift(left, %17 : !u32i, %18 : !s32i) -> !u32i loc(#loc105)
            %20 = cir.binop(xor, %15, %19) : !u32i loc(#loc105)
            %21 = cir.call @rand() : () -> !s32i extra(#fn_attr) loc(#loc105)
            %22 = cir.cast(integral, %21 : !s32i), !u32i loc(#loc105)
            %23 = cir.binop(xor, %20, %22) : !u32i loc(#loc105)
            cir.yield %23 : !u32i loc(#loc105)
          }, false {
            %12 = cir.call @rand() : () -> !s32i extra(#fn_attr) loc(#loc105)
            %13 = cir.cast(integral, %12 : !s32i), !u32i loc(#loc105)
            %14 = cir.const #cir.int<30> : !s32i loc(#loc105)
            %15 = cir.shift(left, %13 : !u32i, %14 : !s32i) -> !u32i loc(#loc105)
            %16 = cir.call @rand() : () -> !s32i extra(#fn_attr) loc(#loc105)
            %17 = cir.cast(integral, %16 : !s32i), !u32i loc(#loc105)
            %18 = cir.const #cir.int<15> : !s32i loc(#loc105)
            %19 = cir.shift(left, %17 : !u32i, %18 : !s32i) -> !u32i loc(#loc105)
            %20 = cir.binop(xor, %15, %19) : !u32i loc(#loc105)
            %21 = cir.call @rand() : () -> !s32i extra(#fn_attr) loc(#loc105)
            %22 = cir.cast(integral, %21 : !s32i), !u32i loc(#loc105)
            %23 = cir.binop(xor, %20, %22) : !u32i loc(#loc105)
            %24 = cir.unary(minus, %23) : !u32i, !u32i loc(#loc105)
            %25 = cir.const #cir.int<1> : !s32i loc(#loc105)
            %26 = cir.cast(integral, %25 : !s32i), !u32i loc(#loc105)
            %27 = cir.binop(sub, %24, %26) : !u32i loc(#loc105)
            cir.yield %27 : !u32i loc(#loc105)
          }) : (!cir.bool) -> !u32i loc(#loc105)
          %11 = cir.cast(integral, %10 : !u32i), !s32i loc(#loc105)
          cir.store %11, %2 : !s32i, !cir.ptr<!s32i> loc(#loc236)
        } loc(#loc235)
        cir.yield loc(#loc98)
      } step {
        %6 = cir.load %0 : !cir.ptr<!s32i>, !s32i loc(#loc107)
        %7 = cir.unary(inc, %6) : !s32i, !s32i loc(#loc108)
        cir.store %7, %0 : !s32i, !cir.ptr<!s32i> loc(#loc237)
        cir.yield loc(#loc232)
      } loc(#loc232)
    } loc(#loc232)
    cir.scope {
      %5 = cir.const #cir.int<0> : !s32i loc(#loc111)
      cir.store %5, %1 : !s32i, !cir.ptr<!s32i> loc(#loc239)
      cir.for : cond {
        %6 = cir.load %1 : !cir.ptr<!s32i>, !s32i loc(#loc113)
        %7 = cir.const #cir.int<1> : !s32i loc(#loc114)
        %8 = cir.cmp(lt, %6, %7) : !s32i, !cir.bool loc(#loc240)
        cir.condition(%8) loc(#loc115)
      } body {
        cir.scope {
          cir.scope {
            %6 = cir.alloca !u64i, !cir.ptr<!u64i>, ["i", init] {alignment = 8 : i64} loc(#loc243)
            %7 = cir.const #cir.int<0> : !s32i loc(#loc120)
            %8 = cir.cast(integral, %7 : !s32i), !u64i loc(#loc120)
            cir.store %8, %6 : !u64i, !cir.ptr<!u64i> loc(#loc243)
            cir.scope {
              %9 = cir.load %2 : !cir.ptr<!s32i>, !s32i loc(#loc123)
              %10 = cir.const #cir.int<0> : !s32i loc(#loc124)
              %11 = cir.cmp(gt, %9, %10) : !s32i, !cir.bool loc(#loc245)
              %12 = cir.ternary(%11, true {
                %13 = cir.load %2 : !cir.ptr<!s32i>, !s32i loc(#loc126)
                %14 = cir.const #cir.int<20> : !s32i loc(#loc127)
                %15 = cir.cmp(le, %13, %14) : !s32i, !cir.bool loc(#loc246)
                %16 = cir.ternary(%15, true {
                  %17 = cir.const #true loc(#loc125)
                  cir.yield %17 : !cir.bool loc(#loc125)
                }, false {
                  %17 = cir.const #false loc(#loc125)
                  cir.yield %17 : !cir.bool loc(#loc125)
                }) : (!cir.bool) -> !cir.bool loc(#loc125)
                cir.yield %16 : !cir.bool loc(#loc125)
              }, false {
                %13 = cir.const #false loc(#loc125)
                cir.yield %13 : !cir.bool loc(#loc125)
              }) : (!cir.bool) -> !cir.bool loc(#loc125)
              cir.if %12 {
                cir.scope {
                  %13 = cir.const #cir.int<0> : !s32i loc(#loc131)
                  %14 = cir.cast(integral, %13 : !s32i), !u64i loc(#loc131)
                  cir.store %14, %6 : !u64i, !cir.ptr<!u64i> loc(#loc249)
                  cir.for : cond {
                    %15 = cir.load %6 : !cir.ptr<!u64i>, !u64i loc(#loc133)
                    %16 = cir.load %2 : !cir.ptr<!s32i>, !s32i loc(#loc134)
                    %17 = cir.cast(integral, %16 : !s32i), !u64i loc(#loc134)
                    %18 = cir.cmp(lt, %15, %17) : !u64i, !cir.bool loc(#loc250)
                    cir.condition(%18) loc(#loc135)
                  } body {
                    cir.scope {
                      %15 = cir.get_global @".str" : !cir.ptr<!cir.array<!s8i x 6>> loc(#loc137)
                      %16 = cir.cast(array_to_ptrdecay, %15 : !cir.ptr<!cir.array<!s8i x 6>>), !cir.ptr<!s8i> loc(#loc137)
                      cir.call @printLine(%16) : (!cir.ptr<!s8i>) -> () loc(#loc138)
                    } loc(#loc251)
                    cir.yield loc(#loc130)
                  } step {
                    %15 = cir.load %6 : !cir.ptr<!u64i>, !u64i loc(#loc139)
                    %16 = cir.unary(inc, %15) : !u64i, !u64i loc(#loc140)
                    cir.store %16, %6 : !u64i, !cir.ptr<!u64i> loc(#loc252)
                    cir.yield loc(#loc248)
                  } loc(#loc248)
                } loc(#loc248)
              } loc(#loc247)
            } loc(#loc244)
          } loc(#loc242)
        } loc(#loc241)
        cir.yield loc(#loc110)
      } step {
        %6 = cir.load %1 : !cir.ptr<!s32i>, !s32i loc(#loc141)
        %7 = cir.unary(inc, %6) : !s32i, !s32i loc(#loc142)
        cir.store %7, %1 : !s32i, !cir.ptr<!s32i> loc(#loc253)
        cir.yield loc(#loc238)
      } loc(#loc238)
    } loc(#loc238)
    cir.return loc(#loc88)
  } loc(#loc227)
  cir.func no_proto internal private @goodG2B() extra(#fn_attr1) {
    %0 = cir.alloca !s32i, !cir.ptr<!s32i>, ["h"] {alignment = 4 : i64} loc(#loc255)
    %1 = cir.alloca !s32i, !cir.ptr<!s32i>, ["j"] {alignment = 4 : i64} loc(#loc256)
    %2 = cir.alloca !s32i, !cir.ptr<!s32i>, ["count"] {alignment = 4 : i64} loc(#loc257)
    %3 = cir.const #cir.int<1> : !s32i loc(#loc150)
    %4 = cir.unary(minus, %3) : !s32i, !s32i loc(#loc151)
    cir.store %4, %2 : !s32i, !cir.ptr<!s32i> loc(#loc258)
    cir.scope {
      %5 = cir.const #cir.int<0> : !s32i loc(#loc155)
      cir.store %5, %0 : !s32i, !cir.ptr<!s32i> loc(#loc260)
      cir.for : cond {
        %6 = cir.load %0 : !cir.ptr<!s32i>, !s32i loc(#loc157)
        %7 = cir.const #cir.int<1> : !s32i loc(#loc158)
        %8 = cir.cmp(lt, %6, %7) : !s32i, !cir.bool loc(#loc261)
        cir.condition(%8) loc(#loc159)
      } body {
        cir.scope {
          %6 = cir.const #cir.int<20> : !s32i loc(#loc161)
          cir.store %6, %2 : !s32i, !cir.ptr<!s32i> loc(#loc263)
        } loc(#loc262)
        cir.yield loc(#loc154)
      } step {
        %6 = cir.load %0 : !cir.ptr<!s32i>, !s32i loc(#loc163)
        %7 = cir.unary(inc, %6) : !s32i, !s32i loc(#loc164)
        cir.store %7, %0 : !s32i, !cir.ptr<!s32i> loc(#loc264)
        cir.yield loc(#loc259)
      } loc(#loc259)
    } loc(#loc259)
    cir.scope {
      %5 = cir.const #cir.int<0> : !s32i loc(#loc167)
      cir.store %5, %1 : !s32i, !cir.ptr<!s32i> loc(#loc266)
      cir.for : cond {
        %6 = cir.load %1 : !cir.ptr<!s32i>, !s32i loc(#loc169)
        %7 = cir.const #cir.int<1> : !s32i loc(#loc170)
        %8 = cir.cmp(lt, %6, %7) : !s32i, !cir.bool loc(#loc267)
        cir.condition(%8) loc(#loc171)
      } body {
        cir.scope {
          cir.scope {
            %6 = cir.alloca !u64i, !cir.ptr<!u64i>, ["i", init] {alignment = 8 : i64} loc(#loc270)
            %7 = cir.const #cir.int<0> : !s32i loc(#loc176)
            %8 = cir.cast(integral, %7 : !s32i), !u64i loc(#loc176)
            cir.store %8, %6 : !u64i, !cir.ptr<!u64i> loc(#loc270)
            cir.scope {
              %9 = cir.const #cir.int<0> : !s32i loc(#loc179)
              %10 = cir.cast(integral, %9 : !s32i), !u64i loc(#loc179)
              cir.store %10, %6 : !u64i, !cir.ptr<!u64i> loc(#loc272)
              cir.for : cond {
                %11 = cir.load %6 : !cir.ptr<!u64i>, !u64i loc(#loc181)
                %12 = cir.load %2 : !cir.ptr<!s32i>, !s32i loc(#loc182)
                %13 = cir.cast(integral, %12 : !s32i), !u64i loc(#loc182)
                %14 = cir.cmp(lt, %11, %13) : !u64i, !cir.bool loc(#loc273)
                cir.condition(%14) loc(#loc183)
              } body {
                cir.scope {
                  %11 = cir.get_global @".str" : !cir.ptr<!cir.array<!s8i x 6>> loc(#loc185)
                  %12 = cir.cast(array_to_ptrdecay, %11 : !cir.ptr<!cir.array<!s8i x 6>>), !cir.ptr<!s8i> loc(#loc185)
                  cir.call @printLine(%12) : (!cir.ptr<!s8i>) -> () loc(#loc186)
                } loc(#loc274)
                cir.yield loc(#loc178)
              } step {
                %11 = cir.load %6 : !cir.ptr<!u64i>, !u64i loc(#loc187)
                %12 = cir.unary(inc, %11) : !u64i, !u64i loc(#loc188)
                cir.store %12, %6 : !u64i, !cir.ptr<!u64i> loc(#loc275)
                cir.yield loc(#loc271)
              } loc(#loc271)
            } loc(#loc271)
          } loc(#loc269)
        } loc(#loc268)
        cir.yield loc(#loc166)
      } step {
        %6 = cir.load %1 : !cir.ptr<!s32i>, !s32i loc(#loc189)
        %7 = cir.unary(inc, %6) : !s32i, !s32i loc(#loc190)
        cir.store %7, %1 : !s32i, !cir.ptr<!s32i> loc(#loc276)
        cir.yield loc(#loc265)
      } loc(#loc265)
    } loc(#loc265)
    cir.return loc(#loc144)
  } loc(#loc254)
} loc(#loc)
#loc = loc("/home/ladisgin/git_proj/juliet-c/testcases/CWE400_Resource_Exhaustion/s02/CWE400_Resource_Exhaustion__rand_for_loop_17.c":0:0)
#loc1 = loc("/usr/include/stdlib.h":573:1)
#loc2 = loc("/usr/include/stdlib.h":573:24)
#loc3 = loc("../../../testcasesupport/std_testcase_io.h":14:1)
#loc4 = loc("../../../testcasesupport/std_testcase_io.h":14:33)
#loc5 = loc("CWE400_Resource_Exhaustion__rand_for_loop_17.c":40:27)
#loc6 = loc("CWE400_Resource_Exhaustion__rand_for_loop_17.c":22:1)
#loc7 = loc("CWE400_Resource_Exhaustion__rand_for_loop_17.c":44:1)
#loc8 = loc("CWE400_Resource_Exhaustion__rand_for_loop_17.c":24:5)
#loc9 = loc("CWE400_Resource_Exhaustion__rand_for_loop_17.c":24:9)
#loc10 = loc("CWE400_Resource_Exhaustion__rand_for_loop_17.c":24:11)
#loc11 = loc("CWE400_Resource_Exhaustion__rand_for_loop_17.c":25:5)
#loc12 = loc("CWE400_Resource_Exhaustion__rand_for_loop_17.c":25:9)
#loc13 = loc("CWE400_Resource_Exhaustion__rand_for_loop_17.c":27:14)
#loc14 = loc("CWE400_Resource_Exhaustion__rand_for_loop_17.c":27:13)
#loc15 = loc("CWE400_Resource_Exhaustion__rand_for_loop_17.c":27:5)
#loc16 = loc("CWE400_Resource_Exhaustion__rand_for_loop_17.c":28:5)
#loc17 = loc("CWE400_Resource_Exhaustion__rand_for_loop_17.c":32:5)
#loc18 = loc("CWE400_Resource_Exhaustion__rand_for_loop_17.c":28:13)
#loc19 = loc("CWE400_Resource_Exhaustion__rand_for_loop_17.c":28:9)
#loc20 = loc("CWE400_Resource_Exhaustion__rand_for_loop_17.c":28:16)
#loc21 = loc("CWE400_Resource_Exhaustion__rand_for_loop_17.c":28:20)
#loc22 = loc("CWE400_Resource_Exhaustion__rand_for_loop_17.c":28:18)
#loc23 = loc("CWE400_Resource_Exhaustion__rand_for_loop_17.c":29:5)
#loc24 = loc("CWE400_Resource_Exhaustion__rand_for_loop_17.c":31:17)
#loc25 = loc("CWE400_Resource_Exhaustion__rand_for_loop_17.c":31:9)
#loc26 = loc("CWE400_Resource_Exhaustion__rand_for_loop_17.c":28:24)
#loc27 = loc("CWE400_Resource_Exhaustion__rand_for_loop_17.c":28:23)
#loc28 = loc("CWE400_Resource_Exhaustion__rand_for_loop_17.c":33:5)
#loc29 = loc("CWE400_Resource_Exhaustion__rand_for_loop_17.c":43:5)
#loc30 = loc("CWE400_Resource_Exhaustion__rand_for_loop_17.c":33:13)
#loc31 = loc("CWE400_Resource_Exhaustion__rand_for_loop_17.c":33:9)
#loc32 = loc("CWE400_Resource_Exhaustion__rand_for_loop_17.c":33:16)
#loc33 = loc("CWE400_Resource_Exhaustion__rand_for_loop_17.c":33:20)
#loc34 = loc("CWE400_Resource_Exhaustion__rand_for_loop_17.c":33:18)
#loc35 = loc("CWE400_Resource_Exhaustion__rand_for_loop_17.c":34:5)
#loc36 = loc("CWE400_Resource_Exhaustion__rand_for_loop_17.c":35:9)
#loc37 = loc("CWE400_Resource_Exhaustion__rand_for_loop_17.c":42:9)
#loc38 = loc("CWE400_Resource_Exhaustion__rand_for_loop_17.c":36:13)
#loc39 = loc("CWE400_Resource_Exhaustion__rand_for_loop_17.c":36:24)
#loc40 = loc("CWE400_Resource_Exhaustion__rand_for_loop_17.c":38:13)
#loc41 = loc("CWE400_Resource_Exhaustion__rand_for_loop_17.c":41:13)
#loc42 = loc("CWE400_Resource_Exhaustion__rand_for_loop_17.c":38:22)
#loc43 = loc("CWE400_Resource_Exhaustion__rand_for_loop_17.c":38:18)
#loc44 = loc("CWE400_Resource_Exhaustion__rand_for_loop_17.c":38:25)
#loc45 = loc("CWE400_Resource_Exhaustion__rand_for_loop_17.c":38:37)
#loc46 = loc("CWE400_Resource_Exhaustion__rand_for_loop_17.c":38:27)
#loc47 = loc("CWE400_Resource_Exhaustion__rand_for_loop_17.c":39:13)
#loc48 = loc("CWE400_Resource_Exhaustion__rand_for_loop_17.c":40:17)
#loc49 = loc("CWE400_Resource_Exhaustion__rand_for_loop_17.c":38:45)
#loc50 = loc("CWE400_Resource_Exhaustion__rand_for_loop_17.c":38:44)
#loc51 = loc("CWE400_Resource_Exhaustion__rand_for_loop_17.c":33:24)
#loc52 = loc("CWE400_Resource_Exhaustion__rand_for_loop_17.c":33:23)
#loc53 = loc("CWE400_Resource_Exhaustion__rand_for_loop_17.c":103:1)
#loc54 = loc("CWE400_Resource_Exhaustion__rand_for_loop_17.c":107:1)
#loc55 = loc("CWE400_Resource_Exhaustion__rand_for_loop_17.c":105:5)
#loc56 = loc("CWE400_Resource_Exhaustion__rand_for_loop_17.c":105:13)
#loc57 = loc("CWE400_Resource_Exhaustion__rand_for_loop_17.c":106:5)
#loc58 = loc("CWE400_Resource_Exhaustion__rand_for_loop_17.c":106:13)
#loc59 = loc("/usr/include/stdlib.h":575:1)
#loc60 = loc("/usr/include/stdlib.h":575:41)
#loc61 = loc("/usr/include/time.h":76:1)
#loc62 = loc("/usr/include/time.h":76:38)
#loc63 = loc("CWE400_Resource_Exhaustion__rand_for_loop_17.c":123:15)
#loc64 = loc("CWE400_Resource_Exhaustion__rand_for_loop_17.c":125:15)
#loc65 = loc("CWE400_Resource_Exhaustion__rand_for_loop_17.c":128:15)
#loc66 = loc("CWE400_Resource_Exhaustion__rand_for_loop_17.c":130:15)
#loc67 = loc("CWE400_Resource_Exhaustion__rand_for_loop_17.c":118:1)
#loc68 = loc("CWE400_Resource_Exhaustion__rand_for_loop_17.c":133:1)
#loc73 = loc("CWE400_Resource_Exhaustion__rand_for_loop_17.c":119:1)
#loc74 = loc("CWE400_Resource_Exhaustion__rand_for_loop_17.c":121:27)
#loc75 = loc("CWE400_Resource_Exhaustion__rand_for_loop_17.c":121:22)
#loc76 = loc("CWE400_Resource_Exhaustion__rand_for_loop_17.c":121:5)
#loc77 = loc("CWE400_Resource_Exhaustion__rand_for_loop_17.c":123:5)
#loc78 = loc("CWE400_Resource_Exhaustion__rand_for_loop_17.c":124:5)
#loc79 = loc("CWE400_Resource_Exhaustion__rand_for_loop_17.c":124:55)
#loc80 = loc("CWE400_Resource_Exhaustion__rand_for_loop_17.c":125:5)
#loc81 = loc("CWE400_Resource_Exhaustion__rand_for_loop_17.c":128:5)
#loc82 = loc("CWE400_Resource_Exhaustion__rand_for_loop_17.c":129:5)
#loc83 = loc("CWE400_Resource_Exhaustion__rand_for_loop_17.c":129:54)
#loc84 = loc("CWE400_Resource_Exhaustion__rand_for_loop_17.c":130:5)
#loc85 = loc("CWE400_Resource_Exhaustion__rand_for_loop_17.c":132:12)
#loc86 = loc("CWE400_Resource_Exhaustion__rand_for_loop_17.c":132:5)
#loc87 = loc("CWE400_Resource_Exhaustion__rand_for_loop_17.c":51:1)
#loc88 = loc("CWE400_Resource_Exhaustion__rand_for_loop_17.c":76:1)
#loc89 = loc("CWE400_Resource_Exhaustion__rand_for_loop_17.c":53:5)
#loc90 = loc("CWE400_Resource_Exhaustion__rand_for_loop_17.c":53:9)
#loc91 = loc("CWE400_Resource_Exhaustion__rand_for_loop_17.c":53:11)
#loc92 = loc("CWE400_Resource_Exhaustion__rand_for_loop_17.c":54:5)
#loc93 = loc("CWE400_Resource_Exhaustion__rand_for_loop_17.c":54:9)
#loc94 = loc("CWE400_Resource_Exhaustion__rand_for_loop_17.c":56:14)
#loc95 = loc("CWE400_Resource_Exhaustion__rand_for_loop_17.c":56:13)
#loc96 = loc("CWE400_Resource_Exhaustion__rand_for_loop_17.c":56:5)
#loc97 = loc("CWE400_Resource_Exhaustion__rand_for_loop_17.c":57:5)
#loc98 = loc("CWE400_Resource_Exhaustion__rand_for_loop_17.c":61:5)
#loc99 = loc("CWE400_Resource_Exhaustion__rand_for_loop_17.c":57:13)
#loc100 = loc("CWE400_Resource_Exhaustion__rand_for_loop_17.c":57:9)
#loc101 = loc("CWE400_Resource_Exhaustion__rand_for_loop_17.c":57:16)
#loc102 = loc("CWE400_Resource_Exhaustion__rand_for_loop_17.c":57:20)
#loc103 = loc("CWE400_Resource_Exhaustion__rand_for_loop_17.c":57:18)
#loc104 = loc("CWE400_Resource_Exhaustion__rand_for_loop_17.c":58:5)
#loc105 = loc("CWE400_Resource_Exhaustion__rand_for_loop_17.c":60:17)
#loc106 = loc("CWE400_Resource_Exhaustion__rand_for_loop_17.c":60:9)
#loc107 = loc("CWE400_Resource_Exhaustion__rand_for_loop_17.c":57:24)
#loc108 = loc("CWE400_Resource_Exhaustion__rand_for_loop_17.c":57:23)
#loc109 = loc("CWE400_Resource_Exhaustion__rand_for_loop_17.c":62:5)
#loc110 = loc("CWE400_Resource_Exhaustion__rand_for_loop_17.c":75:5)
#loc111 = loc("CWE400_Resource_Exhaustion__rand_for_loop_17.c":62:13)
#loc112 = loc("CWE400_Resource_Exhaustion__rand_for_loop_17.c":62:9)
#loc113 = loc("CWE400_Resource_Exhaustion__rand_for_loop_17.c":62:16)
#loc114 = loc("CWE400_Resource_Exhaustion__rand_for_loop_17.c":62:20)
#loc115 = loc("CWE400_Resource_Exhaustion__rand_for_loop_17.c":62:18)
#loc116 = loc("CWE400_Resource_Exhaustion__rand_for_loop_17.c":63:5)
#loc117 = loc("CWE400_Resource_Exhaustion__rand_for_loop_17.c":64:9)
#loc118 = loc("CWE400_Resource_Exhaustion__rand_for_loop_17.c":74:9)
#loc119 = loc("CWE400_Resource_Exhaustion__rand_for_loop_17.c":65:13)
#loc120 = loc("CWE400_Resource_Exhaustion__rand_for_loop_17.c":65:24)
#loc121 = loc("CWE400_Resource_Exhaustion__rand_for_loop_17.c":67:13)
#loc122 = loc("CWE400_Resource_Exhaustion__rand_for_loop_17.c":73:13)
#loc123 = loc("CWE400_Resource_Exhaustion__rand_for_loop_17.c":67:17)
#loc124 = loc("CWE400_Resource_Exhaustion__rand_for_loop_17.c":67:25)
#loc125 = loc("CWE400_Resource_Exhaustion__rand_for_loop_17.c":67:27)
#loc126 = loc("CWE400_Resource_Exhaustion__rand_for_loop_17.c":67:30)
#loc127 = loc("CWE400_Resource_Exhaustion__rand_for_loop_17.c":67:39)
#loc128 = loc("CWE400_Resource_Exhaustion__rand_for_loop_17.c":68:13)
#loc129 = loc("CWE400_Resource_Exhaustion__rand_for_loop_17.c":69:17)
#loc130 = loc("CWE400_Resource_Exhaustion__rand_for_loop_17.c":72:17)
#loc131 = loc("CWE400_Resource_Exhaustion__rand_for_loop_17.c":69:26)
#loc132 = loc("CWE400_Resource_Exhaustion__rand_for_loop_17.c":69:22)
#loc133 = loc("CWE400_Resource_Exhaustion__rand_for_loop_17.c":69:29)
#loc134 = loc("CWE400_Resource_Exhaustion__rand_for_loop_17.c":69:41)
#loc135 = loc("CWE400_Resource_Exhaustion__rand_for_loop_17.c":69:31)
#loc136 = loc("CWE400_Resource_Exhaustion__rand_for_loop_17.c":70:17)
#loc137 = loc("CWE400_Resource_Exhaustion__rand_for_loop_17.c":71:31)
#loc138 = loc("CWE400_Resource_Exhaustion__rand_for_loop_17.c":71:21)
#loc139 = loc("CWE400_Resource_Exhaustion__rand_for_loop_17.c":69:49)
#loc140 = loc("CWE400_Resource_Exhaustion__rand_for_loop_17.c":69:48)
#loc141 = loc("CWE400_Resource_Exhaustion__rand_for_loop_17.c":62:24)
#loc142 = loc("CWE400_Resource_Exhaustion__rand_for_loop_17.c":62:23)
#loc143 = loc("CWE400_Resource_Exhaustion__rand_for_loop_17.c":79:1)
#loc144 = loc("CWE400_Resource_Exhaustion__rand_for_loop_17.c":101:1)
#loc145 = loc("CWE400_Resource_Exhaustion__rand_for_loop_17.c":81:5)
#loc146 = loc("CWE400_Resource_Exhaustion__rand_for_loop_17.c":81:9)
#loc147 = loc("CWE400_Resource_Exhaustion__rand_for_loop_17.c":81:11)
#loc148 = loc("CWE400_Resource_Exhaustion__rand_for_loop_17.c":82:5)
#loc149 = loc("CWE400_Resource_Exhaustion__rand_for_loop_17.c":82:9)
#loc150 = loc("CWE400_Resource_Exhaustion__rand_for_loop_17.c":84:14)
#loc151 = loc("CWE400_Resource_Exhaustion__rand_for_loop_17.c":84:13)
#loc152 = loc("CWE400_Resource_Exhaustion__rand_for_loop_17.c":84:5)
#loc153 = loc("CWE400_Resource_Exhaustion__rand_for_loop_17.c":85:5)
#loc154 = loc("CWE400_Resource_Exhaustion__rand_for_loop_17.c":89:5)
#loc155 = loc("CWE400_Resource_Exhaustion__rand_for_loop_17.c":85:13)
#loc156 = loc("CWE400_Resource_Exhaustion__rand_for_loop_17.c":85:9)
#loc157 = loc("CWE400_Resource_Exhaustion__rand_for_loop_17.c":85:16)
#loc158 = loc("CWE400_Resource_Exhaustion__rand_for_loop_17.c":85:20)
#loc159 = loc("CWE400_Resource_Exhaustion__rand_for_loop_17.c":85:18)
#loc160 = loc("CWE400_Resource_Exhaustion__rand_for_loop_17.c":86:5)
#loc161 = loc("CWE400_Resource_Exhaustion__rand_for_loop_17.c":88:17)
#loc162 = loc("CWE400_Resource_Exhaustion__rand_for_loop_17.c":88:9)
#loc163 = loc("CWE400_Resource_Exhaustion__rand_for_loop_17.c":85:24)
#loc164 = loc("CWE400_Resource_Exhaustion__rand_for_loop_17.c":85:23)
#loc165 = loc("CWE400_Resource_Exhaustion__rand_for_loop_17.c":90:5)
#loc166 = loc("CWE400_Resource_Exhaustion__rand_for_loop_17.c":100:5)
#loc167 = loc("CWE400_Resource_Exhaustion__rand_for_loop_17.c":90:13)
#loc168 = loc("CWE400_Resource_Exhaustion__rand_for_loop_17.c":90:9)
#loc169 = loc("CWE400_Resource_Exhaustion__rand_for_loop_17.c":90:16)
#loc170 = loc("CWE400_Resource_Exhaustion__rand_for_loop_17.c":90:20)
#loc171 = loc("CWE400_Resource_Exhaustion__rand_for_loop_17.c":90:18)
#loc172 = loc("CWE400_Resource_Exhaustion__rand_for_loop_17.c":91:5)
#loc173 = loc("CWE400_Resource_Exhaustion__rand_for_loop_17.c":92:9)
#loc174 = loc("CWE400_Resource_Exhaustion__rand_for_loop_17.c":99:9)
#loc175 = loc("CWE400_Resource_Exhaustion__rand_for_loop_17.c":93:13)
#loc176 = loc("CWE400_Resource_Exhaustion__rand_for_loop_17.c":93:24)
#loc177 = loc("CWE400_Resource_Exhaustion__rand_for_loop_17.c":95:13)
#loc178 = loc("CWE400_Resource_Exhaustion__rand_for_loop_17.c":98:13)
#loc179 = loc("CWE400_Resource_Exhaustion__rand_for_loop_17.c":95:22)
#loc180 = loc("CWE400_Resource_Exhaustion__rand_for_loop_17.c":95:18)
#loc181 = loc("CWE400_Resource_Exhaustion__rand_for_loop_17.c":95:25)
#loc182 = loc("CWE400_Resource_Exhaustion__rand_for_loop_17.c":95:37)
#loc183 = loc("CWE400_Resource_Exhaustion__rand_for_loop_17.c":95:27)
#loc184 = loc("CWE400_Resource_Exhaustion__rand_for_loop_17.c":96:13)
#loc185 = loc("CWE400_Resource_Exhaustion__rand_for_loop_17.c":97:27)
#loc186 = loc("CWE400_Resource_Exhaustion__rand_for_loop_17.c":97:17)
#loc187 = loc("CWE400_Resource_Exhaustion__rand_for_loop_17.c":95:45)
#loc188 = loc("CWE400_Resource_Exhaustion__rand_for_loop_17.c":95:44)
#loc189 = loc("CWE400_Resource_Exhaustion__rand_for_loop_17.c":90:24)
#loc190 = loc("CWE400_Resource_Exhaustion__rand_for_loop_17.c":90:23)
#loc191 = loc(fused[#loc1, #loc2])
#loc192 = loc(fused[#loc3, #loc4])
#loc193 = loc(fused[#loc6, #loc7])
#loc194 = loc(fused[#loc8, #loc9])
#loc195 = loc(fused[#loc8, #loc10])
#loc196 = loc(fused[#loc11, #loc12])
#loc197 = loc(fused[#loc15, #loc13])
#loc198 = loc(fused[#loc16, #loc17])
#loc199 = loc(fused[#loc19, #loc18])
#loc200 = loc(fused[#loc20, #loc21])
#loc201 = loc(fused[#loc23, #loc17])
#loc202 = loc(fused[#loc25, #loc24])
#loc203 = loc(fused[#loc27, #loc26])
#loc204 = loc(fused[#loc28, #loc29])
#loc205 = loc(fused[#loc31, #loc30])
#loc206 = loc(fused[#loc32, #loc33])
#loc207 = loc(fused[#loc35, #loc29])
#loc208 = loc(fused[#loc36, #loc37])
#loc209 = loc(fused[#loc38, #loc39])
#loc210 = loc(fused[#loc40, #loc41])
#loc211 = loc(fused[#loc43, #loc42])
#loc212 = loc(fused[#loc44, #loc45])
#loc213 = loc(fused[#loc47, #loc41])
#loc214 = loc(fused[#loc50, #loc49])
#loc215 = loc(fused[#loc52, #loc51])
#loc216 = loc(fused[#loc53, #loc54])
#loc217 = loc(fused[#loc55, #loc56])
#loc218 = loc(fused[#loc57, #loc58])
#loc219 = loc(fused[#loc59, #loc60])
#loc220 = loc(fused[#loc61, #loc62])
#loc221 = loc(fused[#loc67, #loc68])
#loc224 = loc(fused[#loc78, #loc79])
#loc225 = loc(fused[#loc82, #loc83])
#loc226 = loc(fused[#loc86, #loc85])
#loc227 = loc(fused[#loc87, #loc88])
#loc228 = loc(fused[#loc89, #loc90])
#loc229 = loc(fused[#loc89, #loc91])
#loc230 = loc(fused[#loc92, #loc93])
#loc231 = loc(fused[#loc96, #loc94])
#loc232 = loc(fused[#loc97, #loc98])
#loc233 = loc(fused[#loc100, #loc99])
#loc234 = loc(fused[#loc101, #loc102])
#loc235 = loc(fused[#loc104, #loc98])
#loc236 = loc(fused[#loc106, #loc105])
#loc237 = loc(fused[#loc108, #loc107])
#loc238 = loc(fused[#loc109, #loc110])
#loc239 = loc(fused[#loc112, #loc111])
#loc240 = loc(fused[#loc113, #loc114])
#loc241 = loc(fused[#loc116, #loc110])
#loc242 = loc(fused[#loc117, #loc118])
#loc243 = loc(fused[#loc119, #loc120])
#loc244 = loc(fused[#loc121, #loc122])
#loc245 = loc(fused[#loc123, #loc124])
#loc246 = loc(fused[#loc126, #loc127])
#loc247 = loc(fused[#loc128, #loc122])
#loc248 = loc(fused[#loc129, #loc130])
#loc249 = loc(fused[#loc132, #loc131])
#loc250 = loc(fused[#loc133, #loc134])
#loc251 = loc(fused[#loc136, #loc130])
#loc252 = loc(fused[#loc140, #loc139])
#loc253 = loc(fused[#loc142, #loc141])
#loc254 = loc(fused[#loc143, #loc144])
#loc255 = loc(fused[#loc145, #loc146])
#loc256 = loc(fused[#loc145, #loc147])
#loc257 = loc(fused[#loc148, #loc149])
#loc258 = loc(fused[#loc152, #loc150])
#loc259 = loc(fused[#loc153, #loc154])
#loc260 = loc(fused[#loc156, #loc155])
#loc261 = loc(fused[#loc157, #loc158])
#loc262 = loc(fused[#loc160, #loc154])
#loc263 = loc(fused[#loc162, #loc161])
#loc264 = loc(fused[#loc164, #loc163])
#loc265 = loc(fused[#loc165, #loc166])
#loc266 = loc(fused[#loc168, #loc167])
#loc267 = loc(fused[#loc169, #loc170])
#loc268 = loc(fused[#loc172, #loc166])
#loc269 = loc(fused[#loc173, #loc174])
#loc270 = loc(fused[#loc175, #loc176])
#loc271 = loc(fused[#loc177, #loc178])
#loc272 = loc(fused[#loc180, #loc179])
#loc273 = loc(fused[#loc181, #loc182])
#loc274 = loc(fused[#loc184, #loc178])
#loc275 = loc(fused[#loc188, #loc187])
#loc276 = loc(fused[#loc190, #loc189])
