!s32i = !cir.int<s, 32>
!s64i = !cir.int<s, 64>
!s8i = !cir.int<s, 8>
!ty__IO_codecvt = !cir.record<struct "_IO_codecvt" incomplete>
!ty__IO_marker = !cir.record<struct "_IO_marker" incomplete>
!ty__IO_wide_data = !cir.record<struct "_IO_wide_data" incomplete>
!u16i = !cir.int<u, 16>
!u64i = !cir.int<u, 64>
!void = !cir.void
#false = #cir.bool<false> : !cir.bool
#fn_attr = #cir<extra({nothrow = #cir.nothrow})>
#fn_attr1 = #cir<extra({inline = #cir.inline<no>, nothrow = #cir.nothrow, optnone = #cir.optnone, uwtable = #cir.uwtable<async>})>
#true = #cir.bool<true> : !cir.bool
!ty__IO_FILE = !cir.record<struct "_IO_FILE" {!s32i, !cir.ptr<!s8i>, !cir.ptr<!s8i>, !cir.ptr<!s8i>, !cir.ptr<!s8i>, !cir.ptr<!s8i>, !cir.ptr<!s8i>, !cir.ptr<!s8i>, !cir.ptr<!s8i>, !cir.ptr<!s8i>, !cir.ptr<!s8i>, !cir.ptr<!s8i>, !cir.ptr<!ty__IO_marker>, !cir.ptr<!cir.record<struct "_IO_FILE">>, !s32i, !s32i, !s64i, !u16i, !s8i, !cir.array<!s8i x 1>, !cir.ptr<!void>, !s64i, !cir.ptr<!ty__IO_codecvt>, !cir.ptr<!ty__IO_wide_data>, !cir.ptr<!cir.record<struct "_IO_FILE">>, !cir.ptr<!void>, !u64i, !s32i, !cir.array<!s8i x 20>} #cir.record.decl.ast>
module @"/workspaces/juliet-c/testcases/CWE122_Heap_Based_Buffer_Overflow/s06/CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_15.c" attributes {cir.lang = #cir.lang<c>, cir.sob = #cir.signed_overflow_behavior<undefined>, cir.triple = "x86_64-unknown-linux-gnu", cir.type_size_info = #cir.type_size_info<char = 8, int = 32, size_t = 64>, cir.uwtable = #cir.uwtable<async>, dlti.dl_spec = #dlti.dl_spec<!llvm.ptr<270> = dense<32> : vector<4xi64>, i16 = dense<16> : vector<2xi64>, f16 = dense<16> : vector<2xi64>, i32 = dense<32> : vector<2xi64>, !llvm.ptr = dense<64> : vector<4xi64>, i8 = dense<8> : vector<2xi64>, i1 = dense<8> : vector<2xi64>, i128 = dense<128> : vector<2xi64>, i64 = dense<64> : vector<2xi64>, f80 = dense<128> : vector<2xi64>, f128 = dense<128> : vector<2xi64>, f64 = dense<64> : vector<2xi64>, !llvm.ptr<271> = dense<32> : vector<4xi64>, !llvm.ptr<272> = dense<64> : vector<4xi64>, "dlti.mangling_mode" = "e", "dlti.endianness" = "little", "dlti.stack_alignment" = 128 : i64>} {
  cir.func private @fgets(!cir.ptr<!s8i>, !s32i, !cir.ptr<!ty__IO_FILE>) -> !cir.ptr<!s8i> loc(#loc529)
  cir.global "private" external @stdin : !cir.ptr<!ty__IO_FILE> {alignment = 8 : i64} loc(#loc530)
  cir.func private @atoi(!cir.ptr<!s8i>) -> !s32i extra(#fn_attr) loc(#loc531)
  cir.func private @printLine(!cir.ptr<!s8i>) loc(#loc532)
  cir.global "private" constant cir_private dsolocal @".str" = #cir.const_array<"fgets() failed.\00" : !cir.array<!s8i x 16>> : !cir.array<!s8i x 16> {alignment = 1 : i64} loc(#loc9)
  cir.global "private" constant cir_private dsolocal @".str.1" = #cir.const_array<"Benign, fixed string\00" : !cir.array<!s8i x 21>> : !cir.array<!s8i x 21> {alignment = 1 : i64} loc(#loc10)
  cir.func private @malloc(!u64i) -> !cir.ptr<!void> extra(#fn_attr) loc(#loc533)
  cir.func private @exit(!s32i) extra(#fn_attr) loc(#loc534)
  cir.func private @printIntLine(!s32i) loc(#loc535)
  cir.global "private" constant cir_private dsolocal @".str.2" = #cir.const_array<"ERROR: Array index is negative.\00" : !cir.array<!s8i x 32>> : !cir.array<!s8i x 32> {alignment = 1 : i64} loc(#loc17)
  cir.func private @free(!cir.ptr<!void>) extra(#fn_attr) loc(#loc536)
  cir.func no_proto @CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_15_bad() extra(#fn_attr1) {
    %0 = cir.alloca !s32i, !cir.ptr<!s32i>, ["data"] {alignment = 4 : i64} loc(#loc538)
    %1 = cir.const #cir.int<1> : !s32i loc(#loc24)
    %2 = cir.unary(minus, %1) nsw : !s32i, !s32i loc(#loc25)
    cir.store %2, %0 : !s32i, !cir.ptr<!s32i> loc(#loc539)
    cir.scope {
      %3 = cir.const #cir.int<6> : !s32i loc(#loc29)
      cir.switch (%3 : !s32i) {
        cir.case(equal, [#cir.int<6> : !s32i]) {
          cir.scope {
            %4 = cir.alloca !cir.array<!s8i x 14>, !cir.ptr<!cir.array<!s8i x 14>>, ["inputBuffer"] {alignment = 1 : i64} loc(#loc542)
            %5 = cir.const #cir.zero : !cir.array<!s8i x 14> loc(#loc542)
            cir.store %5, %4 : !cir.array<!s8i x 14>, !cir.ptr<!cir.array<!s8i x 14>> loc(#loc542)
            cir.scope {
              %6 = cir.cast(array_to_ptrdecay, %4 : !cir.ptr<!cir.array<!s8i x 14>>), !cir.ptr<!s8i> loc(#loc37)
              %7 = cir.const #cir.int<3> : !s32i loc(#loc38)
              %8 = cir.cast(integral, %7 : !s32i), !u64i loc(#loc38)
              %9 = cir.const #cir.int<4> : !u64i loc(#loc38)
              %10 = cir.binop(mul, %8, %9) : !u64i loc(#loc38)
              %11 = cir.const #cir.int<2> : !s32i loc(#loc38)
              %12 = cir.cast(integral, %11 : !s32i), !u64i loc(#loc38)
              %13 = cir.binop(add, %10, %12) : !u64i loc(#loc38)
              %14 = cir.cast(integral, %13 : !u64i), !s32i loc(#loc38)
              %15 = cir.get_global @stdin : !cir.ptr<!cir.ptr<!ty__IO_FILE>> loc(#loc530)
              %16 = cir.load %15 : !cir.ptr<!cir.ptr<!ty__IO_FILE>>, !cir.ptr<!ty__IO_FILE> loc(#loc39)
              %17 = cir.call @fgets(%6, %14, %16) : (!cir.ptr<!s8i>, !s32i, !cir.ptr<!ty__IO_FILE>) -> !cir.ptr<!s8i> loc(#loc40)
              %18 = cir.const #cir.ptr<null> : !cir.ptr<!void> loc(#loc41)
              %19 = cir.cast(bitcast, %18 : !cir.ptr<!void>), !cir.ptr<!s8i> loc(#loc41)
              %20 = cir.cmp(ne, %17, %19) : !cir.ptr<!s8i>, !cir.bool loc(#loc544)
              cir.if %20 {
                %21 = cir.cast(array_to_ptrdecay, %4 : !cir.ptr<!cir.array<!s8i x 14>>), !cir.ptr<!s8i> loc(#loc45)
                %22 = cir.call @atoi(%21) : (!cir.ptr<!s8i>) -> !s32i side_effect(pure) extra(#fn_attr) loc(#loc46)
                cir.store %22, %0 : !s32i, !cir.ptr<!s32i> loc(#loc546)
              } else {
                %21 = cir.get_global @".str" : !cir.ptr<!cir.array<!s8i x 16>> loc(#loc9)
                %22 = cir.cast(array_to_ptrdecay, %21 : !cir.ptr<!cir.array<!s8i x 16>>), !cir.ptr<!s8i> loc(#loc9)
                cir.call @printLine(%22) : (!cir.ptr<!s8i>) -> () loc(#loc49)
              } loc(#loc545)
            } loc(#loc543)
          } loc(#loc541)
          cir.break loc(#loc50)
        } loc(#loc30)
        cir.case(default, []) {
          %4 = cir.get_global @".str.1" : !cir.ptr<!cir.array<!s8i x 21>> loc(#loc10)
          %5 = cir.cast(array_to_ptrdecay, %4 : !cir.ptr<!cir.array<!s8i x 21>>), !cir.ptr<!s8i> loc(#loc10)
          cir.call @printLine(%5) : (!cir.ptr<!s8i>) -> () loc(#loc52)
          cir.break loc(#loc53)
        } loc(#loc51)
        cir.yield loc(#loc27)
      } loc(#loc27)
    } loc(#loc540)
    cir.scope {
      %3 = cir.const #cir.int<7> : !s32i loc(#loc56)
      cir.switch (%3 : !s32i) {
        cir.case(equal, [#cir.int<7> : !s32i]) {
          cir.scope {
            %4 = cir.alloca !s32i, !cir.ptr<!s32i>, ["i"] {alignment = 4 : i64} loc(#loc549)
            %5 = cir.alloca !cir.ptr<!s32i>, !cir.ptr<!cir.ptr<!s32i>>, ["buffer", init] {alignment = 8 : i64} loc(#loc550)
            %6 = cir.get_global @malloc : !cir.ptr<!cir.func<(!u64i) -> !cir.ptr<!void>>> loc(#loc64)
            %7 = cir.const #cir.int<10> : !s32i loc(#loc65)
            %8 = cir.cast(integral, %7 : !s32i), !u64i loc(#loc65)
            %9 = cir.const #cir.int<4> : !u64i loc(#loc551)
            %10 = cir.binop(mul, %8, %9) : !u64i loc(#loc552)
            %11 = cir.call @malloc(%10) : (!u64i) -> !cir.ptr<!void> extra(#fn_attr) loc(#loc64)
            %12 = cir.cast(bitcast, %11 : !cir.ptr<!void>), !cir.ptr<!s32i> loc(#loc553)
            cir.store %12, %5 : !cir.ptr<!s32i>, !cir.ptr<!cir.ptr<!s32i>> loc(#loc550)
            cir.scope {
              %16 = cir.load %5 : !cir.ptr<!cir.ptr<!s32i>>, !cir.ptr<!s32i> loc(#loc70)
              %17 = cir.const #cir.ptr<null> : !cir.ptr<!void> loc(#loc71)
              %18 = cir.cast(bitcast, %17 : !cir.ptr<!void>), !cir.ptr<!s32i> loc(#loc71)
              %19 = cir.cmp(eq, %16, %18) : !cir.ptr<!s32i>, !cir.bool loc(#loc555)
              cir.if %19 {
                %20 = cir.get_global @exit : !cir.ptr<!cir.func<(!s32i)>> loc(#loc73)
                %21 = cir.const #cir.int<1> : !s32i loc(#loc74)
                %22 = cir.unary(minus, %21) nsw : !s32i, !s32i loc(#loc75)
                cir.call @exit(%22) : (!s32i) -> () extra(#fn_attr) loc(#loc73)
              } loc(#loc556)
            } loc(#loc554)
            cir.scope {
              %16 = cir.const #cir.int<0> : !s32i loc(#loc78)
              cir.store %16, %4 : !s32i, !cir.ptr<!s32i> loc(#loc558)
              cir.for : cond {
                %17 = cir.load %4 : !cir.ptr<!s32i>, !s32i loc(#loc80)
                %18 = cir.const #cir.int<10> : !s32i loc(#loc81)
                %19 = cir.cmp(lt, %17, %18) : !s32i, !cir.bool loc(#loc559)
                cir.condition(%19) loc(#loc82)
              } body {
                cir.scope {
                  %17 = cir.const #cir.int<0> : !s32i loc(#loc84)
                  %18 = cir.load %5 : !cir.ptr<!cir.ptr<!s32i>>, !cir.ptr<!s32i> loc(#loc85)
                  %19 = cir.load %4 : !cir.ptr<!s32i>, !s32i loc(#loc86)
                  %20 = cir.ptr_stride(%18 : !cir.ptr<!s32i>, %19 : !s32i), !cir.ptr<!s32i> loc(#loc87)
                  cir.store %17, %20 : !s32i, !cir.ptr<!s32i> loc(#loc561)
                } loc(#loc560)
                cir.yield loc(#loc77)
              } step {
                %17 = cir.load %4 : !cir.ptr<!s32i>, !s32i loc(#loc88)
                %18 = cir.unary(inc, %17) nsw : !s32i, !s32i loc(#loc89)
                cir.store %18, %4 : !s32i, !cir.ptr<!s32i> loc(#loc562)
                cir.yield loc(#loc557)
              } loc(#loc557)
            } loc(#loc557)
            cir.scope {
              %16 = cir.load %0 : !cir.ptr<!s32i>, !s32i loc(#loc92)
              %17 = cir.const #cir.int<0> : !s32i loc(#loc93)
              %18 = cir.cmp(ge, %16, %17) : !s32i, !cir.bool loc(#loc564)
              cir.if %18 {
                %19 = cir.const #cir.int<1> : !s32i loc(#loc97)
                %20 = cir.load %5 : !cir.ptr<!cir.ptr<!s32i>>, !cir.ptr<!s32i> loc(#loc98)
                %21 = cir.load %0 : !cir.ptr<!s32i>, !s32i loc(#loc99)
                %22 = cir.ptr_stride(%20 : !cir.ptr<!s32i>, %21 : !s32i), !cir.ptr<!s32i> loc(#loc100)
                cir.store %19, %22 : !s32i, !cir.ptr<!s32i> loc(#loc566)
                cir.scope {
                  %23 = cir.const #cir.int<0> : !s32i loc(#loc103)
                  cir.store %23, %4 : !s32i, !cir.ptr<!s32i> loc(#loc568)
                  cir.for : cond {
                    %24 = cir.load %4 : !cir.ptr<!s32i>, !s32i loc(#loc105)
                    %25 = cir.const #cir.int<10> : !s32i loc(#loc106)
                    %26 = cir.cmp(lt, %24, %25) : !s32i, !cir.bool loc(#loc569)
                    cir.condition(%26) loc(#loc107)
                  } body {
                    cir.scope {
                      %24 = cir.load %5 : !cir.ptr<!cir.ptr<!s32i>>, !cir.ptr<!s32i> loc(#loc109)
                      %25 = cir.load %4 : !cir.ptr<!s32i>, !s32i loc(#loc110)
                      %26 = cir.ptr_stride(%24 : !cir.ptr<!s32i>, %25 : !s32i), !cir.ptr<!s32i> loc(#loc111)
                      %27 = cir.load %26 : !cir.ptr<!s32i>, !s32i loc(#loc109)
                      cir.call @printIntLine(%27) : (!s32i) -> () loc(#loc112)
                    } loc(#loc570)
                    cir.yield loc(#loc102)
                  } step {
                    %24 = cir.load %4 : !cir.ptr<!s32i>, !s32i loc(#loc113)
                    %25 = cir.unary(inc, %24) nsw : !s32i, !s32i loc(#loc114)
                    cir.store %25, %4 : !s32i, !cir.ptr<!s32i> loc(#loc571)
                    cir.yield loc(#loc567)
                  } loc(#loc567)
                } loc(#loc567)
              } else {
                %19 = cir.get_global @".str.2" : !cir.ptr<!cir.array<!s8i x 32>> loc(#loc17)
                %20 = cir.cast(array_to_ptrdecay, %19 : !cir.ptr<!cir.array<!s8i x 32>>), !cir.ptr<!s8i> loc(#loc17)
                cir.call @printLine(%20) : (!cir.ptr<!s8i>) -> () loc(#loc115)
              } loc(#loc565)
            } loc(#loc563)
            %13 = cir.get_global @free : !cir.ptr<!cir.func<(!cir.ptr<!void>)>> loc(#loc116)
            %14 = cir.load %5 : !cir.ptr<!cir.ptr<!s32i>>, !cir.ptr<!s32i> loc(#loc117)
            %15 = cir.cast(bitcast, %14 : !cir.ptr<!s32i>), !cir.ptr<!void> loc(#loc117)
            cir.call @free(%15) : (!cir.ptr<!void>) -> () extra(#fn_attr) loc(#loc116)
          } loc(#loc548)
          cir.break loc(#loc118)
        } loc(#loc57)
        cir.case(default, []) {
          %4 = cir.get_global @".str.1" : !cir.ptr<!cir.array<!s8i x 21>> loc(#loc120)
          %5 = cir.cast(array_to_ptrdecay, %4 : !cir.ptr<!cir.array<!s8i x 21>>), !cir.ptr<!s8i> loc(#loc120)
          cir.call @printLine(%5) : (!cir.ptr<!s8i>) -> () loc(#loc121)
          cir.break loc(#loc122)
        } loc(#loc119)
        cir.yield loc(#loc54)
      } loc(#loc54)
    } loc(#loc547)
    cir.return loc(#loc21)
  } loc(#loc537)
  cir.func no_proto @CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_15_good() extra(#fn_attr1) {
    %0 = cir.get_global @goodB2G1 : !cir.ptr<!cir.func<()>> loc(#loc573)
    cir.call %0() : (!cir.ptr<!cir.func<()>>) -> () loc(#loc125)
    %1 = cir.get_global @goodB2G2 : !cir.ptr<!cir.func<()>> loc(#loc574)
    cir.call %1() : (!cir.ptr<!cir.func<()>>) -> () loc(#loc127)
    %2 = cir.get_global @goodG2B1 : !cir.ptr<!cir.func<()>> loc(#loc575)
    cir.call %2() : (!cir.ptr<!cir.func<()>>) -> () loc(#loc129)
    %3 = cir.get_global @goodG2B2 : !cir.ptr<!cir.func<()>> loc(#loc576)
    cir.call %3() : (!cir.ptr<!cir.func<()>>) -> () loc(#loc131)
    cir.return loc(#loc124)
  } loc(#loc572)
  cir.global "private" constant cir_private dsolocal @".str.3" = #cir.const_array<"ERROR: Array index is out-of-bounds\00" : !cir.array<!s8i x 36>> : !cir.array<!s8i x 36> {alignment = 1 : i64} loc(#loc133)
  cir.func no_proto internal private @goodB2G1() extra(#fn_attr1) {
    %0 = cir.alloca !s32i, !cir.ptr<!s32i>, ["data"] {alignment = 4 : i64} loc(#loc578)
    %1 = cir.const #cir.int<1> : !s32i loc(#loc138)
    %2 = cir.unary(minus, %1) nsw : !s32i, !s32i loc(#loc139)
    cir.store %2, %0 : !s32i, !cir.ptr<!s32i> loc(#loc579)
    cir.scope {
      %3 = cir.const #cir.int<6> : !s32i loc(#loc143)
      cir.switch (%3 : !s32i) {
        cir.case(equal, [#cir.int<6> : !s32i]) {
          cir.scope {
            %4 = cir.alloca !cir.array<!s8i x 14>, !cir.ptr<!cir.array<!s8i x 14>>, ["inputBuffer"] {alignment = 1 : i64} loc(#loc582)
            %5 = cir.const #cir.zero : !cir.array<!s8i x 14> loc(#loc582)
            cir.store %5, %4 : !cir.array<!s8i x 14>, !cir.ptr<!cir.array<!s8i x 14>> loc(#loc582)
            cir.scope {
              %6 = cir.cast(array_to_ptrdecay, %4 : !cir.ptr<!cir.array<!s8i x 14>>), !cir.ptr<!s8i> loc(#loc151)
              %7 = cir.const #cir.int<3> : !s32i loc(#loc152)
              %8 = cir.cast(integral, %7 : !s32i), !u64i loc(#loc152)
              %9 = cir.const #cir.int<4> : !u64i loc(#loc152)
              %10 = cir.binop(mul, %8, %9) : !u64i loc(#loc152)
              %11 = cir.const #cir.int<2> : !s32i loc(#loc152)
              %12 = cir.cast(integral, %11 : !s32i), !u64i loc(#loc152)
              %13 = cir.binop(add, %10, %12) : !u64i loc(#loc152)
              %14 = cir.cast(integral, %13 : !u64i), !s32i loc(#loc152)
              %15 = cir.get_global @stdin : !cir.ptr<!cir.ptr<!ty__IO_FILE>> loc(#loc530)
              %16 = cir.load %15 : !cir.ptr<!cir.ptr<!ty__IO_FILE>>, !cir.ptr<!ty__IO_FILE> loc(#loc153)
              %17 = cir.call @fgets(%6, %14, %16) : (!cir.ptr<!s8i>, !s32i, !cir.ptr<!ty__IO_FILE>) -> !cir.ptr<!s8i> loc(#loc154)
              %18 = cir.const #cir.ptr<null> : !cir.ptr<!void> loc(#loc155)
              %19 = cir.cast(bitcast, %18 : !cir.ptr<!void>), !cir.ptr<!s8i> loc(#loc155)
              %20 = cir.cmp(ne, %17, %19) : !cir.ptr<!s8i>, !cir.bool loc(#loc584)
              cir.if %20 {
                %21 = cir.cast(array_to_ptrdecay, %4 : !cir.ptr<!cir.array<!s8i x 14>>), !cir.ptr<!s8i> loc(#loc159)
                %22 = cir.call @atoi(%21) : (!cir.ptr<!s8i>) -> !s32i side_effect(pure) extra(#fn_attr) loc(#loc160)
                cir.store %22, %0 : !s32i, !cir.ptr<!s32i> loc(#loc586)
              } else {
                %21 = cir.get_global @".str" : !cir.ptr<!cir.array<!s8i x 16>> loc(#loc163)
                %22 = cir.cast(array_to_ptrdecay, %21 : !cir.ptr<!cir.array<!s8i x 16>>), !cir.ptr<!s8i> loc(#loc163)
                cir.call @printLine(%22) : (!cir.ptr<!s8i>) -> () loc(#loc164)
              } loc(#loc585)
            } loc(#loc583)
          } loc(#loc581)
          cir.break loc(#loc165)
        } loc(#loc144)
        cir.case(default, []) {
          %4 = cir.get_global @".str.1" : !cir.ptr<!cir.array<!s8i x 21>> loc(#loc167)
          %5 = cir.cast(array_to_ptrdecay, %4 : !cir.ptr<!cir.array<!s8i x 21>>), !cir.ptr<!s8i> loc(#loc167)
          cir.call @printLine(%5) : (!cir.ptr<!s8i>) -> () loc(#loc168)
          cir.break loc(#loc169)
        } loc(#loc166)
        cir.yield loc(#loc141)
      } loc(#loc141)
    } loc(#loc580)
    cir.scope {
      %3 = cir.const #cir.int<8> : !s32i loc(#loc172)
      cir.switch (%3 : !s32i) {
        cir.case(equal, [#cir.int<7> : !s32i]) {
          %4 = cir.get_global @".str.1" : !cir.ptr<!cir.array<!s8i x 21>> loc(#loc174)
          %5 = cir.cast(array_to_ptrdecay, %4 : !cir.ptr<!cir.array<!s8i x 21>>), !cir.ptr<!s8i> loc(#loc174)
          cir.call @printLine(%5) : (!cir.ptr<!s8i>) -> () loc(#loc175)
          cir.break loc(#loc176)
        } loc(#loc173)
        cir.case(default, []) {
          cir.scope {
            %4 = cir.alloca !s32i, !cir.ptr<!s32i>, ["i"] {alignment = 4 : i64} loc(#loc589)
            %5 = cir.alloca !cir.ptr<!s32i>, !cir.ptr<!cir.ptr<!s32i>>, ["buffer", init] {alignment = 8 : i64} loc(#loc590)
            %6 = cir.get_global @malloc : !cir.ptr<!cir.func<(!u64i) -> !cir.ptr<!void>>> loc(#loc184)
            %7 = cir.const #cir.int<10> : !s32i loc(#loc185)
            %8 = cir.cast(integral, %7 : !s32i), !u64i loc(#loc185)
            %9 = cir.const #cir.int<4> : !u64i loc(#loc591)
            %10 = cir.binop(mul, %8, %9) : !u64i loc(#loc592)
            %11 = cir.call @malloc(%10) : (!u64i) -> !cir.ptr<!void> extra(#fn_attr) loc(#loc184)
            %12 = cir.cast(bitcast, %11 : !cir.ptr<!void>), !cir.ptr<!s32i> loc(#loc593)
            cir.store %12, %5 : !cir.ptr<!s32i>, !cir.ptr<!cir.ptr<!s32i>> loc(#loc590)
            cir.scope {
              %16 = cir.load %5 : !cir.ptr<!cir.ptr<!s32i>>, !cir.ptr<!s32i> loc(#loc190)
              %17 = cir.const #cir.ptr<null> : !cir.ptr<!void> loc(#loc191)
              %18 = cir.cast(bitcast, %17 : !cir.ptr<!void>), !cir.ptr<!s32i> loc(#loc191)
              %19 = cir.cmp(eq, %16, %18) : !cir.ptr<!s32i>, !cir.bool loc(#loc595)
              cir.if %19 {
                %20 = cir.get_global @exit : !cir.ptr<!cir.func<(!s32i)>> loc(#loc193)
                %21 = cir.const #cir.int<1> : !s32i loc(#loc194)
                %22 = cir.unary(minus, %21) nsw : !s32i, !s32i loc(#loc195)
                cir.call @exit(%22) : (!s32i) -> () extra(#fn_attr) loc(#loc193)
              } loc(#loc596)
            } loc(#loc594)
            cir.scope {
              %16 = cir.const #cir.int<0> : !s32i loc(#loc198)
              cir.store %16, %4 : !s32i, !cir.ptr<!s32i> loc(#loc598)
              cir.for : cond {
                %17 = cir.load %4 : !cir.ptr<!s32i>, !s32i loc(#loc200)
                %18 = cir.const #cir.int<10> : !s32i loc(#loc201)
                %19 = cir.cmp(lt, %17, %18) : !s32i, !cir.bool loc(#loc599)
                cir.condition(%19) loc(#loc202)
              } body {
                cir.scope {
                  %17 = cir.const #cir.int<0> : !s32i loc(#loc204)
                  %18 = cir.load %5 : !cir.ptr<!cir.ptr<!s32i>>, !cir.ptr<!s32i> loc(#loc205)
                  %19 = cir.load %4 : !cir.ptr<!s32i>, !s32i loc(#loc206)
                  %20 = cir.ptr_stride(%18 : !cir.ptr<!s32i>, %19 : !s32i), !cir.ptr<!s32i> loc(#loc207)
                  cir.store %17, %20 : !s32i, !cir.ptr<!s32i> loc(#loc601)
                } loc(#loc600)
                cir.yield loc(#loc197)
              } step {
                %17 = cir.load %4 : !cir.ptr<!s32i>, !s32i loc(#loc208)
                %18 = cir.unary(inc, %17) nsw : !s32i, !s32i loc(#loc209)
                cir.store %18, %4 : !s32i, !cir.ptr<!s32i> loc(#loc602)
                cir.yield loc(#loc597)
              } loc(#loc597)
            } loc(#loc597)
            cir.scope {
              %16 = cir.load %0 : !cir.ptr<!s32i>, !s32i loc(#loc212)
              %17 = cir.const #cir.int<0> : !s32i loc(#loc213)
              %18 = cir.cmp(ge, %16, %17) : !s32i, !cir.bool loc(#loc604)
              %19 = cir.ternary(%18, true {
                %20 = cir.load %0 : !cir.ptr<!s32i>, !s32i loc(#loc215)
                %21 = cir.const #cir.int<10> : !s32i loc(#loc216)
                %22 = cir.cmp(lt, %20, %21) : !s32i, !cir.bool loc(#loc605)
                %23 = cir.ternary(%22, true {
                  %24 = cir.const #true loc(#loc214)
                  cir.yield %24 : !cir.bool loc(#loc214)
                }, false {
                  %24 = cir.const #false loc(#loc214)
                  cir.yield %24 : !cir.bool loc(#loc214)
                }) : (!cir.bool) -> !cir.bool loc(#loc214)
                cir.yield %23 : !cir.bool loc(#loc214)
              }, false {
                %20 = cir.const #false loc(#loc214)
                cir.yield %20 : !cir.bool loc(#loc214)
              }) : (!cir.bool) -> !cir.bool loc(#loc214)
              cir.if %19 {
                %20 = cir.const #cir.int<1> : !s32i loc(#loc221)
                %21 = cir.load %5 : !cir.ptr<!cir.ptr<!s32i>>, !cir.ptr<!s32i> loc(#loc222)
                %22 = cir.load %0 : !cir.ptr<!s32i>, !s32i loc(#loc223)
                %23 = cir.ptr_stride(%21 : !cir.ptr<!s32i>, %22 : !s32i), !cir.ptr<!s32i> loc(#loc224)
                cir.store %20, %23 : !s32i, !cir.ptr<!s32i> loc(#loc607)
                cir.scope {
                  %24 = cir.const #cir.int<0> : !s32i loc(#loc227)
                  cir.store %24, %4 : !s32i, !cir.ptr<!s32i> loc(#loc609)
                  cir.for : cond {
                    %25 = cir.load %4 : !cir.ptr<!s32i>, !s32i loc(#loc229)
                    %26 = cir.const #cir.int<10> : !s32i loc(#loc230)
                    %27 = cir.cmp(lt, %25, %26) : !s32i, !cir.bool loc(#loc610)
                    cir.condition(%27) loc(#loc231)
                  } body {
                    cir.scope {
                      %25 = cir.load %5 : !cir.ptr<!cir.ptr<!s32i>>, !cir.ptr<!s32i> loc(#loc233)
                      %26 = cir.load %4 : !cir.ptr<!s32i>, !s32i loc(#loc234)
                      %27 = cir.ptr_stride(%25 : !cir.ptr<!s32i>, %26 : !s32i), !cir.ptr<!s32i> loc(#loc235)
                      %28 = cir.load %27 : !cir.ptr<!s32i>, !s32i loc(#loc233)
                      cir.call @printIntLine(%28) : (!s32i) -> () loc(#loc236)
                    } loc(#loc611)
                    cir.yield loc(#loc226)
                  } step {
                    %25 = cir.load %4 : !cir.ptr<!s32i>, !s32i loc(#loc237)
                    %26 = cir.unary(inc, %25) nsw : !s32i, !s32i loc(#loc238)
                    cir.store %26, %4 : !s32i, !cir.ptr<!s32i> loc(#loc612)
                    cir.yield loc(#loc608)
                  } loc(#loc608)
                } loc(#loc608)
              } else {
                %20 = cir.get_global @".str.3" : !cir.ptr<!cir.array<!s8i x 36>> loc(#loc133)
                %21 = cir.cast(array_to_ptrdecay, %20 : !cir.ptr<!cir.array<!s8i x 36>>), !cir.ptr<!s8i> loc(#loc133)
                cir.call @printLine(%21) : (!cir.ptr<!s8i>) -> () loc(#loc239)
              } loc(#loc606)
            } loc(#loc603)
            %13 = cir.get_global @free : !cir.ptr<!cir.func<(!cir.ptr<!void>)>> loc(#loc240)
            %14 = cir.load %5 : !cir.ptr<!cir.ptr<!s32i>>, !cir.ptr<!s32i> loc(#loc241)
            %15 = cir.cast(bitcast, %14 : !cir.ptr<!s32i>), !cir.ptr<!void> loc(#loc241)
            cir.call @free(%15) : (!cir.ptr<!void>) -> () extra(#fn_attr) loc(#loc240)
          } loc(#loc588)
          cir.break loc(#loc242)
        } loc(#loc177)
        cir.yield loc(#loc170)
      } loc(#loc170)
    } loc(#loc587)
    cir.return loc(#loc135)
  } loc(#loc577)
  cir.func no_proto internal private @goodB2G2() extra(#fn_attr1) {
    %0 = cir.alloca !s32i, !cir.ptr<!s32i>, ["data"] {alignment = 4 : i64} loc(#loc614)
    %1 = cir.const #cir.int<1> : !s32i loc(#loc247)
    %2 = cir.unary(minus, %1) nsw : !s32i, !s32i loc(#loc248)
    cir.store %2, %0 : !s32i, !cir.ptr<!s32i> loc(#loc615)
    cir.scope {
      %3 = cir.const #cir.int<6> : !s32i loc(#loc252)
      cir.switch (%3 : !s32i) {
        cir.case(equal, [#cir.int<6> : !s32i]) {
          cir.scope {
            %4 = cir.alloca !cir.array<!s8i x 14>, !cir.ptr<!cir.array<!s8i x 14>>, ["inputBuffer"] {alignment = 1 : i64} loc(#loc618)
            %5 = cir.const #cir.zero : !cir.array<!s8i x 14> loc(#loc618)
            cir.store %5, %4 : !cir.array<!s8i x 14>, !cir.ptr<!cir.array<!s8i x 14>> loc(#loc618)
            cir.scope {
              %6 = cir.cast(array_to_ptrdecay, %4 : !cir.ptr<!cir.array<!s8i x 14>>), !cir.ptr<!s8i> loc(#loc260)
              %7 = cir.const #cir.int<3> : !s32i loc(#loc261)
              %8 = cir.cast(integral, %7 : !s32i), !u64i loc(#loc261)
              %9 = cir.const #cir.int<4> : !u64i loc(#loc261)
              %10 = cir.binop(mul, %8, %9) : !u64i loc(#loc261)
              %11 = cir.const #cir.int<2> : !s32i loc(#loc261)
              %12 = cir.cast(integral, %11 : !s32i), !u64i loc(#loc261)
              %13 = cir.binop(add, %10, %12) : !u64i loc(#loc261)
              %14 = cir.cast(integral, %13 : !u64i), !s32i loc(#loc261)
              %15 = cir.get_global @stdin : !cir.ptr<!cir.ptr<!ty__IO_FILE>> loc(#loc530)
              %16 = cir.load %15 : !cir.ptr<!cir.ptr<!ty__IO_FILE>>, !cir.ptr<!ty__IO_FILE> loc(#loc262)
              %17 = cir.call @fgets(%6, %14, %16) : (!cir.ptr<!s8i>, !s32i, !cir.ptr<!ty__IO_FILE>) -> !cir.ptr<!s8i> loc(#loc263)
              %18 = cir.const #cir.ptr<null> : !cir.ptr<!void> loc(#loc264)
              %19 = cir.cast(bitcast, %18 : !cir.ptr<!void>), !cir.ptr<!s8i> loc(#loc264)
              %20 = cir.cmp(ne, %17, %19) : !cir.ptr<!s8i>, !cir.bool loc(#loc620)
              cir.if %20 {
                %21 = cir.cast(array_to_ptrdecay, %4 : !cir.ptr<!cir.array<!s8i x 14>>), !cir.ptr<!s8i> loc(#loc268)
                %22 = cir.call @atoi(%21) : (!cir.ptr<!s8i>) -> !s32i side_effect(pure) extra(#fn_attr) loc(#loc269)
                cir.store %22, %0 : !s32i, !cir.ptr<!s32i> loc(#loc622)
              } else {
                %21 = cir.get_global @".str" : !cir.ptr<!cir.array<!s8i x 16>> loc(#loc272)
                %22 = cir.cast(array_to_ptrdecay, %21 : !cir.ptr<!cir.array<!s8i x 16>>), !cir.ptr<!s8i> loc(#loc272)
                cir.call @printLine(%22) : (!cir.ptr<!s8i>) -> () loc(#loc273)
              } loc(#loc621)
            } loc(#loc619)
          } loc(#loc617)
          cir.break loc(#loc274)
        } loc(#loc253)
        cir.case(default, []) {
          %4 = cir.get_global @".str.1" : !cir.ptr<!cir.array<!s8i x 21>> loc(#loc276)
          %5 = cir.cast(array_to_ptrdecay, %4 : !cir.ptr<!cir.array<!s8i x 21>>), !cir.ptr<!s8i> loc(#loc276)
          cir.call @printLine(%5) : (!cir.ptr<!s8i>) -> () loc(#loc277)
          cir.break loc(#loc278)
        } loc(#loc275)
        cir.yield loc(#loc250)
      } loc(#loc250)
    } loc(#loc616)
    cir.scope {
      %3 = cir.const #cir.int<7> : !s32i loc(#loc281)
      cir.switch (%3 : !s32i) {
        cir.case(equal, [#cir.int<7> : !s32i]) {
          cir.scope {
            %4 = cir.alloca !s32i, !cir.ptr<!s32i>, ["i"] {alignment = 4 : i64} loc(#loc625)
            %5 = cir.alloca !cir.ptr<!s32i>, !cir.ptr<!cir.ptr<!s32i>>, ["buffer", init] {alignment = 8 : i64} loc(#loc626)
            %6 = cir.get_global @malloc : !cir.ptr<!cir.func<(!u64i) -> !cir.ptr<!void>>> loc(#loc289)
            %7 = cir.const #cir.int<10> : !s32i loc(#loc290)
            %8 = cir.cast(integral, %7 : !s32i), !u64i loc(#loc290)
            %9 = cir.const #cir.int<4> : !u64i loc(#loc627)
            %10 = cir.binop(mul, %8, %9) : !u64i loc(#loc628)
            %11 = cir.call @malloc(%10) : (!u64i) -> !cir.ptr<!void> extra(#fn_attr) loc(#loc289)
            %12 = cir.cast(bitcast, %11 : !cir.ptr<!void>), !cir.ptr<!s32i> loc(#loc629)
            cir.store %12, %5 : !cir.ptr<!s32i>, !cir.ptr<!cir.ptr<!s32i>> loc(#loc626)
            cir.scope {
              %16 = cir.load %5 : !cir.ptr<!cir.ptr<!s32i>>, !cir.ptr<!s32i> loc(#loc295)
              %17 = cir.const #cir.ptr<null> : !cir.ptr<!void> loc(#loc296)
              %18 = cir.cast(bitcast, %17 : !cir.ptr<!void>), !cir.ptr<!s32i> loc(#loc296)
              %19 = cir.cmp(eq, %16, %18) : !cir.ptr<!s32i>, !cir.bool loc(#loc631)
              cir.if %19 {
                %20 = cir.get_global @exit : !cir.ptr<!cir.func<(!s32i)>> loc(#loc298)
                %21 = cir.const #cir.int<1> : !s32i loc(#loc299)
                %22 = cir.unary(minus, %21) nsw : !s32i, !s32i loc(#loc300)
                cir.call @exit(%22) : (!s32i) -> () extra(#fn_attr) loc(#loc298)
              } loc(#loc632)
            } loc(#loc630)
            cir.scope {
              %16 = cir.const #cir.int<0> : !s32i loc(#loc303)
              cir.store %16, %4 : !s32i, !cir.ptr<!s32i> loc(#loc634)
              cir.for : cond {
                %17 = cir.load %4 : !cir.ptr<!s32i>, !s32i loc(#loc305)
                %18 = cir.const #cir.int<10> : !s32i loc(#loc306)
                %19 = cir.cmp(lt, %17, %18) : !s32i, !cir.bool loc(#loc635)
                cir.condition(%19) loc(#loc307)
              } body {
                cir.scope {
                  %17 = cir.const #cir.int<0> : !s32i loc(#loc309)
                  %18 = cir.load %5 : !cir.ptr<!cir.ptr<!s32i>>, !cir.ptr<!s32i> loc(#loc310)
                  %19 = cir.load %4 : !cir.ptr<!s32i>, !s32i loc(#loc311)
                  %20 = cir.ptr_stride(%18 : !cir.ptr<!s32i>, %19 : !s32i), !cir.ptr<!s32i> loc(#loc312)
                  cir.store %17, %20 : !s32i, !cir.ptr<!s32i> loc(#loc637)
                } loc(#loc636)
                cir.yield loc(#loc302)
              } step {
                %17 = cir.load %4 : !cir.ptr<!s32i>, !s32i loc(#loc313)
                %18 = cir.unary(inc, %17) nsw : !s32i, !s32i loc(#loc314)
                cir.store %18, %4 : !s32i, !cir.ptr<!s32i> loc(#loc638)
                cir.yield loc(#loc633)
              } loc(#loc633)
            } loc(#loc633)
            cir.scope {
              %16 = cir.load %0 : !cir.ptr<!s32i>, !s32i loc(#loc317)
              %17 = cir.const #cir.int<0> : !s32i loc(#loc318)
              %18 = cir.cmp(ge, %16, %17) : !s32i, !cir.bool loc(#loc640)
              %19 = cir.ternary(%18, true {
                %20 = cir.load %0 : !cir.ptr<!s32i>, !s32i loc(#loc320)
                %21 = cir.const #cir.int<10> : !s32i loc(#loc321)
                %22 = cir.cmp(lt, %20, %21) : !s32i, !cir.bool loc(#loc641)
                %23 = cir.ternary(%22, true {
                  %24 = cir.const #true loc(#loc319)
                  cir.yield %24 : !cir.bool loc(#loc319)
                }, false {
                  %24 = cir.const #false loc(#loc319)
                  cir.yield %24 : !cir.bool loc(#loc319)
                }) : (!cir.bool) -> !cir.bool loc(#loc319)
                cir.yield %23 : !cir.bool loc(#loc319)
              }, false {
                %20 = cir.const #false loc(#loc319)
                cir.yield %20 : !cir.bool loc(#loc319)
              }) : (!cir.bool) -> !cir.bool loc(#loc319)
              cir.if %19 {
                %20 = cir.const #cir.int<1> : !s32i loc(#loc326)
                %21 = cir.load %5 : !cir.ptr<!cir.ptr<!s32i>>, !cir.ptr<!s32i> loc(#loc327)
                %22 = cir.load %0 : !cir.ptr<!s32i>, !s32i loc(#loc328)
                %23 = cir.ptr_stride(%21 : !cir.ptr<!s32i>, %22 : !s32i), !cir.ptr<!s32i> loc(#loc329)
                cir.store %20, %23 : !s32i, !cir.ptr<!s32i> loc(#loc643)
                cir.scope {
                  %24 = cir.const #cir.int<0> : !s32i loc(#loc332)
                  cir.store %24, %4 : !s32i, !cir.ptr<!s32i> loc(#loc645)
                  cir.for : cond {
                    %25 = cir.load %4 : !cir.ptr<!s32i>, !s32i loc(#loc334)
                    %26 = cir.const #cir.int<10> : !s32i loc(#loc335)
                    %27 = cir.cmp(lt, %25, %26) : !s32i, !cir.bool loc(#loc646)
                    cir.condition(%27) loc(#loc336)
                  } body {
                    cir.scope {
                      %25 = cir.load %5 : !cir.ptr<!cir.ptr<!s32i>>, !cir.ptr<!s32i> loc(#loc338)
                      %26 = cir.load %4 : !cir.ptr<!s32i>, !s32i loc(#loc339)
                      %27 = cir.ptr_stride(%25 : !cir.ptr<!s32i>, %26 : !s32i), !cir.ptr<!s32i> loc(#loc340)
                      %28 = cir.load %27 : !cir.ptr<!s32i>, !s32i loc(#loc338)
                      cir.call @printIntLine(%28) : (!s32i) -> () loc(#loc341)
                    } loc(#loc647)
                    cir.yield loc(#loc331)
                  } step {
                    %25 = cir.load %4 : !cir.ptr<!s32i>, !s32i loc(#loc342)
                    %26 = cir.unary(inc, %25) nsw : !s32i, !s32i loc(#loc343)
                    cir.store %26, %4 : !s32i, !cir.ptr<!s32i> loc(#loc648)
                    cir.yield loc(#loc644)
                  } loc(#loc644)
                } loc(#loc644)
              } else {
                %20 = cir.get_global @".str.3" : !cir.ptr<!cir.array<!s8i x 36>> loc(#loc344)
                %21 = cir.cast(array_to_ptrdecay, %20 : !cir.ptr<!cir.array<!s8i x 36>>), !cir.ptr<!s8i> loc(#loc344)
                cir.call @printLine(%21) : (!cir.ptr<!s8i>) -> () loc(#loc345)
              } loc(#loc642)
            } loc(#loc639)
            %13 = cir.get_global @free : !cir.ptr<!cir.func<(!cir.ptr<!void>)>> loc(#loc346)
            %14 = cir.load %5 : !cir.ptr<!cir.ptr<!s32i>>, !cir.ptr<!s32i> loc(#loc347)
            %15 = cir.cast(bitcast, %14 : !cir.ptr<!s32i>), !cir.ptr<!void> loc(#loc347)
            cir.call @free(%15) : (!cir.ptr<!void>) -> () extra(#fn_attr) loc(#loc346)
          } loc(#loc624)
          cir.break loc(#loc348)
        } loc(#loc282)
        cir.case(default, []) {
          %4 = cir.get_global @".str.1" : !cir.ptr<!cir.array<!s8i x 21>> loc(#loc350)
          %5 = cir.cast(array_to_ptrdecay, %4 : !cir.ptr<!cir.array<!s8i x 21>>), !cir.ptr<!s8i> loc(#loc350)
          cir.call @printLine(%5) : (!cir.ptr<!s8i>) -> () loc(#loc351)
          cir.break loc(#loc352)
        } loc(#loc349)
        cir.yield loc(#loc279)
      } loc(#loc279)
    } loc(#loc623)
    cir.return loc(#loc244)
  } loc(#loc613)
  cir.func no_proto internal private @goodG2B1() extra(#fn_attr1) {
    %0 = cir.alloca !s32i, !cir.ptr<!s32i>, ["data"] {alignment = 4 : i64} loc(#loc650)
    %1 = cir.const #cir.int<1> : !s32i loc(#loc357)
    %2 = cir.unary(minus, %1) nsw : !s32i, !s32i loc(#loc358)
    cir.store %2, %0 : !s32i, !cir.ptr<!s32i> loc(#loc651)
    cir.scope {
      %3 = cir.const #cir.int<5> : !s32i loc(#loc362)
      cir.switch (%3 : !s32i) {
        cir.case(equal, [#cir.int<6> : !s32i]) {
          %4 = cir.get_global @".str.1" : !cir.ptr<!cir.array<!s8i x 21>> loc(#loc364)
          %5 = cir.cast(array_to_ptrdecay, %4 : !cir.ptr<!cir.array<!s8i x 21>>), !cir.ptr<!s8i> loc(#loc364)
          cir.call @printLine(%5) : (!cir.ptr<!s8i>) -> () loc(#loc365)
          cir.break loc(#loc366)
        } loc(#loc363)
        cir.case(default, []) {
          %4 = cir.const #cir.int<7> : !s32i loc(#loc368)
          cir.store %4, %0 : !s32i, !cir.ptr<!s32i> loc(#loc653)
          cir.break loc(#loc370)
        } loc(#loc367)
        cir.yield loc(#loc360)
      } loc(#loc360)
    } loc(#loc652)
    cir.scope {
      %3 = cir.const #cir.int<7> : !s32i loc(#loc373)
      cir.switch (%3 : !s32i) {
        cir.case(equal, [#cir.int<7> : !s32i]) {
          cir.scope {
            %4 = cir.alloca !s32i, !cir.ptr<!s32i>, ["i"] {alignment = 4 : i64} loc(#loc656)
            %5 = cir.alloca !cir.ptr<!s32i>, !cir.ptr<!cir.ptr<!s32i>>, ["buffer", init] {alignment = 8 : i64} loc(#loc657)
            %6 = cir.get_global @malloc : !cir.ptr<!cir.func<(!u64i) -> !cir.ptr<!void>>> loc(#loc381)
            %7 = cir.const #cir.int<10> : !s32i loc(#loc382)
            %8 = cir.cast(integral, %7 : !s32i), !u64i loc(#loc382)
            %9 = cir.const #cir.int<4> : !u64i loc(#loc658)
            %10 = cir.binop(mul, %8, %9) : !u64i loc(#loc659)
            %11 = cir.call @malloc(%10) : (!u64i) -> !cir.ptr<!void> extra(#fn_attr) loc(#loc381)
            %12 = cir.cast(bitcast, %11 : !cir.ptr<!void>), !cir.ptr<!s32i> loc(#loc660)
            cir.store %12, %5 : !cir.ptr<!s32i>, !cir.ptr<!cir.ptr<!s32i>> loc(#loc657)
            cir.scope {
              %16 = cir.load %5 : !cir.ptr<!cir.ptr<!s32i>>, !cir.ptr<!s32i> loc(#loc387)
              %17 = cir.const #cir.ptr<null> : !cir.ptr<!void> loc(#loc388)
              %18 = cir.cast(bitcast, %17 : !cir.ptr<!void>), !cir.ptr<!s32i> loc(#loc388)
              %19 = cir.cmp(eq, %16, %18) : !cir.ptr<!s32i>, !cir.bool loc(#loc662)
              cir.if %19 {
                %20 = cir.get_global @exit : !cir.ptr<!cir.func<(!s32i)>> loc(#loc390)
                %21 = cir.const #cir.int<1> : !s32i loc(#loc391)
                %22 = cir.unary(minus, %21) nsw : !s32i, !s32i loc(#loc392)
                cir.call @exit(%22) : (!s32i) -> () extra(#fn_attr) loc(#loc390)
              } loc(#loc663)
            } loc(#loc661)
            cir.scope {
              %16 = cir.const #cir.int<0> : !s32i loc(#loc395)
              cir.store %16, %4 : !s32i, !cir.ptr<!s32i> loc(#loc665)
              cir.for : cond {
                %17 = cir.load %4 : !cir.ptr<!s32i>, !s32i loc(#loc397)
                %18 = cir.const #cir.int<10> : !s32i loc(#loc398)
                %19 = cir.cmp(lt, %17, %18) : !s32i, !cir.bool loc(#loc666)
                cir.condition(%19) loc(#loc399)
              } body {
                cir.scope {
                  %17 = cir.const #cir.int<0> : !s32i loc(#loc401)
                  %18 = cir.load %5 : !cir.ptr<!cir.ptr<!s32i>>, !cir.ptr<!s32i> loc(#loc402)
                  %19 = cir.load %4 : !cir.ptr<!s32i>, !s32i loc(#loc403)
                  %20 = cir.ptr_stride(%18 : !cir.ptr<!s32i>, %19 : !s32i), !cir.ptr<!s32i> loc(#loc404)
                  cir.store %17, %20 : !s32i, !cir.ptr<!s32i> loc(#loc668)
                } loc(#loc667)
                cir.yield loc(#loc394)
              } step {
                %17 = cir.load %4 : !cir.ptr<!s32i>, !s32i loc(#loc405)
                %18 = cir.unary(inc, %17) nsw : !s32i, !s32i loc(#loc406)
                cir.store %18, %4 : !s32i, !cir.ptr<!s32i> loc(#loc669)
                cir.yield loc(#loc664)
              } loc(#loc664)
            } loc(#loc664)
            cir.scope {
              %16 = cir.load %0 : !cir.ptr<!s32i>, !s32i loc(#loc409)
              %17 = cir.const #cir.int<0> : !s32i loc(#loc410)
              %18 = cir.cmp(ge, %16, %17) : !s32i, !cir.bool loc(#loc671)
              cir.if %18 {
                %19 = cir.const #cir.int<1> : !s32i loc(#loc414)
                %20 = cir.load %5 : !cir.ptr<!cir.ptr<!s32i>>, !cir.ptr<!s32i> loc(#loc415)
                %21 = cir.load %0 : !cir.ptr<!s32i>, !s32i loc(#loc416)
                %22 = cir.ptr_stride(%20 : !cir.ptr<!s32i>, %21 : !s32i), !cir.ptr<!s32i> loc(#loc417)
                cir.store %19, %22 : !s32i, !cir.ptr<!s32i> loc(#loc673)
                cir.scope {
                  %23 = cir.const #cir.int<0> : !s32i loc(#loc420)
                  cir.store %23, %4 : !s32i, !cir.ptr<!s32i> loc(#loc675)
                  cir.for : cond {
                    %24 = cir.load %4 : !cir.ptr<!s32i>, !s32i loc(#loc422)
                    %25 = cir.const #cir.int<10> : !s32i loc(#loc423)
                    %26 = cir.cmp(lt, %24, %25) : !s32i, !cir.bool loc(#loc676)
                    cir.condition(%26) loc(#loc424)
                  } body {
                    cir.scope {
                      %24 = cir.load %5 : !cir.ptr<!cir.ptr<!s32i>>, !cir.ptr<!s32i> loc(#loc426)
                      %25 = cir.load %4 : !cir.ptr<!s32i>, !s32i loc(#loc427)
                      %26 = cir.ptr_stride(%24 : !cir.ptr<!s32i>, %25 : !s32i), !cir.ptr<!s32i> loc(#loc428)
                      %27 = cir.load %26 : !cir.ptr<!s32i>, !s32i loc(#loc426)
                      cir.call @printIntLine(%27) : (!s32i) -> () loc(#loc429)
                    } loc(#loc677)
                    cir.yield loc(#loc419)
                  } step {
                    %24 = cir.load %4 : !cir.ptr<!s32i>, !s32i loc(#loc430)
                    %25 = cir.unary(inc, %24) nsw : !s32i, !s32i loc(#loc431)
                    cir.store %25, %4 : !s32i, !cir.ptr<!s32i> loc(#loc678)
                    cir.yield loc(#loc674)
                  } loc(#loc674)
                } loc(#loc674)
              } else {
                %19 = cir.get_global @".str.2" : !cir.ptr<!cir.array<!s8i x 32>> loc(#loc432)
                %20 = cir.cast(array_to_ptrdecay, %19 : !cir.ptr<!cir.array<!s8i x 32>>), !cir.ptr<!s8i> loc(#loc432)
                cir.call @printLine(%20) : (!cir.ptr<!s8i>) -> () loc(#loc433)
              } loc(#loc672)
            } loc(#loc670)
            %13 = cir.get_global @free : !cir.ptr<!cir.func<(!cir.ptr<!void>)>> loc(#loc434)
            %14 = cir.load %5 : !cir.ptr<!cir.ptr<!s32i>>, !cir.ptr<!s32i> loc(#loc435)
            %15 = cir.cast(bitcast, %14 : !cir.ptr<!s32i>), !cir.ptr<!void> loc(#loc435)
            cir.call @free(%15) : (!cir.ptr<!void>) -> () extra(#fn_attr) loc(#loc434)
          } loc(#loc655)
          cir.break loc(#loc436)
        } loc(#loc374)
        cir.case(default, []) {
          %4 = cir.get_global @".str.1" : !cir.ptr<!cir.array<!s8i x 21>> loc(#loc438)
          %5 = cir.cast(array_to_ptrdecay, %4 : !cir.ptr<!cir.array<!s8i x 21>>), !cir.ptr<!s8i> loc(#loc438)
          cir.call @printLine(%5) : (!cir.ptr<!s8i>) -> () loc(#loc439)
          cir.break loc(#loc440)
        } loc(#loc437)
        cir.yield loc(#loc371)
      } loc(#loc371)
    } loc(#loc654)
    cir.return loc(#loc354)
  } loc(#loc649)
  cir.func no_proto internal private @goodG2B2() extra(#fn_attr1) {
    %0 = cir.alloca !s32i, !cir.ptr<!s32i>, ["data"] {alignment = 4 : i64} loc(#loc680)
    %1 = cir.const #cir.int<1> : !s32i loc(#loc445)
    %2 = cir.unary(minus, %1) nsw : !s32i, !s32i loc(#loc446)
    cir.store %2, %0 : !s32i, !cir.ptr<!s32i> loc(#loc681)
    cir.scope {
      %3 = cir.const #cir.int<6> : !s32i loc(#loc450)
      cir.switch (%3 : !s32i) {
        cir.case(equal, [#cir.int<6> : !s32i]) {
          %4 = cir.const #cir.int<7> : !s32i loc(#loc452)
          cir.store %4, %0 : !s32i, !cir.ptr<!s32i> loc(#loc683)
          cir.break loc(#loc454)
        } loc(#loc451)
        cir.case(default, []) {
          %4 = cir.get_global @".str.1" : !cir.ptr<!cir.array<!s8i x 21>> loc(#loc456)
          %5 = cir.cast(array_to_ptrdecay, %4 : !cir.ptr<!cir.array<!s8i x 21>>), !cir.ptr<!s8i> loc(#loc456)
          cir.call @printLine(%5) : (!cir.ptr<!s8i>) -> () loc(#loc457)
          cir.break loc(#loc458)
        } loc(#loc455)
        cir.yield loc(#loc448)
      } loc(#loc448)
    } loc(#loc682)
    cir.scope {
      %3 = cir.const #cir.int<7> : !s32i loc(#loc461)
      cir.switch (%3 : !s32i) {
        cir.case(equal, [#cir.int<7> : !s32i]) {
          cir.scope {
            %4 = cir.alloca !s32i, !cir.ptr<!s32i>, ["i"] {alignment = 4 : i64} loc(#loc686)
            %5 = cir.alloca !cir.ptr<!s32i>, !cir.ptr<!cir.ptr<!s32i>>, ["buffer", init] {alignment = 8 : i64} loc(#loc687)
            %6 = cir.get_global @malloc : !cir.ptr<!cir.func<(!u64i) -> !cir.ptr<!void>>> loc(#loc469)
            %7 = cir.const #cir.int<10> : !s32i loc(#loc470)
            %8 = cir.cast(integral, %7 : !s32i), !u64i loc(#loc470)
            %9 = cir.const #cir.int<4> : !u64i loc(#loc688)
            %10 = cir.binop(mul, %8, %9) : !u64i loc(#loc689)
            %11 = cir.call @malloc(%10) : (!u64i) -> !cir.ptr<!void> extra(#fn_attr) loc(#loc469)
            %12 = cir.cast(bitcast, %11 : !cir.ptr<!void>), !cir.ptr<!s32i> loc(#loc690)
            cir.store %12, %5 : !cir.ptr<!s32i>, !cir.ptr<!cir.ptr<!s32i>> loc(#loc687)
            cir.scope {
              %16 = cir.load %5 : !cir.ptr<!cir.ptr<!s32i>>, !cir.ptr<!s32i> loc(#loc475)
              %17 = cir.const #cir.ptr<null> : !cir.ptr<!void> loc(#loc476)
              %18 = cir.cast(bitcast, %17 : !cir.ptr<!void>), !cir.ptr<!s32i> loc(#loc476)
              %19 = cir.cmp(eq, %16, %18) : !cir.ptr<!s32i>, !cir.bool loc(#loc692)
              cir.if %19 {
                %20 = cir.get_global @exit : !cir.ptr<!cir.func<(!s32i)>> loc(#loc478)
                %21 = cir.const #cir.int<1> : !s32i loc(#loc479)
                %22 = cir.unary(minus, %21) nsw : !s32i, !s32i loc(#loc480)
                cir.call @exit(%22) : (!s32i) -> () extra(#fn_attr) loc(#loc478)
              } loc(#loc693)
            } loc(#loc691)
            cir.scope {
              %16 = cir.const #cir.int<0> : !s32i loc(#loc483)
              cir.store %16, %4 : !s32i, !cir.ptr<!s32i> loc(#loc695)
              cir.for : cond {
                %17 = cir.load %4 : !cir.ptr<!s32i>, !s32i loc(#loc485)
                %18 = cir.const #cir.int<10> : !s32i loc(#loc486)
                %19 = cir.cmp(lt, %17, %18) : !s32i, !cir.bool loc(#loc696)
                cir.condition(%19) loc(#loc487)
              } body {
                cir.scope {
                  %17 = cir.const #cir.int<0> : !s32i loc(#loc489)
                  %18 = cir.load %5 : !cir.ptr<!cir.ptr<!s32i>>, !cir.ptr<!s32i> loc(#loc490)
                  %19 = cir.load %4 : !cir.ptr<!s32i>, !s32i loc(#loc491)
                  %20 = cir.ptr_stride(%18 : !cir.ptr<!s32i>, %19 : !s32i), !cir.ptr<!s32i> loc(#loc492)
                  cir.store %17, %20 : !s32i, !cir.ptr<!s32i> loc(#loc698)
                } loc(#loc697)
                cir.yield loc(#loc482)
              } step {
                %17 = cir.load %4 : !cir.ptr<!s32i>, !s32i loc(#loc493)
                %18 = cir.unary(inc, %17) nsw : !s32i, !s32i loc(#loc494)
                cir.store %18, %4 : !s32i, !cir.ptr<!s32i> loc(#loc699)
                cir.yield loc(#loc694)
              } loc(#loc694)
            } loc(#loc694)
            cir.scope {
              %16 = cir.load %0 : !cir.ptr<!s32i>, !s32i loc(#loc497)
              %17 = cir.const #cir.int<0> : !s32i loc(#loc498)
              %18 = cir.cmp(ge, %16, %17) : !s32i, !cir.bool loc(#loc701)
              cir.if %18 {
                %19 = cir.const #cir.int<1> : !s32i loc(#loc502)
                %20 = cir.load %5 : !cir.ptr<!cir.ptr<!s32i>>, !cir.ptr<!s32i> loc(#loc503)
                %21 = cir.load %0 : !cir.ptr<!s32i>, !s32i loc(#loc504)
                %22 = cir.ptr_stride(%20 : !cir.ptr<!s32i>, %21 : !s32i), !cir.ptr<!s32i> loc(#loc505)
                cir.store %19, %22 : !s32i, !cir.ptr<!s32i> loc(#loc703)
                cir.scope {
                  %23 = cir.const #cir.int<0> : !s32i loc(#loc508)
                  cir.store %23, %4 : !s32i, !cir.ptr<!s32i> loc(#loc705)
                  cir.for : cond {
                    %24 = cir.load %4 : !cir.ptr<!s32i>, !s32i loc(#loc510)
                    %25 = cir.const #cir.int<10> : !s32i loc(#loc511)
                    %26 = cir.cmp(lt, %24, %25) : !s32i, !cir.bool loc(#loc706)
                    cir.condition(%26) loc(#loc512)
                  } body {
                    cir.scope {
                      %24 = cir.load %5 : !cir.ptr<!cir.ptr<!s32i>>, !cir.ptr<!s32i> loc(#loc514)
                      %25 = cir.load %4 : !cir.ptr<!s32i>, !s32i loc(#loc515)
                      %26 = cir.ptr_stride(%24 : !cir.ptr<!s32i>, %25 : !s32i), !cir.ptr<!s32i> loc(#loc516)
                      %27 = cir.load %26 : !cir.ptr<!s32i>, !s32i loc(#loc514)
                      cir.call @printIntLine(%27) : (!s32i) -> () loc(#loc517)
                    } loc(#loc707)
                    cir.yield loc(#loc507)
                  } step {
                    %24 = cir.load %4 : !cir.ptr<!s32i>, !s32i loc(#loc518)
                    %25 = cir.unary(inc, %24) nsw : !s32i, !s32i loc(#loc519)
                    cir.store %25, %4 : !s32i, !cir.ptr<!s32i> loc(#loc708)
                    cir.yield loc(#loc704)
                  } loc(#loc704)
                } loc(#loc704)
              } else {
                %19 = cir.get_global @".str.2" : !cir.ptr<!cir.array<!s8i x 32>> loc(#loc520)
                %20 = cir.cast(array_to_ptrdecay, %19 : !cir.ptr<!cir.array<!s8i x 32>>), !cir.ptr<!s8i> loc(#loc520)
                cir.call @printLine(%20) : (!cir.ptr<!s8i>) -> () loc(#loc521)
              } loc(#loc702)
            } loc(#loc700)
            %13 = cir.get_global @free : !cir.ptr<!cir.func<(!cir.ptr<!void>)>> loc(#loc522)
            %14 = cir.load %5 : !cir.ptr<!cir.ptr<!s32i>>, !cir.ptr<!s32i> loc(#loc523)
            %15 = cir.cast(bitcast, %14 : !cir.ptr<!s32i>), !cir.ptr<!void> loc(#loc523)
            cir.call @free(%15) : (!cir.ptr<!void>) -> () extra(#fn_attr) loc(#loc522)
          } loc(#loc685)
          cir.break loc(#loc524)
        } loc(#loc462)
        cir.case(default, []) {
          %4 = cir.get_global @".str.1" : !cir.ptr<!cir.array<!s8i x 21>> loc(#loc526)
          %5 = cir.cast(array_to_ptrdecay, %4 : !cir.ptr<!cir.array<!s8i x 21>>), !cir.ptr<!s8i> loc(#loc526)
          cir.call @printLine(%5) : (!cir.ptr<!s8i>) -> () loc(#loc527)
          cir.break loc(#loc528)
        } loc(#loc525)
        cir.yield loc(#loc459)
      } loc(#loc459)
    } loc(#loc684)
    cir.return loc(#loc442)
  } loc(#loc679)
} loc(#loc)
#loc = loc("/workspaces/juliet-c/testcases/CWE122_Heap_Based_Buffer_Overflow/s06/CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_15.c":0:0)
#loc1 = loc("/usr/include/stdio.h":654:1)
#loc2 = loc("/usr/include/stdio.h":655:59)
#loc3 = loc("/usr/include/stdio.h":149:1)
#loc4 = loc("/usr/include/stdio.h":149:14)
#loc5 = loc("/usr/include/stdlib.h":105:1)
#loc6 = loc("/usr/include/stdlib.h":106:33)
#loc7 = loc("../../../testcasesupport/std_testcase_io.h":14:1)
#loc8 = loc("../../../testcasesupport/std_testcase_io.h":14:33)
#loc9 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_15.c":42:23)
#loc10 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_15.c":48:19)
#loc11 = loc("/usr/include/stdlib.h":672:1)
#loc12 = loc("/usr/include/stdlib.h":672:45)
#loc13 = loc("/usr/include/stdlib.h":756:1)
#loc14 = loc("/usr/include/stdlib.h":756:70)
#loc15 = loc("../../../testcasesupport/std_testcase_io.h":18:1)
#loc16 = loc("../../../testcasesupport/std_testcase_io.h":18:33)
#loc17 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_15.c":76:23)
#loc18 = loc("/usr/include/stdlib.h":687:1)
#loc19 = loc("/usr/include/stdlib.h":687:32)
#loc20 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_15.c":24:1)
#loc21 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_15.c":86:1)
#loc22 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_15.c":26:5)
#loc23 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_15.c":26:9)
#loc24 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_15.c":28:13)
#loc25 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_15.c":28:12)
#loc26 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_15.c":28:5)
#loc27 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_15.c":29:5)
#loc28 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_15.c":50:5)
#loc29 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_15.c":29:12)
#loc30 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_15.c":31:5)
#loc31 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_15.c":32:5)
#loc32 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_15.c":44:5)
#loc33 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_15.c":33:9)
#loc34 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_15.c":33:45)
#loc35 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_15.c":35:9)
#loc36 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_15.c":43:9)
#loc37 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_15.c":35:19)
#loc38 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_15.c":35:32)
#loc39 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_15.c":35:49)
#loc40 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_15.c":35:13)
#loc41 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_15.c":35:59)
#loc42 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_15.c":36:9)
#loc43 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_15.c":39:9)
#loc44 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_15.c":41:9)
#loc45 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_15.c":38:25)
#loc46 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_15.c":38:20)
#loc47 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_15.c":38:13)
#loc48 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_15.c":38:36)
#loc49 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_15.c":42:13)
#loc50 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_15.c":45:5)
#loc51 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_15.c":46:5)
#loc52 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_15.c":48:9)
#loc53 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_15.c":49:9)
#loc54 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_15.c":51:5)
#loc55 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_15.c":85:5)
#loc56 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_15.c":51:12)
#loc57 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_15.c":53:5)
#loc58 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_15.c":54:5)
#loc59 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_15.c":79:5)
#loc60 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_15.c":55:9)
#loc61 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_15.c":55:13)
#loc62 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_15.c":56:9)
#loc63 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_15.c":56:54)
#loc64 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_15.c":56:31)
#loc65 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_15.c":56:38)
#loc66 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_15.c":56:43)
#loc67 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_15.c":56:53)
#loc68 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_15.c":57:9)
#loc69 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_15.c":57:39)
#loc70 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_15.c":57:13)
#loc71 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_15.c":57:23)
#loc72 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_15.c":57:29)
#loc73 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_15.c":57:30)
#loc74 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_15.c":57:36)
#loc75 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_15.c":57:35)
#loc76 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_15.c":59:9)
#loc77 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_15.c":62:9)
#loc78 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_15.c":59:18)
#loc79 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_15.c":59:14)
#loc80 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_15.c":59:21)
#loc81 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_15.c":59:25)
#loc82 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_15.c":59:23)
#loc83 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_15.c":60:9)
#loc84 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_15.c":61:25)
#loc85 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_15.c":61:13)
#loc86 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_15.c":61:20)
#loc87 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_15.c":61:21)
#loc88 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_15.c":59:30)
#loc89 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_15.c":59:29)
#loc90 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_15.c":65:9)
#loc91 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_15.c":77:9)
#loc92 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_15.c":65:13)
#loc93 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_15.c":65:21)
#loc94 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_15.c":66:9)
#loc95 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_15.c":73:9)
#loc96 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_15.c":75:9)
#loc97 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_15.c":67:28)
#loc98 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_15.c":67:13)
#loc99 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_15.c":67:20)
#loc100 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_15.c":67:24)
#loc101 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_15.c":69:13)
#loc102 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_15.c":72:13)
#loc103 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_15.c":69:21)
#loc104 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_15.c":69:17)
#loc105 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_15.c":69:24)
#loc106 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_15.c":69:28)
#loc107 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_15.c":69:26)
#loc108 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_15.c":70:13)
#loc109 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_15.c":71:30)
#loc110 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_15.c":71:37)
#loc111 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_15.c":71:38)
#loc112 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_15.c":71:17)
#loc113 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_15.c":69:33)
#loc114 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_15.c":69:32)
#loc115 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_15.c":76:13)
#loc116 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_15.c":78:9)
#loc117 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_15.c":78:14)
#loc118 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_15.c":80:5)
#loc119 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_15.c":81:5)
#loc120 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_15.c":83:19)
#loc121 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_15.c":83:9)
#loc122 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_15.c":84:9)
#loc123 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_15.c":330:1)
#loc124 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_15.c":336:1)
#loc125 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_15.c":332:5)
#loc126 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_15.c":332:14)
#loc127 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_15.c":333:5)
#loc128 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_15.c":333:14)
#loc129 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_15.c":334:5)
#loc130 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_15.c":334:14)
#loc131 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_15.c":335:5)
#loc132 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_15.c":335:14)
#loc133 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_15.c":148:23)
#loc134 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_15.c":93:1)
#loc135 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_15.c":154:1)
#loc136 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_15.c":95:5)
#loc137 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_15.c":95:9)
#loc138 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_15.c":97:13)
#loc139 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_15.c":97:12)
#loc140 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_15.c":97:5)
#loc141 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_15.c":98:5)
#loc142 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_15.c":119:5)
#loc143 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_15.c":98:12)
#loc144 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_15.c":100:5)
#loc145 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_15.c":101:5)
#loc146 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_15.c":113:5)
#loc147 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_15.c":102:9)
#loc148 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_15.c":102:45)
#loc149 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_15.c":104:9)
#loc150 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_15.c":112:9)
#loc151 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_15.c":104:19)
#loc152 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_15.c":104:32)
#loc153 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_15.c":104:49)
#loc154 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_15.c":104:13)
#loc155 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_15.c":104:59)
#loc156 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_15.c":105:9)
#loc157 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_15.c":108:9)
#loc158 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_15.c":110:9)
#loc159 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_15.c":107:25)
#loc160 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_15.c":107:20)
#loc161 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_15.c":107:13)
#loc162 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_15.c":107:36)
#loc163 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_15.c":111:23)
#loc164 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_15.c":111:13)
#loc165 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_15.c":114:5)
#loc166 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_15.c":115:5)
#loc167 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_15.c":117:19)
#loc168 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_15.c":117:9)
#loc169 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_15.c":118:9)
#loc170 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_15.c":120:5)
#loc171 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_15.c":153:5)
#loc172 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_15.c":120:12)
#loc173 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_15.c":122:5)
#loc174 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_15.c":124:19)
#loc175 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_15.c":124:9)
#loc176 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_15.c":125:9)
#loc177 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_15.c":126:5)
#loc178 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_15.c":127:5)
#loc179 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_15.c":151:5)
#loc180 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_15.c":128:9)
#loc181 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_15.c":128:13)
#loc182 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_15.c":129:9)
#loc183 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_15.c":129:54)
#loc184 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_15.c":129:31)
#loc185 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_15.c":129:38)
#loc186 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_15.c":129:43)
#loc187 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_15.c":129:53)
#loc188 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_15.c":130:9)
#loc189 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_15.c":130:39)
#loc190 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_15.c":130:13)
#loc191 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_15.c":130:23)
#loc192 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_15.c":130:29)
#loc193 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_15.c":130:30)
#loc194 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_15.c":130:36)
#loc195 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_15.c":130:35)
#loc196 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_15.c":132:9)
#loc197 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_15.c":135:9)
#loc198 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_15.c":132:18)
#loc199 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_15.c":132:14)
#loc200 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_15.c":132:21)
#loc201 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_15.c":132:25)
#loc202 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_15.c":132:23)
#loc203 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_15.c":133:9)
#loc204 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_15.c":134:25)
#loc205 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_15.c":134:13)
#loc206 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_15.c":134:20)
#loc207 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_15.c":134:21)
#loc208 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_15.c":132:30)
#loc209 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_15.c":132:29)
#loc210 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_15.c":137:9)
#loc211 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_15.c":149:9)
#loc212 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_15.c":137:13)
#loc213 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_15.c":137:21)
#loc214 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_15.c":137:23)
#loc215 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_15.c":137:26)
#loc216 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_15.c":137:34)
#loc217 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_15.c":137:36)
#loc218 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_15.c":138:9)
#loc219 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_15.c":145:9)
#loc220 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_15.c":147:9)
#loc221 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_15.c":139:28)
#loc222 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_15.c":139:13)
#loc223 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_15.c":139:20)
#loc224 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_15.c":139:24)
#loc225 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_15.c":141:13)
#loc226 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_15.c":144:13)
#loc227 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_15.c":141:21)
#loc228 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_15.c":141:17)
#loc229 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_15.c":141:24)
#loc230 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_15.c":141:28)
#loc231 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_15.c":141:26)
#loc232 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_15.c":142:13)
#loc233 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_15.c":143:30)
#loc234 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_15.c":143:37)
#loc235 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_15.c":143:38)
#loc236 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_15.c":143:17)
#loc237 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_15.c":141:33)
#loc238 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_15.c":141:32)
#loc239 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_15.c":148:13)
#loc240 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_15.c":150:9)
#loc241 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_15.c":150:14)
#loc242 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_15.c":152:5)
#loc243 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_15.c":157:1)
#loc244 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_15.c":218:1)
#loc245 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_15.c":159:5)
#loc246 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_15.c":159:9)
#loc247 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_15.c":161:13)
#loc248 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_15.c":161:12)
#loc249 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_15.c":161:5)
#loc250 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_15.c":162:5)
#loc251 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_15.c":183:5)
#loc252 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_15.c":162:12)
#loc253 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_15.c":164:5)
#loc254 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_15.c":165:5)
#loc255 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_15.c":177:5)
#loc256 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_15.c":166:9)
#loc257 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_15.c":166:45)
#loc258 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_15.c":168:9)
#loc259 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_15.c":176:9)
#loc260 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_15.c":168:19)
#loc261 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_15.c":168:32)
#loc262 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_15.c":168:49)
#loc263 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_15.c":168:13)
#loc264 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_15.c":168:59)
#loc265 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_15.c":169:9)
#loc266 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_15.c":172:9)
#loc267 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_15.c":174:9)
#loc268 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_15.c":171:25)
#loc269 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_15.c":171:20)
#loc270 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_15.c":171:13)
#loc271 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_15.c":171:36)
#loc272 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_15.c":175:23)
#loc273 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_15.c":175:13)
#loc274 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_15.c":178:5)
#loc275 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_15.c":179:5)
#loc276 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_15.c":181:19)
#loc277 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_15.c":181:9)
#loc278 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_15.c":182:9)
#loc279 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_15.c":184:5)
#loc280 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_15.c":217:5)
#loc281 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_15.c":184:12)
#loc282 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_15.c":186:5)
#loc283 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_15.c":187:5)
#loc284 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_15.c":211:5)
#loc285 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_15.c":188:9)
#loc286 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_15.c":188:13)
#loc287 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_15.c":189:9)
#loc288 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_15.c":189:54)
#loc289 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_15.c":189:31)
#loc290 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_15.c":189:38)
#loc291 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_15.c":189:43)
#loc292 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_15.c":189:53)
#loc293 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_15.c":190:9)
#loc294 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_15.c":190:39)
#loc295 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_15.c":190:13)
#loc296 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_15.c":190:23)
#loc297 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_15.c":190:29)
#loc298 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_15.c":190:30)
#loc299 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_15.c":190:36)
#loc300 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_15.c":190:35)
#loc301 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_15.c":192:9)
#loc302 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_15.c":195:9)
#loc303 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_15.c":192:18)
#loc304 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_15.c":192:14)
#loc305 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_15.c":192:21)
#loc306 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_15.c":192:25)
#loc307 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_15.c":192:23)
#loc308 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_15.c":193:9)
#loc309 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_15.c":194:25)
#loc310 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_15.c":194:13)
#loc311 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_15.c":194:20)
#loc312 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_15.c":194:21)
#loc313 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_15.c":192:30)
#loc314 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_15.c":192:29)
#loc315 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_15.c":197:9)
#loc316 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_15.c":209:9)
#loc317 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_15.c":197:13)
#loc318 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_15.c":197:21)
#loc319 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_15.c":197:23)
#loc320 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_15.c":197:26)
#loc321 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_15.c":197:34)
#loc322 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_15.c":197:36)
#loc323 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_15.c":198:9)
#loc324 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_15.c":205:9)
#loc325 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_15.c":207:9)
#loc326 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_15.c":199:28)
#loc327 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_15.c":199:13)
#loc328 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_15.c":199:20)
#loc329 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_15.c":199:24)
#loc330 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_15.c":201:13)
#loc331 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_15.c":204:13)
#loc332 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_15.c":201:21)
#loc333 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_15.c":201:17)
#loc334 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_15.c":201:24)
#loc335 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_15.c":201:28)
#loc336 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_15.c":201:26)
#loc337 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_15.c":202:13)
#loc338 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_15.c":203:30)
#loc339 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_15.c":203:37)
#loc340 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_15.c":203:38)
#loc341 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_15.c":203:17)
#loc342 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_15.c":201:33)
#loc343 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_15.c":201:32)
#loc344 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_15.c":208:23)
#loc345 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_15.c":208:13)
#loc346 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_15.c":210:9)
#loc347 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_15.c":210:14)
#loc348 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_15.c":212:5)
#loc349 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_15.c":213:5)
#loc350 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_15.c":215:19)
#loc351 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_15.c":215:9)
#loc352 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_15.c":216:9)
#loc353 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_15.c":221:1)
#loc354 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_15.c":273:1)
#loc355 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_15.c":223:5)
#loc356 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_15.c":223:9)
#loc357 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_15.c":225:13)
#loc358 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_15.c":225:12)
#loc359 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_15.c":225:5)
#loc360 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_15.c":226:5)
#loc361 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_15.c":237:5)
#loc362 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_15.c":226:12)
#loc363 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_15.c":228:5)
#loc364 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_15.c":230:19)
#loc365 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_15.c":230:9)
#loc366 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_15.c":231:9)
#loc367 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_15.c":232:5)
#loc368 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_15.c":235:16)
#loc369 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_15.c":235:9)
#loc370 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_15.c":236:9)
#loc371 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_15.c":238:5)
#loc372 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_15.c":272:5)
#loc373 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_15.c":238:12)
#loc374 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_15.c":240:5)
#loc375 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_15.c":241:5)
#loc376 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_15.c":266:5)
#loc377 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_15.c":242:9)
#loc378 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_15.c":242:13)
#loc379 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_15.c":243:9)
#loc380 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_15.c":243:54)
#loc381 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_15.c":243:31)
#loc382 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_15.c":243:38)
#loc383 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_15.c":243:43)
#loc384 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_15.c":243:53)
#loc385 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_15.c":244:9)
#loc386 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_15.c":244:39)
#loc387 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_15.c":244:13)
#loc388 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_15.c":244:23)
#loc389 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_15.c":244:29)
#loc390 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_15.c":244:30)
#loc391 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_15.c":244:36)
#loc392 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_15.c":244:35)
#loc393 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_15.c":246:9)
#loc394 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_15.c":249:9)
#loc395 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_15.c":246:18)
#loc396 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_15.c":246:14)
#loc397 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_15.c":246:21)
#loc398 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_15.c":246:25)
#loc399 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_15.c":246:23)
#loc400 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_15.c":247:9)
#loc401 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_15.c":248:25)
#loc402 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_15.c":248:13)
#loc403 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_15.c":248:20)
#loc404 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_15.c":248:21)
#loc405 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_15.c":246:30)
#loc406 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_15.c":246:29)
#loc407 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_15.c":252:9)
#loc408 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_15.c":264:9)
#loc409 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_15.c":252:13)
#loc410 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_15.c":252:21)
#loc411 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_15.c":253:9)
#loc412 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_15.c":260:9)
#loc413 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_15.c":262:9)
#loc414 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_15.c":254:28)
#loc415 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_15.c":254:13)
#loc416 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_15.c":254:20)
#loc417 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_15.c":254:24)
#loc418 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_15.c":256:13)
#loc419 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_15.c":259:13)
#loc420 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_15.c":256:21)
#loc421 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_15.c":256:17)
#loc422 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_15.c":256:24)
#loc423 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_15.c":256:28)
#loc424 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_15.c":256:26)
#loc425 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_15.c":257:13)
#loc426 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_15.c":258:30)
#loc427 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_15.c":258:37)
#loc428 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_15.c":258:38)
#loc429 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_15.c":258:17)
#loc430 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_15.c":256:33)
#loc431 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_15.c":256:32)
#loc432 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_15.c":263:23)
#loc433 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_15.c":263:13)
#loc434 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_15.c":265:9)
#loc435 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_15.c":265:14)
#loc436 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_15.c":267:5)
#loc437 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_15.c":268:5)
#loc438 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_15.c":270:19)
#loc439 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_15.c":270:9)
#loc440 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_15.c":271:9)
#loc441 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_15.c":276:1)
#loc442 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_15.c":328:1)
#loc443 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_15.c":278:5)
#loc444 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_15.c":278:9)
#loc445 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_15.c":280:13)
#loc446 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_15.c":280:12)
#loc447 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_15.c":280:5)
#loc448 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_15.c":281:5)
#loc449 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_15.c":292:5)
#loc450 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_15.c":281:12)
#loc451 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_15.c":283:5)
#loc452 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_15.c":286:16)
#loc453 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_15.c":286:9)
#loc454 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_15.c":287:9)
#loc455 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_15.c":288:5)
#loc456 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_15.c":290:19)
#loc457 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_15.c":290:9)
#loc458 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_15.c":291:9)
#loc459 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_15.c":293:5)
#loc460 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_15.c":327:5)
#loc461 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_15.c":293:12)
#loc462 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_15.c":295:5)
#loc463 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_15.c":296:5)
#loc464 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_15.c":321:5)
#loc465 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_15.c":297:9)
#loc466 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_15.c":297:13)
#loc467 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_15.c":298:9)
#loc468 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_15.c":298:54)
#loc469 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_15.c":298:31)
#loc470 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_15.c":298:38)
#loc471 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_15.c":298:43)
#loc472 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_15.c":298:53)
#loc473 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_15.c":299:9)
#loc474 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_15.c":299:39)
#loc475 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_15.c":299:13)
#loc476 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_15.c":299:23)
#loc477 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_15.c":299:29)
#loc478 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_15.c":299:30)
#loc479 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_15.c":299:36)
#loc480 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_15.c":299:35)
#loc481 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_15.c":301:9)
#loc482 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_15.c":304:9)
#loc483 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_15.c":301:18)
#loc484 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_15.c":301:14)
#loc485 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_15.c":301:21)
#loc486 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_15.c":301:25)
#loc487 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_15.c":301:23)
#loc488 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_15.c":302:9)
#loc489 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_15.c":303:25)
#loc490 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_15.c":303:13)
#loc491 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_15.c":303:20)
#loc492 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_15.c":303:21)
#loc493 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_15.c":301:30)
#loc494 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_15.c":301:29)
#loc495 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_15.c":307:9)
#loc496 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_15.c":319:9)
#loc497 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_15.c":307:13)
#loc498 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_15.c":307:21)
#loc499 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_15.c":308:9)
#loc500 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_15.c":315:9)
#loc501 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_15.c":317:9)
#loc502 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_15.c":309:28)
#loc503 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_15.c":309:13)
#loc504 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_15.c":309:20)
#loc505 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_15.c":309:24)
#loc506 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_15.c":311:13)
#loc507 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_15.c":314:13)
#loc508 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_15.c":311:21)
#loc509 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_15.c":311:17)
#loc510 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_15.c":311:24)
#loc511 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_15.c":311:28)
#loc512 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_15.c":311:26)
#loc513 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_15.c":312:13)
#loc514 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_15.c":313:30)
#loc515 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_15.c":313:37)
#loc516 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_15.c":313:38)
#loc517 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_15.c":313:17)
#loc518 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_15.c":311:33)
#loc519 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_15.c":311:32)
#loc520 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_15.c":318:23)
#loc521 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_15.c":318:13)
#loc522 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_15.c":320:9)
#loc523 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_15.c":320:14)
#loc524 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_15.c":322:5)
#loc525 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_15.c":323:5)
#loc526 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_15.c":325:19)
#loc527 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_15.c":325:9)
#loc528 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_15.c":326:9)
#loc529 = loc(fused[#loc1, #loc2])
#loc530 = loc(fused[#loc3, #loc4])
#loc531 = loc(fused[#loc5, #loc6])
#loc532 = loc(fused[#loc7, #loc8])
#loc533 = loc(fused[#loc11, #loc12])
#loc534 = loc(fused[#loc13, #loc14])
#loc535 = loc(fused[#loc15, #loc16])
#loc536 = loc(fused[#loc18, #loc19])
#loc537 = loc(fused[#loc20, #loc21])
#loc538 = loc(fused[#loc22, #loc23])
#loc539 = loc(fused[#loc26, #loc24])
#loc540 = loc(fused[#loc27, #loc28])
#loc541 = loc(fused[#loc31, #loc32])
#loc542 = loc(fused[#loc33, #loc34])
#loc543 = loc(fused[#loc35, #loc36])
#loc544 = loc(fused[#loc40, #loc41])
#loc545 = loc(fused[#loc42, #loc43, #loc44, #loc36])
#loc546 = loc(fused[#loc47, #loc48])
#loc547 = loc(fused[#loc54, #loc55])
#loc548 = loc(fused[#loc58, #loc59])
#loc549 = loc(fused[#loc60, #loc61])
#loc550 = loc(fused[#loc62, #loc63])
#loc551 = loc(fused[#loc66, #loc67])
#loc552 = loc(fused[#loc65, #loc67])
#loc553 = loc(fused[#loc64, #loc63])
#loc554 = loc(fused[#loc68, #loc69])
#loc555 = loc(fused[#loc70, #loc71])
#loc556 = loc(fused[#loc72, #loc69])
#loc557 = loc(fused[#loc76, #loc77])
#loc558 = loc(fused[#loc79, #loc78])
#loc559 = loc(fused[#loc80, #loc81])
#loc560 = loc(fused[#loc83, #loc77])
#loc561 = loc(fused[#loc85, #loc84])
#loc562 = loc(fused[#loc89, #loc88])
#loc563 = loc(fused[#loc90, #loc91])
#loc564 = loc(fused[#loc92, #loc93])
#loc565 = loc(fused[#loc94, #loc95, #loc96, #loc91])
#loc566 = loc(fused[#loc98, #loc97])
#loc567 = loc(fused[#loc101, #loc102])
#loc568 = loc(fused[#loc104, #loc103])
#loc569 = loc(fused[#loc105, #loc106])
#loc570 = loc(fused[#loc108, #loc102])
#loc571 = loc(fused[#loc114, #loc113])
#loc572 = loc(fused[#loc123, #loc124])
#loc573 = loc(fused[#loc125, #loc126])
#loc574 = loc(fused[#loc127, #loc128])
#loc575 = loc(fused[#loc129, #loc130])
#loc576 = loc(fused[#loc131, #loc132])
#loc577 = loc(fused[#loc134, #loc135])
#loc578 = loc(fused[#loc136, #loc137])
#loc579 = loc(fused[#loc140, #loc138])
#loc580 = loc(fused[#loc141, #loc142])
#loc581 = loc(fused[#loc145, #loc146])
#loc582 = loc(fused[#loc147, #loc148])
#loc583 = loc(fused[#loc149, #loc150])
#loc584 = loc(fused[#loc154, #loc155])
#loc585 = loc(fused[#loc156, #loc157, #loc158, #loc150])
#loc586 = loc(fused[#loc161, #loc162])
#loc587 = loc(fused[#loc170, #loc171])
#loc588 = loc(fused[#loc178, #loc179])
#loc589 = loc(fused[#loc180, #loc181])
#loc590 = loc(fused[#loc182, #loc183])
#loc591 = loc(fused[#loc186, #loc187])
#loc592 = loc(fused[#loc185, #loc187])
#loc593 = loc(fused[#loc184, #loc183])
#loc594 = loc(fused[#loc188, #loc189])
#loc595 = loc(fused[#loc190, #loc191])
#loc596 = loc(fused[#loc192, #loc189])
#loc597 = loc(fused[#loc196, #loc197])
#loc598 = loc(fused[#loc199, #loc198])
#loc599 = loc(fused[#loc200, #loc201])
#loc600 = loc(fused[#loc203, #loc197])
#loc601 = loc(fused[#loc205, #loc204])
#loc602 = loc(fused[#loc209, #loc208])
#loc603 = loc(fused[#loc210, #loc211])
#loc604 = loc(fused[#loc212, #loc213])
#loc605 = loc(fused[#loc215, #loc217])
#loc606 = loc(fused[#loc218, #loc219, #loc220, #loc211])
#loc607 = loc(fused[#loc222, #loc221])
#loc608 = loc(fused[#loc225, #loc226])
#loc609 = loc(fused[#loc228, #loc227])
#loc610 = loc(fused[#loc229, #loc230])
#loc611 = loc(fused[#loc232, #loc226])
#loc612 = loc(fused[#loc238, #loc237])
#loc613 = loc(fused[#loc243, #loc244])
#loc614 = loc(fused[#loc245, #loc246])
#loc615 = loc(fused[#loc249, #loc247])
#loc616 = loc(fused[#loc250, #loc251])
#loc617 = loc(fused[#loc254, #loc255])
#loc618 = loc(fused[#loc256, #loc257])
#loc619 = loc(fused[#loc258, #loc259])
#loc620 = loc(fused[#loc263, #loc264])
#loc621 = loc(fused[#loc265, #loc266, #loc267, #loc259])
#loc622 = loc(fused[#loc270, #loc271])
#loc623 = loc(fused[#loc279, #loc280])
#loc624 = loc(fused[#loc283, #loc284])
#loc625 = loc(fused[#loc285, #loc286])
#loc626 = loc(fused[#loc287, #loc288])
#loc627 = loc(fused[#loc291, #loc292])
#loc628 = loc(fused[#loc290, #loc292])
#loc629 = loc(fused[#loc289, #loc288])
#loc630 = loc(fused[#loc293, #loc294])
#loc631 = loc(fused[#loc295, #loc296])
#loc632 = loc(fused[#loc297, #loc294])
#loc633 = loc(fused[#loc301, #loc302])
#loc634 = loc(fused[#loc304, #loc303])
#loc635 = loc(fused[#loc305, #loc306])
#loc636 = loc(fused[#loc308, #loc302])
#loc637 = loc(fused[#loc310, #loc309])
#loc638 = loc(fused[#loc314, #loc313])
#loc639 = loc(fused[#loc315, #loc316])
#loc640 = loc(fused[#loc317, #loc318])
#loc641 = loc(fused[#loc320, #loc322])
#loc642 = loc(fused[#loc323, #loc324, #loc325, #loc316])
#loc643 = loc(fused[#loc327, #loc326])
#loc644 = loc(fused[#loc330, #loc331])
#loc645 = loc(fused[#loc333, #loc332])
#loc646 = loc(fused[#loc334, #loc335])
#loc647 = loc(fused[#loc337, #loc331])
#loc648 = loc(fused[#loc343, #loc342])
#loc649 = loc(fused[#loc353, #loc354])
#loc650 = loc(fused[#loc355, #loc356])
#loc651 = loc(fused[#loc359, #loc357])
#loc652 = loc(fused[#loc360, #loc361])
#loc653 = loc(fused[#loc369, #loc368])
#loc654 = loc(fused[#loc371, #loc372])
#loc655 = loc(fused[#loc375, #loc376])
#loc656 = loc(fused[#loc377, #loc378])
#loc657 = loc(fused[#loc379, #loc380])
#loc658 = loc(fused[#loc383, #loc384])
#loc659 = loc(fused[#loc382, #loc384])
#loc660 = loc(fused[#loc381, #loc380])
#loc661 = loc(fused[#loc385, #loc386])
#loc662 = loc(fused[#loc387, #loc388])
#loc663 = loc(fused[#loc389, #loc386])
#loc664 = loc(fused[#loc393, #loc394])
#loc665 = loc(fused[#loc396, #loc395])
#loc666 = loc(fused[#loc397, #loc398])
#loc667 = loc(fused[#loc400, #loc394])
#loc668 = loc(fused[#loc402, #loc401])
#loc669 = loc(fused[#loc406, #loc405])
#loc670 = loc(fused[#loc407, #loc408])
#loc671 = loc(fused[#loc409, #loc410])
#loc672 = loc(fused[#loc411, #loc412, #loc413, #loc408])
#loc673 = loc(fused[#loc415, #loc414])
#loc674 = loc(fused[#loc418, #loc419])
#loc675 = loc(fused[#loc421, #loc420])
#loc676 = loc(fused[#loc422, #loc423])
#loc677 = loc(fused[#loc425, #loc419])
#loc678 = loc(fused[#loc431, #loc430])
#loc679 = loc(fused[#loc441, #loc442])
#loc680 = loc(fused[#loc443, #loc444])
#loc681 = loc(fused[#loc447, #loc445])
#loc682 = loc(fused[#loc448, #loc449])
#loc683 = loc(fused[#loc453, #loc452])
#loc684 = loc(fused[#loc459, #loc460])
#loc685 = loc(fused[#loc463, #loc464])
#loc686 = loc(fused[#loc465, #loc466])
#loc687 = loc(fused[#loc467, #loc468])
#loc688 = loc(fused[#loc471, #loc472])
#loc689 = loc(fused[#loc470, #loc472])
#loc690 = loc(fused[#loc469, #loc468])
#loc691 = loc(fused[#loc473, #loc474])
#loc692 = loc(fused[#loc475, #loc476])
#loc693 = loc(fused[#loc477, #loc474])
#loc694 = loc(fused[#loc481, #loc482])
#loc695 = loc(fused[#loc484, #loc483])
#loc696 = loc(fused[#loc485, #loc486])
#loc697 = loc(fused[#loc488, #loc482])
#loc698 = loc(fused[#loc490, #loc489])
#loc699 = loc(fused[#loc494, #loc493])
#loc700 = loc(fused[#loc495, #loc496])
#loc701 = loc(fused[#loc497, #loc498])
#loc702 = loc(fused[#loc499, #loc500, #loc501, #loc496])
#loc703 = loc(fused[#loc503, #loc502])
#loc704 = loc(fused[#loc506, #loc507])
#loc705 = loc(fused[#loc509, #loc508])
#loc706 = loc(fused[#loc510, #loc511])
#loc707 = loc(fused[#loc513, #loc507])
#loc708 = loc(fused[#loc519, #loc518])
