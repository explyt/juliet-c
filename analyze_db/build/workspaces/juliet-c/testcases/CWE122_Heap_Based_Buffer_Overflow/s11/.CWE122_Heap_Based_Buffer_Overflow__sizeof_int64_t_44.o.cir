!s32i = !cir.int<s, 32>
!s64i = !cir.int<s, 64>
!u64i = !cir.int<u, 64>
!void = !cir.void
#fn_attr = #cir<extra({nothrow = #cir.nothrow})>
#fn_attr1 = #cir<extra({inline = #cir.inline<no>, nothrow = #cir.nothrow, optnone = #cir.optnone, uwtable = #cir.uwtable<async>})>
#loc7 = loc("CWE122_Heap_Based_Buffer_Overflow__sizeof_int64_t_44.c":21:21)
#loc8 = loc("CWE122_Heap_Based_Buffer_Overflow__sizeof_int64_t_44.c":21:31)
#loc51 = loc("CWE122_Heap_Based_Buffer_Overflow__sizeof_int64_t_44.c":49:25)
#loc52 = loc("CWE122_Heap_Based_Buffer_Overflow__sizeof_int64_t_44.c":49:35)
#loc88 = loc(fused[#loc7, #loc8])
#loc105 = loc(fused[#loc51, #loc52])
module @"/workspaces/juliet-c/testcases/CWE122_Heap_Based_Buffer_Overflow/s11/CWE122_Heap_Based_Buffer_Overflow__sizeof_int64_t_44.c" attributes {cir.lang = #cir.lang<c>, cir.sob = #cir.signed_overflow_behavior<undefined>, cir.triple = "x86_64-unknown-linux-gnu", cir.type_size_info = #cir.type_size_info<char = 8, int = 32, size_t = 64>, cir.uwtable = #cir.uwtable<async>, dlti.dl_spec = #dlti.dl_spec<f80 = dense<128> : vector<2xi64>, i128 = dense<128> : vector<2xi64>, i64 = dense<64> : vector<2xi64>, !llvm.ptr<272> = dense<64> : vector<4xi64>, !llvm.ptr<271> = dense<32> : vector<4xi64>, f128 = dense<128> : vector<2xi64>, f64 = dense<64> : vector<2xi64>, f16 = dense<16> : vector<2xi64>, i32 = dense<32> : vector<2xi64>, i16 = dense<16> : vector<2xi64>, i8 = dense<8> : vector<2xi64>, !llvm.ptr<270> = dense<32> : vector<4xi64>, !llvm.ptr = dense<64> : vector<4xi64>, i1 = dense<8> : vector<2xi64>, "dlti.endianness" = "little", "dlti.mangling_mode" = "e", "dlti.stack_alignment" = 128 : i64>} {
  cir.func private @printLongLongLine(!s64i) loc(#loc85)
  cir.func private @free(!cir.ptr<!void>) extra(#fn_attr) loc(#loc86)
  cir.func internal private @badSink(%arg0: !cir.ptr<!s64i> loc(fused[#loc7, #loc8])) extra(#fn_attr1) {
    %0 = cir.alloca !cir.ptr<!s64i>, !cir.ptr<!cir.ptr<!s64i>>, ["data", init] {alignment = 8 : i64} loc(#loc88)
    cir.store %arg0, %0 : !cir.ptr<!s64i>, !cir.ptr<!cir.ptr<!s64i>> loc(#loc9)
    %1 = cir.load deref %0 : !cir.ptr<!cir.ptr<!s64i>>, !cir.ptr<!s64i> loc(#loc10)
    %2 = cir.load %1 : !cir.ptr<!s64i>, !s64i loc(#loc11)
    cir.call @printLongLongLine(%2) : (!s64i) -> () loc(#loc12)
    %3 = cir.get_global @free : !cir.ptr<!cir.func<(!cir.ptr<!void>)>> loc(#loc13)
    %4 = cir.load %0 : !cir.ptr<!cir.ptr<!s64i>>, !cir.ptr<!s64i> loc(#loc14)
    %5 = cir.cast(bitcast, %4 : !cir.ptr<!s64i>), !cir.ptr<!void> loc(#loc14)
    cir.call @free(%5) : (!cir.ptr<!void>) -> () extra(#fn_attr) loc(#loc13)
    cir.return loc(#loc6)
  } loc(#loc87)
  cir.func private @malloc(!u64i) -> !cir.ptr<!void> extra(#fn_attr) loc(#loc89)
  cir.func private @exit(!s32i) extra(#fn_attr) loc(#loc90)
  cir.func no_proto @CWE122_Heap_Based_Buffer_Overflow__sizeof_int64_t_44_bad() extra(#fn_attr1) {
    %0 = cir.alloca !cir.ptr<!s64i>, !cir.ptr<!cir.ptr<!s64i>>, ["data"] {alignment = 8 : i64} loc(#loc92)
    %1 = cir.alloca !cir.ptr<!cir.func<(!cir.ptr<!s64i>)>>, !cir.ptr<!cir.ptr<!cir.func<(!cir.ptr<!s64i>)>>>, ["funcPtr", init] {alignment = 8 : i64} loc(#loc93)
    %2 = cir.get_global @badSink : !cir.ptr<!cir.func<(!cir.ptr<!s64i>)>> loc(#loc24)
    cir.store %2, %1 : !cir.ptr<!cir.func<(!cir.ptr<!s64i>)>>, !cir.ptr<!cir.ptr<!cir.func<(!cir.ptr<!s64i>)>>> loc(#loc93)
    %3 = cir.const #cir.ptr<null> : !cir.ptr<!s64i> loc(#loc25)
    cir.store %3, %0 : !cir.ptr<!s64i>, !cir.ptr<!cir.ptr<!s64i>> loc(#loc94)
    %4 = cir.get_global @malloc : !cir.ptr<!cir.func<(!u64i) -> !cir.ptr<!void>>> loc(#loc27)
    %5 = cir.const #cir.int<8> : !u64i loc(#loc95)
    %6 = cir.call @malloc(%5) : (!u64i) -> !cir.ptr<!void> extra(#fn_attr) loc(#loc27)
    %7 = cir.cast(bitcast, %6 : !cir.ptr<!void>), !cir.ptr<!s64i> loc(#loc96)
    cir.store %7, %0 : !cir.ptr<!s64i>, !cir.ptr<!cir.ptr<!s64i>> loc(#loc97)
    cir.scope {
      %12 = cir.load %0 : !cir.ptr<!cir.ptr<!s64i>>, !cir.ptr<!s64i> loc(#loc34)
      %13 = cir.const #cir.ptr<null> : !cir.ptr<!void> loc(#loc35)
      %14 = cir.cast(bitcast, %13 : !cir.ptr<!void>), !cir.ptr<!s64i> loc(#loc35)
      %15 = cir.cmp(eq, %12, %14) : !cir.ptr<!s64i>, !cir.bool loc(#loc99)
      cir.if %15 {
        %16 = cir.get_global @exit : !cir.ptr<!cir.func<(!s32i)>> loc(#loc37)
        %17 = cir.const #cir.int<1> : !s32i loc(#loc38)
        %18 = cir.unary(minus, %17) nsw : !s32i, !s32i loc(#loc39)
        cir.call @exit(%18) : (!s32i) -> () extra(#fn_attr) loc(#loc37)
      } loc(#loc100)
    } loc(#loc98)
    %8 = cir.const #cir.int<2147483643> : !s64i loc(#loc40)
    %9 = cir.load deref %0 : !cir.ptr<!cir.ptr<!s64i>>, !cir.ptr<!s64i> loc(#loc41)
    cir.store %8, %9 : !s64i, !cir.ptr<!s64i> loc(#loc101)
    %10 = cir.load %1 : !cir.ptr<!cir.ptr<!cir.func<(!cir.ptr<!s64i>)>>>, !cir.ptr<!cir.func<(!cir.ptr<!s64i>)>> loc(#loc43)
    %11 = cir.load %0 : !cir.ptr<!cir.ptr<!s64i>>, !cir.ptr<!s64i> loc(#loc44)
    cir.call %10(%11) : (!cir.ptr<!cir.func<(!cir.ptr<!s64i>)>>, !cir.ptr<!s64i>) -> () loc(#loc43)
    cir.return loc(#loc20)
  } loc(#loc91)
  cir.func no_proto @CWE122_Heap_Based_Buffer_Overflow__sizeof_int64_t_44_good() extra(#fn_attr1) {
    %0 = cir.get_global @goodG2B : !cir.ptr<!cir.func<()>> loc(#loc103)
    cir.call %0() : (!cir.ptr<!cir.func<()>>) -> () loc(#loc47)
    cir.return loc(#loc46)
  } loc(#loc102)
  cir.func internal private @goodG2BSink(%arg0: !cir.ptr<!s64i> loc(fused[#loc51, #loc52])) extra(#fn_attr1) {
    %0 = cir.alloca !cir.ptr<!s64i>, !cir.ptr<!cir.ptr<!s64i>>, ["data", init] {alignment = 8 : i64} loc(#loc105)
    cir.store %arg0, %0 : !cir.ptr<!s64i>, !cir.ptr<!cir.ptr<!s64i>> loc(#loc53)
    %1 = cir.load deref %0 : !cir.ptr<!cir.ptr<!s64i>>, !cir.ptr<!s64i> loc(#loc54)
    %2 = cir.load %1 : !cir.ptr<!s64i>, !s64i loc(#loc55)
    cir.call @printLongLongLine(%2) : (!s64i) -> () loc(#loc56)
    %3 = cir.get_global @free : !cir.ptr<!cir.func<(!cir.ptr<!void>)>> loc(#loc57)
    %4 = cir.load %0 : !cir.ptr<!cir.ptr<!s64i>>, !cir.ptr<!s64i> loc(#loc58)
    %5 = cir.cast(bitcast, %4 : !cir.ptr<!s64i>), !cir.ptr<!void> loc(#loc58)
    cir.call @free(%5) : (!cir.ptr<!void>) -> () extra(#fn_attr) loc(#loc57)
    cir.return loc(#loc50)
  } loc(#loc104)
  cir.func no_proto internal private @goodG2B() extra(#fn_attr1) {
    %0 = cir.alloca !cir.ptr<!s64i>, !cir.ptr<!cir.ptr<!s64i>>, ["data"] {alignment = 8 : i64} loc(#loc107)
    %1 = cir.alloca !cir.ptr<!cir.func<(!cir.ptr<!s64i>)>>, !cir.ptr<!cir.ptr<!cir.func<(!cir.ptr<!s64i>)>>>, ["funcPtr", init] {alignment = 8 : i64} loc(#loc108)
    %2 = cir.get_global @goodG2BSink : !cir.ptr<!cir.func<(!cir.ptr<!s64i>)>> loc(#loc64)
    cir.store %2, %1 : !cir.ptr<!cir.func<(!cir.ptr<!s64i>)>>, !cir.ptr<!cir.ptr<!cir.func<(!cir.ptr<!s64i>)>>> loc(#loc108)
    %3 = cir.const #cir.ptr<null> : !cir.ptr<!s64i> loc(#loc65)
    cir.store %3, %0 : !cir.ptr<!s64i>, !cir.ptr<!cir.ptr<!s64i>> loc(#loc109)
    %4 = cir.get_global @malloc : !cir.ptr<!cir.func<(!u64i) -> !cir.ptr<!void>>> loc(#loc67)
    %5 = cir.const #cir.int<8> : !u64i loc(#loc110)
    %6 = cir.call @malloc(%5) : (!u64i) -> !cir.ptr<!void> extra(#fn_attr) loc(#loc67)
    %7 = cir.cast(bitcast, %6 : !cir.ptr<!void>), !cir.ptr<!s64i> loc(#loc111)
    cir.store %7, %0 : !cir.ptr<!s64i>, !cir.ptr<!cir.ptr<!s64i>> loc(#loc112)
    cir.scope {
      %12 = cir.load %0 : !cir.ptr<!cir.ptr<!s64i>>, !cir.ptr<!s64i> loc(#loc74)
      %13 = cir.const #cir.ptr<null> : !cir.ptr<!void> loc(#loc75)
      %14 = cir.cast(bitcast, %13 : !cir.ptr<!void>), !cir.ptr<!s64i> loc(#loc75)
      %15 = cir.cmp(eq, %12, %14) : !cir.ptr<!s64i>, !cir.bool loc(#loc114)
      cir.if %15 {
        %16 = cir.get_global @exit : !cir.ptr<!cir.func<(!s32i)>> loc(#loc77)
        %17 = cir.const #cir.int<1> : !s32i loc(#loc78)
        %18 = cir.unary(minus, %17) nsw : !s32i, !s32i loc(#loc79)
        cir.call @exit(%18) : (!s32i) -> () extra(#fn_attr) loc(#loc77)
      } loc(#loc115)
    } loc(#loc113)
    %8 = cir.const #cir.int<2147483643> : !s64i loc(#loc80)
    %9 = cir.load deref %0 : !cir.ptr<!cir.ptr<!s64i>>, !cir.ptr<!s64i> loc(#loc81)
    cir.store %8, %9 : !s64i, !cir.ptr<!s64i> loc(#loc116)
    %10 = cir.load %1 : !cir.ptr<!cir.ptr<!cir.func<(!cir.ptr<!s64i>)>>>, !cir.ptr<!cir.func<(!cir.ptr<!s64i>)>> loc(#loc83)
    %11 = cir.load %0 : !cir.ptr<!cir.ptr<!s64i>>, !cir.ptr<!s64i> loc(#loc84)
    cir.call %10(%11) : (!cir.ptr<!cir.func<(!cir.ptr<!s64i>)>>, !cir.ptr<!s64i>) -> () loc(#loc83)
    cir.return loc(#loc60)
  } loc(#loc106)
} loc(#loc)
#loc = loc("/workspaces/juliet-c/testcases/CWE122_Heap_Based_Buffer_Overflow/s11/CWE122_Heap_Based_Buffer_Overflow__sizeof_int64_t_44.c":0:0)
#loc1 = loc("../../../testcasesupport/std_testcase_io.h":26:1)
#loc2 = loc("../../../testcasesupport/std_testcase_io.h":26:49)
#loc3 = loc("/usr/include/stdlib.h":687:1)
#loc4 = loc("/usr/include/stdlib.h":687:32)
#loc5 = loc("CWE122_Heap_Based_Buffer_Overflow__sizeof_int64_t_44.c":21:1)
#loc6 = loc("CWE122_Heap_Based_Buffer_Overflow__sizeof_int64_t_44.c":26:1)
#loc9 = loc("CWE122_Heap_Based_Buffer_Overflow__sizeof_int64_t_44.c":22:1)
#loc10 = loc("CWE122_Heap_Based_Buffer_Overflow__sizeof_int64_t_44.c":24:24)
#loc11 = loc("CWE122_Heap_Based_Buffer_Overflow__sizeof_int64_t_44.c":24:23)
#loc12 = loc("CWE122_Heap_Based_Buffer_Overflow__sizeof_int64_t_44.c":24:5)
#loc13 = loc("CWE122_Heap_Based_Buffer_Overflow__sizeof_int64_t_44.c":25:5)
#loc14 = loc("CWE122_Heap_Based_Buffer_Overflow__sizeof_int64_t_44.c":25:10)
#loc15 = loc("/usr/include/stdlib.h":672:1)
#loc16 = loc("/usr/include/stdlib.h":672:45)
#loc17 = loc("/usr/include/stdlib.h":756:1)
#loc18 = loc("/usr/include/stdlib.h":756:70)
#loc19 = loc("CWE122_Heap_Based_Buffer_Overflow__sizeof_int64_t_44.c":28:1)
#loc20 = loc("CWE122_Heap_Based_Buffer_Overflow__sizeof_int64_t_44.c":42:1)
#loc21 = loc("CWE122_Heap_Based_Buffer_Overflow__sizeof_int64_t_44.c":30:5)
#loc22 = loc("CWE122_Heap_Based_Buffer_Overflow__sizeof_int64_t_44.c":30:15)
#loc23 = loc("CWE122_Heap_Based_Buffer_Overflow__sizeof_int64_t_44.c":32:5)
#loc24 = loc("CWE122_Heap_Based_Buffer_Overflow__sizeof_int64_t_44.c":32:35)
#loc25 = loc("CWE122_Heap_Based_Buffer_Overflow__sizeof_int64_t_44.c":34:12)
#loc26 = loc("CWE122_Heap_Based_Buffer_Overflow__sizeof_int64_t_44.c":34:5)
#loc27 = loc("CWE122_Heap_Based_Buffer_Overflow__sizeof_int64_t_44.c":37:23)
#loc28 = loc("CWE122_Heap_Based_Buffer_Overflow__sizeof_int64_t_44.c":37:30)
#loc29 = loc("CWE122_Heap_Based_Buffer_Overflow__sizeof_int64_t_44.c":37:41)
#loc30 = loc("CWE122_Heap_Based_Buffer_Overflow__sizeof_int64_t_44.c":37:42)
#loc31 = loc("CWE122_Heap_Based_Buffer_Overflow__sizeof_int64_t_44.c":37:5)
#loc32 = loc("CWE122_Heap_Based_Buffer_Overflow__sizeof_int64_t_44.c":38:5)
#loc33 = loc("CWE122_Heap_Based_Buffer_Overflow__sizeof_int64_t_44.c":38:33)
#loc34 = loc("CWE122_Heap_Based_Buffer_Overflow__sizeof_int64_t_44.c":38:9)
#loc35 = loc("CWE122_Heap_Based_Buffer_Overflow__sizeof_int64_t_44.c":38:17)
#loc36 = loc("CWE122_Heap_Based_Buffer_Overflow__sizeof_int64_t_44.c":38:23)
#loc37 = loc("CWE122_Heap_Based_Buffer_Overflow__sizeof_int64_t_44.c":38:24)
#loc38 = loc("CWE122_Heap_Based_Buffer_Overflow__sizeof_int64_t_44.c":38:30)
#loc39 = loc("CWE122_Heap_Based_Buffer_Overflow__sizeof_int64_t_44.c":38:29)
#loc40 = loc("CWE122_Heap_Based_Buffer_Overflow__sizeof_int64_t_44.c":39:13)
#loc41 = loc("CWE122_Heap_Based_Buffer_Overflow__sizeof_int64_t_44.c":39:6)
#loc42 = loc("CWE122_Heap_Based_Buffer_Overflow__sizeof_int64_t_44.c":39:5)
#loc43 = loc("CWE122_Heap_Based_Buffer_Overflow__sizeof_int64_t_44.c":41:5)
#loc44 = loc("CWE122_Heap_Based_Buffer_Overflow__sizeof_int64_t_44.c":41:13)
#loc45 = loc("CWE122_Heap_Based_Buffer_Overflow__sizeof_int64_t_44.c":69:1)
#loc46 = loc("CWE122_Heap_Based_Buffer_Overflow__sizeof_int64_t_44.c":72:1)
#loc47 = loc("CWE122_Heap_Based_Buffer_Overflow__sizeof_int64_t_44.c":71:5)
#loc48 = loc("CWE122_Heap_Based_Buffer_Overflow__sizeof_int64_t_44.c":71:13)
#loc49 = loc("CWE122_Heap_Based_Buffer_Overflow__sizeof_int64_t_44.c":49:1)
#loc50 = loc("CWE122_Heap_Based_Buffer_Overflow__sizeof_int64_t_44.c":54:1)
#loc53 = loc("CWE122_Heap_Based_Buffer_Overflow__sizeof_int64_t_44.c":50:1)
#loc54 = loc("CWE122_Heap_Based_Buffer_Overflow__sizeof_int64_t_44.c":52:24)
#loc55 = loc("CWE122_Heap_Based_Buffer_Overflow__sizeof_int64_t_44.c":52:23)
#loc56 = loc("CWE122_Heap_Based_Buffer_Overflow__sizeof_int64_t_44.c":52:5)
#loc57 = loc("CWE122_Heap_Based_Buffer_Overflow__sizeof_int64_t_44.c":53:5)
#loc58 = loc("CWE122_Heap_Based_Buffer_Overflow__sizeof_int64_t_44.c":53:10)
#loc59 = loc("CWE122_Heap_Based_Buffer_Overflow__sizeof_int64_t_44.c":56:1)
#loc60 = loc("CWE122_Heap_Based_Buffer_Overflow__sizeof_int64_t_44.c":67:1)
#loc61 = loc("CWE122_Heap_Based_Buffer_Overflow__sizeof_int64_t_44.c":58:5)
#loc62 = loc("CWE122_Heap_Based_Buffer_Overflow__sizeof_int64_t_44.c":58:15)
#loc63 = loc("CWE122_Heap_Based_Buffer_Overflow__sizeof_int64_t_44.c":59:5)
#loc64 = loc("CWE122_Heap_Based_Buffer_Overflow__sizeof_int64_t_44.c":59:35)
#loc65 = loc("CWE122_Heap_Based_Buffer_Overflow__sizeof_int64_t_44.c":61:12)
#loc66 = loc("CWE122_Heap_Based_Buffer_Overflow__sizeof_int64_t_44.c":61:5)
#loc67 = loc("CWE122_Heap_Based_Buffer_Overflow__sizeof_int64_t_44.c":63:23)
#loc68 = loc("CWE122_Heap_Based_Buffer_Overflow__sizeof_int64_t_44.c":63:30)
#loc69 = loc("CWE122_Heap_Based_Buffer_Overflow__sizeof_int64_t_44.c":63:42)
#loc70 = loc("CWE122_Heap_Based_Buffer_Overflow__sizeof_int64_t_44.c":63:43)
#loc71 = loc("CWE122_Heap_Based_Buffer_Overflow__sizeof_int64_t_44.c":63:5)
#loc72 = loc("CWE122_Heap_Based_Buffer_Overflow__sizeof_int64_t_44.c":64:5)
#loc73 = loc("CWE122_Heap_Based_Buffer_Overflow__sizeof_int64_t_44.c":64:33)
#loc74 = loc("CWE122_Heap_Based_Buffer_Overflow__sizeof_int64_t_44.c":64:9)
#loc75 = loc("CWE122_Heap_Based_Buffer_Overflow__sizeof_int64_t_44.c":64:17)
#loc76 = loc("CWE122_Heap_Based_Buffer_Overflow__sizeof_int64_t_44.c":64:23)
#loc77 = loc("CWE122_Heap_Based_Buffer_Overflow__sizeof_int64_t_44.c":64:24)
#loc78 = loc("CWE122_Heap_Based_Buffer_Overflow__sizeof_int64_t_44.c":64:30)
#loc79 = loc("CWE122_Heap_Based_Buffer_Overflow__sizeof_int64_t_44.c":64:29)
#loc80 = loc("CWE122_Heap_Based_Buffer_Overflow__sizeof_int64_t_44.c":65:13)
#loc81 = loc("CWE122_Heap_Based_Buffer_Overflow__sizeof_int64_t_44.c":65:6)
#loc82 = loc("CWE122_Heap_Based_Buffer_Overflow__sizeof_int64_t_44.c":65:5)
#loc83 = loc("CWE122_Heap_Based_Buffer_Overflow__sizeof_int64_t_44.c":66:5)
#loc84 = loc("CWE122_Heap_Based_Buffer_Overflow__sizeof_int64_t_44.c":66:13)
#loc85 = loc(fused[#loc1, #loc2])
#loc86 = loc(fused[#loc3, #loc4])
#loc87 = loc(fused[#loc5, #loc6])
#loc89 = loc(fused[#loc15, #loc16])
#loc90 = loc(fused[#loc17, #loc18])
#loc91 = loc(fused[#loc19, #loc20])
#loc92 = loc(fused[#loc21, #loc22])
#loc93 = loc(fused[#loc23, #loc24])
#loc94 = loc(fused[#loc26, #loc25])
#loc95 = loc(fused[#loc28, #loc29])
#loc96 = loc(fused[#loc27, #loc30])
#loc97 = loc(fused[#loc31, #loc30])
#loc98 = loc(fused[#loc32, #loc33])
#loc99 = loc(fused[#loc34, #loc35])
#loc100 = loc(fused[#loc36, #loc33])
#loc101 = loc(fused[#loc42, #loc40])
#loc102 = loc(fused[#loc45, #loc46])
#loc103 = loc(fused[#loc47, #loc48])
#loc104 = loc(fused[#loc49, #loc50])
#loc106 = loc(fused[#loc59, #loc60])
#loc107 = loc(fused[#loc61, #loc62])
#loc108 = loc(fused[#loc63, #loc64])
#loc109 = loc(fused[#loc66, #loc65])
#loc110 = loc(fused[#loc68, #loc69])
#loc111 = loc(fused[#loc67, #loc70])
#loc112 = loc(fused[#loc71, #loc70])
#loc113 = loc(fused[#loc72, #loc73])
#loc114 = loc(fused[#loc74, #loc75])
#loc115 = loc(fused[#loc76, #loc73])
#loc116 = loc(fused[#loc82, #loc80])
