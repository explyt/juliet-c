!s32i = !cir.int<s, 32>
!s64i = !cir.int<s, 64>
!s8i = !cir.int<s, 8>
!ty__IO_codecvt = !cir.struct<struct "_IO_codecvt" incomplete>
!ty__IO_marker = !cir.struct<struct "_IO_marker" incomplete>
!ty__IO_wide_data = !cir.struct<struct "_IO_wide_data" incomplete>
!u16i = !cir.int<u, 16>
!u64i = !cir.int<u, 64>
!void = !cir.void
#fn_attr = #cir<extra({nothrow = #cir.nothrow})>
#fn_attr1 = #cir<extra({inline = #cir.inline<no>, nothrow = #cir.nothrow, optnone = #cir.optnone})>
!ty__IO_FILE = !cir.struct<struct "_IO_FILE" {!s32i, !cir.ptr<!s8i>, !cir.ptr<!s8i>, !cir.ptr<!s8i>, !cir.ptr<!s8i>, !cir.ptr<!s8i>, !cir.ptr<!s8i>, !cir.ptr<!s8i>, !cir.ptr<!s8i>, !cir.ptr<!s8i>, !cir.ptr<!s8i>, !cir.ptr<!s8i>, !cir.ptr<!ty__IO_marker>, !cir.ptr<!cir.struct<struct "_IO_FILE">>, !s32i, !s32i, !s64i, !u16i, !s8i, !cir.array<!s8i x 1>, !cir.ptr<!void>, !s64i, !cir.ptr<!ty__IO_codecvt>, !cir.ptr<!ty__IO_wide_data>, !cir.ptr<!cir.struct<struct "_IO_FILE">>, !cir.ptr<!void>, !u64i, !s32i, !cir.array<!s8i x 20>} #cir.record.decl.ast>
module @"/home/ladisgin/git_proj/test_projects/juliet-c/testcases/CWE190_Integer_Overflow/s02/CWE190_Integer_Overflow__int_fgets_add_08.c" attributes {cir.lang = #cir.lang<c>, cir.sob = #cir.signed_overflow_behavior<undefined>, cir.triple = "x86_64-unknown-linux-gnu", dlti.dl_spec = #dlti.dl_spec<#dlti.dl_entry<i32, dense<32> : vector<2xi64>>, #dlti.dl_entry<f64, dense<64> : vector<2xi64>>, #dlti.dl_entry<f16, dense<16> : vector<2xi64>>, #dlti.dl_entry<!llvm.ptr<271>, dense<32> : vector<4xi64>>, #dlti.dl_entry<!llvm.ptr<270>, dense<32> : vector<4xi64>>, #dlti.dl_entry<f128, dense<128> : vector<2xi64>>, #dlti.dl_entry<i64, dense<64> : vector<2xi64>>, #dlti.dl_entry<!llvm.ptr<272>, dense<64> : vector<4xi64>>, #dlti.dl_entry<i128, dense<128> : vector<2xi64>>, #dlti.dl_entry<f80, dense<128> : vector<2xi64>>, #dlti.dl_entry<!llvm.ptr, dense<64> : vector<4xi64>>, #dlti.dl_entry<i1, dense<8> : vector<2xi64>>, #dlti.dl_entry<i8, dense<8> : vector<2xi64>>, #dlti.dl_entry<i16, dense<16> : vector<2xi64>>, #dlti.dl_entry<"dlti.endianness", "little">, #dlti.dl_entry<"dlti.stack_alignment", 128 : i64>>, llvm.data_layout = "e-m:e-p270:32:32-p271:32:32-p272:64:64-i64:64-i128:128-f80:128-n8:16:32:64-S128"} {
  cir.func private  @fgets(!cir.ptr<!s8i>, !s32i, !cir.ptr<!ty__IO_FILE>) -> !cir.ptr<!s8i> loc(#loc235)
  cir.global "private"  external @stdin : !cir.ptr<!ty__IO_FILE> {alignment = 8 : i64} loc(#loc236)
  cir.func private  @atoi(!cir.ptr<!s8i>) -> !s32i extra(#fn_attr) loc(#loc237)
  cir.func private  @printLine(!cir.ptr<!s8i>) loc(#loc238)
  cir.global "private"  constant internal dsolocal @".str" = #cir.const_array<"fgets() failed.\00" : !cir.array<!s8i x 16>> : !cir.array<!s8i x 16> {alignment = 1 : i64} loc(#loc9)
  cir.func private  @printIntLine(!s32i) loc(#loc239)
  cir.func no_proto  @CWE190_Integer_Overflow__int_fgets_add_08_bad() extra(#fn_attr1) {
    %0 = cir.alloca !s32i, !cir.ptr<!s32i>, ["data"] {alignment = 4 : i64} loc(#loc241)
    %1 = cir.const #cir.int<0> : !s32i loc(#loc16)
    cir.store %1, %0 : !s32i, !cir.ptr<!s32i> loc(#loc242)
    cir.scope {
      %2 = cir.get_global @staticReturnsTrue : !cir.ptr<!cir.func<!s32i ()>> loc(#loc244)
      %3 = cir.call %2() : (!cir.ptr<!cir.func<!s32i ()>>) -> !s32i loc(#loc20)
      %4 = cir.cast(int_to_bool, %3 : !s32i), !cir.bool loc(#loc20)
      cir.if %4 {
        cir.scope {
          %5 = cir.alloca !cir.array<!s8i x 14>, !cir.ptr<!cir.array<!s8i x 14>>, ["inputBuffer"] {alignment = 1 : i64} loc(#loc247)
          %6 = cir.const #cir.zero : !cir.array<!s8i x 14> loc(#loc247)
          cir.store %6, %5 : !cir.array<!s8i x 14>, !cir.ptr<!cir.array<!s8i x 14>> loc(#loc247)
          cir.scope {
            %7 = cir.cast(array_to_ptrdecay, %5 : !cir.ptr<!cir.array<!s8i x 14>>), !cir.ptr<!s8i> loc(#loc29)
            %8 = cir.const #cir.int<3> : !s32i loc(#loc30)
            %9 = cir.cast(integral, %8 : !s32i), !u64i loc(#loc30)
            %10 = cir.const #cir.int<4> : !u64i loc(#loc30)
            %11 = cir.binop(mul, %9, %10) : !u64i loc(#loc30)
            %12 = cir.const #cir.int<2> : !s32i loc(#loc30)
            %13 = cir.cast(integral, %12 : !s32i), !u64i loc(#loc30)
            %14 = cir.binop(add, %11, %13) : !u64i loc(#loc30)
            %15 = cir.cast(integral, %14 : !u64i), !s32i loc(#loc30)
            %16 = cir.get_global @stdin : !cir.ptr<!cir.ptr<!ty__IO_FILE>> loc(#loc236)
            %17 = cir.load %16 : !cir.ptr<!cir.ptr<!ty__IO_FILE>>, !cir.ptr<!ty__IO_FILE> loc(#loc31)
            %18 = cir.call @fgets(%7, %15, %17) : (!cir.ptr<!s8i>, !s32i, !cir.ptr<!ty__IO_FILE>) -> !cir.ptr<!s8i> loc(#loc32)
            %19 = cir.const #cir.ptr<null> : !cir.ptr<!void> loc(#loc33)
            %20 = cir.cast(bitcast, %19 : !cir.ptr<!void>), !cir.ptr<!s8i> loc(#loc33)
            %21 = cir.cmp(ne, %18, %20) : !cir.ptr<!s8i>, !s32i loc(#loc249)
            %22 = cir.cast(int_to_bool, %21 : !s32i), !cir.bool loc(#loc34)
            cir.if %22 {
              %23 = cir.cast(array_to_ptrdecay, %5 : !cir.ptr<!cir.array<!s8i x 14>>), !cir.ptr<!s8i> loc(#loc38)
              %24 = cir.call @atoi(%23) : (!cir.ptr<!s8i>) -> !s32i extra(#fn_attr) loc(#loc39)
              cir.store %24, %0 : !s32i, !cir.ptr<!s32i> loc(#loc251)
            } else {
              %23 = cir.get_global @".str" : !cir.ptr<!cir.array<!s8i x 16>> loc(#loc9)
              %24 = cir.cast(array_to_ptrdecay, %23 : !cir.ptr<!cir.array<!s8i x 16>>), !cir.ptr<!s8i> loc(#loc9)
              cir.call @printLine(%24) : (!cir.ptr<!s8i>) -> () loc(#loc42)
            } loc(#loc250)
          } loc(#loc248)
        } loc(#loc246)
      } loc(#loc245)
    } loc(#loc243)
    cir.scope {
      %2 = cir.get_global @staticReturnsTrue : !cir.ptr<!cir.func<!s32i ()>> loc(#loc253)
      %3 = cir.call %2() : (!cir.ptr<!cir.func<!s32i ()>>) -> !s32i loc(#loc45)
      %4 = cir.cast(int_to_bool, %3 : !s32i), !cir.bool loc(#loc45)
      cir.if %4 {
        cir.scope {
          %5 = cir.alloca !s32i, !cir.ptr<!s32i>, ["result", init] {alignment = 4 : i64} loc(#loc256)
          %6 = cir.load %0 : !cir.ptr<!s32i>, !s32i loc(#loc52)
          %7 = cir.const #cir.int<1> : !s32i loc(#loc51)
          %8 = cir.binop(add, %6, %7) nsw : !s32i loc(#loc52)
          cir.store %8, %5 : !s32i, !cir.ptr<!s32i> loc(#loc256)
          %9 = cir.load %5 : !cir.ptr<!s32i>, !s32i loc(#loc53)
          cir.call @printIntLine(%9) : (!s32i) -> () loc(#loc54)
        } loc(#loc255)
      } loc(#loc254)
    } loc(#loc252)
    cir.return loc(#loc13)
  } loc(#loc240)
  cir.func no_proto  @CWE190_Integer_Overflow__int_fgets_add_08_good() extra(#fn_attr1) {
    %0 = cir.get_global @goodB2G1 : !cir.ptr<!cir.func<!void ()>> loc(#loc258)
    cir.call %0() : (!cir.ptr<!cir.func<!void ()>>) -> () loc(#loc57)
    %1 = cir.get_global @goodB2G2 : !cir.ptr<!cir.func<!void ()>> loc(#loc259)
    cir.call %1() : (!cir.ptr<!cir.func<!void ()>>) -> () loc(#loc59)
    %2 = cir.get_global @goodG2B1 : !cir.ptr<!cir.func<!void ()>> loc(#loc260)
    cir.call %2() : (!cir.ptr<!cir.func<!void ()>>) -> () loc(#loc61)
    %3 = cir.get_global @goodG2B2 : !cir.ptr<!cir.func<!void ()>> loc(#loc261)
    cir.call %3() : (!cir.ptr<!cir.func<!void ()>>) -> () loc(#loc63)
    cir.return loc(#loc56)
  } loc(#loc257)
  cir.func no_proto internal private  @staticReturnsTrue() -> !s32i extra(#fn_attr1) {
    %0 = cir.alloca !s32i, !cir.ptr<!s32i>, ["__retval"] {alignment = 4 : i64} loc(#loc66)
    %1 = cir.const #cir.int<1> : !s32i loc(#loc67)
    cir.store %1, %0 : !s32i, !cir.ptr<!s32i> loc(#loc263)
    %2 = cir.load %0 : !cir.ptr<!s32i>, !s32i loc(#loc263)
    cir.return %2 : !s32i loc(#loc263)
  } loc(#loc262)
  cir.global "private"  constant internal dsolocal @".str1" = #cir.const_array<"Benign, fixed string\00" : !cir.array<!s8i x 21>> : !cir.array<!s8i x 21> {alignment = 1 : i64} loc(#loc69)
  cir.global "private"  constant internal dsolocal @".str2" = #cir.const_array<"data value is too large to perform arithmetic safely.\00" : !cir.array<!s8i x 54>> : !cir.array<!s8i x 54> {alignment = 1 : i64} loc(#loc70)
  cir.func no_proto internal private  @goodB2G1() extra(#fn_attr1) {
    %0 = cir.alloca !s32i, !cir.ptr<!s32i>, ["data"] {alignment = 4 : i64} loc(#loc265)
    %1 = cir.const #cir.int<0> : !s32i loc(#loc75)
    cir.store %1, %0 : !s32i, !cir.ptr<!s32i> loc(#loc266)
    cir.scope {
      %2 = cir.get_global @staticReturnsTrue : !cir.ptr<!cir.func<!s32i ()>> loc(#loc268)
      %3 = cir.call @staticReturnsTrue() : () -> !s32i loc(#loc79)
      %4 = cir.cast(int_to_bool, %3 : !s32i), !cir.bool loc(#loc79)
      cir.if %4 {
        cir.scope {
          %5 = cir.alloca !cir.array<!s8i x 14>, !cir.ptr<!cir.array<!s8i x 14>>, ["inputBuffer"] {alignment = 1 : i64} loc(#loc271)
          %6 = cir.const #cir.zero : !cir.array<!s8i x 14> loc(#loc271)
          cir.store %6, %5 : !cir.array<!s8i x 14>, !cir.ptr<!cir.array<!s8i x 14>> loc(#loc271)
          cir.scope {
            %7 = cir.cast(array_to_ptrdecay, %5 : !cir.ptr<!cir.array<!s8i x 14>>), !cir.ptr<!s8i> loc(#loc88)
            %8 = cir.const #cir.int<3> : !s32i loc(#loc89)
            %9 = cir.cast(integral, %8 : !s32i), !u64i loc(#loc89)
            %10 = cir.const #cir.int<4> : !u64i loc(#loc89)
            %11 = cir.binop(mul, %9, %10) : !u64i loc(#loc89)
            %12 = cir.const #cir.int<2> : !s32i loc(#loc89)
            %13 = cir.cast(integral, %12 : !s32i), !u64i loc(#loc89)
            %14 = cir.binop(add, %11, %13) : !u64i loc(#loc89)
            %15 = cir.cast(integral, %14 : !u64i), !s32i loc(#loc89)
            %16 = cir.get_global @stdin : !cir.ptr<!cir.ptr<!ty__IO_FILE>> loc(#loc236)
            %17 = cir.load %16 : !cir.ptr<!cir.ptr<!ty__IO_FILE>>, !cir.ptr<!ty__IO_FILE> loc(#loc90)
            %18 = cir.call @fgets(%7, %15, %17) : (!cir.ptr<!s8i>, !s32i, !cir.ptr<!ty__IO_FILE>) -> !cir.ptr<!s8i> loc(#loc91)
            %19 = cir.const #cir.ptr<null> : !cir.ptr<!void> loc(#loc92)
            %20 = cir.cast(bitcast, %19 : !cir.ptr<!void>), !cir.ptr<!s8i> loc(#loc92)
            %21 = cir.cmp(ne, %18, %20) : !cir.ptr<!s8i>, !s32i loc(#loc273)
            %22 = cir.cast(int_to_bool, %21 : !s32i), !cir.bool loc(#loc93)
            cir.if %22 {
              %23 = cir.cast(array_to_ptrdecay, %5 : !cir.ptr<!cir.array<!s8i x 14>>), !cir.ptr<!s8i> loc(#loc97)
              %24 = cir.call @atoi(%23) : (!cir.ptr<!s8i>) -> !s32i extra(#fn_attr) loc(#loc98)
              cir.store %24, %0 : !s32i, !cir.ptr<!s32i> loc(#loc275)
            } else {
              %23 = cir.get_global @".str" : !cir.ptr<!cir.array<!s8i x 16>> loc(#loc101)
              %24 = cir.cast(array_to_ptrdecay, %23 : !cir.ptr<!cir.array<!s8i x 16>>), !cir.ptr<!s8i> loc(#loc101)
              cir.call @printLine(%24) : (!cir.ptr<!s8i>) -> () loc(#loc102)
            } loc(#loc274)
          } loc(#loc272)
        } loc(#loc270)
      } loc(#loc269)
    } loc(#loc267)
    cir.scope {
      %2 = cir.get_global @staticReturnsFalse : !cir.ptr<!cir.func<!s32i ()>> loc(#loc277)
      %3 = cir.call %2() : (!cir.ptr<!cir.func<!s32i ()>>) -> !s32i loc(#loc105)
      %4 = cir.cast(int_to_bool, %3 : !s32i), !cir.bool loc(#loc105)
      cir.if %4 {
        %5 = cir.get_global @".str1" : !cir.ptr<!cir.array<!s8i x 21>> loc(#loc69)
        %6 = cir.cast(array_to_ptrdecay, %5 : !cir.ptr<!cir.array<!s8i x 21>>), !cir.ptr<!s8i> loc(#loc69)
        cir.call @printLine(%6) : (!cir.ptr<!s8i>) -> () loc(#loc110)
      } else {
        cir.scope {
          %5 = cir.load %0 : !cir.ptr<!s32i>, !s32i loc(#loc113)
          %6 = cir.const #cir.int<2147483647> : !s32i loc(#loc114)
          %7 = cir.cmp(lt, %5, %6) : !s32i, !s32i loc(#loc280)
          %8 = cir.cast(int_to_bool, %7 : !s32i), !cir.bool loc(#loc115)
          cir.if %8 {
            %9 = cir.alloca !s32i, !cir.ptr<!s32i>, ["result", init] {alignment = 4 : i64} loc(#loc282)
            %10 = cir.load %0 : !cir.ptr<!s32i>, !s32i loc(#loc121)
            %11 = cir.const #cir.int<1> : !s32i loc(#loc120)
            %12 = cir.binop(add, %10, %11) nsw : !s32i loc(#loc121)
            cir.store %12, %9 : !s32i, !cir.ptr<!s32i> loc(#loc282)
            %13 = cir.load %9 : !cir.ptr<!s32i>, !s32i loc(#loc122)
            cir.call @printIntLine(%13) : (!s32i) -> () loc(#loc123)
          } else {
            %9 = cir.get_global @".str2" : !cir.ptr<!cir.array<!s8i x 54>> loc(#loc70)
            %10 = cir.cast(array_to_ptrdecay, %9 : !cir.ptr<!cir.array<!s8i x 54>>), !cir.ptr<!s8i> loc(#loc70)
            cir.call @printLine(%10) : (!cir.ptr<!s8i>) -> () loc(#loc124)
          } loc(#loc281)
        } loc(#loc279)
      } loc(#loc278)
    } loc(#loc276)
    cir.return loc(#loc72)
  } loc(#loc264)
  cir.func no_proto internal private  @staticReturnsFalse() -> !s32i extra(#fn_attr1) {
    %0 = cir.alloca !s32i, !cir.ptr<!s32i>, ["__retval"] {alignment = 4 : i64} loc(#loc126)
    %1 = cir.const #cir.int<0> : !s32i loc(#loc127)
    cir.store %1, %0 : !s32i, !cir.ptr<!s32i> loc(#loc284)
    %2 = cir.load %0 : !cir.ptr<!s32i>, !s32i loc(#loc284)
    cir.return %2 : !s32i loc(#loc284)
  } loc(#loc283)
  cir.func no_proto internal private  @goodB2G2() extra(#fn_attr1) {
    %0 = cir.alloca !s32i, !cir.ptr<!s32i>, ["data"] {alignment = 4 : i64} loc(#loc286)
    %1 = cir.const #cir.int<0> : !s32i loc(#loc133)
    cir.store %1, %0 : !s32i, !cir.ptr<!s32i> loc(#loc287)
    cir.scope {
      %2 = cir.get_global @staticReturnsTrue : !cir.ptr<!cir.func<!s32i ()>> loc(#loc289)
      %3 = cir.call @staticReturnsTrue() : () -> !s32i loc(#loc137)
      %4 = cir.cast(int_to_bool, %3 : !s32i), !cir.bool loc(#loc137)
      cir.if %4 {
        cir.scope {
          %5 = cir.alloca !cir.array<!s8i x 14>, !cir.ptr<!cir.array<!s8i x 14>>, ["inputBuffer"] {alignment = 1 : i64} loc(#loc292)
          %6 = cir.const #cir.zero : !cir.array<!s8i x 14> loc(#loc292)
          cir.store %6, %5 : !cir.array<!s8i x 14>, !cir.ptr<!cir.array<!s8i x 14>> loc(#loc292)
          cir.scope {
            %7 = cir.cast(array_to_ptrdecay, %5 : !cir.ptr<!cir.array<!s8i x 14>>), !cir.ptr<!s8i> loc(#loc146)
            %8 = cir.const #cir.int<3> : !s32i loc(#loc147)
            %9 = cir.cast(integral, %8 : !s32i), !u64i loc(#loc147)
            %10 = cir.const #cir.int<4> : !u64i loc(#loc147)
            %11 = cir.binop(mul, %9, %10) : !u64i loc(#loc147)
            %12 = cir.const #cir.int<2> : !s32i loc(#loc147)
            %13 = cir.cast(integral, %12 : !s32i), !u64i loc(#loc147)
            %14 = cir.binop(add, %11, %13) : !u64i loc(#loc147)
            %15 = cir.cast(integral, %14 : !u64i), !s32i loc(#loc147)
            %16 = cir.get_global @stdin : !cir.ptr<!cir.ptr<!ty__IO_FILE>> loc(#loc236)
            %17 = cir.load %16 : !cir.ptr<!cir.ptr<!ty__IO_FILE>>, !cir.ptr<!ty__IO_FILE> loc(#loc148)
            %18 = cir.call @fgets(%7, %15, %17) : (!cir.ptr<!s8i>, !s32i, !cir.ptr<!ty__IO_FILE>) -> !cir.ptr<!s8i> loc(#loc149)
            %19 = cir.const #cir.ptr<null> : !cir.ptr<!void> loc(#loc150)
            %20 = cir.cast(bitcast, %19 : !cir.ptr<!void>), !cir.ptr<!s8i> loc(#loc150)
            %21 = cir.cmp(ne, %18, %20) : !cir.ptr<!s8i>, !s32i loc(#loc294)
            %22 = cir.cast(int_to_bool, %21 : !s32i), !cir.bool loc(#loc151)
            cir.if %22 {
              %23 = cir.cast(array_to_ptrdecay, %5 : !cir.ptr<!cir.array<!s8i x 14>>), !cir.ptr<!s8i> loc(#loc155)
              %24 = cir.call @atoi(%23) : (!cir.ptr<!s8i>) -> !s32i extra(#fn_attr) loc(#loc156)
              cir.store %24, %0 : !s32i, !cir.ptr<!s32i> loc(#loc296)
            } else {
              %23 = cir.get_global @".str" : !cir.ptr<!cir.array<!s8i x 16>> loc(#loc159)
              %24 = cir.cast(array_to_ptrdecay, %23 : !cir.ptr<!cir.array<!s8i x 16>>), !cir.ptr<!s8i> loc(#loc159)
              cir.call @printLine(%24) : (!cir.ptr<!s8i>) -> () loc(#loc160)
            } loc(#loc295)
          } loc(#loc293)
        } loc(#loc291)
      } loc(#loc290)
    } loc(#loc288)
    cir.scope {
      %2 = cir.get_global @staticReturnsTrue : !cir.ptr<!cir.func<!s32i ()>> loc(#loc298)
      %3 = cir.call @staticReturnsTrue() : () -> !s32i loc(#loc163)
      %4 = cir.cast(int_to_bool, %3 : !s32i), !cir.bool loc(#loc163)
      cir.if %4 {
        cir.scope {
          %5 = cir.load %0 : !cir.ptr<!s32i>, !s32i loc(#loc168)
          %6 = cir.const #cir.int<2147483647> : !s32i loc(#loc169)
          %7 = cir.cmp(lt, %5, %6) : !s32i, !s32i loc(#loc301)
          %8 = cir.cast(int_to_bool, %7 : !s32i), !cir.bool loc(#loc170)
          cir.if %8 {
            %9 = cir.alloca !s32i, !cir.ptr<!s32i>, ["result", init] {alignment = 4 : i64} loc(#loc303)
            %10 = cir.load %0 : !cir.ptr<!s32i>, !s32i loc(#loc176)
            %11 = cir.const #cir.int<1> : !s32i loc(#loc175)
            %12 = cir.binop(add, %10, %11) nsw : !s32i loc(#loc176)
            cir.store %12, %9 : !s32i, !cir.ptr<!s32i> loc(#loc303)
            %13 = cir.load %9 : !cir.ptr<!s32i>, !s32i loc(#loc177)
            cir.call @printIntLine(%13) : (!s32i) -> () loc(#loc178)
          } else {
            %9 = cir.get_global @".str2" : !cir.ptr<!cir.array<!s8i x 54>> loc(#loc179)
            %10 = cir.cast(array_to_ptrdecay, %9 : !cir.ptr<!cir.array<!s8i x 54>>), !cir.ptr<!s8i> loc(#loc179)
            cir.call @printLine(%10) : (!cir.ptr<!s8i>) -> () loc(#loc180)
          } loc(#loc302)
        } loc(#loc300)
      } loc(#loc299)
    } loc(#loc297)
    cir.return loc(#loc130)
  } loc(#loc285)
  cir.func no_proto internal private  @goodG2B1() extra(#fn_attr1) {
    %0 = cir.alloca !s32i, !cir.ptr<!s32i>, ["data"] {alignment = 4 : i64} loc(#loc305)
    %1 = cir.const #cir.int<0> : !s32i loc(#loc185)
    cir.store %1, %0 : !s32i, !cir.ptr<!s32i> loc(#loc306)
    cir.scope {
      %2 = cir.get_global @staticReturnsFalse : !cir.ptr<!cir.func<!s32i ()>> loc(#loc308)
      %3 = cir.call @staticReturnsFalse() : () -> !s32i loc(#loc189)
      %4 = cir.cast(int_to_bool, %3 : !s32i), !cir.bool loc(#loc189)
      cir.if %4 {
        %5 = cir.get_global @".str1" : !cir.ptr<!cir.array<!s8i x 21>> loc(#loc194)
        %6 = cir.cast(array_to_ptrdecay, %5 : !cir.ptr<!cir.array<!s8i x 21>>), !cir.ptr<!s8i> loc(#loc194)
        cir.call @printLine(%6) : (!cir.ptr<!s8i>) -> () loc(#loc195)
      } else {
        %5 = cir.const #cir.int<2> : !s32i loc(#loc196)
        cir.store %5, %0 : !s32i, !cir.ptr<!s32i> loc(#loc310)
      } loc(#loc309)
    } loc(#loc307)
    cir.scope {
      %2 = cir.get_global @staticReturnsTrue : !cir.ptr<!cir.func<!s32i ()>> loc(#loc312)
      %3 = cir.call @staticReturnsTrue() : () -> !s32i loc(#loc200)
      %4 = cir.cast(int_to_bool, %3 : !s32i), !cir.bool loc(#loc200)
      cir.if %4 {
        cir.scope {
          %5 = cir.alloca !s32i, !cir.ptr<!s32i>, ["result", init] {alignment = 4 : i64} loc(#loc315)
          %6 = cir.load %0 : !cir.ptr<!s32i>, !s32i loc(#loc207)
          %7 = cir.const #cir.int<1> : !s32i loc(#loc206)
          %8 = cir.binop(add, %6, %7) nsw : !s32i loc(#loc207)
          cir.store %8, %5 : !s32i, !cir.ptr<!s32i> loc(#loc315)
          %9 = cir.load %5 : !cir.ptr<!s32i>, !s32i loc(#loc208)
          cir.call @printIntLine(%9) : (!s32i) -> () loc(#loc209)
        } loc(#loc314)
      } loc(#loc313)
    } loc(#loc311)
    cir.return loc(#loc182)
  } loc(#loc304)
  cir.func no_proto internal private  @goodG2B2() extra(#fn_attr1) {
    %0 = cir.alloca !s32i, !cir.ptr<!s32i>, ["data"] {alignment = 4 : i64} loc(#loc317)
    %1 = cir.const #cir.int<0> : !s32i loc(#loc214)
    cir.store %1, %0 : !s32i, !cir.ptr<!s32i> loc(#loc318)
    cir.scope {
      %2 = cir.get_global @staticReturnsTrue : !cir.ptr<!cir.func<!s32i ()>> loc(#loc320)
      %3 = cir.call @staticReturnsTrue() : () -> !s32i loc(#loc218)
      %4 = cir.cast(int_to_bool, %3 : !s32i), !cir.bool loc(#loc218)
      cir.if %4 {
        %5 = cir.const #cir.int<2> : !s32i loc(#loc221)
        cir.store %5, %0 : !s32i, !cir.ptr<!s32i> loc(#loc322)
      } loc(#loc321)
    } loc(#loc319)
    cir.scope {
      %2 = cir.get_global @staticReturnsTrue : !cir.ptr<!cir.func<!s32i ()>> loc(#loc324)
      %3 = cir.call @staticReturnsTrue() : () -> !s32i loc(#loc225)
      %4 = cir.cast(int_to_bool, %3 : !s32i), !cir.bool loc(#loc225)
      cir.if %4 {
        cir.scope {
          %5 = cir.alloca !s32i, !cir.ptr<!s32i>, ["result", init] {alignment = 4 : i64} loc(#loc327)
          %6 = cir.load %0 : !cir.ptr<!s32i>, !s32i loc(#loc232)
          %7 = cir.const #cir.int<1> : !s32i loc(#loc231)
          %8 = cir.binop(add, %6, %7) nsw : !s32i loc(#loc232)
          cir.store %8, %5 : !s32i, !cir.ptr<!s32i> loc(#loc327)
          %9 = cir.load %5 : !cir.ptr<!s32i>, !s32i loc(#loc233)
          cir.call @printIntLine(%9) : (!s32i) -> () loc(#loc234)
        } loc(#loc326)
      } loc(#loc325)
    } loc(#loc323)
    cir.return loc(#loc211)
  } loc(#loc316)
} loc(#loc)
#loc = loc("/home/ladisgin/git_proj/test_projects/juliet-c/testcases/CWE190_Integer_Overflow/s02/CWE190_Integer_Overflow__int_fgets_add_08.c":0:0)
#loc1 = loc("/usr/include/stdio.h":654:1)
#loc2 = loc("/usr/include/stdio.h":655:59)
#loc3 = loc("/usr/include/stdio.h":149:1)
#loc4 = loc("/usr/include/stdio.h":149:14)
#loc5 = loc("/usr/include/stdlib.h":105:1)
#loc6 = loc("/usr/include/stdlib.h":106:33)
#loc7 = loc("../../../testcasesupport/std_testcase_io.h":14:1)
#loc8 = loc("../../../testcasesupport/std_testcase_io.h":14:33)
#loc9 = loc("CWE190_Integer_Overflow__int_fgets_add_08.c":54:27)
#loc10 = loc("../../../testcasesupport/std_testcase_io.h":18:1)
#loc11 = loc("../../../testcasesupport/std_testcase_io.h":18:33)
#loc12 = loc("CWE190_Integer_Overflow__int_fgets_add_08.c":37:1)
#loc13 = loc("CWE190_Integer_Overflow__int_fgets_add_08.c":66:1)
#loc14 = loc("CWE190_Integer_Overflow__int_fgets_add_08.c":39:5)
#loc15 = loc("CWE190_Integer_Overflow__int_fgets_add_08.c":39:9)
#loc16 = loc("CWE190_Integer_Overflow__int_fgets_add_08.c":41:12)
#loc17 = loc("CWE190_Integer_Overflow__int_fgets_add_08.c":41:5)
#loc18 = loc("CWE190_Integer_Overflow__int_fgets_add_08.c":42:5)
#loc19 = loc("CWE190_Integer_Overflow__int_fgets_add_08.c":57:5)
#loc20 = loc("CWE190_Integer_Overflow__int_fgets_add_08.c":42:8)
#loc21 = loc("CWE190_Integer_Overflow__int_fgets_add_08.c":42:26)
#loc22 = loc("CWE190_Integer_Overflow__int_fgets_add_08.c":43:5)
#loc23 = loc("CWE190_Integer_Overflow__int_fgets_add_08.c":44:9)
#loc24 = loc("CWE190_Integer_Overflow__int_fgets_add_08.c":56:9)
#loc25 = loc("CWE190_Integer_Overflow__int_fgets_add_08.c":45:13)
#loc26 = loc("CWE190_Integer_Overflow__int_fgets_add_08.c":45:49)
#loc27 = loc("CWE190_Integer_Overflow__int_fgets_add_08.c":47:13)
#loc28 = loc("CWE190_Integer_Overflow__int_fgets_add_08.c":55:13)
#loc29 = loc("CWE190_Integer_Overflow__int_fgets_add_08.c":47:23)
#loc30 = loc("CWE190_Integer_Overflow__int_fgets_add_08.c":47:36)
#loc31 = loc("CWE190_Integer_Overflow__int_fgets_add_08.c":47:53)
#loc32 = loc("CWE190_Integer_Overflow__int_fgets_add_08.c":47:17)
#loc33 = loc("CWE190_Integer_Overflow__int_fgets_add_08.c":47:63)
#loc34 = loc("CWE190_Integer_Overflow__int_fgets_add_08.c":47:60)
#loc35 = loc("CWE190_Integer_Overflow__int_fgets_add_08.c":48:13)
#loc36 = loc("CWE190_Integer_Overflow__int_fgets_add_08.c":51:13)
#loc37 = loc("CWE190_Integer_Overflow__int_fgets_add_08.c":53:13)
#loc38 = loc("CWE190_Integer_Overflow__int_fgets_add_08.c":50:29)
#loc39 = loc("CWE190_Integer_Overflow__int_fgets_add_08.c":50:24)
#loc40 = loc("CWE190_Integer_Overflow__int_fgets_add_08.c":50:17)
#loc41 = loc("CWE190_Integer_Overflow__int_fgets_add_08.c":50:40)
#loc42 = loc("CWE190_Integer_Overflow__int_fgets_add_08.c":54:17)
#loc43 = loc("CWE190_Integer_Overflow__int_fgets_add_08.c":58:5)
#loc44 = loc("CWE190_Integer_Overflow__int_fgets_add_08.c":65:5)
#loc45 = loc("CWE190_Integer_Overflow__int_fgets_add_08.c":58:8)
#loc46 = loc("CWE190_Integer_Overflow__int_fgets_add_08.c":58:26)
#loc47 = loc("CWE190_Integer_Overflow__int_fgets_add_08.c":59:5)
#loc48 = loc("CWE190_Integer_Overflow__int_fgets_add_08.c":60:9)
#loc49 = loc("CWE190_Integer_Overflow__int_fgets_add_08.c":64:9)
#loc50 = loc("CWE190_Integer_Overflow__int_fgets_add_08.c":62:13)
#loc51 = loc("CWE190_Integer_Overflow__int_fgets_add_08.c":62:33)
#loc52 = loc("CWE190_Integer_Overflow__int_fgets_add_08.c":62:26)
#loc53 = loc("CWE190_Integer_Overflow__int_fgets_add_08.c":63:26)
#loc54 = loc("CWE190_Integer_Overflow__int_fgets_add_08.c":63:13)
#loc55 = loc("CWE190_Integer_Overflow__int_fgets_add_08.c":198:1)
#loc56 = loc("CWE190_Integer_Overflow__int_fgets_add_08.c":204:1)
#loc57 = loc("CWE190_Integer_Overflow__int_fgets_add_08.c":200:5)
#loc58 = loc("CWE190_Integer_Overflow__int_fgets_add_08.c":200:14)
#loc59 = loc("CWE190_Integer_Overflow__int_fgets_add_08.c":201:5)
#loc60 = loc("CWE190_Integer_Overflow__int_fgets_add_08.c":201:14)
#loc61 = loc("CWE190_Integer_Overflow__int_fgets_add_08.c":202:5)
#loc62 = loc("CWE190_Integer_Overflow__int_fgets_add_08.c":202:14)
#loc63 = loc("CWE190_Integer_Overflow__int_fgets_add_08.c":203:5)
#loc64 = loc("CWE190_Integer_Overflow__int_fgets_add_08.c":203:14)
#loc65 = loc("CWE190_Integer_Overflow__int_fgets_add_08.c":25:1)
#loc66 = loc("CWE190_Integer_Overflow__int_fgets_add_08.c":28:1)
#loc67 = loc("CWE190_Integer_Overflow__int_fgets_add_08.c":27:12)
#loc68 = loc("CWE190_Integer_Overflow__int_fgets_add_08.c":27:5)
#loc69 = loc("CWE190_Integer_Overflow__int_fgets_add_08.c":97:19)
#loc70 = loc("CWE190_Integer_Overflow__int_fgets_add_08.c":109:23)
#loc71 = loc("CWE190_Integer_Overflow__int_fgets_add_08.c":73:1)
#loc72 = loc("CWE190_Integer_Overflow__int_fgets_add_08.c":112:1)
#loc73 = loc("CWE190_Integer_Overflow__int_fgets_add_08.c":75:5)
#loc74 = loc("CWE190_Integer_Overflow__int_fgets_add_08.c":75:9)
#loc75 = loc("CWE190_Integer_Overflow__int_fgets_add_08.c":77:12)
#loc76 = loc("CWE190_Integer_Overflow__int_fgets_add_08.c":77:5)
#loc77 = loc("CWE190_Integer_Overflow__int_fgets_add_08.c":78:5)
#loc78 = loc("CWE190_Integer_Overflow__int_fgets_add_08.c":93:5)
#loc79 = loc("CWE190_Integer_Overflow__int_fgets_add_08.c":78:8)
#loc80 = loc("CWE190_Integer_Overflow__int_fgets_add_08.c":78:26)
#loc81 = loc("CWE190_Integer_Overflow__int_fgets_add_08.c":79:5)
#loc82 = loc("CWE190_Integer_Overflow__int_fgets_add_08.c":80:9)
#loc83 = loc("CWE190_Integer_Overflow__int_fgets_add_08.c":92:9)
#loc84 = loc("CWE190_Integer_Overflow__int_fgets_add_08.c":81:13)
#loc85 = loc("CWE190_Integer_Overflow__int_fgets_add_08.c":81:49)
#loc86 = loc("CWE190_Integer_Overflow__int_fgets_add_08.c":83:13)
#loc87 = loc("CWE190_Integer_Overflow__int_fgets_add_08.c":91:13)
#loc88 = loc("CWE190_Integer_Overflow__int_fgets_add_08.c":83:23)
#loc89 = loc("CWE190_Integer_Overflow__int_fgets_add_08.c":83:36)
#loc90 = loc("CWE190_Integer_Overflow__int_fgets_add_08.c":83:53)
#loc91 = loc("CWE190_Integer_Overflow__int_fgets_add_08.c":83:17)
#loc92 = loc("CWE190_Integer_Overflow__int_fgets_add_08.c":83:63)
#loc93 = loc("CWE190_Integer_Overflow__int_fgets_add_08.c":83:60)
#loc94 = loc("CWE190_Integer_Overflow__int_fgets_add_08.c":84:13)
#loc95 = loc("CWE190_Integer_Overflow__int_fgets_add_08.c":87:13)
#loc96 = loc("CWE190_Integer_Overflow__int_fgets_add_08.c":89:13)
#loc97 = loc("CWE190_Integer_Overflow__int_fgets_add_08.c":86:29)
#loc98 = loc("CWE190_Integer_Overflow__int_fgets_add_08.c":86:24)
#loc99 = loc("CWE190_Integer_Overflow__int_fgets_add_08.c":86:17)
#loc100 = loc("CWE190_Integer_Overflow__int_fgets_add_08.c":86:40)
#loc101 = loc("CWE190_Integer_Overflow__int_fgets_add_08.c":90:27)
#loc102 = loc("CWE190_Integer_Overflow__int_fgets_add_08.c":90:17)
#loc103 = loc("CWE190_Integer_Overflow__int_fgets_add_08.c":94:5)
#loc104 = loc("CWE190_Integer_Overflow__int_fgets_add_08.c":111:5)
#loc105 = loc("CWE190_Integer_Overflow__int_fgets_add_08.c":94:8)
#loc106 = loc("CWE190_Integer_Overflow__int_fgets_add_08.c":94:27)
#loc107 = loc("CWE190_Integer_Overflow__int_fgets_add_08.c":95:5)
#loc108 = loc("CWE190_Integer_Overflow__int_fgets_add_08.c":98:5)
#loc109 = loc("CWE190_Integer_Overflow__int_fgets_add_08.c":100:5)
#loc110 = loc("CWE190_Integer_Overflow__int_fgets_add_08.c":97:9)
#loc111 = loc("CWE190_Integer_Overflow__int_fgets_add_08.c":102:9)
#loc112 = loc("CWE190_Integer_Overflow__int_fgets_add_08.c":110:9)
#loc113 = loc("CWE190_Integer_Overflow__int_fgets_add_08.c":102:13)
#loc114 = loc("CWE190_Integer_Overflow__int_fgets_add_08.c":102:20)
#loc115 = loc("CWE190_Integer_Overflow__int_fgets_add_08.c":102:18)
#loc116 = loc("CWE190_Integer_Overflow__int_fgets_add_08.c":103:9)
#loc117 = loc("CWE190_Integer_Overflow__int_fgets_add_08.c":106:9)
#loc118 = loc("CWE190_Integer_Overflow__int_fgets_add_08.c":108:9)
#loc119 = loc("CWE190_Integer_Overflow__int_fgets_add_08.c":104:13)
#loc120 = loc("CWE190_Integer_Overflow__int_fgets_add_08.c":104:33)
#loc121 = loc("CWE190_Integer_Overflow__int_fgets_add_08.c":104:26)
#loc122 = loc("CWE190_Integer_Overflow__int_fgets_add_08.c":105:26)
#loc123 = loc("CWE190_Integer_Overflow__int_fgets_add_08.c":105:13)
#loc124 = loc("CWE190_Integer_Overflow__int_fgets_add_08.c":109:13)
#loc125 = loc("CWE190_Integer_Overflow__int_fgets_add_08.c":30:1)
#loc126 = loc("CWE190_Integer_Overflow__int_fgets_add_08.c":33:1)
#loc127 = loc("CWE190_Integer_Overflow__int_fgets_add_08.c":32:12)
#loc128 = loc("CWE190_Integer_Overflow__int_fgets_add_08.c":32:5)
#loc129 = loc("CWE190_Integer_Overflow__int_fgets_add_08.c":115:1)
#loc130 = loc("CWE190_Integer_Overflow__int_fgets_add_08.c":149:1)
#loc131 = loc("CWE190_Integer_Overflow__int_fgets_add_08.c":117:5)
#loc132 = loc("CWE190_Integer_Overflow__int_fgets_add_08.c":117:9)
#loc133 = loc("CWE190_Integer_Overflow__int_fgets_add_08.c":119:12)
#loc134 = loc("CWE190_Integer_Overflow__int_fgets_add_08.c":119:5)
#loc135 = loc("CWE190_Integer_Overflow__int_fgets_add_08.c":120:5)
#loc136 = loc("CWE190_Integer_Overflow__int_fgets_add_08.c":135:5)
#loc137 = loc("CWE190_Integer_Overflow__int_fgets_add_08.c":120:8)
#loc138 = loc("CWE190_Integer_Overflow__int_fgets_add_08.c":120:26)
#loc139 = loc("CWE190_Integer_Overflow__int_fgets_add_08.c":121:5)
#loc140 = loc("CWE190_Integer_Overflow__int_fgets_add_08.c":122:9)
#loc141 = loc("CWE190_Integer_Overflow__int_fgets_add_08.c":134:9)
#loc142 = loc("CWE190_Integer_Overflow__int_fgets_add_08.c":123:13)
#loc143 = loc("CWE190_Integer_Overflow__int_fgets_add_08.c":123:49)
#loc144 = loc("CWE190_Integer_Overflow__int_fgets_add_08.c":125:13)
#loc145 = loc("CWE190_Integer_Overflow__int_fgets_add_08.c":133:13)
#loc146 = loc("CWE190_Integer_Overflow__int_fgets_add_08.c":125:23)
#loc147 = loc("CWE190_Integer_Overflow__int_fgets_add_08.c":125:36)
#loc148 = loc("CWE190_Integer_Overflow__int_fgets_add_08.c":125:53)
#loc149 = loc("CWE190_Integer_Overflow__int_fgets_add_08.c":125:17)
#loc150 = loc("CWE190_Integer_Overflow__int_fgets_add_08.c":125:63)
#loc151 = loc("CWE190_Integer_Overflow__int_fgets_add_08.c":125:60)
#loc152 = loc("CWE190_Integer_Overflow__int_fgets_add_08.c":126:13)
#loc153 = loc("CWE190_Integer_Overflow__int_fgets_add_08.c":129:13)
#loc154 = loc("CWE190_Integer_Overflow__int_fgets_add_08.c":131:13)
#loc155 = loc("CWE190_Integer_Overflow__int_fgets_add_08.c":128:29)
#loc156 = loc("CWE190_Integer_Overflow__int_fgets_add_08.c":128:24)
#loc157 = loc("CWE190_Integer_Overflow__int_fgets_add_08.c":128:17)
#loc158 = loc("CWE190_Integer_Overflow__int_fgets_add_08.c":128:40)
#loc159 = loc("CWE190_Integer_Overflow__int_fgets_add_08.c":132:27)
#loc160 = loc("CWE190_Integer_Overflow__int_fgets_add_08.c":132:17)
#loc161 = loc("CWE190_Integer_Overflow__int_fgets_add_08.c":136:5)
#loc162 = loc("CWE190_Integer_Overflow__int_fgets_add_08.c":148:5)
#loc163 = loc("CWE190_Integer_Overflow__int_fgets_add_08.c":136:8)
#loc164 = loc("CWE190_Integer_Overflow__int_fgets_add_08.c":136:26)
#loc165 = loc("CWE190_Integer_Overflow__int_fgets_add_08.c":137:5)
#loc166 = loc("CWE190_Integer_Overflow__int_fgets_add_08.c":139:9)
#loc167 = loc("CWE190_Integer_Overflow__int_fgets_add_08.c":147:9)
#loc168 = loc("CWE190_Integer_Overflow__int_fgets_add_08.c":139:13)
#loc169 = loc("CWE190_Integer_Overflow__int_fgets_add_08.c":139:20)
#loc170 = loc("CWE190_Integer_Overflow__int_fgets_add_08.c":139:18)
#loc171 = loc("CWE190_Integer_Overflow__int_fgets_add_08.c":140:9)
#loc172 = loc("CWE190_Integer_Overflow__int_fgets_add_08.c":143:9)
#loc173 = loc("CWE190_Integer_Overflow__int_fgets_add_08.c":145:9)
#loc174 = loc("CWE190_Integer_Overflow__int_fgets_add_08.c":141:13)
#loc175 = loc("CWE190_Integer_Overflow__int_fgets_add_08.c":141:33)
#loc176 = loc("CWE190_Integer_Overflow__int_fgets_add_08.c":141:26)
#loc177 = loc("CWE190_Integer_Overflow__int_fgets_add_08.c":142:26)
#loc178 = loc("CWE190_Integer_Overflow__int_fgets_add_08.c":142:13)
#loc179 = loc("CWE190_Integer_Overflow__int_fgets_add_08.c":146:23)
#loc180 = loc("CWE190_Integer_Overflow__int_fgets_add_08.c":146:13)
#loc181 = loc("CWE190_Integer_Overflow__int_fgets_add_08.c":152:1)
#loc182 = loc("CWE190_Integer_Overflow__int_fgets_add_08.c":175:1)
#loc183 = loc("CWE190_Integer_Overflow__int_fgets_add_08.c":154:5)
#loc184 = loc("CWE190_Integer_Overflow__int_fgets_add_08.c":154:9)
#loc185 = loc("CWE190_Integer_Overflow__int_fgets_add_08.c":156:12)
#loc186 = loc("CWE190_Integer_Overflow__int_fgets_add_08.c":156:5)
#loc187 = loc("CWE190_Integer_Overflow__int_fgets_add_08.c":157:5)
#loc188 = loc("CWE190_Integer_Overflow__int_fgets_add_08.c":166:5)
#loc189 = loc("CWE190_Integer_Overflow__int_fgets_add_08.c":157:8)
#loc190 = loc("CWE190_Integer_Overflow__int_fgets_add_08.c":157:27)
#loc191 = loc("CWE190_Integer_Overflow__int_fgets_add_08.c":158:5)
#loc192 = loc("CWE190_Integer_Overflow__int_fgets_add_08.c":161:5)
#loc193 = loc("CWE190_Integer_Overflow__int_fgets_add_08.c":163:5)
#loc194 = loc("CWE190_Integer_Overflow__int_fgets_add_08.c":160:19)
#loc195 = loc("CWE190_Integer_Overflow__int_fgets_add_08.c":160:9)
#loc196 = loc("CWE190_Integer_Overflow__int_fgets_add_08.c":165:16)
#loc197 = loc("CWE190_Integer_Overflow__int_fgets_add_08.c":165:9)
#loc198 = loc("CWE190_Integer_Overflow__int_fgets_add_08.c":167:5)
#loc199 = loc("CWE190_Integer_Overflow__int_fgets_add_08.c":174:5)
#loc200 = loc("CWE190_Integer_Overflow__int_fgets_add_08.c":167:8)
#loc201 = loc("CWE190_Integer_Overflow__int_fgets_add_08.c":167:26)
#loc202 = loc("CWE190_Integer_Overflow__int_fgets_add_08.c":168:5)
#loc203 = loc("CWE190_Integer_Overflow__int_fgets_add_08.c":169:9)
#loc204 = loc("CWE190_Integer_Overflow__int_fgets_add_08.c":173:9)
#loc205 = loc("CWE190_Integer_Overflow__int_fgets_add_08.c":171:13)
#loc206 = loc("CWE190_Integer_Overflow__int_fgets_add_08.c":171:33)
#loc207 = loc("CWE190_Integer_Overflow__int_fgets_add_08.c":171:26)
#loc208 = loc("CWE190_Integer_Overflow__int_fgets_add_08.c":172:26)
#loc209 = loc("CWE190_Integer_Overflow__int_fgets_add_08.c":172:13)
#loc210 = loc("CWE190_Integer_Overflow__int_fgets_add_08.c":178:1)
#loc211 = loc("CWE190_Integer_Overflow__int_fgets_add_08.c":196:1)
#loc212 = loc("CWE190_Integer_Overflow__int_fgets_add_08.c":180:5)
#loc213 = loc("CWE190_Integer_Overflow__int_fgets_add_08.c":180:9)
#loc214 = loc("CWE190_Integer_Overflow__int_fgets_add_08.c":182:12)
#loc215 = loc("CWE190_Integer_Overflow__int_fgets_add_08.c":182:5)
#loc216 = loc("CWE190_Integer_Overflow__int_fgets_add_08.c":183:5)
#loc217 = loc("CWE190_Integer_Overflow__int_fgets_add_08.c":187:5)
#loc218 = loc("CWE190_Integer_Overflow__int_fgets_add_08.c":183:8)
#loc219 = loc("CWE190_Integer_Overflow__int_fgets_add_08.c":183:26)
#loc220 = loc("CWE190_Integer_Overflow__int_fgets_add_08.c":184:5)
#loc221 = loc("CWE190_Integer_Overflow__int_fgets_add_08.c":186:16)
#loc222 = loc("CWE190_Integer_Overflow__int_fgets_add_08.c":186:9)
#loc223 = loc("CWE190_Integer_Overflow__int_fgets_add_08.c":188:5)
#loc224 = loc("CWE190_Integer_Overflow__int_fgets_add_08.c":195:5)
#loc225 = loc("CWE190_Integer_Overflow__int_fgets_add_08.c":188:8)
#loc226 = loc("CWE190_Integer_Overflow__int_fgets_add_08.c":188:26)
#loc227 = loc("CWE190_Integer_Overflow__int_fgets_add_08.c":189:5)
#loc228 = loc("CWE190_Integer_Overflow__int_fgets_add_08.c":190:9)
#loc229 = loc("CWE190_Integer_Overflow__int_fgets_add_08.c":194:9)
#loc230 = loc("CWE190_Integer_Overflow__int_fgets_add_08.c":192:13)
#loc231 = loc("CWE190_Integer_Overflow__int_fgets_add_08.c":192:33)
#loc232 = loc("CWE190_Integer_Overflow__int_fgets_add_08.c":192:26)
#loc233 = loc("CWE190_Integer_Overflow__int_fgets_add_08.c":193:26)
#loc234 = loc("CWE190_Integer_Overflow__int_fgets_add_08.c":193:13)
#loc235 = loc(fused[#loc1, #loc2])
#loc236 = loc(fused[#loc3, #loc4])
#loc237 = loc(fused[#loc5, #loc6])
#loc238 = loc(fused[#loc7, #loc8])
#loc239 = loc(fused[#loc10, #loc11])
#loc240 = loc(fused[#loc12, #loc13])
#loc241 = loc(fused[#loc14, #loc15])
#loc242 = loc(fused[#loc17, #loc16])
#loc243 = loc(fused[#loc18, #loc19])
#loc244 = loc(fused[#loc20, #loc21])
#loc245 = loc(fused[#loc22, #loc19])
#loc246 = loc(fused[#loc23, #loc24])
#loc247 = loc(fused[#loc25, #loc26])
#loc248 = loc(fused[#loc27, #loc28])
#loc249 = loc(fused[#loc32, #loc33])
#loc250 = loc(fused[#loc35, #loc36, #loc37, #loc28])
#loc251 = loc(fused[#loc40, #loc41])
#loc252 = loc(fused[#loc43, #loc44])
#loc253 = loc(fused[#loc45, #loc46])
#loc254 = loc(fused[#loc47, #loc44])
#loc255 = loc(fused[#loc48, #loc49])
#loc256 = loc(fused[#loc50, #loc51])
#loc257 = loc(fused[#loc55, #loc56])
#loc258 = loc(fused[#loc57, #loc58])
#loc259 = loc(fused[#loc59, #loc60])
#loc260 = loc(fused[#loc61, #loc62])
#loc261 = loc(fused[#loc63, #loc64])
#loc262 = loc(fused[#loc65, #loc66])
#loc263 = loc(fused[#loc68, #loc67])
#loc264 = loc(fused[#loc71, #loc72])
#loc265 = loc(fused[#loc73, #loc74])
#loc266 = loc(fused[#loc76, #loc75])
#loc267 = loc(fused[#loc77, #loc78])
#loc268 = loc(fused[#loc79, #loc80])
#loc269 = loc(fused[#loc81, #loc78])
#loc270 = loc(fused[#loc82, #loc83])
#loc271 = loc(fused[#loc84, #loc85])
#loc272 = loc(fused[#loc86, #loc87])
#loc273 = loc(fused[#loc91, #loc92])
#loc274 = loc(fused[#loc94, #loc95, #loc96, #loc87])
#loc275 = loc(fused[#loc99, #loc100])
#loc276 = loc(fused[#loc103, #loc104])
#loc277 = loc(fused[#loc105, #loc106])
#loc278 = loc(fused[#loc107, #loc108, #loc109, #loc104])
#loc279 = loc(fused[#loc111, #loc112])
#loc280 = loc(fused[#loc113, #loc114])
#loc281 = loc(fused[#loc116, #loc117, #loc118, #loc112])
#loc282 = loc(fused[#loc119, #loc120])
#loc283 = loc(fused[#loc125, #loc126])
#loc284 = loc(fused[#loc128, #loc127])
#loc285 = loc(fused[#loc129, #loc130])
#loc286 = loc(fused[#loc131, #loc132])
#loc287 = loc(fused[#loc134, #loc133])
#loc288 = loc(fused[#loc135, #loc136])
#loc289 = loc(fused[#loc137, #loc138])
#loc290 = loc(fused[#loc139, #loc136])
#loc291 = loc(fused[#loc140, #loc141])
#loc292 = loc(fused[#loc142, #loc143])
#loc293 = loc(fused[#loc144, #loc145])
#loc294 = loc(fused[#loc149, #loc150])
#loc295 = loc(fused[#loc152, #loc153, #loc154, #loc145])
#loc296 = loc(fused[#loc157, #loc158])
#loc297 = loc(fused[#loc161, #loc162])
#loc298 = loc(fused[#loc163, #loc164])
#loc299 = loc(fused[#loc165, #loc162])
#loc300 = loc(fused[#loc166, #loc167])
#loc301 = loc(fused[#loc168, #loc169])
#loc302 = loc(fused[#loc171, #loc172, #loc173, #loc167])
#loc303 = loc(fused[#loc174, #loc175])
#loc304 = loc(fused[#loc181, #loc182])
#loc305 = loc(fused[#loc183, #loc184])
#loc306 = loc(fused[#loc186, #loc185])
#loc307 = loc(fused[#loc187, #loc188])
#loc308 = loc(fused[#loc189, #loc190])
#loc309 = loc(fused[#loc191, #loc192, #loc193, #loc188])
#loc310 = loc(fused[#loc197, #loc196])
#loc311 = loc(fused[#loc198, #loc199])
#loc312 = loc(fused[#loc200, #loc201])
#loc313 = loc(fused[#loc202, #loc199])
#loc314 = loc(fused[#loc203, #loc204])
#loc315 = loc(fused[#loc205, #loc206])
#loc316 = loc(fused[#loc210, #loc211])
#loc317 = loc(fused[#loc212, #loc213])
#loc318 = loc(fused[#loc215, #loc214])
#loc319 = loc(fused[#loc216, #loc217])
#loc320 = loc(fused[#loc218, #loc219])
#loc321 = loc(fused[#loc220, #loc217])
#loc322 = loc(fused[#loc222, #loc221])
#loc323 = loc(fused[#loc223, #loc224])
#loc324 = loc(fused[#loc225, #loc226])
#loc325 = loc(fused[#loc227, #loc224])
#loc326 = loc(fused[#loc228, #loc229])
#loc327 = loc(fused[#loc230, #loc231])
