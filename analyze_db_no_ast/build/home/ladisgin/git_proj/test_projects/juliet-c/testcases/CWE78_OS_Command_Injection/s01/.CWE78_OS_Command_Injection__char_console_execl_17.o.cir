!s32i = !cir.int<s, 32>
!s64i = !cir.int<s, 64>
!s8i = !cir.int<s, 8>
!ty__IO_codecvt = !cir.struct<struct "_IO_codecvt" incomplete>
!ty__IO_marker = !cir.struct<struct "_IO_marker" incomplete>
!ty__IO_wide_data = !cir.struct<struct "_IO_wide_data" incomplete>
!u16i = !cir.int<u, 16>
!u64i = !cir.int<u, 64>
!void = !cir.void
#false = #cir.bool<false> : !cir.bool
#fn_attr = #cir<extra({nothrow = #cir.nothrow})>
#fn_attr1 = #cir<extra({inline = #cir.inline<no>, nothrow = #cir.nothrow, optnone = #cir.optnone})>
#true = #cir.bool<true> : !cir.bool
!ty__IO_FILE = !cir.struct<struct "_IO_FILE" {!s32i, !cir.ptr<!s8i>, !cir.ptr<!s8i>, !cir.ptr<!s8i>, !cir.ptr<!s8i>, !cir.ptr<!s8i>, !cir.ptr<!s8i>, !cir.ptr<!s8i>, !cir.ptr<!s8i>, !cir.ptr<!s8i>, !cir.ptr<!s8i>, !cir.ptr<!s8i>, !cir.ptr<!ty__IO_marker>, !cir.ptr<!cir.struct<struct "_IO_FILE">>, !s32i, !s32i, !s64i, !u16i, !s8i, !cir.array<!s8i x 1>, !cir.ptr<!void>, !s64i, !cir.ptr<!ty__IO_codecvt>, !cir.ptr<!ty__IO_wide_data>, !cir.ptr<!cir.struct<struct "_IO_FILE">>, !cir.ptr<!void>, !u64i, !s32i, !cir.array<!s8i x 20>} #cir.record.decl.ast>
module @"/home/ladisgin/git_proj/test_projects/juliet-c/testcases/CWE78_OS_Command_Injection/s01/CWE78_OS_Command_Injection__char_console_execl_17.c" attributes {cir.lang = #cir.lang<c>, cir.sob = #cir.signed_overflow_behavior<undefined>, cir.triple = "x86_64-unknown-linux-gnu", dlti.dl_spec = #dlti.dl_spec<#dlti.dl_entry<!llvm.ptr<272>, dense<64> : vector<4xi64>>, #dlti.dl_entry<!llvm.ptr<271>, dense<32> : vector<4xi64>>, #dlti.dl_entry<!llvm.ptr<270>, dense<32> : vector<4xi64>>, #dlti.dl_entry<f80, dense<128> : vector<2xi64>>, #dlti.dl_entry<f128, dense<128> : vector<2xi64>>, #dlti.dl_entry<i128, dense<128> : vector<2xi64>>, #dlti.dl_entry<i64, dense<64> : vector<2xi64>>, #dlti.dl_entry<i16, dense<16> : vector<2xi64>>, #dlti.dl_entry<i32, dense<32> : vector<2xi64>>, #dlti.dl_entry<f16, dense<16> : vector<2xi64>>, #dlti.dl_entry<f64, dense<64> : vector<2xi64>>, #dlti.dl_entry<!llvm.ptr, dense<64> : vector<4xi64>>, #dlti.dl_entry<i1, dense<8> : vector<2xi64>>, #dlti.dl_entry<i8, dense<8> : vector<2xi64>>, #dlti.dl_entry<"dlti.stack_alignment", 128 : i64>, #dlti.dl_entry<"dlti.endianness", "little">>, llvm.data_layout = "e-m:e-p270:32:32-p271:32:32-p272:64:64-i64:64-i128:128-f80:128-n8:16:32:64-S128"} {
  cir.func private  @strlen(!cir.ptr<!s8i>) -> !u64i extra(#fn_attr) loc(#loc127)
  cir.func private  @fgets(!cir.ptr<!s8i>, !s32i, !cir.ptr<!ty__IO_FILE>) -> !cir.ptr<!s8i> loc(#loc128)
  cir.global "private"  external @stdin : !cir.ptr<!ty__IO_FILE> {alignment = 8 : i64} loc(#loc129)
  cir.func private  @printLine(!cir.ptr<!s8i>) loc(#loc130)
  cir.global "private"  constant internal dsolocal @".str" = #cir.const_array<"fgets() failed\00" : !cir.array<!s8i x 15>> : !cir.array<!s8i x 15> {alignment = 1 : i64} loc(#loc9)
  cir.func private  @execl(!cir.ptr<!s8i>, !cir.ptr<!s8i>, ...) -> !s32i extra(#fn_attr) loc(#loc131)
  cir.global "private"  constant internal dsolocal @".str1" = #cir.const_array<"/bin/sh\00" : !cir.array<!s8i x 8>> : !cir.array<!s8i x 8> {alignment = 1 : i64} loc(#loc12)
  cir.global "private"  constant internal dsolocal @".str2" = #cir.const_array<"-c\00" : !cir.array<!s8i x 3>> : !cir.array<!s8i x 3> {alignment = 1 : i64} loc(#loc13)
  cir.func no_proto  @CWE78_OS_Command_Injection__char_console_execl_17_bad() extra(#fn_attr1) {
    %0 = cir.alloca !s32i, !cir.ptr<!s32i>, ["i"] {alignment = 4 : i64} loc(#loc133)
    %1 = cir.alloca !cir.ptr<!s8i>, !cir.ptr<!cir.ptr<!s8i>>, ["data"] {alignment = 8 : i64} loc(#loc134)
    %2 = cir.alloca !cir.array<!s8i x 100>, !cir.ptr<!cir.array<!s8i x 100>>, ["dataBuffer"] {alignment = 16 : i64} loc(#loc135)
    %3 = cir.const #cir.const_array<"ls " : !cir.array<!s8i x 3>, trailing_zeros> : !cir.array<!s8i x 100> loc(#loc135)
    cir.store %3, %2 : !cir.array<!s8i x 100>, !cir.ptr<!cir.array<!s8i x 100>> loc(#loc135)
    %4 = cir.cast(array_to_ptrdecay, %2 : !cir.ptr<!cir.array<!s8i x 100>>), !cir.ptr<!s8i> loc(#loc22)
    cir.store %4, %1 : !cir.ptr<!s8i>, !cir.ptr<!cir.ptr<!s8i>> loc(#loc136)
    cir.scope {
      %14 = cir.const #cir.int<0> : !s32i loc(#loc26)
      cir.store %14, %0 : !s32i, !cir.ptr<!s32i> loc(#loc138)
      cir.for : cond {
        %15 = cir.load %0 : !cir.ptr<!s32i>, !s32i loc(#loc28)
        %16 = cir.const #cir.int<1> : !s32i loc(#loc29)
        %17 = cir.cmp(lt, %15, %16) : !s32i, !s32i loc(#loc139)
        %18 = cir.cast(int_to_bool, %17 : !s32i), !cir.bool loc(#loc30)
        cir.condition(%18) loc(#loc30)
      } body {
        cir.scope {
          cir.scope {
            %15 = cir.alloca !u64i, !cir.ptr<!u64i>, ["dataLen", init] {alignment = 8 : i64} loc(#loc142)
            %16 = cir.get_global @strlen : !cir.ptr<!cir.func<!u64i (!cir.ptr<!s8i>)>> loc(#loc36)
            %17 = cir.load %1 : !cir.ptr<!cir.ptr<!s8i>>, !cir.ptr<!s8i> loc(#loc37)
            %18 = cir.call @strlen(%17) : (!cir.ptr<!s8i>) -> !u64i extra(#fn_attr) loc(#loc36)
            cir.store %18, %15 : !u64i, !cir.ptr<!u64i> loc(#loc142)
            cir.scope {
              %19 = cir.const #cir.int<100> : !s32i loc(#loc40)
              %20 = cir.cast(integral, %19 : !s32i), !u64i loc(#loc40)
              %21 = cir.load %15 : !cir.ptr<!u64i>, !u64i loc(#loc41)
              %22 = cir.binop(sub, %20, %21) : !u64i loc(#loc144)
              %23 = cir.const #cir.int<1> : !s32i loc(#loc42)
              %24 = cir.cast(integral, %23 : !s32i), !u64i loc(#loc42)
              %25 = cir.cmp(gt, %22, %24) : !u64i, !s32i loc(#loc145)
              %26 = cir.cast(int_to_bool, %25 : !s32i), !cir.bool loc(#loc43)
              cir.if %26 {
                cir.scope {
                  %27 = cir.load %1 : !cir.ptr<!cir.ptr<!s8i>>, !cir.ptr<!s8i> loc(#loc47)
                  %28 = cir.load %15 : !cir.ptr<!u64i>, !u64i loc(#loc48)
                  %29 = cir.ptr_stride(%27 : !cir.ptr<!s8i>, %28 : !u64i), !cir.ptr<!s8i> loc(#loc49)
                  %30 = cir.const #cir.int<100> : !s32i loc(#loc50)
                  %31 = cir.cast(integral, %30 : !s32i), !u64i loc(#loc50)
                  %32 = cir.load %15 : !cir.ptr<!u64i>, !u64i loc(#loc51)
                  %33 = cir.binop(sub, %31, %32) : !u64i loc(#loc148)
                  %34 = cir.cast(integral, %33 : !u64i), !s32i loc(#loc148)
                  %35 = cir.get_global @stdin : !cir.ptr<!cir.ptr<!ty__IO_FILE>> loc(#loc129)
                  %36 = cir.load %35 : !cir.ptr<!cir.ptr<!ty__IO_FILE>>, !cir.ptr<!ty__IO_FILE> loc(#loc52)
                  %37 = cir.call @fgets(%29, %34, %36) : (!cir.ptr<!s8i>, !s32i, !cir.ptr<!ty__IO_FILE>) -> !cir.ptr<!s8i> loc(#loc53)
                  %38 = cir.const #cir.ptr<null> : !cir.ptr<!void> loc(#loc54)
                  %39 = cir.cast(bitcast, %38 : !cir.ptr<!void>), !cir.ptr<!s8i> loc(#loc54)
                  %40 = cir.cmp(ne, %37, %39) : !cir.ptr<!s8i>, !s32i loc(#loc149)
                  %41 = cir.cast(int_to_bool, %40 : !s32i), !cir.bool loc(#loc55)
                  cir.if %41 {
                    %42 = cir.get_global @strlen : !cir.ptr<!cir.func<!u64i (!cir.ptr<!s8i>)>> loc(#loc59)
                    %43 = cir.load %1 : !cir.ptr<!cir.ptr<!s8i>>, !cir.ptr<!s8i> loc(#loc60)
                    %44 = cir.call @strlen(%43) : (!cir.ptr<!s8i>) -> !u64i extra(#fn_attr) loc(#loc59)
                    cir.store %44, %15 : !u64i, !cir.ptr<!u64i> loc(#loc151)
                    cir.scope {
                      %45 = cir.load %15 : !cir.ptr<!u64i>, !u64i loc(#loc65)
                      %46 = cir.const #cir.int<0> : !s32i loc(#loc66)
                      %47 = cir.cast(integral, %46 : !s32i), !u64i loc(#loc66)
                      %48 = cir.cmp(gt, %45, %47) : !u64i, !s32i loc(#loc153)
                      %49 = cir.cast(int_to_bool, %48 : !s32i), !cir.bool loc(#loc67)
                      %50 = cir.ternary(%49, true {
                        %51 = cir.load %1 : !cir.ptr<!cir.ptr<!s8i>>, !cir.ptr<!s8i> loc(#loc69)
                        %52 = cir.load %15 : !cir.ptr<!u64i>, !u64i loc(#loc70)
                        %53 = cir.const #cir.int<1> : !s32i loc(#loc71)
                        %54 = cir.cast(integral, %53 : !s32i), !u64i loc(#loc71)
                        %55 = cir.binop(sub, %52, %54) : !u64i loc(#loc154)
                        %56 = cir.ptr_stride(%51 : !cir.ptr<!s8i>, %55 : !u64i), !cir.ptr<!s8i> loc(#loc72)
                        %57 = cir.load %56 : !cir.ptr<!s8i>, !s8i loc(#loc69)
                        %58 = cir.cast(integral, %57 : !s8i), !s32i loc(#loc69)
                        %59 = cir.const #cir.int<10> : !s32i loc(#loc73)
                        %60 = cir.cmp(eq, %58, %59) : !s32i, !s32i loc(#loc155)
                        %61 = cir.cast(int_to_bool, %60 : !s32i), !cir.bool loc(#loc74)
                        %62 = cir.ternary(%61, true {
                          %63 = cir.const #true loc(#loc68)
                          cir.yield %63 : !cir.bool loc(#loc68)
                        }, false {
                          %63 = cir.const #false loc(#loc68)
                          cir.yield %63 : !cir.bool loc(#loc68)
                        }) : (!cir.bool) -> !cir.bool loc(#loc68)
                        cir.yield %62 : !cir.bool loc(#loc68)
                      }, false {
                        %51 = cir.const #false loc(#loc68)
                        cir.yield %51 : !cir.bool loc(#loc68)
                      }) : (!cir.bool) -> !cir.bool loc(#loc68)
                      cir.if %50 {
                        %51 = cir.const #cir.int<0> : !s32i loc(#loc76)
                        %52 = cir.cast(integral, %51 : !s32i), !s8i loc(#loc76)
                        %53 = cir.load %1 : !cir.ptr<!cir.ptr<!s8i>>, !cir.ptr<!s8i> loc(#loc77)
                        %54 = cir.load %15 : !cir.ptr<!u64i>, !u64i loc(#loc78)
                        %55 = cir.const #cir.int<1> : !s32i loc(#loc79)
                        %56 = cir.cast(integral, %55 : !s32i), !u64i loc(#loc79)
                        %57 = cir.binop(sub, %54, %56) : !u64i loc(#loc157)
                        %58 = cir.ptr_stride(%53 : !cir.ptr<!s8i>, %57 : !u64i), !cir.ptr<!s8i> loc(#loc80)
                        cir.store %52, %58 : !s8i, !cir.ptr<!s8i> loc(#loc158)
                      } loc(#loc156)
                    } loc(#loc152)
                  } else {
                    %42 = cir.get_global @".str" : !cir.ptr<!cir.array<!s8i x 15>> loc(#loc9)
                    %43 = cir.cast(array_to_ptrdecay, %42 : !cir.ptr<!cir.array<!s8i x 15>>), !cir.ptr<!s8i> loc(#loc9)
                    cir.call @printLine(%43) : (!cir.ptr<!s8i>) -> () loc(#loc81)
                    %44 = cir.const #cir.int<0> : !s32i loc(#loc82)
                    %45 = cir.cast(integral, %44 : !s32i), !s8i loc(#loc82)
                    %46 = cir.load %1 : !cir.ptr<!cir.ptr<!s8i>>, !cir.ptr<!s8i> loc(#loc83)
                    %47 = cir.load %15 : !cir.ptr<!u64i>, !u64i loc(#loc84)
                    %48 = cir.ptr_stride(%46 : !cir.ptr<!s8i>, %47 : !u64i), !cir.ptr<!s8i> loc(#loc85)
                    cir.store %45, %48 : !s8i, !cir.ptr<!s8i> loc(#loc159)
                  } loc(#loc150)
                } loc(#loc147)
              } loc(#loc146)
            } loc(#loc143)
          } loc(#loc141)
        } loc(#loc140)
        cir.yield loc(#loc25)
      } step {
        %15 = cir.load %0 : !cir.ptr<!s32i>, !s32i loc(#loc86)
        %16 = cir.unary(inc, %15) : !s32i, !s32i loc(#loc87)
        cir.store %16, %0 : !s32i, !cir.ptr<!s32i> loc(#loc160)
        cir.yield loc(#loc137)
      } loc(#loc137)
    } loc(#loc137)
    %5 = cir.get_global @".str1" : !cir.ptr<!cir.array<!s8i x 8>> loc(#loc12)
    %6 = cir.cast(array_to_ptrdecay, %5 : !cir.ptr<!cir.array<!s8i x 8>>), !cir.ptr<!s8i> loc(#loc12)
    %7 = cir.get_global @".str1" : !cir.ptr<!cir.array<!s8i x 8>> loc(#loc88)
    %8 = cir.cast(array_to_ptrdecay, %7 : !cir.ptr<!cir.array<!s8i x 8>>), !cir.ptr<!s8i> loc(#loc88)
    %9 = cir.get_global @".str2" : !cir.ptr<!cir.array<!s8i x 3>> loc(#loc13)
    %10 = cir.cast(array_to_ptrdecay, %9 : !cir.ptr<!cir.array<!s8i x 3>>), !cir.ptr<!s8i> loc(#loc13)
    %11 = cir.load %1 : !cir.ptr<!cir.ptr<!s8i>>, !cir.ptr<!s8i> loc(#loc89)
    %12 = cir.const #cir.ptr<null> : !cir.ptr<!void> loc(#loc90)
    %13 = cir.call @execl(%6, %8, %10, %11, %12) : (!cir.ptr<!s8i>, !cir.ptr<!s8i>, !cir.ptr<!s8i>, !cir.ptr<!s8i>, !cir.ptr<!void>) -> !s32i extra(#fn_attr) loc(#loc91)
    cir.return loc(#loc15)
  } loc(#loc132)
  cir.func no_proto  @CWE78_OS_Command_Injection__char_console_execl_17_good() extra(#fn_attr1) {
    %0 = cir.get_global @goodG2B : !cir.ptr<!cir.func<!void ()>> loc(#loc162)
    cir.call %0() : (!cir.ptr<!cir.func<!void ()>>) -> () loc(#loc94)
    cir.return loc(#loc93)
  } loc(#loc161)
  cir.func private  @strcat(!cir.ptr<!s8i>, !cir.ptr<!s8i>) -> !cir.ptr<!s8i> extra(#fn_attr) loc(#loc163)
  cir.global "private"  constant internal dsolocal @".str3" = #cir.const_array<"*.*\00" : !cir.array<!s8i x 4>> : !cir.array<!s8i x 4> {alignment = 1 : i64} loc(#loc98)
  cir.func no_proto internal private  @goodG2B() extra(#fn_attr1) {
    %0 = cir.alloca !s32i, !cir.ptr<!s32i>, ["h"] {alignment = 4 : i64} loc(#loc165)
    %1 = cir.alloca !cir.ptr<!s8i>, !cir.ptr<!cir.ptr<!s8i>>, ["data"] {alignment = 8 : i64} loc(#loc166)
    %2 = cir.alloca !cir.array<!s8i x 100>, !cir.ptr<!cir.array<!s8i x 100>>, ["dataBuffer"] {alignment = 16 : i64} loc(#loc167)
    %3 = cir.const #cir.const_array<"ls " : !cir.array<!s8i x 3>, trailing_zeros> : !cir.array<!s8i x 100> loc(#loc167)
    cir.store %3, %2 : !cir.array<!s8i x 100>, !cir.ptr<!cir.array<!s8i x 100>> loc(#loc167)
    %4 = cir.cast(array_to_ptrdecay, %2 : !cir.ptr<!cir.array<!s8i x 100>>), !cir.ptr<!s8i> loc(#loc107)
    cir.store %4, %1 : !cir.ptr<!s8i>, !cir.ptr<!cir.ptr<!s8i>> loc(#loc168)
    cir.scope {
      %14 = cir.const #cir.int<0> : !s32i loc(#loc111)
      cir.store %14, %0 : !s32i, !cir.ptr<!s32i> loc(#loc170)
      cir.for : cond {
        %15 = cir.load %0 : !cir.ptr<!s32i>, !s32i loc(#loc113)
        %16 = cir.const #cir.int<1> : !s32i loc(#loc114)
        %17 = cir.cmp(lt, %15, %16) : !s32i, !s32i loc(#loc171)
        %18 = cir.cast(int_to_bool, %17 : !s32i), !cir.bool loc(#loc115)
        cir.condition(%18) loc(#loc115)
      } body {
        cir.scope {
          %15 = cir.get_global @strcat : !cir.ptr<!cir.func<!cir.ptr<!s8i> (!cir.ptr<!s8i>, !cir.ptr<!s8i>)>> loc(#loc117)
          %16 = cir.load %1 : !cir.ptr<!cir.ptr<!s8i>>, !cir.ptr<!s8i> loc(#loc118)
          %17 = cir.get_global @".str3" : !cir.ptr<!cir.array<!s8i x 4>> loc(#loc98)
          %18 = cir.cast(array_to_ptrdecay, %17 : !cir.ptr<!cir.array<!s8i x 4>>), !cir.ptr<!s8i> loc(#loc98)
          %19 = cir.call @strcat(%16, %18) : (!cir.ptr<!s8i>, !cir.ptr<!s8i>) -> !cir.ptr<!s8i> extra(#fn_attr) loc(#loc117)
        } loc(#loc172)
        cir.yield loc(#loc110)
      } step {
        %15 = cir.load %0 : !cir.ptr<!s32i>, !s32i loc(#loc119)
        %16 = cir.unary(inc, %15) : !s32i, !s32i loc(#loc120)
        cir.store %16, %0 : !s32i, !cir.ptr<!s32i> loc(#loc173)
        cir.yield loc(#loc169)
      } loc(#loc169)
    } loc(#loc169)
    %5 = cir.get_global @".str1" : !cir.ptr<!cir.array<!s8i x 8>> loc(#loc121)
    %6 = cir.cast(array_to_ptrdecay, %5 : !cir.ptr<!cir.array<!s8i x 8>>), !cir.ptr<!s8i> loc(#loc121)
    %7 = cir.get_global @".str1" : !cir.ptr<!cir.array<!s8i x 8>> loc(#loc122)
    %8 = cir.cast(array_to_ptrdecay, %7 : !cir.ptr<!cir.array<!s8i x 8>>), !cir.ptr<!s8i> loc(#loc122)
    %9 = cir.get_global @".str2" : !cir.ptr<!cir.array<!s8i x 3>> loc(#loc123)
    %10 = cir.cast(array_to_ptrdecay, %9 : !cir.ptr<!cir.array<!s8i x 3>>), !cir.ptr<!s8i> loc(#loc123)
    %11 = cir.load %1 : !cir.ptr<!cir.ptr<!s8i>>, !cir.ptr<!s8i> loc(#loc124)
    %12 = cir.const #cir.ptr<null> : !cir.ptr<!void> loc(#loc125)
    %13 = cir.call @execl(%6, %8, %10, %11, %12) : (!cir.ptr<!s8i>, !cir.ptr<!s8i>, !cir.ptr<!s8i>, !cir.ptr<!s8i>, !cir.ptr<!void>) -> !s32i extra(#fn_attr) loc(#loc126)
    cir.return loc(#loc100)
  } loc(#loc164)
} loc(#loc)
#loc = loc("/home/ladisgin/git_proj/test_projects/juliet-c/testcases/CWE78_OS_Command_Injection/s01/CWE78_OS_Command_Injection__char_console_execl_17.c":0:0)
#loc1 = loc("/usr/include/string.h":407:1)
#loc2 = loc("/usr/include/string.h":408:33)
#loc3 = loc("/usr/include/stdio.h":654:1)
#loc4 = loc("/usr/include/stdio.h":655:59)
#loc5 = loc("/usr/include/stdio.h":149:1)
#loc6 = loc("/usr/include/stdio.h":149:14)
#loc7 = loc("../../../testcasesupport/std_testcase_io.h":14:1)
#loc8 = loc("../../../testcasesupport/std_testcase_io.h":14:33)
#loc9 = loc("CWE78_OS_Command_Injection__char_console_execl_17.c":72:31)
#loc10 = loc("/usr/include/unistd.h":594:1)
#loc11 = loc("/usr/include/unistd.h":595:14)
#loc12 = loc("CWE78_OS_Command_Injection__char_console_execl_17.c":81:11)
#loc13 = loc("CWE78_OS_Command_Injection__char_console_execl_17.c":81:47)
#loc14 = loc("CWE78_OS_Command_Injection__char_console_execl_17.c":45:1)
#loc15 = loc("CWE78_OS_Command_Injection__char_console_execl_17.c":82:1)
#loc16 = loc("CWE78_OS_Command_Injection__char_console_execl_17.c":47:5)
#loc17 = loc("CWE78_OS_Command_Injection__char_console_execl_17.c":47:9)
#loc18 = loc("CWE78_OS_Command_Injection__char_console_execl_17.c":48:5)
#loc19 = loc("CWE78_OS_Command_Injection__char_console_execl_17.c":48:12)
#loc20 = loc("CWE78_OS_Command_Injection__char_console_execl_17.c":49:5)
#loc21 = loc("CWE78_OS_Command_Injection__char_console_execl_17.c":49:28)
#loc22 = loc("CWE78_OS_Command_Injection__char_console_execl_17.c":50:12)
#loc23 = loc("CWE78_OS_Command_Injection__char_console_execl_17.c":50:5)
#loc24 = loc("CWE78_OS_Command_Injection__char_console_execl_17.c":51:5)
#loc25 = loc("CWE78_OS_Command_Injection__char_console_execl_17.c":78:5)
#loc26 = loc("CWE78_OS_Command_Injection__char_console_execl_17.c":51:13)
#loc27 = loc("CWE78_OS_Command_Injection__char_console_execl_17.c":51:9)
#loc28 = loc("CWE78_OS_Command_Injection__char_console_execl_17.c":51:16)
#loc29 = loc("CWE78_OS_Command_Injection__char_console_execl_17.c":51:20)
#loc30 = loc("CWE78_OS_Command_Injection__char_console_execl_17.c":51:18)
#loc31 = loc("CWE78_OS_Command_Injection__char_console_execl_17.c":52:5)
#loc32 = loc("CWE78_OS_Command_Injection__char_console_execl_17.c":53:9)
#loc33 = loc("CWE78_OS_Command_Injection__char_console_execl_17.c":77:9)
#loc34 = loc("CWE78_OS_Command_Injection__char_console_execl_17.c":55:13)
#loc35 = loc("CWE78_OS_Command_Injection__char_console_execl_17.c":55:41)
#loc36 = loc("CWE78_OS_Command_Injection__char_console_execl_17.c":55:30)
#loc37 = loc("CWE78_OS_Command_Injection__char_console_execl_17.c":55:37)
#loc38 = loc("CWE78_OS_Command_Injection__char_console_execl_17.c":57:13)
#loc39 = loc("CWE78_OS_Command_Injection__char_console_execl_17.c":76:13)
#loc40 = loc("CWE78_OS_Command_Injection__char_console_execl_17.c":57:17)
#loc41 = loc("CWE78_OS_Command_Injection__char_console_execl_17.c":57:21)
#loc42 = loc("CWE78_OS_Command_Injection__char_console_execl_17.c":57:31)
#loc43 = loc("CWE78_OS_Command_Injection__char_console_execl_17.c":57:29)
#loc44 = loc("CWE78_OS_Command_Injection__char_console_execl_17.c":58:13)
#loc45 = loc("CWE78_OS_Command_Injection__char_console_execl_17.c":60:17)
#loc46 = loc("CWE78_OS_Command_Injection__char_console_execl_17.c":75:17)
#loc47 = loc("CWE78_OS_Command_Injection__char_console_execl_17.c":60:27)
#loc48 = loc("CWE78_OS_Command_Injection__char_console_execl_17.c":60:32)
#loc49 = loc("CWE78_OS_Command_Injection__char_console_execl_17.c":60:31)
#loc50 = loc("CWE78_OS_Command_Injection__char_console_execl_17.c":60:47)
#loc51 = loc("CWE78_OS_Command_Injection__char_console_execl_17.c":60:51)
#loc52 = loc("CWE78_OS_Command_Injection__char_console_execl_17.c":60:61)
#loc53 = loc("CWE78_OS_Command_Injection__char_console_execl_17.c":60:21)
#loc54 = loc("CWE78_OS_Command_Injection__char_console_execl_17.c":60:71)
#loc55 = loc("CWE78_OS_Command_Injection__char_console_execl_17.c":60:68)
#loc56 = loc("CWE78_OS_Command_Injection__char_console_execl_17.c":61:17)
#loc57 = loc("CWE78_OS_Command_Injection__char_console_execl_17.c":69:17)
#loc58 = loc("CWE78_OS_Command_Injection__char_console_execl_17.c":71:17)
#loc59 = loc("CWE78_OS_Command_Injection__char_console_execl_17.c":64:31)
#loc60 = loc("CWE78_OS_Command_Injection__char_console_execl_17.c":64:38)
#loc61 = loc("CWE78_OS_Command_Injection__char_console_execl_17.c":64:21)
#loc62 = loc("CWE78_OS_Command_Injection__char_console_execl_17.c":64:42)
#loc63 = loc("CWE78_OS_Command_Injection__char_console_execl_17.c":65:21)
#loc64 = loc("CWE78_OS_Command_Injection__char_console_execl_17.c":68:21)
#loc65 = loc("CWE78_OS_Command_Injection__char_console_execl_17.c":65:25)
#loc66 = loc("CWE78_OS_Command_Injection__char_console_execl_17.c":65:35)
#loc67 = loc("CWE78_OS_Command_Injection__char_console_execl_17.c":65:33)
#loc68 = loc("CWE78_OS_Command_Injection__char_console_execl_17.c":65:37)
#loc69 = loc("CWE78_OS_Command_Injection__char_console_execl_17.c":65:40)
#loc70 = loc("CWE78_OS_Command_Injection__char_console_execl_17.c":65:45)
#loc71 = loc("CWE78_OS_Command_Injection__char_console_execl_17.c":65:53)
#loc72 = loc("CWE78_OS_Command_Injection__char_console_execl_17.c":65:54)
#loc73 = loc("CWE78_OS_Command_Injection__char_console_execl_17.c":65:59)
#loc74 = loc("CWE78_OS_Command_Injection__char_console_execl_17.c":65:56)
#loc75 = loc("CWE78_OS_Command_Injection__char_console_execl_17.c":66:21)
#loc76 = loc("CWE78_OS_Command_Injection__char_console_execl_17.c":67:43)
#loc77 = loc("CWE78_OS_Command_Injection__char_console_execl_17.c":67:25)
#loc78 = loc("CWE78_OS_Command_Injection__char_console_execl_17.c":67:30)
#loc79 = loc("CWE78_OS_Command_Injection__char_console_execl_17.c":67:38)
#loc80 = loc("CWE78_OS_Command_Injection__char_console_execl_17.c":67:39)
#loc81 = loc("CWE78_OS_Command_Injection__char_console_execl_17.c":72:21)
#loc82 = loc("CWE78_OS_Command_Injection__char_console_execl_17.c":74:37)
#loc83 = loc("CWE78_OS_Command_Injection__char_console_execl_17.c":74:21)
#loc84 = loc("CWE78_OS_Command_Injection__char_console_execl_17.c":74:26)
#loc85 = loc("CWE78_OS_Command_Injection__char_console_execl_17.c":74:33)
#loc86 = loc("CWE78_OS_Command_Injection__char_console_execl_17.c":51:24)
#loc87 = loc("CWE78_OS_Command_Injection__char_console_execl_17.c":51:23)
#loc88 = loc("CWE78_OS_Command_Injection__char_console_execl_17.c":81:29)
#loc89 = loc("CWE78_OS_Command_Injection__char_console_execl_17.c":81:61)
#loc90 = loc("CWE78_OS_Command_Injection__char_console_execl_17.c":81:75)
#loc91 = loc("CWE78_OS_Command_Injection__char_console_execl_17.c":81:5)
#loc92 = loc("CWE78_OS_Command_Injection__char_console_execl_17.c":105:1)
#loc93 = loc("CWE78_OS_Command_Injection__char_console_execl_17.c":108:1)
#loc94 = loc("CWE78_OS_Command_Injection__char_console_execl_17.c":107:5)
#loc95 = loc("CWE78_OS_Command_Injection__char_console_execl_17.c":107:13)
#loc96 = loc("/usr/include/string.h":149:1)
#loc97 = loc("/usr/include/string.h":150:14)
#loc98 = loc("CWE78_OS_Command_Injection__char_console_execl_17.c":98:22)
#loc99 = loc("CWE78_OS_Command_Injection__char_console_execl_17.c":89:1)
#loc100 = loc("CWE78_OS_Command_Injection__char_console_execl_17.c":103:1)
#loc101 = loc("CWE78_OS_Command_Injection__char_console_execl_17.c":91:5)
#loc102 = loc("CWE78_OS_Command_Injection__char_console_execl_17.c":91:9)
#loc103 = loc("CWE78_OS_Command_Injection__char_console_execl_17.c":92:5)
#loc104 = loc("CWE78_OS_Command_Injection__char_console_execl_17.c":92:12)
#loc105 = loc("CWE78_OS_Command_Injection__char_console_execl_17.c":93:5)
#loc106 = loc("CWE78_OS_Command_Injection__char_console_execl_17.c":93:28)
#loc107 = loc("CWE78_OS_Command_Injection__char_console_execl_17.c":94:12)
#loc108 = loc("CWE78_OS_Command_Injection__char_console_execl_17.c":94:5)
#loc109 = loc("CWE78_OS_Command_Injection__char_console_execl_17.c":95:5)
#loc110 = loc("CWE78_OS_Command_Injection__char_console_execl_17.c":99:5)
#loc111 = loc("CWE78_OS_Command_Injection__char_console_execl_17.c":95:13)
#loc112 = loc("CWE78_OS_Command_Injection__char_console_execl_17.c":95:9)
#loc113 = loc("CWE78_OS_Command_Injection__char_console_execl_17.c":95:16)
#loc114 = loc("CWE78_OS_Command_Injection__char_console_execl_17.c":95:20)
#loc115 = loc("CWE78_OS_Command_Injection__char_console_execl_17.c":95:18)
#loc116 = loc("CWE78_OS_Command_Injection__char_console_execl_17.c":96:5)
#loc117 = loc("CWE78_OS_Command_Injection__char_console_execl_17.c":98:9)
#loc118 = loc("CWE78_OS_Command_Injection__char_console_execl_17.c":98:16)
#loc119 = loc("CWE78_OS_Command_Injection__char_console_execl_17.c":95:24)
#loc120 = loc("CWE78_OS_Command_Injection__char_console_execl_17.c":95:23)
#loc121 = loc("CWE78_OS_Command_Injection__char_console_execl_17.c":102:11)
#loc122 = loc("CWE78_OS_Command_Injection__char_console_execl_17.c":102:29)
#loc123 = loc("CWE78_OS_Command_Injection__char_console_execl_17.c":102:47)
#loc124 = loc("CWE78_OS_Command_Injection__char_console_execl_17.c":102:61)
#loc125 = loc("CWE78_OS_Command_Injection__char_console_execl_17.c":102:75)
#loc126 = loc("CWE78_OS_Command_Injection__char_console_execl_17.c":102:5)
#loc127 = loc(fused[#loc1, #loc2])
#loc128 = loc(fused[#loc3, #loc4])
#loc129 = loc(fused[#loc5, #loc6])
#loc130 = loc(fused[#loc7, #loc8])
#loc131 = loc(fused[#loc10, #loc11])
#loc132 = loc(fused[#loc14, #loc15])
#loc133 = loc(fused[#loc16, #loc17])
#loc134 = loc(fused[#loc18, #loc19])
#loc135 = loc(fused[#loc20, #loc21])
#loc136 = loc(fused[#loc23, #loc22])
#loc137 = loc(fused[#loc24, #loc25])
#loc138 = loc(fused[#loc27, #loc26])
#loc139 = loc(fused[#loc28, #loc29])
#loc140 = loc(fused[#loc31, #loc25])
#loc141 = loc(fused[#loc32, #loc33])
#loc142 = loc(fused[#loc34, #loc35])
#loc143 = loc(fused[#loc38, #loc39])
#loc144 = loc(fused[#loc40, #loc41])
#loc145 = loc(fused[#loc40, #loc42])
#loc146 = loc(fused[#loc44, #loc39])
#loc147 = loc(fused[#loc45, #loc46])
#loc148 = loc(fused[#loc50, #loc51])
#loc149 = loc(fused[#loc53, #loc54])
#loc150 = loc(fused[#loc56, #loc57, #loc58, #loc46])
#loc151 = loc(fused[#loc61, #loc62])
#loc152 = loc(fused[#loc63, #loc64])
#loc153 = loc(fused[#loc65, #loc66])
#loc154 = loc(fused[#loc70, #loc71])
#loc155 = loc(fused[#loc69, #loc73])
#loc156 = loc(fused[#loc75, #loc64])
#loc157 = loc(fused[#loc78, #loc79])
#loc158 = loc(fused[#loc77, #loc76])
#loc159 = loc(fused[#loc83, #loc82])
#loc160 = loc(fused[#loc87, #loc86])
#loc161 = loc(fused[#loc92, #loc93])
#loc162 = loc(fused[#loc94, #loc95])
#loc163 = loc(fused[#loc96, #loc97])
#loc164 = loc(fused[#loc99, #loc100])
#loc165 = loc(fused[#loc101, #loc102])
#loc166 = loc(fused[#loc103, #loc104])
#loc167 = loc(fused[#loc105, #loc106])
#loc168 = loc(fused[#loc108, #loc107])
#loc169 = loc(fused[#loc109, #loc110])
#loc170 = loc(fused[#loc112, #loc111])
#loc171 = loc(fused[#loc113, #loc114])
#loc172 = loc(fused[#loc116, #loc110])
#loc173 = loc(fused[#loc120, #loc119])
