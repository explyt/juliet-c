!s32i = !cir.int<s, 32>
!s64i = !cir.int<s, 64>
!s8i = !cir.int<s, 8>
!u32i = !cir.int<u, 32>
!u64i = !cir.int<u, 64>
!void = !cir.void
#fn_attr = #cir<extra({nothrow = #cir.nothrow})>
#fn_attr1 = #cir<extra({inline = #cir.inline<no>, nothrow = #cir.nothrow, optnone = #cir.optnone})>
#loc54 = loc("CWE122_Heap_Based_Buffer_Overflow__sizeof_struct_01.c":72:10)
#loc55 = loc("CWE122_Heap_Based_Buffer_Overflow__sizeof_struct_01.c":72:14)
#loc56 = loc("CWE122_Heap_Based_Buffer_Overflow__sizeof_struct_01.c":72:20)
#loc57 = loc("CWE122_Heap_Based_Buffer_Overflow__sizeof_struct_01.c":72:32)
!ty__twoIntsStruct = !cir.struct<struct "_twoIntsStruct" {!s32i, !s32i} #cir.record.decl.ast>
#loc120 = loc(fused[#loc54, #loc55])
#loc121 = loc(fused[#loc56, #loc57])
module @"/home/ladisgin/git_proj/juliet-c/testcases/CWE122_Heap_Based_Buffer_Overflow/s11/CWE122_Heap_Based_Buffer_Overflow__sizeof_struct_01.c" attributes {cir.lang = #cir.lang<c>, cir.sob = #cir.signed_overflow_behavior<undefined>, cir.triple = "x86_64-unknown-linux-gnu", dlti.dl_spec = #dlti.dl_spec<i128 = dense<128> : vector<2xi64>, i64 = dense<64> : vector<2xi64>, !llvm.ptr<272> = dense<64> : vector<4xi64>, !llvm.ptr<271> = dense<32> : vector<4xi64>, !llvm.ptr<270> = dense<32> : vector<4xi64>, f128 = dense<128> : vector<2xi64>, f64 = dense<64> : vector<2xi64>, f16 = dense<16> : vector<2xi64>, i32 = dense<32> : vector<2xi64>, i16 = dense<16> : vector<2xi64>, i8 = dense<8> : vector<2xi64>, i1 = dense<8> : vector<2xi64>, !llvm.ptr = dense<64> : vector<4xi64>, f80 = dense<128> : vector<2xi64>, "dlti.endianness" = "little", "dlti.stack_alignment" = 128 : i64>} {
  cir.func private @malloc(!u64i) -> !cir.ptr<!void> extra(#fn_attr) loc(#loc99)
  cir.func private @exit(!s32i) extra(#fn_attr) loc(#loc100)
  cir.func private @printStructLine(!cir.ptr<!ty__twoIntsStruct>) loc(#loc101)
  cir.func private @free(!cir.ptr<!void>) extra(#fn_attr) loc(#loc102)
  cir.func no_proto @CWE122_Heap_Based_Buffer_Overflow__sizeof_struct_01_bad() extra(#fn_attr1) {
    %0 = cir.alloca !cir.ptr<!ty__twoIntsStruct>, !cir.ptr<!cir.ptr<!ty__twoIntsStruct>>, ["data"] {alignment = 8 : i64} loc(#loc104)
    %1 = cir.const #cir.ptr<null> : !cir.ptr<!ty__twoIntsStruct> loc(#loc13)
    cir.store %1, %0 : !cir.ptr<!ty__twoIntsStruct>, !cir.ptr<!cir.ptr<!ty__twoIntsStruct>> loc(#loc105)
    %2 = cir.get_global @malloc : !cir.ptr<!cir.func<!cir.ptr<!void> (!u64i)>> loc(#loc15)
    %3 = cir.const #cir.int<8> : !u64i loc(#loc106)
    %4 = cir.call @malloc(%3) : (!u64i) -> !cir.ptr<!void> extra(#fn_attr) loc(#loc15)
    %5 = cir.cast(bitcast, %4 : !cir.ptr<!void>), !cir.ptr<!ty__twoIntsStruct> loc(#loc107)
    cir.store %5, %0 : !cir.ptr<!ty__twoIntsStruct>, !cir.ptr<!cir.ptr<!ty__twoIntsStruct>> loc(#loc108)
    cir.scope {
      %16 = cir.load %0 : !cir.ptr<!cir.ptr<!ty__twoIntsStruct>>, !cir.ptr<!ty__twoIntsStruct> loc(#loc22)
      %17 = cir.const #cir.ptr<null> : !cir.ptr<!void> loc(#loc23)
      %18 = cir.cast(bitcast, %17 : !cir.ptr<!void>), !cir.ptr<!ty__twoIntsStruct> loc(#loc23)
      %19 = cir.cmp(eq, %16, %18) : !cir.ptr<!ty__twoIntsStruct>, !cir.bool loc(#loc110)
      cir.if %19 {
        %20 = cir.get_global @exit : !cir.ptr<!cir.func<!void (!s32i)>> loc(#loc25)
        %21 = cir.const #cir.int<1> : !s32i loc(#loc26)
        %22 = cir.unary(minus, %21) : !s32i, !s32i loc(#loc27)
        cir.call @exit(%22) : (!s32i) -> () extra(#fn_attr) loc(#loc25)
      } loc(#loc111)
    } loc(#loc109)
    %6 = cir.const #cir.int<1> : !s32i loc(#loc28)
    %7 = cir.load %0 : !cir.ptr<!cir.ptr<!ty__twoIntsStruct>>, !cir.ptr<!ty__twoIntsStruct> loc(#loc29)
    %8 = cir.get_member %7[0] {name = "intOne"} : !cir.ptr<!ty__twoIntsStruct> -> !cir.ptr<!s32i> loc(#loc30)
    cir.store %6, %8 : !s32i, !cir.ptr<!s32i> loc(#loc112)
    %9 = cir.const #cir.int<2> : !s32i loc(#loc31)
    %10 = cir.load %0 : !cir.ptr<!cir.ptr<!ty__twoIntsStruct>>, !cir.ptr<!ty__twoIntsStruct> loc(#loc32)
    %11 = cir.get_member %10[1] {name = "intTwo"} : !cir.ptr<!ty__twoIntsStruct> -> !cir.ptr<!s32i> loc(#loc33)
    cir.store %9, %11 : !s32i, !cir.ptr<!s32i> loc(#loc113)
    %12 = cir.load %0 : !cir.ptr<!cir.ptr<!ty__twoIntsStruct>>, !cir.ptr<!ty__twoIntsStruct> loc(#loc34)
    cir.call @printStructLine(%12) : (!cir.ptr<!ty__twoIntsStruct>) -> () loc(#loc35)
    %13 = cir.get_global @free : !cir.ptr<!cir.func<!void (!cir.ptr<!void>)>> loc(#loc36)
    %14 = cir.load %0 : !cir.ptr<!cir.ptr<!ty__twoIntsStruct>>, !cir.ptr<!ty__twoIntsStruct> loc(#loc37)
    %15 = cir.cast(bitcast, %14 : !cir.ptr<!ty__twoIntsStruct>), !cir.ptr<!void> loc(#loc37)
    cir.call @free(%15) : (!cir.ptr<!void>) -> () extra(#fn_attr) loc(#loc36)
    cir.return loc(#loc10)
  } loc(#loc103)
  cir.func no_proto @CWE122_Heap_Based_Buffer_Overflow__sizeof_struct_01_good() extra(#fn_attr1) {
    %0 = cir.get_global @goodG2B : !cir.ptr<!cir.func<!void ()>> loc(#loc115)
    cir.call %0() : (!cir.ptr<!cir.func<!void ()>>) -> () loc(#loc40)
    cir.return loc(#loc39)
  } loc(#loc114)
  cir.func private @srand(!u32i) extra(#fn_attr) loc(#loc116)
  cir.func private @time(!cir.ptr<!s64i>) -> !s64i extra(#fn_attr) loc(#loc117)
  cir.func private @printLine(!cir.ptr<!s8i>) loc(#loc118)
  cir.global "private" constant cir_private dsolocal @".str" = #cir.const_array<"Calling good()...\00" : !cir.array<!s8i x 18>> : !cir.array<!s8i x 18> {alignment = 1 : i64} loc(#loc48)
  cir.global "private" constant cir_private dsolocal @".str.1" = #cir.const_array<"Finished good()\00" : !cir.array<!s8i x 16>> : !cir.array<!s8i x 16> {alignment = 1 : i64} loc(#loc49)
  cir.global "private" constant cir_private dsolocal @".str.2" = #cir.const_array<"Calling bad()...\00" : !cir.array<!s8i x 17>> : !cir.array<!s8i x 17> {alignment = 1 : i64} loc(#loc50)
  cir.global "private" constant cir_private dsolocal @".str.3" = #cir.const_array<"Finished bad()\00" : !cir.array<!s8i x 15>> : !cir.array<!s8i x 15> {alignment = 1 : i64} loc(#loc51)
  cir.func @main(%arg0: !s32i loc(fused[#loc54, #loc55]), %arg1: !cir.ptr<!cir.ptr<!s8i>> loc(fused[#loc56, #loc57])) -> !s32i extra(#fn_attr1) {
    %0 = cir.alloca !s32i, !cir.ptr<!s32i>, ["argc", init] {alignment = 4 : i64} loc(#loc120)
    %1 = cir.alloca !cir.ptr<!cir.ptr<!s8i>>, !cir.ptr<!cir.ptr<!cir.ptr<!s8i>>>, ["argv", init] {alignment = 8 : i64} loc(#loc121)
    %2 = cir.alloca !s32i, !cir.ptr<!s32i>, ["__retval"] {alignment = 4 : i64} loc(#loc53)
    cir.store %arg0, %0 : !s32i, !cir.ptr<!s32i> loc(#loc58)
    cir.store %arg1, %1 : !cir.ptr<!cir.ptr<!s8i>>, !cir.ptr<!cir.ptr<!cir.ptr<!s8i>>> loc(#loc58)
    %3 = cir.const #cir.ptr<null> : !cir.ptr<!s64i> loc(#loc59)
    %4 = cir.call @time(%3) : (!cir.ptr<!s64i>) -> !s64i extra(#fn_attr) loc(#loc60)
    %5 = cir.cast(integral, %4 : !s64i), !u32i loc(#loc60)
    cir.call @srand(%5) : (!u32i) -> () extra(#fn_attr) loc(#loc61)
    %6 = cir.get_global @".str" : !cir.ptr<!cir.array<!s8i x 18>> loc(#loc48)
    %7 = cir.cast(array_to_ptrdecay, %6 : !cir.ptr<!cir.array<!s8i x 18>>), !cir.ptr<!s8i> loc(#loc48)
    cir.call @printLine(%7) : (!cir.ptr<!s8i>) -> () loc(#loc62)
    %8 = cir.get_global @CWE122_Heap_Based_Buffer_Overflow__sizeof_struct_01_good : !cir.ptr<!cir.func<!void ()>> loc(#loc122)
    cir.call @CWE122_Heap_Based_Buffer_Overflow__sizeof_struct_01_good() : () -> () loc(#loc63)
    %9 = cir.get_global @".str.1" : !cir.ptr<!cir.array<!s8i x 16>> loc(#loc49)
    %10 = cir.cast(array_to_ptrdecay, %9 : !cir.ptr<!cir.array<!s8i x 16>>), !cir.ptr<!s8i> loc(#loc49)
    cir.call @printLine(%10) : (!cir.ptr<!s8i>) -> () loc(#loc65)
    %11 = cir.get_global @".str.2" : !cir.ptr<!cir.array<!s8i x 17>> loc(#loc50)
    %12 = cir.cast(array_to_ptrdecay, %11 : !cir.ptr<!cir.array<!s8i x 17>>), !cir.ptr<!s8i> loc(#loc50)
    cir.call @printLine(%12) : (!cir.ptr<!s8i>) -> () loc(#loc66)
    %13 = cir.get_global @CWE122_Heap_Based_Buffer_Overflow__sizeof_struct_01_bad : !cir.ptr<!cir.func<!void ()>> loc(#loc123)
    cir.call @CWE122_Heap_Based_Buffer_Overflow__sizeof_struct_01_bad() : () -> () loc(#loc67)
    %14 = cir.get_global @".str.3" : !cir.ptr<!cir.array<!s8i x 15>> loc(#loc51)
    %15 = cir.cast(array_to_ptrdecay, %14 : !cir.ptr<!cir.array<!s8i x 15>>), !cir.ptr<!s8i> loc(#loc51)
    cir.call @printLine(%15) : (!cir.ptr<!s8i>) -> () loc(#loc69)
    %16 = cir.const #cir.int<0> : !s32i loc(#loc70)
    cir.store %16, %2 : !s32i, !cir.ptr<!s32i> loc(#loc124)
    %17 = cir.load %2 : !cir.ptr<!s32i>, !s32i loc(#loc124)
    cir.return %17 : !s32i loc(#loc124)
  } loc(#loc119)
  cir.func no_proto internal private @goodG2B() extra(#fn_attr1) {
    %0 = cir.alloca !cir.ptr<!ty__twoIntsStruct>, !cir.ptr<!cir.ptr<!ty__twoIntsStruct>>, ["data"] {alignment = 8 : i64} loc(#loc126)
    %1 = cir.const #cir.ptr<null> : !cir.ptr<!ty__twoIntsStruct> loc(#loc76)
    cir.store %1, %0 : !cir.ptr<!ty__twoIntsStruct>, !cir.ptr<!cir.ptr<!ty__twoIntsStruct>> loc(#loc127)
    %2 = cir.get_global @malloc : !cir.ptr<!cir.func<!cir.ptr<!void> (!u64i)>> loc(#loc78)
    %3 = cir.const #cir.int<8> : !u64i loc(#loc128)
    %4 = cir.call @malloc(%3) : (!u64i) -> !cir.ptr<!void> extra(#fn_attr) loc(#loc78)
    %5 = cir.cast(bitcast, %4 : !cir.ptr<!void>), !cir.ptr<!ty__twoIntsStruct> loc(#loc129)
    cir.store %5, %0 : !cir.ptr<!ty__twoIntsStruct>, !cir.ptr<!cir.ptr<!ty__twoIntsStruct>> loc(#loc130)
    cir.scope {
      %16 = cir.load %0 : !cir.ptr<!cir.ptr<!ty__twoIntsStruct>>, !cir.ptr<!ty__twoIntsStruct> loc(#loc85)
      %17 = cir.const #cir.ptr<null> : !cir.ptr<!void> loc(#loc86)
      %18 = cir.cast(bitcast, %17 : !cir.ptr<!void>), !cir.ptr<!ty__twoIntsStruct> loc(#loc86)
      %19 = cir.cmp(eq, %16, %18) : !cir.ptr<!ty__twoIntsStruct>, !cir.bool loc(#loc132)
      cir.if %19 {
        %20 = cir.get_global @exit : !cir.ptr<!cir.func<!void (!s32i)>> loc(#loc88)
        %21 = cir.const #cir.int<1> : !s32i loc(#loc89)
        %22 = cir.unary(minus, %21) : !s32i, !s32i loc(#loc90)
        cir.call @exit(%22) : (!s32i) -> () extra(#fn_attr) loc(#loc88)
      } loc(#loc133)
    } loc(#loc131)
    %6 = cir.const #cir.int<1> : !s32i loc(#loc91)
    %7 = cir.load %0 : !cir.ptr<!cir.ptr<!ty__twoIntsStruct>>, !cir.ptr<!ty__twoIntsStruct> loc(#loc92)
    %8 = cir.get_member %7[0] {name = "intOne"} : !cir.ptr<!ty__twoIntsStruct> -> !cir.ptr<!s32i> loc(#loc30)
    cir.store %6, %8 : !s32i, !cir.ptr<!s32i> loc(#loc134)
    %9 = cir.const #cir.int<2> : !s32i loc(#loc93)
    %10 = cir.load %0 : !cir.ptr<!cir.ptr<!ty__twoIntsStruct>>, !cir.ptr<!ty__twoIntsStruct> loc(#loc94)
    %11 = cir.get_member %10[1] {name = "intTwo"} : !cir.ptr<!ty__twoIntsStruct> -> !cir.ptr<!s32i> loc(#loc33)
    cir.store %9, %11 : !s32i, !cir.ptr<!s32i> loc(#loc135)
    %12 = cir.load %0 : !cir.ptr<!cir.ptr<!ty__twoIntsStruct>>, !cir.ptr<!ty__twoIntsStruct> loc(#loc95)
    cir.call @printStructLine(%12) : (!cir.ptr<!ty__twoIntsStruct>) -> () loc(#loc96)
    %13 = cir.get_global @free : !cir.ptr<!cir.func<!void (!cir.ptr<!void>)>> loc(#loc97)
    %14 = cir.load %0 : !cir.ptr<!cir.ptr<!ty__twoIntsStruct>>, !cir.ptr<!ty__twoIntsStruct> loc(#loc98)
    %15 = cir.cast(bitcast, %14 : !cir.ptr<!ty__twoIntsStruct>), !cir.ptr<!void> loc(#loc98)
    cir.call @free(%15) : (!cir.ptr<!void>) -> () extra(#fn_attr) loc(#loc97)
    cir.return loc(#loc73)
  } loc(#loc125)
} loc(#loc)
#loc = loc("/home/ladisgin/git_proj/juliet-c/testcases/CWE122_Heap_Based_Buffer_Overflow/s11/CWE122_Heap_Based_Buffer_Overflow__sizeof_struct_01.c":0:0)
#loc1 = loc("/usr/include/stdlib.h":672:1)
#loc2 = loc("/usr/include/stdlib.h":672:45)
#loc3 = loc("/usr/include/stdlib.h":756:1)
#loc4 = loc("/usr/include/stdlib.h":756:70)
#loc5 = loc("../../../testcasesupport/std_testcase_io.h":40:1)
#loc6 = loc("../../../testcasesupport/std_testcase_io.h":40:63)
#loc7 = loc("/usr/include/stdlib.h":687:1)
#loc8 = loc("/usr/include/stdlib.h":687:32)
#loc9 = loc("CWE122_Heap_Based_Buffer_Overflow__sizeof_struct_01.c":21:1)
#loc10 = loc("CWE122_Heap_Based_Buffer_Overflow__sizeof_struct_01.c":35:1)
#loc11 = loc("CWE122_Heap_Based_Buffer_Overflow__sizeof_struct_01.c":23:5)
#loc12 = loc("CWE122_Heap_Based_Buffer_Overflow__sizeof_struct_01.c":23:21)
#loc13 = loc("CWE122_Heap_Based_Buffer_Overflow__sizeof_struct_01.c":25:12)
#loc14 = loc("CWE122_Heap_Based_Buffer_Overflow__sizeof_struct_01.c":25:5)
#loc15 = loc("CWE122_Heap_Based_Buffer_Overflow__sizeof_struct_01.c":28:29)
#loc16 = loc("CWE122_Heap_Based_Buffer_Overflow__sizeof_struct_01.c":28:36)
#loc17 = loc("CWE122_Heap_Based_Buffer_Overflow__sizeof_struct_01.c":28:47)
#loc18 = loc("CWE122_Heap_Based_Buffer_Overflow__sizeof_struct_01.c":28:48)
#loc19 = loc("CWE122_Heap_Based_Buffer_Overflow__sizeof_struct_01.c":28:5)
#loc20 = loc("CWE122_Heap_Based_Buffer_Overflow__sizeof_struct_01.c":29:5)
#loc21 = loc("CWE122_Heap_Based_Buffer_Overflow__sizeof_struct_01.c":29:33)
#loc22 = loc("CWE122_Heap_Based_Buffer_Overflow__sizeof_struct_01.c":29:9)
#loc23 = loc("CWE122_Heap_Based_Buffer_Overflow__sizeof_struct_01.c":29:17)
#loc24 = loc("CWE122_Heap_Based_Buffer_Overflow__sizeof_struct_01.c":29:23)
#loc25 = loc("CWE122_Heap_Based_Buffer_Overflow__sizeof_struct_01.c":29:24)
#loc26 = loc("CWE122_Heap_Based_Buffer_Overflow__sizeof_struct_01.c":29:30)
#loc27 = loc("CWE122_Heap_Based_Buffer_Overflow__sizeof_struct_01.c":29:29)
#loc28 = loc("CWE122_Heap_Based_Buffer_Overflow__sizeof_struct_01.c":30:20)
#loc29 = loc("CWE122_Heap_Based_Buffer_Overflow__sizeof_struct_01.c":30:5)
#loc30 = loc("../../../testcasesupport/std_testcase.h":98:9)
#loc31 = loc("CWE122_Heap_Based_Buffer_Overflow__sizeof_struct_01.c":31:20)
#loc32 = loc("CWE122_Heap_Based_Buffer_Overflow__sizeof_struct_01.c":31:5)
#loc33 = loc("../../../testcasesupport/std_testcase.h":99:9)
#loc34 = loc("CWE122_Heap_Based_Buffer_Overflow__sizeof_struct_01.c":33:21)
#loc35 = loc("CWE122_Heap_Based_Buffer_Overflow__sizeof_struct_01.c":33:5)
#loc36 = loc("CWE122_Heap_Based_Buffer_Overflow__sizeof_struct_01.c":34:5)
#loc37 = loc("CWE122_Heap_Based_Buffer_Overflow__sizeof_struct_01.c":34:10)
#loc38 = loc("CWE122_Heap_Based_Buffer_Overflow__sizeof_struct_01.c":57:1)
#loc39 = loc("CWE122_Heap_Based_Buffer_Overflow__sizeof_struct_01.c":60:1)
#loc40 = loc("CWE122_Heap_Based_Buffer_Overflow__sizeof_struct_01.c":59:5)
#loc41 = loc("CWE122_Heap_Based_Buffer_Overflow__sizeof_struct_01.c":59:13)
#loc42 = loc("/usr/include/stdlib.h":575:1)
#loc43 = loc("/usr/include/stdlib.h":575:41)
#loc44 = loc("/usr/include/time.h":76:1)
#loc45 = loc("/usr/include/time.h":76:38)
#loc46 = loc("../../../testcasesupport/std_testcase_io.h":14:1)
#loc47 = loc("../../../testcasesupport/std_testcase_io.h":14:33)
#loc48 = loc("CWE122_Heap_Based_Buffer_Overflow__sizeof_struct_01.c":77:15)
#loc49 = loc("CWE122_Heap_Based_Buffer_Overflow__sizeof_struct_01.c":79:15)
#loc50 = loc("CWE122_Heap_Based_Buffer_Overflow__sizeof_struct_01.c":82:15)
#loc51 = loc("CWE122_Heap_Based_Buffer_Overflow__sizeof_struct_01.c":84:15)
#loc52 = loc("CWE122_Heap_Based_Buffer_Overflow__sizeof_struct_01.c":72:1)
#loc53 = loc("CWE122_Heap_Based_Buffer_Overflow__sizeof_struct_01.c":87:1)
#loc58 = loc("CWE122_Heap_Based_Buffer_Overflow__sizeof_struct_01.c":73:1)
#loc59 = loc("CWE122_Heap_Based_Buffer_Overflow__sizeof_struct_01.c":75:27)
#loc60 = loc("CWE122_Heap_Based_Buffer_Overflow__sizeof_struct_01.c":75:22)
#loc61 = loc("CWE122_Heap_Based_Buffer_Overflow__sizeof_struct_01.c":75:5)
#loc62 = loc("CWE122_Heap_Based_Buffer_Overflow__sizeof_struct_01.c":77:5)
#loc63 = loc("CWE122_Heap_Based_Buffer_Overflow__sizeof_struct_01.c":78:5)
#loc64 = loc("CWE122_Heap_Based_Buffer_Overflow__sizeof_struct_01.c":78:62)
#loc65 = loc("CWE122_Heap_Based_Buffer_Overflow__sizeof_struct_01.c":79:5)
#loc66 = loc("CWE122_Heap_Based_Buffer_Overflow__sizeof_struct_01.c":82:5)
#loc67 = loc("CWE122_Heap_Based_Buffer_Overflow__sizeof_struct_01.c":83:5)
#loc68 = loc("CWE122_Heap_Based_Buffer_Overflow__sizeof_struct_01.c":83:61)
#loc69 = loc("CWE122_Heap_Based_Buffer_Overflow__sizeof_struct_01.c":84:5)
#loc70 = loc("CWE122_Heap_Based_Buffer_Overflow__sizeof_struct_01.c":86:12)
#loc71 = loc("CWE122_Heap_Based_Buffer_Overflow__sizeof_struct_01.c":86:5)
#loc72 = loc("CWE122_Heap_Based_Buffer_Overflow__sizeof_struct_01.c":42:1)
#loc73 = loc("CWE122_Heap_Based_Buffer_Overflow__sizeof_struct_01.c":55:1)
#loc74 = loc("CWE122_Heap_Based_Buffer_Overflow__sizeof_struct_01.c":44:5)
#loc75 = loc("CWE122_Heap_Based_Buffer_Overflow__sizeof_struct_01.c":44:21)
#loc76 = loc("CWE122_Heap_Based_Buffer_Overflow__sizeof_struct_01.c":46:12)
#loc77 = loc("CWE122_Heap_Based_Buffer_Overflow__sizeof_struct_01.c":46:5)
#loc78 = loc("CWE122_Heap_Based_Buffer_Overflow__sizeof_struct_01.c":48:29)
#loc79 = loc("CWE122_Heap_Based_Buffer_Overflow__sizeof_struct_01.c":48:36)
#loc80 = loc("CWE122_Heap_Based_Buffer_Overflow__sizeof_struct_01.c":48:48)
#loc81 = loc("CWE122_Heap_Based_Buffer_Overflow__sizeof_struct_01.c":48:49)
#loc82 = loc("CWE122_Heap_Based_Buffer_Overflow__sizeof_struct_01.c":48:5)
#loc83 = loc("CWE122_Heap_Based_Buffer_Overflow__sizeof_struct_01.c":49:5)
#loc84 = loc("CWE122_Heap_Based_Buffer_Overflow__sizeof_struct_01.c":49:33)
#loc85 = loc("CWE122_Heap_Based_Buffer_Overflow__sizeof_struct_01.c":49:9)
#loc86 = loc("CWE122_Heap_Based_Buffer_Overflow__sizeof_struct_01.c":49:17)
#loc87 = loc("CWE122_Heap_Based_Buffer_Overflow__sizeof_struct_01.c":49:23)
#loc88 = loc("CWE122_Heap_Based_Buffer_Overflow__sizeof_struct_01.c":49:24)
#loc89 = loc("CWE122_Heap_Based_Buffer_Overflow__sizeof_struct_01.c":49:30)
#loc90 = loc("CWE122_Heap_Based_Buffer_Overflow__sizeof_struct_01.c":49:29)
#loc91 = loc("CWE122_Heap_Based_Buffer_Overflow__sizeof_struct_01.c":50:20)
#loc92 = loc("CWE122_Heap_Based_Buffer_Overflow__sizeof_struct_01.c":50:5)
#loc93 = loc("CWE122_Heap_Based_Buffer_Overflow__sizeof_struct_01.c":51:20)
#loc94 = loc("CWE122_Heap_Based_Buffer_Overflow__sizeof_struct_01.c":51:5)
#loc95 = loc("CWE122_Heap_Based_Buffer_Overflow__sizeof_struct_01.c":53:21)
#loc96 = loc("CWE122_Heap_Based_Buffer_Overflow__sizeof_struct_01.c":53:5)
#loc97 = loc("CWE122_Heap_Based_Buffer_Overflow__sizeof_struct_01.c":54:5)
#loc98 = loc("CWE122_Heap_Based_Buffer_Overflow__sizeof_struct_01.c":54:10)
#loc99 = loc(fused[#loc1, #loc2])
#loc100 = loc(fused[#loc3, #loc4])
#loc101 = loc(fused[#loc5, #loc6])
#loc102 = loc(fused[#loc7, #loc8])
#loc103 = loc(fused[#loc9, #loc10])
#loc104 = loc(fused[#loc11, #loc12])
#loc105 = loc(fused[#loc14, #loc13])
#loc106 = loc(fused[#loc16, #loc17])
#loc107 = loc(fused[#loc15, #loc18])
#loc108 = loc(fused[#loc19, #loc18])
#loc109 = loc(fused[#loc20, #loc21])
#loc110 = loc(fused[#loc22, #loc23])
#loc111 = loc(fused[#loc24, #loc21])
#loc112 = loc(fused[#loc29, #loc28])
#loc113 = loc(fused[#loc32, #loc31])
#loc114 = loc(fused[#loc38, #loc39])
#loc115 = loc(fused[#loc40, #loc41])
#loc116 = loc(fused[#loc42, #loc43])
#loc117 = loc(fused[#loc44, #loc45])
#loc118 = loc(fused[#loc46, #loc47])
#loc119 = loc(fused[#loc52, #loc53])
#loc122 = loc(fused[#loc63, #loc64])
#loc123 = loc(fused[#loc67, #loc68])
#loc124 = loc(fused[#loc71, #loc70])
#loc125 = loc(fused[#loc72, #loc73])
#loc126 = loc(fused[#loc74, #loc75])
#loc127 = loc(fused[#loc77, #loc76])
#loc128 = loc(fused[#loc79, #loc80])
#loc129 = loc(fused[#loc78, #loc81])
#loc130 = loc(fused[#loc82, #loc81])
#loc131 = loc(fused[#loc83, #loc84])
#loc132 = loc(fused[#loc85, #loc86])
#loc133 = loc(fused[#loc87, #loc84])
#loc134 = loc(fused[#loc92, #loc91])
#loc135 = loc(fused[#loc94, #loc93])
