clang: warning: argument unused during compilation: '-c' [-Wunused-command-line-argument]
warning: unknown warning option '-Wno-terminate' [-Wunknown-warning-option]
clang: /workspaces/clangir/clang/lib/CIR/CodeGen/CIRGenException.cpp:788: mlir::Block *clang::CIRGen::CIRGenFunction::getEHDispatchBlock(EHScopeStack::stable_iterator, cir::TryOp): Assertion `callWithExceptionCtx && "expected call information"' failed.
PLEASE submit a bug report to https://github.com/llvm/llvm-project/issues/ and include the crash backtrace, preprocessed source, and associated run script.
Stack dump:
0.	Program arguments: /workspaces/clangir/install/bin/clang -S -Xclang -emit-cir-flat -std=c++11 -Wno-terminate -std=c++11 -I ../../testcasesupport -c CWE396_Catch_Generic_Exception__dotdotdot_09.cpp -o /workspaces/juliet-c/testcases/CWE396_Catch_Generic_Exception/.CWE396_Catch_Generic_Exception__dotdotdot_09.o.cir
1.	<eof> parser at end of file
2.	CWE396_Catch_Generic_Exception__dotdotdot_09.cpp:22:11: LLVM IR generation of declaration 'CWE396_Catch_Generic_Exception__dotdotdot_09'
Stack dump without symbol names (ensure you have llvm-symbolizer in your PATH or set the environment var `LLVM_SYMBOLIZER_PATH` to point to it):
0  clang     0x00005614a6783b68 llvm::sys::PrintStackTrace(llvm::raw_ostream&, int) + 40
1  clang     0x00005614a678173e llvm::sys::RunSignalHandlers() + 238
2  clang     0x00005614a66f2946
3  libc.so.6 0x00007f782f845330
4  libc.so.6 0x00007f782f89eb2c pthread_kill + 284
5  libc.so.6 0x00007f782f84527e gsignal + 30
6  libc.so.6 0x00007f782f8288ff abort + 223
7  libc.so.6 0x00007f782f82881b
8  libc.so.6 0x00007f782f83b517
9  clang     0x00005614a7b86fab clang::CIRGen::CIRGenFunction::getEHDispatchBlock(clang::CIRGen::EHScopeStack::stable_iterator, cir::TryOp) + 1979
10 clang     0x00005614a7b75949 clang::CIRGen::CIRGenFunction::PopCleanupBlock(bool) + 2041
11 clang     0x00005614a7b74e1d clang::CIRGen::CIRGenFunction::DeactivateCleanupBlock(clang::CIRGen::EHScopeStack::stable_iterator, mlir::Operation*) + 173
12 clang     0x00005614a7b8490e clang::CIRGen::CIRGenFunction::emitAnyExprToExn(clang::Expr const*, clang::CIRGen::Address) + 382
13 clang     0x00005614a7bfa769
14 clang     0x00005614a7bd5064
15 clang     0x00005614a7be3050
16 clang     0x00005614a8cefc33 cir::ScopeOp::build(mlir::OpBuilder&, mlir::OperationState&, llvm::function_ref<void (mlir::OpBuilder&, mlir::Type&, mlir::Location)>) + 147
17 clang     0x00005614a7bdb15e
18 clang     0x00005614a7bcfd1f clang::CIRGen::CIRGenFunction::emitScalarExpr(clang::Expr const*) + 63
19 clang     0x00005614a7b917e2 clang::CIRGen::CIRGenFunction::emitAnyExpr(clang::Expr const*, clang::CIRGen::AggValueSlot, bool) + 66
20 clang     0x00005614a7b8b54a clang::CIRGen::CIRGenFunction::emitIgnoredExpr(clang::Expr const*) + 122
21 clang     0x00005614a7c02518 clang::CIRGen::CIRGenFunction::emitStmt(clang::Stmt const*, bool, llvm::ArrayRef<clang::Attr const*>) + 120
22 clang     0x00005614a7c02bd4 clang::CIRGen::CIRGenFunction::emitSimpleStmt(clang::Stmt const*, bool) + 356
23 clang     0x00005614a7c024b0 clang::CIRGen::CIRGenFunction::emitStmt(clang::Stmt const*, bool, llvm::ArrayRef<clang::Attr const*>) + 16
24 clang     0x00005614a7b9fa4b
25 clang     0x00005614a8cef888 cir::IfOp::build(mlir::OpBuilder&, mlir::OperationState&, mlir::Value, bool, llvm::function_ref<void (mlir::OpBuilder&, mlir::Location)>, llvm::function_ref<void (mlir::OpBuilder&, mlir::Location)>) + 152
26 clang     0x00005614a7b99a1a
27 clang     0x00005614a7b99595 clang::CIRGen::CIRGenFunction::emitIfOnBoolExpr(clang::Expr const*, llvm::function_ref<void (mlir::OpBuilder&, mlir::Location)>, mlir::Location, llvm::function_ref<void (mlir::OpBuilder&, mlir::Location)>, std::optional<mlir::Location>) + 245
28 clang     0x00005614a7b9947c clang::CIRGen::CIRGenFunction::emitIfOnBoolExpr(clang::Expr const*, clang::Stmt const*, clang::Stmt const*) + 396
29 clang     0x00005614a7c06ada
30 clang     0x00005614a8cefe86 cir::ScopeOp::build(mlir::OpBuilder&, mlir::OperationState&, llvm::function_ref<void (mlir::OpBuilder&, mlir::Location)>) + 134
31 clang     0x00005614a7c02fce clang::CIRGen::CIRGenFunction::emitIfStmt(clang::IfStmt const&) + 286
32 clang     0x00005614a7c02587 clang::CIRGen::CIRGenFunction::emitStmt(clang::Stmt const*, bool, llvm::ArrayRef<clang::Attr const*>) + 231
33 clang     0x00005614a7c02bd4 clang::CIRGen::CIRGenFunction::emitSimpleStmt(clang::Stmt const*, bool) + 356
34 clang     0x00005614a7c024b0 clang::CIRGen::CIRGenFunction::emitStmt(clang::Stmt const*, bool, llvm::ArrayRef<clang::Attr const*>) + 16
35 clang     0x00005614a7b84f2d clang::CIRGen::CIRGenFunction::emitCXXTryStmtUnderScope(clang::CXXTryStmt const&) + 541
36 clang     0x00005614a7b84c23 clang::CIRGen::CIRGenFunction::emitCXXTryStmt(clang::CXXTryStmt const&) + 275
37 clang     0x00005614a7c02bd4 clang::CIRGen::CIRGenFunction::emitSimpleStmt(clang::Stmt const*, bool) + 356
38 clang     0x00005614a7c024b0 clang::CIRGen::CIRGenFunction::emitStmt(clang::Stmt const*, bool, llvm::ArrayRef<clang::Attr const*>) + 16
39 clang     0x00005614a7b9fa4b
40 clang     0x00005614a8cef888 cir::IfOp::build(mlir::OpBuilder&, mlir::OperationState&, mlir::Value, bool, llvm::function_ref<void (mlir::OpBuilder&, mlir::Location)>, llvm::function_ref<void (mlir::OpBuilder&, mlir::Location)>) + 152
41 clang     0x00005614a7b99a1a
42 clang     0x00005614a7b99595 clang::CIRGen::CIRGenFunction::emitIfOnBoolExpr(clang::Expr const*, llvm::function_ref<void (mlir::OpBuilder&, mlir::Location)>, mlir::Location, llvm::function_ref<void (mlir::OpBuilder&, mlir::Location)>, std::optional<mlir::Location>) + 245
43 clang     0x00005614a7b9947c clang::CIRGen::CIRGenFunction::emitIfOnBoolExpr(clang::Expr const*, clang::Stmt const*, clang::Stmt const*) + 396
44 clang     0x00005614a7c06ada
45 clang     0x00005614a8cefe86 cir::ScopeOp::build(mlir::OpBuilder&, mlir::OperationState&, llvm::function_ref<void (mlir::OpBuilder&, mlir::Location)>) + 134
46 clang     0x00005614a7c02fce clang::CIRGen::CIRGenFunction::emitIfStmt(clang::IfStmt const&) + 286
47 clang     0x00005614a7c02587 clang::CIRGen::CIRGenFunction::emitStmt(clang::Stmt const*, bool, llvm::ArrayRef<clang::Attr const*>) + 231
48 clang     0x00005614a7c02284 clang::CIRGen::CIRGenFunction::emitCompoundStmtWithoutScope(clang::CompoundStmt const&, bool, clang::CIRGen::AggValueSlot) + 260
49 clang     0x00005614a7bec81a clang::CIRGen::CIRGenFunction::generateCode(clang::GlobalDecl, cir::FuncOp, clang::CIRGen::CIRGenFunctionInfo const&) + 1514
50 clang     0x00005614a7b3f839 clang::CIRGen::CIRGenModule::emitGlobalFunctionDefinition(clang::GlobalDecl, mlir::Operation*) + 393
51 clang     0x00005614a7b3d968 clang::CIRGen::CIRGenModule::emitGlobal(clang::GlobalDecl) + 1656
52 clang     0x00005614a7b4828c clang::CIRGen::CIRGenModule::emitTopLevelDecl(clang::Decl*) + 236
53 clang     0x00005614a7b4816a clang::CIRGen::CIRGenModule::emitDeclContext(clang::DeclContext const*) + 58
54 clang     0x00005614a7b3a4af cir::CIRGenerator::HandleTopLevelDecl(clang::DeclGroupRef) + 159
55 clang     0x00005614a7a2c9e1
56 clang     0x00005614a9b2eada clang::ParseAST(clang::Sema&, bool, bool) + 826
57 clang     0x00005614a7249d36 clang::FrontendAction::Execute() + 38
58 clang     0x00005614a71b53ad clang::CompilerInstance::ExecuteAction(clang::FrontendAction&) + 1149
59 clang     0x00005614a7332edf clang::ExecuteCompilerInvocation(clang::CompilerInstance*) + 815
60 clang     0x00005614a5555a7a cc1_main(llvm::ArrayRef<char const*>, char const*, void*) + 6074
61 clang     0x00005614a555206d
62 clang     0x00005614a6ffc339
63 clang     0x00005614a66f2686 llvm::CrashRecoveryContext::RunSafely(llvm::function_ref<void ()>) + 150
64 clang     0x00005614a6ffb892 clang::driver::CC1Command::Execute(llvm::ArrayRef<std::optional<llvm::StringRef>>, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char>>*, bool*) const + 242
65 clang     0x00005614a6fb7c27 clang::driver::Compilation::ExecuteCommand(clang::driver::Command const&, clang::driver::Command const*&, bool) const + 455
66 clang     0x00005614a6fb7f17 clang::driver::Compilation::ExecuteJobs(clang::driver::JobList const&, llvm::SmallVectorImpl<std::pair<int, clang::driver::Command const*>>&, bool) const + 135
67 clang     0x00005614a6fd7928 clang::driver::Driver::ExecuteCompilation(clang::driver::Compilation&, llvm::SmallVectorImpl<std::pair<int, clang::driver::Command const*>>&) + 904
68 clang     0x00005614a55516ba clang_main(int, char**, llvm::ToolContext const&) + 6090
69 clang     0x00005614a5561147 main + 87
70 libc.so.6 0x00007f782f82a1ca
71 libc.so.6 0x00007f782f82a28b __libc_start_main + 139
72 clang     0x00005614a554faa5 _start + 37
clang: error: clang frontend command failed with exit code 134 (use -v to see invocation)
clang version 21.0.0git (git@github.com:llvm/clangir.git 4e7a2236d38507e994cbe5b79c888cf86427e7db)
Target: x86_64-unknown-linux-gnu
Thread model: posix
InstalledDir: /workspaces/clangir/install/bin
Build config: +assertions
clang: error: unable to execute command: Aborted (core dumped)
clang: note: diagnostic msg: Error generating preprocessed source(s).
