!s32i = !cir.int<s, 32>
!s8i = !cir.int<s, 8>
#fn_attr = #cir<extra({nothrow = #cir.nothrow})>
#fn_attr1 = #cir<extra({inline = #cir.inline<no>, nothrow = #cir.nothrow, optnone = #cir.optnone, uwtable = #cir.uwtable<async>})>
module @"/workspaces/juliet-c/testcases/CWE390_Error_Without_Action/CWE390_Error_Without_Action__sqrt_06.c" attributes {cir.lang = #cir.lang<c>, cir.sob = #cir.signed_overflow_behavior<undefined>, cir.triple = "x86_64-unknown-linux-gnu", cir.type_size_info = #cir.type_size_info<char = 8, int = 32, size_t = 64>, cir.uwtable = #cir.uwtable<async>, dlti.dl_spec = #dlti.dl_spec<!llvm.ptr<271> = dense<32> : vector<4xi64>, !llvm.ptr<272> = dense<64> : vector<4xi64>, i128 = dense<128> : vector<2xi64>, i64 = dense<64> : vector<2xi64>, f16 = dense<16> : vector<2xi64>, i32 = dense<32> : vector<2xi64>, f128 = dense<128> : vector<2xi64>, f64 = dense<64> : vector<2xi64>, i1 = dense<8> : vector<2xi64>, i8 = dense<8> : vector<2xi64>, i16 = dense<16> : vector<2xi64>, f80 = dense<128> : vector<2xi64>, !llvm.ptr<270> = dense<32> : vector<4xi64>, !llvm.ptr = dense<64> : vector<4xi64>, "dlti.endianness" = "little", "dlti.mangling_mode" = "e", "dlti.stack_alignment" = 128 : i64>} {
  cir.func private @__errno_location() -> !cir.ptr<!s32i> extra(#fn_attr) loc(#loc103)
  cir.func private @sqrt(!cir.double) -> !cir.double extra(#fn_attr) loc(#loc3)
  cir.func private @printDoubleLine(!cir.double) loc(#loc104)
  cir.func no_proto @CWE390_Error_Without_Action__sqrt_06_bad() extra(#fn_attr1) {
    %0 = cir.alloca !cir.double, !cir.ptr<!cir.double>, ["doubleNumber"] {alignment = 8 : i64} loc(#loc106)
    cir.br ^bb1 loc(#loc107)
  ^bb1:  // pred: ^bb0
    %1 = cir.const #cir.int<5> : !s32i loc(#loc12)
    %2 = cir.const #cir.int<5> : !s32i loc(#loc13)
    %3 = cir.cmp(eq, %1, %2) : !s32i, !cir.bool loc(#loc108)
    cir.brcond %3 ^bb2, ^bb9 loc(#loc109)
  ^bb2:  // pred: ^bb1
    cir.br ^bb3 loc(#loc110)
  ^bb3:  // pred: ^bb2
    %4 = cir.const #cir.int<0> : !s32i loc(#loc17)
    %5 = cir.call @__errno_location() : () -> !cir.ptr<!s32i> side_effect(const) extra(#fn_attr) loc(#loc18)
    cir.store %4, %5 : !s32i, !cir.ptr<!s32i> loc(#loc111)
    %6 = cir.get_global @sqrt : !cir.ptr<!cir.func<(!cir.double) -> !cir.double>> loc(#loc19)
    %7 = cir.const #cir.int<1> : !s32i loc(#loc20)
    %8 = cir.unary(minus, %7) nsw : !s32i, !s32i loc(#loc21)
    %9 = cir.cast(int_to_float, %8 : !s32i), !cir.double loc(#loc21)
    %10 = cir.call @sqrt(%9) : (!cir.double) -> !cir.double extra(#fn_attr) loc(#loc19)
    cir.store %10, %0 : !cir.double, !cir.ptr<!cir.double> loc(#loc112)
    cir.br ^bb4 loc(#loc113)
  ^bb4:  // pred: ^bb3
    %11 = cir.call @__errno_location() : () -> !cir.ptr<!s32i> side_effect(const) extra(#fn_attr) loc(#loc26)
    %12 = cir.load %11 : !cir.ptr<!s32i>, !s32i loc(#loc26)
    %13 = cir.const #cir.int<33> : !s32i loc(#loc27)
    %14 = cir.cmp(eq, %12, %13) : !s32i, !cir.bool loc(#loc114)
    cir.brcond %14 ^bb5, ^bb6 loc(#loc115)
  ^bb5:  // pred: ^bb4
    cir.br ^bb6 loc(#loc25)
  ^bb6:  // 2 preds: ^bb4, ^bb5
    cir.br ^bb7 loc(#loc25)
  ^bb7:  // pred: ^bb6
    %15 = cir.load %0 : !cir.ptr<!cir.double>, !cir.double loc(#loc29)
    cir.call @printDoubleLine(%15) : (!cir.double) -> () loc(#loc30)
    cir.br ^bb8 loc(#loc16)
  ^bb8:  // pred: ^bb7
    cir.br ^bb9 loc(#loc11)
  ^bb9:  // 2 preds: ^bb1, ^bb8
    cir.br ^bb10 loc(#loc11)
  ^bb10:  // pred: ^bb9
    cir.return loc(#loc7)
  } loc(#loc105)
  cir.func no_proto @CWE390_Error_Without_Action__sqrt_06_good() extra(#fn_attr1) {
    %0 = cir.get_global @good1 : !cir.ptr<!cir.func<()>> loc(#loc117)
    cir.call %0() : (!cir.ptr<!cir.func<()>>) -> () loc(#loc33)
    %1 = cir.get_global @good2 : !cir.ptr<!cir.func<()>> loc(#loc118)
    cir.call %1() : (!cir.ptr<!cir.func<()>>) -> () loc(#loc35)
    cir.return loc(#loc32)
  } loc(#loc116)
  cir.func private @printLine(!cir.ptr<!s8i>) loc(#loc119)
  cir.global "private" constant cir_private dsolocal @".str" = #cir.const_array<"Benign, fixed string\00" : !cir.array<!s8i x 21>> : !cir.array<!s8i x 21> {alignment = 1 : i64} loc(#loc39)
  cir.global "private" constant cir_private dsolocal @".str.1" = #cir.const_array<"sqrt() failed\00" : !cir.array<!s8i x 14>> : !cir.array<!s8i x 14> {alignment = 1 : i64} loc(#loc40)
  cir.func private @exit(!s32i) extra(#fn_attr) loc(#loc120)
  cir.func no_proto internal private @good1() extra(#fn_attr1) {
    %0 = cir.alloca !cir.double, !cir.ptr<!cir.double>, ["doubleNumber"] {alignment = 8 : i64} loc(#loc122)
    cir.br ^bb1 loc(#loc123)
  ^bb1:  // pred: ^bb0
    %1 = cir.const #cir.int<5> : !s32i loc(#loc49)
    %2 = cir.const #cir.int<5> : !s32i loc(#loc50)
    %3 = cir.cmp(ne, %1, %2) : !s32i, !cir.bool loc(#loc124)
    cir.brcond %3 ^bb2, ^bb3 loc(#loc125)
  ^bb2:  // pred: ^bb1
    %4 = cir.get_global @".str" : !cir.ptr<!cir.array<!s8i x 21>> loc(#loc39)
    %5 = cir.cast(array_to_ptrdecay, %4 : !cir.ptr<!cir.array<!s8i x 21>>), !cir.ptr<!s8i> loc(#loc39)
    cir.call @printLine(%5) : (!cir.ptr<!s8i>) -> () loc(#loc54)
    cir.br ^bb10 loc(#loc52)
  ^bb3:  // pred: ^bb1
    cir.br ^bb4 loc(#loc126)
  ^bb4:  // pred: ^bb3
    %6 = cir.const #cir.int<0> : !s32i loc(#loc57)
    %7 = cir.call @__errno_location() : () -> !cir.ptr<!s32i> side_effect(const) extra(#fn_attr) loc(#loc58)
    cir.store %6, %7 : !s32i, !cir.ptr<!s32i> loc(#loc127)
    %8 = cir.get_global @sqrt : !cir.ptr<!cir.func<(!cir.double) -> !cir.double>> loc(#loc59)
    %9 = cir.const #cir.int<1> : !s32i loc(#loc60)
    %10 = cir.unary(minus, %9) nsw : !s32i, !s32i loc(#loc61)
    %11 = cir.cast(int_to_float, %10 : !s32i), !cir.double loc(#loc61)
    %12 = cir.call @sqrt(%11) : (!cir.double) -> !cir.double extra(#fn_attr) loc(#loc59)
    cir.store %12, %0 : !cir.double, !cir.ptr<!cir.double> loc(#loc128)
    cir.br ^bb5 loc(#loc129)
  ^bb5:  // pred: ^bb4
    %13 = cir.call @__errno_location() : () -> !cir.ptr<!s32i> side_effect(const) extra(#fn_attr) loc(#loc66)
    %14 = cir.load %13 : !cir.ptr<!s32i>, !s32i loc(#loc66)
    %15 = cir.const #cir.int<33> : !s32i loc(#loc67)
    %16 = cir.cmp(eq, %14, %15) : !s32i, !cir.bool loc(#loc130)
    cir.brcond %16 ^bb6, ^bb7 loc(#loc131)
  ^bb6:  // pred: ^bb5
    %17 = cir.get_global @".str.1" : !cir.ptr<!cir.array<!s8i x 14>> loc(#loc40)
    %18 = cir.cast(array_to_ptrdecay, %17 : !cir.ptr<!cir.array<!s8i x 14>>), !cir.ptr<!s8i> loc(#loc40)
    cir.call @printLine(%18) : (!cir.ptr<!s8i>) -> () loc(#loc69)
    %19 = cir.get_global @exit : !cir.ptr<!cir.func<(!s32i)>> loc(#loc70)
    %20 = cir.const #cir.int<1> : !s32i loc(#loc71)
    cir.call @exit(%20) : (!s32i) -> () extra(#fn_attr) loc(#loc70)
    cir.br ^bb7 loc(#loc65)
  ^bb7:  // 2 preds: ^bb5, ^bb6
    cir.br ^bb8 loc(#loc65)
  ^bb8:  // pred: ^bb7
    %21 = cir.load %0 : !cir.ptr<!cir.double>, !cir.double loc(#loc72)
    cir.call @printDoubleLine(%21) : (!cir.double) -> () loc(#loc73)
    cir.br ^bb9 loc(#loc56)
  ^bb9:  // pred: ^bb8
    cir.br ^bb10 loc(#loc48)
  ^bb10:  // 2 preds: ^bb2, ^bb9
    cir.br ^bb11 loc(#loc48)
  ^bb11:  // pred: ^bb10
    cir.return loc(#loc44)
  } loc(#loc121)
  cir.func no_proto internal private @good2() extra(#fn_attr1) {
    %0 = cir.alloca !cir.double, !cir.ptr<!cir.double>, ["doubleNumber"] {alignment = 8 : i64} loc(#loc133)
    cir.br ^bb1 loc(#loc134)
  ^bb1:  // pred: ^bb0
    %1 = cir.const #cir.int<5> : !s32i loc(#loc80)
    %2 = cir.const #cir.int<5> : !s32i loc(#loc81)
    %3 = cir.cmp(eq, %1, %2) : !s32i, !cir.bool loc(#loc135)
    cir.brcond %3 ^bb2, ^bb9 loc(#loc136)
  ^bb2:  // pred: ^bb1
    cir.br ^bb3 loc(#loc137)
  ^bb3:  // pred: ^bb2
    %4 = cir.const #cir.int<0> : !s32i loc(#loc85)
    %5 = cir.call @__errno_location() : () -> !cir.ptr<!s32i> side_effect(const) extra(#fn_attr) loc(#loc86)
    cir.store %4, %5 : !s32i, !cir.ptr<!s32i> loc(#loc138)
    %6 = cir.get_global @sqrt : !cir.ptr<!cir.func<(!cir.double) -> !cir.double>> loc(#loc87)
    %7 = cir.const #cir.int<1> : !s32i loc(#loc88)
    %8 = cir.unary(minus, %7) nsw : !s32i, !s32i loc(#loc89)
    %9 = cir.cast(int_to_float, %8 : !s32i), !cir.double loc(#loc89)
    %10 = cir.call @sqrt(%9) : (!cir.double) -> !cir.double extra(#fn_attr) loc(#loc87)
    cir.store %10, %0 : !cir.double, !cir.ptr<!cir.double> loc(#loc139)
    cir.br ^bb4 loc(#loc140)
  ^bb4:  // pred: ^bb3
    %11 = cir.call @__errno_location() : () -> !cir.ptr<!s32i> side_effect(const) extra(#fn_attr) loc(#loc94)
    %12 = cir.load %11 : !cir.ptr<!s32i>, !s32i loc(#loc94)
    %13 = cir.const #cir.int<33> : !s32i loc(#loc95)
    %14 = cir.cmp(eq, %12, %13) : !s32i, !cir.bool loc(#loc141)
    cir.brcond %14 ^bb5, ^bb6 loc(#loc142)
  ^bb5:  // pred: ^bb4
    %15 = cir.get_global @".str.1" : !cir.ptr<!cir.array<!s8i x 14>> loc(#loc97)
    %16 = cir.cast(array_to_ptrdecay, %15 : !cir.ptr<!cir.array<!s8i x 14>>), !cir.ptr<!s8i> loc(#loc97)
    cir.call @printLine(%16) : (!cir.ptr<!s8i>) -> () loc(#loc98)
    %17 = cir.get_global @exit : !cir.ptr<!cir.func<(!s32i)>> loc(#loc99)
    %18 = cir.const #cir.int<1> : !s32i loc(#loc100)
    cir.call @exit(%18) : (!s32i) -> () extra(#fn_attr) loc(#loc99)
    cir.br ^bb6 loc(#loc93)
  ^bb6:  // 2 preds: ^bb4, ^bb5
    cir.br ^bb7 loc(#loc93)
  ^bb7:  // pred: ^bb6
    %19 = cir.load %0 : !cir.ptr<!cir.double>, !cir.double loc(#loc101)
    cir.call @printDoubleLine(%19) : (!cir.double) -> () loc(#loc102)
    cir.br ^bb8 loc(#loc84)
  ^bb8:  // pred: ^bb7
    cir.br ^bb9 loc(#loc79)
  ^bb9:  // 2 preds: ^bb1, ^bb8
    cir.br ^bb10 loc(#loc79)
  ^bb10:  // pred: ^bb9
    cir.return loc(#loc75)
  } loc(#loc132)
} loc(#loc)
#loc = loc("/workspaces/juliet-c/testcases/CWE390_Error_Without_Action/CWE390_Error_Without_Action__sqrt_06.c":0:0)
#loc1 = loc("/usr/include/errno.h":37:1)
#loc2 = loc("/usr/include/errno.h":37:45)
#loc3 = loc("/usr/include/x86_64-linux-gnu/bits/mathcalls.h":143:1)
#loc4 = loc("../../testcasesupport/std_testcase_io.h":38:1)
#loc5 = loc("../../testcasesupport/std_testcase_io.h":38:41)
#loc6 = loc("CWE390_Error_Without_Action__sqrt_06.c":28:1)
#loc7 = loc("CWE390_Error_Without_Action__sqrt_06.c":44:1)
#loc8 = loc("CWE390_Error_Without_Action__sqrt_06.c":33:13)
#loc9 = loc("CWE390_Error_Without_Action__sqrt_06.c":33:20)
#loc10 = loc("CWE390_Error_Without_Action__sqrt_06.c":30:5)
#loc11 = loc("CWE390_Error_Without_Action__sqrt_06.c":43:5)
#loc12 = loc("CWE390_Error_Without_Action__sqrt_06.c":30:8)
#loc13 = loc("CWE390_Error_Without_Action__sqrt_06.c":30:27)
#loc14 = loc("CWE390_Error_Without_Action__sqrt_06.c":31:5)
#loc15 = loc("CWE390_Error_Without_Action__sqrt_06.c":32:9)
#loc16 = loc("CWE390_Error_Without_Action__sqrt_06.c":42:9)
#loc17 = loc("CWE390_Error_Without_Action__sqrt_06.c":34:21)
#loc18 = loc("CWE390_Error_Without_Action__sqrt_06.c":34:13)
#loc19 = loc("CWE390_Error_Without_Action__sqrt_06.c":35:36)
#loc20 = loc("CWE390_Error_Without_Action__sqrt_06.c":35:50)
#loc21 = loc("CWE390_Error_Without_Action__sqrt_06.c":35:49)
#loc22 = loc("CWE390_Error_Without_Action__sqrt_06.c":35:13)
#loc23 = loc("CWE390_Error_Without_Action__sqrt_06.c":35:51)
#loc24 = loc("CWE390_Error_Without_Action__sqrt_06.c":37:13)
#loc25 = loc("CWE390_Error_Without_Action__sqrt_06.c":40:13)
#loc26 = loc("CWE390_Error_Without_Action__sqrt_06.c":37:17)
#loc27 = loc("CWE390_Error_Without_Action__sqrt_06.c":37:26)
#loc28 = loc("CWE390_Error_Without_Action__sqrt_06.c":38:13)
#loc29 = loc("CWE390_Error_Without_Action__sqrt_06.c":41:29)
#loc30 = loc("CWE390_Error_Without_Action__sqrt_06.c":41:13)
#loc31 = loc("CWE390_Error_Without_Action__sqrt_06.c":95:1)
#loc32 = loc("CWE390_Error_Without_Action__sqrt_06.c":99:1)
#loc33 = loc("CWE390_Error_Without_Action__sqrt_06.c":97:5)
#loc34 = loc("CWE390_Error_Without_Action__sqrt_06.c":97:11)
#loc35 = loc("CWE390_Error_Without_Action__sqrt_06.c":98:5)
#loc36 = loc("CWE390_Error_Without_Action__sqrt_06.c":98:11)
#loc37 = loc("../../testcasesupport/std_testcase_io.h":14:1)
#loc38 = loc("../../testcasesupport/std_testcase_io.h":14:33)
#loc39 = loc("CWE390_Error_Without_Action__sqrt_06.c":56:19)
#loc40 = loc("CWE390_Error_Without_Action__sqrt_06.c":67:27)
#loc41 = loc("/usr/include/stdlib.h":756:1)
#loc42 = loc("/usr/include/stdlib.h":756:70)
#loc43 = loc("CWE390_Error_Without_Action__sqrt_06.c":51:1)
#loc44 = loc("CWE390_Error_Without_Action__sqrt_06.c":73:1)
#loc45 = loc("CWE390_Error_Without_Action__sqrt_06.c":61:13)
#loc46 = loc("CWE390_Error_Without_Action__sqrt_06.c":61:20)
#loc47 = loc("CWE390_Error_Without_Action__sqrt_06.c":53:5)
#loc48 = loc("CWE390_Error_Without_Action__sqrt_06.c":72:5)
#loc49 = loc("CWE390_Error_Without_Action__sqrt_06.c":53:8)
#loc50 = loc("CWE390_Error_Without_Action__sqrt_06.c":53:27)
#loc51 = loc("CWE390_Error_Without_Action__sqrt_06.c":54:5)
#loc52 = loc("CWE390_Error_Without_Action__sqrt_06.c":57:5)
#loc53 = loc("CWE390_Error_Without_Action__sqrt_06.c":59:5)
#loc54 = loc("CWE390_Error_Without_Action__sqrt_06.c":56:9)
#loc55 = loc("CWE390_Error_Without_Action__sqrt_06.c":60:9)
#loc56 = loc("CWE390_Error_Without_Action__sqrt_06.c":71:9)
#loc57 = loc("CWE390_Error_Without_Action__sqrt_06.c":62:21)
#loc58 = loc("CWE390_Error_Without_Action__sqrt_06.c":62:13)
#loc59 = loc("CWE390_Error_Without_Action__sqrt_06.c":63:36)
#loc60 = loc("CWE390_Error_Without_Action__sqrt_06.c":63:50)
#loc61 = loc("CWE390_Error_Without_Action__sqrt_06.c":63:49)
#loc62 = loc("CWE390_Error_Without_Action__sqrt_06.c":63:13)
#loc63 = loc("CWE390_Error_Without_Action__sqrt_06.c":63:51)
#loc64 = loc("CWE390_Error_Without_Action__sqrt_06.c":65:13)
#loc65 = loc("CWE390_Error_Without_Action__sqrt_06.c":69:13)
#loc66 = loc("CWE390_Error_Without_Action__sqrt_06.c":65:17)
#loc67 = loc("CWE390_Error_Without_Action__sqrt_06.c":65:26)
#loc68 = loc("CWE390_Error_Without_Action__sqrt_06.c":66:13)
#loc69 = loc("CWE390_Error_Without_Action__sqrt_06.c":67:17)
#loc70 = loc("CWE390_Error_Without_Action__sqrt_06.c":68:17)
#loc71 = loc("CWE390_Error_Without_Action__sqrt_06.c":68:22)
#loc72 = loc("CWE390_Error_Without_Action__sqrt_06.c":70:29)
#loc73 = loc("CWE390_Error_Without_Action__sqrt_06.c":70:13)
#loc74 = loc("CWE390_Error_Without_Action__sqrt_06.c":76:1)
#loc75 = loc("CWE390_Error_Without_Action__sqrt_06.c":93:1)
#loc76 = loc("CWE390_Error_Without_Action__sqrt_06.c":81:13)
#loc77 = loc("CWE390_Error_Without_Action__sqrt_06.c":81:20)
#loc78 = loc("CWE390_Error_Without_Action__sqrt_06.c":78:5)
#loc79 = loc("CWE390_Error_Without_Action__sqrt_06.c":92:5)
#loc80 = loc("CWE390_Error_Without_Action__sqrt_06.c":78:8)
#loc81 = loc("CWE390_Error_Without_Action__sqrt_06.c":78:27)
#loc82 = loc("CWE390_Error_Without_Action__sqrt_06.c":79:5)
#loc83 = loc("CWE390_Error_Without_Action__sqrt_06.c":80:9)
#loc84 = loc("CWE390_Error_Without_Action__sqrt_06.c":91:9)
#loc85 = loc("CWE390_Error_Without_Action__sqrt_06.c":82:21)
#loc86 = loc("CWE390_Error_Without_Action__sqrt_06.c":82:13)
#loc87 = loc("CWE390_Error_Without_Action__sqrt_06.c":83:36)
#loc88 = loc("CWE390_Error_Without_Action__sqrt_06.c":83:50)
#loc89 = loc("CWE390_Error_Without_Action__sqrt_06.c":83:49)
#loc90 = loc("CWE390_Error_Without_Action__sqrt_06.c":83:13)
#loc91 = loc("CWE390_Error_Without_Action__sqrt_06.c":83:51)
#loc92 = loc("CWE390_Error_Without_Action__sqrt_06.c":85:13)
#loc93 = loc("CWE390_Error_Without_Action__sqrt_06.c":89:13)
#loc94 = loc("CWE390_Error_Without_Action__sqrt_06.c":85:17)
#loc95 = loc("CWE390_Error_Without_Action__sqrt_06.c":85:26)
#loc96 = loc("CWE390_Error_Without_Action__sqrt_06.c":86:13)
#loc97 = loc("CWE390_Error_Without_Action__sqrt_06.c":87:27)
#loc98 = loc("CWE390_Error_Without_Action__sqrt_06.c":87:17)
#loc99 = loc("CWE390_Error_Without_Action__sqrt_06.c":88:17)
#loc100 = loc("CWE390_Error_Without_Action__sqrt_06.c":88:22)
#loc101 = loc("CWE390_Error_Without_Action__sqrt_06.c":90:29)
#loc102 = loc("CWE390_Error_Without_Action__sqrt_06.c":90:13)
#loc103 = loc(fused[#loc1, #loc2])
#loc104 = loc(fused[#loc4, #loc5])
#loc105 = loc(fused[#loc6, #loc7])
#loc106 = loc(fused[#loc8, #loc9])
#loc107 = loc(fused[#loc10, #loc11])
#loc108 = loc(fused[#loc12, #loc13])
#loc109 = loc(fused[#loc14, #loc11])
#loc110 = loc(fused[#loc15, #loc16])
#loc111 = loc(fused[#loc18, #loc17])
#loc112 = loc(fused[#loc22, #loc23])
#loc113 = loc(fused[#loc24, #loc25])
#loc114 = loc(fused[#loc26, #loc27])
#loc115 = loc(fused[#loc28, #loc25])
#loc116 = loc(fused[#loc31, #loc32])
#loc117 = loc(fused[#loc33, #loc34])
#loc118 = loc(fused[#loc35, #loc36])
#loc119 = loc(fused[#loc37, #loc38])
#loc120 = loc(fused[#loc41, #loc42])
#loc121 = loc(fused[#loc43, #loc44])
#loc122 = loc(fused[#loc45, #loc46])
#loc123 = loc(fused[#loc47, #loc48])
#loc124 = loc(fused[#loc49, #loc50])
#loc125 = loc(fused[#loc51, #loc52, #loc53, #loc48])
#loc126 = loc(fused[#loc55, #loc56])
#loc127 = loc(fused[#loc58, #loc57])
#loc128 = loc(fused[#loc62, #loc63])
#loc129 = loc(fused[#loc64, #loc65])
#loc130 = loc(fused[#loc66, #loc67])
#loc131 = loc(fused[#loc68, #loc65])
#loc132 = loc(fused[#loc74, #loc75])
#loc133 = loc(fused[#loc76, #loc77])
#loc134 = loc(fused[#loc78, #loc79])
#loc135 = loc(fused[#loc80, #loc81])
#loc136 = loc(fused[#loc82, #loc79])
#loc137 = loc(fused[#loc83, #loc84])
#loc138 = loc(fused[#loc86, #loc85])
#loc139 = loc(fused[#loc90, #loc91])
#loc140 = loc(fused[#loc92, #loc93])
#loc141 = loc(fused[#loc94, #loc95])
#loc142 = loc(fused[#loc96, #loc93])
