!s32i = !cir.int<s, 32>
!s8i = !cir.int<s, 8>
!u64i = !cir.int<u, 64>
!u8i = !cir.int<u, 8>
!void = !cir.void
#fn_attr = #cir<extra({inline = #cir.inline<no>, nothrow = #cir.nothrow, optnone = #cir.optnone, uwtable = #cir.uwtable<async>})>
module @"/workspaces/juliet-c/testcases/CWE121_Stack_Based_Buffer_Overflow/s03/CWE121_Stack_Based_Buffer_Overflow__CWE805_char_alloca_loop_08.c" attributes {cir.lang = #cir.lang<c>, cir.sob = #cir.signed_overflow_behavior<undefined>, cir.triple = "x86_64-unknown-linux-gnu", cir.type_size_info = #cir.type_size_info<char = 8, int = 32, size_t = 64>, cir.uwtable = #cir.uwtable<async>, dlti.dl_spec = #dlti.dl_spec<i128 = dense<128> : vector<2xi64>, f80 = dense<128> : vector<2xi64>, !llvm.ptr<270> = dense<32> : vector<4xi64>, !llvm.ptr<271> = dense<32> : vector<4xi64>, i64 = dense<64> : vector<2xi64>, f128 = dense<128> : vector<2xi64>, !llvm.ptr<272> = dense<64> : vector<4xi64>, i32 = dense<32> : vector<2xi64>, i16 = dense<16> : vector<2xi64>, f64 = dense<64> : vector<2xi64>, f16 = dense<16> : vector<2xi64>, i1 = dense<8> : vector<2xi64>, !llvm.ptr = dense<64> : vector<4xi64>, i8 = dense<8> : vector<2xi64>, "dlti.stack_alignment" = 128 : i64, "dlti.mangling_mode" = "e", "dlti.endianness" = "little">} {
  cir.func private @printLine(!cir.ptr<!s8i>) loc(#loc195)
  cir.func no_proto @CWE121_Stack_Based_Buffer_Overflow__CWE805_char_alloca_loop_08_bad() extra(#fn_attr) {
    %0 = cir.alloca !cir.ptr<!s8i>, !cir.ptr<!cir.ptr<!s8i>>, ["data"] {alignment = 8 : i64} loc(#loc197)
    %1 = cir.alloca !cir.ptr<!s8i>, !cir.ptr<!cir.ptr<!s8i>>, ["dataBadBuffer", init] {alignment = 8 : i64} loc(#loc198)
    %2 = cir.const #cir.int<50> : !s32i loc(#loc8)
    %3 = cir.cast(integral, %2 : !s32i), !u64i loc(#loc8)
    %4 = cir.const #cir.int<1> : !u64i loc(#loc8)
    %5 = cir.binop(mul, %3, %4) : !u64i loc(#loc8)
    %6 = cir.alloca !u8i, !cir.ptr<!u8i>, %5 : !u64i, ["bi_alloca"] {alignment = 16 : i64} loc(#loc8)
    %7 = cir.alloca !cir.ptr<!s8i>, !cir.ptr<!cir.ptr<!s8i>>, ["dataGoodBuffer", init] {alignment = 8 : i64} loc(#loc199)
    %8 = cir.cast(bitcast, %6 : !cir.ptr<!u8i>), !cir.ptr<!void> loc(#loc8)
    %9 = cir.cast(bitcast, %8 : !cir.ptr<!void>), !cir.ptr<!s8i> loc(#loc8)
    cir.store %9, %1 : !cir.ptr<!s8i>, !cir.ptr<!cir.ptr<!s8i>> loc(#loc198)
    %10 = cir.const #cir.int<100> : !s32i loc(#loc10)
    %11 = cir.cast(integral, %10 : !s32i), !u64i loc(#loc10)
    %12 = cir.const #cir.int<1> : !u64i loc(#loc10)
    %13 = cir.binop(mul, %11, %12) : !u64i loc(#loc10)
    %14 = cir.alloca !u8i, !cir.ptr<!u8i>, %13 : !u64i, ["bi_alloca"] {alignment = 16 : i64} loc(#loc10)
    %15 = cir.cast(bitcast, %14 : !cir.ptr<!u8i>), !cir.ptr<!void> loc(#loc10)
    %16 = cir.cast(bitcast, %15 : !cir.ptr<!void>), !cir.ptr<!s8i> loc(#loc10)
    cir.store %16, %7 : !cir.ptr<!s8i>, !cir.ptr<!cir.ptr<!s8i>> loc(#loc199)
    cir.scope {
      %17 = cir.get_global @staticReturnsTrue : !cir.ptr<!cir.func<() -> !s32i>> loc(#loc201)
      %18 = cir.call %17() : (!cir.ptr<!cir.func<() -> !s32i>>) -> !s32i loc(#loc13)
      %19 = cir.cast(int_to_bool, %18 : !s32i), !cir.bool loc(#loc13)
      cir.if %19 {
        %20 = cir.load %1 : !cir.ptr<!cir.ptr<!s8i>>, !cir.ptr<!s8i> loc(#loc16)
        cir.store %20, %0 : !cir.ptr<!s8i>, !cir.ptr<!cir.ptr<!s8i>> loc(#loc203)
        %21 = cir.const #cir.int<0> : !s32i loc(#loc18)
        %22 = cir.cast(integral, %21 : !s32i), !s8i loc(#loc18)
        %23 = cir.load %0 : !cir.ptr<!cir.ptr<!s8i>>, !cir.ptr<!s8i> loc(#loc19)
        %24 = cir.const #cir.int<0> : !s32i loc(#loc20)
        %25 = cir.ptr_stride(%23 : !cir.ptr<!s8i>, %24 : !s32i), !cir.ptr<!s8i> loc(#loc21)
        cir.store %22, %25 : !s8i, !cir.ptr<!s8i> loc(#loc204)
      } loc(#loc202)
    } loc(#loc200)
    cir.scope {
      %17 = cir.alloca !u64i, !cir.ptr<!u64i>, ["i"] {alignment = 8 : i64} loc(#loc206)
      %18 = cir.alloca !cir.array<!s8i x 100>, !cir.ptr<!cir.array<!s8i x 100>>, ["source"] {alignment = 16 : i64} loc(#loc207)
      %19 = cir.cast(array_to_ptrdecay, %18 : !cir.ptr<!cir.array<!s8i x 100>>), !cir.ptr<!s8i> loc(#loc28)
      %20 = cir.cast(bitcast, %19 : !cir.ptr<!s8i>), !cir.ptr<!void> loc(#loc28)
      %21 = cir.const #cir.int<67> : !s32i loc(#loc29)
      %22 = cir.const #cir.int<100> : !s32i loc(#loc30)
      %23 = cir.const #cir.int<1> : !s32i loc(#loc31)
      %24 = cir.binop(sub, %22, %23) nsw : !s32i loc(#loc30)
      %25 = cir.cast(integral, %24 : !s32i), !u64i loc(#loc30)
      cir.libc.memset %25 bytes from %20 set to %21 : !cir.ptr<!void>, !s32i, !u64i loc(#loc208)
      %26 = cir.const #cir.int<0> : !s32i loc(#loc34)
      %27 = cir.cast(integral, %26 : !s32i), !s8i loc(#loc34)
      %28 = cir.const #cir.int<100> : !s32i loc(#loc35)
      %29 = cir.const #cir.int<1> : !s32i loc(#loc36)
      %30 = cir.binop(sub, %28, %29) nsw : !s32i loc(#loc35)
      %31 = cir.cast(array_to_ptrdecay, %18 : !cir.ptr<!cir.array<!s8i x 100>>), !cir.ptr<!s8i> loc(#loc37)
      %32 = cir.ptr_stride(%31 : !cir.ptr<!s8i>, %30 : !s32i), !cir.ptr<!s8i> loc(#loc37)
      cir.store %27, %32 : !s8i, !cir.ptr<!s8i> loc(#loc209)
      cir.scope {
        %41 = cir.const #cir.int<0> : !s32i loc(#loc40)
        %42 = cir.cast(integral, %41 : !s32i), !u64i loc(#loc40)
        cir.store %42, %17 : !u64i, !cir.ptr<!u64i> loc(#loc211)
        cir.for : cond {
          %43 = cir.load %17 : !cir.ptr<!u64i>, !u64i loc(#loc42)
          %44 = cir.const #cir.int<100> : !s32i loc(#loc43)
          %45 = cir.cast(integral, %44 : !s32i), !u64i loc(#loc43)
          %46 = cir.cmp(lt, %43, %45) : !u64i, !cir.bool loc(#loc212)
          cir.condition(%46) loc(#loc44)
        } body {
          cir.scope {
            %43 = cir.load %17 : !cir.ptr<!u64i>, !u64i loc(#loc46)
            %44 = cir.cast(array_to_ptrdecay, %18 : !cir.ptr<!cir.array<!s8i x 100>>), !cir.ptr<!s8i> loc(#loc47)
            %45 = cir.ptr_stride(%44 : !cir.ptr<!s8i>, %43 : !u64i), !cir.ptr<!s8i> loc(#loc47)
            %46 = cir.load %45 : !cir.ptr<!s8i>, !s8i loc(#loc47)
            %47 = cir.load %0 : !cir.ptr<!cir.ptr<!s8i>>, !cir.ptr<!s8i> loc(#loc48)
            %48 = cir.load %17 : !cir.ptr<!u64i>, !u64i loc(#loc49)
            %49 = cir.ptr_stride(%47 : !cir.ptr<!s8i>, %48 : !u64i), !cir.ptr<!s8i> loc(#loc50)
            cir.store %46, %49 : !s8i, !cir.ptr<!s8i> loc(#loc214)
          } loc(#loc213)
          cir.yield loc(#loc39)
        } step {
          %43 = cir.load %17 : !cir.ptr<!u64i>, !u64i loc(#loc52)
          %44 = cir.unary(inc, %43) : !u64i, !u64i loc(#loc53)
          cir.store %44, %17 : !u64i, !cir.ptr<!u64i> loc(#loc215)
          cir.yield loc(#loc210)
        } loc(#loc210)
      } loc(#loc210)
      %33 = cir.const #cir.int<0> : !s32i loc(#loc54)
      %34 = cir.cast(integral, %33 : !s32i), !s8i loc(#loc54)
      %35 = cir.load %0 : !cir.ptr<!cir.ptr<!s8i>>, !cir.ptr<!s8i> loc(#loc55)
      %36 = cir.const #cir.int<100> : !s32i loc(#loc56)
      %37 = cir.const #cir.int<1> : !s32i loc(#loc57)
      %38 = cir.binop(sub, %36, %37) nsw : !s32i loc(#loc56)
      %39 = cir.ptr_stride(%35 : !cir.ptr<!s8i>, %38 : !s32i), !cir.ptr<!s8i> loc(#loc58)
      cir.store %34, %39 : !s8i, !cir.ptr<!s8i> loc(#loc216)
      %40 = cir.load %0 : !cir.ptr<!cir.ptr<!s8i>>, !cir.ptr<!s8i> loc(#loc59)
      cir.call @printLine(%40) : (!cir.ptr<!s8i>) -> () loc(#loc60)
    } loc(#loc205)
    cir.return loc(#loc4)
  } loc(#loc196)
  cir.func no_proto @CWE121_Stack_Based_Buffer_Overflow__CWE805_char_alloca_loop_08_good() extra(#fn_attr) {
    %0 = cir.get_global @goodG2B1 : !cir.ptr<!cir.func<()>> loc(#loc218)
    cir.call %0() : (!cir.ptr<!cir.func<()>>) -> () loc(#loc63)
    %1 = cir.get_global @goodG2B2 : !cir.ptr<!cir.func<()>> loc(#loc219)
    cir.call %1() : (!cir.ptr<!cir.func<()>>) -> () loc(#loc65)
    cir.return loc(#loc62)
  } loc(#loc217)
  cir.func no_proto internal private @staticReturnsTrue() -> !s32i extra(#fn_attr) {
    %0 = cir.alloca !s32i, !cir.ptr<!s32i>, ["__retval"] {alignment = 4 : i64} loc(#loc68)
    %1 = cir.const #cir.int<1> : !s32i loc(#loc69)
    cir.store %1, %0 : !s32i, !cir.ptr<!s32i> loc(#loc221)
    %2 = cir.load %0 : !cir.ptr<!s32i>, !s32i loc(#loc221)
    cir.return %2 : !s32i loc(#loc221)
  } loc(#loc220)
  cir.global "private" constant cir_private dsolocal @".str" = #cir.const_array<"Benign, fixed string\00" : !cir.array<!s8i x 21>> : !cir.array<!s8i x 21> {alignment = 1 : i64} loc(#loc71)
  cir.func no_proto internal private @goodG2B1() extra(#fn_attr) {
    %0 = cir.alloca !cir.ptr<!s8i>, !cir.ptr<!cir.ptr<!s8i>>, ["data"] {alignment = 8 : i64} loc(#loc223)
    %1 = cir.alloca !cir.ptr<!s8i>, !cir.ptr<!cir.ptr<!s8i>>, ["dataBadBuffer", init] {alignment = 8 : i64} loc(#loc224)
    %2 = cir.const #cir.int<50> : !s32i loc(#loc77)
    %3 = cir.cast(integral, %2 : !s32i), !u64i loc(#loc77)
    %4 = cir.const #cir.int<1> : !u64i loc(#loc77)
    %5 = cir.binop(mul, %3, %4) : !u64i loc(#loc77)
    %6 = cir.alloca !u8i, !cir.ptr<!u8i>, %5 : !u64i, ["bi_alloca"] {alignment = 16 : i64} loc(#loc77)
    %7 = cir.alloca !cir.ptr<!s8i>, !cir.ptr<!cir.ptr<!s8i>>, ["dataGoodBuffer", init] {alignment = 8 : i64} loc(#loc225)
    %8 = cir.cast(bitcast, %6 : !cir.ptr<!u8i>), !cir.ptr<!void> loc(#loc77)
    %9 = cir.cast(bitcast, %8 : !cir.ptr<!void>), !cir.ptr<!s8i> loc(#loc77)
    cir.store %9, %1 : !cir.ptr<!s8i>, !cir.ptr<!cir.ptr<!s8i>> loc(#loc224)
    %10 = cir.const #cir.int<100> : !s32i loc(#loc79)
    %11 = cir.cast(integral, %10 : !s32i), !u64i loc(#loc79)
    %12 = cir.const #cir.int<1> : !u64i loc(#loc79)
    %13 = cir.binop(mul, %11, %12) : !u64i loc(#loc79)
    %14 = cir.alloca !u8i, !cir.ptr<!u8i>, %13 : !u64i, ["bi_alloca"] {alignment = 16 : i64} loc(#loc79)
    %15 = cir.cast(bitcast, %14 : !cir.ptr<!u8i>), !cir.ptr<!void> loc(#loc79)
    %16 = cir.cast(bitcast, %15 : !cir.ptr<!void>), !cir.ptr<!s8i> loc(#loc79)
    cir.store %16, %7 : !cir.ptr<!s8i>, !cir.ptr<!cir.ptr<!s8i>> loc(#loc225)
    cir.scope {
      %17 = cir.get_global @staticReturnsFalse : !cir.ptr<!cir.func<() -> !s32i>> loc(#loc227)
      %18 = cir.call %17() : (!cir.ptr<!cir.func<() -> !s32i>>) -> !s32i loc(#loc82)
      %19 = cir.cast(int_to_bool, %18 : !s32i), !cir.bool loc(#loc82)
      cir.if %19 {
        %20 = cir.get_global @".str" : !cir.ptr<!cir.array<!s8i x 21>> loc(#loc71)
        %21 = cir.cast(array_to_ptrdecay, %20 : !cir.ptr<!cir.array<!s8i x 21>>), !cir.ptr<!s8i> loc(#loc71)
        cir.call @printLine(%21) : (!cir.ptr<!s8i>) -> () loc(#loc87)
      } else {
        %20 = cir.load %7 : !cir.ptr<!cir.ptr<!s8i>>, !cir.ptr<!s8i> loc(#loc88)
        cir.store %20, %0 : !cir.ptr<!s8i>, !cir.ptr<!cir.ptr<!s8i>> loc(#loc229)
        %21 = cir.const #cir.int<0> : !s32i loc(#loc90)
        %22 = cir.cast(integral, %21 : !s32i), !s8i loc(#loc90)
        %23 = cir.load %0 : !cir.ptr<!cir.ptr<!s8i>>, !cir.ptr<!s8i> loc(#loc91)
        %24 = cir.const #cir.int<0> : !s32i loc(#loc92)
        %25 = cir.ptr_stride(%23 : !cir.ptr<!s8i>, %24 : !s32i), !cir.ptr<!s8i> loc(#loc93)
        cir.store %22, %25 : !s8i, !cir.ptr<!s8i> loc(#loc230)
      } loc(#loc228)
    } loc(#loc226)
    cir.scope {
      %17 = cir.alloca !u64i, !cir.ptr<!u64i>, ["i"] {alignment = 8 : i64} loc(#loc232)
      %18 = cir.alloca !cir.array<!s8i x 100>, !cir.ptr<!cir.array<!s8i x 100>>, ["source"] {alignment = 16 : i64} loc(#loc233)
      %19 = cir.cast(array_to_ptrdecay, %18 : !cir.ptr<!cir.array<!s8i x 100>>), !cir.ptr<!s8i> loc(#loc100)
      %20 = cir.cast(bitcast, %19 : !cir.ptr<!s8i>), !cir.ptr<!void> loc(#loc100)
      %21 = cir.const #cir.int<67> : !s32i loc(#loc101)
      %22 = cir.const #cir.int<100> : !s32i loc(#loc102)
      %23 = cir.const #cir.int<1> : !s32i loc(#loc103)
      %24 = cir.binop(sub, %22, %23) nsw : !s32i loc(#loc102)
      %25 = cir.cast(integral, %24 : !s32i), !u64i loc(#loc102)
      cir.libc.memset %25 bytes from %20 set to %21 : !cir.ptr<!void>, !s32i, !u64i loc(#loc234)
      %26 = cir.const #cir.int<0> : !s32i loc(#loc106)
      %27 = cir.cast(integral, %26 : !s32i), !s8i loc(#loc106)
      %28 = cir.const #cir.int<100> : !s32i loc(#loc107)
      %29 = cir.const #cir.int<1> : !s32i loc(#loc108)
      %30 = cir.binop(sub, %28, %29) nsw : !s32i loc(#loc107)
      %31 = cir.cast(array_to_ptrdecay, %18 : !cir.ptr<!cir.array<!s8i x 100>>), !cir.ptr<!s8i> loc(#loc109)
      %32 = cir.ptr_stride(%31 : !cir.ptr<!s8i>, %30 : !s32i), !cir.ptr<!s8i> loc(#loc109)
      cir.store %27, %32 : !s8i, !cir.ptr<!s8i> loc(#loc235)
      cir.scope {
        %41 = cir.const #cir.int<0> : !s32i loc(#loc112)
        %42 = cir.cast(integral, %41 : !s32i), !u64i loc(#loc112)
        cir.store %42, %17 : !u64i, !cir.ptr<!u64i> loc(#loc237)
        cir.for : cond {
          %43 = cir.load %17 : !cir.ptr<!u64i>, !u64i loc(#loc114)
          %44 = cir.const #cir.int<100> : !s32i loc(#loc115)
          %45 = cir.cast(integral, %44 : !s32i), !u64i loc(#loc115)
          %46 = cir.cmp(lt, %43, %45) : !u64i, !cir.bool loc(#loc238)
          cir.condition(%46) loc(#loc116)
        } body {
          cir.scope {
            %43 = cir.load %17 : !cir.ptr<!u64i>, !u64i loc(#loc118)
            %44 = cir.cast(array_to_ptrdecay, %18 : !cir.ptr<!cir.array<!s8i x 100>>), !cir.ptr<!s8i> loc(#loc119)
            %45 = cir.ptr_stride(%44 : !cir.ptr<!s8i>, %43 : !u64i), !cir.ptr<!s8i> loc(#loc119)
            %46 = cir.load %45 : !cir.ptr<!s8i>, !s8i loc(#loc119)
            %47 = cir.load %0 : !cir.ptr<!cir.ptr<!s8i>>, !cir.ptr<!s8i> loc(#loc120)
            %48 = cir.load %17 : !cir.ptr<!u64i>, !u64i loc(#loc121)
            %49 = cir.ptr_stride(%47 : !cir.ptr<!s8i>, %48 : !u64i), !cir.ptr<!s8i> loc(#loc122)
            cir.store %46, %49 : !s8i, !cir.ptr<!s8i> loc(#loc240)
          } loc(#loc239)
          cir.yield loc(#loc111)
        } step {
          %43 = cir.load %17 : !cir.ptr<!u64i>, !u64i loc(#loc124)
          %44 = cir.unary(inc, %43) : !u64i, !u64i loc(#loc125)
          cir.store %44, %17 : !u64i, !cir.ptr<!u64i> loc(#loc241)
          cir.yield loc(#loc236)
        } loc(#loc236)
      } loc(#loc236)
      %33 = cir.const #cir.int<0> : !s32i loc(#loc126)
      %34 = cir.cast(integral, %33 : !s32i), !s8i loc(#loc126)
      %35 = cir.load %0 : !cir.ptr<!cir.ptr<!s8i>>, !cir.ptr<!s8i> loc(#loc127)
      %36 = cir.const #cir.int<100> : !s32i loc(#loc128)
      %37 = cir.const #cir.int<1> : !s32i loc(#loc129)
      %38 = cir.binop(sub, %36, %37) nsw : !s32i loc(#loc128)
      %39 = cir.ptr_stride(%35 : !cir.ptr<!s8i>, %38 : !s32i), !cir.ptr<!s8i> loc(#loc130)
      cir.store %34, %39 : !s8i, !cir.ptr<!s8i> loc(#loc242)
      %40 = cir.load %0 : !cir.ptr<!cir.ptr<!s8i>>, !cir.ptr<!s8i> loc(#loc131)
      cir.call @printLine(%40) : (!cir.ptr<!s8i>) -> () loc(#loc132)
    } loc(#loc231)
    cir.return loc(#loc73)
  } loc(#loc222)
  cir.func no_proto internal private @staticReturnsFalse() -> !s32i extra(#fn_attr) {
    %0 = cir.alloca !s32i, !cir.ptr<!s32i>, ["__retval"] {alignment = 4 : i64} loc(#loc134)
    %1 = cir.const #cir.int<0> : !s32i loc(#loc135)
    cir.store %1, %0 : !s32i, !cir.ptr<!s32i> loc(#loc244)
    %2 = cir.load %0 : !cir.ptr<!s32i>, !s32i loc(#loc244)
    cir.return %2 : !s32i loc(#loc244)
  } loc(#loc243)
  cir.func no_proto internal private @goodG2B2() extra(#fn_attr) {
    %0 = cir.alloca !cir.ptr<!s8i>, !cir.ptr<!cir.ptr<!s8i>>, ["data"] {alignment = 8 : i64} loc(#loc246)
    %1 = cir.alloca !cir.ptr<!s8i>, !cir.ptr<!cir.ptr<!s8i>>, ["dataBadBuffer", init] {alignment = 8 : i64} loc(#loc247)
    %2 = cir.const #cir.int<50> : !s32i loc(#loc142)
    %3 = cir.cast(integral, %2 : !s32i), !u64i loc(#loc142)
    %4 = cir.const #cir.int<1> : !u64i loc(#loc142)
    %5 = cir.binop(mul, %3, %4) : !u64i loc(#loc142)
    %6 = cir.alloca !u8i, !cir.ptr<!u8i>, %5 : !u64i, ["bi_alloca"] {alignment = 16 : i64} loc(#loc142)
    %7 = cir.alloca !cir.ptr<!s8i>, !cir.ptr<!cir.ptr<!s8i>>, ["dataGoodBuffer", init] {alignment = 8 : i64} loc(#loc248)
    %8 = cir.cast(bitcast, %6 : !cir.ptr<!u8i>), !cir.ptr<!void> loc(#loc142)
    %9 = cir.cast(bitcast, %8 : !cir.ptr<!void>), !cir.ptr<!s8i> loc(#loc142)
    cir.store %9, %1 : !cir.ptr<!s8i>, !cir.ptr<!cir.ptr<!s8i>> loc(#loc247)
    %10 = cir.const #cir.int<100> : !s32i loc(#loc144)
    %11 = cir.cast(integral, %10 : !s32i), !u64i loc(#loc144)
    %12 = cir.const #cir.int<1> : !u64i loc(#loc144)
    %13 = cir.binop(mul, %11, %12) : !u64i loc(#loc144)
    %14 = cir.alloca !u8i, !cir.ptr<!u8i>, %13 : !u64i, ["bi_alloca"] {alignment = 16 : i64} loc(#loc144)
    %15 = cir.cast(bitcast, %14 : !cir.ptr<!u8i>), !cir.ptr<!void> loc(#loc144)
    %16 = cir.cast(bitcast, %15 : !cir.ptr<!void>), !cir.ptr<!s8i> loc(#loc144)
    cir.store %16, %7 : !cir.ptr<!s8i>, !cir.ptr<!cir.ptr<!s8i>> loc(#loc248)
    cir.scope {
      %17 = cir.get_global @staticReturnsTrue : !cir.ptr<!cir.func<() -> !s32i>> loc(#loc250)
      %18 = cir.call @staticReturnsTrue() : () -> !s32i loc(#loc147)
      %19 = cir.cast(int_to_bool, %18 : !s32i), !cir.bool loc(#loc147)
      cir.if %19 {
        %20 = cir.load %7 : !cir.ptr<!cir.ptr<!s8i>>, !cir.ptr<!s8i> loc(#loc150)
        cir.store %20, %0 : !cir.ptr<!s8i>, !cir.ptr<!cir.ptr<!s8i>> loc(#loc252)
        %21 = cir.const #cir.int<0> : !s32i loc(#loc152)
        %22 = cir.cast(integral, %21 : !s32i), !s8i loc(#loc152)
        %23 = cir.load %0 : !cir.ptr<!cir.ptr<!s8i>>, !cir.ptr<!s8i> loc(#loc153)
        %24 = cir.const #cir.int<0> : !s32i loc(#loc154)
        %25 = cir.ptr_stride(%23 : !cir.ptr<!s8i>, %24 : !s32i), !cir.ptr<!s8i> loc(#loc155)
        cir.store %22, %25 : !s8i, !cir.ptr<!s8i> loc(#loc253)
      } loc(#loc251)
    } loc(#loc249)
    cir.scope {
      %17 = cir.alloca !u64i, !cir.ptr<!u64i>, ["i"] {alignment = 8 : i64} loc(#loc255)
      %18 = cir.alloca !cir.array<!s8i x 100>, !cir.ptr<!cir.array<!s8i x 100>>, ["source"] {alignment = 16 : i64} loc(#loc256)
      %19 = cir.cast(array_to_ptrdecay, %18 : !cir.ptr<!cir.array<!s8i x 100>>), !cir.ptr<!s8i> loc(#loc162)
      %20 = cir.cast(bitcast, %19 : !cir.ptr<!s8i>), !cir.ptr<!void> loc(#loc162)
      %21 = cir.const #cir.int<67> : !s32i loc(#loc163)
      %22 = cir.const #cir.int<100> : !s32i loc(#loc164)
      %23 = cir.const #cir.int<1> : !s32i loc(#loc165)
      %24 = cir.binop(sub, %22, %23) nsw : !s32i loc(#loc164)
      %25 = cir.cast(integral, %24 : !s32i), !u64i loc(#loc164)
      cir.libc.memset %25 bytes from %20 set to %21 : !cir.ptr<!void>, !s32i, !u64i loc(#loc257)
      %26 = cir.const #cir.int<0> : !s32i loc(#loc168)
      %27 = cir.cast(integral, %26 : !s32i), !s8i loc(#loc168)
      %28 = cir.const #cir.int<100> : !s32i loc(#loc169)
      %29 = cir.const #cir.int<1> : !s32i loc(#loc170)
      %30 = cir.binop(sub, %28, %29) nsw : !s32i loc(#loc169)
      %31 = cir.cast(array_to_ptrdecay, %18 : !cir.ptr<!cir.array<!s8i x 100>>), !cir.ptr<!s8i> loc(#loc171)
      %32 = cir.ptr_stride(%31 : !cir.ptr<!s8i>, %30 : !s32i), !cir.ptr<!s8i> loc(#loc171)
      cir.store %27, %32 : !s8i, !cir.ptr<!s8i> loc(#loc258)
      cir.scope {
        %41 = cir.const #cir.int<0> : !s32i loc(#loc174)
        %42 = cir.cast(integral, %41 : !s32i), !u64i loc(#loc174)
        cir.store %42, %17 : !u64i, !cir.ptr<!u64i> loc(#loc260)
        cir.for : cond {
          %43 = cir.load %17 : !cir.ptr<!u64i>, !u64i loc(#loc176)
          %44 = cir.const #cir.int<100> : !s32i loc(#loc177)
          %45 = cir.cast(integral, %44 : !s32i), !u64i loc(#loc177)
          %46 = cir.cmp(lt, %43, %45) : !u64i, !cir.bool loc(#loc261)
          cir.condition(%46) loc(#loc178)
        } body {
          cir.scope {
            %43 = cir.load %17 : !cir.ptr<!u64i>, !u64i loc(#loc180)
            %44 = cir.cast(array_to_ptrdecay, %18 : !cir.ptr<!cir.array<!s8i x 100>>), !cir.ptr<!s8i> loc(#loc181)
            %45 = cir.ptr_stride(%44 : !cir.ptr<!s8i>, %43 : !u64i), !cir.ptr<!s8i> loc(#loc181)
            %46 = cir.load %45 : !cir.ptr<!s8i>, !s8i loc(#loc181)
            %47 = cir.load %0 : !cir.ptr<!cir.ptr<!s8i>>, !cir.ptr<!s8i> loc(#loc182)
            %48 = cir.load %17 : !cir.ptr<!u64i>, !u64i loc(#loc183)
            %49 = cir.ptr_stride(%47 : !cir.ptr<!s8i>, %48 : !u64i), !cir.ptr<!s8i> loc(#loc184)
            cir.store %46, %49 : !s8i, !cir.ptr<!s8i> loc(#loc263)
          } loc(#loc262)
          cir.yield loc(#loc173)
        } step {
          %43 = cir.load %17 : !cir.ptr<!u64i>, !u64i loc(#loc186)
          %44 = cir.unary(inc, %43) : !u64i, !u64i loc(#loc187)
          cir.store %44, %17 : !u64i, !cir.ptr<!u64i> loc(#loc264)
          cir.yield loc(#loc259)
        } loc(#loc259)
      } loc(#loc259)
      %33 = cir.const #cir.int<0> : !s32i loc(#loc188)
      %34 = cir.cast(integral, %33 : !s32i), !s8i loc(#loc188)
      %35 = cir.load %0 : !cir.ptr<!cir.ptr<!s8i>>, !cir.ptr<!s8i> loc(#loc189)
      %36 = cir.const #cir.int<100> : !s32i loc(#loc190)
      %37 = cir.const #cir.int<1> : !s32i loc(#loc191)
      %38 = cir.binop(sub, %36, %37) nsw : !s32i loc(#loc190)
      %39 = cir.ptr_stride(%35 : !cir.ptr<!s8i>, %38 : !s32i), !cir.ptr<!s8i> loc(#loc192)
      cir.store %34, %39 : !s8i, !cir.ptr<!s8i> loc(#loc265)
      %40 = cir.load %0 : !cir.ptr<!cir.ptr<!s8i>>, !cir.ptr<!s8i> loc(#loc193)
      cir.call @printLine(%40) : (!cir.ptr<!s8i>) -> () loc(#loc194)
    } loc(#loc254)
    cir.return loc(#loc138)
  } loc(#loc245)
} loc(#loc)
#loc = loc("/workspaces/juliet-c/testcases/CWE121_Stack_Based_Buffer_Overflow/s03/CWE121_Stack_Based_Buffer_Overflow__CWE805_char_alloca_loop_08.c":0:0)
#loc1 = loc("../../../testcasesupport/std_testcase_io.h":14:1)
#loc2 = loc("../../../testcasesupport/std_testcase_io.h":14:33)
#loc3 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE805_char_alloca_loop_08.c":37:1)
#loc4 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE805_char_alloca_loop_08.c":62:1)
#loc5 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE805_char_alloca_loop_08.c":39:5)
#loc6 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE805_char_alloca_loop_08.c":39:12)
#loc7 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE805_char_alloca_loop_08.c":40:5)
#loc8 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE805_char_alloca_loop_08.c":40:36)
#loc9 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE805_char_alloca_loop_08.c":41:5)
#loc10 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE805_char_alloca_loop_08.c":41:37)
#loc11 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE805_char_alloca_loop_08.c":42:5)
#loc12 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE805_char_alloca_loop_08.c":48:5)
#loc13 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE805_char_alloca_loop_08.c":42:8)
#loc14 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE805_char_alloca_loop_08.c":42:26)
#loc15 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE805_char_alloca_loop_08.c":43:5)
#loc16 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE805_char_alloca_loop_08.c":46:16)
#loc17 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE805_char_alloca_loop_08.c":46:9)
#loc18 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE805_char_alloca_loop_08.c":47:19)
#loc19 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE805_char_alloca_loop_08.c":47:9)
#loc20 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE805_char_alloca_loop_08.c":47:14)
#loc21 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE805_char_alloca_loop_08.c":47:15)
#loc22 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE805_char_alloca_loop_08.c":49:5)
#loc23 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE805_char_alloca_loop_08.c":61:5)
#loc24 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE805_char_alloca_loop_08.c":50:9)
#loc25 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE805_char_alloca_loop_08.c":50:16)
#loc26 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE805_char_alloca_loop_08.c":51:9)
#loc27 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE805_char_alloca_loop_08.c":51:24)
#loc28 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE805_char_alloca_loop_08.c":52:16)
#loc29 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE805_char_alloca_loop_08.c":52:24)
#loc30 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE805_char_alloca_loop_08.c":52:29)
#loc31 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE805_char_alloca_loop_08.c":52:33)
#loc32 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE805_char_alloca_loop_08.c":52:9)
#loc33 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE805_char_alloca_loop_08.c":52:34)
#loc34 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE805_char_alloca_loop_08.c":53:25)
#loc35 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE805_char_alloca_loop_08.c":53:16)
#loc36 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE805_char_alloca_loop_08.c":53:20)
#loc37 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE805_char_alloca_loop_08.c":53:9)
#loc38 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE805_char_alloca_loop_08.c":55:9)
#loc39 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE805_char_alloca_loop_08.c":58:9)
#loc40 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE805_char_alloca_loop_08.c":55:18)
#loc41 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE805_char_alloca_loop_08.c":55:14)
#loc42 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE805_char_alloca_loop_08.c":55:21)
#loc43 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE805_char_alloca_loop_08.c":55:25)
#loc44 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE805_char_alloca_loop_08.c":55:23)
#loc45 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE805_char_alloca_loop_08.c":56:9)
#loc46 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE805_char_alloca_loop_08.c":57:30)
#loc47 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE805_char_alloca_loop_08.c":57:23)
#loc48 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE805_char_alloca_loop_08.c":57:13)
#loc49 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE805_char_alloca_loop_08.c":57:18)
#loc50 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE805_char_alloca_loop_08.c":57:19)
#loc51 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE805_char_alloca_loop_08.c":57:31)
#loc52 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE805_char_alloca_loop_08.c":55:31)
#loc53 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE805_char_alloca_loop_08.c":55:30)
#loc54 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE805_char_alloca_loop_08.c":59:23)
#loc55 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE805_char_alloca_loop_08.c":59:9)
#loc56 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE805_char_alloca_loop_08.c":59:14)
#loc57 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE805_char_alloca_loop_08.c":59:18)
#loc58 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE805_char_alloca_loop_08.c":59:19)
#loc59 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE805_char_alloca_loop_08.c":60:19)
#loc60 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE805_char_alloca_loop_08.c":60:9)
#loc61 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE805_char_alloca_loop_08.c":127:1)
#loc62 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE805_char_alloca_loop_08.c":131:1)
#loc63 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE805_char_alloca_loop_08.c":129:5)
#loc64 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE805_char_alloca_loop_08.c":129:14)
#loc65 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE805_char_alloca_loop_08.c":130:5)
#loc66 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE805_char_alloca_loop_08.c":130:14)
#loc67 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE805_char_alloca_loop_08.c":25:1)
#loc68 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE805_char_alloca_loop_08.c":28:1)
#loc69 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE805_char_alloca_loop_08.c":27:12)
#loc70 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE805_char_alloca_loop_08.c":27:5)
#loc71 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE805_char_alloca_loop_08.c":77:19)
#loc72 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE805_char_alloca_loop_08.c":69:1)
#loc73 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE805_char_alloca_loop_08.c":98:1)
#loc74 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE805_char_alloca_loop_08.c":71:5)
#loc75 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE805_char_alloca_loop_08.c":71:12)
#loc76 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE805_char_alloca_loop_08.c":72:5)
#loc77 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE805_char_alloca_loop_08.c":72:36)
#loc78 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE805_char_alloca_loop_08.c":73:5)
#loc79 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE805_char_alloca_loop_08.c":73:37)
#loc80 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE805_char_alloca_loop_08.c":74:5)
#loc81 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE805_char_alloca_loop_08.c":84:5)
#loc82 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE805_char_alloca_loop_08.c":74:8)
#loc83 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE805_char_alloca_loop_08.c":74:27)
#loc84 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE805_char_alloca_loop_08.c":75:5)
#loc85 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE805_char_alloca_loop_08.c":78:5)
#loc86 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE805_char_alloca_loop_08.c":80:5)
#loc87 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE805_char_alloca_loop_08.c":77:9)
#loc88 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE805_char_alloca_loop_08.c":82:16)
#loc89 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE805_char_alloca_loop_08.c":82:9)
#loc90 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE805_char_alloca_loop_08.c":83:19)
#loc91 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE805_char_alloca_loop_08.c":83:9)
#loc92 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE805_char_alloca_loop_08.c":83:14)
#loc93 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE805_char_alloca_loop_08.c":83:15)
#loc94 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE805_char_alloca_loop_08.c":85:5)
#loc95 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE805_char_alloca_loop_08.c":97:5)
#loc96 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE805_char_alloca_loop_08.c":86:9)
#loc97 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE805_char_alloca_loop_08.c":86:16)
#loc98 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE805_char_alloca_loop_08.c":87:9)
#loc99 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE805_char_alloca_loop_08.c":87:24)
#loc100 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE805_char_alloca_loop_08.c":88:16)
#loc101 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE805_char_alloca_loop_08.c":88:24)
#loc102 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE805_char_alloca_loop_08.c":88:29)
#loc103 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE805_char_alloca_loop_08.c":88:33)
#loc104 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE805_char_alloca_loop_08.c":88:9)
#loc105 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE805_char_alloca_loop_08.c":88:34)
#loc106 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE805_char_alloca_loop_08.c":89:25)
#loc107 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE805_char_alloca_loop_08.c":89:16)
#loc108 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE805_char_alloca_loop_08.c":89:20)
#loc109 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE805_char_alloca_loop_08.c":89:9)
#loc110 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE805_char_alloca_loop_08.c":91:9)
#loc111 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE805_char_alloca_loop_08.c":94:9)
#loc112 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE805_char_alloca_loop_08.c":91:18)
#loc113 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE805_char_alloca_loop_08.c":91:14)
#loc114 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE805_char_alloca_loop_08.c":91:21)
#loc115 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE805_char_alloca_loop_08.c":91:25)
#loc116 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE805_char_alloca_loop_08.c":91:23)
#loc117 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE805_char_alloca_loop_08.c":92:9)
#loc118 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE805_char_alloca_loop_08.c":93:30)
#loc119 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE805_char_alloca_loop_08.c":93:23)
#loc120 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE805_char_alloca_loop_08.c":93:13)
#loc121 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE805_char_alloca_loop_08.c":93:18)
#loc122 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE805_char_alloca_loop_08.c":93:19)
#loc123 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE805_char_alloca_loop_08.c":93:31)
#loc124 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE805_char_alloca_loop_08.c":91:31)
#loc125 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE805_char_alloca_loop_08.c":91:30)
#loc126 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE805_char_alloca_loop_08.c":95:23)
#loc127 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE805_char_alloca_loop_08.c":95:9)
#loc128 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE805_char_alloca_loop_08.c":95:14)
#loc129 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE805_char_alloca_loop_08.c":95:18)
#loc130 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE805_char_alloca_loop_08.c":95:19)
#loc131 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE805_char_alloca_loop_08.c":96:19)
#loc132 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE805_char_alloca_loop_08.c":96:9)
#loc133 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE805_char_alloca_loop_08.c":30:1)
#loc134 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE805_char_alloca_loop_08.c":33:1)
#loc135 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE805_char_alloca_loop_08.c":32:12)
#loc136 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE805_char_alloca_loop_08.c":32:5)
#loc137 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE805_char_alloca_loop_08.c":101:1)
#loc138 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE805_char_alloca_loop_08.c":125:1)
#loc139 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE805_char_alloca_loop_08.c":103:5)
#loc140 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE805_char_alloca_loop_08.c":103:12)
#loc141 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE805_char_alloca_loop_08.c":104:5)
#loc142 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE805_char_alloca_loop_08.c":104:36)
#loc143 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE805_char_alloca_loop_08.c":105:5)
#loc144 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE805_char_alloca_loop_08.c":105:37)
#loc145 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE805_char_alloca_loop_08.c":106:5)
#loc146 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE805_char_alloca_loop_08.c":111:5)
#loc147 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE805_char_alloca_loop_08.c":106:8)
#loc148 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE805_char_alloca_loop_08.c":106:26)
#loc149 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE805_char_alloca_loop_08.c":107:5)
#loc150 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE805_char_alloca_loop_08.c":109:16)
#loc151 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE805_char_alloca_loop_08.c":109:9)
#loc152 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE805_char_alloca_loop_08.c":110:19)
#loc153 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE805_char_alloca_loop_08.c":110:9)
#loc154 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE805_char_alloca_loop_08.c":110:14)
#loc155 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE805_char_alloca_loop_08.c":110:15)
#loc156 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE805_char_alloca_loop_08.c":112:5)
#loc157 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE805_char_alloca_loop_08.c":124:5)
#loc158 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE805_char_alloca_loop_08.c":113:9)
#loc159 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE805_char_alloca_loop_08.c":113:16)
#loc160 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE805_char_alloca_loop_08.c":114:9)
#loc161 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE805_char_alloca_loop_08.c":114:24)
#loc162 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE805_char_alloca_loop_08.c":115:16)
#loc163 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE805_char_alloca_loop_08.c":115:24)
#loc164 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE805_char_alloca_loop_08.c":115:29)
#loc165 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE805_char_alloca_loop_08.c":115:33)
#loc166 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE805_char_alloca_loop_08.c":115:9)
#loc167 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE805_char_alloca_loop_08.c":115:34)
#loc168 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE805_char_alloca_loop_08.c":116:25)
#loc169 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE805_char_alloca_loop_08.c":116:16)
#loc170 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE805_char_alloca_loop_08.c":116:20)
#loc171 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE805_char_alloca_loop_08.c":116:9)
#loc172 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE805_char_alloca_loop_08.c":118:9)
#loc173 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE805_char_alloca_loop_08.c":121:9)
#loc174 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE805_char_alloca_loop_08.c":118:18)
#loc175 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE805_char_alloca_loop_08.c":118:14)
#loc176 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE805_char_alloca_loop_08.c":118:21)
#loc177 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE805_char_alloca_loop_08.c":118:25)
#loc178 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE805_char_alloca_loop_08.c":118:23)
#loc179 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE805_char_alloca_loop_08.c":119:9)
#loc180 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE805_char_alloca_loop_08.c":120:30)
#loc181 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE805_char_alloca_loop_08.c":120:23)
#loc182 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE805_char_alloca_loop_08.c":120:13)
#loc183 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE805_char_alloca_loop_08.c":120:18)
#loc184 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE805_char_alloca_loop_08.c":120:19)
#loc185 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE805_char_alloca_loop_08.c":120:31)
#loc186 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE805_char_alloca_loop_08.c":118:31)
#loc187 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE805_char_alloca_loop_08.c":118:30)
#loc188 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE805_char_alloca_loop_08.c":122:23)
#loc189 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE805_char_alloca_loop_08.c":122:9)
#loc190 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE805_char_alloca_loop_08.c":122:14)
#loc191 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE805_char_alloca_loop_08.c":122:18)
#loc192 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE805_char_alloca_loop_08.c":122:19)
#loc193 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE805_char_alloca_loop_08.c":123:19)
#loc194 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE805_char_alloca_loop_08.c":123:9)
#loc195 = loc(fused[#loc1, #loc2])
#loc196 = loc(fused[#loc3, #loc4])
#loc197 = loc(fused[#loc5, #loc6])
#loc198 = loc(fused[#loc7, #loc8])
#loc199 = loc(fused[#loc9, #loc10])
#loc200 = loc(fused[#loc11, #loc12])
#loc201 = loc(fused[#loc13, #loc14])
#loc202 = loc(fused[#loc15, #loc12])
#loc203 = loc(fused[#loc17, #loc16])
#loc204 = loc(fused[#loc19, #loc18])
#loc205 = loc(fused[#loc22, #loc23])
#loc206 = loc(fused[#loc24, #loc25])
#loc207 = loc(fused[#loc26, #loc27])
#loc208 = loc(fused[#loc32, #loc33])
#loc209 = loc(fused[#loc37, #loc34])
#loc210 = loc(fused[#loc38, #loc39])
#loc211 = loc(fused[#loc41, #loc40])
#loc212 = loc(fused[#loc42, #loc43])
#loc213 = loc(fused[#loc45, #loc39])
#loc214 = loc(fused[#loc48, #loc51])
#loc215 = loc(fused[#loc53, #loc52])
#loc216 = loc(fused[#loc55, #loc54])
#loc217 = loc(fused[#loc61, #loc62])
#loc218 = loc(fused[#loc63, #loc64])
#loc219 = loc(fused[#loc65, #loc66])
#loc220 = loc(fused[#loc67, #loc68])
#loc221 = loc(fused[#loc70, #loc69])
#loc222 = loc(fused[#loc72, #loc73])
#loc223 = loc(fused[#loc74, #loc75])
#loc224 = loc(fused[#loc76, #loc77])
#loc225 = loc(fused[#loc78, #loc79])
#loc226 = loc(fused[#loc80, #loc81])
#loc227 = loc(fused[#loc82, #loc83])
#loc228 = loc(fused[#loc84, #loc85, #loc86, #loc81])
#loc229 = loc(fused[#loc89, #loc88])
#loc230 = loc(fused[#loc91, #loc90])
#loc231 = loc(fused[#loc94, #loc95])
#loc232 = loc(fused[#loc96, #loc97])
#loc233 = loc(fused[#loc98, #loc99])
#loc234 = loc(fused[#loc104, #loc105])
#loc235 = loc(fused[#loc109, #loc106])
#loc236 = loc(fused[#loc110, #loc111])
#loc237 = loc(fused[#loc113, #loc112])
#loc238 = loc(fused[#loc114, #loc115])
#loc239 = loc(fused[#loc117, #loc111])
#loc240 = loc(fused[#loc120, #loc123])
#loc241 = loc(fused[#loc125, #loc124])
#loc242 = loc(fused[#loc127, #loc126])
#loc243 = loc(fused[#loc133, #loc134])
#loc244 = loc(fused[#loc136, #loc135])
#loc245 = loc(fused[#loc137, #loc138])
#loc246 = loc(fused[#loc139, #loc140])
#loc247 = loc(fused[#loc141, #loc142])
#loc248 = loc(fused[#loc143, #loc144])
#loc249 = loc(fused[#loc145, #loc146])
#loc250 = loc(fused[#loc147, #loc148])
#loc251 = loc(fused[#loc149, #loc146])
#loc252 = loc(fused[#loc151, #loc150])
#loc253 = loc(fused[#loc153, #loc152])
#loc254 = loc(fused[#loc156, #loc157])
#loc255 = loc(fused[#loc158, #loc159])
#loc256 = loc(fused[#loc160, #loc161])
#loc257 = loc(fused[#loc166, #loc167])
#loc258 = loc(fused[#loc171, #loc168])
#loc259 = loc(fused[#loc172, #loc173])
#loc260 = loc(fused[#loc175, #loc174])
#loc261 = loc(fused[#loc176, #loc177])
#loc262 = loc(fused[#loc179, #loc173])
#loc263 = loc(fused[#loc182, #loc185])
#loc264 = loc(fused[#loc187, #loc186])
#loc265 = loc(fused[#loc189, #loc188])
