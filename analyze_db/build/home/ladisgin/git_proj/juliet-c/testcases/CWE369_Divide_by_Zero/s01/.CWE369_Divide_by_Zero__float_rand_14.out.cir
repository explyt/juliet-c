!s32i = !cir.int<s, 32>
!s64i = !cir.int<s, 64>
!s8i = !cir.int<s, 8>
!u32i = !cir.int<u, 32>
!void = !cir.void
#fn_attr = #cir<extra({nothrow = #cir.nothrow})>
#fn_attr1 = #cir<extra({inline = #cir.inline<no>, nothrow = #cir.nothrow, optnone = #cir.optnone})>
#loc20 = loc("CWE369_Divide_by_Zero__float_rand_14.c":32:23)
#loc55 = loc("CWE369_Divide_by_Zero__float_rand_14.c":169:10)
#loc56 = loc("CWE369_Divide_by_Zero__float_rand_14.c":169:14)
#loc57 = loc("CWE369_Divide_by_Zero__float_rand_14.c":169:20)
#loc58 = loc("CWE369_Divide_by_Zero__float_rand_14.c":169:32)
#loc88 = loc("CWE369_Divide_by_Zero__float_rand_14.c":57:23)
#loc124 = loc("CWE369_Divide_by_Zero__float_rand_14.c":88:23)
#loc226 = loc(fused[#loc55, #loc56])
#loc227 = loc(fused[#loc57, #loc58])
module @"/home/ladisgin/git_proj/juliet-c/testcases/CWE369_Divide_by_Zero/s01/CWE369_Divide_by_Zero__float_rand_14.c" attributes {cir.lang = #cir.lang<c>, cir.sob = #cir.signed_overflow_behavior<undefined>, cir.triple = "x86_64-unknown-linux-gnu", dlti.dl_spec = #dlti.dl_spec<i16 = dense<16> : vector<2xi64>, i8 = dense<8> : vector<2xi64>, i32 = dense<32> : vector<2xi64>, f64 = dense<64> : vector<2xi64>, f128 = dense<128> : vector<2xi64>, !llvm.ptr<270> = dense<32> : vector<4xi64>, f16 = dense<16> : vector<2xi64>, !llvm.ptr<272> = dense<64> : vector<4xi64>, !llvm.ptr<271> = dense<32> : vector<4xi64>, i64 = dense<64> : vector<2xi64>, i128 = dense<128> : vector<2xi64>, f80 = dense<128> : vector<2xi64>, !llvm.ptr = dense<64> : vector<4xi64>, i1 = dense<8> : vector<2xi64>, "dlti.endianness" = "little", "dlti.stack_alignment" = 128 : i64>} {
  cir.global "private" external @globalFive : !s32i {alignment = 4 : i64} loc(#loc201)
  cir.func private @rand() -> !s32i extra(#fn_attr) loc(#loc202)
  cir.func private @printIntLine(!s32i) loc(#loc203)
  cir.func no_proto @CWE369_Divide_by_Zero__float_rand_14_bad() extra(#fn_attr1) {
    %0 = cir.alloca !s32i, !cir.ptr<!s32i>, ["result", init] {alignment = 4 : i64} loc(#loc205)
    %1 = cir.alloca !cir.float, !cir.ptr<!cir.float>, ["data"] {alignment = 4 : i64} loc(#loc206)
    %2 = cir.const #cir.fp<0.000000e+00> : !cir.float loc(#loc13)
    cir.store %2, %1 : !cir.float, !cir.ptr<!cir.float> loc(#loc207)
    cir.br ^bb1 loc(#loc208)
  ^bb1:  // pred: ^bb0
    %3 = cir.get_global @globalFive : !cir.ptr<!s32i> loc(#loc201)
    %4 = cir.load %3 : !cir.ptr<!s32i>, !s32i loc(#loc17)
    %5 = cir.const #cir.int<5> : !s32i loc(#loc18)
    %6 = cir.cmp(eq, %4, %5) : !s32i, !cir.bool loc(#loc209)
    cir.brcond %6 ^bb2, ^bb7 loc(#loc210)
  ^bb2:  // pred: ^bb1
    %7 = cir.call @rand() : () -> !s32i extra(#fn_attr) loc(#loc20)
    %8 = cir.const #cir.int<1> : !s32i loc(#loc20)
    %9 = cir.binop(and, %7, %8) : !s32i loc(#loc20)
    %10 = cir.cast(int_to_bool, %9 : !s32i), !cir.bool loc(#loc20)
    cir.brcond %10 ^bb3, ^bb4 loc(#loc20)
  ^bb3:  // pred: ^bb2
    %11 = cir.call @rand() : () -> !s32i extra(#fn_attr) loc(#loc20)
    %12 = cir.cast(integral, %11 : !s32i), !u32i loc(#loc20)
    %13 = cir.const #cir.int<30> : !s32i loc(#loc20)
    %14 = cir.shift(left, %12 : !u32i, %13 : !s32i) -> !u32i loc(#loc20)
    %15 = cir.call @rand() : () -> !s32i extra(#fn_attr) loc(#loc20)
    %16 = cir.cast(integral, %15 : !s32i), !u32i loc(#loc20)
    %17 = cir.const #cir.int<15> : !s32i loc(#loc20)
    %18 = cir.shift(left, %16 : !u32i, %17 : !s32i) -> !u32i loc(#loc20)
    %19 = cir.binop(xor, %14, %18) : !u32i loc(#loc20)
    %20 = cir.call @rand() : () -> !s32i extra(#fn_attr) loc(#loc20)
    %21 = cir.cast(integral, %20 : !s32i), !u32i loc(#loc20)
    %22 = cir.binop(xor, %19, %21) : !u32i loc(#loc20)
    cir.br ^bb5(%22 : !u32i) loc(#loc20)
  ^bb4:  // pred: ^bb2
    %23 = cir.call @rand() : () -> !s32i extra(#fn_attr) loc(#loc20)
    %24 = cir.cast(integral, %23 : !s32i), !u32i loc(#loc20)
    %25 = cir.const #cir.int<30> : !s32i loc(#loc20)
    %26 = cir.shift(left, %24 : !u32i, %25 : !s32i) -> !u32i loc(#loc20)
    %27 = cir.call @rand() : () -> !s32i extra(#fn_attr) loc(#loc20)
    %28 = cir.cast(integral, %27 : !s32i), !u32i loc(#loc20)
    %29 = cir.const #cir.int<15> : !s32i loc(#loc20)
    %30 = cir.shift(left, %28 : !u32i, %29 : !s32i) -> !u32i loc(#loc20)
    %31 = cir.binop(xor, %26, %30) : !u32i loc(#loc20)
    %32 = cir.call @rand() : () -> !s32i extra(#fn_attr) loc(#loc20)
    %33 = cir.cast(integral, %32 : !s32i), !u32i loc(#loc20)
    %34 = cir.binop(xor, %31, %33) : !u32i loc(#loc20)
    %35 = cir.unary(minus, %34) : !u32i, !u32i loc(#loc20)
    %36 = cir.const #cir.int<1> : !s32i loc(#loc20)
    %37 = cir.cast(integral, %36 : !s32i), !u32i loc(#loc20)
    %38 = cir.binop(sub, %35, %37) : !u32i loc(#loc20)
    cir.br ^bb5(%38 : !u32i) loc(#loc20)
  ^bb5(%39: !u32i loc("CWE369_Divide_by_Zero__float_rand_14.c":32:23)):  // 2 preds: ^bb3, ^bb4
    cir.br ^bb6 loc(#loc20)
  ^bb6:  // pred: ^bb5
    %40 = cir.cast(integral, %39 : !u32i), !s32i loc(#loc20)
    %41 = cir.cast(int_to_float, %40 : !s32i), !cir.float loc(#loc20)
    cir.store %41, %1 : !cir.float, !cir.ptr<!cir.float> loc(#loc211)
    cir.br ^bb7 loc(#loc16)
  ^bb7:  // 2 preds: ^bb1, ^bb6
    cir.br ^bb8 loc(#loc16)
  ^bb8:  // pred: ^bb7
    cir.br ^bb9 loc(#loc212)
  ^bb9:  // pred: ^bb8
    %42 = cir.get_global @globalFive : !cir.ptr<!s32i> loc(#loc201)
    %43 = cir.load %42 : !cir.ptr<!s32i>, !s32i loc(#loc24)
    %44 = cir.const #cir.int<5> : !s32i loc(#loc25)
    %45 = cir.cmp(eq, %43, %44) : !s32i, !cir.bool loc(#loc213)
    cir.brcond %45 ^bb10, ^bb13 loc(#loc214)
  ^bb10:  // pred: ^bb9
    cir.br ^bb11 loc(#loc215)
  ^bb11:  // pred: ^bb10
    %46 = cir.const #cir.fp<1.000000e+02> : !cir.double loc(#loc29)
    %47 = cir.load %1 : !cir.ptr<!cir.float>, !cir.float loc(#loc30)
    %48 = cir.cast(floating, %47 : !cir.float), !cir.double loc(#loc30)
    %49 = cir.binop(div, %46, %48) : !cir.double loc(#loc216)
    %50 = cir.cast(float_to_int, %49 : !cir.double), !s32i loc(#loc216)
    cir.store %50, %0 : !s32i, !cir.ptr<!s32i> loc(#loc205)
    %51 = cir.load %0 : !cir.ptr<!s32i>, !s32i loc(#loc31)
    cir.call @printIntLine(%51) : (!s32i) -> () loc(#loc32)
    cir.br ^bb12 loc(#loc28)
  ^bb12:  // pred: ^bb11
    cir.br ^bb13 loc(#loc23)
  ^bb13:  // 2 preds: ^bb9, ^bb12
    cir.br ^bb14 loc(#loc23)
  ^bb14:  // pred: ^bb13
    cir.return loc(#loc8)
  } loc(#loc204)
  cir.func no_proto @CWE369_Divide_by_Zero__float_rand_14_good() extra(#fn_attr1) {
    %0 = cir.get_global @goodB2G1 : !cir.ptr<!cir.func<!void ()>> loc(#loc218)
    cir.call %0() : (!cir.ptr<!cir.func<!void ()>>) -> () loc(#loc35)
    %1 = cir.get_global @goodB2G2 : !cir.ptr<!cir.func<!void ()>> loc(#loc219)
    cir.call %1() : (!cir.ptr<!cir.func<!void ()>>) -> () loc(#loc37)
    %2 = cir.get_global @goodG2B1 : !cir.ptr<!cir.func<!void ()>> loc(#loc220)
    cir.call %2() : (!cir.ptr<!cir.func<!void ()>>) -> () loc(#loc39)
    %3 = cir.get_global @goodG2B2 : !cir.ptr<!cir.func<!void ()>> loc(#loc221)
    cir.call %3() : (!cir.ptr<!cir.func<!void ()>>) -> () loc(#loc41)
    cir.return loc(#loc34)
  } loc(#loc217)
  cir.func private @srand(!u32i) extra(#fn_attr) loc(#loc222)
  cir.func private @time(!cir.ptr<!s64i>) -> !s64i extra(#fn_attr) loc(#loc223)
  cir.func private @printLine(!cir.ptr<!s8i>) loc(#loc224)
  cir.global "private" constant cir_private dsolocal @".str" = #cir.const_array<"Calling good()...\00" : !cir.array<!s8i x 18>> : !cir.array<!s8i x 18> {alignment = 1 : i64} loc(#loc49)
  cir.global "private" constant cir_private dsolocal @".str.1" = #cir.const_array<"Finished good()\00" : !cir.array<!s8i x 16>> : !cir.array<!s8i x 16> {alignment = 1 : i64} loc(#loc50)
  cir.global "private" constant cir_private dsolocal @".str.2" = #cir.const_array<"Calling bad()...\00" : !cir.array<!s8i x 17>> : !cir.array<!s8i x 17> {alignment = 1 : i64} loc(#loc51)
  cir.global "private" constant cir_private dsolocal @".str.3" = #cir.const_array<"Finished bad()\00" : !cir.array<!s8i x 15>> : !cir.array<!s8i x 15> {alignment = 1 : i64} loc(#loc52)
  cir.func @main(%arg0: !s32i loc(fused[#loc55, #loc56]), %arg1: !cir.ptr<!cir.ptr<!s8i>> loc(fused[#loc57, #loc58])) -> !s32i extra(#fn_attr1) {
    %0 = cir.alloca !s32i, !cir.ptr<!s32i>, ["argc", init] {alignment = 4 : i64} loc(#loc226)
    %1 = cir.alloca !cir.ptr<!cir.ptr<!s8i>>, !cir.ptr<!cir.ptr<!cir.ptr<!s8i>>>, ["argv", init] {alignment = 8 : i64} loc(#loc227)
    %2 = cir.alloca !s32i, !cir.ptr<!s32i>, ["__retval"] {alignment = 4 : i64} loc(#loc54)
    cir.store %arg0, %0 : !s32i, !cir.ptr<!s32i> loc(#loc59)
    cir.store %arg1, %1 : !cir.ptr<!cir.ptr<!s8i>>, !cir.ptr<!cir.ptr<!cir.ptr<!s8i>>> loc(#loc59)
    %3 = cir.const #cir.ptr<null> : !cir.ptr<!s64i> loc(#loc60)
    %4 = cir.call @time(%3) : (!cir.ptr<!s64i>) -> !s64i extra(#fn_attr) loc(#loc61)
    %5 = cir.cast(integral, %4 : !s64i), !u32i loc(#loc61)
    cir.call @srand(%5) : (!u32i) -> () extra(#fn_attr) loc(#loc62)
    %6 = cir.get_global @".str" : !cir.ptr<!cir.array<!s8i x 18>> loc(#loc49)
    %7 = cir.cast(array_to_ptrdecay, %6 : !cir.ptr<!cir.array<!s8i x 18>>), !cir.ptr<!s8i> loc(#loc49)
    cir.call @printLine(%7) : (!cir.ptr<!s8i>) -> () loc(#loc63)
    %8 = cir.get_global @CWE369_Divide_by_Zero__float_rand_14_good : !cir.ptr<!cir.func<!void ()>> loc(#loc228)
    cir.call @CWE369_Divide_by_Zero__float_rand_14_good() : () -> () loc(#loc64)
    %9 = cir.get_global @".str.1" : !cir.ptr<!cir.array<!s8i x 16>> loc(#loc50)
    %10 = cir.cast(array_to_ptrdecay, %9 : !cir.ptr<!cir.array<!s8i x 16>>), !cir.ptr<!s8i> loc(#loc50)
    cir.call @printLine(%10) : (!cir.ptr<!s8i>) -> () loc(#loc66)
    %11 = cir.get_global @".str.2" : !cir.ptr<!cir.array<!s8i x 17>> loc(#loc51)
    %12 = cir.cast(array_to_ptrdecay, %11 : !cir.ptr<!cir.array<!s8i x 17>>), !cir.ptr<!s8i> loc(#loc51)
    cir.call @printLine(%12) : (!cir.ptr<!s8i>) -> () loc(#loc67)
    %13 = cir.get_global @CWE369_Divide_by_Zero__float_rand_14_bad : !cir.ptr<!cir.func<!void ()>> loc(#loc229)
    cir.call @CWE369_Divide_by_Zero__float_rand_14_bad() : () -> () loc(#loc68)
    %14 = cir.get_global @".str.3" : !cir.ptr<!cir.array<!s8i x 15>> loc(#loc52)
    %15 = cir.cast(array_to_ptrdecay, %14 : !cir.ptr<!cir.array<!s8i x 15>>), !cir.ptr<!s8i> loc(#loc52)
    cir.call @printLine(%15) : (!cir.ptr<!s8i>) -> () loc(#loc70)
    %16 = cir.const #cir.int<0> : !s32i loc(#loc71)
    cir.store %16, %2 : !s32i, !cir.ptr<!s32i> loc(#loc230)
    %17 = cir.load %2 : !cir.ptr<!s32i>, !s32i loc(#loc230)
    cir.return %17 : !s32i loc(#loc230)
  } loc(#loc225)
  cir.global "private" constant cir_private dsolocal @".str.4" = #cir.const_array<"Benign, fixed string\00" : !cir.array<!s8i x 21>> : !cir.array<!s8i x 21> {alignment = 1 : i64} loc(#loc73)
  cir.global "private" constant cir_private dsolocal @".str.5" = #cir.const_array<"This would result in a divide by zero\00" : !cir.array<!s8i x 38>> : !cir.array<!s8i x 38> {alignment = 1 : i64} loc(#loc74)
  cir.func no_proto internal private @goodB2G1() extra(#fn_attr1) {
    %0 = cir.alloca !s32i, !cir.ptr<!s32i>, ["result", init] {alignment = 4 : i64} loc(#loc232)
    %1 = cir.alloca !cir.float, !cir.ptr<!cir.float>, ["data"] {alignment = 4 : i64} loc(#loc233)
    %2 = cir.const #cir.fp<0.000000e+00> : !cir.float loc(#loc81)
    cir.store %2, %1 : !cir.float, !cir.ptr<!cir.float> loc(#loc234)
    cir.br ^bb1 loc(#loc235)
  ^bb1:  // pred: ^bb0
    %3 = cir.get_global @globalFive : !cir.ptr<!s32i> loc(#loc201)
    %4 = cir.load %3 : !cir.ptr<!s32i>, !s32i loc(#loc85)
    %5 = cir.const #cir.int<5> : !s32i loc(#loc86)
    %6 = cir.cmp(eq, %4, %5) : !s32i, !cir.bool loc(#loc236)
    cir.brcond %6 ^bb2, ^bb7 loc(#loc237)
  ^bb2:  // pred: ^bb1
    %7 = cir.call @rand() : () -> !s32i extra(#fn_attr) loc(#loc88)
    %8 = cir.const #cir.int<1> : !s32i loc(#loc88)
    %9 = cir.binop(and, %7, %8) : !s32i loc(#loc88)
    %10 = cir.cast(int_to_bool, %9 : !s32i), !cir.bool loc(#loc88)
    cir.brcond %10 ^bb3, ^bb4 loc(#loc88)
  ^bb3:  // pred: ^bb2
    %11 = cir.call @rand() : () -> !s32i extra(#fn_attr) loc(#loc88)
    %12 = cir.cast(integral, %11 : !s32i), !u32i loc(#loc88)
    %13 = cir.const #cir.int<30> : !s32i loc(#loc88)
    %14 = cir.shift(left, %12 : !u32i, %13 : !s32i) -> !u32i loc(#loc88)
    %15 = cir.call @rand() : () -> !s32i extra(#fn_attr) loc(#loc88)
    %16 = cir.cast(integral, %15 : !s32i), !u32i loc(#loc88)
    %17 = cir.const #cir.int<15> : !s32i loc(#loc88)
    %18 = cir.shift(left, %16 : !u32i, %17 : !s32i) -> !u32i loc(#loc88)
    %19 = cir.binop(xor, %14, %18) : !u32i loc(#loc88)
    %20 = cir.call @rand() : () -> !s32i extra(#fn_attr) loc(#loc88)
    %21 = cir.cast(integral, %20 : !s32i), !u32i loc(#loc88)
    %22 = cir.binop(xor, %19, %21) : !u32i loc(#loc88)
    cir.br ^bb5(%22 : !u32i) loc(#loc88)
  ^bb4:  // pred: ^bb2
    %23 = cir.call @rand() : () -> !s32i extra(#fn_attr) loc(#loc88)
    %24 = cir.cast(integral, %23 : !s32i), !u32i loc(#loc88)
    %25 = cir.const #cir.int<30> : !s32i loc(#loc88)
    %26 = cir.shift(left, %24 : !u32i, %25 : !s32i) -> !u32i loc(#loc88)
    %27 = cir.call @rand() : () -> !s32i extra(#fn_attr) loc(#loc88)
    %28 = cir.cast(integral, %27 : !s32i), !u32i loc(#loc88)
    %29 = cir.const #cir.int<15> : !s32i loc(#loc88)
    %30 = cir.shift(left, %28 : !u32i, %29 : !s32i) -> !u32i loc(#loc88)
    %31 = cir.binop(xor, %26, %30) : !u32i loc(#loc88)
    %32 = cir.call @rand() : () -> !s32i extra(#fn_attr) loc(#loc88)
    %33 = cir.cast(integral, %32 : !s32i), !u32i loc(#loc88)
    %34 = cir.binop(xor, %31, %33) : !u32i loc(#loc88)
    %35 = cir.unary(minus, %34) : !u32i, !u32i loc(#loc88)
    %36 = cir.const #cir.int<1> : !s32i loc(#loc88)
    %37 = cir.cast(integral, %36 : !s32i), !u32i loc(#loc88)
    %38 = cir.binop(sub, %35, %37) : !u32i loc(#loc88)
    cir.br ^bb5(%38 : !u32i) loc(#loc88)
  ^bb5(%39: !u32i loc("CWE369_Divide_by_Zero__float_rand_14.c":57:23)):  // 2 preds: ^bb3, ^bb4
    cir.br ^bb6 loc(#loc88)
  ^bb6:  // pred: ^bb5
    %40 = cir.cast(integral, %39 : !u32i), !s32i loc(#loc88)
    %41 = cir.cast(int_to_float, %40 : !s32i), !cir.float loc(#loc88)
    cir.store %41, %1 : !cir.float, !cir.ptr<!cir.float> loc(#loc238)
    cir.br ^bb7 loc(#loc84)
  ^bb7:  // 2 preds: ^bb1, ^bb6
    cir.br ^bb8 loc(#loc84)
  ^bb8:  // pred: ^bb7
    cir.br ^bb9 loc(#loc239)
  ^bb9:  // pred: ^bb8
    %42 = cir.get_global @globalFive : !cir.ptr<!s32i> loc(#loc201)
    %43 = cir.load %42 : !cir.ptr<!s32i>, !s32i loc(#loc92)
    %44 = cir.const #cir.int<5> : !s32i loc(#loc93)
    %45 = cir.cmp(ne, %43, %44) : !s32i, !cir.bool loc(#loc240)
    cir.brcond %45 ^bb10, ^bb11 loc(#loc241)
  ^bb10:  // pred: ^bb9
    %46 = cir.get_global @".str.4" : !cir.ptr<!cir.array<!s8i x 21>> loc(#loc73)
    %47 = cir.cast(array_to_ptrdecay, %46 : !cir.ptr<!cir.array<!s8i x 21>>), !cir.ptr<!s8i> loc(#loc73)
    cir.call @printLine(%47) : (!cir.ptr<!s8i>) -> () loc(#loc97)
    cir.br ^bb17 loc(#loc95)
  ^bb11:  // pred: ^bb9
    cir.br ^bb12 loc(#loc242)
  ^bb12:  // pred: ^bb11
    %48 = cir.load %1 : !cir.ptr<!cir.float>, !cir.float loc(#loc100)
    %49 = cir.cast(floating, %48 : !cir.float), !cir.double loc(#loc100)
    %50 = cir.fabs %49 : !cir.double loc(#loc100)
    %51 = cir.const #cir.fp<9.9999999999999995E-7> : !cir.double loc(#loc101)
    %52 = cir.cmp(gt, %50, %51) : !cir.double, !cir.bool loc(#loc243)
    cir.brcond %52 ^bb13, ^bb14 loc(#loc244)
  ^bb13:  // pred: ^bb12
    %53 = cir.const #cir.fp<1.000000e+02> : !cir.double loc(#loc106)
    %54 = cir.load %1 : !cir.ptr<!cir.float>, !cir.float loc(#loc107)
    %55 = cir.cast(floating, %54 : !cir.float), !cir.double loc(#loc107)
    %56 = cir.binop(div, %53, %55) : !cir.double loc(#loc245)
    %57 = cir.cast(float_to_int, %56 : !cir.double), !s32i loc(#loc245)
    cir.store %57, %0 : !s32i, !cir.ptr<!s32i> loc(#loc232)
    %58 = cir.load %0 : !cir.ptr<!s32i>, !s32i loc(#loc108)
    cir.call @printIntLine(%58) : (!s32i) -> () loc(#loc109)
    cir.br ^bb15 loc(#loc104)
  ^bb14:  // pred: ^bb12
    %59 = cir.get_global @".str.5" : !cir.ptr<!cir.array<!s8i x 38>> loc(#loc74)
    %60 = cir.cast(array_to_ptrdecay, %59 : !cir.ptr<!cir.array<!s8i x 38>>), !cir.ptr<!s8i> loc(#loc74)
    cir.call @printLine(%60) : (!cir.ptr<!s8i>) -> () loc(#loc110)
    cir.br ^bb15 loc(#loc99)
  ^bb15:  // 2 preds: ^bb13, ^bb14
    cir.br ^bb16 loc(#loc99)
  ^bb16:  // pred: ^bb15
    cir.br ^bb17 loc(#loc91)
  ^bb17:  // 2 preds: ^bb10, ^bb16
    cir.br ^bb18 loc(#loc91)
  ^bb18:  // pred: ^bb17
    cir.return loc(#loc76)
  } loc(#loc231)
  cir.func no_proto internal private @goodB2G2() extra(#fn_attr1) {
    %0 = cir.alloca !s32i, !cir.ptr<!s32i>, ["result", init] {alignment = 4 : i64} loc(#loc247)
    %1 = cir.alloca !cir.float, !cir.ptr<!cir.float>, ["data"] {alignment = 4 : i64} loc(#loc248)
    %2 = cir.const #cir.fp<0.000000e+00> : !cir.float loc(#loc117)
    cir.store %2, %1 : !cir.float, !cir.ptr<!cir.float> loc(#loc249)
    cir.br ^bb1 loc(#loc250)
  ^bb1:  // pred: ^bb0
    %3 = cir.get_global @globalFive : !cir.ptr<!s32i> loc(#loc201)
    %4 = cir.load %3 : !cir.ptr<!s32i>, !s32i loc(#loc121)
    %5 = cir.const #cir.int<5> : !s32i loc(#loc122)
    %6 = cir.cmp(eq, %4, %5) : !s32i, !cir.bool loc(#loc251)
    cir.brcond %6 ^bb2, ^bb7 loc(#loc252)
  ^bb2:  // pred: ^bb1
    %7 = cir.call @rand() : () -> !s32i extra(#fn_attr) loc(#loc124)
    %8 = cir.const #cir.int<1> : !s32i loc(#loc124)
    %9 = cir.binop(and, %7, %8) : !s32i loc(#loc124)
    %10 = cir.cast(int_to_bool, %9 : !s32i), !cir.bool loc(#loc124)
    cir.brcond %10 ^bb3, ^bb4 loc(#loc124)
  ^bb3:  // pred: ^bb2
    %11 = cir.call @rand() : () -> !s32i extra(#fn_attr) loc(#loc124)
    %12 = cir.cast(integral, %11 : !s32i), !u32i loc(#loc124)
    %13 = cir.const #cir.int<30> : !s32i loc(#loc124)
    %14 = cir.shift(left, %12 : !u32i, %13 : !s32i) -> !u32i loc(#loc124)
    %15 = cir.call @rand() : () -> !s32i extra(#fn_attr) loc(#loc124)
    %16 = cir.cast(integral, %15 : !s32i), !u32i loc(#loc124)
    %17 = cir.const #cir.int<15> : !s32i loc(#loc124)
    %18 = cir.shift(left, %16 : !u32i, %17 : !s32i) -> !u32i loc(#loc124)
    %19 = cir.binop(xor, %14, %18) : !u32i loc(#loc124)
    %20 = cir.call @rand() : () -> !s32i extra(#fn_attr) loc(#loc124)
    %21 = cir.cast(integral, %20 : !s32i), !u32i loc(#loc124)
    %22 = cir.binop(xor, %19, %21) : !u32i loc(#loc124)
    cir.br ^bb5(%22 : !u32i) loc(#loc124)
  ^bb4:  // pred: ^bb2
    %23 = cir.call @rand() : () -> !s32i extra(#fn_attr) loc(#loc124)
    %24 = cir.cast(integral, %23 : !s32i), !u32i loc(#loc124)
    %25 = cir.const #cir.int<30> : !s32i loc(#loc124)
    %26 = cir.shift(left, %24 : !u32i, %25 : !s32i) -> !u32i loc(#loc124)
    %27 = cir.call @rand() : () -> !s32i extra(#fn_attr) loc(#loc124)
    %28 = cir.cast(integral, %27 : !s32i), !u32i loc(#loc124)
    %29 = cir.const #cir.int<15> : !s32i loc(#loc124)
    %30 = cir.shift(left, %28 : !u32i, %29 : !s32i) -> !u32i loc(#loc124)
    %31 = cir.binop(xor, %26, %30) : !u32i loc(#loc124)
    %32 = cir.call @rand() : () -> !s32i extra(#fn_attr) loc(#loc124)
    %33 = cir.cast(integral, %32 : !s32i), !u32i loc(#loc124)
    %34 = cir.binop(xor, %31, %33) : !u32i loc(#loc124)
    %35 = cir.unary(minus, %34) : !u32i, !u32i loc(#loc124)
    %36 = cir.const #cir.int<1> : !s32i loc(#loc124)
    %37 = cir.cast(integral, %36 : !s32i), !u32i loc(#loc124)
    %38 = cir.binop(sub, %35, %37) : !u32i loc(#loc124)
    cir.br ^bb5(%38 : !u32i) loc(#loc124)
  ^bb5(%39: !u32i loc("CWE369_Divide_by_Zero__float_rand_14.c":88:23)):  // 2 preds: ^bb3, ^bb4
    cir.br ^bb6 loc(#loc124)
  ^bb6:  // pred: ^bb5
    %40 = cir.cast(integral, %39 : !u32i), !s32i loc(#loc124)
    %41 = cir.cast(int_to_float, %40 : !s32i), !cir.float loc(#loc124)
    cir.store %41, %1 : !cir.float, !cir.ptr<!cir.float> loc(#loc253)
    cir.br ^bb7 loc(#loc120)
  ^bb7:  // 2 preds: ^bb1, ^bb6
    cir.br ^bb8 loc(#loc120)
  ^bb8:  // pred: ^bb7
    cir.br ^bb9 loc(#loc254)
  ^bb9:  // pred: ^bb8
    %42 = cir.get_global @globalFive : !cir.ptr<!s32i> loc(#loc201)
    %43 = cir.load %42 : !cir.ptr<!s32i>, !s32i loc(#loc128)
    %44 = cir.const #cir.int<5> : !s32i loc(#loc129)
    %45 = cir.cmp(eq, %43, %44) : !s32i, !cir.bool loc(#loc255)
    cir.brcond %45 ^bb10, ^bb16 loc(#loc256)
  ^bb10:  // pred: ^bb9
    cir.br ^bb11 loc(#loc257)
  ^bb11:  // pred: ^bb10
    %46 = cir.load %1 : !cir.ptr<!cir.float>, !cir.float loc(#loc133)
    %47 = cir.cast(floating, %46 : !cir.float), !cir.double loc(#loc133)
    %48 = cir.fabs %47 : !cir.double loc(#loc133)
    %49 = cir.const #cir.fp<9.9999999999999995E-7> : !cir.double loc(#loc134)
    %50 = cir.cmp(gt, %48, %49) : !cir.double, !cir.bool loc(#loc258)
    cir.brcond %50 ^bb12, ^bb13 loc(#loc259)
  ^bb12:  // pred: ^bb11
    %51 = cir.const #cir.fp<1.000000e+02> : !cir.double loc(#loc139)
    %52 = cir.load %1 : !cir.ptr<!cir.float>, !cir.float loc(#loc140)
    %53 = cir.cast(floating, %52 : !cir.float), !cir.double loc(#loc140)
    %54 = cir.binop(div, %51, %53) : !cir.double loc(#loc260)
    %55 = cir.cast(float_to_int, %54 : !cir.double), !s32i loc(#loc260)
    cir.store %55, %0 : !s32i, !cir.ptr<!s32i> loc(#loc247)
    %56 = cir.load %0 : !cir.ptr<!s32i>, !s32i loc(#loc141)
    cir.call @printIntLine(%56) : (!s32i) -> () loc(#loc142)
    cir.br ^bb14 loc(#loc137)
  ^bb13:  // pred: ^bb11
    %57 = cir.get_global @".str.5" : !cir.ptr<!cir.array<!s8i x 38>> loc(#loc143)
    %58 = cir.cast(array_to_ptrdecay, %57 : !cir.ptr<!cir.array<!s8i x 38>>), !cir.ptr<!s8i> loc(#loc143)
    cir.call @printLine(%58) : (!cir.ptr<!s8i>) -> () loc(#loc144)
    cir.br ^bb14 loc(#loc132)
  ^bb14:  // 2 preds: ^bb12, ^bb13
    cir.br ^bb15 loc(#loc132)
  ^bb15:  // pred: ^bb14
    cir.br ^bb16 loc(#loc127)
  ^bb16:  // 2 preds: ^bb9, ^bb15
    cir.br ^bb17 loc(#loc127)
  ^bb17:  // pred: ^bb16
    cir.return loc(#loc112)
  } loc(#loc246)
  cir.func no_proto internal private @goodG2B1() extra(#fn_attr1) {
    %0 = cir.alloca !s32i, !cir.ptr<!s32i>, ["result", init] {alignment = 4 : i64} loc(#loc262)
    %1 = cir.alloca !cir.float, !cir.ptr<!cir.float>, ["data"] {alignment = 4 : i64} loc(#loc263)
    %2 = cir.const #cir.fp<0.000000e+00> : !cir.float loc(#loc151)
    cir.store %2, %1 : !cir.float, !cir.ptr<!cir.float> loc(#loc264)
    cir.br ^bb1 loc(#loc265)
  ^bb1:  // pred: ^bb0
    %3 = cir.get_global @globalFive : !cir.ptr<!s32i> loc(#loc201)
    %4 = cir.load %3 : !cir.ptr<!s32i>, !s32i loc(#loc155)
    %5 = cir.const #cir.int<5> : !s32i loc(#loc156)
    %6 = cir.cmp(ne, %4, %5) : !s32i, !cir.bool loc(#loc266)
    cir.brcond %6 ^bb2, ^bb3 loc(#loc267)
  ^bb2:  // pred: ^bb1
    %7 = cir.get_global @".str.4" : !cir.ptr<!cir.array<!s8i x 21>> loc(#loc160)
    %8 = cir.cast(array_to_ptrdecay, %7 : !cir.ptr<!cir.array<!s8i x 21>>), !cir.ptr<!s8i> loc(#loc160)
    cir.call @printLine(%8) : (!cir.ptr<!s8i>) -> () loc(#loc161)
    cir.br ^bb4 loc(#loc158)
  ^bb3:  // pred: ^bb1
    %9 = cir.const #cir.fp<2.000000e+00> : !cir.float loc(#loc162)
    cir.store %9, %1 : !cir.float, !cir.ptr<!cir.float> loc(#loc268)
    cir.br ^bb4 loc(#loc154)
  ^bb4:  // 2 preds: ^bb2, ^bb3
    cir.br ^bb5 loc(#loc154)
  ^bb5:  // pred: ^bb4
    cir.br ^bb6 loc(#loc269)
  ^bb6:  // pred: ^bb5
    %10 = cir.get_global @globalFive : !cir.ptr<!s32i> loc(#loc201)
    %11 = cir.load %10 : !cir.ptr<!s32i>, !s32i loc(#loc166)
    %12 = cir.const #cir.int<5> : !s32i loc(#loc167)
    %13 = cir.cmp(eq, %11, %12) : !s32i, !cir.bool loc(#loc270)
    cir.brcond %13 ^bb7, ^bb10 loc(#loc271)
  ^bb7:  // pred: ^bb6
    cir.br ^bb8 loc(#loc272)
  ^bb8:  // pred: ^bb7
    %14 = cir.const #cir.fp<1.000000e+02> : !cir.double loc(#loc171)
    %15 = cir.load %1 : !cir.ptr<!cir.float>, !cir.float loc(#loc172)
    %16 = cir.cast(floating, %15 : !cir.float), !cir.double loc(#loc172)
    %17 = cir.binop(div, %14, %16) : !cir.double loc(#loc273)
    %18 = cir.cast(float_to_int, %17 : !cir.double), !s32i loc(#loc273)
    cir.store %18, %0 : !s32i, !cir.ptr<!s32i> loc(#loc262)
    %19 = cir.load %0 : !cir.ptr<!s32i>, !s32i loc(#loc173)
    cir.call @printIntLine(%19) : (!s32i) -> () loc(#loc174)
    cir.br ^bb9 loc(#loc170)
  ^bb9:  // pred: ^bb8
    cir.br ^bb10 loc(#loc165)
  ^bb10:  // 2 preds: ^bb6, ^bb9
    cir.br ^bb11 loc(#loc165)
  ^bb11:  // pred: ^bb10
    cir.return loc(#loc146)
  } loc(#loc261)
  cir.func no_proto internal private @goodG2B2() extra(#fn_attr1) {
    %0 = cir.alloca !s32i, !cir.ptr<!s32i>, ["result", init] {alignment = 4 : i64} loc(#loc275)
    %1 = cir.alloca !cir.float, !cir.ptr<!cir.float>, ["data"] {alignment = 4 : i64} loc(#loc276)
    %2 = cir.const #cir.fp<0.000000e+00> : !cir.float loc(#loc181)
    cir.store %2, %1 : !cir.float, !cir.ptr<!cir.float> loc(#loc277)
    cir.br ^bb1 loc(#loc278)
  ^bb1:  // pred: ^bb0
    %3 = cir.get_global @globalFive : !cir.ptr<!s32i> loc(#loc201)
    %4 = cir.load %3 : !cir.ptr<!s32i>, !s32i loc(#loc185)
    %5 = cir.const #cir.int<5> : !s32i loc(#loc186)
    %6 = cir.cmp(eq, %4, %5) : !s32i, !cir.bool loc(#loc279)
    cir.brcond %6 ^bb2, ^bb3 loc(#loc280)
  ^bb2:  // pred: ^bb1
    %7 = cir.const #cir.fp<2.000000e+00> : !cir.float loc(#loc188)
    cir.store %7, %1 : !cir.float, !cir.ptr<!cir.float> loc(#loc281)
    cir.br ^bb3 loc(#loc184)
  ^bb3:  // 2 preds: ^bb1, ^bb2
    cir.br ^bb4 loc(#loc184)
  ^bb4:  // pred: ^bb3
    cir.br ^bb5 loc(#loc282)
  ^bb5:  // pred: ^bb4
    %8 = cir.get_global @globalFive : !cir.ptr<!s32i> loc(#loc201)
    %9 = cir.load %8 : !cir.ptr<!s32i>, !s32i loc(#loc192)
    %10 = cir.const #cir.int<5> : !s32i loc(#loc193)
    %11 = cir.cmp(eq, %9, %10) : !s32i, !cir.bool loc(#loc283)
    cir.brcond %11 ^bb6, ^bb9 loc(#loc284)
  ^bb6:  // pred: ^bb5
    cir.br ^bb7 loc(#loc285)
  ^bb7:  // pred: ^bb6
    %12 = cir.const #cir.fp<1.000000e+02> : !cir.double loc(#loc197)
    %13 = cir.load %1 : !cir.ptr<!cir.float>, !cir.float loc(#loc198)
    %14 = cir.cast(floating, %13 : !cir.float), !cir.double loc(#loc198)
    %15 = cir.binop(div, %12, %14) : !cir.double loc(#loc286)
    %16 = cir.cast(float_to_int, %15 : !cir.double), !s32i loc(#loc286)
    cir.store %16, %0 : !s32i, !cir.ptr<!s32i> loc(#loc275)
    %17 = cir.load %0 : !cir.ptr<!s32i>, !s32i loc(#loc199)
    cir.call @printIntLine(%17) : (!s32i) -> () loc(#loc200)
    cir.br ^bb8 loc(#loc196)
  ^bb8:  // pred: ^bb7
    cir.br ^bb9 loc(#loc191)
  ^bb9:  // 2 preds: ^bb5, ^bb8
    cir.br ^bb10 loc(#loc191)
  ^bb10:  // pred: ^bb9
    cir.return loc(#loc176)
  } loc(#loc274)
} loc(#loc)
#loc = loc("/home/ladisgin/git_proj/juliet-c/testcases/CWE369_Divide_by_Zero/s01/CWE369_Divide_by_Zero__float_rand_14.c":0:0)
#loc1 = loc("../../../testcasesupport/std_testcase.h":118:1)
#loc2 = loc("../../../testcasesupport/std_testcase.h":118:12)
#loc3 = loc("/usr/include/stdlib.h":573:1)
#loc4 = loc("/usr/include/stdlib.h":573:24)
#loc5 = loc("../../../testcasesupport/std_testcase_io.h":18:1)
#loc6 = loc("../../../testcasesupport/std_testcase_io.h":18:33)
#loc7 = loc("CWE369_Divide_by_Zero__float_rand_14.c":24:1)
#loc8 = loc("CWE369_Divide_by_Zero__float_rand_14.c":42:1)
#loc9 = loc("CWE369_Divide_by_Zero__float_rand_14.c":38:13)
#loc10 = loc("CWE369_Divide_by_Zero__float_rand_14.c":38:44)
#loc11 = loc("CWE369_Divide_by_Zero__float_rand_14.c":26:5)
#loc12 = loc("CWE369_Divide_by_Zero__float_rand_14.c":26:11)
#loc13 = loc("CWE369_Divide_by_Zero__float_rand_14.c":28:12)
#loc14 = loc("CWE369_Divide_by_Zero__float_rand_14.c":28:5)
#loc15 = loc("CWE369_Divide_by_Zero__float_rand_14.c":29:5)
#loc16 = loc("CWE369_Divide_by_Zero__float_rand_14.c":33:5)
#loc17 = loc("CWE369_Divide_by_Zero__float_rand_14.c":29:8)
#loc18 = loc("CWE369_Divide_by_Zero__float_rand_14.c":29:20)
#loc19 = loc("CWE369_Divide_by_Zero__float_rand_14.c":30:5)
#loc21 = loc("CWE369_Divide_by_Zero__float_rand_14.c":32:9)
#loc22 = loc("CWE369_Divide_by_Zero__float_rand_14.c":34:5)
#loc23 = loc("CWE369_Divide_by_Zero__float_rand_14.c":41:5)
#loc24 = loc("CWE369_Divide_by_Zero__float_rand_14.c":34:8)
#loc25 = loc("CWE369_Divide_by_Zero__float_rand_14.c":34:20)
#loc26 = loc("CWE369_Divide_by_Zero__float_rand_14.c":35:5)
#loc27 = loc("CWE369_Divide_by_Zero__float_rand_14.c":36:9)
#loc28 = loc("CWE369_Divide_by_Zero__float_rand_14.c":40:9)
#loc29 = loc("CWE369_Divide_by_Zero__float_rand_14.c":38:32)
#loc30 = loc("CWE369_Divide_by_Zero__float_rand_14.c":38:40)
#loc31 = loc("CWE369_Divide_by_Zero__float_rand_14.c":39:26)
#loc32 = loc("CWE369_Divide_by_Zero__float_rand_14.c":39:13)
#loc33 = loc("CWE369_Divide_by_Zero__float_rand_14.c":152:1)
#loc34 = loc("CWE369_Divide_by_Zero__float_rand_14.c":158:1)
#loc35 = loc("CWE369_Divide_by_Zero__float_rand_14.c":154:5)
#loc36 = loc("CWE369_Divide_by_Zero__float_rand_14.c":154:14)
#loc37 = loc("CWE369_Divide_by_Zero__float_rand_14.c":155:5)
#loc38 = loc("CWE369_Divide_by_Zero__float_rand_14.c":155:14)
#loc39 = loc("CWE369_Divide_by_Zero__float_rand_14.c":156:5)
#loc40 = loc("CWE369_Divide_by_Zero__float_rand_14.c":156:14)
#loc41 = loc("CWE369_Divide_by_Zero__float_rand_14.c":157:5)
#loc42 = loc("CWE369_Divide_by_Zero__float_rand_14.c":157:14)
#loc43 = loc("/usr/include/stdlib.h":575:1)
#loc44 = loc("/usr/include/stdlib.h":575:41)
#loc45 = loc("/usr/include/time.h":76:1)
#loc46 = loc("/usr/include/time.h":76:38)
#loc47 = loc("../../../testcasesupport/std_testcase_io.h":14:1)
#loc48 = loc("../../../testcasesupport/std_testcase_io.h":14:33)
#loc49 = loc("CWE369_Divide_by_Zero__float_rand_14.c":174:15)
#loc50 = loc("CWE369_Divide_by_Zero__float_rand_14.c":176:15)
#loc51 = loc("CWE369_Divide_by_Zero__float_rand_14.c":179:15)
#loc52 = loc("CWE369_Divide_by_Zero__float_rand_14.c":181:15)
#loc53 = loc("CWE369_Divide_by_Zero__float_rand_14.c":169:1)
#loc54 = loc("CWE369_Divide_by_Zero__float_rand_14.c":184:1)
#loc59 = loc("CWE369_Divide_by_Zero__float_rand_14.c":170:1)
#loc60 = loc("CWE369_Divide_by_Zero__float_rand_14.c":172:27)
#loc61 = loc("CWE369_Divide_by_Zero__float_rand_14.c":172:22)
#loc62 = loc("CWE369_Divide_by_Zero__float_rand_14.c":172:5)
#loc63 = loc("CWE369_Divide_by_Zero__float_rand_14.c":174:5)
#loc64 = loc("CWE369_Divide_by_Zero__float_rand_14.c":175:5)
#loc65 = loc("CWE369_Divide_by_Zero__float_rand_14.c":175:47)
#loc66 = loc("CWE369_Divide_by_Zero__float_rand_14.c":176:5)
#loc67 = loc("CWE369_Divide_by_Zero__float_rand_14.c":179:5)
#loc68 = loc("CWE369_Divide_by_Zero__float_rand_14.c":180:5)
#loc69 = loc("CWE369_Divide_by_Zero__float_rand_14.c":180:46)
#loc70 = loc("CWE369_Divide_by_Zero__float_rand_14.c":181:5)
#loc71 = loc("CWE369_Divide_by_Zero__float_rand_14.c":183:12)
#loc72 = loc("CWE369_Divide_by_Zero__float_rand_14.c":183:5)
#loc73 = loc("CWE369_Divide_by_Zero__float_rand_14.c":62:19)
#loc74 = loc("CWE369_Divide_by_Zero__float_rand_14.c":74:23)
#loc75 = loc("CWE369_Divide_by_Zero__float_rand_14.c":49:1)
#loc76 = loc("CWE369_Divide_by_Zero__float_rand_14.c":77:1)
#loc77 = loc("CWE369_Divide_by_Zero__float_rand_14.c":69:13)
#loc78 = loc("CWE369_Divide_by_Zero__float_rand_14.c":69:44)
#loc79 = loc("CWE369_Divide_by_Zero__float_rand_14.c":51:5)
#loc80 = loc("CWE369_Divide_by_Zero__float_rand_14.c":51:11)
#loc81 = loc("CWE369_Divide_by_Zero__float_rand_14.c":53:12)
#loc82 = loc("CWE369_Divide_by_Zero__float_rand_14.c":53:5)
#loc83 = loc("CWE369_Divide_by_Zero__float_rand_14.c":54:5)
#loc84 = loc("CWE369_Divide_by_Zero__float_rand_14.c":58:5)
#loc85 = loc("CWE369_Divide_by_Zero__float_rand_14.c":54:8)
#loc86 = loc("CWE369_Divide_by_Zero__float_rand_14.c":54:20)
#loc87 = loc("CWE369_Divide_by_Zero__float_rand_14.c":55:5)
#loc89 = loc("CWE369_Divide_by_Zero__float_rand_14.c":57:9)
#loc90 = loc("CWE369_Divide_by_Zero__float_rand_14.c":59:5)
#loc91 = loc("CWE369_Divide_by_Zero__float_rand_14.c":76:5)
#loc92 = loc("CWE369_Divide_by_Zero__float_rand_14.c":59:8)
#loc93 = loc("CWE369_Divide_by_Zero__float_rand_14.c":59:20)
#loc94 = loc("CWE369_Divide_by_Zero__float_rand_14.c":60:5)
#loc95 = loc("CWE369_Divide_by_Zero__float_rand_14.c":63:5)
#loc96 = loc("CWE369_Divide_by_Zero__float_rand_14.c":65:5)
#loc97 = loc("CWE369_Divide_by_Zero__float_rand_14.c":62:9)
#loc98 = loc("CWE369_Divide_by_Zero__float_rand_14.c":67:9)
#loc99 = loc("CWE369_Divide_by_Zero__float_rand_14.c":75:9)
#loc100 = loc("CWE369_Divide_by_Zero__float_rand_14.c":67:17)
#loc101 = loc("CWE369_Divide_by_Zero__float_rand_14.c":67:25)
#loc102 = loc("CWE369_Divide_by_Zero__float_rand_14.c":67:12)
#loc103 = loc("CWE369_Divide_by_Zero__float_rand_14.c":68:9)
#loc104 = loc("CWE369_Divide_by_Zero__float_rand_14.c":71:9)
#loc105 = loc("CWE369_Divide_by_Zero__float_rand_14.c":73:9)
#loc106 = loc("CWE369_Divide_by_Zero__float_rand_14.c":69:32)
#loc107 = loc("CWE369_Divide_by_Zero__float_rand_14.c":69:40)
#loc108 = loc("CWE369_Divide_by_Zero__float_rand_14.c":70:26)
#loc109 = loc("CWE369_Divide_by_Zero__float_rand_14.c":70:13)
#loc110 = loc("CWE369_Divide_by_Zero__float_rand_14.c":74:13)
#loc111 = loc("CWE369_Divide_by_Zero__float_rand_14.c":80:1)
#loc112 = loc("CWE369_Divide_by_Zero__float_rand_14.c":103:1)
#loc113 = loc("CWE369_Divide_by_Zero__float_rand_14.c":95:13)
#loc114 = loc("CWE369_Divide_by_Zero__float_rand_14.c":95:44)
#loc115 = loc("CWE369_Divide_by_Zero__float_rand_14.c":82:5)
#loc116 = loc("CWE369_Divide_by_Zero__float_rand_14.c":82:11)
#loc117 = loc("CWE369_Divide_by_Zero__float_rand_14.c":84:12)
#loc118 = loc("CWE369_Divide_by_Zero__float_rand_14.c":84:5)
#loc119 = loc("CWE369_Divide_by_Zero__float_rand_14.c":85:5)
#loc120 = loc("CWE369_Divide_by_Zero__float_rand_14.c":89:5)
#loc121 = loc("CWE369_Divide_by_Zero__float_rand_14.c":85:8)
#loc122 = loc("CWE369_Divide_by_Zero__float_rand_14.c":85:20)
#loc123 = loc("CWE369_Divide_by_Zero__float_rand_14.c":86:5)
#loc125 = loc("CWE369_Divide_by_Zero__float_rand_14.c":88:9)
#loc126 = loc("CWE369_Divide_by_Zero__float_rand_14.c":90:5)
#loc127 = loc("CWE369_Divide_by_Zero__float_rand_14.c":102:5)
#loc128 = loc("CWE369_Divide_by_Zero__float_rand_14.c":90:8)
#loc129 = loc("CWE369_Divide_by_Zero__float_rand_14.c":90:20)
#loc130 = loc("CWE369_Divide_by_Zero__float_rand_14.c":91:5)
#loc131 = loc("CWE369_Divide_by_Zero__float_rand_14.c":93:9)
#loc132 = loc("CWE369_Divide_by_Zero__float_rand_14.c":101:9)
#loc133 = loc("CWE369_Divide_by_Zero__float_rand_14.c":93:17)
#loc134 = loc("CWE369_Divide_by_Zero__float_rand_14.c":93:25)
#loc135 = loc("CWE369_Divide_by_Zero__float_rand_14.c":93:12)
#loc136 = loc("CWE369_Divide_by_Zero__float_rand_14.c":94:9)
#loc137 = loc("CWE369_Divide_by_Zero__float_rand_14.c":97:9)
#loc138 = loc("CWE369_Divide_by_Zero__float_rand_14.c":99:9)
#loc139 = loc("CWE369_Divide_by_Zero__float_rand_14.c":95:32)
#loc140 = loc("CWE369_Divide_by_Zero__float_rand_14.c":95:40)
#loc141 = loc("CWE369_Divide_by_Zero__float_rand_14.c":96:26)
#loc142 = loc("CWE369_Divide_by_Zero__float_rand_14.c":96:13)
#loc143 = loc("CWE369_Divide_by_Zero__float_rand_14.c":100:23)
#loc144 = loc("CWE369_Divide_by_Zero__float_rand_14.c":100:13)
#loc145 = loc("CWE369_Divide_by_Zero__float_rand_14.c":106:1)
#loc146 = loc("CWE369_Divide_by_Zero__float_rand_14.c":129:1)
#loc147 = loc("CWE369_Divide_by_Zero__float_rand_14.c":125:13)
#loc148 = loc("CWE369_Divide_by_Zero__float_rand_14.c":125:44)
#loc149 = loc("CWE369_Divide_by_Zero__float_rand_14.c":108:5)
#loc150 = loc("CWE369_Divide_by_Zero__float_rand_14.c":108:11)
#loc151 = loc("CWE369_Divide_by_Zero__float_rand_14.c":110:12)
#loc152 = loc("CWE369_Divide_by_Zero__float_rand_14.c":110:5)
#loc153 = loc("CWE369_Divide_by_Zero__float_rand_14.c":111:5)
#loc154 = loc("CWE369_Divide_by_Zero__float_rand_14.c":120:5)
#loc155 = loc("CWE369_Divide_by_Zero__float_rand_14.c":111:8)
#loc156 = loc("CWE369_Divide_by_Zero__float_rand_14.c":111:20)
#loc157 = loc("CWE369_Divide_by_Zero__float_rand_14.c":112:5)
#loc158 = loc("CWE369_Divide_by_Zero__float_rand_14.c":115:5)
#loc159 = loc("CWE369_Divide_by_Zero__float_rand_14.c":117:5)
#loc160 = loc("CWE369_Divide_by_Zero__float_rand_14.c":114:19)
#loc161 = loc("CWE369_Divide_by_Zero__float_rand_14.c":114:9)
#loc162 = loc("CWE369_Divide_by_Zero__float_rand_14.c":119:16)
#loc163 = loc("CWE369_Divide_by_Zero__float_rand_14.c":119:9)
#loc164 = loc("CWE369_Divide_by_Zero__float_rand_14.c":121:5)
#loc165 = loc("CWE369_Divide_by_Zero__float_rand_14.c":128:5)
#loc166 = loc("CWE369_Divide_by_Zero__float_rand_14.c":121:8)
#loc167 = loc("CWE369_Divide_by_Zero__float_rand_14.c":121:20)
#loc168 = loc("CWE369_Divide_by_Zero__float_rand_14.c":122:5)
#loc169 = loc("CWE369_Divide_by_Zero__float_rand_14.c":123:9)
#loc170 = loc("CWE369_Divide_by_Zero__float_rand_14.c":127:9)
#loc171 = loc("CWE369_Divide_by_Zero__float_rand_14.c":125:32)
#loc172 = loc("CWE369_Divide_by_Zero__float_rand_14.c":125:40)
#loc173 = loc("CWE369_Divide_by_Zero__float_rand_14.c":126:26)
#loc174 = loc("CWE369_Divide_by_Zero__float_rand_14.c":126:13)
#loc175 = loc("CWE369_Divide_by_Zero__float_rand_14.c":132:1)
#loc176 = loc("CWE369_Divide_by_Zero__float_rand_14.c":150:1)
#loc177 = loc("CWE369_Divide_by_Zero__float_rand_14.c":146:13)
#loc178 = loc("CWE369_Divide_by_Zero__float_rand_14.c":146:44)
#loc179 = loc("CWE369_Divide_by_Zero__float_rand_14.c":134:5)
#loc180 = loc("CWE369_Divide_by_Zero__float_rand_14.c":134:11)
#loc181 = loc("CWE369_Divide_by_Zero__float_rand_14.c":136:12)
#loc182 = loc("CWE369_Divide_by_Zero__float_rand_14.c":136:5)
#loc183 = loc("CWE369_Divide_by_Zero__float_rand_14.c":137:5)
#loc184 = loc("CWE369_Divide_by_Zero__float_rand_14.c":141:5)
#loc185 = loc("CWE369_Divide_by_Zero__float_rand_14.c":137:8)
#loc186 = loc("CWE369_Divide_by_Zero__float_rand_14.c":137:20)
#loc187 = loc("CWE369_Divide_by_Zero__float_rand_14.c":138:5)
#loc188 = loc("CWE369_Divide_by_Zero__float_rand_14.c":140:16)
#loc189 = loc("CWE369_Divide_by_Zero__float_rand_14.c":140:9)
#loc190 = loc("CWE369_Divide_by_Zero__float_rand_14.c":142:5)
#loc191 = loc("CWE369_Divide_by_Zero__float_rand_14.c":149:5)
#loc192 = loc("CWE369_Divide_by_Zero__float_rand_14.c":142:8)
#loc193 = loc("CWE369_Divide_by_Zero__float_rand_14.c":142:20)
#loc194 = loc("CWE369_Divide_by_Zero__float_rand_14.c":143:5)
#loc195 = loc("CWE369_Divide_by_Zero__float_rand_14.c":144:9)
#loc196 = loc("CWE369_Divide_by_Zero__float_rand_14.c":148:9)
#loc197 = loc("CWE369_Divide_by_Zero__float_rand_14.c":146:32)
#loc198 = loc("CWE369_Divide_by_Zero__float_rand_14.c":146:40)
#loc199 = loc("CWE369_Divide_by_Zero__float_rand_14.c":147:26)
#loc200 = loc("CWE369_Divide_by_Zero__float_rand_14.c":147:13)
#loc201 = loc(fused[#loc1, #loc2])
#loc202 = loc(fused[#loc3, #loc4])
#loc203 = loc(fused[#loc5, #loc6])
#loc204 = loc(fused[#loc7, #loc8])
#loc205 = loc(fused[#loc9, #loc10])
#loc206 = loc(fused[#loc11, #loc12])
#loc207 = loc(fused[#loc14, #loc13])
#loc208 = loc(fused[#loc15, #loc16])
#loc209 = loc(fused[#loc17, #loc18])
#loc210 = loc(fused[#loc19, #loc16])
#loc211 = loc(fused[#loc21, #loc20])
#loc212 = loc(fused[#loc22, #loc23])
#loc213 = loc(fused[#loc24, #loc25])
#loc214 = loc(fused[#loc26, #loc23])
#loc215 = loc(fused[#loc27, #loc28])
#loc216 = loc(fused[#loc29, #loc30])
#loc217 = loc(fused[#loc33, #loc34])
#loc218 = loc(fused[#loc35, #loc36])
#loc219 = loc(fused[#loc37, #loc38])
#loc220 = loc(fused[#loc39, #loc40])
#loc221 = loc(fused[#loc41, #loc42])
#loc222 = loc(fused[#loc43, #loc44])
#loc223 = loc(fused[#loc45, #loc46])
#loc224 = loc(fused[#loc47, #loc48])
#loc225 = loc(fused[#loc53, #loc54])
#loc228 = loc(fused[#loc64, #loc65])
#loc229 = loc(fused[#loc68, #loc69])
#loc230 = loc(fused[#loc72, #loc71])
#loc231 = loc(fused[#loc75, #loc76])
#loc232 = loc(fused[#loc77, #loc78])
#loc233 = loc(fused[#loc79, #loc80])
#loc234 = loc(fused[#loc82, #loc81])
#loc235 = loc(fused[#loc83, #loc84])
#loc236 = loc(fused[#loc85, #loc86])
#loc237 = loc(fused[#loc87, #loc84])
#loc238 = loc(fused[#loc89, #loc88])
#loc239 = loc(fused[#loc90, #loc91])
#loc240 = loc(fused[#loc92, #loc93])
#loc241 = loc(fused[#loc94, #loc95, #loc96, #loc91])
#loc242 = loc(fused[#loc98, #loc99])
#loc243 = loc(fused[#loc102, #loc101])
#loc244 = loc(fused[#loc103, #loc104, #loc105, #loc99])
#loc245 = loc(fused[#loc106, #loc107])
#loc246 = loc(fused[#loc111, #loc112])
#loc247 = loc(fused[#loc113, #loc114])
#loc248 = loc(fused[#loc115, #loc116])
#loc249 = loc(fused[#loc118, #loc117])
#loc250 = loc(fused[#loc119, #loc120])
#loc251 = loc(fused[#loc121, #loc122])
#loc252 = loc(fused[#loc123, #loc120])
#loc253 = loc(fused[#loc125, #loc124])
#loc254 = loc(fused[#loc126, #loc127])
#loc255 = loc(fused[#loc128, #loc129])
#loc256 = loc(fused[#loc130, #loc127])
#loc257 = loc(fused[#loc131, #loc132])
#loc258 = loc(fused[#loc135, #loc134])
#loc259 = loc(fused[#loc136, #loc137, #loc138, #loc132])
#loc260 = loc(fused[#loc139, #loc140])
#loc261 = loc(fused[#loc145, #loc146])
#loc262 = loc(fused[#loc147, #loc148])
#loc263 = loc(fused[#loc149, #loc150])
#loc264 = loc(fused[#loc152, #loc151])
#loc265 = loc(fused[#loc153, #loc154])
#loc266 = loc(fused[#loc155, #loc156])
#loc267 = loc(fused[#loc157, #loc158, #loc159, #loc154])
#loc268 = loc(fused[#loc163, #loc162])
#loc269 = loc(fused[#loc164, #loc165])
#loc270 = loc(fused[#loc166, #loc167])
#loc271 = loc(fused[#loc168, #loc165])
#loc272 = loc(fused[#loc169, #loc170])
#loc273 = loc(fused[#loc171, #loc172])
#loc274 = loc(fused[#loc175, #loc176])
#loc275 = loc(fused[#loc177, #loc178])
#loc276 = loc(fused[#loc179, #loc180])
#loc277 = loc(fused[#loc182, #loc181])
#loc278 = loc(fused[#loc183, #loc184])
#loc279 = loc(fused[#loc185, #loc186])
#loc280 = loc(fused[#loc187, #loc184])
#loc281 = loc(fused[#loc189, #loc188])
#loc282 = loc(fused[#loc190, #loc191])
#loc283 = loc(fused[#loc192, #loc193])
#loc284 = loc(fused[#loc194, #loc191])
#loc285 = loc(fused[#loc195, #loc196])
#loc286 = loc(fused[#loc197, #loc198])
