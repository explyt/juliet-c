!s32i = !cir.int<s, 32>
!s8i = !cir.int<s, 8>
!u64i = !cir.int<u, 64>
!void = !cir.void
#fn_attr = #cir<extra({inline = #cir.inline<no>, optnone = #cir.optnone, uwtable = #cir.uwtable<async>})>
#loc3 = loc("CWE122_Heap_Based_Buffer_Overflow__cpp_src_char_cpy_61b.cpp":26:18)
#loc4 = loc("CWE122_Heap_Based_Buffer_Overflow__cpp_src_char_cpy_61b.cpp":26:25)
#loc21 = loc("CWE122_Heap_Based_Buffer_Overflow__cpp_src_char_cpy_61b.cpp":39:22)
#loc22 = loc("CWE122_Heap_Based_Buffer_Overflow__cpp_src_char_cpy_61b.cpp":39:29)
#loc38 = loc(fused[#loc3, #loc4])
#loc43 = loc(fused[#loc21, #loc22])
module @"/workspaces/juliet-c/testcases/CWE122_Heap_Based_Buffer_Overflow/s05/CWE122_Heap_Based_Buffer_Overflow__cpp_src_char_cpy_61b.cpp" attributes {cir.lang = #cir.lang<cxx>, cir.sob = #cir.signed_overflow_behavior<undefined>, cir.triple = "x86_64-unknown-linux-gnu", cir.type_size_info = #cir.type_size_info<char = 8, int = 32, size_t = 64>, cir.uwtable = #cir.uwtable<async>, dlti.dl_spec = #dlti.dl_spec<i16 = dense<16> : vector<2xi64>, f16 = dense<16> : vector<2xi64>, i32 = dense<32> : vector<2xi64>, !llvm.ptr = dense<64> : vector<4xi64>, i8 = dense<8> : vector<2xi64>, i1 = dense<8> : vector<2xi64>, i64 = dense<64> : vector<2xi64>, i128 = dense<128> : vector<2xi64>, f80 = dense<128> : vector<2xi64>, !llvm.ptr<270> = dense<32> : vector<4xi64>, f64 = dense<64> : vector<2xi64>, f128 = dense<128> : vector<2xi64>, !llvm.ptr<272> = dense<64> : vector<4xi64>, !llvm.ptr<271> = dense<32> : vector<4xi64>, "dlti.endianness" = "little", "dlti.stack_alignment" = 128 : i64, "dlti.mangling_mode" = "e">} {
  cir.func @_ZN54CWE122_Heap_Based_Buffer_Overflow__cpp_src_char_cpy_619badSourceEPc(%arg0: !cir.ptr<!s8i> loc(fused[#loc3, #loc4])) -> !cir.ptr<!s8i> extra(#fn_attr) {
    %0 = cir.alloca !cir.ptr<!s8i>, !cir.ptr<!cir.ptr<!s8i>>, ["data", init] {alignment = 8 : i64} loc(#loc38)
    %1 = cir.alloca !cir.ptr<!s8i>, !cir.ptr<!cir.ptr<!s8i>>, ["__retval"] {alignment = 8 : i64} loc(#loc2)
    cir.store %arg0, %0 : !cir.ptr<!s8i>, !cir.ptr<!cir.ptr<!s8i>> loc(#loc5)
    %2 = cir.load %0 : !cir.ptr<!cir.ptr<!s8i>>, !cir.ptr<!s8i> loc(#loc6)
    %3 = cir.cast(bitcast, %2 : !cir.ptr<!s8i>), !cir.ptr<!void> loc(#loc6)
    %4 = cir.const #cir.int<65> : !s8i loc(#loc7)
    %5 = cir.cast(integral, %4 : !s8i), !s32i loc(#loc7)
    %6 = cir.const #cir.int<100> : !s32i loc(#loc8)
    %7 = cir.const #cir.int<1> : !s32i loc(#loc9)
    %8 = cir.binop(sub, %6, %7) nsw : !s32i loc(#loc8)
    %9 = cir.cast(integral, %8 : !s32i), !u64i loc(#loc8)
    cir.libc.memset %9 bytes from %3 set to %5 : !cir.ptr<!void>, !s32i, !u64i loc(#loc39)
    %10 = cir.const #cir.int<0> : !s8i loc(#loc12)
    %11 = cir.load %0 : !cir.ptr<!cir.ptr<!s8i>>, !cir.ptr<!s8i> loc(#loc13)
    %12 = cir.const #cir.int<100> : !s32i loc(#loc14)
    %13 = cir.const #cir.int<1> : !s32i loc(#loc15)
    %14 = cir.binop(sub, %12, %13) nsw : !s32i loc(#loc14)
    %15 = cir.ptr_stride(%11 : !cir.ptr<!s8i>, %14 : !s32i), !cir.ptr<!s8i> loc(#loc16)
    cir.store %10, %15 : !s8i, !cir.ptr<!s8i> loc(#loc40)
    %16 = cir.load %0 : !cir.ptr<!cir.ptr<!s8i>>, !cir.ptr<!s8i> loc(#loc17)
    cir.store %16, %1 : !cir.ptr<!s8i>, !cir.ptr<!cir.ptr<!s8i>> loc(#loc41)
    %17 = cir.load %1 : !cir.ptr<!cir.ptr<!s8i>>, !cir.ptr<!s8i> loc(#loc41)
    cir.return %17 : !cir.ptr<!s8i> loc(#loc41)
  } loc(#loc37)
  cir.func @_ZN54CWE122_Heap_Based_Buffer_Overflow__cpp_src_char_cpy_6113goodG2BSourceEPc(%arg0: !cir.ptr<!s8i> loc(fused[#loc21, #loc22])) -> !cir.ptr<!s8i> extra(#fn_attr) {
    %0 = cir.alloca !cir.ptr<!s8i>, !cir.ptr<!cir.ptr<!s8i>>, ["data", init] {alignment = 8 : i64} loc(#loc43)
    %1 = cir.alloca !cir.ptr<!s8i>, !cir.ptr<!cir.ptr<!s8i>>, ["__retval"] {alignment = 8 : i64} loc(#loc20)
    cir.store %arg0, %0 : !cir.ptr<!s8i>, !cir.ptr<!cir.ptr<!s8i>> loc(#loc23)
    %2 = cir.load %0 : !cir.ptr<!cir.ptr<!s8i>>, !cir.ptr<!s8i> loc(#loc24)
    %3 = cir.cast(bitcast, %2 : !cir.ptr<!s8i>), !cir.ptr<!void> loc(#loc24)
    %4 = cir.const #cir.int<65> : !s8i loc(#loc25)
    %5 = cir.cast(integral, %4 : !s8i), !s32i loc(#loc25)
    %6 = cir.const #cir.int<50> : !s32i loc(#loc26)
    %7 = cir.const #cir.int<1> : !s32i loc(#loc27)
    %8 = cir.binop(sub, %6, %7) nsw : !s32i loc(#loc26)
    %9 = cir.cast(integral, %8 : !s32i), !u64i loc(#loc26)
    cir.libc.memset %9 bytes from %3 set to %5 : !cir.ptr<!void>, !s32i, !u64i loc(#loc44)
    %10 = cir.const #cir.int<0> : !s8i loc(#loc30)
    %11 = cir.load %0 : !cir.ptr<!cir.ptr<!s8i>>, !cir.ptr<!s8i> loc(#loc31)
    %12 = cir.const #cir.int<50> : !s32i loc(#loc32)
    %13 = cir.const #cir.int<1> : !s32i loc(#loc33)
    %14 = cir.binop(sub, %12, %13) nsw : !s32i loc(#loc32)
    %15 = cir.ptr_stride(%11 : !cir.ptr<!s8i>, %14 : !s32i), !cir.ptr<!s8i> loc(#loc34)
    cir.store %10, %15 : !s8i, !cir.ptr<!s8i> loc(#loc45)
    %16 = cir.load %0 : !cir.ptr<!cir.ptr<!s8i>>, !cir.ptr<!s8i> loc(#loc35)
    cir.store %16, %1 : !cir.ptr<!s8i>, !cir.ptr<!cir.ptr<!s8i>> loc(#loc46)
    %17 = cir.load %1 : !cir.ptr<!cir.ptr<!s8i>>, !cir.ptr<!s8i> loc(#loc46)
    cir.return %17 : !cir.ptr<!s8i> loc(#loc46)
  } loc(#loc42)
} loc(#loc)
#loc = loc("/workspaces/juliet-c/testcases/CWE122_Heap_Based_Buffer_Overflow/s05/CWE122_Heap_Based_Buffer_Overflow__cpp_src_char_cpy_61b.cpp":0:0)
#loc1 = loc("CWE122_Heap_Based_Buffer_Overflow__cpp_src_char_cpy_61b.cpp":26:1)
#loc2 = loc("CWE122_Heap_Based_Buffer_Overflow__cpp_src_char_cpy_61b.cpp":32:1)
#loc5 = loc("CWE122_Heap_Based_Buffer_Overflow__cpp_src_char_cpy_61b.cpp":27:1)
#loc6 = loc("CWE122_Heap_Based_Buffer_Overflow__cpp_src_char_cpy_61b.cpp":29:12)
#loc7 = loc("CWE122_Heap_Based_Buffer_Overflow__cpp_src_char_cpy_61b.cpp":29:18)
#loc8 = loc("CWE122_Heap_Based_Buffer_Overflow__cpp_src_char_cpy_61b.cpp":29:23)
#loc9 = loc("CWE122_Heap_Based_Buffer_Overflow__cpp_src_char_cpy_61b.cpp":29:27)
#loc10 = loc("CWE122_Heap_Based_Buffer_Overflow__cpp_src_char_cpy_61b.cpp":29:5)
#loc11 = loc("CWE122_Heap_Based_Buffer_Overflow__cpp_src_char_cpy_61b.cpp":29:28)
#loc12 = loc("CWE122_Heap_Based_Buffer_Overflow__cpp_src_char_cpy_61b.cpp":30:19)
#loc13 = loc("CWE122_Heap_Based_Buffer_Overflow__cpp_src_char_cpy_61b.cpp":30:5)
#loc14 = loc("CWE122_Heap_Based_Buffer_Overflow__cpp_src_char_cpy_61b.cpp":30:10)
#loc15 = loc("CWE122_Heap_Based_Buffer_Overflow__cpp_src_char_cpy_61b.cpp":30:14)
#loc16 = loc("CWE122_Heap_Based_Buffer_Overflow__cpp_src_char_cpy_61b.cpp":30:15)
#loc17 = loc("CWE122_Heap_Based_Buffer_Overflow__cpp_src_char_cpy_61b.cpp":31:12)
#loc18 = loc("CWE122_Heap_Based_Buffer_Overflow__cpp_src_char_cpy_61b.cpp":31:5)
#loc19 = loc("CWE122_Heap_Based_Buffer_Overflow__cpp_src_char_cpy_61b.cpp":39:1)
#loc20 = loc("CWE122_Heap_Based_Buffer_Overflow__cpp_src_char_cpy_61b.cpp":45:1)
#loc23 = loc("CWE122_Heap_Based_Buffer_Overflow__cpp_src_char_cpy_61b.cpp":40:1)
#loc24 = loc("CWE122_Heap_Based_Buffer_Overflow__cpp_src_char_cpy_61b.cpp":42:12)
#loc25 = loc("CWE122_Heap_Based_Buffer_Overflow__cpp_src_char_cpy_61b.cpp":42:18)
#loc26 = loc("CWE122_Heap_Based_Buffer_Overflow__cpp_src_char_cpy_61b.cpp":42:23)
#loc27 = loc("CWE122_Heap_Based_Buffer_Overflow__cpp_src_char_cpy_61b.cpp":42:26)
#loc28 = loc("CWE122_Heap_Based_Buffer_Overflow__cpp_src_char_cpy_61b.cpp":42:5)
#loc29 = loc("CWE122_Heap_Based_Buffer_Overflow__cpp_src_char_cpy_61b.cpp":42:27)
#loc30 = loc("CWE122_Heap_Based_Buffer_Overflow__cpp_src_char_cpy_61b.cpp":43:18)
#loc31 = loc("CWE122_Heap_Based_Buffer_Overflow__cpp_src_char_cpy_61b.cpp":43:5)
#loc32 = loc("CWE122_Heap_Based_Buffer_Overflow__cpp_src_char_cpy_61b.cpp":43:10)
#loc33 = loc("CWE122_Heap_Based_Buffer_Overflow__cpp_src_char_cpy_61b.cpp":43:13)
#loc34 = loc("CWE122_Heap_Based_Buffer_Overflow__cpp_src_char_cpy_61b.cpp":43:14)
#loc35 = loc("CWE122_Heap_Based_Buffer_Overflow__cpp_src_char_cpy_61b.cpp":44:12)
#loc36 = loc("CWE122_Heap_Based_Buffer_Overflow__cpp_src_char_cpy_61b.cpp":44:5)
#loc37 = loc(fused[#loc1, #loc2])
#loc39 = loc(fused[#loc10, #loc11])
#loc40 = loc(fused[#loc13, #loc12])
#loc41 = loc(fused[#loc18, #loc17])
#loc42 = loc(fused[#loc19, #loc20])
#loc44 = loc(fused[#loc28, #loc29])
#loc45 = loc(fused[#loc31, #loc30])
#loc46 = loc(fused[#loc36, #loc35])
