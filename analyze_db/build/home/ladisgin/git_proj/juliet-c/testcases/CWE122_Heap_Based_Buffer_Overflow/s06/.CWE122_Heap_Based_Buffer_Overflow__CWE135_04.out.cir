!s32i = !cir.int<s, 32>
!s64i = !cir.int<s, 64>
!s8i = !cir.int<s, 8>
!u32i = !cir.int<u, 32>
!u64i = !cir.int<u, 64>
!void = !cir.void
#fn_attr = #cir<extra({nothrow = #cir.nothrow})>
#fn_attr1 = #cir<extra({inline = #cir.inline<no>, nothrow = #cir.nothrow, optnone = #cir.optnone})>
#loc107 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE135_04.c":210:10)
#loc108 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE135_04.c":210:14)
#loc109 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE135_04.c":210:20)
#loc110 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE135_04.c":210:32)
#loc460 = loc(fused[#loc107, #loc108])
#loc461 = loc(fused[#loc109, #loc110])
module @"/home/ladisgin/git_proj/juliet-c/testcases/CWE122_Heap_Based_Buffer_Overflow/s06/CWE122_Heap_Based_Buffer_Overflow__CWE135_04.c" attributes {cir.lang = #cir.lang<c>, cir.sob = #cir.signed_overflow_behavior<undefined>, cir.triple = "x86_64-unknown-linux-gnu", dlti.dl_spec = #dlti.dl_spec<i32 = dense<32> : vector<2xi64>, !llvm.ptr<270> = dense<32> : vector<4xi64>, f128 = dense<128> : vector<2xi64>, f64 = dense<64> : vector<2xi64>, f16 = dense<16> : vector<2xi64>, !llvm.ptr<272> = dense<64> : vector<4xi64>, !llvm.ptr<271> = dense<32> : vector<4xi64>, i64 = dense<64> : vector<2xi64>, f80 = dense<128> : vector<2xi64>, i128 = dense<128> : vector<2xi64>, i1 = dense<8> : vector<2xi64>, !llvm.ptr = dense<64> : vector<4xi64>, i16 = dense<16> : vector<2xi64>, i8 = dense<8> : vector<2xi64>, "dlti.endianness" = "little", "dlti.stack_alignment" = 128 : i64>} {
  cir.func private @malloc(!u64i) -> !cir.ptr<!void> extra(#fn_attr) loc(#loc419)
  cir.func private @exit(!s32i) extra(#fn_attr) loc(#loc420)
  cir.func private @wmemset(!cir.ptr<!s32i>, !s32i, !u64i) -> !cir.ptr<!s32i> extra(#fn_attr) loc(#loc421)
  cir.func private @strlen(!cir.ptr<!s8i>) -> !u64i extra(#fn_attr) loc(#loc422)
  cir.func private @calloc(!u64i, !u64i) -> !cir.ptr<!void> extra(#fn_attr) loc(#loc423)
  cir.func private @wcscpy(!cir.ptr<!s32i>, !cir.ptr<!s32i>) -> !cir.ptr<!s32i> extra(#fn_attr) loc(#loc424)
  cir.func private @printLine(!cir.ptr<!s8i>) loc(#loc425)
  cir.func private @free(!cir.ptr<!void>) extra(#fn_attr) loc(#loc426)
  cir.func no_proto @CWE122_Heap_Based_Buffer_Overflow__CWE135_04_bad() extra(#fn_attr1) {
    %0 = cir.alloca !cir.ptr<!void>, !cir.ptr<!cir.ptr<!void>>, ["data"] {alignment = 8 : i64} loc(#loc428)
    %1 = cir.const #cir.ptr<null> : !cir.ptr<!void> loc(#loc21)
    cir.store %1, %0 : !cir.ptr<!void>, !cir.ptr<!cir.ptr<!void>> loc(#loc429)
    cir.scope {
      %2 = cir.const #cir.int<1> : !s32i loc(#loc25)
      %3 = cir.cast(int_to_bool, %2 : !s32i), !cir.bool loc(#loc25)
      cir.if %3 {
        cir.scope {
          %4 = cir.alloca !cir.ptr<!s32i>, !cir.ptr<!cir.ptr<!s32i>>, ["dataBadBuffer", init] {alignment = 8 : i64} loc(#loc433)
          %5 = cir.get_global @malloc : !cir.ptr<!cir.func<!cir.ptr<!void> (!u64i)>> loc(#loc31)
          %6 = cir.const #cir.int<50> : !s32i loc(#loc32)
          %7 = cir.cast(integral, %6 : !s32i), !u64i loc(#loc32)
          %8 = cir.const #cir.int<4> : !u64i loc(#loc434)
          %9 = cir.binop(mul, %7, %8) : !u64i loc(#loc435)
          %10 = cir.call @malloc(%9) : (!u64i) -> !cir.ptr<!void> extra(#fn_attr) loc(#loc31)
          %11 = cir.cast(bitcast, %10 : !cir.ptr<!void>), !cir.ptr<!s32i> loc(#loc436)
          cir.store %11, %4 : !cir.ptr<!s32i>, !cir.ptr<!cir.ptr<!s32i>> loc(#loc433)
          cir.scope {
            %27 = cir.load %4 : !cir.ptr<!cir.ptr<!s32i>>, !cir.ptr<!s32i> loc(#loc37)
            %28 = cir.const #cir.ptr<null> : !cir.ptr<!void> loc(#loc38)
            %29 = cir.cast(bitcast, %28 : !cir.ptr<!void>), !cir.ptr<!s32i> loc(#loc38)
            %30 = cir.cmp(eq, %27, %29) : !cir.ptr<!s32i>, !cir.bool loc(#loc438)
            cir.if %30 {
              %31 = cir.get_global @exit : !cir.ptr<!cir.func<!void (!s32i)>> loc(#loc40)
              %32 = cir.const #cir.int<1> : !s32i loc(#loc41)
              %33 = cir.unary(minus, %32) : !s32i, !s32i loc(#loc42)
              cir.call @exit(%33) : (!s32i) -> () extra(#fn_attr) loc(#loc40)
            } loc(#loc439)
          } loc(#loc437)
          %12 = cir.load %4 : !cir.ptr<!cir.ptr<!s32i>>, !cir.ptr<!s32i> loc(#loc43)
          %13 = cir.const #cir.int<65> : !s32i loc(#loc44)
          %14 = cir.const #cir.int<50> : !s32i loc(#loc45)
          %15 = cir.const #cir.int<1> : !s32i loc(#loc46)
          %16 = cir.binop(sub, %14, %15) nsw : !s32i loc(#loc45)
          %17 = cir.cast(integral, %16 : !s32i), !u64i loc(#loc45)
          %18 = cir.call @wmemset(%12, %13, %17) : (!cir.ptr<!s32i>, !s32i, !u64i) -> !cir.ptr<!s32i> extra(#fn_attr) loc(#loc47)
          %19 = cir.const #cir.int<0> : !s32i loc(#loc48)
          %20 = cir.load %4 : !cir.ptr<!cir.ptr<!s32i>>, !cir.ptr<!s32i> loc(#loc49)
          %21 = cir.const #cir.int<50> : !s32i loc(#loc50)
          %22 = cir.const #cir.int<1> : !s32i loc(#loc51)
          %23 = cir.binop(sub, %21, %22) nsw : !s32i loc(#loc50)
          %24 = cir.ptr_stride(%20 : !cir.ptr<!s32i>, %23 : !s32i), !cir.ptr<!s32i> loc(#loc52)
          cir.store %19, %24 : !s32i, !cir.ptr<!s32i> loc(#loc440)
          %25 = cir.load %4 : !cir.ptr<!cir.ptr<!s32i>>, !cir.ptr<!s32i> loc(#loc53)
          %26 = cir.cast(bitcast, %25 : !cir.ptr<!s32i>), !cir.ptr<!void> loc(#loc53)
          cir.store %26, %0 : !cir.ptr<!void>, !cir.ptr<!cir.ptr<!void>> loc(#loc441)
        } loc(#loc432)
      } loc(#loc431)
    } loc(#loc430)
    cir.scope {
      %2 = cir.const #cir.int<1> : !s32i loc(#loc57)
      %3 = cir.cast(int_to_bool, %2 : !s32i), !cir.bool loc(#loc57)
      cir.if %3 {
        cir.scope {
          %4 = cir.alloca !u64i, !cir.ptr<!u64i>, ["dataLen", init] {alignment = 8 : i64} loc(#loc445)
          %5 = cir.alloca !cir.ptr<!void>, !cir.ptr<!cir.ptr<!void>>, ["dest", init] {alignment = 8 : i64} loc(#loc446)
          %6 = cir.get_global @strlen : !cir.ptr<!cir.func<!u64i (!cir.ptr<!s8i>)>> loc(#loc65)
          %7 = cir.load %0 : !cir.ptr<!cir.ptr<!void>>, !cir.ptr<!void> loc(#loc66)
          %8 = cir.cast(bitcast, %7 : !cir.ptr<!void>), !cir.ptr<!s8i> loc(#loc66)
          %9 = cir.call @strlen(%8) : (!cir.ptr<!s8i>) -> !u64i extra(#fn_attr) loc(#loc65)
          cir.store %9, %4 : !u64i, !cir.ptr<!u64i> loc(#loc445)
          %10 = cir.get_global @calloc : !cir.ptr<!cir.func<!cir.ptr<!void> (!u64i, !u64i)>> loc(#loc67)
          %11 = cir.load %4 : !cir.ptr<!u64i>, !u64i loc(#loc68)
          %12 = cir.const #cir.int<1> : !s32i loc(#loc69)
          %13 = cir.cast(integral, %12 : !s32i), !u64i loc(#loc69)
          %14 = cir.binop(add, %11, %13) : !u64i loc(#loc447)
          %15 = cir.const #cir.int<4> : !u64i loc(#loc448)
          %16 = cir.call @calloc(%14, %15) : (!u64i, !u64i) -> !cir.ptr<!void> extra(#fn_attr) loc(#loc67)
          cir.store %16, %5 : !cir.ptr<!void>, !cir.ptr<!cir.ptr<!void>> loc(#loc446)
          cir.scope {
            %26 = cir.load %5 : !cir.ptr<!cir.ptr<!void>>, !cir.ptr<!void> loc(#loc74)
            %27 = cir.const #cir.ptr<null> : !cir.ptr<!void> loc(#loc75)
            %28 = cir.cmp(eq, %26, %27) : !cir.ptr<!void>, !cir.bool loc(#loc450)
            cir.if %28 {
              %29 = cir.get_global @exit : !cir.ptr<!cir.func<!void (!s32i)>> loc(#loc77)
              %30 = cir.const #cir.int<1> : !s32i loc(#loc78)
              %31 = cir.unary(minus, %30) : !s32i, !s32i loc(#loc79)
              cir.call @exit(%31) : (!s32i) -> () extra(#fn_attr) loc(#loc77)
            } loc(#loc451)
          } loc(#loc449)
          %17 = cir.load %5 : !cir.ptr<!cir.ptr<!void>>, !cir.ptr<!void> loc(#loc80)
          %18 = cir.cast(bitcast, %17 : !cir.ptr<!void>), !cir.ptr<!s32i> loc(#loc80)
          %19 = cir.load %0 : !cir.ptr<!cir.ptr<!void>>, !cir.ptr<!void> loc(#loc81)
          %20 = cir.cast(bitcast, %19 : !cir.ptr<!void>), !cir.ptr<!s32i> loc(#loc81)
          %21 = cir.call @wcscpy(%18, %20) : (!cir.ptr<!s32i>, !cir.ptr<!s32i>) -> !cir.ptr<!s32i> extra(#fn_attr) loc(#loc82)
          %22 = cir.load %5 : !cir.ptr<!cir.ptr<!void>>, !cir.ptr<!void> loc(#loc83)
          %23 = cir.cast(bitcast, %22 : !cir.ptr<!void>), !cir.ptr<!s8i> loc(#loc83)
          cir.call @printLine(%23) : (!cir.ptr<!s8i>) -> () loc(#loc84)
          %24 = cir.get_global @free : !cir.ptr<!cir.func<!void (!cir.ptr<!void>)>> loc(#loc85)
          %25 = cir.load %5 : !cir.ptr<!cir.ptr<!void>>, !cir.ptr<!void> loc(#loc86)
          cir.call @free(%25) : (!cir.ptr<!void>) -> () extra(#fn_attr) loc(#loc85)
        } loc(#loc444)
      } loc(#loc443)
    } loc(#loc442)
    cir.return loc(#loc18)
  } loc(#loc427)
  cir.func no_proto @CWE122_Heap_Based_Buffer_Overflow__CWE135_04_good() extra(#fn_attr1) {
    %0 = cir.get_global @goodB2G1 : !cir.ptr<!cir.func<!void ()>> loc(#loc453)
    cir.call %0() : (!cir.ptr<!cir.func<!void ()>>) -> () loc(#loc89)
    %1 = cir.get_global @goodB2G2 : !cir.ptr<!cir.func<!void ()>> loc(#loc454)
    cir.call %1() : (!cir.ptr<!cir.func<!void ()>>) -> () loc(#loc91)
    %2 = cir.get_global @goodG2B1 : !cir.ptr<!cir.func<!void ()>> loc(#loc455)
    cir.call %2() : (!cir.ptr<!cir.func<!void ()>>) -> () loc(#loc93)
    %3 = cir.get_global @goodG2B2 : !cir.ptr<!cir.func<!void ()>> loc(#loc456)
    cir.call %3() : (!cir.ptr<!cir.func<!void ()>>) -> () loc(#loc95)
    cir.return loc(#loc88)
  } loc(#loc452)
  cir.func private @srand(!u32i) extra(#fn_attr) loc(#loc457)
  cir.func private @time(!cir.ptr<!s64i>) -> !s64i extra(#fn_attr) loc(#loc458)
  cir.global "private" constant cir_private dsolocal @".str" = #cir.const_array<"Calling good()...\00" : !cir.array<!s8i x 18>> : !cir.array<!s8i x 18> {alignment = 1 : i64} loc(#loc101)
  cir.global "private" constant cir_private dsolocal @".str.1" = #cir.const_array<"Finished good()\00" : !cir.array<!s8i x 16>> : !cir.array<!s8i x 16> {alignment = 1 : i64} loc(#loc102)
  cir.global "private" constant cir_private dsolocal @".str.2" = #cir.const_array<"Calling bad()...\00" : !cir.array<!s8i x 17>> : !cir.array<!s8i x 17> {alignment = 1 : i64} loc(#loc103)
  cir.global "private" constant cir_private dsolocal @".str.3" = #cir.const_array<"Finished bad()\00" : !cir.array<!s8i x 15>> : !cir.array<!s8i x 15> {alignment = 1 : i64} loc(#loc104)
  cir.func @main(%arg0: !s32i loc(fused[#loc107, #loc108]), %arg1: !cir.ptr<!cir.ptr<!s8i>> loc(fused[#loc109, #loc110])) -> !s32i extra(#fn_attr1) {
    %0 = cir.alloca !s32i, !cir.ptr<!s32i>, ["argc", init] {alignment = 4 : i64} loc(#loc460)
    %1 = cir.alloca !cir.ptr<!cir.ptr<!s8i>>, !cir.ptr<!cir.ptr<!cir.ptr<!s8i>>>, ["argv", init] {alignment = 8 : i64} loc(#loc461)
    %2 = cir.alloca !s32i, !cir.ptr<!s32i>, ["__retval"] {alignment = 4 : i64} loc(#loc106)
    cir.store %arg0, %0 : !s32i, !cir.ptr<!s32i> loc(#loc111)
    cir.store %arg1, %1 : !cir.ptr<!cir.ptr<!s8i>>, !cir.ptr<!cir.ptr<!cir.ptr<!s8i>>> loc(#loc111)
    %3 = cir.const #cir.ptr<null> : !cir.ptr<!s64i> loc(#loc112)
    %4 = cir.call @time(%3) : (!cir.ptr<!s64i>) -> !s64i extra(#fn_attr) loc(#loc113)
    %5 = cir.cast(integral, %4 : !s64i), !u32i loc(#loc113)
    cir.call @srand(%5) : (!u32i) -> () extra(#fn_attr) loc(#loc114)
    %6 = cir.get_global @".str" : !cir.ptr<!cir.array<!s8i x 18>> loc(#loc101)
    %7 = cir.cast(array_to_ptrdecay, %6 : !cir.ptr<!cir.array<!s8i x 18>>), !cir.ptr<!s8i> loc(#loc101)
    cir.call @printLine(%7) : (!cir.ptr<!s8i>) -> () loc(#loc115)
    %8 = cir.get_global @CWE122_Heap_Based_Buffer_Overflow__CWE135_04_good : !cir.ptr<!cir.func<!void ()>> loc(#loc462)
    cir.call @CWE122_Heap_Based_Buffer_Overflow__CWE135_04_good() : () -> () loc(#loc116)
    %9 = cir.get_global @".str.1" : !cir.ptr<!cir.array<!s8i x 16>> loc(#loc102)
    %10 = cir.cast(array_to_ptrdecay, %9 : !cir.ptr<!cir.array<!s8i x 16>>), !cir.ptr<!s8i> loc(#loc102)
    cir.call @printLine(%10) : (!cir.ptr<!s8i>) -> () loc(#loc118)
    %11 = cir.get_global @".str.2" : !cir.ptr<!cir.array<!s8i x 17>> loc(#loc103)
    %12 = cir.cast(array_to_ptrdecay, %11 : !cir.ptr<!cir.array<!s8i x 17>>), !cir.ptr<!s8i> loc(#loc103)
    cir.call @printLine(%12) : (!cir.ptr<!s8i>) -> () loc(#loc119)
    %13 = cir.get_global @CWE122_Heap_Based_Buffer_Overflow__CWE135_04_bad : !cir.ptr<!cir.func<!void ()>> loc(#loc463)
    cir.call @CWE122_Heap_Based_Buffer_Overflow__CWE135_04_bad() : () -> () loc(#loc120)
    %14 = cir.get_global @".str.3" : !cir.ptr<!cir.array<!s8i x 15>> loc(#loc104)
    %15 = cir.cast(array_to_ptrdecay, %14 : !cir.ptr<!cir.array<!s8i x 15>>), !cir.ptr<!s8i> loc(#loc104)
    cir.call @printLine(%15) : (!cir.ptr<!s8i>) -> () loc(#loc122)
    %16 = cir.const #cir.int<0> : !s32i loc(#loc123)
    cir.store %16, %2 : !s32i, !cir.ptr<!s32i> loc(#loc464)
    %17 = cir.load %2 : !cir.ptr<!s32i>, !s32i loc(#loc464)
    cir.return %17 : !s32i loc(#loc464)
  } loc(#loc459)
  cir.global "private" constant cir_private dsolocal @".str.4" = #cir.const_array<"Benign, fixed string\00" : !cir.array<!s8i x 21>> : !cir.array<!s8i x 21> {alignment = 1 : i64} loc(#loc125)
  cir.func private @wcslen(!cir.ptr<!s32i>) -> !u64i extra(#fn_attr) loc(#loc465)
  cir.func private @printWLine(!cir.ptr<!s32i>) loc(#loc466)
  cir.func no_proto internal private @goodB2G1() extra(#fn_attr1) {
    %0 = cir.alloca !cir.ptr<!void>, !cir.ptr<!cir.ptr<!void>>, ["data"] {alignment = 8 : i64} loc(#loc468)
    %1 = cir.const #cir.ptr<null> : !cir.ptr<!void> loc(#loc134)
    cir.store %1, %0 : !cir.ptr<!void>, !cir.ptr<!cir.ptr<!void>> loc(#loc469)
    cir.scope {
      %2 = cir.const #cir.int<1> : !s32i loc(#loc138)
      %3 = cir.cast(int_to_bool, %2 : !s32i), !cir.bool loc(#loc138)
      cir.if %3 {
        cir.scope {
          %4 = cir.alloca !cir.ptr<!s32i>, !cir.ptr<!cir.ptr<!s32i>>, ["dataBadBuffer", init] {alignment = 8 : i64} loc(#loc473)
          %5 = cir.get_global @malloc : !cir.ptr<!cir.func<!cir.ptr<!void> (!u64i)>> loc(#loc144)
          %6 = cir.const #cir.int<50> : !s32i loc(#loc145)
          %7 = cir.cast(integral, %6 : !s32i), !u64i loc(#loc145)
          %8 = cir.const #cir.int<4> : !u64i loc(#loc474)
          %9 = cir.binop(mul, %7, %8) : !u64i loc(#loc475)
          %10 = cir.call @malloc(%9) : (!u64i) -> !cir.ptr<!void> extra(#fn_attr) loc(#loc144)
          %11 = cir.cast(bitcast, %10 : !cir.ptr<!void>), !cir.ptr<!s32i> loc(#loc476)
          cir.store %11, %4 : !cir.ptr<!s32i>, !cir.ptr<!cir.ptr<!s32i>> loc(#loc473)
          cir.scope {
            %27 = cir.load %4 : !cir.ptr<!cir.ptr<!s32i>>, !cir.ptr<!s32i> loc(#loc150)
            %28 = cir.const #cir.ptr<null> : !cir.ptr<!void> loc(#loc151)
            %29 = cir.cast(bitcast, %28 : !cir.ptr<!void>), !cir.ptr<!s32i> loc(#loc151)
            %30 = cir.cmp(eq, %27, %29) : !cir.ptr<!s32i>, !cir.bool loc(#loc478)
            cir.if %30 {
              %31 = cir.get_global @exit : !cir.ptr<!cir.func<!void (!s32i)>> loc(#loc153)
              %32 = cir.const #cir.int<1> : !s32i loc(#loc154)
              %33 = cir.unary(minus, %32) : !s32i, !s32i loc(#loc155)
              cir.call @exit(%33) : (!s32i) -> () extra(#fn_attr) loc(#loc153)
            } loc(#loc479)
          } loc(#loc477)
          %12 = cir.load %4 : !cir.ptr<!cir.ptr<!s32i>>, !cir.ptr<!s32i> loc(#loc156)
          %13 = cir.const #cir.int<65> : !s32i loc(#loc157)
          %14 = cir.const #cir.int<50> : !s32i loc(#loc158)
          %15 = cir.const #cir.int<1> : !s32i loc(#loc159)
          %16 = cir.binop(sub, %14, %15) nsw : !s32i loc(#loc158)
          %17 = cir.cast(integral, %16 : !s32i), !u64i loc(#loc158)
          %18 = cir.call @wmemset(%12, %13, %17) : (!cir.ptr<!s32i>, !s32i, !u64i) -> !cir.ptr<!s32i> extra(#fn_attr) loc(#loc160)
          %19 = cir.const #cir.int<0> : !s32i loc(#loc161)
          %20 = cir.load %4 : !cir.ptr<!cir.ptr<!s32i>>, !cir.ptr<!s32i> loc(#loc162)
          %21 = cir.const #cir.int<50> : !s32i loc(#loc163)
          %22 = cir.const #cir.int<1> : !s32i loc(#loc164)
          %23 = cir.binop(sub, %21, %22) nsw : !s32i loc(#loc163)
          %24 = cir.ptr_stride(%20 : !cir.ptr<!s32i>, %23 : !s32i), !cir.ptr<!s32i> loc(#loc165)
          cir.store %19, %24 : !s32i, !cir.ptr<!s32i> loc(#loc480)
          %25 = cir.load %4 : !cir.ptr<!cir.ptr<!s32i>>, !cir.ptr<!s32i> loc(#loc166)
          %26 = cir.cast(bitcast, %25 : !cir.ptr<!s32i>), !cir.ptr<!void> loc(#loc166)
          cir.store %26, %0 : !cir.ptr<!void>, !cir.ptr<!cir.ptr<!void>> loc(#loc481)
        } loc(#loc472)
      } loc(#loc471)
    } loc(#loc470)
    cir.scope {
      %2 = cir.const #cir.int<0> : !s32i loc(#loc170)
      %3 = cir.cast(int_to_bool, %2 : !s32i), !cir.bool loc(#loc170)
      cir.if %3 {
        %4 = cir.get_global @".str.4" : !cir.ptr<!cir.array<!s8i x 21>> loc(#loc125)
        %5 = cir.cast(array_to_ptrdecay, %4 : !cir.ptr<!cir.array<!s8i x 21>>), !cir.ptr<!s8i> loc(#loc125)
        cir.call @printLine(%5) : (!cir.ptr<!s8i>) -> () loc(#loc174)
      } else {
        cir.scope {
          %4 = cir.alloca !u64i, !cir.ptr<!u64i>, ["dataLen", init] {alignment = 8 : i64} loc(#loc485)
          %5 = cir.alloca !cir.ptr<!void>, !cir.ptr<!cir.ptr<!void>>, ["dest", init] {alignment = 8 : i64} loc(#loc486)
          %6 = cir.get_global @wcslen : !cir.ptr<!cir.func<!u64i (!cir.ptr<!s32i>)>> loc(#loc181)
          %7 = cir.load %0 : !cir.ptr<!cir.ptr<!void>>, !cir.ptr<!void> loc(#loc182)
          %8 = cir.cast(bitcast, %7 : !cir.ptr<!void>), !cir.ptr<!s32i> loc(#loc182)
          %9 = cir.call @wcslen(%8) : (!cir.ptr<!s32i>) -> !u64i extra(#fn_attr) loc(#loc181)
          cir.store %9, %4 : !u64i, !cir.ptr<!u64i> loc(#loc485)
          %10 = cir.get_global @calloc : !cir.ptr<!cir.func<!cir.ptr<!void> (!u64i, !u64i)>> loc(#loc183)
          %11 = cir.load %4 : !cir.ptr<!u64i>, !u64i loc(#loc184)
          %12 = cir.const #cir.int<1> : !s32i loc(#loc185)
          %13 = cir.cast(integral, %12 : !s32i), !u64i loc(#loc185)
          %14 = cir.binop(add, %11, %13) : !u64i loc(#loc487)
          %15 = cir.const #cir.int<4> : !u64i loc(#loc488)
          %16 = cir.call @calloc(%14, %15) : (!u64i, !u64i) -> !cir.ptr<!void> extra(#fn_attr) loc(#loc183)
          cir.store %16, %5 : !cir.ptr<!void>, !cir.ptr<!cir.ptr<!void>> loc(#loc486)
          cir.scope {
            %26 = cir.load %5 : !cir.ptr<!cir.ptr<!void>>, !cir.ptr<!void> loc(#loc190)
            %27 = cir.const #cir.ptr<null> : !cir.ptr<!void> loc(#loc191)
            %28 = cir.cmp(eq, %26, %27) : !cir.ptr<!void>, !cir.bool loc(#loc490)
            cir.if %28 {
              %29 = cir.get_global @exit : !cir.ptr<!cir.func<!void (!s32i)>> loc(#loc193)
              %30 = cir.const #cir.int<1> : !s32i loc(#loc194)
              %31 = cir.unary(minus, %30) : !s32i, !s32i loc(#loc195)
              cir.call @exit(%31) : (!s32i) -> () extra(#fn_attr) loc(#loc193)
            } loc(#loc491)
          } loc(#loc489)
          %17 = cir.load %5 : !cir.ptr<!cir.ptr<!void>>, !cir.ptr<!void> loc(#loc196)
          %18 = cir.cast(bitcast, %17 : !cir.ptr<!void>), !cir.ptr<!s32i> loc(#loc196)
          %19 = cir.load %0 : !cir.ptr<!cir.ptr<!void>>, !cir.ptr<!void> loc(#loc197)
          %20 = cir.cast(bitcast, %19 : !cir.ptr<!void>), !cir.ptr<!s32i> loc(#loc197)
          %21 = cir.call @wcscpy(%18, %20) : (!cir.ptr<!s32i>, !cir.ptr<!s32i>) -> !cir.ptr<!s32i> extra(#fn_attr) loc(#loc198)
          %22 = cir.load %5 : !cir.ptr<!cir.ptr<!void>>, !cir.ptr<!void> loc(#loc199)
          %23 = cir.cast(bitcast, %22 : !cir.ptr<!void>), !cir.ptr<!s32i> loc(#loc199)
          cir.call @printWLine(%23) : (!cir.ptr<!s32i>) -> () loc(#loc200)
          %24 = cir.get_global @free : !cir.ptr<!cir.func<!void (!cir.ptr<!void>)>> loc(#loc201)
          %25 = cir.load %5 : !cir.ptr<!cir.ptr<!void>>, !cir.ptr<!void> loc(#loc202)
          cir.call @free(%25) : (!cir.ptr<!void>) -> () extra(#fn_attr) loc(#loc201)
        } loc(#loc484)
      } loc(#loc483)
    } loc(#loc482)
    cir.return loc(#loc131)
  } loc(#loc467)
  cir.func no_proto internal private @goodB2G2() extra(#fn_attr1) {
    %0 = cir.alloca !cir.ptr<!void>, !cir.ptr<!cir.ptr<!void>>, ["data"] {alignment = 8 : i64} loc(#loc493)
    %1 = cir.const #cir.ptr<null> : !cir.ptr<!void> loc(#loc207)
    cir.store %1, %0 : !cir.ptr<!void>, !cir.ptr<!cir.ptr<!void>> loc(#loc494)
    cir.scope {
      %2 = cir.const #cir.int<1> : !s32i loc(#loc211)
      %3 = cir.cast(int_to_bool, %2 : !s32i), !cir.bool loc(#loc211)
      cir.if %3 {
        cir.scope {
          %4 = cir.alloca !cir.ptr<!s32i>, !cir.ptr<!cir.ptr<!s32i>>, ["dataBadBuffer", init] {alignment = 8 : i64} loc(#loc498)
          %5 = cir.get_global @malloc : !cir.ptr<!cir.func<!cir.ptr<!void> (!u64i)>> loc(#loc217)
          %6 = cir.const #cir.int<50> : !s32i loc(#loc218)
          %7 = cir.cast(integral, %6 : !s32i), !u64i loc(#loc218)
          %8 = cir.const #cir.int<4> : !u64i loc(#loc499)
          %9 = cir.binop(mul, %7, %8) : !u64i loc(#loc500)
          %10 = cir.call @malloc(%9) : (!u64i) -> !cir.ptr<!void> extra(#fn_attr) loc(#loc217)
          %11 = cir.cast(bitcast, %10 : !cir.ptr<!void>), !cir.ptr<!s32i> loc(#loc501)
          cir.store %11, %4 : !cir.ptr<!s32i>, !cir.ptr<!cir.ptr<!s32i>> loc(#loc498)
          cir.scope {
            %27 = cir.load %4 : !cir.ptr<!cir.ptr<!s32i>>, !cir.ptr<!s32i> loc(#loc223)
            %28 = cir.const #cir.ptr<null> : !cir.ptr<!void> loc(#loc224)
            %29 = cir.cast(bitcast, %28 : !cir.ptr<!void>), !cir.ptr<!s32i> loc(#loc224)
            %30 = cir.cmp(eq, %27, %29) : !cir.ptr<!s32i>, !cir.bool loc(#loc503)
            cir.if %30 {
              %31 = cir.get_global @exit : !cir.ptr<!cir.func<!void (!s32i)>> loc(#loc226)
              %32 = cir.const #cir.int<1> : !s32i loc(#loc227)
              %33 = cir.unary(minus, %32) : !s32i, !s32i loc(#loc228)
              cir.call @exit(%33) : (!s32i) -> () extra(#fn_attr) loc(#loc226)
            } loc(#loc504)
          } loc(#loc502)
          %12 = cir.load %4 : !cir.ptr<!cir.ptr<!s32i>>, !cir.ptr<!s32i> loc(#loc229)
          %13 = cir.const #cir.int<65> : !s32i loc(#loc230)
          %14 = cir.const #cir.int<50> : !s32i loc(#loc231)
          %15 = cir.const #cir.int<1> : !s32i loc(#loc232)
          %16 = cir.binop(sub, %14, %15) nsw : !s32i loc(#loc231)
          %17 = cir.cast(integral, %16 : !s32i), !u64i loc(#loc231)
          %18 = cir.call @wmemset(%12, %13, %17) : (!cir.ptr<!s32i>, !s32i, !u64i) -> !cir.ptr<!s32i> extra(#fn_attr) loc(#loc233)
          %19 = cir.const #cir.int<0> : !s32i loc(#loc234)
          %20 = cir.load %4 : !cir.ptr<!cir.ptr<!s32i>>, !cir.ptr<!s32i> loc(#loc235)
          %21 = cir.const #cir.int<50> : !s32i loc(#loc236)
          %22 = cir.const #cir.int<1> : !s32i loc(#loc237)
          %23 = cir.binop(sub, %21, %22) nsw : !s32i loc(#loc236)
          %24 = cir.ptr_stride(%20 : !cir.ptr<!s32i>, %23 : !s32i), !cir.ptr<!s32i> loc(#loc238)
          cir.store %19, %24 : !s32i, !cir.ptr<!s32i> loc(#loc505)
          %25 = cir.load %4 : !cir.ptr<!cir.ptr<!s32i>>, !cir.ptr<!s32i> loc(#loc239)
          %26 = cir.cast(bitcast, %25 : !cir.ptr<!s32i>), !cir.ptr<!void> loc(#loc239)
          cir.store %26, %0 : !cir.ptr<!void>, !cir.ptr<!cir.ptr<!void>> loc(#loc506)
        } loc(#loc497)
      } loc(#loc496)
    } loc(#loc495)
    cir.scope {
      %2 = cir.const #cir.int<1> : !s32i loc(#loc243)
      %3 = cir.cast(int_to_bool, %2 : !s32i), !cir.bool loc(#loc243)
      cir.if %3 {
        cir.scope {
          %4 = cir.alloca !u64i, !cir.ptr<!u64i>, ["dataLen", init] {alignment = 8 : i64} loc(#loc510)
          %5 = cir.alloca !cir.ptr<!void>, !cir.ptr<!cir.ptr<!void>>, ["dest", init] {alignment = 8 : i64} loc(#loc511)
          %6 = cir.get_global @wcslen : !cir.ptr<!cir.func<!u64i (!cir.ptr<!s32i>)>> loc(#loc251)
          %7 = cir.load %0 : !cir.ptr<!cir.ptr<!void>>, !cir.ptr<!void> loc(#loc252)
          %8 = cir.cast(bitcast, %7 : !cir.ptr<!void>), !cir.ptr<!s32i> loc(#loc252)
          %9 = cir.call @wcslen(%8) : (!cir.ptr<!s32i>) -> !u64i extra(#fn_attr) loc(#loc251)
          cir.store %9, %4 : !u64i, !cir.ptr<!u64i> loc(#loc510)
          %10 = cir.get_global @calloc : !cir.ptr<!cir.func<!cir.ptr<!void> (!u64i, !u64i)>> loc(#loc253)
          %11 = cir.load %4 : !cir.ptr<!u64i>, !u64i loc(#loc254)
          %12 = cir.const #cir.int<1> : !s32i loc(#loc255)
          %13 = cir.cast(integral, %12 : !s32i), !u64i loc(#loc255)
          %14 = cir.binop(add, %11, %13) : !u64i loc(#loc512)
          %15 = cir.const #cir.int<4> : !u64i loc(#loc513)
          %16 = cir.call @calloc(%14, %15) : (!u64i, !u64i) -> !cir.ptr<!void> extra(#fn_attr) loc(#loc253)
          cir.store %16, %5 : !cir.ptr<!void>, !cir.ptr<!cir.ptr<!void>> loc(#loc511)
          cir.scope {
            %26 = cir.load %5 : !cir.ptr<!cir.ptr<!void>>, !cir.ptr<!void> loc(#loc260)
            %27 = cir.const #cir.ptr<null> : !cir.ptr<!void> loc(#loc261)
            %28 = cir.cmp(eq, %26, %27) : !cir.ptr<!void>, !cir.bool loc(#loc515)
            cir.if %28 {
              %29 = cir.get_global @exit : !cir.ptr<!cir.func<!void (!s32i)>> loc(#loc263)
              %30 = cir.const #cir.int<1> : !s32i loc(#loc264)
              %31 = cir.unary(minus, %30) : !s32i, !s32i loc(#loc265)
              cir.call @exit(%31) : (!s32i) -> () extra(#fn_attr) loc(#loc263)
            } loc(#loc516)
          } loc(#loc514)
          %17 = cir.load %5 : !cir.ptr<!cir.ptr<!void>>, !cir.ptr<!void> loc(#loc266)
          %18 = cir.cast(bitcast, %17 : !cir.ptr<!void>), !cir.ptr<!s32i> loc(#loc266)
          %19 = cir.load %0 : !cir.ptr<!cir.ptr<!void>>, !cir.ptr<!void> loc(#loc267)
          %20 = cir.cast(bitcast, %19 : !cir.ptr<!void>), !cir.ptr<!s32i> loc(#loc267)
          %21 = cir.call @wcscpy(%18, %20) : (!cir.ptr<!s32i>, !cir.ptr<!s32i>) -> !cir.ptr<!s32i> extra(#fn_attr) loc(#loc268)
          %22 = cir.load %5 : !cir.ptr<!cir.ptr<!void>>, !cir.ptr<!void> loc(#loc269)
          %23 = cir.cast(bitcast, %22 : !cir.ptr<!void>), !cir.ptr<!s32i> loc(#loc269)
          cir.call @printWLine(%23) : (!cir.ptr<!s32i>) -> () loc(#loc270)
          %24 = cir.get_global @free : !cir.ptr<!cir.func<!void (!cir.ptr<!void>)>> loc(#loc271)
          %25 = cir.load %5 : !cir.ptr<!cir.ptr<!void>>, !cir.ptr<!void> loc(#loc272)
          cir.call @free(%25) : (!cir.ptr<!void>) -> () extra(#fn_attr) loc(#loc271)
        } loc(#loc509)
      } loc(#loc508)
    } loc(#loc507)
    cir.return loc(#loc204)
  } loc(#loc492)
  cir.func private @strcpy(!cir.ptr<!s8i>, !cir.ptr<!s8i>) -> !cir.ptr<!s8i> extra(#fn_attr) loc(#loc517)
  cir.func no_proto internal private @goodG2B1() extra(#fn_attr1) {
    %0 = cir.alloca !cir.ptr<!void>, !cir.ptr<!cir.ptr<!void>>, ["data"] {alignment = 8 : i64} loc(#loc519)
    %1 = cir.const #cir.ptr<null> : !cir.ptr<!void> loc(#loc279)
    cir.store %1, %0 : !cir.ptr<!void>, !cir.ptr<!cir.ptr<!void>> loc(#loc520)
    cir.scope {
      %2 = cir.const #cir.int<0> : !s32i loc(#loc283)
      %3 = cir.cast(int_to_bool, %2 : !s32i), !cir.bool loc(#loc283)
      cir.if %3 {
        %4 = cir.get_global @".str.4" : !cir.ptr<!cir.array<!s8i x 21>> loc(#loc287)
        %5 = cir.cast(array_to_ptrdecay, %4 : !cir.ptr<!cir.array<!s8i x 21>>), !cir.ptr<!s8i> loc(#loc287)
        cir.call @printLine(%5) : (!cir.ptr<!s8i>) -> () loc(#loc288)
      } else {
        cir.scope {
          %4 = cir.alloca !cir.ptr<!s8i>, !cir.ptr<!cir.ptr<!s8i>>, ["dataGoodBuffer", init] {alignment = 8 : i64} loc(#loc524)
          %5 = cir.get_global @malloc : !cir.ptr<!cir.func<!cir.ptr<!void> (!u64i)>> loc(#loc293)
          %6 = cir.const #cir.int<50> : !s32i loc(#loc294)
          %7 = cir.cast(integral, %6 : !s32i), !u64i loc(#loc294)
          %8 = cir.const #cir.int<1> : !u64i loc(#loc525)
          %9 = cir.binop(mul, %7, %8) : !u64i loc(#loc526)
          %10 = cir.call @malloc(%9) : (!u64i) -> !cir.ptr<!void> extra(#fn_attr) loc(#loc293)
          %11 = cir.cast(bitcast, %10 : !cir.ptr<!void>), !cir.ptr<!s8i> loc(#loc527)
          cir.store %11, %4 : !cir.ptr<!s8i>, !cir.ptr<!cir.ptr<!s8i>> loc(#loc524)
          cir.scope {
            %28 = cir.load %4 : !cir.ptr<!cir.ptr<!s8i>>, !cir.ptr<!s8i> loc(#loc299)
            %29 = cir.const #cir.ptr<null> : !cir.ptr<!void> loc(#loc300)
            %30 = cir.cast(bitcast, %29 : !cir.ptr<!void>), !cir.ptr<!s8i> loc(#loc300)
            %31 = cir.cmp(eq, %28, %30) : !cir.ptr<!s8i>, !cir.bool loc(#loc529)
            cir.if %31 {
              %32 = cir.get_global @exit : !cir.ptr<!cir.func<!void (!s32i)>> loc(#loc302)
              %33 = cir.const #cir.int<1> : !s32i loc(#loc303)
              %34 = cir.unary(minus, %33) : !s32i, !s32i loc(#loc304)
              cir.call @exit(%34) : (!s32i) -> () extra(#fn_attr) loc(#loc302)
            } loc(#loc530)
          } loc(#loc528)
          %12 = cir.load %4 : !cir.ptr<!cir.ptr<!s8i>>, !cir.ptr<!s8i> loc(#loc305)
          %13 = cir.cast(bitcast, %12 : !cir.ptr<!s8i>), !cir.ptr<!void> loc(#loc305)
          %14 = cir.const #cir.int<65> : !s32i loc(#loc306)
          %15 = cir.const #cir.int<50> : !s32i loc(#loc307)
          %16 = cir.const #cir.int<1> : !s32i loc(#loc308)
          %17 = cir.binop(sub, %15, %16) nsw : !s32i loc(#loc307)
          %18 = cir.cast(integral, %17 : !s32i), !u64i loc(#loc307)
          cir.libc.memset %18 bytes from %13 set to %14 : !cir.ptr<!void>, !s32i, !u64i loc(#loc531)
          %19 = cir.const #cir.int<0> : !s32i loc(#loc311)
          %20 = cir.cast(integral, %19 : !s32i), !s8i loc(#loc311)
          %21 = cir.load %4 : !cir.ptr<!cir.ptr<!s8i>>, !cir.ptr<!s8i> loc(#loc312)
          %22 = cir.const #cir.int<50> : !s32i loc(#loc313)
          %23 = cir.const #cir.int<1> : !s32i loc(#loc314)
          %24 = cir.binop(sub, %22, %23) nsw : !s32i loc(#loc313)
          %25 = cir.ptr_stride(%21 : !cir.ptr<!s8i>, %24 : !s32i), !cir.ptr<!s8i> loc(#loc315)
          cir.store %20, %25 : !s8i, !cir.ptr<!s8i> loc(#loc532)
          %26 = cir.load %4 : !cir.ptr<!cir.ptr<!s8i>>, !cir.ptr<!s8i> loc(#loc316)
          %27 = cir.cast(bitcast, %26 : !cir.ptr<!s8i>), !cir.ptr<!void> loc(#loc316)
          cir.store %27, %0 : !cir.ptr<!void>, !cir.ptr<!cir.ptr<!void>> loc(#loc533)
        } loc(#loc523)
      } loc(#loc522)
    } loc(#loc521)
    cir.scope {
      %2 = cir.const #cir.int<1> : !s32i loc(#loc320)
      %3 = cir.cast(int_to_bool, %2 : !s32i), !cir.bool loc(#loc320)
      cir.if %3 {
        cir.scope {
          %4 = cir.alloca !u64i, !cir.ptr<!u64i>, ["dataLen", init] {alignment = 8 : i64} loc(#loc537)
          %5 = cir.alloca !cir.ptr<!void>, !cir.ptr<!cir.ptr<!void>>, ["dest", init] {alignment = 8 : i64} loc(#loc538)
          %6 = cir.get_global @strlen : !cir.ptr<!cir.func<!u64i (!cir.ptr<!s8i>)>> loc(#loc328)
          %7 = cir.load %0 : !cir.ptr<!cir.ptr<!void>>, !cir.ptr<!void> loc(#loc329)
          %8 = cir.cast(bitcast, %7 : !cir.ptr<!void>), !cir.ptr<!s8i> loc(#loc329)
          %9 = cir.call @strlen(%8) : (!cir.ptr<!s8i>) -> !u64i extra(#fn_attr) loc(#loc328)
          cir.store %9, %4 : !u64i, !cir.ptr<!u64i> loc(#loc537)
          %10 = cir.get_global @calloc : !cir.ptr<!cir.func<!cir.ptr<!void> (!u64i, !u64i)>> loc(#loc330)
          %11 = cir.load %4 : !cir.ptr<!u64i>, !u64i loc(#loc331)
          %12 = cir.const #cir.int<1> : !s32i loc(#loc332)
          %13 = cir.cast(integral, %12 : !s32i), !u64i loc(#loc332)
          %14 = cir.binop(add, %11, %13) : !u64i loc(#loc539)
          %15 = cir.const #cir.int<1> : !s32i loc(#loc333)
          %16 = cir.cast(integral, %15 : !s32i), !u64i loc(#loc333)
          %17 = cir.call @calloc(%14, %16) : (!u64i, !u64i) -> !cir.ptr<!void> extra(#fn_attr) loc(#loc330)
          cir.store %17, %5 : !cir.ptr<!void>, !cir.ptr<!cir.ptr<!void>> loc(#loc538)
          cir.scope {
            %28 = cir.load %5 : !cir.ptr<!cir.ptr<!void>>, !cir.ptr<!void> loc(#loc336)
            %29 = cir.const #cir.ptr<null> : !cir.ptr<!void> loc(#loc337)
            %30 = cir.cmp(eq, %28, %29) : !cir.ptr<!void>, !cir.bool loc(#loc541)
            cir.if %30 {
              %31 = cir.get_global @exit : !cir.ptr<!cir.func<!void (!s32i)>> loc(#loc339)
              %32 = cir.const #cir.int<1> : !s32i loc(#loc340)
              %33 = cir.unary(minus, %32) : !s32i, !s32i loc(#loc341)
              cir.call @exit(%33) : (!s32i) -> () extra(#fn_attr) loc(#loc339)
            } loc(#loc542)
          } loc(#loc540)
          %18 = cir.get_global @strcpy : !cir.ptr<!cir.func<!cir.ptr<!s8i> (!cir.ptr<!s8i>, !cir.ptr<!s8i>)>> loc(#loc342)
          %19 = cir.load %5 : !cir.ptr<!cir.ptr<!void>>, !cir.ptr<!void> loc(#loc343)
          %20 = cir.cast(bitcast, %19 : !cir.ptr<!void>), !cir.ptr<!s8i> loc(#loc343)
          %21 = cir.load %0 : !cir.ptr<!cir.ptr<!void>>, !cir.ptr<!void> loc(#loc344)
          %22 = cir.cast(bitcast, %21 : !cir.ptr<!void>), !cir.ptr<!s8i> loc(#loc344)
          %23 = cir.call @strcpy(%20, %22) : (!cir.ptr<!s8i>, !cir.ptr<!s8i>) -> !cir.ptr<!s8i> extra(#fn_attr) loc(#loc342)
          %24 = cir.load %5 : !cir.ptr<!cir.ptr<!void>>, !cir.ptr<!void> loc(#loc345)
          %25 = cir.cast(bitcast, %24 : !cir.ptr<!void>), !cir.ptr<!s8i> loc(#loc345)
          cir.call @printLine(%25) : (!cir.ptr<!s8i>) -> () loc(#loc346)
          %26 = cir.get_global @free : !cir.ptr<!cir.func<!void (!cir.ptr<!void>)>> loc(#loc347)
          %27 = cir.load %5 : !cir.ptr<!cir.ptr<!void>>, !cir.ptr<!void> loc(#loc348)
          cir.call @free(%27) : (!cir.ptr<!void>) -> () extra(#fn_attr) loc(#loc347)
        } loc(#loc536)
      } loc(#loc535)
    } loc(#loc534)
    cir.return loc(#loc276)
  } loc(#loc518)
  cir.func no_proto internal private @goodG2B2() extra(#fn_attr1) {
    %0 = cir.alloca !cir.ptr<!void>, !cir.ptr<!cir.ptr<!void>>, ["data"] {alignment = 8 : i64} loc(#loc544)
    %1 = cir.const #cir.ptr<null> : !cir.ptr<!void> loc(#loc353)
    cir.store %1, %0 : !cir.ptr<!void>, !cir.ptr<!cir.ptr<!void>> loc(#loc545)
    cir.scope {
      %2 = cir.const #cir.int<1> : !s32i loc(#loc357)
      %3 = cir.cast(int_to_bool, %2 : !s32i), !cir.bool loc(#loc357)
      cir.if %3 {
        cir.scope {
          %4 = cir.alloca !cir.ptr<!s8i>, !cir.ptr<!cir.ptr<!s8i>>, ["dataGoodBuffer", init] {alignment = 8 : i64} loc(#loc549)
          %5 = cir.get_global @malloc : !cir.ptr<!cir.func<!cir.ptr<!void> (!u64i)>> loc(#loc363)
          %6 = cir.const #cir.int<50> : !s32i loc(#loc364)
          %7 = cir.cast(integral, %6 : !s32i), !u64i loc(#loc364)
          %8 = cir.const #cir.int<1> : !u64i loc(#loc550)
          %9 = cir.binop(mul, %7, %8) : !u64i loc(#loc551)
          %10 = cir.call @malloc(%9) : (!u64i) -> !cir.ptr<!void> extra(#fn_attr) loc(#loc363)
          %11 = cir.cast(bitcast, %10 : !cir.ptr<!void>), !cir.ptr<!s8i> loc(#loc552)
          cir.store %11, %4 : !cir.ptr<!s8i>, !cir.ptr<!cir.ptr<!s8i>> loc(#loc549)
          cir.scope {
            %28 = cir.load %4 : !cir.ptr<!cir.ptr<!s8i>>, !cir.ptr<!s8i> loc(#loc369)
            %29 = cir.const #cir.ptr<null> : !cir.ptr<!void> loc(#loc370)
            %30 = cir.cast(bitcast, %29 : !cir.ptr<!void>), !cir.ptr<!s8i> loc(#loc370)
            %31 = cir.cmp(eq, %28, %30) : !cir.ptr<!s8i>, !cir.bool loc(#loc554)
            cir.if %31 {
              %32 = cir.get_global @exit : !cir.ptr<!cir.func<!void (!s32i)>> loc(#loc372)
              %33 = cir.const #cir.int<1> : !s32i loc(#loc373)
              %34 = cir.unary(minus, %33) : !s32i, !s32i loc(#loc374)
              cir.call @exit(%34) : (!s32i) -> () extra(#fn_attr) loc(#loc372)
            } loc(#loc555)
          } loc(#loc553)
          %12 = cir.load %4 : !cir.ptr<!cir.ptr<!s8i>>, !cir.ptr<!s8i> loc(#loc375)
          %13 = cir.cast(bitcast, %12 : !cir.ptr<!s8i>), !cir.ptr<!void> loc(#loc375)
          %14 = cir.const #cir.int<65> : !s32i loc(#loc376)
          %15 = cir.const #cir.int<50> : !s32i loc(#loc377)
          %16 = cir.const #cir.int<1> : !s32i loc(#loc378)
          %17 = cir.binop(sub, %15, %16) nsw : !s32i loc(#loc377)
          %18 = cir.cast(integral, %17 : !s32i), !u64i loc(#loc377)
          cir.libc.memset %18 bytes from %13 set to %14 : !cir.ptr<!void>, !s32i, !u64i loc(#loc556)
          %19 = cir.const #cir.int<0> : !s32i loc(#loc381)
          %20 = cir.cast(integral, %19 : !s32i), !s8i loc(#loc381)
          %21 = cir.load %4 : !cir.ptr<!cir.ptr<!s8i>>, !cir.ptr<!s8i> loc(#loc382)
          %22 = cir.const #cir.int<50> : !s32i loc(#loc383)
          %23 = cir.const #cir.int<1> : !s32i loc(#loc384)
          %24 = cir.binop(sub, %22, %23) nsw : !s32i loc(#loc383)
          %25 = cir.ptr_stride(%21 : !cir.ptr<!s8i>, %24 : !s32i), !cir.ptr<!s8i> loc(#loc385)
          cir.store %20, %25 : !s8i, !cir.ptr<!s8i> loc(#loc557)
          %26 = cir.load %4 : !cir.ptr<!cir.ptr<!s8i>>, !cir.ptr<!s8i> loc(#loc386)
          %27 = cir.cast(bitcast, %26 : !cir.ptr<!s8i>), !cir.ptr<!void> loc(#loc386)
          cir.store %27, %0 : !cir.ptr<!void>, !cir.ptr<!cir.ptr<!void>> loc(#loc558)
        } loc(#loc548)
      } loc(#loc547)
    } loc(#loc546)
    cir.scope {
      %2 = cir.const #cir.int<1> : !s32i loc(#loc390)
      %3 = cir.cast(int_to_bool, %2 : !s32i), !cir.bool loc(#loc390)
      cir.if %3 {
        cir.scope {
          %4 = cir.alloca !u64i, !cir.ptr<!u64i>, ["dataLen", init] {alignment = 8 : i64} loc(#loc562)
          %5 = cir.alloca !cir.ptr<!void>, !cir.ptr<!cir.ptr<!void>>, ["dest", init] {alignment = 8 : i64} loc(#loc563)
          %6 = cir.get_global @strlen : !cir.ptr<!cir.func<!u64i (!cir.ptr<!s8i>)>> loc(#loc398)
          %7 = cir.load %0 : !cir.ptr<!cir.ptr<!void>>, !cir.ptr<!void> loc(#loc399)
          %8 = cir.cast(bitcast, %7 : !cir.ptr<!void>), !cir.ptr<!s8i> loc(#loc399)
          %9 = cir.call @strlen(%8) : (!cir.ptr<!s8i>) -> !u64i extra(#fn_attr) loc(#loc398)
          cir.store %9, %4 : !u64i, !cir.ptr<!u64i> loc(#loc562)
          %10 = cir.get_global @calloc : !cir.ptr<!cir.func<!cir.ptr<!void> (!u64i, !u64i)>> loc(#loc400)
          %11 = cir.load %4 : !cir.ptr<!u64i>, !u64i loc(#loc401)
          %12 = cir.const #cir.int<1> : !s32i loc(#loc402)
          %13 = cir.cast(integral, %12 : !s32i), !u64i loc(#loc402)
          %14 = cir.binop(add, %11, %13) : !u64i loc(#loc564)
          %15 = cir.const #cir.int<1> : !s32i loc(#loc403)
          %16 = cir.cast(integral, %15 : !s32i), !u64i loc(#loc403)
          %17 = cir.call @calloc(%14, %16) : (!u64i, !u64i) -> !cir.ptr<!void> extra(#fn_attr) loc(#loc400)
          cir.store %17, %5 : !cir.ptr<!void>, !cir.ptr<!cir.ptr<!void>> loc(#loc563)
          cir.scope {
            %28 = cir.load %5 : !cir.ptr<!cir.ptr<!void>>, !cir.ptr<!void> loc(#loc406)
            %29 = cir.const #cir.ptr<null> : !cir.ptr<!void> loc(#loc407)
            %30 = cir.cmp(eq, %28, %29) : !cir.ptr<!void>, !cir.bool loc(#loc566)
            cir.if %30 {
              %31 = cir.get_global @exit : !cir.ptr<!cir.func<!void (!s32i)>> loc(#loc409)
              %32 = cir.const #cir.int<1> : !s32i loc(#loc410)
              %33 = cir.unary(minus, %32) : !s32i, !s32i loc(#loc411)
              cir.call @exit(%33) : (!s32i) -> () extra(#fn_attr) loc(#loc409)
            } loc(#loc567)
          } loc(#loc565)
          %18 = cir.get_global @strcpy : !cir.ptr<!cir.func<!cir.ptr<!s8i> (!cir.ptr<!s8i>, !cir.ptr<!s8i>)>> loc(#loc412)
          %19 = cir.load %5 : !cir.ptr<!cir.ptr<!void>>, !cir.ptr<!void> loc(#loc413)
          %20 = cir.cast(bitcast, %19 : !cir.ptr<!void>), !cir.ptr<!s8i> loc(#loc413)
          %21 = cir.load %0 : !cir.ptr<!cir.ptr<!void>>, !cir.ptr<!void> loc(#loc414)
          %22 = cir.cast(bitcast, %21 : !cir.ptr<!void>), !cir.ptr<!s8i> loc(#loc414)
          %23 = cir.call @strcpy(%20, %22) : (!cir.ptr<!s8i>, !cir.ptr<!s8i>) -> !cir.ptr<!s8i> extra(#fn_attr) loc(#loc412)
          %24 = cir.load %5 : !cir.ptr<!cir.ptr<!void>>, !cir.ptr<!void> loc(#loc415)
          %25 = cir.cast(bitcast, %24 : !cir.ptr<!void>), !cir.ptr<!s8i> loc(#loc415)
          cir.call @printLine(%25) : (!cir.ptr<!s8i>) -> () loc(#loc416)
          %26 = cir.get_global @free : !cir.ptr<!cir.func<!void (!cir.ptr<!void>)>> loc(#loc417)
          %27 = cir.load %5 : !cir.ptr<!cir.ptr<!void>>, !cir.ptr<!void> loc(#loc418)
          cir.call @free(%27) : (!cir.ptr<!void>) -> () extra(#fn_attr) loc(#loc417)
        } loc(#loc561)
      } loc(#loc560)
    } loc(#loc559)
    cir.return loc(#loc350)
  } loc(#loc543)
} loc(#loc)
#loc = loc("/home/ladisgin/git_proj/juliet-c/testcases/CWE122_Heap_Based_Buffer_Overflow/s06/CWE122_Heap_Based_Buffer_Overflow__CWE135_04.c":0:0)
#loc1 = loc("/usr/include/stdlib.h":672:1)
#loc2 = loc("/usr/include/stdlib.h":672:45)
#loc3 = loc("/usr/include/stdlib.h":756:1)
#loc4 = loc("/usr/include/stdlib.h":756:70)
#loc5 = loc("/usr/include/wchar.h":296:1)
#loc6 = loc("/usr/include/wchar.h":296:65)
#loc7 = loc("/usr/include/string.h":407:1)
#loc8 = loc("/usr/include/string.h":408:33)
#loc9 = loc("/usr/include/stdlib.h":675:1)
#loc10 = loc("/usr/include/stdlib.h":676:14)
#loc11 = loc("/usr/include/wchar.h":98:1)
#loc12 = loc("/usr/include/wchar.h":100:14)
#loc13 = loc("../../../testcasesupport/std_testcase_io.h":14:1)
#loc14 = loc("../../../testcasesupport/std_testcase_io.h":14:33)
#loc15 = loc("/usr/include/stdlib.h":687:1)
#loc16 = loc("/usr/include/stdlib.h":687:32)
#loc17 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE135_04.c":30:1)
#loc18 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE135_04.c":57:1)
#loc19 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE135_04.c":32:5)
#loc20 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE135_04.c":32:12)
#loc21 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE135_04.c":33:12)
#loc22 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE135_04.c":33:5)
#loc23 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE135_04.c":34:5)
#loc24 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE135_04.c":44:5)
#loc25 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE135_04.c":34:8)
#loc26 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE135_04.c":35:5)
#loc27 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE135_04.c":36:9)
#loc28 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE135_04.c":43:9)
#loc29 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE135_04.c":37:13)
#loc30 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE135_04.c":37:75)
#loc31 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE135_04.c":37:50)
#loc32 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE135_04.c":37:57)
#loc33 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE135_04.c":37:60)
#loc34 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE135_04.c":37:74)
#loc35 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE135_04.c":38:13)
#loc36 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE135_04.c":38:50)
#loc37 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE135_04.c":38:17)
#loc38 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE135_04.c":38:34)
#loc39 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE135_04.c":38:40)
#loc40 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE135_04.c":38:41)
#loc41 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE135_04.c":38:47)
#loc42 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE135_04.c":38:46)
#loc43 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE135_04.c":39:21)
#loc44 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE135_04.c":39:36)
#loc45 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE135_04.c":39:42)
#loc46 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE135_04.c":39:45)
#loc47 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE135_04.c":39:13)
#loc48 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE135_04.c":40:35)
#loc49 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE135_04.c":40:13)
#loc50 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE135_04.c":40:27)
#loc51 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE135_04.c":40:30)
#loc52 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE135_04.c":40:31)
#loc53 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE135_04.c":42:28)
#loc54 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE135_04.c":42:13)
#loc55 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE135_04.c":45:5)
#loc56 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE135_04.c":56:5)
#loc57 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE135_04.c":45:8)
#loc58 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE135_04.c":46:5)
#loc59 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE135_04.c":47:9)
#loc60 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE135_04.c":55:9)
#loc61 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE135_04.c":49:13)
#loc62 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE135_04.c":49:49)
#loc63 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE135_04.c":50:13)
#loc64 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE135_04.c":50:68)
#loc65 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE135_04.c":49:30)
#loc66 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE135_04.c":49:45)
#loc67 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE135_04.c":50:35)
#loc68 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE135_04.c":50:42)
#loc69 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE135_04.c":50:50)
#loc70 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE135_04.c":50:53)
#loc71 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE135_04.c":50:67)
#loc72 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE135_04.c":51:13)
#loc73 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE135_04.c":51:41)
#loc74 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE135_04.c":51:17)
#loc75 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE135_04.c":51:25)
#loc76 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE135_04.c":51:31)
#loc77 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE135_04.c":51:32)
#loc78 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE135_04.c":51:38)
#loc79 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE135_04.c":51:37)
#loc80 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE135_04.c":52:26)
#loc81 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE135_04.c":52:32)
#loc82 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE135_04.c":52:19)
#loc83 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE135_04.c":53:31)
#loc84 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE135_04.c":53:13)
#loc85 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE135_04.c":54:13)
#loc86 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE135_04.c":54:18)
#loc87 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE135_04.c":193:1)
#loc88 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE135_04.c":199:1)
#loc89 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE135_04.c":195:5)
#loc90 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE135_04.c":195:14)
#loc91 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE135_04.c":196:5)
#loc92 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE135_04.c":196:14)
#loc93 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE135_04.c":197:5)
#loc94 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE135_04.c":197:14)
#loc95 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE135_04.c":198:5)
#loc96 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE135_04.c":198:14)
#loc97 = loc("/usr/include/stdlib.h":575:1)
#loc98 = loc("/usr/include/stdlib.h":575:41)
#loc99 = loc("/usr/include/time.h":76:1)
#loc100 = loc("/usr/include/time.h":76:38)
#loc101 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE135_04.c":215:15)
#loc102 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE135_04.c":217:15)
#loc103 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE135_04.c":220:15)
#loc104 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE135_04.c":222:15)
#loc105 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE135_04.c":210:1)
#loc106 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE135_04.c":225:1)
#loc111 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE135_04.c":211:1)
#loc112 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE135_04.c":213:27)
#loc113 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE135_04.c":213:22)
#loc114 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE135_04.c":213:5)
#loc115 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE135_04.c":215:5)
#loc116 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE135_04.c":216:5)
#loc117 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE135_04.c":216:55)
#loc118 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE135_04.c":217:5)
#loc119 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE135_04.c":220:5)
#loc120 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE135_04.c":221:5)
#loc121 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE135_04.c":221:54)
#loc122 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE135_04.c":222:5)
#loc123 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE135_04.c":224:12)
#loc124 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE135_04.c":224:5)
#loc125 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE135_04.c":82:19)
#loc126 = loc("/usr/include/wchar.h":247:1)
#loc127 = loc("/usr/include/wchar.h":247:51)
#loc128 = loc("../../../testcasesupport/std_testcase_io.h":16:1)
#loc129 = loc("../../../testcasesupport/std_testcase_io.h":16:37)
#loc130 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE135_04.c":64:1)
#loc131 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE135_04.c":96:1)
#loc132 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE135_04.c":66:5)
#loc133 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE135_04.c":66:12)
#loc134 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE135_04.c":67:12)
#loc135 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE135_04.c":67:5)
#loc136 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE135_04.c":68:5)
#loc137 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE135_04.c":78:5)
#loc138 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE135_04.c":68:8)
#loc139 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE135_04.c":69:5)
#loc140 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE135_04.c":70:9)
#loc141 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE135_04.c":77:9)
#loc142 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE135_04.c":71:13)
#loc143 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE135_04.c":71:75)
#loc144 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE135_04.c":71:50)
#loc145 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE135_04.c":71:57)
#loc146 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE135_04.c":71:60)
#loc147 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE135_04.c":71:74)
#loc148 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE135_04.c":72:13)
#loc149 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE135_04.c":72:50)
#loc150 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE135_04.c":72:17)
#loc151 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE135_04.c":72:34)
#loc152 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE135_04.c":72:40)
#loc153 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE135_04.c":72:41)
#loc154 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE135_04.c":72:47)
#loc155 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE135_04.c":72:46)
#loc156 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE135_04.c":73:21)
#loc157 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE135_04.c":73:36)
#loc158 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE135_04.c":73:42)
#loc159 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE135_04.c":73:45)
#loc160 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE135_04.c":73:13)
#loc161 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE135_04.c":74:35)
#loc162 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE135_04.c":74:13)
#loc163 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE135_04.c":74:27)
#loc164 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE135_04.c":74:30)
#loc165 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE135_04.c":74:31)
#loc166 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE135_04.c":76:28)
#loc167 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE135_04.c":76:13)
#loc168 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE135_04.c":79:5)
#loc169 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE135_04.c":95:5)
#loc170 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE135_04.c":79:8)
#loc171 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE135_04.c":80:5)
#loc172 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE135_04.c":83:5)
#loc173 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE135_04.c":85:5)
#loc174 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE135_04.c":82:9)
#loc175 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE135_04.c":86:9)
#loc176 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE135_04.c":94:9)
#loc177 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE135_04.c":88:13)
#loc178 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE135_04.c":88:52)
#loc179 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE135_04.c":89:13)
#loc180 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE135_04.c":89:68)
#loc181 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE135_04.c":88:30)
#loc182 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE135_04.c":88:48)
#loc183 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE135_04.c":89:35)
#loc184 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE135_04.c":89:42)
#loc185 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE135_04.c":89:50)
#loc186 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE135_04.c":89:53)
#loc187 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE135_04.c":89:67)
#loc188 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE135_04.c":90:13)
#loc189 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE135_04.c":90:41)
#loc190 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE135_04.c":90:17)
#loc191 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE135_04.c":90:25)
#loc192 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE135_04.c":90:31)
#loc193 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE135_04.c":90:32)
#loc194 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE135_04.c":90:38)
#loc195 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE135_04.c":90:37)
#loc196 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE135_04.c":91:26)
#loc197 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE135_04.c":91:32)
#loc198 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE135_04.c":91:19)
#loc199 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE135_04.c":92:35)
#loc200 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE135_04.c":92:13)
#loc201 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE135_04.c":93:13)
#loc202 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE135_04.c":93:18)
#loc203 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE135_04.c":99:1)
#loc204 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE135_04.c":126:1)
#loc205 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE135_04.c":101:5)
#loc206 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE135_04.c":101:12)
#loc207 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE135_04.c":102:12)
#loc208 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE135_04.c":102:5)
#loc209 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE135_04.c":103:5)
#loc210 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE135_04.c":113:5)
#loc211 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE135_04.c":103:8)
#loc212 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE135_04.c":104:5)
#loc213 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE135_04.c":105:9)
#loc214 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE135_04.c":112:9)
#loc215 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE135_04.c":106:13)
#loc216 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE135_04.c":106:75)
#loc217 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE135_04.c":106:50)
#loc218 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE135_04.c":106:57)
#loc219 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE135_04.c":106:60)
#loc220 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE135_04.c":106:74)
#loc221 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE135_04.c":107:13)
#loc222 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE135_04.c":107:50)
#loc223 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE135_04.c":107:17)
#loc224 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE135_04.c":107:34)
#loc225 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE135_04.c":107:40)
#loc226 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE135_04.c":107:41)
#loc227 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE135_04.c":107:47)
#loc228 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE135_04.c":107:46)
#loc229 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE135_04.c":108:21)
#loc230 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE135_04.c":108:36)
#loc231 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE135_04.c":108:42)
#loc232 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE135_04.c":108:45)
#loc233 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE135_04.c":108:13)
#loc234 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE135_04.c":109:35)
#loc235 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE135_04.c":109:13)
#loc236 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE135_04.c":109:27)
#loc237 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE135_04.c":109:30)
#loc238 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE135_04.c":109:31)
#loc239 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE135_04.c":111:28)
#loc240 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE135_04.c":111:13)
#loc241 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE135_04.c":114:5)
#loc242 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE135_04.c":125:5)
#loc243 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE135_04.c":114:8)
#loc244 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE135_04.c":115:5)
#loc245 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE135_04.c":116:9)
#loc246 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE135_04.c":124:9)
#loc247 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE135_04.c":118:13)
#loc248 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE135_04.c":118:52)
#loc249 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE135_04.c":119:13)
#loc250 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE135_04.c":119:68)
#loc251 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE135_04.c":118:30)
#loc252 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE135_04.c":118:48)
#loc253 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE135_04.c":119:35)
#loc254 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE135_04.c":119:42)
#loc255 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE135_04.c":119:50)
#loc256 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE135_04.c":119:53)
#loc257 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE135_04.c":119:67)
#loc258 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE135_04.c":120:13)
#loc259 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE135_04.c":120:41)
#loc260 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE135_04.c":120:17)
#loc261 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE135_04.c":120:25)
#loc262 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE135_04.c":120:31)
#loc263 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE135_04.c":120:32)
#loc264 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE135_04.c":120:38)
#loc265 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE135_04.c":120:37)
#loc266 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE135_04.c":121:26)
#loc267 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE135_04.c":121:32)
#loc268 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE135_04.c":121:19)
#loc269 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE135_04.c":122:35)
#loc270 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE135_04.c":122:13)
#loc271 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE135_04.c":123:13)
#loc272 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE135_04.c":123:18)
#loc273 = loc("/usr/include/string.h":141:1)
#loc274 = loc("/usr/include/string.h":142:14)
#loc275 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE135_04.c":129:1)
#loc276 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE135_04.c":161:1)
#loc277 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE135_04.c":131:5)
#loc278 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE135_04.c":131:12)
#loc279 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE135_04.c":132:12)
#loc280 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE135_04.c":132:5)
#loc281 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE135_04.c":133:5)
#loc282 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE135_04.c":148:5)
#loc283 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE135_04.c":133:8)
#loc284 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE135_04.c":134:5)
#loc285 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE135_04.c":137:5)
#loc286 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE135_04.c":139:5)
#loc287 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE135_04.c":136:19)
#loc288 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE135_04.c":136:9)
#loc289 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE135_04.c":140:9)
#loc290 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE135_04.c":147:9)
#loc291 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE135_04.c":141:13)
#loc292 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE135_04.c":141:67)
#loc293 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE135_04.c":141:45)
#loc294 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE135_04.c":141:52)
#loc295 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE135_04.c":141:55)
#loc296 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE135_04.c":141:66)
#loc297 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE135_04.c":142:13)
#loc298 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE135_04.c":142:51)
#loc299 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE135_04.c":142:17)
#loc300 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE135_04.c":142:35)
#loc301 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE135_04.c":142:41)
#loc302 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE135_04.c":142:42)
#loc303 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE135_04.c":142:48)
#loc304 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE135_04.c":142:47)
#loc305 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE135_04.c":143:20)
#loc306 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE135_04.c":143:36)
#loc307 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE135_04.c":143:41)
#loc308 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE135_04.c":143:44)
#loc309 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE135_04.c":143:13)
#loc310 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE135_04.c":143:45)
#loc311 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE135_04.c":144:36)
#loc312 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE135_04.c":144:13)
#loc313 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE135_04.c":144:28)
#loc314 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE135_04.c":144:31)
#loc315 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE135_04.c":144:32)
#loc316 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE135_04.c":146:28)
#loc317 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE135_04.c":146:13)
#loc318 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE135_04.c":149:5)
#loc319 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE135_04.c":160:5)
#loc320 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE135_04.c":149:8)
#loc321 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE135_04.c":150:5)
#loc322 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE135_04.c":151:9)
#loc323 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE135_04.c":159:9)
#loc324 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE135_04.c":153:13)
#loc325 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE135_04.c":153:49)
#loc326 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE135_04.c":154:13)
#loc327 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE135_04.c":154:54)
#loc328 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE135_04.c":153:30)
#loc329 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE135_04.c":153:45)
#loc330 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE135_04.c":154:35)
#loc331 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE135_04.c":154:42)
#loc332 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE135_04.c":154:50)
#loc333 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE135_04.c":154:53)
#loc334 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE135_04.c":155:13)
#loc335 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE135_04.c":155:41)
#loc336 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE135_04.c":155:17)
#loc337 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE135_04.c":155:25)
#loc338 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE135_04.c":155:31)
#loc339 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE135_04.c":155:32)
#loc340 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE135_04.c":155:38)
#loc341 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE135_04.c":155:37)
#loc342 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE135_04.c":156:19)
#loc343 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE135_04.c":156:26)
#loc344 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE135_04.c":156:32)
#loc345 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE135_04.c":157:31)
#loc346 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE135_04.c":157:13)
#loc347 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE135_04.c":158:13)
#loc348 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE135_04.c":158:18)
#loc349 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE135_04.c":164:1)
#loc350 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE135_04.c":191:1)
#loc351 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE135_04.c":166:5)
#loc352 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE135_04.c":166:12)
#loc353 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE135_04.c":167:12)
#loc354 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE135_04.c":167:5)
#loc355 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE135_04.c":168:5)
#loc356 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE135_04.c":178:5)
#loc357 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE135_04.c":168:8)
#loc358 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE135_04.c":169:5)
#loc359 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE135_04.c":170:9)
#loc360 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE135_04.c":177:9)
#loc361 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE135_04.c":171:13)
#loc362 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE135_04.c":171:67)
#loc363 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE135_04.c":171:45)
#loc364 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE135_04.c":171:52)
#loc365 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE135_04.c":171:55)
#loc366 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE135_04.c":171:66)
#loc367 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE135_04.c":172:13)
#loc368 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE135_04.c":172:51)
#loc369 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE135_04.c":172:17)
#loc370 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE135_04.c":172:35)
#loc371 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE135_04.c":172:41)
#loc372 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE135_04.c":172:42)
#loc373 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE135_04.c":172:48)
#loc374 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE135_04.c":172:47)
#loc375 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE135_04.c":173:20)
#loc376 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE135_04.c":173:36)
#loc377 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE135_04.c":173:41)
#loc378 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE135_04.c":173:44)
#loc379 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE135_04.c":173:13)
#loc380 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE135_04.c":173:45)
#loc381 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE135_04.c":174:36)
#loc382 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE135_04.c":174:13)
#loc383 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE135_04.c":174:28)
#loc384 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE135_04.c":174:31)
#loc385 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE135_04.c":174:32)
#loc386 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE135_04.c":176:28)
#loc387 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE135_04.c":176:13)
#loc388 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE135_04.c":179:5)
#loc389 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE135_04.c":190:5)
#loc390 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE135_04.c":179:8)
#loc391 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE135_04.c":180:5)
#loc392 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE135_04.c":181:9)
#loc393 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE135_04.c":189:9)
#loc394 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE135_04.c":183:13)
#loc395 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE135_04.c":183:49)
#loc396 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE135_04.c":184:13)
#loc397 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE135_04.c":184:54)
#loc398 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE135_04.c":183:30)
#loc399 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE135_04.c":183:45)
#loc400 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE135_04.c":184:35)
#loc401 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE135_04.c":184:42)
#loc402 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE135_04.c":184:50)
#loc403 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE135_04.c":184:53)
#loc404 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE135_04.c":185:13)
#loc405 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE135_04.c":185:41)
#loc406 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE135_04.c":185:17)
#loc407 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE135_04.c":185:25)
#loc408 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE135_04.c":185:31)
#loc409 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE135_04.c":185:32)
#loc410 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE135_04.c":185:38)
#loc411 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE135_04.c":185:37)
#loc412 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE135_04.c":186:19)
#loc413 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE135_04.c":186:26)
#loc414 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE135_04.c":186:32)
#loc415 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE135_04.c":187:31)
#loc416 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE135_04.c":187:13)
#loc417 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE135_04.c":188:13)
#loc418 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE135_04.c":188:18)
#loc419 = loc(fused[#loc1, #loc2])
#loc420 = loc(fused[#loc3, #loc4])
#loc421 = loc(fused[#loc5, #loc6])
#loc422 = loc(fused[#loc7, #loc8])
#loc423 = loc(fused[#loc9, #loc10])
#loc424 = loc(fused[#loc11, #loc12])
#loc425 = loc(fused[#loc13, #loc14])
#loc426 = loc(fused[#loc15, #loc16])
#loc427 = loc(fused[#loc17, #loc18])
#loc428 = loc(fused[#loc19, #loc20])
#loc429 = loc(fused[#loc22, #loc21])
#loc430 = loc(fused[#loc23, #loc24])
#loc431 = loc(fused[#loc26, #loc24])
#loc432 = loc(fused[#loc27, #loc28])
#loc433 = loc(fused[#loc29, #loc30])
#loc434 = loc(fused[#loc33, #loc34])
#loc435 = loc(fused[#loc32, #loc34])
#loc436 = loc(fused[#loc31, #loc30])
#loc437 = loc(fused[#loc35, #loc36])
#loc438 = loc(fused[#loc37, #loc38])
#loc439 = loc(fused[#loc39, #loc36])
#loc440 = loc(fused[#loc49, #loc48])
#loc441 = loc(fused[#loc54, #loc53])
#loc442 = loc(fused[#loc55, #loc56])
#loc443 = loc(fused[#loc58, #loc56])
#loc444 = loc(fused[#loc59, #loc60])
#loc445 = loc(fused[#loc61, #loc62])
#loc446 = loc(fused[#loc63, #loc64])
#loc447 = loc(fused[#loc68, #loc69])
#loc448 = loc(fused[#loc70, #loc71])
#loc449 = loc(fused[#loc72, #loc73])
#loc450 = loc(fused[#loc74, #loc75])
#loc451 = loc(fused[#loc76, #loc73])
#loc452 = loc(fused[#loc87, #loc88])
#loc453 = loc(fused[#loc89, #loc90])
#loc454 = loc(fused[#loc91, #loc92])
#loc455 = loc(fused[#loc93, #loc94])
#loc456 = loc(fused[#loc95, #loc96])
#loc457 = loc(fused[#loc97, #loc98])
#loc458 = loc(fused[#loc99, #loc100])
#loc459 = loc(fused[#loc105, #loc106])
#loc462 = loc(fused[#loc116, #loc117])
#loc463 = loc(fused[#loc120, #loc121])
#loc464 = loc(fused[#loc124, #loc123])
#loc465 = loc(fused[#loc126, #loc127])
#loc466 = loc(fused[#loc128, #loc129])
#loc467 = loc(fused[#loc130, #loc131])
#loc468 = loc(fused[#loc132, #loc133])
#loc469 = loc(fused[#loc135, #loc134])
#loc470 = loc(fused[#loc136, #loc137])
#loc471 = loc(fused[#loc139, #loc137])
#loc472 = loc(fused[#loc140, #loc141])
#loc473 = loc(fused[#loc142, #loc143])
#loc474 = loc(fused[#loc146, #loc147])
#loc475 = loc(fused[#loc145, #loc147])
#loc476 = loc(fused[#loc144, #loc143])
#loc477 = loc(fused[#loc148, #loc149])
#loc478 = loc(fused[#loc150, #loc151])
#loc479 = loc(fused[#loc152, #loc149])
#loc480 = loc(fused[#loc162, #loc161])
#loc481 = loc(fused[#loc167, #loc166])
#loc482 = loc(fused[#loc168, #loc169])
#loc483 = loc(fused[#loc171, #loc172, #loc173, #loc169])
#loc484 = loc(fused[#loc175, #loc176])
#loc485 = loc(fused[#loc177, #loc178])
#loc486 = loc(fused[#loc179, #loc180])
#loc487 = loc(fused[#loc184, #loc185])
#loc488 = loc(fused[#loc186, #loc187])
#loc489 = loc(fused[#loc188, #loc189])
#loc490 = loc(fused[#loc190, #loc191])
#loc491 = loc(fused[#loc192, #loc189])
#loc492 = loc(fused[#loc203, #loc204])
#loc493 = loc(fused[#loc205, #loc206])
#loc494 = loc(fused[#loc208, #loc207])
#loc495 = loc(fused[#loc209, #loc210])
#loc496 = loc(fused[#loc212, #loc210])
#loc497 = loc(fused[#loc213, #loc214])
#loc498 = loc(fused[#loc215, #loc216])
#loc499 = loc(fused[#loc219, #loc220])
#loc500 = loc(fused[#loc218, #loc220])
#loc501 = loc(fused[#loc217, #loc216])
#loc502 = loc(fused[#loc221, #loc222])
#loc503 = loc(fused[#loc223, #loc224])
#loc504 = loc(fused[#loc225, #loc222])
#loc505 = loc(fused[#loc235, #loc234])
#loc506 = loc(fused[#loc240, #loc239])
#loc507 = loc(fused[#loc241, #loc242])
#loc508 = loc(fused[#loc244, #loc242])
#loc509 = loc(fused[#loc245, #loc246])
#loc510 = loc(fused[#loc247, #loc248])
#loc511 = loc(fused[#loc249, #loc250])
#loc512 = loc(fused[#loc254, #loc255])
#loc513 = loc(fused[#loc256, #loc257])
#loc514 = loc(fused[#loc258, #loc259])
#loc515 = loc(fused[#loc260, #loc261])
#loc516 = loc(fused[#loc262, #loc259])
#loc517 = loc(fused[#loc273, #loc274])
#loc518 = loc(fused[#loc275, #loc276])
#loc519 = loc(fused[#loc277, #loc278])
#loc520 = loc(fused[#loc280, #loc279])
#loc521 = loc(fused[#loc281, #loc282])
#loc522 = loc(fused[#loc284, #loc285, #loc286, #loc282])
#loc523 = loc(fused[#loc289, #loc290])
#loc524 = loc(fused[#loc291, #loc292])
#loc525 = loc(fused[#loc295, #loc296])
#loc526 = loc(fused[#loc294, #loc296])
#loc527 = loc(fused[#loc293, #loc292])
#loc528 = loc(fused[#loc297, #loc298])
#loc529 = loc(fused[#loc299, #loc300])
#loc530 = loc(fused[#loc301, #loc298])
#loc531 = loc(fused[#loc309, #loc310])
#loc532 = loc(fused[#loc312, #loc311])
#loc533 = loc(fused[#loc317, #loc316])
#loc534 = loc(fused[#loc318, #loc319])
#loc535 = loc(fused[#loc321, #loc319])
#loc536 = loc(fused[#loc322, #loc323])
#loc537 = loc(fused[#loc324, #loc325])
#loc538 = loc(fused[#loc326, #loc327])
#loc539 = loc(fused[#loc331, #loc332])
#loc540 = loc(fused[#loc334, #loc335])
#loc541 = loc(fused[#loc336, #loc337])
#loc542 = loc(fused[#loc338, #loc335])
#loc543 = loc(fused[#loc349, #loc350])
#loc544 = loc(fused[#loc351, #loc352])
#loc545 = loc(fused[#loc354, #loc353])
#loc546 = loc(fused[#loc355, #loc356])
#loc547 = loc(fused[#loc358, #loc356])
#loc548 = loc(fused[#loc359, #loc360])
#loc549 = loc(fused[#loc361, #loc362])
#loc550 = loc(fused[#loc365, #loc366])
#loc551 = loc(fused[#loc364, #loc366])
#loc552 = loc(fused[#loc363, #loc362])
#loc553 = loc(fused[#loc367, #loc368])
#loc554 = loc(fused[#loc369, #loc370])
#loc555 = loc(fused[#loc371, #loc368])
#loc556 = loc(fused[#loc379, #loc380])
#loc557 = loc(fused[#loc382, #loc381])
#loc558 = loc(fused[#loc387, #loc386])
#loc559 = loc(fused[#loc388, #loc389])
#loc560 = loc(fused[#loc391, #loc389])
#loc561 = loc(fused[#loc392, #loc393])
#loc562 = loc(fused[#loc394, #loc395])
#loc563 = loc(fused[#loc396, #loc397])
#loc564 = loc(fused[#loc401, #loc402])
#loc565 = loc(fused[#loc404, #loc405])
#loc566 = loc(fused[#loc406, #loc407])
#loc567 = loc(fused[#loc408, #loc405])
