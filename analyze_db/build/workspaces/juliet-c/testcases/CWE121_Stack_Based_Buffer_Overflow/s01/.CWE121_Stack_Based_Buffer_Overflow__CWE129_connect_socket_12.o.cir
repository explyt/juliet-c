!s32i = !cir.int<s, 32>
!s64i = !cir.int<s, 64>
!s8i = !cir.int<s, 8>
!u16i = !cir.int<u, 16>
!u32i = !cir.int<u, 32>
!u64i = !cir.int<u, 64>
!u8i = !cir.int<u, 8>
!void = !cir.void
#false = #cir.bool<false> : !cir.bool
#fn_attr = #cir<extra({nothrow = #cir.nothrow})>
#fn_attr1 = #cir<extra({inline = #cir.inline<no>, nothrow = #cir.nothrow, optnone = #cir.optnone, uwtable = #cir.uwtable<async>})>
#true = #cir.bool<true> : !cir.bool
!ty_in_addr = !cir.record<struct "in_addr" {!u32i} #cir.record.decl.ast>
!ty_sockaddr = !cir.record<struct "sockaddr" {!u16i, !cir.array<!s8i x 14>} #cir.record.decl.ast>
!ty_sockaddr_in = !cir.record<struct "sockaddr_in" {!u16i, !u16i, !ty_in_addr, !cir.array<!u8i x 8>}>
module @"/workspaces/juliet-c/testcases/CWE121_Stack_Based_Buffer_Overflow/s01/CWE121_Stack_Based_Buffer_Overflow__CWE129_connect_socket_12.c" attributes {cir.lang = #cir.lang<c>, cir.sob = #cir.signed_overflow_behavior<undefined>, cir.triple = "x86_64-unknown-linux-gnu", cir.type_size_info = #cir.type_size_info<char = 8, int = 32, size_t = 64>, cir.uwtable = #cir.uwtable<async>, dlti.dl_spec = #dlti.dl_spec<i8 = dense<8> : vector<2xi64>, !llvm.ptr = dense<64> : vector<4xi64>, i1 = dense<8> : vector<2xi64>, !llvm.ptr<270> = dense<32> : vector<4xi64>, f16 = dense<16> : vector<2xi64>, f64 = dense<64> : vector<2xi64>, i32 = dense<32> : vector<2xi64>, i16 = dense<16> : vector<2xi64>, i64 = dense<64> : vector<2xi64>, !llvm.ptr<272> = dense<64> : vector<4xi64>, !llvm.ptr<271> = dense<32> : vector<4xi64>, f128 = dense<128> : vector<2xi64>, f80 = dense<128> : vector<2xi64>, i128 = dense<128> : vector<2xi64>, "dlti.mangling_mode" = "e", "dlti.endianness" = "little", "dlti.stack_alignment" = 128 : i64>} {
  cir.func no_proto private @globalReturnsTrueOrFalse(...) -> !s32i loc(#loc556)
  cir.func private @socket(!s32i, !s32i, !s32i) -> !s32i extra(#fn_attr) loc(#loc557)
  cir.func private @inet_addr(!cir.ptr<!s8i>) -> !u32i extra(#fn_attr) loc(#loc558)
  cir.global "private" constant cir_private dsolocal @".str" = #cir.const_array<"127.0.0.1\00" : !cir.array<!s8i x 10>> : !cir.array<!s8i x 10> {alignment = 1 : i64} loc(#loc7)
  cir.func private @htons(!u16i) -> !u16i extra(#fn_attr) loc(#loc559)
  cir.func private @connect(!s32i, !cir.ptr<!ty_sockaddr>, !u32i) -> !s32i loc(#loc560)
  cir.func private @recv(!s32i, !cir.ptr<!void>, !u64i, !s32i) -> !s64i loc(#loc561)
  cir.func private @atoi(!cir.ptr<!s8i>) -> !s32i extra(#fn_attr) loc(#loc562)
  cir.func private @close(!s32i) -> !s32i loc(#loc563)
  cir.func private @printIntLine(!s32i) loc(#loc564)
  cir.func private @printLine(!cir.ptr<!s8i>) loc(#loc565)
  cir.global "private" constant cir_private dsolocal @".str.1" = #cir.const_array<"ERROR: Array index is negative.\00" : !cir.array<!s8i x 32>> : !cir.array<!s8i x 32> {alignment = 1 : i64} loc(#loc22)
  cir.global "private" constant cir_private dsolocal @".str.2" = #cir.const_array<"ERROR: Array index is out-of-bounds\00" : !cir.array<!s8i x 36>> : !cir.array<!s8i x 36> {alignment = 1 : i64} loc(#loc23)
  cir.func no_proto @CWE121_Stack_Based_Buffer_Overflow__CWE129_connect_socket_12_bad() extra(#fn_attr1) {
    %0 = cir.alloca !s32i, !cir.ptr<!s32i>, ["data"] {alignment = 4 : i64} loc(#loc567)
    %1 = cir.const #cir.int<1> : !s32i loc(#loc28)
    %2 = cir.unary(minus, %1) nsw : !s32i, !s32i loc(#loc29)
    cir.store %2, %0 : !s32i, !cir.ptr<!s32i> loc(#loc568)
    cir.scope {
      %3 = cir.get_global @globalReturnsTrueOrFalse : !cir.ptr<!cir.func<(...) -> !s32i>> loc(#loc570)
      %4 = cir.cast(bitcast, %3 : !cir.ptr<!cir.func<(...) -> !s32i>>), !cir.ptr<!cir.func<() -> !s32i>> loc(#loc570)
      %5 = cir.call %4() : (!cir.ptr<!cir.func<() -> !s32i>>) -> !s32i loc(#loc33)
      %6 = cir.cast(int_to_bool, %5 : !s32i), !cir.bool loc(#loc33)
      cir.if %6 {
        cir.scope {
          %7 = cir.alloca !s32i, !cir.ptr<!s32i>, ["recvResult"] {alignment = 4 : i64} loc(#loc573)
          %8 = cir.alloca !ty_sockaddr_in, !cir.ptr<!ty_sockaddr_in>, ["service"] {alignment = 4 : i64} loc(#loc574)
          %9 = cir.alloca !s32i, !cir.ptr<!s32i>, ["connectSocket", init] {alignment = 4 : i64} loc(#loc575)
          %10 = cir.alloca !cir.array<!s8i x 14>, !cir.ptr<!cir.array<!s8i x 14>>, ["inputBuffer"] {alignment = 1 : i64} loc(#loc576)
          %11 = cir.const #cir.int<1> : !s32i loc(#loc45)
          %12 = cir.unary(minus, %11) nsw : !s32i, !s32i loc(#loc45)
          cir.store %12, %9 : !s32i, !cir.ptr<!s32i> loc(#loc575)
          cir.scope {
            cir.do {
              cir.scope {
                %13 = cir.const #cir.int<2> : !s32i loc(#loc52)
                %14 = cir.const #cir.int<1> : !s32i loc(#loc53)
                %15 = cir.const #cir.int<6> : !s32i loc(#loc54)
                %16 = cir.call @socket(%13, %14, %15) : (!s32i, !s32i, !s32i) -> !s32i extra(#fn_attr) loc(#loc55)
                cir.store %16, %9 : !s32i, !cir.ptr<!s32i> loc(#loc579)
                cir.scope {
                  %55 = cir.load %9 : !cir.ptr<!s32i>, !s32i loc(#loc60)
                  %56 = cir.const #cir.int<1> : !s32i loc(#loc61)
                  %57 = cir.unary(minus, %56) nsw : !s32i, !s32i loc(#loc61)
                  %58 = cir.cmp(eq, %55, %57) : !s32i, !cir.bool loc(#loc581)
                  cir.if %58 {
                    cir.break loc(#loc63)
                  } loc(#loc582)
                } loc(#loc580)
                %17 = cir.cast(bitcast, %8 : !cir.ptr<!ty_sockaddr_in>), !cir.ptr<!void> loc(#loc583)
                %18 = cir.const #cir.int<0> : !s32i loc(#loc66)
                %19 = cir.const #cir.int<16> : !u64i loc(#loc584)
                cir.libc.memset %19 bytes from %17 set to %18 : !cir.ptr<!void>, !s32i, !u64i loc(#loc585)
                %20 = cir.const #cir.int<2> : !s32i loc(#loc71)
                %21 = cir.cast(integral, %20 : !s32i), !u16i loc(#loc71)
                %22 = cir.get_member %8[0] {name = "sin_family"} : !cir.ptr<!ty_sockaddr_in> -> !cir.ptr<!u16i> loc(#loc72)
                cir.store %21, %22 : !u16i, !cir.ptr<!u16i> loc(#loc586)
                %23 = cir.get_global @".str" : !cir.ptr<!cir.array<!s8i x 10>> loc(#loc7)
                %24 = cir.cast(array_to_ptrdecay, %23 : !cir.ptr<!cir.array<!s8i x 10>>), !cir.ptr<!s8i> loc(#loc7)
                %25 = cir.call @inet_addr(%24) : (!cir.ptr<!s8i>) -> !u32i extra(#fn_attr) loc(#loc74)
                %26 = cir.get_member %8[2] {name = "sin_addr"} : !cir.ptr<!ty_sockaddr_in> -> !cir.ptr<!ty_in_addr> loc(#loc75)
                %27 = cir.get_member %26[0] {name = "s_addr"} : !cir.ptr<!ty_in_addr> -> !cir.ptr<!u32i> loc(#loc76)
                cir.store %25, %27 : !u32i, !cir.ptr<!u32i> loc(#loc587)
                %28 = cir.const #cir.int<27015> : !s32i loc(#loc79)
                %29 = cir.cast(integral, %28 : !s32i), !u16i loc(#loc79)
                %30 = cir.call @htons(%29) : (!u16i) -> !u16i side_effect(const) extra(#fn_attr) loc(#loc80)
                %31 = cir.get_member %8[1] {name = "sin_port"} : !cir.ptr<!ty_sockaddr_in> -> !cir.ptr<!u16i> loc(#loc81)
                cir.store %30, %31 : !u16i, !cir.ptr<!u16i> loc(#loc588)
                cir.scope {
                  %55 = cir.load %9 : !cir.ptr<!s32i>, !s32i loc(#loc86)
                  %56 = cir.cast(bitcast, %8 : !cir.ptr<!ty_sockaddr_in>), !cir.ptr<!ty_sockaddr> loc(#loc590)
                  %57 = cir.const #cir.int<16> : !u64i loc(#loc591)
                  %58 = cir.cast(integral, %57 : !u64i), !u32i loc(#loc591)
                  %59 = cir.call @connect(%55, %56, %58) : (!s32i, !cir.ptr<!ty_sockaddr>, !u32i) -> !s32i loc(#loc91)
                  %60 = cir.const #cir.int<1> : !s32i loc(#loc92)
                  %61 = cir.unary(minus, %60) nsw : !s32i, !s32i loc(#loc92)
                  %62 = cir.cmp(eq, %59, %61) : !s32i, !cir.bool loc(#loc592)
                  cir.if %62 {
                    cir.break loc(#loc94)
                  } loc(#loc593)
                } loc(#loc589)
                %32 = cir.load %9 : !cir.ptr<!s32i>, !s32i loc(#loc95)
                %33 = cir.cast(array_to_ptrdecay, %10 : !cir.ptr<!cir.array<!s8i x 14>>), !cir.ptr<!s8i> loc(#loc96)
                %34 = cir.cast(bitcast, %33 : !cir.ptr<!s8i>), !cir.ptr<!void> loc(#loc96)
                %35 = cir.const #cir.int<3> : !s32i loc(#loc97)
                %36 = cir.cast(integral, %35 : !s32i), !u64i loc(#loc97)
                %37 = cir.const #cir.int<4> : !u64i loc(#loc97)
                %38 = cir.binop(mul, %36, %37) : !u64i loc(#loc97)
                %39 = cir.const #cir.int<2> : !s32i loc(#loc97)
                %40 = cir.cast(integral, %39 : !s32i), !u64i loc(#loc97)
                %41 = cir.binop(add, %38, %40) : !u64i loc(#loc97)
                %42 = cir.const #cir.int<1> : !s32i loc(#loc98)
                %43 = cir.cast(integral, %42 : !s32i), !u64i loc(#loc98)
                %44 = cir.binop(sub, %41, %43) : !u64i loc(#loc594)
                %45 = cir.const #cir.int<0> : !s32i loc(#loc99)
                %46 = cir.call @recv(%32, %34, %44, %45) : (!s32i, !cir.ptr<!void>, !u64i, !s32i) -> !s64i loc(#loc100)
                %47 = cir.cast(integral, %46 : !s64i), !s32i loc(#loc100)
                cir.store %47, %7 : !s32i, !cir.ptr<!s32i> loc(#loc595)
                cir.scope {
                  %55 = cir.load %7 : !cir.ptr<!s32i>, !s32i loc(#loc105)
                  %56 = cir.const #cir.int<1> : !s32i loc(#loc106)
                  %57 = cir.unary(minus, %56) nsw : !s32i, !s32i loc(#loc106)
                  %58 = cir.cmp(eq, %55, %57) : !s32i, !cir.bool loc(#loc597)
                  %59 = cir.ternary(%58, true {
                    %60 = cir.const #true loc(#loc107)
                    cir.yield %60 : !cir.bool loc(#loc107)
                  }, false {
                    %60 = cir.load %7 : !cir.ptr<!s32i>, !s32i loc(#loc108)
                    %61 = cir.const #cir.int<0> : !s32i loc(#loc109)
                    %62 = cir.cmp(eq, %60, %61) : !s32i, !cir.bool loc(#loc598)
                    %63 = cir.ternary(%62, true {
                      %64 = cir.const #true loc(#loc107)
                      cir.yield %64 : !cir.bool loc(#loc107)
                    }, false {
                      %64 = cir.const #false loc(#loc107)
                      cir.yield %64 : !cir.bool loc(#loc107)
                    }) : (!cir.bool) -> !cir.bool loc(#loc107)
                    cir.yield %63 : !cir.bool loc(#loc107)
                  }) : (!cir.bool) -> !cir.bool loc(#loc107)
                  cir.if %59 {
                    cir.break loc(#loc111)
                  } loc(#loc599)
                } loc(#loc596)
                %48 = cir.const #cir.int<0> : !s32i loc(#loc112)
                %49 = cir.cast(integral, %48 : !s32i), !s8i loc(#loc112)
                %50 = cir.load %7 : !cir.ptr<!s32i>, !s32i loc(#loc113)
                %51 = cir.cast(array_to_ptrdecay, %10 : !cir.ptr<!cir.array<!s8i x 14>>), !cir.ptr<!s8i> loc(#loc114)
                %52 = cir.ptr_stride(%51 : !cir.ptr<!s8i>, %50 : !s32i), !cir.ptr<!s8i> loc(#loc114)
                cir.store %49, %52 : !s8i, !cir.ptr<!s8i> loc(#loc600)
                %53 = cir.cast(array_to_ptrdecay, %10 : !cir.ptr<!cir.array<!s8i x 14>>), !cir.ptr<!s8i> loc(#loc115)
                %54 = cir.call @atoi(%53) : (!cir.ptr<!s8i>) -> !s32i side_effect(pure) extra(#fn_attr) loc(#loc116)
                cir.store %54, %0 : !s32i, !cir.ptr<!s32i> loc(#loc601)
              } loc(#loc578)
              cir.yield loc(#loc49)
            } while {
              %13 = cir.const #cir.int<0> : !s32i loc(#loc119)
              %14 = cir.cast(int_to_bool, %13 : !s32i), !cir.bool loc(#loc119)
              cir.condition(%14) loc(#loc119)
            } loc(#loc577)
          } loc(#loc577)
          cir.scope {
            %13 = cir.load %9 : !cir.ptr<!s32i>, !s32i loc(#loc122)
            %14 = cir.const #cir.int<1> : !s32i loc(#loc123)
            %15 = cir.unary(minus, %14) nsw : !s32i, !s32i loc(#loc123)
            %16 = cir.cmp(ne, %13, %15) : !s32i, !cir.bool loc(#loc603)
            cir.if %16 {
              %17 = cir.load %9 : !cir.ptr<!s32i>, !s32i loc(#loc125)
              %18 = cir.call @close(%17) : (!s32i) -> !s32i loc(#loc126)
            } loc(#loc604)
          } loc(#loc602)
        } loc(#loc572)
      } else {
        %7 = cir.const #cir.int<7> : !s32i loc(#loc127)
        cir.store %7, %0 : !s32i, !cir.ptr<!s32i> loc(#loc605)
      } loc(#loc571)
    } loc(#loc569)
    cir.scope {
      %3 = cir.get_global @globalReturnsTrueOrFalse : !cir.ptr<!cir.func<(...) -> !s32i>> loc(#loc607)
      %4 = cir.cast(bitcast, %3 : !cir.ptr<!cir.func<(...) -> !s32i>>), !cir.ptr<!cir.func<() -> !s32i>> loc(#loc607)
      %5 = cir.call %4() : (!cir.ptr<!cir.func<() -> !s32i>>) -> !s32i loc(#loc131)
      %6 = cir.cast(int_to_bool, %5 : !s32i), !cir.bool loc(#loc131)
      cir.if %6 {
        cir.scope {
          %7 = cir.alloca !s32i, !cir.ptr<!s32i>, ["i"] {alignment = 4 : i64} loc(#loc610)
          %8 = cir.alloca !cir.array<!s32i x 10>, !cir.ptr<!cir.array<!s32i x 10>>, ["buffer"] {alignment = 16 : i64} loc(#loc611)
          %9 = cir.const #cir.zero : !cir.array<!s32i x 10> loc(#loc611)
          cir.store %9, %8 : !cir.array<!s32i x 10>, !cir.ptr<!cir.array<!s32i x 10>> loc(#loc611)
          cir.scope {
            %10 = cir.load %0 : !cir.ptr<!s32i>, !s32i loc(#loc144)
            %11 = cir.const #cir.int<0> : !s32i loc(#loc145)
            %12 = cir.cmp(ge, %10, %11) : !s32i, !cir.bool loc(#loc613)
            cir.if %12 {
              %13 = cir.const #cir.int<1> : !s32i loc(#loc149)
              %14 = cir.load %0 : !cir.ptr<!s32i>, !s32i loc(#loc150)
              %15 = cir.cast(array_to_ptrdecay, %8 : !cir.ptr<!cir.array<!s32i x 10>>), !cir.ptr<!s32i> loc(#loc151)
              %16 = cir.ptr_stride(%15 : !cir.ptr<!s32i>, %14 : !s32i), !cir.ptr<!s32i> loc(#loc151)
              cir.store %13, %16 : !s32i, !cir.ptr<!s32i> loc(#loc615)
              cir.scope {
                %17 = cir.const #cir.int<0> : !s32i loc(#loc154)
                cir.store %17, %7 : !s32i, !cir.ptr<!s32i> loc(#loc617)
                cir.for : cond {
                  %18 = cir.load %7 : !cir.ptr<!s32i>, !s32i loc(#loc156)
                  %19 = cir.const #cir.int<10> : !s32i loc(#loc157)
                  %20 = cir.cmp(lt, %18, %19) : !s32i, !cir.bool loc(#loc618)
                  cir.condition(%20) loc(#loc158)
                } body {
                  cir.scope {
                    %18 = cir.load %7 : !cir.ptr<!s32i>, !s32i loc(#loc160)
                    %19 = cir.cast(array_to_ptrdecay, %8 : !cir.ptr<!cir.array<!s32i x 10>>), !cir.ptr<!s32i> loc(#loc161)
                    %20 = cir.ptr_stride(%19 : !cir.ptr<!s32i>, %18 : !s32i), !cir.ptr<!s32i> loc(#loc161)
                    %21 = cir.load %20 : !cir.ptr<!s32i>, !s32i loc(#loc161)
                    cir.call @printIntLine(%21) : (!s32i) -> () loc(#loc162)
                  } loc(#loc619)
                  cir.yield loc(#loc153)
                } step {
                  %18 = cir.load %7 : !cir.ptr<!s32i>, !s32i loc(#loc163)
                  %19 = cir.unary(inc, %18) nsw : !s32i, !s32i loc(#loc164)
                  cir.store %19, %7 : !s32i, !cir.ptr<!s32i> loc(#loc620)
                  cir.yield loc(#loc616)
                } loc(#loc616)
              } loc(#loc616)
            } else {
              %13 = cir.get_global @".str.1" : !cir.ptr<!cir.array<!s8i x 32>> loc(#loc22)
              %14 = cir.cast(array_to_ptrdecay, %13 : !cir.ptr<!cir.array<!s8i x 32>>), !cir.ptr<!s8i> loc(#loc22)
              cir.call @printLine(%14) : (!cir.ptr<!s8i>) -> () loc(#loc165)
            } loc(#loc614)
          } loc(#loc612)
        } loc(#loc609)
      } else {
        cir.scope {
          %7 = cir.alloca !s32i, !cir.ptr<!s32i>, ["i"] {alignment = 4 : i64} loc(#loc622)
          %8 = cir.alloca !cir.array<!s32i x 10>, !cir.ptr<!cir.array<!s32i x 10>>, ["buffer"] {alignment = 16 : i64} loc(#loc623)
          %9 = cir.const #cir.zero : !cir.array<!s32i x 10> loc(#loc623)
          cir.store %9, %8 : !cir.array<!s32i x 10>, !cir.ptr<!cir.array<!s32i x 10>> loc(#loc623)
          cir.scope {
            %10 = cir.load %0 : !cir.ptr<!s32i>, !s32i loc(#loc174)
            %11 = cir.const #cir.int<0> : !s32i loc(#loc175)
            %12 = cir.cmp(ge, %10, %11) : !s32i, !cir.bool loc(#loc625)
            %13 = cir.ternary(%12, true {
              %14 = cir.load %0 : !cir.ptr<!s32i>, !s32i loc(#loc177)
              %15 = cir.const #cir.int<10> : !s32i loc(#loc178)
              %16 = cir.cmp(lt, %14, %15) : !s32i, !cir.bool loc(#loc626)
              %17 = cir.ternary(%16, true {
                %18 = cir.const #true loc(#loc176)
                cir.yield %18 : !cir.bool loc(#loc176)
              }, false {
                %18 = cir.const #false loc(#loc176)
                cir.yield %18 : !cir.bool loc(#loc176)
              }) : (!cir.bool) -> !cir.bool loc(#loc176)
              cir.yield %17 : !cir.bool loc(#loc176)
            }, false {
              %14 = cir.const #false loc(#loc176)
              cir.yield %14 : !cir.bool loc(#loc176)
            }) : (!cir.bool) -> !cir.bool loc(#loc176)
            cir.if %13 {
              %14 = cir.const #cir.int<1> : !s32i loc(#loc183)
              %15 = cir.load %0 : !cir.ptr<!s32i>, !s32i loc(#loc184)
              %16 = cir.cast(array_to_ptrdecay, %8 : !cir.ptr<!cir.array<!s32i x 10>>), !cir.ptr<!s32i> loc(#loc185)
              %17 = cir.ptr_stride(%16 : !cir.ptr<!s32i>, %15 : !s32i), !cir.ptr<!s32i> loc(#loc185)
              cir.store %14, %17 : !s32i, !cir.ptr<!s32i> loc(#loc628)
              cir.scope {
                %18 = cir.const #cir.int<0> : !s32i loc(#loc188)
                cir.store %18, %7 : !s32i, !cir.ptr<!s32i> loc(#loc630)
                cir.for : cond {
                  %19 = cir.load %7 : !cir.ptr<!s32i>, !s32i loc(#loc190)
                  %20 = cir.const #cir.int<10> : !s32i loc(#loc191)
                  %21 = cir.cmp(lt, %19, %20) : !s32i, !cir.bool loc(#loc631)
                  cir.condition(%21) loc(#loc192)
                } body {
                  cir.scope {
                    %19 = cir.load %7 : !cir.ptr<!s32i>, !s32i loc(#loc194)
                    %20 = cir.cast(array_to_ptrdecay, %8 : !cir.ptr<!cir.array<!s32i x 10>>), !cir.ptr<!s32i> loc(#loc195)
                    %21 = cir.ptr_stride(%20 : !cir.ptr<!s32i>, %19 : !s32i), !cir.ptr<!s32i> loc(#loc195)
                    %22 = cir.load %21 : !cir.ptr<!s32i>, !s32i loc(#loc195)
                    cir.call @printIntLine(%22) : (!s32i) -> () loc(#loc196)
                  } loc(#loc632)
                  cir.yield loc(#loc187)
                } step {
                  %19 = cir.load %7 : !cir.ptr<!s32i>, !s32i loc(#loc197)
                  %20 = cir.unary(inc, %19) nsw : !s32i, !s32i loc(#loc198)
                  cir.store %20, %7 : !s32i, !cir.ptr<!s32i> loc(#loc633)
                  cir.yield loc(#loc629)
                } loc(#loc629)
              } loc(#loc629)
            } else {
              %14 = cir.get_global @".str.2" : !cir.ptr<!cir.array<!s8i x 36>> loc(#loc23)
              %15 = cir.cast(array_to_ptrdecay, %14 : !cir.ptr<!cir.array<!s8i x 36>>), !cir.ptr<!s8i> loc(#loc23)
              cir.call @printLine(%15) : (!cir.ptr<!s8i>) -> () loc(#loc199)
            } loc(#loc627)
          } loc(#loc624)
        } loc(#loc621)
      } loc(#loc608)
    } loc(#loc606)
    cir.return loc(#loc25)
  } loc(#loc566)
  cir.func no_proto @CWE121_Stack_Based_Buffer_Overflow__CWE129_connect_socket_12_good() extra(#fn_attr1) {
    %0 = cir.get_global @goodB2G : !cir.ptr<!cir.func<()>> loc(#loc635)
    cir.call %0() : (!cir.ptr<!cir.func<()>>) -> () loc(#loc202)
    %1 = cir.get_global @goodG2B : !cir.ptr<!cir.func<()>> loc(#loc636)
    cir.call %1() : (!cir.ptr<!cir.func<()>>) -> () loc(#loc204)
    cir.return loc(#loc201)
  } loc(#loc634)
  cir.func no_proto internal private @goodB2G() extra(#fn_attr1) {
    %0 = cir.alloca !s32i, !cir.ptr<!s32i>, ["data"] {alignment = 4 : i64} loc(#loc638)
    %1 = cir.const #cir.int<1> : !s32i loc(#loc210)
    %2 = cir.unary(minus, %1) nsw : !s32i, !s32i loc(#loc211)
    cir.store %2, %0 : !s32i, !cir.ptr<!s32i> loc(#loc639)
    cir.scope {
      %3 = cir.get_global @globalReturnsTrueOrFalse : !cir.ptr<!cir.func<(...) -> !s32i>> loc(#loc641)
      %4 = cir.cast(bitcast, %3 : !cir.ptr<!cir.func<(...) -> !s32i>>), !cir.ptr<!cir.func<() -> !s32i>> loc(#loc641)
      %5 = cir.call %4() : (!cir.ptr<!cir.func<() -> !s32i>>) -> !s32i loc(#loc215)
      %6 = cir.cast(int_to_bool, %5 : !s32i), !cir.bool loc(#loc215)
      cir.if %6 {
        cir.scope {
          %7 = cir.alloca !s32i, !cir.ptr<!s32i>, ["recvResult"] {alignment = 4 : i64} loc(#loc644)
          %8 = cir.alloca !ty_sockaddr_in, !cir.ptr<!ty_sockaddr_in>, ["service"] {alignment = 4 : i64} loc(#loc645)
          %9 = cir.alloca !s32i, !cir.ptr<!s32i>, ["connectSocket", init] {alignment = 4 : i64} loc(#loc646)
          %10 = cir.alloca !cir.array<!s8i x 14>, !cir.ptr<!cir.array<!s8i x 14>>, ["inputBuffer"] {alignment = 1 : i64} loc(#loc647)
          %11 = cir.const #cir.int<1> : !s32i loc(#loc227)
          %12 = cir.unary(minus, %11) nsw : !s32i, !s32i loc(#loc227)
          cir.store %12, %9 : !s32i, !cir.ptr<!s32i> loc(#loc646)
          cir.scope {
            cir.do {
              cir.scope {
                %13 = cir.const #cir.int<2> : !s32i loc(#loc234)
                %14 = cir.const #cir.int<1> : !s32i loc(#loc235)
                %15 = cir.const #cir.int<6> : !s32i loc(#loc236)
                %16 = cir.call @socket(%13, %14, %15) : (!s32i, !s32i, !s32i) -> !s32i extra(#fn_attr) loc(#loc237)
                cir.store %16, %9 : !s32i, !cir.ptr<!s32i> loc(#loc650)
                cir.scope {
                  %55 = cir.load %9 : !cir.ptr<!s32i>, !s32i loc(#loc242)
                  %56 = cir.const #cir.int<1> : !s32i loc(#loc243)
                  %57 = cir.unary(minus, %56) nsw : !s32i, !s32i loc(#loc243)
                  %58 = cir.cmp(eq, %55, %57) : !s32i, !cir.bool loc(#loc652)
                  cir.if %58 {
                    cir.break loc(#loc245)
                  } loc(#loc653)
                } loc(#loc651)
                %17 = cir.cast(bitcast, %8 : !cir.ptr<!ty_sockaddr_in>), !cir.ptr<!void> loc(#loc654)
                %18 = cir.const #cir.int<0> : !s32i loc(#loc248)
                %19 = cir.const #cir.int<16> : !u64i loc(#loc655)
                cir.libc.memset %19 bytes from %17 set to %18 : !cir.ptr<!void>, !s32i, !u64i loc(#loc656)
                %20 = cir.const #cir.int<2> : !s32i loc(#loc253)
                %21 = cir.cast(integral, %20 : !s32i), !u16i loc(#loc253)
                %22 = cir.get_member %8[0] {name = "sin_family"} : !cir.ptr<!ty_sockaddr_in> -> !cir.ptr<!u16i> loc(#loc72)
                cir.store %21, %22 : !u16i, !cir.ptr<!u16i> loc(#loc657)
                %23 = cir.get_global @".str" : !cir.ptr<!cir.array<!s8i x 10>> loc(#loc255)
                %24 = cir.cast(array_to_ptrdecay, %23 : !cir.ptr<!cir.array<!s8i x 10>>), !cir.ptr<!s8i> loc(#loc255)
                %25 = cir.call @inet_addr(%24) : (!cir.ptr<!s8i>) -> !u32i extra(#fn_attr) loc(#loc256)
                %26 = cir.get_member %8[2] {name = "sin_addr"} : !cir.ptr<!ty_sockaddr_in> -> !cir.ptr<!ty_in_addr> loc(#loc75)
                %27 = cir.get_member %26[0] {name = "s_addr"} : !cir.ptr<!ty_in_addr> -> !cir.ptr<!u32i> loc(#loc76)
                cir.store %25, %27 : !u32i, !cir.ptr<!u32i> loc(#loc658)
                %28 = cir.const #cir.int<27015> : !s32i loc(#loc259)
                %29 = cir.cast(integral, %28 : !s32i), !u16i loc(#loc259)
                %30 = cir.call @htons(%29) : (!u16i) -> !u16i side_effect(const) extra(#fn_attr) loc(#loc260)
                %31 = cir.get_member %8[1] {name = "sin_port"} : !cir.ptr<!ty_sockaddr_in> -> !cir.ptr<!u16i> loc(#loc81)
                cir.store %30, %31 : !u16i, !cir.ptr<!u16i> loc(#loc659)
                cir.scope {
                  %55 = cir.load %9 : !cir.ptr<!s32i>, !s32i loc(#loc265)
                  %56 = cir.cast(bitcast, %8 : !cir.ptr<!ty_sockaddr_in>), !cir.ptr<!ty_sockaddr> loc(#loc661)
                  %57 = cir.const #cir.int<16> : !u64i loc(#loc662)
                  %58 = cir.cast(integral, %57 : !u64i), !u32i loc(#loc662)
                  %59 = cir.call @connect(%55, %56, %58) : (!s32i, !cir.ptr<!ty_sockaddr>, !u32i) -> !s32i loc(#loc270)
                  %60 = cir.const #cir.int<1> : !s32i loc(#loc271)
                  %61 = cir.unary(minus, %60) nsw : !s32i, !s32i loc(#loc271)
                  %62 = cir.cmp(eq, %59, %61) : !s32i, !cir.bool loc(#loc663)
                  cir.if %62 {
                    cir.break loc(#loc273)
                  } loc(#loc664)
                } loc(#loc660)
                %32 = cir.load %9 : !cir.ptr<!s32i>, !s32i loc(#loc274)
                %33 = cir.cast(array_to_ptrdecay, %10 : !cir.ptr<!cir.array<!s8i x 14>>), !cir.ptr<!s8i> loc(#loc275)
                %34 = cir.cast(bitcast, %33 : !cir.ptr<!s8i>), !cir.ptr<!void> loc(#loc275)
                %35 = cir.const #cir.int<3> : !s32i loc(#loc276)
                %36 = cir.cast(integral, %35 : !s32i), !u64i loc(#loc276)
                %37 = cir.const #cir.int<4> : !u64i loc(#loc276)
                %38 = cir.binop(mul, %36, %37) : !u64i loc(#loc276)
                %39 = cir.const #cir.int<2> : !s32i loc(#loc276)
                %40 = cir.cast(integral, %39 : !s32i), !u64i loc(#loc276)
                %41 = cir.binop(add, %38, %40) : !u64i loc(#loc276)
                %42 = cir.const #cir.int<1> : !s32i loc(#loc277)
                %43 = cir.cast(integral, %42 : !s32i), !u64i loc(#loc277)
                %44 = cir.binop(sub, %41, %43) : !u64i loc(#loc665)
                %45 = cir.const #cir.int<0> : !s32i loc(#loc278)
                %46 = cir.call @recv(%32, %34, %44, %45) : (!s32i, !cir.ptr<!void>, !u64i, !s32i) -> !s64i loc(#loc279)
                %47 = cir.cast(integral, %46 : !s64i), !s32i loc(#loc279)
                cir.store %47, %7 : !s32i, !cir.ptr<!s32i> loc(#loc666)
                cir.scope {
                  %55 = cir.load %7 : !cir.ptr<!s32i>, !s32i loc(#loc284)
                  %56 = cir.const #cir.int<1> : !s32i loc(#loc285)
                  %57 = cir.unary(minus, %56) nsw : !s32i, !s32i loc(#loc285)
                  %58 = cir.cmp(eq, %55, %57) : !s32i, !cir.bool loc(#loc668)
                  %59 = cir.ternary(%58, true {
                    %60 = cir.const #true loc(#loc286)
                    cir.yield %60 : !cir.bool loc(#loc286)
                  }, false {
                    %60 = cir.load %7 : !cir.ptr<!s32i>, !s32i loc(#loc287)
                    %61 = cir.const #cir.int<0> : !s32i loc(#loc288)
                    %62 = cir.cmp(eq, %60, %61) : !s32i, !cir.bool loc(#loc669)
                    %63 = cir.ternary(%62, true {
                      %64 = cir.const #true loc(#loc286)
                      cir.yield %64 : !cir.bool loc(#loc286)
                    }, false {
                      %64 = cir.const #false loc(#loc286)
                      cir.yield %64 : !cir.bool loc(#loc286)
                    }) : (!cir.bool) -> !cir.bool loc(#loc286)
                    cir.yield %63 : !cir.bool loc(#loc286)
                  }) : (!cir.bool) -> !cir.bool loc(#loc286)
                  cir.if %59 {
                    cir.break loc(#loc290)
                  } loc(#loc670)
                } loc(#loc667)
                %48 = cir.const #cir.int<0> : !s32i loc(#loc291)
                %49 = cir.cast(integral, %48 : !s32i), !s8i loc(#loc291)
                %50 = cir.load %7 : !cir.ptr<!s32i>, !s32i loc(#loc292)
                %51 = cir.cast(array_to_ptrdecay, %10 : !cir.ptr<!cir.array<!s8i x 14>>), !cir.ptr<!s8i> loc(#loc293)
                %52 = cir.ptr_stride(%51 : !cir.ptr<!s8i>, %50 : !s32i), !cir.ptr<!s8i> loc(#loc293)
                cir.store %49, %52 : !s8i, !cir.ptr<!s8i> loc(#loc671)
                %53 = cir.cast(array_to_ptrdecay, %10 : !cir.ptr<!cir.array<!s8i x 14>>), !cir.ptr<!s8i> loc(#loc294)
                %54 = cir.call @atoi(%53) : (!cir.ptr<!s8i>) -> !s32i side_effect(pure) extra(#fn_attr) loc(#loc295)
                cir.store %54, %0 : !s32i, !cir.ptr<!s32i> loc(#loc672)
              } loc(#loc649)
              cir.yield loc(#loc231)
            } while {
              %13 = cir.const #cir.int<0> : !s32i loc(#loc298)
              %14 = cir.cast(int_to_bool, %13 : !s32i), !cir.bool loc(#loc298)
              cir.condition(%14) loc(#loc298)
            } loc(#loc648)
          } loc(#loc648)
          cir.scope {
            %13 = cir.load %9 : !cir.ptr<!s32i>, !s32i loc(#loc301)
            %14 = cir.const #cir.int<1> : !s32i loc(#loc302)
            %15 = cir.unary(minus, %14) nsw : !s32i, !s32i loc(#loc302)
            %16 = cir.cmp(ne, %13, %15) : !s32i, !cir.bool loc(#loc674)
            cir.if %16 {
              %17 = cir.load %9 : !cir.ptr<!s32i>, !s32i loc(#loc304)
              %18 = cir.call @close(%17) : (!s32i) -> !s32i loc(#loc305)
            } loc(#loc675)
          } loc(#loc673)
        } loc(#loc643)
      } else {
        cir.scope {
          %7 = cir.alloca !s32i, !cir.ptr<!s32i>, ["recvResult"] {alignment = 4 : i64} loc(#loc677)
          %8 = cir.alloca !ty_sockaddr_in, !cir.ptr<!ty_sockaddr_in>, ["service"] {alignment = 4 : i64} loc(#loc678)
          %9 = cir.alloca !s32i, !cir.ptr<!s32i>, ["connectSocket", init] {alignment = 4 : i64} loc(#loc679)
          %10 = cir.alloca !cir.array<!s8i x 14>, !cir.ptr<!cir.array<!s8i x 14>>, ["inputBuffer"] {alignment = 1 : i64} loc(#loc680)
          %11 = cir.const #cir.int<1> : !s32i loc(#loc313)
          %12 = cir.unary(minus, %11) nsw : !s32i, !s32i loc(#loc313)
          cir.store %12, %9 : !s32i, !cir.ptr<!s32i> loc(#loc679)
          cir.scope {
            cir.do {
              cir.scope {
                %13 = cir.const #cir.int<2> : !s32i loc(#loc320)
                %14 = cir.const #cir.int<1> : !s32i loc(#loc321)
                %15 = cir.const #cir.int<6> : !s32i loc(#loc322)
                %16 = cir.call @socket(%13, %14, %15) : (!s32i, !s32i, !s32i) -> !s32i extra(#fn_attr) loc(#loc323)
                cir.store %16, %9 : !s32i, !cir.ptr<!s32i> loc(#loc683)
                cir.scope {
                  %55 = cir.load %9 : !cir.ptr<!s32i>, !s32i loc(#loc328)
                  %56 = cir.const #cir.int<1> : !s32i loc(#loc329)
                  %57 = cir.unary(minus, %56) nsw : !s32i, !s32i loc(#loc329)
                  %58 = cir.cmp(eq, %55, %57) : !s32i, !cir.bool loc(#loc685)
                  cir.if %58 {
                    cir.break loc(#loc331)
                  } loc(#loc686)
                } loc(#loc684)
                %17 = cir.cast(bitcast, %8 : !cir.ptr<!ty_sockaddr_in>), !cir.ptr<!void> loc(#loc687)
                %18 = cir.const #cir.int<0> : !s32i loc(#loc334)
                %19 = cir.const #cir.int<16> : !u64i loc(#loc688)
                cir.libc.memset %19 bytes from %17 set to %18 : !cir.ptr<!void>, !s32i, !u64i loc(#loc689)
                %20 = cir.const #cir.int<2> : !s32i loc(#loc339)
                %21 = cir.cast(integral, %20 : !s32i), !u16i loc(#loc339)
                %22 = cir.get_member %8[0] {name = "sin_family"} : !cir.ptr<!ty_sockaddr_in> -> !cir.ptr<!u16i> loc(#loc72)
                cir.store %21, %22 : !u16i, !cir.ptr<!u16i> loc(#loc690)
                %23 = cir.get_global @".str" : !cir.ptr<!cir.array<!s8i x 10>> loc(#loc341)
                %24 = cir.cast(array_to_ptrdecay, %23 : !cir.ptr<!cir.array<!s8i x 10>>), !cir.ptr<!s8i> loc(#loc341)
                %25 = cir.call @inet_addr(%24) : (!cir.ptr<!s8i>) -> !u32i extra(#fn_attr) loc(#loc342)
                %26 = cir.get_member %8[2] {name = "sin_addr"} : !cir.ptr<!ty_sockaddr_in> -> !cir.ptr<!ty_in_addr> loc(#loc75)
                %27 = cir.get_member %26[0] {name = "s_addr"} : !cir.ptr<!ty_in_addr> -> !cir.ptr<!u32i> loc(#loc76)
                cir.store %25, %27 : !u32i, !cir.ptr<!u32i> loc(#loc691)
                %28 = cir.const #cir.int<27015> : !s32i loc(#loc345)
                %29 = cir.cast(integral, %28 : !s32i), !u16i loc(#loc345)
                %30 = cir.call @htons(%29) : (!u16i) -> !u16i side_effect(const) extra(#fn_attr) loc(#loc346)
                %31 = cir.get_member %8[1] {name = "sin_port"} : !cir.ptr<!ty_sockaddr_in> -> !cir.ptr<!u16i> loc(#loc81)
                cir.store %30, %31 : !u16i, !cir.ptr<!u16i> loc(#loc692)
                cir.scope {
                  %55 = cir.load %9 : !cir.ptr<!s32i>, !s32i loc(#loc351)
                  %56 = cir.cast(bitcast, %8 : !cir.ptr<!ty_sockaddr_in>), !cir.ptr<!ty_sockaddr> loc(#loc694)
                  %57 = cir.const #cir.int<16> : !u64i loc(#loc695)
                  %58 = cir.cast(integral, %57 : !u64i), !u32i loc(#loc695)
                  %59 = cir.call @connect(%55, %56, %58) : (!s32i, !cir.ptr<!ty_sockaddr>, !u32i) -> !s32i loc(#loc356)
                  %60 = cir.const #cir.int<1> : !s32i loc(#loc357)
                  %61 = cir.unary(minus, %60) nsw : !s32i, !s32i loc(#loc357)
                  %62 = cir.cmp(eq, %59, %61) : !s32i, !cir.bool loc(#loc696)
                  cir.if %62 {
                    cir.break loc(#loc359)
                  } loc(#loc697)
                } loc(#loc693)
                %32 = cir.load %9 : !cir.ptr<!s32i>, !s32i loc(#loc360)
                %33 = cir.cast(array_to_ptrdecay, %10 : !cir.ptr<!cir.array<!s8i x 14>>), !cir.ptr<!s8i> loc(#loc361)
                %34 = cir.cast(bitcast, %33 : !cir.ptr<!s8i>), !cir.ptr<!void> loc(#loc361)
                %35 = cir.const #cir.int<3> : !s32i loc(#loc362)
                %36 = cir.cast(integral, %35 : !s32i), !u64i loc(#loc362)
                %37 = cir.const #cir.int<4> : !u64i loc(#loc362)
                %38 = cir.binop(mul, %36, %37) : !u64i loc(#loc362)
                %39 = cir.const #cir.int<2> : !s32i loc(#loc362)
                %40 = cir.cast(integral, %39 : !s32i), !u64i loc(#loc362)
                %41 = cir.binop(add, %38, %40) : !u64i loc(#loc362)
                %42 = cir.const #cir.int<1> : !s32i loc(#loc363)
                %43 = cir.cast(integral, %42 : !s32i), !u64i loc(#loc363)
                %44 = cir.binop(sub, %41, %43) : !u64i loc(#loc698)
                %45 = cir.const #cir.int<0> : !s32i loc(#loc364)
                %46 = cir.call @recv(%32, %34, %44, %45) : (!s32i, !cir.ptr<!void>, !u64i, !s32i) -> !s64i loc(#loc365)
                %47 = cir.cast(integral, %46 : !s64i), !s32i loc(#loc365)
                cir.store %47, %7 : !s32i, !cir.ptr<!s32i> loc(#loc699)
                cir.scope {
                  %55 = cir.load %7 : !cir.ptr<!s32i>, !s32i loc(#loc370)
                  %56 = cir.const #cir.int<1> : !s32i loc(#loc371)
                  %57 = cir.unary(minus, %56) nsw : !s32i, !s32i loc(#loc371)
                  %58 = cir.cmp(eq, %55, %57) : !s32i, !cir.bool loc(#loc701)
                  %59 = cir.ternary(%58, true {
                    %60 = cir.const #true loc(#loc372)
                    cir.yield %60 : !cir.bool loc(#loc372)
                  }, false {
                    %60 = cir.load %7 : !cir.ptr<!s32i>, !s32i loc(#loc373)
                    %61 = cir.const #cir.int<0> : !s32i loc(#loc374)
                    %62 = cir.cmp(eq, %60, %61) : !s32i, !cir.bool loc(#loc702)
                    %63 = cir.ternary(%62, true {
                      %64 = cir.const #true loc(#loc372)
                      cir.yield %64 : !cir.bool loc(#loc372)
                    }, false {
                      %64 = cir.const #false loc(#loc372)
                      cir.yield %64 : !cir.bool loc(#loc372)
                    }) : (!cir.bool) -> !cir.bool loc(#loc372)
                    cir.yield %63 : !cir.bool loc(#loc372)
                  }) : (!cir.bool) -> !cir.bool loc(#loc372)
                  cir.if %59 {
                    cir.break loc(#loc376)
                  } loc(#loc703)
                } loc(#loc700)
                %48 = cir.const #cir.int<0> : !s32i loc(#loc377)
                %49 = cir.cast(integral, %48 : !s32i), !s8i loc(#loc377)
                %50 = cir.load %7 : !cir.ptr<!s32i>, !s32i loc(#loc378)
                %51 = cir.cast(array_to_ptrdecay, %10 : !cir.ptr<!cir.array<!s8i x 14>>), !cir.ptr<!s8i> loc(#loc379)
                %52 = cir.ptr_stride(%51 : !cir.ptr<!s8i>, %50 : !s32i), !cir.ptr<!s8i> loc(#loc379)
                cir.store %49, %52 : !s8i, !cir.ptr<!s8i> loc(#loc704)
                %53 = cir.cast(array_to_ptrdecay, %10 : !cir.ptr<!cir.array<!s8i x 14>>), !cir.ptr<!s8i> loc(#loc380)
                %54 = cir.call @atoi(%53) : (!cir.ptr<!s8i>) -> !s32i side_effect(pure) extra(#fn_attr) loc(#loc381)
                cir.store %54, %0 : !s32i, !cir.ptr<!s32i> loc(#loc705)
              } loc(#loc682)
              cir.yield loc(#loc317)
            } while {
              %13 = cir.const #cir.int<0> : !s32i loc(#loc384)
              %14 = cir.cast(int_to_bool, %13 : !s32i), !cir.bool loc(#loc384)
              cir.condition(%14) loc(#loc384)
            } loc(#loc681)
          } loc(#loc681)
          cir.scope {
            %13 = cir.load %9 : !cir.ptr<!s32i>, !s32i loc(#loc387)
            %14 = cir.const #cir.int<1> : !s32i loc(#loc388)
            %15 = cir.unary(minus, %14) nsw : !s32i, !s32i loc(#loc388)
            %16 = cir.cmp(ne, %13, %15) : !s32i, !cir.bool loc(#loc707)
            cir.if %16 {
              %17 = cir.load %9 : !cir.ptr<!s32i>, !s32i loc(#loc390)
              %18 = cir.call @close(%17) : (!s32i) -> !s32i loc(#loc391)
            } loc(#loc708)
          } loc(#loc706)
        } loc(#loc676)
      } loc(#loc642)
    } loc(#loc640)
    cir.scope {
      %3 = cir.get_global @globalReturnsTrueOrFalse : !cir.ptr<!cir.func<(...) -> !s32i>> loc(#loc710)
      %4 = cir.cast(bitcast, %3 : !cir.ptr<!cir.func<(...) -> !s32i>>), !cir.ptr<!cir.func<() -> !s32i>> loc(#loc710)
      %5 = cir.call %4() : (!cir.ptr<!cir.func<() -> !s32i>>) -> !s32i loc(#loc394)
      %6 = cir.cast(int_to_bool, %5 : !s32i), !cir.bool loc(#loc394)
      cir.if %6 {
        cir.scope {
          %7 = cir.alloca !s32i, !cir.ptr<!s32i>, ["i"] {alignment = 4 : i64} loc(#loc713)
          %8 = cir.alloca !cir.array<!s32i x 10>, !cir.ptr<!cir.array<!s32i x 10>>, ["buffer"] {alignment = 16 : i64} loc(#loc714)
          %9 = cir.const #cir.zero : !cir.array<!s32i x 10> loc(#loc714)
          cir.store %9, %8 : !cir.array<!s32i x 10>, !cir.ptr<!cir.array<!s32i x 10>> loc(#loc714)
          cir.scope {
            %10 = cir.load %0 : !cir.ptr<!s32i>, !s32i loc(#loc407)
            %11 = cir.const #cir.int<0> : !s32i loc(#loc408)
            %12 = cir.cmp(ge, %10, %11) : !s32i, !cir.bool loc(#loc716)
            %13 = cir.ternary(%12, true {
              %14 = cir.load %0 : !cir.ptr<!s32i>, !s32i loc(#loc410)
              %15 = cir.const #cir.int<10> : !s32i loc(#loc411)
              %16 = cir.cmp(lt, %14, %15) : !s32i, !cir.bool loc(#loc717)
              %17 = cir.ternary(%16, true {
                %18 = cir.const #true loc(#loc409)
                cir.yield %18 : !cir.bool loc(#loc409)
              }, false {
                %18 = cir.const #false loc(#loc409)
                cir.yield %18 : !cir.bool loc(#loc409)
              }) : (!cir.bool) -> !cir.bool loc(#loc409)
              cir.yield %17 : !cir.bool loc(#loc409)
            }, false {
              %14 = cir.const #false loc(#loc409)
              cir.yield %14 : !cir.bool loc(#loc409)
            }) : (!cir.bool) -> !cir.bool loc(#loc409)
            cir.if %13 {
              %14 = cir.const #cir.int<1> : !s32i loc(#loc416)
              %15 = cir.load %0 : !cir.ptr<!s32i>, !s32i loc(#loc417)
              %16 = cir.cast(array_to_ptrdecay, %8 : !cir.ptr<!cir.array<!s32i x 10>>), !cir.ptr<!s32i> loc(#loc418)
              %17 = cir.ptr_stride(%16 : !cir.ptr<!s32i>, %15 : !s32i), !cir.ptr<!s32i> loc(#loc418)
              cir.store %14, %17 : !s32i, !cir.ptr<!s32i> loc(#loc719)
              cir.scope {
                %18 = cir.const #cir.int<0> : !s32i loc(#loc421)
                cir.store %18, %7 : !s32i, !cir.ptr<!s32i> loc(#loc721)
                cir.for : cond {
                  %19 = cir.load %7 : !cir.ptr<!s32i>, !s32i loc(#loc423)
                  %20 = cir.const #cir.int<10> : !s32i loc(#loc424)
                  %21 = cir.cmp(lt, %19, %20) : !s32i, !cir.bool loc(#loc722)
                  cir.condition(%21) loc(#loc425)
                } body {
                  cir.scope {
                    %19 = cir.load %7 : !cir.ptr<!s32i>, !s32i loc(#loc427)
                    %20 = cir.cast(array_to_ptrdecay, %8 : !cir.ptr<!cir.array<!s32i x 10>>), !cir.ptr<!s32i> loc(#loc428)
                    %21 = cir.ptr_stride(%20 : !cir.ptr<!s32i>, %19 : !s32i), !cir.ptr<!s32i> loc(#loc428)
                    %22 = cir.load %21 : !cir.ptr<!s32i>, !s32i loc(#loc428)
                    cir.call @printIntLine(%22) : (!s32i) -> () loc(#loc429)
                  } loc(#loc723)
                  cir.yield loc(#loc420)
                } step {
                  %19 = cir.load %7 : !cir.ptr<!s32i>, !s32i loc(#loc430)
                  %20 = cir.unary(inc, %19) nsw : !s32i, !s32i loc(#loc431)
                  cir.store %20, %7 : !s32i, !cir.ptr<!s32i> loc(#loc724)
                  cir.yield loc(#loc720)
                } loc(#loc720)
              } loc(#loc720)
            } else {
              %14 = cir.get_global @".str.2" : !cir.ptr<!cir.array<!s8i x 36>> loc(#loc432)
              %15 = cir.cast(array_to_ptrdecay, %14 : !cir.ptr<!cir.array<!s8i x 36>>), !cir.ptr<!s8i> loc(#loc432)
              cir.call @printLine(%15) : (!cir.ptr<!s8i>) -> () loc(#loc433)
            } loc(#loc718)
          } loc(#loc715)
        } loc(#loc712)
      } else {
        cir.scope {
          %7 = cir.alloca !s32i, !cir.ptr<!s32i>, ["i"] {alignment = 4 : i64} loc(#loc726)
          %8 = cir.alloca !cir.array<!s32i x 10>, !cir.ptr<!cir.array<!s32i x 10>>, ["buffer"] {alignment = 16 : i64} loc(#loc727)
          %9 = cir.const #cir.zero : !cir.array<!s32i x 10> loc(#loc727)
          cir.store %9, %8 : !cir.array<!s32i x 10>, !cir.ptr<!cir.array<!s32i x 10>> loc(#loc727)
          cir.scope {
            %10 = cir.load %0 : !cir.ptr<!s32i>, !s32i loc(#loc442)
            %11 = cir.const #cir.int<0> : !s32i loc(#loc443)
            %12 = cir.cmp(ge, %10, %11) : !s32i, !cir.bool loc(#loc729)
            %13 = cir.ternary(%12, true {
              %14 = cir.load %0 : !cir.ptr<!s32i>, !s32i loc(#loc445)
              %15 = cir.const #cir.int<10> : !s32i loc(#loc446)
              %16 = cir.cmp(lt, %14, %15) : !s32i, !cir.bool loc(#loc730)
              %17 = cir.ternary(%16, true {
                %18 = cir.const #true loc(#loc444)
                cir.yield %18 : !cir.bool loc(#loc444)
              }, false {
                %18 = cir.const #false loc(#loc444)
                cir.yield %18 : !cir.bool loc(#loc444)
              }) : (!cir.bool) -> !cir.bool loc(#loc444)
              cir.yield %17 : !cir.bool loc(#loc444)
            }, false {
              %14 = cir.const #false loc(#loc444)
              cir.yield %14 : !cir.bool loc(#loc444)
            }) : (!cir.bool) -> !cir.bool loc(#loc444)
            cir.if %13 {
              %14 = cir.const #cir.int<1> : !s32i loc(#loc451)
              %15 = cir.load %0 : !cir.ptr<!s32i>, !s32i loc(#loc452)
              %16 = cir.cast(array_to_ptrdecay, %8 : !cir.ptr<!cir.array<!s32i x 10>>), !cir.ptr<!s32i> loc(#loc453)
              %17 = cir.ptr_stride(%16 : !cir.ptr<!s32i>, %15 : !s32i), !cir.ptr<!s32i> loc(#loc453)
              cir.store %14, %17 : !s32i, !cir.ptr<!s32i> loc(#loc732)
              cir.scope {
                %18 = cir.const #cir.int<0> : !s32i loc(#loc456)
                cir.store %18, %7 : !s32i, !cir.ptr<!s32i> loc(#loc734)
                cir.for : cond {
                  %19 = cir.load %7 : !cir.ptr<!s32i>, !s32i loc(#loc458)
                  %20 = cir.const #cir.int<10> : !s32i loc(#loc459)
                  %21 = cir.cmp(lt, %19, %20) : !s32i, !cir.bool loc(#loc735)
                  cir.condition(%21) loc(#loc460)
                } body {
                  cir.scope {
                    %19 = cir.load %7 : !cir.ptr<!s32i>, !s32i loc(#loc462)
                    %20 = cir.cast(array_to_ptrdecay, %8 : !cir.ptr<!cir.array<!s32i x 10>>), !cir.ptr<!s32i> loc(#loc463)
                    %21 = cir.ptr_stride(%20 : !cir.ptr<!s32i>, %19 : !s32i), !cir.ptr<!s32i> loc(#loc463)
                    %22 = cir.load %21 : !cir.ptr<!s32i>, !s32i loc(#loc463)
                    cir.call @printIntLine(%22) : (!s32i) -> () loc(#loc464)
                  } loc(#loc736)
                  cir.yield loc(#loc455)
                } step {
                  %19 = cir.load %7 : !cir.ptr<!s32i>, !s32i loc(#loc465)
                  %20 = cir.unary(inc, %19) nsw : !s32i, !s32i loc(#loc466)
                  cir.store %20, %7 : !s32i, !cir.ptr<!s32i> loc(#loc737)
                  cir.yield loc(#loc733)
                } loc(#loc733)
              } loc(#loc733)
            } else {
              %14 = cir.get_global @".str.2" : !cir.ptr<!cir.array<!s8i x 36>> loc(#loc467)
              %15 = cir.cast(array_to_ptrdecay, %14 : !cir.ptr<!cir.array<!s8i x 36>>), !cir.ptr<!s8i> loc(#loc467)
              cir.call @printLine(%15) : (!cir.ptr<!s8i>) -> () loc(#loc468)
            } loc(#loc731)
          } loc(#loc728)
        } loc(#loc725)
      } loc(#loc711)
    } loc(#loc709)
    cir.return loc(#loc207)
  } loc(#loc637)
  cir.func no_proto internal private @goodG2B() extra(#fn_attr1) {
    %0 = cir.alloca !s32i, !cir.ptr<!s32i>, ["data"] {alignment = 4 : i64} loc(#loc739)
    %1 = cir.const #cir.int<1> : !s32i loc(#loc473)
    %2 = cir.unary(minus, %1) nsw : !s32i, !s32i loc(#loc474)
    cir.store %2, %0 : !s32i, !cir.ptr<!s32i> loc(#loc740)
    cir.scope {
      %3 = cir.get_global @globalReturnsTrueOrFalse : !cir.ptr<!cir.func<(...) -> !s32i>> loc(#loc742)
      %4 = cir.cast(bitcast, %3 : !cir.ptr<!cir.func<(...) -> !s32i>>), !cir.ptr<!cir.func<() -> !s32i>> loc(#loc742)
      %5 = cir.call %4() : (!cir.ptr<!cir.func<() -> !s32i>>) -> !s32i loc(#loc478)
      %6 = cir.cast(int_to_bool, %5 : !s32i), !cir.bool loc(#loc478)
      cir.if %6 {
        %7 = cir.const #cir.int<7> : !s32i loc(#loc483)
        cir.store %7, %0 : !s32i, !cir.ptr<!s32i> loc(#loc744)
      } else {
        %7 = cir.const #cir.int<7> : !s32i loc(#loc485)
        cir.store %7, %0 : !s32i, !cir.ptr<!s32i> loc(#loc745)
      } loc(#loc743)
    } loc(#loc741)
    cir.scope {
      %3 = cir.get_global @globalReturnsTrueOrFalse : !cir.ptr<!cir.func<(...) -> !s32i>> loc(#loc747)
      %4 = cir.cast(bitcast, %3 : !cir.ptr<!cir.func<(...) -> !s32i>>), !cir.ptr<!cir.func<() -> !s32i>> loc(#loc747)
      %5 = cir.call %4() : (!cir.ptr<!cir.func<() -> !s32i>>) -> !s32i loc(#loc489)
      %6 = cir.cast(int_to_bool, %5 : !s32i), !cir.bool loc(#loc489)
      cir.if %6 {
        cir.scope {
          %7 = cir.alloca !s32i, !cir.ptr<!s32i>, ["i"] {alignment = 4 : i64} loc(#loc750)
          %8 = cir.alloca !cir.array<!s32i x 10>, !cir.ptr<!cir.array<!s32i x 10>>, ["buffer"] {alignment = 16 : i64} loc(#loc751)
          %9 = cir.const #cir.zero : !cir.array<!s32i x 10> loc(#loc751)
          cir.store %9, %8 : !cir.array<!s32i x 10>, !cir.ptr<!cir.array<!s32i x 10>> loc(#loc751)
          cir.scope {
            %10 = cir.load %0 : !cir.ptr<!s32i>, !s32i loc(#loc502)
            %11 = cir.const #cir.int<0> : !s32i loc(#loc503)
            %12 = cir.cmp(ge, %10, %11) : !s32i, !cir.bool loc(#loc753)
            cir.if %12 {
              %13 = cir.const #cir.int<1> : !s32i loc(#loc507)
              %14 = cir.load %0 : !cir.ptr<!s32i>, !s32i loc(#loc508)
              %15 = cir.cast(array_to_ptrdecay, %8 : !cir.ptr<!cir.array<!s32i x 10>>), !cir.ptr<!s32i> loc(#loc509)
              %16 = cir.ptr_stride(%15 : !cir.ptr<!s32i>, %14 : !s32i), !cir.ptr<!s32i> loc(#loc509)
              cir.store %13, %16 : !s32i, !cir.ptr<!s32i> loc(#loc755)
              cir.scope {
                %17 = cir.const #cir.int<0> : !s32i loc(#loc512)
                cir.store %17, %7 : !s32i, !cir.ptr<!s32i> loc(#loc757)
                cir.for : cond {
                  %18 = cir.load %7 : !cir.ptr<!s32i>, !s32i loc(#loc514)
                  %19 = cir.const #cir.int<10> : !s32i loc(#loc515)
                  %20 = cir.cmp(lt, %18, %19) : !s32i, !cir.bool loc(#loc758)
                  cir.condition(%20) loc(#loc516)
                } body {
                  cir.scope {
                    %18 = cir.load %7 : !cir.ptr<!s32i>, !s32i loc(#loc518)
                    %19 = cir.cast(array_to_ptrdecay, %8 : !cir.ptr<!cir.array<!s32i x 10>>), !cir.ptr<!s32i> loc(#loc519)
                    %20 = cir.ptr_stride(%19 : !cir.ptr<!s32i>, %18 : !s32i), !cir.ptr<!s32i> loc(#loc519)
                    %21 = cir.load %20 : !cir.ptr<!s32i>, !s32i loc(#loc519)
                    cir.call @printIntLine(%21) : (!s32i) -> () loc(#loc520)
                  } loc(#loc759)
                  cir.yield loc(#loc511)
                } step {
                  %18 = cir.load %7 : !cir.ptr<!s32i>, !s32i loc(#loc521)
                  %19 = cir.unary(inc, %18) nsw : !s32i, !s32i loc(#loc522)
                  cir.store %19, %7 : !s32i, !cir.ptr<!s32i> loc(#loc760)
                  cir.yield loc(#loc756)
                } loc(#loc756)
              } loc(#loc756)
            } else {
              %13 = cir.get_global @".str.1" : !cir.ptr<!cir.array<!s8i x 32>> loc(#loc523)
              %14 = cir.cast(array_to_ptrdecay, %13 : !cir.ptr<!cir.array<!s8i x 32>>), !cir.ptr<!s8i> loc(#loc523)
              cir.call @printLine(%14) : (!cir.ptr<!s8i>) -> () loc(#loc524)
            } loc(#loc754)
          } loc(#loc752)
        } loc(#loc749)
      } else {
        cir.scope {
          %7 = cir.alloca !s32i, !cir.ptr<!s32i>, ["i"] {alignment = 4 : i64} loc(#loc762)
          %8 = cir.alloca !cir.array<!s32i x 10>, !cir.ptr<!cir.array<!s32i x 10>>, ["buffer"] {alignment = 16 : i64} loc(#loc763)
          %9 = cir.const #cir.zero : !cir.array<!s32i x 10> loc(#loc763)
          cir.store %9, %8 : !cir.array<!s32i x 10>, !cir.ptr<!cir.array<!s32i x 10>> loc(#loc763)
          cir.scope {
            %10 = cir.load %0 : !cir.ptr<!s32i>, !s32i loc(#loc533)
            %11 = cir.const #cir.int<0> : !s32i loc(#loc534)
            %12 = cir.cmp(ge, %10, %11) : !s32i, !cir.bool loc(#loc765)
            cir.if %12 {
              %13 = cir.const #cir.int<1> : !s32i loc(#loc538)
              %14 = cir.load %0 : !cir.ptr<!s32i>, !s32i loc(#loc539)
              %15 = cir.cast(array_to_ptrdecay, %8 : !cir.ptr<!cir.array<!s32i x 10>>), !cir.ptr<!s32i> loc(#loc540)
              %16 = cir.ptr_stride(%15 : !cir.ptr<!s32i>, %14 : !s32i), !cir.ptr<!s32i> loc(#loc540)
              cir.store %13, %16 : !s32i, !cir.ptr<!s32i> loc(#loc767)
              cir.scope {
                %17 = cir.const #cir.int<0> : !s32i loc(#loc543)
                cir.store %17, %7 : !s32i, !cir.ptr<!s32i> loc(#loc769)
                cir.for : cond {
                  %18 = cir.load %7 : !cir.ptr<!s32i>, !s32i loc(#loc545)
                  %19 = cir.const #cir.int<10> : !s32i loc(#loc546)
                  %20 = cir.cmp(lt, %18, %19) : !s32i, !cir.bool loc(#loc770)
                  cir.condition(%20) loc(#loc547)
                } body {
                  cir.scope {
                    %18 = cir.load %7 : !cir.ptr<!s32i>, !s32i loc(#loc549)
                    %19 = cir.cast(array_to_ptrdecay, %8 : !cir.ptr<!cir.array<!s32i x 10>>), !cir.ptr<!s32i> loc(#loc550)
                    %20 = cir.ptr_stride(%19 : !cir.ptr<!s32i>, %18 : !s32i), !cir.ptr<!s32i> loc(#loc550)
                    %21 = cir.load %20 : !cir.ptr<!s32i>, !s32i loc(#loc550)
                    cir.call @printIntLine(%21) : (!s32i) -> () loc(#loc551)
                  } loc(#loc771)
                  cir.yield loc(#loc542)
                } step {
                  %18 = cir.load %7 : !cir.ptr<!s32i>, !s32i loc(#loc552)
                  %19 = cir.unary(inc, %18) nsw : !s32i, !s32i loc(#loc553)
                  cir.store %19, %7 : !s32i, !cir.ptr<!s32i> loc(#loc772)
                  cir.yield loc(#loc768)
                } loc(#loc768)
              } loc(#loc768)
            } else {
              %13 = cir.get_global @".str.1" : !cir.ptr<!cir.array<!s8i x 32>> loc(#loc554)
              %14 = cir.cast(array_to_ptrdecay, %13 : !cir.ptr<!cir.array<!s8i x 32>>), !cir.ptr<!s8i> loc(#loc554)
              cir.call @printLine(%14) : (!cir.ptr<!s8i>) -> () loc(#loc555)
            } loc(#loc766)
          } loc(#loc764)
        } loc(#loc761)
      } loc(#loc748)
    } loc(#loc746)
    cir.return loc(#loc470)
  } loc(#loc738)
} loc(#loc)
#loc = loc("/workspaces/juliet-c/testcases/CWE121_Stack_Based_Buffer_Overflow/s01/CWE121_Stack_Based_Buffer_Overflow__CWE129_connect_socket_12.c":0:0)
#loc1 = loc("../../../testcasesupport/std_testcase_io.h":52:1)
#loc2 = loc("../../../testcasesupport/std_testcase_io.h":52:30)
#loc3 = loc("/usr/include/x86_64-linux-gnu/sys/socket.h":102:1)
#loc4 = loc("/usr/include/x86_64-linux-gnu/sys/socket.h":102:62)
#loc5 = loc("/usr/include/arpa/inet.h":34:1)
#loc6 = loc("/usr/include/arpa/inet.h":34:47)
#loc7 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE129_connect_socket_12.c":77:53)
#loc8 = loc("/usr/include/netinet/in.h":402:1)
#loc9 = loc("/usr/include/netinet/in.h":403:40)
#loc10 = loc("/usr/include/x86_64-linux-gnu/sys/socket.h":126:1)
#loc11 = loc("/usr/include/x86_64-linux-gnu/sys/socket.h":126:75)
#loc12 = loc("/usr/include/x86_64-linux-gnu/sys/socket.h":145:1)
#loc13 = loc("/usr/include/x86_64-linux-gnu/sys/socket.h":145:68)
#loc14 = loc("/usr/include/stdlib.h":105:1)
#loc15 = loc("/usr/include/stdlib.h":106:33)
#loc16 = loc("/usr/include/unistd.h":358:1)
#loc17 = loc("/usr/include/unistd.h":358:27)
#loc18 = loc("../../../testcasesupport/std_testcase_io.h":18:1)
#loc19 = loc("../../../testcasesupport/std_testcase_io.h":18:33)
#loc20 = loc("../../../testcasesupport/std_testcase_io.h":14:1)
#loc21 = loc("../../../testcasesupport/std_testcase_io.h":14:33)
#loc22 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE129_connect_socket_12.c":132:27)
#loc23 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE129_connect_socket_12.c":153:27)
#loc24 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE129_connect_socket_12.c":44:1)
#loc25 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE129_connect_socket_12.c":157:1)
#loc26 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE129_connect_socket_12.c":46:5)
#loc27 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE129_connect_socket_12.c":46:9)
#loc28 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE129_connect_socket_12.c":48:13)
#loc29 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE129_connect_socket_12.c":48:12)
#loc30 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE129_connect_socket_12.c":48:5)
#loc31 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE129_connect_socket_12.c":49:5)
#loc32 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE129_connect_socket_12.c":113:5)
#loc33 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE129_connect_socket_12.c":49:8)
#loc34 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE129_connect_socket_12.c":49:33)
#loc35 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE129_connect_socket_12.c":50:5)
#loc36 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE129_connect_socket_12.c":107:5)
#loc37 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE129_connect_socket_12.c":109:5)
#loc38 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE129_connect_socket_12.c":51:9)
#loc39 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE129_connect_socket_12.c":106:9)
#loc40 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE129_connect_socket_12.c":56:13)
#loc41 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE129_connect_socket_12.c":56:17)
#loc42 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE129_connect_socket_12.c":57:13)
#loc43 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE129_connect_socket_12.c":57:32)
#loc44 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE129_connect_socket_12.c":58:13)
#loc45 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE129_connect_socket_12.c":58:36)
#loc46 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE129_connect_socket_12.c":59:13)
#loc47 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE129_connect_socket_12.c":59:45)
#loc48 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE129_connect_socket_12.c":60:13)
#loc49 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE129_connect_socket_12.c":95:21)
#loc50 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE129_connect_socket_12.c":61:13)
#loc51 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE129_connect_socket_12.c":94:13)
#loc52 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE129_connect_socket_12.c":70:40)
#loc53 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE129_connect_socket_12.c":70:49)
#loc54 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE129_connect_socket_12.c":70:62)
#loc55 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE129_connect_socket_12.c":70:33)
#loc56 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE129_connect_socket_12.c":70:17)
#loc57 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE129_connect_socket_12.c":70:73)
#loc58 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE129_connect_socket_12.c":71:17)
#loc59 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE129_connect_socket_12.c":74:17)
#loc60 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE129_connect_socket_12.c":71:21)
#loc61 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE129_connect_socket_12.c":71:38)
#loc62 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE129_connect_socket_12.c":72:17)
#loc63 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE129_connect_socket_12.c":73:21)
#loc64 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE129_connect_socket_12.c":75:24)
#loc65 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE129_connect_socket_12.c":75:25)
#loc66 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE129_connect_socket_12.c":75:34)
#loc67 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE129_connect_socket_12.c":75:37)
#loc68 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE129_connect_socket_12.c":75:51)
#loc69 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE129_connect_socket_12.c":75:17)
#loc70 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE129_connect_socket_12.c":75:52)
#loc71 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE129_connect_socket_12.c":76:38)
#loc72 = loc("/usr/include/netinet/in.h":249:5)
#loc73 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE129_connect_socket_12.c":76:17)
#loc74 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE129_connect_socket_12.c":77:43)
#loc75 = loc("/usr/include/netinet/in.h":251:20)
#loc76 = loc("/usr/include/netinet/in.h":33:15)
#loc77 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE129_connect_socket_12.c":77:17)
#loc78 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE129_connect_socket_12.c":77:63)
#loc79 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE129_connect_socket_12.c":78:42)
#loc80 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE129_connect_socket_12.c":78:36)
#loc81 = loc("/usr/include/netinet/in.h":250:15)
#loc82 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE129_connect_socket_12.c":78:17)
#loc83 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE129_connect_socket_12.c":78:50)
#loc84 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE129_connect_socket_12.c":79:17)
#loc85 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE129_connect_socket_12.c":82:17)
#loc86 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE129_connect_socket_12.c":79:29)
#loc87 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE129_connect_socket_12.c":79:62)
#loc88 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE129_connect_socket_12.c":79:63)
#loc89 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE129_connect_socket_12.c":79:72)
#loc90 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE129_connect_socket_12.c":79:86)
#loc91 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE129_connect_socket_12.c":79:21)
#loc92 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE129_connect_socket_12.c":79:92)
#loc93 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE129_connect_socket_12.c":80:17)
#loc94 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE129_connect_socket_12.c":81:21)
#loc95 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE129_connect_socket_12.c":85:35)
#loc96 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE129_connect_socket_12.c":85:50)
#loc97 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE129_connect_socket_12.c":85:63)
#loc98 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE129_connect_socket_12.c":85:81)
#loc99 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE129_connect_socket_12.c":85:84)
#loc100 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE129_connect_socket_12.c":85:30)
#loc101 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE129_connect_socket_12.c":85:17)
#loc102 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE129_connect_socket_12.c":85:85)
#loc103 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE129_connect_socket_12.c":86:17)
#loc104 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE129_connect_socket_12.c":89:17)
#loc105 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE129_connect_socket_12.c":86:21)
#loc106 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE129_connect_socket_12.c":86:35)
#loc107 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE129_connect_socket_12.c":86:48)
#loc108 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE129_connect_socket_12.c":86:51)
#loc109 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE129_connect_socket_12.c":86:65)
#loc110 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE129_connect_socket_12.c":87:17)
#loc111 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE129_connect_socket_12.c":88:21)
#loc112 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE129_connect_socket_12.c":91:43)
#loc113 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE129_connect_socket_12.c":91:29)
#loc114 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE129_connect_socket_12.c":91:17)
#loc115 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE129_connect_socket_12.c":93:29)
#loc116 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE129_connect_socket_12.c":93:24)
#loc117 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE129_connect_socket_12.c":93:17)
#loc118 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE129_connect_socket_12.c":93:40)
#loc119 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE129_connect_socket_12.c":95:20)
#loc120 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE129_connect_socket_12.c":96:13)
#loc121 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE129_connect_socket_12.c":99:13)
#loc122 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE129_connect_socket_12.c":96:17)
#loc123 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE129_connect_socket_12.c":96:34)
#loc124 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE129_connect_socket_12.c":97:13)
#loc125 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE129_connect_socket_12.c":98:30)
#loc126 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE129_connect_socket_12.c":98:17)
#loc127 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE129_connect_socket_12.c":112:16)
#loc128 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE129_connect_socket_12.c":112:9)
#loc129 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE129_connect_socket_12.c":114:5)
#loc130 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE129_connect_socket_12.c":156:5)
#loc131 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE129_connect_socket_12.c":114:8)
#loc132 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE129_connect_socket_12.c":114:33)
#loc133 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE129_connect_socket_12.c":115:5)
#loc134 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE129_connect_socket_12.c":135:5)
#loc135 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE129_connect_socket_12.c":137:5)
#loc136 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE129_connect_socket_12.c":116:9)
#loc137 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE129_connect_socket_12.c":134:9)
#loc138 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE129_connect_socket_12.c":117:13)
#loc139 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE129_connect_socket_12.c":117:17)
#loc140 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE129_connect_socket_12.c":118:13)
#loc141 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE129_connect_socket_12.c":118:34)
#loc142 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE129_connect_socket_12.c":121:13)
#loc143 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE129_connect_socket_12.c":133:13)
#loc144 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE129_connect_socket_12.c":121:17)
#loc145 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE129_connect_socket_12.c":121:25)
#loc146 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE129_connect_socket_12.c":122:13)
#loc147 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE129_connect_socket_12.c":129:13)
#loc148 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE129_connect_socket_12.c":131:13)
#loc149 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE129_connect_socket_12.c":123:32)
#loc150 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE129_connect_socket_12.c":123:24)
#loc151 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE129_connect_socket_12.c":123:17)
#loc152 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE129_connect_socket_12.c":125:17)
#loc153 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE129_connect_socket_12.c":128:17)
#loc154 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE129_connect_socket_12.c":125:25)
#loc155 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE129_connect_socket_12.c":125:21)
#loc156 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE129_connect_socket_12.c":125:28)
#loc157 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE129_connect_socket_12.c":125:32)
#loc158 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE129_connect_socket_12.c":125:30)
#loc159 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE129_connect_socket_12.c":126:17)
#loc160 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE129_connect_socket_12.c":127:41)
#loc161 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE129_connect_socket_12.c":127:34)
#loc162 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE129_connect_socket_12.c":127:21)
#loc163 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE129_connect_socket_12.c":125:37)
#loc164 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE129_connect_socket_12.c":125:36)
#loc165 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE129_connect_socket_12.c":132:17)
#loc166 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE129_connect_socket_12.c":138:9)
#loc167 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE129_connect_socket_12.c":155:9)
#loc168 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE129_connect_socket_12.c":139:13)
#loc169 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE129_connect_socket_12.c":139:17)
#loc170 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE129_connect_socket_12.c":140:13)
#loc171 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE129_connect_socket_12.c":140:34)
#loc172 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE129_connect_socket_12.c":142:13)
#loc173 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE129_connect_socket_12.c":154:13)
#loc174 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE129_connect_socket_12.c":142:17)
#loc175 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE129_connect_socket_12.c":142:25)
#loc176 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE129_connect_socket_12.c":142:27)
#loc177 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE129_connect_socket_12.c":142:30)
#loc178 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE129_connect_socket_12.c":142:38)
#loc179 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE129_connect_socket_12.c":142:40)
#loc180 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE129_connect_socket_12.c":143:13)
#loc181 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE129_connect_socket_12.c":150:13)
#loc182 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE129_connect_socket_12.c":152:13)
#loc183 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE129_connect_socket_12.c":144:32)
#loc184 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE129_connect_socket_12.c":144:24)
#loc185 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE129_connect_socket_12.c":144:17)
#loc186 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE129_connect_socket_12.c":146:17)
#loc187 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE129_connect_socket_12.c":149:17)
#loc188 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE129_connect_socket_12.c":146:25)
#loc189 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE129_connect_socket_12.c":146:21)
#loc190 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE129_connect_socket_12.c":146:28)
#loc191 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE129_connect_socket_12.c":146:32)
#loc192 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE129_connect_socket_12.c":146:30)
#loc193 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE129_connect_socket_12.c":147:17)
#loc194 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE129_connect_socket_12.c":148:41)
#loc195 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE129_connect_socket_12.c":148:34)
#loc196 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE129_connect_socket_12.c":148:21)
#loc197 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE129_connect_socket_12.c":146:37)
#loc198 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE129_connect_socket_12.c":146:36)
#loc199 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE129_connect_socket_12.c":153:17)
#loc200 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE129_connect_socket_12.c":399:1)
#loc201 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE129_connect_socket_12.c":403:1)
#loc202 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE129_connect_socket_12.c":401:5)
#loc203 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE129_connect_socket_12.c":401:13)
#loc204 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE129_connect_socket_12.c":402:5)
#loc205 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE129_connect_socket_12.c":402:13)
#loc206 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE129_connect_socket_12.c":166:1)
#loc207 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE129_connect_socket_12.c":331:1)
#loc208 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE129_connect_socket_12.c":168:5)
#loc209 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE129_connect_socket_12.c":168:9)
#loc210 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE129_connect_socket_12.c":170:13)
#loc211 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE129_connect_socket_12.c":170:12)
#loc212 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE129_connect_socket_12.c":170:5)
#loc213 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE129_connect_socket_12.c":171:5)
#loc214 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE129_connect_socket_12.c":288:5)
#loc215 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE129_connect_socket_12.c":171:8)
#loc216 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE129_connect_socket_12.c":171:33)
#loc217 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE129_connect_socket_12.c":172:5)
#loc218 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE129_connect_socket_12.c":229:5)
#loc219 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE129_connect_socket_12.c":231:5)
#loc220 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE129_connect_socket_12.c":173:9)
#loc221 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE129_connect_socket_12.c":228:9)
#loc222 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE129_connect_socket_12.c":178:13)
#loc223 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE129_connect_socket_12.c":178:17)
#loc224 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE129_connect_socket_12.c":179:13)
#loc225 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE129_connect_socket_12.c":179:32)
#loc226 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE129_connect_socket_12.c":180:13)
#loc227 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE129_connect_socket_12.c":180:36)
#loc228 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE129_connect_socket_12.c":181:13)
#loc229 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE129_connect_socket_12.c":181:45)
#loc230 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE129_connect_socket_12.c":182:13)
#loc231 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE129_connect_socket_12.c":217:21)
#loc232 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE129_connect_socket_12.c":183:13)
#loc233 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE129_connect_socket_12.c":216:13)
#loc234 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE129_connect_socket_12.c":192:40)
#loc235 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE129_connect_socket_12.c":192:49)
#loc236 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE129_connect_socket_12.c":192:62)
#loc237 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE129_connect_socket_12.c":192:33)
#loc238 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE129_connect_socket_12.c":192:17)
#loc239 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE129_connect_socket_12.c":192:73)
#loc240 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE129_connect_socket_12.c":193:17)
#loc241 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE129_connect_socket_12.c":196:17)
#loc242 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE129_connect_socket_12.c":193:21)
#loc243 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE129_connect_socket_12.c":193:38)
#loc244 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE129_connect_socket_12.c":194:17)
#loc245 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE129_connect_socket_12.c":195:21)
#loc246 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE129_connect_socket_12.c":197:24)
#loc247 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE129_connect_socket_12.c":197:25)
#loc248 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE129_connect_socket_12.c":197:34)
#loc249 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE129_connect_socket_12.c":197:37)
#loc250 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE129_connect_socket_12.c":197:51)
#loc251 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE129_connect_socket_12.c":197:17)
#loc252 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE129_connect_socket_12.c":197:52)
#loc253 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE129_connect_socket_12.c":198:38)
#loc254 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE129_connect_socket_12.c":198:17)
#loc255 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE129_connect_socket_12.c":199:53)
#loc256 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE129_connect_socket_12.c":199:43)
#loc257 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE129_connect_socket_12.c":199:17)
#loc258 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE129_connect_socket_12.c":199:63)
#loc259 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE129_connect_socket_12.c":200:42)
#loc260 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE129_connect_socket_12.c":200:36)
#loc261 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE129_connect_socket_12.c":200:17)
#loc262 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE129_connect_socket_12.c":200:50)
#loc263 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE129_connect_socket_12.c":201:17)
#loc264 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE129_connect_socket_12.c":204:17)
#loc265 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE129_connect_socket_12.c":201:29)
#loc266 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE129_connect_socket_12.c":201:62)
#loc267 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE129_connect_socket_12.c":201:63)
#loc268 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE129_connect_socket_12.c":201:72)
#loc269 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE129_connect_socket_12.c":201:86)
#loc270 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE129_connect_socket_12.c":201:21)
#loc271 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE129_connect_socket_12.c":201:92)
#loc272 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE129_connect_socket_12.c":202:17)
#loc273 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE129_connect_socket_12.c":203:21)
#loc274 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE129_connect_socket_12.c":207:35)
#loc275 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE129_connect_socket_12.c":207:50)
#loc276 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE129_connect_socket_12.c":207:63)
#loc277 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE129_connect_socket_12.c":207:81)
#loc278 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE129_connect_socket_12.c":207:84)
#loc279 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE129_connect_socket_12.c":207:30)
#loc280 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE129_connect_socket_12.c":207:17)
#loc281 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE129_connect_socket_12.c":207:85)
#loc282 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE129_connect_socket_12.c":208:17)
#loc283 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE129_connect_socket_12.c":211:17)
#loc284 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE129_connect_socket_12.c":208:21)
#loc285 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE129_connect_socket_12.c":208:35)
#loc286 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE129_connect_socket_12.c":208:48)
#loc287 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE129_connect_socket_12.c":208:51)
#loc288 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE129_connect_socket_12.c":208:65)
#loc289 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE129_connect_socket_12.c":209:17)
#loc290 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE129_connect_socket_12.c":210:21)
#loc291 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE129_connect_socket_12.c":213:43)
#loc292 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE129_connect_socket_12.c":213:29)
#loc293 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE129_connect_socket_12.c":213:17)
#loc294 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE129_connect_socket_12.c":215:29)
#loc295 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE129_connect_socket_12.c":215:24)
#loc296 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE129_connect_socket_12.c":215:17)
#loc297 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE129_connect_socket_12.c":215:40)
#loc298 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE129_connect_socket_12.c":217:20)
#loc299 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE129_connect_socket_12.c":218:13)
#loc300 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE129_connect_socket_12.c":221:13)
#loc301 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE129_connect_socket_12.c":218:17)
#loc302 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE129_connect_socket_12.c":218:34)
#loc303 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE129_connect_socket_12.c":219:13)
#loc304 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE129_connect_socket_12.c":220:30)
#loc305 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE129_connect_socket_12.c":220:17)
#loc306 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE129_connect_socket_12.c":232:9)
#loc307 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE129_connect_socket_12.c":287:9)
#loc308 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE129_connect_socket_12.c":237:13)
#loc309 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE129_connect_socket_12.c":237:17)
#loc310 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE129_connect_socket_12.c":238:13)
#loc311 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE129_connect_socket_12.c":238:32)
#loc312 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE129_connect_socket_12.c":239:13)
#loc313 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE129_connect_socket_12.c":239:36)
#loc314 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE129_connect_socket_12.c":240:13)
#loc315 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE129_connect_socket_12.c":240:45)
#loc316 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE129_connect_socket_12.c":241:13)
#loc317 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE129_connect_socket_12.c":276:21)
#loc318 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE129_connect_socket_12.c":242:13)
#loc319 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE129_connect_socket_12.c":275:13)
#loc320 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE129_connect_socket_12.c":251:40)
#loc321 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE129_connect_socket_12.c":251:49)
#loc322 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE129_connect_socket_12.c":251:62)
#loc323 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE129_connect_socket_12.c":251:33)
#loc324 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE129_connect_socket_12.c":251:17)
#loc325 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE129_connect_socket_12.c":251:73)
#loc326 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE129_connect_socket_12.c":252:17)
#loc327 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE129_connect_socket_12.c":255:17)
#loc328 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE129_connect_socket_12.c":252:21)
#loc329 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE129_connect_socket_12.c":252:38)
#loc330 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE129_connect_socket_12.c":253:17)
#loc331 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE129_connect_socket_12.c":254:21)
#loc332 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE129_connect_socket_12.c":256:24)
#loc333 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE129_connect_socket_12.c":256:25)
#loc334 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE129_connect_socket_12.c":256:34)
#loc335 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE129_connect_socket_12.c":256:37)
#loc336 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE129_connect_socket_12.c":256:51)
#loc337 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE129_connect_socket_12.c":256:17)
#loc338 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE129_connect_socket_12.c":256:52)
#loc339 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE129_connect_socket_12.c":257:38)
#loc340 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE129_connect_socket_12.c":257:17)
#loc341 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE129_connect_socket_12.c":258:53)
#loc342 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE129_connect_socket_12.c":258:43)
#loc343 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE129_connect_socket_12.c":258:17)
#loc344 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE129_connect_socket_12.c":258:63)
#loc345 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE129_connect_socket_12.c":259:42)
#loc346 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE129_connect_socket_12.c":259:36)
#loc347 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE129_connect_socket_12.c":259:17)
#loc348 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE129_connect_socket_12.c":259:50)
#loc349 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE129_connect_socket_12.c":260:17)
#loc350 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE129_connect_socket_12.c":263:17)
#loc351 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE129_connect_socket_12.c":260:29)
#loc352 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE129_connect_socket_12.c":260:62)
#loc353 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE129_connect_socket_12.c":260:63)
#loc354 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE129_connect_socket_12.c":260:72)
#loc355 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE129_connect_socket_12.c":260:86)
#loc356 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE129_connect_socket_12.c":260:21)
#loc357 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE129_connect_socket_12.c":260:92)
#loc358 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE129_connect_socket_12.c":261:17)
#loc359 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE129_connect_socket_12.c":262:21)
#loc360 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE129_connect_socket_12.c":266:35)
#loc361 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE129_connect_socket_12.c":266:50)
#loc362 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE129_connect_socket_12.c":266:63)
#loc363 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE129_connect_socket_12.c":266:81)
#loc364 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE129_connect_socket_12.c":266:84)
#loc365 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE129_connect_socket_12.c":266:30)
#loc366 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE129_connect_socket_12.c":266:17)
#loc367 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE129_connect_socket_12.c":266:85)
#loc368 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE129_connect_socket_12.c":267:17)
#loc369 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE129_connect_socket_12.c":270:17)
#loc370 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE129_connect_socket_12.c":267:21)
#loc371 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE129_connect_socket_12.c":267:35)
#loc372 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE129_connect_socket_12.c":267:48)
#loc373 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE129_connect_socket_12.c":267:51)
#loc374 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE129_connect_socket_12.c":267:65)
#loc375 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE129_connect_socket_12.c":268:17)
#loc376 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE129_connect_socket_12.c":269:21)
#loc377 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE129_connect_socket_12.c":272:43)
#loc378 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE129_connect_socket_12.c":272:29)
#loc379 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE129_connect_socket_12.c":272:17)
#loc380 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE129_connect_socket_12.c":274:29)
#loc381 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE129_connect_socket_12.c":274:24)
#loc382 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE129_connect_socket_12.c":274:17)
#loc383 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE129_connect_socket_12.c":274:40)
#loc384 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE129_connect_socket_12.c":276:20)
#loc385 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE129_connect_socket_12.c":277:13)
#loc386 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE129_connect_socket_12.c":280:13)
#loc387 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE129_connect_socket_12.c":277:17)
#loc388 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE129_connect_socket_12.c":277:34)
#loc389 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE129_connect_socket_12.c":278:13)
#loc390 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE129_connect_socket_12.c":279:30)
#loc391 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE129_connect_socket_12.c":279:17)
#loc392 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE129_connect_socket_12.c":289:5)
#loc393 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE129_connect_socket_12.c":330:5)
#loc394 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE129_connect_socket_12.c":289:8)
#loc395 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE129_connect_socket_12.c":289:33)
#loc396 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE129_connect_socket_12.c":290:5)
#loc397 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE129_connect_socket_12.c":309:5)
#loc398 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE129_connect_socket_12.c":311:5)
#loc399 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE129_connect_socket_12.c":291:9)
#loc400 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE129_connect_socket_12.c":308:9)
#loc401 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE129_connect_socket_12.c":292:13)
#loc402 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE129_connect_socket_12.c":292:17)
#loc403 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE129_connect_socket_12.c":293:13)
#loc404 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE129_connect_socket_12.c":293:34)
#loc405 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE129_connect_socket_12.c":295:13)
#loc406 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE129_connect_socket_12.c":307:13)
#loc407 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE129_connect_socket_12.c":295:17)
#loc408 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE129_connect_socket_12.c":295:25)
#loc409 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE129_connect_socket_12.c":295:27)
#loc410 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE129_connect_socket_12.c":295:30)
#loc411 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE129_connect_socket_12.c":295:38)
#loc412 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE129_connect_socket_12.c":295:40)
#loc413 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE129_connect_socket_12.c":296:13)
#loc414 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE129_connect_socket_12.c":303:13)
#loc415 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE129_connect_socket_12.c":305:13)
#loc416 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE129_connect_socket_12.c":297:32)
#loc417 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE129_connect_socket_12.c":297:24)
#loc418 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE129_connect_socket_12.c":297:17)
#loc419 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE129_connect_socket_12.c":299:17)
#loc420 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE129_connect_socket_12.c":302:17)
#loc421 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE129_connect_socket_12.c":299:25)
#loc422 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE129_connect_socket_12.c":299:21)
#loc423 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE129_connect_socket_12.c":299:28)
#loc424 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE129_connect_socket_12.c":299:32)
#loc425 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE129_connect_socket_12.c":299:30)
#loc426 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE129_connect_socket_12.c":300:17)
#loc427 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE129_connect_socket_12.c":301:41)
#loc428 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE129_connect_socket_12.c":301:34)
#loc429 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE129_connect_socket_12.c":301:21)
#loc430 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE129_connect_socket_12.c":299:37)
#loc431 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE129_connect_socket_12.c":299:36)
#loc432 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE129_connect_socket_12.c":306:27)
#loc433 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE129_connect_socket_12.c":306:17)
#loc434 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE129_connect_socket_12.c":312:9)
#loc435 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE129_connect_socket_12.c":329:9)
#loc436 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE129_connect_socket_12.c":313:13)
#loc437 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE129_connect_socket_12.c":313:17)
#loc438 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE129_connect_socket_12.c":314:13)
#loc439 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE129_connect_socket_12.c":314:34)
#loc440 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE129_connect_socket_12.c":316:13)
#loc441 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE129_connect_socket_12.c":328:13)
#loc442 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE129_connect_socket_12.c":316:17)
#loc443 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE129_connect_socket_12.c":316:25)
#loc444 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE129_connect_socket_12.c":316:27)
#loc445 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE129_connect_socket_12.c":316:30)
#loc446 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE129_connect_socket_12.c":316:38)
#loc447 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE129_connect_socket_12.c":316:40)
#loc448 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE129_connect_socket_12.c":317:13)
#loc449 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE129_connect_socket_12.c":324:13)
#loc450 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE129_connect_socket_12.c":326:13)
#loc451 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE129_connect_socket_12.c":318:32)
#loc452 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE129_connect_socket_12.c":318:24)
#loc453 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE129_connect_socket_12.c":318:17)
#loc454 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE129_connect_socket_12.c":320:17)
#loc455 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE129_connect_socket_12.c":323:17)
#loc456 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE129_connect_socket_12.c":320:25)
#loc457 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE129_connect_socket_12.c":320:21)
#loc458 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE129_connect_socket_12.c":320:28)
#loc459 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE129_connect_socket_12.c":320:32)
#loc460 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE129_connect_socket_12.c":320:30)
#loc461 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE129_connect_socket_12.c":321:17)
#loc462 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE129_connect_socket_12.c":322:41)
#loc463 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE129_connect_socket_12.c":322:34)
#loc464 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE129_connect_socket_12.c":322:21)
#loc465 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE129_connect_socket_12.c":320:37)
#loc466 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE129_connect_socket_12.c":320:36)
#loc467 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE129_connect_socket_12.c":327:27)
#loc468 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE129_connect_socket_12.c":327:17)
#loc469 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE129_connect_socket_12.c":336:1)
#loc470 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE129_connect_socket_12.c":397:1)
#loc471 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE129_connect_socket_12.c":338:5)
#loc472 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE129_connect_socket_12.c":338:9)
#loc473 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE129_connect_socket_12.c":340:13)
#loc474 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE129_connect_socket_12.c":340:12)
#loc475 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE129_connect_socket_12.c":340:5)
#loc476 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE129_connect_socket_12.c":341:5)
#loc477 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE129_connect_socket_12.c":352:5)
#loc478 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE129_connect_socket_12.c":341:8)
#loc479 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE129_connect_socket_12.c":341:33)
#loc480 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE129_connect_socket_12.c":342:5)
#loc481 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE129_connect_socket_12.c":346:5)
#loc482 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE129_connect_socket_12.c":348:5)
#loc483 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE129_connect_socket_12.c":345:16)
#loc484 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE129_connect_socket_12.c":345:9)
#loc485 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE129_connect_socket_12.c":351:16)
#loc486 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE129_connect_socket_12.c":351:9)
#loc487 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE129_connect_socket_12.c":353:5)
#loc488 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE129_connect_socket_12.c":396:5)
#loc489 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE129_connect_socket_12.c":353:8)
#loc490 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE129_connect_socket_12.c":353:33)
#loc491 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE129_connect_socket_12.c":354:5)
#loc492 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE129_connect_socket_12.c":374:5)
#loc493 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE129_connect_socket_12.c":376:5)
#loc494 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE129_connect_socket_12.c":355:9)
#loc495 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE129_connect_socket_12.c":373:9)
#loc496 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE129_connect_socket_12.c":356:13)
#loc497 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE129_connect_socket_12.c":356:17)
#loc498 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE129_connect_socket_12.c":357:13)
#loc499 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE129_connect_socket_12.c":357:34)
#loc500 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE129_connect_socket_12.c":360:13)
#loc501 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE129_connect_socket_12.c":372:13)
#loc502 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE129_connect_socket_12.c":360:17)
#loc503 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE129_connect_socket_12.c":360:25)
#loc504 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE129_connect_socket_12.c":361:13)
#loc505 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE129_connect_socket_12.c":368:13)
#loc506 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE129_connect_socket_12.c":370:13)
#loc507 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE129_connect_socket_12.c":362:32)
#loc508 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE129_connect_socket_12.c":362:24)
#loc509 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE129_connect_socket_12.c":362:17)
#loc510 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE129_connect_socket_12.c":364:17)
#loc511 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE129_connect_socket_12.c":367:17)
#loc512 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE129_connect_socket_12.c":364:25)
#loc513 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE129_connect_socket_12.c":364:21)
#loc514 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE129_connect_socket_12.c":364:28)
#loc515 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE129_connect_socket_12.c":364:32)
#loc516 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE129_connect_socket_12.c":364:30)
#loc517 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE129_connect_socket_12.c":365:17)
#loc518 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE129_connect_socket_12.c":366:41)
#loc519 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE129_connect_socket_12.c":366:34)
#loc520 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE129_connect_socket_12.c":366:21)
#loc521 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE129_connect_socket_12.c":364:37)
#loc522 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE129_connect_socket_12.c":364:36)
#loc523 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE129_connect_socket_12.c":371:27)
#loc524 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE129_connect_socket_12.c":371:17)
#loc525 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE129_connect_socket_12.c":377:9)
#loc526 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE129_connect_socket_12.c":395:9)
#loc527 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE129_connect_socket_12.c":378:13)
#loc528 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE129_connect_socket_12.c":378:17)
#loc529 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE129_connect_socket_12.c":379:13)
#loc530 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE129_connect_socket_12.c":379:34)
#loc531 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE129_connect_socket_12.c":382:13)
#loc532 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE129_connect_socket_12.c":394:13)
#loc533 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE129_connect_socket_12.c":382:17)
#loc534 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE129_connect_socket_12.c":382:25)
#loc535 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE129_connect_socket_12.c":383:13)
#loc536 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE129_connect_socket_12.c":390:13)
#loc537 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE129_connect_socket_12.c":392:13)
#loc538 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE129_connect_socket_12.c":384:32)
#loc539 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE129_connect_socket_12.c":384:24)
#loc540 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE129_connect_socket_12.c":384:17)
#loc541 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE129_connect_socket_12.c":386:17)
#loc542 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE129_connect_socket_12.c":389:17)
#loc543 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE129_connect_socket_12.c":386:25)
#loc544 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE129_connect_socket_12.c":386:21)
#loc545 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE129_connect_socket_12.c":386:28)
#loc546 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE129_connect_socket_12.c":386:32)
#loc547 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE129_connect_socket_12.c":386:30)
#loc548 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE129_connect_socket_12.c":387:17)
#loc549 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE129_connect_socket_12.c":388:41)
#loc550 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE129_connect_socket_12.c":388:34)
#loc551 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE129_connect_socket_12.c":388:21)
#loc552 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE129_connect_socket_12.c":386:37)
#loc553 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE129_connect_socket_12.c":386:36)
#loc554 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE129_connect_socket_12.c":393:27)
#loc555 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE129_connect_socket_12.c":393:17)
#loc556 = loc(fused[#loc1, #loc2])
#loc557 = loc(fused[#loc3, #loc4])
#loc558 = loc(fused[#loc5, #loc6])
#loc559 = loc(fused[#loc8, #loc9])
#loc560 = loc(fused[#loc10, #loc11])
#loc561 = loc(fused[#loc12, #loc13])
#loc562 = loc(fused[#loc14, #loc15])
#loc563 = loc(fused[#loc16, #loc17])
#loc564 = loc(fused[#loc18, #loc19])
#loc565 = loc(fused[#loc20, #loc21])
#loc566 = loc(fused[#loc24, #loc25])
#loc567 = loc(fused[#loc26, #loc27])
#loc568 = loc(fused[#loc30, #loc28])
#loc569 = loc(fused[#loc31, #loc32])
#loc570 = loc(fused[#loc33, #loc34])
#loc571 = loc(fused[#loc35, #loc36, #loc37, #loc32])
#loc572 = loc(fused[#loc38, #loc39])
#loc573 = loc(fused[#loc40, #loc41])
#loc574 = loc(fused[#loc42, #loc43])
#loc575 = loc(fused[#loc44, #loc45])
#loc576 = loc(fused[#loc46, #loc47])
#loc577 = loc(fused[#loc48, #loc49])
#loc578 = loc(fused[#loc50, #loc51])
#loc579 = loc(fused[#loc56, #loc57])
#loc580 = loc(fused[#loc58, #loc59])
#loc581 = loc(fused[#loc60, #loc61])
#loc582 = loc(fused[#loc62, #loc59])
#loc583 = loc(fused[#loc64, #loc65])
#loc584 = loc(fused[#loc67, #loc68])
#loc585 = loc(fused[#loc69, #loc70])
#loc586 = loc(fused[#loc73, #loc71])
#loc587 = loc(fused[#loc77, #loc78])
#loc588 = loc(fused[#loc82, #loc83])
#loc589 = loc(fused[#loc84, #loc85])
#loc590 = loc(fused[#loc87, #loc88])
#loc591 = loc(fused[#loc89, #loc90])
#loc592 = loc(fused[#loc91, #loc92])
#loc593 = loc(fused[#loc93, #loc85])
#loc594 = loc(fused[#loc97, #loc98])
#loc595 = loc(fused[#loc101, #loc102])
#loc596 = loc(fused[#loc103, #loc104])
#loc597 = loc(fused[#loc105, #loc106])
#loc598 = loc(fused[#loc108, #loc109])
#loc599 = loc(fused[#loc110, #loc104])
#loc600 = loc(fused[#loc114, #loc112])
#loc601 = loc(fused[#loc117, #loc118])
#loc602 = loc(fused[#loc120, #loc121])
#loc603 = loc(fused[#loc122, #loc123])
#loc604 = loc(fused[#loc124, #loc121])
#loc605 = loc(fused[#loc128, #loc127])
#loc606 = loc(fused[#loc129, #loc130])
#loc607 = loc(fused[#loc131, #loc132])
#loc608 = loc(fused[#loc133, #loc134, #loc135, #loc130])
#loc609 = loc(fused[#loc136, #loc137])
#loc610 = loc(fused[#loc138, #loc139])
#loc611 = loc(fused[#loc140, #loc141])
#loc612 = loc(fused[#loc142, #loc143])
#loc613 = loc(fused[#loc144, #loc145])
#loc614 = loc(fused[#loc146, #loc147, #loc148, #loc143])
#loc615 = loc(fused[#loc151, #loc149])
#loc616 = loc(fused[#loc152, #loc153])
#loc617 = loc(fused[#loc155, #loc154])
#loc618 = loc(fused[#loc156, #loc157])
#loc619 = loc(fused[#loc159, #loc153])
#loc620 = loc(fused[#loc164, #loc163])
#loc621 = loc(fused[#loc166, #loc167])
#loc622 = loc(fused[#loc168, #loc169])
#loc623 = loc(fused[#loc170, #loc171])
#loc624 = loc(fused[#loc172, #loc173])
#loc625 = loc(fused[#loc174, #loc175])
#loc626 = loc(fused[#loc177, #loc179])
#loc627 = loc(fused[#loc180, #loc181, #loc182, #loc173])
#loc628 = loc(fused[#loc185, #loc183])
#loc629 = loc(fused[#loc186, #loc187])
#loc630 = loc(fused[#loc189, #loc188])
#loc631 = loc(fused[#loc190, #loc191])
#loc632 = loc(fused[#loc193, #loc187])
#loc633 = loc(fused[#loc198, #loc197])
#loc634 = loc(fused[#loc200, #loc201])
#loc635 = loc(fused[#loc202, #loc203])
#loc636 = loc(fused[#loc204, #loc205])
#loc637 = loc(fused[#loc206, #loc207])
#loc638 = loc(fused[#loc208, #loc209])
#loc639 = loc(fused[#loc212, #loc210])
#loc640 = loc(fused[#loc213, #loc214])
#loc641 = loc(fused[#loc215, #loc216])
#loc642 = loc(fused[#loc217, #loc218, #loc219, #loc214])
#loc643 = loc(fused[#loc220, #loc221])
#loc644 = loc(fused[#loc222, #loc223])
#loc645 = loc(fused[#loc224, #loc225])
#loc646 = loc(fused[#loc226, #loc227])
#loc647 = loc(fused[#loc228, #loc229])
#loc648 = loc(fused[#loc230, #loc231])
#loc649 = loc(fused[#loc232, #loc233])
#loc650 = loc(fused[#loc238, #loc239])
#loc651 = loc(fused[#loc240, #loc241])
#loc652 = loc(fused[#loc242, #loc243])
#loc653 = loc(fused[#loc244, #loc241])
#loc654 = loc(fused[#loc246, #loc247])
#loc655 = loc(fused[#loc249, #loc250])
#loc656 = loc(fused[#loc251, #loc252])
#loc657 = loc(fused[#loc254, #loc253])
#loc658 = loc(fused[#loc257, #loc258])
#loc659 = loc(fused[#loc261, #loc262])
#loc660 = loc(fused[#loc263, #loc264])
#loc661 = loc(fused[#loc266, #loc267])
#loc662 = loc(fused[#loc268, #loc269])
#loc663 = loc(fused[#loc270, #loc271])
#loc664 = loc(fused[#loc272, #loc264])
#loc665 = loc(fused[#loc276, #loc277])
#loc666 = loc(fused[#loc280, #loc281])
#loc667 = loc(fused[#loc282, #loc283])
#loc668 = loc(fused[#loc284, #loc285])
#loc669 = loc(fused[#loc287, #loc288])
#loc670 = loc(fused[#loc289, #loc283])
#loc671 = loc(fused[#loc293, #loc291])
#loc672 = loc(fused[#loc296, #loc297])
#loc673 = loc(fused[#loc299, #loc300])
#loc674 = loc(fused[#loc301, #loc302])
#loc675 = loc(fused[#loc303, #loc300])
#loc676 = loc(fused[#loc306, #loc307])
#loc677 = loc(fused[#loc308, #loc309])
#loc678 = loc(fused[#loc310, #loc311])
#loc679 = loc(fused[#loc312, #loc313])
#loc680 = loc(fused[#loc314, #loc315])
#loc681 = loc(fused[#loc316, #loc317])
#loc682 = loc(fused[#loc318, #loc319])
#loc683 = loc(fused[#loc324, #loc325])
#loc684 = loc(fused[#loc326, #loc327])
#loc685 = loc(fused[#loc328, #loc329])
#loc686 = loc(fused[#loc330, #loc327])
#loc687 = loc(fused[#loc332, #loc333])
#loc688 = loc(fused[#loc335, #loc336])
#loc689 = loc(fused[#loc337, #loc338])
#loc690 = loc(fused[#loc340, #loc339])
#loc691 = loc(fused[#loc343, #loc344])
#loc692 = loc(fused[#loc347, #loc348])
#loc693 = loc(fused[#loc349, #loc350])
#loc694 = loc(fused[#loc352, #loc353])
#loc695 = loc(fused[#loc354, #loc355])
#loc696 = loc(fused[#loc356, #loc357])
#loc697 = loc(fused[#loc358, #loc350])
#loc698 = loc(fused[#loc362, #loc363])
#loc699 = loc(fused[#loc366, #loc367])
#loc700 = loc(fused[#loc368, #loc369])
#loc701 = loc(fused[#loc370, #loc371])
#loc702 = loc(fused[#loc373, #loc374])
#loc703 = loc(fused[#loc375, #loc369])
#loc704 = loc(fused[#loc379, #loc377])
#loc705 = loc(fused[#loc382, #loc383])
#loc706 = loc(fused[#loc385, #loc386])
#loc707 = loc(fused[#loc387, #loc388])
#loc708 = loc(fused[#loc389, #loc386])
#loc709 = loc(fused[#loc392, #loc393])
#loc710 = loc(fused[#loc394, #loc395])
#loc711 = loc(fused[#loc396, #loc397, #loc398, #loc393])
#loc712 = loc(fused[#loc399, #loc400])
#loc713 = loc(fused[#loc401, #loc402])
#loc714 = loc(fused[#loc403, #loc404])
#loc715 = loc(fused[#loc405, #loc406])
#loc716 = loc(fused[#loc407, #loc408])
#loc717 = loc(fused[#loc410, #loc412])
#loc718 = loc(fused[#loc413, #loc414, #loc415, #loc406])
#loc719 = loc(fused[#loc418, #loc416])
#loc720 = loc(fused[#loc419, #loc420])
#loc721 = loc(fused[#loc422, #loc421])
#loc722 = loc(fused[#loc423, #loc424])
#loc723 = loc(fused[#loc426, #loc420])
#loc724 = loc(fused[#loc431, #loc430])
#loc725 = loc(fused[#loc434, #loc435])
#loc726 = loc(fused[#loc436, #loc437])
#loc727 = loc(fused[#loc438, #loc439])
#loc728 = loc(fused[#loc440, #loc441])
#loc729 = loc(fused[#loc442, #loc443])
#loc730 = loc(fused[#loc445, #loc447])
#loc731 = loc(fused[#loc448, #loc449, #loc450, #loc441])
#loc732 = loc(fused[#loc453, #loc451])
#loc733 = loc(fused[#loc454, #loc455])
#loc734 = loc(fused[#loc457, #loc456])
#loc735 = loc(fused[#loc458, #loc459])
#loc736 = loc(fused[#loc461, #loc455])
#loc737 = loc(fused[#loc466, #loc465])
#loc738 = loc(fused[#loc469, #loc470])
#loc739 = loc(fused[#loc471, #loc472])
#loc740 = loc(fused[#loc475, #loc473])
#loc741 = loc(fused[#loc476, #loc477])
#loc742 = loc(fused[#loc478, #loc479])
#loc743 = loc(fused[#loc480, #loc481, #loc482, #loc477])
#loc744 = loc(fused[#loc484, #loc483])
#loc745 = loc(fused[#loc486, #loc485])
#loc746 = loc(fused[#loc487, #loc488])
#loc747 = loc(fused[#loc489, #loc490])
#loc748 = loc(fused[#loc491, #loc492, #loc493, #loc488])
#loc749 = loc(fused[#loc494, #loc495])
#loc750 = loc(fused[#loc496, #loc497])
#loc751 = loc(fused[#loc498, #loc499])
#loc752 = loc(fused[#loc500, #loc501])
#loc753 = loc(fused[#loc502, #loc503])
#loc754 = loc(fused[#loc504, #loc505, #loc506, #loc501])
#loc755 = loc(fused[#loc509, #loc507])
#loc756 = loc(fused[#loc510, #loc511])
#loc757 = loc(fused[#loc513, #loc512])
#loc758 = loc(fused[#loc514, #loc515])
#loc759 = loc(fused[#loc517, #loc511])
#loc760 = loc(fused[#loc522, #loc521])
#loc761 = loc(fused[#loc525, #loc526])
#loc762 = loc(fused[#loc527, #loc528])
#loc763 = loc(fused[#loc529, #loc530])
#loc764 = loc(fused[#loc531, #loc532])
#loc765 = loc(fused[#loc533, #loc534])
#loc766 = loc(fused[#loc535, #loc536, #loc537, #loc532])
#loc767 = loc(fused[#loc540, #loc538])
#loc768 = loc(fused[#loc541, #loc542])
#loc769 = loc(fused[#loc544, #loc543])
#loc770 = loc(fused[#loc545, #loc546])
#loc771 = loc(fused[#loc548, #loc542])
#loc772 = loc(fused[#loc553, #loc552])
