!s32i = !cir.int<s, 32>
!s8i = !cir.int<s, 8>
!u64i = !cir.int<u, 64>
!u8i = !cir.int<u, 8>
!void = !cir.void
#fn_attr = #cir<extra({inline = #cir.inline<no>, nothrow = #cir.nothrow, optnone = #cir.optnone})>
module @"/home/ladisgin/git_proj/test_projects/juliet-c/testcases/CWE121_Stack_Based_Buffer_Overflow/s01/CWE121_Stack_Based_Buffer_Overflow__CWE131_memcpy_06.c" attributes {cir.lang = #cir.lang<c>, cir.sob = #cir.signed_overflow_behavior<undefined>, cir.triple = "x86_64-unknown-linux-gnu", dlti.dl_spec = #dlti.dl_spec<#dlti.dl_entry<f64, dense<64> : vector<2xi64>>, #dlti.dl_entry<f16, dense<16> : vector<2xi64>>, #dlti.dl_entry<i16, dense<16> : vector<2xi64>>, #dlti.dl_entry<i32, dense<32> : vector<2xi64>>, #dlti.dl_entry<!llvm.ptr<272>, dense<64> : vector<4xi64>>, #dlti.dl_entry<i64, dense<64> : vector<2xi64>>, #dlti.dl_entry<!llvm.ptr<270>, dense<32> : vector<4xi64>>, #dlti.dl_entry<f128, dense<128> : vector<2xi64>>, #dlti.dl_entry<!llvm.ptr<271>, dense<32> : vector<4xi64>>, #dlti.dl_entry<f80, dense<128> : vector<2xi64>>, #dlti.dl_entry<i128, dense<128> : vector<2xi64>>, #dlti.dl_entry<i8, dense<8> : vector<2xi64>>, #dlti.dl_entry<i1, dense<8> : vector<2xi64>>, #dlti.dl_entry<!llvm.ptr, dense<64> : vector<4xi64>>, #dlti.dl_entry<"dlti.endianness", "little">, #dlti.dl_entry<"dlti.stack_alignment", 128 : i64>>, llvm.data_layout = "e-m:e-p270:32:32-p271:32:32-p272:64:64-i64:64-i128:128-f80:128-n8:16:32:64-S128"} {
  cir.func private  @printIntLine(!s32i) loc(#loc102)
  cir.func no_proto  @CWE121_Stack_Based_Buffer_Overflow__CWE131_memcpy_06_bad() extra(#fn_attr) {
    %0 = cir.alloca !cir.ptr<!s32i>, !cir.ptr<!cir.ptr<!s32i>>, ["data"] {alignment = 8 : i64} loc(#loc104)
    %1 = cir.const #cir.ptr<null> : !cir.ptr<!s32i> loc(#loc7)
    cir.store %1, %0 : !cir.ptr<!s32i>, !cir.ptr<!cir.ptr<!s32i>> loc(#loc105)
    cir.scope {
      %2 = cir.const #cir.int<5> : !s32i loc(#loc11)
      %3 = cir.const #cir.int<5> : !s32i loc(#loc12)
      %4 = cir.cmp(eq, %2, %3) : !s32i, !s32i loc(#loc107)
      %5 = cir.cast(int_to_bool, %4 : !s32i), !cir.bool loc(#loc13)
      cir.if %5 {
        %6 = cir.const #cir.int<10> : !s32i loc(#loc15)
        %7 = cir.cast(integral, %6 : !s32i), !u64i loc(#loc15)
        %8 = cir.alloca !u8i, !cir.ptr<!u8i>, %7 : !u64i, ["bi_alloca"] {alignment = 16 : i64} loc(#loc15)
        %9 = cir.cast(bitcast, %8 : !cir.ptr<!u8i>), !cir.ptr<!void> loc(#loc15)
        %10 = cir.cast(bitcast, %9 : !cir.ptr<!void>), !cir.ptr<!s32i> loc(#loc15)
        cir.store %10, %0 : !cir.ptr<!s32i>, !cir.ptr<!cir.ptr<!s32i>> loc(#loc109)
      } loc(#loc108)
    } loc(#loc106)
    cir.scope {
      %2 = cir.alloca !cir.array<!s32i x 10>, !cir.ptr<!cir.array<!s32i x 10>>, ["source"] {alignment = 16 : i64} loc(#loc111)
      %3 = cir.const #cir.zero : !cir.array<!s32i x 10> loc(#loc111)
      cir.store %3, %2 : !cir.array<!s32i x 10>, !cir.ptr<!cir.array<!s32i x 10>> loc(#loc111)
      %4 = cir.load %0 : !cir.ptr<!cir.ptr<!s32i>>, !cir.ptr<!s32i> loc(#loc21)
      %5 = cir.cast(bitcast, %4 : !cir.ptr<!s32i>), !cir.ptr<!void> loc(#loc21)
      %6 = cir.cast(array_to_ptrdecay, %2 : !cir.ptr<!cir.array<!s32i x 10>>), !cir.ptr<!s32i> loc(#loc22)
      %7 = cir.cast(bitcast, %6 : !cir.ptr<!s32i>), !cir.ptr<!void> loc(#loc22)
      %8 = cir.const #cir.int<10> : !s32i loc(#loc23)
      %9 = cir.cast(integral, %8 : !s32i), !u64i loc(#loc23)
      %10 = cir.const #cir.int<4> : !u64i loc(#loc112)
      %11 = cir.binop(mul, %9, %10) : !u64i loc(#loc113)
      cir.libc.memcpy %11 bytes from %7 to %5 : !u64i, !cir.ptr<!void> -> !cir.ptr<!void> loc(#loc114)
      %12 = cir.load %0 : !cir.ptr<!cir.ptr<!s32i>>, !cir.ptr<!s32i> loc(#loc28)
      %13 = cir.const #cir.int<0> : !s32i loc(#loc29)
      %14 = cir.ptr_stride(%12 : !cir.ptr<!s32i>, %13 : !s32i), !cir.ptr<!s32i> loc(#loc30)
      %15 = cir.load %14 : !cir.ptr<!s32i>, !s32i loc(#loc28)
      cir.call @printIntLine(%15) : (!s32i) -> () loc(#loc31)
    } loc(#loc110)
    cir.return loc(#loc4)
  } loc(#loc103)
  cir.func no_proto  @CWE121_Stack_Based_Buffer_Overflow__CWE131_memcpy_06_good() extra(#fn_attr) {
    %0 = cir.get_global @goodG2B1 : !cir.ptr<!cir.func<!void ()>> loc(#loc116)
    cir.call %0() : (!cir.ptr<!cir.func<!void ()>>) -> () loc(#loc34)
    %1 = cir.get_global @goodG2B2 : !cir.ptr<!cir.func<!void ()>> loc(#loc117)
    cir.call %1() : (!cir.ptr<!cir.func<!void ()>>) -> () loc(#loc36)
    cir.return loc(#loc33)
  } loc(#loc115)
  cir.func private  @printLine(!cir.ptr<!s8i>) loc(#loc118)
  cir.global "private"  constant internal dsolocal @".str" = #cir.const_array<"Benign, fixed string\00" : !cir.array<!s8i x 21>> : !cir.array<!s8i x 21> {alignment = 1 : i64} loc(#loc40)
  cir.func no_proto internal private  @goodG2B1() extra(#fn_attr) {
    %0 = cir.alloca !cir.ptr<!s32i>, !cir.ptr<!cir.ptr<!s32i>>, ["data"] {alignment = 8 : i64} loc(#loc120)
    %1 = cir.const #cir.ptr<null> : !cir.ptr<!s32i> loc(#loc45)
    cir.store %1, %0 : !cir.ptr<!s32i>, !cir.ptr<!cir.ptr<!s32i>> loc(#loc121)
    cir.scope {
      %2 = cir.const #cir.int<5> : !s32i loc(#loc49)
      %3 = cir.const #cir.int<5> : !s32i loc(#loc50)
      %4 = cir.cmp(ne, %2, %3) : !s32i, !s32i loc(#loc123)
      %5 = cir.cast(int_to_bool, %4 : !s32i), !cir.bool loc(#loc51)
      cir.if %5 {
        %6 = cir.get_global @".str" : !cir.ptr<!cir.array<!s8i x 21>> loc(#loc40)
        %7 = cir.cast(array_to_ptrdecay, %6 : !cir.ptr<!cir.array<!s8i x 21>>), !cir.ptr<!s8i> loc(#loc40)
        cir.call @printLine(%7) : (!cir.ptr<!s8i>) -> () loc(#loc55)
      } else {
        %6 = cir.const #cir.int<10> : !s32i loc(#loc56)
        %7 = cir.cast(integral, %6 : !s32i), !u64i loc(#loc56)
        %8 = cir.const #cir.int<4> : !u64i loc(#loc56)
        %9 = cir.binop(mul, %7, %8) : !u64i loc(#loc56)
        %10 = cir.alloca !u8i, !cir.ptr<!u8i>, %9 : !u64i, ["bi_alloca"] {alignment = 16 : i64} loc(#loc56)
        %11 = cir.cast(bitcast, %10 : !cir.ptr<!u8i>), !cir.ptr<!void> loc(#loc56)
        %12 = cir.cast(bitcast, %11 : !cir.ptr<!void>), !cir.ptr<!s32i> loc(#loc56)
        cir.store %12, %0 : !cir.ptr<!s32i>, !cir.ptr<!cir.ptr<!s32i>> loc(#loc125)
      } loc(#loc124)
    } loc(#loc122)
    cir.scope {
      %2 = cir.alloca !cir.array<!s32i x 10>, !cir.ptr<!cir.array<!s32i x 10>>, ["source"] {alignment = 16 : i64} loc(#loc127)
      %3 = cir.const #cir.zero : !cir.array<!s32i x 10> loc(#loc127)
      cir.store %3, %2 : !cir.array<!s32i x 10>, !cir.ptr<!cir.array<!s32i x 10>> loc(#loc127)
      %4 = cir.load %0 : !cir.ptr<!cir.ptr<!s32i>>, !cir.ptr<!s32i> loc(#loc62)
      %5 = cir.cast(bitcast, %4 : !cir.ptr<!s32i>), !cir.ptr<!void> loc(#loc62)
      %6 = cir.cast(array_to_ptrdecay, %2 : !cir.ptr<!cir.array<!s32i x 10>>), !cir.ptr<!s32i> loc(#loc63)
      %7 = cir.cast(bitcast, %6 : !cir.ptr<!s32i>), !cir.ptr<!void> loc(#loc63)
      %8 = cir.const #cir.int<10> : !s32i loc(#loc64)
      %9 = cir.cast(integral, %8 : !s32i), !u64i loc(#loc64)
      %10 = cir.const #cir.int<4> : !u64i loc(#loc128)
      %11 = cir.binop(mul, %9, %10) : !u64i loc(#loc129)
      cir.libc.memcpy %11 bytes from %7 to %5 : !u64i, !cir.ptr<!void> -> !cir.ptr<!void> loc(#loc130)
      %12 = cir.load %0 : !cir.ptr<!cir.ptr<!s32i>>, !cir.ptr<!s32i> loc(#loc69)
      %13 = cir.const #cir.int<0> : !s32i loc(#loc70)
      %14 = cir.ptr_stride(%12 : !cir.ptr<!s32i>, %13 : !s32i), !cir.ptr<!s32i> loc(#loc71)
      %15 = cir.load %14 : !cir.ptr<!s32i>, !s32i loc(#loc69)
      cir.call @printIntLine(%15) : (!s32i) -> () loc(#loc72)
    } loc(#loc126)
    cir.return loc(#loc42)
  } loc(#loc119)
  cir.func no_proto internal private  @goodG2B2() extra(#fn_attr) {
    %0 = cir.alloca !cir.ptr<!s32i>, !cir.ptr<!cir.ptr<!s32i>>, ["data"] {alignment = 8 : i64} loc(#loc132)
    %1 = cir.const #cir.ptr<null> : !cir.ptr<!s32i> loc(#loc77)
    cir.store %1, %0 : !cir.ptr<!s32i>, !cir.ptr<!cir.ptr<!s32i>> loc(#loc133)
    cir.scope {
      %2 = cir.const #cir.int<5> : !s32i loc(#loc81)
      %3 = cir.const #cir.int<5> : !s32i loc(#loc82)
      %4 = cir.cmp(eq, %2, %3) : !s32i, !s32i loc(#loc135)
      %5 = cir.cast(int_to_bool, %4 : !s32i), !cir.bool loc(#loc83)
      cir.if %5 {
        %6 = cir.const #cir.int<10> : !s32i loc(#loc85)
        %7 = cir.cast(integral, %6 : !s32i), !u64i loc(#loc85)
        %8 = cir.const #cir.int<4> : !u64i loc(#loc85)
        %9 = cir.binop(mul, %7, %8) : !u64i loc(#loc85)
        %10 = cir.alloca !u8i, !cir.ptr<!u8i>, %9 : !u64i, ["bi_alloca"] {alignment = 16 : i64} loc(#loc85)
        %11 = cir.cast(bitcast, %10 : !cir.ptr<!u8i>), !cir.ptr<!void> loc(#loc85)
        %12 = cir.cast(bitcast, %11 : !cir.ptr<!void>), !cir.ptr<!s32i> loc(#loc85)
        cir.store %12, %0 : !cir.ptr<!s32i>, !cir.ptr<!cir.ptr<!s32i>> loc(#loc137)
      } loc(#loc136)
    } loc(#loc134)
    cir.scope {
      %2 = cir.alloca !cir.array<!s32i x 10>, !cir.ptr<!cir.array<!s32i x 10>>, ["source"] {alignment = 16 : i64} loc(#loc139)
      %3 = cir.const #cir.zero : !cir.array<!s32i x 10> loc(#loc139)
      cir.store %3, %2 : !cir.array<!s32i x 10>, !cir.ptr<!cir.array<!s32i x 10>> loc(#loc139)
      %4 = cir.load %0 : !cir.ptr<!cir.ptr<!s32i>>, !cir.ptr<!s32i> loc(#loc91)
      %5 = cir.cast(bitcast, %4 : !cir.ptr<!s32i>), !cir.ptr<!void> loc(#loc91)
      %6 = cir.cast(array_to_ptrdecay, %2 : !cir.ptr<!cir.array<!s32i x 10>>), !cir.ptr<!s32i> loc(#loc92)
      %7 = cir.cast(bitcast, %6 : !cir.ptr<!s32i>), !cir.ptr<!void> loc(#loc92)
      %8 = cir.const #cir.int<10> : !s32i loc(#loc93)
      %9 = cir.cast(integral, %8 : !s32i), !u64i loc(#loc93)
      %10 = cir.const #cir.int<4> : !u64i loc(#loc140)
      %11 = cir.binop(mul, %9, %10) : !u64i loc(#loc141)
      cir.libc.memcpy %11 bytes from %7 to %5 : !u64i, !cir.ptr<!void> -> !cir.ptr<!void> loc(#loc142)
      %12 = cir.load %0 : !cir.ptr<!cir.ptr<!s32i>>, !cir.ptr<!s32i> loc(#loc98)
      %13 = cir.const #cir.int<0> : !s32i loc(#loc99)
      %14 = cir.ptr_stride(%12 : !cir.ptr<!s32i>, %13 : !s32i), !cir.ptr<!s32i> loc(#loc100)
      %15 = cir.load %14 : !cir.ptr<!s32i>, !s32i loc(#loc98)
      cir.call @printIntLine(%15) : (!s32i) -> () loc(#loc101)
    } loc(#loc138)
    cir.return loc(#loc74)
  } loc(#loc131)
} loc(#loc)
#loc = loc("/home/ladisgin/git_proj/test_projects/juliet-c/testcases/CWE121_Stack_Based_Buffer_Overflow/s01/CWE121_Stack_Based_Buffer_Overflow__CWE131_memcpy_06.c":0:0)
#loc1 = loc("../../../testcasesupport/std_testcase_io.h":18:1)
#loc2 = loc("../../../testcasesupport/std_testcase_io.h":18:33)
#loc3 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE131_memcpy_06.c":25:1)
#loc4 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE131_memcpy_06.c":40:1)
#loc5 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE131_memcpy_06.c":27:5)
#loc6 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE131_memcpy_06.c":27:11)
#loc7 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE131_memcpy_06.c":28:12)
#loc8 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE131_memcpy_06.c":28:5)
#loc9 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE131_memcpy_06.c":29:5)
#loc10 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE131_memcpy_06.c":33:5)
#loc11 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE131_memcpy_06.c":29:8)
#loc12 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE131_memcpy_06.c":29:27)
#loc13 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE131_memcpy_06.c":29:25)
#loc14 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE131_memcpy_06.c":30:5)
#loc15 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE131_memcpy_06.c":32:23)
#loc16 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE131_memcpy_06.c":32:9)
#loc17 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE131_memcpy_06.c":34:5)
#loc18 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE131_memcpy_06.c":39:5)
#loc19 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE131_memcpy_06.c":35:9)
#loc20 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE131_memcpy_06.c":35:28)
#loc21 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE131_memcpy_06.c":37:16)
#loc22 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE131_memcpy_06.c":37:22)
#loc23 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE131_memcpy_06.c":37:30)
#loc24 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE131_memcpy_06.c":37:33)
#loc25 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE131_memcpy_06.c":37:43)
#loc26 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE131_memcpy_06.c":37:9)
#loc27 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE131_memcpy_06.c":37:44)
#loc28 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE131_memcpy_06.c":38:22)
#loc29 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE131_memcpy_06.c":38:27)
#loc30 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE131_memcpy_06.c":38:28)
#loc31 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE131_memcpy_06.c":38:9)
#loc32 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE131_memcpy_06.c":87:1)
#loc33 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE131_memcpy_06.c":91:1)
#loc34 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE131_memcpy_06.c":89:5)
#loc35 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE131_memcpy_06.c":89:14)
#loc36 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE131_memcpy_06.c":90:5)
#loc37 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE131_memcpy_06.c":90:14)
#loc38 = loc("../../../testcasesupport/std_testcase_io.h":14:1)
#loc39 = loc("../../../testcasesupport/std_testcase_io.h":14:33)
#loc40 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE131_memcpy_06.c":54:19)
#loc41 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE131_memcpy_06.c":47:1)
#loc42 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE131_memcpy_06.c":67:1)
#loc43 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE131_memcpy_06.c":49:5)
#loc44 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE131_memcpy_06.c":49:11)
#loc45 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE131_memcpy_06.c":50:12)
#loc46 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE131_memcpy_06.c":50:5)
#loc47 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE131_memcpy_06.c":51:5)
#loc48 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE131_memcpy_06.c":60:5)
#loc49 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE131_memcpy_06.c":51:8)
#loc50 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE131_memcpy_06.c":51:27)
#loc51 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE131_memcpy_06.c":51:25)
#loc52 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE131_memcpy_06.c":52:5)
#loc53 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE131_memcpy_06.c":55:5)
#loc54 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE131_memcpy_06.c":57:5)
#loc55 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE131_memcpy_06.c":54:9)
#loc56 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE131_memcpy_06.c":59:23)
#loc57 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE131_memcpy_06.c":59:9)
#loc58 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE131_memcpy_06.c":61:5)
#loc59 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE131_memcpy_06.c":66:5)
#loc60 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE131_memcpy_06.c":62:9)
#loc61 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE131_memcpy_06.c":62:28)
#loc62 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE131_memcpy_06.c":64:16)
#loc63 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE131_memcpy_06.c":64:22)
#loc64 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE131_memcpy_06.c":64:30)
#loc65 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE131_memcpy_06.c":64:33)
#loc66 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE131_memcpy_06.c":64:43)
#loc67 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE131_memcpy_06.c":64:9)
#loc68 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE131_memcpy_06.c":64:44)
#loc69 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE131_memcpy_06.c":65:22)
#loc70 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE131_memcpy_06.c":65:27)
#loc71 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE131_memcpy_06.c":65:28)
#loc72 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE131_memcpy_06.c":65:9)
#loc73 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE131_memcpy_06.c":70:1)
#loc74 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE131_memcpy_06.c":85:1)
#loc75 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE131_memcpy_06.c":72:5)
#loc76 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE131_memcpy_06.c":72:11)
#loc77 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE131_memcpy_06.c":73:12)
#loc78 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE131_memcpy_06.c":73:5)
#loc79 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE131_memcpy_06.c":74:5)
#loc80 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE131_memcpy_06.c":78:5)
#loc81 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE131_memcpy_06.c":74:8)
#loc82 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE131_memcpy_06.c":74:27)
#loc83 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE131_memcpy_06.c":74:25)
#loc84 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE131_memcpy_06.c":75:5)
#loc85 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE131_memcpy_06.c":77:23)
#loc86 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE131_memcpy_06.c":77:9)
#loc87 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE131_memcpy_06.c":79:5)
#loc88 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE131_memcpy_06.c":84:5)
#loc89 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE131_memcpy_06.c":80:9)
#loc90 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE131_memcpy_06.c":80:28)
#loc91 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE131_memcpy_06.c":82:16)
#loc92 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE131_memcpy_06.c":82:22)
#loc93 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE131_memcpy_06.c":82:30)
#loc94 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE131_memcpy_06.c":82:33)
#loc95 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE131_memcpy_06.c":82:43)
#loc96 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE131_memcpy_06.c":82:9)
#loc97 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE131_memcpy_06.c":82:44)
#loc98 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE131_memcpy_06.c":83:22)
#loc99 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE131_memcpy_06.c":83:27)
#loc100 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE131_memcpy_06.c":83:28)
#loc101 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE131_memcpy_06.c":83:9)
#loc102 = loc(fused[#loc1, #loc2])
#loc103 = loc(fused[#loc3, #loc4])
#loc104 = loc(fused[#loc5, #loc6])
#loc105 = loc(fused[#loc8, #loc7])
#loc106 = loc(fused[#loc9, #loc10])
#loc107 = loc(fused[#loc11, #loc12])
#loc108 = loc(fused[#loc14, #loc10])
#loc109 = loc(fused[#loc16, #loc15])
#loc110 = loc(fused[#loc17, #loc18])
#loc111 = loc(fused[#loc19, #loc20])
#loc112 = loc(fused[#loc24, #loc25])
#loc113 = loc(fused[#loc23, #loc25])
#loc114 = loc(fused[#loc26, #loc27])
#loc115 = loc(fused[#loc32, #loc33])
#loc116 = loc(fused[#loc34, #loc35])
#loc117 = loc(fused[#loc36, #loc37])
#loc118 = loc(fused[#loc38, #loc39])
#loc119 = loc(fused[#loc41, #loc42])
#loc120 = loc(fused[#loc43, #loc44])
#loc121 = loc(fused[#loc46, #loc45])
#loc122 = loc(fused[#loc47, #loc48])
#loc123 = loc(fused[#loc49, #loc50])
#loc124 = loc(fused[#loc52, #loc53, #loc54, #loc48])
#loc125 = loc(fused[#loc57, #loc56])
#loc126 = loc(fused[#loc58, #loc59])
#loc127 = loc(fused[#loc60, #loc61])
#loc128 = loc(fused[#loc65, #loc66])
#loc129 = loc(fused[#loc64, #loc66])
#loc130 = loc(fused[#loc67, #loc68])
#loc131 = loc(fused[#loc73, #loc74])
#loc132 = loc(fused[#loc75, #loc76])
#loc133 = loc(fused[#loc78, #loc77])
#loc134 = loc(fused[#loc79, #loc80])
#loc135 = loc(fused[#loc81, #loc82])
#loc136 = loc(fused[#loc84, #loc80])
#loc137 = loc(fused[#loc86, #loc85])
#loc138 = loc(fused[#loc87, #loc88])
#loc139 = loc(fused[#loc89, #loc90])
#loc140 = loc(fused[#loc94, #loc95])
#loc141 = loc(fused[#loc93, #loc95])
#loc142 = loc(fused[#loc96, #loc97])
