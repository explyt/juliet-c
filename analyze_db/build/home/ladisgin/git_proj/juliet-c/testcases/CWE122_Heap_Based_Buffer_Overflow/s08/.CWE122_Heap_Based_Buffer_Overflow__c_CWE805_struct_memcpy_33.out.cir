!s32i = !cir.int<s, 32>
!s64i = !cir.int<s, 64>
!s8i = !cir.int<s, 8>
!u32i = !cir.int<u, 32>
!u64i = !cir.int<u, 64>
!void = !cir.void
#fn_attr = #cir<extra({nothrow = #cir.nothrow})>
#fn_attr1 = #cir<extra({inline = #cir.inline<no>, optnone = #cir.optnone})>
#loc148 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_struct_memcpy_33.cpp":105:10)
#loc149 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_struct_memcpy_33.cpp":105:14)
#loc150 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_struct_memcpy_33.cpp":105:20)
#loc151 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_struct_memcpy_33.cpp":105:32)
!ty__twoIntsStruct = !cir.struct<struct "_twoIntsStruct" {!s32i, !s32i} #cir.record.decl.ast>
#loc225 = loc(fused[#loc148, #loc149])
#loc226 = loc(fused[#loc150, #loc151])
module @"/home/ladisgin/git_proj/juliet-c/testcases/CWE122_Heap_Based_Buffer_Overflow/s08/CWE122_Heap_Based_Buffer_Overflow__c_CWE805_struct_memcpy_33.cpp" attributes {cir.lang = #cir.lang<cxx>, cir.sob = #cir.signed_overflow_behavior<undefined>, cir.triple = "x86_64-unknown-linux-gnu", dlti.dl_spec = #dlti.dl_spec<i32 = dense<32> : vector<2xi64>, i8 = dense<8> : vector<2xi64>, i16 = dense<16> : vector<2xi64>, !llvm.ptr<271> = dense<32> : vector<4xi64>, !llvm.ptr<272> = dense<64> : vector<4xi64>, f16 = dense<16> : vector<2xi64>, f128 = dense<128> : vector<2xi64>, !llvm.ptr<270> = dense<32> : vector<4xi64>, f64 = dense<64> : vector<2xi64>, i128 = dense<128> : vector<2xi64>, i64 = dense<64> : vector<2xi64>, !llvm.ptr = dense<64> : vector<4xi64>, i1 = dense<8> : vector<2xi64>, f80 = dense<128> : vector<2xi64>, "dlti.endianness" = "little", "dlti.stack_alignment" = 128 : i64>} {
  cir.func private @malloc(!u64i) -> !cir.ptr<!void> extra(#fn_attr) loc(#loc164)
  cir.func private @exit(!s32i) extra(#fn_attr) loc(#loc165)
  cir.func private @printStructLine(!cir.ptr<!ty__twoIntsStruct>) loc(#loc166)
  cir.func private @free(!cir.ptr<!void>) extra(#fn_attr) loc(#loc167)
  cir.func @_ZN60CWE122_Heap_Based_Buffer_Overflow__c_CWE805_struct_memcpy_333badEv() extra(#fn_attr1) {
    %0 = cir.alloca !cir.ptr<!ty__twoIntsStruct>, !cir.ptr<!cir.ptr<!ty__twoIntsStruct>>, ["data", init] {alignment = 8 : i64} loc(#loc169)
    %1 = cir.alloca !cir.array<!ty__twoIntsStruct x 100>, !cir.ptr<!cir.array<!ty__twoIntsStruct x 100>>, ["source"] {alignment = 16 : i64} loc(#loc170)
    %2 = cir.alloca !u64i, !cir.ptr<!u64i>, ["i"] {alignment = 8 : i64} loc(#loc171)
    %3 = cir.alloca !cir.ptr<!ty__twoIntsStruct>, !cir.ptr<!cir.ptr<!ty__twoIntsStruct>>, ["data"] {alignment = 8 : i64} loc(#loc172)
    %4 = cir.alloca !cir.ptr<!cir.ptr<!ty__twoIntsStruct>>, !cir.ptr<!cir.ptr<!cir.ptr<!ty__twoIntsStruct>>>, ["dataRef", init, const] {alignment = 8 : i64} loc(#loc173)
    cir.store %3, %4 : !cir.ptr<!cir.ptr<!ty__twoIntsStruct>>, !cir.ptr<!cir.ptr<!cir.ptr<!ty__twoIntsStruct>>> loc(#loc20)
    %5 = cir.const #cir.ptr<null> : !cir.ptr<!ty__twoIntsStruct> loc(#loc21)
    cir.store %5, %3 : !cir.ptr<!ty__twoIntsStruct>, !cir.ptr<!cir.ptr<!ty__twoIntsStruct>> loc(#loc174)
    %6 = cir.get_global @malloc : !cir.ptr<!cir.func<!cir.ptr<!void> (!u64i)>> loc(#loc23)
    %7 = cir.const #cir.int<50> : !s32i loc(#loc24)
    %8 = cir.cast(integral, %7 : !s32i), !u64i loc(#loc24)
    %9 = cir.const #cir.int<8> : !u64i loc(#loc175)
    %10 = cir.binop(mul, %8, %9) : !u64i loc(#loc176)
    %11 = cir.call @malloc(%10) : (!u64i) -> !cir.ptr<!void> extra(#fn_attr) loc(#loc23)
    %12 = cir.cast(bitcast, %11 : !cir.ptr<!void>), !cir.ptr<!ty__twoIntsStruct> loc(#loc177)
    cir.store %12, %3 : !cir.ptr<!ty__twoIntsStruct>, !cir.ptr<!cir.ptr<!ty__twoIntsStruct>> loc(#loc178)
    cir.br ^bb1 loc(#loc179)
  ^bb1:  // pred: ^bb0
    %13 = cir.load %3 : !cir.ptr<!cir.ptr<!ty__twoIntsStruct>>, !cir.ptr<!ty__twoIntsStruct> loc(#loc31)
    %14 = cir.const #cir.ptr<null> : !cir.ptr<!ty__twoIntsStruct> loc(#loc32)
    %15 = cir.cmp(eq, %13, %14) : !cir.ptr<!ty__twoIntsStruct>, !cir.bool loc(#loc180)
    cir.brcond %15 ^bb2, ^bb3 loc(#loc181)
  ^bb2:  // pred: ^bb1
    %16 = cir.get_global @exit : !cir.ptr<!cir.func<!void (!s32i)>> loc(#loc34)
    %17 = cir.const #cir.int<1> : !s32i loc(#loc35)
    %18 = cir.unary(minus, %17) : !s32i, !s32i loc(#loc36)
    cir.call @exit(%18) : (!s32i) -> () extra(#fn_attr) loc(#loc34)
    cir.br ^bb3 loc(#loc30)
  ^bb3:  // 2 preds: ^bb1, ^bb2
    cir.br ^bb4 loc(#loc30)
  ^bb4:  // pred: ^bb3
    cir.br ^bb5 loc(#loc182)
  ^bb5:  // pred: ^bb4
    %19 = cir.load %4 : !cir.ptr<!cir.ptr<!cir.ptr<!ty__twoIntsStruct>>>, !cir.ptr<!cir.ptr<!ty__twoIntsStruct>> loc(#loc12)
    %20 = cir.load %19 : !cir.ptr<!cir.ptr<!ty__twoIntsStruct>>, !cir.ptr<!ty__twoIntsStruct> loc(#loc12)
    cir.store %20, %0 : !cir.ptr<!ty__twoIntsStruct>, !cir.ptr<!cir.ptr<!ty__twoIntsStruct>> loc(#loc169)
    cir.br ^bb6 loc(#loc183)
  ^bb6:  // pred: ^bb5
    cir.br ^bb7 loc(#loc184)
  ^bb7:  // pred: ^bb6
    cir.br ^bb8 loc(#loc185)
  ^bb8:  // pred: ^bb7
    %21 = cir.const #cir.int<0> : !s32i loc(#loc45)
    %22 = cir.cast(integral, %21 : !s32i), !u64i loc(#loc45)
    cir.store %22, %2 : !u64i, !cir.ptr<!u64i> loc(#loc186)
    cir.br ^bb9 loc(#loc185)
  ^bb9:  // 2 preds: ^bb8, ^bb11
    %23 = cir.load %2 : !cir.ptr<!u64i>, !u64i loc(#loc47)
    %24 = cir.const #cir.int<100> : !s32i loc(#loc48)
    %25 = cir.cast(integral, %24 : !s32i), !u64i loc(#loc48)
    %26 = cir.cmp(lt, %23, %25) : !u64i, !cir.bool loc(#loc187)
    cir.brcond %26 ^bb10, ^bb12 loc(#loc187)
  ^bb10:  // pred: ^bb9
    %27 = cir.const #cir.int<0> : !s32i loc(#loc49)
    %28 = cir.load %2 : !cir.ptr<!u64i>, !u64i loc(#loc50)
    %29 = cir.cast(array_to_ptrdecay, %1 : !cir.ptr<!cir.array<!ty__twoIntsStruct x 100>>), !cir.ptr<!ty__twoIntsStruct> loc(#loc51)
    %30 = cir.ptr_stride(%29 : !cir.ptr<!ty__twoIntsStruct>, %28 : !u64i), !cir.ptr<!ty__twoIntsStruct> loc(#loc51)
    %31 = cir.get_member %30[0] {name = "intOne"} : !cir.ptr<!ty__twoIntsStruct> -> !cir.ptr<!s32i> loc(#loc52)
    cir.store %27, %31 : !s32i, !cir.ptr<!s32i> loc(#loc188)
    %32 = cir.const #cir.int<0> : !s32i loc(#loc53)
    %33 = cir.load %2 : !cir.ptr<!u64i>, !u64i loc(#loc54)
    %34 = cir.cast(array_to_ptrdecay, %1 : !cir.ptr<!cir.array<!ty__twoIntsStruct x 100>>), !cir.ptr<!ty__twoIntsStruct> loc(#loc55)
    %35 = cir.ptr_stride(%34 : !cir.ptr<!ty__twoIntsStruct>, %33 : !u64i), !cir.ptr<!ty__twoIntsStruct> loc(#loc55)
    %36 = cir.get_member %35[1] {name = "intTwo"} : !cir.ptr<!ty__twoIntsStruct> -> !cir.ptr<!s32i> loc(#loc56)
    cir.store %32, %36 : !s32i, !cir.ptr<!s32i> loc(#loc189)
    cir.br ^bb11 loc(#loc44)
  ^bb11:  // pred: ^bb10
    %37 = cir.load %2 : !cir.ptr<!u64i>, !u64i loc(#loc57)
    %38 = cir.unary(inc, %37) : !u64i, !u64i loc(#loc58)
    cir.store %38, %2 : !u64i, !cir.ptr<!u64i> loc(#loc190)
    cir.br ^bb9 loc(#loc185)
  ^bb12:  // pred: ^bb9
    cir.br ^bb13 loc(#loc44)
  ^bb13:  // pred: ^bb12
    cir.br ^bb14 loc(#loc42)
  ^bb14:  // pred: ^bb13
    %39 = cir.load %0 : !cir.ptr<!cir.ptr<!ty__twoIntsStruct>>, !cir.ptr<!ty__twoIntsStruct> loc(#loc59)
    %40 = cir.cast(bitcast, %39 : !cir.ptr<!ty__twoIntsStruct>), !cir.ptr<!void> loc(#loc59)
    %41 = cir.cast(array_to_ptrdecay, %1 : !cir.ptr<!cir.array<!ty__twoIntsStruct x 100>>), !cir.ptr<!ty__twoIntsStruct> loc(#loc60)
    %42 = cir.cast(bitcast, %41 : !cir.ptr<!ty__twoIntsStruct>), !cir.ptr<!void> loc(#loc60)
    %43 = cir.const #cir.int<100> : !s32i loc(#loc61)
    %44 = cir.cast(integral, %43 : !s32i), !u64i loc(#loc61)
    %45 = cir.const #cir.int<8> : !u64i loc(#loc191)
    %46 = cir.binop(mul, %44, %45) : !u64i loc(#loc192)
    cir.libc.memcpy %46 bytes from %42 to %40 : !u64i, !cir.ptr<!void> -> !cir.ptr<!void> loc(#loc193)
    %47 = cir.load %0 : !cir.ptr<!cir.ptr<!ty__twoIntsStruct>>, !cir.ptr<!ty__twoIntsStruct> loc(#loc66)
    %48 = cir.const #cir.int<0> : !s32i loc(#loc67)
    %49 = cir.ptr_stride(%47 : !cir.ptr<!ty__twoIntsStruct>, %48 : !s32i), !cir.ptr<!ty__twoIntsStruct> loc(#loc68)
    cir.call @printStructLine(%49) : (!cir.ptr<!ty__twoIntsStruct>) -> () loc(#loc69)
    %50 = cir.load %0 : !cir.ptr<!cir.ptr<!ty__twoIntsStruct>>, !cir.ptr<!ty__twoIntsStruct> loc(#loc70)
    %51 = cir.cast(bitcast, %50 : !cir.ptr<!ty__twoIntsStruct>), !cir.ptr<!void> loc(#loc70)
    cir.call @free(%51) : (!cir.ptr<!void>) -> () extra(#fn_attr) loc(#loc71)
    cir.br ^bb15 loc(#loc40)
  ^bb15:  // pred: ^bb14
    cir.br ^bb16 loc(#loc38)
  ^bb16:  // pred: ^bb15
    cir.return loc(#loc10)
  } loc(#loc168)
  cir.func internal private @_ZN60CWE122_Heap_Based_Buffer_Overflow__c_CWE805_struct_memcpy_33L7goodG2BEv() extra(#fn_attr1) {
    %0 = cir.alloca !cir.ptr<!ty__twoIntsStruct>, !cir.ptr<!cir.ptr<!ty__twoIntsStruct>>, ["data", init] {alignment = 8 : i64} loc(#loc195)
    %1 = cir.alloca !cir.array<!ty__twoIntsStruct x 100>, !cir.ptr<!cir.array<!ty__twoIntsStruct x 100>>, ["source"] {alignment = 16 : i64} loc(#loc196)
    %2 = cir.alloca !u64i, !cir.ptr<!u64i>, ["i"] {alignment = 8 : i64} loc(#loc197)
    %3 = cir.alloca !cir.ptr<!ty__twoIntsStruct>, !cir.ptr<!cir.ptr<!ty__twoIntsStruct>>, ["data"] {alignment = 8 : i64} loc(#loc198)
    %4 = cir.alloca !cir.ptr<!cir.ptr<!ty__twoIntsStruct>>, !cir.ptr<!cir.ptr<!cir.ptr<!ty__twoIntsStruct>>>, ["dataRef", init, const] {alignment = 8 : i64} loc(#loc199)
    cir.store %3, %4 : !cir.ptr<!cir.ptr<!ty__twoIntsStruct>>, !cir.ptr<!cir.ptr<!cir.ptr<!ty__twoIntsStruct>>> loc(#loc83)
    %5 = cir.const #cir.ptr<null> : !cir.ptr<!ty__twoIntsStruct> loc(#loc84)
    cir.store %5, %3 : !cir.ptr<!ty__twoIntsStruct>, !cir.ptr<!cir.ptr<!ty__twoIntsStruct>> loc(#loc200)
    %6 = cir.get_global @malloc : !cir.ptr<!cir.func<!cir.ptr<!void> (!u64i)>> loc(#loc86)
    %7 = cir.const #cir.int<100> : !s32i loc(#loc87)
    %8 = cir.cast(integral, %7 : !s32i), !u64i loc(#loc87)
    %9 = cir.const #cir.int<8> : !u64i loc(#loc201)
    %10 = cir.binop(mul, %8, %9) : !u64i loc(#loc202)
    %11 = cir.call @malloc(%10) : (!u64i) -> !cir.ptr<!void> extra(#fn_attr) loc(#loc86)
    %12 = cir.cast(bitcast, %11 : !cir.ptr<!void>), !cir.ptr<!ty__twoIntsStruct> loc(#loc203)
    cir.store %12, %3 : !cir.ptr<!ty__twoIntsStruct>, !cir.ptr<!cir.ptr<!ty__twoIntsStruct>> loc(#loc204)
    cir.br ^bb1 loc(#loc205)
  ^bb1:  // pred: ^bb0
    %13 = cir.load %3 : !cir.ptr<!cir.ptr<!ty__twoIntsStruct>>, !cir.ptr<!ty__twoIntsStruct> loc(#loc94)
    %14 = cir.const #cir.ptr<null> : !cir.ptr<!ty__twoIntsStruct> loc(#loc95)
    %15 = cir.cmp(eq, %13, %14) : !cir.ptr<!ty__twoIntsStruct>, !cir.bool loc(#loc206)
    cir.brcond %15 ^bb2, ^bb3 loc(#loc207)
  ^bb2:  // pred: ^bb1
    %16 = cir.get_global @exit : !cir.ptr<!cir.func<!void (!s32i)>> loc(#loc97)
    %17 = cir.const #cir.int<1> : !s32i loc(#loc98)
    %18 = cir.unary(minus, %17) : !s32i, !s32i loc(#loc99)
    cir.call @exit(%18) : (!s32i) -> () extra(#fn_attr) loc(#loc97)
    cir.br ^bb3 loc(#loc93)
  ^bb3:  // 2 preds: ^bb1, ^bb2
    cir.br ^bb4 loc(#loc93)
  ^bb4:  // pred: ^bb3
    cir.br ^bb5 loc(#loc208)
  ^bb5:  // pred: ^bb4
    %19 = cir.load %4 : !cir.ptr<!cir.ptr<!cir.ptr<!ty__twoIntsStruct>>>, !cir.ptr<!cir.ptr<!ty__twoIntsStruct>> loc(#loc75)
    %20 = cir.load %19 : !cir.ptr<!cir.ptr<!ty__twoIntsStruct>>, !cir.ptr<!ty__twoIntsStruct> loc(#loc75)
    cir.store %20, %0 : !cir.ptr<!ty__twoIntsStruct>, !cir.ptr<!cir.ptr<!ty__twoIntsStruct>> loc(#loc195)
    cir.br ^bb6 loc(#loc209)
  ^bb6:  // pred: ^bb5
    cir.br ^bb7 loc(#loc210)
  ^bb7:  // pred: ^bb6
    cir.br ^bb8 loc(#loc211)
  ^bb8:  // pred: ^bb7
    %21 = cir.const #cir.int<0> : !s32i loc(#loc108)
    %22 = cir.cast(integral, %21 : !s32i), !u64i loc(#loc108)
    cir.store %22, %2 : !u64i, !cir.ptr<!u64i> loc(#loc212)
    cir.br ^bb9 loc(#loc211)
  ^bb9:  // 2 preds: ^bb8, ^bb11
    %23 = cir.load %2 : !cir.ptr<!u64i>, !u64i loc(#loc110)
    %24 = cir.const #cir.int<100> : !s32i loc(#loc111)
    %25 = cir.cast(integral, %24 : !s32i), !u64i loc(#loc111)
    %26 = cir.cmp(lt, %23, %25) : !u64i, !cir.bool loc(#loc213)
    cir.brcond %26 ^bb10, ^bb12 loc(#loc213)
  ^bb10:  // pred: ^bb9
    %27 = cir.const #cir.int<0> : !s32i loc(#loc112)
    %28 = cir.load %2 : !cir.ptr<!u64i>, !u64i loc(#loc113)
    %29 = cir.cast(array_to_ptrdecay, %1 : !cir.ptr<!cir.array<!ty__twoIntsStruct x 100>>), !cir.ptr<!ty__twoIntsStruct> loc(#loc114)
    %30 = cir.ptr_stride(%29 : !cir.ptr<!ty__twoIntsStruct>, %28 : !u64i), !cir.ptr<!ty__twoIntsStruct> loc(#loc114)
    %31 = cir.get_member %30[0] {name = "intOne"} : !cir.ptr<!ty__twoIntsStruct> -> !cir.ptr<!s32i> loc(#loc52)
    cir.store %27, %31 : !s32i, !cir.ptr<!s32i> loc(#loc214)
    %32 = cir.const #cir.int<0> : !s32i loc(#loc115)
    %33 = cir.load %2 : !cir.ptr<!u64i>, !u64i loc(#loc116)
    %34 = cir.cast(array_to_ptrdecay, %1 : !cir.ptr<!cir.array<!ty__twoIntsStruct x 100>>), !cir.ptr<!ty__twoIntsStruct> loc(#loc117)
    %35 = cir.ptr_stride(%34 : !cir.ptr<!ty__twoIntsStruct>, %33 : !u64i), !cir.ptr<!ty__twoIntsStruct> loc(#loc117)
    %36 = cir.get_member %35[1] {name = "intTwo"} : !cir.ptr<!ty__twoIntsStruct> -> !cir.ptr<!s32i> loc(#loc56)
    cir.store %32, %36 : !s32i, !cir.ptr<!s32i> loc(#loc215)
    cir.br ^bb11 loc(#loc107)
  ^bb11:  // pred: ^bb10
    %37 = cir.load %2 : !cir.ptr<!u64i>, !u64i loc(#loc118)
    %38 = cir.unary(inc, %37) : !u64i, !u64i loc(#loc119)
    cir.store %38, %2 : !u64i, !cir.ptr<!u64i> loc(#loc216)
    cir.br ^bb9 loc(#loc211)
  ^bb12:  // pred: ^bb9
    cir.br ^bb13 loc(#loc107)
  ^bb13:  // pred: ^bb12
    cir.br ^bb14 loc(#loc105)
  ^bb14:  // pred: ^bb13
    %39 = cir.load %0 : !cir.ptr<!cir.ptr<!ty__twoIntsStruct>>, !cir.ptr<!ty__twoIntsStruct> loc(#loc120)
    %40 = cir.cast(bitcast, %39 : !cir.ptr<!ty__twoIntsStruct>), !cir.ptr<!void> loc(#loc120)
    %41 = cir.cast(array_to_ptrdecay, %1 : !cir.ptr<!cir.array<!ty__twoIntsStruct x 100>>), !cir.ptr<!ty__twoIntsStruct> loc(#loc121)
    %42 = cir.cast(bitcast, %41 : !cir.ptr<!ty__twoIntsStruct>), !cir.ptr<!void> loc(#loc121)
    %43 = cir.const #cir.int<100> : !s32i loc(#loc122)
    %44 = cir.cast(integral, %43 : !s32i), !u64i loc(#loc122)
    %45 = cir.const #cir.int<8> : !u64i loc(#loc217)
    %46 = cir.binop(mul, %44, %45) : !u64i loc(#loc218)
    cir.libc.memcpy %46 bytes from %42 to %40 : !u64i, !cir.ptr<!void> -> !cir.ptr<!void> loc(#loc219)
    %47 = cir.load %0 : !cir.ptr<!cir.ptr<!ty__twoIntsStruct>>, !cir.ptr<!ty__twoIntsStruct> loc(#loc127)
    %48 = cir.const #cir.int<0> : !s32i loc(#loc128)
    %49 = cir.ptr_stride(%47 : !cir.ptr<!ty__twoIntsStruct>, %48 : !s32i), !cir.ptr<!ty__twoIntsStruct> loc(#loc129)
    cir.call @printStructLine(%49) : (!cir.ptr<!ty__twoIntsStruct>) -> () loc(#loc130)
    %50 = cir.load %0 : !cir.ptr<!cir.ptr<!ty__twoIntsStruct>>, !cir.ptr<!ty__twoIntsStruct> loc(#loc131)
    %51 = cir.cast(bitcast, %50 : !cir.ptr<!ty__twoIntsStruct>), !cir.ptr<!void> loc(#loc131)
    cir.call @free(%51) : (!cir.ptr<!void>) -> () extra(#fn_attr) loc(#loc132)
    cir.br ^bb15 loc(#loc103)
  ^bb15:  // pred: ^bb14
    cir.br ^bb16 loc(#loc101)
  ^bb16:  // pred: ^bb15
    cir.return loc(#loc73)
  } loc(#loc194)
  cir.func @_ZN60CWE122_Heap_Based_Buffer_Overflow__c_CWE805_struct_memcpy_334goodEv() extra(#fn_attr1) {
    cir.call @_ZN60CWE122_Heap_Based_Buffer_Overflow__c_CWE805_struct_memcpy_33L7goodG2BEv() : () -> () loc(#loc135)
    cir.return loc(#loc134)
  } loc(#loc220)
  cir.func private @srand(!u32i) extra(#fn_attr) loc(#loc221)
  cir.func private @time(!cir.ptr<!s64i>) -> !s64i extra(#fn_attr) loc(#loc222)
  cir.func private @printLine(!cir.ptr<!s8i>) loc(#loc223)
  cir.global "private" constant cir_private dsolocal @".str" = #cir.const_array<"Calling good()...\00" : !cir.array<!s8i x 18>> : !cir.array<!s8i x 18> {alignment = 1 : i64} loc(#loc142)
  cir.global "private" constant cir_private dsolocal @".str.1" = #cir.const_array<"Finished good()\00" : !cir.array<!s8i x 16>> : !cir.array<!s8i x 16> {alignment = 1 : i64} loc(#loc143)
  cir.global "private" constant cir_private dsolocal @".str.2" = #cir.const_array<"Calling bad()...\00" : !cir.array<!s8i x 17>> : !cir.array<!s8i x 17> {alignment = 1 : i64} loc(#loc144)
  cir.global "private" constant cir_private dsolocal @".str.3" = #cir.const_array<"Finished bad()\00" : !cir.array<!s8i x 15>> : !cir.array<!s8i x 15> {alignment = 1 : i64} loc(#loc145)
  cir.func @main(%arg0: !s32i loc(fused[#loc148, #loc149]), %arg1: !cir.ptr<!cir.ptr<!s8i>> loc(fused[#loc150, #loc151])) -> !s32i extra(#fn_attr1) {
    %0 = cir.alloca !s32i, !cir.ptr<!s32i>, ["argc", init] {alignment = 4 : i64} loc(#loc225)
    %1 = cir.alloca !cir.ptr<!cir.ptr<!s8i>>, !cir.ptr<!cir.ptr<!cir.ptr<!s8i>>>, ["argv", init] {alignment = 8 : i64} loc(#loc226)
    %2 = cir.alloca !s32i, !cir.ptr<!s32i>, ["__retval"] {alignment = 4 : i64} loc(#loc147)
    cir.store %arg0, %0 : !s32i, !cir.ptr<!s32i> loc(#loc152)
    cir.store %arg1, %1 : !cir.ptr<!cir.ptr<!s8i>>, !cir.ptr<!cir.ptr<!cir.ptr<!s8i>>> loc(#loc152)
    %3 = cir.const #cir.ptr<null> : !cir.ptr<!s64i> loc(#loc153)
    %4 = cir.call @time(%3) : (!cir.ptr<!s64i>) -> !s64i extra(#fn_attr) loc(#loc154)
    %5 = cir.cast(integral, %4 : !s64i), !u32i loc(#loc154)
    cir.call @srand(%5) : (!u32i) -> () extra(#fn_attr) loc(#loc155)
    %6 = cir.get_global @".str" : !cir.ptr<!cir.array<!s8i x 18>> loc(#loc142)
    %7 = cir.cast(array_to_ptrdecay, %6 : !cir.ptr<!cir.array<!s8i x 18>>), !cir.ptr<!s8i> loc(#loc142)
    cir.call @printLine(%7) : (!cir.ptr<!s8i>) -> () loc(#loc156)
    cir.call @_ZN60CWE122_Heap_Based_Buffer_Overflow__c_CWE805_struct_memcpy_334goodEv() : () -> () loc(#loc157)
    %8 = cir.get_global @".str.1" : !cir.ptr<!cir.array<!s8i x 16>> loc(#loc143)
    %9 = cir.cast(array_to_ptrdecay, %8 : !cir.ptr<!cir.array<!s8i x 16>>), !cir.ptr<!s8i> loc(#loc143)
    cir.call @printLine(%9) : (!cir.ptr<!s8i>) -> () loc(#loc158)
    %10 = cir.get_global @".str.2" : !cir.ptr<!cir.array<!s8i x 17>> loc(#loc144)
    %11 = cir.cast(array_to_ptrdecay, %10 : !cir.ptr<!cir.array<!s8i x 17>>), !cir.ptr<!s8i> loc(#loc144)
    cir.call @printLine(%11) : (!cir.ptr<!s8i>) -> () loc(#loc159)
    cir.call @_ZN60CWE122_Heap_Based_Buffer_Overflow__c_CWE805_struct_memcpy_333badEv() : () -> () loc(#loc160)
    %12 = cir.get_global @".str.3" : !cir.ptr<!cir.array<!s8i x 15>> loc(#loc145)
    %13 = cir.cast(array_to_ptrdecay, %12 : !cir.ptr<!cir.array<!s8i x 15>>), !cir.ptr<!s8i> loc(#loc145)
    cir.call @printLine(%13) : (!cir.ptr<!s8i>) -> () loc(#loc161)
    %14 = cir.const #cir.int<0> : !s32i loc(#loc162)
    cir.store %14, %2 : !s32i, !cir.ptr<!s32i> loc(#loc227)
    %15 = cir.load %2 : !cir.ptr<!s32i>, !s32i loc(#loc227)
    cir.return %15 : !s32i loc(#loc227)
  } loc(#loc224)
} loc(#loc)
#loc = loc("/home/ladisgin/git_proj/juliet-c/testcases/CWE122_Heap_Based_Buffer_Overflow/s08/CWE122_Heap_Based_Buffer_Overflow__c_CWE805_struct_memcpy_33.cpp":0:0)
#loc1 = loc("/usr/include/stdlib.h":672:1)
#loc2 = loc("/usr/include/stdlib.h":672:45)
#loc3 = loc("/usr/include/stdlib.h":756:1)
#loc4 = loc("/usr/include/stdlib.h":756:70)
#loc5 = loc("../../../testcasesupport/std_testcase_io.h":40:1)
#loc6 = loc("../../../testcasesupport/std_testcase_io.h":40:63)
#loc7 = loc("/usr/include/stdlib.h":687:1)
#loc8 = loc("/usr/include/stdlib.h":687:32)
#loc9 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_struct_memcpy_33.cpp":24:1)
#loc10 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_struct_memcpy_33.cpp":51:1)
#loc11 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_struct_memcpy_33.cpp":33:9)
#loc12 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_struct_memcpy_33.cpp":33:32)
#loc13 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_struct_memcpy_33.cpp":35:13)
#loc14 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_struct_memcpy_33.cpp":35:37)
#loc15 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_struct_memcpy_33.cpp":37:17)
#loc16 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_struct_memcpy_33.cpp":37:24)
#loc17 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_struct_memcpy_33.cpp":26:5)
#loc18 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_struct_memcpy_33.cpp":26:21)
#loc19 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_struct_memcpy_33.cpp":27:5)
#loc20 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_struct_memcpy_33.cpp":27:32)
#loc21 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_struct_memcpy_33.cpp":28:12)
#loc22 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_struct_memcpy_33.cpp":28:5)
#loc23 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_struct_memcpy_33.cpp":30:29)
#loc24 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_struct_memcpy_33.cpp":30:36)
#loc25 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_struct_memcpy_33.cpp":30:39)
#loc26 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_struct_memcpy_33.cpp":30:59)
#loc27 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_struct_memcpy_33.cpp":30:60)
#loc28 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_struct_memcpy_33.cpp":30:5)
#loc29 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_struct_memcpy_33.cpp":31:5)
#loc30 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_struct_memcpy_33.cpp":31:33)
#loc31 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_struct_memcpy_33.cpp":31:9)
#loc32 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_struct_memcpy_33.cpp":31:17)
#loc33 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_struct_memcpy_33.cpp":31:23)
#loc34 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_struct_memcpy_33.cpp":31:24)
#loc35 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_struct_memcpy_33.cpp":31:30)
#loc36 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_struct_memcpy_33.cpp":31:29)
#loc37 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_struct_memcpy_33.cpp":32:5)
#loc38 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_struct_memcpy_33.cpp":50:5)
#loc39 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_struct_memcpy_33.cpp":34:9)
#loc40 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_struct_memcpy_33.cpp":49:9)
#loc41 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_struct_memcpy_33.cpp":36:13)
#loc42 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_struct_memcpy_33.cpp":44:13)
#loc43 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_struct_memcpy_33.cpp":39:17)
#loc44 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_struct_memcpy_33.cpp":43:17)
#loc45 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_struct_memcpy_33.cpp":39:26)
#loc46 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_struct_memcpy_33.cpp":39:22)
#loc47 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_struct_memcpy_33.cpp":39:29)
#loc48 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_struct_memcpy_33.cpp":39:33)
#loc49 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_struct_memcpy_33.cpp":41:40)
#loc50 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_struct_memcpy_33.cpp":41:28)
#loc51 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_struct_memcpy_33.cpp":41:21)
#loc52 = loc("../../../testcasesupport/std_testcase.h":98:9)
#loc53 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_struct_memcpy_33.cpp":42:40)
#loc54 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_struct_memcpy_33.cpp":42:28)
#loc55 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_struct_memcpy_33.cpp":42:21)
#loc56 = loc("../../../testcasesupport/std_testcase.h":99:9)
#loc57 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_struct_memcpy_33.cpp":39:39)
#loc58 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_struct_memcpy_33.cpp":39:38)
#loc59 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_struct_memcpy_33.cpp":46:20)
#loc60 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_struct_memcpy_33.cpp":46:26)
#loc61 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_struct_memcpy_33.cpp":46:34)
#loc62 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_struct_memcpy_33.cpp":46:38)
#loc63 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_struct_memcpy_33.cpp":46:58)
#loc64 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_struct_memcpy_33.cpp":46:13)
#loc65 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_struct_memcpy_33.cpp":46:59)
#loc66 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_struct_memcpy_33.cpp":47:30)
#loc67 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_struct_memcpy_33.cpp":47:35)
#loc68 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_struct_memcpy_33.cpp":47:36)
#loc69 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_struct_memcpy_33.cpp":47:13)
#loc70 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_struct_memcpy_33.cpp":48:18)
#loc71 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_struct_memcpy_33.cpp":48:13)
#loc72 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_struct_memcpy_33.cpp":58:1)
#loc73 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_struct_memcpy_33.cpp":85:1)
#loc74 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_struct_memcpy_33.cpp":67:9)
#loc75 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_struct_memcpy_33.cpp":67:32)
#loc76 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_struct_memcpy_33.cpp":69:13)
#loc77 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_struct_memcpy_33.cpp":69:37)
#loc78 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_struct_memcpy_33.cpp":71:17)
#loc79 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_struct_memcpy_33.cpp":71:24)
#loc80 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_struct_memcpy_33.cpp":60:5)
#loc81 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_struct_memcpy_33.cpp":60:21)
#loc82 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_struct_memcpy_33.cpp":61:5)
#loc83 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_struct_memcpy_33.cpp":61:32)
#loc84 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_struct_memcpy_33.cpp":62:12)
#loc85 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_struct_memcpy_33.cpp":62:5)
#loc86 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_struct_memcpy_33.cpp":64:29)
#loc87 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_struct_memcpy_33.cpp":64:36)
#loc88 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_struct_memcpy_33.cpp":64:40)
#loc89 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_struct_memcpy_33.cpp":64:60)
#loc90 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_struct_memcpy_33.cpp":64:61)
#loc91 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_struct_memcpy_33.cpp":64:5)
#loc92 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_struct_memcpy_33.cpp":65:5)
#loc93 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_struct_memcpy_33.cpp":65:33)
#loc94 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_struct_memcpy_33.cpp":65:9)
#loc95 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_struct_memcpy_33.cpp":65:17)
#loc96 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_struct_memcpy_33.cpp":65:23)
#loc97 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_struct_memcpy_33.cpp":65:24)
#loc98 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_struct_memcpy_33.cpp":65:30)
#loc99 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_struct_memcpy_33.cpp":65:29)
#loc100 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_struct_memcpy_33.cpp":66:5)
#loc101 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_struct_memcpy_33.cpp":84:5)
#loc102 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_struct_memcpy_33.cpp":68:9)
#loc103 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_struct_memcpy_33.cpp":83:9)
#loc104 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_struct_memcpy_33.cpp":70:13)
#loc105 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_struct_memcpy_33.cpp":78:13)
#loc106 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_struct_memcpy_33.cpp":73:17)
#loc107 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_struct_memcpy_33.cpp":77:17)
#loc108 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_struct_memcpy_33.cpp":73:26)
#loc109 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_struct_memcpy_33.cpp":73:22)
#loc110 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_struct_memcpy_33.cpp":73:29)
#loc111 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_struct_memcpy_33.cpp":73:33)
#loc112 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_struct_memcpy_33.cpp":75:40)
#loc113 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_struct_memcpy_33.cpp":75:28)
#loc114 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_struct_memcpy_33.cpp":75:21)
#loc115 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_struct_memcpy_33.cpp":76:40)
#loc116 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_struct_memcpy_33.cpp":76:28)
#loc117 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_struct_memcpy_33.cpp":76:21)
#loc118 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_struct_memcpy_33.cpp":73:39)
#loc119 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_struct_memcpy_33.cpp":73:38)
#loc120 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_struct_memcpy_33.cpp":80:20)
#loc121 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_struct_memcpy_33.cpp":80:26)
#loc122 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_struct_memcpy_33.cpp":80:34)
#loc123 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_struct_memcpy_33.cpp":80:38)
#loc124 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_struct_memcpy_33.cpp":80:58)
#loc125 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_struct_memcpy_33.cpp":80:13)
#loc126 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_struct_memcpy_33.cpp":80:59)
#loc127 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_struct_memcpy_33.cpp":81:30)
#loc128 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_struct_memcpy_33.cpp":81:35)
#loc129 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_struct_memcpy_33.cpp":81:36)
#loc130 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_struct_memcpy_33.cpp":81:13)
#loc131 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_struct_memcpy_33.cpp":82:18)
#loc132 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_struct_memcpy_33.cpp":82:13)
#loc133 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_struct_memcpy_33.cpp":87:1)
#loc134 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_struct_memcpy_33.cpp":90:1)
#loc135 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_struct_memcpy_33.cpp":89:5)
#loc136 = loc("/usr/include/stdlib.h":575:1)
#loc137 = loc("/usr/include/stdlib.h":575:41)
#loc138 = loc("/usr/include/time.h":76:1)
#loc139 = loc("/usr/include/time.h":76:38)
#loc140 = loc("../../../testcasesupport/std_testcase_io.h":14:1)
#loc141 = loc("../../../testcasesupport/std_testcase_io.h":14:33)
#loc142 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_struct_memcpy_33.cpp":110:15)
#loc143 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_struct_memcpy_33.cpp":112:15)
#loc144 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_struct_memcpy_33.cpp":115:15)
#loc145 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_struct_memcpy_33.cpp":117:15)
#loc146 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_struct_memcpy_33.cpp":105:1)
#loc147 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_struct_memcpy_33.cpp":120:1)
#loc152 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_struct_memcpy_33.cpp":106:1)
#loc153 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_struct_memcpy_33.cpp":108:27)
#loc154 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_struct_memcpy_33.cpp":108:22)
#loc155 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_struct_memcpy_33.cpp":108:5)
#loc156 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_struct_memcpy_33.cpp":110:5)
#loc157 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_struct_memcpy_33.cpp":111:5)
#loc158 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_struct_memcpy_33.cpp":112:5)
#loc159 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_struct_memcpy_33.cpp":115:5)
#loc160 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_struct_memcpy_33.cpp":116:5)
#loc161 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_struct_memcpy_33.cpp":117:5)
#loc162 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_struct_memcpy_33.cpp":119:12)
#loc163 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_struct_memcpy_33.cpp":119:5)
#loc164 = loc(fused[#loc1, #loc2])
#loc165 = loc(fused[#loc3, #loc4])
#loc166 = loc(fused[#loc5, #loc6])
#loc167 = loc(fused[#loc7, #loc8])
#loc168 = loc(fused[#loc9, #loc10])
#loc169 = loc(fused[#loc11, #loc12])
#loc170 = loc(fused[#loc13, #loc14])
#loc171 = loc(fused[#loc15, #loc16])
#loc172 = loc(fused[#loc17, #loc18])
#loc173 = loc(fused[#loc19, #loc20])
#loc174 = loc(fused[#loc22, #loc21])
#loc175 = loc(fused[#loc25, #loc26])
#loc176 = loc(fused[#loc24, #loc26])
#loc177 = loc(fused[#loc23, #loc27])
#loc178 = loc(fused[#loc28, #loc27])
#loc179 = loc(fused[#loc29, #loc30])
#loc180 = loc(fused[#loc31, #loc32])
#loc181 = loc(fused[#loc33, #loc30])
#loc182 = loc(fused[#loc37, #loc38])
#loc183 = loc(fused[#loc39, #loc40])
#loc184 = loc(fused[#loc41, #loc42])
#loc185 = loc(fused[#loc43, #loc44])
#loc186 = loc(fused[#loc46, #loc45])
#loc187 = loc(fused[#loc47, #loc48])
#loc188 = loc(fused[#loc51, #loc49])
#loc189 = loc(fused[#loc55, #loc53])
#loc190 = loc(fused[#loc58, #loc57])
#loc191 = loc(fused[#loc62, #loc63])
#loc192 = loc(fused[#loc61, #loc63])
#loc193 = loc(fused[#loc64, #loc65])
#loc194 = loc(fused[#loc72, #loc73])
#loc195 = loc(fused[#loc74, #loc75])
#loc196 = loc(fused[#loc76, #loc77])
#loc197 = loc(fused[#loc78, #loc79])
#loc198 = loc(fused[#loc80, #loc81])
#loc199 = loc(fused[#loc82, #loc83])
#loc200 = loc(fused[#loc85, #loc84])
#loc201 = loc(fused[#loc88, #loc89])
#loc202 = loc(fused[#loc87, #loc89])
#loc203 = loc(fused[#loc86, #loc90])
#loc204 = loc(fused[#loc91, #loc90])
#loc205 = loc(fused[#loc92, #loc93])
#loc206 = loc(fused[#loc94, #loc95])
#loc207 = loc(fused[#loc96, #loc93])
#loc208 = loc(fused[#loc100, #loc101])
#loc209 = loc(fused[#loc102, #loc103])
#loc210 = loc(fused[#loc104, #loc105])
#loc211 = loc(fused[#loc106, #loc107])
#loc212 = loc(fused[#loc109, #loc108])
#loc213 = loc(fused[#loc110, #loc111])
#loc214 = loc(fused[#loc114, #loc112])
#loc215 = loc(fused[#loc117, #loc115])
#loc216 = loc(fused[#loc119, #loc118])
#loc217 = loc(fused[#loc123, #loc124])
#loc218 = loc(fused[#loc122, #loc124])
#loc219 = loc(fused[#loc125, #loc126])
#loc220 = loc(fused[#loc133, #loc134])
#loc221 = loc(fused[#loc136, #loc137])
#loc222 = loc(fused[#loc138, #loc139])
#loc223 = loc(fused[#loc140, #loc141])
#loc224 = loc(fused[#loc146, #loc147])
#loc227 = loc(fused[#loc163, #loc162])
