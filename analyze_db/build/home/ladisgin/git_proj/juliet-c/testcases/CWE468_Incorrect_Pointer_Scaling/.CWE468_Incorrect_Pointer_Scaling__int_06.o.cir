!s32i = !cir.int<s, 32>
!s8i = !cir.int<s, 8>
!u64i = !cir.int<u, 64>
!void = !cir.void
#fn_attr = #cir<extra({inline = #cir.inline<no>, nothrow = #cir.nothrow, optnone = #cir.optnone})>
module @"/home/ladisgin/git_proj/juliet-c/testcases/CWE468_Incorrect_Pointer_Scaling/CWE468_Incorrect_Pointer_Scaling__int_06.c" attributes {cir.lang = #cir.lang<c>, cir.sob = #cir.signed_overflow_behavior<undefined>, cir.triple = "x86_64-unknown-linux-gnu", dlti.dl_spec = #dlti.dl_spec<i32 = dense<32> : vector<2xi64>, f16 = dense<16> : vector<2xi64>, f64 = dense<64> : vector<2xi64>, !llvm.ptr = dense<64> : vector<4xi64>, i1 = dense<8> : vector<2xi64>, i8 = dense<8> : vector<2xi64>, i16 = dense<16> : vector<2xi64>, i64 = dense<64> : vector<2xi64>, !llvm.ptr<272> = dense<64> : vector<4xi64>, !llvm.ptr<271> = dense<32> : vector<4xi64>, !llvm.ptr<270> = dense<32> : vector<4xi64>, f128 = dense<128> : vector<2xi64>, f80 = dense<128> : vector<2xi64>, i128 = dense<128> : vector<2xi64>, "dlti.endianness" = "little", "dlti.stack_alignment" = 128 : i64>} {
  cir.global "private" constant cir_private @__const.good2.intArray = #cir.const_array<[#cir.int<1> : !s32i, #cir.int<2> : !s32i, #cir.int<3> : !s32i, #cir.int<4> : !s32i, #cir.int<5> : !s32i, #cir.int<6> : !s32i, #cir.int<7> : !s32i, #cir.int<8> : !s32i, #cir.int<9> : !s32i, #cir.int<10> : !s32i]> : !cir.array<!s32i x 10> loc(#loc80)
  cir.global "private" constant cir_private @__const.good1.intArray = #cir.const_array<[#cir.int<1> : !s32i, #cir.int<2> : !s32i, #cir.int<3> : !s32i, #cir.int<4> : !s32i, #cir.int<5> : !s32i, #cir.int<6> : !s32i, #cir.int<7> : !s32i, #cir.int<8> : !s32i, #cir.int<9> : !s32i, #cir.int<10> : !s32i]> : !cir.array<!s32i x 10> loc(#loc81)
  cir.global "private" constant cir_private @__const.CWE468_Incorrect_Pointer_Scaling__int_06_bad.intArray = #cir.const_array<[#cir.int<1> : !s32i, #cir.int<2> : !s32i, #cir.int<3> : !s32i, #cir.int<4> : !s32i, #cir.int<5> : !s32i, #cir.int<6> : !s32i, #cir.int<7> : !s32i, #cir.int<8> : !s32i, #cir.int<9> : !s32i, #cir.int<10> : !s32i]> : !cir.array<!s32i x 10> loc(#loc82)
  cir.func private @printIntLine(!s32i) loc(#loc83)
  cir.func no_proto @CWE468_Incorrect_Pointer_Scaling__int_06_bad() extra(#fn_attr) {
    %0 = cir.alloca !cir.array<!s32i x 10>, !cir.ptr<!cir.array<!s32i x 10>>, ["intArray"] {alignment = 16 : i64} loc(#loc82)
    %1 = cir.alloca !cir.ptr<!s32i>, !cir.ptr<!cir.ptr<!s32i>>, ["intPointer", init] {alignment = 8 : i64} loc(#loc85)
    %2 = cir.alloca !s32i, !cir.ptr<!s32i>, ["toPrint", init] {alignment = 4 : i64} loc(#loc86)
    cir.br ^bb1 loc(#loc87)
  ^bb1:  // pred: ^bb0
    %3 = cir.const #cir.int<5> : !s32i loc(#loc17)
    %4 = cir.const #cir.int<5> : !s32i loc(#loc18)
    %5 = cir.cmp(eq, %3, %4) : !s32i, !cir.bool loc(#loc88)
    cir.brcond %5 ^bb2, ^bb5 loc(#loc89)
  ^bb2:  // pred: ^bb1
    cir.br ^bb3 loc(#loc90)
  ^bb3:  // pred: ^bb2
    %6 = cir.get_global @__const.CWE468_Incorrect_Pointer_Scaling__int_06_bad.intArray : !cir.ptr<!cir.array<!s32i x 10>> loc(#loc82)
    cir.copy %6 to %0 : !cir.ptr<!cir.array<!s32i x 10>> loc(#loc82)
    %7 = cir.cast(array_to_ptrdecay, %0 : !cir.ptr<!cir.array<!s32i x 10>>), !cir.ptr<!s32i> loc(#loc12)
    cir.store %7, %1 : !cir.ptr<!s32i>, !cir.ptr<!cir.ptr<!s32i>> loc(#loc85)
    %8 = cir.load %1 : !cir.ptr<!cir.ptr<!s32i>>, !cir.ptr<!s32i> loc(#loc22)
    %9 = cir.const #cir.int<2> : !s32i loc(#loc23)
    %10 = cir.cast(integral, %9 : !s32i), !u64i loc(#loc23)
    %11 = cir.const #cir.int<4> : !u64i loc(#loc91)
    %12 = cir.binop(mul, %10, %11) : !u64i loc(#loc92)
    %13 = cir.ptr_stride(%8 : !cir.ptr<!s32i>, %12 : !u64i), !cir.ptr<!s32i> loc(#loc26)
    %14 = cir.load %13 : !cir.ptr<!s32i>, !s32i loc(#loc27)
    cir.store %14, %2 : !s32i, !cir.ptr<!s32i> loc(#loc86)
    %15 = cir.load %2 : !cir.ptr<!s32i>, !s32i loc(#loc28)
    cir.call @printIntLine(%15) : (!s32i) -> () loc(#loc29)
    cir.br ^bb4 loc(#loc21)
  ^bb4:  // pred: ^bb3
    cir.br ^bb5 loc(#loc16)
  ^bb5:  // 2 preds: ^bb1, ^bb4
    cir.br ^bb6 loc(#loc16)
  ^bb6:  // pred: ^bb5
    cir.return loc(#loc10)
  } loc(#loc84)
  cir.func no_proto @CWE468_Incorrect_Pointer_Scaling__int_06_good() extra(#fn_attr) {
    %0 = cir.get_global @good1 : !cir.ptr<!cir.func<!void ()>> loc(#loc94)
    cir.call %0() : (!cir.ptr<!cir.func<!void ()>>) -> () loc(#loc32)
    %1 = cir.get_global @good2 : !cir.ptr<!cir.func<!void ()>> loc(#loc95)
    cir.call %1() : (!cir.ptr<!cir.func<!void ()>>) -> () loc(#loc34)
    cir.return loc(#loc31)
  } loc(#loc93)
  cir.func private @printLine(!cir.ptr<!s8i>) loc(#loc96)
  cir.global "private" constant cir_private dsolocal @".str" = #cir.const_array<"Benign, fixed string\00" : !cir.array<!s8i x 21>> : !cir.array<!s8i x 21> {alignment = 1 : i64} loc(#loc38)
  cir.func no_proto internal private @good1() extra(#fn_attr) {
    %0 = cir.alloca !cir.array<!s32i x 10>, !cir.ptr<!cir.array<!s32i x 10>>, ["intArray"] {alignment = 16 : i64} loc(#loc81)
    %1 = cir.alloca !cir.ptr<!s32i>, !cir.ptr<!cir.ptr<!s32i>>, ["intPointer", init] {alignment = 8 : i64} loc(#loc98)
    %2 = cir.alloca !s32i, !cir.ptr<!s32i>, ["toPrint", init] {alignment = 4 : i64} loc(#loc99)
    cir.br ^bb1 loc(#loc100)
  ^bb1:  // pred: ^bb0
    %3 = cir.const #cir.int<5> : !s32i loc(#loc47)
    %4 = cir.const #cir.int<5> : !s32i loc(#loc48)
    %5 = cir.cmp(ne, %3, %4) : !s32i, !cir.bool loc(#loc101)
    cir.brcond %5 ^bb2, ^bb3 loc(#loc102)
  ^bb2:  // pred: ^bb1
    %6 = cir.get_global @".str" : !cir.ptr<!cir.array<!s8i x 21>> loc(#loc38)
    %7 = cir.cast(array_to_ptrdecay, %6 : !cir.ptr<!cir.array<!s8i x 21>>), !cir.ptr<!s8i> loc(#loc38)
    cir.call @printLine(%7) : (!cir.ptr<!s8i>) -> () loc(#loc52)
    cir.br ^bb6 loc(#loc50)
  ^bb3:  // pred: ^bb1
    cir.br ^bb4 loc(#loc103)
  ^bb4:  // pred: ^bb3
    %8 = cir.get_global @__const.good1.intArray : !cir.ptr<!cir.array<!s32i x 10>> loc(#loc81)
    cir.copy %8 to %0 : !cir.ptr<!cir.array<!s32i x 10>> loc(#loc81)
    %9 = cir.cast(array_to_ptrdecay, %0 : !cir.ptr<!cir.array<!s32i x 10>>), !cir.ptr<!s32i> loc(#loc42)
    cir.store %9, %1 : !cir.ptr<!s32i>, !cir.ptr<!cir.ptr<!s32i>> loc(#loc98)
    %10 = cir.load %1 : !cir.ptr<!cir.ptr<!s32i>>, !cir.ptr<!s32i> loc(#loc55)
    %11 = cir.const #cir.int<2> : !s32i loc(#loc56)
    %12 = cir.ptr_stride(%10 : !cir.ptr<!s32i>, %11 : !s32i), !cir.ptr<!s32i> loc(#loc57)
    %13 = cir.load %12 : !cir.ptr<!s32i>, !s32i loc(#loc58)
    cir.store %13, %2 : !s32i, !cir.ptr<!s32i> loc(#loc99)
    %14 = cir.load %2 : !cir.ptr<!s32i>, !s32i loc(#loc59)
    cir.call @printIntLine(%14) : (!s32i) -> () loc(#loc60)
    cir.br ^bb5 loc(#loc54)
  ^bb5:  // pred: ^bb4
    cir.br ^bb6 loc(#loc46)
  ^bb6:  // 2 preds: ^bb2, ^bb5
    cir.br ^bb7 loc(#loc46)
  ^bb7:  // pred: ^bb6
    cir.return loc(#loc40)
  } loc(#loc97)
  cir.func no_proto internal private @good2() extra(#fn_attr) {
    %0 = cir.alloca !cir.array<!s32i x 10>, !cir.ptr<!cir.array<!s32i x 10>>, ["intArray"] {alignment = 16 : i64} loc(#loc80)
    %1 = cir.alloca !cir.ptr<!s32i>, !cir.ptr<!cir.ptr<!s32i>>, ["intPointer", init] {alignment = 8 : i64} loc(#loc105)
    %2 = cir.alloca !s32i, !cir.ptr<!s32i>, ["toPrint", init] {alignment = 4 : i64} loc(#loc106)
    cir.br ^bb1 loc(#loc107)
  ^bb1:  // pred: ^bb0
    %3 = cir.const #cir.int<5> : !s32i loc(#loc69)
    %4 = cir.const #cir.int<5> : !s32i loc(#loc70)
    %5 = cir.cmp(eq, %3, %4) : !s32i, !cir.bool loc(#loc108)
    cir.brcond %5 ^bb2, ^bb5 loc(#loc109)
  ^bb2:  // pred: ^bb1
    cir.br ^bb3 loc(#loc110)
  ^bb3:  // pred: ^bb2
    %6 = cir.get_global @__const.good2.intArray : !cir.ptr<!cir.array<!s32i x 10>> loc(#loc80)
    cir.copy %6 to %0 : !cir.ptr<!cir.array<!s32i x 10>> loc(#loc80)
    %7 = cir.cast(array_to_ptrdecay, %0 : !cir.ptr<!cir.array<!s32i x 10>>), !cir.ptr<!s32i> loc(#loc64)
    cir.store %7, %1 : !cir.ptr<!s32i>, !cir.ptr<!cir.ptr<!s32i>> loc(#loc105)
    %8 = cir.load %1 : !cir.ptr<!cir.ptr<!s32i>>, !cir.ptr<!s32i> loc(#loc74)
    %9 = cir.const #cir.int<2> : !s32i loc(#loc75)
    %10 = cir.ptr_stride(%8 : !cir.ptr<!s32i>, %9 : !s32i), !cir.ptr<!s32i> loc(#loc76)
    %11 = cir.load %10 : !cir.ptr<!s32i>, !s32i loc(#loc77)
    cir.store %11, %2 : !s32i, !cir.ptr<!s32i> loc(#loc106)
    %12 = cir.load %2 : !cir.ptr<!s32i>, !s32i loc(#loc78)
    cir.call @printIntLine(%12) : (!s32i) -> () loc(#loc79)
    cir.br ^bb4 loc(#loc73)
  ^bb4:  // pred: ^bb3
    cir.br ^bb5 loc(#loc68)
  ^bb5:  // 2 preds: ^bb1, ^bb4
    cir.br ^bb6 loc(#loc68)
  ^bb6:  // pred: ^bb5
    cir.return loc(#loc62)
  } loc(#loc104)
} loc(#loc)
#loc = loc("/home/ladisgin/git_proj/juliet-c/testcases/CWE468_Incorrect_Pointer_Scaling/CWE468_Incorrect_Pointer_Scaling__int_06.c":0:0)
#loc1 = loc("CWE468_Incorrect_Pointer_Scaling__int_06.c":71:13)
#loc2 = loc("CWE468_Incorrect_Pointer_Scaling__int_06.c":71:64)
#loc3 = loc("CWE468_Incorrect_Pointer_Scaling__int_06.c":55:13)
#loc4 = loc("CWE468_Incorrect_Pointer_Scaling__int_06.c":55:64)
#loc5 = loc("CWE468_Incorrect_Pointer_Scaling__int_06.c":30:13)
#loc6 = loc("CWE468_Incorrect_Pointer_Scaling__int_06.c":30:64)
#loc7 = loc("../../testcasesupport/std_testcase_io.h":18:1)
#loc8 = loc("../../testcasesupport/std_testcase_io.h":18:33)
#loc9 = loc("CWE468_Incorrect_Pointer_Scaling__int_06.c":25:1)
#loc10 = loc("CWE468_Incorrect_Pointer_Scaling__int_06.c":38:1)
#loc11 = loc("CWE468_Incorrect_Pointer_Scaling__int_06.c":31:13)
#loc12 = loc("CWE468_Incorrect_Pointer_Scaling__int_06.c":31:31)
#loc13 = loc("CWE468_Incorrect_Pointer_Scaling__int_06.c":34:13)
#loc14 = loc("CWE468_Incorrect_Pointer_Scaling__int_06.c":34:55)
#loc15 = loc("CWE468_Incorrect_Pointer_Scaling__int_06.c":27:5)
#loc16 = loc("CWE468_Incorrect_Pointer_Scaling__int_06.c":37:5)
#loc17 = loc("CWE468_Incorrect_Pointer_Scaling__int_06.c":27:8)
#loc18 = loc("CWE468_Incorrect_Pointer_Scaling__int_06.c":27:27)
#loc19 = loc("CWE468_Incorrect_Pointer_Scaling__int_06.c":28:5)
#loc20 = loc("CWE468_Incorrect_Pointer_Scaling__int_06.c":29:9)
#loc21 = loc("CWE468_Incorrect_Pointer_Scaling__int_06.c":36:9)
#loc22 = loc("CWE468_Incorrect_Pointer_Scaling__int_06.c":34:29)
#loc23 = loc("CWE468_Incorrect_Pointer_Scaling__int_06.c":34:41)
#loc24 = loc("CWE468_Incorrect_Pointer_Scaling__int_06.c":34:43)
#loc25 = loc("CWE468_Incorrect_Pointer_Scaling__int_06.c":34:53)
#loc26 = loc("CWE468_Incorrect_Pointer_Scaling__int_06.c":34:39)
#loc27 = loc("CWE468_Incorrect_Pointer_Scaling__int_06.c":34:27)
#loc28 = loc("CWE468_Incorrect_Pointer_Scaling__int_06.c":35:26)
#loc29 = loc("CWE468_Incorrect_Pointer_Scaling__int_06.c":35:13)
#loc30 = loc("CWE468_Incorrect_Pointer_Scaling__int_06.c":81:1)
#loc31 = loc("CWE468_Incorrect_Pointer_Scaling__int_06.c":85:1)
#loc32 = loc("CWE468_Incorrect_Pointer_Scaling__int_06.c":83:5)
#loc33 = loc("CWE468_Incorrect_Pointer_Scaling__int_06.c":83:11)
#loc34 = loc("CWE468_Incorrect_Pointer_Scaling__int_06.c":84:5)
#loc35 = loc("CWE468_Incorrect_Pointer_Scaling__int_06.c":84:11)
#loc36 = loc("../../testcasesupport/std_testcase_io.h":14:1)
#loc37 = loc("../../testcasesupport/std_testcase_io.h":14:33)
#loc38 = loc("CWE468_Incorrect_Pointer_Scaling__int_06.c":50:19)
#loc39 = loc("CWE468_Incorrect_Pointer_Scaling__int_06.c":45:1)
#loc40 = loc("CWE468_Incorrect_Pointer_Scaling__int_06.c":63:1)
#loc41 = loc("CWE468_Incorrect_Pointer_Scaling__int_06.c":56:13)
#loc42 = loc("CWE468_Incorrect_Pointer_Scaling__int_06.c":56:31)
#loc43 = loc("CWE468_Incorrect_Pointer_Scaling__int_06.c":59:13)
#loc44 = loc("CWE468_Incorrect_Pointer_Scaling__int_06.c":59:41)
#loc45 = loc("CWE468_Incorrect_Pointer_Scaling__int_06.c":47:5)
#loc46 = loc("CWE468_Incorrect_Pointer_Scaling__int_06.c":62:5)
#loc47 = loc("CWE468_Incorrect_Pointer_Scaling__int_06.c":47:8)
#loc48 = loc("CWE468_Incorrect_Pointer_Scaling__int_06.c":47:27)
#loc49 = loc("CWE468_Incorrect_Pointer_Scaling__int_06.c":48:5)
#loc50 = loc("CWE468_Incorrect_Pointer_Scaling__int_06.c":51:5)
#loc51 = loc("CWE468_Incorrect_Pointer_Scaling__int_06.c":53:5)
#loc52 = loc("CWE468_Incorrect_Pointer_Scaling__int_06.c":50:9)
#loc53 = loc("CWE468_Incorrect_Pointer_Scaling__int_06.c":54:9)
#loc54 = loc("CWE468_Incorrect_Pointer_Scaling__int_06.c":61:9)
#loc55 = loc("CWE468_Incorrect_Pointer_Scaling__int_06.c":59:29)
#loc56 = loc("CWE468_Incorrect_Pointer_Scaling__int_06.c":59:40)
#loc57 = loc("CWE468_Incorrect_Pointer_Scaling__int_06.c":59:39)
#loc58 = loc("CWE468_Incorrect_Pointer_Scaling__int_06.c":59:27)
#loc59 = loc("CWE468_Incorrect_Pointer_Scaling__int_06.c":60:26)
#loc60 = loc("CWE468_Incorrect_Pointer_Scaling__int_06.c":60:13)
#loc61 = loc("CWE468_Incorrect_Pointer_Scaling__int_06.c":66:1)
#loc62 = loc("CWE468_Incorrect_Pointer_Scaling__int_06.c":79:1)
#loc63 = loc("CWE468_Incorrect_Pointer_Scaling__int_06.c":72:13)
#loc64 = loc("CWE468_Incorrect_Pointer_Scaling__int_06.c":72:31)
#loc65 = loc("CWE468_Incorrect_Pointer_Scaling__int_06.c":75:13)
#loc66 = loc("CWE468_Incorrect_Pointer_Scaling__int_06.c":75:41)
#loc67 = loc("CWE468_Incorrect_Pointer_Scaling__int_06.c":68:5)
#loc68 = loc("CWE468_Incorrect_Pointer_Scaling__int_06.c":78:5)
#loc69 = loc("CWE468_Incorrect_Pointer_Scaling__int_06.c":68:8)
#loc70 = loc("CWE468_Incorrect_Pointer_Scaling__int_06.c":68:27)
#loc71 = loc("CWE468_Incorrect_Pointer_Scaling__int_06.c":69:5)
#loc72 = loc("CWE468_Incorrect_Pointer_Scaling__int_06.c":70:9)
#loc73 = loc("CWE468_Incorrect_Pointer_Scaling__int_06.c":77:9)
#loc74 = loc("CWE468_Incorrect_Pointer_Scaling__int_06.c":75:29)
#loc75 = loc("CWE468_Incorrect_Pointer_Scaling__int_06.c":75:40)
#loc76 = loc("CWE468_Incorrect_Pointer_Scaling__int_06.c":75:39)
#loc77 = loc("CWE468_Incorrect_Pointer_Scaling__int_06.c":75:27)
#loc78 = loc("CWE468_Incorrect_Pointer_Scaling__int_06.c":76:26)
#loc79 = loc("CWE468_Incorrect_Pointer_Scaling__int_06.c":76:13)
#loc80 = loc(fused[#loc1, #loc2])
#loc81 = loc(fused[#loc3, #loc4])
#loc82 = loc(fused[#loc5, #loc6])
#loc83 = loc(fused[#loc7, #loc8])
#loc84 = loc(fused[#loc9, #loc10])
#loc85 = loc(fused[#loc11, #loc12])
#loc86 = loc(fused[#loc13, #loc14])
#loc87 = loc(fused[#loc15, #loc16])
#loc88 = loc(fused[#loc17, #loc18])
#loc89 = loc(fused[#loc19, #loc16])
#loc90 = loc(fused[#loc20, #loc21])
#loc91 = loc(fused[#loc24, #loc25])
#loc92 = loc(fused[#loc23, #loc25])
#loc93 = loc(fused[#loc30, #loc31])
#loc94 = loc(fused[#loc32, #loc33])
#loc95 = loc(fused[#loc34, #loc35])
#loc96 = loc(fused[#loc36, #loc37])
#loc97 = loc(fused[#loc39, #loc40])
#loc98 = loc(fused[#loc41, #loc42])
#loc99 = loc(fused[#loc43, #loc44])
#loc100 = loc(fused[#loc45, #loc46])
#loc101 = loc(fused[#loc47, #loc48])
#loc102 = loc(fused[#loc49, #loc50, #loc51, #loc46])
#loc103 = loc(fused[#loc53, #loc54])
#loc104 = loc(fused[#loc61, #loc62])
#loc105 = loc(fused[#loc63, #loc64])
#loc106 = loc(fused[#loc65, #loc66])
#loc107 = loc(fused[#loc67, #loc68])
#loc108 = loc(fused[#loc69, #loc70])
#loc109 = loc(fused[#loc71, #loc68])
#loc110 = loc(fused[#loc72, #loc73])
