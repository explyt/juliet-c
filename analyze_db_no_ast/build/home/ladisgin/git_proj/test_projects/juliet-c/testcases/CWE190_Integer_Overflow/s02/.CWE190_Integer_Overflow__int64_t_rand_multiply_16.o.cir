!s32i = !cir.int<s, 32>
!s64i = !cir.int<s, 64>
!s8i = !cir.int<s, 8>
!u64i = !cir.int<u, 64>
!void = !cir.void
#fn_attr = #cir<extra({nothrow = #cir.nothrow})>
#fn_attr1 = #cir<extra({inline = #cir.inline<no>, nothrow = #cir.nothrow, optnone = #cir.optnone})>
module @"/home/ladisgin/git_proj/test_projects/juliet-c/testcases/CWE190_Integer_Overflow/s02/CWE190_Integer_Overflow__int64_t_rand_multiply_16.c" attributes {cir.lang = #cir.lang<c>, cir.sob = #cir.signed_overflow_behavior<undefined>, cir.triple = "x86_64-unknown-linux-gnu", dlti.dl_spec = #dlti.dl_spec<#dlti.dl_entry<!llvm.ptr<271>, dense<32> : vector<4xi64>>, #dlti.dl_entry<f128, dense<128> : vector<2xi64>>, #dlti.dl_entry<!llvm.ptr<270>, dense<32> : vector<4xi64>>, #dlti.dl_entry<f64, dense<64> : vector<2xi64>>, #dlti.dl_entry<f16, dense<16> : vector<2xi64>>, #dlti.dl_entry<i32, dense<32> : vector<2xi64>>, #dlti.dl_entry<i16, dense<16> : vector<2xi64>>, #dlti.dl_entry<i8, dense<8> : vector<2xi64>>, #dlti.dl_entry<!llvm.ptr, dense<64> : vector<4xi64>>, #dlti.dl_entry<i1, dense<8> : vector<2xi64>>, #dlti.dl_entry<f80, dense<128> : vector<2xi64>>, #dlti.dl_entry<i128, dense<128> : vector<2xi64>>, #dlti.dl_entry<i64, dense<64> : vector<2xi64>>, #dlti.dl_entry<!llvm.ptr<272>, dense<64> : vector<4xi64>>, #dlti.dl_entry<"dlti.endianness", "little">, #dlti.dl_entry<"dlti.stack_alignment", 128 : i64>>, llvm.data_layout = "e-m:e-p270:32:32-p271:32:32-p272:64:64-i64:64-i128:128-f80:128-n8:16:32:64-S128"} {
  cir.func private  @rand() -> !s32i extra(#fn_attr) loc(#loc106)
  cir.func private  @printLongLongLine(!s64i) loc(#loc107)
  cir.func no_proto  @CWE190_Integer_Overflow__int64_t_rand_multiply_16_bad() extra(#fn_attr1) {
    %0 = cir.alloca !s64i, !cir.ptr<!s64i>, ["data"] {alignment = 8 : i64} loc(#loc109)
    %1 = cir.const #cir.int<0> : !s64i loc(#loc9)
    cir.store %1, %0 : !s64i, !cir.ptr<!s64i> loc(#loc110)
    cir.scope {
      cir.while {
        %2 = cir.const #cir.int<1> : !s32i loc(#loc13)
        %3 = cir.cast(int_to_bool, %2 : !s32i), !cir.bool loc(#loc13)
        cir.condition(%3) loc(#loc13)
      } do {
        %2 = cir.call @rand() : () -> !s32i extra(#fn_attr) loc(#loc14)
        %3 = cir.const #cir.int<1> : !s32i loc(#loc14)
        %4 = cir.binop(and, %2, %3) : !s32i loc(#loc14)
        %5 = cir.cast(int_to_bool, %4 : !s32i), !cir.bool loc(#loc14)
        %6 = cir.ternary(%5, true {
          %8 = cir.call @rand() : () -> !s32i extra(#fn_attr) loc(#loc14)
          %9 = cir.cast(integral, %8 : !s32i), !u64i loc(#loc14)
          %10 = cir.const #cir.int<60> : !s32i loc(#loc14)
          %11 = cir.shift(left, %9 : !u64i, %10 : !s32i) -> !u64i loc(#loc14)
          %12 = cir.call @rand() : () -> !s32i extra(#fn_attr) loc(#loc14)
          %13 = cir.cast(integral, %12 : !s32i), !u64i loc(#loc14)
          %14 = cir.const #cir.int<45> : !s32i loc(#loc14)
          %15 = cir.shift(left, %13 : !u64i, %14 : !s32i) -> !u64i loc(#loc14)
          %16 = cir.binop(xor, %11, %15) : !u64i loc(#loc14)
          %17 = cir.call @rand() : () -> !s32i extra(#fn_attr) loc(#loc14)
          %18 = cir.cast(integral, %17 : !s32i), !u64i loc(#loc14)
          %19 = cir.const #cir.int<30> : !s32i loc(#loc14)
          %20 = cir.shift(left, %18 : !u64i, %19 : !s32i) -> !u64i loc(#loc14)
          %21 = cir.binop(xor, %16, %20) : !u64i loc(#loc14)
          %22 = cir.call @rand() : () -> !s32i extra(#fn_attr) loc(#loc14)
          %23 = cir.cast(integral, %22 : !s32i), !u64i loc(#loc14)
          %24 = cir.const #cir.int<15> : !s32i loc(#loc14)
          %25 = cir.shift(left, %23 : !u64i, %24 : !s32i) -> !u64i loc(#loc14)
          %26 = cir.binop(xor, %21, %25) : !u64i loc(#loc14)
          %27 = cir.call @rand() : () -> !s32i extra(#fn_attr) loc(#loc14)
          %28 = cir.cast(integral, %27 : !s32i), !u64i loc(#loc14)
          %29 = cir.binop(xor, %26, %28) : !u64i loc(#loc14)
          cir.yield %29 : !u64i loc(#loc14)
        }, false {
          %8 = cir.call @rand() : () -> !s32i extra(#fn_attr) loc(#loc14)
          %9 = cir.cast(integral, %8 : !s32i), !u64i loc(#loc14)
          %10 = cir.const #cir.int<60> : !s32i loc(#loc14)
          %11 = cir.shift(left, %9 : !u64i, %10 : !s32i) -> !u64i loc(#loc14)
          %12 = cir.call @rand() : () -> !s32i extra(#fn_attr) loc(#loc14)
          %13 = cir.cast(integral, %12 : !s32i), !u64i loc(#loc14)
          %14 = cir.const #cir.int<45> : !s32i loc(#loc14)
          %15 = cir.shift(left, %13 : !u64i, %14 : !s32i) -> !u64i loc(#loc14)
          %16 = cir.binop(xor, %11, %15) : !u64i loc(#loc14)
          %17 = cir.call @rand() : () -> !s32i extra(#fn_attr) loc(#loc14)
          %18 = cir.cast(integral, %17 : !s32i), !u64i loc(#loc14)
          %19 = cir.const #cir.int<30> : !s32i loc(#loc14)
          %20 = cir.shift(left, %18 : !u64i, %19 : !s32i) -> !u64i loc(#loc14)
          %21 = cir.binop(xor, %16, %20) : !u64i loc(#loc14)
          %22 = cir.call @rand() : () -> !s32i extra(#fn_attr) loc(#loc14)
          %23 = cir.cast(integral, %22 : !s32i), !u64i loc(#loc14)
          %24 = cir.const #cir.int<15> : !s32i loc(#loc14)
          %25 = cir.shift(left, %23 : !u64i, %24 : !s32i) -> !u64i loc(#loc14)
          %26 = cir.binop(xor, %21, %25) : !u64i loc(#loc14)
          %27 = cir.call @rand() : () -> !s32i extra(#fn_attr) loc(#loc14)
          %28 = cir.cast(integral, %27 : !s32i), !u64i loc(#loc14)
          %29 = cir.binop(xor, %26, %28) : !u64i loc(#loc14)
          %30 = cir.unary(minus, %29) : !u64i, !u64i loc(#loc14)
          %31 = cir.const #cir.int<1> : !s32i loc(#loc14)
          %32 = cir.cast(integral, %31 : !s32i), !u64i loc(#loc14)
          %33 = cir.binop(sub, %30, %32) : !u64i loc(#loc14)
          cir.yield %33 : !u64i loc(#loc14)
        }) : (!cir.bool) -> !u64i loc(#loc14)
        %7 = cir.cast(integral, %6 : !u64i), !s64i loc(#loc14)
        cir.store %7, %0 : !s64i, !cir.ptr<!s64i> loc(#loc112)
        cir.break loc(#loc16)
      } loc(#loc111)
    } loc(#loc111)
    cir.scope {
      cir.while {
        %2 = cir.const #cir.int<1> : !s32i loc(#loc19)
        %3 = cir.cast(int_to_bool, %2 : !s32i), !cir.bool loc(#loc19)
        cir.condition(%3) loc(#loc19)
      } do {
        cir.scope {
          %2 = cir.load %0 : !cir.ptr<!s64i>, !s64i loc(#loc22)
          %3 = cir.const #cir.int<0> : !s32i loc(#loc23)
          %4 = cir.cast(integral, %3 : !s32i), !s64i loc(#loc23)
          %5 = cir.cmp(gt, %2, %4) : !s64i, !s32i loc(#loc115)
          %6 = cir.cast(int_to_bool, %5 : !s32i), !cir.bool loc(#loc24)
          cir.if %6 {
            %7 = cir.alloca !s64i, !cir.ptr<!s64i>, ["result", init] {alignment = 8 : i64} loc(#loc117)
            %8 = cir.load %0 : !cir.ptr<!s64i>, !s64i loc(#loc28)
            %9 = cir.const #cir.int<2> : !s32i loc(#loc27)
            %10 = cir.cast(integral, %9 : !s32i), !s64i loc(#loc27)
            %11 = cir.binop(mul, %8, %10) nsw : !s64i loc(#loc28)
            cir.store %11, %7 : !s64i, !cir.ptr<!s64i> loc(#loc117)
            %12 = cir.load %7 : !cir.ptr<!s64i>, !s64i loc(#loc29)
            cir.call @printLongLongLine(%12) : (!s64i) -> () loc(#loc30)
          } loc(#loc116)
        } loc(#loc114)
        cir.break loc(#loc31)
      } loc(#loc113)
    } loc(#loc113)
    cir.return loc(#loc6)
  } loc(#loc108)
  cir.func no_proto  @CWE190_Integer_Overflow__int64_t_rand_multiply_16_good() extra(#fn_attr1) {
    %0 = cir.get_global @goodB2G : !cir.ptr<!cir.func<!void ()>> loc(#loc119)
    cir.call %0() : (!cir.ptr<!cir.func<!void ()>>) -> () loc(#loc34)
    %1 = cir.get_global @goodG2B : !cir.ptr<!cir.func<!void ()>> loc(#loc120)
    cir.call %1() : (!cir.ptr<!cir.func<!void ()>>) -> () loc(#loc36)
    cir.return loc(#loc33)
  } loc(#loc118)
  cir.func private  @printLine(!cir.ptr<!s8i>) loc(#loc121)
  cir.global "private"  constant internal dsolocal @".str" = #cir.const_array<"data value is too large to perform arithmetic safely.\00" : !cir.array<!s8i x 54>> : !cir.array<!s8i x 54> {alignment = 1 : i64} loc(#loc40)
  cir.func no_proto internal private  @goodB2G() extra(#fn_attr1) {
    %0 = cir.alloca !s64i, !cir.ptr<!s64i>, ["data"] {alignment = 8 : i64} loc(#loc123)
    %1 = cir.const #cir.int<0> : !s64i loc(#loc45)
    cir.store %1, %0 : !s64i, !cir.ptr<!s64i> loc(#loc124)
    cir.scope {
      cir.while {
        %2 = cir.const #cir.int<1> : !s32i loc(#loc49)
        %3 = cir.cast(int_to_bool, %2 : !s32i), !cir.bool loc(#loc49)
        cir.condition(%3) loc(#loc49)
      } do {
        %2 = cir.call @rand() : () -> !s32i extra(#fn_attr) loc(#loc50)
        %3 = cir.const #cir.int<1> : !s32i loc(#loc50)
        %4 = cir.binop(and, %2, %3) : !s32i loc(#loc50)
        %5 = cir.cast(int_to_bool, %4 : !s32i), !cir.bool loc(#loc50)
        %6 = cir.ternary(%5, true {
          %8 = cir.call @rand() : () -> !s32i extra(#fn_attr) loc(#loc50)
          %9 = cir.cast(integral, %8 : !s32i), !u64i loc(#loc50)
          %10 = cir.const #cir.int<60> : !s32i loc(#loc50)
          %11 = cir.shift(left, %9 : !u64i, %10 : !s32i) -> !u64i loc(#loc50)
          %12 = cir.call @rand() : () -> !s32i extra(#fn_attr) loc(#loc50)
          %13 = cir.cast(integral, %12 : !s32i), !u64i loc(#loc50)
          %14 = cir.const #cir.int<45> : !s32i loc(#loc50)
          %15 = cir.shift(left, %13 : !u64i, %14 : !s32i) -> !u64i loc(#loc50)
          %16 = cir.binop(xor, %11, %15) : !u64i loc(#loc50)
          %17 = cir.call @rand() : () -> !s32i extra(#fn_attr) loc(#loc50)
          %18 = cir.cast(integral, %17 : !s32i), !u64i loc(#loc50)
          %19 = cir.const #cir.int<30> : !s32i loc(#loc50)
          %20 = cir.shift(left, %18 : !u64i, %19 : !s32i) -> !u64i loc(#loc50)
          %21 = cir.binop(xor, %16, %20) : !u64i loc(#loc50)
          %22 = cir.call @rand() : () -> !s32i extra(#fn_attr) loc(#loc50)
          %23 = cir.cast(integral, %22 : !s32i), !u64i loc(#loc50)
          %24 = cir.const #cir.int<15> : !s32i loc(#loc50)
          %25 = cir.shift(left, %23 : !u64i, %24 : !s32i) -> !u64i loc(#loc50)
          %26 = cir.binop(xor, %21, %25) : !u64i loc(#loc50)
          %27 = cir.call @rand() : () -> !s32i extra(#fn_attr) loc(#loc50)
          %28 = cir.cast(integral, %27 : !s32i), !u64i loc(#loc50)
          %29 = cir.binop(xor, %26, %28) : !u64i loc(#loc50)
          cir.yield %29 : !u64i loc(#loc50)
        }, false {
          %8 = cir.call @rand() : () -> !s32i extra(#fn_attr) loc(#loc50)
          %9 = cir.cast(integral, %8 : !s32i), !u64i loc(#loc50)
          %10 = cir.const #cir.int<60> : !s32i loc(#loc50)
          %11 = cir.shift(left, %9 : !u64i, %10 : !s32i) -> !u64i loc(#loc50)
          %12 = cir.call @rand() : () -> !s32i extra(#fn_attr) loc(#loc50)
          %13 = cir.cast(integral, %12 : !s32i), !u64i loc(#loc50)
          %14 = cir.const #cir.int<45> : !s32i loc(#loc50)
          %15 = cir.shift(left, %13 : !u64i, %14 : !s32i) -> !u64i loc(#loc50)
          %16 = cir.binop(xor, %11, %15) : !u64i loc(#loc50)
          %17 = cir.call @rand() : () -> !s32i extra(#fn_attr) loc(#loc50)
          %18 = cir.cast(integral, %17 : !s32i), !u64i loc(#loc50)
          %19 = cir.const #cir.int<30> : !s32i loc(#loc50)
          %20 = cir.shift(left, %18 : !u64i, %19 : !s32i) -> !u64i loc(#loc50)
          %21 = cir.binop(xor, %16, %20) : !u64i loc(#loc50)
          %22 = cir.call @rand() : () -> !s32i extra(#fn_attr) loc(#loc50)
          %23 = cir.cast(integral, %22 : !s32i), !u64i loc(#loc50)
          %24 = cir.const #cir.int<15> : !s32i loc(#loc50)
          %25 = cir.shift(left, %23 : !u64i, %24 : !s32i) -> !u64i loc(#loc50)
          %26 = cir.binop(xor, %21, %25) : !u64i loc(#loc50)
          %27 = cir.call @rand() : () -> !s32i extra(#fn_attr) loc(#loc50)
          %28 = cir.cast(integral, %27 : !s32i), !u64i loc(#loc50)
          %29 = cir.binop(xor, %26, %28) : !u64i loc(#loc50)
          %30 = cir.unary(minus, %29) : !u64i, !u64i loc(#loc50)
          %31 = cir.const #cir.int<1> : !s32i loc(#loc50)
          %32 = cir.cast(integral, %31 : !s32i), !u64i loc(#loc50)
          %33 = cir.binop(sub, %30, %32) : !u64i loc(#loc50)
          cir.yield %33 : !u64i loc(#loc50)
        }) : (!cir.bool) -> !u64i loc(#loc50)
        %7 = cir.cast(integral, %6 : !u64i), !s64i loc(#loc50)
        cir.store %7, %0 : !s64i, !cir.ptr<!s64i> loc(#loc126)
        cir.break loc(#loc52)
      } loc(#loc125)
    } loc(#loc125)
    cir.scope {
      cir.while {
        %2 = cir.const #cir.int<1> : !s32i loc(#loc55)
        %3 = cir.cast(int_to_bool, %2 : !s32i), !cir.bool loc(#loc55)
        cir.condition(%3) loc(#loc55)
      } do {
        cir.scope {
          %2 = cir.load %0 : !cir.ptr<!s64i>, !s64i loc(#loc58)
          %3 = cir.const #cir.int<0> : !s32i loc(#loc59)
          %4 = cir.cast(integral, %3 : !s32i), !s64i loc(#loc59)
          %5 = cir.cmp(gt, %2, %4) : !s64i, !s32i loc(#loc129)
          %6 = cir.cast(int_to_bool, %5 : !s32i), !cir.bool loc(#loc60)
          cir.if %6 {
            cir.scope {
              %7 = cir.load %0 : !cir.ptr<!s64i>, !s64i loc(#loc64)
              %8 = cir.const #cir.int<9223372036854775807> : !s64i loc(#loc65)
              %9 = cir.const #cir.int<2> : !s32i loc(#loc66)
              %10 = cir.cast(integral, %9 : !s32i), !s64i loc(#loc66)
              %11 = cir.binop(div, %8, %10) : !s64i loc(#loc132)
              %12 = cir.cmp(lt, %7, %11) : !s64i, !s32i loc(#loc133)
              %13 = cir.cast(int_to_bool, %12 : !s32i), !cir.bool loc(#loc68)
              cir.if %13 {
                %14 = cir.alloca !s64i, !cir.ptr<!s64i>, ["result", init] {alignment = 8 : i64} loc(#loc135)
                %15 = cir.load %0 : !cir.ptr<!s64i>, !s64i loc(#loc74)
                %16 = cir.const #cir.int<2> : !s32i loc(#loc73)
                %17 = cir.cast(integral, %16 : !s32i), !s64i loc(#loc73)
                %18 = cir.binop(mul, %15, %17) nsw : !s64i loc(#loc74)
                cir.store %18, %14 : !s64i, !cir.ptr<!s64i> loc(#loc135)
                %19 = cir.load %14 : !cir.ptr<!s64i>, !s64i loc(#loc75)
                cir.call @printLongLongLine(%19) : (!s64i) -> () loc(#loc76)
              } else {
                %14 = cir.get_global @".str" : !cir.ptr<!cir.array<!s8i x 54>> loc(#loc40)
                %15 = cir.cast(array_to_ptrdecay, %14 : !cir.ptr<!cir.array<!s8i x 54>>), !cir.ptr<!s8i> loc(#loc40)
                cir.call @printLine(%15) : (!cir.ptr<!s8i>) -> () loc(#loc77)
              } loc(#loc134)
            } loc(#loc131)
          } loc(#loc130)
        } loc(#loc128)
        cir.break loc(#loc78)
      } loc(#loc127)
    } loc(#loc127)
    cir.return loc(#loc42)
  } loc(#loc122)
  cir.func no_proto internal private  @goodG2B() extra(#fn_attr1) {
    %0 = cir.alloca !s64i, !cir.ptr<!s64i>, ["data"] {alignment = 8 : i64} loc(#loc137)
    %1 = cir.const #cir.int<0> : !s64i loc(#loc83)
    cir.store %1, %0 : !s64i, !cir.ptr<!s64i> loc(#loc138)
    cir.scope {
      cir.while {
        %2 = cir.const #cir.int<1> : !s32i loc(#loc87)
        %3 = cir.cast(int_to_bool, %2 : !s32i), !cir.bool loc(#loc87)
        cir.condition(%3) loc(#loc87)
      } do {
        %2 = cir.const #cir.int<2> : !s32i loc(#loc88)
        %3 = cir.cast(integral, %2 : !s32i), !s64i loc(#loc88)
        cir.store %3, %0 : !s64i, !cir.ptr<!s64i> loc(#loc140)
        cir.break loc(#loc90)
      } loc(#loc139)
    } loc(#loc139)
    cir.scope {
      cir.while {
        %2 = cir.const #cir.int<1> : !s32i loc(#loc93)
        %3 = cir.cast(int_to_bool, %2 : !s32i), !cir.bool loc(#loc93)
        cir.condition(%3) loc(#loc93)
      } do {
        cir.scope {
          %2 = cir.load %0 : !cir.ptr<!s64i>, !s64i loc(#loc96)
          %3 = cir.const #cir.int<0> : !s32i loc(#loc97)
          %4 = cir.cast(integral, %3 : !s32i), !s64i loc(#loc97)
          %5 = cir.cmp(gt, %2, %4) : !s64i, !s32i loc(#loc143)
          %6 = cir.cast(int_to_bool, %5 : !s32i), !cir.bool loc(#loc98)
          cir.if %6 {
            %7 = cir.alloca !s64i, !cir.ptr<!s64i>, ["result", init] {alignment = 8 : i64} loc(#loc145)
            %8 = cir.load %0 : !cir.ptr<!s64i>, !s64i loc(#loc102)
            %9 = cir.const #cir.int<2> : !s32i loc(#loc101)
            %10 = cir.cast(integral, %9 : !s32i), !s64i loc(#loc101)
            %11 = cir.binop(mul, %8, %10) nsw : !s64i loc(#loc102)
            cir.store %11, %7 : !s64i, !cir.ptr<!s64i> loc(#loc145)
            %12 = cir.load %7 : !cir.ptr<!s64i>, !s64i loc(#loc103)
            cir.call @printLongLongLine(%12) : (!s64i) -> () loc(#loc104)
          } loc(#loc144)
        } loc(#loc142)
        cir.break loc(#loc105)
      } loc(#loc141)
    } loc(#loc141)
    cir.return loc(#loc80)
  } loc(#loc136)
} loc(#loc)
#loc = loc("/home/ladisgin/git_proj/test_projects/juliet-c/testcases/CWE190_Integer_Overflow/s02/CWE190_Integer_Overflow__int64_t_rand_multiply_16.c":0:0)
#loc1 = loc("/usr/include/stdlib.h":573:1)
#loc2 = loc("/usr/include/stdlib.h":573:24)
#loc3 = loc("../../../testcasesupport/std_testcase_io.h":26:1)
#loc4 = loc("../../../testcasesupport/std_testcase_io.h":26:49)
#loc5 = loc("CWE190_Integer_Overflow__int64_t_rand_multiply_16.c":22:1)
#loc6 = loc("CWE190_Integer_Overflow__int64_t_rand_multiply_16.c":42:1)
#loc7 = loc("CWE190_Integer_Overflow__int64_t_rand_multiply_16.c":24:5)
#loc8 = loc("CWE190_Integer_Overflow__int64_t_rand_multiply_16.c":24:13)
#loc9 = loc("CWE190_Integer_Overflow__int64_t_rand_multiply_16.c":25:12)
#loc10 = loc("CWE190_Integer_Overflow__int64_t_rand_multiply_16.c":25:5)
#loc11 = loc("CWE190_Integer_Overflow__int64_t_rand_multiply_16.c":26:5)
#loc12 = loc("CWE190_Integer_Overflow__int64_t_rand_multiply_16.c":31:5)
#loc13 = loc("CWE190_Integer_Overflow__int64_t_rand_multiply_16.c":26:11)
#loc14 = loc("CWE190_Integer_Overflow__int64_t_rand_multiply_16.c":29:25)
#loc15 = loc("CWE190_Integer_Overflow__int64_t_rand_multiply_16.c":29:9)
#loc16 = loc("CWE190_Integer_Overflow__int64_t_rand_multiply_16.c":30:9)
#loc17 = loc("CWE190_Integer_Overflow__int64_t_rand_multiply_16.c":32:5)
#loc18 = loc("CWE190_Integer_Overflow__int64_t_rand_multiply_16.c":41:5)
#loc19 = loc("CWE190_Integer_Overflow__int64_t_rand_multiply_16.c":32:11)
#loc20 = loc("CWE190_Integer_Overflow__int64_t_rand_multiply_16.c":34:9)
#loc21 = loc("CWE190_Integer_Overflow__int64_t_rand_multiply_16.c":39:9)
#loc22 = loc("CWE190_Integer_Overflow__int64_t_rand_multiply_16.c":34:12)
#loc23 = loc("CWE190_Integer_Overflow__int64_t_rand_multiply_16.c":34:19)
#loc24 = loc("CWE190_Integer_Overflow__int64_t_rand_multiply_16.c":34:17)
#loc25 = loc("CWE190_Integer_Overflow__int64_t_rand_multiply_16.c":35:9)
#loc26 = loc("CWE190_Integer_Overflow__int64_t_rand_multiply_16.c":37:13)
#loc27 = loc("CWE190_Integer_Overflow__int64_t_rand_multiply_16.c":37:37)
#loc28 = loc("CWE190_Integer_Overflow__int64_t_rand_multiply_16.c":37:30)
#loc29 = loc("CWE190_Integer_Overflow__int64_t_rand_multiply_16.c":38:31)
#loc30 = loc("CWE190_Integer_Overflow__int64_t_rand_multiply_16.c":38:13)
#loc31 = loc("CWE190_Integer_Overflow__int64_t_rand_multiply_16.c":40:9)
#loc32 = loc("CWE190_Integer_Overflow__int64_t_rand_multiply_16.c":101:1)
#loc33 = loc("CWE190_Integer_Overflow__int64_t_rand_multiply_16.c":105:1)
#loc34 = loc("CWE190_Integer_Overflow__int64_t_rand_multiply_16.c":103:5)
#loc35 = loc("CWE190_Integer_Overflow__int64_t_rand_multiply_16.c":103:13)
#loc36 = loc("CWE190_Integer_Overflow__int64_t_rand_multiply_16.c":104:5)
#loc37 = loc("CWE190_Integer_Overflow__int64_t_rand_multiply_16.c":104:13)
#loc38 = loc("../../../testcasesupport/std_testcase_io.h":14:1)
#loc39 = loc("../../../testcasesupport/std_testcase_io.h":14:33)
#loc40 = loc("CWE190_Integer_Overflow__int64_t_rand_multiply_16.c":71:27)
#loc41 = loc("CWE190_Integer_Overflow__int64_t_rand_multiply_16.c":49:1)
#loc42 = loc("CWE190_Integer_Overflow__int64_t_rand_multiply_16.c":76:1)
#loc43 = loc("CWE190_Integer_Overflow__int64_t_rand_multiply_16.c":51:5)
#loc44 = loc("CWE190_Integer_Overflow__int64_t_rand_multiply_16.c":51:13)
#loc45 = loc("CWE190_Integer_Overflow__int64_t_rand_multiply_16.c":52:12)
#loc46 = loc("CWE190_Integer_Overflow__int64_t_rand_multiply_16.c":52:5)
#loc47 = loc("CWE190_Integer_Overflow__int64_t_rand_multiply_16.c":53:5)
#loc48 = loc("CWE190_Integer_Overflow__int64_t_rand_multiply_16.c":58:5)
#loc49 = loc("CWE190_Integer_Overflow__int64_t_rand_multiply_16.c":53:11)
#loc50 = loc("CWE190_Integer_Overflow__int64_t_rand_multiply_16.c":56:25)
#loc51 = loc("CWE190_Integer_Overflow__int64_t_rand_multiply_16.c":56:9)
#loc52 = loc("CWE190_Integer_Overflow__int64_t_rand_multiply_16.c":57:9)
#loc53 = loc("CWE190_Integer_Overflow__int64_t_rand_multiply_16.c":59:5)
#loc54 = loc("CWE190_Integer_Overflow__int64_t_rand_multiply_16.c":75:5)
#loc55 = loc("CWE190_Integer_Overflow__int64_t_rand_multiply_16.c":59:11)
#loc56 = loc("CWE190_Integer_Overflow__int64_t_rand_multiply_16.c":61:9)
#loc57 = loc("CWE190_Integer_Overflow__int64_t_rand_multiply_16.c":73:9)
#loc58 = loc("CWE190_Integer_Overflow__int64_t_rand_multiply_16.c":61:12)
#loc59 = loc("CWE190_Integer_Overflow__int64_t_rand_multiply_16.c":61:19)
#loc60 = loc("CWE190_Integer_Overflow__int64_t_rand_multiply_16.c":61:17)
#loc61 = loc("CWE190_Integer_Overflow__int64_t_rand_multiply_16.c":62:9)
#loc62 = loc("CWE190_Integer_Overflow__int64_t_rand_multiply_16.c":64:13)
#loc63 = loc("CWE190_Integer_Overflow__int64_t_rand_multiply_16.c":72:13)
#loc64 = loc("CWE190_Integer_Overflow__int64_t_rand_multiply_16.c":64:17)
#loc65 = loc("CWE190_Integer_Overflow__int64_t_rand_multiply_16.c":64:25)
#loc66 = loc("CWE190_Integer_Overflow__int64_t_rand_multiply_16.c":64:35)
#loc67 = loc("CWE190_Integer_Overflow__int64_t_rand_multiply_16.c":64:36)
#loc68 = loc("CWE190_Integer_Overflow__int64_t_rand_multiply_16.c":64:22)
#loc69 = loc("CWE190_Integer_Overflow__int64_t_rand_multiply_16.c":65:13)
#loc70 = loc("CWE190_Integer_Overflow__int64_t_rand_multiply_16.c":68:13)
#loc71 = loc("CWE190_Integer_Overflow__int64_t_rand_multiply_16.c":70:13)
#loc72 = loc("CWE190_Integer_Overflow__int64_t_rand_multiply_16.c":66:17)
#loc73 = loc("CWE190_Integer_Overflow__int64_t_rand_multiply_16.c":66:41)
#loc74 = loc("CWE190_Integer_Overflow__int64_t_rand_multiply_16.c":66:34)
#loc75 = loc("CWE190_Integer_Overflow__int64_t_rand_multiply_16.c":67:35)
#loc76 = loc("CWE190_Integer_Overflow__int64_t_rand_multiply_16.c":67:17)
#loc77 = loc("CWE190_Integer_Overflow__int64_t_rand_multiply_16.c":71:17)
#loc78 = loc("CWE190_Integer_Overflow__int64_t_rand_multiply_16.c":74:9)
#loc79 = loc("CWE190_Integer_Overflow__int64_t_rand_multiply_16.c":79:1)
#loc80 = loc("CWE190_Integer_Overflow__int64_t_rand_multiply_16.c":99:1)
#loc81 = loc("CWE190_Integer_Overflow__int64_t_rand_multiply_16.c":81:5)
#loc82 = loc("CWE190_Integer_Overflow__int64_t_rand_multiply_16.c":81:13)
#loc83 = loc("CWE190_Integer_Overflow__int64_t_rand_multiply_16.c":82:12)
#loc84 = loc("CWE190_Integer_Overflow__int64_t_rand_multiply_16.c":82:5)
#loc85 = loc("CWE190_Integer_Overflow__int64_t_rand_multiply_16.c":83:5)
#loc86 = loc("CWE190_Integer_Overflow__int64_t_rand_multiply_16.c":88:5)
#loc87 = loc("CWE190_Integer_Overflow__int64_t_rand_multiply_16.c":83:11)
#loc88 = loc("CWE190_Integer_Overflow__int64_t_rand_multiply_16.c":86:16)
#loc89 = loc("CWE190_Integer_Overflow__int64_t_rand_multiply_16.c":86:9)
#loc90 = loc("CWE190_Integer_Overflow__int64_t_rand_multiply_16.c":87:9)
#loc91 = loc("CWE190_Integer_Overflow__int64_t_rand_multiply_16.c":89:5)
#loc92 = loc("CWE190_Integer_Overflow__int64_t_rand_multiply_16.c":98:5)
#loc93 = loc("CWE190_Integer_Overflow__int64_t_rand_multiply_16.c":89:11)
#loc94 = loc("CWE190_Integer_Overflow__int64_t_rand_multiply_16.c":91:9)
#loc95 = loc("CWE190_Integer_Overflow__int64_t_rand_multiply_16.c":96:9)
#loc96 = loc("CWE190_Integer_Overflow__int64_t_rand_multiply_16.c":91:12)
#loc97 = loc("CWE190_Integer_Overflow__int64_t_rand_multiply_16.c":91:19)
#loc98 = loc("CWE190_Integer_Overflow__int64_t_rand_multiply_16.c":91:17)
#loc99 = loc("CWE190_Integer_Overflow__int64_t_rand_multiply_16.c":92:9)
#loc100 = loc("CWE190_Integer_Overflow__int64_t_rand_multiply_16.c":94:13)
#loc101 = loc("CWE190_Integer_Overflow__int64_t_rand_multiply_16.c":94:37)
#loc102 = loc("CWE190_Integer_Overflow__int64_t_rand_multiply_16.c":94:30)
#loc103 = loc("CWE190_Integer_Overflow__int64_t_rand_multiply_16.c":95:31)
#loc104 = loc("CWE190_Integer_Overflow__int64_t_rand_multiply_16.c":95:13)
#loc105 = loc("CWE190_Integer_Overflow__int64_t_rand_multiply_16.c":97:9)
#loc106 = loc(fused[#loc1, #loc2])
#loc107 = loc(fused[#loc3, #loc4])
#loc108 = loc(fused[#loc5, #loc6])
#loc109 = loc(fused[#loc7, #loc8])
#loc110 = loc(fused[#loc10, #loc9])
#loc111 = loc(fused[#loc11, #loc12])
#loc112 = loc(fused[#loc15, #loc14])
#loc113 = loc(fused[#loc17, #loc18])
#loc114 = loc(fused[#loc20, #loc21])
#loc115 = loc(fused[#loc22, #loc23])
#loc116 = loc(fused[#loc25, #loc21])
#loc117 = loc(fused[#loc26, #loc27])
#loc118 = loc(fused[#loc32, #loc33])
#loc119 = loc(fused[#loc34, #loc35])
#loc120 = loc(fused[#loc36, #loc37])
#loc121 = loc(fused[#loc38, #loc39])
#loc122 = loc(fused[#loc41, #loc42])
#loc123 = loc(fused[#loc43, #loc44])
#loc124 = loc(fused[#loc46, #loc45])
#loc125 = loc(fused[#loc47, #loc48])
#loc126 = loc(fused[#loc51, #loc50])
#loc127 = loc(fused[#loc53, #loc54])
#loc128 = loc(fused[#loc56, #loc57])
#loc129 = loc(fused[#loc58, #loc59])
#loc130 = loc(fused[#loc61, #loc57])
#loc131 = loc(fused[#loc62, #loc63])
#loc132 = loc(fused[#loc65, #loc66])
#loc133 = loc(fused[#loc64, #loc67])
#loc134 = loc(fused[#loc69, #loc70, #loc71, #loc63])
#loc135 = loc(fused[#loc72, #loc73])
#loc136 = loc(fused[#loc79, #loc80])
#loc137 = loc(fused[#loc81, #loc82])
#loc138 = loc(fused[#loc84, #loc83])
#loc139 = loc(fused[#loc85, #loc86])
#loc140 = loc(fused[#loc89, #loc88])
#loc141 = loc(fused[#loc91, #loc92])
#loc142 = loc(fused[#loc94, #loc95])
#loc143 = loc(fused[#loc96, #loc97])
#loc144 = loc(fused[#loc99, #loc95])
#loc145 = loc(fused[#loc100, #loc101])
