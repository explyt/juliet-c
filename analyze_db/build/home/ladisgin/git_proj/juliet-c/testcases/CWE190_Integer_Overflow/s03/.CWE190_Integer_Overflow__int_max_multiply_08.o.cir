!s32i = !cir.int<s, 32>
!s8i = !cir.int<s, 8>
!void = !cir.void
#fn_attr = #cir<extra({inline = #cir.inline<no>, nothrow = #cir.nothrow, optnone = #cir.optnone})>
module @"/home/ladisgin/git_proj/juliet-c/testcases/CWE190_Integer_Overflow/s03/CWE190_Integer_Overflow__int_max_multiply_08.c" attributes {cir.lang = #cir.lang<c>, cir.sob = #cir.signed_overflow_behavior<undefined>, cir.triple = "x86_64-unknown-linux-gnu", dlti.dl_spec = #dlti.dl_spec<i32 = dense<32> : vector<2xi64>, i8 = dense<8> : vector<2xi64>, i16 = dense<16> : vector<2xi64>, !llvm.ptr<270> = dense<32> : vector<4xi64>, !llvm.ptr<272> = dense<64> : vector<4xi64>, f16 = dense<16> : vector<2xi64>, !llvm.ptr<271> = dense<32> : vector<4xi64>, f64 = dense<64> : vector<2xi64>, f128 = dense<128> : vector<2xi64>, i64 = dense<64> : vector<2xi64>, i128 = dense<128> : vector<2xi64>, f80 = dense<128> : vector<2xi64>, i1 = dense<8> : vector<2xi64>, !llvm.ptr = dense<64> : vector<4xi64>, "dlti.endianness" = "little", "dlti.stack_alignment" = 128 : i64>} {
  cir.func private @printIntLine(!s32i) loc(#loc193)
  cir.func no_proto @CWE190_Integer_Overflow__int_max_multiply_08_bad() extra(#fn_attr) {
    %0 = cir.alloca !s32i, !cir.ptr<!s32i>, ["result", init] {alignment = 4 : i64} loc(#loc195)
    %1 = cir.alloca !s32i, !cir.ptr<!s32i>, ["data"] {alignment = 4 : i64} loc(#loc196)
    %2 = cir.const #cir.int<0> : !s32i loc(#loc9)
    cir.store %2, %1 : !s32i, !cir.ptr<!s32i> loc(#loc197)
    cir.br ^bb1 loc(#loc198)
  ^bb1:  // pred: ^bb0
    %3 = cir.get_global @staticReturnsTrue : !cir.ptr<!cir.func<!s32i ()>> loc(#loc199)
    %4 = cir.call %3() : (!cir.ptr<!cir.func<!s32i ()>>) -> !s32i loc(#loc13)
    %5 = cir.cast(int_to_bool, %4 : !s32i), !cir.bool loc(#loc13)
    cir.brcond %5 ^bb2, ^bb3 loc(#loc200)
  ^bb2:  // pred: ^bb1
    %6 = cir.const #cir.int<2147483647> : !s32i loc(#loc16)
    cir.store %6, %1 : !s32i, !cir.ptr<!s32i> loc(#loc201)
    cir.br ^bb3 loc(#loc12)
  ^bb3:  // 2 preds: ^bb1, ^bb2
    cir.br ^bb4 loc(#loc12)
  ^bb4:  // pred: ^bb3
    cir.br ^bb5 loc(#loc202)
  ^bb5:  // pred: ^bb4
    %7 = cir.get_global @staticReturnsTrue : !cir.ptr<!cir.func<!s32i ()>> loc(#loc203)
    %8 = cir.call %7() : (!cir.ptr<!cir.func<!s32i ()>>) -> !s32i loc(#loc20)
    %9 = cir.cast(int_to_bool, %8 : !s32i), !cir.bool loc(#loc20)
    cir.brcond %9 ^bb6, ^bb11 loc(#loc204)
  ^bb6:  // pred: ^bb5
    cir.br ^bb7 loc(#loc205)
  ^bb7:  // pred: ^bb6
    %10 = cir.load %1 : !cir.ptr<!s32i>, !s32i loc(#loc25)
    %11 = cir.const #cir.int<0> : !s32i loc(#loc26)
    %12 = cir.cmp(gt, %10, %11) : !s32i, !cir.bool loc(#loc206)
    cir.brcond %12 ^bb8, ^bb9 loc(#loc207)
  ^bb8:  // pred: ^bb7
    %13 = cir.load %1 : !cir.ptr<!s32i>, !s32i loc(#loc28)
    %14 = cir.const #cir.int<2> : !s32i loc(#loc6)
    %15 = cir.binop(mul, %13, %14) nsw : !s32i loc(#loc28)
    cir.store %15, %0 : !s32i, !cir.ptr<!s32i> loc(#loc195)
    %16 = cir.load %0 : !cir.ptr<!s32i>, !s32i loc(#loc29)
    cir.call @printIntLine(%16) : (!s32i) -> () loc(#loc30)
    cir.br ^bb9 loc(#loc24)
  ^bb9:  // 2 preds: ^bb7, ^bb8
    cir.br ^bb10 loc(#loc24)
  ^bb10:  // pred: ^bb9
    cir.br ^bb11 loc(#loc19)
  ^bb11:  // 2 preds: ^bb5, ^bb10
    cir.br ^bb12 loc(#loc19)
  ^bb12:  // pred: ^bb11
    cir.return loc(#loc4)
  } loc(#loc194)
  cir.func no_proto @CWE190_Integer_Overflow__int_max_multiply_08_good() extra(#fn_attr) {
    %0 = cir.get_global @goodB2G1 : !cir.ptr<!cir.func<!void ()>> loc(#loc209)
    cir.call %0() : (!cir.ptr<!cir.func<!void ()>>) -> () loc(#loc33)
    %1 = cir.get_global @goodB2G2 : !cir.ptr<!cir.func<!void ()>> loc(#loc210)
    cir.call %1() : (!cir.ptr<!cir.func<!void ()>>) -> () loc(#loc35)
    %2 = cir.get_global @goodG2B1 : !cir.ptr<!cir.func<!void ()>> loc(#loc211)
    cir.call %2() : (!cir.ptr<!cir.func<!void ()>>) -> () loc(#loc37)
    %3 = cir.get_global @goodG2B2 : !cir.ptr<!cir.func<!void ()>> loc(#loc212)
    cir.call %3() : (!cir.ptr<!cir.func<!void ()>>) -> () loc(#loc39)
    cir.return loc(#loc32)
  } loc(#loc208)
  cir.func no_proto internal private @staticReturnsTrue() -> !s32i extra(#fn_attr) {
    %0 = cir.alloca !s32i, !cir.ptr<!s32i>, ["__retval"] {alignment = 4 : i64} loc(#loc42)
    %1 = cir.const #cir.int<1> : !s32i loc(#loc43)
    cir.store %1, %0 : !s32i, !cir.ptr<!s32i> loc(#loc214)
    %2 = cir.load %0 : !cir.ptr<!s32i>, !s32i loc(#loc214)
    cir.return %2 : !s32i loc(#loc214)
  } loc(#loc213)
  cir.func private @printLine(!cir.ptr<!s8i>) loc(#loc215)
  cir.global "private" constant cir_private dsolocal @".str" = #cir.const_array<"Benign, fixed string\00" : !cir.array<!s8i x 21>> : !cir.array<!s8i x 21> {alignment = 1 : i64} loc(#loc47)
  cir.global "private" constant cir_private dsolocal @".str.1" = #cir.const_array<"data value is too large to perform arithmetic safely.\00" : !cir.array<!s8i x 54>> : !cir.array<!s8i x 54> {alignment = 1 : i64} loc(#loc48)
  cir.func no_proto internal private @goodB2G1() extra(#fn_attr) {
    %0 = cir.alloca !s32i, !cir.ptr<!s32i>, ["result", init] {alignment = 4 : i64} loc(#loc217)
    %1 = cir.alloca !s32i, !cir.ptr<!s32i>, ["data"] {alignment = 4 : i64} loc(#loc218)
    %2 = cir.const #cir.int<0> : !s32i loc(#loc55)
    cir.store %2, %1 : !s32i, !cir.ptr<!s32i> loc(#loc219)
    cir.br ^bb1 loc(#loc220)
  ^bb1:  // pred: ^bb0
    %3 = cir.get_global @staticReturnsTrue : !cir.ptr<!cir.func<!s32i ()>> loc(#loc221)
    %4 = cir.call @staticReturnsTrue() : () -> !s32i loc(#loc59)
    %5 = cir.cast(int_to_bool, %4 : !s32i), !cir.bool loc(#loc59)
    cir.brcond %5 ^bb2, ^bb3 loc(#loc222)
  ^bb2:  // pred: ^bb1
    %6 = cir.const #cir.int<2147483647> : !s32i loc(#loc62)
    cir.store %6, %1 : !s32i, !cir.ptr<!s32i> loc(#loc223)
    cir.br ^bb3 loc(#loc58)
  ^bb3:  // 2 preds: ^bb1, ^bb2
    cir.br ^bb4 loc(#loc58)
  ^bb4:  // pred: ^bb3
    cir.br ^bb5 loc(#loc224)
  ^bb5:  // pred: ^bb4
    %7 = cir.get_global @staticReturnsFalse : !cir.ptr<!cir.func<!s32i ()>> loc(#loc225)
    %8 = cir.call %7() : (!cir.ptr<!cir.func<!s32i ()>>) -> !s32i loc(#loc66)
    %9 = cir.cast(int_to_bool, %8 : !s32i), !cir.bool loc(#loc66)
    cir.brcond %9 ^bb6, ^bb7 loc(#loc226)
  ^bb6:  // pred: ^bb5
    %10 = cir.get_global @".str" : !cir.ptr<!cir.array<!s8i x 21>> loc(#loc47)
    %11 = cir.cast(array_to_ptrdecay, %10 : !cir.ptr<!cir.array<!s8i x 21>>), !cir.ptr<!s8i> loc(#loc47)
    cir.call @printLine(%11) : (!cir.ptr<!s8i>) -> () loc(#loc71)
    cir.br ^bb17 loc(#loc69)
  ^bb7:  // pred: ^bb5
    cir.br ^bb8 loc(#loc227)
  ^bb8:  // pred: ^bb7
    %12 = cir.load %1 : !cir.ptr<!s32i>, !s32i loc(#loc74)
    %13 = cir.const #cir.int<0> : !s32i loc(#loc75)
    %14 = cir.cmp(gt, %12, %13) : !s32i, !cir.bool loc(#loc228)
    cir.brcond %14 ^bb9, ^bb15 loc(#loc229)
  ^bb9:  // pred: ^bb8
    cir.br ^bb10 loc(#loc230)
  ^bb10:  // pred: ^bb9
    %15 = cir.load %1 : !cir.ptr<!s32i>, !s32i loc(#loc79)
    %16 = cir.const #cir.int<2147483647> : !s32i loc(#loc80)
    %17 = cir.const #cir.int<2> : !s32i loc(#loc81)
    %18 = cir.binop(div, %16, %17) : !s32i loc(#loc231)
    %19 = cir.cmp(lt, %15, %18) : !s32i, !cir.bool loc(#loc232)
    cir.brcond %19 ^bb11, ^bb12 loc(#loc233)
  ^bb11:  // pred: ^bb10
    %20 = cir.load %1 : !cir.ptr<!s32i>, !s32i loc(#loc86)
    %21 = cir.const #cir.int<2> : !s32i loc(#loc52)
    %22 = cir.binop(mul, %20, %21) nsw : !s32i loc(#loc86)
    cir.store %22, %0 : !s32i, !cir.ptr<!s32i> loc(#loc217)
    %23 = cir.load %0 : !cir.ptr<!s32i>, !s32i loc(#loc87)
    cir.call @printIntLine(%23) : (!s32i) -> () loc(#loc88)
    cir.br ^bb13 loc(#loc84)
  ^bb12:  // pred: ^bb10
    %24 = cir.get_global @".str.1" : !cir.ptr<!cir.array<!s8i x 54>> loc(#loc48)
    %25 = cir.cast(array_to_ptrdecay, %24 : !cir.ptr<!cir.array<!s8i x 54>>), !cir.ptr<!s8i> loc(#loc48)
    cir.call @printLine(%25) : (!cir.ptr<!s8i>) -> () loc(#loc89)
    cir.br ^bb13 loc(#loc78)
  ^bb13:  // 2 preds: ^bb11, ^bb12
    cir.br ^bb14 loc(#loc78)
  ^bb14:  // pred: ^bb13
    cir.br ^bb15 loc(#loc73)
  ^bb15:  // 2 preds: ^bb8, ^bb14
    cir.br ^bb16 loc(#loc73)
  ^bb16:  // pred: ^bb15
    cir.br ^bb17 loc(#loc65)
  ^bb17:  // 2 preds: ^bb6, ^bb16
    cir.br ^bb18 loc(#loc65)
  ^bb18:  // pred: ^bb17
    cir.return loc(#loc50)
  } loc(#loc216)
  cir.func no_proto internal private @staticReturnsFalse() -> !s32i extra(#fn_attr) {
    %0 = cir.alloca !s32i, !cir.ptr<!s32i>, ["__retval"] {alignment = 4 : i64} loc(#loc91)
    %1 = cir.const #cir.int<0> : !s32i loc(#loc92)
    cir.store %1, %0 : !s32i, !cir.ptr<!s32i> loc(#loc235)
    %2 = cir.load %0 : !cir.ptr<!s32i>, !s32i loc(#loc235)
    cir.return %2 : !s32i loc(#loc235)
  } loc(#loc234)
  cir.func no_proto internal private @goodB2G2() extra(#fn_attr) {
    %0 = cir.alloca !s32i, !cir.ptr<!s32i>, ["result", init] {alignment = 4 : i64} loc(#loc237)
    %1 = cir.alloca !s32i, !cir.ptr<!s32i>, ["data"] {alignment = 4 : i64} loc(#loc238)
    %2 = cir.const #cir.int<0> : !s32i loc(#loc100)
    cir.store %2, %1 : !s32i, !cir.ptr<!s32i> loc(#loc239)
    cir.br ^bb1 loc(#loc240)
  ^bb1:  // pred: ^bb0
    %3 = cir.get_global @staticReturnsTrue : !cir.ptr<!cir.func<!s32i ()>> loc(#loc241)
    %4 = cir.call @staticReturnsTrue() : () -> !s32i loc(#loc104)
    %5 = cir.cast(int_to_bool, %4 : !s32i), !cir.bool loc(#loc104)
    cir.brcond %5 ^bb2, ^bb3 loc(#loc242)
  ^bb2:  // pred: ^bb1
    %6 = cir.const #cir.int<2147483647> : !s32i loc(#loc107)
    cir.store %6, %1 : !s32i, !cir.ptr<!s32i> loc(#loc243)
    cir.br ^bb3 loc(#loc103)
  ^bb3:  // 2 preds: ^bb1, ^bb2
    cir.br ^bb4 loc(#loc103)
  ^bb4:  // pred: ^bb3
    cir.br ^bb5 loc(#loc244)
  ^bb5:  // pred: ^bb4
    %7 = cir.get_global @staticReturnsTrue : !cir.ptr<!cir.func<!s32i ()>> loc(#loc245)
    %8 = cir.call @staticReturnsTrue() : () -> !s32i loc(#loc111)
    %9 = cir.cast(int_to_bool, %8 : !s32i), !cir.bool loc(#loc111)
    cir.brcond %9 ^bb6, ^bb16 loc(#loc246)
  ^bb6:  // pred: ^bb5
    cir.br ^bb7 loc(#loc247)
  ^bb7:  // pred: ^bb6
    %10 = cir.load %1 : !cir.ptr<!s32i>, !s32i loc(#loc116)
    %11 = cir.const #cir.int<0> : !s32i loc(#loc117)
    %12 = cir.cmp(gt, %10, %11) : !s32i, !cir.bool loc(#loc248)
    cir.brcond %12 ^bb8, ^bb14 loc(#loc249)
  ^bb8:  // pred: ^bb7
    cir.br ^bb9 loc(#loc250)
  ^bb9:  // pred: ^bb8
    %13 = cir.load %1 : !cir.ptr<!s32i>, !s32i loc(#loc121)
    %14 = cir.const #cir.int<2147483647> : !s32i loc(#loc122)
    %15 = cir.const #cir.int<2> : !s32i loc(#loc123)
    %16 = cir.binop(div, %14, %15) : !s32i loc(#loc251)
    %17 = cir.cmp(lt, %13, %16) : !s32i, !cir.bool loc(#loc252)
    cir.brcond %17 ^bb10, ^bb11 loc(#loc253)
  ^bb10:  // pred: ^bb9
    %18 = cir.load %1 : !cir.ptr<!s32i>, !s32i loc(#loc128)
    %19 = cir.const #cir.int<2> : !s32i loc(#loc97)
    %20 = cir.binop(mul, %18, %19) nsw : !s32i loc(#loc128)
    cir.store %20, %0 : !s32i, !cir.ptr<!s32i> loc(#loc237)
    %21 = cir.load %0 : !cir.ptr<!s32i>, !s32i loc(#loc129)
    cir.call @printIntLine(%21) : (!s32i) -> () loc(#loc130)
    cir.br ^bb12 loc(#loc126)
  ^bb11:  // pred: ^bb9
    %22 = cir.get_global @".str.1" : !cir.ptr<!cir.array<!s8i x 54>> loc(#loc131)
    %23 = cir.cast(array_to_ptrdecay, %22 : !cir.ptr<!cir.array<!s8i x 54>>), !cir.ptr<!s8i> loc(#loc131)
    cir.call @printLine(%23) : (!cir.ptr<!s8i>) -> () loc(#loc132)
    cir.br ^bb12 loc(#loc120)
  ^bb12:  // 2 preds: ^bb10, ^bb11
    cir.br ^bb13 loc(#loc120)
  ^bb13:  // pred: ^bb12
    cir.br ^bb14 loc(#loc115)
  ^bb14:  // 2 preds: ^bb7, ^bb13
    cir.br ^bb15 loc(#loc115)
  ^bb15:  // pred: ^bb14
    cir.br ^bb16 loc(#loc110)
  ^bb16:  // 2 preds: ^bb5, ^bb15
    cir.br ^bb17 loc(#loc110)
  ^bb17:  // pred: ^bb16
    cir.return loc(#loc95)
  } loc(#loc236)
  cir.func no_proto internal private @goodG2B1() extra(#fn_attr) {
    %0 = cir.alloca !s32i, !cir.ptr<!s32i>, ["result", init] {alignment = 4 : i64} loc(#loc255)
    %1 = cir.alloca !s32i, !cir.ptr<!s32i>, ["data"] {alignment = 4 : i64} loc(#loc256)
    %2 = cir.const #cir.int<0> : !s32i loc(#loc139)
    cir.store %2, %1 : !s32i, !cir.ptr<!s32i> loc(#loc257)
    cir.br ^bb1 loc(#loc258)
  ^bb1:  // pred: ^bb0
    %3 = cir.get_global @staticReturnsFalse : !cir.ptr<!cir.func<!s32i ()>> loc(#loc259)
    %4 = cir.call @staticReturnsFalse() : () -> !s32i loc(#loc143)
    %5 = cir.cast(int_to_bool, %4 : !s32i), !cir.bool loc(#loc143)
    cir.brcond %5 ^bb2, ^bb3 loc(#loc260)
  ^bb2:  // pred: ^bb1
    %6 = cir.get_global @".str" : !cir.ptr<!cir.array<!s8i x 21>> loc(#loc148)
    %7 = cir.cast(array_to_ptrdecay, %6 : !cir.ptr<!cir.array<!s8i x 21>>), !cir.ptr<!s8i> loc(#loc148)
    cir.call @printLine(%7) : (!cir.ptr<!s8i>) -> () loc(#loc149)
    cir.br ^bb4 loc(#loc146)
  ^bb3:  // pred: ^bb1
    %8 = cir.const #cir.int<2> : !s32i loc(#loc150)
    cir.store %8, %1 : !s32i, !cir.ptr<!s32i> loc(#loc261)
    cir.br ^bb4 loc(#loc142)
  ^bb4:  // 2 preds: ^bb2, ^bb3
    cir.br ^bb5 loc(#loc142)
  ^bb5:  // pred: ^bb4
    cir.br ^bb6 loc(#loc262)
  ^bb6:  // pred: ^bb5
    %9 = cir.get_global @staticReturnsTrue : !cir.ptr<!cir.func<!s32i ()>> loc(#loc263)
    %10 = cir.call @staticReturnsTrue() : () -> !s32i loc(#loc154)
    %11 = cir.cast(int_to_bool, %10 : !s32i), !cir.bool loc(#loc154)
    cir.brcond %11 ^bb7, ^bb12 loc(#loc264)
  ^bb7:  // pred: ^bb6
    cir.br ^bb8 loc(#loc265)
  ^bb8:  // pred: ^bb7
    %12 = cir.load %1 : !cir.ptr<!s32i>, !s32i loc(#loc159)
    %13 = cir.const #cir.int<0> : !s32i loc(#loc160)
    %14 = cir.cmp(gt, %12, %13) : !s32i, !cir.bool loc(#loc266)
    cir.brcond %14 ^bb9, ^bb10 loc(#loc267)
  ^bb9:  // pred: ^bb8
    %15 = cir.load %1 : !cir.ptr<!s32i>, !s32i loc(#loc162)
    %16 = cir.const #cir.int<2> : !s32i loc(#loc136)
    %17 = cir.binop(mul, %15, %16) nsw : !s32i loc(#loc162)
    cir.store %17, %0 : !s32i, !cir.ptr<!s32i> loc(#loc255)
    %18 = cir.load %0 : !cir.ptr<!s32i>, !s32i loc(#loc163)
    cir.call @printIntLine(%18) : (!s32i) -> () loc(#loc164)
    cir.br ^bb10 loc(#loc158)
  ^bb10:  // 2 preds: ^bb8, ^bb9
    cir.br ^bb11 loc(#loc158)
  ^bb11:  // pred: ^bb10
    cir.br ^bb12 loc(#loc153)
  ^bb12:  // 2 preds: ^bb6, ^bb11
    cir.br ^bb13 loc(#loc153)
  ^bb13:  // pred: ^bb12
    cir.return loc(#loc134)
  } loc(#loc254)
  cir.func no_proto internal private @goodG2B2() extra(#fn_attr) {
    %0 = cir.alloca !s32i, !cir.ptr<!s32i>, ["result", init] {alignment = 4 : i64} loc(#loc269)
    %1 = cir.alloca !s32i, !cir.ptr<!s32i>, ["data"] {alignment = 4 : i64} loc(#loc270)
    %2 = cir.const #cir.int<0> : !s32i loc(#loc171)
    cir.store %2, %1 : !s32i, !cir.ptr<!s32i> loc(#loc271)
    cir.br ^bb1 loc(#loc272)
  ^bb1:  // pred: ^bb0
    %3 = cir.get_global @staticReturnsTrue : !cir.ptr<!cir.func<!s32i ()>> loc(#loc273)
    %4 = cir.call @staticReturnsTrue() : () -> !s32i loc(#loc175)
    %5 = cir.cast(int_to_bool, %4 : !s32i), !cir.bool loc(#loc175)
    cir.brcond %5 ^bb2, ^bb3 loc(#loc274)
  ^bb2:  // pred: ^bb1
    %6 = cir.const #cir.int<2> : !s32i loc(#loc178)
    cir.store %6, %1 : !s32i, !cir.ptr<!s32i> loc(#loc275)
    cir.br ^bb3 loc(#loc174)
  ^bb3:  // 2 preds: ^bb1, ^bb2
    cir.br ^bb4 loc(#loc174)
  ^bb4:  // pred: ^bb3
    cir.br ^bb5 loc(#loc276)
  ^bb5:  // pred: ^bb4
    %7 = cir.get_global @staticReturnsTrue : !cir.ptr<!cir.func<!s32i ()>> loc(#loc277)
    %8 = cir.call @staticReturnsTrue() : () -> !s32i loc(#loc182)
    %9 = cir.cast(int_to_bool, %8 : !s32i), !cir.bool loc(#loc182)
    cir.brcond %9 ^bb6, ^bb11 loc(#loc278)
  ^bb6:  // pred: ^bb5
    cir.br ^bb7 loc(#loc279)
  ^bb7:  // pred: ^bb6
    %10 = cir.load %1 : !cir.ptr<!s32i>, !s32i loc(#loc187)
    %11 = cir.const #cir.int<0> : !s32i loc(#loc188)
    %12 = cir.cmp(gt, %10, %11) : !s32i, !cir.bool loc(#loc280)
    cir.brcond %12 ^bb8, ^bb9 loc(#loc281)
  ^bb8:  // pred: ^bb7
    %13 = cir.load %1 : !cir.ptr<!s32i>, !s32i loc(#loc190)
    %14 = cir.const #cir.int<2> : !s32i loc(#loc168)
    %15 = cir.binop(mul, %13, %14) nsw : !s32i loc(#loc190)
    cir.store %15, %0 : !s32i, !cir.ptr<!s32i> loc(#loc269)
    %16 = cir.load %0 : !cir.ptr<!s32i>, !s32i loc(#loc191)
    cir.call @printIntLine(%16) : (!s32i) -> () loc(#loc192)
    cir.br ^bb9 loc(#loc186)
  ^bb9:  // 2 preds: ^bb7, ^bb8
    cir.br ^bb10 loc(#loc186)
  ^bb10:  // pred: ^bb9
    cir.br ^bb11 loc(#loc181)
  ^bb11:  // 2 preds: ^bb5, ^bb10
    cir.br ^bb12 loc(#loc181)
  ^bb12:  // pred: ^bb11
    cir.return loc(#loc166)
  } loc(#loc268)
} loc(#loc)
#loc = loc("/home/ladisgin/git_proj/juliet-c/testcases/CWE190_Integer_Overflow/s03/CWE190_Integer_Overflow__int_max_multiply_08.c":0:0)
#loc1 = loc("../../../testcasesupport/std_testcase_io.h":18:1)
#loc2 = loc("../../../testcasesupport/std_testcase_io.h":18:33)
#loc3 = loc("CWE190_Integer_Overflow__int_max_multiply_08.c":35:1)
#loc4 = loc("CWE190_Integer_Overflow__int_max_multiply_08.c":54:1)
#loc5 = loc("CWE190_Integer_Overflow__int_max_multiply_08.c":50:13)
#loc6 = loc("CWE190_Integer_Overflow__int_max_multiply_08.c":50:33)
#loc7 = loc("CWE190_Integer_Overflow__int_max_multiply_08.c":37:5)
#loc8 = loc("CWE190_Integer_Overflow__int_max_multiply_08.c":37:9)
#loc9 = loc("CWE190_Integer_Overflow__int_max_multiply_08.c":39:12)
#loc10 = loc("CWE190_Integer_Overflow__int_max_multiply_08.c":39:5)
#loc11 = loc("CWE190_Integer_Overflow__int_max_multiply_08.c":40:5)
#loc12 = loc("CWE190_Integer_Overflow__int_max_multiply_08.c":44:5)
#loc13 = loc("CWE190_Integer_Overflow__int_max_multiply_08.c":40:8)
#loc14 = loc("CWE190_Integer_Overflow__int_max_multiply_08.c":40:26)
#loc15 = loc("CWE190_Integer_Overflow__int_max_multiply_08.c":41:5)
#loc16 = loc("CWE190_Integer_Overflow__int_max_multiply_08.c":43:16)
#loc17 = loc("CWE190_Integer_Overflow__int_max_multiply_08.c":43:9)
#loc18 = loc("CWE190_Integer_Overflow__int_max_multiply_08.c":45:5)
#loc19 = loc("CWE190_Integer_Overflow__int_max_multiply_08.c":53:5)
#loc20 = loc("CWE190_Integer_Overflow__int_max_multiply_08.c":45:8)
#loc21 = loc("CWE190_Integer_Overflow__int_max_multiply_08.c":45:26)
#loc22 = loc("CWE190_Integer_Overflow__int_max_multiply_08.c":46:5)
#loc23 = loc("CWE190_Integer_Overflow__int_max_multiply_08.c":47:9)
#loc24 = loc("CWE190_Integer_Overflow__int_max_multiply_08.c":52:9)
#loc25 = loc("CWE190_Integer_Overflow__int_max_multiply_08.c":47:12)
#loc26 = loc("CWE190_Integer_Overflow__int_max_multiply_08.c":47:19)
#loc27 = loc("CWE190_Integer_Overflow__int_max_multiply_08.c":48:9)
#loc28 = loc("CWE190_Integer_Overflow__int_max_multiply_08.c":50:26)
#loc29 = loc("CWE190_Integer_Overflow__int_max_multiply_08.c":51:26)
#loc30 = loc("CWE190_Integer_Overflow__int_max_multiply_08.c":51:13)
#loc31 = loc("CWE190_Integer_Overflow__int_max_multiply_08.c":172:1)
#loc32 = loc("CWE190_Integer_Overflow__int_max_multiply_08.c":178:1)
#loc33 = loc("CWE190_Integer_Overflow__int_max_multiply_08.c":174:5)
#loc34 = loc("CWE190_Integer_Overflow__int_max_multiply_08.c":174:14)
#loc35 = loc("CWE190_Integer_Overflow__int_max_multiply_08.c":175:5)
#loc36 = loc("CWE190_Integer_Overflow__int_max_multiply_08.c":175:14)
#loc37 = loc("CWE190_Integer_Overflow__int_max_multiply_08.c":176:5)
#loc38 = loc("CWE190_Integer_Overflow__int_max_multiply_08.c":176:14)
#loc39 = loc("CWE190_Integer_Overflow__int_max_multiply_08.c":177:5)
#loc40 = loc("CWE190_Integer_Overflow__int_max_multiply_08.c":177:14)
#loc41 = loc("CWE190_Integer_Overflow__int_max_multiply_08.c":23:1)
#loc42 = loc("CWE190_Integer_Overflow__int_max_multiply_08.c":26:1)
#loc43 = loc("CWE190_Integer_Overflow__int_max_multiply_08.c":25:12)
#loc44 = loc("CWE190_Integer_Overflow__int_max_multiply_08.c":25:5)
#loc45 = loc("../../../testcasesupport/std_testcase_io.h":14:1)
#loc46 = loc("../../../testcasesupport/std_testcase_io.h":14:33)
#loc47 = loc("CWE190_Integer_Overflow__int_max_multiply_08.c":74:19)
#loc48 = loc("CWE190_Integer_Overflow__int_max_multiply_08.c":88:27)
#loc49 = loc("CWE190_Integer_Overflow__int_max_multiply_08.c":61:1)
#loc50 = loc("CWE190_Integer_Overflow__int_max_multiply_08.c":92:1)
#loc51 = loc("CWE190_Integer_Overflow__int_max_multiply_08.c":83:17)
#loc52 = loc("CWE190_Integer_Overflow__int_max_multiply_08.c":83:37)
#loc53 = loc("CWE190_Integer_Overflow__int_max_multiply_08.c":63:5)
#loc54 = loc("CWE190_Integer_Overflow__int_max_multiply_08.c":63:9)
#loc55 = loc("CWE190_Integer_Overflow__int_max_multiply_08.c":65:12)
#loc56 = loc("CWE190_Integer_Overflow__int_max_multiply_08.c":65:5)
#loc57 = loc("CWE190_Integer_Overflow__int_max_multiply_08.c":66:5)
#loc58 = loc("CWE190_Integer_Overflow__int_max_multiply_08.c":70:5)
#loc59 = loc("CWE190_Integer_Overflow__int_max_multiply_08.c":66:8)
#loc60 = loc("CWE190_Integer_Overflow__int_max_multiply_08.c":66:26)
#loc61 = loc("CWE190_Integer_Overflow__int_max_multiply_08.c":67:5)
#loc62 = loc("CWE190_Integer_Overflow__int_max_multiply_08.c":69:16)
#loc63 = loc("CWE190_Integer_Overflow__int_max_multiply_08.c":69:9)
#loc64 = loc("CWE190_Integer_Overflow__int_max_multiply_08.c":71:5)
#loc65 = loc("CWE190_Integer_Overflow__int_max_multiply_08.c":91:5)
#loc66 = loc("CWE190_Integer_Overflow__int_max_multiply_08.c":71:8)
#loc67 = loc("CWE190_Integer_Overflow__int_max_multiply_08.c":71:27)
#loc68 = loc("CWE190_Integer_Overflow__int_max_multiply_08.c":72:5)
#loc69 = loc("CWE190_Integer_Overflow__int_max_multiply_08.c":75:5)
#loc70 = loc("CWE190_Integer_Overflow__int_max_multiply_08.c":77:5)
#loc71 = loc("CWE190_Integer_Overflow__int_max_multiply_08.c":74:9)
#loc72 = loc("CWE190_Integer_Overflow__int_max_multiply_08.c":78:9)
#loc73 = loc("CWE190_Integer_Overflow__int_max_multiply_08.c":90:9)
#loc74 = loc("CWE190_Integer_Overflow__int_max_multiply_08.c":78:12)
#loc75 = loc("CWE190_Integer_Overflow__int_max_multiply_08.c":78:19)
#loc76 = loc("CWE190_Integer_Overflow__int_max_multiply_08.c":79:9)
#loc77 = loc("CWE190_Integer_Overflow__int_max_multiply_08.c":81:13)
#loc78 = loc("CWE190_Integer_Overflow__int_max_multiply_08.c":89:13)
#loc79 = loc("CWE190_Integer_Overflow__int_max_multiply_08.c":81:17)
#loc80 = loc("CWE190_Integer_Overflow__int_max_multiply_08.c":81:25)
#loc81 = loc("CWE190_Integer_Overflow__int_max_multiply_08.c":81:33)
#loc82 = loc("CWE190_Integer_Overflow__int_max_multiply_08.c":81:34)
#loc83 = loc("CWE190_Integer_Overflow__int_max_multiply_08.c":82:13)
#loc84 = loc("CWE190_Integer_Overflow__int_max_multiply_08.c":85:13)
#loc85 = loc("CWE190_Integer_Overflow__int_max_multiply_08.c":87:13)
#loc86 = loc("CWE190_Integer_Overflow__int_max_multiply_08.c":83:30)
#loc87 = loc("CWE190_Integer_Overflow__int_max_multiply_08.c":84:30)
#loc88 = loc("CWE190_Integer_Overflow__int_max_multiply_08.c":84:17)
#loc89 = loc("CWE190_Integer_Overflow__int_max_multiply_08.c":88:17)
#loc90 = loc("CWE190_Integer_Overflow__int_max_multiply_08.c":28:1)
#loc91 = loc("CWE190_Integer_Overflow__int_max_multiply_08.c":31:1)
#loc92 = loc("CWE190_Integer_Overflow__int_max_multiply_08.c":30:12)
#loc93 = loc("CWE190_Integer_Overflow__int_max_multiply_08.c":30:5)
#loc94 = loc("CWE190_Integer_Overflow__int_max_multiply_08.c":95:1)
#loc95 = loc("CWE190_Integer_Overflow__int_max_multiply_08.c":121:1)
#loc96 = loc("CWE190_Integer_Overflow__int_max_multiply_08.c":112:17)
#loc97 = loc("CWE190_Integer_Overflow__int_max_multiply_08.c":112:37)
#loc98 = loc("CWE190_Integer_Overflow__int_max_multiply_08.c":97:5)
#loc99 = loc("CWE190_Integer_Overflow__int_max_multiply_08.c":97:9)
#loc100 = loc("CWE190_Integer_Overflow__int_max_multiply_08.c":99:12)
#loc101 = loc("CWE190_Integer_Overflow__int_max_multiply_08.c":99:5)
#loc102 = loc("CWE190_Integer_Overflow__int_max_multiply_08.c":100:5)
#loc103 = loc("CWE190_Integer_Overflow__int_max_multiply_08.c":104:5)
#loc104 = loc("CWE190_Integer_Overflow__int_max_multiply_08.c":100:8)
#loc105 = loc("CWE190_Integer_Overflow__int_max_multiply_08.c":100:26)
#loc106 = loc("CWE190_Integer_Overflow__int_max_multiply_08.c":101:5)
#loc107 = loc("CWE190_Integer_Overflow__int_max_multiply_08.c":103:16)
#loc108 = loc("CWE190_Integer_Overflow__int_max_multiply_08.c":103:9)
#loc109 = loc("CWE190_Integer_Overflow__int_max_multiply_08.c":105:5)
#loc110 = loc("CWE190_Integer_Overflow__int_max_multiply_08.c":120:5)
#loc111 = loc("CWE190_Integer_Overflow__int_max_multiply_08.c":105:8)
#loc112 = loc("CWE190_Integer_Overflow__int_max_multiply_08.c":105:26)
#loc113 = loc("CWE190_Integer_Overflow__int_max_multiply_08.c":106:5)
#loc114 = loc("CWE190_Integer_Overflow__int_max_multiply_08.c":107:9)
#loc115 = loc("CWE190_Integer_Overflow__int_max_multiply_08.c":119:9)
#loc116 = loc("CWE190_Integer_Overflow__int_max_multiply_08.c":107:12)
#loc117 = loc("CWE190_Integer_Overflow__int_max_multiply_08.c":107:19)
#loc118 = loc("CWE190_Integer_Overflow__int_max_multiply_08.c":108:9)
#loc119 = loc("CWE190_Integer_Overflow__int_max_multiply_08.c":110:13)
#loc120 = loc("CWE190_Integer_Overflow__int_max_multiply_08.c":118:13)
#loc121 = loc("CWE190_Integer_Overflow__int_max_multiply_08.c":110:17)
#loc122 = loc("CWE190_Integer_Overflow__int_max_multiply_08.c":110:25)
#loc123 = loc("CWE190_Integer_Overflow__int_max_multiply_08.c":110:33)
#loc124 = loc("CWE190_Integer_Overflow__int_max_multiply_08.c":110:34)
#loc125 = loc("CWE190_Integer_Overflow__int_max_multiply_08.c":111:13)
#loc126 = loc("CWE190_Integer_Overflow__int_max_multiply_08.c":114:13)
#loc127 = loc("CWE190_Integer_Overflow__int_max_multiply_08.c":116:13)
#loc128 = loc("CWE190_Integer_Overflow__int_max_multiply_08.c":112:30)
#loc129 = loc("CWE190_Integer_Overflow__int_max_multiply_08.c":113:30)
#loc130 = loc("CWE190_Integer_Overflow__int_max_multiply_08.c":113:17)
#loc131 = loc("CWE190_Integer_Overflow__int_max_multiply_08.c":117:27)
#loc132 = loc("CWE190_Integer_Overflow__int_max_multiply_08.c":117:17)
#loc133 = loc("CWE190_Integer_Overflow__int_max_multiply_08.c":124:1)
#loc134 = loc("CWE190_Integer_Overflow__int_max_multiply_08.c":148:1)
#loc135 = loc("CWE190_Integer_Overflow__int_max_multiply_08.c":144:13)
#loc136 = loc("CWE190_Integer_Overflow__int_max_multiply_08.c":144:33)
#loc137 = loc("CWE190_Integer_Overflow__int_max_multiply_08.c":126:5)
#loc138 = loc("CWE190_Integer_Overflow__int_max_multiply_08.c":126:9)
#loc139 = loc("CWE190_Integer_Overflow__int_max_multiply_08.c":128:12)
#loc140 = loc("CWE190_Integer_Overflow__int_max_multiply_08.c":128:5)
#loc141 = loc("CWE190_Integer_Overflow__int_max_multiply_08.c":129:5)
#loc142 = loc("CWE190_Integer_Overflow__int_max_multiply_08.c":138:5)
#loc143 = loc("CWE190_Integer_Overflow__int_max_multiply_08.c":129:8)
#loc144 = loc("CWE190_Integer_Overflow__int_max_multiply_08.c":129:27)
#loc145 = loc("CWE190_Integer_Overflow__int_max_multiply_08.c":130:5)
#loc146 = loc("CWE190_Integer_Overflow__int_max_multiply_08.c":133:5)
#loc147 = loc("CWE190_Integer_Overflow__int_max_multiply_08.c":135:5)
#loc148 = loc("CWE190_Integer_Overflow__int_max_multiply_08.c":132:19)
#loc149 = loc("CWE190_Integer_Overflow__int_max_multiply_08.c":132:9)
#loc150 = loc("CWE190_Integer_Overflow__int_max_multiply_08.c":137:16)
#loc151 = loc("CWE190_Integer_Overflow__int_max_multiply_08.c":137:9)
#loc152 = loc("CWE190_Integer_Overflow__int_max_multiply_08.c":139:5)
#loc153 = loc("CWE190_Integer_Overflow__int_max_multiply_08.c":147:5)
#loc154 = loc("CWE190_Integer_Overflow__int_max_multiply_08.c":139:8)
#loc155 = loc("CWE190_Integer_Overflow__int_max_multiply_08.c":139:26)
#loc156 = loc("CWE190_Integer_Overflow__int_max_multiply_08.c":140:5)
#loc157 = loc("CWE190_Integer_Overflow__int_max_multiply_08.c":141:9)
#loc158 = loc("CWE190_Integer_Overflow__int_max_multiply_08.c":146:9)
#loc159 = loc("CWE190_Integer_Overflow__int_max_multiply_08.c":141:12)
#loc160 = loc("CWE190_Integer_Overflow__int_max_multiply_08.c":141:19)
#loc161 = loc("CWE190_Integer_Overflow__int_max_multiply_08.c":142:9)
#loc162 = loc("CWE190_Integer_Overflow__int_max_multiply_08.c":144:26)
#loc163 = loc("CWE190_Integer_Overflow__int_max_multiply_08.c":145:26)
#loc164 = loc("CWE190_Integer_Overflow__int_max_multiply_08.c":145:13)
#loc165 = loc("CWE190_Integer_Overflow__int_max_multiply_08.c":151:1)
#loc166 = loc("CWE190_Integer_Overflow__int_max_multiply_08.c":170:1)
#loc167 = loc("CWE190_Integer_Overflow__int_max_multiply_08.c":166:13)
#loc168 = loc("CWE190_Integer_Overflow__int_max_multiply_08.c":166:33)
#loc169 = loc("CWE190_Integer_Overflow__int_max_multiply_08.c":153:5)
#loc170 = loc("CWE190_Integer_Overflow__int_max_multiply_08.c":153:9)
#loc171 = loc("CWE190_Integer_Overflow__int_max_multiply_08.c":155:12)
#loc172 = loc("CWE190_Integer_Overflow__int_max_multiply_08.c":155:5)
#loc173 = loc("CWE190_Integer_Overflow__int_max_multiply_08.c":156:5)
#loc174 = loc("CWE190_Integer_Overflow__int_max_multiply_08.c":160:5)
#loc175 = loc("CWE190_Integer_Overflow__int_max_multiply_08.c":156:8)
#loc176 = loc("CWE190_Integer_Overflow__int_max_multiply_08.c":156:26)
#loc177 = loc("CWE190_Integer_Overflow__int_max_multiply_08.c":157:5)
#loc178 = loc("CWE190_Integer_Overflow__int_max_multiply_08.c":159:16)
#loc179 = loc("CWE190_Integer_Overflow__int_max_multiply_08.c":159:9)
#loc180 = loc("CWE190_Integer_Overflow__int_max_multiply_08.c":161:5)
#loc181 = loc("CWE190_Integer_Overflow__int_max_multiply_08.c":169:5)
#loc182 = loc("CWE190_Integer_Overflow__int_max_multiply_08.c":161:8)
#loc183 = loc("CWE190_Integer_Overflow__int_max_multiply_08.c":161:26)
#loc184 = loc("CWE190_Integer_Overflow__int_max_multiply_08.c":162:5)
#loc185 = loc("CWE190_Integer_Overflow__int_max_multiply_08.c":163:9)
#loc186 = loc("CWE190_Integer_Overflow__int_max_multiply_08.c":168:9)
#loc187 = loc("CWE190_Integer_Overflow__int_max_multiply_08.c":163:12)
#loc188 = loc("CWE190_Integer_Overflow__int_max_multiply_08.c":163:19)
#loc189 = loc("CWE190_Integer_Overflow__int_max_multiply_08.c":164:9)
#loc190 = loc("CWE190_Integer_Overflow__int_max_multiply_08.c":166:26)
#loc191 = loc("CWE190_Integer_Overflow__int_max_multiply_08.c":167:26)
#loc192 = loc("CWE190_Integer_Overflow__int_max_multiply_08.c":167:13)
#loc193 = loc(fused[#loc1, #loc2])
#loc194 = loc(fused[#loc3, #loc4])
#loc195 = loc(fused[#loc5, #loc6])
#loc196 = loc(fused[#loc7, #loc8])
#loc197 = loc(fused[#loc10, #loc9])
#loc198 = loc(fused[#loc11, #loc12])
#loc199 = loc(fused[#loc13, #loc14])
#loc200 = loc(fused[#loc15, #loc12])
#loc201 = loc(fused[#loc17, #loc16])
#loc202 = loc(fused[#loc18, #loc19])
#loc203 = loc(fused[#loc20, #loc21])
#loc204 = loc(fused[#loc22, #loc19])
#loc205 = loc(fused[#loc23, #loc24])
#loc206 = loc(fused[#loc25, #loc26])
#loc207 = loc(fused[#loc27, #loc24])
#loc208 = loc(fused[#loc31, #loc32])
#loc209 = loc(fused[#loc33, #loc34])
#loc210 = loc(fused[#loc35, #loc36])
#loc211 = loc(fused[#loc37, #loc38])
#loc212 = loc(fused[#loc39, #loc40])
#loc213 = loc(fused[#loc41, #loc42])
#loc214 = loc(fused[#loc44, #loc43])
#loc215 = loc(fused[#loc45, #loc46])
#loc216 = loc(fused[#loc49, #loc50])
#loc217 = loc(fused[#loc51, #loc52])
#loc218 = loc(fused[#loc53, #loc54])
#loc219 = loc(fused[#loc56, #loc55])
#loc220 = loc(fused[#loc57, #loc58])
#loc221 = loc(fused[#loc59, #loc60])
#loc222 = loc(fused[#loc61, #loc58])
#loc223 = loc(fused[#loc63, #loc62])
#loc224 = loc(fused[#loc64, #loc65])
#loc225 = loc(fused[#loc66, #loc67])
#loc226 = loc(fused[#loc68, #loc69, #loc70, #loc65])
#loc227 = loc(fused[#loc72, #loc73])
#loc228 = loc(fused[#loc74, #loc75])
#loc229 = loc(fused[#loc76, #loc73])
#loc230 = loc(fused[#loc77, #loc78])
#loc231 = loc(fused[#loc80, #loc81])
#loc232 = loc(fused[#loc79, #loc82])
#loc233 = loc(fused[#loc83, #loc84, #loc85, #loc78])
#loc234 = loc(fused[#loc90, #loc91])
#loc235 = loc(fused[#loc93, #loc92])
#loc236 = loc(fused[#loc94, #loc95])
#loc237 = loc(fused[#loc96, #loc97])
#loc238 = loc(fused[#loc98, #loc99])
#loc239 = loc(fused[#loc101, #loc100])
#loc240 = loc(fused[#loc102, #loc103])
#loc241 = loc(fused[#loc104, #loc105])
#loc242 = loc(fused[#loc106, #loc103])
#loc243 = loc(fused[#loc108, #loc107])
#loc244 = loc(fused[#loc109, #loc110])
#loc245 = loc(fused[#loc111, #loc112])
#loc246 = loc(fused[#loc113, #loc110])
#loc247 = loc(fused[#loc114, #loc115])
#loc248 = loc(fused[#loc116, #loc117])
#loc249 = loc(fused[#loc118, #loc115])
#loc250 = loc(fused[#loc119, #loc120])
#loc251 = loc(fused[#loc122, #loc123])
#loc252 = loc(fused[#loc121, #loc124])
#loc253 = loc(fused[#loc125, #loc126, #loc127, #loc120])
#loc254 = loc(fused[#loc133, #loc134])
#loc255 = loc(fused[#loc135, #loc136])
#loc256 = loc(fused[#loc137, #loc138])
#loc257 = loc(fused[#loc140, #loc139])
#loc258 = loc(fused[#loc141, #loc142])
#loc259 = loc(fused[#loc143, #loc144])
#loc260 = loc(fused[#loc145, #loc146, #loc147, #loc142])
#loc261 = loc(fused[#loc151, #loc150])
#loc262 = loc(fused[#loc152, #loc153])
#loc263 = loc(fused[#loc154, #loc155])
#loc264 = loc(fused[#loc156, #loc153])
#loc265 = loc(fused[#loc157, #loc158])
#loc266 = loc(fused[#loc159, #loc160])
#loc267 = loc(fused[#loc161, #loc158])
#loc268 = loc(fused[#loc165, #loc166])
#loc269 = loc(fused[#loc167, #loc168])
#loc270 = loc(fused[#loc169, #loc170])
#loc271 = loc(fused[#loc172, #loc171])
#loc272 = loc(fused[#loc173, #loc174])
#loc273 = loc(fused[#loc175, #loc176])
#loc274 = loc(fused[#loc177, #loc174])
#loc275 = loc(fused[#loc179, #loc178])
#loc276 = loc(fused[#loc180, #loc181])
#loc277 = loc(fused[#loc182, #loc183])
#loc278 = loc(fused[#loc184, #loc181])
#loc279 = loc(fused[#loc185, #loc186])
#loc280 = loc(fused[#loc187, #loc188])
#loc281 = loc(fused[#loc189, #loc186])
