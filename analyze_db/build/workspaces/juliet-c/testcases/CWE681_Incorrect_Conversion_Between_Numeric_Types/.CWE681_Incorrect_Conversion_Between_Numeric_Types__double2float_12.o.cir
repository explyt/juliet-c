!s32i = !cir.int<s, 32>
!s64i = !cir.int<s, 64>
!s8i = !cir.int<s, 8>
!ty__IO_codecvt = !cir.record<struct "_IO_codecvt" incomplete>
!ty__IO_marker = !cir.record<struct "_IO_marker" incomplete>
!ty__IO_wide_data = !cir.record<struct "_IO_wide_data" incomplete>
!u16i = !cir.int<u, 16>
!u64i = !cir.int<u, 64>
!void = !cir.void
#false = #cir.bool<false> : !cir.bool
#fn_attr = #cir<extra({nothrow = #cir.nothrow})>
#fn_attr1 = #cir<extra({inline = #cir.inline<no>, nothrow = #cir.nothrow, optnone = #cir.optnone, uwtable = #cir.uwtable<async>})>
#true = #cir.bool<true> : !cir.bool
!ty__IO_FILE = !cir.record<struct "_IO_FILE" {!s32i, !cir.ptr<!s8i>, !cir.ptr<!s8i>, !cir.ptr<!s8i>, !cir.ptr<!s8i>, !cir.ptr<!s8i>, !cir.ptr<!s8i>, !cir.ptr<!s8i>, !cir.ptr<!s8i>, !cir.ptr<!s8i>, !cir.ptr<!s8i>, !cir.ptr<!s8i>, !cir.ptr<!ty__IO_marker>, !cir.ptr<!cir.record<struct "_IO_FILE">>, !s32i, !s32i, !s64i, !u16i, !s8i, !cir.array<!s8i x 1>, !cir.ptr<!void>, !s64i, !cir.ptr<!ty__IO_codecvt>, !cir.ptr<!ty__IO_wide_data>, !cir.ptr<!cir.record<struct "_IO_FILE">>, !cir.ptr<!void>, !u64i, !s32i, !cir.array<!s8i x 20>} #cir.record.decl.ast>
module @"/workspaces/juliet-c/testcases/CWE681_Incorrect_Conversion_Between_Numeric_Types/CWE681_Incorrect_Conversion_Between_Numeric_Types__double2float_12.c" attributes {cir.lang = #cir.lang<c>, cir.sob = #cir.signed_overflow_behavior<undefined>, cir.triple = "x86_64-unknown-linux-gnu", cir.type_size_info = #cir.type_size_info<char = 8, int = 32, size_t = 64>, cir.uwtable = #cir.uwtable<async>, dlti.dl_spec = #dlti.dl_spec<i8 = dense<8> : vector<2xi64>, i16 = dense<16> : vector<2xi64>, !llvm.ptr = dense<64> : vector<4xi64>, i1 = dense<8> : vector<2xi64>, f64 = dense<64> : vector<2xi64>, !llvm.ptr<270> = dense<32> : vector<4xi64>, f16 = dense<16> : vector<2xi64>, i32 = dense<32> : vector<2xi64>, i64 = dense<64> : vector<2xi64>, !llvm.ptr<272> = dense<64> : vector<4xi64>, !llvm.ptr<271> = dense<32> : vector<4xi64>, f128 = dense<128> : vector<2xi64>, f80 = dense<128> : vector<2xi64>, i128 = dense<128> : vector<2xi64>, "dlti.mangling_mode" = "e", "dlti.endianness" = "little", "dlti.stack_alignment" = 128 : i64>} {
  cir.func no_proto private @globalReturnsTrueOrFalse(...) -> !s32i loc(#loc167)
  cir.func private @fgets(!cir.ptr<!s8i>, !s32i, !cir.ptr<!ty__IO_FILE>) -> !cir.ptr<!s8i> loc(#loc168)
  cir.global "private" external @stdin : !cir.ptr<!ty__IO_FILE> {alignment = 8 : i64} loc(#loc169)
  cir.func private @atof(!cir.ptr<!s8i>) -> !cir.double extra(#fn_attr) loc(#loc170)
  cir.func private @printLine(!cir.ptr<!s8i>) loc(#loc171)
  cir.global "private" constant cir_private dsolocal @".str" = #cir.const_array<"fgets() failed.\00" : !cir.array<!s8i x 16>> : !cir.array<!s8i x 16> {alignment = 1 : i64} loc(#loc11)
  cir.func private @printFloatLine(!cir.float) loc(#loc172)
  cir.global "private" constant cir_private dsolocal @".str.1" = #cir.const_array<"Value is too small or large to be represented as a float\00" : !cir.array<!s8i x 57>> : !cir.array<!s8i x 57> {alignment = 1 : i64} loc(#loc14)
  cir.func no_proto @CWE681_Incorrect_Conversion_Between_Numeric_Types__double2float_12_bad() extra(#fn_attr1) {
    cir.scope {
      %0 = cir.get_global @globalReturnsTrueOrFalse : !cir.ptr<!cir.func<(...) -> !s32i>> loc(#loc175)
      %1 = cir.cast(bitcast, %0 : !cir.ptr<!cir.func<(...) -> !s32i>>), !cir.ptr<!cir.func<() -> !s32i>> loc(#loc175)
      %2 = cir.call %1() : (!cir.ptr<!cir.func<() -> !s32i>>) -> !s32i loc(#loc19)
      %3 = cir.cast(int_to_bool, %2 : !s32i), !cir.bool loc(#loc19)
      cir.if %3 {
        cir.scope {
          %4 = cir.alloca !cir.array<!s8i x 256>, !cir.ptr<!cir.array<!s8i x 256>>, ["inputBuffer"] {alignment = 16 : i64} loc(#loc178)
          %5 = cir.alloca !cir.double, !cir.ptr<!cir.double>, ["doubleNumber", init] {alignment = 8 : i64} loc(#loc179)
          %6 = cir.const #cir.int<0> : !s32i loc(#loc29)
          %7 = cir.cast(int_to_float, %6 : !s32i), !cir.double loc(#loc29)
          cir.store %7, %5 : !cir.double, !cir.ptr<!cir.double> loc(#loc179)
          cir.scope {
            %10 = cir.cast(array_to_ptrdecay, %4 : !cir.ptr<!cir.array<!s8i x 256>>), !cir.ptr<!s8i> loc(#loc32)
            %11 = cir.const #cir.int<256> : !s32i loc(#loc33)
            %12 = cir.get_global @stdin : !cir.ptr<!cir.ptr<!ty__IO_FILE>> loc(#loc169)
            %13 = cir.load %12 : !cir.ptr<!cir.ptr<!ty__IO_FILE>>, !cir.ptr<!ty__IO_FILE> loc(#loc34)
            %14 = cir.call @fgets(%10, %11, %13) : (!cir.ptr<!s8i>, !s32i, !cir.ptr<!ty__IO_FILE>) -> !cir.ptr<!s8i> loc(#loc35)
            %15 = cir.const #cir.ptr<null> : !cir.ptr<!void> loc(#loc36)
            %16 = cir.cast(bitcast, %15 : !cir.ptr<!void>), !cir.ptr<!s8i> loc(#loc36)
            %17 = cir.cmp(ne, %14, %16) : !cir.ptr<!s8i>, !cir.bool loc(#loc181)
            cir.if %17 {
              %18 = cir.cast(array_to_ptrdecay, %4 : !cir.ptr<!cir.array<!s8i x 256>>), !cir.ptr<!s8i> loc(#loc40)
              %19 = cir.call @atof(%18) : (!cir.ptr<!s8i>) -> !cir.double side_effect(pure) extra(#fn_attr) loc(#loc41)
              cir.store %19, %5 : !cir.double, !cir.ptr<!cir.double> loc(#loc183)
            } else {
              %18 = cir.get_global @".str" : !cir.ptr<!cir.array<!s8i x 16>> loc(#loc11)
              %19 = cir.cast(array_to_ptrdecay, %18 : !cir.ptr<!cir.array<!s8i x 16>>), !cir.ptr<!s8i> loc(#loc11)
              cir.call @printLine(%19) : (!cir.ptr<!s8i>) -> () loc(#loc44)
            } loc(#loc182)
          } loc(#loc180)
          %8 = cir.load %5 : !cir.ptr<!cir.double>, !cir.double loc(#loc45)
          %9 = cir.cast(floating, %8 : !cir.double), !cir.float loc(#loc45)
          cir.call @printFloatLine(%9) : (!cir.float) -> () loc(#loc46)
        } loc(#loc177)
      } else {
        cir.scope {
          %4 = cir.alloca !cir.array<!s8i x 256>, !cir.ptr<!cir.array<!s8i x 256>>, ["inputBuffer"] {alignment = 16 : i64} loc(#loc185)
          %5 = cir.alloca !cir.double, !cir.ptr<!cir.double>, ["doubleNumber", init] {alignment = 8 : i64} loc(#loc186)
          %6 = cir.const #cir.int<0> : !s32i loc(#loc52)
          %7 = cir.cast(int_to_float, %6 : !s32i), !cir.double loc(#loc52)
          cir.store %7, %5 : !cir.double, !cir.ptr<!cir.double> loc(#loc186)
          cir.scope {
            %8 = cir.cast(array_to_ptrdecay, %4 : !cir.ptr<!cir.array<!s8i x 256>>), !cir.ptr<!s8i> loc(#loc55)
            %9 = cir.const #cir.int<256> : !s32i loc(#loc56)
            %10 = cir.get_global @stdin : !cir.ptr<!cir.ptr<!ty__IO_FILE>> loc(#loc169)
            %11 = cir.load %10 : !cir.ptr<!cir.ptr<!ty__IO_FILE>>, !cir.ptr<!ty__IO_FILE> loc(#loc57)
            %12 = cir.call @fgets(%8, %9, %11) : (!cir.ptr<!s8i>, !s32i, !cir.ptr<!ty__IO_FILE>) -> !cir.ptr<!s8i> loc(#loc58)
            %13 = cir.const #cir.ptr<null> : !cir.ptr<!void> loc(#loc59)
            %14 = cir.cast(bitcast, %13 : !cir.ptr<!void>), !cir.ptr<!s8i> loc(#loc59)
            %15 = cir.cmp(ne, %12, %14) : !cir.ptr<!s8i>, !cir.bool loc(#loc188)
            cir.if %15 {
              %16 = cir.cast(array_to_ptrdecay, %4 : !cir.ptr<!cir.array<!s8i x 256>>), !cir.ptr<!s8i> loc(#loc63)
              %17 = cir.call @atof(%16) : (!cir.ptr<!s8i>) -> !cir.double side_effect(pure) extra(#fn_attr) loc(#loc64)
              cir.store %17, %5 : !cir.double, !cir.ptr<!cir.double> loc(#loc190)
            } else {
              %16 = cir.get_global @".str" : !cir.ptr<!cir.array<!s8i x 16>> loc(#loc67)
              %17 = cir.cast(array_to_ptrdecay, %16 : !cir.ptr<!cir.array<!s8i x 16>>), !cir.ptr<!s8i> loc(#loc67)
              cir.call @printLine(%17) : (!cir.ptr<!s8i>) -> () loc(#loc68)
            } loc(#loc189)
          } loc(#loc187)
          cir.scope {
            %8 = cir.load %5 : !cir.ptr<!cir.double>, !cir.double loc(#loc71)
            %9 = cir.const #cir.fp<3.40282347E+38> : !cir.float loc(#loc72)
            %10 = cir.cast(floating, %9 : !cir.float), !cir.double loc(#loc72)
            %11 = cir.cmp(gt, %8, %10) : !cir.double, !cir.bool loc(#loc192)
            %12 = cir.ternary(%11, true {
              %13 = cir.const #true loc(#loc73)
              cir.yield %13 : !cir.bool loc(#loc73)
            }, false {
              %13 = cir.load %5 : !cir.ptr<!cir.double>, !cir.double loc(#loc74)
              %14 = cir.const #cir.fp<1.17549435E-38> : !cir.float loc(#loc75)
              %15 = cir.cast(floating, %14 : !cir.float), !cir.double loc(#loc75)
              %16 = cir.cmp(lt, %13, %15) : !cir.double, !cir.bool loc(#loc193)
              %17 = cir.ternary(%16, true {
                %18 = cir.const #true loc(#loc73)
                cir.yield %18 : !cir.bool loc(#loc73)
              }, false {
                %18 = cir.const #false loc(#loc73)
                cir.yield %18 : !cir.bool loc(#loc73)
              }) : (!cir.bool) -> !cir.bool loc(#loc73)
              cir.yield %17 : !cir.bool loc(#loc73)
            }) : (!cir.bool) -> !cir.bool loc(#loc73)
            cir.if %12 {
              %13 = cir.get_global @".str.1" : !cir.ptr<!cir.array<!s8i x 57>> loc(#loc14)
              %14 = cir.cast(array_to_ptrdecay, %13 : !cir.ptr<!cir.array<!s8i x 57>>), !cir.ptr<!s8i> loc(#loc14)
              cir.call @printLine(%14) : (!cir.ptr<!s8i>) -> () loc(#loc79)
            } else {
              %13 = cir.load %5 : !cir.ptr<!cir.double>, !cir.double loc(#loc80)
              %14 = cir.cast(floating, %13 : !cir.double), !cir.float loc(#loc80)
              cir.call @printFloatLine(%14) : (!cir.float) -> () loc(#loc81)
            } loc(#loc194)
          } loc(#loc191)
        } loc(#loc184)
      } loc(#loc176)
    } loc(#loc174)
    cir.return loc(#loc16)
  } loc(#loc173)
  cir.func no_proto @CWE681_Incorrect_Conversion_Between_Numeric_Types__double2float_12_good() extra(#fn_attr1) {
    %0 = cir.get_global @good1 : !cir.ptr<!cir.func<()>> loc(#loc196)
    cir.call %0() : (!cir.ptr<!cir.func<()>>) -> () loc(#loc84)
    cir.return loc(#loc83)
  } loc(#loc195)
  cir.func no_proto internal private @good1() extra(#fn_attr1) {
    cir.scope {
      %0 = cir.get_global @globalReturnsTrueOrFalse : !cir.ptr<!cir.func<(...) -> !s32i>> loc(#loc199)
      %1 = cir.cast(bitcast, %0 : !cir.ptr<!cir.func<(...) -> !s32i>>), !cir.ptr<!cir.func<() -> !s32i>> loc(#loc199)
      %2 = cir.call %1() : (!cir.ptr<!cir.func<() -> !s32i>>) -> !s32i loc(#loc90)
      %3 = cir.cast(int_to_bool, %2 : !s32i), !cir.bool loc(#loc90)
      cir.if %3 {
        cir.scope {
          %4 = cir.alloca !cir.array<!s8i x 256>, !cir.ptr<!cir.array<!s8i x 256>>, ["inputBuffer"] {alignment = 16 : i64} loc(#loc202)
          %5 = cir.alloca !cir.double, !cir.ptr<!cir.double>, ["doubleNumber", init] {alignment = 8 : i64} loc(#loc203)
          %6 = cir.const #cir.int<0> : !s32i loc(#loc100)
          %7 = cir.cast(int_to_float, %6 : !s32i), !cir.double loc(#loc100)
          cir.store %7, %5 : !cir.double, !cir.ptr<!cir.double> loc(#loc203)
          cir.scope {
            %8 = cir.cast(array_to_ptrdecay, %4 : !cir.ptr<!cir.array<!s8i x 256>>), !cir.ptr<!s8i> loc(#loc103)
            %9 = cir.const #cir.int<256> : !s32i loc(#loc104)
            %10 = cir.get_global @stdin : !cir.ptr<!cir.ptr<!ty__IO_FILE>> loc(#loc169)
            %11 = cir.load %10 : !cir.ptr<!cir.ptr<!ty__IO_FILE>>, !cir.ptr<!ty__IO_FILE> loc(#loc105)
            %12 = cir.call @fgets(%8, %9, %11) : (!cir.ptr<!s8i>, !s32i, !cir.ptr<!ty__IO_FILE>) -> !cir.ptr<!s8i> loc(#loc106)
            %13 = cir.const #cir.ptr<null> : !cir.ptr<!void> loc(#loc107)
            %14 = cir.cast(bitcast, %13 : !cir.ptr<!void>), !cir.ptr<!s8i> loc(#loc107)
            %15 = cir.cmp(ne, %12, %14) : !cir.ptr<!s8i>, !cir.bool loc(#loc205)
            cir.if %15 {
              %16 = cir.cast(array_to_ptrdecay, %4 : !cir.ptr<!cir.array<!s8i x 256>>), !cir.ptr<!s8i> loc(#loc111)
              %17 = cir.call @atof(%16) : (!cir.ptr<!s8i>) -> !cir.double side_effect(pure) extra(#fn_attr) loc(#loc112)
              cir.store %17, %5 : !cir.double, !cir.ptr<!cir.double> loc(#loc207)
            } else {
              %16 = cir.get_global @".str" : !cir.ptr<!cir.array<!s8i x 16>> loc(#loc115)
              %17 = cir.cast(array_to_ptrdecay, %16 : !cir.ptr<!cir.array<!s8i x 16>>), !cir.ptr<!s8i> loc(#loc115)
              cir.call @printLine(%17) : (!cir.ptr<!s8i>) -> () loc(#loc116)
            } loc(#loc206)
          } loc(#loc204)
          cir.scope {
            %8 = cir.load %5 : !cir.ptr<!cir.double>, !cir.double loc(#loc119)
            %9 = cir.const #cir.fp<3.40282347E+38> : !cir.float loc(#loc120)
            %10 = cir.cast(floating, %9 : !cir.float), !cir.double loc(#loc120)
            %11 = cir.cmp(gt, %8, %10) : !cir.double, !cir.bool loc(#loc209)
            %12 = cir.ternary(%11, true {
              %13 = cir.const #true loc(#loc121)
              cir.yield %13 : !cir.bool loc(#loc121)
            }, false {
              %13 = cir.load %5 : !cir.ptr<!cir.double>, !cir.double loc(#loc122)
              %14 = cir.const #cir.fp<1.17549435E-38> : !cir.float loc(#loc123)
              %15 = cir.cast(floating, %14 : !cir.float), !cir.double loc(#loc123)
              %16 = cir.cmp(lt, %13, %15) : !cir.double, !cir.bool loc(#loc210)
              %17 = cir.ternary(%16, true {
                %18 = cir.const #true loc(#loc121)
                cir.yield %18 : !cir.bool loc(#loc121)
              }, false {
                %18 = cir.const #false loc(#loc121)
                cir.yield %18 : !cir.bool loc(#loc121)
              }) : (!cir.bool) -> !cir.bool loc(#loc121)
              cir.yield %17 : !cir.bool loc(#loc121)
            }) : (!cir.bool) -> !cir.bool loc(#loc121)
            cir.if %12 {
              %13 = cir.get_global @".str.1" : !cir.ptr<!cir.array<!s8i x 57>> loc(#loc127)
              %14 = cir.cast(array_to_ptrdecay, %13 : !cir.ptr<!cir.array<!s8i x 57>>), !cir.ptr<!s8i> loc(#loc127)
              cir.call @printLine(%14) : (!cir.ptr<!s8i>) -> () loc(#loc128)
            } else {
              %13 = cir.load %5 : !cir.ptr<!cir.double>, !cir.double loc(#loc129)
              %14 = cir.cast(floating, %13 : !cir.double), !cir.float loc(#loc129)
              cir.call @printFloatLine(%14) : (!cir.float) -> () loc(#loc130)
            } loc(#loc211)
          } loc(#loc208)
        } loc(#loc201)
      } else {
        cir.scope {
          %4 = cir.alloca !cir.array<!s8i x 256>, !cir.ptr<!cir.array<!s8i x 256>>, ["inputBuffer"] {alignment = 16 : i64} loc(#loc213)
          %5 = cir.alloca !cir.double, !cir.ptr<!cir.double>, ["doubleNumber", init] {alignment = 8 : i64} loc(#loc214)
          %6 = cir.const #cir.int<0> : !s32i loc(#loc136)
          %7 = cir.cast(int_to_float, %6 : !s32i), !cir.double loc(#loc136)
          cir.store %7, %5 : !cir.double, !cir.ptr<!cir.double> loc(#loc214)
          cir.scope {
            %8 = cir.cast(array_to_ptrdecay, %4 : !cir.ptr<!cir.array<!s8i x 256>>), !cir.ptr<!s8i> loc(#loc139)
            %9 = cir.const #cir.int<256> : !s32i loc(#loc140)
            %10 = cir.get_global @stdin : !cir.ptr<!cir.ptr<!ty__IO_FILE>> loc(#loc169)
            %11 = cir.load %10 : !cir.ptr<!cir.ptr<!ty__IO_FILE>>, !cir.ptr<!ty__IO_FILE> loc(#loc141)
            %12 = cir.call @fgets(%8, %9, %11) : (!cir.ptr<!s8i>, !s32i, !cir.ptr<!ty__IO_FILE>) -> !cir.ptr<!s8i> loc(#loc142)
            %13 = cir.const #cir.ptr<null> : !cir.ptr<!void> loc(#loc143)
            %14 = cir.cast(bitcast, %13 : !cir.ptr<!void>), !cir.ptr<!s8i> loc(#loc143)
            %15 = cir.cmp(ne, %12, %14) : !cir.ptr<!s8i>, !cir.bool loc(#loc216)
            cir.if %15 {
              %16 = cir.cast(array_to_ptrdecay, %4 : !cir.ptr<!cir.array<!s8i x 256>>), !cir.ptr<!s8i> loc(#loc147)
              %17 = cir.call @atof(%16) : (!cir.ptr<!s8i>) -> !cir.double side_effect(pure) extra(#fn_attr) loc(#loc148)
              cir.store %17, %5 : !cir.double, !cir.ptr<!cir.double> loc(#loc218)
            } else {
              %16 = cir.get_global @".str" : !cir.ptr<!cir.array<!s8i x 16>> loc(#loc151)
              %17 = cir.cast(array_to_ptrdecay, %16 : !cir.ptr<!cir.array<!s8i x 16>>), !cir.ptr<!s8i> loc(#loc151)
              cir.call @printLine(%17) : (!cir.ptr<!s8i>) -> () loc(#loc152)
            } loc(#loc217)
          } loc(#loc215)
          cir.scope {
            %8 = cir.load %5 : !cir.ptr<!cir.double>, !cir.double loc(#loc155)
            %9 = cir.const #cir.fp<3.40282347E+38> : !cir.float loc(#loc156)
            %10 = cir.cast(floating, %9 : !cir.float), !cir.double loc(#loc156)
            %11 = cir.cmp(gt, %8, %10) : !cir.double, !cir.bool loc(#loc220)
            %12 = cir.ternary(%11, true {
              %13 = cir.const #true loc(#loc157)
              cir.yield %13 : !cir.bool loc(#loc157)
            }, false {
              %13 = cir.load %5 : !cir.ptr<!cir.double>, !cir.double loc(#loc158)
              %14 = cir.const #cir.fp<1.17549435E-38> : !cir.float loc(#loc159)
              %15 = cir.cast(floating, %14 : !cir.float), !cir.double loc(#loc159)
              %16 = cir.cmp(lt, %13, %15) : !cir.double, !cir.bool loc(#loc221)
              %17 = cir.ternary(%16, true {
                %18 = cir.const #true loc(#loc157)
                cir.yield %18 : !cir.bool loc(#loc157)
              }, false {
                %18 = cir.const #false loc(#loc157)
                cir.yield %18 : !cir.bool loc(#loc157)
              }) : (!cir.bool) -> !cir.bool loc(#loc157)
              cir.yield %17 : !cir.bool loc(#loc157)
            }) : (!cir.bool) -> !cir.bool loc(#loc157)
            cir.if %12 {
              %13 = cir.get_global @".str.1" : !cir.ptr<!cir.array<!s8i x 57>> loc(#loc163)
              %14 = cir.cast(array_to_ptrdecay, %13 : !cir.ptr<!cir.array<!s8i x 57>>), !cir.ptr<!s8i> loc(#loc163)
              cir.call @printLine(%14) : (!cir.ptr<!s8i>) -> () loc(#loc164)
            } else {
              %13 = cir.load %5 : !cir.ptr<!cir.double>, !cir.double loc(#loc165)
              %14 = cir.cast(floating, %13 : !cir.double), !cir.float loc(#loc165)
              cir.call @printFloatLine(%14) : (!cir.float) -> () loc(#loc166)
            } loc(#loc222)
          } loc(#loc219)
        } loc(#loc212)
      } loc(#loc200)
    } loc(#loc198)
    cir.return loc(#loc87)
  } loc(#loc197)
} loc(#loc)
#loc = loc("/workspaces/juliet-c/testcases/CWE681_Incorrect_Conversion_Between_Numeric_Types/CWE681_Incorrect_Conversion_Between_Numeric_Types__double2float_12.c":0:0)
#loc1 = loc("../../testcasesupport/std_testcase_io.h":52:1)
#loc2 = loc("../../testcasesupport/std_testcase_io.h":52:30)
#loc3 = loc("/usr/include/stdio.h":654:1)
#loc4 = loc("/usr/include/stdio.h":655:59)
#loc5 = loc("/usr/include/stdio.h":149:1)
#loc6 = loc("/usr/include/stdio.h":149:14)
#loc7 = loc("/usr/include/stdlib.h":102:1)
#loc8 = loc("/usr/include/stdlib.h":103:33)
#loc9 = loc("../../testcasesupport/std_testcase_io.h":14:1)
#loc10 = loc("../../testcasesupport/std_testcase_io.h":14:33)
#loc11 = loc("CWE681_Incorrect_Conversion_Between_Numeric_Types__double2float_12.c":42:27)
#loc12 = loc("../../testcasesupport/std_testcase_io.h":22:1)
#loc13 = loc("../../testcasesupport/std_testcase_io.h":22:39)
#loc14 = loc("CWE681_Incorrect_Conversion_Between_Numeric_Types__double2float_12.c":70:27)
#loc15 = loc("CWE681_Incorrect_Conversion_Between_Numeric_Types__double2float_12.c":23:1)
#loc16 = loc("CWE681_Incorrect_Conversion_Between_Numeric_Types__double2float_12.c":78:1)
#loc17 = loc("CWE681_Incorrect_Conversion_Between_Numeric_Types__double2float_12.c":25:5)
#loc18 = loc("CWE681_Incorrect_Conversion_Between_Numeric_Types__double2float_12.c":77:5)
#loc19 = loc("CWE681_Incorrect_Conversion_Between_Numeric_Types__double2float_12.c":25:8)
#loc20 = loc("CWE681_Incorrect_Conversion_Between_Numeric_Types__double2float_12.c":25:33)
#loc21 = loc("CWE681_Incorrect_Conversion_Between_Numeric_Types__double2float_12.c":26:5)
#loc22 = loc("CWE681_Incorrect_Conversion_Between_Numeric_Types__double2float_12.c":47:5)
#loc23 = loc("CWE681_Incorrect_Conversion_Between_Numeric_Types__double2float_12.c":49:5)
#loc24 = loc("CWE681_Incorrect_Conversion_Between_Numeric_Types__double2float_12.c":27:9)
#loc25 = loc("CWE681_Incorrect_Conversion_Between_Numeric_Types__double2float_12.c":46:9)
#loc26 = loc("CWE681_Incorrect_Conversion_Between_Numeric_Types__double2float_12.c":28:13)
#loc27 = loc("CWE681_Incorrect_Conversion_Between_Numeric_Types__double2float_12.c":28:45)
#loc28 = loc("CWE681_Incorrect_Conversion_Between_Numeric_Types__double2float_12.c":29:13)
#loc29 = loc("CWE681_Incorrect_Conversion_Between_Numeric_Types__double2float_12.c":29:35)
#loc30 = loc("CWE681_Incorrect_Conversion_Between_Numeric_Types__double2float_12.c":35:13)
#loc31 = loc("CWE681_Incorrect_Conversion_Between_Numeric_Types__double2float_12.c":43:13)
#loc32 = loc("CWE681_Incorrect_Conversion_Between_Numeric_Types__double2float_12.c":35:23)
#loc33 = loc("CWE681_Incorrect_Conversion_Between_Numeric_Types__double2float_12.c":35:36)
#loc34 = loc("CWE681_Incorrect_Conversion_Between_Numeric_Types__double2float_12.c":35:53)
#loc35 = loc("CWE681_Incorrect_Conversion_Between_Numeric_Types__double2float_12.c":35:17)
#loc36 = loc("CWE681_Incorrect_Conversion_Between_Numeric_Types__double2float_12.c":35:63)
#loc37 = loc("CWE681_Incorrect_Conversion_Between_Numeric_Types__double2float_12.c":36:13)
#loc38 = loc("CWE681_Incorrect_Conversion_Between_Numeric_Types__double2float_12.c":39:13)
#loc39 = loc("CWE681_Incorrect_Conversion_Between_Numeric_Types__double2float_12.c":41:13)
#loc40 = loc("CWE681_Incorrect_Conversion_Between_Numeric_Types__double2float_12.c":38:37)
#loc41 = loc("CWE681_Incorrect_Conversion_Between_Numeric_Types__double2float_12.c":38:32)
#loc42 = loc("CWE681_Incorrect_Conversion_Between_Numeric_Types__double2float_12.c":38:17)
#loc43 = loc("CWE681_Incorrect_Conversion_Between_Numeric_Types__double2float_12.c":38:48)
#loc44 = loc("CWE681_Incorrect_Conversion_Between_Numeric_Types__double2float_12.c":42:17)
#loc45 = loc("CWE681_Incorrect_Conversion_Between_Numeric_Types__double2float_12.c":45:35)
#loc46 = loc("CWE681_Incorrect_Conversion_Between_Numeric_Types__double2float_12.c":45:13)
#loc47 = loc("CWE681_Incorrect_Conversion_Between_Numeric_Types__double2float_12.c":50:9)
#loc48 = loc("CWE681_Incorrect_Conversion_Between_Numeric_Types__double2float_12.c":76:9)
#loc49 = loc("CWE681_Incorrect_Conversion_Between_Numeric_Types__double2float_12.c":51:13)
#loc50 = loc("CWE681_Incorrect_Conversion_Between_Numeric_Types__double2float_12.c":51:45)
#loc51 = loc("CWE681_Incorrect_Conversion_Between_Numeric_Types__double2float_12.c":52:13)
#loc52 = loc("CWE681_Incorrect_Conversion_Between_Numeric_Types__double2float_12.c":52:35)
#loc53 = loc("CWE681_Incorrect_Conversion_Between_Numeric_Types__double2float_12.c":58:13)
#loc54 = loc("CWE681_Incorrect_Conversion_Between_Numeric_Types__double2float_12.c":66:13)
#loc55 = loc("CWE681_Incorrect_Conversion_Between_Numeric_Types__double2float_12.c":58:23)
#loc56 = loc("CWE681_Incorrect_Conversion_Between_Numeric_Types__double2float_12.c":58:36)
#loc57 = loc("CWE681_Incorrect_Conversion_Between_Numeric_Types__double2float_12.c":58:53)
#loc58 = loc("CWE681_Incorrect_Conversion_Between_Numeric_Types__double2float_12.c":58:17)
#loc59 = loc("CWE681_Incorrect_Conversion_Between_Numeric_Types__double2float_12.c":58:63)
#loc60 = loc("CWE681_Incorrect_Conversion_Between_Numeric_Types__double2float_12.c":59:13)
#loc61 = loc("CWE681_Incorrect_Conversion_Between_Numeric_Types__double2float_12.c":62:13)
#loc62 = loc("CWE681_Incorrect_Conversion_Between_Numeric_Types__double2float_12.c":64:13)
#loc63 = loc("CWE681_Incorrect_Conversion_Between_Numeric_Types__double2float_12.c":61:37)
#loc64 = loc("CWE681_Incorrect_Conversion_Between_Numeric_Types__double2float_12.c":61:32)
#loc65 = loc("CWE681_Incorrect_Conversion_Between_Numeric_Types__double2float_12.c":61:17)
#loc66 = loc("CWE681_Incorrect_Conversion_Between_Numeric_Types__double2float_12.c":61:48)
#loc67 = loc("CWE681_Incorrect_Conversion_Between_Numeric_Types__double2float_12.c":65:27)
#loc68 = loc("CWE681_Incorrect_Conversion_Between_Numeric_Types__double2float_12.c":65:17)
#loc69 = loc("CWE681_Incorrect_Conversion_Between_Numeric_Types__double2float_12.c":68:13)
#loc70 = loc("CWE681_Incorrect_Conversion_Between_Numeric_Types__double2float_12.c":75:13)
#loc71 = loc("CWE681_Incorrect_Conversion_Between_Numeric_Types__double2float_12.c":68:17)
#loc72 = loc("CWE681_Incorrect_Conversion_Between_Numeric_Types__double2float_12.c":68:32)
#loc73 = loc("CWE681_Incorrect_Conversion_Between_Numeric_Types__double2float_12.c":68:40)
#loc74 = loc("CWE681_Incorrect_Conversion_Between_Numeric_Types__double2float_12.c":68:43)
#loc75 = loc("CWE681_Incorrect_Conversion_Between_Numeric_Types__double2float_12.c":68:58)
#loc76 = loc("CWE681_Incorrect_Conversion_Between_Numeric_Types__double2float_12.c":69:13)
#loc77 = loc("CWE681_Incorrect_Conversion_Between_Numeric_Types__double2float_12.c":71:13)
#loc78 = loc("CWE681_Incorrect_Conversion_Between_Numeric_Types__double2float_12.c":73:13)
#loc79 = loc("CWE681_Incorrect_Conversion_Between_Numeric_Types__double2float_12.c":70:17)
#loc80 = loc("CWE681_Incorrect_Conversion_Between_Numeric_Types__double2float_12.c":74:39)
#loc81 = loc("CWE681_Incorrect_Conversion_Between_Numeric_Types__double2float_12.c":74:17)
#loc82 = loc("CWE681_Incorrect_Conversion_Between_Numeric_Types__double2float_12.c":149:1)
#loc83 = loc("CWE681_Incorrect_Conversion_Between_Numeric_Types__double2float_12.c":152:1)
#loc84 = loc("CWE681_Incorrect_Conversion_Between_Numeric_Types__double2float_12.c":151:5)
#loc85 = loc("CWE681_Incorrect_Conversion_Between_Numeric_Types__double2float_12.c":151:11)
#loc86 = loc("CWE681_Incorrect_Conversion_Between_Numeric_Types__double2float_12.c":85:1)
#loc87 = loc("CWE681_Incorrect_Conversion_Between_Numeric_Types__double2float_12.c":147:1)
#loc88 = loc("CWE681_Incorrect_Conversion_Between_Numeric_Types__double2float_12.c":87:5)
#loc89 = loc("CWE681_Incorrect_Conversion_Between_Numeric_Types__double2float_12.c":146:5)
#loc90 = loc("CWE681_Incorrect_Conversion_Between_Numeric_Types__double2float_12.c":87:8)
#loc91 = loc("CWE681_Incorrect_Conversion_Between_Numeric_Types__double2float_12.c":87:33)
#loc92 = loc("CWE681_Incorrect_Conversion_Between_Numeric_Types__double2float_12.c":88:5)
#loc93 = loc("CWE681_Incorrect_Conversion_Between_Numeric_Types__double2float_12.c":116:5)
#loc94 = loc("CWE681_Incorrect_Conversion_Between_Numeric_Types__double2float_12.c":118:5)
#loc95 = loc("CWE681_Incorrect_Conversion_Between_Numeric_Types__double2float_12.c":89:9)
#loc96 = loc("CWE681_Incorrect_Conversion_Between_Numeric_Types__double2float_12.c":115:9)
#loc97 = loc("CWE681_Incorrect_Conversion_Between_Numeric_Types__double2float_12.c":90:13)
#loc98 = loc("CWE681_Incorrect_Conversion_Between_Numeric_Types__double2float_12.c":90:45)
#loc99 = loc("CWE681_Incorrect_Conversion_Between_Numeric_Types__double2float_12.c":91:13)
#loc100 = loc("CWE681_Incorrect_Conversion_Between_Numeric_Types__double2float_12.c":91:35)
#loc101 = loc("CWE681_Incorrect_Conversion_Between_Numeric_Types__double2float_12.c":97:13)
#loc102 = loc("CWE681_Incorrect_Conversion_Between_Numeric_Types__double2float_12.c":105:13)
#loc103 = loc("CWE681_Incorrect_Conversion_Between_Numeric_Types__double2float_12.c":97:23)
#loc104 = loc("CWE681_Incorrect_Conversion_Between_Numeric_Types__double2float_12.c":97:36)
#loc105 = loc("CWE681_Incorrect_Conversion_Between_Numeric_Types__double2float_12.c":97:53)
#loc106 = loc("CWE681_Incorrect_Conversion_Between_Numeric_Types__double2float_12.c":97:17)
#loc107 = loc("CWE681_Incorrect_Conversion_Between_Numeric_Types__double2float_12.c":97:63)
#loc108 = loc("CWE681_Incorrect_Conversion_Between_Numeric_Types__double2float_12.c":98:13)
#loc109 = loc("CWE681_Incorrect_Conversion_Between_Numeric_Types__double2float_12.c":101:13)
#loc110 = loc("CWE681_Incorrect_Conversion_Between_Numeric_Types__double2float_12.c":103:13)
#loc111 = loc("CWE681_Incorrect_Conversion_Between_Numeric_Types__double2float_12.c":100:37)
#loc112 = loc("CWE681_Incorrect_Conversion_Between_Numeric_Types__double2float_12.c":100:32)
#loc113 = loc("CWE681_Incorrect_Conversion_Between_Numeric_Types__double2float_12.c":100:17)
#loc114 = loc("CWE681_Incorrect_Conversion_Between_Numeric_Types__double2float_12.c":100:48)
#loc115 = loc("CWE681_Incorrect_Conversion_Between_Numeric_Types__double2float_12.c":104:27)
#loc116 = loc("CWE681_Incorrect_Conversion_Between_Numeric_Types__double2float_12.c":104:17)
#loc117 = loc("CWE681_Incorrect_Conversion_Between_Numeric_Types__double2float_12.c":107:13)
#loc118 = loc("CWE681_Incorrect_Conversion_Between_Numeric_Types__double2float_12.c":114:13)
#loc119 = loc("CWE681_Incorrect_Conversion_Between_Numeric_Types__double2float_12.c":107:17)
#loc120 = loc("CWE681_Incorrect_Conversion_Between_Numeric_Types__double2float_12.c":107:32)
#loc121 = loc("CWE681_Incorrect_Conversion_Between_Numeric_Types__double2float_12.c":107:40)
#loc122 = loc("CWE681_Incorrect_Conversion_Between_Numeric_Types__double2float_12.c":107:43)
#loc123 = loc("CWE681_Incorrect_Conversion_Between_Numeric_Types__double2float_12.c":107:58)
#loc124 = loc("CWE681_Incorrect_Conversion_Between_Numeric_Types__double2float_12.c":108:13)
#loc125 = loc("CWE681_Incorrect_Conversion_Between_Numeric_Types__double2float_12.c":110:13)
#loc126 = loc("CWE681_Incorrect_Conversion_Between_Numeric_Types__double2float_12.c":112:13)
#loc127 = loc("CWE681_Incorrect_Conversion_Between_Numeric_Types__double2float_12.c":109:27)
#loc128 = loc("CWE681_Incorrect_Conversion_Between_Numeric_Types__double2float_12.c":109:17)
#loc129 = loc("CWE681_Incorrect_Conversion_Between_Numeric_Types__double2float_12.c":113:39)
#loc130 = loc("CWE681_Incorrect_Conversion_Between_Numeric_Types__double2float_12.c":113:17)
#loc131 = loc("CWE681_Incorrect_Conversion_Between_Numeric_Types__double2float_12.c":119:9)
#loc132 = loc("CWE681_Incorrect_Conversion_Between_Numeric_Types__double2float_12.c":145:9)
#loc133 = loc("CWE681_Incorrect_Conversion_Between_Numeric_Types__double2float_12.c":120:13)
#loc134 = loc("CWE681_Incorrect_Conversion_Between_Numeric_Types__double2float_12.c":120:45)
#loc135 = loc("CWE681_Incorrect_Conversion_Between_Numeric_Types__double2float_12.c":121:13)
#loc136 = loc("CWE681_Incorrect_Conversion_Between_Numeric_Types__double2float_12.c":121:35)
#loc137 = loc("CWE681_Incorrect_Conversion_Between_Numeric_Types__double2float_12.c":127:13)
#loc138 = loc("CWE681_Incorrect_Conversion_Between_Numeric_Types__double2float_12.c":135:13)
#loc139 = loc("CWE681_Incorrect_Conversion_Between_Numeric_Types__double2float_12.c":127:23)
#loc140 = loc("CWE681_Incorrect_Conversion_Between_Numeric_Types__double2float_12.c":127:36)
#loc141 = loc("CWE681_Incorrect_Conversion_Between_Numeric_Types__double2float_12.c":127:53)
#loc142 = loc("CWE681_Incorrect_Conversion_Between_Numeric_Types__double2float_12.c":127:17)
#loc143 = loc("CWE681_Incorrect_Conversion_Between_Numeric_Types__double2float_12.c":127:63)
#loc144 = loc("CWE681_Incorrect_Conversion_Between_Numeric_Types__double2float_12.c":128:13)
#loc145 = loc("CWE681_Incorrect_Conversion_Between_Numeric_Types__double2float_12.c":131:13)
#loc146 = loc("CWE681_Incorrect_Conversion_Between_Numeric_Types__double2float_12.c":133:13)
#loc147 = loc("CWE681_Incorrect_Conversion_Between_Numeric_Types__double2float_12.c":130:37)
#loc148 = loc("CWE681_Incorrect_Conversion_Between_Numeric_Types__double2float_12.c":130:32)
#loc149 = loc("CWE681_Incorrect_Conversion_Between_Numeric_Types__double2float_12.c":130:17)
#loc150 = loc("CWE681_Incorrect_Conversion_Between_Numeric_Types__double2float_12.c":130:48)
#loc151 = loc("CWE681_Incorrect_Conversion_Between_Numeric_Types__double2float_12.c":134:27)
#loc152 = loc("CWE681_Incorrect_Conversion_Between_Numeric_Types__double2float_12.c":134:17)
#loc153 = loc("CWE681_Incorrect_Conversion_Between_Numeric_Types__double2float_12.c":137:13)
#loc154 = loc("CWE681_Incorrect_Conversion_Between_Numeric_Types__double2float_12.c":144:13)
#loc155 = loc("CWE681_Incorrect_Conversion_Between_Numeric_Types__double2float_12.c":137:17)
#loc156 = loc("CWE681_Incorrect_Conversion_Between_Numeric_Types__double2float_12.c":137:32)
#loc157 = loc("CWE681_Incorrect_Conversion_Between_Numeric_Types__double2float_12.c":137:40)
#loc158 = loc("CWE681_Incorrect_Conversion_Between_Numeric_Types__double2float_12.c":137:43)
#loc159 = loc("CWE681_Incorrect_Conversion_Between_Numeric_Types__double2float_12.c":137:58)
#loc160 = loc("CWE681_Incorrect_Conversion_Between_Numeric_Types__double2float_12.c":138:13)
#loc161 = loc("CWE681_Incorrect_Conversion_Between_Numeric_Types__double2float_12.c":140:13)
#loc162 = loc("CWE681_Incorrect_Conversion_Between_Numeric_Types__double2float_12.c":142:13)
#loc163 = loc("CWE681_Incorrect_Conversion_Between_Numeric_Types__double2float_12.c":139:27)
#loc164 = loc("CWE681_Incorrect_Conversion_Between_Numeric_Types__double2float_12.c":139:17)
#loc165 = loc("CWE681_Incorrect_Conversion_Between_Numeric_Types__double2float_12.c":143:39)
#loc166 = loc("CWE681_Incorrect_Conversion_Between_Numeric_Types__double2float_12.c":143:17)
#loc167 = loc(fused[#loc1, #loc2])
#loc168 = loc(fused[#loc3, #loc4])
#loc169 = loc(fused[#loc5, #loc6])
#loc170 = loc(fused[#loc7, #loc8])
#loc171 = loc(fused[#loc9, #loc10])
#loc172 = loc(fused[#loc12, #loc13])
#loc173 = loc(fused[#loc15, #loc16])
#loc174 = loc(fused[#loc17, #loc18])
#loc175 = loc(fused[#loc19, #loc20])
#loc176 = loc(fused[#loc21, #loc22, #loc23, #loc18])
#loc177 = loc(fused[#loc24, #loc25])
#loc178 = loc(fused[#loc26, #loc27])
#loc179 = loc(fused[#loc28, #loc29])
#loc180 = loc(fused[#loc30, #loc31])
#loc181 = loc(fused[#loc35, #loc36])
#loc182 = loc(fused[#loc37, #loc38, #loc39, #loc31])
#loc183 = loc(fused[#loc42, #loc43])
#loc184 = loc(fused[#loc47, #loc48])
#loc185 = loc(fused[#loc49, #loc50])
#loc186 = loc(fused[#loc51, #loc52])
#loc187 = loc(fused[#loc53, #loc54])
#loc188 = loc(fused[#loc58, #loc59])
#loc189 = loc(fused[#loc60, #loc61, #loc62, #loc54])
#loc190 = loc(fused[#loc65, #loc66])
#loc191 = loc(fused[#loc69, #loc70])
#loc192 = loc(fused[#loc71, #loc72])
#loc193 = loc(fused[#loc74, #loc75])
#loc194 = loc(fused[#loc76, #loc77, #loc78, #loc70])
#loc195 = loc(fused[#loc82, #loc83])
#loc196 = loc(fused[#loc84, #loc85])
#loc197 = loc(fused[#loc86, #loc87])
#loc198 = loc(fused[#loc88, #loc89])
#loc199 = loc(fused[#loc90, #loc91])
#loc200 = loc(fused[#loc92, #loc93, #loc94, #loc89])
#loc201 = loc(fused[#loc95, #loc96])
#loc202 = loc(fused[#loc97, #loc98])
#loc203 = loc(fused[#loc99, #loc100])
#loc204 = loc(fused[#loc101, #loc102])
#loc205 = loc(fused[#loc106, #loc107])
#loc206 = loc(fused[#loc108, #loc109, #loc110, #loc102])
#loc207 = loc(fused[#loc113, #loc114])
#loc208 = loc(fused[#loc117, #loc118])
#loc209 = loc(fused[#loc119, #loc120])
#loc210 = loc(fused[#loc122, #loc123])
#loc211 = loc(fused[#loc124, #loc125, #loc126, #loc118])
#loc212 = loc(fused[#loc131, #loc132])
#loc213 = loc(fused[#loc133, #loc134])
#loc214 = loc(fused[#loc135, #loc136])
#loc215 = loc(fused[#loc137, #loc138])
#loc216 = loc(fused[#loc142, #loc143])
#loc217 = loc(fused[#loc144, #loc145, #loc146, #loc138])
#loc218 = loc(fused[#loc149, #loc150])
#loc219 = loc(fused[#loc153, #loc154])
#loc220 = loc(fused[#loc155, #loc156])
#loc221 = loc(fused[#loc158, #loc159])
#loc222 = loc(fused[#loc160, #loc161, #loc162, #loc154])
