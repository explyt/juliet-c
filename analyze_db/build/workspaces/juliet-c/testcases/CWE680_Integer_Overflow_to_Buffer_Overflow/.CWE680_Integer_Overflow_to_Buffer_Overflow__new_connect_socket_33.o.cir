!s32i = !cir.int<s, 32>
!s64i = !cir.int<s, 64>
!s8i = !cir.int<s, 8>
!u16i = !cir.int<u, 16>
!u32i = !cir.int<u, 32>
!u64i = !cir.int<u, 64>
!u8i = !cir.int<u, 8>
!void = !cir.void
#false = #cir.bool<false> : !cir.bool
#fn_attr = #cir<extra({nothrow = #cir.nothrow})>
#fn_attr1 = #cir<extra({inline = #cir.inline<no>, optnone = #cir.optnone, uwtable = #cir.uwtable<async>})>
#true = #cir.bool<true> : !cir.bool
!ty_in_addr = !cir.record<struct "in_addr" {!u32i} #cir.record.decl.ast>
!ty_sockaddr = !cir.record<struct "sockaddr" {!u16i, !cir.array<!s8i x 14>} #cir.record.decl.ast>
!ty_sockaddr_in = !cir.record<struct "sockaddr_in" {!u16i, !u16i, !ty_in_addr, !cir.array<!u8i x 8>}>
module @"/workspaces/juliet-c/testcases/CWE680_Integer_Overflow_to_Buffer_Overflow/CWE680_Integer_Overflow_to_Buffer_Overflow__new_connect_socket_33.cpp" attributes {cir.lang = #cir.lang<cxx>, cir.sob = #cir.signed_overflow_behavior<undefined>, cir.triple = "x86_64-unknown-linux-gnu", cir.type_size_info = #cir.type_size_info<char = 8, int = 32, size_t = 64>, cir.uwtable = #cir.uwtable<async>, dlti.dl_spec = #dlti.dl_spec<i8 = dense<8> : vector<2xi64>, i16 = dense<16> : vector<2xi64>, f16 = dense<16> : vector<2xi64>, !llvm.ptr<270> = dense<32> : vector<4xi64>, i32 = dense<32> : vector<2xi64>, f128 = dense<128> : vector<2xi64>, f64 = dense<64> : vector<2xi64>, !llvm.ptr<271> = dense<32> : vector<4xi64>, !llvm.ptr<272> = dense<64> : vector<4xi64>, i64 = dense<64> : vector<2xi64>, f80 = dense<128> : vector<2xi64>, i128 = dense<128> : vector<2xi64>, !llvm.ptr = dense<64> : vector<4xi64>, i1 = dense<8> : vector<2xi64>, "dlti.stack_alignment" = 128 : i64, "dlti.mangling_mode" = "e", "dlti.endianness" = "little">} {
  cir.func private @socket(!s32i, !s32i, !s32i) -> !s32i extra(#fn_attr) loc(#loc208)
  cir.func private @inet_addr(!cir.ptr<!s8i>) -> !u32i extra(#fn_attr) loc(#loc209)
  cir.global "private" constant cir_private dsolocal @".str" = #cir.const_array<"127.0.0.1\00" : !cir.array<!s8i x 10>> : !cir.array<!s8i x 10> {alignment = 1 : i64} loc(#loc5)
  cir.func private @htons(!u16i) -> !u16i extra(#fn_attr) loc(#loc210)
  cir.func private @connect(!s32i, !cir.ptr<!ty_sockaddr>, !u32i) -> !s32i loc(#loc211)
  cir.func private @recv(!s32i, !cir.ptr<!void>, !u64i, !s32i) -> !s64i loc(#loc212)
  cir.func private @atoi(!cir.ptr<!s8i>) -> !s32i extra(#fn_attr) loc(#loc213)
  cir.func private @close(!s32i) -> !s32i loc(#loc214)
  cir.func private @_Znam(!u64i) -> !cir.ptr<!void> loc(#loc215)
  cir.func private @printIntLine(!s32i) loc(#loc216)
  cir.func @_ZN65CWE680_Integer_Overflow_to_Buffer_Overflow__new_connect_socket_333badEv() extra(#fn_attr1) {
    %0 = cir.alloca !s32i, !cir.ptr<!s32i>, ["data"] {alignment = 4 : i64} loc(#loc218)
    %1 = cir.alloca !cir.ptr<!s32i>, !cir.ptr<!cir.ptr<!s32i>>, ["dataRef", init, const] {alignment = 8 : i64} loc(#loc219)
    cir.store %0, %1 : !cir.ptr<!s32i>, !cir.ptr<!cir.ptr<!s32i>> loc(#loc25)
    %2 = cir.const #cir.int<1> : !s32i loc(#loc26)
    %3 = cir.unary(minus, %2) nsw : !s32i, !s32i loc(#loc27)
    cir.store %3, %0 : !s32i, !cir.ptr<!s32i> loc(#loc220)
    cir.scope {
      %4 = cir.alloca !s32i, !cir.ptr<!s32i>, ["recvResult"] {alignment = 4 : i64} loc(#loc222)
      %5 = cir.alloca !ty_sockaddr_in, !cir.ptr<!ty_sockaddr_in>, ["service"] {alignment = 4 : i64} loc(#loc223)
      %6 = cir.alloca !s32i, !cir.ptr<!s32i>, ["connectSocket", init] {alignment = 4 : i64} loc(#loc224)
      %7 = cir.alloca !cir.array<!s8i x 14>, !cir.ptr<!cir.array<!s8i x 14>>, ["inputBuffer"] {alignment = 1 : i64} loc(#loc225)
      %8 = cir.const #cir.int<1> : !s32i loc(#loc36)
      %9 = cir.unary(minus, %8) nsw : !s32i, !s32i loc(#loc36)
      cir.store %9, %6 : !s32i, !cir.ptr<!s32i> loc(#loc224)
      cir.scope {
        cir.do {
          cir.scope {
            %10 = cir.const #cir.int<2> : !s32i loc(#loc43)
            %11 = cir.const #cir.int<1> : !u32i loc(#loc44)
            %12 = cir.cast(integral, %11 : !u32i), !s32i loc(#loc44)
            %13 = cir.const #cir.int<6> : !u32i loc(#loc45)
            %14 = cir.cast(integral, %13 : !u32i), !s32i loc(#loc45)
            %15 = cir.call @socket(%10, %12, %14) : (!s32i, !s32i, !s32i) -> !s32i extra(#fn_attr) loc(#loc46)
            cir.store %15, %6 : !s32i, !cir.ptr<!s32i> loc(#loc228)
            cir.scope {
              %53 = cir.load %6 : !cir.ptr<!s32i>, !s32i loc(#loc51)
              %54 = cir.const #cir.int<1> : !s32i loc(#loc52)
              %55 = cir.unary(minus, %54) nsw : !s32i, !s32i loc(#loc52)
              %56 = cir.cmp(eq, %53, %55) : !s32i, !cir.bool loc(#loc230)
              cir.if %56 {
                cir.break loc(#loc54)
              } loc(#loc231)
            } loc(#loc229)
            %16 = cir.cast(bitcast, %5 : !cir.ptr<!ty_sockaddr_in>), !cir.ptr<!void> loc(#loc232)
            %17 = cir.const #cir.int<0> : !s32i loc(#loc57)
            %18 = cir.const #cir.int<16> : !u64i loc(#loc233)
            cir.libc.memset %18 bytes from %16 set to %17 : !cir.ptr<!void>, !s32i, !u64i loc(#loc234)
            %19 = cir.const #cir.int<2> : !s32i loc(#loc62)
            %20 = cir.cast(integral, %19 : !s32i), !u16i loc(#loc62)
            %21 = cir.get_member %5[0] {name = "sin_family"} : !cir.ptr<!ty_sockaddr_in> -> !cir.ptr<!u16i> loc(#loc63)
            cir.store %20, %21 : !u16i, !cir.ptr<!u16i> loc(#loc235)
            %22 = cir.get_global @".str" : !cir.ptr<!cir.array<!s8i x 10>> loc(#loc5)
            %23 = cir.cast(array_to_ptrdecay, %22 : !cir.ptr<!cir.array<!s8i x 10>>), !cir.ptr<!s8i> loc(#loc5)
            %24 = cir.call @inet_addr(%23) : (!cir.ptr<!s8i>) -> !u32i extra(#fn_attr) loc(#loc65)
            %25 = cir.get_member %5[2] {name = "sin_addr"} : !cir.ptr<!ty_sockaddr_in> -> !cir.ptr<!ty_in_addr> loc(#loc66)
            %26 = cir.get_member %25[0] {name = "s_addr"} : !cir.ptr<!ty_in_addr> -> !cir.ptr<!u32i> loc(#loc67)
            cir.store %24, %26 : !u32i, !cir.ptr<!u32i> loc(#loc236)
            %27 = cir.const #cir.int<27015> : !s32i loc(#loc70)
            %28 = cir.cast(integral, %27 : !s32i), !u16i loc(#loc70)
            %29 = cir.call @htons(%28) : (!u16i) -> !u16i side_effect(const) extra(#fn_attr) loc(#loc71)
            %30 = cir.get_member %5[1] {name = "sin_port"} : !cir.ptr<!ty_sockaddr_in> -> !cir.ptr<!u16i> loc(#loc72)
            cir.store %29, %30 : !u16i, !cir.ptr<!u16i> loc(#loc237)
            cir.scope {
              %53 = cir.load %6 : !cir.ptr<!s32i>, !s32i loc(#loc77)
              %54 = cir.cast(bitcast, %5 : !cir.ptr<!ty_sockaddr_in>), !cir.ptr<!ty_sockaddr> loc(#loc239)
              %55 = cir.const #cir.int<16> : !u64i loc(#loc240)
              %56 = cir.cast(integral, %55 : !u64i), !u32i loc(#loc240)
              %57 = cir.call @connect(%53, %54, %56) : (!s32i, !cir.ptr<!ty_sockaddr>, !u32i) -> !s32i loc(#loc82)
              %58 = cir.const #cir.int<1> : !s32i loc(#loc83)
              %59 = cir.unary(minus, %58) nsw : !s32i, !s32i loc(#loc83)
              %60 = cir.cmp(eq, %57, %59) : !s32i, !cir.bool loc(#loc241)
              cir.if %60 {
                cir.break loc(#loc85)
              } loc(#loc242)
            } loc(#loc238)
            %31 = cir.load %6 : !cir.ptr<!s32i>, !s32i loc(#loc86)
            %32 = cir.cast(array_to_ptrdecay, %7 : !cir.ptr<!cir.array<!s8i x 14>>), !cir.ptr<!s8i> loc(#loc87)
            %33 = cir.cast(bitcast, %32 : !cir.ptr<!s8i>), !cir.ptr<!void> loc(#loc87)
            %34 = cir.const #cir.int<3> : !s32i loc(#loc88)
            %35 = cir.cast(integral, %34 : !s32i), !u64i loc(#loc88)
            %36 = cir.const #cir.int<4> : !u64i loc(#loc88)
            %37 = cir.binop(mul, %35, %36) : !u64i loc(#loc88)
            %38 = cir.const #cir.int<2> : !s32i loc(#loc88)
            %39 = cir.cast(integral, %38 : !s32i), !u64i loc(#loc88)
            %40 = cir.binop(add, %37, %39) : !u64i loc(#loc88)
            %41 = cir.const #cir.int<1> : !s32i loc(#loc89)
            %42 = cir.cast(integral, %41 : !s32i), !u64i loc(#loc89)
            %43 = cir.binop(sub, %40, %42) : !u64i loc(#loc243)
            %44 = cir.const #cir.int<0> : !s32i loc(#loc90)
            %45 = cir.call @recv(%31, %33, %43, %44) : (!s32i, !cir.ptr<!void>, !u64i, !s32i) -> !s64i loc(#loc91)
            %46 = cir.cast(integral, %45 : !s64i), !s32i loc(#loc91)
            cir.store %46, %4 : !s32i, !cir.ptr<!s32i> loc(#loc244)
            cir.scope {
              %53 = cir.load %4 : !cir.ptr<!s32i>, !s32i loc(#loc96)
              %54 = cir.const #cir.int<1> : !s32i loc(#loc97)
              %55 = cir.unary(minus, %54) nsw : !s32i, !s32i loc(#loc97)
              %56 = cir.cmp(eq, %53, %55) : !s32i, !cir.bool loc(#loc246)
              %57 = cir.ternary(%56, true {
                %58 = cir.const #true loc(#loc98)
                cir.yield %58 : !cir.bool loc(#loc98)
              }, false {
                %58 = cir.load %4 : !cir.ptr<!s32i>, !s32i loc(#loc99)
                %59 = cir.const #cir.int<0> : !s32i loc(#loc100)
                %60 = cir.cmp(eq, %58, %59) : !s32i, !cir.bool loc(#loc247)
                %61 = cir.ternary(%60, true {
                  %62 = cir.const #true loc(#loc98)
                  cir.yield %62 : !cir.bool loc(#loc98)
                }, false {
                  %62 = cir.const #false loc(#loc98)
                  cir.yield %62 : !cir.bool loc(#loc98)
                }) : (!cir.bool) -> !cir.bool loc(#loc98)
                cir.yield %61 : !cir.bool loc(#loc98)
              }) : (!cir.bool) -> !cir.bool loc(#loc98)
              cir.if %57 {
                cir.break loc(#loc102)
              } loc(#loc248)
            } loc(#loc245)
            %47 = cir.const #cir.int<0> : !s8i loc(#loc103)
            %48 = cir.load %4 : !cir.ptr<!s32i>, !s32i loc(#loc104)
            %49 = cir.cast(array_to_ptrdecay, %7 : !cir.ptr<!cir.array<!s8i x 14>>), !cir.ptr<!s8i> loc(#loc105)
            %50 = cir.ptr_stride(%49 : !cir.ptr<!s8i>, %48 : !s32i), !cir.ptr<!s8i> loc(#loc105)
            cir.store %47, %50 : !s8i, !cir.ptr<!s8i> loc(#loc249)
            %51 = cir.cast(array_to_ptrdecay, %7 : !cir.ptr<!cir.array<!s8i x 14>>), !cir.ptr<!s8i> loc(#loc106)
            %52 = cir.call @atoi(%51) : (!cir.ptr<!s8i>) -> !s32i side_effect(pure) extra(#fn_attr) loc(#loc107)
            cir.store %52, %0 : !s32i, !cir.ptr<!s32i> loc(#loc250)
          } loc(#loc227)
          cir.yield loc(#loc40)
        } while {
          %10 = cir.const #cir.int<0> : !s32i loc(#loc110)
          %11 = cir.cast(int_to_bool, %10 : !s32i), !cir.bool loc(#loc110)
          cir.condition(%11) loc(#loc110)
        } loc(#loc226)
      } loc(#loc226)
      cir.scope {
        %10 = cir.load %6 : !cir.ptr<!s32i>, !s32i loc(#loc113)
        %11 = cir.const #cir.int<1> : !s32i loc(#loc114)
        %12 = cir.unary(minus, %11) nsw : !s32i, !s32i loc(#loc114)
        %13 = cir.cmp(ne, %10, %12) : !s32i, !cir.bool loc(#loc252)
        cir.if %13 {
          %14 = cir.load %6 : !cir.ptr<!s32i>, !s32i loc(#loc116)
          %15 = cir.call @close(%14) : (!s32i) -> !s32i loc(#loc117)
        } loc(#loc253)
      } loc(#loc251)
    } loc(#loc221)
    cir.scope {
      %4 = cir.alloca !s32i, !cir.ptr<!s32i>, ["data", init] {alignment = 4 : i64} loc(#loc255)
      %5 = cir.load %1 : !cir.ptr<!cir.ptr<!s32i>>, !cir.ptr<!s32i> loc(#loc121)
      %6 = cir.load %5 : !cir.ptr<!s32i>, !s32i loc(#loc121)
      cir.store %6, %4 : !s32i, !cir.ptr<!s32i> loc(#loc255)
      cir.scope {
        %7 = cir.alloca !u64i, !cir.ptr<!u64i>, ["dataBytes"] {alignment = 8 : i64} loc(#loc257)
        %8 = cir.alloca !u64i, !cir.ptr<!u64i>, ["i"] {alignment = 8 : i64} loc(#loc258)
        %9 = cir.alloca !cir.ptr<!s32i>, !cir.ptr<!cir.ptr<!s32i>>, ["intPointer"] {alignment = 8 : i64} loc(#loc259)
        %10 = cir.load %4 : !cir.ptr<!s32i>, !s32i loc(#loc129)
        %11 = cir.cast(integral, %10 : !s32i), !u64i loc(#loc129)
        %12 = cir.const #cir.int<4> : !u64i loc(#loc260)
        %13 = cir.binop(mul, %11, %12) : !u64i loc(#loc261)
        cir.store %13, %7 : !u64i, !cir.ptr<!u64i> loc(#loc262)
        %14 = cir.load %7 : !cir.ptr<!u64i>, !u64i loc(#loc133)
        %15 = cir.call @_Znam(%14) : (!u64i) -> !cir.ptr<!void> loc(#loc134)
        %16 = cir.cast(bitcast, %15 : !cir.ptr<!void>), !cir.ptr<!s8i> loc(#loc263)
        %17 = cir.cast(bitcast, %16 : !cir.ptr<!s8i>), !cir.ptr<!s32i> loc(#loc263)
        cir.store %17, %9 : !cir.ptr<!s32i>, !cir.ptr<!cir.ptr<!s32i>> loc(#loc264)
        cir.scope {
          %23 = cir.const #cir.int<0> : !s32i loc(#loc140)
          %24 = cir.cast(integral, %23 : !s32i), !u64i loc(#loc140)
          cir.store %24, %8 : !u64i, !cir.ptr<!u64i> loc(#loc266)
          cir.for : cond {
            %25 = cir.load %8 : !cir.ptr<!u64i>, !u64i loc(#loc142)
            %26 = cir.load %4 : !cir.ptr<!s32i>, !s32i loc(#loc143)
            %27 = cir.cast(integral, %26 : !s32i), !u64i loc(#loc143)
            %28 = cir.cmp(lt, %25, %27) : !u64i, !cir.bool loc(#loc267)
            cir.condition(%28) loc(#loc267)
          } body {
            cir.scope {
              %25 = cir.const #cir.int<0> : !s32i loc(#loc145)
              %26 = cir.load %9 : !cir.ptr<!cir.ptr<!s32i>>, !cir.ptr<!s32i> loc(#loc146)
              %27 = cir.load %8 : !cir.ptr<!u64i>, !u64i loc(#loc147)
              %28 = cir.ptr_stride(%26 : !cir.ptr<!s32i>, %27 : !u64i), !cir.ptr<!s32i> loc(#loc148)
              cir.store %25, %28 : !s32i, !cir.ptr<!s32i> loc(#loc269)
            } loc(#loc268)
            cir.yield loc(#loc139)
          } step {
            %25 = cir.load %8 : !cir.ptr<!u64i>, !u64i loc(#loc149)
            %26 = cir.unary(inc, %25) : !u64i, !u64i loc(#loc150)
            cir.store %26, %8 : !u64i, !cir.ptr<!u64i> loc(#loc270)
            cir.yield loc(#loc265)
          } loc(#loc265)
        } loc(#loc265)
        %18 = cir.load %9 : !cir.ptr<!cir.ptr<!s32i>>, !cir.ptr<!s32i> loc(#loc151)
        %19 = cir.const #cir.int<0> : !s32i loc(#loc152)
        %20 = cir.ptr_stride(%18 : !cir.ptr<!s32i>, %19 : !s32i), !cir.ptr<!s32i> loc(#loc153)
        %21 = cir.load %20 : !cir.ptr<!s32i>, !s32i loc(#loc151)
        cir.call @printIntLine(%21) : (!s32i) -> () loc(#loc154)
        %22 = cir.load %9 : !cir.ptr<!cir.ptr<!s32i>>, !cir.ptr<!s32i> loc(#loc155)
        cir.delete.array %22 : <!s32i> loc(#loc155)
      } loc(#loc256)
    } loc(#loc254)
    cir.return loc(#loc21)
  } loc(#loc217)
  cir.func internal private @_ZN65CWE680_Integer_Overflow_to_Buffer_Overflow__new_connect_socket_33L7goodG2BEv() extra(#fn_attr1) {
    %0 = cir.alloca !s32i, !cir.ptr<!s32i>, ["data"] {alignment = 4 : i64} loc(#loc272)
    %1 = cir.alloca !cir.ptr<!s32i>, !cir.ptr<!cir.ptr<!s32i>>, ["dataRef", init, const] {alignment = 8 : i64} loc(#loc273)
    cir.store %0, %1 : !cir.ptr<!s32i>, !cir.ptr<!cir.ptr<!s32i>> loc(#loc161)
    %2 = cir.const #cir.int<1> : !s32i loc(#loc162)
    %3 = cir.unary(minus, %2) nsw : !s32i, !s32i loc(#loc163)
    cir.store %3, %0 : !s32i, !cir.ptr<!s32i> loc(#loc274)
    %4 = cir.const #cir.int<20> : !s32i loc(#loc165)
    cir.store %4, %0 : !s32i, !cir.ptr<!s32i> loc(#loc275)
    cir.scope {
      %5 = cir.alloca !s32i, !cir.ptr<!s32i>, ["data", init] {alignment = 4 : i64} loc(#loc277)
      %6 = cir.load %1 : !cir.ptr<!cir.ptr<!s32i>>, !cir.ptr<!s32i> loc(#loc170)
      %7 = cir.load %6 : !cir.ptr<!s32i>, !s32i loc(#loc170)
      cir.store %7, %5 : !s32i, !cir.ptr<!s32i> loc(#loc277)
      cir.scope {
        %8 = cir.alloca !u64i, !cir.ptr<!u64i>, ["dataBytes"] {alignment = 8 : i64} loc(#loc279)
        %9 = cir.alloca !u64i, !cir.ptr<!u64i>, ["i"] {alignment = 8 : i64} loc(#loc280)
        %10 = cir.alloca !cir.ptr<!s32i>, !cir.ptr<!cir.ptr<!s32i>>, ["intPointer"] {alignment = 8 : i64} loc(#loc281)
        %11 = cir.load %5 : !cir.ptr<!s32i>, !s32i loc(#loc178)
        %12 = cir.cast(integral, %11 : !s32i), !u64i loc(#loc178)
        %13 = cir.const #cir.int<4> : !u64i loc(#loc282)
        %14 = cir.binop(mul, %12, %13) : !u64i loc(#loc283)
        cir.store %14, %8 : !u64i, !cir.ptr<!u64i> loc(#loc284)
        %15 = cir.load %8 : !cir.ptr<!u64i>, !u64i loc(#loc182)
        %16 = cir.call @_Znam(%15) : (!u64i) -> !cir.ptr<!void> loc(#loc183)
        %17 = cir.cast(bitcast, %16 : !cir.ptr<!void>), !cir.ptr<!s8i> loc(#loc285)
        %18 = cir.cast(bitcast, %17 : !cir.ptr<!s8i>), !cir.ptr<!s32i> loc(#loc285)
        cir.store %18, %10 : !cir.ptr<!s32i>, !cir.ptr<!cir.ptr<!s32i>> loc(#loc286)
        cir.scope {
          %24 = cir.const #cir.int<0> : !s32i loc(#loc189)
          %25 = cir.cast(integral, %24 : !s32i), !u64i loc(#loc189)
          cir.store %25, %9 : !u64i, !cir.ptr<!u64i> loc(#loc288)
          cir.for : cond {
            %26 = cir.load %9 : !cir.ptr<!u64i>, !u64i loc(#loc191)
            %27 = cir.load %5 : !cir.ptr<!s32i>, !s32i loc(#loc192)
            %28 = cir.cast(integral, %27 : !s32i), !u64i loc(#loc192)
            %29 = cir.cmp(lt, %26, %28) : !u64i, !cir.bool loc(#loc289)
            cir.condition(%29) loc(#loc289)
          } body {
            cir.scope {
              %26 = cir.const #cir.int<0> : !s32i loc(#loc194)
              %27 = cir.load %10 : !cir.ptr<!cir.ptr<!s32i>>, !cir.ptr<!s32i> loc(#loc195)
              %28 = cir.load %9 : !cir.ptr<!u64i>, !u64i loc(#loc196)
              %29 = cir.ptr_stride(%27 : !cir.ptr<!s32i>, %28 : !u64i), !cir.ptr<!s32i> loc(#loc197)
              cir.store %26, %29 : !s32i, !cir.ptr<!s32i> loc(#loc291)
            } loc(#loc290)
            cir.yield loc(#loc188)
          } step {
            %26 = cir.load %9 : !cir.ptr<!u64i>, !u64i loc(#loc198)
            %27 = cir.unary(inc, %26) : !u64i, !u64i loc(#loc199)
            cir.store %27, %9 : !u64i, !cir.ptr<!u64i> loc(#loc292)
            cir.yield loc(#loc287)
          } loc(#loc287)
        } loc(#loc287)
        %19 = cir.load %10 : !cir.ptr<!cir.ptr<!s32i>>, !cir.ptr<!s32i> loc(#loc200)
        %20 = cir.const #cir.int<0> : !s32i loc(#loc201)
        %21 = cir.ptr_stride(%19 : !cir.ptr<!s32i>, %20 : !s32i), !cir.ptr<!s32i> loc(#loc202)
        %22 = cir.load %21 : !cir.ptr<!s32i>, !s32i loc(#loc200)
        cir.call @printIntLine(%22) : (!s32i) -> () loc(#loc203)
        %23 = cir.load %10 : !cir.ptr<!cir.ptr<!s32i>>, !cir.ptr<!s32i> loc(#loc204)
        cir.delete.array %23 : <!s32i> loc(#loc204)
      } loc(#loc278)
    } loc(#loc276)
    cir.return loc(#loc157)
  } loc(#loc271)
  cir.func @_ZN65CWE680_Integer_Overflow_to_Buffer_Overflow__new_connect_socket_334goodEv() extra(#fn_attr1) {
    cir.call @_ZN65CWE680_Integer_Overflow_to_Buffer_Overflow__new_connect_socket_33L7goodG2BEv() : () -> () loc(#loc207)
    cir.return loc(#loc206)
  } loc(#loc293)
} loc(#loc)
#loc = loc("/workspaces/juliet-c/testcases/CWE680_Integer_Overflow_to_Buffer_Overflow/CWE680_Integer_Overflow_to_Buffer_Overflow__new_connect_socket_33.cpp":0:0)
#loc1 = loc("/usr/include/x86_64-linux-gnu/sys/socket.h":102:1)
#loc2 = loc("/usr/include/x86_64-linux-gnu/sys/socket.h":102:62)
#loc3 = loc("/usr/include/arpa/inet.h":34:1)
#loc4 = loc("/usr/include/arpa/inet.h":34:47)
#loc5 = loc("CWE680_Integer_Overflow_to_Buffer_Overflow__new_connect_socket_33.cpp":78:49)
#loc6 = loc("/usr/include/netinet/in.h":402:1)
#loc7 = loc("/usr/include/netinet/in.h":403:40)
#loc8 = loc("/usr/include/x86_64-linux-gnu/sys/socket.h":126:1)
#loc9 = loc("/usr/include/x86_64-linux-gnu/sys/socket.h":126:75)
#loc10 = loc("/usr/include/x86_64-linux-gnu/sys/socket.h":145:1)
#loc11 = loc("/usr/include/x86_64-linux-gnu/sys/socket.h":145:68)
#loc12 = loc("/usr/include/stdlib.h":105:1)
#loc13 = loc("/usr/include/stdlib.h":106:33)
#loc14 = loc("/usr/include/unistd.h":358:1)
#loc15 = loc("/usr/include/unistd.h":358:27)
#loc16 = loc("/usr/lib/gcc/x86_64-linux-gnu/13/../../../../include/c++/13/new":128:20)
#loc17 = loc("/usr/lib/gcc/x86_64-linux-gnu/13/../../../../include/c++/13/new":129:41)
#loc18 = loc("../../testcasesupport/std_testcase_io.h":18:1)
#loc19 = loc("../../testcasesupport/std_testcase_io.h":18:33)
#loc20 = loc("CWE680_Integer_Overflow_to_Buffer_Overflow__new_connect_socket_33.cpp":46:1)
#loc21 = loc("CWE680_Integer_Overflow_to_Buffer_Overflow__new_connect_socket_33.cpp":124:1)
#loc22 = loc("CWE680_Integer_Overflow_to_Buffer_Overflow__new_connect_socket_33.cpp":48:5)
#loc23 = loc("CWE680_Integer_Overflow_to_Buffer_Overflow__new_connect_socket_33.cpp":48:9)
#loc24 = loc("CWE680_Integer_Overflow_to_Buffer_Overflow__new_connect_socket_33.cpp":49:5)
#loc25 = loc("CWE680_Integer_Overflow_to_Buffer_Overflow__new_connect_socket_33.cpp":49:20)
#loc26 = loc("CWE680_Integer_Overflow_to_Buffer_Overflow__new_connect_socket_33.cpp":51:13)
#loc27 = loc("CWE680_Integer_Overflow_to_Buffer_Overflow__new_connect_socket_33.cpp":51:12)
#loc28 = loc("CWE680_Integer_Overflow_to_Buffer_Overflow__new_connect_socket_33.cpp":51:5)
#loc29 = loc("CWE680_Integer_Overflow_to_Buffer_Overflow__new_connect_socket_33.cpp":52:5)
#loc30 = loc("CWE680_Integer_Overflow_to_Buffer_Overflow__new_connect_socket_33.cpp":107:5)
#loc31 = loc("CWE680_Integer_Overflow_to_Buffer_Overflow__new_connect_socket_33.cpp":57:9)
#loc32 = loc("CWE680_Integer_Overflow_to_Buffer_Overflow__new_connect_socket_33.cpp":57:13)
#loc33 = loc("CWE680_Integer_Overflow_to_Buffer_Overflow__new_connect_socket_33.cpp":58:9)
#loc34 = loc("CWE680_Integer_Overflow_to_Buffer_Overflow__new_connect_socket_33.cpp":58:28)
#loc35 = loc("CWE680_Integer_Overflow_to_Buffer_Overflow__new_connect_socket_33.cpp":59:9)
#loc36 = loc("CWE680_Integer_Overflow_to_Buffer_Overflow__new_connect_socket_33.cpp":59:32)
#loc37 = loc("CWE680_Integer_Overflow_to_Buffer_Overflow__new_connect_socket_33.cpp":60:9)
#loc38 = loc("CWE680_Integer_Overflow_to_Buffer_Overflow__new_connect_socket_33.cpp":60:41)
#loc39 = loc("CWE680_Integer_Overflow_to_Buffer_Overflow__new_connect_socket_33.cpp":61:9)
#loc40 = loc("CWE680_Integer_Overflow_to_Buffer_Overflow__new_connect_socket_33.cpp":96:17)
#loc41 = loc("CWE680_Integer_Overflow_to_Buffer_Overflow__new_connect_socket_33.cpp":62:9)
#loc42 = loc("CWE680_Integer_Overflow_to_Buffer_Overflow__new_connect_socket_33.cpp":95:9)
#loc43 = loc("CWE680_Integer_Overflow_to_Buffer_Overflow__new_connect_socket_33.cpp":71:36)
#loc44 = loc("CWE680_Integer_Overflow_to_Buffer_Overflow__new_connect_socket_33.cpp":71:45)
#loc45 = loc("CWE680_Integer_Overflow_to_Buffer_Overflow__new_connect_socket_33.cpp":71:58)
#loc46 = loc("CWE680_Integer_Overflow_to_Buffer_Overflow__new_connect_socket_33.cpp":71:29)
#loc47 = loc("CWE680_Integer_Overflow_to_Buffer_Overflow__new_connect_socket_33.cpp":71:13)
#loc48 = loc("CWE680_Integer_Overflow_to_Buffer_Overflow__new_connect_socket_33.cpp":71:69)
#loc49 = loc("CWE680_Integer_Overflow_to_Buffer_Overflow__new_connect_socket_33.cpp":72:13)
#loc50 = loc("CWE680_Integer_Overflow_to_Buffer_Overflow__new_connect_socket_33.cpp":75:13)
#loc51 = loc("CWE680_Integer_Overflow_to_Buffer_Overflow__new_connect_socket_33.cpp":72:17)
#loc52 = loc("CWE680_Integer_Overflow_to_Buffer_Overflow__new_connect_socket_33.cpp":72:34)
#loc53 = loc("CWE680_Integer_Overflow_to_Buffer_Overflow__new_connect_socket_33.cpp":73:13)
#loc54 = loc("CWE680_Integer_Overflow_to_Buffer_Overflow__new_connect_socket_33.cpp":74:17)
#loc55 = loc("CWE680_Integer_Overflow_to_Buffer_Overflow__new_connect_socket_33.cpp":76:20)
#loc56 = loc("CWE680_Integer_Overflow_to_Buffer_Overflow__new_connect_socket_33.cpp":76:21)
#loc57 = loc("CWE680_Integer_Overflow_to_Buffer_Overflow__new_connect_socket_33.cpp":76:30)
#loc58 = loc("CWE680_Integer_Overflow_to_Buffer_Overflow__new_connect_socket_33.cpp":76:33)
#loc59 = loc("CWE680_Integer_Overflow_to_Buffer_Overflow__new_connect_socket_33.cpp":76:47)
#loc60 = loc("CWE680_Integer_Overflow_to_Buffer_Overflow__new_connect_socket_33.cpp":76:13)
#loc61 = loc("CWE680_Integer_Overflow_to_Buffer_Overflow__new_connect_socket_33.cpp":76:48)
#loc62 = loc("CWE680_Integer_Overflow_to_Buffer_Overflow__new_connect_socket_33.cpp":77:34)
#loc63 = loc("/usr/include/netinet/in.h":249:5)
#loc64 = loc("CWE680_Integer_Overflow_to_Buffer_Overflow__new_connect_socket_33.cpp":77:13)
#loc65 = loc("CWE680_Integer_Overflow_to_Buffer_Overflow__new_connect_socket_33.cpp":78:39)
#loc66 = loc("/usr/include/netinet/in.h":251:20)
#loc67 = loc("/usr/include/netinet/in.h":33:15)
#loc68 = loc("CWE680_Integer_Overflow_to_Buffer_Overflow__new_connect_socket_33.cpp":78:13)
#loc69 = loc("CWE680_Integer_Overflow_to_Buffer_Overflow__new_connect_socket_33.cpp":78:59)
#loc70 = loc("CWE680_Integer_Overflow_to_Buffer_Overflow__new_connect_socket_33.cpp":79:38)
#loc71 = loc("CWE680_Integer_Overflow_to_Buffer_Overflow__new_connect_socket_33.cpp":79:32)
#loc72 = loc("/usr/include/netinet/in.h":250:15)
#loc73 = loc("CWE680_Integer_Overflow_to_Buffer_Overflow__new_connect_socket_33.cpp":79:13)
#loc74 = loc("CWE680_Integer_Overflow_to_Buffer_Overflow__new_connect_socket_33.cpp":79:46)
#loc75 = loc("CWE680_Integer_Overflow_to_Buffer_Overflow__new_connect_socket_33.cpp":80:13)
#loc76 = loc("CWE680_Integer_Overflow_to_Buffer_Overflow__new_connect_socket_33.cpp":83:13)
#loc77 = loc("CWE680_Integer_Overflow_to_Buffer_Overflow__new_connect_socket_33.cpp":80:25)
#loc78 = loc("CWE680_Integer_Overflow_to_Buffer_Overflow__new_connect_socket_33.cpp":80:58)
#loc79 = loc("CWE680_Integer_Overflow_to_Buffer_Overflow__new_connect_socket_33.cpp":80:59)
#loc80 = loc("CWE680_Integer_Overflow_to_Buffer_Overflow__new_connect_socket_33.cpp":80:68)
#loc81 = loc("CWE680_Integer_Overflow_to_Buffer_Overflow__new_connect_socket_33.cpp":80:82)
#loc82 = loc("CWE680_Integer_Overflow_to_Buffer_Overflow__new_connect_socket_33.cpp":80:17)
#loc83 = loc("CWE680_Integer_Overflow_to_Buffer_Overflow__new_connect_socket_33.cpp":80:88)
#loc84 = loc("CWE680_Integer_Overflow_to_Buffer_Overflow__new_connect_socket_33.cpp":81:13)
#loc85 = loc("CWE680_Integer_Overflow_to_Buffer_Overflow__new_connect_socket_33.cpp":82:17)
#loc86 = loc("CWE680_Integer_Overflow_to_Buffer_Overflow__new_connect_socket_33.cpp":86:31)
#loc87 = loc("CWE680_Integer_Overflow_to_Buffer_Overflow__new_connect_socket_33.cpp":86:46)
#loc88 = loc("CWE680_Integer_Overflow_to_Buffer_Overflow__new_connect_socket_33.cpp":86:59)
#loc89 = loc("CWE680_Integer_Overflow_to_Buffer_Overflow__new_connect_socket_33.cpp":86:77)
#loc90 = loc("CWE680_Integer_Overflow_to_Buffer_Overflow__new_connect_socket_33.cpp":86:80)
#loc91 = loc("CWE680_Integer_Overflow_to_Buffer_Overflow__new_connect_socket_33.cpp":86:26)
#loc92 = loc("CWE680_Integer_Overflow_to_Buffer_Overflow__new_connect_socket_33.cpp":86:13)
#loc93 = loc("CWE680_Integer_Overflow_to_Buffer_Overflow__new_connect_socket_33.cpp":86:81)
#loc94 = loc("CWE680_Integer_Overflow_to_Buffer_Overflow__new_connect_socket_33.cpp":87:13)
#loc95 = loc("CWE680_Integer_Overflow_to_Buffer_Overflow__new_connect_socket_33.cpp":90:13)
#loc96 = loc("CWE680_Integer_Overflow_to_Buffer_Overflow__new_connect_socket_33.cpp":87:17)
#loc97 = loc("CWE680_Integer_Overflow_to_Buffer_Overflow__new_connect_socket_33.cpp":87:31)
#loc98 = loc("CWE680_Integer_Overflow_to_Buffer_Overflow__new_connect_socket_33.cpp":87:44)
#loc99 = loc("CWE680_Integer_Overflow_to_Buffer_Overflow__new_connect_socket_33.cpp":87:47)
#loc100 = loc("CWE680_Integer_Overflow_to_Buffer_Overflow__new_connect_socket_33.cpp":87:61)
#loc101 = loc("CWE680_Integer_Overflow_to_Buffer_Overflow__new_connect_socket_33.cpp":88:13)
#loc102 = loc("CWE680_Integer_Overflow_to_Buffer_Overflow__new_connect_socket_33.cpp":89:17)
#loc103 = loc("CWE680_Integer_Overflow_to_Buffer_Overflow__new_connect_socket_33.cpp":92:39)
#loc104 = loc("CWE680_Integer_Overflow_to_Buffer_Overflow__new_connect_socket_33.cpp":92:25)
#loc105 = loc("CWE680_Integer_Overflow_to_Buffer_Overflow__new_connect_socket_33.cpp":92:13)
#loc106 = loc("CWE680_Integer_Overflow_to_Buffer_Overflow__new_connect_socket_33.cpp":94:25)
#loc107 = loc("CWE680_Integer_Overflow_to_Buffer_Overflow__new_connect_socket_33.cpp":94:20)
#loc108 = loc("CWE680_Integer_Overflow_to_Buffer_Overflow__new_connect_socket_33.cpp":94:13)
#loc109 = loc("CWE680_Integer_Overflow_to_Buffer_Overflow__new_connect_socket_33.cpp":94:36)
#loc110 = loc("CWE680_Integer_Overflow_to_Buffer_Overflow__new_connect_socket_33.cpp":96:16)
#loc111 = loc("CWE680_Integer_Overflow_to_Buffer_Overflow__new_connect_socket_33.cpp":97:9)
#loc112 = loc("CWE680_Integer_Overflow_to_Buffer_Overflow__new_connect_socket_33.cpp":100:9)
#loc113 = loc("CWE680_Integer_Overflow_to_Buffer_Overflow__new_connect_socket_33.cpp":97:13)
#loc114 = loc("CWE680_Integer_Overflow_to_Buffer_Overflow__new_connect_socket_33.cpp":97:30)
#loc115 = loc("CWE680_Integer_Overflow_to_Buffer_Overflow__new_connect_socket_33.cpp":98:9)
#loc116 = loc("CWE680_Integer_Overflow_to_Buffer_Overflow__new_connect_socket_33.cpp":99:26)
#loc117 = loc("CWE680_Integer_Overflow_to_Buffer_Overflow__new_connect_socket_33.cpp":99:13)
#loc118 = loc("CWE680_Integer_Overflow_to_Buffer_Overflow__new_connect_socket_33.cpp":108:5)
#loc119 = loc("CWE680_Integer_Overflow_to_Buffer_Overflow__new_connect_socket_33.cpp":123:5)
#loc120 = loc("CWE680_Integer_Overflow_to_Buffer_Overflow__new_connect_socket_33.cpp":109:9)
#loc121 = loc("CWE680_Integer_Overflow_to_Buffer_Overflow__new_connect_socket_33.cpp":109:20)
#loc122 = loc("CWE680_Integer_Overflow_to_Buffer_Overflow__new_connect_socket_33.cpp":110:9)
#loc123 = loc("CWE680_Integer_Overflow_to_Buffer_Overflow__new_connect_socket_33.cpp":122:9)
#loc124 = loc("CWE680_Integer_Overflow_to_Buffer_Overflow__new_connect_socket_33.cpp":111:13)
#loc125 = loc("CWE680_Integer_Overflow_to_Buffer_Overflow__new_connect_socket_33.cpp":111:20)
#loc126 = loc("CWE680_Integer_Overflow_to_Buffer_Overflow__new_connect_socket_33.cpp":111:30)
#loc127 = loc("CWE680_Integer_Overflow_to_Buffer_Overflow__new_connect_socket_33.cpp":112:13)
#loc128 = loc("CWE680_Integer_Overflow_to_Buffer_Overflow__new_connect_socket_33.cpp":112:18)
#loc129 = loc("CWE680_Integer_Overflow_to_Buffer_Overflow__new_connect_socket_33.cpp":114:25)
#loc130 = loc("CWE680_Integer_Overflow_to_Buffer_Overflow__new_connect_socket_33.cpp":114:32)
#loc131 = loc("CWE680_Integer_Overflow_to_Buffer_Overflow__new_connect_socket_33.cpp":114:42)
#loc132 = loc("CWE680_Integer_Overflow_to_Buffer_Overflow__new_connect_socket_33.cpp":114:13)
#loc133 = loc("CWE680_Integer_Overflow_to_Buffer_Overflow__new_connect_socket_33.cpp":115:41)
#loc134 = loc("CWE680_Integer_Overflow_to_Buffer_Overflow__new_connect_socket_33.cpp":46:6)
#loc135 = loc("CWE680_Integer_Overflow_to_Buffer_Overflow__new_connect_socket_33.cpp":115:32)
#loc136 = loc("CWE680_Integer_Overflow_to_Buffer_Overflow__new_connect_socket_33.cpp":115:50)
#loc137 = loc("CWE680_Integer_Overflow_to_Buffer_Overflow__new_connect_socket_33.cpp":115:13)
#loc138 = loc("CWE680_Integer_Overflow_to_Buffer_Overflow__new_connect_socket_33.cpp":116:13)
#loc139 = loc("CWE680_Integer_Overflow_to_Buffer_Overflow__new_connect_socket_33.cpp":119:13)
#loc140 = loc("CWE680_Integer_Overflow_to_Buffer_Overflow__new_connect_socket_33.cpp":116:22)
#loc141 = loc("CWE680_Integer_Overflow_to_Buffer_Overflow__new_connect_socket_33.cpp":116:18)
#loc142 = loc("CWE680_Integer_Overflow_to_Buffer_Overflow__new_connect_socket_33.cpp":116:25)
#loc143 = loc("CWE680_Integer_Overflow_to_Buffer_Overflow__new_connect_socket_33.cpp":116:37)
#loc144 = loc("CWE680_Integer_Overflow_to_Buffer_Overflow__new_connect_socket_33.cpp":117:13)
#loc145 = loc("CWE680_Integer_Overflow_to_Buffer_Overflow__new_connect_socket_33.cpp":118:33)
#loc146 = loc("CWE680_Integer_Overflow_to_Buffer_Overflow__new_connect_socket_33.cpp":118:17)
#loc147 = loc("CWE680_Integer_Overflow_to_Buffer_Overflow__new_connect_socket_33.cpp":118:28)
#loc148 = loc("CWE680_Integer_Overflow_to_Buffer_Overflow__new_connect_socket_33.cpp":118:29)
#loc149 = loc("CWE680_Integer_Overflow_to_Buffer_Overflow__new_connect_socket_33.cpp":116:44)
#loc150 = loc("CWE680_Integer_Overflow_to_Buffer_Overflow__new_connect_socket_33.cpp":116:43)
#loc151 = loc("CWE680_Integer_Overflow_to_Buffer_Overflow__new_connect_socket_33.cpp":120:26)
#loc152 = loc("CWE680_Integer_Overflow_to_Buffer_Overflow__new_connect_socket_33.cpp":120:37)
#loc153 = loc("CWE680_Integer_Overflow_to_Buffer_Overflow__new_connect_socket_33.cpp":120:38)
#loc154 = loc("CWE680_Integer_Overflow_to_Buffer_Overflow__new_connect_socket_33.cpp":120:13)
#loc155 = loc("CWE680_Integer_Overflow_to_Buffer_Overflow__new_connect_socket_33.cpp":121:23)
#loc156 = loc("CWE680_Integer_Overflow_to_Buffer_Overflow__new_connect_socket_33.cpp":131:1)
#loc157 = loc("CWE680_Integer_Overflow_to_Buffer_Overflow__new_connect_socket_33.cpp":155:1)
#loc158 = loc("CWE680_Integer_Overflow_to_Buffer_Overflow__new_connect_socket_33.cpp":133:5)
#loc159 = loc("CWE680_Integer_Overflow_to_Buffer_Overflow__new_connect_socket_33.cpp":133:9)
#loc160 = loc("CWE680_Integer_Overflow_to_Buffer_Overflow__new_connect_socket_33.cpp":134:5)
#loc161 = loc("CWE680_Integer_Overflow_to_Buffer_Overflow__new_connect_socket_33.cpp":134:20)
#loc162 = loc("CWE680_Integer_Overflow_to_Buffer_Overflow__new_connect_socket_33.cpp":136:13)
#loc163 = loc("CWE680_Integer_Overflow_to_Buffer_Overflow__new_connect_socket_33.cpp":136:12)
#loc164 = loc("CWE680_Integer_Overflow_to_Buffer_Overflow__new_connect_socket_33.cpp":136:5)
#loc165 = loc("CWE680_Integer_Overflow_to_Buffer_Overflow__new_connect_socket_33.cpp":138:12)
#loc166 = loc("CWE680_Integer_Overflow_to_Buffer_Overflow__new_connect_socket_33.cpp":138:5)
#loc167 = loc("CWE680_Integer_Overflow_to_Buffer_Overflow__new_connect_socket_33.cpp":139:5)
#loc168 = loc("CWE680_Integer_Overflow_to_Buffer_Overflow__new_connect_socket_33.cpp":154:5)
#loc169 = loc("CWE680_Integer_Overflow_to_Buffer_Overflow__new_connect_socket_33.cpp":140:9)
#loc170 = loc("CWE680_Integer_Overflow_to_Buffer_Overflow__new_connect_socket_33.cpp":140:20)
#loc171 = loc("CWE680_Integer_Overflow_to_Buffer_Overflow__new_connect_socket_33.cpp":141:9)
#loc172 = loc("CWE680_Integer_Overflow_to_Buffer_Overflow__new_connect_socket_33.cpp":153:9)
#loc173 = loc("CWE680_Integer_Overflow_to_Buffer_Overflow__new_connect_socket_33.cpp":142:13)
#loc174 = loc("CWE680_Integer_Overflow_to_Buffer_Overflow__new_connect_socket_33.cpp":142:20)
#loc175 = loc("CWE680_Integer_Overflow_to_Buffer_Overflow__new_connect_socket_33.cpp":142:30)
#loc176 = loc("CWE680_Integer_Overflow_to_Buffer_Overflow__new_connect_socket_33.cpp":143:13)
#loc177 = loc("CWE680_Integer_Overflow_to_Buffer_Overflow__new_connect_socket_33.cpp":143:18)
#loc178 = loc("CWE680_Integer_Overflow_to_Buffer_Overflow__new_connect_socket_33.cpp":145:25)
#loc179 = loc("CWE680_Integer_Overflow_to_Buffer_Overflow__new_connect_socket_33.cpp":145:32)
#loc180 = loc("CWE680_Integer_Overflow_to_Buffer_Overflow__new_connect_socket_33.cpp":145:42)
#loc181 = loc("CWE680_Integer_Overflow_to_Buffer_Overflow__new_connect_socket_33.cpp":145:13)
#loc182 = loc("CWE680_Integer_Overflow_to_Buffer_Overflow__new_connect_socket_33.cpp":146:41)
#loc183 = loc("CWE680_Integer_Overflow_to_Buffer_Overflow__new_connect_socket_33.cpp":131:13)
#loc184 = loc("CWE680_Integer_Overflow_to_Buffer_Overflow__new_connect_socket_33.cpp":146:32)
#loc185 = loc("CWE680_Integer_Overflow_to_Buffer_Overflow__new_connect_socket_33.cpp":146:50)
#loc186 = loc("CWE680_Integer_Overflow_to_Buffer_Overflow__new_connect_socket_33.cpp":146:13)
#loc187 = loc("CWE680_Integer_Overflow_to_Buffer_Overflow__new_connect_socket_33.cpp":147:13)
#loc188 = loc("CWE680_Integer_Overflow_to_Buffer_Overflow__new_connect_socket_33.cpp":150:13)
#loc189 = loc("CWE680_Integer_Overflow_to_Buffer_Overflow__new_connect_socket_33.cpp":147:22)
#loc190 = loc("CWE680_Integer_Overflow_to_Buffer_Overflow__new_connect_socket_33.cpp":147:18)
#loc191 = loc("CWE680_Integer_Overflow_to_Buffer_Overflow__new_connect_socket_33.cpp":147:25)
#loc192 = loc("CWE680_Integer_Overflow_to_Buffer_Overflow__new_connect_socket_33.cpp":147:37)
#loc193 = loc("CWE680_Integer_Overflow_to_Buffer_Overflow__new_connect_socket_33.cpp":148:13)
#loc194 = loc("CWE680_Integer_Overflow_to_Buffer_Overflow__new_connect_socket_33.cpp":149:33)
#loc195 = loc("CWE680_Integer_Overflow_to_Buffer_Overflow__new_connect_socket_33.cpp":149:17)
#loc196 = loc("CWE680_Integer_Overflow_to_Buffer_Overflow__new_connect_socket_33.cpp":149:28)
#loc197 = loc("CWE680_Integer_Overflow_to_Buffer_Overflow__new_connect_socket_33.cpp":149:29)
#loc198 = loc("CWE680_Integer_Overflow_to_Buffer_Overflow__new_connect_socket_33.cpp":147:44)
#loc199 = loc("CWE680_Integer_Overflow_to_Buffer_Overflow__new_connect_socket_33.cpp":147:43)
#loc200 = loc("CWE680_Integer_Overflow_to_Buffer_Overflow__new_connect_socket_33.cpp":151:26)
#loc201 = loc("CWE680_Integer_Overflow_to_Buffer_Overflow__new_connect_socket_33.cpp":151:37)
#loc202 = loc("CWE680_Integer_Overflow_to_Buffer_Overflow__new_connect_socket_33.cpp":151:38)
#loc203 = loc("CWE680_Integer_Overflow_to_Buffer_Overflow__new_connect_socket_33.cpp":151:13)
#loc204 = loc("CWE680_Integer_Overflow_to_Buffer_Overflow__new_connect_socket_33.cpp":152:23)
#loc205 = loc("CWE680_Integer_Overflow_to_Buffer_Overflow__new_connect_socket_33.cpp":157:1)
#loc206 = loc("CWE680_Integer_Overflow_to_Buffer_Overflow__new_connect_socket_33.cpp":160:1)
#loc207 = loc("CWE680_Integer_Overflow_to_Buffer_Overflow__new_connect_socket_33.cpp":159:5)
#loc208 = loc(fused[#loc1, #loc2])
#loc209 = loc(fused[#loc3, #loc4])
#loc210 = loc(fused[#loc6, #loc7])
#loc211 = loc(fused[#loc8, #loc9])
#loc212 = loc(fused[#loc10, #loc11])
#loc213 = loc(fused[#loc12, #loc13])
#loc214 = loc(fused[#loc14, #loc15])
#loc215 = loc(fused[#loc16, #loc17])
#loc216 = loc(fused[#loc18, #loc19])
#loc217 = loc(fused[#loc20, #loc21])
#loc218 = loc(fused[#loc22, #loc23])
#loc219 = loc(fused[#loc24, #loc25])
#loc220 = loc(fused[#loc28, #loc26])
#loc221 = loc(fused[#loc29, #loc30])
#loc222 = loc(fused[#loc31, #loc32])
#loc223 = loc(fused[#loc33, #loc34])
#loc224 = loc(fused[#loc35, #loc36])
#loc225 = loc(fused[#loc37, #loc38])
#loc226 = loc(fused[#loc39, #loc40])
#loc227 = loc(fused[#loc41, #loc42])
#loc228 = loc(fused[#loc47, #loc48])
#loc229 = loc(fused[#loc49, #loc50])
#loc230 = loc(fused[#loc51, #loc52])
#loc231 = loc(fused[#loc53, #loc50])
#loc232 = loc(fused[#loc55, #loc56])
#loc233 = loc(fused[#loc58, #loc59])
#loc234 = loc(fused[#loc60, #loc61])
#loc235 = loc(fused[#loc64, #loc62])
#loc236 = loc(fused[#loc68, #loc69])
#loc237 = loc(fused[#loc73, #loc74])
#loc238 = loc(fused[#loc75, #loc76])
#loc239 = loc(fused[#loc78, #loc79])
#loc240 = loc(fused[#loc80, #loc81])
#loc241 = loc(fused[#loc82, #loc83])
#loc242 = loc(fused[#loc84, #loc76])
#loc243 = loc(fused[#loc88, #loc89])
#loc244 = loc(fused[#loc92, #loc93])
#loc245 = loc(fused[#loc94, #loc95])
#loc246 = loc(fused[#loc96, #loc97])
#loc247 = loc(fused[#loc99, #loc100])
#loc248 = loc(fused[#loc101, #loc95])
#loc249 = loc(fused[#loc105, #loc103])
#loc250 = loc(fused[#loc108, #loc109])
#loc251 = loc(fused[#loc111, #loc112])
#loc252 = loc(fused[#loc113, #loc114])
#loc253 = loc(fused[#loc115, #loc112])
#loc254 = loc(fused[#loc118, #loc119])
#loc255 = loc(fused[#loc120, #loc121])
#loc256 = loc(fused[#loc122, #loc123])
#loc257 = loc(fused[#loc124, #loc125])
#loc258 = loc(fused[#loc124, #loc126])
#loc259 = loc(fused[#loc127, #loc128])
#loc260 = loc(fused[#loc130, #loc131])
#loc261 = loc(fused[#loc129, #loc131])
#loc262 = loc(fused[#loc132, #loc131])
#loc263 = loc(fused[#loc135, #loc136])
#loc264 = loc(fused[#loc137, #loc136])
#loc265 = loc(fused[#loc138, #loc139])
#loc266 = loc(fused[#loc141, #loc140])
#loc267 = loc(fused[#loc142, #loc143])
#loc268 = loc(fused[#loc144, #loc139])
#loc269 = loc(fused[#loc146, #loc145])
#loc270 = loc(fused[#loc150, #loc149])
#loc271 = loc(fused[#loc156, #loc157])
#loc272 = loc(fused[#loc158, #loc159])
#loc273 = loc(fused[#loc160, #loc161])
#loc274 = loc(fused[#loc164, #loc162])
#loc275 = loc(fused[#loc166, #loc165])
#loc276 = loc(fused[#loc167, #loc168])
#loc277 = loc(fused[#loc169, #loc170])
#loc278 = loc(fused[#loc171, #loc172])
#loc279 = loc(fused[#loc173, #loc174])
#loc280 = loc(fused[#loc173, #loc175])
#loc281 = loc(fused[#loc176, #loc177])
#loc282 = loc(fused[#loc179, #loc180])
#loc283 = loc(fused[#loc178, #loc180])
#loc284 = loc(fused[#loc181, #loc180])
#loc285 = loc(fused[#loc184, #loc185])
#loc286 = loc(fused[#loc186, #loc185])
#loc287 = loc(fused[#loc187, #loc188])
#loc288 = loc(fused[#loc190, #loc189])
#loc289 = loc(fused[#loc191, #loc192])
#loc290 = loc(fused[#loc193, #loc188])
#loc291 = loc(fused[#loc195, #loc194])
#loc292 = loc(fused[#loc199, #loc198])
#loc293 = loc(fused[#loc205, #loc206])
