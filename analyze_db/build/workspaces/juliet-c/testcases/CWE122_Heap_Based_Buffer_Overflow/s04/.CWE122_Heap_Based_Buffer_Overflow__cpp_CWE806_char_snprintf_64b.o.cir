!s32i = !cir.int<s, 32>
!s8i = !cir.int<s, 8>
!u64i = !cir.int<u, 64>
!void = !cir.void
#fn_attr = #cir<extra({nothrow = #cir.nothrow})>
#fn_attr1 = #cir<extra({inline = #cir.inline<no>, optnone = #cir.optnone, uwtable = #cir.uwtable<async>})>
#loc10 = loc("CWE122_Heap_Based_Buffer_Overflow__cpp_CWE806_char_snprintf_64b.cpp":32:14)
#loc11 = loc("CWE122_Heap_Based_Buffer_Overflow__cpp_CWE806_char_snprintf_64b.cpp":32:21)
#loc33 = loc("CWE122_Heap_Based_Buffer_Overflow__cpp_CWE806_char_snprintf_64b.cpp":52:18)
#loc34 = loc("CWE122_Heap_Based_Buffer_Overflow__cpp_CWE806_char_snprintf_64b.cpp":52:25)
#loc59 = loc(fused[#loc10, #loc11])
#loc65 = loc(fused[#loc33, #loc34])
module @"/workspaces/juliet-c/testcases/CWE122_Heap_Based_Buffer_Overflow/s04/CWE122_Heap_Based_Buffer_Overflow__cpp_CWE806_char_snprintf_64b.cpp" attributes {cir.lang = #cir.lang<cxx>, cir.sob = #cir.signed_overflow_behavior<undefined>, cir.triple = "x86_64-unknown-linux-gnu", cir.type_size_info = #cir.type_size_info<char = 8, int = 32, size_t = 64>, cir.uwtable = #cir.uwtable<async>, dlti.dl_spec = #dlti.dl_spec<f80 = dense<128> : vector<2xi64>, i128 = dense<128> : vector<2xi64>, i16 = dense<16> : vector<2xi64>, i8 = dense<8> : vector<2xi64>, i1 = dense<8> : vector<2xi64>, !llvm.ptr = dense<64> : vector<4xi64>, i64 = dense<64> : vector<2xi64>, i32 = dense<32> : vector<2xi64>, !llvm.ptr<272> = dense<64> : vector<4xi64>, !llvm.ptr<270> = dense<32> : vector<4xi64>, f16 = dense<16> : vector<2xi64>, f64 = dense<64> : vector<2xi64>, !llvm.ptr<271> = dense<32> : vector<4xi64>, f128 = dense<128> : vector<2xi64>, "dlti.stack_alignment" = 128 : i64, "dlti.mangling_mode" = "e", "dlti.endianness" = "little">} {
  cir.func private @snprintf(!cir.ptr<!s8i>, !u64i, !cir.ptr<!s8i>, ...) -> !s32i extra(#fn_attr) loc(#loc55)
  cir.func private @strlen(!cir.ptr<!s8i>) -> !u64i extra(#fn_attr) loc(#loc56)
  cir.global "private" constant cir_private dsolocal @".str" = #cir.const_array<"%s\00" : !cir.array<!s8i x 3>> : !cir.array<!s8i x 3> {alignment = 1 : i64} loc(#loc5)
  cir.func private @printLine(!cir.ptr<!s8i>) loc(#loc57)
  cir.func @_ZN62CWE122_Heap_Based_Buffer_Overflow__cpp_CWE806_char_snprintf_647badSinkEPv(%arg0: !cir.ptr<!void> loc(fused[#loc10, #loc11])) extra(#fn_attr1) {
    %0 = cir.alloca !cir.ptr<!void>, !cir.ptr<!cir.ptr<!void>>, ["dataVoidPtr", init] {alignment = 8 : i64} loc(#loc59)
    %1 = cir.alloca !cir.ptr<!cir.ptr<!s8i>>, !cir.ptr<!cir.ptr<!cir.ptr<!s8i>>>, ["dataPtr", init] {alignment = 8 : i64} loc(#loc60)
    %2 = cir.alloca !cir.ptr<!s8i>, !cir.ptr<!cir.ptr<!s8i>>, ["data", init] {alignment = 8 : i64} loc(#loc61)
    cir.store %arg0, %0 : !cir.ptr<!void>, !cir.ptr<!cir.ptr<!void>> loc(#loc16)
    %3 = cir.load %0 : !cir.ptr<!cir.ptr<!void>>, !cir.ptr<!void> loc(#loc13)
    %4 = cir.cast(bitcast, %3 : !cir.ptr<!void>), !cir.ptr<!cir.ptr<!s8i>> loc(#loc13)
    cir.store %4, %1 : !cir.ptr<!cir.ptr<!s8i>>, !cir.ptr<!cir.ptr<!cir.ptr<!s8i>>> loc(#loc60)
    %5 = cir.load deref %1 : !cir.ptr<!cir.ptr<!cir.ptr<!s8i>>>, !cir.ptr<!cir.ptr<!s8i>> loc(#loc17)
    %6 = cir.load %5 : !cir.ptr<!cir.ptr<!s8i>>, !cir.ptr<!s8i> loc(#loc18)
    cir.store %6, %2 : !cir.ptr<!s8i>, !cir.ptr<!cir.ptr<!s8i>> loc(#loc61)
    cir.scope {
      %7 = cir.alloca !cir.array<!s8i x 50>, !cir.ptr<!cir.array<!s8i x 50>>, ["dest"] {alignment = 16 : i64} loc(#loc63)
      %8 = cir.const #cir.zero : !cir.array<!s8i x 50> loc(#loc63)
      cir.store %8, %7 : !cir.array<!s8i x 50>, !cir.ptr<!cir.array<!s8i x 50>> loc(#loc63)
      %9 = cir.get_global @snprintf : !cir.ptr<!cir.func<(!cir.ptr<!s8i>, !u64i, !cir.ptr<!s8i>, ...) -> !s32i>> loc(#loc23)
      %10 = cir.cast(array_to_ptrdecay, %7 : !cir.ptr<!cir.array<!s8i x 50>>), !cir.ptr<!s8i> loc(#loc24)
      %11 = cir.get_global @strlen : !cir.ptr<!cir.func<(!cir.ptr<!s8i>) -> !u64i>> loc(#loc25)
      %12 = cir.load %2 : !cir.ptr<!cir.ptr<!s8i>>, !cir.ptr<!s8i> loc(#loc26)
      %13 = cir.call @strlen(%12) : (!cir.ptr<!s8i>) -> !u64i side_effect(pure) extra(#fn_attr) loc(#loc25)
      %14 = cir.get_global @".str" : !cir.ptr<!cir.array<!s8i x 3>> loc(#loc5)
      %15 = cir.cast(array_to_ptrdecay, %14 : !cir.ptr<!cir.array<!s8i x 3>>), !cir.ptr<!s8i> loc(#loc5)
      %16 = cir.load %2 : !cir.ptr<!cir.ptr<!s8i>>, !cir.ptr<!s8i> loc(#loc27)
      %17 = cir.call @snprintf(%10, %13, %15, %16) : (!cir.ptr<!s8i>, !u64i, !cir.ptr<!s8i>, !cir.ptr<!s8i>) -> !s32i extra(#fn_attr) loc(#loc23)
      %18 = cir.load %2 : !cir.ptr<!cir.ptr<!s8i>>, !cir.ptr<!s8i> loc(#loc28)
      cir.call @printLine(%18) : (!cir.ptr<!s8i>) -> () loc(#loc29)
      %19 = cir.load %2 : !cir.ptr<!cir.ptr<!s8i>>, !cir.ptr<!s8i> loc(#loc30)
      cir.delete.array %19 : <!s8i> loc(#loc30)
    } loc(#loc62)
    cir.return loc(#loc9)
  } loc(#loc58)
  cir.func @_ZN62CWE122_Heap_Based_Buffer_Overflow__cpp_CWE806_char_snprintf_6411goodG2BSinkEPv(%arg0: !cir.ptr<!void> loc(fused[#loc33, #loc34])) extra(#fn_attr1) {
    %0 = cir.alloca !cir.ptr<!void>, !cir.ptr<!cir.ptr<!void>>, ["dataVoidPtr", init] {alignment = 8 : i64} loc(#loc65)
    %1 = cir.alloca !cir.ptr<!cir.ptr<!s8i>>, !cir.ptr<!cir.ptr<!cir.ptr<!s8i>>>, ["dataPtr", init] {alignment = 8 : i64} loc(#loc66)
    %2 = cir.alloca !cir.ptr<!s8i>, !cir.ptr<!cir.ptr<!s8i>>, ["data", init] {alignment = 8 : i64} loc(#loc67)
    cir.store %arg0, %0 : !cir.ptr<!void>, !cir.ptr<!cir.ptr<!void>> loc(#loc39)
    %3 = cir.load %0 : !cir.ptr<!cir.ptr<!void>>, !cir.ptr<!void> loc(#loc36)
    %4 = cir.cast(bitcast, %3 : !cir.ptr<!void>), !cir.ptr<!cir.ptr<!s8i>> loc(#loc36)
    cir.store %4, %1 : !cir.ptr<!cir.ptr<!s8i>>, !cir.ptr<!cir.ptr<!cir.ptr<!s8i>>> loc(#loc66)
    %5 = cir.load deref %1 : !cir.ptr<!cir.ptr<!cir.ptr<!s8i>>>, !cir.ptr<!cir.ptr<!s8i>> loc(#loc40)
    %6 = cir.load %5 : !cir.ptr<!cir.ptr<!s8i>>, !cir.ptr<!s8i> loc(#loc41)
    cir.store %6, %2 : !cir.ptr<!s8i>, !cir.ptr<!cir.ptr<!s8i>> loc(#loc67)
    cir.scope {
      %7 = cir.alloca !cir.array<!s8i x 50>, !cir.ptr<!cir.array<!s8i x 50>>, ["dest"] {alignment = 16 : i64} loc(#loc69)
      %8 = cir.const #cir.zero : !cir.array<!s8i x 50> loc(#loc69)
      cir.store %8, %7 : !cir.array<!s8i x 50>, !cir.ptr<!cir.array<!s8i x 50>> loc(#loc69)
      %9 = cir.get_global @snprintf : !cir.ptr<!cir.func<(!cir.ptr<!s8i>, !u64i, !cir.ptr<!s8i>, ...) -> !s32i>> loc(#loc46)
      %10 = cir.cast(array_to_ptrdecay, %7 : !cir.ptr<!cir.array<!s8i x 50>>), !cir.ptr<!s8i> loc(#loc47)
      %11 = cir.get_global @strlen : !cir.ptr<!cir.func<(!cir.ptr<!s8i>) -> !u64i>> loc(#loc48)
      %12 = cir.load %2 : !cir.ptr<!cir.ptr<!s8i>>, !cir.ptr<!s8i> loc(#loc49)
      %13 = cir.call @strlen(%12) : (!cir.ptr<!s8i>) -> !u64i side_effect(pure) extra(#fn_attr) loc(#loc48)
      %14 = cir.get_global @".str" : !cir.ptr<!cir.array<!s8i x 3>> loc(#loc50)
      %15 = cir.cast(array_to_ptrdecay, %14 : !cir.ptr<!cir.array<!s8i x 3>>), !cir.ptr<!s8i> loc(#loc50)
      %16 = cir.load %2 : !cir.ptr<!cir.ptr<!s8i>>, !cir.ptr<!s8i> loc(#loc51)
      %17 = cir.call @snprintf(%10, %13, %15, %16) : (!cir.ptr<!s8i>, !u64i, !cir.ptr<!s8i>, !cir.ptr<!s8i>) -> !s32i extra(#fn_attr) loc(#loc46)
      %18 = cir.load %2 : !cir.ptr<!cir.ptr<!s8i>>, !cir.ptr<!s8i> loc(#loc52)
      cir.call @printLine(%18) : (!cir.ptr<!s8i>) -> () loc(#loc53)
      %19 = cir.load %2 : !cir.ptr<!cir.ptr<!s8i>>, !cir.ptr<!s8i> loc(#loc54)
      cir.delete.array %19 : <!s8i> loc(#loc54)
    } loc(#loc68)
    cir.return loc(#loc32)
  } loc(#loc64)
} loc(#loc)
#loc = loc("/workspaces/juliet-c/testcases/CWE122_Heap_Based_Buffer_Overflow/s04/CWE122_Heap_Based_Buffer_Overflow__cpp_CWE806_char_snprintf_64b.cpp":0:0)
#loc1 = loc("/usr/include/stdio.h":385:1)
#loc2 = loc("/usr/include/stdio.h":387:62)
#loc3 = loc("/usr/include/string.h":407:1)
#loc4 = loc("/usr/include/string.h":408:33)
#loc5 = loc("CWE122_Heap_Based_Buffer_Overflow__cpp_CWE806_char_snprintf_64b.cpp":41:38)
#loc6 = loc("../../../testcasesupport/std_testcase_io.h":14:1)
#loc7 = loc("../../../testcasesupport/std_testcase_io.h":14:33)
#loc8 = loc("CWE122_Heap_Based_Buffer_Overflow__cpp_CWE806_char_snprintf_64b.cpp":32:1)
#loc9 = loc("CWE122_Heap_Based_Buffer_Overflow__cpp_CWE806_char_snprintf_64b.cpp":45:1)
#loc12 = loc("CWE122_Heap_Based_Buffer_Overflow__cpp_CWE806_char_snprintf_64b.cpp":35:5)
#loc13 = loc("CWE122_Heap_Based_Buffer_Overflow__cpp_CWE806_char_snprintf_64b.cpp":35:34)
#loc14 = loc("CWE122_Heap_Based_Buffer_Overflow__cpp_CWE806_char_snprintf_64b.cpp":37:5)
#loc15 = loc("CWE122_Heap_Based_Buffer_Overflow__cpp_CWE806_char_snprintf_64b.cpp":37:28)
#loc16 = loc("CWE122_Heap_Based_Buffer_Overflow__cpp_CWE806_char_snprintf_64b.cpp":33:1)
#loc17 = loc("CWE122_Heap_Based_Buffer_Overflow__cpp_CWE806_char_snprintf_64b.cpp":37:21)
#loc18 = loc("CWE122_Heap_Based_Buffer_Overflow__cpp_CWE806_char_snprintf_64b.cpp":37:20)
#loc19 = loc("CWE122_Heap_Based_Buffer_Overflow__cpp_CWE806_char_snprintf_64b.cpp":38:5)
#loc20 = loc("CWE122_Heap_Based_Buffer_Overflow__cpp_CWE806_char_snprintf_64b.cpp":44:5)
#loc21 = loc("CWE122_Heap_Based_Buffer_Overflow__cpp_CWE806_char_snprintf_64b.cpp":39:9)
#loc22 = loc("CWE122_Heap_Based_Buffer_Overflow__cpp_CWE806_char_snprintf_64b.cpp":39:25)
#loc23 = loc("CWE122_Heap_Based_Buffer_Overflow__cpp_CWE806_char_snprintf_64b.cpp":41:9)
#loc24 = loc("CWE122_Heap_Based_Buffer_Overflow__cpp_CWE806_char_snprintf_64b.cpp":41:18)
#loc25 = loc("CWE122_Heap_Based_Buffer_Overflow__cpp_CWE806_char_snprintf_64b.cpp":41:24)
#loc26 = loc("CWE122_Heap_Based_Buffer_Overflow__cpp_CWE806_char_snprintf_64b.cpp":41:31)
#loc27 = loc("CWE122_Heap_Based_Buffer_Overflow__cpp_CWE806_char_snprintf_64b.cpp":41:44)
#loc28 = loc("CWE122_Heap_Based_Buffer_Overflow__cpp_CWE806_char_snprintf_64b.cpp":42:19)
#loc29 = loc("CWE122_Heap_Based_Buffer_Overflow__cpp_CWE806_char_snprintf_64b.cpp":42:9)
#loc30 = loc("CWE122_Heap_Based_Buffer_Overflow__cpp_CWE806_char_snprintf_64b.cpp":43:19)
#loc31 = loc("CWE122_Heap_Based_Buffer_Overflow__cpp_CWE806_char_snprintf_64b.cpp":52:1)
#loc32 = loc("CWE122_Heap_Based_Buffer_Overflow__cpp_CWE806_char_snprintf_64b.cpp":65:1)
#loc35 = loc("CWE122_Heap_Based_Buffer_Overflow__cpp_CWE806_char_snprintf_64b.cpp":55:5)
#loc36 = loc("CWE122_Heap_Based_Buffer_Overflow__cpp_CWE806_char_snprintf_64b.cpp":55:34)
#loc37 = loc("CWE122_Heap_Based_Buffer_Overflow__cpp_CWE806_char_snprintf_64b.cpp":57:5)
#loc38 = loc("CWE122_Heap_Based_Buffer_Overflow__cpp_CWE806_char_snprintf_64b.cpp":57:28)
#loc39 = loc("CWE122_Heap_Based_Buffer_Overflow__cpp_CWE806_char_snprintf_64b.cpp":53:1)
#loc40 = loc("CWE122_Heap_Based_Buffer_Overflow__cpp_CWE806_char_snprintf_64b.cpp":57:21)
#loc41 = loc("CWE122_Heap_Based_Buffer_Overflow__cpp_CWE806_char_snprintf_64b.cpp":57:20)
#loc42 = loc("CWE122_Heap_Based_Buffer_Overflow__cpp_CWE806_char_snprintf_64b.cpp":58:5)
#loc43 = loc("CWE122_Heap_Based_Buffer_Overflow__cpp_CWE806_char_snprintf_64b.cpp":64:5)
#loc44 = loc("CWE122_Heap_Based_Buffer_Overflow__cpp_CWE806_char_snprintf_64b.cpp":59:9)
#loc45 = loc("CWE122_Heap_Based_Buffer_Overflow__cpp_CWE806_char_snprintf_64b.cpp":59:25)
#loc46 = loc("CWE122_Heap_Based_Buffer_Overflow__cpp_CWE806_char_snprintf_64b.cpp":61:9)
#loc47 = loc("CWE122_Heap_Based_Buffer_Overflow__cpp_CWE806_char_snprintf_64b.cpp":61:18)
#loc48 = loc("CWE122_Heap_Based_Buffer_Overflow__cpp_CWE806_char_snprintf_64b.cpp":61:24)
#loc49 = loc("CWE122_Heap_Based_Buffer_Overflow__cpp_CWE806_char_snprintf_64b.cpp":61:31)
#loc50 = loc("CWE122_Heap_Based_Buffer_Overflow__cpp_CWE806_char_snprintf_64b.cpp":61:38)
#loc51 = loc("CWE122_Heap_Based_Buffer_Overflow__cpp_CWE806_char_snprintf_64b.cpp":61:44)
#loc52 = loc("CWE122_Heap_Based_Buffer_Overflow__cpp_CWE806_char_snprintf_64b.cpp":62:19)
#loc53 = loc("CWE122_Heap_Based_Buffer_Overflow__cpp_CWE806_char_snprintf_64b.cpp":62:9)
#loc54 = loc("CWE122_Heap_Based_Buffer_Overflow__cpp_CWE806_char_snprintf_64b.cpp":63:19)
#loc55 = loc(fused[#loc1, #loc2])
#loc56 = loc(fused[#loc3, #loc4])
#loc57 = loc(fused[#loc6, #loc7])
#loc58 = loc(fused[#loc8, #loc9])
#loc60 = loc(fused[#loc12, #loc13])
#loc61 = loc(fused[#loc14, #loc15])
#loc62 = loc(fused[#loc19, #loc20])
#loc63 = loc(fused[#loc21, #loc22])
#loc64 = loc(fused[#loc31, #loc32])
#loc66 = loc(fused[#loc35, #loc36])
#loc67 = loc(fused[#loc37, #loc38])
#loc68 = loc(fused[#loc42, #loc43])
#loc69 = loc(fused[#loc44, #loc45])
