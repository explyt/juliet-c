clang: warning: argument unused during compilation: '-c' [-Wunused-command-line-argument]
warning: unknown warning option '-Wno-terminate' [-Wunknown-warning-option]
clang: /workspaces/clangir/clang/lib/CIR/CodeGen/CIRGenExprCXX.cpp:635: mlir::Value emitCXXNewAllocSize(CIRGenFunction &, const CXXNewExpr *, unsigned int, mlir::Value &, mlir::Value &): Assertion `numElementsWidth == sizeWidth && "Expected a size_t array size constant"' failed.
PLEASE submit a bug report to https://github.com/llvm/llvm-project/issues/ and include the crash backtrace, preprocessed source, and associated run script.
Stack dump:
0.	Program arguments: /workspaces/clangir/install/bin/clang -S -Xclang -emit-cir-flat -std=c++11 -Wno-terminate -std=c++11 -I ../../../testcasesupport -c CWE590_Free_Memory_Not_on_Heap__delete_array_int64_t_declare_74a.cpp -o /workspaces/juliet-c/testcases/CWE590_Free_Memory_Not_on_Heap/s01/.CWE590_Free_Memory_Not_on_Heap__delete_array_int64_t_declare_74a.o.cir
1.	<eof> parser at end of file
Stack dump without symbol names (ensure you have llvm-symbolizer in your PATH or set the environment var `LLVM_SYMBOLIZER_PATH` to point to it):
0  clang     0x0000563eda416b68 llvm::sys::PrintStackTrace(llvm::raw_ostream&, int) + 40
1  clang     0x0000563eda41473e llvm::sys::RunSignalHandlers() + 238
2  clang     0x0000563eda385946
3  libc.so.6 0x00007f5ce7645330
4  libc.so.6 0x00007f5ce769eb2c pthread_kill + 284
5  libc.so.6 0x00007f5ce764527e gsignal + 30
6  libc.so.6 0x00007f5ce76288ff abort + 223
7  libc.so.6 0x00007f5ce762881b
8  libc.so.6 0x00007f5ce763b517
9  clang     0x0000563edb85f4fc clang::CIRGen::CIRGenFunction::emitCXXNewExpr(clang::CXXNewExpr const*) + 12028
10 clang     0x0000563edb862d1f clang::CIRGen::CIRGenFunction::emitScalarExpr(clang::Expr const*) + 63
11 clang     0x0000563edb811844 clang::CIRGen::CIRGenFunction::emitExprAsInit(clang::Expr const*, clang::ValueDecl const*, clang::CIRGen::LValue, bool) + 516
12 clang     0x0000563edb810e4e clang::CIRGen::CIRGenFunction::emitAutoVarInit(clang::CIRGen::CIRGenFunction::AutoVarEmission const&) + 990
13 clang     0x0000563edb8121a8 clang::CIRGen::CIRGenFunction::emitVarDecl(clang::VarDecl const&) + 328
14 clang     0x0000563edb813d97 clang::CIRGen::CIRGenFunction::emitDecl(clang::Decl const&) + 119
15 clang     0x0000563edb895dcb clang::CIRGen::CIRGenFunction::emitSimpleStmt(clang::Stmt const*, bool) + 859
16 clang     0x0000563edb8954b0 clang::CIRGen::CIRGenFunction::emitStmt(clang::Stmt const*, bool, llvm::ArrayRef<clang::Attr const*>) + 16
17 clang     0x0000563edb895284 clang::CIRGen::CIRGenFunction::emitCompoundStmtWithoutScope(clang::CompoundStmt const&, bool, clang::CIRGen::AggValueSlot) + 260
18 clang     0x0000563edb895955 clang::CIRGen::CIRGenFunction::emitCompoundStmt(clang::CompoundStmt const&, bool, clang::CIRGen::AggValueSlot) + 453
19 clang     0x0000563edb895d65 clang::CIRGen::CIRGenFunction::emitSimpleStmt(clang::Stmt const*, bool) + 757
20 clang     0x0000563edb8954b0 clang::CIRGen::CIRGenFunction::emitStmt(clang::Stmt const*, bool, llvm::ArrayRef<clang::Attr const*>) + 16
21 clang     0x0000563edb895284 clang::CIRGen::CIRGenFunction::emitCompoundStmtWithoutScope(clang::CompoundStmt const&, bool, clang::CIRGen::AggValueSlot) + 260
22 clang     0x0000563edb87f81a clang::CIRGen::CIRGenFunction::generateCode(clang::GlobalDecl, cir::FuncOp, clang::CIRGen::CIRGenFunctionInfo const&) + 1514
23 clang     0x0000563edb7d2839 clang::CIRGen::CIRGenModule::emitGlobalFunctionDefinition(clang::GlobalDecl, mlir::Operation*) + 393
24 clang     0x0000563edb7ddb22 clang::CIRGen::CIRGenModule::emitGlobalDecl(clang::GlobalDecl&) + 338
25 clang     0x0000563edb7dddfb clang::CIRGen::CIRGenModule::emitDeferred(unsigned int) + 315
26 clang     0x0000563edb7ddf20 clang::CIRGen::CIRGenModule::Release() + 32
27 clang     0x0000563edb6bfa8c
28 clang     0x0000563edd7c1a09 clang::ParseAST(clang::Sema&, bool, bool) + 617
29 clang     0x0000563edaedcd36 clang::FrontendAction::Execute() + 38
30 clang     0x0000563edae483ad clang::CompilerInstance::ExecuteAction(clang::FrontendAction&) + 1149
31 clang     0x0000563edafc5edf clang::ExecuteCompilerInvocation(clang::CompilerInstance*) + 815
32 clang     0x0000563ed91e8a7a cc1_main(llvm::ArrayRef<char const*>, char const*, void*) + 6074
33 clang     0x0000563ed91e506d
34 clang     0x0000563edac8f339
35 clang     0x0000563eda385686 llvm::CrashRecoveryContext::RunSafely(llvm::function_ref<void ()>) + 150
36 clang     0x0000563edac8e892 clang::driver::CC1Command::Execute(llvm::ArrayRef<std::optional<llvm::StringRef>>, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char>>*, bool*) const + 242
37 clang     0x0000563edac4ac27 clang::driver::Compilation::ExecuteCommand(clang::driver::Command const&, clang::driver::Command const*&, bool) const + 455
38 clang     0x0000563edac4af17 clang::driver::Compilation::ExecuteJobs(clang::driver::JobList const&, llvm::SmallVectorImpl<std::pair<int, clang::driver::Command const*>>&, bool) const + 135
39 clang     0x0000563edac6a928 clang::driver::Driver::ExecuteCompilation(clang::driver::Compilation&, llvm::SmallVectorImpl<std::pair<int, clang::driver::Command const*>>&) + 904
40 clang     0x0000563ed91e46ba clang_main(int, char**, llvm::ToolContext const&) + 6090
41 clang     0x0000563ed91f4147 main + 87
42 libc.so.6 0x00007f5ce762a1ca
43 libc.so.6 0x00007f5ce762a28b __libc_start_main + 139
44 clang     0x0000563ed91e2aa5 _start + 37
clang: error: clang frontend command failed with exit code 134 (use -v to see invocation)
clang version 21.0.0git (git@github.com:llvm/clangir.git 4e7a2236d38507e994cbe5b79c888cf86427e7db)
Target: x86_64-unknown-linux-gnu
Thread model: posix
InstalledDir: /workspaces/clangir/install/bin
Build config: +assertions
clang: error: unable to execute command: Aborted (core dumped)
clang: note: diagnostic msg: Error generating preprocessed source(s).
