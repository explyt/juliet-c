!s32i = !cir.int<s, 32>
!s8i = !cir.int<s, 8>
!u64i = !cir.int<u, 64>
!void = !cir.void
#fn_attr = #cir<extra({nothrow = #cir.nothrow})>
#fn_attr1 = #cir<extra({inline = #cir.inline<no>, nothrow = #cir.nothrow, optnone = #cir.optnone, uwtable = #cir.uwtable<async>})>
#loc15 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE193_char_ncpy_21.c":31:25)
#loc16 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE193_char_ncpy_21.c":31:32)
#loc81 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE193_char_ncpy_21.c":67:30)
#loc82 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE193_char_ncpy_21.c":67:37)
#loc137 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE193_char_ncpy_21.c":100:30)
#loc138 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE193_char_ncpy_21.c":100:37)
#loc193 = loc(fused[#loc15, #loc16])
#loc220 = loc(fused[#loc81, #loc82])
#loc240 = loc(fused[#loc137, #loc138])
module @"/workspaces/juliet-c/testcases/CWE122_Heap_Based_Buffer_Overflow/s07/CWE122_Heap_Based_Buffer_Overflow__c_CWE193_char_ncpy_21.c" attributes {cir.lang = #cir.lang<c>, cir.sob = #cir.signed_overflow_behavior<undefined>, cir.triple = "x86_64-unknown-linux-gnu", cir.type_size_info = #cir.type_size_info<char = 8, int = 32, size_t = 64>, cir.uwtable = #cir.uwtable<async>, dlti.dl_spec = #dlti.dl_spec<i128 = dense<128> : vector<2xi64>, !llvm.ptr<272> = dense<64> : vector<4xi64>, i64 = dense<64> : vector<2xi64>, i1 = dense<8> : vector<2xi64>, !llvm.ptr = dense<64> : vector<4xi64>, f80 = dense<128> : vector<2xi64>, i32 = dense<32> : vector<2xi64>, i8 = dense<8> : vector<2xi64>, !llvm.ptr<270> = dense<32> : vector<4xi64>, i16 = dense<16> : vector<2xi64>, f128 = dense<128> : vector<2xi64>, !llvm.ptr<271> = dense<32> : vector<4xi64>, f64 = dense<64> : vector<2xi64>, f16 = dense<16> : vector<2xi64>, "dlti.mangling_mode" = "e", "dlti.endianness" = "little", "dlti.stack_alignment" = 128 : i64>} {
  cir.global "private" constant cir_private @__const.goodG2B2.source = #cir.const_array<"AAAAAAAAAA\00" : !cir.array<!s8i x 11>> : !cir.array<!s8i x 11> loc(#loc186)
  cir.global "private" constant cir_private @__const.goodG2B1.source = #cir.const_array<"AAAAAAAAAA\00" : !cir.array<!s8i x 11>> : !cir.array<!s8i x 11> loc(#loc187)
  cir.global "private" constant cir_private @__const.CWE122_Heap_Based_Buffer_Overflow__c_CWE193_char_ncpy_21_bad.source = #cir.const_array<"AAAAAAAAAA\00" : !cir.array<!s8i x 11>> : !cir.array<!s8i x 11> loc(#loc188)
  cir.global "private" internal dsolocal @badStatic = #cir.int<0> : !s32i {alignment = 4 : i64} loc(#loc189)
  cir.func private @malloc(!u64i) -> !cir.ptr<!void> extra(#fn_attr) loc(#loc190)
  cir.func private @exit(!s32i) extra(#fn_attr) loc(#loc191)
  cir.func internal private @badSource(%arg0: !cir.ptr<!s8i> loc(fused[#loc15, #loc16])) -> !cir.ptr<!s8i> extra(#fn_attr1) {
    %0 = cir.alloca !cir.ptr<!s8i>, !cir.ptr<!cir.ptr<!s8i>>, ["data", init] {alignment = 8 : i64} loc(#loc193)
    %1 = cir.alloca !cir.ptr<!s8i>, !cir.ptr<!cir.ptr<!s8i>>, ["__retval"] {alignment = 8 : i64} loc(#loc14)
    cir.store %arg0, %0 : !cir.ptr<!s8i>, !cir.ptr<!cir.ptr<!s8i>> loc(#loc17)
    cir.br ^bb1 loc(#loc194)
  ^bb1:  // pred: ^bb0
    %2 = cir.get_global @badStatic : !cir.ptr<!s32i> loc(#loc189)
    %3 = cir.load %2 : !cir.ptr<!s32i>, !s32i loc(#loc20)
    %4 = cir.cast(int_to_bool, %3 : !s32i), !cir.bool loc(#loc20)
    cir.brcond %4 ^bb2, ^bb7 loc(#loc195)
  ^bb2:  // pred: ^bb1
    %5 = cir.get_global @malloc : !cir.ptr<!cir.func<(!u64i) -> !cir.ptr<!void>>> loc(#loc22)
    %6 = cir.const #cir.int<10> : !s32i loc(#loc23)
    %7 = cir.cast(integral, %6 : !s32i), !u64i loc(#loc23)
    %8 = cir.const #cir.int<1> : !u64i loc(#loc196)
    %9 = cir.binop(mul, %7, %8) : !u64i loc(#loc197)
    %10 = cir.call @malloc(%9) : (!u64i) -> !cir.ptr<!void> extra(#fn_attr) loc(#loc22)
    %11 = cir.cast(bitcast, %10 : !cir.ptr<!void>), !cir.ptr<!s8i> loc(#loc198)
    cir.store %11, %0 : !cir.ptr<!s8i>, !cir.ptr<!cir.ptr<!s8i>> loc(#loc199)
    cir.br ^bb3 loc(#loc200)
  ^bb3:  // pred: ^bb2
    %12 = cir.load %0 : !cir.ptr<!cir.ptr<!s8i>>, !cir.ptr<!s8i> loc(#loc30)
    %13 = cir.const #cir.ptr<null> : !cir.ptr<!void> loc(#loc31)
    %14 = cir.cast(bitcast, %13 : !cir.ptr<!void>), !cir.ptr<!s8i> loc(#loc31)
    %15 = cir.cmp(eq, %12, %14) : !cir.ptr<!s8i>, !cir.bool loc(#loc201)
    cir.brcond %15 ^bb4, ^bb5 loc(#loc202)
  ^bb4:  // pred: ^bb3
    %16 = cir.get_global @exit : !cir.ptr<!cir.func<(!s32i)>> loc(#loc33)
    %17 = cir.const #cir.int<1> : !s32i loc(#loc34)
    %18 = cir.unary(minus, %17) nsw : !s32i, !s32i loc(#loc35)
    cir.call @exit(%18) : (!s32i) -> () extra(#fn_attr) loc(#loc33)
    cir.br ^bb5 loc(#loc29)
  ^bb5:  // 2 preds: ^bb3, ^bb4
    cir.br ^bb6 loc(#loc29)
  ^bb6:  // pred: ^bb5
    cir.br ^bb7 loc(#loc19)
  ^bb7:  // 2 preds: ^bb1, ^bb6
    cir.br ^bb8 loc(#loc19)
  ^bb8:  // pred: ^bb7
    %19 = cir.load %0 : !cir.ptr<!cir.ptr<!s8i>>, !cir.ptr<!s8i> loc(#loc36)
    cir.store %19, %1 : !cir.ptr<!s8i>, !cir.ptr<!cir.ptr<!s8i>> loc(#loc203)
    %20 = cir.load %1 : !cir.ptr<!cir.ptr<!s8i>>, !cir.ptr<!s8i> loc(#loc203)
    cir.return %20 : !cir.ptr<!s8i> loc(#loc203)
  } loc(#loc192)
  cir.func private @strncpy(!cir.ptr<!s8i>, !cir.ptr<!s8i>, !u64i) -> !cir.ptr<!s8i> extra(#fn_attr) loc(#loc204)
  cir.func private @strlen(!cir.ptr<!s8i>) -> !u64i extra(#fn_attr) loc(#loc205)
  cir.func private @printLine(!cir.ptr<!s8i>) loc(#loc206)
  cir.func private @free(!cir.ptr<!void>) extra(#fn_attr) loc(#loc207)
  cir.func no_proto @CWE122_Heap_Based_Buffer_Overflow__c_CWE193_char_ncpy_21_bad() extra(#fn_attr1) {
    %0 = cir.alloca !cir.array<!s8i x 11>, !cir.ptr<!cir.array<!s8i x 11>>, ["source"] {alignment = 1 : i64} loc(#loc188)
    %1 = cir.alloca !cir.ptr<!s8i>, !cir.ptr<!cir.ptr<!s8i>>, ["data"] {alignment = 8 : i64} loc(#loc209)
    %2 = cir.const #cir.ptr<null> : !cir.ptr<!s8i> loc(#loc50)
    cir.store %2, %1 : !cir.ptr<!s8i>, !cir.ptr<!cir.ptr<!s8i>> loc(#loc210)
    %3 = cir.const #cir.int<1> : !s32i loc(#loc52)
    %4 = cir.get_global @badStatic : !cir.ptr<!s32i> loc(#loc189)
    cir.store %3, %4 : !s32i, !cir.ptr<!s32i> loc(#loc211)
    %5 = cir.load %1 : !cir.ptr<!cir.ptr<!s8i>>, !cir.ptr<!s8i> loc(#loc54)
    %6 = cir.call @badSource(%5) : (!cir.ptr<!s8i>) -> !cir.ptr<!s8i> loc(#loc55)
    cir.store %6, %1 : !cir.ptr<!s8i>, !cir.ptr<!cir.ptr<!s8i>> loc(#loc212)
    cir.br ^bb1 loc(#loc213)
  ^bb1:  // pred: ^bb0
    %7 = cir.get_global @__const.CWE122_Heap_Based_Buffer_Overflow__c_CWE193_char_ncpy_21_bad.source : !cir.ptr<!cir.array<!s8i x 11>> loc(#loc188)
    cir.copy %7 to %0 : !cir.ptr<!cir.array<!s8i x 11>> loc(#loc188)
    %8 = cir.get_global @strncpy : !cir.ptr<!cir.func<(!cir.ptr<!s8i>, !cir.ptr<!s8i>, !u64i) -> !cir.ptr<!s8i>>> loc(#loc60)
    %9 = cir.load %1 : !cir.ptr<!cir.ptr<!s8i>>, !cir.ptr<!s8i> loc(#loc61)
    %10 = cir.cast(array_to_ptrdecay, %0 : !cir.ptr<!cir.array<!s8i x 11>>), !cir.ptr<!s8i> loc(#loc62)
    %11 = cir.get_global @strlen : !cir.ptr<!cir.func<(!cir.ptr<!s8i>) -> !u64i>> loc(#loc63)
    %12 = cir.cast(array_to_ptrdecay, %0 : !cir.ptr<!cir.array<!s8i x 11>>), !cir.ptr<!s8i> loc(#loc64)
    %13 = cir.call @strlen(%12) : (!cir.ptr<!s8i>) -> !u64i side_effect(pure) extra(#fn_attr) loc(#loc63)
    %14 = cir.const #cir.int<1> : !s32i loc(#loc65)
    %15 = cir.cast(integral, %14 : !s32i), !u64i loc(#loc65)
    %16 = cir.binop(add, %13, %15) : !u64i loc(#loc214)
    %17 = cir.call @strncpy(%9, %10, %16) : (!cir.ptr<!s8i>, !cir.ptr<!s8i>, !u64i) -> !cir.ptr<!s8i> extra(#fn_attr) loc(#loc60)
    %18 = cir.load %1 : !cir.ptr<!cir.ptr<!s8i>>, !cir.ptr<!s8i> loc(#loc66)
    cir.call @printLine(%18) : (!cir.ptr<!s8i>) -> () loc(#loc67)
    %19 = cir.get_global @free : !cir.ptr<!cir.func<(!cir.ptr<!void>)>> loc(#loc68)
    %20 = cir.load %1 : !cir.ptr<!cir.ptr<!s8i>>, !cir.ptr<!s8i> loc(#loc69)
    %21 = cir.cast(bitcast, %20 : !cir.ptr<!s8i>), !cir.ptr<!void> loc(#loc69)
    cir.call @free(%21) : (!cir.ptr<!void>) -> () extra(#fn_attr) loc(#loc68)
    cir.br ^bb2 loc(#loc59)
  ^bb2:  // pred: ^bb1
    cir.return loc(#loc47)
  } loc(#loc208)
  cir.func no_proto @CWE122_Heap_Based_Buffer_Overflow__c_CWE193_char_ncpy_21_good() extra(#fn_attr1) {
    %0 = cir.get_global @goodG2B1 : !cir.ptr<!cir.func<()>> loc(#loc216)
    cir.call %0() : (!cir.ptr<!cir.func<()>>) -> () loc(#loc72)
    %1 = cir.get_global @goodG2B2 : !cir.ptr<!cir.func<()>> loc(#loc217)
    cir.call %1() : (!cir.ptr<!cir.func<()>>) -> () loc(#loc74)
    cir.return loc(#loc71)
  } loc(#loc215)
  cir.global "private" internal dsolocal @goodG2B1Static = #cir.int<0> : !s32i {alignment = 4 : i64} loc(#loc218)
  cir.global "private" constant cir_private dsolocal @".str" = #cir.const_array<"Benign, fixed string\00" : !cir.array<!s8i x 21>> : !cir.array<!s8i x 21> {alignment = 1 : i64} loc(#loc78)
  cir.func internal private @goodG2B1Source(%arg0: !cir.ptr<!s8i> loc(fused[#loc81, #loc82])) -> !cir.ptr<!s8i> extra(#fn_attr1) {
    %0 = cir.alloca !cir.ptr<!s8i>, !cir.ptr<!cir.ptr<!s8i>>, ["data", init] {alignment = 8 : i64} loc(#loc220)
    %1 = cir.alloca !cir.ptr<!s8i>, !cir.ptr<!cir.ptr<!s8i>>, ["__retval"] {alignment = 8 : i64} loc(#loc80)
    cir.store %arg0, %0 : !cir.ptr<!s8i>, !cir.ptr<!cir.ptr<!s8i>> loc(#loc83)
    cir.br ^bb1 loc(#loc221)
  ^bb1:  // pred: ^bb0
    %2 = cir.get_global @goodG2B1Static : !cir.ptr<!s32i> loc(#loc218)
    %3 = cir.load %2 : !cir.ptr<!s32i>, !s32i loc(#loc86)
    %4 = cir.cast(int_to_bool, %3 : !s32i), !cir.bool loc(#loc86)
    cir.brcond %4 ^bb2, ^bb3 loc(#loc222)
  ^bb2:  // pred: ^bb1
    %5 = cir.get_global @".str" : !cir.ptr<!cir.array<!s8i x 21>> loc(#loc78)
    %6 = cir.cast(array_to_ptrdecay, %5 : !cir.ptr<!cir.array<!s8i x 21>>), !cir.ptr<!s8i> loc(#loc78)
    cir.call @printLine(%6) : (!cir.ptr<!s8i>) -> () loc(#loc90)
    cir.br ^bb8 loc(#loc88)
  ^bb3:  // pred: ^bb1
    %7 = cir.get_global @malloc : !cir.ptr<!cir.func<(!u64i) -> !cir.ptr<!void>>> loc(#loc91)
    %8 = cir.const #cir.int<10> : !s32i loc(#loc92)
    %9 = cir.const #cir.int<1> : !s32i loc(#loc93)
    %10 = cir.binop(add, %8, %9) nsw : !s32i loc(#loc92)
    %11 = cir.cast(integral, %10 : !s32i), !u64i loc(#loc92)
    %12 = cir.const #cir.int<1> : !u64i loc(#loc223)
    %13 = cir.binop(mul, %11, %12) : !u64i loc(#loc224)
    %14 = cir.call @malloc(%13) : (!u64i) -> !cir.ptr<!void> extra(#fn_attr) loc(#loc91)
    %15 = cir.cast(bitcast, %14 : !cir.ptr<!void>), !cir.ptr<!s8i> loc(#loc225)
    cir.store %15, %0 : !cir.ptr<!s8i>, !cir.ptr<!cir.ptr<!s8i>> loc(#loc226)
    cir.br ^bb4 loc(#loc227)
  ^bb4:  // pred: ^bb3
    %16 = cir.load %0 : !cir.ptr<!cir.ptr<!s8i>>, !cir.ptr<!s8i> loc(#loc101)
    %17 = cir.const #cir.ptr<null> : !cir.ptr<!void> loc(#loc102)
    %18 = cir.cast(bitcast, %17 : !cir.ptr<!void>), !cir.ptr<!s8i> loc(#loc102)
    %19 = cir.cmp(eq, %16, %18) : !cir.ptr<!s8i>, !cir.bool loc(#loc228)
    cir.brcond %19 ^bb5, ^bb6 loc(#loc229)
  ^bb5:  // pred: ^bb4
    %20 = cir.get_global @exit : !cir.ptr<!cir.func<(!s32i)>> loc(#loc104)
    %21 = cir.const #cir.int<1> : !s32i loc(#loc105)
    %22 = cir.unary(minus, %21) nsw : !s32i, !s32i loc(#loc106)
    cir.call @exit(%22) : (!s32i) -> () extra(#fn_attr) loc(#loc104)
    cir.br ^bb6 loc(#loc100)
  ^bb6:  // 2 preds: ^bb4, ^bb5
    cir.br ^bb7 loc(#loc100)
  ^bb7:  // pred: ^bb6
    cir.br ^bb8 loc(#loc85)
  ^bb8:  // 2 preds: ^bb2, ^bb7
    cir.br ^bb9 loc(#loc85)
  ^bb9:  // pred: ^bb8
    %23 = cir.load %0 : !cir.ptr<!cir.ptr<!s8i>>, !cir.ptr<!s8i> loc(#loc107)
    cir.store %23, %1 : !cir.ptr<!s8i>, !cir.ptr<!cir.ptr<!s8i>> loc(#loc230)
    %24 = cir.load %1 : !cir.ptr<!cir.ptr<!s8i>>, !cir.ptr<!s8i> loc(#loc230)
    cir.return %24 : !cir.ptr<!s8i> loc(#loc230)
  } loc(#loc219)
  cir.func no_proto internal private @goodG2B1() extra(#fn_attr1) {
    %0 = cir.alloca !cir.array<!s8i x 11>, !cir.ptr<!cir.array<!s8i x 11>>, ["source"] {alignment = 1 : i64} loc(#loc187)
    %1 = cir.alloca !cir.ptr<!s8i>, !cir.ptr<!cir.ptr<!s8i>>, ["data"] {alignment = 8 : i64} loc(#loc232)
    %2 = cir.const #cir.ptr<null> : !cir.ptr<!s8i> loc(#loc113)
    cir.store %2, %1 : !cir.ptr<!s8i>, !cir.ptr<!cir.ptr<!s8i>> loc(#loc233)
    %3 = cir.const #cir.int<0> : !s32i loc(#loc115)
    %4 = cir.get_global @goodG2B1Static : !cir.ptr<!s32i> loc(#loc218)
    cir.store %3, %4 : !s32i, !cir.ptr<!s32i> loc(#loc234)
    %5 = cir.load %1 : !cir.ptr<!cir.ptr<!s8i>>, !cir.ptr<!s8i> loc(#loc117)
    %6 = cir.call @goodG2B1Source(%5) : (!cir.ptr<!s8i>) -> !cir.ptr<!s8i> loc(#loc118)
    cir.store %6, %1 : !cir.ptr<!s8i>, !cir.ptr<!cir.ptr<!s8i>> loc(#loc235)
    cir.br ^bb1 loc(#loc236)
  ^bb1:  // pred: ^bb0
    %7 = cir.get_global @__const.goodG2B1.source : !cir.ptr<!cir.array<!s8i x 11>> loc(#loc187)
    cir.copy %7 to %0 : !cir.ptr<!cir.array<!s8i x 11>> loc(#loc187)
    %8 = cir.get_global @strncpy : !cir.ptr<!cir.func<(!cir.ptr<!s8i>, !cir.ptr<!s8i>, !u64i) -> !cir.ptr<!s8i>>> loc(#loc123)
    %9 = cir.load %1 : !cir.ptr<!cir.ptr<!s8i>>, !cir.ptr<!s8i> loc(#loc124)
    %10 = cir.cast(array_to_ptrdecay, %0 : !cir.ptr<!cir.array<!s8i x 11>>), !cir.ptr<!s8i> loc(#loc125)
    %11 = cir.get_global @strlen : !cir.ptr<!cir.func<(!cir.ptr<!s8i>) -> !u64i>> loc(#loc126)
    %12 = cir.cast(array_to_ptrdecay, %0 : !cir.ptr<!cir.array<!s8i x 11>>), !cir.ptr<!s8i> loc(#loc127)
    %13 = cir.call @strlen(%12) : (!cir.ptr<!s8i>) -> !u64i side_effect(pure) extra(#fn_attr) loc(#loc126)
    %14 = cir.const #cir.int<1> : !s32i loc(#loc128)
    %15 = cir.cast(integral, %14 : !s32i), !u64i loc(#loc128)
    %16 = cir.binop(add, %13, %15) : !u64i loc(#loc237)
    %17 = cir.call @strncpy(%9, %10, %16) : (!cir.ptr<!s8i>, !cir.ptr<!s8i>, !u64i) -> !cir.ptr<!s8i> extra(#fn_attr) loc(#loc123)
    %18 = cir.load %1 : !cir.ptr<!cir.ptr<!s8i>>, !cir.ptr<!s8i> loc(#loc129)
    cir.call @printLine(%18) : (!cir.ptr<!s8i>) -> () loc(#loc130)
    %19 = cir.get_global @free : !cir.ptr<!cir.func<(!cir.ptr<!void>)>> loc(#loc131)
    %20 = cir.load %1 : !cir.ptr<!cir.ptr<!s8i>>, !cir.ptr<!s8i> loc(#loc132)
    %21 = cir.cast(bitcast, %20 : !cir.ptr<!s8i>), !cir.ptr<!void> loc(#loc132)
    cir.call @free(%21) : (!cir.ptr<!void>) -> () extra(#fn_attr) loc(#loc131)
    cir.br ^bb2 loc(#loc122)
  ^bb2:  // pred: ^bb1
    cir.return loc(#loc110)
  } loc(#loc231)
  cir.global "private" internal dsolocal @goodG2B2Static = #cir.int<0> : !s32i {alignment = 4 : i64} loc(#loc238)
  cir.func internal private @goodG2B2Source(%arg0: !cir.ptr<!s8i> loc(fused[#loc137, #loc138])) -> !cir.ptr<!s8i> extra(#fn_attr1) {
    %0 = cir.alloca !cir.ptr<!s8i>, !cir.ptr<!cir.ptr<!s8i>>, ["data", init] {alignment = 8 : i64} loc(#loc240)
    %1 = cir.alloca !cir.ptr<!s8i>, !cir.ptr<!cir.ptr<!s8i>>, ["__retval"] {alignment = 8 : i64} loc(#loc136)
    cir.store %arg0, %0 : !cir.ptr<!s8i>, !cir.ptr<!cir.ptr<!s8i>> loc(#loc139)
    cir.br ^bb1 loc(#loc241)
  ^bb1:  // pred: ^bb0
    %2 = cir.get_global @goodG2B2Static : !cir.ptr<!s32i> loc(#loc238)
    %3 = cir.load %2 : !cir.ptr<!s32i>, !s32i loc(#loc142)
    %4 = cir.cast(int_to_bool, %3 : !s32i), !cir.bool loc(#loc142)
    cir.brcond %4 ^bb2, ^bb7 loc(#loc242)
  ^bb2:  // pred: ^bb1
    %5 = cir.get_global @malloc : !cir.ptr<!cir.func<(!u64i) -> !cir.ptr<!void>>> loc(#loc144)
    %6 = cir.const #cir.int<10> : !s32i loc(#loc145)
    %7 = cir.const #cir.int<1> : !s32i loc(#loc146)
    %8 = cir.binop(add, %6, %7) nsw : !s32i loc(#loc145)
    %9 = cir.cast(integral, %8 : !s32i), !u64i loc(#loc145)
    %10 = cir.const #cir.int<1> : !u64i loc(#loc243)
    %11 = cir.binop(mul, %9, %10) : !u64i loc(#loc244)
    %12 = cir.call @malloc(%11) : (!u64i) -> !cir.ptr<!void> extra(#fn_attr) loc(#loc144)
    %13 = cir.cast(bitcast, %12 : !cir.ptr<!void>), !cir.ptr<!s8i> loc(#loc245)
    cir.store %13, %0 : !cir.ptr<!s8i>, !cir.ptr<!cir.ptr<!s8i>> loc(#loc246)
    cir.br ^bb3 loc(#loc247)
  ^bb3:  // pred: ^bb2
    %14 = cir.load %0 : !cir.ptr<!cir.ptr<!s8i>>, !cir.ptr<!s8i> loc(#loc154)
    %15 = cir.const #cir.ptr<null> : !cir.ptr<!void> loc(#loc155)
    %16 = cir.cast(bitcast, %15 : !cir.ptr<!void>), !cir.ptr<!s8i> loc(#loc155)
    %17 = cir.cmp(eq, %14, %16) : !cir.ptr<!s8i>, !cir.bool loc(#loc248)
    cir.brcond %17 ^bb4, ^bb5 loc(#loc249)
  ^bb4:  // pred: ^bb3
    %18 = cir.get_global @exit : !cir.ptr<!cir.func<(!s32i)>> loc(#loc157)
    %19 = cir.const #cir.int<1> : !s32i loc(#loc158)
    %20 = cir.unary(minus, %19) nsw : !s32i, !s32i loc(#loc159)
    cir.call @exit(%20) : (!s32i) -> () extra(#fn_attr) loc(#loc157)
    cir.br ^bb5 loc(#loc153)
  ^bb5:  // 2 preds: ^bb3, ^bb4
    cir.br ^bb6 loc(#loc153)
  ^bb6:  // pred: ^bb5
    cir.br ^bb7 loc(#loc141)
  ^bb7:  // 2 preds: ^bb1, ^bb6
    cir.br ^bb8 loc(#loc141)
  ^bb8:  // pred: ^bb7
    %21 = cir.load %0 : !cir.ptr<!cir.ptr<!s8i>>, !cir.ptr<!s8i> loc(#loc160)
    cir.store %21, %1 : !cir.ptr<!s8i>, !cir.ptr<!cir.ptr<!s8i>> loc(#loc250)
    %22 = cir.load %1 : !cir.ptr<!cir.ptr<!s8i>>, !cir.ptr<!s8i> loc(#loc250)
    cir.return %22 : !cir.ptr<!s8i> loc(#loc250)
  } loc(#loc239)
  cir.func no_proto internal private @goodG2B2() extra(#fn_attr1) {
    %0 = cir.alloca !cir.array<!s8i x 11>, !cir.ptr<!cir.array<!s8i x 11>>, ["source"] {alignment = 1 : i64} loc(#loc186)
    %1 = cir.alloca !cir.ptr<!s8i>, !cir.ptr<!cir.ptr<!s8i>>, ["data"] {alignment = 8 : i64} loc(#loc252)
    %2 = cir.const #cir.ptr<null> : !cir.ptr<!s8i> loc(#loc166)
    cir.store %2, %1 : !cir.ptr<!s8i>, !cir.ptr<!cir.ptr<!s8i>> loc(#loc253)
    %3 = cir.const #cir.int<1> : !s32i loc(#loc168)
    %4 = cir.get_global @goodG2B2Static : !cir.ptr<!s32i> loc(#loc238)
    cir.store %3, %4 : !s32i, !cir.ptr<!s32i> loc(#loc254)
    %5 = cir.load %1 : !cir.ptr<!cir.ptr<!s8i>>, !cir.ptr<!s8i> loc(#loc170)
    %6 = cir.call @goodG2B2Source(%5) : (!cir.ptr<!s8i>) -> !cir.ptr<!s8i> loc(#loc171)
    cir.store %6, %1 : !cir.ptr<!s8i>, !cir.ptr<!cir.ptr<!s8i>> loc(#loc255)
    cir.br ^bb1 loc(#loc256)
  ^bb1:  // pred: ^bb0
    %7 = cir.get_global @__const.goodG2B2.source : !cir.ptr<!cir.array<!s8i x 11>> loc(#loc186)
    cir.copy %7 to %0 : !cir.ptr<!cir.array<!s8i x 11>> loc(#loc186)
    %8 = cir.get_global @strncpy : !cir.ptr<!cir.func<(!cir.ptr<!s8i>, !cir.ptr<!s8i>, !u64i) -> !cir.ptr<!s8i>>> loc(#loc176)
    %9 = cir.load %1 : !cir.ptr<!cir.ptr<!s8i>>, !cir.ptr<!s8i> loc(#loc177)
    %10 = cir.cast(array_to_ptrdecay, %0 : !cir.ptr<!cir.array<!s8i x 11>>), !cir.ptr<!s8i> loc(#loc178)
    %11 = cir.get_global @strlen : !cir.ptr<!cir.func<(!cir.ptr<!s8i>) -> !u64i>> loc(#loc179)
    %12 = cir.cast(array_to_ptrdecay, %0 : !cir.ptr<!cir.array<!s8i x 11>>), !cir.ptr<!s8i> loc(#loc180)
    %13 = cir.call @strlen(%12) : (!cir.ptr<!s8i>) -> !u64i side_effect(pure) extra(#fn_attr) loc(#loc179)
    %14 = cir.const #cir.int<1> : !s32i loc(#loc181)
    %15 = cir.cast(integral, %14 : !s32i), !u64i loc(#loc181)
    %16 = cir.binop(add, %13, %15) : !u64i loc(#loc257)
    %17 = cir.call @strncpy(%9, %10, %16) : (!cir.ptr<!s8i>, !cir.ptr<!s8i>, !u64i) -> !cir.ptr<!s8i> extra(#fn_attr) loc(#loc176)
    %18 = cir.load %1 : !cir.ptr<!cir.ptr<!s8i>>, !cir.ptr<!s8i> loc(#loc182)
    cir.call @printLine(%18) : (!cir.ptr<!s8i>) -> () loc(#loc183)
    %19 = cir.get_global @free : !cir.ptr<!cir.func<(!cir.ptr<!void>)>> loc(#loc184)
    %20 = cir.load %1 : !cir.ptr<!cir.ptr<!s8i>>, !cir.ptr<!s8i> loc(#loc185)
    %21 = cir.cast(bitcast, %20 : !cir.ptr<!s8i>), !cir.ptr<!void> loc(#loc185)
    cir.call @free(%21) : (!cir.ptr<!void>) -> () extra(#fn_attr) loc(#loc184)
    cir.br ^bb2 loc(#loc175)
  ^bb2:  // pred: ^bb1
    cir.return loc(#loc163)
  } loc(#loc251)
} loc(#loc)
#loc = loc("/workspaces/juliet-c/testcases/CWE122_Heap_Based_Buffer_Overflow/s07/CWE122_Heap_Based_Buffer_Overflow__c_CWE193_char_ncpy_21.c":0:0)
#loc1 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE193_char_ncpy_21.c":118:9)
#loc2 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE193_char_ncpy_21.c":118:29)
#loc3 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE193_char_ncpy_21.c":90:9)
#loc4 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE193_char_ncpy_21.c":90:29)
#loc5 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE193_char_ncpy_21.c":49:9)
#loc6 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE193_char_ncpy_21.c":49:29)
#loc7 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE193_char_ncpy_21.c":29:1)
#loc8 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE193_char_ncpy_21.c":29:24)
#loc9 = loc("/usr/include/stdlib.h":672:1)
#loc10 = loc("/usr/include/stdlib.h":672:45)
#loc11 = loc("/usr/include/stdlib.h":756:1)
#loc12 = loc("/usr/include/stdlib.h":756:70)
#loc13 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE193_char_ncpy_21.c":31:1)
#loc14 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE193_char_ncpy_21.c":40:1)
#loc17 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE193_char_ncpy_21.c":32:1)
#loc18 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE193_char_ncpy_21.c":33:5)
#loc19 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE193_char_ncpy_21.c":38:5)
#loc20 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE193_char_ncpy_21.c":33:8)
#loc21 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE193_char_ncpy_21.c":34:5)
#loc22 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE193_char_ncpy_21.c":36:24)
#loc23 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE193_char_ncpy_21.c":36:31)
#loc24 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE193_char_ncpy_21.c":36:34)
#loc25 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE193_char_ncpy_21.c":36:45)
#loc26 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE193_char_ncpy_21.c":36:46)
#loc27 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE193_char_ncpy_21.c":36:9)
#loc28 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE193_char_ncpy_21.c":37:9)
#loc29 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE193_char_ncpy_21.c":37:37)
#loc30 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE193_char_ncpy_21.c":37:13)
#loc31 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE193_char_ncpy_21.c":37:21)
#loc32 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE193_char_ncpy_21.c":37:27)
#loc33 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE193_char_ncpy_21.c":37:28)
#loc34 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE193_char_ncpy_21.c":37:34)
#loc35 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE193_char_ncpy_21.c":37:33)
#loc36 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE193_char_ncpy_21.c":39:12)
#loc37 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE193_char_ncpy_21.c":39:5)
#loc38 = loc("/usr/include/string.h":144:1)
#loc39 = loc("/usr/include/string.h":146:14)
#loc40 = loc("/usr/include/string.h":407:1)
#loc41 = loc("/usr/include/string.h":408:33)
#loc42 = loc("../../../testcasesupport/std_testcase_io.h":14:1)
#loc43 = loc("../../../testcasesupport/std_testcase_io.h":14:33)
#loc44 = loc("/usr/include/stdlib.h":687:1)
#loc45 = loc("/usr/include/stdlib.h":687:32)
#loc46 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE193_char_ncpy_21.c":42:1)
#loc47 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE193_char_ncpy_21.c":56:1)
#loc48 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE193_char_ncpy_21.c":44:5)
#loc49 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE193_char_ncpy_21.c":44:12)
#loc50 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE193_char_ncpy_21.c":45:12)
#loc51 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE193_char_ncpy_21.c":45:5)
#loc52 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE193_char_ncpy_21.c":46:17)
#loc53 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE193_char_ncpy_21.c":46:5)
#loc54 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE193_char_ncpy_21.c":47:22)
#loc55 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE193_char_ncpy_21.c":47:12)
#loc56 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE193_char_ncpy_21.c":47:5)
#loc57 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE193_char_ncpy_21.c":47:26)
#loc58 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE193_char_ncpy_21.c":48:5)
#loc59 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE193_char_ncpy_21.c":55:5)
#loc60 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE193_char_ncpy_21.c":52:9)
#loc61 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE193_char_ncpy_21.c":52:17)
#loc62 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE193_char_ncpy_21.c":52:23)
#loc63 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE193_char_ncpy_21.c":52:31)
#loc64 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE193_char_ncpy_21.c":52:38)
#loc65 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE193_char_ncpy_21.c":52:48)
#loc66 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE193_char_ncpy_21.c":53:19)
#loc67 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE193_char_ncpy_21.c":53:9)
#loc68 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE193_char_ncpy_21.c":54:9)
#loc69 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE193_char_ncpy_21.c":54:14)
#loc70 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE193_char_ncpy_21.c":127:1)
#loc71 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE193_char_ncpy_21.c":131:1)
#loc72 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE193_char_ncpy_21.c":129:5)
#loc73 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE193_char_ncpy_21.c":129:14)
#loc74 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE193_char_ncpy_21.c":130:5)
#loc75 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE193_char_ncpy_21.c":130:14)
#loc76 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE193_char_ncpy_21.c":63:1)
#loc77 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE193_char_ncpy_21.c":63:29)
#loc78 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE193_char_ncpy_21.c":72:19)
#loc79 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE193_char_ncpy_21.c":67:1)
#loc80 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE193_char_ncpy_21.c":81:1)
#loc83 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE193_char_ncpy_21.c":68:1)
#loc84 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE193_char_ncpy_21.c":69:5)
#loc85 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE193_char_ncpy_21.c":79:5)
#loc86 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE193_char_ncpy_21.c":69:8)
#loc87 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE193_char_ncpy_21.c":70:5)
#loc88 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE193_char_ncpy_21.c":73:5)
#loc89 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE193_char_ncpy_21.c":75:5)
#loc90 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE193_char_ncpy_21.c":72:9)
#loc91 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE193_char_ncpy_21.c":77:24)
#loc92 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE193_char_ncpy_21.c":77:32)
#loc93 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE193_char_ncpy_21.c":77:35)
#loc94 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE193_char_ncpy_21.c":77:38)
#loc95 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE193_char_ncpy_21.c":77:49)
#loc96 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE193_char_ncpy_21.c":77:31)
#loc97 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE193_char_ncpy_21.c":77:50)
#loc98 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE193_char_ncpy_21.c":77:9)
#loc99 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE193_char_ncpy_21.c":78:9)
#loc100 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE193_char_ncpy_21.c":78:37)
#loc101 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE193_char_ncpy_21.c":78:13)
#loc102 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE193_char_ncpy_21.c":78:21)
#loc103 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE193_char_ncpy_21.c":78:27)
#loc104 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE193_char_ncpy_21.c":78:28)
#loc105 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE193_char_ncpy_21.c":78:34)
#loc106 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE193_char_ncpy_21.c":78:33)
#loc107 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE193_char_ncpy_21.c":80:12)
#loc108 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE193_char_ncpy_21.c":80:5)
#loc109 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE193_char_ncpy_21.c":83:1)
#loc110 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE193_char_ncpy_21.c":97:1)
#loc111 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE193_char_ncpy_21.c":85:5)
#loc112 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE193_char_ncpy_21.c":85:12)
#loc113 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE193_char_ncpy_21.c":86:12)
#loc114 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE193_char_ncpy_21.c":86:5)
#loc115 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE193_char_ncpy_21.c":87:22)
#loc116 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE193_char_ncpy_21.c":87:5)
#loc117 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE193_char_ncpy_21.c":88:27)
#loc118 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE193_char_ncpy_21.c":88:12)
#loc119 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE193_char_ncpy_21.c":88:5)
#loc120 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE193_char_ncpy_21.c":88:31)
#loc121 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE193_char_ncpy_21.c":89:5)
#loc122 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE193_char_ncpy_21.c":96:5)
#loc123 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE193_char_ncpy_21.c":93:9)
#loc124 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE193_char_ncpy_21.c":93:17)
#loc125 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE193_char_ncpy_21.c":93:23)
#loc126 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE193_char_ncpy_21.c":93:31)
#loc127 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE193_char_ncpy_21.c":93:38)
#loc128 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE193_char_ncpy_21.c":93:48)
#loc129 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE193_char_ncpy_21.c":94:19)
#loc130 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE193_char_ncpy_21.c":94:9)
#loc131 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE193_char_ncpy_21.c":95:9)
#loc132 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE193_char_ncpy_21.c":95:14)
#loc133 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE193_char_ncpy_21.c":64:1)
#loc134 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE193_char_ncpy_21.c":64:29)
#loc135 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE193_char_ncpy_21.c":100:1)
#loc136 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE193_char_ncpy_21.c":109:1)
#loc139 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE193_char_ncpy_21.c":101:1)
#loc140 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE193_char_ncpy_21.c":102:5)
#loc141 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE193_char_ncpy_21.c":107:5)
#loc142 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE193_char_ncpy_21.c":102:8)
#loc143 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE193_char_ncpy_21.c":103:5)
#loc144 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE193_char_ncpy_21.c":105:24)
#loc145 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE193_char_ncpy_21.c":105:32)
#loc146 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE193_char_ncpy_21.c":105:35)
#loc147 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE193_char_ncpy_21.c":105:38)
#loc148 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE193_char_ncpy_21.c":105:49)
#loc149 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE193_char_ncpy_21.c":105:31)
#loc150 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE193_char_ncpy_21.c":105:50)
#loc151 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE193_char_ncpy_21.c":105:9)
#loc152 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE193_char_ncpy_21.c":106:9)
#loc153 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE193_char_ncpy_21.c":106:37)
#loc154 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE193_char_ncpy_21.c":106:13)
#loc155 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE193_char_ncpy_21.c":106:21)
#loc156 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE193_char_ncpy_21.c":106:27)
#loc157 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE193_char_ncpy_21.c":106:28)
#loc158 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE193_char_ncpy_21.c":106:34)
#loc159 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE193_char_ncpy_21.c":106:33)
#loc160 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE193_char_ncpy_21.c":108:12)
#loc161 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE193_char_ncpy_21.c":108:5)
#loc162 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE193_char_ncpy_21.c":111:1)
#loc163 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE193_char_ncpy_21.c":125:1)
#loc164 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE193_char_ncpy_21.c":113:5)
#loc165 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE193_char_ncpy_21.c":113:12)
#loc166 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE193_char_ncpy_21.c":114:12)
#loc167 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE193_char_ncpy_21.c":114:5)
#loc168 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE193_char_ncpy_21.c":115:22)
#loc169 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE193_char_ncpy_21.c":115:5)
#loc170 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE193_char_ncpy_21.c":116:27)
#loc171 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE193_char_ncpy_21.c":116:12)
#loc172 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE193_char_ncpy_21.c":116:5)
#loc173 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE193_char_ncpy_21.c":116:31)
#loc174 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE193_char_ncpy_21.c":117:5)
#loc175 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE193_char_ncpy_21.c":124:5)
#loc176 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE193_char_ncpy_21.c":121:9)
#loc177 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE193_char_ncpy_21.c":121:17)
#loc178 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE193_char_ncpy_21.c":121:23)
#loc179 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE193_char_ncpy_21.c":121:31)
#loc180 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE193_char_ncpy_21.c":121:38)
#loc181 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE193_char_ncpy_21.c":121:48)
#loc182 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE193_char_ncpy_21.c":122:19)
#loc183 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE193_char_ncpy_21.c":122:9)
#loc184 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE193_char_ncpy_21.c":123:9)
#loc185 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE193_char_ncpy_21.c":123:14)
#loc186 = loc(fused[#loc1, #loc2])
#loc187 = loc(fused[#loc3, #loc4])
#loc188 = loc(fused[#loc5, #loc6])
#loc189 = loc(fused[#loc7, #loc8])
#loc190 = loc(fused[#loc9, #loc10])
#loc191 = loc(fused[#loc11, #loc12])
#loc192 = loc(fused[#loc13, #loc14])
#loc194 = loc(fused[#loc18, #loc19])
#loc195 = loc(fused[#loc21, #loc19])
#loc196 = loc(fused[#loc24, #loc25])
#loc197 = loc(fused[#loc23, #loc25])
#loc198 = loc(fused[#loc22, #loc26])
#loc199 = loc(fused[#loc27, #loc26])
#loc200 = loc(fused[#loc28, #loc29])
#loc201 = loc(fused[#loc30, #loc31])
#loc202 = loc(fused[#loc32, #loc29])
#loc203 = loc(fused[#loc37, #loc36])
#loc204 = loc(fused[#loc38, #loc39])
#loc205 = loc(fused[#loc40, #loc41])
#loc206 = loc(fused[#loc42, #loc43])
#loc207 = loc(fused[#loc44, #loc45])
#loc208 = loc(fused[#loc46, #loc47])
#loc209 = loc(fused[#loc48, #loc49])
#loc210 = loc(fused[#loc51, #loc50])
#loc211 = loc(fused[#loc53, #loc52])
#loc212 = loc(fused[#loc56, #loc57])
#loc213 = loc(fused[#loc58, #loc59])
#loc214 = loc(fused[#loc63, #loc65])
#loc215 = loc(fused[#loc70, #loc71])
#loc216 = loc(fused[#loc72, #loc73])
#loc217 = loc(fused[#loc74, #loc75])
#loc218 = loc(fused[#loc76, #loc77])
#loc219 = loc(fused[#loc79, #loc80])
#loc221 = loc(fused[#loc84, #loc85])
#loc222 = loc(fused[#loc87, #loc88, #loc89, #loc85])
#loc223 = loc(fused[#loc94, #loc95])
#loc224 = loc(fused[#loc96, #loc95])
#loc225 = loc(fused[#loc91, #loc97])
#loc226 = loc(fused[#loc98, #loc97])
#loc227 = loc(fused[#loc99, #loc100])
#loc228 = loc(fused[#loc101, #loc102])
#loc229 = loc(fused[#loc103, #loc100])
#loc230 = loc(fused[#loc108, #loc107])
#loc231 = loc(fused[#loc109, #loc110])
#loc232 = loc(fused[#loc111, #loc112])
#loc233 = loc(fused[#loc114, #loc113])
#loc234 = loc(fused[#loc116, #loc115])
#loc235 = loc(fused[#loc119, #loc120])
#loc236 = loc(fused[#loc121, #loc122])
#loc237 = loc(fused[#loc126, #loc128])
#loc238 = loc(fused[#loc133, #loc134])
#loc239 = loc(fused[#loc135, #loc136])
#loc241 = loc(fused[#loc140, #loc141])
#loc242 = loc(fused[#loc143, #loc141])
#loc243 = loc(fused[#loc147, #loc148])
#loc244 = loc(fused[#loc149, #loc148])
#loc245 = loc(fused[#loc144, #loc150])
#loc246 = loc(fused[#loc151, #loc150])
#loc247 = loc(fused[#loc152, #loc153])
#loc248 = loc(fused[#loc154, #loc155])
#loc249 = loc(fused[#loc156, #loc153])
#loc250 = loc(fused[#loc161, #loc160])
#loc251 = loc(fused[#loc162, #loc163])
#loc252 = loc(fused[#loc164, #loc165])
#loc253 = loc(fused[#loc167, #loc166])
#loc254 = loc(fused[#loc169, #loc168])
#loc255 = loc(fused[#loc172, #loc173])
#loc256 = loc(fused[#loc174, #loc175])
#loc257 = loc(fused[#loc179, #loc181])
