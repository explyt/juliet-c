!s32i = !cir.int<s, 32>
!s64i = !cir.int<s, 64>
!s8i = !cir.int<s, 8>
!ty__IO_codecvt = !cir.struct<struct "_IO_codecvt" incomplete>
!ty__IO_marker = !cir.struct<struct "_IO_marker" incomplete>
!ty__IO_wide_data = !cir.struct<struct "_IO_wide_data" incomplete>
!u16i = !cir.int<u, 16>
!u32i = !cir.int<u, 32>
!void = !cir.void
#fn_attr = #cir<extra({inline = #cir.inline<no>, nothrow = #cir.nothrow, optnone = #cir.optnone})>
#fn_attr1 = #cir<extra({nothrow = #cir.nothrow})>
#loc12 = loc("CWE190_Integer_Overflow__unsigned_int_fscanf_square_21.c":27:21)
#loc13 = loc("CWE190_Integer_Overflow__unsigned_int_fscanf_square_21.c":27:34)
#loc58 = loc("CWE190_Integer_Overflow__unsigned_int_fscanf_square_21.c":158:10)
#loc59 = loc("CWE190_Integer_Overflow__unsigned_int_fscanf_square_21.c":158:14)
#loc60 = loc("CWE190_Integer_Overflow__unsigned_int_fscanf_square_21.c":158:20)
#loc61 = loc("CWE190_Integer_Overflow__unsigned_int_fscanf_square_21.c":158:32)
#loc83 = loc("CWE190_Integer_Overflow__unsigned_int_fscanf_square_21.c":59:26)
#loc84 = loc("CWE190_Integer_Overflow__unsigned_int_fscanf_square_21.c":59:39)
#loc126 = loc("CWE190_Integer_Overflow__unsigned_int_fscanf_square_21.c":92:26)
#loc127 = loc("CWE190_Integer_Overflow__unsigned_int_fscanf_square_21.c":92:39)
#loc167 = loc("CWE190_Integer_Overflow__unsigned_int_fscanf_square_21.c":120:25)
#loc168 = loc("CWE190_Integer_Overflow__unsigned_int_fscanf_square_21.c":120:38)
#loc198 = loc(fused[#loc12, #loc13])
#loc216 = loc(fused[#loc58, #loc59])
#loc217 = loc(fused[#loc60, #loc61])
#loc223 = loc(fused[#loc83, #loc84])
#loc237 = loc(fused[#loc126, #loc127])
#loc251 = loc(fused[#loc167, #loc168])
!ty__IO_FILE = !cir.struct<struct "_IO_FILE" {!s32i, !cir.ptr<!s8i>, !cir.ptr<!s8i>, !cir.ptr<!s8i>, !cir.ptr<!s8i>, !cir.ptr<!s8i>, !cir.ptr<!s8i>, !cir.ptr<!s8i>, !cir.ptr<!s8i>, !cir.ptr<!s8i>, !cir.ptr<!s8i>, !cir.ptr<!s8i>, !cir.ptr<!ty__IO_marker>, !cir.ptr<!cir.struct<struct "_IO_FILE">>, !s32i, !s32i, !s64i, !u16i, !s8i, !cir.array<!s8i x 1>, !cir.ptr<!void>, !s64i, !cir.ptr<!ty__IO_codecvt>, !cir.ptr<!ty__IO_wide_data>, !cir.ptr<!cir.struct<struct "_IO_FILE">>, !cir.ptr<!void>, !cir.ptr<!cir.ptr<!cir.struct<struct "_IO_FILE">>>, !s32i, !cir.array<!s8i x 20>} #cir.record.decl.ast>
module @"/home/ladisgin/git_proj/juliet-c/testcases/CWE190_Integer_Overflow/s05/CWE190_Integer_Overflow__unsigned_int_fscanf_square_21.c" attributes {cir.lang = #cir.lang<c>, cir.sob = #cir.signed_overflow_behavior<undefined>, cir.triple = "x86_64-unknown-linux-gnu", dlti.dl_spec = #dlti.dl_spec<!llvm.ptr<271> = dense<32> : vector<4xi64>, f128 = dense<128> : vector<2xi64>, !llvm.ptr<270> = dense<32> : vector<4xi64>, f64 = dense<64> : vector<2xi64>, f16 = dense<16> : vector<2xi64>, i32 = dense<32> : vector<2xi64>, i16 = dense<16> : vector<2xi64>, i8 = dense<8> : vector<2xi64>, i1 = dense<8> : vector<2xi64>, !llvm.ptr = dense<64> : vector<4xi64>, f80 = dense<128> : vector<2xi64>, i128 = dense<128> : vector<2xi64>, i64 = dense<64> : vector<2xi64>, !llvm.ptr<272> = dense<64> : vector<4xi64>, "dlti.endianness" = "little", "dlti.stack_alignment" = 128 : i64>} {
  cir.func private @__isoc99_fscanf(!cir.ptr<!ty__IO_FILE>, !cir.ptr<!s8i>, ...) -> !s32i loc(#loc193)
  cir.global "private" external @stdin : !cir.ptr<!ty__IO_FILE> {alignment = 8 : i64} loc(#loc194)
  cir.global "private" constant cir_private dsolocal @".str" = #cir.const_array<"%u\00" : !cir.array<!s8i x 3>> : !cir.array<!s8i x 3> {alignment = 1 : i64} loc(#loc5)
  cir.global "private" internal dsolocal @badStatic = #cir.int<0> : !s32i {alignment = 4 : i64} loc(#loc195)
  cir.func private @printUnsignedLine(!u32i) loc(#loc196)
  cir.func internal private @badSink(%arg0: !u32i loc(fused[#loc12, #loc13])) extra(#fn_attr) {
    %0 = cir.alloca !u32i, !cir.ptr<!u32i>, ["data", init] {alignment = 4 : i64} loc(#loc198)
    cir.store %arg0, %0 : !u32i, !cir.ptr<!u32i> loc(#loc14)
    cir.scope {
      %1 = cir.get_global @badStatic : !cir.ptr<!s32i> loc(#loc195)
      %2 = cir.load %1 : !cir.ptr<!s32i>, !s32i loc(#loc17)
      %3 = cir.cast(int_to_bool, %2 : !s32i), !cir.bool loc(#loc17)
      cir.if %3 {
        cir.scope {
          %4 = cir.alloca !u32i, !cir.ptr<!u32i>, ["result", init] {alignment = 4 : i64} loc(#loc202)
          %5 = cir.load %0 : !cir.ptr<!u32i>, !u32i loc(#loc23)
          %6 = cir.load %0 : !cir.ptr<!u32i>, !u32i loc(#loc22)
          %7 = cir.binop(mul, %5, %6) : !u32i loc(#loc203)
          cir.store %7, %4 : !u32i, !cir.ptr<!u32i> loc(#loc202)
          %8 = cir.load %4 : !cir.ptr<!u32i>, !u32i loc(#loc24)
          cir.call @printUnsignedLine(%8) : (!u32i) -> () loc(#loc25)
        } loc(#loc201)
      } loc(#loc200)
    } loc(#loc199)
    cir.return loc(#loc11)
  } loc(#loc197)
  cir.func no_proto @CWE190_Integer_Overflow__unsigned_int_fscanf_square_21_bad() extra(#fn_attr) {
    %0 = cir.alloca !u32i, !cir.ptr<!u32i>, ["data"] {alignment = 4 : i64} loc(#loc205)
    %1 = cir.const #cir.int<0> : !s32i loc(#loc30)
    %2 = cir.cast(integral, %1 : !s32i), !u32i loc(#loc30)
    cir.store %2, %0 : !u32i, !cir.ptr<!u32i> loc(#loc206)
    %3 = cir.get_global @__isoc99_fscanf : !cir.ptr<!cir.func<!s32i (!cir.ptr<!ty__IO_FILE>, !cir.ptr<!s8i>, ...)>> loc(#loc32)
    %4 = cir.get_global @stdin : !cir.ptr<!cir.ptr<!ty__IO_FILE>> loc(#loc194)
    %5 = cir.load %4 : !cir.ptr<!cir.ptr<!ty__IO_FILE>>, !cir.ptr<!ty__IO_FILE> loc(#loc33)
    %6 = cir.get_global @".str" : !cir.ptr<!cir.array<!s8i x 3>> loc(#loc5)
    %7 = cir.cast(array_to_ptrdecay, %6 : !cir.ptr<!cir.array<!s8i x 3>>), !cir.ptr<!s8i> loc(#loc5)
    %8 = cir.call @__isoc99_fscanf(%5, %7, %0) : (!cir.ptr<!ty__IO_FILE>, !cir.ptr<!s8i>, !cir.ptr<!u32i>) -> !s32i loc(#loc32)
    %9 = cir.const #cir.int<1> : !s32i loc(#loc34)
    %10 = cir.get_global @badStatic : !cir.ptr<!s32i> loc(#loc195)
    cir.store %9, %10 : !s32i, !cir.ptr<!s32i> loc(#loc207)
    %11 = cir.load %0 : !cir.ptr<!u32i>, !u32i loc(#loc36)
    cir.call @badSink(%11) : (!u32i) -> () loc(#loc37)
    cir.return loc(#loc27)
  } loc(#loc204)
  cir.func no_proto @CWE190_Integer_Overflow__unsigned_int_fscanf_square_21_good() extra(#fn_attr) {
    %0 = cir.get_global @goodB2G1 : !cir.ptr<!cir.func<!void ()>> loc(#loc209)
    cir.call %0() : (!cir.ptr<!cir.func<!void ()>>) -> () loc(#loc40)
    %1 = cir.get_global @goodB2G2 : !cir.ptr<!cir.func<!void ()>> loc(#loc210)
    cir.call %1() : (!cir.ptr<!cir.func<!void ()>>) -> () loc(#loc42)
    %2 = cir.get_global @goodG2B : !cir.ptr<!cir.func<!void ()>> loc(#loc211)
    cir.call %2() : (!cir.ptr<!cir.func<!void ()>>) -> () loc(#loc44)
    cir.return loc(#loc39)
  } loc(#loc208)
  cir.func private @srand(!u32i) extra(#fn_attr1) loc(#loc212)
  cir.func private @time(!cir.ptr<!s64i>) -> !s64i extra(#fn_attr1) loc(#loc213)
  cir.func private @printLine(!cir.ptr<!s8i>) loc(#loc214)
  cir.global "private" constant cir_private dsolocal @".str.1" = #cir.const_array<"Calling good()...\00" : !cir.array<!s8i x 18>> : !cir.array<!s8i x 18> {alignment = 1 : i64} loc(#loc52)
  cir.global "private" constant cir_private dsolocal @".str.2" = #cir.const_array<"Finished good()\00" : !cir.array<!s8i x 16>> : !cir.array<!s8i x 16> {alignment = 1 : i64} loc(#loc53)
  cir.global "private" constant cir_private dsolocal @".str.3" = #cir.const_array<"Calling bad()...\00" : !cir.array<!s8i x 17>> : !cir.array<!s8i x 17> {alignment = 1 : i64} loc(#loc54)
  cir.global "private" constant cir_private dsolocal @".str.4" = #cir.const_array<"Finished bad()\00" : !cir.array<!s8i x 15>> : !cir.array<!s8i x 15> {alignment = 1 : i64} loc(#loc55)
  cir.func @main(%arg0: !s32i loc(fused[#loc58, #loc59]), %arg1: !cir.ptr<!cir.ptr<!s8i>> loc(fused[#loc60, #loc61])) -> !s32i extra(#fn_attr) {
    %0 = cir.alloca !s32i, !cir.ptr<!s32i>, ["argc", init] {alignment = 4 : i64} loc(#loc216)
    %1 = cir.alloca !cir.ptr<!cir.ptr<!s8i>>, !cir.ptr<!cir.ptr<!cir.ptr<!s8i>>>, ["argv", init] {alignment = 8 : i64} loc(#loc217)
    %2 = cir.alloca !s32i, !cir.ptr<!s32i>, ["__retval"] {alignment = 4 : i64} loc(#loc57)
    cir.store %arg0, %0 : !s32i, !cir.ptr<!s32i> loc(#loc62)
    cir.store %arg1, %1 : !cir.ptr<!cir.ptr<!s8i>>, !cir.ptr<!cir.ptr<!cir.ptr<!s8i>>> loc(#loc62)
    %3 = cir.const #cir.ptr<null> : !cir.ptr<!s64i> loc(#loc63)
    %4 = cir.call @time(%3) : (!cir.ptr<!s64i>) -> !s64i extra(#fn_attr1) loc(#loc64)
    %5 = cir.cast(integral, %4 : !s64i), !u32i loc(#loc64)
    cir.call @srand(%5) : (!u32i) -> () extra(#fn_attr1) loc(#loc65)
    %6 = cir.get_global @".str.1" : !cir.ptr<!cir.array<!s8i x 18>> loc(#loc52)
    %7 = cir.cast(array_to_ptrdecay, %6 : !cir.ptr<!cir.array<!s8i x 18>>), !cir.ptr<!s8i> loc(#loc52)
    cir.call @printLine(%7) : (!cir.ptr<!s8i>) -> () loc(#loc66)
    %8 = cir.get_global @CWE190_Integer_Overflow__unsigned_int_fscanf_square_21_good : !cir.ptr<!cir.func<!void ()>> loc(#loc218)
    cir.call @CWE190_Integer_Overflow__unsigned_int_fscanf_square_21_good() : () -> () loc(#loc67)
    %9 = cir.get_global @".str.2" : !cir.ptr<!cir.array<!s8i x 16>> loc(#loc53)
    %10 = cir.cast(array_to_ptrdecay, %9 : !cir.ptr<!cir.array<!s8i x 16>>), !cir.ptr<!s8i> loc(#loc53)
    cir.call @printLine(%10) : (!cir.ptr<!s8i>) -> () loc(#loc69)
    %11 = cir.get_global @".str.3" : !cir.ptr<!cir.array<!s8i x 17>> loc(#loc54)
    %12 = cir.cast(array_to_ptrdecay, %11 : !cir.ptr<!cir.array<!s8i x 17>>), !cir.ptr<!s8i> loc(#loc54)
    cir.call @printLine(%12) : (!cir.ptr<!s8i>) -> () loc(#loc70)
    %13 = cir.get_global @CWE190_Integer_Overflow__unsigned_int_fscanf_square_21_bad : !cir.ptr<!cir.func<!void ()>> loc(#loc219)
    cir.call @CWE190_Integer_Overflow__unsigned_int_fscanf_square_21_bad() : () -> () loc(#loc71)
    %14 = cir.get_global @".str.4" : !cir.ptr<!cir.array<!s8i x 15>> loc(#loc55)
    %15 = cir.cast(array_to_ptrdecay, %14 : !cir.ptr<!cir.array<!s8i x 15>>), !cir.ptr<!s8i> loc(#loc55)
    cir.call @printLine(%15) : (!cir.ptr<!s8i>) -> () loc(#loc73)
    %16 = cir.const #cir.int<0> : !s32i loc(#loc74)
    cir.store %16, %2 : !s32i, !cir.ptr<!s32i> loc(#loc220)
    %17 = cir.load %2 : !cir.ptr<!s32i>, !s32i loc(#loc220)
    cir.return %17 : !s32i loc(#loc220)
  } loc(#loc215)
  cir.global "private" internal dsolocal @goodB2G1Static = #cir.int<0> : !s32i {alignment = 4 : i64} loc(#loc221)
  cir.global "private" constant cir_private dsolocal @".str.5" = #cir.const_array<"Benign, fixed string\00" : !cir.array<!s8i x 21>> : !cir.array<!s8i x 21> {alignment = 1 : i64} loc(#loc78)
  cir.func private @sqrt(!cir.double) -> !cir.double extra(#fn_attr1) loc(#loc79)
  cir.global "private" constant cir_private dsolocal @".str.6" = #cir.const_array<"data value is too large to perform arithmetic safely.\00" : !cir.array<!s8i x 54>> : !cir.array<!s8i x 54> {alignment = 1 : i64} loc(#loc80)
  cir.func internal private @goodB2G1Sink(%arg0: !u32i loc(fused[#loc83, #loc84])) extra(#fn_attr) {
    %0 = cir.alloca !u32i, !cir.ptr<!u32i>, ["data", init] {alignment = 4 : i64} loc(#loc223)
    cir.store %arg0, %0 : !u32i, !cir.ptr<!u32i> loc(#loc85)
    cir.scope {
      %1 = cir.get_global @goodB2G1Static : !cir.ptr<!s32i> loc(#loc221)
      %2 = cir.load %1 : !cir.ptr<!s32i>, !s32i loc(#loc88)
      %3 = cir.cast(int_to_bool, %2 : !s32i), !cir.bool loc(#loc88)
      cir.if %3 {
        %4 = cir.get_global @".str.5" : !cir.ptr<!cir.array<!s8i x 21>> loc(#loc78)
        %5 = cir.cast(array_to_ptrdecay, %4 : !cir.ptr<!cir.array<!s8i x 21>>), !cir.ptr<!s8i> loc(#loc78)
        cir.call @printLine(%5) : (!cir.ptr<!s8i>) -> () loc(#loc92)
      } else {
        cir.scope {
          %4 = cir.load %0 : !cir.ptr<!u32i>, !u32i loc(#loc95)
          %5 = cir.cast(integral, %4 : !u32i), !s64i loc(#loc95)
          %6 = cir.cast(integral, %5 : !s64i), !s32i loc(#loc95)
          %7 = cir.abs %6 poison : !s32i loc(#loc96)
          %8 = cir.cast(integral, %7 : !s32i), !s64i loc(#loc96)
          %9 = cir.get_global @sqrt : !cir.ptr<!cir.func<!cir.double (!cir.double)>> loc(#loc97)
          %10 = cir.const #cir.int<2147483647> : !s32i loc(#loc98)
          %11 = cir.cast(integral, %10 : !s32i), !u32i loc(#loc98)
          %12 = cir.const #cir.int<2> : !u32i loc(#loc98)
          %13 = cir.binop(mul, %11, %12) : !u32i loc(#loc98)
          %14 = cir.const #cir.int<1> : !u32i loc(#loc98)
          %15 = cir.binop(add, %13, %14) : !u32i loc(#loc98)
          %16 = cir.cast(int_to_float, %15 : !u32i), !cir.double loc(#loc98)
          %17 = cir.call @sqrt(%16) : (!cir.double) -> !cir.double extra(#fn_attr1) loc(#loc97)
          %18 = cir.cast(float_to_int, %17 : !cir.double), !s64i loc(#loc97)
          %19 = cir.cmp(lt, %8, %18) : !s64i, !cir.bool loc(#loc227)
          cir.if %19 {
            %20 = cir.alloca !u32i, !cir.ptr<!u32i>, ["result", init] {alignment = 4 : i64} loc(#loc229)
            %21 = cir.load %0 : !cir.ptr<!u32i>, !u32i loc(#loc105)
            %22 = cir.load %0 : !cir.ptr<!u32i>, !u32i loc(#loc104)
            %23 = cir.binop(mul, %21, %22) : !u32i loc(#loc230)
            cir.store %23, %20 : !u32i, !cir.ptr<!u32i> loc(#loc229)
            %24 = cir.load %20 : !cir.ptr<!u32i>, !u32i loc(#loc106)
            cir.call @printUnsignedLine(%24) : (!u32i) -> () loc(#loc107)
          } else {
            %20 = cir.get_global @".str.6" : !cir.ptr<!cir.array<!s8i x 54>> loc(#loc80)
            %21 = cir.cast(array_to_ptrdecay, %20 : !cir.ptr<!cir.array<!s8i x 54>>), !cir.ptr<!s8i> loc(#loc80)
            cir.call @printLine(%21) : (!cir.ptr<!s8i>) -> () loc(#loc108)
          } loc(#loc228)
        } loc(#loc226)
      } loc(#loc225)
    } loc(#loc224)
    cir.return loc(#loc82)
  } loc(#loc222)
  cir.func no_proto internal private @goodB2G1() extra(#fn_attr) {
    %0 = cir.alloca !u32i, !cir.ptr<!u32i>, ["data"] {alignment = 4 : i64} loc(#loc232)
    %1 = cir.const #cir.int<0> : !s32i loc(#loc113)
    %2 = cir.cast(integral, %1 : !s32i), !u32i loc(#loc113)
    cir.store %2, %0 : !u32i, !cir.ptr<!u32i> loc(#loc233)
    %3 = cir.get_global @__isoc99_fscanf : !cir.ptr<!cir.func<!s32i (!cir.ptr<!ty__IO_FILE>, !cir.ptr<!s8i>, ...)>> loc(#loc115)
    %4 = cir.get_global @stdin : !cir.ptr<!cir.ptr<!ty__IO_FILE>> loc(#loc194)
    %5 = cir.load %4 : !cir.ptr<!cir.ptr<!ty__IO_FILE>>, !cir.ptr<!ty__IO_FILE> loc(#loc116)
    %6 = cir.get_global @".str" : !cir.ptr<!cir.array<!s8i x 3>> loc(#loc117)
    %7 = cir.cast(array_to_ptrdecay, %6 : !cir.ptr<!cir.array<!s8i x 3>>), !cir.ptr<!s8i> loc(#loc117)
    %8 = cir.call @__isoc99_fscanf(%5, %7, %0) : (!cir.ptr<!ty__IO_FILE>, !cir.ptr<!s8i>, !cir.ptr<!u32i>) -> !s32i loc(#loc115)
    %9 = cir.const #cir.int<0> : !s32i loc(#loc118)
    %10 = cir.get_global @goodB2G1Static : !cir.ptr<!s32i> loc(#loc221)
    cir.store %9, %10 : !s32i, !cir.ptr<!s32i> loc(#loc234)
    %11 = cir.load %0 : !cir.ptr<!u32i>, !u32i loc(#loc120)
    cir.call @goodB2G1Sink(%11) : (!u32i) -> () loc(#loc121)
    cir.return loc(#loc110)
  } loc(#loc231)
  cir.global "private" internal dsolocal @goodB2G2Static = #cir.int<0> : !s32i {alignment = 4 : i64} loc(#loc235)
  cir.func internal private @goodB2G2Sink(%arg0: !u32i loc(fused[#loc126, #loc127])) extra(#fn_attr) {
    %0 = cir.alloca !u32i, !cir.ptr<!u32i>, ["data", init] {alignment = 4 : i64} loc(#loc237)
    cir.store %arg0, %0 : !u32i, !cir.ptr<!u32i> loc(#loc128)
    cir.scope {
      %1 = cir.get_global @goodB2G2Static : !cir.ptr<!s32i> loc(#loc235)
      %2 = cir.load %1 : !cir.ptr<!s32i>, !s32i loc(#loc131)
      %3 = cir.cast(int_to_bool, %2 : !s32i), !cir.bool loc(#loc131)
      cir.if %3 {
        cir.scope {
          %4 = cir.load %0 : !cir.ptr<!u32i>, !u32i loc(#loc135)
          %5 = cir.cast(integral, %4 : !u32i), !s64i loc(#loc135)
          %6 = cir.cast(integral, %5 : !s64i), !s32i loc(#loc135)
          %7 = cir.abs %6 poison : !s32i loc(#loc136)
          %8 = cir.cast(integral, %7 : !s32i), !s64i loc(#loc136)
          %9 = cir.get_global @sqrt : !cir.ptr<!cir.func<!cir.double (!cir.double)>> loc(#loc137)
          %10 = cir.const #cir.int<2147483647> : !s32i loc(#loc138)
          %11 = cir.cast(integral, %10 : !s32i), !u32i loc(#loc138)
          %12 = cir.const #cir.int<2> : !u32i loc(#loc138)
          %13 = cir.binop(mul, %11, %12) : !u32i loc(#loc138)
          %14 = cir.const #cir.int<1> : !u32i loc(#loc138)
          %15 = cir.binop(add, %13, %14) : !u32i loc(#loc138)
          %16 = cir.cast(int_to_float, %15 : !u32i), !cir.double loc(#loc138)
          %17 = cir.call @sqrt(%16) : (!cir.double) -> !cir.double extra(#fn_attr1) loc(#loc137)
          %18 = cir.cast(float_to_int, %17 : !cir.double), !s64i loc(#loc137)
          %19 = cir.cmp(lt, %8, %18) : !s64i, !cir.bool loc(#loc241)
          cir.if %19 {
            %20 = cir.alloca !u32i, !cir.ptr<!u32i>, ["result", init] {alignment = 4 : i64} loc(#loc243)
            %21 = cir.load %0 : !cir.ptr<!u32i>, !u32i loc(#loc145)
            %22 = cir.load %0 : !cir.ptr<!u32i>, !u32i loc(#loc144)
            %23 = cir.binop(mul, %21, %22) : !u32i loc(#loc244)
            cir.store %23, %20 : !u32i, !cir.ptr<!u32i> loc(#loc243)
            %24 = cir.load %20 : !cir.ptr<!u32i>, !u32i loc(#loc146)
            cir.call @printUnsignedLine(%24) : (!u32i) -> () loc(#loc147)
          } else {
            %20 = cir.get_global @".str.6" : !cir.ptr<!cir.array<!s8i x 54>> loc(#loc148)
            %21 = cir.cast(array_to_ptrdecay, %20 : !cir.ptr<!cir.array<!s8i x 54>>), !cir.ptr<!s8i> loc(#loc148)
            cir.call @printLine(%21) : (!cir.ptr<!s8i>) -> () loc(#loc149)
          } loc(#loc242)
        } loc(#loc240)
      } loc(#loc239)
    } loc(#loc238)
    cir.return loc(#loc125)
  } loc(#loc236)
  cir.func no_proto internal private @goodB2G2() extra(#fn_attr) {
    %0 = cir.alloca !u32i, !cir.ptr<!u32i>, ["data"] {alignment = 4 : i64} loc(#loc246)
    %1 = cir.const #cir.int<0> : !s32i loc(#loc154)
    %2 = cir.cast(integral, %1 : !s32i), !u32i loc(#loc154)
    cir.store %2, %0 : !u32i, !cir.ptr<!u32i> loc(#loc247)
    %3 = cir.get_global @__isoc99_fscanf : !cir.ptr<!cir.func<!s32i (!cir.ptr<!ty__IO_FILE>, !cir.ptr<!s8i>, ...)>> loc(#loc156)
    %4 = cir.get_global @stdin : !cir.ptr<!cir.ptr<!ty__IO_FILE>> loc(#loc194)
    %5 = cir.load %4 : !cir.ptr<!cir.ptr<!ty__IO_FILE>>, !cir.ptr<!ty__IO_FILE> loc(#loc157)
    %6 = cir.get_global @".str" : !cir.ptr<!cir.array<!s8i x 3>> loc(#loc158)
    %7 = cir.cast(array_to_ptrdecay, %6 : !cir.ptr<!cir.array<!s8i x 3>>), !cir.ptr<!s8i> loc(#loc158)
    %8 = cir.call @__isoc99_fscanf(%5, %7, %0) : (!cir.ptr<!ty__IO_FILE>, !cir.ptr<!s8i>, !cir.ptr<!u32i>) -> !s32i loc(#loc156)
    %9 = cir.const #cir.int<1> : !s32i loc(#loc159)
    %10 = cir.get_global @goodB2G2Static : !cir.ptr<!s32i> loc(#loc235)
    cir.store %9, %10 : !s32i, !cir.ptr<!s32i> loc(#loc248)
    %11 = cir.load %0 : !cir.ptr<!u32i>, !u32i loc(#loc161)
    cir.call @goodB2G2Sink(%11) : (!u32i) -> () loc(#loc162)
    cir.return loc(#loc151)
  } loc(#loc245)
  cir.global "private" internal dsolocal @goodG2BStatic = #cir.int<0> : !s32i {alignment = 4 : i64} loc(#loc249)
  cir.func internal private @goodG2BSink(%arg0: !u32i loc(fused[#loc167, #loc168])) extra(#fn_attr) {
    %0 = cir.alloca !u32i, !cir.ptr<!u32i>, ["data", init] {alignment = 4 : i64} loc(#loc251)
    cir.store %arg0, %0 : !u32i, !cir.ptr<!u32i> loc(#loc169)
    cir.scope {
      %1 = cir.get_global @goodG2BStatic : !cir.ptr<!s32i> loc(#loc249)
      %2 = cir.load %1 : !cir.ptr<!s32i>, !s32i loc(#loc172)
      %3 = cir.cast(int_to_bool, %2 : !s32i), !cir.bool loc(#loc172)
      cir.if %3 {
        cir.scope {
          %4 = cir.alloca !u32i, !cir.ptr<!u32i>, ["result", init] {alignment = 4 : i64} loc(#loc255)
          %5 = cir.load %0 : !cir.ptr<!u32i>, !u32i loc(#loc178)
          %6 = cir.load %0 : !cir.ptr<!u32i>, !u32i loc(#loc177)
          %7 = cir.binop(mul, %5, %6) : !u32i loc(#loc256)
          cir.store %7, %4 : !u32i, !cir.ptr<!u32i> loc(#loc255)
          %8 = cir.load %4 : !cir.ptr<!u32i>, !u32i loc(#loc179)
          cir.call @printUnsignedLine(%8) : (!u32i) -> () loc(#loc180)
        } loc(#loc254)
      } loc(#loc253)
    } loc(#loc252)
    cir.return loc(#loc166)
  } loc(#loc250)
  cir.func no_proto internal private @goodG2B() extra(#fn_attr) {
    %0 = cir.alloca !u32i, !cir.ptr<!u32i>, ["data"] {alignment = 4 : i64} loc(#loc258)
    %1 = cir.const #cir.int<0> : !s32i loc(#loc185)
    %2 = cir.cast(integral, %1 : !s32i), !u32i loc(#loc185)
    cir.store %2, %0 : !u32i, !cir.ptr<!u32i> loc(#loc259)
    %3 = cir.const #cir.int<2> : !s32i loc(#loc187)
    %4 = cir.cast(integral, %3 : !s32i), !u32i loc(#loc187)
    cir.store %4, %0 : !u32i, !cir.ptr<!u32i> loc(#loc260)
    %5 = cir.const #cir.int<1> : !s32i loc(#loc189)
    %6 = cir.get_global @goodG2BStatic : !cir.ptr<!s32i> loc(#loc249)
    cir.store %5, %6 : !s32i, !cir.ptr<!s32i> loc(#loc261)
    %7 = cir.load %0 : !cir.ptr<!u32i>, !u32i loc(#loc191)
    cir.call @goodG2BSink(%7) : (!u32i) -> () loc(#loc192)
    cir.return loc(#loc182)
  } loc(#loc257)
} loc(#loc)
#loc = loc("/home/ladisgin/git_proj/juliet-c/testcases/CWE190_Integer_Overflow/s05/CWE190_Integer_Overflow__unsigned_int_fscanf_square_21.c":0:0)
#loc1 = loc("/usr/include/stdio.h":463:1)
#loc2 = loc("/usr/include/stdio.h":465:33)
#loc3 = loc("/usr/include/stdio.h":149:1)
#loc4 = loc("/usr/include/stdio.h":149:14)
#loc5 = loc("CWE190_Integer_Overflow__unsigned_int_fscanf_square_21.c":44:20)
#loc6 = loc("CWE190_Integer_Overflow__unsigned_int_fscanf_square_21.c":25:1)
#loc7 = loc("CWE190_Integer_Overflow__unsigned_int_fscanf_square_21.c":25:24)
#loc8 = loc("../../../testcasesupport/std_testcase_io.h":34:1)
#loc9 = loc("../../../testcasesupport/std_testcase_io.h":34:47)
#loc10 = loc("CWE190_Integer_Overflow__unsigned_int_fscanf_square_21.c":27:1)
#loc11 = loc("CWE190_Integer_Overflow__unsigned_int_fscanf_square_21.c":37:1)
#loc14 = loc("CWE190_Integer_Overflow__unsigned_int_fscanf_square_21.c":28:1)
#loc15 = loc("CWE190_Integer_Overflow__unsigned_int_fscanf_square_21.c":29:5)
#loc16 = loc("CWE190_Integer_Overflow__unsigned_int_fscanf_square_21.c":36:5)
#loc17 = loc("CWE190_Integer_Overflow__unsigned_int_fscanf_square_21.c":29:8)
#loc18 = loc("CWE190_Integer_Overflow__unsigned_int_fscanf_square_21.c":30:5)
#loc19 = loc("CWE190_Integer_Overflow__unsigned_int_fscanf_square_21.c":31:9)
#loc20 = loc("CWE190_Integer_Overflow__unsigned_int_fscanf_square_21.c":35:9)
#loc21 = loc("CWE190_Integer_Overflow__unsigned_int_fscanf_square_21.c":33:13)
#loc22 = loc("CWE190_Integer_Overflow__unsigned_int_fscanf_square_21.c":33:42)
#loc23 = loc("CWE190_Integer_Overflow__unsigned_int_fscanf_square_21.c":33:35)
#loc24 = loc("CWE190_Integer_Overflow__unsigned_int_fscanf_square_21.c":34:31)
#loc25 = loc("CWE190_Integer_Overflow__unsigned_int_fscanf_square_21.c":34:13)
#loc26 = loc("CWE190_Integer_Overflow__unsigned_int_fscanf_square_21.c":39:1)
#loc27 = loc("CWE190_Integer_Overflow__unsigned_int_fscanf_square_21.c":47:1)
#loc28 = loc("CWE190_Integer_Overflow__unsigned_int_fscanf_square_21.c":41:5)
#loc29 = loc("CWE190_Integer_Overflow__unsigned_int_fscanf_square_21.c":41:18)
#loc30 = loc("CWE190_Integer_Overflow__unsigned_int_fscanf_square_21.c":42:12)
#loc31 = loc("CWE190_Integer_Overflow__unsigned_int_fscanf_square_21.c":42:5)
#loc32 = loc("CWE190_Integer_Overflow__unsigned_int_fscanf_square_21.c":44:5)
#loc33 = loc("CWE190_Integer_Overflow__unsigned_int_fscanf_square_21.c":44:13)
#loc34 = loc("CWE190_Integer_Overflow__unsigned_int_fscanf_square_21.c":45:17)
#loc35 = loc("CWE190_Integer_Overflow__unsigned_int_fscanf_square_21.c":45:5)
#loc36 = loc("CWE190_Integer_Overflow__unsigned_int_fscanf_square_21.c":46:13)
#loc37 = loc("CWE190_Integer_Overflow__unsigned_int_fscanf_square_21.c":46:5)
#loc38 = loc("CWE190_Integer_Overflow__unsigned_int_fscanf_square_21.c":142:1)
#loc39 = loc("CWE190_Integer_Overflow__unsigned_int_fscanf_square_21.c":147:1)
#loc40 = loc("CWE190_Integer_Overflow__unsigned_int_fscanf_square_21.c":144:5)
#loc41 = loc("CWE190_Integer_Overflow__unsigned_int_fscanf_square_21.c":144:14)
#loc42 = loc("CWE190_Integer_Overflow__unsigned_int_fscanf_square_21.c":145:5)
#loc43 = loc("CWE190_Integer_Overflow__unsigned_int_fscanf_square_21.c":145:14)
#loc44 = loc("CWE190_Integer_Overflow__unsigned_int_fscanf_square_21.c":146:5)
#loc45 = loc("CWE190_Integer_Overflow__unsigned_int_fscanf_square_21.c":146:13)
#loc46 = loc("/usr/include/stdlib.h":575:1)
#loc47 = loc("/usr/include/stdlib.h":575:41)
#loc48 = loc("/usr/include/time.h":76:1)
#loc49 = loc("/usr/include/time.h":76:38)
#loc50 = loc("../../../testcasesupport/std_testcase_io.h":14:1)
#loc51 = loc("../../../testcasesupport/std_testcase_io.h":14:33)
#loc52 = loc("CWE190_Integer_Overflow__unsigned_int_fscanf_square_21.c":163:15)
#loc53 = loc("CWE190_Integer_Overflow__unsigned_int_fscanf_square_21.c":165:15)
#loc54 = loc("CWE190_Integer_Overflow__unsigned_int_fscanf_square_21.c":168:15)
#loc55 = loc("CWE190_Integer_Overflow__unsigned_int_fscanf_square_21.c":170:15)
#loc56 = loc("CWE190_Integer_Overflow__unsigned_int_fscanf_square_21.c":158:1)
#loc57 = loc("CWE190_Integer_Overflow__unsigned_int_fscanf_square_21.c":173:1)
#loc62 = loc("CWE190_Integer_Overflow__unsigned_int_fscanf_square_21.c":159:1)
#loc63 = loc("CWE190_Integer_Overflow__unsigned_int_fscanf_square_21.c":161:27)
#loc64 = loc("CWE190_Integer_Overflow__unsigned_int_fscanf_square_21.c":161:22)
#loc65 = loc("CWE190_Integer_Overflow__unsigned_int_fscanf_square_21.c":161:5)
#loc66 = loc("CWE190_Integer_Overflow__unsigned_int_fscanf_square_21.c":163:5)
#loc67 = loc("CWE190_Integer_Overflow__unsigned_int_fscanf_square_21.c":164:5)
#loc68 = loc("CWE190_Integer_Overflow__unsigned_int_fscanf_square_21.c":164:65)
#loc69 = loc("CWE190_Integer_Overflow__unsigned_int_fscanf_square_21.c":165:5)
#loc70 = loc("CWE190_Integer_Overflow__unsigned_int_fscanf_square_21.c":168:5)
#loc71 = loc("CWE190_Integer_Overflow__unsigned_int_fscanf_square_21.c":169:5)
#loc72 = loc("CWE190_Integer_Overflow__unsigned_int_fscanf_square_21.c":169:64)
#loc73 = loc("CWE190_Integer_Overflow__unsigned_int_fscanf_square_21.c":170:5)
#loc74 = loc("CWE190_Integer_Overflow__unsigned_int_fscanf_square_21.c":172:12)
#loc75 = loc("CWE190_Integer_Overflow__unsigned_int_fscanf_square_21.c":172:5)
#loc76 = loc("CWE190_Integer_Overflow__unsigned_int_fscanf_square_21.c":54:1)
#loc77 = loc("CWE190_Integer_Overflow__unsigned_int_fscanf_square_21.c":54:29)
#loc78 = loc("CWE190_Integer_Overflow__unsigned_int_fscanf_square_21.c":64:19)
#loc79 = loc("/usr/include/bits/mathcalls.h":158:1)
#loc80 = loc("CWE190_Integer_Overflow__unsigned_int_fscanf_square_21.c":76:23)
#loc81 = loc("CWE190_Integer_Overflow__unsigned_int_fscanf_square_21.c":59:1)
#loc82 = loc("CWE190_Integer_Overflow__unsigned_int_fscanf_square_21.c":79:1)
#loc85 = loc("CWE190_Integer_Overflow__unsigned_int_fscanf_square_21.c":60:1)
#loc86 = loc("CWE190_Integer_Overflow__unsigned_int_fscanf_square_21.c":61:5)
#loc87 = loc("CWE190_Integer_Overflow__unsigned_int_fscanf_square_21.c":78:5)
#loc88 = loc("CWE190_Integer_Overflow__unsigned_int_fscanf_square_21.c":61:8)
#loc89 = loc("CWE190_Integer_Overflow__unsigned_int_fscanf_square_21.c":62:5)
#loc90 = loc("CWE190_Integer_Overflow__unsigned_int_fscanf_square_21.c":65:5)
#loc91 = loc("CWE190_Integer_Overflow__unsigned_int_fscanf_square_21.c":67:5)
#loc92 = loc("CWE190_Integer_Overflow__unsigned_int_fscanf_square_21.c":64:9)
#loc93 = loc("CWE190_Integer_Overflow__unsigned_int_fscanf_square_21.c":69:9)
#loc94 = loc("CWE190_Integer_Overflow__unsigned_int_fscanf_square_21.c":77:9)
#loc95 = loc("CWE190_Integer_Overflow__unsigned_int_fscanf_square_21.c":69:23)
#loc96 = loc("CWE190_Integer_Overflow__unsigned_int_fscanf_square_21.c":69:13)
#loc97 = loc("CWE190_Integer_Overflow__unsigned_int_fscanf_square_21.c":69:37)
#loc98 = loc("CWE190_Integer_Overflow__unsigned_int_fscanf_square_21.c":69:50)
#loc99 = loc("CWE190_Integer_Overflow__unsigned_int_fscanf_square_21.c":69:58)
#loc100 = loc("CWE190_Integer_Overflow__unsigned_int_fscanf_square_21.c":70:9)
#loc101 = loc("CWE190_Integer_Overflow__unsigned_int_fscanf_square_21.c":73:9)
#loc102 = loc("CWE190_Integer_Overflow__unsigned_int_fscanf_square_21.c":75:9)
#loc103 = loc("CWE190_Integer_Overflow__unsigned_int_fscanf_square_21.c":71:13)
#loc104 = loc("CWE190_Integer_Overflow__unsigned_int_fscanf_square_21.c":71:42)
#loc105 = loc("CWE190_Integer_Overflow__unsigned_int_fscanf_square_21.c":71:35)
#loc106 = loc("CWE190_Integer_Overflow__unsigned_int_fscanf_square_21.c":72:31)
#loc107 = loc("CWE190_Integer_Overflow__unsigned_int_fscanf_square_21.c":72:13)
#loc108 = loc("CWE190_Integer_Overflow__unsigned_int_fscanf_square_21.c":76:13)
#loc109 = loc("CWE190_Integer_Overflow__unsigned_int_fscanf_square_21.c":81:1)
#loc110 = loc("CWE190_Integer_Overflow__unsigned_int_fscanf_square_21.c":89:1)
#loc111 = loc("CWE190_Integer_Overflow__unsigned_int_fscanf_square_21.c":83:5)
#loc112 = loc("CWE190_Integer_Overflow__unsigned_int_fscanf_square_21.c":83:18)
#loc113 = loc("CWE190_Integer_Overflow__unsigned_int_fscanf_square_21.c":84:12)
#loc114 = loc("CWE190_Integer_Overflow__unsigned_int_fscanf_square_21.c":84:5)
#loc115 = loc("CWE190_Integer_Overflow__unsigned_int_fscanf_square_21.c":86:5)
#loc116 = loc("CWE190_Integer_Overflow__unsigned_int_fscanf_square_21.c":86:13)
#loc117 = loc("CWE190_Integer_Overflow__unsigned_int_fscanf_square_21.c":86:20)
#loc118 = loc("CWE190_Integer_Overflow__unsigned_int_fscanf_square_21.c":87:22)
#loc119 = loc("CWE190_Integer_Overflow__unsigned_int_fscanf_square_21.c":87:5)
#loc120 = loc("CWE190_Integer_Overflow__unsigned_int_fscanf_square_21.c":88:18)
#loc121 = loc("CWE190_Integer_Overflow__unsigned_int_fscanf_square_21.c":88:5)
#loc122 = loc("CWE190_Integer_Overflow__unsigned_int_fscanf_square_21.c":55:1)
#loc123 = loc("CWE190_Integer_Overflow__unsigned_int_fscanf_square_21.c":55:29)
#loc124 = loc("CWE190_Integer_Overflow__unsigned_int_fscanf_square_21.c":92:1)
#loc125 = loc("CWE190_Integer_Overflow__unsigned_int_fscanf_square_21.c":107:1)
#loc128 = loc("CWE190_Integer_Overflow__unsigned_int_fscanf_square_21.c":93:1)
#loc129 = loc("CWE190_Integer_Overflow__unsigned_int_fscanf_square_21.c":94:5)
#loc130 = loc("CWE190_Integer_Overflow__unsigned_int_fscanf_square_21.c":106:5)
#loc131 = loc("CWE190_Integer_Overflow__unsigned_int_fscanf_square_21.c":94:8)
#loc132 = loc("CWE190_Integer_Overflow__unsigned_int_fscanf_square_21.c":95:5)
#loc133 = loc("CWE190_Integer_Overflow__unsigned_int_fscanf_square_21.c":97:9)
#loc134 = loc("CWE190_Integer_Overflow__unsigned_int_fscanf_square_21.c":105:9)
#loc135 = loc("CWE190_Integer_Overflow__unsigned_int_fscanf_square_21.c":97:23)
#loc136 = loc("CWE190_Integer_Overflow__unsigned_int_fscanf_square_21.c":97:13)
#loc137 = loc("CWE190_Integer_Overflow__unsigned_int_fscanf_square_21.c":97:37)
#loc138 = loc("CWE190_Integer_Overflow__unsigned_int_fscanf_square_21.c":97:50)
#loc139 = loc("CWE190_Integer_Overflow__unsigned_int_fscanf_square_21.c":97:58)
#loc140 = loc("CWE190_Integer_Overflow__unsigned_int_fscanf_square_21.c":98:9)
#loc141 = loc("CWE190_Integer_Overflow__unsigned_int_fscanf_square_21.c":101:9)
#loc142 = loc("CWE190_Integer_Overflow__unsigned_int_fscanf_square_21.c":103:9)
#loc143 = loc("CWE190_Integer_Overflow__unsigned_int_fscanf_square_21.c":99:13)
#loc144 = loc("CWE190_Integer_Overflow__unsigned_int_fscanf_square_21.c":99:42)
#loc145 = loc("CWE190_Integer_Overflow__unsigned_int_fscanf_square_21.c":99:35)
#loc146 = loc("CWE190_Integer_Overflow__unsigned_int_fscanf_square_21.c":100:31)
#loc147 = loc("CWE190_Integer_Overflow__unsigned_int_fscanf_square_21.c":100:13)
#loc148 = loc("CWE190_Integer_Overflow__unsigned_int_fscanf_square_21.c":104:23)
#loc149 = loc("CWE190_Integer_Overflow__unsigned_int_fscanf_square_21.c":104:13)
#loc150 = loc("CWE190_Integer_Overflow__unsigned_int_fscanf_square_21.c":109:1)
#loc151 = loc("CWE190_Integer_Overflow__unsigned_int_fscanf_square_21.c":117:1)
#loc152 = loc("CWE190_Integer_Overflow__unsigned_int_fscanf_square_21.c":111:5)
#loc153 = loc("CWE190_Integer_Overflow__unsigned_int_fscanf_square_21.c":111:18)
#loc154 = loc("CWE190_Integer_Overflow__unsigned_int_fscanf_square_21.c":112:12)
#loc155 = loc("CWE190_Integer_Overflow__unsigned_int_fscanf_square_21.c":112:5)
#loc156 = loc("CWE190_Integer_Overflow__unsigned_int_fscanf_square_21.c":114:5)
#loc157 = loc("CWE190_Integer_Overflow__unsigned_int_fscanf_square_21.c":114:13)
#loc158 = loc("CWE190_Integer_Overflow__unsigned_int_fscanf_square_21.c":114:20)
#loc159 = loc("CWE190_Integer_Overflow__unsigned_int_fscanf_square_21.c":115:22)
#loc160 = loc("CWE190_Integer_Overflow__unsigned_int_fscanf_square_21.c":115:5)
#loc161 = loc("CWE190_Integer_Overflow__unsigned_int_fscanf_square_21.c":116:18)
#loc162 = loc("CWE190_Integer_Overflow__unsigned_int_fscanf_square_21.c":116:5)
#loc163 = loc("CWE190_Integer_Overflow__unsigned_int_fscanf_square_21.c":56:1)
#loc164 = loc("CWE190_Integer_Overflow__unsigned_int_fscanf_square_21.c":56:28)
#loc165 = loc("CWE190_Integer_Overflow__unsigned_int_fscanf_square_21.c":120:1)
#loc166 = loc("CWE190_Integer_Overflow__unsigned_int_fscanf_square_21.c":130:1)
#loc169 = loc("CWE190_Integer_Overflow__unsigned_int_fscanf_square_21.c":121:1)
#loc170 = loc("CWE190_Integer_Overflow__unsigned_int_fscanf_square_21.c":122:5)
#loc171 = loc("CWE190_Integer_Overflow__unsigned_int_fscanf_square_21.c":129:5)
#loc172 = loc("CWE190_Integer_Overflow__unsigned_int_fscanf_square_21.c":122:8)
#loc173 = loc("CWE190_Integer_Overflow__unsigned_int_fscanf_square_21.c":123:5)
#loc174 = loc("CWE190_Integer_Overflow__unsigned_int_fscanf_square_21.c":124:9)
#loc175 = loc("CWE190_Integer_Overflow__unsigned_int_fscanf_square_21.c":128:9)
#loc176 = loc("CWE190_Integer_Overflow__unsigned_int_fscanf_square_21.c":126:13)
#loc177 = loc("CWE190_Integer_Overflow__unsigned_int_fscanf_square_21.c":126:42)
#loc178 = loc("CWE190_Integer_Overflow__unsigned_int_fscanf_square_21.c":126:35)
#loc179 = loc("CWE190_Integer_Overflow__unsigned_int_fscanf_square_21.c":127:31)
#loc180 = loc("CWE190_Integer_Overflow__unsigned_int_fscanf_square_21.c":127:13)
#loc181 = loc("CWE190_Integer_Overflow__unsigned_int_fscanf_square_21.c":132:1)
#loc182 = loc("CWE190_Integer_Overflow__unsigned_int_fscanf_square_21.c":140:1)
#loc183 = loc("CWE190_Integer_Overflow__unsigned_int_fscanf_square_21.c":134:5)
#loc184 = loc("CWE190_Integer_Overflow__unsigned_int_fscanf_square_21.c":134:18)
#loc185 = loc("CWE190_Integer_Overflow__unsigned_int_fscanf_square_21.c":135:12)
#loc186 = loc("CWE190_Integer_Overflow__unsigned_int_fscanf_square_21.c":135:5)
#loc187 = loc("CWE190_Integer_Overflow__unsigned_int_fscanf_square_21.c":137:12)
#loc188 = loc("CWE190_Integer_Overflow__unsigned_int_fscanf_square_21.c":137:5)
#loc189 = loc("CWE190_Integer_Overflow__unsigned_int_fscanf_square_21.c":138:21)
#loc190 = loc("CWE190_Integer_Overflow__unsigned_int_fscanf_square_21.c":138:5)
#loc191 = loc("CWE190_Integer_Overflow__unsigned_int_fscanf_square_21.c":139:17)
#loc192 = loc("CWE190_Integer_Overflow__unsigned_int_fscanf_square_21.c":139:5)
#loc193 = loc(fused[#loc1, #loc2])
#loc194 = loc(fused[#loc3, #loc4])
#loc195 = loc(fused[#loc6, #loc7])
#loc196 = loc(fused[#loc8, #loc9])
#loc197 = loc(fused[#loc10, #loc11])
#loc199 = loc(fused[#loc15, #loc16])
#loc200 = loc(fused[#loc18, #loc16])
#loc201 = loc(fused[#loc19, #loc20])
#loc202 = loc(fused[#loc21, #loc22])
#loc203 = loc(fused[#loc23, #loc22])
#loc204 = loc(fused[#loc26, #loc27])
#loc205 = loc(fused[#loc28, #loc29])
#loc206 = loc(fused[#loc31, #loc30])
#loc207 = loc(fused[#loc35, #loc34])
#loc208 = loc(fused[#loc38, #loc39])
#loc209 = loc(fused[#loc40, #loc41])
#loc210 = loc(fused[#loc42, #loc43])
#loc211 = loc(fused[#loc44, #loc45])
#loc212 = loc(fused[#loc46, #loc47])
#loc213 = loc(fused[#loc48, #loc49])
#loc214 = loc(fused[#loc50, #loc51])
#loc215 = loc(fused[#loc56, #loc57])
#loc218 = loc(fused[#loc67, #loc68])
#loc219 = loc(fused[#loc71, #loc72])
#loc220 = loc(fused[#loc75, #loc74])
#loc221 = loc(fused[#loc76, #loc77])
#loc222 = loc(fused[#loc81, #loc82])
#loc224 = loc(fused[#loc86, #loc87])
#loc225 = loc(fused[#loc89, #loc90, #loc91, #loc87])
#loc226 = loc(fused[#loc93, #loc94])
#loc227 = loc(fused[#loc96, #loc99])
#loc228 = loc(fused[#loc100, #loc101, #loc102, #loc94])
#loc229 = loc(fused[#loc103, #loc104])
#loc230 = loc(fused[#loc105, #loc104])
#loc231 = loc(fused[#loc109, #loc110])
#loc232 = loc(fused[#loc111, #loc112])
#loc233 = loc(fused[#loc114, #loc113])
#loc234 = loc(fused[#loc119, #loc118])
#loc235 = loc(fused[#loc122, #loc123])
#loc236 = loc(fused[#loc124, #loc125])
#loc238 = loc(fused[#loc129, #loc130])
#loc239 = loc(fused[#loc132, #loc130])
#loc240 = loc(fused[#loc133, #loc134])
#loc241 = loc(fused[#loc136, #loc139])
#loc242 = loc(fused[#loc140, #loc141, #loc142, #loc134])
#loc243 = loc(fused[#loc143, #loc144])
#loc244 = loc(fused[#loc145, #loc144])
#loc245 = loc(fused[#loc150, #loc151])
#loc246 = loc(fused[#loc152, #loc153])
#loc247 = loc(fused[#loc155, #loc154])
#loc248 = loc(fused[#loc160, #loc159])
#loc249 = loc(fused[#loc163, #loc164])
#loc250 = loc(fused[#loc165, #loc166])
#loc252 = loc(fused[#loc170, #loc171])
#loc253 = loc(fused[#loc173, #loc171])
#loc254 = loc(fused[#loc174, #loc175])
#loc255 = loc(fused[#loc176, #loc177])
#loc256 = loc(fused[#loc178, #loc177])
#loc257 = loc(fused[#loc181, #loc182])
#loc258 = loc(fused[#loc183, #loc184])
#loc259 = loc(fused[#loc186, #loc185])
#loc260 = loc(fused[#loc188, #loc187])
#loc261 = loc(fused[#loc190, #loc189])
