!s32i = !cir.int<s, 32>
!s64i = !cir.int<s, 64>
!s8i = !cir.int<s, 8>
!void = !cir.void
#fn_attr = #cir<extra({inline = #cir.inline<no>, nothrow = #cir.nothrow, optnone = #cir.optnone})>
module @"/home/ladisgin/git_proj/test_projects/juliet-c/testcases/CWE190_Integer_Overflow/s02/CWE190_Integer_Overflow__int64_t_max_add_15.c" attributes {cir.lang = #cir.lang<c>, cir.sob = #cir.signed_overflow_behavior<undefined>, cir.triple = "x86_64-unknown-linux-gnu", dlti.dl_spec = #dlti.dl_spec<#dlti.dl_entry<!llvm.ptr<272>, dense<64> : vector<4xi64>>, #dlti.dl_entry<!llvm.ptr<271>, dense<32> : vector<4xi64>>, #dlti.dl_entry<!llvm.ptr<270>, dense<32> : vector<4xi64>>, #dlti.dl_entry<i8, dense<8> : vector<2xi64>>, #dlti.dl_entry<i16, dense<16> : vector<2xi64>>, #dlti.dl_entry<i1, dense<8> : vector<2xi64>>, #dlti.dl_entry<!llvm.ptr, dense<64> : vector<4xi64>>, #dlti.dl_entry<i32, dense<32> : vector<2xi64>>, #dlti.dl_entry<f16, dense<16> : vector<2xi64>>, #dlti.dl_entry<f64, dense<64> : vector<2xi64>>, #dlti.dl_entry<f80, dense<128> : vector<2xi64>>, #dlti.dl_entry<f128, dense<128> : vector<2xi64>>, #dlti.dl_entry<i128, dense<128> : vector<2xi64>>, #dlti.dl_entry<i64, dense<64> : vector<2xi64>>, #dlti.dl_entry<"dlti.endianness", "little">, #dlti.dl_entry<"dlti.stack_alignment", 128 : i64>>, llvm.data_layout = "e-m:e-p270:32:32-p271:32:32-p272:64:64-i64:64-i128:128-f80:128-n8:16:32:64-S128"} {
  cir.func private  @printLine(!cir.ptr<!s8i>) loc(#loc176)
  cir.global "private"  constant internal dsolocal @".str" = #cir.const_array<"Benign, fixed string\00" : !cir.array<!s8i x 21>> : !cir.array<!s8i x 21> {alignment = 1 : i64} loc(#loc3)
  cir.func private  @printLongLongLine(!s64i) loc(#loc177)
  cir.func no_proto  @CWE190_Integer_Overflow__int64_t_max_add_15_bad() extra(#fn_attr) {
    %0 = cir.alloca !s64i, !cir.ptr<!s64i>, ["data"] {alignment = 8 : i64} loc(#loc179)
    %1 = cir.const #cir.int<0> : !s64i loc(#loc10)
    cir.store %1, %0 : !s64i, !cir.ptr<!s64i> loc(#loc180)
    cir.scope {
      %2 = cir.const #cir.int<6> : !s32i loc(#loc14)
      cir.switch (%2 : !s32i) [
      case (equal, 6) {
        %3 = cir.const #cir.int<9223372036854775807> : !s64i loc(#loc15)
        cir.store %3, %0 : !s64i, !cir.ptr<!s64i> loc(#loc182)
        cir.break loc(#loc17)
      },
      case (default) {
        %3 = cir.get_global @".str" : !cir.ptr<!cir.array<!s8i x 21>> loc(#loc3)
        %4 = cir.cast(array_to_ptrdecay, %3 : !cir.ptr<!cir.array<!s8i x 21>>), !cir.ptr<!s8i> loc(#loc3)
        cir.call @printLine(%4) : (!cir.ptr<!s8i>) -> () loc(#loc18)
        cir.break loc(#loc19)
      }
      ] loc(#loc12)
    } loc(#loc181)
    cir.scope {
      %2 = cir.const #cir.int<7> : !s32i loc(#loc22)
      cir.switch (%2 : !s32i) [
      case (equal, 7) {
        cir.scope {
          %3 = cir.alloca !s64i, !cir.ptr<!s64i>, ["result", init] {alignment = 8 : i64} loc(#loc185)
          %4 = cir.load %0 : !cir.ptr<!s64i>, !s64i loc(#loc27)
          %5 = cir.const #cir.int<1> : !s32i loc(#loc26)
          %6 = cir.cast(integral, %5 : !s32i), !s64i loc(#loc26)
          %7 = cir.binop(add, %4, %6) nsw : !s64i loc(#loc27)
          cir.store %7, %3 : !s64i, !cir.ptr<!s64i> loc(#loc185)
          %8 = cir.load %3 : !cir.ptr<!s64i>, !s64i loc(#loc28)
          cir.call @printLongLongLine(%8) : (!s64i) -> () loc(#loc29)
        } loc(#loc184)
        cir.break loc(#loc30)
      },
      case (default) {
        %3 = cir.get_global @".str" : !cir.ptr<!cir.array<!s8i x 21>> loc(#loc31)
        %4 = cir.cast(array_to_ptrdecay, %3 : !cir.ptr<!cir.array<!s8i x 21>>), !cir.ptr<!s8i> loc(#loc31)
        cir.call @printLine(%4) : (!cir.ptr<!s8i>) -> () loc(#loc32)
        cir.break loc(#loc33)
      }
      ] loc(#loc20)
    } loc(#loc183)
    cir.return loc(#loc7)
  } loc(#loc178)
  cir.func no_proto  @CWE190_Integer_Overflow__int64_t_max_add_15_good() extra(#fn_attr) {
    %0 = cir.get_global @goodB2G1 : !cir.ptr<!cir.func<!void ()>> loc(#loc187)
    cir.call %0() : (!cir.ptr<!cir.func<!void ()>>) -> () loc(#loc36)
    %1 = cir.get_global @goodB2G2 : !cir.ptr<!cir.func<!void ()>> loc(#loc188)
    cir.call %1() : (!cir.ptr<!cir.func<!void ()>>) -> () loc(#loc38)
    %2 = cir.get_global @goodG2B1 : !cir.ptr<!cir.func<!void ()>> loc(#loc189)
    cir.call %2() : (!cir.ptr<!cir.func<!void ()>>) -> () loc(#loc40)
    %3 = cir.get_global @goodG2B2 : !cir.ptr<!cir.func<!void ()>> loc(#loc190)
    cir.call %3() : (!cir.ptr<!cir.func<!void ()>>) -> () loc(#loc42)
    cir.return loc(#loc35)
  } loc(#loc186)
  cir.global "private"  constant internal dsolocal @".str1" = #cir.const_array<"data value is too large to perform arithmetic safely.\00" : !cir.array<!s8i x 54>> : !cir.array<!s8i x 54> {alignment = 1 : i64} loc(#loc44)
  cir.func no_proto internal private  @goodB2G1() extra(#fn_attr) {
    %0 = cir.alloca !s64i, !cir.ptr<!s64i>, ["data"] {alignment = 8 : i64} loc(#loc192)
    %1 = cir.const #cir.int<0> : !s64i loc(#loc49)
    cir.store %1, %0 : !s64i, !cir.ptr<!s64i> loc(#loc193)
    cir.scope {
      %2 = cir.const #cir.int<6> : !s32i loc(#loc53)
      cir.switch (%2 : !s32i) [
      case (equal, 6) {
        %3 = cir.const #cir.int<9223372036854775807> : !s64i loc(#loc54)
        cir.store %3, %0 : !s64i, !cir.ptr<!s64i> loc(#loc195)
        cir.break loc(#loc56)
      },
      case (default) {
        %3 = cir.get_global @".str" : !cir.ptr<!cir.array<!s8i x 21>> loc(#loc57)
        %4 = cir.cast(array_to_ptrdecay, %3 : !cir.ptr<!cir.array<!s8i x 21>>), !cir.ptr<!s8i> loc(#loc57)
        cir.call @printLine(%4) : (!cir.ptr<!s8i>) -> () loc(#loc58)
        cir.break loc(#loc59)
      }
      ] loc(#loc51)
    } loc(#loc194)
    cir.scope {
      %2 = cir.const #cir.int<8> : !s32i loc(#loc62)
      cir.switch (%2 : !s32i) [
      case (equal, 7) {
        %3 = cir.get_global @".str" : !cir.ptr<!cir.array<!s8i x 21>> loc(#loc63)
        %4 = cir.cast(array_to_ptrdecay, %3 : !cir.ptr<!cir.array<!s8i x 21>>), !cir.ptr<!s8i> loc(#loc63)
        cir.call @printLine(%4) : (!cir.ptr<!s8i>) -> () loc(#loc64)
        cir.break loc(#loc65)
      },
      case (default) {
        cir.scope {
          %3 = cir.load %0 : !cir.ptr<!s64i>, !s64i loc(#loc68)
          %4 = cir.const #cir.int<9223372036854775807> : !s64i loc(#loc69)
          %5 = cir.cmp(lt, %3, %4) : !s64i, !s32i loc(#loc198)
          %6 = cir.cast(int_to_bool, %5 : !s32i), !cir.bool loc(#loc70)
          cir.if %6 {
            %7 = cir.alloca !s64i, !cir.ptr<!s64i>, ["result", init] {alignment = 8 : i64} loc(#loc200)
            %8 = cir.load %0 : !cir.ptr<!s64i>, !s64i loc(#loc76)
            %9 = cir.const #cir.int<1> : !s32i loc(#loc75)
            %10 = cir.cast(integral, %9 : !s32i), !s64i loc(#loc75)
            %11 = cir.binop(add, %8, %10) nsw : !s64i loc(#loc76)
            cir.store %11, %7 : !s64i, !cir.ptr<!s64i> loc(#loc200)
            %12 = cir.load %7 : !cir.ptr<!s64i>, !s64i loc(#loc77)
            cir.call @printLongLongLine(%12) : (!s64i) -> () loc(#loc78)
          } else {
            %7 = cir.get_global @".str1" : !cir.ptr<!cir.array<!s8i x 54>> loc(#loc44)
            %8 = cir.cast(array_to_ptrdecay, %7 : !cir.ptr<!cir.array<!s8i x 54>>), !cir.ptr<!s8i> loc(#loc44)
            cir.call @printLine(%8) : (!cir.ptr<!s8i>) -> () loc(#loc79)
          } loc(#loc199)
        } loc(#loc197)
        cir.break loc(#loc80)
      }
      ] loc(#loc60)
    } loc(#loc196)
    cir.return loc(#loc46)
  } loc(#loc191)
  cir.func no_proto internal private  @goodB2G2() extra(#fn_attr) {
    %0 = cir.alloca !s64i, !cir.ptr<!s64i>, ["data"] {alignment = 8 : i64} loc(#loc202)
    %1 = cir.const #cir.int<0> : !s64i loc(#loc85)
    cir.store %1, %0 : !s64i, !cir.ptr<!s64i> loc(#loc203)
    cir.scope {
      %2 = cir.const #cir.int<6> : !s32i loc(#loc89)
      cir.switch (%2 : !s32i) [
      case (equal, 6) {
        %3 = cir.const #cir.int<9223372036854775807> : !s64i loc(#loc90)
        cir.store %3, %0 : !s64i, !cir.ptr<!s64i> loc(#loc205)
        cir.break loc(#loc92)
      },
      case (default) {
        %3 = cir.get_global @".str" : !cir.ptr<!cir.array<!s8i x 21>> loc(#loc93)
        %4 = cir.cast(array_to_ptrdecay, %3 : !cir.ptr<!cir.array<!s8i x 21>>), !cir.ptr<!s8i> loc(#loc93)
        cir.call @printLine(%4) : (!cir.ptr<!s8i>) -> () loc(#loc94)
        cir.break loc(#loc95)
      }
      ] loc(#loc87)
    } loc(#loc204)
    cir.scope {
      %2 = cir.const #cir.int<7> : !s32i loc(#loc98)
      cir.switch (%2 : !s32i) [
      case (equal, 7) {
        cir.scope {
          %3 = cir.load %0 : !cir.ptr<!s64i>, !s64i loc(#loc101)
          %4 = cir.const #cir.int<9223372036854775807> : !s64i loc(#loc102)
          %5 = cir.cmp(lt, %3, %4) : !s64i, !s32i loc(#loc208)
          %6 = cir.cast(int_to_bool, %5 : !s32i), !cir.bool loc(#loc103)
          cir.if %6 {
            %7 = cir.alloca !s64i, !cir.ptr<!s64i>, ["result", init] {alignment = 8 : i64} loc(#loc210)
            %8 = cir.load %0 : !cir.ptr<!s64i>, !s64i loc(#loc109)
            %9 = cir.const #cir.int<1> : !s32i loc(#loc108)
            %10 = cir.cast(integral, %9 : !s32i), !s64i loc(#loc108)
            %11 = cir.binop(add, %8, %10) nsw : !s64i loc(#loc109)
            cir.store %11, %7 : !s64i, !cir.ptr<!s64i> loc(#loc210)
            %12 = cir.load %7 : !cir.ptr<!s64i>, !s64i loc(#loc110)
            cir.call @printLongLongLine(%12) : (!s64i) -> () loc(#loc111)
          } else {
            %7 = cir.get_global @".str1" : !cir.ptr<!cir.array<!s8i x 54>> loc(#loc112)
            %8 = cir.cast(array_to_ptrdecay, %7 : !cir.ptr<!cir.array<!s8i x 54>>), !cir.ptr<!s8i> loc(#loc112)
            cir.call @printLine(%8) : (!cir.ptr<!s8i>) -> () loc(#loc113)
          } loc(#loc209)
        } loc(#loc207)
        cir.break loc(#loc114)
      },
      case (default) {
        %3 = cir.get_global @".str" : !cir.ptr<!cir.array<!s8i x 21>> loc(#loc115)
        %4 = cir.cast(array_to_ptrdecay, %3 : !cir.ptr<!cir.array<!s8i x 21>>), !cir.ptr<!s8i> loc(#loc115)
        cir.call @printLine(%4) : (!cir.ptr<!s8i>) -> () loc(#loc116)
        cir.break loc(#loc117)
      }
      ] loc(#loc96)
    } loc(#loc206)
    cir.return loc(#loc82)
  } loc(#loc201)
  cir.func no_proto internal private  @goodG2B1() extra(#fn_attr) {
    %0 = cir.alloca !s64i, !cir.ptr<!s64i>, ["data"] {alignment = 8 : i64} loc(#loc212)
    %1 = cir.const #cir.int<0> : !s64i loc(#loc122)
    cir.store %1, %0 : !s64i, !cir.ptr<!s64i> loc(#loc213)
    cir.scope {
      %2 = cir.const #cir.int<5> : !s32i loc(#loc126)
      cir.switch (%2 : !s32i) [
      case (equal, 6) {
        %3 = cir.get_global @".str" : !cir.ptr<!cir.array<!s8i x 21>> loc(#loc127)
        %4 = cir.cast(array_to_ptrdecay, %3 : !cir.ptr<!cir.array<!s8i x 21>>), !cir.ptr<!s8i> loc(#loc127)
        cir.call @printLine(%4) : (!cir.ptr<!s8i>) -> () loc(#loc128)
        cir.break loc(#loc129)
      },
      case (default) {
        %3 = cir.const #cir.int<2> : !s32i loc(#loc130)
        %4 = cir.cast(integral, %3 : !s32i), !s64i loc(#loc130)
        cir.store %4, %0 : !s64i, !cir.ptr<!s64i> loc(#loc215)
        cir.break loc(#loc132)
      }
      ] loc(#loc124)
    } loc(#loc214)
    cir.scope {
      %2 = cir.const #cir.int<7> : !s32i loc(#loc135)
      cir.switch (%2 : !s32i) [
      case (equal, 7) {
        cir.scope {
          %3 = cir.alloca !s64i, !cir.ptr<!s64i>, ["result", init] {alignment = 8 : i64} loc(#loc218)
          %4 = cir.load %0 : !cir.ptr<!s64i>, !s64i loc(#loc140)
          %5 = cir.const #cir.int<1> : !s32i loc(#loc139)
          %6 = cir.cast(integral, %5 : !s32i), !s64i loc(#loc139)
          %7 = cir.binop(add, %4, %6) nsw : !s64i loc(#loc140)
          cir.store %7, %3 : !s64i, !cir.ptr<!s64i> loc(#loc218)
          %8 = cir.load %3 : !cir.ptr<!s64i>, !s64i loc(#loc141)
          cir.call @printLongLongLine(%8) : (!s64i) -> () loc(#loc142)
        } loc(#loc217)
        cir.break loc(#loc143)
      },
      case (default) {
        %3 = cir.get_global @".str" : !cir.ptr<!cir.array<!s8i x 21>> loc(#loc144)
        %4 = cir.cast(array_to_ptrdecay, %3 : !cir.ptr<!cir.array<!s8i x 21>>), !cir.ptr<!s8i> loc(#loc144)
        cir.call @printLine(%4) : (!cir.ptr<!s8i>) -> () loc(#loc145)
        cir.break loc(#loc146)
      }
      ] loc(#loc133)
    } loc(#loc216)
    cir.return loc(#loc119)
  } loc(#loc211)
  cir.func no_proto internal private  @goodG2B2() extra(#fn_attr) {
    %0 = cir.alloca !s64i, !cir.ptr<!s64i>, ["data"] {alignment = 8 : i64} loc(#loc220)
    %1 = cir.const #cir.int<0> : !s64i loc(#loc151)
    cir.store %1, %0 : !s64i, !cir.ptr<!s64i> loc(#loc221)
    cir.scope {
      %2 = cir.const #cir.int<6> : !s32i loc(#loc155)
      cir.switch (%2 : !s32i) [
      case (equal, 6) {
        %3 = cir.const #cir.int<2> : !s32i loc(#loc156)
        %4 = cir.cast(integral, %3 : !s32i), !s64i loc(#loc156)
        cir.store %4, %0 : !s64i, !cir.ptr<!s64i> loc(#loc223)
        cir.break loc(#loc158)
      },
      case (default) {
        %3 = cir.get_global @".str" : !cir.ptr<!cir.array<!s8i x 21>> loc(#loc159)
        %4 = cir.cast(array_to_ptrdecay, %3 : !cir.ptr<!cir.array<!s8i x 21>>), !cir.ptr<!s8i> loc(#loc159)
        cir.call @printLine(%4) : (!cir.ptr<!s8i>) -> () loc(#loc160)
        cir.break loc(#loc161)
      }
      ] loc(#loc153)
    } loc(#loc222)
    cir.scope {
      %2 = cir.const #cir.int<7> : !s32i loc(#loc164)
      cir.switch (%2 : !s32i) [
      case (equal, 7) {
        cir.scope {
          %3 = cir.alloca !s64i, !cir.ptr<!s64i>, ["result", init] {alignment = 8 : i64} loc(#loc226)
          %4 = cir.load %0 : !cir.ptr<!s64i>, !s64i loc(#loc169)
          %5 = cir.const #cir.int<1> : !s32i loc(#loc168)
          %6 = cir.cast(integral, %5 : !s32i), !s64i loc(#loc168)
          %7 = cir.binop(add, %4, %6) nsw : !s64i loc(#loc169)
          cir.store %7, %3 : !s64i, !cir.ptr<!s64i> loc(#loc226)
          %8 = cir.load %3 : !cir.ptr<!s64i>, !s64i loc(#loc170)
          cir.call @printLongLongLine(%8) : (!s64i) -> () loc(#loc171)
        } loc(#loc225)
        cir.break loc(#loc172)
      },
      case (default) {
        %3 = cir.get_global @".str" : !cir.ptr<!cir.array<!s8i x 21>> loc(#loc173)
        %4 = cir.cast(array_to_ptrdecay, %3 : !cir.ptr<!cir.array<!s8i x 21>>), !cir.ptr<!s8i> loc(#loc173)
        cir.call @printLine(%4) : (!cir.ptr<!s8i>) -> () loc(#loc174)
        cir.break loc(#loc175)
      }
      ] loc(#loc162)
    } loc(#loc224)
    cir.return loc(#loc148)
  } loc(#loc219)
} loc(#loc)
#loc = loc("/home/ladisgin/git_proj/test_projects/juliet-c/testcases/CWE190_Integer_Overflow/s02/CWE190_Integer_Overflow__int64_t_max_add_15.c":0:0)
#loc1 = loc("../../../testcasesupport/std_testcase_io.h":14:1)
#loc2 = loc("../../../testcasesupport/std_testcase_io.h":14:33)
#loc3 = loc("CWE190_Integer_Overflow__int64_t_max_add_15.c":34:19)
#loc4 = loc("../../../testcasesupport/std_testcase_io.h":26:1)
#loc5 = loc("../../../testcasesupport/std_testcase_io.h":26:49)
#loc6 = loc("CWE190_Integer_Overflow__int64_t_max_add_15.c":22:1)
#loc7 = loc("CWE190_Integer_Overflow__int64_t_max_add_15.c":51:1)
#loc8 = loc("CWE190_Integer_Overflow__int64_t_max_add_15.c":24:5)
#loc9 = loc("CWE190_Integer_Overflow__int64_t_max_add_15.c":24:13)
#loc10 = loc("CWE190_Integer_Overflow__int64_t_max_add_15.c":25:12)
#loc11 = loc("CWE190_Integer_Overflow__int64_t_max_add_15.c":25:5)
#loc12 = loc("CWE190_Integer_Overflow__int64_t_max_add_15.c":26:5)
#loc13 = loc("CWE190_Integer_Overflow__int64_t_max_add_15.c":36:5)
#loc14 = loc("CWE190_Integer_Overflow__int64_t_max_add_15.c":26:12)
#loc15 = loc("CWE190_Integer_Overflow__int64_t_max_add_15.c":30:16)
#loc16 = loc("CWE190_Integer_Overflow__int64_t_max_add_15.c":30:9)
#loc17 = loc("CWE190_Integer_Overflow__int64_t_max_add_15.c":31:9)
#loc18 = loc("CWE190_Integer_Overflow__int64_t_max_add_15.c":34:9)
#loc19 = loc("CWE190_Integer_Overflow__int64_t_max_add_15.c":35:9)
#loc20 = loc("CWE190_Integer_Overflow__int64_t_max_add_15.c":37:5)
#loc21 = loc("CWE190_Integer_Overflow__int64_t_max_add_15.c":50:5)
#loc22 = loc("CWE190_Integer_Overflow__int64_t_max_add_15.c":37:12)
#loc23 = loc("CWE190_Integer_Overflow__int64_t_max_add_15.c":40:5)
#loc24 = loc("CWE190_Integer_Overflow__int64_t_max_add_15.c":44:5)
#loc25 = loc("CWE190_Integer_Overflow__int64_t_max_add_15.c":42:9)
#loc26 = loc("CWE190_Integer_Overflow__int64_t_max_add_15.c":42:33)
#loc27 = loc("CWE190_Integer_Overflow__int64_t_max_add_15.c":42:26)
#loc28 = loc("CWE190_Integer_Overflow__int64_t_max_add_15.c":43:27)
#loc29 = loc("CWE190_Integer_Overflow__int64_t_max_add_15.c":43:9)
#loc30 = loc("CWE190_Integer_Overflow__int64_t_max_add_15.c":45:5)
#loc31 = loc("CWE190_Integer_Overflow__int64_t_max_add_15.c":48:19)
#loc32 = loc("CWE190_Integer_Overflow__int64_t_max_add_15.c":48:9)
#loc33 = loc("CWE190_Integer_Overflow__int64_t_max_add_15.c":49:9)
#loc34 = loc("CWE190_Integer_Overflow__int64_t_max_add_15.c":195:1)
#loc35 = loc("CWE190_Integer_Overflow__int64_t_max_add_15.c":201:1)
#loc36 = loc("CWE190_Integer_Overflow__int64_t_max_add_15.c":197:5)
#loc37 = loc("CWE190_Integer_Overflow__int64_t_max_add_15.c":197:14)
#loc38 = loc("CWE190_Integer_Overflow__int64_t_max_add_15.c":198:5)
#loc39 = loc("CWE190_Integer_Overflow__int64_t_max_add_15.c":198:14)
#loc40 = loc("CWE190_Integer_Overflow__int64_t_max_add_15.c":199:5)
#loc41 = loc("CWE190_Integer_Overflow__int64_t_max_add_15.c":199:14)
#loc42 = loc("CWE190_Integer_Overflow__int64_t_max_add_15.c":200:5)
#loc43 = loc("CWE190_Integer_Overflow__int64_t_max_add_15.c":200:14)
#loc44 = loc("CWE190_Integer_Overflow__int64_t_max_add_15.c":88:23)
#loc45 = loc("CWE190_Integer_Overflow__int64_t_max_add_15.c":58:1)
#loc46 = loc("CWE190_Integer_Overflow__int64_t_max_add_15.c":92:1)
#loc47 = loc("CWE190_Integer_Overflow__int64_t_max_add_15.c":60:5)
#loc48 = loc("CWE190_Integer_Overflow__int64_t_max_add_15.c":60:13)
#loc49 = loc("CWE190_Integer_Overflow__int64_t_max_add_15.c":61:12)
#loc50 = loc("CWE190_Integer_Overflow__int64_t_max_add_15.c":61:5)
#loc51 = loc("CWE190_Integer_Overflow__int64_t_max_add_15.c":62:5)
#loc52 = loc("CWE190_Integer_Overflow__int64_t_max_add_15.c":72:5)
#loc53 = loc("CWE190_Integer_Overflow__int64_t_max_add_15.c":62:12)
#loc54 = loc("CWE190_Integer_Overflow__int64_t_max_add_15.c":66:16)
#loc55 = loc("CWE190_Integer_Overflow__int64_t_max_add_15.c":66:9)
#loc56 = loc("CWE190_Integer_Overflow__int64_t_max_add_15.c":67:9)
#loc57 = loc("CWE190_Integer_Overflow__int64_t_max_add_15.c":70:19)
#loc58 = loc("CWE190_Integer_Overflow__int64_t_max_add_15.c":70:9)
#loc59 = loc("CWE190_Integer_Overflow__int64_t_max_add_15.c":71:9)
#loc60 = loc("CWE190_Integer_Overflow__int64_t_max_add_15.c":73:5)
#loc61 = loc("CWE190_Integer_Overflow__int64_t_max_add_15.c":91:5)
#loc62 = loc("CWE190_Integer_Overflow__int64_t_max_add_15.c":73:12)
#loc63 = loc("CWE190_Integer_Overflow__int64_t_max_add_15.c":77:19)
#loc64 = loc("CWE190_Integer_Overflow__int64_t_max_add_15.c":77:9)
#loc65 = loc("CWE190_Integer_Overflow__int64_t_max_add_15.c":78:9)
#loc66 = loc("CWE190_Integer_Overflow__int64_t_max_add_15.c":81:9)
#loc67 = loc("CWE190_Integer_Overflow__int64_t_max_add_15.c":89:9)
#loc68 = loc("CWE190_Integer_Overflow__int64_t_max_add_15.c":81:13)
#loc69 = loc("CWE190_Integer_Overflow__int64_t_max_add_15.c":81:20)
#loc70 = loc("CWE190_Integer_Overflow__int64_t_max_add_15.c":81:18)
#loc71 = loc("CWE190_Integer_Overflow__int64_t_max_add_15.c":82:9)
#loc72 = loc("CWE190_Integer_Overflow__int64_t_max_add_15.c":85:9)
#loc73 = loc("CWE190_Integer_Overflow__int64_t_max_add_15.c":87:9)
#loc74 = loc("CWE190_Integer_Overflow__int64_t_max_add_15.c":83:13)
#loc75 = loc("CWE190_Integer_Overflow__int64_t_max_add_15.c":83:37)
#loc76 = loc("CWE190_Integer_Overflow__int64_t_max_add_15.c":83:30)
#loc77 = loc("CWE190_Integer_Overflow__int64_t_max_add_15.c":84:31)
#loc78 = loc("CWE190_Integer_Overflow__int64_t_max_add_15.c":84:13)
#loc79 = loc("CWE190_Integer_Overflow__int64_t_max_add_15.c":88:13)
#loc80 = loc("CWE190_Integer_Overflow__int64_t_max_add_15.c":90:9)
#loc81 = loc("CWE190_Integer_Overflow__int64_t_max_add_15.c":95:1)
#loc82 = loc("CWE190_Integer_Overflow__int64_t_max_add_15.c":129:1)
#loc83 = loc("CWE190_Integer_Overflow__int64_t_max_add_15.c":97:5)
#loc84 = loc("CWE190_Integer_Overflow__int64_t_max_add_15.c":97:13)
#loc85 = loc("CWE190_Integer_Overflow__int64_t_max_add_15.c":98:12)
#loc86 = loc("CWE190_Integer_Overflow__int64_t_max_add_15.c":98:5)
#loc87 = loc("CWE190_Integer_Overflow__int64_t_max_add_15.c":99:5)
#loc88 = loc("CWE190_Integer_Overflow__int64_t_max_add_15.c":109:5)
#loc89 = loc("CWE190_Integer_Overflow__int64_t_max_add_15.c":99:12)
#loc90 = loc("CWE190_Integer_Overflow__int64_t_max_add_15.c":103:16)
#loc91 = loc("CWE190_Integer_Overflow__int64_t_max_add_15.c":103:9)
#loc92 = loc("CWE190_Integer_Overflow__int64_t_max_add_15.c":104:9)
#loc93 = loc("CWE190_Integer_Overflow__int64_t_max_add_15.c":107:19)
#loc94 = loc("CWE190_Integer_Overflow__int64_t_max_add_15.c":107:9)
#loc95 = loc("CWE190_Integer_Overflow__int64_t_max_add_15.c":108:9)
#loc96 = loc("CWE190_Integer_Overflow__int64_t_max_add_15.c":110:5)
#loc97 = loc("CWE190_Integer_Overflow__int64_t_max_add_15.c":128:5)
#loc98 = loc("CWE190_Integer_Overflow__int64_t_max_add_15.c":110:12)
#loc99 = loc("CWE190_Integer_Overflow__int64_t_max_add_15.c":114:9)
#loc100 = loc("CWE190_Integer_Overflow__int64_t_max_add_15.c":122:9)
#loc101 = loc("CWE190_Integer_Overflow__int64_t_max_add_15.c":114:13)
#loc102 = loc("CWE190_Integer_Overflow__int64_t_max_add_15.c":114:20)
#loc103 = loc("CWE190_Integer_Overflow__int64_t_max_add_15.c":114:18)
#loc104 = loc("CWE190_Integer_Overflow__int64_t_max_add_15.c":115:9)
#loc105 = loc("CWE190_Integer_Overflow__int64_t_max_add_15.c":118:9)
#loc106 = loc("CWE190_Integer_Overflow__int64_t_max_add_15.c":120:9)
#loc107 = loc("CWE190_Integer_Overflow__int64_t_max_add_15.c":116:13)
#loc108 = loc("CWE190_Integer_Overflow__int64_t_max_add_15.c":116:37)
#loc109 = loc("CWE190_Integer_Overflow__int64_t_max_add_15.c":116:30)
#loc110 = loc("CWE190_Integer_Overflow__int64_t_max_add_15.c":117:31)
#loc111 = loc("CWE190_Integer_Overflow__int64_t_max_add_15.c":117:13)
#loc112 = loc("CWE190_Integer_Overflow__int64_t_max_add_15.c":121:23)
#loc113 = loc("CWE190_Integer_Overflow__int64_t_max_add_15.c":121:13)
#loc114 = loc("CWE190_Integer_Overflow__int64_t_max_add_15.c":123:9)
#loc115 = loc("CWE190_Integer_Overflow__int64_t_max_add_15.c":126:19)
#loc116 = loc("CWE190_Integer_Overflow__int64_t_max_add_15.c":126:9)
#loc117 = loc("CWE190_Integer_Overflow__int64_t_max_add_15.c":127:9)
#loc118 = loc("CWE190_Integer_Overflow__int64_t_max_add_15.c":132:1)
#loc119 = loc("CWE190_Integer_Overflow__int64_t_max_add_15.c":161:1)
#loc120 = loc("CWE190_Integer_Overflow__int64_t_max_add_15.c":134:5)
#loc121 = loc("CWE190_Integer_Overflow__int64_t_max_add_15.c":134:13)
#loc122 = loc("CWE190_Integer_Overflow__int64_t_max_add_15.c":135:12)
#loc123 = loc("CWE190_Integer_Overflow__int64_t_max_add_15.c":135:5)
#loc124 = loc("CWE190_Integer_Overflow__int64_t_max_add_15.c":136:5)
#loc125 = loc("CWE190_Integer_Overflow__int64_t_max_add_15.c":146:5)
#loc126 = loc("CWE190_Integer_Overflow__int64_t_max_add_15.c":136:12)
#loc127 = loc("CWE190_Integer_Overflow__int64_t_max_add_15.c":140:19)
#loc128 = loc("CWE190_Integer_Overflow__int64_t_max_add_15.c":140:9)
#loc129 = loc("CWE190_Integer_Overflow__int64_t_max_add_15.c":141:9)
#loc130 = loc("CWE190_Integer_Overflow__int64_t_max_add_15.c":144:16)
#loc131 = loc("CWE190_Integer_Overflow__int64_t_max_add_15.c":144:9)
#loc132 = loc("CWE190_Integer_Overflow__int64_t_max_add_15.c":145:9)
#loc133 = loc("CWE190_Integer_Overflow__int64_t_max_add_15.c":147:5)
#loc134 = loc("CWE190_Integer_Overflow__int64_t_max_add_15.c":160:5)
#loc135 = loc("CWE190_Integer_Overflow__int64_t_max_add_15.c":147:12)
#loc136 = loc("CWE190_Integer_Overflow__int64_t_max_add_15.c":150:5)
#loc137 = loc("CWE190_Integer_Overflow__int64_t_max_add_15.c":154:5)
#loc138 = loc("CWE190_Integer_Overflow__int64_t_max_add_15.c":152:9)
#loc139 = loc("CWE190_Integer_Overflow__int64_t_max_add_15.c":152:33)
#loc140 = loc("CWE190_Integer_Overflow__int64_t_max_add_15.c":152:26)
#loc141 = loc("CWE190_Integer_Overflow__int64_t_max_add_15.c":153:27)
#loc142 = loc("CWE190_Integer_Overflow__int64_t_max_add_15.c":153:9)
#loc143 = loc("CWE190_Integer_Overflow__int64_t_max_add_15.c":155:5)
#loc144 = loc("CWE190_Integer_Overflow__int64_t_max_add_15.c":158:19)
#loc145 = loc("CWE190_Integer_Overflow__int64_t_max_add_15.c":158:9)
#loc146 = loc("CWE190_Integer_Overflow__int64_t_max_add_15.c":159:9)
#loc147 = loc("CWE190_Integer_Overflow__int64_t_max_add_15.c":164:1)
#loc148 = loc("CWE190_Integer_Overflow__int64_t_max_add_15.c":193:1)
#loc149 = loc("CWE190_Integer_Overflow__int64_t_max_add_15.c":166:5)
#loc150 = loc("CWE190_Integer_Overflow__int64_t_max_add_15.c":166:13)
#loc151 = loc("CWE190_Integer_Overflow__int64_t_max_add_15.c":167:12)
#loc152 = loc("CWE190_Integer_Overflow__int64_t_max_add_15.c":167:5)
#loc153 = loc("CWE190_Integer_Overflow__int64_t_max_add_15.c":168:5)
#loc154 = loc("CWE190_Integer_Overflow__int64_t_max_add_15.c":178:5)
#loc155 = loc("CWE190_Integer_Overflow__int64_t_max_add_15.c":168:12)
#loc156 = loc("CWE190_Integer_Overflow__int64_t_max_add_15.c":172:16)
#loc157 = loc("CWE190_Integer_Overflow__int64_t_max_add_15.c":172:9)
#loc158 = loc("CWE190_Integer_Overflow__int64_t_max_add_15.c":173:9)
#loc159 = loc("CWE190_Integer_Overflow__int64_t_max_add_15.c":176:19)
#loc160 = loc("CWE190_Integer_Overflow__int64_t_max_add_15.c":176:9)
#loc161 = loc("CWE190_Integer_Overflow__int64_t_max_add_15.c":177:9)
#loc162 = loc("CWE190_Integer_Overflow__int64_t_max_add_15.c":179:5)
#loc163 = loc("CWE190_Integer_Overflow__int64_t_max_add_15.c":192:5)
#loc164 = loc("CWE190_Integer_Overflow__int64_t_max_add_15.c":179:12)
#loc165 = loc("CWE190_Integer_Overflow__int64_t_max_add_15.c":182:5)
#loc166 = loc("CWE190_Integer_Overflow__int64_t_max_add_15.c":186:5)
#loc167 = loc("CWE190_Integer_Overflow__int64_t_max_add_15.c":184:9)
#loc168 = loc("CWE190_Integer_Overflow__int64_t_max_add_15.c":184:33)
#loc169 = loc("CWE190_Integer_Overflow__int64_t_max_add_15.c":184:26)
#loc170 = loc("CWE190_Integer_Overflow__int64_t_max_add_15.c":185:27)
#loc171 = loc("CWE190_Integer_Overflow__int64_t_max_add_15.c":185:9)
#loc172 = loc("CWE190_Integer_Overflow__int64_t_max_add_15.c":187:5)
#loc173 = loc("CWE190_Integer_Overflow__int64_t_max_add_15.c":190:19)
#loc174 = loc("CWE190_Integer_Overflow__int64_t_max_add_15.c":190:9)
#loc175 = loc("CWE190_Integer_Overflow__int64_t_max_add_15.c":191:9)
#loc176 = loc(fused[#loc1, #loc2])
#loc177 = loc(fused[#loc4, #loc5])
#loc178 = loc(fused[#loc6, #loc7])
#loc179 = loc(fused[#loc8, #loc9])
#loc180 = loc(fused[#loc11, #loc10])
#loc181 = loc(fused[#loc12, #loc13])
#loc182 = loc(fused[#loc16, #loc15])
#loc183 = loc(fused[#loc20, #loc21])
#loc184 = loc(fused[#loc23, #loc24])
#loc185 = loc(fused[#loc25, #loc26])
#loc186 = loc(fused[#loc34, #loc35])
#loc187 = loc(fused[#loc36, #loc37])
#loc188 = loc(fused[#loc38, #loc39])
#loc189 = loc(fused[#loc40, #loc41])
#loc190 = loc(fused[#loc42, #loc43])
#loc191 = loc(fused[#loc45, #loc46])
#loc192 = loc(fused[#loc47, #loc48])
#loc193 = loc(fused[#loc50, #loc49])
#loc194 = loc(fused[#loc51, #loc52])
#loc195 = loc(fused[#loc55, #loc54])
#loc196 = loc(fused[#loc60, #loc61])
#loc197 = loc(fused[#loc66, #loc67])
#loc198 = loc(fused[#loc68, #loc69])
#loc199 = loc(fused[#loc71, #loc72, #loc73, #loc67])
#loc200 = loc(fused[#loc74, #loc75])
#loc201 = loc(fused[#loc81, #loc82])
#loc202 = loc(fused[#loc83, #loc84])
#loc203 = loc(fused[#loc86, #loc85])
#loc204 = loc(fused[#loc87, #loc88])
#loc205 = loc(fused[#loc91, #loc90])
#loc206 = loc(fused[#loc96, #loc97])
#loc207 = loc(fused[#loc99, #loc100])
#loc208 = loc(fused[#loc101, #loc102])
#loc209 = loc(fused[#loc104, #loc105, #loc106, #loc100])
#loc210 = loc(fused[#loc107, #loc108])
#loc211 = loc(fused[#loc118, #loc119])
#loc212 = loc(fused[#loc120, #loc121])
#loc213 = loc(fused[#loc123, #loc122])
#loc214 = loc(fused[#loc124, #loc125])
#loc215 = loc(fused[#loc131, #loc130])
#loc216 = loc(fused[#loc133, #loc134])
#loc217 = loc(fused[#loc136, #loc137])
#loc218 = loc(fused[#loc138, #loc139])
#loc219 = loc(fused[#loc147, #loc148])
#loc220 = loc(fused[#loc149, #loc150])
#loc221 = loc(fused[#loc152, #loc151])
#loc222 = loc(fused[#loc153, #loc154])
#loc223 = loc(fused[#loc157, #loc156])
#loc224 = loc(fused[#loc162, #loc163])
#loc225 = loc(fused[#loc165, #loc166])
#loc226 = loc(fused[#loc167, #loc168])
