!s32i = !cir.int<s, 32>
!s64i = !cir.int<s, 64>
!s8i = !cir.int<s, 8>
!ty__IO_codecvt = !cir.record<struct "_IO_codecvt" incomplete>
!ty__IO_marker = !cir.record<struct "_IO_marker" incomplete>
!ty__IO_wide_data = !cir.record<struct "_IO_wide_data" incomplete>
!u16i = !cir.int<u, 16>
!u64i = !cir.int<u, 64>
!void = !cir.void
#fn_attr = #cir<extra({nothrow = #cir.nothrow})>
#fn_attr1 = #cir<extra({inline = #cir.inline<no>, nothrow = #cir.nothrow, optnone = #cir.optnone, uwtable = #cir.uwtable<async>})>
!ty__IO_FILE = !cir.record<struct "_IO_FILE" {!s32i, !cir.ptr<!s8i>, !cir.ptr<!s8i>, !cir.ptr<!s8i>, !cir.ptr<!s8i>, !cir.ptr<!s8i>, !cir.ptr<!s8i>, !cir.ptr<!s8i>, !cir.ptr<!s8i>, !cir.ptr<!s8i>, !cir.ptr<!s8i>, !cir.ptr<!s8i>, !cir.ptr<!ty__IO_marker>, !cir.ptr<!cir.record<struct "_IO_FILE">>, !s32i, !s32i, !s64i, !u16i, !s8i, !cir.array<!s8i x 1>, !cir.ptr<!void>, !s64i, !cir.ptr<!ty__IO_codecvt>, !cir.ptr<!ty__IO_wide_data>, !cir.ptr<!cir.record<struct "_IO_FILE">>, !cir.ptr<!void>, !u64i, !s32i, !cir.array<!s8i x 20>} #cir.record.decl.ast>
module @"/workspaces/juliet-c/testcases/CWE190_Integer_Overflow/s03/CWE190_Integer_Overflow__int_fgets_multiply_01.c" attributes {cir.lang = #cir.lang<c>, cir.sob = #cir.signed_overflow_behavior<undefined>, cir.triple = "x86_64-unknown-linux-gnu", cir.type_size_info = #cir.type_size_info<char = 8, int = 32, size_t = 64>, cir.uwtable = #cir.uwtable<async>, dlti.dl_spec = #dlti.dl_spec<i64 = dense<64> : vector<2xi64>, !llvm.ptr<272> = dense<64> : vector<4xi64>, !llvm.ptr<271> = dense<32> : vector<4xi64>, f128 = dense<128> : vector<2xi64>, f64 = dense<64> : vector<2xi64>, f16 = dense<16> : vector<2xi64>, !llvm.ptr<270> = dense<32> : vector<4xi64>, i32 = dense<32> : vector<2xi64>, i8 = dense<8> : vector<2xi64>, i16 = dense<16> : vector<2xi64>, !llvm.ptr = dense<64> : vector<4xi64>, i1 = dense<8> : vector<2xi64>, f80 = dense<128> : vector<2xi64>, i128 = dense<128> : vector<2xi64>, "dlti.mangling_mode" = "e", "dlti.endianness" = "little", "dlti.stack_alignment" = 128 : i64>} {
  cir.func private @fgets(!cir.ptr<!s8i>, !s32i, !cir.ptr<!ty__IO_FILE>) -> !cir.ptr<!s8i> loc(#loc118)
  cir.global "private" external @stdin : !cir.ptr<!ty__IO_FILE> {alignment = 8 : i64} loc(#loc119)
  cir.func private @atoi(!cir.ptr<!s8i>) -> !s32i extra(#fn_attr) loc(#loc120)
  cir.func private @printLine(!cir.ptr<!s8i>) loc(#loc121)
  cir.global "private" constant cir_private dsolocal @".str" = #cir.const_array<"fgets() failed.\00" : !cir.array<!s8i x 16>> : !cir.array<!s8i x 16> {alignment = 1 : i64} loc(#loc9)
  cir.func private @printIntLine(!s32i) loc(#loc122)
  cir.func no_proto @CWE190_Integer_Overflow__int_fgets_multiply_01_bad() extra(#fn_attr1) {
    %0 = cir.alloca !s32i, !cir.ptr<!s32i>, ["data"] {alignment = 4 : i64} loc(#loc124)
    %1 = cir.const #cir.int<0> : !s32i loc(#loc16)
    cir.store %1, %0 : !s32i, !cir.ptr<!s32i> loc(#loc125)
    cir.scope {
      %2 = cir.alloca !cir.array<!s8i x 14>, !cir.ptr<!cir.array<!s8i x 14>>, ["inputBuffer"] {alignment = 1 : i64} loc(#loc127)
      %3 = cir.const #cir.zero : !cir.array<!s8i x 14> loc(#loc127)
      cir.store %3, %2 : !cir.array<!s8i x 14>, !cir.ptr<!cir.array<!s8i x 14>> loc(#loc127)
      cir.scope {
        %4 = cir.cast(array_to_ptrdecay, %2 : !cir.ptr<!cir.array<!s8i x 14>>), !cir.ptr<!s8i> loc(#loc24)
        %5 = cir.const #cir.int<3> : !s32i loc(#loc25)
        %6 = cir.cast(integral, %5 : !s32i), !u64i loc(#loc25)
        %7 = cir.const #cir.int<4> : !u64i loc(#loc25)
        %8 = cir.binop(mul, %6, %7) : !u64i loc(#loc25)
        %9 = cir.const #cir.int<2> : !s32i loc(#loc25)
        %10 = cir.cast(integral, %9 : !s32i), !u64i loc(#loc25)
        %11 = cir.binop(add, %8, %10) : !u64i loc(#loc25)
        %12 = cir.cast(integral, %11 : !u64i), !s32i loc(#loc25)
        %13 = cir.get_global @stdin : !cir.ptr<!cir.ptr<!ty__IO_FILE>> loc(#loc119)
        %14 = cir.load %13 : !cir.ptr<!cir.ptr<!ty__IO_FILE>>, !cir.ptr<!ty__IO_FILE> loc(#loc26)
        %15 = cir.call @fgets(%4, %12, %14) : (!cir.ptr<!s8i>, !s32i, !cir.ptr<!ty__IO_FILE>) -> !cir.ptr<!s8i> loc(#loc27)
        %16 = cir.const #cir.ptr<null> : !cir.ptr<!void> loc(#loc28)
        %17 = cir.cast(bitcast, %16 : !cir.ptr<!void>), !cir.ptr<!s8i> loc(#loc28)
        %18 = cir.cmp(ne, %15, %17) : !cir.ptr<!s8i>, !cir.bool loc(#loc129)
        cir.if %18 {
          %19 = cir.cast(array_to_ptrdecay, %2 : !cir.ptr<!cir.array<!s8i x 14>>), !cir.ptr<!s8i> loc(#loc32)
          %20 = cir.call @atoi(%19) : (!cir.ptr<!s8i>) -> !s32i side_effect(pure) extra(#fn_attr) loc(#loc33)
          cir.store %20, %0 : !s32i, !cir.ptr<!s32i> loc(#loc131)
        } else {
          %19 = cir.get_global @".str" : !cir.ptr<!cir.array<!s8i x 16>> loc(#loc9)
          %20 = cir.cast(array_to_ptrdecay, %19 : !cir.ptr<!cir.array<!s8i x 16>>), !cir.ptr<!s8i> loc(#loc9)
          cir.call @printLine(%20) : (!cir.ptr<!s8i>) -> () loc(#loc36)
        } loc(#loc130)
      } loc(#loc128)
    } loc(#loc126)
    cir.scope {
      %2 = cir.load %0 : !cir.ptr<!s32i>, !s32i loc(#loc39)
      %3 = cir.const #cir.int<0> : !s32i loc(#loc40)
      %4 = cir.cmp(gt, %2, %3) : !s32i, !cir.bool loc(#loc133)
      cir.if %4 {
        %5 = cir.alloca !s32i, !cir.ptr<!s32i>, ["result", init] {alignment = 4 : i64} loc(#loc135)
        %6 = cir.load %0 : !cir.ptr<!s32i>, !s32i loc(#loc44)
        %7 = cir.const #cir.int<2> : !s32i loc(#loc43)
        %8 = cir.binop(mul, %6, %7) nsw : !s32i loc(#loc44)
        cir.store %8, %5 : !s32i, !cir.ptr<!s32i> loc(#loc135)
        %9 = cir.load %5 : !cir.ptr<!s32i>, !s32i loc(#loc45)
        cir.call @printIntLine(%9) : (!s32i) -> () loc(#loc46)
      } loc(#loc134)
    } loc(#loc132)
    cir.return loc(#loc13)
  } loc(#loc123)
  cir.func no_proto @CWE190_Integer_Overflow__int_fgets_multiply_01_good() extra(#fn_attr1) {
    %0 = cir.get_global @goodG2B : !cir.ptr<!cir.func<()>> loc(#loc137)
    cir.call %0() : (!cir.ptr<!cir.func<()>>) -> () loc(#loc49)
    %1 = cir.get_global @goodB2G : !cir.ptr<!cir.func<()>> loc(#loc138)
    cir.call %1() : (!cir.ptr<!cir.func<()>>) -> () loc(#loc51)
    cir.return loc(#loc48)
  } loc(#loc136)
  cir.func no_proto internal private @goodG2B() extra(#fn_attr1) {
    %0 = cir.alloca !s32i, !cir.ptr<!s32i>, ["data"] {alignment = 4 : i64} loc(#loc140)
    %1 = cir.const #cir.int<0> : !s32i loc(#loc57)
    cir.store %1, %0 : !s32i, !cir.ptr<!s32i> loc(#loc141)
    %2 = cir.const #cir.int<2> : !s32i loc(#loc59)
    cir.store %2, %0 : !s32i, !cir.ptr<!s32i> loc(#loc142)
    cir.scope {
      %3 = cir.load %0 : !cir.ptr<!s32i>, !s32i loc(#loc63)
      %4 = cir.const #cir.int<0> : !s32i loc(#loc64)
      %5 = cir.cmp(gt, %3, %4) : !s32i, !cir.bool loc(#loc144)
      cir.if %5 {
        %6 = cir.alloca !s32i, !cir.ptr<!s32i>, ["result", init] {alignment = 4 : i64} loc(#loc146)
        %7 = cir.load %0 : !cir.ptr<!s32i>, !s32i loc(#loc68)
        %8 = cir.const #cir.int<2> : !s32i loc(#loc67)
        %9 = cir.binop(mul, %7, %8) nsw : !s32i loc(#loc68)
        cir.store %9, %6 : !s32i, !cir.ptr<!s32i> loc(#loc146)
        %10 = cir.load %6 : !cir.ptr<!s32i>, !s32i loc(#loc69)
        cir.call @printIntLine(%10) : (!s32i) -> () loc(#loc70)
      } loc(#loc145)
    } loc(#loc143)
    cir.return loc(#loc54)
  } loc(#loc139)
  cir.global "private" constant cir_private dsolocal @".str.1" = #cir.const_array<"data value is too large to perform arithmetic safely.\00" : !cir.array<!s8i x 54>> : !cir.array<!s8i x 54> {alignment = 1 : i64} loc(#loc71)
  cir.func no_proto internal private @goodB2G() extra(#fn_attr1) {
    %0 = cir.alloca !s32i, !cir.ptr<!s32i>, ["data"] {alignment = 4 : i64} loc(#loc148)
    %1 = cir.const #cir.int<0> : !s32i loc(#loc76)
    cir.store %1, %0 : !s32i, !cir.ptr<!s32i> loc(#loc149)
    cir.scope {
      %2 = cir.alloca !cir.array<!s8i x 14>, !cir.ptr<!cir.array<!s8i x 14>>, ["inputBuffer"] {alignment = 1 : i64} loc(#loc151)
      %3 = cir.const #cir.zero : !cir.array<!s8i x 14> loc(#loc151)
      cir.store %3, %2 : !cir.array<!s8i x 14>, !cir.ptr<!cir.array<!s8i x 14>> loc(#loc151)
      cir.scope {
        %4 = cir.cast(array_to_ptrdecay, %2 : !cir.ptr<!cir.array<!s8i x 14>>), !cir.ptr<!s8i> loc(#loc84)
        %5 = cir.const #cir.int<3> : !s32i loc(#loc85)
        %6 = cir.cast(integral, %5 : !s32i), !u64i loc(#loc85)
        %7 = cir.const #cir.int<4> : !u64i loc(#loc85)
        %8 = cir.binop(mul, %6, %7) : !u64i loc(#loc85)
        %9 = cir.const #cir.int<2> : !s32i loc(#loc85)
        %10 = cir.cast(integral, %9 : !s32i), !u64i loc(#loc85)
        %11 = cir.binop(add, %8, %10) : !u64i loc(#loc85)
        %12 = cir.cast(integral, %11 : !u64i), !s32i loc(#loc85)
        %13 = cir.get_global @stdin : !cir.ptr<!cir.ptr<!ty__IO_FILE>> loc(#loc119)
        %14 = cir.load %13 : !cir.ptr<!cir.ptr<!ty__IO_FILE>>, !cir.ptr<!ty__IO_FILE> loc(#loc86)
        %15 = cir.call @fgets(%4, %12, %14) : (!cir.ptr<!s8i>, !s32i, !cir.ptr<!ty__IO_FILE>) -> !cir.ptr<!s8i> loc(#loc87)
        %16 = cir.const #cir.ptr<null> : !cir.ptr<!void> loc(#loc88)
        %17 = cir.cast(bitcast, %16 : !cir.ptr<!void>), !cir.ptr<!s8i> loc(#loc88)
        %18 = cir.cmp(ne, %15, %17) : !cir.ptr<!s8i>, !cir.bool loc(#loc153)
        cir.if %18 {
          %19 = cir.cast(array_to_ptrdecay, %2 : !cir.ptr<!cir.array<!s8i x 14>>), !cir.ptr<!s8i> loc(#loc92)
          %20 = cir.call @atoi(%19) : (!cir.ptr<!s8i>) -> !s32i side_effect(pure) extra(#fn_attr) loc(#loc93)
          cir.store %20, %0 : !s32i, !cir.ptr<!s32i> loc(#loc155)
        } else {
          %19 = cir.get_global @".str" : !cir.ptr<!cir.array<!s8i x 16>> loc(#loc96)
          %20 = cir.cast(array_to_ptrdecay, %19 : !cir.ptr<!cir.array<!s8i x 16>>), !cir.ptr<!s8i> loc(#loc96)
          cir.call @printLine(%20) : (!cir.ptr<!s8i>) -> () loc(#loc97)
        } loc(#loc154)
      } loc(#loc152)
    } loc(#loc150)
    cir.scope {
      %2 = cir.load %0 : !cir.ptr<!s32i>, !s32i loc(#loc100)
      %3 = cir.const #cir.int<0> : !s32i loc(#loc101)
      %4 = cir.cmp(gt, %2, %3) : !s32i, !cir.bool loc(#loc157)
      cir.if %4 {
        cir.scope {
          %5 = cir.load %0 : !cir.ptr<!s32i>, !s32i loc(#loc105)
          %6 = cir.const #cir.int<2147483647> : !s32i loc(#loc106)
          %7 = cir.const #cir.int<2> : !s32i loc(#loc107)
          %8 = cir.binop(div, %6, %7) : !s32i loc(#loc160)
          %9 = cir.cmp(lt, %5, %8) : !s32i, !cir.bool loc(#loc161)
          cir.if %9 {
            %10 = cir.alloca !s32i, !cir.ptr<!s32i>, ["result", init] {alignment = 4 : i64} loc(#loc163)
            %11 = cir.load %0 : !cir.ptr<!s32i>, !s32i loc(#loc114)
            %12 = cir.const #cir.int<2> : !s32i loc(#loc113)
            %13 = cir.binop(mul, %11, %12) nsw : !s32i loc(#loc114)
            cir.store %13, %10 : !s32i, !cir.ptr<!s32i> loc(#loc163)
            %14 = cir.load %10 : !cir.ptr<!s32i>, !s32i loc(#loc115)
            cir.call @printIntLine(%14) : (!s32i) -> () loc(#loc116)
          } else {
            %10 = cir.get_global @".str.1" : !cir.ptr<!cir.array<!s8i x 54>> loc(#loc71)
            %11 = cir.cast(array_to_ptrdecay, %10 : !cir.ptr<!cir.array<!s8i x 54>>), !cir.ptr<!s8i> loc(#loc71)
            cir.call @printLine(%11) : (!cir.ptr<!s8i>) -> () loc(#loc117)
          } loc(#loc162)
        } loc(#loc159)
      } loc(#loc158)
    } loc(#loc156)
    cir.return loc(#loc73)
  } loc(#loc147)
} loc(#loc)
#loc = loc("/workspaces/juliet-c/testcases/CWE190_Integer_Overflow/s03/CWE190_Integer_Overflow__int_fgets_multiply_01.c":0:0)
#loc1 = loc("/usr/include/stdio.h":654:1)
#loc2 = loc("/usr/include/stdio.h":655:59)
#loc3 = loc("/usr/include/stdio.h":149:1)
#loc4 = loc("/usr/include/stdio.h":149:14)
#loc5 = loc("/usr/include/stdlib.h":105:1)
#loc6 = loc("/usr/include/stdlib.h":106:33)
#loc7 = loc("../../../testcasesupport/std_testcase_io.h":14:1)
#loc8 = loc("../../../testcasesupport/std_testcase_io.h":14:33)
#loc9 = loc("CWE190_Integer_Overflow__int_fgets_multiply_01.c":39:23)
#loc10 = loc("../../../testcasesupport/std_testcase_io.h":18:1)
#loc11 = loc("../../../testcasesupport/std_testcase_io.h":18:33)
#loc12 = loc("CWE190_Integer_Overflow__int_fgets_multiply_01.c":24:1)
#loc13 = loc("CWE190_Integer_Overflow__int_fgets_multiply_01.c":48:1)
#loc14 = loc("CWE190_Integer_Overflow__int_fgets_multiply_01.c":26:5)
#loc15 = loc("CWE190_Integer_Overflow__int_fgets_multiply_01.c":26:9)
#loc16 = loc("CWE190_Integer_Overflow__int_fgets_multiply_01.c":28:12)
#loc17 = loc("CWE190_Integer_Overflow__int_fgets_multiply_01.c":28:5)
#loc18 = loc("CWE190_Integer_Overflow__int_fgets_multiply_01.c":29:5)
#loc19 = loc("CWE190_Integer_Overflow__int_fgets_multiply_01.c":41:5)
#loc20 = loc("CWE190_Integer_Overflow__int_fgets_multiply_01.c":30:9)
#loc21 = loc("CWE190_Integer_Overflow__int_fgets_multiply_01.c":30:45)
#loc22 = loc("CWE190_Integer_Overflow__int_fgets_multiply_01.c":32:9)
#loc23 = loc("CWE190_Integer_Overflow__int_fgets_multiply_01.c":40:9)
#loc24 = loc("CWE190_Integer_Overflow__int_fgets_multiply_01.c":32:19)
#loc25 = loc("CWE190_Integer_Overflow__int_fgets_multiply_01.c":32:32)
#loc26 = loc("CWE190_Integer_Overflow__int_fgets_multiply_01.c":32:49)
#loc27 = loc("CWE190_Integer_Overflow__int_fgets_multiply_01.c":32:13)
#loc28 = loc("CWE190_Integer_Overflow__int_fgets_multiply_01.c":32:59)
#loc29 = loc("CWE190_Integer_Overflow__int_fgets_multiply_01.c":33:9)
#loc30 = loc("CWE190_Integer_Overflow__int_fgets_multiply_01.c":36:9)
#loc31 = loc("CWE190_Integer_Overflow__int_fgets_multiply_01.c":38:9)
#loc32 = loc("CWE190_Integer_Overflow__int_fgets_multiply_01.c":35:25)
#loc33 = loc("CWE190_Integer_Overflow__int_fgets_multiply_01.c":35:20)
#loc34 = loc("CWE190_Integer_Overflow__int_fgets_multiply_01.c":35:13)
#loc35 = loc("CWE190_Integer_Overflow__int_fgets_multiply_01.c":35:36)
#loc36 = loc("CWE190_Integer_Overflow__int_fgets_multiply_01.c":39:13)
#loc37 = loc("CWE190_Integer_Overflow__int_fgets_multiply_01.c":42:5)
#loc38 = loc("CWE190_Integer_Overflow__int_fgets_multiply_01.c":47:5)
#loc39 = loc("CWE190_Integer_Overflow__int_fgets_multiply_01.c":42:8)
#loc40 = loc("CWE190_Integer_Overflow__int_fgets_multiply_01.c":42:15)
#loc41 = loc("CWE190_Integer_Overflow__int_fgets_multiply_01.c":43:5)
#loc42 = loc("CWE190_Integer_Overflow__int_fgets_multiply_01.c":45:9)
#loc43 = loc("CWE190_Integer_Overflow__int_fgets_multiply_01.c":45:29)
#loc44 = loc("CWE190_Integer_Overflow__int_fgets_multiply_01.c":45:22)
#loc45 = loc("CWE190_Integer_Overflow__int_fgets_multiply_01.c":46:22)
#loc46 = loc("CWE190_Integer_Overflow__int_fgets_multiply_01.c":46:9)
#loc47 = loc("CWE190_Integer_Overflow__int_fgets_multiply_01.c":104:1)
#loc48 = loc("CWE190_Integer_Overflow__int_fgets_multiply_01.c":108:1)
#loc49 = loc("CWE190_Integer_Overflow__int_fgets_multiply_01.c":106:5)
#loc50 = loc("CWE190_Integer_Overflow__int_fgets_multiply_01.c":106:13)
#loc51 = loc("CWE190_Integer_Overflow__int_fgets_multiply_01.c":107:5)
#loc52 = loc("CWE190_Integer_Overflow__int_fgets_multiply_01.c":107:13)
#loc53 = loc("CWE190_Integer_Overflow__int_fgets_multiply_01.c":55:1)
#loc54 = loc("CWE190_Integer_Overflow__int_fgets_multiply_01.c":68:1)
#loc55 = loc("CWE190_Integer_Overflow__int_fgets_multiply_01.c":57:5)
#loc56 = loc("CWE190_Integer_Overflow__int_fgets_multiply_01.c":57:9)
#loc57 = loc("CWE190_Integer_Overflow__int_fgets_multiply_01.c":59:12)
#loc58 = loc("CWE190_Integer_Overflow__int_fgets_multiply_01.c":59:5)
#loc59 = loc("CWE190_Integer_Overflow__int_fgets_multiply_01.c":61:12)
#loc60 = loc("CWE190_Integer_Overflow__int_fgets_multiply_01.c":61:5)
#loc61 = loc("CWE190_Integer_Overflow__int_fgets_multiply_01.c":62:5)
#loc62 = loc("CWE190_Integer_Overflow__int_fgets_multiply_01.c":67:5)
#loc63 = loc("CWE190_Integer_Overflow__int_fgets_multiply_01.c":62:8)
#loc64 = loc("CWE190_Integer_Overflow__int_fgets_multiply_01.c":62:15)
#loc65 = loc("CWE190_Integer_Overflow__int_fgets_multiply_01.c":63:5)
#loc66 = loc("CWE190_Integer_Overflow__int_fgets_multiply_01.c":65:9)
#loc67 = loc("CWE190_Integer_Overflow__int_fgets_multiply_01.c":65:29)
#loc68 = loc("CWE190_Integer_Overflow__int_fgets_multiply_01.c":65:22)
#loc69 = loc("CWE190_Integer_Overflow__int_fgets_multiply_01.c":66:22)
#loc70 = loc("CWE190_Integer_Overflow__int_fgets_multiply_01.c":66:9)
#loc71 = loc("CWE190_Integer_Overflow__int_fgets_multiply_01.c":99:23)
#loc72 = loc("CWE190_Integer_Overflow__int_fgets_multiply_01.c":71:1)
#loc73 = loc("CWE190_Integer_Overflow__int_fgets_multiply_01.c":102:1)
#loc74 = loc("CWE190_Integer_Overflow__int_fgets_multiply_01.c":73:5)
#loc75 = loc("CWE190_Integer_Overflow__int_fgets_multiply_01.c":73:9)
#loc76 = loc("CWE190_Integer_Overflow__int_fgets_multiply_01.c":75:12)
#loc77 = loc("CWE190_Integer_Overflow__int_fgets_multiply_01.c":75:5)
#loc78 = loc("CWE190_Integer_Overflow__int_fgets_multiply_01.c":76:5)
#loc79 = loc("CWE190_Integer_Overflow__int_fgets_multiply_01.c":88:5)
#loc80 = loc("CWE190_Integer_Overflow__int_fgets_multiply_01.c":77:9)
#loc81 = loc("CWE190_Integer_Overflow__int_fgets_multiply_01.c":77:45)
#loc82 = loc("CWE190_Integer_Overflow__int_fgets_multiply_01.c":79:9)
#loc83 = loc("CWE190_Integer_Overflow__int_fgets_multiply_01.c":87:9)
#loc84 = loc("CWE190_Integer_Overflow__int_fgets_multiply_01.c":79:19)
#loc85 = loc("CWE190_Integer_Overflow__int_fgets_multiply_01.c":79:32)
#loc86 = loc("CWE190_Integer_Overflow__int_fgets_multiply_01.c":79:49)
#loc87 = loc("CWE190_Integer_Overflow__int_fgets_multiply_01.c":79:13)
#loc88 = loc("CWE190_Integer_Overflow__int_fgets_multiply_01.c":79:59)
#loc89 = loc("CWE190_Integer_Overflow__int_fgets_multiply_01.c":80:9)
#loc90 = loc("CWE190_Integer_Overflow__int_fgets_multiply_01.c":83:9)
#loc91 = loc("CWE190_Integer_Overflow__int_fgets_multiply_01.c":85:9)
#loc92 = loc("CWE190_Integer_Overflow__int_fgets_multiply_01.c":82:25)
#loc93 = loc("CWE190_Integer_Overflow__int_fgets_multiply_01.c":82:20)
#loc94 = loc("CWE190_Integer_Overflow__int_fgets_multiply_01.c":82:13)
#loc95 = loc("CWE190_Integer_Overflow__int_fgets_multiply_01.c":82:36)
#loc96 = loc("CWE190_Integer_Overflow__int_fgets_multiply_01.c":86:23)
#loc97 = loc("CWE190_Integer_Overflow__int_fgets_multiply_01.c":86:13)
#loc98 = loc("CWE190_Integer_Overflow__int_fgets_multiply_01.c":89:5)
#loc99 = loc("CWE190_Integer_Overflow__int_fgets_multiply_01.c":101:5)
#loc100 = loc("CWE190_Integer_Overflow__int_fgets_multiply_01.c":89:8)
#loc101 = loc("CWE190_Integer_Overflow__int_fgets_multiply_01.c":89:15)
#loc102 = loc("CWE190_Integer_Overflow__int_fgets_multiply_01.c":90:5)
#loc103 = loc("CWE190_Integer_Overflow__int_fgets_multiply_01.c":92:9)
#loc104 = loc("CWE190_Integer_Overflow__int_fgets_multiply_01.c":100:9)
#loc105 = loc("CWE190_Integer_Overflow__int_fgets_multiply_01.c":92:13)
#loc106 = loc("CWE190_Integer_Overflow__int_fgets_multiply_01.c":92:21)
#loc107 = loc("CWE190_Integer_Overflow__int_fgets_multiply_01.c":92:29)
#loc108 = loc("CWE190_Integer_Overflow__int_fgets_multiply_01.c":92:30)
#loc109 = loc("CWE190_Integer_Overflow__int_fgets_multiply_01.c":93:9)
#loc110 = loc("CWE190_Integer_Overflow__int_fgets_multiply_01.c":96:9)
#loc111 = loc("CWE190_Integer_Overflow__int_fgets_multiply_01.c":98:9)
#loc112 = loc("CWE190_Integer_Overflow__int_fgets_multiply_01.c":94:13)
#loc113 = loc("CWE190_Integer_Overflow__int_fgets_multiply_01.c":94:33)
#loc114 = loc("CWE190_Integer_Overflow__int_fgets_multiply_01.c":94:26)
#loc115 = loc("CWE190_Integer_Overflow__int_fgets_multiply_01.c":95:26)
#loc116 = loc("CWE190_Integer_Overflow__int_fgets_multiply_01.c":95:13)
#loc117 = loc("CWE190_Integer_Overflow__int_fgets_multiply_01.c":99:13)
#loc118 = loc(fused[#loc1, #loc2])
#loc119 = loc(fused[#loc3, #loc4])
#loc120 = loc(fused[#loc5, #loc6])
#loc121 = loc(fused[#loc7, #loc8])
#loc122 = loc(fused[#loc10, #loc11])
#loc123 = loc(fused[#loc12, #loc13])
#loc124 = loc(fused[#loc14, #loc15])
#loc125 = loc(fused[#loc17, #loc16])
#loc126 = loc(fused[#loc18, #loc19])
#loc127 = loc(fused[#loc20, #loc21])
#loc128 = loc(fused[#loc22, #loc23])
#loc129 = loc(fused[#loc27, #loc28])
#loc130 = loc(fused[#loc29, #loc30, #loc31, #loc23])
#loc131 = loc(fused[#loc34, #loc35])
#loc132 = loc(fused[#loc37, #loc38])
#loc133 = loc(fused[#loc39, #loc40])
#loc134 = loc(fused[#loc41, #loc38])
#loc135 = loc(fused[#loc42, #loc43])
#loc136 = loc(fused[#loc47, #loc48])
#loc137 = loc(fused[#loc49, #loc50])
#loc138 = loc(fused[#loc51, #loc52])
#loc139 = loc(fused[#loc53, #loc54])
#loc140 = loc(fused[#loc55, #loc56])
#loc141 = loc(fused[#loc58, #loc57])
#loc142 = loc(fused[#loc60, #loc59])
#loc143 = loc(fused[#loc61, #loc62])
#loc144 = loc(fused[#loc63, #loc64])
#loc145 = loc(fused[#loc65, #loc62])
#loc146 = loc(fused[#loc66, #loc67])
#loc147 = loc(fused[#loc72, #loc73])
#loc148 = loc(fused[#loc74, #loc75])
#loc149 = loc(fused[#loc77, #loc76])
#loc150 = loc(fused[#loc78, #loc79])
#loc151 = loc(fused[#loc80, #loc81])
#loc152 = loc(fused[#loc82, #loc83])
#loc153 = loc(fused[#loc87, #loc88])
#loc154 = loc(fused[#loc89, #loc90, #loc91, #loc83])
#loc155 = loc(fused[#loc94, #loc95])
#loc156 = loc(fused[#loc98, #loc99])
#loc157 = loc(fused[#loc100, #loc101])
#loc158 = loc(fused[#loc102, #loc99])
#loc159 = loc(fused[#loc103, #loc104])
#loc160 = loc(fused[#loc106, #loc107])
#loc161 = loc(fused[#loc105, #loc108])
#loc162 = loc(fused[#loc109, #loc110, #loc111, #loc104])
#loc163 = loc(fused[#loc112, #loc113])
