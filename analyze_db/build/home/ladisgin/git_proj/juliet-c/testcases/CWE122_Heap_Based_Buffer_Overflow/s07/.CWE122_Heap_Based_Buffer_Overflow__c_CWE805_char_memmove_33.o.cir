!s32i = !cir.int<s, 32>
!s8i = !cir.int<s, 8>
!u64i = !cir.int<u, 64>
!void = !cir.void
#fn_attr = #cir<extra({nothrow = #cir.nothrow})>
#fn_attr1 = #cir<extra({inline = #cir.inline<no>, optnone = #cir.optnone})>
module @"/home/ladisgin/git_proj/juliet-c/testcases/CWE122_Heap_Based_Buffer_Overflow/s07/CWE122_Heap_Based_Buffer_Overflow__c_CWE805_char_memmove_33.cpp" attributes {cir.lang = #cir.lang<cxx>, cir.sob = #cir.signed_overflow_behavior<undefined>, cir.triple = "x86_64-unknown-linux-gnu", dlti.dl_spec = #dlti.dl_spec<f16 = dense<16> : vector<2xi64>, f64 = dense<64> : vector<2xi64>, f128 = dense<128> : vector<2xi64>, !llvm.ptr<270> = dense<32> : vector<4xi64>, i32 = dense<32> : vector<2xi64>, i8 = dense<8> : vector<2xi64>, i16 = dense<16> : vector<2xi64>, !llvm.ptr = dense<64> : vector<4xi64>, i1 = dense<8> : vector<2xi64>, i128 = dense<128> : vector<2xi64>, f80 = dense<128> : vector<2xi64>, !llvm.ptr<272> = dense<64> : vector<4xi64>, !llvm.ptr<271> = dense<32> : vector<4xi64>, i64 = dense<64> : vector<2xi64>, "dlti.endianness" = "little", "dlti.stack_alignment" = 128 : i64>} {
  cir.func private @malloc(!u64i) -> !cir.ptr<!void> extra(#fn_attr) loc(#loc132)
  cir.func private @exit(!s32i) extra(#fn_attr) loc(#loc133)
  cir.func private @printLine(!cir.ptr<!s8i>) loc(#loc134)
  cir.func private @free(!cir.ptr<!void>) extra(#fn_attr) loc(#loc135)
  cir.func @_ZN59CWE122_Heap_Based_Buffer_Overflow__c_CWE805_char_memmove_333badEv() extra(#fn_attr1) {
    %0 = cir.alloca !cir.ptr<!s8i>, !cir.ptr<!cir.ptr<!s8i>>, ["data", init] {alignment = 8 : i64} loc(#loc137)
    %1 = cir.alloca !cir.array<!s8i x 100>, !cir.ptr<!cir.array<!s8i x 100>>, ["source"] {alignment = 16 : i64} loc(#loc138)
    %2 = cir.alloca !cir.ptr<!s8i>, !cir.ptr<!cir.ptr<!s8i>>, ["data"] {alignment = 8 : i64} loc(#loc139)
    %3 = cir.alloca !cir.ptr<!cir.ptr<!s8i>>, !cir.ptr<!cir.ptr<!cir.ptr<!s8i>>>, ["dataRef", init, const] {alignment = 8 : i64} loc(#loc140)
    cir.store %2, %3 : !cir.ptr<!cir.ptr<!s8i>>, !cir.ptr<!cir.ptr<!cir.ptr<!s8i>>> loc(#loc18)
    %4 = cir.const #cir.ptr<null> : !cir.ptr<!s8i> loc(#loc19)
    cir.store %4, %2 : !cir.ptr<!s8i>, !cir.ptr<!cir.ptr<!s8i>> loc(#loc141)
    %5 = cir.get_global @malloc : !cir.ptr<!cir.func<!cir.ptr<!void> (!u64i)>> loc(#loc21)
    %6 = cir.const #cir.int<50> : !s32i loc(#loc22)
    %7 = cir.cast(integral, %6 : !s32i), !u64i loc(#loc22)
    %8 = cir.const #cir.int<1> : !u64i loc(#loc142)
    %9 = cir.binop(mul, %7, %8) : !u64i loc(#loc143)
    %10 = cir.call @malloc(%9) : (!u64i) -> !cir.ptr<!void> extra(#fn_attr) loc(#loc21)
    %11 = cir.cast(bitcast, %10 : !cir.ptr<!void>), !cir.ptr<!s8i> loc(#loc144)
    cir.store %11, %2 : !cir.ptr<!s8i>, !cir.ptr<!cir.ptr<!s8i>> loc(#loc145)
    cir.br ^bb1 loc(#loc146)
  ^bb1:  // pred: ^bb0
    %12 = cir.load %2 : !cir.ptr<!cir.ptr<!s8i>>, !cir.ptr<!s8i> loc(#loc29)
    %13 = cir.const #cir.ptr<null> : !cir.ptr<!s8i> loc(#loc30)
    %14 = cir.cmp(eq, %12, %13) : !cir.ptr<!s8i>, !cir.bool loc(#loc147)
    cir.brcond %14 ^bb2, ^bb3 loc(#loc148)
  ^bb2:  // pred: ^bb1
    %15 = cir.get_global @exit : !cir.ptr<!cir.func<!void (!s32i)>> loc(#loc32)
    %16 = cir.const #cir.int<1> : !s32i loc(#loc33)
    %17 = cir.unary(minus, %16) : !s32i, !s32i loc(#loc34)
    cir.call @exit(%17) : (!s32i) -> () extra(#fn_attr) loc(#loc32)
    cir.br ^bb3 loc(#loc28)
  ^bb3:  // 2 preds: ^bb1, ^bb2
    cir.br ^bb4 loc(#loc28)
  ^bb4:  // pred: ^bb3
    %18 = cir.const #cir.int<0> : !s8i loc(#loc35)
    %19 = cir.load %2 : !cir.ptr<!cir.ptr<!s8i>>, !cir.ptr<!s8i> loc(#loc36)
    %20 = cir.const #cir.int<0> : !s32i loc(#loc37)
    %21 = cir.ptr_stride(%19 : !cir.ptr<!s8i>, %20 : !s32i), !cir.ptr<!s8i> loc(#loc38)
    cir.store %18, %21 : !s8i, !cir.ptr<!s8i> loc(#loc149)
    cir.br ^bb5 loc(#loc150)
  ^bb5:  // pred: ^bb4
    %22 = cir.load %3 : !cir.ptr<!cir.ptr<!cir.ptr<!s8i>>>, !cir.ptr<!cir.ptr<!s8i>> loc(#loc12)
    %23 = cir.load %22 : !cir.ptr<!cir.ptr<!s8i>>, !cir.ptr<!s8i> loc(#loc12)
    cir.store %23, %0 : !cir.ptr<!s8i>, !cir.ptr<!cir.ptr<!s8i>> loc(#loc137)
    cir.br ^bb6 loc(#loc151)
  ^bb6:  // pred: ^bb5
    %24 = cir.cast(array_to_ptrdecay, %1 : !cir.ptr<!cir.array<!s8i x 100>>), !cir.ptr<!s8i> loc(#loc43)
    %25 = cir.cast(bitcast, %24 : !cir.ptr<!s8i>), !cir.ptr<!void> loc(#loc43)
    %26 = cir.const #cir.int<67> : !s8i loc(#loc44)
    %27 = cir.cast(integral, %26 : !s8i), !s32i loc(#loc44)
    %28 = cir.const #cir.int<100> : !s32i loc(#loc45)
    %29 = cir.const #cir.int<1> : !s32i loc(#loc46)
    %30 = cir.binop(sub, %28, %29) nsw : !s32i loc(#loc45)
    %31 = cir.cast(integral, %30 : !s32i), !u64i loc(#loc45)
    cir.libc.memset %31 bytes from %25 set to %27 : !cir.ptr<!void>, !s32i, !u64i loc(#loc152)
    %32 = cir.const #cir.int<0> : !s8i loc(#loc49)
    %33 = cir.const #cir.int<100> : !s32i loc(#loc50)
    %34 = cir.const #cir.int<1> : !s32i loc(#loc51)
    %35 = cir.binop(sub, %33, %34) nsw : !s32i loc(#loc50)
    %36 = cir.cast(array_to_ptrdecay, %1 : !cir.ptr<!cir.array<!s8i x 100>>), !cir.ptr<!s8i> loc(#loc52)
    %37 = cir.ptr_stride(%36 : !cir.ptr<!s8i>, %35 : !s32i), !cir.ptr<!s8i> loc(#loc52)
    cir.store %32, %37 : !s8i, !cir.ptr<!s8i> loc(#loc153)
    %38 = cir.load %0 : !cir.ptr<!cir.ptr<!s8i>>, !cir.ptr<!s8i> loc(#loc53)
    %39 = cir.cast(bitcast, %38 : !cir.ptr<!s8i>), !cir.ptr<!void> loc(#loc53)
    %40 = cir.cast(array_to_ptrdecay, %1 : !cir.ptr<!cir.array<!s8i x 100>>), !cir.ptr<!s8i> loc(#loc54)
    %41 = cir.cast(bitcast, %40 : !cir.ptr<!s8i>), !cir.ptr<!void> loc(#loc54)
    %42 = cir.const #cir.int<100> : !s32i loc(#loc55)
    %43 = cir.cast(integral, %42 : !s32i), !u64i loc(#loc55)
    %44 = cir.const #cir.int<1> : !u64i loc(#loc154)
    %45 = cir.binop(mul, %43, %44) : !u64i loc(#loc155)
    cir.libc.memmove %45 bytes from %41 to %39 : !cir.ptr<!void>, !u64i loc(#loc156)
    %46 = cir.const #cir.int<0> : !s8i loc(#loc60)
    %47 = cir.load %0 : !cir.ptr<!cir.ptr<!s8i>>, !cir.ptr<!s8i> loc(#loc61)
    %48 = cir.const #cir.int<100> : !s32i loc(#loc62)
    %49 = cir.const #cir.int<1> : !s32i loc(#loc63)
    %50 = cir.binop(sub, %48, %49) nsw : !s32i loc(#loc62)
    %51 = cir.ptr_stride(%47 : !cir.ptr<!s8i>, %50 : !s32i), !cir.ptr<!s8i> loc(#loc64)
    cir.store %46, %51 : !s8i, !cir.ptr<!s8i> loc(#loc157)
    %52 = cir.load %0 : !cir.ptr<!cir.ptr<!s8i>>, !cir.ptr<!s8i> loc(#loc65)
    cir.call @printLine(%52) : (!cir.ptr<!s8i>) -> () loc(#loc66)
    %53 = cir.get_global @free : !cir.ptr<!cir.func<!void (!cir.ptr<!void>)>> loc(#loc67)
    %54 = cir.load %0 : !cir.ptr<!cir.ptr<!s8i>>, !cir.ptr<!s8i> loc(#loc68)
    %55 = cir.cast(bitcast, %54 : !cir.ptr<!s8i>), !cir.ptr<!void> loc(#loc68)
    cir.call @free(%55) : (!cir.ptr<!void>) -> () extra(#fn_attr) loc(#loc67)
    cir.br ^bb7 loc(#loc42)
  ^bb7:  // pred: ^bb6
    cir.br ^bb8 loc(#loc40)
  ^bb8:  // pred: ^bb7
    cir.return loc(#loc10)
  } loc(#loc136)
  cir.func internal private @_ZN59CWE122_Heap_Based_Buffer_Overflow__c_CWE805_char_memmove_33L7goodG2BEv() extra(#fn_attr1) {
    %0 = cir.alloca !cir.ptr<!s8i>, !cir.ptr<!cir.ptr<!s8i>>, ["data", init] {alignment = 8 : i64} loc(#loc159)
    %1 = cir.alloca !cir.array<!s8i x 100>, !cir.ptr<!cir.array<!s8i x 100>>, ["source"] {alignment = 16 : i64} loc(#loc160)
    %2 = cir.alloca !cir.ptr<!s8i>, !cir.ptr<!cir.ptr<!s8i>>, ["data"] {alignment = 8 : i64} loc(#loc161)
    %3 = cir.alloca !cir.ptr<!cir.ptr<!s8i>>, !cir.ptr<!cir.ptr<!cir.ptr<!s8i>>>, ["dataRef", init, const] {alignment = 8 : i64} loc(#loc162)
    cir.store %2, %3 : !cir.ptr<!cir.ptr<!s8i>>, !cir.ptr<!cir.ptr<!cir.ptr<!s8i>>> loc(#loc78)
    %4 = cir.const #cir.ptr<null> : !cir.ptr<!s8i> loc(#loc79)
    cir.store %4, %2 : !cir.ptr<!s8i>, !cir.ptr<!cir.ptr<!s8i>> loc(#loc163)
    %5 = cir.get_global @malloc : !cir.ptr<!cir.func<!cir.ptr<!void> (!u64i)>> loc(#loc81)
    %6 = cir.const #cir.int<100> : !s32i loc(#loc82)
    %7 = cir.cast(integral, %6 : !s32i), !u64i loc(#loc82)
    %8 = cir.const #cir.int<1> : !u64i loc(#loc164)
    %9 = cir.binop(mul, %7, %8) : !u64i loc(#loc165)
    %10 = cir.call @malloc(%9) : (!u64i) -> !cir.ptr<!void> extra(#fn_attr) loc(#loc81)
    %11 = cir.cast(bitcast, %10 : !cir.ptr<!void>), !cir.ptr<!s8i> loc(#loc166)
    cir.store %11, %2 : !cir.ptr<!s8i>, !cir.ptr<!cir.ptr<!s8i>> loc(#loc167)
    cir.br ^bb1 loc(#loc168)
  ^bb1:  // pred: ^bb0
    %12 = cir.load %2 : !cir.ptr<!cir.ptr<!s8i>>, !cir.ptr<!s8i> loc(#loc89)
    %13 = cir.const #cir.ptr<null> : !cir.ptr<!s8i> loc(#loc90)
    %14 = cir.cmp(eq, %12, %13) : !cir.ptr<!s8i>, !cir.bool loc(#loc169)
    cir.brcond %14 ^bb2, ^bb3 loc(#loc170)
  ^bb2:  // pred: ^bb1
    %15 = cir.get_global @exit : !cir.ptr<!cir.func<!void (!s32i)>> loc(#loc92)
    %16 = cir.const #cir.int<1> : !s32i loc(#loc93)
    %17 = cir.unary(minus, %16) : !s32i, !s32i loc(#loc94)
    cir.call @exit(%17) : (!s32i) -> () extra(#fn_attr) loc(#loc92)
    cir.br ^bb3 loc(#loc88)
  ^bb3:  // 2 preds: ^bb1, ^bb2
    cir.br ^bb4 loc(#loc88)
  ^bb4:  // pred: ^bb3
    %18 = cir.const #cir.int<0> : !s8i loc(#loc95)
    %19 = cir.load %2 : !cir.ptr<!cir.ptr<!s8i>>, !cir.ptr<!s8i> loc(#loc96)
    %20 = cir.const #cir.int<0> : !s32i loc(#loc97)
    %21 = cir.ptr_stride(%19 : !cir.ptr<!s8i>, %20 : !s32i), !cir.ptr<!s8i> loc(#loc98)
    cir.store %18, %21 : !s8i, !cir.ptr<!s8i> loc(#loc171)
    cir.br ^bb5 loc(#loc172)
  ^bb5:  // pred: ^bb4
    %22 = cir.load %3 : !cir.ptr<!cir.ptr<!cir.ptr<!s8i>>>, !cir.ptr<!cir.ptr<!s8i>> loc(#loc72)
    %23 = cir.load %22 : !cir.ptr<!cir.ptr<!s8i>>, !cir.ptr<!s8i> loc(#loc72)
    cir.store %23, %0 : !cir.ptr<!s8i>, !cir.ptr<!cir.ptr<!s8i>> loc(#loc159)
    cir.br ^bb6 loc(#loc173)
  ^bb6:  // pred: ^bb5
    %24 = cir.cast(array_to_ptrdecay, %1 : !cir.ptr<!cir.array<!s8i x 100>>), !cir.ptr<!s8i> loc(#loc103)
    %25 = cir.cast(bitcast, %24 : !cir.ptr<!s8i>), !cir.ptr<!void> loc(#loc103)
    %26 = cir.const #cir.int<67> : !s8i loc(#loc104)
    %27 = cir.cast(integral, %26 : !s8i), !s32i loc(#loc104)
    %28 = cir.const #cir.int<100> : !s32i loc(#loc105)
    %29 = cir.const #cir.int<1> : !s32i loc(#loc106)
    %30 = cir.binop(sub, %28, %29) nsw : !s32i loc(#loc105)
    %31 = cir.cast(integral, %30 : !s32i), !u64i loc(#loc105)
    cir.libc.memset %31 bytes from %25 set to %27 : !cir.ptr<!void>, !s32i, !u64i loc(#loc174)
    %32 = cir.const #cir.int<0> : !s8i loc(#loc109)
    %33 = cir.const #cir.int<100> : !s32i loc(#loc110)
    %34 = cir.const #cir.int<1> : !s32i loc(#loc111)
    %35 = cir.binop(sub, %33, %34) nsw : !s32i loc(#loc110)
    %36 = cir.cast(array_to_ptrdecay, %1 : !cir.ptr<!cir.array<!s8i x 100>>), !cir.ptr<!s8i> loc(#loc112)
    %37 = cir.ptr_stride(%36 : !cir.ptr<!s8i>, %35 : !s32i), !cir.ptr<!s8i> loc(#loc112)
    cir.store %32, %37 : !s8i, !cir.ptr<!s8i> loc(#loc175)
    %38 = cir.load %0 : !cir.ptr<!cir.ptr<!s8i>>, !cir.ptr<!s8i> loc(#loc113)
    %39 = cir.cast(bitcast, %38 : !cir.ptr<!s8i>), !cir.ptr<!void> loc(#loc113)
    %40 = cir.cast(array_to_ptrdecay, %1 : !cir.ptr<!cir.array<!s8i x 100>>), !cir.ptr<!s8i> loc(#loc114)
    %41 = cir.cast(bitcast, %40 : !cir.ptr<!s8i>), !cir.ptr<!void> loc(#loc114)
    %42 = cir.const #cir.int<100> : !s32i loc(#loc115)
    %43 = cir.cast(integral, %42 : !s32i), !u64i loc(#loc115)
    %44 = cir.const #cir.int<1> : !u64i loc(#loc176)
    %45 = cir.binop(mul, %43, %44) : !u64i loc(#loc177)
    cir.libc.memmove %45 bytes from %41 to %39 : !cir.ptr<!void>, !u64i loc(#loc178)
    %46 = cir.const #cir.int<0> : !s8i loc(#loc120)
    %47 = cir.load %0 : !cir.ptr<!cir.ptr<!s8i>>, !cir.ptr<!s8i> loc(#loc121)
    %48 = cir.const #cir.int<100> : !s32i loc(#loc122)
    %49 = cir.const #cir.int<1> : !s32i loc(#loc123)
    %50 = cir.binop(sub, %48, %49) nsw : !s32i loc(#loc122)
    %51 = cir.ptr_stride(%47 : !cir.ptr<!s8i>, %50 : !s32i), !cir.ptr<!s8i> loc(#loc124)
    cir.store %46, %51 : !s8i, !cir.ptr<!s8i> loc(#loc179)
    %52 = cir.load %0 : !cir.ptr<!cir.ptr<!s8i>>, !cir.ptr<!s8i> loc(#loc125)
    cir.call @printLine(%52) : (!cir.ptr<!s8i>) -> () loc(#loc126)
    %53 = cir.get_global @free : !cir.ptr<!cir.func<!void (!cir.ptr<!void>)>> loc(#loc127)
    %54 = cir.load %0 : !cir.ptr<!cir.ptr<!s8i>>, !cir.ptr<!s8i> loc(#loc128)
    %55 = cir.cast(bitcast, %54 : !cir.ptr<!s8i>), !cir.ptr<!void> loc(#loc128)
    cir.call @free(%55) : (!cir.ptr<!void>) -> () extra(#fn_attr) loc(#loc127)
    cir.br ^bb7 loc(#loc102)
  ^bb7:  // pred: ^bb6
    cir.br ^bb8 loc(#loc100)
  ^bb8:  // pred: ^bb7
    cir.return loc(#loc70)
  } loc(#loc158)
  cir.func @_ZN59CWE122_Heap_Based_Buffer_Overflow__c_CWE805_char_memmove_334goodEv() extra(#fn_attr1) {
    cir.call @_ZN59CWE122_Heap_Based_Buffer_Overflow__c_CWE805_char_memmove_33L7goodG2BEv() : () -> () loc(#loc131)
    cir.return loc(#loc130)
  } loc(#loc180)
} loc(#loc)
#loc = loc("/home/ladisgin/git_proj/juliet-c/testcases/CWE122_Heap_Based_Buffer_Overflow/s07/CWE122_Heap_Based_Buffer_Overflow__c_CWE805_char_memmove_33.cpp":0:0)
#loc1 = loc("/usr/include/stdlib.h":672:1)
#loc2 = loc("/usr/include/stdlib.h":672:45)
#loc3 = loc("/usr/include/stdlib.h":756:1)
#loc4 = loc("/usr/include/stdlib.h":756:70)
#loc5 = loc("../../../testcasesupport/std_testcase_io.h":14:1)
#loc6 = loc("../../../testcasesupport/std_testcase_io.h":14:33)
#loc7 = loc("/usr/include/stdlib.h":687:1)
#loc8 = loc("/usr/include/stdlib.h":687:32)
#loc9 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_char_memmove_33.cpp":26:1)
#loc10 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_char_memmove_33.cpp":48:1)
#loc11 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_char_memmove_33.cpp":36:9)
#loc12 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_char_memmove_33.cpp":36:23)
#loc13 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_char_memmove_33.cpp":38:13)
#loc14 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_char_memmove_33.cpp":38:28)
#loc15 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_char_memmove_33.cpp":28:5)
#loc16 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_char_memmove_33.cpp":28:12)
#loc17 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_char_memmove_33.cpp":29:5)
#loc18 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_char_memmove_33.cpp":29:23)
#loc19 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_char_memmove_33.cpp":30:12)
#loc20 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_char_memmove_33.cpp":30:5)
#loc21 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_char_memmove_33.cpp":32:20)
#loc22 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_char_memmove_33.cpp":32:27)
#loc23 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_char_memmove_33.cpp":32:30)
#loc24 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_char_memmove_33.cpp":32:41)
#loc25 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_char_memmove_33.cpp":32:42)
#loc26 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_char_memmove_33.cpp":32:5)
#loc27 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_char_memmove_33.cpp":33:5)
#loc28 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_char_memmove_33.cpp":33:33)
#loc29 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_char_memmove_33.cpp":33:9)
#loc30 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_char_memmove_33.cpp":33:17)
#loc31 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_char_memmove_33.cpp":33:23)
#loc32 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_char_memmove_33.cpp":33:24)
#loc33 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_char_memmove_33.cpp":33:30)
#loc34 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_char_memmove_33.cpp":33:29)
#loc35 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_char_memmove_33.cpp":34:15)
#loc36 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_char_memmove_33.cpp":34:5)
#loc37 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_char_memmove_33.cpp":34:10)
#loc38 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_char_memmove_33.cpp":34:11)
#loc39 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_char_memmove_33.cpp":35:5)
#loc40 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_char_memmove_33.cpp":47:5)
#loc41 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_char_memmove_33.cpp":37:9)
#loc42 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_char_memmove_33.cpp":46:9)
#loc43 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_char_memmove_33.cpp":39:20)
#loc44 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_char_memmove_33.cpp":39:28)
#loc45 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_char_memmove_33.cpp":39:33)
#loc46 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_char_memmove_33.cpp":39:37)
#loc47 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_char_memmove_33.cpp":39:13)
#loc48 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_char_memmove_33.cpp":39:38)
#loc49 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_char_memmove_33.cpp":40:29)
#loc50 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_char_memmove_33.cpp":40:20)
#loc51 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_char_memmove_33.cpp":40:24)
#loc52 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_char_memmove_33.cpp":40:13)
#loc53 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_char_memmove_33.cpp":42:21)
#loc54 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_char_memmove_33.cpp":42:27)
#loc55 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_char_memmove_33.cpp":42:35)
#loc56 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_char_memmove_33.cpp":42:39)
#loc57 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_char_memmove_33.cpp":42:50)
#loc58 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_char_memmove_33.cpp":42:13)
#loc59 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_char_memmove_33.cpp":42:51)
#loc60 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_char_memmove_33.cpp":43:27)
#loc61 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_char_memmove_33.cpp":43:13)
#loc62 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_char_memmove_33.cpp":43:18)
#loc63 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_char_memmove_33.cpp":43:22)
#loc64 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_char_memmove_33.cpp":43:23)
#loc65 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_char_memmove_33.cpp":44:23)
#loc66 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_char_memmove_33.cpp":44:13)
#loc67 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_char_memmove_33.cpp":45:13)
#loc68 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_char_memmove_33.cpp":45:18)
#loc69 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_char_memmove_33.cpp":55:1)
#loc70 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_char_memmove_33.cpp":77:1)
#loc71 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_char_memmove_33.cpp":65:9)
#loc72 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_char_memmove_33.cpp":65:23)
#loc73 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_char_memmove_33.cpp":67:13)
#loc74 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_char_memmove_33.cpp":67:28)
#loc75 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_char_memmove_33.cpp":57:5)
#loc76 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_char_memmove_33.cpp":57:12)
#loc77 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_char_memmove_33.cpp":58:5)
#loc78 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_char_memmove_33.cpp":58:23)
#loc79 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_char_memmove_33.cpp":59:12)
#loc80 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_char_memmove_33.cpp":59:5)
#loc81 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_char_memmove_33.cpp":61:20)
#loc82 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_char_memmove_33.cpp":61:27)
#loc83 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_char_memmove_33.cpp":61:31)
#loc84 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_char_memmove_33.cpp":61:42)
#loc85 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_char_memmove_33.cpp":61:43)
#loc86 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_char_memmove_33.cpp":61:5)
#loc87 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_char_memmove_33.cpp":62:5)
#loc88 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_char_memmove_33.cpp":62:33)
#loc89 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_char_memmove_33.cpp":62:9)
#loc90 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_char_memmove_33.cpp":62:17)
#loc91 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_char_memmove_33.cpp":62:23)
#loc92 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_char_memmove_33.cpp":62:24)
#loc93 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_char_memmove_33.cpp":62:30)
#loc94 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_char_memmove_33.cpp":62:29)
#loc95 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_char_memmove_33.cpp":63:15)
#loc96 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_char_memmove_33.cpp":63:5)
#loc97 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_char_memmove_33.cpp":63:10)
#loc98 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_char_memmove_33.cpp":63:11)
#loc99 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_char_memmove_33.cpp":64:5)
#loc100 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_char_memmove_33.cpp":76:5)
#loc101 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_char_memmove_33.cpp":66:9)
#loc102 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_char_memmove_33.cpp":75:9)
#loc103 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_char_memmove_33.cpp":68:20)
#loc104 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_char_memmove_33.cpp":68:28)
#loc105 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_char_memmove_33.cpp":68:33)
#loc106 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_char_memmove_33.cpp":68:37)
#loc107 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_char_memmove_33.cpp":68:13)
#loc108 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_char_memmove_33.cpp":68:38)
#loc109 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_char_memmove_33.cpp":69:29)
#loc110 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_char_memmove_33.cpp":69:20)
#loc111 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_char_memmove_33.cpp":69:24)
#loc112 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_char_memmove_33.cpp":69:13)
#loc113 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_char_memmove_33.cpp":71:21)
#loc114 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_char_memmove_33.cpp":71:27)
#loc115 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_char_memmove_33.cpp":71:35)
#loc116 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_char_memmove_33.cpp":71:39)
#loc117 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_char_memmove_33.cpp":71:50)
#loc118 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_char_memmove_33.cpp":71:13)
#loc119 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_char_memmove_33.cpp":71:51)
#loc120 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_char_memmove_33.cpp":72:27)
#loc121 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_char_memmove_33.cpp":72:13)
#loc122 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_char_memmove_33.cpp":72:18)
#loc123 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_char_memmove_33.cpp":72:22)
#loc124 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_char_memmove_33.cpp":72:23)
#loc125 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_char_memmove_33.cpp":73:23)
#loc126 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_char_memmove_33.cpp":73:13)
#loc127 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_char_memmove_33.cpp":74:13)
#loc128 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_char_memmove_33.cpp":74:18)
#loc129 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_char_memmove_33.cpp":79:1)
#loc130 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_char_memmove_33.cpp":82:1)
#loc131 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_char_memmove_33.cpp":81:5)
#loc132 = loc(fused[#loc1, #loc2])
#loc133 = loc(fused[#loc3, #loc4])
#loc134 = loc(fused[#loc5, #loc6])
#loc135 = loc(fused[#loc7, #loc8])
#loc136 = loc(fused[#loc9, #loc10])
#loc137 = loc(fused[#loc11, #loc12])
#loc138 = loc(fused[#loc13, #loc14])
#loc139 = loc(fused[#loc15, #loc16])
#loc140 = loc(fused[#loc17, #loc18])
#loc141 = loc(fused[#loc20, #loc19])
#loc142 = loc(fused[#loc23, #loc24])
#loc143 = loc(fused[#loc22, #loc24])
#loc144 = loc(fused[#loc21, #loc25])
#loc145 = loc(fused[#loc26, #loc25])
#loc146 = loc(fused[#loc27, #loc28])
#loc147 = loc(fused[#loc29, #loc30])
#loc148 = loc(fused[#loc31, #loc28])
#loc149 = loc(fused[#loc36, #loc35])
#loc150 = loc(fused[#loc39, #loc40])
#loc151 = loc(fused[#loc41, #loc42])
#loc152 = loc(fused[#loc47, #loc48])
#loc153 = loc(fused[#loc52, #loc49])
#loc154 = loc(fused[#loc56, #loc57])
#loc155 = loc(fused[#loc55, #loc57])
#loc156 = loc(fused[#loc58, #loc59])
#loc157 = loc(fused[#loc61, #loc60])
#loc158 = loc(fused[#loc69, #loc70])
#loc159 = loc(fused[#loc71, #loc72])
#loc160 = loc(fused[#loc73, #loc74])
#loc161 = loc(fused[#loc75, #loc76])
#loc162 = loc(fused[#loc77, #loc78])
#loc163 = loc(fused[#loc80, #loc79])
#loc164 = loc(fused[#loc83, #loc84])
#loc165 = loc(fused[#loc82, #loc84])
#loc166 = loc(fused[#loc81, #loc85])
#loc167 = loc(fused[#loc86, #loc85])
#loc168 = loc(fused[#loc87, #loc88])
#loc169 = loc(fused[#loc89, #loc90])
#loc170 = loc(fused[#loc91, #loc88])
#loc171 = loc(fused[#loc96, #loc95])
#loc172 = loc(fused[#loc99, #loc100])
#loc173 = loc(fused[#loc101, #loc102])
#loc174 = loc(fused[#loc107, #loc108])
#loc175 = loc(fused[#loc112, #loc109])
#loc176 = loc(fused[#loc116, #loc117])
#loc177 = loc(fused[#loc115, #loc117])
#loc178 = loc(fused[#loc118, #loc119])
#loc179 = loc(fused[#loc121, #loc120])
#loc180 = loc(fused[#loc129, #loc130])
