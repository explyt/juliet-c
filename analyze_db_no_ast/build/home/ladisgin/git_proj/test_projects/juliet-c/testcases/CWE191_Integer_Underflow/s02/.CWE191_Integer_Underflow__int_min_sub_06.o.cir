!s32i = !cir.int<s, 32>
!s8i = !cir.int<s, 8>
!void = !cir.void
#fn_attr = #cir<extra({inline = #cir.inline<no>, nothrow = #cir.nothrow, optnone = #cir.optnone})>
module @"/home/ladisgin/git_proj/test_projects/juliet-c/testcases/CWE191_Integer_Underflow/s02/CWE191_Integer_Underflow__int_min_sub_06.c" attributes {cir.lang = #cir.lang<c>, cir.sob = #cir.signed_overflow_behavior<undefined>, cir.triple = "x86_64-unknown-linux-gnu", dlti.dl_spec = #dlti.dl_spec<#dlti.dl_entry<!llvm.ptr<271>, dense<32> : vector<4xi64>>, #dlti.dl_entry<!llvm.ptr<270>, dense<32> : vector<4xi64>>, #dlti.dl_entry<f16, dense<16> : vector<2xi64>>, #dlti.dl_entry<i128, dense<128> : vector<2xi64>>, #dlti.dl_entry<f64, dense<64> : vector<2xi64>>, #dlti.dl_entry<i64, dense<64> : vector<2xi64>>, #dlti.dl_entry<f128, dense<128> : vector<2xi64>>, #dlti.dl_entry<!llvm.ptr<272>, dense<64> : vector<4xi64>>, #dlti.dl_entry<i8, dense<8> : vector<2xi64>>, #dlti.dl_entry<i16, dense<16> : vector<2xi64>>, #dlti.dl_entry<i32, dense<32> : vector<2xi64>>, #dlti.dl_entry<f80, dense<128> : vector<2xi64>>, #dlti.dl_entry<!llvm.ptr, dense<64> : vector<4xi64>>, #dlti.dl_entry<i1, dense<8> : vector<2xi64>>, #dlti.dl_entry<"dlti.endianness", "little">, #dlti.dl_entry<"dlti.stack_alignment", 128 : i64>>, llvm.data_layout = "e-m:e-p270:32:32-p271:32:32-p272:64:64-i64:64-i128:128-f80:128-n8:16:32:64-S128"} {
  cir.func private  @printIntLine(!s32i) loc(#loc176)
  cir.func no_proto  @CWE191_Integer_Underflow__int_min_sub_06_bad() extra(#fn_attr) {
    %0 = cir.alloca !s32i, !cir.ptr<!s32i>, ["data"] {alignment = 4 : i64} loc(#loc178)
    %1 = cir.const #cir.int<0> : !s32i loc(#loc7)
    cir.store %1, %0 : !s32i, !cir.ptr<!s32i> loc(#loc179)
    cir.scope {
      %2 = cir.const #cir.int<5> : !s32i loc(#loc11)
      %3 = cir.const #cir.int<5> : !s32i loc(#loc12)
      %4 = cir.cmp(eq, %2, %3) : !s32i, !s32i loc(#loc181)
      %5 = cir.cast(int_to_bool, %4 : !s32i), !cir.bool loc(#loc13)
      cir.if %5 {
        %6 = cir.const #cir.int<2147483647> : !s32i loc(#loc15)
        %7 = cir.unary(minus, %6) : !s32i, !s32i loc(#loc15)
        %8 = cir.const #cir.int<1> : !s32i loc(#loc15)
        %9 = cir.binop(sub, %7, %8) nsw : !s32i loc(#loc15)
        cir.store %9, %0 : !s32i, !cir.ptr<!s32i> loc(#loc183)
      } loc(#loc182)
    } loc(#loc180)
    cir.scope {
      %2 = cir.const #cir.int<5> : !s32i loc(#loc19)
      %3 = cir.const #cir.int<5> : !s32i loc(#loc20)
      %4 = cir.cmp(eq, %2, %3) : !s32i, !s32i loc(#loc185)
      %5 = cir.cast(int_to_bool, %4 : !s32i), !cir.bool loc(#loc21)
      cir.if %5 {
        cir.scope {
          %6 = cir.alloca !s32i, !cir.ptr<!s32i>, ["result", init] {alignment = 4 : i64} loc(#loc188)
          %7 = cir.load %0 : !cir.ptr<!s32i>, !s32i loc(#loc27)
          %8 = cir.const #cir.int<1> : !s32i loc(#loc26)
          %9 = cir.binop(sub, %7, %8) nsw : !s32i loc(#loc27)
          cir.store %9, %6 : !s32i, !cir.ptr<!s32i> loc(#loc188)
          %10 = cir.load %6 : !cir.ptr<!s32i>, !s32i loc(#loc28)
          cir.call @printIntLine(%10) : (!s32i) -> () loc(#loc29)
        } loc(#loc187)
      } loc(#loc186)
    } loc(#loc184)
    cir.return loc(#loc4)
  } loc(#loc177)
  cir.func no_proto  @CWE191_Integer_Underflow__int_min_sub_06_good() extra(#fn_attr) {
    %0 = cir.get_global @goodB2G1 : !cir.ptr<!cir.func<!void ()>> loc(#loc190)
    cir.call %0() : (!cir.ptr<!cir.func<!void ()>>) -> () loc(#loc32)
    %1 = cir.get_global @goodB2G2 : !cir.ptr<!cir.func<!void ()>> loc(#loc191)
    cir.call %1() : (!cir.ptr<!cir.func<!void ()>>) -> () loc(#loc34)
    %2 = cir.get_global @goodG2B1 : !cir.ptr<!cir.func<!void ()>> loc(#loc192)
    cir.call %2() : (!cir.ptr<!cir.func<!void ()>>) -> () loc(#loc36)
    %3 = cir.get_global @goodG2B2 : !cir.ptr<!cir.func<!void ()>> loc(#loc193)
    cir.call %3() : (!cir.ptr<!cir.func<!void ()>>) -> () loc(#loc38)
    cir.return loc(#loc31)
  } loc(#loc189)
  cir.func private  @printLine(!cir.ptr<!s8i>) loc(#loc194)
  cir.global "private"  constant internal dsolocal @".str" = #cir.const_array<"Benign, fixed string\00" : !cir.array<!s8i x 21>> : !cir.array<!s8i x 21> {alignment = 1 : i64} loc(#loc42)
  cir.global "private"  constant internal dsolocal @".str1" = #cir.const_array<"data value is too large to perform subtraction.\00" : !cir.array<!s8i x 48>> : !cir.array<!s8i x 48> {alignment = 1 : i64} loc(#loc43)
  cir.func no_proto internal private  @goodB2G1() extra(#fn_attr) {
    %0 = cir.alloca !s32i, !cir.ptr<!s32i>, ["data"] {alignment = 4 : i64} loc(#loc196)
    %1 = cir.const #cir.int<0> : !s32i loc(#loc48)
    cir.store %1, %0 : !s32i, !cir.ptr<!s32i> loc(#loc197)
    cir.scope {
      %2 = cir.const #cir.int<5> : !s32i loc(#loc52)
      %3 = cir.const #cir.int<5> : !s32i loc(#loc53)
      %4 = cir.cmp(eq, %2, %3) : !s32i, !s32i loc(#loc199)
      %5 = cir.cast(int_to_bool, %4 : !s32i), !cir.bool loc(#loc54)
      cir.if %5 {
        %6 = cir.const #cir.int<2147483647> : !s32i loc(#loc56)
        %7 = cir.unary(minus, %6) : !s32i, !s32i loc(#loc56)
        %8 = cir.const #cir.int<1> : !s32i loc(#loc56)
        %9 = cir.binop(sub, %7, %8) nsw : !s32i loc(#loc56)
        cir.store %9, %0 : !s32i, !cir.ptr<!s32i> loc(#loc201)
      } loc(#loc200)
    } loc(#loc198)
    cir.scope {
      %2 = cir.const #cir.int<5> : !s32i loc(#loc60)
      %3 = cir.const #cir.int<5> : !s32i loc(#loc61)
      %4 = cir.cmp(ne, %2, %3) : !s32i, !s32i loc(#loc203)
      %5 = cir.cast(int_to_bool, %4 : !s32i), !cir.bool loc(#loc62)
      cir.if %5 {
        %6 = cir.get_global @".str" : !cir.ptr<!cir.array<!s8i x 21>> loc(#loc42)
        %7 = cir.cast(array_to_ptrdecay, %6 : !cir.ptr<!cir.array<!s8i x 21>>), !cir.ptr<!s8i> loc(#loc42)
        cir.call @printLine(%7) : (!cir.ptr<!s8i>) -> () loc(#loc66)
      } else {
        cir.scope {
          %6 = cir.load %0 : !cir.ptr<!s32i>, !s32i loc(#loc69)
          %7 = cir.const #cir.int<2147483647> : !s32i loc(#loc70)
          %8 = cir.unary(minus, %7) : !s32i, !s32i loc(#loc70)
          %9 = cir.const #cir.int<1> : !s32i loc(#loc70)
          %10 = cir.binop(sub, %8, %9) nsw : !s32i loc(#loc70)
          %11 = cir.cmp(gt, %6, %10) : !s32i, !s32i loc(#loc206)
          %12 = cir.cast(int_to_bool, %11 : !s32i), !cir.bool loc(#loc71)
          cir.if %12 {
            %13 = cir.alloca !s32i, !cir.ptr<!s32i>, ["result", init] {alignment = 4 : i64} loc(#loc208)
            %14 = cir.load %0 : !cir.ptr<!s32i>, !s32i loc(#loc77)
            %15 = cir.const #cir.int<1> : !s32i loc(#loc76)
            %16 = cir.binop(sub, %14, %15) nsw : !s32i loc(#loc77)
            cir.store %16, %13 : !s32i, !cir.ptr<!s32i> loc(#loc208)
            %17 = cir.load %13 : !cir.ptr<!s32i>, !s32i loc(#loc78)
            cir.call @printIntLine(%17) : (!s32i) -> () loc(#loc79)
          } else {
            %13 = cir.get_global @".str1" : !cir.ptr<!cir.array<!s8i x 48>> loc(#loc43)
            %14 = cir.cast(array_to_ptrdecay, %13 : !cir.ptr<!cir.array<!s8i x 48>>), !cir.ptr<!s8i> loc(#loc43)
            cir.call @printLine(%14) : (!cir.ptr<!s8i>) -> () loc(#loc80)
          } loc(#loc207)
        } loc(#loc205)
      } loc(#loc204)
    } loc(#loc202)
    cir.return loc(#loc45)
  } loc(#loc195)
  cir.func no_proto internal private  @goodB2G2() extra(#fn_attr) {
    %0 = cir.alloca !s32i, !cir.ptr<!s32i>, ["data"] {alignment = 4 : i64} loc(#loc210)
    %1 = cir.const #cir.int<0> : !s32i loc(#loc85)
    cir.store %1, %0 : !s32i, !cir.ptr<!s32i> loc(#loc211)
    cir.scope {
      %2 = cir.const #cir.int<5> : !s32i loc(#loc89)
      %3 = cir.const #cir.int<5> : !s32i loc(#loc90)
      %4 = cir.cmp(eq, %2, %3) : !s32i, !s32i loc(#loc213)
      %5 = cir.cast(int_to_bool, %4 : !s32i), !cir.bool loc(#loc91)
      cir.if %5 {
        %6 = cir.const #cir.int<2147483647> : !s32i loc(#loc93)
        %7 = cir.unary(minus, %6) : !s32i, !s32i loc(#loc93)
        %8 = cir.const #cir.int<1> : !s32i loc(#loc93)
        %9 = cir.binop(sub, %7, %8) nsw : !s32i loc(#loc93)
        cir.store %9, %0 : !s32i, !cir.ptr<!s32i> loc(#loc215)
      } loc(#loc214)
    } loc(#loc212)
    cir.scope {
      %2 = cir.const #cir.int<5> : !s32i loc(#loc97)
      %3 = cir.const #cir.int<5> : !s32i loc(#loc98)
      %4 = cir.cmp(eq, %2, %3) : !s32i, !s32i loc(#loc217)
      %5 = cir.cast(int_to_bool, %4 : !s32i), !cir.bool loc(#loc99)
      cir.if %5 {
        cir.scope {
          %6 = cir.load %0 : !cir.ptr<!s32i>, !s32i loc(#loc103)
          %7 = cir.const #cir.int<2147483647> : !s32i loc(#loc104)
          %8 = cir.unary(minus, %7) : !s32i, !s32i loc(#loc104)
          %9 = cir.const #cir.int<1> : !s32i loc(#loc104)
          %10 = cir.binop(sub, %8, %9) nsw : !s32i loc(#loc104)
          %11 = cir.cmp(gt, %6, %10) : !s32i, !s32i loc(#loc220)
          %12 = cir.cast(int_to_bool, %11 : !s32i), !cir.bool loc(#loc105)
          cir.if %12 {
            %13 = cir.alloca !s32i, !cir.ptr<!s32i>, ["result", init] {alignment = 4 : i64} loc(#loc222)
            %14 = cir.load %0 : !cir.ptr<!s32i>, !s32i loc(#loc111)
            %15 = cir.const #cir.int<1> : !s32i loc(#loc110)
            %16 = cir.binop(sub, %14, %15) nsw : !s32i loc(#loc111)
            cir.store %16, %13 : !s32i, !cir.ptr<!s32i> loc(#loc222)
            %17 = cir.load %13 : !cir.ptr<!s32i>, !s32i loc(#loc112)
            cir.call @printIntLine(%17) : (!s32i) -> () loc(#loc113)
          } else {
            %13 = cir.get_global @".str1" : !cir.ptr<!cir.array<!s8i x 48>> loc(#loc114)
            %14 = cir.cast(array_to_ptrdecay, %13 : !cir.ptr<!cir.array<!s8i x 48>>), !cir.ptr<!s8i> loc(#loc114)
            cir.call @printLine(%14) : (!cir.ptr<!s8i>) -> () loc(#loc115)
          } loc(#loc221)
        } loc(#loc219)
      } loc(#loc218)
    } loc(#loc216)
    cir.return loc(#loc82)
  } loc(#loc209)
  cir.func no_proto internal private  @goodG2B1() extra(#fn_attr) {
    %0 = cir.alloca !s32i, !cir.ptr<!s32i>, ["data"] {alignment = 4 : i64} loc(#loc224)
    %1 = cir.const #cir.int<0> : !s32i loc(#loc120)
    cir.store %1, %0 : !s32i, !cir.ptr<!s32i> loc(#loc225)
    cir.scope {
      %2 = cir.const #cir.int<5> : !s32i loc(#loc124)
      %3 = cir.const #cir.int<5> : !s32i loc(#loc125)
      %4 = cir.cmp(ne, %2, %3) : !s32i, !s32i loc(#loc227)
      %5 = cir.cast(int_to_bool, %4 : !s32i), !cir.bool loc(#loc126)
      cir.if %5 {
        %6 = cir.get_global @".str" : !cir.ptr<!cir.array<!s8i x 21>> loc(#loc130)
        %7 = cir.cast(array_to_ptrdecay, %6 : !cir.ptr<!cir.array<!s8i x 21>>), !cir.ptr<!s8i> loc(#loc130)
        cir.call @printLine(%7) : (!cir.ptr<!s8i>) -> () loc(#loc131)
      } else {
        %6 = cir.const #cir.int<2> : !s32i loc(#loc132)
        %7 = cir.unary(minus, %6) : !s32i, !s32i loc(#loc133)
        cir.store %7, %0 : !s32i, !cir.ptr<!s32i> loc(#loc229)
      } loc(#loc228)
    } loc(#loc226)
    cir.scope {
      %2 = cir.const #cir.int<5> : !s32i loc(#loc137)
      %3 = cir.const #cir.int<5> : !s32i loc(#loc138)
      %4 = cir.cmp(eq, %2, %3) : !s32i, !s32i loc(#loc231)
      %5 = cir.cast(int_to_bool, %4 : !s32i), !cir.bool loc(#loc139)
      cir.if %5 {
        cir.scope {
          %6 = cir.alloca !s32i, !cir.ptr<!s32i>, ["result", init] {alignment = 4 : i64} loc(#loc234)
          %7 = cir.load %0 : !cir.ptr<!s32i>, !s32i loc(#loc145)
          %8 = cir.const #cir.int<1> : !s32i loc(#loc144)
          %9 = cir.binop(sub, %7, %8) nsw : !s32i loc(#loc145)
          cir.store %9, %6 : !s32i, !cir.ptr<!s32i> loc(#loc234)
          %10 = cir.load %6 : !cir.ptr<!s32i>, !s32i loc(#loc146)
          cir.call @printIntLine(%10) : (!s32i) -> () loc(#loc147)
        } loc(#loc233)
      } loc(#loc232)
    } loc(#loc230)
    cir.return loc(#loc117)
  } loc(#loc223)
  cir.func no_proto internal private  @goodG2B2() extra(#fn_attr) {
    %0 = cir.alloca !s32i, !cir.ptr<!s32i>, ["data"] {alignment = 4 : i64} loc(#loc236)
    %1 = cir.const #cir.int<0> : !s32i loc(#loc152)
    cir.store %1, %0 : !s32i, !cir.ptr<!s32i> loc(#loc237)
    cir.scope {
      %2 = cir.const #cir.int<5> : !s32i loc(#loc156)
      %3 = cir.const #cir.int<5> : !s32i loc(#loc157)
      %4 = cir.cmp(eq, %2, %3) : !s32i, !s32i loc(#loc239)
      %5 = cir.cast(int_to_bool, %4 : !s32i), !cir.bool loc(#loc158)
      cir.if %5 {
        %6 = cir.const #cir.int<2> : !s32i loc(#loc160)
        %7 = cir.unary(minus, %6) : !s32i, !s32i loc(#loc161)
        cir.store %7, %0 : !s32i, !cir.ptr<!s32i> loc(#loc241)
      } loc(#loc240)
    } loc(#loc238)
    cir.scope {
      %2 = cir.const #cir.int<5> : !s32i loc(#loc165)
      %3 = cir.const #cir.int<5> : !s32i loc(#loc166)
      %4 = cir.cmp(eq, %2, %3) : !s32i, !s32i loc(#loc243)
      %5 = cir.cast(int_to_bool, %4 : !s32i), !cir.bool loc(#loc167)
      cir.if %5 {
        cir.scope {
          %6 = cir.alloca !s32i, !cir.ptr<!s32i>, ["result", init] {alignment = 4 : i64} loc(#loc246)
          %7 = cir.load %0 : !cir.ptr<!s32i>, !s32i loc(#loc173)
          %8 = cir.const #cir.int<1> : !s32i loc(#loc172)
          %9 = cir.binop(sub, %7, %8) nsw : !s32i loc(#loc173)
          cir.store %9, %6 : !s32i, !cir.ptr<!s32i> loc(#loc246)
          %10 = cir.load %6 : !cir.ptr<!s32i>, !s32i loc(#loc174)
          cir.call @printIntLine(%10) : (!s32i) -> () loc(#loc175)
        } loc(#loc245)
      } loc(#loc244)
    } loc(#loc242)
    cir.return loc(#loc149)
  } loc(#loc235)
} loc(#loc)
#loc = loc("/home/ladisgin/git_proj/test_projects/juliet-c/testcases/CWE191_Integer_Underflow/s02/CWE191_Integer_Underflow__int_min_sub_06.c":0:0)
#loc1 = loc("../../../testcasesupport/std_testcase_io.h":18:1)
#loc2 = loc("../../../testcasesupport/std_testcase_io.h":18:33)
#loc3 = loc("CWE191_Integer_Underflow__int_min_sub_06.c":27:1)
#loc4 = loc("CWE191_Integer_Underflow__int_min_sub_06.c":45:1)
#loc5 = loc("CWE191_Integer_Underflow__int_min_sub_06.c":29:5)
#loc6 = loc("CWE191_Integer_Underflow__int_min_sub_06.c":29:9)
#loc7 = loc("CWE191_Integer_Underflow__int_min_sub_06.c":31:12)
#loc8 = loc("CWE191_Integer_Underflow__int_min_sub_06.c":31:5)
#loc9 = loc("CWE191_Integer_Underflow__int_min_sub_06.c":32:5)
#loc10 = loc("CWE191_Integer_Underflow__int_min_sub_06.c":36:5)
#loc11 = loc("CWE191_Integer_Underflow__int_min_sub_06.c":32:8)
#loc12 = loc("CWE191_Integer_Underflow__int_min_sub_06.c":32:27)
#loc13 = loc("CWE191_Integer_Underflow__int_min_sub_06.c":32:25)
#loc14 = loc("CWE191_Integer_Underflow__int_min_sub_06.c":33:5)
#loc15 = loc("CWE191_Integer_Underflow__int_min_sub_06.c":35:16)
#loc16 = loc("CWE191_Integer_Underflow__int_min_sub_06.c":35:9)
#loc17 = loc("CWE191_Integer_Underflow__int_min_sub_06.c":37:5)
#loc18 = loc("CWE191_Integer_Underflow__int_min_sub_06.c":44:5)
#loc19 = loc("CWE191_Integer_Underflow__int_min_sub_06.c":37:8)
#loc20 = loc("CWE191_Integer_Underflow__int_min_sub_06.c":37:27)
#loc21 = loc("CWE191_Integer_Underflow__int_min_sub_06.c":37:25)
#loc22 = loc("CWE191_Integer_Underflow__int_min_sub_06.c":38:5)
#loc23 = loc("CWE191_Integer_Underflow__int_min_sub_06.c":39:9)
#loc24 = loc("CWE191_Integer_Underflow__int_min_sub_06.c":43:9)
#loc25 = loc("CWE191_Integer_Underflow__int_min_sub_06.c":41:13)
#loc26 = loc("CWE191_Integer_Underflow__int_min_sub_06.c":41:33)
#loc27 = loc("CWE191_Integer_Underflow__int_min_sub_06.c":41:26)
#loc28 = loc("CWE191_Integer_Underflow__int_min_sub_06.c":42:26)
#loc29 = loc("CWE191_Integer_Underflow__int_min_sub_06.c":42:13)
#loc30 = loc("CWE191_Integer_Underflow__int_min_sub_06.c":155:1)
#loc31 = loc("CWE191_Integer_Underflow__int_min_sub_06.c":161:1)
#loc32 = loc("CWE191_Integer_Underflow__int_min_sub_06.c":157:5)
#loc33 = loc("CWE191_Integer_Underflow__int_min_sub_06.c":157:14)
#loc34 = loc("CWE191_Integer_Underflow__int_min_sub_06.c":158:5)
#loc35 = loc("CWE191_Integer_Underflow__int_min_sub_06.c":158:14)
#loc36 = loc("CWE191_Integer_Underflow__int_min_sub_06.c":159:5)
#loc37 = loc("CWE191_Integer_Underflow__int_min_sub_06.c":159:14)
#loc38 = loc("CWE191_Integer_Underflow__int_min_sub_06.c":160:5)
#loc39 = loc("CWE191_Integer_Underflow__int_min_sub_06.c":160:14)
#loc40 = loc("../../../testcasesupport/std_testcase_io.h":14:1)
#loc41 = loc("../../../testcasesupport/std_testcase_io.h":14:33)
#loc42 = loc("CWE191_Integer_Underflow__int_min_sub_06.c":65:19)
#loc43 = loc("CWE191_Integer_Underflow__int_min_sub_06.c":77:23)
#loc44 = loc("CWE191_Integer_Underflow__int_min_sub_06.c":52:1)
#loc45 = loc("CWE191_Integer_Underflow__int_min_sub_06.c":80:1)
#loc46 = loc("CWE191_Integer_Underflow__int_min_sub_06.c":54:5)
#loc47 = loc("CWE191_Integer_Underflow__int_min_sub_06.c":54:9)
#loc48 = loc("CWE191_Integer_Underflow__int_min_sub_06.c":56:12)
#loc49 = loc("CWE191_Integer_Underflow__int_min_sub_06.c":56:5)
#loc50 = loc("CWE191_Integer_Underflow__int_min_sub_06.c":57:5)
#loc51 = loc("CWE191_Integer_Underflow__int_min_sub_06.c":61:5)
#loc52 = loc("CWE191_Integer_Underflow__int_min_sub_06.c":57:8)
#loc53 = loc("CWE191_Integer_Underflow__int_min_sub_06.c":57:27)
#loc54 = loc("CWE191_Integer_Underflow__int_min_sub_06.c":57:25)
#loc55 = loc("CWE191_Integer_Underflow__int_min_sub_06.c":58:5)
#loc56 = loc("CWE191_Integer_Underflow__int_min_sub_06.c":60:16)
#loc57 = loc("CWE191_Integer_Underflow__int_min_sub_06.c":60:9)
#loc58 = loc("CWE191_Integer_Underflow__int_min_sub_06.c":62:5)
#loc59 = loc("CWE191_Integer_Underflow__int_min_sub_06.c":79:5)
#loc60 = loc("CWE191_Integer_Underflow__int_min_sub_06.c":62:8)
#loc61 = loc("CWE191_Integer_Underflow__int_min_sub_06.c":62:27)
#loc62 = loc("CWE191_Integer_Underflow__int_min_sub_06.c":62:25)
#loc63 = loc("CWE191_Integer_Underflow__int_min_sub_06.c":63:5)
#loc64 = loc("CWE191_Integer_Underflow__int_min_sub_06.c":66:5)
#loc65 = loc("CWE191_Integer_Underflow__int_min_sub_06.c":68:5)
#loc66 = loc("CWE191_Integer_Underflow__int_min_sub_06.c":65:9)
#loc67 = loc("CWE191_Integer_Underflow__int_min_sub_06.c":70:9)
#loc68 = loc("CWE191_Integer_Underflow__int_min_sub_06.c":78:9)
#loc69 = loc("CWE191_Integer_Underflow__int_min_sub_06.c":70:13)
#loc70 = loc("CWE191_Integer_Underflow__int_min_sub_06.c":70:20)
#loc71 = loc("CWE191_Integer_Underflow__int_min_sub_06.c":70:18)
#loc72 = loc("CWE191_Integer_Underflow__int_min_sub_06.c":71:9)
#loc73 = loc("CWE191_Integer_Underflow__int_min_sub_06.c":74:9)
#loc74 = loc("CWE191_Integer_Underflow__int_min_sub_06.c":76:9)
#loc75 = loc("CWE191_Integer_Underflow__int_min_sub_06.c":72:13)
#loc76 = loc("CWE191_Integer_Underflow__int_min_sub_06.c":72:33)
#loc77 = loc("CWE191_Integer_Underflow__int_min_sub_06.c":72:26)
#loc78 = loc("CWE191_Integer_Underflow__int_min_sub_06.c":73:26)
#loc79 = loc("CWE191_Integer_Underflow__int_min_sub_06.c":73:13)
#loc80 = loc("CWE191_Integer_Underflow__int_min_sub_06.c":77:13)
#loc81 = loc("CWE191_Integer_Underflow__int_min_sub_06.c":83:1)
#loc82 = loc("CWE191_Integer_Underflow__int_min_sub_06.c":106:1)
#loc83 = loc("CWE191_Integer_Underflow__int_min_sub_06.c":85:5)
#loc84 = loc("CWE191_Integer_Underflow__int_min_sub_06.c":85:9)
#loc85 = loc("CWE191_Integer_Underflow__int_min_sub_06.c":87:12)
#loc86 = loc("CWE191_Integer_Underflow__int_min_sub_06.c":87:5)
#loc87 = loc("CWE191_Integer_Underflow__int_min_sub_06.c":88:5)
#loc88 = loc("CWE191_Integer_Underflow__int_min_sub_06.c":92:5)
#loc89 = loc("CWE191_Integer_Underflow__int_min_sub_06.c":88:8)
#loc90 = loc("CWE191_Integer_Underflow__int_min_sub_06.c":88:27)
#loc91 = loc("CWE191_Integer_Underflow__int_min_sub_06.c":88:25)
#loc92 = loc("CWE191_Integer_Underflow__int_min_sub_06.c":89:5)
#loc93 = loc("CWE191_Integer_Underflow__int_min_sub_06.c":91:16)
#loc94 = loc("CWE191_Integer_Underflow__int_min_sub_06.c":91:9)
#loc95 = loc("CWE191_Integer_Underflow__int_min_sub_06.c":93:5)
#loc96 = loc("CWE191_Integer_Underflow__int_min_sub_06.c":105:5)
#loc97 = loc("CWE191_Integer_Underflow__int_min_sub_06.c":93:8)
#loc98 = loc("CWE191_Integer_Underflow__int_min_sub_06.c":93:27)
#loc99 = loc("CWE191_Integer_Underflow__int_min_sub_06.c":93:25)
#loc100 = loc("CWE191_Integer_Underflow__int_min_sub_06.c":94:5)
#loc101 = loc("CWE191_Integer_Underflow__int_min_sub_06.c":96:9)
#loc102 = loc("CWE191_Integer_Underflow__int_min_sub_06.c":104:9)
#loc103 = loc("CWE191_Integer_Underflow__int_min_sub_06.c":96:13)
#loc104 = loc("CWE191_Integer_Underflow__int_min_sub_06.c":96:20)
#loc105 = loc("CWE191_Integer_Underflow__int_min_sub_06.c":96:18)
#loc106 = loc("CWE191_Integer_Underflow__int_min_sub_06.c":97:9)
#loc107 = loc("CWE191_Integer_Underflow__int_min_sub_06.c":100:9)
#loc108 = loc("CWE191_Integer_Underflow__int_min_sub_06.c":102:9)
#loc109 = loc("CWE191_Integer_Underflow__int_min_sub_06.c":98:13)
#loc110 = loc("CWE191_Integer_Underflow__int_min_sub_06.c":98:33)
#loc111 = loc("CWE191_Integer_Underflow__int_min_sub_06.c":98:26)
#loc112 = loc("CWE191_Integer_Underflow__int_min_sub_06.c":99:26)
#loc113 = loc("CWE191_Integer_Underflow__int_min_sub_06.c":99:13)
#loc114 = loc("CWE191_Integer_Underflow__int_min_sub_06.c":103:23)
#loc115 = loc("CWE191_Integer_Underflow__int_min_sub_06.c":103:13)
#loc116 = loc("CWE191_Integer_Underflow__int_min_sub_06.c":109:1)
#loc117 = loc("CWE191_Integer_Underflow__int_min_sub_06.c":132:1)
#loc118 = loc("CWE191_Integer_Underflow__int_min_sub_06.c":111:5)
#loc119 = loc("CWE191_Integer_Underflow__int_min_sub_06.c":111:9)
#loc120 = loc("CWE191_Integer_Underflow__int_min_sub_06.c":113:12)
#loc121 = loc("CWE191_Integer_Underflow__int_min_sub_06.c":113:5)
#loc122 = loc("CWE191_Integer_Underflow__int_min_sub_06.c":114:5)
#loc123 = loc("CWE191_Integer_Underflow__int_min_sub_06.c":123:5)
#loc124 = loc("CWE191_Integer_Underflow__int_min_sub_06.c":114:8)
#loc125 = loc("CWE191_Integer_Underflow__int_min_sub_06.c":114:27)
#loc126 = loc("CWE191_Integer_Underflow__int_min_sub_06.c":114:25)
#loc127 = loc("CWE191_Integer_Underflow__int_min_sub_06.c":115:5)
#loc128 = loc("CWE191_Integer_Underflow__int_min_sub_06.c":118:5)
#loc129 = loc("CWE191_Integer_Underflow__int_min_sub_06.c":120:5)
#loc130 = loc("CWE191_Integer_Underflow__int_min_sub_06.c":117:19)
#loc131 = loc("CWE191_Integer_Underflow__int_min_sub_06.c":117:9)
#loc132 = loc("CWE191_Integer_Underflow__int_min_sub_06.c":122:17)
#loc133 = loc("CWE191_Integer_Underflow__int_min_sub_06.c":122:16)
#loc134 = loc("CWE191_Integer_Underflow__int_min_sub_06.c":122:9)
#loc135 = loc("CWE191_Integer_Underflow__int_min_sub_06.c":124:5)
#loc136 = loc("CWE191_Integer_Underflow__int_min_sub_06.c":131:5)
#loc137 = loc("CWE191_Integer_Underflow__int_min_sub_06.c":124:8)
#loc138 = loc("CWE191_Integer_Underflow__int_min_sub_06.c":124:27)
#loc139 = loc("CWE191_Integer_Underflow__int_min_sub_06.c":124:25)
#loc140 = loc("CWE191_Integer_Underflow__int_min_sub_06.c":125:5)
#loc141 = loc("CWE191_Integer_Underflow__int_min_sub_06.c":126:9)
#loc142 = loc("CWE191_Integer_Underflow__int_min_sub_06.c":130:9)
#loc143 = loc("CWE191_Integer_Underflow__int_min_sub_06.c":128:13)
#loc144 = loc("CWE191_Integer_Underflow__int_min_sub_06.c":128:33)
#loc145 = loc("CWE191_Integer_Underflow__int_min_sub_06.c":128:26)
#loc146 = loc("CWE191_Integer_Underflow__int_min_sub_06.c":129:26)
#loc147 = loc("CWE191_Integer_Underflow__int_min_sub_06.c":129:13)
#loc148 = loc("CWE191_Integer_Underflow__int_min_sub_06.c":135:1)
#loc149 = loc("CWE191_Integer_Underflow__int_min_sub_06.c":153:1)
#loc150 = loc("CWE191_Integer_Underflow__int_min_sub_06.c":137:5)
#loc151 = loc("CWE191_Integer_Underflow__int_min_sub_06.c":137:9)
#loc152 = loc("CWE191_Integer_Underflow__int_min_sub_06.c":139:12)
#loc153 = loc("CWE191_Integer_Underflow__int_min_sub_06.c":139:5)
#loc154 = loc("CWE191_Integer_Underflow__int_min_sub_06.c":140:5)
#loc155 = loc("CWE191_Integer_Underflow__int_min_sub_06.c":144:5)
#loc156 = loc("CWE191_Integer_Underflow__int_min_sub_06.c":140:8)
#loc157 = loc("CWE191_Integer_Underflow__int_min_sub_06.c":140:27)
#loc158 = loc("CWE191_Integer_Underflow__int_min_sub_06.c":140:25)
#loc159 = loc("CWE191_Integer_Underflow__int_min_sub_06.c":141:5)
#loc160 = loc("CWE191_Integer_Underflow__int_min_sub_06.c":143:17)
#loc161 = loc("CWE191_Integer_Underflow__int_min_sub_06.c":143:16)
#loc162 = loc("CWE191_Integer_Underflow__int_min_sub_06.c":143:9)
#loc163 = loc("CWE191_Integer_Underflow__int_min_sub_06.c":145:5)
#loc164 = loc("CWE191_Integer_Underflow__int_min_sub_06.c":152:5)
#loc165 = loc("CWE191_Integer_Underflow__int_min_sub_06.c":145:8)
#loc166 = loc("CWE191_Integer_Underflow__int_min_sub_06.c":145:27)
#loc167 = loc("CWE191_Integer_Underflow__int_min_sub_06.c":145:25)
#loc168 = loc("CWE191_Integer_Underflow__int_min_sub_06.c":146:5)
#loc169 = loc("CWE191_Integer_Underflow__int_min_sub_06.c":147:9)
#loc170 = loc("CWE191_Integer_Underflow__int_min_sub_06.c":151:9)
#loc171 = loc("CWE191_Integer_Underflow__int_min_sub_06.c":149:13)
#loc172 = loc("CWE191_Integer_Underflow__int_min_sub_06.c":149:33)
#loc173 = loc("CWE191_Integer_Underflow__int_min_sub_06.c":149:26)
#loc174 = loc("CWE191_Integer_Underflow__int_min_sub_06.c":150:26)
#loc175 = loc("CWE191_Integer_Underflow__int_min_sub_06.c":150:13)
#loc176 = loc(fused[#loc1, #loc2])
#loc177 = loc(fused[#loc3, #loc4])
#loc178 = loc(fused[#loc5, #loc6])
#loc179 = loc(fused[#loc8, #loc7])
#loc180 = loc(fused[#loc9, #loc10])
#loc181 = loc(fused[#loc11, #loc12])
#loc182 = loc(fused[#loc14, #loc10])
#loc183 = loc(fused[#loc16, #loc15])
#loc184 = loc(fused[#loc17, #loc18])
#loc185 = loc(fused[#loc19, #loc20])
#loc186 = loc(fused[#loc22, #loc18])
#loc187 = loc(fused[#loc23, #loc24])
#loc188 = loc(fused[#loc25, #loc26])
#loc189 = loc(fused[#loc30, #loc31])
#loc190 = loc(fused[#loc32, #loc33])
#loc191 = loc(fused[#loc34, #loc35])
#loc192 = loc(fused[#loc36, #loc37])
#loc193 = loc(fused[#loc38, #loc39])
#loc194 = loc(fused[#loc40, #loc41])
#loc195 = loc(fused[#loc44, #loc45])
#loc196 = loc(fused[#loc46, #loc47])
#loc197 = loc(fused[#loc49, #loc48])
#loc198 = loc(fused[#loc50, #loc51])
#loc199 = loc(fused[#loc52, #loc53])
#loc200 = loc(fused[#loc55, #loc51])
#loc201 = loc(fused[#loc57, #loc56])
#loc202 = loc(fused[#loc58, #loc59])
#loc203 = loc(fused[#loc60, #loc61])
#loc204 = loc(fused[#loc63, #loc64, #loc65, #loc59])
#loc205 = loc(fused[#loc67, #loc68])
#loc206 = loc(fused[#loc69, #loc70])
#loc207 = loc(fused[#loc72, #loc73, #loc74, #loc68])
#loc208 = loc(fused[#loc75, #loc76])
#loc209 = loc(fused[#loc81, #loc82])
#loc210 = loc(fused[#loc83, #loc84])
#loc211 = loc(fused[#loc86, #loc85])
#loc212 = loc(fused[#loc87, #loc88])
#loc213 = loc(fused[#loc89, #loc90])
#loc214 = loc(fused[#loc92, #loc88])
#loc215 = loc(fused[#loc94, #loc93])
#loc216 = loc(fused[#loc95, #loc96])
#loc217 = loc(fused[#loc97, #loc98])
#loc218 = loc(fused[#loc100, #loc96])
#loc219 = loc(fused[#loc101, #loc102])
#loc220 = loc(fused[#loc103, #loc104])
#loc221 = loc(fused[#loc106, #loc107, #loc108, #loc102])
#loc222 = loc(fused[#loc109, #loc110])
#loc223 = loc(fused[#loc116, #loc117])
#loc224 = loc(fused[#loc118, #loc119])
#loc225 = loc(fused[#loc121, #loc120])
#loc226 = loc(fused[#loc122, #loc123])
#loc227 = loc(fused[#loc124, #loc125])
#loc228 = loc(fused[#loc127, #loc128, #loc129, #loc123])
#loc229 = loc(fused[#loc134, #loc132])
#loc230 = loc(fused[#loc135, #loc136])
#loc231 = loc(fused[#loc137, #loc138])
#loc232 = loc(fused[#loc140, #loc136])
#loc233 = loc(fused[#loc141, #loc142])
#loc234 = loc(fused[#loc143, #loc144])
#loc235 = loc(fused[#loc148, #loc149])
#loc236 = loc(fused[#loc150, #loc151])
#loc237 = loc(fused[#loc153, #loc152])
#loc238 = loc(fused[#loc154, #loc155])
#loc239 = loc(fused[#loc156, #loc157])
#loc240 = loc(fused[#loc159, #loc155])
#loc241 = loc(fused[#loc162, #loc160])
#loc242 = loc(fused[#loc163, #loc164])
#loc243 = loc(fused[#loc165, #loc166])
#loc244 = loc(fused[#loc168, #loc164])
#loc245 = loc(fused[#loc169, #loc170])
#loc246 = loc(fused[#loc171, #loc172])
