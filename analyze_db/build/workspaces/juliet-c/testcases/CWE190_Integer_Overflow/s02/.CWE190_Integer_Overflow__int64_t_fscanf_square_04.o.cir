!s32i = !cir.int<s, 32>
!s64i = !cir.int<s, 64>
!s8i = !cir.int<s, 8>
!ty__IO_codecvt = !cir.record<struct "_IO_codecvt" incomplete>
!ty__IO_marker = !cir.record<struct "_IO_marker" incomplete>
!ty__IO_wide_data = !cir.record<struct "_IO_wide_data" incomplete>
!u16i = !cir.int<u, 16>
!u64i = !cir.int<u, 64>
!void = !cir.void
#fn_attr = #cir<extra({inline = #cir.inline<no>, nothrow = #cir.nothrow, optnone = #cir.optnone, uwtable = #cir.uwtable<async>})>
#fn_attr1 = #cir<extra({nothrow = #cir.nothrow})>
!ty__IO_FILE = !cir.record<struct "_IO_FILE" {!s32i, !cir.ptr<!s8i>, !cir.ptr<!s8i>, !cir.ptr<!s8i>, !cir.ptr<!s8i>, !cir.ptr<!s8i>, !cir.ptr<!s8i>, !cir.ptr<!s8i>, !cir.ptr<!s8i>, !cir.ptr<!s8i>, !cir.ptr<!s8i>, !cir.ptr<!s8i>, !cir.ptr<!ty__IO_marker>, !cir.ptr<!cir.record<struct "_IO_FILE">>, !s32i, !s32i, !s64i, !u16i, !s8i, !cir.array<!s8i x 1>, !cir.ptr<!void>, !s64i, !cir.ptr<!ty__IO_codecvt>, !cir.ptr<!ty__IO_wide_data>, !cir.ptr<!cir.record<struct "_IO_FILE">>, !cir.ptr<!void>, !u64i, !s32i, !cir.array<!s8i x 20>} #cir.record.decl.ast>
module @"/workspaces/juliet-c/testcases/CWE190_Integer_Overflow/s02/CWE190_Integer_Overflow__int64_t_fscanf_square_04.c" attributes {cir.lang = #cir.lang<c>, cir.sob = #cir.signed_overflow_behavior<undefined>, cir.triple = "x86_64-unknown-linux-gnu", cir.type_size_info = #cir.type_size_info<char = 8, int = 32, size_t = 64>, cir.uwtable = #cir.uwtable<async>, dlti.dl_spec = #dlti.dl_spec<f80 = dense<128> : vector<2xi64>, !llvm.ptr = dense<64> : vector<4xi64>, !llvm.ptr<270> = dense<32> : vector<4xi64>, !llvm.ptr<272> = dense<64> : vector<4xi64>, !llvm.ptr<271> = dense<32> : vector<4xi64>, i128 = dense<128> : vector<2xi64>, i64 = dense<64> : vector<2xi64>, f64 = dense<64> : vector<2xi64>, f128 = dense<128> : vector<2xi64>, i32 = dense<32> : vector<2xi64>, f16 = dense<16> : vector<2xi64>, i16 = dense<16> : vector<2xi64>, i1 = dense<8> : vector<2xi64>, i8 = dense<8> : vector<2xi64>, "dlti.stack_alignment" = 128 : i64, "dlti.mangling_mode" = "e", "dlti.endianness" = "little">} {
  cir.func private @__isoc99_fscanf(!cir.ptr<!ty__IO_FILE>, !cir.ptr<!s8i>, ...) -> !s32i loc(#loc171)
  cir.global "private" external @stdin : !cir.ptr<!ty__IO_FILE> {alignment = 8 : i64} loc(#loc172)
  cir.global "private" constant cir_private dsolocal @".str" = #cir.const_array<"%ld\00" : !cir.array<!s8i x 4>> : !cir.array<!s8i x 4> {alignment = 1 : i64} loc(#loc173)
  cir.func private @printLongLongLine(!s64i) loc(#loc174)
  cir.func no_proto @CWE190_Integer_Overflow__int64_t_fscanf_square_04_bad() extra(#fn_attr) {
    %0 = cir.alloca !s64i, !cir.ptr<!s64i>, ["data"] {alignment = 8 : i64} loc(#loc176)
    %1 = cir.const #cir.int<0> : !s64i loc(#loc13)
    cir.store %1, %0 : !s64i, !cir.ptr<!s64i> loc(#loc177)
    cir.scope {
      %2 = cir.const #cir.int<1> : !s32i loc(#loc17)
      %3 = cir.cast(int_to_bool, %2 : !s32i), !cir.bool loc(#loc17)
      cir.if %3 {
        %4 = cir.get_global @__isoc99_fscanf : !cir.ptr<!cir.func<(!cir.ptr<!ty__IO_FILE>, !cir.ptr<!s8i>, ...) -> !s32i>> loc(#loc19)
        %5 = cir.get_global @stdin : !cir.ptr<!cir.ptr<!ty__IO_FILE>> loc(#loc172)
        %6 = cir.load %5 : !cir.ptr<!cir.ptr<!ty__IO_FILE>>, !cir.ptr<!ty__IO_FILE> loc(#loc20)
        %7 = cir.get_global @".str" : !cir.ptr<!cir.array<!s8i x 4>> loc(#loc173)
        %8 = cir.cast(array_to_ptrdecay, %7 : !cir.ptr<!cir.array<!s8i x 4>>), !cir.ptr<!s8i> loc(#loc173)
        %9 = cir.call @__isoc99_fscanf(%6, %8, %0) : (!cir.ptr<!ty__IO_FILE>, !cir.ptr<!s8i>, !cir.ptr<!s64i>) -> !s32i loc(#loc19)
      } loc(#loc179)
    } loc(#loc178)
    cir.scope {
      %2 = cir.const #cir.int<1> : !s32i loc(#loc23)
      %3 = cir.cast(int_to_bool, %2 : !s32i), !cir.bool loc(#loc23)
      cir.if %3 {
        cir.scope {
          %4 = cir.alloca !s64i, !cir.ptr<!s64i>, ["result", init] {alignment = 8 : i64} loc(#loc183)
          %5 = cir.load %0 : !cir.ptr<!s64i>, !s64i loc(#loc29)
          %6 = cir.load %0 : !cir.ptr<!s64i>, !s64i loc(#loc28)
          %7 = cir.binop(mul, %5, %6) nsw : !s64i loc(#loc29)
          cir.store %7, %4 : !s64i, !cir.ptr<!s64i> loc(#loc183)
          %8 = cir.load %4 : !cir.ptr<!s64i>, !s64i loc(#loc30)
          cir.call @printLongLongLine(%8) : (!s64i) -> () loc(#loc31)
        } loc(#loc182)
      } loc(#loc181)
    } loc(#loc180)
    cir.return loc(#loc10)
  } loc(#loc175)
  cir.func no_proto @CWE190_Integer_Overflow__int64_t_fscanf_square_04_good() extra(#fn_attr) {
    %0 = cir.get_global @goodB2G1 : !cir.ptr<!cir.func<()>> loc(#loc185)
    cir.call %0() : (!cir.ptr<!cir.func<()>>) -> () loc(#loc34)
    %1 = cir.get_global @goodB2G2 : !cir.ptr<!cir.func<()>> loc(#loc186)
    cir.call %1() : (!cir.ptr<!cir.func<()>>) -> () loc(#loc36)
    %2 = cir.get_global @goodG2B1 : !cir.ptr<!cir.func<()>> loc(#loc187)
    cir.call %2() : (!cir.ptr<!cir.func<()>>) -> () loc(#loc38)
    %3 = cir.get_global @goodG2B2 : !cir.ptr<!cir.func<()>> loc(#loc188)
    cir.call %3() : (!cir.ptr<!cir.func<()>>) -> () loc(#loc40)
    cir.return loc(#loc33)
  } loc(#loc184)
  cir.func private @printLine(!cir.ptr<!s8i>) loc(#loc189)
  cir.global "private" constant cir_private dsolocal @".str.1" = #cir.const_array<"Benign, fixed string\00" : !cir.array<!s8i x 21>> : !cir.array<!s8i x 21> {alignment = 1 : i64} loc(#loc44)
  cir.func private @imaxabs(!s64i) -> !s64i extra(#fn_attr1) loc(#loc190)
  cir.func private @sqrtl(!cir.long_double<!cir.f80>) -> !cir.long_double<!cir.f80> extra(#fn_attr1) loc(#loc47)
  cir.global "private" constant cir_private dsolocal @".str.2" = #cir.const_array<"data value is too large to perform arithmetic safely.\00" : !cir.array<!s8i x 54>> : !cir.array<!s8i x 54> {alignment = 1 : i64} loc(#loc48)
  cir.func no_proto internal private @goodB2G1() extra(#fn_attr) {
    %0 = cir.alloca !s64i, !cir.ptr<!s64i>, ["data"] {alignment = 8 : i64} loc(#loc192)
    %1 = cir.const #cir.int<0> : !s64i loc(#loc53)
    cir.store %1, %0 : !s64i, !cir.ptr<!s64i> loc(#loc193)
    cir.scope {
      %2 = cir.const #cir.int<1> : !s32i loc(#loc57)
      %3 = cir.cast(int_to_bool, %2 : !s32i), !cir.bool loc(#loc57)
      cir.if %3 {
        %4 = cir.get_global @__isoc99_fscanf : !cir.ptr<!cir.func<(!cir.ptr<!ty__IO_FILE>, !cir.ptr<!s8i>, ...) -> !s32i>> loc(#loc59)
        %5 = cir.get_global @stdin : !cir.ptr<!cir.ptr<!ty__IO_FILE>> loc(#loc172)
        %6 = cir.load %5 : !cir.ptr<!cir.ptr<!ty__IO_FILE>>, !cir.ptr<!ty__IO_FILE> loc(#loc60)
        %7 = cir.get_global @".str" : !cir.ptr<!cir.array<!s8i x 4>> loc(#loc196)
        %8 = cir.cast(array_to_ptrdecay, %7 : !cir.ptr<!cir.array<!s8i x 4>>), !cir.ptr<!s8i> loc(#loc196)
        %9 = cir.call @__isoc99_fscanf(%6, %8, %0) : (!cir.ptr<!ty__IO_FILE>, !cir.ptr<!s8i>, !cir.ptr<!s64i>) -> !s32i loc(#loc59)
      } loc(#loc195)
    } loc(#loc194)
    cir.scope {
      %2 = cir.const #cir.int<0> : !s32i loc(#loc65)
      %3 = cir.cast(int_to_bool, %2 : !s32i), !cir.bool loc(#loc65)
      cir.if %3 {
        %4 = cir.get_global @".str.1" : !cir.ptr<!cir.array<!s8i x 21>> loc(#loc44)
        %5 = cir.cast(array_to_ptrdecay, %4 : !cir.ptr<!cir.array<!s8i x 21>>), !cir.ptr<!s8i> loc(#loc44)
        cir.call @printLine(%5) : (!cir.ptr<!s8i>) -> () loc(#loc69)
      } else {
        cir.scope {
          %4 = cir.load %0 : !cir.ptr<!s64i>, !s64i loc(#loc72)
          %5 = cir.call @imaxabs(%4) : (!s64i) -> !s64i side_effect(const) extra(#fn_attr1) loc(#loc73)
          %6 = cir.cast(int_to_float, %5 : !s64i), !cir.long_double<!cir.f80> loc(#loc73)
          %7 = cir.get_global @sqrtl : !cir.ptr<!cir.func<(!cir.long_double<!cir.f80>) -> !cir.long_double<!cir.f80>>> loc(#loc74)
          %8 = cir.const #cir.int<9223372036854775807> : !s64i loc(#loc75)
          %9 = cir.cast(int_to_float, %8 : !s64i), !cir.long_double<!cir.f80> loc(#loc75)
          %10 = cir.call @sqrtl(%9) : (!cir.long_double<!cir.f80>) -> !cir.long_double<!cir.f80> extra(#fn_attr1) loc(#loc74)
          %11 = cir.cmp(le, %6, %10) : !cir.long_double<!cir.f80>, !cir.bool loc(#loc200)
          cir.if %11 {
            %12 = cir.alloca !s64i, !cir.ptr<!s64i>, ["result", init] {alignment = 8 : i64} loc(#loc202)
            %13 = cir.load %0 : !cir.ptr<!s64i>, !s64i loc(#loc82)
            %14 = cir.load %0 : !cir.ptr<!s64i>, !s64i loc(#loc81)
            %15 = cir.binop(mul, %13, %14) nsw : !s64i loc(#loc82)
            cir.store %15, %12 : !s64i, !cir.ptr<!s64i> loc(#loc202)
            %16 = cir.load %12 : !cir.ptr<!s64i>, !s64i loc(#loc83)
            cir.call @printLongLongLine(%16) : (!s64i) -> () loc(#loc84)
          } else {
            %12 = cir.get_global @".str.2" : !cir.ptr<!cir.array<!s8i x 54>> loc(#loc48)
            %13 = cir.cast(array_to_ptrdecay, %12 : !cir.ptr<!cir.array<!s8i x 54>>), !cir.ptr<!s8i> loc(#loc48)
            cir.call @printLine(%13) : (!cir.ptr<!s8i>) -> () loc(#loc85)
          } loc(#loc201)
        } loc(#loc199)
      } loc(#loc198)
    } loc(#loc197)
    cir.return loc(#loc50)
  } loc(#loc191)
  cir.func no_proto internal private @goodB2G2() extra(#fn_attr) {
    %0 = cir.alloca !s64i, !cir.ptr<!s64i>, ["data"] {alignment = 8 : i64} loc(#loc204)
    %1 = cir.const #cir.int<0> : !s64i loc(#loc90)
    cir.store %1, %0 : !s64i, !cir.ptr<!s64i> loc(#loc205)
    cir.scope {
      %2 = cir.const #cir.int<1> : !s32i loc(#loc94)
      %3 = cir.cast(int_to_bool, %2 : !s32i), !cir.bool loc(#loc94)
      cir.if %3 {
        %4 = cir.get_global @__isoc99_fscanf : !cir.ptr<!cir.func<(!cir.ptr<!ty__IO_FILE>, !cir.ptr<!s8i>, ...) -> !s32i>> loc(#loc96)
        %5 = cir.get_global @stdin : !cir.ptr<!cir.ptr<!ty__IO_FILE>> loc(#loc172)
        %6 = cir.load %5 : !cir.ptr<!cir.ptr<!ty__IO_FILE>>, !cir.ptr<!ty__IO_FILE> loc(#loc97)
        %7 = cir.get_global @".str" : !cir.ptr<!cir.array<!s8i x 4>> loc(#loc208)
        %8 = cir.cast(array_to_ptrdecay, %7 : !cir.ptr<!cir.array<!s8i x 4>>), !cir.ptr<!s8i> loc(#loc208)
        %9 = cir.call @__isoc99_fscanf(%6, %8, %0) : (!cir.ptr<!ty__IO_FILE>, !cir.ptr<!s8i>, !cir.ptr<!s64i>) -> !s32i loc(#loc96)
      } loc(#loc207)
    } loc(#loc206)
    cir.scope {
      %2 = cir.const #cir.int<1> : !s32i loc(#loc102)
      %3 = cir.cast(int_to_bool, %2 : !s32i), !cir.bool loc(#loc102)
      cir.if %3 {
        cir.scope {
          %4 = cir.load %0 : !cir.ptr<!s64i>, !s64i loc(#loc106)
          %5 = cir.call @imaxabs(%4) : (!s64i) -> !s64i side_effect(const) extra(#fn_attr1) loc(#loc107)
          %6 = cir.cast(int_to_float, %5 : !s64i), !cir.long_double<!cir.f80> loc(#loc107)
          %7 = cir.get_global @sqrtl : !cir.ptr<!cir.func<(!cir.long_double<!cir.f80>) -> !cir.long_double<!cir.f80>>> loc(#loc108)
          %8 = cir.const #cir.int<9223372036854775807> : !s64i loc(#loc109)
          %9 = cir.cast(int_to_float, %8 : !s64i), !cir.long_double<!cir.f80> loc(#loc109)
          %10 = cir.call @sqrtl(%9) : (!cir.long_double<!cir.f80>) -> !cir.long_double<!cir.f80> extra(#fn_attr1) loc(#loc108)
          %11 = cir.cmp(le, %6, %10) : !cir.long_double<!cir.f80>, !cir.bool loc(#loc212)
          cir.if %11 {
            %12 = cir.alloca !s64i, !cir.ptr<!s64i>, ["result", init] {alignment = 8 : i64} loc(#loc214)
            %13 = cir.load %0 : !cir.ptr<!s64i>, !s64i loc(#loc116)
            %14 = cir.load %0 : !cir.ptr<!s64i>, !s64i loc(#loc115)
            %15 = cir.binop(mul, %13, %14) nsw : !s64i loc(#loc116)
            cir.store %15, %12 : !s64i, !cir.ptr<!s64i> loc(#loc214)
            %16 = cir.load %12 : !cir.ptr<!s64i>, !s64i loc(#loc117)
            cir.call @printLongLongLine(%16) : (!s64i) -> () loc(#loc118)
          } else {
            %12 = cir.get_global @".str.2" : !cir.ptr<!cir.array<!s8i x 54>> loc(#loc119)
            %13 = cir.cast(array_to_ptrdecay, %12 : !cir.ptr<!cir.array<!s8i x 54>>), !cir.ptr<!s8i> loc(#loc119)
            cir.call @printLine(%13) : (!cir.ptr<!s8i>) -> () loc(#loc120)
          } loc(#loc213)
        } loc(#loc211)
      } loc(#loc210)
    } loc(#loc209)
    cir.return loc(#loc87)
  } loc(#loc203)
  cir.func no_proto internal private @goodG2B1() extra(#fn_attr) {
    %0 = cir.alloca !s64i, !cir.ptr<!s64i>, ["data"] {alignment = 8 : i64} loc(#loc216)
    %1 = cir.const #cir.int<0> : !s64i loc(#loc125)
    cir.store %1, %0 : !s64i, !cir.ptr<!s64i> loc(#loc217)
    cir.scope {
      %2 = cir.const #cir.int<0> : !s32i loc(#loc129)
      %3 = cir.cast(int_to_bool, %2 : !s32i), !cir.bool loc(#loc129)
      cir.if %3 {
        %4 = cir.get_global @".str.1" : !cir.ptr<!cir.array<!s8i x 21>> loc(#loc133)
        %5 = cir.cast(array_to_ptrdecay, %4 : !cir.ptr<!cir.array<!s8i x 21>>), !cir.ptr<!s8i> loc(#loc133)
        cir.call @printLine(%5) : (!cir.ptr<!s8i>) -> () loc(#loc134)
      } else {
        %4 = cir.const #cir.int<2> : !s32i loc(#loc135)
        %5 = cir.cast(integral, %4 : !s32i), !s64i loc(#loc135)
        cir.store %5, %0 : !s64i, !cir.ptr<!s64i> loc(#loc220)
      } loc(#loc219)
    } loc(#loc218)
    cir.scope {
      %2 = cir.const #cir.int<1> : !s32i loc(#loc139)
      %3 = cir.cast(int_to_bool, %2 : !s32i), !cir.bool loc(#loc139)
      cir.if %3 {
        cir.scope {
          %4 = cir.alloca !s64i, !cir.ptr<!s64i>, ["result", init] {alignment = 8 : i64} loc(#loc224)
          %5 = cir.load %0 : !cir.ptr<!s64i>, !s64i loc(#loc145)
          %6 = cir.load %0 : !cir.ptr<!s64i>, !s64i loc(#loc144)
          %7 = cir.binop(mul, %5, %6) nsw : !s64i loc(#loc145)
          cir.store %7, %4 : !s64i, !cir.ptr<!s64i> loc(#loc224)
          %8 = cir.load %4 : !cir.ptr<!s64i>, !s64i loc(#loc146)
          cir.call @printLongLongLine(%8) : (!s64i) -> () loc(#loc147)
        } loc(#loc223)
      } loc(#loc222)
    } loc(#loc221)
    cir.return loc(#loc122)
  } loc(#loc215)
  cir.func no_proto internal private @goodG2B2() extra(#fn_attr) {
    %0 = cir.alloca !s64i, !cir.ptr<!s64i>, ["data"] {alignment = 8 : i64} loc(#loc226)
    %1 = cir.const #cir.int<0> : !s64i loc(#loc152)
    cir.store %1, %0 : !s64i, !cir.ptr<!s64i> loc(#loc227)
    cir.scope {
      %2 = cir.const #cir.int<1> : !s32i loc(#loc156)
      %3 = cir.cast(int_to_bool, %2 : !s32i), !cir.bool loc(#loc156)
      cir.if %3 {
        %4 = cir.const #cir.int<2> : !s32i loc(#loc158)
        %5 = cir.cast(integral, %4 : !s32i), !s64i loc(#loc158)
        cir.store %5, %0 : !s64i, !cir.ptr<!s64i> loc(#loc230)
      } loc(#loc229)
    } loc(#loc228)
    cir.scope {
      %2 = cir.const #cir.int<1> : !s32i loc(#loc162)
      %3 = cir.cast(int_to_bool, %2 : !s32i), !cir.bool loc(#loc162)
      cir.if %3 {
        cir.scope {
          %4 = cir.alloca !s64i, !cir.ptr<!s64i>, ["result", init] {alignment = 8 : i64} loc(#loc234)
          %5 = cir.load %0 : !cir.ptr<!s64i>, !s64i loc(#loc168)
          %6 = cir.load %0 : !cir.ptr<!s64i>, !s64i loc(#loc167)
          %7 = cir.binop(mul, %5, %6) nsw : !s64i loc(#loc168)
          cir.store %7, %4 : !s64i, !cir.ptr<!s64i> loc(#loc234)
          %8 = cir.load %4 : !cir.ptr<!s64i>, !s64i loc(#loc169)
          cir.call @printLongLongLine(%8) : (!s64i) -> () loc(#loc170)
        } loc(#loc233)
      } loc(#loc232)
    } loc(#loc231)
    cir.return loc(#loc149)
  } loc(#loc225)
} loc(#loc)
#loc = loc("/workspaces/juliet-c/testcases/CWE190_Integer_Overflow/s02/CWE190_Integer_Overflow__int64_t_fscanf_square_04.c":0:0)
#loc1 = loc("/usr/include/stdio.h":463:1)
#loc2 = loc("/usr/include/stdio.h":465:33)
#loc3 = loc("/usr/include/stdio.h":149:1)
#loc4 = loc("/usr/include/stdio.h":149:14)
#loc5 = loc("CWE190_Integer_Overflow__int64_t_fscanf_square_04.c":38:24)
#loc6 = loc("CWE190_Integer_Overflow__int64_t_fscanf_square_04.c":38:28)
#loc7 = loc("../../../testcasesupport/std_testcase_io.h":26:1)
#loc8 = loc("../../../testcasesupport/std_testcase_io.h":26:49)
#loc9 = loc("CWE190_Integer_Overflow__int64_t_fscanf_square_04.c":31:1)
#loc10 = loc("CWE190_Integer_Overflow__int64_t_fscanf_square_04.c":48:1)
#loc11 = loc("CWE190_Integer_Overflow__int64_t_fscanf_square_04.c":33:5)
#loc12 = loc("CWE190_Integer_Overflow__int64_t_fscanf_square_04.c":33:13)
#loc13 = loc("CWE190_Integer_Overflow__int64_t_fscanf_square_04.c":34:12)
#loc14 = loc("CWE190_Integer_Overflow__int64_t_fscanf_square_04.c":34:5)
#loc15 = loc("CWE190_Integer_Overflow__int64_t_fscanf_square_04.c":35:5)
#loc16 = loc("CWE190_Integer_Overflow__int64_t_fscanf_square_04.c":39:5)
#loc17 = loc("CWE190_Integer_Overflow__int64_t_fscanf_square_04.c":35:8)
#loc18 = loc("CWE190_Integer_Overflow__int64_t_fscanf_square_04.c":36:5)
#loc19 = loc("CWE190_Integer_Overflow__int64_t_fscanf_square_04.c":38:9)
#loc20 = loc("CWE190_Integer_Overflow__int64_t_fscanf_square_04.c":38:17)
#loc21 = loc("CWE190_Integer_Overflow__int64_t_fscanf_square_04.c":40:5)
#loc22 = loc("CWE190_Integer_Overflow__int64_t_fscanf_square_04.c":47:5)
#loc23 = loc("CWE190_Integer_Overflow__int64_t_fscanf_square_04.c":40:8)
#loc24 = loc("CWE190_Integer_Overflow__int64_t_fscanf_square_04.c":41:5)
#loc25 = loc("CWE190_Integer_Overflow__int64_t_fscanf_square_04.c":42:9)
#loc26 = loc("CWE190_Integer_Overflow__int64_t_fscanf_square_04.c":46:9)
#loc27 = loc("CWE190_Integer_Overflow__int64_t_fscanf_square_04.c":44:13)
#loc28 = loc("CWE190_Integer_Overflow__int64_t_fscanf_square_04.c":44:37)
#loc29 = loc("CWE190_Integer_Overflow__int64_t_fscanf_square_04.c":44:30)
#loc30 = loc("CWE190_Integer_Overflow__int64_t_fscanf_square_04.c":45:31)
#loc31 = loc("CWE190_Integer_Overflow__int64_t_fscanf_square_04.c":45:13)
#loc32 = loc("CWE190_Integer_Overflow__int64_t_fscanf_square_04.c":154:1)
#loc33 = loc("CWE190_Integer_Overflow__int64_t_fscanf_square_04.c":160:1)
#loc34 = loc("CWE190_Integer_Overflow__int64_t_fscanf_square_04.c":156:5)
#loc35 = loc("CWE190_Integer_Overflow__int64_t_fscanf_square_04.c":156:14)
#loc36 = loc("CWE190_Integer_Overflow__int64_t_fscanf_square_04.c":157:5)
#loc37 = loc("CWE190_Integer_Overflow__int64_t_fscanf_square_04.c":157:14)
#loc38 = loc("CWE190_Integer_Overflow__int64_t_fscanf_square_04.c":158:5)
#loc39 = loc("CWE190_Integer_Overflow__int64_t_fscanf_square_04.c":158:14)
#loc40 = loc("CWE190_Integer_Overflow__int64_t_fscanf_square_04.c":159:5)
#loc41 = loc("CWE190_Integer_Overflow__int64_t_fscanf_square_04.c":159:14)
#loc42 = loc("../../../testcasesupport/std_testcase_io.h":14:1)
#loc43 = loc("../../../testcasesupport/std_testcase_io.h":14:33)
#loc44 = loc("CWE190_Integer_Overflow__int64_t_fscanf_square_04.c":67:19)
#loc45 = loc("/usr/include/inttypes.h":351:1)
#loc46 = loc("/usr/include/inttypes.h":351:74)
#loc47 = loc("/usr/include/x86_64-linux-gnu/bits/mathcalls.h":143:1)
#loc48 = loc("CWE190_Integer_Overflow__int64_t_fscanf_square_04.c":79:23)
#loc49 = loc("CWE190_Integer_Overflow__int64_t_fscanf_square_04.c":55:1)
#loc50 = loc("CWE190_Integer_Overflow__int64_t_fscanf_square_04.c":82:1)
#loc51 = loc("CWE190_Integer_Overflow__int64_t_fscanf_square_04.c":57:5)
#loc52 = loc("CWE190_Integer_Overflow__int64_t_fscanf_square_04.c":57:13)
#loc53 = loc("CWE190_Integer_Overflow__int64_t_fscanf_square_04.c":58:12)
#loc54 = loc("CWE190_Integer_Overflow__int64_t_fscanf_square_04.c":58:5)
#loc55 = loc("CWE190_Integer_Overflow__int64_t_fscanf_square_04.c":59:5)
#loc56 = loc("CWE190_Integer_Overflow__int64_t_fscanf_square_04.c":63:5)
#loc57 = loc("CWE190_Integer_Overflow__int64_t_fscanf_square_04.c":59:8)
#loc58 = loc("CWE190_Integer_Overflow__int64_t_fscanf_square_04.c":60:5)
#loc59 = loc("CWE190_Integer_Overflow__int64_t_fscanf_square_04.c":62:9)
#loc60 = loc("CWE190_Integer_Overflow__int64_t_fscanf_square_04.c":62:17)
#loc61 = loc("CWE190_Integer_Overflow__int64_t_fscanf_square_04.c":62:24)
#loc62 = loc("CWE190_Integer_Overflow__int64_t_fscanf_square_04.c":62:28)
#loc63 = loc("CWE190_Integer_Overflow__int64_t_fscanf_square_04.c":64:5)
#loc64 = loc("CWE190_Integer_Overflow__int64_t_fscanf_square_04.c":81:5)
#loc65 = loc("CWE190_Integer_Overflow__int64_t_fscanf_square_04.c":64:8)
#loc66 = loc("CWE190_Integer_Overflow__int64_t_fscanf_square_04.c":65:5)
#loc67 = loc("CWE190_Integer_Overflow__int64_t_fscanf_square_04.c":68:5)
#loc68 = loc("CWE190_Integer_Overflow__int64_t_fscanf_square_04.c":70:5)
#loc69 = loc("CWE190_Integer_Overflow__int64_t_fscanf_square_04.c":67:9)
#loc70 = loc("CWE190_Integer_Overflow__int64_t_fscanf_square_04.c":72:9)
#loc71 = loc("CWE190_Integer_Overflow__int64_t_fscanf_square_04.c":80:9)
#loc72 = loc("CWE190_Integer_Overflow__int64_t_fscanf_square_04.c":72:31)
#loc73 = loc("CWE190_Integer_Overflow__int64_t_fscanf_square_04.c":72:13)
#loc74 = loc("CWE190_Integer_Overflow__int64_t_fscanf_square_04.c":72:40)
#loc75 = loc("CWE190_Integer_Overflow__int64_t_fscanf_square_04.c":72:46)
#loc76 = loc("CWE190_Integer_Overflow__int64_t_fscanf_square_04.c":72:55)
#loc77 = loc("CWE190_Integer_Overflow__int64_t_fscanf_square_04.c":73:9)
#loc78 = loc("CWE190_Integer_Overflow__int64_t_fscanf_square_04.c":76:9)
#loc79 = loc("CWE190_Integer_Overflow__int64_t_fscanf_square_04.c":78:9)
#loc80 = loc("CWE190_Integer_Overflow__int64_t_fscanf_square_04.c":74:13)
#loc81 = loc("CWE190_Integer_Overflow__int64_t_fscanf_square_04.c":74:37)
#loc82 = loc("CWE190_Integer_Overflow__int64_t_fscanf_square_04.c":74:30)
#loc83 = loc("CWE190_Integer_Overflow__int64_t_fscanf_square_04.c":75:31)
#loc84 = loc("CWE190_Integer_Overflow__int64_t_fscanf_square_04.c":75:13)
#loc85 = loc("CWE190_Integer_Overflow__int64_t_fscanf_square_04.c":79:13)
#loc86 = loc("CWE190_Integer_Overflow__int64_t_fscanf_square_04.c":85:1)
#loc87 = loc("CWE190_Integer_Overflow__int64_t_fscanf_square_04.c":107:1)
#loc88 = loc("CWE190_Integer_Overflow__int64_t_fscanf_square_04.c":87:5)
#loc89 = loc("CWE190_Integer_Overflow__int64_t_fscanf_square_04.c":87:13)
#loc90 = loc("CWE190_Integer_Overflow__int64_t_fscanf_square_04.c":88:12)
#loc91 = loc("CWE190_Integer_Overflow__int64_t_fscanf_square_04.c":88:5)
#loc92 = loc("CWE190_Integer_Overflow__int64_t_fscanf_square_04.c":89:5)
#loc93 = loc("CWE190_Integer_Overflow__int64_t_fscanf_square_04.c":93:5)
#loc94 = loc("CWE190_Integer_Overflow__int64_t_fscanf_square_04.c":89:8)
#loc95 = loc("CWE190_Integer_Overflow__int64_t_fscanf_square_04.c":90:5)
#loc96 = loc("CWE190_Integer_Overflow__int64_t_fscanf_square_04.c":92:9)
#loc97 = loc("CWE190_Integer_Overflow__int64_t_fscanf_square_04.c":92:17)
#loc98 = loc("CWE190_Integer_Overflow__int64_t_fscanf_square_04.c":92:24)
#loc99 = loc("CWE190_Integer_Overflow__int64_t_fscanf_square_04.c":92:28)
#loc100 = loc("CWE190_Integer_Overflow__int64_t_fscanf_square_04.c":94:5)
#loc101 = loc("CWE190_Integer_Overflow__int64_t_fscanf_square_04.c":106:5)
#loc102 = loc("CWE190_Integer_Overflow__int64_t_fscanf_square_04.c":94:8)
#loc103 = loc("CWE190_Integer_Overflow__int64_t_fscanf_square_04.c":95:5)
#loc104 = loc("CWE190_Integer_Overflow__int64_t_fscanf_square_04.c":97:9)
#loc105 = loc("CWE190_Integer_Overflow__int64_t_fscanf_square_04.c":105:9)
#loc106 = loc("CWE190_Integer_Overflow__int64_t_fscanf_square_04.c":97:31)
#loc107 = loc("CWE190_Integer_Overflow__int64_t_fscanf_square_04.c":97:13)
#loc108 = loc("CWE190_Integer_Overflow__int64_t_fscanf_square_04.c":97:40)
#loc109 = loc("CWE190_Integer_Overflow__int64_t_fscanf_square_04.c":97:46)
#loc110 = loc("CWE190_Integer_Overflow__int64_t_fscanf_square_04.c":97:55)
#loc111 = loc("CWE190_Integer_Overflow__int64_t_fscanf_square_04.c":98:9)
#loc112 = loc("CWE190_Integer_Overflow__int64_t_fscanf_square_04.c":101:9)
#loc113 = loc("CWE190_Integer_Overflow__int64_t_fscanf_square_04.c":103:9)
#loc114 = loc("CWE190_Integer_Overflow__int64_t_fscanf_square_04.c":99:13)
#loc115 = loc("CWE190_Integer_Overflow__int64_t_fscanf_square_04.c":99:37)
#loc116 = loc("CWE190_Integer_Overflow__int64_t_fscanf_square_04.c":99:30)
#loc117 = loc("CWE190_Integer_Overflow__int64_t_fscanf_square_04.c":100:31)
#loc118 = loc("CWE190_Integer_Overflow__int64_t_fscanf_square_04.c":100:13)
#loc119 = loc("CWE190_Integer_Overflow__int64_t_fscanf_square_04.c":104:23)
#loc120 = loc("CWE190_Integer_Overflow__int64_t_fscanf_square_04.c":104:13)
#loc121 = loc("CWE190_Integer_Overflow__int64_t_fscanf_square_04.c":110:1)
#loc122 = loc("CWE190_Integer_Overflow__int64_t_fscanf_square_04.c":132:1)
#loc123 = loc("CWE190_Integer_Overflow__int64_t_fscanf_square_04.c":112:5)
#loc124 = loc("CWE190_Integer_Overflow__int64_t_fscanf_square_04.c":112:13)
#loc125 = loc("CWE190_Integer_Overflow__int64_t_fscanf_square_04.c":113:12)
#loc126 = loc("CWE190_Integer_Overflow__int64_t_fscanf_square_04.c":113:5)
#loc127 = loc("CWE190_Integer_Overflow__int64_t_fscanf_square_04.c":114:5)
#loc128 = loc("CWE190_Integer_Overflow__int64_t_fscanf_square_04.c":123:5)
#loc129 = loc("CWE190_Integer_Overflow__int64_t_fscanf_square_04.c":114:8)
#loc130 = loc("CWE190_Integer_Overflow__int64_t_fscanf_square_04.c":115:5)
#loc131 = loc("CWE190_Integer_Overflow__int64_t_fscanf_square_04.c":118:5)
#loc132 = loc("CWE190_Integer_Overflow__int64_t_fscanf_square_04.c":120:5)
#loc133 = loc("CWE190_Integer_Overflow__int64_t_fscanf_square_04.c":117:19)
#loc134 = loc("CWE190_Integer_Overflow__int64_t_fscanf_square_04.c":117:9)
#loc135 = loc("CWE190_Integer_Overflow__int64_t_fscanf_square_04.c":122:16)
#loc136 = loc("CWE190_Integer_Overflow__int64_t_fscanf_square_04.c":122:9)
#loc137 = loc("CWE190_Integer_Overflow__int64_t_fscanf_square_04.c":124:5)
#loc138 = loc("CWE190_Integer_Overflow__int64_t_fscanf_square_04.c":131:5)
#loc139 = loc("CWE190_Integer_Overflow__int64_t_fscanf_square_04.c":124:8)
#loc140 = loc("CWE190_Integer_Overflow__int64_t_fscanf_square_04.c":125:5)
#loc141 = loc("CWE190_Integer_Overflow__int64_t_fscanf_square_04.c":126:9)
#loc142 = loc("CWE190_Integer_Overflow__int64_t_fscanf_square_04.c":130:9)
#loc143 = loc("CWE190_Integer_Overflow__int64_t_fscanf_square_04.c":128:13)
#loc144 = loc("CWE190_Integer_Overflow__int64_t_fscanf_square_04.c":128:37)
#loc145 = loc("CWE190_Integer_Overflow__int64_t_fscanf_square_04.c":128:30)
#loc146 = loc("CWE190_Integer_Overflow__int64_t_fscanf_square_04.c":129:31)
#loc147 = loc("CWE190_Integer_Overflow__int64_t_fscanf_square_04.c":129:13)
#loc148 = loc("CWE190_Integer_Overflow__int64_t_fscanf_square_04.c":135:1)
#loc149 = loc("CWE190_Integer_Overflow__int64_t_fscanf_square_04.c":152:1)
#loc150 = loc("CWE190_Integer_Overflow__int64_t_fscanf_square_04.c":137:5)
#loc151 = loc("CWE190_Integer_Overflow__int64_t_fscanf_square_04.c":137:13)
#loc152 = loc("CWE190_Integer_Overflow__int64_t_fscanf_square_04.c":138:12)
#loc153 = loc("CWE190_Integer_Overflow__int64_t_fscanf_square_04.c":138:5)
#loc154 = loc("CWE190_Integer_Overflow__int64_t_fscanf_square_04.c":139:5)
#loc155 = loc("CWE190_Integer_Overflow__int64_t_fscanf_square_04.c":143:5)
#loc156 = loc("CWE190_Integer_Overflow__int64_t_fscanf_square_04.c":139:8)
#loc157 = loc("CWE190_Integer_Overflow__int64_t_fscanf_square_04.c":140:5)
#loc158 = loc("CWE190_Integer_Overflow__int64_t_fscanf_square_04.c":142:16)
#loc159 = loc("CWE190_Integer_Overflow__int64_t_fscanf_square_04.c":142:9)
#loc160 = loc("CWE190_Integer_Overflow__int64_t_fscanf_square_04.c":144:5)
#loc161 = loc("CWE190_Integer_Overflow__int64_t_fscanf_square_04.c":151:5)
#loc162 = loc("CWE190_Integer_Overflow__int64_t_fscanf_square_04.c":144:8)
#loc163 = loc("CWE190_Integer_Overflow__int64_t_fscanf_square_04.c":145:5)
#loc164 = loc("CWE190_Integer_Overflow__int64_t_fscanf_square_04.c":146:9)
#loc165 = loc("CWE190_Integer_Overflow__int64_t_fscanf_square_04.c":150:9)
#loc166 = loc("CWE190_Integer_Overflow__int64_t_fscanf_square_04.c":148:13)
#loc167 = loc("CWE190_Integer_Overflow__int64_t_fscanf_square_04.c":148:37)
#loc168 = loc("CWE190_Integer_Overflow__int64_t_fscanf_square_04.c":148:30)
#loc169 = loc("CWE190_Integer_Overflow__int64_t_fscanf_square_04.c":149:31)
#loc170 = loc("CWE190_Integer_Overflow__int64_t_fscanf_square_04.c":149:13)
#loc171 = loc(fused[#loc1, #loc2])
#loc172 = loc(fused[#loc3, #loc4])
#loc173 = loc(fused[#loc5, #loc6])
#loc174 = loc(fused[#loc7, #loc8])
#loc175 = loc(fused[#loc9, #loc10])
#loc176 = loc(fused[#loc11, #loc12])
#loc177 = loc(fused[#loc14, #loc13])
#loc178 = loc(fused[#loc15, #loc16])
#loc179 = loc(fused[#loc18, #loc16])
#loc180 = loc(fused[#loc21, #loc22])
#loc181 = loc(fused[#loc24, #loc22])
#loc182 = loc(fused[#loc25, #loc26])
#loc183 = loc(fused[#loc27, #loc28])
#loc184 = loc(fused[#loc32, #loc33])
#loc185 = loc(fused[#loc34, #loc35])
#loc186 = loc(fused[#loc36, #loc37])
#loc187 = loc(fused[#loc38, #loc39])
#loc188 = loc(fused[#loc40, #loc41])
#loc189 = loc(fused[#loc42, #loc43])
#loc190 = loc(fused[#loc45, #loc46])
#loc191 = loc(fused[#loc49, #loc50])
#loc192 = loc(fused[#loc51, #loc52])
#loc193 = loc(fused[#loc54, #loc53])
#loc194 = loc(fused[#loc55, #loc56])
#loc195 = loc(fused[#loc58, #loc56])
#loc196 = loc(fused[#loc61, #loc62])
#loc197 = loc(fused[#loc63, #loc64])
#loc198 = loc(fused[#loc66, #loc67, #loc68, #loc64])
#loc199 = loc(fused[#loc70, #loc71])
#loc200 = loc(fused[#loc73, #loc76])
#loc201 = loc(fused[#loc77, #loc78, #loc79, #loc71])
#loc202 = loc(fused[#loc80, #loc81])
#loc203 = loc(fused[#loc86, #loc87])
#loc204 = loc(fused[#loc88, #loc89])
#loc205 = loc(fused[#loc91, #loc90])
#loc206 = loc(fused[#loc92, #loc93])
#loc207 = loc(fused[#loc95, #loc93])
#loc208 = loc(fused[#loc98, #loc99])
#loc209 = loc(fused[#loc100, #loc101])
#loc210 = loc(fused[#loc103, #loc101])
#loc211 = loc(fused[#loc104, #loc105])
#loc212 = loc(fused[#loc107, #loc110])
#loc213 = loc(fused[#loc111, #loc112, #loc113, #loc105])
#loc214 = loc(fused[#loc114, #loc115])
#loc215 = loc(fused[#loc121, #loc122])
#loc216 = loc(fused[#loc123, #loc124])
#loc217 = loc(fused[#loc126, #loc125])
#loc218 = loc(fused[#loc127, #loc128])
#loc219 = loc(fused[#loc130, #loc131, #loc132, #loc128])
#loc220 = loc(fused[#loc136, #loc135])
#loc221 = loc(fused[#loc137, #loc138])
#loc222 = loc(fused[#loc140, #loc138])
#loc223 = loc(fused[#loc141, #loc142])
#loc224 = loc(fused[#loc143, #loc144])
#loc225 = loc(fused[#loc148, #loc149])
#loc226 = loc(fused[#loc150, #loc151])
#loc227 = loc(fused[#loc153, #loc152])
#loc228 = loc(fused[#loc154, #loc155])
#loc229 = loc(fused[#loc157, #loc155])
#loc230 = loc(fused[#loc159, #loc158])
#loc231 = loc(fused[#loc160, #loc161])
#loc232 = loc(fused[#loc163, #loc161])
#loc233 = loc(fused[#loc164, #loc165])
#loc234 = loc(fused[#loc166, #loc167])
