!s32i = !cir.int<s, 32>
!s64i = !cir.int<s, 64>
!s8i = !cir.int<s, 8>
!ty__IO_codecvt = !cir.struct<struct "_IO_codecvt" incomplete>
!ty__IO_marker = !cir.struct<struct "_IO_marker" incomplete>
!ty__IO_wide_data = !cir.struct<struct "_IO_wide_data" incomplete>
!u16i = !cir.int<u, 16>
!u32i = !cir.int<u, 32>
!void = !cir.void
#fn_attr = #cir<extra({inline = #cir.inline<no>, nothrow = #cir.nothrow, optnone = #cir.optnone})>
#fn_attr1 = #cir<extra({nothrow = #cir.nothrow})>
#loc83 = loc("CWE190_Integer_Overflow__unsigned_int_fscanf_multiply_12.c":170:10)
#loc84 = loc("CWE190_Integer_Overflow__unsigned_int_fscanf_multiply_12.c":170:14)
#loc85 = loc("CWE190_Integer_Overflow__unsigned_int_fscanf_multiply_12.c":170:20)
#loc86 = loc("CWE190_Integer_Overflow__unsigned_int_fscanf_multiply_12.c":170:32)
#loc248 = loc(fused[#loc83, #loc84])
#loc249 = loc(fused[#loc85, #loc86])
!ty__IO_FILE = !cir.struct<struct "_IO_FILE" {!s32i, !cir.ptr<!s8i>, !cir.ptr<!s8i>, !cir.ptr<!s8i>, !cir.ptr<!s8i>, !cir.ptr<!s8i>, !cir.ptr<!s8i>, !cir.ptr<!s8i>, !cir.ptr<!s8i>, !cir.ptr<!s8i>, !cir.ptr<!s8i>, !cir.ptr<!s8i>, !cir.ptr<!ty__IO_marker>, !cir.ptr<!cir.struct<struct "_IO_FILE">>, !s32i, !s32i, !s64i, !u16i, !s8i, !cir.array<!s8i x 1>, !cir.ptr<!void>, !s64i, !cir.ptr<!ty__IO_codecvt>, !cir.ptr<!ty__IO_wide_data>, !cir.ptr<!cir.struct<struct "_IO_FILE">>, !cir.ptr<!void>, !cir.ptr<!cir.ptr<!cir.struct<struct "_IO_FILE">>>, !s32i, !cir.array<!s8i x 20>} #cir.record.decl.ast>
module @"/home/ladisgin/git_proj/juliet-c/testcases/CWE190_Integer_Overflow/s05/CWE190_Integer_Overflow__unsigned_int_fscanf_multiply_12.c" attributes {cir.lang = #cir.lang<c>, cir.sob = #cir.signed_overflow_behavior<undefined>, cir.triple = "x86_64-unknown-linux-gnu", dlti.dl_spec = #dlti.dl_spec<f80 = dense<128> : vector<2xi64>, i128 = dense<128> : vector<2xi64>, !llvm.ptr<272> = dense<64> : vector<4xi64>, !llvm.ptr<271> = dense<32> : vector<4xi64>, i64 = dense<64> : vector<2xi64>, f16 = dense<16> : vector<2xi64>, f64 = dense<64> : vector<2xi64>, f128 = dense<128> : vector<2xi64>, i32 = dense<32> : vector<2xi64>, !llvm.ptr<270> = dense<32> : vector<4xi64>, i8 = dense<8> : vector<2xi64>, i16 = dense<16> : vector<2xi64>, !llvm.ptr = dense<64> : vector<4xi64>, i1 = dense<8> : vector<2xi64>, "dlti.stack_alignment" = 128 : i64, "dlti.endianness" = "little">} {
  cir.func no_proto private @globalReturnsTrueOrFalse(...) -> !s32i loc(#loc213)
  cir.func private @__isoc99_fscanf(!cir.ptr<!ty__IO_FILE>, !cir.ptr<!s8i>, ...) -> !s32i loc(#loc214)
  cir.global "private" external @stdin : !cir.ptr<!ty__IO_FILE> {alignment = 8 : i64} loc(#loc215)
  cir.global "private" constant cir_private dsolocal @".str" = #cir.const_array<"%u\00" : !cir.array<!s8i x 3>> : !cir.array<!s8i x 3> {alignment = 1 : i64} loc(#loc7)
  cir.func private @printUnsignedLine(!u32i) loc(#loc216)
  cir.func private @printLine(!cir.ptr<!s8i>) loc(#loc217)
  cir.global "private" constant cir_private dsolocal @".str.1" = #cir.const_array<"data value is too large to perform arithmetic safely.\00" : !cir.array<!s8i x 54>> : !cir.array<!s8i x 54> {alignment = 1 : i64} loc(#loc12)
  cir.func no_proto @CWE190_Integer_Overflow__unsigned_int_fscanf_multiply_12_bad() extra(#fn_attr) {
    %0 = cir.alloca !u32i, !cir.ptr<!u32i>, ["data"] {alignment = 4 : i64} loc(#loc219)
    %1 = cir.const #cir.int<0> : !s32i loc(#loc17)
    %2 = cir.cast(integral, %1 : !s32i), !u32i loc(#loc17)
    cir.store %2, %0 : !u32i, !cir.ptr<!u32i> loc(#loc220)
    cir.scope {
      %3 = cir.get_global @globalReturnsTrueOrFalse : !cir.ptr<!cir.func<!s32i (...)>> loc(#loc222)
      %4 = cir.cast(bitcast, %3 : !cir.ptr<!cir.func<!s32i (...)>>), !cir.ptr<!cir.func<!s32i ()>> loc(#loc222)
      %5 = cir.call %4() : (!cir.ptr<!cir.func<!s32i ()>>) -> !s32i loc(#loc21)
      %6 = cir.cast(int_to_bool, %5 : !s32i), !cir.bool loc(#loc21)
      cir.if %6 {
        %7 = cir.get_global @__isoc99_fscanf : !cir.ptr<!cir.func<!s32i (!cir.ptr<!ty__IO_FILE>, !cir.ptr<!s8i>, ...)>> loc(#loc26)
        %8 = cir.get_global @stdin : !cir.ptr<!cir.ptr<!ty__IO_FILE>> loc(#loc215)
        %9 = cir.load %8 : !cir.ptr<!cir.ptr<!ty__IO_FILE>>, !cir.ptr<!ty__IO_FILE> loc(#loc27)
        %10 = cir.get_global @".str" : !cir.ptr<!cir.array<!s8i x 3>> loc(#loc7)
        %11 = cir.cast(array_to_ptrdecay, %10 : !cir.ptr<!cir.array<!s8i x 3>>), !cir.ptr<!s8i> loc(#loc7)
        %12 = cir.call @__isoc99_fscanf(%9, %11, %0) : (!cir.ptr<!ty__IO_FILE>, !cir.ptr<!s8i>, !cir.ptr<!u32i>) -> !s32i loc(#loc26)
      } else {
        %7 = cir.const #cir.int<2> : !s32i loc(#loc28)
        %8 = cir.cast(integral, %7 : !s32i), !u32i loc(#loc28)
        cir.store %8, %0 : !u32i, !cir.ptr<!u32i> loc(#loc224)
      } loc(#loc223)
    } loc(#loc221)
    cir.scope {
      %3 = cir.get_global @globalReturnsTrueOrFalse : !cir.ptr<!cir.func<!s32i (...)>> loc(#loc226)
      %4 = cir.cast(bitcast, %3 : !cir.ptr<!cir.func<!s32i (...)>>), !cir.ptr<!cir.func<!s32i ()>> loc(#loc226)
      %5 = cir.call %4() : (!cir.ptr<!cir.func<!s32i ()>>) -> !s32i loc(#loc32)
      %6 = cir.cast(int_to_bool, %5 : !s32i), !cir.bool loc(#loc32)
      cir.if %6 {
        cir.scope {
          %7 = cir.load %0 : !cir.ptr<!u32i>, !u32i loc(#loc39)
          %8 = cir.const #cir.int<0> : !s32i loc(#loc40)
          %9 = cir.cast(integral, %8 : !s32i), !u32i loc(#loc40)
          %10 = cir.cmp(gt, %7, %9) : !u32i, !cir.bool loc(#loc229)
          cir.if %10 {
            %11 = cir.alloca !u32i, !cir.ptr<!u32i>, ["result", init] {alignment = 4 : i64} loc(#loc231)
            %12 = cir.load %0 : !cir.ptr<!u32i>, !u32i loc(#loc44)
            %13 = cir.const #cir.int<2> : !s32i loc(#loc43)
            %14 = cir.cast(integral, %13 : !s32i), !u32i loc(#loc43)
            %15 = cir.binop(mul, %12, %14) : !u32i loc(#loc232)
            cir.store %15, %11 : !u32i, !cir.ptr<!u32i> loc(#loc231)
            %16 = cir.load %11 : !cir.ptr<!u32i>, !u32i loc(#loc45)
            cir.call @printUnsignedLine(%16) : (!u32i) -> () loc(#loc46)
          } loc(#loc230)
        } loc(#loc228)
      } else {
        cir.scope {
          %7 = cir.load %0 : !cir.ptr<!u32i>, !u32i loc(#loc49)
          %8 = cir.const #cir.int<0> : !s32i loc(#loc50)
          %9 = cir.cast(integral, %8 : !s32i), !u32i loc(#loc50)
          %10 = cir.cmp(gt, %7, %9) : !u32i, !cir.bool loc(#loc234)
          cir.if %10 {
            cir.scope {
              %11 = cir.load %0 : !cir.ptr<!u32i>, !u32i loc(#loc54)
              %12 = cir.const #cir.int<2147483647> : !s32i loc(#loc55)
              %13 = cir.cast(integral, %12 : !s32i), !u32i loc(#loc55)
              %14 = cir.const #cir.int<2> : !u32i loc(#loc55)
              %15 = cir.binop(mul, %13, %14) : !u32i loc(#loc55)
              %16 = cir.const #cir.int<1> : !u32i loc(#loc55)
              %17 = cir.binop(add, %15, %16) : !u32i loc(#loc55)
              %18 = cir.const #cir.int<2> : !s32i loc(#loc56)
              %19 = cir.cast(integral, %18 : !s32i), !u32i loc(#loc56)
              %20 = cir.binop(div, %17, %19) : !u32i loc(#loc237)
              %21 = cir.cmp(lt, %11, %20) : !u32i, !cir.bool loc(#loc238)
              cir.if %21 {
                %22 = cir.alloca !u32i, !cir.ptr<!u32i>, ["result", init] {alignment = 4 : i64} loc(#loc240)
                %23 = cir.load %0 : !cir.ptr<!u32i>, !u32i loc(#loc63)
                %24 = cir.const #cir.int<2> : !s32i loc(#loc62)
                %25 = cir.cast(integral, %24 : !s32i), !u32i loc(#loc62)
                %26 = cir.binop(mul, %23, %25) : !u32i loc(#loc241)
                cir.store %26, %22 : !u32i, !cir.ptr<!u32i> loc(#loc240)
                %27 = cir.load %22 : !cir.ptr<!u32i>, !u32i loc(#loc64)
                cir.call @printUnsignedLine(%27) : (!u32i) -> () loc(#loc65)
              } else {
                %22 = cir.get_global @".str.1" : !cir.ptr<!cir.array<!s8i x 54>> loc(#loc12)
                %23 = cir.cast(array_to_ptrdecay, %22 : !cir.ptr<!cir.array<!s8i x 54>>), !cir.ptr<!s8i> loc(#loc12)
                cir.call @printLine(%23) : (!cir.ptr<!s8i>) -> () loc(#loc66)
              } loc(#loc239)
            } loc(#loc236)
          } loc(#loc235)
        } loc(#loc233)
      } loc(#loc227)
    } loc(#loc225)
    cir.return loc(#loc14)
  } loc(#loc218)
  cir.func no_proto @CWE190_Integer_Overflow__unsigned_int_fscanf_multiply_12_good() extra(#fn_attr) {
    %0 = cir.get_global @goodB2G : !cir.ptr<!cir.func<!void ()>> loc(#loc243)
    cir.call %0() : (!cir.ptr<!cir.func<!void ()>>) -> () loc(#loc69)
    %1 = cir.get_global @goodG2B : !cir.ptr<!cir.func<!void ()>> loc(#loc244)
    cir.call %1() : (!cir.ptr<!cir.func<!void ()>>) -> () loc(#loc71)
    cir.return loc(#loc68)
  } loc(#loc242)
  cir.func private @srand(!u32i) extra(#fn_attr1) loc(#loc245)
  cir.func private @time(!cir.ptr<!s64i>) -> !s64i extra(#fn_attr1) loc(#loc246)
  cir.global "private" constant cir_private dsolocal @".str.2" = #cir.const_array<"Calling good()...\00" : !cir.array<!s8i x 18>> : !cir.array<!s8i x 18> {alignment = 1 : i64} loc(#loc77)
  cir.global "private" constant cir_private dsolocal @".str.3" = #cir.const_array<"Finished good()\00" : !cir.array<!s8i x 16>> : !cir.array<!s8i x 16> {alignment = 1 : i64} loc(#loc78)
  cir.global "private" constant cir_private dsolocal @".str.4" = #cir.const_array<"Calling bad()...\00" : !cir.array<!s8i x 17>> : !cir.array<!s8i x 17> {alignment = 1 : i64} loc(#loc79)
  cir.global "private" constant cir_private dsolocal @".str.5" = #cir.const_array<"Finished bad()\00" : !cir.array<!s8i x 15>> : !cir.array<!s8i x 15> {alignment = 1 : i64} loc(#loc80)
  cir.func @main(%arg0: !s32i loc(fused[#loc83, #loc84]), %arg1: !cir.ptr<!cir.ptr<!s8i>> loc(fused[#loc85, #loc86])) -> !s32i extra(#fn_attr) {
    %0 = cir.alloca !s32i, !cir.ptr<!s32i>, ["argc", init] {alignment = 4 : i64} loc(#loc248)
    %1 = cir.alloca !cir.ptr<!cir.ptr<!s8i>>, !cir.ptr<!cir.ptr<!cir.ptr<!s8i>>>, ["argv", init] {alignment = 8 : i64} loc(#loc249)
    %2 = cir.alloca !s32i, !cir.ptr<!s32i>, ["__retval"] {alignment = 4 : i64} loc(#loc82)
    cir.store %arg0, %0 : !s32i, !cir.ptr<!s32i> loc(#loc87)
    cir.store %arg1, %1 : !cir.ptr<!cir.ptr<!s8i>>, !cir.ptr<!cir.ptr<!cir.ptr<!s8i>>> loc(#loc87)
    %3 = cir.const #cir.ptr<null> : !cir.ptr<!s64i> loc(#loc88)
    %4 = cir.call @time(%3) : (!cir.ptr<!s64i>) -> !s64i extra(#fn_attr1) loc(#loc89)
    %5 = cir.cast(integral, %4 : !s64i), !u32i loc(#loc89)
    cir.call @srand(%5) : (!u32i) -> () extra(#fn_attr1) loc(#loc90)
    %6 = cir.get_global @".str.2" : !cir.ptr<!cir.array<!s8i x 18>> loc(#loc77)
    %7 = cir.cast(array_to_ptrdecay, %6 : !cir.ptr<!cir.array<!s8i x 18>>), !cir.ptr<!s8i> loc(#loc77)
    cir.call @printLine(%7) : (!cir.ptr<!s8i>) -> () loc(#loc91)
    %8 = cir.get_global @CWE190_Integer_Overflow__unsigned_int_fscanf_multiply_12_good : !cir.ptr<!cir.func<!void ()>> loc(#loc250)
    cir.call @CWE190_Integer_Overflow__unsigned_int_fscanf_multiply_12_good() : () -> () loc(#loc92)
    %9 = cir.get_global @".str.3" : !cir.ptr<!cir.array<!s8i x 16>> loc(#loc78)
    %10 = cir.cast(array_to_ptrdecay, %9 : !cir.ptr<!cir.array<!s8i x 16>>), !cir.ptr<!s8i> loc(#loc78)
    cir.call @printLine(%10) : (!cir.ptr<!s8i>) -> () loc(#loc94)
    %11 = cir.get_global @".str.4" : !cir.ptr<!cir.array<!s8i x 17>> loc(#loc79)
    %12 = cir.cast(array_to_ptrdecay, %11 : !cir.ptr<!cir.array<!s8i x 17>>), !cir.ptr<!s8i> loc(#loc79)
    cir.call @printLine(%12) : (!cir.ptr<!s8i>) -> () loc(#loc95)
    %13 = cir.get_global @CWE190_Integer_Overflow__unsigned_int_fscanf_multiply_12_bad : !cir.ptr<!cir.func<!void ()>> loc(#loc251)
    cir.call @CWE190_Integer_Overflow__unsigned_int_fscanf_multiply_12_bad() : () -> () loc(#loc96)
    %14 = cir.get_global @".str.5" : !cir.ptr<!cir.array<!s8i x 15>> loc(#loc80)
    %15 = cir.cast(array_to_ptrdecay, %14 : !cir.ptr<!cir.array<!s8i x 15>>), !cir.ptr<!s8i> loc(#loc80)
    cir.call @printLine(%15) : (!cir.ptr<!s8i>) -> () loc(#loc98)
    %16 = cir.const #cir.int<0> : !s32i loc(#loc99)
    cir.store %16, %2 : !s32i, !cir.ptr<!s32i> loc(#loc252)
    %17 = cir.load %2 : !cir.ptr<!s32i>, !s32i loc(#loc252)
    cir.return %17 : !s32i loc(#loc252)
  } loc(#loc247)
  cir.func no_proto internal private @goodB2G() extra(#fn_attr) {
    %0 = cir.alloca !u32i, !cir.ptr<!u32i>, ["data"] {alignment = 4 : i64} loc(#loc254)
    %1 = cir.const #cir.int<0> : !s32i loc(#loc105)
    %2 = cir.cast(integral, %1 : !s32i), !u32i loc(#loc105)
    cir.store %2, %0 : !u32i, !cir.ptr<!u32i> loc(#loc255)
    cir.scope {
      %3 = cir.get_global @globalReturnsTrueOrFalse : !cir.ptr<!cir.func<!s32i (...)>> loc(#loc257)
      %4 = cir.cast(bitcast, %3 : !cir.ptr<!cir.func<!s32i (...)>>), !cir.ptr<!cir.func<!s32i ()>> loc(#loc257)
      %5 = cir.call %4() : (!cir.ptr<!cir.func<!s32i ()>>) -> !s32i loc(#loc109)
      %6 = cir.cast(int_to_bool, %5 : !s32i), !cir.bool loc(#loc109)
      cir.if %6 {
        %7 = cir.get_global @__isoc99_fscanf : !cir.ptr<!cir.func<!s32i (!cir.ptr<!ty__IO_FILE>, !cir.ptr<!s8i>, ...)>> loc(#loc114)
        %8 = cir.get_global @stdin : !cir.ptr<!cir.ptr<!ty__IO_FILE>> loc(#loc215)
        %9 = cir.load %8 : !cir.ptr<!cir.ptr<!ty__IO_FILE>>, !cir.ptr<!ty__IO_FILE> loc(#loc115)
        %10 = cir.get_global @".str" : !cir.ptr<!cir.array<!s8i x 3>> loc(#loc116)
        %11 = cir.cast(array_to_ptrdecay, %10 : !cir.ptr<!cir.array<!s8i x 3>>), !cir.ptr<!s8i> loc(#loc116)
        %12 = cir.call @__isoc99_fscanf(%9, %11, %0) : (!cir.ptr<!ty__IO_FILE>, !cir.ptr<!s8i>, !cir.ptr<!u32i>) -> !s32i loc(#loc114)
      } else {
        %7 = cir.get_global @__isoc99_fscanf : !cir.ptr<!cir.func<!s32i (!cir.ptr<!ty__IO_FILE>, !cir.ptr<!s8i>, ...)>> loc(#loc117)
        %8 = cir.get_global @stdin : !cir.ptr<!cir.ptr<!ty__IO_FILE>> loc(#loc215)
        %9 = cir.load %8 : !cir.ptr<!cir.ptr<!ty__IO_FILE>>, !cir.ptr<!ty__IO_FILE> loc(#loc118)
        %10 = cir.get_global @".str" : !cir.ptr<!cir.array<!s8i x 3>> loc(#loc119)
        %11 = cir.cast(array_to_ptrdecay, %10 : !cir.ptr<!cir.array<!s8i x 3>>), !cir.ptr<!s8i> loc(#loc119)
        %12 = cir.call @__isoc99_fscanf(%9, %11, %0) : (!cir.ptr<!ty__IO_FILE>, !cir.ptr<!s8i>, !cir.ptr<!u32i>) -> !s32i loc(#loc117)
      } loc(#loc258)
    } loc(#loc256)
    cir.scope {
      %3 = cir.get_global @globalReturnsTrueOrFalse : !cir.ptr<!cir.func<!s32i (...)>> loc(#loc260)
      %4 = cir.cast(bitcast, %3 : !cir.ptr<!cir.func<!s32i (...)>>), !cir.ptr<!cir.func<!s32i ()>> loc(#loc260)
      %5 = cir.call %4() : (!cir.ptr<!cir.func<!s32i ()>>) -> !s32i loc(#loc122)
      %6 = cir.cast(int_to_bool, %5 : !s32i), !cir.bool loc(#loc122)
      cir.if %6 {
        cir.scope {
          %7 = cir.load %0 : !cir.ptr<!u32i>, !u32i loc(#loc129)
          %8 = cir.const #cir.int<0> : !s32i loc(#loc130)
          %9 = cir.cast(integral, %8 : !s32i), !u32i loc(#loc130)
          %10 = cir.cmp(gt, %7, %9) : !u32i, !cir.bool loc(#loc263)
          cir.if %10 {
            cir.scope {
              %11 = cir.load %0 : !cir.ptr<!u32i>, !u32i loc(#loc134)
              %12 = cir.const #cir.int<2147483647> : !s32i loc(#loc135)
              %13 = cir.cast(integral, %12 : !s32i), !u32i loc(#loc135)
              %14 = cir.const #cir.int<2> : !u32i loc(#loc135)
              %15 = cir.binop(mul, %13, %14) : !u32i loc(#loc135)
              %16 = cir.const #cir.int<1> : !u32i loc(#loc135)
              %17 = cir.binop(add, %15, %16) : !u32i loc(#loc135)
              %18 = cir.const #cir.int<2> : !s32i loc(#loc136)
              %19 = cir.cast(integral, %18 : !s32i), !u32i loc(#loc136)
              %20 = cir.binop(div, %17, %19) : !u32i loc(#loc266)
              %21 = cir.cmp(lt, %11, %20) : !u32i, !cir.bool loc(#loc267)
              cir.if %21 {
                %22 = cir.alloca !u32i, !cir.ptr<!u32i>, ["result", init] {alignment = 4 : i64} loc(#loc269)
                %23 = cir.load %0 : !cir.ptr<!u32i>, !u32i loc(#loc143)
                %24 = cir.const #cir.int<2> : !s32i loc(#loc142)
                %25 = cir.cast(integral, %24 : !s32i), !u32i loc(#loc142)
                %26 = cir.binop(mul, %23, %25) : !u32i loc(#loc270)
                cir.store %26, %22 : !u32i, !cir.ptr<!u32i> loc(#loc269)
                %27 = cir.load %22 : !cir.ptr<!u32i>, !u32i loc(#loc144)
                cir.call @printUnsignedLine(%27) : (!u32i) -> () loc(#loc145)
              } else {
                %22 = cir.get_global @".str.1" : !cir.ptr<!cir.array<!s8i x 54>> loc(#loc146)
                %23 = cir.cast(array_to_ptrdecay, %22 : !cir.ptr<!cir.array<!s8i x 54>>), !cir.ptr<!s8i> loc(#loc146)
                cir.call @printLine(%23) : (!cir.ptr<!s8i>) -> () loc(#loc147)
              } loc(#loc268)
            } loc(#loc265)
          } loc(#loc264)
        } loc(#loc262)
      } else {
        cir.scope {
          %7 = cir.load %0 : !cir.ptr<!u32i>, !u32i loc(#loc150)
          %8 = cir.const #cir.int<0> : !s32i loc(#loc151)
          %9 = cir.cast(integral, %8 : !s32i), !u32i loc(#loc151)
          %10 = cir.cmp(gt, %7, %9) : !u32i, !cir.bool loc(#loc272)
          cir.if %10 {
            cir.scope {
              %11 = cir.load %0 : !cir.ptr<!u32i>, !u32i loc(#loc155)
              %12 = cir.const #cir.int<2147483647> : !s32i loc(#loc156)
              %13 = cir.cast(integral, %12 : !s32i), !u32i loc(#loc156)
              %14 = cir.const #cir.int<2> : !u32i loc(#loc156)
              %15 = cir.binop(mul, %13, %14) : !u32i loc(#loc156)
              %16 = cir.const #cir.int<1> : !u32i loc(#loc156)
              %17 = cir.binop(add, %15, %16) : !u32i loc(#loc156)
              %18 = cir.const #cir.int<2> : !s32i loc(#loc157)
              %19 = cir.cast(integral, %18 : !s32i), !u32i loc(#loc157)
              %20 = cir.binop(div, %17, %19) : !u32i loc(#loc275)
              %21 = cir.cmp(lt, %11, %20) : !u32i, !cir.bool loc(#loc276)
              cir.if %21 {
                %22 = cir.alloca !u32i, !cir.ptr<!u32i>, ["result", init] {alignment = 4 : i64} loc(#loc278)
                %23 = cir.load %0 : !cir.ptr<!u32i>, !u32i loc(#loc164)
                %24 = cir.const #cir.int<2> : !s32i loc(#loc163)
                %25 = cir.cast(integral, %24 : !s32i), !u32i loc(#loc163)
                %26 = cir.binop(mul, %23, %25) : !u32i loc(#loc279)
                cir.store %26, %22 : !u32i, !cir.ptr<!u32i> loc(#loc278)
                %27 = cir.load %22 : !cir.ptr<!u32i>, !u32i loc(#loc165)
                cir.call @printUnsignedLine(%27) : (!u32i) -> () loc(#loc166)
              } else {
                %22 = cir.get_global @".str.1" : !cir.ptr<!cir.array<!s8i x 54>> loc(#loc167)
                %23 = cir.cast(array_to_ptrdecay, %22 : !cir.ptr<!cir.array<!s8i x 54>>), !cir.ptr<!s8i> loc(#loc167)
                cir.call @printLine(%23) : (!cir.ptr<!s8i>) -> () loc(#loc168)
              } loc(#loc277)
            } loc(#loc274)
          } loc(#loc273)
        } loc(#loc271)
      } loc(#loc261)
    } loc(#loc259)
    cir.return loc(#loc102)
  } loc(#loc253)
  cir.func no_proto internal private @goodG2B() extra(#fn_attr) {
    %0 = cir.alloca !u32i, !cir.ptr<!u32i>, ["data"] {alignment = 4 : i64} loc(#loc281)
    %1 = cir.const #cir.int<0> : !s32i loc(#loc173)
    %2 = cir.cast(integral, %1 : !s32i), !u32i loc(#loc173)
    cir.store %2, %0 : !u32i, !cir.ptr<!u32i> loc(#loc282)
    cir.scope {
      %3 = cir.get_global @globalReturnsTrueOrFalse : !cir.ptr<!cir.func<!s32i (...)>> loc(#loc284)
      %4 = cir.cast(bitcast, %3 : !cir.ptr<!cir.func<!s32i (...)>>), !cir.ptr<!cir.func<!s32i ()>> loc(#loc284)
      %5 = cir.call %4() : (!cir.ptr<!cir.func<!s32i ()>>) -> !s32i loc(#loc177)
      %6 = cir.cast(int_to_bool, %5 : !s32i), !cir.bool loc(#loc177)
      cir.if %6 {
        %7 = cir.const #cir.int<2> : !s32i loc(#loc182)
        %8 = cir.cast(integral, %7 : !s32i), !u32i loc(#loc182)
        cir.store %8, %0 : !u32i, !cir.ptr<!u32i> loc(#loc286)
      } else {
        %7 = cir.const #cir.int<2> : !s32i loc(#loc184)
        %8 = cir.cast(integral, %7 : !s32i), !u32i loc(#loc184)
        cir.store %8, %0 : !u32i, !cir.ptr<!u32i> loc(#loc287)
      } loc(#loc285)
    } loc(#loc283)
    cir.scope {
      %3 = cir.get_global @globalReturnsTrueOrFalse : !cir.ptr<!cir.func<!s32i (...)>> loc(#loc289)
      %4 = cir.cast(bitcast, %3 : !cir.ptr<!cir.func<!s32i (...)>>), !cir.ptr<!cir.func<!s32i ()>> loc(#loc289)
      %5 = cir.call %4() : (!cir.ptr<!cir.func<!s32i ()>>) -> !s32i loc(#loc188)
      %6 = cir.cast(int_to_bool, %5 : !s32i), !cir.bool loc(#loc188)
      cir.if %6 {
        cir.scope {
          %7 = cir.load %0 : !cir.ptr<!u32i>, !u32i loc(#loc195)
          %8 = cir.const #cir.int<0> : !s32i loc(#loc196)
          %9 = cir.cast(integral, %8 : !s32i), !u32i loc(#loc196)
          %10 = cir.cmp(gt, %7, %9) : !u32i, !cir.bool loc(#loc292)
          cir.if %10 {
            %11 = cir.alloca !u32i, !cir.ptr<!u32i>, ["result", init] {alignment = 4 : i64} loc(#loc294)
            %12 = cir.load %0 : !cir.ptr<!u32i>, !u32i loc(#loc200)
            %13 = cir.const #cir.int<2> : !s32i loc(#loc199)
            %14 = cir.cast(integral, %13 : !s32i), !u32i loc(#loc199)
            %15 = cir.binop(mul, %12, %14) : !u32i loc(#loc295)
            cir.store %15, %11 : !u32i, !cir.ptr<!u32i> loc(#loc294)
            %16 = cir.load %11 : !cir.ptr<!u32i>, !u32i loc(#loc201)
            cir.call @printUnsignedLine(%16) : (!u32i) -> () loc(#loc202)
          } loc(#loc293)
        } loc(#loc291)
      } else {
        cir.scope {
          %7 = cir.load %0 : !cir.ptr<!u32i>, !u32i loc(#loc205)
          %8 = cir.const #cir.int<0> : !s32i loc(#loc206)
          %9 = cir.cast(integral, %8 : !s32i), !u32i loc(#loc206)
          %10 = cir.cmp(gt, %7, %9) : !u32i, !cir.bool loc(#loc297)
          cir.if %10 {
            %11 = cir.alloca !u32i, !cir.ptr<!u32i>, ["result", init] {alignment = 4 : i64} loc(#loc299)
            %12 = cir.load %0 : !cir.ptr<!u32i>, !u32i loc(#loc210)
            %13 = cir.const #cir.int<2> : !s32i loc(#loc209)
            %14 = cir.cast(integral, %13 : !s32i), !u32i loc(#loc209)
            %15 = cir.binop(mul, %12, %14) : !u32i loc(#loc300)
            cir.store %15, %11 : !u32i, !cir.ptr<!u32i> loc(#loc299)
            %16 = cir.load %11 : !cir.ptr<!u32i>, !u32i loc(#loc211)
            cir.call @printUnsignedLine(%16) : (!u32i) -> () loc(#loc212)
          } loc(#loc298)
        } loc(#loc296)
      } loc(#loc290)
    } loc(#loc288)
    cir.return loc(#loc170)
  } loc(#loc280)
} loc(#loc)
#loc = loc("/home/ladisgin/git_proj/juliet-c/testcases/CWE190_Integer_Overflow/s05/CWE190_Integer_Overflow__unsigned_int_fscanf_multiply_12.c":0:0)
#loc1 = loc("../../../testcasesupport/std_testcase_io.h":52:1)
#loc2 = loc("../../../testcasesupport/std_testcase_io.h":52:30)
#loc3 = loc("/usr/include/stdio.h":463:1)
#loc4 = loc("/usr/include/stdio.h":465:33)
#loc5 = loc("/usr/include/stdio.h":149:1)
#loc6 = loc("/usr/include/stdio.h":149:14)
#loc7 = loc("CWE190_Integer_Overflow__unsigned_int_fscanf_multiply_12.c":29:24)
#loc8 = loc("../../../testcasesupport/std_testcase_io.h":34:1)
#loc9 = loc("../../../testcasesupport/std_testcase_io.h":34:47)
#loc10 = loc("../../../testcasesupport/std_testcase_io.h":14:1)
#loc11 = loc("../../../testcasesupport/std_testcase_io.h":14:33)
#loc12 = loc("CWE190_Integer_Overflow__unsigned_int_fscanf_multiply_12.c":57:27)
#loc13 = loc("CWE190_Integer_Overflow__unsigned_int_fscanf_multiply_12.c":22:1)
#loc14 = loc("CWE190_Integer_Overflow__unsigned_int_fscanf_multiply_12.c":61:1)
#loc15 = loc("CWE190_Integer_Overflow__unsigned_int_fscanf_multiply_12.c":24:5)
#loc16 = loc("CWE190_Integer_Overflow__unsigned_int_fscanf_multiply_12.c":24:18)
#loc17 = loc("CWE190_Integer_Overflow__unsigned_int_fscanf_multiply_12.c":25:12)
#loc18 = loc("CWE190_Integer_Overflow__unsigned_int_fscanf_multiply_12.c":25:5)
#loc19 = loc("CWE190_Integer_Overflow__unsigned_int_fscanf_multiply_12.c":26:5)
#loc20 = loc("CWE190_Integer_Overflow__unsigned_int_fscanf_multiply_12.c":35:5)
#loc21 = loc("CWE190_Integer_Overflow__unsigned_int_fscanf_multiply_12.c":26:8)
#loc22 = loc("CWE190_Integer_Overflow__unsigned_int_fscanf_multiply_12.c":26:33)
#loc23 = loc("CWE190_Integer_Overflow__unsigned_int_fscanf_multiply_12.c":27:5)
#loc24 = loc("CWE190_Integer_Overflow__unsigned_int_fscanf_multiply_12.c":30:5)
#loc25 = loc("CWE190_Integer_Overflow__unsigned_int_fscanf_multiply_12.c":32:5)
#loc26 = loc("CWE190_Integer_Overflow__unsigned_int_fscanf_multiply_12.c":29:9)
#loc27 = loc("CWE190_Integer_Overflow__unsigned_int_fscanf_multiply_12.c":29:17)
#loc28 = loc("CWE190_Integer_Overflow__unsigned_int_fscanf_multiply_12.c":34:16)
#loc29 = loc("CWE190_Integer_Overflow__unsigned_int_fscanf_multiply_12.c":34:9)
#loc30 = loc("CWE190_Integer_Overflow__unsigned_int_fscanf_multiply_12.c":36:5)
#loc31 = loc("CWE190_Integer_Overflow__unsigned_int_fscanf_multiply_12.c":60:5)
#loc32 = loc("CWE190_Integer_Overflow__unsigned_int_fscanf_multiply_12.c":36:8)
#loc33 = loc("CWE190_Integer_Overflow__unsigned_int_fscanf_multiply_12.c":36:33)
#loc34 = loc("CWE190_Integer_Overflow__unsigned_int_fscanf_multiply_12.c":37:5)
#loc35 = loc("CWE190_Integer_Overflow__unsigned_int_fscanf_multiply_12.c":44:5)
#loc36 = loc("CWE190_Integer_Overflow__unsigned_int_fscanf_multiply_12.c":46:5)
#loc37 = loc("CWE190_Integer_Overflow__unsigned_int_fscanf_multiply_12.c":38:9)
#loc38 = loc("CWE190_Integer_Overflow__unsigned_int_fscanf_multiply_12.c":43:9)
#loc39 = loc("CWE190_Integer_Overflow__unsigned_int_fscanf_multiply_12.c":38:12)
#loc40 = loc("CWE190_Integer_Overflow__unsigned_int_fscanf_multiply_12.c":38:19)
#loc41 = loc("CWE190_Integer_Overflow__unsigned_int_fscanf_multiply_12.c":39:9)
#loc42 = loc("CWE190_Integer_Overflow__unsigned_int_fscanf_multiply_12.c":41:13)
#loc43 = loc("CWE190_Integer_Overflow__unsigned_int_fscanf_multiply_12.c":41:42)
#loc44 = loc("CWE190_Integer_Overflow__unsigned_int_fscanf_multiply_12.c":41:35)
#loc45 = loc("CWE190_Integer_Overflow__unsigned_int_fscanf_multiply_12.c":42:31)
#loc46 = loc("CWE190_Integer_Overflow__unsigned_int_fscanf_multiply_12.c":42:13)
#loc47 = loc("CWE190_Integer_Overflow__unsigned_int_fscanf_multiply_12.c":47:9)
#loc48 = loc("CWE190_Integer_Overflow__unsigned_int_fscanf_multiply_12.c":59:9)
#loc49 = loc("CWE190_Integer_Overflow__unsigned_int_fscanf_multiply_12.c":47:12)
#loc50 = loc("CWE190_Integer_Overflow__unsigned_int_fscanf_multiply_12.c":47:19)
#loc51 = loc("CWE190_Integer_Overflow__unsigned_int_fscanf_multiply_12.c":48:9)
#loc52 = loc("CWE190_Integer_Overflow__unsigned_int_fscanf_multiply_12.c":50:13)
#loc53 = loc("CWE190_Integer_Overflow__unsigned_int_fscanf_multiply_12.c":58:13)
#loc54 = loc("CWE190_Integer_Overflow__unsigned_int_fscanf_multiply_12.c":50:17)
#loc55 = loc("CWE190_Integer_Overflow__unsigned_int_fscanf_multiply_12.c":50:25)
#loc56 = loc("CWE190_Integer_Overflow__unsigned_int_fscanf_multiply_12.c":50:34)
#loc57 = loc("CWE190_Integer_Overflow__unsigned_int_fscanf_multiply_12.c":50:35)
#loc58 = loc("CWE190_Integer_Overflow__unsigned_int_fscanf_multiply_12.c":51:13)
#loc59 = loc("CWE190_Integer_Overflow__unsigned_int_fscanf_multiply_12.c":54:13)
#loc60 = loc("CWE190_Integer_Overflow__unsigned_int_fscanf_multiply_12.c":56:13)
#loc61 = loc("CWE190_Integer_Overflow__unsigned_int_fscanf_multiply_12.c":52:17)
#loc62 = loc("CWE190_Integer_Overflow__unsigned_int_fscanf_multiply_12.c":52:46)
#loc63 = loc("CWE190_Integer_Overflow__unsigned_int_fscanf_multiply_12.c":52:39)
#loc64 = loc("CWE190_Integer_Overflow__unsigned_int_fscanf_multiply_12.c":53:35)
#loc65 = loc("CWE190_Integer_Overflow__unsigned_int_fscanf_multiply_12.c":53:17)
#loc66 = loc("CWE190_Integer_Overflow__unsigned_int_fscanf_multiply_12.c":57:17)
#loc67 = loc("CWE190_Integer_Overflow__unsigned_int_fscanf_multiply_12.c":155:1)
#loc68 = loc("CWE190_Integer_Overflow__unsigned_int_fscanf_multiply_12.c":159:1)
#loc69 = loc("CWE190_Integer_Overflow__unsigned_int_fscanf_multiply_12.c":157:5)
#loc70 = loc("CWE190_Integer_Overflow__unsigned_int_fscanf_multiply_12.c":157:13)
#loc71 = loc("CWE190_Integer_Overflow__unsigned_int_fscanf_multiply_12.c":158:5)
#loc72 = loc("CWE190_Integer_Overflow__unsigned_int_fscanf_multiply_12.c":158:13)
#loc73 = loc("/usr/include/stdlib.h":575:1)
#loc74 = loc("/usr/include/stdlib.h":575:41)
#loc75 = loc("/usr/include/time.h":76:1)
#loc76 = loc("/usr/include/time.h":76:38)
#loc77 = loc("CWE190_Integer_Overflow__unsigned_int_fscanf_multiply_12.c":175:15)
#loc78 = loc("CWE190_Integer_Overflow__unsigned_int_fscanf_multiply_12.c":177:15)
#loc79 = loc("CWE190_Integer_Overflow__unsigned_int_fscanf_multiply_12.c":180:15)
#loc80 = loc("CWE190_Integer_Overflow__unsigned_int_fscanf_multiply_12.c":182:15)
#loc81 = loc("CWE190_Integer_Overflow__unsigned_int_fscanf_multiply_12.c":170:1)
#loc82 = loc("CWE190_Integer_Overflow__unsigned_int_fscanf_multiply_12.c":185:1)
#loc87 = loc("CWE190_Integer_Overflow__unsigned_int_fscanf_multiply_12.c":171:1)
#loc88 = loc("CWE190_Integer_Overflow__unsigned_int_fscanf_multiply_12.c":173:27)
#loc89 = loc("CWE190_Integer_Overflow__unsigned_int_fscanf_multiply_12.c":173:22)
#loc90 = loc("CWE190_Integer_Overflow__unsigned_int_fscanf_multiply_12.c":173:5)
#loc91 = loc("CWE190_Integer_Overflow__unsigned_int_fscanf_multiply_12.c":175:5)
#loc92 = loc("CWE190_Integer_Overflow__unsigned_int_fscanf_multiply_12.c":176:5)
#loc93 = loc("CWE190_Integer_Overflow__unsigned_int_fscanf_multiply_12.c":176:67)
#loc94 = loc("CWE190_Integer_Overflow__unsigned_int_fscanf_multiply_12.c":177:5)
#loc95 = loc("CWE190_Integer_Overflow__unsigned_int_fscanf_multiply_12.c":180:5)
#loc96 = loc("CWE190_Integer_Overflow__unsigned_int_fscanf_multiply_12.c":181:5)
#loc97 = loc("CWE190_Integer_Overflow__unsigned_int_fscanf_multiply_12.c":181:66)
#loc98 = loc("CWE190_Integer_Overflow__unsigned_int_fscanf_multiply_12.c":182:5)
#loc99 = loc("CWE190_Integer_Overflow__unsigned_int_fscanf_multiply_12.c":184:12)
#loc100 = loc("CWE190_Integer_Overflow__unsigned_int_fscanf_multiply_12.c":184:5)
#loc101 = loc("CWE190_Integer_Overflow__unsigned_int_fscanf_multiply_12.c":70:1)
#loc102 = loc("CWE190_Integer_Overflow__unsigned_int_fscanf_multiply_12.c":116:1)
#loc103 = loc("CWE190_Integer_Overflow__unsigned_int_fscanf_multiply_12.c":72:5)
#loc104 = loc("CWE190_Integer_Overflow__unsigned_int_fscanf_multiply_12.c":72:18)
#loc105 = loc("CWE190_Integer_Overflow__unsigned_int_fscanf_multiply_12.c":73:12)
#loc106 = loc("CWE190_Integer_Overflow__unsigned_int_fscanf_multiply_12.c":73:5)
#loc107 = loc("CWE190_Integer_Overflow__unsigned_int_fscanf_multiply_12.c":74:5)
#loc108 = loc("CWE190_Integer_Overflow__unsigned_int_fscanf_multiply_12.c":83:5)
#loc109 = loc("CWE190_Integer_Overflow__unsigned_int_fscanf_multiply_12.c":74:8)
#loc110 = loc("CWE190_Integer_Overflow__unsigned_int_fscanf_multiply_12.c":74:33)
#loc111 = loc("CWE190_Integer_Overflow__unsigned_int_fscanf_multiply_12.c":75:5)
#loc112 = loc("CWE190_Integer_Overflow__unsigned_int_fscanf_multiply_12.c":78:5)
#loc113 = loc("CWE190_Integer_Overflow__unsigned_int_fscanf_multiply_12.c":80:5)
#loc114 = loc("CWE190_Integer_Overflow__unsigned_int_fscanf_multiply_12.c":77:9)
#loc115 = loc("CWE190_Integer_Overflow__unsigned_int_fscanf_multiply_12.c":77:17)
#loc116 = loc("CWE190_Integer_Overflow__unsigned_int_fscanf_multiply_12.c":77:24)
#loc117 = loc("CWE190_Integer_Overflow__unsigned_int_fscanf_multiply_12.c":82:9)
#loc118 = loc("CWE190_Integer_Overflow__unsigned_int_fscanf_multiply_12.c":82:17)
#loc119 = loc("CWE190_Integer_Overflow__unsigned_int_fscanf_multiply_12.c":82:24)
#loc120 = loc("CWE190_Integer_Overflow__unsigned_int_fscanf_multiply_12.c":84:5)
#loc121 = loc("CWE190_Integer_Overflow__unsigned_int_fscanf_multiply_12.c":115:5)
#loc122 = loc("CWE190_Integer_Overflow__unsigned_int_fscanf_multiply_12.c":84:8)
#loc123 = loc("CWE190_Integer_Overflow__unsigned_int_fscanf_multiply_12.c":84:33)
#loc124 = loc("CWE190_Integer_Overflow__unsigned_int_fscanf_multiply_12.c":85:5)
#loc125 = loc("CWE190_Integer_Overflow__unsigned_int_fscanf_multiply_12.c":99:5)
#loc126 = loc("CWE190_Integer_Overflow__unsigned_int_fscanf_multiply_12.c":101:5)
#loc127 = loc("CWE190_Integer_Overflow__unsigned_int_fscanf_multiply_12.c":86:9)
#loc128 = loc("CWE190_Integer_Overflow__unsigned_int_fscanf_multiply_12.c":98:9)
#loc129 = loc("CWE190_Integer_Overflow__unsigned_int_fscanf_multiply_12.c":86:12)
#loc130 = loc("CWE190_Integer_Overflow__unsigned_int_fscanf_multiply_12.c":86:19)
#loc131 = loc("CWE190_Integer_Overflow__unsigned_int_fscanf_multiply_12.c":87:9)
#loc132 = loc("CWE190_Integer_Overflow__unsigned_int_fscanf_multiply_12.c":89:13)
#loc133 = loc("CWE190_Integer_Overflow__unsigned_int_fscanf_multiply_12.c":97:13)
#loc134 = loc("CWE190_Integer_Overflow__unsigned_int_fscanf_multiply_12.c":89:17)
#loc135 = loc("CWE190_Integer_Overflow__unsigned_int_fscanf_multiply_12.c":89:25)
#loc136 = loc("CWE190_Integer_Overflow__unsigned_int_fscanf_multiply_12.c":89:34)
#loc137 = loc("CWE190_Integer_Overflow__unsigned_int_fscanf_multiply_12.c":89:35)
#loc138 = loc("CWE190_Integer_Overflow__unsigned_int_fscanf_multiply_12.c":90:13)
#loc139 = loc("CWE190_Integer_Overflow__unsigned_int_fscanf_multiply_12.c":93:13)
#loc140 = loc("CWE190_Integer_Overflow__unsigned_int_fscanf_multiply_12.c":95:13)
#loc141 = loc("CWE190_Integer_Overflow__unsigned_int_fscanf_multiply_12.c":91:17)
#loc142 = loc("CWE190_Integer_Overflow__unsigned_int_fscanf_multiply_12.c":91:46)
#loc143 = loc("CWE190_Integer_Overflow__unsigned_int_fscanf_multiply_12.c":91:39)
#loc144 = loc("CWE190_Integer_Overflow__unsigned_int_fscanf_multiply_12.c":92:35)
#loc145 = loc("CWE190_Integer_Overflow__unsigned_int_fscanf_multiply_12.c":92:17)
#loc146 = loc("CWE190_Integer_Overflow__unsigned_int_fscanf_multiply_12.c":96:27)
#loc147 = loc("CWE190_Integer_Overflow__unsigned_int_fscanf_multiply_12.c":96:17)
#loc148 = loc("CWE190_Integer_Overflow__unsigned_int_fscanf_multiply_12.c":102:9)
#loc149 = loc("CWE190_Integer_Overflow__unsigned_int_fscanf_multiply_12.c":114:9)
#loc150 = loc("CWE190_Integer_Overflow__unsigned_int_fscanf_multiply_12.c":102:12)
#loc151 = loc("CWE190_Integer_Overflow__unsigned_int_fscanf_multiply_12.c":102:19)
#loc152 = loc("CWE190_Integer_Overflow__unsigned_int_fscanf_multiply_12.c":103:9)
#loc153 = loc("CWE190_Integer_Overflow__unsigned_int_fscanf_multiply_12.c":105:13)
#loc154 = loc("CWE190_Integer_Overflow__unsigned_int_fscanf_multiply_12.c":113:13)
#loc155 = loc("CWE190_Integer_Overflow__unsigned_int_fscanf_multiply_12.c":105:17)
#loc156 = loc("CWE190_Integer_Overflow__unsigned_int_fscanf_multiply_12.c":105:25)
#loc157 = loc("CWE190_Integer_Overflow__unsigned_int_fscanf_multiply_12.c":105:34)
#loc158 = loc("CWE190_Integer_Overflow__unsigned_int_fscanf_multiply_12.c":105:35)
#loc159 = loc("CWE190_Integer_Overflow__unsigned_int_fscanf_multiply_12.c":106:13)
#loc160 = loc("CWE190_Integer_Overflow__unsigned_int_fscanf_multiply_12.c":109:13)
#loc161 = loc("CWE190_Integer_Overflow__unsigned_int_fscanf_multiply_12.c":111:13)
#loc162 = loc("CWE190_Integer_Overflow__unsigned_int_fscanf_multiply_12.c":107:17)
#loc163 = loc("CWE190_Integer_Overflow__unsigned_int_fscanf_multiply_12.c":107:46)
#loc164 = loc("CWE190_Integer_Overflow__unsigned_int_fscanf_multiply_12.c":107:39)
#loc165 = loc("CWE190_Integer_Overflow__unsigned_int_fscanf_multiply_12.c":108:35)
#loc166 = loc("CWE190_Integer_Overflow__unsigned_int_fscanf_multiply_12.c":108:17)
#loc167 = loc("CWE190_Integer_Overflow__unsigned_int_fscanf_multiply_12.c":112:27)
#loc168 = loc("CWE190_Integer_Overflow__unsigned_int_fscanf_multiply_12.c":112:17)
#loc169 = loc("CWE190_Integer_Overflow__unsigned_int_fscanf_multiply_12.c":121:1)
#loc170 = loc("CWE190_Integer_Overflow__unsigned_int_fscanf_multiply_12.c":153:1)
#loc171 = loc("CWE190_Integer_Overflow__unsigned_int_fscanf_multiply_12.c":123:5)
#loc172 = loc("CWE190_Integer_Overflow__unsigned_int_fscanf_multiply_12.c":123:18)
#loc173 = loc("CWE190_Integer_Overflow__unsigned_int_fscanf_multiply_12.c":124:12)
#loc174 = loc("CWE190_Integer_Overflow__unsigned_int_fscanf_multiply_12.c":124:5)
#loc175 = loc("CWE190_Integer_Overflow__unsigned_int_fscanf_multiply_12.c":125:5)
#loc176 = loc("CWE190_Integer_Overflow__unsigned_int_fscanf_multiply_12.c":134:5)
#loc177 = loc("CWE190_Integer_Overflow__unsigned_int_fscanf_multiply_12.c":125:8)
#loc178 = loc("CWE190_Integer_Overflow__unsigned_int_fscanf_multiply_12.c":125:33)
#loc179 = loc("CWE190_Integer_Overflow__unsigned_int_fscanf_multiply_12.c":126:5)
#loc180 = loc("CWE190_Integer_Overflow__unsigned_int_fscanf_multiply_12.c":129:5)
#loc181 = loc("CWE190_Integer_Overflow__unsigned_int_fscanf_multiply_12.c":131:5)
#loc182 = loc("CWE190_Integer_Overflow__unsigned_int_fscanf_multiply_12.c":128:16)
#loc183 = loc("CWE190_Integer_Overflow__unsigned_int_fscanf_multiply_12.c":128:9)
#loc184 = loc("CWE190_Integer_Overflow__unsigned_int_fscanf_multiply_12.c":133:16)
#loc185 = loc("CWE190_Integer_Overflow__unsigned_int_fscanf_multiply_12.c":133:9)
#loc186 = loc("CWE190_Integer_Overflow__unsigned_int_fscanf_multiply_12.c":135:5)
#loc187 = loc("CWE190_Integer_Overflow__unsigned_int_fscanf_multiply_12.c":152:5)
#loc188 = loc("CWE190_Integer_Overflow__unsigned_int_fscanf_multiply_12.c":135:8)
#loc189 = loc("CWE190_Integer_Overflow__unsigned_int_fscanf_multiply_12.c":135:33)
#loc190 = loc("CWE190_Integer_Overflow__unsigned_int_fscanf_multiply_12.c":136:5)
#loc191 = loc("CWE190_Integer_Overflow__unsigned_int_fscanf_multiply_12.c":143:5)
#loc192 = loc("CWE190_Integer_Overflow__unsigned_int_fscanf_multiply_12.c":145:5)
#loc193 = loc("CWE190_Integer_Overflow__unsigned_int_fscanf_multiply_12.c":137:9)
#loc194 = loc("CWE190_Integer_Overflow__unsigned_int_fscanf_multiply_12.c":142:9)
#loc195 = loc("CWE190_Integer_Overflow__unsigned_int_fscanf_multiply_12.c":137:12)
#loc196 = loc("CWE190_Integer_Overflow__unsigned_int_fscanf_multiply_12.c":137:19)
#loc197 = loc("CWE190_Integer_Overflow__unsigned_int_fscanf_multiply_12.c":138:9)
#loc198 = loc("CWE190_Integer_Overflow__unsigned_int_fscanf_multiply_12.c":140:13)
#loc199 = loc("CWE190_Integer_Overflow__unsigned_int_fscanf_multiply_12.c":140:42)
#loc200 = loc("CWE190_Integer_Overflow__unsigned_int_fscanf_multiply_12.c":140:35)
#loc201 = loc("CWE190_Integer_Overflow__unsigned_int_fscanf_multiply_12.c":141:31)
#loc202 = loc("CWE190_Integer_Overflow__unsigned_int_fscanf_multiply_12.c":141:13)
#loc203 = loc("CWE190_Integer_Overflow__unsigned_int_fscanf_multiply_12.c":146:9)
#loc204 = loc("CWE190_Integer_Overflow__unsigned_int_fscanf_multiply_12.c":151:9)
#loc205 = loc("CWE190_Integer_Overflow__unsigned_int_fscanf_multiply_12.c":146:12)
#loc206 = loc("CWE190_Integer_Overflow__unsigned_int_fscanf_multiply_12.c":146:19)
#loc207 = loc("CWE190_Integer_Overflow__unsigned_int_fscanf_multiply_12.c":147:9)
#loc208 = loc("CWE190_Integer_Overflow__unsigned_int_fscanf_multiply_12.c":149:13)
#loc209 = loc("CWE190_Integer_Overflow__unsigned_int_fscanf_multiply_12.c":149:42)
#loc210 = loc("CWE190_Integer_Overflow__unsigned_int_fscanf_multiply_12.c":149:35)
#loc211 = loc("CWE190_Integer_Overflow__unsigned_int_fscanf_multiply_12.c":150:31)
#loc212 = loc("CWE190_Integer_Overflow__unsigned_int_fscanf_multiply_12.c":150:13)
#loc213 = loc(fused[#loc1, #loc2])
#loc214 = loc(fused[#loc3, #loc4])
#loc215 = loc(fused[#loc5, #loc6])
#loc216 = loc(fused[#loc8, #loc9])
#loc217 = loc(fused[#loc10, #loc11])
#loc218 = loc(fused[#loc13, #loc14])
#loc219 = loc(fused[#loc15, #loc16])
#loc220 = loc(fused[#loc18, #loc17])
#loc221 = loc(fused[#loc19, #loc20])
#loc222 = loc(fused[#loc21, #loc22])
#loc223 = loc(fused[#loc23, #loc24, #loc25, #loc20])
#loc224 = loc(fused[#loc29, #loc28])
#loc225 = loc(fused[#loc30, #loc31])
#loc226 = loc(fused[#loc32, #loc33])
#loc227 = loc(fused[#loc34, #loc35, #loc36, #loc31])
#loc228 = loc(fused[#loc37, #loc38])
#loc229 = loc(fused[#loc39, #loc40])
#loc230 = loc(fused[#loc41, #loc38])
#loc231 = loc(fused[#loc42, #loc43])
#loc232 = loc(fused[#loc44, #loc43])
#loc233 = loc(fused[#loc47, #loc48])
#loc234 = loc(fused[#loc49, #loc50])
#loc235 = loc(fused[#loc51, #loc48])
#loc236 = loc(fused[#loc52, #loc53])
#loc237 = loc(fused[#loc55, #loc56])
#loc238 = loc(fused[#loc54, #loc57])
#loc239 = loc(fused[#loc58, #loc59, #loc60, #loc53])
#loc240 = loc(fused[#loc61, #loc62])
#loc241 = loc(fused[#loc63, #loc62])
#loc242 = loc(fused[#loc67, #loc68])
#loc243 = loc(fused[#loc69, #loc70])
#loc244 = loc(fused[#loc71, #loc72])
#loc245 = loc(fused[#loc73, #loc74])
#loc246 = loc(fused[#loc75, #loc76])
#loc247 = loc(fused[#loc81, #loc82])
#loc250 = loc(fused[#loc92, #loc93])
#loc251 = loc(fused[#loc96, #loc97])
#loc252 = loc(fused[#loc100, #loc99])
#loc253 = loc(fused[#loc101, #loc102])
#loc254 = loc(fused[#loc103, #loc104])
#loc255 = loc(fused[#loc106, #loc105])
#loc256 = loc(fused[#loc107, #loc108])
#loc257 = loc(fused[#loc109, #loc110])
#loc258 = loc(fused[#loc111, #loc112, #loc113, #loc108])
#loc259 = loc(fused[#loc120, #loc121])
#loc260 = loc(fused[#loc122, #loc123])
#loc261 = loc(fused[#loc124, #loc125, #loc126, #loc121])
#loc262 = loc(fused[#loc127, #loc128])
#loc263 = loc(fused[#loc129, #loc130])
#loc264 = loc(fused[#loc131, #loc128])
#loc265 = loc(fused[#loc132, #loc133])
#loc266 = loc(fused[#loc135, #loc136])
#loc267 = loc(fused[#loc134, #loc137])
#loc268 = loc(fused[#loc138, #loc139, #loc140, #loc133])
#loc269 = loc(fused[#loc141, #loc142])
#loc270 = loc(fused[#loc143, #loc142])
#loc271 = loc(fused[#loc148, #loc149])
#loc272 = loc(fused[#loc150, #loc151])
#loc273 = loc(fused[#loc152, #loc149])
#loc274 = loc(fused[#loc153, #loc154])
#loc275 = loc(fused[#loc156, #loc157])
#loc276 = loc(fused[#loc155, #loc158])
#loc277 = loc(fused[#loc159, #loc160, #loc161, #loc154])
#loc278 = loc(fused[#loc162, #loc163])
#loc279 = loc(fused[#loc164, #loc163])
#loc280 = loc(fused[#loc169, #loc170])
#loc281 = loc(fused[#loc171, #loc172])
#loc282 = loc(fused[#loc174, #loc173])
#loc283 = loc(fused[#loc175, #loc176])
#loc284 = loc(fused[#loc177, #loc178])
#loc285 = loc(fused[#loc179, #loc180, #loc181, #loc176])
#loc286 = loc(fused[#loc183, #loc182])
#loc287 = loc(fused[#loc185, #loc184])
#loc288 = loc(fused[#loc186, #loc187])
#loc289 = loc(fused[#loc188, #loc189])
#loc290 = loc(fused[#loc190, #loc191, #loc192, #loc187])
#loc291 = loc(fused[#loc193, #loc194])
#loc292 = loc(fused[#loc195, #loc196])
#loc293 = loc(fused[#loc197, #loc194])
#loc294 = loc(fused[#loc198, #loc199])
#loc295 = loc(fused[#loc200, #loc199])
#loc296 = loc(fused[#loc203, #loc204])
#loc297 = loc(fused[#loc205, #loc206])
#loc298 = loc(fused[#loc207, #loc204])
#loc299 = loc(fused[#loc208, #loc209])
#loc300 = loc(fused[#loc210, #loc209])
