!s32i = !cir.int<s, 32>
!s64i = !cir.int<s, 64>
!s8i = !cir.int<s, 8>
!ty__IO_codecvt = !cir.struct<struct "_IO_codecvt" incomplete>
!ty__IO_marker = !cir.struct<struct "_IO_marker" incomplete>
!ty__IO_wide_data = !cir.struct<struct "_IO_wide_data" incomplete>
!u16i = !cir.int<u, 16>
!u32i = !cir.int<u, 32>
!void = !cir.void
#fn_attr = #cir<extra({inline = #cir.inline<no>, optnone = #cir.optnone})>
#fn_attr1 = #cir<extra({nothrow = #cir.nothrow})>
#loc108 = loc("CWE190_Integer_Overflow__char_fscanf_multiply_33.cpp":110:10)
#loc109 = loc("CWE190_Integer_Overflow__char_fscanf_multiply_33.cpp":110:14)
#loc110 = loc("CWE190_Integer_Overflow__char_fscanf_multiply_33.cpp":110:20)
#loc111 = loc("CWE190_Integer_Overflow__char_fscanf_multiply_33.cpp":110:32)
#loc167 = loc(fused[#loc108, #loc109])
#loc168 = loc(fused[#loc110, #loc111])
!ty__IO_FILE = !cir.struct<struct "_IO_FILE" {!s32i, !cir.ptr<!s8i>, !cir.ptr<!s8i>, !cir.ptr<!s8i>, !cir.ptr<!s8i>, !cir.ptr<!s8i>, !cir.ptr<!s8i>, !cir.ptr<!s8i>, !cir.ptr<!s8i>, !cir.ptr<!s8i>, !cir.ptr<!s8i>, !cir.ptr<!s8i>, !cir.ptr<!ty__IO_marker>, !cir.ptr<!cir.struct<struct "_IO_FILE">>, !s32i, !s32i, !s64i, !u16i, !s8i, !cir.array<!s8i x 1>, !cir.ptr<!void>, !s64i, !cir.ptr<!ty__IO_codecvt>, !cir.ptr<!ty__IO_wide_data>, !cir.ptr<!cir.struct<struct "_IO_FILE">>, !cir.ptr<!void>, !cir.ptr<!cir.ptr<!cir.struct<struct "_IO_FILE">>>, !s32i, !cir.array<!s8i x 20>} #cir.record.decl.ast>
module @"/home/ladisgin/git_proj/juliet-c/testcases/CWE190_Integer_Overflow/s01/CWE190_Integer_Overflow__char_fscanf_multiply_33.cpp" attributes {cir.lang = #cir.lang<cxx>, cir.sob = #cir.signed_overflow_behavior<undefined>, cir.triple = "x86_64-unknown-linux-gnu", dlti.dl_spec = #dlti.dl_spec<i1 = dense<8> : vector<2xi64>, !llvm.ptr = dense<64> : vector<4xi64>, f80 = dense<128> : vector<2xi64>, i32 = dense<32> : vector<2xi64>, i16 = dense<16> : vector<2xi64>, i8 = dense<8> : vector<2xi64>, !llvm.ptr<271> = dense<32> : vector<4xi64>, !llvm.ptr<270> = dense<32> : vector<4xi64>, i128 = dense<128> : vector<2xi64>, f16 = dense<16> : vector<2xi64>, f64 = dense<64> : vector<2xi64>, i64 = dense<64> : vector<2xi64>, f128 = dense<128> : vector<2xi64>, !llvm.ptr<272> = dense<64> : vector<4xi64>, "dlti.stack_alignment" = 128 : i64, "dlti.endianness" = "little">} {
  cir.func private @__isoc23_fscanf(!cir.ptr<!ty__IO_FILE>, !cir.ptr<!s8i>, ...) -> !s32i loc(#loc124)
  cir.global "private" external @stdin : !cir.ptr<!ty__IO_FILE> {alignment = 8 : i64} loc(#loc125)
  cir.global "private" constant cir_private dsolocal @".str" = #cir.const_array<"%c\00" : !cir.array<!s8i x 3>> : !cir.array<!s8i x 3> {alignment = 1 : i64} loc(#loc5)
  cir.func private @printHexCharLine(!s8i) loc(#loc126)
  cir.func @_ZN48CWE190_Integer_Overflow__char_fscanf_multiply_333badEv() extra(#fn_attr) {
    %0 = cir.alloca !s8i, !cir.ptr<!s8i>, ["data"] {alignment = 1 : i64} loc(#loc128)
    %1 = cir.alloca !cir.ptr<!s8i>, !cir.ptr<!cir.ptr<!s8i>>, ["dataRef", init, const] {alignment = 8 : i64} loc(#loc129)
    cir.store %0, %1 : !cir.ptr<!s8i>, !cir.ptr<!cir.ptr<!s8i>> loc(#loc13)
    %2 = cir.const #cir.int<32> : !s8i loc(#loc14)
    cir.store %2, %0 : !s8i, !cir.ptr<!s8i> loc(#loc130)
    %3 = cir.get_global @__isoc23_fscanf : !cir.ptr<!cir.func<!s32i (!cir.ptr<!ty__IO_FILE>, !cir.ptr<!s8i>, ...)>> loc(#loc16)
    %4 = cir.get_global @stdin : !cir.ptr<!cir.ptr<!ty__IO_FILE>> loc(#loc125)
    %5 = cir.load %4 : !cir.ptr<!cir.ptr<!ty__IO_FILE>>, !cir.ptr<!ty__IO_FILE> loc(#loc17)
    %6 = cir.get_global @".str" : !cir.ptr<!cir.array<!s8i x 3>> loc(#loc5)
    %7 = cir.cast(array_to_ptrdecay, %6 : !cir.ptr<!cir.array<!s8i x 3>>), !cir.ptr<!s8i> loc(#loc5)
    %8 = cir.call @__isoc23_fscanf(%5, %7, %0) : (!cir.ptr<!ty__IO_FILE>, !cir.ptr<!s8i>, !cir.ptr<!s8i>) -> !s32i loc(#loc16)
    cir.scope {
      %9 = cir.alloca !s8i, !cir.ptr<!s8i>, ["data", init] {alignment = 1 : i64} loc(#loc132)
      %10 = cir.load %1 : !cir.ptr<!cir.ptr<!s8i>>, !cir.ptr<!s8i> loc(#loc21)
      %11 = cir.load %10 : !cir.ptr<!s8i>, !s8i loc(#loc21)
      cir.store %11, %9 : !s8i, !cir.ptr<!s8i> loc(#loc132)
      cir.scope {
        %12 = cir.load %9 : !cir.ptr<!s8i>, !s8i loc(#loc24)
        %13 = cir.cast(integral, %12 : !s8i), !s32i loc(#loc24)
        %14 = cir.const #cir.int<0> : !s32i loc(#loc25)
        %15 = cir.cmp(gt, %13, %14) : !s32i, !cir.bool loc(#loc134)
        cir.if %15 {
          %16 = cir.alloca !s8i, !cir.ptr<!s8i>, ["result", init] {alignment = 1 : i64} loc(#loc136)
          %17 = cir.load %9 : !cir.ptr<!s8i>, !s8i loc(#loc29)
          %18 = cir.cast(integral, %17 : !s8i), !s32i loc(#loc29)
          %19 = cir.const #cir.int<2> : !s32i loc(#loc28)
          %20 = cir.binop(mul, %18, %19) nsw : !s32i loc(#loc29)
          %21 = cir.cast(integral, %20 : !s32i), !s8i loc(#loc29)
          cir.store %21, %16 : !s8i, !cir.ptr<!s8i> loc(#loc136)
          %22 = cir.load %16 : !cir.ptr<!s8i>, !s8i loc(#loc30)
          cir.call @printHexCharLine(%22) : (!s8i) -> () loc(#loc31)
        } loc(#loc135)
      } loc(#loc133)
    } loc(#loc131)
    cir.return loc(#loc9)
  } loc(#loc127)
  cir.func internal private @_ZN48CWE190_Integer_Overflow__char_fscanf_multiply_33L7goodG2BEv() extra(#fn_attr) {
    %0 = cir.alloca !s8i, !cir.ptr<!s8i>, ["data"] {alignment = 1 : i64} loc(#loc138)
    %1 = cir.alloca !cir.ptr<!s8i>, !cir.ptr<!cir.ptr<!s8i>>, ["dataRef", init, const] {alignment = 8 : i64} loc(#loc139)
    cir.store %0, %1 : !cir.ptr<!s8i>, !cir.ptr<!cir.ptr<!s8i>> loc(#loc37)
    %2 = cir.const #cir.int<32> : !s8i loc(#loc38)
    cir.store %2, %0 : !s8i, !cir.ptr<!s8i> loc(#loc140)
    %3 = cir.const #cir.int<2> : !s32i loc(#loc40)
    %4 = cir.cast(integral, %3 : !s32i), !s8i loc(#loc40)
    cir.store %4, %0 : !s8i, !cir.ptr<!s8i> loc(#loc141)
    cir.scope {
      %5 = cir.alloca !s8i, !cir.ptr<!s8i>, ["data", init] {alignment = 1 : i64} loc(#loc143)
      %6 = cir.load %1 : !cir.ptr<!cir.ptr<!s8i>>, !cir.ptr<!s8i> loc(#loc45)
      %7 = cir.load %6 : !cir.ptr<!s8i>, !s8i loc(#loc45)
      cir.store %7, %5 : !s8i, !cir.ptr<!s8i> loc(#loc143)
      cir.scope {
        %8 = cir.load %5 : !cir.ptr<!s8i>, !s8i loc(#loc48)
        %9 = cir.cast(integral, %8 : !s8i), !s32i loc(#loc48)
        %10 = cir.const #cir.int<0> : !s32i loc(#loc49)
        %11 = cir.cmp(gt, %9, %10) : !s32i, !cir.bool loc(#loc145)
        cir.if %11 {
          %12 = cir.alloca !s8i, !cir.ptr<!s8i>, ["result", init] {alignment = 1 : i64} loc(#loc147)
          %13 = cir.load %5 : !cir.ptr<!s8i>, !s8i loc(#loc53)
          %14 = cir.cast(integral, %13 : !s8i), !s32i loc(#loc53)
          %15 = cir.const #cir.int<2> : !s32i loc(#loc52)
          %16 = cir.binop(mul, %14, %15) nsw : !s32i loc(#loc53)
          %17 = cir.cast(integral, %16 : !s32i), !s8i loc(#loc53)
          cir.store %17, %12 : !s8i, !cir.ptr<!s8i> loc(#loc147)
          %18 = cir.load %12 : !cir.ptr<!s8i>, !s8i loc(#loc54)
          cir.call @printHexCharLine(%18) : (!s8i) -> () loc(#loc55)
        } loc(#loc146)
      } loc(#loc144)
    } loc(#loc142)
    cir.return loc(#loc33)
  } loc(#loc137)
  cir.global "private" constant cir_private dsolocal @".str.5" = #cir.const_array<"data value is too large to perform arithmetic safely.\00" : !cir.array<!s8i x 54>> : !cir.array<!s8i x 54> {alignment = 1 : i64} loc(#loc56)
  cir.func internal private @_ZN48CWE190_Integer_Overflow__char_fscanf_multiply_33L7goodB2GEv() extra(#fn_attr) {
    %0 = cir.alloca !s8i, !cir.ptr<!s8i>, ["data"] {alignment = 1 : i64} loc(#loc149)
    %1 = cir.alloca !cir.ptr<!s8i>, !cir.ptr<!cir.ptr<!s8i>>, ["dataRef", init, const] {alignment = 8 : i64} loc(#loc150)
    cir.store %0, %1 : !cir.ptr<!s8i>, !cir.ptr<!cir.ptr<!s8i>> loc(#loc62)
    %2 = cir.const #cir.int<32> : !s8i loc(#loc63)
    cir.store %2, %0 : !s8i, !cir.ptr<!s8i> loc(#loc151)
    %3 = cir.get_global @__isoc23_fscanf : !cir.ptr<!cir.func<!s32i (!cir.ptr<!ty__IO_FILE>, !cir.ptr<!s8i>, ...)>> loc(#loc65)
    %4 = cir.get_global @stdin : !cir.ptr<!cir.ptr<!ty__IO_FILE>> loc(#loc125)
    %5 = cir.load %4 : !cir.ptr<!cir.ptr<!ty__IO_FILE>>, !cir.ptr<!ty__IO_FILE> loc(#loc66)
    %6 = cir.get_global @".str" : !cir.ptr<!cir.array<!s8i x 3>> loc(#loc67)
    %7 = cir.cast(array_to_ptrdecay, %6 : !cir.ptr<!cir.array<!s8i x 3>>), !cir.ptr<!s8i> loc(#loc67)
    %8 = cir.call @__isoc23_fscanf(%5, %7, %0) : (!cir.ptr<!ty__IO_FILE>, !cir.ptr<!s8i>, !cir.ptr<!s8i>) -> !s32i loc(#loc65)
    cir.scope {
      %9 = cir.alloca !s8i, !cir.ptr<!s8i>, ["data", init] {alignment = 1 : i64} loc(#loc153)
      %10 = cir.load %1 : !cir.ptr<!cir.ptr<!s8i>>, !cir.ptr<!s8i> loc(#loc71)
      %11 = cir.load %10 : !cir.ptr<!s8i>, !s8i loc(#loc71)
      cir.store %11, %9 : !s8i, !cir.ptr<!s8i> loc(#loc153)
      cir.scope {
        %12 = cir.load %9 : !cir.ptr<!s8i>, !s8i loc(#loc74)
        %13 = cir.cast(integral, %12 : !s8i), !s32i loc(#loc74)
        %14 = cir.const #cir.int<0> : !s32i loc(#loc75)
        %15 = cir.cmp(gt, %13, %14) : !s32i, !cir.bool loc(#loc155)
        cir.if %15 {
          cir.scope {
            %16 = cir.load %9 : !cir.ptr<!s8i>, !s8i loc(#loc79)
            %17 = cir.cast(integral, %16 : !s8i), !s32i loc(#loc79)
            %18 = cir.const #cir.int<127> : !s32i loc(#loc80)
            %19 = cir.const #cir.int<2> : !s32i loc(#loc81)
            %20 = cir.binop(div, %18, %19) : !s32i loc(#loc158)
            %21 = cir.cmp(lt, %17, %20) : !s32i, !cir.bool loc(#loc159)
            cir.if %21 {
              %22 = cir.alloca !s8i, !cir.ptr<!s8i>, ["result", init] {alignment = 1 : i64} loc(#loc161)
              %23 = cir.load %9 : !cir.ptr<!s8i>, !s8i loc(#loc88)
              %24 = cir.cast(integral, %23 : !s8i), !s32i loc(#loc88)
              %25 = cir.const #cir.int<2> : !s32i loc(#loc87)
              %26 = cir.binop(mul, %24, %25) nsw : !s32i loc(#loc88)
              %27 = cir.cast(integral, %26 : !s32i), !s8i loc(#loc88)
              cir.store %27, %22 : !s8i, !cir.ptr<!s8i> loc(#loc161)
              %28 = cir.load %22 : !cir.ptr<!s8i>, !s8i loc(#loc89)
              cir.call @printHexCharLine(%28) : (!s8i) -> () loc(#loc90)
            } else {
              %22 = cir.get_global @".str.5" : !cir.ptr<!cir.array<!s8i x 54>> loc(#loc56)
              %23 = cir.cast(array_to_ptrdecay, %22 : !cir.ptr<!cir.array<!s8i x 54>>), !cir.ptr<!s8i> loc(#loc56)
              cir.call @printLine(%23) : (!cir.ptr<!s8i>) -> () loc(#loc91)
            } loc(#loc160)
          } loc(#loc157)
        } loc(#loc156)
      } loc(#loc154)
    } loc(#loc152)
    cir.return loc(#loc58)
  } loc(#loc148)
  cir.func @_ZN48CWE190_Integer_Overflow__char_fscanf_multiply_334goodEv() extra(#fn_attr) {
    cir.call @_ZN48CWE190_Integer_Overflow__char_fscanf_multiply_33L7goodG2BEv() : () -> () loc(#loc94)
    cir.call @_ZN48CWE190_Integer_Overflow__char_fscanf_multiply_33L7goodB2GEv() : () -> () loc(#loc95)
    cir.return loc(#loc93)
  } loc(#loc162)
  cir.func private @srand(!u32i) extra(#fn_attr1) loc(#loc163)
  cir.func private @time(!cir.ptr<!s64i>) -> !s64i extra(#fn_attr1) loc(#loc164)
  cir.func private @printLine(!cir.ptr<!s8i>) loc(#loc165)
  cir.global "private" constant cir_private dsolocal @".str.1" = #cir.const_array<"Calling good()...\00" : !cir.array<!s8i x 18>> : !cir.array<!s8i x 18> {alignment = 1 : i64} loc(#loc102)
  cir.global "private" constant cir_private dsolocal @".str.2" = #cir.const_array<"Finished good()\00" : !cir.array<!s8i x 16>> : !cir.array<!s8i x 16> {alignment = 1 : i64} loc(#loc103)
  cir.global "private" constant cir_private dsolocal @".str.3" = #cir.const_array<"Calling bad()...\00" : !cir.array<!s8i x 17>> : !cir.array<!s8i x 17> {alignment = 1 : i64} loc(#loc104)
  cir.global "private" constant cir_private dsolocal @".str.4" = #cir.const_array<"Finished bad()\00" : !cir.array<!s8i x 15>> : !cir.array<!s8i x 15> {alignment = 1 : i64} loc(#loc105)
  cir.func @main(%arg0: !s32i loc(fused[#loc108, #loc109]), %arg1: !cir.ptr<!cir.ptr<!s8i>> loc(fused[#loc110, #loc111])) -> !s32i extra(#fn_attr) {
    %0 = cir.alloca !s32i, !cir.ptr<!s32i>, ["argc", init] {alignment = 4 : i64} loc(#loc167)
    %1 = cir.alloca !cir.ptr<!cir.ptr<!s8i>>, !cir.ptr<!cir.ptr<!cir.ptr<!s8i>>>, ["argv", init] {alignment = 8 : i64} loc(#loc168)
    %2 = cir.alloca !s32i, !cir.ptr<!s32i>, ["__retval"] {alignment = 4 : i64} loc(#loc107)
    cir.store %arg0, %0 : !s32i, !cir.ptr<!s32i> loc(#loc112)
    cir.store %arg1, %1 : !cir.ptr<!cir.ptr<!s8i>>, !cir.ptr<!cir.ptr<!cir.ptr<!s8i>>> loc(#loc112)
    %3 = cir.const #cir.ptr<null> : !cir.ptr<!s64i> loc(#loc113)
    %4 = cir.call @time(%3) : (!cir.ptr<!s64i>) -> !s64i extra(#fn_attr1) loc(#loc114)
    %5 = cir.cast(integral, %4 : !s64i), !u32i loc(#loc114)
    cir.call @srand(%5) : (!u32i) -> () extra(#fn_attr1) loc(#loc115)
    %6 = cir.get_global @".str.1" : !cir.ptr<!cir.array<!s8i x 18>> loc(#loc102)
    %7 = cir.cast(array_to_ptrdecay, %6 : !cir.ptr<!cir.array<!s8i x 18>>), !cir.ptr<!s8i> loc(#loc102)
    cir.call @printLine(%7) : (!cir.ptr<!s8i>) -> () loc(#loc116)
    cir.call @_ZN48CWE190_Integer_Overflow__char_fscanf_multiply_334goodEv() : () -> () loc(#loc117)
    %8 = cir.get_global @".str.2" : !cir.ptr<!cir.array<!s8i x 16>> loc(#loc103)
    %9 = cir.cast(array_to_ptrdecay, %8 : !cir.ptr<!cir.array<!s8i x 16>>), !cir.ptr<!s8i> loc(#loc103)
    cir.call @printLine(%9) : (!cir.ptr<!s8i>) -> () loc(#loc118)
    %10 = cir.get_global @".str.3" : !cir.ptr<!cir.array<!s8i x 17>> loc(#loc104)
    %11 = cir.cast(array_to_ptrdecay, %10 : !cir.ptr<!cir.array<!s8i x 17>>), !cir.ptr<!s8i> loc(#loc104)
    cir.call @printLine(%11) : (!cir.ptr<!s8i>) -> () loc(#loc119)
    cir.call @_ZN48CWE190_Integer_Overflow__char_fscanf_multiply_333badEv() : () -> () loc(#loc120)
    %12 = cir.get_global @".str.4" : !cir.ptr<!cir.array<!s8i x 15>> loc(#loc105)
    %13 = cir.cast(array_to_ptrdecay, %12 : !cir.ptr<!cir.array<!s8i x 15>>), !cir.ptr<!s8i> loc(#loc105)
    cir.call @printLine(%13) : (!cir.ptr<!s8i>) -> () loc(#loc121)
    %14 = cir.const #cir.int<0> : !s32i loc(#loc122)
    cir.store %14, %2 : !s32i, !cir.ptr<!s32i> loc(#loc169)
    %15 = cir.load %2 : !cir.ptr<!s32i>, !s32i loc(#loc169)
    cir.return %15 : !s32i loc(#loc169)
  } loc(#loc166)
} loc(#loc)
#loc = loc("/home/ladisgin/git_proj/juliet-c/testcases/CWE190_Integer_Overflow/s01/CWE190_Integer_Overflow__char_fscanf_multiply_33.cpp":0:0)
#loc1 = loc("/usr/include/stdio.h":442:1)
#loc2 = loc("/usr/include/stdio.h":444:33)
#loc3 = loc("/usr/include/stdio.h":149:1)
#loc4 = loc("/usr/include/stdio.h":149:14)
#loc5 = loc("CWE190_Integer_Overflow__char_fscanf_multiply_33.cpp":31:20)
#loc6 = loc("../../../testcasesupport/std_testcase_io.h":30:1)
#loc7 = loc("../../../testcasesupport/std_testcase_io.h":30:35)
#loc8 = loc("CWE190_Integer_Overflow__char_fscanf_multiply_33.cpp":25:1)
#loc9 = loc("CWE190_Integer_Overflow__char_fscanf_multiply_33.cpp":41:1)
#loc10 = loc("CWE190_Integer_Overflow__char_fscanf_multiply_33.cpp":27:5)
#loc11 = loc("CWE190_Integer_Overflow__char_fscanf_multiply_33.cpp":27:10)
#loc12 = loc("CWE190_Integer_Overflow__char_fscanf_multiply_33.cpp":28:5)
#loc13 = loc("CWE190_Integer_Overflow__char_fscanf_multiply_33.cpp":28:21)
#loc14 = loc("CWE190_Integer_Overflow__char_fscanf_multiply_33.cpp":29:12)
#loc15 = loc("CWE190_Integer_Overflow__char_fscanf_multiply_33.cpp":29:5)
#loc16 = loc("CWE190_Integer_Overflow__char_fscanf_multiply_33.cpp":31:5)
#loc17 = loc("CWE190_Integer_Overflow__char_fscanf_multiply_33.cpp":31:13)
#loc18 = loc("CWE190_Integer_Overflow__char_fscanf_multiply_33.cpp":32:5)
#loc19 = loc("CWE190_Integer_Overflow__char_fscanf_multiply_33.cpp":40:5)
#loc20 = loc("CWE190_Integer_Overflow__char_fscanf_multiply_33.cpp":33:9)
#loc21 = loc("CWE190_Integer_Overflow__char_fscanf_multiply_33.cpp":33:21)
#loc22 = loc("CWE190_Integer_Overflow__char_fscanf_multiply_33.cpp":34:9)
#loc23 = loc("CWE190_Integer_Overflow__char_fscanf_multiply_33.cpp":39:9)
#loc24 = loc("CWE190_Integer_Overflow__char_fscanf_multiply_33.cpp":34:12)
#loc25 = loc("CWE190_Integer_Overflow__char_fscanf_multiply_33.cpp":34:19)
#loc26 = loc("CWE190_Integer_Overflow__char_fscanf_multiply_33.cpp":35:9)
#loc27 = loc("CWE190_Integer_Overflow__char_fscanf_multiply_33.cpp":37:13)
#loc28 = loc("CWE190_Integer_Overflow__char_fscanf_multiply_33.cpp":37:34)
#loc29 = loc("CWE190_Integer_Overflow__char_fscanf_multiply_33.cpp":37:27)
#loc30 = loc("CWE190_Integer_Overflow__char_fscanf_multiply_33.cpp":38:30)
#loc31 = loc("CWE190_Integer_Overflow__char_fscanf_multiply_33.cpp":38:13)
#loc32 = loc("CWE190_Integer_Overflow__char_fscanf_multiply_33.cpp":48:1)
#loc33 = loc("CWE190_Integer_Overflow__char_fscanf_multiply_33.cpp":64:1)
#loc34 = loc("CWE190_Integer_Overflow__char_fscanf_multiply_33.cpp":50:5)
#loc35 = loc("CWE190_Integer_Overflow__char_fscanf_multiply_33.cpp":50:10)
#loc36 = loc("CWE190_Integer_Overflow__char_fscanf_multiply_33.cpp":51:5)
#loc37 = loc("CWE190_Integer_Overflow__char_fscanf_multiply_33.cpp":51:21)
#loc38 = loc("CWE190_Integer_Overflow__char_fscanf_multiply_33.cpp":52:12)
#loc39 = loc("CWE190_Integer_Overflow__char_fscanf_multiply_33.cpp":52:5)
#loc40 = loc("CWE190_Integer_Overflow__char_fscanf_multiply_33.cpp":54:12)
#loc41 = loc("CWE190_Integer_Overflow__char_fscanf_multiply_33.cpp":54:5)
#loc42 = loc("CWE190_Integer_Overflow__char_fscanf_multiply_33.cpp":55:5)
#loc43 = loc("CWE190_Integer_Overflow__char_fscanf_multiply_33.cpp":63:5)
#loc44 = loc("CWE190_Integer_Overflow__char_fscanf_multiply_33.cpp":56:9)
#loc45 = loc("CWE190_Integer_Overflow__char_fscanf_multiply_33.cpp":56:21)
#loc46 = loc("CWE190_Integer_Overflow__char_fscanf_multiply_33.cpp":57:9)
#loc47 = loc("CWE190_Integer_Overflow__char_fscanf_multiply_33.cpp":62:9)
#loc48 = loc("CWE190_Integer_Overflow__char_fscanf_multiply_33.cpp":57:12)
#loc49 = loc("CWE190_Integer_Overflow__char_fscanf_multiply_33.cpp":57:19)
#loc50 = loc("CWE190_Integer_Overflow__char_fscanf_multiply_33.cpp":58:9)
#loc51 = loc("CWE190_Integer_Overflow__char_fscanf_multiply_33.cpp":60:13)
#loc52 = loc("CWE190_Integer_Overflow__char_fscanf_multiply_33.cpp":60:34)
#loc53 = loc("CWE190_Integer_Overflow__char_fscanf_multiply_33.cpp":60:27)
#loc54 = loc("CWE190_Integer_Overflow__char_fscanf_multiply_33.cpp":61:30)
#loc55 = loc("CWE190_Integer_Overflow__char_fscanf_multiply_33.cpp":61:13)
#loc56 = loc("CWE190_Integer_Overflow__char_fscanf_multiply_33.cpp":86:27)
#loc57 = loc("CWE190_Integer_Overflow__char_fscanf_multiply_33.cpp":67:1)
#loc58 = loc("CWE190_Integer_Overflow__char_fscanf_multiply_33.cpp":90:1)
#loc59 = loc("CWE190_Integer_Overflow__char_fscanf_multiply_33.cpp":69:5)
#loc60 = loc("CWE190_Integer_Overflow__char_fscanf_multiply_33.cpp":69:10)
#loc61 = loc("CWE190_Integer_Overflow__char_fscanf_multiply_33.cpp":70:5)
#loc62 = loc("CWE190_Integer_Overflow__char_fscanf_multiply_33.cpp":70:21)
#loc63 = loc("CWE190_Integer_Overflow__char_fscanf_multiply_33.cpp":71:12)
#loc64 = loc("CWE190_Integer_Overflow__char_fscanf_multiply_33.cpp":71:5)
#loc65 = loc("CWE190_Integer_Overflow__char_fscanf_multiply_33.cpp":73:5)
#loc66 = loc("CWE190_Integer_Overflow__char_fscanf_multiply_33.cpp":73:13)
#loc67 = loc("CWE190_Integer_Overflow__char_fscanf_multiply_33.cpp":73:20)
#loc68 = loc("CWE190_Integer_Overflow__char_fscanf_multiply_33.cpp":74:5)
#loc69 = loc("CWE190_Integer_Overflow__char_fscanf_multiply_33.cpp":89:5)
#loc70 = loc("CWE190_Integer_Overflow__char_fscanf_multiply_33.cpp":75:9)
#loc71 = loc("CWE190_Integer_Overflow__char_fscanf_multiply_33.cpp":75:21)
#loc72 = loc("CWE190_Integer_Overflow__char_fscanf_multiply_33.cpp":76:9)
#loc73 = loc("CWE190_Integer_Overflow__char_fscanf_multiply_33.cpp":88:9)
#loc74 = loc("CWE190_Integer_Overflow__char_fscanf_multiply_33.cpp":76:12)
#loc75 = loc("CWE190_Integer_Overflow__char_fscanf_multiply_33.cpp":76:19)
#loc76 = loc("CWE190_Integer_Overflow__char_fscanf_multiply_33.cpp":77:9)
#loc77 = loc("CWE190_Integer_Overflow__char_fscanf_multiply_33.cpp":79:13)
#loc78 = loc("CWE190_Integer_Overflow__char_fscanf_multiply_33.cpp":87:13)
#loc79 = loc("CWE190_Integer_Overflow__char_fscanf_multiply_33.cpp":79:17)
#loc80 = loc("CWE190_Integer_Overflow__char_fscanf_multiply_33.cpp":79:25)
#loc81 = loc("CWE190_Integer_Overflow__char_fscanf_multiply_33.cpp":79:34)
#loc82 = loc("CWE190_Integer_Overflow__char_fscanf_multiply_33.cpp":79:35)
#loc83 = loc("CWE190_Integer_Overflow__char_fscanf_multiply_33.cpp":80:13)
#loc84 = loc("CWE190_Integer_Overflow__char_fscanf_multiply_33.cpp":83:13)
#loc85 = loc("CWE190_Integer_Overflow__char_fscanf_multiply_33.cpp":85:13)
#loc86 = loc("CWE190_Integer_Overflow__char_fscanf_multiply_33.cpp":81:17)
#loc87 = loc("CWE190_Integer_Overflow__char_fscanf_multiply_33.cpp":81:38)
#loc88 = loc("CWE190_Integer_Overflow__char_fscanf_multiply_33.cpp":81:31)
#loc89 = loc("CWE190_Integer_Overflow__char_fscanf_multiply_33.cpp":82:34)
#loc90 = loc("CWE190_Integer_Overflow__char_fscanf_multiply_33.cpp":82:17)
#loc91 = loc("CWE190_Integer_Overflow__char_fscanf_multiply_33.cpp":86:17)
#loc92 = loc("CWE190_Integer_Overflow__char_fscanf_multiply_33.cpp":92:1)
#loc93 = loc("CWE190_Integer_Overflow__char_fscanf_multiply_33.cpp":96:1)
#loc94 = loc("CWE190_Integer_Overflow__char_fscanf_multiply_33.cpp":94:5)
#loc95 = loc("CWE190_Integer_Overflow__char_fscanf_multiply_33.cpp":95:5)
#loc96 = loc("/usr/include/stdlib.h":575:1)
#loc97 = loc("/usr/include/stdlib.h":575:41)
#loc98 = loc("/usr/include/time.h":76:1)
#loc99 = loc("/usr/include/time.h":76:38)
#loc100 = loc("../../../testcasesupport/std_testcase_io.h":14:1)
#loc101 = loc("../../../testcasesupport/std_testcase_io.h":14:33)
#loc102 = loc("CWE190_Integer_Overflow__char_fscanf_multiply_33.cpp":115:15)
#loc103 = loc("CWE190_Integer_Overflow__char_fscanf_multiply_33.cpp":117:15)
#loc104 = loc("CWE190_Integer_Overflow__char_fscanf_multiply_33.cpp":120:15)
#loc105 = loc("CWE190_Integer_Overflow__char_fscanf_multiply_33.cpp":122:15)
#loc106 = loc("CWE190_Integer_Overflow__char_fscanf_multiply_33.cpp":110:1)
#loc107 = loc("CWE190_Integer_Overflow__char_fscanf_multiply_33.cpp":125:1)
#loc112 = loc("CWE190_Integer_Overflow__char_fscanf_multiply_33.cpp":111:1)
#loc113 = loc("CWE190_Integer_Overflow__char_fscanf_multiply_33.cpp":113:27)
#loc114 = loc("CWE190_Integer_Overflow__char_fscanf_multiply_33.cpp":113:22)
#loc115 = loc("CWE190_Integer_Overflow__char_fscanf_multiply_33.cpp":113:5)
#loc116 = loc("CWE190_Integer_Overflow__char_fscanf_multiply_33.cpp":115:5)
#loc117 = loc("CWE190_Integer_Overflow__char_fscanf_multiply_33.cpp":116:5)
#loc118 = loc("CWE190_Integer_Overflow__char_fscanf_multiply_33.cpp":117:5)
#loc119 = loc("CWE190_Integer_Overflow__char_fscanf_multiply_33.cpp":120:5)
#loc120 = loc("CWE190_Integer_Overflow__char_fscanf_multiply_33.cpp":121:5)
#loc121 = loc("CWE190_Integer_Overflow__char_fscanf_multiply_33.cpp":122:5)
#loc122 = loc("CWE190_Integer_Overflow__char_fscanf_multiply_33.cpp":124:12)
#loc123 = loc("CWE190_Integer_Overflow__char_fscanf_multiply_33.cpp":124:5)
#loc124 = loc(fused[#loc1, #loc2])
#loc125 = loc(fused[#loc3, #loc4])
#loc126 = loc(fused[#loc6, #loc7])
#loc127 = loc(fused[#loc8, #loc9])
#loc128 = loc(fused[#loc10, #loc11])
#loc129 = loc(fused[#loc12, #loc13])
#loc130 = loc(fused[#loc15, #loc14])
#loc131 = loc(fused[#loc18, #loc19])
#loc132 = loc(fused[#loc20, #loc21])
#loc133 = loc(fused[#loc22, #loc23])
#loc134 = loc(fused[#loc24, #loc25])
#loc135 = loc(fused[#loc26, #loc23])
#loc136 = loc(fused[#loc27, #loc28])
#loc137 = loc(fused[#loc32, #loc33])
#loc138 = loc(fused[#loc34, #loc35])
#loc139 = loc(fused[#loc36, #loc37])
#loc140 = loc(fused[#loc39, #loc38])
#loc141 = loc(fused[#loc41, #loc40])
#loc142 = loc(fused[#loc42, #loc43])
#loc143 = loc(fused[#loc44, #loc45])
#loc144 = loc(fused[#loc46, #loc47])
#loc145 = loc(fused[#loc48, #loc49])
#loc146 = loc(fused[#loc50, #loc47])
#loc147 = loc(fused[#loc51, #loc52])
#loc148 = loc(fused[#loc57, #loc58])
#loc149 = loc(fused[#loc59, #loc60])
#loc150 = loc(fused[#loc61, #loc62])
#loc151 = loc(fused[#loc64, #loc63])
#loc152 = loc(fused[#loc68, #loc69])
#loc153 = loc(fused[#loc70, #loc71])
#loc154 = loc(fused[#loc72, #loc73])
#loc155 = loc(fused[#loc74, #loc75])
#loc156 = loc(fused[#loc76, #loc73])
#loc157 = loc(fused[#loc77, #loc78])
#loc158 = loc(fused[#loc80, #loc81])
#loc159 = loc(fused[#loc79, #loc82])
#loc160 = loc(fused[#loc83, #loc84, #loc85, #loc78])
#loc161 = loc(fused[#loc86, #loc87])
#loc162 = loc(fused[#loc92, #loc93])
#loc163 = loc(fused[#loc96, #loc97])
#loc164 = loc(fused[#loc98, #loc99])
#loc165 = loc(fused[#loc100, #loc101])
#loc166 = loc(fused[#loc106, #loc107])
#loc169 = loc(fused[#loc123, #loc122])
