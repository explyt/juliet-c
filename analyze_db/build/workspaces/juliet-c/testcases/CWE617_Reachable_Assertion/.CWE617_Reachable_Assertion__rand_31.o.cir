!s32i = !cir.int<s, 32>
!s8i = !cir.int<s, 8>
!u32i = !cir.int<u, 32>
!u64i = !cir.int<u, 64>
#fn_attr = #cir<extra({nothrow = #cir.nothrow})>
#fn_attr1 = #cir<extra({inline = #cir.inline<no>, nothrow = #cir.nothrow, optnone = #cir.optnone, uwtable = #cir.uwtable<async>})>
#loc17 = loc("CWE617_Reachable_Assertion__rand_31.c":31:12)
module @"/workspaces/juliet-c/testcases/CWE617_Reachable_Assertion/CWE617_Reachable_Assertion__rand_31.c" attributes {cir.lang = #cir.lang<c>, cir.sob = #cir.signed_overflow_behavior<undefined>, cir.triple = "x86_64-unknown-linux-gnu", cir.type_size_info = #cir.type_size_info<char = 8, int = 32, size_t = 64>, cir.uwtable = #cir.uwtable<async>, dlti.dl_spec = #dlti.dl_spec<i16 = dense<16> : vector<2xi64>, i8 = dense<8> : vector<2xi64>, i32 = dense<32> : vector<2xi64>, f80 = dense<128> : vector<2xi64>, i1 = dense<8> : vector<2xi64>, !llvm.ptr<270> = dense<32> : vector<4xi64>, !llvm.ptr = dense<64> : vector<4xi64>, i64 = dense<64> : vector<2xi64>, i128 = dense<128> : vector<2xi64>, f128 = dense<128> : vector<2xi64>, f64 = dense<64> : vector<2xi64>, f16 = dense<16> : vector<2xi64>, !llvm.ptr<271> = dense<32> : vector<4xi64>, !llvm.ptr<272> = dense<64> : vector<4xi64>, "dlti.endianness" = "little", "dlti.mangling_mode" = "e", "dlti.stack_alignment" = 128 : i64>} {
  cir.func private @rand() -> !s32i extra(#fn_attr) loc(#loc42)
  cir.func private @__assert_fail(!cir.ptr<!s8i>, !cir.ptr<!s8i>, !u32i, !cir.ptr<!s8i>) extra(#fn_attr) loc(#loc43)
  cir.global "private" constant cir_private dsolocal @".str" = #cir.const_array<"data > ASSERT_VALUE\00" : !cir.array<!s8i x 20>> : !cir.array<!s8i x 20> {alignment = 1 : i64} loc(#loc5)
  cir.global "private" constant cir_private dsolocal @".str.1" = #cir.const_array<"CWE617_Reachable_Assertion__rand_31.c\00" : !cir.array<!s8i x 38>> : !cir.array<!s8i x 38> {alignment = 1 : i64} loc(#loc5)
  cir.global "private" constant cir_private dsolocal @".str.2" = #cir.const_array<"void CWE617_Reachable_Assertion__rand_31_bad()\00" : !cir.array<!s8i x 47>> : !cir.array<!s8i x 47> {alignment = 1 : i64} loc(#loc5)
  cir.func no_proto @CWE617_Reachable_Assertion__rand_31_bad() extra(#fn_attr1) {
    %0 = cir.alloca !s32i, !cir.ptr<!s32i>, ["dataCopy", init] {alignment = 4 : i64} loc(#loc45)
    %1 = cir.alloca !s32i, !cir.ptr<!s32i>, ["data", init] {alignment = 4 : i64} loc(#loc46)
    %2 = cir.alloca !s32i, !cir.ptr<!s32i>, ["data"] {alignment = 4 : i64} loc(#loc47)
    %3 = cir.const #cir.int<1> : !s32i loc(#loc14)
    %4 = cir.unary(minus, %3) nsw : !s32i, !s32i loc(#loc15)
    cir.store %4, %2 : !s32i, !cir.ptr<!s32i> loc(#loc48)
    %5 = cir.call @rand() : () -> !s32i extra(#fn_attr) loc(#loc17)
    %6 = cir.const #cir.int<1> : !s32i loc(#loc17)
    %7 = cir.binop(and, %5, %6) : !s32i loc(#loc17)
    %8 = cir.cast(int_to_bool, %7 : !s32i), !cir.bool loc(#loc17)
    cir.brcond %8 ^bb1, ^bb2 loc(#loc17)
  ^bb1:  // pred: ^bb0
    %9 = cir.call @rand() : () -> !s32i extra(#fn_attr) loc(#loc17)
    %10 = cir.cast(integral, %9 : !s32i), !u32i loc(#loc17)
    %11 = cir.const #cir.int<30> : !s32i loc(#loc17)
    %12 = cir.shift(left, %10 : !u32i, %11 : !s32i) -> !u32i loc(#loc17)
    %13 = cir.call @rand() : () -> !s32i extra(#fn_attr) loc(#loc17)
    %14 = cir.cast(integral, %13 : !s32i), !u32i loc(#loc17)
    %15 = cir.const #cir.int<15> : !s32i loc(#loc17)
    %16 = cir.shift(left, %14 : !u32i, %15 : !s32i) -> !u32i loc(#loc17)
    %17 = cir.binop(xor, %12, %16) : !u32i loc(#loc17)
    %18 = cir.call @rand() : () -> !s32i extra(#fn_attr) loc(#loc17)
    %19 = cir.cast(integral, %18 : !s32i), !u32i loc(#loc17)
    %20 = cir.binop(xor, %17, %19) : !u32i loc(#loc17)
    cir.br ^bb3(%20 : !u32i) loc(#loc17)
  ^bb2:  // pred: ^bb0
    %21 = cir.call @rand() : () -> !s32i extra(#fn_attr) loc(#loc17)
    %22 = cir.cast(integral, %21 : !s32i), !u32i loc(#loc17)
    %23 = cir.const #cir.int<30> : !s32i loc(#loc17)
    %24 = cir.shift(left, %22 : !u32i, %23 : !s32i) -> !u32i loc(#loc17)
    %25 = cir.call @rand() : () -> !s32i extra(#fn_attr) loc(#loc17)
    %26 = cir.cast(integral, %25 : !s32i), !u32i loc(#loc17)
    %27 = cir.const #cir.int<15> : !s32i loc(#loc17)
    %28 = cir.shift(left, %26 : !u32i, %27 : !s32i) -> !u32i loc(#loc17)
    %29 = cir.binop(xor, %24, %28) : !u32i loc(#loc17)
    %30 = cir.call @rand() : () -> !s32i extra(#fn_attr) loc(#loc17)
    %31 = cir.cast(integral, %30 : !s32i), !u32i loc(#loc17)
    %32 = cir.binop(xor, %29, %31) : !u32i loc(#loc17)
    %33 = cir.unary(minus, %32) : !u32i, !u32i loc(#loc17)
    %34 = cir.const #cir.int<1> : !s32i loc(#loc17)
    %35 = cir.cast(integral, %34 : !s32i), !u32i loc(#loc17)
    %36 = cir.binop(sub, %33, %35) : !u32i loc(#loc17)
    cir.br ^bb3(%36 : !u32i) loc(#loc17)
  ^bb3(%37: !u32i loc("CWE617_Reachable_Assertion__rand_31.c":31:12)):  // 2 preds: ^bb1, ^bb2
    cir.br ^bb4 loc(#loc17)
  ^bb4:  // pred: ^bb3
    %38 = cir.cast(integral, %37 : !u32i), !s32i loc(#loc17)
    cir.store %38, %2 : !s32i, !cir.ptr<!s32i> loc(#loc49)
    cir.br ^bb5 loc(#loc50)
  ^bb5:  // pred: ^bb4
    %39 = cir.load %2 : !cir.ptr<!s32i>, !s32i loc(#loc9)
    cir.store %39, %0 : !s32i, !cir.ptr<!s32i> loc(#loc45)
    %40 = cir.load %0 : !cir.ptr<!s32i>, !s32i loc(#loc11)
    cir.store %40, %1 : !s32i, !cir.ptr<!s32i> loc(#loc46)
    %41 = cir.const #cir.int<4> : !u64i loc(#loc5)
    cir.br ^bb6 loc(#loc5)
  ^bb6:  // pred: ^bb5
    cir.br ^bb7 loc(#loc5)
  ^bb7:  // pred: ^bb6
    %42 = cir.load %1 : !cir.ptr<!s32i>, !s32i loc(#loc5)
    %43 = cir.const #cir.int<5> : !s32i loc(#loc5)
    %44 = cir.cmp(gt, %42, %43) : !s32i, !cir.bool loc(#loc5)
    cir.brcond %44 ^bb8, ^bb9 loc(#loc5)
  ^bb8:  // pred: ^bb7
    cir.br ^bb10 loc(#loc5)
  ^bb9:  // pred: ^bb7
    %45 = cir.get_global @".str" : !cir.ptr<!cir.array<!s8i x 20>> loc(#loc5)
    %46 = cir.cast(array_to_ptrdecay, %45 : !cir.ptr<!cir.array<!s8i x 20>>), !cir.ptr<!s8i> loc(#loc5)
    %47 = cir.get_global @".str.1" : !cir.ptr<!cir.array<!s8i x 38>> loc(#loc5)
    %48 = cir.cast(array_to_ptrdecay, %47 : !cir.ptr<!cir.array<!s8i x 38>>), !cir.ptr<!s8i> loc(#loc5)
    %49 = cir.const #cir.int<36> : !s32i loc(#loc5)
    %50 = cir.cast(integral, %49 : !s32i), !u32i loc(#loc5)
    %51 = cir.get_global @".str.2" : !cir.ptr<!cir.array<!s8i x 47>> loc(#loc5)
    %52 = cir.cast(array_to_ptrdecay, %51 : !cir.ptr<!cir.array<!s8i x 47>>), !cir.ptr<!s8i> loc(#loc5)
    cir.call @__assert_fail(%46, %48, %50, %52) : (!cir.ptr<!s8i>, !cir.ptr<!s8i>, !u32i, !cir.ptr<!s8i>) -> () extra(#fn_attr) loc(#loc5)
    cir.br ^bb10 loc(#loc5)
  ^bb10:  // 2 preds: ^bb8, ^bb9
    cir.br ^bb11 loc(#loc5)
  ^bb11:  // pred: ^bb10
    cir.br ^bb12 loc(#loc5)
  ^bb12:  // pred: ^bb11
    cir.br ^bb13 loc(#loc20)
  ^bb13:  // pred: ^bb12
    cir.return loc(#loc7)
  } loc(#loc44)
  cir.func no_proto @CWE617_Reachable_Assertion__rand_31_good() extra(#fn_attr1) {
    %0 = cir.get_global @goodG2B : !cir.ptr<!cir.func<()>> loc(#loc52)
    cir.call %0() : (!cir.ptr<!cir.func<()>>) -> () loc(#loc23)
    cir.return loc(#loc22)
  } loc(#loc51)
  cir.global "private" constant cir_private dsolocal @".str.3" = #cir.const_array<"void goodG2B()\00" : !cir.array<!s8i x 15>> : !cir.array<!s8i x 15> {alignment = 1 : i64} loc(#loc25)
  cir.func no_proto internal private @goodG2B() extra(#fn_attr1) {
    %0 = cir.alloca !s32i, !cir.ptr<!s32i>, ["dataCopy", init] {alignment = 4 : i64} loc(#loc54)
    %1 = cir.alloca !s32i, !cir.ptr<!s32i>, ["data", init] {alignment = 4 : i64} loc(#loc55)
    %2 = cir.alloca !s32i, !cir.ptr<!s32i>, ["data"] {alignment = 4 : i64} loc(#loc56)
    %3 = cir.const #cir.int<1> : !s32i loc(#loc34)
    %4 = cir.unary(minus, %3) nsw : !s32i, !s32i loc(#loc35)
    cir.store %4, %2 : !s32i, !cir.ptr<!s32i> loc(#loc57)
    %5 = cir.const #cir.int<5> : !s32i loc(#loc37)
    %6 = cir.const #cir.int<1> : !s32i loc(#loc38)
    %7 = cir.binop(add, %5, %6) nsw : !s32i loc(#loc37)
    cir.store %7, %2 : !s32i, !cir.ptr<!s32i> loc(#loc58)
    cir.br ^bb1 loc(#loc59)
  ^bb1:  // pred: ^bb0
    %8 = cir.load %2 : !cir.ptr<!s32i>, !s32i loc(#loc29)
    cir.store %8, %0 : !s32i, !cir.ptr<!s32i> loc(#loc54)
    %9 = cir.load %0 : !cir.ptr<!s32i>, !s32i loc(#loc31)
    cir.store %9, %1 : !s32i, !cir.ptr<!s32i> loc(#loc55)
    %10 = cir.const #cir.int<4> : !u64i loc(#loc25)
    cir.br ^bb2 loc(#loc25)
  ^bb2:  // pred: ^bb1
    cir.br ^bb3 loc(#loc25)
  ^bb3:  // pred: ^bb2
    %11 = cir.load %1 : !cir.ptr<!s32i>, !s32i loc(#loc25)
    %12 = cir.const #cir.int<5> : !s32i loc(#loc25)
    %13 = cir.cmp(gt, %11, %12) : !s32i, !cir.bool loc(#loc25)
    cir.brcond %13 ^bb4, ^bb5 loc(#loc25)
  ^bb4:  // pred: ^bb3
    cir.br ^bb6 loc(#loc25)
  ^bb5:  // pred: ^bb3
    %14 = cir.get_global @".str" : !cir.ptr<!cir.array<!s8i x 20>> loc(#loc25)
    %15 = cir.cast(array_to_ptrdecay, %14 : !cir.ptr<!cir.array<!s8i x 20>>), !cir.ptr<!s8i> loc(#loc25)
    %16 = cir.get_global @".str.1" : !cir.ptr<!cir.array<!s8i x 38>> loc(#loc25)
    %17 = cir.cast(array_to_ptrdecay, %16 : !cir.ptr<!cir.array<!s8i x 38>>), !cir.ptr<!s8i> loc(#loc25)
    %18 = cir.const #cir.int<56> : !s32i loc(#loc25)
    %19 = cir.cast(integral, %18 : !s32i), !u32i loc(#loc25)
    %20 = cir.get_global @".str.3" : !cir.ptr<!cir.array<!s8i x 15>> loc(#loc25)
    %21 = cir.cast(array_to_ptrdecay, %20 : !cir.ptr<!cir.array<!s8i x 15>>), !cir.ptr<!s8i> loc(#loc25)
    cir.call @__assert_fail(%15, %17, %19, %21) : (!cir.ptr<!s8i>, !cir.ptr<!s8i>, !u32i, !cir.ptr<!s8i>) -> () extra(#fn_attr) loc(#loc25)
    cir.br ^bb6 loc(#loc25)
  ^bb6:  // 2 preds: ^bb4, ^bb5
    cir.br ^bb7 loc(#loc25)
  ^bb7:  // pred: ^bb6
    cir.br ^bb8 loc(#loc25)
  ^bb8:  // pred: ^bb7
    cir.br ^bb9 loc(#loc41)
  ^bb9:  // pred: ^bb8
    cir.return loc(#loc27)
  } loc(#loc53)
} loc(#loc)
#loc = loc("/workspaces/juliet-c/testcases/CWE617_Reachable_Assertion/CWE617_Reachable_Assertion__rand_31.c":0:0)
#loc1 = loc("/usr/include/stdlib.h":573:1)
#loc2 = loc("/usr/include/stdlib.h":573:24)
#loc3 = loc("/usr/include/assert.h":69:1)
#loc4 = loc("/usr/include/assert.h":71:43)
#loc5 = loc("CWE617_Reachable_Assertion__rand_31.c":36:9)
#loc6 = loc("CWE617_Reachable_Assertion__rand_31.c":25:1)
#loc7 = loc("CWE617_Reachable_Assertion__rand_31.c":38:1)
#loc8 = loc("CWE617_Reachable_Assertion__rand_31.c":33:9)
#loc9 = loc("CWE617_Reachable_Assertion__rand_31.c":33:24)
#loc10 = loc("CWE617_Reachable_Assertion__rand_31.c":34:9)
#loc11 = loc("CWE617_Reachable_Assertion__rand_31.c":34:20)
#loc12 = loc("CWE617_Reachable_Assertion__rand_31.c":27:5)
#loc13 = loc("CWE617_Reachable_Assertion__rand_31.c":27:9)
#loc14 = loc("CWE617_Reachable_Assertion__rand_31.c":29:13)
#loc15 = loc("CWE617_Reachable_Assertion__rand_31.c":29:12)
#loc16 = loc("CWE617_Reachable_Assertion__rand_31.c":29:5)
#loc18 = loc("CWE617_Reachable_Assertion__rand_31.c":31:5)
#loc19 = loc("CWE617_Reachable_Assertion__rand_31.c":32:5)
#loc20 = loc("CWE617_Reachable_Assertion__rand_31.c":37:5)
#loc21 = loc("CWE617_Reachable_Assertion__rand_31.c":60:1)
#loc22 = loc("CWE617_Reachable_Assertion__rand_31.c":63:1)
#loc23 = loc("CWE617_Reachable_Assertion__rand_31.c":62:5)
#loc24 = loc("CWE617_Reachable_Assertion__rand_31.c":62:13)
#loc25 = loc("CWE617_Reachable_Assertion__rand_31.c":56:9)
#loc26 = loc("CWE617_Reachable_Assertion__rand_31.c":45:1)
#loc27 = loc("CWE617_Reachable_Assertion__rand_31.c":58:1)
#loc28 = loc("CWE617_Reachable_Assertion__rand_31.c":53:9)
#loc29 = loc("CWE617_Reachable_Assertion__rand_31.c":53:24)
#loc30 = loc("CWE617_Reachable_Assertion__rand_31.c":54:9)
#loc31 = loc("CWE617_Reachable_Assertion__rand_31.c":54:20)
#loc32 = loc("CWE617_Reachable_Assertion__rand_31.c":47:5)
#loc33 = loc("CWE617_Reachable_Assertion__rand_31.c":47:9)
#loc34 = loc("CWE617_Reachable_Assertion__rand_31.c":49:13)
#loc35 = loc("CWE617_Reachable_Assertion__rand_31.c":49:12)
#loc36 = loc("CWE617_Reachable_Assertion__rand_31.c":49:5)
#loc37 = loc("CWE617_Reachable_Assertion__rand_31.c":51:12)
#loc38 = loc("CWE617_Reachable_Assertion__rand_31.c":51:25)
#loc39 = loc("CWE617_Reachable_Assertion__rand_31.c":51:5)
#loc40 = loc("CWE617_Reachable_Assertion__rand_31.c":52:5)
#loc41 = loc("CWE617_Reachable_Assertion__rand_31.c":57:5)
#loc42 = loc(fused[#loc1, #loc2])
#loc43 = loc(fused[#loc3, #loc4])
#loc44 = loc(fused[#loc6, #loc7])
#loc45 = loc(fused[#loc8, #loc9])
#loc46 = loc(fused[#loc10, #loc11])
#loc47 = loc(fused[#loc12, #loc13])
#loc48 = loc(fused[#loc16, #loc14])
#loc49 = loc(fused[#loc18, #loc17])
#loc50 = loc(fused[#loc19, #loc20])
#loc51 = loc(fused[#loc21, #loc22])
#loc52 = loc(fused[#loc23, #loc24])
#loc53 = loc(fused[#loc26, #loc27])
#loc54 = loc(fused[#loc28, #loc29])
#loc55 = loc(fused[#loc30, #loc31])
#loc56 = loc(fused[#loc32, #loc33])
#loc57 = loc(fused[#loc36, #loc34])
#loc58 = loc(fused[#loc39, #loc38])
#loc59 = loc(fused[#loc40, #loc41])
