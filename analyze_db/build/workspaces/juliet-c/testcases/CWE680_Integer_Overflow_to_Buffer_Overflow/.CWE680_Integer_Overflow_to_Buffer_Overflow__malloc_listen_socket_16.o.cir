!s32i = !cir.int<s, 32>
!s64i = !cir.int<s, 64>
!s8i = !cir.int<s, 8>
!u16i = !cir.int<u, 16>
!u32i = !cir.int<u, 32>
!u64i = !cir.int<u, 64>
!u8i = !cir.int<u, 8>
!void = !cir.void
#false = #cir.bool<false> : !cir.bool
#fn_attr = #cir<extra({nothrow = #cir.nothrow})>
#fn_attr1 = #cir<extra({inline = #cir.inline<no>, nothrow = #cir.nothrow, optnone = #cir.optnone, uwtable = #cir.uwtable<async>})>
#true = #cir.bool<true> : !cir.bool
!ty_in_addr = !cir.record<struct "in_addr" {!u32i} #cir.record.decl.ast>
!ty_sockaddr = !cir.record<struct "sockaddr" {!u16i, !cir.array<!s8i x 14>} #cir.record.decl.ast>
!ty_sockaddr_in = !cir.record<struct "sockaddr_in" {!u16i, !u16i, !ty_in_addr, !cir.array<!u8i x 8>}>
module @"/workspaces/juliet-c/testcases/CWE680_Integer_Overflow_to_Buffer_Overflow/CWE680_Integer_Overflow_to_Buffer_Overflow__malloc_listen_socket_16.c" attributes {cir.lang = #cir.lang<c>, cir.sob = #cir.signed_overflow_behavior<undefined>, cir.triple = "x86_64-unknown-linux-gnu", cir.type_size_info = #cir.type_size_info<char = 8, int = 32, size_t = 64>, cir.uwtable = #cir.uwtable<async>, dlti.dl_spec = #dlti.dl_spec<i128 = dense<128> : vector<2xi64>, f80 = dense<128> : vector<2xi64>, !llvm.ptr<271> = dense<32> : vector<4xi64>, !llvm.ptr<270> = dense<32> : vector<4xi64>, i64 = dense<64> : vector<2xi64>, f128 = dense<128> : vector<2xi64>, !llvm.ptr<272> = dense<64> : vector<4xi64>, f16 = dense<16> : vector<2xi64>, f64 = dense<64> : vector<2xi64>, i16 = dense<16> : vector<2xi64>, i32 = dense<32> : vector<2xi64>, i8 = dense<8> : vector<2xi64>, !llvm.ptr = dense<64> : vector<4xi64>, i1 = dense<8> : vector<2xi64>, "dlti.stack_alignment" = 128 : i64, "dlti.endianness" = "little", "dlti.mangling_mode" = "e">} {
  cir.func private @socket(!s32i, !s32i, !s32i) -> !s32i extra(#fn_attr) loc(#loc252)
  cir.func private @htons(!u16i) -> !u16i extra(#fn_attr) loc(#loc253)
  cir.func private @bind(!s32i, !cir.ptr<!ty_sockaddr>, !u32i) -> !s32i extra(#fn_attr) loc(#loc254)
  cir.func private @listen(!s32i, !s32i) -> !s32i extra(#fn_attr) loc(#loc255)
  cir.func private @accept(!s32i, !cir.ptr<!ty_sockaddr>, !cir.ptr<!u32i>) -> !s32i loc(#loc256)
  cir.func private @recv(!s32i, !cir.ptr<!void>, !u64i, !s32i) -> !s64i loc(#loc257)
  cir.func private @atoi(!cir.ptr<!s8i>) -> !s32i extra(#fn_attr) loc(#loc258)
  cir.func private @close(!s32i) -> !s32i loc(#loc259)
  cir.func private @malloc(!u64i) -> !cir.ptr<!void> extra(#fn_attr) loc(#loc260)
  cir.func private @exit(!s32i) extra(#fn_attr) loc(#loc261)
  cir.func private @printIntLine(!s32i) loc(#loc262)
  cir.func private @free(!cir.ptr<!void>) extra(#fn_attr) loc(#loc263)
  cir.func no_proto @CWE680_Integer_Overflow_to_Buffer_Overflow__malloc_listen_socket_16_bad() extra(#fn_attr1) {
    %0 = cir.alloca !s32i, !cir.ptr<!s32i>, ["data"] {alignment = 4 : i64} loc(#loc265)
    %1 = cir.const #cir.int<1> : !s32i loc(#loc29)
    %2 = cir.unary(minus, %1) nsw : !s32i, !s32i loc(#loc30)
    cir.store %2, %0 : !s32i, !cir.ptr<!s32i> loc(#loc266)
    cir.scope {
      cir.while {
        %3 = cir.const #cir.int<1> : !s32i loc(#loc34)
        %4 = cir.cast(int_to_bool, %3 : !s32i), !cir.bool loc(#loc34)
        cir.condition(%4) loc(#loc34)
      } do {
        cir.scope {
          cir.scope {
            %3 = cir.alloca !s32i, !cir.ptr<!s32i>, ["recvResult"] {alignment = 4 : i64} loc(#loc270)
            %4 = cir.alloca !ty_sockaddr_in, !cir.ptr<!ty_sockaddr_in>, ["service"] {alignment = 4 : i64} loc(#loc271)
            %5 = cir.alloca !s32i, !cir.ptr<!s32i>, ["listenSocket", init] {alignment = 4 : i64} loc(#loc272)
            %6 = cir.alloca !s32i, !cir.ptr<!s32i>, ["acceptSocket", init] {alignment = 4 : i64} loc(#loc273)
            %7 = cir.alloca !cir.array<!s8i x 14>, !cir.ptr<!cir.array<!s8i x 14>>, ["inputBuffer"] {alignment = 1 : i64} loc(#loc274)
            %8 = cir.const #cir.int<1> : !s32i loc(#loc43)
            %9 = cir.unary(minus, %8) nsw : !s32i, !s32i loc(#loc43)
            cir.store %9, %5 : !s32i, !cir.ptr<!s32i> loc(#loc272)
            %10 = cir.const #cir.int<1> : !s32i loc(#loc45)
            %11 = cir.unary(minus, %10) nsw : !s32i, !s32i loc(#loc45)
            cir.store %11, %6 : !s32i, !cir.ptr<!s32i> loc(#loc273)
            cir.scope {
              cir.do {
                cir.scope {
                  %12 = cir.const #cir.int<2> : !s32i loc(#loc52)
                  %13 = cir.const #cir.int<1> : !s32i loc(#loc53)
                  %14 = cir.const #cir.int<6> : !s32i loc(#loc54)
                  %15 = cir.call @socket(%12, %13, %14) : (!s32i, !s32i, !s32i) -> !s32i extra(#fn_attr) loc(#loc55)
                  cir.store %15, %5 : !s32i, !cir.ptr<!s32i> loc(#loc277)
                  cir.scope {
                    %57 = cir.load %5 : !cir.ptr<!s32i>, !s32i loc(#loc60)
                    %58 = cir.const #cir.int<1> : !s32i loc(#loc61)
                    %59 = cir.unary(minus, %58) nsw : !s32i, !s32i loc(#loc61)
                    %60 = cir.cmp(eq, %57, %59) : !s32i, !cir.bool loc(#loc279)
                    cir.if %60 {
                      cir.break loc(#loc63)
                    } loc(#loc280)
                  } loc(#loc278)
                  %16 = cir.cast(bitcast, %4 : !cir.ptr<!ty_sockaddr_in>), !cir.ptr<!void> loc(#loc281)
                  %17 = cir.const #cir.int<0> : !s32i loc(#loc66)
                  %18 = cir.const #cir.int<16> : !u64i loc(#loc282)
                  cir.libc.memset %18 bytes from %16 set to %17 : !cir.ptr<!void>, !s32i, !u64i loc(#loc283)
                  %19 = cir.const #cir.int<2> : !s32i loc(#loc71)
                  %20 = cir.cast(integral, %19 : !s32i), !u16i loc(#loc71)
                  %21 = cir.get_member %4[0] {name = "sin_family"} : !cir.ptr<!ty_sockaddr_in> -> !cir.ptr<!u16i> loc(#loc72)
                  cir.store %20, %21 : !u16i, !cir.ptr<!u16i> loc(#loc284)
                  %22 = cir.const #cir.int<0> : !s32i loc(#loc74)
                  %23 = cir.cast(integral, %22 : !s32i), !u32i loc(#loc74)
                  %24 = cir.get_member %4[2] {name = "sin_addr"} : !cir.ptr<!ty_sockaddr_in> -> !cir.ptr<!ty_in_addr> loc(#loc75)
                  %25 = cir.get_member %24[0] {name = "s_addr"} : !cir.ptr<!ty_in_addr> -> !cir.ptr<!u32i> loc(#loc76)
                  cir.store %23, %25 : !u32i, !cir.ptr<!u32i> loc(#loc285)
                  %26 = cir.const #cir.int<27015> : !s32i loc(#loc78)
                  %27 = cir.cast(integral, %26 : !s32i), !u16i loc(#loc78)
                  %28 = cir.call @htons(%27) : (!u16i) -> !u16i side_effect(const) extra(#fn_attr) loc(#loc79)
                  %29 = cir.get_member %4[1] {name = "sin_port"} : !cir.ptr<!ty_sockaddr_in> -> !cir.ptr<!u16i> loc(#loc80)
                  cir.store %28, %29 : !u16i, !cir.ptr<!u16i> loc(#loc286)
                  cir.scope {
                    %57 = cir.load %5 : !cir.ptr<!s32i>, !s32i loc(#loc85)
                    %58 = cir.cast(bitcast, %4 : !cir.ptr<!ty_sockaddr_in>), !cir.ptr<!ty_sockaddr> loc(#loc288)
                    %59 = cir.const #cir.int<16> : !u64i loc(#loc289)
                    %60 = cir.cast(integral, %59 : !u64i), !u32i loc(#loc289)
                    %61 = cir.call @bind(%57, %58, %60) : (!s32i, !cir.ptr<!ty_sockaddr>, !u32i) -> !s32i extra(#fn_attr) loc(#loc90)
                    %62 = cir.const #cir.int<1> : !s32i loc(#loc91)
                    %63 = cir.unary(minus, %62) nsw : !s32i, !s32i loc(#loc91)
                    %64 = cir.cmp(eq, %61, %63) : !s32i, !cir.bool loc(#loc290)
                    cir.if %64 {
                      cir.break loc(#loc93)
                    } loc(#loc291)
                  } loc(#loc287)
                  cir.scope {
                    %57 = cir.load %5 : !cir.ptr<!s32i>, !s32i loc(#loc96)
                    %58 = cir.const #cir.int<5> : !s32i loc(#loc97)
                    %59 = cir.call @listen(%57, %58) : (!s32i, !s32i) -> !s32i extra(#fn_attr) loc(#loc98)
                    %60 = cir.const #cir.int<1> : !s32i loc(#loc99)
                    %61 = cir.unary(minus, %60) nsw : !s32i, !s32i loc(#loc99)
                    %62 = cir.cmp(eq, %59, %61) : !s32i, !cir.bool loc(#loc293)
                    cir.if %62 {
                      cir.break loc(#loc101)
                    } loc(#loc294)
                  } loc(#loc292)
                  %30 = cir.load %5 : !cir.ptr<!s32i>, !s32i loc(#loc102)
                  %31 = cir.const #cir.ptr<null> : !cir.ptr<!ty_sockaddr> loc(#loc103)
                  %32 = cir.const #cir.ptr<null> : !cir.ptr<!u32i> loc(#loc104)
                  %33 = cir.call @accept(%30, %31, %32) : (!s32i, !cir.ptr<!ty_sockaddr>, !cir.ptr<!u32i>) -> !s32i loc(#loc105)
                  cir.store %33, %6 : !s32i, !cir.ptr<!s32i> loc(#loc295)
                  cir.scope {
                    %57 = cir.load %6 : !cir.ptr<!s32i>, !s32i loc(#loc110)
                    %58 = cir.const #cir.int<1> : !s32i loc(#loc111)
                    %59 = cir.unary(minus, %58) nsw : !s32i, !s32i loc(#loc111)
                    %60 = cir.cmp(eq, %57, %59) : !s32i, !cir.bool loc(#loc297)
                    cir.if %60 {
                      cir.break loc(#loc113)
                    } loc(#loc298)
                  } loc(#loc296)
                  %34 = cir.load %6 : !cir.ptr<!s32i>, !s32i loc(#loc114)
                  %35 = cir.cast(array_to_ptrdecay, %7 : !cir.ptr<!cir.array<!s8i x 14>>), !cir.ptr<!s8i> loc(#loc115)
                  %36 = cir.cast(bitcast, %35 : !cir.ptr<!s8i>), !cir.ptr<!void> loc(#loc115)
                  %37 = cir.const #cir.int<3> : !s32i loc(#loc116)
                  %38 = cir.cast(integral, %37 : !s32i), !u64i loc(#loc116)
                  %39 = cir.const #cir.int<4> : !u64i loc(#loc116)
                  %40 = cir.binop(mul, %38, %39) : !u64i loc(#loc116)
                  %41 = cir.const #cir.int<2> : !s32i loc(#loc116)
                  %42 = cir.cast(integral, %41 : !s32i), !u64i loc(#loc116)
                  %43 = cir.binop(add, %40, %42) : !u64i loc(#loc116)
                  %44 = cir.const #cir.int<1> : !s32i loc(#loc117)
                  %45 = cir.cast(integral, %44 : !s32i), !u64i loc(#loc117)
                  %46 = cir.binop(sub, %43, %45) : !u64i loc(#loc299)
                  %47 = cir.const #cir.int<0> : !s32i loc(#loc118)
                  %48 = cir.call @recv(%34, %36, %46, %47) : (!s32i, !cir.ptr<!void>, !u64i, !s32i) -> !s64i loc(#loc119)
                  %49 = cir.cast(integral, %48 : !s64i), !s32i loc(#loc119)
                  cir.store %49, %3 : !s32i, !cir.ptr<!s32i> loc(#loc300)
                  cir.scope {
                    %57 = cir.load %3 : !cir.ptr<!s32i>, !s32i loc(#loc124)
                    %58 = cir.const #cir.int<1> : !s32i loc(#loc125)
                    %59 = cir.unary(minus, %58) nsw : !s32i, !s32i loc(#loc125)
                    %60 = cir.cmp(eq, %57, %59) : !s32i, !cir.bool loc(#loc302)
                    %61 = cir.ternary(%60, true {
                      %62 = cir.const #true loc(#loc126)
                      cir.yield %62 : !cir.bool loc(#loc126)
                    }, false {
                      %62 = cir.load %3 : !cir.ptr<!s32i>, !s32i loc(#loc127)
                      %63 = cir.const #cir.int<0> : !s32i loc(#loc128)
                      %64 = cir.cmp(eq, %62, %63) : !s32i, !cir.bool loc(#loc303)
                      %65 = cir.ternary(%64, true {
                        %66 = cir.const #true loc(#loc126)
                        cir.yield %66 : !cir.bool loc(#loc126)
                      }, false {
                        %66 = cir.const #false loc(#loc126)
                        cir.yield %66 : !cir.bool loc(#loc126)
                      }) : (!cir.bool) -> !cir.bool loc(#loc126)
                      cir.yield %65 : !cir.bool loc(#loc126)
                    }) : (!cir.bool) -> !cir.bool loc(#loc126)
                    cir.if %61 {
                      cir.break loc(#loc130)
                    } loc(#loc304)
                  } loc(#loc301)
                  %50 = cir.const #cir.int<0> : !s32i loc(#loc131)
                  %51 = cir.cast(integral, %50 : !s32i), !s8i loc(#loc131)
                  %52 = cir.load %3 : !cir.ptr<!s32i>, !s32i loc(#loc132)
                  %53 = cir.cast(array_to_ptrdecay, %7 : !cir.ptr<!cir.array<!s8i x 14>>), !cir.ptr<!s8i> loc(#loc133)
                  %54 = cir.ptr_stride(%53 : !cir.ptr<!s8i>, %52 : !s32i), !cir.ptr<!s8i> loc(#loc133)
                  cir.store %51, %54 : !s8i, !cir.ptr<!s8i> loc(#loc305)
                  %55 = cir.cast(array_to_ptrdecay, %7 : !cir.ptr<!cir.array<!s8i x 14>>), !cir.ptr<!s8i> loc(#loc134)
                  %56 = cir.call @atoi(%55) : (!cir.ptr<!s8i>) -> !s32i side_effect(pure) extra(#fn_attr) loc(#loc135)
                  cir.store %56, %0 : !s32i, !cir.ptr<!s32i> loc(#loc306)
                } loc(#loc276)
                cir.yield loc(#loc49)
              } while {
                %12 = cir.const #cir.int<0> : !s32i loc(#loc138)
                %13 = cir.cast(int_to_bool, %12 : !s32i), !cir.bool loc(#loc138)
                cir.condition(%13) loc(#loc138)
              } loc(#loc275)
            } loc(#loc275)
            cir.scope {
              %12 = cir.load %5 : !cir.ptr<!s32i>, !s32i loc(#loc141)
              %13 = cir.const #cir.int<1> : !s32i loc(#loc142)
              %14 = cir.unary(minus, %13) nsw : !s32i, !s32i loc(#loc142)
              %15 = cir.cmp(ne, %12, %14) : !s32i, !cir.bool loc(#loc308)
              cir.if %15 {
                %16 = cir.load %5 : !cir.ptr<!s32i>, !s32i loc(#loc144)
                %17 = cir.call @close(%16) : (!s32i) -> !s32i loc(#loc145)
              } loc(#loc309)
            } loc(#loc307)
            cir.scope {
              %12 = cir.load %6 : !cir.ptr<!s32i>, !s32i loc(#loc148)
              %13 = cir.const #cir.int<1> : !s32i loc(#loc149)
              %14 = cir.unary(minus, %13) nsw : !s32i, !s32i loc(#loc149)
              %15 = cir.cmp(ne, %12, %14) : !s32i, !cir.bool loc(#loc311)
              cir.if %15 {
                %16 = cir.load %6 : !cir.ptr<!s32i>, !s32i loc(#loc151)
                %17 = cir.call @close(%16) : (!s32i) -> !s32i loc(#loc152)
              } loc(#loc312)
            } loc(#loc310)
          } loc(#loc269)
          cir.break loc(#loc153)
        } loc(#loc268)
        cir.yield loc(#loc33)
      } loc(#loc267)
    } loc(#loc267)
    cir.scope {
      %3 = cir.alloca !u64i, !cir.ptr<!u64i>, ["i"] {alignment = 8 : i64} loc(#loc314)
      %4 = cir.alloca !cir.ptr<!s32i>, !cir.ptr<!cir.ptr<!s32i>>, ["intPointer"] {alignment = 8 : i64} loc(#loc315)
      %5 = cir.get_global @malloc : !cir.ptr<!cir.func<(!u64i) -> !cir.ptr<!void>>> loc(#loc160)
      %6 = cir.load %0 : !cir.ptr<!s32i>, !s32i loc(#loc161)
      %7 = cir.cast(integral, %6 : !s32i), !u64i loc(#loc161)
      %8 = cir.const #cir.int<4> : !u64i loc(#loc316)
      %9 = cir.binop(mul, %7, %8) : !u64i loc(#loc317)
      %10 = cir.call @malloc(%9) : (!u64i) -> !cir.ptr<!void> extra(#fn_attr) loc(#loc160)
      %11 = cir.cast(bitcast, %10 : !cir.ptr<!void>), !cir.ptr<!s32i> loc(#loc318)
      cir.store %11, %4 : !cir.ptr<!s32i>, !cir.ptr<!cir.ptr<!s32i>> loc(#loc319)
      cir.scope {
        %19 = cir.load %4 : !cir.ptr<!cir.ptr<!s32i>>, !cir.ptr<!s32i> loc(#loc168)
        %20 = cir.const #cir.ptr<null> : !cir.ptr<!void> loc(#loc169)
        %21 = cir.cast(bitcast, %20 : !cir.ptr<!void>), !cir.ptr<!s32i> loc(#loc169)
        %22 = cir.cmp(eq, %19, %21) : !cir.ptr<!s32i>, !cir.bool loc(#loc321)
        cir.if %22 {
          %23 = cir.get_global @exit : !cir.ptr<!cir.func<(!s32i)>> loc(#loc171)
          %24 = cir.const #cir.int<1> : !s32i loc(#loc172)
          %25 = cir.unary(minus, %24) nsw : !s32i, !s32i loc(#loc173)
          cir.call @exit(%25) : (!s32i) -> () extra(#fn_attr) loc(#loc171)
        } loc(#loc322)
      } loc(#loc320)
      cir.scope {
        %19 = cir.const #cir.int<0> : !s32i loc(#loc176)
        %20 = cir.cast(integral, %19 : !s32i), !u64i loc(#loc176)
        cir.store %20, %3 : !u64i, !cir.ptr<!u64i> loc(#loc324)
        cir.for : cond {
          %21 = cir.load %3 : !cir.ptr<!u64i>, !u64i loc(#loc178)
          %22 = cir.load %0 : !cir.ptr<!s32i>, !s32i loc(#loc179)
          %23 = cir.cast(integral, %22 : !s32i), !u64i loc(#loc179)
          %24 = cir.cmp(lt, %21, %23) : !u64i, !cir.bool loc(#loc325)
          cir.condition(%24) loc(#loc180)
        } body {
          cir.scope {
            %21 = cir.const #cir.int<0> : !s32i loc(#loc182)
            %22 = cir.load %4 : !cir.ptr<!cir.ptr<!s32i>>, !cir.ptr<!s32i> loc(#loc183)
            %23 = cir.load %3 : !cir.ptr<!u64i>, !u64i loc(#loc184)
            %24 = cir.ptr_stride(%22 : !cir.ptr<!s32i>, %23 : !u64i), !cir.ptr<!s32i> loc(#loc185)
            cir.store %21, %24 : !s32i, !cir.ptr<!s32i> loc(#loc327)
          } loc(#loc326)
          cir.yield loc(#loc175)
        } step {
          %21 = cir.load %3 : !cir.ptr<!u64i>, !u64i loc(#loc186)
          %22 = cir.unary(inc, %21) : !u64i, !u64i loc(#loc187)
          cir.store %22, %3 : !u64i, !cir.ptr<!u64i> loc(#loc328)
          cir.yield loc(#loc323)
        } loc(#loc323)
      } loc(#loc323)
      %12 = cir.load %4 : !cir.ptr<!cir.ptr<!s32i>>, !cir.ptr<!s32i> loc(#loc188)
      %13 = cir.const #cir.int<0> : !s32i loc(#loc189)
      %14 = cir.ptr_stride(%12 : !cir.ptr<!s32i>, %13 : !s32i), !cir.ptr<!s32i> loc(#loc190)
      %15 = cir.load %14 : !cir.ptr<!s32i>, !s32i loc(#loc188)
      cir.call @printIntLine(%15) : (!s32i) -> () loc(#loc191)
      %16 = cir.get_global @free : !cir.ptr<!cir.func<(!cir.ptr<!void>)>> loc(#loc192)
      %17 = cir.load %4 : !cir.ptr<!cir.ptr<!s32i>>, !cir.ptr<!s32i> loc(#loc193)
      %18 = cir.cast(bitcast, %17 : !cir.ptr<!s32i>), !cir.ptr<!void> loc(#loc193)
      cir.call @free(%18) : (!cir.ptr<!void>) -> () extra(#fn_attr) loc(#loc192)
    } loc(#loc313)
    cir.return loc(#loc26)
  } loc(#loc264)
  cir.func no_proto @CWE680_Integer_Overflow_to_Buffer_Overflow__malloc_listen_socket_16_good() extra(#fn_attr1) {
    %0 = cir.get_global @goodG2B : !cir.ptr<!cir.func<()>> loc(#loc330)
    cir.call %0() : (!cir.ptr<!cir.func<()>>) -> () loc(#loc196)
    cir.return loc(#loc195)
  } loc(#loc329)
  cir.func no_proto internal private @goodG2B() extra(#fn_attr1) {
    %0 = cir.alloca !s32i, !cir.ptr<!s32i>, ["data"] {alignment = 4 : i64} loc(#loc332)
    %1 = cir.const #cir.int<1> : !s32i loc(#loc202)
    %2 = cir.unary(minus, %1) nsw : !s32i, !s32i loc(#loc203)
    cir.store %2, %0 : !s32i, !cir.ptr<!s32i> loc(#loc333)
    cir.scope {
      cir.while {
        %3 = cir.const #cir.int<1> : !s32i loc(#loc207)
        %4 = cir.cast(int_to_bool, %3 : !s32i), !cir.bool loc(#loc207)
        cir.condition(%4) loc(#loc207)
      } do {
        cir.scope {
          %3 = cir.const #cir.int<20> : !s32i loc(#loc209)
          cir.store %3, %0 : !s32i, !cir.ptr<!s32i> loc(#loc336)
          cir.break loc(#loc211)
        } loc(#loc335)
        cir.yield loc(#loc206)
      } loc(#loc334)
    } loc(#loc334)
    cir.scope {
      %3 = cir.alloca !u64i, !cir.ptr<!u64i>, ["i"] {alignment = 8 : i64} loc(#loc338)
      %4 = cir.alloca !cir.ptr<!s32i>, !cir.ptr<!cir.ptr<!s32i>>, ["intPointer"] {alignment = 8 : i64} loc(#loc339)
      %5 = cir.get_global @malloc : !cir.ptr<!cir.func<(!u64i) -> !cir.ptr<!void>>> loc(#loc218)
      %6 = cir.load %0 : !cir.ptr<!s32i>, !s32i loc(#loc219)
      %7 = cir.cast(integral, %6 : !s32i), !u64i loc(#loc219)
      %8 = cir.const #cir.int<4> : !u64i loc(#loc340)
      %9 = cir.binop(mul, %7, %8) : !u64i loc(#loc341)
      %10 = cir.call @malloc(%9) : (!u64i) -> !cir.ptr<!void> extra(#fn_attr) loc(#loc218)
      %11 = cir.cast(bitcast, %10 : !cir.ptr<!void>), !cir.ptr<!s32i> loc(#loc342)
      cir.store %11, %4 : !cir.ptr<!s32i>, !cir.ptr<!cir.ptr<!s32i>> loc(#loc343)
      cir.scope {
        %19 = cir.load %4 : !cir.ptr<!cir.ptr<!s32i>>, !cir.ptr<!s32i> loc(#loc226)
        %20 = cir.const #cir.ptr<null> : !cir.ptr<!void> loc(#loc227)
        %21 = cir.cast(bitcast, %20 : !cir.ptr<!void>), !cir.ptr<!s32i> loc(#loc227)
        %22 = cir.cmp(eq, %19, %21) : !cir.ptr<!s32i>, !cir.bool loc(#loc345)
        cir.if %22 {
          %23 = cir.get_global @exit : !cir.ptr<!cir.func<(!s32i)>> loc(#loc229)
          %24 = cir.const #cir.int<1> : !s32i loc(#loc230)
          %25 = cir.unary(minus, %24) nsw : !s32i, !s32i loc(#loc231)
          cir.call @exit(%25) : (!s32i) -> () extra(#fn_attr) loc(#loc229)
        } loc(#loc346)
      } loc(#loc344)
      cir.scope {
        %19 = cir.const #cir.int<0> : !s32i loc(#loc234)
        %20 = cir.cast(integral, %19 : !s32i), !u64i loc(#loc234)
        cir.store %20, %3 : !u64i, !cir.ptr<!u64i> loc(#loc348)
        cir.for : cond {
          %21 = cir.load %3 : !cir.ptr<!u64i>, !u64i loc(#loc236)
          %22 = cir.load %0 : !cir.ptr<!s32i>, !s32i loc(#loc237)
          %23 = cir.cast(integral, %22 : !s32i), !u64i loc(#loc237)
          %24 = cir.cmp(lt, %21, %23) : !u64i, !cir.bool loc(#loc349)
          cir.condition(%24) loc(#loc238)
        } body {
          cir.scope {
            %21 = cir.const #cir.int<0> : !s32i loc(#loc240)
            %22 = cir.load %4 : !cir.ptr<!cir.ptr<!s32i>>, !cir.ptr<!s32i> loc(#loc241)
            %23 = cir.load %3 : !cir.ptr<!u64i>, !u64i loc(#loc242)
            %24 = cir.ptr_stride(%22 : !cir.ptr<!s32i>, %23 : !u64i), !cir.ptr<!s32i> loc(#loc243)
            cir.store %21, %24 : !s32i, !cir.ptr<!s32i> loc(#loc351)
          } loc(#loc350)
          cir.yield loc(#loc233)
        } step {
          %21 = cir.load %3 : !cir.ptr<!u64i>, !u64i loc(#loc244)
          %22 = cir.unary(inc, %21) : !u64i, !u64i loc(#loc245)
          cir.store %22, %3 : !u64i, !cir.ptr<!u64i> loc(#loc352)
          cir.yield loc(#loc347)
        } loc(#loc347)
      } loc(#loc347)
      %12 = cir.load %4 : !cir.ptr<!cir.ptr<!s32i>>, !cir.ptr<!s32i> loc(#loc246)
      %13 = cir.const #cir.int<0> : !s32i loc(#loc247)
      %14 = cir.ptr_stride(%12 : !cir.ptr<!s32i>, %13 : !s32i), !cir.ptr<!s32i> loc(#loc248)
      %15 = cir.load %14 : !cir.ptr<!s32i>, !s32i loc(#loc246)
      cir.call @printIntLine(%15) : (!s32i) -> () loc(#loc249)
      %16 = cir.get_global @free : !cir.ptr<!cir.func<(!cir.ptr<!void>)>> loc(#loc250)
      %17 = cir.load %4 : !cir.ptr<!cir.ptr<!s32i>>, !cir.ptr<!s32i> loc(#loc251)
      %18 = cir.cast(bitcast, %17 : !cir.ptr<!s32i>), !cir.ptr<!void> loc(#loc251)
      cir.call @free(%18) : (!cir.ptr<!void>) -> () extra(#fn_attr) loc(#loc250)
    } loc(#loc337)
    cir.return loc(#loc199)
  } loc(#loc331)
} loc(#loc)
#loc = loc("/workspaces/juliet-c/testcases/CWE680_Integer_Overflow_to_Buffer_Overflow/CWE680_Integer_Overflow_to_Buffer_Overflow__malloc_listen_socket_16.c":0:0)
#loc1 = loc("/usr/include/x86_64-linux-gnu/sys/socket.h":102:1)
#loc2 = loc("/usr/include/x86_64-linux-gnu/sys/socket.h":102:62)
#loc3 = loc("/usr/include/netinet/in.h":402:1)
#loc4 = loc("/usr/include/netinet/in.h":403:40)
#loc5 = loc("/usr/include/x86_64-linux-gnu/sys/socket.h":112:1)
#loc6 = loc("/usr/include/x86_64-linux-gnu/sys/socket.h":113:6)
#loc7 = loc("/usr/include/x86_64-linux-gnu/sys/socket.h":296:1)
#loc8 = loc("/usr/include/x86_64-linux-gnu/sys/socket.h":296:39)
#loc9 = loc("/usr/include/x86_64-linux-gnu/sys/socket.h":306:1)
#loc10 = loc("/usr/include/x86_64-linux-gnu/sys/socket.h":307:38)
#loc11 = loc("/usr/include/x86_64-linux-gnu/sys/socket.h":145:1)
#loc12 = loc("/usr/include/x86_64-linux-gnu/sys/socket.h":145:68)
#loc13 = loc("/usr/include/stdlib.h":105:1)
#loc14 = loc("/usr/include/stdlib.h":106:33)
#loc15 = loc("/usr/include/unistd.h":358:1)
#loc16 = loc("/usr/include/unistd.h":358:27)
#loc17 = loc("/usr/include/stdlib.h":672:1)
#loc18 = loc("/usr/include/stdlib.h":672:45)
#loc19 = loc("/usr/include/stdlib.h":756:1)
#loc20 = loc("/usr/include/stdlib.h":756:70)
#loc21 = loc("../../testcasesupport/std_testcase_io.h":18:1)
#loc22 = loc("../../testcasesupport/std_testcase_io.h":18:33)
#loc23 = loc("/usr/include/stdlib.h":687:1)
#loc24 = loc("/usr/include/stdlib.h":687:32)
#loc25 = loc("CWE680_Integer_Overflow_to_Buffer_Overflow__malloc_listen_socket_16.c":43:1)
#loc26 = loc("CWE680_Integer_Overflow_to_Buffer_Overflow__malloc_listen_socket_16.c":135:1)
#loc27 = loc("CWE680_Integer_Overflow_to_Buffer_Overflow__malloc_listen_socket_16.c":45:5)
#loc28 = loc("CWE680_Integer_Overflow_to_Buffer_Overflow__malloc_listen_socket_16.c":45:9)
#loc29 = loc("CWE680_Integer_Overflow_to_Buffer_Overflow__malloc_listen_socket_16.c":47:13)
#loc30 = loc("CWE680_Integer_Overflow_to_Buffer_Overflow__malloc_listen_socket_16.c":47:12)
#loc31 = loc("CWE680_Integer_Overflow_to_Buffer_Overflow__malloc_listen_socket_16.c":47:5)
#loc32 = loc("CWE680_Integer_Overflow_to_Buffer_Overflow__malloc_listen_socket_16.c":48:5)
#loc33 = loc("CWE680_Integer_Overflow_to_Buffer_Overflow__malloc_listen_socket_16.c":120:5)
#loc34 = loc("CWE680_Integer_Overflow_to_Buffer_Overflow__malloc_listen_socket_16.c":48:11)
#loc35 = loc("CWE680_Integer_Overflow_to_Buffer_Overflow__malloc_listen_socket_16.c":49:5)
#loc36 = loc("CWE680_Integer_Overflow_to_Buffer_Overflow__malloc_listen_socket_16.c":50:9)
#loc37 = loc("CWE680_Integer_Overflow_to_Buffer_Overflow__malloc_listen_socket_16.c":118:9)
#loc38 = loc("CWE680_Integer_Overflow_to_Buffer_Overflow__malloc_listen_socket_16.c":55:13)
#loc39 = loc("CWE680_Integer_Overflow_to_Buffer_Overflow__malloc_listen_socket_16.c":55:17)
#loc40 = loc("CWE680_Integer_Overflow_to_Buffer_Overflow__malloc_listen_socket_16.c":56:13)
#loc41 = loc("CWE680_Integer_Overflow_to_Buffer_Overflow__malloc_listen_socket_16.c":56:32)
#loc42 = loc("CWE680_Integer_Overflow_to_Buffer_Overflow__malloc_listen_socket_16.c":57:13)
#loc43 = loc("CWE680_Integer_Overflow_to_Buffer_Overflow__malloc_listen_socket_16.c":57:35)
#loc44 = loc("CWE680_Integer_Overflow_to_Buffer_Overflow__malloc_listen_socket_16.c":58:13)
#loc45 = loc("CWE680_Integer_Overflow_to_Buffer_Overflow__malloc_listen_socket_16.c":58:35)
#loc46 = loc("CWE680_Integer_Overflow_to_Buffer_Overflow__malloc_listen_socket_16.c":59:13)
#loc47 = loc("CWE680_Integer_Overflow_to_Buffer_Overflow__malloc_listen_socket_16.c":59:45)
#loc48 = loc("CWE680_Integer_Overflow_to_Buffer_Overflow__malloc_listen_socket_16.c":60:13)
#loc49 = loc("CWE680_Integer_Overflow_to_Buffer_Overflow__malloc_listen_socket_16.c":103:21)
#loc50 = loc("CWE680_Integer_Overflow_to_Buffer_Overflow__malloc_listen_socket_16.c":61:13)
#loc51 = loc("CWE680_Integer_Overflow_to_Buffer_Overflow__malloc_listen_socket_16.c":102:13)
#loc52 = loc("CWE680_Integer_Overflow_to_Buffer_Overflow__malloc_listen_socket_16.c":70:39)
#loc53 = loc("CWE680_Integer_Overflow_to_Buffer_Overflow__malloc_listen_socket_16.c":70:48)
#loc54 = loc("CWE680_Integer_Overflow_to_Buffer_Overflow__malloc_listen_socket_16.c":70:61)
#loc55 = loc("CWE680_Integer_Overflow_to_Buffer_Overflow__malloc_listen_socket_16.c":70:32)
#loc56 = loc("CWE680_Integer_Overflow_to_Buffer_Overflow__malloc_listen_socket_16.c":70:17)
#loc57 = loc("CWE680_Integer_Overflow_to_Buffer_Overflow__malloc_listen_socket_16.c":70:72)
#loc58 = loc("CWE680_Integer_Overflow_to_Buffer_Overflow__malloc_listen_socket_16.c":71:17)
#loc59 = loc("CWE680_Integer_Overflow_to_Buffer_Overflow__malloc_listen_socket_16.c":74:17)
#loc60 = loc("CWE680_Integer_Overflow_to_Buffer_Overflow__malloc_listen_socket_16.c":71:21)
#loc61 = loc("CWE680_Integer_Overflow_to_Buffer_Overflow__malloc_listen_socket_16.c":71:37)
#loc62 = loc("CWE680_Integer_Overflow_to_Buffer_Overflow__malloc_listen_socket_16.c":72:17)
#loc63 = loc("CWE680_Integer_Overflow_to_Buffer_Overflow__malloc_listen_socket_16.c":73:21)
#loc64 = loc("CWE680_Integer_Overflow_to_Buffer_Overflow__malloc_listen_socket_16.c":75:24)
#loc65 = loc("CWE680_Integer_Overflow_to_Buffer_Overflow__malloc_listen_socket_16.c":75:25)
#loc66 = loc("CWE680_Integer_Overflow_to_Buffer_Overflow__malloc_listen_socket_16.c":75:34)
#loc67 = loc("CWE680_Integer_Overflow_to_Buffer_Overflow__malloc_listen_socket_16.c":75:37)
#loc68 = loc("CWE680_Integer_Overflow_to_Buffer_Overflow__malloc_listen_socket_16.c":75:51)
#loc69 = loc("CWE680_Integer_Overflow_to_Buffer_Overflow__malloc_listen_socket_16.c":75:17)
#loc70 = loc("CWE680_Integer_Overflow_to_Buffer_Overflow__malloc_listen_socket_16.c":75:52)
#loc71 = loc("CWE680_Integer_Overflow_to_Buffer_Overflow__malloc_listen_socket_16.c":76:38)
#loc72 = loc("/usr/include/netinet/in.h":249:5)
#loc73 = loc("CWE680_Integer_Overflow_to_Buffer_Overflow__malloc_listen_socket_16.c":76:17)
#loc74 = loc("CWE680_Integer_Overflow_to_Buffer_Overflow__malloc_listen_socket_16.c":77:43)
#loc75 = loc("/usr/include/netinet/in.h":251:20)
#loc76 = loc("/usr/include/netinet/in.h":33:15)
#loc77 = loc("CWE680_Integer_Overflow_to_Buffer_Overflow__malloc_listen_socket_16.c":77:17)
#loc78 = loc("CWE680_Integer_Overflow_to_Buffer_Overflow__malloc_listen_socket_16.c":78:42)
#loc79 = loc("CWE680_Integer_Overflow_to_Buffer_Overflow__malloc_listen_socket_16.c":78:36)
#loc80 = loc("/usr/include/netinet/in.h":250:15)
#loc81 = loc("CWE680_Integer_Overflow_to_Buffer_Overflow__malloc_listen_socket_16.c":78:17)
#loc82 = loc("CWE680_Integer_Overflow_to_Buffer_Overflow__malloc_listen_socket_16.c":78:50)
#loc83 = loc("CWE680_Integer_Overflow_to_Buffer_Overflow__malloc_listen_socket_16.c":79:17)
#loc84 = loc("CWE680_Integer_Overflow_to_Buffer_Overflow__malloc_listen_socket_16.c":82:17)
#loc85 = loc("CWE680_Integer_Overflow_to_Buffer_Overflow__malloc_listen_socket_16.c":79:26)
#loc86 = loc("CWE680_Integer_Overflow_to_Buffer_Overflow__malloc_listen_socket_16.c":79:58)
#loc87 = loc("CWE680_Integer_Overflow_to_Buffer_Overflow__malloc_listen_socket_16.c":79:59)
#loc88 = loc("CWE680_Integer_Overflow_to_Buffer_Overflow__malloc_listen_socket_16.c":79:68)
#loc89 = loc("CWE680_Integer_Overflow_to_Buffer_Overflow__malloc_listen_socket_16.c":79:82)
#loc90 = loc("CWE680_Integer_Overflow_to_Buffer_Overflow__malloc_listen_socket_16.c":79:21)
#loc91 = loc("CWE680_Integer_Overflow_to_Buffer_Overflow__malloc_listen_socket_16.c":79:88)
#loc92 = loc("CWE680_Integer_Overflow_to_Buffer_Overflow__malloc_listen_socket_16.c":80:17)
#loc93 = loc("CWE680_Integer_Overflow_to_Buffer_Overflow__malloc_listen_socket_16.c":81:21)
#loc94 = loc("CWE680_Integer_Overflow_to_Buffer_Overflow__malloc_listen_socket_16.c":83:17)
#loc95 = loc("CWE680_Integer_Overflow_to_Buffer_Overflow__malloc_listen_socket_16.c":86:17)
#loc96 = loc("CWE680_Integer_Overflow_to_Buffer_Overflow__malloc_listen_socket_16.c":83:28)
#loc97 = loc("CWE680_Integer_Overflow_to_Buffer_Overflow__malloc_listen_socket_16.c":83:42)
#loc98 = loc("CWE680_Integer_Overflow_to_Buffer_Overflow__malloc_listen_socket_16.c":83:21)
#loc99 = loc("CWE680_Integer_Overflow_to_Buffer_Overflow__malloc_listen_socket_16.c":83:61)
#loc100 = loc("CWE680_Integer_Overflow_to_Buffer_Overflow__malloc_listen_socket_16.c":84:17)
#loc101 = loc("CWE680_Integer_Overflow_to_Buffer_Overflow__malloc_listen_socket_16.c":85:21)
#loc102 = loc("CWE680_Integer_Overflow_to_Buffer_Overflow__malloc_listen_socket_16.c":87:39)
#loc103 = loc("CWE680_Integer_Overflow_to_Buffer_Overflow__malloc_listen_socket_16.c":87:53)
#loc104 = loc("CWE680_Integer_Overflow_to_Buffer_Overflow__malloc_listen_socket_16.c":87:59)
#loc105 = loc("CWE680_Integer_Overflow_to_Buffer_Overflow__malloc_listen_socket_16.c":87:32)
#loc106 = loc("CWE680_Integer_Overflow_to_Buffer_Overflow__malloc_listen_socket_16.c":87:17)
#loc107 = loc("CWE680_Integer_Overflow_to_Buffer_Overflow__malloc_listen_socket_16.c":87:63)
#loc108 = loc("CWE680_Integer_Overflow_to_Buffer_Overflow__malloc_listen_socket_16.c":88:17)
#loc109 = loc("CWE680_Integer_Overflow_to_Buffer_Overflow__malloc_listen_socket_16.c":91:17)
#loc110 = loc("CWE680_Integer_Overflow_to_Buffer_Overflow__malloc_listen_socket_16.c":88:21)
#loc111 = loc("CWE680_Integer_Overflow_to_Buffer_Overflow__malloc_listen_socket_16.c":88:37)
#loc112 = loc("CWE680_Integer_Overflow_to_Buffer_Overflow__malloc_listen_socket_16.c":89:17)
#loc113 = loc("CWE680_Integer_Overflow_to_Buffer_Overflow__malloc_listen_socket_16.c":90:21)
#loc114 = loc("CWE680_Integer_Overflow_to_Buffer_Overflow__malloc_listen_socket_16.c":93:35)
#loc115 = loc("CWE680_Integer_Overflow_to_Buffer_Overflow__malloc_listen_socket_16.c":93:49)
#loc116 = loc("CWE680_Integer_Overflow_to_Buffer_Overflow__malloc_listen_socket_16.c":93:62)
#loc117 = loc("CWE680_Integer_Overflow_to_Buffer_Overflow__malloc_listen_socket_16.c":93:80)
#loc118 = loc("CWE680_Integer_Overflow_to_Buffer_Overflow__malloc_listen_socket_16.c":93:83)
#loc119 = loc("CWE680_Integer_Overflow_to_Buffer_Overflow__malloc_listen_socket_16.c":93:30)
#loc120 = loc("CWE680_Integer_Overflow_to_Buffer_Overflow__malloc_listen_socket_16.c":93:17)
#loc121 = loc("CWE680_Integer_Overflow_to_Buffer_Overflow__malloc_listen_socket_16.c":93:84)
#loc122 = loc("CWE680_Integer_Overflow_to_Buffer_Overflow__malloc_listen_socket_16.c":94:17)
#loc123 = loc("CWE680_Integer_Overflow_to_Buffer_Overflow__malloc_listen_socket_16.c":97:17)
#loc124 = loc("CWE680_Integer_Overflow_to_Buffer_Overflow__malloc_listen_socket_16.c":94:21)
#loc125 = loc("CWE680_Integer_Overflow_to_Buffer_Overflow__malloc_listen_socket_16.c":94:35)
#loc126 = loc("CWE680_Integer_Overflow_to_Buffer_Overflow__malloc_listen_socket_16.c":94:48)
#loc127 = loc("CWE680_Integer_Overflow_to_Buffer_Overflow__malloc_listen_socket_16.c":94:51)
#loc128 = loc("CWE680_Integer_Overflow_to_Buffer_Overflow__malloc_listen_socket_16.c":94:65)
#loc129 = loc("CWE680_Integer_Overflow_to_Buffer_Overflow__malloc_listen_socket_16.c":95:17)
#loc130 = loc("CWE680_Integer_Overflow_to_Buffer_Overflow__malloc_listen_socket_16.c":96:21)
#loc131 = loc("CWE680_Integer_Overflow_to_Buffer_Overflow__malloc_listen_socket_16.c":99:43)
#loc132 = loc("CWE680_Integer_Overflow_to_Buffer_Overflow__malloc_listen_socket_16.c":99:29)
#loc133 = loc("CWE680_Integer_Overflow_to_Buffer_Overflow__malloc_listen_socket_16.c":99:17)
#loc134 = loc("CWE680_Integer_Overflow_to_Buffer_Overflow__malloc_listen_socket_16.c":101:29)
#loc135 = loc("CWE680_Integer_Overflow_to_Buffer_Overflow__malloc_listen_socket_16.c":101:24)
#loc136 = loc("CWE680_Integer_Overflow_to_Buffer_Overflow__malloc_listen_socket_16.c":101:17)
#loc137 = loc("CWE680_Integer_Overflow_to_Buffer_Overflow__malloc_listen_socket_16.c":101:40)
#loc138 = loc("CWE680_Integer_Overflow_to_Buffer_Overflow__malloc_listen_socket_16.c":103:20)
#loc139 = loc("CWE680_Integer_Overflow_to_Buffer_Overflow__malloc_listen_socket_16.c":104:13)
#loc140 = loc("CWE680_Integer_Overflow_to_Buffer_Overflow__malloc_listen_socket_16.c":107:13)
#loc141 = loc("CWE680_Integer_Overflow_to_Buffer_Overflow__malloc_listen_socket_16.c":104:17)
#loc142 = loc("CWE680_Integer_Overflow_to_Buffer_Overflow__malloc_listen_socket_16.c":104:33)
#loc143 = loc("CWE680_Integer_Overflow_to_Buffer_Overflow__malloc_listen_socket_16.c":105:13)
#loc144 = loc("CWE680_Integer_Overflow_to_Buffer_Overflow__malloc_listen_socket_16.c":106:30)
#loc145 = loc("CWE680_Integer_Overflow_to_Buffer_Overflow__malloc_listen_socket_16.c":106:17)
#loc146 = loc("CWE680_Integer_Overflow_to_Buffer_Overflow__malloc_listen_socket_16.c":108:13)
#loc147 = loc("CWE680_Integer_Overflow_to_Buffer_Overflow__malloc_listen_socket_16.c":111:13)
#loc148 = loc("CWE680_Integer_Overflow_to_Buffer_Overflow__malloc_listen_socket_16.c":108:17)
#loc149 = loc("CWE680_Integer_Overflow_to_Buffer_Overflow__malloc_listen_socket_16.c":108:33)
#loc150 = loc("CWE680_Integer_Overflow_to_Buffer_Overflow__malloc_listen_socket_16.c":109:13)
#loc151 = loc("CWE680_Integer_Overflow_to_Buffer_Overflow__malloc_listen_socket_16.c":110:30)
#loc152 = loc("CWE680_Integer_Overflow_to_Buffer_Overflow__malloc_listen_socket_16.c":110:17)
#loc153 = loc("CWE680_Integer_Overflow_to_Buffer_Overflow__malloc_listen_socket_16.c":119:9)
#loc154 = loc("CWE680_Integer_Overflow_to_Buffer_Overflow__malloc_listen_socket_16.c":121:5)
#loc155 = loc("CWE680_Integer_Overflow_to_Buffer_Overflow__malloc_listen_socket_16.c":134:5)
#loc156 = loc("CWE680_Integer_Overflow_to_Buffer_Overflow__malloc_listen_socket_16.c":122:9)
#loc157 = loc("CWE680_Integer_Overflow_to_Buffer_Overflow__malloc_listen_socket_16.c":122:16)
#loc158 = loc("CWE680_Integer_Overflow_to_Buffer_Overflow__malloc_listen_socket_16.c":123:9)
#loc159 = loc("CWE680_Integer_Overflow_to_Buffer_Overflow__malloc_listen_socket_16.c":123:14)
#loc160 = loc("CWE680_Integer_Overflow_to_Buffer_Overflow__malloc_listen_socket_16.c":126:28)
#loc161 = loc("CWE680_Integer_Overflow_to_Buffer_Overflow__malloc_listen_socket_16.c":126:35)
#loc162 = loc("CWE680_Integer_Overflow_to_Buffer_Overflow__malloc_listen_socket_16.c":126:42)
#loc163 = loc("CWE680_Integer_Overflow_to_Buffer_Overflow__malloc_listen_socket_16.c":126:52)
#loc164 = loc("CWE680_Integer_Overflow_to_Buffer_Overflow__malloc_listen_socket_16.c":126:53)
#loc165 = loc("CWE680_Integer_Overflow_to_Buffer_Overflow__malloc_listen_socket_16.c":126:9)
#loc166 = loc("CWE680_Integer_Overflow_to_Buffer_Overflow__malloc_listen_socket_16.c":127:9)
#loc167 = loc("CWE680_Integer_Overflow_to_Buffer_Overflow__malloc_listen_socket_16.c":127:43)
#loc168 = loc("CWE680_Integer_Overflow_to_Buffer_Overflow__malloc_listen_socket_16.c":127:13)
#loc169 = loc("CWE680_Integer_Overflow_to_Buffer_Overflow__malloc_listen_socket_16.c":127:27)
#loc170 = loc("CWE680_Integer_Overflow_to_Buffer_Overflow__malloc_listen_socket_16.c":127:33)
#loc171 = loc("CWE680_Integer_Overflow_to_Buffer_Overflow__malloc_listen_socket_16.c":127:34)
#loc172 = loc("CWE680_Integer_Overflow_to_Buffer_Overflow__malloc_listen_socket_16.c":127:40)
#loc173 = loc("CWE680_Integer_Overflow_to_Buffer_Overflow__malloc_listen_socket_16.c":127:39)
#loc174 = loc("CWE680_Integer_Overflow_to_Buffer_Overflow__malloc_listen_socket_16.c":128:9)
#loc175 = loc("CWE680_Integer_Overflow_to_Buffer_Overflow__malloc_listen_socket_16.c":131:9)
#loc176 = loc("CWE680_Integer_Overflow_to_Buffer_Overflow__malloc_listen_socket_16.c":128:18)
#loc177 = loc("CWE680_Integer_Overflow_to_Buffer_Overflow__malloc_listen_socket_16.c":128:14)
#loc178 = loc("CWE680_Integer_Overflow_to_Buffer_Overflow__malloc_listen_socket_16.c":128:21)
#loc179 = loc("CWE680_Integer_Overflow_to_Buffer_Overflow__malloc_listen_socket_16.c":128:33)
#loc180 = loc("CWE680_Integer_Overflow_to_Buffer_Overflow__malloc_listen_socket_16.c":128:23)
#loc181 = loc("CWE680_Integer_Overflow_to_Buffer_Overflow__malloc_listen_socket_16.c":129:9)
#loc182 = loc("CWE680_Integer_Overflow_to_Buffer_Overflow__malloc_listen_socket_16.c":130:29)
#loc183 = loc("CWE680_Integer_Overflow_to_Buffer_Overflow__malloc_listen_socket_16.c":130:13)
#loc184 = loc("CWE680_Integer_Overflow_to_Buffer_Overflow__malloc_listen_socket_16.c":130:24)
#loc185 = loc("CWE680_Integer_Overflow_to_Buffer_Overflow__malloc_listen_socket_16.c":130:25)
#loc186 = loc("CWE680_Integer_Overflow_to_Buffer_Overflow__malloc_listen_socket_16.c":128:40)
#loc187 = loc("CWE680_Integer_Overflow_to_Buffer_Overflow__malloc_listen_socket_16.c":128:39)
#loc188 = loc("CWE680_Integer_Overflow_to_Buffer_Overflow__malloc_listen_socket_16.c":132:22)
#loc189 = loc("CWE680_Integer_Overflow_to_Buffer_Overflow__malloc_listen_socket_16.c":132:33)
#loc190 = loc("CWE680_Integer_Overflow_to_Buffer_Overflow__malloc_listen_socket_16.c":132:34)
#loc191 = loc("CWE680_Integer_Overflow_to_Buffer_Overflow__malloc_listen_socket_16.c":132:9)
#loc192 = loc("CWE680_Integer_Overflow_to_Buffer_Overflow__malloc_listen_socket_16.c":133:9)
#loc193 = loc("CWE680_Integer_Overflow_to_Buffer_Overflow__malloc_listen_socket_16.c":133:14)
#loc194 = loc("CWE680_Integer_Overflow_to_Buffer_Overflow__malloc_listen_socket_16.c":169:1)
#loc195 = loc("CWE680_Integer_Overflow_to_Buffer_Overflow__malloc_listen_socket_16.c":172:1)
#loc196 = loc("CWE680_Integer_Overflow_to_Buffer_Overflow__malloc_listen_socket_16.c":171:5)
#loc197 = loc("CWE680_Integer_Overflow_to_Buffer_Overflow__malloc_listen_socket_16.c":171:13)
#loc198 = loc("CWE680_Integer_Overflow_to_Buffer_Overflow__malloc_listen_socket_16.c":142:1)
#loc199 = loc("CWE680_Integer_Overflow_to_Buffer_Overflow__malloc_listen_socket_16.c":167:1)
#loc200 = loc("CWE680_Integer_Overflow_to_Buffer_Overflow__malloc_listen_socket_16.c":144:5)
#loc201 = loc("CWE680_Integer_Overflow_to_Buffer_Overflow__malloc_listen_socket_16.c":144:9)
#loc202 = loc("CWE680_Integer_Overflow_to_Buffer_Overflow__malloc_listen_socket_16.c":146:13)
#loc203 = loc("CWE680_Integer_Overflow_to_Buffer_Overflow__malloc_listen_socket_16.c":146:12)
#loc204 = loc("CWE680_Integer_Overflow_to_Buffer_Overflow__malloc_listen_socket_16.c":146:5)
#loc205 = loc("CWE680_Integer_Overflow_to_Buffer_Overflow__malloc_listen_socket_16.c":147:5)
#loc206 = loc("CWE680_Integer_Overflow_to_Buffer_Overflow__malloc_listen_socket_16.c":152:5)
#loc207 = loc("CWE680_Integer_Overflow_to_Buffer_Overflow__malloc_listen_socket_16.c":147:11)
#loc208 = loc("CWE680_Integer_Overflow_to_Buffer_Overflow__malloc_listen_socket_16.c":148:5)
#loc209 = loc("CWE680_Integer_Overflow_to_Buffer_Overflow__malloc_listen_socket_16.c":150:16)
#loc210 = loc("CWE680_Integer_Overflow_to_Buffer_Overflow__malloc_listen_socket_16.c":150:9)
#loc211 = loc("CWE680_Integer_Overflow_to_Buffer_Overflow__malloc_listen_socket_16.c":151:9)
#loc212 = loc("CWE680_Integer_Overflow_to_Buffer_Overflow__malloc_listen_socket_16.c":153:5)
#loc213 = loc("CWE680_Integer_Overflow_to_Buffer_Overflow__malloc_listen_socket_16.c":166:5)
#loc214 = loc("CWE680_Integer_Overflow_to_Buffer_Overflow__malloc_listen_socket_16.c":154:9)
#loc215 = loc("CWE680_Integer_Overflow_to_Buffer_Overflow__malloc_listen_socket_16.c":154:16)
#loc216 = loc("CWE680_Integer_Overflow_to_Buffer_Overflow__malloc_listen_socket_16.c":155:9)
#loc217 = loc("CWE680_Integer_Overflow_to_Buffer_Overflow__malloc_listen_socket_16.c":155:14)
#loc218 = loc("CWE680_Integer_Overflow_to_Buffer_Overflow__malloc_listen_socket_16.c":158:28)
#loc219 = loc("CWE680_Integer_Overflow_to_Buffer_Overflow__malloc_listen_socket_16.c":158:35)
#loc220 = loc("CWE680_Integer_Overflow_to_Buffer_Overflow__malloc_listen_socket_16.c":158:42)
#loc221 = loc("CWE680_Integer_Overflow_to_Buffer_Overflow__malloc_listen_socket_16.c":158:52)
#loc222 = loc("CWE680_Integer_Overflow_to_Buffer_Overflow__malloc_listen_socket_16.c":158:53)
#loc223 = loc("CWE680_Integer_Overflow_to_Buffer_Overflow__malloc_listen_socket_16.c":158:9)
#loc224 = loc("CWE680_Integer_Overflow_to_Buffer_Overflow__malloc_listen_socket_16.c":159:9)
#loc225 = loc("CWE680_Integer_Overflow_to_Buffer_Overflow__malloc_listen_socket_16.c":159:43)
#loc226 = loc("CWE680_Integer_Overflow_to_Buffer_Overflow__malloc_listen_socket_16.c":159:13)
#loc227 = loc("CWE680_Integer_Overflow_to_Buffer_Overflow__malloc_listen_socket_16.c":159:27)
#loc228 = loc("CWE680_Integer_Overflow_to_Buffer_Overflow__malloc_listen_socket_16.c":159:33)
#loc229 = loc("CWE680_Integer_Overflow_to_Buffer_Overflow__malloc_listen_socket_16.c":159:34)
#loc230 = loc("CWE680_Integer_Overflow_to_Buffer_Overflow__malloc_listen_socket_16.c":159:40)
#loc231 = loc("CWE680_Integer_Overflow_to_Buffer_Overflow__malloc_listen_socket_16.c":159:39)
#loc232 = loc("CWE680_Integer_Overflow_to_Buffer_Overflow__malloc_listen_socket_16.c":160:9)
#loc233 = loc("CWE680_Integer_Overflow_to_Buffer_Overflow__malloc_listen_socket_16.c":163:9)
#loc234 = loc("CWE680_Integer_Overflow_to_Buffer_Overflow__malloc_listen_socket_16.c":160:18)
#loc235 = loc("CWE680_Integer_Overflow_to_Buffer_Overflow__malloc_listen_socket_16.c":160:14)
#loc236 = loc("CWE680_Integer_Overflow_to_Buffer_Overflow__malloc_listen_socket_16.c":160:21)
#loc237 = loc("CWE680_Integer_Overflow_to_Buffer_Overflow__malloc_listen_socket_16.c":160:33)
#loc238 = loc("CWE680_Integer_Overflow_to_Buffer_Overflow__malloc_listen_socket_16.c":160:23)
#loc239 = loc("CWE680_Integer_Overflow_to_Buffer_Overflow__malloc_listen_socket_16.c":161:9)
#loc240 = loc("CWE680_Integer_Overflow_to_Buffer_Overflow__malloc_listen_socket_16.c":162:29)
#loc241 = loc("CWE680_Integer_Overflow_to_Buffer_Overflow__malloc_listen_socket_16.c":162:13)
#loc242 = loc("CWE680_Integer_Overflow_to_Buffer_Overflow__malloc_listen_socket_16.c":162:24)
#loc243 = loc("CWE680_Integer_Overflow_to_Buffer_Overflow__malloc_listen_socket_16.c":162:25)
#loc244 = loc("CWE680_Integer_Overflow_to_Buffer_Overflow__malloc_listen_socket_16.c":160:40)
#loc245 = loc("CWE680_Integer_Overflow_to_Buffer_Overflow__malloc_listen_socket_16.c":160:39)
#loc246 = loc("CWE680_Integer_Overflow_to_Buffer_Overflow__malloc_listen_socket_16.c":164:22)
#loc247 = loc("CWE680_Integer_Overflow_to_Buffer_Overflow__malloc_listen_socket_16.c":164:33)
#loc248 = loc("CWE680_Integer_Overflow_to_Buffer_Overflow__malloc_listen_socket_16.c":164:34)
#loc249 = loc("CWE680_Integer_Overflow_to_Buffer_Overflow__malloc_listen_socket_16.c":164:9)
#loc250 = loc("CWE680_Integer_Overflow_to_Buffer_Overflow__malloc_listen_socket_16.c":165:9)
#loc251 = loc("CWE680_Integer_Overflow_to_Buffer_Overflow__malloc_listen_socket_16.c":165:14)
#loc252 = loc(fused[#loc1, #loc2])
#loc253 = loc(fused[#loc3, #loc4])
#loc254 = loc(fused[#loc5, #loc6])
#loc255 = loc(fused[#loc7, #loc8])
#loc256 = loc(fused[#loc9, #loc10])
#loc257 = loc(fused[#loc11, #loc12])
#loc258 = loc(fused[#loc13, #loc14])
#loc259 = loc(fused[#loc15, #loc16])
#loc260 = loc(fused[#loc17, #loc18])
#loc261 = loc(fused[#loc19, #loc20])
#loc262 = loc(fused[#loc21, #loc22])
#loc263 = loc(fused[#loc23, #loc24])
#loc264 = loc(fused[#loc25, #loc26])
#loc265 = loc(fused[#loc27, #loc28])
#loc266 = loc(fused[#loc31, #loc29])
#loc267 = loc(fused[#loc32, #loc33])
#loc268 = loc(fused[#loc35, #loc33])
#loc269 = loc(fused[#loc36, #loc37])
#loc270 = loc(fused[#loc38, #loc39])
#loc271 = loc(fused[#loc40, #loc41])
#loc272 = loc(fused[#loc42, #loc43])
#loc273 = loc(fused[#loc44, #loc45])
#loc274 = loc(fused[#loc46, #loc47])
#loc275 = loc(fused[#loc48, #loc49])
#loc276 = loc(fused[#loc50, #loc51])
#loc277 = loc(fused[#loc56, #loc57])
#loc278 = loc(fused[#loc58, #loc59])
#loc279 = loc(fused[#loc60, #loc61])
#loc280 = loc(fused[#loc62, #loc59])
#loc281 = loc(fused[#loc64, #loc65])
#loc282 = loc(fused[#loc67, #loc68])
#loc283 = loc(fused[#loc69, #loc70])
#loc284 = loc(fused[#loc73, #loc71])
#loc285 = loc(fused[#loc77, #loc74])
#loc286 = loc(fused[#loc81, #loc82])
#loc287 = loc(fused[#loc83, #loc84])
#loc288 = loc(fused[#loc86, #loc87])
#loc289 = loc(fused[#loc88, #loc89])
#loc290 = loc(fused[#loc90, #loc91])
#loc291 = loc(fused[#loc92, #loc84])
#loc292 = loc(fused[#loc94, #loc95])
#loc293 = loc(fused[#loc98, #loc99])
#loc294 = loc(fused[#loc100, #loc95])
#loc295 = loc(fused[#loc106, #loc107])
#loc296 = loc(fused[#loc108, #loc109])
#loc297 = loc(fused[#loc110, #loc111])
#loc298 = loc(fused[#loc112, #loc109])
#loc299 = loc(fused[#loc116, #loc117])
#loc300 = loc(fused[#loc120, #loc121])
#loc301 = loc(fused[#loc122, #loc123])
#loc302 = loc(fused[#loc124, #loc125])
#loc303 = loc(fused[#loc127, #loc128])
#loc304 = loc(fused[#loc129, #loc123])
#loc305 = loc(fused[#loc133, #loc131])
#loc306 = loc(fused[#loc136, #loc137])
#loc307 = loc(fused[#loc139, #loc140])
#loc308 = loc(fused[#loc141, #loc142])
#loc309 = loc(fused[#loc143, #loc140])
#loc310 = loc(fused[#loc146, #loc147])
#loc311 = loc(fused[#loc148, #loc149])
#loc312 = loc(fused[#loc150, #loc147])
#loc313 = loc(fused[#loc154, #loc155])
#loc314 = loc(fused[#loc156, #loc157])
#loc315 = loc(fused[#loc158, #loc159])
#loc316 = loc(fused[#loc162, #loc163])
#loc317 = loc(fused[#loc161, #loc163])
#loc318 = loc(fused[#loc160, #loc164])
#loc319 = loc(fused[#loc165, #loc164])
#loc320 = loc(fused[#loc166, #loc167])
#loc321 = loc(fused[#loc168, #loc169])
#loc322 = loc(fused[#loc170, #loc167])
#loc323 = loc(fused[#loc174, #loc175])
#loc324 = loc(fused[#loc177, #loc176])
#loc325 = loc(fused[#loc178, #loc179])
#loc326 = loc(fused[#loc181, #loc175])
#loc327 = loc(fused[#loc183, #loc182])
#loc328 = loc(fused[#loc187, #loc186])
#loc329 = loc(fused[#loc194, #loc195])
#loc330 = loc(fused[#loc196, #loc197])
#loc331 = loc(fused[#loc198, #loc199])
#loc332 = loc(fused[#loc200, #loc201])
#loc333 = loc(fused[#loc204, #loc202])
#loc334 = loc(fused[#loc205, #loc206])
#loc335 = loc(fused[#loc208, #loc206])
#loc336 = loc(fused[#loc210, #loc209])
#loc337 = loc(fused[#loc212, #loc213])
#loc338 = loc(fused[#loc214, #loc215])
#loc339 = loc(fused[#loc216, #loc217])
#loc340 = loc(fused[#loc220, #loc221])
#loc341 = loc(fused[#loc219, #loc221])
#loc342 = loc(fused[#loc218, #loc222])
#loc343 = loc(fused[#loc223, #loc222])
#loc344 = loc(fused[#loc224, #loc225])
#loc345 = loc(fused[#loc226, #loc227])
#loc346 = loc(fused[#loc228, #loc225])
#loc347 = loc(fused[#loc232, #loc233])
#loc348 = loc(fused[#loc235, #loc234])
#loc349 = loc(fused[#loc236, #loc237])
#loc350 = loc(fused[#loc239, #loc233])
#loc351 = loc(fused[#loc241, #loc240])
#loc352 = loc(fused[#loc245, #loc244])
