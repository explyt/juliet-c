!s32i = !cir.int<s, 32>
!s64i = !cir.int<s, 64>
!s8i = !cir.int<s, 8>
!u32i = !cir.int<u, 32>
!void = !cir.void
#fn_attr = #cir<extra({nothrow = #cir.nothrow})>
#fn_attr1 = #cir<extra({inline = #cir.inline<no>, nothrow = #cir.nothrow, optnone = #cir.optnone})>
#loc13 = loc("CWE190_Integer_Overflow__char_rand_multiply_66a.c":31:18)
#loc38 = loc("CWE190_Integer_Overflow__char_rand_multiply_66a.c":84:10)
#loc39 = loc("CWE190_Integer_Overflow__char_rand_multiply_66a.c":84:14)
#loc40 = loc("CWE190_Integer_Overflow__char_rand_multiply_66a.c":84:20)
#loc41 = loc("CWE190_Integer_Overflow__char_rand_multiply_66a.c":84:32)
#loc83 = loc("CWE190_Integer_Overflow__char_rand_multiply_66a.c":64:18)
#loc105 = loc(fused[#loc38, #loc39])
#loc106 = loc(fused[#loc40, #loc41])
module @"/home/ladisgin/git_proj/juliet-c/testcases/CWE190_Integer_Overflow/s01/CWE190_Integer_Overflow__char_rand_multiply_66a.c" attributes {cir.lang = #cir.lang<c>, cir.sob = #cir.signed_overflow_behavior<undefined>, cir.triple = "x86_64-unknown-linux-gnu", dlti.dl_spec = #dlti.dl_spec<!llvm.ptr = dense<64> : vector<4xi64>, i1 = dense<8> : vector<2xi64>, i16 = dense<16> : vector<2xi64>, i8 = dense<8> : vector<2xi64>, i32 = dense<32> : vector<2xi64>, f128 = dense<128> : vector<2xi64>, f16 = dense<16> : vector<2xi64>, !llvm.ptr<270> = dense<32> : vector<4xi64>, f64 = dense<64> : vector<2xi64>, !llvm.ptr<271> = dense<32> : vector<4xi64>, !llvm.ptr<272> = dense<64> : vector<4xi64>, i64 = dense<64> : vector<2xi64>, i128 = dense<128> : vector<2xi64>, f80 = dense<128> : vector<2xi64>, "dlti.stack_alignment" = 128 : i64, "dlti.endianness" = "little">} {
  cir.func private @rand() -> !s32i extra(#fn_attr) loc(#loc90)
  cir.func private @CWE190_Integer_Overflow__char_rand_multiply_66b_badSink(!cir.ptr<!s8i>) loc(#loc91)
  cir.func no_proto @CWE190_Integer_Overflow__char_rand_multiply_66_bad() extra(#fn_attr1) {
    %0 = cir.alloca !s8i, !cir.ptr<!s8i>, ["data"] {alignment = 1 : i64} loc(#loc93)
    %1 = cir.alloca !cir.array<!s8i x 5>, !cir.ptr<!cir.array<!s8i x 5>>, ["dataArray"] {alignment = 1 : i64} loc(#loc94)
    %2 = cir.const #cir.int<32> : !s32i loc(#loc11)
    %3 = cir.cast(integral, %2 : !s32i), !s8i loc(#loc11)
    cir.store %3, %0 : !s8i, !cir.ptr<!s8i> loc(#loc95)
    %4 = cir.call @rand() : () -> !s32i extra(#fn_attr) loc(#loc13)
    %5 = cir.const #cir.int<1> : !s32i loc(#loc13)
    %6 = cir.binop(and, %4, %5) : !s32i loc(#loc13)
    %7 = cir.cast(int_to_bool, %6 : !s32i), !cir.bool loc(#loc13)
    cir.brcond %7 ^bb1, ^bb2 loc(#loc13)
  ^bb1:  // pred: ^bb0
    %8 = cir.call @rand() : () -> !s32i extra(#fn_attr) loc(#loc13)
    %9 = cir.cast(integral, %8 : !s32i), !u32i loc(#loc13)
    %10 = cir.const #cir.int<30> : !s32i loc(#loc13)
    %11 = cir.shift(left, %9 : !u32i, %10 : !s32i) -> !u32i loc(#loc13)
    %12 = cir.call @rand() : () -> !s32i extra(#fn_attr) loc(#loc13)
    %13 = cir.cast(integral, %12 : !s32i), !u32i loc(#loc13)
    %14 = cir.const #cir.int<15> : !s32i loc(#loc13)
    %15 = cir.shift(left, %13 : !u32i, %14 : !s32i) -> !u32i loc(#loc13)
    %16 = cir.binop(xor, %11, %15) : !u32i loc(#loc13)
    %17 = cir.call @rand() : () -> !s32i extra(#fn_attr) loc(#loc13)
    %18 = cir.cast(integral, %17 : !s32i), !u32i loc(#loc13)
    %19 = cir.binop(xor, %16, %18) : !u32i loc(#loc13)
    cir.br ^bb3(%19 : !u32i) loc(#loc13)
  ^bb2:  // pred: ^bb0
    %20 = cir.call @rand() : () -> !s32i extra(#fn_attr) loc(#loc13)
    %21 = cir.cast(integral, %20 : !s32i), !u32i loc(#loc13)
    %22 = cir.const #cir.int<30> : !s32i loc(#loc13)
    %23 = cir.shift(left, %21 : !u32i, %22 : !s32i) -> !u32i loc(#loc13)
    %24 = cir.call @rand() : () -> !s32i extra(#fn_attr) loc(#loc13)
    %25 = cir.cast(integral, %24 : !s32i), !u32i loc(#loc13)
    %26 = cir.const #cir.int<15> : !s32i loc(#loc13)
    %27 = cir.shift(left, %25 : !u32i, %26 : !s32i) -> !u32i loc(#loc13)
    %28 = cir.binop(xor, %23, %27) : !u32i loc(#loc13)
    %29 = cir.call @rand() : () -> !s32i extra(#fn_attr) loc(#loc13)
    %30 = cir.cast(integral, %29 : !s32i), !u32i loc(#loc13)
    %31 = cir.binop(xor, %28, %30) : !u32i loc(#loc13)
    %32 = cir.unary(minus, %31) : !u32i, !u32i loc(#loc13)
    %33 = cir.const #cir.int<1> : !s32i loc(#loc13)
    %34 = cir.cast(integral, %33 : !s32i), !u32i loc(#loc13)
    %35 = cir.binop(sub, %32, %34) : !u32i loc(#loc13)
    cir.br ^bb3(%35 : !u32i) loc(#loc13)
  ^bb3(%36: !u32i loc("CWE190_Integer_Overflow__char_rand_multiply_66a.c":31:18)):  // 2 preds: ^bb1, ^bb2
    cir.br ^bb4 loc(#loc13)
  ^bb4:  // pred: ^bb3
    %37 = cir.cast(integral, %36 : !u32i), !s32i loc(#loc13)
    %38 = cir.cast(integral, %37 : !s32i), !s8i loc(#loc13)
    cir.store %38, %0 : !s8i, !cir.ptr<!s8i> loc(#loc96)
    %39 = cir.load %0 : !cir.ptr<!s8i>, !s8i loc(#loc15)
    %40 = cir.const #cir.int<2> : !s32i loc(#loc16)
    %41 = cir.cast(array_to_ptrdecay, %1 : !cir.ptr<!cir.array<!s8i x 5>>), !cir.ptr<!s8i> loc(#loc17)
    %42 = cir.ptr_stride(%41 : !cir.ptr<!s8i>, %40 : !s32i), !cir.ptr<!s8i> loc(#loc17)
    cir.store %39, %42 : !s8i, !cir.ptr<!s8i> loc(#loc97)
    %43 = cir.cast(array_to_ptrdecay, %1 : !cir.ptr<!cir.array<!s8i x 5>>), !cir.ptr<!s8i> loc(#loc18)
    cir.call @CWE190_Integer_Overflow__char_rand_multiply_66b_badSink(%43) : (!cir.ptr<!s8i>) -> () loc(#loc19)
    cir.return loc(#loc6)
  } loc(#loc92)
  cir.func no_proto @CWE190_Integer_Overflow__char_rand_multiply_66_good() extra(#fn_attr1) {
    %0 = cir.get_global @goodG2B : !cir.ptr<!cir.func<!void ()>> loc(#loc99)
    cir.call %0() : (!cir.ptr<!cir.func<!void ()>>) -> () loc(#loc22)
    %1 = cir.get_global @goodB2G : !cir.ptr<!cir.func<!void ()>> loc(#loc100)
    cir.call %1() : (!cir.ptr<!cir.func<!void ()>>) -> () loc(#loc24)
    cir.return loc(#loc21)
  } loc(#loc98)
  cir.func private @srand(!u32i) extra(#fn_attr) loc(#loc101)
  cir.func private @time(!cir.ptr<!s64i>) -> !s64i extra(#fn_attr) loc(#loc102)
  cir.func private @printLine(!cir.ptr<!s8i>) loc(#loc103)
  cir.global "private" constant cir_private dsolocal @".str" = #cir.const_array<"Calling good()...\00" : !cir.array<!s8i x 18>> : !cir.array<!s8i x 18> {alignment = 1 : i64} loc(#loc32)
  cir.global "private" constant cir_private dsolocal @".str.1" = #cir.const_array<"Finished good()\00" : !cir.array<!s8i x 16>> : !cir.array<!s8i x 16> {alignment = 1 : i64} loc(#loc33)
  cir.global "private" constant cir_private dsolocal @".str.2" = #cir.const_array<"Calling bad()...\00" : !cir.array<!s8i x 17>> : !cir.array<!s8i x 17> {alignment = 1 : i64} loc(#loc34)
  cir.global "private" constant cir_private dsolocal @".str.3" = #cir.const_array<"Finished bad()\00" : !cir.array<!s8i x 15>> : !cir.array<!s8i x 15> {alignment = 1 : i64} loc(#loc35)
  cir.func @main(%arg0: !s32i loc(fused[#loc38, #loc39]), %arg1: !cir.ptr<!cir.ptr<!s8i>> loc(fused[#loc40, #loc41])) -> !s32i extra(#fn_attr1) {
    %0 = cir.alloca !s32i, !cir.ptr<!s32i>, ["argc", init] {alignment = 4 : i64} loc(#loc105)
    %1 = cir.alloca !cir.ptr<!cir.ptr<!s8i>>, !cir.ptr<!cir.ptr<!cir.ptr<!s8i>>>, ["argv", init] {alignment = 8 : i64} loc(#loc106)
    %2 = cir.alloca !s32i, !cir.ptr<!s32i>, ["__retval"] {alignment = 4 : i64} loc(#loc37)
    cir.store %arg0, %0 : !s32i, !cir.ptr<!s32i> loc(#loc42)
    cir.store %arg1, %1 : !cir.ptr<!cir.ptr<!s8i>>, !cir.ptr<!cir.ptr<!cir.ptr<!s8i>>> loc(#loc42)
    %3 = cir.const #cir.ptr<null> : !cir.ptr<!s64i> loc(#loc43)
    %4 = cir.call @time(%3) : (!cir.ptr<!s64i>) -> !s64i extra(#fn_attr) loc(#loc44)
    %5 = cir.cast(integral, %4 : !s64i), !u32i loc(#loc44)
    cir.call @srand(%5) : (!u32i) -> () extra(#fn_attr) loc(#loc45)
    %6 = cir.get_global @".str" : !cir.ptr<!cir.array<!s8i x 18>> loc(#loc32)
    %7 = cir.cast(array_to_ptrdecay, %6 : !cir.ptr<!cir.array<!s8i x 18>>), !cir.ptr<!s8i> loc(#loc32)
    cir.call @printLine(%7) : (!cir.ptr<!s8i>) -> () loc(#loc46)
    %8 = cir.get_global @CWE190_Integer_Overflow__char_rand_multiply_66_good : !cir.ptr<!cir.func<!void ()>> loc(#loc107)
    cir.call @CWE190_Integer_Overflow__char_rand_multiply_66_good() : () -> () loc(#loc47)
    %9 = cir.get_global @".str.1" : !cir.ptr<!cir.array<!s8i x 16>> loc(#loc33)
    %10 = cir.cast(array_to_ptrdecay, %9 : !cir.ptr<!cir.array<!s8i x 16>>), !cir.ptr<!s8i> loc(#loc33)
    cir.call @printLine(%10) : (!cir.ptr<!s8i>) -> () loc(#loc49)
    %11 = cir.get_global @".str.2" : !cir.ptr<!cir.array<!s8i x 17>> loc(#loc34)
    %12 = cir.cast(array_to_ptrdecay, %11 : !cir.ptr<!cir.array<!s8i x 17>>), !cir.ptr<!s8i> loc(#loc34)
    cir.call @printLine(%12) : (!cir.ptr<!s8i>) -> () loc(#loc50)
    %13 = cir.get_global @CWE190_Integer_Overflow__char_rand_multiply_66_bad : !cir.ptr<!cir.func<!void ()>> loc(#loc108)
    cir.call @CWE190_Integer_Overflow__char_rand_multiply_66_bad() : () -> () loc(#loc51)
    %14 = cir.get_global @".str.3" : !cir.ptr<!cir.array<!s8i x 15>> loc(#loc35)
    %15 = cir.cast(array_to_ptrdecay, %14 : !cir.ptr<!cir.array<!s8i x 15>>), !cir.ptr<!s8i> loc(#loc35)
    cir.call @printLine(%15) : (!cir.ptr<!s8i>) -> () loc(#loc53)
    %16 = cir.const #cir.int<0> : !s32i loc(#loc54)
    cir.store %16, %2 : !s32i, !cir.ptr<!s32i> loc(#loc109)
    %17 = cir.load %2 : !cir.ptr<!s32i>, !s32i loc(#loc109)
    cir.return %17 : !s32i loc(#loc109)
  } loc(#loc104)
  cir.func private @CWE190_Integer_Overflow__char_rand_multiply_66b_goodG2BSink(!cir.ptr<!s8i>) loc(#loc110)
  cir.func no_proto internal private @goodG2B() extra(#fn_attr1) {
    %0 = cir.alloca !s8i, !cir.ptr<!s8i>, ["data"] {alignment = 1 : i64} loc(#loc112)
    %1 = cir.alloca !cir.array<!s8i x 5>, !cir.ptr<!cir.array<!s8i x 5>>, ["dataArray"] {alignment = 1 : i64} loc(#loc113)
    %2 = cir.const #cir.int<32> : !s32i loc(#loc64)
    %3 = cir.cast(integral, %2 : !s32i), !s8i loc(#loc64)
    cir.store %3, %0 : !s8i, !cir.ptr<!s8i> loc(#loc114)
    %4 = cir.const #cir.int<2> : !s32i loc(#loc66)
    %5 = cir.cast(integral, %4 : !s32i), !s8i loc(#loc66)
    cir.store %5, %0 : !s8i, !cir.ptr<!s8i> loc(#loc115)
    %6 = cir.load %0 : !cir.ptr<!s8i>, !s8i loc(#loc68)
    %7 = cir.const #cir.int<2> : !s32i loc(#loc69)
    %8 = cir.cast(array_to_ptrdecay, %1 : !cir.ptr<!cir.array<!s8i x 5>>), !cir.ptr<!s8i> loc(#loc70)
    %9 = cir.ptr_stride(%8 : !cir.ptr<!s8i>, %7 : !s32i), !cir.ptr<!s8i> loc(#loc70)
    cir.store %6, %9 : !s8i, !cir.ptr<!s8i> loc(#loc116)
    %10 = cir.cast(array_to_ptrdecay, %1 : !cir.ptr<!cir.array<!s8i x 5>>), !cir.ptr<!s8i> loc(#loc71)
    cir.call @CWE190_Integer_Overflow__char_rand_multiply_66b_goodG2BSink(%10) : (!cir.ptr<!s8i>) -> () loc(#loc72)
    cir.return loc(#loc59)
  } loc(#loc111)
  cir.func private @CWE190_Integer_Overflow__char_rand_multiply_66b_goodB2GSink(!cir.ptr<!s8i>) loc(#loc117)
  cir.func no_proto internal private @goodB2G() extra(#fn_attr1) {
    %0 = cir.alloca !s8i, !cir.ptr<!s8i>, ["data"] {alignment = 1 : i64} loc(#loc119)
    %1 = cir.alloca !cir.array<!s8i x 5>, !cir.ptr<!cir.array<!s8i x 5>>, ["dataArray"] {alignment = 1 : i64} loc(#loc120)
    %2 = cir.const #cir.int<32> : !s32i loc(#loc81)
    %3 = cir.cast(integral, %2 : !s32i), !s8i loc(#loc81)
    cir.store %3, %0 : !s8i, !cir.ptr<!s8i> loc(#loc121)
    %4 = cir.call @rand() : () -> !s32i extra(#fn_attr) loc(#loc83)
    %5 = cir.const #cir.int<1> : !s32i loc(#loc83)
    %6 = cir.binop(and, %4, %5) : !s32i loc(#loc83)
    %7 = cir.cast(int_to_bool, %6 : !s32i), !cir.bool loc(#loc83)
    cir.brcond %7 ^bb1, ^bb2 loc(#loc83)
  ^bb1:  // pred: ^bb0
    %8 = cir.call @rand() : () -> !s32i extra(#fn_attr) loc(#loc83)
    %9 = cir.cast(integral, %8 : !s32i), !u32i loc(#loc83)
    %10 = cir.const #cir.int<30> : !s32i loc(#loc83)
    %11 = cir.shift(left, %9 : !u32i, %10 : !s32i) -> !u32i loc(#loc83)
    %12 = cir.call @rand() : () -> !s32i extra(#fn_attr) loc(#loc83)
    %13 = cir.cast(integral, %12 : !s32i), !u32i loc(#loc83)
    %14 = cir.const #cir.int<15> : !s32i loc(#loc83)
    %15 = cir.shift(left, %13 : !u32i, %14 : !s32i) -> !u32i loc(#loc83)
    %16 = cir.binop(xor, %11, %15) : !u32i loc(#loc83)
    %17 = cir.call @rand() : () -> !s32i extra(#fn_attr) loc(#loc83)
    %18 = cir.cast(integral, %17 : !s32i), !u32i loc(#loc83)
    %19 = cir.binop(xor, %16, %18) : !u32i loc(#loc83)
    cir.br ^bb3(%19 : !u32i) loc(#loc83)
  ^bb2:  // pred: ^bb0
    %20 = cir.call @rand() : () -> !s32i extra(#fn_attr) loc(#loc83)
    %21 = cir.cast(integral, %20 : !s32i), !u32i loc(#loc83)
    %22 = cir.const #cir.int<30> : !s32i loc(#loc83)
    %23 = cir.shift(left, %21 : !u32i, %22 : !s32i) -> !u32i loc(#loc83)
    %24 = cir.call @rand() : () -> !s32i extra(#fn_attr) loc(#loc83)
    %25 = cir.cast(integral, %24 : !s32i), !u32i loc(#loc83)
    %26 = cir.const #cir.int<15> : !s32i loc(#loc83)
    %27 = cir.shift(left, %25 : !u32i, %26 : !s32i) -> !u32i loc(#loc83)
    %28 = cir.binop(xor, %23, %27) : !u32i loc(#loc83)
    %29 = cir.call @rand() : () -> !s32i extra(#fn_attr) loc(#loc83)
    %30 = cir.cast(integral, %29 : !s32i), !u32i loc(#loc83)
    %31 = cir.binop(xor, %28, %30) : !u32i loc(#loc83)
    %32 = cir.unary(minus, %31) : !u32i, !u32i loc(#loc83)
    %33 = cir.const #cir.int<1> : !s32i loc(#loc83)
    %34 = cir.cast(integral, %33 : !s32i), !u32i loc(#loc83)
    %35 = cir.binop(sub, %32, %34) : !u32i loc(#loc83)
    cir.br ^bb3(%35 : !u32i) loc(#loc83)
  ^bb3(%36: !u32i loc("CWE190_Integer_Overflow__char_rand_multiply_66a.c":64:18)):  // 2 preds: ^bb1, ^bb2
    cir.br ^bb4 loc(#loc83)
  ^bb4:  // pred: ^bb3
    %37 = cir.cast(integral, %36 : !u32i), !s32i loc(#loc83)
    %38 = cir.cast(integral, %37 : !s32i), !s8i loc(#loc83)
    cir.store %38, %0 : !s8i, !cir.ptr<!s8i> loc(#loc122)
    %39 = cir.load %0 : !cir.ptr<!s8i>, !s8i loc(#loc85)
    %40 = cir.const #cir.int<2> : !s32i loc(#loc86)
    %41 = cir.cast(array_to_ptrdecay, %1 : !cir.ptr<!cir.array<!s8i x 5>>), !cir.ptr<!s8i> loc(#loc87)
    %42 = cir.ptr_stride(%41 : !cir.ptr<!s8i>, %40 : !s32i), !cir.ptr<!s8i> loc(#loc87)
    cir.store %39, %42 : !s8i, !cir.ptr<!s8i> loc(#loc123)
    %43 = cir.cast(array_to_ptrdecay, %1 : !cir.ptr<!cir.array<!s8i x 5>>), !cir.ptr<!s8i> loc(#loc88)
    cir.call @CWE190_Integer_Overflow__char_rand_multiply_66b_goodB2GSink(%43) : (!cir.ptr<!s8i>) -> () loc(#loc89)
    cir.return loc(#loc76)
  } loc(#loc118)
} loc(#loc)
#loc = loc("/home/ladisgin/git_proj/juliet-c/testcases/CWE190_Integer_Overflow/s01/CWE190_Integer_Overflow__char_rand_multiply_66a.c":0:0)
#loc1 = loc("/usr/include/stdlib.h":573:1)
#loc2 = loc("/usr/include/stdlib.h":573:24)
#loc3 = loc("CWE190_Integer_Overflow__char_rand_multiply_66a.c":23:1)
#loc4 = loc("CWE190_Integer_Overflow__char_rand_multiply_66a.c":23:78)
#loc5 = loc("CWE190_Integer_Overflow__char_rand_multiply_66a.c":25:1)
#loc6 = loc("CWE190_Integer_Overflow__char_rand_multiply_66a.c":35:1)
#loc7 = loc("CWE190_Integer_Overflow__char_rand_multiply_66a.c":27:5)
#loc8 = loc("CWE190_Integer_Overflow__char_rand_multiply_66a.c":27:10)
#loc9 = loc("CWE190_Integer_Overflow__char_rand_multiply_66a.c":28:5)
#loc10 = loc("CWE190_Integer_Overflow__char_rand_multiply_66a.c":28:21)
#loc11 = loc("CWE190_Integer_Overflow__char_rand_multiply_66a.c":29:12)
#loc12 = loc("CWE190_Integer_Overflow__char_rand_multiply_66a.c":29:5)
#loc14 = loc("CWE190_Integer_Overflow__char_rand_multiply_66a.c":31:5)
#loc15 = loc("CWE190_Integer_Overflow__char_rand_multiply_66a.c":33:20)
#loc16 = loc("CWE190_Integer_Overflow__char_rand_multiply_66a.c":33:15)
#loc17 = loc("CWE190_Integer_Overflow__char_rand_multiply_66a.c":33:5)
#loc18 = loc("CWE190_Integer_Overflow__char_rand_multiply_66a.c":34:61)
#loc19 = loc("CWE190_Integer_Overflow__char_rand_multiply_66a.c":34:5)
#loc20 = loc("CWE190_Integer_Overflow__char_rand_multiply_66a.c":69:1)
#loc21 = loc("CWE190_Integer_Overflow__char_rand_multiply_66a.c":73:1)
#loc22 = loc("CWE190_Integer_Overflow__char_rand_multiply_66a.c":71:5)
#loc23 = loc("CWE190_Integer_Overflow__char_rand_multiply_66a.c":71:13)
#loc24 = loc("CWE190_Integer_Overflow__char_rand_multiply_66a.c":72:5)
#loc25 = loc("CWE190_Integer_Overflow__char_rand_multiply_66a.c":72:13)
#loc26 = loc("/usr/include/stdlib.h":575:1)
#loc27 = loc("/usr/include/stdlib.h":575:41)
#loc28 = loc("/usr/include/time.h":76:1)
#loc29 = loc("/usr/include/time.h":76:38)
#loc30 = loc("../../../testcasesupport/std_testcase_io.h":14:1)
#loc31 = loc("../../../testcasesupport/std_testcase_io.h":14:33)
#loc32 = loc("CWE190_Integer_Overflow__char_rand_multiply_66a.c":89:15)
#loc33 = loc("CWE190_Integer_Overflow__char_rand_multiply_66a.c":91:15)
#loc34 = loc("CWE190_Integer_Overflow__char_rand_multiply_66a.c":94:15)
#loc35 = loc("CWE190_Integer_Overflow__char_rand_multiply_66a.c":96:15)
#loc36 = loc("CWE190_Integer_Overflow__char_rand_multiply_66a.c":84:1)
#loc37 = loc("CWE190_Integer_Overflow__char_rand_multiply_66a.c":99:1)
#loc42 = loc("CWE190_Integer_Overflow__char_rand_multiply_66a.c":85:1)
#loc43 = loc("CWE190_Integer_Overflow__char_rand_multiply_66a.c":87:27)
#loc44 = loc("CWE190_Integer_Overflow__char_rand_multiply_66a.c":87:22)
#loc45 = loc("CWE190_Integer_Overflow__char_rand_multiply_66a.c":87:5)
#loc46 = loc("CWE190_Integer_Overflow__char_rand_multiply_66a.c":89:5)
#loc47 = loc("CWE190_Integer_Overflow__char_rand_multiply_66a.c":90:5)
#loc48 = loc("CWE190_Integer_Overflow__char_rand_multiply_66a.c":90:57)
#loc49 = loc("CWE190_Integer_Overflow__char_rand_multiply_66a.c":91:5)
#loc50 = loc("CWE190_Integer_Overflow__char_rand_multiply_66a.c":94:5)
#loc51 = loc("CWE190_Integer_Overflow__char_rand_multiply_66a.c":95:5)
#loc52 = loc("CWE190_Integer_Overflow__char_rand_multiply_66a.c":95:56)
#loc53 = loc("CWE190_Integer_Overflow__char_rand_multiply_66a.c":96:5)
#loc54 = loc("CWE190_Integer_Overflow__char_rand_multiply_66a.c":98:12)
#loc55 = loc("CWE190_Integer_Overflow__char_rand_multiply_66a.c":98:5)
#loc56 = loc("CWE190_Integer_Overflow__char_rand_multiply_66a.c":42:1)
#loc57 = loc("CWE190_Integer_Overflow__char_rand_multiply_66a.c":42:82)
#loc58 = loc("CWE190_Integer_Overflow__char_rand_multiply_66a.c":44:1)
#loc59 = loc("CWE190_Integer_Overflow__char_rand_multiply_66a.c":53:1)
#loc60 = loc("CWE190_Integer_Overflow__char_rand_multiply_66a.c":46:5)
#loc61 = loc("CWE190_Integer_Overflow__char_rand_multiply_66a.c":46:10)
#loc62 = loc("CWE190_Integer_Overflow__char_rand_multiply_66a.c":47:5)
#loc63 = loc("CWE190_Integer_Overflow__char_rand_multiply_66a.c":47:21)
#loc64 = loc("CWE190_Integer_Overflow__char_rand_multiply_66a.c":48:12)
#loc65 = loc("CWE190_Integer_Overflow__char_rand_multiply_66a.c":48:5)
#loc66 = loc("CWE190_Integer_Overflow__char_rand_multiply_66a.c":50:12)
#loc67 = loc("CWE190_Integer_Overflow__char_rand_multiply_66a.c":50:5)
#loc68 = loc("CWE190_Integer_Overflow__char_rand_multiply_66a.c":51:20)
#loc69 = loc("CWE190_Integer_Overflow__char_rand_multiply_66a.c":51:15)
#loc70 = loc("CWE190_Integer_Overflow__char_rand_multiply_66a.c":51:5)
#loc71 = loc("CWE190_Integer_Overflow__char_rand_multiply_66a.c":52:65)
#loc72 = loc("CWE190_Integer_Overflow__char_rand_multiply_66a.c":52:5)
#loc73 = loc("CWE190_Integer_Overflow__char_rand_multiply_66a.c":56:1)
#loc74 = loc("CWE190_Integer_Overflow__char_rand_multiply_66a.c":56:82)
#loc75 = loc("CWE190_Integer_Overflow__char_rand_multiply_66a.c":58:1)
#loc76 = loc("CWE190_Integer_Overflow__char_rand_multiply_66a.c":67:1)
#loc77 = loc("CWE190_Integer_Overflow__char_rand_multiply_66a.c":60:5)
#loc78 = loc("CWE190_Integer_Overflow__char_rand_multiply_66a.c":60:10)
#loc79 = loc("CWE190_Integer_Overflow__char_rand_multiply_66a.c":61:5)
#loc80 = loc("CWE190_Integer_Overflow__char_rand_multiply_66a.c":61:21)
#loc81 = loc("CWE190_Integer_Overflow__char_rand_multiply_66a.c":62:12)
#loc82 = loc("CWE190_Integer_Overflow__char_rand_multiply_66a.c":62:5)
#loc84 = loc("CWE190_Integer_Overflow__char_rand_multiply_66a.c":64:5)
#loc85 = loc("CWE190_Integer_Overflow__char_rand_multiply_66a.c":65:20)
#loc86 = loc("CWE190_Integer_Overflow__char_rand_multiply_66a.c":65:15)
#loc87 = loc("CWE190_Integer_Overflow__char_rand_multiply_66a.c":65:5)
#loc88 = loc("CWE190_Integer_Overflow__char_rand_multiply_66a.c":66:65)
#loc89 = loc("CWE190_Integer_Overflow__char_rand_multiply_66a.c":66:5)
#loc90 = loc(fused[#loc1, #loc2])
#loc91 = loc(fused[#loc3, #loc4])
#loc92 = loc(fused[#loc5, #loc6])
#loc93 = loc(fused[#loc7, #loc8])
#loc94 = loc(fused[#loc9, #loc10])
#loc95 = loc(fused[#loc12, #loc11])
#loc96 = loc(fused[#loc14, #loc13])
#loc97 = loc(fused[#loc17, #loc15])
#loc98 = loc(fused[#loc20, #loc21])
#loc99 = loc(fused[#loc22, #loc23])
#loc100 = loc(fused[#loc24, #loc25])
#loc101 = loc(fused[#loc26, #loc27])
#loc102 = loc(fused[#loc28, #loc29])
#loc103 = loc(fused[#loc30, #loc31])
#loc104 = loc(fused[#loc36, #loc37])
#loc107 = loc(fused[#loc47, #loc48])
#loc108 = loc(fused[#loc51, #loc52])
#loc109 = loc(fused[#loc55, #loc54])
#loc110 = loc(fused[#loc56, #loc57])
#loc111 = loc(fused[#loc58, #loc59])
#loc112 = loc(fused[#loc60, #loc61])
#loc113 = loc(fused[#loc62, #loc63])
#loc114 = loc(fused[#loc65, #loc64])
#loc115 = loc(fused[#loc67, #loc66])
#loc116 = loc(fused[#loc70, #loc68])
#loc117 = loc(fused[#loc73, #loc74])
#loc118 = loc(fused[#loc75, #loc76])
#loc119 = loc(fused[#loc77, #loc78])
#loc120 = loc(fused[#loc79, #loc80])
#loc121 = loc(fused[#loc82, #loc81])
#loc122 = loc(fused[#loc84, #loc83])
#loc123 = loc(fused[#loc87, #loc85])
