!s32i = !cir.int<s, 32>
!s8i = !cir.int<s, 8>
!u64i = !cir.int<u, 64>
!u8i = !cir.int<u, 8>
!void = !cir.void
#fn_attr = #cir<extra({nothrow = #cir.nothrow})>
#fn_attr1 = #cir<extra({inline = #cir.inline<no>, nothrow = #cir.nothrow, optnone = #cir.optnone})>
module @"/home/ladisgin/git_proj/test_projects/juliet-c/testcases/CWE401_Memory_Leak/s02/CWE401_Memory_Leak__strdup_char_13.c" attributes {cir.lang = #cir.lang<c>, cir.sob = #cir.signed_overflow_behavior<undefined>, cir.triple = "x86_64-unknown-linux-gnu", dlti.dl_spec = #dlti.dl_spec<#dlti.dl_entry<f64, dense<64> : vector<2xi64>>, #dlti.dl_entry<f128, dense<128> : vector<2xi64>>, #dlti.dl_entry<i8, dense<8> : vector<2xi64>>, #dlti.dl_entry<i16, dense<16> : vector<2xi64>>, #dlti.dl_entry<!llvm.ptr<272>, dense<64> : vector<4xi64>>, #dlti.dl_entry<!llvm.ptr<271>, dense<32> : vector<4xi64>>, #dlti.dl_entry<i32, dense<32> : vector<2xi64>>, #dlti.dl_entry<!llvm.ptr<270>, dense<32> : vector<4xi64>>, #dlti.dl_entry<f16, dense<16> : vector<2xi64>>, #dlti.dl_entry<!llvm.ptr, dense<64> : vector<4xi64>>, #dlti.dl_entry<i1, dense<8> : vector<2xi64>>, #dlti.dl_entry<i64, dense<64> : vector<2xi64>>, #dlti.dl_entry<i128, dense<128> : vector<2xi64>>, #dlti.dl_entry<f80, dense<128> : vector<2xi64>>, #dlti.dl_entry<"dlti.endianness", "little">, #dlti.dl_entry<"dlti.stack_alignment", 128 : i64>>, llvm.data_layout = "e-m:e-p270:32:32-p271:32:32-p272:64:64-i64:64-i128:128-f80:128-n8:16:32:64-S128"} {
  cir.global "private"  constant external @GLOBAL_CONST_FIVE : !s32i {alignment = 4 : i64} loc(#loc167)
  cir.func private  @strdup(!cir.ptr<!s8i>) -> !cir.ptr<!s8i> extra(#fn_attr) loc(#loc168)
  cir.func private  @printLine(!cir.ptr<!s8i>) loc(#loc169)
  cir.func no_proto  @CWE401_Memory_Leak__strdup_char_13_bad() extra(#fn_attr1) {
    %0 = cir.alloca !cir.ptr<!s8i>, !cir.ptr<!cir.ptr<!s8i>>, ["data"] {alignment = 8 : i64} loc(#loc171)
    %1 = cir.const #cir.ptr<null> : !cir.ptr<!s8i> loc(#loc11)
    cir.store %1, %0 : !cir.ptr<!s8i>, !cir.ptr<!cir.ptr<!s8i>> loc(#loc172)
    cir.scope {
      %2 = cir.get_global @GLOBAL_CONST_FIVE : !cir.ptr<!s32i> loc(#loc167)
      %3 = cir.load %2 : !cir.ptr<!s32i>, !s32i loc(#loc15)
      %4 = cir.const #cir.int<5> : !s32i loc(#loc16)
      %5 = cir.cmp(eq, %3, %4) : !s32i, !s32i loc(#loc174)
      %6 = cir.cast(int_to_bool, %5 : !s32i), !cir.bool loc(#loc17)
      cir.if %6 {
        cir.scope {
          %7 = cir.alloca !cir.array<!s8i x 9>, !cir.ptr<!cir.array<!s8i x 9>>, ["myString"] {alignment = 1 : i64} loc(#loc177)
          %8 = cir.const #cir.const_array<"myString\00" : !cir.array<!s8i x 9>> : !cir.array<!s8i x 9> loc(#loc177)
          cir.store %8, %7 : !cir.array<!s8i x 9>, !cir.ptr<!cir.array<!s8i x 9>> loc(#loc177)
          %9 = cir.get_global @strdup : !cir.ptr<!cir.func<!cir.ptr<!s8i> (!cir.ptr<!s8i>)>> loc(#loc23)
          %10 = cir.cast(array_to_ptrdecay, %7 : !cir.ptr<!cir.array<!s8i x 9>>), !cir.ptr<!s8i> loc(#loc24)
          %11 = cir.call @strdup(%10) : (!cir.ptr<!s8i>) -> !cir.ptr<!s8i> extra(#fn_attr) loc(#loc23)
          cir.store %11, %0 : !cir.ptr<!s8i>, !cir.ptr<!cir.ptr<!s8i>> loc(#loc178)
          %12 = cir.load %0 : !cir.ptr<!cir.ptr<!s8i>>, !cir.ptr<!s8i> loc(#loc27)
          cir.call @printLine(%12) : (!cir.ptr<!s8i>) -> () loc(#loc28)
        } loc(#loc176)
      } loc(#loc175)
    } loc(#loc173)
    cir.scope {
      %2 = cir.get_global @GLOBAL_CONST_FIVE : !cir.ptr<!s32i> loc(#loc167)
      %3 = cir.load %2 : !cir.ptr<!s32i>, !s32i loc(#loc31)
      %4 = cir.const #cir.int<5> : !s32i loc(#loc32)
      %5 = cir.cmp(eq, %3, %4) : !s32i, !s32i loc(#loc180)
      %6 = cir.cast(int_to_bool, %5 : !s32i), !cir.bool loc(#loc33)
      cir.if %6 {
      } loc(#loc181)
    } loc(#loc179)
    cir.return loc(#loc8)
  } loc(#loc170)
  cir.func no_proto  @CWE401_Memory_Leak__strdup_char_13_good() extra(#fn_attr1) {
    %0 = cir.get_global @goodB2G1 : !cir.ptr<!cir.func<!void ()>> loc(#loc183)
    cir.call %0() : (!cir.ptr<!cir.func<!void ()>>) -> () loc(#loc37)
    %1 = cir.get_global @goodB2G2 : !cir.ptr<!cir.func<!void ()>> loc(#loc184)
    cir.call %1() : (!cir.ptr<!cir.func<!void ()>>) -> () loc(#loc39)
    %2 = cir.get_global @goodG2B1 : !cir.ptr<!cir.func<!void ()>> loc(#loc185)
    cir.call %2() : (!cir.ptr<!cir.func<!void ()>>) -> () loc(#loc41)
    %3 = cir.get_global @goodG2B2 : !cir.ptr<!cir.func<!void ()>> loc(#loc186)
    cir.call %3() : (!cir.ptr<!cir.func<!void ()>>) -> () loc(#loc43)
    cir.return loc(#loc36)
  } loc(#loc182)
  cir.global "private"  constant internal dsolocal @".str" = #cir.const_array<"Benign, fixed string\00" : !cir.array<!s8i x 21>> : !cir.array<!s8i x 21> {alignment = 1 : i64} loc(#loc45)
  cir.func private  @free(!cir.ptr<!void>) extra(#fn_attr) loc(#loc187)
  cir.func no_proto internal private  @goodB2G1() extra(#fn_attr1) {
    %0 = cir.alloca !cir.ptr<!s8i>, !cir.ptr<!cir.ptr<!s8i>>, ["data"] {alignment = 8 : i64} loc(#loc189)
    %1 = cir.const #cir.ptr<null> : !cir.ptr<!s8i> loc(#loc52)
    cir.store %1, %0 : !cir.ptr<!s8i>, !cir.ptr<!cir.ptr<!s8i>> loc(#loc190)
    cir.scope {
      %2 = cir.get_global @GLOBAL_CONST_FIVE : !cir.ptr<!s32i> loc(#loc167)
      %3 = cir.load %2 : !cir.ptr<!s32i>, !s32i loc(#loc56)
      %4 = cir.const #cir.int<5> : !s32i loc(#loc57)
      %5 = cir.cmp(eq, %3, %4) : !s32i, !s32i loc(#loc192)
      %6 = cir.cast(int_to_bool, %5 : !s32i), !cir.bool loc(#loc58)
      cir.if %6 {
        cir.scope {
          %7 = cir.alloca !cir.array<!s8i x 9>, !cir.ptr<!cir.array<!s8i x 9>>, ["myString"] {alignment = 1 : i64} loc(#loc195)
          %8 = cir.const #cir.const_array<"myString\00" : !cir.array<!s8i x 9>> : !cir.array<!s8i x 9> loc(#loc195)
          cir.store %8, %7 : !cir.array<!s8i x 9>, !cir.ptr<!cir.array<!s8i x 9>> loc(#loc195)
          %9 = cir.get_global @strdup : !cir.ptr<!cir.func<!cir.ptr<!s8i> (!cir.ptr<!s8i>)>> loc(#loc64)
          %10 = cir.cast(array_to_ptrdecay, %7 : !cir.ptr<!cir.array<!s8i x 9>>), !cir.ptr<!s8i> loc(#loc65)
          %11 = cir.call @strdup(%10) : (!cir.ptr<!s8i>) -> !cir.ptr<!s8i> extra(#fn_attr) loc(#loc64)
          cir.store %11, %0 : !cir.ptr<!s8i>, !cir.ptr<!cir.ptr<!s8i>> loc(#loc196)
          %12 = cir.load %0 : !cir.ptr<!cir.ptr<!s8i>>, !cir.ptr<!s8i> loc(#loc68)
          cir.call @printLine(%12) : (!cir.ptr<!s8i>) -> () loc(#loc69)
        } loc(#loc194)
      } loc(#loc193)
    } loc(#loc191)
    cir.scope {
      %2 = cir.get_global @GLOBAL_CONST_FIVE : !cir.ptr<!s32i> loc(#loc167)
      %3 = cir.load %2 : !cir.ptr<!s32i>, !s32i loc(#loc72)
      %4 = cir.const #cir.int<5> : !s32i loc(#loc73)
      %5 = cir.cmp(ne, %3, %4) : !s32i, !s32i loc(#loc198)
      %6 = cir.cast(int_to_bool, %5 : !s32i), !cir.bool loc(#loc74)
      cir.if %6 {
        %7 = cir.get_global @".str" : !cir.ptr<!cir.array<!s8i x 21>> loc(#loc45)
        %8 = cir.cast(array_to_ptrdecay, %7 : !cir.ptr<!cir.array<!s8i x 21>>), !cir.ptr<!s8i> loc(#loc45)
        cir.call @printLine(%8) : (!cir.ptr<!s8i>) -> () loc(#loc78)
      } else {
        %7 = cir.get_global @free : !cir.ptr<!cir.func<!void (!cir.ptr<!void>)>> loc(#loc79)
        %8 = cir.load %0 : !cir.ptr<!cir.ptr<!s8i>>, !cir.ptr<!s8i> loc(#loc80)
        %9 = cir.cast(bitcast, %8 : !cir.ptr<!s8i>), !cir.ptr<!void> loc(#loc80)
        cir.call @free(%9) : (!cir.ptr<!void>) -> () extra(#fn_attr) loc(#loc79)
      } loc(#loc199)
    } loc(#loc197)
    cir.return loc(#loc49)
  } loc(#loc188)
  cir.func no_proto internal private  @goodB2G2() extra(#fn_attr1) {
    %0 = cir.alloca !cir.ptr<!s8i>, !cir.ptr<!cir.ptr<!s8i>>, ["data"] {alignment = 8 : i64} loc(#loc201)
    %1 = cir.const #cir.ptr<null> : !cir.ptr<!s8i> loc(#loc85)
    cir.store %1, %0 : !cir.ptr<!s8i>, !cir.ptr<!cir.ptr<!s8i>> loc(#loc202)
    cir.scope {
      %2 = cir.get_global @GLOBAL_CONST_FIVE : !cir.ptr<!s32i> loc(#loc167)
      %3 = cir.load %2 : !cir.ptr<!s32i>, !s32i loc(#loc89)
      %4 = cir.const #cir.int<5> : !s32i loc(#loc90)
      %5 = cir.cmp(eq, %3, %4) : !s32i, !s32i loc(#loc204)
      %6 = cir.cast(int_to_bool, %5 : !s32i), !cir.bool loc(#loc91)
      cir.if %6 {
        cir.scope {
          %7 = cir.alloca !cir.array<!s8i x 9>, !cir.ptr<!cir.array<!s8i x 9>>, ["myString"] {alignment = 1 : i64} loc(#loc207)
          %8 = cir.const #cir.const_array<"myString\00" : !cir.array<!s8i x 9>> : !cir.array<!s8i x 9> loc(#loc207)
          cir.store %8, %7 : !cir.array<!s8i x 9>, !cir.ptr<!cir.array<!s8i x 9>> loc(#loc207)
          %9 = cir.get_global @strdup : !cir.ptr<!cir.func<!cir.ptr<!s8i> (!cir.ptr<!s8i>)>> loc(#loc97)
          %10 = cir.cast(array_to_ptrdecay, %7 : !cir.ptr<!cir.array<!s8i x 9>>), !cir.ptr<!s8i> loc(#loc98)
          %11 = cir.call @strdup(%10) : (!cir.ptr<!s8i>) -> !cir.ptr<!s8i> extra(#fn_attr) loc(#loc97)
          cir.store %11, %0 : !cir.ptr<!s8i>, !cir.ptr<!cir.ptr<!s8i>> loc(#loc208)
          %12 = cir.load %0 : !cir.ptr<!cir.ptr<!s8i>>, !cir.ptr<!s8i> loc(#loc101)
          cir.call @printLine(%12) : (!cir.ptr<!s8i>) -> () loc(#loc102)
        } loc(#loc206)
      } loc(#loc205)
    } loc(#loc203)
    cir.scope {
      %2 = cir.get_global @GLOBAL_CONST_FIVE : !cir.ptr<!s32i> loc(#loc167)
      %3 = cir.load %2 : !cir.ptr<!s32i>, !s32i loc(#loc105)
      %4 = cir.const #cir.int<5> : !s32i loc(#loc106)
      %5 = cir.cmp(eq, %3, %4) : !s32i, !s32i loc(#loc210)
      %6 = cir.cast(int_to_bool, %5 : !s32i), !cir.bool loc(#loc107)
      cir.if %6 {
        %7 = cir.get_global @free : !cir.ptr<!cir.func<!void (!cir.ptr<!void>)>> loc(#loc109)
        %8 = cir.load %0 : !cir.ptr<!cir.ptr<!s8i>>, !cir.ptr<!s8i> loc(#loc110)
        %9 = cir.cast(bitcast, %8 : !cir.ptr<!s8i>), !cir.ptr<!void> loc(#loc110)
        cir.call @free(%9) : (!cir.ptr<!void>) -> () extra(#fn_attr) loc(#loc109)
      } loc(#loc211)
    } loc(#loc209)
    cir.return loc(#loc82)
  } loc(#loc200)
  cir.func private  @strcpy(!cir.ptr<!s8i>, !cir.ptr<!s8i>) -> !cir.ptr<!s8i> extra(#fn_attr) loc(#loc212)
  cir.global "private"  constant internal dsolocal @".str1" = #cir.const_array<"a string\00" : !cir.array<!s8i x 9>> : !cir.array<!s8i x 9> {alignment = 1 : i64} loc(#loc113)
  cir.func no_proto internal private  @goodG2B1() extra(#fn_attr1) {
    %0 = cir.alloca !cir.ptr<!s8i>, !cir.ptr<!cir.ptr<!s8i>>, ["data"] {alignment = 8 : i64} loc(#loc214)
    %1 = cir.const #cir.ptr<null> : !cir.ptr<!s8i> loc(#loc118)
    cir.store %1, %0 : !cir.ptr<!s8i>, !cir.ptr<!cir.ptr<!s8i>> loc(#loc215)
    cir.scope {
      %2 = cir.get_global @GLOBAL_CONST_FIVE : !cir.ptr<!s32i> loc(#loc167)
      %3 = cir.load %2 : !cir.ptr<!s32i>, !s32i loc(#loc122)
      %4 = cir.const #cir.int<5> : !s32i loc(#loc123)
      %5 = cir.cmp(ne, %3, %4) : !s32i, !s32i loc(#loc217)
      %6 = cir.cast(int_to_bool, %5 : !s32i), !cir.bool loc(#loc124)
      cir.if %6 {
        %7 = cir.get_global @".str" : !cir.ptr<!cir.array<!s8i x 21>> loc(#loc128)
        %8 = cir.cast(array_to_ptrdecay, %7 : !cir.ptr<!cir.array<!s8i x 21>>), !cir.ptr<!s8i> loc(#loc128)
        cir.call @printLine(%8) : (!cir.ptr<!s8i>) -> () loc(#loc129)
      } else {
        %7 = cir.const #cir.int<100> : !s32i loc(#loc130)
        %8 = cir.cast(integral, %7 : !s32i), !u64i loc(#loc130)
        %9 = cir.const #cir.int<1> : !u64i loc(#loc130)
        %10 = cir.binop(mul, %8, %9) : !u64i loc(#loc130)
        %11 = cir.alloca !u8i, !cir.ptr<!u8i>, %10 : !u64i, ["bi_alloca"] {alignment = 16 : i64} loc(#loc130)
        %12 = cir.cast(bitcast, %11 : !cir.ptr<!u8i>), !cir.ptr<!void> loc(#loc130)
        %13 = cir.cast(bitcast, %12 : !cir.ptr<!void>), !cir.ptr<!s8i> loc(#loc130)
        cir.store %13, %0 : !cir.ptr<!s8i>, !cir.ptr<!cir.ptr<!s8i>> loc(#loc219)
        %14 = cir.get_global @strcpy : !cir.ptr<!cir.func<!cir.ptr<!s8i> (!cir.ptr<!s8i>, !cir.ptr<!s8i>)>> loc(#loc132)
        %15 = cir.load %0 : !cir.ptr<!cir.ptr<!s8i>>, !cir.ptr<!s8i> loc(#loc133)
        %16 = cir.get_global @".str1" : !cir.ptr<!cir.array<!s8i x 9>> loc(#loc113)
        %17 = cir.cast(array_to_ptrdecay, %16 : !cir.ptr<!cir.array<!s8i x 9>>), !cir.ptr<!s8i> loc(#loc113)
        %18 = cir.call @strcpy(%15, %17) : (!cir.ptr<!s8i>, !cir.ptr<!s8i>) -> !cir.ptr<!s8i> extra(#fn_attr) loc(#loc132)
        %19 = cir.load %0 : !cir.ptr<!cir.ptr<!s8i>>, !cir.ptr<!s8i> loc(#loc134)
        cir.call @printLine(%19) : (!cir.ptr<!s8i>) -> () loc(#loc135)
      } loc(#loc218)
    } loc(#loc216)
    cir.scope {
      %2 = cir.get_global @GLOBAL_CONST_FIVE : !cir.ptr<!s32i> loc(#loc167)
      %3 = cir.load %2 : !cir.ptr<!s32i>, !s32i loc(#loc138)
      %4 = cir.const #cir.int<5> : !s32i loc(#loc139)
      %5 = cir.cmp(eq, %3, %4) : !s32i, !s32i loc(#loc221)
      %6 = cir.cast(int_to_bool, %5 : !s32i), !cir.bool loc(#loc140)
      cir.if %6 {
      } loc(#loc222)
    } loc(#loc220)
    cir.return loc(#loc115)
  } loc(#loc213)
  cir.func no_proto internal private  @goodG2B2() extra(#fn_attr1) {
    %0 = cir.alloca !cir.ptr<!s8i>, !cir.ptr<!cir.ptr<!s8i>>, ["data"] {alignment = 8 : i64} loc(#loc224)
    %1 = cir.const #cir.ptr<null> : !cir.ptr<!s8i> loc(#loc146)
    cir.store %1, %0 : !cir.ptr<!s8i>, !cir.ptr<!cir.ptr<!s8i>> loc(#loc225)
    cir.scope {
      %2 = cir.get_global @GLOBAL_CONST_FIVE : !cir.ptr<!s32i> loc(#loc167)
      %3 = cir.load %2 : !cir.ptr<!s32i>, !s32i loc(#loc150)
      %4 = cir.const #cir.int<5> : !s32i loc(#loc151)
      %5 = cir.cmp(eq, %3, %4) : !s32i, !s32i loc(#loc227)
      %6 = cir.cast(int_to_bool, %5 : !s32i), !cir.bool loc(#loc152)
      cir.if %6 {
        %7 = cir.const #cir.int<100> : !s32i loc(#loc154)
        %8 = cir.cast(integral, %7 : !s32i), !u64i loc(#loc154)
        %9 = cir.const #cir.int<1> : !u64i loc(#loc154)
        %10 = cir.binop(mul, %8, %9) : !u64i loc(#loc154)
        %11 = cir.alloca !u8i, !cir.ptr<!u8i>, %10 : !u64i, ["bi_alloca"] {alignment = 16 : i64} loc(#loc154)
        %12 = cir.cast(bitcast, %11 : !cir.ptr<!u8i>), !cir.ptr<!void> loc(#loc154)
        %13 = cir.cast(bitcast, %12 : !cir.ptr<!void>), !cir.ptr<!s8i> loc(#loc154)
        cir.store %13, %0 : !cir.ptr<!s8i>, !cir.ptr<!cir.ptr<!s8i>> loc(#loc229)
        %14 = cir.get_global @strcpy : !cir.ptr<!cir.func<!cir.ptr<!s8i> (!cir.ptr<!s8i>, !cir.ptr<!s8i>)>> loc(#loc156)
        %15 = cir.load %0 : !cir.ptr<!cir.ptr<!s8i>>, !cir.ptr<!s8i> loc(#loc157)
        %16 = cir.get_global @".str1" : !cir.ptr<!cir.array<!s8i x 9>> loc(#loc158)
        %17 = cir.cast(array_to_ptrdecay, %16 : !cir.ptr<!cir.array<!s8i x 9>>), !cir.ptr<!s8i> loc(#loc158)
        %18 = cir.call @strcpy(%15, %17) : (!cir.ptr<!s8i>, !cir.ptr<!s8i>) -> !cir.ptr<!s8i> extra(#fn_attr) loc(#loc156)
        %19 = cir.load %0 : !cir.ptr<!cir.ptr<!s8i>>, !cir.ptr<!s8i> loc(#loc159)
        cir.call @printLine(%19) : (!cir.ptr<!s8i>) -> () loc(#loc160)
      } loc(#loc228)
    } loc(#loc226)
    cir.scope {
      %2 = cir.get_global @GLOBAL_CONST_FIVE : !cir.ptr<!s32i> loc(#loc167)
      %3 = cir.load %2 : !cir.ptr<!s32i>, !s32i loc(#loc163)
      %4 = cir.const #cir.int<5> : !s32i loc(#loc164)
      %5 = cir.cmp(eq, %3, %4) : !s32i, !s32i loc(#loc231)
      %6 = cir.cast(int_to_bool, %5 : !s32i), !cir.bool loc(#loc165)
      cir.if %6 {
      } loc(#loc232)
    } loc(#loc230)
    cir.return loc(#loc143)
  } loc(#loc223)
} loc(#loc)
#loc = loc("/home/ladisgin/git_proj/test_projects/juliet-c/testcases/CWE401_Memory_Leak/s02/CWE401_Memory_Leak__strdup_char_13.c":0:0)
#loc1 = loc("../../../testcasesupport/std_testcase.h":111:1)
#loc2 = loc("../../../testcasesupport/std_testcase.h":111:18)
#loc3 = loc("/usr/include/string.h":187:1)
#loc4 = loc("/usr/include/string.h":188:35)
#loc5 = loc("../../../testcasesupport/std_testcase_io.h":14:1)
#loc6 = loc("../../../testcasesupport/std_testcase_io.h":14:33)
#loc7 = loc("CWE401_Memory_Leak__strdup_char_13.c":24:1)
#loc8 = loc("CWE401_Memory_Leak__strdup_char_13.c":44:1)
#loc9 = loc("CWE401_Memory_Leak__strdup_char_13.c":26:5)
#loc10 = loc("CWE401_Memory_Leak__strdup_char_13.c":26:12)
#loc11 = loc("CWE401_Memory_Leak__strdup_char_13.c":27:12)
#loc12 = loc("CWE401_Memory_Leak__strdup_char_13.c":27:5)
#loc13 = loc("CWE401_Memory_Leak__strdup_char_13.c":28:5)
#loc14 = loc("CWE401_Memory_Leak__strdup_char_13.c":37:5)
#loc15 = loc("CWE401_Memory_Leak__strdup_char_13.c":28:8)
#loc16 = loc("CWE401_Memory_Leak__strdup_char_13.c":28:27)
#loc17 = loc("CWE401_Memory_Leak__strdup_char_13.c":28:25)
#loc18 = loc("CWE401_Memory_Leak__strdup_char_13.c":29:5)
#loc19 = loc("CWE401_Memory_Leak__strdup_char_13.c":30:9)
#loc20 = loc("CWE401_Memory_Leak__strdup_char_13.c":36:9)
#loc21 = loc("CWE401_Memory_Leak__strdup_char_13.c":31:13)
#loc22 = loc("CWE401_Memory_Leak__strdup_char_13.c":31:31)
#loc23 = loc("CWE401_Memory_Leak__strdup_char_13.c":33:20)
#loc24 = loc("CWE401_Memory_Leak__strdup_char_13.c":33:27)
#loc25 = loc("CWE401_Memory_Leak__strdup_char_13.c":33:13)
#loc26 = loc("CWE401_Memory_Leak__strdup_char_13.c":33:35)
#loc27 = loc("CWE401_Memory_Leak__strdup_char_13.c":35:23)
#loc28 = loc("CWE401_Memory_Leak__strdup_char_13.c":35:13)
#loc29 = loc("CWE401_Memory_Leak__strdup_char_13.c":38:5)
#loc30 = loc("CWE401_Memory_Leak__strdup_char_13.c":43:5)
#loc31 = loc("CWE401_Memory_Leak__strdup_char_13.c":38:8)
#loc32 = loc("CWE401_Memory_Leak__strdup_char_13.c":38:27)
#loc33 = loc("CWE401_Memory_Leak__strdup_char_13.c":38:25)
#loc34 = loc("CWE401_Memory_Leak__strdup_char_13.c":39:5)
#loc35 = loc("CWE401_Memory_Leak__strdup_char_13.c":146:1)
#loc36 = loc("CWE401_Memory_Leak__strdup_char_13.c":152:1)
#loc37 = loc("CWE401_Memory_Leak__strdup_char_13.c":148:5)
#loc38 = loc("CWE401_Memory_Leak__strdup_char_13.c":148:14)
#loc39 = loc("CWE401_Memory_Leak__strdup_char_13.c":149:5)
#loc40 = loc("CWE401_Memory_Leak__strdup_char_13.c":149:14)
#loc41 = loc("CWE401_Memory_Leak__strdup_char_13.c":150:5)
#loc42 = loc("CWE401_Memory_Leak__strdup_char_13.c":150:14)
#loc43 = loc("CWE401_Memory_Leak__strdup_char_13.c":151:5)
#loc44 = loc("CWE401_Memory_Leak__strdup_char_13.c":151:14)
#loc45 = loc("CWE401_Memory_Leak__strdup_char_13.c":68:19)
#loc46 = loc("/usr/include/stdlib.h":687:1)
#loc47 = loc("/usr/include/stdlib.h":687:32)
#loc48 = loc("CWE401_Memory_Leak__strdup_char_13.c":51:1)
#loc49 = loc("CWE401_Memory_Leak__strdup_char_13.c":75:1)
#loc50 = loc("CWE401_Memory_Leak__strdup_char_13.c":53:5)
#loc51 = loc("CWE401_Memory_Leak__strdup_char_13.c":53:12)
#loc52 = loc("CWE401_Memory_Leak__strdup_char_13.c":54:12)
#loc53 = loc("CWE401_Memory_Leak__strdup_char_13.c":54:5)
#loc54 = loc("CWE401_Memory_Leak__strdup_char_13.c":55:5)
#loc55 = loc("CWE401_Memory_Leak__strdup_char_13.c":64:5)
#loc56 = loc("CWE401_Memory_Leak__strdup_char_13.c":55:8)
#loc57 = loc("CWE401_Memory_Leak__strdup_char_13.c":55:27)
#loc58 = loc("CWE401_Memory_Leak__strdup_char_13.c":55:25)
#loc59 = loc("CWE401_Memory_Leak__strdup_char_13.c":56:5)
#loc60 = loc("CWE401_Memory_Leak__strdup_char_13.c":57:9)
#loc61 = loc("CWE401_Memory_Leak__strdup_char_13.c":63:9)
#loc62 = loc("CWE401_Memory_Leak__strdup_char_13.c":58:13)
#loc63 = loc("CWE401_Memory_Leak__strdup_char_13.c":58:31)
#loc64 = loc("CWE401_Memory_Leak__strdup_char_13.c":60:20)
#loc65 = loc("CWE401_Memory_Leak__strdup_char_13.c":60:27)
#loc66 = loc("CWE401_Memory_Leak__strdup_char_13.c":60:13)
#loc67 = loc("CWE401_Memory_Leak__strdup_char_13.c":60:35)
#loc68 = loc("CWE401_Memory_Leak__strdup_char_13.c":62:23)
#loc69 = loc("CWE401_Memory_Leak__strdup_char_13.c":62:13)
#loc70 = loc("CWE401_Memory_Leak__strdup_char_13.c":65:5)
#loc71 = loc("CWE401_Memory_Leak__strdup_char_13.c":74:5)
#loc72 = loc("CWE401_Memory_Leak__strdup_char_13.c":65:8)
#loc73 = loc("CWE401_Memory_Leak__strdup_char_13.c":65:27)
#loc74 = loc("CWE401_Memory_Leak__strdup_char_13.c":65:25)
#loc75 = loc("CWE401_Memory_Leak__strdup_char_13.c":66:5)
#loc76 = loc("CWE401_Memory_Leak__strdup_char_13.c":69:5)
#loc77 = loc("CWE401_Memory_Leak__strdup_char_13.c":71:5)
#loc78 = loc("CWE401_Memory_Leak__strdup_char_13.c":68:9)
#loc79 = loc("CWE401_Memory_Leak__strdup_char_13.c":73:9)
#loc80 = loc("CWE401_Memory_Leak__strdup_char_13.c":73:14)
#loc81 = loc("CWE401_Memory_Leak__strdup_char_13.c":78:1)
#loc82 = loc("CWE401_Memory_Leak__strdup_char_13.c":97:1)
#loc83 = loc("CWE401_Memory_Leak__strdup_char_13.c":80:5)
#loc84 = loc("CWE401_Memory_Leak__strdup_char_13.c":80:12)
#loc85 = loc("CWE401_Memory_Leak__strdup_char_13.c":81:12)
#loc86 = loc("CWE401_Memory_Leak__strdup_char_13.c":81:5)
#loc87 = loc("CWE401_Memory_Leak__strdup_char_13.c":82:5)
#loc88 = loc("CWE401_Memory_Leak__strdup_char_13.c":91:5)
#loc89 = loc("CWE401_Memory_Leak__strdup_char_13.c":82:8)
#loc90 = loc("CWE401_Memory_Leak__strdup_char_13.c":82:27)
#loc91 = loc("CWE401_Memory_Leak__strdup_char_13.c":82:25)
#loc92 = loc("CWE401_Memory_Leak__strdup_char_13.c":83:5)
#loc93 = loc("CWE401_Memory_Leak__strdup_char_13.c":84:9)
#loc94 = loc("CWE401_Memory_Leak__strdup_char_13.c":90:9)
#loc95 = loc("CWE401_Memory_Leak__strdup_char_13.c":85:13)
#loc96 = loc("CWE401_Memory_Leak__strdup_char_13.c":85:31)
#loc97 = loc("CWE401_Memory_Leak__strdup_char_13.c":87:20)
#loc98 = loc("CWE401_Memory_Leak__strdup_char_13.c":87:27)
#loc99 = loc("CWE401_Memory_Leak__strdup_char_13.c":87:13)
#loc100 = loc("CWE401_Memory_Leak__strdup_char_13.c":87:35)
#loc101 = loc("CWE401_Memory_Leak__strdup_char_13.c":89:23)
#loc102 = loc("CWE401_Memory_Leak__strdup_char_13.c":89:13)
#loc103 = loc("CWE401_Memory_Leak__strdup_char_13.c":92:5)
#loc104 = loc("CWE401_Memory_Leak__strdup_char_13.c":96:5)
#loc105 = loc("CWE401_Memory_Leak__strdup_char_13.c":92:8)
#loc106 = loc("CWE401_Memory_Leak__strdup_char_13.c":92:27)
#loc107 = loc("CWE401_Memory_Leak__strdup_char_13.c":92:25)
#loc108 = loc("CWE401_Memory_Leak__strdup_char_13.c":93:5)
#loc109 = loc("CWE401_Memory_Leak__strdup_char_13.c":95:9)
#loc110 = loc("CWE401_Memory_Leak__strdup_char_13.c":95:14)
#loc111 = loc("/usr/include/string.h":141:1)
#loc112 = loc("/usr/include/string.h":142:14)
#loc113 = loc("CWE401_Memory_Leak__strdup_char_13.c":114:22)
#loc114 = loc("CWE401_Memory_Leak__strdup_char_13.c":100:1)
#loc115 = loc("CWE401_Memory_Leak__strdup_char_13.c":123:1)
#loc116 = loc("CWE401_Memory_Leak__strdup_char_13.c":102:5)
#loc117 = loc("CWE401_Memory_Leak__strdup_char_13.c":102:12)
#loc118 = loc("CWE401_Memory_Leak__strdup_char_13.c":103:12)
#loc119 = loc("CWE401_Memory_Leak__strdup_char_13.c":103:5)
#loc120 = loc("CWE401_Memory_Leak__strdup_char_13.c":104:5)
#loc121 = loc("CWE401_Memory_Leak__strdup_char_13.c":116:5)
#loc122 = loc("CWE401_Memory_Leak__strdup_char_13.c":104:8)
#loc123 = loc("CWE401_Memory_Leak__strdup_char_13.c":104:27)
#loc124 = loc("CWE401_Memory_Leak__strdup_char_13.c":104:25)
#loc125 = loc("CWE401_Memory_Leak__strdup_char_13.c":105:5)
#loc126 = loc("CWE401_Memory_Leak__strdup_char_13.c":108:5)
#loc127 = loc("CWE401_Memory_Leak__strdup_char_13.c":110:5)
#loc128 = loc("CWE401_Memory_Leak__strdup_char_13.c":107:19)
#loc129 = loc("CWE401_Memory_Leak__strdup_char_13.c":107:9)
#loc130 = loc("CWE401_Memory_Leak__strdup_char_13.c":112:24)
#loc131 = loc("CWE401_Memory_Leak__strdup_char_13.c":112:9)
#loc132 = loc("CWE401_Memory_Leak__strdup_char_13.c":114:9)
#loc133 = loc("CWE401_Memory_Leak__strdup_char_13.c":114:16)
#loc134 = loc("CWE401_Memory_Leak__strdup_char_13.c":115:19)
#loc135 = loc("CWE401_Memory_Leak__strdup_char_13.c":115:9)
#loc136 = loc("CWE401_Memory_Leak__strdup_char_13.c":117:5)
#loc137 = loc("CWE401_Memory_Leak__strdup_char_13.c":122:5)
#loc138 = loc("CWE401_Memory_Leak__strdup_char_13.c":117:8)
#loc139 = loc("CWE401_Memory_Leak__strdup_char_13.c":117:27)
#loc140 = loc("CWE401_Memory_Leak__strdup_char_13.c":117:25)
#loc141 = loc("CWE401_Memory_Leak__strdup_char_13.c":118:5)
#loc142 = loc("CWE401_Memory_Leak__strdup_char_13.c":126:1)
#loc143 = loc("CWE401_Memory_Leak__strdup_char_13.c":144:1)
#loc144 = loc("CWE401_Memory_Leak__strdup_char_13.c":128:5)
#loc145 = loc("CWE401_Memory_Leak__strdup_char_13.c":128:12)
#loc146 = loc("CWE401_Memory_Leak__strdup_char_13.c":129:12)
#loc147 = loc("CWE401_Memory_Leak__strdup_char_13.c":129:5)
#loc148 = loc("CWE401_Memory_Leak__strdup_char_13.c":130:5)
#loc149 = loc("CWE401_Memory_Leak__strdup_char_13.c":137:5)
#loc150 = loc("CWE401_Memory_Leak__strdup_char_13.c":130:8)
#loc151 = loc("CWE401_Memory_Leak__strdup_char_13.c":130:27)
#loc152 = loc("CWE401_Memory_Leak__strdup_char_13.c":130:25)
#loc153 = loc("CWE401_Memory_Leak__strdup_char_13.c":131:5)
#loc154 = loc("CWE401_Memory_Leak__strdup_char_13.c":133:24)
#loc155 = loc("CWE401_Memory_Leak__strdup_char_13.c":133:9)
#loc156 = loc("CWE401_Memory_Leak__strdup_char_13.c":135:9)
#loc157 = loc("CWE401_Memory_Leak__strdup_char_13.c":135:16)
#loc158 = loc("CWE401_Memory_Leak__strdup_char_13.c":135:22)
#loc159 = loc("CWE401_Memory_Leak__strdup_char_13.c":136:19)
#loc160 = loc("CWE401_Memory_Leak__strdup_char_13.c":136:9)
#loc161 = loc("CWE401_Memory_Leak__strdup_char_13.c":138:5)
#loc162 = loc("CWE401_Memory_Leak__strdup_char_13.c":143:5)
#loc163 = loc("CWE401_Memory_Leak__strdup_char_13.c":138:8)
#loc164 = loc("CWE401_Memory_Leak__strdup_char_13.c":138:27)
#loc165 = loc("CWE401_Memory_Leak__strdup_char_13.c":138:25)
#loc166 = loc("CWE401_Memory_Leak__strdup_char_13.c":139:5)
#loc167 = loc(fused[#loc1, #loc2])
#loc168 = loc(fused[#loc3, #loc4])
#loc169 = loc(fused[#loc5, #loc6])
#loc170 = loc(fused[#loc7, #loc8])
#loc171 = loc(fused[#loc9, #loc10])
#loc172 = loc(fused[#loc12, #loc11])
#loc173 = loc(fused[#loc13, #loc14])
#loc174 = loc(fused[#loc15, #loc16])
#loc175 = loc(fused[#loc18, #loc14])
#loc176 = loc(fused[#loc19, #loc20])
#loc177 = loc(fused[#loc21, #loc22])
#loc178 = loc(fused[#loc25, #loc26])
#loc179 = loc(fused[#loc29, #loc30])
#loc180 = loc(fused[#loc31, #loc32])
#loc181 = loc(fused[#loc34, #loc30])
#loc182 = loc(fused[#loc35, #loc36])
#loc183 = loc(fused[#loc37, #loc38])
#loc184 = loc(fused[#loc39, #loc40])
#loc185 = loc(fused[#loc41, #loc42])
#loc186 = loc(fused[#loc43, #loc44])
#loc187 = loc(fused[#loc46, #loc47])
#loc188 = loc(fused[#loc48, #loc49])
#loc189 = loc(fused[#loc50, #loc51])
#loc190 = loc(fused[#loc53, #loc52])
#loc191 = loc(fused[#loc54, #loc55])
#loc192 = loc(fused[#loc56, #loc57])
#loc193 = loc(fused[#loc59, #loc55])
#loc194 = loc(fused[#loc60, #loc61])
#loc195 = loc(fused[#loc62, #loc63])
#loc196 = loc(fused[#loc66, #loc67])
#loc197 = loc(fused[#loc70, #loc71])
#loc198 = loc(fused[#loc72, #loc73])
#loc199 = loc(fused[#loc75, #loc76, #loc77, #loc71])
#loc200 = loc(fused[#loc81, #loc82])
#loc201 = loc(fused[#loc83, #loc84])
#loc202 = loc(fused[#loc86, #loc85])
#loc203 = loc(fused[#loc87, #loc88])
#loc204 = loc(fused[#loc89, #loc90])
#loc205 = loc(fused[#loc92, #loc88])
#loc206 = loc(fused[#loc93, #loc94])
#loc207 = loc(fused[#loc95, #loc96])
#loc208 = loc(fused[#loc99, #loc100])
#loc209 = loc(fused[#loc103, #loc104])
#loc210 = loc(fused[#loc105, #loc106])
#loc211 = loc(fused[#loc108, #loc104])
#loc212 = loc(fused[#loc111, #loc112])
#loc213 = loc(fused[#loc114, #loc115])
#loc214 = loc(fused[#loc116, #loc117])
#loc215 = loc(fused[#loc119, #loc118])
#loc216 = loc(fused[#loc120, #loc121])
#loc217 = loc(fused[#loc122, #loc123])
#loc218 = loc(fused[#loc125, #loc126, #loc127, #loc121])
#loc219 = loc(fused[#loc131, #loc130])
#loc220 = loc(fused[#loc136, #loc137])
#loc221 = loc(fused[#loc138, #loc139])
#loc222 = loc(fused[#loc141, #loc137])
#loc223 = loc(fused[#loc142, #loc143])
#loc224 = loc(fused[#loc144, #loc145])
#loc225 = loc(fused[#loc147, #loc146])
#loc226 = loc(fused[#loc148, #loc149])
#loc227 = loc(fused[#loc150, #loc151])
#loc228 = loc(fused[#loc153, #loc149])
#loc229 = loc(fused[#loc155, #loc154])
#loc230 = loc(fused[#loc161, #loc162])
#loc231 = loc(fused[#loc163, #loc164])
#loc232 = loc(fused[#loc166, #loc162])
