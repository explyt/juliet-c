!s32i = !cir.int<s, 32>
!s8i = !cir.int<s, 8>
#fn_attr = #cir<extra({nothrow = #cir.nothrow})>
#fn_attr1 = #cir<extra({inline = #cir.inline<no>, nothrow = #cir.nothrow, optnone = #cir.optnone, uwtable = #cir.uwtable<async>})>
module @"/workspaces/juliet-c/testcases/CWE391_Unchecked_Error_Condition/CWE391_Unchecked_Error_Condition__sqrt_11.c" attributes {cir.lang = #cir.lang<c>, cir.sob = #cir.signed_overflow_behavior<undefined>, cir.triple = "x86_64-unknown-linux-gnu", cir.type_size_info = #cir.type_size_info<char = 8, int = 32, size_t = 64>, cir.uwtable = #cir.uwtable<async>, dlti.dl_spec = #dlti.dl_spec<!llvm.ptr = dense<64> : vector<4xi64>, i1 = dense<8> : vector<2xi64>, f80 = dense<128> : vector<2xi64>, i128 = dense<128> : vector<2xi64>, !llvm.ptr<272> = dense<64> : vector<4xi64>, i64 = dense<64> : vector<2xi64>, !llvm.ptr<270> = dense<32> : vector<4xi64>, f128 = dense<128> : vector<2xi64>, !llvm.ptr<271> = dense<32> : vector<4xi64>, f64 = dense<64> : vector<2xi64>, f16 = dense<16> : vector<2xi64>, i16 = dense<16> : vector<2xi64>, i32 = dense<32> : vector<2xi64>, i8 = dense<8> : vector<2xi64>, "dlti.stack_alignment" = 128 : i64, "dlti.endianness" = "little", "dlti.mangling_mode" = "e">} {
  cir.func no_proto private @globalReturnsTrue(...) -> !s32i loc(#loc100)
  cir.func private @sqrt(!cir.double) -> !cir.double extra(#fn_attr) loc(#loc3)
  cir.func private @printDoubleLine(!cir.double) loc(#loc101)
  cir.func no_proto @CWE391_Unchecked_Error_Condition__sqrt_11_bad() extra(#fn_attr1) {
    cir.scope {
      %0 = cir.get_global @globalReturnsTrue : !cir.ptr<!cir.func<(...) -> !s32i>> loc(#loc104)
      %1 = cir.cast(bitcast, %0 : !cir.ptr<!cir.func<(...) -> !s32i>>), !cir.ptr<!cir.func<() -> !s32i>> loc(#loc104)
      %2 = cir.call %1() : (!cir.ptr<!cir.func<() -> !s32i>>) -> !s32i loc(#loc10)
      %3 = cir.cast(int_to_bool, %2 : !s32i), !cir.bool loc(#loc10)
      cir.if %3 {
        cir.scope {
          %4 = cir.alloca !cir.double, !cir.ptr<!cir.double>, ["doubleNumber"] {alignment = 8 : i64} loc(#loc107)
          %5 = cir.get_global @sqrt : !cir.ptr<!cir.func<(!cir.double) -> !cir.double>> loc(#loc17)
          %6 = cir.const #cir.int<1> : !s32i loc(#loc18)
          %7 = cir.unary(minus, %6) nsw : !s32i, !s32i loc(#loc19)
          %8 = cir.cast(int_to_float, %7 : !s32i), !cir.double loc(#loc19)
          %9 = cir.call @sqrt(%8) : (!cir.double) -> !cir.double extra(#fn_attr) loc(#loc17)
          cir.store %9, %4 : !cir.double, !cir.ptr<!cir.double> loc(#loc108)
          %10 = cir.load %4 : !cir.ptr<!cir.double>, !cir.double loc(#loc22)
          cir.call @printDoubleLine(%10) : (!cir.double) -> () loc(#loc23)
        } loc(#loc106)
      } loc(#loc105)
    } loc(#loc103)
    cir.return loc(#loc7)
  } loc(#loc102)
  cir.func no_proto @CWE391_Unchecked_Error_Condition__sqrt_11_good() extra(#fn_attr1) {
    %0 = cir.get_global @good1 : !cir.ptr<!cir.func<()>> loc(#loc110)
    cir.call %0() : (!cir.ptr<!cir.func<()>>) -> () loc(#loc26)
    %1 = cir.get_global @good2 : !cir.ptr<!cir.func<()>> loc(#loc111)
    cir.call %1() : (!cir.ptr<!cir.func<()>>) -> () loc(#loc28)
    cir.return loc(#loc25)
  } loc(#loc109)
  cir.func no_proto private @globalReturnsFalse(...) -> !s32i loc(#loc112)
  cir.func private @printLine(!cir.ptr<!s8i>) loc(#loc113)
  cir.global "private" constant cir_private dsolocal @".str" = #cir.const_array<"Benign, fixed string\00" : !cir.array<!s8i x 21>> : !cir.array<!s8i x 21> {alignment = 1 : i64} loc(#loc34)
  cir.func private @__errno_location() -> !cir.ptr<!s32i> extra(#fn_attr) loc(#loc114)
  cir.global "private" constant cir_private dsolocal @".str.1" = #cir.const_array<"sqrt() failed\00" : !cir.array<!s8i x 14>> : !cir.array<!s8i x 14> {alignment = 1 : i64} loc(#loc37)
  cir.func private @exit(!s32i) extra(#fn_attr) loc(#loc115)
  cir.func no_proto internal private @good1() extra(#fn_attr1) {
    cir.scope {
      %0 = cir.get_global @globalReturnsFalse : !cir.ptr<!cir.func<(...) -> !s32i>> loc(#loc118)
      %1 = cir.cast(bitcast, %0 : !cir.ptr<!cir.func<(...) -> !s32i>>), !cir.ptr<!cir.func<() -> !s32i>> loc(#loc118)
      %2 = cir.call %1() : (!cir.ptr<!cir.func<() -> !s32i>>) -> !s32i loc(#loc44)
      %3 = cir.cast(int_to_bool, %2 : !s32i), !cir.bool loc(#loc44)
      cir.if %3 {
        %4 = cir.get_global @".str" : !cir.ptr<!cir.array<!s8i x 21>> loc(#loc34)
        %5 = cir.cast(array_to_ptrdecay, %4 : !cir.ptr<!cir.array<!s8i x 21>>), !cir.ptr<!s8i> loc(#loc34)
        cir.call @printLine(%5) : (!cir.ptr<!s8i>) -> () loc(#loc49)
      } else {
        cir.scope {
          %4 = cir.alloca !cir.double, !cir.ptr<!cir.double>, ["doubleNumber"] {alignment = 8 : i64} loc(#loc121)
          %5 = cir.const #cir.int<0> : !s32i loc(#loc54)
          %6 = cir.call @__errno_location() : () -> !cir.ptr<!s32i> side_effect(const) extra(#fn_attr) loc(#loc55)
          cir.store %5, %6 : !s32i, !cir.ptr<!s32i> loc(#loc122)
          %7 = cir.get_global @sqrt : !cir.ptr<!cir.func<(!cir.double) -> !cir.double>> loc(#loc56)
          %8 = cir.const #cir.int<1> : !s32i loc(#loc57)
          %9 = cir.unary(minus, %8) nsw : !s32i, !s32i loc(#loc58)
          %10 = cir.cast(int_to_float, %9 : !s32i), !cir.double loc(#loc58)
          %11 = cir.call @sqrt(%10) : (!cir.double) -> !cir.double extra(#fn_attr) loc(#loc56)
          cir.store %11, %4 : !cir.double, !cir.ptr<!cir.double> loc(#loc123)
          cir.scope {
            %13 = cir.call @__errno_location() : () -> !cir.ptr<!s32i> side_effect(const) extra(#fn_attr) loc(#loc63)
            %14 = cir.load %13 : !cir.ptr<!s32i>, !s32i loc(#loc63)
            %15 = cir.const #cir.int<33> : !s32i loc(#loc64)
            %16 = cir.cmp(eq, %14, %15) : !s32i, !cir.bool loc(#loc125)
            cir.if %16 {
              %17 = cir.get_global @".str.1" : !cir.ptr<!cir.array<!s8i x 14>> loc(#loc37)
              %18 = cir.cast(array_to_ptrdecay, %17 : !cir.ptr<!cir.array<!s8i x 14>>), !cir.ptr<!s8i> loc(#loc37)
              cir.call @printLine(%18) : (!cir.ptr<!s8i>) -> () loc(#loc66)
              %19 = cir.get_global @exit : !cir.ptr<!cir.func<(!s32i)>> loc(#loc67)
              %20 = cir.const #cir.int<1> : !s32i loc(#loc68)
              cir.call @exit(%20) : (!s32i) -> () extra(#fn_attr) loc(#loc67)
            } loc(#loc126)
          } loc(#loc124)
          %12 = cir.load %4 : !cir.ptr<!cir.double>, !cir.double loc(#loc69)
          cir.call @printDoubleLine(%12) : (!cir.double) -> () loc(#loc70)
        } loc(#loc120)
      } loc(#loc119)
    } loc(#loc117)
    cir.return loc(#loc41)
  } loc(#loc116)
  cir.func no_proto internal private @good2() extra(#fn_attr1) {
    cir.scope {
      %0 = cir.get_global @globalReturnsTrue : !cir.ptr<!cir.func<(...) -> !s32i>> loc(#loc129)
      %1 = cir.cast(bitcast, %0 : !cir.ptr<!cir.func<(...) -> !s32i>>), !cir.ptr<!cir.func<() -> !s32i>> loc(#loc129)
      %2 = cir.call %1() : (!cir.ptr<!cir.func<() -> !s32i>>) -> !s32i loc(#loc75)
      %3 = cir.cast(int_to_bool, %2 : !s32i), !cir.bool loc(#loc75)
      cir.if %3 {
        cir.scope {
          %4 = cir.alloca !cir.double, !cir.ptr<!cir.double>, ["doubleNumber"] {alignment = 8 : i64} loc(#loc132)
          %5 = cir.const #cir.int<0> : !s32i loc(#loc82)
          %6 = cir.call @__errno_location() : () -> !cir.ptr<!s32i> side_effect(const) extra(#fn_attr) loc(#loc83)
          cir.store %5, %6 : !s32i, !cir.ptr<!s32i> loc(#loc133)
          %7 = cir.get_global @sqrt : !cir.ptr<!cir.func<(!cir.double) -> !cir.double>> loc(#loc84)
          %8 = cir.const #cir.int<1> : !s32i loc(#loc85)
          %9 = cir.unary(minus, %8) nsw : !s32i, !s32i loc(#loc86)
          %10 = cir.cast(int_to_float, %9 : !s32i), !cir.double loc(#loc86)
          %11 = cir.call @sqrt(%10) : (!cir.double) -> !cir.double extra(#fn_attr) loc(#loc84)
          cir.store %11, %4 : !cir.double, !cir.ptr<!cir.double> loc(#loc134)
          cir.scope {
            %13 = cir.call @__errno_location() : () -> !cir.ptr<!s32i> side_effect(const) extra(#fn_attr) loc(#loc91)
            %14 = cir.load %13 : !cir.ptr<!s32i>, !s32i loc(#loc91)
            %15 = cir.const #cir.int<33> : !s32i loc(#loc92)
            %16 = cir.cmp(eq, %14, %15) : !s32i, !cir.bool loc(#loc136)
            cir.if %16 {
              %17 = cir.get_global @".str.1" : !cir.ptr<!cir.array<!s8i x 14>> loc(#loc94)
              %18 = cir.cast(array_to_ptrdecay, %17 : !cir.ptr<!cir.array<!s8i x 14>>), !cir.ptr<!s8i> loc(#loc94)
              cir.call @printLine(%18) : (!cir.ptr<!s8i>) -> () loc(#loc95)
              %19 = cir.get_global @exit : !cir.ptr<!cir.func<(!s32i)>> loc(#loc96)
              %20 = cir.const #cir.int<1> : !s32i loc(#loc97)
              cir.call @exit(%20) : (!s32i) -> () extra(#fn_attr) loc(#loc96)
            } loc(#loc137)
          } loc(#loc135)
          %12 = cir.load %4 : !cir.ptr<!cir.double>, !cir.double loc(#loc98)
          cir.call @printDoubleLine(%12) : (!cir.double) -> () loc(#loc99)
        } loc(#loc131)
      } loc(#loc130)
    } loc(#loc128)
    cir.return loc(#loc72)
  } loc(#loc127)
} loc(#loc)
#loc = loc("/workspaces/juliet-c/testcases/CWE391_Unchecked_Error_Condition/CWE391_Unchecked_Error_Condition__sqrt_11.c":0:0)
#loc1 = loc("../../testcasesupport/std_testcase_io.h":48:1)
#loc2 = loc("../../testcasesupport/std_testcase_io.h":48:23)
#loc3 = loc("/usr/include/x86_64-linux-gnu/bits/mathcalls.h":143:1)
#loc4 = loc("../../testcasesupport/std_testcase_io.h":38:1)
#loc5 = loc("../../testcasesupport/std_testcase_io.h":38:41)
#loc6 = loc("CWE391_Unchecked_Error_Condition__sqrt_11.c":24:1)
#loc7 = loc("CWE391_Unchecked_Error_Condition__sqrt_11.c":35:1)
#loc8 = loc("CWE391_Unchecked_Error_Condition__sqrt_11.c":26:5)
#loc9 = loc("CWE391_Unchecked_Error_Condition__sqrt_11.c":34:5)
#loc10 = loc("CWE391_Unchecked_Error_Condition__sqrt_11.c":26:8)
#loc11 = loc("CWE391_Unchecked_Error_Condition__sqrt_11.c":26:26)
#loc12 = loc("CWE391_Unchecked_Error_Condition__sqrt_11.c":27:5)
#loc13 = loc("CWE391_Unchecked_Error_Condition__sqrt_11.c":28:9)
#loc14 = loc("CWE391_Unchecked_Error_Condition__sqrt_11.c":33:9)
#loc15 = loc("CWE391_Unchecked_Error_Condition__sqrt_11.c":29:13)
#loc16 = loc("CWE391_Unchecked_Error_Condition__sqrt_11.c":29:20)
#loc17 = loc("CWE391_Unchecked_Error_Condition__sqrt_11.c":30:36)
#loc18 = loc("CWE391_Unchecked_Error_Condition__sqrt_11.c":30:50)
#loc19 = loc("CWE391_Unchecked_Error_Condition__sqrt_11.c":30:49)
#loc20 = loc("CWE391_Unchecked_Error_Condition__sqrt_11.c":30:13)
#loc21 = loc("CWE391_Unchecked_Error_Condition__sqrt_11.c":30:51)
#loc22 = loc("CWE391_Unchecked_Error_Condition__sqrt_11.c":32:29)
#loc23 = loc("CWE391_Unchecked_Error_Condition__sqrt_11.c":32:13)
#loc24 = loc("CWE391_Unchecked_Error_Condition__sqrt_11.c":86:1)
#loc25 = loc("CWE391_Unchecked_Error_Condition__sqrt_11.c":90:1)
#loc26 = loc("CWE391_Unchecked_Error_Condition__sqrt_11.c":88:5)
#loc27 = loc("CWE391_Unchecked_Error_Condition__sqrt_11.c":88:11)
#loc28 = loc("CWE391_Unchecked_Error_Condition__sqrt_11.c":89:5)
#loc29 = loc("CWE391_Unchecked_Error_Condition__sqrt_11.c":89:11)
#loc30 = loc("../../testcasesupport/std_testcase_io.h":50:1)
#loc31 = loc("../../testcasesupport/std_testcase_io.h":50:24)
#loc32 = loc("../../testcasesupport/std_testcase_io.h":14:1)
#loc33 = loc("../../testcasesupport/std_testcase_io.h":14:33)
#loc34 = loc("CWE391_Unchecked_Error_Condition__sqrt_11.c":47:19)
#loc35 = loc("/usr/include/errno.h":37:1)
#loc36 = loc("/usr/include/errno.h":37:45)
#loc37 = loc("CWE391_Unchecked_Error_Condition__sqrt_11.c":58:27)
#loc38 = loc("/usr/include/stdlib.h":756:1)
#loc39 = loc("/usr/include/stdlib.h":756:70)
#loc40 = loc("CWE391_Unchecked_Error_Condition__sqrt_11.c":42:1)
#loc41 = loc("CWE391_Unchecked_Error_Condition__sqrt_11.c":64:1)
#loc42 = loc("CWE391_Unchecked_Error_Condition__sqrt_11.c":44:5)
#loc43 = loc("CWE391_Unchecked_Error_Condition__sqrt_11.c":63:5)
#loc44 = loc("CWE391_Unchecked_Error_Condition__sqrt_11.c":44:8)
#loc45 = loc("CWE391_Unchecked_Error_Condition__sqrt_11.c":44:27)
#loc46 = loc("CWE391_Unchecked_Error_Condition__sqrt_11.c":45:5)
#loc47 = loc("CWE391_Unchecked_Error_Condition__sqrt_11.c":48:5)
#loc48 = loc("CWE391_Unchecked_Error_Condition__sqrt_11.c":50:5)
#loc49 = loc("CWE391_Unchecked_Error_Condition__sqrt_11.c":47:9)
#loc50 = loc("CWE391_Unchecked_Error_Condition__sqrt_11.c":51:9)
#loc51 = loc("CWE391_Unchecked_Error_Condition__sqrt_11.c":62:9)
#loc52 = loc("CWE391_Unchecked_Error_Condition__sqrt_11.c":52:13)
#loc53 = loc("CWE391_Unchecked_Error_Condition__sqrt_11.c":52:20)
#loc54 = loc("CWE391_Unchecked_Error_Condition__sqrt_11.c":53:21)
#loc55 = loc("CWE391_Unchecked_Error_Condition__sqrt_11.c":53:13)
#loc56 = loc("CWE391_Unchecked_Error_Condition__sqrt_11.c":54:36)
#loc57 = loc("CWE391_Unchecked_Error_Condition__sqrt_11.c":54:50)
#loc58 = loc("CWE391_Unchecked_Error_Condition__sqrt_11.c":54:49)
#loc59 = loc("CWE391_Unchecked_Error_Condition__sqrt_11.c":54:13)
#loc60 = loc("CWE391_Unchecked_Error_Condition__sqrt_11.c":54:51)
#loc61 = loc("CWE391_Unchecked_Error_Condition__sqrt_11.c":56:13)
#loc62 = loc("CWE391_Unchecked_Error_Condition__sqrt_11.c":60:13)
#loc63 = loc("CWE391_Unchecked_Error_Condition__sqrt_11.c":56:17)
#loc64 = loc("CWE391_Unchecked_Error_Condition__sqrt_11.c":56:26)
#loc65 = loc("CWE391_Unchecked_Error_Condition__sqrt_11.c":57:13)
#loc66 = loc("CWE391_Unchecked_Error_Condition__sqrt_11.c":58:17)
#loc67 = loc("CWE391_Unchecked_Error_Condition__sqrt_11.c":59:17)
#loc68 = loc("CWE391_Unchecked_Error_Condition__sqrt_11.c":59:22)
#loc69 = loc("CWE391_Unchecked_Error_Condition__sqrt_11.c":61:29)
#loc70 = loc("CWE391_Unchecked_Error_Condition__sqrt_11.c":61:13)
#loc71 = loc("CWE391_Unchecked_Error_Condition__sqrt_11.c":67:1)
#loc72 = loc("CWE391_Unchecked_Error_Condition__sqrt_11.c":84:1)
#loc73 = loc("CWE391_Unchecked_Error_Condition__sqrt_11.c":69:5)
#loc74 = loc("CWE391_Unchecked_Error_Condition__sqrt_11.c":83:5)
#loc75 = loc("CWE391_Unchecked_Error_Condition__sqrt_11.c":69:8)
#loc76 = loc("CWE391_Unchecked_Error_Condition__sqrt_11.c":69:26)
#loc77 = loc("CWE391_Unchecked_Error_Condition__sqrt_11.c":70:5)
#loc78 = loc("CWE391_Unchecked_Error_Condition__sqrt_11.c":71:9)
#loc79 = loc("CWE391_Unchecked_Error_Condition__sqrt_11.c":82:9)
#loc80 = loc("CWE391_Unchecked_Error_Condition__sqrt_11.c":72:13)
#loc81 = loc("CWE391_Unchecked_Error_Condition__sqrt_11.c":72:20)
#loc82 = loc("CWE391_Unchecked_Error_Condition__sqrt_11.c":73:21)
#loc83 = loc("CWE391_Unchecked_Error_Condition__sqrt_11.c":73:13)
#loc84 = loc("CWE391_Unchecked_Error_Condition__sqrt_11.c":74:36)
#loc85 = loc("CWE391_Unchecked_Error_Condition__sqrt_11.c":74:50)
#loc86 = loc("CWE391_Unchecked_Error_Condition__sqrt_11.c":74:49)
#loc87 = loc("CWE391_Unchecked_Error_Condition__sqrt_11.c":74:13)
#loc88 = loc("CWE391_Unchecked_Error_Condition__sqrt_11.c":74:51)
#loc89 = loc("CWE391_Unchecked_Error_Condition__sqrt_11.c":76:13)
#loc90 = loc("CWE391_Unchecked_Error_Condition__sqrt_11.c":80:13)
#loc91 = loc("CWE391_Unchecked_Error_Condition__sqrt_11.c":76:17)
#loc92 = loc("CWE391_Unchecked_Error_Condition__sqrt_11.c":76:26)
#loc93 = loc("CWE391_Unchecked_Error_Condition__sqrt_11.c":77:13)
#loc94 = loc("CWE391_Unchecked_Error_Condition__sqrt_11.c":78:27)
#loc95 = loc("CWE391_Unchecked_Error_Condition__sqrt_11.c":78:17)
#loc96 = loc("CWE391_Unchecked_Error_Condition__sqrt_11.c":79:17)
#loc97 = loc("CWE391_Unchecked_Error_Condition__sqrt_11.c":79:22)
#loc98 = loc("CWE391_Unchecked_Error_Condition__sqrt_11.c":81:29)
#loc99 = loc("CWE391_Unchecked_Error_Condition__sqrt_11.c":81:13)
#loc100 = loc(fused[#loc1, #loc2])
#loc101 = loc(fused[#loc4, #loc5])
#loc102 = loc(fused[#loc6, #loc7])
#loc103 = loc(fused[#loc8, #loc9])
#loc104 = loc(fused[#loc10, #loc11])
#loc105 = loc(fused[#loc12, #loc9])
#loc106 = loc(fused[#loc13, #loc14])
#loc107 = loc(fused[#loc15, #loc16])
#loc108 = loc(fused[#loc20, #loc21])
#loc109 = loc(fused[#loc24, #loc25])
#loc110 = loc(fused[#loc26, #loc27])
#loc111 = loc(fused[#loc28, #loc29])
#loc112 = loc(fused[#loc30, #loc31])
#loc113 = loc(fused[#loc32, #loc33])
#loc114 = loc(fused[#loc35, #loc36])
#loc115 = loc(fused[#loc38, #loc39])
#loc116 = loc(fused[#loc40, #loc41])
#loc117 = loc(fused[#loc42, #loc43])
#loc118 = loc(fused[#loc44, #loc45])
#loc119 = loc(fused[#loc46, #loc47, #loc48, #loc43])
#loc120 = loc(fused[#loc50, #loc51])
#loc121 = loc(fused[#loc52, #loc53])
#loc122 = loc(fused[#loc55, #loc54])
#loc123 = loc(fused[#loc59, #loc60])
#loc124 = loc(fused[#loc61, #loc62])
#loc125 = loc(fused[#loc63, #loc64])
#loc126 = loc(fused[#loc65, #loc62])
#loc127 = loc(fused[#loc71, #loc72])
#loc128 = loc(fused[#loc73, #loc74])
#loc129 = loc(fused[#loc75, #loc76])
#loc130 = loc(fused[#loc77, #loc74])
#loc131 = loc(fused[#loc78, #loc79])
#loc132 = loc(fused[#loc80, #loc81])
#loc133 = loc(fused[#loc83, #loc82])
#loc134 = loc(fused[#loc87, #loc88])
#loc135 = loc(fused[#loc89, #loc90])
#loc136 = loc(fused[#loc91, #loc92])
#loc137 = loc(fused[#loc93, #loc90])
