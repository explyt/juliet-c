!s32i = !cir.int<s, 32>
!s64i = !cir.int<s, 64>
!s8i = !cir.int<s, 8>
!u16i = !cir.int<u, 16>
!u32i = !cir.int<u, 32>
!u64i = !cir.int<u, 64>
!u8i = !cir.int<u, 8>
!void = !cir.void
#fn_attr = #cir<extra({nothrow = #cir.nothrow})>
#fn_attr1 = #cir<extra({inline = #cir.inline<no>, nothrow = #cir.nothrow, optnone = #cir.optnone})>
#loc202 = loc("CWE510_Trapdoor__hostname_based_logic_11.c":302:10)
#loc203 = loc("CWE510_Trapdoor__hostname_based_logic_11.c":302:14)
#loc204 = loc("CWE510_Trapdoor__hostname_based_logic_11.c":302:20)
#loc205 = loc("CWE510_Trapdoor__hostname_based_logic_11.c":302:32)
!ty_in_addr = !cir.struct<struct "in_addr" {!u32i} #cir.record.decl.ast>
#loc511 = loc(fused[#loc202, #loc203])
#loc512 = loc(fused[#loc204, #loc205])
!ty_sockaddr = !cir.struct<struct "sockaddr" {!u16i, !cir.array<!s8i x 14>} #cir.record.decl.ast>
!ty_sockaddr_in = !cir.struct<struct "sockaddr_in" {!u16i, !u16i, !ty_in_addr, !cir.array<!u8i x 8>}>
module @"/home/ladisgin/git_proj/juliet-c/testcases/CWE510_Trapdoor/CWE510_Trapdoor__hostname_based_logic_11.c" attributes {cir.lang = #cir.lang<c>, cir.sob = #cir.signed_overflow_behavior<undefined>, cir.triple = "x86_64-unknown-linux-gnu", dlti.dl_spec = #dlti.dl_spec<!llvm.ptr = dense<64> : vector<4xi64>, i1 = dense<8> : vector<2xi64>, i8 = dense<8> : vector<2xi64>, i16 = dense<16> : vector<2xi64>, i128 = dense<128> : vector<2xi64>, f80 = dense<128> : vector<2xi64>, !llvm.ptr<271> = dense<32> : vector<4xi64>, !llvm.ptr<270> = dense<32> : vector<4xi64>, f128 = dense<128> : vector<2xi64>, i64 = dense<64> : vector<2xi64>, !llvm.ptr<272> = dense<64> : vector<4xi64>, i32 = dense<32> : vector<2xi64>, f64 = dense<64> : vector<2xi64>, f16 = dense<16> : vector<2xi64>, "dlti.stack_alignment" = 128 : i64, "dlti.endianness" = "little">} {
  cir.func no_proto private @globalReturnsTrue(...) -> !s32i loc(#loc430)
  cir.func private @socket(!s32i, !s32i, !s32i) -> !s32i extra(#fn_attr) loc(#loc431)
  cir.func private @htons(!u16i) -> !u16i extra(#fn_attr) loc(#loc432)
  cir.func private @bind(!s32i, !cir.ptr<!ty_sockaddr>, !u32i) -> !s32i extra(#fn_attr) loc(#loc433)
  cir.func private @listen(!s32i, !s32i) -> !s32i extra(#fn_attr) loc(#loc434)
  cir.func private @accept(!s32i, !cir.ptr<!ty_sockaddr>, !cir.ptr<!u32i>) -> !s32i loc(#loc435)
  cir.func private @getsockname(!s32i, !cir.ptr<!ty_sockaddr>, !cir.ptr<!u32i>) -> !s32i extra(#fn_attr) loc(#loc436)
  cir.func private @getnameinfo(!cir.ptr<!ty_sockaddr>, !u32i, !cir.ptr<!s8i>, !u32i, !cir.ptr<!s8i>, !u32i, !s32i) -> !s32i loc(#loc437)
  cir.func private @strcmp(!cir.ptr<!s8i>, !cir.ptr<!s8i>) -> !s32i extra(#fn_attr) loc(#loc438)
  cir.global "private" constant cir_private dsolocal @".str" = #cir.const_array<"admin.google.com\00" : !cir.array<!s8i x 17>> : !cir.array<!s8i x 17> {alignment = 1 : i64} loc(#loc19)
  cir.func private @send(!s32i, !cir.ptr<!void>, !u64i, !s32i) -> !s64i loc(#loc439)
  cir.global "private" constant cir_private dsolocal @".str.1" = #cir.const_array<"Welcome, admin!\00" : !cir.array<!s8i x 16>> : !cir.array<!s8i x 16> {alignment = 1 : i64} loc(#loc22)
  cir.global "private" constant cir_private dsolocal @".str.2" = #cir.const_array<"Welcome!\00" : !cir.array<!s8i x 9>> : !cir.array<!s8i x 9> {alignment = 1 : i64} loc(#loc23)
  cir.func private @printLine(!cir.ptr<!s8i>) loc(#loc440)
  cir.global "private" constant cir_private dsolocal @".str.3" = #cir.const_array<"Send failed!\00" : !cir.array<!s8i x 13>> : !cir.array<!s8i x 13> {alignment = 1 : i64} loc(#loc26)
  cir.func private @close(!s32i) -> !s32i loc(#loc441)
  cir.func no_proto @CWE510_Trapdoor__hostname_based_logic_11_bad() extra(#fn_attr1) {
    cir.scope {
      %0 = cir.get_global @globalReturnsTrue : !cir.ptr<!cir.func<!s32i (...)>> loc(#loc444)
      %1 = cir.cast(bitcast, %0 : !cir.ptr<!cir.func<!s32i (...)>>), !cir.ptr<!cir.func<!s32i ()>> loc(#loc444)
      %2 = cir.call %1() : (!cir.ptr<!cir.func<!s32i ()>>) -> !s32i loc(#loc33)
      %3 = cir.cast(int_to_bool, %2 : !s32i), !cir.bool loc(#loc33)
      cir.if %3 {
        cir.scope {
          %4 = cir.alloca !ty_sockaddr_in, !cir.ptr<!ty_sockaddr_in>, ["service"] {alignment = 4 : i64} loc(#loc447)
          %5 = cir.alloca !ty_sockaddr_in, !cir.ptr<!ty_sockaddr_in>, ["acceptService"] {alignment = 4 : i64} loc(#loc448)
          %6 = cir.alloca !s32i, !cir.ptr<!s32i>, ["acceptServiceLen", init] {alignment = 4 : i64} loc(#loc449)
          %7 = cir.alloca !s32i, !cir.ptr<!s32i>, ["listenSocket", init] {alignment = 4 : i64} loc(#loc450)
          %8 = cir.alloca !s32i, !cir.ptr<!s32i>, ["acceptSocket", init] {alignment = 4 : i64} loc(#loc451)
          %9 = cir.alloca !cir.array<!s8i x 1025>, !cir.ptr<!cir.array<!s8i x 1025>>, ["hostname"] {alignment = 16 : i64} loc(#loc452)
          %10 = cir.alloca !cir.array<!s8i x 32>, !cir.ptr<!cir.array<!s8i x 32>>, ["servInfo"] {alignment = 16 : i64} loc(#loc453)
          %11 = cir.const #cir.int<16> : !u64i loc(#loc454)
          %12 = cir.cast(integral, %11 : !u64i), !s32i loc(#loc454)
          cir.store %12, %6 : !s32i, !cir.ptr<!s32i> loc(#loc449)
          %13 = cir.const #cir.int<1> : !s32i loc(#loc44)
          %14 = cir.unary(minus, %13) : !s32i, !s32i loc(#loc44)
          cir.store %14, %7 : !s32i, !cir.ptr<!s32i> loc(#loc450)
          %15 = cir.const #cir.int<1> : !s32i loc(#loc46)
          %16 = cir.unary(minus, %15) : !s32i, !s32i loc(#loc46)
          cir.store %16, %8 : !s32i, !cir.ptr<!s32i> loc(#loc451)
          cir.scope {
            cir.do {
              %17 = cir.const #cir.int<2> : !s32i loc(#loc54)
              %18 = cir.const #cir.int<1> : !s32i loc(#loc55)
              %19 = cir.const #cir.int<6> : !s32i loc(#loc56)
              %20 = cir.call @socket(%17, %18, %19) : (!s32i, !s32i, !s32i) -> !s32i extra(#fn_attr) loc(#loc57)
              cir.store %20, %7 : !s32i, !cir.ptr<!s32i> loc(#loc456)
              cir.scope {
                %39 = cir.load %7 : !cir.ptr<!s32i>, !s32i loc(#loc62)
                %40 = cir.const #cir.int<1> : !s32i loc(#loc63)
                %41 = cir.unary(minus, %40) : !s32i, !s32i loc(#loc63)
                %42 = cir.cmp(eq, %39, %41) : !s32i, !cir.bool loc(#loc458)
                cir.if %42 {
                  cir.break loc(#loc65)
                } loc(#loc459)
              } loc(#loc457)
              %21 = cir.cast(bitcast, %4 : !cir.ptr<!ty_sockaddr_in>), !cir.ptr<!void> loc(#loc460)
              %22 = cir.const #cir.int<0> : !s32i loc(#loc68)
              %23 = cir.const #cir.int<16> : !u64i loc(#loc461)
              cir.libc.memset %23 bytes from %21 set to %22 : !cir.ptr<!void>, !s32i, !u64i loc(#loc462)
              %24 = cir.const #cir.int<2> : !s32i loc(#loc73)
              %25 = cir.cast(integral, %24 : !s32i), !u16i loc(#loc73)
              %26 = cir.get_member %4[0] {name = "sin_family"} : !cir.ptr<!ty_sockaddr_in> -> !cir.ptr<!u16i> loc(#loc74)
              cir.store %25, %26 : !u16i, !cir.ptr<!u16i> loc(#loc463)
              %27 = cir.const #cir.int<0> : !s32i loc(#loc76)
              %28 = cir.cast(integral, %27 : !s32i), !u32i loc(#loc76)
              %29 = cir.get_member %4[2] {name = "sin_addr"} : !cir.ptr<!ty_sockaddr_in> -> !cir.ptr<!ty_in_addr> loc(#loc77)
              %30 = cir.get_member %29[0] {name = "s_addr"} : !cir.ptr<!ty_in_addr> -> !cir.ptr<!u32i> loc(#loc78)
              cir.store %28, %30 : !u32i, !cir.ptr<!u32i> loc(#loc464)
              %31 = cir.const #cir.int<20000> : !s32i loc(#loc80)
              %32 = cir.cast(integral, %31 : !s32i), !u16i loc(#loc80)
              %33 = cir.call @htons(%32) : (!u16i) -> !u16i extra(#fn_attr) loc(#loc81)
              %34 = cir.get_member %4[1] {name = "sin_port"} : !cir.ptr<!ty_sockaddr_in> -> !cir.ptr<!u16i> loc(#loc82)
              cir.store %33, %34 : !u16i, !cir.ptr<!u16i> loc(#loc465)
              cir.scope {
                %39 = cir.load %7 : !cir.ptr<!s32i>, !s32i loc(#loc87)
                %40 = cir.cast(bitcast, %4 : !cir.ptr<!ty_sockaddr_in>), !cir.ptr<!ty_sockaddr> loc(#loc467)
                %41 = cir.const #cir.int<16> : !u64i loc(#loc468)
                %42 = cir.cast(integral, %41 : !u64i), !u32i loc(#loc468)
                %43 = cir.call @bind(%39, %40, %42) : (!s32i, !cir.ptr<!ty_sockaddr>, !u32i) -> !s32i extra(#fn_attr) loc(#loc92)
                %44 = cir.const #cir.int<1> : !s32i loc(#loc93)
                %45 = cir.unary(minus, %44) : !s32i, !s32i loc(#loc93)
                %46 = cir.cmp(eq, %43, %45) : !s32i, !cir.bool loc(#loc469)
                cir.if %46 {
                  cir.break loc(#loc95)
                } loc(#loc470)
              } loc(#loc466)
              cir.scope {
                %39 = cir.load %7 : !cir.ptr<!s32i>, !s32i loc(#loc98)
                %40 = cir.const #cir.int<5> : !s32i loc(#loc99)
                %41 = cir.call @listen(%39, %40) : (!s32i, !s32i) -> !s32i extra(#fn_attr) loc(#loc100)
                %42 = cir.const #cir.int<1> : !s32i loc(#loc101)
                %43 = cir.unary(minus, %42) : !s32i, !s32i loc(#loc101)
                %44 = cir.cmp(eq, %41, %43) : !s32i, !cir.bool loc(#loc472)
                cir.if %44 {
                  cir.break loc(#loc103)
                } loc(#loc473)
              } loc(#loc471)
              %35 = cir.load %7 : !cir.ptr<!s32i>, !s32i loc(#loc104)
              %36 = cir.const #cir.ptr<null> : !cir.ptr<!ty_sockaddr> loc(#loc105)
              %37 = cir.const #cir.ptr<null> : !cir.ptr<!u32i> loc(#loc106)
              %38 = cir.call @accept(%35, %36, %37) : (!s32i, !cir.ptr<!ty_sockaddr>, !cir.ptr<!u32i>) -> !s32i loc(#loc107)
              cir.store %38, %8 : !s32i, !cir.ptr<!s32i> loc(#loc474)
              cir.scope {
                %39 = cir.load %8 : !cir.ptr<!s32i>, !s32i loc(#loc112)
                %40 = cir.const #cir.int<1> : !s32i loc(#loc113)
                %41 = cir.unary(minus, %40) : !s32i, !s32i loc(#loc113)
                %42 = cir.cmp(eq, %39, %41) : !s32i, !cir.bool loc(#loc476)
                cir.if %42 {
                  cir.break loc(#loc115)
                } loc(#loc477)
              } loc(#loc475)
              cir.scope {
                %39 = cir.load %8 : !cir.ptr<!s32i>, !s32i loc(#loc118)
                %40 = cir.cast(bitcast, %5 : !cir.ptr<!ty_sockaddr_in>), !cir.ptr<!ty_sockaddr> loc(#loc479)
                %41 = cir.cast(bitcast, %6 : !cir.ptr<!s32i>), !cir.ptr<!u32i> loc(#loc480)
                %42 = cir.call @getsockname(%39, %40, %41) : (!s32i, !cir.ptr<!ty_sockaddr>, !cir.ptr<!u32i>) -> !s32i extra(#fn_attr) loc(#loc123)
                %43 = cir.const #cir.int<1> : !s32i loc(#loc124)
                %44 = cir.unary(minus, %43) : !s32i, !s32i loc(#loc125)
                %45 = cir.cmp(eq, %42, %44) : !s32i, !cir.bool loc(#loc481)
                cir.if %45 {
                  cir.break loc(#loc127)
                } loc(#loc482)
              } loc(#loc478)
              cir.scope {
                %39 = cir.cast(bitcast, %5 : !cir.ptr<!ty_sockaddr_in>), !cir.ptr<!ty_sockaddr> loc(#loc484)
                %40 = cir.const #cir.int<16> : !u64i loc(#loc485)
                %41 = cir.cast(integral, %40 : !u64i), !u32i loc(#loc485)
                %42 = cir.cast(array_to_ptrdecay, %9 : !cir.ptr<!cir.array<!s8i x 1025>>), !cir.ptr<!s8i> loc(#loc134)
                %43 = cir.const #cir.int<1025> : !s32i loc(#loc135)
                %44 = cir.cast(integral, %43 : !s32i), !u32i loc(#loc135)
                %45 = cir.cast(array_to_ptrdecay, %10 : !cir.ptr<!cir.array<!s8i x 32>>), !cir.ptr<!s8i> loc(#loc136)
                %46 = cir.const #cir.int<32> : !s32i loc(#loc137)
                %47 = cir.cast(integral, %46 : !s32i), !u32i loc(#loc137)
                %48 = cir.const #cir.int<2> : !s32i loc(#loc138)
                %49 = cir.call @getnameinfo(%39, %41, %42, %44, %45, %47, %48) : (!cir.ptr<!ty_sockaddr>, !u32i, !cir.ptr<!s8i>, !u32i, !cir.ptr<!s8i>, !u32i, !s32i) -> !s32i loc(#loc139)
                %50 = cir.const #cir.int<0> : !s32i loc(#loc140)
                %51 = cir.cmp(ne, %49, %50) : !s32i, !cir.bool loc(#loc486)
                cir.if %51 {
                  cir.break loc(#loc142)
                } loc(#loc487)
              } loc(#loc483)
              cir.scope {
                %39 = cir.get_global @strcmp : !cir.ptr<!cir.func<!s32i (!cir.ptr<!s8i>, !cir.ptr<!s8i>)>> loc(#loc145)
                %40 = cir.get_global @".str" : !cir.ptr<!cir.array<!s8i x 17>> loc(#loc19)
                %41 = cir.cast(array_to_ptrdecay, %40 : !cir.ptr<!cir.array<!s8i x 17>>), !cir.ptr<!s8i> loc(#loc19)
                %42 = cir.cast(array_to_ptrdecay, %9 : !cir.ptr<!cir.array<!s8i x 1025>>), !cir.ptr<!s8i> loc(#loc146)
                %43 = cir.call @strcmp(%41, %42) : (!cir.ptr<!s8i>, !cir.ptr<!s8i>) -> !s32i extra(#fn_attr) loc(#loc145)
                %44 = cir.const #cir.int<0> : !s32i loc(#loc147)
                %45 = cir.cmp(eq, %43, %44) : !s32i, !cir.bool loc(#loc489)
                cir.if %45 {
                  cir.scope {
                    %46 = cir.load %8 : !cir.ptr<!s32i>, !s32i loc(#loc153)
                    %47 = cir.get_global @".str.1" : !cir.ptr<!cir.array<!s8i x 16>> loc(#loc22)
                    %48 = cir.cast(array_to_ptrdecay, %47 : !cir.ptr<!cir.array<!s8i x 16>>), !cir.ptr<!s8i> loc(#loc22)
                    %49 = cir.cast(bitcast, %48 : !cir.ptr<!s8i>), !cir.ptr<!void> loc(#loc22)
                    %50 = cir.const #cir.int<15> : !u64i loc(#loc492)
                    %51 = cir.const #cir.int<0> : !s32i loc(#loc156)
                    %52 = cir.call @send(%46, %49, %50, %51) : (!s32i, !cir.ptr<!void>, !u64i, !s32i) -> !s64i loc(#loc157)
                    %53 = cir.const #cir.int<1> : !s32i loc(#loc158)
                    %54 = cir.unary(minus, %53) : !s32i, !s32i loc(#loc158)
                    %55 = cir.cast(integral, %54 : !s32i), !s64i loc(#loc158)
                    %56 = cir.cmp(eq, %52, %55) : !s64i, !cir.bool loc(#loc493)
                    cir.if %56 {
                      cir.break loc(#loc160)
                    } loc(#loc494)
                  } loc(#loc491)
                } else {
                  cir.scope {
                    %46 = cir.load %8 : !cir.ptr<!s32i>, !s32i loc(#loc163)
                    %47 = cir.get_global @".str.2" : !cir.ptr<!cir.array<!s8i x 9>> loc(#loc23)
                    %48 = cir.cast(array_to_ptrdecay, %47 : !cir.ptr<!cir.array<!s8i x 9>>), !cir.ptr<!s8i> loc(#loc23)
                    %49 = cir.cast(bitcast, %48 : !cir.ptr<!s8i>), !cir.ptr<!void> loc(#loc23)
                    %50 = cir.const #cir.int<8> : !u64i loc(#loc496)
                    %51 = cir.const #cir.int<0> : !s32i loc(#loc166)
                    %52 = cir.call @send(%46, %49, %50, %51) : (!s32i, !cir.ptr<!void>, !u64i, !s32i) -> !s64i loc(#loc167)
                    %53 = cir.const #cir.int<1> : !s32i loc(#loc168)
                    %54 = cir.unary(minus, %53) : !s32i, !s32i loc(#loc168)
                    %55 = cir.cast(integral, %54 : !s32i), !s64i loc(#loc168)
                    %56 = cir.cmp(eq, %52, %55) : !s64i, !cir.bool loc(#loc497)
                    cir.if %56 {
                      %57 = cir.get_global @".str.3" : !cir.ptr<!cir.array<!s8i x 13>> loc(#loc26)
                      %58 = cir.cast(array_to_ptrdecay, %57 : !cir.ptr<!cir.array<!s8i x 13>>), !cir.ptr<!s8i> loc(#loc26)
                      cir.call @printLine(%58) : (!cir.ptr<!s8i>) -> () loc(#loc170)
                    } loc(#loc498)
                  } loc(#loc495)
                } loc(#loc490)
              } loc(#loc488)
              cir.yield loc(#loc53)
            } while {
              %17 = cir.const #cir.int<0> : !s32i loc(#loc171)
              %18 = cir.cast(int_to_bool, %17 : !s32i), !cir.bool loc(#loc171)
              cir.condition(%18) loc(#loc171)
            } loc(#loc455)
          } loc(#loc455)
          cir.scope {
            %17 = cir.load %7 : !cir.ptr<!s32i>, !s32i loc(#loc174)
            %18 = cir.const #cir.int<1> : !s32i loc(#loc175)
            %19 = cir.unary(minus, %18) : !s32i, !s32i loc(#loc175)
            %20 = cir.cmp(ne, %17, %19) : !s32i, !cir.bool loc(#loc500)
            cir.if %20 {
              %21 = cir.load %7 : !cir.ptr<!s32i>, !s32i loc(#loc177)
              %22 = cir.call @close(%21) : (!s32i) -> !s32i loc(#loc178)
            } loc(#loc501)
          } loc(#loc499)
          cir.scope {
            %17 = cir.load %8 : !cir.ptr<!s32i>, !s32i loc(#loc181)
            %18 = cir.const #cir.int<1> : !s32i loc(#loc182)
            %19 = cir.unary(minus, %18) : !s32i, !s32i loc(#loc182)
            %20 = cir.cmp(ne, %17, %19) : !s32i, !cir.bool loc(#loc503)
            cir.if %20 {
              %21 = cir.load %8 : !cir.ptr<!s32i>, !s32i loc(#loc184)
              %22 = cir.call @close(%21) : (!s32i) -> !s32i loc(#loc185)
            } loc(#loc504)
          } loc(#loc502)
        } loc(#loc446)
      } loc(#loc445)
    } loc(#loc443)
    cir.return loc(#loc30)
  } loc(#loc442)
  cir.func no_proto @CWE510_Trapdoor__hostname_based_logic_11_good() extra(#fn_attr1) {
    %0 = cir.get_global @good1 : !cir.ptr<!cir.func<!void ()>> loc(#loc506)
    cir.call %0() : (!cir.ptr<!cir.func<!void ()>>) -> () loc(#loc188)
    %1 = cir.get_global @good2 : !cir.ptr<!cir.func<!void ()>> loc(#loc507)
    cir.call %1() : (!cir.ptr<!cir.func<!void ()>>) -> () loc(#loc190)
    cir.return loc(#loc187)
  } loc(#loc505)
  cir.func private @srand(!u32i) extra(#fn_attr) loc(#loc508)
  cir.func private @time(!cir.ptr<!s64i>) -> !s64i extra(#fn_attr) loc(#loc509)
  cir.global "private" constant cir_private dsolocal @".str.4" = #cir.const_array<"Calling good()...\00" : !cir.array<!s8i x 18>> : !cir.array<!s8i x 18> {alignment = 1 : i64} loc(#loc196)
  cir.global "private" constant cir_private dsolocal @".str.5" = #cir.const_array<"Finished good()\00" : !cir.array<!s8i x 16>> : !cir.array<!s8i x 16> {alignment = 1 : i64} loc(#loc197)
  cir.global "private" constant cir_private dsolocal @".str.6" = #cir.const_array<"Calling bad()...\00" : !cir.array<!s8i x 17>> : !cir.array<!s8i x 17> {alignment = 1 : i64} loc(#loc198)
  cir.global "private" constant cir_private dsolocal @".str.7" = #cir.const_array<"Finished bad()\00" : !cir.array<!s8i x 15>> : !cir.array<!s8i x 15> {alignment = 1 : i64} loc(#loc199)
  cir.func @main(%arg0: !s32i loc(fused[#loc202, #loc203]), %arg1: !cir.ptr<!cir.ptr<!s8i>> loc(fused[#loc204, #loc205])) -> !s32i extra(#fn_attr1) {
    %0 = cir.alloca !s32i, !cir.ptr<!s32i>, ["argc", init] {alignment = 4 : i64} loc(#loc511)
    %1 = cir.alloca !cir.ptr<!cir.ptr<!s8i>>, !cir.ptr<!cir.ptr<!cir.ptr<!s8i>>>, ["argv", init] {alignment = 8 : i64} loc(#loc512)
    %2 = cir.alloca !s32i, !cir.ptr<!s32i>, ["__retval"] {alignment = 4 : i64} loc(#loc201)
    cir.store %arg0, %0 : !s32i, !cir.ptr<!s32i> loc(#loc206)
    cir.store %arg1, %1 : !cir.ptr<!cir.ptr<!s8i>>, !cir.ptr<!cir.ptr<!cir.ptr<!s8i>>> loc(#loc206)
    %3 = cir.const #cir.ptr<null> : !cir.ptr<!s64i> loc(#loc207)
    %4 = cir.call @time(%3) : (!cir.ptr<!s64i>) -> !s64i extra(#fn_attr) loc(#loc208)
    %5 = cir.cast(integral, %4 : !s64i), !u32i loc(#loc208)
    cir.call @srand(%5) : (!u32i) -> () extra(#fn_attr) loc(#loc209)
    %6 = cir.get_global @".str.4" : !cir.ptr<!cir.array<!s8i x 18>> loc(#loc196)
    %7 = cir.cast(array_to_ptrdecay, %6 : !cir.ptr<!cir.array<!s8i x 18>>), !cir.ptr<!s8i> loc(#loc196)
    cir.call @printLine(%7) : (!cir.ptr<!s8i>) -> () loc(#loc210)
    %8 = cir.get_global @CWE510_Trapdoor__hostname_based_logic_11_good : !cir.ptr<!cir.func<!void ()>> loc(#loc513)
    cir.call @CWE510_Trapdoor__hostname_based_logic_11_good() : () -> () loc(#loc211)
    %9 = cir.get_global @".str.5" : !cir.ptr<!cir.array<!s8i x 16>> loc(#loc197)
    %10 = cir.cast(array_to_ptrdecay, %9 : !cir.ptr<!cir.array<!s8i x 16>>), !cir.ptr<!s8i> loc(#loc197)
    cir.call @printLine(%10) : (!cir.ptr<!s8i>) -> () loc(#loc213)
    %11 = cir.get_global @".str.6" : !cir.ptr<!cir.array<!s8i x 17>> loc(#loc198)
    %12 = cir.cast(array_to_ptrdecay, %11 : !cir.ptr<!cir.array<!s8i x 17>>), !cir.ptr<!s8i> loc(#loc198)
    cir.call @printLine(%12) : (!cir.ptr<!s8i>) -> () loc(#loc214)
    %13 = cir.get_global @CWE510_Trapdoor__hostname_based_logic_11_bad : !cir.ptr<!cir.func<!void ()>> loc(#loc514)
    cir.call @CWE510_Trapdoor__hostname_based_logic_11_bad() : () -> () loc(#loc215)
    %14 = cir.get_global @".str.7" : !cir.ptr<!cir.array<!s8i x 15>> loc(#loc199)
    %15 = cir.cast(array_to_ptrdecay, %14 : !cir.ptr<!cir.array<!s8i x 15>>), !cir.ptr<!s8i> loc(#loc199)
    cir.call @printLine(%15) : (!cir.ptr<!s8i>) -> () loc(#loc217)
    %16 = cir.const #cir.int<0> : !s32i loc(#loc218)
    cir.store %16, %2 : !s32i, !cir.ptr<!s32i> loc(#loc515)
    %17 = cir.load %2 : !cir.ptr<!s32i>, !s32i loc(#loc515)
    cir.return %17 : !s32i loc(#loc515)
  } loc(#loc510)
  cir.func no_proto private @globalReturnsFalse(...) -> !s32i loc(#loc516)
  cir.global "private" constant cir_private dsolocal @".str.8" = #cir.const_array<"Benign, fixed string\00" : !cir.array<!s8i x 21>> : !cir.array<!s8i x 21> {alignment = 1 : i64} loc(#loc222)
  cir.func no_proto internal private @good1() extra(#fn_attr1) {
    cir.scope {
      %0 = cir.get_global @globalReturnsFalse : !cir.ptr<!cir.func<!s32i (...)>> loc(#loc519)
      %1 = cir.cast(bitcast, %0 : !cir.ptr<!cir.func<!s32i (...)>>), !cir.ptr<!cir.func<!s32i ()>> loc(#loc519)
      %2 = cir.call %1() : (!cir.ptr<!cir.func<!s32i ()>>) -> !s32i loc(#loc227)
      %3 = cir.cast(int_to_bool, %2 : !s32i), !cir.bool loc(#loc227)
      cir.if %3 {
        %4 = cir.get_global @".str.8" : !cir.ptr<!cir.array<!s8i x 21>> loc(#loc222)
        %5 = cir.cast(array_to_ptrdecay, %4 : !cir.ptr<!cir.array<!s8i x 21>>), !cir.ptr<!s8i> loc(#loc222)
        cir.call @printLine(%5) : (!cir.ptr<!s8i>) -> () loc(#loc232)
      } else {
        cir.scope {
          %4 = cir.alloca !ty_sockaddr_in, !cir.ptr<!ty_sockaddr_in>, ["service"] {alignment = 4 : i64} loc(#loc522)
          %5 = cir.alloca !s32i, !cir.ptr<!s32i>, ["listenSocket", init] {alignment = 4 : i64} loc(#loc523)
          %6 = cir.alloca !s32i, !cir.ptr<!s32i>, ["acceptSocket", init] {alignment = 4 : i64} loc(#loc524)
          %7 = cir.const #cir.int<1> : !s32i loc(#loc238)
          %8 = cir.unary(minus, %7) : !s32i, !s32i loc(#loc238)
          cir.store %8, %5 : !s32i, !cir.ptr<!s32i> loc(#loc523)
          %9 = cir.const #cir.int<1> : !s32i loc(#loc240)
          %10 = cir.unary(minus, %9) : !s32i, !s32i loc(#loc240)
          cir.store %10, %6 : !s32i, !cir.ptr<!s32i> loc(#loc524)
          cir.scope {
            cir.do {
              %11 = cir.const #cir.int<2> : !s32i loc(#loc243)
              %12 = cir.const #cir.int<1> : !s32i loc(#loc244)
              %13 = cir.const #cir.int<6> : !s32i loc(#loc245)
              %14 = cir.call @socket(%11, %12, %13) : (!s32i, !s32i, !s32i) -> !s32i extra(#fn_attr) loc(#loc246)
              cir.store %14, %5 : !s32i, !cir.ptr<!s32i> loc(#loc526)
              cir.scope {
                %33 = cir.load %5 : !cir.ptr<!s32i>, !s32i loc(#loc251)
                %34 = cir.const #cir.int<1> : !s32i loc(#loc252)
                %35 = cir.unary(minus, %34) : !s32i, !s32i loc(#loc252)
                %36 = cir.cmp(eq, %33, %35) : !s32i, !cir.bool loc(#loc528)
                cir.if %36 {
                  cir.break loc(#loc254)
                } loc(#loc529)
              } loc(#loc527)
              %15 = cir.cast(bitcast, %4 : !cir.ptr<!ty_sockaddr_in>), !cir.ptr<!void> loc(#loc530)
              %16 = cir.const #cir.int<0> : !s32i loc(#loc257)
              %17 = cir.const #cir.int<16> : !u64i loc(#loc531)
              cir.libc.memset %17 bytes from %15 set to %16 : !cir.ptr<!void>, !s32i, !u64i loc(#loc532)
              %18 = cir.const #cir.int<2> : !s32i loc(#loc262)
              %19 = cir.cast(integral, %18 : !s32i), !u16i loc(#loc262)
              %20 = cir.get_member %4[0] {name = "sin_family"} : !cir.ptr<!ty_sockaddr_in> -> !cir.ptr<!u16i> loc(#loc74)
              cir.store %19, %20 : !u16i, !cir.ptr<!u16i> loc(#loc533)
              %21 = cir.const #cir.int<0> : !s32i loc(#loc264)
              %22 = cir.cast(integral, %21 : !s32i), !u32i loc(#loc264)
              %23 = cir.get_member %4[2] {name = "sin_addr"} : !cir.ptr<!ty_sockaddr_in> -> !cir.ptr<!ty_in_addr> loc(#loc77)
              %24 = cir.get_member %23[0] {name = "s_addr"} : !cir.ptr<!ty_in_addr> -> !cir.ptr<!u32i> loc(#loc78)
              cir.store %22, %24 : !u32i, !cir.ptr<!u32i> loc(#loc534)
              %25 = cir.const #cir.int<20000> : !s32i loc(#loc266)
              %26 = cir.cast(integral, %25 : !s32i), !u16i loc(#loc266)
              %27 = cir.call @htons(%26) : (!u16i) -> !u16i extra(#fn_attr) loc(#loc267)
              %28 = cir.get_member %4[1] {name = "sin_port"} : !cir.ptr<!ty_sockaddr_in> -> !cir.ptr<!u16i> loc(#loc82)
              cir.store %27, %28 : !u16i, !cir.ptr<!u16i> loc(#loc535)
              cir.scope {
                %33 = cir.load %5 : !cir.ptr<!s32i>, !s32i loc(#loc272)
                %34 = cir.cast(bitcast, %4 : !cir.ptr<!ty_sockaddr_in>), !cir.ptr<!ty_sockaddr> loc(#loc537)
                %35 = cir.const #cir.int<16> : !u64i loc(#loc538)
                %36 = cir.cast(integral, %35 : !u64i), !u32i loc(#loc538)
                %37 = cir.call @bind(%33, %34, %36) : (!s32i, !cir.ptr<!ty_sockaddr>, !u32i) -> !s32i extra(#fn_attr) loc(#loc277)
                %38 = cir.const #cir.int<1> : !s32i loc(#loc278)
                %39 = cir.unary(minus, %38) : !s32i, !s32i loc(#loc278)
                %40 = cir.cmp(eq, %37, %39) : !s32i, !cir.bool loc(#loc539)
                cir.if %40 {
                  cir.break loc(#loc280)
                } loc(#loc540)
              } loc(#loc536)
              cir.scope {
                %33 = cir.load %5 : !cir.ptr<!s32i>, !s32i loc(#loc283)
                %34 = cir.const #cir.int<5> : !s32i loc(#loc284)
                %35 = cir.call @listen(%33, %34) : (!s32i, !s32i) -> !s32i extra(#fn_attr) loc(#loc285)
                %36 = cir.const #cir.int<1> : !s32i loc(#loc286)
                %37 = cir.unary(minus, %36) : !s32i, !s32i loc(#loc286)
                %38 = cir.cmp(eq, %35, %37) : !s32i, !cir.bool loc(#loc542)
                cir.if %38 {
                  cir.break loc(#loc288)
                } loc(#loc543)
              } loc(#loc541)
              %29 = cir.load %5 : !cir.ptr<!s32i>, !s32i loc(#loc289)
              %30 = cir.const #cir.ptr<null> : !cir.ptr<!ty_sockaddr> loc(#loc290)
              %31 = cir.const #cir.ptr<null> : !cir.ptr<!u32i> loc(#loc291)
              %32 = cir.call @accept(%29, %30, %31) : (!s32i, !cir.ptr<!ty_sockaddr>, !cir.ptr<!u32i>) -> !s32i loc(#loc292)
              cir.store %32, %6 : !s32i, !cir.ptr<!s32i> loc(#loc544)
              cir.scope {
                %33 = cir.load %6 : !cir.ptr<!s32i>, !s32i loc(#loc297)
                %34 = cir.const #cir.int<1> : !s32i loc(#loc298)
                %35 = cir.unary(minus, %34) : !s32i, !s32i loc(#loc298)
                %36 = cir.cmp(eq, %33, %35) : !s32i, !cir.bool loc(#loc546)
                cir.if %36 {
                  cir.break loc(#loc300)
                } loc(#loc547)
              } loc(#loc545)
              cir.scope {
                %33 = cir.load %6 : !cir.ptr<!s32i>, !s32i loc(#loc303)
                %34 = cir.get_global @".str.2" : !cir.ptr<!cir.array<!s8i x 9>> loc(#loc304)
                %35 = cir.cast(array_to_ptrdecay, %34 : !cir.ptr<!cir.array<!s8i x 9>>), !cir.ptr<!s8i> loc(#loc304)
                %36 = cir.cast(bitcast, %35 : !cir.ptr<!s8i>), !cir.ptr<!void> loc(#loc304)
                %37 = cir.const #cir.int<8> : !u64i loc(#loc549)
                %38 = cir.const #cir.int<0> : !s32i loc(#loc307)
                %39 = cir.call @send(%33, %36, %37, %38) : (!s32i, !cir.ptr<!void>, !u64i, !s32i) -> !s64i loc(#loc308)
                %40 = cir.const #cir.int<1> : !s32i loc(#loc309)
                %41 = cir.unary(minus, %40) : !s32i, !s32i loc(#loc309)
                %42 = cir.cast(integral, %41 : !s32i), !s64i loc(#loc309)
                %43 = cir.cmp(eq, %39, %42) : !s64i, !cir.bool loc(#loc550)
                cir.if %43 {
                  %44 = cir.get_global @".str.3" : !cir.ptr<!cir.array<!s8i x 13>> loc(#loc311)
                  %45 = cir.cast(array_to_ptrdecay, %44 : !cir.ptr<!cir.array<!s8i x 13>>), !cir.ptr<!s8i> loc(#loc311)
                  cir.call @printLine(%45) : (!cir.ptr<!s8i>) -> () loc(#loc312)
                } loc(#loc551)
              } loc(#loc548)
              cir.yield loc(#loc242)
            } while {
              %11 = cir.const #cir.int<0> : !s32i loc(#loc313)
              %12 = cir.cast(int_to_bool, %11 : !s32i), !cir.bool loc(#loc313)
              cir.condition(%12) loc(#loc313)
            } loc(#loc525)
          } loc(#loc525)
          cir.scope {
            %11 = cir.load %5 : !cir.ptr<!s32i>, !s32i loc(#loc316)
            %12 = cir.const #cir.int<1> : !s32i loc(#loc317)
            %13 = cir.unary(minus, %12) : !s32i, !s32i loc(#loc317)
            %14 = cir.cmp(ne, %11, %13) : !s32i, !cir.bool loc(#loc553)
            cir.if %14 {
              %15 = cir.load %5 : !cir.ptr<!s32i>, !s32i loc(#loc319)
              %16 = cir.call @close(%15) : (!s32i) -> !s32i loc(#loc320)
            } loc(#loc554)
          } loc(#loc552)
          cir.scope {
            %11 = cir.load %6 : !cir.ptr<!s32i>, !s32i loc(#loc323)
            %12 = cir.const #cir.int<1> : !s32i loc(#loc324)
            %13 = cir.unary(minus, %12) : !s32i, !s32i loc(#loc324)
            %14 = cir.cmp(ne, %11, %13) : !s32i, !cir.bool loc(#loc556)
            cir.if %14 {
              %15 = cir.load %6 : !cir.ptr<!s32i>, !s32i loc(#loc326)
              %16 = cir.call @close(%15) : (!s32i) -> !s32i loc(#loc327)
            } loc(#loc557)
          } loc(#loc555)
        } loc(#loc521)
      } loc(#loc520)
    } loc(#loc518)
    cir.return loc(#loc224)
  } loc(#loc517)
  cir.func no_proto internal private @good2() extra(#fn_attr1) {
    cir.scope {
      %0 = cir.get_global @globalReturnsTrue : !cir.ptr<!cir.func<!s32i (...)>> loc(#loc560)
      %1 = cir.cast(bitcast, %0 : !cir.ptr<!cir.func<!s32i (...)>>), !cir.ptr<!cir.func<!s32i ()>> loc(#loc560)
      %2 = cir.call %1() : (!cir.ptr<!cir.func<!s32i ()>>) -> !s32i loc(#loc332)
      %3 = cir.cast(int_to_bool, %2 : !s32i), !cir.bool loc(#loc332)
      cir.if %3 {
        cir.scope {
          %4 = cir.alloca !ty_sockaddr_in, !cir.ptr<!ty_sockaddr_in>, ["service"] {alignment = 4 : i64} loc(#loc563)
          %5 = cir.alloca !s32i, !cir.ptr<!s32i>, ["listenSocket", init] {alignment = 4 : i64} loc(#loc564)
          %6 = cir.alloca !s32i, !cir.ptr<!s32i>, ["acceptSocket", init] {alignment = 4 : i64} loc(#loc565)
          %7 = cir.const #cir.int<1> : !s32i loc(#loc340)
          %8 = cir.unary(minus, %7) : !s32i, !s32i loc(#loc340)
          cir.store %8, %5 : !s32i, !cir.ptr<!s32i> loc(#loc564)
          %9 = cir.const #cir.int<1> : !s32i loc(#loc342)
          %10 = cir.unary(minus, %9) : !s32i, !s32i loc(#loc342)
          cir.store %10, %6 : !s32i, !cir.ptr<!s32i> loc(#loc565)
          cir.scope {
            cir.do {
              %11 = cir.const #cir.int<2> : !s32i loc(#loc345)
              %12 = cir.const #cir.int<1> : !s32i loc(#loc346)
              %13 = cir.const #cir.int<6> : !s32i loc(#loc347)
              %14 = cir.call @socket(%11, %12, %13) : (!s32i, !s32i, !s32i) -> !s32i extra(#fn_attr) loc(#loc348)
              cir.store %14, %5 : !s32i, !cir.ptr<!s32i> loc(#loc567)
              cir.scope {
                %33 = cir.load %5 : !cir.ptr<!s32i>, !s32i loc(#loc353)
                %34 = cir.const #cir.int<1> : !s32i loc(#loc354)
                %35 = cir.unary(minus, %34) : !s32i, !s32i loc(#loc354)
                %36 = cir.cmp(eq, %33, %35) : !s32i, !cir.bool loc(#loc569)
                cir.if %36 {
                  cir.break loc(#loc356)
                } loc(#loc570)
              } loc(#loc568)
              %15 = cir.cast(bitcast, %4 : !cir.ptr<!ty_sockaddr_in>), !cir.ptr<!void> loc(#loc571)
              %16 = cir.const #cir.int<0> : !s32i loc(#loc359)
              %17 = cir.const #cir.int<16> : !u64i loc(#loc572)
              cir.libc.memset %17 bytes from %15 set to %16 : !cir.ptr<!void>, !s32i, !u64i loc(#loc573)
              %18 = cir.const #cir.int<2> : !s32i loc(#loc364)
              %19 = cir.cast(integral, %18 : !s32i), !u16i loc(#loc364)
              %20 = cir.get_member %4[0] {name = "sin_family"} : !cir.ptr<!ty_sockaddr_in> -> !cir.ptr<!u16i> loc(#loc74)
              cir.store %19, %20 : !u16i, !cir.ptr<!u16i> loc(#loc574)
              %21 = cir.const #cir.int<0> : !s32i loc(#loc366)
              %22 = cir.cast(integral, %21 : !s32i), !u32i loc(#loc366)
              %23 = cir.get_member %4[2] {name = "sin_addr"} : !cir.ptr<!ty_sockaddr_in> -> !cir.ptr<!ty_in_addr> loc(#loc77)
              %24 = cir.get_member %23[0] {name = "s_addr"} : !cir.ptr<!ty_in_addr> -> !cir.ptr<!u32i> loc(#loc78)
              cir.store %22, %24 : !u32i, !cir.ptr<!u32i> loc(#loc575)
              %25 = cir.const #cir.int<20000> : !s32i loc(#loc368)
              %26 = cir.cast(integral, %25 : !s32i), !u16i loc(#loc368)
              %27 = cir.call @htons(%26) : (!u16i) -> !u16i extra(#fn_attr) loc(#loc369)
              %28 = cir.get_member %4[1] {name = "sin_port"} : !cir.ptr<!ty_sockaddr_in> -> !cir.ptr<!u16i> loc(#loc82)
              cir.store %27, %28 : !u16i, !cir.ptr<!u16i> loc(#loc576)
              cir.scope {
                %33 = cir.load %5 : !cir.ptr<!s32i>, !s32i loc(#loc374)
                %34 = cir.cast(bitcast, %4 : !cir.ptr<!ty_sockaddr_in>), !cir.ptr<!ty_sockaddr> loc(#loc578)
                %35 = cir.const #cir.int<16> : !u64i loc(#loc579)
                %36 = cir.cast(integral, %35 : !u64i), !u32i loc(#loc579)
                %37 = cir.call @bind(%33, %34, %36) : (!s32i, !cir.ptr<!ty_sockaddr>, !u32i) -> !s32i extra(#fn_attr) loc(#loc379)
                %38 = cir.const #cir.int<1> : !s32i loc(#loc380)
                %39 = cir.unary(minus, %38) : !s32i, !s32i loc(#loc380)
                %40 = cir.cmp(eq, %37, %39) : !s32i, !cir.bool loc(#loc580)
                cir.if %40 {
                  cir.break loc(#loc382)
                } loc(#loc581)
              } loc(#loc577)
              cir.scope {
                %33 = cir.load %5 : !cir.ptr<!s32i>, !s32i loc(#loc385)
                %34 = cir.const #cir.int<5> : !s32i loc(#loc386)
                %35 = cir.call @listen(%33, %34) : (!s32i, !s32i) -> !s32i extra(#fn_attr) loc(#loc387)
                %36 = cir.const #cir.int<1> : !s32i loc(#loc388)
                %37 = cir.unary(minus, %36) : !s32i, !s32i loc(#loc388)
                %38 = cir.cmp(eq, %35, %37) : !s32i, !cir.bool loc(#loc583)
                cir.if %38 {
                  cir.break loc(#loc390)
                } loc(#loc584)
              } loc(#loc582)
              %29 = cir.load %5 : !cir.ptr<!s32i>, !s32i loc(#loc391)
              %30 = cir.const #cir.ptr<null> : !cir.ptr<!ty_sockaddr> loc(#loc392)
              %31 = cir.const #cir.ptr<null> : !cir.ptr<!u32i> loc(#loc393)
              %32 = cir.call @accept(%29, %30, %31) : (!s32i, !cir.ptr<!ty_sockaddr>, !cir.ptr<!u32i>) -> !s32i loc(#loc394)
              cir.store %32, %6 : !s32i, !cir.ptr<!s32i> loc(#loc585)
              cir.scope {
                %33 = cir.load %6 : !cir.ptr<!s32i>, !s32i loc(#loc399)
                %34 = cir.const #cir.int<1> : !s32i loc(#loc400)
                %35 = cir.unary(minus, %34) : !s32i, !s32i loc(#loc400)
                %36 = cir.cmp(eq, %33, %35) : !s32i, !cir.bool loc(#loc587)
                cir.if %36 {
                  cir.break loc(#loc402)
                } loc(#loc588)
              } loc(#loc586)
              cir.scope {
                %33 = cir.load %6 : !cir.ptr<!s32i>, !s32i loc(#loc405)
                %34 = cir.get_global @".str.2" : !cir.ptr<!cir.array<!s8i x 9>> loc(#loc406)
                %35 = cir.cast(array_to_ptrdecay, %34 : !cir.ptr<!cir.array<!s8i x 9>>), !cir.ptr<!s8i> loc(#loc406)
                %36 = cir.cast(bitcast, %35 : !cir.ptr<!s8i>), !cir.ptr<!void> loc(#loc406)
                %37 = cir.const #cir.int<8> : !u64i loc(#loc590)
                %38 = cir.const #cir.int<0> : !s32i loc(#loc409)
                %39 = cir.call @send(%33, %36, %37, %38) : (!s32i, !cir.ptr<!void>, !u64i, !s32i) -> !s64i loc(#loc410)
                %40 = cir.const #cir.int<1> : !s32i loc(#loc411)
                %41 = cir.unary(minus, %40) : !s32i, !s32i loc(#loc411)
                %42 = cir.cast(integral, %41 : !s32i), !s64i loc(#loc411)
                %43 = cir.cmp(eq, %39, %42) : !s64i, !cir.bool loc(#loc591)
                cir.if %43 {
                  %44 = cir.get_global @".str.3" : !cir.ptr<!cir.array<!s8i x 13>> loc(#loc413)
                  %45 = cir.cast(array_to_ptrdecay, %44 : !cir.ptr<!cir.array<!s8i x 13>>), !cir.ptr<!s8i> loc(#loc413)
                  cir.call @printLine(%45) : (!cir.ptr<!s8i>) -> () loc(#loc414)
                } loc(#loc592)
              } loc(#loc589)
              cir.yield loc(#loc344)
            } while {
              %11 = cir.const #cir.int<0> : !s32i loc(#loc415)
              %12 = cir.cast(int_to_bool, %11 : !s32i), !cir.bool loc(#loc415)
              cir.condition(%12) loc(#loc415)
            } loc(#loc566)
          } loc(#loc566)
          cir.scope {
            %11 = cir.load %5 : !cir.ptr<!s32i>, !s32i loc(#loc418)
            %12 = cir.const #cir.int<1> : !s32i loc(#loc419)
            %13 = cir.unary(minus, %12) : !s32i, !s32i loc(#loc419)
            %14 = cir.cmp(ne, %11, %13) : !s32i, !cir.bool loc(#loc594)
            cir.if %14 {
              %15 = cir.load %5 : !cir.ptr<!s32i>, !s32i loc(#loc421)
              %16 = cir.call @close(%15) : (!s32i) -> !s32i loc(#loc422)
            } loc(#loc595)
          } loc(#loc593)
          cir.scope {
            %11 = cir.load %6 : !cir.ptr<!s32i>, !s32i loc(#loc425)
            %12 = cir.const #cir.int<1> : !s32i loc(#loc426)
            %13 = cir.unary(minus, %12) : !s32i, !s32i loc(#loc426)
            %14 = cir.cmp(ne, %11, %13) : !s32i, !cir.bool loc(#loc597)
            cir.if %14 {
              %15 = cir.load %6 : !cir.ptr<!s32i>, !s32i loc(#loc428)
              %16 = cir.call @close(%15) : (!s32i) -> !s32i loc(#loc429)
            } loc(#loc598)
          } loc(#loc596)
        } loc(#loc562)
      } loc(#loc561)
    } loc(#loc559)
    cir.return loc(#loc329)
  } loc(#loc558)
} loc(#loc)
#loc = loc("/home/ladisgin/git_proj/juliet-c/testcases/CWE510_Trapdoor/CWE510_Trapdoor__hostname_based_logic_11.c":0:0)
#loc1 = loc("../../testcasesupport/std_testcase_io.h":48:1)
#loc2 = loc("../../testcasesupport/std_testcase_io.h":48:23)
#loc3 = loc("/usr/include/sys/socket.h":102:1)
#loc4 = loc("/usr/include/sys/socket.h":102:62)
#loc5 = loc("/usr/include/netinet/in.h":404:1)
#loc6 = loc("/usr/include/netinet/in.h":405:40)
#loc7 = loc("/usr/include/sys/socket.h":112:1)
#loc8 = loc("/usr/include/sys/socket.h":113:6)
#loc9 = loc("/usr/include/sys/socket.h":296:1)
#loc10 = loc("/usr/include/sys/socket.h":296:39)
#loc11 = loc("/usr/include/sys/socket.h":306:1)
#loc12 = loc("/usr/include/sys/socket.h":307:38)
#loc13 = loc("/usr/include/sys/socket.h":116:1)
#loc14 = loc("/usr/include/sys/socket.h":117:33)
#loc15 = loc("/usr/include/netdb.h":675:1)
#loc16 = loc("/usr/include/netdb.h":678:36)
#loc17 = loc("/usr/include/string.h":156:1)
#loc18 = loc("/usr/include/string.h":157:33)
#loc19 = loc("CWE510_Trapdoor__hostname_based_logic_11.c":105:28)
#loc20 = loc("/usr/include/sys/socket.h":138:1)
#loc21 = loc("/usr/include/sys/socket.h":138:74)
#loc22 = loc("CWE510_Trapdoor__hostname_based_logic_11.c":107:44)
#loc23 = loc("CWE510_Trapdoor__hostname_based_logic_11.c":115:44)
#loc24 = loc("../../testcasesupport/std_testcase_io.h":14:1)
#loc25 = loc("../../testcasesupport/std_testcase_io.h":14:33)
#loc26 = loc("CWE510_Trapdoor__hostname_based_logic_11.c":117:35)
#loc27 = loc("/usr/include/unistd.h":358:1)
#loc28 = loc("/usr/include/unistd.h":358:27)
#loc29 = loc("CWE510_Trapdoor__hostname_based_logic_11.c":47:1)
#loc30 = loc("CWE510_Trapdoor__hostname_based_logic_11.c":138:1)
#loc31 = loc("CWE510_Trapdoor__hostname_based_logic_11.c":49:5)
#loc32 = loc("CWE510_Trapdoor__hostname_based_logic_11.c":137:5)
#loc33 = loc("CWE510_Trapdoor__hostname_based_logic_11.c":49:8)
#loc34 = loc("CWE510_Trapdoor__hostname_based_logic_11.c":49:26)
#loc35 = loc("CWE510_Trapdoor__hostname_based_logic_11.c":50:5)
#loc36 = loc("CWE510_Trapdoor__hostname_based_logic_11.c":51:9)
#loc37 = loc("CWE510_Trapdoor__hostname_based_logic_11.c":136:9)
#loc38 = loc("CWE510_Trapdoor__hostname_based_logic_11.c":56:13)
#loc39 = loc("CWE510_Trapdoor__hostname_based_logic_11.c":56:32)
#loc40 = loc("CWE510_Trapdoor__hostname_based_logic_11.c":56:41)
#loc41 = loc("CWE510_Trapdoor__hostname_based_logic_11.c":57:13)
#loc42 = loc("CWE510_Trapdoor__hostname_based_logic_11.c":57:56)
#loc43 = loc("CWE510_Trapdoor__hostname_based_logic_11.c":58:13)
#loc44 = loc("CWE510_Trapdoor__hostname_based_logic_11.c":58:35)
#loc45 = loc("CWE510_Trapdoor__hostname_based_logic_11.c":59:13)
#loc46 = loc("CWE510_Trapdoor__hostname_based_logic_11.c":59:35)
#loc47 = loc("CWE510_Trapdoor__hostname_based_logic_11.c":60:13)
#loc48 = loc("CWE510_Trapdoor__hostname_based_logic_11.c":60:37)
#loc49 = loc("CWE510_Trapdoor__hostname_based_logic_11.c":61:13)
#loc50 = loc("CWE510_Trapdoor__hostname_based_logic_11.c":61:37)
#loc51 = loc("CWE510_Trapdoor__hostname_based_logic_11.c":57:36)
#loc52 = loc("CWE510_Trapdoor__hostname_based_logic_11.c":62:13)
#loc53 = loc("CWE510_Trapdoor__hostname_based_logic_11.c":121:21)
#loc54 = loc("CWE510_Trapdoor__hostname_based_logic_11.c":71:39)
#loc55 = loc("CWE510_Trapdoor__hostname_based_logic_11.c":71:48)
#loc56 = loc("CWE510_Trapdoor__hostname_based_logic_11.c":71:61)
#loc57 = loc("CWE510_Trapdoor__hostname_based_logic_11.c":71:32)
#loc58 = loc("CWE510_Trapdoor__hostname_based_logic_11.c":71:17)
#loc59 = loc("CWE510_Trapdoor__hostname_based_logic_11.c":71:72)
#loc60 = loc("CWE510_Trapdoor__hostname_based_logic_11.c":72:17)
#loc61 = loc("CWE510_Trapdoor__hostname_based_logic_11.c":75:17)
#loc62 = loc("CWE510_Trapdoor__hostname_based_logic_11.c":72:21)
#loc63 = loc("CWE510_Trapdoor__hostname_based_logic_11.c":72:37)
#loc64 = loc("CWE510_Trapdoor__hostname_based_logic_11.c":73:17)
#loc65 = loc("CWE510_Trapdoor__hostname_based_logic_11.c":74:21)
#loc66 = loc("CWE510_Trapdoor__hostname_based_logic_11.c":76:24)
#loc67 = loc("CWE510_Trapdoor__hostname_based_logic_11.c":76:25)
#loc68 = loc("CWE510_Trapdoor__hostname_based_logic_11.c":76:34)
#loc69 = loc("CWE510_Trapdoor__hostname_based_logic_11.c":76:37)
#loc70 = loc("CWE510_Trapdoor__hostname_based_logic_11.c":76:51)
#loc71 = loc("CWE510_Trapdoor__hostname_based_logic_11.c":76:17)
#loc72 = loc("CWE510_Trapdoor__hostname_based_logic_11.c":76:52)
#loc73 = loc("CWE510_Trapdoor__hostname_based_logic_11.c":77:38)
#loc74 = loc("/usr/include/netinet/in.h":249:5)
#loc75 = loc("CWE510_Trapdoor__hostname_based_logic_11.c":77:17)
#loc76 = loc("CWE510_Trapdoor__hostname_based_logic_11.c":78:43)
#loc77 = loc("/usr/include/netinet/in.h":251:20)
#loc78 = loc("/usr/include/netinet/in.h":33:15)
#loc79 = loc("CWE510_Trapdoor__hostname_based_logic_11.c":78:17)
#loc80 = loc("CWE510_Trapdoor__hostname_based_logic_11.c":79:42)
#loc81 = loc("CWE510_Trapdoor__hostname_based_logic_11.c":79:36)
#loc82 = loc("/usr/include/netinet/in.h":250:15)
#loc83 = loc("CWE510_Trapdoor__hostname_based_logic_11.c":79:17)
#loc84 = loc("CWE510_Trapdoor__hostname_based_logic_11.c":79:47)
#loc85 = loc("CWE510_Trapdoor__hostname_based_logic_11.c":80:17)
#loc86 = loc("CWE510_Trapdoor__hostname_based_logic_11.c":83:17)
#loc87 = loc("CWE510_Trapdoor__hostname_based_logic_11.c":80:26)
#loc88 = loc("CWE510_Trapdoor__hostname_based_logic_11.c":80:58)
#loc89 = loc("CWE510_Trapdoor__hostname_based_logic_11.c":80:59)
#loc90 = loc("CWE510_Trapdoor__hostname_based_logic_11.c":80:68)
#loc91 = loc("CWE510_Trapdoor__hostname_based_logic_11.c":80:82)
#loc92 = loc("CWE510_Trapdoor__hostname_based_logic_11.c":80:21)
#loc93 = loc("CWE510_Trapdoor__hostname_based_logic_11.c":80:88)
#loc94 = loc("CWE510_Trapdoor__hostname_based_logic_11.c":81:17)
#loc95 = loc("CWE510_Trapdoor__hostname_based_logic_11.c":82:21)
#loc96 = loc("CWE510_Trapdoor__hostname_based_logic_11.c":84:17)
#loc97 = loc("CWE510_Trapdoor__hostname_based_logic_11.c":87:17)
#loc98 = loc("CWE510_Trapdoor__hostname_based_logic_11.c":84:28)
#loc99 = loc("CWE510_Trapdoor__hostname_based_logic_11.c":84:42)
#loc100 = loc("CWE510_Trapdoor__hostname_based_logic_11.c":84:21)
#loc101 = loc("CWE510_Trapdoor__hostname_based_logic_11.c":84:48)
#loc102 = loc("CWE510_Trapdoor__hostname_based_logic_11.c":85:17)
#loc103 = loc("CWE510_Trapdoor__hostname_based_logic_11.c":86:21)
#loc104 = loc("CWE510_Trapdoor__hostname_based_logic_11.c":88:39)
#loc105 = loc("CWE510_Trapdoor__hostname_based_logic_11.c":88:53)
#loc106 = loc("CWE510_Trapdoor__hostname_based_logic_11.c":88:59)
#loc107 = loc("CWE510_Trapdoor__hostname_based_logic_11.c":88:32)
#loc108 = loc("CWE510_Trapdoor__hostname_based_logic_11.c":88:17)
#loc109 = loc("CWE510_Trapdoor__hostname_based_logic_11.c":88:63)
#loc110 = loc("CWE510_Trapdoor__hostname_based_logic_11.c":89:17)
#loc111 = loc("CWE510_Trapdoor__hostname_based_logic_11.c":92:17)
#loc112 = loc("CWE510_Trapdoor__hostname_based_logic_11.c":89:21)
#loc113 = loc("CWE510_Trapdoor__hostname_based_logic_11.c":89:37)
#loc114 = loc("CWE510_Trapdoor__hostname_based_logic_11.c":90:17)
#loc115 = loc("CWE510_Trapdoor__hostname_based_logic_11.c":91:21)
#loc116 = loc("CWE510_Trapdoor__hostname_based_logic_11.c":93:17)
#loc117 = loc("CWE510_Trapdoor__hostname_based_logic_11.c":96:17)
#loc118 = loc("CWE510_Trapdoor__hostname_based_logic_11.c":93:33)
#loc119 = loc("CWE510_Trapdoor__hostname_based_logic_11.c":93:66)
#loc120 = loc("CWE510_Trapdoor__hostname_based_logic_11.c":93:67)
#loc121 = loc("CWE510_Trapdoor__hostname_based_logic_11.c":93:82)
#loc122 = loc("CWE510_Trapdoor__hostname_based_logic_11.c":93:83)
#loc123 = loc("CWE510_Trapdoor__hostname_based_logic_11.c":93:21)
#loc124 = loc("CWE510_Trapdoor__hostname_based_logic_11.c":93:105)
#loc125 = loc("CWE510_Trapdoor__hostname_based_logic_11.c":93:104)
#loc126 = loc("CWE510_Trapdoor__hostname_based_logic_11.c":94:17)
#loc127 = loc("CWE510_Trapdoor__hostname_based_logic_11.c":95:21)
#loc128 = loc("CWE510_Trapdoor__hostname_based_logic_11.c":97:17)
#loc129 = loc("CWE510_Trapdoor__hostname_based_logic_11.c":103:17)
#loc130 = loc("CWE510_Trapdoor__hostname_based_logic_11.c":97:52)
#loc131 = loc("CWE510_Trapdoor__hostname_based_logic_11.c":97:53)
#loc132 = loc("CWE510_Trapdoor__hostname_based_logic_11.c":98:33)
#loc133 = loc("CWE510_Trapdoor__hostname_based_logic_11.c":98:55)
#loc134 = loc("CWE510_Trapdoor__hostname_based_logic_11.c":99:33)
#loc135 = loc("CWE510_Trapdoor__hostname_based_logic_11.c":100:33)
#loc136 = loc("CWE510_Trapdoor__hostname_based_logic_11.c":100:45)
#loc137 = loc("CWE510_Trapdoor__hostname_based_logic_11.c":100:55)
#loc138 = loc("CWE510_Trapdoor__hostname_based_logic_11.c":100:67)
#loc139 = loc("CWE510_Trapdoor__hostname_based_logic_11.c":97:21)
#loc140 = loc("CWE510_Trapdoor__hostname_based_logic_11.c":100:86)
#loc141 = loc("CWE510_Trapdoor__hostname_based_logic_11.c":101:17)
#loc142 = loc("CWE510_Trapdoor__hostname_based_logic_11.c":102:21)
#loc143 = loc("CWE510_Trapdoor__hostname_based_logic_11.c":105:17)
#loc144 = loc("CWE510_Trapdoor__hostname_based_logic_11.c":119:17)
#loc145 = loc("CWE510_Trapdoor__hostname_based_logic_11.c":105:21)
#loc146 = loc("CWE510_Trapdoor__hostname_based_logic_11.c":105:48)
#loc147 = loc("CWE510_Trapdoor__hostname_based_logic_11.c":105:61)
#loc148 = loc("CWE510_Trapdoor__hostname_based_logic_11.c":106:17)
#loc149 = loc("CWE510_Trapdoor__hostname_based_logic_11.c":112:17)
#loc150 = loc("CWE510_Trapdoor__hostname_based_logic_11.c":114:17)
#loc151 = loc("CWE510_Trapdoor__hostname_based_logic_11.c":107:21)
#loc152 = loc("CWE510_Trapdoor__hostname_based_logic_11.c":111:21)
#loc153 = loc("CWE510_Trapdoor__hostname_based_logic_11.c":107:30)
#loc154 = loc("CWE510_Trapdoor__hostname_based_logic_11.c":107:59)
#loc155 = loc("CWE510_Trapdoor__hostname_based_logic_11.c":107:79)
#loc156 = loc("CWE510_Trapdoor__hostname_based_logic_11.c":107:82)
#loc157 = loc("CWE510_Trapdoor__hostname_based_logic_11.c":107:25)
#loc158 = loc("CWE510_Trapdoor__hostname_based_logic_11.c":107:89)
#loc159 = loc("CWE510_Trapdoor__hostname_based_logic_11.c":108:21)
#loc160 = loc("CWE510_Trapdoor__hostname_based_logic_11.c":110:25)
#loc161 = loc("CWE510_Trapdoor__hostname_based_logic_11.c":115:21)
#loc162 = loc("CWE510_Trapdoor__hostname_based_logic_11.c":118:21)
#loc163 = loc("CWE510_Trapdoor__hostname_based_logic_11.c":115:30)
#loc164 = loc("CWE510_Trapdoor__hostname_based_logic_11.c":115:61)
#loc165 = loc("CWE510_Trapdoor__hostname_based_logic_11.c":115:83)
#loc166 = loc("CWE510_Trapdoor__hostname_based_logic_11.c":115:86)
#loc167 = loc("CWE510_Trapdoor__hostname_based_logic_11.c":115:25)
#loc168 = loc("CWE510_Trapdoor__hostname_based_logic_11.c":115:92)
#loc169 = loc("CWE510_Trapdoor__hostname_based_logic_11.c":116:21)
#loc170 = loc("CWE510_Trapdoor__hostname_based_logic_11.c":117:25)
#loc171 = loc("CWE510_Trapdoor__hostname_based_logic_11.c":121:20)
#loc172 = loc("CWE510_Trapdoor__hostname_based_logic_11.c":122:13)
#loc173 = loc("CWE510_Trapdoor__hostname_based_logic_11.c":125:13)
#loc174 = loc("CWE510_Trapdoor__hostname_based_logic_11.c":122:17)
#loc175 = loc("CWE510_Trapdoor__hostname_based_logic_11.c":122:33)
#loc176 = loc("CWE510_Trapdoor__hostname_based_logic_11.c":123:13)
#loc177 = loc("CWE510_Trapdoor__hostname_based_logic_11.c":124:30)
#loc178 = loc("CWE510_Trapdoor__hostname_based_logic_11.c":124:17)
#loc179 = loc("CWE510_Trapdoor__hostname_based_logic_11.c":126:13)
#loc180 = loc("CWE510_Trapdoor__hostname_based_logic_11.c":129:13)
#loc181 = loc("CWE510_Trapdoor__hostname_based_logic_11.c":126:17)
#loc182 = loc("CWE510_Trapdoor__hostname_based_logic_11.c":126:33)
#loc183 = loc("CWE510_Trapdoor__hostname_based_logic_11.c":127:13)
#loc184 = loc("CWE510_Trapdoor__hostname_based_logic_11.c":128:30)
#loc185 = loc("CWE510_Trapdoor__hostname_based_logic_11.c":128:17)
#loc186 = loc("CWE510_Trapdoor__hostname_based_logic_11.c":287:1)
#loc187 = loc("CWE510_Trapdoor__hostname_based_logic_11.c":291:1)
#loc188 = loc("CWE510_Trapdoor__hostname_based_logic_11.c":289:5)
#loc189 = loc("CWE510_Trapdoor__hostname_based_logic_11.c":289:11)
#loc190 = loc("CWE510_Trapdoor__hostname_based_logic_11.c":290:5)
#loc191 = loc("CWE510_Trapdoor__hostname_based_logic_11.c":290:11)
#loc192 = loc("/usr/include/stdlib.h":575:1)
#loc193 = loc("/usr/include/stdlib.h":575:41)
#loc194 = loc("/usr/include/time.h":76:1)
#loc195 = loc("/usr/include/time.h":76:38)
#loc196 = loc("CWE510_Trapdoor__hostname_based_logic_11.c":307:15)
#loc197 = loc("CWE510_Trapdoor__hostname_based_logic_11.c":309:15)
#loc198 = loc("CWE510_Trapdoor__hostname_based_logic_11.c":312:15)
#loc199 = loc("CWE510_Trapdoor__hostname_based_logic_11.c":314:15)
#loc200 = loc("CWE510_Trapdoor__hostname_based_logic_11.c":302:1)
#loc201 = loc("CWE510_Trapdoor__hostname_based_logic_11.c":317:1)
#loc206 = loc("CWE510_Trapdoor__hostname_based_logic_11.c":303:1)
#loc207 = loc("CWE510_Trapdoor__hostname_based_logic_11.c":305:27)
#loc208 = loc("CWE510_Trapdoor__hostname_based_logic_11.c":305:22)
#loc209 = loc("CWE510_Trapdoor__hostname_based_logic_11.c":305:5)
#loc210 = loc("CWE510_Trapdoor__hostname_based_logic_11.c":307:5)
#loc211 = loc("CWE510_Trapdoor__hostname_based_logic_11.c":308:5)
#loc212 = loc("CWE510_Trapdoor__hostname_based_logic_11.c":308:51)
#loc213 = loc("CWE510_Trapdoor__hostname_based_logic_11.c":309:5)
#loc214 = loc("CWE510_Trapdoor__hostname_based_logic_11.c":312:5)
#loc215 = loc("CWE510_Trapdoor__hostname_based_logic_11.c":313:5)
#loc216 = loc("CWE510_Trapdoor__hostname_based_logic_11.c":313:50)
#loc217 = loc("CWE510_Trapdoor__hostname_based_logic_11.c":314:5)
#loc218 = loc("CWE510_Trapdoor__hostname_based_logic_11.c":316:12)
#loc219 = loc("CWE510_Trapdoor__hostname_based_logic_11.c":316:5)
#loc220 = loc("../../testcasesupport/std_testcase_io.h":50:1)
#loc221 = loc("../../testcasesupport/std_testcase_io.h":50:24)
#loc222 = loc("CWE510_Trapdoor__hostname_based_logic_11.c":150:19)
#loc223 = loc("CWE510_Trapdoor__hostname_based_logic_11.c":145:1)
#loc224 = loc("CWE510_Trapdoor__hostname_based_logic_11.c":216:1)
#loc225 = loc("CWE510_Trapdoor__hostname_based_logic_11.c":147:5)
#loc226 = loc("CWE510_Trapdoor__hostname_based_logic_11.c":215:5)
#loc227 = loc("CWE510_Trapdoor__hostname_based_logic_11.c":147:8)
#loc228 = loc("CWE510_Trapdoor__hostname_based_logic_11.c":147:27)
#loc229 = loc("CWE510_Trapdoor__hostname_based_logic_11.c":148:5)
#loc230 = loc("CWE510_Trapdoor__hostname_based_logic_11.c":151:5)
#loc231 = loc("CWE510_Trapdoor__hostname_based_logic_11.c":153:5)
#loc232 = loc("CWE510_Trapdoor__hostname_based_logic_11.c":150:9)
#loc233 = loc("CWE510_Trapdoor__hostname_based_logic_11.c":154:9)
#loc234 = loc("CWE510_Trapdoor__hostname_based_logic_11.c":214:9)
#loc235 = loc("CWE510_Trapdoor__hostname_based_logic_11.c":159:13)
#loc236 = loc("CWE510_Trapdoor__hostname_based_logic_11.c":159:32)
#loc237 = loc("CWE510_Trapdoor__hostname_based_logic_11.c":160:13)
#loc238 = loc("CWE510_Trapdoor__hostname_based_logic_11.c":160:35)
#loc239 = loc("CWE510_Trapdoor__hostname_based_logic_11.c":161:13)
#loc240 = loc("CWE510_Trapdoor__hostname_based_logic_11.c":161:35)
#loc241 = loc("CWE510_Trapdoor__hostname_based_logic_11.c":162:13)
#loc242 = loc("CWE510_Trapdoor__hostname_based_logic_11.c":199:21)
#loc243 = loc("CWE510_Trapdoor__hostname_based_logic_11.c":171:39)
#loc244 = loc("CWE510_Trapdoor__hostname_based_logic_11.c":171:48)
#loc245 = loc("CWE510_Trapdoor__hostname_based_logic_11.c":171:61)
#loc246 = loc("CWE510_Trapdoor__hostname_based_logic_11.c":171:32)
#loc247 = loc("CWE510_Trapdoor__hostname_based_logic_11.c":171:17)
#loc248 = loc("CWE510_Trapdoor__hostname_based_logic_11.c":171:72)
#loc249 = loc("CWE510_Trapdoor__hostname_based_logic_11.c":172:17)
#loc250 = loc("CWE510_Trapdoor__hostname_based_logic_11.c":175:17)
#loc251 = loc("CWE510_Trapdoor__hostname_based_logic_11.c":172:21)
#loc252 = loc("CWE510_Trapdoor__hostname_based_logic_11.c":172:37)
#loc253 = loc("CWE510_Trapdoor__hostname_based_logic_11.c":173:17)
#loc254 = loc("CWE510_Trapdoor__hostname_based_logic_11.c":174:21)
#loc255 = loc("CWE510_Trapdoor__hostname_based_logic_11.c":176:24)
#loc256 = loc("CWE510_Trapdoor__hostname_based_logic_11.c":176:25)
#loc257 = loc("CWE510_Trapdoor__hostname_based_logic_11.c":176:34)
#loc258 = loc("CWE510_Trapdoor__hostname_based_logic_11.c":176:37)
#loc259 = loc("CWE510_Trapdoor__hostname_based_logic_11.c":176:51)
#loc260 = loc("CWE510_Trapdoor__hostname_based_logic_11.c":176:17)
#loc261 = loc("CWE510_Trapdoor__hostname_based_logic_11.c":176:52)
#loc262 = loc("CWE510_Trapdoor__hostname_based_logic_11.c":177:38)
#loc263 = loc("CWE510_Trapdoor__hostname_based_logic_11.c":177:17)
#loc264 = loc("CWE510_Trapdoor__hostname_based_logic_11.c":178:43)
#loc265 = loc("CWE510_Trapdoor__hostname_based_logic_11.c":178:17)
#loc266 = loc("CWE510_Trapdoor__hostname_based_logic_11.c":179:42)
#loc267 = loc("CWE510_Trapdoor__hostname_based_logic_11.c":179:36)
#loc268 = loc("CWE510_Trapdoor__hostname_based_logic_11.c":179:17)
#loc269 = loc("CWE510_Trapdoor__hostname_based_logic_11.c":179:47)
#loc270 = loc("CWE510_Trapdoor__hostname_based_logic_11.c":180:17)
#loc271 = loc("CWE510_Trapdoor__hostname_based_logic_11.c":183:17)
#loc272 = loc("CWE510_Trapdoor__hostname_based_logic_11.c":180:26)
#loc273 = loc("CWE510_Trapdoor__hostname_based_logic_11.c":180:58)
#loc274 = loc("CWE510_Trapdoor__hostname_based_logic_11.c":180:59)
#loc275 = loc("CWE510_Trapdoor__hostname_based_logic_11.c":180:68)
#loc276 = loc("CWE510_Trapdoor__hostname_based_logic_11.c":180:82)
#loc277 = loc("CWE510_Trapdoor__hostname_based_logic_11.c":180:21)
#loc278 = loc("CWE510_Trapdoor__hostname_based_logic_11.c":180:88)
#loc279 = loc("CWE510_Trapdoor__hostname_based_logic_11.c":181:17)
#loc280 = loc("CWE510_Trapdoor__hostname_based_logic_11.c":182:21)
#loc281 = loc("CWE510_Trapdoor__hostname_based_logic_11.c":184:17)
#loc282 = loc("CWE510_Trapdoor__hostname_based_logic_11.c":187:17)
#loc283 = loc("CWE510_Trapdoor__hostname_based_logic_11.c":184:28)
#loc284 = loc("CWE510_Trapdoor__hostname_based_logic_11.c":184:42)
#loc285 = loc("CWE510_Trapdoor__hostname_based_logic_11.c":184:21)
#loc286 = loc("CWE510_Trapdoor__hostname_based_logic_11.c":184:48)
#loc287 = loc("CWE510_Trapdoor__hostname_based_logic_11.c":185:17)
#loc288 = loc("CWE510_Trapdoor__hostname_based_logic_11.c":186:21)
#loc289 = loc("CWE510_Trapdoor__hostname_based_logic_11.c":188:39)
#loc290 = loc("CWE510_Trapdoor__hostname_based_logic_11.c":188:53)
#loc291 = loc("CWE510_Trapdoor__hostname_based_logic_11.c":188:59)
#loc292 = loc("CWE510_Trapdoor__hostname_based_logic_11.c":188:32)
#loc293 = loc("CWE510_Trapdoor__hostname_based_logic_11.c":188:17)
#loc294 = loc("CWE510_Trapdoor__hostname_based_logic_11.c":188:63)
#loc295 = loc("CWE510_Trapdoor__hostname_based_logic_11.c":189:17)
#loc296 = loc("CWE510_Trapdoor__hostname_based_logic_11.c":192:17)
#loc297 = loc("CWE510_Trapdoor__hostname_based_logic_11.c":189:21)
#loc298 = loc("CWE510_Trapdoor__hostname_based_logic_11.c":189:37)
#loc299 = loc("CWE510_Trapdoor__hostname_based_logic_11.c":190:17)
#loc300 = loc("CWE510_Trapdoor__hostname_based_logic_11.c":191:21)
#loc301 = loc("CWE510_Trapdoor__hostname_based_logic_11.c":194:17)
#loc302 = loc("CWE510_Trapdoor__hostname_based_logic_11.c":197:17)
#loc303 = loc("CWE510_Trapdoor__hostname_based_logic_11.c":194:26)
#loc304 = loc("CWE510_Trapdoor__hostname_based_logic_11.c":194:40)
#loc305 = loc("CWE510_Trapdoor__hostname_based_logic_11.c":194:57)
#loc306 = loc("CWE510_Trapdoor__hostname_based_logic_11.c":194:79)
#loc307 = loc("CWE510_Trapdoor__hostname_based_logic_11.c":194:82)
#loc308 = loc("CWE510_Trapdoor__hostname_based_logic_11.c":194:21)
#loc309 = loc("CWE510_Trapdoor__hostname_based_logic_11.c":194:88)
#loc310 = loc("CWE510_Trapdoor__hostname_based_logic_11.c":195:17)
#loc311 = loc("CWE510_Trapdoor__hostname_based_logic_11.c":196:31)
#loc312 = loc("CWE510_Trapdoor__hostname_based_logic_11.c":196:21)
#loc313 = loc("CWE510_Trapdoor__hostname_based_logic_11.c":199:20)
#loc314 = loc("CWE510_Trapdoor__hostname_based_logic_11.c":200:13)
#loc315 = loc("CWE510_Trapdoor__hostname_based_logic_11.c":203:13)
#loc316 = loc("CWE510_Trapdoor__hostname_based_logic_11.c":200:17)
#loc317 = loc("CWE510_Trapdoor__hostname_based_logic_11.c":200:33)
#loc318 = loc("CWE510_Trapdoor__hostname_based_logic_11.c":201:13)
#loc319 = loc("CWE510_Trapdoor__hostname_based_logic_11.c":202:30)
#loc320 = loc("CWE510_Trapdoor__hostname_based_logic_11.c":202:17)
#loc321 = loc("CWE510_Trapdoor__hostname_based_logic_11.c":204:13)
#loc322 = loc("CWE510_Trapdoor__hostname_based_logic_11.c":207:13)
#loc323 = loc("CWE510_Trapdoor__hostname_based_logic_11.c":204:17)
#loc324 = loc("CWE510_Trapdoor__hostname_based_logic_11.c":204:33)
#loc325 = loc("CWE510_Trapdoor__hostname_based_logic_11.c":205:13)
#loc326 = loc("CWE510_Trapdoor__hostname_based_logic_11.c":206:30)
#loc327 = loc("CWE510_Trapdoor__hostname_based_logic_11.c":206:17)
#loc328 = loc("CWE510_Trapdoor__hostname_based_logic_11.c":219:1)
#loc329 = loc("CWE510_Trapdoor__hostname_based_logic_11.c":285:1)
#loc330 = loc("CWE510_Trapdoor__hostname_based_logic_11.c":221:5)
#loc331 = loc("CWE510_Trapdoor__hostname_based_logic_11.c":284:5)
#loc332 = loc("CWE510_Trapdoor__hostname_based_logic_11.c":221:8)
#loc333 = loc("CWE510_Trapdoor__hostname_based_logic_11.c":221:26)
#loc334 = loc("CWE510_Trapdoor__hostname_based_logic_11.c":222:5)
#loc335 = loc("CWE510_Trapdoor__hostname_based_logic_11.c":223:9)
#loc336 = loc("CWE510_Trapdoor__hostname_based_logic_11.c":283:9)
#loc337 = loc("CWE510_Trapdoor__hostname_based_logic_11.c":228:13)
#loc338 = loc("CWE510_Trapdoor__hostname_based_logic_11.c":228:32)
#loc339 = loc("CWE510_Trapdoor__hostname_based_logic_11.c":229:13)
#loc340 = loc("CWE510_Trapdoor__hostname_based_logic_11.c":229:35)
#loc341 = loc("CWE510_Trapdoor__hostname_based_logic_11.c":230:13)
#loc342 = loc("CWE510_Trapdoor__hostname_based_logic_11.c":230:35)
#loc343 = loc("CWE510_Trapdoor__hostname_based_logic_11.c":231:13)
#loc344 = loc("CWE510_Trapdoor__hostname_based_logic_11.c":268:21)
#loc345 = loc("CWE510_Trapdoor__hostname_based_logic_11.c":240:39)
#loc346 = loc("CWE510_Trapdoor__hostname_based_logic_11.c":240:48)
#loc347 = loc("CWE510_Trapdoor__hostname_based_logic_11.c":240:61)
#loc348 = loc("CWE510_Trapdoor__hostname_based_logic_11.c":240:32)
#loc349 = loc("CWE510_Trapdoor__hostname_based_logic_11.c":240:17)
#loc350 = loc("CWE510_Trapdoor__hostname_based_logic_11.c":240:72)
#loc351 = loc("CWE510_Trapdoor__hostname_based_logic_11.c":241:17)
#loc352 = loc("CWE510_Trapdoor__hostname_based_logic_11.c":244:17)
#loc353 = loc("CWE510_Trapdoor__hostname_based_logic_11.c":241:21)
#loc354 = loc("CWE510_Trapdoor__hostname_based_logic_11.c":241:37)
#loc355 = loc("CWE510_Trapdoor__hostname_based_logic_11.c":242:17)
#loc356 = loc("CWE510_Trapdoor__hostname_based_logic_11.c":243:21)
#loc357 = loc("CWE510_Trapdoor__hostname_based_logic_11.c":245:24)
#loc358 = loc("CWE510_Trapdoor__hostname_based_logic_11.c":245:25)
#loc359 = loc("CWE510_Trapdoor__hostname_based_logic_11.c":245:34)
#loc360 = loc("CWE510_Trapdoor__hostname_based_logic_11.c":245:37)
#loc361 = loc("CWE510_Trapdoor__hostname_based_logic_11.c":245:51)
#loc362 = loc("CWE510_Trapdoor__hostname_based_logic_11.c":245:17)
#loc363 = loc("CWE510_Trapdoor__hostname_based_logic_11.c":245:52)
#loc364 = loc("CWE510_Trapdoor__hostname_based_logic_11.c":246:38)
#loc365 = loc("CWE510_Trapdoor__hostname_based_logic_11.c":246:17)
#loc366 = loc("CWE510_Trapdoor__hostname_based_logic_11.c":247:43)
#loc367 = loc("CWE510_Trapdoor__hostname_based_logic_11.c":247:17)
#loc368 = loc("CWE510_Trapdoor__hostname_based_logic_11.c":248:42)
#loc369 = loc("CWE510_Trapdoor__hostname_based_logic_11.c":248:36)
#loc370 = loc("CWE510_Trapdoor__hostname_based_logic_11.c":248:17)
#loc371 = loc("CWE510_Trapdoor__hostname_based_logic_11.c":248:47)
#loc372 = loc("CWE510_Trapdoor__hostname_based_logic_11.c":249:17)
#loc373 = loc("CWE510_Trapdoor__hostname_based_logic_11.c":252:17)
#loc374 = loc("CWE510_Trapdoor__hostname_based_logic_11.c":249:26)
#loc375 = loc("CWE510_Trapdoor__hostname_based_logic_11.c":249:58)
#loc376 = loc("CWE510_Trapdoor__hostname_based_logic_11.c":249:59)
#loc377 = loc("CWE510_Trapdoor__hostname_based_logic_11.c":249:68)
#loc378 = loc("CWE510_Trapdoor__hostname_based_logic_11.c":249:82)
#loc379 = loc("CWE510_Trapdoor__hostname_based_logic_11.c":249:21)
#loc380 = loc("CWE510_Trapdoor__hostname_based_logic_11.c":249:88)
#loc381 = loc("CWE510_Trapdoor__hostname_based_logic_11.c":250:17)
#loc382 = loc("CWE510_Trapdoor__hostname_based_logic_11.c":251:21)
#loc383 = loc("CWE510_Trapdoor__hostname_based_logic_11.c":253:17)
#loc384 = loc("CWE510_Trapdoor__hostname_based_logic_11.c":256:17)
#loc385 = loc("CWE510_Trapdoor__hostname_based_logic_11.c":253:28)
#loc386 = loc("CWE510_Trapdoor__hostname_based_logic_11.c":253:42)
#loc387 = loc("CWE510_Trapdoor__hostname_based_logic_11.c":253:21)
#loc388 = loc("CWE510_Trapdoor__hostname_based_logic_11.c":253:48)
#loc389 = loc("CWE510_Trapdoor__hostname_based_logic_11.c":254:17)
#loc390 = loc("CWE510_Trapdoor__hostname_based_logic_11.c":255:21)
#loc391 = loc("CWE510_Trapdoor__hostname_based_logic_11.c":257:39)
#loc392 = loc("CWE510_Trapdoor__hostname_based_logic_11.c":257:53)
#loc393 = loc("CWE510_Trapdoor__hostname_based_logic_11.c":257:59)
#loc394 = loc("CWE510_Trapdoor__hostname_based_logic_11.c":257:32)
#loc395 = loc("CWE510_Trapdoor__hostname_based_logic_11.c":257:17)
#loc396 = loc("CWE510_Trapdoor__hostname_based_logic_11.c":257:63)
#loc397 = loc("CWE510_Trapdoor__hostname_based_logic_11.c":258:17)
#loc398 = loc("CWE510_Trapdoor__hostname_based_logic_11.c":261:17)
#loc399 = loc("CWE510_Trapdoor__hostname_based_logic_11.c":258:21)
#loc400 = loc("CWE510_Trapdoor__hostname_based_logic_11.c":258:37)
#loc401 = loc("CWE510_Trapdoor__hostname_based_logic_11.c":259:17)
#loc402 = loc("CWE510_Trapdoor__hostname_based_logic_11.c":260:21)
#loc403 = loc("CWE510_Trapdoor__hostname_based_logic_11.c":263:17)
#loc404 = loc("CWE510_Trapdoor__hostname_based_logic_11.c":266:17)
#loc405 = loc("CWE510_Trapdoor__hostname_based_logic_11.c":263:26)
#loc406 = loc("CWE510_Trapdoor__hostname_based_logic_11.c":263:40)
#loc407 = loc("CWE510_Trapdoor__hostname_based_logic_11.c":263:57)
#loc408 = loc("CWE510_Trapdoor__hostname_based_logic_11.c":263:79)
#loc409 = loc("CWE510_Trapdoor__hostname_based_logic_11.c":263:82)
#loc410 = loc("CWE510_Trapdoor__hostname_based_logic_11.c":263:21)
#loc411 = loc("CWE510_Trapdoor__hostname_based_logic_11.c":263:88)
#loc412 = loc("CWE510_Trapdoor__hostname_based_logic_11.c":264:17)
#loc413 = loc("CWE510_Trapdoor__hostname_based_logic_11.c":265:31)
#loc414 = loc("CWE510_Trapdoor__hostname_based_logic_11.c":265:21)
#loc415 = loc("CWE510_Trapdoor__hostname_based_logic_11.c":268:20)
#loc416 = loc("CWE510_Trapdoor__hostname_based_logic_11.c":269:13)
#loc417 = loc("CWE510_Trapdoor__hostname_based_logic_11.c":272:13)
#loc418 = loc("CWE510_Trapdoor__hostname_based_logic_11.c":269:17)
#loc419 = loc("CWE510_Trapdoor__hostname_based_logic_11.c":269:33)
#loc420 = loc("CWE510_Trapdoor__hostname_based_logic_11.c":270:13)
#loc421 = loc("CWE510_Trapdoor__hostname_based_logic_11.c":271:30)
#loc422 = loc("CWE510_Trapdoor__hostname_based_logic_11.c":271:17)
#loc423 = loc("CWE510_Trapdoor__hostname_based_logic_11.c":273:13)
#loc424 = loc("CWE510_Trapdoor__hostname_based_logic_11.c":276:13)
#loc425 = loc("CWE510_Trapdoor__hostname_based_logic_11.c":273:17)
#loc426 = loc("CWE510_Trapdoor__hostname_based_logic_11.c":273:33)
#loc427 = loc("CWE510_Trapdoor__hostname_based_logic_11.c":274:13)
#loc428 = loc("CWE510_Trapdoor__hostname_based_logic_11.c":275:30)
#loc429 = loc("CWE510_Trapdoor__hostname_based_logic_11.c":275:17)
#loc430 = loc(fused[#loc1, #loc2])
#loc431 = loc(fused[#loc3, #loc4])
#loc432 = loc(fused[#loc5, #loc6])
#loc433 = loc(fused[#loc7, #loc8])
#loc434 = loc(fused[#loc9, #loc10])
#loc435 = loc(fused[#loc11, #loc12])
#loc436 = loc(fused[#loc13, #loc14])
#loc437 = loc(fused[#loc15, #loc16])
#loc438 = loc(fused[#loc17, #loc18])
#loc439 = loc(fused[#loc20, #loc21])
#loc440 = loc(fused[#loc24, #loc25])
#loc441 = loc(fused[#loc27, #loc28])
#loc442 = loc(fused[#loc29, #loc30])
#loc443 = loc(fused[#loc31, #loc32])
#loc444 = loc(fused[#loc33, #loc34])
#loc445 = loc(fused[#loc35, #loc32])
#loc446 = loc(fused[#loc36, #loc37])
#loc447 = loc(fused[#loc38, #loc39])
#loc448 = loc(fused[#loc38, #loc40])
#loc449 = loc(fused[#loc41, #loc42])
#loc450 = loc(fused[#loc43, #loc44])
#loc451 = loc(fused[#loc45, #loc46])
#loc452 = loc(fused[#loc47, #loc48])
#loc453 = loc(fused[#loc49, #loc50])
#loc454 = loc(fused[#loc51, #loc42])
#loc455 = loc(fused[#loc52, #loc53])
#loc456 = loc(fused[#loc58, #loc59])
#loc457 = loc(fused[#loc60, #loc61])
#loc458 = loc(fused[#loc62, #loc63])
#loc459 = loc(fused[#loc64, #loc61])
#loc460 = loc(fused[#loc66, #loc67])
#loc461 = loc(fused[#loc69, #loc70])
#loc462 = loc(fused[#loc71, #loc72])
#loc463 = loc(fused[#loc75, #loc73])
#loc464 = loc(fused[#loc79, #loc76])
#loc465 = loc(fused[#loc83, #loc84])
#loc466 = loc(fused[#loc85, #loc86])
#loc467 = loc(fused[#loc88, #loc89])
#loc468 = loc(fused[#loc90, #loc91])
#loc469 = loc(fused[#loc92, #loc93])
#loc470 = loc(fused[#loc94, #loc86])
#loc471 = loc(fused[#loc96, #loc97])
#loc472 = loc(fused[#loc100, #loc101])
#loc473 = loc(fused[#loc102, #loc97])
#loc474 = loc(fused[#loc108, #loc109])
#loc475 = loc(fused[#loc110, #loc111])
#loc476 = loc(fused[#loc112, #loc113])
#loc477 = loc(fused[#loc114, #loc111])
#loc478 = loc(fused[#loc116, #loc117])
#loc479 = loc(fused[#loc119, #loc120])
#loc480 = loc(fused[#loc121, #loc122])
#loc481 = loc(fused[#loc123, #loc124])
#loc482 = loc(fused[#loc126, #loc117])
#loc483 = loc(fused[#loc128, #loc129])
#loc484 = loc(fused[#loc130, #loc131])
#loc485 = loc(fused[#loc132, #loc133])
#loc486 = loc(fused[#loc139, #loc140])
#loc487 = loc(fused[#loc141, #loc129])
#loc488 = loc(fused[#loc143, #loc144])
#loc489 = loc(fused[#loc145, #loc147])
#loc490 = loc(fused[#loc148, #loc149, #loc150, #loc144])
#loc491 = loc(fused[#loc151, #loc152])
#loc492 = loc(fused[#loc154, #loc155])
#loc493 = loc(fused[#loc157, #loc158])
#loc494 = loc(fused[#loc159, #loc152])
#loc495 = loc(fused[#loc161, #loc162])
#loc496 = loc(fused[#loc164, #loc165])
#loc497 = loc(fused[#loc167, #loc168])
#loc498 = loc(fused[#loc169, #loc162])
#loc499 = loc(fused[#loc172, #loc173])
#loc500 = loc(fused[#loc174, #loc175])
#loc501 = loc(fused[#loc176, #loc173])
#loc502 = loc(fused[#loc179, #loc180])
#loc503 = loc(fused[#loc181, #loc182])
#loc504 = loc(fused[#loc183, #loc180])
#loc505 = loc(fused[#loc186, #loc187])
#loc506 = loc(fused[#loc188, #loc189])
#loc507 = loc(fused[#loc190, #loc191])
#loc508 = loc(fused[#loc192, #loc193])
#loc509 = loc(fused[#loc194, #loc195])
#loc510 = loc(fused[#loc200, #loc201])
#loc513 = loc(fused[#loc211, #loc212])
#loc514 = loc(fused[#loc215, #loc216])
#loc515 = loc(fused[#loc219, #loc218])
#loc516 = loc(fused[#loc220, #loc221])
#loc517 = loc(fused[#loc223, #loc224])
#loc518 = loc(fused[#loc225, #loc226])
#loc519 = loc(fused[#loc227, #loc228])
#loc520 = loc(fused[#loc229, #loc230, #loc231, #loc226])
#loc521 = loc(fused[#loc233, #loc234])
#loc522 = loc(fused[#loc235, #loc236])
#loc523 = loc(fused[#loc237, #loc238])
#loc524 = loc(fused[#loc239, #loc240])
#loc525 = loc(fused[#loc241, #loc242])
#loc526 = loc(fused[#loc247, #loc248])
#loc527 = loc(fused[#loc249, #loc250])
#loc528 = loc(fused[#loc251, #loc252])
#loc529 = loc(fused[#loc253, #loc250])
#loc530 = loc(fused[#loc255, #loc256])
#loc531 = loc(fused[#loc258, #loc259])
#loc532 = loc(fused[#loc260, #loc261])
#loc533 = loc(fused[#loc263, #loc262])
#loc534 = loc(fused[#loc265, #loc264])
#loc535 = loc(fused[#loc268, #loc269])
#loc536 = loc(fused[#loc270, #loc271])
#loc537 = loc(fused[#loc273, #loc274])
#loc538 = loc(fused[#loc275, #loc276])
#loc539 = loc(fused[#loc277, #loc278])
#loc540 = loc(fused[#loc279, #loc271])
#loc541 = loc(fused[#loc281, #loc282])
#loc542 = loc(fused[#loc285, #loc286])
#loc543 = loc(fused[#loc287, #loc282])
#loc544 = loc(fused[#loc293, #loc294])
#loc545 = loc(fused[#loc295, #loc296])
#loc546 = loc(fused[#loc297, #loc298])
#loc547 = loc(fused[#loc299, #loc296])
#loc548 = loc(fused[#loc301, #loc302])
#loc549 = loc(fused[#loc305, #loc306])
#loc550 = loc(fused[#loc308, #loc309])
#loc551 = loc(fused[#loc310, #loc302])
#loc552 = loc(fused[#loc314, #loc315])
#loc553 = loc(fused[#loc316, #loc317])
#loc554 = loc(fused[#loc318, #loc315])
#loc555 = loc(fused[#loc321, #loc322])
#loc556 = loc(fused[#loc323, #loc324])
#loc557 = loc(fused[#loc325, #loc322])
#loc558 = loc(fused[#loc328, #loc329])
#loc559 = loc(fused[#loc330, #loc331])
#loc560 = loc(fused[#loc332, #loc333])
#loc561 = loc(fused[#loc334, #loc331])
#loc562 = loc(fused[#loc335, #loc336])
#loc563 = loc(fused[#loc337, #loc338])
#loc564 = loc(fused[#loc339, #loc340])
#loc565 = loc(fused[#loc341, #loc342])
#loc566 = loc(fused[#loc343, #loc344])
#loc567 = loc(fused[#loc349, #loc350])
#loc568 = loc(fused[#loc351, #loc352])
#loc569 = loc(fused[#loc353, #loc354])
#loc570 = loc(fused[#loc355, #loc352])
#loc571 = loc(fused[#loc357, #loc358])
#loc572 = loc(fused[#loc360, #loc361])
#loc573 = loc(fused[#loc362, #loc363])
#loc574 = loc(fused[#loc365, #loc364])
#loc575 = loc(fused[#loc367, #loc366])
#loc576 = loc(fused[#loc370, #loc371])
#loc577 = loc(fused[#loc372, #loc373])
#loc578 = loc(fused[#loc375, #loc376])
#loc579 = loc(fused[#loc377, #loc378])
#loc580 = loc(fused[#loc379, #loc380])
#loc581 = loc(fused[#loc381, #loc373])
#loc582 = loc(fused[#loc383, #loc384])
#loc583 = loc(fused[#loc387, #loc388])
#loc584 = loc(fused[#loc389, #loc384])
#loc585 = loc(fused[#loc395, #loc396])
#loc586 = loc(fused[#loc397, #loc398])
#loc587 = loc(fused[#loc399, #loc400])
#loc588 = loc(fused[#loc401, #loc398])
#loc589 = loc(fused[#loc403, #loc404])
#loc590 = loc(fused[#loc407, #loc408])
#loc591 = loc(fused[#loc410, #loc411])
#loc592 = loc(fused[#loc412, #loc404])
#loc593 = loc(fused[#loc416, #loc417])
#loc594 = loc(fused[#loc418, #loc419])
#loc595 = loc(fused[#loc420, #loc417])
#loc596 = loc(fused[#loc423, #loc424])
#loc597 = loc(fused[#loc425, #loc426])
#loc598 = loc(fused[#loc427, #loc424])
