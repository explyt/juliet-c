!s32i = !cir.int<s, 32>
!s64i = !cir.int<s, 64>
!s8i = !cir.int<s, 8>
!u16i = !cir.int<u, 16>
!u32i = !cir.int<u, 32>
!u64i = !cir.int<u, 64>
!u8i = !cir.int<u, 8>
!void = !cir.void
#false = #cir.bool<false> : !cir.bool
#fn_attr = #cir<extra({nothrow = #cir.nothrow})>
#fn_attr1 = #cir<extra({inline = #cir.inline<no>, nothrow = #cir.nothrow, optnone = #cir.optnone})>
#loc22 = loc("CWE190_Integer_Overflow__int_connect_socket_square_21.c":49:21)
#loc23 = loc("CWE190_Integer_Overflow__int_connect_socket_square_21.c":49:25)
#loc153 = loc("CWE190_Integer_Overflow__int_connect_socket_square_21.c":346:10)
#loc154 = loc("CWE190_Integer_Overflow__int_connect_socket_square_21.c":346:14)
#loc155 = loc("CWE190_Integer_Overflow__int_connect_socket_square_21.c":346:20)
#loc156 = loc("CWE190_Integer_Overflow__int_connect_socket_square_21.c":346:32)
#loc178 = loc("CWE190_Integer_Overflow__int_connect_socket_square_21.c":136:26)
#loc179 = loc("CWE190_Integer_Overflow__int_connect_socket_square_21.c":136:30)
#loc305 = loc("CWE190_Integer_Overflow__int_connect_socket_square_21.c":224:26)
#loc306 = loc("CWE190_Integer_Overflow__int_connect_socket_square_21.c":224:30)
#loc430 = loc("CWE190_Integer_Overflow__int_connect_socket_square_21.c":307:25)
#loc431 = loc("CWE190_Integer_Overflow__int_connect_socket_square_21.c":307:29)
#true = #cir.bool<true> : !cir.bool
!ty_in_addr = !cir.struct<struct "in_addr" {!u32i} #cir.record.decl.ast>
#loc466 = loc(fused[#loc22, #loc23])
#loc515 = loc(fused[#loc153, #loc154])
#loc516 = loc(fused[#loc155, #loc156])
#loc522 = loc(fused[#loc178, #loc179])
#loc568 = loc(fused[#loc305, #loc306])
#loc614 = loc(fused[#loc430, #loc431])
!ty_sockaddr = !cir.struct<struct "sockaddr" {!u16i, !cir.array<!s8i x 14>} #cir.record.decl.ast>
!ty_sockaddr_in = !cir.struct<struct "sockaddr_in" {!u16i, !u16i, !ty_in_addr, !cir.array<!u8i x 8>}>
module @"/home/ladisgin/git_proj/juliet-c/testcases/CWE190_Integer_Overflow/s02/CWE190_Integer_Overflow__int_connect_socket_square_21.c" attributes {cir.lang = #cir.lang<c>, cir.sob = #cir.signed_overflow_behavior<undefined>, cir.triple = "x86_64-unknown-linux-gnu", dlti.dl_spec = #dlti.dl_spec<i8 = dense<8> : vector<2xi64>, i16 = dense<16> : vector<2xi64>, i32 = dense<32> : vector<2xi64>, f80 = dense<128> : vector<2xi64>, !llvm.ptr = dense<64> : vector<4xi64>, i1 = dense<8> : vector<2xi64>, i64 = dense<64> : vector<2xi64>, i128 = dense<128> : vector<2xi64>, f64 = dense<64> : vector<2xi64>, f128 = dense<128> : vector<2xi64>, !llvm.ptr<270> = dense<32> : vector<4xi64>, f16 = dense<16> : vector<2xi64>, !llvm.ptr<272> = dense<64> : vector<4xi64>, !llvm.ptr<271> = dense<32> : vector<4xi64>, "dlti.endianness" = "little", "dlti.stack_alignment" = 128 : i64>} {
  cir.func private @socket(!s32i, !s32i, !s32i) -> !s32i extra(#fn_attr) loc(#loc456)
  cir.func private @inet_addr(!cir.ptr<!s8i>) -> !u32i extra(#fn_attr) loc(#loc457)
  cir.global "private" constant cir_private dsolocal @".str" = #cir.const_array<"127.0.0.1\00" : !cir.array<!s8i x 10>> : !cir.array<!s8i x 10> {alignment = 1 : i64} loc(#loc5)
  cir.func private @htons(!u16i) -> !u16i extra(#fn_attr) loc(#loc458)
  cir.func private @connect(!s32i, !cir.ptr<!ty_sockaddr>, !u32i) -> !s32i loc(#loc459)
  cir.func private @recv(!s32i, !cir.ptr<!void>, !u64i, !s32i) -> !s64i loc(#loc460)
  cir.func private @atoi(!cir.ptr<!s8i>) -> !s32i extra(#fn_attr) loc(#loc461)
  cir.func private @close(!s32i) -> !s32i loc(#loc462)
  cir.global "private" internal dsolocal @badStatic = #cir.int<0> : !s32i {alignment = 4 : i64} loc(#loc463)
  cir.func private @printIntLine(!s32i) loc(#loc464)
  cir.func internal private @badSink(%arg0: !s32i loc(fused[#loc22, #loc23])) extra(#fn_attr1) {
    %0 = cir.alloca !s32i, !cir.ptr<!s32i>, ["data", init] {alignment = 4 : i64} loc(#loc466)
    cir.store %arg0, %0 : !s32i, !cir.ptr<!s32i> loc(#loc24)
    cir.scope {
      %1 = cir.get_global @badStatic : !cir.ptr<!s32i> loc(#loc463)
      %2 = cir.load %1 : !cir.ptr<!s32i>, !s32i loc(#loc27)
      %3 = cir.cast(int_to_bool, %2 : !s32i), !cir.bool loc(#loc27)
      cir.if %3 {
        cir.scope {
          %4 = cir.alloca !s32i, !cir.ptr<!s32i>, ["result", init] {alignment = 4 : i64} loc(#loc470)
          %5 = cir.load %0 : !cir.ptr<!s32i>, !s32i loc(#loc33)
          %6 = cir.load %0 : !cir.ptr<!s32i>, !s32i loc(#loc32)
          %7 = cir.binop(mul, %5, %6) nsw : !s32i loc(#loc33)
          cir.store %7, %4 : !s32i, !cir.ptr<!s32i> loc(#loc470)
          %8 = cir.load %4 : !cir.ptr<!s32i>, !s32i loc(#loc34)
          cir.call @printIntLine(%8) : (!s32i) -> () loc(#loc35)
        } loc(#loc469)
      } loc(#loc468)
    } loc(#loc467)
    cir.return loc(#loc21)
  } loc(#loc465)
  cir.func no_proto @CWE190_Integer_Overflow__int_connect_socket_square_21_bad() extra(#fn_attr1) {
    %0 = cir.alloca !s32i, !cir.ptr<!s32i>, ["data"] {alignment = 4 : i64} loc(#loc472)
    %1 = cir.const #cir.int<0> : !s32i loc(#loc40)
    cir.store %1, %0 : !s32i, !cir.ptr<!s32i> loc(#loc473)
    cir.scope {
      %5 = cir.alloca !s32i, !cir.ptr<!s32i>, ["recvResult"] {alignment = 4 : i64} loc(#loc475)
      %6 = cir.alloca !ty_sockaddr_in, !cir.ptr<!ty_sockaddr_in>, ["service"] {alignment = 4 : i64} loc(#loc476)
      %7 = cir.alloca !s32i, !cir.ptr<!s32i>, ["connectSocket", init] {alignment = 4 : i64} loc(#loc477)
      %8 = cir.alloca !cir.array<!s8i x 14>, !cir.ptr<!cir.array<!s8i x 14>>, ["inputBuffer"] {alignment = 1 : i64} loc(#loc478)
      %9 = cir.const #cir.int<1> : !s32i loc(#loc49)
      %10 = cir.unary(minus, %9) : !s32i, !s32i loc(#loc49)
      cir.store %10, %7 : !s32i, !cir.ptr<!s32i> loc(#loc477)
      cir.scope {
        cir.do {
          %11 = cir.const #cir.int<2> : !s32i loc(#loc54)
          %12 = cir.const #cir.int<1> : !s32i loc(#loc55)
          %13 = cir.const #cir.int<6> : !s32i loc(#loc56)
          %14 = cir.call @socket(%11, %12, %13) : (!s32i, !s32i, !s32i) -> !s32i extra(#fn_attr) loc(#loc57)
          cir.store %14, %7 : !s32i, !cir.ptr<!s32i> loc(#loc480)
          cir.scope {
            %53 = cir.load %7 : !cir.ptr<!s32i>, !s32i loc(#loc62)
            %54 = cir.const #cir.int<1> : !s32i loc(#loc63)
            %55 = cir.unary(minus, %54) : !s32i, !s32i loc(#loc63)
            %56 = cir.cmp(eq, %53, %55) : !s32i, !cir.bool loc(#loc482)
            cir.if %56 {
              cir.break loc(#loc65)
            } loc(#loc483)
          } loc(#loc481)
          %15 = cir.cast(bitcast, %6 : !cir.ptr<!ty_sockaddr_in>), !cir.ptr<!void> loc(#loc484)
          %16 = cir.const #cir.int<0> : !s32i loc(#loc68)
          %17 = cir.const #cir.int<16> : !u64i loc(#loc485)
          cir.libc.memset %17 bytes from %15 set to %16 : !cir.ptr<!void>, !s32i, !u64i loc(#loc486)
          %18 = cir.const #cir.int<2> : !s32i loc(#loc73)
          %19 = cir.cast(integral, %18 : !s32i), !u16i loc(#loc73)
          %20 = cir.get_member %6[0] {name = "sin_family"} : !cir.ptr<!ty_sockaddr_in> -> !cir.ptr<!u16i> loc(#loc74)
          cir.store %19, %20 : !u16i, !cir.ptr<!u16i> loc(#loc487)
          %21 = cir.get_global @".str" : !cir.ptr<!cir.array<!s8i x 10>> loc(#loc5)
          %22 = cir.cast(array_to_ptrdecay, %21 : !cir.ptr<!cir.array<!s8i x 10>>), !cir.ptr<!s8i> loc(#loc5)
          %23 = cir.call @inet_addr(%22) : (!cir.ptr<!s8i>) -> !u32i extra(#fn_attr) loc(#loc76)
          %24 = cir.get_member %6[2] {name = "sin_addr"} : !cir.ptr<!ty_sockaddr_in> -> !cir.ptr<!ty_in_addr> loc(#loc77)
          %25 = cir.get_member %24[0] {name = "s_addr"} : !cir.ptr<!ty_in_addr> -> !cir.ptr<!u32i> loc(#loc78)
          cir.store %23, %25 : !u32i, !cir.ptr<!u32i> loc(#loc488)
          %26 = cir.const #cir.int<27015> : !s32i loc(#loc81)
          %27 = cir.cast(integral, %26 : !s32i), !u16i loc(#loc81)
          %28 = cir.call @htons(%27) : (!u16i) -> !u16i extra(#fn_attr) loc(#loc82)
          %29 = cir.get_member %6[1] {name = "sin_port"} : !cir.ptr<!ty_sockaddr_in> -> !cir.ptr<!u16i> loc(#loc83)
          cir.store %28, %29 : !u16i, !cir.ptr<!u16i> loc(#loc489)
          cir.scope {
            %53 = cir.load %7 : !cir.ptr<!s32i>, !s32i loc(#loc88)
            %54 = cir.cast(bitcast, %6 : !cir.ptr<!ty_sockaddr_in>), !cir.ptr<!ty_sockaddr> loc(#loc491)
            %55 = cir.const #cir.int<16> : !u64i loc(#loc492)
            %56 = cir.cast(integral, %55 : !u64i), !u32i loc(#loc492)
            %57 = cir.call @connect(%53, %54, %56) : (!s32i, !cir.ptr<!ty_sockaddr>, !u32i) -> !s32i loc(#loc93)
            %58 = cir.const #cir.int<1> : !s32i loc(#loc94)
            %59 = cir.unary(minus, %58) : !s32i, !s32i loc(#loc94)
            %60 = cir.cmp(eq, %57, %59) : !s32i, !cir.bool loc(#loc493)
            cir.if %60 {
              cir.break loc(#loc96)
            } loc(#loc494)
          } loc(#loc490)
          %30 = cir.load %7 : !cir.ptr<!s32i>, !s32i loc(#loc97)
          %31 = cir.cast(array_to_ptrdecay, %8 : !cir.ptr<!cir.array<!s8i x 14>>), !cir.ptr<!s8i> loc(#loc98)
          %32 = cir.cast(bitcast, %31 : !cir.ptr<!s8i>), !cir.ptr<!void> loc(#loc98)
          %33 = cir.const #cir.int<3> : !s32i loc(#loc99)
          %34 = cir.cast(integral, %33 : !s32i), !u64i loc(#loc99)
          %35 = cir.const #cir.int<4> : !u64i loc(#loc99)
          %36 = cir.binop(mul, %34, %35) : !u64i loc(#loc99)
          %37 = cir.const #cir.int<2> : !s32i loc(#loc99)
          %38 = cir.cast(integral, %37 : !s32i), !u64i loc(#loc99)
          %39 = cir.binop(add, %36, %38) : !u64i loc(#loc99)
          %40 = cir.const #cir.int<1> : !s32i loc(#loc100)
          %41 = cir.cast(integral, %40 : !s32i), !u64i loc(#loc100)
          %42 = cir.binop(sub, %39, %41) : !u64i loc(#loc495)
          %43 = cir.const #cir.int<0> : !s32i loc(#loc101)
          %44 = cir.call @recv(%30, %32, %42, %43) : (!s32i, !cir.ptr<!void>, !u64i, !s32i) -> !s64i loc(#loc102)
          %45 = cir.cast(integral, %44 : !s64i), !s32i loc(#loc102)
          cir.store %45, %5 : !s32i, !cir.ptr<!s32i> loc(#loc496)
          cir.scope {
            %53 = cir.load %5 : !cir.ptr<!s32i>, !s32i loc(#loc107)
            %54 = cir.const #cir.int<1> : !s32i loc(#loc108)
            %55 = cir.unary(minus, %54) : !s32i, !s32i loc(#loc108)
            %56 = cir.cmp(eq, %53, %55) : !s32i, !cir.bool loc(#loc498)
            %57 = cir.ternary(%56, true {
              %58 = cir.const #true loc(#loc109)
              cir.yield %58 : !cir.bool loc(#loc109)
            }, false {
              %58 = cir.load %5 : !cir.ptr<!s32i>, !s32i loc(#loc110)
              %59 = cir.const #cir.int<0> : !s32i loc(#loc111)
              %60 = cir.cmp(eq, %58, %59) : !s32i, !cir.bool loc(#loc499)
              %61 = cir.ternary(%60, true {
                %62 = cir.const #true loc(#loc109)
                cir.yield %62 : !cir.bool loc(#loc109)
              }, false {
                %62 = cir.const #false loc(#loc109)
                cir.yield %62 : !cir.bool loc(#loc109)
              }) : (!cir.bool) -> !cir.bool loc(#loc109)
              cir.yield %61 : !cir.bool loc(#loc109)
            }) : (!cir.bool) -> !cir.bool loc(#loc109)
            cir.if %57 {
              cir.break loc(#loc113)
            } loc(#loc500)
          } loc(#loc497)
          %46 = cir.const #cir.int<0> : !s32i loc(#loc114)
          %47 = cir.cast(integral, %46 : !s32i), !s8i loc(#loc114)
          %48 = cir.load %5 : !cir.ptr<!s32i>, !s32i loc(#loc115)
          %49 = cir.cast(array_to_ptrdecay, %8 : !cir.ptr<!cir.array<!s8i x 14>>), !cir.ptr<!s8i> loc(#loc116)
          %50 = cir.ptr_stride(%49 : !cir.ptr<!s8i>, %48 : !s32i), !cir.ptr<!s8i> loc(#loc116)
          cir.store %47, %50 : !s8i, !cir.ptr<!s8i> loc(#loc501)
          %51 = cir.cast(array_to_ptrdecay, %8 : !cir.ptr<!cir.array<!s8i x 14>>), !cir.ptr<!s8i> loc(#loc117)
          %52 = cir.call @atoi(%51) : (!cir.ptr<!s8i>) -> !s32i extra(#fn_attr) loc(#loc118)
          cir.store %52, %0 : !s32i, !cir.ptr<!s32i> loc(#loc502)
          cir.yield loc(#loc53)
        } while {
          %11 = cir.const #cir.int<0> : !s32i loc(#loc121)
          %12 = cir.cast(int_to_bool, %11 : !s32i), !cir.bool loc(#loc121)
          cir.condition(%12) loc(#loc121)
        } loc(#loc479)
      } loc(#loc479)
      cir.scope {
        %11 = cir.load %7 : !cir.ptr<!s32i>, !s32i loc(#loc124)
        %12 = cir.const #cir.int<1> : !s32i loc(#loc125)
        %13 = cir.unary(minus, %12) : !s32i, !s32i loc(#loc125)
        %14 = cir.cmp(ne, %11, %13) : !s32i, !cir.bool loc(#loc504)
        cir.if %14 {
          %15 = cir.load %7 : !cir.ptr<!s32i>, !s32i loc(#loc127)
          %16 = cir.call @close(%15) : (!s32i) -> !s32i loc(#loc128)
        } loc(#loc505)
      } loc(#loc503)
    } loc(#loc474)
    %2 = cir.const #cir.int<1> : !s32i loc(#loc129)
    %3 = cir.get_global @badStatic : !cir.ptr<!s32i> loc(#loc463)
    cir.store %2, %3 : !s32i, !cir.ptr<!s32i> loc(#loc506)
    %4 = cir.load %0 : !cir.ptr<!s32i>, !s32i loc(#loc131)
    cir.call @badSink(%4) : (!s32i) -> () loc(#loc132)
    cir.return loc(#loc37)
  } loc(#loc471)
  cir.func no_proto @CWE190_Integer_Overflow__int_connect_socket_square_21_good() extra(#fn_attr1) {
    %0 = cir.get_global @goodB2G1 : !cir.ptr<!cir.func<!void ()>> loc(#loc508)
    cir.call %0() : (!cir.ptr<!cir.func<!void ()>>) -> () loc(#loc135)
    %1 = cir.get_global @goodB2G2 : !cir.ptr<!cir.func<!void ()>> loc(#loc509)
    cir.call %1() : (!cir.ptr<!cir.func<!void ()>>) -> () loc(#loc137)
    %2 = cir.get_global @goodG2B : !cir.ptr<!cir.func<!void ()>> loc(#loc510)
    cir.call %2() : (!cir.ptr<!cir.func<!void ()>>) -> () loc(#loc139)
    cir.return loc(#loc134)
  } loc(#loc507)
  cir.func private @srand(!u32i) extra(#fn_attr) loc(#loc511)
  cir.func private @time(!cir.ptr<!s64i>) -> !s64i extra(#fn_attr) loc(#loc512)
  cir.func private @printLine(!cir.ptr<!s8i>) loc(#loc513)
  cir.global "private" constant cir_private dsolocal @".str.1" = #cir.const_array<"Calling good()...\00" : !cir.array<!s8i x 18>> : !cir.array<!s8i x 18> {alignment = 1 : i64} loc(#loc147)
  cir.global "private" constant cir_private dsolocal @".str.2" = #cir.const_array<"Finished good()\00" : !cir.array<!s8i x 16>> : !cir.array<!s8i x 16> {alignment = 1 : i64} loc(#loc148)
  cir.global "private" constant cir_private dsolocal @".str.3" = #cir.const_array<"Calling bad()...\00" : !cir.array<!s8i x 17>> : !cir.array<!s8i x 17> {alignment = 1 : i64} loc(#loc149)
  cir.global "private" constant cir_private dsolocal @".str.4" = #cir.const_array<"Finished bad()\00" : !cir.array<!s8i x 15>> : !cir.array<!s8i x 15> {alignment = 1 : i64} loc(#loc150)
  cir.func @main(%arg0: !s32i loc(fused[#loc153, #loc154]), %arg1: !cir.ptr<!cir.ptr<!s8i>> loc(fused[#loc155, #loc156])) -> !s32i extra(#fn_attr1) {
    %0 = cir.alloca !s32i, !cir.ptr<!s32i>, ["argc", init] {alignment = 4 : i64} loc(#loc515)
    %1 = cir.alloca !cir.ptr<!cir.ptr<!s8i>>, !cir.ptr<!cir.ptr<!cir.ptr<!s8i>>>, ["argv", init] {alignment = 8 : i64} loc(#loc516)
    %2 = cir.alloca !s32i, !cir.ptr<!s32i>, ["__retval"] {alignment = 4 : i64} loc(#loc152)
    cir.store %arg0, %0 : !s32i, !cir.ptr<!s32i> loc(#loc157)
    cir.store %arg1, %1 : !cir.ptr<!cir.ptr<!s8i>>, !cir.ptr<!cir.ptr<!cir.ptr<!s8i>>> loc(#loc157)
    %3 = cir.const #cir.ptr<null> : !cir.ptr<!s64i> loc(#loc158)
    %4 = cir.call @time(%3) : (!cir.ptr<!s64i>) -> !s64i extra(#fn_attr) loc(#loc159)
    %5 = cir.cast(integral, %4 : !s64i), !u32i loc(#loc159)
    cir.call @srand(%5) : (!u32i) -> () extra(#fn_attr) loc(#loc160)
    %6 = cir.get_global @".str.1" : !cir.ptr<!cir.array<!s8i x 18>> loc(#loc147)
    %7 = cir.cast(array_to_ptrdecay, %6 : !cir.ptr<!cir.array<!s8i x 18>>), !cir.ptr<!s8i> loc(#loc147)
    cir.call @printLine(%7) : (!cir.ptr<!s8i>) -> () loc(#loc161)
    %8 = cir.get_global @CWE190_Integer_Overflow__int_connect_socket_square_21_good : !cir.ptr<!cir.func<!void ()>> loc(#loc517)
    cir.call @CWE190_Integer_Overflow__int_connect_socket_square_21_good() : () -> () loc(#loc162)
    %9 = cir.get_global @".str.2" : !cir.ptr<!cir.array<!s8i x 16>> loc(#loc148)
    %10 = cir.cast(array_to_ptrdecay, %9 : !cir.ptr<!cir.array<!s8i x 16>>), !cir.ptr<!s8i> loc(#loc148)
    cir.call @printLine(%10) : (!cir.ptr<!s8i>) -> () loc(#loc164)
    %11 = cir.get_global @".str.3" : !cir.ptr<!cir.array<!s8i x 17>> loc(#loc149)
    %12 = cir.cast(array_to_ptrdecay, %11 : !cir.ptr<!cir.array<!s8i x 17>>), !cir.ptr<!s8i> loc(#loc149)
    cir.call @printLine(%12) : (!cir.ptr<!s8i>) -> () loc(#loc165)
    %13 = cir.get_global @CWE190_Integer_Overflow__int_connect_socket_square_21_bad : !cir.ptr<!cir.func<!void ()>> loc(#loc518)
    cir.call @CWE190_Integer_Overflow__int_connect_socket_square_21_bad() : () -> () loc(#loc166)
    %14 = cir.get_global @".str.4" : !cir.ptr<!cir.array<!s8i x 15>> loc(#loc150)
    %15 = cir.cast(array_to_ptrdecay, %14 : !cir.ptr<!cir.array<!s8i x 15>>), !cir.ptr<!s8i> loc(#loc150)
    cir.call @printLine(%15) : (!cir.ptr<!s8i>) -> () loc(#loc168)
    %16 = cir.const #cir.int<0> : !s32i loc(#loc169)
    cir.store %16, %2 : !s32i, !cir.ptr<!s32i> loc(#loc519)
    %17 = cir.load %2 : !cir.ptr<!s32i>, !s32i loc(#loc519)
    cir.return %17 : !s32i loc(#loc519)
  } loc(#loc514)
  cir.global "private" internal dsolocal @goodB2G1Static = #cir.int<0> : !s32i {alignment = 4 : i64} loc(#loc520)
  cir.global "private" constant cir_private dsolocal @".str.5" = #cir.const_array<"Benign, fixed string\00" : !cir.array<!s8i x 21>> : !cir.array<!s8i x 21> {alignment = 1 : i64} loc(#loc173)
  cir.func private @sqrt(!cir.double) -> !cir.double extra(#fn_attr) loc(#loc174)
  cir.global "private" constant cir_private dsolocal @".str.6" = #cir.const_array<"data value is too large to perform arithmetic safely.\00" : !cir.array<!s8i x 54>> : !cir.array<!s8i x 54> {alignment = 1 : i64} loc(#loc175)
  cir.func internal private @goodB2G1Sink(%arg0: !s32i loc(fused[#loc178, #loc179])) extra(#fn_attr1) {
    %0 = cir.alloca !s32i, !cir.ptr<!s32i>, ["data", init] {alignment = 4 : i64} loc(#loc522)
    cir.store %arg0, %0 : !s32i, !cir.ptr<!s32i> loc(#loc180)
    cir.scope {
      %1 = cir.get_global @goodB2G1Static : !cir.ptr<!s32i> loc(#loc520)
      %2 = cir.load %1 : !cir.ptr<!s32i>, !s32i loc(#loc183)
      %3 = cir.cast(int_to_bool, %2 : !s32i), !cir.bool loc(#loc183)
      cir.if %3 {
        %4 = cir.get_global @".str.5" : !cir.ptr<!cir.array<!s8i x 21>> loc(#loc173)
        %5 = cir.cast(array_to_ptrdecay, %4 : !cir.ptr<!cir.array<!s8i x 21>>), !cir.ptr<!s8i> loc(#loc173)
        cir.call @printLine(%5) : (!cir.ptr<!s8i>) -> () loc(#loc187)
      } else {
        cir.scope {
          %4 = cir.load %0 : !cir.ptr<!s32i>, !s32i loc(#loc190)
          %5 = cir.const #cir.int<2147483647> : !s32i loc(#loc191)
          %6 = cir.unary(minus, %5) : !s32i, !s32i loc(#loc191)
          %7 = cir.const #cir.int<1> : !s32i loc(#loc191)
          %8 = cir.binop(sub, %6, %7) nsw : !s32i loc(#loc191)
          %9 = cir.cmp(gt, %4, %8) : !s32i, !cir.bool loc(#loc526)
          %10 = cir.ternary(%9, true {
            %11 = cir.load %0 : !cir.ptr<!s32i>, !s32i loc(#loc193)
            %12 = cir.abs %11 poison : !s32i loc(#loc194)
            %13 = cir.cast(integral, %12 : !s32i), !s64i loc(#loc194)
            %14 = cir.get_global @sqrt : !cir.ptr<!cir.func<!cir.double (!cir.double)>> loc(#loc195)
            %15 = cir.const #cir.int<2147483647> : !s32i loc(#loc196)
            %16 = cir.cast(int_to_float, %15 : !s32i), !cir.double loc(#loc196)
            %17 = cir.call @sqrt(%16) : (!cir.double) -> !cir.double extra(#fn_attr) loc(#loc195)
            %18 = cir.cast(float_to_int, %17 : !cir.double), !s64i loc(#loc195)
            %19 = cir.cmp(lt, %13, %18) : !s64i, !cir.bool loc(#loc527)
            %20 = cir.ternary(%19, true {
              %21 = cir.const #true loc(#loc192)
              cir.yield %21 : !cir.bool loc(#loc192)
            }, false {
              %21 = cir.const #false loc(#loc192)
              cir.yield %21 : !cir.bool loc(#loc192)
            }) : (!cir.bool) -> !cir.bool loc(#loc192)
            cir.yield %20 : !cir.bool loc(#loc192)
          }, false {
            %11 = cir.const #false loc(#loc192)
            cir.yield %11 : !cir.bool loc(#loc192)
          }) : (!cir.bool) -> !cir.bool loc(#loc192)
          cir.if %10 {
            %11 = cir.alloca !s32i, !cir.ptr<!s32i>, ["result", init] {alignment = 4 : i64} loc(#loc529)
            %12 = cir.load %0 : !cir.ptr<!s32i>, !s32i loc(#loc203)
            %13 = cir.load %0 : !cir.ptr<!s32i>, !s32i loc(#loc202)
            %14 = cir.binop(mul, %12, %13) nsw : !s32i loc(#loc203)
            cir.store %14, %11 : !s32i, !cir.ptr<!s32i> loc(#loc529)
            %15 = cir.load %11 : !cir.ptr<!s32i>, !s32i loc(#loc204)
            cir.call @printIntLine(%15) : (!s32i) -> () loc(#loc205)
          } else {
            %11 = cir.get_global @".str.6" : !cir.ptr<!cir.array<!s8i x 54>> loc(#loc175)
            %12 = cir.cast(array_to_ptrdecay, %11 : !cir.ptr<!cir.array<!s8i x 54>>), !cir.ptr<!s8i> loc(#loc175)
            cir.call @printLine(%12) : (!cir.ptr<!s8i>) -> () loc(#loc206)
          } loc(#loc528)
        } loc(#loc525)
      } loc(#loc524)
    } loc(#loc523)
    cir.return loc(#loc177)
  } loc(#loc521)
  cir.func no_proto internal private @goodB2G1() extra(#fn_attr1) {
    %0 = cir.alloca !s32i, !cir.ptr<!s32i>, ["data"] {alignment = 4 : i64} loc(#loc531)
    %1 = cir.const #cir.int<0> : !s32i loc(#loc211)
    cir.store %1, %0 : !s32i, !cir.ptr<!s32i> loc(#loc532)
    cir.scope {
      %5 = cir.alloca !s32i, !cir.ptr<!s32i>, ["recvResult"] {alignment = 4 : i64} loc(#loc534)
      %6 = cir.alloca !ty_sockaddr_in, !cir.ptr<!ty_sockaddr_in>, ["service"] {alignment = 4 : i64} loc(#loc535)
      %7 = cir.alloca !s32i, !cir.ptr<!s32i>, ["connectSocket", init] {alignment = 4 : i64} loc(#loc536)
      %8 = cir.alloca !cir.array<!s8i x 14>, !cir.ptr<!cir.array<!s8i x 14>>, ["inputBuffer"] {alignment = 1 : i64} loc(#loc537)
      %9 = cir.const #cir.int<1> : !s32i loc(#loc220)
      %10 = cir.unary(minus, %9) : !s32i, !s32i loc(#loc220)
      cir.store %10, %7 : !s32i, !cir.ptr<!s32i> loc(#loc536)
      cir.scope {
        cir.do {
          %11 = cir.const #cir.int<2> : !s32i loc(#loc225)
          %12 = cir.const #cir.int<1> : !s32i loc(#loc226)
          %13 = cir.const #cir.int<6> : !s32i loc(#loc227)
          %14 = cir.call @socket(%11, %12, %13) : (!s32i, !s32i, !s32i) -> !s32i extra(#fn_attr) loc(#loc228)
          cir.store %14, %7 : !s32i, !cir.ptr<!s32i> loc(#loc539)
          cir.scope {
            %53 = cir.load %7 : !cir.ptr<!s32i>, !s32i loc(#loc233)
            %54 = cir.const #cir.int<1> : !s32i loc(#loc234)
            %55 = cir.unary(minus, %54) : !s32i, !s32i loc(#loc234)
            %56 = cir.cmp(eq, %53, %55) : !s32i, !cir.bool loc(#loc541)
            cir.if %56 {
              cir.break loc(#loc236)
            } loc(#loc542)
          } loc(#loc540)
          %15 = cir.cast(bitcast, %6 : !cir.ptr<!ty_sockaddr_in>), !cir.ptr<!void> loc(#loc543)
          %16 = cir.const #cir.int<0> : !s32i loc(#loc239)
          %17 = cir.const #cir.int<16> : !u64i loc(#loc544)
          cir.libc.memset %17 bytes from %15 set to %16 : !cir.ptr<!void>, !s32i, !u64i loc(#loc545)
          %18 = cir.const #cir.int<2> : !s32i loc(#loc244)
          %19 = cir.cast(integral, %18 : !s32i), !u16i loc(#loc244)
          %20 = cir.get_member %6[0] {name = "sin_family"} : !cir.ptr<!ty_sockaddr_in> -> !cir.ptr<!u16i> loc(#loc74)
          cir.store %19, %20 : !u16i, !cir.ptr<!u16i> loc(#loc546)
          %21 = cir.get_global @".str" : !cir.ptr<!cir.array<!s8i x 10>> loc(#loc246)
          %22 = cir.cast(array_to_ptrdecay, %21 : !cir.ptr<!cir.array<!s8i x 10>>), !cir.ptr<!s8i> loc(#loc246)
          %23 = cir.call @inet_addr(%22) : (!cir.ptr<!s8i>) -> !u32i extra(#fn_attr) loc(#loc247)
          %24 = cir.get_member %6[2] {name = "sin_addr"} : !cir.ptr<!ty_sockaddr_in> -> !cir.ptr<!ty_in_addr> loc(#loc77)
          %25 = cir.get_member %24[0] {name = "s_addr"} : !cir.ptr<!ty_in_addr> -> !cir.ptr<!u32i> loc(#loc78)
          cir.store %23, %25 : !u32i, !cir.ptr<!u32i> loc(#loc547)
          %26 = cir.const #cir.int<27015> : !s32i loc(#loc250)
          %27 = cir.cast(integral, %26 : !s32i), !u16i loc(#loc250)
          %28 = cir.call @htons(%27) : (!u16i) -> !u16i extra(#fn_attr) loc(#loc251)
          %29 = cir.get_member %6[1] {name = "sin_port"} : !cir.ptr<!ty_sockaddr_in> -> !cir.ptr<!u16i> loc(#loc83)
          cir.store %28, %29 : !u16i, !cir.ptr<!u16i> loc(#loc548)
          cir.scope {
            %53 = cir.load %7 : !cir.ptr<!s32i>, !s32i loc(#loc256)
            %54 = cir.cast(bitcast, %6 : !cir.ptr<!ty_sockaddr_in>), !cir.ptr<!ty_sockaddr> loc(#loc550)
            %55 = cir.const #cir.int<16> : !u64i loc(#loc551)
            %56 = cir.cast(integral, %55 : !u64i), !u32i loc(#loc551)
            %57 = cir.call @connect(%53, %54, %56) : (!s32i, !cir.ptr<!ty_sockaddr>, !u32i) -> !s32i loc(#loc261)
            %58 = cir.const #cir.int<1> : !s32i loc(#loc262)
            %59 = cir.unary(minus, %58) : !s32i, !s32i loc(#loc262)
            %60 = cir.cmp(eq, %57, %59) : !s32i, !cir.bool loc(#loc552)
            cir.if %60 {
              cir.break loc(#loc264)
            } loc(#loc553)
          } loc(#loc549)
          %30 = cir.load %7 : !cir.ptr<!s32i>, !s32i loc(#loc265)
          %31 = cir.cast(array_to_ptrdecay, %8 : !cir.ptr<!cir.array<!s8i x 14>>), !cir.ptr<!s8i> loc(#loc266)
          %32 = cir.cast(bitcast, %31 : !cir.ptr<!s8i>), !cir.ptr<!void> loc(#loc266)
          %33 = cir.const #cir.int<3> : !s32i loc(#loc267)
          %34 = cir.cast(integral, %33 : !s32i), !u64i loc(#loc267)
          %35 = cir.const #cir.int<4> : !u64i loc(#loc267)
          %36 = cir.binop(mul, %34, %35) : !u64i loc(#loc267)
          %37 = cir.const #cir.int<2> : !s32i loc(#loc267)
          %38 = cir.cast(integral, %37 : !s32i), !u64i loc(#loc267)
          %39 = cir.binop(add, %36, %38) : !u64i loc(#loc267)
          %40 = cir.const #cir.int<1> : !s32i loc(#loc268)
          %41 = cir.cast(integral, %40 : !s32i), !u64i loc(#loc268)
          %42 = cir.binop(sub, %39, %41) : !u64i loc(#loc554)
          %43 = cir.const #cir.int<0> : !s32i loc(#loc269)
          %44 = cir.call @recv(%30, %32, %42, %43) : (!s32i, !cir.ptr<!void>, !u64i, !s32i) -> !s64i loc(#loc270)
          %45 = cir.cast(integral, %44 : !s64i), !s32i loc(#loc270)
          cir.store %45, %5 : !s32i, !cir.ptr<!s32i> loc(#loc555)
          cir.scope {
            %53 = cir.load %5 : !cir.ptr<!s32i>, !s32i loc(#loc275)
            %54 = cir.const #cir.int<1> : !s32i loc(#loc276)
            %55 = cir.unary(minus, %54) : !s32i, !s32i loc(#loc276)
            %56 = cir.cmp(eq, %53, %55) : !s32i, !cir.bool loc(#loc557)
            %57 = cir.ternary(%56, true {
              %58 = cir.const #true loc(#loc277)
              cir.yield %58 : !cir.bool loc(#loc277)
            }, false {
              %58 = cir.load %5 : !cir.ptr<!s32i>, !s32i loc(#loc278)
              %59 = cir.const #cir.int<0> : !s32i loc(#loc279)
              %60 = cir.cmp(eq, %58, %59) : !s32i, !cir.bool loc(#loc558)
              %61 = cir.ternary(%60, true {
                %62 = cir.const #true loc(#loc277)
                cir.yield %62 : !cir.bool loc(#loc277)
              }, false {
                %62 = cir.const #false loc(#loc277)
                cir.yield %62 : !cir.bool loc(#loc277)
              }) : (!cir.bool) -> !cir.bool loc(#loc277)
              cir.yield %61 : !cir.bool loc(#loc277)
            }) : (!cir.bool) -> !cir.bool loc(#loc277)
            cir.if %57 {
              cir.break loc(#loc281)
            } loc(#loc559)
          } loc(#loc556)
          %46 = cir.const #cir.int<0> : !s32i loc(#loc282)
          %47 = cir.cast(integral, %46 : !s32i), !s8i loc(#loc282)
          %48 = cir.load %5 : !cir.ptr<!s32i>, !s32i loc(#loc283)
          %49 = cir.cast(array_to_ptrdecay, %8 : !cir.ptr<!cir.array<!s8i x 14>>), !cir.ptr<!s8i> loc(#loc284)
          %50 = cir.ptr_stride(%49 : !cir.ptr<!s8i>, %48 : !s32i), !cir.ptr<!s8i> loc(#loc284)
          cir.store %47, %50 : !s8i, !cir.ptr<!s8i> loc(#loc560)
          %51 = cir.cast(array_to_ptrdecay, %8 : !cir.ptr<!cir.array<!s8i x 14>>), !cir.ptr<!s8i> loc(#loc285)
          %52 = cir.call @atoi(%51) : (!cir.ptr<!s8i>) -> !s32i extra(#fn_attr) loc(#loc286)
          cir.store %52, %0 : !s32i, !cir.ptr<!s32i> loc(#loc561)
          cir.yield loc(#loc224)
        } while {
          %11 = cir.const #cir.int<0> : !s32i loc(#loc289)
          %12 = cir.cast(int_to_bool, %11 : !s32i), !cir.bool loc(#loc289)
          cir.condition(%12) loc(#loc289)
        } loc(#loc538)
      } loc(#loc538)
      cir.scope {
        %11 = cir.load %7 : !cir.ptr<!s32i>, !s32i loc(#loc292)
        %12 = cir.const #cir.int<1> : !s32i loc(#loc293)
        %13 = cir.unary(minus, %12) : !s32i, !s32i loc(#loc293)
        %14 = cir.cmp(ne, %11, %13) : !s32i, !cir.bool loc(#loc563)
        cir.if %14 {
          %15 = cir.load %7 : !cir.ptr<!s32i>, !s32i loc(#loc295)
          %16 = cir.call @close(%15) : (!s32i) -> !s32i loc(#loc296)
        } loc(#loc564)
      } loc(#loc562)
    } loc(#loc533)
    %2 = cir.const #cir.int<0> : !s32i loc(#loc297)
    %3 = cir.get_global @goodB2G1Static : !cir.ptr<!s32i> loc(#loc520)
    cir.store %2, %3 : !s32i, !cir.ptr<!s32i> loc(#loc565)
    %4 = cir.load %0 : !cir.ptr<!s32i>, !s32i loc(#loc299)
    cir.call @goodB2G1Sink(%4) : (!s32i) -> () loc(#loc300)
    cir.return loc(#loc208)
  } loc(#loc530)
  cir.global "private" internal dsolocal @goodB2G2Static = #cir.int<0> : !s32i {alignment = 4 : i64} loc(#loc566)
  cir.func internal private @goodB2G2Sink(%arg0: !s32i loc(fused[#loc305, #loc306])) extra(#fn_attr1) {
    %0 = cir.alloca !s32i, !cir.ptr<!s32i>, ["data", init] {alignment = 4 : i64} loc(#loc568)
    cir.store %arg0, %0 : !s32i, !cir.ptr<!s32i> loc(#loc307)
    cir.scope {
      %1 = cir.get_global @goodB2G2Static : !cir.ptr<!s32i> loc(#loc566)
      %2 = cir.load %1 : !cir.ptr<!s32i>, !s32i loc(#loc310)
      %3 = cir.cast(int_to_bool, %2 : !s32i), !cir.bool loc(#loc310)
      cir.if %3 {
        cir.scope {
          %4 = cir.load %0 : !cir.ptr<!s32i>, !s32i loc(#loc314)
          %5 = cir.const #cir.int<2147483647> : !s32i loc(#loc315)
          %6 = cir.unary(minus, %5) : !s32i, !s32i loc(#loc315)
          %7 = cir.const #cir.int<1> : !s32i loc(#loc315)
          %8 = cir.binop(sub, %6, %7) nsw : !s32i loc(#loc315)
          %9 = cir.cmp(gt, %4, %8) : !s32i, !cir.bool loc(#loc572)
          %10 = cir.ternary(%9, true {
            %11 = cir.load %0 : !cir.ptr<!s32i>, !s32i loc(#loc317)
            %12 = cir.abs %11 poison : !s32i loc(#loc318)
            %13 = cir.cast(integral, %12 : !s32i), !s64i loc(#loc318)
            %14 = cir.get_global @sqrt : !cir.ptr<!cir.func<!cir.double (!cir.double)>> loc(#loc319)
            %15 = cir.const #cir.int<2147483647> : !s32i loc(#loc320)
            %16 = cir.cast(int_to_float, %15 : !s32i), !cir.double loc(#loc320)
            %17 = cir.call @sqrt(%16) : (!cir.double) -> !cir.double extra(#fn_attr) loc(#loc319)
            %18 = cir.cast(float_to_int, %17 : !cir.double), !s64i loc(#loc319)
            %19 = cir.cmp(lt, %13, %18) : !s64i, !cir.bool loc(#loc573)
            %20 = cir.ternary(%19, true {
              %21 = cir.const #true loc(#loc316)
              cir.yield %21 : !cir.bool loc(#loc316)
            }, false {
              %21 = cir.const #false loc(#loc316)
              cir.yield %21 : !cir.bool loc(#loc316)
            }) : (!cir.bool) -> !cir.bool loc(#loc316)
            cir.yield %20 : !cir.bool loc(#loc316)
          }, false {
            %11 = cir.const #false loc(#loc316)
            cir.yield %11 : !cir.bool loc(#loc316)
          }) : (!cir.bool) -> !cir.bool loc(#loc316)
          cir.if %10 {
            %11 = cir.alloca !s32i, !cir.ptr<!s32i>, ["result", init] {alignment = 4 : i64} loc(#loc575)
            %12 = cir.load %0 : !cir.ptr<!s32i>, !s32i loc(#loc327)
            %13 = cir.load %0 : !cir.ptr<!s32i>, !s32i loc(#loc326)
            %14 = cir.binop(mul, %12, %13) nsw : !s32i loc(#loc327)
            cir.store %14, %11 : !s32i, !cir.ptr<!s32i> loc(#loc575)
            %15 = cir.load %11 : !cir.ptr<!s32i>, !s32i loc(#loc328)
            cir.call @printIntLine(%15) : (!s32i) -> () loc(#loc329)
          } else {
            %11 = cir.get_global @".str.6" : !cir.ptr<!cir.array<!s8i x 54>> loc(#loc330)
            %12 = cir.cast(array_to_ptrdecay, %11 : !cir.ptr<!cir.array<!s8i x 54>>), !cir.ptr<!s8i> loc(#loc330)
            cir.call @printLine(%12) : (!cir.ptr<!s8i>) -> () loc(#loc331)
          } loc(#loc574)
        } loc(#loc571)
      } loc(#loc570)
    } loc(#loc569)
    cir.return loc(#loc304)
  } loc(#loc567)
  cir.func no_proto internal private @goodB2G2() extra(#fn_attr1) {
    %0 = cir.alloca !s32i, !cir.ptr<!s32i>, ["data"] {alignment = 4 : i64} loc(#loc577)
    %1 = cir.const #cir.int<0> : !s32i loc(#loc336)
    cir.store %1, %0 : !s32i, !cir.ptr<!s32i> loc(#loc578)
    cir.scope {
      %5 = cir.alloca !s32i, !cir.ptr<!s32i>, ["recvResult"] {alignment = 4 : i64} loc(#loc580)
      %6 = cir.alloca !ty_sockaddr_in, !cir.ptr<!ty_sockaddr_in>, ["service"] {alignment = 4 : i64} loc(#loc581)
      %7 = cir.alloca !s32i, !cir.ptr<!s32i>, ["connectSocket", init] {alignment = 4 : i64} loc(#loc582)
      %8 = cir.alloca !cir.array<!s8i x 14>, !cir.ptr<!cir.array<!s8i x 14>>, ["inputBuffer"] {alignment = 1 : i64} loc(#loc583)
      %9 = cir.const #cir.int<1> : !s32i loc(#loc345)
      %10 = cir.unary(minus, %9) : !s32i, !s32i loc(#loc345)
      cir.store %10, %7 : !s32i, !cir.ptr<!s32i> loc(#loc582)
      cir.scope {
        cir.do {
          %11 = cir.const #cir.int<2> : !s32i loc(#loc350)
          %12 = cir.const #cir.int<1> : !s32i loc(#loc351)
          %13 = cir.const #cir.int<6> : !s32i loc(#loc352)
          %14 = cir.call @socket(%11, %12, %13) : (!s32i, !s32i, !s32i) -> !s32i extra(#fn_attr) loc(#loc353)
          cir.store %14, %7 : !s32i, !cir.ptr<!s32i> loc(#loc585)
          cir.scope {
            %53 = cir.load %7 : !cir.ptr<!s32i>, !s32i loc(#loc358)
            %54 = cir.const #cir.int<1> : !s32i loc(#loc359)
            %55 = cir.unary(minus, %54) : !s32i, !s32i loc(#loc359)
            %56 = cir.cmp(eq, %53, %55) : !s32i, !cir.bool loc(#loc587)
            cir.if %56 {
              cir.break loc(#loc361)
            } loc(#loc588)
          } loc(#loc586)
          %15 = cir.cast(bitcast, %6 : !cir.ptr<!ty_sockaddr_in>), !cir.ptr<!void> loc(#loc589)
          %16 = cir.const #cir.int<0> : !s32i loc(#loc364)
          %17 = cir.const #cir.int<16> : !u64i loc(#loc590)
          cir.libc.memset %17 bytes from %15 set to %16 : !cir.ptr<!void>, !s32i, !u64i loc(#loc591)
          %18 = cir.const #cir.int<2> : !s32i loc(#loc369)
          %19 = cir.cast(integral, %18 : !s32i), !u16i loc(#loc369)
          %20 = cir.get_member %6[0] {name = "sin_family"} : !cir.ptr<!ty_sockaddr_in> -> !cir.ptr<!u16i> loc(#loc74)
          cir.store %19, %20 : !u16i, !cir.ptr<!u16i> loc(#loc592)
          %21 = cir.get_global @".str" : !cir.ptr<!cir.array<!s8i x 10>> loc(#loc371)
          %22 = cir.cast(array_to_ptrdecay, %21 : !cir.ptr<!cir.array<!s8i x 10>>), !cir.ptr<!s8i> loc(#loc371)
          %23 = cir.call @inet_addr(%22) : (!cir.ptr<!s8i>) -> !u32i extra(#fn_attr) loc(#loc372)
          %24 = cir.get_member %6[2] {name = "sin_addr"} : !cir.ptr<!ty_sockaddr_in> -> !cir.ptr<!ty_in_addr> loc(#loc77)
          %25 = cir.get_member %24[0] {name = "s_addr"} : !cir.ptr<!ty_in_addr> -> !cir.ptr<!u32i> loc(#loc78)
          cir.store %23, %25 : !u32i, !cir.ptr<!u32i> loc(#loc593)
          %26 = cir.const #cir.int<27015> : !s32i loc(#loc375)
          %27 = cir.cast(integral, %26 : !s32i), !u16i loc(#loc375)
          %28 = cir.call @htons(%27) : (!u16i) -> !u16i extra(#fn_attr) loc(#loc376)
          %29 = cir.get_member %6[1] {name = "sin_port"} : !cir.ptr<!ty_sockaddr_in> -> !cir.ptr<!u16i> loc(#loc83)
          cir.store %28, %29 : !u16i, !cir.ptr<!u16i> loc(#loc594)
          cir.scope {
            %53 = cir.load %7 : !cir.ptr<!s32i>, !s32i loc(#loc381)
            %54 = cir.cast(bitcast, %6 : !cir.ptr<!ty_sockaddr_in>), !cir.ptr<!ty_sockaddr> loc(#loc596)
            %55 = cir.const #cir.int<16> : !u64i loc(#loc597)
            %56 = cir.cast(integral, %55 : !u64i), !u32i loc(#loc597)
            %57 = cir.call @connect(%53, %54, %56) : (!s32i, !cir.ptr<!ty_sockaddr>, !u32i) -> !s32i loc(#loc386)
            %58 = cir.const #cir.int<1> : !s32i loc(#loc387)
            %59 = cir.unary(minus, %58) : !s32i, !s32i loc(#loc387)
            %60 = cir.cmp(eq, %57, %59) : !s32i, !cir.bool loc(#loc598)
            cir.if %60 {
              cir.break loc(#loc389)
            } loc(#loc599)
          } loc(#loc595)
          %30 = cir.load %7 : !cir.ptr<!s32i>, !s32i loc(#loc390)
          %31 = cir.cast(array_to_ptrdecay, %8 : !cir.ptr<!cir.array<!s8i x 14>>), !cir.ptr<!s8i> loc(#loc391)
          %32 = cir.cast(bitcast, %31 : !cir.ptr<!s8i>), !cir.ptr<!void> loc(#loc391)
          %33 = cir.const #cir.int<3> : !s32i loc(#loc392)
          %34 = cir.cast(integral, %33 : !s32i), !u64i loc(#loc392)
          %35 = cir.const #cir.int<4> : !u64i loc(#loc392)
          %36 = cir.binop(mul, %34, %35) : !u64i loc(#loc392)
          %37 = cir.const #cir.int<2> : !s32i loc(#loc392)
          %38 = cir.cast(integral, %37 : !s32i), !u64i loc(#loc392)
          %39 = cir.binop(add, %36, %38) : !u64i loc(#loc392)
          %40 = cir.const #cir.int<1> : !s32i loc(#loc393)
          %41 = cir.cast(integral, %40 : !s32i), !u64i loc(#loc393)
          %42 = cir.binop(sub, %39, %41) : !u64i loc(#loc600)
          %43 = cir.const #cir.int<0> : !s32i loc(#loc394)
          %44 = cir.call @recv(%30, %32, %42, %43) : (!s32i, !cir.ptr<!void>, !u64i, !s32i) -> !s64i loc(#loc395)
          %45 = cir.cast(integral, %44 : !s64i), !s32i loc(#loc395)
          cir.store %45, %5 : !s32i, !cir.ptr<!s32i> loc(#loc601)
          cir.scope {
            %53 = cir.load %5 : !cir.ptr<!s32i>, !s32i loc(#loc400)
            %54 = cir.const #cir.int<1> : !s32i loc(#loc401)
            %55 = cir.unary(minus, %54) : !s32i, !s32i loc(#loc401)
            %56 = cir.cmp(eq, %53, %55) : !s32i, !cir.bool loc(#loc603)
            %57 = cir.ternary(%56, true {
              %58 = cir.const #true loc(#loc402)
              cir.yield %58 : !cir.bool loc(#loc402)
            }, false {
              %58 = cir.load %5 : !cir.ptr<!s32i>, !s32i loc(#loc403)
              %59 = cir.const #cir.int<0> : !s32i loc(#loc404)
              %60 = cir.cmp(eq, %58, %59) : !s32i, !cir.bool loc(#loc604)
              %61 = cir.ternary(%60, true {
                %62 = cir.const #true loc(#loc402)
                cir.yield %62 : !cir.bool loc(#loc402)
              }, false {
                %62 = cir.const #false loc(#loc402)
                cir.yield %62 : !cir.bool loc(#loc402)
              }) : (!cir.bool) -> !cir.bool loc(#loc402)
              cir.yield %61 : !cir.bool loc(#loc402)
            }) : (!cir.bool) -> !cir.bool loc(#loc402)
            cir.if %57 {
              cir.break loc(#loc406)
            } loc(#loc605)
          } loc(#loc602)
          %46 = cir.const #cir.int<0> : !s32i loc(#loc407)
          %47 = cir.cast(integral, %46 : !s32i), !s8i loc(#loc407)
          %48 = cir.load %5 : !cir.ptr<!s32i>, !s32i loc(#loc408)
          %49 = cir.cast(array_to_ptrdecay, %8 : !cir.ptr<!cir.array<!s8i x 14>>), !cir.ptr<!s8i> loc(#loc409)
          %50 = cir.ptr_stride(%49 : !cir.ptr<!s8i>, %48 : !s32i), !cir.ptr<!s8i> loc(#loc409)
          cir.store %47, %50 : !s8i, !cir.ptr<!s8i> loc(#loc606)
          %51 = cir.cast(array_to_ptrdecay, %8 : !cir.ptr<!cir.array<!s8i x 14>>), !cir.ptr<!s8i> loc(#loc410)
          %52 = cir.call @atoi(%51) : (!cir.ptr<!s8i>) -> !s32i extra(#fn_attr) loc(#loc411)
          cir.store %52, %0 : !s32i, !cir.ptr<!s32i> loc(#loc607)
          cir.yield loc(#loc349)
        } while {
          %11 = cir.const #cir.int<0> : !s32i loc(#loc414)
          %12 = cir.cast(int_to_bool, %11 : !s32i), !cir.bool loc(#loc414)
          cir.condition(%12) loc(#loc414)
        } loc(#loc584)
      } loc(#loc584)
      cir.scope {
        %11 = cir.load %7 : !cir.ptr<!s32i>, !s32i loc(#loc417)
        %12 = cir.const #cir.int<1> : !s32i loc(#loc418)
        %13 = cir.unary(minus, %12) : !s32i, !s32i loc(#loc418)
        %14 = cir.cmp(ne, %11, %13) : !s32i, !cir.bool loc(#loc609)
        cir.if %14 {
          %15 = cir.load %7 : !cir.ptr<!s32i>, !s32i loc(#loc420)
          %16 = cir.call @close(%15) : (!s32i) -> !s32i loc(#loc421)
        } loc(#loc610)
      } loc(#loc608)
    } loc(#loc579)
    %2 = cir.const #cir.int<1> : !s32i loc(#loc422)
    %3 = cir.get_global @goodB2G2Static : !cir.ptr<!s32i> loc(#loc566)
    cir.store %2, %3 : !s32i, !cir.ptr<!s32i> loc(#loc611)
    %4 = cir.load %0 : !cir.ptr<!s32i>, !s32i loc(#loc424)
    cir.call @goodB2G2Sink(%4) : (!s32i) -> () loc(#loc425)
    cir.return loc(#loc333)
  } loc(#loc576)
  cir.global "private" internal dsolocal @goodG2BStatic = #cir.int<0> : !s32i {alignment = 4 : i64} loc(#loc612)
  cir.func internal private @goodG2BSink(%arg0: !s32i loc(fused[#loc430, #loc431])) extra(#fn_attr1) {
    %0 = cir.alloca !s32i, !cir.ptr<!s32i>, ["data", init] {alignment = 4 : i64} loc(#loc614)
    cir.store %arg0, %0 : !s32i, !cir.ptr<!s32i> loc(#loc432)
    cir.scope {
      %1 = cir.get_global @goodG2BStatic : !cir.ptr<!s32i> loc(#loc612)
      %2 = cir.load %1 : !cir.ptr<!s32i>, !s32i loc(#loc435)
      %3 = cir.cast(int_to_bool, %2 : !s32i), !cir.bool loc(#loc435)
      cir.if %3 {
        cir.scope {
          %4 = cir.alloca !s32i, !cir.ptr<!s32i>, ["result", init] {alignment = 4 : i64} loc(#loc618)
          %5 = cir.load %0 : !cir.ptr<!s32i>, !s32i loc(#loc441)
          %6 = cir.load %0 : !cir.ptr<!s32i>, !s32i loc(#loc440)
          %7 = cir.binop(mul, %5, %6) nsw : !s32i loc(#loc441)
          cir.store %7, %4 : !s32i, !cir.ptr<!s32i> loc(#loc618)
          %8 = cir.load %4 : !cir.ptr<!s32i>, !s32i loc(#loc442)
          cir.call @printIntLine(%8) : (!s32i) -> () loc(#loc443)
        } loc(#loc617)
      } loc(#loc616)
    } loc(#loc615)
    cir.return loc(#loc429)
  } loc(#loc613)
  cir.func no_proto internal private @goodG2B() extra(#fn_attr1) {
    %0 = cir.alloca !s32i, !cir.ptr<!s32i>, ["data"] {alignment = 4 : i64} loc(#loc620)
    %1 = cir.const #cir.int<0> : !s32i loc(#loc448)
    cir.store %1, %0 : !s32i, !cir.ptr<!s32i> loc(#loc621)
    %2 = cir.const #cir.int<2> : !s32i loc(#loc450)
    cir.store %2, %0 : !s32i, !cir.ptr<!s32i> loc(#loc622)
    %3 = cir.const #cir.int<1> : !s32i loc(#loc452)
    %4 = cir.get_global @goodG2BStatic : !cir.ptr<!s32i> loc(#loc612)
    cir.store %3, %4 : !s32i, !cir.ptr<!s32i> loc(#loc623)
    %5 = cir.load %0 : !cir.ptr<!s32i>, !s32i loc(#loc454)
    cir.call @goodG2BSink(%5) : (!s32i) -> () loc(#loc455)
    cir.return loc(#loc445)
  } loc(#loc619)
} loc(#loc)
#loc = loc("/home/ladisgin/git_proj/juliet-c/testcases/CWE190_Integer_Overflow/s02/CWE190_Integer_Overflow__int_connect_socket_square_21.c":0:0)
#loc1 = loc("/usr/include/sys/socket.h":102:1)
#loc2 = loc("/usr/include/sys/socket.h":102:62)
#loc3 = loc("/usr/include/arpa/inet.h":34:1)
#loc4 = loc("/usr/include/arpa/inet.h":34:47)
#loc5 = loc("CWE190_Integer_Overflow__int_connect_socket_square_21.c":92:49)
#loc6 = loc("/usr/include/netinet/in.h":404:1)
#loc7 = loc("/usr/include/netinet/in.h":405:40)
#loc8 = loc("/usr/include/sys/socket.h":126:1)
#loc9 = loc("/usr/include/sys/socket.h":126:75)
#loc10 = loc("/usr/include/sys/socket.h":145:1)
#loc11 = loc("/usr/include/sys/socket.h":145:68)
#loc12 = loc("/usr/include/stdlib.h":105:1)
#loc13 = loc("/usr/include/stdlib.h":106:33)
#loc14 = loc("/usr/include/unistd.h":358:1)
#loc15 = loc("/usr/include/unistd.h":358:27)
#loc16 = loc("CWE190_Integer_Overflow__int_connect_socket_square_21.c":47:1)
#loc17 = loc("CWE190_Integer_Overflow__int_connect_socket_square_21.c":47:24)
#loc18 = loc("../../../testcasesupport/std_testcase_io.h":18:1)
#loc19 = loc("../../../testcasesupport/std_testcase_io.h":18:33)
#loc20 = loc("CWE190_Integer_Overflow__int_connect_socket_square_21.c":49:1)
#loc21 = loc("CWE190_Integer_Overflow__int_connect_socket_square_21.c":59:1)
#loc24 = loc("CWE190_Integer_Overflow__int_connect_socket_square_21.c":50:1)
#loc25 = loc("CWE190_Integer_Overflow__int_connect_socket_square_21.c":51:5)
#loc26 = loc("CWE190_Integer_Overflow__int_connect_socket_square_21.c":58:5)
#loc27 = loc("CWE190_Integer_Overflow__int_connect_socket_square_21.c":51:8)
#loc28 = loc("CWE190_Integer_Overflow__int_connect_socket_square_21.c":52:5)
#loc29 = loc("CWE190_Integer_Overflow__int_connect_socket_square_21.c":53:9)
#loc30 = loc("CWE190_Integer_Overflow__int_connect_socket_square_21.c":57:9)
#loc31 = loc("CWE190_Integer_Overflow__int_connect_socket_square_21.c":55:13)
#loc32 = loc("CWE190_Integer_Overflow__int_connect_socket_square_21.c":55:33)
#loc33 = loc("CWE190_Integer_Overflow__int_connect_socket_square_21.c":55:26)
#loc34 = loc("CWE190_Integer_Overflow__int_connect_socket_square_21.c":56:26)
#loc35 = loc("CWE190_Integer_Overflow__int_connect_socket_square_21.c":56:13)
#loc36 = loc("CWE190_Integer_Overflow__int_connect_socket_square_21.c":61:1)
#loc37 = loc("CWE190_Integer_Overflow__int_connect_socket_square_21.c":124:1)
#loc38 = loc("CWE190_Integer_Overflow__int_connect_socket_square_21.c":63:5)
#loc39 = loc("CWE190_Integer_Overflow__int_connect_socket_square_21.c":63:9)
#loc40 = loc("CWE190_Integer_Overflow__int_connect_socket_square_21.c":65:12)
#loc41 = loc("CWE190_Integer_Overflow__int_connect_socket_square_21.c":65:5)
#loc42 = loc("CWE190_Integer_Overflow__int_connect_socket_square_21.c":66:5)
#loc43 = loc("CWE190_Integer_Overflow__int_connect_socket_square_21.c":121:5)
#loc44 = loc("CWE190_Integer_Overflow__int_connect_socket_square_21.c":71:9)
#loc45 = loc("CWE190_Integer_Overflow__int_connect_socket_square_21.c":71:13)
#loc46 = loc("CWE190_Integer_Overflow__int_connect_socket_square_21.c":72:9)
#loc47 = loc("CWE190_Integer_Overflow__int_connect_socket_square_21.c":72:28)
#loc48 = loc("CWE190_Integer_Overflow__int_connect_socket_square_21.c":73:9)
#loc49 = loc("CWE190_Integer_Overflow__int_connect_socket_square_21.c":73:32)
#loc50 = loc("CWE190_Integer_Overflow__int_connect_socket_square_21.c":74:9)
#loc51 = loc("CWE190_Integer_Overflow__int_connect_socket_square_21.c":74:41)
#loc52 = loc("CWE190_Integer_Overflow__int_connect_socket_square_21.c":75:9)
#loc53 = loc("CWE190_Integer_Overflow__int_connect_socket_square_21.c":110:17)
#loc54 = loc("CWE190_Integer_Overflow__int_connect_socket_square_21.c":85:36)
#loc55 = loc("CWE190_Integer_Overflow__int_connect_socket_square_21.c":85:45)
#loc56 = loc("CWE190_Integer_Overflow__int_connect_socket_square_21.c":85:58)
#loc57 = loc("CWE190_Integer_Overflow__int_connect_socket_square_21.c":85:29)
#loc58 = loc("CWE190_Integer_Overflow__int_connect_socket_square_21.c":85:13)
#loc59 = loc("CWE190_Integer_Overflow__int_connect_socket_square_21.c":85:69)
#loc60 = loc("CWE190_Integer_Overflow__int_connect_socket_square_21.c":86:13)
#loc61 = loc("CWE190_Integer_Overflow__int_connect_socket_square_21.c":89:13)
#loc62 = loc("CWE190_Integer_Overflow__int_connect_socket_square_21.c":86:17)
#loc63 = loc("CWE190_Integer_Overflow__int_connect_socket_square_21.c":86:34)
#loc64 = loc("CWE190_Integer_Overflow__int_connect_socket_square_21.c":87:13)
#loc65 = loc("CWE190_Integer_Overflow__int_connect_socket_square_21.c":88:17)
#loc66 = loc("CWE190_Integer_Overflow__int_connect_socket_square_21.c":90:20)
#loc67 = loc("CWE190_Integer_Overflow__int_connect_socket_square_21.c":90:21)
#loc68 = loc("CWE190_Integer_Overflow__int_connect_socket_square_21.c":90:30)
#loc69 = loc("CWE190_Integer_Overflow__int_connect_socket_square_21.c":90:33)
#loc70 = loc("CWE190_Integer_Overflow__int_connect_socket_square_21.c":90:47)
#loc71 = loc("CWE190_Integer_Overflow__int_connect_socket_square_21.c":90:13)
#loc72 = loc("CWE190_Integer_Overflow__int_connect_socket_square_21.c":90:48)
#loc73 = loc("CWE190_Integer_Overflow__int_connect_socket_square_21.c":91:34)
#loc74 = loc("/usr/include/netinet/in.h":249:5)
#loc75 = loc("CWE190_Integer_Overflow__int_connect_socket_square_21.c":91:13)
#loc76 = loc("CWE190_Integer_Overflow__int_connect_socket_square_21.c":92:39)
#loc77 = loc("/usr/include/netinet/in.h":251:20)
#loc78 = loc("/usr/include/netinet/in.h":33:15)
#loc79 = loc("CWE190_Integer_Overflow__int_connect_socket_square_21.c":92:13)
#loc80 = loc("CWE190_Integer_Overflow__int_connect_socket_square_21.c":92:59)
#loc81 = loc("CWE190_Integer_Overflow__int_connect_socket_square_21.c":93:38)
#loc82 = loc("CWE190_Integer_Overflow__int_connect_socket_square_21.c":93:32)
#loc83 = loc("/usr/include/netinet/in.h":250:15)
#loc84 = loc("CWE190_Integer_Overflow__int_connect_socket_square_21.c":93:13)
#loc85 = loc("CWE190_Integer_Overflow__int_connect_socket_square_21.c":93:46)
#loc86 = loc("CWE190_Integer_Overflow__int_connect_socket_square_21.c":94:13)
#loc87 = loc("CWE190_Integer_Overflow__int_connect_socket_square_21.c":97:13)
#loc88 = loc("CWE190_Integer_Overflow__int_connect_socket_square_21.c":94:25)
#loc89 = loc("CWE190_Integer_Overflow__int_connect_socket_square_21.c":94:58)
#loc90 = loc("CWE190_Integer_Overflow__int_connect_socket_square_21.c":94:59)
#loc91 = loc("CWE190_Integer_Overflow__int_connect_socket_square_21.c":94:68)
#loc92 = loc("CWE190_Integer_Overflow__int_connect_socket_square_21.c":94:82)
#loc93 = loc("CWE190_Integer_Overflow__int_connect_socket_square_21.c":94:17)
#loc94 = loc("CWE190_Integer_Overflow__int_connect_socket_square_21.c":94:88)
#loc95 = loc("CWE190_Integer_Overflow__int_connect_socket_square_21.c":95:13)
#loc96 = loc("CWE190_Integer_Overflow__int_connect_socket_square_21.c":96:17)
#loc97 = loc("CWE190_Integer_Overflow__int_connect_socket_square_21.c":100:31)
#loc98 = loc("CWE190_Integer_Overflow__int_connect_socket_square_21.c":100:46)
#loc99 = loc("CWE190_Integer_Overflow__int_connect_socket_square_21.c":100:59)
#loc100 = loc("CWE190_Integer_Overflow__int_connect_socket_square_21.c":100:77)
#loc101 = loc("CWE190_Integer_Overflow__int_connect_socket_square_21.c":100:80)
#loc102 = loc("CWE190_Integer_Overflow__int_connect_socket_square_21.c":100:26)
#loc103 = loc("CWE190_Integer_Overflow__int_connect_socket_square_21.c":100:13)
#loc104 = loc("CWE190_Integer_Overflow__int_connect_socket_square_21.c":100:81)
#loc105 = loc("CWE190_Integer_Overflow__int_connect_socket_square_21.c":101:13)
#loc106 = loc("CWE190_Integer_Overflow__int_connect_socket_square_21.c":104:13)
#loc107 = loc("CWE190_Integer_Overflow__int_connect_socket_square_21.c":101:17)
#loc108 = loc("CWE190_Integer_Overflow__int_connect_socket_square_21.c":101:31)
#loc109 = loc("CWE190_Integer_Overflow__int_connect_socket_square_21.c":101:44)
#loc110 = loc("CWE190_Integer_Overflow__int_connect_socket_square_21.c":101:47)
#loc111 = loc("CWE190_Integer_Overflow__int_connect_socket_square_21.c":101:61)
#loc112 = loc("CWE190_Integer_Overflow__int_connect_socket_square_21.c":102:13)
#loc113 = loc("CWE190_Integer_Overflow__int_connect_socket_square_21.c":103:17)
#loc114 = loc("CWE190_Integer_Overflow__int_connect_socket_square_21.c":106:39)
#loc115 = loc("CWE190_Integer_Overflow__int_connect_socket_square_21.c":106:25)
#loc116 = loc("CWE190_Integer_Overflow__int_connect_socket_square_21.c":106:13)
#loc117 = loc("CWE190_Integer_Overflow__int_connect_socket_square_21.c":108:25)
#loc118 = loc("CWE190_Integer_Overflow__int_connect_socket_square_21.c":108:20)
#loc119 = loc("CWE190_Integer_Overflow__int_connect_socket_square_21.c":108:13)
#loc120 = loc("CWE190_Integer_Overflow__int_connect_socket_square_21.c":108:36)
#loc121 = loc("CWE190_Integer_Overflow__int_connect_socket_square_21.c":110:16)
#loc122 = loc("CWE190_Integer_Overflow__int_connect_socket_square_21.c":111:9)
#loc123 = loc("CWE190_Integer_Overflow__int_connect_socket_square_21.c":114:9)
#loc124 = loc("CWE190_Integer_Overflow__int_connect_socket_square_21.c":111:13)
#loc125 = loc("CWE190_Integer_Overflow__int_connect_socket_square_21.c":111:30)
#loc126 = loc("CWE190_Integer_Overflow__int_connect_socket_square_21.c":112:9)
#loc127 = loc("CWE190_Integer_Overflow__int_connect_socket_square_21.c":113:26)
#loc128 = loc("CWE190_Integer_Overflow__int_connect_socket_square_21.c":113:13)
#loc129 = loc("CWE190_Integer_Overflow__int_connect_socket_square_21.c":122:17)
#loc130 = loc("CWE190_Integer_Overflow__int_connect_socket_square_21.c":122:5)
#loc131 = loc("CWE190_Integer_Overflow__int_connect_socket_square_21.c":123:13)
#loc132 = loc("CWE190_Integer_Overflow__int_connect_socket_square_21.c":123:5)
#loc133 = loc("CWE190_Integer_Overflow__int_connect_socket_square_21.c":330:1)
#loc134 = loc("CWE190_Integer_Overflow__int_connect_socket_square_21.c":335:1)
#loc135 = loc("CWE190_Integer_Overflow__int_connect_socket_square_21.c":332:5)
#loc136 = loc("CWE190_Integer_Overflow__int_connect_socket_square_21.c":332:14)
#loc137 = loc("CWE190_Integer_Overflow__int_connect_socket_square_21.c":333:5)
#loc138 = loc("CWE190_Integer_Overflow__int_connect_socket_square_21.c":333:14)
#loc139 = loc("CWE190_Integer_Overflow__int_connect_socket_square_21.c":334:5)
#loc140 = loc("CWE190_Integer_Overflow__int_connect_socket_square_21.c":334:13)
#loc141 = loc("/usr/include/stdlib.h":575:1)
#loc142 = loc("/usr/include/stdlib.h":575:41)
#loc143 = loc("/usr/include/time.h":76:1)
#loc144 = loc("/usr/include/time.h":76:38)
#loc145 = loc("../../../testcasesupport/std_testcase_io.h":14:1)
#loc146 = loc("../../../testcasesupport/std_testcase_io.h":14:33)
#loc147 = loc("CWE190_Integer_Overflow__int_connect_socket_square_21.c":351:15)
#loc148 = loc("CWE190_Integer_Overflow__int_connect_socket_square_21.c":353:15)
#loc149 = loc("CWE190_Integer_Overflow__int_connect_socket_square_21.c":356:15)
#loc150 = loc("CWE190_Integer_Overflow__int_connect_socket_square_21.c":358:15)
#loc151 = loc("CWE190_Integer_Overflow__int_connect_socket_square_21.c":346:1)
#loc152 = loc("CWE190_Integer_Overflow__int_connect_socket_square_21.c":361:1)
#loc157 = loc("CWE190_Integer_Overflow__int_connect_socket_square_21.c":347:1)
#loc158 = loc("CWE190_Integer_Overflow__int_connect_socket_square_21.c":349:27)
#loc159 = loc("CWE190_Integer_Overflow__int_connect_socket_square_21.c":349:22)
#loc160 = loc("CWE190_Integer_Overflow__int_connect_socket_square_21.c":349:5)
#loc161 = loc("CWE190_Integer_Overflow__int_connect_socket_square_21.c":351:5)
#loc162 = loc("CWE190_Integer_Overflow__int_connect_socket_square_21.c":352:5)
#loc163 = loc("CWE190_Integer_Overflow__int_connect_socket_square_21.c":352:64)
#loc164 = loc("CWE190_Integer_Overflow__int_connect_socket_square_21.c":353:5)
#loc165 = loc("CWE190_Integer_Overflow__int_connect_socket_square_21.c":356:5)
#loc166 = loc("CWE190_Integer_Overflow__int_connect_socket_square_21.c":357:5)
#loc167 = loc("CWE190_Integer_Overflow__int_connect_socket_square_21.c":357:63)
#loc168 = loc("CWE190_Integer_Overflow__int_connect_socket_square_21.c":358:5)
#loc169 = loc("CWE190_Integer_Overflow__int_connect_socket_square_21.c":360:12)
#loc170 = loc("CWE190_Integer_Overflow__int_connect_socket_square_21.c":360:5)
#loc171 = loc("CWE190_Integer_Overflow__int_connect_socket_square_21.c":131:1)
#loc172 = loc("CWE190_Integer_Overflow__int_connect_socket_square_21.c":131:29)
#loc173 = loc("CWE190_Integer_Overflow__int_connect_socket_square_21.c":141:19)
#loc174 = loc("/usr/include/bits/mathcalls.h":158:1)
#loc175 = loc("CWE190_Integer_Overflow__int_connect_socket_square_21.c":153:23)
#loc176 = loc("CWE190_Integer_Overflow__int_connect_socket_square_21.c":136:1)
#loc177 = loc("CWE190_Integer_Overflow__int_connect_socket_square_21.c":156:1)
#loc180 = loc("CWE190_Integer_Overflow__int_connect_socket_square_21.c":137:1)
#loc181 = loc("CWE190_Integer_Overflow__int_connect_socket_square_21.c":138:5)
#loc182 = loc("CWE190_Integer_Overflow__int_connect_socket_square_21.c":155:5)
#loc183 = loc("CWE190_Integer_Overflow__int_connect_socket_square_21.c":138:8)
#loc184 = loc("CWE190_Integer_Overflow__int_connect_socket_square_21.c":139:5)
#loc185 = loc("CWE190_Integer_Overflow__int_connect_socket_square_21.c":142:5)
#loc186 = loc("CWE190_Integer_Overflow__int_connect_socket_square_21.c":144:5)
#loc187 = loc("CWE190_Integer_Overflow__int_connect_socket_square_21.c":141:9)
#loc188 = loc("CWE190_Integer_Overflow__int_connect_socket_square_21.c":146:9)
#loc189 = loc("CWE190_Integer_Overflow__int_connect_socket_square_21.c":154:9)
#loc190 = loc("CWE190_Integer_Overflow__int_connect_socket_square_21.c":146:13)
#loc191 = loc("CWE190_Integer_Overflow__int_connect_socket_square_21.c":146:20)
#loc192 = loc("CWE190_Integer_Overflow__int_connect_socket_square_21.c":146:28)
#loc193 = loc("CWE190_Integer_Overflow__int_connect_socket_square_21.c":146:35)
#loc194 = loc("CWE190_Integer_Overflow__int_connect_socket_square_21.c":146:31)
#loc195 = loc("CWE190_Integer_Overflow__int_connect_socket_square_21.c":146:49)
#loc196 = loc("CWE190_Integer_Overflow__int_connect_socket_square_21.c":146:62)
#loc197 = loc("CWE190_Integer_Overflow__int_connect_socket_square_21.c":146:69)
#loc198 = loc("CWE190_Integer_Overflow__int_connect_socket_square_21.c":147:9)
#loc199 = loc("CWE190_Integer_Overflow__int_connect_socket_square_21.c":150:9)
#loc200 = loc("CWE190_Integer_Overflow__int_connect_socket_square_21.c":152:9)
#loc201 = loc("CWE190_Integer_Overflow__int_connect_socket_square_21.c":148:13)
#loc202 = loc("CWE190_Integer_Overflow__int_connect_socket_square_21.c":148:33)
#loc203 = loc("CWE190_Integer_Overflow__int_connect_socket_square_21.c":148:26)
#loc204 = loc("CWE190_Integer_Overflow__int_connect_socket_square_21.c":149:26)
#loc205 = loc("CWE190_Integer_Overflow__int_connect_socket_square_21.c":149:13)
#loc206 = loc("CWE190_Integer_Overflow__int_connect_socket_square_21.c":153:13)
#loc207 = loc("CWE190_Integer_Overflow__int_connect_socket_square_21.c":158:1)
#loc208 = loc("CWE190_Integer_Overflow__int_connect_socket_square_21.c":221:1)
#loc209 = loc("CWE190_Integer_Overflow__int_connect_socket_square_21.c":160:5)
#loc210 = loc("CWE190_Integer_Overflow__int_connect_socket_square_21.c":160:9)
#loc211 = loc("CWE190_Integer_Overflow__int_connect_socket_square_21.c":162:12)
#loc212 = loc("CWE190_Integer_Overflow__int_connect_socket_square_21.c":162:5)
#loc213 = loc("CWE190_Integer_Overflow__int_connect_socket_square_21.c":163:5)
#loc214 = loc("CWE190_Integer_Overflow__int_connect_socket_square_21.c":218:5)
#loc215 = loc("CWE190_Integer_Overflow__int_connect_socket_square_21.c":168:9)
#loc216 = loc("CWE190_Integer_Overflow__int_connect_socket_square_21.c":168:13)
#loc217 = loc("CWE190_Integer_Overflow__int_connect_socket_square_21.c":169:9)
#loc218 = loc("CWE190_Integer_Overflow__int_connect_socket_square_21.c":169:28)
#loc219 = loc("CWE190_Integer_Overflow__int_connect_socket_square_21.c":170:9)
#loc220 = loc("CWE190_Integer_Overflow__int_connect_socket_square_21.c":170:32)
#loc221 = loc("CWE190_Integer_Overflow__int_connect_socket_square_21.c":171:9)
#loc222 = loc("CWE190_Integer_Overflow__int_connect_socket_square_21.c":171:41)
#loc223 = loc("CWE190_Integer_Overflow__int_connect_socket_square_21.c":172:9)
#loc224 = loc("CWE190_Integer_Overflow__int_connect_socket_square_21.c":207:17)
#loc225 = loc("CWE190_Integer_Overflow__int_connect_socket_square_21.c":182:36)
#loc226 = loc("CWE190_Integer_Overflow__int_connect_socket_square_21.c":182:45)
#loc227 = loc("CWE190_Integer_Overflow__int_connect_socket_square_21.c":182:58)
#loc228 = loc("CWE190_Integer_Overflow__int_connect_socket_square_21.c":182:29)
#loc229 = loc("CWE190_Integer_Overflow__int_connect_socket_square_21.c":182:13)
#loc230 = loc("CWE190_Integer_Overflow__int_connect_socket_square_21.c":182:69)
#loc231 = loc("CWE190_Integer_Overflow__int_connect_socket_square_21.c":183:13)
#loc232 = loc("CWE190_Integer_Overflow__int_connect_socket_square_21.c":186:13)
#loc233 = loc("CWE190_Integer_Overflow__int_connect_socket_square_21.c":183:17)
#loc234 = loc("CWE190_Integer_Overflow__int_connect_socket_square_21.c":183:34)
#loc235 = loc("CWE190_Integer_Overflow__int_connect_socket_square_21.c":184:13)
#loc236 = loc("CWE190_Integer_Overflow__int_connect_socket_square_21.c":185:17)
#loc237 = loc("CWE190_Integer_Overflow__int_connect_socket_square_21.c":187:20)
#loc238 = loc("CWE190_Integer_Overflow__int_connect_socket_square_21.c":187:21)
#loc239 = loc("CWE190_Integer_Overflow__int_connect_socket_square_21.c":187:30)
#loc240 = loc("CWE190_Integer_Overflow__int_connect_socket_square_21.c":187:33)
#loc241 = loc("CWE190_Integer_Overflow__int_connect_socket_square_21.c":187:47)
#loc242 = loc("CWE190_Integer_Overflow__int_connect_socket_square_21.c":187:13)
#loc243 = loc("CWE190_Integer_Overflow__int_connect_socket_square_21.c":187:48)
#loc244 = loc("CWE190_Integer_Overflow__int_connect_socket_square_21.c":188:34)
#loc245 = loc("CWE190_Integer_Overflow__int_connect_socket_square_21.c":188:13)
#loc246 = loc("CWE190_Integer_Overflow__int_connect_socket_square_21.c":189:49)
#loc247 = loc("CWE190_Integer_Overflow__int_connect_socket_square_21.c":189:39)
#loc248 = loc("CWE190_Integer_Overflow__int_connect_socket_square_21.c":189:13)
#loc249 = loc("CWE190_Integer_Overflow__int_connect_socket_square_21.c":189:59)
#loc250 = loc("CWE190_Integer_Overflow__int_connect_socket_square_21.c":190:38)
#loc251 = loc("CWE190_Integer_Overflow__int_connect_socket_square_21.c":190:32)
#loc252 = loc("CWE190_Integer_Overflow__int_connect_socket_square_21.c":190:13)
#loc253 = loc("CWE190_Integer_Overflow__int_connect_socket_square_21.c":190:46)
#loc254 = loc("CWE190_Integer_Overflow__int_connect_socket_square_21.c":191:13)
#loc255 = loc("CWE190_Integer_Overflow__int_connect_socket_square_21.c":194:13)
#loc256 = loc("CWE190_Integer_Overflow__int_connect_socket_square_21.c":191:25)
#loc257 = loc("CWE190_Integer_Overflow__int_connect_socket_square_21.c":191:58)
#loc258 = loc("CWE190_Integer_Overflow__int_connect_socket_square_21.c":191:59)
#loc259 = loc("CWE190_Integer_Overflow__int_connect_socket_square_21.c":191:68)
#loc260 = loc("CWE190_Integer_Overflow__int_connect_socket_square_21.c":191:82)
#loc261 = loc("CWE190_Integer_Overflow__int_connect_socket_square_21.c":191:17)
#loc262 = loc("CWE190_Integer_Overflow__int_connect_socket_square_21.c":191:88)
#loc263 = loc("CWE190_Integer_Overflow__int_connect_socket_square_21.c":192:13)
#loc264 = loc("CWE190_Integer_Overflow__int_connect_socket_square_21.c":193:17)
#loc265 = loc("CWE190_Integer_Overflow__int_connect_socket_square_21.c":197:31)
#loc266 = loc("CWE190_Integer_Overflow__int_connect_socket_square_21.c":197:46)
#loc267 = loc("CWE190_Integer_Overflow__int_connect_socket_square_21.c":197:59)
#loc268 = loc("CWE190_Integer_Overflow__int_connect_socket_square_21.c":197:77)
#loc269 = loc("CWE190_Integer_Overflow__int_connect_socket_square_21.c":197:80)
#loc270 = loc("CWE190_Integer_Overflow__int_connect_socket_square_21.c":197:26)
#loc271 = loc("CWE190_Integer_Overflow__int_connect_socket_square_21.c":197:13)
#loc272 = loc("CWE190_Integer_Overflow__int_connect_socket_square_21.c":197:81)
#loc273 = loc("CWE190_Integer_Overflow__int_connect_socket_square_21.c":198:13)
#loc274 = loc("CWE190_Integer_Overflow__int_connect_socket_square_21.c":201:13)
#loc275 = loc("CWE190_Integer_Overflow__int_connect_socket_square_21.c":198:17)
#loc276 = loc("CWE190_Integer_Overflow__int_connect_socket_square_21.c":198:31)
#loc277 = loc("CWE190_Integer_Overflow__int_connect_socket_square_21.c":198:44)
#loc278 = loc("CWE190_Integer_Overflow__int_connect_socket_square_21.c":198:47)
#loc279 = loc("CWE190_Integer_Overflow__int_connect_socket_square_21.c":198:61)
#loc280 = loc("CWE190_Integer_Overflow__int_connect_socket_square_21.c":199:13)
#loc281 = loc("CWE190_Integer_Overflow__int_connect_socket_square_21.c":200:17)
#loc282 = loc("CWE190_Integer_Overflow__int_connect_socket_square_21.c":203:39)
#loc283 = loc("CWE190_Integer_Overflow__int_connect_socket_square_21.c":203:25)
#loc284 = loc("CWE190_Integer_Overflow__int_connect_socket_square_21.c":203:13)
#loc285 = loc("CWE190_Integer_Overflow__int_connect_socket_square_21.c":205:25)
#loc286 = loc("CWE190_Integer_Overflow__int_connect_socket_square_21.c":205:20)
#loc287 = loc("CWE190_Integer_Overflow__int_connect_socket_square_21.c":205:13)
#loc288 = loc("CWE190_Integer_Overflow__int_connect_socket_square_21.c":205:36)
#loc289 = loc("CWE190_Integer_Overflow__int_connect_socket_square_21.c":207:16)
#loc290 = loc("CWE190_Integer_Overflow__int_connect_socket_square_21.c":208:9)
#loc291 = loc("CWE190_Integer_Overflow__int_connect_socket_square_21.c":211:9)
#loc292 = loc("CWE190_Integer_Overflow__int_connect_socket_square_21.c":208:13)
#loc293 = loc("CWE190_Integer_Overflow__int_connect_socket_square_21.c":208:30)
#loc294 = loc("CWE190_Integer_Overflow__int_connect_socket_square_21.c":209:9)
#loc295 = loc("CWE190_Integer_Overflow__int_connect_socket_square_21.c":210:26)
#loc296 = loc("CWE190_Integer_Overflow__int_connect_socket_square_21.c":210:13)
#loc297 = loc("CWE190_Integer_Overflow__int_connect_socket_square_21.c":219:22)
#loc298 = loc("CWE190_Integer_Overflow__int_connect_socket_square_21.c":219:5)
#loc299 = loc("CWE190_Integer_Overflow__int_connect_socket_square_21.c":220:18)
#loc300 = loc("CWE190_Integer_Overflow__int_connect_socket_square_21.c":220:5)
#loc301 = loc("CWE190_Integer_Overflow__int_connect_socket_square_21.c":132:1)
#loc302 = loc("CWE190_Integer_Overflow__int_connect_socket_square_21.c":132:29)
#loc303 = loc("CWE190_Integer_Overflow__int_connect_socket_square_21.c":224:1)
#loc304 = loc("CWE190_Integer_Overflow__int_connect_socket_square_21.c":239:1)
#loc307 = loc("CWE190_Integer_Overflow__int_connect_socket_square_21.c":225:1)
#loc308 = loc("CWE190_Integer_Overflow__int_connect_socket_square_21.c":226:5)
#loc309 = loc("CWE190_Integer_Overflow__int_connect_socket_square_21.c":238:5)
#loc310 = loc("CWE190_Integer_Overflow__int_connect_socket_square_21.c":226:8)
#loc311 = loc("CWE190_Integer_Overflow__int_connect_socket_square_21.c":227:5)
#loc312 = loc("CWE190_Integer_Overflow__int_connect_socket_square_21.c":229:9)
#loc313 = loc("CWE190_Integer_Overflow__int_connect_socket_square_21.c":237:9)
#loc314 = loc("CWE190_Integer_Overflow__int_connect_socket_square_21.c":229:13)
#loc315 = loc("CWE190_Integer_Overflow__int_connect_socket_square_21.c":229:20)
#loc316 = loc("CWE190_Integer_Overflow__int_connect_socket_square_21.c":229:28)
#loc317 = loc("CWE190_Integer_Overflow__int_connect_socket_square_21.c":229:35)
#loc318 = loc("CWE190_Integer_Overflow__int_connect_socket_square_21.c":229:31)
#loc319 = loc("CWE190_Integer_Overflow__int_connect_socket_square_21.c":229:49)
#loc320 = loc("CWE190_Integer_Overflow__int_connect_socket_square_21.c":229:62)
#loc321 = loc("CWE190_Integer_Overflow__int_connect_socket_square_21.c":229:69)
#loc322 = loc("CWE190_Integer_Overflow__int_connect_socket_square_21.c":230:9)
#loc323 = loc("CWE190_Integer_Overflow__int_connect_socket_square_21.c":233:9)
#loc324 = loc("CWE190_Integer_Overflow__int_connect_socket_square_21.c":235:9)
#loc325 = loc("CWE190_Integer_Overflow__int_connect_socket_square_21.c":231:13)
#loc326 = loc("CWE190_Integer_Overflow__int_connect_socket_square_21.c":231:33)
#loc327 = loc("CWE190_Integer_Overflow__int_connect_socket_square_21.c":231:26)
#loc328 = loc("CWE190_Integer_Overflow__int_connect_socket_square_21.c":232:26)
#loc329 = loc("CWE190_Integer_Overflow__int_connect_socket_square_21.c":232:13)
#loc330 = loc("CWE190_Integer_Overflow__int_connect_socket_square_21.c":236:23)
#loc331 = loc("CWE190_Integer_Overflow__int_connect_socket_square_21.c":236:13)
#loc332 = loc("CWE190_Integer_Overflow__int_connect_socket_square_21.c":241:1)
#loc333 = loc("CWE190_Integer_Overflow__int_connect_socket_square_21.c":304:1)
#loc334 = loc("CWE190_Integer_Overflow__int_connect_socket_square_21.c":243:5)
#loc335 = loc("CWE190_Integer_Overflow__int_connect_socket_square_21.c":243:9)
#loc336 = loc("CWE190_Integer_Overflow__int_connect_socket_square_21.c":245:12)
#loc337 = loc("CWE190_Integer_Overflow__int_connect_socket_square_21.c":245:5)
#loc338 = loc("CWE190_Integer_Overflow__int_connect_socket_square_21.c":246:5)
#loc339 = loc("CWE190_Integer_Overflow__int_connect_socket_square_21.c":301:5)
#loc340 = loc("CWE190_Integer_Overflow__int_connect_socket_square_21.c":251:9)
#loc341 = loc("CWE190_Integer_Overflow__int_connect_socket_square_21.c":251:13)
#loc342 = loc("CWE190_Integer_Overflow__int_connect_socket_square_21.c":252:9)
#loc343 = loc("CWE190_Integer_Overflow__int_connect_socket_square_21.c":252:28)
#loc344 = loc("CWE190_Integer_Overflow__int_connect_socket_square_21.c":253:9)
#loc345 = loc("CWE190_Integer_Overflow__int_connect_socket_square_21.c":253:32)
#loc346 = loc("CWE190_Integer_Overflow__int_connect_socket_square_21.c":254:9)
#loc347 = loc("CWE190_Integer_Overflow__int_connect_socket_square_21.c":254:41)
#loc348 = loc("CWE190_Integer_Overflow__int_connect_socket_square_21.c":255:9)
#loc349 = loc("CWE190_Integer_Overflow__int_connect_socket_square_21.c":290:17)
#loc350 = loc("CWE190_Integer_Overflow__int_connect_socket_square_21.c":265:36)
#loc351 = loc("CWE190_Integer_Overflow__int_connect_socket_square_21.c":265:45)
#loc352 = loc("CWE190_Integer_Overflow__int_connect_socket_square_21.c":265:58)
#loc353 = loc("CWE190_Integer_Overflow__int_connect_socket_square_21.c":265:29)
#loc354 = loc("CWE190_Integer_Overflow__int_connect_socket_square_21.c":265:13)
#loc355 = loc("CWE190_Integer_Overflow__int_connect_socket_square_21.c":265:69)
#loc356 = loc("CWE190_Integer_Overflow__int_connect_socket_square_21.c":266:13)
#loc357 = loc("CWE190_Integer_Overflow__int_connect_socket_square_21.c":269:13)
#loc358 = loc("CWE190_Integer_Overflow__int_connect_socket_square_21.c":266:17)
#loc359 = loc("CWE190_Integer_Overflow__int_connect_socket_square_21.c":266:34)
#loc360 = loc("CWE190_Integer_Overflow__int_connect_socket_square_21.c":267:13)
#loc361 = loc("CWE190_Integer_Overflow__int_connect_socket_square_21.c":268:17)
#loc362 = loc("CWE190_Integer_Overflow__int_connect_socket_square_21.c":270:20)
#loc363 = loc("CWE190_Integer_Overflow__int_connect_socket_square_21.c":270:21)
#loc364 = loc("CWE190_Integer_Overflow__int_connect_socket_square_21.c":270:30)
#loc365 = loc("CWE190_Integer_Overflow__int_connect_socket_square_21.c":270:33)
#loc366 = loc("CWE190_Integer_Overflow__int_connect_socket_square_21.c":270:47)
#loc367 = loc("CWE190_Integer_Overflow__int_connect_socket_square_21.c":270:13)
#loc368 = loc("CWE190_Integer_Overflow__int_connect_socket_square_21.c":270:48)
#loc369 = loc("CWE190_Integer_Overflow__int_connect_socket_square_21.c":271:34)
#loc370 = loc("CWE190_Integer_Overflow__int_connect_socket_square_21.c":271:13)
#loc371 = loc("CWE190_Integer_Overflow__int_connect_socket_square_21.c":272:49)
#loc372 = loc("CWE190_Integer_Overflow__int_connect_socket_square_21.c":272:39)
#loc373 = loc("CWE190_Integer_Overflow__int_connect_socket_square_21.c":272:13)
#loc374 = loc("CWE190_Integer_Overflow__int_connect_socket_square_21.c":272:59)
#loc375 = loc("CWE190_Integer_Overflow__int_connect_socket_square_21.c":273:38)
#loc376 = loc("CWE190_Integer_Overflow__int_connect_socket_square_21.c":273:32)
#loc377 = loc("CWE190_Integer_Overflow__int_connect_socket_square_21.c":273:13)
#loc378 = loc("CWE190_Integer_Overflow__int_connect_socket_square_21.c":273:46)
#loc379 = loc("CWE190_Integer_Overflow__int_connect_socket_square_21.c":274:13)
#loc380 = loc("CWE190_Integer_Overflow__int_connect_socket_square_21.c":277:13)
#loc381 = loc("CWE190_Integer_Overflow__int_connect_socket_square_21.c":274:25)
#loc382 = loc("CWE190_Integer_Overflow__int_connect_socket_square_21.c":274:58)
#loc383 = loc("CWE190_Integer_Overflow__int_connect_socket_square_21.c":274:59)
#loc384 = loc("CWE190_Integer_Overflow__int_connect_socket_square_21.c":274:68)
#loc385 = loc("CWE190_Integer_Overflow__int_connect_socket_square_21.c":274:82)
#loc386 = loc("CWE190_Integer_Overflow__int_connect_socket_square_21.c":274:17)
#loc387 = loc("CWE190_Integer_Overflow__int_connect_socket_square_21.c":274:88)
#loc388 = loc("CWE190_Integer_Overflow__int_connect_socket_square_21.c":275:13)
#loc389 = loc("CWE190_Integer_Overflow__int_connect_socket_square_21.c":276:17)
#loc390 = loc("CWE190_Integer_Overflow__int_connect_socket_square_21.c":280:31)
#loc391 = loc("CWE190_Integer_Overflow__int_connect_socket_square_21.c":280:46)
#loc392 = loc("CWE190_Integer_Overflow__int_connect_socket_square_21.c":280:59)
#loc393 = loc("CWE190_Integer_Overflow__int_connect_socket_square_21.c":280:77)
#loc394 = loc("CWE190_Integer_Overflow__int_connect_socket_square_21.c":280:80)
#loc395 = loc("CWE190_Integer_Overflow__int_connect_socket_square_21.c":280:26)
#loc396 = loc("CWE190_Integer_Overflow__int_connect_socket_square_21.c":280:13)
#loc397 = loc("CWE190_Integer_Overflow__int_connect_socket_square_21.c":280:81)
#loc398 = loc("CWE190_Integer_Overflow__int_connect_socket_square_21.c":281:13)
#loc399 = loc("CWE190_Integer_Overflow__int_connect_socket_square_21.c":284:13)
#loc400 = loc("CWE190_Integer_Overflow__int_connect_socket_square_21.c":281:17)
#loc401 = loc("CWE190_Integer_Overflow__int_connect_socket_square_21.c":281:31)
#loc402 = loc("CWE190_Integer_Overflow__int_connect_socket_square_21.c":281:44)
#loc403 = loc("CWE190_Integer_Overflow__int_connect_socket_square_21.c":281:47)
#loc404 = loc("CWE190_Integer_Overflow__int_connect_socket_square_21.c":281:61)
#loc405 = loc("CWE190_Integer_Overflow__int_connect_socket_square_21.c":282:13)
#loc406 = loc("CWE190_Integer_Overflow__int_connect_socket_square_21.c":283:17)
#loc407 = loc("CWE190_Integer_Overflow__int_connect_socket_square_21.c":286:39)
#loc408 = loc("CWE190_Integer_Overflow__int_connect_socket_square_21.c":286:25)
#loc409 = loc("CWE190_Integer_Overflow__int_connect_socket_square_21.c":286:13)
#loc410 = loc("CWE190_Integer_Overflow__int_connect_socket_square_21.c":288:25)
#loc411 = loc("CWE190_Integer_Overflow__int_connect_socket_square_21.c":288:20)
#loc412 = loc("CWE190_Integer_Overflow__int_connect_socket_square_21.c":288:13)
#loc413 = loc("CWE190_Integer_Overflow__int_connect_socket_square_21.c":288:36)
#loc414 = loc("CWE190_Integer_Overflow__int_connect_socket_square_21.c":290:16)
#loc415 = loc("CWE190_Integer_Overflow__int_connect_socket_square_21.c":291:9)
#loc416 = loc("CWE190_Integer_Overflow__int_connect_socket_square_21.c":294:9)
#loc417 = loc("CWE190_Integer_Overflow__int_connect_socket_square_21.c":291:13)
#loc418 = loc("CWE190_Integer_Overflow__int_connect_socket_square_21.c":291:30)
#loc419 = loc("CWE190_Integer_Overflow__int_connect_socket_square_21.c":292:9)
#loc420 = loc("CWE190_Integer_Overflow__int_connect_socket_square_21.c":293:26)
#loc421 = loc("CWE190_Integer_Overflow__int_connect_socket_square_21.c":293:13)
#loc422 = loc("CWE190_Integer_Overflow__int_connect_socket_square_21.c":302:22)
#loc423 = loc("CWE190_Integer_Overflow__int_connect_socket_square_21.c":302:5)
#loc424 = loc("CWE190_Integer_Overflow__int_connect_socket_square_21.c":303:18)
#loc425 = loc("CWE190_Integer_Overflow__int_connect_socket_square_21.c":303:5)
#loc426 = loc("CWE190_Integer_Overflow__int_connect_socket_square_21.c":133:1)
#loc427 = loc("CWE190_Integer_Overflow__int_connect_socket_square_21.c":133:28)
#loc428 = loc("CWE190_Integer_Overflow__int_connect_socket_square_21.c":307:1)
#loc429 = loc("CWE190_Integer_Overflow__int_connect_socket_square_21.c":317:1)
#loc432 = loc("CWE190_Integer_Overflow__int_connect_socket_square_21.c":308:1)
#loc433 = loc("CWE190_Integer_Overflow__int_connect_socket_square_21.c":309:5)
#loc434 = loc("CWE190_Integer_Overflow__int_connect_socket_square_21.c":316:5)
#loc435 = loc("CWE190_Integer_Overflow__int_connect_socket_square_21.c":309:8)
#loc436 = loc("CWE190_Integer_Overflow__int_connect_socket_square_21.c":310:5)
#loc437 = loc("CWE190_Integer_Overflow__int_connect_socket_square_21.c":311:9)
#loc438 = loc("CWE190_Integer_Overflow__int_connect_socket_square_21.c":315:9)
#loc439 = loc("CWE190_Integer_Overflow__int_connect_socket_square_21.c":313:13)
#loc440 = loc("CWE190_Integer_Overflow__int_connect_socket_square_21.c":313:33)
#loc441 = loc("CWE190_Integer_Overflow__int_connect_socket_square_21.c":313:26)
#loc442 = loc("CWE190_Integer_Overflow__int_connect_socket_square_21.c":314:26)
#loc443 = loc("CWE190_Integer_Overflow__int_connect_socket_square_21.c":314:13)
#loc444 = loc("CWE190_Integer_Overflow__int_connect_socket_square_21.c":319:1)
#loc445 = loc("CWE190_Integer_Overflow__int_connect_socket_square_21.c":328:1)
#loc446 = loc("CWE190_Integer_Overflow__int_connect_socket_square_21.c":321:5)
#loc447 = loc("CWE190_Integer_Overflow__int_connect_socket_square_21.c":321:9)
#loc448 = loc("CWE190_Integer_Overflow__int_connect_socket_square_21.c":323:12)
#loc449 = loc("CWE190_Integer_Overflow__int_connect_socket_square_21.c":323:5)
#loc450 = loc("CWE190_Integer_Overflow__int_connect_socket_square_21.c":325:12)
#loc451 = loc("CWE190_Integer_Overflow__int_connect_socket_square_21.c":325:5)
#loc452 = loc("CWE190_Integer_Overflow__int_connect_socket_square_21.c":326:21)
#loc453 = loc("CWE190_Integer_Overflow__int_connect_socket_square_21.c":326:5)
#loc454 = loc("CWE190_Integer_Overflow__int_connect_socket_square_21.c":327:17)
#loc455 = loc("CWE190_Integer_Overflow__int_connect_socket_square_21.c":327:5)
#loc456 = loc(fused[#loc1, #loc2])
#loc457 = loc(fused[#loc3, #loc4])
#loc458 = loc(fused[#loc6, #loc7])
#loc459 = loc(fused[#loc8, #loc9])
#loc460 = loc(fused[#loc10, #loc11])
#loc461 = loc(fused[#loc12, #loc13])
#loc462 = loc(fused[#loc14, #loc15])
#loc463 = loc(fused[#loc16, #loc17])
#loc464 = loc(fused[#loc18, #loc19])
#loc465 = loc(fused[#loc20, #loc21])
#loc467 = loc(fused[#loc25, #loc26])
#loc468 = loc(fused[#loc28, #loc26])
#loc469 = loc(fused[#loc29, #loc30])
#loc470 = loc(fused[#loc31, #loc32])
#loc471 = loc(fused[#loc36, #loc37])
#loc472 = loc(fused[#loc38, #loc39])
#loc473 = loc(fused[#loc41, #loc40])
#loc474 = loc(fused[#loc42, #loc43])
#loc475 = loc(fused[#loc44, #loc45])
#loc476 = loc(fused[#loc46, #loc47])
#loc477 = loc(fused[#loc48, #loc49])
#loc478 = loc(fused[#loc50, #loc51])
#loc479 = loc(fused[#loc52, #loc53])
#loc480 = loc(fused[#loc58, #loc59])
#loc481 = loc(fused[#loc60, #loc61])
#loc482 = loc(fused[#loc62, #loc63])
#loc483 = loc(fused[#loc64, #loc61])
#loc484 = loc(fused[#loc66, #loc67])
#loc485 = loc(fused[#loc69, #loc70])
#loc486 = loc(fused[#loc71, #loc72])
#loc487 = loc(fused[#loc75, #loc73])
#loc488 = loc(fused[#loc79, #loc80])
#loc489 = loc(fused[#loc84, #loc85])
#loc490 = loc(fused[#loc86, #loc87])
#loc491 = loc(fused[#loc89, #loc90])
#loc492 = loc(fused[#loc91, #loc92])
#loc493 = loc(fused[#loc93, #loc94])
#loc494 = loc(fused[#loc95, #loc87])
#loc495 = loc(fused[#loc99, #loc100])
#loc496 = loc(fused[#loc103, #loc104])
#loc497 = loc(fused[#loc105, #loc106])
#loc498 = loc(fused[#loc107, #loc108])
#loc499 = loc(fused[#loc110, #loc111])
#loc500 = loc(fused[#loc112, #loc106])
#loc501 = loc(fused[#loc116, #loc114])
#loc502 = loc(fused[#loc119, #loc120])
#loc503 = loc(fused[#loc122, #loc123])
#loc504 = loc(fused[#loc124, #loc125])
#loc505 = loc(fused[#loc126, #loc123])
#loc506 = loc(fused[#loc130, #loc129])
#loc507 = loc(fused[#loc133, #loc134])
#loc508 = loc(fused[#loc135, #loc136])
#loc509 = loc(fused[#loc137, #loc138])
#loc510 = loc(fused[#loc139, #loc140])
#loc511 = loc(fused[#loc141, #loc142])
#loc512 = loc(fused[#loc143, #loc144])
#loc513 = loc(fused[#loc145, #loc146])
#loc514 = loc(fused[#loc151, #loc152])
#loc517 = loc(fused[#loc162, #loc163])
#loc518 = loc(fused[#loc166, #loc167])
#loc519 = loc(fused[#loc170, #loc169])
#loc520 = loc(fused[#loc171, #loc172])
#loc521 = loc(fused[#loc176, #loc177])
#loc523 = loc(fused[#loc181, #loc182])
#loc524 = loc(fused[#loc184, #loc185, #loc186, #loc182])
#loc525 = loc(fused[#loc188, #loc189])
#loc526 = loc(fused[#loc190, #loc191])
#loc527 = loc(fused[#loc194, #loc197])
#loc528 = loc(fused[#loc198, #loc199, #loc200, #loc189])
#loc529 = loc(fused[#loc201, #loc202])
#loc530 = loc(fused[#loc207, #loc208])
#loc531 = loc(fused[#loc209, #loc210])
#loc532 = loc(fused[#loc212, #loc211])
#loc533 = loc(fused[#loc213, #loc214])
#loc534 = loc(fused[#loc215, #loc216])
#loc535 = loc(fused[#loc217, #loc218])
#loc536 = loc(fused[#loc219, #loc220])
#loc537 = loc(fused[#loc221, #loc222])
#loc538 = loc(fused[#loc223, #loc224])
#loc539 = loc(fused[#loc229, #loc230])
#loc540 = loc(fused[#loc231, #loc232])
#loc541 = loc(fused[#loc233, #loc234])
#loc542 = loc(fused[#loc235, #loc232])
#loc543 = loc(fused[#loc237, #loc238])
#loc544 = loc(fused[#loc240, #loc241])
#loc545 = loc(fused[#loc242, #loc243])
#loc546 = loc(fused[#loc245, #loc244])
#loc547 = loc(fused[#loc248, #loc249])
#loc548 = loc(fused[#loc252, #loc253])
#loc549 = loc(fused[#loc254, #loc255])
#loc550 = loc(fused[#loc257, #loc258])
#loc551 = loc(fused[#loc259, #loc260])
#loc552 = loc(fused[#loc261, #loc262])
#loc553 = loc(fused[#loc263, #loc255])
#loc554 = loc(fused[#loc267, #loc268])
#loc555 = loc(fused[#loc271, #loc272])
#loc556 = loc(fused[#loc273, #loc274])
#loc557 = loc(fused[#loc275, #loc276])
#loc558 = loc(fused[#loc278, #loc279])
#loc559 = loc(fused[#loc280, #loc274])
#loc560 = loc(fused[#loc284, #loc282])
#loc561 = loc(fused[#loc287, #loc288])
#loc562 = loc(fused[#loc290, #loc291])
#loc563 = loc(fused[#loc292, #loc293])
#loc564 = loc(fused[#loc294, #loc291])
#loc565 = loc(fused[#loc298, #loc297])
#loc566 = loc(fused[#loc301, #loc302])
#loc567 = loc(fused[#loc303, #loc304])
#loc569 = loc(fused[#loc308, #loc309])
#loc570 = loc(fused[#loc311, #loc309])
#loc571 = loc(fused[#loc312, #loc313])
#loc572 = loc(fused[#loc314, #loc315])
#loc573 = loc(fused[#loc318, #loc321])
#loc574 = loc(fused[#loc322, #loc323, #loc324, #loc313])
#loc575 = loc(fused[#loc325, #loc326])
#loc576 = loc(fused[#loc332, #loc333])
#loc577 = loc(fused[#loc334, #loc335])
#loc578 = loc(fused[#loc337, #loc336])
#loc579 = loc(fused[#loc338, #loc339])
#loc580 = loc(fused[#loc340, #loc341])
#loc581 = loc(fused[#loc342, #loc343])
#loc582 = loc(fused[#loc344, #loc345])
#loc583 = loc(fused[#loc346, #loc347])
#loc584 = loc(fused[#loc348, #loc349])
#loc585 = loc(fused[#loc354, #loc355])
#loc586 = loc(fused[#loc356, #loc357])
#loc587 = loc(fused[#loc358, #loc359])
#loc588 = loc(fused[#loc360, #loc357])
#loc589 = loc(fused[#loc362, #loc363])
#loc590 = loc(fused[#loc365, #loc366])
#loc591 = loc(fused[#loc367, #loc368])
#loc592 = loc(fused[#loc370, #loc369])
#loc593 = loc(fused[#loc373, #loc374])
#loc594 = loc(fused[#loc377, #loc378])
#loc595 = loc(fused[#loc379, #loc380])
#loc596 = loc(fused[#loc382, #loc383])
#loc597 = loc(fused[#loc384, #loc385])
#loc598 = loc(fused[#loc386, #loc387])
#loc599 = loc(fused[#loc388, #loc380])
#loc600 = loc(fused[#loc392, #loc393])
#loc601 = loc(fused[#loc396, #loc397])
#loc602 = loc(fused[#loc398, #loc399])
#loc603 = loc(fused[#loc400, #loc401])
#loc604 = loc(fused[#loc403, #loc404])
#loc605 = loc(fused[#loc405, #loc399])
#loc606 = loc(fused[#loc409, #loc407])
#loc607 = loc(fused[#loc412, #loc413])
#loc608 = loc(fused[#loc415, #loc416])
#loc609 = loc(fused[#loc417, #loc418])
#loc610 = loc(fused[#loc419, #loc416])
#loc611 = loc(fused[#loc423, #loc422])
#loc612 = loc(fused[#loc426, #loc427])
#loc613 = loc(fused[#loc428, #loc429])
#loc615 = loc(fused[#loc433, #loc434])
#loc616 = loc(fused[#loc436, #loc434])
#loc617 = loc(fused[#loc437, #loc438])
#loc618 = loc(fused[#loc439, #loc440])
#loc619 = loc(fused[#loc444, #loc445])
#loc620 = loc(fused[#loc446, #loc447])
#loc621 = loc(fused[#loc449, #loc448])
#loc622 = loc(fused[#loc451, #loc450])
#loc623 = loc(fused[#loc453, #loc452])
