!s32i = !cir.int<s, 32>
!s64i = !cir.int<s, 64>
!s8i = !cir.int<s, 8>
!u16i = !cir.int<u, 16>
!u32i = !cir.int<u, 32>
!u64i = !cir.int<u, 64>
!u8i = !cir.int<u, 8>
!void = !cir.void
#false = #cir.bool<false> : !cir.bool
#fn_attr = #cir<extra({nothrow = #cir.nothrow})>
#fn_attr1 = #cir<extra({inline = #cir.inline<no>, nothrow = #cir.nothrow, optnone = #cir.optnone})>
#loc174 = loc("CWE369_Divide_by_Zero__float_listenSocket_16.c":272:10)
#loc175 = loc("CWE369_Divide_by_Zero__float_listenSocket_16.c":272:14)
#loc176 = loc("CWE369_Divide_by_Zero__float_listenSocket_16.c":272:20)
#loc177 = loc("CWE369_Divide_by_Zero__float_listenSocket_16.c":272:32)
#true = #cir.bool<true> : !cir.bool
!ty_in_addr = !cir.struct<struct "in_addr" {!u32i} #cir.record.decl.ast>
#loc423 = loc(fused[#loc174, #loc175])
#loc424 = loc(fused[#loc176, #loc177])
!ty_sockaddr = !cir.struct<struct "sockaddr" {!u16i, !cir.array<!s8i x 14>} #cir.record.decl.ast>
!ty_sockaddr_in = !cir.struct<struct "sockaddr_in" {!u16i, !u16i, !ty_in_addr, !cir.array<!u8i x 8>}>
module @"/home/ladisgin/git_proj/juliet-c/testcases/CWE369_Divide_by_Zero/s01/CWE369_Divide_by_Zero__float_listenSocket_16.c" attributes {cir.lang = #cir.lang<c>, cir.sob = #cir.signed_overflow_behavior<undefined>, cir.triple = "x86_64-unknown-linux-gnu", dlti.dl_spec = #dlti.dl_spec<f128 = dense<128> : vector<2xi64>, f16 = dense<16> : vector<2xi64>, !llvm.ptr<270> = dense<32> : vector<4xi64>, f64 = dense<64> : vector<2xi64>, i32 = dense<32> : vector<2xi64>, i64 = dense<64> : vector<2xi64>, !llvm.ptr<271> = dense<32> : vector<4xi64>, !llvm.ptr<272> = dense<64> : vector<4xi64>, f80 = dense<128> : vector<2xi64>, i128 = dense<128> : vector<2xi64>, i16 = dense<16> : vector<2xi64>, i8 = dense<8> : vector<2xi64>, i1 = dense<8> : vector<2xi64>, !llvm.ptr = dense<64> : vector<4xi64>, "dlti.endianness" = "little", "dlti.stack_alignment" = 128 : i64>} {
  cir.func private @socket(!s32i, !s32i, !s32i) -> !s32i extra(#fn_attr) loc(#loc357)
  cir.func private @htons(!u16i) -> !u16i extra(#fn_attr) loc(#loc358)
  cir.func private @bind(!s32i, !cir.ptr<!ty_sockaddr>, !u32i) -> !s32i extra(#fn_attr) loc(#loc359)
  cir.func private @listen(!s32i, !s32i) -> !s32i extra(#fn_attr) loc(#loc360)
  cir.func private @accept(!s32i, !cir.ptr<!ty_sockaddr>, !cir.ptr<!u32i>) -> !s32i loc(#loc361)
  cir.func private @recv(!s32i, !cir.ptr<!void>, !u64i, !s32i) -> !s64i loc(#loc362)
  cir.func private @atof(!cir.ptr<!s8i>) -> !cir.double extra(#fn_attr) loc(#loc363)
  cir.func private @close(!s32i) -> !s32i loc(#loc364)
  cir.func private @printIntLine(!s32i) loc(#loc365)
  cir.func no_proto @CWE369_Divide_by_Zero__float_listenSocket_16_bad() extra(#fn_attr1) {
    %0 = cir.alloca !cir.float, !cir.ptr<!cir.float>, ["data"] {alignment = 4 : i64} loc(#loc367)
    %1 = cir.const #cir.fp<0.000000e+00> : !cir.float loc(#loc23)
    cir.store %1, %0 : !cir.float, !cir.ptr<!cir.float> loc(#loc368)
    cir.scope {
      cir.while {
        %2 = cir.const #cir.int<1> : !s32i loc(#loc27)
        %3 = cir.cast(int_to_bool, %2 : !s32i), !cir.bool loc(#loc27)
        cir.condition(%3) loc(#loc27)
      } do {
        cir.scope {
          %2 = cir.alloca !s32i, !cir.ptr<!s32i>, ["recvResult"] {alignment = 4 : i64} loc(#loc371)
          %3 = cir.alloca !ty_sockaddr_in, !cir.ptr<!ty_sockaddr_in>, ["service"] {alignment = 4 : i64} loc(#loc372)
          %4 = cir.alloca !s32i, !cir.ptr<!s32i>, ["listenSocket", init] {alignment = 4 : i64} loc(#loc373)
          %5 = cir.alloca !s32i, !cir.ptr<!s32i>, ["acceptSocket", init] {alignment = 4 : i64} loc(#loc374)
          %6 = cir.alloca !cir.array<!s8i x 20>, !cir.ptr<!cir.array<!s8i x 20>>, ["inputBuffer"] {alignment = 16 : i64} loc(#loc375)
          %7 = cir.const #cir.int<1> : !s32i loc(#loc35)
          %8 = cir.unary(minus, %7) : !s32i, !s32i loc(#loc35)
          cir.store %8, %4 : !s32i, !cir.ptr<!s32i> loc(#loc373)
          %9 = cir.const #cir.int<1> : !s32i loc(#loc37)
          %10 = cir.unary(minus, %9) : !s32i, !s32i loc(#loc37)
          cir.store %10, %5 : !s32i, !cir.ptr<!s32i> loc(#loc374)
          cir.scope {
            cir.do {
              %11 = cir.const #cir.int<2> : !s32i loc(#loc42)
              %12 = cir.const #cir.int<1> : !s32i loc(#loc43)
              %13 = cir.const #cir.int<6> : !s32i loc(#loc44)
              %14 = cir.call @socket(%11, %12, %13) : (!s32i, !s32i, !s32i) -> !s32i extra(#fn_attr) loc(#loc45)
              cir.store %14, %4 : !s32i, !cir.ptr<!s32i> loc(#loc377)
              cir.scope {
                %51 = cir.load %4 : !cir.ptr<!s32i>, !s32i loc(#loc50)
                %52 = cir.const #cir.int<1> : !s32i loc(#loc51)
                %53 = cir.unary(minus, %52) : !s32i, !s32i loc(#loc51)
                %54 = cir.cmp(eq, %51, %53) : !s32i, !cir.bool loc(#loc379)
                cir.if %54 {
                  cir.break loc(#loc53)
                } loc(#loc380)
              } loc(#loc378)
              %15 = cir.cast(bitcast, %3 : !cir.ptr<!ty_sockaddr_in>), !cir.ptr<!void> loc(#loc381)
              %16 = cir.const #cir.int<0> : !s32i loc(#loc56)
              %17 = cir.const #cir.int<16> : !u64i loc(#loc382)
              cir.libc.memset %17 bytes from %15 set to %16 : !cir.ptr<!void>, !s32i, !u64i loc(#loc383)
              %18 = cir.const #cir.int<2> : !s32i loc(#loc61)
              %19 = cir.cast(integral, %18 : !s32i), !u16i loc(#loc61)
              %20 = cir.get_member %3[0] {name = "sin_family"} : !cir.ptr<!ty_sockaddr_in> -> !cir.ptr<!u16i> loc(#loc62)
              cir.store %19, %20 : !u16i, !cir.ptr<!u16i> loc(#loc384)
              %21 = cir.const #cir.int<0> : !s32i loc(#loc64)
              %22 = cir.cast(integral, %21 : !s32i), !u32i loc(#loc64)
              %23 = cir.get_member %3[2] {name = "sin_addr"} : !cir.ptr<!ty_sockaddr_in> -> !cir.ptr<!ty_in_addr> loc(#loc65)
              %24 = cir.get_member %23[0] {name = "s_addr"} : !cir.ptr<!ty_in_addr> -> !cir.ptr<!u32i> loc(#loc66)
              cir.store %22, %24 : !u32i, !cir.ptr<!u32i> loc(#loc385)
              %25 = cir.const #cir.int<27015> : !s32i loc(#loc68)
              %26 = cir.cast(integral, %25 : !s32i), !u16i loc(#loc68)
              %27 = cir.call @htons(%26) : (!u16i) -> !u16i extra(#fn_attr) loc(#loc69)
              %28 = cir.get_member %3[1] {name = "sin_port"} : !cir.ptr<!ty_sockaddr_in> -> !cir.ptr<!u16i> loc(#loc70)
              cir.store %27, %28 : !u16i, !cir.ptr<!u16i> loc(#loc386)
              cir.scope {
                %51 = cir.load %4 : !cir.ptr<!s32i>, !s32i loc(#loc75)
                %52 = cir.cast(bitcast, %3 : !cir.ptr<!ty_sockaddr_in>), !cir.ptr<!ty_sockaddr> loc(#loc388)
                %53 = cir.const #cir.int<16> : !u64i loc(#loc389)
                %54 = cir.cast(integral, %53 : !u64i), !u32i loc(#loc389)
                %55 = cir.call @bind(%51, %52, %54) : (!s32i, !cir.ptr<!ty_sockaddr>, !u32i) -> !s32i extra(#fn_attr) loc(#loc80)
                %56 = cir.const #cir.int<1> : !s32i loc(#loc81)
                %57 = cir.unary(minus, %56) : !s32i, !s32i loc(#loc81)
                %58 = cir.cmp(eq, %55, %57) : !s32i, !cir.bool loc(#loc390)
                cir.if %58 {
                  cir.break loc(#loc83)
                } loc(#loc391)
              } loc(#loc387)
              cir.scope {
                %51 = cir.load %4 : !cir.ptr<!s32i>, !s32i loc(#loc86)
                %52 = cir.const #cir.int<5> : !s32i loc(#loc87)
                %53 = cir.call @listen(%51, %52) : (!s32i, !s32i) -> !s32i extra(#fn_attr) loc(#loc88)
                %54 = cir.const #cir.int<1> : !s32i loc(#loc89)
                %55 = cir.unary(minus, %54) : !s32i, !s32i loc(#loc89)
                %56 = cir.cmp(eq, %53, %55) : !s32i, !cir.bool loc(#loc393)
                cir.if %56 {
                  cir.break loc(#loc91)
                } loc(#loc394)
              } loc(#loc392)
              %29 = cir.load %4 : !cir.ptr<!s32i>, !s32i loc(#loc92)
              %30 = cir.const #cir.ptr<null> : !cir.ptr<!ty_sockaddr> loc(#loc93)
              %31 = cir.const #cir.ptr<null> : !cir.ptr<!u32i> loc(#loc94)
              %32 = cir.call @accept(%29, %30, %31) : (!s32i, !cir.ptr<!ty_sockaddr>, !cir.ptr<!u32i>) -> !s32i loc(#loc95)
              cir.store %32, %5 : !s32i, !cir.ptr<!s32i> loc(#loc395)
              cir.scope {
                %51 = cir.load %5 : !cir.ptr<!s32i>, !s32i loc(#loc100)
                %52 = cir.const #cir.int<1> : !s32i loc(#loc101)
                %53 = cir.unary(minus, %52) : !s32i, !s32i loc(#loc101)
                %54 = cir.cmp(eq, %51, %53) : !s32i, !cir.bool loc(#loc397)
                cir.if %54 {
                  cir.break loc(#loc103)
                } loc(#loc398)
              } loc(#loc396)
              %33 = cir.load %5 : !cir.ptr<!s32i>, !s32i loc(#loc104)
              %34 = cir.cast(array_to_ptrdecay, %6 : !cir.ptr<!cir.array<!s8i x 20>>), !cir.ptr<!s8i> loc(#loc105)
              %35 = cir.cast(bitcast, %34 : !cir.ptr<!s8i>), !cir.ptr<!void> loc(#loc105)
              %36 = cir.const #cir.int<20> : !s32i loc(#loc106)
              %37 = cir.const #cir.int<1> : !s32i loc(#loc107)
              %38 = cir.binop(sub, %36, %37) nsw : !s32i loc(#loc106)
              %39 = cir.cast(integral, %38 : !s32i), !u64i loc(#loc106)
              %40 = cir.const #cir.int<0> : !s32i loc(#loc108)
              %41 = cir.call @recv(%33, %35, %39, %40) : (!s32i, !cir.ptr<!void>, !u64i, !s32i) -> !s64i loc(#loc109)
              %42 = cir.cast(integral, %41 : !s64i), !s32i loc(#loc109)
              cir.store %42, %2 : !s32i, !cir.ptr<!s32i> loc(#loc399)
              cir.scope {
                %51 = cir.load %2 : !cir.ptr<!s32i>, !s32i loc(#loc114)
                %52 = cir.const #cir.int<1> : !s32i loc(#loc115)
                %53 = cir.unary(minus, %52) : !s32i, !s32i loc(#loc115)
                %54 = cir.cmp(eq, %51, %53) : !s32i, !cir.bool loc(#loc401)
                %55 = cir.ternary(%54, true {
                  %56 = cir.const #true loc(#loc116)
                  cir.yield %56 : !cir.bool loc(#loc116)
                }, false {
                  %56 = cir.load %2 : !cir.ptr<!s32i>, !s32i loc(#loc117)
                  %57 = cir.const #cir.int<0> : !s32i loc(#loc118)
                  %58 = cir.cmp(eq, %56, %57) : !s32i, !cir.bool loc(#loc402)
                  %59 = cir.ternary(%58, true {
                    %60 = cir.const #true loc(#loc116)
                    cir.yield %60 : !cir.bool loc(#loc116)
                  }, false {
                    %60 = cir.const #false loc(#loc116)
                    cir.yield %60 : !cir.bool loc(#loc116)
                  }) : (!cir.bool) -> !cir.bool loc(#loc116)
                  cir.yield %59 : !cir.bool loc(#loc116)
                }) : (!cir.bool) -> !cir.bool loc(#loc116)
                cir.if %55 {
                  cir.break loc(#loc120)
                } loc(#loc403)
              } loc(#loc400)
              %43 = cir.const #cir.int<0> : !s32i loc(#loc121)
              %44 = cir.cast(integral, %43 : !s32i), !s8i loc(#loc121)
              %45 = cir.load %2 : !cir.ptr<!s32i>, !s32i loc(#loc122)
              %46 = cir.cast(array_to_ptrdecay, %6 : !cir.ptr<!cir.array<!s8i x 20>>), !cir.ptr<!s8i> loc(#loc123)
              %47 = cir.ptr_stride(%46 : !cir.ptr<!s8i>, %45 : !s32i), !cir.ptr<!s8i> loc(#loc123)
              cir.store %44, %47 : !s8i, !cir.ptr<!s8i> loc(#loc404)
              %48 = cir.cast(array_to_ptrdecay, %6 : !cir.ptr<!cir.array<!s8i x 20>>), !cir.ptr<!s8i> loc(#loc124)
              %49 = cir.call @atof(%48) : (!cir.ptr<!s8i>) -> !cir.double extra(#fn_attr) loc(#loc125)
              %50 = cir.cast(floating, %49 : !cir.double), !cir.float loc(#loc125)
              cir.store %50, %0 : !cir.float, !cir.ptr<!cir.float> loc(#loc405)
              cir.yield loc(#loc41)
            } while {
              %11 = cir.const #cir.int<0> : !s32i loc(#loc128)
              %12 = cir.cast(int_to_bool, %11 : !s32i), !cir.bool loc(#loc128)
              cir.condition(%12) loc(#loc128)
            } loc(#loc376)
          } loc(#loc376)
          cir.scope {
            %11 = cir.load %4 : !cir.ptr<!s32i>, !s32i loc(#loc131)
            %12 = cir.const #cir.int<1> : !s32i loc(#loc132)
            %13 = cir.unary(minus, %12) : !s32i, !s32i loc(#loc132)
            %14 = cir.cmp(ne, %11, %13) : !s32i, !cir.bool loc(#loc407)
            cir.if %14 {
              %15 = cir.load %4 : !cir.ptr<!s32i>, !s32i loc(#loc134)
              %16 = cir.call @close(%15) : (!s32i) -> !s32i loc(#loc135)
            } loc(#loc408)
          } loc(#loc406)
          cir.scope {
            %11 = cir.load %5 : !cir.ptr<!s32i>, !s32i loc(#loc138)
            %12 = cir.const #cir.int<1> : !s32i loc(#loc139)
            %13 = cir.unary(minus, %12) : !s32i, !s32i loc(#loc139)
            %14 = cir.cmp(ne, %11, %13) : !s32i, !cir.bool loc(#loc410)
            cir.if %14 {
              %15 = cir.load %5 : !cir.ptr<!s32i>, !s32i loc(#loc141)
              %16 = cir.call @close(%15) : (!s32i) -> !s32i loc(#loc142)
            } loc(#loc411)
          } loc(#loc409)
        } loc(#loc370)
        cir.break loc(#loc143)
      } loc(#loc369)
    } loc(#loc369)
    cir.scope {
      cir.while {
        %2 = cir.const #cir.int<1> : !s32i loc(#loc146)
        %3 = cir.cast(int_to_bool, %2 : !s32i), !cir.bool loc(#loc146)
        cir.condition(%3) loc(#loc146)
      } do {
        cir.scope {
          %2 = cir.alloca !s32i, !cir.ptr<!s32i>, ["result", init] {alignment = 4 : i64} loc(#loc414)
          %3 = cir.const #cir.fp<1.000000e+02> : !cir.double loc(#loc151)
          %4 = cir.load %0 : !cir.ptr<!cir.float>, !cir.float loc(#loc152)
          %5 = cir.cast(floating, %4 : !cir.float), !cir.double loc(#loc152)
          %6 = cir.binop(div, %3, %5) : !cir.double loc(#loc415)
          %7 = cir.cast(float_to_int, %6 : !cir.double), !s32i loc(#loc415)
          cir.store %7, %2 : !s32i, !cir.ptr<!s32i> loc(#loc414)
          %8 = cir.load %2 : !cir.ptr<!s32i>, !s32i loc(#loc153)
          cir.call @printIntLine(%8) : (!s32i) -> () loc(#loc154)
        } loc(#loc413)
        cir.break loc(#loc155)
      } loc(#loc412)
    } loc(#loc412)
    cir.return loc(#loc20)
  } loc(#loc366)
  cir.func no_proto @CWE369_Divide_by_Zero__float_listenSocket_16_good() extra(#fn_attr1) {
    %0 = cir.get_global @goodB2G : !cir.ptr<!cir.func<!void ()>> loc(#loc417)
    cir.call %0() : (!cir.ptr<!cir.func<!void ()>>) -> () loc(#loc158)
    %1 = cir.get_global @goodG2B : !cir.ptr<!cir.func<!void ()>> loc(#loc418)
    cir.call %1() : (!cir.ptr<!cir.func<!void ()>>) -> () loc(#loc160)
    cir.return loc(#loc157)
  } loc(#loc416)
  cir.func private @srand(!u32i) extra(#fn_attr) loc(#loc419)
  cir.func private @time(!cir.ptr<!s64i>) -> !s64i extra(#fn_attr) loc(#loc420)
  cir.func private @printLine(!cir.ptr<!s8i>) loc(#loc421)
  cir.global "private" constant cir_private dsolocal @".str" = #cir.const_array<"Calling good()...\00" : !cir.array<!s8i x 18>> : !cir.array<!s8i x 18> {alignment = 1 : i64} loc(#loc168)
  cir.global "private" constant cir_private dsolocal @".str.1" = #cir.const_array<"Finished good()\00" : !cir.array<!s8i x 16>> : !cir.array<!s8i x 16> {alignment = 1 : i64} loc(#loc169)
  cir.global "private" constant cir_private dsolocal @".str.2" = #cir.const_array<"Calling bad()...\00" : !cir.array<!s8i x 17>> : !cir.array<!s8i x 17> {alignment = 1 : i64} loc(#loc170)
  cir.global "private" constant cir_private dsolocal @".str.3" = #cir.const_array<"Finished bad()\00" : !cir.array<!s8i x 15>> : !cir.array<!s8i x 15> {alignment = 1 : i64} loc(#loc171)
  cir.func @main(%arg0: !s32i loc(fused[#loc174, #loc175]), %arg1: !cir.ptr<!cir.ptr<!s8i>> loc(fused[#loc176, #loc177])) -> !s32i extra(#fn_attr1) {
    %0 = cir.alloca !s32i, !cir.ptr<!s32i>, ["argc", init] {alignment = 4 : i64} loc(#loc423)
    %1 = cir.alloca !cir.ptr<!cir.ptr<!s8i>>, !cir.ptr<!cir.ptr<!cir.ptr<!s8i>>>, ["argv", init] {alignment = 8 : i64} loc(#loc424)
    %2 = cir.alloca !s32i, !cir.ptr<!s32i>, ["__retval"] {alignment = 4 : i64} loc(#loc173)
    cir.store %arg0, %0 : !s32i, !cir.ptr<!s32i> loc(#loc178)
    cir.store %arg1, %1 : !cir.ptr<!cir.ptr<!s8i>>, !cir.ptr<!cir.ptr<!cir.ptr<!s8i>>> loc(#loc178)
    %3 = cir.const #cir.ptr<null> : !cir.ptr<!s64i> loc(#loc179)
    %4 = cir.call @time(%3) : (!cir.ptr<!s64i>) -> !s64i extra(#fn_attr) loc(#loc180)
    %5 = cir.cast(integral, %4 : !s64i), !u32i loc(#loc180)
    cir.call @srand(%5) : (!u32i) -> () extra(#fn_attr) loc(#loc181)
    %6 = cir.get_global @".str" : !cir.ptr<!cir.array<!s8i x 18>> loc(#loc168)
    %7 = cir.cast(array_to_ptrdecay, %6 : !cir.ptr<!cir.array<!s8i x 18>>), !cir.ptr<!s8i> loc(#loc168)
    cir.call @printLine(%7) : (!cir.ptr<!s8i>) -> () loc(#loc182)
    %8 = cir.get_global @CWE369_Divide_by_Zero__float_listenSocket_16_good : !cir.ptr<!cir.func<!void ()>> loc(#loc425)
    cir.call @CWE369_Divide_by_Zero__float_listenSocket_16_good() : () -> () loc(#loc183)
    %9 = cir.get_global @".str.1" : !cir.ptr<!cir.array<!s8i x 16>> loc(#loc169)
    %10 = cir.cast(array_to_ptrdecay, %9 : !cir.ptr<!cir.array<!s8i x 16>>), !cir.ptr<!s8i> loc(#loc169)
    cir.call @printLine(%10) : (!cir.ptr<!s8i>) -> () loc(#loc185)
    %11 = cir.get_global @".str.2" : !cir.ptr<!cir.array<!s8i x 17>> loc(#loc170)
    %12 = cir.cast(array_to_ptrdecay, %11 : !cir.ptr<!cir.array<!s8i x 17>>), !cir.ptr<!s8i> loc(#loc170)
    cir.call @printLine(%12) : (!cir.ptr<!s8i>) -> () loc(#loc186)
    %13 = cir.get_global @CWE369_Divide_by_Zero__float_listenSocket_16_bad : !cir.ptr<!cir.func<!void ()>> loc(#loc426)
    cir.call @CWE369_Divide_by_Zero__float_listenSocket_16_bad() : () -> () loc(#loc187)
    %14 = cir.get_global @".str.3" : !cir.ptr<!cir.array<!s8i x 15>> loc(#loc171)
    %15 = cir.cast(array_to_ptrdecay, %14 : !cir.ptr<!cir.array<!s8i x 15>>), !cir.ptr<!s8i> loc(#loc171)
    cir.call @printLine(%15) : (!cir.ptr<!s8i>) -> () loc(#loc189)
    %16 = cir.const #cir.int<0> : !s32i loc(#loc190)
    cir.store %16, %2 : !s32i, !cir.ptr<!s32i> loc(#loc427)
    %17 = cir.load %2 : !cir.ptr<!s32i>, !s32i loc(#loc427)
    cir.return %17 : !s32i loc(#loc427)
  } loc(#loc422)
  cir.global "private" constant cir_private dsolocal @".str.4" = #cir.const_array<"This would result in a divide by zero\00" : !cir.array<!s8i x 38>> : !cir.array<!s8i x 38> {alignment = 1 : i64} loc(#loc192)
  cir.func no_proto internal private @goodB2G() extra(#fn_attr1) {
    %0 = cir.alloca !cir.float, !cir.ptr<!cir.float>, ["data"] {alignment = 4 : i64} loc(#loc429)
    %1 = cir.const #cir.fp<0.000000e+00> : !cir.float loc(#loc197)
    cir.store %1, %0 : !cir.float, !cir.ptr<!cir.float> loc(#loc430)
    cir.scope {
      cir.while {
        %2 = cir.const #cir.int<1> : !s32i loc(#loc201)
        %3 = cir.cast(int_to_bool, %2 : !s32i), !cir.bool loc(#loc201)
        cir.condition(%3) loc(#loc201)
      } do {
        cir.scope {
          %2 = cir.alloca !s32i, !cir.ptr<!s32i>, ["recvResult"] {alignment = 4 : i64} loc(#loc433)
          %3 = cir.alloca !ty_sockaddr_in, !cir.ptr<!ty_sockaddr_in>, ["service"] {alignment = 4 : i64} loc(#loc434)
          %4 = cir.alloca !s32i, !cir.ptr<!s32i>, ["listenSocket", init] {alignment = 4 : i64} loc(#loc435)
          %5 = cir.alloca !s32i, !cir.ptr<!s32i>, ["acceptSocket", init] {alignment = 4 : i64} loc(#loc436)
          %6 = cir.alloca !cir.array<!s8i x 20>, !cir.ptr<!cir.array<!s8i x 20>>, ["inputBuffer"] {alignment = 16 : i64} loc(#loc437)
          %7 = cir.const #cir.int<1> : !s32i loc(#loc209)
          %8 = cir.unary(minus, %7) : !s32i, !s32i loc(#loc209)
          cir.store %8, %4 : !s32i, !cir.ptr<!s32i> loc(#loc435)
          %9 = cir.const #cir.int<1> : !s32i loc(#loc211)
          %10 = cir.unary(minus, %9) : !s32i, !s32i loc(#loc211)
          cir.store %10, %5 : !s32i, !cir.ptr<!s32i> loc(#loc436)
          cir.scope {
            cir.do {
              %11 = cir.const #cir.int<2> : !s32i loc(#loc216)
              %12 = cir.const #cir.int<1> : !s32i loc(#loc217)
              %13 = cir.const #cir.int<6> : !s32i loc(#loc218)
              %14 = cir.call @socket(%11, %12, %13) : (!s32i, !s32i, !s32i) -> !s32i extra(#fn_attr) loc(#loc219)
              cir.store %14, %4 : !s32i, !cir.ptr<!s32i> loc(#loc439)
              cir.scope {
                %51 = cir.load %4 : !cir.ptr<!s32i>, !s32i loc(#loc224)
                %52 = cir.const #cir.int<1> : !s32i loc(#loc225)
                %53 = cir.unary(minus, %52) : !s32i, !s32i loc(#loc225)
                %54 = cir.cmp(eq, %51, %53) : !s32i, !cir.bool loc(#loc441)
                cir.if %54 {
                  cir.break loc(#loc227)
                } loc(#loc442)
              } loc(#loc440)
              %15 = cir.cast(bitcast, %3 : !cir.ptr<!ty_sockaddr_in>), !cir.ptr<!void> loc(#loc443)
              %16 = cir.const #cir.int<0> : !s32i loc(#loc230)
              %17 = cir.const #cir.int<16> : !u64i loc(#loc444)
              cir.libc.memset %17 bytes from %15 set to %16 : !cir.ptr<!void>, !s32i, !u64i loc(#loc445)
              %18 = cir.const #cir.int<2> : !s32i loc(#loc235)
              %19 = cir.cast(integral, %18 : !s32i), !u16i loc(#loc235)
              %20 = cir.get_member %3[0] {name = "sin_family"} : !cir.ptr<!ty_sockaddr_in> -> !cir.ptr<!u16i> loc(#loc62)
              cir.store %19, %20 : !u16i, !cir.ptr<!u16i> loc(#loc446)
              %21 = cir.const #cir.int<0> : !s32i loc(#loc237)
              %22 = cir.cast(integral, %21 : !s32i), !u32i loc(#loc237)
              %23 = cir.get_member %3[2] {name = "sin_addr"} : !cir.ptr<!ty_sockaddr_in> -> !cir.ptr<!ty_in_addr> loc(#loc65)
              %24 = cir.get_member %23[0] {name = "s_addr"} : !cir.ptr<!ty_in_addr> -> !cir.ptr<!u32i> loc(#loc66)
              cir.store %22, %24 : !u32i, !cir.ptr<!u32i> loc(#loc447)
              %25 = cir.const #cir.int<27015> : !s32i loc(#loc239)
              %26 = cir.cast(integral, %25 : !s32i), !u16i loc(#loc239)
              %27 = cir.call @htons(%26) : (!u16i) -> !u16i extra(#fn_attr) loc(#loc240)
              %28 = cir.get_member %3[1] {name = "sin_port"} : !cir.ptr<!ty_sockaddr_in> -> !cir.ptr<!u16i> loc(#loc70)
              cir.store %27, %28 : !u16i, !cir.ptr<!u16i> loc(#loc448)
              cir.scope {
                %51 = cir.load %4 : !cir.ptr<!s32i>, !s32i loc(#loc245)
                %52 = cir.cast(bitcast, %3 : !cir.ptr<!ty_sockaddr_in>), !cir.ptr<!ty_sockaddr> loc(#loc450)
                %53 = cir.const #cir.int<16> : !u64i loc(#loc451)
                %54 = cir.cast(integral, %53 : !u64i), !u32i loc(#loc451)
                %55 = cir.call @bind(%51, %52, %54) : (!s32i, !cir.ptr<!ty_sockaddr>, !u32i) -> !s32i extra(#fn_attr) loc(#loc250)
                %56 = cir.const #cir.int<1> : !s32i loc(#loc251)
                %57 = cir.unary(minus, %56) : !s32i, !s32i loc(#loc251)
                %58 = cir.cmp(eq, %55, %57) : !s32i, !cir.bool loc(#loc452)
                cir.if %58 {
                  cir.break loc(#loc253)
                } loc(#loc453)
              } loc(#loc449)
              cir.scope {
                %51 = cir.load %4 : !cir.ptr<!s32i>, !s32i loc(#loc256)
                %52 = cir.const #cir.int<5> : !s32i loc(#loc257)
                %53 = cir.call @listen(%51, %52) : (!s32i, !s32i) -> !s32i extra(#fn_attr) loc(#loc258)
                %54 = cir.const #cir.int<1> : !s32i loc(#loc259)
                %55 = cir.unary(minus, %54) : !s32i, !s32i loc(#loc259)
                %56 = cir.cmp(eq, %53, %55) : !s32i, !cir.bool loc(#loc455)
                cir.if %56 {
                  cir.break loc(#loc261)
                } loc(#loc456)
              } loc(#loc454)
              %29 = cir.load %4 : !cir.ptr<!s32i>, !s32i loc(#loc262)
              %30 = cir.const #cir.ptr<null> : !cir.ptr<!ty_sockaddr> loc(#loc263)
              %31 = cir.const #cir.ptr<null> : !cir.ptr<!u32i> loc(#loc264)
              %32 = cir.call @accept(%29, %30, %31) : (!s32i, !cir.ptr<!ty_sockaddr>, !cir.ptr<!u32i>) -> !s32i loc(#loc265)
              cir.store %32, %5 : !s32i, !cir.ptr<!s32i> loc(#loc457)
              cir.scope {
                %51 = cir.load %5 : !cir.ptr<!s32i>, !s32i loc(#loc270)
                %52 = cir.const #cir.int<1> : !s32i loc(#loc271)
                %53 = cir.unary(minus, %52) : !s32i, !s32i loc(#loc271)
                %54 = cir.cmp(eq, %51, %53) : !s32i, !cir.bool loc(#loc459)
                cir.if %54 {
                  cir.break loc(#loc273)
                } loc(#loc460)
              } loc(#loc458)
              %33 = cir.load %5 : !cir.ptr<!s32i>, !s32i loc(#loc274)
              %34 = cir.cast(array_to_ptrdecay, %6 : !cir.ptr<!cir.array<!s8i x 20>>), !cir.ptr<!s8i> loc(#loc275)
              %35 = cir.cast(bitcast, %34 : !cir.ptr<!s8i>), !cir.ptr<!void> loc(#loc275)
              %36 = cir.const #cir.int<20> : !s32i loc(#loc276)
              %37 = cir.const #cir.int<1> : !s32i loc(#loc277)
              %38 = cir.binop(sub, %36, %37) nsw : !s32i loc(#loc276)
              %39 = cir.cast(integral, %38 : !s32i), !u64i loc(#loc276)
              %40 = cir.const #cir.int<0> : !s32i loc(#loc278)
              %41 = cir.call @recv(%33, %35, %39, %40) : (!s32i, !cir.ptr<!void>, !u64i, !s32i) -> !s64i loc(#loc279)
              %42 = cir.cast(integral, %41 : !s64i), !s32i loc(#loc279)
              cir.store %42, %2 : !s32i, !cir.ptr<!s32i> loc(#loc461)
              cir.scope {
                %51 = cir.load %2 : !cir.ptr<!s32i>, !s32i loc(#loc284)
                %52 = cir.const #cir.int<1> : !s32i loc(#loc285)
                %53 = cir.unary(minus, %52) : !s32i, !s32i loc(#loc285)
                %54 = cir.cmp(eq, %51, %53) : !s32i, !cir.bool loc(#loc463)
                %55 = cir.ternary(%54, true {
                  %56 = cir.const #true loc(#loc286)
                  cir.yield %56 : !cir.bool loc(#loc286)
                }, false {
                  %56 = cir.load %2 : !cir.ptr<!s32i>, !s32i loc(#loc287)
                  %57 = cir.const #cir.int<0> : !s32i loc(#loc288)
                  %58 = cir.cmp(eq, %56, %57) : !s32i, !cir.bool loc(#loc464)
                  %59 = cir.ternary(%58, true {
                    %60 = cir.const #true loc(#loc286)
                    cir.yield %60 : !cir.bool loc(#loc286)
                  }, false {
                    %60 = cir.const #false loc(#loc286)
                    cir.yield %60 : !cir.bool loc(#loc286)
                  }) : (!cir.bool) -> !cir.bool loc(#loc286)
                  cir.yield %59 : !cir.bool loc(#loc286)
                }) : (!cir.bool) -> !cir.bool loc(#loc286)
                cir.if %55 {
                  cir.break loc(#loc290)
                } loc(#loc465)
              } loc(#loc462)
              %43 = cir.const #cir.int<0> : !s32i loc(#loc291)
              %44 = cir.cast(integral, %43 : !s32i), !s8i loc(#loc291)
              %45 = cir.load %2 : !cir.ptr<!s32i>, !s32i loc(#loc292)
              %46 = cir.cast(array_to_ptrdecay, %6 : !cir.ptr<!cir.array<!s8i x 20>>), !cir.ptr<!s8i> loc(#loc293)
              %47 = cir.ptr_stride(%46 : !cir.ptr<!s8i>, %45 : !s32i), !cir.ptr<!s8i> loc(#loc293)
              cir.store %44, %47 : !s8i, !cir.ptr<!s8i> loc(#loc466)
              %48 = cir.cast(array_to_ptrdecay, %6 : !cir.ptr<!cir.array<!s8i x 20>>), !cir.ptr<!s8i> loc(#loc294)
              %49 = cir.call @atof(%48) : (!cir.ptr<!s8i>) -> !cir.double extra(#fn_attr) loc(#loc295)
              %50 = cir.cast(floating, %49 : !cir.double), !cir.float loc(#loc295)
              cir.store %50, %0 : !cir.float, !cir.ptr<!cir.float> loc(#loc467)
              cir.yield loc(#loc215)
            } while {
              %11 = cir.const #cir.int<0> : !s32i loc(#loc298)
              %12 = cir.cast(int_to_bool, %11 : !s32i), !cir.bool loc(#loc298)
              cir.condition(%12) loc(#loc298)
            } loc(#loc438)
          } loc(#loc438)
          cir.scope {
            %11 = cir.load %4 : !cir.ptr<!s32i>, !s32i loc(#loc301)
            %12 = cir.const #cir.int<1> : !s32i loc(#loc302)
            %13 = cir.unary(minus, %12) : !s32i, !s32i loc(#loc302)
            %14 = cir.cmp(ne, %11, %13) : !s32i, !cir.bool loc(#loc469)
            cir.if %14 {
              %15 = cir.load %4 : !cir.ptr<!s32i>, !s32i loc(#loc304)
              %16 = cir.call @close(%15) : (!s32i) -> !s32i loc(#loc305)
            } loc(#loc470)
          } loc(#loc468)
          cir.scope {
            %11 = cir.load %5 : !cir.ptr<!s32i>, !s32i loc(#loc308)
            %12 = cir.const #cir.int<1> : !s32i loc(#loc309)
            %13 = cir.unary(minus, %12) : !s32i, !s32i loc(#loc309)
            %14 = cir.cmp(ne, %11, %13) : !s32i, !cir.bool loc(#loc472)
            cir.if %14 {
              %15 = cir.load %5 : !cir.ptr<!s32i>, !s32i loc(#loc311)
              %16 = cir.call @close(%15) : (!s32i) -> !s32i loc(#loc312)
            } loc(#loc473)
          } loc(#loc471)
        } loc(#loc432)
        cir.break loc(#loc313)
      } loc(#loc431)
    } loc(#loc431)
    cir.scope {
      cir.while {
        %2 = cir.const #cir.int<1> : !s32i loc(#loc316)
        %3 = cir.cast(int_to_bool, %2 : !s32i), !cir.bool loc(#loc316)
        cir.condition(%3) loc(#loc316)
      } do {
        cir.scope {
          %2 = cir.load %0 : !cir.ptr<!cir.float>, !cir.float loc(#loc319)
          %3 = cir.cast(floating, %2 : !cir.float), !cir.double loc(#loc319)
          %4 = cir.fabs %3 : !cir.double loc(#loc319)
          %5 = cir.const #cir.fp<9.9999999999999995E-7> : !cir.double loc(#loc320)
          %6 = cir.cmp(gt, %4, %5) : !cir.double, !cir.bool loc(#loc476)
          cir.if %6 {
            %7 = cir.alloca !s32i, !cir.ptr<!s32i>, ["result", init] {alignment = 4 : i64} loc(#loc478)
            %8 = cir.const #cir.fp<1.000000e+02> : !cir.double loc(#loc327)
            %9 = cir.load %0 : !cir.ptr<!cir.float>, !cir.float loc(#loc328)
            %10 = cir.cast(floating, %9 : !cir.float), !cir.double loc(#loc328)
            %11 = cir.binop(div, %8, %10) : !cir.double loc(#loc479)
            %12 = cir.cast(float_to_int, %11 : !cir.double), !s32i loc(#loc479)
            cir.store %12, %7 : !s32i, !cir.ptr<!s32i> loc(#loc478)
            %13 = cir.load %7 : !cir.ptr<!s32i>, !s32i loc(#loc329)
            cir.call @printIntLine(%13) : (!s32i) -> () loc(#loc330)
          } else {
            %7 = cir.get_global @".str.4" : !cir.ptr<!cir.array<!s8i x 38>> loc(#loc192)
            %8 = cir.cast(array_to_ptrdecay, %7 : !cir.ptr<!cir.array<!s8i x 38>>), !cir.ptr<!s8i> loc(#loc192)
            cir.call @printLine(%8) : (!cir.ptr<!s8i>) -> () loc(#loc331)
          } loc(#loc477)
        } loc(#loc475)
        cir.break loc(#loc332)
      } loc(#loc474)
    } loc(#loc474)
    cir.return loc(#loc194)
  } loc(#loc428)
  cir.func no_proto internal private @goodG2B() extra(#fn_attr1) {
    %0 = cir.alloca !cir.float, !cir.ptr<!cir.float>, ["data"] {alignment = 4 : i64} loc(#loc481)
    %1 = cir.const #cir.fp<0.000000e+00> : !cir.float loc(#loc337)
    cir.store %1, %0 : !cir.float, !cir.ptr<!cir.float> loc(#loc482)
    cir.scope {
      cir.while {
        %2 = cir.const #cir.int<1> : !s32i loc(#loc341)
        %3 = cir.cast(int_to_bool, %2 : !s32i), !cir.bool loc(#loc341)
        cir.condition(%3) loc(#loc341)
      } do {
        %2 = cir.const #cir.fp<2.000000e+00> : !cir.float loc(#loc342)
        cir.store %2, %0 : !cir.float, !cir.ptr<!cir.float> loc(#loc484)
        cir.break loc(#loc344)
      } loc(#loc483)
    } loc(#loc483)
    cir.scope {
      cir.while {
        %2 = cir.const #cir.int<1> : !s32i loc(#loc347)
        %3 = cir.cast(int_to_bool, %2 : !s32i), !cir.bool loc(#loc347)
        cir.condition(%3) loc(#loc347)
      } do {
        cir.scope {
          %2 = cir.alloca !s32i, !cir.ptr<!s32i>, ["result", init] {alignment = 4 : i64} loc(#loc487)
          %3 = cir.const #cir.fp<1.000000e+02> : !cir.double loc(#loc352)
          %4 = cir.load %0 : !cir.ptr<!cir.float>, !cir.float loc(#loc353)
          %5 = cir.cast(floating, %4 : !cir.float), !cir.double loc(#loc353)
          %6 = cir.binop(div, %3, %5) : !cir.double loc(#loc488)
          %7 = cir.cast(float_to_int, %6 : !cir.double), !s32i loc(#loc488)
          cir.store %7, %2 : !s32i, !cir.ptr<!s32i> loc(#loc487)
          %8 = cir.load %2 : !cir.ptr<!s32i>, !s32i loc(#loc354)
          cir.call @printIntLine(%8) : (!s32i) -> () loc(#loc355)
        } loc(#loc486)
        cir.break loc(#loc356)
      } loc(#loc485)
    } loc(#loc485)
    cir.return loc(#loc334)
  } loc(#loc480)
} loc(#loc)
#loc = loc("/home/ladisgin/git_proj/juliet-c/testcases/CWE369_Divide_by_Zero/s01/CWE369_Divide_by_Zero__float_listenSocket_16.c":0:0)
#loc1 = loc("/usr/include/sys/socket.h":102:1)
#loc2 = loc("/usr/include/sys/socket.h":102:62)
#loc3 = loc("/usr/include/netinet/in.h":404:1)
#loc4 = loc("/usr/include/netinet/in.h":405:40)
#loc5 = loc("/usr/include/sys/socket.h":112:1)
#loc6 = loc("/usr/include/sys/socket.h":113:6)
#loc7 = loc("/usr/include/sys/socket.h":296:1)
#loc8 = loc("/usr/include/sys/socket.h":296:39)
#loc9 = loc("/usr/include/sys/socket.h":306:1)
#loc10 = loc("/usr/include/sys/socket.h":307:38)
#loc11 = loc("/usr/include/sys/socket.h":145:1)
#loc12 = loc("/usr/include/sys/socket.h":145:68)
#loc13 = loc("/usr/include/stdlib.h":102:1)
#loc14 = loc("/usr/include/stdlib.h":103:33)
#loc15 = loc("/usr/include/unistd.h":358:1)
#loc16 = loc("/usr/include/unistd.h":358:27)
#loc17 = loc("../../../testcasesupport/std_testcase_io.h":18:1)
#loc18 = loc("../../../testcasesupport/std_testcase_io.h":18:33)
#loc19 = loc("CWE369_Divide_by_Zero__float_listenSocket_16.c":46:1)
#loc20 = loc("CWE369_Divide_by_Zero__float_listenSocket_16.c":133:1)
#loc21 = loc("CWE369_Divide_by_Zero__float_listenSocket_16.c":48:5)
#loc22 = loc("CWE369_Divide_by_Zero__float_listenSocket_16.c":48:11)
#loc23 = loc("CWE369_Divide_by_Zero__float_listenSocket_16.c":50:12)
#loc24 = loc("CWE369_Divide_by_Zero__float_listenSocket_16.c":50:5)
#loc25 = loc("CWE369_Divide_by_Zero__float_listenSocket_16.c":51:5)
#loc26 = loc("CWE369_Divide_by_Zero__float_listenSocket_16.c":123:5)
#loc27 = loc("CWE369_Divide_by_Zero__float_listenSocket_16.c":51:11)
#loc28 = loc("CWE369_Divide_by_Zero__float_listenSocket_16.c":53:9)
#loc29 = loc("CWE369_Divide_by_Zero__float_listenSocket_16.c":121:9)
#loc30 = loc("CWE369_Divide_by_Zero__float_listenSocket_16.c":58:13)
#loc31 = loc("CWE369_Divide_by_Zero__float_listenSocket_16.c":58:17)
#loc32 = loc("CWE369_Divide_by_Zero__float_listenSocket_16.c":59:13)
#loc33 = loc("CWE369_Divide_by_Zero__float_listenSocket_16.c":59:32)
#loc34 = loc("CWE369_Divide_by_Zero__float_listenSocket_16.c":60:13)
#loc35 = loc("CWE369_Divide_by_Zero__float_listenSocket_16.c":60:35)
#loc36 = loc("CWE369_Divide_by_Zero__float_listenSocket_16.c":61:13)
#loc37 = loc("CWE369_Divide_by_Zero__float_listenSocket_16.c":61:35)
#loc38 = loc("CWE369_Divide_by_Zero__float_listenSocket_16.c":62:13)
#loc39 = loc("CWE369_Divide_by_Zero__float_listenSocket_16.c":62:45)
#loc40 = loc("CWE369_Divide_by_Zero__float_listenSocket_16.c":63:13)
#loc41 = loc("CWE369_Divide_by_Zero__float_listenSocket_16.c":106:21)
#loc42 = loc("CWE369_Divide_by_Zero__float_listenSocket_16.c":72:39)
#loc43 = loc("CWE369_Divide_by_Zero__float_listenSocket_16.c":72:48)
#loc44 = loc("CWE369_Divide_by_Zero__float_listenSocket_16.c":72:61)
#loc45 = loc("CWE369_Divide_by_Zero__float_listenSocket_16.c":72:32)
#loc46 = loc("CWE369_Divide_by_Zero__float_listenSocket_16.c":72:17)
#loc47 = loc("CWE369_Divide_by_Zero__float_listenSocket_16.c":72:72)
#loc48 = loc("CWE369_Divide_by_Zero__float_listenSocket_16.c":73:17)
#loc49 = loc("CWE369_Divide_by_Zero__float_listenSocket_16.c":76:17)
#loc50 = loc("CWE369_Divide_by_Zero__float_listenSocket_16.c":73:21)
#loc51 = loc("CWE369_Divide_by_Zero__float_listenSocket_16.c":73:37)
#loc52 = loc("CWE369_Divide_by_Zero__float_listenSocket_16.c":74:17)
#loc53 = loc("CWE369_Divide_by_Zero__float_listenSocket_16.c":75:21)
#loc54 = loc("CWE369_Divide_by_Zero__float_listenSocket_16.c":77:24)
#loc55 = loc("CWE369_Divide_by_Zero__float_listenSocket_16.c":77:25)
#loc56 = loc("CWE369_Divide_by_Zero__float_listenSocket_16.c":77:34)
#loc57 = loc("CWE369_Divide_by_Zero__float_listenSocket_16.c":77:37)
#loc58 = loc("CWE369_Divide_by_Zero__float_listenSocket_16.c":77:51)
#loc59 = loc("CWE369_Divide_by_Zero__float_listenSocket_16.c":77:17)
#loc60 = loc("CWE369_Divide_by_Zero__float_listenSocket_16.c":77:52)
#loc61 = loc("CWE369_Divide_by_Zero__float_listenSocket_16.c":78:38)
#loc62 = loc("/usr/include/netinet/in.h":249:5)
#loc63 = loc("CWE369_Divide_by_Zero__float_listenSocket_16.c":78:17)
#loc64 = loc("CWE369_Divide_by_Zero__float_listenSocket_16.c":79:43)
#loc65 = loc("/usr/include/netinet/in.h":251:20)
#loc66 = loc("/usr/include/netinet/in.h":33:15)
#loc67 = loc("CWE369_Divide_by_Zero__float_listenSocket_16.c":79:17)
#loc68 = loc("CWE369_Divide_by_Zero__float_listenSocket_16.c":80:42)
#loc69 = loc("CWE369_Divide_by_Zero__float_listenSocket_16.c":80:36)
#loc70 = loc("/usr/include/netinet/in.h":250:15)
#loc71 = loc("CWE369_Divide_by_Zero__float_listenSocket_16.c":80:17)
#loc72 = loc("CWE369_Divide_by_Zero__float_listenSocket_16.c":80:50)
#loc73 = loc("CWE369_Divide_by_Zero__float_listenSocket_16.c":81:17)
#loc74 = loc("CWE369_Divide_by_Zero__float_listenSocket_16.c":84:17)
#loc75 = loc("CWE369_Divide_by_Zero__float_listenSocket_16.c":81:26)
#loc76 = loc("CWE369_Divide_by_Zero__float_listenSocket_16.c":81:58)
#loc77 = loc("CWE369_Divide_by_Zero__float_listenSocket_16.c":81:59)
#loc78 = loc("CWE369_Divide_by_Zero__float_listenSocket_16.c":81:68)
#loc79 = loc("CWE369_Divide_by_Zero__float_listenSocket_16.c":81:82)
#loc80 = loc("CWE369_Divide_by_Zero__float_listenSocket_16.c":81:21)
#loc81 = loc("CWE369_Divide_by_Zero__float_listenSocket_16.c":81:88)
#loc82 = loc("CWE369_Divide_by_Zero__float_listenSocket_16.c":82:17)
#loc83 = loc("CWE369_Divide_by_Zero__float_listenSocket_16.c":83:21)
#loc84 = loc("CWE369_Divide_by_Zero__float_listenSocket_16.c":85:17)
#loc85 = loc("CWE369_Divide_by_Zero__float_listenSocket_16.c":88:17)
#loc86 = loc("CWE369_Divide_by_Zero__float_listenSocket_16.c":85:28)
#loc87 = loc("CWE369_Divide_by_Zero__float_listenSocket_16.c":85:42)
#loc88 = loc("CWE369_Divide_by_Zero__float_listenSocket_16.c":85:21)
#loc89 = loc("CWE369_Divide_by_Zero__float_listenSocket_16.c":85:61)
#loc90 = loc("CWE369_Divide_by_Zero__float_listenSocket_16.c":86:17)
#loc91 = loc("CWE369_Divide_by_Zero__float_listenSocket_16.c":87:21)
#loc92 = loc("CWE369_Divide_by_Zero__float_listenSocket_16.c":89:39)
#loc93 = loc("CWE369_Divide_by_Zero__float_listenSocket_16.c":89:53)
#loc94 = loc("CWE369_Divide_by_Zero__float_listenSocket_16.c":89:59)
#loc95 = loc("CWE369_Divide_by_Zero__float_listenSocket_16.c":89:32)
#loc96 = loc("CWE369_Divide_by_Zero__float_listenSocket_16.c":89:17)
#loc97 = loc("CWE369_Divide_by_Zero__float_listenSocket_16.c":89:63)
#loc98 = loc("CWE369_Divide_by_Zero__float_listenSocket_16.c":90:17)
#loc99 = loc("CWE369_Divide_by_Zero__float_listenSocket_16.c":93:17)
#loc100 = loc("CWE369_Divide_by_Zero__float_listenSocket_16.c":90:21)
#loc101 = loc("CWE369_Divide_by_Zero__float_listenSocket_16.c":90:37)
#loc102 = loc("CWE369_Divide_by_Zero__float_listenSocket_16.c":91:17)
#loc103 = loc("CWE369_Divide_by_Zero__float_listenSocket_16.c":92:21)
#loc104 = loc("CWE369_Divide_by_Zero__float_listenSocket_16.c":96:35)
#loc105 = loc("CWE369_Divide_by_Zero__float_listenSocket_16.c":96:49)
#loc106 = loc("CWE369_Divide_by_Zero__float_listenSocket_16.c":96:62)
#loc107 = loc("CWE369_Divide_by_Zero__float_listenSocket_16.c":96:80)
#loc108 = loc("CWE369_Divide_by_Zero__float_listenSocket_16.c":96:83)
#loc109 = loc("CWE369_Divide_by_Zero__float_listenSocket_16.c":96:30)
#loc110 = loc("CWE369_Divide_by_Zero__float_listenSocket_16.c":96:17)
#loc111 = loc("CWE369_Divide_by_Zero__float_listenSocket_16.c":96:84)
#loc112 = loc("CWE369_Divide_by_Zero__float_listenSocket_16.c":97:17)
#loc113 = loc("CWE369_Divide_by_Zero__float_listenSocket_16.c":100:17)
#loc114 = loc("CWE369_Divide_by_Zero__float_listenSocket_16.c":97:21)
#loc115 = loc("CWE369_Divide_by_Zero__float_listenSocket_16.c":97:35)
#loc116 = loc("CWE369_Divide_by_Zero__float_listenSocket_16.c":97:48)
#loc117 = loc("CWE369_Divide_by_Zero__float_listenSocket_16.c":97:51)
#loc118 = loc("CWE369_Divide_by_Zero__float_listenSocket_16.c":97:65)
#loc119 = loc("CWE369_Divide_by_Zero__float_listenSocket_16.c":98:17)
#loc120 = loc("CWE369_Divide_by_Zero__float_listenSocket_16.c":99:21)
#loc121 = loc("CWE369_Divide_by_Zero__float_listenSocket_16.c":102:43)
#loc122 = loc("CWE369_Divide_by_Zero__float_listenSocket_16.c":102:29)
#loc123 = loc("CWE369_Divide_by_Zero__float_listenSocket_16.c":102:17)
#loc124 = loc("CWE369_Divide_by_Zero__float_listenSocket_16.c":104:36)
#loc125 = loc("CWE369_Divide_by_Zero__float_listenSocket_16.c":104:31)
#loc126 = loc("CWE369_Divide_by_Zero__float_listenSocket_16.c":104:17)
#loc127 = loc("CWE369_Divide_by_Zero__float_listenSocket_16.c":104:47)
#loc128 = loc("CWE369_Divide_by_Zero__float_listenSocket_16.c":106:20)
#loc129 = loc("CWE369_Divide_by_Zero__float_listenSocket_16.c":107:13)
#loc130 = loc("CWE369_Divide_by_Zero__float_listenSocket_16.c":110:13)
#loc131 = loc("CWE369_Divide_by_Zero__float_listenSocket_16.c":107:17)
#loc132 = loc("CWE369_Divide_by_Zero__float_listenSocket_16.c":107:33)
#loc133 = loc("CWE369_Divide_by_Zero__float_listenSocket_16.c":108:13)
#loc134 = loc("CWE369_Divide_by_Zero__float_listenSocket_16.c":109:30)
#loc135 = loc("CWE369_Divide_by_Zero__float_listenSocket_16.c":109:17)
#loc136 = loc("CWE369_Divide_by_Zero__float_listenSocket_16.c":111:13)
#loc137 = loc("CWE369_Divide_by_Zero__float_listenSocket_16.c":114:13)
#loc138 = loc("CWE369_Divide_by_Zero__float_listenSocket_16.c":111:17)
#loc139 = loc("CWE369_Divide_by_Zero__float_listenSocket_16.c":111:33)
#loc140 = loc("CWE369_Divide_by_Zero__float_listenSocket_16.c":112:13)
#loc141 = loc("CWE369_Divide_by_Zero__float_listenSocket_16.c":113:30)
#loc142 = loc("CWE369_Divide_by_Zero__float_listenSocket_16.c":113:17)
#loc143 = loc("CWE369_Divide_by_Zero__float_listenSocket_16.c":122:9)
#loc144 = loc("CWE369_Divide_by_Zero__float_listenSocket_16.c":124:5)
#loc145 = loc("CWE369_Divide_by_Zero__float_listenSocket_16.c":132:5)
#loc146 = loc("CWE369_Divide_by_Zero__float_listenSocket_16.c":124:11)
#loc147 = loc("CWE369_Divide_by_Zero__float_listenSocket_16.c":126:9)
#loc148 = loc("CWE369_Divide_by_Zero__float_listenSocket_16.c":130:9)
#loc149 = loc("CWE369_Divide_by_Zero__float_listenSocket_16.c":128:13)
#loc150 = loc("CWE369_Divide_by_Zero__float_listenSocket_16.c":128:44)
#loc151 = loc("CWE369_Divide_by_Zero__float_listenSocket_16.c":128:32)
#loc152 = loc("CWE369_Divide_by_Zero__float_listenSocket_16.c":128:40)
#loc153 = loc("CWE369_Divide_by_Zero__float_listenSocket_16.c":129:26)
#loc154 = loc("CWE369_Divide_by_Zero__float_listenSocket_16.c":129:13)
#loc155 = loc("CWE369_Divide_by_Zero__float_listenSocket_16.c":131:9)
#loc156 = loc("CWE369_Divide_by_Zero__float_listenSocket_16.c":257:1)
#loc157 = loc("CWE369_Divide_by_Zero__float_listenSocket_16.c":261:1)
#loc158 = loc("CWE369_Divide_by_Zero__float_listenSocket_16.c":259:5)
#loc159 = loc("CWE369_Divide_by_Zero__float_listenSocket_16.c":259:13)
#loc160 = loc("CWE369_Divide_by_Zero__float_listenSocket_16.c":260:5)
#loc161 = loc("CWE369_Divide_by_Zero__float_listenSocket_16.c":260:13)
#loc162 = loc("/usr/include/stdlib.h":575:1)
#loc163 = loc("/usr/include/stdlib.h":575:41)
#loc164 = loc("/usr/include/time.h":76:1)
#loc165 = loc("/usr/include/time.h":76:38)
#loc166 = loc("../../../testcasesupport/std_testcase_io.h":14:1)
#loc167 = loc("../../../testcasesupport/std_testcase_io.h":14:33)
#loc168 = loc("CWE369_Divide_by_Zero__float_listenSocket_16.c":277:15)
#loc169 = loc("CWE369_Divide_by_Zero__float_listenSocket_16.c":279:15)
#loc170 = loc("CWE369_Divide_by_Zero__float_listenSocket_16.c":282:15)
#loc171 = loc("CWE369_Divide_by_Zero__float_listenSocket_16.c":284:15)
#loc172 = loc("CWE369_Divide_by_Zero__float_listenSocket_16.c":272:1)
#loc173 = loc("CWE369_Divide_by_Zero__float_listenSocket_16.c":287:1)
#loc178 = loc("CWE369_Divide_by_Zero__float_listenSocket_16.c":273:1)
#loc179 = loc("CWE369_Divide_by_Zero__float_listenSocket_16.c":275:27)
#loc180 = loc("CWE369_Divide_by_Zero__float_listenSocket_16.c":275:22)
#loc181 = loc("CWE369_Divide_by_Zero__float_listenSocket_16.c":275:5)
#loc182 = loc("CWE369_Divide_by_Zero__float_listenSocket_16.c":277:5)
#loc183 = loc("CWE369_Divide_by_Zero__float_listenSocket_16.c":278:5)
#loc184 = loc("CWE369_Divide_by_Zero__float_listenSocket_16.c":278:55)
#loc185 = loc("CWE369_Divide_by_Zero__float_listenSocket_16.c":279:5)
#loc186 = loc("CWE369_Divide_by_Zero__float_listenSocket_16.c":282:5)
#loc187 = loc("CWE369_Divide_by_Zero__float_listenSocket_16.c":283:5)
#loc188 = loc("CWE369_Divide_by_Zero__float_listenSocket_16.c":283:54)
#loc189 = loc("CWE369_Divide_by_Zero__float_listenSocket_16.c":284:5)
#loc190 = loc("CWE369_Divide_by_Zero__float_listenSocket_16.c":286:12)
#loc191 = loc("CWE369_Divide_by_Zero__float_listenSocket_16.c":286:5)
#loc192 = loc("CWE369_Divide_by_Zero__float_listenSocket_16.c":228:23)
#loc193 = loc("CWE369_Divide_by_Zero__float_listenSocket_16.c":140:1)
#loc194 = loc("CWE369_Divide_by_Zero__float_listenSocket_16.c":232:1)
#loc195 = loc("CWE369_Divide_by_Zero__float_listenSocket_16.c":142:5)
#loc196 = loc("CWE369_Divide_by_Zero__float_listenSocket_16.c":142:11)
#loc197 = loc("CWE369_Divide_by_Zero__float_listenSocket_16.c":144:12)
#loc198 = loc("CWE369_Divide_by_Zero__float_listenSocket_16.c":144:5)
#loc199 = loc("CWE369_Divide_by_Zero__float_listenSocket_16.c":145:5)
#loc200 = loc("CWE369_Divide_by_Zero__float_listenSocket_16.c":217:5)
#loc201 = loc("CWE369_Divide_by_Zero__float_listenSocket_16.c":145:11)
#loc202 = loc("CWE369_Divide_by_Zero__float_listenSocket_16.c":147:9)
#loc203 = loc("CWE369_Divide_by_Zero__float_listenSocket_16.c":215:9)
#loc204 = loc("CWE369_Divide_by_Zero__float_listenSocket_16.c":152:13)
#loc205 = loc("CWE369_Divide_by_Zero__float_listenSocket_16.c":152:17)
#loc206 = loc("CWE369_Divide_by_Zero__float_listenSocket_16.c":153:13)
#loc207 = loc("CWE369_Divide_by_Zero__float_listenSocket_16.c":153:32)
#loc208 = loc("CWE369_Divide_by_Zero__float_listenSocket_16.c":154:13)
#loc209 = loc("CWE369_Divide_by_Zero__float_listenSocket_16.c":154:35)
#loc210 = loc("CWE369_Divide_by_Zero__float_listenSocket_16.c":155:13)
#loc211 = loc("CWE369_Divide_by_Zero__float_listenSocket_16.c":155:35)
#loc212 = loc("CWE369_Divide_by_Zero__float_listenSocket_16.c":156:13)
#loc213 = loc("CWE369_Divide_by_Zero__float_listenSocket_16.c":156:45)
#loc214 = loc("CWE369_Divide_by_Zero__float_listenSocket_16.c":157:13)
#loc215 = loc("CWE369_Divide_by_Zero__float_listenSocket_16.c":200:21)
#loc216 = loc("CWE369_Divide_by_Zero__float_listenSocket_16.c":166:39)
#loc217 = loc("CWE369_Divide_by_Zero__float_listenSocket_16.c":166:48)
#loc218 = loc("CWE369_Divide_by_Zero__float_listenSocket_16.c":166:61)
#loc219 = loc("CWE369_Divide_by_Zero__float_listenSocket_16.c":166:32)
#loc220 = loc("CWE369_Divide_by_Zero__float_listenSocket_16.c":166:17)
#loc221 = loc("CWE369_Divide_by_Zero__float_listenSocket_16.c":166:72)
#loc222 = loc("CWE369_Divide_by_Zero__float_listenSocket_16.c":167:17)
#loc223 = loc("CWE369_Divide_by_Zero__float_listenSocket_16.c":170:17)
#loc224 = loc("CWE369_Divide_by_Zero__float_listenSocket_16.c":167:21)
#loc225 = loc("CWE369_Divide_by_Zero__float_listenSocket_16.c":167:37)
#loc226 = loc("CWE369_Divide_by_Zero__float_listenSocket_16.c":168:17)
#loc227 = loc("CWE369_Divide_by_Zero__float_listenSocket_16.c":169:21)
#loc228 = loc("CWE369_Divide_by_Zero__float_listenSocket_16.c":171:24)
#loc229 = loc("CWE369_Divide_by_Zero__float_listenSocket_16.c":171:25)
#loc230 = loc("CWE369_Divide_by_Zero__float_listenSocket_16.c":171:34)
#loc231 = loc("CWE369_Divide_by_Zero__float_listenSocket_16.c":171:37)
#loc232 = loc("CWE369_Divide_by_Zero__float_listenSocket_16.c":171:51)
#loc233 = loc("CWE369_Divide_by_Zero__float_listenSocket_16.c":171:17)
#loc234 = loc("CWE369_Divide_by_Zero__float_listenSocket_16.c":171:52)
#loc235 = loc("CWE369_Divide_by_Zero__float_listenSocket_16.c":172:38)
#loc236 = loc("CWE369_Divide_by_Zero__float_listenSocket_16.c":172:17)
#loc237 = loc("CWE369_Divide_by_Zero__float_listenSocket_16.c":173:43)
#loc238 = loc("CWE369_Divide_by_Zero__float_listenSocket_16.c":173:17)
#loc239 = loc("CWE369_Divide_by_Zero__float_listenSocket_16.c":174:42)
#loc240 = loc("CWE369_Divide_by_Zero__float_listenSocket_16.c":174:36)
#loc241 = loc("CWE369_Divide_by_Zero__float_listenSocket_16.c":174:17)
#loc242 = loc("CWE369_Divide_by_Zero__float_listenSocket_16.c":174:50)
#loc243 = loc("CWE369_Divide_by_Zero__float_listenSocket_16.c":175:17)
#loc244 = loc("CWE369_Divide_by_Zero__float_listenSocket_16.c":178:17)
#loc245 = loc("CWE369_Divide_by_Zero__float_listenSocket_16.c":175:26)
#loc246 = loc("CWE369_Divide_by_Zero__float_listenSocket_16.c":175:58)
#loc247 = loc("CWE369_Divide_by_Zero__float_listenSocket_16.c":175:59)
#loc248 = loc("CWE369_Divide_by_Zero__float_listenSocket_16.c":175:68)
#loc249 = loc("CWE369_Divide_by_Zero__float_listenSocket_16.c":175:82)
#loc250 = loc("CWE369_Divide_by_Zero__float_listenSocket_16.c":175:21)
#loc251 = loc("CWE369_Divide_by_Zero__float_listenSocket_16.c":175:88)
#loc252 = loc("CWE369_Divide_by_Zero__float_listenSocket_16.c":176:17)
#loc253 = loc("CWE369_Divide_by_Zero__float_listenSocket_16.c":177:21)
#loc254 = loc("CWE369_Divide_by_Zero__float_listenSocket_16.c":179:17)
#loc255 = loc("CWE369_Divide_by_Zero__float_listenSocket_16.c":182:17)
#loc256 = loc("CWE369_Divide_by_Zero__float_listenSocket_16.c":179:28)
#loc257 = loc("CWE369_Divide_by_Zero__float_listenSocket_16.c":179:42)
#loc258 = loc("CWE369_Divide_by_Zero__float_listenSocket_16.c":179:21)
#loc259 = loc("CWE369_Divide_by_Zero__float_listenSocket_16.c":179:61)
#loc260 = loc("CWE369_Divide_by_Zero__float_listenSocket_16.c":180:17)
#loc261 = loc("CWE369_Divide_by_Zero__float_listenSocket_16.c":181:21)
#loc262 = loc("CWE369_Divide_by_Zero__float_listenSocket_16.c":183:39)
#loc263 = loc("CWE369_Divide_by_Zero__float_listenSocket_16.c":183:53)
#loc264 = loc("CWE369_Divide_by_Zero__float_listenSocket_16.c":183:59)
#loc265 = loc("CWE369_Divide_by_Zero__float_listenSocket_16.c":183:32)
#loc266 = loc("CWE369_Divide_by_Zero__float_listenSocket_16.c":183:17)
#loc267 = loc("CWE369_Divide_by_Zero__float_listenSocket_16.c":183:63)
#loc268 = loc("CWE369_Divide_by_Zero__float_listenSocket_16.c":184:17)
#loc269 = loc("CWE369_Divide_by_Zero__float_listenSocket_16.c":187:17)
#loc270 = loc("CWE369_Divide_by_Zero__float_listenSocket_16.c":184:21)
#loc271 = loc("CWE369_Divide_by_Zero__float_listenSocket_16.c":184:37)
#loc272 = loc("CWE369_Divide_by_Zero__float_listenSocket_16.c":185:17)
#loc273 = loc("CWE369_Divide_by_Zero__float_listenSocket_16.c":186:21)
#loc274 = loc("CWE369_Divide_by_Zero__float_listenSocket_16.c":190:35)
#loc275 = loc("CWE369_Divide_by_Zero__float_listenSocket_16.c":190:49)
#loc276 = loc("CWE369_Divide_by_Zero__float_listenSocket_16.c":190:62)
#loc277 = loc("CWE369_Divide_by_Zero__float_listenSocket_16.c":190:80)
#loc278 = loc("CWE369_Divide_by_Zero__float_listenSocket_16.c":190:83)
#loc279 = loc("CWE369_Divide_by_Zero__float_listenSocket_16.c":190:30)
#loc280 = loc("CWE369_Divide_by_Zero__float_listenSocket_16.c":190:17)
#loc281 = loc("CWE369_Divide_by_Zero__float_listenSocket_16.c":190:84)
#loc282 = loc("CWE369_Divide_by_Zero__float_listenSocket_16.c":191:17)
#loc283 = loc("CWE369_Divide_by_Zero__float_listenSocket_16.c":194:17)
#loc284 = loc("CWE369_Divide_by_Zero__float_listenSocket_16.c":191:21)
#loc285 = loc("CWE369_Divide_by_Zero__float_listenSocket_16.c":191:35)
#loc286 = loc("CWE369_Divide_by_Zero__float_listenSocket_16.c":191:48)
#loc287 = loc("CWE369_Divide_by_Zero__float_listenSocket_16.c":191:51)
#loc288 = loc("CWE369_Divide_by_Zero__float_listenSocket_16.c":191:65)
#loc289 = loc("CWE369_Divide_by_Zero__float_listenSocket_16.c":192:17)
#loc290 = loc("CWE369_Divide_by_Zero__float_listenSocket_16.c":193:21)
#loc291 = loc("CWE369_Divide_by_Zero__float_listenSocket_16.c":196:43)
#loc292 = loc("CWE369_Divide_by_Zero__float_listenSocket_16.c":196:29)
#loc293 = loc("CWE369_Divide_by_Zero__float_listenSocket_16.c":196:17)
#loc294 = loc("CWE369_Divide_by_Zero__float_listenSocket_16.c":198:36)
#loc295 = loc("CWE369_Divide_by_Zero__float_listenSocket_16.c":198:31)
#loc296 = loc("CWE369_Divide_by_Zero__float_listenSocket_16.c":198:17)
#loc297 = loc("CWE369_Divide_by_Zero__float_listenSocket_16.c":198:47)
#loc298 = loc("CWE369_Divide_by_Zero__float_listenSocket_16.c":200:20)
#loc299 = loc("CWE369_Divide_by_Zero__float_listenSocket_16.c":201:13)
#loc300 = loc("CWE369_Divide_by_Zero__float_listenSocket_16.c":204:13)
#loc301 = loc("CWE369_Divide_by_Zero__float_listenSocket_16.c":201:17)
#loc302 = loc("CWE369_Divide_by_Zero__float_listenSocket_16.c":201:33)
#loc303 = loc("CWE369_Divide_by_Zero__float_listenSocket_16.c":202:13)
#loc304 = loc("CWE369_Divide_by_Zero__float_listenSocket_16.c":203:30)
#loc305 = loc("CWE369_Divide_by_Zero__float_listenSocket_16.c":203:17)
#loc306 = loc("CWE369_Divide_by_Zero__float_listenSocket_16.c":205:13)
#loc307 = loc("CWE369_Divide_by_Zero__float_listenSocket_16.c":208:13)
#loc308 = loc("CWE369_Divide_by_Zero__float_listenSocket_16.c":205:17)
#loc309 = loc("CWE369_Divide_by_Zero__float_listenSocket_16.c":205:33)
#loc310 = loc("CWE369_Divide_by_Zero__float_listenSocket_16.c":206:13)
#loc311 = loc("CWE369_Divide_by_Zero__float_listenSocket_16.c":207:30)
#loc312 = loc("CWE369_Divide_by_Zero__float_listenSocket_16.c":207:17)
#loc313 = loc("CWE369_Divide_by_Zero__float_listenSocket_16.c":216:9)
#loc314 = loc("CWE369_Divide_by_Zero__float_listenSocket_16.c":218:5)
#loc315 = loc("CWE369_Divide_by_Zero__float_listenSocket_16.c":231:5)
#loc316 = loc("CWE369_Divide_by_Zero__float_listenSocket_16.c":218:11)
#loc317 = loc("CWE369_Divide_by_Zero__float_listenSocket_16.c":221:9)
#loc318 = loc("CWE369_Divide_by_Zero__float_listenSocket_16.c":229:9)
#loc319 = loc("CWE369_Divide_by_Zero__float_listenSocket_16.c":221:17)
#loc320 = loc("CWE369_Divide_by_Zero__float_listenSocket_16.c":221:25)
#loc321 = loc("CWE369_Divide_by_Zero__float_listenSocket_16.c":221:12)
#loc322 = loc("CWE369_Divide_by_Zero__float_listenSocket_16.c":222:9)
#loc323 = loc("CWE369_Divide_by_Zero__float_listenSocket_16.c":225:9)
#loc324 = loc("CWE369_Divide_by_Zero__float_listenSocket_16.c":227:9)
#loc325 = loc("CWE369_Divide_by_Zero__float_listenSocket_16.c":223:13)
#loc326 = loc("CWE369_Divide_by_Zero__float_listenSocket_16.c":223:44)
#loc327 = loc("CWE369_Divide_by_Zero__float_listenSocket_16.c":223:32)
#loc328 = loc("CWE369_Divide_by_Zero__float_listenSocket_16.c":223:40)
#loc329 = loc("CWE369_Divide_by_Zero__float_listenSocket_16.c":224:26)
#loc330 = loc("CWE369_Divide_by_Zero__float_listenSocket_16.c":224:13)
#loc331 = loc("CWE369_Divide_by_Zero__float_listenSocket_16.c":228:13)
#loc332 = loc("CWE369_Divide_by_Zero__float_listenSocket_16.c":230:9)
#loc333 = loc("CWE369_Divide_by_Zero__float_listenSocket_16.c":235:1)
#loc334 = loc("CWE369_Divide_by_Zero__float_listenSocket_16.c":255:1)
#loc335 = loc("CWE369_Divide_by_Zero__float_listenSocket_16.c":237:5)
#loc336 = loc("CWE369_Divide_by_Zero__float_listenSocket_16.c":237:11)
#loc337 = loc("CWE369_Divide_by_Zero__float_listenSocket_16.c":239:12)
#loc338 = loc("CWE369_Divide_by_Zero__float_listenSocket_16.c":239:5)
#loc339 = loc("CWE369_Divide_by_Zero__float_listenSocket_16.c":240:5)
#loc340 = loc("CWE369_Divide_by_Zero__float_listenSocket_16.c":245:5)
#loc341 = loc("CWE369_Divide_by_Zero__float_listenSocket_16.c":240:11)
#loc342 = loc("CWE369_Divide_by_Zero__float_listenSocket_16.c":243:16)
#loc343 = loc("CWE369_Divide_by_Zero__float_listenSocket_16.c":243:9)
#loc344 = loc("CWE369_Divide_by_Zero__float_listenSocket_16.c":244:9)
#loc345 = loc("CWE369_Divide_by_Zero__float_listenSocket_16.c":246:5)
#loc346 = loc("CWE369_Divide_by_Zero__float_listenSocket_16.c":254:5)
#loc347 = loc("CWE369_Divide_by_Zero__float_listenSocket_16.c":246:11)
#loc348 = loc("CWE369_Divide_by_Zero__float_listenSocket_16.c":248:9)
#loc349 = loc("CWE369_Divide_by_Zero__float_listenSocket_16.c":252:9)
#loc350 = loc("CWE369_Divide_by_Zero__float_listenSocket_16.c":250:13)
#loc351 = loc("CWE369_Divide_by_Zero__float_listenSocket_16.c":250:44)
#loc352 = loc("CWE369_Divide_by_Zero__float_listenSocket_16.c":250:32)
#loc353 = loc("CWE369_Divide_by_Zero__float_listenSocket_16.c":250:40)
#loc354 = loc("CWE369_Divide_by_Zero__float_listenSocket_16.c":251:26)
#loc355 = loc("CWE369_Divide_by_Zero__float_listenSocket_16.c":251:13)
#loc356 = loc("CWE369_Divide_by_Zero__float_listenSocket_16.c":253:9)
#loc357 = loc(fused[#loc1, #loc2])
#loc358 = loc(fused[#loc3, #loc4])
#loc359 = loc(fused[#loc5, #loc6])
#loc360 = loc(fused[#loc7, #loc8])
#loc361 = loc(fused[#loc9, #loc10])
#loc362 = loc(fused[#loc11, #loc12])
#loc363 = loc(fused[#loc13, #loc14])
#loc364 = loc(fused[#loc15, #loc16])
#loc365 = loc(fused[#loc17, #loc18])
#loc366 = loc(fused[#loc19, #loc20])
#loc367 = loc(fused[#loc21, #loc22])
#loc368 = loc(fused[#loc24, #loc23])
#loc369 = loc(fused[#loc25, #loc26])
#loc370 = loc(fused[#loc28, #loc29])
#loc371 = loc(fused[#loc30, #loc31])
#loc372 = loc(fused[#loc32, #loc33])
#loc373 = loc(fused[#loc34, #loc35])
#loc374 = loc(fused[#loc36, #loc37])
#loc375 = loc(fused[#loc38, #loc39])
#loc376 = loc(fused[#loc40, #loc41])
#loc377 = loc(fused[#loc46, #loc47])
#loc378 = loc(fused[#loc48, #loc49])
#loc379 = loc(fused[#loc50, #loc51])
#loc380 = loc(fused[#loc52, #loc49])
#loc381 = loc(fused[#loc54, #loc55])
#loc382 = loc(fused[#loc57, #loc58])
#loc383 = loc(fused[#loc59, #loc60])
#loc384 = loc(fused[#loc63, #loc61])
#loc385 = loc(fused[#loc67, #loc64])
#loc386 = loc(fused[#loc71, #loc72])
#loc387 = loc(fused[#loc73, #loc74])
#loc388 = loc(fused[#loc76, #loc77])
#loc389 = loc(fused[#loc78, #loc79])
#loc390 = loc(fused[#loc80, #loc81])
#loc391 = loc(fused[#loc82, #loc74])
#loc392 = loc(fused[#loc84, #loc85])
#loc393 = loc(fused[#loc88, #loc89])
#loc394 = loc(fused[#loc90, #loc85])
#loc395 = loc(fused[#loc96, #loc97])
#loc396 = loc(fused[#loc98, #loc99])
#loc397 = loc(fused[#loc100, #loc101])
#loc398 = loc(fused[#loc102, #loc99])
#loc399 = loc(fused[#loc110, #loc111])
#loc400 = loc(fused[#loc112, #loc113])
#loc401 = loc(fused[#loc114, #loc115])
#loc402 = loc(fused[#loc117, #loc118])
#loc403 = loc(fused[#loc119, #loc113])
#loc404 = loc(fused[#loc123, #loc121])
#loc405 = loc(fused[#loc126, #loc127])
#loc406 = loc(fused[#loc129, #loc130])
#loc407 = loc(fused[#loc131, #loc132])
#loc408 = loc(fused[#loc133, #loc130])
#loc409 = loc(fused[#loc136, #loc137])
#loc410 = loc(fused[#loc138, #loc139])
#loc411 = loc(fused[#loc140, #loc137])
#loc412 = loc(fused[#loc144, #loc145])
#loc413 = loc(fused[#loc147, #loc148])
#loc414 = loc(fused[#loc149, #loc150])
#loc415 = loc(fused[#loc151, #loc152])
#loc416 = loc(fused[#loc156, #loc157])
#loc417 = loc(fused[#loc158, #loc159])
#loc418 = loc(fused[#loc160, #loc161])
#loc419 = loc(fused[#loc162, #loc163])
#loc420 = loc(fused[#loc164, #loc165])
#loc421 = loc(fused[#loc166, #loc167])
#loc422 = loc(fused[#loc172, #loc173])
#loc425 = loc(fused[#loc183, #loc184])
#loc426 = loc(fused[#loc187, #loc188])
#loc427 = loc(fused[#loc191, #loc190])
#loc428 = loc(fused[#loc193, #loc194])
#loc429 = loc(fused[#loc195, #loc196])
#loc430 = loc(fused[#loc198, #loc197])
#loc431 = loc(fused[#loc199, #loc200])
#loc432 = loc(fused[#loc202, #loc203])
#loc433 = loc(fused[#loc204, #loc205])
#loc434 = loc(fused[#loc206, #loc207])
#loc435 = loc(fused[#loc208, #loc209])
#loc436 = loc(fused[#loc210, #loc211])
#loc437 = loc(fused[#loc212, #loc213])
#loc438 = loc(fused[#loc214, #loc215])
#loc439 = loc(fused[#loc220, #loc221])
#loc440 = loc(fused[#loc222, #loc223])
#loc441 = loc(fused[#loc224, #loc225])
#loc442 = loc(fused[#loc226, #loc223])
#loc443 = loc(fused[#loc228, #loc229])
#loc444 = loc(fused[#loc231, #loc232])
#loc445 = loc(fused[#loc233, #loc234])
#loc446 = loc(fused[#loc236, #loc235])
#loc447 = loc(fused[#loc238, #loc237])
#loc448 = loc(fused[#loc241, #loc242])
#loc449 = loc(fused[#loc243, #loc244])
#loc450 = loc(fused[#loc246, #loc247])
#loc451 = loc(fused[#loc248, #loc249])
#loc452 = loc(fused[#loc250, #loc251])
#loc453 = loc(fused[#loc252, #loc244])
#loc454 = loc(fused[#loc254, #loc255])
#loc455 = loc(fused[#loc258, #loc259])
#loc456 = loc(fused[#loc260, #loc255])
#loc457 = loc(fused[#loc266, #loc267])
#loc458 = loc(fused[#loc268, #loc269])
#loc459 = loc(fused[#loc270, #loc271])
#loc460 = loc(fused[#loc272, #loc269])
#loc461 = loc(fused[#loc280, #loc281])
#loc462 = loc(fused[#loc282, #loc283])
#loc463 = loc(fused[#loc284, #loc285])
#loc464 = loc(fused[#loc287, #loc288])
#loc465 = loc(fused[#loc289, #loc283])
#loc466 = loc(fused[#loc293, #loc291])
#loc467 = loc(fused[#loc296, #loc297])
#loc468 = loc(fused[#loc299, #loc300])
#loc469 = loc(fused[#loc301, #loc302])
#loc470 = loc(fused[#loc303, #loc300])
#loc471 = loc(fused[#loc306, #loc307])
#loc472 = loc(fused[#loc308, #loc309])
#loc473 = loc(fused[#loc310, #loc307])
#loc474 = loc(fused[#loc314, #loc315])
#loc475 = loc(fused[#loc317, #loc318])
#loc476 = loc(fused[#loc321, #loc320])
#loc477 = loc(fused[#loc322, #loc323, #loc324, #loc318])
#loc478 = loc(fused[#loc325, #loc326])
#loc479 = loc(fused[#loc327, #loc328])
#loc480 = loc(fused[#loc333, #loc334])
#loc481 = loc(fused[#loc335, #loc336])
#loc482 = loc(fused[#loc338, #loc337])
#loc483 = loc(fused[#loc339, #loc340])
#loc484 = loc(fused[#loc343, #loc342])
#loc485 = loc(fused[#loc345, #loc346])
#loc486 = loc(fused[#loc348, #loc349])
#loc487 = loc(fused[#loc350, #loc351])
#loc488 = loc(fused[#loc352, #loc353])
