!s32i = !cir.int<s, 32>
!s64i = !cir.int<s, 64>
!s8i = !cir.int<s, 8>
!u32i = !cir.int<u, 32>
!void = !cir.void
#fn_attr = #cir<extra({nothrow = #cir.nothrow})>
#fn_attr1 = #cir<extra({inline = #cir.inline<no>, nothrow = #cir.nothrow, optnone = #cir.optnone})>
#loc16 = loc("CWE191_Integer_Underflow__int_rand_multiply_16.c":30:16)
#loc49 = loc("CWE191_Integer_Underflow__int_rand_multiply_16.c":119:10)
#loc50 = loc("CWE191_Integer_Underflow__int_rand_multiply_16.c":119:14)
#loc51 = loc("CWE191_Integer_Underflow__int_rand_multiply_16.c":119:20)
#loc52 = loc("CWE191_Integer_Underflow__int_rand_multiply_16.c":119:32)
#loc79 = loc("CWE191_Integer_Underflow__int_rand_multiply_16.c":58:16)
#loc150 = loc(fused[#loc49, #loc50])
#loc151 = loc(fused[#loc51, #loc52])
module @"/home/ladisgin/git_proj/juliet-c/testcases/CWE191_Integer_Underflow/s03/CWE191_Integer_Underflow__int_rand_multiply_16.c" attributes {cir.lang = #cir.lang<c>, cir.sob = #cir.signed_overflow_behavior<undefined>, cir.triple = "x86_64-unknown-linux-gnu", dlti.dl_spec = #dlti.dl_spec<f64 = dense<64> : vector<2xi64>, f16 = dense<16> : vector<2xi64>, !llvm.ptr<270> = dense<32> : vector<4xi64>, f128 = dense<128> : vector<2xi64>, i32 = dense<32> : vector<2xi64>, i8 = dense<8> : vector<2xi64>, i16 = dense<16> : vector<2xi64>, i1 = dense<8> : vector<2xi64>, !llvm.ptr = dense<64> : vector<4xi64>, i128 = dense<128> : vector<2xi64>, f80 = dense<128> : vector<2xi64>, i64 = dense<64> : vector<2xi64>, !llvm.ptr<271> = dense<32> : vector<4xi64>, !llvm.ptr<272> = dense<64> : vector<4xi64>, "dlti.endianness" = "little", "dlti.stack_alignment" = 128 : i64>} {
  cir.func private @rand() -> !s32i extra(#fn_attr) loc(#loc131)
  cir.func private @printIntLine(!s32i) loc(#loc132)
  cir.func no_proto @CWE191_Integer_Underflow__int_rand_multiply_16_bad() extra(#fn_attr1) {
    %0 = cir.alloca !s32i, !cir.ptr<!s32i>, ["result", init] {alignment = 4 : i64} loc(#loc134)
    %1 = cir.alloca !s32i, !cir.ptr<!s32i>, ["data"] {alignment = 4 : i64} loc(#loc135)
    %2 = cir.const #cir.int<0> : !s32i loc(#loc11)
    cir.store %2, %1 : !s32i, !cir.ptr<!s32i> loc(#loc136)
    cir.br ^bb1 loc(#loc137)
  ^bb1:  // pred: ^bb0
    cir.br ^bb2 loc(#loc137)
  ^bb2:  // pred: ^bb1
    %3 = cir.const #cir.int<1> : !s32i loc(#loc15)
    %4 = cir.cast(int_to_bool, %3 : !s32i), !cir.bool loc(#loc15)
    cir.brcond %4 ^bb3, ^bb8 loc(#loc15)
  ^bb3:  // pred: ^bb2
    %5 = cir.call @rand() : () -> !s32i extra(#fn_attr) loc(#loc16)
    %6 = cir.const #cir.int<1> : !s32i loc(#loc16)
    %7 = cir.binop(and, %5, %6) : !s32i loc(#loc16)
    %8 = cir.cast(int_to_bool, %7 : !s32i), !cir.bool loc(#loc16)
    cir.brcond %8 ^bb4, ^bb5 loc(#loc16)
  ^bb4:  // pred: ^bb3
    %9 = cir.call @rand() : () -> !s32i extra(#fn_attr) loc(#loc16)
    %10 = cir.cast(integral, %9 : !s32i), !u32i loc(#loc16)
    %11 = cir.const #cir.int<30> : !s32i loc(#loc16)
    %12 = cir.shift(left, %10 : !u32i, %11 : !s32i) -> !u32i loc(#loc16)
    %13 = cir.call @rand() : () -> !s32i extra(#fn_attr) loc(#loc16)
    %14 = cir.cast(integral, %13 : !s32i), !u32i loc(#loc16)
    %15 = cir.const #cir.int<15> : !s32i loc(#loc16)
    %16 = cir.shift(left, %14 : !u32i, %15 : !s32i) -> !u32i loc(#loc16)
    %17 = cir.binop(xor, %12, %16) : !u32i loc(#loc16)
    %18 = cir.call @rand() : () -> !s32i extra(#fn_attr) loc(#loc16)
    %19 = cir.cast(integral, %18 : !s32i), !u32i loc(#loc16)
    %20 = cir.binop(xor, %17, %19) : !u32i loc(#loc16)
    cir.br ^bb6(%20 : !u32i) loc(#loc16)
  ^bb5:  // pred: ^bb3
    %21 = cir.call @rand() : () -> !s32i extra(#fn_attr) loc(#loc16)
    %22 = cir.cast(integral, %21 : !s32i), !u32i loc(#loc16)
    %23 = cir.const #cir.int<30> : !s32i loc(#loc16)
    %24 = cir.shift(left, %22 : !u32i, %23 : !s32i) -> !u32i loc(#loc16)
    %25 = cir.call @rand() : () -> !s32i extra(#fn_attr) loc(#loc16)
    %26 = cir.cast(integral, %25 : !s32i), !u32i loc(#loc16)
    %27 = cir.const #cir.int<15> : !s32i loc(#loc16)
    %28 = cir.shift(left, %26 : !u32i, %27 : !s32i) -> !u32i loc(#loc16)
    %29 = cir.binop(xor, %24, %28) : !u32i loc(#loc16)
    %30 = cir.call @rand() : () -> !s32i extra(#fn_attr) loc(#loc16)
    %31 = cir.cast(integral, %30 : !s32i), !u32i loc(#loc16)
    %32 = cir.binop(xor, %29, %31) : !u32i loc(#loc16)
    %33 = cir.unary(minus, %32) : !u32i, !u32i loc(#loc16)
    %34 = cir.const #cir.int<1> : !s32i loc(#loc16)
    %35 = cir.cast(integral, %34 : !s32i), !u32i loc(#loc16)
    %36 = cir.binop(sub, %33, %35) : !u32i loc(#loc16)
    cir.br ^bb6(%36 : !u32i) loc(#loc16)
  ^bb6(%37: !u32i loc("CWE191_Integer_Underflow__int_rand_multiply_16.c":30:16)):  // 2 preds: ^bb4, ^bb5
    cir.br ^bb7 loc(#loc16)
  ^bb7:  // pred: ^bb6
    %38 = cir.cast(integral, %37 : !u32i), !s32i loc(#loc16)
    cir.store %38, %1 : !s32i, !cir.ptr<!s32i> loc(#loc138)
    cir.br ^bb8 loc(#loc18)
  ^bb8:  // 2 preds: ^bb2, ^bb7
    cir.br ^bb9 loc(#loc14)
  ^bb9:  // pred: ^bb8
    cir.br ^bb10 loc(#loc139)
  ^bb10:  // pred: ^bb9
    cir.br ^bb11 loc(#loc139)
  ^bb11:  // pred: ^bb10
    %39 = cir.const #cir.int<1> : !s32i loc(#loc21)
    %40 = cir.cast(int_to_bool, %39 : !s32i), !cir.bool loc(#loc21)
    cir.brcond %40 ^bb12, ^bb17 loc(#loc21)
  ^bb12:  // pred: ^bb11
    cir.br ^bb13 loc(#loc140)
  ^bb13:  // pred: ^bb12
    %41 = cir.load %1 : !cir.ptr<!s32i>, !s32i loc(#loc24)
    %42 = cir.const #cir.int<0> : !s32i loc(#loc25)
    %43 = cir.cmp(lt, %41, %42) : !s32i, !cir.bool loc(#loc141)
    cir.brcond %43 ^bb14, ^bb15 loc(#loc142)
  ^bb14:  // pred: ^bb13
    %44 = cir.load %1 : !cir.ptr<!s32i>, !s32i loc(#loc27)
    %45 = cir.const #cir.int<2> : !s32i loc(#loc8)
    %46 = cir.binop(mul, %44, %45) nsw : !s32i loc(#loc27)
    cir.store %46, %0 : !s32i, !cir.ptr<!s32i> loc(#loc134)
    %47 = cir.load %0 : !cir.ptr<!s32i>, !s32i loc(#loc28)
    cir.call @printIntLine(%47) : (!s32i) -> () loc(#loc29)
    cir.br ^bb15 loc(#loc23)
  ^bb15:  // 2 preds: ^bb13, ^bb14
    cir.br ^bb16 loc(#loc23)
  ^bb16:  // pred: ^bb15
    cir.br ^bb17 loc(#loc30)
  ^bb17:  // 2 preds: ^bb11, ^bb16
    cir.br ^bb18 loc(#loc20)
  ^bb18:  // pred: ^bb17
    cir.return loc(#loc6)
  } loc(#loc133)
  cir.func no_proto @CWE191_Integer_Underflow__int_rand_multiply_16_good() extra(#fn_attr1) {
    %0 = cir.get_global @goodB2G : !cir.ptr<!cir.func<!void ()>> loc(#loc144)
    cir.call %0() : (!cir.ptr<!cir.func<!void ()>>) -> () loc(#loc33)
    %1 = cir.get_global @goodG2B : !cir.ptr<!cir.func<!void ()>> loc(#loc145)
    cir.call %1() : (!cir.ptr<!cir.func<!void ()>>) -> () loc(#loc35)
    cir.return loc(#loc32)
  } loc(#loc143)
  cir.func private @srand(!u32i) extra(#fn_attr) loc(#loc146)
  cir.func private @time(!cir.ptr<!s64i>) -> !s64i extra(#fn_attr) loc(#loc147)
  cir.func private @printLine(!cir.ptr<!s8i>) loc(#loc148)
  cir.global "private" constant cir_private dsolocal @".str" = #cir.const_array<"Calling good()...\00" : !cir.array<!s8i x 18>> : !cir.array<!s8i x 18> {alignment = 1 : i64} loc(#loc43)
  cir.global "private" constant cir_private dsolocal @".str.1" = #cir.const_array<"Finished good()\00" : !cir.array<!s8i x 16>> : !cir.array<!s8i x 16> {alignment = 1 : i64} loc(#loc44)
  cir.global "private" constant cir_private dsolocal @".str.2" = #cir.const_array<"Calling bad()...\00" : !cir.array<!s8i x 17>> : !cir.array<!s8i x 17> {alignment = 1 : i64} loc(#loc45)
  cir.global "private" constant cir_private dsolocal @".str.3" = #cir.const_array<"Finished bad()\00" : !cir.array<!s8i x 15>> : !cir.array<!s8i x 15> {alignment = 1 : i64} loc(#loc46)
  cir.func @main(%arg0: !s32i loc(fused[#loc49, #loc50]), %arg1: !cir.ptr<!cir.ptr<!s8i>> loc(fused[#loc51, #loc52])) -> !s32i extra(#fn_attr1) {
    %0 = cir.alloca !s32i, !cir.ptr<!s32i>, ["argc", init] {alignment = 4 : i64} loc(#loc150)
    %1 = cir.alloca !cir.ptr<!cir.ptr<!s8i>>, !cir.ptr<!cir.ptr<!cir.ptr<!s8i>>>, ["argv", init] {alignment = 8 : i64} loc(#loc151)
    %2 = cir.alloca !s32i, !cir.ptr<!s32i>, ["__retval"] {alignment = 4 : i64} loc(#loc48)
    cir.store %arg0, %0 : !s32i, !cir.ptr<!s32i> loc(#loc53)
    cir.store %arg1, %1 : !cir.ptr<!cir.ptr<!s8i>>, !cir.ptr<!cir.ptr<!cir.ptr<!s8i>>> loc(#loc53)
    %3 = cir.const #cir.ptr<null> : !cir.ptr<!s64i> loc(#loc54)
    %4 = cir.call @time(%3) : (!cir.ptr<!s64i>) -> !s64i extra(#fn_attr) loc(#loc55)
    %5 = cir.cast(integral, %4 : !s64i), !u32i loc(#loc55)
    cir.call @srand(%5) : (!u32i) -> () extra(#fn_attr) loc(#loc56)
    %6 = cir.get_global @".str" : !cir.ptr<!cir.array<!s8i x 18>> loc(#loc43)
    %7 = cir.cast(array_to_ptrdecay, %6 : !cir.ptr<!cir.array<!s8i x 18>>), !cir.ptr<!s8i> loc(#loc43)
    cir.call @printLine(%7) : (!cir.ptr<!s8i>) -> () loc(#loc57)
    %8 = cir.get_global @CWE191_Integer_Underflow__int_rand_multiply_16_good : !cir.ptr<!cir.func<!void ()>> loc(#loc152)
    cir.call @CWE191_Integer_Underflow__int_rand_multiply_16_good() : () -> () loc(#loc58)
    %9 = cir.get_global @".str.1" : !cir.ptr<!cir.array<!s8i x 16>> loc(#loc44)
    %10 = cir.cast(array_to_ptrdecay, %9 : !cir.ptr<!cir.array<!s8i x 16>>), !cir.ptr<!s8i> loc(#loc44)
    cir.call @printLine(%10) : (!cir.ptr<!s8i>) -> () loc(#loc60)
    %11 = cir.get_global @".str.2" : !cir.ptr<!cir.array<!s8i x 17>> loc(#loc45)
    %12 = cir.cast(array_to_ptrdecay, %11 : !cir.ptr<!cir.array<!s8i x 17>>), !cir.ptr<!s8i> loc(#loc45)
    cir.call @printLine(%12) : (!cir.ptr<!s8i>) -> () loc(#loc61)
    %13 = cir.get_global @CWE191_Integer_Underflow__int_rand_multiply_16_bad : !cir.ptr<!cir.func<!void ()>> loc(#loc153)
    cir.call @CWE191_Integer_Underflow__int_rand_multiply_16_bad() : () -> () loc(#loc62)
    %14 = cir.get_global @".str.3" : !cir.ptr<!cir.array<!s8i x 15>> loc(#loc46)
    %15 = cir.cast(array_to_ptrdecay, %14 : !cir.ptr<!cir.array<!s8i x 15>>), !cir.ptr<!s8i> loc(#loc46)
    cir.call @printLine(%15) : (!cir.ptr<!s8i>) -> () loc(#loc64)
    %16 = cir.const #cir.int<0> : !s32i loc(#loc65)
    cir.store %16, %2 : !s32i, !cir.ptr<!s32i> loc(#loc154)
    %17 = cir.load %2 : !cir.ptr<!s32i>, !s32i loc(#loc154)
    cir.return %17 : !s32i loc(#loc154)
  } loc(#loc149)
  cir.global "private" constant cir_private dsolocal @".str.4" = #cir.const_array<"data value is too small to perform multiplication.\00" : !cir.array<!s8i x 51>> : !cir.array<!s8i x 51> {alignment = 1 : i64} loc(#loc67)
  cir.func no_proto internal private @goodB2G() extra(#fn_attr1) {
    %0 = cir.alloca !s32i, !cir.ptr<!s32i>, ["result", init] {alignment = 4 : i64} loc(#loc156)
    %1 = cir.alloca !s32i, !cir.ptr<!s32i>, ["data"] {alignment = 4 : i64} loc(#loc157)
    %2 = cir.const #cir.int<0> : !s32i loc(#loc74)
    cir.store %2, %1 : !s32i, !cir.ptr<!s32i> loc(#loc158)
    cir.br ^bb1 loc(#loc159)
  ^bb1:  // pred: ^bb0
    cir.br ^bb2 loc(#loc159)
  ^bb2:  // pred: ^bb1
    %3 = cir.const #cir.int<1> : !s32i loc(#loc78)
    %4 = cir.cast(int_to_bool, %3 : !s32i), !cir.bool loc(#loc78)
    cir.brcond %4 ^bb3, ^bb8 loc(#loc78)
  ^bb3:  // pred: ^bb2
    %5 = cir.call @rand() : () -> !s32i extra(#fn_attr) loc(#loc79)
    %6 = cir.const #cir.int<1> : !s32i loc(#loc79)
    %7 = cir.binop(and, %5, %6) : !s32i loc(#loc79)
    %8 = cir.cast(int_to_bool, %7 : !s32i), !cir.bool loc(#loc79)
    cir.brcond %8 ^bb4, ^bb5 loc(#loc79)
  ^bb4:  // pred: ^bb3
    %9 = cir.call @rand() : () -> !s32i extra(#fn_attr) loc(#loc79)
    %10 = cir.cast(integral, %9 : !s32i), !u32i loc(#loc79)
    %11 = cir.const #cir.int<30> : !s32i loc(#loc79)
    %12 = cir.shift(left, %10 : !u32i, %11 : !s32i) -> !u32i loc(#loc79)
    %13 = cir.call @rand() : () -> !s32i extra(#fn_attr) loc(#loc79)
    %14 = cir.cast(integral, %13 : !s32i), !u32i loc(#loc79)
    %15 = cir.const #cir.int<15> : !s32i loc(#loc79)
    %16 = cir.shift(left, %14 : !u32i, %15 : !s32i) -> !u32i loc(#loc79)
    %17 = cir.binop(xor, %12, %16) : !u32i loc(#loc79)
    %18 = cir.call @rand() : () -> !s32i extra(#fn_attr) loc(#loc79)
    %19 = cir.cast(integral, %18 : !s32i), !u32i loc(#loc79)
    %20 = cir.binop(xor, %17, %19) : !u32i loc(#loc79)
    cir.br ^bb6(%20 : !u32i) loc(#loc79)
  ^bb5:  // pred: ^bb3
    %21 = cir.call @rand() : () -> !s32i extra(#fn_attr) loc(#loc79)
    %22 = cir.cast(integral, %21 : !s32i), !u32i loc(#loc79)
    %23 = cir.const #cir.int<30> : !s32i loc(#loc79)
    %24 = cir.shift(left, %22 : !u32i, %23 : !s32i) -> !u32i loc(#loc79)
    %25 = cir.call @rand() : () -> !s32i extra(#fn_attr) loc(#loc79)
    %26 = cir.cast(integral, %25 : !s32i), !u32i loc(#loc79)
    %27 = cir.const #cir.int<15> : !s32i loc(#loc79)
    %28 = cir.shift(left, %26 : !u32i, %27 : !s32i) -> !u32i loc(#loc79)
    %29 = cir.binop(xor, %24, %28) : !u32i loc(#loc79)
    %30 = cir.call @rand() : () -> !s32i extra(#fn_attr) loc(#loc79)
    %31 = cir.cast(integral, %30 : !s32i), !u32i loc(#loc79)
    %32 = cir.binop(xor, %29, %31) : !u32i loc(#loc79)
    %33 = cir.unary(minus, %32) : !u32i, !u32i loc(#loc79)
    %34 = cir.const #cir.int<1> : !s32i loc(#loc79)
    %35 = cir.cast(integral, %34 : !s32i), !u32i loc(#loc79)
    %36 = cir.binop(sub, %33, %35) : !u32i loc(#loc79)
    cir.br ^bb6(%36 : !u32i) loc(#loc79)
  ^bb6(%37: !u32i loc("CWE191_Integer_Underflow__int_rand_multiply_16.c":58:16)):  // 2 preds: ^bb4, ^bb5
    cir.br ^bb7 loc(#loc79)
  ^bb7:  // pred: ^bb6
    %38 = cir.cast(integral, %37 : !u32i), !s32i loc(#loc79)
    cir.store %38, %1 : !s32i, !cir.ptr<!s32i> loc(#loc160)
    cir.br ^bb8 loc(#loc81)
  ^bb8:  // 2 preds: ^bb2, ^bb7
    cir.br ^bb9 loc(#loc77)
  ^bb9:  // pred: ^bb8
    cir.br ^bb10 loc(#loc161)
  ^bb10:  // pred: ^bb9
    cir.br ^bb11 loc(#loc161)
  ^bb11:  // pred: ^bb10
    %39 = cir.const #cir.int<1> : !s32i loc(#loc84)
    %40 = cir.cast(int_to_bool, %39 : !s32i), !cir.bool loc(#loc84)
    cir.brcond %40 ^bb12, ^bb22 loc(#loc84)
  ^bb12:  // pred: ^bb11
    cir.br ^bb13 loc(#loc162)
  ^bb13:  // pred: ^bb12
    %41 = cir.load %1 : !cir.ptr<!s32i>, !s32i loc(#loc87)
    %42 = cir.const #cir.int<0> : !s32i loc(#loc88)
    %43 = cir.cmp(lt, %41, %42) : !s32i, !cir.bool loc(#loc163)
    cir.brcond %43 ^bb14, ^bb20 loc(#loc164)
  ^bb14:  // pred: ^bb13
    cir.br ^bb15 loc(#loc165)
  ^bb15:  // pred: ^bb14
    %44 = cir.load %1 : !cir.ptr<!s32i>, !s32i loc(#loc92)
    %45 = cir.const #cir.int<2147483647> : !s32i loc(#loc93)
    %46 = cir.unary(minus, %45) : !s32i, !s32i loc(#loc93)
    %47 = cir.const #cir.int<1> : !s32i loc(#loc93)
    %48 = cir.binop(sub, %46, %47) nsw : !s32i loc(#loc93)
    %49 = cir.const #cir.int<2> : !s32i loc(#loc94)
    %50 = cir.binop(div, %48, %49) : !s32i loc(#loc166)
    %51 = cir.cmp(gt, %44, %50) : !s32i, !cir.bool loc(#loc167)
    cir.brcond %51 ^bb16, ^bb17 loc(#loc168)
  ^bb16:  // pred: ^bb15
    %52 = cir.load %1 : !cir.ptr<!s32i>, !s32i loc(#loc99)
    %53 = cir.const #cir.int<2> : !s32i loc(#loc71)
    %54 = cir.binop(mul, %52, %53) nsw : !s32i loc(#loc99)
    cir.store %54, %0 : !s32i, !cir.ptr<!s32i> loc(#loc156)
    %55 = cir.load %0 : !cir.ptr<!s32i>, !s32i loc(#loc100)
    cir.call @printIntLine(%55) : (!s32i) -> () loc(#loc101)
    cir.br ^bb18 loc(#loc97)
  ^bb17:  // pred: ^bb15
    %56 = cir.get_global @".str.4" : !cir.ptr<!cir.array<!s8i x 51>> loc(#loc67)
    %57 = cir.cast(array_to_ptrdecay, %56 : !cir.ptr<!cir.array<!s8i x 51>>), !cir.ptr<!s8i> loc(#loc67)
    cir.call @printLine(%57) : (!cir.ptr<!s8i>) -> () loc(#loc102)
    cir.br ^bb18 loc(#loc91)
  ^bb18:  // 2 preds: ^bb16, ^bb17
    cir.br ^bb19 loc(#loc91)
  ^bb19:  // pred: ^bb18
    cir.br ^bb20 loc(#loc86)
  ^bb20:  // 2 preds: ^bb13, ^bb19
    cir.br ^bb21 loc(#loc86)
  ^bb21:  // pred: ^bb20
    cir.br ^bb22 loc(#loc103)
  ^bb22:  // 2 preds: ^bb11, ^bb21
    cir.br ^bb23 loc(#loc83)
  ^bb23:  // pred: ^bb22
    cir.return loc(#loc69)
  } loc(#loc155)
  cir.func no_proto internal private @goodG2B() extra(#fn_attr1) {
    %0 = cir.alloca !s32i, !cir.ptr<!s32i>, ["result", init] {alignment = 4 : i64} loc(#loc170)
    %1 = cir.alloca !s32i, !cir.ptr<!s32i>, ["data"] {alignment = 4 : i64} loc(#loc171)
    %2 = cir.const #cir.int<0> : !s32i loc(#loc110)
    cir.store %2, %1 : !s32i, !cir.ptr<!s32i> loc(#loc172)
    cir.br ^bb1 loc(#loc173)
  ^bb1:  // pred: ^bb0
    cir.br ^bb2 loc(#loc173)
  ^bb2:  // pred: ^bb1
    %3 = cir.const #cir.int<1> : !s32i loc(#loc114)
    %4 = cir.cast(int_to_bool, %3 : !s32i), !cir.bool loc(#loc114)
    cir.brcond %4 ^bb3, ^bb4 loc(#loc114)
  ^bb3:  // pred: ^bb2
    %5 = cir.const #cir.int<2> : !s32i loc(#loc115)
    %6 = cir.unary(minus, %5) : !s32i, !s32i loc(#loc116)
    cir.store %6, %1 : !s32i, !cir.ptr<!s32i> loc(#loc174)
    cir.br ^bb4 loc(#loc118)
  ^bb4:  // 2 preds: ^bb2, ^bb3
    cir.br ^bb5 loc(#loc113)
  ^bb5:  // pred: ^bb4
    cir.br ^bb6 loc(#loc175)
  ^bb6:  // pred: ^bb5
    cir.br ^bb7 loc(#loc175)
  ^bb7:  // pred: ^bb6
    %7 = cir.const #cir.int<1> : !s32i loc(#loc121)
    %8 = cir.cast(int_to_bool, %7 : !s32i), !cir.bool loc(#loc121)
    cir.brcond %8 ^bb8, ^bb13 loc(#loc121)
  ^bb8:  // pred: ^bb7
    cir.br ^bb9 loc(#loc176)
  ^bb9:  // pred: ^bb8
    %9 = cir.load %1 : !cir.ptr<!s32i>, !s32i loc(#loc124)
    %10 = cir.const #cir.int<0> : !s32i loc(#loc125)
    %11 = cir.cmp(lt, %9, %10) : !s32i, !cir.bool loc(#loc177)
    cir.brcond %11 ^bb10, ^bb11 loc(#loc178)
  ^bb10:  // pred: ^bb9
    %12 = cir.load %1 : !cir.ptr<!s32i>, !s32i loc(#loc127)
    %13 = cir.const #cir.int<2> : !s32i loc(#loc107)
    %14 = cir.binop(mul, %12, %13) nsw : !s32i loc(#loc127)
    cir.store %14, %0 : !s32i, !cir.ptr<!s32i> loc(#loc170)
    %15 = cir.load %0 : !cir.ptr<!s32i>, !s32i loc(#loc128)
    cir.call @printIntLine(%15) : (!s32i) -> () loc(#loc129)
    cir.br ^bb11 loc(#loc123)
  ^bb11:  // 2 preds: ^bb9, ^bb10
    cir.br ^bb12 loc(#loc123)
  ^bb12:  // pred: ^bb11
    cir.br ^bb13 loc(#loc130)
  ^bb13:  // 2 preds: ^bb7, ^bb12
    cir.br ^bb14 loc(#loc120)
  ^bb14:  // pred: ^bb13
    cir.return loc(#loc105)
  } loc(#loc169)
} loc(#loc)
#loc = loc("/home/ladisgin/git_proj/juliet-c/testcases/CWE191_Integer_Underflow/s03/CWE191_Integer_Underflow__int_rand_multiply_16.c":0:0)
#loc1 = loc("/usr/include/stdlib.h":573:1)
#loc2 = loc("/usr/include/stdlib.h":573:24)
#loc3 = loc("../../../testcasesupport/std_testcase_io.h":18:1)
#loc4 = loc("../../../testcasesupport/std_testcase_io.h":18:33)
#loc5 = loc("CWE191_Integer_Underflow__int_rand_multiply_16.c":22:1)
#loc6 = loc("CWE191_Integer_Underflow__int_rand_multiply_16.c":43:1)
#loc7 = loc("CWE191_Integer_Underflow__int_rand_multiply_16.c":38:13)
#loc8 = loc("CWE191_Integer_Underflow__int_rand_multiply_16.c":38:33)
#loc9 = loc("CWE191_Integer_Underflow__int_rand_multiply_16.c":24:5)
#loc10 = loc("CWE191_Integer_Underflow__int_rand_multiply_16.c":24:9)
#loc11 = loc("CWE191_Integer_Underflow__int_rand_multiply_16.c":26:12)
#loc12 = loc("CWE191_Integer_Underflow__int_rand_multiply_16.c":26:5)
#loc13 = loc("CWE191_Integer_Underflow__int_rand_multiply_16.c":27:5)
#loc14 = loc("CWE191_Integer_Underflow__int_rand_multiply_16.c":32:5)
#loc15 = loc("CWE191_Integer_Underflow__int_rand_multiply_16.c":27:11)
#loc17 = loc("CWE191_Integer_Underflow__int_rand_multiply_16.c":30:9)
#loc18 = loc("CWE191_Integer_Underflow__int_rand_multiply_16.c":31:9)
#loc19 = loc("CWE191_Integer_Underflow__int_rand_multiply_16.c":33:5)
#loc20 = loc("CWE191_Integer_Underflow__int_rand_multiply_16.c":42:5)
#loc21 = loc("CWE191_Integer_Underflow__int_rand_multiply_16.c":33:11)
#loc22 = loc("CWE191_Integer_Underflow__int_rand_multiply_16.c":35:9)
#loc23 = loc("CWE191_Integer_Underflow__int_rand_multiply_16.c":40:9)
#loc24 = loc("CWE191_Integer_Underflow__int_rand_multiply_16.c":35:12)
#loc25 = loc("CWE191_Integer_Underflow__int_rand_multiply_16.c":35:19)
#loc26 = loc("CWE191_Integer_Underflow__int_rand_multiply_16.c":36:9)
#loc27 = loc("CWE191_Integer_Underflow__int_rand_multiply_16.c":38:26)
#loc28 = loc("CWE191_Integer_Underflow__int_rand_multiply_16.c":39:26)
#loc29 = loc("CWE191_Integer_Underflow__int_rand_multiply_16.c":39:13)
#loc30 = loc("CWE191_Integer_Underflow__int_rand_multiply_16.c":41:9)
#loc31 = loc("CWE191_Integer_Underflow__int_rand_multiply_16.c":104:1)
#loc32 = loc("CWE191_Integer_Underflow__int_rand_multiply_16.c":108:1)
#loc33 = loc("CWE191_Integer_Underflow__int_rand_multiply_16.c":106:5)
#loc34 = loc("CWE191_Integer_Underflow__int_rand_multiply_16.c":106:13)
#loc35 = loc("CWE191_Integer_Underflow__int_rand_multiply_16.c":107:5)
#loc36 = loc("CWE191_Integer_Underflow__int_rand_multiply_16.c":107:13)
#loc37 = loc("/usr/include/stdlib.h":575:1)
#loc38 = loc("/usr/include/stdlib.h":575:41)
#loc39 = loc("/usr/include/time.h":76:1)
#loc40 = loc("/usr/include/time.h":76:38)
#loc41 = loc("../../../testcasesupport/std_testcase_io.h":14:1)
#loc42 = loc("../../../testcasesupport/std_testcase_io.h":14:33)
#loc43 = loc("CWE191_Integer_Underflow__int_rand_multiply_16.c":124:15)
#loc44 = loc("CWE191_Integer_Underflow__int_rand_multiply_16.c":126:15)
#loc45 = loc("CWE191_Integer_Underflow__int_rand_multiply_16.c":129:15)
#loc46 = loc("CWE191_Integer_Underflow__int_rand_multiply_16.c":131:15)
#loc47 = loc("CWE191_Integer_Underflow__int_rand_multiply_16.c":119:1)
#loc48 = loc("CWE191_Integer_Underflow__int_rand_multiply_16.c":134:1)
#loc53 = loc("CWE191_Integer_Underflow__int_rand_multiply_16.c":120:1)
#loc54 = loc("CWE191_Integer_Underflow__int_rand_multiply_16.c":122:27)
#loc55 = loc("CWE191_Integer_Underflow__int_rand_multiply_16.c":122:22)
#loc56 = loc("CWE191_Integer_Underflow__int_rand_multiply_16.c":122:5)
#loc57 = loc("CWE191_Integer_Underflow__int_rand_multiply_16.c":124:5)
#loc58 = loc("CWE191_Integer_Underflow__int_rand_multiply_16.c":125:5)
#loc59 = loc("CWE191_Integer_Underflow__int_rand_multiply_16.c":125:57)
#loc60 = loc("CWE191_Integer_Underflow__int_rand_multiply_16.c":126:5)
#loc61 = loc("CWE191_Integer_Underflow__int_rand_multiply_16.c":129:5)
#loc62 = loc("CWE191_Integer_Underflow__int_rand_multiply_16.c":130:5)
#loc63 = loc("CWE191_Integer_Underflow__int_rand_multiply_16.c":130:56)
#loc64 = loc("CWE191_Integer_Underflow__int_rand_multiply_16.c":131:5)
#loc65 = loc("CWE191_Integer_Underflow__int_rand_multiply_16.c":133:12)
#loc66 = loc("CWE191_Integer_Underflow__int_rand_multiply_16.c":133:5)
#loc67 = loc("CWE191_Integer_Underflow__int_rand_multiply_16.c":73:27)
#loc68 = loc("CWE191_Integer_Underflow__int_rand_multiply_16.c":50:1)
#loc69 = loc("CWE191_Integer_Underflow__int_rand_multiply_16.c":78:1)
#loc70 = loc("CWE191_Integer_Underflow__int_rand_multiply_16.c":68:17)
#loc71 = loc("CWE191_Integer_Underflow__int_rand_multiply_16.c":68:37)
#loc72 = loc("CWE191_Integer_Underflow__int_rand_multiply_16.c":52:5)
#loc73 = loc("CWE191_Integer_Underflow__int_rand_multiply_16.c":52:9)
#loc74 = loc("CWE191_Integer_Underflow__int_rand_multiply_16.c":54:12)
#loc75 = loc("CWE191_Integer_Underflow__int_rand_multiply_16.c":54:5)
#loc76 = loc("CWE191_Integer_Underflow__int_rand_multiply_16.c":55:5)
#loc77 = loc("CWE191_Integer_Underflow__int_rand_multiply_16.c":60:5)
#loc78 = loc("CWE191_Integer_Underflow__int_rand_multiply_16.c":55:11)
#loc80 = loc("CWE191_Integer_Underflow__int_rand_multiply_16.c":58:9)
#loc81 = loc("CWE191_Integer_Underflow__int_rand_multiply_16.c":59:9)
#loc82 = loc("CWE191_Integer_Underflow__int_rand_multiply_16.c":61:5)
#loc83 = loc("CWE191_Integer_Underflow__int_rand_multiply_16.c":77:5)
#loc84 = loc("CWE191_Integer_Underflow__int_rand_multiply_16.c":61:11)
#loc85 = loc("CWE191_Integer_Underflow__int_rand_multiply_16.c":63:9)
#loc86 = loc("CWE191_Integer_Underflow__int_rand_multiply_16.c":75:9)
#loc87 = loc("CWE191_Integer_Underflow__int_rand_multiply_16.c":63:12)
#loc88 = loc("CWE191_Integer_Underflow__int_rand_multiply_16.c":63:19)
#loc89 = loc("CWE191_Integer_Underflow__int_rand_multiply_16.c":64:9)
#loc90 = loc("CWE191_Integer_Underflow__int_rand_multiply_16.c":66:13)
#loc91 = loc("CWE191_Integer_Underflow__int_rand_multiply_16.c":74:13)
#loc92 = loc("CWE191_Integer_Underflow__int_rand_multiply_16.c":66:17)
#loc93 = loc("CWE191_Integer_Underflow__int_rand_multiply_16.c":66:25)
#loc94 = loc("CWE191_Integer_Underflow__int_rand_multiply_16.c":66:33)
#loc95 = loc("CWE191_Integer_Underflow__int_rand_multiply_16.c":66:34)
#loc96 = loc("CWE191_Integer_Underflow__int_rand_multiply_16.c":67:13)
#loc97 = loc("CWE191_Integer_Underflow__int_rand_multiply_16.c":70:13)
#loc98 = loc("CWE191_Integer_Underflow__int_rand_multiply_16.c":72:13)
#loc99 = loc("CWE191_Integer_Underflow__int_rand_multiply_16.c":68:30)
#loc100 = loc("CWE191_Integer_Underflow__int_rand_multiply_16.c":69:30)
#loc101 = loc("CWE191_Integer_Underflow__int_rand_multiply_16.c":69:17)
#loc102 = loc("CWE191_Integer_Underflow__int_rand_multiply_16.c":73:17)
#loc103 = loc("CWE191_Integer_Underflow__int_rand_multiply_16.c":76:9)
#loc104 = loc("CWE191_Integer_Underflow__int_rand_multiply_16.c":81:1)
#loc105 = loc("CWE191_Integer_Underflow__int_rand_multiply_16.c":102:1)
#loc106 = loc("CWE191_Integer_Underflow__int_rand_multiply_16.c":97:13)
#loc107 = loc("CWE191_Integer_Underflow__int_rand_multiply_16.c":97:33)
#loc108 = loc("CWE191_Integer_Underflow__int_rand_multiply_16.c":83:5)
#loc109 = loc("CWE191_Integer_Underflow__int_rand_multiply_16.c":83:9)
#loc110 = loc("CWE191_Integer_Underflow__int_rand_multiply_16.c":85:12)
#loc111 = loc("CWE191_Integer_Underflow__int_rand_multiply_16.c":85:5)
#loc112 = loc("CWE191_Integer_Underflow__int_rand_multiply_16.c":86:5)
#loc113 = loc("CWE191_Integer_Underflow__int_rand_multiply_16.c":91:5)
#loc114 = loc("CWE191_Integer_Underflow__int_rand_multiply_16.c":86:11)
#loc115 = loc("CWE191_Integer_Underflow__int_rand_multiply_16.c":89:17)
#loc116 = loc("CWE191_Integer_Underflow__int_rand_multiply_16.c":89:16)
#loc117 = loc("CWE191_Integer_Underflow__int_rand_multiply_16.c":89:9)
#loc118 = loc("CWE191_Integer_Underflow__int_rand_multiply_16.c":90:9)
#loc119 = loc("CWE191_Integer_Underflow__int_rand_multiply_16.c":92:5)
#loc120 = loc("CWE191_Integer_Underflow__int_rand_multiply_16.c":101:5)
#loc121 = loc("CWE191_Integer_Underflow__int_rand_multiply_16.c":92:11)
#loc122 = loc("CWE191_Integer_Underflow__int_rand_multiply_16.c":94:9)
#loc123 = loc("CWE191_Integer_Underflow__int_rand_multiply_16.c":99:9)
#loc124 = loc("CWE191_Integer_Underflow__int_rand_multiply_16.c":94:12)
#loc125 = loc("CWE191_Integer_Underflow__int_rand_multiply_16.c":94:19)
#loc126 = loc("CWE191_Integer_Underflow__int_rand_multiply_16.c":95:9)
#loc127 = loc("CWE191_Integer_Underflow__int_rand_multiply_16.c":97:26)
#loc128 = loc("CWE191_Integer_Underflow__int_rand_multiply_16.c":98:26)
#loc129 = loc("CWE191_Integer_Underflow__int_rand_multiply_16.c":98:13)
#loc130 = loc("CWE191_Integer_Underflow__int_rand_multiply_16.c":100:9)
#loc131 = loc(fused[#loc1, #loc2])
#loc132 = loc(fused[#loc3, #loc4])
#loc133 = loc(fused[#loc5, #loc6])
#loc134 = loc(fused[#loc7, #loc8])
#loc135 = loc(fused[#loc9, #loc10])
#loc136 = loc(fused[#loc12, #loc11])
#loc137 = loc(fused[#loc13, #loc14])
#loc138 = loc(fused[#loc17, #loc16])
#loc139 = loc(fused[#loc19, #loc20])
#loc140 = loc(fused[#loc22, #loc23])
#loc141 = loc(fused[#loc24, #loc25])
#loc142 = loc(fused[#loc26, #loc23])
#loc143 = loc(fused[#loc31, #loc32])
#loc144 = loc(fused[#loc33, #loc34])
#loc145 = loc(fused[#loc35, #loc36])
#loc146 = loc(fused[#loc37, #loc38])
#loc147 = loc(fused[#loc39, #loc40])
#loc148 = loc(fused[#loc41, #loc42])
#loc149 = loc(fused[#loc47, #loc48])
#loc152 = loc(fused[#loc58, #loc59])
#loc153 = loc(fused[#loc62, #loc63])
#loc154 = loc(fused[#loc66, #loc65])
#loc155 = loc(fused[#loc68, #loc69])
#loc156 = loc(fused[#loc70, #loc71])
#loc157 = loc(fused[#loc72, #loc73])
#loc158 = loc(fused[#loc75, #loc74])
#loc159 = loc(fused[#loc76, #loc77])
#loc160 = loc(fused[#loc80, #loc79])
#loc161 = loc(fused[#loc82, #loc83])
#loc162 = loc(fused[#loc85, #loc86])
#loc163 = loc(fused[#loc87, #loc88])
#loc164 = loc(fused[#loc89, #loc86])
#loc165 = loc(fused[#loc90, #loc91])
#loc166 = loc(fused[#loc93, #loc94])
#loc167 = loc(fused[#loc92, #loc95])
#loc168 = loc(fused[#loc96, #loc97, #loc98, #loc91])
#loc169 = loc(fused[#loc104, #loc105])
#loc170 = loc(fused[#loc106, #loc107])
#loc171 = loc(fused[#loc108, #loc109])
#loc172 = loc(fused[#loc111, #loc110])
#loc173 = loc(fused[#loc112, #loc113])
#loc174 = loc(fused[#loc117, #loc115])
#loc175 = loc(fused[#loc119, #loc120])
#loc176 = loc(fused[#loc122, #loc123])
#loc177 = loc(fused[#loc124, #loc125])
#loc178 = loc(fused[#loc126, #loc123])
