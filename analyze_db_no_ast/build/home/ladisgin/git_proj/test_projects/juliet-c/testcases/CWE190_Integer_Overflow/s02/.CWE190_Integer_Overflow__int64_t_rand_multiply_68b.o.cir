!s32i = !cir.int<s, 32>
!s64i = !cir.int<s, 64>
!s8i = !cir.int<s, 8>
#fn_attr = #cir<extra({inline = #cir.inline<no>, nothrow = #cir.nothrow, optnone = #cir.optnone})>
module @"/home/ladisgin/git_proj/test_projects/juliet-c/testcases/CWE190_Integer_Overflow/s02/CWE190_Integer_Overflow__int64_t_rand_multiply_68b.c" attributes {cir.lang = #cir.lang<c>, cir.sob = #cir.signed_overflow_behavior<undefined>, cir.triple = "x86_64-unknown-linux-gnu", dlti.dl_spec = #dlti.dl_spec<#dlti.dl_entry<i64, dense<64> : vector<2xi64>>, #dlti.dl_entry<i128, dense<128> : vector<2xi64>>, #dlti.dl_entry<f80, dense<128> : vector<2xi64>>, #dlti.dl_entry<!llvm.ptr, dense<64> : vector<4xi64>>, #dlti.dl_entry<i1, dense<8> : vector<2xi64>>, #dlti.dl_entry<i16, dense<16> : vector<2xi64>>, #dlti.dl_entry<i8, dense<8> : vector<2xi64>>, #dlti.dl_entry<i32, dense<32> : vector<2xi64>>, #dlti.dl_entry<f64, dense<64> : vector<2xi64>>, #dlti.dl_entry<f128, dense<128> : vector<2xi64>>, #dlti.dl_entry<!llvm.ptr<270>, dense<32> : vector<4xi64>>, #dlti.dl_entry<f16, dense<16> : vector<2xi64>>, #dlti.dl_entry<!llvm.ptr<272>, dense<64> : vector<4xi64>>, #dlti.dl_entry<!llvm.ptr<271>, dense<32> : vector<4xi64>>, #dlti.dl_entry<"dlti.stack_alignment", 128 : i64>, #dlti.dl_entry<"dlti.endianness", "little">>, llvm.data_layout = "e-m:e-p270:32:32-p271:32:32-p272:64:64-i64:64-i128:128-f80:128-n8:16:32:64-S128"} {
  cir.global "private"  external @CWE190_Integer_Overflow__int64_t_rand_multiply_68_badData : !s64i {alignment = 8 : i64} loc(#loc68)
  cir.func private  @printLongLongLine(!s64i) loc(#loc69)
  cir.func no_proto  @CWE190_Integer_Overflow__int64_t_rand_multiply_68b_badSink() extra(#fn_attr) {
    %0 = cir.alloca !s64i, !cir.ptr<!s64i>, ["data", init] {alignment = 8 : i64} loc(#loc71)
    %1 = cir.get_global @CWE190_Integer_Overflow__int64_t_rand_multiply_68_badData : !cir.ptr<!s64i> loc(#loc68)
    %2 = cir.load %1 : !cir.ptr<!s64i>, !s64i loc(#loc8)
    cir.store %2, %0 : !s64i, !cir.ptr<!s64i> loc(#loc71)
    cir.scope {
      %3 = cir.load %0 : !cir.ptr<!s64i>, !s64i loc(#loc11)
      %4 = cir.const #cir.int<0> : !s32i loc(#loc12)
      %5 = cir.cast(integral, %4 : !s32i), !s64i loc(#loc12)
      %6 = cir.cmp(gt, %3, %5) : !s64i, !s32i loc(#loc73)
      %7 = cir.cast(int_to_bool, %6 : !s32i), !cir.bool loc(#loc13)
      cir.if %7 {
        %8 = cir.alloca !s64i, !cir.ptr<!s64i>, ["result", init] {alignment = 8 : i64} loc(#loc75)
        %9 = cir.load %0 : !cir.ptr<!s64i>, !s64i loc(#loc17)
        %10 = cir.const #cir.int<2> : !s32i loc(#loc16)
        %11 = cir.cast(integral, %10 : !s32i), !s64i loc(#loc16)
        %12 = cir.binop(mul, %9, %11) nsw : !s64i loc(#loc17)
        cir.store %12, %8 : !s64i, !cir.ptr<!s64i> loc(#loc75)
        %13 = cir.load %8 : !cir.ptr<!s64i>, !s64i loc(#loc18)
        cir.call @printLongLongLine(%13) : (!s64i) -> () loc(#loc19)
      } loc(#loc74)
    } loc(#loc72)
    cir.return loc(#loc6)
  } loc(#loc70)
  cir.global "private"  external @CWE190_Integer_Overflow__int64_t_rand_multiply_68_goodG2BData : !s64i {alignment = 8 : i64} loc(#loc76)
  cir.func no_proto  @CWE190_Integer_Overflow__int64_t_rand_multiply_68b_goodG2BSink() extra(#fn_attr) {
    %0 = cir.alloca !s64i, !cir.ptr<!s64i>, ["data", init] {alignment = 8 : i64} loc(#loc78)
    %1 = cir.get_global @CWE190_Integer_Overflow__int64_t_rand_multiply_68_goodG2BData : !cir.ptr<!s64i> loc(#loc76)
    %2 = cir.load %1 : !cir.ptr<!s64i>, !s64i loc(#loc25)
    cir.store %2, %0 : !s64i, !cir.ptr<!s64i> loc(#loc78)
    cir.scope {
      %3 = cir.load %0 : !cir.ptr<!s64i>, !s64i loc(#loc28)
      %4 = cir.const #cir.int<0> : !s32i loc(#loc29)
      %5 = cir.cast(integral, %4 : !s32i), !s64i loc(#loc29)
      %6 = cir.cmp(gt, %3, %5) : !s64i, !s32i loc(#loc80)
      %7 = cir.cast(int_to_bool, %6 : !s32i), !cir.bool loc(#loc30)
      cir.if %7 {
        %8 = cir.alloca !s64i, !cir.ptr<!s64i>, ["result", init] {alignment = 8 : i64} loc(#loc82)
        %9 = cir.load %0 : !cir.ptr<!s64i>, !s64i loc(#loc34)
        %10 = cir.const #cir.int<2> : !s32i loc(#loc33)
        %11 = cir.cast(integral, %10 : !s32i), !s64i loc(#loc33)
        %12 = cir.binop(mul, %9, %11) nsw : !s64i loc(#loc34)
        cir.store %12, %8 : !s64i, !cir.ptr<!s64i> loc(#loc82)
        %13 = cir.load %8 : !cir.ptr<!s64i>, !s64i loc(#loc35)
        cir.call @printLongLongLine(%13) : (!s64i) -> () loc(#loc36)
      } loc(#loc81)
    } loc(#loc79)
    cir.return loc(#loc23)
  } loc(#loc77)
  cir.global "private"  external @CWE190_Integer_Overflow__int64_t_rand_multiply_68_goodB2GData : !s64i {alignment = 8 : i64} loc(#loc83)
  cir.func private  @printLine(!cir.ptr<!s8i>) loc(#loc84)
  cir.global "private"  constant internal dsolocal @".str" = #cir.const_array<"data value is too large to perform arithmetic safely.\00" : !cir.array<!s8i x 54>> : !cir.array<!s8i x 54> {alignment = 1 : i64} loc(#loc41)
  cir.func no_proto  @CWE190_Integer_Overflow__int64_t_rand_multiply_68b_goodB2GSink() extra(#fn_attr) {
    %0 = cir.alloca !s64i, !cir.ptr<!s64i>, ["data", init] {alignment = 8 : i64} loc(#loc86)
    %1 = cir.get_global @CWE190_Integer_Overflow__int64_t_rand_multiply_68_goodB2GData : !cir.ptr<!s64i> loc(#loc83)
    %2 = cir.load %1 : !cir.ptr<!s64i>, !s64i loc(#loc45)
    cir.store %2, %0 : !s64i, !cir.ptr<!s64i> loc(#loc86)
    cir.scope {
      %3 = cir.load %0 : !cir.ptr<!s64i>, !s64i loc(#loc48)
      %4 = cir.const #cir.int<0> : !s32i loc(#loc49)
      %5 = cir.cast(integral, %4 : !s32i), !s64i loc(#loc49)
      %6 = cir.cmp(gt, %3, %5) : !s64i, !s32i loc(#loc88)
      %7 = cir.cast(int_to_bool, %6 : !s32i), !cir.bool loc(#loc50)
      cir.if %7 {
        cir.scope {
          %8 = cir.load %0 : !cir.ptr<!s64i>, !s64i loc(#loc54)
          %9 = cir.const #cir.int<9223372036854775807> : !s64i loc(#loc55)
          %10 = cir.const #cir.int<2> : !s32i loc(#loc56)
          %11 = cir.cast(integral, %10 : !s32i), !s64i loc(#loc56)
          %12 = cir.binop(div, %9, %11) : !s64i loc(#loc91)
          %13 = cir.cmp(lt, %8, %12) : !s64i, !s32i loc(#loc92)
          %14 = cir.cast(int_to_bool, %13 : !s32i), !cir.bool loc(#loc58)
          cir.if %14 {
            %15 = cir.alloca !s64i, !cir.ptr<!s64i>, ["result", init] {alignment = 8 : i64} loc(#loc94)
            %16 = cir.load %0 : !cir.ptr<!s64i>, !s64i loc(#loc64)
            %17 = cir.const #cir.int<2> : !s32i loc(#loc63)
            %18 = cir.cast(integral, %17 : !s32i), !s64i loc(#loc63)
            %19 = cir.binop(mul, %16, %18) nsw : !s64i loc(#loc64)
            cir.store %19, %15 : !s64i, !cir.ptr<!s64i> loc(#loc94)
            %20 = cir.load %15 : !cir.ptr<!s64i>, !s64i loc(#loc65)
            cir.call @printLongLongLine(%20) : (!s64i) -> () loc(#loc66)
          } else {
            %15 = cir.get_global @".str" : !cir.ptr<!cir.array<!s8i x 54>> loc(#loc41)
            %16 = cir.cast(array_to_ptrdecay, %15 : !cir.ptr<!cir.array<!s8i x 54>>), !cir.ptr<!s8i> loc(#loc41)
            cir.call @printLine(%16) : (!cir.ptr<!s8i>) -> () loc(#loc67)
          } loc(#loc93)
        } loc(#loc90)
      } loc(#loc89)
    } loc(#loc87)
    cir.return loc(#loc43)
  } loc(#loc85)
} loc(#loc)
#loc = loc("/home/ladisgin/git_proj/test_projects/juliet-c/testcases/CWE190_Integer_Overflow/s02/CWE190_Integer_Overflow__int64_t_rand_multiply_68b.c":0:0)
#loc1 = loc("CWE190_Integer_Overflow__int64_t_rand_multiply_68b.c":20:1)
#loc2 = loc("CWE190_Integer_Overflow__int64_t_rand_multiply_68b.c":20:16)
#loc3 = loc("../../../testcasesupport/std_testcase_io.h":26:1)
#loc4 = loc("../../../testcasesupport/std_testcase_io.h":26:49)
#loc5 = loc("CWE190_Integer_Overflow__int64_t_rand_multiply_68b.c":26:1)
#loc6 = loc("CWE190_Integer_Overflow__int64_t_rand_multiply_68b.c":35:1)
#loc7 = loc("CWE190_Integer_Overflow__int64_t_rand_multiply_68b.c":28:5)
#loc8 = loc("CWE190_Integer_Overflow__int64_t_rand_multiply_68b.c":28:20)
#loc9 = loc("CWE190_Integer_Overflow__int64_t_rand_multiply_68b.c":29:5)
#loc10 = loc("CWE190_Integer_Overflow__int64_t_rand_multiply_68b.c":34:5)
#loc11 = loc("CWE190_Integer_Overflow__int64_t_rand_multiply_68b.c":29:8)
#loc12 = loc("CWE190_Integer_Overflow__int64_t_rand_multiply_68b.c":29:15)
#loc13 = loc("CWE190_Integer_Overflow__int64_t_rand_multiply_68b.c":29:13)
#loc14 = loc("CWE190_Integer_Overflow__int64_t_rand_multiply_68b.c":30:5)
#loc15 = loc("CWE190_Integer_Overflow__int64_t_rand_multiply_68b.c":32:9)
#loc16 = loc("CWE190_Integer_Overflow__int64_t_rand_multiply_68b.c":32:33)
#loc17 = loc("CWE190_Integer_Overflow__int64_t_rand_multiply_68b.c":32:26)
#loc18 = loc("CWE190_Integer_Overflow__int64_t_rand_multiply_68b.c":33:27)
#loc19 = loc("CWE190_Integer_Overflow__int64_t_rand_multiply_68b.c":33:9)
#loc20 = loc("CWE190_Integer_Overflow__int64_t_rand_multiply_68b.c":21:1)
#loc21 = loc("CWE190_Integer_Overflow__int64_t_rand_multiply_68b.c":21:16)
#loc22 = loc("CWE190_Integer_Overflow__int64_t_rand_multiply_68b.c":42:1)
#loc23 = loc("CWE190_Integer_Overflow__int64_t_rand_multiply_68b.c":51:1)
#loc24 = loc("CWE190_Integer_Overflow__int64_t_rand_multiply_68b.c":44:5)
#loc25 = loc("CWE190_Integer_Overflow__int64_t_rand_multiply_68b.c":44:20)
#loc26 = loc("CWE190_Integer_Overflow__int64_t_rand_multiply_68b.c":45:5)
#loc27 = loc("CWE190_Integer_Overflow__int64_t_rand_multiply_68b.c":50:5)
#loc28 = loc("CWE190_Integer_Overflow__int64_t_rand_multiply_68b.c":45:8)
#loc29 = loc("CWE190_Integer_Overflow__int64_t_rand_multiply_68b.c":45:15)
#loc30 = loc("CWE190_Integer_Overflow__int64_t_rand_multiply_68b.c":45:13)
#loc31 = loc("CWE190_Integer_Overflow__int64_t_rand_multiply_68b.c":46:5)
#loc32 = loc("CWE190_Integer_Overflow__int64_t_rand_multiply_68b.c":48:9)
#loc33 = loc("CWE190_Integer_Overflow__int64_t_rand_multiply_68b.c":48:33)
#loc34 = loc("CWE190_Integer_Overflow__int64_t_rand_multiply_68b.c":48:26)
#loc35 = loc("CWE190_Integer_Overflow__int64_t_rand_multiply_68b.c":49:27)
#loc36 = loc("CWE190_Integer_Overflow__int64_t_rand_multiply_68b.c":49:9)
#loc37 = loc("CWE190_Integer_Overflow__int64_t_rand_multiply_68b.c":22:1)
#loc38 = loc("CWE190_Integer_Overflow__int64_t_rand_multiply_68b.c":22:16)
#loc39 = loc("../../../testcasesupport/std_testcase_io.h":14:1)
#loc40 = loc("../../../testcasesupport/std_testcase_io.h":14:33)
#loc41 = loc("CWE190_Integer_Overflow__int64_t_rand_multiply_68b.c":67:23)
#loc42 = loc("CWE190_Integer_Overflow__int64_t_rand_multiply_68b.c":54:1)
#loc43 = loc("CWE190_Integer_Overflow__int64_t_rand_multiply_68b.c":70:1)
#loc44 = loc("CWE190_Integer_Overflow__int64_t_rand_multiply_68b.c":56:5)
#loc45 = loc("CWE190_Integer_Overflow__int64_t_rand_multiply_68b.c":56:20)
#loc46 = loc("CWE190_Integer_Overflow__int64_t_rand_multiply_68b.c":57:5)
#loc47 = loc("CWE190_Integer_Overflow__int64_t_rand_multiply_68b.c":69:5)
#loc48 = loc("CWE190_Integer_Overflow__int64_t_rand_multiply_68b.c":57:8)
#loc49 = loc("CWE190_Integer_Overflow__int64_t_rand_multiply_68b.c":57:15)
#loc50 = loc("CWE190_Integer_Overflow__int64_t_rand_multiply_68b.c":57:13)
#loc51 = loc("CWE190_Integer_Overflow__int64_t_rand_multiply_68b.c":58:5)
#loc52 = loc("CWE190_Integer_Overflow__int64_t_rand_multiply_68b.c":60:9)
#loc53 = loc("CWE190_Integer_Overflow__int64_t_rand_multiply_68b.c":68:9)
#loc54 = loc("CWE190_Integer_Overflow__int64_t_rand_multiply_68b.c":60:13)
#loc55 = loc("CWE190_Integer_Overflow__int64_t_rand_multiply_68b.c":60:21)
#loc56 = loc("CWE190_Integer_Overflow__int64_t_rand_multiply_68b.c":60:31)
#loc57 = loc("CWE190_Integer_Overflow__int64_t_rand_multiply_68b.c":60:32)
#loc58 = loc("CWE190_Integer_Overflow__int64_t_rand_multiply_68b.c":60:18)
#loc59 = loc("CWE190_Integer_Overflow__int64_t_rand_multiply_68b.c":61:9)
#loc60 = loc("CWE190_Integer_Overflow__int64_t_rand_multiply_68b.c":64:9)
#loc61 = loc("CWE190_Integer_Overflow__int64_t_rand_multiply_68b.c":66:9)
#loc62 = loc("CWE190_Integer_Overflow__int64_t_rand_multiply_68b.c":62:13)
#loc63 = loc("CWE190_Integer_Overflow__int64_t_rand_multiply_68b.c":62:37)
#loc64 = loc("CWE190_Integer_Overflow__int64_t_rand_multiply_68b.c":62:30)
#loc65 = loc("CWE190_Integer_Overflow__int64_t_rand_multiply_68b.c":63:31)
#loc66 = loc("CWE190_Integer_Overflow__int64_t_rand_multiply_68b.c":63:13)
#loc67 = loc("CWE190_Integer_Overflow__int64_t_rand_multiply_68b.c":67:13)
#loc68 = loc(fused[#loc1, #loc2])
#loc69 = loc(fused[#loc3, #loc4])
#loc70 = loc(fused[#loc5, #loc6])
#loc71 = loc(fused[#loc7, #loc8])
#loc72 = loc(fused[#loc9, #loc10])
#loc73 = loc(fused[#loc11, #loc12])
#loc74 = loc(fused[#loc14, #loc10])
#loc75 = loc(fused[#loc15, #loc16])
#loc76 = loc(fused[#loc20, #loc21])
#loc77 = loc(fused[#loc22, #loc23])
#loc78 = loc(fused[#loc24, #loc25])
#loc79 = loc(fused[#loc26, #loc27])
#loc80 = loc(fused[#loc28, #loc29])
#loc81 = loc(fused[#loc31, #loc27])
#loc82 = loc(fused[#loc32, #loc33])
#loc83 = loc(fused[#loc37, #loc38])
#loc84 = loc(fused[#loc39, #loc40])
#loc85 = loc(fused[#loc42, #loc43])
#loc86 = loc(fused[#loc44, #loc45])
#loc87 = loc(fused[#loc46, #loc47])
#loc88 = loc(fused[#loc48, #loc49])
#loc89 = loc(fused[#loc51, #loc47])
#loc90 = loc(fused[#loc52, #loc53])
#loc91 = loc(fused[#loc55, #loc56])
#loc92 = loc(fused[#loc54, #loc57])
#loc93 = loc(fused[#loc59, #loc60, #loc61, #loc53])
#loc94 = loc(fused[#loc62, #loc63])
