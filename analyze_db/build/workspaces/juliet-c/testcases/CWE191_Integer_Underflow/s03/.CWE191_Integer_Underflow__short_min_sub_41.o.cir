!s16i = !cir.int<s, 16>
!s32i = !cir.int<s, 32>
!s8i = !cir.int<s, 8>
#fn_attr = #cir<extra({inline = #cir.inline<no>, nothrow = #cir.nothrow, optnone = #cir.optnone, uwtable = #cir.uwtable<async>})>
#loc5 = loc("CWE191_Integer_Underflow__short_min_sub_41.c":22:21)
#loc6 = loc("CWE191_Integer_Underflow__short_min_sub_41.c":22:27)
#loc36 = loc("CWE191_Integer_Underflow__short_min_sub_41.c":64:25)
#loc37 = loc("CWE191_Integer_Underflow__short_min_sub_41.c":64:31)
#loc64 = loc("CWE191_Integer_Underflow__short_min_sub_41.c":45:25)
#loc65 = loc("CWE191_Integer_Underflow__short_min_sub_41.c":45:31)
#loc87 = loc(fused[#loc5, #loc6])
#loc99 = loc(fused[#loc36, #loc37])
#loc109 = loc(fused[#loc64, #loc65])
module @"/workspaces/juliet-c/testcases/CWE191_Integer_Underflow/s03/CWE191_Integer_Underflow__short_min_sub_41.c" attributes {cir.lang = #cir.lang<c>, cir.sob = #cir.signed_overflow_behavior<undefined>, cir.triple = "x86_64-unknown-linux-gnu", cir.type_size_info = #cir.type_size_info<char = 8, int = 32, size_t = 64>, cir.uwtable = #cir.uwtable<async>, dlti.dl_spec = #dlti.dl_spec<i1 = dense<8> : vector<2xi64>, !llvm.ptr = dense<64> : vector<4xi64>, i16 = dense<16> : vector<2xi64>, i8 = dense<8> : vector<2xi64>, i128 = dense<128> : vector<2xi64>, f80 = dense<128> : vector<2xi64>, !llvm.ptr<272> = dense<64> : vector<4xi64>, !llvm.ptr<270> = dense<32> : vector<4xi64>, !llvm.ptr<271> = dense<32> : vector<4xi64>, i64 = dense<64> : vector<2xi64>, i32 = dense<32> : vector<2xi64>, f128 = dense<128> : vector<2xi64>, f64 = dense<64> : vector<2xi64>, f16 = dense<16> : vector<2xi64>, "dlti.endianness" = "little", "dlti.stack_alignment" = 128 : i64, "dlti.mangling_mode" = "e">} {
  cir.func private @printIntLine(!s32i) loc(#loc85)
  cir.func internal private @badSink(%arg0: !s16i loc(fused[#loc5, #loc6])) extra(#fn_attr) {
    %0 = cir.alloca !s16i, !cir.ptr<!s16i>, ["data", init] {alignment = 2 : i64} loc(#loc87)
    cir.store %arg0, %0 : !s16i, !cir.ptr<!s16i> loc(#loc7)
    cir.scope {
      %1 = cir.alloca !s16i, !cir.ptr<!s16i>, ["result", init] {alignment = 2 : i64} loc(#loc89)
      %2 = cir.load %0 : !cir.ptr<!s16i>, !s16i loc(#loc12)
      %3 = cir.cast(integral, %2 : !s16i), !s32i loc(#loc12)
      %4 = cir.const #cir.int<1> : !s32i loc(#loc11)
      %5 = cir.binop(sub, %3, %4) nsw : !s32i loc(#loc12)
      %6 = cir.cast(integral, %5 : !s32i), !s16i loc(#loc12)
      cir.store %6, %1 : !s16i, !cir.ptr<!s16i> loc(#loc89)
      %7 = cir.load %1 : !cir.ptr<!s16i>, !s16i loc(#loc13)
      %8 = cir.cast(integral, %7 : !s16i), !s32i loc(#loc13)
      cir.call @printIntLine(%8) : (!s32i) -> () loc(#loc14)
    } loc(#loc88)
    cir.return loc(#loc4)
  } loc(#loc86)
  cir.func no_proto @CWE191_Integer_Underflow__short_min_sub_41_bad() extra(#fn_attr) {
    %0 = cir.alloca !s16i, !cir.ptr<!s16i>, ["data"] {alignment = 2 : i64} loc(#loc91)
    %1 = cir.const #cir.int<0> : !s32i loc(#loc19)
    %2 = cir.cast(integral, %1 : !s32i), !s16i loc(#loc19)
    cir.store %2, %0 : !s16i, !cir.ptr<!s16i> loc(#loc92)
    %3 = cir.const #cir.int<32767> : !s32i loc(#loc21)
    %4 = cir.unary(minus, %3) nsw : !s32i, !s32i loc(#loc21)
    %5 = cir.const #cir.int<1> : !s32i loc(#loc21)
    %6 = cir.binop(sub, %4, %5) nsw : !s32i loc(#loc21)
    %7 = cir.cast(integral, %6 : !s32i), !s16i loc(#loc21)
    cir.store %7, %0 : !s16i, !cir.ptr<!s16i> loc(#loc93)
    %8 = cir.load %0 : !cir.ptr<!s16i>, !s16i loc(#loc23)
    cir.call @badSink(%8) : (!s16i) -> () loc(#loc24)
    cir.return loc(#loc16)
  } loc(#loc90)
  cir.func no_proto @CWE191_Integer_Underflow__short_min_sub_41_good() extra(#fn_attr) {
    %0 = cir.get_global @goodB2G : !cir.ptr<!cir.func<()>> loc(#loc95)
    cir.call %0() : (!cir.ptr<!cir.func<()>>) -> () loc(#loc27)
    %1 = cir.get_global @goodG2B : !cir.ptr<!cir.func<()>> loc(#loc96)
    cir.call %1() : (!cir.ptr<!cir.func<()>>) -> () loc(#loc29)
    cir.return loc(#loc26)
  } loc(#loc94)
  cir.func private @printLine(!cir.ptr<!s8i>) loc(#loc97)
  cir.global "private" constant cir_private dsolocal @".str" = #cir.const_array<"data value is too large to perform subtraction.\00" : !cir.array<!s8i x 48>> : !cir.array<!s8i x 48> {alignment = 1 : i64} loc(#loc33)
  cir.func internal private @goodB2GSink(%arg0: !s16i loc(fused[#loc36, #loc37])) extra(#fn_attr) {
    %0 = cir.alloca !s16i, !cir.ptr<!s16i>, ["data", init] {alignment = 2 : i64} loc(#loc99)
    cir.store %arg0, %0 : !s16i, !cir.ptr<!s16i> loc(#loc38)
    cir.scope {
      %1 = cir.load %0 : !cir.ptr<!s16i>, !s16i loc(#loc41)
      %2 = cir.cast(integral, %1 : !s16i), !s32i loc(#loc41)
      %3 = cir.const #cir.int<32767> : !s32i loc(#loc42)
      %4 = cir.unary(minus, %3) nsw : !s32i, !s32i loc(#loc42)
      %5 = cir.const #cir.int<1> : !s32i loc(#loc42)
      %6 = cir.binop(sub, %4, %5) nsw : !s32i loc(#loc42)
      %7 = cir.cmp(gt, %2, %6) : !s32i, !cir.bool loc(#loc101)
      cir.if %7 {
        %8 = cir.alloca !s16i, !cir.ptr<!s16i>, ["result", init] {alignment = 2 : i64} loc(#loc103)
        %9 = cir.load %0 : !cir.ptr<!s16i>, !s16i loc(#loc48)
        %10 = cir.cast(integral, %9 : !s16i), !s32i loc(#loc48)
        %11 = cir.const #cir.int<1> : !s32i loc(#loc47)
        %12 = cir.binop(sub, %10, %11) nsw : !s32i loc(#loc48)
        %13 = cir.cast(integral, %12 : !s32i), !s16i loc(#loc48)
        cir.store %13, %8 : !s16i, !cir.ptr<!s16i> loc(#loc103)
        %14 = cir.load %8 : !cir.ptr<!s16i>, !s16i loc(#loc49)
        %15 = cir.cast(integral, %14 : !s16i), !s32i loc(#loc49)
        cir.call @printIntLine(%15) : (!s32i) -> () loc(#loc50)
      } else {
        %8 = cir.get_global @".str" : !cir.ptr<!cir.array<!s8i x 48>> loc(#loc33)
        %9 = cir.cast(array_to_ptrdecay, %8 : !cir.ptr<!cir.array<!s8i x 48>>), !cir.ptr<!s8i> loc(#loc33)
        cir.call @printLine(%9) : (!cir.ptr<!s8i>) -> () loc(#loc51)
      } loc(#loc102)
    } loc(#loc100)
    cir.return loc(#loc35)
  } loc(#loc98)
  cir.func no_proto internal private @goodB2G() extra(#fn_attr) {
    %0 = cir.alloca !s16i, !cir.ptr<!s16i>, ["data"] {alignment = 2 : i64} loc(#loc105)
    %1 = cir.const #cir.int<0> : !s32i loc(#loc56)
    %2 = cir.cast(integral, %1 : !s32i), !s16i loc(#loc56)
    cir.store %2, %0 : !s16i, !cir.ptr<!s16i> loc(#loc106)
    %3 = cir.const #cir.int<32767> : !s32i loc(#loc58)
    %4 = cir.unary(minus, %3) nsw : !s32i, !s32i loc(#loc58)
    %5 = cir.const #cir.int<1> : !s32i loc(#loc58)
    %6 = cir.binop(sub, %4, %5) nsw : !s32i loc(#loc58)
    %7 = cir.cast(integral, %6 : !s32i), !s16i loc(#loc58)
    cir.store %7, %0 : !s16i, !cir.ptr<!s16i> loc(#loc107)
    %8 = cir.load %0 : !cir.ptr<!s16i>, !s16i loc(#loc60)
    cir.call @goodB2GSink(%8) : (!s16i) -> () loc(#loc61)
    cir.return loc(#loc53)
  } loc(#loc104)
  cir.func internal private @goodG2BSink(%arg0: !s16i loc(fused[#loc64, #loc65])) extra(#fn_attr) {
    %0 = cir.alloca !s16i, !cir.ptr<!s16i>, ["data", init] {alignment = 2 : i64} loc(#loc109)
    cir.store %arg0, %0 : !s16i, !cir.ptr<!s16i> loc(#loc66)
    cir.scope {
      %1 = cir.alloca !s16i, !cir.ptr<!s16i>, ["result", init] {alignment = 2 : i64} loc(#loc111)
      %2 = cir.load %0 : !cir.ptr<!s16i>, !s16i loc(#loc71)
      %3 = cir.cast(integral, %2 : !s16i), !s32i loc(#loc71)
      %4 = cir.const #cir.int<1> : !s32i loc(#loc70)
      %5 = cir.binop(sub, %3, %4) nsw : !s32i loc(#loc71)
      %6 = cir.cast(integral, %5 : !s32i), !s16i loc(#loc71)
      cir.store %6, %1 : !s16i, !cir.ptr<!s16i> loc(#loc111)
      %7 = cir.load %1 : !cir.ptr<!s16i>, !s16i loc(#loc72)
      %8 = cir.cast(integral, %7 : !s16i), !s32i loc(#loc72)
      cir.call @printIntLine(%8) : (!s32i) -> () loc(#loc73)
    } loc(#loc110)
    cir.return loc(#loc63)
  } loc(#loc108)
  cir.func no_proto internal private @goodG2B() extra(#fn_attr) {
    %0 = cir.alloca !s16i, !cir.ptr<!s16i>, ["data"] {alignment = 2 : i64} loc(#loc113)
    %1 = cir.const #cir.int<0> : !s32i loc(#loc78)
    %2 = cir.cast(integral, %1 : !s32i), !s16i loc(#loc78)
    cir.store %2, %0 : !s16i, !cir.ptr<!s16i> loc(#loc114)
    %3 = cir.const #cir.int<2> : !s32i loc(#loc80)
    %4 = cir.unary(minus, %3) nsw : !s32i, !s32i loc(#loc81)
    %5 = cir.cast(integral, %4 : !s32i), !s16i loc(#loc81)
    cir.store %5, %0 : !s16i, !cir.ptr<!s16i> loc(#loc115)
    %6 = cir.load %0 : !cir.ptr<!s16i>, !s16i loc(#loc83)
    cir.call @goodG2BSink(%6) : (!s16i) -> () loc(#loc84)
    cir.return loc(#loc75)
  } loc(#loc112)
} loc(#loc)
#loc = loc("/workspaces/juliet-c/testcases/CWE191_Integer_Underflow/s03/CWE191_Integer_Underflow__short_min_sub_41.c":0:0)
#loc1 = loc("../../../testcasesupport/std_testcase_io.h":18:1)
#loc2 = loc("../../../testcasesupport/std_testcase_io.h":18:33)
#loc3 = loc("CWE191_Integer_Underflow__short_min_sub_41.c":22:1)
#loc4 = loc("CWE191_Integer_Underflow__short_min_sub_41.c":29:1)
#loc7 = loc("CWE191_Integer_Underflow__short_min_sub_41.c":23:1)
#loc8 = loc("CWE191_Integer_Underflow__short_min_sub_41.c":24:5)
#loc9 = loc("CWE191_Integer_Underflow__short_min_sub_41.c":28:5)
#loc10 = loc("CWE191_Integer_Underflow__short_min_sub_41.c":26:9)
#loc11 = loc("CWE191_Integer_Underflow__short_min_sub_41.c":26:31)
#loc12 = loc("CWE191_Integer_Underflow__short_min_sub_41.c":26:24)
#loc13 = loc("CWE191_Integer_Underflow__short_min_sub_41.c":27:22)
#loc14 = loc("CWE191_Integer_Underflow__short_min_sub_41.c":27:9)
#loc15 = loc("CWE191_Integer_Underflow__short_min_sub_41.c":31:1)
#loc16 = loc("CWE191_Integer_Underflow__short_min_sub_41.c":38:1)
#loc17 = loc("CWE191_Integer_Underflow__short_min_sub_41.c":33:5)
#loc18 = loc("CWE191_Integer_Underflow__short_min_sub_41.c":33:11)
#loc19 = loc("CWE191_Integer_Underflow__short_min_sub_41.c":34:12)
#loc20 = loc("CWE191_Integer_Underflow__short_min_sub_41.c":34:5)
#loc21 = loc("CWE191_Integer_Underflow__short_min_sub_41.c":36:12)
#loc22 = loc("CWE191_Integer_Underflow__short_min_sub_41.c":36:5)
#loc23 = loc("CWE191_Integer_Underflow__short_min_sub_41.c":37:13)
#loc24 = loc("CWE191_Integer_Underflow__short_min_sub_41.c":37:5)
#loc25 = loc("CWE191_Integer_Underflow__short_min_sub_41.c":87:1)
#loc26 = loc("CWE191_Integer_Underflow__short_min_sub_41.c":91:1)
#loc27 = loc("CWE191_Integer_Underflow__short_min_sub_41.c":89:5)
#loc28 = loc("CWE191_Integer_Underflow__short_min_sub_41.c":89:13)
#loc29 = loc("CWE191_Integer_Underflow__short_min_sub_41.c":90:5)
#loc30 = loc("CWE191_Integer_Underflow__short_min_sub_41.c":90:13)
#loc31 = loc("../../../testcasesupport/std_testcase_io.h":14:1)
#loc32 = loc("../../../testcasesupport/std_testcase_io.h":14:33)
#loc33 = loc("CWE191_Integer_Underflow__short_min_sub_41.c":74:19)
#loc34 = loc("CWE191_Integer_Underflow__short_min_sub_41.c":64:1)
#loc35 = loc("CWE191_Integer_Underflow__short_min_sub_41.c":76:1)
#loc38 = loc("CWE191_Integer_Underflow__short_min_sub_41.c":65:1)
#loc39 = loc("CWE191_Integer_Underflow__short_min_sub_41.c":67:5)
#loc40 = loc("CWE191_Integer_Underflow__short_min_sub_41.c":75:5)
#loc41 = loc("CWE191_Integer_Underflow__short_min_sub_41.c":67:9)
#loc42 = loc("CWE191_Integer_Underflow__short_min_sub_41.c":67:16)
#loc43 = loc("CWE191_Integer_Underflow__short_min_sub_41.c":68:5)
#loc44 = loc("CWE191_Integer_Underflow__short_min_sub_41.c":71:5)
#loc45 = loc("CWE191_Integer_Underflow__short_min_sub_41.c":73:5)
#loc46 = loc("CWE191_Integer_Underflow__short_min_sub_41.c":69:9)
#loc47 = loc("CWE191_Integer_Underflow__short_min_sub_41.c":69:31)
#loc48 = loc("CWE191_Integer_Underflow__short_min_sub_41.c":69:24)
#loc49 = loc("CWE191_Integer_Underflow__short_min_sub_41.c":70:22)
#loc50 = loc("CWE191_Integer_Underflow__short_min_sub_41.c":70:9)
#loc51 = loc("CWE191_Integer_Underflow__short_min_sub_41.c":74:9)
#loc52 = loc("CWE191_Integer_Underflow__short_min_sub_41.c":78:1)
#loc53 = loc("CWE191_Integer_Underflow__short_min_sub_41.c":85:1)
#loc54 = loc("CWE191_Integer_Underflow__short_min_sub_41.c":80:5)
#loc55 = loc("CWE191_Integer_Underflow__short_min_sub_41.c":80:11)
#loc56 = loc("CWE191_Integer_Underflow__short_min_sub_41.c":81:12)
#loc57 = loc("CWE191_Integer_Underflow__short_min_sub_41.c":81:5)
#loc58 = loc("CWE191_Integer_Underflow__short_min_sub_41.c":83:12)
#loc59 = loc("CWE191_Integer_Underflow__short_min_sub_41.c":83:5)
#loc60 = loc("CWE191_Integer_Underflow__short_min_sub_41.c":84:17)
#loc61 = loc("CWE191_Integer_Underflow__short_min_sub_41.c":84:5)
#loc62 = loc("CWE191_Integer_Underflow__short_min_sub_41.c":45:1)
#loc63 = loc("CWE191_Integer_Underflow__short_min_sub_41.c":52:1)
#loc66 = loc("CWE191_Integer_Underflow__short_min_sub_41.c":46:1)
#loc67 = loc("CWE191_Integer_Underflow__short_min_sub_41.c":47:5)
#loc68 = loc("CWE191_Integer_Underflow__short_min_sub_41.c":51:5)
#loc69 = loc("CWE191_Integer_Underflow__short_min_sub_41.c":49:9)
#loc70 = loc("CWE191_Integer_Underflow__short_min_sub_41.c":49:31)
#loc71 = loc("CWE191_Integer_Underflow__short_min_sub_41.c":49:24)
#loc72 = loc("CWE191_Integer_Underflow__short_min_sub_41.c":50:22)
#loc73 = loc("CWE191_Integer_Underflow__short_min_sub_41.c":50:9)
#loc74 = loc("CWE191_Integer_Underflow__short_min_sub_41.c":54:1)
#loc75 = loc("CWE191_Integer_Underflow__short_min_sub_41.c":61:1)
#loc76 = loc("CWE191_Integer_Underflow__short_min_sub_41.c":56:5)
#loc77 = loc("CWE191_Integer_Underflow__short_min_sub_41.c":56:11)
#loc78 = loc("CWE191_Integer_Underflow__short_min_sub_41.c":57:12)
#loc79 = loc("CWE191_Integer_Underflow__short_min_sub_41.c":57:5)
#loc80 = loc("CWE191_Integer_Underflow__short_min_sub_41.c":59:13)
#loc81 = loc("CWE191_Integer_Underflow__short_min_sub_41.c":59:12)
#loc82 = loc("CWE191_Integer_Underflow__short_min_sub_41.c":59:5)
#loc83 = loc("CWE191_Integer_Underflow__short_min_sub_41.c":60:17)
#loc84 = loc("CWE191_Integer_Underflow__short_min_sub_41.c":60:5)
#loc85 = loc(fused[#loc1, #loc2])
#loc86 = loc(fused[#loc3, #loc4])
#loc88 = loc(fused[#loc8, #loc9])
#loc89 = loc(fused[#loc10, #loc11])
#loc90 = loc(fused[#loc15, #loc16])
#loc91 = loc(fused[#loc17, #loc18])
#loc92 = loc(fused[#loc20, #loc19])
#loc93 = loc(fused[#loc22, #loc21])
#loc94 = loc(fused[#loc25, #loc26])
#loc95 = loc(fused[#loc27, #loc28])
#loc96 = loc(fused[#loc29, #loc30])
#loc97 = loc(fused[#loc31, #loc32])
#loc98 = loc(fused[#loc34, #loc35])
#loc100 = loc(fused[#loc39, #loc40])
#loc101 = loc(fused[#loc41, #loc42])
#loc102 = loc(fused[#loc43, #loc44, #loc45, #loc40])
#loc103 = loc(fused[#loc46, #loc47])
#loc104 = loc(fused[#loc52, #loc53])
#loc105 = loc(fused[#loc54, #loc55])
#loc106 = loc(fused[#loc57, #loc56])
#loc107 = loc(fused[#loc59, #loc58])
#loc108 = loc(fused[#loc62, #loc63])
#loc110 = loc(fused[#loc67, #loc68])
#loc111 = loc(fused[#loc69, #loc70])
#loc112 = loc(fused[#loc74, #loc75])
#loc113 = loc(fused[#loc76, #loc77])
#loc114 = loc(fused[#loc79, #loc78])
#loc115 = loc(fused[#loc82, #loc80])
