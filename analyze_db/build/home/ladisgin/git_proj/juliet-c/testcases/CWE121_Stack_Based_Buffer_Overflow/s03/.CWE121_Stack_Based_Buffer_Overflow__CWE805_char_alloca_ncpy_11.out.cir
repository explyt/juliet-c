!s32i = !cir.int<s, 32>
!s64i = !cir.int<s, 64>
!s8i = !cir.int<s, 8>
!u32i = !cir.int<u, 32>
!u64i = !cir.int<u, 64>
!u8i = !cir.int<u, 8>
!void = !cir.void
#fn_attr = #cir<extra({nothrow = #cir.nothrow})>
#fn_attr1 = #cir<extra({inline = #cir.inline<no>, nothrow = #cir.nothrow, optnone = #cir.optnone})>
#loc68 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE805_char_alloca_ncpy_11.c":117:10)
#loc69 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE805_char_alloca_ncpy_11.c":117:14)
#loc70 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE805_char_alloca_ncpy_11.c":117:20)
#loc71 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE805_char_alloca_ncpy_11.c":117:32)
#loc205 = loc(fused[#loc68, #loc69])
#loc206 = loc(fused[#loc70, #loc71])
module @"/home/ladisgin/git_proj/juliet-c/testcases/CWE121_Stack_Based_Buffer_Overflow/s03/CWE121_Stack_Based_Buffer_Overflow__CWE805_char_alloca_ncpy_11.c" attributes {cir.lang = #cir.lang<c>, cir.sob = #cir.signed_overflow_behavior<undefined>, cir.triple = "x86_64-unknown-linux-gnu", dlti.dl_spec = #dlti.dl_spec<i64 = dense<64> : vector<2xi64>, i128 = dense<128> : vector<2xi64>, f80 = dense<128> : vector<2xi64>, f64 = dense<64> : vector<2xi64>, f16 = dense<16> : vector<2xi64>, !llvm.ptr<270> = dense<32> : vector<4xi64>, f128 = dense<128> : vector<2xi64>, !llvm.ptr<271> = dense<32> : vector<4xi64>, !llvm.ptr<272> = dense<64> : vector<4xi64>, i8 = dense<8> : vector<2xi64>, i16 = dense<16> : vector<2xi64>, i32 = dense<32> : vector<2xi64>, !llvm.ptr = dense<64> : vector<4xi64>, i1 = dense<8> : vector<2xi64>, "dlti.endianness" = "little", "dlti.stack_alignment" = 128 : i64>} {
  cir.func no_proto private @globalReturnsTrue(...) -> !s32i loc(#loc182)
  cir.func private @strncpy(!cir.ptr<!s8i>, !cir.ptr<!s8i>, !u64i) -> !cir.ptr<!s8i> extra(#fn_attr) loc(#loc183)
  cir.func private @printLine(!cir.ptr<!s8i>) loc(#loc184)
  cir.func no_proto @CWE121_Stack_Based_Buffer_Overflow__CWE805_char_alloca_ncpy_11_bad() extra(#fn_attr1) {
    %0 = cir.alloca !cir.ptr<!s8i>, !cir.ptr<!cir.ptr<!s8i>>, ["data"] {alignment = 8 : i64} loc(#loc186)
    %1 = cir.alloca !cir.ptr<!s8i>, !cir.ptr<!cir.ptr<!s8i>>, ["dataBadBuffer", init] {alignment = 8 : i64} loc(#loc187)
    %2 = cir.const #cir.int<50> : !s32i loc(#loc12)
    %3 = cir.cast(integral, %2 : !s32i), !u64i loc(#loc12)
    %4 = cir.const #cir.int<1> : !u64i loc(#loc12)
    %5 = cir.binop(mul, %3, %4) : !u64i loc(#loc12)
    %6 = cir.alloca !u8i, !cir.ptr<!u8i>, %5 : !u64i, ["bi_alloca"] {alignment = 16 : i64} loc(#loc12)
    %7 = cir.alloca !cir.ptr<!s8i>, !cir.ptr<!cir.ptr<!s8i>>, ["dataGoodBuffer", init] {alignment = 8 : i64} loc(#loc188)
    %8 = cir.cast(bitcast, %6 : !cir.ptr<!u8i>), !cir.ptr<!void> loc(#loc12)
    %9 = cir.cast(bitcast, %8 : !cir.ptr<!void>), !cir.ptr<!s8i> loc(#loc12)
    cir.store %9, %1 : !cir.ptr<!s8i>, !cir.ptr<!cir.ptr<!s8i>> loc(#loc187)
    %10 = cir.const #cir.int<100> : !s32i loc(#loc14)
    %11 = cir.cast(integral, %10 : !s32i), !u64i loc(#loc14)
    %12 = cir.const #cir.int<1> : !u64i loc(#loc14)
    %13 = cir.binop(mul, %11, %12) : !u64i loc(#loc14)
    %14 = cir.alloca !u8i, !cir.ptr<!u8i>, %13 : !u64i, ["bi_alloca"] {alignment = 16 : i64} loc(#loc14)
    %15 = cir.cast(bitcast, %14 : !cir.ptr<!u8i>), !cir.ptr<!void> loc(#loc14)
    %16 = cir.cast(bitcast, %15 : !cir.ptr<!void>), !cir.ptr<!s8i> loc(#loc14)
    cir.store %16, %7 : !cir.ptr<!s8i>, !cir.ptr<!cir.ptr<!s8i>> loc(#loc188)
    cir.scope {
      %17 = cir.get_global @globalReturnsTrue : !cir.ptr<!cir.func<!s32i (...)>> loc(#loc190)
      %18 = cir.cast(bitcast, %17 : !cir.ptr<!cir.func<!s32i (...)>>), !cir.ptr<!cir.func<!s32i ()>> loc(#loc190)
      %19 = cir.call %18() : (!cir.ptr<!cir.func<!s32i ()>>) -> !s32i loc(#loc17)
      %20 = cir.cast(int_to_bool, %19 : !s32i), !cir.bool loc(#loc17)
      cir.if %20 {
        %21 = cir.load %1 : !cir.ptr<!cir.ptr<!s8i>>, !cir.ptr<!s8i> loc(#loc20)
        cir.store %21, %0 : !cir.ptr<!s8i>, !cir.ptr<!cir.ptr<!s8i>> loc(#loc192)
        %22 = cir.const #cir.int<0> : !s32i loc(#loc22)
        %23 = cir.cast(integral, %22 : !s32i), !s8i loc(#loc22)
        %24 = cir.load %0 : !cir.ptr<!cir.ptr<!s8i>>, !cir.ptr<!s8i> loc(#loc23)
        %25 = cir.const #cir.int<0> : !s32i loc(#loc24)
        %26 = cir.ptr_stride(%24 : !cir.ptr<!s8i>, %25 : !s32i), !cir.ptr<!s8i> loc(#loc25)
        cir.store %23, %26 : !s8i, !cir.ptr<!s8i> loc(#loc193)
      } loc(#loc191)
    } loc(#loc189)
    cir.scope {
      %17 = cir.alloca !cir.array<!s8i x 100>, !cir.ptr<!cir.array<!s8i x 100>>, ["source"] {alignment = 16 : i64} loc(#loc195)
      %18 = cir.cast(array_to_ptrdecay, %17 : !cir.ptr<!cir.array<!s8i x 100>>), !cir.ptr<!s8i> loc(#loc30)
      %19 = cir.cast(bitcast, %18 : !cir.ptr<!s8i>), !cir.ptr<!void> loc(#loc30)
      %20 = cir.const #cir.int<67> : !s32i loc(#loc31)
      %21 = cir.const #cir.int<100> : !s32i loc(#loc32)
      %22 = cir.const #cir.int<1> : !s32i loc(#loc33)
      %23 = cir.binop(sub, %21, %22) nsw : !s32i loc(#loc32)
      %24 = cir.cast(integral, %23 : !s32i), !u64i loc(#loc32)
      cir.libc.memset %24 bytes from %19 set to %20 : !cir.ptr<!void>, !s32i, !u64i loc(#loc196)
      %25 = cir.const #cir.int<0> : !s32i loc(#loc36)
      %26 = cir.cast(integral, %25 : !s32i), !s8i loc(#loc36)
      %27 = cir.const #cir.int<100> : !s32i loc(#loc37)
      %28 = cir.const #cir.int<1> : !s32i loc(#loc38)
      %29 = cir.binop(sub, %27, %28) nsw : !s32i loc(#loc37)
      %30 = cir.cast(array_to_ptrdecay, %17 : !cir.ptr<!cir.array<!s8i x 100>>), !cir.ptr<!s8i> loc(#loc39)
      %31 = cir.ptr_stride(%30 : !cir.ptr<!s8i>, %29 : !s32i), !cir.ptr<!s8i> loc(#loc39)
      cir.store %26, %31 : !s8i, !cir.ptr<!s8i> loc(#loc197)
      %32 = cir.get_global @strncpy : !cir.ptr<!cir.func<!cir.ptr<!s8i> (!cir.ptr<!s8i>, !cir.ptr<!s8i>, !u64i)>> loc(#loc40)
      %33 = cir.load %0 : !cir.ptr<!cir.ptr<!s8i>>, !cir.ptr<!s8i> loc(#loc41)
      %34 = cir.cast(array_to_ptrdecay, %17 : !cir.ptr<!cir.array<!s8i x 100>>), !cir.ptr<!s8i> loc(#loc42)
      %35 = cir.const #cir.int<100> : !s32i loc(#loc43)
      %36 = cir.const #cir.int<1> : !s32i loc(#loc44)
      %37 = cir.binop(sub, %35, %36) nsw : !s32i loc(#loc43)
      %38 = cir.cast(integral, %37 : !s32i), !u64i loc(#loc43)
      %39 = cir.call @strncpy(%33, %34, %38) : (!cir.ptr<!s8i>, !cir.ptr<!s8i>, !u64i) -> !cir.ptr<!s8i> extra(#fn_attr) loc(#loc40)
      %40 = cir.const #cir.int<0> : !s32i loc(#loc45)
      %41 = cir.cast(integral, %40 : !s32i), !s8i loc(#loc45)
      %42 = cir.load %0 : !cir.ptr<!cir.ptr<!s8i>>, !cir.ptr<!s8i> loc(#loc46)
      %43 = cir.const #cir.int<100> : !s32i loc(#loc47)
      %44 = cir.const #cir.int<1> : !s32i loc(#loc48)
      %45 = cir.binop(sub, %43, %44) nsw : !s32i loc(#loc47)
      %46 = cir.ptr_stride(%42 : !cir.ptr<!s8i>, %45 : !s32i), !cir.ptr<!s8i> loc(#loc49)
      cir.store %41, %46 : !s8i, !cir.ptr<!s8i> loc(#loc198)
      %47 = cir.load %0 : !cir.ptr<!cir.ptr<!s8i>>, !cir.ptr<!s8i> loc(#loc50)
      cir.call @printLine(%47) : (!cir.ptr<!s8i>) -> () loc(#loc51)
    } loc(#loc194)
    cir.return loc(#loc8)
  } loc(#loc185)
  cir.func no_proto @CWE121_Stack_Based_Buffer_Overflow__CWE805_char_alloca_ncpy_11_good() extra(#fn_attr1) {
    %0 = cir.get_global @goodG2B1 : !cir.ptr<!cir.func<!void ()>> loc(#loc200)
    cir.call %0() : (!cir.ptr<!cir.func<!void ()>>) -> () loc(#loc54)
    %1 = cir.get_global @goodG2B2 : !cir.ptr<!cir.func<!void ()>> loc(#loc201)
    cir.call %1() : (!cir.ptr<!cir.func<!void ()>>) -> () loc(#loc56)
    cir.return loc(#loc53)
  } loc(#loc199)
  cir.func private @srand(!u32i) extra(#fn_attr) loc(#loc202)
  cir.func private @time(!cir.ptr<!s64i>) -> !s64i extra(#fn_attr) loc(#loc203)
  cir.global "private" constant cir_private dsolocal @".str" = #cir.const_array<"Calling good()...\00" : !cir.array<!s8i x 18>> : !cir.array<!s8i x 18> {alignment = 1 : i64} loc(#loc62)
  cir.global "private" constant cir_private dsolocal @".str.1" = #cir.const_array<"Finished good()\00" : !cir.array<!s8i x 16>> : !cir.array<!s8i x 16> {alignment = 1 : i64} loc(#loc63)
  cir.global "private" constant cir_private dsolocal @".str.2" = #cir.const_array<"Calling bad()...\00" : !cir.array<!s8i x 17>> : !cir.array<!s8i x 17> {alignment = 1 : i64} loc(#loc64)
  cir.global "private" constant cir_private dsolocal @".str.3" = #cir.const_array<"Finished bad()\00" : !cir.array<!s8i x 15>> : !cir.array<!s8i x 15> {alignment = 1 : i64} loc(#loc65)
  cir.func @main(%arg0: !s32i loc(fused[#loc68, #loc69]), %arg1: !cir.ptr<!cir.ptr<!s8i>> loc(fused[#loc70, #loc71])) -> !s32i extra(#fn_attr1) {
    %0 = cir.alloca !s32i, !cir.ptr<!s32i>, ["argc", init] {alignment = 4 : i64} loc(#loc205)
    %1 = cir.alloca !cir.ptr<!cir.ptr<!s8i>>, !cir.ptr<!cir.ptr<!cir.ptr<!s8i>>>, ["argv", init] {alignment = 8 : i64} loc(#loc206)
    %2 = cir.alloca !s32i, !cir.ptr<!s32i>, ["__retval"] {alignment = 4 : i64} loc(#loc67)
    cir.store %arg0, %0 : !s32i, !cir.ptr<!s32i> loc(#loc72)
    cir.store %arg1, %1 : !cir.ptr<!cir.ptr<!s8i>>, !cir.ptr<!cir.ptr<!cir.ptr<!s8i>>> loc(#loc72)
    %3 = cir.const #cir.ptr<null> : !cir.ptr<!s64i> loc(#loc73)
    %4 = cir.call @time(%3) : (!cir.ptr<!s64i>) -> !s64i extra(#fn_attr) loc(#loc74)
    %5 = cir.cast(integral, %4 : !s64i), !u32i loc(#loc74)
    cir.call @srand(%5) : (!u32i) -> () extra(#fn_attr) loc(#loc75)
    %6 = cir.get_global @".str" : !cir.ptr<!cir.array<!s8i x 18>> loc(#loc62)
    %7 = cir.cast(array_to_ptrdecay, %6 : !cir.ptr<!cir.array<!s8i x 18>>), !cir.ptr<!s8i> loc(#loc62)
    cir.call @printLine(%7) : (!cir.ptr<!s8i>) -> () loc(#loc76)
    %8 = cir.get_global @CWE121_Stack_Based_Buffer_Overflow__CWE805_char_alloca_ncpy_11_good : !cir.ptr<!cir.func<!void ()>> loc(#loc207)
    cir.call @CWE121_Stack_Based_Buffer_Overflow__CWE805_char_alloca_ncpy_11_good() : () -> () loc(#loc77)
    %9 = cir.get_global @".str.1" : !cir.ptr<!cir.array<!s8i x 16>> loc(#loc63)
    %10 = cir.cast(array_to_ptrdecay, %9 : !cir.ptr<!cir.array<!s8i x 16>>), !cir.ptr<!s8i> loc(#loc63)
    cir.call @printLine(%10) : (!cir.ptr<!s8i>) -> () loc(#loc79)
    %11 = cir.get_global @".str.2" : !cir.ptr<!cir.array<!s8i x 17>> loc(#loc64)
    %12 = cir.cast(array_to_ptrdecay, %11 : !cir.ptr<!cir.array<!s8i x 17>>), !cir.ptr<!s8i> loc(#loc64)
    cir.call @printLine(%12) : (!cir.ptr<!s8i>) -> () loc(#loc80)
    %13 = cir.get_global @CWE121_Stack_Based_Buffer_Overflow__CWE805_char_alloca_ncpy_11_bad : !cir.ptr<!cir.func<!void ()>> loc(#loc208)
    cir.call @CWE121_Stack_Based_Buffer_Overflow__CWE805_char_alloca_ncpy_11_bad() : () -> () loc(#loc81)
    %14 = cir.get_global @".str.3" : !cir.ptr<!cir.array<!s8i x 15>> loc(#loc65)
    %15 = cir.cast(array_to_ptrdecay, %14 : !cir.ptr<!cir.array<!s8i x 15>>), !cir.ptr<!s8i> loc(#loc65)
    cir.call @printLine(%15) : (!cir.ptr<!s8i>) -> () loc(#loc83)
    %16 = cir.const #cir.int<0> : !s32i loc(#loc84)
    cir.store %16, %2 : !s32i, !cir.ptr<!s32i> loc(#loc209)
    %17 = cir.load %2 : !cir.ptr<!s32i>, !s32i loc(#loc209)
    cir.return %17 : !s32i loc(#loc209)
  } loc(#loc204)
  cir.func no_proto private @globalReturnsFalse(...) -> !s32i loc(#loc210)
  cir.global "private" constant cir_private dsolocal @".str.4" = #cir.const_array<"Benign, fixed string\00" : !cir.array<!s8i x 21>> : !cir.array<!s8i x 21> {alignment = 1 : i64} loc(#loc88)
  cir.func no_proto internal private @goodG2B1() extra(#fn_attr1) {
    %0 = cir.alloca !cir.ptr<!s8i>, !cir.ptr<!cir.ptr<!s8i>>, ["data"] {alignment = 8 : i64} loc(#loc212)
    %1 = cir.alloca !cir.ptr<!s8i>, !cir.ptr<!cir.ptr<!s8i>>, ["dataBadBuffer", init] {alignment = 8 : i64} loc(#loc213)
    %2 = cir.const #cir.int<50> : !s32i loc(#loc94)
    %3 = cir.cast(integral, %2 : !s32i), !u64i loc(#loc94)
    %4 = cir.const #cir.int<1> : !u64i loc(#loc94)
    %5 = cir.binop(mul, %3, %4) : !u64i loc(#loc94)
    %6 = cir.alloca !u8i, !cir.ptr<!u8i>, %5 : !u64i, ["bi_alloca"] {alignment = 16 : i64} loc(#loc94)
    %7 = cir.alloca !cir.ptr<!s8i>, !cir.ptr<!cir.ptr<!s8i>>, ["dataGoodBuffer", init] {alignment = 8 : i64} loc(#loc214)
    %8 = cir.cast(bitcast, %6 : !cir.ptr<!u8i>), !cir.ptr<!void> loc(#loc94)
    %9 = cir.cast(bitcast, %8 : !cir.ptr<!void>), !cir.ptr<!s8i> loc(#loc94)
    cir.store %9, %1 : !cir.ptr<!s8i>, !cir.ptr<!cir.ptr<!s8i>> loc(#loc213)
    %10 = cir.const #cir.int<100> : !s32i loc(#loc96)
    %11 = cir.cast(integral, %10 : !s32i), !u64i loc(#loc96)
    %12 = cir.const #cir.int<1> : !u64i loc(#loc96)
    %13 = cir.binop(mul, %11, %12) : !u64i loc(#loc96)
    %14 = cir.alloca !u8i, !cir.ptr<!u8i>, %13 : !u64i, ["bi_alloca"] {alignment = 16 : i64} loc(#loc96)
    %15 = cir.cast(bitcast, %14 : !cir.ptr<!u8i>), !cir.ptr<!void> loc(#loc96)
    %16 = cir.cast(bitcast, %15 : !cir.ptr<!void>), !cir.ptr<!s8i> loc(#loc96)
    cir.store %16, %7 : !cir.ptr<!s8i>, !cir.ptr<!cir.ptr<!s8i>> loc(#loc214)
    cir.scope {
      %17 = cir.get_global @globalReturnsFalse : !cir.ptr<!cir.func<!s32i (...)>> loc(#loc216)
      %18 = cir.cast(bitcast, %17 : !cir.ptr<!cir.func<!s32i (...)>>), !cir.ptr<!cir.func<!s32i ()>> loc(#loc216)
      %19 = cir.call %18() : (!cir.ptr<!cir.func<!s32i ()>>) -> !s32i loc(#loc99)
      %20 = cir.cast(int_to_bool, %19 : !s32i), !cir.bool loc(#loc99)
      cir.if %20 {
        %21 = cir.get_global @".str.4" : !cir.ptr<!cir.array<!s8i x 21>> loc(#loc88)
        %22 = cir.cast(array_to_ptrdecay, %21 : !cir.ptr<!cir.array<!s8i x 21>>), !cir.ptr<!s8i> loc(#loc88)
        cir.call @printLine(%22) : (!cir.ptr<!s8i>) -> () loc(#loc104)
      } else {
        %21 = cir.load %7 : !cir.ptr<!cir.ptr<!s8i>>, !cir.ptr<!s8i> loc(#loc105)
        cir.store %21, %0 : !cir.ptr<!s8i>, !cir.ptr<!cir.ptr<!s8i>> loc(#loc218)
        %22 = cir.const #cir.int<0> : !s32i loc(#loc107)
        %23 = cir.cast(integral, %22 : !s32i), !s8i loc(#loc107)
        %24 = cir.load %0 : !cir.ptr<!cir.ptr<!s8i>>, !cir.ptr<!s8i> loc(#loc108)
        %25 = cir.const #cir.int<0> : !s32i loc(#loc109)
        %26 = cir.ptr_stride(%24 : !cir.ptr<!s8i>, %25 : !s32i), !cir.ptr<!s8i> loc(#loc110)
        cir.store %23, %26 : !s8i, !cir.ptr<!s8i> loc(#loc219)
      } loc(#loc217)
    } loc(#loc215)
    cir.scope {
      %17 = cir.alloca !cir.array<!s8i x 100>, !cir.ptr<!cir.array<!s8i x 100>>, ["source"] {alignment = 16 : i64} loc(#loc221)
      %18 = cir.cast(array_to_ptrdecay, %17 : !cir.ptr<!cir.array<!s8i x 100>>), !cir.ptr<!s8i> loc(#loc115)
      %19 = cir.cast(bitcast, %18 : !cir.ptr<!s8i>), !cir.ptr<!void> loc(#loc115)
      %20 = cir.const #cir.int<67> : !s32i loc(#loc116)
      %21 = cir.const #cir.int<100> : !s32i loc(#loc117)
      %22 = cir.const #cir.int<1> : !s32i loc(#loc118)
      %23 = cir.binop(sub, %21, %22) nsw : !s32i loc(#loc117)
      %24 = cir.cast(integral, %23 : !s32i), !u64i loc(#loc117)
      cir.libc.memset %24 bytes from %19 set to %20 : !cir.ptr<!void>, !s32i, !u64i loc(#loc222)
      %25 = cir.const #cir.int<0> : !s32i loc(#loc121)
      %26 = cir.cast(integral, %25 : !s32i), !s8i loc(#loc121)
      %27 = cir.const #cir.int<100> : !s32i loc(#loc122)
      %28 = cir.const #cir.int<1> : !s32i loc(#loc123)
      %29 = cir.binop(sub, %27, %28) nsw : !s32i loc(#loc122)
      %30 = cir.cast(array_to_ptrdecay, %17 : !cir.ptr<!cir.array<!s8i x 100>>), !cir.ptr<!s8i> loc(#loc124)
      %31 = cir.ptr_stride(%30 : !cir.ptr<!s8i>, %29 : !s32i), !cir.ptr<!s8i> loc(#loc124)
      cir.store %26, %31 : !s8i, !cir.ptr<!s8i> loc(#loc223)
      %32 = cir.get_global @strncpy : !cir.ptr<!cir.func<!cir.ptr<!s8i> (!cir.ptr<!s8i>, !cir.ptr<!s8i>, !u64i)>> loc(#loc125)
      %33 = cir.load %0 : !cir.ptr<!cir.ptr<!s8i>>, !cir.ptr<!s8i> loc(#loc126)
      %34 = cir.cast(array_to_ptrdecay, %17 : !cir.ptr<!cir.array<!s8i x 100>>), !cir.ptr<!s8i> loc(#loc127)
      %35 = cir.const #cir.int<100> : !s32i loc(#loc128)
      %36 = cir.const #cir.int<1> : !s32i loc(#loc129)
      %37 = cir.binop(sub, %35, %36) nsw : !s32i loc(#loc128)
      %38 = cir.cast(integral, %37 : !s32i), !u64i loc(#loc128)
      %39 = cir.call @strncpy(%33, %34, %38) : (!cir.ptr<!s8i>, !cir.ptr<!s8i>, !u64i) -> !cir.ptr<!s8i> extra(#fn_attr) loc(#loc125)
      %40 = cir.const #cir.int<0> : !s32i loc(#loc130)
      %41 = cir.cast(integral, %40 : !s32i), !s8i loc(#loc130)
      %42 = cir.load %0 : !cir.ptr<!cir.ptr<!s8i>>, !cir.ptr<!s8i> loc(#loc131)
      %43 = cir.const #cir.int<100> : !s32i loc(#loc132)
      %44 = cir.const #cir.int<1> : !s32i loc(#loc133)
      %45 = cir.binop(sub, %43, %44) nsw : !s32i loc(#loc132)
      %46 = cir.ptr_stride(%42 : !cir.ptr<!s8i>, %45 : !s32i), !cir.ptr<!s8i> loc(#loc134)
      cir.store %41, %46 : !s8i, !cir.ptr<!s8i> loc(#loc224)
      %47 = cir.load %0 : !cir.ptr<!cir.ptr<!s8i>>, !cir.ptr<!s8i> loc(#loc135)
      cir.call @printLine(%47) : (!cir.ptr<!s8i>) -> () loc(#loc136)
    } loc(#loc220)
    cir.return loc(#loc90)
  } loc(#loc211)
  cir.func no_proto internal private @goodG2B2() extra(#fn_attr1) {
    %0 = cir.alloca !cir.ptr<!s8i>, !cir.ptr<!cir.ptr<!s8i>>, ["data"] {alignment = 8 : i64} loc(#loc226)
    %1 = cir.alloca !cir.ptr<!s8i>, !cir.ptr<!cir.ptr<!s8i>>, ["dataBadBuffer", init] {alignment = 8 : i64} loc(#loc227)
    %2 = cir.const #cir.int<50> : !s32i loc(#loc142)
    %3 = cir.cast(integral, %2 : !s32i), !u64i loc(#loc142)
    %4 = cir.const #cir.int<1> : !u64i loc(#loc142)
    %5 = cir.binop(mul, %3, %4) : !u64i loc(#loc142)
    %6 = cir.alloca !u8i, !cir.ptr<!u8i>, %5 : !u64i, ["bi_alloca"] {alignment = 16 : i64} loc(#loc142)
    %7 = cir.alloca !cir.ptr<!s8i>, !cir.ptr<!cir.ptr<!s8i>>, ["dataGoodBuffer", init] {alignment = 8 : i64} loc(#loc228)
    %8 = cir.cast(bitcast, %6 : !cir.ptr<!u8i>), !cir.ptr<!void> loc(#loc142)
    %9 = cir.cast(bitcast, %8 : !cir.ptr<!void>), !cir.ptr<!s8i> loc(#loc142)
    cir.store %9, %1 : !cir.ptr<!s8i>, !cir.ptr<!cir.ptr<!s8i>> loc(#loc227)
    %10 = cir.const #cir.int<100> : !s32i loc(#loc144)
    %11 = cir.cast(integral, %10 : !s32i), !u64i loc(#loc144)
    %12 = cir.const #cir.int<1> : !u64i loc(#loc144)
    %13 = cir.binop(mul, %11, %12) : !u64i loc(#loc144)
    %14 = cir.alloca !u8i, !cir.ptr<!u8i>, %13 : !u64i, ["bi_alloca"] {alignment = 16 : i64} loc(#loc144)
    %15 = cir.cast(bitcast, %14 : !cir.ptr<!u8i>), !cir.ptr<!void> loc(#loc144)
    %16 = cir.cast(bitcast, %15 : !cir.ptr<!void>), !cir.ptr<!s8i> loc(#loc144)
    cir.store %16, %7 : !cir.ptr<!s8i>, !cir.ptr<!cir.ptr<!s8i>> loc(#loc228)
    cir.scope {
      %17 = cir.get_global @globalReturnsTrue : !cir.ptr<!cir.func<!s32i (...)>> loc(#loc230)
      %18 = cir.cast(bitcast, %17 : !cir.ptr<!cir.func<!s32i (...)>>), !cir.ptr<!cir.func<!s32i ()>> loc(#loc230)
      %19 = cir.call %18() : (!cir.ptr<!cir.func<!s32i ()>>) -> !s32i loc(#loc147)
      %20 = cir.cast(int_to_bool, %19 : !s32i), !cir.bool loc(#loc147)
      cir.if %20 {
        %21 = cir.load %7 : !cir.ptr<!cir.ptr<!s8i>>, !cir.ptr<!s8i> loc(#loc150)
        cir.store %21, %0 : !cir.ptr<!s8i>, !cir.ptr<!cir.ptr<!s8i>> loc(#loc232)
        %22 = cir.const #cir.int<0> : !s32i loc(#loc152)
        %23 = cir.cast(integral, %22 : !s32i), !s8i loc(#loc152)
        %24 = cir.load %0 : !cir.ptr<!cir.ptr<!s8i>>, !cir.ptr<!s8i> loc(#loc153)
        %25 = cir.const #cir.int<0> : !s32i loc(#loc154)
        %26 = cir.ptr_stride(%24 : !cir.ptr<!s8i>, %25 : !s32i), !cir.ptr<!s8i> loc(#loc155)
        cir.store %23, %26 : !s8i, !cir.ptr<!s8i> loc(#loc233)
      } loc(#loc231)
    } loc(#loc229)
    cir.scope {
      %17 = cir.alloca !cir.array<!s8i x 100>, !cir.ptr<!cir.array<!s8i x 100>>, ["source"] {alignment = 16 : i64} loc(#loc235)
      %18 = cir.cast(array_to_ptrdecay, %17 : !cir.ptr<!cir.array<!s8i x 100>>), !cir.ptr<!s8i> loc(#loc160)
      %19 = cir.cast(bitcast, %18 : !cir.ptr<!s8i>), !cir.ptr<!void> loc(#loc160)
      %20 = cir.const #cir.int<67> : !s32i loc(#loc161)
      %21 = cir.const #cir.int<100> : !s32i loc(#loc162)
      %22 = cir.const #cir.int<1> : !s32i loc(#loc163)
      %23 = cir.binop(sub, %21, %22) nsw : !s32i loc(#loc162)
      %24 = cir.cast(integral, %23 : !s32i), !u64i loc(#loc162)
      cir.libc.memset %24 bytes from %19 set to %20 : !cir.ptr<!void>, !s32i, !u64i loc(#loc236)
      %25 = cir.const #cir.int<0> : !s32i loc(#loc166)
      %26 = cir.cast(integral, %25 : !s32i), !s8i loc(#loc166)
      %27 = cir.const #cir.int<100> : !s32i loc(#loc167)
      %28 = cir.const #cir.int<1> : !s32i loc(#loc168)
      %29 = cir.binop(sub, %27, %28) nsw : !s32i loc(#loc167)
      %30 = cir.cast(array_to_ptrdecay, %17 : !cir.ptr<!cir.array<!s8i x 100>>), !cir.ptr<!s8i> loc(#loc169)
      %31 = cir.ptr_stride(%30 : !cir.ptr<!s8i>, %29 : !s32i), !cir.ptr<!s8i> loc(#loc169)
      cir.store %26, %31 : !s8i, !cir.ptr<!s8i> loc(#loc237)
      %32 = cir.get_global @strncpy : !cir.ptr<!cir.func<!cir.ptr<!s8i> (!cir.ptr<!s8i>, !cir.ptr<!s8i>, !u64i)>> loc(#loc170)
      %33 = cir.load %0 : !cir.ptr<!cir.ptr<!s8i>>, !cir.ptr<!s8i> loc(#loc171)
      %34 = cir.cast(array_to_ptrdecay, %17 : !cir.ptr<!cir.array<!s8i x 100>>), !cir.ptr<!s8i> loc(#loc172)
      %35 = cir.const #cir.int<100> : !s32i loc(#loc173)
      %36 = cir.const #cir.int<1> : !s32i loc(#loc174)
      %37 = cir.binop(sub, %35, %36) nsw : !s32i loc(#loc173)
      %38 = cir.cast(integral, %37 : !s32i), !u64i loc(#loc173)
      %39 = cir.call @strncpy(%33, %34, %38) : (!cir.ptr<!s8i>, !cir.ptr<!s8i>, !u64i) -> !cir.ptr<!s8i> extra(#fn_attr) loc(#loc170)
      %40 = cir.const #cir.int<0> : !s32i loc(#loc175)
      %41 = cir.cast(integral, %40 : !s32i), !s8i loc(#loc175)
      %42 = cir.load %0 : !cir.ptr<!cir.ptr<!s8i>>, !cir.ptr<!s8i> loc(#loc176)
      %43 = cir.const #cir.int<100> : !s32i loc(#loc177)
      %44 = cir.const #cir.int<1> : !s32i loc(#loc178)
      %45 = cir.binop(sub, %43, %44) nsw : !s32i loc(#loc177)
      %46 = cir.ptr_stride(%42 : !cir.ptr<!s8i>, %45 : !s32i), !cir.ptr<!s8i> loc(#loc179)
      cir.store %41, %46 : !s8i, !cir.ptr<!s8i> loc(#loc238)
      %47 = cir.load %0 : !cir.ptr<!cir.ptr<!s8i>>, !cir.ptr<!s8i> loc(#loc180)
      cir.call @printLine(%47) : (!cir.ptr<!s8i>) -> () loc(#loc181)
    } loc(#loc234)
    cir.return loc(#loc138)
  } loc(#loc225)
} loc(#loc)
#loc = loc("/home/ladisgin/git_proj/juliet-c/testcases/CWE121_Stack_Based_Buffer_Overflow/s03/CWE121_Stack_Based_Buffer_Overflow__CWE805_char_alloca_ncpy_11.c":0:0)
#loc1 = loc("../../../testcasesupport/std_testcase_io.h":48:1)
#loc2 = loc("../../../testcasesupport/std_testcase_io.h":48:23)
#loc3 = loc("/usr/include/string.h":144:1)
#loc4 = loc("/usr/include/string.h":146:14)
#loc5 = loc("../../../testcasesupport/std_testcase_io.h":14:1)
#loc6 = loc("../../../testcasesupport/std_testcase_io.h":14:33)
#loc7 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE805_char_alloca_ncpy_11.c":23:1)
#loc8 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE805_char_alloca_ncpy_11.c":44:1)
#loc9 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE805_char_alloca_ncpy_11.c":25:5)
#loc10 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE805_char_alloca_ncpy_11.c":25:12)
#loc11 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE805_char_alloca_ncpy_11.c":26:5)
#loc12 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE805_char_alloca_ncpy_11.c":26:36)
#loc13 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE805_char_alloca_ncpy_11.c":27:5)
#loc14 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE805_char_alloca_ncpy_11.c":27:37)
#loc15 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE805_char_alloca_ncpy_11.c":28:5)
#loc16 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE805_char_alloca_ncpy_11.c":34:5)
#loc17 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE805_char_alloca_ncpy_11.c":28:8)
#loc18 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE805_char_alloca_ncpy_11.c":28:26)
#loc19 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE805_char_alloca_ncpy_11.c":29:5)
#loc20 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE805_char_alloca_ncpy_11.c":32:16)
#loc21 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE805_char_alloca_ncpy_11.c":32:9)
#loc22 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE805_char_alloca_ncpy_11.c":33:19)
#loc23 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE805_char_alloca_ncpy_11.c":33:9)
#loc24 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE805_char_alloca_ncpy_11.c":33:14)
#loc25 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE805_char_alloca_ncpy_11.c":33:15)
#loc26 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE805_char_alloca_ncpy_11.c":35:5)
#loc27 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE805_char_alloca_ncpy_11.c":43:5)
#loc28 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE805_char_alloca_ncpy_11.c":36:9)
#loc29 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE805_char_alloca_ncpy_11.c":36:24)
#loc30 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE805_char_alloca_ncpy_11.c":37:16)
#loc31 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE805_char_alloca_ncpy_11.c":37:24)
#loc32 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE805_char_alloca_ncpy_11.c":37:29)
#loc33 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE805_char_alloca_ncpy_11.c":37:33)
#loc34 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE805_char_alloca_ncpy_11.c":37:9)
#loc35 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE805_char_alloca_ncpy_11.c":37:34)
#loc36 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE805_char_alloca_ncpy_11.c":38:25)
#loc37 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE805_char_alloca_ncpy_11.c":38:16)
#loc38 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE805_char_alloca_ncpy_11.c":38:20)
#loc39 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE805_char_alloca_ncpy_11.c":38:9)
#loc40 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE805_char_alloca_ncpy_11.c":40:9)
#loc41 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE805_char_alloca_ncpy_11.c":40:17)
#loc42 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE805_char_alloca_ncpy_11.c":40:23)
#loc43 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE805_char_alloca_ncpy_11.c":40:31)
#loc44 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE805_char_alloca_ncpy_11.c":40:35)
#loc45 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE805_char_alloca_ncpy_11.c":41:23)
#loc46 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE805_char_alloca_ncpy_11.c":41:9)
#loc47 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE805_char_alloca_ncpy_11.c":41:14)
#loc48 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE805_char_alloca_ncpy_11.c":41:18)
#loc49 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE805_char_alloca_ncpy_11.c":41:19)
#loc50 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE805_char_alloca_ncpy_11.c":42:19)
#loc51 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE805_char_alloca_ncpy_11.c":42:9)
#loc52 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE805_char_alloca_ncpy_11.c":101:1)
#loc53 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE805_char_alloca_ncpy_11.c":105:1)
#loc54 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE805_char_alloca_ncpy_11.c":103:5)
#loc55 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE805_char_alloca_ncpy_11.c":103:14)
#loc56 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE805_char_alloca_ncpy_11.c":104:5)
#loc57 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE805_char_alloca_ncpy_11.c":104:14)
#loc58 = loc("/usr/include/stdlib.h":575:1)
#loc59 = loc("/usr/include/stdlib.h":575:41)
#loc60 = loc("/usr/include/time.h":76:1)
#loc61 = loc("/usr/include/time.h":76:38)
#loc62 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE805_char_alloca_ncpy_11.c":122:15)
#loc63 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE805_char_alloca_ncpy_11.c":124:15)
#loc64 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE805_char_alloca_ncpy_11.c":127:15)
#loc65 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE805_char_alloca_ncpy_11.c":129:15)
#loc66 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE805_char_alloca_ncpy_11.c":117:1)
#loc67 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE805_char_alloca_ncpy_11.c":132:1)
#loc72 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE805_char_alloca_ncpy_11.c":118:1)
#loc73 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE805_char_alloca_ncpy_11.c":120:27)
#loc74 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE805_char_alloca_ncpy_11.c":120:22)
#loc75 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE805_char_alloca_ncpy_11.c":120:5)
#loc76 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE805_char_alloca_ncpy_11.c":122:5)
#loc77 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE805_char_alloca_ncpy_11.c":123:5)
#loc78 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE805_char_alloca_ncpy_11.c":123:73)
#loc79 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE805_char_alloca_ncpy_11.c":124:5)
#loc80 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE805_char_alloca_ncpy_11.c":127:5)
#loc81 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE805_char_alloca_ncpy_11.c":128:5)
#loc82 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE805_char_alloca_ncpy_11.c":128:72)
#loc83 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE805_char_alloca_ncpy_11.c":129:5)
#loc84 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE805_char_alloca_ncpy_11.c":131:12)
#loc85 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE805_char_alloca_ncpy_11.c":131:5)
#loc86 = loc("../../../testcasesupport/std_testcase_io.h":50:1)
#loc87 = loc("../../../testcasesupport/std_testcase_io.h":50:24)
#loc88 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE805_char_alloca_ncpy_11.c":59:19)
#loc89 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE805_char_alloca_ncpy_11.c":51:1)
#loc90 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE805_char_alloca_ncpy_11.c":76:1)
#loc91 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE805_char_alloca_ncpy_11.c":53:5)
#loc92 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE805_char_alloca_ncpy_11.c":53:12)
#loc93 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE805_char_alloca_ncpy_11.c":54:5)
#loc94 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE805_char_alloca_ncpy_11.c":54:36)
#loc95 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE805_char_alloca_ncpy_11.c":55:5)
#loc96 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE805_char_alloca_ncpy_11.c":55:37)
#loc97 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE805_char_alloca_ncpy_11.c":56:5)
#loc98 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE805_char_alloca_ncpy_11.c":66:5)
#loc99 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE805_char_alloca_ncpy_11.c":56:8)
#loc100 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE805_char_alloca_ncpy_11.c":56:27)
#loc101 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE805_char_alloca_ncpy_11.c":57:5)
#loc102 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE805_char_alloca_ncpy_11.c":60:5)
#loc103 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE805_char_alloca_ncpy_11.c":62:5)
#loc104 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE805_char_alloca_ncpy_11.c":59:9)
#loc105 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE805_char_alloca_ncpy_11.c":64:16)
#loc106 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE805_char_alloca_ncpy_11.c":64:9)
#loc107 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE805_char_alloca_ncpy_11.c":65:19)
#loc108 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE805_char_alloca_ncpy_11.c":65:9)
#loc109 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE805_char_alloca_ncpy_11.c":65:14)
#loc110 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE805_char_alloca_ncpy_11.c":65:15)
#loc111 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE805_char_alloca_ncpy_11.c":67:5)
#loc112 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE805_char_alloca_ncpy_11.c":75:5)
#loc113 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE805_char_alloca_ncpy_11.c":68:9)
#loc114 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE805_char_alloca_ncpy_11.c":68:24)
#loc115 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE805_char_alloca_ncpy_11.c":69:16)
#loc116 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE805_char_alloca_ncpy_11.c":69:24)
#loc117 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE805_char_alloca_ncpy_11.c":69:29)
#loc118 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE805_char_alloca_ncpy_11.c":69:33)
#loc119 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE805_char_alloca_ncpy_11.c":69:9)
#loc120 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE805_char_alloca_ncpy_11.c":69:34)
#loc121 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE805_char_alloca_ncpy_11.c":70:25)
#loc122 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE805_char_alloca_ncpy_11.c":70:16)
#loc123 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE805_char_alloca_ncpy_11.c":70:20)
#loc124 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE805_char_alloca_ncpy_11.c":70:9)
#loc125 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE805_char_alloca_ncpy_11.c":72:9)
#loc126 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE805_char_alloca_ncpy_11.c":72:17)
#loc127 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE805_char_alloca_ncpy_11.c":72:23)
#loc128 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE805_char_alloca_ncpy_11.c":72:31)
#loc129 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE805_char_alloca_ncpy_11.c":72:35)
#loc130 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE805_char_alloca_ncpy_11.c":73:23)
#loc131 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE805_char_alloca_ncpy_11.c":73:9)
#loc132 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE805_char_alloca_ncpy_11.c":73:14)
#loc133 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE805_char_alloca_ncpy_11.c":73:18)
#loc134 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE805_char_alloca_ncpy_11.c":73:19)
#loc135 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE805_char_alloca_ncpy_11.c":74:19)
#loc136 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE805_char_alloca_ncpy_11.c":74:9)
#loc137 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE805_char_alloca_ncpy_11.c":79:1)
#loc138 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE805_char_alloca_ncpy_11.c":99:1)
#loc139 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE805_char_alloca_ncpy_11.c":81:5)
#loc140 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE805_char_alloca_ncpy_11.c":81:12)
#loc141 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE805_char_alloca_ncpy_11.c":82:5)
#loc142 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE805_char_alloca_ncpy_11.c":82:36)
#loc143 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE805_char_alloca_ncpy_11.c":83:5)
#loc144 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE805_char_alloca_ncpy_11.c":83:37)
#loc145 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE805_char_alloca_ncpy_11.c":84:5)
#loc146 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE805_char_alloca_ncpy_11.c":89:5)
#loc147 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE805_char_alloca_ncpy_11.c":84:8)
#loc148 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE805_char_alloca_ncpy_11.c":84:26)
#loc149 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE805_char_alloca_ncpy_11.c":85:5)
#loc150 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE805_char_alloca_ncpy_11.c":87:16)
#loc151 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE805_char_alloca_ncpy_11.c":87:9)
#loc152 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE805_char_alloca_ncpy_11.c":88:19)
#loc153 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE805_char_alloca_ncpy_11.c":88:9)
#loc154 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE805_char_alloca_ncpy_11.c":88:14)
#loc155 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE805_char_alloca_ncpy_11.c":88:15)
#loc156 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE805_char_alloca_ncpy_11.c":90:5)
#loc157 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE805_char_alloca_ncpy_11.c":98:5)
#loc158 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE805_char_alloca_ncpy_11.c":91:9)
#loc159 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE805_char_alloca_ncpy_11.c":91:24)
#loc160 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE805_char_alloca_ncpy_11.c":92:16)
#loc161 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE805_char_alloca_ncpy_11.c":92:24)
#loc162 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE805_char_alloca_ncpy_11.c":92:29)
#loc163 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE805_char_alloca_ncpy_11.c":92:33)
#loc164 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE805_char_alloca_ncpy_11.c":92:9)
#loc165 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE805_char_alloca_ncpy_11.c":92:34)
#loc166 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE805_char_alloca_ncpy_11.c":93:25)
#loc167 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE805_char_alloca_ncpy_11.c":93:16)
#loc168 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE805_char_alloca_ncpy_11.c":93:20)
#loc169 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE805_char_alloca_ncpy_11.c":93:9)
#loc170 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE805_char_alloca_ncpy_11.c":95:9)
#loc171 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE805_char_alloca_ncpy_11.c":95:17)
#loc172 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE805_char_alloca_ncpy_11.c":95:23)
#loc173 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE805_char_alloca_ncpy_11.c":95:31)
#loc174 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE805_char_alloca_ncpy_11.c":95:35)
#loc175 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE805_char_alloca_ncpy_11.c":96:23)
#loc176 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE805_char_alloca_ncpy_11.c":96:9)
#loc177 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE805_char_alloca_ncpy_11.c":96:14)
#loc178 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE805_char_alloca_ncpy_11.c":96:18)
#loc179 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE805_char_alloca_ncpy_11.c":96:19)
#loc180 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE805_char_alloca_ncpy_11.c":97:19)
#loc181 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE805_char_alloca_ncpy_11.c":97:9)
#loc182 = loc(fused[#loc1, #loc2])
#loc183 = loc(fused[#loc3, #loc4])
#loc184 = loc(fused[#loc5, #loc6])
#loc185 = loc(fused[#loc7, #loc8])
#loc186 = loc(fused[#loc9, #loc10])
#loc187 = loc(fused[#loc11, #loc12])
#loc188 = loc(fused[#loc13, #loc14])
#loc189 = loc(fused[#loc15, #loc16])
#loc190 = loc(fused[#loc17, #loc18])
#loc191 = loc(fused[#loc19, #loc16])
#loc192 = loc(fused[#loc21, #loc20])
#loc193 = loc(fused[#loc23, #loc22])
#loc194 = loc(fused[#loc26, #loc27])
#loc195 = loc(fused[#loc28, #loc29])
#loc196 = loc(fused[#loc34, #loc35])
#loc197 = loc(fused[#loc39, #loc36])
#loc198 = loc(fused[#loc46, #loc45])
#loc199 = loc(fused[#loc52, #loc53])
#loc200 = loc(fused[#loc54, #loc55])
#loc201 = loc(fused[#loc56, #loc57])
#loc202 = loc(fused[#loc58, #loc59])
#loc203 = loc(fused[#loc60, #loc61])
#loc204 = loc(fused[#loc66, #loc67])
#loc207 = loc(fused[#loc77, #loc78])
#loc208 = loc(fused[#loc81, #loc82])
#loc209 = loc(fused[#loc85, #loc84])
#loc210 = loc(fused[#loc86, #loc87])
#loc211 = loc(fused[#loc89, #loc90])
#loc212 = loc(fused[#loc91, #loc92])
#loc213 = loc(fused[#loc93, #loc94])
#loc214 = loc(fused[#loc95, #loc96])
#loc215 = loc(fused[#loc97, #loc98])
#loc216 = loc(fused[#loc99, #loc100])
#loc217 = loc(fused[#loc101, #loc102, #loc103, #loc98])
#loc218 = loc(fused[#loc106, #loc105])
#loc219 = loc(fused[#loc108, #loc107])
#loc220 = loc(fused[#loc111, #loc112])
#loc221 = loc(fused[#loc113, #loc114])
#loc222 = loc(fused[#loc119, #loc120])
#loc223 = loc(fused[#loc124, #loc121])
#loc224 = loc(fused[#loc131, #loc130])
#loc225 = loc(fused[#loc137, #loc138])
#loc226 = loc(fused[#loc139, #loc140])
#loc227 = loc(fused[#loc141, #loc142])
#loc228 = loc(fused[#loc143, #loc144])
#loc229 = loc(fused[#loc145, #loc146])
#loc230 = loc(fused[#loc147, #loc148])
#loc231 = loc(fused[#loc149, #loc146])
#loc232 = loc(fused[#loc151, #loc150])
#loc233 = loc(fused[#loc153, #loc152])
#loc234 = loc(fused[#loc156, #loc157])
#loc235 = loc(fused[#loc158, #loc159])
#loc236 = loc(fused[#loc164, #loc165])
#loc237 = loc(fused[#loc169, #loc166])
#loc238 = loc(fused[#loc176, #loc175])
