!s32i = !cir.int<s, 32>
!s64i = !cir.int<s, 64>
!s8i = !cir.int<s, 8>
!u32i = !cir.int<u, 32>
!u64i = !cir.int<u, 64>
!u8i = !cir.int<u, 8>
!void = !cir.void
#fn_attr = #cir<extra({inline = #cir.inline<no>, nothrow = #cir.nothrow, optnone = #cir.optnone})>
#fn_attr1 = #cir<extra({nothrow = #cir.nothrow})>
#loc48 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE131_memcpy_02.c":99:10)
#loc49 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE131_memcpy_02.c":99:14)
#loc50 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE131_memcpy_02.c":99:20)
#loc51 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE131_memcpy_02.c":99:32)
#loc143 = loc(fused[#loc48, #loc49])
#loc144 = loc(fused[#loc50, #loc51])
module @"/home/ladisgin/git_proj/juliet-c/testcases/CWE121_Stack_Based_Buffer_Overflow/s01/CWE121_Stack_Based_Buffer_Overflow__CWE131_memcpy_02.c" attributes {cir.lang = #cir.lang<c>, cir.sob = #cir.signed_overflow_behavior<undefined>, cir.triple = "x86_64-unknown-linux-gnu", dlti.dl_spec = #dlti.dl_spec<i64 = dense<64> : vector<2xi64>, !llvm.ptr<272> = dense<64> : vector<4xi64>, !llvm.ptr<271> = dense<32> : vector<4xi64>, !llvm.ptr<270> = dense<32> : vector<4xi64>, f128 = dense<128> : vector<2xi64>, f64 = dense<64> : vector<2xi64>, f16 = dense<16> : vector<2xi64>, i32 = dense<32> : vector<2xi64>, i16 = dense<16> : vector<2xi64>, i8 = dense<8> : vector<2xi64>, i1 = dense<8> : vector<2xi64>, !llvm.ptr = dense<64> : vector<4xi64>, f80 = dense<128> : vector<2xi64>, i128 = dense<128> : vector<2xi64>, "dlti.endianness" = "little", "dlti.stack_alignment" = 128 : i64>} {
  cir.func private @printIntLine(!s32i) loc(#loc124)
  cir.func no_proto @CWE121_Stack_Based_Buffer_Overflow__CWE131_memcpy_02_bad() extra(#fn_attr) {
    %0 = cir.alloca !cir.ptr<!s32i>, !cir.ptr<!cir.ptr<!s32i>>, ["data"] {alignment = 8 : i64} loc(#loc126)
    %1 = cir.const #cir.ptr<null> : !cir.ptr<!s32i> loc(#loc7)
    cir.store %1, %0 : !cir.ptr<!s32i>, !cir.ptr<!cir.ptr<!s32i>> loc(#loc127)
    cir.scope {
      %2 = cir.const #cir.int<1> : !s32i loc(#loc11)
      %3 = cir.cast(int_to_bool, %2 : !s32i), !cir.bool loc(#loc11)
      cir.if %3 {
        %4 = cir.const #cir.int<10> : !s32i loc(#loc13)
        %5 = cir.cast(integral, %4 : !s32i), !u64i loc(#loc13)
        %6 = cir.alloca !u8i, !cir.ptr<!u8i>, %5 : !u64i, ["bi_alloca"] {alignment = 16 : i64} loc(#loc13)
        %7 = cir.cast(bitcast, %6 : !cir.ptr<!u8i>), !cir.ptr<!void> loc(#loc13)
        %8 = cir.cast(bitcast, %7 : !cir.ptr<!void>), !cir.ptr<!s32i> loc(#loc13)
        cir.store %8, %0 : !cir.ptr<!s32i>, !cir.ptr<!cir.ptr<!s32i>> loc(#loc130)
      } loc(#loc129)
    } loc(#loc128)
    cir.scope {
      %2 = cir.alloca !cir.array<!s32i x 10>, !cir.ptr<!cir.array<!s32i x 10>>, ["source"] {alignment = 16 : i64} loc(#loc132)
      %3 = cir.const #cir.zero : !cir.array<!s32i x 10> loc(#loc132)
      cir.store %3, %2 : !cir.array<!s32i x 10>, !cir.ptr<!cir.array<!s32i x 10>> loc(#loc132)
      %4 = cir.load %0 : !cir.ptr<!cir.ptr<!s32i>>, !cir.ptr<!s32i> loc(#loc19)
      %5 = cir.cast(bitcast, %4 : !cir.ptr<!s32i>), !cir.ptr<!void> loc(#loc19)
      %6 = cir.cast(array_to_ptrdecay, %2 : !cir.ptr<!cir.array<!s32i x 10>>), !cir.ptr<!s32i> loc(#loc20)
      %7 = cir.cast(bitcast, %6 : !cir.ptr<!s32i>), !cir.ptr<!void> loc(#loc20)
      %8 = cir.const #cir.int<10> : !s32i loc(#loc21)
      %9 = cir.cast(integral, %8 : !s32i), !u64i loc(#loc21)
      %10 = cir.const #cir.int<4> : !u64i loc(#loc133)
      %11 = cir.binop(mul, %9, %10) : !u64i loc(#loc134)
      cir.libc.memcpy %11 bytes from %7 to %5 : !u64i, !cir.ptr<!void> -> !cir.ptr<!void> loc(#loc135)
      %12 = cir.load %0 : !cir.ptr<!cir.ptr<!s32i>>, !cir.ptr<!s32i> loc(#loc26)
      %13 = cir.const #cir.int<0> : !s32i loc(#loc27)
      %14 = cir.ptr_stride(%12 : !cir.ptr<!s32i>, %13 : !s32i), !cir.ptr<!s32i> loc(#loc28)
      %15 = cir.load %14 : !cir.ptr<!s32i>, !s32i loc(#loc26)
      cir.call @printIntLine(%15) : (!s32i) -> () loc(#loc29)
    } loc(#loc131)
    cir.return loc(#loc4)
  } loc(#loc125)
  cir.func no_proto @CWE121_Stack_Based_Buffer_Overflow__CWE131_memcpy_02_good() extra(#fn_attr) {
    %0 = cir.get_global @goodG2B1 : !cir.ptr<!cir.func<!void ()>> loc(#loc137)
    cir.call %0() : (!cir.ptr<!cir.func<!void ()>>) -> () loc(#loc32)
    %1 = cir.get_global @goodG2B2 : !cir.ptr<!cir.func<!void ()>> loc(#loc138)
    cir.call %1() : (!cir.ptr<!cir.func<!void ()>>) -> () loc(#loc34)
    cir.return loc(#loc31)
  } loc(#loc136)
  cir.func private @srand(!u32i) extra(#fn_attr1) loc(#loc139)
  cir.func private @time(!cir.ptr<!s64i>) -> !s64i extra(#fn_attr1) loc(#loc140)
  cir.func private @printLine(!cir.ptr<!s8i>) loc(#loc141)
  cir.global "private" constant cir_private dsolocal @".str" = #cir.const_array<"Calling good()...\00" : !cir.array<!s8i x 18>> : !cir.array<!s8i x 18> {alignment = 1 : i64} loc(#loc42)
  cir.global "private" constant cir_private dsolocal @".str.1" = #cir.const_array<"Finished good()\00" : !cir.array<!s8i x 16>> : !cir.array<!s8i x 16> {alignment = 1 : i64} loc(#loc43)
  cir.global "private" constant cir_private dsolocal @".str.2" = #cir.const_array<"Calling bad()...\00" : !cir.array<!s8i x 17>> : !cir.array<!s8i x 17> {alignment = 1 : i64} loc(#loc44)
  cir.global "private" constant cir_private dsolocal @".str.3" = #cir.const_array<"Finished bad()\00" : !cir.array<!s8i x 15>> : !cir.array<!s8i x 15> {alignment = 1 : i64} loc(#loc45)
  cir.func @main(%arg0: !s32i loc(fused[#loc48, #loc49]), %arg1: !cir.ptr<!cir.ptr<!s8i>> loc(fused[#loc50, #loc51])) -> !s32i extra(#fn_attr) {
    %0 = cir.alloca !s32i, !cir.ptr<!s32i>, ["argc", init] {alignment = 4 : i64} loc(#loc143)
    %1 = cir.alloca !cir.ptr<!cir.ptr<!s8i>>, !cir.ptr<!cir.ptr<!cir.ptr<!s8i>>>, ["argv", init] {alignment = 8 : i64} loc(#loc144)
    %2 = cir.alloca !s32i, !cir.ptr<!s32i>, ["__retval"] {alignment = 4 : i64} loc(#loc47)
    cir.store %arg0, %0 : !s32i, !cir.ptr<!s32i> loc(#loc52)
    cir.store %arg1, %1 : !cir.ptr<!cir.ptr<!s8i>>, !cir.ptr<!cir.ptr<!cir.ptr<!s8i>>> loc(#loc52)
    %3 = cir.const #cir.ptr<null> : !cir.ptr<!s64i> loc(#loc53)
    %4 = cir.call @time(%3) : (!cir.ptr<!s64i>) -> !s64i extra(#fn_attr1) loc(#loc54)
    %5 = cir.cast(integral, %4 : !s64i), !u32i loc(#loc54)
    cir.call @srand(%5) : (!u32i) -> () extra(#fn_attr1) loc(#loc55)
    %6 = cir.get_global @".str" : !cir.ptr<!cir.array<!s8i x 18>> loc(#loc42)
    %7 = cir.cast(array_to_ptrdecay, %6 : !cir.ptr<!cir.array<!s8i x 18>>), !cir.ptr<!s8i> loc(#loc42)
    cir.call @printLine(%7) : (!cir.ptr<!s8i>) -> () loc(#loc56)
    %8 = cir.get_global @CWE121_Stack_Based_Buffer_Overflow__CWE131_memcpy_02_good : !cir.ptr<!cir.func<!void ()>> loc(#loc145)
    cir.call @CWE121_Stack_Based_Buffer_Overflow__CWE131_memcpy_02_good() : () -> () loc(#loc57)
    %9 = cir.get_global @".str.1" : !cir.ptr<!cir.array<!s8i x 16>> loc(#loc43)
    %10 = cir.cast(array_to_ptrdecay, %9 : !cir.ptr<!cir.array<!s8i x 16>>), !cir.ptr<!s8i> loc(#loc43)
    cir.call @printLine(%10) : (!cir.ptr<!s8i>) -> () loc(#loc59)
    %11 = cir.get_global @".str.2" : !cir.ptr<!cir.array<!s8i x 17>> loc(#loc44)
    %12 = cir.cast(array_to_ptrdecay, %11 : !cir.ptr<!cir.array<!s8i x 17>>), !cir.ptr<!s8i> loc(#loc44)
    cir.call @printLine(%12) : (!cir.ptr<!s8i>) -> () loc(#loc60)
    %13 = cir.get_global @CWE121_Stack_Based_Buffer_Overflow__CWE131_memcpy_02_bad : !cir.ptr<!cir.func<!void ()>> loc(#loc146)
    cir.call @CWE121_Stack_Based_Buffer_Overflow__CWE131_memcpy_02_bad() : () -> () loc(#loc61)
    %14 = cir.get_global @".str.3" : !cir.ptr<!cir.array<!s8i x 15>> loc(#loc45)
    %15 = cir.cast(array_to_ptrdecay, %14 : !cir.ptr<!cir.array<!s8i x 15>>), !cir.ptr<!s8i> loc(#loc45)
    cir.call @printLine(%15) : (!cir.ptr<!s8i>) -> () loc(#loc63)
    %16 = cir.const #cir.int<0> : !s32i loc(#loc64)
    cir.store %16, %2 : !s32i, !cir.ptr<!s32i> loc(#loc147)
    %17 = cir.load %2 : !cir.ptr<!s32i>, !s32i loc(#loc147)
    cir.return %17 : !s32i loc(#loc147)
  } loc(#loc142)
  cir.global "private" constant cir_private dsolocal @".str.4" = #cir.const_array<"Benign, fixed string\00" : !cir.array<!s8i x 21>> : !cir.array<!s8i x 21> {alignment = 1 : i64} loc(#loc66)
  cir.func no_proto internal private @goodG2B1() extra(#fn_attr) {
    %0 = cir.alloca !cir.ptr<!s32i>, !cir.ptr<!cir.ptr<!s32i>>, ["data"] {alignment = 8 : i64} loc(#loc149)
    %1 = cir.const #cir.ptr<null> : !cir.ptr<!s32i> loc(#loc71)
    cir.store %1, %0 : !cir.ptr<!s32i>, !cir.ptr<!cir.ptr<!s32i>> loc(#loc150)
    cir.scope {
      %2 = cir.const #cir.int<0> : !s32i loc(#loc75)
      %3 = cir.cast(int_to_bool, %2 : !s32i), !cir.bool loc(#loc75)
      cir.if %3 {
        %4 = cir.get_global @".str.4" : !cir.ptr<!cir.array<!s8i x 21>> loc(#loc66)
        %5 = cir.cast(array_to_ptrdecay, %4 : !cir.ptr<!cir.array<!s8i x 21>>), !cir.ptr<!s8i> loc(#loc66)
        cir.call @printLine(%5) : (!cir.ptr<!s8i>) -> () loc(#loc79)
      } else {
        %4 = cir.const #cir.int<10> : !s32i loc(#loc80)
        %5 = cir.cast(integral, %4 : !s32i), !u64i loc(#loc80)
        %6 = cir.const #cir.int<4> : !u64i loc(#loc80)
        %7 = cir.binop(mul, %5, %6) : !u64i loc(#loc80)
        %8 = cir.alloca !u8i, !cir.ptr<!u8i>, %7 : !u64i, ["bi_alloca"] {alignment = 16 : i64} loc(#loc80)
        %9 = cir.cast(bitcast, %8 : !cir.ptr<!u8i>), !cir.ptr<!void> loc(#loc80)
        %10 = cir.cast(bitcast, %9 : !cir.ptr<!void>), !cir.ptr<!s32i> loc(#loc80)
        cir.store %10, %0 : !cir.ptr<!s32i>, !cir.ptr<!cir.ptr<!s32i>> loc(#loc153)
      } loc(#loc152)
    } loc(#loc151)
    cir.scope {
      %2 = cir.alloca !cir.array<!s32i x 10>, !cir.ptr<!cir.array<!s32i x 10>>, ["source"] {alignment = 16 : i64} loc(#loc155)
      %3 = cir.const #cir.zero : !cir.array<!s32i x 10> loc(#loc155)
      cir.store %3, %2 : !cir.array<!s32i x 10>, !cir.ptr<!cir.array<!s32i x 10>> loc(#loc155)
      %4 = cir.load %0 : !cir.ptr<!cir.ptr<!s32i>>, !cir.ptr<!s32i> loc(#loc86)
      %5 = cir.cast(bitcast, %4 : !cir.ptr<!s32i>), !cir.ptr<!void> loc(#loc86)
      %6 = cir.cast(array_to_ptrdecay, %2 : !cir.ptr<!cir.array<!s32i x 10>>), !cir.ptr<!s32i> loc(#loc87)
      %7 = cir.cast(bitcast, %6 : !cir.ptr<!s32i>), !cir.ptr<!void> loc(#loc87)
      %8 = cir.const #cir.int<10> : !s32i loc(#loc88)
      %9 = cir.cast(integral, %8 : !s32i), !u64i loc(#loc88)
      %10 = cir.const #cir.int<4> : !u64i loc(#loc156)
      %11 = cir.binop(mul, %9, %10) : !u64i loc(#loc157)
      cir.libc.memcpy %11 bytes from %7 to %5 : !u64i, !cir.ptr<!void> -> !cir.ptr<!void> loc(#loc158)
      %12 = cir.load %0 : !cir.ptr<!cir.ptr<!s32i>>, !cir.ptr<!s32i> loc(#loc93)
      %13 = cir.const #cir.int<0> : !s32i loc(#loc94)
      %14 = cir.ptr_stride(%12 : !cir.ptr<!s32i>, %13 : !s32i), !cir.ptr<!s32i> loc(#loc95)
      %15 = cir.load %14 : !cir.ptr<!s32i>, !s32i loc(#loc93)
      cir.call @printIntLine(%15) : (!s32i) -> () loc(#loc96)
    } loc(#loc154)
    cir.return loc(#loc68)
  } loc(#loc148)
  cir.func no_proto internal private @goodG2B2() extra(#fn_attr) {
    %0 = cir.alloca !cir.ptr<!s32i>, !cir.ptr<!cir.ptr<!s32i>>, ["data"] {alignment = 8 : i64} loc(#loc160)
    %1 = cir.const #cir.ptr<null> : !cir.ptr<!s32i> loc(#loc101)
    cir.store %1, %0 : !cir.ptr<!s32i>, !cir.ptr<!cir.ptr<!s32i>> loc(#loc161)
    cir.scope {
      %2 = cir.const #cir.int<1> : !s32i loc(#loc105)
      %3 = cir.cast(int_to_bool, %2 : !s32i), !cir.bool loc(#loc105)
      cir.if %3 {
        %4 = cir.const #cir.int<10> : !s32i loc(#loc107)
        %5 = cir.cast(integral, %4 : !s32i), !u64i loc(#loc107)
        %6 = cir.const #cir.int<4> : !u64i loc(#loc107)
        %7 = cir.binop(mul, %5, %6) : !u64i loc(#loc107)
        %8 = cir.alloca !u8i, !cir.ptr<!u8i>, %7 : !u64i, ["bi_alloca"] {alignment = 16 : i64} loc(#loc107)
        %9 = cir.cast(bitcast, %8 : !cir.ptr<!u8i>), !cir.ptr<!void> loc(#loc107)
        %10 = cir.cast(bitcast, %9 : !cir.ptr<!void>), !cir.ptr<!s32i> loc(#loc107)
        cir.store %10, %0 : !cir.ptr<!s32i>, !cir.ptr<!cir.ptr<!s32i>> loc(#loc164)
      } loc(#loc163)
    } loc(#loc162)
    cir.scope {
      %2 = cir.alloca !cir.array<!s32i x 10>, !cir.ptr<!cir.array<!s32i x 10>>, ["source"] {alignment = 16 : i64} loc(#loc166)
      %3 = cir.const #cir.zero : !cir.array<!s32i x 10> loc(#loc166)
      cir.store %3, %2 : !cir.array<!s32i x 10>, !cir.ptr<!cir.array<!s32i x 10>> loc(#loc166)
      %4 = cir.load %0 : !cir.ptr<!cir.ptr<!s32i>>, !cir.ptr<!s32i> loc(#loc113)
      %5 = cir.cast(bitcast, %4 : !cir.ptr<!s32i>), !cir.ptr<!void> loc(#loc113)
      %6 = cir.cast(array_to_ptrdecay, %2 : !cir.ptr<!cir.array<!s32i x 10>>), !cir.ptr<!s32i> loc(#loc114)
      %7 = cir.cast(bitcast, %6 : !cir.ptr<!s32i>), !cir.ptr<!void> loc(#loc114)
      %8 = cir.const #cir.int<10> : !s32i loc(#loc115)
      %9 = cir.cast(integral, %8 : !s32i), !u64i loc(#loc115)
      %10 = cir.const #cir.int<4> : !u64i loc(#loc167)
      %11 = cir.binop(mul, %9, %10) : !u64i loc(#loc168)
      cir.libc.memcpy %11 bytes from %7 to %5 : !u64i, !cir.ptr<!void> -> !cir.ptr<!void> loc(#loc169)
      %12 = cir.load %0 : !cir.ptr<!cir.ptr<!s32i>>, !cir.ptr<!s32i> loc(#loc120)
      %13 = cir.const #cir.int<0> : !s32i loc(#loc121)
      %14 = cir.ptr_stride(%12 : !cir.ptr<!s32i>, %13 : !s32i), !cir.ptr<!s32i> loc(#loc122)
      %15 = cir.load %14 : !cir.ptr<!s32i>, !s32i loc(#loc120)
      cir.call @printIntLine(%15) : (!s32i) -> () loc(#loc123)
    } loc(#loc165)
    cir.return loc(#loc98)
  } loc(#loc159)
} loc(#loc)
#loc = loc("/home/ladisgin/git_proj/juliet-c/testcases/CWE121_Stack_Based_Buffer_Overflow/s01/CWE121_Stack_Based_Buffer_Overflow__CWE131_memcpy_02.c":0:0)
#loc1 = loc("../../../testcasesupport/std_testcase_io.h":18:1)
#loc2 = loc("../../../testcasesupport/std_testcase_io.h":18:33)
#loc3 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE131_memcpy_02.c":21:1)
#loc4 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE131_memcpy_02.c":36:1)
#loc5 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE131_memcpy_02.c":23:5)
#loc6 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE131_memcpy_02.c":23:11)
#loc7 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE131_memcpy_02.c":24:12)
#loc8 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE131_memcpy_02.c":24:5)
#loc9 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE131_memcpy_02.c":25:5)
#loc10 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE131_memcpy_02.c":29:5)
#loc11 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE131_memcpy_02.c":25:8)
#loc12 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE131_memcpy_02.c":26:5)
#loc13 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE131_memcpy_02.c":28:23)
#loc14 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE131_memcpy_02.c":28:9)
#loc15 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE131_memcpy_02.c":30:5)
#loc16 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE131_memcpy_02.c":35:5)
#loc17 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE131_memcpy_02.c":31:9)
#loc18 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE131_memcpy_02.c":31:28)
#loc19 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE131_memcpy_02.c":33:16)
#loc20 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE131_memcpy_02.c":33:22)
#loc21 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE131_memcpy_02.c":33:30)
#loc22 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE131_memcpy_02.c":33:33)
#loc23 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE131_memcpy_02.c":33:43)
#loc24 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE131_memcpy_02.c":33:9)
#loc25 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE131_memcpy_02.c":33:44)
#loc26 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE131_memcpy_02.c":34:22)
#loc27 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE131_memcpy_02.c":34:27)
#loc28 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE131_memcpy_02.c":34:28)
#loc29 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE131_memcpy_02.c":34:9)
#loc30 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE131_memcpy_02.c":83:1)
#loc31 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE131_memcpy_02.c":87:1)
#loc32 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE131_memcpy_02.c":85:5)
#loc33 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE131_memcpy_02.c":85:14)
#loc34 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE131_memcpy_02.c":86:5)
#loc35 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE131_memcpy_02.c":86:14)
#loc36 = loc("/usr/include/stdlib.h":575:1)
#loc37 = loc("/usr/include/stdlib.h":575:41)
#loc38 = loc("/usr/include/time.h":76:1)
#loc39 = loc("/usr/include/time.h":76:38)
#loc40 = loc("../../../testcasesupport/std_testcase_io.h":14:1)
#loc41 = loc("../../../testcasesupport/std_testcase_io.h":14:33)
#loc42 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE131_memcpy_02.c":104:15)
#loc43 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE131_memcpy_02.c":106:15)
#loc44 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE131_memcpy_02.c":109:15)
#loc45 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE131_memcpy_02.c":111:15)
#loc46 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE131_memcpy_02.c":99:1)
#loc47 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE131_memcpy_02.c":114:1)
#loc52 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE131_memcpy_02.c":100:1)
#loc53 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE131_memcpy_02.c":102:27)
#loc54 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE131_memcpy_02.c":102:22)
#loc55 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE131_memcpy_02.c":102:5)
#loc56 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE131_memcpy_02.c":104:5)
#loc57 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE131_memcpy_02.c":105:5)
#loc58 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE131_memcpy_02.c":105:63)
#loc59 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE131_memcpy_02.c":106:5)
#loc60 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE131_memcpy_02.c":109:5)
#loc61 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE131_memcpy_02.c":110:5)
#loc62 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE131_memcpy_02.c":110:62)
#loc63 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE131_memcpy_02.c":111:5)
#loc64 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE131_memcpy_02.c":113:12)
#loc65 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE131_memcpy_02.c":113:5)
#loc66 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE131_memcpy_02.c":50:19)
#loc67 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE131_memcpy_02.c":43:1)
#loc68 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE131_memcpy_02.c":63:1)
#loc69 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE131_memcpy_02.c":45:5)
#loc70 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE131_memcpy_02.c":45:11)
#loc71 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE131_memcpy_02.c":46:12)
#loc72 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE131_memcpy_02.c":46:5)
#loc73 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE131_memcpy_02.c":47:5)
#loc74 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE131_memcpy_02.c":56:5)
#loc75 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE131_memcpy_02.c":47:8)
#loc76 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE131_memcpy_02.c":48:5)
#loc77 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE131_memcpy_02.c":51:5)
#loc78 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE131_memcpy_02.c":53:5)
#loc79 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE131_memcpy_02.c":50:9)
#loc80 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE131_memcpy_02.c":55:23)
#loc81 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE131_memcpy_02.c":55:9)
#loc82 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE131_memcpy_02.c":57:5)
#loc83 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE131_memcpy_02.c":62:5)
#loc84 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE131_memcpy_02.c":58:9)
#loc85 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE131_memcpy_02.c":58:28)
#loc86 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE131_memcpy_02.c":60:16)
#loc87 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE131_memcpy_02.c":60:22)
#loc88 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE131_memcpy_02.c":60:30)
#loc89 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE131_memcpy_02.c":60:33)
#loc90 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE131_memcpy_02.c":60:43)
#loc91 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE131_memcpy_02.c":60:9)
#loc92 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE131_memcpy_02.c":60:44)
#loc93 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE131_memcpy_02.c":61:22)
#loc94 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE131_memcpy_02.c":61:27)
#loc95 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE131_memcpy_02.c":61:28)
#loc96 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE131_memcpy_02.c":61:9)
#loc97 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE131_memcpy_02.c":66:1)
#loc98 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE131_memcpy_02.c":81:1)
#loc99 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE131_memcpy_02.c":68:5)
#loc100 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE131_memcpy_02.c":68:11)
#loc101 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE131_memcpy_02.c":69:12)
#loc102 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE131_memcpy_02.c":69:5)
#loc103 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE131_memcpy_02.c":70:5)
#loc104 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE131_memcpy_02.c":74:5)
#loc105 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE131_memcpy_02.c":70:8)
#loc106 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE131_memcpy_02.c":71:5)
#loc107 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE131_memcpy_02.c":73:23)
#loc108 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE131_memcpy_02.c":73:9)
#loc109 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE131_memcpy_02.c":75:5)
#loc110 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE131_memcpy_02.c":80:5)
#loc111 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE131_memcpy_02.c":76:9)
#loc112 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE131_memcpy_02.c":76:28)
#loc113 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE131_memcpy_02.c":78:16)
#loc114 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE131_memcpy_02.c":78:22)
#loc115 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE131_memcpy_02.c":78:30)
#loc116 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE131_memcpy_02.c":78:33)
#loc117 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE131_memcpy_02.c":78:43)
#loc118 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE131_memcpy_02.c":78:9)
#loc119 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE131_memcpy_02.c":78:44)
#loc120 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE131_memcpy_02.c":79:22)
#loc121 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE131_memcpy_02.c":79:27)
#loc122 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE131_memcpy_02.c":79:28)
#loc123 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE131_memcpy_02.c":79:9)
#loc124 = loc(fused[#loc1, #loc2])
#loc125 = loc(fused[#loc3, #loc4])
#loc126 = loc(fused[#loc5, #loc6])
#loc127 = loc(fused[#loc8, #loc7])
#loc128 = loc(fused[#loc9, #loc10])
#loc129 = loc(fused[#loc12, #loc10])
#loc130 = loc(fused[#loc14, #loc13])
#loc131 = loc(fused[#loc15, #loc16])
#loc132 = loc(fused[#loc17, #loc18])
#loc133 = loc(fused[#loc22, #loc23])
#loc134 = loc(fused[#loc21, #loc23])
#loc135 = loc(fused[#loc24, #loc25])
#loc136 = loc(fused[#loc30, #loc31])
#loc137 = loc(fused[#loc32, #loc33])
#loc138 = loc(fused[#loc34, #loc35])
#loc139 = loc(fused[#loc36, #loc37])
#loc140 = loc(fused[#loc38, #loc39])
#loc141 = loc(fused[#loc40, #loc41])
#loc142 = loc(fused[#loc46, #loc47])
#loc145 = loc(fused[#loc57, #loc58])
#loc146 = loc(fused[#loc61, #loc62])
#loc147 = loc(fused[#loc65, #loc64])
#loc148 = loc(fused[#loc67, #loc68])
#loc149 = loc(fused[#loc69, #loc70])
#loc150 = loc(fused[#loc72, #loc71])
#loc151 = loc(fused[#loc73, #loc74])
#loc152 = loc(fused[#loc76, #loc77, #loc78, #loc74])
#loc153 = loc(fused[#loc81, #loc80])
#loc154 = loc(fused[#loc82, #loc83])
#loc155 = loc(fused[#loc84, #loc85])
#loc156 = loc(fused[#loc89, #loc90])
#loc157 = loc(fused[#loc88, #loc90])
#loc158 = loc(fused[#loc91, #loc92])
#loc159 = loc(fused[#loc97, #loc98])
#loc160 = loc(fused[#loc99, #loc100])
#loc161 = loc(fused[#loc102, #loc101])
#loc162 = loc(fused[#loc103, #loc104])
#loc163 = loc(fused[#loc106, #loc104])
#loc164 = loc(fused[#loc108, #loc107])
#loc165 = loc(fused[#loc109, #loc110])
#loc166 = loc(fused[#loc111, #loc112])
#loc167 = loc(fused[#loc116, #loc117])
#loc168 = loc(fused[#loc115, #loc117])
#loc169 = loc(fused[#loc118, #loc119])
