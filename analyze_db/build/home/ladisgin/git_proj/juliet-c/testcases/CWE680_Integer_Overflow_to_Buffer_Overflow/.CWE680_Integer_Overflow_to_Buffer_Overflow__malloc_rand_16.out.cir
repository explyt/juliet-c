!s32i = !cir.int<s, 32>
!s64i = !cir.int<s, 64>
!s8i = !cir.int<s, 8>
!u32i = !cir.int<u, 32>
!u64i = !cir.int<u, 64>
!void = !cir.void
#fn_attr = #cir<extra({nothrow = #cir.nothrow})>
#fn_attr1 = #cir<extra({inline = #cir.inline<no>, nothrow = #cir.nothrow, optnone = #cir.optnone})>
#loc25 = loc("CWE680_Integer_Overflow_to_Buffer_Overflow__malloc_rand_16.c":29:16)
#loc80 = loc("CWE680_Integer_Overflow_to_Buffer_Overflow__malloc_rand_16.c":95:10)
#loc81 = loc("CWE680_Integer_Overflow_to_Buffer_Overflow__malloc_rand_16.c":95:14)
#loc82 = loc("CWE680_Integer_Overflow_to_Buffer_Overflow__malloc_rand_16.c":95:20)
#loc83 = loc("CWE680_Integer_Overflow_to_Buffer_Overflow__malloc_rand_16.c":95:32)
#loc183 = loc(fused[#loc80, #loc81])
#loc184 = loc(fused[#loc82, #loc83])
module @"/home/ladisgin/git_proj/juliet-c/testcases/CWE680_Integer_Overflow_to_Buffer_Overflow/CWE680_Integer_Overflow_to_Buffer_Overflow__malloc_rand_16.c" attributes {cir.lang = #cir.lang<c>, cir.sob = #cir.signed_overflow_behavior<undefined>, cir.triple = "x86_64-unknown-linux-gnu", dlti.dl_spec = #dlti.dl_spec<!llvm.ptr = dense<64> : vector<4xi64>, f80 = dense<128> : vector<2xi64>, i64 = dense<64> : vector<2xi64>, i128 = dense<128> : vector<2xi64>, !llvm.ptr<272> = dense<64> : vector<4xi64>, !llvm.ptr<271> = dense<32> : vector<4xi64>, f128 = dense<128> : vector<2xi64>, !llvm.ptr<270> = dense<32> : vector<4xi64>, f64 = dense<64> : vector<2xi64>, i32 = dense<32> : vector<2xi64>, f16 = dense<16> : vector<2xi64>, i16 = dense<16> : vector<2xi64>, i8 = dense<8> : vector<2xi64>, i1 = dense<8> : vector<2xi64>, "dlti.stack_alignment" = 128 : i64, "dlti.endianness" = "little">} {
  cir.func private @rand() -> !s32i extra(#fn_attr) loc(#loc151)
  cir.func private @malloc(!u64i) -> !cir.ptr<!void> extra(#fn_attr) loc(#loc152)
  cir.func private @exit(!s32i) extra(#fn_attr) loc(#loc153)
  cir.func private @printIntLine(!s32i) loc(#loc154)
  cir.func private @free(!cir.ptr<!void>) extra(#fn_attr) loc(#loc155)
  cir.func no_proto @CWE680_Integer_Overflow_to_Buffer_Overflow__malloc_rand_16_bad() extra(#fn_attr1) {
    %0 = cir.alloca !u64i, !cir.ptr<!u64i>, ["i"] {alignment = 8 : i64} loc(#loc157)
    %1 = cir.alloca !cir.ptr<!s32i>, !cir.ptr<!cir.ptr<!s32i>>, ["intPointer"] {alignment = 8 : i64} loc(#loc158)
    %2 = cir.alloca !s32i, !cir.ptr<!s32i>, ["data"] {alignment = 4 : i64} loc(#loc159)
    %3 = cir.const #cir.int<1> : !s32i loc(#loc19)
    %4 = cir.unary(minus, %3) : !s32i, !s32i loc(#loc20)
    cir.store %4, %2 : !s32i, !cir.ptr<!s32i> loc(#loc160)
    cir.br ^bb1 loc(#loc161)
  ^bb1:  // pred: ^bb0
    cir.br ^bb2 loc(#loc161)
  ^bb2:  // pred: ^bb1
    %5 = cir.const #cir.int<1> : !s32i loc(#loc24)
    %6 = cir.cast(int_to_bool, %5 : !s32i), !cir.bool loc(#loc24)
    cir.brcond %6 ^bb3, ^bb8 loc(#loc24)
  ^bb3:  // pred: ^bb2
    %7 = cir.call @rand() : () -> !s32i extra(#fn_attr) loc(#loc25)
    %8 = cir.const #cir.int<1> : !s32i loc(#loc25)
    %9 = cir.binop(and, %7, %8) : !s32i loc(#loc25)
    %10 = cir.cast(int_to_bool, %9 : !s32i), !cir.bool loc(#loc25)
    cir.brcond %10 ^bb4, ^bb5 loc(#loc25)
  ^bb4:  // pred: ^bb3
    %11 = cir.call @rand() : () -> !s32i extra(#fn_attr) loc(#loc25)
    %12 = cir.cast(integral, %11 : !s32i), !u32i loc(#loc25)
    %13 = cir.const #cir.int<30> : !s32i loc(#loc25)
    %14 = cir.shift(left, %12 : !u32i, %13 : !s32i) -> !u32i loc(#loc25)
    %15 = cir.call @rand() : () -> !s32i extra(#fn_attr) loc(#loc25)
    %16 = cir.cast(integral, %15 : !s32i), !u32i loc(#loc25)
    %17 = cir.const #cir.int<15> : !s32i loc(#loc25)
    %18 = cir.shift(left, %16 : !u32i, %17 : !s32i) -> !u32i loc(#loc25)
    %19 = cir.binop(xor, %14, %18) : !u32i loc(#loc25)
    %20 = cir.call @rand() : () -> !s32i extra(#fn_attr) loc(#loc25)
    %21 = cir.cast(integral, %20 : !s32i), !u32i loc(#loc25)
    %22 = cir.binop(xor, %19, %21) : !u32i loc(#loc25)
    cir.br ^bb6(%22 : !u32i) loc(#loc25)
  ^bb5:  // pred: ^bb3
    %23 = cir.call @rand() : () -> !s32i extra(#fn_attr) loc(#loc25)
    %24 = cir.cast(integral, %23 : !s32i), !u32i loc(#loc25)
    %25 = cir.const #cir.int<30> : !s32i loc(#loc25)
    %26 = cir.shift(left, %24 : !u32i, %25 : !s32i) -> !u32i loc(#loc25)
    %27 = cir.call @rand() : () -> !s32i extra(#fn_attr) loc(#loc25)
    %28 = cir.cast(integral, %27 : !s32i), !u32i loc(#loc25)
    %29 = cir.const #cir.int<15> : !s32i loc(#loc25)
    %30 = cir.shift(left, %28 : !u32i, %29 : !s32i) -> !u32i loc(#loc25)
    %31 = cir.binop(xor, %26, %30) : !u32i loc(#loc25)
    %32 = cir.call @rand() : () -> !s32i extra(#fn_attr) loc(#loc25)
    %33 = cir.cast(integral, %32 : !s32i), !u32i loc(#loc25)
    %34 = cir.binop(xor, %31, %33) : !u32i loc(#loc25)
    %35 = cir.unary(minus, %34) : !u32i, !u32i loc(#loc25)
    %36 = cir.const #cir.int<1> : !s32i loc(#loc25)
    %37 = cir.cast(integral, %36 : !s32i), !u32i loc(#loc25)
    %38 = cir.binop(sub, %35, %37) : !u32i loc(#loc25)
    cir.br ^bb6(%38 : !u32i) loc(#loc25)
  ^bb6(%39: !u32i loc("CWE680_Integer_Overflow_to_Buffer_Overflow__malloc_rand_16.c":29:16)):  // 2 preds: ^bb4, ^bb5
    cir.br ^bb7 loc(#loc25)
  ^bb7:  // pred: ^bb6
    %40 = cir.cast(integral, %39 : !u32i), !s32i loc(#loc25)
    cir.store %40, %2 : !s32i, !cir.ptr<!s32i> loc(#loc162)
    cir.br ^bb8 loc(#loc27)
  ^bb8:  // 2 preds: ^bb2, ^bb7
    cir.br ^bb9 loc(#loc23)
  ^bb9:  // pred: ^bb8
    cir.br ^bb10 loc(#loc163)
  ^bb10:  // pred: ^bb9
    %41 = cir.get_global @malloc : !cir.ptr<!cir.func<!cir.ptr<!void> (!u64i)>> loc(#loc30)
    %42 = cir.load %2 : !cir.ptr<!s32i>, !s32i loc(#loc31)
    %43 = cir.cast(integral, %42 : !s32i), !u64i loc(#loc31)
    %44 = cir.const #cir.int<4> : !u64i loc(#loc164)
    %45 = cir.binop(mul, %43, %44) : !u64i loc(#loc165)
    %46 = cir.call @malloc(%45) : (!u64i) -> !cir.ptr<!void> extra(#fn_attr) loc(#loc30)
    %47 = cir.cast(bitcast, %46 : !cir.ptr<!void>), !cir.ptr<!s32i> loc(#loc166)
    cir.store %47, %1 : !cir.ptr<!s32i>, !cir.ptr<!cir.ptr<!s32i>> loc(#loc167)
    cir.br ^bb11 loc(#loc168)
  ^bb11:  // pred: ^bb10
    %48 = cir.load %1 : !cir.ptr<!cir.ptr<!s32i>>, !cir.ptr<!s32i> loc(#loc38)
    %49 = cir.const #cir.ptr<null> : !cir.ptr<!void> loc(#loc39)
    %50 = cir.cast(bitcast, %49 : !cir.ptr<!void>), !cir.ptr<!s32i> loc(#loc39)
    %51 = cir.cmp(eq, %48, %50) : !cir.ptr<!s32i>, !cir.bool loc(#loc169)
    cir.brcond %51 ^bb12, ^bb13 loc(#loc170)
  ^bb12:  // pred: ^bb11
    %52 = cir.get_global @exit : !cir.ptr<!cir.func<!void (!s32i)>> loc(#loc41)
    %53 = cir.const #cir.int<1> : !s32i loc(#loc42)
    %54 = cir.unary(minus, %53) : !s32i, !s32i loc(#loc43)
    cir.call @exit(%54) : (!s32i) -> () extra(#fn_attr) loc(#loc41)
    cir.br ^bb13 loc(#loc37)
  ^bb13:  // 2 preds: ^bb11, ^bb12
    cir.br ^bb14 loc(#loc37)
  ^bb14:  // pred: ^bb13
    cir.br ^bb15 loc(#loc171)
  ^bb15:  // pred: ^bb14
    %55 = cir.const #cir.int<0> : !s32i loc(#loc46)
    %56 = cir.cast(integral, %55 : !s32i), !u64i loc(#loc46)
    cir.store %56, %0 : !u64i, !cir.ptr<!u64i> loc(#loc172)
    cir.br ^bb16 loc(#loc171)
  ^bb16:  // 2 preds: ^bb15, ^bb20
    %57 = cir.load %0 : !cir.ptr<!u64i>, !u64i loc(#loc48)
    %58 = cir.load %2 : !cir.ptr<!s32i>, !s32i loc(#loc49)
    %59 = cir.cast(integral, %58 : !s32i), !u64i loc(#loc49)
    %60 = cir.cmp(lt, %57, %59) : !u64i, !cir.bool loc(#loc173)
    cir.brcond %60 ^bb17, ^bb21 loc(#loc50)
  ^bb17:  // pred: ^bb16
    cir.br ^bb18 loc(#loc174)
  ^bb18:  // pred: ^bb17
    %61 = cir.const #cir.int<0> : !s32i loc(#loc52)
    %62 = cir.load %1 : !cir.ptr<!cir.ptr<!s32i>>, !cir.ptr<!s32i> loc(#loc53)
    %63 = cir.load %0 : !cir.ptr<!u64i>, !u64i loc(#loc54)
    %64 = cir.ptr_stride(%62 : !cir.ptr<!s32i>, %63 : !u64i), !cir.ptr<!s32i> loc(#loc55)
    cir.store %61, %64 : !s32i, !cir.ptr<!s32i> loc(#loc175)
    cir.br ^bb19 loc(#loc45)
  ^bb19:  // pred: ^bb18
    cir.br ^bb20 loc(#loc45)
  ^bb20:  // pred: ^bb19
    %65 = cir.load %0 : !cir.ptr<!u64i>, !u64i loc(#loc56)
    %66 = cir.unary(inc, %65) : !u64i, !u64i loc(#loc57)
    cir.store %66, %0 : !u64i, !cir.ptr<!u64i> loc(#loc176)
    cir.br ^bb16 loc(#loc171)
  ^bb21:  // pred: ^bb16
    cir.br ^bb22 loc(#loc45)
  ^bb22:  // pred: ^bb21
    %67 = cir.load %1 : !cir.ptr<!cir.ptr<!s32i>>, !cir.ptr<!s32i> loc(#loc58)
    %68 = cir.const #cir.int<0> : !s32i loc(#loc59)
    %69 = cir.ptr_stride(%67 : !cir.ptr<!s32i>, %68 : !s32i), !cir.ptr<!s32i> loc(#loc60)
    %70 = cir.load %69 : !cir.ptr<!s32i>, !s32i loc(#loc58)
    cir.call @printIntLine(%70) : (!s32i) -> () loc(#loc61)
    %71 = cir.load %1 : !cir.ptr<!cir.ptr<!s32i>>, !cir.ptr<!s32i> loc(#loc62)
    %72 = cir.cast(bitcast, %71 : !cir.ptr<!s32i>), !cir.ptr<!void> loc(#loc62)
    cir.call @free(%72) : (!cir.ptr<!void>) -> () extra(#fn_attr) loc(#loc63)
    cir.br ^bb23 loc(#loc29)
  ^bb23:  // pred: ^bb22
    cir.return loc(#loc12)
  } loc(#loc156)
  cir.func no_proto @CWE680_Integer_Overflow_to_Buffer_Overflow__malloc_rand_16_good() extra(#fn_attr1) {
    %0 = cir.get_global @goodG2B : !cir.ptr<!cir.func<!void ()>> loc(#loc178)
    cir.call %0() : (!cir.ptr<!cir.func<!void ()>>) -> () loc(#loc66)
    cir.return loc(#loc65)
  } loc(#loc177)
  cir.func private @srand(!u32i) extra(#fn_attr) loc(#loc179)
  cir.func private @time(!cir.ptr<!s64i>) -> !s64i extra(#fn_attr) loc(#loc180)
  cir.func private @printLine(!cir.ptr<!s8i>) loc(#loc181)
  cir.global "private" constant cir_private dsolocal @".str" = #cir.const_array<"Calling good()...\00" : !cir.array<!s8i x 18>> : !cir.array<!s8i x 18> {alignment = 1 : i64} loc(#loc74)
  cir.global "private" constant cir_private dsolocal @".str.1" = #cir.const_array<"Finished good()\00" : !cir.array<!s8i x 16>> : !cir.array<!s8i x 16> {alignment = 1 : i64} loc(#loc75)
  cir.global "private" constant cir_private dsolocal @".str.2" = #cir.const_array<"Calling bad()...\00" : !cir.array<!s8i x 17>> : !cir.array<!s8i x 17> {alignment = 1 : i64} loc(#loc76)
  cir.global "private" constant cir_private dsolocal @".str.3" = #cir.const_array<"Finished bad()\00" : !cir.array<!s8i x 15>> : !cir.array<!s8i x 15> {alignment = 1 : i64} loc(#loc77)
  cir.func @main(%arg0: !s32i loc(fused[#loc80, #loc81]), %arg1: !cir.ptr<!cir.ptr<!s8i>> loc(fused[#loc82, #loc83])) -> !s32i extra(#fn_attr1) {
    %0 = cir.alloca !s32i, !cir.ptr<!s32i>, ["argc", init] {alignment = 4 : i64} loc(#loc183)
    %1 = cir.alloca !cir.ptr<!cir.ptr<!s8i>>, !cir.ptr<!cir.ptr<!cir.ptr<!s8i>>>, ["argv", init] {alignment = 8 : i64} loc(#loc184)
    %2 = cir.alloca !s32i, !cir.ptr<!s32i>, ["__retval"] {alignment = 4 : i64} loc(#loc79)
    cir.store %arg0, %0 : !s32i, !cir.ptr<!s32i> loc(#loc84)
    cir.store %arg1, %1 : !cir.ptr<!cir.ptr<!s8i>>, !cir.ptr<!cir.ptr<!cir.ptr<!s8i>>> loc(#loc84)
    %3 = cir.const #cir.ptr<null> : !cir.ptr<!s64i> loc(#loc85)
    %4 = cir.call @time(%3) : (!cir.ptr<!s64i>) -> !s64i extra(#fn_attr) loc(#loc86)
    %5 = cir.cast(integral, %4 : !s64i), !u32i loc(#loc86)
    cir.call @srand(%5) : (!u32i) -> () extra(#fn_attr) loc(#loc87)
    %6 = cir.get_global @".str" : !cir.ptr<!cir.array<!s8i x 18>> loc(#loc74)
    %7 = cir.cast(array_to_ptrdecay, %6 : !cir.ptr<!cir.array<!s8i x 18>>), !cir.ptr<!s8i> loc(#loc74)
    cir.call @printLine(%7) : (!cir.ptr<!s8i>) -> () loc(#loc88)
    %8 = cir.get_global @CWE680_Integer_Overflow_to_Buffer_Overflow__malloc_rand_16_good : !cir.ptr<!cir.func<!void ()>> loc(#loc185)
    cir.call @CWE680_Integer_Overflow_to_Buffer_Overflow__malloc_rand_16_good() : () -> () loc(#loc89)
    %9 = cir.get_global @".str.1" : !cir.ptr<!cir.array<!s8i x 16>> loc(#loc75)
    %10 = cir.cast(array_to_ptrdecay, %9 : !cir.ptr<!cir.array<!s8i x 16>>), !cir.ptr<!s8i> loc(#loc75)
    cir.call @printLine(%10) : (!cir.ptr<!s8i>) -> () loc(#loc91)
    %11 = cir.get_global @".str.2" : !cir.ptr<!cir.array<!s8i x 17>> loc(#loc76)
    %12 = cir.cast(array_to_ptrdecay, %11 : !cir.ptr<!cir.array<!s8i x 17>>), !cir.ptr<!s8i> loc(#loc76)
    cir.call @printLine(%12) : (!cir.ptr<!s8i>) -> () loc(#loc92)
    %13 = cir.get_global @CWE680_Integer_Overflow_to_Buffer_Overflow__malloc_rand_16_bad : !cir.ptr<!cir.func<!void ()>> loc(#loc186)
    cir.call @CWE680_Integer_Overflow_to_Buffer_Overflow__malloc_rand_16_bad() : () -> () loc(#loc93)
    %14 = cir.get_global @".str.3" : !cir.ptr<!cir.array<!s8i x 15>> loc(#loc77)
    %15 = cir.cast(array_to_ptrdecay, %14 : !cir.ptr<!cir.array<!s8i x 15>>), !cir.ptr<!s8i> loc(#loc77)
    cir.call @printLine(%15) : (!cir.ptr<!s8i>) -> () loc(#loc95)
    %16 = cir.const #cir.int<0> : !s32i loc(#loc96)
    cir.store %16, %2 : !s32i, !cir.ptr<!s32i> loc(#loc187)
    %17 = cir.load %2 : !cir.ptr<!s32i>, !s32i loc(#loc187)
    cir.return %17 : !s32i loc(#loc187)
  } loc(#loc182)
  cir.func no_proto internal private @goodG2B() extra(#fn_attr1) {
    %0 = cir.alloca !u64i, !cir.ptr<!u64i>, ["i"] {alignment = 8 : i64} loc(#loc189)
    %1 = cir.alloca !cir.ptr<!s32i>, !cir.ptr<!cir.ptr<!s32i>>, ["intPointer"] {alignment = 8 : i64} loc(#loc190)
    %2 = cir.alloca !s32i, !cir.ptr<!s32i>, ["data"] {alignment = 4 : i64} loc(#loc191)
    %3 = cir.const #cir.int<1> : !s32i loc(#loc106)
    %4 = cir.unary(minus, %3) : !s32i, !s32i loc(#loc107)
    cir.store %4, %2 : !s32i, !cir.ptr<!s32i> loc(#loc192)
    cir.br ^bb1 loc(#loc193)
  ^bb1:  // pred: ^bb0
    cir.br ^bb2 loc(#loc193)
  ^bb2:  // pred: ^bb1
    %5 = cir.const #cir.int<1> : !s32i loc(#loc111)
    %6 = cir.cast(int_to_bool, %5 : !s32i), !cir.bool loc(#loc111)
    cir.brcond %6 ^bb3, ^bb4 loc(#loc111)
  ^bb3:  // pred: ^bb2
    %7 = cir.const #cir.int<20> : !s32i loc(#loc112)
    cir.store %7, %2 : !s32i, !cir.ptr<!s32i> loc(#loc194)
    cir.br ^bb4 loc(#loc114)
  ^bb4:  // 2 preds: ^bb2, ^bb3
    cir.br ^bb5 loc(#loc110)
  ^bb5:  // pred: ^bb4
    cir.br ^bb6 loc(#loc195)
  ^bb6:  // pred: ^bb5
    %8 = cir.get_global @malloc : !cir.ptr<!cir.func<!cir.ptr<!void> (!u64i)>> loc(#loc117)
    %9 = cir.load %2 : !cir.ptr<!s32i>, !s32i loc(#loc118)
    %10 = cir.cast(integral, %9 : !s32i), !u64i loc(#loc118)
    %11 = cir.const #cir.int<4> : !u64i loc(#loc196)
    %12 = cir.binop(mul, %10, %11) : !u64i loc(#loc197)
    %13 = cir.call @malloc(%12) : (!u64i) -> !cir.ptr<!void> extra(#fn_attr) loc(#loc117)
    %14 = cir.cast(bitcast, %13 : !cir.ptr<!void>), !cir.ptr<!s32i> loc(#loc198)
    cir.store %14, %1 : !cir.ptr<!s32i>, !cir.ptr<!cir.ptr<!s32i>> loc(#loc199)
    cir.br ^bb7 loc(#loc200)
  ^bb7:  // pred: ^bb6
    %15 = cir.load %1 : !cir.ptr<!cir.ptr<!s32i>>, !cir.ptr<!s32i> loc(#loc125)
    %16 = cir.const #cir.ptr<null> : !cir.ptr<!void> loc(#loc126)
    %17 = cir.cast(bitcast, %16 : !cir.ptr<!void>), !cir.ptr<!s32i> loc(#loc126)
    %18 = cir.cmp(eq, %15, %17) : !cir.ptr<!s32i>, !cir.bool loc(#loc201)
    cir.brcond %18 ^bb8, ^bb9 loc(#loc202)
  ^bb8:  // pred: ^bb7
    %19 = cir.get_global @exit : !cir.ptr<!cir.func<!void (!s32i)>> loc(#loc128)
    %20 = cir.const #cir.int<1> : !s32i loc(#loc129)
    %21 = cir.unary(minus, %20) : !s32i, !s32i loc(#loc130)
    cir.call @exit(%21) : (!s32i) -> () extra(#fn_attr) loc(#loc128)
    cir.br ^bb9 loc(#loc124)
  ^bb9:  // 2 preds: ^bb7, ^bb8
    cir.br ^bb10 loc(#loc124)
  ^bb10:  // pred: ^bb9
    cir.br ^bb11 loc(#loc203)
  ^bb11:  // pred: ^bb10
    %22 = cir.const #cir.int<0> : !s32i loc(#loc133)
    %23 = cir.cast(integral, %22 : !s32i), !u64i loc(#loc133)
    cir.store %23, %0 : !u64i, !cir.ptr<!u64i> loc(#loc204)
    cir.br ^bb12 loc(#loc203)
  ^bb12:  // 2 preds: ^bb11, ^bb16
    %24 = cir.load %0 : !cir.ptr<!u64i>, !u64i loc(#loc135)
    %25 = cir.load %2 : !cir.ptr<!s32i>, !s32i loc(#loc136)
    %26 = cir.cast(integral, %25 : !s32i), !u64i loc(#loc136)
    %27 = cir.cmp(lt, %24, %26) : !u64i, !cir.bool loc(#loc205)
    cir.brcond %27 ^bb13, ^bb17 loc(#loc137)
  ^bb13:  // pred: ^bb12
    cir.br ^bb14 loc(#loc206)
  ^bb14:  // pred: ^bb13
    %28 = cir.const #cir.int<0> : !s32i loc(#loc139)
    %29 = cir.load %1 : !cir.ptr<!cir.ptr<!s32i>>, !cir.ptr<!s32i> loc(#loc140)
    %30 = cir.load %0 : !cir.ptr<!u64i>, !u64i loc(#loc141)
    %31 = cir.ptr_stride(%29 : !cir.ptr<!s32i>, %30 : !u64i), !cir.ptr<!s32i> loc(#loc142)
    cir.store %28, %31 : !s32i, !cir.ptr<!s32i> loc(#loc207)
    cir.br ^bb15 loc(#loc132)
  ^bb15:  // pred: ^bb14
    cir.br ^bb16 loc(#loc132)
  ^bb16:  // pred: ^bb15
    %32 = cir.load %0 : !cir.ptr<!u64i>, !u64i loc(#loc143)
    %33 = cir.unary(inc, %32) : !u64i, !u64i loc(#loc144)
    cir.store %33, %0 : !u64i, !cir.ptr<!u64i> loc(#loc208)
    cir.br ^bb12 loc(#loc203)
  ^bb17:  // pred: ^bb12
    cir.br ^bb18 loc(#loc132)
  ^bb18:  // pred: ^bb17
    %34 = cir.load %1 : !cir.ptr<!cir.ptr<!s32i>>, !cir.ptr<!s32i> loc(#loc145)
    %35 = cir.const #cir.int<0> : !s32i loc(#loc146)
    %36 = cir.ptr_stride(%34 : !cir.ptr<!s32i>, %35 : !s32i), !cir.ptr<!s32i> loc(#loc147)
    %37 = cir.load %36 : !cir.ptr<!s32i>, !s32i loc(#loc145)
    cir.call @printIntLine(%37) : (!s32i) -> () loc(#loc148)
    %38 = cir.load %1 : !cir.ptr<!cir.ptr<!s32i>>, !cir.ptr<!s32i> loc(#loc149)
    %39 = cir.cast(bitcast, %38 : !cir.ptr<!s32i>), !cir.ptr<!void> loc(#loc149)
    cir.call @free(%39) : (!cir.ptr<!void>) -> () extra(#fn_attr) loc(#loc150)
    cir.br ^bb19 loc(#loc116)
  ^bb19:  // pred: ^bb18
    cir.return loc(#loc99)
  } loc(#loc188)
} loc(#loc)
#loc = loc("/home/ladisgin/git_proj/juliet-c/testcases/CWE680_Integer_Overflow_to_Buffer_Overflow/CWE680_Integer_Overflow_to_Buffer_Overflow__malloc_rand_16.c":0:0)
#loc1 = loc("/usr/include/stdlib.h":573:1)
#loc2 = loc("/usr/include/stdlib.h":573:24)
#loc3 = loc("/usr/include/stdlib.h":672:1)
#loc4 = loc("/usr/include/stdlib.h":672:45)
#loc5 = loc("/usr/include/stdlib.h":756:1)
#loc6 = loc("/usr/include/stdlib.h":756:70)
#loc7 = loc("../../testcasesupport/std_testcase_io.h":18:1)
#loc8 = loc("../../testcasesupport/std_testcase_io.h":18:33)
#loc9 = loc("/usr/include/stdlib.h":687:1)
#loc10 = loc("/usr/include/stdlib.h":687:32)
#loc11 = loc("CWE680_Integer_Overflow_to_Buffer_Overflow__malloc_rand_16.c":21:1)
#loc12 = loc("CWE680_Integer_Overflow_to_Buffer_Overflow__malloc_rand_16.c":46:1)
#loc13 = loc("CWE680_Integer_Overflow_to_Buffer_Overflow__malloc_rand_16.c":33:9)
#loc14 = loc("CWE680_Integer_Overflow_to_Buffer_Overflow__malloc_rand_16.c":33:16)
#loc15 = loc("CWE680_Integer_Overflow_to_Buffer_Overflow__malloc_rand_16.c":34:9)
#loc16 = loc("CWE680_Integer_Overflow_to_Buffer_Overflow__malloc_rand_16.c":34:14)
#loc17 = loc("CWE680_Integer_Overflow_to_Buffer_Overflow__malloc_rand_16.c":23:5)
#loc18 = loc("CWE680_Integer_Overflow_to_Buffer_Overflow__malloc_rand_16.c":23:9)
#loc19 = loc("CWE680_Integer_Overflow_to_Buffer_Overflow__malloc_rand_16.c":25:13)
#loc20 = loc("CWE680_Integer_Overflow_to_Buffer_Overflow__malloc_rand_16.c":25:12)
#loc21 = loc("CWE680_Integer_Overflow_to_Buffer_Overflow__malloc_rand_16.c":25:5)
#loc22 = loc("CWE680_Integer_Overflow_to_Buffer_Overflow__malloc_rand_16.c":26:5)
#loc23 = loc("CWE680_Integer_Overflow_to_Buffer_Overflow__malloc_rand_16.c":31:5)
#loc24 = loc("CWE680_Integer_Overflow_to_Buffer_Overflow__malloc_rand_16.c":26:11)
#loc26 = loc("CWE680_Integer_Overflow_to_Buffer_Overflow__malloc_rand_16.c":29:9)
#loc27 = loc("CWE680_Integer_Overflow_to_Buffer_Overflow__malloc_rand_16.c":30:9)
#loc28 = loc("CWE680_Integer_Overflow_to_Buffer_Overflow__malloc_rand_16.c":32:5)
#loc29 = loc("CWE680_Integer_Overflow_to_Buffer_Overflow__malloc_rand_16.c":45:5)
#loc30 = loc("CWE680_Integer_Overflow_to_Buffer_Overflow__malloc_rand_16.c":37:28)
#loc31 = loc("CWE680_Integer_Overflow_to_Buffer_Overflow__malloc_rand_16.c":37:35)
#loc32 = loc("CWE680_Integer_Overflow_to_Buffer_Overflow__malloc_rand_16.c":37:42)
#loc33 = loc("CWE680_Integer_Overflow_to_Buffer_Overflow__malloc_rand_16.c":37:52)
#loc34 = loc("CWE680_Integer_Overflow_to_Buffer_Overflow__malloc_rand_16.c":37:53)
#loc35 = loc("CWE680_Integer_Overflow_to_Buffer_Overflow__malloc_rand_16.c":37:9)
#loc36 = loc("CWE680_Integer_Overflow_to_Buffer_Overflow__malloc_rand_16.c":38:9)
#loc37 = loc("CWE680_Integer_Overflow_to_Buffer_Overflow__malloc_rand_16.c":38:43)
#loc38 = loc("CWE680_Integer_Overflow_to_Buffer_Overflow__malloc_rand_16.c":38:13)
#loc39 = loc("CWE680_Integer_Overflow_to_Buffer_Overflow__malloc_rand_16.c":38:27)
#loc40 = loc("CWE680_Integer_Overflow_to_Buffer_Overflow__malloc_rand_16.c":38:33)
#loc41 = loc("CWE680_Integer_Overflow_to_Buffer_Overflow__malloc_rand_16.c":38:34)
#loc42 = loc("CWE680_Integer_Overflow_to_Buffer_Overflow__malloc_rand_16.c":38:40)
#loc43 = loc("CWE680_Integer_Overflow_to_Buffer_Overflow__malloc_rand_16.c":38:39)
#loc44 = loc("CWE680_Integer_Overflow_to_Buffer_Overflow__malloc_rand_16.c":39:9)
#loc45 = loc("CWE680_Integer_Overflow_to_Buffer_Overflow__malloc_rand_16.c":42:9)
#loc46 = loc("CWE680_Integer_Overflow_to_Buffer_Overflow__malloc_rand_16.c":39:18)
#loc47 = loc("CWE680_Integer_Overflow_to_Buffer_Overflow__malloc_rand_16.c":39:14)
#loc48 = loc("CWE680_Integer_Overflow_to_Buffer_Overflow__malloc_rand_16.c":39:21)
#loc49 = loc("CWE680_Integer_Overflow_to_Buffer_Overflow__malloc_rand_16.c":39:33)
#loc50 = loc("CWE680_Integer_Overflow_to_Buffer_Overflow__malloc_rand_16.c":39:23)
#loc51 = loc("CWE680_Integer_Overflow_to_Buffer_Overflow__malloc_rand_16.c":40:9)
#loc52 = loc("CWE680_Integer_Overflow_to_Buffer_Overflow__malloc_rand_16.c":41:29)
#loc53 = loc("CWE680_Integer_Overflow_to_Buffer_Overflow__malloc_rand_16.c":41:13)
#loc54 = loc("CWE680_Integer_Overflow_to_Buffer_Overflow__malloc_rand_16.c":41:24)
#loc55 = loc("CWE680_Integer_Overflow_to_Buffer_Overflow__malloc_rand_16.c":41:25)
#loc56 = loc("CWE680_Integer_Overflow_to_Buffer_Overflow__malloc_rand_16.c":39:40)
#loc57 = loc("CWE680_Integer_Overflow_to_Buffer_Overflow__malloc_rand_16.c":39:39)
#loc58 = loc("CWE680_Integer_Overflow_to_Buffer_Overflow__malloc_rand_16.c":43:22)
#loc59 = loc("CWE680_Integer_Overflow_to_Buffer_Overflow__malloc_rand_16.c":43:33)
#loc60 = loc("CWE680_Integer_Overflow_to_Buffer_Overflow__malloc_rand_16.c":43:34)
#loc61 = loc("CWE680_Integer_Overflow_to_Buffer_Overflow__malloc_rand_16.c":43:9)
#loc62 = loc("CWE680_Integer_Overflow_to_Buffer_Overflow__malloc_rand_16.c":44:14)
#loc63 = loc("CWE680_Integer_Overflow_to_Buffer_Overflow__malloc_rand_16.c":44:9)
#loc64 = loc("CWE680_Integer_Overflow_to_Buffer_Overflow__malloc_rand_16.c":80:1)
#loc65 = loc("CWE680_Integer_Overflow_to_Buffer_Overflow__malloc_rand_16.c":83:1)
#loc66 = loc("CWE680_Integer_Overflow_to_Buffer_Overflow__malloc_rand_16.c":82:5)
#loc67 = loc("CWE680_Integer_Overflow_to_Buffer_Overflow__malloc_rand_16.c":82:13)
#loc68 = loc("/usr/include/stdlib.h":575:1)
#loc69 = loc("/usr/include/stdlib.h":575:41)
#loc70 = loc("/usr/include/time.h":76:1)
#loc71 = loc("/usr/include/time.h":76:38)
#loc72 = loc("../../testcasesupport/std_testcase_io.h":14:1)
#loc73 = loc("../../testcasesupport/std_testcase_io.h":14:33)
#loc74 = loc("CWE680_Integer_Overflow_to_Buffer_Overflow__malloc_rand_16.c":100:15)
#loc75 = loc("CWE680_Integer_Overflow_to_Buffer_Overflow__malloc_rand_16.c":102:15)
#loc76 = loc("CWE680_Integer_Overflow_to_Buffer_Overflow__malloc_rand_16.c":105:15)
#loc77 = loc("CWE680_Integer_Overflow_to_Buffer_Overflow__malloc_rand_16.c":107:15)
#loc78 = loc("CWE680_Integer_Overflow_to_Buffer_Overflow__malloc_rand_16.c":95:1)
#loc79 = loc("CWE680_Integer_Overflow_to_Buffer_Overflow__malloc_rand_16.c":110:1)
#loc84 = loc("CWE680_Integer_Overflow_to_Buffer_Overflow__malloc_rand_16.c":96:1)
#loc85 = loc("CWE680_Integer_Overflow_to_Buffer_Overflow__malloc_rand_16.c":98:27)
#loc86 = loc("CWE680_Integer_Overflow_to_Buffer_Overflow__malloc_rand_16.c":98:22)
#loc87 = loc("CWE680_Integer_Overflow_to_Buffer_Overflow__malloc_rand_16.c":98:5)
#loc88 = loc("CWE680_Integer_Overflow_to_Buffer_Overflow__malloc_rand_16.c":100:5)
#loc89 = loc("CWE680_Integer_Overflow_to_Buffer_Overflow__malloc_rand_16.c":101:5)
#loc90 = loc("CWE680_Integer_Overflow_to_Buffer_Overflow__malloc_rand_16.c":101:69)
#loc91 = loc("CWE680_Integer_Overflow_to_Buffer_Overflow__malloc_rand_16.c":102:5)
#loc92 = loc("CWE680_Integer_Overflow_to_Buffer_Overflow__malloc_rand_16.c":105:5)
#loc93 = loc("CWE680_Integer_Overflow_to_Buffer_Overflow__malloc_rand_16.c":106:5)
#loc94 = loc("CWE680_Integer_Overflow_to_Buffer_Overflow__malloc_rand_16.c":106:68)
#loc95 = loc("CWE680_Integer_Overflow_to_Buffer_Overflow__malloc_rand_16.c":107:5)
#loc96 = loc("CWE680_Integer_Overflow_to_Buffer_Overflow__malloc_rand_16.c":109:12)
#loc97 = loc("CWE680_Integer_Overflow_to_Buffer_Overflow__malloc_rand_16.c":109:5)
#loc98 = loc("CWE680_Integer_Overflow_to_Buffer_Overflow__malloc_rand_16.c":53:1)
#loc99 = loc("CWE680_Integer_Overflow_to_Buffer_Overflow__malloc_rand_16.c":78:1)
#loc100 = loc("CWE680_Integer_Overflow_to_Buffer_Overflow__malloc_rand_16.c":65:9)
#loc101 = loc("CWE680_Integer_Overflow_to_Buffer_Overflow__malloc_rand_16.c":65:16)
#loc102 = loc("CWE680_Integer_Overflow_to_Buffer_Overflow__malloc_rand_16.c":66:9)
#loc103 = loc("CWE680_Integer_Overflow_to_Buffer_Overflow__malloc_rand_16.c":66:14)
#loc104 = loc("CWE680_Integer_Overflow_to_Buffer_Overflow__malloc_rand_16.c":55:5)
#loc105 = loc("CWE680_Integer_Overflow_to_Buffer_Overflow__malloc_rand_16.c":55:9)
#loc106 = loc("CWE680_Integer_Overflow_to_Buffer_Overflow__malloc_rand_16.c":57:13)
#loc107 = loc("CWE680_Integer_Overflow_to_Buffer_Overflow__malloc_rand_16.c":57:12)
#loc108 = loc("CWE680_Integer_Overflow_to_Buffer_Overflow__malloc_rand_16.c":57:5)
#loc109 = loc("CWE680_Integer_Overflow_to_Buffer_Overflow__malloc_rand_16.c":58:5)
#loc110 = loc("CWE680_Integer_Overflow_to_Buffer_Overflow__malloc_rand_16.c":63:5)
#loc111 = loc("CWE680_Integer_Overflow_to_Buffer_Overflow__malloc_rand_16.c":58:11)
#loc112 = loc("CWE680_Integer_Overflow_to_Buffer_Overflow__malloc_rand_16.c":61:16)
#loc113 = loc("CWE680_Integer_Overflow_to_Buffer_Overflow__malloc_rand_16.c":61:9)
#loc114 = loc("CWE680_Integer_Overflow_to_Buffer_Overflow__malloc_rand_16.c":62:9)
#loc115 = loc("CWE680_Integer_Overflow_to_Buffer_Overflow__malloc_rand_16.c":64:5)
#loc116 = loc("CWE680_Integer_Overflow_to_Buffer_Overflow__malloc_rand_16.c":77:5)
#loc117 = loc("CWE680_Integer_Overflow_to_Buffer_Overflow__malloc_rand_16.c":69:28)
#loc118 = loc("CWE680_Integer_Overflow_to_Buffer_Overflow__malloc_rand_16.c":69:35)
#loc119 = loc("CWE680_Integer_Overflow_to_Buffer_Overflow__malloc_rand_16.c":69:42)
#loc120 = loc("CWE680_Integer_Overflow_to_Buffer_Overflow__malloc_rand_16.c":69:52)
#loc121 = loc("CWE680_Integer_Overflow_to_Buffer_Overflow__malloc_rand_16.c":69:53)
#loc122 = loc("CWE680_Integer_Overflow_to_Buffer_Overflow__malloc_rand_16.c":69:9)
#loc123 = loc("CWE680_Integer_Overflow_to_Buffer_Overflow__malloc_rand_16.c":70:9)
#loc124 = loc("CWE680_Integer_Overflow_to_Buffer_Overflow__malloc_rand_16.c":70:43)
#loc125 = loc("CWE680_Integer_Overflow_to_Buffer_Overflow__malloc_rand_16.c":70:13)
#loc126 = loc("CWE680_Integer_Overflow_to_Buffer_Overflow__malloc_rand_16.c":70:27)
#loc127 = loc("CWE680_Integer_Overflow_to_Buffer_Overflow__malloc_rand_16.c":70:33)
#loc128 = loc("CWE680_Integer_Overflow_to_Buffer_Overflow__malloc_rand_16.c":70:34)
#loc129 = loc("CWE680_Integer_Overflow_to_Buffer_Overflow__malloc_rand_16.c":70:40)
#loc130 = loc("CWE680_Integer_Overflow_to_Buffer_Overflow__malloc_rand_16.c":70:39)
#loc131 = loc("CWE680_Integer_Overflow_to_Buffer_Overflow__malloc_rand_16.c":71:9)
#loc132 = loc("CWE680_Integer_Overflow_to_Buffer_Overflow__malloc_rand_16.c":74:9)
#loc133 = loc("CWE680_Integer_Overflow_to_Buffer_Overflow__malloc_rand_16.c":71:18)
#loc134 = loc("CWE680_Integer_Overflow_to_Buffer_Overflow__malloc_rand_16.c":71:14)
#loc135 = loc("CWE680_Integer_Overflow_to_Buffer_Overflow__malloc_rand_16.c":71:21)
#loc136 = loc("CWE680_Integer_Overflow_to_Buffer_Overflow__malloc_rand_16.c":71:33)
#loc137 = loc("CWE680_Integer_Overflow_to_Buffer_Overflow__malloc_rand_16.c":71:23)
#loc138 = loc("CWE680_Integer_Overflow_to_Buffer_Overflow__malloc_rand_16.c":72:9)
#loc139 = loc("CWE680_Integer_Overflow_to_Buffer_Overflow__malloc_rand_16.c":73:29)
#loc140 = loc("CWE680_Integer_Overflow_to_Buffer_Overflow__malloc_rand_16.c":73:13)
#loc141 = loc("CWE680_Integer_Overflow_to_Buffer_Overflow__malloc_rand_16.c":73:24)
#loc142 = loc("CWE680_Integer_Overflow_to_Buffer_Overflow__malloc_rand_16.c":73:25)
#loc143 = loc("CWE680_Integer_Overflow_to_Buffer_Overflow__malloc_rand_16.c":71:40)
#loc144 = loc("CWE680_Integer_Overflow_to_Buffer_Overflow__malloc_rand_16.c":71:39)
#loc145 = loc("CWE680_Integer_Overflow_to_Buffer_Overflow__malloc_rand_16.c":75:22)
#loc146 = loc("CWE680_Integer_Overflow_to_Buffer_Overflow__malloc_rand_16.c":75:33)
#loc147 = loc("CWE680_Integer_Overflow_to_Buffer_Overflow__malloc_rand_16.c":75:34)
#loc148 = loc("CWE680_Integer_Overflow_to_Buffer_Overflow__malloc_rand_16.c":75:9)
#loc149 = loc("CWE680_Integer_Overflow_to_Buffer_Overflow__malloc_rand_16.c":76:14)
#loc150 = loc("CWE680_Integer_Overflow_to_Buffer_Overflow__malloc_rand_16.c":76:9)
#loc151 = loc(fused[#loc1, #loc2])
#loc152 = loc(fused[#loc3, #loc4])
#loc153 = loc(fused[#loc5, #loc6])
#loc154 = loc(fused[#loc7, #loc8])
#loc155 = loc(fused[#loc9, #loc10])
#loc156 = loc(fused[#loc11, #loc12])
#loc157 = loc(fused[#loc13, #loc14])
#loc158 = loc(fused[#loc15, #loc16])
#loc159 = loc(fused[#loc17, #loc18])
#loc160 = loc(fused[#loc21, #loc19])
#loc161 = loc(fused[#loc22, #loc23])
#loc162 = loc(fused[#loc26, #loc25])
#loc163 = loc(fused[#loc28, #loc29])
#loc164 = loc(fused[#loc32, #loc33])
#loc165 = loc(fused[#loc31, #loc33])
#loc166 = loc(fused[#loc30, #loc34])
#loc167 = loc(fused[#loc35, #loc34])
#loc168 = loc(fused[#loc36, #loc37])
#loc169 = loc(fused[#loc38, #loc39])
#loc170 = loc(fused[#loc40, #loc37])
#loc171 = loc(fused[#loc44, #loc45])
#loc172 = loc(fused[#loc47, #loc46])
#loc173 = loc(fused[#loc48, #loc49])
#loc174 = loc(fused[#loc51, #loc45])
#loc175 = loc(fused[#loc53, #loc52])
#loc176 = loc(fused[#loc57, #loc56])
#loc177 = loc(fused[#loc64, #loc65])
#loc178 = loc(fused[#loc66, #loc67])
#loc179 = loc(fused[#loc68, #loc69])
#loc180 = loc(fused[#loc70, #loc71])
#loc181 = loc(fused[#loc72, #loc73])
#loc182 = loc(fused[#loc78, #loc79])
#loc185 = loc(fused[#loc89, #loc90])
#loc186 = loc(fused[#loc93, #loc94])
#loc187 = loc(fused[#loc97, #loc96])
#loc188 = loc(fused[#loc98, #loc99])
#loc189 = loc(fused[#loc100, #loc101])
#loc190 = loc(fused[#loc102, #loc103])
#loc191 = loc(fused[#loc104, #loc105])
#loc192 = loc(fused[#loc108, #loc106])
#loc193 = loc(fused[#loc109, #loc110])
#loc194 = loc(fused[#loc113, #loc112])
#loc195 = loc(fused[#loc115, #loc116])
#loc196 = loc(fused[#loc119, #loc120])
#loc197 = loc(fused[#loc118, #loc120])
#loc198 = loc(fused[#loc117, #loc121])
#loc199 = loc(fused[#loc122, #loc121])
#loc200 = loc(fused[#loc123, #loc124])
#loc201 = loc(fused[#loc125, #loc126])
#loc202 = loc(fused[#loc127, #loc124])
#loc203 = loc(fused[#loc131, #loc132])
#loc204 = loc(fused[#loc134, #loc133])
#loc205 = loc(fused[#loc135, #loc136])
#loc206 = loc(fused[#loc138, #loc132])
#loc207 = loc(fused[#loc140, #loc139])
#loc208 = loc(fused[#loc144, #loc143])
