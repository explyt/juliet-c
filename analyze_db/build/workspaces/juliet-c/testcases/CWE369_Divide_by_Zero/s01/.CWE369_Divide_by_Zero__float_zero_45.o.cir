!s32i = !cir.int<s, 32>
!s8i = !cir.int<s, 8>
#fn_attr = #cir<extra({inline = #cir.inline<no>, nothrow = #cir.nothrow, optnone = #cir.optnone, uwtable = #cir.uwtable<async>})>
module @"/workspaces/juliet-c/testcases/CWE369_Divide_by_Zero/s01/CWE369_Divide_by_Zero__float_zero_45.c" attributes {cir.lang = #cir.lang<c>, cir.sob = #cir.signed_overflow_behavior<undefined>, cir.triple = "x86_64-unknown-linux-gnu", cir.type_size_info = #cir.type_size_info<char = 8, int = 32, size_t = 64>, cir.uwtable = #cir.uwtable<async>, dlti.dl_spec = #dlti.dl_spec<f80 = dense<128> : vector<2xi64>, i128 = dense<128> : vector<2xi64>, i16 = dense<16> : vector<2xi64>, i8 = dense<8> : vector<2xi64>, i1 = dense<8> : vector<2xi64>, !llvm.ptr = dense<64> : vector<4xi64>, f128 = dense<128> : vector<2xi64>, !llvm.ptr<270> = dense<32> : vector<4xi64>, f64 = dense<64> : vector<2xi64>, f16 = dense<16> : vector<2xi64>, i32 = dense<32> : vector<2xi64>, i64 = dense<64> : vector<2xi64>, !llvm.ptr<271> = dense<32> : vector<4xi64>, !llvm.ptr<272> = dense<64> : vector<4xi64>, "dlti.stack_alignment" = 128 : i64, "dlti.endianness" = "little", "dlti.mangling_mode" = "e">} {
  cir.global "private" internal dsolocal @CWE369_Divide_by_Zero__float_zero_45_badData = #cir.fp<0.000000e+00> : !cir.float {alignment = 4 : i64} loc(#loc97)
  cir.func no_proto @CWE369_Divide_by_Zero__float_zero_45_bad() extra(#fn_attr) {
    %0 = cir.alloca !cir.float, !cir.ptr<!cir.float>, ["data"] {alignment = 4 : i64} loc(#loc99)
    %1 = cir.const #cir.fp<0.000000e+00> : !cir.float loc(#loc7)
    cir.store %1, %0 : !cir.float, !cir.ptr<!cir.float> loc(#loc100)
    %2 = cir.const #cir.fp<0.000000e+00> : !cir.float loc(#loc9)
    cir.store %2, %0 : !cir.float, !cir.ptr<!cir.float> loc(#loc101)
    %3 = cir.load %0 : !cir.ptr<!cir.float>, !cir.float loc(#loc11)
    %4 = cir.get_global @CWE369_Divide_by_Zero__float_zero_45_badData : !cir.ptr<!cir.float> loc(#loc97)
    cir.store %3, %4 : !cir.float, !cir.ptr<!cir.float> loc(#loc102)
    %5 = cir.get_global @badSink : !cir.ptr<!cir.func<()>> loc(#loc103)
    cir.call %5() : (!cir.ptr<!cir.func<()>>) -> () loc(#loc13)
    cir.return loc(#loc4)
  } loc(#loc98)
  cir.func no_proto @CWE369_Divide_by_Zero__float_zero_45_good() extra(#fn_attr) {
    %0 = cir.get_global @goodG2B : !cir.ptr<!cir.func<()>> loc(#loc105)
    cir.call %0() : (!cir.ptr<!cir.func<()>>) -> () loc(#loc17)
    %1 = cir.get_global @goodB2G : !cir.ptr<!cir.func<()>> loc(#loc106)
    cir.call %1() : (!cir.ptr<!cir.func<()>>) -> () loc(#loc19)
    cir.return loc(#loc16)
  } loc(#loc104)
  cir.func private @printIntLine(!s32i) loc(#loc107)
  cir.func no_proto internal private @badSink() extra(#fn_attr) {
    %0 = cir.alloca !s32i, !cir.ptr<!s32i>, ["result", init] {alignment = 4 : i64} loc(#loc109)
    %1 = cir.alloca !cir.float, !cir.ptr<!cir.float>, ["data", init] {alignment = 4 : i64} loc(#loc110)
    %2 = cir.get_global @CWE369_Divide_by_Zero__float_zero_45_badData : !cir.ptr<!cir.float> loc(#loc97)
    %3 = cir.load %2 : !cir.ptr<!cir.float>, !cir.float loc(#loc28)
    cir.store %3, %1 : !cir.float, !cir.ptr<!cir.float> loc(#loc110)
    cir.br ^bb1 loc(#loc111)
  ^bb1:  // pred: ^bb0
    %4 = cir.const #cir.fp<1.000000e+02> : !cir.double loc(#loc31)
    %5 = cir.load %1 : !cir.ptr<!cir.float>, !cir.float loc(#loc32)
    %6 = cir.cast(floating, %5 : !cir.float), !cir.double loc(#loc32)
    %7 = cir.binop(div, %4, %6) : !cir.double loc(#loc112)
    %8 = cir.cast(float_to_int, %7 : !cir.double), !s32i loc(#loc112)
    cir.store %8, %0 : !s32i, !cir.ptr<!s32i> loc(#loc109)
    %9 = cir.load %0 : !cir.ptr<!s32i>, !s32i loc(#loc33)
    cir.call @printIntLine(%9) : (!s32i) -> () loc(#loc34)
    cir.br ^bb2 loc(#loc30)
  ^bb2:  // pred: ^bb1
    cir.return loc(#loc24)
  } loc(#loc108)
  cir.global "private" internal dsolocal @CWE369_Divide_by_Zero__float_zero_45_goodG2BData = #cir.fp<0.000000e+00> : !cir.float {alignment = 4 : i64} loc(#loc113)
  cir.func no_proto internal private @goodG2B() extra(#fn_attr) {
    %0 = cir.alloca !cir.float, !cir.ptr<!cir.float>, ["data"] {alignment = 4 : i64} loc(#loc115)
    %1 = cir.const #cir.fp<0.000000e+00> : !cir.float loc(#loc41)
    cir.store %1, %0 : !cir.float, !cir.ptr<!cir.float> loc(#loc116)
    %2 = cir.const #cir.fp<2.000000e+00> : !cir.float loc(#loc43)
    cir.store %2, %0 : !cir.float, !cir.ptr<!cir.float> loc(#loc117)
    %3 = cir.load %0 : !cir.ptr<!cir.float>, !cir.float loc(#loc45)
    %4 = cir.get_global @CWE369_Divide_by_Zero__float_zero_45_goodG2BData : !cir.ptr<!cir.float> loc(#loc113)
    cir.store %3, %4 : !cir.float, !cir.ptr<!cir.float> loc(#loc118)
    %5 = cir.get_global @goodG2BSink : !cir.ptr<!cir.func<()>> loc(#loc119)
    cir.call %5() : (!cir.ptr<!cir.func<()>>) -> () loc(#loc47)
    cir.return loc(#loc38)
  } loc(#loc114)
  cir.func no_proto internal private @goodG2BSink() extra(#fn_attr) {
    %0 = cir.alloca !s32i, !cir.ptr<!s32i>, ["result", init] {alignment = 4 : i64} loc(#loc121)
    %1 = cir.alloca !cir.float, !cir.ptr<!cir.float>, ["data", init] {alignment = 4 : i64} loc(#loc122)
    %2 = cir.get_global @CWE369_Divide_by_Zero__float_zero_45_goodG2BData : !cir.ptr<!cir.float> loc(#loc113)
    %3 = cir.load %2 : !cir.ptr<!cir.float>, !cir.float loc(#loc54)
    cir.store %3, %1 : !cir.float, !cir.ptr<!cir.float> loc(#loc122)
    cir.br ^bb1 loc(#loc123)
  ^bb1:  // pred: ^bb0
    %4 = cir.const #cir.fp<1.000000e+02> : !cir.double loc(#loc57)
    %5 = cir.load %1 : !cir.ptr<!cir.float>, !cir.float loc(#loc58)
    %6 = cir.cast(floating, %5 : !cir.float), !cir.double loc(#loc58)
    %7 = cir.binop(div, %4, %6) : !cir.double loc(#loc124)
    %8 = cir.cast(float_to_int, %7 : !cir.double), !s32i loc(#loc124)
    cir.store %8, %0 : !s32i, !cir.ptr<!s32i> loc(#loc121)
    %9 = cir.load %0 : !cir.ptr<!s32i>, !s32i loc(#loc59)
    cir.call @printIntLine(%9) : (!s32i) -> () loc(#loc60)
    cir.br ^bb2 loc(#loc56)
  ^bb2:  // pred: ^bb1
    cir.return loc(#loc50)
  } loc(#loc120)
  cir.global "private" internal dsolocal @CWE369_Divide_by_Zero__float_zero_45_goodB2GData = #cir.fp<0.000000e+00> : !cir.float {alignment = 4 : i64} loc(#loc125)
  cir.func no_proto internal private @goodB2G() extra(#fn_attr) {
    %0 = cir.alloca !cir.float, !cir.ptr<!cir.float>, ["data"] {alignment = 4 : i64} loc(#loc127)
    %1 = cir.const #cir.fp<0.000000e+00> : !cir.float loc(#loc67)
    cir.store %1, %0 : !cir.float, !cir.ptr<!cir.float> loc(#loc128)
    %2 = cir.const #cir.fp<0.000000e+00> : !cir.float loc(#loc69)
    cir.store %2, %0 : !cir.float, !cir.ptr<!cir.float> loc(#loc129)
    %3 = cir.load %0 : !cir.ptr<!cir.float>, !cir.float loc(#loc71)
    %4 = cir.get_global @CWE369_Divide_by_Zero__float_zero_45_goodB2GData : !cir.ptr<!cir.float> loc(#loc125)
    cir.store %3, %4 : !cir.float, !cir.ptr<!cir.float> loc(#loc130)
    %5 = cir.get_global @goodB2GSink : !cir.ptr<!cir.func<()>> loc(#loc131)
    cir.call %5() : (!cir.ptr<!cir.func<()>>) -> () loc(#loc73)
    cir.return loc(#loc64)
  } loc(#loc126)
  cir.func private @printLine(!cir.ptr<!s8i>) loc(#loc132)
  cir.global "private" constant cir_private dsolocal @".str" = #cir.const_array<"This would result in a divide by zero\00" : !cir.array<!s8i x 38>> : !cir.array<!s8i x 38> {alignment = 1 : i64} loc(#loc77)
  cir.func no_proto internal private @goodB2GSink() extra(#fn_attr) {
    %0 = cir.alloca !s32i, !cir.ptr<!s32i>, ["result", init] {alignment = 4 : i64} loc(#loc134)
    %1 = cir.alloca !cir.float, !cir.ptr<!cir.float>, ["data", init] {alignment = 4 : i64} loc(#loc135)
    %2 = cir.get_global @CWE369_Divide_by_Zero__float_zero_45_goodB2GData : !cir.ptr<!cir.float> loc(#loc125)
    %3 = cir.load %2 : !cir.ptr<!cir.float>, !cir.float loc(#loc83)
    cir.store %3, %1 : !cir.float, !cir.ptr<!cir.float> loc(#loc135)
    cir.br ^bb1 loc(#loc136)
  ^bb1:  // pred: ^bb0
    %4 = cir.load %1 : !cir.ptr<!cir.float>, !cir.float loc(#loc86)
    %5 = cir.cast(floating, %4 : !cir.float), !cir.double loc(#loc86)
    %6 = cir.fabs %5 : !cir.double loc(#loc86)
    %7 = cir.const #cir.fp<9.9999999999999995E-7> : !cir.double loc(#loc87)
    %8 = cir.cmp(gt, %6, %7) : !cir.double, !cir.bool loc(#loc137)
    cir.brcond %8 ^bb2, ^bb3 loc(#loc138)
  ^bb2:  // pred: ^bb1
    %9 = cir.const #cir.fp<1.000000e+02> : !cir.double loc(#loc92)
    %10 = cir.load %1 : !cir.ptr<!cir.float>, !cir.float loc(#loc93)
    %11 = cir.cast(floating, %10 : !cir.float), !cir.double loc(#loc93)
    %12 = cir.binop(div, %9, %11) : !cir.double loc(#loc139)
    %13 = cir.cast(float_to_int, %12 : !cir.double), !s32i loc(#loc139)
    cir.store %13, %0 : !s32i, !cir.ptr<!s32i> loc(#loc134)
    %14 = cir.load %0 : !cir.ptr<!s32i>, !s32i loc(#loc94)
    cir.call @printIntLine(%14) : (!s32i) -> () loc(#loc95)
    cir.br ^bb4 loc(#loc90)
  ^bb3:  // pred: ^bb1
    %15 = cir.get_global @".str" : !cir.ptr<!cir.array<!s8i x 38>> loc(#loc77)
    %16 = cir.cast(array_to_ptrdecay, %15 : !cir.ptr<!cir.array<!s8i x 38>>), !cir.ptr<!s8i> loc(#loc77)
    cir.call @printLine(%16) : (!cir.ptr<!s8i>) -> () loc(#loc96)
    cir.br ^bb4 loc(#loc85)
  ^bb4:  // 2 preds: ^bb2, ^bb3
    cir.br ^bb5 loc(#loc85)
  ^bb5:  // pred: ^bb4
    cir.return loc(#loc79)
  } loc(#loc133)
} loc(#loc)
#loc = loc("/workspaces/juliet-c/testcases/CWE369_Divide_by_Zero/s01/CWE369_Divide_by_Zero__float_zero_45.c":0:0)
#loc1 = loc("CWE369_Divide_by_Zero__float_zero_45.c":22:1)
#loc2 = loc("CWE369_Divide_by_Zero__float_zero_45.c":22:14)
#loc3 = loc("CWE369_Divide_by_Zero__float_zero_45.c":38:1)
#loc4 = loc("CWE369_Divide_by_Zero__float_zero_45.c":47:1)
#loc5 = loc("CWE369_Divide_by_Zero__float_zero_45.c":40:5)
#loc6 = loc("CWE369_Divide_by_Zero__float_zero_45.c":40:11)
#loc7 = loc("CWE369_Divide_by_Zero__float_zero_45.c":42:12)
#loc8 = loc("CWE369_Divide_by_Zero__float_zero_45.c":42:5)
#loc9 = loc("CWE369_Divide_by_Zero__float_zero_45.c":44:12)
#loc10 = loc("CWE369_Divide_by_Zero__float_zero_45.c":44:5)
#loc11 = loc("CWE369_Divide_by_Zero__float_zero_45.c":45:52)
#loc12 = loc("CWE369_Divide_by_Zero__float_zero_45.c":45:5)
#loc13 = loc("CWE369_Divide_by_Zero__float_zero_45.c":46:5)
#loc14 = loc("CWE369_Divide_by_Zero__float_zero_45.c":46:13)
#loc15 = loc("CWE369_Divide_by_Zero__float_zero_45.c":102:1)
#loc16 = loc("CWE369_Divide_by_Zero__float_zero_45.c":106:1)
#loc17 = loc("CWE369_Divide_by_Zero__float_zero_45.c":104:5)
#loc18 = loc("CWE369_Divide_by_Zero__float_zero_45.c":104:13)
#loc19 = loc("CWE369_Divide_by_Zero__float_zero_45.c":105:5)
#loc20 = loc("CWE369_Divide_by_Zero__float_zero_45.c":105:13)
#loc21 = loc("../../../testcasesupport/std_testcase_io.h":18:1)
#loc22 = loc("../../../testcasesupport/std_testcase_io.h":18:33)
#loc23 = loc("CWE369_Divide_by_Zero__float_zero_45.c":28:1)
#loc24 = loc("CWE369_Divide_by_Zero__float_zero_45.c":36:1)
#loc25 = loc("CWE369_Divide_by_Zero__float_zero_45.c":33:9)
#loc26 = loc("CWE369_Divide_by_Zero__float_zero_45.c":33:40)
#loc27 = loc("CWE369_Divide_by_Zero__float_zero_45.c":30:5)
#loc28 = loc("CWE369_Divide_by_Zero__float_zero_45.c":30:18)
#loc29 = loc("CWE369_Divide_by_Zero__float_zero_45.c":31:5)
#loc30 = loc("CWE369_Divide_by_Zero__float_zero_45.c":35:5)
#loc31 = loc("CWE369_Divide_by_Zero__float_zero_45.c":33:28)
#loc32 = loc("CWE369_Divide_by_Zero__float_zero_45.c":33:36)
#loc33 = loc("CWE369_Divide_by_Zero__float_zero_45.c":34:22)
#loc34 = loc("CWE369_Divide_by_Zero__float_zero_45.c":34:9)
#loc35 = loc("CWE369_Divide_by_Zero__float_zero_45.c":23:1)
#loc36 = loc("CWE369_Divide_by_Zero__float_zero_45.c":23:14)
#loc37 = loc("CWE369_Divide_by_Zero__float_zero_45.c":64:1)
#loc38 = loc("CWE369_Divide_by_Zero__float_zero_45.c":73:1)
#loc39 = loc("CWE369_Divide_by_Zero__float_zero_45.c":66:5)
#loc40 = loc("CWE369_Divide_by_Zero__float_zero_45.c":66:11)
#loc41 = loc("CWE369_Divide_by_Zero__float_zero_45.c":68:12)
#loc42 = loc("CWE369_Divide_by_Zero__float_zero_45.c":68:5)
#loc43 = loc("CWE369_Divide_by_Zero__float_zero_45.c":70:12)
#loc44 = loc("CWE369_Divide_by_Zero__float_zero_45.c":70:5)
#loc45 = loc("CWE369_Divide_by_Zero__float_zero_45.c":71:56)
#loc46 = loc("CWE369_Divide_by_Zero__float_zero_45.c":71:5)
#loc47 = loc("CWE369_Divide_by_Zero__float_zero_45.c":72:5)
#loc48 = loc("CWE369_Divide_by_Zero__float_zero_45.c":72:17)
#loc49 = loc("CWE369_Divide_by_Zero__float_zero_45.c":54:1)
#loc50 = loc("CWE369_Divide_by_Zero__float_zero_45.c":62:1)
#loc51 = loc("CWE369_Divide_by_Zero__float_zero_45.c":59:9)
#loc52 = loc("CWE369_Divide_by_Zero__float_zero_45.c":59:40)
#loc53 = loc("CWE369_Divide_by_Zero__float_zero_45.c":56:5)
#loc54 = loc("CWE369_Divide_by_Zero__float_zero_45.c":56:18)
#loc55 = loc("CWE369_Divide_by_Zero__float_zero_45.c":57:5)
#loc56 = loc("CWE369_Divide_by_Zero__float_zero_45.c":61:5)
#loc57 = loc("CWE369_Divide_by_Zero__float_zero_45.c":59:28)
#loc58 = loc("CWE369_Divide_by_Zero__float_zero_45.c":59:36)
#loc59 = loc("CWE369_Divide_by_Zero__float_zero_45.c":60:22)
#loc60 = loc("CWE369_Divide_by_Zero__float_zero_45.c":60:9)
#loc61 = loc("CWE369_Divide_by_Zero__float_zero_45.c":24:1)
#loc62 = loc("CWE369_Divide_by_Zero__float_zero_45.c":24:14)
#loc63 = loc("CWE369_Divide_by_Zero__float_zero_45.c":91:1)
#loc64 = loc("CWE369_Divide_by_Zero__float_zero_45.c":100:1)
#loc65 = loc("CWE369_Divide_by_Zero__float_zero_45.c":93:5)
#loc66 = loc("CWE369_Divide_by_Zero__float_zero_45.c":93:11)
#loc67 = loc("CWE369_Divide_by_Zero__float_zero_45.c":95:12)
#loc68 = loc("CWE369_Divide_by_Zero__float_zero_45.c":95:5)
#loc69 = loc("CWE369_Divide_by_Zero__float_zero_45.c":97:12)
#loc70 = loc("CWE369_Divide_by_Zero__float_zero_45.c":97:5)
#loc71 = loc("CWE369_Divide_by_Zero__float_zero_45.c":98:56)
#loc72 = loc("CWE369_Divide_by_Zero__float_zero_45.c":98:5)
#loc73 = loc("CWE369_Divide_by_Zero__float_zero_45.c":99:5)
#loc74 = loc("CWE369_Divide_by_Zero__float_zero_45.c":99:17)
#loc75 = loc("../../../testcasesupport/std_testcase_io.h":14:1)
#loc76 = loc("../../../testcasesupport/std_testcase_io.h":14:33)
#loc77 = loc("CWE369_Divide_by_Zero__float_zero_45.c":87:19)
#loc78 = loc("CWE369_Divide_by_Zero__float_zero_45.c":76:1)
#loc79 = loc("CWE369_Divide_by_Zero__float_zero_45.c":89:1)
#loc80 = loc("CWE369_Divide_by_Zero__float_zero_45.c":82:9)
#loc81 = loc("CWE369_Divide_by_Zero__float_zero_45.c":82:40)
#loc82 = loc("CWE369_Divide_by_Zero__float_zero_45.c":78:5)
#loc83 = loc("CWE369_Divide_by_Zero__float_zero_45.c":78:18)
#loc84 = loc("CWE369_Divide_by_Zero__float_zero_45.c":80:5)
#loc85 = loc("CWE369_Divide_by_Zero__float_zero_45.c":88:5)
#loc86 = loc("CWE369_Divide_by_Zero__float_zero_45.c":80:13)
#loc87 = loc("CWE369_Divide_by_Zero__float_zero_45.c":80:21)
#loc88 = loc("CWE369_Divide_by_Zero__float_zero_45.c":80:8)
#loc89 = loc("CWE369_Divide_by_Zero__float_zero_45.c":81:5)
#loc90 = loc("CWE369_Divide_by_Zero__float_zero_45.c":84:5)
#loc91 = loc("CWE369_Divide_by_Zero__float_zero_45.c":86:5)
#loc92 = loc("CWE369_Divide_by_Zero__float_zero_45.c":82:28)
#loc93 = loc("CWE369_Divide_by_Zero__float_zero_45.c":82:36)
#loc94 = loc("CWE369_Divide_by_Zero__float_zero_45.c":83:22)
#loc95 = loc("CWE369_Divide_by_Zero__float_zero_45.c":83:9)
#loc96 = loc("CWE369_Divide_by_Zero__float_zero_45.c":87:9)
#loc97 = loc(fused[#loc1, #loc2])
#loc98 = loc(fused[#loc3, #loc4])
#loc99 = loc(fused[#loc5, #loc6])
#loc100 = loc(fused[#loc8, #loc7])
#loc101 = loc(fused[#loc10, #loc9])
#loc102 = loc(fused[#loc12, #loc11])
#loc103 = loc(fused[#loc13, #loc14])
#loc104 = loc(fused[#loc15, #loc16])
#loc105 = loc(fused[#loc17, #loc18])
#loc106 = loc(fused[#loc19, #loc20])
#loc107 = loc(fused[#loc21, #loc22])
#loc108 = loc(fused[#loc23, #loc24])
#loc109 = loc(fused[#loc25, #loc26])
#loc110 = loc(fused[#loc27, #loc28])
#loc111 = loc(fused[#loc29, #loc30])
#loc112 = loc(fused[#loc31, #loc32])
#loc113 = loc(fused[#loc35, #loc36])
#loc114 = loc(fused[#loc37, #loc38])
#loc115 = loc(fused[#loc39, #loc40])
#loc116 = loc(fused[#loc42, #loc41])
#loc117 = loc(fused[#loc44, #loc43])
#loc118 = loc(fused[#loc46, #loc45])
#loc119 = loc(fused[#loc47, #loc48])
#loc120 = loc(fused[#loc49, #loc50])
#loc121 = loc(fused[#loc51, #loc52])
#loc122 = loc(fused[#loc53, #loc54])
#loc123 = loc(fused[#loc55, #loc56])
#loc124 = loc(fused[#loc57, #loc58])
#loc125 = loc(fused[#loc61, #loc62])
#loc126 = loc(fused[#loc63, #loc64])
#loc127 = loc(fused[#loc65, #loc66])
#loc128 = loc(fused[#loc68, #loc67])
#loc129 = loc(fused[#loc70, #loc69])
#loc130 = loc(fused[#loc72, #loc71])
#loc131 = loc(fused[#loc73, #loc74])
#loc132 = loc(fused[#loc75, #loc76])
#loc133 = loc(fused[#loc78, #loc79])
#loc134 = loc(fused[#loc80, #loc81])
#loc135 = loc(fused[#loc82, #loc83])
#loc136 = loc(fused[#loc84, #loc85])
#loc137 = loc(fused[#loc88, #loc87])
#loc138 = loc(fused[#loc89, #loc90, #loc91, #loc85])
#loc139 = loc(fused[#loc92, #loc93])
