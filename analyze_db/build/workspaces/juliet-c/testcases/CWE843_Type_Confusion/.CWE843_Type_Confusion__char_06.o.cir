!s32i = !cir.int<s, 32>
!s8i = !cir.int<s, 8>
!void = !cir.void
#fn_attr = #cir<extra({inline = #cir.inline<no>, nothrow = #cir.nothrow, optnone = #cir.optnone, uwtable = #cir.uwtable<async>})>
module @"/workspaces/juliet-c/testcases/CWE843_Type_Confusion/CWE843_Type_Confusion__char_06.c" attributes {cir.lang = #cir.lang<c>, cir.sob = #cir.signed_overflow_behavior<undefined>, cir.triple = "x86_64-unknown-linux-gnu", cir.type_size_info = #cir.type_size_info<char = 8, int = 32, size_t = 64>, cir.uwtable = #cir.uwtable<async>, dlti.dl_spec = #dlti.dl_spec<f128 = dense<128> : vector<2xi64>, !llvm.ptr<271> = dense<32> : vector<4xi64>, !llvm.ptr<272> = dense<64> : vector<4xi64>, i64 = dense<64> : vector<2xi64>, !llvm.ptr<270> = dense<32> : vector<4xi64>, i32 = dense<32> : vector<2xi64>, i16 = dense<16> : vector<2xi64>, f16 = dense<16> : vector<2xi64>, f64 = dense<64> : vector<2xi64>, !llvm.ptr = dense<64> : vector<4xi64>, i1 = dense<8> : vector<2xi64>, i8 = dense<8> : vector<2xi64>, i128 = dense<128> : vector<2xi64>, f80 = dense<128> : vector<2xi64>, "dlti.mangling_mode" = "e", "dlti.endianness" = "little", "dlti.stack_alignment" = 128 : i64>} {
  cir.func private @printIntLine(!s32i) loc(#loc78)
  cir.func no_proto @CWE843_Type_Confusion__char_06_bad() extra(#fn_attr) {
    %0 = cir.alloca !s8i, !cir.ptr<!s8i>, ["charBuffer", init] {alignment = 1 : i64} loc(#loc80)
    %1 = cir.alloca !cir.ptr<!void>, !cir.ptr<!cir.ptr<!void>>, ["data"] {alignment = 8 : i64} loc(#loc81)
    %2 = cir.const #cir.ptr<null> : !cir.ptr<!void> loc(#loc9)
    cir.store %2, %1 : !cir.ptr<!void>, !cir.ptr<!cir.ptr<!void>> loc(#loc82)
    cir.br ^bb1 loc(#loc83)
  ^bb1:  // pred: ^bb0
    %3 = cir.const #cir.int<5> : !s32i loc(#loc13)
    %4 = cir.const #cir.int<5> : !s32i loc(#loc14)
    %5 = cir.cmp(eq, %3, %4) : !s32i, !cir.bool loc(#loc84)
    cir.brcond %5 ^bb2, ^bb5 loc(#loc85)
  ^bb2:  // pred: ^bb1
    cir.br ^bb3 loc(#loc86)
  ^bb3:  // pred: ^bb2
    %6 = cir.const #cir.int<97> : !s32i loc(#loc6)
    %7 = cir.cast(integral, %6 : !s32i), !s8i loc(#loc6)
    cir.store %7, %0 : !s8i, !cir.ptr<!s8i> loc(#loc80)
    %8 = cir.cast(bitcast, %0 : !cir.ptr<!s8i>), !cir.ptr<!void> loc(#loc87)
    cir.store %8, %1 : !cir.ptr<!void>, !cir.ptr<!cir.ptr<!void>> loc(#loc88)
    cir.br ^bb4 loc(#loc17)
  ^bb4:  // pred: ^bb3
    cir.br ^bb5 loc(#loc12)
  ^bb5:  // 2 preds: ^bb1, ^bb4
    cir.br ^bb6 loc(#loc12)
  ^bb6:  // pred: ^bb5
    %9 = cir.load %1 : !cir.ptr<!cir.ptr<!void>>, !cir.ptr<!void> loc(#loc21)
    %10 = cir.cast(bitcast, %9 : !cir.ptr<!void>), !cir.ptr<!s32i> loc(#loc21)
    %11 = cir.load %10 : !cir.ptr<!s32i>, !s32i loc(#loc22)
    cir.call @printIntLine(%11) : (!s32i) -> () loc(#loc23)
    cir.return loc(#loc4)
  } loc(#loc79)
  cir.func no_proto @CWE843_Type_Confusion__char_06_good() extra(#fn_attr) {
    %0 = cir.get_global @goodG2B1 : !cir.ptr<!cir.func<()>> loc(#loc90)
    cir.call %0() : (!cir.ptr<!cir.func<()>>) -> () loc(#loc26)
    %1 = cir.get_global @goodG2B2 : !cir.ptr<!cir.func<()>> loc(#loc91)
    cir.call %1() : (!cir.ptr<!cir.func<()>>) -> () loc(#loc28)
    cir.return loc(#loc25)
  } loc(#loc89)
  cir.func private @printLine(!cir.ptr<!s8i>) loc(#loc92)
  cir.global "private" constant cir_private dsolocal @".str" = #cir.const_array<"Benign, fixed string\00" : !cir.array<!s8i x 21>> : !cir.array<!s8i x 21> {alignment = 1 : i64} loc(#loc32)
  cir.func no_proto internal private @goodG2B1() extra(#fn_attr) {
    %0 = cir.alloca !s32i, !cir.ptr<!s32i>, ["intBuffer", init] {alignment = 4 : i64} loc(#loc94)
    %1 = cir.alloca !cir.ptr<!void>, !cir.ptr<!cir.ptr<!void>>, ["data"] {alignment = 8 : i64} loc(#loc95)
    %2 = cir.const #cir.ptr<null> : !cir.ptr<!void> loc(#loc39)
    cir.store %2, %1 : !cir.ptr<!void>, !cir.ptr<!cir.ptr<!void>> loc(#loc96)
    cir.br ^bb1 loc(#loc97)
  ^bb1:  // pred: ^bb0
    %3 = cir.const #cir.int<5> : !s32i loc(#loc43)
    %4 = cir.const #cir.int<5> : !s32i loc(#loc44)
    %5 = cir.cmp(ne, %3, %4) : !s32i, !cir.bool loc(#loc98)
    cir.brcond %5 ^bb2, ^bb3 loc(#loc99)
  ^bb2:  // pred: ^bb1
    %6 = cir.get_global @".str" : !cir.ptr<!cir.array<!s8i x 21>> loc(#loc32)
    %7 = cir.cast(array_to_ptrdecay, %6 : !cir.ptr<!cir.array<!s8i x 21>>), !cir.ptr<!s8i> loc(#loc32)
    cir.call @printLine(%7) : (!cir.ptr<!s8i>) -> () loc(#loc48)
    cir.br ^bb6 loc(#loc46)
  ^bb3:  // pred: ^bb1
    cir.br ^bb4 loc(#loc100)
  ^bb4:  // pred: ^bb3
    %8 = cir.const #cir.int<8> : !s32i loc(#loc36)
    cir.store %8, %0 : !s32i, !cir.ptr<!s32i> loc(#loc94)
    %9 = cir.cast(bitcast, %0 : !cir.ptr<!s32i>), !cir.ptr<!void> loc(#loc101)
    cir.store %9, %1 : !cir.ptr<!void>, !cir.ptr<!cir.ptr<!void>> loc(#loc102)
    cir.br ^bb5 loc(#loc50)
  ^bb5:  // pred: ^bb4
    cir.br ^bb6 loc(#loc42)
  ^bb6:  // 2 preds: ^bb2, ^bb5
    cir.br ^bb7 loc(#loc42)
  ^bb7:  // pred: ^bb6
    %10 = cir.load %1 : !cir.ptr<!cir.ptr<!void>>, !cir.ptr<!void> loc(#loc54)
    %11 = cir.cast(bitcast, %10 : !cir.ptr<!void>), !cir.ptr<!s32i> loc(#loc54)
    %12 = cir.load %11 : !cir.ptr<!s32i>, !s32i loc(#loc55)
    cir.call @printIntLine(%12) : (!s32i) -> () loc(#loc56)
    cir.return loc(#loc34)
  } loc(#loc93)
  cir.func no_proto internal private @goodG2B2() extra(#fn_attr) {
    %0 = cir.alloca !s32i, !cir.ptr<!s32i>, ["intBuffer", init] {alignment = 4 : i64} loc(#loc104)
    %1 = cir.alloca !cir.ptr<!void>, !cir.ptr<!cir.ptr<!void>>, ["data"] {alignment = 8 : i64} loc(#loc105)
    %2 = cir.const #cir.ptr<null> : !cir.ptr<!void> loc(#loc63)
    cir.store %2, %1 : !cir.ptr<!void>, !cir.ptr<!cir.ptr<!void>> loc(#loc106)
    cir.br ^bb1 loc(#loc107)
  ^bb1:  // pred: ^bb0
    %3 = cir.const #cir.int<5> : !s32i loc(#loc67)
    %4 = cir.const #cir.int<5> : !s32i loc(#loc68)
    %5 = cir.cmp(eq, %3, %4) : !s32i, !cir.bool loc(#loc108)
    cir.brcond %5 ^bb2, ^bb5 loc(#loc109)
  ^bb2:  // pred: ^bb1
    cir.br ^bb3 loc(#loc110)
  ^bb3:  // pred: ^bb2
    %6 = cir.const #cir.int<8> : !s32i loc(#loc60)
    cir.store %6, %0 : !s32i, !cir.ptr<!s32i> loc(#loc104)
    %7 = cir.cast(bitcast, %0 : !cir.ptr<!s32i>), !cir.ptr<!void> loc(#loc111)
    cir.store %7, %1 : !cir.ptr<!void>, !cir.ptr<!cir.ptr<!void>> loc(#loc112)
    cir.br ^bb4 loc(#loc71)
  ^bb4:  // pred: ^bb3
    cir.br ^bb5 loc(#loc66)
  ^bb5:  // 2 preds: ^bb1, ^bb4
    cir.br ^bb6 loc(#loc66)
  ^bb6:  // pred: ^bb5
    %8 = cir.load %1 : !cir.ptr<!cir.ptr<!void>>, !cir.ptr<!void> loc(#loc75)
    %9 = cir.cast(bitcast, %8 : !cir.ptr<!void>), !cir.ptr<!s32i> loc(#loc75)
    %10 = cir.load %9 : !cir.ptr<!s32i>, !s32i loc(#loc76)
    cir.call @printIntLine(%10) : (!s32i) -> () loc(#loc77)
    cir.return loc(#loc58)
  } loc(#loc103)
} loc(#loc)
#loc = loc("/workspaces/juliet-c/testcases/CWE843_Type_Confusion/CWE843_Type_Confusion__char_06.c":0:0)
#loc1 = loc("../../testcasesupport/std_testcase_io.h":18:1)
#loc2 = loc("../../testcasesupport/std_testcase_io.h":18:33)
#loc3 = loc("CWE843_Type_Confusion__char_06.c":25:1)
#loc4 = loc("CWE843_Type_Confusion__char_06.c":40:1)
#loc5 = loc("CWE843_Type_Confusion__char_06.c":34:13)
#loc6 = loc("CWE843_Type_Confusion__char_06.c":34:31)
#loc7 = loc("CWE843_Type_Confusion__char_06.c":27:5)
#loc8 = loc("CWE843_Type_Confusion__char_06.c":27:12)
#loc9 = loc("CWE843_Type_Confusion__char_06.c":29:12)
#loc10 = loc("CWE843_Type_Confusion__char_06.c":29:5)
#loc11 = loc("CWE843_Type_Confusion__char_06.c":30:5)
#loc12 = loc("CWE843_Type_Confusion__char_06.c":37:5)
#loc13 = loc("CWE843_Type_Confusion__char_06.c":30:8)
#loc14 = loc("CWE843_Type_Confusion__char_06.c":30:27)
#loc15 = loc("CWE843_Type_Confusion__char_06.c":31:5)
#loc16 = loc("CWE843_Type_Confusion__char_06.c":32:9)
#loc17 = loc("CWE843_Type_Confusion__char_06.c":36:9)
#loc18 = loc("CWE843_Type_Confusion__char_06.c":35:20)
#loc19 = loc("CWE843_Type_Confusion__char_06.c":35:21)
#loc20 = loc("CWE843_Type_Confusion__char_06.c":35:13)
#loc21 = loc("CWE843_Type_Confusion__char_06.c":39:26)
#loc22 = loc("CWE843_Type_Confusion__char_06.c":39:18)
#loc23 = loc("CWE843_Type_Confusion__char_06.c":39:5)
#loc24 = loc("CWE843_Type_Confusion__char_06.c":87:1)
#loc25 = loc("CWE843_Type_Confusion__char_06.c":91:1)
#loc26 = loc("CWE843_Type_Confusion__char_06.c":89:5)
#loc27 = loc("CWE843_Type_Confusion__char_06.c":89:14)
#loc28 = loc("CWE843_Type_Confusion__char_06.c":90:5)
#loc29 = loc("CWE843_Type_Confusion__char_06.c":90:14)
#loc30 = loc("../../testcasesupport/std_testcase_io.h":14:1)
#loc31 = loc("../../testcasesupport/std_testcase_io.h":14:33)
#loc32 = loc("CWE843_Type_Confusion__char_06.c":55:19)
#loc33 = loc("CWE843_Type_Confusion__char_06.c":47:1)
#loc34 = loc("CWE843_Type_Confusion__char_06.c":67:1)
#loc35 = loc("CWE843_Type_Confusion__char_06.c":61:13)
#loc36 = loc("CWE843_Type_Confusion__char_06.c":61:29)
#loc37 = loc("CWE843_Type_Confusion__char_06.c":49:5)
#loc38 = loc("CWE843_Type_Confusion__char_06.c":49:12)
#loc39 = loc("CWE843_Type_Confusion__char_06.c":51:12)
#loc40 = loc("CWE843_Type_Confusion__char_06.c":51:5)
#loc41 = loc("CWE843_Type_Confusion__char_06.c":52:5)
#loc42 = loc("CWE843_Type_Confusion__char_06.c":64:5)
#loc43 = loc("CWE843_Type_Confusion__char_06.c":52:8)
#loc44 = loc("CWE843_Type_Confusion__char_06.c":52:27)
#loc45 = loc("CWE843_Type_Confusion__char_06.c":53:5)
#loc46 = loc("CWE843_Type_Confusion__char_06.c":56:5)
#loc47 = loc("CWE843_Type_Confusion__char_06.c":58:5)
#loc48 = loc("CWE843_Type_Confusion__char_06.c":55:9)
#loc49 = loc("CWE843_Type_Confusion__char_06.c":59:9)
#loc50 = loc("CWE843_Type_Confusion__char_06.c":63:9)
#loc51 = loc("CWE843_Type_Confusion__char_06.c":62:20)
#loc52 = loc("CWE843_Type_Confusion__char_06.c":62:21)
#loc53 = loc("CWE843_Type_Confusion__char_06.c":62:13)
#loc54 = loc("CWE843_Type_Confusion__char_06.c":66:26)
#loc55 = loc("CWE843_Type_Confusion__char_06.c":66:18)
#loc56 = loc("CWE843_Type_Confusion__char_06.c":66:5)
#loc57 = loc("CWE843_Type_Confusion__char_06.c":70:1)
#loc58 = loc("CWE843_Type_Confusion__char_06.c":85:1)
#loc59 = loc("CWE843_Type_Confusion__char_06.c":79:13)
#loc60 = loc("CWE843_Type_Confusion__char_06.c":79:29)
#loc61 = loc("CWE843_Type_Confusion__char_06.c":72:5)
#loc62 = loc("CWE843_Type_Confusion__char_06.c":72:12)
#loc63 = loc("CWE843_Type_Confusion__char_06.c":74:12)
#loc64 = loc("CWE843_Type_Confusion__char_06.c":74:5)
#loc65 = loc("CWE843_Type_Confusion__char_06.c":75:5)
#loc66 = loc("CWE843_Type_Confusion__char_06.c":82:5)
#loc67 = loc("CWE843_Type_Confusion__char_06.c":75:8)
#loc68 = loc("CWE843_Type_Confusion__char_06.c":75:27)
#loc69 = loc("CWE843_Type_Confusion__char_06.c":76:5)
#loc70 = loc("CWE843_Type_Confusion__char_06.c":77:9)
#loc71 = loc("CWE843_Type_Confusion__char_06.c":81:9)
#loc72 = loc("CWE843_Type_Confusion__char_06.c":80:20)
#loc73 = loc("CWE843_Type_Confusion__char_06.c":80:21)
#loc74 = loc("CWE843_Type_Confusion__char_06.c":80:13)
#loc75 = loc("CWE843_Type_Confusion__char_06.c":84:26)
#loc76 = loc("CWE843_Type_Confusion__char_06.c":84:18)
#loc77 = loc("CWE843_Type_Confusion__char_06.c":84:5)
#loc78 = loc(fused[#loc1, #loc2])
#loc79 = loc(fused[#loc3, #loc4])
#loc80 = loc(fused[#loc5, #loc6])
#loc81 = loc(fused[#loc7, #loc8])
#loc82 = loc(fused[#loc10, #loc9])
#loc83 = loc(fused[#loc11, #loc12])
#loc84 = loc(fused[#loc13, #loc14])
#loc85 = loc(fused[#loc15, #loc12])
#loc86 = loc(fused[#loc16, #loc17])
#loc87 = loc(fused[#loc18, #loc19])
#loc88 = loc(fused[#loc20, #loc19])
#loc89 = loc(fused[#loc24, #loc25])
#loc90 = loc(fused[#loc26, #loc27])
#loc91 = loc(fused[#loc28, #loc29])
#loc92 = loc(fused[#loc30, #loc31])
#loc93 = loc(fused[#loc33, #loc34])
#loc94 = loc(fused[#loc35, #loc36])
#loc95 = loc(fused[#loc37, #loc38])
#loc96 = loc(fused[#loc40, #loc39])
#loc97 = loc(fused[#loc41, #loc42])
#loc98 = loc(fused[#loc43, #loc44])
#loc99 = loc(fused[#loc45, #loc46, #loc47, #loc42])
#loc100 = loc(fused[#loc49, #loc50])
#loc101 = loc(fused[#loc51, #loc52])
#loc102 = loc(fused[#loc53, #loc52])
#loc103 = loc(fused[#loc57, #loc58])
#loc104 = loc(fused[#loc59, #loc60])
#loc105 = loc(fused[#loc61, #loc62])
#loc106 = loc(fused[#loc64, #loc63])
#loc107 = loc(fused[#loc65, #loc66])
#loc108 = loc(fused[#loc67, #loc68])
#loc109 = loc(fused[#loc69, #loc66])
#loc110 = loc(fused[#loc70, #loc71])
#loc111 = loc(fused[#loc72, #loc73])
#loc112 = loc(fused[#loc74, #loc73])
