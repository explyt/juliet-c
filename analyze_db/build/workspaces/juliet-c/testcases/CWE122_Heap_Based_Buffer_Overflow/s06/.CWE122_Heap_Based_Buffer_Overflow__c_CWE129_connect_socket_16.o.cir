!s32i = !cir.int<s, 32>
!s64i = !cir.int<s, 64>
!s8i = !cir.int<s, 8>
!u16i = !cir.int<u, 16>
!u32i = !cir.int<u, 32>
!u64i = !cir.int<u, 64>
!u8i = !cir.int<u, 8>
!void = !cir.void
#false = #cir.bool<false> : !cir.bool
#fn_attr = #cir<extra({nothrow = #cir.nothrow})>
#fn_attr1 = #cir<extra({inline = #cir.inline<no>, nothrow = #cir.nothrow, optnone = #cir.optnone, uwtable = #cir.uwtable<async>})>
#true = #cir.bool<true> : !cir.bool
!ty_in_addr = !cir.record<struct "in_addr" {!u32i} #cir.record.decl.ast>
!ty_sockaddr = !cir.record<struct "sockaddr" {!u16i, !cir.array<!s8i x 14>} #cir.record.decl.ast>
!ty_sockaddr_in = !cir.record<struct "sockaddr_in" {!u16i, !u16i, !ty_in_addr, !cir.array<!u8i x 8>}>
module @"/workspaces/juliet-c/testcases/CWE122_Heap_Based_Buffer_Overflow/s06/CWE122_Heap_Based_Buffer_Overflow__c_CWE129_connect_socket_16.c" attributes {cir.lang = #cir.lang<c>, cir.sob = #cir.signed_overflow_behavior<undefined>, cir.triple = "x86_64-unknown-linux-gnu", cir.type_size_info = #cir.type_size_info<char = 8, int = 32, size_t = 64>, cir.uwtable = #cir.uwtable<async>, dlti.dl_spec = #dlti.dl_spec<!llvm.ptr<272> = dense<64> : vector<4xi64>, i64 = dense<64> : vector<2xi64>, f128 = dense<128> : vector<2xi64>, !llvm.ptr<271> = dense<32> : vector<4xi64>, f64 = dense<64> : vector<2xi64>, f16 = dense<16> : vector<2xi64>, i16 = dense<16> : vector<2xi64>, i32 = dense<32> : vector<2xi64>, i8 = dense<8> : vector<2xi64>, !llvm.ptr = dense<64> : vector<4xi64>, i1 = dense<8> : vector<2xi64>, f80 = dense<128> : vector<2xi64>, !llvm.ptr<270> = dense<32> : vector<4xi64>, i128 = dense<128> : vector<2xi64>, "dlti.endianness" = "little", "dlti.stack_alignment" = 128 : i64, "dlti.mangling_mode" = "e">} {
  cir.func private @socket(!s32i, !s32i, !s32i) -> !s32i extra(#fn_attr) loc(#loc447)
  cir.func private @inet_addr(!cir.ptr<!s8i>) -> !u32i extra(#fn_attr) loc(#loc448)
  cir.global "private" constant cir_private dsolocal @".str" = #cir.const_array<"127.0.0.1\00" : !cir.array<!s8i x 10>> : !cir.array<!s8i x 10> {alignment = 1 : i64} loc(#loc5)
  cir.func private @htons(!u16i) -> !u16i extra(#fn_attr) loc(#loc449)
  cir.func private @connect(!s32i, !cir.ptr<!ty_sockaddr>, !u32i) -> !s32i loc(#loc450)
  cir.func private @recv(!s32i, !cir.ptr<!void>, !u64i, !s32i) -> !s64i loc(#loc451)
  cir.func private @atoi(!cir.ptr<!s8i>) -> !s32i extra(#fn_attr) loc(#loc452)
  cir.func private @close(!s32i) -> !s32i loc(#loc453)
  cir.func private @malloc(!u64i) -> !cir.ptr<!void> extra(#fn_attr) loc(#loc454)
  cir.func private @exit(!s32i) extra(#fn_attr) loc(#loc455)
  cir.func private @printIntLine(!s32i) loc(#loc456)
  cir.func private @printLine(!cir.ptr<!s8i>) loc(#loc457)
  cir.global "private" constant cir_private dsolocal @".str.1" = #cir.const_array<"ERROR: Array index is negative.\00" : !cir.array<!s8i x 32>> : !cir.array<!s8i x 32> {alignment = 1 : i64} loc(#loc24)
  cir.func private @free(!cir.ptr<!void>) extra(#fn_attr) loc(#loc458)
  cir.func no_proto @CWE122_Heap_Based_Buffer_Overflow__c_CWE129_connect_socket_16_bad() extra(#fn_attr1) {
    %0 = cir.alloca !s32i, !cir.ptr<!s32i>, ["data"] {alignment = 4 : i64} loc(#loc460)
    %1 = cir.const #cir.int<1> : !s32i loc(#loc31)
    %2 = cir.unary(minus, %1) nsw : !s32i, !s32i loc(#loc32)
    cir.store %2, %0 : !s32i, !cir.ptr<!s32i> loc(#loc461)
    cir.scope {
      cir.while {
        %3 = cir.const #cir.int<1> : !s32i loc(#loc36)
        %4 = cir.cast(int_to_bool, %3 : !s32i), !cir.bool loc(#loc36)
        cir.condition(%4) loc(#loc36)
      } do {
        cir.scope {
          cir.scope {
            %3 = cir.alloca !s32i, !cir.ptr<!s32i>, ["recvResult"] {alignment = 4 : i64} loc(#loc465)
            %4 = cir.alloca !ty_sockaddr_in, !cir.ptr<!ty_sockaddr_in>, ["service"] {alignment = 4 : i64} loc(#loc466)
            %5 = cir.alloca !s32i, !cir.ptr<!s32i>, ["connectSocket", init] {alignment = 4 : i64} loc(#loc467)
            %6 = cir.alloca !cir.array<!s8i x 14>, !cir.ptr<!cir.array<!s8i x 14>>, ["inputBuffer"] {alignment = 1 : i64} loc(#loc468)
            %7 = cir.const #cir.int<1> : !s32i loc(#loc45)
            %8 = cir.unary(minus, %7) nsw : !s32i, !s32i loc(#loc45)
            cir.store %8, %5 : !s32i, !cir.ptr<!s32i> loc(#loc467)
            cir.scope {
              cir.do {
                cir.scope {
                  %9 = cir.const #cir.int<2> : !s32i loc(#loc52)
                  %10 = cir.const #cir.int<1> : !s32i loc(#loc53)
                  %11 = cir.const #cir.int<6> : !s32i loc(#loc54)
                  %12 = cir.call @socket(%9, %10, %11) : (!s32i, !s32i, !s32i) -> !s32i extra(#fn_attr) loc(#loc55)
                  cir.store %12, %5 : !s32i, !cir.ptr<!s32i> loc(#loc471)
                  cir.scope {
                    %51 = cir.load %5 : !cir.ptr<!s32i>, !s32i loc(#loc60)
                    %52 = cir.const #cir.int<1> : !s32i loc(#loc61)
                    %53 = cir.unary(minus, %52) nsw : !s32i, !s32i loc(#loc61)
                    %54 = cir.cmp(eq, %51, %53) : !s32i, !cir.bool loc(#loc473)
                    cir.if %54 {
                      cir.break loc(#loc63)
                    } loc(#loc474)
                  } loc(#loc472)
                  %13 = cir.cast(bitcast, %4 : !cir.ptr<!ty_sockaddr_in>), !cir.ptr<!void> loc(#loc475)
                  %14 = cir.const #cir.int<0> : !s32i loc(#loc66)
                  %15 = cir.const #cir.int<16> : !u64i loc(#loc476)
                  cir.libc.memset %15 bytes from %13 set to %14 : !cir.ptr<!void>, !s32i, !u64i loc(#loc477)
                  %16 = cir.const #cir.int<2> : !s32i loc(#loc71)
                  %17 = cir.cast(integral, %16 : !s32i), !u16i loc(#loc71)
                  %18 = cir.get_member %4[0] {name = "sin_family"} : !cir.ptr<!ty_sockaddr_in> -> !cir.ptr<!u16i> loc(#loc72)
                  cir.store %17, %18 : !u16i, !cir.ptr<!u16i> loc(#loc478)
                  %19 = cir.get_global @".str" : !cir.ptr<!cir.array<!s8i x 10>> loc(#loc5)
                  %20 = cir.cast(array_to_ptrdecay, %19 : !cir.ptr<!cir.array<!s8i x 10>>), !cir.ptr<!s8i> loc(#loc5)
                  %21 = cir.call @inet_addr(%20) : (!cir.ptr<!s8i>) -> !u32i extra(#fn_attr) loc(#loc74)
                  %22 = cir.get_member %4[2] {name = "sin_addr"} : !cir.ptr<!ty_sockaddr_in> -> !cir.ptr<!ty_in_addr> loc(#loc75)
                  %23 = cir.get_member %22[0] {name = "s_addr"} : !cir.ptr<!ty_in_addr> -> !cir.ptr<!u32i> loc(#loc76)
                  cir.store %21, %23 : !u32i, !cir.ptr<!u32i> loc(#loc479)
                  %24 = cir.const #cir.int<27015> : !s32i loc(#loc79)
                  %25 = cir.cast(integral, %24 : !s32i), !u16i loc(#loc79)
                  %26 = cir.call @htons(%25) : (!u16i) -> !u16i side_effect(const) extra(#fn_attr) loc(#loc80)
                  %27 = cir.get_member %4[1] {name = "sin_port"} : !cir.ptr<!ty_sockaddr_in> -> !cir.ptr<!u16i> loc(#loc81)
                  cir.store %26, %27 : !u16i, !cir.ptr<!u16i> loc(#loc480)
                  cir.scope {
                    %51 = cir.load %5 : !cir.ptr<!s32i>, !s32i loc(#loc86)
                    %52 = cir.cast(bitcast, %4 : !cir.ptr<!ty_sockaddr_in>), !cir.ptr<!ty_sockaddr> loc(#loc482)
                    %53 = cir.const #cir.int<16> : !u64i loc(#loc483)
                    %54 = cir.cast(integral, %53 : !u64i), !u32i loc(#loc483)
                    %55 = cir.call @connect(%51, %52, %54) : (!s32i, !cir.ptr<!ty_sockaddr>, !u32i) -> !s32i loc(#loc91)
                    %56 = cir.const #cir.int<1> : !s32i loc(#loc92)
                    %57 = cir.unary(minus, %56) nsw : !s32i, !s32i loc(#loc92)
                    %58 = cir.cmp(eq, %55, %57) : !s32i, !cir.bool loc(#loc484)
                    cir.if %58 {
                      cir.break loc(#loc94)
                    } loc(#loc485)
                  } loc(#loc481)
                  %28 = cir.load %5 : !cir.ptr<!s32i>, !s32i loc(#loc95)
                  %29 = cir.cast(array_to_ptrdecay, %6 : !cir.ptr<!cir.array<!s8i x 14>>), !cir.ptr<!s8i> loc(#loc96)
                  %30 = cir.cast(bitcast, %29 : !cir.ptr<!s8i>), !cir.ptr<!void> loc(#loc96)
                  %31 = cir.const #cir.int<3> : !s32i loc(#loc97)
                  %32 = cir.cast(integral, %31 : !s32i), !u64i loc(#loc97)
                  %33 = cir.const #cir.int<4> : !u64i loc(#loc97)
                  %34 = cir.binop(mul, %32, %33) : !u64i loc(#loc97)
                  %35 = cir.const #cir.int<2> : !s32i loc(#loc97)
                  %36 = cir.cast(integral, %35 : !s32i), !u64i loc(#loc97)
                  %37 = cir.binop(add, %34, %36) : !u64i loc(#loc97)
                  %38 = cir.const #cir.int<1> : !s32i loc(#loc98)
                  %39 = cir.cast(integral, %38 : !s32i), !u64i loc(#loc98)
                  %40 = cir.binop(sub, %37, %39) : !u64i loc(#loc486)
                  %41 = cir.const #cir.int<0> : !s32i loc(#loc99)
                  %42 = cir.call @recv(%28, %30, %40, %41) : (!s32i, !cir.ptr<!void>, !u64i, !s32i) -> !s64i loc(#loc100)
                  %43 = cir.cast(integral, %42 : !s64i), !s32i loc(#loc100)
                  cir.store %43, %3 : !s32i, !cir.ptr<!s32i> loc(#loc487)
                  cir.scope {
                    %51 = cir.load %3 : !cir.ptr<!s32i>, !s32i loc(#loc105)
                    %52 = cir.const #cir.int<1> : !s32i loc(#loc106)
                    %53 = cir.unary(minus, %52) nsw : !s32i, !s32i loc(#loc106)
                    %54 = cir.cmp(eq, %51, %53) : !s32i, !cir.bool loc(#loc489)
                    %55 = cir.ternary(%54, true {
                      %56 = cir.const #true loc(#loc107)
                      cir.yield %56 : !cir.bool loc(#loc107)
                    }, false {
                      %56 = cir.load %3 : !cir.ptr<!s32i>, !s32i loc(#loc108)
                      %57 = cir.const #cir.int<0> : !s32i loc(#loc109)
                      %58 = cir.cmp(eq, %56, %57) : !s32i, !cir.bool loc(#loc490)
                      %59 = cir.ternary(%58, true {
                        %60 = cir.const #true loc(#loc107)
                        cir.yield %60 : !cir.bool loc(#loc107)
                      }, false {
                        %60 = cir.const #false loc(#loc107)
                        cir.yield %60 : !cir.bool loc(#loc107)
                      }) : (!cir.bool) -> !cir.bool loc(#loc107)
                      cir.yield %59 : !cir.bool loc(#loc107)
                    }) : (!cir.bool) -> !cir.bool loc(#loc107)
                    cir.if %55 {
                      cir.break loc(#loc111)
                    } loc(#loc491)
                  } loc(#loc488)
                  %44 = cir.const #cir.int<0> : !s32i loc(#loc112)
                  %45 = cir.cast(integral, %44 : !s32i), !s8i loc(#loc112)
                  %46 = cir.load %3 : !cir.ptr<!s32i>, !s32i loc(#loc113)
                  %47 = cir.cast(array_to_ptrdecay, %6 : !cir.ptr<!cir.array<!s8i x 14>>), !cir.ptr<!s8i> loc(#loc114)
                  %48 = cir.ptr_stride(%47 : !cir.ptr<!s8i>, %46 : !s32i), !cir.ptr<!s8i> loc(#loc114)
                  cir.store %45, %48 : !s8i, !cir.ptr<!s8i> loc(#loc492)
                  %49 = cir.cast(array_to_ptrdecay, %6 : !cir.ptr<!cir.array<!s8i x 14>>), !cir.ptr<!s8i> loc(#loc115)
                  %50 = cir.call @atoi(%49) : (!cir.ptr<!s8i>) -> !s32i side_effect(pure) extra(#fn_attr) loc(#loc116)
                  cir.store %50, %0 : !s32i, !cir.ptr<!s32i> loc(#loc493)
                } loc(#loc470)
                cir.yield loc(#loc49)
              } while {
                %9 = cir.const #cir.int<0> : !s32i loc(#loc119)
                %10 = cir.cast(int_to_bool, %9 : !s32i), !cir.bool loc(#loc119)
                cir.condition(%10) loc(#loc119)
              } loc(#loc469)
            } loc(#loc469)
            cir.scope {
              %9 = cir.load %5 : !cir.ptr<!s32i>, !s32i loc(#loc122)
              %10 = cir.const #cir.int<1> : !s32i loc(#loc123)
              %11 = cir.unary(minus, %10) nsw : !s32i, !s32i loc(#loc123)
              %12 = cir.cmp(ne, %9, %11) : !s32i, !cir.bool loc(#loc495)
              cir.if %12 {
                %13 = cir.load %5 : !cir.ptr<!s32i>, !s32i loc(#loc125)
                %14 = cir.call @close(%13) : (!s32i) -> !s32i loc(#loc126)
              } loc(#loc496)
            } loc(#loc494)
          } loc(#loc464)
          cir.break loc(#loc127)
        } loc(#loc463)
        cir.yield loc(#loc35)
      } loc(#loc462)
    } loc(#loc462)
    cir.scope {
      cir.while {
        %3 = cir.const #cir.int<1> : !s32i loc(#loc130)
        %4 = cir.cast(int_to_bool, %3 : !s32i), !cir.bool loc(#loc130)
        cir.condition(%4) loc(#loc130)
      } do {
        cir.scope {
          cir.scope {
            %3 = cir.alloca !s32i, !cir.ptr<!s32i>, ["i"] {alignment = 4 : i64} loc(#loc500)
            %4 = cir.alloca !cir.ptr<!s32i>, !cir.ptr<!cir.ptr<!s32i>>, ["buffer", init] {alignment = 8 : i64} loc(#loc501)
            %5 = cir.get_global @malloc : !cir.ptr<!cir.func<(!u64i) -> !cir.ptr<!void>>> loc(#loc138)
            %6 = cir.const #cir.int<10> : !s32i loc(#loc139)
            %7 = cir.cast(integral, %6 : !s32i), !u64i loc(#loc139)
            %8 = cir.const #cir.int<4> : !u64i loc(#loc502)
            %9 = cir.binop(mul, %7, %8) : !u64i loc(#loc503)
            %10 = cir.call @malloc(%9) : (!u64i) -> !cir.ptr<!void> extra(#fn_attr) loc(#loc138)
            %11 = cir.cast(bitcast, %10 : !cir.ptr<!void>), !cir.ptr<!s32i> loc(#loc504)
            cir.store %11, %4 : !cir.ptr<!s32i>, !cir.ptr<!cir.ptr<!s32i>> loc(#loc501)
            cir.scope {
              %15 = cir.load %4 : !cir.ptr<!cir.ptr<!s32i>>, !cir.ptr<!s32i> loc(#loc144)
              %16 = cir.const #cir.ptr<null> : !cir.ptr<!void> loc(#loc145)
              %17 = cir.cast(bitcast, %16 : !cir.ptr<!void>), !cir.ptr<!s32i> loc(#loc145)
              %18 = cir.cmp(eq, %15, %17) : !cir.ptr<!s32i>, !cir.bool loc(#loc506)
              cir.if %18 {
                %19 = cir.get_global @exit : !cir.ptr<!cir.func<(!s32i)>> loc(#loc147)
                %20 = cir.const #cir.int<1> : !s32i loc(#loc148)
                %21 = cir.unary(minus, %20) nsw : !s32i, !s32i loc(#loc149)
                cir.call @exit(%21) : (!s32i) -> () extra(#fn_attr) loc(#loc147)
              } loc(#loc507)
            } loc(#loc505)
            cir.scope {
              %15 = cir.const #cir.int<0> : !s32i loc(#loc152)
              cir.store %15, %3 : !s32i, !cir.ptr<!s32i> loc(#loc509)
              cir.for : cond {
                %16 = cir.load %3 : !cir.ptr<!s32i>, !s32i loc(#loc154)
                %17 = cir.const #cir.int<10> : !s32i loc(#loc155)
                %18 = cir.cmp(lt, %16, %17) : !s32i, !cir.bool loc(#loc510)
                cir.condition(%18) loc(#loc156)
              } body {
                cir.scope {
                  %16 = cir.const #cir.int<0> : !s32i loc(#loc158)
                  %17 = cir.load %4 : !cir.ptr<!cir.ptr<!s32i>>, !cir.ptr<!s32i> loc(#loc159)
                  %18 = cir.load %3 : !cir.ptr<!s32i>, !s32i loc(#loc160)
                  %19 = cir.ptr_stride(%17 : !cir.ptr<!s32i>, %18 : !s32i), !cir.ptr<!s32i> loc(#loc161)
                  cir.store %16, %19 : !s32i, !cir.ptr<!s32i> loc(#loc512)
                } loc(#loc511)
                cir.yield loc(#loc151)
              } step {
                %16 = cir.load %3 : !cir.ptr<!s32i>, !s32i loc(#loc162)
                %17 = cir.unary(inc, %16) nsw : !s32i, !s32i loc(#loc163)
                cir.store %17, %3 : !s32i, !cir.ptr<!s32i> loc(#loc513)
                cir.yield loc(#loc508)
              } loc(#loc508)
            } loc(#loc508)
            cir.scope {
              %15 = cir.load %0 : !cir.ptr<!s32i>, !s32i loc(#loc166)
              %16 = cir.const #cir.int<0> : !s32i loc(#loc167)
              %17 = cir.cmp(ge, %15, %16) : !s32i, !cir.bool loc(#loc515)
              cir.if %17 {
                %18 = cir.const #cir.int<1> : !s32i loc(#loc171)
                %19 = cir.load %4 : !cir.ptr<!cir.ptr<!s32i>>, !cir.ptr<!s32i> loc(#loc172)
                %20 = cir.load %0 : !cir.ptr<!s32i>, !s32i loc(#loc173)
                %21 = cir.ptr_stride(%19 : !cir.ptr<!s32i>, %20 : !s32i), !cir.ptr<!s32i> loc(#loc174)
                cir.store %18, %21 : !s32i, !cir.ptr<!s32i> loc(#loc517)
                cir.scope {
                  %22 = cir.const #cir.int<0> : !s32i loc(#loc177)
                  cir.store %22, %3 : !s32i, !cir.ptr<!s32i> loc(#loc519)
                  cir.for : cond {
                    %23 = cir.load %3 : !cir.ptr<!s32i>, !s32i loc(#loc179)
                    %24 = cir.const #cir.int<10> : !s32i loc(#loc180)
                    %25 = cir.cmp(lt, %23, %24) : !s32i, !cir.bool loc(#loc520)
                    cir.condition(%25) loc(#loc181)
                  } body {
                    cir.scope {
                      %23 = cir.load %4 : !cir.ptr<!cir.ptr<!s32i>>, !cir.ptr<!s32i> loc(#loc183)
                      %24 = cir.load %3 : !cir.ptr<!s32i>, !s32i loc(#loc184)
                      %25 = cir.ptr_stride(%23 : !cir.ptr<!s32i>, %24 : !s32i), !cir.ptr<!s32i> loc(#loc185)
                      %26 = cir.load %25 : !cir.ptr<!s32i>, !s32i loc(#loc183)
                      cir.call @printIntLine(%26) : (!s32i) -> () loc(#loc186)
                    } loc(#loc521)
                    cir.yield loc(#loc176)
                  } step {
                    %23 = cir.load %3 : !cir.ptr<!s32i>, !s32i loc(#loc187)
                    %24 = cir.unary(inc, %23) nsw : !s32i, !s32i loc(#loc188)
                    cir.store %24, %3 : !s32i, !cir.ptr<!s32i> loc(#loc522)
                    cir.yield loc(#loc518)
                  } loc(#loc518)
                } loc(#loc518)
              } else {
                %18 = cir.get_global @".str.1" : !cir.ptr<!cir.array<!s8i x 32>> loc(#loc24)
                %19 = cir.cast(array_to_ptrdecay, %18 : !cir.ptr<!cir.array<!s8i x 32>>), !cir.ptr<!s8i> loc(#loc24)
                cir.call @printLine(%19) : (!cir.ptr<!s8i>) -> () loc(#loc189)
              } loc(#loc516)
            } loc(#loc514)
            %12 = cir.get_global @free : !cir.ptr<!cir.func<(!cir.ptr<!void>)>> loc(#loc190)
            %13 = cir.load %4 : !cir.ptr<!cir.ptr<!s32i>>, !cir.ptr<!s32i> loc(#loc191)
            %14 = cir.cast(bitcast, %13 : !cir.ptr<!s32i>), !cir.ptr<!void> loc(#loc191)
            cir.call @free(%14) : (!cir.ptr<!void>) -> () extra(#fn_attr) loc(#loc190)
          } loc(#loc499)
          cir.break loc(#loc192)
        } loc(#loc498)
        cir.yield loc(#loc129)
      } loc(#loc497)
    } loc(#loc497)
    cir.return loc(#loc28)
  } loc(#loc459)
  cir.func no_proto @CWE122_Heap_Based_Buffer_Overflow__c_CWE129_connect_socket_16_good() extra(#fn_attr1) {
    %0 = cir.get_global @goodB2G : !cir.ptr<!cir.func<()>> loc(#loc524)
    cir.call %0() : (!cir.ptr<!cir.func<()>>) -> () loc(#loc195)
    %1 = cir.get_global @goodG2B : !cir.ptr<!cir.func<()>> loc(#loc525)
    cir.call %1() : (!cir.ptr<!cir.func<()>>) -> () loc(#loc197)
    cir.return loc(#loc194)
  } loc(#loc523)
  cir.global "private" constant cir_private dsolocal @".str.2" = #cir.const_array<"ERROR: Array index is out-of-bounds\00" : !cir.array<!s8i x 36>> : !cir.array<!s8i x 36> {alignment = 1 : i64} loc(#loc199)
  cir.func no_proto internal private @goodB2G() extra(#fn_attr1) {
    %0 = cir.alloca !s32i, !cir.ptr<!s32i>, ["data"] {alignment = 4 : i64} loc(#loc527)
    %1 = cir.const #cir.int<1> : !s32i loc(#loc204)
    %2 = cir.unary(minus, %1) nsw : !s32i, !s32i loc(#loc205)
    cir.store %2, %0 : !s32i, !cir.ptr<!s32i> loc(#loc528)
    cir.scope {
      cir.while {
        %3 = cir.const #cir.int<1> : !s32i loc(#loc209)
        %4 = cir.cast(int_to_bool, %3 : !s32i), !cir.bool loc(#loc209)
        cir.condition(%4) loc(#loc209)
      } do {
        cir.scope {
          cir.scope {
            %3 = cir.alloca !s32i, !cir.ptr<!s32i>, ["recvResult"] {alignment = 4 : i64} loc(#loc532)
            %4 = cir.alloca !ty_sockaddr_in, !cir.ptr<!ty_sockaddr_in>, ["service"] {alignment = 4 : i64} loc(#loc533)
            %5 = cir.alloca !s32i, !cir.ptr<!s32i>, ["connectSocket", init] {alignment = 4 : i64} loc(#loc534)
            %6 = cir.alloca !cir.array<!s8i x 14>, !cir.ptr<!cir.array<!s8i x 14>>, ["inputBuffer"] {alignment = 1 : i64} loc(#loc535)
            %7 = cir.const #cir.int<1> : !s32i loc(#loc218)
            %8 = cir.unary(minus, %7) nsw : !s32i, !s32i loc(#loc218)
            cir.store %8, %5 : !s32i, !cir.ptr<!s32i> loc(#loc534)
            cir.scope {
              cir.do {
                cir.scope {
                  %9 = cir.const #cir.int<2> : !s32i loc(#loc225)
                  %10 = cir.const #cir.int<1> : !s32i loc(#loc226)
                  %11 = cir.const #cir.int<6> : !s32i loc(#loc227)
                  %12 = cir.call @socket(%9, %10, %11) : (!s32i, !s32i, !s32i) -> !s32i extra(#fn_attr) loc(#loc228)
                  cir.store %12, %5 : !s32i, !cir.ptr<!s32i> loc(#loc538)
                  cir.scope {
                    %51 = cir.load %5 : !cir.ptr<!s32i>, !s32i loc(#loc233)
                    %52 = cir.const #cir.int<1> : !s32i loc(#loc234)
                    %53 = cir.unary(minus, %52) nsw : !s32i, !s32i loc(#loc234)
                    %54 = cir.cmp(eq, %51, %53) : !s32i, !cir.bool loc(#loc540)
                    cir.if %54 {
                      cir.break loc(#loc236)
                    } loc(#loc541)
                  } loc(#loc539)
                  %13 = cir.cast(bitcast, %4 : !cir.ptr<!ty_sockaddr_in>), !cir.ptr<!void> loc(#loc542)
                  %14 = cir.const #cir.int<0> : !s32i loc(#loc239)
                  %15 = cir.const #cir.int<16> : !u64i loc(#loc543)
                  cir.libc.memset %15 bytes from %13 set to %14 : !cir.ptr<!void>, !s32i, !u64i loc(#loc544)
                  %16 = cir.const #cir.int<2> : !s32i loc(#loc244)
                  %17 = cir.cast(integral, %16 : !s32i), !u16i loc(#loc244)
                  %18 = cir.get_member %4[0] {name = "sin_family"} : !cir.ptr<!ty_sockaddr_in> -> !cir.ptr<!u16i> loc(#loc72)
                  cir.store %17, %18 : !u16i, !cir.ptr<!u16i> loc(#loc545)
                  %19 = cir.get_global @".str" : !cir.ptr<!cir.array<!s8i x 10>> loc(#loc246)
                  %20 = cir.cast(array_to_ptrdecay, %19 : !cir.ptr<!cir.array<!s8i x 10>>), !cir.ptr<!s8i> loc(#loc246)
                  %21 = cir.call @inet_addr(%20) : (!cir.ptr<!s8i>) -> !u32i extra(#fn_attr) loc(#loc247)
                  %22 = cir.get_member %4[2] {name = "sin_addr"} : !cir.ptr<!ty_sockaddr_in> -> !cir.ptr<!ty_in_addr> loc(#loc75)
                  %23 = cir.get_member %22[0] {name = "s_addr"} : !cir.ptr<!ty_in_addr> -> !cir.ptr<!u32i> loc(#loc76)
                  cir.store %21, %23 : !u32i, !cir.ptr<!u32i> loc(#loc546)
                  %24 = cir.const #cir.int<27015> : !s32i loc(#loc250)
                  %25 = cir.cast(integral, %24 : !s32i), !u16i loc(#loc250)
                  %26 = cir.call @htons(%25) : (!u16i) -> !u16i side_effect(const) extra(#fn_attr) loc(#loc251)
                  %27 = cir.get_member %4[1] {name = "sin_port"} : !cir.ptr<!ty_sockaddr_in> -> !cir.ptr<!u16i> loc(#loc81)
                  cir.store %26, %27 : !u16i, !cir.ptr<!u16i> loc(#loc547)
                  cir.scope {
                    %51 = cir.load %5 : !cir.ptr<!s32i>, !s32i loc(#loc256)
                    %52 = cir.cast(bitcast, %4 : !cir.ptr<!ty_sockaddr_in>), !cir.ptr<!ty_sockaddr> loc(#loc549)
                    %53 = cir.const #cir.int<16> : !u64i loc(#loc550)
                    %54 = cir.cast(integral, %53 : !u64i), !u32i loc(#loc550)
                    %55 = cir.call @connect(%51, %52, %54) : (!s32i, !cir.ptr<!ty_sockaddr>, !u32i) -> !s32i loc(#loc261)
                    %56 = cir.const #cir.int<1> : !s32i loc(#loc262)
                    %57 = cir.unary(minus, %56) nsw : !s32i, !s32i loc(#loc262)
                    %58 = cir.cmp(eq, %55, %57) : !s32i, !cir.bool loc(#loc551)
                    cir.if %58 {
                      cir.break loc(#loc264)
                    } loc(#loc552)
                  } loc(#loc548)
                  %28 = cir.load %5 : !cir.ptr<!s32i>, !s32i loc(#loc265)
                  %29 = cir.cast(array_to_ptrdecay, %6 : !cir.ptr<!cir.array<!s8i x 14>>), !cir.ptr<!s8i> loc(#loc266)
                  %30 = cir.cast(bitcast, %29 : !cir.ptr<!s8i>), !cir.ptr<!void> loc(#loc266)
                  %31 = cir.const #cir.int<3> : !s32i loc(#loc267)
                  %32 = cir.cast(integral, %31 : !s32i), !u64i loc(#loc267)
                  %33 = cir.const #cir.int<4> : !u64i loc(#loc267)
                  %34 = cir.binop(mul, %32, %33) : !u64i loc(#loc267)
                  %35 = cir.const #cir.int<2> : !s32i loc(#loc267)
                  %36 = cir.cast(integral, %35 : !s32i), !u64i loc(#loc267)
                  %37 = cir.binop(add, %34, %36) : !u64i loc(#loc267)
                  %38 = cir.const #cir.int<1> : !s32i loc(#loc268)
                  %39 = cir.cast(integral, %38 : !s32i), !u64i loc(#loc268)
                  %40 = cir.binop(sub, %37, %39) : !u64i loc(#loc553)
                  %41 = cir.const #cir.int<0> : !s32i loc(#loc269)
                  %42 = cir.call @recv(%28, %30, %40, %41) : (!s32i, !cir.ptr<!void>, !u64i, !s32i) -> !s64i loc(#loc270)
                  %43 = cir.cast(integral, %42 : !s64i), !s32i loc(#loc270)
                  cir.store %43, %3 : !s32i, !cir.ptr<!s32i> loc(#loc554)
                  cir.scope {
                    %51 = cir.load %3 : !cir.ptr<!s32i>, !s32i loc(#loc275)
                    %52 = cir.const #cir.int<1> : !s32i loc(#loc276)
                    %53 = cir.unary(minus, %52) nsw : !s32i, !s32i loc(#loc276)
                    %54 = cir.cmp(eq, %51, %53) : !s32i, !cir.bool loc(#loc556)
                    %55 = cir.ternary(%54, true {
                      %56 = cir.const #true loc(#loc277)
                      cir.yield %56 : !cir.bool loc(#loc277)
                    }, false {
                      %56 = cir.load %3 : !cir.ptr<!s32i>, !s32i loc(#loc278)
                      %57 = cir.const #cir.int<0> : !s32i loc(#loc279)
                      %58 = cir.cmp(eq, %56, %57) : !s32i, !cir.bool loc(#loc557)
                      %59 = cir.ternary(%58, true {
                        %60 = cir.const #true loc(#loc277)
                        cir.yield %60 : !cir.bool loc(#loc277)
                      }, false {
                        %60 = cir.const #false loc(#loc277)
                        cir.yield %60 : !cir.bool loc(#loc277)
                      }) : (!cir.bool) -> !cir.bool loc(#loc277)
                      cir.yield %59 : !cir.bool loc(#loc277)
                    }) : (!cir.bool) -> !cir.bool loc(#loc277)
                    cir.if %55 {
                      cir.break loc(#loc281)
                    } loc(#loc558)
                  } loc(#loc555)
                  %44 = cir.const #cir.int<0> : !s32i loc(#loc282)
                  %45 = cir.cast(integral, %44 : !s32i), !s8i loc(#loc282)
                  %46 = cir.load %3 : !cir.ptr<!s32i>, !s32i loc(#loc283)
                  %47 = cir.cast(array_to_ptrdecay, %6 : !cir.ptr<!cir.array<!s8i x 14>>), !cir.ptr<!s8i> loc(#loc284)
                  %48 = cir.ptr_stride(%47 : !cir.ptr<!s8i>, %46 : !s32i), !cir.ptr<!s8i> loc(#loc284)
                  cir.store %45, %48 : !s8i, !cir.ptr<!s8i> loc(#loc559)
                  %49 = cir.cast(array_to_ptrdecay, %6 : !cir.ptr<!cir.array<!s8i x 14>>), !cir.ptr<!s8i> loc(#loc285)
                  %50 = cir.call @atoi(%49) : (!cir.ptr<!s8i>) -> !s32i side_effect(pure) extra(#fn_attr) loc(#loc286)
                  cir.store %50, %0 : !s32i, !cir.ptr<!s32i> loc(#loc560)
                } loc(#loc537)
                cir.yield loc(#loc222)
              } while {
                %9 = cir.const #cir.int<0> : !s32i loc(#loc289)
                %10 = cir.cast(int_to_bool, %9 : !s32i), !cir.bool loc(#loc289)
                cir.condition(%10) loc(#loc289)
              } loc(#loc536)
            } loc(#loc536)
            cir.scope {
              %9 = cir.load %5 : !cir.ptr<!s32i>, !s32i loc(#loc292)
              %10 = cir.const #cir.int<1> : !s32i loc(#loc293)
              %11 = cir.unary(minus, %10) nsw : !s32i, !s32i loc(#loc293)
              %12 = cir.cmp(ne, %9, %11) : !s32i, !cir.bool loc(#loc562)
              cir.if %12 {
                %13 = cir.load %5 : !cir.ptr<!s32i>, !s32i loc(#loc295)
                %14 = cir.call @close(%13) : (!s32i) -> !s32i loc(#loc296)
              } loc(#loc563)
            } loc(#loc561)
          } loc(#loc531)
          cir.break loc(#loc297)
        } loc(#loc530)
        cir.yield loc(#loc208)
      } loc(#loc529)
    } loc(#loc529)
    cir.scope {
      cir.while {
        %3 = cir.const #cir.int<1> : !s32i loc(#loc300)
        %4 = cir.cast(int_to_bool, %3 : !s32i), !cir.bool loc(#loc300)
        cir.condition(%4) loc(#loc300)
      } do {
        cir.scope {
          cir.scope {
            %3 = cir.alloca !s32i, !cir.ptr<!s32i>, ["i"] {alignment = 4 : i64} loc(#loc567)
            %4 = cir.alloca !cir.ptr<!s32i>, !cir.ptr<!cir.ptr<!s32i>>, ["buffer", init] {alignment = 8 : i64} loc(#loc568)
            %5 = cir.get_global @malloc : !cir.ptr<!cir.func<(!u64i) -> !cir.ptr<!void>>> loc(#loc308)
            %6 = cir.const #cir.int<10> : !s32i loc(#loc309)
            %7 = cir.cast(integral, %6 : !s32i), !u64i loc(#loc309)
            %8 = cir.const #cir.int<4> : !u64i loc(#loc569)
            %9 = cir.binop(mul, %7, %8) : !u64i loc(#loc570)
            %10 = cir.call @malloc(%9) : (!u64i) -> !cir.ptr<!void> extra(#fn_attr) loc(#loc308)
            %11 = cir.cast(bitcast, %10 : !cir.ptr<!void>), !cir.ptr<!s32i> loc(#loc571)
            cir.store %11, %4 : !cir.ptr<!s32i>, !cir.ptr<!cir.ptr<!s32i>> loc(#loc568)
            cir.scope {
              %15 = cir.load %4 : !cir.ptr<!cir.ptr<!s32i>>, !cir.ptr<!s32i> loc(#loc314)
              %16 = cir.const #cir.ptr<null> : !cir.ptr<!void> loc(#loc315)
              %17 = cir.cast(bitcast, %16 : !cir.ptr<!void>), !cir.ptr<!s32i> loc(#loc315)
              %18 = cir.cmp(eq, %15, %17) : !cir.ptr<!s32i>, !cir.bool loc(#loc573)
              cir.if %18 {
                %19 = cir.get_global @exit : !cir.ptr<!cir.func<(!s32i)>> loc(#loc317)
                %20 = cir.const #cir.int<1> : !s32i loc(#loc318)
                %21 = cir.unary(minus, %20) nsw : !s32i, !s32i loc(#loc319)
                cir.call @exit(%21) : (!s32i) -> () extra(#fn_attr) loc(#loc317)
              } loc(#loc574)
            } loc(#loc572)
            cir.scope {
              %15 = cir.const #cir.int<0> : !s32i loc(#loc322)
              cir.store %15, %3 : !s32i, !cir.ptr<!s32i> loc(#loc576)
              cir.for : cond {
                %16 = cir.load %3 : !cir.ptr<!s32i>, !s32i loc(#loc324)
                %17 = cir.const #cir.int<10> : !s32i loc(#loc325)
                %18 = cir.cmp(lt, %16, %17) : !s32i, !cir.bool loc(#loc577)
                cir.condition(%18) loc(#loc326)
              } body {
                cir.scope {
                  %16 = cir.const #cir.int<0> : !s32i loc(#loc328)
                  %17 = cir.load %4 : !cir.ptr<!cir.ptr<!s32i>>, !cir.ptr<!s32i> loc(#loc329)
                  %18 = cir.load %3 : !cir.ptr<!s32i>, !s32i loc(#loc330)
                  %19 = cir.ptr_stride(%17 : !cir.ptr<!s32i>, %18 : !s32i), !cir.ptr<!s32i> loc(#loc331)
                  cir.store %16, %19 : !s32i, !cir.ptr<!s32i> loc(#loc579)
                } loc(#loc578)
                cir.yield loc(#loc321)
              } step {
                %16 = cir.load %3 : !cir.ptr<!s32i>, !s32i loc(#loc332)
                %17 = cir.unary(inc, %16) nsw : !s32i, !s32i loc(#loc333)
                cir.store %17, %3 : !s32i, !cir.ptr<!s32i> loc(#loc580)
                cir.yield loc(#loc575)
              } loc(#loc575)
            } loc(#loc575)
            cir.scope {
              %15 = cir.load %0 : !cir.ptr<!s32i>, !s32i loc(#loc336)
              %16 = cir.const #cir.int<0> : !s32i loc(#loc337)
              %17 = cir.cmp(ge, %15, %16) : !s32i, !cir.bool loc(#loc582)
              %18 = cir.ternary(%17, true {
                %19 = cir.load %0 : !cir.ptr<!s32i>, !s32i loc(#loc339)
                %20 = cir.const #cir.int<10> : !s32i loc(#loc340)
                %21 = cir.cmp(lt, %19, %20) : !s32i, !cir.bool loc(#loc583)
                %22 = cir.ternary(%21, true {
                  %23 = cir.const #true loc(#loc338)
                  cir.yield %23 : !cir.bool loc(#loc338)
                }, false {
                  %23 = cir.const #false loc(#loc338)
                  cir.yield %23 : !cir.bool loc(#loc338)
                }) : (!cir.bool) -> !cir.bool loc(#loc338)
                cir.yield %22 : !cir.bool loc(#loc338)
              }, false {
                %19 = cir.const #false loc(#loc338)
                cir.yield %19 : !cir.bool loc(#loc338)
              }) : (!cir.bool) -> !cir.bool loc(#loc338)
              cir.if %18 {
                %19 = cir.const #cir.int<1> : !s32i loc(#loc345)
                %20 = cir.load %4 : !cir.ptr<!cir.ptr<!s32i>>, !cir.ptr<!s32i> loc(#loc346)
                %21 = cir.load %0 : !cir.ptr<!s32i>, !s32i loc(#loc347)
                %22 = cir.ptr_stride(%20 : !cir.ptr<!s32i>, %21 : !s32i), !cir.ptr<!s32i> loc(#loc348)
                cir.store %19, %22 : !s32i, !cir.ptr<!s32i> loc(#loc585)
                cir.scope {
                  %23 = cir.const #cir.int<0> : !s32i loc(#loc351)
                  cir.store %23, %3 : !s32i, !cir.ptr<!s32i> loc(#loc587)
                  cir.for : cond {
                    %24 = cir.load %3 : !cir.ptr<!s32i>, !s32i loc(#loc353)
                    %25 = cir.const #cir.int<10> : !s32i loc(#loc354)
                    %26 = cir.cmp(lt, %24, %25) : !s32i, !cir.bool loc(#loc588)
                    cir.condition(%26) loc(#loc355)
                  } body {
                    cir.scope {
                      %24 = cir.load %4 : !cir.ptr<!cir.ptr<!s32i>>, !cir.ptr<!s32i> loc(#loc357)
                      %25 = cir.load %3 : !cir.ptr<!s32i>, !s32i loc(#loc358)
                      %26 = cir.ptr_stride(%24 : !cir.ptr<!s32i>, %25 : !s32i), !cir.ptr<!s32i> loc(#loc359)
                      %27 = cir.load %26 : !cir.ptr<!s32i>, !s32i loc(#loc357)
                      cir.call @printIntLine(%27) : (!s32i) -> () loc(#loc360)
                    } loc(#loc589)
                    cir.yield loc(#loc350)
                  } step {
                    %24 = cir.load %3 : !cir.ptr<!s32i>, !s32i loc(#loc361)
                    %25 = cir.unary(inc, %24) nsw : !s32i, !s32i loc(#loc362)
                    cir.store %25, %3 : !s32i, !cir.ptr<!s32i> loc(#loc590)
                    cir.yield loc(#loc586)
                  } loc(#loc586)
                } loc(#loc586)
              } else {
                %19 = cir.get_global @".str.2" : !cir.ptr<!cir.array<!s8i x 36>> loc(#loc199)
                %20 = cir.cast(array_to_ptrdecay, %19 : !cir.ptr<!cir.array<!s8i x 36>>), !cir.ptr<!s8i> loc(#loc199)
                cir.call @printLine(%20) : (!cir.ptr<!s8i>) -> () loc(#loc363)
              } loc(#loc584)
            } loc(#loc581)
            %12 = cir.get_global @free : !cir.ptr<!cir.func<(!cir.ptr<!void>)>> loc(#loc364)
            %13 = cir.load %4 : !cir.ptr<!cir.ptr<!s32i>>, !cir.ptr<!s32i> loc(#loc365)
            %14 = cir.cast(bitcast, %13 : !cir.ptr<!s32i>), !cir.ptr<!void> loc(#loc365)
            cir.call @free(%14) : (!cir.ptr<!void>) -> () extra(#fn_attr) loc(#loc364)
          } loc(#loc566)
          cir.break loc(#loc366)
        } loc(#loc565)
        cir.yield loc(#loc299)
      } loc(#loc564)
    } loc(#loc564)
    cir.return loc(#loc201)
  } loc(#loc526)
  cir.func no_proto internal private @goodG2B() extra(#fn_attr1) {
    %0 = cir.alloca !s32i, !cir.ptr<!s32i>, ["data"] {alignment = 4 : i64} loc(#loc592)
    %1 = cir.const #cir.int<1> : !s32i loc(#loc371)
    %2 = cir.unary(minus, %1) nsw : !s32i, !s32i loc(#loc372)
    cir.store %2, %0 : !s32i, !cir.ptr<!s32i> loc(#loc593)
    cir.scope {
      cir.while {
        %3 = cir.const #cir.int<1> : !s32i loc(#loc376)
        %4 = cir.cast(int_to_bool, %3 : !s32i), !cir.bool loc(#loc376)
        cir.condition(%4) loc(#loc376)
      } do {
        cir.scope {
          %3 = cir.const #cir.int<7> : !s32i loc(#loc378)
          cir.store %3, %0 : !s32i, !cir.ptr<!s32i> loc(#loc596)
          cir.break loc(#loc380)
        } loc(#loc595)
        cir.yield loc(#loc375)
      } loc(#loc594)
    } loc(#loc594)
    cir.scope {
      cir.while {
        %3 = cir.const #cir.int<1> : !s32i loc(#loc383)
        %4 = cir.cast(int_to_bool, %3 : !s32i), !cir.bool loc(#loc383)
        cir.condition(%4) loc(#loc383)
      } do {
        cir.scope {
          cir.scope {
            %3 = cir.alloca !s32i, !cir.ptr<!s32i>, ["i"] {alignment = 4 : i64} loc(#loc600)
            %4 = cir.alloca !cir.ptr<!s32i>, !cir.ptr<!cir.ptr<!s32i>>, ["buffer", init] {alignment = 8 : i64} loc(#loc601)
            %5 = cir.get_global @malloc : !cir.ptr<!cir.func<(!u64i) -> !cir.ptr<!void>>> loc(#loc391)
            %6 = cir.const #cir.int<10> : !s32i loc(#loc392)
            %7 = cir.cast(integral, %6 : !s32i), !u64i loc(#loc392)
            %8 = cir.const #cir.int<4> : !u64i loc(#loc602)
            %9 = cir.binop(mul, %7, %8) : !u64i loc(#loc603)
            %10 = cir.call @malloc(%9) : (!u64i) -> !cir.ptr<!void> extra(#fn_attr) loc(#loc391)
            %11 = cir.cast(bitcast, %10 : !cir.ptr<!void>), !cir.ptr<!s32i> loc(#loc604)
            cir.store %11, %4 : !cir.ptr<!s32i>, !cir.ptr<!cir.ptr<!s32i>> loc(#loc601)
            cir.scope {
              %15 = cir.load %4 : !cir.ptr<!cir.ptr<!s32i>>, !cir.ptr<!s32i> loc(#loc397)
              %16 = cir.const #cir.ptr<null> : !cir.ptr<!void> loc(#loc398)
              %17 = cir.cast(bitcast, %16 : !cir.ptr<!void>), !cir.ptr<!s32i> loc(#loc398)
              %18 = cir.cmp(eq, %15, %17) : !cir.ptr<!s32i>, !cir.bool loc(#loc606)
              cir.if %18 {
                %19 = cir.get_global @exit : !cir.ptr<!cir.func<(!s32i)>> loc(#loc400)
                %20 = cir.const #cir.int<1> : !s32i loc(#loc401)
                %21 = cir.unary(minus, %20) nsw : !s32i, !s32i loc(#loc402)
                cir.call @exit(%21) : (!s32i) -> () extra(#fn_attr) loc(#loc400)
              } loc(#loc607)
            } loc(#loc605)
            cir.scope {
              %15 = cir.const #cir.int<0> : !s32i loc(#loc405)
              cir.store %15, %3 : !s32i, !cir.ptr<!s32i> loc(#loc609)
              cir.for : cond {
                %16 = cir.load %3 : !cir.ptr<!s32i>, !s32i loc(#loc407)
                %17 = cir.const #cir.int<10> : !s32i loc(#loc408)
                %18 = cir.cmp(lt, %16, %17) : !s32i, !cir.bool loc(#loc610)
                cir.condition(%18) loc(#loc409)
              } body {
                cir.scope {
                  %16 = cir.const #cir.int<0> : !s32i loc(#loc411)
                  %17 = cir.load %4 : !cir.ptr<!cir.ptr<!s32i>>, !cir.ptr<!s32i> loc(#loc412)
                  %18 = cir.load %3 : !cir.ptr<!s32i>, !s32i loc(#loc413)
                  %19 = cir.ptr_stride(%17 : !cir.ptr<!s32i>, %18 : !s32i), !cir.ptr<!s32i> loc(#loc414)
                  cir.store %16, %19 : !s32i, !cir.ptr<!s32i> loc(#loc612)
                } loc(#loc611)
                cir.yield loc(#loc404)
              } step {
                %16 = cir.load %3 : !cir.ptr<!s32i>, !s32i loc(#loc415)
                %17 = cir.unary(inc, %16) nsw : !s32i, !s32i loc(#loc416)
                cir.store %17, %3 : !s32i, !cir.ptr<!s32i> loc(#loc613)
                cir.yield loc(#loc608)
              } loc(#loc608)
            } loc(#loc608)
            cir.scope {
              %15 = cir.load %0 : !cir.ptr<!s32i>, !s32i loc(#loc419)
              %16 = cir.const #cir.int<0> : !s32i loc(#loc420)
              %17 = cir.cmp(ge, %15, %16) : !s32i, !cir.bool loc(#loc615)
              cir.if %17 {
                %18 = cir.const #cir.int<1> : !s32i loc(#loc424)
                %19 = cir.load %4 : !cir.ptr<!cir.ptr<!s32i>>, !cir.ptr<!s32i> loc(#loc425)
                %20 = cir.load %0 : !cir.ptr<!s32i>, !s32i loc(#loc426)
                %21 = cir.ptr_stride(%19 : !cir.ptr<!s32i>, %20 : !s32i), !cir.ptr<!s32i> loc(#loc427)
                cir.store %18, %21 : !s32i, !cir.ptr<!s32i> loc(#loc617)
                cir.scope {
                  %22 = cir.const #cir.int<0> : !s32i loc(#loc430)
                  cir.store %22, %3 : !s32i, !cir.ptr<!s32i> loc(#loc619)
                  cir.for : cond {
                    %23 = cir.load %3 : !cir.ptr<!s32i>, !s32i loc(#loc432)
                    %24 = cir.const #cir.int<10> : !s32i loc(#loc433)
                    %25 = cir.cmp(lt, %23, %24) : !s32i, !cir.bool loc(#loc620)
                    cir.condition(%25) loc(#loc434)
                  } body {
                    cir.scope {
                      %23 = cir.load %4 : !cir.ptr<!cir.ptr<!s32i>>, !cir.ptr<!s32i> loc(#loc436)
                      %24 = cir.load %3 : !cir.ptr<!s32i>, !s32i loc(#loc437)
                      %25 = cir.ptr_stride(%23 : !cir.ptr<!s32i>, %24 : !s32i), !cir.ptr<!s32i> loc(#loc438)
                      %26 = cir.load %25 : !cir.ptr<!s32i>, !s32i loc(#loc436)
                      cir.call @printIntLine(%26) : (!s32i) -> () loc(#loc439)
                    } loc(#loc621)
                    cir.yield loc(#loc429)
                  } step {
                    %23 = cir.load %3 : !cir.ptr<!s32i>, !s32i loc(#loc440)
                    %24 = cir.unary(inc, %23) nsw : !s32i, !s32i loc(#loc441)
                    cir.store %24, %3 : !s32i, !cir.ptr<!s32i> loc(#loc622)
                    cir.yield loc(#loc618)
                  } loc(#loc618)
                } loc(#loc618)
              } else {
                %18 = cir.get_global @".str.1" : !cir.ptr<!cir.array<!s8i x 32>> loc(#loc442)
                %19 = cir.cast(array_to_ptrdecay, %18 : !cir.ptr<!cir.array<!s8i x 32>>), !cir.ptr<!s8i> loc(#loc442)
                cir.call @printLine(%19) : (!cir.ptr<!s8i>) -> () loc(#loc443)
              } loc(#loc616)
            } loc(#loc614)
            %12 = cir.get_global @free : !cir.ptr<!cir.func<(!cir.ptr<!void>)>> loc(#loc444)
            %13 = cir.load %4 : !cir.ptr<!cir.ptr<!s32i>>, !cir.ptr<!s32i> loc(#loc445)
            %14 = cir.cast(bitcast, %13 : !cir.ptr<!s32i>), !cir.ptr<!void> loc(#loc445)
            cir.call @free(%14) : (!cir.ptr<!void>) -> () extra(#fn_attr) loc(#loc444)
          } loc(#loc599)
          cir.break loc(#loc446)
        } loc(#loc598)
        cir.yield loc(#loc382)
      } loc(#loc597)
    } loc(#loc597)
    cir.return loc(#loc368)
  } loc(#loc591)
} loc(#loc)
#loc = loc("/workspaces/juliet-c/testcases/CWE122_Heap_Based_Buffer_Overflow/s06/CWE122_Heap_Based_Buffer_Overflow__c_CWE129_connect_socket_16.c":0:0)
#loc1 = loc("/usr/include/x86_64-linux-gnu/sys/socket.h":102:1)
#loc2 = loc("/usr/include/x86_64-linux-gnu/sys/socket.h":102:62)
#loc3 = loc("/usr/include/arpa/inet.h":34:1)
#loc4 = loc("/usr/include/arpa/inet.h":34:47)
#loc5 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_connect_socket_16.c":77:53)
#loc6 = loc("/usr/include/netinet/in.h":402:1)
#loc7 = loc("/usr/include/netinet/in.h":403:40)
#loc8 = loc("/usr/include/x86_64-linux-gnu/sys/socket.h":126:1)
#loc9 = loc("/usr/include/x86_64-linux-gnu/sys/socket.h":126:75)
#loc10 = loc("/usr/include/x86_64-linux-gnu/sys/socket.h":145:1)
#loc11 = loc("/usr/include/x86_64-linux-gnu/sys/socket.h":145:68)
#loc12 = loc("/usr/include/stdlib.h":105:1)
#loc13 = loc("/usr/include/stdlib.h":106:33)
#loc14 = loc("/usr/include/unistd.h":358:1)
#loc15 = loc("/usr/include/unistd.h":358:27)
#loc16 = loc("/usr/include/stdlib.h":672:1)
#loc17 = loc("/usr/include/stdlib.h":672:45)
#loc18 = loc("/usr/include/stdlib.h":756:1)
#loc19 = loc("/usr/include/stdlib.h":756:70)
#loc20 = loc("../../../testcasesupport/std_testcase_io.h":18:1)
#loc21 = loc("../../../testcasesupport/std_testcase_io.h":18:33)
#loc22 = loc("../../../testcasesupport/std_testcase_io.h":14:1)
#loc23 = loc("../../../testcasesupport/std_testcase_io.h":14:33)
#loc24 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_connect_socket_16.c":133:27)
#loc25 = loc("/usr/include/stdlib.h":687:1)
#loc26 = loc("/usr/include/stdlib.h":687:32)
#loc27 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_connect_socket_16.c":44:1)
#loc28 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_connect_socket_16.c":139:1)
#loc29 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_connect_socket_16.c":46:5)
#loc30 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_connect_socket_16.c":46:9)
#loc31 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_connect_socket_16.c":48:13)
#loc32 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_connect_socket_16.c":48:12)
#loc33 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_connect_socket_16.c":48:5)
#loc34 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_connect_socket_16.c":49:5)
#loc35 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_connect_socket_16.c":108:5)
#loc36 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_connect_socket_16.c":49:11)
#loc37 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_connect_socket_16.c":50:5)
#loc38 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_connect_socket_16.c":51:9)
#loc39 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_connect_socket_16.c":106:9)
#loc40 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_connect_socket_16.c":56:13)
#loc41 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_connect_socket_16.c":56:17)
#loc42 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_connect_socket_16.c":57:13)
#loc43 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_connect_socket_16.c":57:32)
#loc44 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_connect_socket_16.c":58:13)
#loc45 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_connect_socket_16.c":58:36)
#loc46 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_connect_socket_16.c":59:13)
#loc47 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_connect_socket_16.c":59:45)
#loc48 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_connect_socket_16.c":60:13)
#loc49 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_connect_socket_16.c":95:21)
#loc50 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_connect_socket_16.c":61:13)
#loc51 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_connect_socket_16.c":94:13)
#loc52 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_connect_socket_16.c":70:40)
#loc53 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_connect_socket_16.c":70:49)
#loc54 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_connect_socket_16.c":70:62)
#loc55 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_connect_socket_16.c":70:33)
#loc56 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_connect_socket_16.c":70:17)
#loc57 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_connect_socket_16.c":70:73)
#loc58 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_connect_socket_16.c":71:17)
#loc59 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_connect_socket_16.c":74:17)
#loc60 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_connect_socket_16.c":71:21)
#loc61 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_connect_socket_16.c":71:38)
#loc62 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_connect_socket_16.c":72:17)
#loc63 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_connect_socket_16.c":73:21)
#loc64 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_connect_socket_16.c":75:24)
#loc65 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_connect_socket_16.c":75:25)
#loc66 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_connect_socket_16.c":75:34)
#loc67 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_connect_socket_16.c":75:37)
#loc68 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_connect_socket_16.c":75:51)
#loc69 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_connect_socket_16.c":75:17)
#loc70 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_connect_socket_16.c":75:52)
#loc71 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_connect_socket_16.c":76:38)
#loc72 = loc("/usr/include/netinet/in.h":249:5)
#loc73 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_connect_socket_16.c":76:17)
#loc74 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_connect_socket_16.c":77:43)
#loc75 = loc("/usr/include/netinet/in.h":251:20)
#loc76 = loc("/usr/include/netinet/in.h":33:15)
#loc77 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_connect_socket_16.c":77:17)
#loc78 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_connect_socket_16.c":77:63)
#loc79 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_connect_socket_16.c":78:42)
#loc80 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_connect_socket_16.c":78:36)
#loc81 = loc("/usr/include/netinet/in.h":250:15)
#loc82 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_connect_socket_16.c":78:17)
#loc83 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_connect_socket_16.c":78:50)
#loc84 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_connect_socket_16.c":79:17)
#loc85 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_connect_socket_16.c":82:17)
#loc86 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_connect_socket_16.c":79:29)
#loc87 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_connect_socket_16.c":79:62)
#loc88 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_connect_socket_16.c":79:63)
#loc89 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_connect_socket_16.c":79:72)
#loc90 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_connect_socket_16.c":79:86)
#loc91 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_connect_socket_16.c":79:21)
#loc92 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_connect_socket_16.c":79:92)
#loc93 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_connect_socket_16.c":80:17)
#loc94 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_connect_socket_16.c":81:21)
#loc95 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_connect_socket_16.c":85:35)
#loc96 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_connect_socket_16.c":85:50)
#loc97 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_connect_socket_16.c":85:63)
#loc98 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_connect_socket_16.c":85:81)
#loc99 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_connect_socket_16.c":85:84)
#loc100 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_connect_socket_16.c":85:30)
#loc101 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_connect_socket_16.c":85:17)
#loc102 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_connect_socket_16.c":85:85)
#loc103 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_connect_socket_16.c":86:17)
#loc104 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_connect_socket_16.c":89:17)
#loc105 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_connect_socket_16.c":86:21)
#loc106 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_connect_socket_16.c":86:35)
#loc107 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_connect_socket_16.c":86:48)
#loc108 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_connect_socket_16.c":86:51)
#loc109 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_connect_socket_16.c":86:65)
#loc110 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_connect_socket_16.c":87:17)
#loc111 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_connect_socket_16.c":88:21)
#loc112 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_connect_socket_16.c":91:43)
#loc113 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_connect_socket_16.c":91:29)
#loc114 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_connect_socket_16.c":91:17)
#loc115 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_connect_socket_16.c":93:29)
#loc116 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_connect_socket_16.c":93:24)
#loc117 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_connect_socket_16.c":93:17)
#loc118 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_connect_socket_16.c":93:40)
#loc119 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_connect_socket_16.c":95:20)
#loc120 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_connect_socket_16.c":96:13)
#loc121 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_connect_socket_16.c":99:13)
#loc122 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_connect_socket_16.c":96:17)
#loc123 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_connect_socket_16.c":96:34)
#loc124 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_connect_socket_16.c":97:13)
#loc125 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_connect_socket_16.c":98:30)
#loc126 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_connect_socket_16.c":98:17)
#loc127 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_connect_socket_16.c":107:9)
#loc128 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_connect_socket_16.c":109:5)
#loc129 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_connect_socket_16.c":138:5)
#loc130 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_connect_socket_16.c":109:11)
#loc131 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_connect_socket_16.c":110:5)
#loc132 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_connect_socket_16.c":111:9)
#loc133 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_connect_socket_16.c":136:9)
#loc134 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_connect_socket_16.c":112:13)
#loc135 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_connect_socket_16.c":112:17)
#loc136 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_connect_socket_16.c":113:13)
#loc137 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_connect_socket_16.c":113:58)
#loc138 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_connect_socket_16.c":113:35)
#loc139 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_connect_socket_16.c":113:42)
#loc140 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_connect_socket_16.c":113:47)
#loc141 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_connect_socket_16.c":113:57)
#loc142 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_connect_socket_16.c":114:13)
#loc143 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_connect_socket_16.c":114:43)
#loc144 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_connect_socket_16.c":114:17)
#loc145 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_connect_socket_16.c":114:27)
#loc146 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_connect_socket_16.c":114:33)
#loc147 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_connect_socket_16.c":114:34)
#loc148 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_connect_socket_16.c":114:40)
#loc149 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_connect_socket_16.c":114:39)
#loc150 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_connect_socket_16.c":116:13)
#loc151 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_connect_socket_16.c":119:13)
#loc152 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_connect_socket_16.c":116:22)
#loc153 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_connect_socket_16.c":116:18)
#loc154 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_connect_socket_16.c":116:25)
#loc155 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_connect_socket_16.c":116:29)
#loc156 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_connect_socket_16.c":116:27)
#loc157 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_connect_socket_16.c":117:13)
#loc158 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_connect_socket_16.c":118:29)
#loc159 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_connect_socket_16.c":118:17)
#loc160 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_connect_socket_16.c":118:24)
#loc161 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_connect_socket_16.c":118:25)
#loc162 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_connect_socket_16.c":116:34)
#loc163 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_connect_socket_16.c":116:33)
#loc164 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_connect_socket_16.c":122:13)
#loc165 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_connect_socket_16.c":134:13)
#loc166 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_connect_socket_16.c":122:17)
#loc167 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_connect_socket_16.c":122:25)
#loc168 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_connect_socket_16.c":123:13)
#loc169 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_connect_socket_16.c":130:13)
#loc170 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_connect_socket_16.c":132:13)
#loc171 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_connect_socket_16.c":124:32)
#loc172 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_connect_socket_16.c":124:17)
#loc173 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_connect_socket_16.c":124:24)
#loc174 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_connect_socket_16.c":124:28)
#loc175 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_connect_socket_16.c":126:17)
#loc176 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_connect_socket_16.c":129:17)
#loc177 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_connect_socket_16.c":126:25)
#loc178 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_connect_socket_16.c":126:21)
#loc179 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_connect_socket_16.c":126:28)
#loc180 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_connect_socket_16.c":126:32)
#loc181 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_connect_socket_16.c":126:30)
#loc182 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_connect_socket_16.c":127:17)
#loc183 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_connect_socket_16.c":128:34)
#loc184 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_connect_socket_16.c":128:41)
#loc185 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_connect_socket_16.c":128:42)
#loc186 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_connect_socket_16.c":128:21)
#loc187 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_connect_socket_16.c":126:37)
#loc188 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_connect_socket_16.c":126:36)
#loc189 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_connect_socket_16.c":133:17)
#loc190 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_connect_socket_16.c":135:13)
#loc191 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_connect_socket_16.c":135:18)
#loc192 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_connect_socket_16.c":137:9)
#loc193 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_connect_socket_16.c":287:1)
#loc194 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_connect_socket_16.c":291:1)
#loc195 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_connect_socket_16.c":289:5)
#loc196 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_connect_socket_16.c":289:13)
#loc197 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_connect_socket_16.c":290:5)
#loc198 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_connect_socket_16.c":290:13)
#loc199 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_connect_socket_16.c":234:27)
#loc200 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_connect_socket_16.c":146:1)
#loc201 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_connect_socket_16.c":240:1)
#loc202 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_connect_socket_16.c":148:5)
#loc203 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_connect_socket_16.c":148:9)
#loc204 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_connect_socket_16.c":150:13)
#loc205 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_connect_socket_16.c":150:12)
#loc206 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_connect_socket_16.c":150:5)
#loc207 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_connect_socket_16.c":151:5)
#loc208 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_connect_socket_16.c":210:5)
#loc209 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_connect_socket_16.c":151:11)
#loc210 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_connect_socket_16.c":152:5)
#loc211 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_connect_socket_16.c":153:9)
#loc212 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_connect_socket_16.c":208:9)
#loc213 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_connect_socket_16.c":158:13)
#loc214 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_connect_socket_16.c":158:17)
#loc215 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_connect_socket_16.c":159:13)
#loc216 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_connect_socket_16.c":159:32)
#loc217 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_connect_socket_16.c":160:13)
#loc218 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_connect_socket_16.c":160:36)
#loc219 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_connect_socket_16.c":161:13)
#loc220 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_connect_socket_16.c":161:45)
#loc221 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_connect_socket_16.c":162:13)
#loc222 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_connect_socket_16.c":197:21)
#loc223 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_connect_socket_16.c":163:13)
#loc224 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_connect_socket_16.c":196:13)
#loc225 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_connect_socket_16.c":172:40)
#loc226 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_connect_socket_16.c":172:49)
#loc227 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_connect_socket_16.c":172:62)
#loc228 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_connect_socket_16.c":172:33)
#loc229 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_connect_socket_16.c":172:17)
#loc230 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_connect_socket_16.c":172:73)
#loc231 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_connect_socket_16.c":173:17)
#loc232 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_connect_socket_16.c":176:17)
#loc233 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_connect_socket_16.c":173:21)
#loc234 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_connect_socket_16.c":173:38)
#loc235 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_connect_socket_16.c":174:17)
#loc236 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_connect_socket_16.c":175:21)
#loc237 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_connect_socket_16.c":177:24)
#loc238 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_connect_socket_16.c":177:25)
#loc239 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_connect_socket_16.c":177:34)
#loc240 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_connect_socket_16.c":177:37)
#loc241 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_connect_socket_16.c":177:51)
#loc242 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_connect_socket_16.c":177:17)
#loc243 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_connect_socket_16.c":177:52)
#loc244 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_connect_socket_16.c":178:38)
#loc245 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_connect_socket_16.c":178:17)
#loc246 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_connect_socket_16.c":179:53)
#loc247 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_connect_socket_16.c":179:43)
#loc248 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_connect_socket_16.c":179:17)
#loc249 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_connect_socket_16.c":179:63)
#loc250 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_connect_socket_16.c":180:42)
#loc251 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_connect_socket_16.c":180:36)
#loc252 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_connect_socket_16.c":180:17)
#loc253 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_connect_socket_16.c":180:50)
#loc254 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_connect_socket_16.c":181:17)
#loc255 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_connect_socket_16.c":184:17)
#loc256 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_connect_socket_16.c":181:29)
#loc257 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_connect_socket_16.c":181:62)
#loc258 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_connect_socket_16.c":181:63)
#loc259 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_connect_socket_16.c":181:72)
#loc260 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_connect_socket_16.c":181:86)
#loc261 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_connect_socket_16.c":181:21)
#loc262 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_connect_socket_16.c":181:92)
#loc263 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_connect_socket_16.c":182:17)
#loc264 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_connect_socket_16.c":183:21)
#loc265 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_connect_socket_16.c":187:35)
#loc266 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_connect_socket_16.c":187:50)
#loc267 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_connect_socket_16.c":187:63)
#loc268 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_connect_socket_16.c":187:81)
#loc269 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_connect_socket_16.c":187:84)
#loc270 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_connect_socket_16.c":187:30)
#loc271 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_connect_socket_16.c":187:17)
#loc272 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_connect_socket_16.c":187:85)
#loc273 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_connect_socket_16.c":188:17)
#loc274 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_connect_socket_16.c":191:17)
#loc275 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_connect_socket_16.c":188:21)
#loc276 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_connect_socket_16.c":188:35)
#loc277 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_connect_socket_16.c":188:48)
#loc278 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_connect_socket_16.c":188:51)
#loc279 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_connect_socket_16.c":188:65)
#loc280 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_connect_socket_16.c":189:17)
#loc281 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_connect_socket_16.c":190:21)
#loc282 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_connect_socket_16.c":193:43)
#loc283 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_connect_socket_16.c":193:29)
#loc284 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_connect_socket_16.c":193:17)
#loc285 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_connect_socket_16.c":195:29)
#loc286 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_connect_socket_16.c":195:24)
#loc287 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_connect_socket_16.c":195:17)
#loc288 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_connect_socket_16.c":195:40)
#loc289 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_connect_socket_16.c":197:20)
#loc290 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_connect_socket_16.c":198:13)
#loc291 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_connect_socket_16.c":201:13)
#loc292 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_connect_socket_16.c":198:17)
#loc293 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_connect_socket_16.c":198:34)
#loc294 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_connect_socket_16.c":199:13)
#loc295 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_connect_socket_16.c":200:30)
#loc296 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_connect_socket_16.c":200:17)
#loc297 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_connect_socket_16.c":209:9)
#loc298 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_connect_socket_16.c":211:5)
#loc299 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_connect_socket_16.c":239:5)
#loc300 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_connect_socket_16.c":211:11)
#loc301 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_connect_socket_16.c":212:5)
#loc302 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_connect_socket_16.c":213:9)
#loc303 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_connect_socket_16.c":237:9)
#loc304 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_connect_socket_16.c":214:13)
#loc305 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_connect_socket_16.c":214:17)
#loc306 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_connect_socket_16.c":215:13)
#loc307 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_connect_socket_16.c":215:58)
#loc308 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_connect_socket_16.c":215:35)
#loc309 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_connect_socket_16.c":215:42)
#loc310 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_connect_socket_16.c":215:47)
#loc311 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_connect_socket_16.c":215:57)
#loc312 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_connect_socket_16.c":216:13)
#loc313 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_connect_socket_16.c":216:43)
#loc314 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_connect_socket_16.c":216:17)
#loc315 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_connect_socket_16.c":216:27)
#loc316 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_connect_socket_16.c":216:33)
#loc317 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_connect_socket_16.c":216:34)
#loc318 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_connect_socket_16.c":216:40)
#loc319 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_connect_socket_16.c":216:39)
#loc320 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_connect_socket_16.c":218:13)
#loc321 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_connect_socket_16.c":221:13)
#loc322 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_connect_socket_16.c":218:22)
#loc323 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_connect_socket_16.c":218:18)
#loc324 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_connect_socket_16.c":218:25)
#loc325 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_connect_socket_16.c":218:29)
#loc326 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_connect_socket_16.c":218:27)
#loc327 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_connect_socket_16.c":219:13)
#loc328 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_connect_socket_16.c":220:29)
#loc329 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_connect_socket_16.c":220:17)
#loc330 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_connect_socket_16.c":220:24)
#loc331 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_connect_socket_16.c":220:25)
#loc332 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_connect_socket_16.c":218:34)
#loc333 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_connect_socket_16.c":218:33)
#loc334 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_connect_socket_16.c":223:13)
#loc335 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_connect_socket_16.c":235:13)
#loc336 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_connect_socket_16.c":223:17)
#loc337 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_connect_socket_16.c":223:25)
#loc338 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_connect_socket_16.c":223:27)
#loc339 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_connect_socket_16.c":223:30)
#loc340 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_connect_socket_16.c":223:38)
#loc341 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_connect_socket_16.c":223:40)
#loc342 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_connect_socket_16.c":224:13)
#loc343 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_connect_socket_16.c":231:13)
#loc344 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_connect_socket_16.c":233:13)
#loc345 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_connect_socket_16.c":225:32)
#loc346 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_connect_socket_16.c":225:17)
#loc347 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_connect_socket_16.c":225:24)
#loc348 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_connect_socket_16.c":225:28)
#loc349 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_connect_socket_16.c":227:17)
#loc350 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_connect_socket_16.c":230:17)
#loc351 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_connect_socket_16.c":227:25)
#loc352 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_connect_socket_16.c":227:21)
#loc353 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_connect_socket_16.c":227:28)
#loc354 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_connect_socket_16.c":227:32)
#loc355 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_connect_socket_16.c":227:30)
#loc356 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_connect_socket_16.c":228:17)
#loc357 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_connect_socket_16.c":229:34)
#loc358 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_connect_socket_16.c":229:41)
#loc359 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_connect_socket_16.c":229:42)
#loc360 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_connect_socket_16.c":229:21)
#loc361 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_connect_socket_16.c":227:37)
#loc362 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_connect_socket_16.c":227:36)
#loc363 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_connect_socket_16.c":234:17)
#loc364 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_connect_socket_16.c":236:13)
#loc365 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_connect_socket_16.c":236:18)
#loc366 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_connect_socket_16.c":238:9)
#loc367 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_connect_socket_16.c":243:1)
#loc368 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_connect_socket_16.c":285:1)
#loc369 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_connect_socket_16.c":245:5)
#loc370 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_connect_socket_16.c":245:9)
#loc371 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_connect_socket_16.c":247:13)
#loc372 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_connect_socket_16.c":247:12)
#loc373 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_connect_socket_16.c":247:5)
#loc374 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_connect_socket_16.c":248:5)
#loc375 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_connect_socket_16.c":254:5)
#loc376 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_connect_socket_16.c":248:11)
#loc377 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_connect_socket_16.c":249:5)
#loc378 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_connect_socket_16.c":252:16)
#loc379 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_connect_socket_16.c":252:9)
#loc380 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_connect_socket_16.c":253:9)
#loc381 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_connect_socket_16.c":255:5)
#loc382 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_connect_socket_16.c":284:5)
#loc383 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_connect_socket_16.c":255:11)
#loc384 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_connect_socket_16.c":256:5)
#loc385 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_connect_socket_16.c":257:9)
#loc386 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_connect_socket_16.c":282:9)
#loc387 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_connect_socket_16.c":258:13)
#loc388 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_connect_socket_16.c":258:17)
#loc389 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_connect_socket_16.c":259:13)
#loc390 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_connect_socket_16.c":259:58)
#loc391 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_connect_socket_16.c":259:35)
#loc392 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_connect_socket_16.c":259:42)
#loc393 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_connect_socket_16.c":259:47)
#loc394 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_connect_socket_16.c":259:57)
#loc395 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_connect_socket_16.c":260:13)
#loc396 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_connect_socket_16.c":260:43)
#loc397 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_connect_socket_16.c":260:17)
#loc398 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_connect_socket_16.c":260:27)
#loc399 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_connect_socket_16.c":260:33)
#loc400 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_connect_socket_16.c":260:34)
#loc401 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_connect_socket_16.c":260:40)
#loc402 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_connect_socket_16.c":260:39)
#loc403 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_connect_socket_16.c":262:13)
#loc404 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_connect_socket_16.c":265:13)
#loc405 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_connect_socket_16.c":262:22)
#loc406 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_connect_socket_16.c":262:18)
#loc407 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_connect_socket_16.c":262:25)
#loc408 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_connect_socket_16.c":262:29)
#loc409 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_connect_socket_16.c":262:27)
#loc410 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_connect_socket_16.c":263:13)
#loc411 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_connect_socket_16.c":264:29)
#loc412 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_connect_socket_16.c":264:17)
#loc413 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_connect_socket_16.c":264:24)
#loc414 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_connect_socket_16.c":264:25)
#loc415 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_connect_socket_16.c":262:34)
#loc416 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_connect_socket_16.c":262:33)
#loc417 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_connect_socket_16.c":268:13)
#loc418 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_connect_socket_16.c":280:13)
#loc419 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_connect_socket_16.c":268:17)
#loc420 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_connect_socket_16.c":268:25)
#loc421 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_connect_socket_16.c":269:13)
#loc422 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_connect_socket_16.c":276:13)
#loc423 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_connect_socket_16.c":278:13)
#loc424 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_connect_socket_16.c":270:32)
#loc425 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_connect_socket_16.c":270:17)
#loc426 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_connect_socket_16.c":270:24)
#loc427 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_connect_socket_16.c":270:28)
#loc428 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_connect_socket_16.c":272:17)
#loc429 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_connect_socket_16.c":275:17)
#loc430 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_connect_socket_16.c":272:25)
#loc431 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_connect_socket_16.c":272:21)
#loc432 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_connect_socket_16.c":272:28)
#loc433 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_connect_socket_16.c":272:32)
#loc434 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_connect_socket_16.c":272:30)
#loc435 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_connect_socket_16.c":273:17)
#loc436 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_connect_socket_16.c":274:34)
#loc437 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_connect_socket_16.c":274:41)
#loc438 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_connect_socket_16.c":274:42)
#loc439 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_connect_socket_16.c":274:21)
#loc440 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_connect_socket_16.c":272:37)
#loc441 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_connect_socket_16.c":272:36)
#loc442 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_connect_socket_16.c":279:27)
#loc443 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_connect_socket_16.c":279:17)
#loc444 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_connect_socket_16.c":281:13)
#loc445 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_connect_socket_16.c":281:18)
#loc446 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_connect_socket_16.c":283:9)
#loc447 = loc(fused[#loc1, #loc2])
#loc448 = loc(fused[#loc3, #loc4])
#loc449 = loc(fused[#loc6, #loc7])
#loc450 = loc(fused[#loc8, #loc9])
#loc451 = loc(fused[#loc10, #loc11])
#loc452 = loc(fused[#loc12, #loc13])
#loc453 = loc(fused[#loc14, #loc15])
#loc454 = loc(fused[#loc16, #loc17])
#loc455 = loc(fused[#loc18, #loc19])
#loc456 = loc(fused[#loc20, #loc21])
#loc457 = loc(fused[#loc22, #loc23])
#loc458 = loc(fused[#loc25, #loc26])
#loc459 = loc(fused[#loc27, #loc28])
#loc460 = loc(fused[#loc29, #loc30])
#loc461 = loc(fused[#loc33, #loc31])
#loc462 = loc(fused[#loc34, #loc35])
#loc463 = loc(fused[#loc37, #loc35])
#loc464 = loc(fused[#loc38, #loc39])
#loc465 = loc(fused[#loc40, #loc41])
#loc466 = loc(fused[#loc42, #loc43])
#loc467 = loc(fused[#loc44, #loc45])
#loc468 = loc(fused[#loc46, #loc47])
#loc469 = loc(fused[#loc48, #loc49])
#loc470 = loc(fused[#loc50, #loc51])
#loc471 = loc(fused[#loc56, #loc57])
#loc472 = loc(fused[#loc58, #loc59])
#loc473 = loc(fused[#loc60, #loc61])
#loc474 = loc(fused[#loc62, #loc59])
#loc475 = loc(fused[#loc64, #loc65])
#loc476 = loc(fused[#loc67, #loc68])
#loc477 = loc(fused[#loc69, #loc70])
#loc478 = loc(fused[#loc73, #loc71])
#loc479 = loc(fused[#loc77, #loc78])
#loc480 = loc(fused[#loc82, #loc83])
#loc481 = loc(fused[#loc84, #loc85])
#loc482 = loc(fused[#loc87, #loc88])
#loc483 = loc(fused[#loc89, #loc90])
#loc484 = loc(fused[#loc91, #loc92])
#loc485 = loc(fused[#loc93, #loc85])
#loc486 = loc(fused[#loc97, #loc98])
#loc487 = loc(fused[#loc101, #loc102])
#loc488 = loc(fused[#loc103, #loc104])
#loc489 = loc(fused[#loc105, #loc106])
#loc490 = loc(fused[#loc108, #loc109])
#loc491 = loc(fused[#loc110, #loc104])
#loc492 = loc(fused[#loc114, #loc112])
#loc493 = loc(fused[#loc117, #loc118])
#loc494 = loc(fused[#loc120, #loc121])
#loc495 = loc(fused[#loc122, #loc123])
#loc496 = loc(fused[#loc124, #loc121])
#loc497 = loc(fused[#loc128, #loc129])
#loc498 = loc(fused[#loc131, #loc129])
#loc499 = loc(fused[#loc132, #loc133])
#loc500 = loc(fused[#loc134, #loc135])
#loc501 = loc(fused[#loc136, #loc137])
#loc502 = loc(fused[#loc140, #loc141])
#loc503 = loc(fused[#loc139, #loc141])
#loc504 = loc(fused[#loc138, #loc137])
#loc505 = loc(fused[#loc142, #loc143])
#loc506 = loc(fused[#loc144, #loc145])
#loc507 = loc(fused[#loc146, #loc143])
#loc508 = loc(fused[#loc150, #loc151])
#loc509 = loc(fused[#loc153, #loc152])
#loc510 = loc(fused[#loc154, #loc155])
#loc511 = loc(fused[#loc157, #loc151])
#loc512 = loc(fused[#loc159, #loc158])
#loc513 = loc(fused[#loc163, #loc162])
#loc514 = loc(fused[#loc164, #loc165])
#loc515 = loc(fused[#loc166, #loc167])
#loc516 = loc(fused[#loc168, #loc169, #loc170, #loc165])
#loc517 = loc(fused[#loc172, #loc171])
#loc518 = loc(fused[#loc175, #loc176])
#loc519 = loc(fused[#loc178, #loc177])
#loc520 = loc(fused[#loc179, #loc180])
#loc521 = loc(fused[#loc182, #loc176])
#loc522 = loc(fused[#loc188, #loc187])
#loc523 = loc(fused[#loc193, #loc194])
#loc524 = loc(fused[#loc195, #loc196])
#loc525 = loc(fused[#loc197, #loc198])
#loc526 = loc(fused[#loc200, #loc201])
#loc527 = loc(fused[#loc202, #loc203])
#loc528 = loc(fused[#loc206, #loc204])
#loc529 = loc(fused[#loc207, #loc208])
#loc530 = loc(fused[#loc210, #loc208])
#loc531 = loc(fused[#loc211, #loc212])
#loc532 = loc(fused[#loc213, #loc214])
#loc533 = loc(fused[#loc215, #loc216])
#loc534 = loc(fused[#loc217, #loc218])
#loc535 = loc(fused[#loc219, #loc220])
#loc536 = loc(fused[#loc221, #loc222])
#loc537 = loc(fused[#loc223, #loc224])
#loc538 = loc(fused[#loc229, #loc230])
#loc539 = loc(fused[#loc231, #loc232])
#loc540 = loc(fused[#loc233, #loc234])
#loc541 = loc(fused[#loc235, #loc232])
#loc542 = loc(fused[#loc237, #loc238])
#loc543 = loc(fused[#loc240, #loc241])
#loc544 = loc(fused[#loc242, #loc243])
#loc545 = loc(fused[#loc245, #loc244])
#loc546 = loc(fused[#loc248, #loc249])
#loc547 = loc(fused[#loc252, #loc253])
#loc548 = loc(fused[#loc254, #loc255])
#loc549 = loc(fused[#loc257, #loc258])
#loc550 = loc(fused[#loc259, #loc260])
#loc551 = loc(fused[#loc261, #loc262])
#loc552 = loc(fused[#loc263, #loc255])
#loc553 = loc(fused[#loc267, #loc268])
#loc554 = loc(fused[#loc271, #loc272])
#loc555 = loc(fused[#loc273, #loc274])
#loc556 = loc(fused[#loc275, #loc276])
#loc557 = loc(fused[#loc278, #loc279])
#loc558 = loc(fused[#loc280, #loc274])
#loc559 = loc(fused[#loc284, #loc282])
#loc560 = loc(fused[#loc287, #loc288])
#loc561 = loc(fused[#loc290, #loc291])
#loc562 = loc(fused[#loc292, #loc293])
#loc563 = loc(fused[#loc294, #loc291])
#loc564 = loc(fused[#loc298, #loc299])
#loc565 = loc(fused[#loc301, #loc299])
#loc566 = loc(fused[#loc302, #loc303])
#loc567 = loc(fused[#loc304, #loc305])
#loc568 = loc(fused[#loc306, #loc307])
#loc569 = loc(fused[#loc310, #loc311])
#loc570 = loc(fused[#loc309, #loc311])
#loc571 = loc(fused[#loc308, #loc307])
#loc572 = loc(fused[#loc312, #loc313])
#loc573 = loc(fused[#loc314, #loc315])
#loc574 = loc(fused[#loc316, #loc313])
#loc575 = loc(fused[#loc320, #loc321])
#loc576 = loc(fused[#loc323, #loc322])
#loc577 = loc(fused[#loc324, #loc325])
#loc578 = loc(fused[#loc327, #loc321])
#loc579 = loc(fused[#loc329, #loc328])
#loc580 = loc(fused[#loc333, #loc332])
#loc581 = loc(fused[#loc334, #loc335])
#loc582 = loc(fused[#loc336, #loc337])
#loc583 = loc(fused[#loc339, #loc341])
#loc584 = loc(fused[#loc342, #loc343, #loc344, #loc335])
#loc585 = loc(fused[#loc346, #loc345])
#loc586 = loc(fused[#loc349, #loc350])
#loc587 = loc(fused[#loc352, #loc351])
#loc588 = loc(fused[#loc353, #loc354])
#loc589 = loc(fused[#loc356, #loc350])
#loc590 = loc(fused[#loc362, #loc361])
#loc591 = loc(fused[#loc367, #loc368])
#loc592 = loc(fused[#loc369, #loc370])
#loc593 = loc(fused[#loc373, #loc371])
#loc594 = loc(fused[#loc374, #loc375])
#loc595 = loc(fused[#loc377, #loc375])
#loc596 = loc(fused[#loc379, #loc378])
#loc597 = loc(fused[#loc381, #loc382])
#loc598 = loc(fused[#loc384, #loc382])
#loc599 = loc(fused[#loc385, #loc386])
#loc600 = loc(fused[#loc387, #loc388])
#loc601 = loc(fused[#loc389, #loc390])
#loc602 = loc(fused[#loc393, #loc394])
#loc603 = loc(fused[#loc392, #loc394])
#loc604 = loc(fused[#loc391, #loc390])
#loc605 = loc(fused[#loc395, #loc396])
#loc606 = loc(fused[#loc397, #loc398])
#loc607 = loc(fused[#loc399, #loc396])
#loc608 = loc(fused[#loc403, #loc404])
#loc609 = loc(fused[#loc406, #loc405])
#loc610 = loc(fused[#loc407, #loc408])
#loc611 = loc(fused[#loc410, #loc404])
#loc612 = loc(fused[#loc412, #loc411])
#loc613 = loc(fused[#loc416, #loc415])
#loc614 = loc(fused[#loc417, #loc418])
#loc615 = loc(fused[#loc419, #loc420])
#loc616 = loc(fused[#loc421, #loc422, #loc423, #loc418])
#loc617 = loc(fused[#loc425, #loc424])
#loc618 = loc(fused[#loc428, #loc429])
#loc619 = loc(fused[#loc431, #loc430])
#loc620 = loc(fused[#loc432, #loc433])
#loc621 = loc(fused[#loc435, #loc429])
#loc622 = loc(fused[#loc441, #loc440])
