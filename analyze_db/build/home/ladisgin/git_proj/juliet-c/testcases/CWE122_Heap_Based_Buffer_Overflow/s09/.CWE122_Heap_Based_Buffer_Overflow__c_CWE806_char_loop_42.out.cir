!s32i = !cir.int<s, 32>
!s64i = !cir.int<s, 64>
!s8i = !cir.int<s, 8>
!u32i = !cir.int<u, 32>
!u64i = !cir.int<u, 64>
!void = !cir.void
#fn_attr = #cir<extra({nothrow = #cir.nothrow})>
#fn_attr1 = #cir<extra({inline = #cir.inline<no>, nothrow = #cir.nothrow, optnone = #cir.optnone})>
#loc7 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE806_char_loop_42.c":23:25)
#loc8 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE806_char_loop_42.c":23:32)
#loc99 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE806_char_loop_42.c":101:10)
#loc100 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE806_char_loop_42.c":101:14)
#loc101 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE806_char_loop_42.c":101:20)
#loc102 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE806_char_loop_42.c":101:32)
#loc119 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE806_char_loop_42.c":56:29)
#loc120 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE806_char_loop_42.c":56:36)
#loc194 = loc(fused[#loc7, #loc8])
#loc228 = loc(fused[#loc99, #loc100])
#loc229 = loc(fused[#loc101, #loc102])
#loc234 = loc(fused[#loc119, #loc120])
module @"/home/ladisgin/git_proj/juliet-c/testcases/CWE122_Heap_Based_Buffer_Overflow/s09/CWE122_Heap_Based_Buffer_Overflow__c_CWE806_char_loop_42.c" attributes {cir.lang = #cir.lang<c>, cir.sob = #cir.signed_overflow_behavior<undefined>, cir.triple = "x86_64-unknown-linux-gnu", dlti.dl_spec = #dlti.dl_spec<i8 = dense<8> : vector<2xi64>, i16 = dense<16> : vector<2xi64>, i32 = dense<32> : vector<2xi64>, f16 = dense<16> : vector<2xi64>, f64 = dense<64> : vector<2xi64>, f128 = dense<128> : vector<2xi64>, !llvm.ptr<272> = dense<64> : vector<4xi64>, !llvm.ptr<271> = dense<32> : vector<4xi64>, i64 = dense<64> : vector<2xi64>, !llvm.ptr<270> = dense<32> : vector<4xi64>, i128 = dense<128> : vector<2xi64>, f80 = dense<128> : vector<2xi64>, !llvm.ptr = dense<64> : vector<4xi64>, i1 = dense<8> : vector<2xi64>, "dlti.endianness" = "little", "dlti.stack_alignment" = 128 : i64>} {
  cir.func private @malloc(!u64i) -> !cir.ptr<!void> extra(#fn_attr) loc(#loc191)
  cir.func private @exit(!s32i) extra(#fn_attr) loc(#loc192)
  cir.func internal private @badSource(%arg0: !cir.ptr<!s8i> loc(fused[#loc7, #loc8])) -> !cir.ptr<!s8i> extra(#fn_attr1) {
    %0 = cir.alloca !cir.ptr<!s8i>, !cir.ptr<!cir.ptr<!s8i>>, ["data", init] {alignment = 8 : i64} loc(#loc194)
    %1 = cir.alloca !cir.ptr<!s8i>, !cir.ptr<!cir.ptr<!s8i>>, ["__retval"] {alignment = 8 : i64} loc(#loc6)
    cir.store %arg0, %0 : !cir.ptr<!s8i>, !cir.ptr<!cir.ptr<!s8i>> loc(#loc9)
    %2 = cir.load %0 : !cir.ptr<!cir.ptr<!s8i>>, !cir.ptr<!s8i> loc(#loc10)
    %3 = cir.cast(bitcast, %2 : !cir.ptr<!s8i>), !cir.ptr<!void> loc(#loc10)
    %4 = cir.const #cir.int<65> : !s32i loc(#loc11)
    %5 = cir.const #cir.int<100> : !s32i loc(#loc12)
    %6 = cir.const #cir.int<1> : !s32i loc(#loc13)
    %7 = cir.binop(sub, %5, %6) nsw : !s32i loc(#loc12)
    %8 = cir.cast(integral, %7 : !s32i), !u64i loc(#loc12)
    cir.libc.memset %8 bytes from %3 set to %4 : !cir.ptr<!void>, !s32i, !u64i loc(#loc195)
    %9 = cir.const #cir.int<0> : !s32i loc(#loc16)
    %10 = cir.cast(integral, %9 : !s32i), !s8i loc(#loc16)
    %11 = cir.load %0 : !cir.ptr<!cir.ptr<!s8i>>, !cir.ptr<!s8i> loc(#loc17)
    %12 = cir.const #cir.int<100> : !s32i loc(#loc18)
    %13 = cir.const #cir.int<1> : !s32i loc(#loc19)
    %14 = cir.binop(sub, %12, %13) nsw : !s32i loc(#loc18)
    %15 = cir.ptr_stride(%11 : !cir.ptr<!s8i>, %14 : !s32i), !cir.ptr<!s8i> loc(#loc20)
    cir.store %10, %15 : !s8i, !cir.ptr<!s8i> loc(#loc196)
    %16 = cir.load %0 : !cir.ptr<!cir.ptr<!s8i>>, !cir.ptr<!s8i> loc(#loc21)
    cir.store %16, %1 : !cir.ptr<!s8i>, !cir.ptr<!cir.ptr<!s8i>> loc(#loc197)
    %17 = cir.load %1 : !cir.ptr<!cir.ptr<!s8i>>, !cir.ptr<!s8i> loc(#loc197)
    cir.return %17 : !cir.ptr<!s8i> loc(#loc197)
  } loc(#loc193)
  cir.func private @strlen(!cir.ptr<!s8i>) -> !u64i extra(#fn_attr) loc(#loc198)
  cir.func private @printLine(!cir.ptr<!s8i>) loc(#loc199)
  cir.func private @free(!cir.ptr<!void>) extra(#fn_attr) loc(#loc200)
  cir.func no_proto @CWE122_Heap_Based_Buffer_Overflow__c_CWE806_char_loop_42_bad() extra(#fn_attr1) {
    %0 = cir.alloca !cir.ptr<!s8i>, !cir.ptr<!cir.ptr<!s8i>>, ["data"] {alignment = 8 : i64} loc(#loc202)
    %1 = cir.get_global @malloc : !cir.ptr<!cir.func<!cir.ptr<!void> (!u64i)>> loc(#loc33)
    %2 = cir.const #cir.int<100> : !s32i loc(#loc34)
    %3 = cir.cast(integral, %2 : !s32i), !u64i loc(#loc34)
    %4 = cir.const #cir.int<1> : !u64i loc(#loc203)
    %5 = cir.binop(mul, %3, %4) : !u64i loc(#loc204)
    %6 = cir.call @malloc(%5) : (!u64i) -> !cir.ptr<!void> extra(#fn_attr) loc(#loc33)
    %7 = cir.cast(bitcast, %6 : !cir.ptr<!void>), !cir.ptr<!s8i> loc(#loc205)
    cir.store %7, %0 : !cir.ptr<!s8i>, !cir.ptr<!cir.ptr<!s8i>> loc(#loc206)
    cir.scope {
      %10 = cir.load %0 : !cir.ptr<!cir.ptr<!s8i>>, !cir.ptr<!s8i> loc(#loc41)
      %11 = cir.const #cir.ptr<null> : !cir.ptr<!void> loc(#loc42)
      %12 = cir.cast(bitcast, %11 : !cir.ptr<!void>), !cir.ptr<!s8i> loc(#loc42)
      %13 = cir.cmp(eq, %10, %12) : !cir.ptr<!s8i>, !cir.bool loc(#loc208)
      cir.if %13 {
        %14 = cir.get_global @exit : !cir.ptr<!cir.func<!void (!s32i)>> loc(#loc44)
        %15 = cir.const #cir.int<1> : !s32i loc(#loc45)
        %16 = cir.unary(minus, %15) : !s32i, !s32i loc(#loc46)
        cir.call @exit(%16) : (!s32i) -> () extra(#fn_attr) loc(#loc44)
      } loc(#loc209)
    } loc(#loc207)
    %8 = cir.load %0 : !cir.ptr<!cir.ptr<!s8i>>, !cir.ptr<!s8i> loc(#loc47)
    %9 = cir.call @badSource(%8) : (!cir.ptr<!s8i>) -> !cir.ptr<!s8i> loc(#loc48)
    cir.store %9, %0 : !cir.ptr<!s8i>, !cir.ptr<!cir.ptr<!s8i>> loc(#loc210)
    cir.scope {
      %10 = cir.alloca !cir.array<!s8i x 50>, !cir.ptr<!cir.array<!s8i x 50>>, ["dest"] {alignment = 16 : i64} loc(#loc212)
      %11 = cir.alloca !u64i, !cir.ptr<!u64i>, ["i"] {alignment = 8 : i64} loc(#loc213)
      %12 = cir.alloca !u64i, !cir.ptr<!u64i>, ["dataLen"] {alignment = 8 : i64} loc(#loc214)
      %13 = cir.const #cir.zero : !cir.array<!s8i x 50> loc(#loc212)
      cir.store %13, %10 : !cir.array<!s8i x 50>, !cir.ptr<!cir.array<!s8i x 50>> loc(#loc212)
      %14 = cir.get_global @strlen : !cir.ptr<!cir.func<!u64i (!cir.ptr<!s8i>)>> loc(#loc58)
      %15 = cir.load %0 : !cir.ptr<!cir.ptr<!s8i>>, !cir.ptr<!s8i> loc(#loc59)
      %16 = cir.call @strlen(%15) : (!cir.ptr<!s8i>) -> !u64i extra(#fn_attr) loc(#loc58)
      cir.store %16, %12 : !u64i, !cir.ptr<!u64i> loc(#loc215)
      cir.scope {
        %28 = cir.const #cir.int<0> : !s32i loc(#loc64)
        %29 = cir.cast(integral, %28 : !s32i), !u64i loc(#loc64)
        cir.store %29, %11 : !u64i, !cir.ptr<!u64i> loc(#loc217)
        cir.for : cond {
          %30 = cir.load %11 : !cir.ptr<!u64i>, !u64i loc(#loc66)
          %31 = cir.load %12 : !cir.ptr<!u64i>, !u64i loc(#loc67)
          %32 = cir.cmp(lt, %30, %31) : !u64i, !cir.bool loc(#loc218)
          cir.condition(%32) loc(#loc68)
        } body {
          cir.scope {
            %30 = cir.load %0 : !cir.ptr<!cir.ptr<!s8i>>, !cir.ptr<!s8i> loc(#loc70)
            %31 = cir.load %11 : !cir.ptr<!u64i>, !u64i loc(#loc71)
            %32 = cir.ptr_stride(%30 : !cir.ptr<!s8i>, %31 : !u64i), !cir.ptr<!s8i> loc(#loc72)
            %33 = cir.load %32 : !cir.ptr<!s8i>, !s8i loc(#loc70)
            %34 = cir.load %11 : !cir.ptr<!u64i>, !u64i loc(#loc73)
            %35 = cir.cast(array_to_ptrdecay, %10 : !cir.ptr<!cir.array<!s8i x 50>>), !cir.ptr<!s8i> loc(#loc74)
            %36 = cir.ptr_stride(%35 : !cir.ptr<!s8i>, %34 : !u64i), !cir.ptr<!s8i> loc(#loc74)
            cir.store %33, %36 : !s8i, !cir.ptr<!s8i> loc(#loc220)
          } loc(#loc219)
          cir.yield loc(#loc63)
        } step {
          %30 = cir.load %11 : !cir.ptr<!u64i>, !u64i loc(#loc75)
          %31 = cir.unary(inc, %30) : !u64i, !u64i loc(#loc76)
          cir.store %31, %11 : !u64i, !cir.ptr<!u64i> loc(#loc221)
          cir.yield loc(#loc216)
        } loc(#loc216)
      } loc(#loc216)
      %17 = cir.const #cir.int<0> : !s32i loc(#loc77)
      %18 = cir.cast(integral, %17 : !s32i), !s8i loc(#loc77)
      %19 = cir.const #cir.int<50> : !s32i loc(#loc78)
      %20 = cir.const #cir.int<1> : !s32i loc(#loc79)
      %21 = cir.binop(sub, %19, %20) nsw : !s32i loc(#loc78)
      %22 = cir.cast(array_to_ptrdecay, %10 : !cir.ptr<!cir.array<!s8i x 50>>), !cir.ptr<!s8i> loc(#loc80)
      %23 = cir.ptr_stride(%22 : !cir.ptr<!s8i>, %21 : !s32i), !cir.ptr<!s8i> loc(#loc80)
      cir.store %18, %23 : !s8i, !cir.ptr<!s8i> loc(#loc222)
      %24 = cir.load %0 : !cir.ptr<!cir.ptr<!s8i>>, !cir.ptr<!s8i> loc(#loc81)
      cir.call @printLine(%24) : (!cir.ptr<!s8i>) -> () loc(#loc82)
      %25 = cir.get_global @free : !cir.ptr<!cir.func<!void (!cir.ptr<!void>)>> loc(#loc83)
      %26 = cir.load %0 : !cir.ptr<!cir.ptr<!s8i>>, !cir.ptr<!s8i> loc(#loc84)
      %27 = cir.cast(bitcast, %26 : !cir.ptr<!s8i>), !cir.ptr<!void> loc(#loc84)
      cir.call @free(%27) : (!cir.ptr<!void>) -> () extra(#fn_attr) loc(#loc83)
    } loc(#loc211)
    cir.return loc(#loc30)
  } loc(#loc201)
  cir.func no_proto @CWE122_Heap_Based_Buffer_Overflow__c_CWE806_char_loop_42_good() extra(#fn_attr1) {
    %0 = cir.get_global @goodG2B : !cir.ptr<!cir.func<!void ()>> loc(#loc224)
    cir.call %0() : (!cir.ptr<!cir.func<!void ()>>) -> () loc(#loc87)
    cir.return loc(#loc86)
  } loc(#loc223)
  cir.func private @srand(!u32i) extra(#fn_attr) loc(#loc225)
  cir.func private @time(!cir.ptr<!s64i>) -> !s64i extra(#fn_attr) loc(#loc226)
  cir.global "private" constant cir_private dsolocal @".str" = #cir.const_array<"Calling good()...\00" : !cir.array<!s8i x 18>> : !cir.array<!s8i x 18> {alignment = 1 : i64} loc(#loc93)
  cir.global "private" constant cir_private dsolocal @".str.1" = #cir.const_array<"Finished good()\00" : !cir.array<!s8i x 16>> : !cir.array<!s8i x 16> {alignment = 1 : i64} loc(#loc94)
  cir.global "private" constant cir_private dsolocal @".str.2" = #cir.const_array<"Calling bad()...\00" : !cir.array<!s8i x 17>> : !cir.array<!s8i x 17> {alignment = 1 : i64} loc(#loc95)
  cir.global "private" constant cir_private dsolocal @".str.3" = #cir.const_array<"Finished bad()\00" : !cir.array<!s8i x 15>> : !cir.array<!s8i x 15> {alignment = 1 : i64} loc(#loc96)
  cir.func @main(%arg0: !s32i loc(fused[#loc99, #loc100]), %arg1: !cir.ptr<!cir.ptr<!s8i>> loc(fused[#loc101, #loc102])) -> !s32i extra(#fn_attr1) {
    %0 = cir.alloca !s32i, !cir.ptr<!s32i>, ["argc", init] {alignment = 4 : i64} loc(#loc228)
    %1 = cir.alloca !cir.ptr<!cir.ptr<!s8i>>, !cir.ptr<!cir.ptr<!cir.ptr<!s8i>>>, ["argv", init] {alignment = 8 : i64} loc(#loc229)
    %2 = cir.alloca !s32i, !cir.ptr<!s32i>, ["__retval"] {alignment = 4 : i64} loc(#loc98)
    cir.store %arg0, %0 : !s32i, !cir.ptr<!s32i> loc(#loc103)
    cir.store %arg1, %1 : !cir.ptr<!cir.ptr<!s8i>>, !cir.ptr<!cir.ptr<!cir.ptr<!s8i>>> loc(#loc103)
    %3 = cir.const #cir.ptr<null> : !cir.ptr<!s64i> loc(#loc104)
    %4 = cir.call @time(%3) : (!cir.ptr<!s64i>) -> !s64i extra(#fn_attr) loc(#loc105)
    %5 = cir.cast(integral, %4 : !s64i), !u32i loc(#loc105)
    cir.call @srand(%5) : (!u32i) -> () extra(#fn_attr) loc(#loc106)
    %6 = cir.get_global @".str" : !cir.ptr<!cir.array<!s8i x 18>> loc(#loc93)
    %7 = cir.cast(array_to_ptrdecay, %6 : !cir.ptr<!cir.array<!s8i x 18>>), !cir.ptr<!s8i> loc(#loc93)
    cir.call @printLine(%7) : (!cir.ptr<!s8i>) -> () loc(#loc107)
    %8 = cir.get_global @CWE122_Heap_Based_Buffer_Overflow__c_CWE806_char_loop_42_good : !cir.ptr<!cir.func<!void ()>> loc(#loc230)
    cir.call @CWE122_Heap_Based_Buffer_Overflow__c_CWE806_char_loop_42_good() : () -> () loc(#loc108)
    %9 = cir.get_global @".str.1" : !cir.ptr<!cir.array<!s8i x 16>> loc(#loc94)
    %10 = cir.cast(array_to_ptrdecay, %9 : !cir.ptr<!cir.array<!s8i x 16>>), !cir.ptr<!s8i> loc(#loc94)
    cir.call @printLine(%10) : (!cir.ptr<!s8i>) -> () loc(#loc110)
    %11 = cir.get_global @".str.2" : !cir.ptr<!cir.array<!s8i x 17>> loc(#loc95)
    %12 = cir.cast(array_to_ptrdecay, %11 : !cir.ptr<!cir.array<!s8i x 17>>), !cir.ptr<!s8i> loc(#loc95)
    cir.call @printLine(%12) : (!cir.ptr<!s8i>) -> () loc(#loc111)
    %13 = cir.get_global @CWE122_Heap_Based_Buffer_Overflow__c_CWE806_char_loop_42_bad : !cir.ptr<!cir.func<!void ()>> loc(#loc231)
    cir.call @CWE122_Heap_Based_Buffer_Overflow__c_CWE806_char_loop_42_bad() : () -> () loc(#loc112)
    %14 = cir.get_global @".str.3" : !cir.ptr<!cir.array<!s8i x 15>> loc(#loc96)
    %15 = cir.cast(array_to_ptrdecay, %14 : !cir.ptr<!cir.array<!s8i x 15>>), !cir.ptr<!s8i> loc(#loc96)
    cir.call @printLine(%15) : (!cir.ptr<!s8i>) -> () loc(#loc114)
    %16 = cir.const #cir.int<0> : !s32i loc(#loc115)
    cir.store %16, %2 : !s32i, !cir.ptr<!s32i> loc(#loc232)
    %17 = cir.load %2 : !cir.ptr<!s32i>, !s32i loc(#loc232)
    cir.return %17 : !s32i loc(#loc232)
  } loc(#loc227)
  cir.func internal private @goodG2BSource(%arg0: !cir.ptr<!s8i> loc(fused[#loc119, #loc120])) -> !cir.ptr<!s8i> extra(#fn_attr1) {
    %0 = cir.alloca !cir.ptr<!s8i>, !cir.ptr<!cir.ptr<!s8i>>, ["data", init] {alignment = 8 : i64} loc(#loc234)
    %1 = cir.alloca !cir.ptr<!s8i>, !cir.ptr<!cir.ptr<!s8i>>, ["__retval"] {alignment = 8 : i64} loc(#loc118)
    cir.store %arg0, %0 : !cir.ptr<!s8i>, !cir.ptr<!cir.ptr<!s8i>> loc(#loc121)
    %2 = cir.load %0 : !cir.ptr<!cir.ptr<!s8i>>, !cir.ptr<!s8i> loc(#loc122)
    %3 = cir.cast(bitcast, %2 : !cir.ptr<!s8i>), !cir.ptr<!void> loc(#loc122)
    %4 = cir.const #cir.int<65> : !s32i loc(#loc123)
    %5 = cir.const #cir.int<50> : !s32i loc(#loc124)
    %6 = cir.const #cir.int<1> : !s32i loc(#loc125)
    %7 = cir.binop(sub, %5, %6) nsw : !s32i loc(#loc124)
    %8 = cir.cast(integral, %7 : !s32i), !u64i loc(#loc124)
    cir.libc.memset %8 bytes from %3 set to %4 : !cir.ptr<!void>, !s32i, !u64i loc(#loc235)
    %9 = cir.const #cir.int<0> : !s32i loc(#loc128)
    %10 = cir.cast(integral, %9 : !s32i), !s8i loc(#loc128)
    %11 = cir.load %0 : !cir.ptr<!cir.ptr<!s8i>>, !cir.ptr<!s8i> loc(#loc129)
    %12 = cir.const #cir.int<50> : !s32i loc(#loc130)
    %13 = cir.const #cir.int<1> : !s32i loc(#loc131)
    %14 = cir.binop(sub, %12, %13) nsw : !s32i loc(#loc130)
    %15 = cir.ptr_stride(%11 : !cir.ptr<!s8i>, %14 : !s32i), !cir.ptr<!s8i> loc(#loc132)
    cir.store %10, %15 : !s8i, !cir.ptr<!s8i> loc(#loc236)
    %16 = cir.load %0 : !cir.ptr<!cir.ptr<!s8i>>, !cir.ptr<!s8i> loc(#loc133)
    cir.store %16, %1 : !cir.ptr<!s8i>, !cir.ptr<!cir.ptr<!s8i>> loc(#loc237)
    %17 = cir.load %1 : !cir.ptr<!cir.ptr<!s8i>>, !cir.ptr<!s8i> loc(#loc237)
    cir.return %17 : !cir.ptr<!s8i> loc(#loc237)
  } loc(#loc233)
  cir.func no_proto internal private @goodG2B() extra(#fn_attr1) {
    %0 = cir.alloca !cir.ptr<!s8i>, !cir.ptr<!cir.ptr<!s8i>>, ["data"] {alignment = 8 : i64} loc(#loc239)
    %1 = cir.get_global @malloc : !cir.ptr<!cir.func<!cir.ptr<!void> (!u64i)>> loc(#loc139)
    %2 = cir.const #cir.int<100> : !s32i loc(#loc140)
    %3 = cir.cast(integral, %2 : !s32i), !u64i loc(#loc140)
    %4 = cir.const #cir.int<1> : !u64i loc(#loc240)
    %5 = cir.binop(mul, %3, %4) : !u64i loc(#loc241)
    %6 = cir.call @malloc(%5) : (!u64i) -> !cir.ptr<!void> extra(#fn_attr) loc(#loc139)
    %7 = cir.cast(bitcast, %6 : !cir.ptr<!void>), !cir.ptr<!s8i> loc(#loc242)
    cir.store %7, %0 : !cir.ptr<!s8i>, !cir.ptr<!cir.ptr<!s8i>> loc(#loc243)
    cir.scope {
      %10 = cir.load %0 : !cir.ptr<!cir.ptr<!s8i>>, !cir.ptr<!s8i> loc(#loc147)
      %11 = cir.const #cir.ptr<null> : !cir.ptr<!void> loc(#loc148)
      %12 = cir.cast(bitcast, %11 : !cir.ptr<!void>), !cir.ptr<!s8i> loc(#loc148)
      %13 = cir.cmp(eq, %10, %12) : !cir.ptr<!s8i>, !cir.bool loc(#loc245)
      cir.if %13 {
        %14 = cir.get_global @exit : !cir.ptr<!cir.func<!void (!s32i)>> loc(#loc150)
        %15 = cir.const #cir.int<1> : !s32i loc(#loc151)
        %16 = cir.unary(minus, %15) : !s32i, !s32i loc(#loc152)
        cir.call @exit(%16) : (!s32i) -> () extra(#fn_attr) loc(#loc150)
      } loc(#loc246)
    } loc(#loc244)
    %8 = cir.load %0 : !cir.ptr<!cir.ptr<!s8i>>, !cir.ptr<!s8i> loc(#loc153)
    %9 = cir.call @goodG2BSource(%8) : (!cir.ptr<!s8i>) -> !cir.ptr<!s8i> loc(#loc154)
    cir.store %9, %0 : !cir.ptr<!s8i>, !cir.ptr<!cir.ptr<!s8i>> loc(#loc247)
    cir.scope {
      %10 = cir.alloca !cir.array<!s8i x 50>, !cir.ptr<!cir.array<!s8i x 50>>, ["dest"] {alignment = 16 : i64} loc(#loc249)
      %11 = cir.alloca !u64i, !cir.ptr<!u64i>, ["i"] {alignment = 8 : i64} loc(#loc250)
      %12 = cir.alloca !u64i, !cir.ptr<!u64i>, ["dataLen"] {alignment = 8 : i64} loc(#loc251)
      %13 = cir.const #cir.zero : !cir.array<!s8i x 50> loc(#loc249)
      cir.store %13, %10 : !cir.array<!s8i x 50>, !cir.ptr<!cir.array<!s8i x 50>> loc(#loc249)
      %14 = cir.get_global @strlen : !cir.ptr<!cir.func<!u64i (!cir.ptr<!s8i>)>> loc(#loc164)
      %15 = cir.load %0 : !cir.ptr<!cir.ptr<!s8i>>, !cir.ptr<!s8i> loc(#loc165)
      %16 = cir.call @strlen(%15) : (!cir.ptr<!s8i>) -> !u64i extra(#fn_attr) loc(#loc164)
      cir.store %16, %12 : !u64i, !cir.ptr<!u64i> loc(#loc252)
      cir.scope {
        %28 = cir.const #cir.int<0> : !s32i loc(#loc170)
        %29 = cir.cast(integral, %28 : !s32i), !u64i loc(#loc170)
        cir.store %29, %11 : !u64i, !cir.ptr<!u64i> loc(#loc254)
        cir.for : cond {
          %30 = cir.load %11 : !cir.ptr<!u64i>, !u64i loc(#loc172)
          %31 = cir.load %12 : !cir.ptr<!u64i>, !u64i loc(#loc173)
          %32 = cir.cmp(lt, %30, %31) : !u64i, !cir.bool loc(#loc255)
          cir.condition(%32) loc(#loc174)
        } body {
          cir.scope {
            %30 = cir.load %0 : !cir.ptr<!cir.ptr<!s8i>>, !cir.ptr<!s8i> loc(#loc176)
            %31 = cir.load %11 : !cir.ptr<!u64i>, !u64i loc(#loc177)
            %32 = cir.ptr_stride(%30 : !cir.ptr<!s8i>, %31 : !u64i), !cir.ptr<!s8i> loc(#loc178)
            %33 = cir.load %32 : !cir.ptr<!s8i>, !s8i loc(#loc176)
            %34 = cir.load %11 : !cir.ptr<!u64i>, !u64i loc(#loc179)
            %35 = cir.cast(array_to_ptrdecay, %10 : !cir.ptr<!cir.array<!s8i x 50>>), !cir.ptr<!s8i> loc(#loc180)
            %36 = cir.ptr_stride(%35 : !cir.ptr<!s8i>, %34 : !u64i), !cir.ptr<!s8i> loc(#loc180)
            cir.store %33, %36 : !s8i, !cir.ptr<!s8i> loc(#loc257)
          } loc(#loc256)
          cir.yield loc(#loc169)
        } step {
          %30 = cir.load %11 : !cir.ptr<!u64i>, !u64i loc(#loc181)
          %31 = cir.unary(inc, %30) : !u64i, !u64i loc(#loc182)
          cir.store %31, %11 : !u64i, !cir.ptr<!u64i> loc(#loc258)
          cir.yield loc(#loc253)
        } loc(#loc253)
      } loc(#loc253)
      %17 = cir.const #cir.int<0> : !s32i loc(#loc183)
      %18 = cir.cast(integral, %17 : !s32i), !s8i loc(#loc183)
      %19 = cir.const #cir.int<50> : !s32i loc(#loc184)
      %20 = cir.const #cir.int<1> : !s32i loc(#loc185)
      %21 = cir.binop(sub, %19, %20) nsw : !s32i loc(#loc184)
      %22 = cir.cast(array_to_ptrdecay, %10 : !cir.ptr<!cir.array<!s8i x 50>>), !cir.ptr<!s8i> loc(#loc186)
      %23 = cir.ptr_stride(%22 : !cir.ptr<!s8i>, %21 : !s32i), !cir.ptr<!s8i> loc(#loc186)
      cir.store %18, %23 : !s8i, !cir.ptr<!s8i> loc(#loc259)
      %24 = cir.load %0 : !cir.ptr<!cir.ptr<!s8i>>, !cir.ptr<!s8i> loc(#loc187)
      cir.call @printLine(%24) : (!cir.ptr<!s8i>) -> () loc(#loc188)
      %25 = cir.get_global @free : !cir.ptr<!cir.func<!void (!cir.ptr<!void>)>> loc(#loc189)
      %26 = cir.load %0 : !cir.ptr<!cir.ptr<!s8i>>, !cir.ptr<!s8i> loc(#loc190)
      %27 = cir.cast(bitcast, %26 : !cir.ptr<!s8i>), !cir.ptr<!void> loc(#loc190)
      cir.call @free(%27) : (!cir.ptr<!void>) -> () extra(#fn_attr) loc(#loc189)
    } loc(#loc248)
    cir.return loc(#loc136)
  } loc(#loc238)
} loc(#loc)
#loc = loc("/home/ladisgin/git_proj/juliet-c/testcases/CWE122_Heap_Based_Buffer_Overflow/s09/CWE122_Heap_Based_Buffer_Overflow__c_CWE806_char_loop_42.c":0:0)
#loc1 = loc("/usr/include/stdlib.h":672:1)
#loc2 = loc("/usr/include/stdlib.h":672:45)
#loc3 = loc("/usr/include/stdlib.h":756:1)
#loc4 = loc("/usr/include/stdlib.h":756:70)
#loc5 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE806_char_loop_42.c":23:1)
#loc6 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE806_char_loop_42.c":29:1)
#loc9 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE806_char_loop_42.c":24:1)
#loc10 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE806_char_loop_42.c":26:12)
#loc11 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE806_char_loop_42.c":26:18)
#loc12 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE806_char_loop_42.c":26:23)
#loc13 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE806_char_loop_42.c":26:27)
#loc14 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE806_char_loop_42.c":26:5)
#loc15 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE806_char_loop_42.c":26:28)
#loc16 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE806_char_loop_42.c":27:19)
#loc17 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE806_char_loop_42.c":27:5)
#loc18 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE806_char_loop_42.c":27:10)
#loc19 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE806_char_loop_42.c":27:14)
#loc20 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE806_char_loop_42.c":27:15)
#loc21 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE806_char_loop_42.c":28:12)
#loc22 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE806_char_loop_42.c":28:5)
#loc23 = loc("/usr/include/string.h":407:1)
#loc24 = loc("/usr/include/string.h":408:33)
#loc25 = loc("../../../testcasesupport/std_testcase_io.h":14:1)
#loc26 = loc("../../../testcasesupport/std_testcase_io.h":14:33)
#loc27 = loc("/usr/include/stdlib.h":687:1)
#loc28 = loc("/usr/include/stdlib.h":687:32)
#loc29 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE806_char_loop_42.c":31:1)
#loc30 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE806_char_loop_42.c":50:1)
#loc31 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE806_char_loop_42.c":33:5)
#loc32 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE806_char_loop_42.c":33:12)
#loc33 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE806_char_loop_42.c":34:20)
#loc34 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE806_char_loop_42.c":34:27)
#loc35 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE806_char_loop_42.c":34:31)
#loc36 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE806_char_loop_42.c":34:42)
#loc37 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE806_char_loop_42.c":34:43)
#loc38 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE806_char_loop_42.c":34:5)
#loc39 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE806_char_loop_42.c":35:5)
#loc40 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE806_char_loop_42.c":35:33)
#loc41 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE806_char_loop_42.c":35:9)
#loc42 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE806_char_loop_42.c":35:17)
#loc43 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE806_char_loop_42.c":35:23)
#loc44 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE806_char_loop_42.c":35:24)
#loc45 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE806_char_loop_42.c":35:30)
#loc46 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE806_char_loop_42.c":35:29)
#loc47 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE806_char_loop_42.c":36:22)
#loc48 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE806_char_loop_42.c":36:12)
#loc49 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE806_char_loop_42.c":36:5)
#loc50 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE806_char_loop_42.c":36:26)
#loc51 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE806_char_loop_42.c":37:5)
#loc52 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE806_char_loop_42.c":49:5)
#loc53 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE806_char_loop_42.c":38:9)
#loc54 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE806_char_loop_42.c":38:25)
#loc55 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE806_char_loop_42.c":39:9)
#loc56 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE806_char_loop_42.c":39:16)
#loc57 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE806_char_loop_42.c":39:19)
#loc58 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE806_char_loop_42.c":40:19)
#loc59 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE806_char_loop_42.c":40:26)
#loc60 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE806_char_loop_42.c":40:9)
#loc61 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE806_char_loop_42.c":40:30)
#loc62 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE806_char_loop_42.c":42:9)
#loc63 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE806_char_loop_42.c":45:9)
#loc64 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE806_char_loop_42.c":42:18)
#loc65 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE806_char_loop_42.c":42:14)
#loc66 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE806_char_loop_42.c":42:21)
#loc67 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE806_char_loop_42.c":42:25)
#loc68 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE806_char_loop_42.c":42:23)
#loc69 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE806_char_loop_42.c":43:9)
#loc70 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE806_char_loop_42.c":44:23)
#loc71 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE806_char_loop_42.c":44:28)
#loc72 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE806_char_loop_42.c":44:29)
#loc73 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE806_char_loop_42.c":44:18)
#loc74 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE806_char_loop_42.c":44:13)
#loc75 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE806_char_loop_42.c":42:35)
#loc76 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE806_char_loop_42.c":42:34)
#loc77 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE806_char_loop_42.c":46:22)
#loc78 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE806_char_loop_42.c":46:14)
#loc79 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE806_char_loop_42.c":46:17)
#loc80 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE806_char_loop_42.c":46:9)
#loc81 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE806_char_loop_42.c":47:19)
#loc82 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE806_char_loop_42.c":47:9)
#loc83 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE806_char_loop_42.c":48:9)
#loc84 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE806_char_loop_42.c":48:14)
#loc85 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE806_char_loop_42.c":86:1)
#loc86 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE806_char_loop_42.c":89:1)
#loc87 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE806_char_loop_42.c":88:5)
#loc88 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE806_char_loop_42.c":88:13)
#loc89 = loc("/usr/include/stdlib.h":575:1)
#loc90 = loc("/usr/include/stdlib.h":575:41)
#loc91 = loc("/usr/include/time.h":76:1)
#loc92 = loc("/usr/include/time.h":76:38)
#loc93 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE806_char_loop_42.c":106:15)
#loc94 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE806_char_loop_42.c":108:15)
#loc95 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE806_char_loop_42.c":111:15)
#loc96 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE806_char_loop_42.c":113:15)
#loc97 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE806_char_loop_42.c":101:1)
#loc98 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE806_char_loop_42.c":116:1)
#loc103 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE806_char_loop_42.c":102:1)
#loc104 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE806_char_loop_42.c":104:27)
#loc105 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE806_char_loop_42.c":104:22)
#loc106 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE806_char_loop_42.c":104:5)
#loc107 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE806_char_loop_42.c":106:5)
#loc108 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE806_char_loop_42.c":107:5)
#loc109 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE806_char_loop_42.c":107:67)
#loc110 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE806_char_loop_42.c":108:5)
#loc111 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE806_char_loop_42.c":111:5)
#loc112 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE806_char_loop_42.c":112:5)
#loc113 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE806_char_loop_42.c":112:66)
#loc114 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE806_char_loop_42.c":113:5)
#loc115 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE806_char_loop_42.c":115:12)
#loc116 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE806_char_loop_42.c":115:5)
#loc117 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE806_char_loop_42.c":56:1)
#loc118 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE806_char_loop_42.c":62:1)
#loc121 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE806_char_loop_42.c":57:1)
#loc122 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE806_char_loop_42.c":59:12)
#loc123 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE806_char_loop_42.c":59:18)
#loc124 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE806_char_loop_42.c":59:23)
#loc125 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE806_char_loop_42.c":59:26)
#loc126 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE806_char_loop_42.c":59:5)
#loc127 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE806_char_loop_42.c":59:27)
#loc128 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE806_char_loop_42.c":60:18)
#loc129 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE806_char_loop_42.c":60:5)
#loc130 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE806_char_loop_42.c":60:10)
#loc131 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE806_char_loop_42.c":60:13)
#loc132 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE806_char_loop_42.c":60:14)
#loc133 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE806_char_loop_42.c":61:12)
#loc134 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE806_char_loop_42.c":61:5)
#loc135 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE806_char_loop_42.c":65:1)
#loc136 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE806_char_loop_42.c":84:1)
#loc137 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE806_char_loop_42.c":67:5)
#loc138 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE806_char_loop_42.c":67:12)
#loc139 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE806_char_loop_42.c":68:20)
#loc140 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE806_char_loop_42.c":68:27)
#loc141 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE806_char_loop_42.c":68:31)
#loc142 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE806_char_loop_42.c":68:42)
#loc143 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE806_char_loop_42.c":68:43)
#loc144 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE806_char_loop_42.c":68:5)
#loc145 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE806_char_loop_42.c":69:5)
#loc146 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE806_char_loop_42.c":69:33)
#loc147 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE806_char_loop_42.c":69:9)
#loc148 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE806_char_loop_42.c":69:17)
#loc149 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE806_char_loop_42.c":69:23)
#loc150 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE806_char_loop_42.c":69:24)
#loc151 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE806_char_loop_42.c":69:30)
#loc152 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE806_char_loop_42.c":69:29)
#loc153 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE806_char_loop_42.c":70:26)
#loc154 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE806_char_loop_42.c":70:12)
#loc155 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE806_char_loop_42.c":70:5)
#loc156 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE806_char_loop_42.c":70:30)
#loc157 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE806_char_loop_42.c":71:5)
#loc158 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE806_char_loop_42.c":83:5)
#loc159 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE806_char_loop_42.c":72:9)
#loc160 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE806_char_loop_42.c":72:25)
#loc161 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE806_char_loop_42.c":73:9)
#loc162 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE806_char_loop_42.c":73:16)
#loc163 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE806_char_loop_42.c":73:19)
#loc164 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE806_char_loop_42.c":74:19)
#loc165 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE806_char_loop_42.c":74:26)
#loc166 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE806_char_loop_42.c":74:9)
#loc167 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE806_char_loop_42.c":74:30)
#loc168 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE806_char_loop_42.c":76:9)
#loc169 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE806_char_loop_42.c":79:9)
#loc170 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE806_char_loop_42.c":76:18)
#loc171 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE806_char_loop_42.c":76:14)
#loc172 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE806_char_loop_42.c":76:21)
#loc173 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE806_char_loop_42.c":76:25)
#loc174 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE806_char_loop_42.c":76:23)
#loc175 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE806_char_loop_42.c":77:9)
#loc176 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE806_char_loop_42.c":78:23)
#loc177 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE806_char_loop_42.c":78:28)
#loc178 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE806_char_loop_42.c":78:29)
#loc179 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE806_char_loop_42.c":78:18)
#loc180 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE806_char_loop_42.c":78:13)
#loc181 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE806_char_loop_42.c":76:35)
#loc182 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE806_char_loop_42.c":76:34)
#loc183 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE806_char_loop_42.c":80:22)
#loc184 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE806_char_loop_42.c":80:14)
#loc185 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE806_char_loop_42.c":80:17)
#loc186 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE806_char_loop_42.c":80:9)
#loc187 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE806_char_loop_42.c":81:19)
#loc188 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE806_char_loop_42.c":81:9)
#loc189 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE806_char_loop_42.c":82:9)
#loc190 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE806_char_loop_42.c":82:14)
#loc191 = loc(fused[#loc1, #loc2])
#loc192 = loc(fused[#loc3, #loc4])
#loc193 = loc(fused[#loc5, #loc6])
#loc195 = loc(fused[#loc14, #loc15])
#loc196 = loc(fused[#loc17, #loc16])
#loc197 = loc(fused[#loc22, #loc21])
#loc198 = loc(fused[#loc23, #loc24])
#loc199 = loc(fused[#loc25, #loc26])
#loc200 = loc(fused[#loc27, #loc28])
#loc201 = loc(fused[#loc29, #loc30])
#loc202 = loc(fused[#loc31, #loc32])
#loc203 = loc(fused[#loc35, #loc36])
#loc204 = loc(fused[#loc34, #loc36])
#loc205 = loc(fused[#loc33, #loc37])
#loc206 = loc(fused[#loc38, #loc37])
#loc207 = loc(fused[#loc39, #loc40])
#loc208 = loc(fused[#loc41, #loc42])
#loc209 = loc(fused[#loc43, #loc40])
#loc210 = loc(fused[#loc49, #loc50])
#loc211 = loc(fused[#loc51, #loc52])
#loc212 = loc(fused[#loc53, #loc54])
#loc213 = loc(fused[#loc55, #loc56])
#loc214 = loc(fused[#loc55, #loc57])
#loc215 = loc(fused[#loc60, #loc61])
#loc216 = loc(fused[#loc62, #loc63])
#loc217 = loc(fused[#loc65, #loc64])
#loc218 = loc(fused[#loc66, #loc67])
#loc219 = loc(fused[#loc69, #loc63])
#loc220 = loc(fused[#loc74, #loc72])
#loc221 = loc(fused[#loc76, #loc75])
#loc222 = loc(fused[#loc80, #loc77])
#loc223 = loc(fused[#loc85, #loc86])
#loc224 = loc(fused[#loc87, #loc88])
#loc225 = loc(fused[#loc89, #loc90])
#loc226 = loc(fused[#loc91, #loc92])
#loc227 = loc(fused[#loc97, #loc98])
#loc230 = loc(fused[#loc108, #loc109])
#loc231 = loc(fused[#loc112, #loc113])
#loc232 = loc(fused[#loc116, #loc115])
#loc233 = loc(fused[#loc117, #loc118])
#loc235 = loc(fused[#loc126, #loc127])
#loc236 = loc(fused[#loc129, #loc128])
#loc237 = loc(fused[#loc134, #loc133])
#loc238 = loc(fused[#loc135, #loc136])
#loc239 = loc(fused[#loc137, #loc138])
#loc240 = loc(fused[#loc141, #loc142])
#loc241 = loc(fused[#loc140, #loc142])
#loc242 = loc(fused[#loc139, #loc143])
#loc243 = loc(fused[#loc144, #loc143])
#loc244 = loc(fused[#loc145, #loc146])
#loc245 = loc(fused[#loc147, #loc148])
#loc246 = loc(fused[#loc149, #loc146])
#loc247 = loc(fused[#loc155, #loc156])
#loc248 = loc(fused[#loc157, #loc158])
#loc249 = loc(fused[#loc159, #loc160])
#loc250 = loc(fused[#loc161, #loc162])
#loc251 = loc(fused[#loc161, #loc163])
#loc252 = loc(fused[#loc166, #loc167])
#loc253 = loc(fused[#loc168, #loc169])
#loc254 = loc(fused[#loc171, #loc170])
#loc255 = loc(fused[#loc172, #loc173])
#loc256 = loc(fused[#loc175, #loc169])
#loc257 = loc(fused[#loc180, #loc178])
#loc258 = loc(fused[#loc182, #loc181])
#loc259 = loc(fused[#loc186, #loc183])
