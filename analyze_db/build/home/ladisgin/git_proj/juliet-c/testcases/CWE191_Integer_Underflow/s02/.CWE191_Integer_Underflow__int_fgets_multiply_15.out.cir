!s32i = !cir.int<s, 32>
!s64i = !cir.int<s, 64>
!s8i = !cir.int<s, 8>
!ty__IO_codecvt = !cir.struct<struct "_IO_codecvt" incomplete>
!ty__IO_marker = !cir.struct<struct "_IO_marker" incomplete>
!ty__IO_wide_data = !cir.struct<struct "_IO_wide_data" incomplete>
!u16i = !cir.int<u, 16>
!u32i = !cir.int<u, 32>
!u64i = !cir.int<u, 64>
!void = !cir.void
#fn_attr = #cir<extra({nothrow = #cir.nothrow})>
#fn_attr1 = #cir<extra({inline = #cir.inline<no>, nothrow = #cir.nothrow, optnone = #cir.optnone})>
#loc85 = loc("CWE191_Integer_Underflow__int_fgets_multiply_15.c":261:10)
#loc86 = loc("CWE191_Integer_Underflow__int_fgets_multiply_15.c":261:14)
#loc87 = loc("CWE191_Integer_Underflow__int_fgets_multiply_15.c":261:20)
#loc88 = loc("CWE191_Integer_Underflow__int_fgets_multiply_15.c":261:32)
#loc335 = loc(fused[#loc85, #loc86])
#loc336 = loc(fused[#loc87, #loc88])
!ty__IO_FILE = !cir.struct<struct "_IO_FILE" {!s32i, !cir.ptr<!s8i>, !cir.ptr<!s8i>, !cir.ptr<!s8i>, !cir.ptr<!s8i>, !cir.ptr<!s8i>, !cir.ptr<!s8i>, !cir.ptr<!s8i>, !cir.ptr<!s8i>, !cir.ptr<!s8i>, !cir.ptr<!s8i>, !cir.ptr<!s8i>, !cir.ptr<!ty__IO_marker>, !cir.ptr<!cir.struct<struct "_IO_FILE">>, !s32i, !s32i, !s64i, !u16i, !s8i, !cir.array<!s8i x 1>, !cir.ptr<!void>, !s64i, !cir.ptr<!ty__IO_codecvt>, !cir.ptr<!ty__IO_wide_data>, !cir.ptr<!cir.struct<struct "_IO_FILE">>, !cir.ptr<!void>, !cir.ptr<!cir.ptr<!cir.struct<struct "_IO_FILE">>>, !s32i, !cir.array<!s8i x 20>} #cir.record.decl.ast>
module @"/home/ladisgin/git_proj/juliet-c/testcases/CWE191_Integer_Underflow/s02/CWE191_Integer_Underflow__int_fgets_multiply_15.c" attributes {cir.lang = #cir.lang<c>, cir.sob = #cir.signed_overflow_behavior<undefined>, cir.triple = "x86_64-unknown-linux-gnu", dlti.dl_spec = #dlti.dl_spec<i8 = dense<8> : vector<2xi64>, i16 = dense<16> : vector<2xi64>, i32 = dense<32> : vector<2xi64>, f64 = dense<64> : vector<2xi64>, f16 = dense<16> : vector<2xi64>, f128 = dense<128> : vector<2xi64>, !llvm.ptr<270> = dense<32> : vector<4xi64>, !llvm.ptr<271> = dense<32> : vector<4xi64>, !llvm.ptr<272> = dense<64> : vector<4xi64>, i64 = dense<64> : vector<2xi64>, i128 = dense<128> : vector<2xi64>, f80 = dense<128> : vector<2xi64>, !llvm.ptr = dense<64> : vector<4xi64>, i1 = dense<8> : vector<2xi64>, "dlti.endianness" = "little", "dlti.stack_alignment" = 128 : i64>} {
  cir.func private @fgets(!cir.ptr<!s8i>, !s32i, !cir.ptr<!ty__IO_FILE>) -> !cir.ptr<!s8i> loc(#loc307)
  cir.global "private" external @stdin : !cir.ptr<!ty__IO_FILE> {alignment = 8 : i64} loc(#loc308)
  cir.func private @atoi(!cir.ptr<!s8i>) -> !s32i extra(#fn_attr) loc(#loc309)
  cir.func private @printLine(!cir.ptr<!s8i>) loc(#loc310)
  cir.global "private" constant cir_private dsolocal @".str" = #cir.const_array<"fgets() failed.\00" : !cir.array<!s8i x 16>> : !cir.array<!s8i x 16> {alignment = 1 : i64} loc(#loc9)
  cir.global "private" constant cir_private dsolocal @".str.1" = #cir.const_array<"Benign, fixed string\00" : !cir.array<!s8i x 21>> : !cir.array<!s8i x 21> {alignment = 1 : i64} loc(#loc10)
  cir.func private @printIntLine(!s32i) loc(#loc311)
  cir.func no_proto @CWE191_Integer_Underflow__int_fgets_multiply_15_bad() extra(#fn_attr1) {
    %0 = cir.alloca !s32i, !cir.ptr<!s32i>, ["data"] {alignment = 4 : i64} loc(#loc313)
    %1 = cir.const #cir.int<0> : !s32i loc(#loc17)
    cir.store %1, %0 : !s32i, !cir.ptr<!s32i> loc(#loc314)
    cir.scope {
      %2 = cir.const #cir.int<6> : !s32i loc(#loc21)
      cir.switch (%2 : !s32i) {
        cir.case(equal, [#cir.int<6> : !s32i]) {
          cir.scope {
            %3 = cir.alloca !cir.array<!s8i x 14>, !cir.ptr<!cir.array<!s8i x 14>>, ["inputBuffer"] {alignment = 1 : i64} loc(#loc317)
            %4 = cir.const #cir.zero : !cir.array<!s8i x 14> loc(#loc317)
            cir.store %4, %3 : !cir.array<!s8i x 14>, !cir.ptr<!cir.array<!s8i x 14>> loc(#loc317)
            cir.scope {
              %5 = cir.cast(array_to_ptrdecay, %3 : !cir.ptr<!cir.array<!s8i x 14>>), !cir.ptr<!s8i> loc(#loc29)
              %6 = cir.const #cir.int<3> : !s32i loc(#loc30)
              %7 = cir.cast(integral, %6 : !s32i), !u64i loc(#loc30)
              %8 = cir.const #cir.int<4> : !u64i loc(#loc30)
              %9 = cir.binop(mul, %7, %8) : !u64i loc(#loc30)
              %10 = cir.const #cir.int<2> : !s32i loc(#loc30)
              %11 = cir.cast(integral, %10 : !s32i), !u64i loc(#loc30)
              %12 = cir.binop(add, %9, %11) : !u64i loc(#loc30)
              %13 = cir.cast(integral, %12 : !u64i), !s32i loc(#loc30)
              %14 = cir.get_global @stdin : !cir.ptr<!cir.ptr<!ty__IO_FILE>> loc(#loc308)
              %15 = cir.load %14 : !cir.ptr<!cir.ptr<!ty__IO_FILE>>, !cir.ptr<!ty__IO_FILE> loc(#loc31)
              %16 = cir.call @fgets(%5, %13, %15) : (!cir.ptr<!s8i>, !s32i, !cir.ptr<!ty__IO_FILE>) -> !cir.ptr<!s8i> loc(#loc32)
              %17 = cir.const #cir.ptr<null> : !cir.ptr<!void> loc(#loc33)
              %18 = cir.cast(bitcast, %17 : !cir.ptr<!void>), !cir.ptr<!s8i> loc(#loc33)
              %19 = cir.cmp(ne, %16, %18) : !cir.ptr<!s8i>, !cir.bool loc(#loc319)
              cir.if %19 {
                %20 = cir.cast(array_to_ptrdecay, %3 : !cir.ptr<!cir.array<!s8i x 14>>), !cir.ptr<!s8i> loc(#loc37)
                %21 = cir.call @atoi(%20) : (!cir.ptr<!s8i>) -> !s32i extra(#fn_attr) loc(#loc38)
                cir.store %21, %0 : !s32i, !cir.ptr<!s32i> loc(#loc321)
              } else {
                %20 = cir.get_global @".str" : !cir.ptr<!cir.array<!s8i x 16>> loc(#loc9)
                %21 = cir.cast(array_to_ptrdecay, %20 : !cir.ptr<!cir.array<!s8i x 16>>), !cir.ptr<!s8i> loc(#loc9)
                cir.call @printLine(%21) : (!cir.ptr<!s8i>) -> () loc(#loc41)
              } loc(#loc320)
            } loc(#loc318)
          } loc(#loc316)
          cir.break loc(#loc42)
        } loc(#loc22)
        cir.case(default, []) {
          %3 = cir.get_global @".str.1" : !cir.ptr<!cir.array<!s8i x 21>> loc(#loc10)
          %4 = cir.cast(array_to_ptrdecay, %3 : !cir.ptr<!cir.array<!s8i x 21>>), !cir.ptr<!s8i> loc(#loc10)
          cir.call @printLine(%4) : (!cir.ptr<!s8i>) -> () loc(#loc44)
          cir.break loc(#loc45)
        } loc(#loc43)
        cir.yield loc(#loc19)
      } loc(#loc19)
    } loc(#loc315)
    cir.scope {
      %2 = cir.const #cir.int<7> : !s32i loc(#loc48)
      cir.switch (%2 : !s32i) {
        cir.case(equal, [#cir.int<7> : !s32i]) {
          cir.scope {
            %3 = cir.load %0 : !cir.ptr<!s32i>, !s32i loc(#loc52)
            %4 = cir.const #cir.int<0> : !s32i loc(#loc53)
            %5 = cir.cmp(lt, %3, %4) : !s32i, !cir.bool loc(#loc324)
            cir.if %5 {
              %6 = cir.alloca !s32i, !cir.ptr<!s32i>, ["result", init] {alignment = 4 : i64} loc(#loc326)
              %7 = cir.load %0 : !cir.ptr<!s32i>, !s32i loc(#loc57)
              %8 = cir.const #cir.int<2> : !s32i loc(#loc56)
              %9 = cir.binop(mul, %7, %8) nsw : !s32i loc(#loc57)
              cir.store %9, %6 : !s32i, !cir.ptr<!s32i> loc(#loc326)
              %10 = cir.load %6 : !cir.ptr<!s32i>, !s32i loc(#loc58)
              cir.call @printIntLine(%10) : (!s32i) -> () loc(#loc59)
            } loc(#loc325)
          } loc(#loc323)
          cir.break loc(#loc60)
        } loc(#loc49)
        cir.case(default, []) {
          %3 = cir.get_global @".str.1" : !cir.ptr<!cir.array<!s8i x 21>> loc(#loc62)
          %4 = cir.cast(array_to_ptrdecay, %3 : !cir.ptr<!cir.array<!s8i x 21>>), !cir.ptr<!s8i> loc(#loc62)
          cir.call @printLine(%4) : (!cir.ptr<!s8i>) -> () loc(#loc63)
          cir.break loc(#loc64)
        } loc(#loc61)
        cir.yield loc(#loc46)
      } loc(#loc46)
    } loc(#loc322)
    cir.return loc(#loc14)
  } loc(#loc312)
  cir.func no_proto @CWE191_Integer_Underflow__int_fgets_multiply_15_good() extra(#fn_attr1) {
    %0 = cir.get_global @goodB2G1 : !cir.ptr<!cir.func<!void ()>> loc(#loc328)
    cir.call %0() : (!cir.ptr<!cir.func<!void ()>>) -> () loc(#loc67)
    %1 = cir.get_global @goodB2G2 : !cir.ptr<!cir.func<!void ()>> loc(#loc329)
    cir.call %1() : (!cir.ptr<!cir.func<!void ()>>) -> () loc(#loc69)
    %2 = cir.get_global @goodG2B1 : !cir.ptr<!cir.func<!void ()>> loc(#loc330)
    cir.call %2() : (!cir.ptr<!cir.func<!void ()>>) -> () loc(#loc71)
    %3 = cir.get_global @goodG2B2 : !cir.ptr<!cir.func<!void ()>> loc(#loc331)
    cir.call %3() : (!cir.ptr<!cir.func<!void ()>>) -> () loc(#loc73)
    cir.return loc(#loc66)
  } loc(#loc327)
  cir.func private @srand(!u32i) extra(#fn_attr) loc(#loc332)
  cir.func private @time(!cir.ptr<!s64i>) -> !s64i extra(#fn_attr) loc(#loc333)
  cir.global "private" constant cir_private dsolocal @".str.2" = #cir.const_array<"Calling good()...\00" : !cir.array<!s8i x 18>> : !cir.array<!s8i x 18> {alignment = 1 : i64} loc(#loc79)
  cir.global "private" constant cir_private dsolocal @".str.3" = #cir.const_array<"Finished good()\00" : !cir.array<!s8i x 16>> : !cir.array<!s8i x 16> {alignment = 1 : i64} loc(#loc80)
  cir.global "private" constant cir_private dsolocal @".str.4" = #cir.const_array<"Calling bad()...\00" : !cir.array<!s8i x 17>> : !cir.array<!s8i x 17> {alignment = 1 : i64} loc(#loc81)
  cir.global "private" constant cir_private dsolocal @".str.5" = #cir.const_array<"Finished bad()\00" : !cir.array<!s8i x 15>> : !cir.array<!s8i x 15> {alignment = 1 : i64} loc(#loc82)
  cir.func @main(%arg0: !s32i loc(fused[#loc85, #loc86]), %arg1: !cir.ptr<!cir.ptr<!s8i>> loc(fused[#loc87, #loc88])) -> !s32i extra(#fn_attr1) {
    %0 = cir.alloca !s32i, !cir.ptr<!s32i>, ["argc", init] {alignment = 4 : i64} loc(#loc335)
    %1 = cir.alloca !cir.ptr<!cir.ptr<!s8i>>, !cir.ptr<!cir.ptr<!cir.ptr<!s8i>>>, ["argv", init] {alignment = 8 : i64} loc(#loc336)
    %2 = cir.alloca !s32i, !cir.ptr<!s32i>, ["__retval"] {alignment = 4 : i64} loc(#loc84)
    cir.store %arg0, %0 : !s32i, !cir.ptr<!s32i> loc(#loc89)
    cir.store %arg1, %1 : !cir.ptr<!cir.ptr<!s8i>>, !cir.ptr<!cir.ptr<!cir.ptr<!s8i>>> loc(#loc89)
    %3 = cir.const #cir.ptr<null> : !cir.ptr<!s64i> loc(#loc90)
    %4 = cir.call @time(%3) : (!cir.ptr<!s64i>) -> !s64i extra(#fn_attr) loc(#loc91)
    %5 = cir.cast(integral, %4 : !s64i), !u32i loc(#loc91)
    cir.call @srand(%5) : (!u32i) -> () extra(#fn_attr) loc(#loc92)
    %6 = cir.get_global @".str.2" : !cir.ptr<!cir.array<!s8i x 18>> loc(#loc79)
    %7 = cir.cast(array_to_ptrdecay, %6 : !cir.ptr<!cir.array<!s8i x 18>>), !cir.ptr<!s8i> loc(#loc79)
    cir.call @printLine(%7) : (!cir.ptr<!s8i>) -> () loc(#loc93)
    %8 = cir.get_global @CWE191_Integer_Underflow__int_fgets_multiply_15_good : !cir.ptr<!cir.func<!void ()>> loc(#loc337)
    cir.call @CWE191_Integer_Underflow__int_fgets_multiply_15_good() : () -> () loc(#loc94)
    %9 = cir.get_global @".str.3" : !cir.ptr<!cir.array<!s8i x 16>> loc(#loc80)
    %10 = cir.cast(array_to_ptrdecay, %9 : !cir.ptr<!cir.array<!s8i x 16>>), !cir.ptr<!s8i> loc(#loc80)
    cir.call @printLine(%10) : (!cir.ptr<!s8i>) -> () loc(#loc96)
    %11 = cir.get_global @".str.4" : !cir.ptr<!cir.array<!s8i x 17>> loc(#loc81)
    %12 = cir.cast(array_to_ptrdecay, %11 : !cir.ptr<!cir.array<!s8i x 17>>), !cir.ptr<!s8i> loc(#loc81)
    cir.call @printLine(%12) : (!cir.ptr<!s8i>) -> () loc(#loc97)
    %13 = cir.get_global @CWE191_Integer_Underflow__int_fgets_multiply_15_bad : !cir.ptr<!cir.func<!void ()>> loc(#loc338)
    cir.call @CWE191_Integer_Underflow__int_fgets_multiply_15_bad() : () -> () loc(#loc98)
    %14 = cir.get_global @".str.5" : !cir.ptr<!cir.array<!s8i x 15>> loc(#loc82)
    %15 = cir.cast(array_to_ptrdecay, %14 : !cir.ptr<!cir.array<!s8i x 15>>), !cir.ptr<!s8i> loc(#loc82)
    cir.call @printLine(%15) : (!cir.ptr<!s8i>) -> () loc(#loc100)
    %16 = cir.const #cir.int<0> : !s32i loc(#loc101)
    cir.store %16, %2 : !s32i, !cir.ptr<!s32i> loc(#loc339)
    %17 = cir.load %2 : !cir.ptr<!s32i>, !s32i loc(#loc339)
    cir.return %17 : !s32i loc(#loc339)
  } loc(#loc334)
  cir.global "private" constant cir_private dsolocal @".str.6" = #cir.const_array<"data value is too small to perform multiplication.\00" : !cir.array<!s8i x 51>> : !cir.array<!s8i x 51> {alignment = 1 : i64} loc(#loc103)
  cir.func no_proto internal private @goodB2G1() extra(#fn_attr1) {
    %0 = cir.alloca !s32i, !cir.ptr<!s32i>, ["data"] {alignment = 4 : i64} loc(#loc341)
    %1 = cir.const #cir.int<0> : !s32i loc(#loc108)
    cir.store %1, %0 : !s32i, !cir.ptr<!s32i> loc(#loc342)
    cir.scope {
      %2 = cir.const #cir.int<6> : !s32i loc(#loc112)
      cir.switch (%2 : !s32i) {
        cir.case(equal, [#cir.int<6> : !s32i]) {
          cir.scope {
            %3 = cir.alloca !cir.array<!s8i x 14>, !cir.ptr<!cir.array<!s8i x 14>>, ["inputBuffer"] {alignment = 1 : i64} loc(#loc345)
            %4 = cir.const #cir.zero : !cir.array<!s8i x 14> loc(#loc345)
            cir.store %4, %3 : !cir.array<!s8i x 14>, !cir.ptr<!cir.array<!s8i x 14>> loc(#loc345)
            cir.scope {
              %5 = cir.cast(array_to_ptrdecay, %3 : !cir.ptr<!cir.array<!s8i x 14>>), !cir.ptr<!s8i> loc(#loc120)
              %6 = cir.const #cir.int<3> : !s32i loc(#loc121)
              %7 = cir.cast(integral, %6 : !s32i), !u64i loc(#loc121)
              %8 = cir.const #cir.int<4> : !u64i loc(#loc121)
              %9 = cir.binop(mul, %7, %8) : !u64i loc(#loc121)
              %10 = cir.const #cir.int<2> : !s32i loc(#loc121)
              %11 = cir.cast(integral, %10 : !s32i), !u64i loc(#loc121)
              %12 = cir.binop(add, %9, %11) : !u64i loc(#loc121)
              %13 = cir.cast(integral, %12 : !u64i), !s32i loc(#loc121)
              %14 = cir.get_global @stdin : !cir.ptr<!cir.ptr<!ty__IO_FILE>> loc(#loc308)
              %15 = cir.load %14 : !cir.ptr<!cir.ptr<!ty__IO_FILE>>, !cir.ptr<!ty__IO_FILE> loc(#loc122)
              %16 = cir.call @fgets(%5, %13, %15) : (!cir.ptr<!s8i>, !s32i, !cir.ptr<!ty__IO_FILE>) -> !cir.ptr<!s8i> loc(#loc123)
              %17 = cir.const #cir.ptr<null> : !cir.ptr<!void> loc(#loc124)
              %18 = cir.cast(bitcast, %17 : !cir.ptr<!void>), !cir.ptr<!s8i> loc(#loc124)
              %19 = cir.cmp(ne, %16, %18) : !cir.ptr<!s8i>, !cir.bool loc(#loc347)
              cir.if %19 {
                %20 = cir.cast(array_to_ptrdecay, %3 : !cir.ptr<!cir.array<!s8i x 14>>), !cir.ptr<!s8i> loc(#loc128)
                %21 = cir.call @atoi(%20) : (!cir.ptr<!s8i>) -> !s32i extra(#fn_attr) loc(#loc129)
                cir.store %21, %0 : !s32i, !cir.ptr<!s32i> loc(#loc349)
              } else {
                %20 = cir.get_global @".str" : !cir.ptr<!cir.array<!s8i x 16>> loc(#loc132)
                %21 = cir.cast(array_to_ptrdecay, %20 : !cir.ptr<!cir.array<!s8i x 16>>), !cir.ptr<!s8i> loc(#loc132)
                cir.call @printLine(%21) : (!cir.ptr<!s8i>) -> () loc(#loc133)
              } loc(#loc348)
            } loc(#loc346)
          } loc(#loc344)
          cir.break loc(#loc134)
        } loc(#loc113)
        cir.case(default, []) {
          %3 = cir.get_global @".str.1" : !cir.ptr<!cir.array<!s8i x 21>> loc(#loc136)
          %4 = cir.cast(array_to_ptrdecay, %3 : !cir.ptr<!cir.array<!s8i x 21>>), !cir.ptr<!s8i> loc(#loc136)
          cir.call @printLine(%4) : (!cir.ptr<!s8i>) -> () loc(#loc137)
          cir.break loc(#loc138)
        } loc(#loc135)
        cir.yield loc(#loc110)
      } loc(#loc110)
    } loc(#loc343)
    cir.scope {
      %2 = cir.const #cir.int<8> : !s32i loc(#loc141)
      cir.switch (%2 : !s32i) {
        cir.case(equal, [#cir.int<7> : !s32i]) {
          %3 = cir.get_global @".str.1" : !cir.ptr<!cir.array<!s8i x 21>> loc(#loc143)
          %4 = cir.cast(array_to_ptrdecay, %3 : !cir.ptr<!cir.array<!s8i x 21>>), !cir.ptr<!s8i> loc(#loc143)
          cir.call @printLine(%4) : (!cir.ptr<!s8i>) -> () loc(#loc144)
          cir.break loc(#loc145)
        } loc(#loc142)
        cir.case(default, []) {
          cir.scope {
            %3 = cir.load %0 : !cir.ptr<!s32i>, !s32i loc(#loc149)
            %4 = cir.const #cir.int<0> : !s32i loc(#loc150)
            %5 = cir.cmp(lt, %3, %4) : !s32i, !cir.bool loc(#loc352)
            cir.if %5 {
              cir.scope {
                %6 = cir.load %0 : !cir.ptr<!s32i>, !s32i loc(#loc154)
                %7 = cir.const #cir.int<2147483647> : !s32i loc(#loc155)
                %8 = cir.unary(minus, %7) : !s32i, !s32i loc(#loc155)
                %9 = cir.const #cir.int<1> : !s32i loc(#loc155)
                %10 = cir.binop(sub, %8, %9) nsw : !s32i loc(#loc155)
                %11 = cir.const #cir.int<2> : !s32i loc(#loc156)
                %12 = cir.binop(div, %10, %11) : !s32i loc(#loc355)
                %13 = cir.cmp(gt, %6, %12) : !s32i, !cir.bool loc(#loc356)
                cir.if %13 {
                  %14 = cir.alloca !s32i, !cir.ptr<!s32i>, ["result", init] {alignment = 4 : i64} loc(#loc358)
                  %15 = cir.load %0 : !cir.ptr<!s32i>, !s32i loc(#loc163)
                  %16 = cir.const #cir.int<2> : !s32i loc(#loc162)
                  %17 = cir.binop(mul, %15, %16) nsw : !s32i loc(#loc163)
                  cir.store %17, %14 : !s32i, !cir.ptr<!s32i> loc(#loc358)
                  %18 = cir.load %14 : !cir.ptr<!s32i>, !s32i loc(#loc164)
                  cir.call @printIntLine(%18) : (!s32i) -> () loc(#loc165)
                } else {
                  %14 = cir.get_global @".str.6" : !cir.ptr<!cir.array<!s8i x 51>> loc(#loc103)
                  %15 = cir.cast(array_to_ptrdecay, %14 : !cir.ptr<!cir.array<!s8i x 51>>), !cir.ptr<!s8i> loc(#loc103)
                  cir.call @printLine(%15) : (!cir.ptr<!s8i>) -> () loc(#loc166)
                } loc(#loc357)
              } loc(#loc354)
            } loc(#loc353)
          } loc(#loc351)
          cir.break loc(#loc167)
        } loc(#loc146)
        cir.yield loc(#loc139)
      } loc(#loc139)
    } loc(#loc350)
    cir.return loc(#loc105)
  } loc(#loc340)
  cir.func no_proto internal private @goodB2G2() extra(#fn_attr1) {
    %0 = cir.alloca !s32i, !cir.ptr<!s32i>, ["data"] {alignment = 4 : i64} loc(#loc360)
    %1 = cir.const #cir.int<0> : !s32i loc(#loc172)
    cir.store %1, %0 : !s32i, !cir.ptr<!s32i> loc(#loc361)
    cir.scope {
      %2 = cir.const #cir.int<6> : !s32i loc(#loc176)
      cir.switch (%2 : !s32i) {
        cir.case(equal, [#cir.int<6> : !s32i]) {
          cir.scope {
            %3 = cir.alloca !cir.array<!s8i x 14>, !cir.ptr<!cir.array<!s8i x 14>>, ["inputBuffer"] {alignment = 1 : i64} loc(#loc364)
            %4 = cir.const #cir.zero : !cir.array<!s8i x 14> loc(#loc364)
            cir.store %4, %3 : !cir.array<!s8i x 14>, !cir.ptr<!cir.array<!s8i x 14>> loc(#loc364)
            cir.scope {
              %5 = cir.cast(array_to_ptrdecay, %3 : !cir.ptr<!cir.array<!s8i x 14>>), !cir.ptr<!s8i> loc(#loc184)
              %6 = cir.const #cir.int<3> : !s32i loc(#loc185)
              %7 = cir.cast(integral, %6 : !s32i), !u64i loc(#loc185)
              %8 = cir.const #cir.int<4> : !u64i loc(#loc185)
              %9 = cir.binop(mul, %7, %8) : !u64i loc(#loc185)
              %10 = cir.const #cir.int<2> : !s32i loc(#loc185)
              %11 = cir.cast(integral, %10 : !s32i), !u64i loc(#loc185)
              %12 = cir.binop(add, %9, %11) : !u64i loc(#loc185)
              %13 = cir.cast(integral, %12 : !u64i), !s32i loc(#loc185)
              %14 = cir.get_global @stdin : !cir.ptr<!cir.ptr<!ty__IO_FILE>> loc(#loc308)
              %15 = cir.load %14 : !cir.ptr<!cir.ptr<!ty__IO_FILE>>, !cir.ptr<!ty__IO_FILE> loc(#loc186)
              %16 = cir.call @fgets(%5, %13, %15) : (!cir.ptr<!s8i>, !s32i, !cir.ptr<!ty__IO_FILE>) -> !cir.ptr<!s8i> loc(#loc187)
              %17 = cir.const #cir.ptr<null> : !cir.ptr<!void> loc(#loc188)
              %18 = cir.cast(bitcast, %17 : !cir.ptr<!void>), !cir.ptr<!s8i> loc(#loc188)
              %19 = cir.cmp(ne, %16, %18) : !cir.ptr<!s8i>, !cir.bool loc(#loc366)
              cir.if %19 {
                %20 = cir.cast(array_to_ptrdecay, %3 : !cir.ptr<!cir.array<!s8i x 14>>), !cir.ptr<!s8i> loc(#loc192)
                %21 = cir.call @atoi(%20) : (!cir.ptr<!s8i>) -> !s32i extra(#fn_attr) loc(#loc193)
                cir.store %21, %0 : !s32i, !cir.ptr<!s32i> loc(#loc368)
              } else {
                %20 = cir.get_global @".str" : !cir.ptr<!cir.array<!s8i x 16>> loc(#loc196)
                %21 = cir.cast(array_to_ptrdecay, %20 : !cir.ptr<!cir.array<!s8i x 16>>), !cir.ptr<!s8i> loc(#loc196)
                cir.call @printLine(%21) : (!cir.ptr<!s8i>) -> () loc(#loc197)
              } loc(#loc367)
            } loc(#loc365)
          } loc(#loc363)
          cir.break loc(#loc198)
        } loc(#loc177)
        cir.case(default, []) {
          %3 = cir.get_global @".str.1" : !cir.ptr<!cir.array<!s8i x 21>> loc(#loc200)
          %4 = cir.cast(array_to_ptrdecay, %3 : !cir.ptr<!cir.array<!s8i x 21>>), !cir.ptr<!s8i> loc(#loc200)
          cir.call @printLine(%4) : (!cir.ptr<!s8i>) -> () loc(#loc201)
          cir.break loc(#loc202)
        } loc(#loc199)
        cir.yield loc(#loc174)
      } loc(#loc174)
    } loc(#loc362)
    cir.scope {
      %2 = cir.const #cir.int<7> : !s32i loc(#loc205)
      cir.switch (%2 : !s32i) {
        cir.case(equal, [#cir.int<7> : !s32i]) {
          cir.scope {
            %3 = cir.load %0 : !cir.ptr<!s32i>, !s32i loc(#loc209)
            %4 = cir.const #cir.int<0> : !s32i loc(#loc210)
            %5 = cir.cmp(lt, %3, %4) : !s32i, !cir.bool loc(#loc371)
            cir.if %5 {
              cir.scope {
                %6 = cir.load %0 : !cir.ptr<!s32i>, !s32i loc(#loc214)
                %7 = cir.const #cir.int<2147483647> : !s32i loc(#loc215)
                %8 = cir.unary(minus, %7) : !s32i, !s32i loc(#loc215)
                %9 = cir.const #cir.int<1> : !s32i loc(#loc215)
                %10 = cir.binop(sub, %8, %9) nsw : !s32i loc(#loc215)
                %11 = cir.const #cir.int<2> : !s32i loc(#loc216)
                %12 = cir.binop(div, %10, %11) : !s32i loc(#loc374)
                %13 = cir.cmp(gt, %6, %12) : !s32i, !cir.bool loc(#loc375)
                cir.if %13 {
                  %14 = cir.alloca !s32i, !cir.ptr<!s32i>, ["result", init] {alignment = 4 : i64} loc(#loc377)
                  %15 = cir.load %0 : !cir.ptr<!s32i>, !s32i loc(#loc223)
                  %16 = cir.const #cir.int<2> : !s32i loc(#loc222)
                  %17 = cir.binop(mul, %15, %16) nsw : !s32i loc(#loc223)
                  cir.store %17, %14 : !s32i, !cir.ptr<!s32i> loc(#loc377)
                  %18 = cir.load %14 : !cir.ptr<!s32i>, !s32i loc(#loc224)
                  cir.call @printIntLine(%18) : (!s32i) -> () loc(#loc225)
                } else {
                  %14 = cir.get_global @".str.6" : !cir.ptr<!cir.array<!s8i x 51>> loc(#loc226)
                  %15 = cir.cast(array_to_ptrdecay, %14 : !cir.ptr<!cir.array<!s8i x 51>>), !cir.ptr<!s8i> loc(#loc226)
                  cir.call @printLine(%15) : (!cir.ptr<!s8i>) -> () loc(#loc227)
                } loc(#loc376)
              } loc(#loc373)
            } loc(#loc372)
          } loc(#loc370)
          cir.break loc(#loc228)
        } loc(#loc206)
        cir.case(default, []) {
          %3 = cir.get_global @".str.1" : !cir.ptr<!cir.array<!s8i x 21>> loc(#loc230)
          %4 = cir.cast(array_to_ptrdecay, %3 : !cir.ptr<!cir.array<!s8i x 21>>), !cir.ptr<!s8i> loc(#loc230)
          cir.call @printLine(%4) : (!cir.ptr<!s8i>) -> () loc(#loc231)
          cir.break loc(#loc232)
        } loc(#loc229)
        cir.yield loc(#loc203)
      } loc(#loc203)
    } loc(#loc369)
    cir.return loc(#loc169)
  } loc(#loc359)
  cir.func no_proto internal private @goodG2B1() extra(#fn_attr1) {
    %0 = cir.alloca !s32i, !cir.ptr<!s32i>, ["data"] {alignment = 4 : i64} loc(#loc379)
    %1 = cir.const #cir.int<0> : !s32i loc(#loc237)
    cir.store %1, %0 : !s32i, !cir.ptr<!s32i> loc(#loc380)
    cir.scope {
      %2 = cir.const #cir.int<5> : !s32i loc(#loc241)
      cir.switch (%2 : !s32i) {
        cir.case(equal, [#cir.int<6> : !s32i]) {
          %3 = cir.get_global @".str.1" : !cir.ptr<!cir.array<!s8i x 21>> loc(#loc243)
          %4 = cir.cast(array_to_ptrdecay, %3 : !cir.ptr<!cir.array<!s8i x 21>>), !cir.ptr<!s8i> loc(#loc243)
          cir.call @printLine(%4) : (!cir.ptr<!s8i>) -> () loc(#loc244)
          cir.break loc(#loc245)
        } loc(#loc242)
        cir.case(default, []) {
          %3 = cir.const #cir.int<2> : !s32i loc(#loc247)
          %4 = cir.unary(minus, %3) : !s32i, !s32i loc(#loc248)
          cir.store %4, %0 : !s32i, !cir.ptr<!s32i> loc(#loc382)
          cir.break loc(#loc250)
        } loc(#loc246)
        cir.yield loc(#loc239)
      } loc(#loc239)
    } loc(#loc381)
    cir.scope {
      %2 = cir.const #cir.int<7> : !s32i loc(#loc253)
      cir.switch (%2 : !s32i) {
        cir.case(equal, [#cir.int<7> : !s32i]) {
          cir.scope {
            %3 = cir.load %0 : !cir.ptr<!s32i>, !s32i loc(#loc257)
            %4 = cir.const #cir.int<0> : !s32i loc(#loc258)
            %5 = cir.cmp(lt, %3, %4) : !s32i, !cir.bool loc(#loc385)
            cir.if %5 {
              %6 = cir.alloca !s32i, !cir.ptr<!s32i>, ["result", init] {alignment = 4 : i64} loc(#loc387)
              %7 = cir.load %0 : !cir.ptr<!s32i>, !s32i loc(#loc262)
              %8 = cir.const #cir.int<2> : !s32i loc(#loc261)
              %9 = cir.binop(mul, %7, %8) nsw : !s32i loc(#loc262)
              cir.store %9, %6 : !s32i, !cir.ptr<!s32i> loc(#loc387)
              %10 = cir.load %6 : !cir.ptr<!s32i>, !s32i loc(#loc263)
              cir.call @printIntLine(%10) : (!s32i) -> () loc(#loc264)
            } loc(#loc386)
          } loc(#loc384)
          cir.break loc(#loc265)
        } loc(#loc254)
        cir.case(default, []) {
          %3 = cir.get_global @".str.1" : !cir.ptr<!cir.array<!s8i x 21>> loc(#loc267)
          %4 = cir.cast(array_to_ptrdecay, %3 : !cir.ptr<!cir.array<!s8i x 21>>), !cir.ptr<!s8i> loc(#loc267)
          cir.call @printLine(%4) : (!cir.ptr<!s8i>) -> () loc(#loc268)
          cir.break loc(#loc269)
        } loc(#loc266)
        cir.yield loc(#loc251)
      } loc(#loc251)
    } loc(#loc383)
    cir.return loc(#loc234)
  } loc(#loc378)
  cir.func no_proto internal private @goodG2B2() extra(#fn_attr1) {
    %0 = cir.alloca !s32i, !cir.ptr<!s32i>, ["data"] {alignment = 4 : i64} loc(#loc389)
    %1 = cir.const #cir.int<0> : !s32i loc(#loc274)
    cir.store %1, %0 : !s32i, !cir.ptr<!s32i> loc(#loc390)
    cir.scope {
      %2 = cir.const #cir.int<6> : !s32i loc(#loc278)
      cir.switch (%2 : !s32i) {
        cir.case(equal, [#cir.int<6> : !s32i]) {
          %3 = cir.const #cir.int<2> : !s32i loc(#loc280)
          %4 = cir.unary(minus, %3) : !s32i, !s32i loc(#loc281)
          cir.store %4, %0 : !s32i, !cir.ptr<!s32i> loc(#loc392)
          cir.break loc(#loc283)
        } loc(#loc279)
        cir.case(default, []) {
          %3 = cir.get_global @".str.1" : !cir.ptr<!cir.array<!s8i x 21>> loc(#loc285)
          %4 = cir.cast(array_to_ptrdecay, %3 : !cir.ptr<!cir.array<!s8i x 21>>), !cir.ptr<!s8i> loc(#loc285)
          cir.call @printLine(%4) : (!cir.ptr<!s8i>) -> () loc(#loc286)
          cir.break loc(#loc287)
        } loc(#loc284)
        cir.yield loc(#loc276)
      } loc(#loc276)
    } loc(#loc391)
    cir.scope {
      %2 = cir.const #cir.int<7> : !s32i loc(#loc290)
      cir.switch (%2 : !s32i) {
        cir.case(equal, [#cir.int<7> : !s32i]) {
          cir.scope {
            %3 = cir.load %0 : !cir.ptr<!s32i>, !s32i loc(#loc294)
            %4 = cir.const #cir.int<0> : !s32i loc(#loc295)
            %5 = cir.cmp(lt, %3, %4) : !s32i, !cir.bool loc(#loc395)
            cir.if %5 {
              %6 = cir.alloca !s32i, !cir.ptr<!s32i>, ["result", init] {alignment = 4 : i64} loc(#loc397)
              %7 = cir.load %0 : !cir.ptr<!s32i>, !s32i loc(#loc299)
              %8 = cir.const #cir.int<2> : !s32i loc(#loc298)
              %9 = cir.binop(mul, %7, %8) nsw : !s32i loc(#loc299)
              cir.store %9, %6 : !s32i, !cir.ptr<!s32i> loc(#loc397)
              %10 = cir.load %6 : !cir.ptr<!s32i>, !s32i loc(#loc300)
              cir.call @printIntLine(%10) : (!s32i) -> () loc(#loc301)
            } loc(#loc396)
          } loc(#loc394)
          cir.break loc(#loc302)
        } loc(#loc291)
        cir.case(default, []) {
          %3 = cir.get_global @".str.1" : !cir.ptr<!cir.array<!s8i x 21>> loc(#loc304)
          %4 = cir.cast(array_to_ptrdecay, %3 : !cir.ptr<!cir.array<!s8i x 21>>), !cir.ptr<!s8i> loc(#loc304)
          cir.call @printLine(%4) : (!cir.ptr<!s8i>) -> () loc(#loc305)
          cir.break loc(#loc306)
        } loc(#loc303)
        cir.yield loc(#loc288)
      } loc(#loc288)
    } loc(#loc393)
    cir.return loc(#loc271)
  } loc(#loc388)
} loc(#loc)
#loc = loc("/home/ladisgin/git_proj/juliet-c/testcases/CWE191_Integer_Underflow/s02/CWE191_Integer_Underflow__int_fgets_multiply_15.c":0:0)
#loc1 = loc("/usr/include/stdio.h":654:1)
#loc2 = loc("/usr/include/stdio.h":655:59)
#loc3 = loc("/usr/include/stdio.h":149:1)
#loc4 = loc("/usr/include/stdio.h":149:14)
#loc5 = loc("/usr/include/stdlib.h":105:1)
#loc6 = loc("/usr/include/stdlib.h":106:33)
#loc7 = loc("../../../testcasesupport/std_testcase_io.h":14:1)
#loc8 = loc("../../../testcasesupport/std_testcase_io.h":14:33)
#loc9 = loc("CWE191_Integer_Underflow__int_fgets_multiply_15.c":42:23)
#loc10 = loc("CWE191_Integer_Underflow__int_fgets_multiply_15.c":48:19)
#loc11 = loc("../../../testcasesupport/std_testcase_io.h":18:1)
#loc12 = loc("../../../testcasesupport/std_testcase_io.h":18:33)
#loc13 = loc("CWE191_Integer_Underflow__int_fgets_multiply_15.c":24:1)
#loc14 = loc("CWE191_Integer_Underflow__int_fgets_multiply_15.c":66:1)
#loc15 = loc("CWE191_Integer_Underflow__int_fgets_multiply_15.c":26:5)
#loc16 = loc("CWE191_Integer_Underflow__int_fgets_multiply_15.c":26:9)
#loc17 = loc("CWE191_Integer_Underflow__int_fgets_multiply_15.c":28:12)
#loc18 = loc("CWE191_Integer_Underflow__int_fgets_multiply_15.c":28:5)
#loc19 = loc("CWE191_Integer_Underflow__int_fgets_multiply_15.c":29:5)
#loc20 = loc("CWE191_Integer_Underflow__int_fgets_multiply_15.c":50:5)
#loc21 = loc("CWE191_Integer_Underflow__int_fgets_multiply_15.c":29:12)
#loc22 = loc("CWE191_Integer_Underflow__int_fgets_multiply_15.c":31:5)
#loc23 = loc("CWE191_Integer_Underflow__int_fgets_multiply_15.c":32:5)
#loc24 = loc("CWE191_Integer_Underflow__int_fgets_multiply_15.c":44:5)
#loc25 = loc("CWE191_Integer_Underflow__int_fgets_multiply_15.c":33:9)
#loc26 = loc("CWE191_Integer_Underflow__int_fgets_multiply_15.c":33:45)
#loc27 = loc("CWE191_Integer_Underflow__int_fgets_multiply_15.c":35:9)
#loc28 = loc("CWE191_Integer_Underflow__int_fgets_multiply_15.c":43:9)
#loc29 = loc("CWE191_Integer_Underflow__int_fgets_multiply_15.c":35:19)
#loc30 = loc("CWE191_Integer_Underflow__int_fgets_multiply_15.c":35:32)
#loc31 = loc("CWE191_Integer_Underflow__int_fgets_multiply_15.c":35:49)
#loc32 = loc("CWE191_Integer_Underflow__int_fgets_multiply_15.c":35:13)
#loc33 = loc("CWE191_Integer_Underflow__int_fgets_multiply_15.c":35:59)
#loc34 = loc("CWE191_Integer_Underflow__int_fgets_multiply_15.c":36:9)
#loc35 = loc("CWE191_Integer_Underflow__int_fgets_multiply_15.c":39:9)
#loc36 = loc("CWE191_Integer_Underflow__int_fgets_multiply_15.c":41:9)
#loc37 = loc("CWE191_Integer_Underflow__int_fgets_multiply_15.c":38:25)
#loc38 = loc("CWE191_Integer_Underflow__int_fgets_multiply_15.c":38:20)
#loc39 = loc("CWE191_Integer_Underflow__int_fgets_multiply_15.c":38:13)
#loc40 = loc("CWE191_Integer_Underflow__int_fgets_multiply_15.c":38:36)
#loc41 = loc("CWE191_Integer_Underflow__int_fgets_multiply_15.c":42:13)
#loc42 = loc("CWE191_Integer_Underflow__int_fgets_multiply_15.c":45:5)
#loc43 = loc("CWE191_Integer_Underflow__int_fgets_multiply_15.c":46:5)
#loc44 = loc("CWE191_Integer_Underflow__int_fgets_multiply_15.c":48:9)
#loc45 = loc("CWE191_Integer_Underflow__int_fgets_multiply_15.c":49:9)
#loc46 = loc("CWE191_Integer_Underflow__int_fgets_multiply_15.c":51:5)
#loc47 = loc("CWE191_Integer_Underflow__int_fgets_multiply_15.c":65:5)
#loc48 = loc("CWE191_Integer_Underflow__int_fgets_multiply_15.c":51:12)
#loc49 = loc("CWE191_Integer_Underflow__int_fgets_multiply_15.c":53:5)
#loc50 = loc("CWE191_Integer_Underflow__int_fgets_multiply_15.c":54:9)
#loc51 = loc("CWE191_Integer_Underflow__int_fgets_multiply_15.c":59:9)
#loc52 = loc("CWE191_Integer_Underflow__int_fgets_multiply_15.c":54:12)
#loc53 = loc("CWE191_Integer_Underflow__int_fgets_multiply_15.c":54:19)
#loc54 = loc("CWE191_Integer_Underflow__int_fgets_multiply_15.c":55:9)
#loc55 = loc("CWE191_Integer_Underflow__int_fgets_multiply_15.c":57:13)
#loc56 = loc("CWE191_Integer_Underflow__int_fgets_multiply_15.c":57:33)
#loc57 = loc("CWE191_Integer_Underflow__int_fgets_multiply_15.c":57:26)
#loc58 = loc("CWE191_Integer_Underflow__int_fgets_multiply_15.c":58:26)
#loc59 = loc("CWE191_Integer_Underflow__int_fgets_multiply_15.c":58:13)
#loc60 = loc("CWE191_Integer_Underflow__int_fgets_multiply_15.c":60:9)
#loc61 = loc("CWE191_Integer_Underflow__int_fgets_multiply_15.c":61:5)
#loc62 = loc("CWE191_Integer_Underflow__int_fgets_multiply_15.c":63:19)
#loc63 = loc("CWE191_Integer_Underflow__int_fgets_multiply_15.c":63:9)
#loc64 = loc("CWE191_Integer_Underflow__int_fgets_multiply_15.c":64:9)
#loc65 = loc("CWE191_Integer_Underflow__int_fgets_multiply_15.c":244:1)
#loc66 = loc("CWE191_Integer_Underflow__int_fgets_multiply_15.c":250:1)
#loc67 = loc("CWE191_Integer_Underflow__int_fgets_multiply_15.c":246:5)
#loc68 = loc("CWE191_Integer_Underflow__int_fgets_multiply_15.c":246:14)
#loc69 = loc("CWE191_Integer_Underflow__int_fgets_multiply_15.c":247:5)
#loc70 = loc("CWE191_Integer_Underflow__int_fgets_multiply_15.c":247:14)
#loc71 = loc("CWE191_Integer_Underflow__int_fgets_multiply_15.c":248:5)
#loc72 = loc("CWE191_Integer_Underflow__int_fgets_multiply_15.c":248:14)
#loc73 = loc("CWE191_Integer_Underflow__int_fgets_multiply_15.c":249:5)
#loc74 = loc("CWE191_Integer_Underflow__int_fgets_multiply_15.c":249:14)
#loc75 = loc("/usr/include/stdlib.h":575:1)
#loc76 = loc("/usr/include/stdlib.h":575:41)
#loc77 = loc("/usr/include/time.h":76:1)
#loc78 = loc("/usr/include/time.h":76:38)
#loc79 = loc("CWE191_Integer_Underflow__int_fgets_multiply_15.c":266:15)
#loc80 = loc("CWE191_Integer_Underflow__int_fgets_multiply_15.c":268:15)
#loc81 = loc("CWE191_Integer_Underflow__int_fgets_multiply_15.c":271:15)
#loc82 = loc("CWE191_Integer_Underflow__int_fgets_multiply_15.c":273:15)
#loc83 = loc("CWE191_Integer_Underflow__int_fgets_multiply_15.c":261:1)
#loc84 = loc("CWE191_Integer_Underflow__int_fgets_multiply_15.c":276:1)
#loc89 = loc("CWE191_Integer_Underflow__int_fgets_multiply_15.c":262:1)
#loc90 = loc("CWE191_Integer_Underflow__int_fgets_multiply_15.c":264:27)
#loc91 = loc("CWE191_Integer_Underflow__int_fgets_multiply_15.c":264:22)
#loc92 = loc("CWE191_Integer_Underflow__int_fgets_multiply_15.c":264:5)
#loc93 = loc("CWE191_Integer_Underflow__int_fgets_multiply_15.c":266:5)
#loc94 = loc("CWE191_Integer_Underflow__int_fgets_multiply_15.c":267:5)
#loc95 = loc("CWE191_Integer_Underflow__int_fgets_multiply_15.c":267:58)
#loc96 = loc("CWE191_Integer_Underflow__int_fgets_multiply_15.c":268:5)
#loc97 = loc("CWE191_Integer_Underflow__int_fgets_multiply_15.c":271:5)
#loc98 = loc("CWE191_Integer_Underflow__int_fgets_multiply_15.c":272:5)
#loc99 = loc("CWE191_Integer_Underflow__int_fgets_multiply_15.c":272:57)
#loc100 = loc("CWE191_Integer_Underflow__int_fgets_multiply_15.c":273:5)
#loc101 = loc("CWE191_Integer_Underflow__int_fgets_multiply_15.c":275:12)
#loc102 = loc("CWE191_Integer_Underflow__int_fgets_multiply_15.c":275:5)
#loc103 = loc("CWE191_Integer_Underflow__int_fgets_multiply_15.c":117:27)
#loc104 = loc("CWE191_Integer_Underflow__int_fgets_multiply_15.c":73:1)
#loc105 = loc("CWE191_Integer_Underflow__int_fgets_multiply_15.c":122:1)
#loc106 = loc("CWE191_Integer_Underflow__int_fgets_multiply_15.c":75:5)
#loc107 = loc("CWE191_Integer_Underflow__int_fgets_multiply_15.c":75:9)
#loc108 = loc("CWE191_Integer_Underflow__int_fgets_multiply_15.c":77:12)
#loc109 = loc("CWE191_Integer_Underflow__int_fgets_multiply_15.c":77:5)
#loc110 = loc("CWE191_Integer_Underflow__int_fgets_multiply_15.c":78:5)
#loc111 = loc("CWE191_Integer_Underflow__int_fgets_multiply_15.c":99:5)
#loc112 = loc("CWE191_Integer_Underflow__int_fgets_multiply_15.c":78:12)
#loc113 = loc("CWE191_Integer_Underflow__int_fgets_multiply_15.c":80:5)
#loc114 = loc("CWE191_Integer_Underflow__int_fgets_multiply_15.c":81:5)
#loc115 = loc("CWE191_Integer_Underflow__int_fgets_multiply_15.c":93:5)
#loc116 = loc("CWE191_Integer_Underflow__int_fgets_multiply_15.c":82:9)
#loc117 = loc("CWE191_Integer_Underflow__int_fgets_multiply_15.c":82:45)
#loc118 = loc("CWE191_Integer_Underflow__int_fgets_multiply_15.c":84:9)
#loc119 = loc("CWE191_Integer_Underflow__int_fgets_multiply_15.c":92:9)
#loc120 = loc("CWE191_Integer_Underflow__int_fgets_multiply_15.c":84:19)
#loc121 = loc("CWE191_Integer_Underflow__int_fgets_multiply_15.c":84:32)
#loc122 = loc("CWE191_Integer_Underflow__int_fgets_multiply_15.c":84:49)
#loc123 = loc("CWE191_Integer_Underflow__int_fgets_multiply_15.c":84:13)
#loc124 = loc("CWE191_Integer_Underflow__int_fgets_multiply_15.c":84:59)
#loc125 = loc("CWE191_Integer_Underflow__int_fgets_multiply_15.c":85:9)
#loc126 = loc("CWE191_Integer_Underflow__int_fgets_multiply_15.c":88:9)
#loc127 = loc("CWE191_Integer_Underflow__int_fgets_multiply_15.c":90:9)
#loc128 = loc("CWE191_Integer_Underflow__int_fgets_multiply_15.c":87:25)
#loc129 = loc("CWE191_Integer_Underflow__int_fgets_multiply_15.c":87:20)
#loc130 = loc("CWE191_Integer_Underflow__int_fgets_multiply_15.c":87:13)
#loc131 = loc("CWE191_Integer_Underflow__int_fgets_multiply_15.c":87:36)
#loc132 = loc("CWE191_Integer_Underflow__int_fgets_multiply_15.c":91:23)
#loc133 = loc("CWE191_Integer_Underflow__int_fgets_multiply_15.c":91:13)
#loc134 = loc("CWE191_Integer_Underflow__int_fgets_multiply_15.c":94:5)
#loc135 = loc("CWE191_Integer_Underflow__int_fgets_multiply_15.c":95:5)
#loc136 = loc("CWE191_Integer_Underflow__int_fgets_multiply_15.c":97:19)
#loc137 = loc("CWE191_Integer_Underflow__int_fgets_multiply_15.c":97:9)
#loc138 = loc("CWE191_Integer_Underflow__int_fgets_multiply_15.c":98:9)
#loc139 = loc("CWE191_Integer_Underflow__int_fgets_multiply_15.c":100:5)
#loc140 = loc("CWE191_Integer_Underflow__int_fgets_multiply_15.c":121:5)
#loc141 = loc("CWE191_Integer_Underflow__int_fgets_multiply_15.c":100:12)
#loc142 = loc("CWE191_Integer_Underflow__int_fgets_multiply_15.c":102:5)
#loc143 = loc("CWE191_Integer_Underflow__int_fgets_multiply_15.c":104:19)
#loc144 = loc("CWE191_Integer_Underflow__int_fgets_multiply_15.c":104:9)
#loc145 = loc("CWE191_Integer_Underflow__int_fgets_multiply_15.c":105:9)
#loc146 = loc("CWE191_Integer_Underflow__int_fgets_multiply_15.c":106:5)
#loc147 = loc("CWE191_Integer_Underflow__int_fgets_multiply_15.c":107:9)
#loc148 = loc("CWE191_Integer_Underflow__int_fgets_multiply_15.c":119:9)
#loc149 = loc("CWE191_Integer_Underflow__int_fgets_multiply_15.c":107:12)
#loc150 = loc("CWE191_Integer_Underflow__int_fgets_multiply_15.c":107:19)
#loc151 = loc("CWE191_Integer_Underflow__int_fgets_multiply_15.c":108:9)
#loc152 = loc("CWE191_Integer_Underflow__int_fgets_multiply_15.c":110:13)
#loc153 = loc("CWE191_Integer_Underflow__int_fgets_multiply_15.c":118:13)
#loc154 = loc("CWE191_Integer_Underflow__int_fgets_multiply_15.c":110:17)
#loc155 = loc("CWE191_Integer_Underflow__int_fgets_multiply_15.c":110:25)
#loc156 = loc("CWE191_Integer_Underflow__int_fgets_multiply_15.c":110:33)
#loc157 = loc("CWE191_Integer_Underflow__int_fgets_multiply_15.c":110:34)
#loc158 = loc("CWE191_Integer_Underflow__int_fgets_multiply_15.c":111:13)
#loc159 = loc("CWE191_Integer_Underflow__int_fgets_multiply_15.c":114:13)
#loc160 = loc("CWE191_Integer_Underflow__int_fgets_multiply_15.c":116:13)
#loc161 = loc("CWE191_Integer_Underflow__int_fgets_multiply_15.c":112:17)
#loc162 = loc("CWE191_Integer_Underflow__int_fgets_multiply_15.c":112:37)
#loc163 = loc("CWE191_Integer_Underflow__int_fgets_multiply_15.c":112:30)
#loc164 = loc("CWE191_Integer_Underflow__int_fgets_multiply_15.c":113:30)
#loc165 = loc("CWE191_Integer_Underflow__int_fgets_multiply_15.c":113:17)
#loc166 = loc("CWE191_Integer_Underflow__int_fgets_multiply_15.c":117:17)
#loc167 = loc("CWE191_Integer_Underflow__int_fgets_multiply_15.c":120:9)
#loc168 = loc("CWE191_Integer_Underflow__int_fgets_multiply_15.c":125:1)
#loc169 = loc("CWE191_Integer_Underflow__int_fgets_multiply_15.c":174:1)
#loc170 = loc("CWE191_Integer_Underflow__int_fgets_multiply_15.c":127:5)
#loc171 = loc("CWE191_Integer_Underflow__int_fgets_multiply_15.c":127:9)
#loc172 = loc("CWE191_Integer_Underflow__int_fgets_multiply_15.c":129:12)
#loc173 = loc("CWE191_Integer_Underflow__int_fgets_multiply_15.c":129:5)
#loc174 = loc("CWE191_Integer_Underflow__int_fgets_multiply_15.c":130:5)
#loc175 = loc("CWE191_Integer_Underflow__int_fgets_multiply_15.c":151:5)
#loc176 = loc("CWE191_Integer_Underflow__int_fgets_multiply_15.c":130:12)
#loc177 = loc("CWE191_Integer_Underflow__int_fgets_multiply_15.c":132:5)
#loc178 = loc("CWE191_Integer_Underflow__int_fgets_multiply_15.c":133:5)
#loc179 = loc("CWE191_Integer_Underflow__int_fgets_multiply_15.c":145:5)
#loc180 = loc("CWE191_Integer_Underflow__int_fgets_multiply_15.c":134:9)
#loc181 = loc("CWE191_Integer_Underflow__int_fgets_multiply_15.c":134:45)
#loc182 = loc("CWE191_Integer_Underflow__int_fgets_multiply_15.c":136:9)
#loc183 = loc("CWE191_Integer_Underflow__int_fgets_multiply_15.c":144:9)
#loc184 = loc("CWE191_Integer_Underflow__int_fgets_multiply_15.c":136:19)
#loc185 = loc("CWE191_Integer_Underflow__int_fgets_multiply_15.c":136:32)
#loc186 = loc("CWE191_Integer_Underflow__int_fgets_multiply_15.c":136:49)
#loc187 = loc("CWE191_Integer_Underflow__int_fgets_multiply_15.c":136:13)
#loc188 = loc("CWE191_Integer_Underflow__int_fgets_multiply_15.c":136:59)
#loc189 = loc("CWE191_Integer_Underflow__int_fgets_multiply_15.c":137:9)
#loc190 = loc("CWE191_Integer_Underflow__int_fgets_multiply_15.c":140:9)
#loc191 = loc("CWE191_Integer_Underflow__int_fgets_multiply_15.c":142:9)
#loc192 = loc("CWE191_Integer_Underflow__int_fgets_multiply_15.c":139:25)
#loc193 = loc("CWE191_Integer_Underflow__int_fgets_multiply_15.c":139:20)
#loc194 = loc("CWE191_Integer_Underflow__int_fgets_multiply_15.c":139:13)
#loc195 = loc("CWE191_Integer_Underflow__int_fgets_multiply_15.c":139:36)
#loc196 = loc("CWE191_Integer_Underflow__int_fgets_multiply_15.c":143:23)
#loc197 = loc("CWE191_Integer_Underflow__int_fgets_multiply_15.c":143:13)
#loc198 = loc("CWE191_Integer_Underflow__int_fgets_multiply_15.c":146:5)
#loc199 = loc("CWE191_Integer_Underflow__int_fgets_multiply_15.c":147:5)
#loc200 = loc("CWE191_Integer_Underflow__int_fgets_multiply_15.c":149:19)
#loc201 = loc("CWE191_Integer_Underflow__int_fgets_multiply_15.c":149:9)
#loc202 = loc("CWE191_Integer_Underflow__int_fgets_multiply_15.c":150:9)
#loc203 = loc("CWE191_Integer_Underflow__int_fgets_multiply_15.c":152:5)
#loc204 = loc("CWE191_Integer_Underflow__int_fgets_multiply_15.c":173:5)
#loc205 = loc("CWE191_Integer_Underflow__int_fgets_multiply_15.c":152:12)
#loc206 = loc("CWE191_Integer_Underflow__int_fgets_multiply_15.c":154:5)
#loc207 = loc("CWE191_Integer_Underflow__int_fgets_multiply_15.c":155:9)
#loc208 = loc("CWE191_Integer_Underflow__int_fgets_multiply_15.c":167:9)
#loc209 = loc("CWE191_Integer_Underflow__int_fgets_multiply_15.c":155:12)
#loc210 = loc("CWE191_Integer_Underflow__int_fgets_multiply_15.c":155:19)
#loc211 = loc("CWE191_Integer_Underflow__int_fgets_multiply_15.c":156:9)
#loc212 = loc("CWE191_Integer_Underflow__int_fgets_multiply_15.c":158:13)
#loc213 = loc("CWE191_Integer_Underflow__int_fgets_multiply_15.c":166:13)
#loc214 = loc("CWE191_Integer_Underflow__int_fgets_multiply_15.c":158:17)
#loc215 = loc("CWE191_Integer_Underflow__int_fgets_multiply_15.c":158:25)
#loc216 = loc("CWE191_Integer_Underflow__int_fgets_multiply_15.c":158:33)
#loc217 = loc("CWE191_Integer_Underflow__int_fgets_multiply_15.c":158:34)
#loc218 = loc("CWE191_Integer_Underflow__int_fgets_multiply_15.c":159:13)
#loc219 = loc("CWE191_Integer_Underflow__int_fgets_multiply_15.c":162:13)
#loc220 = loc("CWE191_Integer_Underflow__int_fgets_multiply_15.c":164:13)
#loc221 = loc("CWE191_Integer_Underflow__int_fgets_multiply_15.c":160:17)
#loc222 = loc("CWE191_Integer_Underflow__int_fgets_multiply_15.c":160:37)
#loc223 = loc("CWE191_Integer_Underflow__int_fgets_multiply_15.c":160:30)
#loc224 = loc("CWE191_Integer_Underflow__int_fgets_multiply_15.c":161:30)
#loc225 = loc("CWE191_Integer_Underflow__int_fgets_multiply_15.c":161:17)
#loc226 = loc("CWE191_Integer_Underflow__int_fgets_multiply_15.c":165:27)
#loc227 = loc("CWE191_Integer_Underflow__int_fgets_multiply_15.c":165:17)
#loc228 = loc("CWE191_Integer_Underflow__int_fgets_multiply_15.c":168:9)
#loc229 = loc("CWE191_Integer_Underflow__int_fgets_multiply_15.c":169:5)
#loc230 = loc("CWE191_Integer_Underflow__int_fgets_multiply_15.c":171:19)
#loc231 = loc("CWE191_Integer_Underflow__int_fgets_multiply_15.c":171:9)
#loc232 = loc("CWE191_Integer_Underflow__int_fgets_multiply_15.c":172:9)
#loc233 = loc("CWE191_Integer_Underflow__int_fgets_multiply_15.c":177:1)
#loc234 = loc("CWE191_Integer_Underflow__int_fgets_multiply_15.c":208:1)
#loc235 = loc("CWE191_Integer_Underflow__int_fgets_multiply_15.c":179:5)
#loc236 = loc("CWE191_Integer_Underflow__int_fgets_multiply_15.c":179:9)
#loc237 = loc("CWE191_Integer_Underflow__int_fgets_multiply_15.c":181:12)
#loc238 = loc("CWE191_Integer_Underflow__int_fgets_multiply_15.c":181:5)
#loc239 = loc("CWE191_Integer_Underflow__int_fgets_multiply_15.c":182:5)
#loc240 = loc("CWE191_Integer_Underflow__int_fgets_multiply_15.c":192:5)
#loc241 = loc("CWE191_Integer_Underflow__int_fgets_multiply_15.c":182:12)
#loc242 = loc("CWE191_Integer_Underflow__int_fgets_multiply_15.c":184:5)
#loc243 = loc("CWE191_Integer_Underflow__int_fgets_multiply_15.c":186:19)
#loc244 = loc("CWE191_Integer_Underflow__int_fgets_multiply_15.c":186:9)
#loc245 = loc("CWE191_Integer_Underflow__int_fgets_multiply_15.c":187:9)
#loc246 = loc("CWE191_Integer_Underflow__int_fgets_multiply_15.c":188:5)
#loc247 = loc("CWE191_Integer_Underflow__int_fgets_multiply_15.c":190:17)
#loc248 = loc("CWE191_Integer_Underflow__int_fgets_multiply_15.c":190:16)
#loc249 = loc("CWE191_Integer_Underflow__int_fgets_multiply_15.c":190:9)
#loc250 = loc("CWE191_Integer_Underflow__int_fgets_multiply_15.c":191:9)
#loc251 = loc("CWE191_Integer_Underflow__int_fgets_multiply_15.c":193:5)
#loc252 = loc("CWE191_Integer_Underflow__int_fgets_multiply_15.c":207:5)
#loc253 = loc("CWE191_Integer_Underflow__int_fgets_multiply_15.c":193:12)
#loc254 = loc("CWE191_Integer_Underflow__int_fgets_multiply_15.c":195:5)
#loc255 = loc("CWE191_Integer_Underflow__int_fgets_multiply_15.c":196:9)
#loc256 = loc("CWE191_Integer_Underflow__int_fgets_multiply_15.c":201:9)
#loc257 = loc("CWE191_Integer_Underflow__int_fgets_multiply_15.c":196:12)
#loc258 = loc("CWE191_Integer_Underflow__int_fgets_multiply_15.c":196:19)
#loc259 = loc("CWE191_Integer_Underflow__int_fgets_multiply_15.c":197:9)
#loc260 = loc("CWE191_Integer_Underflow__int_fgets_multiply_15.c":199:13)
#loc261 = loc("CWE191_Integer_Underflow__int_fgets_multiply_15.c":199:33)
#loc262 = loc("CWE191_Integer_Underflow__int_fgets_multiply_15.c":199:26)
#loc263 = loc("CWE191_Integer_Underflow__int_fgets_multiply_15.c":200:26)
#loc264 = loc("CWE191_Integer_Underflow__int_fgets_multiply_15.c":200:13)
#loc265 = loc("CWE191_Integer_Underflow__int_fgets_multiply_15.c":202:9)
#loc266 = loc("CWE191_Integer_Underflow__int_fgets_multiply_15.c":203:5)
#loc267 = loc("CWE191_Integer_Underflow__int_fgets_multiply_15.c":205:19)
#loc268 = loc("CWE191_Integer_Underflow__int_fgets_multiply_15.c":205:9)
#loc269 = loc("CWE191_Integer_Underflow__int_fgets_multiply_15.c":206:9)
#loc270 = loc("CWE191_Integer_Underflow__int_fgets_multiply_15.c":211:1)
#loc271 = loc("CWE191_Integer_Underflow__int_fgets_multiply_15.c":242:1)
#loc272 = loc("CWE191_Integer_Underflow__int_fgets_multiply_15.c":213:5)
#loc273 = loc("CWE191_Integer_Underflow__int_fgets_multiply_15.c":213:9)
#loc274 = loc("CWE191_Integer_Underflow__int_fgets_multiply_15.c":215:12)
#loc275 = loc("CWE191_Integer_Underflow__int_fgets_multiply_15.c":215:5)
#loc276 = loc("CWE191_Integer_Underflow__int_fgets_multiply_15.c":216:5)
#loc277 = loc("CWE191_Integer_Underflow__int_fgets_multiply_15.c":226:5)
#loc278 = loc("CWE191_Integer_Underflow__int_fgets_multiply_15.c":216:12)
#loc279 = loc("CWE191_Integer_Underflow__int_fgets_multiply_15.c":218:5)
#loc280 = loc("CWE191_Integer_Underflow__int_fgets_multiply_15.c":220:17)
#loc281 = loc("CWE191_Integer_Underflow__int_fgets_multiply_15.c":220:16)
#loc282 = loc("CWE191_Integer_Underflow__int_fgets_multiply_15.c":220:9)
#loc283 = loc("CWE191_Integer_Underflow__int_fgets_multiply_15.c":221:9)
#loc284 = loc("CWE191_Integer_Underflow__int_fgets_multiply_15.c":222:5)
#loc285 = loc("CWE191_Integer_Underflow__int_fgets_multiply_15.c":224:19)
#loc286 = loc("CWE191_Integer_Underflow__int_fgets_multiply_15.c":224:9)
#loc287 = loc("CWE191_Integer_Underflow__int_fgets_multiply_15.c":225:9)
#loc288 = loc("CWE191_Integer_Underflow__int_fgets_multiply_15.c":227:5)
#loc289 = loc("CWE191_Integer_Underflow__int_fgets_multiply_15.c":241:5)
#loc290 = loc("CWE191_Integer_Underflow__int_fgets_multiply_15.c":227:12)
#loc291 = loc("CWE191_Integer_Underflow__int_fgets_multiply_15.c":229:5)
#loc292 = loc("CWE191_Integer_Underflow__int_fgets_multiply_15.c":230:9)
#loc293 = loc("CWE191_Integer_Underflow__int_fgets_multiply_15.c":235:9)
#loc294 = loc("CWE191_Integer_Underflow__int_fgets_multiply_15.c":230:12)
#loc295 = loc("CWE191_Integer_Underflow__int_fgets_multiply_15.c":230:19)
#loc296 = loc("CWE191_Integer_Underflow__int_fgets_multiply_15.c":231:9)
#loc297 = loc("CWE191_Integer_Underflow__int_fgets_multiply_15.c":233:13)
#loc298 = loc("CWE191_Integer_Underflow__int_fgets_multiply_15.c":233:33)
#loc299 = loc("CWE191_Integer_Underflow__int_fgets_multiply_15.c":233:26)
#loc300 = loc("CWE191_Integer_Underflow__int_fgets_multiply_15.c":234:26)
#loc301 = loc("CWE191_Integer_Underflow__int_fgets_multiply_15.c":234:13)
#loc302 = loc("CWE191_Integer_Underflow__int_fgets_multiply_15.c":236:9)
#loc303 = loc("CWE191_Integer_Underflow__int_fgets_multiply_15.c":237:5)
#loc304 = loc("CWE191_Integer_Underflow__int_fgets_multiply_15.c":239:19)
#loc305 = loc("CWE191_Integer_Underflow__int_fgets_multiply_15.c":239:9)
#loc306 = loc("CWE191_Integer_Underflow__int_fgets_multiply_15.c":240:9)
#loc307 = loc(fused[#loc1, #loc2])
#loc308 = loc(fused[#loc3, #loc4])
#loc309 = loc(fused[#loc5, #loc6])
#loc310 = loc(fused[#loc7, #loc8])
#loc311 = loc(fused[#loc11, #loc12])
#loc312 = loc(fused[#loc13, #loc14])
#loc313 = loc(fused[#loc15, #loc16])
#loc314 = loc(fused[#loc18, #loc17])
#loc315 = loc(fused[#loc19, #loc20])
#loc316 = loc(fused[#loc23, #loc24])
#loc317 = loc(fused[#loc25, #loc26])
#loc318 = loc(fused[#loc27, #loc28])
#loc319 = loc(fused[#loc32, #loc33])
#loc320 = loc(fused[#loc34, #loc35, #loc36, #loc28])
#loc321 = loc(fused[#loc39, #loc40])
#loc322 = loc(fused[#loc46, #loc47])
#loc323 = loc(fused[#loc50, #loc51])
#loc324 = loc(fused[#loc52, #loc53])
#loc325 = loc(fused[#loc54, #loc51])
#loc326 = loc(fused[#loc55, #loc56])
#loc327 = loc(fused[#loc65, #loc66])
#loc328 = loc(fused[#loc67, #loc68])
#loc329 = loc(fused[#loc69, #loc70])
#loc330 = loc(fused[#loc71, #loc72])
#loc331 = loc(fused[#loc73, #loc74])
#loc332 = loc(fused[#loc75, #loc76])
#loc333 = loc(fused[#loc77, #loc78])
#loc334 = loc(fused[#loc83, #loc84])
#loc337 = loc(fused[#loc94, #loc95])
#loc338 = loc(fused[#loc98, #loc99])
#loc339 = loc(fused[#loc102, #loc101])
#loc340 = loc(fused[#loc104, #loc105])
#loc341 = loc(fused[#loc106, #loc107])
#loc342 = loc(fused[#loc109, #loc108])
#loc343 = loc(fused[#loc110, #loc111])
#loc344 = loc(fused[#loc114, #loc115])
#loc345 = loc(fused[#loc116, #loc117])
#loc346 = loc(fused[#loc118, #loc119])
#loc347 = loc(fused[#loc123, #loc124])
#loc348 = loc(fused[#loc125, #loc126, #loc127, #loc119])
#loc349 = loc(fused[#loc130, #loc131])
#loc350 = loc(fused[#loc139, #loc140])
#loc351 = loc(fused[#loc147, #loc148])
#loc352 = loc(fused[#loc149, #loc150])
#loc353 = loc(fused[#loc151, #loc148])
#loc354 = loc(fused[#loc152, #loc153])
#loc355 = loc(fused[#loc155, #loc156])
#loc356 = loc(fused[#loc154, #loc157])
#loc357 = loc(fused[#loc158, #loc159, #loc160, #loc153])
#loc358 = loc(fused[#loc161, #loc162])
#loc359 = loc(fused[#loc168, #loc169])
#loc360 = loc(fused[#loc170, #loc171])
#loc361 = loc(fused[#loc173, #loc172])
#loc362 = loc(fused[#loc174, #loc175])
#loc363 = loc(fused[#loc178, #loc179])
#loc364 = loc(fused[#loc180, #loc181])
#loc365 = loc(fused[#loc182, #loc183])
#loc366 = loc(fused[#loc187, #loc188])
#loc367 = loc(fused[#loc189, #loc190, #loc191, #loc183])
#loc368 = loc(fused[#loc194, #loc195])
#loc369 = loc(fused[#loc203, #loc204])
#loc370 = loc(fused[#loc207, #loc208])
#loc371 = loc(fused[#loc209, #loc210])
#loc372 = loc(fused[#loc211, #loc208])
#loc373 = loc(fused[#loc212, #loc213])
#loc374 = loc(fused[#loc215, #loc216])
#loc375 = loc(fused[#loc214, #loc217])
#loc376 = loc(fused[#loc218, #loc219, #loc220, #loc213])
#loc377 = loc(fused[#loc221, #loc222])
#loc378 = loc(fused[#loc233, #loc234])
#loc379 = loc(fused[#loc235, #loc236])
#loc380 = loc(fused[#loc238, #loc237])
#loc381 = loc(fused[#loc239, #loc240])
#loc382 = loc(fused[#loc249, #loc247])
#loc383 = loc(fused[#loc251, #loc252])
#loc384 = loc(fused[#loc255, #loc256])
#loc385 = loc(fused[#loc257, #loc258])
#loc386 = loc(fused[#loc259, #loc256])
#loc387 = loc(fused[#loc260, #loc261])
#loc388 = loc(fused[#loc270, #loc271])
#loc389 = loc(fused[#loc272, #loc273])
#loc390 = loc(fused[#loc275, #loc274])
#loc391 = loc(fused[#loc276, #loc277])
#loc392 = loc(fused[#loc282, #loc280])
#loc393 = loc(fused[#loc288, #loc289])
#loc394 = loc(fused[#loc292, #loc293])
#loc395 = loc(fused[#loc294, #loc295])
#loc396 = loc(fused[#loc296, #loc293])
#loc397 = loc(fused[#loc297, #loc298])
