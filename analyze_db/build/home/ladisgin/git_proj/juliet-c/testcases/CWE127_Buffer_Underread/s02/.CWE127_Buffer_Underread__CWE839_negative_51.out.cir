!s32i = !cir.int<s, 32>
!s8i = !cir.int<s, 8>
#false = #cir.bool<false> : !cir.bool
#fn_attr = #cir<extra({inline = #cir.inline<no>, nothrow = #cir.nothrow, optnone = #cir.optnone})>
#loc8 = loc("CWE127_Buffer_Underread__CWE839_negative_51b.c":22:59)
#loc9 = loc("CWE127_Buffer_Underread__CWE839_negative_51b.c":22:63)
#loc28 = loc("CWE127_Buffer_Underread__CWE839_negative_51b.c":44:63)
#loc29 = loc("CWE127_Buffer_Underread__CWE839_negative_51b.c":44:67)
#loc50 = loc("CWE127_Buffer_Underread__CWE839_negative_51b.c":62:63)
#loc51 = loc("CWE127_Buffer_Underread__CWE839_negative_51b.c":62:67)
#true = #cir.bool<true> : !cir.bool
#loc75 = loc(fused[#loc8, #loc9])
#loc82 = loc(fused[#loc28, #loc29])
#loc89 = loc(fused[#loc50, #loc51])
module @"/home/ladisgin/git_proj/juliet-c/testcases/CWE127_Buffer_Underread/s02/CWE127_Buffer_Underread__CWE839_negative_51b.c" attributes {cir.lang = #cir.lang<c>, cir.sob = #cir.signed_overflow_behavior<undefined>, cir.triple = "x86_64-unknown-linux-gnu", dlti.dl_spec = #dlti.dl_spec<f64 = dense<64> : vector<2xi64>, f128 = dense<128> : vector<2xi64>, f16 = dense<16> : vector<2xi64>, !llvm.ptr<270> = dense<32> : vector<4xi64>, i32 = dense<32> : vector<2xi64>, i64 = dense<64> : vector<2xi64>, !llvm.ptr<272> = dense<64> : vector<4xi64>, !llvm.ptr<271> = dense<32> : vector<4xi64>, f80 = dense<128> : vector<2xi64>, i128 = dense<128> : vector<2xi64>, i16 = dense<16> : vector<2xi64>, i8 = dense<8> : vector<2xi64>, i1 = dense<8> : vector<2xi64>, !llvm.ptr = dense<64> : vector<4xi64>, "dlti.endianness" = "little", "dlti.stack_alignment" = 128 : i64>} {
  cir.func private @printIntLine(!s32i) loc(#loc72)
  cir.func private @printLine(!cir.ptr<!s8i>) loc(#loc73)
  cir.global "private" constant cir_private dsolocal @".str" = #cir.const_array<"ERROR: Array index is too big.\00" : !cir.array<!s8i x 31>> : !cir.array<!s8i x 31> {alignment = 1 : i64} loc(#loc5)
  cir.func @CWE127_Buffer_Underread__CWE839_negative_51b_badSink(%arg0: !s32i loc(fused[#loc8, #loc9])) extra(#fn_attr) {
    %0 = cir.alloca !s32i, !cir.ptr<!s32i>, ["data", init] {alignment = 4 : i64} loc(#loc75)
    cir.store %arg0, %0 : !s32i, !cir.ptr<!s32i> loc(#loc10)
    cir.scope {
      %1 = cir.alloca !cir.array<!s32i x 10>, !cir.ptr<!cir.array<!s32i x 10>>, ["buffer"] {alignment = 16 : i64} loc(#loc77)
      %2 = cir.const #cir.zero : !cir.array<!s32i x 10> loc(#loc77)
      cir.store %2, %1 : !cir.array<!s32i x 10>, !cir.ptr<!cir.array<!s32i x 10>> loc(#loc77)
      cir.scope {
        %3 = cir.load %0 : !cir.ptr<!s32i>, !s32i loc(#loc17)
        %4 = cir.const #cir.int<10> : !s32i loc(#loc18)
        %5 = cir.cmp(lt, %3, %4) : !s32i, !cir.bool loc(#loc79)
        cir.if %5 {
          %6 = cir.load %0 : !cir.ptr<!s32i>, !s32i loc(#loc22)
          %7 = cir.cast(array_to_ptrdecay, %1 : !cir.ptr<!cir.array<!s32i x 10>>), !cir.ptr<!s32i> loc(#loc23)
          %8 = cir.ptr_stride(%7 : !cir.ptr<!s32i>, %6 : !s32i), !cir.ptr<!s32i> loc(#loc23)
          %9 = cir.load %8 : !cir.ptr<!s32i>, !s32i loc(#loc23)
          cir.call @printIntLine(%9) : (!s32i) -> () loc(#loc24)
        } else {
          %6 = cir.get_global @".str" : !cir.ptr<!cir.array<!s8i x 31>> loc(#loc5)
          %7 = cir.cast(array_to_ptrdecay, %6 : !cir.ptr<!cir.array<!s8i x 31>>), !cir.ptr<!s8i> loc(#loc5)
          cir.call @printLine(%7) : (!cir.ptr<!s8i>) -> () loc(#loc25)
        } loc(#loc80)
      } loc(#loc78)
    } loc(#loc76)
    cir.return loc(#loc7)
  } loc(#loc74)
  cir.func @CWE127_Buffer_Underread__CWE839_negative_51b_goodG2BSink(%arg0: !s32i loc(fused[#loc28, #loc29])) extra(#fn_attr) {
    %0 = cir.alloca !s32i, !cir.ptr<!s32i>, ["data", init] {alignment = 4 : i64} loc(#loc82)
    cir.store %arg0, %0 : !s32i, !cir.ptr<!s32i> loc(#loc30)
    cir.scope {
      %1 = cir.alloca !cir.array<!s32i x 10>, !cir.ptr<!cir.array<!s32i x 10>>, ["buffer"] {alignment = 16 : i64} loc(#loc84)
      %2 = cir.const #cir.zero : !cir.array<!s32i x 10> loc(#loc84)
      cir.store %2, %1 : !cir.array<!s32i x 10>, !cir.ptr<!cir.array<!s32i x 10>> loc(#loc84)
      cir.scope {
        %3 = cir.load %0 : !cir.ptr<!s32i>, !s32i loc(#loc37)
        %4 = cir.const #cir.int<10> : !s32i loc(#loc38)
        %5 = cir.cmp(lt, %3, %4) : !s32i, !cir.bool loc(#loc86)
        cir.if %5 {
          %6 = cir.load %0 : !cir.ptr<!s32i>, !s32i loc(#loc42)
          %7 = cir.cast(array_to_ptrdecay, %1 : !cir.ptr<!cir.array<!s32i x 10>>), !cir.ptr<!s32i> loc(#loc43)
          %8 = cir.ptr_stride(%7 : !cir.ptr<!s32i>, %6 : !s32i), !cir.ptr<!s32i> loc(#loc43)
          %9 = cir.load %8 : !cir.ptr<!s32i>, !s32i loc(#loc43)
          cir.call @printIntLine(%9) : (!s32i) -> () loc(#loc44)
        } else {
          %6 = cir.get_global @".str" : !cir.ptr<!cir.array<!s8i x 31>> loc(#loc45)
          %7 = cir.cast(array_to_ptrdecay, %6 : !cir.ptr<!cir.array<!s8i x 31>>), !cir.ptr<!s8i> loc(#loc45)
          cir.call @printLine(%7) : (!cir.ptr<!s8i>) -> () loc(#loc46)
        } loc(#loc87)
      } loc(#loc85)
    } loc(#loc83)
    cir.return loc(#loc27)
  } loc(#loc81)
  cir.global "private" constant cir_private dsolocal @".str.1" = #cir.const_array<"ERROR: Array index is out-of-bounds\00" : !cir.array<!s8i x 36>> : !cir.array<!s8i x 36> {alignment = 1 : i64} loc(#loc47)
  cir.func @CWE127_Buffer_Underread__CWE839_negative_51b_goodB2GSink(%arg0: !s32i loc(fused[#loc50, #loc51])) extra(#fn_attr) {
    %0 = cir.alloca !s32i, !cir.ptr<!s32i>, ["data", init] {alignment = 4 : i64} loc(#loc89)
    cir.store %arg0, %0 : !s32i, !cir.ptr<!s32i> loc(#loc52)
    cir.scope {
      %1 = cir.alloca !cir.array<!s32i x 10>, !cir.ptr<!cir.array<!s32i x 10>>, ["buffer"] {alignment = 16 : i64} loc(#loc91)
      %2 = cir.const #cir.zero : !cir.array<!s32i x 10> loc(#loc91)
      cir.store %2, %1 : !cir.array<!s32i x 10>, !cir.ptr<!cir.array<!s32i x 10>> loc(#loc91)
      cir.scope {
        %3 = cir.load %0 : !cir.ptr<!s32i>, !s32i loc(#loc59)
        %4 = cir.const #cir.int<0> : !s32i loc(#loc60)
        %5 = cir.cmp(ge, %3, %4) : !s32i, !cir.bool loc(#loc93)
        %6 = cir.ternary(%5, true {
          %7 = cir.load %0 : !cir.ptr<!s32i>, !s32i loc(#loc62)
          %8 = cir.const #cir.int<10> : !s32i loc(#loc63)
          %9 = cir.cmp(lt, %7, %8) : !s32i, !cir.bool loc(#loc94)
          %10 = cir.ternary(%9, true {
            %11 = cir.const #true loc(#loc61)
            cir.yield %11 : !cir.bool loc(#loc61)
          }, false {
            %11 = cir.const #false loc(#loc61)
            cir.yield %11 : !cir.bool loc(#loc61)
          }) : (!cir.bool) -> !cir.bool loc(#loc61)
          cir.yield %10 : !cir.bool loc(#loc61)
        }, false {
          %7 = cir.const #false loc(#loc61)
          cir.yield %7 : !cir.bool loc(#loc61)
        }) : (!cir.bool) -> !cir.bool loc(#loc61)
        cir.if %6 {
          %7 = cir.load %0 : !cir.ptr<!s32i>, !s32i loc(#loc68)
          %8 = cir.cast(array_to_ptrdecay, %1 : !cir.ptr<!cir.array<!s32i x 10>>), !cir.ptr<!s32i> loc(#loc69)
          %9 = cir.ptr_stride(%8 : !cir.ptr<!s32i>, %7 : !s32i), !cir.ptr<!s32i> loc(#loc69)
          %10 = cir.load %9 : !cir.ptr<!s32i>, !s32i loc(#loc69)
          cir.call @printIntLine(%10) : (!s32i) -> () loc(#loc70)
        } else {
          %7 = cir.get_global @".str.1" : !cir.ptr<!cir.array<!s8i x 36>> loc(#loc47)
          %8 = cir.cast(array_to_ptrdecay, %7 : !cir.ptr<!cir.array<!s8i x 36>>), !cir.ptr<!s8i> loc(#loc47)
          cir.call @printLine(%8) : (!cir.ptr<!s8i>) -> () loc(#loc71)
        } loc(#loc95)
      } loc(#loc92)
    } loc(#loc90)
    cir.return loc(#loc49)
  } loc(#loc88)
} loc(#loc)
#loc = loc("/home/ladisgin/git_proj/juliet-c/testcases/CWE127_Buffer_Underread/s02/CWE127_Buffer_Underread__CWE839_negative_51b.c":0:0)
#loc1 = loc("../../../testcasesupport/std_testcase_io.h":18:1)
#loc2 = loc("../../../testcasesupport/std_testcase_io.h":18:33)
#loc3 = loc("../../../testcasesupport/std_testcase_io.h":14:1)
#loc4 = loc("../../../testcasesupport/std_testcase_io.h":14:33)
#loc5 = loc("CWE127_Buffer_Underread__CWE839_negative_51b.c":34:23)
#loc6 = loc("CWE127_Buffer_Underread__CWE839_negative_51b.c":22:1)
#loc7 = loc("CWE127_Buffer_Underread__CWE839_negative_51b.c":37:1)
#loc10 = loc("CWE127_Buffer_Underread__CWE839_negative_51b.c":23:1)
#loc11 = loc("CWE127_Buffer_Underread__CWE839_negative_51b.c":24:5)
#loc12 = loc("CWE127_Buffer_Underread__CWE839_negative_51b.c":36:5)
#loc13 = loc("CWE127_Buffer_Underread__CWE839_negative_51b.c":25:9)
#loc14 = loc("CWE127_Buffer_Underread__CWE839_negative_51b.c":25:30)
#loc15 = loc("CWE127_Buffer_Underread__CWE839_negative_51b.c":28:9)
#loc16 = loc("CWE127_Buffer_Underread__CWE839_negative_51b.c":35:9)
#loc17 = loc("CWE127_Buffer_Underread__CWE839_negative_51b.c":28:13)
#loc18 = loc("CWE127_Buffer_Underread__CWE839_negative_51b.c":28:20)
#loc19 = loc("CWE127_Buffer_Underread__CWE839_negative_51b.c":29:9)
#loc20 = loc("CWE127_Buffer_Underread__CWE839_negative_51b.c":31:9)
#loc21 = loc("CWE127_Buffer_Underread__CWE839_negative_51b.c":33:9)
#loc22 = loc("CWE127_Buffer_Underread__CWE839_negative_51b.c":30:33)
#loc23 = loc("CWE127_Buffer_Underread__CWE839_negative_51b.c":30:26)
#loc24 = loc("CWE127_Buffer_Underread__CWE839_negative_51b.c":30:13)
#loc25 = loc("CWE127_Buffer_Underread__CWE839_negative_51b.c":34:13)
#loc26 = loc("CWE127_Buffer_Underread__CWE839_negative_51b.c":44:1)
#loc27 = loc("CWE127_Buffer_Underread__CWE839_negative_51b.c":59:1)
#loc30 = loc("CWE127_Buffer_Underread__CWE839_negative_51b.c":45:1)
#loc31 = loc("CWE127_Buffer_Underread__CWE839_negative_51b.c":46:5)
#loc32 = loc("CWE127_Buffer_Underread__CWE839_negative_51b.c":58:5)
#loc33 = loc("CWE127_Buffer_Underread__CWE839_negative_51b.c":47:9)
#loc34 = loc("CWE127_Buffer_Underread__CWE839_negative_51b.c":47:30)
#loc35 = loc("CWE127_Buffer_Underread__CWE839_negative_51b.c":50:9)
#loc36 = loc("CWE127_Buffer_Underread__CWE839_negative_51b.c":57:9)
#loc37 = loc("CWE127_Buffer_Underread__CWE839_negative_51b.c":50:13)
#loc38 = loc("CWE127_Buffer_Underread__CWE839_negative_51b.c":50:20)
#loc39 = loc("CWE127_Buffer_Underread__CWE839_negative_51b.c":51:9)
#loc40 = loc("CWE127_Buffer_Underread__CWE839_negative_51b.c":53:9)
#loc41 = loc("CWE127_Buffer_Underread__CWE839_negative_51b.c":55:9)
#loc42 = loc("CWE127_Buffer_Underread__CWE839_negative_51b.c":52:33)
#loc43 = loc("CWE127_Buffer_Underread__CWE839_negative_51b.c":52:26)
#loc44 = loc("CWE127_Buffer_Underread__CWE839_negative_51b.c":52:13)
#loc45 = loc("CWE127_Buffer_Underread__CWE839_negative_51b.c":56:23)
#loc46 = loc("CWE127_Buffer_Underread__CWE839_negative_51b.c":56:13)
#loc47 = loc("CWE127_Buffer_Underread__CWE839_negative_51b.c":73:23)
#loc48 = loc("CWE127_Buffer_Underread__CWE839_negative_51b.c":62:1)
#loc49 = loc("CWE127_Buffer_Underread__CWE839_negative_51b.c":76:1)
#loc52 = loc("CWE127_Buffer_Underread__CWE839_negative_51b.c":63:1)
#loc53 = loc("CWE127_Buffer_Underread__CWE839_negative_51b.c":64:5)
#loc54 = loc("CWE127_Buffer_Underread__CWE839_negative_51b.c":75:5)
#loc55 = loc("CWE127_Buffer_Underread__CWE839_negative_51b.c":65:9)
#loc56 = loc("CWE127_Buffer_Underread__CWE839_negative_51b.c":65:30)
#loc57 = loc("CWE127_Buffer_Underread__CWE839_negative_51b.c":67:9)
#loc58 = loc("CWE127_Buffer_Underread__CWE839_negative_51b.c":74:9)
#loc59 = loc("CWE127_Buffer_Underread__CWE839_negative_51b.c":67:13)
#loc60 = loc("CWE127_Buffer_Underread__CWE839_negative_51b.c":67:21)
#loc61 = loc("CWE127_Buffer_Underread__CWE839_negative_51b.c":67:23)
#loc62 = loc("CWE127_Buffer_Underread__CWE839_negative_51b.c":67:26)
#loc63 = loc("CWE127_Buffer_Underread__CWE839_negative_51b.c":67:34)
#loc64 = loc("CWE127_Buffer_Underread__CWE839_negative_51b.c":67:36)
#loc65 = loc("CWE127_Buffer_Underread__CWE839_negative_51b.c":68:9)
#loc66 = loc("CWE127_Buffer_Underread__CWE839_negative_51b.c":70:9)
#loc67 = loc("CWE127_Buffer_Underread__CWE839_negative_51b.c":72:9)
#loc68 = loc("CWE127_Buffer_Underread__CWE839_negative_51b.c":69:33)
#loc69 = loc("CWE127_Buffer_Underread__CWE839_negative_51b.c":69:26)
#loc70 = loc("CWE127_Buffer_Underread__CWE839_negative_51b.c":69:13)
#loc71 = loc("CWE127_Buffer_Underread__CWE839_negative_51b.c":73:13)
#loc72 = loc(fused[#loc1, #loc2])
#loc73 = loc(fused[#loc3, #loc4])
#loc74 = loc(fused[#loc6, #loc7])
#loc76 = loc(fused[#loc11, #loc12])
#loc77 = loc(fused[#loc13, #loc14])
#loc78 = loc(fused[#loc15, #loc16])
#loc79 = loc(fused[#loc17, #loc18])
#loc80 = loc(fused[#loc19, #loc20, #loc21, #loc16])
#loc81 = loc(fused[#loc26, #loc27])
#loc83 = loc(fused[#loc31, #loc32])
#loc84 = loc(fused[#loc33, #loc34])
#loc85 = loc(fused[#loc35, #loc36])
#loc86 = loc(fused[#loc37, #loc38])
#loc87 = loc(fused[#loc39, #loc40, #loc41, #loc36])
#loc88 = loc(fused[#loc48, #loc49])
#loc90 = loc(fused[#loc53, #loc54])
#loc91 = loc(fused[#loc55, #loc56])
#loc92 = loc(fused[#loc57, #loc58])
#loc93 = loc(fused[#loc59, #loc60])
#loc94 = loc(fused[#loc62, #loc64])
#loc95 = loc(fused[#loc65, #loc66, #loc67, #loc58])
