!s32i = !cir.int<s, 32>
!s64i = !cir.int<s, 64>
!s8i = !cir.int<s, 8>
!u32i = !cir.int<u, 32>
!void = !cir.void
#fn_attr = #cir<extra({inline = #cir.inline<no>, nothrow = #cir.nothrow, optnone = #cir.optnone})>
#fn_attr1 = #cir<extra({nothrow = #cir.nothrow})>
#loc47 = loc("CWE369_Divide_by_Zero__int_zero_divide_06.c":161:10)
#loc48 = loc("CWE369_Divide_by_Zero__int_zero_divide_06.c":161:14)
#loc49 = loc("CWE369_Divide_by_Zero__int_zero_divide_06.c":161:20)
#loc50 = loc("CWE369_Divide_by_Zero__int_zero_divide_06.c":161:32)
#loc200 = loc(fused[#loc47, #loc48])
#loc201 = loc(fused[#loc49, #loc50])
module @"/home/ladisgin/git_proj/juliet-c/testcases/CWE369_Divide_by_Zero/s02/CWE369_Divide_by_Zero__int_zero_divide_06.c" attributes {cir.lang = #cir.lang<c>, cir.sob = #cir.signed_overflow_behavior<undefined>, cir.triple = "x86_64-unknown-linux-gnu", dlti.dl_spec = #dlti.dl_spec<f128 = dense<128> : vector<2xi64>, !llvm.ptr<270> = dense<32> : vector<4xi64>, f64 = dense<64> : vector<2xi64>, f16 = dense<16> : vector<2xi64>, i128 = dense<128> : vector<2xi64>, i64 = dense<64> : vector<2xi64>, !llvm.ptr<271> = dense<32> : vector<4xi64>, !llvm.ptr<272> = dense<64> : vector<4xi64>, !llvm.ptr = dense<64> : vector<4xi64>, f80 = dense<128> : vector<2xi64>, i32 = dense<32> : vector<2xi64>, i16 = dense<16> : vector<2xi64>, i8 = dense<8> : vector<2xi64>, i1 = dense<8> : vector<2xi64>, "dlti.endianness" = "little", "dlti.stack_alignment" = 128 : i64>} {
  cir.func private @printIntLine(!s32i) loc(#loc179)
  cir.func no_proto @CWE369_Divide_by_Zero__int_zero_divide_06_bad() extra(#fn_attr) {
    %0 = cir.alloca !s32i, !cir.ptr<!s32i>, ["data"] {alignment = 4 : i64} loc(#loc181)
    %1 = cir.const #cir.int<1> : !s32i loc(#loc7)
    %2 = cir.unary(minus, %1) : !s32i, !s32i loc(#loc8)
    cir.store %2, %0 : !s32i, !cir.ptr<!s32i> loc(#loc182)
    cir.br ^bb1 loc(#loc183)
  ^bb1:  // pred: ^bb0
    %3 = cir.const #cir.int<5> : !s32i loc(#loc12)
    %4 = cir.const #cir.int<5> : !s32i loc(#loc13)
    %5 = cir.cmp(eq, %3, %4) : !s32i, !cir.bool loc(#loc184)
    cir.brcond %5 ^bb2, ^bb3 loc(#loc185)
  ^bb2:  // pred: ^bb1
    %6 = cir.const #cir.int<0> : !s32i loc(#loc15)
    cir.store %6, %0 : !s32i, !cir.ptr<!s32i> loc(#loc186)
    cir.br ^bb3 loc(#loc11)
  ^bb3:  // 2 preds: ^bb1, ^bb2
    cir.br ^bb4 loc(#loc11)
  ^bb4:  // pred: ^bb3
    cir.br ^bb5 loc(#loc187)
  ^bb5:  // pred: ^bb4
    %7 = cir.const #cir.int<5> : !s32i loc(#loc19)
    %8 = cir.const #cir.int<5> : !s32i loc(#loc20)
    %9 = cir.cmp(eq, %7, %8) : !s32i, !cir.bool loc(#loc188)
    cir.brcond %9 ^bb6, ^bb7 loc(#loc189)
  ^bb6:  // pred: ^bb5
    %10 = cir.const #cir.int<100> : !s32i loc(#loc22)
    %11 = cir.load %0 : !cir.ptr<!s32i>, !s32i loc(#loc23)
    %12 = cir.binop(div, %10, %11) : !s32i loc(#loc190)
    cir.call @printIntLine(%12) : (!s32i) -> () loc(#loc24)
    cir.br ^bb7 loc(#loc18)
  ^bb7:  // 2 preds: ^bb5, ^bb6
    cir.br ^bb8 loc(#loc18)
  ^bb8:  // pred: ^bb7
    cir.return loc(#loc4)
  } loc(#loc180)
  cir.func no_proto @CWE369_Divide_by_Zero__int_zero_divide_06_good() extra(#fn_attr) {
    %0 = cir.get_global @goodB2G1 : !cir.ptr<!cir.func<!void ()>> loc(#loc192)
    cir.call %0() : (!cir.ptr<!cir.func<!void ()>>) -> () loc(#loc27)
    %1 = cir.get_global @goodB2G2 : !cir.ptr<!cir.func<!void ()>> loc(#loc193)
    cir.call %1() : (!cir.ptr<!cir.func<!void ()>>) -> () loc(#loc29)
    %2 = cir.get_global @goodG2B1 : !cir.ptr<!cir.func<!void ()>> loc(#loc194)
    cir.call %2() : (!cir.ptr<!cir.func<!void ()>>) -> () loc(#loc31)
    %3 = cir.get_global @goodG2B2 : !cir.ptr<!cir.func<!void ()>> loc(#loc195)
    cir.call %3() : (!cir.ptr<!cir.func<!void ()>>) -> () loc(#loc33)
    cir.return loc(#loc26)
  } loc(#loc191)
  cir.func private @srand(!u32i) extra(#fn_attr1) loc(#loc196)
  cir.func private @time(!cir.ptr<!s64i>) -> !s64i extra(#fn_attr1) loc(#loc197)
  cir.func private @printLine(!cir.ptr<!s8i>) loc(#loc198)
  cir.global "private" constant cir_private dsolocal @".str" = #cir.const_array<"Calling good()...\00" : !cir.array<!s8i x 18>> : !cir.array<!s8i x 18> {alignment = 1 : i64} loc(#loc41)
  cir.global "private" constant cir_private dsolocal @".str.1" = #cir.const_array<"Finished good()\00" : !cir.array<!s8i x 16>> : !cir.array<!s8i x 16> {alignment = 1 : i64} loc(#loc42)
  cir.global "private" constant cir_private dsolocal @".str.2" = #cir.const_array<"Calling bad()...\00" : !cir.array<!s8i x 17>> : !cir.array<!s8i x 17> {alignment = 1 : i64} loc(#loc43)
  cir.global "private" constant cir_private dsolocal @".str.3" = #cir.const_array<"Finished bad()\00" : !cir.array<!s8i x 15>> : !cir.array<!s8i x 15> {alignment = 1 : i64} loc(#loc44)
  cir.func @main(%arg0: !s32i loc(fused[#loc47, #loc48]), %arg1: !cir.ptr<!cir.ptr<!s8i>> loc(fused[#loc49, #loc50])) -> !s32i extra(#fn_attr) {
    %0 = cir.alloca !s32i, !cir.ptr<!s32i>, ["argc", init] {alignment = 4 : i64} loc(#loc200)
    %1 = cir.alloca !cir.ptr<!cir.ptr<!s8i>>, !cir.ptr<!cir.ptr<!cir.ptr<!s8i>>>, ["argv", init] {alignment = 8 : i64} loc(#loc201)
    %2 = cir.alloca !s32i, !cir.ptr<!s32i>, ["__retval"] {alignment = 4 : i64} loc(#loc46)
    cir.store %arg0, %0 : !s32i, !cir.ptr<!s32i> loc(#loc51)
    cir.store %arg1, %1 : !cir.ptr<!cir.ptr<!s8i>>, !cir.ptr<!cir.ptr<!cir.ptr<!s8i>>> loc(#loc51)
    %3 = cir.const #cir.ptr<null> : !cir.ptr<!s64i> loc(#loc52)
    %4 = cir.call @time(%3) : (!cir.ptr<!s64i>) -> !s64i extra(#fn_attr1) loc(#loc53)
    %5 = cir.cast(integral, %4 : !s64i), !u32i loc(#loc53)
    cir.call @srand(%5) : (!u32i) -> () extra(#fn_attr1) loc(#loc54)
    %6 = cir.get_global @".str" : !cir.ptr<!cir.array<!s8i x 18>> loc(#loc41)
    %7 = cir.cast(array_to_ptrdecay, %6 : !cir.ptr<!cir.array<!s8i x 18>>), !cir.ptr<!s8i> loc(#loc41)
    cir.call @printLine(%7) : (!cir.ptr<!s8i>) -> () loc(#loc55)
    %8 = cir.get_global @CWE369_Divide_by_Zero__int_zero_divide_06_good : !cir.ptr<!cir.func<!void ()>> loc(#loc202)
    cir.call @CWE369_Divide_by_Zero__int_zero_divide_06_good() : () -> () loc(#loc56)
    %9 = cir.get_global @".str.1" : !cir.ptr<!cir.array<!s8i x 16>> loc(#loc42)
    %10 = cir.cast(array_to_ptrdecay, %9 : !cir.ptr<!cir.array<!s8i x 16>>), !cir.ptr<!s8i> loc(#loc42)
    cir.call @printLine(%10) : (!cir.ptr<!s8i>) -> () loc(#loc58)
    %11 = cir.get_global @".str.2" : !cir.ptr<!cir.array<!s8i x 17>> loc(#loc43)
    %12 = cir.cast(array_to_ptrdecay, %11 : !cir.ptr<!cir.array<!s8i x 17>>), !cir.ptr<!s8i> loc(#loc43)
    cir.call @printLine(%12) : (!cir.ptr<!s8i>) -> () loc(#loc59)
    %13 = cir.get_global @CWE369_Divide_by_Zero__int_zero_divide_06_bad : !cir.ptr<!cir.func<!void ()>> loc(#loc203)
    cir.call @CWE369_Divide_by_Zero__int_zero_divide_06_bad() : () -> () loc(#loc60)
    %14 = cir.get_global @".str.3" : !cir.ptr<!cir.array<!s8i x 15>> loc(#loc44)
    %15 = cir.cast(array_to_ptrdecay, %14 : !cir.ptr<!cir.array<!s8i x 15>>), !cir.ptr<!s8i> loc(#loc44)
    cir.call @printLine(%15) : (!cir.ptr<!s8i>) -> () loc(#loc62)
    %16 = cir.const #cir.int<0> : !s32i loc(#loc63)
    cir.store %16, %2 : !s32i, !cir.ptr<!s32i> loc(#loc204)
    %17 = cir.load %2 : !cir.ptr<!s32i>, !s32i loc(#loc204)
    cir.return %17 : !s32i loc(#loc204)
  } loc(#loc199)
  cir.global "private" constant cir_private dsolocal @".str.4" = #cir.const_array<"Benign, fixed string\00" : !cir.array<!s8i x 21>> : !cir.array<!s8i x 21> {alignment = 1 : i64} loc(#loc65)
  cir.global "private" constant cir_private dsolocal @".str.5" = #cir.const_array<"This would result in a divide by zero\00" : !cir.array<!s8i x 38>> : !cir.array<!s8i x 38> {alignment = 1 : i64} loc(#loc66)
  cir.func no_proto internal private @goodB2G1() extra(#fn_attr) {
    %0 = cir.alloca !s32i, !cir.ptr<!s32i>, ["data"] {alignment = 4 : i64} loc(#loc206)
    %1 = cir.const #cir.int<1> : !s32i loc(#loc71)
    %2 = cir.unary(minus, %1) : !s32i, !s32i loc(#loc72)
    cir.store %2, %0 : !s32i, !cir.ptr<!s32i> loc(#loc207)
    cir.br ^bb1 loc(#loc208)
  ^bb1:  // pred: ^bb0
    %3 = cir.const #cir.int<5> : !s32i loc(#loc76)
    %4 = cir.const #cir.int<5> : !s32i loc(#loc77)
    %5 = cir.cmp(eq, %3, %4) : !s32i, !cir.bool loc(#loc209)
    cir.brcond %5 ^bb2, ^bb3 loc(#loc210)
  ^bb2:  // pred: ^bb1
    %6 = cir.const #cir.int<0> : !s32i loc(#loc79)
    cir.store %6, %0 : !s32i, !cir.ptr<!s32i> loc(#loc211)
    cir.br ^bb3 loc(#loc75)
  ^bb3:  // 2 preds: ^bb1, ^bb2
    cir.br ^bb4 loc(#loc75)
  ^bb4:  // pred: ^bb3
    cir.br ^bb5 loc(#loc212)
  ^bb5:  // pred: ^bb4
    %7 = cir.const #cir.int<5> : !s32i loc(#loc83)
    %8 = cir.const #cir.int<5> : !s32i loc(#loc84)
    %9 = cir.cmp(ne, %7, %8) : !s32i, !cir.bool loc(#loc213)
    cir.brcond %9 ^bb6, ^bb7 loc(#loc214)
  ^bb6:  // pred: ^bb5
    %10 = cir.get_global @".str.4" : !cir.ptr<!cir.array<!s8i x 21>> loc(#loc65)
    %11 = cir.cast(array_to_ptrdecay, %10 : !cir.ptr<!cir.array<!s8i x 21>>), !cir.ptr<!s8i> loc(#loc65)
    cir.call @printLine(%11) : (!cir.ptr<!s8i>) -> () loc(#loc88)
    cir.br ^bb13 loc(#loc86)
  ^bb7:  // pred: ^bb5
    cir.br ^bb8 loc(#loc215)
  ^bb8:  // pred: ^bb7
    %12 = cir.load %0 : !cir.ptr<!s32i>, !s32i loc(#loc91)
    %13 = cir.const #cir.int<0> : !s32i loc(#loc92)
    %14 = cir.cmp(ne, %12, %13) : !s32i, !cir.bool loc(#loc216)
    cir.brcond %14 ^bb9, ^bb10 loc(#loc217)
  ^bb9:  // pred: ^bb8
    %15 = cir.const #cir.int<100> : !s32i loc(#loc96)
    %16 = cir.load %0 : !cir.ptr<!s32i>, !s32i loc(#loc97)
    %17 = cir.binop(div, %15, %16) : !s32i loc(#loc218)
    cir.call @printIntLine(%17) : (!s32i) -> () loc(#loc98)
    cir.br ^bb11 loc(#loc94)
  ^bb10:  // pred: ^bb8
    %18 = cir.get_global @".str.5" : !cir.ptr<!cir.array<!s8i x 38>> loc(#loc66)
    %19 = cir.cast(array_to_ptrdecay, %18 : !cir.ptr<!cir.array<!s8i x 38>>), !cir.ptr<!s8i> loc(#loc66)
    cir.call @printLine(%19) : (!cir.ptr<!s8i>) -> () loc(#loc99)
    cir.br ^bb11 loc(#loc90)
  ^bb11:  // 2 preds: ^bb9, ^bb10
    cir.br ^bb12 loc(#loc90)
  ^bb12:  // pred: ^bb11
    cir.br ^bb13 loc(#loc82)
  ^bb13:  // 2 preds: ^bb6, ^bb12
    cir.br ^bb14 loc(#loc82)
  ^bb14:  // pred: ^bb13
    cir.return loc(#loc68)
  } loc(#loc205)
  cir.func no_proto internal private @goodB2G2() extra(#fn_attr) {
    %0 = cir.alloca !s32i, !cir.ptr<!s32i>, ["data"] {alignment = 4 : i64} loc(#loc220)
    %1 = cir.const #cir.int<1> : !s32i loc(#loc104)
    %2 = cir.unary(minus, %1) : !s32i, !s32i loc(#loc105)
    cir.store %2, %0 : !s32i, !cir.ptr<!s32i> loc(#loc221)
    cir.br ^bb1 loc(#loc222)
  ^bb1:  // pred: ^bb0
    %3 = cir.const #cir.int<5> : !s32i loc(#loc109)
    %4 = cir.const #cir.int<5> : !s32i loc(#loc110)
    %5 = cir.cmp(eq, %3, %4) : !s32i, !cir.bool loc(#loc223)
    cir.brcond %5 ^bb2, ^bb3 loc(#loc224)
  ^bb2:  // pred: ^bb1
    %6 = cir.const #cir.int<0> : !s32i loc(#loc112)
    cir.store %6, %0 : !s32i, !cir.ptr<!s32i> loc(#loc225)
    cir.br ^bb3 loc(#loc108)
  ^bb3:  // 2 preds: ^bb1, ^bb2
    cir.br ^bb4 loc(#loc108)
  ^bb4:  // pred: ^bb3
    cir.br ^bb5 loc(#loc226)
  ^bb5:  // pred: ^bb4
    %7 = cir.const #cir.int<5> : !s32i loc(#loc116)
    %8 = cir.const #cir.int<5> : !s32i loc(#loc117)
    %9 = cir.cmp(eq, %7, %8) : !s32i, !cir.bool loc(#loc227)
    cir.brcond %9 ^bb6, ^bb12 loc(#loc228)
  ^bb6:  // pred: ^bb5
    cir.br ^bb7 loc(#loc229)
  ^bb7:  // pred: ^bb6
    %10 = cir.load %0 : !cir.ptr<!s32i>, !s32i loc(#loc121)
    %11 = cir.const #cir.int<0> : !s32i loc(#loc122)
    %12 = cir.cmp(ne, %10, %11) : !s32i, !cir.bool loc(#loc230)
    cir.brcond %12 ^bb8, ^bb9 loc(#loc231)
  ^bb8:  // pred: ^bb7
    %13 = cir.const #cir.int<100> : !s32i loc(#loc126)
    %14 = cir.load %0 : !cir.ptr<!s32i>, !s32i loc(#loc127)
    %15 = cir.binop(div, %13, %14) : !s32i loc(#loc232)
    cir.call @printIntLine(%15) : (!s32i) -> () loc(#loc128)
    cir.br ^bb10 loc(#loc124)
  ^bb9:  // pred: ^bb7
    %16 = cir.get_global @".str.5" : !cir.ptr<!cir.array<!s8i x 38>> loc(#loc129)
    %17 = cir.cast(array_to_ptrdecay, %16 : !cir.ptr<!cir.array<!s8i x 38>>), !cir.ptr<!s8i> loc(#loc129)
    cir.call @printLine(%17) : (!cir.ptr<!s8i>) -> () loc(#loc130)
    cir.br ^bb10 loc(#loc120)
  ^bb10:  // 2 preds: ^bb8, ^bb9
    cir.br ^bb11 loc(#loc120)
  ^bb11:  // pred: ^bb10
    cir.br ^bb12 loc(#loc115)
  ^bb12:  // 2 preds: ^bb5, ^bb11
    cir.br ^bb13 loc(#loc115)
  ^bb13:  // pred: ^bb12
    cir.return loc(#loc101)
  } loc(#loc219)
  cir.func no_proto internal private @goodG2B1() extra(#fn_attr) {
    %0 = cir.alloca !s32i, !cir.ptr<!s32i>, ["data"] {alignment = 4 : i64} loc(#loc234)
    %1 = cir.const #cir.int<1> : !s32i loc(#loc135)
    %2 = cir.unary(minus, %1) : !s32i, !s32i loc(#loc136)
    cir.store %2, %0 : !s32i, !cir.ptr<!s32i> loc(#loc235)
    cir.br ^bb1 loc(#loc236)
  ^bb1:  // pred: ^bb0
    %3 = cir.const #cir.int<5> : !s32i loc(#loc140)
    %4 = cir.const #cir.int<5> : !s32i loc(#loc141)
    %5 = cir.cmp(ne, %3, %4) : !s32i, !cir.bool loc(#loc237)
    cir.brcond %5 ^bb2, ^bb3 loc(#loc238)
  ^bb2:  // pred: ^bb1
    %6 = cir.get_global @".str.4" : !cir.ptr<!cir.array<!s8i x 21>> loc(#loc145)
    %7 = cir.cast(array_to_ptrdecay, %6 : !cir.ptr<!cir.array<!s8i x 21>>), !cir.ptr<!s8i> loc(#loc145)
    cir.call @printLine(%7) : (!cir.ptr<!s8i>) -> () loc(#loc146)
    cir.br ^bb4 loc(#loc143)
  ^bb3:  // pred: ^bb1
    %8 = cir.const #cir.int<7> : !s32i loc(#loc147)
    cir.store %8, %0 : !s32i, !cir.ptr<!s32i> loc(#loc239)
    cir.br ^bb4 loc(#loc139)
  ^bb4:  // 2 preds: ^bb2, ^bb3
    cir.br ^bb5 loc(#loc139)
  ^bb5:  // pred: ^bb4
    cir.br ^bb6 loc(#loc240)
  ^bb6:  // pred: ^bb5
    %9 = cir.const #cir.int<5> : !s32i loc(#loc151)
    %10 = cir.const #cir.int<5> : !s32i loc(#loc152)
    %11 = cir.cmp(eq, %9, %10) : !s32i, !cir.bool loc(#loc241)
    cir.brcond %11 ^bb7, ^bb8 loc(#loc242)
  ^bb7:  // pred: ^bb6
    %12 = cir.const #cir.int<100> : !s32i loc(#loc154)
    %13 = cir.load %0 : !cir.ptr<!s32i>, !s32i loc(#loc155)
    %14 = cir.binop(div, %12, %13) : !s32i loc(#loc243)
    cir.call @printIntLine(%14) : (!s32i) -> () loc(#loc156)
    cir.br ^bb8 loc(#loc150)
  ^bb8:  // 2 preds: ^bb6, ^bb7
    cir.br ^bb9 loc(#loc150)
  ^bb9:  // pred: ^bb8
    cir.return loc(#loc132)
  } loc(#loc233)
  cir.func no_proto internal private @goodG2B2() extra(#fn_attr) {
    %0 = cir.alloca !s32i, !cir.ptr<!s32i>, ["data"] {alignment = 4 : i64} loc(#loc245)
    %1 = cir.const #cir.int<1> : !s32i loc(#loc161)
    %2 = cir.unary(minus, %1) : !s32i, !s32i loc(#loc162)
    cir.store %2, %0 : !s32i, !cir.ptr<!s32i> loc(#loc246)
    cir.br ^bb1 loc(#loc247)
  ^bb1:  // pred: ^bb0
    %3 = cir.const #cir.int<5> : !s32i loc(#loc166)
    %4 = cir.const #cir.int<5> : !s32i loc(#loc167)
    %5 = cir.cmp(eq, %3, %4) : !s32i, !cir.bool loc(#loc248)
    cir.brcond %5 ^bb2, ^bb3 loc(#loc249)
  ^bb2:  // pred: ^bb1
    %6 = cir.const #cir.int<7> : !s32i loc(#loc169)
    cir.store %6, %0 : !s32i, !cir.ptr<!s32i> loc(#loc250)
    cir.br ^bb3 loc(#loc165)
  ^bb3:  // 2 preds: ^bb1, ^bb2
    cir.br ^bb4 loc(#loc165)
  ^bb4:  // pred: ^bb3
    cir.br ^bb5 loc(#loc251)
  ^bb5:  // pred: ^bb4
    %7 = cir.const #cir.int<5> : !s32i loc(#loc173)
    %8 = cir.const #cir.int<5> : !s32i loc(#loc174)
    %9 = cir.cmp(eq, %7, %8) : !s32i, !cir.bool loc(#loc252)
    cir.brcond %9 ^bb6, ^bb7 loc(#loc253)
  ^bb6:  // pred: ^bb5
    %10 = cir.const #cir.int<100> : !s32i loc(#loc176)
    %11 = cir.load %0 : !cir.ptr<!s32i>, !s32i loc(#loc177)
    %12 = cir.binop(div, %10, %11) : !s32i loc(#loc254)
    cir.call @printIntLine(%12) : (!s32i) -> () loc(#loc178)
    cir.br ^bb7 loc(#loc172)
  ^bb7:  // 2 preds: ^bb5, ^bb6
    cir.br ^bb8 loc(#loc172)
  ^bb8:  // pred: ^bb7
    cir.return loc(#loc158)
  } loc(#loc244)
} loc(#loc)
#loc = loc("/home/ladisgin/git_proj/juliet-c/testcases/CWE369_Divide_by_Zero/s02/CWE369_Divide_by_Zero__int_zero_divide_06.c":0:0)
#loc1 = loc("../../../testcasesupport/std_testcase_io.h":18:1)
#loc2 = loc("../../../testcasesupport/std_testcase_io.h":18:33)
#loc3 = loc("CWE369_Divide_by_Zero__int_zero_divide_06.c":27:1)
#loc4 = loc("CWE369_Divide_by_Zero__int_zero_divide_06.c":42:1)
#loc5 = loc("CWE369_Divide_by_Zero__int_zero_divide_06.c":29:5)
#loc6 = loc("CWE369_Divide_by_Zero__int_zero_divide_06.c":29:9)
#loc7 = loc("CWE369_Divide_by_Zero__int_zero_divide_06.c":31:13)
#loc8 = loc("CWE369_Divide_by_Zero__int_zero_divide_06.c":31:12)
#loc9 = loc("CWE369_Divide_by_Zero__int_zero_divide_06.c":31:5)
#loc10 = loc("CWE369_Divide_by_Zero__int_zero_divide_06.c":32:5)
#loc11 = loc("CWE369_Divide_by_Zero__int_zero_divide_06.c":36:5)
#loc12 = loc("CWE369_Divide_by_Zero__int_zero_divide_06.c":32:8)
#loc13 = loc("CWE369_Divide_by_Zero__int_zero_divide_06.c":32:27)
#loc14 = loc("CWE369_Divide_by_Zero__int_zero_divide_06.c":33:5)
#loc15 = loc("CWE369_Divide_by_Zero__int_zero_divide_06.c":35:16)
#loc16 = loc("CWE369_Divide_by_Zero__int_zero_divide_06.c":35:9)
#loc17 = loc("CWE369_Divide_by_Zero__int_zero_divide_06.c":37:5)
#loc18 = loc("CWE369_Divide_by_Zero__int_zero_divide_06.c":41:5)
#loc19 = loc("CWE369_Divide_by_Zero__int_zero_divide_06.c":37:8)
#loc20 = loc("CWE369_Divide_by_Zero__int_zero_divide_06.c":37:27)
#loc21 = loc("CWE369_Divide_by_Zero__int_zero_divide_06.c":38:5)
#loc22 = loc("CWE369_Divide_by_Zero__int_zero_divide_06.c":40:22)
#loc23 = loc("CWE369_Divide_by_Zero__int_zero_divide_06.c":40:28)
#loc24 = loc("CWE369_Divide_by_Zero__int_zero_divide_06.c":40:9)
#loc25 = loc("CWE369_Divide_by_Zero__int_zero_divide_06.c":144:1)
#loc26 = loc("CWE369_Divide_by_Zero__int_zero_divide_06.c":150:1)
#loc27 = loc("CWE369_Divide_by_Zero__int_zero_divide_06.c":146:5)
#loc28 = loc("CWE369_Divide_by_Zero__int_zero_divide_06.c":146:14)
#loc29 = loc("CWE369_Divide_by_Zero__int_zero_divide_06.c":147:5)
#loc30 = loc("CWE369_Divide_by_Zero__int_zero_divide_06.c":147:14)
#loc31 = loc("CWE369_Divide_by_Zero__int_zero_divide_06.c":148:5)
#loc32 = loc("CWE369_Divide_by_Zero__int_zero_divide_06.c":148:14)
#loc33 = loc("CWE369_Divide_by_Zero__int_zero_divide_06.c":149:5)
#loc34 = loc("CWE369_Divide_by_Zero__int_zero_divide_06.c":149:14)
#loc35 = loc("/usr/include/stdlib.h":575:1)
#loc36 = loc("/usr/include/stdlib.h":575:41)
#loc37 = loc("/usr/include/time.h":76:1)
#loc38 = loc("/usr/include/time.h":76:38)
#loc39 = loc("../../../testcasesupport/std_testcase_io.h":14:1)
#loc40 = loc("../../../testcasesupport/std_testcase_io.h":14:33)
#loc41 = loc("CWE369_Divide_by_Zero__int_zero_divide_06.c":166:15)
#loc42 = loc("CWE369_Divide_by_Zero__int_zero_divide_06.c":168:15)
#loc43 = loc("CWE369_Divide_by_Zero__int_zero_divide_06.c":171:15)
#loc44 = loc("CWE369_Divide_by_Zero__int_zero_divide_06.c":173:15)
#loc45 = loc("CWE369_Divide_by_Zero__int_zero_divide_06.c":161:1)
#loc46 = loc("CWE369_Divide_by_Zero__int_zero_divide_06.c":176:1)
#loc51 = loc("CWE369_Divide_by_Zero__int_zero_divide_06.c":162:1)
#loc52 = loc("CWE369_Divide_by_Zero__int_zero_divide_06.c":164:27)
#loc53 = loc("CWE369_Divide_by_Zero__int_zero_divide_06.c":164:22)
#loc54 = loc("CWE369_Divide_by_Zero__int_zero_divide_06.c":164:5)
#loc55 = loc("CWE369_Divide_by_Zero__int_zero_divide_06.c":166:5)
#loc56 = loc("CWE369_Divide_by_Zero__int_zero_divide_06.c":167:5)
#loc57 = loc("CWE369_Divide_by_Zero__int_zero_divide_06.c":167:52)
#loc58 = loc("CWE369_Divide_by_Zero__int_zero_divide_06.c":168:5)
#loc59 = loc("CWE369_Divide_by_Zero__int_zero_divide_06.c":171:5)
#loc60 = loc("CWE369_Divide_by_Zero__int_zero_divide_06.c":172:5)
#loc61 = loc("CWE369_Divide_by_Zero__int_zero_divide_06.c":172:51)
#loc62 = loc("CWE369_Divide_by_Zero__int_zero_divide_06.c":173:5)
#loc63 = loc("CWE369_Divide_by_Zero__int_zero_divide_06.c":175:12)
#loc64 = loc("CWE369_Divide_by_Zero__int_zero_divide_06.c":175:5)
#loc65 = loc("CWE369_Divide_by_Zero__int_zero_divide_06.c":62:19)
#loc66 = loc("CWE369_Divide_by_Zero__int_zero_divide_06.c":73:23)
#loc67 = loc("CWE369_Divide_by_Zero__int_zero_divide_06.c":49:1)
#loc68 = loc("CWE369_Divide_by_Zero__int_zero_divide_06.c":76:1)
#loc69 = loc("CWE369_Divide_by_Zero__int_zero_divide_06.c":51:5)
#loc70 = loc("CWE369_Divide_by_Zero__int_zero_divide_06.c":51:9)
#loc71 = loc("CWE369_Divide_by_Zero__int_zero_divide_06.c":53:13)
#loc72 = loc("CWE369_Divide_by_Zero__int_zero_divide_06.c":53:12)
#loc73 = loc("CWE369_Divide_by_Zero__int_zero_divide_06.c":53:5)
#loc74 = loc("CWE369_Divide_by_Zero__int_zero_divide_06.c":54:5)
#loc75 = loc("CWE369_Divide_by_Zero__int_zero_divide_06.c":58:5)
#loc76 = loc("CWE369_Divide_by_Zero__int_zero_divide_06.c":54:8)
#loc77 = loc("CWE369_Divide_by_Zero__int_zero_divide_06.c":54:27)
#loc78 = loc("CWE369_Divide_by_Zero__int_zero_divide_06.c":55:5)
#loc79 = loc("CWE369_Divide_by_Zero__int_zero_divide_06.c":57:16)
#loc80 = loc("CWE369_Divide_by_Zero__int_zero_divide_06.c":57:9)
#loc81 = loc("CWE369_Divide_by_Zero__int_zero_divide_06.c":59:5)
#loc82 = loc("CWE369_Divide_by_Zero__int_zero_divide_06.c":75:5)
#loc83 = loc("CWE369_Divide_by_Zero__int_zero_divide_06.c":59:8)
#loc84 = loc("CWE369_Divide_by_Zero__int_zero_divide_06.c":59:27)
#loc85 = loc("CWE369_Divide_by_Zero__int_zero_divide_06.c":60:5)
#loc86 = loc("CWE369_Divide_by_Zero__int_zero_divide_06.c":63:5)
#loc87 = loc("CWE369_Divide_by_Zero__int_zero_divide_06.c":65:5)
#loc88 = loc("CWE369_Divide_by_Zero__int_zero_divide_06.c":62:9)
#loc89 = loc("CWE369_Divide_by_Zero__int_zero_divide_06.c":67:9)
#loc90 = loc("CWE369_Divide_by_Zero__int_zero_divide_06.c":74:9)
#loc91 = loc("CWE369_Divide_by_Zero__int_zero_divide_06.c":67:13)
#loc92 = loc("CWE369_Divide_by_Zero__int_zero_divide_06.c":67:21)
#loc93 = loc("CWE369_Divide_by_Zero__int_zero_divide_06.c":68:9)
#loc94 = loc("CWE369_Divide_by_Zero__int_zero_divide_06.c":70:9)
#loc95 = loc("CWE369_Divide_by_Zero__int_zero_divide_06.c":72:9)
#loc96 = loc("CWE369_Divide_by_Zero__int_zero_divide_06.c":69:26)
#loc97 = loc("CWE369_Divide_by_Zero__int_zero_divide_06.c":69:32)
#loc98 = loc("CWE369_Divide_by_Zero__int_zero_divide_06.c":69:13)
#loc99 = loc("CWE369_Divide_by_Zero__int_zero_divide_06.c":73:13)
#loc100 = loc("CWE369_Divide_by_Zero__int_zero_divide_06.c":79:1)
#loc101 = loc("CWE369_Divide_by_Zero__int_zero_divide_06.c":101:1)
#loc102 = loc("CWE369_Divide_by_Zero__int_zero_divide_06.c":81:5)
#loc103 = loc("CWE369_Divide_by_Zero__int_zero_divide_06.c":81:9)
#loc104 = loc("CWE369_Divide_by_Zero__int_zero_divide_06.c":83:13)
#loc105 = loc("CWE369_Divide_by_Zero__int_zero_divide_06.c":83:12)
#loc106 = loc("CWE369_Divide_by_Zero__int_zero_divide_06.c":83:5)
#loc107 = loc("CWE369_Divide_by_Zero__int_zero_divide_06.c":84:5)
#loc108 = loc("CWE369_Divide_by_Zero__int_zero_divide_06.c":88:5)
#loc109 = loc("CWE369_Divide_by_Zero__int_zero_divide_06.c":84:8)
#loc110 = loc("CWE369_Divide_by_Zero__int_zero_divide_06.c":84:27)
#loc111 = loc("CWE369_Divide_by_Zero__int_zero_divide_06.c":85:5)
#loc112 = loc("CWE369_Divide_by_Zero__int_zero_divide_06.c":87:16)
#loc113 = loc("CWE369_Divide_by_Zero__int_zero_divide_06.c":87:9)
#loc114 = loc("CWE369_Divide_by_Zero__int_zero_divide_06.c":89:5)
#loc115 = loc("CWE369_Divide_by_Zero__int_zero_divide_06.c":100:5)
#loc116 = loc("CWE369_Divide_by_Zero__int_zero_divide_06.c":89:8)
#loc117 = loc("CWE369_Divide_by_Zero__int_zero_divide_06.c":89:27)
#loc118 = loc("CWE369_Divide_by_Zero__int_zero_divide_06.c":90:5)
#loc119 = loc("CWE369_Divide_by_Zero__int_zero_divide_06.c":92:9)
#loc120 = loc("CWE369_Divide_by_Zero__int_zero_divide_06.c":99:9)
#loc121 = loc("CWE369_Divide_by_Zero__int_zero_divide_06.c":92:13)
#loc122 = loc("CWE369_Divide_by_Zero__int_zero_divide_06.c":92:21)
#loc123 = loc("CWE369_Divide_by_Zero__int_zero_divide_06.c":93:9)
#loc124 = loc("CWE369_Divide_by_Zero__int_zero_divide_06.c":95:9)
#loc125 = loc("CWE369_Divide_by_Zero__int_zero_divide_06.c":97:9)
#loc126 = loc("CWE369_Divide_by_Zero__int_zero_divide_06.c":94:26)
#loc127 = loc("CWE369_Divide_by_Zero__int_zero_divide_06.c":94:32)
#loc128 = loc("CWE369_Divide_by_Zero__int_zero_divide_06.c":94:13)
#loc129 = loc("CWE369_Divide_by_Zero__int_zero_divide_06.c":98:23)
#loc130 = loc("CWE369_Divide_by_Zero__int_zero_divide_06.c":98:13)
#loc131 = loc("CWE369_Divide_by_Zero__int_zero_divide_06.c":104:1)
#loc132 = loc("CWE369_Divide_by_Zero__int_zero_divide_06.c":124:1)
#loc133 = loc("CWE369_Divide_by_Zero__int_zero_divide_06.c":106:5)
#loc134 = loc("CWE369_Divide_by_Zero__int_zero_divide_06.c":106:9)
#loc135 = loc("CWE369_Divide_by_Zero__int_zero_divide_06.c":108:13)
#loc136 = loc("CWE369_Divide_by_Zero__int_zero_divide_06.c":108:12)
#loc137 = loc("CWE369_Divide_by_Zero__int_zero_divide_06.c":108:5)
#loc138 = loc("CWE369_Divide_by_Zero__int_zero_divide_06.c":109:5)
#loc139 = loc("CWE369_Divide_by_Zero__int_zero_divide_06.c":118:5)
#loc140 = loc("CWE369_Divide_by_Zero__int_zero_divide_06.c":109:8)
#loc141 = loc("CWE369_Divide_by_Zero__int_zero_divide_06.c":109:27)
#loc142 = loc("CWE369_Divide_by_Zero__int_zero_divide_06.c":110:5)
#loc143 = loc("CWE369_Divide_by_Zero__int_zero_divide_06.c":113:5)
#loc144 = loc("CWE369_Divide_by_Zero__int_zero_divide_06.c":115:5)
#loc145 = loc("CWE369_Divide_by_Zero__int_zero_divide_06.c":112:19)
#loc146 = loc("CWE369_Divide_by_Zero__int_zero_divide_06.c":112:9)
#loc147 = loc("CWE369_Divide_by_Zero__int_zero_divide_06.c":117:16)
#loc148 = loc("CWE369_Divide_by_Zero__int_zero_divide_06.c":117:9)
#loc149 = loc("CWE369_Divide_by_Zero__int_zero_divide_06.c":119:5)
#loc150 = loc("CWE369_Divide_by_Zero__int_zero_divide_06.c":123:5)
#loc151 = loc("CWE369_Divide_by_Zero__int_zero_divide_06.c":119:8)
#loc152 = loc("CWE369_Divide_by_Zero__int_zero_divide_06.c":119:27)
#loc153 = loc("CWE369_Divide_by_Zero__int_zero_divide_06.c":120:5)
#loc154 = loc("CWE369_Divide_by_Zero__int_zero_divide_06.c":122:22)
#loc155 = loc("CWE369_Divide_by_Zero__int_zero_divide_06.c":122:28)
#loc156 = loc("CWE369_Divide_by_Zero__int_zero_divide_06.c":122:9)
#loc157 = loc("CWE369_Divide_by_Zero__int_zero_divide_06.c":127:1)
#loc158 = loc("CWE369_Divide_by_Zero__int_zero_divide_06.c":142:1)
#loc159 = loc("CWE369_Divide_by_Zero__int_zero_divide_06.c":129:5)
#loc160 = loc("CWE369_Divide_by_Zero__int_zero_divide_06.c":129:9)
#loc161 = loc("CWE369_Divide_by_Zero__int_zero_divide_06.c":131:13)
#loc162 = loc("CWE369_Divide_by_Zero__int_zero_divide_06.c":131:12)
#loc163 = loc("CWE369_Divide_by_Zero__int_zero_divide_06.c":131:5)
#loc164 = loc("CWE369_Divide_by_Zero__int_zero_divide_06.c":132:5)
#loc165 = loc("CWE369_Divide_by_Zero__int_zero_divide_06.c":136:5)
#loc166 = loc("CWE369_Divide_by_Zero__int_zero_divide_06.c":132:8)
#loc167 = loc("CWE369_Divide_by_Zero__int_zero_divide_06.c":132:27)
#loc168 = loc("CWE369_Divide_by_Zero__int_zero_divide_06.c":133:5)
#loc169 = loc("CWE369_Divide_by_Zero__int_zero_divide_06.c":135:16)
#loc170 = loc("CWE369_Divide_by_Zero__int_zero_divide_06.c":135:9)
#loc171 = loc("CWE369_Divide_by_Zero__int_zero_divide_06.c":137:5)
#loc172 = loc("CWE369_Divide_by_Zero__int_zero_divide_06.c":141:5)
#loc173 = loc("CWE369_Divide_by_Zero__int_zero_divide_06.c":137:8)
#loc174 = loc("CWE369_Divide_by_Zero__int_zero_divide_06.c":137:27)
#loc175 = loc("CWE369_Divide_by_Zero__int_zero_divide_06.c":138:5)
#loc176 = loc("CWE369_Divide_by_Zero__int_zero_divide_06.c":140:22)
#loc177 = loc("CWE369_Divide_by_Zero__int_zero_divide_06.c":140:28)
#loc178 = loc("CWE369_Divide_by_Zero__int_zero_divide_06.c":140:9)
#loc179 = loc(fused[#loc1, #loc2])
#loc180 = loc(fused[#loc3, #loc4])
#loc181 = loc(fused[#loc5, #loc6])
#loc182 = loc(fused[#loc9, #loc7])
#loc183 = loc(fused[#loc10, #loc11])
#loc184 = loc(fused[#loc12, #loc13])
#loc185 = loc(fused[#loc14, #loc11])
#loc186 = loc(fused[#loc16, #loc15])
#loc187 = loc(fused[#loc17, #loc18])
#loc188 = loc(fused[#loc19, #loc20])
#loc189 = loc(fused[#loc21, #loc18])
#loc190 = loc(fused[#loc22, #loc23])
#loc191 = loc(fused[#loc25, #loc26])
#loc192 = loc(fused[#loc27, #loc28])
#loc193 = loc(fused[#loc29, #loc30])
#loc194 = loc(fused[#loc31, #loc32])
#loc195 = loc(fused[#loc33, #loc34])
#loc196 = loc(fused[#loc35, #loc36])
#loc197 = loc(fused[#loc37, #loc38])
#loc198 = loc(fused[#loc39, #loc40])
#loc199 = loc(fused[#loc45, #loc46])
#loc202 = loc(fused[#loc56, #loc57])
#loc203 = loc(fused[#loc60, #loc61])
#loc204 = loc(fused[#loc64, #loc63])
#loc205 = loc(fused[#loc67, #loc68])
#loc206 = loc(fused[#loc69, #loc70])
#loc207 = loc(fused[#loc73, #loc71])
#loc208 = loc(fused[#loc74, #loc75])
#loc209 = loc(fused[#loc76, #loc77])
#loc210 = loc(fused[#loc78, #loc75])
#loc211 = loc(fused[#loc80, #loc79])
#loc212 = loc(fused[#loc81, #loc82])
#loc213 = loc(fused[#loc83, #loc84])
#loc214 = loc(fused[#loc85, #loc86, #loc87, #loc82])
#loc215 = loc(fused[#loc89, #loc90])
#loc216 = loc(fused[#loc91, #loc92])
#loc217 = loc(fused[#loc93, #loc94, #loc95, #loc90])
#loc218 = loc(fused[#loc96, #loc97])
#loc219 = loc(fused[#loc100, #loc101])
#loc220 = loc(fused[#loc102, #loc103])
#loc221 = loc(fused[#loc106, #loc104])
#loc222 = loc(fused[#loc107, #loc108])
#loc223 = loc(fused[#loc109, #loc110])
#loc224 = loc(fused[#loc111, #loc108])
#loc225 = loc(fused[#loc113, #loc112])
#loc226 = loc(fused[#loc114, #loc115])
#loc227 = loc(fused[#loc116, #loc117])
#loc228 = loc(fused[#loc118, #loc115])
#loc229 = loc(fused[#loc119, #loc120])
#loc230 = loc(fused[#loc121, #loc122])
#loc231 = loc(fused[#loc123, #loc124, #loc125, #loc120])
#loc232 = loc(fused[#loc126, #loc127])
#loc233 = loc(fused[#loc131, #loc132])
#loc234 = loc(fused[#loc133, #loc134])
#loc235 = loc(fused[#loc137, #loc135])
#loc236 = loc(fused[#loc138, #loc139])
#loc237 = loc(fused[#loc140, #loc141])
#loc238 = loc(fused[#loc142, #loc143, #loc144, #loc139])
#loc239 = loc(fused[#loc148, #loc147])
#loc240 = loc(fused[#loc149, #loc150])
#loc241 = loc(fused[#loc151, #loc152])
#loc242 = loc(fused[#loc153, #loc150])
#loc243 = loc(fused[#loc154, #loc155])
#loc244 = loc(fused[#loc157, #loc158])
#loc245 = loc(fused[#loc159, #loc160])
#loc246 = loc(fused[#loc163, #loc161])
#loc247 = loc(fused[#loc164, #loc165])
#loc248 = loc(fused[#loc166, #loc167])
#loc249 = loc(fused[#loc168, #loc165])
#loc250 = loc(fused[#loc170, #loc169])
#loc251 = loc(fused[#loc171, #loc172])
#loc252 = loc(fused[#loc173, #loc174])
#loc253 = loc(fused[#loc175, #loc172])
#loc254 = loc(fused[#loc176, #loc177])
