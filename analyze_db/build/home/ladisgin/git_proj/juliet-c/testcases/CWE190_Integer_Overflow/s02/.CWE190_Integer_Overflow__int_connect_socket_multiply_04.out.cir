!s32i = !cir.int<s, 32>
!s64i = !cir.int<s, 64>
!s8i = !cir.int<s, 8>
!u16i = !cir.int<u, 16>
!u32i = !cir.int<u, 32>
!u64i = !cir.int<u, 64>
!u8i = !cir.int<u, 8>
!void = !cir.void
#false = #cir.bool<false> : !cir.bool
#fn_attr = #cir<extra({nothrow = #cir.nothrow})>
#fn_attr1 = #cir<extra({inline = #cir.inline<no>, nothrow = #cir.nothrow, optnone = #cir.optnone})>
#loc151 = loc("CWE190_Integer_Overflow__int_connect_socket_multiply_04.c":366:10)
#loc152 = loc("CWE190_Integer_Overflow__int_connect_socket_multiply_04.c":366:14)
#loc153 = loc("CWE190_Integer_Overflow__int_connect_socket_multiply_04.c":366:20)
#loc154 = loc("CWE190_Integer_Overflow__int_connect_socket_multiply_04.c":366:32)
#true = #cir.bool<true> : !cir.bool
!ty_in_addr = !cir.struct<struct "in_addr" {!u32i} #cir.record.decl.ast>
#loc527 = loc(fused[#loc151, #loc152])
#loc528 = loc(fused[#loc153, #loc154])
!ty_sockaddr = !cir.struct<struct "sockaddr" {!u16i, !cir.array<!s8i x 14>} #cir.record.decl.ast>
!ty_sockaddr_in = !cir.struct<struct "sockaddr_in" {!u16i, !u16i, !ty_in_addr, !cir.array<!u8i x 8>}>
module @"/home/ladisgin/git_proj/juliet-c/testcases/CWE190_Integer_Overflow/s02/CWE190_Integer_Overflow__int_connect_socket_multiply_04.c" attributes {cir.lang = #cir.lang<c>, cir.sob = #cir.signed_overflow_behavior<undefined>, cir.triple = "x86_64-unknown-linux-gnu", dlti.dl_spec = #dlti.dl_spec<i128 = dense<128> : vector<2xi64>, f80 = dense<128> : vector<2xi64>, !llvm.ptr = dense<64> : vector<4xi64>, i1 = dense<8> : vector<2xi64>, i8 = dense<8> : vector<2xi64>, i16 = dense<16> : vector<2xi64>, i32 = dense<32> : vector<2xi64>, f64 = dense<64> : vector<2xi64>, f16 = dense<16> : vector<2xi64>, !llvm.ptr<270> = dense<32> : vector<4xi64>, !llvm.ptr<271> = dense<32> : vector<4xi64>, f128 = dense<128> : vector<2xi64>, !llvm.ptr<272> = dense<64> : vector<4xi64>, i64 = dense<64> : vector<2xi64>, "dlti.stack_alignment" = 128 : i64, "dlti.endianness" = "little">} {
  cir.func private @socket(!s32i, !s32i, !s32i) -> !s32i extra(#fn_attr) loc(#loc467)
  cir.func private @inet_addr(!cir.ptr<!s8i>) -> !u32i extra(#fn_attr) loc(#loc468)
  cir.global "private" constant cir_private dsolocal @".str" = #cir.const_array<"127.0.0.1\00" : !cir.array<!s8i x 10>> : !cir.array<!s8i x 10> {alignment = 1 : i64} loc(#loc5)
  cir.func private @htons(!u16i) -> !u16i extra(#fn_attr) loc(#loc469)
  cir.func private @connect(!s32i, !cir.ptr<!ty_sockaddr>, !u32i) -> !s32i loc(#loc470)
  cir.func private @recv(!s32i, !cir.ptr<!void>, !u64i, !s32i) -> !s64i loc(#loc471)
  cir.func private @atoi(!cir.ptr<!s8i>) -> !s32i extra(#fn_attr) loc(#loc472)
  cir.func private @close(!s32i) -> !s32i loc(#loc473)
  cir.func private @printIntLine(!s32i) loc(#loc474)
  cir.func no_proto @CWE190_Integer_Overflow__int_connect_socket_multiply_04_bad() extra(#fn_attr1) {
    %0 = cir.alloca !s32i, !cir.ptr<!s32i>, ["data"] {alignment = 4 : i64} loc(#loc476)
    %1 = cir.const #cir.int<0> : !s32i loc(#loc22)
    cir.store %1, %0 : !s32i, !cir.ptr<!s32i> loc(#loc477)
    cir.scope {
      %2 = cir.const #cir.int<1> : !s32i loc(#loc26)
      %3 = cir.cast(int_to_bool, %2 : !s32i), !cir.bool loc(#loc26)
      cir.if %3 {
        cir.scope {
          %4 = cir.alloca !s32i, !cir.ptr<!s32i>, ["recvResult"] {alignment = 4 : i64} loc(#loc481)
          %5 = cir.alloca !ty_sockaddr_in, !cir.ptr<!ty_sockaddr_in>, ["service"] {alignment = 4 : i64} loc(#loc482)
          %6 = cir.alloca !s32i, !cir.ptr<!s32i>, ["connectSocket", init] {alignment = 4 : i64} loc(#loc483)
          %7 = cir.alloca !cir.array<!s8i x 14>, !cir.ptr<!cir.array<!s8i x 14>>, ["inputBuffer"] {alignment = 1 : i64} loc(#loc484)
          %8 = cir.const #cir.int<1> : !s32i loc(#loc35)
          %9 = cir.unary(minus, %8) : !s32i, !s32i loc(#loc35)
          cir.store %9, %6 : !s32i, !cir.ptr<!s32i> loc(#loc483)
          cir.scope {
            cir.do {
              %10 = cir.const #cir.int<2> : !s32i loc(#loc40)
              %11 = cir.const #cir.int<1> : !s32i loc(#loc41)
              %12 = cir.const #cir.int<6> : !s32i loc(#loc42)
              %13 = cir.call @socket(%10, %11, %12) : (!s32i, !s32i, !s32i) -> !s32i extra(#fn_attr) loc(#loc43)
              cir.store %13, %6 : !s32i, !cir.ptr<!s32i> loc(#loc486)
              cir.scope {
                %52 = cir.load %6 : !cir.ptr<!s32i>, !s32i loc(#loc48)
                %53 = cir.const #cir.int<1> : !s32i loc(#loc49)
                %54 = cir.unary(minus, %53) : !s32i, !s32i loc(#loc49)
                %55 = cir.cmp(eq, %52, %54) : !s32i, !cir.bool loc(#loc488)
                cir.if %55 {
                  cir.break loc(#loc51)
                } loc(#loc489)
              } loc(#loc487)
              %14 = cir.cast(bitcast, %5 : !cir.ptr<!ty_sockaddr_in>), !cir.ptr<!void> loc(#loc490)
              %15 = cir.const #cir.int<0> : !s32i loc(#loc54)
              %16 = cir.const #cir.int<16> : !u64i loc(#loc491)
              cir.libc.memset %16 bytes from %14 set to %15 : !cir.ptr<!void>, !s32i, !u64i loc(#loc492)
              %17 = cir.const #cir.int<2> : !s32i loc(#loc59)
              %18 = cir.cast(integral, %17 : !s32i), !u16i loc(#loc59)
              %19 = cir.get_member %5[0] {name = "sin_family"} : !cir.ptr<!ty_sockaddr_in> -> !cir.ptr<!u16i> loc(#loc60)
              cir.store %18, %19 : !u16i, !cir.ptr<!u16i> loc(#loc493)
              %20 = cir.get_global @".str" : !cir.ptr<!cir.array<!s8i x 10>> loc(#loc5)
              %21 = cir.cast(array_to_ptrdecay, %20 : !cir.ptr<!cir.array<!s8i x 10>>), !cir.ptr<!s8i> loc(#loc5)
              %22 = cir.call @inet_addr(%21) : (!cir.ptr<!s8i>) -> !u32i extra(#fn_attr) loc(#loc62)
              %23 = cir.get_member %5[2] {name = "sin_addr"} : !cir.ptr<!ty_sockaddr_in> -> !cir.ptr<!ty_in_addr> loc(#loc63)
              %24 = cir.get_member %23[0] {name = "s_addr"} : !cir.ptr<!ty_in_addr> -> !cir.ptr<!u32i> loc(#loc64)
              cir.store %22, %24 : !u32i, !cir.ptr<!u32i> loc(#loc494)
              %25 = cir.const #cir.int<27015> : !s32i loc(#loc67)
              %26 = cir.cast(integral, %25 : !s32i), !u16i loc(#loc67)
              %27 = cir.call @htons(%26) : (!u16i) -> !u16i extra(#fn_attr) loc(#loc68)
              %28 = cir.get_member %5[1] {name = "sin_port"} : !cir.ptr<!ty_sockaddr_in> -> !cir.ptr<!u16i> loc(#loc69)
              cir.store %27, %28 : !u16i, !cir.ptr<!u16i> loc(#loc495)
              cir.scope {
                %52 = cir.load %6 : !cir.ptr<!s32i>, !s32i loc(#loc74)
                %53 = cir.cast(bitcast, %5 : !cir.ptr<!ty_sockaddr_in>), !cir.ptr<!ty_sockaddr> loc(#loc497)
                %54 = cir.const #cir.int<16> : !u64i loc(#loc498)
                %55 = cir.cast(integral, %54 : !u64i), !u32i loc(#loc498)
                %56 = cir.call @connect(%52, %53, %55) : (!s32i, !cir.ptr<!ty_sockaddr>, !u32i) -> !s32i loc(#loc79)
                %57 = cir.const #cir.int<1> : !s32i loc(#loc80)
                %58 = cir.unary(minus, %57) : !s32i, !s32i loc(#loc80)
                %59 = cir.cmp(eq, %56, %58) : !s32i, !cir.bool loc(#loc499)
                cir.if %59 {
                  cir.break loc(#loc82)
                } loc(#loc500)
              } loc(#loc496)
              %29 = cir.load %6 : !cir.ptr<!s32i>, !s32i loc(#loc83)
              %30 = cir.cast(array_to_ptrdecay, %7 : !cir.ptr<!cir.array<!s8i x 14>>), !cir.ptr<!s8i> loc(#loc84)
              %31 = cir.cast(bitcast, %30 : !cir.ptr<!s8i>), !cir.ptr<!void> loc(#loc84)
              %32 = cir.const #cir.int<3> : !s32i loc(#loc85)
              %33 = cir.cast(integral, %32 : !s32i), !u64i loc(#loc85)
              %34 = cir.const #cir.int<4> : !u64i loc(#loc85)
              %35 = cir.binop(mul, %33, %34) : !u64i loc(#loc85)
              %36 = cir.const #cir.int<2> : !s32i loc(#loc85)
              %37 = cir.cast(integral, %36 : !s32i), !u64i loc(#loc85)
              %38 = cir.binop(add, %35, %37) : !u64i loc(#loc85)
              %39 = cir.const #cir.int<1> : !s32i loc(#loc86)
              %40 = cir.cast(integral, %39 : !s32i), !u64i loc(#loc86)
              %41 = cir.binop(sub, %38, %40) : !u64i loc(#loc501)
              %42 = cir.const #cir.int<0> : !s32i loc(#loc87)
              %43 = cir.call @recv(%29, %31, %41, %42) : (!s32i, !cir.ptr<!void>, !u64i, !s32i) -> !s64i loc(#loc88)
              %44 = cir.cast(integral, %43 : !s64i), !s32i loc(#loc88)
              cir.store %44, %4 : !s32i, !cir.ptr<!s32i> loc(#loc502)
              cir.scope {
                %52 = cir.load %4 : !cir.ptr<!s32i>, !s32i loc(#loc93)
                %53 = cir.const #cir.int<1> : !s32i loc(#loc94)
                %54 = cir.unary(minus, %53) : !s32i, !s32i loc(#loc94)
                %55 = cir.cmp(eq, %52, %54) : !s32i, !cir.bool loc(#loc504)
                %56 = cir.ternary(%55, true {
                  %57 = cir.const #true loc(#loc95)
                  cir.yield %57 : !cir.bool loc(#loc95)
                }, false {
                  %57 = cir.load %4 : !cir.ptr<!s32i>, !s32i loc(#loc96)
                  %58 = cir.const #cir.int<0> : !s32i loc(#loc97)
                  %59 = cir.cmp(eq, %57, %58) : !s32i, !cir.bool loc(#loc505)
                  %60 = cir.ternary(%59, true {
                    %61 = cir.const #true loc(#loc95)
                    cir.yield %61 : !cir.bool loc(#loc95)
                  }, false {
                    %61 = cir.const #false loc(#loc95)
                    cir.yield %61 : !cir.bool loc(#loc95)
                  }) : (!cir.bool) -> !cir.bool loc(#loc95)
                  cir.yield %60 : !cir.bool loc(#loc95)
                }) : (!cir.bool) -> !cir.bool loc(#loc95)
                cir.if %56 {
                  cir.break loc(#loc99)
                } loc(#loc506)
              } loc(#loc503)
              %45 = cir.const #cir.int<0> : !s32i loc(#loc100)
              %46 = cir.cast(integral, %45 : !s32i), !s8i loc(#loc100)
              %47 = cir.load %4 : !cir.ptr<!s32i>, !s32i loc(#loc101)
              %48 = cir.cast(array_to_ptrdecay, %7 : !cir.ptr<!cir.array<!s8i x 14>>), !cir.ptr<!s8i> loc(#loc102)
              %49 = cir.ptr_stride(%48 : !cir.ptr<!s8i>, %47 : !s32i), !cir.ptr<!s8i> loc(#loc102)
              cir.store %46, %49 : !s8i, !cir.ptr<!s8i> loc(#loc507)
              %50 = cir.cast(array_to_ptrdecay, %7 : !cir.ptr<!cir.array<!s8i x 14>>), !cir.ptr<!s8i> loc(#loc103)
              %51 = cir.call @atoi(%50) : (!cir.ptr<!s8i>) -> !s32i extra(#fn_attr) loc(#loc104)
              cir.store %51, %0 : !s32i, !cir.ptr<!s32i> loc(#loc508)
              cir.yield loc(#loc39)
            } while {
              %10 = cir.const #cir.int<0> : !s32i loc(#loc107)
              %11 = cir.cast(int_to_bool, %10 : !s32i), !cir.bool loc(#loc107)
              cir.condition(%11) loc(#loc107)
            } loc(#loc485)
          } loc(#loc485)
          cir.scope {
            %10 = cir.load %6 : !cir.ptr<!s32i>, !s32i loc(#loc110)
            %11 = cir.const #cir.int<1> : !s32i loc(#loc111)
            %12 = cir.unary(minus, %11) : !s32i, !s32i loc(#loc111)
            %13 = cir.cmp(ne, %10, %12) : !s32i, !cir.bool loc(#loc510)
            cir.if %13 {
              %14 = cir.load %6 : !cir.ptr<!s32i>, !s32i loc(#loc113)
              %15 = cir.call @close(%14) : (!s32i) -> !s32i loc(#loc114)
            } loc(#loc511)
          } loc(#loc509)
        } loc(#loc480)
      } loc(#loc479)
    } loc(#loc478)
    cir.scope {
      %2 = cir.const #cir.int<1> : !s32i loc(#loc117)
      %3 = cir.cast(int_to_bool, %2 : !s32i), !cir.bool loc(#loc117)
      cir.if %3 {
        cir.scope {
          %4 = cir.load %0 : !cir.ptr<!s32i>, !s32i loc(#loc121)
          %5 = cir.const #cir.int<0> : !s32i loc(#loc122)
          %6 = cir.cmp(gt, %4, %5) : !s32i, !cir.bool loc(#loc515)
          cir.if %6 {
            %7 = cir.alloca !s32i, !cir.ptr<!s32i>, ["result", init] {alignment = 4 : i64} loc(#loc517)
            %8 = cir.load %0 : !cir.ptr<!s32i>, !s32i loc(#loc126)
            %9 = cir.const #cir.int<2> : !s32i loc(#loc125)
            %10 = cir.binop(mul, %8, %9) nsw : !s32i loc(#loc126)
            cir.store %10, %7 : !s32i, !cir.ptr<!s32i> loc(#loc517)
            %11 = cir.load %7 : !cir.ptr<!s32i>, !s32i loc(#loc127)
            cir.call @printIntLine(%11) : (!s32i) -> () loc(#loc128)
          } loc(#loc516)
        } loc(#loc514)
      } loc(#loc513)
    } loc(#loc512)
    cir.return loc(#loc19)
  } loc(#loc475)
  cir.func no_proto @CWE190_Integer_Overflow__int_connect_socket_multiply_04_good() extra(#fn_attr1) {
    %0 = cir.get_global @goodB2G1 : !cir.ptr<!cir.func<!void ()>> loc(#loc519)
    cir.call %0() : (!cir.ptr<!cir.func<!void ()>>) -> () loc(#loc131)
    %1 = cir.get_global @goodB2G2 : !cir.ptr<!cir.func<!void ()>> loc(#loc520)
    cir.call %1() : (!cir.ptr<!cir.func<!void ()>>) -> () loc(#loc133)
    %2 = cir.get_global @goodG2B1 : !cir.ptr<!cir.func<!void ()>> loc(#loc521)
    cir.call %2() : (!cir.ptr<!cir.func<!void ()>>) -> () loc(#loc135)
    %3 = cir.get_global @goodG2B2 : !cir.ptr<!cir.func<!void ()>> loc(#loc522)
    cir.call %3() : (!cir.ptr<!cir.func<!void ()>>) -> () loc(#loc137)
    cir.return loc(#loc130)
  } loc(#loc518)
  cir.func private @srand(!u32i) extra(#fn_attr) loc(#loc523)
  cir.func private @time(!cir.ptr<!s64i>) -> !s64i extra(#fn_attr) loc(#loc524)
  cir.func private @printLine(!cir.ptr<!s8i>) loc(#loc525)
  cir.global "private" constant cir_private dsolocal @".str.1" = #cir.const_array<"Calling good()...\00" : !cir.array<!s8i x 18>> : !cir.array<!s8i x 18> {alignment = 1 : i64} loc(#loc145)
  cir.global "private" constant cir_private dsolocal @".str.2" = #cir.const_array<"Finished good()\00" : !cir.array<!s8i x 16>> : !cir.array<!s8i x 16> {alignment = 1 : i64} loc(#loc146)
  cir.global "private" constant cir_private dsolocal @".str.3" = #cir.const_array<"Calling bad()...\00" : !cir.array<!s8i x 17>> : !cir.array<!s8i x 17> {alignment = 1 : i64} loc(#loc147)
  cir.global "private" constant cir_private dsolocal @".str.4" = #cir.const_array<"Finished bad()\00" : !cir.array<!s8i x 15>> : !cir.array<!s8i x 15> {alignment = 1 : i64} loc(#loc148)
  cir.func @main(%arg0: !s32i loc(fused[#loc151, #loc152]), %arg1: !cir.ptr<!cir.ptr<!s8i>> loc(fused[#loc153, #loc154])) -> !s32i extra(#fn_attr1) {
    %0 = cir.alloca !s32i, !cir.ptr<!s32i>, ["argc", init] {alignment = 4 : i64} loc(#loc527)
    %1 = cir.alloca !cir.ptr<!cir.ptr<!s8i>>, !cir.ptr<!cir.ptr<!cir.ptr<!s8i>>>, ["argv", init] {alignment = 8 : i64} loc(#loc528)
    %2 = cir.alloca !s32i, !cir.ptr<!s32i>, ["__retval"] {alignment = 4 : i64} loc(#loc150)
    cir.store %arg0, %0 : !s32i, !cir.ptr<!s32i> loc(#loc155)
    cir.store %arg1, %1 : !cir.ptr<!cir.ptr<!s8i>>, !cir.ptr<!cir.ptr<!cir.ptr<!s8i>>> loc(#loc155)
    %3 = cir.const #cir.ptr<null> : !cir.ptr<!s64i> loc(#loc156)
    %4 = cir.call @time(%3) : (!cir.ptr<!s64i>) -> !s64i extra(#fn_attr) loc(#loc157)
    %5 = cir.cast(integral, %4 : !s64i), !u32i loc(#loc157)
    cir.call @srand(%5) : (!u32i) -> () extra(#fn_attr) loc(#loc158)
    %6 = cir.get_global @".str.1" : !cir.ptr<!cir.array<!s8i x 18>> loc(#loc145)
    %7 = cir.cast(array_to_ptrdecay, %6 : !cir.ptr<!cir.array<!s8i x 18>>), !cir.ptr<!s8i> loc(#loc145)
    cir.call @printLine(%7) : (!cir.ptr<!s8i>) -> () loc(#loc159)
    %8 = cir.get_global @CWE190_Integer_Overflow__int_connect_socket_multiply_04_good : !cir.ptr<!cir.func<!void ()>> loc(#loc529)
    cir.call @CWE190_Integer_Overflow__int_connect_socket_multiply_04_good() : () -> () loc(#loc160)
    %9 = cir.get_global @".str.2" : !cir.ptr<!cir.array<!s8i x 16>> loc(#loc146)
    %10 = cir.cast(array_to_ptrdecay, %9 : !cir.ptr<!cir.array<!s8i x 16>>), !cir.ptr<!s8i> loc(#loc146)
    cir.call @printLine(%10) : (!cir.ptr<!s8i>) -> () loc(#loc162)
    %11 = cir.get_global @".str.3" : !cir.ptr<!cir.array<!s8i x 17>> loc(#loc147)
    %12 = cir.cast(array_to_ptrdecay, %11 : !cir.ptr<!cir.array<!s8i x 17>>), !cir.ptr<!s8i> loc(#loc147)
    cir.call @printLine(%12) : (!cir.ptr<!s8i>) -> () loc(#loc163)
    %13 = cir.get_global @CWE190_Integer_Overflow__int_connect_socket_multiply_04_bad : !cir.ptr<!cir.func<!void ()>> loc(#loc530)
    cir.call @CWE190_Integer_Overflow__int_connect_socket_multiply_04_bad() : () -> () loc(#loc164)
    %14 = cir.get_global @".str.4" : !cir.ptr<!cir.array<!s8i x 15>> loc(#loc148)
    %15 = cir.cast(array_to_ptrdecay, %14 : !cir.ptr<!cir.array<!s8i x 15>>), !cir.ptr<!s8i> loc(#loc148)
    cir.call @printLine(%15) : (!cir.ptr<!s8i>) -> () loc(#loc166)
    %16 = cir.const #cir.int<0> : !s32i loc(#loc167)
    cir.store %16, %2 : !s32i, !cir.ptr<!s32i> loc(#loc531)
    %17 = cir.load %2 : !cir.ptr<!s32i>, !s32i loc(#loc531)
    cir.return %17 : !s32i loc(#loc531)
  } loc(#loc526)
  cir.global "private" constant cir_private dsolocal @".str.5" = #cir.const_array<"Benign, fixed string\00" : !cir.array<!s8i x 21>> : !cir.array<!s8i x 21> {alignment = 1 : i64} loc(#loc169)
  cir.global "private" constant cir_private dsolocal @".str.6" = #cir.const_array<"data value is too large to perform arithmetic safely.\00" : !cir.array<!s8i x 54>> : !cir.array<!s8i x 54> {alignment = 1 : i64} loc(#loc170)
  cir.func no_proto internal private @goodB2G1() extra(#fn_attr1) {
    %0 = cir.alloca !s32i, !cir.ptr<!s32i>, ["data"] {alignment = 4 : i64} loc(#loc533)
    %1 = cir.const #cir.int<0> : !s32i loc(#loc175)
    cir.store %1, %0 : !s32i, !cir.ptr<!s32i> loc(#loc534)
    cir.scope {
      %2 = cir.const #cir.int<1> : !s32i loc(#loc179)
      %3 = cir.cast(int_to_bool, %2 : !s32i), !cir.bool loc(#loc179)
      cir.if %3 {
        cir.scope {
          %4 = cir.alloca !s32i, !cir.ptr<!s32i>, ["recvResult"] {alignment = 4 : i64} loc(#loc538)
          %5 = cir.alloca !ty_sockaddr_in, !cir.ptr<!ty_sockaddr_in>, ["service"] {alignment = 4 : i64} loc(#loc539)
          %6 = cir.alloca !s32i, !cir.ptr<!s32i>, ["connectSocket", init] {alignment = 4 : i64} loc(#loc540)
          %7 = cir.alloca !cir.array<!s8i x 14>, !cir.ptr<!cir.array<!s8i x 14>>, ["inputBuffer"] {alignment = 1 : i64} loc(#loc541)
          %8 = cir.const #cir.int<1> : !s32i loc(#loc188)
          %9 = cir.unary(minus, %8) : !s32i, !s32i loc(#loc188)
          cir.store %9, %6 : !s32i, !cir.ptr<!s32i> loc(#loc540)
          cir.scope {
            cir.do {
              %10 = cir.const #cir.int<2> : !s32i loc(#loc193)
              %11 = cir.const #cir.int<1> : !s32i loc(#loc194)
              %12 = cir.const #cir.int<6> : !s32i loc(#loc195)
              %13 = cir.call @socket(%10, %11, %12) : (!s32i, !s32i, !s32i) -> !s32i extra(#fn_attr) loc(#loc196)
              cir.store %13, %6 : !s32i, !cir.ptr<!s32i> loc(#loc543)
              cir.scope {
                %52 = cir.load %6 : !cir.ptr<!s32i>, !s32i loc(#loc201)
                %53 = cir.const #cir.int<1> : !s32i loc(#loc202)
                %54 = cir.unary(minus, %53) : !s32i, !s32i loc(#loc202)
                %55 = cir.cmp(eq, %52, %54) : !s32i, !cir.bool loc(#loc545)
                cir.if %55 {
                  cir.break loc(#loc204)
                } loc(#loc546)
              } loc(#loc544)
              %14 = cir.cast(bitcast, %5 : !cir.ptr<!ty_sockaddr_in>), !cir.ptr<!void> loc(#loc547)
              %15 = cir.const #cir.int<0> : !s32i loc(#loc207)
              %16 = cir.const #cir.int<16> : !u64i loc(#loc548)
              cir.libc.memset %16 bytes from %14 set to %15 : !cir.ptr<!void>, !s32i, !u64i loc(#loc549)
              %17 = cir.const #cir.int<2> : !s32i loc(#loc212)
              %18 = cir.cast(integral, %17 : !s32i), !u16i loc(#loc212)
              %19 = cir.get_member %5[0] {name = "sin_family"} : !cir.ptr<!ty_sockaddr_in> -> !cir.ptr<!u16i> loc(#loc60)
              cir.store %18, %19 : !u16i, !cir.ptr<!u16i> loc(#loc550)
              %20 = cir.get_global @".str" : !cir.ptr<!cir.array<!s8i x 10>> loc(#loc214)
              %21 = cir.cast(array_to_ptrdecay, %20 : !cir.ptr<!cir.array<!s8i x 10>>), !cir.ptr<!s8i> loc(#loc214)
              %22 = cir.call @inet_addr(%21) : (!cir.ptr<!s8i>) -> !u32i extra(#fn_attr) loc(#loc215)
              %23 = cir.get_member %5[2] {name = "sin_addr"} : !cir.ptr<!ty_sockaddr_in> -> !cir.ptr<!ty_in_addr> loc(#loc63)
              %24 = cir.get_member %23[0] {name = "s_addr"} : !cir.ptr<!ty_in_addr> -> !cir.ptr<!u32i> loc(#loc64)
              cir.store %22, %24 : !u32i, !cir.ptr<!u32i> loc(#loc551)
              %25 = cir.const #cir.int<27015> : !s32i loc(#loc218)
              %26 = cir.cast(integral, %25 : !s32i), !u16i loc(#loc218)
              %27 = cir.call @htons(%26) : (!u16i) -> !u16i extra(#fn_attr) loc(#loc219)
              %28 = cir.get_member %5[1] {name = "sin_port"} : !cir.ptr<!ty_sockaddr_in> -> !cir.ptr<!u16i> loc(#loc69)
              cir.store %27, %28 : !u16i, !cir.ptr<!u16i> loc(#loc552)
              cir.scope {
                %52 = cir.load %6 : !cir.ptr<!s32i>, !s32i loc(#loc224)
                %53 = cir.cast(bitcast, %5 : !cir.ptr<!ty_sockaddr_in>), !cir.ptr<!ty_sockaddr> loc(#loc554)
                %54 = cir.const #cir.int<16> : !u64i loc(#loc555)
                %55 = cir.cast(integral, %54 : !u64i), !u32i loc(#loc555)
                %56 = cir.call @connect(%52, %53, %55) : (!s32i, !cir.ptr<!ty_sockaddr>, !u32i) -> !s32i loc(#loc229)
                %57 = cir.const #cir.int<1> : !s32i loc(#loc230)
                %58 = cir.unary(minus, %57) : !s32i, !s32i loc(#loc230)
                %59 = cir.cmp(eq, %56, %58) : !s32i, !cir.bool loc(#loc556)
                cir.if %59 {
                  cir.break loc(#loc232)
                } loc(#loc557)
              } loc(#loc553)
              %29 = cir.load %6 : !cir.ptr<!s32i>, !s32i loc(#loc233)
              %30 = cir.cast(array_to_ptrdecay, %7 : !cir.ptr<!cir.array<!s8i x 14>>), !cir.ptr<!s8i> loc(#loc234)
              %31 = cir.cast(bitcast, %30 : !cir.ptr<!s8i>), !cir.ptr<!void> loc(#loc234)
              %32 = cir.const #cir.int<3> : !s32i loc(#loc235)
              %33 = cir.cast(integral, %32 : !s32i), !u64i loc(#loc235)
              %34 = cir.const #cir.int<4> : !u64i loc(#loc235)
              %35 = cir.binop(mul, %33, %34) : !u64i loc(#loc235)
              %36 = cir.const #cir.int<2> : !s32i loc(#loc235)
              %37 = cir.cast(integral, %36 : !s32i), !u64i loc(#loc235)
              %38 = cir.binop(add, %35, %37) : !u64i loc(#loc235)
              %39 = cir.const #cir.int<1> : !s32i loc(#loc236)
              %40 = cir.cast(integral, %39 : !s32i), !u64i loc(#loc236)
              %41 = cir.binop(sub, %38, %40) : !u64i loc(#loc558)
              %42 = cir.const #cir.int<0> : !s32i loc(#loc237)
              %43 = cir.call @recv(%29, %31, %41, %42) : (!s32i, !cir.ptr<!void>, !u64i, !s32i) -> !s64i loc(#loc238)
              %44 = cir.cast(integral, %43 : !s64i), !s32i loc(#loc238)
              cir.store %44, %4 : !s32i, !cir.ptr<!s32i> loc(#loc559)
              cir.scope {
                %52 = cir.load %4 : !cir.ptr<!s32i>, !s32i loc(#loc243)
                %53 = cir.const #cir.int<1> : !s32i loc(#loc244)
                %54 = cir.unary(minus, %53) : !s32i, !s32i loc(#loc244)
                %55 = cir.cmp(eq, %52, %54) : !s32i, !cir.bool loc(#loc561)
                %56 = cir.ternary(%55, true {
                  %57 = cir.const #true loc(#loc245)
                  cir.yield %57 : !cir.bool loc(#loc245)
                }, false {
                  %57 = cir.load %4 : !cir.ptr<!s32i>, !s32i loc(#loc246)
                  %58 = cir.const #cir.int<0> : !s32i loc(#loc247)
                  %59 = cir.cmp(eq, %57, %58) : !s32i, !cir.bool loc(#loc562)
                  %60 = cir.ternary(%59, true {
                    %61 = cir.const #true loc(#loc245)
                    cir.yield %61 : !cir.bool loc(#loc245)
                  }, false {
                    %61 = cir.const #false loc(#loc245)
                    cir.yield %61 : !cir.bool loc(#loc245)
                  }) : (!cir.bool) -> !cir.bool loc(#loc245)
                  cir.yield %60 : !cir.bool loc(#loc245)
                }) : (!cir.bool) -> !cir.bool loc(#loc245)
                cir.if %56 {
                  cir.break loc(#loc249)
                } loc(#loc563)
              } loc(#loc560)
              %45 = cir.const #cir.int<0> : !s32i loc(#loc250)
              %46 = cir.cast(integral, %45 : !s32i), !s8i loc(#loc250)
              %47 = cir.load %4 : !cir.ptr<!s32i>, !s32i loc(#loc251)
              %48 = cir.cast(array_to_ptrdecay, %7 : !cir.ptr<!cir.array<!s8i x 14>>), !cir.ptr<!s8i> loc(#loc252)
              %49 = cir.ptr_stride(%48 : !cir.ptr<!s8i>, %47 : !s32i), !cir.ptr<!s8i> loc(#loc252)
              cir.store %46, %49 : !s8i, !cir.ptr<!s8i> loc(#loc564)
              %50 = cir.cast(array_to_ptrdecay, %7 : !cir.ptr<!cir.array<!s8i x 14>>), !cir.ptr<!s8i> loc(#loc253)
              %51 = cir.call @atoi(%50) : (!cir.ptr<!s8i>) -> !s32i extra(#fn_attr) loc(#loc254)
              cir.store %51, %0 : !s32i, !cir.ptr<!s32i> loc(#loc565)
              cir.yield loc(#loc192)
            } while {
              %10 = cir.const #cir.int<0> : !s32i loc(#loc257)
              %11 = cir.cast(int_to_bool, %10 : !s32i), !cir.bool loc(#loc257)
              cir.condition(%11) loc(#loc257)
            } loc(#loc542)
          } loc(#loc542)
          cir.scope {
            %10 = cir.load %6 : !cir.ptr<!s32i>, !s32i loc(#loc260)
            %11 = cir.const #cir.int<1> : !s32i loc(#loc261)
            %12 = cir.unary(minus, %11) : !s32i, !s32i loc(#loc261)
            %13 = cir.cmp(ne, %10, %12) : !s32i, !cir.bool loc(#loc567)
            cir.if %13 {
              %14 = cir.load %6 : !cir.ptr<!s32i>, !s32i loc(#loc263)
              %15 = cir.call @close(%14) : (!s32i) -> !s32i loc(#loc264)
            } loc(#loc568)
          } loc(#loc566)
        } loc(#loc537)
      } loc(#loc536)
    } loc(#loc535)
    cir.scope {
      %2 = cir.const #cir.int<0> : !s32i loc(#loc267)
      %3 = cir.cast(int_to_bool, %2 : !s32i), !cir.bool loc(#loc267)
      cir.if %3 {
        %4 = cir.get_global @".str.5" : !cir.ptr<!cir.array<!s8i x 21>> loc(#loc169)
        %5 = cir.cast(array_to_ptrdecay, %4 : !cir.ptr<!cir.array<!s8i x 21>>), !cir.ptr<!s8i> loc(#loc169)
        cir.call @printLine(%5) : (!cir.ptr<!s8i>) -> () loc(#loc271)
      } else {
        cir.scope {
          %4 = cir.load %0 : !cir.ptr<!s32i>, !s32i loc(#loc274)
          %5 = cir.const #cir.int<0> : !s32i loc(#loc275)
          %6 = cir.cmp(gt, %4, %5) : !s32i, !cir.bool loc(#loc572)
          cir.if %6 {
            cir.scope {
              %7 = cir.load %0 : !cir.ptr<!s32i>, !s32i loc(#loc279)
              %8 = cir.const #cir.int<2147483647> : !s32i loc(#loc280)
              %9 = cir.const #cir.int<2> : !s32i loc(#loc281)
              %10 = cir.binop(div, %8, %9) : !s32i loc(#loc575)
              %11 = cir.cmp(lt, %7, %10) : !s32i, !cir.bool loc(#loc576)
              cir.if %11 {
                %12 = cir.alloca !s32i, !cir.ptr<!s32i>, ["result", init] {alignment = 4 : i64} loc(#loc578)
                %13 = cir.load %0 : !cir.ptr<!s32i>, !s32i loc(#loc288)
                %14 = cir.const #cir.int<2> : !s32i loc(#loc287)
                %15 = cir.binop(mul, %13, %14) nsw : !s32i loc(#loc288)
                cir.store %15, %12 : !s32i, !cir.ptr<!s32i> loc(#loc578)
                %16 = cir.load %12 : !cir.ptr<!s32i>, !s32i loc(#loc289)
                cir.call @printIntLine(%16) : (!s32i) -> () loc(#loc290)
              } else {
                %12 = cir.get_global @".str.6" : !cir.ptr<!cir.array<!s8i x 54>> loc(#loc170)
                %13 = cir.cast(array_to_ptrdecay, %12 : !cir.ptr<!cir.array<!s8i x 54>>), !cir.ptr<!s8i> loc(#loc170)
                cir.call @printLine(%13) : (!cir.ptr<!s8i>) -> () loc(#loc291)
              } loc(#loc577)
            } loc(#loc574)
          } loc(#loc573)
        } loc(#loc571)
      } loc(#loc570)
    } loc(#loc569)
    cir.return loc(#loc172)
  } loc(#loc532)
  cir.func no_proto internal private @goodB2G2() extra(#fn_attr1) {
    %0 = cir.alloca !s32i, !cir.ptr<!s32i>, ["data"] {alignment = 4 : i64} loc(#loc580)
    %1 = cir.const #cir.int<0> : !s32i loc(#loc296)
    cir.store %1, %0 : !s32i, !cir.ptr<!s32i> loc(#loc581)
    cir.scope {
      %2 = cir.const #cir.int<1> : !s32i loc(#loc300)
      %3 = cir.cast(int_to_bool, %2 : !s32i), !cir.bool loc(#loc300)
      cir.if %3 {
        cir.scope {
          %4 = cir.alloca !s32i, !cir.ptr<!s32i>, ["recvResult"] {alignment = 4 : i64} loc(#loc585)
          %5 = cir.alloca !ty_sockaddr_in, !cir.ptr<!ty_sockaddr_in>, ["service"] {alignment = 4 : i64} loc(#loc586)
          %6 = cir.alloca !s32i, !cir.ptr<!s32i>, ["connectSocket", init] {alignment = 4 : i64} loc(#loc587)
          %7 = cir.alloca !cir.array<!s8i x 14>, !cir.ptr<!cir.array<!s8i x 14>>, ["inputBuffer"] {alignment = 1 : i64} loc(#loc588)
          %8 = cir.const #cir.int<1> : !s32i loc(#loc309)
          %9 = cir.unary(minus, %8) : !s32i, !s32i loc(#loc309)
          cir.store %9, %6 : !s32i, !cir.ptr<!s32i> loc(#loc587)
          cir.scope {
            cir.do {
              %10 = cir.const #cir.int<2> : !s32i loc(#loc314)
              %11 = cir.const #cir.int<1> : !s32i loc(#loc315)
              %12 = cir.const #cir.int<6> : !s32i loc(#loc316)
              %13 = cir.call @socket(%10, %11, %12) : (!s32i, !s32i, !s32i) -> !s32i extra(#fn_attr) loc(#loc317)
              cir.store %13, %6 : !s32i, !cir.ptr<!s32i> loc(#loc590)
              cir.scope {
                %52 = cir.load %6 : !cir.ptr<!s32i>, !s32i loc(#loc322)
                %53 = cir.const #cir.int<1> : !s32i loc(#loc323)
                %54 = cir.unary(minus, %53) : !s32i, !s32i loc(#loc323)
                %55 = cir.cmp(eq, %52, %54) : !s32i, !cir.bool loc(#loc592)
                cir.if %55 {
                  cir.break loc(#loc325)
                } loc(#loc593)
              } loc(#loc591)
              %14 = cir.cast(bitcast, %5 : !cir.ptr<!ty_sockaddr_in>), !cir.ptr<!void> loc(#loc594)
              %15 = cir.const #cir.int<0> : !s32i loc(#loc328)
              %16 = cir.const #cir.int<16> : !u64i loc(#loc595)
              cir.libc.memset %16 bytes from %14 set to %15 : !cir.ptr<!void>, !s32i, !u64i loc(#loc596)
              %17 = cir.const #cir.int<2> : !s32i loc(#loc333)
              %18 = cir.cast(integral, %17 : !s32i), !u16i loc(#loc333)
              %19 = cir.get_member %5[0] {name = "sin_family"} : !cir.ptr<!ty_sockaddr_in> -> !cir.ptr<!u16i> loc(#loc60)
              cir.store %18, %19 : !u16i, !cir.ptr<!u16i> loc(#loc597)
              %20 = cir.get_global @".str" : !cir.ptr<!cir.array<!s8i x 10>> loc(#loc335)
              %21 = cir.cast(array_to_ptrdecay, %20 : !cir.ptr<!cir.array<!s8i x 10>>), !cir.ptr<!s8i> loc(#loc335)
              %22 = cir.call @inet_addr(%21) : (!cir.ptr<!s8i>) -> !u32i extra(#fn_attr) loc(#loc336)
              %23 = cir.get_member %5[2] {name = "sin_addr"} : !cir.ptr<!ty_sockaddr_in> -> !cir.ptr<!ty_in_addr> loc(#loc63)
              %24 = cir.get_member %23[0] {name = "s_addr"} : !cir.ptr<!ty_in_addr> -> !cir.ptr<!u32i> loc(#loc64)
              cir.store %22, %24 : !u32i, !cir.ptr<!u32i> loc(#loc598)
              %25 = cir.const #cir.int<27015> : !s32i loc(#loc339)
              %26 = cir.cast(integral, %25 : !s32i), !u16i loc(#loc339)
              %27 = cir.call @htons(%26) : (!u16i) -> !u16i extra(#fn_attr) loc(#loc340)
              %28 = cir.get_member %5[1] {name = "sin_port"} : !cir.ptr<!ty_sockaddr_in> -> !cir.ptr<!u16i> loc(#loc69)
              cir.store %27, %28 : !u16i, !cir.ptr<!u16i> loc(#loc599)
              cir.scope {
                %52 = cir.load %6 : !cir.ptr<!s32i>, !s32i loc(#loc345)
                %53 = cir.cast(bitcast, %5 : !cir.ptr<!ty_sockaddr_in>), !cir.ptr<!ty_sockaddr> loc(#loc601)
                %54 = cir.const #cir.int<16> : !u64i loc(#loc602)
                %55 = cir.cast(integral, %54 : !u64i), !u32i loc(#loc602)
                %56 = cir.call @connect(%52, %53, %55) : (!s32i, !cir.ptr<!ty_sockaddr>, !u32i) -> !s32i loc(#loc350)
                %57 = cir.const #cir.int<1> : !s32i loc(#loc351)
                %58 = cir.unary(minus, %57) : !s32i, !s32i loc(#loc351)
                %59 = cir.cmp(eq, %56, %58) : !s32i, !cir.bool loc(#loc603)
                cir.if %59 {
                  cir.break loc(#loc353)
                } loc(#loc604)
              } loc(#loc600)
              %29 = cir.load %6 : !cir.ptr<!s32i>, !s32i loc(#loc354)
              %30 = cir.cast(array_to_ptrdecay, %7 : !cir.ptr<!cir.array<!s8i x 14>>), !cir.ptr<!s8i> loc(#loc355)
              %31 = cir.cast(bitcast, %30 : !cir.ptr<!s8i>), !cir.ptr<!void> loc(#loc355)
              %32 = cir.const #cir.int<3> : !s32i loc(#loc356)
              %33 = cir.cast(integral, %32 : !s32i), !u64i loc(#loc356)
              %34 = cir.const #cir.int<4> : !u64i loc(#loc356)
              %35 = cir.binop(mul, %33, %34) : !u64i loc(#loc356)
              %36 = cir.const #cir.int<2> : !s32i loc(#loc356)
              %37 = cir.cast(integral, %36 : !s32i), !u64i loc(#loc356)
              %38 = cir.binop(add, %35, %37) : !u64i loc(#loc356)
              %39 = cir.const #cir.int<1> : !s32i loc(#loc357)
              %40 = cir.cast(integral, %39 : !s32i), !u64i loc(#loc357)
              %41 = cir.binop(sub, %38, %40) : !u64i loc(#loc605)
              %42 = cir.const #cir.int<0> : !s32i loc(#loc358)
              %43 = cir.call @recv(%29, %31, %41, %42) : (!s32i, !cir.ptr<!void>, !u64i, !s32i) -> !s64i loc(#loc359)
              %44 = cir.cast(integral, %43 : !s64i), !s32i loc(#loc359)
              cir.store %44, %4 : !s32i, !cir.ptr<!s32i> loc(#loc606)
              cir.scope {
                %52 = cir.load %4 : !cir.ptr<!s32i>, !s32i loc(#loc364)
                %53 = cir.const #cir.int<1> : !s32i loc(#loc365)
                %54 = cir.unary(minus, %53) : !s32i, !s32i loc(#loc365)
                %55 = cir.cmp(eq, %52, %54) : !s32i, !cir.bool loc(#loc608)
                %56 = cir.ternary(%55, true {
                  %57 = cir.const #true loc(#loc366)
                  cir.yield %57 : !cir.bool loc(#loc366)
                }, false {
                  %57 = cir.load %4 : !cir.ptr<!s32i>, !s32i loc(#loc367)
                  %58 = cir.const #cir.int<0> : !s32i loc(#loc368)
                  %59 = cir.cmp(eq, %57, %58) : !s32i, !cir.bool loc(#loc609)
                  %60 = cir.ternary(%59, true {
                    %61 = cir.const #true loc(#loc366)
                    cir.yield %61 : !cir.bool loc(#loc366)
                  }, false {
                    %61 = cir.const #false loc(#loc366)
                    cir.yield %61 : !cir.bool loc(#loc366)
                  }) : (!cir.bool) -> !cir.bool loc(#loc366)
                  cir.yield %60 : !cir.bool loc(#loc366)
                }) : (!cir.bool) -> !cir.bool loc(#loc366)
                cir.if %56 {
                  cir.break loc(#loc370)
                } loc(#loc610)
              } loc(#loc607)
              %45 = cir.const #cir.int<0> : !s32i loc(#loc371)
              %46 = cir.cast(integral, %45 : !s32i), !s8i loc(#loc371)
              %47 = cir.load %4 : !cir.ptr<!s32i>, !s32i loc(#loc372)
              %48 = cir.cast(array_to_ptrdecay, %7 : !cir.ptr<!cir.array<!s8i x 14>>), !cir.ptr<!s8i> loc(#loc373)
              %49 = cir.ptr_stride(%48 : !cir.ptr<!s8i>, %47 : !s32i), !cir.ptr<!s8i> loc(#loc373)
              cir.store %46, %49 : !s8i, !cir.ptr<!s8i> loc(#loc611)
              %50 = cir.cast(array_to_ptrdecay, %7 : !cir.ptr<!cir.array<!s8i x 14>>), !cir.ptr<!s8i> loc(#loc374)
              %51 = cir.call @atoi(%50) : (!cir.ptr<!s8i>) -> !s32i extra(#fn_attr) loc(#loc375)
              cir.store %51, %0 : !s32i, !cir.ptr<!s32i> loc(#loc612)
              cir.yield loc(#loc313)
            } while {
              %10 = cir.const #cir.int<0> : !s32i loc(#loc378)
              %11 = cir.cast(int_to_bool, %10 : !s32i), !cir.bool loc(#loc378)
              cir.condition(%11) loc(#loc378)
            } loc(#loc589)
          } loc(#loc589)
          cir.scope {
            %10 = cir.load %6 : !cir.ptr<!s32i>, !s32i loc(#loc381)
            %11 = cir.const #cir.int<1> : !s32i loc(#loc382)
            %12 = cir.unary(minus, %11) : !s32i, !s32i loc(#loc382)
            %13 = cir.cmp(ne, %10, %12) : !s32i, !cir.bool loc(#loc614)
            cir.if %13 {
              %14 = cir.load %6 : !cir.ptr<!s32i>, !s32i loc(#loc384)
              %15 = cir.call @close(%14) : (!s32i) -> !s32i loc(#loc385)
            } loc(#loc615)
          } loc(#loc613)
        } loc(#loc584)
      } loc(#loc583)
    } loc(#loc582)
    cir.scope {
      %2 = cir.const #cir.int<1> : !s32i loc(#loc388)
      %3 = cir.cast(int_to_bool, %2 : !s32i), !cir.bool loc(#loc388)
      cir.if %3 {
        cir.scope {
          %4 = cir.load %0 : !cir.ptr<!s32i>, !s32i loc(#loc392)
          %5 = cir.const #cir.int<0> : !s32i loc(#loc393)
          %6 = cir.cmp(gt, %4, %5) : !s32i, !cir.bool loc(#loc619)
          cir.if %6 {
            cir.scope {
              %7 = cir.load %0 : !cir.ptr<!s32i>, !s32i loc(#loc397)
              %8 = cir.const #cir.int<2147483647> : !s32i loc(#loc398)
              %9 = cir.const #cir.int<2> : !s32i loc(#loc399)
              %10 = cir.binop(div, %8, %9) : !s32i loc(#loc622)
              %11 = cir.cmp(lt, %7, %10) : !s32i, !cir.bool loc(#loc623)
              cir.if %11 {
                %12 = cir.alloca !s32i, !cir.ptr<!s32i>, ["result", init] {alignment = 4 : i64} loc(#loc625)
                %13 = cir.load %0 : !cir.ptr<!s32i>, !s32i loc(#loc406)
                %14 = cir.const #cir.int<2> : !s32i loc(#loc405)
                %15 = cir.binop(mul, %13, %14) nsw : !s32i loc(#loc406)
                cir.store %15, %12 : !s32i, !cir.ptr<!s32i> loc(#loc625)
                %16 = cir.load %12 : !cir.ptr<!s32i>, !s32i loc(#loc407)
                cir.call @printIntLine(%16) : (!s32i) -> () loc(#loc408)
              } else {
                %12 = cir.get_global @".str.6" : !cir.ptr<!cir.array<!s8i x 54>> loc(#loc409)
                %13 = cir.cast(array_to_ptrdecay, %12 : !cir.ptr<!cir.array<!s8i x 54>>), !cir.ptr<!s8i> loc(#loc409)
                cir.call @printLine(%13) : (!cir.ptr<!s8i>) -> () loc(#loc410)
              } loc(#loc624)
            } loc(#loc621)
          } loc(#loc620)
        } loc(#loc618)
      } loc(#loc617)
    } loc(#loc616)
    cir.return loc(#loc293)
  } loc(#loc579)
  cir.func no_proto internal private @goodG2B1() extra(#fn_attr1) {
    %0 = cir.alloca !s32i, !cir.ptr<!s32i>, ["data"] {alignment = 4 : i64} loc(#loc627)
    %1 = cir.const #cir.int<0> : !s32i loc(#loc415)
    cir.store %1, %0 : !s32i, !cir.ptr<!s32i> loc(#loc628)
    cir.scope {
      %2 = cir.const #cir.int<0> : !s32i loc(#loc419)
      %3 = cir.cast(int_to_bool, %2 : !s32i), !cir.bool loc(#loc419)
      cir.if %3 {
        %4 = cir.get_global @".str.5" : !cir.ptr<!cir.array<!s8i x 21>> loc(#loc423)
        %5 = cir.cast(array_to_ptrdecay, %4 : !cir.ptr<!cir.array<!s8i x 21>>), !cir.ptr<!s8i> loc(#loc423)
        cir.call @printLine(%5) : (!cir.ptr<!s8i>) -> () loc(#loc424)
      } else {
        %4 = cir.const #cir.int<2> : !s32i loc(#loc425)
        cir.store %4, %0 : !s32i, !cir.ptr<!s32i> loc(#loc631)
      } loc(#loc630)
    } loc(#loc629)
    cir.scope {
      %2 = cir.const #cir.int<1> : !s32i loc(#loc429)
      %3 = cir.cast(int_to_bool, %2 : !s32i), !cir.bool loc(#loc429)
      cir.if %3 {
        cir.scope {
          %4 = cir.load %0 : !cir.ptr<!s32i>, !s32i loc(#loc433)
          %5 = cir.const #cir.int<0> : !s32i loc(#loc434)
          %6 = cir.cmp(gt, %4, %5) : !s32i, !cir.bool loc(#loc635)
          cir.if %6 {
            %7 = cir.alloca !s32i, !cir.ptr<!s32i>, ["result", init] {alignment = 4 : i64} loc(#loc637)
            %8 = cir.load %0 : !cir.ptr<!s32i>, !s32i loc(#loc438)
            %9 = cir.const #cir.int<2> : !s32i loc(#loc437)
            %10 = cir.binop(mul, %8, %9) nsw : !s32i loc(#loc438)
            cir.store %10, %7 : !s32i, !cir.ptr<!s32i> loc(#loc637)
            %11 = cir.load %7 : !cir.ptr<!s32i>, !s32i loc(#loc439)
            cir.call @printIntLine(%11) : (!s32i) -> () loc(#loc440)
          } loc(#loc636)
        } loc(#loc634)
      } loc(#loc633)
    } loc(#loc632)
    cir.return loc(#loc412)
  } loc(#loc626)
  cir.func no_proto internal private @goodG2B2() extra(#fn_attr1) {
    %0 = cir.alloca !s32i, !cir.ptr<!s32i>, ["data"] {alignment = 4 : i64} loc(#loc639)
    %1 = cir.const #cir.int<0> : !s32i loc(#loc445)
    cir.store %1, %0 : !s32i, !cir.ptr<!s32i> loc(#loc640)
    cir.scope {
      %2 = cir.const #cir.int<1> : !s32i loc(#loc449)
      %3 = cir.cast(int_to_bool, %2 : !s32i), !cir.bool loc(#loc449)
      cir.if %3 {
        %4 = cir.const #cir.int<2> : !s32i loc(#loc451)
        cir.store %4, %0 : !s32i, !cir.ptr<!s32i> loc(#loc643)
      } loc(#loc642)
    } loc(#loc641)
    cir.scope {
      %2 = cir.const #cir.int<1> : !s32i loc(#loc455)
      %3 = cir.cast(int_to_bool, %2 : !s32i), !cir.bool loc(#loc455)
      cir.if %3 {
        cir.scope {
          %4 = cir.load %0 : !cir.ptr<!s32i>, !s32i loc(#loc459)
          %5 = cir.const #cir.int<0> : !s32i loc(#loc460)
          %6 = cir.cmp(gt, %4, %5) : !s32i, !cir.bool loc(#loc647)
          cir.if %6 {
            %7 = cir.alloca !s32i, !cir.ptr<!s32i>, ["result", init] {alignment = 4 : i64} loc(#loc649)
            %8 = cir.load %0 : !cir.ptr<!s32i>, !s32i loc(#loc464)
            %9 = cir.const #cir.int<2> : !s32i loc(#loc463)
            %10 = cir.binop(mul, %8, %9) nsw : !s32i loc(#loc464)
            cir.store %10, %7 : !s32i, !cir.ptr<!s32i> loc(#loc649)
            %11 = cir.load %7 : !cir.ptr<!s32i>, !s32i loc(#loc465)
            cir.call @printIntLine(%11) : (!s32i) -> () loc(#loc466)
          } loc(#loc648)
        } loc(#loc646)
      } loc(#loc645)
    } loc(#loc644)
    cir.return loc(#loc442)
  } loc(#loc638)
} loc(#loc)
#loc = loc("/home/ladisgin/git_proj/juliet-c/testcases/CWE190_Integer_Overflow/s02/CWE190_Integer_Overflow__int_connect_socket_multiply_04.c":0:0)
#loc1 = loc("/usr/include/sys/socket.h":102:1)
#loc2 = loc("/usr/include/sys/socket.h":102:62)
#loc3 = loc("/usr/include/arpa/inet.h":34:1)
#loc4 = loc("/usr/include/arpa/inet.h":34:47)
#loc5 = loc("CWE190_Integer_Overflow__int_connect_socket_multiply_04.c":83:53)
#loc6 = loc("/usr/include/netinet/in.h":404:1)
#loc7 = loc("/usr/include/netinet/in.h":405:40)
#loc8 = loc("/usr/include/sys/socket.h":126:1)
#loc9 = loc("/usr/include/sys/socket.h":126:75)
#loc10 = loc("/usr/include/sys/socket.h":145:1)
#loc11 = loc("/usr/include/sys/socket.h":145:68)
#loc12 = loc("/usr/include/stdlib.h":105:1)
#loc13 = loc("/usr/include/stdlib.h":106:33)
#loc14 = loc("/usr/include/unistd.h":358:1)
#loc15 = loc("/usr/include/unistd.h":358:27)
#loc16 = loc("../../../testcasesupport/std_testcase_io.h":18:1)
#loc17 = loc("../../../testcasesupport/std_testcase_io.h":18:33)
#loc18 = loc("CWE190_Integer_Overflow__int_connect_socket_multiply_04.c":50:1)
#loc19 = loc("CWE190_Integer_Overflow__int_connect_socket_multiply_04.c":123:1)
#loc20 = loc("CWE190_Integer_Overflow__int_connect_socket_multiply_04.c":52:5)
#loc21 = loc("CWE190_Integer_Overflow__int_connect_socket_multiply_04.c":52:9)
#loc22 = loc("CWE190_Integer_Overflow__int_connect_socket_multiply_04.c":54:12)
#loc23 = loc("CWE190_Integer_Overflow__int_connect_socket_multiply_04.c":54:5)
#loc24 = loc("CWE190_Integer_Overflow__int_connect_socket_multiply_04.c":55:5)
#loc25 = loc("CWE190_Integer_Overflow__int_connect_socket_multiply_04.c":113:5)
#loc26 = loc("CWE190_Integer_Overflow__int_connect_socket_multiply_04.c":55:8)
#loc27 = loc("CWE190_Integer_Overflow__int_connect_socket_multiply_04.c":56:5)
#loc28 = loc("CWE190_Integer_Overflow__int_connect_socket_multiply_04.c":57:9)
#loc29 = loc("CWE190_Integer_Overflow__int_connect_socket_multiply_04.c":112:9)
#loc30 = loc("CWE190_Integer_Overflow__int_connect_socket_multiply_04.c":62:13)
#loc31 = loc("CWE190_Integer_Overflow__int_connect_socket_multiply_04.c":62:17)
#loc32 = loc("CWE190_Integer_Overflow__int_connect_socket_multiply_04.c":63:13)
#loc33 = loc("CWE190_Integer_Overflow__int_connect_socket_multiply_04.c":63:32)
#loc34 = loc("CWE190_Integer_Overflow__int_connect_socket_multiply_04.c":64:13)
#loc35 = loc("CWE190_Integer_Overflow__int_connect_socket_multiply_04.c":64:36)
#loc36 = loc("CWE190_Integer_Overflow__int_connect_socket_multiply_04.c":65:13)
#loc37 = loc("CWE190_Integer_Overflow__int_connect_socket_multiply_04.c":65:45)
#loc38 = loc("CWE190_Integer_Overflow__int_connect_socket_multiply_04.c":66:13)
#loc39 = loc("CWE190_Integer_Overflow__int_connect_socket_multiply_04.c":101:21)
#loc40 = loc("CWE190_Integer_Overflow__int_connect_socket_multiply_04.c":76:40)
#loc41 = loc("CWE190_Integer_Overflow__int_connect_socket_multiply_04.c":76:49)
#loc42 = loc("CWE190_Integer_Overflow__int_connect_socket_multiply_04.c":76:62)
#loc43 = loc("CWE190_Integer_Overflow__int_connect_socket_multiply_04.c":76:33)
#loc44 = loc("CWE190_Integer_Overflow__int_connect_socket_multiply_04.c":76:17)
#loc45 = loc("CWE190_Integer_Overflow__int_connect_socket_multiply_04.c":76:73)
#loc46 = loc("CWE190_Integer_Overflow__int_connect_socket_multiply_04.c":77:17)
#loc47 = loc("CWE190_Integer_Overflow__int_connect_socket_multiply_04.c":80:17)
#loc48 = loc("CWE190_Integer_Overflow__int_connect_socket_multiply_04.c":77:21)
#loc49 = loc("CWE190_Integer_Overflow__int_connect_socket_multiply_04.c":77:38)
#loc50 = loc("CWE190_Integer_Overflow__int_connect_socket_multiply_04.c":78:17)
#loc51 = loc("CWE190_Integer_Overflow__int_connect_socket_multiply_04.c":79:21)
#loc52 = loc("CWE190_Integer_Overflow__int_connect_socket_multiply_04.c":81:24)
#loc53 = loc("CWE190_Integer_Overflow__int_connect_socket_multiply_04.c":81:25)
#loc54 = loc("CWE190_Integer_Overflow__int_connect_socket_multiply_04.c":81:34)
#loc55 = loc("CWE190_Integer_Overflow__int_connect_socket_multiply_04.c":81:37)
#loc56 = loc("CWE190_Integer_Overflow__int_connect_socket_multiply_04.c":81:51)
#loc57 = loc("CWE190_Integer_Overflow__int_connect_socket_multiply_04.c":81:17)
#loc58 = loc("CWE190_Integer_Overflow__int_connect_socket_multiply_04.c":81:52)
#loc59 = loc("CWE190_Integer_Overflow__int_connect_socket_multiply_04.c":82:38)
#loc60 = loc("/usr/include/netinet/in.h":249:5)
#loc61 = loc("CWE190_Integer_Overflow__int_connect_socket_multiply_04.c":82:17)
#loc62 = loc("CWE190_Integer_Overflow__int_connect_socket_multiply_04.c":83:43)
#loc63 = loc("/usr/include/netinet/in.h":251:20)
#loc64 = loc("/usr/include/netinet/in.h":33:15)
#loc65 = loc("CWE190_Integer_Overflow__int_connect_socket_multiply_04.c":83:17)
#loc66 = loc("CWE190_Integer_Overflow__int_connect_socket_multiply_04.c":83:63)
#loc67 = loc("CWE190_Integer_Overflow__int_connect_socket_multiply_04.c":84:42)
#loc68 = loc("CWE190_Integer_Overflow__int_connect_socket_multiply_04.c":84:36)
#loc69 = loc("/usr/include/netinet/in.h":250:15)
#loc70 = loc("CWE190_Integer_Overflow__int_connect_socket_multiply_04.c":84:17)
#loc71 = loc("CWE190_Integer_Overflow__int_connect_socket_multiply_04.c":84:50)
#loc72 = loc("CWE190_Integer_Overflow__int_connect_socket_multiply_04.c":85:17)
#loc73 = loc("CWE190_Integer_Overflow__int_connect_socket_multiply_04.c":88:17)
#loc74 = loc("CWE190_Integer_Overflow__int_connect_socket_multiply_04.c":85:29)
#loc75 = loc("CWE190_Integer_Overflow__int_connect_socket_multiply_04.c":85:62)
#loc76 = loc("CWE190_Integer_Overflow__int_connect_socket_multiply_04.c":85:63)
#loc77 = loc("CWE190_Integer_Overflow__int_connect_socket_multiply_04.c":85:72)
#loc78 = loc("CWE190_Integer_Overflow__int_connect_socket_multiply_04.c":85:86)
#loc79 = loc("CWE190_Integer_Overflow__int_connect_socket_multiply_04.c":85:21)
#loc80 = loc("CWE190_Integer_Overflow__int_connect_socket_multiply_04.c":85:92)
#loc81 = loc("CWE190_Integer_Overflow__int_connect_socket_multiply_04.c":86:17)
#loc82 = loc("CWE190_Integer_Overflow__int_connect_socket_multiply_04.c":87:21)
#loc83 = loc("CWE190_Integer_Overflow__int_connect_socket_multiply_04.c":91:35)
#loc84 = loc("CWE190_Integer_Overflow__int_connect_socket_multiply_04.c":91:50)
#loc85 = loc("CWE190_Integer_Overflow__int_connect_socket_multiply_04.c":91:63)
#loc86 = loc("CWE190_Integer_Overflow__int_connect_socket_multiply_04.c":91:81)
#loc87 = loc("CWE190_Integer_Overflow__int_connect_socket_multiply_04.c":91:84)
#loc88 = loc("CWE190_Integer_Overflow__int_connect_socket_multiply_04.c":91:30)
#loc89 = loc("CWE190_Integer_Overflow__int_connect_socket_multiply_04.c":91:17)
#loc90 = loc("CWE190_Integer_Overflow__int_connect_socket_multiply_04.c":91:85)
#loc91 = loc("CWE190_Integer_Overflow__int_connect_socket_multiply_04.c":92:17)
#loc92 = loc("CWE190_Integer_Overflow__int_connect_socket_multiply_04.c":95:17)
#loc93 = loc("CWE190_Integer_Overflow__int_connect_socket_multiply_04.c":92:21)
#loc94 = loc("CWE190_Integer_Overflow__int_connect_socket_multiply_04.c":92:35)
#loc95 = loc("CWE190_Integer_Overflow__int_connect_socket_multiply_04.c":92:48)
#loc96 = loc("CWE190_Integer_Overflow__int_connect_socket_multiply_04.c":92:51)
#loc97 = loc("CWE190_Integer_Overflow__int_connect_socket_multiply_04.c":92:65)
#loc98 = loc("CWE190_Integer_Overflow__int_connect_socket_multiply_04.c":93:17)
#loc99 = loc("CWE190_Integer_Overflow__int_connect_socket_multiply_04.c":94:21)
#loc100 = loc("CWE190_Integer_Overflow__int_connect_socket_multiply_04.c":97:43)
#loc101 = loc("CWE190_Integer_Overflow__int_connect_socket_multiply_04.c":97:29)
#loc102 = loc("CWE190_Integer_Overflow__int_connect_socket_multiply_04.c":97:17)
#loc103 = loc("CWE190_Integer_Overflow__int_connect_socket_multiply_04.c":99:29)
#loc104 = loc("CWE190_Integer_Overflow__int_connect_socket_multiply_04.c":99:24)
#loc105 = loc("CWE190_Integer_Overflow__int_connect_socket_multiply_04.c":99:17)
#loc106 = loc("CWE190_Integer_Overflow__int_connect_socket_multiply_04.c":99:40)
#loc107 = loc("CWE190_Integer_Overflow__int_connect_socket_multiply_04.c":101:20)
#loc108 = loc("CWE190_Integer_Overflow__int_connect_socket_multiply_04.c":102:13)
#loc109 = loc("CWE190_Integer_Overflow__int_connect_socket_multiply_04.c":105:13)
#loc110 = loc("CWE190_Integer_Overflow__int_connect_socket_multiply_04.c":102:17)
#loc111 = loc("CWE190_Integer_Overflow__int_connect_socket_multiply_04.c":102:34)
#loc112 = loc("CWE190_Integer_Overflow__int_connect_socket_multiply_04.c":103:13)
#loc113 = loc("CWE190_Integer_Overflow__int_connect_socket_multiply_04.c":104:30)
#loc114 = loc("CWE190_Integer_Overflow__int_connect_socket_multiply_04.c":104:17)
#loc115 = loc("CWE190_Integer_Overflow__int_connect_socket_multiply_04.c":114:5)
#loc116 = loc("CWE190_Integer_Overflow__int_connect_socket_multiply_04.c":122:5)
#loc117 = loc("CWE190_Integer_Overflow__int_connect_socket_multiply_04.c":114:8)
#loc118 = loc("CWE190_Integer_Overflow__int_connect_socket_multiply_04.c":115:5)
#loc119 = loc("CWE190_Integer_Overflow__int_connect_socket_multiply_04.c":116:9)
#loc120 = loc("CWE190_Integer_Overflow__int_connect_socket_multiply_04.c":121:9)
#loc121 = loc("CWE190_Integer_Overflow__int_connect_socket_multiply_04.c":116:12)
#loc122 = loc("CWE190_Integer_Overflow__int_connect_socket_multiply_04.c":116:19)
#loc123 = loc("CWE190_Integer_Overflow__int_connect_socket_multiply_04.c":117:9)
#loc124 = loc("CWE190_Integer_Overflow__int_connect_socket_multiply_04.c":119:13)
#loc125 = loc("CWE190_Integer_Overflow__int_connect_socket_multiply_04.c":119:33)
#loc126 = loc("CWE190_Integer_Overflow__int_connect_socket_multiply_04.c":119:26)
#loc127 = loc("CWE190_Integer_Overflow__int_connect_socket_multiply_04.c":120:26)
#loc128 = loc("CWE190_Integer_Overflow__int_connect_socket_multiply_04.c":120:13)
#loc129 = loc("CWE190_Integer_Overflow__int_connect_socket_multiply_04.c":349:1)
#loc130 = loc("CWE190_Integer_Overflow__int_connect_socket_multiply_04.c":355:1)
#loc131 = loc("CWE190_Integer_Overflow__int_connect_socket_multiply_04.c":351:5)
#loc132 = loc("CWE190_Integer_Overflow__int_connect_socket_multiply_04.c":351:14)
#loc133 = loc("CWE190_Integer_Overflow__int_connect_socket_multiply_04.c":352:5)
#loc134 = loc("CWE190_Integer_Overflow__int_connect_socket_multiply_04.c":352:14)
#loc135 = loc("CWE190_Integer_Overflow__int_connect_socket_multiply_04.c":353:5)
#loc136 = loc("CWE190_Integer_Overflow__int_connect_socket_multiply_04.c":353:14)
#loc137 = loc("CWE190_Integer_Overflow__int_connect_socket_multiply_04.c":354:5)
#loc138 = loc("CWE190_Integer_Overflow__int_connect_socket_multiply_04.c":354:14)
#loc139 = loc("/usr/include/stdlib.h":575:1)
#loc140 = loc("/usr/include/stdlib.h":575:41)
#loc141 = loc("/usr/include/time.h":76:1)
#loc142 = loc("/usr/include/time.h":76:38)
#loc143 = loc("../../../testcasesupport/std_testcase_io.h":14:1)
#loc144 = loc("../../../testcasesupport/std_testcase_io.h":14:33)
#loc145 = loc("CWE190_Integer_Overflow__int_connect_socket_multiply_04.c":371:15)
#loc146 = loc("CWE190_Integer_Overflow__int_connect_socket_multiply_04.c":373:15)
#loc147 = loc("CWE190_Integer_Overflow__int_connect_socket_multiply_04.c":376:15)
#loc148 = loc("CWE190_Integer_Overflow__int_connect_socket_multiply_04.c":378:15)
#loc149 = loc("CWE190_Integer_Overflow__int_connect_socket_multiply_04.c":366:1)
#loc150 = loc("CWE190_Integer_Overflow__int_connect_socket_multiply_04.c":381:1)
#loc155 = loc("CWE190_Integer_Overflow__int_connect_socket_multiply_04.c":367:1)
#loc156 = loc("CWE190_Integer_Overflow__int_connect_socket_multiply_04.c":369:27)
#loc157 = loc("CWE190_Integer_Overflow__int_connect_socket_multiply_04.c":369:22)
#loc158 = loc("CWE190_Integer_Overflow__int_connect_socket_multiply_04.c":369:5)
#loc159 = loc("CWE190_Integer_Overflow__int_connect_socket_multiply_04.c":371:5)
#loc160 = loc("CWE190_Integer_Overflow__int_connect_socket_multiply_04.c":372:5)
#loc161 = loc("CWE190_Integer_Overflow__int_connect_socket_multiply_04.c":372:66)
#loc162 = loc("CWE190_Integer_Overflow__int_connect_socket_multiply_04.c":373:5)
#loc163 = loc("CWE190_Integer_Overflow__int_connect_socket_multiply_04.c":376:5)
#loc164 = loc("CWE190_Integer_Overflow__int_connect_socket_multiply_04.c":377:5)
#loc165 = loc("CWE190_Integer_Overflow__int_connect_socket_multiply_04.c":377:65)
#loc166 = loc("CWE190_Integer_Overflow__int_connect_socket_multiply_04.c":378:5)
#loc167 = loc("CWE190_Integer_Overflow__int_connect_socket_multiply_04.c":380:12)
#loc168 = loc("CWE190_Integer_Overflow__int_connect_socket_multiply_04.c":380:5)
#loc169 = loc("CWE190_Integer_Overflow__int_connect_socket_multiply_04.c":197:19)
#loc170 = loc("CWE190_Integer_Overflow__int_connect_socket_multiply_04.c":211:27)
#loc171 = loc("CWE190_Integer_Overflow__int_connect_socket_multiply_04.c":130:1)
#loc172 = loc("CWE190_Integer_Overflow__int_connect_socket_multiply_04.c":215:1)
#loc173 = loc("CWE190_Integer_Overflow__int_connect_socket_multiply_04.c":132:5)
#loc174 = loc("CWE190_Integer_Overflow__int_connect_socket_multiply_04.c":132:9)
#loc175 = loc("CWE190_Integer_Overflow__int_connect_socket_multiply_04.c":134:12)
#loc176 = loc("CWE190_Integer_Overflow__int_connect_socket_multiply_04.c":134:5)
#loc177 = loc("CWE190_Integer_Overflow__int_connect_socket_multiply_04.c":135:5)
#loc178 = loc("CWE190_Integer_Overflow__int_connect_socket_multiply_04.c":193:5)
#loc179 = loc("CWE190_Integer_Overflow__int_connect_socket_multiply_04.c":135:8)
#loc180 = loc("CWE190_Integer_Overflow__int_connect_socket_multiply_04.c":136:5)
#loc181 = loc("CWE190_Integer_Overflow__int_connect_socket_multiply_04.c":137:9)
#loc182 = loc("CWE190_Integer_Overflow__int_connect_socket_multiply_04.c":192:9)
#loc183 = loc("CWE190_Integer_Overflow__int_connect_socket_multiply_04.c":142:13)
#loc184 = loc("CWE190_Integer_Overflow__int_connect_socket_multiply_04.c":142:17)
#loc185 = loc("CWE190_Integer_Overflow__int_connect_socket_multiply_04.c":143:13)
#loc186 = loc("CWE190_Integer_Overflow__int_connect_socket_multiply_04.c":143:32)
#loc187 = loc("CWE190_Integer_Overflow__int_connect_socket_multiply_04.c":144:13)
#loc188 = loc("CWE190_Integer_Overflow__int_connect_socket_multiply_04.c":144:36)
#loc189 = loc("CWE190_Integer_Overflow__int_connect_socket_multiply_04.c":145:13)
#loc190 = loc("CWE190_Integer_Overflow__int_connect_socket_multiply_04.c":145:45)
#loc191 = loc("CWE190_Integer_Overflow__int_connect_socket_multiply_04.c":146:13)
#loc192 = loc("CWE190_Integer_Overflow__int_connect_socket_multiply_04.c":181:21)
#loc193 = loc("CWE190_Integer_Overflow__int_connect_socket_multiply_04.c":156:40)
#loc194 = loc("CWE190_Integer_Overflow__int_connect_socket_multiply_04.c":156:49)
#loc195 = loc("CWE190_Integer_Overflow__int_connect_socket_multiply_04.c":156:62)
#loc196 = loc("CWE190_Integer_Overflow__int_connect_socket_multiply_04.c":156:33)
#loc197 = loc("CWE190_Integer_Overflow__int_connect_socket_multiply_04.c":156:17)
#loc198 = loc("CWE190_Integer_Overflow__int_connect_socket_multiply_04.c":156:73)
#loc199 = loc("CWE190_Integer_Overflow__int_connect_socket_multiply_04.c":157:17)
#loc200 = loc("CWE190_Integer_Overflow__int_connect_socket_multiply_04.c":160:17)
#loc201 = loc("CWE190_Integer_Overflow__int_connect_socket_multiply_04.c":157:21)
#loc202 = loc("CWE190_Integer_Overflow__int_connect_socket_multiply_04.c":157:38)
#loc203 = loc("CWE190_Integer_Overflow__int_connect_socket_multiply_04.c":158:17)
#loc204 = loc("CWE190_Integer_Overflow__int_connect_socket_multiply_04.c":159:21)
#loc205 = loc("CWE190_Integer_Overflow__int_connect_socket_multiply_04.c":161:24)
#loc206 = loc("CWE190_Integer_Overflow__int_connect_socket_multiply_04.c":161:25)
#loc207 = loc("CWE190_Integer_Overflow__int_connect_socket_multiply_04.c":161:34)
#loc208 = loc("CWE190_Integer_Overflow__int_connect_socket_multiply_04.c":161:37)
#loc209 = loc("CWE190_Integer_Overflow__int_connect_socket_multiply_04.c":161:51)
#loc210 = loc("CWE190_Integer_Overflow__int_connect_socket_multiply_04.c":161:17)
#loc211 = loc("CWE190_Integer_Overflow__int_connect_socket_multiply_04.c":161:52)
#loc212 = loc("CWE190_Integer_Overflow__int_connect_socket_multiply_04.c":162:38)
#loc213 = loc("CWE190_Integer_Overflow__int_connect_socket_multiply_04.c":162:17)
#loc214 = loc("CWE190_Integer_Overflow__int_connect_socket_multiply_04.c":163:53)
#loc215 = loc("CWE190_Integer_Overflow__int_connect_socket_multiply_04.c":163:43)
#loc216 = loc("CWE190_Integer_Overflow__int_connect_socket_multiply_04.c":163:17)
#loc217 = loc("CWE190_Integer_Overflow__int_connect_socket_multiply_04.c":163:63)
#loc218 = loc("CWE190_Integer_Overflow__int_connect_socket_multiply_04.c":164:42)
#loc219 = loc("CWE190_Integer_Overflow__int_connect_socket_multiply_04.c":164:36)
#loc220 = loc("CWE190_Integer_Overflow__int_connect_socket_multiply_04.c":164:17)
#loc221 = loc("CWE190_Integer_Overflow__int_connect_socket_multiply_04.c":164:50)
#loc222 = loc("CWE190_Integer_Overflow__int_connect_socket_multiply_04.c":165:17)
#loc223 = loc("CWE190_Integer_Overflow__int_connect_socket_multiply_04.c":168:17)
#loc224 = loc("CWE190_Integer_Overflow__int_connect_socket_multiply_04.c":165:29)
#loc225 = loc("CWE190_Integer_Overflow__int_connect_socket_multiply_04.c":165:62)
#loc226 = loc("CWE190_Integer_Overflow__int_connect_socket_multiply_04.c":165:63)
#loc227 = loc("CWE190_Integer_Overflow__int_connect_socket_multiply_04.c":165:72)
#loc228 = loc("CWE190_Integer_Overflow__int_connect_socket_multiply_04.c":165:86)
#loc229 = loc("CWE190_Integer_Overflow__int_connect_socket_multiply_04.c":165:21)
#loc230 = loc("CWE190_Integer_Overflow__int_connect_socket_multiply_04.c":165:92)
#loc231 = loc("CWE190_Integer_Overflow__int_connect_socket_multiply_04.c":166:17)
#loc232 = loc("CWE190_Integer_Overflow__int_connect_socket_multiply_04.c":167:21)
#loc233 = loc("CWE190_Integer_Overflow__int_connect_socket_multiply_04.c":171:35)
#loc234 = loc("CWE190_Integer_Overflow__int_connect_socket_multiply_04.c":171:50)
#loc235 = loc("CWE190_Integer_Overflow__int_connect_socket_multiply_04.c":171:63)
#loc236 = loc("CWE190_Integer_Overflow__int_connect_socket_multiply_04.c":171:81)
#loc237 = loc("CWE190_Integer_Overflow__int_connect_socket_multiply_04.c":171:84)
#loc238 = loc("CWE190_Integer_Overflow__int_connect_socket_multiply_04.c":171:30)
#loc239 = loc("CWE190_Integer_Overflow__int_connect_socket_multiply_04.c":171:17)
#loc240 = loc("CWE190_Integer_Overflow__int_connect_socket_multiply_04.c":171:85)
#loc241 = loc("CWE190_Integer_Overflow__int_connect_socket_multiply_04.c":172:17)
#loc242 = loc("CWE190_Integer_Overflow__int_connect_socket_multiply_04.c":175:17)
#loc243 = loc("CWE190_Integer_Overflow__int_connect_socket_multiply_04.c":172:21)
#loc244 = loc("CWE190_Integer_Overflow__int_connect_socket_multiply_04.c":172:35)
#loc245 = loc("CWE190_Integer_Overflow__int_connect_socket_multiply_04.c":172:48)
#loc246 = loc("CWE190_Integer_Overflow__int_connect_socket_multiply_04.c":172:51)
#loc247 = loc("CWE190_Integer_Overflow__int_connect_socket_multiply_04.c":172:65)
#loc248 = loc("CWE190_Integer_Overflow__int_connect_socket_multiply_04.c":173:17)
#loc249 = loc("CWE190_Integer_Overflow__int_connect_socket_multiply_04.c":174:21)
#loc250 = loc("CWE190_Integer_Overflow__int_connect_socket_multiply_04.c":177:43)
#loc251 = loc("CWE190_Integer_Overflow__int_connect_socket_multiply_04.c":177:29)
#loc252 = loc("CWE190_Integer_Overflow__int_connect_socket_multiply_04.c":177:17)
#loc253 = loc("CWE190_Integer_Overflow__int_connect_socket_multiply_04.c":179:29)
#loc254 = loc("CWE190_Integer_Overflow__int_connect_socket_multiply_04.c":179:24)
#loc255 = loc("CWE190_Integer_Overflow__int_connect_socket_multiply_04.c":179:17)
#loc256 = loc("CWE190_Integer_Overflow__int_connect_socket_multiply_04.c":179:40)
#loc257 = loc("CWE190_Integer_Overflow__int_connect_socket_multiply_04.c":181:20)
#loc258 = loc("CWE190_Integer_Overflow__int_connect_socket_multiply_04.c":182:13)
#loc259 = loc("CWE190_Integer_Overflow__int_connect_socket_multiply_04.c":185:13)
#loc260 = loc("CWE190_Integer_Overflow__int_connect_socket_multiply_04.c":182:17)
#loc261 = loc("CWE190_Integer_Overflow__int_connect_socket_multiply_04.c":182:34)
#loc262 = loc("CWE190_Integer_Overflow__int_connect_socket_multiply_04.c":183:13)
#loc263 = loc("CWE190_Integer_Overflow__int_connect_socket_multiply_04.c":184:30)
#loc264 = loc("CWE190_Integer_Overflow__int_connect_socket_multiply_04.c":184:17)
#loc265 = loc("CWE190_Integer_Overflow__int_connect_socket_multiply_04.c":194:5)
#loc266 = loc("CWE190_Integer_Overflow__int_connect_socket_multiply_04.c":214:5)
#loc267 = loc("CWE190_Integer_Overflow__int_connect_socket_multiply_04.c":194:8)
#loc268 = loc("CWE190_Integer_Overflow__int_connect_socket_multiply_04.c":195:5)
#loc269 = loc("CWE190_Integer_Overflow__int_connect_socket_multiply_04.c":198:5)
#loc270 = loc("CWE190_Integer_Overflow__int_connect_socket_multiply_04.c":200:5)
#loc271 = loc("CWE190_Integer_Overflow__int_connect_socket_multiply_04.c":197:9)
#loc272 = loc("CWE190_Integer_Overflow__int_connect_socket_multiply_04.c":201:9)
#loc273 = loc("CWE190_Integer_Overflow__int_connect_socket_multiply_04.c":213:9)
#loc274 = loc("CWE190_Integer_Overflow__int_connect_socket_multiply_04.c":201:12)
#loc275 = loc("CWE190_Integer_Overflow__int_connect_socket_multiply_04.c":201:19)
#loc276 = loc("CWE190_Integer_Overflow__int_connect_socket_multiply_04.c":202:9)
#loc277 = loc("CWE190_Integer_Overflow__int_connect_socket_multiply_04.c":204:13)
#loc278 = loc("CWE190_Integer_Overflow__int_connect_socket_multiply_04.c":212:13)
#loc279 = loc("CWE190_Integer_Overflow__int_connect_socket_multiply_04.c":204:17)
#loc280 = loc("CWE190_Integer_Overflow__int_connect_socket_multiply_04.c":204:25)
#loc281 = loc("CWE190_Integer_Overflow__int_connect_socket_multiply_04.c":204:33)
#loc282 = loc("CWE190_Integer_Overflow__int_connect_socket_multiply_04.c":204:34)
#loc283 = loc("CWE190_Integer_Overflow__int_connect_socket_multiply_04.c":205:13)
#loc284 = loc("CWE190_Integer_Overflow__int_connect_socket_multiply_04.c":208:13)
#loc285 = loc("CWE190_Integer_Overflow__int_connect_socket_multiply_04.c":210:13)
#loc286 = loc("CWE190_Integer_Overflow__int_connect_socket_multiply_04.c":206:17)
#loc287 = loc("CWE190_Integer_Overflow__int_connect_socket_multiply_04.c":206:37)
#loc288 = loc("CWE190_Integer_Overflow__int_connect_socket_multiply_04.c":206:30)
#loc289 = loc("CWE190_Integer_Overflow__int_connect_socket_multiply_04.c":207:30)
#loc290 = loc("CWE190_Integer_Overflow__int_connect_socket_multiply_04.c":207:17)
#loc291 = loc("CWE190_Integer_Overflow__int_connect_socket_multiply_04.c":211:17)
#loc292 = loc("CWE190_Integer_Overflow__int_connect_socket_multiply_04.c":218:1)
#loc293 = loc("CWE190_Integer_Overflow__int_connect_socket_multiply_04.c":298:1)
#loc294 = loc("CWE190_Integer_Overflow__int_connect_socket_multiply_04.c":220:5)
#loc295 = loc("CWE190_Integer_Overflow__int_connect_socket_multiply_04.c":220:9)
#loc296 = loc("CWE190_Integer_Overflow__int_connect_socket_multiply_04.c":222:12)
#loc297 = loc("CWE190_Integer_Overflow__int_connect_socket_multiply_04.c":222:5)
#loc298 = loc("CWE190_Integer_Overflow__int_connect_socket_multiply_04.c":223:5)
#loc299 = loc("CWE190_Integer_Overflow__int_connect_socket_multiply_04.c":281:5)
#loc300 = loc("CWE190_Integer_Overflow__int_connect_socket_multiply_04.c":223:8)
#loc301 = loc("CWE190_Integer_Overflow__int_connect_socket_multiply_04.c":224:5)
#loc302 = loc("CWE190_Integer_Overflow__int_connect_socket_multiply_04.c":225:9)
#loc303 = loc("CWE190_Integer_Overflow__int_connect_socket_multiply_04.c":280:9)
#loc304 = loc("CWE190_Integer_Overflow__int_connect_socket_multiply_04.c":230:13)
#loc305 = loc("CWE190_Integer_Overflow__int_connect_socket_multiply_04.c":230:17)
#loc306 = loc("CWE190_Integer_Overflow__int_connect_socket_multiply_04.c":231:13)
#loc307 = loc("CWE190_Integer_Overflow__int_connect_socket_multiply_04.c":231:32)
#loc308 = loc("CWE190_Integer_Overflow__int_connect_socket_multiply_04.c":232:13)
#loc309 = loc("CWE190_Integer_Overflow__int_connect_socket_multiply_04.c":232:36)
#loc310 = loc("CWE190_Integer_Overflow__int_connect_socket_multiply_04.c":233:13)
#loc311 = loc("CWE190_Integer_Overflow__int_connect_socket_multiply_04.c":233:45)
#loc312 = loc("CWE190_Integer_Overflow__int_connect_socket_multiply_04.c":234:13)
#loc313 = loc("CWE190_Integer_Overflow__int_connect_socket_multiply_04.c":269:21)
#loc314 = loc("CWE190_Integer_Overflow__int_connect_socket_multiply_04.c":244:40)
#loc315 = loc("CWE190_Integer_Overflow__int_connect_socket_multiply_04.c":244:49)
#loc316 = loc("CWE190_Integer_Overflow__int_connect_socket_multiply_04.c":244:62)
#loc317 = loc("CWE190_Integer_Overflow__int_connect_socket_multiply_04.c":244:33)
#loc318 = loc("CWE190_Integer_Overflow__int_connect_socket_multiply_04.c":244:17)
#loc319 = loc("CWE190_Integer_Overflow__int_connect_socket_multiply_04.c":244:73)
#loc320 = loc("CWE190_Integer_Overflow__int_connect_socket_multiply_04.c":245:17)
#loc321 = loc("CWE190_Integer_Overflow__int_connect_socket_multiply_04.c":248:17)
#loc322 = loc("CWE190_Integer_Overflow__int_connect_socket_multiply_04.c":245:21)
#loc323 = loc("CWE190_Integer_Overflow__int_connect_socket_multiply_04.c":245:38)
#loc324 = loc("CWE190_Integer_Overflow__int_connect_socket_multiply_04.c":246:17)
#loc325 = loc("CWE190_Integer_Overflow__int_connect_socket_multiply_04.c":247:21)
#loc326 = loc("CWE190_Integer_Overflow__int_connect_socket_multiply_04.c":249:24)
#loc327 = loc("CWE190_Integer_Overflow__int_connect_socket_multiply_04.c":249:25)
#loc328 = loc("CWE190_Integer_Overflow__int_connect_socket_multiply_04.c":249:34)
#loc329 = loc("CWE190_Integer_Overflow__int_connect_socket_multiply_04.c":249:37)
#loc330 = loc("CWE190_Integer_Overflow__int_connect_socket_multiply_04.c":249:51)
#loc331 = loc("CWE190_Integer_Overflow__int_connect_socket_multiply_04.c":249:17)
#loc332 = loc("CWE190_Integer_Overflow__int_connect_socket_multiply_04.c":249:52)
#loc333 = loc("CWE190_Integer_Overflow__int_connect_socket_multiply_04.c":250:38)
#loc334 = loc("CWE190_Integer_Overflow__int_connect_socket_multiply_04.c":250:17)
#loc335 = loc("CWE190_Integer_Overflow__int_connect_socket_multiply_04.c":251:53)
#loc336 = loc("CWE190_Integer_Overflow__int_connect_socket_multiply_04.c":251:43)
#loc337 = loc("CWE190_Integer_Overflow__int_connect_socket_multiply_04.c":251:17)
#loc338 = loc("CWE190_Integer_Overflow__int_connect_socket_multiply_04.c":251:63)
#loc339 = loc("CWE190_Integer_Overflow__int_connect_socket_multiply_04.c":252:42)
#loc340 = loc("CWE190_Integer_Overflow__int_connect_socket_multiply_04.c":252:36)
#loc341 = loc("CWE190_Integer_Overflow__int_connect_socket_multiply_04.c":252:17)
#loc342 = loc("CWE190_Integer_Overflow__int_connect_socket_multiply_04.c":252:50)
#loc343 = loc("CWE190_Integer_Overflow__int_connect_socket_multiply_04.c":253:17)
#loc344 = loc("CWE190_Integer_Overflow__int_connect_socket_multiply_04.c":256:17)
#loc345 = loc("CWE190_Integer_Overflow__int_connect_socket_multiply_04.c":253:29)
#loc346 = loc("CWE190_Integer_Overflow__int_connect_socket_multiply_04.c":253:62)
#loc347 = loc("CWE190_Integer_Overflow__int_connect_socket_multiply_04.c":253:63)
#loc348 = loc("CWE190_Integer_Overflow__int_connect_socket_multiply_04.c":253:72)
#loc349 = loc("CWE190_Integer_Overflow__int_connect_socket_multiply_04.c":253:86)
#loc350 = loc("CWE190_Integer_Overflow__int_connect_socket_multiply_04.c":253:21)
#loc351 = loc("CWE190_Integer_Overflow__int_connect_socket_multiply_04.c":253:92)
#loc352 = loc("CWE190_Integer_Overflow__int_connect_socket_multiply_04.c":254:17)
#loc353 = loc("CWE190_Integer_Overflow__int_connect_socket_multiply_04.c":255:21)
#loc354 = loc("CWE190_Integer_Overflow__int_connect_socket_multiply_04.c":259:35)
#loc355 = loc("CWE190_Integer_Overflow__int_connect_socket_multiply_04.c":259:50)
#loc356 = loc("CWE190_Integer_Overflow__int_connect_socket_multiply_04.c":259:63)
#loc357 = loc("CWE190_Integer_Overflow__int_connect_socket_multiply_04.c":259:81)
#loc358 = loc("CWE190_Integer_Overflow__int_connect_socket_multiply_04.c":259:84)
#loc359 = loc("CWE190_Integer_Overflow__int_connect_socket_multiply_04.c":259:30)
#loc360 = loc("CWE190_Integer_Overflow__int_connect_socket_multiply_04.c":259:17)
#loc361 = loc("CWE190_Integer_Overflow__int_connect_socket_multiply_04.c":259:85)
#loc362 = loc("CWE190_Integer_Overflow__int_connect_socket_multiply_04.c":260:17)
#loc363 = loc("CWE190_Integer_Overflow__int_connect_socket_multiply_04.c":263:17)
#loc364 = loc("CWE190_Integer_Overflow__int_connect_socket_multiply_04.c":260:21)
#loc365 = loc("CWE190_Integer_Overflow__int_connect_socket_multiply_04.c":260:35)
#loc366 = loc("CWE190_Integer_Overflow__int_connect_socket_multiply_04.c":260:48)
#loc367 = loc("CWE190_Integer_Overflow__int_connect_socket_multiply_04.c":260:51)
#loc368 = loc("CWE190_Integer_Overflow__int_connect_socket_multiply_04.c":260:65)
#loc369 = loc("CWE190_Integer_Overflow__int_connect_socket_multiply_04.c":261:17)
#loc370 = loc("CWE190_Integer_Overflow__int_connect_socket_multiply_04.c":262:21)
#loc371 = loc("CWE190_Integer_Overflow__int_connect_socket_multiply_04.c":265:43)
#loc372 = loc("CWE190_Integer_Overflow__int_connect_socket_multiply_04.c":265:29)
#loc373 = loc("CWE190_Integer_Overflow__int_connect_socket_multiply_04.c":265:17)
#loc374 = loc("CWE190_Integer_Overflow__int_connect_socket_multiply_04.c":267:29)
#loc375 = loc("CWE190_Integer_Overflow__int_connect_socket_multiply_04.c":267:24)
#loc376 = loc("CWE190_Integer_Overflow__int_connect_socket_multiply_04.c":267:17)
#loc377 = loc("CWE190_Integer_Overflow__int_connect_socket_multiply_04.c":267:40)
#loc378 = loc("CWE190_Integer_Overflow__int_connect_socket_multiply_04.c":269:20)
#loc379 = loc("CWE190_Integer_Overflow__int_connect_socket_multiply_04.c":270:13)
#loc380 = loc("CWE190_Integer_Overflow__int_connect_socket_multiply_04.c":273:13)
#loc381 = loc("CWE190_Integer_Overflow__int_connect_socket_multiply_04.c":270:17)
#loc382 = loc("CWE190_Integer_Overflow__int_connect_socket_multiply_04.c":270:34)
#loc383 = loc("CWE190_Integer_Overflow__int_connect_socket_multiply_04.c":271:13)
#loc384 = loc("CWE190_Integer_Overflow__int_connect_socket_multiply_04.c":272:30)
#loc385 = loc("CWE190_Integer_Overflow__int_connect_socket_multiply_04.c":272:17)
#loc386 = loc("CWE190_Integer_Overflow__int_connect_socket_multiply_04.c":282:5)
#loc387 = loc("CWE190_Integer_Overflow__int_connect_socket_multiply_04.c":297:5)
#loc388 = loc("CWE190_Integer_Overflow__int_connect_socket_multiply_04.c":282:8)
#loc389 = loc("CWE190_Integer_Overflow__int_connect_socket_multiply_04.c":283:5)
#loc390 = loc("CWE190_Integer_Overflow__int_connect_socket_multiply_04.c":284:9)
#loc391 = loc("CWE190_Integer_Overflow__int_connect_socket_multiply_04.c":296:9)
#loc392 = loc("CWE190_Integer_Overflow__int_connect_socket_multiply_04.c":284:12)
#loc393 = loc("CWE190_Integer_Overflow__int_connect_socket_multiply_04.c":284:19)
#loc394 = loc("CWE190_Integer_Overflow__int_connect_socket_multiply_04.c":285:9)
#loc395 = loc("CWE190_Integer_Overflow__int_connect_socket_multiply_04.c":287:13)
#loc396 = loc("CWE190_Integer_Overflow__int_connect_socket_multiply_04.c":295:13)
#loc397 = loc("CWE190_Integer_Overflow__int_connect_socket_multiply_04.c":287:17)
#loc398 = loc("CWE190_Integer_Overflow__int_connect_socket_multiply_04.c":287:25)
#loc399 = loc("CWE190_Integer_Overflow__int_connect_socket_multiply_04.c":287:33)
#loc400 = loc("CWE190_Integer_Overflow__int_connect_socket_multiply_04.c":287:34)
#loc401 = loc("CWE190_Integer_Overflow__int_connect_socket_multiply_04.c":288:13)
#loc402 = loc("CWE190_Integer_Overflow__int_connect_socket_multiply_04.c":291:13)
#loc403 = loc("CWE190_Integer_Overflow__int_connect_socket_multiply_04.c":293:13)
#loc404 = loc("CWE190_Integer_Overflow__int_connect_socket_multiply_04.c":289:17)
#loc405 = loc("CWE190_Integer_Overflow__int_connect_socket_multiply_04.c":289:37)
#loc406 = loc("CWE190_Integer_Overflow__int_connect_socket_multiply_04.c":289:30)
#loc407 = loc("CWE190_Integer_Overflow__int_connect_socket_multiply_04.c":290:30)
#loc408 = loc("CWE190_Integer_Overflow__int_connect_socket_multiply_04.c":290:17)
#loc409 = loc("CWE190_Integer_Overflow__int_connect_socket_multiply_04.c":294:27)
#loc410 = loc("CWE190_Integer_Overflow__int_connect_socket_multiply_04.c":294:17)
#loc411 = loc("CWE190_Integer_Overflow__int_connect_socket_multiply_04.c":301:1)
#loc412 = loc("CWE190_Integer_Overflow__int_connect_socket_multiply_04.c":325:1)
#loc413 = loc("CWE190_Integer_Overflow__int_connect_socket_multiply_04.c":303:5)
#loc414 = loc("CWE190_Integer_Overflow__int_connect_socket_multiply_04.c":303:9)
#loc415 = loc("CWE190_Integer_Overflow__int_connect_socket_multiply_04.c":305:12)
#loc416 = loc("CWE190_Integer_Overflow__int_connect_socket_multiply_04.c":305:5)
#loc417 = loc("CWE190_Integer_Overflow__int_connect_socket_multiply_04.c":306:5)
#loc418 = loc("CWE190_Integer_Overflow__int_connect_socket_multiply_04.c":315:5)
#loc419 = loc("CWE190_Integer_Overflow__int_connect_socket_multiply_04.c":306:8)
#loc420 = loc("CWE190_Integer_Overflow__int_connect_socket_multiply_04.c":307:5)
#loc421 = loc("CWE190_Integer_Overflow__int_connect_socket_multiply_04.c":310:5)
#loc422 = loc("CWE190_Integer_Overflow__int_connect_socket_multiply_04.c":312:5)
#loc423 = loc("CWE190_Integer_Overflow__int_connect_socket_multiply_04.c":309:19)
#loc424 = loc("CWE190_Integer_Overflow__int_connect_socket_multiply_04.c":309:9)
#loc425 = loc("CWE190_Integer_Overflow__int_connect_socket_multiply_04.c":314:16)
#loc426 = loc("CWE190_Integer_Overflow__int_connect_socket_multiply_04.c":314:9)
#loc427 = loc("CWE190_Integer_Overflow__int_connect_socket_multiply_04.c":316:5)
#loc428 = loc("CWE190_Integer_Overflow__int_connect_socket_multiply_04.c":324:5)
#loc429 = loc("CWE190_Integer_Overflow__int_connect_socket_multiply_04.c":316:8)
#loc430 = loc("CWE190_Integer_Overflow__int_connect_socket_multiply_04.c":317:5)
#loc431 = loc("CWE190_Integer_Overflow__int_connect_socket_multiply_04.c":318:9)
#loc432 = loc("CWE190_Integer_Overflow__int_connect_socket_multiply_04.c":323:9)
#loc433 = loc("CWE190_Integer_Overflow__int_connect_socket_multiply_04.c":318:12)
#loc434 = loc("CWE190_Integer_Overflow__int_connect_socket_multiply_04.c":318:19)
#loc435 = loc("CWE190_Integer_Overflow__int_connect_socket_multiply_04.c":319:9)
#loc436 = loc("CWE190_Integer_Overflow__int_connect_socket_multiply_04.c":321:13)
#loc437 = loc("CWE190_Integer_Overflow__int_connect_socket_multiply_04.c":321:33)
#loc438 = loc("CWE190_Integer_Overflow__int_connect_socket_multiply_04.c":321:26)
#loc439 = loc("CWE190_Integer_Overflow__int_connect_socket_multiply_04.c":322:26)
#loc440 = loc("CWE190_Integer_Overflow__int_connect_socket_multiply_04.c":322:13)
#loc441 = loc("CWE190_Integer_Overflow__int_connect_socket_multiply_04.c":328:1)
#loc442 = loc("CWE190_Integer_Overflow__int_connect_socket_multiply_04.c":347:1)
#loc443 = loc("CWE190_Integer_Overflow__int_connect_socket_multiply_04.c":330:5)
#loc444 = loc("CWE190_Integer_Overflow__int_connect_socket_multiply_04.c":330:9)
#loc445 = loc("CWE190_Integer_Overflow__int_connect_socket_multiply_04.c":332:12)
#loc446 = loc("CWE190_Integer_Overflow__int_connect_socket_multiply_04.c":332:5)
#loc447 = loc("CWE190_Integer_Overflow__int_connect_socket_multiply_04.c":333:5)
#loc448 = loc("CWE190_Integer_Overflow__int_connect_socket_multiply_04.c":337:5)
#loc449 = loc("CWE190_Integer_Overflow__int_connect_socket_multiply_04.c":333:8)
#loc450 = loc("CWE190_Integer_Overflow__int_connect_socket_multiply_04.c":334:5)
#loc451 = loc("CWE190_Integer_Overflow__int_connect_socket_multiply_04.c":336:16)
#loc452 = loc("CWE190_Integer_Overflow__int_connect_socket_multiply_04.c":336:9)
#loc453 = loc("CWE190_Integer_Overflow__int_connect_socket_multiply_04.c":338:5)
#loc454 = loc("CWE190_Integer_Overflow__int_connect_socket_multiply_04.c":346:5)
#loc455 = loc("CWE190_Integer_Overflow__int_connect_socket_multiply_04.c":338:8)
#loc456 = loc("CWE190_Integer_Overflow__int_connect_socket_multiply_04.c":339:5)
#loc457 = loc("CWE190_Integer_Overflow__int_connect_socket_multiply_04.c":340:9)
#loc458 = loc("CWE190_Integer_Overflow__int_connect_socket_multiply_04.c":345:9)
#loc459 = loc("CWE190_Integer_Overflow__int_connect_socket_multiply_04.c":340:12)
#loc460 = loc("CWE190_Integer_Overflow__int_connect_socket_multiply_04.c":340:19)
#loc461 = loc("CWE190_Integer_Overflow__int_connect_socket_multiply_04.c":341:9)
#loc462 = loc("CWE190_Integer_Overflow__int_connect_socket_multiply_04.c":343:13)
#loc463 = loc("CWE190_Integer_Overflow__int_connect_socket_multiply_04.c":343:33)
#loc464 = loc("CWE190_Integer_Overflow__int_connect_socket_multiply_04.c":343:26)
#loc465 = loc("CWE190_Integer_Overflow__int_connect_socket_multiply_04.c":344:26)
#loc466 = loc("CWE190_Integer_Overflow__int_connect_socket_multiply_04.c":344:13)
#loc467 = loc(fused[#loc1, #loc2])
#loc468 = loc(fused[#loc3, #loc4])
#loc469 = loc(fused[#loc6, #loc7])
#loc470 = loc(fused[#loc8, #loc9])
#loc471 = loc(fused[#loc10, #loc11])
#loc472 = loc(fused[#loc12, #loc13])
#loc473 = loc(fused[#loc14, #loc15])
#loc474 = loc(fused[#loc16, #loc17])
#loc475 = loc(fused[#loc18, #loc19])
#loc476 = loc(fused[#loc20, #loc21])
#loc477 = loc(fused[#loc23, #loc22])
#loc478 = loc(fused[#loc24, #loc25])
#loc479 = loc(fused[#loc27, #loc25])
#loc480 = loc(fused[#loc28, #loc29])
#loc481 = loc(fused[#loc30, #loc31])
#loc482 = loc(fused[#loc32, #loc33])
#loc483 = loc(fused[#loc34, #loc35])
#loc484 = loc(fused[#loc36, #loc37])
#loc485 = loc(fused[#loc38, #loc39])
#loc486 = loc(fused[#loc44, #loc45])
#loc487 = loc(fused[#loc46, #loc47])
#loc488 = loc(fused[#loc48, #loc49])
#loc489 = loc(fused[#loc50, #loc47])
#loc490 = loc(fused[#loc52, #loc53])
#loc491 = loc(fused[#loc55, #loc56])
#loc492 = loc(fused[#loc57, #loc58])
#loc493 = loc(fused[#loc61, #loc59])
#loc494 = loc(fused[#loc65, #loc66])
#loc495 = loc(fused[#loc70, #loc71])
#loc496 = loc(fused[#loc72, #loc73])
#loc497 = loc(fused[#loc75, #loc76])
#loc498 = loc(fused[#loc77, #loc78])
#loc499 = loc(fused[#loc79, #loc80])
#loc500 = loc(fused[#loc81, #loc73])
#loc501 = loc(fused[#loc85, #loc86])
#loc502 = loc(fused[#loc89, #loc90])
#loc503 = loc(fused[#loc91, #loc92])
#loc504 = loc(fused[#loc93, #loc94])
#loc505 = loc(fused[#loc96, #loc97])
#loc506 = loc(fused[#loc98, #loc92])
#loc507 = loc(fused[#loc102, #loc100])
#loc508 = loc(fused[#loc105, #loc106])
#loc509 = loc(fused[#loc108, #loc109])
#loc510 = loc(fused[#loc110, #loc111])
#loc511 = loc(fused[#loc112, #loc109])
#loc512 = loc(fused[#loc115, #loc116])
#loc513 = loc(fused[#loc118, #loc116])
#loc514 = loc(fused[#loc119, #loc120])
#loc515 = loc(fused[#loc121, #loc122])
#loc516 = loc(fused[#loc123, #loc120])
#loc517 = loc(fused[#loc124, #loc125])
#loc518 = loc(fused[#loc129, #loc130])
#loc519 = loc(fused[#loc131, #loc132])
#loc520 = loc(fused[#loc133, #loc134])
#loc521 = loc(fused[#loc135, #loc136])
#loc522 = loc(fused[#loc137, #loc138])
#loc523 = loc(fused[#loc139, #loc140])
#loc524 = loc(fused[#loc141, #loc142])
#loc525 = loc(fused[#loc143, #loc144])
#loc526 = loc(fused[#loc149, #loc150])
#loc529 = loc(fused[#loc160, #loc161])
#loc530 = loc(fused[#loc164, #loc165])
#loc531 = loc(fused[#loc168, #loc167])
#loc532 = loc(fused[#loc171, #loc172])
#loc533 = loc(fused[#loc173, #loc174])
#loc534 = loc(fused[#loc176, #loc175])
#loc535 = loc(fused[#loc177, #loc178])
#loc536 = loc(fused[#loc180, #loc178])
#loc537 = loc(fused[#loc181, #loc182])
#loc538 = loc(fused[#loc183, #loc184])
#loc539 = loc(fused[#loc185, #loc186])
#loc540 = loc(fused[#loc187, #loc188])
#loc541 = loc(fused[#loc189, #loc190])
#loc542 = loc(fused[#loc191, #loc192])
#loc543 = loc(fused[#loc197, #loc198])
#loc544 = loc(fused[#loc199, #loc200])
#loc545 = loc(fused[#loc201, #loc202])
#loc546 = loc(fused[#loc203, #loc200])
#loc547 = loc(fused[#loc205, #loc206])
#loc548 = loc(fused[#loc208, #loc209])
#loc549 = loc(fused[#loc210, #loc211])
#loc550 = loc(fused[#loc213, #loc212])
#loc551 = loc(fused[#loc216, #loc217])
#loc552 = loc(fused[#loc220, #loc221])
#loc553 = loc(fused[#loc222, #loc223])
#loc554 = loc(fused[#loc225, #loc226])
#loc555 = loc(fused[#loc227, #loc228])
#loc556 = loc(fused[#loc229, #loc230])
#loc557 = loc(fused[#loc231, #loc223])
#loc558 = loc(fused[#loc235, #loc236])
#loc559 = loc(fused[#loc239, #loc240])
#loc560 = loc(fused[#loc241, #loc242])
#loc561 = loc(fused[#loc243, #loc244])
#loc562 = loc(fused[#loc246, #loc247])
#loc563 = loc(fused[#loc248, #loc242])
#loc564 = loc(fused[#loc252, #loc250])
#loc565 = loc(fused[#loc255, #loc256])
#loc566 = loc(fused[#loc258, #loc259])
#loc567 = loc(fused[#loc260, #loc261])
#loc568 = loc(fused[#loc262, #loc259])
#loc569 = loc(fused[#loc265, #loc266])
#loc570 = loc(fused[#loc268, #loc269, #loc270, #loc266])
#loc571 = loc(fused[#loc272, #loc273])
#loc572 = loc(fused[#loc274, #loc275])
#loc573 = loc(fused[#loc276, #loc273])
#loc574 = loc(fused[#loc277, #loc278])
#loc575 = loc(fused[#loc280, #loc281])
#loc576 = loc(fused[#loc279, #loc282])
#loc577 = loc(fused[#loc283, #loc284, #loc285, #loc278])
#loc578 = loc(fused[#loc286, #loc287])
#loc579 = loc(fused[#loc292, #loc293])
#loc580 = loc(fused[#loc294, #loc295])
#loc581 = loc(fused[#loc297, #loc296])
#loc582 = loc(fused[#loc298, #loc299])
#loc583 = loc(fused[#loc301, #loc299])
#loc584 = loc(fused[#loc302, #loc303])
#loc585 = loc(fused[#loc304, #loc305])
#loc586 = loc(fused[#loc306, #loc307])
#loc587 = loc(fused[#loc308, #loc309])
#loc588 = loc(fused[#loc310, #loc311])
#loc589 = loc(fused[#loc312, #loc313])
#loc590 = loc(fused[#loc318, #loc319])
#loc591 = loc(fused[#loc320, #loc321])
#loc592 = loc(fused[#loc322, #loc323])
#loc593 = loc(fused[#loc324, #loc321])
#loc594 = loc(fused[#loc326, #loc327])
#loc595 = loc(fused[#loc329, #loc330])
#loc596 = loc(fused[#loc331, #loc332])
#loc597 = loc(fused[#loc334, #loc333])
#loc598 = loc(fused[#loc337, #loc338])
#loc599 = loc(fused[#loc341, #loc342])
#loc600 = loc(fused[#loc343, #loc344])
#loc601 = loc(fused[#loc346, #loc347])
#loc602 = loc(fused[#loc348, #loc349])
#loc603 = loc(fused[#loc350, #loc351])
#loc604 = loc(fused[#loc352, #loc344])
#loc605 = loc(fused[#loc356, #loc357])
#loc606 = loc(fused[#loc360, #loc361])
#loc607 = loc(fused[#loc362, #loc363])
#loc608 = loc(fused[#loc364, #loc365])
#loc609 = loc(fused[#loc367, #loc368])
#loc610 = loc(fused[#loc369, #loc363])
#loc611 = loc(fused[#loc373, #loc371])
#loc612 = loc(fused[#loc376, #loc377])
#loc613 = loc(fused[#loc379, #loc380])
#loc614 = loc(fused[#loc381, #loc382])
#loc615 = loc(fused[#loc383, #loc380])
#loc616 = loc(fused[#loc386, #loc387])
#loc617 = loc(fused[#loc389, #loc387])
#loc618 = loc(fused[#loc390, #loc391])
#loc619 = loc(fused[#loc392, #loc393])
#loc620 = loc(fused[#loc394, #loc391])
#loc621 = loc(fused[#loc395, #loc396])
#loc622 = loc(fused[#loc398, #loc399])
#loc623 = loc(fused[#loc397, #loc400])
#loc624 = loc(fused[#loc401, #loc402, #loc403, #loc396])
#loc625 = loc(fused[#loc404, #loc405])
#loc626 = loc(fused[#loc411, #loc412])
#loc627 = loc(fused[#loc413, #loc414])
#loc628 = loc(fused[#loc416, #loc415])
#loc629 = loc(fused[#loc417, #loc418])
#loc630 = loc(fused[#loc420, #loc421, #loc422, #loc418])
#loc631 = loc(fused[#loc426, #loc425])
#loc632 = loc(fused[#loc427, #loc428])
#loc633 = loc(fused[#loc430, #loc428])
#loc634 = loc(fused[#loc431, #loc432])
#loc635 = loc(fused[#loc433, #loc434])
#loc636 = loc(fused[#loc435, #loc432])
#loc637 = loc(fused[#loc436, #loc437])
#loc638 = loc(fused[#loc441, #loc442])
#loc639 = loc(fused[#loc443, #loc444])
#loc640 = loc(fused[#loc446, #loc445])
#loc641 = loc(fused[#loc447, #loc448])
#loc642 = loc(fused[#loc450, #loc448])
#loc643 = loc(fused[#loc452, #loc451])
#loc644 = loc(fused[#loc453, #loc454])
#loc645 = loc(fused[#loc456, #loc454])
#loc646 = loc(fused[#loc457, #loc458])
#loc647 = loc(fused[#loc459, #loc460])
#loc648 = loc(fused[#loc461, #loc458])
#loc649 = loc(fused[#loc462, #loc463])
