!s32i = !cir.int<s, 32>
!s8i = !cir.int<s, 8>
#fn_attr = #cir<extra({inline = #cir.inline<no>, nothrow = #cir.nothrow, optnone = #cir.optnone, uwtable = #cir.uwtable<async>})>
module @"/workspaces/juliet-c/testcases/CWE398_Poor_Code_Quality/CWE398_Poor_Code_Quality__equals_07.c" attributes {cir.lang = #cir.lang<c>, cir.sob = #cir.signed_overflow_behavior<undefined>, cir.triple = "x86_64-unknown-linux-gnu", cir.type_size_info = #cir.type_size_info<char = 8, int = 32, size_t = 64>, cir.uwtable = #cir.uwtable<async>, dlti.dl_spec = #dlti.dl_spec<!llvm.ptr = dense<64> : vector<4xi64>, f80 = dense<128> : vector<2xi64>, i64 = dense<64> : vector<2xi64>, i128 = dense<128> : vector<2xi64>, !llvm.ptr<272> = dense<64> : vector<4xi64>, !llvm.ptr<271> = dense<32> : vector<4xi64>, f64 = dense<64> : vector<2xi64>, f128 = dense<128> : vector<2xi64>, !llvm.ptr<270> = dense<32> : vector<4xi64>, f16 = dense<16> : vector<2xi64>, i32 = dense<32> : vector<2xi64>, i16 = dense<16> : vector<2xi64>, i8 = dense<8> : vector<2xi64>, i1 = dense<8> : vector<2xi64>, "dlti.stack_alignment" = 128 : i64, "dlti.mangling_mode" = "e", "dlti.endianness" = "little">} {
  cir.global "private" internal dsolocal @staticFive = #cir.int<5> : !s32i {alignment = 4 : i64} loc(#loc70)
  cir.func private @printIntLine(!s32i) loc(#loc71)
  cir.func no_proto @CWE398_Poor_Code_Quality__equals_07_bad() extra(#fn_attr) {
    %0 = cir.alloca !s32i, !cir.ptr<!s32i>, ["intOne", init] {alignment = 4 : i64} loc(#loc73)
    cir.br ^bb1 loc(#loc74)
  ^bb1:  // pred: ^bb0
    %1 = cir.get_global @staticFive : !cir.ptr<!s32i> loc(#loc70)
    %2 = cir.load %1 : !cir.ptr<!s32i>, !s32i loc(#loc11)
    %3 = cir.const #cir.int<5> : !s32i loc(#loc12)
    %4 = cir.cmp(eq, %2, %3) : !s32i, !cir.bool loc(#loc75)
    cir.brcond %4 ^bb2, ^bb5 loc(#loc76)
  ^bb2:  // pred: ^bb1
    cir.br ^bb3 loc(#loc77)
  ^bb3:  // pred: ^bb2
    %5 = cir.const #cir.int<1> : !s32i loc(#loc8)
    cir.store %5, %0 : !s32i, !cir.ptr<!s32i> loc(#loc73)
    %6 = cir.load %0 : !cir.ptr<!s32i>, !s32i loc(#loc16)
    cir.call @printIntLine(%6) : (!s32i) -> () loc(#loc17)
    %7 = cir.load %0 : !cir.ptr<!s32i>, !s32i loc(#loc18)
    cir.store %7, %0 : !s32i, !cir.ptr<!s32i> loc(#loc78)
    %8 = cir.load %0 : !cir.ptr<!s32i>, !s32i loc(#loc20)
    cir.call @printIntLine(%8) : (!s32i) -> () loc(#loc21)
    cir.br ^bb4 loc(#loc15)
  ^bb4:  // pred: ^bb3
    cir.br ^bb5 loc(#loc10)
  ^bb5:  // 2 preds: ^bb1, ^bb4
    cir.br ^bb6 loc(#loc10)
  ^bb6:  // pred: ^bb5
    cir.return loc(#loc6)
  } loc(#loc72)
  cir.func no_proto @CWE398_Poor_Code_Quality__equals_07_good() extra(#fn_attr) {
    %0 = cir.get_global @good1 : !cir.ptr<!cir.func<()>> loc(#loc80)
    cir.call %0() : (!cir.ptr<!cir.func<()>>) -> () loc(#loc24)
    %1 = cir.get_global @good2 : !cir.ptr<!cir.func<()>> loc(#loc81)
    cir.call %1() : (!cir.ptr<!cir.func<()>>) -> () loc(#loc26)
    cir.return loc(#loc23)
  } loc(#loc79)
  cir.func private @printLine(!cir.ptr<!s8i>) loc(#loc82)
  cir.global "private" constant cir_private dsolocal @".str" = #cir.const_array<"Benign, fixed string\00" : !cir.array<!s8i x 21>> : !cir.array<!s8i x 21> {alignment = 1 : i64} loc(#loc30)
  cir.func no_proto internal private @good1() extra(#fn_attr) {
    %0 = cir.alloca !s32i, !cir.ptr<!s32i>, ["intOne", init] {alignment = 4 : i64} loc(#loc84)
    %1 = cir.alloca !s32i, !cir.ptr<!s32i>, ["intFive", init] {alignment = 4 : i64} loc(#loc85)
    cir.br ^bb1 loc(#loc86)
  ^bb1:  // pred: ^bb0
    %2 = cir.get_global @staticFive : !cir.ptr<!s32i> loc(#loc70)
    %3 = cir.load %2 : !cir.ptr<!s32i>, !s32i loc(#loc38)
    %4 = cir.const #cir.int<5> : !s32i loc(#loc39)
    %5 = cir.cmp(ne, %3, %4) : !s32i, !cir.bool loc(#loc87)
    cir.brcond %5 ^bb2, ^bb3 loc(#loc88)
  ^bb2:  // pred: ^bb1
    %6 = cir.get_global @".str" : !cir.ptr<!cir.array<!s8i x 21>> loc(#loc30)
    %7 = cir.cast(array_to_ptrdecay, %6 : !cir.ptr<!cir.array<!s8i x 21>>), !cir.ptr<!s8i> loc(#loc30)
    cir.call @printLine(%7) : (!cir.ptr<!s8i>) -> () loc(#loc43)
    cir.br ^bb6 loc(#loc41)
  ^bb3:  // pred: ^bb1
    cir.br ^bb4 loc(#loc89)
  ^bb4:  // pred: ^bb3
    %8 = cir.const #cir.int<1> : !s32i loc(#loc34)
    cir.store %8, %0 : !s32i, !cir.ptr<!s32i> loc(#loc84)
    %9 = cir.const #cir.int<5> : !s32i loc(#loc35)
    cir.store %9, %1 : !s32i, !cir.ptr<!s32i> loc(#loc85)
    %10 = cir.load %0 : !cir.ptr<!s32i>, !s32i loc(#loc46)
    cir.call @printIntLine(%10) : (!s32i) -> () loc(#loc47)
    %11 = cir.load %1 : !cir.ptr<!s32i>, !s32i loc(#loc48)
    cir.store %11, %0 : !s32i, !cir.ptr<!s32i> loc(#loc90)
    %12 = cir.load %0 : !cir.ptr<!s32i>, !s32i loc(#loc50)
    cir.call @printIntLine(%12) : (!s32i) -> () loc(#loc51)
    cir.br ^bb5 loc(#loc45)
  ^bb5:  // pred: ^bb4
    cir.br ^bb6 loc(#loc37)
  ^bb6:  // 2 preds: ^bb2, ^bb5
    cir.br ^bb7 loc(#loc37)
  ^bb7:  // pred: ^bb6
    cir.return loc(#loc32)
  } loc(#loc83)
  cir.func no_proto internal private @good2() extra(#fn_attr) {
    %0 = cir.alloca !s32i, !cir.ptr<!s32i>, ["intOne", init] {alignment = 4 : i64} loc(#loc92)
    %1 = cir.alloca !s32i, !cir.ptr<!s32i>, ["intFive", init] {alignment = 4 : i64} loc(#loc93)
    cir.br ^bb1 loc(#loc94)
  ^bb1:  // pred: ^bb0
    %2 = cir.get_global @staticFive : !cir.ptr<!s32i> loc(#loc70)
    %3 = cir.load %2 : !cir.ptr<!s32i>, !s32i loc(#loc59)
    %4 = cir.const #cir.int<5> : !s32i loc(#loc60)
    %5 = cir.cmp(eq, %3, %4) : !s32i, !cir.bool loc(#loc95)
    cir.brcond %5 ^bb2, ^bb5 loc(#loc96)
  ^bb2:  // pred: ^bb1
    cir.br ^bb3 loc(#loc97)
  ^bb3:  // pred: ^bb2
    %6 = cir.const #cir.int<1> : !s32i loc(#loc55)
    cir.store %6, %0 : !s32i, !cir.ptr<!s32i> loc(#loc92)
    %7 = cir.const #cir.int<5> : !s32i loc(#loc56)
    cir.store %7, %1 : !s32i, !cir.ptr<!s32i> loc(#loc93)
    %8 = cir.load %0 : !cir.ptr<!s32i>, !s32i loc(#loc64)
    cir.call @printIntLine(%8) : (!s32i) -> () loc(#loc65)
    %9 = cir.load %1 : !cir.ptr<!s32i>, !s32i loc(#loc66)
    cir.store %9, %0 : !s32i, !cir.ptr<!s32i> loc(#loc98)
    %10 = cir.load %0 : !cir.ptr<!s32i>, !s32i loc(#loc68)
    cir.call @printIntLine(%10) : (!s32i) -> () loc(#loc69)
    cir.br ^bb4 loc(#loc63)
  ^bb4:  // pred: ^bb3
    cir.br ^bb5 loc(#loc58)
  ^bb5:  // 2 preds: ^bb1, ^bb4
    cir.br ^bb6 loc(#loc58)
  ^bb6:  // pred: ^bb5
    cir.return loc(#loc53)
  } loc(#loc91)
} loc(#loc)
#loc = loc("/workspaces/juliet-c/testcases/CWE398_Poor_Code_Quality/CWE398_Poor_Code_Quality__equals_07.c":0:0)
#loc1 = loc("CWE398_Poor_Code_Quality__equals_07.c":21:1)
#loc2 = loc("CWE398_Poor_Code_Quality__equals_07.c":21:25)
#loc3 = loc("../../testcasesupport/std_testcase_io.h":18:1)
#loc4 = loc("../../testcasesupport/std_testcase_io.h":18:33)
#loc5 = loc("CWE398_Poor_Code_Quality__equals_07.c":25:1)
#loc6 = loc("CWE398_Poor_Code_Quality__equals_07.c":37:1)
#loc7 = loc("CWE398_Poor_Code_Quality__equals_07.c":30:13)
#loc8 = loc("CWE398_Poor_Code_Quality__equals_07.c":30:26)
#loc9 = loc("CWE398_Poor_Code_Quality__equals_07.c":27:5)
#loc10 = loc("CWE398_Poor_Code_Quality__equals_07.c":36:5)
#loc11 = loc("CWE398_Poor_Code_Quality__equals_07.c":27:8)
#loc12 = loc("CWE398_Poor_Code_Quality__equals_07.c":27:20)
#loc13 = loc("CWE398_Poor_Code_Quality__equals_07.c":28:5)
#loc14 = loc("CWE398_Poor_Code_Quality__equals_07.c":29:9)
#loc15 = loc("CWE398_Poor_Code_Quality__equals_07.c":35:9)
#loc16 = loc("CWE398_Poor_Code_Quality__equals_07.c":31:26)
#loc17 = loc("CWE398_Poor_Code_Quality__equals_07.c":31:13)
#loc18 = loc("CWE398_Poor_Code_Quality__equals_07.c":33:22)
#loc19 = loc("CWE398_Poor_Code_Quality__equals_07.c":33:13)
#loc20 = loc("CWE398_Poor_Code_Quality__equals_07.c":34:26)
#loc21 = loc("CWE398_Poor_Code_Quality__equals_07.c":34:13)
#loc22 = loc("CWE398_Poor_Code_Quality__equals_07.c":78:1)
#loc23 = loc("CWE398_Poor_Code_Quality__equals_07.c":82:1)
#loc24 = loc("CWE398_Poor_Code_Quality__equals_07.c":80:5)
#loc25 = loc("CWE398_Poor_Code_Quality__equals_07.c":80:11)
#loc26 = loc("CWE398_Poor_Code_Quality__equals_07.c":81:5)
#loc27 = loc("CWE398_Poor_Code_Quality__equals_07.c":81:11)
#loc28 = loc("../../testcasesupport/std_testcase_io.h":14:1)
#loc29 = loc("../../testcasesupport/std_testcase_io.h":14:33)
#loc30 = loc("CWE398_Poor_Code_Quality__equals_07.c":49:19)
#loc31 = loc("CWE398_Poor_Code_Quality__equals_07.c":44:1)
#loc32 = loc("CWE398_Poor_Code_Quality__equals_07.c":61:1)
#loc33 = loc("CWE398_Poor_Code_Quality__equals_07.c":54:13)
#loc34 = loc("CWE398_Poor_Code_Quality__equals_07.c":54:26)
#loc35 = loc("CWE398_Poor_Code_Quality__equals_07.c":54:39)
#loc36 = loc("CWE398_Poor_Code_Quality__equals_07.c":46:5)
#loc37 = loc("CWE398_Poor_Code_Quality__equals_07.c":60:5)
#loc38 = loc("CWE398_Poor_Code_Quality__equals_07.c":46:8)
#loc39 = loc("CWE398_Poor_Code_Quality__equals_07.c":46:20)
#loc40 = loc("CWE398_Poor_Code_Quality__equals_07.c":47:5)
#loc41 = loc("CWE398_Poor_Code_Quality__equals_07.c":50:5)
#loc42 = loc("CWE398_Poor_Code_Quality__equals_07.c":52:5)
#loc43 = loc("CWE398_Poor_Code_Quality__equals_07.c":49:9)
#loc44 = loc("CWE398_Poor_Code_Quality__equals_07.c":53:9)
#loc45 = loc("CWE398_Poor_Code_Quality__equals_07.c":59:9)
#loc46 = loc("CWE398_Poor_Code_Quality__equals_07.c":55:26)
#loc47 = loc("CWE398_Poor_Code_Quality__equals_07.c":55:13)
#loc48 = loc("CWE398_Poor_Code_Quality__equals_07.c":57:22)
#loc49 = loc("CWE398_Poor_Code_Quality__equals_07.c":57:13)
#loc50 = loc("CWE398_Poor_Code_Quality__equals_07.c":58:26)
#loc51 = loc("CWE398_Poor_Code_Quality__equals_07.c":58:13)
#loc52 = loc("CWE398_Poor_Code_Quality__equals_07.c":64:1)
#loc53 = loc("CWE398_Poor_Code_Quality__equals_07.c":76:1)
#loc54 = loc("CWE398_Poor_Code_Quality__equals_07.c":69:13)
#loc55 = loc("CWE398_Poor_Code_Quality__equals_07.c":69:26)
#loc56 = loc("CWE398_Poor_Code_Quality__equals_07.c":69:39)
#loc57 = loc("CWE398_Poor_Code_Quality__equals_07.c":66:5)
#loc58 = loc("CWE398_Poor_Code_Quality__equals_07.c":75:5)
#loc59 = loc("CWE398_Poor_Code_Quality__equals_07.c":66:8)
#loc60 = loc("CWE398_Poor_Code_Quality__equals_07.c":66:20)
#loc61 = loc("CWE398_Poor_Code_Quality__equals_07.c":67:5)
#loc62 = loc("CWE398_Poor_Code_Quality__equals_07.c":68:9)
#loc63 = loc("CWE398_Poor_Code_Quality__equals_07.c":74:9)
#loc64 = loc("CWE398_Poor_Code_Quality__equals_07.c":70:26)
#loc65 = loc("CWE398_Poor_Code_Quality__equals_07.c":70:13)
#loc66 = loc("CWE398_Poor_Code_Quality__equals_07.c":72:22)
#loc67 = loc("CWE398_Poor_Code_Quality__equals_07.c":72:13)
#loc68 = loc("CWE398_Poor_Code_Quality__equals_07.c":73:26)
#loc69 = loc("CWE398_Poor_Code_Quality__equals_07.c":73:13)
#loc70 = loc(fused[#loc1, #loc2])
#loc71 = loc(fused[#loc3, #loc4])
#loc72 = loc(fused[#loc5, #loc6])
#loc73 = loc(fused[#loc7, #loc8])
#loc74 = loc(fused[#loc9, #loc10])
#loc75 = loc(fused[#loc11, #loc12])
#loc76 = loc(fused[#loc13, #loc10])
#loc77 = loc(fused[#loc14, #loc15])
#loc78 = loc(fused[#loc19, #loc18])
#loc79 = loc(fused[#loc22, #loc23])
#loc80 = loc(fused[#loc24, #loc25])
#loc81 = loc(fused[#loc26, #loc27])
#loc82 = loc(fused[#loc28, #loc29])
#loc83 = loc(fused[#loc31, #loc32])
#loc84 = loc(fused[#loc33, #loc34])
#loc85 = loc(fused[#loc33, #loc35])
#loc86 = loc(fused[#loc36, #loc37])
#loc87 = loc(fused[#loc38, #loc39])
#loc88 = loc(fused[#loc40, #loc41, #loc42, #loc37])
#loc89 = loc(fused[#loc44, #loc45])
#loc90 = loc(fused[#loc49, #loc48])
#loc91 = loc(fused[#loc52, #loc53])
#loc92 = loc(fused[#loc54, #loc55])
#loc93 = loc(fused[#loc54, #loc56])
#loc94 = loc(fused[#loc57, #loc58])
#loc95 = loc(fused[#loc59, #loc60])
#loc96 = loc(fused[#loc61, #loc58])
#loc97 = loc(fused[#loc62, #loc63])
#loc98 = loc(fused[#loc67, #loc66])
