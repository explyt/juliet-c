!s32i = !cir.int<s, 32>
!s64i = !cir.int<s, 64>
!s8i = !cir.int<s, 8>
!u16i = !cir.int<u, 16>
!u32i = !cir.int<u, 32>
!u64i = !cir.int<u, 64>
!u8i = !cir.int<u, 8>
!void = !cir.void
#false = #cir.bool<false> : !cir.bool
#fn_attr = #cir<extra({nothrow = #cir.nothrow})>
#fn_attr1 = #cir<extra({inline = #cir.inline<no>, nothrow = #cir.nothrow, optnone = #cir.optnone})>
#loc150 = loc("CWE190_Integer_Overflow__int_connect_socket_square_05.c":359:10)
#loc151 = loc("CWE190_Integer_Overflow__int_connect_socket_square_05.c":359:14)
#loc152 = loc("CWE190_Integer_Overflow__int_connect_socket_square_05.c":359:20)
#loc153 = loc("CWE190_Integer_Overflow__int_connect_socket_square_05.c":359:32)
#true = #cir.bool<true> : !cir.bool
!ty_in_addr = !cir.struct<struct "in_addr" {!u32i} #cir.record.decl.ast>
#loc520 = loc(fused[#loc150, #loc151])
#loc521 = loc(fused[#loc152, #loc153])
!ty_sockaddr = !cir.struct<struct "sockaddr" {!u16i, !cir.array<!s8i x 14>} #cir.record.decl.ast>
!ty_sockaddr_in = !cir.struct<struct "sockaddr_in" {!u16i, !u16i, !ty_in_addr, !cir.array<!u8i x 8>}>
module @"/home/ladisgin/git_proj/juliet-c/testcases/CWE190_Integer_Overflow/s02/CWE190_Integer_Overflow__int_connect_socket_square_05.c" attributes {cir.lang = #cir.lang<c>, cir.sob = #cir.signed_overflow_behavior<undefined>, cir.triple = "x86_64-unknown-linux-gnu", dlti.dl_spec = #dlti.dl_spec<i64 = dense<64> : vector<2xi64>, !llvm.ptr<271> = dense<32> : vector<4xi64>, !llvm.ptr<272> = dense<64> : vector<4xi64>, f128 = dense<128> : vector<2xi64>, !llvm.ptr<270> = dense<32> : vector<4xi64>, f64 = dense<64> : vector<2xi64>, f16 = dense<16> : vector<2xi64>, i32 = dense<32> : vector<2xi64>, i16 = dense<16> : vector<2xi64>, i8 = dense<8> : vector<2xi64>, i1 = dense<8> : vector<2xi64>, !llvm.ptr = dense<64> : vector<4xi64>, f80 = dense<128> : vector<2xi64>, i128 = dense<128> : vector<2xi64>, "dlti.endianness" = "little", "dlti.stack_alignment" = 128 : i64>} {
  cir.global "private" internal dsolocal @staticTrue = #cir.int<1> : !s32i {alignment = 4 : i64} loc(#loc461)
  cir.func private @socket(!s32i, !s32i, !s32i) -> !s32i extra(#fn_attr) loc(#loc462)
  cir.func private @inet_addr(!cir.ptr<!s8i>) -> !u32i extra(#fn_attr) loc(#loc463)
  cir.global "private" constant cir_private dsolocal @".str" = #cir.const_array<"127.0.0.1\00" : !cir.array<!s8i x 10>> : !cir.array<!s8i x 10> {alignment = 1 : i64} loc(#loc7)
  cir.func private @htons(!u16i) -> !u16i extra(#fn_attr) loc(#loc464)
  cir.func private @connect(!s32i, !cir.ptr<!ty_sockaddr>, !u32i) -> !s32i loc(#loc465)
  cir.func private @recv(!s32i, !cir.ptr<!void>, !u64i, !s32i) -> !s64i loc(#loc466)
  cir.func private @atoi(!cir.ptr<!s8i>) -> !s32i extra(#fn_attr) loc(#loc467)
  cir.func private @close(!s32i) -> !s32i loc(#loc468)
  cir.func private @printIntLine(!s32i) loc(#loc469)
  cir.func no_proto @CWE190_Integer_Overflow__int_connect_socket_square_05_bad() extra(#fn_attr1) {
    %0 = cir.alloca !s32i, !cir.ptr<!s32i>, ["data"] {alignment = 4 : i64} loc(#loc471)
    %1 = cir.const #cir.int<0> : !s32i loc(#loc24)
    cir.store %1, %0 : !s32i, !cir.ptr<!s32i> loc(#loc472)
    cir.scope {
      %2 = cir.get_global @staticTrue : !cir.ptr<!s32i> loc(#loc461)
      %3 = cir.load %2 : !cir.ptr<!s32i>, !s32i loc(#loc28)
      %4 = cir.cast(int_to_bool, %3 : !s32i), !cir.bool loc(#loc28)
      cir.if %4 {
        cir.scope {
          %5 = cir.alloca !s32i, !cir.ptr<!s32i>, ["recvResult"] {alignment = 4 : i64} loc(#loc476)
          %6 = cir.alloca !ty_sockaddr_in, !cir.ptr<!ty_sockaddr_in>, ["service"] {alignment = 4 : i64} loc(#loc477)
          %7 = cir.alloca !s32i, !cir.ptr<!s32i>, ["connectSocket", init] {alignment = 4 : i64} loc(#loc478)
          %8 = cir.alloca !cir.array<!s8i x 14>, !cir.ptr<!cir.array<!s8i x 14>>, ["inputBuffer"] {alignment = 1 : i64} loc(#loc479)
          %9 = cir.const #cir.int<1> : !s32i loc(#loc37)
          %10 = cir.unary(minus, %9) : !s32i, !s32i loc(#loc37)
          cir.store %10, %7 : !s32i, !cir.ptr<!s32i> loc(#loc478)
          cir.scope {
            cir.do {
              %11 = cir.const #cir.int<2> : !s32i loc(#loc42)
              %12 = cir.const #cir.int<1> : !s32i loc(#loc43)
              %13 = cir.const #cir.int<6> : !s32i loc(#loc44)
              %14 = cir.call @socket(%11, %12, %13) : (!s32i, !s32i, !s32i) -> !s32i extra(#fn_attr) loc(#loc45)
              cir.store %14, %7 : !s32i, !cir.ptr<!s32i> loc(#loc481)
              cir.scope {
                %53 = cir.load %7 : !cir.ptr<!s32i>, !s32i loc(#loc50)
                %54 = cir.const #cir.int<1> : !s32i loc(#loc51)
                %55 = cir.unary(minus, %54) : !s32i, !s32i loc(#loc51)
                %56 = cir.cmp(eq, %53, %55) : !s32i, !cir.bool loc(#loc483)
                cir.if %56 {
                  cir.break loc(#loc53)
                } loc(#loc484)
              } loc(#loc482)
              %15 = cir.cast(bitcast, %6 : !cir.ptr<!ty_sockaddr_in>), !cir.ptr<!void> loc(#loc485)
              %16 = cir.const #cir.int<0> : !s32i loc(#loc56)
              %17 = cir.const #cir.int<16> : !u64i loc(#loc486)
              cir.libc.memset %17 bytes from %15 set to %16 : !cir.ptr<!void>, !s32i, !u64i loc(#loc487)
              %18 = cir.const #cir.int<2> : !s32i loc(#loc61)
              %19 = cir.cast(integral, %18 : !s32i), !u16i loc(#loc61)
              %20 = cir.get_member %6[0] {name = "sin_family"} : !cir.ptr<!ty_sockaddr_in> -> !cir.ptr<!u16i> loc(#loc62)
              cir.store %19, %20 : !u16i, !cir.ptr<!u16i> loc(#loc488)
              %21 = cir.get_global @".str" : !cir.ptr<!cir.array<!s8i x 10>> loc(#loc7)
              %22 = cir.cast(array_to_ptrdecay, %21 : !cir.ptr<!cir.array<!s8i x 10>>), !cir.ptr<!s8i> loc(#loc7)
              %23 = cir.call @inet_addr(%22) : (!cir.ptr<!s8i>) -> !u32i extra(#fn_attr) loc(#loc64)
              %24 = cir.get_member %6[2] {name = "sin_addr"} : !cir.ptr<!ty_sockaddr_in> -> !cir.ptr<!ty_in_addr> loc(#loc65)
              %25 = cir.get_member %24[0] {name = "s_addr"} : !cir.ptr<!ty_in_addr> -> !cir.ptr<!u32i> loc(#loc66)
              cir.store %23, %25 : !u32i, !cir.ptr<!u32i> loc(#loc489)
              %26 = cir.const #cir.int<27015> : !s32i loc(#loc69)
              %27 = cir.cast(integral, %26 : !s32i), !u16i loc(#loc69)
              %28 = cir.call @htons(%27) : (!u16i) -> !u16i extra(#fn_attr) loc(#loc70)
              %29 = cir.get_member %6[1] {name = "sin_port"} : !cir.ptr<!ty_sockaddr_in> -> !cir.ptr<!u16i> loc(#loc71)
              cir.store %28, %29 : !u16i, !cir.ptr<!u16i> loc(#loc490)
              cir.scope {
                %53 = cir.load %7 : !cir.ptr<!s32i>, !s32i loc(#loc76)
                %54 = cir.cast(bitcast, %6 : !cir.ptr<!ty_sockaddr_in>), !cir.ptr<!ty_sockaddr> loc(#loc492)
                %55 = cir.const #cir.int<16> : !u64i loc(#loc493)
                %56 = cir.cast(integral, %55 : !u64i), !u32i loc(#loc493)
                %57 = cir.call @connect(%53, %54, %56) : (!s32i, !cir.ptr<!ty_sockaddr>, !u32i) -> !s32i loc(#loc81)
                %58 = cir.const #cir.int<1> : !s32i loc(#loc82)
                %59 = cir.unary(minus, %58) : !s32i, !s32i loc(#loc82)
                %60 = cir.cmp(eq, %57, %59) : !s32i, !cir.bool loc(#loc494)
                cir.if %60 {
                  cir.break loc(#loc84)
                } loc(#loc495)
              } loc(#loc491)
              %30 = cir.load %7 : !cir.ptr<!s32i>, !s32i loc(#loc85)
              %31 = cir.cast(array_to_ptrdecay, %8 : !cir.ptr<!cir.array<!s8i x 14>>), !cir.ptr<!s8i> loc(#loc86)
              %32 = cir.cast(bitcast, %31 : !cir.ptr<!s8i>), !cir.ptr<!void> loc(#loc86)
              %33 = cir.const #cir.int<3> : !s32i loc(#loc87)
              %34 = cir.cast(integral, %33 : !s32i), !u64i loc(#loc87)
              %35 = cir.const #cir.int<4> : !u64i loc(#loc87)
              %36 = cir.binop(mul, %34, %35) : !u64i loc(#loc87)
              %37 = cir.const #cir.int<2> : !s32i loc(#loc87)
              %38 = cir.cast(integral, %37 : !s32i), !u64i loc(#loc87)
              %39 = cir.binop(add, %36, %38) : !u64i loc(#loc87)
              %40 = cir.const #cir.int<1> : !s32i loc(#loc88)
              %41 = cir.cast(integral, %40 : !s32i), !u64i loc(#loc88)
              %42 = cir.binop(sub, %39, %41) : !u64i loc(#loc496)
              %43 = cir.const #cir.int<0> : !s32i loc(#loc89)
              %44 = cir.call @recv(%30, %32, %42, %43) : (!s32i, !cir.ptr<!void>, !u64i, !s32i) -> !s64i loc(#loc90)
              %45 = cir.cast(integral, %44 : !s64i), !s32i loc(#loc90)
              cir.store %45, %5 : !s32i, !cir.ptr<!s32i> loc(#loc497)
              cir.scope {
                %53 = cir.load %5 : !cir.ptr<!s32i>, !s32i loc(#loc95)
                %54 = cir.const #cir.int<1> : !s32i loc(#loc96)
                %55 = cir.unary(minus, %54) : !s32i, !s32i loc(#loc96)
                %56 = cir.cmp(eq, %53, %55) : !s32i, !cir.bool loc(#loc499)
                %57 = cir.ternary(%56, true {
                  %58 = cir.const #true loc(#loc97)
                  cir.yield %58 : !cir.bool loc(#loc97)
                }, false {
                  %58 = cir.load %5 : !cir.ptr<!s32i>, !s32i loc(#loc98)
                  %59 = cir.const #cir.int<0> : !s32i loc(#loc99)
                  %60 = cir.cmp(eq, %58, %59) : !s32i, !cir.bool loc(#loc500)
                  %61 = cir.ternary(%60, true {
                    %62 = cir.const #true loc(#loc97)
                    cir.yield %62 : !cir.bool loc(#loc97)
                  }, false {
                    %62 = cir.const #false loc(#loc97)
                    cir.yield %62 : !cir.bool loc(#loc97)
                  }) : (!cir.bool) -> !cir.bool loc(#loc97)
                  cir.yield %61 : !cir.bool loc(#loc97)
                }) : (!cir.bool) -> !cir.bool loc(#loc97)
                cir.if %57 {
                  cir.break loc(#loc101)
                } loc(#loc501)
              } loc(#loc498)
              %46 = cir.const #cir.int<0> : !s32i loc(#loc102)
              %47 = cir.cast(integral, %46 : !s32i), !s8i loc(#loc102)
              %48 = cir.load %5 : !cir.ptr<!s32i>, !s32i loc(#loc103)
              %49 = cir.cast(array_to_ptrdecay, %8 : !cir.ptr<!cir.array<!s8i x 14>>), !cir.ptr<!s8i> loc(#loc104)
              %50 = cir.ptr_stride(%49 : !cir.ptr<!s8i>, %48 : !s32i), !cir.ptr<!s8i> loc(#loc104)
              cir.store %47, %50 : !s8i, !cir.ptr<!s8i> loc(#loc502)
              %51 = cir.cast(array_to_ptrdecay, %8 : !cir.ptr<!cir.array<!s8i x 14>>), !cir.ptr<!s8i> loc(#loc105)
              %52 = cir.call @atoi(%51) : (!cir.ptr<!s8i>) -> !s32i extra(#fn_attr) loc(#loc106)
              cir.store %52, %0 : !s32i, !cir.ptr<!s32i> loc(#loc503)
              cir.yield loc(#loc41)
            } while {
              %11 = cir.const #cir.int<0> : !s32i loc(#loc109)
              %12 = cir.cast(int_to_bool, %11 : !s32i), !cir.bool loc(#loc109)
              cir.condition(%12) loc(#loc109)
            } loc(#loc480)
          } loc(#loc480)
          cir.scope {
            %11 = cir.load %7 : !cir.ptr<!s32i>, !s32i loc(#loc112)
            %12 = cir.const #cir.int<1> : !s32i loc(#loc113)
            %13 = cir.unary(minus, %12) : !s32i, !s32i loc(#loc113)
            %14 = cir.cmp(ne, %11, %13) : !s32i, !cir.bool loc(#loc505)
            cir.if %14 {
              %15 = cir.load %7 : !cir.ptr<!s32i>, !s32i loc(#loc115)
              %16 = cir.call @close(%15) : (!s32i) -> !s32i loc(#loc116)
            } loc(#loc506)
          } loc(#loc504)
        } loc(#loc475)
      } loc(#loc474)
    } loc(#loc473)
    cir.scope {
      %2 = cir.get_global @staticTrue : !cir.ptr<!s32i> loc(#loc461)
      %3 = cir.load %2 : !cir.ptr<!s32i>, !s32i loc(#loc119)
      %4 = cir.cast(int_to_bool, %3 : !s32i), !cir.bool loc(#loc119)
      cir.if %4 {
        cir.scope {
          %5 = cir.alloca !s32i, !cir.ptr<!s32i>, ["result", init] {alignment = 4 : i64} loc(#loc510)
          %6 = cir.load %0 : !cir.ptr<!s32i>, !s32i loc(#loc125)
          %7 = cir.load %0 : !cir.ptr<!s32i>, !s32i loc(#loc124)
          %8 = cir.binop(mul, %6, %7) nsw : !s32i loc(#loc125)
          cir.store %8, %5 : !s32i, !cir.ptr<!s32i> loc(#loc510)
          %9 = cir.load %5 : !cir.ptr<!s32i>, !s32i loc(#loc126)
          cir.call @printIntLine(%9) : (!s32i) -> () loc(#loc127)
        } loc(#loc509)
      } loc(#loc508)
    } loc(#loc507)
    cir.return loc(#loc21)
  } loc(#loc470)
  cir.func no_proto @CWE190_Integer_Overflow__int_connect_socket_square_05_good() extra(#fn_attr1) {
    %0 = cir.get_global @goodB2G1 : !cir.ptr<!cir.func<!void ()>> loc(#loc512)
    cir.call %0() : (!cir.ptr<!cir.func<!void ()>>) -> () loc(#loc130)
    %1 = cir.get_global @goodB2G2 : !cir.ptr<!cir.func<!void ()>> loc(#loc513)
    cir.call %1() : (!cir.ptr<!cir.func<!void ()>>) -> () loc(#loc132)
    %2 = cir.get_global @goodG2B1 : !cir.ptr<!cir.func<!void ()>> loc(#loc514)
    cir.call %2() : (!cir.ptr<!cir.func<!void ()>>) -> () loc(#loc134)
    %3 = cir.get_global @goodG2B2 : !cir.ptr<!cir.func<!void ()>> loc(#loc515)
    cir.call %3() : (!cir.ptr<!cir.func<!void ()>>) -> () loc(#loc136)
    cir.return loc(#loc129)
  } loc(#loc511)
  cir.func private @srand(!u32i) extra(#fn_attr) loc(#loc516)
  cir.func private @time(!cir.ptr<!s64i>) -> !s64i extra(#fn_attr) loc(#loc517)
  cir.func private @printLine(!cir.ptr<!s8i>) loc(#loc518)
  cir.global "private" constant cir_private dsolocal @".str.1" = #cir.const_array<"Calling good()...\00" : !cir.array<!s8i x 18>> : !cir.array<!s8i x 18> {alignment = 1 : i64} loc(#loc144)
  cir.global "private" constant cir_private dsolocal @".str.2" = #cir.const_array<"Finished good()\00" : !cir.array<!s8i x 16>> : !cir.array<!s8i x 16> {alignment = 1 : i64} loc(#loc145)
  cir.global "private" constant cir_private dsolocal @".str.3" = #cir.const_array<"Calling bad()...\00" : !cir.array<!s8i x 17>> : !cir.array<!s8i x 17> {alignment = 1 : i64} loc(#loc146)
  cir.global "private" constant cir_private dsolocal @".str.4" = #cir.const_array<"Finished bad()\00" : !cir.array<!s8i x 15>> : !cir.array<!s8i x 15> {alignment = 1 : i64} loc(#loc147)
  cir.func @main(%arg0: !s32i loc(fused[#loc150, #loc151]), %arg1: !cir.ptr<!cir.ptr<!s8i>> loc(fused[#loc152, #loc153])) -> !s32i extra(#fn_attr1) {
    %0 = cir.alloca !s32i, !cir.ptr<!s32i>, ["argc", init] {alignment = 4 : i64} loc(#loc520)
    %1 = cir.alloca !cir.ptr<!cir.ptr<!s8i>>, !cir.ptr<!cir.ptr<!cir.ptr<!s8i>>>, ["argv", init] {alignment = 8 : i64} loc(#loc521)
    %2 = cir.alloca !s32i, !cir.ptr<!s32i>, ["__retval"] {alignment = 4 : i64} loc(#loc149)
    cir.store %arg0, %0 : !s32i, !cir.ptr<!s32i> loc(#loc154)
    cir.store %arg1, %1 : !cir.ptr<!cir.ptr<!s8i>>, !cir.ptr<!cir.ptr<!cir.ptr<!s8i>>> loc(#loc154)
    %3 = cir.const #cir.ptr<null> : !cir.ptr<!s64i> loc(#loc155)
    %4 = cir.call @time(%3) : (!cir.ptr<!s64i>) -> !s64i extra(#fn_attr) loc(#loc156)
    %5 = cir.cast(integral, %4 : !s64i), !u32i loc(#loc156)
    cir.call @srand(%5) : (!u32i) -> () extra(#fn_attr) loc(#loc157)
    %6 = cir.get_global @".str.1" : !cir.ptr<!cir.array<!s8i x 18>> loc(#loc144)
    %7 = cir.cast(array_to_ptrdecay, %6 : !cir.ptr<!cir.array<!s8i x 18>>), !cir.ptr<!s8i> loc(#loc144)
    cir.call @printLine(%7) : (!cir.ptr<!s8i>) -> () loc(#loc158)
    %8 = cir.get_global @CWE190_Integer_Overflow__int_connect_socket_square_05_good : !cir.ptr<!cir.func<!void ()>> loc(#loc522)
    cir.call @CWE190_Integer_Overflow__int_connect_socket_square_05_good() : () -> () loc(#loc159)
    %9 = cir.get_global @".str.2" : !cir.ptr<!cir.array<!s8i x 16>> loc(#loc145)
    %10 = cir.cast(array_to_ptrdecay, %9 : !cir.ptr<!cir.array<!s8i x 16>>), !cir.ptr<!s8i> loc(#loc145)
    cir.call @printLine(%10) : (!cir.ptr<!s8i>) -> () loc(#loc161)
    %11 = cir.get_global @".str.3" : !cir.ptr<!cir.array<!s8i x 17>> loc(#loc146)
    %12 = cir.cast(array_to_ptrdecay, %11 : !cir.ptr<!cir.array<!s8i x 17>>), !cir.ptr<!s8i> loc(#loc146)
    cir.call @printLine(%12) : (!cir.ptr<!s8i>) -> () loc(#loc162)
    %13 = cir.get_global @CWE190_Integer_Overflow__int_connect_socket_square_05_bad : !cir.ptr<!cir.func<!void ()>> loc(#loc523)
    cir.call @CWE190_Integer_Overflow__int_connect_socket_square_05_bad() : () -> () loc(#loc163)
    %14 = cir.get_global @".str.4" : !cir.ptr<!cir.array<!s8i x 15>> loc(#loc147)
    %15 = cir.cast(array_to_ptrdecay, %14 : !cir.ptr<!cir.array<!s8i x 15>>), !cir.ptr<!s8i> loc(#loc147)
    cir.call @printLine(%15) : (!cir.ptr<!s8i>) -> () loc(#loc165)
    %16 = cir.const #cir.int<0> : !s32i loc(#loc166)
    cir.store %16, %2 : !s32i, !cir.ptr<!s32i> loc(#loc524)
    %17 = cir.load %2 : !cir.ptr<!s32i>, !s32i loc(#loc524)
    cir.return %17 : !s32i loc(#loc524)
  } loc(#loc519)
  cir.global "private" internal dsolocal @staticFalse = #cir.int<0> : !s32i {alignment = 4 : i64} loc(#loc525)
  cir.global "private" constant cir_private dsolocal @".str.5" = #cir.const_array<"Benign, fixed string\00" : !cir.array<!s8i x 21>> : !cir.array<!s8i x 21> {alignment = 1 : i64} loc(#loc170)
  cir.func private @sqrt(!cir.double) -> !cir.double extra(#fn_attr) loc(#loc171)
  cir.global "private" constant cir_private dsolocal @".str.6" = #cir.const_array<"data value is too large to perform arithmetic safely.\00" : !cir.array<!s8i x 54>> : !cir.array<!s8i x 54> {alignment = 1 : i64} loc(#loc172)
  cir.func no_proto internal private @goodB2G1() extra(#fn_attr1) {
    %0 = cir.alloca !s32i, !cir.ptr<!s32i>, ["data"] {alignment = 4 : i64} loc(#loc527)
    %1 = cir.const #cir.int<0> : !s32i loc(#loc177)
    cir.store %1, %0 : !s32i, !cir.ptr<!s32i> loc(#loc528)
    cir.scope {
      %2 = cir.get_global @staticTrue : !cir.ptr<!s32i> loc(#loc461)
      %3 = cir.load %2 : !cir.ptr<!s32i>, !s32i loc(#loc181)
      %4 = cir.cast(int_to_bool, %3 : !s32i), !cir.bool loc(#loc181)
      cir.if %4 {
        cir.scope {
          %5 = cir.alloca !s32i, !cir.ptr<!s32i>, ["recvResult"] {alignment = 4 : i64} loc(#loc532)
          %6 = cir.alloca !ty_sockaddr_in, !cir.ptr<!ty_sockaddr_in>, ["service"] {alignment = 4 : i64} loc(#loc533)
          %7 = cir.alloca !s32i, !cir.ptr<!s32i>, ["connectSocket", init] {alignment = 4 : i64} loc(#loc534)
          %8 = cir.alloca !cir.array<!s8i x 14>, !cir.ptr<!cir.array<!s8i x 14>>, ["inputBuffer"] {alignment = 1 : i64} loc(#loc535)
          %9 = cir.const #cir.int<1> : !s32i loc(#loc190)
          %10 = cir.unary(minus, %9) : !s32i, !s32i loc(#loc190)
          cir.store %10, %7 : !s32i, !cir.ptr<!s32i> loc(#loc534)
          cir.scope {
            cir.do {
              %11 = cir.const #cir.int<2> : !s32i loc(#loc195)
              %12 = cir.const #cir.int<1> : !s32i loc(#loc196)
              %13 = cir.const #cir.int<6> : !s32i loc(#loc197)
              %14 = cir.call @socket(%11, %12, %13) : (!s32i, !s32i, !s32i) -> !s32i extra(#fn_attr) loc(#loc198)
              cir.store %14, %7 : !s32i, !cir.ptr<!s32i> loc(#loc537)
              cir.scope {
                %53 = cir.load %7 : !cir.ptr<!s32i>, !s32i loc(#loc203)
                %54 = cir.const #cir.int<1> : !s32i loc(#loc204)
                %55 = cir.unary(minus, %54) : !s32i, !s32i loc(#loc204)
                %56 = cir.cmp(eq, %53, %55) : !s32i, !cir.bool loc(#loc539)
                cir.if %56 {
                  cir.break loc(#loc206)
                } loc(#loc540)
              } loc(#loc538)
              %15 = cir.cast(bitcast, %6 : !cir.ptr<!ty_sockaddr_in>), !cir.ptr<!void> loc(#loc541)
              %16 = cir.const #cir.int<0> : !s32i loc(#loc209)
              %17 = cir.const #cir.int<16> : !u64i loc(#loc542)
              cir.libc.memset %17 bytes from %15 set to %16 : !cir.ptr<!void>, !s32i, !u64i loc(#loc543)
              %18 = cir.const #cir.int<2> : !s32i loc(#loc214)
              %19 = cir.cast(integral, %18 : !s32i), !u16i loc(#loc214)
              %20 = cir.get_member %6[0] {name = "sin_family"} : !cir.ptr<!ty_sockaddr_in> -> !cir.ptr<!u16i> loc(#loc62)
              cir.store %19, %20 : !u16i, !cir.ptr<!u16i> loc(#loc544)
              %21 = cir.get_global @".str" : !cir.ptr<!cir.array<!s8i x 10>> loc(#loc216)
              %22 = cir.cast(array_to_ptrdecay, %21 : !cir.ptr<!cir.array<!s8i x 10>>), !cir.ptr<!s8i> loc(#loc216)
              %23 = cir.call @inet_addr(%22) : (!cir.ptr<!s8i>) -> !u32i extra(#fn_attr) loc(#loc217)
              %24 = cir.get_member %6[2] {name = "sin_addr"} : !cir.ptr<!ty_sockaddr_in> -> !cir.ptr<!ty_in_addr> loc(#loc65)
              %25 = cir.get_member %24[0] {name = "s_addr"} : !cir.ptr<!ty_in_addr> -> !cir.ptr<!u32i> loc(#loc66)
              cir.store %23, %25 : !u32i, !cir.ptr<!u32i> loc(#loc545)
              %26 = cir.const #cir.int<27015> : !s32i loc(#loc220)
              %27 = cir.cast(integral, %26 : !s32i), !u16i loc(#loc220)
              %28 = cir.call @htons(%27) : (!u16i) -> !u16i extra(#fn_attr) loc(#loc221)
              %29 = cir.get_member %6[1] {name = "sin_port"} : !cir.ptr<!ty_sockaddr_in> -> !cir.ptr<!u16i> loc(#loc71)
              cir.store %28, %29 : !u16i, !cir.ptr<!u16i> loc(#loc546)
              cir.scope {
                %53 = cir.load %7 : !cir.ptr<!s32i>, !s32i loc(#loc226)
                %54 = cir.cast(bitcast, %6 : !cir.ptr<!ty_sockaddr_in>), !cir.ptr<!ty_sockaddr> loc(#loc548)
                %55 = cir.const #cir.int<16> : !u64i loc(#loc549)
                %56 = cir.cast(integral, %55 : !u64i), !u32i loc(#loc549)
                %57 = cir.call @connect(%53, %54, %56) : (!s32i, !cir.ptr<!ty_sockaddr>, !u32i) -> !s32i loc(#loc231)
                %58 = cir.const #cir.int<1> : !s32i loc(#loc232)
                %59 = cir.unary(minus, %58) : !s32i, !s32i loc(#loc232)
                %60 = cir.cmp(eq, %57, %59) : !s32i, !cir.bool loc(#loc550)
                cir.if %60 {
                  cir.break loc(#loc234)
                } loc(#loc551)
              } loc(#loc547)
              %30 = cir.load %7 : !cir.ptr<!s32i>, !s32i loc(#loc235)
              %31 = cir.cast(array_to_ptrdecay, %8 : !cir.ptr<!cir.array<!s8i x 14>>), !cir.ptr<!s8i> loc(#loc236)
              %32 = cir.cast(bitcast, %31 : !cir.ptr<!s8i>), !cir.ptr<!void> loc(#loc236)
              %33 = cir.const #cir.int<3> : !s32i loc(#loc237)
              %34 = cir.cast(integral, %33 : !s32i), !u64i loc(#loc237)
              %35 = cir.const #cir.int<4> : !u64i loc(#loc237)
              %36 = cir.binop(mul, %34, %35) : !u64i loc(#loc237)
              %37 = cir.const #cir.int<2> : !s32i loc(#loc237)
              %38 = cir.cast(integral, %37 : !s32i), !u64i loc(#loc237)
              %39 = cir.binop(add, %36, %38) : !u64i loc(#loc237)
              %40 = cir.const #cir.int<1> : !s32i loc(#loc238)
              %41 = cir.cast(integral, %40 : !s32i), !u64i loc(#loc238)
              %42 = cir.binop(sub, %39, %41) : !u64i loc(#loc552)
              %43 = cir.const #cir.int<0> : !s32i loc(#loc239)
              %44 = cir.call @recv(%30, %32, %42, %43) : (!s32i, !cir.ptr<!void>, !u64i, !s32i) -> !s64i loc(#loc240)
              %45 = cir.cast(integral, %44 : !s64i), !s32i loc(#loc240)
              cir.store %45, %5 : !s32i, !cir.ptr<!s32i> loc(#loc553)
              cir.scope {
                %53 = cir.load %5 : !cir.ptr<!s32i>, !s32i loc(#loc245)
                %54 = cir.const #cir.int<1> : !s32i loc(#loc246)
                %55 = cir.unary(minus, %54) : !s32i, !s32i loc(#loc246)
                %56 = cir.cmp(eq, %53, %55) : !s32i, !cir.bool loc(#loc555)
                %57 = cir.ternary(%56, true {
                  %58 = cir.const #true loc(#loc247)
                  cir.yield %58 : !cir.bool loc(#loc247)
                }, false {
                  %58 = cir.load %5 : !cir.ptr<!s32i>, !s32i loc(#loc248)
                  %59 = cir.const #cir.int<0> : !s32i loc(#loc249)
                  %60 = cir.cmp(eq, %58, %59) : !s32i, !cir.bool loc(#loc556)
                  %61 = cir.ternary(%60, true {
                    %62 = cir.const #true loc(#loc247)
                    cir.yield %62 : !cir.bool loc(#loc247)
                  }, false {
                    %62 = cir.const #false loc(#loc247)
                    cir.yield %62 : !cir.bool loc(#loc247)
                  }) : (!cir.bool) -> !cir.bool loc(#loc247)
                  cir.yield %61 : !cir.bool loc(#loc247)
                }) : (!cir.bool) -> !cir.bool loc(#loc247)
                cir.if %57 {
                  cir.break loc(#loc251)
                } loc(#loc557)
              } loc(#loc554)
              %46 = cir.const #cir.int<0> : !s32i loc(#loc252)
              %47 = cir.cast(integral, %46 : !s32i), !s8i loc(#loc252)
              %48 = cir.load %5 : !cir.ptr<!s32i>, !s32i loc(#loc253)
              %49 = cir.cast(array_to_ptrdecay, %8 : !cir.ptr<!cir.array<!s8i x 14>>), !cir.ptr<!s8i> loc(#loc254)
              %50 = cir.ptr_stride(%49 : !cir.ptr<!s8i>, %48 : !s32i), !cir.ptr<!s8i> loc(#loc254)
              cir.store %47, %50 : !s8i, !cir.ptr<!s8i> loc(#loc558)
              %51 = cir.cast(array_to_ptrdecay, %8 : !cir.ptr<!cir.array<!s8i x 14>>), !cir.ptr<!s8i> loc(#loc255)
              %52 = cir.call @atoi(%51) : (!cir.ptr<!s8i>) -> !s32i extra(#fn_attr) loc(#loc256)
              cir.store %52, %0 : !s32i, !cir.ptr<!s32i> loc(#loc559)
              cir.yield loc(#loc194)
            } while {
              %11 = cir.const #cir.int<0> : !s32i loc(#loc259)
              %12 = cir.cast(int_to_bool, %11 : !s32i), !cir.bool loc(#loc259)
              cir.condition(%12) loc(#loc259)
            } loc(#loc536)
          } loc(#loc536)
          cir.scope {
            %11 = cir.load %7 : !cir.ptr<!s32i>, !s32i loc(#loc262)
            %12 = cir.const #cir.int<1> : !s32i loc(#loc263)
            %13 = cir.unary(minus, %12) : !s32i, !s32i loc(#loc263)
            %14 = cir.cmp(ne, %11, %13) : !s32i, !cir.bool loc(#loc561)
            cir.if %14 {
              %15 = cir.load %7 : !cir.ptr<!s32i>, !s32i loc(#loc265)
              %16 = cir.call @close(%15) : (!s32i) -> !s32i loc(#loc266)
            } loc(#loc562)
          } loc(#loc560)
        } loc(#loc531)
      } loc(#loc530)
    } loc(#loc529)
    cir.scope {
      %2 = cir.get_global @staticFalse : !cir.ptr<!s32i> loc(#loc525)
      %3 = cir.load %2 : !cir.ptr<!s32i>, !s32i loc(#loc269)
      %4 = cir.cast(int_to_bool, %3 : !s32i), !cir.bool loc(#loc269)
      cir.if %4 {
        %5 = cir.get_global @".str.5" : !cir.ptr<!cir.array<!s8i x 21>> loc(#loc170)
        %6 = cir.cast(array_to_ptrdecay, %5 : !cir.ptr<!cir.array<!s8i x 21>>), !cir.ptr<!s8i> loc(#loc170)
        cir.call @printLine(%6) : (!cir.ptr<!s8i>) -> () loc(#loc273)
      } else {
        cir.scope {
          %5 = cir.load %0 : !cir.ptr<!s32i>, !s32i loc(#loc276)
          %6 = cir.const #cir.int<2147483647> : !s32i loc(#loc277)
          %7 = cir.unary(minus, %6) : !s32i, !s32i loc(#loc277)
          %8 = cir.const #cir.int<1> : !s32i loc(#loc277)
          %9 = cir.binop(sub, %7, %8) nsw : !s32i loc(#loc277)
          %10 = cir.cmp(gt, %5, %9) : !s32i, !cir.bool loc(#loc566)
          %11 = cir.ternary(%10, true {
            %12 = cir.load %0 : !cir.ptr<!s32i>, !s32i loc(#loc279)
            %13 = cir.abs %12 poison : !s32i loc(#loc280)
            %14 = cir.cast(integral, %13 : !s32i), !s64i loc(#loc280)
            %15 = cir.get_global @sqrt : !cir.ptr<!cir.func<!cir.double (!cir.double)>> loc(#loc281)
            %16 = cir.const #cir.int<2147483647> : !s32i loc(#loc282)
            %17 = cir.cast(int_to_float, %16 : !s32i), !cir.double loc(#loc282)
            %18 = cir.call @sqrt(%17) : (!cir.double) -> !cir.double extra(#fn_attr) loc(#loc281)
            %19 = cir.cast(float_to_int, %18 : !cir.double), !s64i loc(#loc281)
            %20 = cir.cmp(lt, %14, %19) : !s64i, !cir.bool loc(#loc567)
            %21 = cir.ternary(%20, true {
              %22 = cir.const #true loc(#loc278)
              cir.yield %22 : !cir.bool loc(#loc278)
            }, false {
              %22 = cir.const #false loc(#loc278)
              cir.yield %22 : !cir.bool loc(#loc278)
            }) : (!cir.bool) -> !cir.bool loc(#loc278)
            cir.yield %21 : !cir.bool loc(#loc278)
          }, false {
            %12 = cir.const #false loc(#loc278)
            cir.yield %12 : !cir.bool loc(#loc278)
          }) : (!cir.bool) -> !cir.bool loc(#loc278)
          cir.if %11 {
            %12 = cir.alloca !s32i, !cir.ptr<!s32i>, ["result", init] {alignment = 4 : i64} loc(#loc569)
            %13 = cir.load %0 : !cir.ptr<!s32i>, !s32i loc(#loc289)
            %14 = cir.load %0 : !cir.ptr<!s32i>, !s32i loc(#loc288)
            %15 = cir.binop(mul, %13, %14) nsw : !s32i loc(#loc289)
            cir.store %15, %12 : !s32i, !cir.ptr<!s32i> loc(#loc569)
            %16 = cir.load %12 : !cir.ptr<!s32i>, !s32i loc(#loc290)
            cir.call @printIntLine(%16) : (!s32i) -> () loc(#loc291)
          } else {
            %12 = cir.get_global @".str.6" : !cir.ptr<!cir.array<!s8i x 54>> loc(#loc172)
            %13 = cir.cast(array_to_ptrdecay, %12 : !cir.ptr<!cir.array<!s8i x 54>>), !cir.ptr<!s8i> loc(#loc172)
            cir.call @printLine(%13) : (!cir.ptr<!s8i>) -> () loc(#loc292)
          } loc(#loc568)
        } loc(#loc565)
      } loc(#loc564)
    } loc(#loc563)
    cir.return loc(#loc174)
  } loc(#loc526)
  cir.func no_proto internal private @goodB2G2() extra(#fn_attr1) {
    %0 = cir.alloca !s32i, !cir.ptr<!s32i>, ["data"] {alignment = 4 : i64} loc(#loc571)
    %1 = cir.const #cir.int<0> : !s32i loc(#loc297)
    cir.store %1, %0 : !s32i, !cir.ptr<!s32i> loc(#loc572)
    cir.scope {
      %2 = cir.get_global @staticTrue : !cir.ptr<!s32i> loc(#loc461)
      %3 = cir.load %2 : !cir.ptr<!s32i>, !s32i loc(#loc301)
      %4 = cir.cast(int_to_bool, %3 : !s32i), !cir.bool loc(#loc301)
      cir.if %4 {
        cir.scope {
          %5 = cir.alloca !s32i, !cir.ptr<!s32i>, ["recvResult"] {alignment = 4 : i64} loc(#loc576)
          %6 = cir.alloca !ty_sockaddr_in, !cir.ptr<!ty_sockaddr_in>, ["service"] {alignment = 4 : i64} loc(#loc577)
          %7 = cir.alloca !s32i, !cir.ptr<!s32i>, ["connectSocket", init] {alignment = 4 : i64} loc(#loc578)
          %8 = cir.alloca !cir.array<!s8i x 14>, !cir.ptr<!cir.array<!s8i x 14>>, ["inputBuffer"] {alignment = 1 : i64} loc(#loc579)
          %9 = cir.const #cir.int<1> : !s32i loc(#loc310)
          %10 = cir.unary(minus, %9) : !s32i, !s32i loc(#loc310)
          cir.store %10, %7 : !s32i, !cir.ptr<!s32i> loc(#loc578)
          cir.scope {
            cir.do {
              %11 = cir.const #cir.int<2> : !s32i loc(#loc315)
              %12 = cir.const #cir.int<1> : !s32i loc(#loc316)
              %13 = cir.const #cir.int<6> : !s32i loc(#loc317)
              %14 = cir.call @socket(%11, %12, %13) : (!s32i, !s32i, !s32i) -> !s32i extra(#fn_attr) loc(#loc318)
              cir.store %14, %7 : !s32i, !cir.ptr<!s32i> loc(#loc581)
              cir.scope {
                %53 = cir.load %7 : !cir.ptr<!s32i>, !s32i loc(#loc323)
                %54 = cir.const #cir.int<1> : !s32i loc(#loc324)
                %55 = cir.unary(minus, %54) : !s32i, !s32i loc(#loc324)
                %56 = cir.cmp(eq, %53, %55) : !s32i, !cir.bool loc(#loc583)
                cir.if %56 {
                  cir.break loc(#loc326)
                } loc(#loc584)
              } loc(#loc582)
              %15 = cir.cast(bitcast, %6 : !cir.ptr<!ty_sockaddr_in>), !cir.ptr<!void> loc(#loc585)
              %16 = cir.const #cir.int<0> : !s32i loc(#loc329)
              %17 = cir.const #cir.int<16> : !u64i loc(#loc586)
              cir.libc.memset %17 bytes from %15 set to %16 : !cir.ptr<!void>, !s32i, !u64i loc(#loc587)
              %18 = cir.const #cir.int<2> : !s32i loc(#loc334)
              %19 = cir.cast(integral, %18 : !s32i), !u16i loc(#loc334)
              %20 = cir.get_member %6[0] {name = "sin_family"} : !cir.ptr<!ty_sockaddr_in> -> !cir.ptr<!u16i> loc(#loc62)
              cir.store %19, %20 : !u16i, !cir.ptr<!u16i> loc(#loc588)
              %21 = cir.get_global @".str" : !cir.ptr<!cir.array<!s8i x 10>> loc(#loc336)
              %22 = cir.cast(array_to_ptrdecay, %21 : !cir.ptr<!cir.array<!s8i x 10>>), !cir.ptr<!s8i> loc(#loc336)
              %23 = cir.call @inet_addr(%22) : (!cir.ptr<!s8i>) -> !u32i extra(#fn_attr) loc(#loc337)
              %24 = cir.get_member %6[2] {name = "sin_addr"} : !cir.ptr<!ty_sockaddr_in> -> !cir.ptr<!ty_in_addr> loc(#loc65)
              %25 = cir.get_member %24[0] {name = "s_addr"} : !cir.ptr<!ty_in_addr> -> !cir.ptr<!u32i> loc(#loc66)
              cir.store %23, %25 : !u32i, !cir.ptr<!u32i> loc(#loc589)
              %26 = cir.const #cir.int<27015> : !s32i loc(#loc340)
              %27 = cir.cast(integral, %26 : !s32i), !u16i loc(#loc340)
              %28 = cir.call @htons(%27) : (!u16i) -> !u16i extra(#fn_attr) loc(#loc341)
              %29 = cir.get_member %6[1] {name = "sin_port"} : !cir.ptr<!ty_sockaddr_in> -> !cir.ptr<!u16i> loc(#loc71)
              cir.store %28, %29 : !u16i, !cir.ptr<!u16i> loc(#loc590)
              cir.scope {
                %53 = cir.load %7 : !cir.ptr<!s32i>, !s32i loc(#loc346)
                %54 = cir.cast(bitcast, %6 : !cir.ptr<!ty_sockaddr_in>), !cir.ptr<!ty_sockaddr> loc(#loc592)
                %55 = cir.const #cir.int<16> : !u64i loc(#loc593)
                %56 = cir.cast(integral, %55 : !u64i), !u32i loc(#loc593)
                %57 = cir.call @connect(%53, %54, %56) : (!s32i, !cir.ptr<!ty_sockaddr>, !u32i) -> !s32i loc(#loc351)
                %58 = cir.const #cir.int<1> : !s32i loc(#loc352)
                %59 = cir.unary(minus, %58) : !s32i, !s32i loc(#loc352)
                %60 = cir.cmp(eq, %57, %59) : !s32i, !cir.bool loc(#loc594)
                cir.if %60 {
                  cir.break loc(#loc354)
                } loc(#loc595)
              } loc(#loc591)
              %30 = cir.load %7 : !cir.ptr<!s32i>, !s32i loc(#loc355)
              %31 = cir.cast(array_to_ptrdecay, %8 : !cir.ptr<!cir.array<!s8i x 14>>), !cir.ptr<!s8i> loc(#loc356)
              %32 = cir.cast(bitcast, %31 : !cir.ptr<!s8i>), !cir.ptr<!void> loc(#loc356)
              %33 = cir.const #cir.int<3> : !s32i loc(#loc357)
              %34 = cir.cast(integral, %33 : !s32i), !u64i loc(#loc357)
              %35 = cir.const #cir.int<4> : !u64i loc(#loc357)
              %36 = cir.binop(mul, %34, %35) : !u64i loc(#loc357)
              %37 = cir.const #cir.int<2> : !s32i loc(#loc357)
              %38 = cir.cast(integral, %37 : !s32i), !u64i loc(#loc357)
              %39 = cir.binop(add, %36, %38) : !u64i loc(#loc357)
              %40 = cir.const #cir.int<1> : !s32i loc(#loc358)
              %41 = cir.cast(integral, %40 : !s32i), !u64i loc(#loc358)
              %42 = cir.binop(sub, %39, %41) : !u64i loc(#loc596)
              %43 = cir.const #cir.int<0> : !s32i loc(#loc359)
              %44 = cir.call @recv(%30, %32, %42, %43) : (!s32i, !cir.ptr<!void>, !u64i, !s32i) -> !s64i loc(#loc360)
              %45 = cir.cast(integral, %44 : !s64i), !s32i loc(#loc360)
              cir.store %45, %5 : !s32i, !cir.ptr<!s32i> loc(#loc597)
              cir.scope {
                %53 = cir.load %5 : !cir.ptr<!s32i>, !s32i loc(#loc365)
                %54 = cir.const #cir.int<1> : !s32i loc(#loc366)
                %55 = cir.unary(minus, %54) : !s32i, !s32i loc(#loc366)
                %56 = cir.cmp(eq, %53, %55) : !s32i, !cir.bool loc(#loc599)
                %57 = cir.ternary(%56, true {
                  %58 = cir.const #true loc(#loc367)
                  cir.yield %58 : !cir.bool loc(#loc367)
                }, false {
                  %58 = cir.load %5 : !cir.ptr<!s32i>, !s32i loc(#loc368)
                  %59 = cir.const #cir.int<0> : !s32i loc(#loc369)
                  %60 = cir.cmp(eq, %58, %59) : !s32i, !cir.bool loc(#loc600)
                  %61 = cir.ternary(%60, true {
                    %62 = cir.const #true loc(#loc367)
                    cir.yield %62 : !cir.bool loc(#loc367)
                  }, false {
                    %62 = cir.const #false loc(#loc367)
                    cir.yield %62 : !cir.bool loc(#loc367)
                  }) : (!cir.bool) -> !cir.bool loc(#loc367)
                  cir.yield %61 : !cir.bool loc(#loc367)
                }) : (!cir.bool) -> !cir.bool loc(#loc367)
                cir.if %57 {
                  cir.break loc(#loc371)
                } loc(#loc601)
              } loc(#loc598)
              %46 = cir.const #cir.int<0> : !s32i loc(#loc372)
              %47 = cir.cast(integral, %46 : !s32i), !s8i loc(#loc372)
              %48 = cir.load %5 : !cir.ptr<!s32i>, !s32i loc(#loc373)
              %49 = cir.cast(array_to_ptrdecay, %8 : !cir.ptr<!cir.array<!s8i x 14>>), !cir.ptr<!s8i> loc(#loc374)
              %50 = cir.ptr_stride(%49 : !cir.ptr<!s8i>, %48 : !s32i), !cir.ptr<!s8i> loc(#loc374)
              cir.store %47, %50 : !s8i, !cir.ptr<!s8i> loc(#loc602)
              %51 = cir.cast(array_to_ptrdecay, %8 : !cir.ptr<!cir.array<!s8i x 14>>), !cir.ptr<!s8i> loc(#loc375)
              %52 = cir.call @atoi(%51) : (!cir.ptr<!s8i>) -> !s32i extra(#fn_attr) loc(#loc376)
              cir.store %52, %0 : !s32i, !cir.ptr<!s32i> loc(#loc603)
              cir.yield loc(#loc314)
            } while {
              %11 = cir.const #cir.int<0> : !s32i loc(#loc379)
              %12 = cir.cast(int_to_bool, %11 : !s32i), !cir.bool loc(#loc379)
              cir.condition(%12) loc(#loc379)
            } loc(#loc580)
          } loc(#loc580)
          cir.scope {
            %11 = cir.load %7 : !cir.ptr<!s32i>, !s32i loc(#loc382)
            %12 = cir.const #cir.int<1> : !s32i loc(#loc383)
            %13 = cir.unary(minus, %12) : !s32i, !s32i loc(#loc383)
            %14 = cir.cmp(ne, %11, %13) : !s32i, !cir.bool loc(#loc605)
            cir.if %14 {
              %15 = cir.load %7 : !cir.ptr<!s32i>, !s32i loc(#loc385)
              %16 = cir.call @close(%15) : (!s32i) -> !s32i loc(#loc386)
            } loc(#loc606)
          } loc(#loc604)
        } loc(#loc575)
      } loc(#loc574)
    } loc(#loc573)
    cir.scope {
      %2 = cir.get_global @staticTrue : !cir.ptr<!s32i> loc(#loc461)
      %3 = cir.load %2 : !cir.ptr<!s32i>, !s32i loc(#loc389)
      %4 = cir.cast(int_to_bool, %3 : !s32i), !cir.bool loc(#loc389)
      cir.if %4 {
        cir.scope {
          %5 = cir.load %0 : !cir.ptr<!s32i>, !s32i loc(#loc393)
          %6 = cir.const #cir.int<2147483647> : !s32i loc(#loc394)
          %7 = cir.unary(minus, %6) : !s32i, !s32i loc(#loc394)
          %8 = cir.const #cir.int<1> : !s32i loc(#loc394)
          %9 = cir.binop(sub, %7, %8) nsw : !s32i loc(#loc394)
          %10 = cir.cmp(gt, %5, %9) : !s32i, !cir.bool loc(#loc610)
          %11 = cir.ternary(%10, true {
            %12 = cir.load %0 : !cir.ptr<!s32i>, !s32i loc(#loc396)
            %13 = cir.abs %12 poison : !s32i loc(#loc397)
            %14 = cir.cast(integral, %13 : !s32i), !s64i loc(#loc397)
            %15 = cir.get_global @sqrt : !cir.ptr<!cir.func<!cir.double (!cir.double)>> loc(#loc398)
            %16 = cir.const #cir.int<2147483647> : !s32i loc(#loc399)
            %17 = cir.cast(int_to_float, %16 : !s32i), !cir.double loc(#loc399)
            %18 = cir.call @sqrt(%17) : (!cir.double) -> !cir.double extra(#fn_attr) loc(#loc398)
            %19 = cir.cast(float_to_int, %18 : !cir.double), !s64i loc(#loc398)
            %20 = cir.cmp(lt, %14, %19) : !s64i, !cir.bool loc(#loc611)
            %21 = cir.ternary(%20, true {
              %22 = cir.const #true loc(#loc395)
              cir.yield %22 : !cir.bool loc(#loc395)
            }, false {
              %22 = cir.const #false loc(#loc395)
              cir.yield %22 : !cir.bool loc(#loc395)
            }) : (!cir.bool) -> !cir.bool loc(#loc395)
            cir.yield %21 : !cir.bool loc(#loc395)
          }, false {
            %12 = cir.const #false loc(#loc395)
            cir.yield %12 : !cir.bool loc(#loc395)
          }) : (!cir.bool) -> !cir.bool loc(#loc395)
          cir.if %11 {
            %12 = cir.alloca !s32i, !cir.ptr<!s32i>, ["result", init] {alignment = 4 : i64} loc(#loc613)
            %13 = cir.load %0 : !cir.ptr<!s32i>, !s32i loc(#loc406)
            %14 = cir.load %0 : !cir.ptr<!s32i>, !s32i loc(#loc405)
            %15 = cir.binop(mul, %13, %14) nsw : !s32i loc(#loc406)
            cir.store %15, %12 : !s32i, !cir.ptr<!s32i> loc(#loc613)
            %16 = cir.load %12 : !cir.ptr<!s32i>, !s32i loc(#loc407)
            cir.call @printIntLine(%16) : (!s32i) -> () loc(#loc408)
          } else {
            %12 = cir.get_global @".str.6" : !cir.ptr<!cir.array<!s8i x 54>> loc(#loc409)
            %13 = cir.cast(array_to_ptrdecay, %12 : !cir.ptr<!cir.array<!s8i x 54>>), !cir.ptr<!s8i> loc(#loc409)
            cir.call @printLine(%13) : (!cir.ptr<!s8i>) -> () loc(#loc410)
          } loc(#loc612)
        } loc(#loc609)
      } loc(#loc608)
    } loc(#loc607)
    cir.return loc(#loc294)
  } loc(#loc570)
  cir.func no_proto internal private @goodG2B1() extra(#fn_attr1) {
    %0 = cir.alloca !s32i, !cir.ptr<!s32i>, ["data"] {alignment = 4 : i64} loc(#loc615)
    %1 = cir.const #cir.int<0> : !s32i loc(#loc415)
    cir.store %1, %0 : !s32i, !cir.ptr<!s32i> loc(#loc616)
    cir.scope {
      %2 = cir.get_global @staticFalse : !cir.ptr<!s32i> loc(#loc525)
      %3 = cir.load %2 : !cir.ptr<!s32i>, !s32i loc(#loc419)
      %4 = cir.cast(int_to_bool, %3 : !s32i), !cir.bool loc(#loc419)
      cir.if %4 {
        %5 = cir.get_global @".str.5" : !cir.ptr<!cir.array<!s8i x 21>> loc(#loc423)
        %6 = cir.cast(array_to_ptrdecay, %5 : !cir.ptr<!cir.array<!s8i x 21>>), !cir.ptr<!s8i> loc(#loc423)
        cir.call @printLine(%6) : (!cir.ptr<!s8i>) -> () loc(#loc424)
      } else {
        %5 = cir.const #cir.int<2> : !s32i loc(#loc425)
        cir.store %5, %0 : !s32i, !cir.ptr<!s32i> loc(#loc619)
      } loc(#loc618)
    } loc(#loc617)
    cir.scope {
      %2 = cir.get_global @staticTrue : !cir.ptr<!s32i> loc(#loc461)
      %3 = cir.load %2 : !cir.ptr<!s32i>, !s32i loc(#loc429)
      %4 = cir.cast(int_to_bool, %3 : !s32i), !cir.bool loc(#loc429)
      cir.if %4 {
        cir.scope {
          %5 = cir.alloca !s32i, !cir.ptr<!s32i>, ["result", init] {alignment = 4 : i64} loc(#loc623)
          %6 = cir.load %0 : !cir.ptr<!s32i>, !s32i loc(#loc435)
          %7 = cir.load %0 : !cir.ptr<!s32i>, !s32i loc(#loc434)
          %8 = cir.binop(mul, %6, %7) nsw : !s32i loc(#loc435)
          cir.store %8, %5 : !s32i, !cir.ptr<!s32i> loc(#loc623)
          %9 = cir.load %5 : !cir.ptr<!s32i>, !s32i loc(#loc436)
          cir.call @printIntLine(%9) : (!s32i) -> () loc(#loc437)
        } loc(#loc622)
      } loc(#loc621)
    } loc(#loc620)
    cir.return loc(#loc412)
  } loc(#loc614)
  cir.func no_proto internal private @goodG2B2() extra(#fn_attr1) {
    %0 = cir.alloca !s32i, !cir.ptr<!s32i>, ["data"] {alignment = 4 : i64} loc(#loc625)
    %1 = cir.const #cir.int<0> : !s32i loc(#loc442)
    cir.store %1, %0 : !s32i, !cir.ptr<!s32i> loc(#loc626)
    cir.scope {
      %2 = cir.get_global @staticTrue : !cir.ptr<!s32i> loc(#loc461)
      %3 = cir.load %2 : !cir.ptr<!s32i>, !s32i loc(#loc446)
      %4 = cir.cast(int_to_bool, %3 : !s32i), !cir.bool loc(#loc446)
      cir.if %4 {
        %5 = cir.const #cir.int<2> : !s32i loc(#loc448)
        cir.store %5, %0 : !s32i, !cir.ptr<!s32i> loc(#loc629)
      } loc(#loc628)
    } loc(#loc627)
    cir.scope {
      %2 = cir.get_global @staticTrue : !cir.ptr<!s32i> loc(#loc461)
      %3 = cir.load %2 : !cir.ptr<!s32i>, !s32i loc(#loc452)
      %4 = cir.cast(int_to_bool, %3 : !s32i), !cir.bool loc(#loc452)
      cir.if %4 {
        cir.scope {
          %5 = cir.alloca !s32i, !cir.ptr<!s32i>, ["result", init] {alignment = 4 : i64} loc(#loc633)
          %6 = cir.load %0 : !cir.ptr<!s32i>, !s32i loc(#loc458)
          %7 = cir.load %0 : !cir.ptr<!s32i>, !s32i loc(#loc457)
          %8 = cir.binop(mul, %6, %7) nsw : !s32i loc(#loc458)
          cir.store %8, %5 : !s32i, !cir.ptr<!s32i> loc(#loc633)
          %9 = cir.load %5 : !cir.ptr<!s32i>, !s32i loc(#loc459)
          cir.call @printIntLine(%9) : (!s32i) -> () loc(#loc460)
        } loc(#loc632)
      } loc(#loc631)
    } loc(#loc630)
    cir.return loc(#loc439)
  } loc(#loc624)
} loc(#loc)
#loc = loc("/home/ladisgin/git_proj/juliet-c/testcases/CWE190_Integer_Overflow/s02/CWE190_Integer_Overflow__int_connect_socket_square_05.c":0:0)
#loc1 = loc("CWE190_Integer_Overflow__int_connect_socket_square_05.c":47:1)
#loc2 = loc("CWE190_Integer_Overflow__int_connect_socket_square_05.c":47:25)
#loc3 = loc("/usr/include/sys/socket.h":102:1)
#loc4 = loc("/usr/include/sys/socket.h":102:62)
#loc5 = loc("/usr/include/arpa/inet.h":34:1)
#loc6 = loc("/usr/include/arpa/inet.h":34:47)
#loc7 = loc("CWE190_Integer_Overflow__int_connect_socket_square_05.c":85:53)
#loc8 = loc("/usr/include/netinet/in.h":404:1)
#loc9 = loc("/usr/include/netinet/in.h":405:40)
#loc10 = loc("/usr/include/sys/socket.h":126:1)
#loc11 = loc("/usr/include/sys/socket.h":126:75)
#loc12 = loc("/usr/include/sys/socket.h":145:1)
#loc13 = loc("/usr/include/sys/socket.h":145:68)
#loc14 = loc("/usr/include/stdlib.h":105:1)
#loc15 = loc("/usr/include/stdlib.h":106:33)
#loc16 = loc("/usr/include/unistd.h":358:1)
#loc17 = loc("/usr/include/unistd.h":358:27)
#loc18 = loc("../../../testcasesupport/std_testcase_io.h":18:1)
#loc19 = loc("../../../testcasesupport/std_testcase_io.h":18:33)
#loc20 = loc("CWE190_Integer_Overflow__int_connect_socket_square_05.c":52:1)
#loc21 = loc("CWE190_Integer_Overflow__int_connect_socket_square_05.c":124:1)
#loc22 = loc("CWE190_Integer_Overflow__int_connect_socket_square_05.c":54:5)
#loc23 = loc("CWE190_Integer_Overflow__int_connect_socket_square_05.c":54:9)
#loc24 = loc("CWE190_Integer_Overflow__int_connect_socket_square_05.c":56:12)
#loc25 = loc("CWE190_Integer_Overflow__int_connect_socket_square_05.c":56:5)
#loc26 = loc("CWE190_Integer_Overflow__int_connect_socket_square_05.c":57:5)
#loc27 = loc("CWE190_Integer_Overflow__int_connect_socket_square_05.c":115:5)
#loc28 = loc("CWE190_Integer_Overflow__int_connect_socket_square_05.c":57:8)
#loc29 = loc("CWE190_Integer_Overflow__int_connect_socket_square_05.c":58:5)
#loc30 = loc("CWE190_Integer_Overflow__int_connect_socket_square_05.c":59:9)
#loc31 = loc("CWE190_Integer_Overflow__int_connect_socket_square_05.c":114:9)
#loc32 = loc("CWE190_Integer_Overflow__int_connect_socket_square_05.c":64:13)
#loc33 = loc("CWE190_Integer_Overflow__int_connect_socket_square_05.c":64:17)
#loc34 = loc("CWE190_Integer_Overflow__int_connect_socket_square_05.c":65:13)
#loc35 = loc("CWE190_Integer_Overflow__int_connect_socket_square_05.c":65:32)
#loc36 = loc("CWE190_Integer_Overflow__int_connect_socket_square_05.c":66:13)
#loc37 = loc("CWE190_Integer_Overflow__int_connect_socket_square_05.c":66:36)
#loc38 = loc("CWE190_Integer_Overflow__int_connect_socket_square_05.c":67:13)
#loc39 = loc("CWE190_Integer_Overflow__int_connect_socket_square_05.c":67:45)
#loc40 = loc("CWE190_Integer_Overflow__int_connect_socket_square_05.c":68:13)
#loc41 = loc("CWE190_Integer_Overflow__int_connect_socket_square_05.c":103:21)
#loc42 = loc("CWE190_Integer_Overflow__int_connect_socket_square_05.c":78:40)
#loc43 = loc("CWE190_Integer_Overflow__int_connect_socket_square_05.c":78:49)
#loc44 = loc("CWE190_Integer_Overflow__int_connect_socket_square_05.c":78:62)
#loc45 = loc("CWE190_Integer_Overflow__int_connect_socket_square_05.c":78:33)
#loc46 = loc("CWE190_Integer_Overflow__int_connect_socket_square_05.c":78:17)
#loc47 = loc("CWE190_Integer_Overflow__int_connect_socket_square_05.c":78:73)
#loc48 = loc("CWE190_Integer_Overflow__int_connect_socket_square_05.c":79:17)
#loc49 = loc("CWE190_Integer_Overflow__int_connect_socket_square_05.c":82:17)
#loc50 = loc("CWE190_Integer_Overflow__int_connect_socket_square_05.c":79:21)
#loc51 = loc("CWE190_Integer_Overflow__int_connect_socket_square_05.c":79:38)
#loc52 = loc("CWE190_Integer_Overflow__int_connect_socket_square_05.c":80:17)
#loc53 = loc("CWE190_Integer_Overflow__int_connect_socket_square_05.c":81:21)
#loc54 = loc("CWE190_Integer_Overflow__int_connect_socket_square_05.c":83:24)
#loc55 = loc("CWE190_Integer_Overflow__int_connect_socket_square_05.c":83:25)
#loc56 = loc("CWE190_Integer_Overflow__int_connect_socket_square_05.c":83:34)
#loc57 = loc("CWE190_Integer_Overflow__int_connect_socket_square_05.c":83:37)
#loc58 = loc("CWE190_Integer_Overflow__int_connect_socket_square_05.c":83:51)
#loc59 = loc("CWE190_Integer_Overflow__int_connect_socket_square_05.c":83:17)
#loc60 = loc("CWE190_Integer_Overflow__int_connect_socket_square_05.c":83:52)
#loc61 = loc("CWE190_Integer_Overflow__int_connect_socket_square_05.c":84:38)
#loc62 = loc("/usr/include/netinet/in.h":249:5)
#loc63 = loc("CWE190_Integer_Overflow__int_connect_socket_square_05.c":84:17)
#loc64 = loc("CWE190_Integer_Overflow__int_connect_socket_square_05.c":85:43)
#loc65 = loc("/usr/include/netinet/in.h":251:20)
#loc66 = loc("/usr/include/netinet/in.h":33:15)
#loc67 = loc("CWE190_Integer_Overflow__int_connect_socket_square_05.c":85:17)
#loc68 = loc("CWE190_Integer_Overflow__int_connect_socket_square_05.c":85:63)
#loc69 = loc("CWE190_Integer_Overflow__int_connect_socket_square_05.c":86:42)
#loc70 = loc("CWE190_Integer_Overflow__int_connect_socket_square_05.c":86:36)
#loc71 = loc("/usr/include/netinet/in.h":250:15)
#loc72 = loc("CWE190_Integer_Overflow__int_connect_socket_square_05.c":86:17)
#loc73 = loc("CWE190_Integer_Overflow__int_connect_socket_square_05.c":86:50)
#loc74 = loc("CWE190_Integer_Overflow__int_connect_socket_square_05.c":87:17)
#loc75 = loc("CWE190_Integer_Overflow__int_connect_socket_square_05.c":90:17)
#loc76 = loc("CWE190_Integer_Overflow__int_connect_socket_square_05.c":87:29)
#loc77 = loc("CWE190_Integer_Overflow__int_connect_socket_square_05.c":87:62)
#loc78 = loc("CWE190_Integer_Overflow__int_connect_socket_square_05.c":87:63)
#loc79 = loc("CWE190_Integer_Overflow__int_connect_socket_square_05.c":87:72)
#loc80 = loc("CWE190_Integer_Overflow__int_connect_socket_square_05.c":87:86)
#loc81 = loc("CWE190_Integer_Overflow__int_connect_socket_square_05.c":87:21)
#loc82 = loc("CWE190_Integer_Overflow__int_connect_socket_square_05.c":87:92)
#loc83 = loc("CWE190_Integer_Overflow__int_connect_socket_square_05.c":88:17)
#loc84 = loc("CWE190_Integer_Overflow__int_connect_socket_square_05.c":89:21)
#loc85 = loc("CWE190_Integer_Overflow__int_connect_socket_square_05.c":93:35)
#loc86 = loc("CWE190_Integer_Overflow__int_connect_socket_square_05.c":93:50)
#loc87 = loc("CWE190_Integer_Overflow__int_connect_socket_square_05.c":93:63)
#loc88 = loc("CWE190_Integer_Overflow__int_connect_socket_square_05.c":93:81)
#loc89 = loc("CWE190_Integer_Overflow__int_connect_socket_square_05.c":93:84)
#loc90 = loc("CWE190_Integer_Overflow__int_connect_socket_square_05.c":93:30)
#loc91 = loc("CWE190_Integer_Overflow__int_connect_socket_square_05.c":93:17)
#loc92 = loc("CWE190_Integer_Overflow__int_connect_socket_square_05.c":93:85)
#loc93 = loc("CWE190_Integer_Overflow__int_connect_socket_square_05.c":94:17)
#loc94 = loc("CWE190_Integer_Overflow__int_connect_socket_square_05.c":97:17)
#loc95 = loc("CWE190_Integer_Overflow__int_connect_socket_square_05.c":94:21)
#loc96 = loc("CWE190_Integer_Overflow__int_connect_socket_square_05.c":94:35)
#loc97 = loc("CWE190_Integer_Overflow__int_connect_socket_square_05.c":94:48)
#loc98 = loc("CWE190_Integer_Overflow__int_connect_socket_square_05.c":94:51)
#loc99 = loc("CWE190_Integer_Overflow__int_connect_socket_square_05.c":94:65)
#loc100 = loc("CWE190_Integer_Overflow__int_connect_socket_square_05.c":95:17)
#loc101 = loc("CWE190_Integer_Overflow__int_connect_socket_square_05.c":96:21)
#loc102 = loc("CWE190_Integer_Overflow__int_connect_socket_square_05.c":99:43)
#loc103 = loc("CWE190_Integer_Overflow__int_connect_socket_square_05.c":99:29)
#loc104 = loc("CWE190_Integer_Overflow__int_connect_socket_square_05.c":99:17)
#loc105 = loc("CWE190_Integer_Overflow__int_connect_socket_square_05.c":101:29)
#loc106 = loc("CWE190_Integer_Overflow__int_connect_socket_square_05.c":101:24)
#loc107 = loc("CWE190_Integer_Overflow__int_connect_socket_square_05.c":101:17)
#loc108 = loc("CWE190_Integer_Overflow__int_connect_socket_square_05.c":101:40)
#loc109 = loc("CWE190_Integer_Overflow__int_connect_socket_square_05.c":103:20)
#loc110 = loc("CWE190_Integer_Overflow__int_connect_socket_square_05.c":104:13)
#loc111 = loc("CWE190_Integer_Overflow__int_connect_socket_square_05.c":107:13)
#loc112 = loc("CWE190_Integer_Overflow__int_connect_socket_square_05.c":104:17)
#loc113 = loc("CWE190_Integer_Overflow__int_connect_socket_square_05.c":104:34)
#loc114 = loc("CWE190_Integer_Overflow__int_connect_socket_square_05.c":105:13)
#loc115 = loc("CWE190_Integer_Overflow__int_connect_socket_square_05.c":106:30)
#loc116 = loc("CWE190_Integer_Overflow__int_connect_socket_square_05.c":106:17)
#loc117 = loc("CWE190_Integer_Overflow__int_connect_socket_square_05.c":116:5)
#loc118 = loc("CWE190_Integer_Overflow__int_connect_socket_square_05.c":123:5)
#loc119 = loc("CWE190_Integer_Overflow__int_connect_socket_square_05.c":116:8)
#loc120 = loc("CWE190_Integer_Overflow__int_connect_socket_square_05.c":117:5)
#loc121 = loc("CWE190_Integer_Overflow__int_connect_socket_square_05.c":118:9)
#loc122 = loc("CWE190_Integer_Overflow__int_connect_socket_square_05.c":122:9)
#loc123 = loc("CWE190_Integer_Overflow__int_connect_socket_square_05.c":120:13)
#loc124 = loc("CWE190_Integer_Overflow__int_connect_socket_square_05.c":120:33)
#loc125 = loc("CWE190_Integer_Overflow__int_connect_socket_square_05.c":120:26)
#loc126 = loc("CWE190_Integer_Overflow__int_connect_socket_square_05.c":121:26)
#loc127 = loc("CWE190_Integer_Overflow__int_connect_socket_square_05.c":121:13)
#loc128 = loc("CWE190_Integer_Overflow__int_connect_socket_square_05.c":342:1)
#loc129 = loc("CWE190_Integer_Overflow__int_connect_socket_square_05.c":348:1)
#loc130 = loc("CWE190_Integer_Overflow__int_connect_socket_square_05.c":344:5)
#loc131 = loc("CWE190_Integer_Overflow__int_connect_socket_square_05.c":344:14)
#loc132 = loc("CWE190_Integer_Overflow__int_connect_socket_square_05.c":345:5)
#loc133 = loc("CWE190_Integer_Overflow__int_connect_socket_square_05.c":345:14)
#loc134 = loc("CWE190_Integer_Overflow__int_connect_socket_square_05.c":346:5)
#loc135 = loc("CWE190_Integer_Overflow__int_connect_socket_square_05.c":346:14)
#loc136 = loc("CWE190_Integer_Overflow__int_connect_socket_square_05.c":347:5)
#loc137 = loc("CWE190_Integer_Overflow__int_connect_socket_square_05.c":347:14)
#loc138 = loc("/usr/include/stdlib.h":575:1)
#loc139 = loc("/usr/include/stdlib.h":575:41)
#loc140 = loc("/usr/include/time.h":76:1)
#loc141 = loc("/usr/include/time.h":76:38)
#loc142 = loc("../../../testcasesupport/std_testcase_io.h":14:1)
#loc143 = loc("../../../testcasesupport/std_testcase_io.h":14:33)
#loc144 = loc("CWE190_Integer_Overflow__int_connect_socket_square_05.c":364:15)
#loc145 = loc("CWE190_Integer_Overflow__int_connect_socket_square_05.c":366:15)
#loc146 = loc("CWE190_Integer_Overflow__int_connect_socket_square_05.c":369:15)
#loc147 = loc("CWE190_Integer_Overflow__int_connect_socket_square_05.c":371:15)
#loc148 = loc("CWE190_Integer_Overflow__int_connect_socket_square_05.c":359:1)
#loc149 = loc("CWE190_Integer_Overflow__int_connect_socket_square_05.c":374:1)
#loc154 = loc("CWE190_Integer_Overflow__int_connect_socket_square_05.c":360:1)
#loc155 = loc("CWE190_Integer_Overflow__int_connect_socket_square_05.c":362:27)
#loc156 = loc("CWE190_Integer_Overflow__int_connect_socket_square_05.c":362:22)
#loc157 = loc("CWE190_Integer_Overflow__int_connect_socket_square_05.c":362:5)
#loc158 = loc("CWE190_Integer_Overflow__int_connect_socket_square_05.c":364:5)
#loc159 = loc("CWE190_Integer_Overflow__int_connect_socket_square_05.c":365:5)
#loc160 = loc("CWE190_Integer_Overflow__int_connect_socket_square_05.c":365:64)
#loc161 = loc("CWE190_Integer_Overflow__int_connect_socket_square_05.c":366:5)
#loc162 = loc("CWE190_Integer_Overflow__int_connect_socket_square_05.c":369:5)
#loc163 = loc("CWE190_Integer_Overflow__int_connect_socket_square_05.c":370:5)
#loc164 = loc("CWE190_Integer_Overflow__int_connect_socket_square_05.c":370:63)
#loc165 = loc("CWE190_Integer_Overflow__int_connect_socket_square_05.c":371:5)
#loc166 = loc("CWE190_Integer_Overflow__int_connect_socket_square_05.c":373:12)
#loc167 = loc("CWE190_Integer_Overflow__int_connect_socket_square_05.c":373:5)
#loc168 = loc("CWE190_Integer_Overflow__int_connect_socket_square_05.c":48:1)
#loc169 = loc("CWE190_Integer_Overflow__int_connect_socket_square_05.c":48:26)
#loc170 = loc("CWE190_Integer_Overflow__int_connect_socket_square_05.c":198:19)
#loc171 = loc("/usr/include/bits/mathcalls.h":158:1)
#loc172 = loc("CWE190_Integer_Overflow__int_connect_socket_square_05.c":210:23)
#loc173 = loc("CWE190_Integer_Overflow__int_connect_socket_square_05.c":131:1)
#loc174 = loc("CWE190_Integer_Overflow__int_connect_socket_square_05.c":213:1)
#loc175 = loc("CWE190_Integer_Overflow__int_connect_socket_square_05.c":133:5)
#loc176 = loc("CWE190_Integer_Overflow__int_connect_socket_square_05.c":133:9)
#loc177 = loc("CWE190_Integer_Overflow__int_connect_socket_square_05.c":135:12)
#loc178 = loc("CWE190_Integer_Overflow__int_connect_socket_square_05.c":135:5)
#loc179 = loc("CWE190_Integer_Overflow__int_connect_socket_square_05.c":136:5)
#loc180 = loc("CWE190_Integer_Overflow__int_connect_socket_square_05.c":194:5)
#loc181 = loc("CWE190_Integer_Overflow__int_connect_socket_square_05.c":136:8)
#loc182 = loc("CWE190_Integer_Overflow__int_connect_socket_square_05.c":137:5)
#loc183 = loc("CWE190_Integer_Overflow__int_connect_socket_square_05.c":138:9)
#loc184 = loc("CWE190_Integer_Overflow__int_connect_socket_square_05.c":193:9)
#loc185 = loc("CWE190_Integer_Overflow__int_connect_socket_square_05.c":143:13)
#loc186 = loc("CWE190_Integer_Overflow__int_connect_socket_square_05.c":143:17)
#loc187 = loc("CWE190_Integer_Overflow__int_connect_socket_square_05.c":144:13)
#loc188 = loc("CWE190_Integer_Overflow__int_connect_socket_square_05.c":144:32)
#loc189 = loc("CWE190_Integer_Overflow__int_connect_socket_square_05.c":145:13)
#loc190 = loc("CWE190_Integer_Overflow__int_connect_socket_square_05.c":145:36)
#loc191 = loc("CWE190_Integer_Overflow__int_connect_socket_square_05.c":146:13)
#loc192 = loc("CWE190_Integer_Overflow__int_connect_socket_square_05.c":146:45)
#loc193 = loc("CWE190_Integer_Overflow__int_connect_socket_square_05.c":147:13)
#loc194 = loc("CWE190_Integer_Overflow__int_connect_socket_square_05.c":182:21)
#loc195 = loc("CWE190_Integer_Overflow__int_connect_socket_square_05.c":157:40)
#loc196 = loc("CWE190_Integer_Overflow__int_connect_socket_square_05.c":157:49)
#loc197 = loc("CWE190_Integer_Overflow__int_connect_socket_square_05.c":157:62)
#loc198 = loc("CWE190_Integer_Overflow__int_connect_socket_square_05.c":157:33)
#loc199 = loc("CWE190_Integer_Overflow__int_connect_socket_square_05.c":157:17)
#loc200 = loc("CWE190_Integer_Overflow__int_connect_socket_square_05.c":157:73)
#loc201 = loc("CWE190_Integer_Overflow__int_connect_socket_square_05.c":158:17)
#loc202 = loc("CWE190_Integer_Overflow__int_connect_socket_square_05.c":161:17)
#loc203 = loc("CWE190_Integer_Overflow__int_connect_socket_square_05.c":158:21)
#loc204 = loc("CWE190_Integer_Overflow__int_connect_socket_square_05.c":158:38)
#loc205 = loc("CWE190_Integer_Overflow__int_connect_socket_square_05.c":159:17)
#loc206 = loc("CWE190_Integer_Overflow__int_connect_socket_square_05.c":160:21)
#loc207 = loc("CWE190_Integer_Overflow__int_connect_socket_square_05.c":162:24)
#loc208 = loc("CWE190_Integer_Overflow__int_connect_socket_square_05.c":162:25)
#loc209 = loc("CWE190_Integer_Overflow__int_connect_socket_square_05.c":162:34)
#loc210 = loc("CWE190_Integer_Overflow__int_connect_socket_square_05.c":162:37)
#loc211 = loc("CWE190_Integer_Overflow__int_connect_socket_square_05.c":162:51)
#loc212 = loc("CWE190_Integer_Overflow__int_connect_socket_square_05.c":162:17)
#loc213 = loc("CWE190_Integer_Overflow__int_connect_socket_square_05.c":162:52)
#loc214 = loc("CWE190_Integer_Overflow__int_connect_socket_square_05.c":163:38)
#loc215 = loc("CWE190_Integer_Overflow__int_connect_socket_square_05.c":163:17)
#loc216 = loc("CWE190_Integer_Overflow__int_connect_socket_square_05.c":164:53)
#loc217 = loc("CWE190_Integer_Overflow__int_connect_socket_square_05.c":164:43)
#loc218 = loc("CWE190_Integer_Overflow__int_connect_socket_square_05.c":164:17)
#loc219 = loc("CWE190_Integer_Overflow__int_connect_socket_square_05.c":164:63)
#loc220 = loc("CWE190_Integer_Overflow__int_connect_socket_square_05.c":165:42)
#loc221 = loc("CWE190_Integer_Overflow__int_connect_socket_square_05.c":165:36)
#loc222 = loc("CWE190_Integer_Overflow__int_connect_socket_square_05.c":165:17)
#loc223 = loc("CWE190_Integer_Overflow__int_connect_socket_square_05.c":165:50)
#loc224 = loc("CWE190_Integer_Overflow__int_connect_socket_square_05.c":166:17)
#loc225 = loc("CWE190_Integer_Overflow__int_connect_socket_square_05.c":169:17)
#loc226 = loc("CWE190_Integer_Overflow__int_connect_socket_square_05.c":166:29)
#loc227 = loc("CWE190_Integer_Overflow__int_connect_socket_square_05.c":166:62)
#loc228 = loc("CWE190_Integer_Overflow__int_connect_socket_square_05.c":166:63)
#loc229 = loc("CWE190_Integer_Overflow__int_connect_socket_square_05.c":166:72)
#loc230 = loc("CWE190_Integer_Overflow__int_connect_socket_square_05.c":166:86)
#loc231 = loc("CWE190_Integer_Overflow__int_connect_socket_square_05.c":166:21)
#loc232 = loc("CWE190_Integer_Overflow__int_connect_socket_square_05.c":166:92)
#loc233 = loc("CWE190_Integer_Overflow__int_connect_socket_square_05.c":167:17)
#loc234 = loc("CWE190_Integer_Overflow__int_connect_socket_square_05.c":168:21)
#loc235 = loc("CWE190_Integer_Overflow__int_connect_socket_square_05.c":172:35)
#loc236 = loc("CWE190_Integer_Overflow__int_connect_socket_square_05.c":172:50)
#loc237 = loc("CWE190_Integer_Overflow__int_connect_socket_square_05.c":172:63)
#loc238 = loc("CWE190_Integer_Overflow__int_connect_socket_square_05.c":172:81)
#loc239 = loc("CWE190_Integer_Overflow__int_connect_socket_square_05.c":172:84)
#loc240 = loc("CWE190_Integer_Overflow__int_connect_socket_square_05.c":172:30)
#loc241 = loc("CWE190_Integer_Overflow__int_connect_socket_square_05.c":172:17)
#loc242 = loc("CWE190_Integer_Overflow__int_connect_socket_square_05.c":172:85)
#loc243 = loc("CWE190_Integer_Overflow__int_connect_socket_square_05.c":173:17)
#loc244 = loc("CWE190_Integer_Overflow__int_connect_socket_square_05.c":176:17)
#loc245 = loc("CWE190_Integer_Overflow__int_connect_socket_square_05.c":173:21)
#loc246 = loc("CWE190_Integer_Overflow__int_connect_socket_square_05.c":173:35)
#loc247 = loc("CWE190_Integer_Overflow__int_connect_socket_square_05.c":173:48)
#loc248 = loc("CWE190_Integer_Overflow__int_connect_socket_square_05.c":173:51)
#loc249 = loc("CWE190_Integer_Overflow__int_connect_socket_square_05.c":173:65)
#loc250 = loc("CWE190_Integer_Overflow__int_connect_socket_square_05.c":174:17)
#loc251 = loc("CWE190_Integer_Overflow__int_connect_socket_square_05.c":175:21)
#loc252 = loc("CWE190_Integer_Overflow__int_connect_socket_square_05.c":178:43)
#loc253 = loc("CWE190_Integer_Overflow__int_connect_socket_square_05.c":178:29)
#loc254 = loc("CWE190_Integer_Overflow__int_connect_socket_square_05.c":178:17)
#loc255 = loc("CWE190_Integer_Overflow__int_connect_socket_square_05.c":180:29)
#loc256 = loc("CWE190_Integer_Overflow__int_connect_socket_square_05.c":180:24)
#loc257 = loc("CWE190_Integer_Overflow__int_connect_socket_square_05.c":180:17)
#loc258 = loc("CWE190_Integer_Overflow__int_connect_socket_square_05.c":180:40)
#loc259 = loc("CWE190_Integer_Overflow__int_connect_socket_square_05.c":182:20)
#loc260 = loc("CWE190_Integer_Overflow__int_connect_socket_square_05.c":183:13)
#loc261 = loc("CWE190_Integer_Overflow__int_connect_socket_square_05.c":186:13)
#loc262 = loc("CWE190_Integer_Overflow__int_connect_socket_square_05.c":183:17)
#loc263 = loc("CWE190_Integer_Overflow__int_connect_socket_square_05.c":183:34)
#loc264 = loc("CWE190_Integer_Overflow__int_connect_socket_square_05.c":184:13)
#loc265 = loc("CWE190_Integer_Overflow__int_connect_socket_square_05.c":185:30)
#loc266 = loc("CWE190_Integer_Overflow__int_connect_socket_square_05.c":185:17)
#loc267 = loc("CWE190_Integer_Overflow__int_connect_socket_square_05.c":195:5)
#loc268 = loc("CWE190_Integer_Overflow__int_connect_socket_square_05.c":212:5)
#loc269 = loc("CWE190_Integer_Overflow__int_connect_socket_square_05.c":195:8)
#loc270 = loc("CWE190_Integer_Overflow__int_connect_socket_square_05.c":196:5)
#loc271 = loc("CWE190_Integer_Overflow__int_connect_socket_square_05.c":199:5)
#loc272 = loc("CWE190_Integer_Overflow__int_connect_socket_square_05.c":201:5)
#loc273 = loc("CWE190_Integer_Overflow__int_connect_socket_square_05.c":198:9)
#loc274 = loc("CWE190_Integer_Overflow__int_connect_socket_square_05.c":203:9)
#loc275 = loc("CWE190_Integer_Overflow__int_connect_socket_square_05.c":211:9)
#loc276 = loc("CWE190_Integer_Overflow__int_connect_socket_square_05.c":203:13)
#loc277 = loc("CWE190_Integer_Overflow__int_connect_socket_square_05.c":203:20)
#loc278 = loc("CWE190_Integer_Overflow__int_connect_socket_square_05.c":203:28)
#loc279 = loc("CWE190_Integer_Overflow__int_connect_socket_square_05.c":203:35)
#loc280 = loc("CWE190_Integer_Overflow__int_connect_socket_square_05.c":203:31)
#loc281 = loc("CWE190_Integer_Overflow__int_connect_socket_square_05.c":203:49)
#loc282 = loc("CWE190_Integer_Overflow__int_connect_socket_square_05.c":203:62)
#loc283 = loc("CWE190_Integer_Overflow__int_connect_socket_square_05.c":203:69)
#loc284 = loc("CWE190_Integer_Overflow__int_connect_socket_square_05.c":204:9)
#loc285 = loc("CWE190_Integer_Overflow__int_connect_socket_square_05.c":207:9)
#loc286 = loc("CWE190_Integer_Overflow__int_connect_socket_square_05.c":209:9)
#loc287 = loc("CWE190_Integer_Overflow__int_connect_socket_square_05.c":205:13)
#loc288 = loc("CWE190_Integer_Overflow__int_connect_socket_square_05.c":205:33)
#loc289 = loc("CWE190_Integer_Overflow__int_connect_socket_square_05.c":205:26)
#loc290 = loc("CWE190_Integer_Overflow__int_connect_socket_square_05.c":206:26)
#loc291 = loc("CWE190_Integer_Overflow__int_connect_socket_square_05.c":206:13)
#loc292 = loc("CWE190_Integer_Overflow__int_connect_socket_square_05.c":210:13)
#loc293 = loc("CWE190_Integer_Overflow__int_connect_socket_square_05.c":216:1)
#loc294 = loc("CWE190_Integer_Overflow__int_connect_socket_square_05.c":293:1)
#loc295 = loc("CWE190_Integer_Overflow__int_connect_socket_square_05.c":218:5)
#loc296 = loc("CWE190_Integer_Overflow__int_connect_socket_square_05.c":218:9)
#loc297 = loc("CWE190_Integer_Overflow__int_connect_socket_square_05.c":220:12)
#loc298 = loc("CWE190_Integer_Overflow__int_connect_socket_square_05.c":220:5)
#loc299 = loc("CWE190_Integer_Overflow__int_connect_socket_square_05.c":221:5)
#loc300 = loc("CWE190_Integer_Overflow__int_connect_socket_square_05.c":279:5)
#loc301 = loc("CWE190_Integer_Overflow__int_connect_socket_square_05.c":221:8)
#loc302 = loc("CWE190_Integer_Overflow__int_connect_socket_square_05.c":222:5)
#loc303 = loc("CWE190_Integer_Overflow__int_connect_socket_square_05.c":223:9)
#loc304 = loc("CWE190_Integer_Overflow__int_connect_socket_square_05.c":278:9)
#loc305 = loc("CWE190_Integer_Overflow__int_connect_socket_square_05.c":228:13)
#loc306 = loc("CWE190_Integer_Overflow__int_connect_socket_square_05.c":228:17)
#loc307 = loc("CWE190_Integer_Overflow__int_connect_socket_square_05.c":229:13)
#loc308 = loc("CWE190_Integer_Overflow__int_connect_socket_square_05.c":229:32)
#loc309 = loc("CWE190_Integer_Overflow__int_connect_socket_square_05.c":230:13)
#loc310 = loc("CWE190_Integer_Overflow__int_connect_socket_square_05.c":230:36)
#loc311 = loc("CWE190_Integer_Overflow__int_connect_socket_square_05.c":231:13)
#loc312 = loc("CWE190_Integer_Overflow__int_connect_socket_square_05.c":231:45)
#loc313 = loc("CWE190_Integer_Overflow__int_connect_socket_square_05.c":232:13)
#loc314 = loc("CWE190_Integer_Overflow__int_connect_socket_square_05.c":267:21)
#loc315 = loc("CWE190_Integer_Overflow__int_connect_socket_square_05.c":242:40)
#loc316 = loc("CWE190_Integer_Overflow__int_connect_socket_square_05.c":242:49)
#loc317 = loc("CWE190_Integer_Overflow__int_connect_socket_square_05.c":242:62)
#loc318 = loc("CWE190_Integer_Overflow__int_connect_socket_square_05.c":242:33)
#loc319 = loc("CWE190_Integer_Overflow__int_connect_socket_square_05.c":242:17)
#loc320 = loc("CWE190_Integer_Overflow__int_connect_socket_square_05.c":242:73)
#loc321 = loc("CWE190_Integer_Overflow__int_connect_socket_square_05.c":243:17)
#loc322 = loc("CWE190_Integer_Overflow__int_connect_socket_square_05.c":246:17)
#loc323 = loc("CWE190_Integer_Overflow__int_connect_socket_square_05.c":243:21)
#loc324 = loc("CWE190_Integer_Overflow__int_connect_socket_square_05.c":243:38)
#loc325 = loc("CWE190_Integer_Overflow__int_connect_socket_square_05.c":244:17)
#loc326 = loc("CWE190_Integer_Overflow__int_connect_socket_square_05.c":245:21)
#loc327 = loc("CWE190_Integer_Overflow__int_connect_socket_square_05.c":247:24)
#loc328 = loc("CWE190_Integer_Overflow__int_connect_socket_square_05.c":247:25)
#loc329 = loc("CWE190_Integer_Overflow__int_connect_socket_square_05.c":247:34)
#loc330 = loc("CWE190_Integer_Overflow__int_connect_socket_square_05.c":247:37)
#loc331 = loc("CWE190_Integer_Overflow__int_connect_socket_square_05.c":247:51)
#loc332 = loc("CWE190_Integer_Overflow__int_connect_socket_square_05.c":247:17)
#loc333 = loc("CWE190_Integer_Overflow__int_connect_socket_square_05.c":247:52)
#loc334 = loc("CWE190_Integer_Overflow__int_connect_socket_square_05.c":248:38)
#loc335 = loc("CWE190_Integer_Overflow__int_connect_socket_square_05.c":248:17)
#loc336 = loc("CWE190_Integer_Overflow__int_connect_socket_square_05.c":249:53)
#loc337 = loc("CWE190_Integer_Overflow__int_connect_socket_square_05.c":249:43)
#loc338 = loc("CWE190_Integer_Overflow__int_connect_socket_square_05.c":249:17)
#loc339 = loc("CWE190_Integer_Overflow__int_connect_socket_square_05.c":249:63)
#loc340 = loc("CWE190_Integer_Overflow__int_connect_socket_square_05.c":250:42)
#loc341 = loc("CWE190_Integer_Overflow__int_connect_socket_square_05.c":250:36)
#loc342 = loc("CWE190_Integer_Overflow__int_connect_socket_square_05.c":250:17)
#loc343 = loc("CWE190_Integer_Overflow__int_connect_socket_square_05.c":250:50)
#loc344 = loc("CWE190_Integer_Overflow__int_connect_socket_square_05.c":251:17)
#loc345 = loc("CWE190_Integer_Overflow__int_connect_socket_square_05.c":254:17)
#loc346 = loc("CWE190_Integer_Overflow__int_connect_socket_square_05.c":251:29)
#loc347 = loc("CWE190_Integer_Overflow__int_connect_socket_square_05.c":251:62)
#loc348 = loc("CWE190_Integer_Overflow__int_connect_socket_square_05.c":251:63)
#loc349 = loc("CWE190_Integer_Overflow__int_connect_socket_square_05.c":251:72)
#loc350 = loc("CWE190_Integer_Overflow__int_connect_socket_square_05.c":251:86)
#loc351 = loc("CWE190_Integer_Overflow__int_connect_socket_square_05.c":251:21)
#loc352 = loc("CWE190_Integer_Overflow__int_connect_socket_square_05.c":251:92)
#loc353 = loc("CWE190_Integer_Overflow__int_connect_socket_square_05.c":252:17)
#loc354 = loc("CWE190_Integer_Overflow__int_connect_socket_square_05.c":253:21)
#loc355 = loc("CWE190_Integer_Overflow__int_connect_socket_square_05.c":257:35)
#loc356 = loc("CWE190_Integer_Overflow__int_connect_socket_square_05.c":257:50)
#loc357 = loc("CWE190_Integer_Overflow__int_connect_socket_square_05.c":257:63)
#loc358 = loc("CWE190_Integer_Overflow__int_connect_socket_square_05.c":257:81)
#loc359 = loc("CWE190_Integer_Overflow__int_connect_socket_square_05.c":257:84)
#loc360 = loc("CWE190_Integer_Overflow__int_connect_socket_square_05.c":257:30)
#loc361 = loc("CWE190_Integer_Overflow__int_connect_socket_square_05.c":257:17)
#loc362 = loc("CWE190_Integer_Overflow__int_connect_socket_square_05.c":257:85)
#loc363 = loc("CWE190_Integer_Overflow__int_connect_socket_square_05.c":258:17)
#loc364 = loc("CWE190_Integer_Overflow__int_connect_socket_square_05.c":261:17)
#loc365 = loc("CWE190_Integer_Overflow__int_connect_socket_square_05.c":258:21)
#loc366 = loc("CWE190_Integer_Overflow__int_connect_socket_square_05.c":258:35)
#loc367 = loc("CWE190_Integer_Overflow__int_connect_socket_square_05.c":258:48)
#loc368 = loc("CWE190_Integer_Overflow__int_connect_socket_square_05.c":258:51)
#loc369 = loc("CWE190_Integer_Overflow__int_connect_socket_square_05.c":258:65)
#loc370 = loc("CWE190_Integer_Overflow__int_connect_socket_square_05.c":259:17)
#loc371 = loc("CWE190_Integer_Overflow__int_connect_socket_square_05.c":260:21)
#loc372 = loc("CWE190_Integer_Overflow__int_connect_socket_square_05.c":263:43)
#loc373 = loc("CWE190_Integer_Overflow__int_connect_socket_square_05.c":263:29)
#loc374 = loc("CWE190_Integer_Overflow__int_connect_socket_square_05.c":263:17)
#loc375 = loc("CWE190_Integer_Overflow__int_connect_socket_square_05.c":265:29)
#loc376 = loc("CWE190_Integer_Overflow__int_connect_socket_square_05.c":265:24)
#loc377 = loc("CWE190_Integer_Overflow__int_connect_socket_square_05.c":265:17)
#loc378 = loc("CWE190_Integer_Overflow__int_connect_socket_square_05.c":265:40)
#loc379 = loc("CWE190_Integer_Overflow__int_connect_socket_square_05.c":267:20)
#loc380 = loc("CWE190_Integer_Overflow__int_connect_socket_square_05.c":268:13)
#loc381 = loc("CWE190_Integer_Overflow__int_connect_socket_square_05.c":271:13)
#loc382 = loc("CWE190_Integer_Overflow__int_connect_socket_square_05.c":268:17)
#loc383 = loc("CWE190_Integer_Overflow__int_connect_socket_square_05.c":268:34)
#loc384 = loc("CWE190_Integer_Overflow__int_connect_socket_square_05.c":269:13)
#loc385 = loc("CWE190_Integer_Overflow__int_connect_socket_square_05.c":270:30)
#loc386 = loc("CWE190_Integer_Overflow__int_connect_socket_square_05.c":270:17)
#loc387 = loc("CWE190_Integer_Overflow__int_connect_socket_square_05.c":280:5)
#loc388 = loc("CWE190_Integer_Overflow__int_connect_socket_square_05.c":292:5)
#loc389 = loc("CWE190_Integer_Overflow__int_connect_socket_square_05.c":280:8)
#loc390 = loc("CWE190_Integer_Overflow__int_connect_socket_square_05.c":281:5)
#loc391 = loc("CWE190_Integer_Overflow__int_connect_socket_square_05.c":283:9)
#loc392 = loc("CWE190_Integer_Overflow__int_connect_socket_square_05.c":291:9)
#loc393 = loc("CWE190_Integer_Overflow__int_connect_socket_square_05.c":283:13)
#loc394 = loc("CWE190_Integer_Overflow__int_connect_socket_square_05.c":283:20)
#loc395 = loc("CWE190_Integer_Overflow__int_connect_socket_square_05.c":283:28)
#loc396 = loc("CWE190_Integer_Overflow__int_connect_socket_square_05.c":283:35)
#loc397 = loc("CWE190_Integer_Overflow__int_connect_socket_square_05.c":283:31)
#loc398 = loc("CWE190_Integer_Overflow__int_connect_socket_square_05.c":283:49)
#loc399 = loc("CWE190_Integer_Overflow__int_connect_socket_square_05.c":283:62)
#loc400 = loc("CWE190_Integer_Overflow__int_connect_socket_square_05.c":283:69)
#loc401 = loc("CWE190_Integer_Overflow__int_connect_socket_square_05.c":284:9)
#loc402 = loc("CWE190_Integer_Overflow__int_connect_socket_square_05.c":287:9)
#loc403 = loc("CWE190_Integer_Overflow__int_connect_socket_square_05.c":289:9)
#loc404 = loc("CWE190_Integer_Overflow__int_connect_socket_square_05.c":285:13)
#loc405 = loc("CWE190_Integer_Overflow__int_connect_socket_square_05.c":285:33)
#loc406 = loc("CWE190_Integer_Overflow__int_connect_socket_square_05.c":285:26)
#loc407 = loc("CWE190_Integer_Overflow__int_connect_socket_square_05.c":286:26)
#loc408 = loc("CWE190_Integer_Overflow__int_connect_socket_square_05.c":286:13)
#loc409 = loc("CWE190_Integer_Overflow__int_connect_socket_square_05.c":290:23)
#loc410 = loc("CWE190_Integer_Overflow__int_connect_socket_square_05.c":290:13)
#loc411 = loc("CWE190_Integer_Overflow__int_connect_socket_square_05.c":296:1)
#loc412 = loc("CWE190_Integer_Overflow__int_connect_socket_square_05.c":319:1)
#loc413 = loc("CWE190_Integer_Overflow__int_connect_socket_square_05.c":298:5)
#loc414 = loc("CWE190_Integer_Overflow__int_connect_socket_square_05.c":298:9)
#loc415 = loc("CWE190_Integer_Overflow__int_connect_socket_square_05.c":300:12)
#loc416 = loc("CWE190_Integer_Overflow__int_connect_socket_square_05.c":300:5)
#loc417 = loc("CWE190_Integer_Overflow__int_connect_socket_square_05.c":301:5)
#loc418 = loc("CWE190_Integer_Overflow__int_connect_socket_square_05.c":310:5)
#loc419 = loc("CWE190_Integer_Overflow__int_connect_socket_square_05.c":301:8)
#loc420 = loc("CWE190_Integer_Overflow__int_connect_socket_square_05.c":302:5)
#loc421 = loc("CWE190_Integer_Overflow__int_connect_socket_square_05.c":305:5)
#loc422 = loc("CWE190_Integer_Overflow__int_connect_socket_square_05.c":307:5)
#loc423 = loc("CWE190_Integer_Overflow__int_connect_socket_square_05.c":304:19)
#loc424 = loc("CWE190_Integer_Overflow__int_connect_socket_square_05.c":304:9)
#loc425 = loc("CWE190_Integer_Overflow__int_connect_socket_square_05.c":309:16)
#loc426 = loc("CWE190_Integer_Overflow__int_connect_socket_square_05.c":309:9)
#loc427 = loc("CWE190_Integer_Overflow__int_connect_socket_square_05.c":311:5)
#loc428 = loc("CWE190_Integer_Overflow__int_connect_socket_square_05.c":318:5)
#loc429 = loc("CWE190_Integer_Overflow__int_connect_socket_square_05.c":311:8)
#loc430 = loc("CWE190_Integer_Overflow__int_connect_socket_square_05.c":312:5)
#loc431 = loc("CWE190_Integer_Overflow__int_connect_socket_square_05.c":313:9)
#loc432 = loc("CWE190_Integer_Overflow__int_connect_socket_square_05.c":317:9)
#loc433 = loc("CWE190_Integer_Overflow__int_connect_socket_square_05.c":315:13)
#loc434 = loc("CWE190_Integer_Overflow__int_connect_socket_square_05.c":315:33)
#loc435 = loc("CWE190_Integer_Overflow__int_connect_socket_square_05.c":315:26)
#loc436 = loc("CWE190_Integer_Overflow__int_connect_socket_square_05.c":316:26)
#loc437 = loc("CWE190_Integer_Overflow__int_connect_socket_square_05.c":316:13)
#loc438 = loc("CWE190_Integer_Overflow__int_connect_socket_square_05.c":322:1)
#loc439 = loc("CWE190_Integer_Overflow__int_connect_socket_square_05.c":340:1)
#loc440 = loc("CWE190_Integer_Overflow__int_connect_socket_square_05.c":324:5)
#loc441 = loc("CWE190_Integer_Overflow__int_connect_socket_square_05.c":324:9)
#loc442 = loc("CWE190_Integer_Overflow__int_connect_socket_square_05.c":326:12)
#loc443 = loc("CWE190_Integer_Overflow__int_connect_socket_square_05.c":326:5)
#loc444 = loc("CWE190_Integer_Overflow__int_connect_socket_square_05.c":327:5)
#loc445 = loc("CWE190_Integer_Overflow__int_connect_socket_square_05.c":331:5)
#loc446 = loc("CWE190_Integer_Overflow__int_connect_socket_square_05.c":327:8)
#loc447 = loc("CWE190_Integer_Overflow__int_connect_socket_square_05.c":328:5)
#loc448 = loc("CWE190_Integer_Overflow__int_connect_socket_square_05.c":330:16)
#loc449 = loc("CWE190_Integer_Overflow__int_connect_socket_square_05.c":330:9)
#loc450 = loc("CWE190_Integer_Overflow__int_connect_socket_square_05.c":332:5)
#loc451 = loc("CWE190_Integer_Overflow__int_connect_socket_square_05.c":339:5)
#loc452 = loc("CWE190_Integer_Overflow__int_connect_socket_square_05.c":332:8)
#loc453 = loc("CWE190_Integer_Overflow__int_connect_socket_square_05.c":333:5)
#loc454 = loc("CWE190_Integer_Overflow__int_connect_socket_square_05.c":334:9)
#loc455 = loc("CWE190_Integer_Overflow__int_connect_socket_square_05.c":338:9)
#loc456 = loc("CWE190_Integer_Overflow__int_connect_socket_square_05.c":336:13)
#loc457 = loc("CWE190_Integer_Overflow__int_connect_socket_square_05.c":336:33)
#loc458 = loc("CWE190_Integer_Overflow__int_connect_socket_square_05.c":336:26)
#loc459 = loc("CWE190_Integer_Overflow__int_connect_socket_square_05.c":337:26)
#loc460 = loc("CWE190_Integer_Overflow__int_connect_socket_square_05.c":337:13)
#loc461 = loc(fused[#loc1, #loc2])
#loc462 = loc(fused[#loc3, #loc4])
#loc463 = loc(fused[#loc5, #loc6])
#loc464 = loc(fused[#loc8, #loc9])
#loc465 = loc(fused[#loc10, #loc11])
#loc466 = loc(fused[#loc12, #loc13])
#loc467 = loc(fused[#loc14, #loc15])
#loc468 = loc(fused[#loc16, #loc17])
#loc469 = loc(fused[#loc18, #loc19])
#loc470 = loc(fused[#loc20, #loc21])
#loc471 = loc(fused[#loc22, #loc23])
#loc472 = loc(fused[#loc25, #loc24])
#loc473 = loc(fused[#loc26, #loc27])
#loc474 = loc(fused[#loc29, #loc27])
#loc475 = loc(fused[#loc30, #loc31])
#loc476 = loc(fused[#loc32, #loc33])
#loc477 = loc(fused[#loc34, #loc35])
#loc478 = loc(fused[#loc36, #loc37])
#loc479 = loc(fused[#loc38, #loc39])
#loc480 = loc(fused[#loc40, #loc41])
#loc481 = loc(fused[#loc46, #loc47])
#loc482 = loc(fused[#loc48, #loc49])
#loc483 = loc(fused[#loc50, #loc51])
#loc484 = loc(fused[#loc52, #loc49])
#loc485 = loc(fused[#loc54, #loc55])
#loc486 = loc(fused[#loc57, #loc58])
#loc487 = loc(fused[#loc59, #loc60])
#loc488 = loc(fused[#loc63, #loc61])
#loc489 = loc(fused[#loc67, #loc68])
#loc490 = loc(fused[#loc72, #loc73])
#loc491 = loc(fused[#loc74, #loc75])
#loc492 = loc(fused[#loc77, #loc78])
#loc493 = loc(fused[#loc79, #loc80])
#loc494 = loc(fused[#loc81, #loc82])
#loc495 = loc(fused[#loc83, #loc75])
#loc496 = loc(fused[#loc87, #loc88])
#loc497 = loc(fused[#loc91, #loc92])
#loc498 = loc(fused[#loc93, #loc94])
#loc499 = loc(fused[#loc95, #loc96])
#loc500 = loc(fused[#loc98, #loc99])
#loc501 = loc(fused[#loc100, #loc94])
#loc502 = loc(fused[#loc104, #loc102])
#loc503 = loc(fused[#loc107, #loc108])
#loc504 = loc(fused[#loc110, #loc111])
#loc505 = loc(fused[#loc112, #loc113])
#loc506 = loc(fused[#loc114, #loc111])
#loc507 = loc(fused[#loc117, #loc118])
#loc508 = loc(fused[#loc120, #loc118])
#loc509 = loc(fused[#loc121, #loc122])
#loc510 = loc(fused[#loc123, #loc124])
#loc511 = loc(fused[#loc128, #loc129])
#loc512 = loc(fused[#loc130, #loc131])
#loc513 = loc(fused[#loc132, #loc133])
#loc514 = loc(fused[#loc134, #loc135])
#loc515 = loc(fused[#loc136, #loc137])
#loc516 = loc(fused[#loc138, #loc139])
#loc517 = loc(fused[#loc140, #loc141])
#loc518 = loc(fused[#loc142, #loc143])
#loc519 = loc(fused[#loc148, #loc149])
#loc522 = loc(fused[#loc159, #loc160])
#loc523 = loc(fused[#loc163, #loc164])
#loc524 = loc(fused[#loc167, #loc166])
#loc525 = loc(fused[#loc168, #loc169])
#loc526 = loc(fused[#loc173, #loc174])
#loc527 = loc(fused[#loc175, #loc176])
#loc528 = loc(fused[#loc178, #loc177])
#loc529 = loc(fused[#loc179, #loc180])
#loc530 = loc(fused[#loc182, #loc180])
#loc531 = loc(fused[#loc183, #loc184])
#loc532 = loc(fused[#loc185, #loc186])
#loc533 = loc(fused[#loc187, #loc188])
#loc534 = loc(fused[#loc189, #loc190])
#loc535 = loc(fused[#loc191, #loc192])
#loc536 = loc(fused[#loc193, #loc194])
#loc537 = loc(fused[#loc199, #loc200])
#loc538 = loc(fused[#loc201, #loc202])
#loc539 = loc(fused[#loc203, #loc204])
#loc540 = loc(fused[#loc205, #loc202])
#loc541 = loc(fused[#loc207, #loc208])
#loc542 = loc(fused[#loc210, #loc211])
#loc543 = loc(fused[#loc212, #loc213])
#loc544 = loc(fused[#loc215, #loc214])
#loc545 = loc(fused[#loc218, #loc219])
#loc546 = loc(fused[#loc222, #loc223])
#loc547 = loc(fused[#loc224, #loc225])
#loc548 = loc(fused[#loc227, #loc228])
#loc549 = loc(fused[#loc229, #loc230])
#loc550 = loc(fused[#loc231, #loc232])
#loc551 = loc(fused[#loc233, #loc225])
#loc552 = loc(fused[#loc237, #loc238])
#loc553 = loc(fused[#loc241, #loc242])
#loc554 = loc(fused[#loc243, #loc244])
#loc555 = loc(fused[#loc245, #loc246])
#loc556 = loc(fused[#loc248, #loc249])
#loc557 = loc(fused[#loc250, #loc244])
#loc558 = loc(fused[#loc254, #loc252])
#loc559 = loc(fused[#loc257, #loc258])
#loc560 = loc(fused[#loc260, #loc261])
#loc561 = loc(fused[#loc262, #loc263])
#loc562 = loc(fused[#loc264, #loc261])
#loc563 = loc(fused[#loc267, #loc268])
#loc564 = loc(fused[#loc270, #loc271, #loc272, #loc268])
#loc565 = loc(fused[#loc274, #loc275])
#loc566 = loc(fused[#loc276, #loc277])
#loc567 = loc(fused[#loc280, #loc283])
#loc568 = loc(fused[#loc284, #loc285, #loc286, #loc275])
#loc569 = loc(fused[#loc287, #loc288])
#loc570 = loc(fused[#loc293, #loc294])
#loc571 = loc(fused[#loc295, #loc296])
#loc572 = loc(fused[#loc298, #loc297])
#loc573 = loc(fused[#loc299, #loc300])
#loc574 = loc(fused[#loc302, #loc300])
#loc575 = loc(fused[#loc303, #loc304])
#loc576 = loc(fused[#loc305, #loc306])
#loc577 = loc(fused[#loc307, #loc308])
#loc578 = loc(fused[#loc309, #loc310])
#loc579 = loc(fused[#loc311, #loc312])
#loc580 = loc(fused[#loc313, #loc314])
#loc581 = loc(fused[#loc319, #loc320])
#loc582 = loc(fused[#loc321, #loc322])
#loc583 = loc(fused[#loc323, #loc324])
#loc584 = loc(fused[#loc325, #loc322])
#loc585 = loc(fused[#loc327, #loc328])
#loc586 = loc(fused[#loc330, #loc331])
#loc587 = loc(fused[#loc332, #loc333])
#loc588 = loc(fused[#loc335, #loc334])
#loc589 = loc(fused[#loc338, #loc339])
#loc590 = loc(fused[#loc342, #loc343])
#loc591 = loc(fused[#loc344, #loc345])
#loc592 = loc(fused[#loc347, #loc348])
#loc593 = loc(fused[#loc349, #loc350])
#loc594 = loc(fused[#loc351, #loc352])
#loc595 = loc(fused[#loc353, #loc345])
#loc596 = loc(fused[#loc357, #loc358])
#loc597 = loc(fused[#loc361, #loc362])
#loc598 = loc(fused[#loc363, #loc364])
#loc599 = loc(fused[#loc365, #loc366])
#loc600 = loc(fused[#loc368, #loc369])
#loc601 = loc(fused[#loc370, #loc364])
#loc602 = loc(fused[#loc374, #loc372])
#loc603 = loc(fused[#loc377, #loc378])
#loc604 = loc(fused[#loc380, #loc381])
#loc605 = loc(fused[#loc382, #loc383])
#loc606 = loc(fused[#loc384, #loc381])
#loc607 = loc(fused[#loc387, #loc388])
#loc608 = loc(fused[#loc390, #loc388])
#loc609 = loc(fused[#loc391, #loc392])
#loc610 = loc(fused[#loc393, #loc394])
#loc611 = loc(fused[#loc397, #loc400])
#loc612 = loc(fused[#loc401, #loc402, #loc403, #loc392])
#loc613 = loc(fused[#loc404, #loc405])
#loc614 = loc(fused[#loc411, #loc412])
#loc615 = loc(fused[#loc413, #loc414])
#loc616 = loc(fused[#loc416, #loc415])
#loc617 = loc(fused[#loc417, #loc418])
#loc618 = loc(fused[#loc420, #loc421, #loc422, #loc418])
#loc619 = loc(fused[#loc426, #loc425])
#loc620 = loc(fused[#loc427, #loc428])
#loc621 = loc(fused[#loc430, #loc428])
#loc622 = loc(fused[#loc431, #loc432])
#loc623 = loc(fused[#loc433, #loc434])
#loc624 = loc(fused[#loc438, #loc439])
#loc625 = loc(fused[#loc440, #loc441])
#loc626 = loc(fused[#loc443, #loc442])
#loc627 = loc(fused[#loc444, #loc445])
#loc628 = loc(fused[#loc447, #loc445])
#loc629 = loc(fused[#loc449, #loc448])
#loc630 = loc(fused[#loc450, #loc451])
#loc631 = loc(fused[#loc453, #loc451])
#loc632 = loc(fused[#loc454, #loc455])
#loc633 = loc(fused[#loc456, #loc457])
