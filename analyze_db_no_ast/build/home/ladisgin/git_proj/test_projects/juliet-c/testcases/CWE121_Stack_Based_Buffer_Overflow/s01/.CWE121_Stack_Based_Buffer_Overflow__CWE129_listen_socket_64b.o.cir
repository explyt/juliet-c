!s32i = !cir.int<s, 32>
!s8i = !cir.int<s, 8>
!void = !cir.void
#false = #cir.bool<false> : !cir.bool
#fn_attr = #cir<extra({inline = #cir.inline<no>, nothrow = #cir.nothrow, optnone = #cir.optnone})>
#loc8 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE129_listen_socket_64b.c":44:75)
#loc9 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE129_listen_socket_64b.c":44:82)
#loc50 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE129_listen_socket_64b.c":76:79)
#loc51 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE129_listen_socket_64b.c":76:86)
#loc94 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE129_listen_socket_64b.c":104:79)
#loc95 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE129_listen_socket_64b.c":104:86)
#true = #cir.bool<true> : !cir.bool
#loc142 = loc(fused[#loc8, #loc9])
#loc158 = loc(fused[#loc50, #loc51])
#loc174 = loc(fused[#loc94, #loc95])
module @"/home/ladisgin/git_proj/test_projects/juliet-c/testcases/CWE121_Stack_Based_Buffer_Overflow/s01/CWE121_Stack_Based_Buffer_Overflow__CWE129_listen_socket_64b.c" attributes {cir.lang = #cir.lang<c>, cir.sob = #cir.signed_overflow_behavior<undefined>, cir.triple = "x86_64-unknown-linux-gnu", dlti.dl_spec = #dlti.dl_spec<#dlti.dl_entry<f80, dense<128> : vector<2xi64>>, #dlti.dl_entry<i128, dense<128> : vector<2xi64>>, #dlti.dl_entry<i8, dense<8> : vector<2xi64>>, #dlti.dl_entry<i1, dense<8> : vector<2xi64>>, #dlti.dl_entry<!llvm.ptr, dense<64> : vector<4xi64>>, #dlti.dl_entry<f64, dense<64> : vector<2xi64>>, #dlti.dl_entry<f16, dense<16> : vector<2xi64>>, #dlti.dl_entry<i32, dense<32> : vector<2xi64>>, #dlti.dl_entry<i16, dense<16> : vector<2xi64>>, #dlti.dl_entry<i64, dense<64> : vector<2xi64>>, #dlti.dl_entry<!llvm.ptr<272>, dense<64> : vector<4xi64>>, #dlti.dl_entry<!llvm.ptr<271>, dense<32> : vector<4xi64>>, #dlti.dl_entry<!llvm.ptr<270>, dense<32> : vector<4xi64>>, #dlti.dl_entry<f128, dense<128> : vector<2xi64>>, #dlti.dl_entry<"dlti.stack_alignment", 128 : i64>, #dlti.dl_entry<"dlti.endianness", "little">>, llvm.data_layout = "e-m:e-p270:32:32-p271:32:32-p272:64:64-i64:64-i128:128-f80:128-n8:16:32:64-S128"} {
  cir.func private  @printIntLine(!s32i) loc(#loc139)
  cir.func private  @printLine(!cir.ptr<!s8i>) loc(#loc140)
  cir.global "private"  constant internal dsolocal @".str" = #cir.const_array<"ERROR: Array index is negative.\00" : !cir.array<!s8i x 32>> : !cir.array<!s8i x 32> {alignment = 1 : i64} loc(#loc5)
  cir.func  @CWE121_Stack_Based_Buffer_Overflow__CWE129_listen_socket_64b_badSink(%arg0: !cir.ptr<!void> loc(fused[#loc8, #loc9])) extra(#fn_attr) {
    %0 = cir.alloca !cir.ptr<!void>, !cir.ptr<!cir.ptr<!void>>, ["dataVoidPtr", init] {alignment = 8 : i64} loc(#loc142)
    %1 = cir.alloca !cir.ptr<!s32i>, !cir.ptr<!cir.ptr<!s32i>>, ["dataPtr", init] {alignment = 8 : i64} loc(#loc143)
    %2 = cir.alloca !s32i, !cir.ptr<!s32i>, ["data", init] {alignment = 4 : i64} loc(#loc144)
    cir.store %arg0, %0 : !cir.ptr<!void>, !cir.ptr<!cir.ptr<!void>> loc(#loc14)
    %3 = cir.load %0 : !cir.ptr<!cir.ptr<!void>>, !cir.ptr<!void> loc(#loc11)
    %4 = cir.cast(bitcast, %3 : !cir.ptr<!void>), !cir.ptr<!s32i> loc(#loc11)
    cir.store %4, %1 : !cir.ptr<!s32i>, !cir.ptr<!cir.ptr<!s32i>> loc(#loc143)
    %5 = cir.load deref %1 : !cir.ptr<!cir.ptr<!s32i>>, !cir.ptr<!s32i> loc(#loc15)
    %6 = cir.load %5 : !cir.ptr<!s32i>, !s32i loc(#loc16)
    cir.store %6, %2 : !s32i, !cir.ptr<!s32i> loc(#loc144)
    cir.scope {
      %7 = cir.alloca !s32i, !cir.ptr<!s32i>, ["i"] {alignment = 4 : i64} loc(#loc146)
      %8 = cir.alloca !cir.array<!s32i x 10>, !cir.ptr<!cir.array<!s32i x 10>>, ["buffer"] {alignment = 16 : i64} loc(#loc147)
      %9 = cir.const #cir.zero : !cir.array<!s32i x 10> loc(#loc147)
      cir.store %9, %8 : !cir.array<!s32i x 10>, !cir.ptr<!cir.array<!s32i x 10>> loc(#loc147)
      cir.scope {
        %10 = cir.load %2 : !cir.ptr<!s32i>, !s32i loc(#loc25)
        %11 = cir.const #cir.int<0> : !s32i loc(#loc26)
        %12 = cir.cmp(ge, %10, %11) : !s32i, !s32i loc(#loc149)
        %13 = cir.cast(int_to_bool, %12 : !s32i), !cir.bool loc(#loc27)
        cir.if %13 {
          %14 = cir.const #cir.int<1> : !s32i loc(#loc31)
          %15 = cir.load %2 : !cir.ptr<!s32i>, !s32i loc(#loc32)
          %16 = cir.cast(array_to_ptrdecay, %8 : !cir.ptr<!cir.array<!s32i x 10>>), !cir.ptr<!s32i> loc(#loc33)
          %17 = cir.ptr_stride(%16 : !cir.ptr<!s32i>, %15 : !s32i), !cir.ptr<!s32i> loc(#loc33)
          cir.store %14, %17 : !s32i, !cir.ptr<!s32i> loc(#loc151)
          cir.scope {
            %18 = cir.const #cir.int<0> : !s32i loc(#loc36)
            cir.store %18, %7 : !s32i, !cir.ptr<!s32i> loc(#loc153)
            cir.for : cond {
              %19 = cir.load %7 : !cir.ptr<!s32i>, !s32i loc(#loc38)
              %20 = cir.const #cir.int<10> : !s32i loc(#loc39)
              %21 = cir.cmp(lt, %19, %20) : !s32i, !s32i loc(#loc154)
              %22 = cir.cast(int_to_bool, %21 : !s32i), !cir.bool loc(#loc40)
              cir.condition(%22) loc(#loc40)
            } body {
              cir.scope {
                %19 = cir.load %7 : !cir.ptr<!s32i>, !s32i loc(#loc42)
                %20 = cir.cast(array_to_ptrdecay, %8 : !cir.ptr<!cir.array<!s32i x 10>>), !cir.ptr<!s32i> loc(#loc43)
                %21 = cir.ptr_stride(%20 : !cir.ptr<!s32i>, %19 : !s32i), !cir.ptr<!s32i> loc(#loc43)
                %22 = cir.load %21 : !cir.ptr<!s32i>, !s32i loc(#loc43)
                cir.call @printIntLine(%22) : (!s32i) -> () loc(#loc44)
              } loc(#loc155)
              cir.yield loc(#loc35)
            } step {
              %19 = cir.load %7 : !cir.ptr<!s32i>, !s32i loc(#loc45)
              %20 = cir.unary(inc, %19) : !s32i, !s32i loc(#loc46)
              cir.store %20, %7 : !s32i, !cir.ptr<!s32i> loc(#loc156)
              cir.yield loc(#loc152)
            } loc(#loc152)
          } loc(#loc152)
        } else {
          %14 = cir.get_global @".str" : !cir.ptr<!cir.array<!s8i x 32>> loc(#loc5)
          %15 = cir.cast(array_to_ptrdecay, %14 : !cir.ptr<!cir.array<!s8i x 32>>), !cir.ptr<!s8i> loc(#loc5)
          cir.call @printLine(%15) : (!cir.ptr<!s8i>) -> () loc(#loc47)
        } loc(#loc150)
      } loc(#loc148)
    } loc(#loc145)
    cir.return loc(#loc7)
  } loc(#loc141)
  cir.func  @CWE121_Stack_Based_Buffer_Overflow__CWE129_listen_socket_64b_goodG2BSink(%arg0: !cir.ptr<!void> loc(fused[#loc50, #loc51])) extra(#fn_attr) {
    %0 = cir.alloca !cir.ptr<!void>, !cir.ptr<!cir.ptr<!void>>, ["dataVoidPtr", init] {alignment = 8 : i64} loc(#loc158)
    %1 = cir.alloca !cir.ptr<!s32i>, !cir.ptr<!cir.ptr<!s32i>>, ["dataPtr", init] {alignment = 8 : i64} loc(#loc159)
    %2 = cir.alloca !s32i, !cir.ptr<!s32i>, ["data", init] {alignment = 4 : i64} loc(#loc160)
    cir.store %arg0, %0 : !cir.ptr<!void>, !cir.ptr<!cir.ptr<!void>> loc(#loc56)
    %3 = cir.load %0 : !cir.ptr<!cir.ptr<!void>>, !cir.ptr<!void> loc(#loc53)
    %4 = cir.cast(bitcast, %3 : !cir.ptr<!void>), !cir.ptr<!s32i> loc(#loc53)
    cir.store %4, %1 : !cir.ptr<!s32i>, !cir.ptr<!cir.ptr<!s32i>> loc(#loc159)
    %5 = cir.load deref %1 : !cir.ptr<!cir.ptr<!s32i>>, !cir.ptr<!s32i> loc(#loc57)
    %6 = cir.load %5 : !cir.ptr<!s32i>, !s32i loc(#loc58)
    cir.store %6, %2 : !s32i, !cir.ptr<!s32i> loc(#loc160)
    cir.scope {
      %7 = cir.alloca !s32i, !cir.ptr<!s32i>, ["i"] {alignment = 4 : i64} loc(#loc162)
      %8 = cir.alloca !cir.array<!s32i x 10>, !cir.ptr<!cir.array<!s32i x 10>>, ["buffer"] {alignment = 16 : i64} loc(#loc163)
      %9 = cir.const #cir.zero : !cir.array<!s32i x 10> loc(#loc163)
      cir.store %9, %8 : !cir.array<!s32i x 10>, !cir.ptr<!cir.array<!s32i x 10>> loc(#loc163)
      cir.scope {
        %10 = cir.load %2 : !cir.ptr<!s32i>, !s32i loc(#loc67)
        %11 = cir.const #cir.int<0> : !s32i loc(#loc68)
        %12 = cir.cmp(ge, %10, %11) : !s32i, !s32i loc(#loc165)
        %13 = cir.cast(int_to_bool, %12 : !s32i), !cir.bool loc(#loc69)
        cir.if %13 {
          %14 = cir.const #cir.int<1> : !s32i loc(#loc73)
          %15 = cir.load %2 : !cir.ptr<!s32i>, !s32i loc(#loc74)
          %16 = cir.cast(array_to_ptrdecay, %8 : !cir.ptr<!cir.array<!s32i x 10>>), !cir.ptr<!s32i> loc(#loc75)
          %17 = cir.ptr_stride(%16 : !cir.ptr<!s32i>, %15 : !s32i), !cir.ptr<!s32i> loc(#loc75)
          cir.store %14, %17 : !s32i, !cir.ptr<!s32i> loc(#loc167)
          cir.scope {
            %18 = cir.const #cir.int<0> : !s32i loc(#loc78)
            cir.store %18, %7 : !s32i, !cir.ptr<!s32i> loc(#loc169)
            cir.for : cond {
              %19 = cir.load %7 : !cir.ptr<!s32i>, !s32i loc(#loc80)
              %20 = cir.const #cir.int<10> : !s32i loc(#loc81)
              %21 = cir.cmp(lt, %19, %20) : !s32i, !s32i loc(#loc170)
              %22 = cir.cast(int_to_bool, %21 : !s32i), !cir.bool loc(#loc82)
              cir.condition(%22) loc(#loc82)
            } body {
              cir.scope {
                %19 = cir.load %7 : !cir.ptr<!s32i>, !s32i loc(#loc84)
                %20 = cir.cast(array_to_ptrdecay, %8 : !cir.ptr<!cir.array<!s32i x 10>>), !cir.ptr<!s32i> loc(#loc85)
                %21 = cir.ptr_stride(%20 : !cir.ptr<!s32i>, %19 : !s32i), !cir.ptr<!s32i> loc(#loc85)
                %22 = cir.load %21 : !cir.ptr<!s32i>, !s32i loc(#loc85)
                cir.call @printIntLine(%22) : (!s32i) -> () loc(#loc86)
              } loc(#loc171)
              cir.yield loc(#loc77)
            } step {
              %19 = cir.load %7 : !cir.ptr<!s32i>, !s32i loc(#loc87)
              %20 = cir.unary(inc, %19) : !s32i, !s32i loc(#loc88)
              cir.store %20, %7 : !s32i, !cir.ptr<!s32i> loc(#loc172)
              cir.yield loc(#loc168)
            } loc(#loc168)
          } loc(#loc168)
        } else {
          %14 = cir.get_global @".str" : !cir.ptr<!cir.array<!s8i x 32>> loc(#loc89)
          %15 = cir.cast(array_to_ptrdecay, %14 : !cir.ptr<!cir.array<!s8i x 32>>), !cir.ptr<!s8i> loc(#loc89)
          cir.call @printLine(%15) : (!cir.ptr<!s8i>) -> () loc(#loc90)
        } loc(#loc166)
      } loc(#loc164)
    } loc(#loc161)
    cir.return loc(#loc49)
  } loc(#loc157)
  cir.global "private"  constant internal dsolocal @".str1" = #cir.const_array<"ERROR: Array index is out-of-bounds\00" : !cir.array<!s8i x 36>> : !cir.array<!s8i x 36> {alignment = 1 : i64} loc(#loc91)
  cir.func  @CWE121_Stack_Based_Buffer_Overflow__CWE129_listen_socket_64b_goodB2GSink(%arg0: !cir.ptr<!void> loc(fused[#loc94, #loc95])) extra(#fn_attr) {
    %0 = cir.alloca !cir.ptr<!void>, !cir.ptr<!cir.ptr<!void>>, ["dataVoidPtr", init] {alignment = 8 : i64} loc(#loc174)
    %1 = cir.alloca !cir.ptr<!s32i>, !cir.ptr<!cir.ptr<!s32i>>, ["dataPtr", init] {alignment = 8 : i64} loc(#loc175)
    %2 = cir.alloca !s32i, !cir.ptr<!s32i>, ["data", init] {alignment = 4 : i64} loc(#loc176)
    cir.store %arg0, %0 : !cir.ptr<!void>, !cir.ptr<!cir.ptr<!void>> loc(#loc100)
    %3 = cir.load %0 : !cir.ptr<!cir.ptr<!void>>, !cir.ptr<!void> loc(#loc97)
    %4 = cir.cast(bitcast, %3 : !cir.ptr<!void>), !cir.ptr<!s32i> loc(#loc97)
    cir.store %4, %1 : !cir.ptr<!s32i>, !cir.ptr<!cir.ptr<!s32i>> loc(#loc175)
    %5 = cir.load deref %1 : !cir.ptr<!cir.ptr<!s32i>>, !cir.ptr<!s32i> loc(#loc101)
    %6 = cir.load %5 : !cir.ptr<!s32i>, !s32i loc(#loc102)
    cir.store %6, %2 : !s32i, !cir.ptr<!s32i> loc(#loc176)
    cir.scope {
      %7 = cir.alloca !s32i, !cir.ptr<!s32i>, ["i"] {alignment = 4 : i64} loc(#loc178)
      %8 = cir.alloca !cir.array<!s32i x 10>, !cir.ptr<!cir.array<!s32i x 10>>, ["buffer"] {alignment = 16 : i64} loc(#loc179)
      %9 = cir.const #cir.zero : !cir.array<!s32i x 10> loc(#loc179)
      cir.store %9, %8 : !cir.array<!s32i x 10>, !cir.ptr<!cir.array<!s32i x 10>> loc(#loc179)
      cir.scope {
        %10 = cir.load %2 : !cir.ptr<!s32i>, !s32i loc(#loc111)
        %11 = cir.const #cir.int<0> : !s32i loc(#loc112)
        %12 = cir.cmp(ge, %10, %11) : !s32i, !s32i loc(#loc181)
        %13 = cir.cast(int_to_bool, %12 : !s32i), !cir.bool loc(#loc113)
        %14 = cir.ternary(%13, true {
          %15 = cir.load %2 : !cir.ptr<!s32i>, !s32i loc(#loc115)
          %16 = cir.const #cir.int<10> : !s32i loc(#loc116)
          %17 = cir.cmp(lt, %15, %16) : !s32i, !s32i loc(#loc182)
          %18 = cir.cast(int_to_bool, %17 : !s32i), !cir.bool loc(#loc118)
          %19 = cir.ternary(%18, true {
            %20 = cir.const #true loc(#loc114)
            cir.yield %20 : !cir.bool loc(#loc114)
          }, false {
            %20 = cir.const #false loc(#loc114)
            cir.yield %20 : !cir.bool loc(#loc114)
          }) : (!cir.bool) -> !cir.bool loc(#loc114)
          cir.yield %19 : !cir.bool loc(#loc114)
        }, false {
          %15 = cir.const #false loc(#loc114)
          cir.yield %15 : !cir.bool loc(#loc114)
        }) : (!cir.bool) -> !cir.bool loc(#loc114)
        cir.if %14 {
          %15 = cir.const #cir.int<1> : !s32i loc(#loc122)
          %16 = cir.load %2 : !cir.ptr<!s32i>, !s32i loc(#loc123)
          %17 = cir.cast(array_to_ptrdecay, %8 : !cir.ptr<!cir.array<!s32i x 10>>), !cir.ptr<!s32i> loc(#loc124)
          %18 = cir.ptr_stride(%17 : !cir.ptr<!s32i>, %16 : !s32i), !cir.ptr<!s32i> loc(#loc124)
          cir.store %15, %18 : !s32i, !cir.ptr<!s32i> loc(#loc184)
          cir.scope {
            %19 = cir.const #cir.int<0> : !s32i loc(#loc127)
            cir.store %19, %7 : !s32i, !cir.ptr<!s32i> loc(#loc186)
            cir.for : cond {
              %20 = cir.load %7 : !cir.ptr<!s32i>, !s32i loc(#loc129)
              %21 = cir.const #cir.int<10> : !s32i loc(#loc130)
              %22 = cir.cmp(lt, %20, %21) : !s32i, !s32i loc(#loc187)
              %23 = cir.cast(int_to_bool, %22 : !s32i), !cir.bool loc(#loc131)
              cir.condition(%23) loc(#loc131)
            } body {
              cir.scope {
                %20 = cir.load %7 : !cir.ptr<!s32i>, !s32i loc(#loc133)
                %21 = cir.cast(array_to_ptrdecay, %8 : !cir.ptr<!cir.array<!s32i x 10>>), !cir.ptr<!s32i> loc(#loc134)
                %22 = cir.ptr_stride(%21 : !cir.ptr<!s32i>, %20 : !s32i), !cir.ptr<!s32i> loc(#loc134)
                %23 = cir.load %22 : !cir.ptr<!s32i>, !s32i loc(#loc134)
                cir.call @printIntLine(%23) : (!s32i) -> () loc(#loc135)
              } loc(#loc188)
              cir.yield loc(#loc126)
            } step {
              %20 = cir.load %7 : !cir.ptr<!s32i>, !s32i loc(#loc136)
              %21 = cir.unary(inc, %20) : !s32i, !s32i loc(#loc137)
              cir.store %21, %7 : !s32i, !cir.ptr<!s32i> loc(#loc189)
              cir.yield loc(#loc185)
            } loc(#loc185)
          } loc(#loc185)
        } else {
          %15 = cir.get_global @".str1" : !cir.ptr<!cir.array<!s8i x 36>> loc(#loc91)
          %16 = cir.cast(array_to_ptrdecay, %15 : !cir.ptr<!cir.array<!s8i x 36>>), !cir.ptr<!s8i> loc(#loc91)
          cir.call @printLine(%16) : (!cir.ptr<!s8i>) -> () loc(#loc138)
        } loc(#loc183)
      } loc(#loc180)
    } loc(#loc177)
    cir.return loc(#loc93)
  } loc(#loc173)
} loc(#loc)
#loc = loc("/home/ladisgin/git_proj/test_projects/juliet-c/testcases/CWE121_Stack_Based_Buffer_Overflow/s01/CWE121_Stack_Based_Buffer_Overflow__CWE129_listen_socket_64b.c":0:0)
#loc1 = loc("../../../testcasesupport/std_testcase_io.h":18:1)
#loc2 = loc("../../../testcasesupport/std_testcase_io.h":18:33)
#loc3 = loc("../../../testcasesupport/std_testcase_io.h":14:1)
#loc4 = loc("../../../testcasesupport/std_testcase_io.h":14:33)
#loc5 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE129_listen_socket_64b.c":66:23)
#loc6 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE129_listen_socket_64b.c":44:1)
#loc7 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE129_listen_socket_64b.c":69:1)
#loc10 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE129_listen_socket_64b.c":47:5)
#loc11 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE129_listen_socket_64b.c":47:28)
#loc12 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE129_listen_socket_64b.c":49:5)
#loc13 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE129_listen_socket_64b.c":49:25)
#loc14 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE129_listen_socket_64b.c":45:1)
#loc15 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE129_listen_socket_64b.c":49:18)
#loc16 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE129_listen_socket_64b.c":49:17)
#loc17 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE129_listen_socket_64b.c":50:5)
#loc18 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE129_listen_socket_64b.c":68:5)
#loc19 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE129_listen_socket_64b.c":51:9)
#loc20 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE129_listen_socket_64b.c":51:13)
#loc21 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE129_listen_socket_64b.c":52:9)
#loc22 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE129_listen_socket_64b.c":52:30)
#loc23 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE129_listen_socket_64b.c":55:9)
#loc24 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE129_listen_socket_64b.c":67:9)
#loc25 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE129_listen_socket_64b.c":55:13)
#loc26 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE129_listen_socket_64b.c":55:21)
#loc27 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE129_listen_socket_64b.c":55:18)
#loc28 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE129_listen_socket_64b.c":56:9)
#loc29 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE129_listen_socket_64b.c":63:9)
#loc30 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE129_listen_socket_64b.c":65:9)
#loc31 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE129_listen_socket_64b.c":57:28)
#loc32 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE129_listen_socket_64b.c":57:20)
#loc33 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE129_listen_socket_64b.c":57:13)
#loc34 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE129_listen_socket_64b.c":59:13)
#loc35 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE129_listen_socket_64b.c":62:13)
#loc36 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE129_listen_socket_64b.c":59:21)
#loc37 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE129_listen_socket_64b.c":59:17)
#loc38 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE129_listen_socket_64b.c":59:24)
#loc39 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE129_listen_socket_64b.c":59:28)
#loc40 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE129_listen_socket_64b.c":59:26)
#loc41 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE129_listen_socket_64b.c":60:13)
#loc42 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE129_listen_socket_64b.c":61:37)
#loc43 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE129_listen_socket_64b.c":61:30)
#loc44 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE129_listen_socket_64b.c":61:17)
#loc45 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE129_listen_socket_64b.c":59:33)
#loc46 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE129_listen_socket_64b.c":59:32)
#loc47 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE129_listen_socket_64b.c":66:13)
#loc48 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE129_listen_socket_64b.c":76:1)
#loc49 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE129_listen_socket_64b.c":101:1)
#loc52 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE129_listen_socket_64b.c":79:5)
#loc53 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE129_listen_socket_64b.c":79:28)
#loc54 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE129_listen_socket_64b.c":81:5)
#loc55 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE129_listen_socket_64b.c":81:25)
#loc56 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE129_listen_socket_64b.c":77:1)
#loc57 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE129_listen_socket_64b.c":81:18)
#loc58 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE129_listen_socket_64b.c":81:17)
#loc59 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE129_listen_socket_64b.c":82:5)
#loc60 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE129_listen_socket_64b.c":100:5)
#loc61 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE129_listen_socket_64b.c":83:9)
#loc62 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE129_listen_socket_64b.c":83:13)
#loc63 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE129_listen_socket_64b.c":84:9)
#loc64 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE129_listen_socket_64b.c":84:30)
#loc65 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE129_listen_socket_64b.c":87:9)
#loc66 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE129_listen_socket_64b.c":99:9)
#loc67 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE129_listen_socket_64b.c":87:13)
#loc68 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE129_listen_socket_64b.c":87:21)
#loc69 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE129_listen_socket_64b.c":87:18)
#loc70 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE129_listen_socket_64b.c":88:9)
#loc71 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE129_listen_socket_64b.c":95:9)
#loc72 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE129_listen_socket_64b.c":97:9)
#loc73 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE129_listen_socket_64b.c":89:28)
#loc74 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE129_listen_socket_64b.c":89:20)
#loc75 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE129_listen_socket_64b.c":89:13)
#loc76 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE129_listen_socket_64b.c":91:13)
#loc77 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE129_listen_socket_64b.c":94:13)
#loc78 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE129_listen_socket_64b.c":91:21)
#loc79 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE129_listen_socket_64b.c":91:17)
#loc80 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE129_listen_socket_64b.c":91:24)
#loc81 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE129_listen_socket_64b.c":91:28)
#loc82 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE129_listen_socket_64b.c":91:26)
#loc83 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE129_listen_socket_64b.c":92:13)
#loc84 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE129_listen_socket_64b.c":93:37)
#loc85 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE129_listen_socket_64b.c":93:30)
#loc86 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE129_listen_socket_64b.c":93:17)
#loc87 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE129_listen_socket_64b.c":91:33)
#loc88 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE129_listen_socket_64b.c":91:32)
#loc89 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE129_listen_socket_64b.c":98:23)
#loc90 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE129_listen_socket_64b.c":98:13)
#loc91 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE129_listen_socket_64b.c":125:23)
#loc92 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE129_listen_socket_64b.c":104:1)
#loc93 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE129_listen_socket_64b.c":128:1)
#loc96 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE129_listen_socket_64b.c":107:5)
#loc97 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE129_listen_socket_64b.c":107:28)
#loc98 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE129_listen_socket_64b.c":109:5)
#loc99 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE129_listen_socket_64b.c":109:25)
#loc100 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE129_listen_socket_64b.c":105:1)
#loc101 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE129_listen_socket_64b.c":109:18)
#loc102 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE129_listen_socket_64b.c":109:17)
#loc103 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE129_listen_socket_64b.c":110:5)
#loc104 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE129_listen_socket_64b.c":127:5)
#loc105 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE129_listen_socket_64b.c":111:9)
#loc106 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE129_listen_socket_64b.c":111:13)
#loc107 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE129_listen_socket_64b.c":112:9)
#loc108 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE129_listen_socket_64b.c":112:30)
#loc109 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE129_listen_socket_64b.c":114:9)
#loc110 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE129_listen_socket_64b.c":126:9)
#loc111 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE129_listen_socket_64b.c":114:13)
#loc112 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE129_listen_socket_64b.c":114:21)
#loc113 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE129_listen_socket_64b.c":114:18)
#loc114 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE129_listen_socket_64b.c":114:23)
#loc115 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE129_listen_socket_64b.c":114:26)
#loc116 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE129_listen_socket_64b.c":114:34)
#loc117 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE129_listen_socket_64b.c":114:36)
#loc118 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE129_listen_socket_64b.c":114:31)
#loc119 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE129_listen_socket_64b.c":115:9)
#loc120 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE129_listen_socket_64b.c":122:9)
#loc121 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE129_listen_socket_64b.c":124:9)
#loc122 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE129_listen_socket_64b.c":116:28)
#loc123 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE129_listen_socket_64b.c":116:20)
#loc124 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE129_listen_socket_64b.c":116:13)
#loc125 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE129_listen_socket_64b.c":118:13)
#loc126 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE129_listen_socket_64b.c":121:13)
#loc127 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE129_listen_socket_64b.c":118:21)
#loc128 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE129_listen_socket_64b.c":118:17)
#loc129 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE129_listen_socket_64b.c":118:24)
#loc130 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE129_listen_socket_64b.c":118:28)
#loc131 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE129_listen_socket_64b.c":118:26)
#loc132 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE129_listen_socket_64b.c":119:13)
#loc133 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE129_listen_socket_64b.c":120:37)
#loc134 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE129_listen_socket_64b.c":120:30)
#loc135 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE129_listen_socket_64b.c":120:17)
#loc136 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE129_listen_socket_64b.c":118:33)
#loc137 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE129_listen_socket_64b.c":118:32)
#loc138 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE129_listen_socket_64b.c":125:13)
#loc139 = loc(fused[#loc1, #loc2])
#loc140 = loc(fused[#loc3, #loc4])
#loc141 = loc(fused[#loc6, #loc7])
#loc143 = loc(fused[#loc10, #loc11])
#loc144 = loc(fused[#loc12, #loc13])
#loc145 = loc(fused[#loc17, #loc18])
#loc146 = loc(fused[#loc19, #loc20])
#loc147 = loc(fused[#loc21, #loc22])
#loc148 = loc(fused[#loc23, #loc24])
#loc149 = loc(fused[#loc25, #loc26])
#loc150 = loc(fused[#loc28, #loc29, #loc30, #loc24])
#loc151 = loc(fused[#loc33, #loc31])
#loc152 = loc(fused[#loc34, #loc35])
#loc153 = loc(fused[#loc37, #loc36])
#loc154 = loc(fused[#loc38, #loc39])
#loc155 = loc(fused[#loc41, #loc35])
#loc156 = loc(fused[#loc46, #loc45])
#loc157 = loc(fused[#loc48, #loc49])
#loc159 = loc(fused[#loc52, #loc53])
#loc160 = loc(fused[#loc54, #loc55])
#loc161 = loc(fused[#loc59, #loc60])
#loc162 = loc(fused[#loc61, #loc62])
#loc163 = loc(fused[#loc63, #loc64])
#loc164 = loc(fused[#loc65, #loc66])
#loc165 = loc(fused[#loc67, #loc68])
#loc166 = loc(fused[#loc70, #loc71, #loc72, #loc66])
#loc167 = loc(fused[#loc75, #loc73])
#loc168 = loc(fused[#loc76, #loc77])
#loc169 = loc(fused[#loc79, #loc78])
#loc170 = loc(fused[#loc80, #loc81])
#loc171 = loc(fused[#loc83, #loc77])
#loc172 = loc(fused[#loc88, #loc87])
#loc173 = loc(fused[#loc92, #loc93])
#loc175 = loc(fused[#loc96, #loc97])
#loc176 = loc(fused[#loc98, #loc99])
#loc177 = loc(fused[#loc103, #loc104])
#loc178 = loc(fused[#loc105, #loc106])
#loc179 = loc(fused[#loc107, #loc108])
#loc180 = loc(fused[#loc109, #loc110])
#loc181 = loc(fused[#loc111, #loc112])
#loc182 = loc(fused[#loc115, #loc117])
#loc183 = loc(fused[#loc119, #loc120, #loc121, #loc110])
#loc184 = loc(fused[#loc124, #loc122])
#loc185 = loc(fused[#loc125, #loc126])
#loc186 = loc(fused[#loc128, #loc127])
#loc187 = loc(fused[#loc129, #loc130])
#loc188 = loc(fused[#loc132, #loc126])
#loc189 = loc(fused[#loc137, #loc136])
