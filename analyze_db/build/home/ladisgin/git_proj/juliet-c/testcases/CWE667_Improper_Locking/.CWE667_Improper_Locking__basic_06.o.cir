!s32i = !cir.int<s, 32>
!s8i = !cir.int<s, 8>
!ty__stdThreadLock = !cir.struct<struct "_stdThreadLock" incomplete>
!void = !cir.void
#fn_attr = #cir<extra({nothrow = #cir.nothrow})>
#fn_attr1 = #cir<extra({inline = #cir.inline<no>, nothrow = #cir.nothrow, optnone = #cir.optnone})>
module @"/home/ladisgin/git_proj/juliet-c/testcases/CWE667_Improper_Locking/CWE667_Improper_Locking__basic_06.c" attributes {cir.lang = #cir.lang<c>, cir.sob = #cir.signed_overflow_behavior<undefined>, cir.triple = "x86_64-unknown-linux-gnu", dlti.dl_spec = #dlti.dl_spec<f80 = dense<128> : vector<2xi64>, i128 = dense<128> : vector<2xi64>, i16 = dense<16> : vector<2xi64>, i8 = dense<8> : vector<2xi64>, i1 = dense<8> : vector<2xi64>, !llvm.ptr = dense<64> : vector<4xi64>, f128 = dense<128> : vector<2xi64>, !llvm.ptr<270> = dense<32> : vector<4xi64>, f64 = dense<64> : vector<2xi64>, f16 = dense<16> : vector<2xi64>, i32 = dense<32> : vector<2xi64>, i64 = dense<64> : vector<2xi64>, !llvm.ptr<271> = dense<32> : vector<4xi64>, !llvm.ptr<272> = dense<64> : vector<4xi64>, "dlti.stack_alignment" = 128 : i64, "dlti.endianness" = "little">} {
  cir.global "private" internal dsolocal @good2.goodLock = #cir.ptr<null> : !cir.ptr<!ty__stdThreadLock> {alignment = 8 : i64} loc(#loc1)
  cir.global "private" internal dsolocal @good1.goodLock = #cir.ptr<null> : !cir.ptr<!ty__stdThreadLock> {alignment = 8 : i64} loc(#loc2)
  cir.global "private" internal dsolocal @CWE667_Improper_Locking__basic_06_bad.badLock = #cir.ptr<null> : !cir.ptr<!ty__stdThreadLock> {alignment = 8 : i64} loc(#loc3)
  cir.func private @printLine(!cir.ptr<!s8i>) loc(#loc111)
  cir.global "private" constant cir_private dsolocal @".str" = #cir.const_array<"Creating lock...\00" : !cir.array<!s8i x 17>> : !cir.array<!s8i x 17> {alignment = 1 : i64} loc(#loc6)
  cir.func private @stdThreadLockCreate(!cir.ptr<!cir.ptr<!ty__stdThreadLock>>) -> !s32i loc(#loc112)
  cir.global "private" constant cir_private dsolocal @".str.1" = #cir.const_array<"Could not create lock\00" : !cir.array<!s8i x 22>> : !cir.array<!s8i x 22> {alignment = 1 : i64} loc(#loc9)
  cir.func private @exit(!s32i) extra(#fn_attr) loc(#loc113)
  cir.global "private" constant cir_private dsolocal @".str.2" = #cir.const_array<"Acquiring lock...\00" : !cir.array<!s8i x 18>> : !cir.array<!s8i x 18> {alignment = 1 : i64} loc(#loc12)
  cir.func private @stdThreadLockAcquire(!cir.ptr<!ty__stdThreadLock>) loc(#loc114)
  cir.func no_proto @CWE667_Improper_Locking__basic_06_bad() extra(#fn_attr1) {
    cir.br ^bb1 loc(#loc116)
  ^bb1:  // pred: ^bb0
    %0 = cir.const #cir.int<5> : !s32i loc(#loc19)
    %1 = cir.const #cir.int<5> : !s32i loc(#loc20)
    %2 = cir.cmp(eq, %0, %1) : !s32i, !cir.bool loc(#loc117)
    cir.brcond %2 ^bb2, ^bb9 loc(#loc118)
  ^bb2:  // pred: ^bb1
    cir.br ^bb3 loc(#loc119)
  ^bb3:  // pred: ^bb2
    %3 = cir.get_global @CWE667_Improper_Locking__basic_06_bad.badLock : !cir.ptr<!cir.ptr<!ty__stdThreadLock>> loc(#loc3)
    %4 = cir.get_global @".str" : !cir.ptr<!cir.array<!s8i x 17>> loc(#loc6)
    %5 = cir.cast(array_to_ptrdecay, %4 : !cir.ptr<!cir.array<!s8i x 17>>), !cir.ptr<!s8i> loc(#loc6)
    cir.call @printLine(%5) : (!cir.ptr<!s8i>) -> () loc(#loc24)
    cir.br ^bb4 loc(#loc120)
  ^bb4:  // pred: ^bb3
    %6 = cir.call @stdThreadLockCreate(%3) : (!cir.ptr<!cir.ptr<!ty__stdThreadLock>>) -> !s32i loc(#loc27)
    %7 = cir.cast(int_to_bool, %6 : !s32i), !cir.bool loc(#loc27)
    %8 = cir.unary(not, %7) : !cir.bool, !cir.bool loc(#loc27)
    cir.brcond %8 ^bb5, ^bb6 loc(#loc121)
  ^bb5:  // pred: ^bb4
    %9 = cir.get_global @".str.1" : !cir.ptr<!cir.array<!s8i x 22>> loc(#loc9)
    %10 = cir.cast(array_to_ptrdecay, %9 : !cir.ptr<!cir.array<!s8i x 22>>), !cir.ptr<!s8i> loc(#loc9)
    cir.call @printLine(%10) : (!cir.ptr<!s8i>) -> () loc(#loc29)
    %11 = cir.get_global @exit : !cir.ptr<!cir.func<!void (!s32i)>> loc(#loc30)
    %12 = cir.const #cir.int<1> : !s32i loc(#loc31)
    cir.call @exit(%12) : (!s32i) -> () extra(#fn_attr) loc(#loc30)
    cir.br ^bb6 loc(#loc26)
  ^bb6:  // 2 preds: ^bb4, ^bb5
    cir.br ^bb7 loc(#loc26)
  ^bb7:  // pred: ^bb6
    %13 = cir.get_global @".str.2" : !cir.ptr<!cir.array<!s8i x 18>> loc(#loc12)
    %14 = cir.cast(array_to_ptrdecay, %13 : !cir.ptr<!cir.array<!s8i x 18>>), !cir.ptr<!s8i> loc(#loc12)
    cir.call @printLine(%14) : (!cir.ptr<!s8i>) -> () loc(#loc32)
    %15 = cir.load %3 : !cir.ptr<!cir.ptr<!ty__stdThreadLock>>, !cir.ptr<!ty__stdThreadLock> loc(#loc33)
    cir.call @stdThreadLockAcquire(%15) : (!cir.ptr<!ty__stdThreadLock>) -> () loc(#loc34)
    cir.br ^bb8 loc(#loc23)
  ^bb8:  // pred: ^bb7
    cir.br ^bb9 loc(#loc18)
  ^bb9:  // 2 preds: ^bb1, ^bb8
    cir.br ^bb10 loc(#loc18)
  ^bb10:  // pred: ^bb9
    cir.return loc(#loc16)
  } loc(#loc115)
  cir.func no_proto @CWE667_Improper_Locking__basic_06_good() extra(#fn_attr1) {
    %0 = cir.get_global @good1 : !cir.ptr<!cir.func<!void ()>> loc(#loc123)
    cir.call %0() : (!cir.ptr<!cir.func<!void ()>>) -> () loc(#loc37)
    %1 = cir.get_global @good2 : !cir.ptr<!cir.func<!void ()>> loc(#loc124)
    cir.call %1() : (!cir.ptr<!cir.func<!void ()>>) -> () loc(#loc39)
    cir.return loc(#loc36)
  } loc(#loc122)
  cir.global "private" constant cir_private dsolocal @".str.3" = #cir.const_array<"Benign, fixed string\00" : !cir.array<!s8i x 21>> : !cir.array<!s8i x 21> {alignment = 1 : i64} loc(#loc41)
  cir.global "private" constant cir_private dsolocal @".str.4" = #cir.const_array<"Releasing lock...\00" : !cir.array<!s8i x 18>> : !cir.array<!s8i x 18> {alignment = 1 : i64} loc(#loc42)
  cir.func private @stdThreadLockRelease(!cir.ptr<!ty__stdThreadLock>) loc(#loc125)
  cir.global "private" constant cir_private dsolocal @".str.5" = #cir.const_array<"Destroying lock...\00" : !cir.array<!s8i x 19>> : !cir.array<!s8i x 19> {alignment = 1 : i64} loc(#loc45)
  cir.func private @stdThreadLockDestroy(!cir.ptr<!ty__stdThreadLock>) loc(#loc126)
  cir.func no_proto internal private @good1() extra(#fn_attr1) {
    cir.br ^bb1 loc(#loc128)
  ^bb1:  // pred: ^bb0
    %0 = cir.const #cir.int<5> : !s32i loc(#loc52)
    %1 = cir.const #cir.int<5> : !s32i loc(#loc53)
    %2 = cir.cmp(ne, %0, %1) : !s32i, !cir.bool loc(#loc129)
    cir.brcond %2 ^bb2, ^bb3 loc(#loc130)
  ^bb2:  // pred: ^bb1
    %3 = cir.get_global @".str.3" : !cir.ptr<!cir.array<!s8i x 21>> loc(#loc41)
    %4 = cir.cast(array_to_ptrdecay, %3 : !cir.ptr<!cir.array<!s8i x 21>>), !cir.ptr<!s8i> loc(#loc41)
    cir.call @printLine(%4) : (!cir.ptr<!s8i>) -> () loc(#loc57)
    cir.br ^bb10 loc(#loc55)
  ^bb3:  // pred: ^bb1
    cir.br ^bb4 loc(#loc131)
  ^bb4:  // pred: ^bb3
    %5 = cir.get_global @good1.goodLock : !cir.ptr<!cir.ptr<!ty__stdThreadLock>> loc(#loc2)
    %6 = cir.get_global @".str" : !cir.ptr<!cir.array<!s8i x 17>> loc(#loc60)
    %7 = cir.cast(array_to_ptrdecay, %6 : !cir.ptr<!cir.array<!s8i x 17>>), !cir.ptr<!s8i> loc(#loc60)
    cir.call @printLine(%7) : (!cir.ptr<!s8i>) -> () loc(#loc61)
    cir.br ^bb5 loc(#loc132)
  ^bb5:  // pred: ^bb4
    %8 = cir.call @stdThreadLockCreate(%5) : (!cir.ptr<!cir.ptr<!ty__stdThreadLock>>) -> !s32i loc(#loc64)
    %9 = cir.cast(int_to_bool, %8 : !s32i), !cir.bool loc(#loc64)
    %10 = cir.unary(not, %9) : !cir.bool, !cir.bool loc(#loc64)
    cir.brcond %10 ^bb6, ^bb7 loc(#loc133)
  ^bb6:  // pred: ^bb5
    %11 = cir.get_global @".str.1" : !cir.ptr<!cir.array<!s8i x 22>> loc(#loc66)
    %12 = cir.cast(array_to_ptrdecay, %11 : !cir.ptr<!cir.array<!s8i x 22>>), !cir.ptr<!s8i> loc(#loc66)
    cir.call @printLine(%12) : (!cir.ptr<!s8i>) -> () loc(#loc67)
    %13 = cir.get_global @exit : !cir.ptr<!cir.func<!void (!s32i)>> loc(#loc68)
    %14 = cir.const #cir.int<1> : !s32i loc(#loc69)
    cir.call @exit(%14) : (!s32i) -> () extra(#fn_attr) loc(#loc68)
    cir.br ^bb7 loc(#loc63)
  ^bb7:  // 2 preds: ^bb5, ^bb6
    cir.br ^bb8 loc(#loc63)
  ^bb8:  // pred: ^bb7
    %15 = cir.get_global @".str.2" : !cir.ptr<!cir.array<!s8i x 18>> loc(#loc70)
    %16 = cir.cast(array_to_ptrdecay, %15 : !cir.ptr<!cir.array<!s8i x 18>>), !cir.ptr<!s8i> loc(#loc70)
    cir.call @printLine(%16) : (!cir.ptr<!s8i>) -> () loc(#loc71)
    %17 = cir.load %5 : !cir.ptr<!cir.ptr<!ty__stdThreadLock>>, !cir.ptr<!ty__stdThreadLock> loc(#loc72)
    cir.call @stdThreadLockAcquire(%17) : (!cir.ptr<!ty__stdThreadLock>) -> () loc(#loc73)
    %18 = cir.get_global @".str.4" : !cir.ptr<!cir.array<!s8i x 18>> loc(#loc42)
    %19 = cir.cast(array_to_ptrdecay, %18 : !cir.ptr<!cir.array<!s8i x 18>>), !cir.ptr<!s8i> loc(#loc42)
    cir.call @printLine(%19) : (!cir.ptr<!s8i>) -> () loc(#loc74)
    %20 = cir.load %5 : !cir.ptr<!cir.ptr<!ty__stdThreadLock>>, !cir.ptr<!ty__stdThreadLock> loc(#loc75)
    cir.call @stdThreadLockRelease(%20) : (!cir.ptr<!ty__stdThreadLock>) -> () loc(#loc76)
    %21 = cir.get_global @".str.5" : !cir.ptr<!cir.array<!s8i x 19>> loc(#loc45)
    %22 = cir.cast(array_to_ptrdecay, %21 : !cir.ptr<!cir.array<!s8i x 19>>), !cir.ptr<!s8i> loc(#loc45)
    cir.call @printLine(%22) : (!cir.ptr<!s8i>) -> () loc(#loc77)
    %23 = cir.load %5 : !cir.ptr<!cir.ptr<!ty__stdThreadLock>>, !cir.ptr<!ty__stdThreadLock> loc(#loc78)
    cir.call @stdThreadLockDestroy(%23) : (!cir.ptr<!ty__stdThreadLock>) -> () loc(#loc79)
    cir.br ^bb9 loc(#loc59)
  ^bb9:  // pred: ^bb8
    cir.br ^bb10 loc(#loc51)
  ^bb10:  // 2 preds: ^bb2, ^bb9
    cir.br ^bb11 loc(#loc51)
  ^bb11:  // pred: ^bb10
    cir.return loc(#loc49)
  } loc(#loc127)
  cir.func no_proto internal private @good2() extra(#fn_attr1) {
    cir.br ^bb1 loc(#loc135)
  ^bb1:  // pred: ^bb0
    %0 = cir.const #cir.int<5> : !s32i loc(#loc84)
    %1 = cir.const #cir.int<5> : !s32i loc(#loc85)
    %2 = cir.cmp(eq, %0, %1) : !s32i, !cir.bool loc(#loc136)
    cir.brcond %2 ^bb2, ^bb9 loc(#loc137)
  ^bb2:  // pred: ^bb1
    cir.br ^bb3 loc(#loc138)
  ^bb3:  // pred: ^bb2
    %3 = cir.get_global @good2.goodLock : !cir.ptr<!cir.ptr<!ty__stdThreadLock>> loc(#loc1)
    %4 = cir.get_global @".str" : !cir.ptr<!cir.array<!s8i x 17>> loc(#loc89)
    %5 = cir.cast(array_to_ptrdecay, %4 : !cir.ptr<!cir.array<!s8i x 17>>), !cir.ptr<!s8i> loc(#loc89)
    cir.call @printLine(%5) : (!cir.ptr<!s8i>) -> () loc(#loc90)
    cir.br ^bb4 loc(#loc139)
  ^bb4:  // pred: ^bb3
    %6 = cir.call @stdThreadLockCreate(%3) : (!cir.ptr<!cir.ptr<!ty__stdThreadLock>>) -> !s32i loc(#loc93)
    %7 = cir.cast(int_to_bool, %6 : !s32i), !cir.bool loc(#loc93)
    %8 = cir.unary(not, %7) : !cir.bool, !cir.bool loc(#loc93)
    cir.brcond %8 ^bb5, ^bb6 loc(#loc140)
  ^bb5:  // pred: ^bb4
    %9 = cir.get_global @".str.1" : !cir.ptr<!cir.array<!s8i x 22>> loc(#loc95)
    %10 = cir.cast(array_to_ptrdecay, %9 : !cir.ptr<!cir.array<!s8i x 22>>), !cir.ptr<!s8i> loc(#loc95)
    cir.call @printLine(%10) : (!cir.ptr<!s8i>) -> () loc(#loc96)
    %11 = cir.get_global @exit : !cir.ptr<!cir.func<!void (!s32i)>> loc(#loc97)
    %12 = cir.const #cir.int<1> : !s32i loc(#loc98)
    cir.call @exit(%12) : (!s32i) -> () extra(#fn_attr) loc(#loc97)
    cir.br ^bb6 loc(#loc92)
  ^bb6:  // 2 preds: ^bb4, ^bb5
    cir.br ^bb7 loc(#loc92)
  ^bb7:  // pred: ^bb6
    %13 = cir.get_global @".str.2" : !cir.ptr<!cir.array<!s8i x 18>> loc(#loc99)
    %14 = cir.cast(array_to_ptrdecay, %13 : !cir.ptr<!cir.array<!s8i x 18>>), !cir.ptr<!s8i> loc(#loc99)
    cir.call @printLine(%14) : (!cir.ptr<!s8i>) -> () loc(#loc100)
    %15 = cir.load %3 : !cir.ptr<!cir.ptr<!ty__stdThreadLock>>, !cir.ptr<!ty__stdThreadLock> loc(#loc101)
    cir.call @stdThreadLockAcquire(%15) : (!cir.ptr<!ty__stdThreadLock>) -> () loc(#loc102)
    %16 = cir.get_global @".str.4" : !cir.ptr<!cir.array<!s8i x 18>> loc(#loc103)
    %17 = cir.cast(array_to_ptrdecay, %16 : !cir.ptr<!cir.array<!s8i x 18>>), !cir.ptr<!s8i> loc(#loc103)
    cir.call @printLine(%17) : (!cir.ptr<!s8i>) -> () loc(#loc104)
    %18 = cir.load %3 : !cir.ptr<!cir.ptr<!ty__stdThreadLock>>, !cir.ptr<!ty__stdThreadLock> loc(#loc105)
    cir.call @stdThreadLockRelease(%18) : (!cir.ptr<!ty__stdThreadLock>) -> () loc(#loc106)
    %19 = cir.get_global @".str.5" : !cir.ptr<!cir.array<!s8i x 19>> loc(#loc107)
    %20 = cir.cast(array_to_ptrdecay, %19 : !cir.ptr<!cir.array<!s8i x 19>>), !cir.ptr<!s8i> loc(#loc107)
    cir.call @printLine(%20) : (!cir.ptr<!s8i>) -> () loc(#loc108)
    %21 = cir.load %3 : !cir.ptr<!cir.ptr<!ty__stdThreadLock>>, !cir.ptr<!ty__stdThreadLock> loc(#loc109)
    cir.call @stdThreadLockDestroy(%21) : (!cir.ptr<!ty__stdThreadLock>) -> () loc(#loc110)
    cir.br ^bb8 loc(#loc88)
  ^bb8:  // pred: ^bb7
    cir.br ^bb9 loc(#loc83)
  ^bb9:  // 2 preds: ^bb1, ^bb8
    cir.br ^bb10 loc(#loc83)
  ^bb10:  // pred: ^bb9
    cir.return loc(#loc81)
  } loc(#loc134)
} loc(#loc)
#loc = loc("/home/ladisgin/git_proj/juliet-c/testcases/CWE667_Improper_Locking/CWE667_Improper_Locking__basic_06.c":0:0)
#loc1 = loc("CWE667_Improper_Locking__basic_06.c":85:34)
#loc2 = loc("CWE667_Improper_Locking__basic_06.c":61:34)
#loc3 = loc("CWE667_Improper_Locking__basic_06.c":32:34)
#loc4 = loc("../../testcasesupport/std_testcase_io.h":14:1)
#loc5 = loc("../../testcasesupport/std_testcase_io.h":14:33)
#loc6 = loc("CWE667_Improper_Locking__basic_06.c":33:23)
#loc7 = loc("../../testcasesupport/std_thread.h":18:1)
#loc8 = loc("../../testcasesupport/std_thread.h":18:44)
#loc9 = loc("CWE667_Improper_Locking__basic_06.c":36:27)
#loc10 = loc("/usr/include/stdlib.h":756:1)
#loc11 = loc("/usr/include/stdlib.h":756:70)
#loc12 = loc("CWE667_Improper_Locking__basic_06.c":39:23)
#loc13 = loc("../../testcasesupport/std_thread.h":19:1)
#loc14 = loc("../../testcasesupport/std_thread.h":19:45)
#loc15 = loc("CWE667_Improper_Locking__basic_06.c":27:1)
#loc16 = loc("CWE667_Improper_Locking__basic_06.c":44:1)
#loc17 = loc("CWE667_Improper_Locking__basic_06.c":29:5)
#loc18 = loc("CWE667_Improper_Locking__basic_06.c":43:5)
#loc19 = loc("CWE667_Improper_Locking__basic_06.c":29:8)
#loc20 = loc("CWE667_Improper_Locking__basic_06.c":29:27)
#loc21 = loc("CWE667_Improper_Locking__basic_06.c":30:5)
#loc22 = loc("CWE667_Improper_Locking__basic_06.c":31:9)
#loc23 = loc("CWE667_Improper_Locking__basic_06.c":42:9)
#loc24 = loc("CWE667_Improper_Locking__basic_06.c":33:13)
#loc25 = loc("CWE667_Improper_Locking__basic_06.c":34:13)
#loc26 = loc("CWE667_Improper_Locking__basic_06.c":38:13)
#loc27 = loc("CWE667_Improper_Locking__basic_06.c":34:18)
#loc28 = loc("CWE667_Improper_Locking__basic_06.c":35:13)
#loc29 = loc("CWE667_Improper_Locking__basic_06.c":36:17)
#loc30 = loc("CWE667_Improper_Locking__basic_06.c":37:17)
#loc31 = loc("CWE667_Improper_Locking__basic_06.c":37:22)
#loc32 = loc("CWE667_Improper_Locking__basic_06.c":39:13)
#loc33 = loc("CWE667_Improper_Locking__basic_06.c":40:34)
#loc34 = loc("CWE667_Improper_Locking__basic_06.c":40:13)
#loc35 = loc("CWE667_Improper_Locking__basic_06.c":103:1)
#loc36 = loc("CWE667_Improper_Locking__basic_06.c":107:1)
#loc37 = loc("CWE667_Improper_Locking__basic_06.c":105:5)
#loc38 = loc("CWE667_Improper_Locking__basic_06.c":105:11)
#loc39 = loc("CWE667_Improper_Locking__basic_06.c":106:5)
#loc40 = loc("CWE667_Improper_Locking__basic_06.c":106:11)
#loc41 = loc("CWE667_Improper_Locking__basic_06.c":56:19)
#loc42 = loc("CWE667_Improper_Locking__basic_06.c":71:23)
#loc43 = loc("../../testcasesupport/std_thread.h":20:1)
#loc44 = loc("../../testcasesupport/std_thread.h":20:45)
#loc45 = loc("CWE667_Improper_Locking__basic_06.c":73:23)
#loc46 = loc("../../testcasesupport/std_thread.h":21:1)
#loc47 = loc("../../testcasesupport/std_thread.h":21:45)
#loc48 = loc("CWE667_Improper_Locking__basic_06.c":51:1)
#loc49 = loc("CWE667_Improper_Locking__basic_06.c":77:1)
#loc50 = loc("CWE667_Improper_Locking__basic_06.c":53:5)
#loc51 = loc("CWE667_Improper_Locking__basic_06.c":76:5)
#loc52 = loc("CWE667_Improper_Locking__basic_06.c":53:8)
#loc53 = loc("CWE667_Improper_Locking__basic_06.c":53:27)
#loc54 = loc("CWE667_Improper_Locking__basic_06.c":54:5)
#loc55 = loc("CWE667_Improper_Locking__basic_06.c":57:5)
#loc56 = loc("CWE667_Improper_Locking__basic_06.c":59:5)
#loc57 = loc("CWE667_Improper_Locking__basic_06.c":56:9)
#loc58 = loc("CWE667_Improper_Locking__basic_06.c":60:9)
#loc59 = loc("CWE667_Improper_Locking__basic_06.c":75:9)
#loc60 = loc("CWE667_Improper_Locking__basic_06.c":62:23)
#loc61 = loc("CWE667_Improper_Locking__basic_06.c":62:13)
#loc62 = loc("CWE667_Improper_Locking__basic_06.c":63:13)
#loc63 = loc("CWE667_Improper_Locking__basic_06.c":67:13)
#loc64 = loc("CWE667_Improper_Locking__basic_06.c":63:18)
#loc65 = loc("CWE667_Improper_Locking__basic_06.c":64:13)
#loc66 = loc("CWE667_Improper_Locking__basic_06.c":65:27)
#loc67 = loc("CWE667_Improper_Locking__basic_06.c":65:17)
#loc68 = loc("CWE667_Improper_Locking__basic_06.c":66:17)
#loc69 = loc("CWE667_Improper_Locking__basic_06.c":66:22)
#loc70 = loc("CWE667_Improper_Locking__basic_06.c":68:23)
#loc71 = loc("CWE667_Improper_Locking__basic_06.c":68:13)
#loc72 = loc("CWE667_Improper_Locking__basic_06.c":69:34)
#loc73 = loc("CWE667_Improper_Locking__basic_06.c":69:13)
#loc74 = loc("CWE667_Improper_Locking__basic_06.c":71:13)
#loc75 = loc("CWE667_Improper_Locking__basic_06.c":72:34)
#loc76 = loc("CWE667_Improper_Locking__basic_06.c":72:13)
#loc77 = loc("CWE667_Improper_Locking__basic_06.c":73:13)
#loc78 = loc("CWE667_Improper_Locking__basic_06.c":74:34)
#loc79 = loc("CWE667_Improper_Locking__basic_06.c":74:13)
#loc80 = loc("CWE667_Improper_Locking__basic_06.c":80:1)
#loc81 = loc("CWE667_Improper_Locking__basic_06.c":101:1)
#loc82 = loc("CWE667_Improper_Locking__basic_06.c":82:5)
#loc83 = loc("CWE667_Improper_Locking__basic_06.c":100:5)
#loc84 = loc("CWE667_Improper_Locking__basic_06.c":82:8)
#loc85 = loc("CWE667_Improper_Locking__basic_06.c":82:27)
#loc86 = loc("CWE667_Improper_Locking__basic_06.c":83:5)
#loc87 = loc("CWE667_Improper_Locking__basic_06.c":84:9)
#loc88 = loc("CWE667_Improper_Locking__basic_06.c":99:9)
#loc89 = loc("CWE667_Improper_Locking__basic_06.c":86:23)
#loc90 = loc("CWE667_Improper_Locking__basic_06.c":86:13)
#loc91 = loc("CWE667_Improper_Locking__basic_06.c":87:13)
#loc92 = loc("CWE667_Improper_Locking__basic_06.c":91:13)
#loc93 = loc("CWE667_Improper_Locking__basic_06.c":87:18)
#loc94 = loc("CWE667_Improper_Locking__basic_06.c":88:13)
#loc95 = loc("CWE667_Improper_Locking__basic_06.c":89:27)
#loc96 = loc("CWE667_Improper_Locking__basic_06.c":89:17)
#loc97 = loc("CWE667_Improper_Locking__basic_06.c":90:17)
#loc98 = loc("CWE667_Improper_Locking__basic_06.c":90:22)
#loc99 = loc("CWE667_Improper_Locking__basic_06.c":92:23)
#loc100 = loc("CWE667_Improper_Locking__basic_06.c":92:13)
#loc101 = loc("CWE667_Improper_Locking__basic_06.c":93:34)
#loc102 = loc("CWE667_Improper_Locking__basic_06.c":93:13)
#loc103 = loc("CWE667_Improper_Locking__basic_06.c":95:23)
#loc104 = loc("CWE667_Improper_Locking__basic_06.c":95:13)
#loc105 = loc("CWE667_Improper_Locking__basic_06.c":96:34)
#loc106 = loc("CWE667_Improper_Locking__basic_06.c":96:13)
#loc107 = loc("CWE667_Improper_Locking__basic_06.c":97:23)
#loc108 = loc("CWE667_Improper_Locking__basic_06.c":97:13)
#loc109 = loc("CWE667_Improper_Locking__basic_06.c":98:34)
#loc110 = loc("CWE667_Improper_Locking__basic_06.c":98:13)
#loc111 = loc(fused[#loc4, #loc5])
#loc112 = loc(fused[#loc7, #loc8])
#loc113 = loc(fused[#loc10, #loc11])
#loc114 = loc(fused[#loc13, #loc14])
#loc115 = loc(fused[#loc15, #loc16])
#loc116 = loc(fused[#loc17, #loc18])
#loc117 = loc(fused[#loc19, #loc20])
#loc118 = loc(fused[#loc21, #loc18])
#loc119 = loc(fused[#loc22, #loc23])
#loc120 = loc(fused[#loc25, #loc26])
#loc121 = loc(fused[#loc28, #loc26])
#loc122 = loc(fused[#loc35, #loc36])
#loc123 = loc(fused[#loc37, #loc38])
#loc124 = loc(fused[#loc39, #loc40])
#loc125 = loc(fused[#loc43, #loc44])
#loc126 = loc(fused[#loc46, #loc47])
#loc127 = loc(fused[#loc48, #loc49])
#loc128 = loc(fused[#loc50, #loc51])
#loc129 = loc(fused[#loc52, #loc53])
#loc130 = loc(fused[#loc54, #loc55, #loc56, #loc51])
#loc131 = loc(fused[#loc58, #loc59])
#loc132 = loc(fused[#loc62, #loc63])
#loc133 = loc(fused[#loc65, #loc63])
#loc134 = loc(fused[#loc80, #loc81])
#loc135 = loc(fused[#loc82, #loc83])
#loc136 = loc(fused[#loc84, #loc85])
#loc137 = loc(fused[#loc86, #loc83])
#loc138 = loc(fused[#loc87, #loc88])
#loc139 = loc(fused[#loc91, #loc92])
#loc140 = loc(fused[#loc94, #loc92])
