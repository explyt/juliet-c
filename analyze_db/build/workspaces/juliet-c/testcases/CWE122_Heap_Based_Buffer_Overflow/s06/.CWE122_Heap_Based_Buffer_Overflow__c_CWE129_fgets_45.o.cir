!s32i = !cir.int<s, 32>
!s64i = !cir.int<s, 64>
!s8i = !cir.int<s, 8>
!ty__IO_codecvt = !cir.record<struct "_IO_codecvt" incomplete>
!ty__IO_marker = !cir.record<struct "_IO_marker" incomplete>
!ty__IO_wide_data = !cir.record<struct "_IO_wide_data" incomplete>
!u16i = !cir.int<u, 16>
!u64i = !cir.int<u, 64>
!void = !cir.void
#false = #cir.bool<false> : !cir.bool
#fn_attr = #cir<extra({nothrow = #cir.nothrow})>
#fn_attr1 = #cir<extra({inline = #cir.inline<no>, nothrow = #cir.nothrow, optnone = #cir.optnone, uwtable = #cir.uwtable<async>})>
#true = #cir.bool<true> : !cir.bool
!ty__IO_FILE = !cir.record<struct "_IO_FILE" {!s32i, !cir.ptr<!s8i>, !cir.ptr<!s8i>, !cir.ptr<!s8i>, !cir.ptr<!s8i>, !cir.ptr<!s8i>, !cir.ptr<!s8i>, !cir.ptr<!s8i>, !cir.ptr<!s8i>, !cir.ptr<!s8i>, !cir.ptr<!s8i>, !cir.ptr<!s8i>, !cir.ptr<!ty__IO_marker>, !cir.ptr<!cir.record<struct "_IO_FILE">>, !s32i, !s32i, !s64i, !u16i, !s8i, !cir.array<!s8i x 1>, !cir.ptr<!void>, !s64i, !cir.ptr<!ty__IO_codecvt>, !cir.ptr<!ty__IO_wide_data>, !cir.ptr<!cir.record<struct "_IO_FILE">>, !cir.ptr<!void>, !u64i, !s32i, !cir.array<!s8i x 20>} #cir.record.decl.ast>
module @"/workspaces/juliet-c/testcases/CWE122_Heap_Based_Buffer_Overflow/s06/CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_45.c" attributes {cir.lang = #cir.lang<c>, cir.sob = #cir.signed_overflow_behavior<undefined>, cir.triple = "x86_64-unknown-linux-gnu", cir.type_size_info = #cir.type_size_info<char = 8, int = 32, size_t = 64>, cir.uwtable = #cir.uwtable<async>, dlti.dl_spec = #dlti.dl_spec<!llvm.ptr = dense<64> : vector<4xi64>, !llvm.ptr<270> = dense<32> : vector<4xi64>, i1 = dense<8> : vector<2xi64>, i64 = dense<64> : vector<2xi64>, i128 = dense<128> : vector<2xi64>, f80 = dense<128> : vector<2xi64>, f64 = dense<64> : vector<2xi64>, f128 = dense<128> : vector<2xi64>, !llvm.ptr<271> = dense<32> : vector<4xi64>, !llvm.ptr<272> = dense<64> : vector<4xi64>, i16 = dense<16> : vector<2xi64>, i8 = dense<8> : vector<2xi64>, i32 = dense<32> : vector<2xi64>, f16 = dense<16> : vector<2xi64>, "dlti.stack_alignment" = 128 : i64, "dlti.mangling_mode" = "e", "dlti.endianness" = "little">} {
  cir.func private @fgets(!cir.ptr<!s8i>, !s32i, !cir.ptr<!ty__IO_FILE>) -> !cir.ptr<!s8i> loc(#loc303)
  cir.global "private" external @stdin : !cir.ptr<!ty__IO_FILE> {alignment = 8 : i64} loc(#loc304)
  cir.func private @atoi(!cir.ptr<!s8i>) -> !s32i extra(#fn_attr) loc(#loc305)
  cir.func private @printLine(!cir.ptr<!s8i>) loc(#loc306)
  cir.global "private" constant cir_private dsolocal @".str" = #cir.const_array<"fgets() failed.\00" : !cir.array<!s8i x 16>> : !cir.array<!s8i x 16> {alignment = 1 : i64} loc(#loc9)
  cir.global "private" internal dsolocal @CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_45_badData = #cir.int<0> : !s32i {alignment = 4 : i64} loc(#loc307)
  cir.func no_proto @CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_45_bad() extra(#fn_attr1) {
    %0 = cir.alloca !s32i, !cir.ptr<!s32i>, ["data"] {alignment = 4 : i64} loc(#loc309)
    %1 = cir.const #cir.int<1> : !s32i loc(#loc16)
    %2 = cir.unary(minus, %1) nsw : !s32i, !s32i loc(#loc17)
    cir.store %2, %0 : !s32i, !cir.ptr<!s32i> loc(#loc310)
    cir.scope {
      %6 = cir.alloca !cir.array<!s8i x 14>, !cir.ptr<!cir.array<!s8i x 14>>, ["inputBuffer"] {alignment = 1 : i64} loc(#loc312)
      %7 = cir.const #cir.zero : !cir.array<!s8i x 14> loc(#loc312)
      cir.store %7, %6 : !cir.array<!s8i x 14>, !cir.ptr<!cir.array<!s8i x 14>> loc(#loc312)
      cir.scope {
        %8 = cir.cast(array_to_ptrdecay, %6 : !cir.ptr<!cir.array<!s8i x 14>>), !cir.ptr<!s8i> loc(#loc25)
        %9 = cir.const #cir.int<3> : !s32i loc(#loc26)
        %10 = cir.cast(integral, %9 : !s32i), !u64i loc(#loc26)
        %11 = cir.const #cir.int<4> : !u64i loc(#loc26)
        %12 = cir.binop(mul, %10, %11) : !u64i loc(#loc26)
        %13 = cir.const #cir.int<2> : !s32i loc(#loc26)
        %14 = cir.cast(integral, %13 : !s32i), !u64i loc(#loc26)
        %15 = cir.binop(add, %12, %14) : !u64i loc(#loc26)
        %16 = cir.cast(integral, %15 : !u64i), !s32i loc(#loc26)
        %17 = cir.get_global @stdin : !cir.ptr<!cir.ptr<!ty__IO_FILE>> loc(#loc304)
        %18 = cir.load %17 : !cir.ptr<!cir.ptr<!ty__IO_FILE>>, !cir.ptr<!ty__IO_FILE> loc(#loc27)
        %19 = cir.call @fgets(%8, %16, %18) : (!cir.ptr<!s8i>, !s32i, !cir.ptr<!ty__IO_FILE>) -> !cir.ptr<!s8i> loc(#loc28)
        %20 = cir.const #cir.ptr<null> : !cir.ptr<!void> loc(#loc29)
        %21 = cir.cast(bitcast, %20 : !cir.ptr<!void>), !cir.ptr<!s8i> loc(#loc29)
        %22 = cir.cmp(ne, %19, %21) : !cir.ptr<!s8i>, !cir.bool loc(#loc314)
        cir.if %22 {
          %23 = cir.cast(array_to_ptrdecay, %6 : !cir.ptr<!cir.array<!s8i x 14>>), !cir.ptr<!s8i> loc(#loc33)
          %24 = cir.call @atoi(%23) : (!cir.ptr<!s8i>) -> !s32i side_effect(pure) extra(#fn_attr) loc(#loc34)
          cir.store %24, %0 : !s32i, !cir.ptr<!s32i> loc(#loc316)
        } else {
          %23 = cir.get_global @".str" : !cir.ptr<!cir.array<!s8i x 16>> loc(#loc9)
          %24 = cir.cast(array_to_ptrdecay, %23 : !cir.ptr<!cir.array<!s8i x 16>>), !cir.ptr<!s8i> loc(#loc9)
          cir.call @printLine(%24) : (!cir.ptr<!s8i>) -> () loc(#loc37)
        } loc(#loc315)
      } loc(#loc313)
    } loc(#loc311)
    %3 = cir.load %0 : !cir.ptr<!s32i>, !s32i loc(#loc38)
    %4 = cir.get_global @CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_45_badData : !cir.ptr<!s32i> loc(#loc307)
    cir.store %3, %4 : !s32i, !cir.ptr<!s32i> loc(#loc317)
    %5 = cir.get_global @badSink : !cir.ptr<!cir.func<()>> loc(#loc318)
    cir.call %5() : (!cir.ptr<!cir.func<()>>) -> () loc(#loc40)
    cir.return loc(#loc13)
  } loc(#loc308)
  cir.func no_proto @CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_45_good() extra(#fn_attr1) {
    %0 = cir.get_global @goodG2B : !cir.ptr<!cir.func<()>> loc(#loc320)
    cir.call %0() : (!cir.ptr<!cir.func<()>>) -> () loc(#loc44)
    %1 = cir.get_global @goodB2G : !cir.ptr<!cir.func<()>> loc(#loc321)
    cir.call %1() : (!cir.ptr<!cir.func<()>>) -> () loc(#loc46)
    cir.return loc(#loc43)
  } loc(#loc319)
  cir.func private @malloc(!u64i) -> !cir.ptr<!void> extra(#fn_attr) loc(#loc322)
  cir.func private @exit(!s32i) extra(#fn_attr) loc(#loc323)
  cir.func private @printIntLine(!s32i) loc(#loc324)
  cir.global "private" constant cir_private dsolocal @".str.1" = #cir.const_array<"ERROR: Array index is negative.\00" : !cir.array<!s8i x 32>> : !cir.array<!s8i x 32> {alignment = 1 : i64} loc(#loc54)
  cir.func private @free(!cir.ptr<!void>) extra(#fn_attr) loc(#loc325)
  cir.func no_proto internal private @badSink() extra(#fn_attr1) {
    %0 = cir.alloca !s32i, !cir.ptr<!s32i>, ["data", init] {alignment = 4 : i64} loc(#loc327)
    %1 = cir.get_global @CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_45_badData : !cir.ptr<!s32i> loc(#loc307)
    %2 = cir.load %1 : !cir.ptr<!s32i>, !s32i loc(#loc60)
    cir.store %2, %0 : !s32i, !cir.ptr<!s32i> loc(#loc327)
    cir.scope {
      %3 = cir.alloca !s32i, !cir.ptr<!s32i>, ["i"] {alignment = 4 : i64} loc(#loc329)
      %4 = cir.alloca !cir.ptr<!s32i>, !cir.ptr<!cir.ptr<!s32i>>, ["buffer", init] {alignment = 8 : i64} loc(#loc330)
      %5 = cir.get_global @malloc : !cir.ptr<!cir.func<(!u64i) -> !cir.ptr<!void>>> loc(#loc67)
      %6 = cir.const #cir.int<10> : !s32i loc(#loc68)
      %7 = cir.cast(integral, %6 : !s32i), !u64i loc(#loc68)
      %8 = cir.const #cir.int<4> : !u64i loc(#loc331)
      %9 = cir.binop(mul, %7, %8) : !u64i loc(#loc332)
      %10 = cir.call @malloc(%9) : (!u64i) -> !cir.ptr<!void> extra(#fn_attr) loc(#loc67)
      %11 = cir.cast(bitcast, %10 : !cir.ptr<!void>), !cir.ptr<!s32i> loc(#loc333)
      cir.store %11, %4 : !cir.ptr<!s32i>, !cir.ptr<!cir.ptr<!s32i>> loc(#loc330)
      cir.scope {
        %15 = cir.load %4 : !cir.ptr<!cir.ptr<!s32i>>, !cir.ptr<!s32i> loc(#loc73)
        %16 = cir.const #cir.ptr<null> : !cir.ptr<!void> loc(#loc74)
        %17 = cir.cast(bitcast, %16 : !cir.ptr<!void>), !cir.ptr<!s32i> loc(#loc74)
        %18 = cir.cmp(eq, %15, %17) : !cir.ptr<!s32i>, !cir.bool loc(#loc335)
        cir.if %18 {
          %19 = cir.get_global @exit : !cir.ptr<!cir.func<(!s32i)>> loc(#loc76)
          %20 = cir.const #cir.int<1> : !s32i loc(#loc77)
          %21 = cir.unary(minus, %20) nsw : !s32i, !s32i loc(#loc78)
          cir.call @exit(%21) : (!s32i) -> () extra(#fn_attr) loc(#loc76)
        } loc(#loc336)
      } loc(#loc334)
      cir.scope {
        %15 = cir.const #cir.int<0> : !s32i loc(#loc81)
        cir.store %15, %3 : !s32i, !cir.ptr<!s32i> loc(#loc338)
        cir.for : cond {
          %16 = cir.load %3 : !cir.ptr<!s32i>, !s32i loc(#loc83)
          %17 = cir.const #cir.int<10> : !s32i loc(#loc84)
          %18 = cir.cmp(lt, %16, %17) : !s32i, !cir.bool loc(#loc339)
          cir.condition(%18) loc(#loc85)
        } body {
          cir.scope {
            %16 = cir.const #cir.int<0> : !s32i loc(#loc87)
            %17 = cir.load %4 : !cir.ptr<!cir.ptr<!s32i>>, !cir.ptr<!s32i> loc(#loc88)
            %18 = cir.load %3 : !cir.ptr<!s32i>, !s32i loc(#loc89)
            %19 = cir.ptr_stride(%17 : !cir.ptr<!s32i>, %18 : !s32i), !cir.ptr<!s32i> loc(#loc90)
            cir.store %16, %19 : !s32i, !cir.ptr<!s32i> loc(#loc341)
          } loc(#loc340)
          cir.yield loc(#loc80)
        } step {
          %16 = cir.load %3 : !cir.ptr<!s32i>, !s32i loc(#loc91)
          %17 = cir.unary(inc, %16) nsw : !s32i, !s32i loc(#loc92)
          cir.store %17, %3 : !s32i, !cir.ptr<!s32i> loc(#loc342)
          cir.yield loc(#loc337)
        } loc(#loc337)
      } loc(#loc337)
      cir.scope {
        %15 = cir.load %0 : !cir.ptr<!s32i>, !s32i loc(#loc95)
        %16 = cir.const #cir.int<0> : !s32i loc(#loc96)
        %17 = cir.cmp(ge, %15, %16) : !s32i, !cir.bool loc(#loc344)
        cir.if %17 {
          %18 = cir.const #cir.int<1> : !s32i loc(#loc100)
          %19 = cir.load %4 : !cir.ptr<!cir.ptr<!s32i>>, !cir.ptr<!s32i> loc(#loc101)
          %20 = cir.load %0 : !cir.ptr<!s32i>, !s32i loc(#loc102)
          %21 = cir.ptr_stride(%19 : !cir.ptr<!s32i>, %20 : !s32i), !cir.ptr<!s32i> loc(#loc103)
          cir.store %18, %21 : !s32i, !cir.ptr<!s32i> loc(#loc346)
          cir.scope {
            %22 = cir.const #cir.int<0> : !s32i loc(#loc106)
            cir.store %22, %3 : !s32i, !cir.ptr<!s32i> loc(#loc348)
            cir.for : cond {
              %23 = cir.load %3 : !cir.ptr<!s32i>, !s32i loc(#loc108)
              %24 = cir.const #cir.int<10> : !s32i loc(#loc109)
              %25 = cir.cmp(lt, %23, %24) : !s32i, !cir.bool loc(#loc349)
              cir.condition(%25) loc(#loc110)
            } body {
              cir.scope {
                %23 = cir.load %4 : !cir.ptr<!cir.ptr<!s32i>>, !cir.ptr<!s32i> loc(#loc112)
                %24 = cir.load %3 : !cir.ptr<!s32i>, !s32i loc(#loc113)
                %25 = cir.ptr_stride(%23 : !cir.ptr<!s32i>, %24 : !s32i), !cir.ptr<!s32i> loc(#loc114)
                %26 = cir.load %25 : !cir.ptr<!s32i>, !s32i loc(#loc112)
                cir.call @printIntLine(%26) : (!s32i) -> () loc(#loc115)
              } loc(#loc350)
              cir.yield loc(#loc105)
            } step {
              %23 = cir.load %3 : !cir.ptr<!s32i>, !s32i loc(#loc116)
              %24 = cir.unary(inc, %23) nsw : !s32i, !s32i loc(#loc117)
              cir.store %24, %3 : !s32i, !cir.ptr<!s32i> loc(#loc351)
              cir.yield loc(#loc347)
            } loc(#loc347)
          } loc(#loc347)
        } else {
          %18 = cir.get_global @".str.1" : !cir.ptr<!cir.array<!s8i x 32>> loc(#loc54)
          %19 = cir.cast(array_to_ptrdecay, %18 : !cir.ptr<!cir.array<!s8i x 32>>), !cir.ptr<!s8i> loc(#loc54)
          cir.call @printLine(%19) : (!cir.ptr<!s8i>) -> () loc(#loc118)
        } loc(#loc345)
      } loc(#loc343)
      %12 = cir.get_global @free : !cir.ptr<!cir.func<(!cir.ptr<!void>)>> loc(#loc119)
      %13 = cir.load %4 : !cir.ptr<!cir.ptr<!s32i>>, !cir.ptr<!s32i> loc(#loc120)
      %14 = cir.cast(bitcast, %13 : !cir.ptr<!s32i>), !cir.ptr<!void> loc(#loc120)
      cir.call @free(%14) : (!cir.ptr<!void>) -> () extra(#fn_attr) loc(#loc119)
    } loc(#loc328)
    cir.return loc(#loc58)
  } loc(#loc326)
  cir.global "private" internal dsolocal @CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_45_goodG2BData = #cir.int<0> : !s32i {alignment = 4 : i64} loc(#loc352)
  cir.func no_proto internal private @goodG2B() extra(#fn_attr1) {
    %0 = cir.alloca !s32i, !cir.ptr<!s32i>, ["data"] {alignment = 4 : i64} loc(#loc354)
    %1 = cir.const #cir.int<1> : !s32i loc(#loc127)
    %2 = cir.unary(minus, %1) nsw : !s32i, !s32i loc(#loc128)
    cir.store %2, %0 : !s32i, !cir.ptr<!s32i> loc(#loc355)
    %3 = cir.const #cir.int<7> : !s32i loc(#loc130)
    cir.store %3, %0 : !s32i, !cir.ptr<!s32i> loc(#loc356)
    %4 = cir.load %0 : !cir.ptr<!s32i>, !s32i loc(#loc132)
    %5 = cir.get_global @CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_45_goodG2BData : !cir.ptr<!s32i> loc(#loc352)
    cir.store %4, %5 : !s32i, !cir.ptr<!s32i> loc(#loc357)
    %6 = cir.get_global @goodG2BSink : !cir.ptr<!cir.func<()>> loc(#loc358)
    cir.call %6() : (!cir.ptr<!cir.func<()>>) -> () loc(#loc134)
    cir.return loc(#loc124)
  } loc(#loc353)
  cir.func no_proto internal private @goodG2BSink() extra(#fn_attr1) {
    %0 = cir.alloca !s32i, !cir.ptr<!s32i>, ["data", init] {alignment = 4 : i64} loc(#loc360)
    %1 = cir.get_global @CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_45_goodG2BData : !cir.ptr<!s32i> loc(#loc352)
    %2 = cir.load %1 : !cir.ptr<!s32i>, !s32i loc(#loc139)
    cir.store %2, %0 : !s32i, !cir.ptr<!s32i> loc(#loc360)
    cir.scope {
      %3 = cir.alloca !s32i, !cir.ptr<!s32i>, ["i"] {alignment = 4 : i64} loc(#loc362)
      %4 = cir.alloca !cir.ptr<!s32i>, !cir.ptr<!cir.ptr<!s32i>>, ["buffer", init] {alignment = 8 : i64} loc(#loc363)
      %5 = cir.get_global @malloc : !cir.ptr<!cir.func<(!u64i) -> !cir.ptr<!void>>> loc(#loc146)
      %6 = cir.const #cir.int<10> : !s32i loc(#loc147)
      %7 = cir.cast(integral, %6 : !s32i), !u64i loc(#loc147)
      %8 = cir.const #cir.int<4> : !u64i loc(#loc364)
      %9 = cir.binop(mul, %7, %8) : !u64i loc(#loc365)
      %10 = cir.call @malloc(%9) : (!u64i) -> !cir.ptr<!void> extra(#fn_attr) loc(#loc146)
      %11 = cir.cast(bitcast, %10 : !cir.ptr<!void>), !cir.ptr<!s32i> loc(#loc366)
      cir.store %11, %4 : !cir.ptr<!s32i>, !cir.ptr<!cir.ptr<!s32i>> loc(#loc363)
      cir.scope {
        %15 = cir.load %4 : !cir.ptr<!cir.ptr<!s32i>>, !cir.ptr<!s32i> loc(#loc152)
        %16 = cir.const #cir.ptr<null> : !cir.ptr<!void> loc(#loc153)
        %17 = cir.cast(bitcast, %16 : !cir.ptr<!void>), !cir.ptr<!s32i> loc(#loc153)
        %18 = cir.cmp(eq, %15, %17) : !cir.ptr<!s32i>, !cir.bool loc(#loc368)
        cir.if %18 {
          %19 = cir.get_global @exit : !cir.ptr<!cir.func<(!s32i)>> loc(#loc155)
          %20 = cir.const #cir.int<1> : !s32i loc(#loc156)
          %21 = cir.unary(minus, %20) nsw : !s32i, !s32i loc(#loc157)
          cir.call @exit(%21) : (!s32i) -> () extra(#fn_attr) loc(#loc155)
        } loc(#loc369)
      } loc(#loc367)
      cir.scope {
        %15 = cir.const #cir.int<0> : !s32i loc(#loc160)
        cir.store %15, %3 : !s32i, !cir.ptr<!s32i> loc(#loc371)
        cir.for : cond {
          %16 = cir.load %3 : !cir.ptr<!s32i>, !s32i loc(#loc162)
          %17 = cir.const #cir.int<10> : !s32i loc(#loc163)
          %18 = cir.cmp(lt, %16, %17) : !s32i, !cir.bool loc(#loc372)
          cir.condition(%18) loc(#loc164)
        } body {
          cir.scope {
            %16 = cir.const #cir.int<0> : !s32i loc(#loc166)
            %17 = cir.load %4 : !cir.ptr<!cir.ptr<!s32i>>, !cir.ptr<!s32i> loc(#loc167)
            %18 = cir.load %3 : !cir.ptr<!s32i>, !s32i loc(#loc168)
            %19 = cir.ptr_stride(%17 : !cir.ptr<!s32i>, %18 : !s32i), !cir.ptr<!s32i> loc(#loc169)
            cir.store %16, %19 : !s32i, !cir.ptr<!s32i> loc(#loc374)
          } loc(#loc373)
          cir.yield loc(#loc159)
        } step {
          %16 = cir.load %3 : !cir.ptr<!s32i>, !s32i loc(#loc170)
          %17 = cir.unary(inc, %16) nsw : !s32i, !s32i loc(#loc171)
          cir.store %17, %3 : !s32i, !cir.ptr<!s32i> loc(#loc375)
          cir.yield loc(#loc370)
        } loc(#loc370)
      } loc(#loc370)
      cir.scope {
        %15 = cir.load %0 : !cir.ptr<!s32i>, !s32i loc(#loc174)
        %16 = cir.const #cir.int<0> : !s32i loc(#loc175)
        %17 = cir.cmp(ge, %15, %16) : !s32i, !cir.bool loc(#loc377)
        cir.if %17 {
          %18 = cir.const #cir.int<1> : !s32i loc(#loc179)
          %19 = cir.load %4 : !cir.ptr<!cir.ptr<!s32i>>, !cir.ptr<!s32i> loc(#loc180)
          %20 = cir.load %0 : !cir.ptr<!s32i>, !s32i loc(#loc181)
          %21 = cir.ptr_stride(%19 : !cir.ptr<!s32i>, %20 : !s32i), !cir.ptr<!s32i> loc(#loc182)
          cir.store %18, %21 : !s32i, !cir.ptr<!s32i> loc(#loc379)
          cir.scope {
            %22 = cir.const #cir.int<0> : !s32i loc(#loc185)
            cir.store %22, %3 : !s32i, !cir.ptr<!s32i> loc(#loc381)
            cir.for : cond {
              %23 = cir.load %3 : !cir.ptr<!s32i>, !s32i loc(#loc187)
              %24 = cir.const #cir.int<10> : !s32i loc(#loc188)
              %25 = cir.cmp(lt, %23, %24) : !s32i, !cir.bool loc(#loc382)
              cir.condition(%25) loc(#loc189)
            } body {
              cir.scope {
                %23 = cir.load %4 : !cir.ptr<!cir.ptr<!s32i>>, !cir.ptr<!s32i> loc(#loc191)
                %24 = cir.load %3 : !cir.ptr<!s32i>, !s32i loc(#loc192)
                %25 = cir.ptr_stride(%23 : !cir.ptr<!s32i>, %24 : !s32i), !cir.ptr<!s32i> loc(#loc193)
                %26 = cir.load %25 : !cir.ptr<!s32i>, !s32i loc(#loc191)
                cir.call @printIntLine(%26) : (!s32i) -> () loc(#loc194)
              } loc(#loc383)
              cir.yield loc(#loc184)
            } step {
              %23 = cir.load %3 : !cir.ptr<!s32i>, !s32i loc(#loc195)
              %24 = cir.unary(inc, %23) nsw : !s32i, !s32i loc(#loc196)
              cir.store %24, %3 : !s32i, !cir.ptr<!s32i> loc(#loc384)
              cir.yield loc(#loc380)
            } loc(#loc380)
          } loc(#loc380)
        } else {
          %18 = cir.get_global @".str.1" : !cir.ptr<!cir.array<!s8i x 32>> loc(#loc197)
          %19 = cir.cast(array_to_ptrdecay, %18 : !cir.ptr<!cir.array<!s8i x 32>>), !cir.ptr<!s8i> loc(#loc197)
          cir.call @printLine(%19) : (!cir.ptr<!s8i>) -> () loc(#loc198)
        } loc(#loc378)
      } loc(#loc376)
      %12 = cir.get_global @free : !cir.ptr<!cir.func<(!cir.ptr<!void>)>> loc(#loc199)
      %13 = cir.load %4 : !cir.ptr<!cir.ptr<!s32i>>, !cir.ptr<!s32i> loc(#loc200)
      %14 = cir.cast(bitcast, %13 : !cir.ptr<!s32i>), !cir.ptr<!void> loc(#loc200)
      cir.call @free(%14) : (!cir.ptr<!void>) -> () extra(#fn_attr) loc(#loc199)
    } loc(#loc361)
    cir.return loc(#loc137)
  } loc(#loc359)
  cir.global "private" internal dsolocal @CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_45_goodB2GData = #cir.int<0> : !s32i {alignment = 4 : i64} loc(#loc385)
  cir.func no_proto internal private @goodB2G() extra(#fn_attr1) {
    %0 = cir.alloca !s32i, !cir.ptr<!s32i>, ["data"] {alignment = 4 : i64} loc(#loc387)
    %1 = cir.const #cir.int<1> : !s32i loc(#loc207)
    %2 = cir.unary(minus, %1) nsw : !s32i, !s32i loc(#loc208)
    cir.store %2, %0 : !s32i, !cir.ptr<!s32i> loc(#loc388)
    cir.scope {
      %6 = cir.alloca !cir.array<!s8i x 14>, !cir.ptr<!cir.array<!s8i x 14>>, ["inputBuffer"] {alignment = 1 : i64} loc(#loc390)
      %7 = cir.const #cir.zero : !cir.array<!s8i x 14> loc(#loc390)
      cir.store %7, %6 : !cir.array<!s8i x 14>, !cir.ptr<!cir.array<!s8i x 14>> loc(#loc390)
      cir.scope {
        %8 = cir.cast(array_to_ptrdecay, %6 : !cir.ptr<!cir.array<!s8i x 14>>), !cir.ptr<!s8i> loc(#loc216)
        %9 = cir.const #cir.int<3> : !s32i loc(#loc217)
        %10 = cir.cast(integral, %9 : !s32i), !u64i loc(#loc217)
        %11 = cir.const #cir.int<4> : !u64i loc(#loc217)
        %12 = cir.binop(mul, %10, %11) : !u64i loc(#loc217)
        %13 = cir.const #cir.int<2> : !s32i loc(#loc217)
        %14 = cir.cast(integral, %13 : !s32i), !u64i loc(#loc217)
        %15 = cir.binop(add, %12, %14) : !u64i loc(#loc217)
        %16 = cir.cast(integral, %15 : !u64i), !s32i loc(#loc217)
        %17 = cir.get_global @stdin : !cir.ptr<!cir.ptr<!ty__IO_FILE>> loc(#loc304)
        %18 = cir.load %17 : !cir.ptr<!cir.ptr<!ty__IO_FILE>>, !cir.ptr<!ty__IO_FILE> loc(#loc218)
        %19 = cir.call @fgets(%8, %16, %18) : (!cir.ptr<!s8i>, !s32i, !cir.ptr<!ty__IO_FILE>) -> !cir.ptr<!s8i> loc(#loc219)
        %20 = cir.const #cir.ptr<null> : !cir.ptr<!void> loc(#loc220)
        %21 = cir.cast(bitcast, %20 : !cir.ptr<!void>), !cir.ptr<!s8i> loc(#loc220)
        %22 = cir.cmp(ne, %19, %21) : !cir.ptr<!s8i>, !cir.bool loc(#loc392)
        cir.if %22 {
          %23 = cir.cast(array_to_ptrdecay, %6 : !cir.ptr<!cir.array<!s8i x 14>>), !cir.ptr<!s8i> loc(#loc224)
          %24 = cir.call @atoi(%23) : (!cir.ptr<!s8i>) -> !s32i side_effect(pure) extra(#fn_attr) loc(#loc225)
          cir.store %24, %0 : !s32i, !cir.ptr<!s32i> loc(#loc394)
        } else {
          %23 = cir.get_global @".str" : !cir.ptr<!cir.array<!s8i x 16>> loc(#loc228)
          %24 = cir.cast(array_to_ptrdecay, %23 : !cir.ptr<!cir.array<!s8i x 16>>), !cir.ptr<!s8i> loc(#loc228)
          cir.call @printLine(%24) : (!cir.ptr<!s8i>) -> () loc(#loc229)
        } loc(#loc393)
      } loc(#loc391)
    } loc(#loc389)
    %3 = cir.load %0 : !cir.ptr<!s32i>, !s32i loc(#loc230)
    %4 = cir.get_global @CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_45_goodB2GData : !cir.ptr<!s32i> loc(#loc385)
    cir.store %3, %4 : !s32i, !cir.ptr<!s32i> loc(#loc395)
    %5 = cir.get_global @goodB2GSink : !cir.ptr<!cir.func<()>> loc(#loc396)
    cir.call %5() : (!cir.ptr<!cir.func<()>>) -> () loc(#loc232)
    cir.return loc(#loc204)
  } loc(#loc386)
  cir.global "private" constant cir_private dsolocal @".str.2" = #cir.const_array<"ERROR: Array index is out-of-bounds\00" : !cir.array<!s8i x 36>> : !cir.array<!s8i x 36> {alignment = 1 : i64} loc(#loc234)
  cir.func no_proto internal private @goodB2GSink() extra(#fn_attr1) {
    %0 = cir.alloca !s32i, !cir.ptr<!s32i>, ["data", init] {alignment = 4 : i64} loc(#loc398)
    %1 = cir.get_global @CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_45_goodB2GData : !cir.ptr<!s32i> loc(#loc385)
    %2 = cir.load %1 : !cir.ptr<!s32i>, !s32i loc(#loc238)
    cir.store %2, %0 : !s32i, !cir.ptr<!s32i> loc(#loc398)
    cir.scope {
      %3 = cir.alloca !s32i, !cir.ptr<!s32i>, ["i"] {alignment = 4 : i64} loc(#loc400)
      %4 = cir.alloca !cir.ptr<!s32i>, !cir.ptr<!cir.ptr<!s32i>>, ["buffer", init] {alignment = 8 : i64} loc(#loc401)
      %5 = cir.get_global @malloc : !cir.ptr<!cir.func<(!u64i) -> !cir.ptr<!void>>> loc(#loc245)
      %6 = cir.const #cir.int<10> : !s32i loc(#loc246)
      %7 = cir.cast(integral, %6 : !s32i), !u64i loc(#loc246)
      %8 = cir.const #cir.int<4> : !u64i loc(#loc402)
      %9 = cir.binop(mul, %7, %8) : !u64i loc(#loc403)
      %10 = cir.call @malloc(%9) : (!u64i) -> !cir.ptr<!void> extra(#fn_attr) loc(#loc245)
      %11 = cir.cast(bitcast, %10 : !cir.ptr<!void>), !cir.ptr<!s32i> loc(#loc404)
      cir.store %11, %4 : !cir.ptr<!s32i>, !cir.ptr<!cir.ptr<!s32i>> loc(#loc401)
      cir.scope {
        %15 = cir.load %4 : !cir.ptr<!cir.ptr<!s32i>>, !cir.ptr<!s32i> loc(#loc251)
        %16 = cir.const #cir.ptr<null> : !cir.ptr<!void> loc(#loc252)
        %17 = cir.cast(bitcast, %16 : !cir.ptr<!void>), !cir.ptr<!s32i> loc(#loc252)
        %18 = cir.cmp(eq, %15, %17) : !cir.ptr<!s32i>, !cir.bool loc(#loc406)
        cir.if %18 {
          %19 = cir.get_global @exit : !cir.ptr<!cir.func<(!s32i)>> loc(#loc254)
          %20 = cir.const #cir.int<1> : !s32i loc(#loc255)
          %21 = cir.unary(minus, %20) nsw : !s32i, !s32i loc(#loc256)
          cir.call @exit(%21) : (!s32i) -> () extra(#fn_attr) loc(#loc254)
        } loc(#loc407)
      } loc(#loc405)
      cir.scope {
        %15 = cir.const #cir.int<0> : !s32i loc(#loc259)
        cir.store %15, %3 : !s32i, !cir.ptr<!s32i> loc(#loc409)
        cir.for : cond {
          %16 = cir.load %3 : !cir.ptr<!s32i>, !s32i loc(#loc261)
          %17 = cir.const #cir.int<10> : !s32i loc(#loc262)
          %18 = cir.cmp(lt, %16, %17) : !s32i, !cir.bool loc(#loc410)
          cir.condition(%18) loc(#loc263)
        } body {
          cir.scope {
            %16 = cir.const #cir.int<0> : !s32i loc(#loc265)
            %17 = cir.load %4 : !cir.ptr<!cir.ptr<!s32i>>, !cir.ptr<!s32i> loc(#loc266)
            %18 = cir.load %3 : !cir.ptr<!s32i>, !s32i loc(#loc267)
            %19 = cir.ptr_stride(%17 : !cir.ptr<!s32i>, %18 : !s32i), !cir.ptr<!s32i> loc(#loc268)
            cir.store %16, %19 : !s32i, !cir.ptr<!s32i> loc(#loc412)
          } loc(#loc411)
          cir.yield loc(#loc258)
        } step {
          %16 = cir.load %3 : !cir.ptr<!s32i>, !s32i loc(#loc269)
          %17 = cir.unary(inc, %16) nsw : !s32i, !s32i loc(#loc270)
          cir.store %17, %3 : !s32i, !cir.ptr<!s32i> loc(#loc413)
          cir.yield loc(#loc408)
        } loc(#loc408)
      } loc(#loc408)
      cir.scope {
        %15 = cir.load %0 : !cir.ptr<!s32i>, !s32i loc(#loc273)
        %16 = cir.const #cir.int<0> : !s32i loc(#loc274)
        %17 = cir.cmp(ge, %15, %16) : !s32i, !cir.bool loc(#loc415)
        %18 = cir.ternary(%17, true {
          %19 = cir.load %0 : !cir.ptr<!s32i>, !s32i loc(#loc276)
          %20 = cir.const #cir.int<10> : !s32i loc(#loc277)
          %21 = cir.cmp(lt, %19, %20) : !s32i, !cir.bool loc(#loc416)
          %22 = cir.ternary(%21, true {
            %23 = cir.const #true loc(#loc275)
            cir.yield %23 : !cir.bool loc(#loc275)
          }, false {
            %23 = cir.const #false loc(#loc275)
            cir.yield %23 : !cir.bool loc(#loc275)
          }) : (!cir.bool) -> !cir.bool loc(#loc275)
          cir.yield %22 : !cir.bool loc(#loc275)
        }, false {
          %19 = cir.const #false loc(#loc275)
          cir.yield %19 : !cir.bool loc(#loc275)
        }) : (!cir.bool) -> !cir.bool loc(#loc275)
        cir.if %18 {
          %19 = cir.const #cir.int<1> : !s32i loc(#loc282)
          %20 = cir.load %4 : !cir.ptr<!cir.ptr<!s32i>>, !cir.ptr<!s32i> loc(#loc283)
          %21 = cir.load %0 : !cir.ptr<!s32i>, !s32i loc(#loc284)
          %22 = cir.ptr_stride(%20 : !cir.ptr<!s32i>, %21 : !s32i), !cir.ptr<!s32i> loc(#loc285)
          cir.store %19, %22 : !s32i, !cir.ptr<!s32i> loc(#loc418)
          cir.scope {
            %23 = cir.const #cir.int<0> : !s32i loc(#loc288)
            cir.store %23, %3 : !s32i, !cir.ptr<!s32i> loc(#loc420)
            cir.for : cond {
              %24 = cir.load %3 : !cir.ptr<!s32i>, !s32i loc(#loc290)
              %25 = cir.const #cir.int<10> : !s32i loc(#loc291)
              %26 = cir.cmp(lt, %24, %25) : !s32i, !cir.bool loc(#loc421)
              cir.condition(%26) loc(#loc292)
            } body {
              cir.scope {
                %24 = cir.load %4 : !cir.ptr<!cir.ptr<!s32i>>, !cir.ptr<!s32i> loc(#loc294)
                %25 = cir.load %3 : !cir.ptr<!s32i>, !s32i loc(#loc295)
                %26 = cir.ptr_stride(%24 : !cir.ptr<!s32i>, %25 : !s32i), !cir.ptr<!s32i> loc(#loc296)
                %27 = cir.load %26 : !cir.ptr<!s32i>, !s32i loc(#loc294)
                cir.call @printIntLine(%27) : (!s32i) -> () loc(#loc297)
              } loc(#loc422)
              cir.yield loc(#loc287)
            } step {
              %24 = cir.load %3 : !cir.ptr<!s32i>, !s32i loc(#loc298)
              %25 = cir.unary(inc, %24) nsw : !s32i, !s32i loc(#loc299)
              cir.store %25, %3 : !s32i, !cir.ptr<!s32i> loc(#loc423)
              cir.yield loc(#loc419)
            } loc(#loc419)
          } loc(#loc419)
        } else {
          %19 = cir.get_global @".str.2" : !cir.ptr<!cir.array<!s8i x 36>> loc(#loc234)
          %20 = cir.cast(array_to_ptrdecay, %19 : !cir.ptr<!cir.array<!s8i x 36>>), !cir.ptr<!s8i> loc(#loc234)
          cir.call @printLine(%20) : (!cir.ptr<!s8i>) -> () loc(#loc300)
        } loc(#loc417)
      } loc(#loc414)
      %12 = cir.get_global @free : !cir.ptr<!cir.func<(!cir.ptr<!void>)>> loc(#loc301)
      %13 = cir.load %4 : !cir.ptr<!cir.ptr<!s32i>>, !cir.ptr<!s32i> loc(#loc302)
      %14 = cir.cast(bitcast, %13 : !cir.ptr<!s32i>), !cir.ptr<!void> loc(#loc302)
      cir.call @free(%14) : (!cir.ptr<!void>) -> () extra(#fn_attr) loc(#loc301)
    } loc(#loc399)
    cir.return loc(#loc236)
  } loc(#loc397)
} loc(#loc)
#loc = loc("/workspaces/juliet-c/testcases/CWE122_Heap_Based_Buffer_Overflow/s06/CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_45.c":0:0)
#loc1 = loc("/usr/include/stdio.h":654:1)
#loc2 = loc("/usr/include/stdio.h":655:59)
#loc3 = loc("/usr/include/stdio.h":149:1)
#loc4 = loc("/usr/include/stdio.h":149:14)
#loc5 = loc("/usr/include/stdlib.h":105:1)
#loc6 = loc("/usr/include/stdlib.h":106:33)
#loc7 = loc("../../../testcasesupport/std_testcase_io.h":14:1)
#loc8 = loc("../../../testcasesupport/std_testcase_io.h":14:33)
#loc9 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_45.c":74:23)
#loc10 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_45.c":22:1)
#loc11 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_45.c":22:12)
#loc12 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_45.c":59:1)
#loc13 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_45.c":79:1)
#loc14 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_45.c":61:5)
#loc15 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_45.c":61:9)
#loc16 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_45.c":63:13)
#loc17 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_45.c":63:12)
#loc18 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_45.c":63:5)
#loc19 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_45.c":64:5)
#loc20 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_45.c":76:5)
#loc21 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_45.c":65:9)
#loc22 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_45.c":65:45)
#loc23 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_45.c":67:9)
#loc24 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_45.c":75:9)
#loc25 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_45.c":67:19)
#loc26 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_45.c":67:32)
#loc27 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_45.c":67:49)
#loc28 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_45.c":67:13)
#loc29 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_45.c":67:59)
#loc30 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_45.c":68:9)
#loc31 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_45.c":71:9)
#loc32 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_45.c":73:9)
#loc33 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_45.c":70:25)
#loc34 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_45.c":70:20)
#loc35 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_45.c":70:13)
#loc36 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_45.c":70:36)
#loc37 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_45.c":74:13)
#loc38 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_45.c":77:68)
#loc39 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_45.c":77:5)
#loc40 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_45.c":78:5)
#loc41 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_45.c":78:13)
#loc42 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_45.c":182:1)
#loc43 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_45.c":186:1)
#loc44 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_45.c":184:5)
#loc45 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_45.c":184:13)
#loc46 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_45.c":185:5)
#loc47 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_45.c":185:13)
#loc48 = loc("/usr/include/stdlib.h":672:1)
#loc49 = loc("/usr/include/stdlib.h":672:45)
#loc50 = loc("/usr/include/stdlib.h":756:1)
#loc51 = loc("/usr/include/stdlib.h":756:70)
#loc52 = loc("../../../testcasesupport/std_testcase_io.h":18:1)
#loc53 = loc("../../../testcasesupport/std_testcase_io.h":18:33)
#loc54 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_45.c":53:23)
#loc55 = loc("/usr/include/stdlib.h":687:1)
#loc56 = loc("/usr/include/stdlib.h":687:32)
#loc57 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_45.c":28:1)
#loc58 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_45.c":57:1)
#loc59 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_45.c":30:5)
#loc60 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_45.c":30:16)
#loc61 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_45.c":31:5)
#loc62 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_45.c":56:5)
#loc63 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_45.c":32:9)
#loc64 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_45.c":32:13)
#loc65 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_45.c":33:9)
#loc66 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_45.c":33:54)
#loc67 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_45.c":33:31)
#loc68 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_45.c":33:38)
#loc69 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_45.c":33:43)
#loc70 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_45.c":33:53)
#loc71 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_45.c":34:9)
#loc72 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_45.c":34:39)
#loc73 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_45.c":34:13)
#loc74 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_45.c":34:23)
#loc75 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_45.c":34:29)
#loc76 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_45.c":34:30)
#loc77 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_45.c":34:36)
#loc78 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_45.c":34:35)
#loc79 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_45.c":36:9)
#loc80 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_45.c":39:9)
#loc81 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_45.c":36:18)
#loc82 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_45.c":36:14)
#loc83 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_45.c":36:21)
#loc84 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_45.c":36:25)
#loc85 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_45.c":36:23)
#loc86 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_45.c":37:9)
#loc87 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_45.c":38:25)
#loc88 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_45.c":38:13)
#loc89 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_45.c":38:20)
#loc90 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_45.c":38:21)
#loc91 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_45.c":36:30)
#loc92 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_45.c":36:29)
#loc93 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_45.c":42:9)
#loc94 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_45.c":54:9)
#loc95 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_45.c":42:13)
#loc96 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_45.c":42:21)
#loc97 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_45.c":43:9)
#loc98 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_45.c":50:9)
#loc99 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_45.c":52:9)
#loc100 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_45.c":44:28)
#loc101 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_45.c":44:13)
#loc102 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_45.c":44:20)
#loc103 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_45.c":44:24)
#loc104 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_45.c":46:13)
#loc105 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_45.c":49:13)
#loc106 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_45.c":46:21)
#loc107 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_45.c":46:17)
#loc108 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_45.c":46:24)
#loc109 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_45.c":46:28)
#loc110 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_45.c":46:26)
#loc111 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_45.c":47:13)
#loc112 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_45.c":48:30)
#loc113 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_45.c":48:37)
#loc114 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_45.c":48:38)
#loc115 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_45.c":48:17)
#loc116 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_45.c":46:33)
#loc117 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_45.c":46:32)
#loc118 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_45.c":53:13)
#loc119 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_45.c":55:9)
#loc120 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_45.c":55:14)
#loc121 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_45.c":23:1)
#loc122 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_45.c":23:12)
#loc123 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_45.c":117:1)
#loc124 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_45.c":127:1)
#loc125 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_45.c":119:5)
#loc126 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_45.c":119:9)
#loc127 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_45.c":121:13)
#loc128 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_45.c":121:12)
#loc129 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_45.c":121:5)
#loc130 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_45.c":124:12)
#loc131 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_45.c":124:5)
#loc132 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_45.c":125:72)
#loc133 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_45.c":125:5)
#loc134 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_45.c":126:5)
#loc135 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_45.c":126:17)
#loc136 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_45.c":86:1)
#loc137 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_45.c":115:1)
#loc138 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_45.c":88:5)
#loc139 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_45.c":88:16)
#loc140 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_45.c":89:5)
#loc141 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_45.c":114:5)
#loc142 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_45.c":90:9)
#loc143 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_45.c":90:13)
#loc144 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_45.c":91:9)
#loc145 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_45.c":91:54)
#loc146 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_45.c":91:31)
#loc147 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_45.c":91:38)
#loc148 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_45.c":91:43)
#loc149 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_45.c":91:53)
#loc150 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_45.c":92:9)
#loc151 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_45.c":92:39)
#loc152 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_45.c":92:13)
#loc153 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_45.c":92:23)
#loc154 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_45.c":92:29)
#loc155 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_45.c":92:30)
#loc156 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_45.c":92:36)
#loc157 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_45.c":92:35)
#loc158 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_45.c":94:9)
#loc159 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_45.c":97:9)
#loc160 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_45.c":94:18)
#loc161 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_45.c":94:14)
#loc162 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_45.c":94:21)
#loc163 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_45.c":94:25)
#loc164 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_45.c":94:23)
#loc165 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_45.c":95:9)
#loc166 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_45.c":96:25)
#loc167 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_45.c":96:13)
#loc168 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_45.c":96:20)
#loc169 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_45.c":96:21)
#loc170 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_45.c":94:30)
#loc171 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_45.c":94:29)
#loc172 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_45.c":100:9)
#loc173 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_45.c":112:9)
#loc174 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_45.c":100:13)
#loc175 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_45.c":100:21)
#loc176 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_45.c":101:9)
#loc177 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_45.c":108:9)
#loc178 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_45.c":110:9)
#loc179 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_45.c":102:28)
#loc180 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_45.c":102:13)
#loc181 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_45.c":102:20)
#loc182 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_45.c":102:24)
#loc183 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_45.c":104:13)
#loc184 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_45.c":107:13)
#loc185 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_45.c":104:21)
#loc186 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_45.c":104:17)
#loc187 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_45.c":104:24)
#loc188 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_45.c":104:28)
#loc189 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_45.c":104:26)
#loc190 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_45.c":105:13)
#loc191 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_45.c":106:30)
#loc192 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_45.c":106:37)
#loc193 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_45.c":106:38)
#loc194 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_45.c":106:17)
#loc195 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_45.c":104:33)
#loc196 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_45.c":104:32)
#loc197 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_45.c":111:23)
#loc198 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_45.c":111:13)
#loc199 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_45.c":113:9)
#loc200 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_45.c":113:14)
#loc201 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_45.c":24:1)
#loc202 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_45.c":24:12)
#loc203 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_45.c":160:1)
#loc204 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_45.c":180:1)
#loc205 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_45.c":162:5)
#loc206 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_45.c":162:9)
#loc207 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_45.c":164:13)
#loc208 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_45.c":164:12)
#loc209 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_45.c":164:5)
#loc210 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_45.c":165:5)
#loc211 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_45.c":177:5)
#loc212 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_45.c":166:9)
#loc213 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_45.c":166:45)
#loc214 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_45.c":168:9)
#loc215 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_45.c":176:9)
#loc216 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_45.c":168:19)
#loc217 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_45.c":168:32)
#loc218 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_45.c":168:49)
#loc219 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_45.c":168:13)
#loc220 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_45.c":168:59)
#loc221 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_45.c":169:9)
#loc222 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_45.c":172:9)
#loc223 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_45.c":174:9)
#loc224 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_45.c":171:25)
#loc225 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_45.c":171:20)
#loc226 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_45.c":171:13)
#loc227 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_45.c":171:36)
#loc228 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_45.c":175:23)
#loc229 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_45.c":175:13)
#loc230 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_45.c":178:72)
#loc231 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_45.c":178:5)
#loc232 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_45.c":179:5)
#loc233 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_45.c":179:17)
#loc234 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_45.c":154:23)
#loc235 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_45.c":130:1)
#loc236 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_45.c":158:1)
#loc237 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_45.c":132:5)
#loc238 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_45.c":132:16)
#loc239 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_45.c":133:5)
#loc240 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_45.c":157:5)
#loc241 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_45.c":134:9)
#loc242 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_45.c":134:13)
#loc243 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_45.c":135:9)
#loc244 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_45.c":135:54)
#loc245 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_45.c":135:31)
#loc246 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_45.c":135:38)
#loc247 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_45.c":135:43)
#loc248 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_45.c":135:53)
#loc249 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_45.c":136:9)
#loc250 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_45.c":136:39)
#loc251 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_45.c":136:13)
#loc252 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_45.c":136:23)
#loc253 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_45.c":136:29)
#loc254 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_45.c":136:30)
#loc255 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_45.c":136:36)
#loc256 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_45.c":136:35)
#loc257 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_45.c":138:9)
#loc258 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_45.c":141:9)
#loc259 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_45.c":138:18)
#loc260 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_45.c":138:14)
#loc261 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_45.c":138:21)
#loc262 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_45.c":138:25)
#loc263 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_45.c":138:23)
#loc264 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_45.c":139:9)
#loc265 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_45.c":140:25)
#loc266 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_45.c":140:13)
#loc267 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_45.c":140:20)
#loc268 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_45.c":140:21)
#loc269 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_45.c":138:30)
#loc270 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_45.c":138:29)
#loc271 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_45.c":143:9)
#loc272 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_45.c":155:9)
#loc273 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_45.c":143:13)
#loc274 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_45.c":143:21)
#loc275 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_45.c":143:23)
#loc276 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_45.c":143:26)
#loc277 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_45.c":143:34)
#loc278 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_45.c":143:36)
#loc279 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_45.c":144:9)
#loc280 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_45.c":151:9)
#loc281 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_45.c":153:9)
#loc282 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_45.c":145:28)
#loc283 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_45.c":145:13)
#loc284 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_45.c":145:20)
#loc285 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_45.c":145:24)
#loc286 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_45.c":147:13)
#loc287 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_45.c":150:13)
#loc288 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_45.c":147:21)
#loc289 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_45.c":147:17)
#loc290 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_45.c":147:24)
#loc291 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_45.c":147:28)
#loc292 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_45.c":147:26)
#loc293 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_45.c":148:13)
#loc294 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_45.c":149:30)
#loc295 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_45.c":149:37)
#loc296 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_45.c":149:38)
#loc297 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_45.c":149:17)
#loc298 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_45.c":147:33)
#loc299 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_45.c":147:32)
#loc300 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_45.c":154:13)
#loc301 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_45.c":156:9)
#loc302 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_45.c":156:14)
#loc303 = loc(fused[#loc1, #loc2])
#loc304 = loc(fused[#loc3, #loc4])
#loc305 = loc(fused[#loc5, #loc6])
#loc306 = loc(fused[#loc7, #loc8])
#loc307 = loc(fused[#loc10, #loc11])
#loc308 = loc(fused[#loc12, #loc13])
#loc309 = loc(fused[#loc14, #loc15])
#loc310 = loc(fused[#loc18, #loc16])
#loc311 = loc(fused[#loc19, #loc20])
#loc312 = loc(fused[#loc21, #loc22])
#loc313 = loc(fused[#loc23, #loc24])
#loc314 = loc(fused[#loc28, #loc29])
#loc315 = loc(fused[#loc30, #loc31, #loc32, #loc24])
#loc316 = loc(fused[#loc35, #loc36])
#loc317 = loc(fused[#loc39, #loc38])
#loc318 = loc(fused[#loc40, #loc41])
#loc319 = loc(fused[#loc42, #loc43])
#loc320 = loc(fused[#loc44, #loc45])
#loc321 = loc(fused[#loc46, #loc47])
#loc322 = loc(fused[#loc48, #loc49])
#loc323 = loc(fused[#loc50, #loc51])
#loc324 = loc(fused[#loc52, #loc53])
#loc325 = loc(fused[#loc55, #loc56])
#loc326 = loc(fused[#loc57, #loc58])
#loc327 = loc(fused[#loc59, #loc60])
#loc328 = loc(fused[#loc61, #loc62])
#loc329 = loc(fused[#loc63, #loc64])
#loc330 = loc(fused[#loc65, #loc66])
#loc331 = loc(fused[#loc69, #loc70])
#loc332 = loc(fused[#loc68, #loc70])
#loc333 = loc(fused[#loc67, #loc66])
#loc334 = loc(fused[#loc71, #loc72])
#loc335 = loc(fused[#loc73, #loc74])
#loc336 = loc(fused[#loc75, #loc72])
#loc337 = loc(fused[#loc79, #loc80])
#loc338 = loc(fused[#loc82, #loc81])
#loc339 = loc(fused[#loc83, #loc84])
#loc340 = loc(fused[#loc86, #loc80])
#loc341 = loc(fused[#loc88, #loc87])
#loc342 = loc(fused[#loc92, #loc91])
#loc343 = loc(fused[#loc93, #loc94])
#loc344 = loc(fused[#loc95, #loc96])
#loc345 = loc(fused[#loc97, #loc98, #loc99, #loc94])
#loc346 = loc(fused[#loc101, #loc100])
#loc347 = loc(fused[#loc104, #loc105])
#loc348 = loc(fused[#loc107, #loc106])
#loc349 = loc(fused[#loc108, #loc109])
#loc350 = loc(fused[#loc111, #loc105])
#loc351 = loc(fused[#loc117, #loc116])
#loc352 = loc(fused[#loc121, #loc122])
#loc353 = loc(fused[#loc123, #loc124])
#loc354 = loc(fused[#loc125, #loc126])
#loc355 = loc(fused[#loc129, #loc127])
#loc356 = loc(fused[#loc131, #loc130])
#loc357 = loc(fused[#loc133, #loc132])
#loc358 = loc(fused[#loc134, #loc135])
#loc359 = loc(fused[#loc136, #loc137])
#loc360 = loc(fused[#loc138, #loc139])
#loc361 = loc(fused[#loc140, #loc141])
#loc362 = loc(fused[#loc142, #loc143])
#loc363 = loc(fused[#loc144, #loc145])
#loc364 = loc(fused[#loc148, #loc149])
#loc365 = loc(fused[#loc147, #loc149])
#loc366 = loc(fused[#loc146, #loc145])
#loc367 = loc(fused[#loc150, #loc151])
#loc368 = loc(fused[#loc152, #loc153])
#loc369 = loc(fused[#loc154, #loc151])
#loc370 = loc(fused[#loc158, #loc159])
#loc371 = loc(fused[#loc161, #loc160])
#loc372 = loc(fused[#loc162, #loc163])
#loc373 = loc(fused[#loc165, #loc159])
#loc374 = loc(fused[#loc167, #loc166])
#loc375 = loc(fused[#loc171, #loc170])
#loc376 = loc(fused[#loc172, #loc173])
#loc377 = loc(fused[#loc174, #loc175])
#loc378 = loc(fused[#loc176, #loc177, #loc178, #loc173])
#loc379 = loc(fused[#loc180, #loc179])
#loc380 = loc(fused[#loc183, #loc184])
#loc381 = loc(fused[#loc186, #loc185])
#loc382 = loc(fused[#loc187, #loc188])
#loc383 = loc(fused[#loc190, #loc184])
#loc384 = loc(fused[#loc196, #loc195])
#loc385 = loc(fused[#loc201, #loc202])
#loc386 = loc(fused[#loc203, #loc204])
#loc387 = loc(fused[#loc205, #loc206])
#loc388 = loc(fused[#loc209, #loc207])
#loc389 = loc(fused[#loc210, #loc211])
#loc390 = loc(fused[#loc212, #loc213])
#loc391 = loc(fused[#loc214, #loc215])
#loc392 = loc(fused[#loc219, #loc220])
#loc393 = loc(fused[#loc221, #loc222, #loc223, #loc215])
#loc394 = loc(fused[#loc226, #loc227])
#loc395 = loc(fused[#loc231, #loc230])
#loc396 = loc(fused[#loc232, #loc233])
#loc397 = loc(fused[#loc235, #loc236])
#loc398 = loc(fused[#loc237, #loc238])
#loc399 = loc(fused[#loc239, #loc240])
#loc400 = loc(fused[#loc241, #loc242])
#loc401 = loc(fused[#loc243, #loc244])
#loc402 = loc(fused[#loc247, #loc248])
#loc403 = loc(fused[#loc246, #loc248])
#loc404 = loc(fused[#loc245, #loc244])
#loc405 = loc(fused[#loc249, #loc250])
#loc406 = loc(fused[#loc251, #loc252])
#loc407 = loc(fused[#loc253, #loc250])
#loc408 = loc(fused[#loc257, #loc258])
#loc409 = loc(fused[#loc260, #loc259])
#loc410 = loc(fused[#loc261, #loc262])
#loc411 = loc(fused[#loc264, #loc258])
#loc412 = loc(fused[#loc266, #loc265])
#loc413 = loc(fused[#loc270, #loc269])
#loc414 = loc(fused[#loc271, #loc272])
#loc415 = loc(fused[#loc273, #loc274])
#loc416 = loc(fused[#loc276, #loc278])
#loc417 = loc(fused[#loc279, #loc280, #loc281, #loc272])
#loc418 = loc(fused[#loc283, #loc282])
#loc419 = loc(fused[#loc286, #loc287])
#loc420 = loc(fused[#loc289, #loc288])
#loc421 = loc(fused[#loc290, #loc291])
#loc422 = loc(fused[#loc293, #loc287])
#loc423 = loc(fused[#loc299, #loc298])
