!s32i = !cir.int<s, 32>
!u64i = !cir.int<u, 64>
!void = !cir.void
#fn_attr = #cir<extra({nothrow = #cir.nothrow})>
#fn_attr1 = #cir<extra({inline = #cir.inline<no>, nothrow = #cir.nothrow, optnone = #cir.optnone})>
#loc7 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE131_loop_42.c":21:24)
#loc8 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE131_loop_42.c":21:30)
#loc73 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE131_loop_42.c":51:28)
#loc74 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE131_loop_42.c":51:34)
#loc134 = loc(fused[#loc7, #loc8])
#loc159 = loc(fused[#loc73, #loc74])
module @"/home/ladisgin/git_proj/test_projects/juliet-c/testcases/CWE122_Heap_Based_Buffer_Overflow/s05/CWE122_Heap_Based_Buffer_Overflow__CWE131_loop_42.c" attributes {cir.lang = #cir.lang<c>, cir.sob = #cir.signed_overflow_behavior<undefined>, cir.triple = "x86_64-unknown-linux-gnu", dlti.dl_spec = #dlti.dl_spec<#dlti.dl_entry<i32, dense<32> : vector<2xi64>>, #dlti.dl_entry<i16, dense<16> : vector<2xi64>>, #dlti.dl_entry<i8, dense<8> : vector<2xi64>>, #dlti.dl_entry<!llvm.ptr<272>, dense<64> : vector<4xi64>>, #dlti.dl_entry<!llvm.ptr<271>, dense<32> : vector<4xi64>>, #dlti.dl_entry<!llvm.ptr<270>, dense<32> : vector<4xi64>>, #dlti.dl_entry<f128, dense<128> : vector<2xi64>>, #dlti.dl_entry<f64, dense<64> : vector<2xi64>>, #dlti.dl_entry<f16, dense<16> : vector<2xi64>>, #dlti.dl_entry<i128, dense<128> : vector<2xi64>>, #dlti.dl_entry<i64, dense<64> : vector<2xi64>>, #dlti.dl_entry<i1, dense<8> : vector<2xi64>>, #dlti.dl_entry<!llvm.ptr, dense<64> : vector<4xi64>>, #dlti.dl_entry<f80, dense<128> : vector<2xi64>>, #dlti.dl_entry<"dlti.endianness", "little">, #dlti.dl_entry<"dlti.stack_alignment", 128 : i64>>, llvm.data_layout = "e-m:e-p270:32:32-p271:32:32-p272:64:64-i64:64-i128:128-f80:128-n8:16:32:64-S128"} {
  cir.func private  @malloc(!u64i) -> !cir.ptr<!void> extra(#fn_attr) loc(#loc131)
  cir.func private  @exit(!s32i) extra(#fn_attr) loc(#loc132)
  cir.func internal private  @badSource(%arg0: !cir.ptr<!s32i> loc(fused[#loc7, #loc8])) -> !cir.ptr<!s32i> extra(#fn_attr1) {
    %0 = cir.alloca !cir.ptr<!s32i>, !cir.ptr<!cir.ptr<!s32i>>, ["data", init] {alignment = 8 : i64} loc(#loc134)
    %1 = cir.alloca !cir.ptr<!s32i>, !cir.ptr<!cir.ptr<!s32i>>, ["__retval"] {alignment = 8 : i64} loc(#loc6)
    cir.store %arg0, %0 : !cir.ptr<!s32i>, !cir.ptr<!cir.ptr<!s32i>> loc(#loc9)
    %2 = cir.get_global @malloc : !cir.ptr<!cir.func<!cir.ptr<!void> (!u64i)>> loc(#loc10)
    %3 = cir.const #cir.int<10> : !s32i loc(#loc11)
    %4 = cir.cast(integral, %3 : !s32i), !u64i loc(#loc11)
    %5 = cir.call @malloc(%4) : (!u64i) -> !cir.ptr<!void> extra(#fn_attr) loc(#loc10)
    %6 = cir.cast(bitcast, %5 : !cir.ptr<!void>), !cir.ptr<!s32i> loc(#loc135)
    cir.store %6, %0 : !cir.ptr<!s32i>, !cir.ptr<!cir.ptr<!s32i>> loc(#loc136)
    cir.scope {
      %9 = cir.load %0 : !cir.ptr<!cir.ptr<!s32i>>, !cir.ptr<!s32i> loc(#loc16)
      %10 = cir.const #cir.ptr<null> : !cir.ptr<!void> loc(#loc17)
      %11 = cir.cast(bitcast, %10 : !cir.ptr<!void>), !cir.ptr<!s32i> loc(#loc17)
      %12 = cir.cmp(eq, %9, %11) : !cir.ptr<!s32i>, !s32i loc(#loc138)
      %13 = cir.cast(int_to_bool, %12 : !s32i), !cir.bool loc(#loc18)
      cir.if %13 {
        %14 = cir.get_global @exit : !cir.ptr<!cir.func<!void (!s32i)>> loc(#loc20)
        %15 = cir.const #cir.int<1> : !s32i loc(#loc21)
        %16 = cir.unary(minus, %15) : !s32i, !s32i loc(#loc22)
        cir.call @exit(%16) : (!s32i) -> () extra(#fn_attr) loc(#loc20)
      } loc(#loc139)
    } loc(#loc137)
    %7 = cir.load %0 : !cir.ptr<!cir.ptr<!s32i>>, !cir.ptr<!s32i> loc(#loc23)
    cir.store %7, %1 : !cir.ptr<!s32i>, !cir.ptr<!cir.ptr<!s32i>> loc(#loc140)
    %8 = cir.load %1 : !cir.ptr<!cir.ptr<!s32i>>, !cir.ptr<!s32i> loc(#loc140)
    cir.return %8 : !cir.ptr<!s32i> loc(#loc140)
  } loc(#loc133)
  cir.func private  @printIntLine(!s32i) loc(#loc141)
  cir.func private  @free(!cir.ptr<!void>) extra(#fn_attr) loc(#loc142)
  cir.func no_proto  @CWE122_Heap_Based_Buffer_Overflow__CWE131_loop_42_bad() extra(#fn_attr1) {
    %0 = cir.alloca !cir.ptr<!s32i>, !cir.ptr<!cir.ptr<!s32i>>, ["data"] {alignment = 8 : i64} loc(#loc144)
    %1 = cir.const #cir.ptr<null> : !cir.ptr<!s32i> loc(#loc33)
    cir.store %1, %0 : !cir.ptr<!s32i>, !cir.ptr<!cir.ptr<!s32i>> loc(#loc145)
    %2 = cir.load %0 : !cir.ptr<!cir.ptr<!s32i>>, !cir.ptr<!s32i> loc(#loc35)
    %3 = cir.call @badSource(%2) : (!cir.ptr<!s32i>) -> !cir.ptr<!s32i> loc(#loc36)
    cir.store %3, %0 : !cir.ptr<!s32i>, !cir.ptr<!cir.ptr<!s32i>> loc(#loc146)
    cir.scope {
      %4 = cir.alloca !cir.array<!s32i x 10>, !cir.ptr<!cir.array<!s32i x 10>>, ["source"] {alignment = 16 : i64} loc(#loc148)
      %5 = cir.alloca !u64i, !cir.ptr<!u64i>, ["i"] {alignment = 8 : i64} loc(#loc149)
      %6 = cir.const #cir.zero : !cir.array<!s32i x 10> loc(#loc148)
      cir.store %6, %4 : !cir.array<!s32i x 10>, !cir.ptr<!cir.array<!s32i x 10>> loc(#loc148)
      cir.scope {
        %14 = cir.const #cir.int<0> : !s32i loc(#loc47)
        %15 = cir.cast(integral, %14 : !s32i), !u64i loc(#loc47)
        cir.store %15, %5 : !u64i, !cir.ptr<!u64i> loc(#loc151)
        cir.for : cond {
          %16 = cir.load %5 : !cir.ptr<!u64i>, !u64i loc(#loc49)
          %17 = cir.const #cir.int<10> : !s32i loc(#loc50)
          %18 = cir.cast(integral, %17 : !s32i), !u64i loc(#loc50)
          %19 = cir.cmp(lt, %16, %18) : !u64i, !s32i loc(#loc152)
          %20 = cir.cast(int_to_bool, %19 : !s32i), !cir.bool loc(#loc51)
          cir.condition(%20) loc(#loc51)
        } body {
          cir.scope {
            %16 = cir.load %5 : !cir.ptr<!u64i>, !u64i loc(#loc53)
            %17 = cir.cast(array_to_ptrdecay, %4 : !cir.ptr<!cir.array<!s32i x 10>>), !cir.ptr<!s32i> loc(#loc54)
            %18 = cir.ptr_stride(%17 : !cir.ptr<!s32i>, %16 : !u64i), !cir.ptr<!s32i> loc(#loc54)
            %19 = cir.load %18 : !cir.ptr<!s32i>, !s32i loc(#loc54)
            %20 = cir.load %0 : !cir.ptr<!cir.ptr<!s32i>>, !cir.ptr<!s32i> loc(#loc55)
            %21 = cir.load %5 : !cir.ptr<!u64i>, !u64i loc(#loc56)
            %22 = cir.ptr_stride(%20 : !cir.ptr<!s32i>, %21 : !u64i), !cir.ptr<!s32i> loc(#loc57)
            cir.store %19, %22 : !s32i, !cir.ptr<!s32i> loc(#loc154)
          } loc(#loc153)
          cir.yield loc(#loc46)
        } step {
          %16 = cir.load %5 : !cir.ptr<!u64i>, !u64i loc(#loc59)
          %17 = cir.unary(inc, %16) : !u64i, !u64i loc(#loc60)
          cir.store %17, %5 : !u64i, !cir.ptr<!u64i> loc(#loc155)
          cir.yield loc(#loc150)
        } loc(#loc150)
      } loc(#loc150)
      %7 = cir.load %0 : !cir.ptr<!cir.ptr<!s32i>>, !cir.ptr<!s32i> loc(#loc61)
      %8 = cir.const #cir.int<0> : !s32i loc(#loc62)
      %9 = cir.ptr_stride(%7 : !cir.ptr<!s32i>, %8 : !s32i), !cir.ptr<!s32i> loc(#loc63)
      %10 = cir.load %9 : !cir.ptr<!s32i>, !s32i loc(#loc61)
      cir.call @printIntLine(%10) : (!s32i) -> () loc(#loc64)
      %11 = cir.get_global @free : !cir.ptr<!cir.func<!void (!cir.ptr<!void>)>> loc(#loc65)
      %12 = cir.load %0 : !cir.ptr<!cir.ptr<!s32i>>, !cir.ptr<!s32i> loc(#loc66)
      %13 = cir.cast(bitcast, %12 : !cir.ptr<!s32i>), !cir.ptr<!void> loc(#loc66)
      cir.call @free(%13) : (!cir.ptr<!void>) -> () extra(#fn_attr) loc(#loc65)
    } loc(#loc147)
    cir.return loc(#loc30)
  } loc(#loc143)
  cir.func no_proto  @CWE122_Heap_Based_Buffer_Overflow__CWE131_loop_42_good() extra(#fn_attr1) {
    %0 = cir.get_global @goodG2B : !cir.ptr<!cir.func<!void ()>> loc(#loc157)
    cir.call %0() : (!cir.ptr<!cir.func<!void ()>>) -> () loc(#loc69)
    cir.return loc(#loc68)
  } loc(#loc156)
  cir.func internal private  @goodG2BSource(%arg0: !cir.ptr<!s32i> loc(fused[#loc73, #loc74])) -> !cir.ptr<!s32i> extra(#fn_attr1) {
    %0 = cir.alloca !cir.ptr<!s32i>, !cir.ptr<!cir.ptr<!s32i>>, ["data", init] {alignment = 8 : i64} loc(#loc159)
    %1 = cir.alloca !cir.ptr<!s32i>, !cir.ptr<!cir.ptr<!s32i>>, ["__retval"] {alignment = 8 : i64} loc(#loc72)
    cir.store %arg0, %0 : !cir.ptr<!s32i>, !cir.ptr<!cir.ptr<!s32i>> loc(#loc75)
    %2 = cir.get_global @malloc : !cir.ptr<!cir.func<!cir.ptr<!void> (!u64i)>> loc(#loc76)
    %3 = cir.const #cir.int<10> : !s32i loc(#loc77)
    %4 = cir.cast(integral, %3 : !s32i), !u64i loc(#loc77)
    %5 = cir.const #cir.int<4> : !u64i loc(#loc160)
    %6 = cir.binop(mul, %4, %5) : !u64i loc(#loc161)
    %7 = cir.call @malloc(%6) : (!u64i) -> !cir.ptr<!void> extra(#fn_attr) loc(#loc76)
    %8 = cir.cast(bitcast, %7 : !cir.ptr<!void>), !cir.ptr<!s32i> loc(#loc162)
    cir.store %8, %0 : !cir.ptr<!s32i>, !cir.ptr<!cir.ptr<!s32i>> loc(#loc163)
    cir.scope {
      %11 = cir.load %0 : !cir.ptr<!cir.ptr<!s32i>>, !cir.ptr<!s32i> loc(#loc84)
      %12 = cir.const #cir.ptr<null> : !cir.ptr<!void> loc(#loc85)
      %13 = cir.cast(bitcast, %12 : !cir.ptr<!void>), !cir.ptr<!s32i> loc(#loc85)
      %14 = cir.cmp(eq, %11, %13) : !cir.ptr<!s32i>, !s32i loc(#loc165)
      %15 = cir.cast(int_to_bool, %14 : !s32i), !cir.bool loc(#loc86)
      cir.if %15 {
        %16 = cir.get_global @exit : !cir.ptr<!cir.func<!void (!s32i)>> loc(#loc88)
        %17 = cir.const #cir.int<1> : !s32i loc(#loc89)
        %18 = cir.unary(minus, %17) : !s32i, !s32i loc(#loc90)
        cir.call @exit(%18) : (!s32i) -> () extra(#fn_attr) loc(#loc88)
      } loc(#loc166)
    } loc(#loc164)
    %9 = cir.load %0 : !cir.ptr<!cir.ptr<!s32i>>, !cir.ptr<!s32i> loc(#loc91)
    cir.store %9, %1 : !cir.ptr<!s32i>, !cir.ptr<!cir.ptr<!s32i>> loc(#loc167)
    %10 = cir.load %1 : !cir.ptr<!cir.ptr<!s32i>>, !cir.ptr<!s32i> loc(#loc167)
    cir.return %10 : !cir.ptr<!s32i> loc(#loc167)
  } loc(#loc158)
  cir.func no_proto internal private  @goodG2B() extra(#fn_attr1) {
    %0 = cir.alloca !cir.ptr<!s32i>, !cir.ptr<!cir.ptr<!s32i>>, ["data"] {alignment = 8 : i64} loc(#loc169)
    %1 = cir.const #cir.ptr<null> : !cir.ptr<!s32i> loc(#loc97)
    cir.store %1, %0 : !cir.ptr<!s32i>, !cir.ptr<!cir.ptr<!s32i>> loc(#loc170)
    %2 = cir.load %0 : !cir.ptr<!cir.ptr<!s32i>>, !cir.ptr<!s32i> loc(#loc99)
    %3 = cir.call @goodG2BSource(%2) : (!cir.ptr<!s32i>) -> !cir.ptr<!s32i> loc(#loc100)
    cir.store %3, %0 : !cir.ptr<!s32i>, !cir.ptr<!cir.ptr<!s32i>> loc(#loc171)
    cir.scope {
      %4 = cir.alloca !cir.array<!s32i x 10>, !cir.ptr<!cir.array<!s32i x 10>>, ["source"] {alignment = 16 : i64} loc(#loc173)
      %5 = cir.alloca !u64i, !cir.ptr<!u64i>, ["i"] {alignment = 8 : i64} loc(#loc174)
      %6 = cir.const #cir.zero : !cir.array<!s32i x 10> loc(#loc173)
      cir.store %6, %4 : !cir.array<!s32i x 10>, !cir.ptr<!cir.array<!s32i x 10>> loc(#loc173)
      cir.scope {
        %14 = cir.const #cir.int<0> : !s32i loc(#loc111)
        %15 = cir.cast(integral, %14 : !s32i), !u64i loc(#loc111)
        cir.store %15, %5 : !u64i, !cir.ptr<!u64i> loc(#loc176)
        cir.for : cond {
          %16 = cir.load %5 : !cir.ptr<!u64i>, !u64i loc(#loc113)
          %17 = cir.const #cir.int<10> : !s32i loc(#loc114)
          %18 = cir.cast(integral, %17 : !s32i), !u64i loc(#loc114)
          %19 = cir.cmp(lt, %16, %18) : !u64i, !s32i loc(#loc177)
          %20 = cir.cast(int_to_bool, %19 : !s32i), !cir.bool loc(#loc115)
          cir.condition(%20) loc(#loc115)
        } body {
          cir.scope {
            %16 = cir.load %5 : !cir.ptr<!u64i>, !u64i loc(#loc117)
            %17 = cir.cast(array_to_ptrdecay, %4 : !cir.ptr<!cir.array<!s32i x 10>>), !cir.ptr<!s32i> loc(#loc118)
            %18 = cir.ptr_stride(%17 : !cir.ptr<!s32i>, %16 : !u64i), !cir.ptr<!s32i> loc(#loc118)
            %19 = cir.load %18 : !cir.ptr<!s32i>, !s32i loc(#loc118)
            %20 = cir.load %0 : !cir.ptr<!cir.ptr<!s32i>>, !cir.ptr<!s32i> loc(#loc119)
            %21 = cir.load %5 : !cir.ptr<!u64i>, !u64i loc(#loc120)
            %22 = cir.ptr_stride(%20 : !cir.ptr<!s32i>, %21 : !u64i), !cir.ptr<!s32i> loc(#loc121)
            cir.store %19, %22 : !s32i, !cir.ptr<!s32i> loc(#loc179)
          } loc(#loc178)
          cir.yield loc(#loc110)
        } step {
          %16 = cir.load %5 : !cir.ptr<!u64i>, !u64i loc(#loc123)
          %17 = cir.unary(inc, %16) : !u64i, !u64i loc(#loc124)
          cir.store %17, %5 : !u64i, !cir.ptr<!u64i> loc(#loc180)
          cir.yield loc(#loc175)
        } loc(#loc175)
      } loc(#loc175)
      %7 = cir.load %0 : !cir.ptr<!cir.ptr<!s32i>>, !cir.ptr<!s32i> loc(#loc125)
      %8 = cir.const #cir.int<0> : !s32i loc(#loc126)
      %9 = cir.ptr_stride(%7 : !cir.ptr<!s32i>, %8 : !s32i), !cir.ptr<!s32i> loc(#loc127)
      %10 = cir.load %9 : !cir.ptr<!s32i>, !s32i loc(#loc125)
      cir.call @printIntLine(%10) : (!s32i) -> () loc(#loc128)
      %11 = cir.get_global @free : !cir.ptr<!cir.func<!void (!cir.ptr<!void>)>> loc(#loc129)
      %12 = cir.load %0 : !cir.ptr<!cir.ptr<!s32i>>, !cir.ptr<!s32i> loc(#loc130)
      %13 = cir.cast(bitcast, %12 : !cir.ptr<!s32i>), !cir.ptr<!void> loc(#loc130)
      cir.call @free(%13) : (!cir.ptr<!void>) -> () extra(#fn_attr) loc(#loc129)
    } loc(#loc172)
    cir.return loc(#loc94)
  } loc(#loc168)
} loc(#loc)
#loc = loc("/home/ladisgin/git_proj/test_projects/juliet-c/testcases/CWE122_Heap_Based_Buffer_Overflow/s05/CWE122_Heap_Based_Buffer_Overflow__CWE131_loop_42.c":0:0)
#loc1 = loc("/usr/include/stdlib.h":672:1)
#loc2 = loc("/usr/include/stdlib.h":672:45)
#loc3 = loc("/usr/include/stdlib.h":756:1)
#loc4 = loc("/usr/include/stdlib.h":756:70)
#loc5 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE131_loop_42.c":21:1)
#loc6 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE131_loop_42.c":27:1)
#loc9 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE131_loop_42.c":22:1)
#loc10 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE131_loop_42.c":24:19)
#loc11 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE131_loop_42.c":24:26)
#loc12 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE131_loop_42.c":24:28)
#loc13 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE131_loop_42.c":24:5)
#loc14 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE131_loop_42.c":25:5)
#loc15 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE131_loop_42.c":25:33)
#loc16 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE131_loop_42.c":25:9)
#loc17 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE131_loop_42.c":25:17)
#loc18 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE131_loop_42.c":25:14)
#loc19 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE131_loop_42.c":25:23)
#loc20 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE131_loop_42.c":25:24)
#loc21 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE131_loop_42.c":25:30)
#loc22 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE131_loop_42.c":25:29)
#loc23 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE131_loop_42.c":26:12)
#loc24 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE131_loop_42.c":26:5)
#loc25 = loc("../../../testcasesupport/std_testcase_io.h":18:1)
#loc26 = loc("../../../testcasesupport/std_testcase_io.h":18:33)
#loc27 = loc("/usr/include/stdlib.h":687:1)
#loc28 = loc("/usr/include/stdlib.h":687:32)
#loc29 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE131_loop_42.c":29:1)
#loc30 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE131_loop_42.c":45:1)
#loc31 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE131_loop_42.c":31:5)
#loc32 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE131_loop_42.c":31:11)
#loc33 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE131_loop_42.c":32:12)
#loc34 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE131_loop_42.c":32:5)
#loc35 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE131_loop_42.c":33:22)
#loc36 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE131_loop_42.c":33:12)
#loc37 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE131_loop_42.c":33:5)
#loc38 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE131_loop_42.c":33:26)
#loc39 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE131_loop_42.c":34:5)
#loc40 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE131_loop_42.c":44:5)
#loc41 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE131_loop_42.c":35:9)
#loc42 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE131_loop_42.c":35:28)
#loc43 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE131_loop_42.c":36:9)
#loc44 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE131_loop_42.c":36:16)
#loc45 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE131_loop_42.c":38:9)
#loc46 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE131_loop_42.c":41:9)
#loc47 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE131_loop_42.c":38:18)
#loc48 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE131_loop_42.c":38:14)
#loc49 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE131_loop_42.c":38:21)
#loc50 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE131_loop_42.c":38:25)
#loc51 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE131_loop_42.c":38:23)
#loc52 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE131_loop_42.c":39:9)
#loc53 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE131_loop_42.c":40:30)
#loc54 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE131_loop_42.c":40:23)
#loc55 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE131_loop_42.c":40:13)
#loc56 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE131_loop_42.c":40:18)
#loc57 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE131_loop_42.c":40:19)
#loc58 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE131_loop_42.c":40:31)
#loc59 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE131_loop_42.c":38:30)
#loc60 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE131_loop_42.c":38:29)
#loc61 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE131_loop_42.c":42:22)
#loc62 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE131_loop_42.c":42:27)
#loc63 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE131_loop_42.c":42:28)
#loc64 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE131_loop_42.c":42:9)
#loc65 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE131_loop_42.c":43:9)
#loc66 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE131_loop_42.c":43:14)
#loc67 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE131_loop_42.c":78:1)
#loc68 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE131_loop_42.c":81:1)
#loc69 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE131_loop_42.c":80:5)
#loc70 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE131_loop_42.c":80:13)
#loc71 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE131_loop_42.c":51:1)
#loc72 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE131_loop_42.c":57:1)
#loc75 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE131_loop_42.c":52:1)
#loc76 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE131_loop_42.c":54:19)
#loc77 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE131_loop_42.c":54:26)
#loc78 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE131_loop_42.c":54:29)
#loc79 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE131_loop_42.c":54:39)
#loc80 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE131_loop_42.c":54:40)
#loc81 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE131_loop_42.c":54:5)
#loc82 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE131_loop_42.c":55:5)
#loc83 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE131_loop_42.c":55:33)
#loc84 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE131_loop_42.c":55:9)
#loc85 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE131_loop_42.c":55:17)
#loc86 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE131_loop_42.c":55:14)
#loc87 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE131_loop_42.c":55:23)
#loc88 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE131_loop_42.c":55:24)
#loc89 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE131_loop_42.c":55:30)
#loc90 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE131_loop_42.c":55:29)
#loc91 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE131_loop_42.c":56:12)
#loc92 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE131_loop_42.c":56:5)
#loc93 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE131_loop_42.c":60:1)
#loc94 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE131_loop_42.c":76:1)
#loc95 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE131_loop_42.c":62:5)
#loc96 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE131_loop_42.c":62:11)
#loc97 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE131_loop_42.c":63:12)
#loc98 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE131_loop_42.c":63:5)
#loc99 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE131_loop_42.c":64:26)
#loc100 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE131_loop_42.c":64:12)
#loc101 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE131_loop_42.c":64:5)
#loc102 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE131_loop_42.c":64:30)
#loc103 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE131_loop_42.c":65:5)
#loc104 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE131_loop_42.c":75:5)
#loc105 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE131_loop_42.c":66:9)
#loc106 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE131_loop_42.c":66:28)
#loc107 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE131_loop_42.c":67:9)
#loc108 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE131_loop_42.c":67:16)
#loc109 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE131_loop_42.c":69:9)
#loc110 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE131_loop_42.c":72:9)
#loc111 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE131_loop_42.c":69:18)
#loc112 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE131_loop_42.c":69:14)
#loc113 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE131_loop_42.c":69:21)
#loc114 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE131_loop_42.c":69:25)
#loc115 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE131_loop_42.c":69:23)
#loc116 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE131_loop_42.c":70:9)
#loc117 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE131_loop_42.c":71:30)
#loc118 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE131_loop_42.c":71:23)
#loc119 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE131_loop_42.c":71:13)
#loc120 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE131_loop_42.c":71:18)
#loc121 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE131_loop_42.c":71:19)
#loc122 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE131_loop_42.c":71:31)
#loc123 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE131_loop_42.c":69:30)
#loc124 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE131_loop_42.c":69:29)
#loc125 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE131_loop_42.c":73:22)
#loc126 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE131_loop_42.c":73:27)
#loc127 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE131_loop_42.c":73:28)
#loc128 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE131_loop_42.c":73:9)
#loc129 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE131_loop_42.c":74:9)
#loc130 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE131_loop_42.c":74:14)
#loc131 = loc(fused[#loc1, #loc2])
#loc132 = loc(fused[#loc3, #loc4])
#loc133 = loc(fused[#loc5, #loc6])
#loc135 = loc(fused[#loc10, #loc12])
#loc136 = loc(fused[#loc13, #loc12])
#loc137 = loc(fused[#loc14, #loc15])
#loc138 = loc(fused[#loc16, #loc17])
#loc139 = loc(fused[#loc19, #loc15])
#loc140 = loc(fused[#loc24, #loc23])
#loc141 = loc(fused[#loc25, #loc26])
#loc142 = loc(fused[#loc27, #loc28])
#loc143 = loc(fused[#loc29, #loc30])
#loc144 = loc(fused[#loc31, #loc32])
#loc145 = loc(fused[#loc34, #loc33])
#loc146 = loc(fused[#loc37, #loc38])
#loc147 = loc(fused[#loc39, #loc40])
#loc148 = loc(fused[#loc41, #loc42])
#loc149 = loc(fused[#loc43, #loc44])
#loc150 = loc(fused[#loc45, #loc46])
#loc151 = loc(fused[#loc48, #loc47])
#loc152 = loc(fused[#loc49, #loc50])
#loc153 = loc(fused[#loc52, #loc46])
#loc154 = loc(fused[#loc55, #loc58])
#loc155 = loc(fused[#loc60, #loc59])
#loc156 = loc(fused[#loc67, #loc68])
#loc157 = loc(fused[#loc69, #loc70])
#loc158 = loc(fused[#loc71, #loc72])
#loc160 = loc(fused[#loc78, #loc79])
#loc161 = loc(fused[#loc77, #loc79])
#loc162 = loc(fused[#loc76, #loc80])
#loc163 = loc(fused[#loc81, #loc80])
#loc164 = loc(fused[#loc82, #loc83])
#loc165 = loc(fused[#loc84, #loc85])
#loc166 = loc(fused[#loc87, #loc83])
#loc167 = loc(fused[#loc92, #loc91])
#loc168 = loc(fused[#loc93, #loc94])
#loc169 = loc(fused[#loc95, #loc96])
#loc170 = loc(fused[#loc98, #loc97])
#loc171 = loc(fused[#loc101, #loc102])
#loc172 = loc(fused[#loc103, #loc104])
#loc173 = loc(fused[#loc105, #loc106])
#loc174 = loc(fused[#loc107, #loc108])
#loc175 = loc(fused[#loc109, #loc110])
#loc176 = loc(fused[#loc112, #loc111])
#loc177 = loc(fused[#loc113, #loc114])
#loc178 = loc(fused[#loc116, #loc110])
#loc179 = loc(fused[#loc119, #loc122])
#loc180 = loc(fused[#loc124, #loc123])
