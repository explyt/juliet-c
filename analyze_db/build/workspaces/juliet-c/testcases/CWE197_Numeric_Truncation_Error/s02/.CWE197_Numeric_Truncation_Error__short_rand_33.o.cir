!s16i = !cir.int<s, 16>
!s32i = !cir.int<s, 32>
!s8i = !cir.int<s, 8>
!u32i = !cir.int<u, 32>
#fn_attr = #cir<extra({nothrow = #cir.nothrow})>
#fn_attr1 = #cir<extra({inline = #cir.inline<no>, optnone = #cir.optnone, uwtable = #cir.uwtable<async>})>
module @"/workspaces/juliet-c/testcases/CWE197_Numeric_Truncation_Error/s02/CWE197_Numeric_Truncation_Error__short_rand_33.cpp" attributes {cir.lang = #cir.lang<cxx>, cir.sob = #cir.signed_overflow_behavior<undefined>, cir.triple = "x86_64-unknown-linux-gnu", cir.type_size_info = #cir.type_size_info<char = 8, int = 32, size_t = 64>, cir.uwtable = #cir.uwtable<async>, dlti.dl_spec = #dlti.dl_spec<f16 = dense<16> : vector<2xi64>, f64 = dense<64> : vector<2xi64>, i32 = dense<32> : vector<2xi64>, i16 = dense<16> : vector<2xi64>, !llvm.ptr<270> = dense<32> : vector<4xi64>, !llvm.ptr<272> = dense<64> : vector<4xi64>, i64 = dense<64> : vector<2xi64>, !llvm.ptr<271> = dense<32> : vector<4xi64>, f128 = dense<128> : vector<2xi64>, f80 = dense<128> : vector<2xi64>, i128 = dense<128> : vector<2xi64>, i8 = dense<8> : vector<2xi64>, i1 = dense<8> : vector<2xi64>, !llvm.ptr = dense<64> : vector<4xi64>, "dlti.mangling_mode" = "e", "dlti.endianness" = "little", "dlti.stack_alignment" = 128 : i64>} {
  cir.func private @rand() -> !s32i extra(#fn_attr) loc(#loc51)
  cir.func private @printHexCharLine(!s8i) loc(#loc52)
  cir.func @_ZN46CWE197_Numeric_Truncation_Error__short_rand_333badEv() extra(#fn_attr1) {
    %0 = cir.alloca !s16i, !cir.ptr<!s16i>, ["data"] {alignment = 2 : i64} loc(#loc54)
    %1 = cir.alloca !cir.ptr<!s16i>, !cir.ptr<!cir.ptr<!s16i>>, ["dataRef", init, const] {alignment = 8 : i64} loc(#loc55)
    cir.store %0, %1 : !cir.ptr<!s16i>, !cir.ptr<!cir.ptr<!s16i>> loc(#loc10)
    %2 = cir.const #cir.int<1> : !s32i loc(#loc11)
    %3 = cir.unary(minus, %2) nsw : !s32i, !s32i loc(#loc12)
    %4 = cir.cast(integral, %3 : !s32i), !s16i loc(#loc12)
    cir.store %4, %0 : !s16i, !cir.ptr<!s16i> loc(#loc56)
    %5 = cir.call @rand() : () -> !s32i extra(#fn_attr) loc(#loc14)
    %6 = cir.const #cir.int<1> : !s32i loc(#loc14)
    %7 = cir.binop(and, %5, %6) : !s32i loc(#loc14)
    %8 = cir.cast(int_to_bool, %7 : !s32i), !cir.bool loc(#loc14)
    %9 = cir.ternary(%8, true {
      %12 = cir.call @rand() : () -> !s32i extra(#fn_attr) loc(#loc14)
      %13 = cir.cast(integral, %12 : !s32i), !u32i loc(#loc14)
      %14 = cir.const #cir.int<30> : !s32i loc(#loc14)
      %15 = cir.shift(left, %13 : !u32i, %14 : !s32i) -> !u32i loc(#loc14)
      %16 = cir.call @rand() : () -> !s32i extra(#fn_attr) loc(#loc14)
      %17 = cir.cast(integral, %16 : !s32i), !u32i loc(#loc14)
      %18 = cir.const #cir.int<15> : !s32i loc(#loc14)
      %19 = cir.shift(left, %17 : !u32i, %18 : !s32i) -> !u32i loc(#loc14)
      %20 = cir.binop(xor, %15, %19) : !u32i loc(#loc14)
      %21 = cir.call @rand() : () -> !s32i extra(#fn_attr) loc(#loc14)
      %22 = cir.cast(integral, %21 : !s32i), !u32i loc(#loc14)
      %23 = cir.binop(xor, %20, %22) : !u32i loc(#loc14)
      cir.yield %23 : !u32i loc(#loc14)
    }, false {
      %12 = cir.call @rand() : () -> !s32i extra(#fn_attr) loc(#loc14)
      %13 = cir.cast(integral, %12 : !s32i), !u32i loc(#loc14)
      %14 = cir.const #cir.int<30> : !s32i loc(#loc14)
      %15 = cir.shift(left, %13 : !u32i, %14 : !s32i) -> !u32i loc(#loc14)
      %16 = cir.call @rand() : () -> !s32i extra(#fn_attr) loc(#loc14)
      %17 = cir.cast(integral, %16 : !s32i), !u32i loc(#loc14)
      %18 = cir.const #cir.int<15> : !s32i loc(#loc14)
      %19 = cir.shift(left, %17 : !u32i, %18 : !s32i) -> !u32i loc(#loc14)
      %20 = cir.binop(xor, %15, %19) : !u32i loc(#loc14)
      %21 = cir.call @rand() : () -> !s32i extra(#fn_attr) loc(#loc14)
      %22 = cir.cast(integral, %21 : !s32i), !u32i loc(#loc14)
      %23 = cir.binop(xor, %20, %22) : !u32i loc(#loc14)
      %24 = cir.unary(minus, %23) : !u32i, !u32i loc(#loc14)
      %25 = cir.const #cir.int<1> : !s32i loc(#loc14)
      %26 = cir.cast(integral, %25 : !s32i), !u32i loc(#loc14)
      %27 = cir.binop(sub, %24, %26) : !u32i loc(#loc14)
      cir.yield %27 : !u32i loc(#loc14)
    }) : (!cir.bool) -> !u32i loc(#loc14)
    %10 = cir.cast(integral, %9 : !u32i), !s32i loc(#loc14)
    %11 = cir.cast(integral, %10 : !s32i), !s16i loc(#loc14)
    cir.store %11, %0 : !s16i, !cir.ptr<!s16i> loc(#loc57)
    cir.scope {
      %12 = cir.alloca !s16i, !cir.ptr<!s16i>, ["data", init] {alignment = 2 : i64} loc(#loc59)
      %13 = cir.load %1 : !cir.ptr<!cir.ptr<!s16i>>, !cir.ptr<!s16i> loc(#loc19)
      %14 = cir.load %13 : !cir.ptr<!s16i>, !s16i loc(#loc19)
      cir.store %14, %12 : !s16i, !cir.ptr<!s16i> loc(#loc59)
      cir.scope {
        %15 = cir.alloca !s8i, !cir.ptr<!s8i>, ["charData", init] {alignment = 1 : i64} loc(#loc61)
        %16 = cir.load %12 : !cir.ptr<!s16i>, !s16i loc(#loc23)
        %17 = cir.cast(integral, %16 : !s16i), !s8i loc(#loc23)
        cir.store %17, %15 : !s8i, !cir.ptr<!s8i> loc(#loc61)
        %18 = cir.load %15 : !cir.ptr<!s8i>, !s8i loc(#loc24)
        cir.call @printHexCharLine(%18) : (!s8i) -> () loc(#loc25)
      } loc(#loc60)
    } loc(#loc58)
    cir.return loc(#loc6)
  } loc(#loc53)
  cir.func internal private @_ZN46CWE197_Numeric_Truncation_Error__short_rand_33L7goodG2BEv() extra(#fn_attr1) {
    %0 = cir.alloca !s16i, !cir.ptr<!s16i>, ["data"] {alignment = 2 : i64} loc(#loc63)
    %1 = cir.alloca !cir.ptr<!s16i>, !cir.ptr<!cir.ptr<!s16i>>, ["dataRef", init, const] {alignment = 8 : i64} loc(#loc64)
    cir.store %0, %1 : !cir.ptr<!s16i>, !cir.ptr<!cir.ptr<!s16i>> loc(#loc31)
    %2 = cir.const #cir.int<1> : !s32i loc(#loc32)
    %3 = cir.unary(minus, %2) nsw : !s32i, !s32i loc(#loc33)
    %4 = cir.cast(integral, %3 : !s32i), !s16i loc(#loc33)
    cir.store %4, %0 : !s16i, !cir.ptr<!s16i> loc(#loc65)
    %5 = cir.const #cir.int<127> : !s32i loc(#loc35)
    %6 = cir.const #cir.int<5> : !s32i loc(#loc36)
    %7 = cir.binop(sub, %5, %6) nsw : !s32i loc(#loc35)
    %8 = cir.cast(integral, %7 : !s32i), !s16i loc(#loc35)
    cir.store %8, %0 : !s16i, !cir.ptr<!s16i> loc(#loc66)
    cir.scope {
      %9 = cir.alloca !s16i, !cir.ptr<!s16i>, ["data", init] {alignment = 2 : i64} loc(#loc68)
      %10 = cir.load %1 : !cir.ptr<!cir.ptr<!s16i>>, !cir.ptr<!s16i> loc(#loc41)
      %11 = cir.load %10 : !cir.ptr<!s16i>, !s16i loc(#loc41)
      cir.store %11, %9 : !s16i, !cir.ptr<!s16i> loc(#loc68)
      cir.scope {
        %12 = cir.alloca !s8i, !cir.ptr<!s8i>, ["charData", init] {alignment = 1 : i64} loc(#loc70)
        %13 = cir.load %9 : !cir.ptr<!s16i>, !s16i loc(#loc45)
        %14 = cir.cast(integral, %13 : !s16i), !s8i loc(#loc45)
        cir.store %14, %12 : !s8i, !cir.ptr<!s8i> loc(#loc70)
        %15 = cir.load %12 : !cir.ptr<!s8i>, !s8i loc(#loc46)
        cir.call @printHexCharLine(%15) : (!s8i) -> () loc(#loc47)
      } loc(#loc69)
    } loc(#loc67)
    cir.return loc(#loc27)
  } loc(#loc62)
  cir.func @_ZN46CWE197_Numeric_Truncation_Error__short_rand_334goodEv() extra(#fn_attr1) {
    cir.call @_ZN46CWE197_Numeric_Truncation_Error__short_rand_33L7goodG2BEv() : () -> () loc(#loc50)
    cir.return loc(#loc49)
  } loc(#loc71)
} loc(#loc)
#loc = loc("/workspaces/juliet-c/testcases/CWE197_Numeric_Truncation_Error/s02/CWE197_Numeric_Truncation_Error__short_rand_33.cpp":0:0)
#loc1 = loc("/usr/include/stdlib.h":573:1)
#loc2 = loc("/usr/include/stdlib.h":573:24)
#loc3 = loc("../../../testcasesupport/std_testcase_io.h":30:1)
#loc4 = loc("../../../testcasesupport/std_testcase_io.h":30:35)
#loc5 = loc("CWE197_Numeric_Truncation_Error__short_rand_33.cpp":24:1)
#loc6 = loc("CWE197_Numeric_Truncation_Error__short_rand_33.cpp":40:1)
#loc7 = loc("CWE197_Numeric_Truncation_Error__short_rand_33.cpp":26:5)
#loc8 = loc("CWE197_Numeric_Truncation_Error__short_rand_33.cpp":26:11)
#loc9 = loc("CWE197_Numeric_Truncation_Error__short_rand_33.cpp":27:5)
#loc10 = loc("CWE197_Numeric_Truncation_Error__short_rand_33.cpp":27:22)
#loc11 = loc("CWE197_Numeric_Truncation_Error__short_rand_33.cpp":29:13)
#loc12 = loc("CWE197_Numeric_Truncation_Error__short_rand_33.cpp":29:12)
#loc13 = loc("CWE197_Numeric_Truncation_Error__short_rand_33.cpp":29:5)
#loc14 = loc("CWE197_Numeric_Truncation_Error__short_rand_33.cpp":31:19)
#loc15 = loc("CWE197_Numeric_Truncation_Error__short_rand_33.cpp":31:5)
#loc16 = loc("CWE197_Numeric_Truncation_Error__short_rand_33.cpp":32:5)
#loc17 = loc("CWE197_Numeric_Truncation_Error__short_rand_33.cpp":39:5)
#loc18 = loc("CWE197_Numeric_Truncation_Error__short_rand_33.cpp":33:9)
#loc19 = loc("CWE197_Numeric_Truncation_Error__short_rand_33.cpp":33:22)
#loc20 = loc("CWE197_Numeric_Truncation_Error__short_rand_33.cpp":34:9)
#loc21 = loc("CWE197_Numeric_Truncation_Error__short_rand_33.cpp":38:9)
#loc22 = loc("CWE197_Numeric_Truncation_Error__short_rand_33.cpp":36:13)
#loc23 = loc("CWE197_Numeric_Truncation_Error__short_rand_33.cpp":36:35)
#loc24 = loc("CWE197_Numeric_Truncation_Error__short_rand_33.cpp":37:30)
#loc25 = loc("CWE197_Numeric_Truncation_Error__short_rand_33.cpp":37:13)
#loc26 = loc("CWE197_Numeric_Truncation_Error__short_rand_33.cpp":47:1)
#loc27 = loc("CWE197_Numeric_Truncation_Error__short_rand_33.cpp":63:1)
#loc28 = loc("CWE197_Numeric_Truncation_Error__short_rand_33.cpp":49:5)
#loc29 = loc("CWE197_Numeric_Truncation_Error__short_rand_33.cpp":49:11)
#loc30 = loc("CWE197_Numeric_Truncation_Error__short_rand_33.cpp":50:5)
#loc31 = loc("CWE197_Numeric_Truncation_Error__short_rand_33.cpp":50:22)
#loc32 = loc("CWE197_Numeric_Truncation_Error__short_rand_33.cpp":52:13)
#loc33 = loc("CWE197_Numeric_Truncation_Error__short_rand_33.cpp":52:12)
#loc34 = loc("CWE197_Numeric_Truncation_Error__short_rand_33.cpp":52:5)
#loc35 = loc("CWE197_Numeric_Truncation_Error__short_rand_33.cpp":54:12)
#loc36 = loc("CWE197_Numeric_Truncation_Error__short_rand_33.cpp":54:21)
#loc37 = loc("CWE197_Numeric_Truncation_Error__short_rand_33.cpp":54:5)
#loc38 = loc("CWE197_Numeric_Truncation_Error__short_rand_33.cpp":55:5)
#loc39 = loc("CWE197_Numeric_Truncation_Error__short_rand_33.cpp":62:5)
#loc40 = loc("CWE197_Numeric_Truncation_Error__short_rand_33.cpp":56:9)
#loc41 = loc("CWE197_Numeric_Truncation_Error__short_rand_33.cpp":56:22)
#loc42 = loc("CWE197_Numeric_Truncation_Error__short_rand_33.cpp":57:9)
#loc43 = loc("CWE197_Numeric_Truncation_Error__short_rand_33.cpp":61:9)
#loc44 = loc("CWE197_Numeric_Truncation_Error__short_rand_33.cpp":59:13)
#loc45 = loc("CWE197_Numeric_Truncation_Error__short_rand_33.cpp":59:35)
#loc46 = loc("CWE197_Numeric_Truncation_Error__short_rand_33.cpp":60:30)
#loc47 = loc("CWE197_Numeric_Truncation_Error__short_rand_33.cpp":60:13)
#loc48 = loc("CWE197_Numeric_Truncation_Error__short_rand_33.cpp":65:1)
#loc49 = loc("CWE197_Numeric_Truncation_Error__short_rand_33.cpp":68:1)
#loc50 = loc("CWE197_Numeric_Truncation_Error__short_rand_33.cpp":67:5)
#loc51 = loc(fused[#loc1, #loc2])
#loc52 = loc(fused[#loc3, #loc4])
#loc53 = loc(fused[#loc5, #loc6])
#loc54 = loc(fused[#loc7, #loc8])
#loc55 = loc(fused[#loc9, #loc10])
#loc56 = loc(fused[#loc13, #loc11])
#loc57 = loc(fused[#loc15, #loc14])
#loc58 = loc(fused[#loc16, #loc17])
#loc59 = loc(fused[#loc18, #loc19])
#loc60 = loc(fused[#loc20, #loc21])
#loc61 = loc(fused[#loc22, #loc23])
#loc62 = loc(fused[#loc26, #loc27])
#loc63 = loc(fused[#loc28, #loc29])
#loc64 = loc(fused[#loc30, #loc31])
#loc65 = loc(fused[#loc34, #loc32])
#loc66 = loc(fused[#loc37, #loc36])
#loc67 = loc(fused[#loc38, #loc39])
#loc68 = loc(fused[#loc40, #loc41])
#loc69 = loc(fused[#loc42, #loc43])
#loc70 = loc(fused[#loc44, #loc45])
#loc71 = loc(fused[#loc48, #loc49])
