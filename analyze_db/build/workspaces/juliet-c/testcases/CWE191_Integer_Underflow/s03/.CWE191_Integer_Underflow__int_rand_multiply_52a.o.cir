!s32i = !cir.int<s, 32>
!u32i = !cir.int<u, 32>
#fn_attr = #cir<extra({nothrow = #cir.nothrow})>
#fn_attr1 = #cir<extra({inline = #cir.inline<no>, nothrow = #cir.nothrow, optnone = #cir.optnone, uwtable = #cir.uwtable<async>})>
module @"/workspaces/juliet-c/testcases/CWE191_Integer_Underflow/s03/CWE191_Integer_Underflow__int_rand_multiply_52a.c" attributes {cir.lang = #cir.lang<c>, cir.sob = #cir.signed_overflow_behavior<undefined>, cir.triple = "x86_64-unknown-linux-gnu", cir.type_size_info = #cir.type_size_info<char = 8, int = 32, size_t = 64>, cir.uwtable = #cir.uwtable<async>, dlti.dl_spec = #dlti.dl_spec<f128 = dense<128> : vector<2xi64>, !llvm.ptr<271> = dense<32> : vector<4xi64>, f16 = dense<16> : vector<2xi64>, f64 = dense<64> : vector<2xi64>, i128 = dense<128> : vector<2xi64>, !llvm.ptr<272> = dense<64> : vector<4xi64>, i64 = dense<64> : vector<2xi64>, !llvm.ptr = dense<64> : vector<4xi64>, !llvm.ptr<270> = dense<32> : vector<4xi64>, i1 = dense<8> : vector<2xi64>, f80 = dense<128> : vector<2xi64>, i32 = dense<32> : vector<2xi64>, i16 = dense<16> : vector<2xi64>, i8 = dense<8> : vector<2xi64>, "dlti.stack_alignment" = 128 : i64, "dlti.mangling_mode" = "e", "dlti.endianness" = "little">} {
  cir.func private @rand() -> !s32i extra(#fn_attr) loc(#loc46)
  cir.func private @CWE191_Integer_Underflow__int_rand_multiply_52b_badSink(!s32i) loc(#loc47)
  cir.func no_proto @CWE191_Integer_Underflow__int_rand_multiply_52_bad() extra(#fn_attr1) {
    %0 = cir.alloca !s32i, !cir.ptr<!s32i>, ["data"] {alignment = 4 : i64} loc(#loc49)
    %1 = cir.const #cir.int<0> : !s32i loc(#loc9)
    cir.store %1, %0 : !s32i, !cir.ptr<!s32i> loc(#loc50)
    %2 = cir.call @rand() : () -> !s32i extra(#fn_attr) loc(#loc11)
    %3 = cir.const #cir.int<1> : !s32i loc(#loc11)
    %4 = cir.binop(and, %2, %3) : !s32i loc(#loc11)
    %5 = cir.cast(int_to_bool, %4 : !s32i), !cir.bool loc(#loc11)
    %6 = cir.ternary(%5, true {
      %9 = cir.call @rand() : () -> !s32i extra(#fn_attr) loc(#loc11)
      %10 = cir.cast(integral, %9 : !s32i), !u32i loc(#loc11)
      %11 = cir.const #cir.int<30> : !s32i loc(#loc11)
      %12 = cir.shift(left, %10 : !u32i, %11 : !s32i) -> !u32i loc(#loc11)
      %13 = cir.call @rand() : () -> !s32i extra(#fn_attr) loc(#loc11)
      %14 = cir.cast(integral, %13 : !s32i), !u32i loc(#loc11)
      %15 = cir.const #cir.int<15> : !s32i loc(#loc11)
      %16 = cir.shift(left, %14 : !u32i, %15 : !s32i) -> !u32i loc(#loc11)
      %17 = cir.binop(xor, %12, %16) : !u32i loc(#loc11)
      %18 = cir.call @rand() : () -> !s32i extra(#fn_attr) loc(#loc11)
      %19 = cir.cast(integral, %18 : !s32i), !u32i loc(#loc11)
      %20 = cir.binop(xor, %17, %19) : !u32i loc(#loc11)
      cir.yield %20 : !u32i loc(#loc11)
    }, false {
      %9 = cir.call @rand() : () -> !s32i extra(#fn_attr) loc(#loc11)
      %10 = cir.cast(integral, %9 : !s32i), !u32i loc(#loc11)
      %11 = cir.const #cir.int<30> : !s32i loc(#loc11)
      %12 = cir.shift(left, %10 : !u32i, %11 : !s32i) -> !u32i loc(#loc11)
      %13 = cir.call @rand() : () -> !s32i extra(#fn_attr) loc(#loc11)
      %14 = cir.cast(integral, %13 : !s32i), !u32i loc(#loc11)
      %15 = cir.const #cir.int<15> : !s32i loc(#loc11)
      %16 = cir.shift(left, %14 : !u32i, %15 : !s32i) -> !u32i loc(#loc11)
      %17 = cir.binop(xor, %12, %16) : !u32i loc(#loc11)
      %18 = cir.call @rand() : () -> !s32i extra(#fn_attr) loc(#loc11)
      %19 = cir.cast(integral, %18 : !s32i), !u32i loc(#loc11)
      %20 = cir.binop(xor, %17, %19) : !u32i loc(#loc11)
      %21 = cir.unary(minus, %20) : !u32i, !u32i loc(#loc11)
      %22 = cir.const #cir.int<1> : !s32i loc(#loc11)
      %23 = cir.cast(integral, %22 : !s32i), !u32i loc(#loc11)
      %24 = cir.binop(sub, %21, %23) : !u32i loc(#loc11)
      cir.yield %24 : !u32i loc(#loc11)
    }) : (!cir.bool) -> !u32i loc(#loc11)
    %7 = cir.cast(integral, %6 : !u32i), !s32i loc(#loc11)
    cir.store %7, %0 : !s32i, !cir.ptr<!s32i> loc(#loc51)
    %8 = cir.load %0 : !cir.ptr<!s32i>, !s32i loc(#loc13)
    cir.call @CWE191_Integer_Underflow__int_rand_multiply_52b_badSink(%8) : (!s32i) -> () loc(#loc14)
    cir.return loc(#loc6)
  } loc(#loc48)
  cir.func no_proto @CWE191_Integer_Underflow__int_rand_multiply_52_good() extra(#fn_attr1) {
    %0 = cir.get_global @goodG2B : !cir.ptr<!cir.func<()>> loc(#loc53)
    cir.call %0() : (!cir.ptr<!cir.func<()>>) -> () loc(#loc17)
    %1 = cir.get_global @goodB2G : !cir.ptr<!cir.func<()>> loc(#loc54)
    cir.call %1() : (!cir.ptr<!cir.func<()>>) -> () loc(#loc19)
    cir.return loc(#loc16)
  } loc(#loc52)
  cir.func private @CWE191_Integer_Underflow__int_rand_multiply_52b_goodG2BSink(!s32i) loc(#loc55)
  cir.func no_proto internal private @goodG2B() extra(#fn_attr1) {
    %0 = cir.alloca !s32i, !cir.ptr<!s32i>, ["data"] {alignment = 4 : i64} loc(#loc57)
    %1 = cir.const #cir.int<0> : !s32i loc(#loc27)
    cir.store %1, %0 : !s32i, !cir.ptr<!s32i> loc(#loc58)
    %2 = cir.const #cir.int<2> : !s32i loc(#loc29)
    %3 = cir.unary(minus, %2) nsw : !s32i, !s32i loc(#loc30)
    cir.store %3, %0 : !s32i, !cir.ptr<!s32i> loc(#loc59)
    %4 = cir.load %0 : !cir.ptr<!s32i>, !s32i loc(#loc32)
    cir.call @CWE191_Integer_Underflow__int_rand_multiply_52b_goodG2BSink(%4) : (!s32i) -> () loc(#loc33)
    cir.return loc(#loc24)
  } loc(#loc56)
  cir.func private @CWE191_Integer_Underflow__int_rand_multiply_52b_goodB2GSink(!s32i) loc(#loc60)
  cir.func no_proto internal private @goodB2G() extra(#fn_attr1) {
    %0 = cir.alloca !s32i, !cir.ptr<!s32i>, ["data"] {alignment = 4 : i64} loc(#loc62)
    %1 = cir.const #cir.int<0> : !s32i loc(#loc40)
    cir.store %1, %0 : !s32i, !cir.ptr<!s32i> loc(#loc63)
    %2 = cir.call @rand() : () -> !s32i extra(#fn_attr) loc(#loc42)
    %3 = cir.const #cir.int<1> : !s32i loc(#loc42)
    %4 = cir.binop(and, %2, %3) : !s32i loc(#loc42)
    %5 = cir.cast(int_to_bool, %4 : !s32i), !cir.bool loc(#loc42)
    %6 = cir.ternary(%5, true {
      %9 = cir.call @rand() : () -> !s32i extra(#fn_attr) loc(#loc42)
      %10 = cir.cast(integral, %9 : !s32i), !u32i loc(#loc42)
      %11 = cir.const #cir.int<30> : !s32i loc(#loc42)
      %12 = cir.shift(left, %10 : !u32i, %11 : !s32i) -> !u32i loc(#loc42)
      %13 = cir.call @rand() : () -> !s32i extra(#fn_attr) loc(#loc42)
      %14 = cir.cast(integral, %13 : !s32i), !u32i loc(#loc42)
      %15 = cir.const #cir.int<15> : !s32i loc(#loc42)
      %16 = cir.shift(left, %14 : !u32i, %15 : !s32i) -> !u32i loc(#loc42)
      %17 = cir.binop(xor, %12, %16) : !u32i loc(#loc42)
      %18 = cir.call @rand() : () -> !s32i extra(#fn_attr) loc(#loc42)
      %19 = cir.cast(integral, %18 : !s32i), !u32i loc(#loc42)
      %20 = cir.binop(xor, %17, %19) : !u32i loc(#loc42)
      cir.yield %20 : !u32i loc(#loc42)
    }, false {
      %9 = cir.call @rand() : () -> !s32i extra(#fn_attr) loc(#loc42)
      %10 = cir.cast(integral, %9 : !s32i), !u32i loc(#loc42)
      %11 = cir.const #cir.int<30> : !s32i loc(#loc42)
      %12 = cir.shift(left, %10 : !u32i, %11 : !s32i) -> !u32i loc(#loc42)
      %13 = cir.call @rand() : () -> !s32i extra(#fn_attr) loc(#loc42)
      %14 = cir.cast(integral, %13 : !s32i), !u32i loc(#loc42)
      %15 = cir.const #cir.int<15> : !s32i loc(#loc42)
      %16 = cir.shift(left, %14 : !u32i, %15 : !s32i) -> !u32i loc(#loc42)
      %17 = cir.binop(xor, %12, %16) : !u32i loc(#loc42)
      %18 = cir.call @rand() : () -> !s32i extra(#fn_attr) loc(#loc42)
      %19 = cir.cast(integral, %18 : !s32i), !u32i loc(#loc42)
      %20 = cir.binop(xor, %17, %19) : !u32i loc(#loc42)
      %21 = cir.unary(minus, %20) : !u32i, !u32i loc(#loc42)
      %22 = cir.const #cir.int<1> : !s32i loc(#loc42)
      %23 = cir.cast(integral, %22 : !s32i), !u32i loc(#loc42)
      %24 = cir.binop(sub, %21, %23) : !u32i loc(#loc42)
      cir.yield %24 : !u32i loc(#loc42)
    }) : (!cir.bool) -> !u32i loc(#loc42)
    %7 = cir.cast(integral, %6 : !u32i), !s32i loc(#loc42)
    cir.store %7, %0 : !s32i, !cir.ptr<!s32i> loc(#loc64)
    %8 = cir.load %0 : !cir.ptr<!s32i>, !s32i loc(#loc44)
    cir.call @CWE191_Integer_Underflow__int_rand_multiply_52b_goodB2GSink(%8) : (!s32i) -> () loc(#loc45)
    cir.return loc(#loc37)
  } loc(#loc61)
} loc(#loc)
#loc = loc("/workspaces/juliet-c/testcases/CWE191_Integer_Underflow/s03/CWE191_Integer_Underflow__int_rand_multiply_52a.c":0:0)
#loc1 = loc("/usr/include/stdlib.h":573:1)
#loc2 = loc("/usr/include/stdlib.h":573:24)
#loc3 = loc("CWE191_Integer_Underflow__int_rand_multiply_52a.c":23:1)
#loc4 = loc("CWE191_Integer_Underflow__int_rand_multiply_52a.c":23:70)
#loc5 = loc("CWE191_Integer_Underflow__int_rand_multiply_52a.c":25:1)
#loc6 = loc("CWE191_Integer_Underflow__int_rand_multiply_52a.c":33:1)
#loc7 = loc("CWE191_Integer_Underflow__int_rand_multiply_52a.c":27:5)
#loc8 = loc("CWE191_Integer_Underflow__int_rand_multiply_52a.c":27:9)
#loc9 = loc("CWE191_Integer_Underflow__int_rand_multiply_52a.c":29:12)
#loc10 = loc("CWE191_Integer_Underflow__int_rand_multiply_52a.c":29:5)
#loc11 = loc("CWE191_Integer_Underflow__int_rand_multiply_52a.c":31:12)
#loc12 = loc("CWE191_Integer_Underflow__int_rand_multiply_52a.c":31:5)
#loc13 = loc("CWE191_Integer_Underflow__int_rand_multiply_52a.c":32:61)
#loc14 = loc("CWE191_Integer_Underflow__int_rand_multiply_52a.c":32:5)
#loc15 = loc("CWE191_Integer_Underflow__int_rand_multiply_52a.c":65:1)
#loc16 = loc("CWE191_Integer_Underflow__int_rand_multiply_52a.c":69:1)
#loc17 = loc("CWE191_Integer_Underflow__int_rand_multiply_52a.c":67:5)
#loc18 = loc("CWE191_Integer_Underflow__int_rand_multiply_52a.c":67:13)
#loc19 = loc("CWE191_Integer_Underflow__int_rand_multiply_52a.c":68:5)
#loc20 = loc("CWE191_Integer_Underflow__int_rand_multiply_52a.c":68:13)
#loc21 = loc("CWE191_Integer_Underflow__int_rand_multiply_52a.c":40:1)
#loc22 = loc("CWE191_Integer_Underflow__int_rand_multiply_52a.c":40:74)
#loc23 = loc("CWE191_Integer_Underflow__int_rand_multiply_52a.c":42:1)
#loc24 = loc("CWE191_Integer_Underflow__int_rand_multiply_52a.c":50:1)
#loc25 = loc("CWE191_Integer_Underflow__int_rand_multiply_52a.c":44:5)
#loc26 = loc("CWE191_Integer_Underflow__int_rand_multiply_52a.c":44:9)
#loc27 = loc("CWE191_Integer_Underflow__int_rand_multiply_52a.c":46:12)
#loc28 = loc("CWE191_Integer_Underflow__int_rand_multiply_52a.c":46:5)
#loc29 = loc("CWE191_Integer_Underflow__int_rand_multiply_52a.c":48:13)
#loc30 = loc("CWE191_Integer_Underflow__int_rand_multiply_52a.c":48:12)
#loc31 = loc("CWE191_Integer_Underflow__int_rand_multiply_52a.c":48:5)
#loc32 = loc("CWE191_Integer_Underflow__int_rand_multiply_52a.c":49:65)
#loc33 = loc("CWE191_Integer_Underflow__int_rand_multiply_52a.c":49:5)
#loc34 = loc("CWE191_Integer_Underflow__int_rand_multiply_52a.c":53:1)
#loc35 = loc("CWE191_Integer_Underflow__int_rand_multiply_52a.c":53:74)
#loc36 = loc("CWE191_Integer_Underflow__int_rand_multiply_52a.c":55:1)
#loc37 = loc("CWE191_Integer_Underflow__int_rand_multiply_52a.c":63:1)
#loc38 = loc("CWE191_Integer_Underflow__int_rand_multiply_52a.c":57:5)
#loc39 = loc("CWE191_Integer_Underflow__int_rand_multiply_52a.c":57:9)
#loc40 = loc("CWE191_Integer_Underflow__int_rand_multiply_52a.c":59:12)
#loc41 = loc("CWE191_Integer_Underflow__int_rand_multiply_52a.c":59:5)
#loc42 = loc("CWE191_Integer_Underflow__int_rand_multiply_52a.c":61:12)
#loc43 = loc("CWE191_Integer_Underflow__int_rand_multiply_52a.c":61:5)
#loc44 = loc("CWE191_Integer_Underflow__int_rand_multiply_52a.c":62:65)
#loc45 = loc("CWE191_Integer_Underflow__int_rand_multiply_52a.c":62:5)
#loc46 = loc(fused[#loc1, #loc2])
#loc47 = loc(fused[#loc3, #loc4])
#loc48 = loc(fused[#loc5, #loc6])
#loc49 = loc(fused[#loc7, #loc8])
#loc50 = loc(fused[#loc10, #loc9])
#loc51 = loc(fused[#loc12, #loc11])
#loc52 = loc(fused[#loc15, #loc16])
#loc53 = loc(fused[#loc17, #loc18])
#loc54 = loc(fused[#loc19, #loc20])
#loc55 = loc(fused[#loc21, #loc22])
#loc56 = loc(fused[#loc23, #loc24])
#loc57 = loc(fused[#loc25, #loc26])
#loc58 = loc(fused[#loc28, #loc27])
#loc59 = loc(fused[#loc31, #loc29])
#loc60 = loc(fused[#loc34, #loc35])
#loc61 = loc(fused[#loc36, #loc37])
#loc62 = loc(fused[#loc38, #loc39])
#loc63 = loc(fused[#loc41, #loc40])
#loc64 = loc(fused[#loc43, #loc42])
