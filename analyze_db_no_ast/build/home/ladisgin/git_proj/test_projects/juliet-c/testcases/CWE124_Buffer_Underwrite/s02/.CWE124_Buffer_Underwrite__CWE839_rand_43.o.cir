!s32i = !cir.int<s, 32>
!s8i = !cir.int<s, 8>
!u32i = !cir.int<u, 32>
#false = #cir.bool<false> : !cir.bool
#fn_attr = #cir<extra({nothrow = #cir.nothrow})>
#fn_attr1 = #cir<extra({inline = #cir.inline<no>, optnone = #cir.optnone})>
#loc5 = loc("CWE124_Buffer_Underwrite__CWE839_rand_43.cpp":25:23)
#loc6 = loc("CWE124_Buffer_Underwrite__CWE839_rand_43.cpp":25:28)
#loc53 = loc("CWE124_Buffer_Underwrite__CWE839_rand_43.cpp":63:27)
#loc54 = loc("CWE124_Buffer_Underwrite__CWE839_rand_43.cpp":63:32)
#loc97 = loc("CWE124_Buffer_Underwrite__CWE839_rand_43.cpp":98:27)
#loc98 = loc("CWE124_Buffer_Underwrite__CWE839_rand_43.cpp":98:32)
#true = #cir.bool<true> : !cir.bool
#loc149 = loc(fused[#loc5, #loc6])
#loc168 = loc(fused[#loc53, #loc54])
#loc185 = loc(fused[#loc97, #loc98])
module @"/home/ladisgin/git_proj/test_projects/juliet-c/testcases/CWE124_Buffer_Underwrite/s02/CWE124_Buffer_Underwrite__CWE839_rand_43.cpp" attributes {cir.lang = #cir.lang<cxx>, cir.sob = #cir.signed_overflow_behavior<undefined>, cir.triple = "x86_64-unknown-linux-gnu", dlti.dl_spec = #dlti.dl_spec<#dlti.dl_entry<f64, dense<64> : vector<2xi64>>, #dlti.dl_entry<!llvm.ptr<270>, dense<32> : vector<4xi64>>, #dlti.dl_entry<f128, dense<128> : vector<2xi64>>, #dlti.dl_entry<!llvm.ptr<271>, dense<32> : vector<4xi64>>, #dlti.dl_entry<!llvm.ptr<272>, dense<64> : vector<4xi64>>, #dlti.dl_entry<i64, dense<64> : vector<2xi64>>, #dlti.dl_entry<i128, dense<128> : vector<2xi64>>, #dlti.dl_entry<f80, dense<128> : vector<2xi64>>, #dlti.dl_entry<i1, dense<8> : vector<2xi64>>, #dlti.dl_entry<!llvm.ptr, dense<64> : vector<4xi64>>, #dlti.dl_entry<i16, dense<16> : vector<2xi64>>, #dlti.dl_entry<i8, dense<8> : vector<2xi64>>, #dlti.dl_entry<i32, dense<32> : vector<2xi64>>, #dlti.dl_entry<f16, dense<16> : vector<2xi64>>, #dlti.dl_entry<"dlti.stack_alignment", 128 : i64>, #dlti.dl_entry<"dlti.endianness", "little">>, llvm.data_layout = "e-m:e-p270:32:32-p271:32:32-p272:64:64-i64:64-i128:128-f80:128-n8:16:32:64-S128"} {
  cir.func private  @rand() -> !s32i extra(#fn_attr) loc(#loc147)
  cir.func internal private  @_ZN40CWE124_Buffer_Underwrite__CWE839_rand_43L9badSourceERi(%arg0: !cir.ptr<!s32i> loc(fused[#loc5, #loc6])) extra(#fn_attr1) {
    %0 = cir.alloca !cir.ptr<!s32i>, !cir.ptr<!cir.ptr<!s32i>>, ["data", init, const] {alignment = 8 : i64} loc(#loc149)
    cir.store %arg0, %0 : !cir.ptr<!s32i>, !cir.ptr<!cir.ptr<!s32i>> loc(#loc7)
    %1 = cir.call @rand() : () -> !s32i extra(#fn_attr) loc(#loc8)
    %2 = cir.const #cir.int<1> : !s32i loc(#loc8)
    %3 = cir.binop(and, %1, %2) : !s32i loc(#loc8)
    %4 = cir.cast(int_to_bool, %3 : !s32i), !cir.bool loc(#loc8)
    %5 = cir.ternary(%4, true {
      %8 = cir.call @rand() : () -> !s32i extra(#fn_attr) loc(#loc8)
      %9 = cir.cast(integral, %8 : !s32i), !u32i loc(#loc8)
      %10 = cir.const #cir.int<30> : !s32i loc(#loc8)
      %11 = cir.shift(left, %9 : !u32i, %10 : !s32i) -> !u32i loc(#loc8)
      %12 = cir.call @rand() : () -> !s32i extra(#fn_attr) loc(#loc8)
      %13 = cir.cast(integral, %12 : !s32i), !u32i loc(#loc8)
      %14 = cir.const #cir.int<15> : !s32i loc(#loc8)
      %15 = cir.shift(left, %13 : !u32i, %14 : !s32i) -> !u32i loc(#loc8)
      %16 = cir.binop(xor, %11, %15) : !u32i loc(#loc8)
      %17 = cir.call @rand() : () -> !s32i extra(#fn_attr) loc(#loc8)
      %18 = cir.cast(integral, %17 : !s32i), !u32i loc(#loc8)
      %19 = cir.binop(xor, %16, %18) : !u32i loc(#loc8)
      cir.yield %19 : !u32i loc(#loc8)
    }, false {
      %8 = cir.call @rand() : () -> !s32i extra(#fn_attr) loc(#loc8)
      %9 = cir.cast(integral, %8 : !s32i), !u32i loc(#loc8)
      %10 = cir.const #cir.int<30> : !s32i loc(#loc8)
      %11 = cir.shift(left, %9 : !u32i, %10 : !s32i) -> !u32i loc(#loc8)
      %12 = cir.call @rand() : () -> !s32i extra(#fn_attr) loc(#loc8)
      %13 = cir.cast(integral, %12 : !s32i), !u32i loc(#loc8)
      %14 = cir.const #cir.int<15> : !s32i loc(#loc8)
      %15 = cir.shift(left, %13 : !u32i, %14 : !s32i) -> !u32i loc(#loc8)
      %16 = cir.binop(xor, %11, %15) : !u32i loc(#loc8)
      %17 = cir.call @rand() : () -> !s32i extra(#fn_attr) loc(#loc8)
      %18 = cir.cast(integral, %17 : !s32i), !u32i loc(#loc8)
      %19 = cir.binop(xor, %16, %18) : !u32i loc(#loc8)
      %20 = cir.unary(minus, %19) : !u32i, !u32i loc(#loc8)
      %21 = cir.const #cir.int<1> : !s32i loc(#loc8)
      %22 = cir.cast(integral, %21 : !s32i), !u32i loc(#loc8)
      %23 = cir.binop(sub, %20, %22) : !u32i loc(#loc8)
      cir.yield %23 : !u32i loc(#loc8)
    }) : (!cir.bool) -> !u32i loc(#loc8)
    %6 = cir.cast(integral, %5 : !u32i), !s32i loc(#loc8)
    %7 = cir.load %0 : !cir.ptr<!cir.ptr<!s32i>>, !cir.ptr<!s32i> loc(#loc9)
    cir.store %6, %7 : !s32i, !cir.ptr<!s32i> loc(#loc150)
    cir.return loc(#loc4)
  } loc(#loc148)
  cir.func private  @printIntLine(!s32i) loc(#loc151)
  cir.func private  @printLine(!cir.ptr<!s8i>) loc(#loc152)
  cir.global "private"  constant internal dsolocal @".str" = #cir.const_array<"ERROR: Array index is negative.\00" : !cir.array<!s8i x 32>> : !cir.array<!s8i x 32> {alignment = 1 : i64} loc(#loc14)
  cir.func  @_ZN40CWE124_Buffer_Underwrite__CWE839_rand_433badEv() extra(#fn_attr1) {
    %0 = cir.alloca !s32i, !cir.ptr<!s32i>, ["data"] {alignment = 4 : i64} loc(#loc154)
    %1 = cir.const #cir.int<1> : !s32i loc(#loc19)
    %2 = cir.unary(minus, %1) : !s32i, !s32i loc(#loc20)
    cir.store %2, %0 : !s32i, !cir.ptr<!s32i> loc(#loc155)
    cir.call @_ZN40CWE124_Buffer_Underwrite__CWE839_rand_43L9badSourceERi(%0) : (!cir.ptr<!s32i>) -> () loc(#loc22)
    cir.scope {
      %3 = cir.alloca !s32i, !cir.ptr<!s32i>, ["i"] {alignment = 4 : i64} loc(#loc157)
      %4 = cir.alloca !cir.array<!s32i x 10>, !cir.ptr<!cir.array<!s32i x 10>>, ["buffer"] {alignment = 16 : i64} loc(#loc158)
      %5 = cir.const #cir.zero : !cir.array<!s32i x 10> loc(#loc158)
      cir.store %5, %4 : !cir.array<!s32i x 10>, !cir.ptr<!cir.array<!s32i x 10>> loc(#loc158)
      cir.scope {
        %6 = cir.load %0 : !cir.ptr<!s32i>, !s32i loc(#loc31)
        %7 = cir.const #cir.int<10> : !s32i loc(#loc32)
        %8 = cir.cmp(lt, %6, %7) : !s32i, !cir.bool loc(#loc160)
        cir.if %8 {
          %9 = cir.const #cir.int<1> : !s32i loc(#loc36)
          %10 = cir.load %0 : !cir.ptr<!s32i>, !s32i loc(#loc37)
          %11 = cir.cast(array_to_ptrdecay, %4 : !cir.ptr<!cir.array<!s32i x 10>>), !cir.ptr<!s32i> loc(#loc38)
          %12 = cir.ptr_stride(%11 : !cir.ptr<!s32i>, %10 : !s32i), !cir.ptr<!s32i> loc(#loc38)
          cir.store %9, %12 : !s32i, !cir.ptr<!s32i> loc(#loc162)
          cir.scope {
            %13 = cir.const #cir.int<0> : !s32i loc(#loc41)
            cir.store %13, %3 : !s32i, !cir.ptr<!s32i> loc(#loc164)
            cir.for : cond {
              %14 = cir.load %3 : !cir.ptr<!s32i>, !s32i loc(#loc43)
              %15 = cir.const #cir.int<10> : !s32i loc(#loc44)
              %16 = cir.cmp(lt, %14, %15) : !s32i, !cir.bool loc(#loc165)
              cir.condition(%16) loc(#loc165)
            } body {
              %14 = cir.load %3 : !cir.ptr<!s32i>, !s32i loc(#loc45)
              %15 = cir.cast(array_to_ptrdecay, %4 : !cir.ptr<!cir.array<!s32i x 10>>), !cir.ptr<!s32i> loc(#loc46)
              %16 = cir.ptr_stride(%15 : !cir.ptr<!s32i>, %14 : !s32i), !cir.ptr<!s32i> loc(#loc46)
              %17 = cir.load %16 : !cir.ptr<!s32i>, !s32i loc(#loc46)
              cir.call @printIntLine(%17) : (!s32i) -> () loc(#loc47)
              cir.yield loc(#loc40)
            } step {
              %14 = cir.load %3 : !cir.ptr<!s32i>, !s32i loc(#loc48)
              %15 = cir.unary(inc, %14) : !s32i, !s32i loc(#loc49)
              cir.store %15, %3 : !s32i, !cir.ptr<!s32i> loc(#loc166)
              cir.yield loc(#loc163)
            } loc(#loc163)
          } loc(#loc163)
        } else {
          %9 = cir.get_global @".str" : !cir.ptr<!cir.array<!s8i x 32>> loc(#loc14)
          %10 = cir.cast(array_to_ptrdecay, %9 : !cir.ptr<!cir.array<!s8i x 32>>), !cir.ptr<!s8i> loc(#loc14)
          cir.call @printLine(%10) : (!cir.ptr<!s8i>) -> () loc(#loc50)
        } loc(#loc161)
      } loc(#loc159)
    } loc(#loc156)
    cir.return loc(#loc16)
  } loc(#loc153)
  cir.func internal private  @_ZN40CWE124_Buffer_Underwrite__CWE839_rand_43L13goodG2BSourceERi(%arg0: !cir.ptr<!s32i> loc(fused[#loc53, #loc54])) extra(#fn_attr1) {
    %0 = cir.alloca !cir.ptr<!s32i>, !cir.ptr<!cir.ptr<!s32i>>, ["data", init, const] {alignment = 8 : i64} loc(#loc168)
    cir.store %arg0, %0 : !cir.ptr<!s32i>, !cir.ptr<!cir.ptr<!s32i>> loc(#loc55)
    %1 = cir.const #cir.int<7> : !s32i loc(#loc56)
    %2 = cir.load %0 : !cir.ptr<!cir.ptr<!s32i>>, !cir.ptr<!s32i> loc(#loc57)
    cir.store %1, %2 : !s32i, !cir.ptr<!s32i> loc(#loc169)
    cir.return loc(#loc52)
  } loc(#loc167)
  cir.func internal private  @_ZN40CWE124_Buffer_Underwrite__CWE839_rand_43L7goodG2BEv() extra(#fn_attr1) {
    %0 = cir.alloca !s32i, !cir.ptr<!s32i>, ["data"] {alignment = 4 : i64} loc(#loc171)
    %1 = cir.const #cir.int<1> : !s32i loc(#loc62)
    %2 = cir.unary(minus, %1) : !s32i, !s32i loc(#loc63)
    cir.store %2, %0 : !s32i, !cir.ptr<!s32i> loc(#loc172)
    cir.call @_ZN40CWE124_Buffer_Underwrite__CWE839_rand_43L13goodG2BSourceERi(%0) : (!cir.ptr<!s32i>) -> () loc(#loc65)
    cir.scope {
      %3 = cir.alloca !s32i, !cir.ptr<!s32i>, ["i"] {alignment = 4 : i64} loc(#loc174)
      %4 = cir.alloca !cir.array<!s32i x 10>, !cir.ptr<!cir.array<!s32i x 10>>, ["buffer"] {alignment = 16 : i64} loc(#loc175)
      %5 = cir.const #cir.zero : !cir.array<!s32i x 10> loc(#loc175)
      cir.store %5, %4 : !cir.array<!s32i x 10>, !cir.ptr<!cir.array<!s32i x 10>> loc(#loc175)
      cir.scope {
        %6 = cir.load %0 : !cir.ptr<!s32i>, !s32i loc(#loc74)
        %7 = cir.const #cir.int<10> : !s32i loc(#loc75)
        %8 = cir.cmp(lt, %6, %7) : !s32i, !cir.bool loc(#loc177)
        cir.if %8 {
          %9 = cir.const #cir.int<1> : !s32i loc(#loc79)
          %10 = cir.load %0 : !cir.ptr<!s32i>, !s32i loc(#loc80)
          %11 = cir.cast(array_to_ptrdecay, %4 : !cir.ptr<!cir.array<!s32i x 10>>), !cir.ptr<!s32i> loc(#loc81)
          %12 = cir.ptr_stride(%11 : !cir.ptr<!s32i>, %10 : !s32i), !cir.ptr<!s32i> loc(#loc81)
          cir.store %9, %12 : !s32i, !cir.ptr<!s32i> loc(#loc179)
          cir.scope {
            %13 = cir.const #cir.int<0> : !s32i loc(#loc84)
            cir.store %13, %3 : !s32i, !cir.ptr<!s32i> loc(#loc181)
            cir.for : cond {
              %14 = cir.load %3 : !cir.ptr<!s32i>, !s32i loc(#loc86)
              %15 = cir.const #cir.int<10> : !s32i loc(#loc87)
              %16 = cir.cmp(lt, %14, %15) : !s32i, !cir.bool loc(#loc182)
              cir.condition(%16) loc(#loc182)
            } body {
              %14 = cir.load %3 : !cir.ptr<!s32i>, !s32i loc(#loc88)
              %15 = cir.cast(array_to_ptrdecay, %4 : !cir.ptr<!cir.array<!s32i x 10>>), !cir.ptr<!s32i> loc(#loc89)
              %16 = cir.ptr_stride(%15 : !cir.ptr<!s32i>, %14 : !s32i), !cir.ptr<!s32i> loc(#loc89)
              %17 = cir.load %16 : !cir.ptr<!s32i>, !s32i loc(#loc89)
              cir.call @printIntLine(%17) : (!s32i) -> () loc(#loc90)
              cir.yield loc(#loc83)
            } step {
              %14 = cir.load %3 : !cir.ptr<!s32i>, !s32i loc(#loc91)
              %15 = cir.unary(inc, %14) : !s32i, !s32i loc(#loc92)
              cir.store %15, %3 : !s32i, !cir.ptr<!s32i> loc(#loc183)
              cir.yield loc(#loc180)
            } loc(#loc180)
          } loc(#loc180)
        } else {
          %9 = cir.get_global @".str" : !cir.ptr<!cir.array<!s8i x 32>> loc(#loc93)
          %10 = cir.cast(array_to_ptrdecay, %9 : !cir.ptr<!cir.array<!s8i x 32>>), !cir.ptr<!s8i> loc(#loc93)
          cir.call @printLine(%10) : (!cir.ptr<!s8i>) -> () loc(#loc94)
        } loc(#loc178)
      } loc(#loc176)
    } loc(#loc173)
    cir.return loc(#loc59)
  } loc(#loc170)
  cir.func internal private  @_ZN40CWE124_Buffer_Underwrite__CWE839_rand_43L13goodB2GSourceERi(%arg0: !cir.ptr<!s32i> loc(fused[#loc97, #loc98])) extra(#fn_attr1) {
    %0 = cir.alloca !cir.ptr<!s32i>, !cir.ptr<!cir.ptr<!s32i>>, ["data", init, const] {alignment = 8 : i64} loc(#loc185)
    cir.store %arg0, %0 : !cir.ptr<!s32i>, !cir.ptr<!cir.ptr<!s32i>> loc(#loc99)
    %1 = cir.call @rand() : () -> !s32i extra(#fn_attr) loc(#loc100)
    %2 = cir.const #cir.int<1> : !s32i loc(#loc100)
    %3 = cir.binop(and, %1, %2) : !s32i loc(#loc100)
    %4 = cir.cast(int_to_bool, %3 : !s32i), !cir.bool loc(#loc100)
    %5 = cir.ternary(%4, true {
      %8 = cir.call @rand() : () -> !s32i extra(#fn_attr) loc(#loc100)
      %9 = cir.cast(integral, %8 : !s32i), !u32i loc(#loc100)
      %10 = cir.const #cir.int<30> : !s32i loc(#loc100)
      %11 = cir.shift(left, %9 : !u32i, %10 : !s32i) -> !u32i loc(#loc100)
      %12 = cir.call @rand() : () -> !s32i extra(#fn_attr) loc(#loc100)
      %13 = cir.cast(integral, %12 : !s32i), !u32i loc(#loc100)
      %14 = cir.const #cir.int<15> : !s32i loc(#loc100)
      %15 = cir.shift(left, %13 : !u32i, %14 : !s32i) -> !u32i loc(#loc100)
      %16 = cir.binop(xor, %11, %15) : !u32i loc(#loc100)
      %17 = cir.call @rand() : () -> !s32i extra(#fn_attr) loc(#loc100)
      %18 = cir.cast(integral, %17 : !s32i), !u32i loc(#loc100)
      %19 = cir.binop(xor, %16, %18) : !u32i loc(#loc100)
      cir.yield %19 : !u32i loc(#loc100)
    }, false {
      %8 = cir.call @rand() : () -> !s32i extra(#fn_attr) loc(#loc100)
      %9 = cir.cast(integral, %8 : !s32i), !u32i loc(#loc100)
      %10 = cir.const #cir.int<30> : !s32i loc(#loc100)
      %11 = cir.shift(left, %9 : !u32i, %10 : !s32i) -> !u32i loc(#loc100)
      %12 = cir.call @rand() : () -> !s32i extra(#fn_attr) loc(#loc100)
      %13 = cir.cast(integral, %12 : !s32i), !u32i loc(#loc100)
      %14 = cir.const #cir.int<15> : !s32i loc(#loc100)
      %15 = cir.shift(left, %13 : !u32i, %14 : !s32i) -> !u32i loc(#loc100)
      %16 = cir.binop(xor, %11, %15) : !u32i loc(#loc100)
      %17 = cir.call @rand() : () -> !s32i extra(#fn_attr) loc(#loc100)
      %18 = cir.cast(integral, %17 : !s32i), !u32i loc(#loc100)
      %19 = cir.binop(xor, %16, %18) : !u32i loc(#loc100)
      %20 = cir.unary(minus, %19) : !u32i, !u32i loc(#loc100)
      %21 = cir.const #cir.int<1> : !s32i loc(#loc100)
      %22 = cir.cast(integral, %21 : !s32i), !u32i loc(#loc100)
      %23 = cir.binop(sub, %20, %22) : !u32i loc(#loc100)
      cir.yield %23 : !u32i loc(#loc100)
    }) : (!cir.bool) -> !u32i loc(#loc100)
    %6 = cir.cast(integral, %5 : !u32i), !s32i loc(#loc100)
    %7 = cir.load %0 : !cir.ptr<!cir.ptr<!s32i>>, !cir.ptr<!s32i> loc(#loc101)
    cir.store %6, %7 : !s32i, !cir.ptr<!s32i> loc(#loc186)
    cir.return loc(#loc96)
  } loc(#loc184)
  cir.global "private"  constant internal dsolocal @".str1" = #cir.const_array<"ERROR: Array index is out-of-bounds\00" : !cir.array<!s8i x 36>> : !cir.array<!s8i x 36> {alignment = 1 : i64} loc(#loc102)
  cir.func internal private  @_ZN40CWE124_Buffer_Underwrite__CWE839_rand_43L7goodB2GEv() extra(#fn_attr1) {
    %0 = cir.alloca !s32i, !cir.ptr<!s32i>, ["data"] {alignment = 4 : i64} loc(#loc188)
    %1 = cir.const #cir.int<1> : !s32i loc(#loc107)
    %2 = cir.unary(minus, %1) : !s32i, !s32i loc(#loc108)
    cir.store %2, %0 : !s32i, !cir.ptr<!s32i> loc(#loc189)
    cir.call @_ZN40CWE124_Buffer_Underwrite__CWE839_rand_43L13goodB2GSourceERi(%0) : (!cir.ptr<!s32i>) -> () loc(#loc110)
    cir.scope {
      %3 = cir.alloca !s32i, !cir.ptr<!s32i>, ["i"] {alignment = 4 : i64} loc(#loc191)
      %4 = cir.alloca !cir.array<!s32i x 10>, !cir.ptr<!cir.array<!s32i x 10>>, ["buffer"] {alignment = 16 : i64} loc(#loc192)
      %5 = cir.const #cir.zero : !cir.array<!s32i x 10> loc(#loc192)
      cir.store %5, %4 : !cir.array<!s32i x 10>, !cir.ptr<!cir.array<!s32i x 10>> loc(#loc192)
      cir.scope {
        %6 = cir.load %0 : !cir.ptr<!s32i>, !s32i loc(#loc119)
        %7 = cir.const #cir.int<0> : !s32i loc(#loc120)
        %8 = cir.cmp(ge, %6, %7) : !s32i, !cir.bool loc(#loc194)
        %9 = cir.ternary(%8, true {
          %10 = cir.load %0 : !cir.ptr<!s32i>, !s32i loc(#loc122)
          %11 = cir.const #cir.int<10> : !s32i loc(#loc123)
          %12 = cir.cmp(lt, %10, %11) : !s32i, !cir.bool loc(#loc195)
          %13 = cir.ternary(%12, true {
            %14 = cir.const #true loc(#loc121)
            cir.yield %14 : !cir.bool loc(#loc121)
          }, false {
            %14 = cir.const #false loc(#loc121)
            cir.yield %14 : !cir.bool loc(#loc121)
          }) : (!cir.bool) -> !cir.bool loc(#loc121)
          cir.yield %13 : !cir.bool loc(#loc121)
        }, false {
          %10 = cir.const #false loc(#loc121)
          cir.yield %10 : !cir.bool loc(#loc121)
        }) : (!cir.bool) -> !cir.bool loc(#loc121)
        cir.if %9 {
          %10 = cir.const #cir.int<1> : !s32i loc(#loc128)
          %11 = cir.load %0 : !cir.ptr<!s32i>, !s32i loc(#loc129)
          %12 = cir.cast(array_to_ptrdecay, %4 : !cir.ptr<!cir.array<!s32i x 10>>), !cir.ptr<!s32i> loc(#loc130)
          %13 = cir.ptr_stride(%12 : !cir.ptr<!s32i>, %11 : !s32i), !cir.ptr<!s32i> loc(#loc130)
          cir.store %10, %13 : !s32i, !cir.ptr<!s32i> loc(#loc197)
          cir.scope {
            %14 = cir.const #cir.int<0> : !s32i loc(#loc133)
            cir.store %14, %3 : !s32i, !cir.ptr<!s32i> loc(#loc199)
            cir.for : cond {
              %15 = cir.load %3 : !cir.ptr<!s32i>, !s32i loc(#loc135)
              %16 = cir.const #cir.int<10> : !s32i loc(#loc136)
              %17 = cir.cmp(lt, %15, %16) : !s32i, !cir.bool loc(#loc200)
              cir.condition(%17) loc(#loc200)
            } body {
              %15 = cir.load %3 : !cir.ptr<!s32i>, !s32i loc(#loc137)
              %16 = cir.cast(array_to_ptrdecay, %4 : !cir.ptr<!cir.array<!s32i x 10>>), !cir.ptr<!s32i> loc(#loc138)
              %17 = cir.ptr_stride(%16 : !cir.ptr<!s32i>, %15 : !s32i), !cir.ptr<!s32i> loc(#loc138)
              %18 = cir.load %17 : !cir.ptr<!s32i>, !s32i loc(#loc138)
              cir.call @printIntLine(%18) : (!s32i) -> () loc(#loc139)
              cir.yield loc(#loc132)
            } step {
              %15 = cir.load %3 : !cir.ptr<!s32i>, !s32i loc(#loc140)
              %16 = cir.unary(inc, %15) : !s32i, !s32i loc(#loc141)
              cir.store %16, %3 : !s32i, !cir.ptr<!s32i> loc(#loc201)
              cir.yield loc(#loc198)
            } loc(#loc198)
          } loc(#loc198)
        } else {
          %10 = cir.get_global @".str1" : !cir.ptr<!cir.array<!s8i x 36>> loc(#loc102)
          %11 = cir.cast(array_to_ptrdecay, %10 : !cir.ptr<!cir.array<!s8i x 36>>), !cir.ptr<!s8i> loc(#loc102)
          cir.call @printLine(%11) : (!cir.ptr<!s8i>) -> () loc(#loc142)
        } loc(#loc196)
      } loc(#loc193)
    } loc(#loc190)
    cir.return loc(#loc104)
  } loc(#loc187)
  cir.func  @_ZN40CWE124_Buffer_Underwrite__CWE839_rand_434goodEv() extra(#fn_attr1) {
    cir.call @_ZN40CWE124_Buffer_Underwrite__CWE839_rand_43L7goodG2BEv() : () -> () loc(#loc145)
    cir.call @_ZN40CWE124_Buffer_Underwrite__CWE839_rand_43L7goodB2GEv() : () -> () loc(#loc146)
    cir.return loc(#loc144)
  } loc(#loc202)
} loc(#loc)
#loc = loc("/home/ladisgin/git_proj/test_projects/juliet-c/testcases/CWE124_Buffer_Underwrite/s02/CWE124_Buffer_Underwrite__CWE839_rand_43.cpp":0:0)
#loc1 = loc("/usr/include/stdlib.h":573:1)
#loc2 = loc("/usr/include/stdlib.h":573:24)
#loc3 = loc("CWE124_Buffer_Underwrite__CWE839_rand_43.cpp":25:1)
#loc4 = loc("CWE124_Buffer_Underwrite__CWE839_rand_43.cpp":29:1)
#loc7 = loc("CWE124_Buffer_Underwrite__CWE839_rand_43.cpp":26:1)
#loc8 = loc("CWE124_Buffer_Underwrite__CWE839_rand_43.cpp":28:12)
#loc9 = loc("CWE124_Buffer_Underwrite__CWE839_rand_43.cpp":28:5)
#loc10 = loc("../../../testcasesupport/std_testcase_io.h":18:1)
#loc11 = loc("../../../testcasesupport/std_testcase_io.h":18:33)
#loc12 = loc("../../../testcasesupport/std_testcase_io.h":14:1)
#loc13 = loc("../../../testcasesupport/std_testcase_io.h":14:33)
#loc14 = loc("CWE124_Buffer_Underwrite__CWE839_rand_43.cpp":53:23)
#loc15 = loc("CWE124_Buffer_Underwrite__CWE839_rand_43.cpp":31:1)
#loc16 = loc("CWE124_Buffer_Underwrite__CWE839_rand_43.cpp":56:1)
#loc17 = loc("CWE124_Buffer_Underwrite__CWE839_rand_43.cpp":33:5)
#loc18 = loc("CWE124_Buffer_Underwrite__CWE839_rand_43.cpp":33:9)
#loc19 = loc("CWE124_Buffer_Underwrite__CWE839_rand_43.cpp":35:13)
#loc20 = loc("CWE124_Buffer_Underwrite__CWE839_rand_43.cpp":35:12)
#loc21 = loc("CWE124_Buffer_Underwrite__CWE839_rand_43.cpp":35:5)
#loc22 = loc("CWE124_Buffer_Underwrite__CWE839_rand_43.cpp":36:5)
#loc23 = loc("CWE124_Buffer_Underwrite__CWE839_rand_43.cpp":37:5)
#loc24 = loc("CWE124_Buffer_Underwrite__CWE839_rand_43.cpp":55:5)
#loc25 = loc("CWE124_Buffer_Underwrite__CWE839_rand_43.cpp":38:9)
#loc26 = loc("CWE124_Buffer_Underwrite__CWE839_rand_43.cpp":38:13)
#loc27 = loc("CWE124_Buffer_Underwrite__CWE839_rand_43.cpp":39:9)
#loc28 = loc("CWE124_Buffer_Underwrite__CWE839_rand_43.cpp":39:30)
#loc29 = loc("CWE124_Buffer_Underwrite__CWE839_rand_43.cpp":42:9)
#loc30 = loc("CWE124_Buffer_Underwrite__CWE839_rand_43.cpp":54:9)
#loc31 = loc("CWE124_Buffer_Underwrite__CWE839_rand_43.cpp":42:13)
#loc32 = loc("CWE124_Buffer_Underwrite__CWE839_rand_43.cpp":42:20)
#loc33 = loc("CWE124_Buffer_Underwrite__CWE839_rand_43.cpp":43:9)
#loc34 = loc("CWE124_Buffer_Underwrite__CWE839_rand_43.cpp":50:9)
#loc35 = loc("CWE124_Buffer_Underwrite__CWE839_rand_43.cpp":52:9)
#loc36 = loc("CWE124_Buffer_Underwrite__CWE839_rand_43.cpp":44:28)
#loc37 = loc("CWE124_Buffer_Underwrite__CWE839_rand_43.cpp":44:20)
#loc38 = loc("CWE124_Buffer_Underwrite__CWE839_rand_43.cpp":44:13)
#loc39 = loc("CWE124_Buffer_Underwrite__CWE839_rand_43.cpp":46:13)
#loc40 = loc("CWE124_Buffer_Underwrite__CWE839_rand_43.cpp":49:13)
#loc41 = loc("CWE124_Buffer_Underwrite__CWE839_rand_43.cpp":46:21)
#loc42 = loc("CWE124_Buffer_Underwrite__CWE839_rand_43.cpp":46:17)
#loc43 = loc("CWE124_Buffer_Underwrite__CWE839_rand_43.cpp":46:24)
#loc44 = loc("CWE124_Buffer_Underwrite__CWE839_rand_43.cpp":46:28)
#loc45 = loc("CWE124_Buffer_Underwrite__CWE839_rand_43.cpp":48:37)
#loc46 = loc("CWE124_Buffer_Underwrite__CWE839_rand_43.cpp":48:30)
#loc47 = loc("CWE124_Buffer_Underwrite__CWE839_rand_43.cpp":48:17)
#loc48 = loc("CWE124_Buffer_Underwrite__CWE839_rand_43.cpp":46:33)
#loc49 = loc("CWE124_Buffer_Underwrite__CWE839_rand_43.cpp":46:32)
#loc50 = loc("CWE124_Buffer_Underwrite__CWE839_rand_43.cpp":53:13)
#loc51 = loc("CWE124_Buffer_Underwrite__CWE839_rand_43.cpp":63:1)
#loc52 = loc("CWE124_Buffer_Underwrite__CWE839_rand_43.cpp":68:1)
#loc55 = loc("CWE124_Buffer_Underwrite__CWE839_rand_43.cpp":64:1)
#loc56 = loc("CWE124_Buffer_Underwrite__CWE839_rand_43.cpp":67:12)
#loc57 = loc("CWE124_Buffer_Underwrite__CWE839_rand_43.cpp":67:5)
#loc58 = loc("CWE124_Buffer_Underwrite__CWE839_rand_43.cpp":70:1)
#loc59 = loc("CWE124_Buffer_Underwrite__CWE839_rand_43.cpp":95:1)
#loc60 = loc("CWE124_Buffer_Underwrite__CWE839_rand_43.cpp":72:5)
#loc61 = loc("CWE124_Buffer_Underwrite__CWE839_rand_43.cpp":72:9)
#loc62 = loc("CWE124_Buffer_Underwrite__CWE839_rand_43.cpp":74:13)
#loc63 = loc("CWE124_Buffer_Underwrite__CWE839_rand_43.cpp":74:12)
#loc64 = loc("CWE124_Buffer_Underwrite__CWE839_rand_43.cpp":74:5)
#loc65 = loc("CWE124_Buffer_Underwrite__CWE839_rand_43.cpp":75:5)
#loc66 = loc("CWE124_Buffer_Underwrite__CWE839_rand_43.cpp":76:5)
#loc67 = loc("CWE124_Buffer_Underwrite__CWE839_rand_43.cpp":94:5)
#loc68 = loc("CWE124_Buffer_Underwrite__CWE839_rand_43.cpp":77:9)
#loc69 = loc("CWE124_Buffer_Underwrite__CWE839_rand_43.cpp":77:13)
#loc70 = loc("CWE124_Buffer_Underwrite__CWE839_rand_43.cpp":78:9)
#loc71 = loc("CWE124_Buffer_Underwrite__CWE839_rand_43.cpp":78:30)
#loc72 = loc("CWE124_Buffer_Underwrite__CWE839_rand_43.cpp":81:9)
#loc73 = loc("CWE124_Buffer_Underwrite__CWE839_rand_43.cpp":93:9)
#loc74 = loc("CWE124_Buffer_Underwrite__CWE839_rand_43.cpp":81:13)
#loc75 = loc("CWE124_Buffer_Underwrite__CWE839_rand_43.cpp":81:20)
#loc76 = loc("CWE124_Buffer_Underwrite__CWE839_rand_43.cpp":82:9)
#loc77 = loc("CWE124_Buffer_Underwrite__CWE839_rand_43.cpp":89:9)
#loc78 = loc("CWE124_Buffer_Underwrite__CWE839_rand_43.cpp":91:9)
#loc79 = loc("CWE124_Buffer_Underwrite__CWE839_rand_43.cpp":83:28)
#loc80 = loc("CWE124_Buffer_Underwrite__CWE839_rand_43.cpp":83:20)
#loc81 = loc("CWE124_Buffer_Underwrite__CWE839_rand_43.cpp":83:13)
#loc82 = loc("CWE124_Buffer_Underwrite__CWE839_rand_43.cpp":85:13)
#loc83 = loc("CWE124_Buffer_Underwrite__CWE839_rand_43.cpp":88:13)
#loc84 = loc("CWE124_Buffer_Underwrite__CWE839_rand_43.cpp":85:21)
#loc85 = loc("CWE124_Buffer_Underwrite__CWE839_rand_43.cpp":85:17)
#loc86 = loc("CWE124_Buffer_Underwrite__CWE839_rand_43.cpp":85:24)
#loc87 = loc("CWE124_Buffer_Underwrite__CWE839_rand_43.cpp":85:28)
#loc88 = loc("CWE124_Buffer_Underwrite__CWE839_rand_43.cpp":87:37)
#loc89 = loc("CWE124_Buffer_Underwrite__CWE839_rand_43.cpp":87:30)
#loc90 = loc("CWE124_Buffer_Underwrite__CWE839_rand_43.cpp":87:17)
#loc91 = loc("CWE124_Buffer_Underwrite__CWE839_rand_43.cpp":85:33)
#loc92 = loc("CWE124_Buffer_Underwrite__CWE839_rand_43.cpp":85:32)
#loc93 = loc("CWE124_Buffer_Underwrite__CWE839_rand_43.cpp":92:23)
#loc94 = loc("CWE124_Buffer_Underwrite__CWE839_rand_43.cpp":92:13)
#loc95 = loc("CWE124_Buffer_Underwrite__CWE839_rand_43.cpp":98:1)
#loc96 = loc("CWE124_Buffer_Underwrite__CWE839_rand_43.cpp":102:1)
#loc99 = loc("CWE124_Buffer_Underwrite__CWE839_rand_43.cpp":99:1)
#loc100 = loc("CWE124_Buffer_Underwrite__CWE839_rand_43.cpp":101:12)
#loc101 = loc("CWE124_Buffer_Underwrite__CWE839_rand_43.cpp":101:5)
#loc102 = loc("CWE124_Buffer_Underwrite__CWE839_rand_43.cpp":125:23)
#loc103 = loc("CWE124_Buffer_Underwrite__CWE839_rand_43.cpp":104:1)
#loc104 = loc("CWE124_Buffer_Underwrite__CWE839_rand_43.cpp":128:1)
#loc105 = loc("CWE124_Buffer_Underwrite__CWE839_rand_43.cpp":106:5)
#loc106 = loc("CWE124_Buffer_Underwrite__CWE839_rand_43.cpp":106:9)
#loc107 = loc("CWE124_Buffer_Underwrite__CWE839_rand_43.cpp":108:13)
#loc108 = loc("CWE124_Buffer_Underwrite__CWE839_rand_43.cpp":108:12)
#loc109 = loc("CWE124_Buffer_Underwrite__CWE839_rand_43.cpp":108:5)
#loc110 = loc("CWE124_Buffer_Underwrite__CWE839_rand_43.cpp":109:5)
#loc111 = loc("CWE124_Buffer_Underwrite__CWE839_rand_43.cpp":110:5)
#loc112 = loc("CWE124_Buffer_Underwrite__CWE839_rand_43.cpp":127:5)
#loc113 = loc("CWE124_Buffer_Underwrite__CWE839_rand_43.cpp":111:9)
#loc114 = loc("CWE124_Buffer_Underwrite__CWE839_rand_43.cpp":111:13)
#loc115 = loc("CWE124_Buffer_Underwrite__CWE839_rand_43.cpp":112:9)
#loc116 = loc("CWE124_Buffer_Underwrite__CWE839_rand_43.cpp":112:30)
#loc117 = loc("CWE124_Buffer_Underwrite__CWE839_rand_43.cpp":114:9)
#loc118 = loc("CWE124_Buffer_Underwrite__CWE839_rand_43.cpp":126:9)
#loc119 = loc("CWE124_Buffer_Underwrite__CWE839_rand_43.cpp":114:13)
#loc120 = loc("CWE124_Buffer_Underwrite__CWE839_rand_43.cpp":114:21)
#loc121 = loc("CWE124_Buffer_Underwrite__CWE839_rand_43.cpp":114:23)
#loc122 = loc("CWE124_Buffer_Underwrite__CWE839_rand_43.cpp":114:26)
#loc123 = loc("CWE124_Buffer_Underwrite__CWE839_rand_43.cpp":114:34)
#loc124 = loc("CWE124_Buffer_Underwrite__CWE839_rand_43.cpp":114:36)
#loc125 = loc("CWE124_Buffer_Underwrite__CWE839_rand_43.cpp":115:9)
#loc126 = loc("CWE124_Buffer_Underwrite__CWE839_rand_43.cpp":122:9)
#loc127 = loc("CWE124_Buffer_Underwrite__CWE839_rand_43.cpp":124:9)
#loc128 = loc("CWE124_Buffer_Underwrite__CWE839_rand_43.cpp":116:28)
#loc129 = loc("CWE124_Buffer_Underwrite__CWE839_rand_43.cpp":116:20)
#loc130 = loc("CWE124_Buffer_Underwrite__CWE839_rand_43.cpp":116:13)
#loc131 = loc("CWE124_Buffer_Underwrite__CWE839_rand_43.cpp":118:13)
#loc132 = loc("CWE124_Buffer_Underwrite__CWE839_rand_43.cpp":121:13)
#loc133 = loc("CWE124_Buffer_Underwrite__CWE839_rand_43.cpp":118:21)
#loc134 = loc("CWE124_Buffer_Underwrite__CWE839_rand_43.cpp":118:17)
#loc135 = loc("CWE124_Buffer_Underwrite__CWE839_rand_43.cpp":118:24)
#loc136 = loc("CWE124_Buffer_Underwrite__CWE839_rand_43.cpp":118:28)
#loc137 = loc("CWE124_Buffer_Underwrite__CWE839_rand_43.cpp":120:37)
#loc138 = loc("CWE124_Buffer_Underwrite__CWE839_rand_43.cpp":120:30)
#loc139 = loc("CWE124_Buffer_Underwrite__CWE839_rand_43.cpp":120:17)
#loc140 = loc("CWE124_Buffer_Underwrite__CWE839_rand_43.cpp":118:33)
#loc141 = loc("CWE124_Buffer_Underwrite__CWE839_rand_43.cpp":118:32)
#loc142 = loc("CWE124_Buffer_Underwrite__CWE839_rand_43.cpp":125:13)
#loc143 = loc("CWE124_Buffer_Underwrite__CWE839_rand_43.cpp":130:1)
#loc144 = loc("CWE124_Buffer_Underwrite__CWE839_rand_43.cpp":134:1)
#loc145 = loc("CWE124_Buffer_Underwrite__CWE839_rand_43.cpp":132:5)
#loc146 = loc("CWE124_Buffer_Underwrite__CWE839_rand_43.cpp":133:5)
#loc147 = loc(fused[#loc1, #loc2])
#loc148 = loc(fused[#loc3, #loc4])
#loc150 = loc(fused[#loc9, #loc8])
#loc151 = loc(fused[#loc10, #loc11])
#loc152 = loc(fused[#loc12, #loc13])
#loc153 = loc(fused[#loc15, #loc16])
#loc154 = loc(fused[#loc17, #loc18])
#loc155 = loc(fused[#loc21, #loc19])
#loc156 = loc(fused[#loc23, #loc24])
#loc157 = loc(fused[#loc25, #loc26])
#loc158 = loc(fused[#loc27, #loc28])
#loc159 = loc(fused[#loc29, #loc30])
#loc160 = loc(fused[#loc31, #loc32])
#loc161 = loc(fused[#loc33, #loc34, #loc35, #loc30])
#loc162 = loc(fused[#loc38, #loc36])
#loc163 = loc(fused[#loc39, #loc40])
#loc164 = loc(fused[#loc42, #loc41])
#loc165 = loc(fused[#loc43, #loc44])
#loc166 = loc(fused[#loc49, #loc48])
#loc167 = loc(fused[#loc51, #loc52])
#loc169 = loc(fused[#loc57, #loc56])
#loc170 = loc(fused[#loc58, #loc59])
#loc171 = loc(fused[#loc60, #loc61])
#loc172 = loc(fused[#loc64, #loc62])
#loc173 = loc(fused[#loc66, #loc67])
#loc174 = loc(fused[#loc68, #loc69])
#loc175 = loc(fused[#loc70, #loc71])
#loc176 = loc(fused[#loc72, #loc73])
#loc177 = loc(fused[#loc74, #loc75])
#loc178 = loc(fused[#loc76, #loc77, #loc78, #loc73])
#loc179 = loc(fused[#loc81, #loc79])
#loc180 = loc(fused[#loc82, #loc83])
#loc181 = loc(fused[#loc85, #loc84])
#loc182 = loc(fused[#loc86, #loc87])
#loc183 = loc(fused[#loc92, #loc91])
#loc184 = loc(fused[#loc95, #loc96])
#loc186 = loc(fused[#loc101, #loc100])
#loc187 = loc(fused[#loc103, #loc104])
#loc188 = loc(fused[#loc105, #loc106])
#loc189 = loc(fused[#loc109, #loc107])
#loc190 = loc(fused[#loc111, #loc112])
#loc191 = loc(fused[#loc113, #loc114])
#loc192 = loc(fused[#loc115, #loc116])
#loc193 = loc(fused[#loc117, #loc118])
#loc194 = loc(fused[#loc119, #loc120])
#loc195 = loc(fused[#loc122, #loc124])
#loc196 = loc(fused[#loc125, #loc126, #loc127, #loc118])
#loc197 = loc(fused[#loc130, #loc128])
#loc198 = loc(fused[#loc131, #loc132])
#loc199 = loc(fused[#loc134, #loc133])
#loc200 = loc(fused[#loc135, #loc136])
#loc201 = loc(fused[#loc141, #loc140])
#loc202 = loc(fused[#loc143, #loc144])
