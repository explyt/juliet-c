!s32i = !cir.int<s, 32>
!s8i = !cir.int<s, 8>
!u64i = !cir.int<u, 64>
!void = !cir.void
#fn_attr = #cir<extra({nothrow = #cir.nothrow})>
#fn_attr1 = #cir<extra({inline = #cir.inline<no>, nothrow = #cir.nothrow, optnone = #cir.optnone, uwtable = #cir.uwtable<async>})>
#loc9 = loc("CWE122_Heap_Based_Buffer_Overflow__c_src_char_cat_21.c":26:25)
#loc10 = loc("CWE122_Heap_Based_Buffer_Overflow__c_src_char_cat_21.c":26:32)
#loc81 = loc("CWE122_Heap_Based_Buffer_Overflow__c_src_char_cat_21.c":62:30)
#loc82 = loc("CWE122_Heap_Based_Buffer_Overflow__c_src_char_cat_21.c":62:37)
#loc143 = loc("CWE122_Heap_Based_Buffer_Overflow__c_src_char_cat_21.c":95:30)
#loc144 = loc("CWE122_Heap_Based_Buffer_Overflow__c_src_char_cat_21.c":95:37)
#loc202 = loc(fused[#loc9, #loc10])
#loc229 = loc(fused[#loc81, #loc82])
#loc250 = loc(fused[#loc143, #loc144])
module @"/workspaces/juliet-c/testcases/CWE122_Heap_Based_Buffer_Overflow/s10/CWE122_Heap_Based_Buffer_Overflow__c_src_char_cat_21.c" attributes {cir.lang = #cir.lang<c>, cir.sob = #cir.signed_overflow_behavior<undefined>, cir.triple = "x86_64-unknown-linux-gnu", cir.type_size_info = #cir.type_size_info<char = 8, int = 32, size_t = 64>, cir.uwtable = #cir.uwtable<async>, dlti.dl_spec = #dlti.dl_spec<i1 = dense<8> : vector<2xi64>, !llvm.ptr = dense<64> : vector<4xi64>, i8 = dense<8> : vector<2xi64>, i16 = dense<16> : vector<2xi64>, i32 = dense<32> : vector<2xi64>, f64 = dense<64> : vector<2xi64>, f16 = dense<16> : vector<2xi64>, !llvm.ptr<270> = dense<32> : vector<4xi64>, f128 = dense<128> : vector<2xi64>, !llvm.ptr<271> = dense<32> : vector<4xi64>, !llvm.ptr<272> = dense<64> : vector<4xi64>, i64 = dense<64> : vector<2xi64>, i128 = dense<128> : vector<2xi64>, f80 = dense<128> : vector<2xi64>, "dlti.endianness" = "little", "dlti.mangling_mode" = "e", "dlti.stack_alignment" = 128 : i64>} {
  cir.func private @malloc(!u64i) -> !cir.ptr<!void> extra(#fn_attr) loc(#loc198)
  cir.func private @exit(!s32i) extra(#fn_attr) loc(#loc199)
  cir.global "private" internal dsolocal @badStatic = #cir.int<0> : !s32i {alignment = 4 : i64} loc(#loc200)
  cir.func internal private @badSource(%arg0: !cir.ptr<!s8i> loc(fused[#loc9, #loc10])) -> !cir.ptr<!s8i> extra(#fn_attr1) {
    %0 = cir.alloca !cir.ptr<!s8i>, !cir.ptr<!cir.ptr<!s8i>>, ["data", init] {alignment = 8 : i64} loc(#loc202)
    %1 = cir.alloca !cir.ptr<!s8i>, !cir.ptr<!cir.ptr<!s8i>>, ["__retval"] {alignment = 8 : i64} loc(#loc8)
    cir.store %arg0, %0 : !cir.ptr<!s8i>, !cir.ptr<!cir.ptr<!s8i>> loc(#loc11)
    cir.scope {
      %4 = cir.get_global @badStatic : !cir.ptr<!s32i> loc(#loc200)
      %5 = cir.load %4 : !cir.ptr<!s32i>, !s32i loc(#loc14)
      %6 = cir.cast(int_to_bool, %5 : !s32i), !cir.bool loc(#loc14)
      cir.if %6 {
        %7 = cir.load %0 : !cir.ptr<!cir.ptr<!s8i>>, !cir.ptr<!s8i> loc(#loc16)
        %8 = cir.cast(bitcast, %7 : !cir.ptr<!s8i>), !cir.ptr<!void> loc(#loc16)
        %9 = cir.const #cir.int<65> : !s32i loc(#loc17)
        %10 = cir.const #cir.int<100> : !s32i loc(#loc18)
        %11 = cir.const #cir.int<1> : !s32i loc(#loc19)
        %12 = cir.binop(sub, %10, %11) nsw : !s32i loc(#loc18)
        %13 = cir.cast(integral, %12 : !s32i), !u64i loc(#loc18)
        cir.libc.memset %13 bytes from %8 set to %9 : !cir.ptr<!void>, !s32i, !u64i loc(#loc205)
        %14 = cir.const #cir.int<0> : !s32i loc(#loc22)
        %15 = cir.cast(integral, %14 : !s32i), !s8i loc(#loc22)
        %16 = cir.load %0 : !cir.ptr<!cir.ptr<!s8i>>, !cir.ptr<!s8i> loc(#loc23)
        %17 = cir.const #cir.int<100> : !s32i loc(#loc24)
        %18 = cir.const #cir.int<1> : !s32i loc(#loc25)
        %19 = cir.binop(sub, %17, %18) nsw : !s32i loc(#loc24)
        %20 = cir.ptr_stride(%16 : !cir.ptr<!s8i>, %19 : !s32i), !cir.ptr<!s8i> loc(#loc26)
        cir.store %15, %20 : !s8i, !cir.ptr<!s8i> loc(#loc206)
      } loc(#loc204)
    } loc(#loc203)
    %2 = cir.load %0 : !cir.ptr<!cir.ptr<!s8i>>, !cir.ptr<!s8i> loc(#loc27)
    cir.store %2, %1 : !cir.ptr<!s8i>, !cir.ptr<!cir.ptr<!s8i>> loc(#loc207)
    %3 = cir.load %1 : !cir.ptr<!cir.ptr<!s8i>>, !cir.ptr<!s8i> loc(#loc207)
    cir.return %3 : !cir.ptr<!s8i> loc(#loc207)
  } loc(#loc201)
  cir.func private @strcat(!cir.ptr<!s8i>, !cir.ptr<!s8i>) -> !cir.ptr<!s8i> extra(#fn_attr) loc(#loc208)
  cir.func private @printLine(!cir.ptr<!s8i>) loc(#loc209)
  cir.func private @free(!cir.ptr<!void>) extra(#fn_attr) loc(#loc210)
  cir.func no_proto @CWE122_Heap_Based_Buffer_Overflow__c_src_char_cat_21_bad() extra(#fn_attr1) {
    %0 = cir.alloca !cir.ptr<!s8i>, !cir.ptr<!cir.ptr<!s8i>>, ["data"] {alignment = 8 : i64} loc(#loc212)
    %1 = cir.get_global @malloc : !cir.ptr<!cir.func<(!u64i) -> !cir.ptr<!void>>> loc(#loc39)
    %2 = cir.const #cir.int<100> : !s32i loc(#loc40)
    %3 = cir.cast(integral, %2 : !s32i), !u64i loc(#loc40)
    %4 = cir.const #cir.int<1> : !u64i loc(#loc213)
    %5 = cir.binop(mul, %3, %4) : !u64i loc(#loc214)
    %6 = cir.call @malloc(%5) : (!u64i) -> !cir.ptr<!void> extra(#fn_attr) loc(#loc39)
    %7 = cir.cast(bitcast, %6 : !cir.ptr<!void>), !cir.ptr<!s8i> loc(#loc215)
    cir.store %7, %0 : !cir.ptr<!s8i>, !cir.ptr<!cir.ptr<!s8i>> loc(#loc216)
    cir.scope {
      %12 = cir.load %0 : !cir.ptr<!cir.ptr<!s8i>>, !cir.ptr<!s8i> loc(#loc47)
      %13 = cir.const #cir.ptr<null> : !cir.ptr<!void> loc(#loc48)
      %14 = cir.cast(bitcast, %13 : !cir.ptr<!void>), !cir.ptr<!s8i> loc(#loc48)
      %15 = cir.cmp(eq, %12, %14) : !cir.ptr<!s8i>, !cir.bool loc(#loc218)
      cir.if %15 {
        %16 = cir.get_global @exit : !cir.ptr<!cir.func<(!s32i)>> loc(#loc50)
        %17 = cir.const #cir.int<1> : !s32i loc(#loc51)
        %18 = cir.unary(minus, %17) nsw : !s32i, !s32i loc(#loc52)
        cir.call @exit(%18) : (!s32i) -> () extra(#fn_attr) loc(#loc50)
      } loc(#loc219)
    } loc(#loc217)
    %8 = cir.const #cir.int<1> : !s32i loc(#loc53)
    %9 = cir.get_global @badStatic : !cir.ptr<!s32i> loc(#loc200)
    cir.store %8, %9 : !s32i, !cir.ptr<!s32i> loc(#loc220)
    %10 = cir.load %0 : !cir.ptr<!cir.ptr<!s8i>>, !cir.ptr<!s8i> loc(#loc55)
    %11 = cir.call @badSource(%10) : (!cir.ptr<!s8i>) -> !cir.ptr<!s8i> loc(#loc56)
    cir.store %11, %0 : !cir.ptr<!s8i>, !cir.ptr<!cir.ptr<!s8i>> loc(#loc221)
    cir.scope {
      %12 = cir.alloca !cir.array<!s8i x 50>, !cir.ptr<!cir.array<!s8i x 50>>, ["dest"] {alignment = 16 : i64} loc(#loc223)
      %13 = cir.const #cir.zero : !cir.array<!s8i x 50> loc(#loc223)
      cir.store %13, %12 : !cir.array<!s8i x 50>, !cir.ptr<!cir.array<!s8i x 50>> loc(#loc223)
      %14 = cir.get_global @strcat : !cir.ptr<!cir.func<(!cir.ptr<!s8i>, !cir.ptr<!s8i>) -> !cir.ptr<!s8i>>> loc(#loc63)
      %15 = cir.cast(array_to_ptrdecay, %12 : !cir.ptr<!cir.array<!s8i x 50>>), !cir.ptr<!s8i> loc(#loc64)
      %16 = cir.load %0 : !cir.ptr<!cir.ptr<!s8i>>, !cir.ptr<!s8i> loc(#loc65)
      %17 = cir.call @strcat(%15, %16) : (!cir.ptr<!s8i>, !cir.ptr<!s8i>) -> !cir.ptr<!s8i> extra(#fn_attr) loc(#loc63)
      %18 = cir.load %0 : !cir.ptr<!cir.ptr<!s8i>>, !cir.ptr<!s8i> loc(#loc66)
      cir.call @printLine(%18) : (!cir.ptr<!s8i>) -> () loc(#loc67)
      %19 = cir.get_global @free : !cir.ptr<!cir.func<(!cir.ptr<!void>)>> loc(#loc68)
      %20 = cir.load %0 : !cir.ptr<!cir.ptr<!s8i>>, !cir.ptr<!s8i> loc(#loc69)
      %21 = cir.cast(bitcast, %20 : !cir.ptr<!s8i>), !cir.ptr<!void> loc(#loc69)
      cir.call @free(%21) : (!cir.ptr<!void>) -> () extra(#fn_attr) loc(#loc68)
    } loc(#loc222)
    cir.return loc(#loc36)
  } loc(#loc211)
  cir.func no_proto @CWE122_Heap_Based_Buffer_Overflow__c_src_char_cat_21_good() extra(#fn_attr1) {
    %0 = cir.get_global @goodG2B1 : !cir.ptr<!cir.func<()>> loc(#loc225)
    cir.call %0() : (!cir.ptr<!cir.func<()>>) -> () loc(#loc72)
    %1 = cir.get_global @goodG2B2 : !cir.ptr<!cir.func<()>> loc(#loc226)
    cir.call %1() : (!cir.ptr<!cir.func<()>>) -> () loc(#loc74)
    cir.return loc(#loc71)
  } loc(#loc224)
  cir.global "private" internal dsolocal @goodG2B1Static = #cir.int<0> : !s32i {alignment = 4 : i64} loc(#loc227)
  cir.global "private" constant cir_private dsolocal @".str" = #cir.const_array<"Benign, fixed string\00" : !cir.array<!s8i x 21>> : !cir.array<!s8i x 21> {alignment = 1 : i64} loc(#loc78)
  cir.func internal private @goodG2B1Source(%arg0: !cir.ptr<!s8i> loc(fused[#loc81, #loc82])) -> !cir.ptr<!s8i> extra(#fn_attr1) {
    %0 = cir.alloca !cir.ptr<!s8i>, !cir.ptr<!cir.ptr<!s8i>>, ["data", init] {alignment = 8 : i64} loc(#loc229)
    %1 = cir.alloca !cir.ptr<!s8i>, !cir.ptr<!cir.ptr<!s8i>>, ["__retval"] {alignment = 8 : i64} loc(#loc80)
    cir.store %arg0, %0 : !cir.ptr<!s8i>, !cir.ptr<!cir.ptr<!s8i>> loc(#loc83)
    cir.scope {
      %4 = cir.get_global @goodG2B1Static : !cir.ptr<!s32i> loc(#loc227)
      %5 = cir.load %4 : !cir.ptr<!s32i>, !s32i loc(#loc86)
      %6 = cir.cast(int_to_bool, %5 : !s32i), !cir.bool loc(#loc86)
      cir.if %6 {
        %7 = cir.get_global @".str" : !cir.ptr<!cir.array<!s8i x 21>> loc(#loc78)
        %8 = cir.cast(array_to_ptrdecay, %7 : !cir.ptr<!cir.array<!s8i x 21>>), !cir.ptr<!s8i> loc(#loc78)
        cir.call @printLine(%8) : (!cir.ptr<!s8i>) -> () loc(#loc90)
      } else {
        %7 = cir.load %0 : !cir.ptr<!cir.ptr<!s8i>>, !cir.ptr<!s8i> loc(#loc91)
        %8 = cir.cast(bitcast, %7 : !cir.ptr<!s8i>), !cir.ptr<!void> loc(#loc91)
        %9 = cir.const #cir.int<65> : !s32i loc(#loc92)
        %10 = cir.const #cir.int<50> : !s32i loc(#loc93)
        %11 = cir.const #cir.int<1> : !s32i loc(#loc94)
        %12 = cir.binop(sub, %10, %11) nsw : !s32i loc(#loc93)
        %13 = cir.cast(integral, %12 : !s32i), !u64i loc(#loc93)
        cir.libc.memset %13 bytes from %8 set to %9 : !cir.ptr<!void>, !s32i, !u64i loc(#loc232)
        %14 = cir.const #cir.int<0> : !s32i loc(#loc97)
        %15 = cir.cast(integral, %14 : !s32i), !s8i loc(#loc97)
        %16 = cir.load %0 : !cir.ptr<!cir.ptr<!s8i>>, !cir.ptr<!s8i> loc(#loc98)
        %17 = cir.const #cir.int<50> : !s32i loc(#loc99)
        %18 = cir.const #cir.int<1> : !s32i loc(#loc100)
        %19 = cir.binop(sub, %17, %18) nsw : !s32i loc(#loc99)
        %20 = cir.ptr_stride(%16 : !cir.ptr<!s8i>, %19 : !s32i), !cir.ptr<!s8i> loc(#loc101)
        cir.store %15, %20 : !s8i, !cir.ptr<!s8i> loc(#loc233)
      } loc(#loc231)
    } loc(#loc230)
    %2 = cir.load %0 : !cir.ptr<!cir.ptr<!s8i>>, !cir.ptr<!s8i> loc(#loc102)
    cir.store %2, %1 : !cir.ptr<!s8i>, !cir.ptr<!cir.ptr<!s8i>> loc(#loc234)
    %3 = cir.load %1 : !cir.ptr<!cir.ptr<!s8i>>, !cir.ptr<!s8i> loc(#loc234)
    cir.return %3 : !cir.ptr<!s8i> loc(#loc234)
  } loc(#loc228)
  cir.func no_proto internal private @goodG2B1() extra(#fn_attr1) {
    %0 = cir.alloca !cir.ptr<!s8i>, !cir.ptr<!cir.ptr<!s8i>>, ["data"] {alignment = 8 : i64} loc(#loc236)
    %1 = cir.get_global @malloc : !cir.ptr<!cir.func<(!u64i) -> !cir.ptr<!void>>> loc(#loc108)
    %2 = cir.const #cir.int<100> : !s32i loc(#loc109)
    %3 = cir.cast(integral, %2 : !s32i), !u64i loc(#loc109)
    %4 = cir.const #cir.int<1> : !u64i loc(#loc237)
    %5 = cir.binop(mul, %3, %4) : !u64i loc(#loc238)
    %6 = cir.call @malloc(%5) : (!u64i) -> !cir.ptr<!void> extra(#fn_attr) loc(#loc108)
    %7 = cir.cast(bitcast, %6 : !cir.ptr<!void>), !cir.ptr<!s8i> loc(#loc239)
    cir.store %7, %0 : !cir.ptr<!s8i>, !cir.ptr<!cir.ptr<!s8i>> loc(#loc240)
    cir.scope {
      %12 = cir.load %0 : !cir.ptr<!cir.ptr<!s8i>>, !cir.ptr<!s8i> loc(#loc116)
      %13 = cir.const #cir.ptr<null> : !cir.ptr<!void> loc(#loc117)
      %14 = cir.cast(bitcast, %13 : !cir.ptr<!void>), !cir.ptr<!s8i> loc(#loc117)
      %15 = cir.cmp(eq, %12, %14) : !cir.ptr<!s8i>, !cir.bool loc(#loc242)
      cir.if %15 {
        %16 = cir.get_global @exit : !cir.ptr<!cir.func<(!s32i)>> loc(#loc119)
        %17 = cir.const #cir.int<1> : !s32i loc(#loc120)
        %18 = cir.unary(minus, %17) nsw : !s32i, !s32i loc(#loc121)
        cir.call @exit(%18) : (!s32i) -> () extra(#fn_attr) loc(#loc119)
      } loc(#loc243)
    } loc(#loc241)
    %8 = cir.const #cir.int<0> : !s32i loc(#loc122)
    %9 = cir.get_global @goodG2B1Static : !cir.ptr<!s32i> loc(#loc227)
    cir.store %8, %9 : !s32i, !cir.ptr<!s32i> loc(#loc244)
    %10 = cir.load %0 : !cir.ptr<!cir.ptr<!s8i>>, !cir.ptr<!s8i> loc(#loc124)
    %11 = cir.call @goodG2B1Source(%10) : (!cir.ptr<!s8i>) -> !cir.ptr<!s8i> loc(#loc125)
    cir.store %11, %0 : !cir.ptr<!s8i>, !cir.ptr<!cir.ptr<!s8i>> loc(#loc245)
    cir.scope {
      %12 = cir.alloca !cir.array<!s8i x 50>, !cir.ptr<!cir.array<!s8i x 50>>, ["dest"] {alignment = 16 : i64} loc(#loc247)
      %13 = cir.const #cir.zero : !cir.array<!s8i x 50> loc(#loc247)
      cir.store %13, %12 : !cir.array<!s8i x 50>, !cir.ptr<!cir.array<!s8i x 50>> loc(#loc247)
      %14 = cir.get_global @strcat : !cir.ptr<!cir.func<(!cir.ptr<!s8i>, !cir.ptr<!s8i>) -> !cir.ptr<!s8i>>> loc(#loc132)
      %15 = cir.cast(array_to_ptrdecay, %12 : !cir.ptr<!cir.array<!s8i x 50>>), !cir.ptr<!s8i> loc(#loc133)
      %16 = cir.load %0 : !cir.ptr<!cir.ptr<!s8i>>, !cir.ptr<!s8i> loc(#loc134)
      %17 = cir.call @strcat(%15, %16) : (!cir.ptr<!s8i>, !cir.ptr<!s8i>) -> !cir.ptr<!s8i> extra(#fn_attr) loc(#loc132)
      %18 = cir.load %0 : !cir.ptr<!cir.ptr<!s8i>>, !cir.ptr<!s8i> loc(#loc135)
      cir.call @printLine(%18) : (!cir.ptr<!s8i>) -> () loc(#loc136)
      %19 = cir.get_global @free : !cir.ptr<!cir.func<(!cir.ptr<!void>)>> loc(#loc137)
      %20 = cir.load %0 : !cir.ptr<!cir.ptr<!s8i>>, !cir.ptr<!s8i> loc(#loc138)
      %21 = cir.cast(bitcast, %20 : !cir.ptr<!s8i>), !cir.ptr<!void> loc(#loc138)
      cir.call @free(%21) : (!cir.ptr<!void>) -> () extra(#fn_attr) loc(#loc137)
    } loc(#loc246)
    cir.return loc(#loc105)
  } loc(#loc235)
  cir.global "private" internal dsolocal @goodG2B2Static = #cir.int<0> : !s32i {alignment = 4 : i64} loc(#loc248)
  cir.func internal private @goodG2B2Source(%arg0: !cir.ptr<!s8i> loc(fused[#loc143, #loc144])) -> !cir.ptr<!s8i> extra(#fn_attr1) {
    %0 = cir.alloca !cir.ptr<!s8i>, !cir.ptr<!cir.ptr<!s8i>>, ["data", init] {alignment = 8 : i64} loc(#loc250)
    %1 = cir.alloca !cir.ptr<!s8i>, !cir.ptr<!cir.ptr<!s8i>>, ["__retval"] {alignment = 8 : i64} loc(#loc142)
    cir.store %arg0, %0 : !cir.ptr<!s8i>, !cir.ptr<!cir.ptr<!s8i>> loc(#loc145)
    cir.scope {
      %4 = cir.get_global @goodG2B2Static : !cir.ptr<!s32i> loc(#loc248)
      %5 = cir.load %4 : !cir.ptr<!s32i>, !s32i loc(#loc148)
      %6 = cir.cast(int_to_bool, %5 : !s32i), !cir.bool loc(#loc148)
      cir.if %6 {
        %7 = cir.load %0 : !cir.ptr<!cir.ptr<!s8i>>, !cir.ptr<!s8i> loc(#loc150)
        %8 = cir.cast(bitcast, %7 : !cir.ptr<!s8i>), !cir.ptr<!void> loc(#loc150)
        %9 = cir.const #cir.int<65> : !s32i loc(#loc151)
        %10 = cir.const #cir.int<50> : !s32i loc(#loc152)
        %11 = cir.const #cir.int<1> : !s32i loc(#loc153)
        %12 = cir.binop(sub, %10, %11) nsw : !s32i loc(#loc152)
        %13 = cir.cast(integral, %12 : !s32i), !u64i loc(#loc152)
        cir.libc.memset %13 bytes from %8 set to %9 : !cir.ptr<!void>, !s32i, !u64i loc(#loc253)
        %14 = cir.const #cir.int<0> : !s32i loc(#loc156)
        %15 = cir.cast(integral, %14 : !s32i), !s8i loc(#loc156)
        %16 = cir.load %0 : !cir.ptr<!cir.ptr<!s8i>>, !cir.ptr<!s8i> loc(#loc157)
        %17 = cir.const #cir.int<50> : !s32i loc(#loc158)
        %18 = cir.const #cir.int<1> : !s32i loc(#loc159)
        %19 = cir.binop(sub, %17, %18) nsw : !s32i loc(#loc158)
        %20 = cir.ptr_stride(%16 : !cir.ptr<!s8i>, %19 : !s32i), !cir.ptr<!s8i> loc(#loc160)
        cir.store %15, %20 : !s8i, !cir.ptr<!s8i> loc(#loc254)
      } loc(#loc252)
    } loc(#loc251)
    %2 = cir.load %0 : !cir.ptr<!cir.ptr<!s8i>>, !cir.ptr<!s8i> loc(#loc161)
    cir.store %2, %1 : !cir.ptr<!s8i>, !cir.ptr<!cir.ptr<!s8i>> loc(#loc255)
    %3 = cir.load %1 : !cir.ptr<!cir.ptr<!s8i>>, !cir.ptr<!s8i> loc(#loc255)
    cir.return %3 : !cir.ptr<!s8i> loc(#loc255)
  } loc(#loc249)
  cir.func no_proto internal private @goodG2B2() extra(#fn_attr1) {
    %0 = cir.alloca !cir.ptr<!s8i>, !cir.ptr<!cir.ptr<!s8i>>, ["data"] {alignment = 8 : i64} loc(#loc257)
    %1 = cir.get_global @malloc : !cir.ptr<!cir.func<(!u64i) -> !cir.ptr<!void>>> loc(#loc167)
    %2 = cir.const #cir.int<100> : !s32i loc(#loc168)
    %3 = cir.cast(integral, %2 : !s32i), !u64i loc(#loc168)
    %4 = cir.const #cir.int<1> : !u64i loc(#loc258)
    %5 = cir.binop(mul, %3, %4) : !u64i loc(#loc259)
    %6 = cir.call @malloc(%5) : (!u64i) -> !cir.ptr<!void> extra(#fn_attr) loc(#loc167)
    %7 = cir.cast(bitcast, %6 : !cir.ptr<!void>), !cir.ptr<!s8i> loc(#loc260)
    cir.store %7, %0 : !cir.ptr<!s8i>, !cir.ptr<!cir.ptr<!s8i>> loc(#loc261)
    cir.scope {
      %12 = cir.load %0 : !cir.ptr<!cir.ptr<!s8i>>, !cir.ptr<!s8i> loc(#loc175)
      %13 = cir.const #cir.ptr<null> : !cir.ptr<!void> loc(#loc176)
      %14 = cir.cast(bitcast, %13 : !cir.ptr<!void>), !cir.ptr<!s8i> loc(#loc176)
      %15 = cir.cmp(eq, %12, %14) : !cir.ptr<!s8i>, !cir.bool loc(#loc263)
      cir.if %15 {
        %16 = cir.get_global @exit : !cir.ptr<!cir.func<(!s32i)>> loc(#loc178)
        %17 = cir.const #cir.int<1> : !s32i loc(#loc179)
        %18 = cir.unary(minus, %17) nsw : !s32i, !s32i loc(#loc180)
        cir.call @exit(%18) : (!s32i) -> () extra(#fn_attr) loc(#loc178)
      } loc(#loc264)
    } loc(#loc262)
    %8 = cir.const #cir.int<1> : !s32i loc(#loc181)
    %9 = cir.get_global @goodG2B2Static : !cir.ptr<!s32i> loc(#loc248)
    cir.store %8, %9 : !s32i, !cir.ptr<!s32i> loc(#loc265)
    %10 = cir.load %0 : !cir.ptr<!cir.ptr<!s8i>>, !cir.ptr<!s8i> loc(#loc183)
    %11 = cir.call @goodG2B2Source(%10) : (!cir.ptr<!s8i>) -> !cir.ptr<!s8i> loc(#loc184)
    cir.store %11, %0 : !cir.ptr<!s8i>, !cir.ptr<!cir.ptr<!s8i>> loc(#loc266)
    cir.scope {
      %12 = cir.alloca !cir.array<!s8i x 50>, !cir.ptr<!cir.array<!s8i x 50>>, ["dest"] {alignment = 16 : i64} loc(#loc268)
      %13 = cir.const #cir.zero : !cir.array<!s8i x 50> loc(#loc268)
      cir.store %13, %12 : !cir.array<!s8i x 50>, !cir.ptr<!cir.array<!s8i x 50>> loc(#loc268)
      %14 = cir.get_global @strcat : !cir.ptr<!cir.func<(!cir.ptr<!s8i>, !cir.ptr<!s8i>) -> !cir.ptr<!s8i>>> loc(#loc191)
      %15 = cir.cast(array_to_ptrdecay, %12 : !cir.ptr<!cir.array<!s8i x 50>>), !cir.ptr<!s8i> loc(#loc192)
      %16 = cir.load %0 : !cir.ptr<!cir.ptr<!s8i>>, !cir.ptr<!s8i> loc(#loc193)
      %17 = cir.call @strcat(%15, %16) : (!cir.ptr<!s8i>, !cir.ptr<!s8i>) -> !cir.ptr<!s8i> extra(#fn_attr) loc(#loc191)
      %18 = cir.load %0 : !cir.ptr<!cir.ptr<!s8i>>, !cir.ptr<!s8i> loc(#loc194)
      cir.call @printLine(%18) : (!cir.ptr<!s8i>) -> () loc(#loc195)
      %19 = cir.get_global @free : !cir.ptr<!cir.func<(!cir.ptr<!void>)>> loc(#loc196)
      %20 = cir.load %0 : !cir.ptr<!cir.ptr<!s8i>>, !cir.ptr<!s8i> loc(#loc197)
      %21 = cir.cast(bitcast, %20 : !cir.ptr<!s8i>), !cir.ptr<!void> loc(#loc197)
      cir.call @free(%21) : (!cir.ptr<!void>) -> () extra(#fn_attr) loc(#loc196)
    } loc(#loc267)
    cir.return loc(#loc164)
  } loc(#loc256)
} loc(#loc)
#loc = loc("/workspaces/juliet-c/testcases/CWE122_Heap_Based_Buffer_Overflow/s10/CWE122_Heap_Based_Buffer_Overflow__c_src_char_cat_21.c":0:0)
#loc1 = loc("/usr/include/stdlib.h":672:1)
#loc2 = loc("/usr/include/stdlib.h":672:45)
#loc3 = loc("/usr/include/stdlib.h":756:1)
#loc4 = loc("/usr/include/stdlib.h":756:70)
#loc5 = loc("CWE122_Heap_Based_Buffer_Overflow__c_src_char_cat_21.c":24:1)
#loc6 = loc("CWE122_Heap_Based_Buffer_Overflow__c_src_char_cat_21.c":24:24)
#loc7 = loc("CWE122_Heap_Based_Buffer_Overflow__c_src_char_cat_21.c":26:1)
#loc8 = loc("CWE122_Heap_Based_Buffer_Overflow__c_src_char_cat_21.c":35:1)
#loc11 = loc("CWE122_Heap_Based_Buffer_Overflow__c_src_char_cat_21.c":27:1)
#loc12 = loc("CWE122_Heap_Based_Buffer_Overflow__c_src_char_cat_21.c":28:5)
#loc13 = loc("CWE122_Heap_Based_Buffer_Overflow__c_src_char_cat_21.c":33:5)
#loc14 = loc("CWE122_Heap_Based_Buffer_Overflow__c_src_char_cat_21.c":28:8)
#loc15 = loc("CWE122_Heap_Based_Buffer_Overflow__c_src_char_cat_21.c":29:5)
#loc16 = loc("CWE122_Heap_Based_Buffer_Overflow__c_src_char_cat_21.c":31:16)
#loc17 = loc("CWE122_Heap_Based_Buffer_Overflow__c_src_char_cat_21.c":31:22)
#loc18 = loc("CWE122_Heap_Based_Buffer_Overflow__c_src_char_cat_21.c":31:27)
#loc19 = loc("CWE122_Heap_Based_Buffer_Overflow__c_src_char_cat_21.c":31:31)
#loc20 = loc("CWE122_Heap_Based_Buffer_Overflow__c_src_char_cat_21.c":31:9)
#loc21 = loc("CWE122_Heap_Based_Buffer_Overflow__c_src_char_cat_21.c":31:32)
#loc22 = loc("CWE122_Heap_Based_Buffer_Overflow__c_src_char_cat_21.c":32:23)
#loc23 = loc("CWE122_Heap_Based_Buffer_Overflow__c_src_char_cat_21.c":32:9)
#loc24 = loc("CWE122_Heap_Based_Buffer_Overflow__c_src_char_cat_21.c":32:14)
#loc25 = loc("CWE122_Heap_Based_Buffer_Overflow__c_src_char_cat_21.c":32:18)
#loc26 = loc("CWE122_Heap_Based_Buffer_Overflow__c_src_char_cat_21.c":32:19)
#loc27 = loc("CWE122_Heap_Based_Buffer_Overflow__c_src_char_cat_21.c":34:12)
#loc28 = loc("CWE122_Heap_Based_Buffer_Overflow__c_src_char_cat_21.c":34:5)
#loc29 = loc("/usr/include/string.h":149:1)
#loc30 = loc("/usr/include/string.h":150:14)
#loc31 = loc("../../../testcasesupport/std_testcase_io.h":14:1)
#loc32 = loc("../../../testcasesupport/std_testcase_io.h":14:33)
#loc33 = loc("/usr/include/stdlib.h":687:1)
#loc34 = loc("/usr/include/stdlib.h":687:32)
#loc35 = loc("CWE122_Heap_Based_Buffer_Overflow__c_src_char_cat_21.c":37:1)
#loc36 = loc("CWE122_Heap_Based_Buffer_Overflow__c_src_char_cat_21.c":51:1)
#loc37 = loc("CWE122_Heap_Based_Buffer_Overflow__c_src_char_cat_21.c":39:5)
#loc38 = loc("CWE122_Heap_Based_Buffer_Overflow__c_src_char_cat_21.c":39:12)
#loc39 = loc("CWE122_Heap_Based_Buffer_Overflow__c_src_char_cat_21.c":40:20)
#loc40 = loc("CWE122_Heap_Based_Buffer_Overflow__c_src_char_cat_21.c":40:27)
#loc41 = loc("CWE122_Heap_Based_Buffer_Overflow__c_src_char_cat_21.c":40:31)
#loc42 = loc("CWE122_Heap_Based_Buffer_Overflow__c_src_char_cat_21.c":40:42)
#loc43 = loc("CWE122_Heap_Based_Buffer_Overflow__c_src_char_cat_21.c":40:43)
#loc44 = loc("CWE122_Heap_Based_Buffer_Overflow__c_src_char_cat_21.c":40:5)
#loc45 = loc("CWE122_Heap_Based_Buffer_Overflow__c_src_char_cat_21.c":41:5)
#loc46 = loc("CWE122_Heap_Based_Buffer_Overflow__c_src_char_cat_21.c":41:33)
#loc47 = loc("CWE122_Heap_Based_Buffer_Overflow__c_src_char_cat_21.c":41:9)
#loc48 = loc("CWE122_Heap_Based_Buffer_Overflow__c_src_char_cat_21.c":41:17)
#loc49 = loc("CWE122_Heap_Based_Buffer_Overflow__c_src_char_cat_21.c":41:23)
#loc50 = loc("CWE122_Heap_Based_Buffer_Overflow__c_src_char_cat_21.c":41:24)
#loc51 = loc("CWE122_Heap_Based_Buffer_Overflow__c_src_char_cat_21.c":41:30)
#loc52 = loc("CWE122_Heap_Based_Buffer_Overflow__c_src_char_cat_21.c":41:29)
#loc53 = loc("CWE122_Heap_Based_Buffer_Overflow__c_src_char_cat_21.c":42:17)
#loc54 = loc("CWE122_Heap_Based_Buffer_Overflow__c_src_char_cat_21.c":42:5)
#loc55 = loc("CWE122_Heap_Based_Buffer_Overflow__c_src_char_cat_21.c":43:22)
#loc56 = loc("CWE122_Heap_Based_Buffer_Overflow__c_src_char_cat_21.c":43:12)
#loc57 = loc("CWE122_Heap_Based_Buffer_Overflow__c_src_char_cat_21.c":43:5)
#loc58 = loc("CWE122_Heap_Based_Buffer_Overflow__c_src_char_cat_21.c":43:26)
#loc59 = loc("CWE122_Heap_Based_Buffer_Overflow__c_src_char_cat_21.c":44:5)
#loc60 = loc("CWE122_Heap_Based_Buffer_Overflow__c_src_char_cat_21.c":50:5)
#loc61 = loc("CWE122_Heap_Based_Buffer_Overflow__c_src_char_cat_21.c":45:9)
#loc62 = loc("CWE122_Heap_Based_Buffer_Overflow__c_src_char_cat_21.c":45:25)
#loc63 = loc("CWE122_Heap_Based_Buffer_Overflow__c_src_char_cat_21.c":47:9)
#loc64 = loc("CWE122_Heap_Based_Buffer_Overflow__c_src_char_cat_21.c":47:16)
#loc65 = loc("CWE122_Heap_Based_Buffer_Overflow__c_src_char_cat_21.c":47:22)
#loc66 = loc("CWE122_Heap_Based_Buffer_Overflow__c_src_char_cat_21.c":48:19)
#loc67 = loc("CWE122_Heap_Based_Buffer_Overflow__c_src_char_cat_21.c":48:9)
#loc68 = loc("CWE122_Heap_Based_Buffer_Overflow__c_src_char_cat_21.c":49:9)
#loc69 = loc("CWE122_Heap_Based_Buffer_Overflow__c_src_char_cat_21.c":49:14)
#loc70 = loc("CWE122_Heap_Based_Buffer_Overflow__c_src_char_cat_21.c":122:1)
#loc71 = loc("CWE122_Heap_Based_Buffer_Overflow__c_src_char_cat_21.c":126:1)
#loc72 = loc("CWE122_Heap_Based_Buffer_Overflow__c_src_char_cat_21.c":124:5)
#loc73 = loc("CWE122_Heap_Based_Buffer_Overflow__c_src_char_cat_21.c":124:14)
#loc74 = loc("CWE122_Heap_Based_Buffer_Overflow__c_src_char_cat_21.c":125:5)
#loc75 = loc("CWE122_Heap_Based_Buffer_Overflow__c_src_char_cat_21.c":125:14)
#loc76 = loc("CWE122_Heap_Based_Buffer_Overflow__c_src_char_cat_21.c":58:1)
#loc77 = loc("CWE122_Heap_Based_Buffer_Overflow__c_src_char_cat_21.c":58:29)
#loc78 = loc("CWE122_Heap_Based_Buffer_Overflow__c_src_char_cat_21.c":67:19)
#loc79 = loc("CWE122_Heap_Based_Buffer_Overflow__c_src_char_cat_21.c":62:1)
#loc80 = loc("CWE122_Heap_Based_Buffer_Overflow__c_src_char_cat_21.c":76:1)
#loc83 = loc("CWE122_Heap_Based_Buffer_Overflow__c_src_char_cat_21.c":63:1)
#loc84 = loc("CWE122_Heap_Based_Buffer_Overflow__c_src_char_cat_21.c":64:5)
#loc85 = loc("CWE122_Heap_Based_Buffer_Overflow__c_src_char_cat_21.c":74:5)
#loc86 = loc("CWE122_Heap_Based_Buffer_Overflow__c_src_char_cat_21.c":64:8)
#loc87 = loc("CWE122_Heap_Based_Buffer_Overflow__c_src_char_cat_21.c":65:5)
#loc88 = loc("CWE122_Heap_Based_Buffer_Overflow__c_src_char_cat_21.c":68:5)
#loc89 = loc("CWE122_Heap_Based_Buffer_Overflow__c_src_char_cat_21.c":70:5)
#loc90 = loc("CWE122_Heap_Based_Buffer_Overflow__c_src_char_cat_21.c":67:9)
#loc91 = loc("CWE122_Heap_Based_Buffer_Overflow__c_src_char_cat_21.c":72:16)
#loc92 = loc("CWE122_Heap_Based_Buffer_Overflow__c_src_char_cat_21.c":72:22)
#loc93 = loc("CWE122_Heap_Based_Buffer_Overflow__c_src_char_cat_21.c":72:27)
#loc94 = loc("CWE122_Heap_Based_Buffer_Overflow__c_src_char_cat_21.c":72:30)
#loc95 = loc("CWE122_Heap_Based_Buffer_Overflow__c_src_char_cat_21.c":72:9)
#loc96 = loc("CWE122_Heap_Based_Buffer_Overflow__c_src_char_cat_21.c":72:31)
#loc97 = loc("CWE122_Heap_Based_Buffer_Overflow__c_src_char_cat_21.c":73:22)
#loc98 = loc("CWE122_Heap_Based_Buffer_Overflow__c_src_char_cat_21.c":73:9)
#loc99 = loc("CWE122_Heap_Based_Buffer_Overflow__c_src_char_cat_21.c":73:14)
#loc100 = loc("CWE122_Heap_Based_Buffer_Overflow__c_src_char_cat_21.c":73:17)
#loc101 = loc("CWE122_Heap_Based_Buffer_Overflow__c_src_char_cat_21.c":73:18)
#loc102 = loc("CWE122_Heap_Based_Buffer_Overflow__c_src_char_cat_21.c":75:12)
#loc103 = loc("CWE122_Heap_Based_Buffer_Overflow__c_src_char_cat_21.c":75:5)
#loc104 = loc("CWE122_Heap_Based_Buffer_Overflow__c_src_char_cat_21.c":78:1)
#loc105 = loc("CWE122_Heap_Based_Buffer_Overflow__c_src_char_cat_21.c":92:1)
#loc106 = loc("CWE122_Heap_Based_Buffer_Overflow__c_src_char_cat_21.c":80:5)
#loc107 = loc("CWE122_Heap_Based_Buffer_Overflow__c_src_char_cat_21.c":80:12)
#loc108 = loc("CWE122_Heap_Based_Buffer_Overflow__c_src_char_cat_21.c":81:20)
#loc109 = loc("CWE122_Heap_Based_Buffer_Overflow__c_src_char_cat_21.c":81:27)
#loc110 = loc("CWE122_Heap_Based_Buffer_Overflow__c_src_char_cat_21.c":81:31)
#loc111 = loc("CWE122_Heap_Based_Buffer_Overflow__c_src_char_cat_21.c":81:42)
#loc112 = loc("CWE122_Heap_Based_Buffer_Overflow__c_src_char_cat_21.c":81:43)
#loc113 = loc("CWE122_Heap_Based_Buffer_Overflow__c_src_char_cat_21.c":81:5)
#loc114 = loc("CWE122_Heap_Based_Buffer_Overflow__c_src_char_cat_21.c":82:5)
#loc115 = loc("CWE122_Heap_Based_Buffer_Overflow__c_src_char_cat_21.c":82:33)
#loc116 = loc("CWE122_Heap_Based_Buffer_Overflow__c_src_char_cat_21.c":82:9)
#loc117 = loc("CWE122_Heap_Based_Buffer_Overflow__c_src_char_cat_21.c":82:17)
#loc118 = loc("CWE122_Heap_Based_Buffer_Overflow__c_src_char_cat_21.c":82:23)
#loc119 = loc("CWE122_Heap_Based_Buffer_Overflow__c_src_char_cat_21.c":82:24)
#loc120 = loc("CWE122_Heap_Based_Buffer_Overflow__c_src_char_cat_21.c":82:30)
#loc121 = loc("CWE122_Heap_Based_Buffer_Overflow__c_src_char_cat_21.c":82:29)
#loc122 = loc("CWE122_Heap_Based_Buffer_Overflow__c_src_char_cat_21.c":83:22)
#loc123 = loc("CWE122_Heap_Based_Buffer_Overflow__c_src_char_cat_21.c":83:5)
#loc124 = loc("CWE122_Heap_Based_Buffer_Overflow__c_src_char_cat_21.c":84:27)
#loc125 = loc("CWE122_Heap_Based_Buffer_Overflow__c_src_char_cat_21.c":84:12)
#loc126 = loc("CWE122_Heap_Based_Buffer_Overflow__c_src_char_cat_21.c":84:5)
#loc127 = loc("CWE122_Heap_Based_Buffer_Overflow__c_src_char_cat_21.c":84:31)
#loc128 = loc("CWE122_Heap_Based_Buffer_Overflow__c_src_char_cat_21.c":85:5)
#loc129 = loc("CWE122_Heap_Based_Buffer_Overflow__c_src_char_cat_21.c":91:5)
#loc130 = loc("CWE122_Heap_Based_Buffer_Overflow__c_src_char_cat_21.c":86:9)
#loc131 = loc("CWE122_Heap_Based_Buffer_Overflow__c_src_char_cat_21.c":86:25)
#loc132 = loc("CWE122_Heap_Based_Buffer_Overflow__c_src_char_cat_21.c":88:9)
#loc133 = loc("CWE122_Heap_Based_Buffer_Overflow__c_src_char_cat_21.c":88:16)
#loc134 = loc("CWE122_Heap_Based_Buffer_Overflow__c_src_char_cat_21.c":88:22)
#loc135 = loc("CWE122_Heap_Based_Buffer_Overflow__c_src_char_cat_21.c":89:19)
#loc136 = loc("CWE122_Heap_Based_Buffer_Overflow__c_src_char_cat_21.c":89:9)
#loc137 = loc("CWE122_Heap_Based_Buffer_Overflow__c_src_char_cat_21.c":90:9)
#loc138 = loc("CWE122_Heap_Based_Buffer_Overflow__c_src_char_cat_21.c":90:14)
#loc139 = loc("CWE122_Heap_Based_Buffer_Overflow__c_src_char_cat_21.c":59:1)
#loc140 = loc("CWE122_Heap_Based_Buffer_Overflow__c_src_char_cat_21.c":59:29)
#loc141 = loc("CWE122_Heap_Based_Buffer_Overflow__c_src_char_cat_21.c":95:1)
#loc142 = loc("CWE122_Heap_Based_Buffer_Overflow__c_src_char_cat_21.c":104:1)
#loc145 = loc("CWE122_Heap_Based_Buffer_Overflow__c_src_char_cat_21.c":96:1)
#loc146 = loc("CWE122_Heap_Based_Buffer_Overflow__c_src_char_cat_21.c":97:5)
#loc147 = loc("CWE122_Heap_Based_Buffer_Overflow__c_src_char_cat_21.c":102:5)
#loc148 = loc("CWE122_Heap_Based_Buffer_Overflow__c_src_char_cat_21.c":97:8)
#loc149 = loc("CWE122_Heap_Based_Buffer_Overflow__c_src_char_cat_21.c":98:5)
#loc150 = loc("CWE122_Heap_Based_Buffer_Overflow__c_src_char_cat_21.c":100:16)
#loc151 = loc("CWE122_Heap_Based_Buffer_Overflow__c_src_char_cat_21.c":100:22)
#loc152 = loc("CWE122_Heap_Based_Buffer_Overflow__c_src_char_cat_21.c":100:27)
#loc153 = loc("CWE122_Heap_Based_Buffer_Overflow__c_src_char_cat_21.c":100:30)
#loc154 = loc("CWE122_Heap_Based_Buffer_Overflow__c_src_char_cat_21.c":100:9)
#loc155 = loc("CWE122_Heap_Based_Buffer_Overflow__c_src_char_cat_21.c":100:31)
#loc156 = loc("CWE122_Heap_Based_Buffer_Overflow__c_src_char_cat_21.c":101:22)
#loc157 = loc("CWE122_Heap_Based_Buffer_Overflow__c_src_char_cat_21.c":101:9)
#loc158 = loc("CWE122_Heap_Based_Buffer_Overflow__c_src_char_cat_21.c":101:14)
#loc159 = loc("CWE122_Heap_Based_Buffer_Overflow__c_src_char_cat_21.c":101:17)
#loc160 = loc("CWE122_Heap_Based_Buffer_Overflow__c_src_char_cat_21.c":101:18)
#loc161 = loc("CWE122_Heap_Based_Buffer_Overflow__c_src_char_cat_21.c":103:12)
#loc162 = loc("CWE122_Heap_Based_Buffer_Overflow__c_src_char_cat_21.c":103:5)
#loc163 = loc("CWE122_Heap_Based_Buffer_Overflow__c_src_char_cat_21.c":106:1)
#loc164 = loc("CWE122_Heap_Based_Buffer_Overflow__c_src_char_cat_21.c":120:1)
#loc165 = loc("CWE122_Heap_Based_Buffer_Overflow__c_src_char_cat_21.c":108:5)
#loc166 = loc("CWE122_Heap_Based_Buffer_Overflow__c_src_char_cat_21.c":108:12)
#loc167 = loc("CWE122_Heap_Based_Buffer_Overflow__c_src_char_cat_21.c":109:20)
#loc168 = loc("CWE122_Heap_Based_Buffer_Overflow__c_src_char_cat_21.c":109:27)
#loc169 = loc("CWE122_Heap_Based_Buffer_Overflow__c_src_char_cat_21.c":109:31)
#loc170 = loc("CWE122_Heap_Based_Buffer_Overflow__c_src_char_cat_21.c":109:42)
#loc171 = loc("CWE122_Heap_Based_Buffer_Overflow__c_src_char_cat_21.c":109:43)
#loc172 = loc("CWE122_Heap_Based_Buffer_Overflow__c_src_char_cat_21.c":109:5)
#loc173 = loc("CWE122_Heap_Based_Buffer_Overflow__c_src_char_cat_21.c":110:5)
#loc174 = loc("CWE122_Heap_Based_Buffer_Overflow__c_src_char_cat_21.c":110:33)
#loc175 = loc("CWE122_Heap_Based_Buffer_Overflow__c_src_char_cat_21.c":110:9)
#loc176 = loc("CWE122_Heap_Based_Buffer_Overflow__c_src_char_cat_21.c":110:17)
#loc177 = loc("CWE122_Heap_Based_Buffer_Overflow__c_src_char_cat_21.c":110:23)
#loc178 = loc("CWE122_Heap_Based_Buffer_Overflow__c_src_char_cat_21.c":110:24)
#loc179 = loc("CWE122_Heap_Based_Buffer_Overflow__c_src_char_cat_21.c":110:30)
#loc180 = loc("CWE122_Heap_Based_Buffer_Overflow__c_src_char_cat_21.c":110:29)
#loc181 = loc("CWE122_Heap_Based_Buffer_Overflow__c_src_char_cat_21.c":111:22)
#loc182 = loc("CWE122_Heap_Based_Buffer_Overflow__c_src_char_cat_21.c":111:5)
#loc183 = loc("CWE122_Heap_Based_Buffer_Overflow__c_src_char_cat_21.c":112:27)
#loc184 = loc("CWE122_Heap_Based_Buffer_Overflow__c_src_char_cat_21.c":112:12)
#loc185 = loc("CWE122_Heap_Based_Buffer_Overflow__c_src_char_cat_21.c":112:5)
#loc186 = loc("CWE122_Heap_Based_Buffer_Overflow__c_src_char_cat_21.c":112:31)
#loc187 = loc("CWE122_Heap_Based_Buffer_Overflow__c_src_char_cat_21.c":113:5)
#loc188 = loc("CWE122_Heap_Based_Buffer_Overflow__c_src_char_cat_21.c":119:5)
#loc189 = loc("CWE122_Heap_Based_Buffer_Overflow__c_src_char_cat_21.c":114:9)
#loc190 = loc("CWE122_Heap_Based_Buffer_Overflow__c_src_char_cat_21.c":114:25)
#loc191 = loc("CWE122_Heap_Based_Buffer_Overflow__c_src_char_cat_21.c":116:9)
#loc192 = loc("CWE122_Heap_Based_Buffer_Overflow__c_src_char_cat_21.c":116:16)
#loc193 = loc("CWE122_Heap_Based_Buffer_Overflow__c_src_char_cat_21.c":116:22)
#loc194 = loc("CWE122_Heap_Based_Buffer_Overflow__c_src_char_cat_21.c":117:19)
#loc195 = loc("CWE122_Heap_Based_Buffer_Overflow__c_src_char_cat_21.c":117:9)
#loc196 = loc("CWE122_Heap_Based_Buffer_Overflow__c_src_char_cat_21.c":118:9)
#loc197 = loc("CWE122_Heap_Based_Buffer_Overflow__c_src_char_cat_21.c":118:14)
#loc198 = loc(fused[#loc1, #loc2])
#loc199 = loc(fused[#loc3, #loc4])
#loc200 = loc(fused[#loc5, #loc6])
#loc201 = loc(fused[#loc7, #loc8])
#loc203 = loc(fused[#loc12, #loc13])
#loc204 = loc(fused[#loc15, #loc13])
#loc205 = loc(fused[#loc20, #loc21])
#loc206 = loc(fused[#loc23, #loc22])
#loc207 = loc(fused[#loc28, #loc27])
#loc208 = loc(fused[#loc29, #loc30])
#loc209 = loc(fused[#loc31, #loc32])
#loc210 = loc(fused[#loc33, #loc34])
#loc211 = loc(fused[#loc35, #loc36])
#loc212 = loc(fused[#loc37, #loc38])
#loc213 = loc(fused[#loc41, #loc42])
#loc214 = loc(fused[#loc40, #loc42])
#loc215 = loc(fused[#loc39, #loc43])
#loc216 = loc(fused[#loc44, #loc43])
#loc217 = loc(fused[#loc45, #loc46])
#loc218 = loc(fused[#loc47, #loc48])
#loc219 = loc(fused[#loc49, #loc46])
#loc220 = loc(fused[#loc54, #loc53])
#loc221 = loc(fused[#loc57, #loc58])
#loc222 = loc(fused[#loc59, #loc60])
#loc223 = loc(fused[#loc61, #loc62])
#loc224 = loc(fused[#loc70, #loc71])
#loc225 = loc(fused[#loc72, #loc73])
#loc226 = loc(fused[#loc74, #loc75])
#loc227 = loc(fused[#loc76, #loc77])
#loc228 = loc(fused[#loc79, #loc80])
#loc230 = loc(fused[#loc84, #loc85])
#loc231 = loc(fused[#loc87, #loc88, #loc89, #loc85])
#loc232 = loc(fused[#loc95, #loc96])
#loc233 = loc(fused[#loc98, #loc97])
#loc234 = loc(fused[#loc103, #loc102])
#loc235 = loc(fused[#loc104, #loc105])
#loc236 = loc(fused[#loc106, #loc107])
#loc237 = loc(fused[#loc110, #loc111])
#loc238 = loc(fused[#loc109, #loc111])
#loc239 = loc(fused[#loc108, #loc112])
#loc240 = loc(fused[#loc113, #loc112])
#loc241 = loc(fused[#loc114, #loc115])
#loc242 = loc(fused[#loc116, #loc117])
#loc243 = loc(fused[#loc118, #loc115])
#loc244 = loc(fused[#loc123, #loc122])
#loc245 = loc(fused[#loc126, #loc127])
#loc246 = loc(fused[#loc128, #loc129])
#loc247 = loc(fused[#loc130, #loc131])
#loc248 = loc(fused[#loc139, #loc140])
#loc249 = loc(fused[#loc141, #loc142])
#loc251 = loc(fused[#loc146, #loc147])
#loc252 = loc(fused[#loc149, #loc147])
#loc253 = loc(fused[#loc154, #loc155])
#loc254 = loc(fused[#loc157, #loc156])
#loc255 = loc(fused[#loc162, #loc161])
#loc256 = loc(fused[#loc163, #loc164])
#loc257 = loc(fused[#loc165, #loc166])
#loc258 = loc(fused[#loc169, #loc170])
#loc259 = loc(fused[#loc168, #loc170])
#loc260 = loc(fused[#loc167, #loc171])
#loc261 = loc(fused[#loc172, #loc171])
#loc262 = loc(fused[#loc173, #loc174])
#loc263 = loc(fused[#loc175, #loc176])
#loc264 = loc(fused[#loc177, #loc174])
#loc265 = loc(fused[#loc182, #loc181])
#loc266 = loc(fused[#loc185, #loc186])
#loc267 = loc(fused[#loc187, #loc188])
#loc268 = loc(fused[#loc189, #loc190])
