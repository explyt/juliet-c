!s32i = !cir.int<s, 32>
!s8i = !cir.int<s, 8>
!u32i = !cir.int<u, 32>
!void = !cir.void
#fn_attr = #cir<extra({nothrow = #cir.nothrow})>
#fn_attr1 = #cir<extra({inline = #cir.inline<no>, nothrow = #cir.nothrow, optnone = #cir.optnone})>
#loc20 = loc("CWE190_Integer_Overflow__int_rand_add_15.c":31:16)
#loc61 = loc("CWE190_Integer_Overflow__int_rand_add_15.c":68:16)
#loc98 = loc("CWE190_Integer_Overflow__int_rand_add_15.c":106:16)
module @"/home/ladisgin/git_proj/juliet-c/testcases/CWE190_Integer_Overflow/s04/CWE190_Integer_Overflow__int_rand_add_15.c" attributes {cir.lang = #cir.lang<c>, cir.sob = #cir.signed_overflow_behavior<undefined>, cir.triple = "x86_64-unknown-linux-gnu", dlti.dl_spec = #dlti.dl_spec<!llvm.ptr<270> = dense<32> : vector<4xi64>, !llvm.ptr<272> = dense<64> : vector<4xi64>, f16 = dense<16> : vector<2xi64>, !llvm.ptr<271> = dense<32> : vector<4xi64>, f64 = dense<64> : vector<2xi64>, f128 = dense<128> : vector<2xi64>, i64 = dense<64> : vector<2xi64>, i128 = dense<128> : vector<2xi64>, f80 = dense<128> : vector<2xi64>, i1 = dense<8> : vector<2xi64>, !llvm.ptr = dense<64> : vector<4xi64>, i16 = dense<16> : vector<2xi64>, i8 = dense<8> : vector<2xi64>, i32 = dense<32> : vector<2xi64>, "dlti.stack_alignment" = 128 : i64, "dlti.endianness" = "little">} {
  cir.func private @rand() -> !s32i extra(#fn_attr) loc(#loc186)
  cir.func private @printLine(!cir.ptr<!s8i>) loc(#loc187)
  cir.global "private" constant cir_private dsolocal @".str" = #cir.const_array<"Benign, fixed string\00" : !cir.array<!s8i x 21>> : !cir.array<!s8i x 21> {alignment = 1 : i64} loc(#loc5)
  cir.func private @printIntLine(!s32i) loc(#loc188)
  cir.func no_proto @CWE190_Integer_Overflow__int_rand_add_15_bad() extra(#fn_attr1) {
    %0 = cir.alloca !s32i, !cir.ptr<!s32i>, ["result", init] {alignment = 4 : i64} loc(#loc190)
    %1 = cir.alloca !s32i, !cir.ptr<!s32i>, ["data"] {alignment = 4 : i64} loc(#loc191)
    %2 = cir.const #cir.int<0> : !s32i loc(#loc14)
    cir.store %2, %1 : !s32i, !cir.ptr<!s32i> loc(#loc192)
    cir.br ^bb1 loc(#loc193)
  ^bb1:  // pred: ^bb0
    %3 = cir.const #cir.int<6> : !s32i loc(#loc18)
    cir.br ^bb2 loc(#loc16)
  ^bb2:  // pred: ^bb1
    cir.switch.flat %3 : !s32i, ^bb9 [
      6: ^bb4
    ] loc(#loc16)
  ^bb3:  // no predecessors
    cir.br ^bb4 loc(#loc19)
  ^bb4:  // 2 preds: ^bb2, ^bb3
    %4 = cir.call @rand() : () -> !s32i extra(#fn_attr) loc(#loc20)
    %5 = cir.const #cir.int<1> : !s32i loc(#loc20)
    %6 = cir.binop(and, %4, %5) : !s32i loc(#loc20)
    %7 = cir.cast(int_to_bool, %6 : !s32i), !cir.bool loc(#loc20)
    cir.brcond %7 ^bb5, ^bb6 loc(#loc20)
  ^bb5:  // pred: ^bb4
    %8 = cir.call @rand() : () -> !s32i extra(#fn_attr) loc(#loc20)
    %9 = cir.cast(integral, %8 : !s32i), !u32i loc(#loc20)
    %10 = cir.const #cir.int<30> : !s32i loc(#loc20)
    %11 = cir.shift(left, %9 : !u32i, %10 : !s32i) -> !u32i loc(#loc20)
    %12 = cir.call @rand() : () -> !s32i extra(#fn_attr) loc(#loc20)
    %13 = cir.cast(integral, %12 : !s32i), !u32i loc(#loc20)
    %14 = cir.const #cir.int<15> : !s32i loc(#loc20)
    %15 = cir.shift(left, %13 : !u32i, %14 : !s32i) -> !u32i loc(#loc20)
    %16 = cir.binop(xor, %11, %15) : !u32i loc(#loc20)
    %17 = cir.call @rand() : () -> !s32i extra(#fn_attr) loc(#loc20)
    %18 = cir.cast(integral, %17 : !s32i), !u32i loc(#loc20)
    %19 = cir.binop(xor, %16, %18) : !u32i loc(#loc20)
    cir.br ^bb7(%19 : !u32i) loc(#loc20)
  ^bb6:  // pred: ^bb4
    %20 = cir.call @rand() : () -> !s32i extra(#fn_attr) loc(#loc20)
    %21 = cir.cast(integral, %20 : !s32i), !u32i loc(#loc20)
    %22 = cir.const #cir.int<30> : !s32i loc(#loc20)
    %23 = cir.shift(left, %21 : !u32i, %22 : !s32i) -> !u32i loc(#loc20)
    %24 = cir.call @rand() : () -> !s32i extra(#fn_attr) loc(#loc20)
    %25 = cir.cast(integral, %24 : !s32i), !u32i loc(#loc20)
    %26 = cir.const #cir.int<15> : !s32i loc(#loc20)
    %27 = cir.shift(left, %25 : !u32i, %26 : !s32i) -> !u32i loc(#loc20)
    %28 = cir.binop(xor, %23, %27) : !u32i loc(#loc20)
    %29 = cir.call @rand() : () -> !s32i extra(#fn_attr) loc(#loc20)
    %30 = cir.cast(integral, %29 : !s32i), !u32i loc(#loc20)
    %31 = cir.binop(xor, %28, %30) : !u32i loc(#loc20)
    %32 = cir.unary(minus, %31) : !u32i, !u32i loc(#loc20)
    %33 = cir.const #cir.int<1> : !s32i loc(#loc20)
    %34 = cir.cast(integral, %33 : !s32i), !u32i loc(#loc20)
    %35 = cir.binop(sub, %32, %34) : !u32i loc(#loc20)
    cir.br ^bb7(%35 : !u32i) loc(#loc20)
  ^bb7(%36: !u32i loc("CWE190_Integer_Overflow__int_rand_add_15.c":31:16)):  // 2 preds: ^bb5, ^bb6
    cir.br ^bb8 loc(#loc20)
  ^bb8:  // pred: ^bb7
    %37 = cir.cast(integral, %36 : !u32i), !s32i loc(#loc20)
    cir.store %37, %1 : !s32i, !cir.ptr<!s32i> loc(#loc194)
    cir.br ^bb10 loc(#loc22)
  ^bb9:  // pred: ^bb2
    %38 = cir.get_global @".str" : !cir.ptr<!cir.array<!s8i x 21>> loc(#loc5)
    %39 = cir.cast(array_to_ptrdecay, %38 : !cir.ptr<!cir.array<!s8i x 21>>), !cir.ptr<!s8i> loc(#loc5)
    cir.call @printLine(%39) : (!cir.ptr<!s8i>) -> () loc(#loc23)
    cir.br ^bb10 loc(#loc24)
  ^bb10:  // 2 preds: ^bb8, ^bb9
    cir.br ^bb11 loc(#loc17)
  ^bb11:  // pred: ^bb10
    cir.br ^bb12 loc(#loc195)
  ^bb12:  // pred: ^bb11
    %40 = cir.const #cir.int<7> : !s32i loc(#loc27)
    cir.br ^bb13 loc(#loc25)
  ^bb13:  // pred: ^bb12
    cir.switch.flat %40 : !s32i, ^bb18 [
      7: ^bb15
    ] loc(#loc25)
  ^bb14:  // no predecessors
    cir.br ^bb15 loc(#loc28)
  ^bb15:  // 2 preds: ^bb13, ^bb14
    cir.br ^bb16 loc(#loc196)
  ^bb16:  // pred: ^bb15
    %41 = cir.load %1 : !cir.ptr<!s32i>, !s32i loc(#loc31)
    %42 = cir.const #cir.int<1> : !s32i loc(#loc11)
    %43 = cir.binop(add, %41, %42) nsw : !s32i loc(#loc31)
    cir.store %43, %0 : !s32i, !cir.ptr<!s32i> loc(#loc190)
    %44 = cir.load %0 : !cir.ptr<!s32i>, !s32i loc(#loc32)
    cir.call @printIntLine(%44) : (!s32i) -> () loc(#loc33)
    cir.br ^bb17 loc(#loc30)
  ^bb17:  // pred: ^bb16
    cir.br ^bb19 loc(#loc34)
  ^bb18:  // pred: ^bb13
    %45 = cir.get_global @".str" : !cir.ptr<!cir.array<!s8i x 21>> loc(#loc35)
    %46 = cir.cast(array_to_ptrdecay, %45 : !cir.ptr<!cir.array<!s8i x 21>>), !cir.ptr<!s8i> loc(#loc35)
    cir.call @printLine(%46) : (!cir.ptr<!s8i>) -> () loc(#loc36)
    cir.br ^bb19 loc(#loc37)
  ^bb19:  // 2 preds: ^bb17, ^bb18
    cir.br ^bb20 loc(#loc26)
  ^bb20:  // pred: ^bb19
    cir.return loc(#loc9)
  } loc(#loc189)
  cir.func no_proto @CWE190_Integer_Overflow__int_rand_add_15_good() extra(#fn_attr1) {
    %0 = cir.get_global @goodB2G1 : !cir.ptr<!cir.func<!void ()>> loc(#loc198)
    cir.call %0() : (!cir.ptr<!cir.func<!void ()>>) -> () loc(#loc40)
    %1 = cir.get_global @goodB2G2 : !cir.ptr<!cir.func<!void ()>> loc(#loc199)
    cir.call %1() : (!cir.ptr<!cir.func<!void ()>>) -> () loc(#loc42)
    %2 = cir.get_global @goodG2B1 : !cir.ptr<!cir.func<!void ()>> loc(#loc200)
    cir.call %2() : (!cir.ptr<!cir.func<!void ()>>) -> () loc(#loc44)
    %3 = cir.get_global @goodG2B2 : !cir.ptr<!cir.func<!void ()>> loc(#loc201)
    cir.call %3() : (!cir.ptr<!cir.func<!void ()>>) -> () loc(#loc46)
    cir.return loc(#loc39)
  } loc(#loc197)
  cir.global "private" constant cir_private dsolocal @".str.1" = #cir.const_array<"data value is too large to perform arithmetic safely.\00" : !cir.array<!s8i x 54>> : !cir.array<!s8i x 54> {alignment = 1 : i64} loc(#loc48)
  cir.func no_proto internal private @goodB2G1() extra(#fn_attr1) {
    %0 = cir.alloca !s32i, !cir.ptr<!s32i>, ["result", init] {alignment = 4 : i64} loc(#loc203)
    %1 = cir.alloca !s32i, !cir.ptr<!s32i>, ["data"] {alignment = 4 : i64} loc(#loc204)
    %2 = cir.const #cir.int<0> : !s32i loc(#loc55)
    cir.store %2, %1 : !s32i, !cir.ptr<!s32i> loc(#loc205)
    cir.br ^bb1 loc(#loc206)
  ^bb1:  // pred: ^bb0
    %3 = cir.const #cir.int<6> : !s32i loc(#loc59)
    cir.br ^bb2 loc(#loc57)
  ^bb2:  // pred: ^bb1
    cir.switch.flat %3 : !s32i, ^bb9 [
      6: ^bb4
    ] loc(#loc57)
  ^bb3:  // no predecessors
    cir.br ^bb4 loc(#loc60)
  ^bb4:  // 2 preds: ^bb2, ^bb3
    %4 = cir.call @rand() : () -> !s32i extra(#fn_attr) loc(#loc61)
    %5 = cir.const #cir.int<1> : !s32i loc(#loc61)
    %6 = cir.binop(and, %4, %5) : !s32i loc(#loc61)
    %7 = cir.cast(int_to_bool, %6 : !s32i), !cir.bool loc(#loc61)
    cir.brcond %7 ^bb5, ^bb6 loc(#loc61)
  ^bb5:  // pred: ^bb4
    %8 = cir.call @rand() : () -> !s32i extra(#fn_attr) loc(#loc61)
    %9 = cir.cast(integral, %8 : !s32i), !u32i loc(#loc61)
    %10 = cir.const #cir.int<30> : !s32i loc(#loc61)
    %11 = cir.shift(left, %9 : !u32i, %10 : !s32i) -> !u32i loc(#loc61)
    %12 = cir.call @rand() : () -> !s32i extra(#fn_attr) loc(#loc61)
    %13 = cir.cast(integral, %12 : !s32i), !u32i loc(#loc61)
    %14 = cir.const #cir.int<15> : !s32i loc(#loc61)
    %15 = cir.shift(left, %13 : !u32i, %14 : !s32i) -> !u32i loc(#loc61)
    %16 = cir.binop(xor, %11, %15) : !u32i loc(#loc61)
    %17 = cir.call @rand() : () -> !s32i extra(#fn_attr) loc(#loc61)
    %18 = cir.cast(integral, %17 : !s32i), !u32i loc(#loc61)
    %19 = cir.binop(xor, %16, %18) : !u32i loc(#loc61)
    cir.br ^bb7(%19 : !u32i) loc(#loc61)
  ^bb6:  // pred: ^bb4
    %20 = cir.call @rand() : () -> !s32i extra(#fn_attr) loc(#loc61)
    %21 = cir.cast(integral, %20 : !s32i), !u32i loc(#loc61)
    %22 = cir.const #cir.int<30> : !s32i loc(#loc61)
    %23 = cir.shift(left, %21 : !u32i, %22 : !s32i) -> !u32i loc(#loc61)
    %24 = cir.call @rand() : () -> !s32i extra(#fn_attr) loc(#loc61)
    %25 = cir.cast(integral, %24 : !s32i), !u32i loc(#loc61)
    %26 = cir.const #cir.int<15> : !s32i loc(#loc61)
    %27 = cir.shift(left, %25 : !u32i, %26 : !s32i) -> !u32i loc(#loc61)
    %28 = cir.binop(xor, %23, %27) : !u32i loc(#loc61)
    %29 = cir.call @rand() : () -> !s32i extra(#fn_attr) loc(#loc61)
    %30 = cir.cast(integral, %29 : !s32i), !u32i loc(#loc61)
    %31 = cir.binop(xor, %28, %30) : !u32i loc(#loc61)
    %32 = cir.unary(minus, %31) : !u32i, !u32i loc(#loc61)
    %33 = cir.const #cir.int<1> : !s32i loc(#loc61)
    %34 = cir.cast(integral, %33 : !s32i), !u32i loc(#loc61)
    %35 = cir.binop(sub, %32, %34) : !u32i loc(#loc61)
    cir.br ^bb7(%35 : !u32i) loc(#loc61)
  ^bb7(%36: !u32i loc("CWE190_Integer_Overflow__int_rand_add_15.c":68:16)):  // 2 preds: ^bb5, ^bb6
    cir.br ^bb8 loc(#loc61)
  ^bb8:  // pred: ^bb7
    %37 = cir.cast(integral, %36 : !u32i), !s32i loc(#loc61)
    cir.store %37, %1 : !s32i, !cir.ptr<!s32i> loc(#loc207)
    cir.br ^bb10 loc(#loc63)
  ^bb9:  // pred: ^bb2
    %38 = cir.get_global @".str" : !cir.ptr<!cir.array<!s8i x 21>> loc(#loc64)
    %39 = cir.cast(array_to_ptrdecay, %38 : !cir.ptr<!cir.array<!s8i x 21>>), !cir.ptr<!s8i> loc(#loc64)
    cir.call @printLine(%39) : (!cir.ptr<!s8i>) -> () loc(#loc65)
    cir.br ^bb10 loc(#loc66)
  ^bb10:  // 2 preds: ^bb8, ^bb9
    cir.br ^bb11 loc(#loc58)
  ^bb11:  // pred: ^bb10
    cir.br ^bb12 loc(#loc208)
  ^bb12:  // pred: ^bb11
    %40 = cir.const #cir.int<8> : !s32i loc(#loc69)
    cir.br ^bb13 loc(#loc67)
  ^bb13:  // pred: ^bb12
    cir.switch.flat %40 : !s32i, ^bb16 [
      7: ^bb15
    ] loc(#loc67)
  ^bb14:  // no predecessors
    cir.br ^bb15 loc(#loc70)
  ^bb15:  // 2 preds: ^bb13, ^bb14
    %41 = cir.get_global @".str" : !cir.ptr<!cir.array<!s8i x 21>> loc(#loc71)
    %42 = cir.cast(array_to_ptrdecay, %41 : !cir.ptr<!cir.array<!s8i x 21>>), !cir.ptr<!s8i> loc(#loc71)
    cir.call @printLine(%42) : (!cir.ptr<!s8i>) -> () loc(#loc72)
    cir.br ^bb22 loc(#loc73)
  ^bb16:  // pred: ^bb13
    cir.br ^bb17 loc(#loc209)
  ^bb17:  // pred: ^bb16
    %43 = cir.load %1 : !cir.ptr<!s32i>, !s32i loc(#loc76)
    %44 = cir.const #cir.int<2147483647> : !s32i loc(#loc77)
    %45 = cir.cmp(lt, %43, %44) : !s32i, !cir.bool loc(#loc210)
    cir.brcond %45 ^bb18, ^bb19 loc(#loc211)
  ^bb18:  // pred: ^bb17
    %46 = cir.load %1 : !cir.ptr<!s32i>, !s32i loc(#loc81)
    %47 = cir.const #cir.int<1> : !s32i loc(#loc52)
    %48 = cir.binop(add, %46, %47) nsw : !s32i loc(#loc81)
    cir.store %48, %0 : !s32i, !cir.ptr<!s32i> loc(#loc203)
    %49 = cir.load %0 : !cir.ptr<!s32i>, !s32i loc(#loc82)
    cir.call @printIntLine(%49) : (!s32i) -> () loc(#loc83)
    cir.br ^bb20 loc(#loc79)
  ^bb19:  // pred: ^bb17
    %50 = cir.get_global @".str.1" : !cir.ptr<!cir.array<!s8i x 54>> loc(#loc48)
    %51 = cir.cast(array_to_ptrdecay, %50 : !cir.ptr<!cir.array<!s8i x 54>>), !cir.ptr<!s8i> loc(#loc48)
    cir.call @printLine(%51) : (!cir.ptr<!s8i>) -> () loc(#loc84)
    cir.br ^bb20 loc(#loc75)
  ^bb20:  // 2 preds: ^bb18, ^bb19
    cir.br ^bb21 loc(#loc75)
  ^bb21:  // pred: ^bb20
    cir.br ^bb22 loc(#loc85)
  ^bb22:  // 2 preds: ^bb15, ^bb21
    cir.br ^bb23 loc(#loc68)
  ^bb23:  // pred: ^bb22
    cir.return loc(#loc50)
  } loc(#loc202)
  cir.func no_proto internal private @goodB2G2() extra(#fn_attr1) {
    %0 = cir.alloca !s32i, !cir.ptr<!s32i>, ["result", init] {alignment = 4 : i64} loc(#loc213)
    %1 = cir.alloca !s32i, !cir.ptr<!s32i>, ["data"] {alignment = 4 : i64} loc(#loc214)
    %2 = cir.const #cir.int<0> : !s32i loc(#loc92)
    cir.store %2, %1 : !s32i, !cir.ptr<!s32i> loc(#loc215)
    cir.br ^bb1 loc(#loc216)
  ^bb1:  // pred: ^bb0
    %3 = cir.const #cir.int<6> : !s32i loc(#loc96)
    cir.br ^bb2 loc(#loc94)
  ^bb2:  // pred: ^bb1
    cir.switch.flat %3 : !s32i, ^bb9 [
      6: ^bb4
    ] loc(#loc94)
  ^bb3:  // no predecessors
    cir.br ^bb4 loc(#loc97)
  ^bb4:  // 2 preds: ^bb2, ^bb3
    %4 = cir.call @rand() : () -> !s32i extra(#fn_attr) loc(#loc98)
    %5 = cir.const #cir.int<1> : !s32i loc(#loc98)
    %6 = cir.binop(and, %4, %5) : !s32i loc(#loc98)
    %7 = cir.cast(int_to_bool, %6 : !s32i), !cir.bool loc(#loc98)
    cir.brcond %7 ^bb5, ^bb6 loc(#loc98)
  ^bb5:  // pred: ^bb4
    %8 = cir.call @rand() : () -> !s32i extra(#fn_attr) loc(#loc98)
    %9 = cir.cast(integral, %8 : !s32i), !u32i loc(#loc98)
    %10 = cir.const #cir.int<30> : !s32i loc(#loc98)
    %11 = cir.shift(left, %9 : !u32i, %10 : !s32i) -> !u32i loc(#loc98)
    %12 = cir.call @rand() : () -> !s32i extra(#fn_attr) loc(#loc98)
    %13 = cir.cast(integral, %12 : !s32i), !u32i loc(#loc98)
    %14 = cir.const #cir.int<15> : !s32i loc(#loc98)
    %15 = cir.shift(left, %13 : !u32i, %14 : !s32i) -> !u32i loc(#loc98)
    %16 = cir.binop(xor, %11, %15) : !u32i loc(#loc98)
    %17 = cir.call @rand() : () -> !s32i extra(#fn_attr) loc(#loc98)
    %18 = cir.cast(integral, %17 : !s32i), !u32i loc(#loc98)
    %19 = cir.binop(xor, %16, %18) : !u32i loc(#loc98)
    cir.br ^bb7(%19 : !u32i) loc(#loc98)
  ^bb6:  // pred: ^bb4
    %20 = cir.call @rand() : () -> !s32i extra(#fn_attr) loc(#loc98)
    %21 = cir.cast(integral, %20 : !s32i), !u32i loc(#loc98)
    %22 = cir.const #cir.int<30> : !s32i loc(#loc98)
    %23 = cir.shift(left, %21 : !u32i, %22 : !s32i) -> !u32i loc(#loc98)
    %24 = cir.call @rand() : () -> !s32i extra(#fn_attr) loc(#loc98)
    %25 = cir.cast(integral, %24 : !s32i), !u32i loc(#loc98)
    %26 = cir.const #cir.int<15> : !s32i loc(#loc98)
    %27 = cir.shift(left, %25 : !u32i, %26 : !s32i) -> !u32i loc(#loc98)
    %28 = cir.binop(xor, %23, %27) : !u32i loc(#loc98)
    %29 = cir.call @rand() : () -> !s32i extra(#fn_attr) loc(#loc98)
    %30 = cir.cast(integral, %29 : !s32i), !u32i loc(#loc98)
    %31 = cir.binop(xor, %28, %30) : !u32i loc(#loc98)
    %32 = cir.unary(minus, %31) : !u32i, !u32i loc(#loc98)
    %33 = cir.const #cir.int<1> : !s32i loc(#loc98)
    %34 = cir.cast(integral, %33 : !s32i), !u32i loc(#loc98)
    %35 = cir.binop(sub, %32, %34) : !u32i loc(#loc98)
    cir.br ^bb7(%35 : !u32i) loc(#loc98)
  ^bb7(%36: !u32i loc("CWE190_Integer_Overflow__int_rand_add_15.c":106:16)):  // 2 preds: ^bb5, ^bb6
    cir.br ^bb8 loc(#loc98)
  ^bb8:  // pred: ^bb7
    %37 = cir.cast(integral, %36 : !u32i), !s32i loc(#loc98)
    cir.store %37, %1 : !s32i, !cir.ptr<!s32i> loc(#loc217)
    cir.br ^bb10 loc(#loc100)
  ^bb9:  // pred: ^bb2
    %38 = cir.get_global @".str" : !cir.ptr<!cir.array<!s8i x 21>> loc(#loc101)
    %39 = cir.cast(array_to_ptrdecay, %38 : !cir.ptr<!cir.array<!s8i x 21>>), !cir.ptr<!s8i> loc(#loc101)
    cir.call @printLine(%39) : (!cir.ptr<!s8i>) -> () loc(#loc102)
    cir.br ^bb10 loc(#loc103)
  ^bb10:  // 2 preds: ^bb8, ^bb9
    cir.br ^bb11 loc(#loc95)
  ^bb11:  // pred: ^bb10
    cir.br ^bb12 loc(#loc218)
  ^bb12:  // pred: ^bb11
    %40 = cir.const #cir.int<7> : !s32i loc(#loc106)
    cir.br ^bb13 loc(#loc104)
  ^bb13:  // pred: ^bb12
    cir.switch.flat %40 : !s32i, ^bb21 [
      7: ^bb15
    ] loc(#loc104)
  ^bb14:  // no predecessors
    cir.br ^bb15 loc(#loc107)
  ^bb15:  // 2 preds: ^bb13, ^bb14
    cir.br ^bb16 loc(#loc219)
  ^bb16:  // pred: ^bb15
    %41 = cir.load %1 : !cir.ptr<!s32i>, !s32i loc(#loc110)
    %42 = cir.const #cir.int<2147483647> : !s32i loc(#loc111)
    %43 = cir.cmp(lt, %41, %42) : !s32i, !cir.bool loc(#loc220)
    cir.brcond %43 ^bb17, ^bb18 loc(#loc221)
  ^bb17:  // pred: ^bb16
    %44 = cir.load %1 : !cir.ptr<!s32i>, !s32i loc(#loc115)
    %45 = cir.const #cir.int<1> : !s32i loc(#loc89)
    %46 = cir.binop(add, %44, %45) nsw : !s32i loc(#loc115)
    cir.store %46, %0 : !s32i, !cir.ptr<!s32i> loc(#loc213)
    %47 = cir.load %0 : !cir.ptr<!s32i>, !s32i loc(#loc116)
    cir.call @printIntLine(%47) : (!s32i) -> () loc(#loc117)
    cir.br ^bb19 loc(#loc113)
  ^bb18:  // pred: ^bb16
    %48 = cir.get_global @".str.1" : !cir.ptr<!cir.array<!s8i x 54>> loc(#loc118)
    %49 = cir.cast(array_to_ptrdecay, %48 : !cir.ptr<!cir.array<!s8i x 54>>), !cir.ptr<!s8i> loc(#loc118)
    cir.call @printLine(%49) : (!cir.ptr<!s8i>) -> () loc(#loc119)
    cir.br ^bb19 loc(#loc109)
  ^bb19:  // 2 preds: ^bb17, ^bb18
    cir.br ^bb20 loc(#loc109)
  ^bb20:  // pred: ^bb19
    cir.br ^bb22 loc(#loc120)
  ^bb21:  // pred: ^bb13
    %50 = cir.get_global @".str" : !cir.ptr<!cir.array<!s8i x 21>> loc(#loc121)
    %51 = cir.cast(array_to_ptrdecay, %50 : !cir.ptr<!cir.array<!s8i x 21>>), !cir.ptr<!s8i> loc(#loc121)
    cir.call @printLine(%51) : (!cir.ptr<!s8i>) -> () loc(#loc122)
    cir.br ^bb22 loc(#loc123)
  ^bb22:  // 2 preds: ^bb20, ^bb21
    cir.br ^bb23 loc(#loc105)
  ^bb23:  // pred: ^bb22
    cir.return loc(#loc87)
  } loc(#loc212)
  cir.func no_proto internal private @goodG2B1() extra(#fn_attr1) {
    %0 = cir.alloca !s32i, !cir.ptr<!s32i>, ["result", init] {alignment = 4 : i64} loc(#loc223)
    %1 = cir.alloca !s32i, !cir.ptr<!s32i>, ["data"] {alignment = 4 : i64} loc(#loc224)
    %2 = cir.const #cir.int<0> : !s32i loc(#loc130)
    cir.store %2, %1 : !s32i, !cir.ptr<!s32i> loc(#loc225)
    cir.br ^bb1 loc(#loc226)
  ^bb1:  // pred: ^bb0
    %3 = cir.const #cir.int<5> : !s32i loc(#loc134)
    cir.br ^bb2 loc(#loc132)
  ^bb2:  // pred: ^bb1
    cir.switch.flat %3 : !s32i, ^bb5 [
      6: ^bb4
    ] loc(#loc132)
  ^bb3:  // no predecessors
    cir.br ^bb4 loc(#loc135)
  ^bb4:  // 2 preds: ^bb2, ^bb3
    %4 = cir.get_global @".str" : !cir.ptr<!cir.array<!s8i x 21>> loc(#loc136)
    %5 = cir.cast(array_to_ptrdecay, %4 : !cir.ptr<!cir.array<!s8i x 21>>), !cir.ptr<!s8i> loc(#loc136)
    cir.call @printLine(%5) : (!cir.ptr<!s8i>) -> () loc(#loc137)
    cir.br ^bb6 loc(#loc138)
  ^bb5:  // pred: ^bb2
    %6 = cir.const #cir.int<2> : !s32i loc(#loc139)
    cir.store %6, %1 : !s32i, !cir.ptr<!s32i> loc(#loc227)
    cir.br ^bb6 loc(#loc141)
  ^bb6:  // 2 preds: ^bb4, ^bb5
    cir.br ^bb7 loc(#loc133)
  ^bb7:  // pred: ^bb6
    cir.br ^bb8 loc(#loc228)
  ^bb8:  // pred: ^bb7
    %7 = cir.const #cir.int<7> : !s32i loc(#loc144)
    cir.br ^bb9 loc(#loc142)
  ^bb9:  // pred: ^bb8
    cir.switch.flat %7 : !s32i, ^bb14 [
      7: ^bb11
    ] loc(#loc142)
  ^bb10:  // no predecessors
    cir.br ^bb11 loc(#loc145)
  ^bb11:  // 2 preds: ^bb9, ^bb10
    cir.br ^bb12 loc(#loc229)
  ^bb12:  // pred: ^bb11
    %8 = cir.load %1 : !cir.ptr<!s32i>, !s32i loc(#loc148)
    %9 = cir.const #cir.int<1> : !s32i loc(#loc127)
    %10 = cir.binop(add, %8, %9) nsw : !s32i loc(#loc148)
    cir.store %10, %0 : !s32i, !cir.ptr<!s32i> loc(#loc223)
    %11 = cir.load %0 : !cir.ptr<!s32i>, !s32i loc(#loc149)
    cir.call @printIntLine(%11) : (!s32i) -> () loc(#loc150)
    cir.br ^bb13 loc(#loc147)
  ^bb13:  // pred: ^bb12
    cir.br ^bb15 loc(#loc151)
  ^bb14:  // pred: ^bb9
    %12 = cir.get_global @".str" : !cir.ptr<!cir.array<!s8i x 21>> loc(#loc152)
    %13 = cir.cast(array_to_ptrdecay, %12 : !cir.ptr<!cir.array<!s8i x 21>>), !cir.ptr<!s8i> loc(#loc152)
    cir.call @printLine(%13) : (!cir.ptr<!s8i>) -> () loc(#loc153)
    cir.br ^bb15 loc(#loc154)
  ^bb15:  // 2 preds: ^bb13, ^bb14
    cir.br ^bb16 loc(#loc143)
  ^bb16:  // pred: ^bb15
    cir.return loc(#loc125)
  } loc(#loc222)
  cir.func no_proto internal private @goodG2B2() extra(#fn_attr1) {
    %0 = cir.alloca !s32i, !cir.ptr<!s32i>, ["result", init] {alignment = 4 : i64} loc(#loc231)
    %1 = cir.alloca !s32i, !cir.ptr<!s32i>, ["data"] {alignment = 4 : i64} loc(#loc232)
    %2 = cir.const #cir.int<0> : !s32i loc(#loc161)
    cir.store %2, %1 : !s32i, !cir.ptr<!s32i> loc(#loc233)
    cir.br ^bb1 loc(#loc234)
  ^bb1:  // pred: ^bb0
    %3 = cir.const #cir.int<6> : !s32i loc(#loc165)
    cir.br ^bb2 loc(#loc163)
  ^bb2:  // pred: ^bb1
    cir.switch.flat %3 : !s32i, ^bb5 [
      6: ^bb4
    ] loc(#loc163)
  ^bb3:  // no predecessors
    cir.br ^bb4 loc(#loc166)
  ^bb4:  // 2 preds: ^bb2, ^bb3
    %4 = cir.const #cir.int<2> : !s32i loc(#loc167)
    cir.store %4, %1 : !s32i, !cir.ptr<!s32i> loc(#loc235)
    cir.br ^bb6 loc(#loc169)
  ^bb5:  // pred: ^bb2
    %5 = cir.get_global @".str" : !cir.ptr<!cir.array<!s8i x 21>> loc(#loc170)
    %6 = cir.cast(array_to_ptrdecay, %5 : !cir.ptr<!cir.array<!s8i x 21>>), !cir.ptr<!s8i> loc(#loc170)
    cir.call @printLine(%6) : (!cir.ptr<!s8i>) -> () loc(#loc171)
    cir.br ^bb6 loc(#loc172)
  ^bb6:  // 2 preds: ^bb4, ^bb5
    cir.br ^bb7 loc(#loc164)
  ^bb7:  // pred: ^bb6
    cir.br ^bb8 loc(#loc236)
  ^bb8:  // pred: ^bb7
    %7 = cir.const #cir.int<7> : !s32i loc(#loc175)
    cir.br ^bb9 loc(#loc173)
  ^bb9:  // pred: ^bb8
    cir.switch.flat %7 : !s32i, ^bb14 [
      7: ^bb11
    ] loc(#loc173)
  ^bb10:  // no predecessors
    cir.br ^bb11 loc(#loc176)
  ^bb11:  // 2 preds: ^bb9, ^bb10
    cir.br ^bb12 loc(#loc237)
  ^bb12:  // pred: ^bb11
    %8 = cir.load %1 : !cir.ptr<!s32i>, !s32i loc(#loc179)
    %9 = cir.const #cir.int<1> : !s32i loc(#loc158)
    %10 = cir.binop(add, %8, %9) nsw : !s32i loc(#loc179)
    cir.store %10, %0 : !s32i, !cir.ptr<!s32i> loc(#loc231)
    %11 = cir.load %0 : !cir.ptr<!s32i>, !s32i loc(#loc180)
    cir.call @printIntLine(%11) : (!s32i) -> () loc(#loc181)
    cir.br ^bb13 loc(#loc178)
  ^bb13:  // pred: ^bb12
    cir.br ^bb15 loc(#loc182)
  ^bb14:  // pred: ^bb9
    %12 = cir.get_global @".str" : !cir.ptr<!cir.array<!s8i x 21>> loc(#loc183)
    %13 = cir.cast(array_to_ptrdecay, %12 : !cir.ptr<!cir.array<!s8i x 21>>), !cir.ptr<!s8i> loc(#loc183)
    cir.call @printLine(%13) : (!cir.ptr<!s8i>) -> () loc(#loc184)
    cir.br ^bb15 loc(#loc185)
  ^bb15:  // 2 preds: ^bb13, ^bb14
    cir.br ^bb16 loc(#loc174)
  ^bb16:  // pred: ^bb15
    cir.return loc(#loc156)
  } loc(#loc230)
} loc(#loc)
#loc = loc("/home/ladisgin/git_proj/juliet-c/testcases/CWE190_Integer_Overflow/s04/CWE190_Integer_Overflow__int_rand_add_15.c":0:0)
#loc1 = loc("/usr/include/stdlib.h":573:1)
#loc2 = loc("/usr/include/stdlib.h":573:24)
#loc3 = loc("../../../testcasesupport/std_testcase_io.h":14:1)
#loc4 = loc("../../../testcasesupport/std_testcase_io.h":14:33)
#loc5 = loc("CWE190_Integer_Overflow__int_rand_add_15.c":35:19)
#loc6 = loc("../../../testcasesupport/std_testcase_io.h":18:1)
#loc7 = loc("../../../testcasesupport/std_testcase_io.h":18:33)
#loc8 = loc("CWE190_Integer_Overflow__int_rand_add_15.c":22:1)
#loc9 = loc("CWE190_Integer_Overflow__int_rand_add_15.c":52:1)
#loc10 = loc("CWE190_Integer_Overflow__int_rand_add_15.c":43:9)
#loc11 = loc("CWE190_Integer_Overflow__int_rand_add_15.c":43:29)
#loc12 = loc("CWE190_Integer_Overflow__int_rand_add_15.c":24:5)
#loc13 = loc("CWE190_Integer_Overflow__int_rand_add_15.c":24:9)
#loc14 = loc("CWE190_Integer_Overflow__int_rand_add_15.c":26:12)
#loc15 = loc("CWE190_Integer_Overflow__int_rand_add_15.c":26:5)
#loc16 = loc("CWE190_Integer_Overflow__int_rand_add_15.c":27:5)
#loc17 = loc("CWE190_Integer_Overflow__int_rand_add_15.c":37:5)
#loc18 = loc("CWE190_Integer_Overflow__int_rand_add_15.c":27:12)
#loc19 = loc("CWE190_Integer_Overflow__int_rand_add_15.c":29:5)
#loc21 = loc("CWE190_Integer_Overflow__int_rand_add_15.c":31:9)
#loc22 = loc("CWE190_Integer_Overflow__int_rand_add_15.c":32:9)
#loc23 = loc("CWE190_Integer_Overflow__int_rand_add_15.c":35:9)
#loc24 = loc("CWE190_Integer_Overflow__int_rand_add_15.c":36:9)
#loc25 = loc("CWE190_Integer_Overflow__int_rand_add_15.c":38:5)
#loc26 = loc("CWE190_Integer_Overflow__int_rand_add_15.c":51:5)
#loc27 = loc("CWE190_Integer_Overflow__int_rand_add_15.c":38:12)
#loc28 = loc("CWE190_Integer_Overflow__int_rand_add_15.c":40:5)
#loc29 = loc("CWE190_Integer_Overflow__int_rand_add_15.c":41:5)
#loc30 = loc("CWE190_Integer_Overflow__int_rand_add_15.c":45:5)
#loc31 = loc("CWE190_Integer_Overflow__int_rand_add_15.c":43:22)
#loc32 = loc("CWE190_Integer_Overflow__int_rand_add_15.c":44:22)
#loc33 = loc("CWE190_Integer_Overflow__int_rand_add_15.c":44:9)
#loc34 = loc("CWE190_Integer_Overflow__int_rand_add_15.c":46:5)
#loc35 = loc("CWE190_Integer_Overflow__int_rand_add_15.c":49:19)
#loc36 = loc("CWE190_Integer_Overflow__int_rand_add_15.c":49:9)
#loc37 = loc("CWE190_Integer_Overflow__int_rand_add_15.c":50:9)
#loc38 = loc("CWE190_Integer_Overflow__int_rand_add_15.c":200:1)
#loc39 = loc("CWE190_Integer_Overflow__int_rand_add_15.c":206:1)
#loc40 = loc("CWE190_Integer_Overflow__int_rand_add_15.c":202:5)
#loc41 = loc("CWE190_Integer_Overflow__int_rand_add_15.c":202:14)
#loc42 = loc("CWE190_Integer_Overflow__int_rand_add_15.c":203:5)
#loc43 = loc("CWE190_Integer_Overflow__int_rand_add_15.c":203:14)
#loc44 = loc("CWE190_Integer_Overflow__int_rand_add_15.c":204:5)
#loc45 = loc("CWE190_Integer_Overflow__int_rand_add_15.c":204:14)
#loc46 = loc("CWE190_Integer_Overflow__int_rand_add_15.c":205:5)
#loc47 = loc("CWE190_Integer_Overflow__int_rand_add_15.c":205:14)
#loc48 = loc("CWE190_Integer_Overflow__int_rand_add_15.c":90:23)
#loc49 = loc("CWE190_Integer_Overflow__int_rand_add_15.c":59:1)
#loc50 = loc("CWE190_Integer_Overflow__int_rand_add_15.c":94:1)
#loc51 = loc("CWE190_Integer_Overflow__int_rand_add_15.c":85:13)
#loc52 = loc("CWE190_Integer_Overflow__int_rand_add_15.c":85:33)
#loc53 = loc("CWE190_Integer_Overflow__int_rand_add_15.c":61:5)
#loc54 = loc("CWE190_Integer_Overflow__int_rand_add_15.c":61:9)
#loc55 = loc("CWE190_Integer_Overflow__int_rand_add_15.c":63:12)
#loc56 = loc("CWE190_Integer_Overflow__int_rand_add_15.c":63:5)
#loc57 = loc("CWE190_Integer_Overflow__int_rand_add_15.c":64:5)
#loc58 = loc("CWE190_Integer_Overflow__int_rand_add_15.c":74:5)
#loc59 = loc("CWE190_Integer_Overflow__int_rand_add_15.c":64:12)
#loc60 = loc("CWE190_Integer_Overflow__int_rand_add_15.c":66:5)
#loc62 = loc("CWE190_Integer_Overflow__int_rand_add_15.c":68:9)
#loc63 = loc("CWE190_Integer_Overflow__int_rand_add_15.c":69:9)
#loc64 = loc("CWE190_Integer_Overflow__int_rand_add_15.c":72:19)
#loc65 = loc("CWE190_Integer_Overflow__int_rand_add_15.c":72:9)
#loc66 = loc("CWE190_Integer_Overflow__int_rand_add_15.c":73:9)
#loc67 = loc("CWE190_Integer_Overflow__int_rand_add_15.c":75:5)
#loc68 = loc("CWE190_Integer_Overflow__int_rand_add_15.c":93:5)
#loc69 = loc("CWE190_Integer_Overflow__int_rand_add_15.c":75:12)
#loc70 = loc("CWE190_Integer_Overflow__int_rand_add_15.c":77:5)
#loc71 = loc("CWE190_Integer_Overflow__int_rand_add_15.c":79:19)
#loc72 = loc("CWE190_Integer_Overflow__int_rand_add_15.c":79:9)
#loc73 = loc("CWE190_Integer_Overflow__int_rand_add_15.c":80:9)
#loc74 = loc("CWE190_Integer_Overflow__int_rand_add_15.c":83:9)
#loc75 = loc("CWE190_Integer_Overflow__int_rand_add_15.c":91:9)
#loc76 = loc("CWE190_Integer_Overflow__int_rand_add_15.c":83:13)
#loc77 = loc("CWE190_Integer_Overflow__int_rand_add_15.c":83:20)
#loc78 = loc("CWE190_Integer_Overflow__int_rand_add_15.c":84:9)
#loc79 = loc("CWE190_Integer_Overflow__int_rand_add_15.c":87:9)
#loc80 = loc("CWE190_Integer_Overflow__int_rand_add_15.c":89:9)
#loc81 = loc("CWE190_Integer_Overflow__int_rand_add_15.c":85:26)
#loc82 = loc("CWE190_Integer_Overflow__int_rand_add_15.c":86:26)
#loc83 = loc("CWE190_Integer_Overflow__int_rand_add_15.c":86:13)
#loc84 = loc("CWE190_Integer_Overflow__int_rand_add_15.c":90:13)
#loc85 = loc("CWE190_Integer_Overflow__int_rand_add_15.c":92:9)
#loc86 = loc("CWE190_Integer_Overflow__int_rand_add_15.c":97:1)
#loc87 = loc("CWE190_Integer_Overflow__int_rand_add_15.c":132:1)
#loc88 = loc("CWE190_Integer_Overflow__int_rand_add_15.c":119:13)
#loc89 = loc("CWE190_Integer_Overflow__int_rand_add_15.c":119:33)
#loc90 = loc("CWE190_Integer_Overflow__int_rand_add_15.c":99:5)
#loc91 = loc("CWE190_Integer_Overflow__int_rand_add_15.c":99:9)
#loc92 = loc("CWE190_Integer_Overflow__int_rand_add_15.c":101:12)
#loc93 = loc("CWE190_Integer_Overflow__int_rand_add_15.c":101:5)
#loc94 = loc("CWE190_Integer_Overflow__int_rand_add_15.c":102:5)
#loc95 = loc("CWE190_Integer_Overflow__int_rand_add_15.c":112:5)
#loc96 = loc("CWE190_Integer_Overflow__int_rand_add_15.c":102:12)
#loc97 = loc("CWE190_Integer_Overflow__int_rand_add_15.c":104:5)
#loc99 = loc("CWE190_Integer_Overflow__int_rand_add_15.c":106:9)
#loc100 = loc("CWE190_Integer_Overflow__int_rand_add_15.c":107:9)
#loc101 = loc("CWE190_Integer_Overflow__int_rand_add_15.c":110:19)
#loc102 = loc("CWE190_Integer_Overflow__int_rand_add_15.c":110:9)
#loc103 = loc("CWE190_Integer_Overflow__int_rand_add_15.c":111:9)
#loc104 = loc("CWE190_Integer_Overflow__int_rand_add_15.c":113:5)
#loc105 = loc("CWE190_Integer_Overflow__int_rand_add_15.c":131:5)
#loc106 = loc("CWE190_Integer_Overflow__int_rand_add_15.c":113:12)
#loc107 = loc("CWE190_Integer_Overflow__int_rand_add_15.c":115:5)
#loc108 = loc("CWE190_Integer_Overflow__int_rand_add_15.c":117:9)
#loc109 = loc("CWE190_Integer_Overflow__int_rand_add_15.c":125:9)
#loc110 = loc("CWE190_Integer_Overflow__int_rand_add_15.c":117:13)
#loc111 = loc("CWE190_Integer_Overflow__int_rand_add_15.c":117:20)
#loc112 = loc("CWE190_Integer_Overflow__int_rand_add_15.c":118:9)
#loc113 = loc("CWE190_Integer_Overflow__int_rand_add_15.c":121:9)
#loc114 = loc("CWE190_Integer_Overflow__int_rand_add_15.c":123:9)
#loc115 = loc("CWE190_Integer_Overflow__int_rand_add_15.c":119:26)
#loc116 = loc("CWE190_Integer_Overflow__int_rand_add_15.c":120:26)
#loc117 = loc("CWE190_Integer_Overflow__int_rand_add_15.c":120:13)
#loc118 = loc("CWE190_Integer_Overflow__int_rand_add_15.c":124:23)
#loc119 = loc("CWE190_Integer_Overflow__int_rand_add_15.c":124:13)
#loc120 = loc("CWE190_Integer_Overflow__int_rand_add_15.c":126:9)
#loc121 = loc("CWE190_Integer_Overflow__int_rand_add_15.c":129:19)
#loc122 = loc("CWE190_Integer_Overflow__int_rand_add_15.c":129:9)
#loc123 = loc("CWE190_Integer_Overflow__int_rand_add_15.c":130:9)
#loc124 = loc("CWE190_Integer_Overflow__int_rand_add_15.c":135:1)
#loc125 = loc("CWE190_Integer_Overflow__int_rand_add_15.c":165:1)
#loc126 = loc("CWE190_Integer_Overflow__int_rand_add_15.c":156:9)
#loc127 = loc("CWE190_Integer_Overflow__int_rand_add_15.c":156:29)
#loc128 = loc("CWE190_Integer_Overflow__int_rand_add_15.c":137:5)
#loc129 = loc("CWE190_Integer_Overflow__int_rand_add_15.c":137:9)
#loc130 = loc("CWE190_Integer_Overflow__int_rand_add_15.c":139:12)
#loc131 = loc("CWE190_Integer_Overflow__int_rand_add_15.c":139:5)
#loc132 = loc("CWE190_Integer_Overflow__int_rand_add_15.c":140:5)
#loc133 = loc("CWE190_Integer_Overflow__int_rand_add_15.c":150:5)
#loc134 = loc("CWE190_Integer_Overflow__int_rand_add_15.c":140:12)
#loc135 = loc("CWE190_Integer_Overflow__int_rand_add_15.c":142:5)
#loc136 = loc("CWE190_Integer_Overflow__int_rand_add_15.c":144:19)
#loc137 = loc("CWE190_Integer_Overflow__int_rand_add_15.c":144:9)
#loc138 = loc("CWE190_Integer_Overflow__int_rand_add_15.c":145:9)
#loc139 = loc("CWE190_Integer_Overflow__int_rand_add_15.c":148:16)
#loc140 = loc("CWE190_Integer_Overflow__int_rand_add_15.c":148:9)
#loc141 = loc("CWE190_Integer_Overflow__int_rand_add_15.c":149:9)
#loc142 = loc("CWE190_Integer_Overflow__int_rand_add_15.c":151:5)
#loc143 = loc("CWE190_Integer_Overflow__int_rand_add_15.c":164:5)
#loc144 = loc("CWE190_Integer_Overflow__int_rand_add_15.c":151:12)
#loc145 = loc("CWE190_Integer_Overflow__int_rand_add_15.c":153:5)
#loc146 = loc("CWE190_Integer_Overflow__int_rand_add_15.c":154:5)
#loc147 = loc("CWE190_Integer_Overflow__int_rand_add_15.c":158:5)
#loc148 = loc("CWE190_Integer_Overflow__int_rand_add_15.c":156:22)
#loc149 = loc("CWE190_Integer_Overflow__int_rand_add_15.c":157:22)
#loc150 = loc("CWE190_Integer_Overflow__int_rand_add_15.c":157:9)
#loc151 = loc("CWE190_Integer_Overflow__int_rand_add_15.c":159:5)
#loc152 = loc("CWE190_Integer_Overflow__int_rand_add_15.c":162:19)
#loc153 = loc("CWE190_Integer_Overflow__int_rand_add_15.c":162:9)
#loc154 = loc("CWE190_Integer_Overflow__int_rand_add_15.c":163:9)
#loc155 = loc("CWE190_Integer_Overflow__int_rand_add_15.c":168:1)
#loc156 = loc("CWE190_Integer_Overflow__int_rand_add_15.c":198:1)
#loc157 = loc("CWE190_Integer_Overflow__int_rand_add_15.c":189:9)
#loc158 = loc("CWE190_Integer_Overflow__int_rand_add_15.c":189:29)
#loc159 = loc("CWE190_Integer_Overflow__int_rand_add_15.c":170:5)
#loc160 = loc("CWE190_Integer_Overflow__int_rand_add_15.c":170:9)
#loc161 = loc("CWE190_Integer_Overflow__int_rand_add_15.c":172:12)
#loc162 = loc("CWE190_Integer_Overflow__int_rand_add_15.c":172:5)
#loc163 = loc("CWE190_Integer_Overflow__int_rand_add_15.c":173:5)
#loc164 = loc("CWE190_Integer_Overflow__int_rand_add_15.c":183:5)
#loc165 = loc("CWE190_Integer_Overflow__int_rand_add_15.c":173:12)
#loc166 = loc("CWE190_Integer_Overflow__int_rand_add_15.c":175:5)
#loc167 = loc("CWE190_Integer_Overflow__int_rand_add_15.c":177:16)
#loc168 = loc("CWE190_Integer_Overflow__int_rand_add_15.c":177:9)
#loc169 = loc("CWE190_Integer_Overflow__int_rand_add_15.c":178:9)
#loc170 = loc("CWE190_Integer_Overflow__int_rand_add_15.c":181:19)
#loc171 = loc("CWE190_Integer_Overflow__int_rand_add_15.c":181:9)
#loc172 = loc("CWE190_Integer_Overflow__int_rand_add_15.c":182:9)
#loc173 = loc("CWE190_Integer_Overflow__int_rand_add_15.c":184:5)
#loc174 = loc("CWE190_Integer_Overflow__int_rand_add_15.c":197:5)
#loc175 = loc("CWE190_Integer_Overflow__int_rand_add_15.c":184:12)
#loc176 = loc("CWE190_Integer_Overflow__int_rand_add_15.c":186:5)
#loc177 = loc("CWE190_Integer_Overflow__int_rand_add_15.c":187:5)
#loc178 = loc("CWE190_Integer_Overflow__int_rand_add_15.c":191:5)
#loc179 = loc("CWE190_Integer_Overflow__int_rand_add_15.c":189:22)
#loc180 = loc("CWE190_Integer_Overflow__int_rand_add_15.c":190:22)
#loc181 = loc("CWE190_Integer_Overflow__int_rand_add_15.c":190:9)
#loc182 = loc("CWE190_Integer_Overflow__int_rand_add_15.c":192:5)
#loc183 = loc("CWE190_Integer_Overflow__int_rand_add_15.c":195:19)
#loc184 = loc("CWE190_Integer_Overflow__int_rand_add_15.c":195:9)
#loc185 = loc("CWE190_Integer_Overflow__int_rand_add_15.c":196:9)
#loc186 = loc(fused[#loc1, #loc2])
#loc187 = loc(fused[#loc3, #loc4])
#loc188 = loc(fused[#loc6, #loc7])
#loc189 = loc(fused[#loc8, #loc9])
#loc190 = loc(fused[#loc10, #loc11])
#loc191 = loc(fused[#loc12, #loc13])
#loc192 = loc(fused[#loc15, #loc14])
#loc193 = loc(fused[#loc16, #loc17])
#loc194 = loc(fused[#loc21, #loc20])
#loc195 = loc(fused[#loc25, #loc26])
#loc196 = loc(fused[#loc29, #loc30])
#loc197 = loc(fused[#loc38, #loc39])
#loc198 = loc(fused[#loc40, #loc41])
#loc199 = loc(fused[#loc42, #loc43])
#loc200 = loc(fused[#loc44, #loc45])
#loc201 = loc(fused[#loc46, #loc47])
#loc202 = loc(fused[#loc49, #loc50])
#loc203 = loc(fused[#loc51, #loc52])
#loc204 = loc(fused[#loc53, #loc54])
#loc205 = loc(fused[#loc56, #loc55])
#loc206 = loc(fused[#loc57, #loc58])
#loc207 = loc(fused[#loc62, #loc61])
#loc208 = loc(fused[#loc67, #loc68])
#loc209 = loc(fused[#loc74, #loc75])
#loc210 = loc(fused[#loc76, #loc77])
#loc211 = loc(fused[#loc78, #loc79, #loc80, #loc75])
#loc212 = loc(fused[#loc86, #loc87])
#loc213 = loc(fused[#loc88, #loc89])
#loc214 = loc(fused[#loc90, #loc91])
#loc215 = loc(fused[#loc93, #loc92])
#loc216 = loc(fused[#loc94, #loc95])
#loc217 = loc(fused[#loc99, #loc98])
#loc218 = loc(fused[#loc104, #loc105])
#loc219 = loc(fused[#loc108, #loc109])
#loc220 = loc(fused[#loc110, #loc111])
#loc221 = loc(fused[#loc112, #loc113, #loc114, #loc109])
#loc222 = loc(fused[#loc124, #loc125])
#loc223 = loc(fused[#loc126, #loc127])
#loc224 = loc(fused[#loc128, #loc129])
#loc225 = loc(fused[#loc131, #loc130])
#loc226 = loc(fused[#loc132, #loc133])
#loc227 = loc(fused[#loc140, #loc139])
#loc228 = loc(fused[#loc142, #loc143])
#loc229 = loc(fused[#loc146, #loc147])
#loc230 = loc(fused[#loc155, #loc156])
#loc231 = loc(fused[#loc157, #loc158])
#loc232 = loc(fused[#loc159, #loc160])
#loc233 = loc(fused[#loc162, #loc161])
#loc234 = loc(fused[#loc163, #loc164])
#loc235 = loc(fused[#loc168, #loc167])
#loc236 = loc(fused[#loc173, #loc174])
#loc237 = loc(fused[#loc177, #loc178])
