!s32i = !cir.int<s, 32>
!s8i = !cir.int<s, 8>
!u64i = !cir.int<u, 64>
!void = !cir.void
#fn_attr = #cir<extra({nothrow = #cir.nothrow})>
#fn_attr1 = #cir<extra({inline = #cir.inline<no>, nothrow = #cir.nothrow, optnone = #cir.optnone})>
module @"/home/ladisgin/git_proj/test_projects/juliet-c/testcases/CWE122_Heap_Based_Buffer_Overflow/s06/CWE122_Heap_Based_Buffer_Overflow__c_CWE193_char_cpy_15.c" attributes {cir.lang = #cir.lang<c>, cir.sob = #cir.signed_overflow_behavior<undefined>, cir.triple = "x86_64-unknown-linux-gnu", dlti.dl_spec = #dlti.dl_spec<#dlti.dl_entry<f80, dense<128> : vector<2xi64>>, #dlti.dl_entry<i1, dense<8> : vector<2xi64>>, #dlti.dl_entry<!llvm.ptr, dense<64> : vector<4xi64>>, #dlti.dl_entry<i8, dense<8> : vector<2xi64>>, #dlti.dl_entry<i16, dense<16> : vector<2xi64>>, #dlti.dl_entry<i32, dense<32> : vector<2xi64>>, #dlti.dl_entry<f64, dense<64> : vector<2xi64>>, #dlti.dl_entry<f16, dense<16> : vector<2xi64>>, #dlti.dl_entry<!llvm.ptr<270>, dense<32> : vector<4xi64>>, #dlti.dl_entry<f128, dense<128> : vector<2xi64>>, #dlti.dl_entry<!llvm.ptr<271>, dense<32> : vector<4xi64>>, #dlti.dl_entry<!llvm.ptr<272>, dense<64> : vector<4xi64>>, #dlti.dl_entry<i64, dense<64> : vector<2xi64>>, #dlti.dl_entry<i128, dense<128> : vector<2xi64>>, #dlti.dl_entry<"dlti.stack_alignment", 128 : i64>, #dlti.dl_entry<"dlti.endianness", "little">>, llvm.data_layout = "e-m:e-p270:32:32-p271:32:32-p272:64:64-i64:64-i128:128-f80:128-n8:16:32:64-S128"} {
  cir.func private  @malloc(!u64i) -> !cir.ptr<!void> extra(#fn_attr) loc(#loc138)
  cir.func private  @exit(!s32i) extra(#fn_attr) loc(#loc139)
  cir.func private  @printLine(!cir.ptr<!s8i>) loc(#loc140)
  cir.global "private"  constant internal dsolocal @".str" = #cir.const_array<"Benign, fixed string\00" : !cir.array<!s8i x 21>> : !cir.array<!s8i x 21> {alignment = 1 : i64} loc(#loc7)
  cir.func private  @strcpy(!cir.ptr<!s8i>, !cir.ptr<!s8i>) -> !cir.ptr<!s8i> extra(#fn_attr) loc(#loc141)
  cir.func private  @free(!cir.ptr<!void>) extra(#fn_attr) loc(#loc142)
  cir.func no_proto  @CWE122_Heap_Based_Buffer_Overflow__c_CWE193_char_cpy_15_bad() extra(#fn_attr1) {
    %0 = cir.alloca !cir.ptr<!s8i>, !cir.ptr<!cir.ptr<!s8i>>, ["data"] {alignment = 8 : i64} loc(#loc144)
    %1 = cir.const #cir.ptr<null> : !cir.ptr<!s8i> loc(#loc16)
    cir.store %1, %0 : !cir.ptr<!s8i>, !cir.ptr<!cir.ptr<!s8i>> loc(#loc145)
    cir.scope {
      %2 = cir.const #cir.int<6> : !s32i loc(#loc20)
      cir.switch (%2 : !s32i) [
      case (equal, 6) {
        %3 = cir.get_global @malloc : !cir.ptr<!cir.func<!cir.ptr<!void> (!u64i)>> loc(#loc21)
        %4 = cir.const #cir.int<10> : !s32i loc(#loc22)
        %5 = cir.cast(integral, %4 : !s32i), !u64i loc(#loc22)
        %6 = cir.const #cir.int<1> : !u64i loc(#loc147)
        %7 = cir.binop(mul, %5, %6) : !u64i loc(#loc148)
        %8 = cir.call @malloc(%7) : (!u64i) -> !cir.ptr<!void> extra(#fn_attr) loc(#loc21)
        %9 = cir.cast(bitcast, %8 : !cir.ptr<!void>), !cir.ptr<!s8i> loc(#loc149)
        cir.store %9, %0 : !cir.ptr<!s8i>, !cir.ptr<!cir.ptr<!s8i>> loc(#loc150)
        cir.scope {
          %10 = cir.load %0 : !cir.ptr<!cir.ptr<!s8i>>, !cir.ptr<!s8i> loc(#loc29)
          %11 = cir.const #cir.ptr<null> : !cir.ptr<!void> loc(#loc30)
          %12 = cir.cast(bitcast, %11 : !cir.ptr<!void>), !cir.ptr<!s8i> loc(#loc30)
          %13 = cir.cmp(eq, %10, %12) : !cir.ptr<!s8i>, !s32i loc(#loc152)
          %14 = cir.cast(int_to_bool, %13 : !s32i), !cir.bool loc(#loc31)
          cir.if %14 {
            %15 = cir.get_global @exit : !cir.ptr<!cir.func<!void (!s32i)>> loc(#loc33)
            %16 = cir.const #cir.int<1> : !s32i loc(#loc34)
            %17 = cir.unary(minus, %16) : !s32i, !s32i loc(#loc35)
            cir.call @exit(%17) : (!s32i) -> () extra(#fn_attr) loc(#loc33)
          } loc(#loc153)
        } loc(#loc151)
        cir.break loc(#loc36)
      },
      case (default) {
        %3 = cir.get_global @".str" : !cir.ptr<!cir.array<!s8i x 21>> loc(#loc7)
        %4 = cir.cast(array_to_ptrdecay, %3 : !cir.ptr<!cir.array<!s8i x 21>>), !cir.ptr<!s8i> loc(#loc7)
        cir.call @printLine(%4) : (!cir.ptr<!s8i>) -> () loc(#loc37)
        cir.break loc(#loc38)
      }
      ] loc(#loc18)
    } loc(#loc146)
    cir.scope {
      %2 = cir.alloca !cir.array<!s8i x 11>, !cir.ptr<!cir.array<!s8i x 11>>, ["source"] {alignment = 1 : i64} loc(#loc155)
      %3 = cir.const #cir.const_array<"AAAAAAAAAA\00" : !cir.array<!s8i x 11>> : !cir.array<!s8i x 11> loc(#loc155)
      cir.store %3, %2 : !cir.array<!s8i x 11>, !cir.ptr<!cir.array<!s8i x 11>> loc(#loc155)
      %4 = cir.get_global @strcpy : !cir.ptr<!cir.func<!cir.ptr<!s8i> (!cir.ptr<!s8i>, !cir.ptr<!s8i>)>> loc(#loc43)
      %5 = cir.load %0 : !cir.ptr<!cir.ptr<!s8i>>, !cir.ptr<!s8i> loc(#loc44)
      %6 = cir.cast(array_to_ptrdecay, %2 : !cir.ptr<!cir.array<!s8i x 11>>), !cir.ptr<!s8i> loc(#loc45)
      %7 = cir.call @strcpy(%5, %6) : (!cir.ptr<!s8i>, !cir.ptr<!s8i>) -> !cir.ptr<!s8i> extra(#fn_attr) loc(#loc43)
      %8 = cir.load %0 : !cir.ptr<!cir.ptr<!s8i>>, !cir.ptr<!s8i> loc(#loc46)
      cir.call @printLine(%8) : (!cir.ptr<!s8i>) -> () loc(#loc47)
      %9 = cir.get_global @free : !cir.ptr<!cir.func<!void (!cir.ptr<!void>)>> loc(#loc48)
      %10 = cir.load %0 : !cir.ptr<!cir.ptr<!s8i>>, !cir.ptr<!s8i> loc(#loc49)
      %11 = cir.cast(bitcast, %10 : !cir.ptr<!s8i>), !cir.ptr<!void> loc(#loc49)
      cir.call @free(%11) : (!cir.ptr<!void>) -> () extra(#fn_attr) loc(#loc48)
    } loc(#loc154)
    cir.return loc(#loc13)
  } loc(#loc143)
  cir.func no_proto  @CWE122_Heap_Based_Buffer_Overflow__c_CWE193_char_cpy_15_good() extra(#fn_attr1) {
    %0 = cir.get_global @goodG2B1 : !cir.ptr<!cir.func<!void ()>> loc(#loc157)
    cir.call %0() : (!cir.ptr<!cir.func<!void ()>>) -> () loc(#loc52)
    %1 = cir.get_global @goodG2B2 : !cir.ptr<!cir.func<!void ()>> loc(#loc158)
    cir.call %1() : (!cir.ptr<!cir.func<!void ()>>) -> () loc(#loc54)
    cir.return loc(#loc51)
  } loc(#loc156)
  cir.func no_proto internal private  @goodG2B1() extra(#fn_attr1) {
    %0 = cir.alloca !cir.ptr<!s8i>, !cir.ptr<!cir.ptr<!s8i>>, ["data"] {alignment = 8 : i64} loc(#loc160)
    %1 = cir.const #cir.ptr<null> : !cir.ptr<!s8i> loc(#loc60)
    cir.store %1, %0 : !cir.ptr<!s8i>, !cir.ptr<!cir.ptr<!s8i>> loc(#loc161)
    cir.scope {
      %2 = cir.const #cir.int<5> : !s32i loc(#loc64)
      cir.switch (%2 : !s32i) [
      case (equal, 6) {
        %3 = cir.get_global @".str" : !cir.ptr<!cir.array<!s8i x 21>> loc(#loc65)
        %4 = cir.cast(array_to_ptrdecay, %3 : !cir.ptr<!cir.array<!s8i x 21>>), !cir.ptr<!s8i> loc(#loc65)
        cir.call @printLine(%4) : (!cir.ptr<!s8i>) -> () loc(#loc66)
        cir.break loc(#loc67)
      },
      case (default) {
        %3 = cir.get_global @malloc : !cir.ptr<!cir.func<!cir.ptr<!void> (!u64i)>> loc(#loc68)
        %4 = cir.const #cir.int<10> : !s32i loc(#loc69)
        %5 = cir.const #cir.int<1> : !s32i loc(#loc70)
        %6 = cir.binop(add, %4, %5) nsw : !s32i loc(#loc69)
        %7 = cir.cast(integral, %6 : !s32i), !u64i loc(#loc69)
        %8 = cir.const #cir.int<1> : !u64i loc(#loc163)
        %9 = cir.binop(mul, %7, %8) : !u64i loc(#loc164)
        %10 = cir.call @malloc(%9) : (!u64i) -> !cir.ptr<!void> extra(#fn_attr) loc(#loc68)
        %11 = cir.cast(bitcast, %10 : !cir.ptr<!void>), !cir.ptr<!s8i> loc(#loc165)
        cir.store %11, %0 : !cir.ptr<!s8i>, !cir.ptr<!cir.ptr<!s8i>> loc(#loc166)
        cir.scope {
          %12 = cir.load %0 : !cir.ptr<!cir.ptr<!s8i>>, !cir.ptr<!s8i> loc(#loc78)
          %13 = cir.const #cir.ptr<null> : !cir.ptr<!void> loc(#loc79)
          %14 = cir.cast(bitcast, %13 : !cir.ptr<!void>), !cir.ptr<!s8i> loc(#loc79)
          %15 = cir.cmp(eq, %12, %14) : !cir.ptr<!s8i>, !s32i loc(#loc168)
          %16 = cir.cast(int_to_bool, %15 : !s32i), !cir.bool loc(#loc80)
          cir.if %16 {
            %17 = cir.get_global @exit : !cir.ptr<!cir.func<!void (!s32i)>> loc(#loc82)
            %18 = cir.const #cir.int<1> : !s32i loc(#loc83)
            %19 = cir.unary(minus, %18) : !s32i, !s32i loc(#loc84)
            cir.call @exit(%19) : (!s32i) -> () extra(#fn_attr) loc(#loc82)
          } loc(#loc169)
        } loc(#loc167)
        cir.break loc(#loc85)
      }
      ] loc(#loc62)
    } loc(#loc162)
    cir.scope {
      %2 = cir.alloca !cir.array<!s8i x 11>, !cir.ptr<!cir.array<!s8i x 11>>, ["source"] {alignment = 1 : i64} loc(#loc171)
      %3 = cir.const #cir.const_array<"AAAAAAAAAA\00" : !cir.array<!s8i x 11>> : !cir.array<!s8i x 11> loc(#loc171)
      cir.store %3, %2 : !cir.array<!s8i x 11>, !cir.ptr<!cir.array<!s8i x 11>> loc(#loc171)
      %4 = cir.get_global @strcpy : !cir.ptr<!cir.func<!cir.ptr<!s8i> (!cir.ptr<!s8i>, !cir.ptr<!s8i>)>> loc(#loc90)
      %5 = cir.load %0 : !cir.ptr<!cir.ptr<!s8i>>, !cir.ptr<!s8i> loc(#loc91)
      %6 = cir.cast(array_to_ptrdecay, %2 : !cir.ptr<!cir.array<!s8i x 11>>), !cir.ptr<!s8i> loc(#loc92)
      %7 = cir.call @strcpy(%5, %6) : (!cir.ptr<!s8i>, !cir.ptr<!s8i>) -> !cir.ptr<!s8i> extra(#fn_attr) loc(#loc90)
      %8 = cir.load %0 : !cir.ptr<!cir.ptr<!s8i>>, !cir.ptr<!s8i> loc(#loc93)
      cir.call @printLine(%8) : (!cir.ptr<!s8i>) -> () loc(#loc94)
      %9 = cir.get_global @free : !cir.ptr<!cir.func<!void (!cir.ptr<!void>)>> loc(#loc95)
      %10 = cir.load %0 : !cir.ptr<!cir.ptr<!s8i>>, !cir.ptr<!s8i> loc(#loc96)
      %11 = cir.cast(bitcast, %10 : !cir.ptr<!s8i>), !cir.ptr<!void> loc(#loc96)
      cir.call @free(%11) : (!cir.ptr<!void>) -> () extra(#fn_attr) loc(#loc95)
    } loc(#loc170)
    cir.return loc(#loc57)
  } loc(#loc159)
  cir.func no_proto internal private  @goodG2B2() extra(#fn_attr1) {
    %0 = cir.alloca !cir.ptr<!s8i>, !cir.ptr<!cir.ptr<!s8i>>, ["data"] {alignment = 8 : i64} loc(#loc173)
    %1 = cir.const #cir.ptr<null> : !cir.ptr<!s8i> loc(#loc101)
    cir.store %1, %0 : !cir.ptr<!s8i>, !cir.ptr<!cir.ptr<!s8i>> loc(#loc174)
    cir.scope {
      %2 = cir.const #cir.int<6> : !s32i loc(#loc105)
      cir.switch (%2 : !s32i) [
      case (equal, 6) {
        %3 = cir.get_global @malloc : !cir.ptr<!cir.func<!cir.ptr<!void> (!u64i)>> loc(#loc106)
        %4 = cir.const #cir.int<10> : !s32i loc(#loc107)
        %5 = cir.const #cir.int<1> : !s32i loc(#loc108)
        %6 = cir.binop(add, %4, %5) nsw : !s32i loc(#loc107)
        %7 = cir.cast(integral, %6 : !s32i), !u64i loc(#loc107)
        %8 = cir.const #cir.int<1> : !u64i loc(#loc176)
        %9 = cir.binop(mul, %7, %8) : !u64i loc(#loc177)
        %10 = cir.call @malloc(%9) : (!u64i) -> !cir.ptr<!void> extra(#fn_attr) loc(#loc106)
        %11 = cir.cast(bitcast, %10 : !cir.ptr<!void>), !cir.ptr<!s8i> loc(#loc178)
        cir.store %11, %0 : !cir.ptr<!s8i>, !cir.ptr<!cir.ptr<!s8i>> loc(#loc179)
        cir.scope {
          %12 = cir.load %0 : !cir.ptr<!cir.ptr<!s8i>>, !cir.ptr<!s8i> loc(#loc116)
          %13 = cir.const #cir.ptr<null> : !cir.ptr<!void> loc(#loc117)
          %14 = cir.cast(bitcast, %13 : !cir.ptr<!void>), !cir.ptr<!s8i> loc(#loc117)
          %15 = cir.cmp(eq, %12, %14) : !cir.ptr<!s8i>, !s32i loc(#loc181)
          %16 = cir.cast(int_to_bool, %15 : !s32i), !cir.bool loc(#loc118)
          cir.if %16 {
            %17 = cir.get_global @exit : !cir.ptr<!cir.func<!void (!s32i)>> loc(#loc120)
            %18 = cir.const #cir.int<1> : !s32i loc(#loc121)
            %19 = cir.unary(minus, %18) : !s32i, !s32i loc(#loc122)
            cir.call @exit(%19) : (!s32i) -> () extra(#fn_attr) loc(#loc120)
          } loc(#loc182)
        } loc(#loc180)
        cir.break loc(#loc123)
      },
      case (default) {
        %3 = cir.get_global @".str" : !cir.ptr<!cir.array<!s8i x 21>> loc(#loc124)
        %4 = cir.cast(array_to_ptrdecay, %3 : !cir.ptr<!cir.array<!s8i x 21>>), !cir.ptr<!s8i> loc(#loc124)
        cir.call @printLine(%4) : (!cir.ptr<!s8i>) -> () loc(#loc125)
        cir.break loc(#loc126)
      }
      ] loc(#loc103)
    } loc(#loc175)
    cir.scope {
      %2 = cir.alloca !cir.array<!s8i x 11>, !cir.ptr<!cir.array<!s8i x 11>>, ["source"] {alignment = 1 : i64} loc(#loc184)
      %3 = cir.const #cir.const_array<"AAAAAAAAAA\00" : !cir.array<!s8i x 11>> : !cir.array<!s8i x 11> loc(#loc184)
      cir.store %3, %2 : !cir.array<!s8i x 11>, !cir.ptr<!cir.array<!s8i x 11>> loc(#loc184)
      %4 = cir.get_global @strcpy : !cir.ptr<!cir.func<!cir.ptr<!s8i> (!cir.ptr<!s8i>, !cir.ptr<!s8i>)>> loc(#loc131)
      %5 = cir.load %0 : !cir.ptr<!cir.ptr<!s8i>>, !cir.ptr<!s8i> loc(#loc132)
      %6 = cir.cast(array_to_ptrdecay, %2 : !cir.ptr<!cir.array<!s8i x 11>>), !cir.ptr<!s8i> loc(#loc133)
      %7 = cir.call @strcpy(%5, %6) : (!cir.ptr<!s8i>, !cir.ptr<!s8i>) -> !cir.ptr<!s8i> extra(#fn_attr) loc(#loc131)
      %8 = cir.load %0 : !cir.ptr<!cir.ptr<!s8i>>, !cir.ptr<!s8i> loc(#loc134)
      cir.call @printLine(%8) : (!cir.ptr<!s8i>) -> () loc(#loc135)
      %9 = cir.get_global @free : !cir.ptr<!cir.func<!void (!cir.ptr<!void>)>> loc(#loc136)
      %10 = cir.load %0 : !cir.ptr<!cir.ptr<!s8i>>, !cir.ptr<!s8i> loc(#loc137)
      %11 = cir.cast(bitcast, %10 : !cir.ptr<!s8i>), !cir.ptr<!void> loc(#loc137)
      cir.call @free(%11) : (!cir.ptr<!void>) -> () extra(#fn_attr) loc(#loc136)
    } loc(#loc183)
    cir.return loc(#loc98)
  } loc(#loc172)
} loc(#loc)
#loc = loc("/home/ladisgin/git_proj/test_projects/juliet-c/testcases/CWE122_Heap_Based_Buffer_Overflow/s06/CWE122_Heap_Based_Buffer_Overflow__c_CWE193_char_cpy_15.c":0:0)
#loc1 = loc("/usr/include/stdlib.h":672:1)
#loc2 = loc("/usr/include/stdlib.h":672:45)
#loc3 = loc("/usr/include/stdlib.h":756:1)
#loc4 = loc("/usr/include/stdlib.h":756:70)
#loc5 = loc("../../../testcasesupport/std_testcase_io.h":14:1)
#loc6 = loc("../../../testcasesupport/std_testcase_io.h":14:33)
#loc7 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE193_char_cpy_15.c":41:19)
#loc8 = loc("/usr/include/string.h":141:1)
#loc9 = loc("/usr/include/string.h":142:14)
#loc10 = loc("/usr/include/stdlib.h":687:1)
#loc11 = loc("/usr/include/stdlib.h":687:32)
#loc12 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE193_char_cpy_15.c":28:1)
#loc13 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE193_char_cpy_15.c":51:1)
#loc14 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE193_char_cpy_15.c":30:5)
#loc15 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE193_char_cpy_15.c":30:12)
#loc16 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE193_char_cpy_15.c":31:12)
#loc17 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE193_char_cpy_15.c":31:5)
#loc18 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE193_char_cpy_15.c":32:5)
#loc19 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE193_char_cpy_15.c":43:5)
#loc20 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE193_char_cpy_15.c":32:12)
#loc21 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE193_char_cpy_15.c":36:24)
#loc22 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE193_char_cpy_15.c":36:31)
#loc23 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE193_char_cpy_15.c":36:34)
#loc24 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE193_char_cpy_15.c":36:45)
#loc25 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE193_char_cpy_15.c":36:46)
#loc26 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE193_char_cpy_15.c":36:9)
#loc27 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE193_char_cpy_15.c":37:9)
#loc28 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE193_char_cpy_15.c":37:37)
#loc29 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE193_char_cpy_15.c":37:13)
#loc30 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE193_char_cpy_15.c":37:21)
#loc31 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE193_char_cpy_15.c":37:18)
#loc32 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE193_char_cpy_15.c":37:27)
#loc33 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE193_char_cpy_15.c":37:28)
#loc34 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE193_char_cpy_15.c":37:34)
#loc35 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE193_char_cpy_15.c":37:33)
#loc36 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE193_char_cpy_15.c":38:9)
#loc37 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE193_char_cpy_15.c":41:9)
#loc38 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE193_char_cpy_15.c":42:9)
#loc39 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE193_char_cpy_15.c":44:5)
#loc40 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE193_char_cpy_15.c":50:5)
#loc41 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE193_char_cpy_15.c":45:9)
#loc42 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE193_char_cpy_15.c":45:29)
#loc43 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE193_char_cpy_15.c":47:9)
#loc44 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE193_char_cpy_15.c":47:16)
#loc45 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE193_char_cpy_15.c":47:22)
#loc46 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE193_char_cpy_15.c":48:19)
#loc47 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE193_char_cpy_15.c":48:9)
#loc48 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE193_char_cpy_15.c":49:9)
#loc49 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE193_char_cpy_15.c":49:14)
#loc50 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE193_char_cpy_15.c":109:1)
#loc51 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE193_char_cpy_15.c":113:1)
#loc52 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE193_char_cpy_15.c":111:5)
#loc53 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE193_char_cpy_15.c":111:14)
#loc54 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE193_char_cpy_15.c":112:5)
#loc55 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE193_char_cpy_15.c":112:14)
#loc56 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE193_char_cpy_15.c":58:1)
#loc57 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE193_char_cpy_15.c":81:1)
#loc58 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE193_char_cpy_15.c":60:5)
#loc59 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE193_char_cpy_15.c":60:12)
#loc60 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE193_char_cpy_15.c":61:12)
#loc61 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE193_char_cpy_15.c":61:5)
#loc62 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE193_char_cpy_15.c":62:5)
#loc63 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE193_char_cpy_15.c":73:5)
#loc64 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE193_char_cpy_15.c":62:12)
#loc65 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE193_char_cpy_15.c":66:19)
#loc66 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE193_char_cpy_15.c":66:9)
#loc67 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE193_char_cpy_15.c":67:9)
#loc68 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE193_char_cpy_15.c":70:24)
#loc69 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE193_char_cpy_15.c":70:32)
#loc70 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE193_char_cpy_15.c":70:35)
#loc71 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE193_char_cpy_15.c":70:38)
#loc72 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE193_char_cpy_15.c":70:49)
#loc73 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE193_char_cpy_15.c":70:31)
#loc74 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE193_char_cpy_15.c":70:50)
#loc75 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE193_char_cpy_15.c":70:9)
#loc76 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE193_char_cpy_15.c":71:9)
#loc77 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE193_char_cpy_15.c":71:37)
#loc78 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE193_char_cpy_15.c":71:13)
#loc79 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE193_char_cpy_15.c":71:21)
#loc80 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE193_char_cpy_15.c":71:18)
#loc81 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE193_char_cpy_15.c":71:27)
#loc82 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE193_char_cpy_15.c":71:28)
#loc83 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE193_char_cpy_15.c":71:34)
#loc84 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE193_char_cpy_15.c":71:33)
#loc85 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE193_char_cpy_15.c":72:9)
#loc86 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE193_char_cpy_15.c":74:5)
#loc87 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE193_char_cpy_15.c":80:5)
#loc88 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE193_char_cpy_15.c":75:9)
#loc89 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE193_char_cpy_15.c":75:29)
#loc90 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE193_char_cpy_15.c":77:9)
#loc91 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE193_char_cpy_15.c":77:16)
#loc92 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE193_char_cpy_15.c":77:22)
#loc93 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE193_char_cpy_15.c":78:19)
#loc94 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE193_char_cpy_15.c":78:9)
#loc95 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE193_char_cpy_15.c":79:9)
#loc96 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE193_char_cpy_15.c":79:14)
#loc97 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE193_char_cpy_15.c":84:1)
#loc98 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE193_char_cpy_15.c":107:1)
#loc99 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE193_char_cpy_15.c":86:5)
#loc100 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE193_char_cpy_15.c":86:12)
#loc101 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE193_char_cpy_15.c":87:12)
#loc102 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE193_char_cpy_15.c":87:5)
#loc103 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE193_char_cpy_15.c":88:5)
#loc104 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE193_char_cpy_15.c":99:5)
#loc105 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE193_char_cpy_15.c":88:12)
#loc106 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE193_char_cpy_15.c":92:24)
#loc107 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE193_char_cpy_15.c":92:32)
#loc108 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE193_char_cpy_15.c":92:35)
#loc109 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE193_char_cpy_15.c":92:38)
#loc110 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE193_char_cpy_15.c":92:49)
#loc111 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE193_char_cpy_15.c":92:31)
#loc112 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE193_char_cpy_15.c":92:50)
#loc113 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE193_char_cpy_15.c":92:9)
#loc114 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE193_char_cpy_15.c":93:9)
#loc115 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE193_char_cpy_15.c":93:37)
#loc116 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE193_char_cpy_15.c":93:13)
#loc117 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE193_char_cpy_15.c":93:21)
#loc118 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE193_char_cpy_15.c":93:18)
#loc119 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE193_char_cpy_15.c":93:27)
#loc120 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE193_char_cpy_15.c":93:28)
#loc121 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE193_char_cpy_15.c":93:34)
#loc122 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE193_char_cpy_15.c":93:33)
#loc123 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE193_char_cpy_15.c":94:9)
#loc124 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE193_char_cpy_15.c":97:19)
#loc125 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE193_char_cpy_15.c":97:9)
#loc126 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE193_char_cpy_15.c":98:9)
#loc127 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE193_char_cpy_15.c":100:5)
#loc128 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE193_char_cpy_15.c":106:5)
#loc129 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE193_char_cpy_15.c":101:9)
#loc130 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE193_char_cpy_15.c":101:29)
#loc131 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE193_char_cpy_15.c":103:9)
#loc132 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE193_char_cpy_15.c":103:16)
#loc133 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE193_char_cpy_15.c":103:22)
#loc134 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE193_char_cpy_15.c":104:19)
#loc135 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE193_char_cpy_15.c":104:9)
#loc136 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE193_char_cpy_15.c":105:9)
#loc137 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE193_char_cpy_15.c":105:14)
#loc138 = loc(fused[#loc1, #loc2])
#loc139 = loc(fused[#loc3, #loc4])
#loc140 = loc(fused[#loc5, #loc6])
#loc141 = loc(fused[#loc8, #loc9])
#loc142 = loc(fused[#loc10, #loc11])
#loc143 = loc(fused[#loc12, #loc13])
#loc144 = loc(fused[#loc14, #loc15])
#loc145 = loc(fused[#loc17, #loc16])
#loc146 = loc(fused[#loc18, #loc19])
#loc147 = loc(fused[#loc23, #loc24])
#loc148 = loc(fused[#loc22, #loc24])
#loc149 = loc(fused[#loc21, #loc25])
#loc150 = loc(fused[#loc26, #loc25])
#loc151 = loc(fused[#loc27, #loc28])
#loc152 = loc(fused[#loc29, #loc30])
#loc153 = loc(fused[#loc32, #loc28])
#loc154 = loc(fused[#loc39, #loc40])
#loc155 = loc(fused[#loc41, #loc42])
#loc156 = loc(fused[#loc50, #loc51])
#loc157 = loc(fused[#loc52, #loc53])
#loc158 = loc(fused[#loc54, #loc55])
#loc159 = loc(fused[#loc56, #loc57])
#loc160 = loc(fused[#loc58, #loc59])
#loc161 = loc(fused[#loc61, #loc60])
#loc162 = loc(fused[#loc62, #loc63])
#loc163 = loc(fused[#loc71, #loc72])
#loc164 = loc(fused[#loc73, #loc72])
#loc165 = loc(fused[#loc68, #loc74])
#loc166 = loc(fused[#loc75, #loc74])
#loc167 = loc(fused[#loc76, #loc77])
#loc168 = loc(fused[#loc78, #loc79])
#loc169 = loc(fused[#loc81, #loc77])
#loc170 = loc(fused[#loc86, #loc87])
#loc171 = loc(fused[#loc88, #loc89])
#loc172 = loc(fused[#loc97, #loc98])
#loc173 = loc(fused[#loc99, #loc100])
#loc174 = loc(fused[#loc102, #loc101])
#loc175 = loc(fused[#loc103, #loc104])
#loc176 = loc(fused[#loc109, #loc110])
#loc177 = loc(fused[#loc111, #loc110])
#loc178 = loc(fused[#loc106, #loc112])
#loc179 = loc(fused[#loc113, #loc112])
#loc180 = loc(fused[#loc114, #loc115])
#loc181 = loc(fused[#loc116, #loc117])
#loc182 = loc(fused[#loc119, #loc115])
#loc183 = loc(fused[#loc127, #loc128])
#loc184 = loc(fused[#loc129, #loc130])
