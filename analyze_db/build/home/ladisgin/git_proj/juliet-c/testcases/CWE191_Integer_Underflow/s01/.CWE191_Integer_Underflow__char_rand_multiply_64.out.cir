!s32i = !cir.int<s, 32>
!s8i = !cir.int<s, 8>
!void = !cir.void
#fn_attr = #cir<extra({inline = #cir.inline<no>, nothrow = #cir.nothrow, optnone = #cir.optnone})>
#loc5 = loc("CWE191_Integer_Underflow__char_rand_multiply_64b.c":22:63)
#loc6 = loc("CWE191_Integer_Underflow__char_rand_multiply_64b.c":22:70)
#loc26 = loc("CWE191_Integer_Underflow__char_rand_multiply_64b.c":41:67)
#loc27 = loc("CWE191_Integer_Underflow__char_rand_multiply_64b.c":41:74)
#loc50 = loc("CWE191_Integer_Underflow__char_rand_multiply_64b.c":56:67)
#loc51 = loc("CWE191_Integer_Underflow__char_rand_multiply_64b.c":56:74)
#loc81 = loc(fused[#loc5, #loc6])
#loc89 = loc(fused[#loc26, #loc27])
#loc98 = loc(fused[#loc50, #loc51])
module @"/home/ladisgin/git_proj/juliet-c/testcases/CWE191_Integer_Underflow/s01/CWE191_Integer_Underflow__char_rand_multiply_64b.c" attributes {cir.lang = #cir.lang<c>, cir.sob = #cir.signed_overflow_behavior<undefined>, cir.triple = "x86_64-unknown-linux-gnu", dlti.dl_spec = #dlti.dl_spec<f80 = dense<128> : vector<2xi64>, i128 = dense<128> : vector<2xi64>, i64 = dense<64> : vector<2xi64>, i8 = dense<8> : vector<2xi64>, i1 = dense<8> : vector<2xi64>, !llvm.ptr = dense<64> : vector<4xi64>, f16 = dense<16> : vector<2xi64>, i32 = dense<32> : vector<2xi64>, i16 = dense<16> : vector<2xi64>, !llvm.ptr<272> = dense<64> : vector<4xi64>, !llvm.ptr<271> = dense<32> : vector<4xi64>, !llvm.ptr<270> = dense<32> : vector<4xi64>, f64 = dense<64> : vector<2xi64>, f128 = dense<128> : vector<2xi64>, "dlti.stack_alignment" = 128 : i64, "dlti.endianness" = "little">} {
  cir.func private @printHexCharLine(!s8i) loc(#loc79)
  cir.func @CWE191_Integer_Underflow__char_rand_multiply_64b_badSink(%arg0: !cir.ptr<!void> loc(fused[#loc5, #loc6])) extra(#fn_attr) {
    %0 = cir.alloca !cir.ptr<!void>, !cir.ptr<!cir.ptr<!void>>, ["dataVoidPtr", init] {alignment = 8 : i64} loc(#loc81)
    %1 = cir.alloca !cir.ptr<!s8i>, !cir.ptr<!cir.ptr<!s8i>>, ["dataPtr", init] {alignment = 8 : i64} loc(#loc82)
    %2 = cir.alloca !s8i, !cir.ptr<!s8i>, ["data", init] {alignment = 1 : i64} loc(#loc83)
    cir.store %arg0, %0 : !cir.ptr<!void>, !cir.ptr<!cir.ptr<!void>> loc(#loc11)
    %3 = cir.load %0 : !cir.ptr<!cir.ptr<!void>>, !cir.ptr<!void> loc(#loc8)
    %4 = cir.cast(bitcast, %3 : !cir.ptr<!void>), !cir.ptr<!s8i> loc(#loc8)
    cir.store %4, %1 : !cir.ptr<!s8i>, !cir.ptr<!cir.ptr<!s8i>> loc(#loc82)
    %5 = cir.load deref %1 : !cir.ptr<!cir.ptr<!s8i>>, !cir.ptr<!s8i> loc(#loc12)
    %6 = cir.load %5 : !cir.ptr<!s8i>, !s8i loc(#loc13)
    cir.store %6, %2 : !s8i, !cir.ptr<!s8i> loc(#loc83)
    cir.scope {
      %7 = cir.load %2 : !cir.ptr<!s8i>, !s8i loc(#loc16)
      %8 = cir.cast(integral, %7 : !s8i), !s32i loc(#loc16)
      %9 = cir.const #cir.int<0> : !s32i loc(#loc17)
      %10 = cir.cmp(lt, %8, %9) : !s32i, !cir.bool loc(#loc85)
      cir.if %10 {
        %11 = cir.alloca !s8i, !cir.ptr<!s8i>, ["result", init] {alignment = 1 : i64} loc(#loc87)
        %12 = cir.load %2 : !cir.ptr<!s8i>, !s8i loc(#loc21)
        %13 = cir.cast(integral, %12 : !s8i), !s32i loc(#loc21)
        %14 = cir.const #cir.int<2> : !s32i loc(#loc20)
        %15 = cir.binop(mul, %13, %14) nsw : !s32i loc(#loc21)
        %16 = cir.cast(integral, %15 : !s32i), !s8i loc(#loc21)
        cir.store %16, %11 : !s8i, !cir.ptr<!s8i> loc(#loc87)
        %17 = cir.load %11 : !cir.ptr<!s8i>, !s8i loc(#loc22)
        cir.call @printHexCharLine(%17) : (!s8i) -> () loc(#loc23)
      } loc(#loc86)
    } loc(#loc84)
    cir.return loc(#loc4)
  } loc(#loc80)
  cir.func @CWE191_Integer_Underflow__char_rand_multiply_64b_goodG2BSink(%arg0: !cir.ptr<!void> loc(fused[#loc26, #loc27])) extra(#fn_attr) {
    %0 = cir.alloca !cir.ptr<!void>, !cir.ptr<!cir.ptr<!void>>, ["dataVoidPtr", init] {alignment = 8 : i64} loc(#loc89)
    %1 = cir.alloca !cir.ptr<!s8i>, !cir.ptr<!cir.ptr<!s8i>>, ["dataPtr", init] {alignment = 8 : i64} loc(#loc90)
    %2 = cir.alloca !s8i, !cir.ptr<!s8i>, ["data", init] {alignment = 1 : i64} loc(#loc91)
    cir.store %arg0, %0 : !cir.ptr<!void>, !cir.ptr<!cir.ptr<!void>> loc(#loc32)
    %3 = cir.load %0 : !cir.ptr<!cir.ptr<!void>>, !cir.ptr<!void> loc(#loc29)
    %4 = cir.cast(bitcast, %3 : !cir.ptr<!void>), !cir.ptr<!s8i> loc(#loc29)
    cir.store %4, %1 : !cir.ptr<!s8i>, !cir.ptr<!cir.ptr<!s8i>> loc(#loc90)
    %5 = cir.load deref %1 : !cir.ptr<!cir.ptr<!s8i>>, !cir.ptr<!s8i> loc(#loc33)
    %6 = cir.load %5 : !cir.ptr<!s8i>, !s8i loc(#loc34)
    cir.store %6, %2 : !s8i, !cir.ptr<!s8i> loc(#loc91)
    cir.scope {
      %7 = cir.load %2 : !cir.ptr<!s8i>, !s8i loc(#loc37)
      %8 = cir.cast(integral, %7 : !s8i), !s32i loc(#loc37)
      %9 = cir.const #cir.int<0> : !s32i loc(#loc38)
      %10 = cir.cmp(lt, %8, %9) : !s32i, !cir.bool loc(#loc93)
      cir.if %10 {
        %11 = cir.alloca !s8i, !cir.ptr<!s8i>, ["result", init] {alignment = 1 : i64} loc(#loc95)
        %12 = cir.load %2 : !cir.ptr<!s8i>, !s8i loc(#loc42)
        %13 = cir.cast(integral, %12 : !s8i), !s32i loc(#loc42)
        %14 = cir.const #cir.int<2> : !s32i loc(#loc41)
        %15 = cir.binop(mul, %13, %14) nsw : !s32i loc(#loc42)
        %16 = cir.cast(integral, %15 : !s32i), !s8i loc(#loc42)
        cir.store %16, %11 : !s8i, !cir.ptr<!s8i> loc(#loc95)
        %17 = cir.load %11 : !cir.ptr<!s8i>, !s8i loc(#loc43)
        cir.call @printHexCharLine(%17) : (!s8i) -> () loc(#loc44)
      } loc(#loc94)
    } loc(#loc92)
    cir.return loc(#loc25)
  } loc(#loc88)
  cir.func private @printLine(!cir.ptr<!s8i>) loc(#loc96)
  cir.global "private" constant cir_private dsolocal @".str" = #cir.const_array<"data value is too small to perform multiplication.\00" : !cir.array<!s8i x 51>> : !cir.array<!s8i x 51> {alignment = 1 : i64} loc(#loc47)
  cir.func @CWE191_Integer_Underflow__char_rand_multiply_64b_goodB2GSink(%arg0: !cir.ptr<!void> loc(fused[#loc50, #loc51])) extra(#fn_attr) {
    %0 = cir.alloca !cir.ptr<!void>, !cir.ptr<!cir.ptr<!void>>, ["dataVoidPtr", init] {alignment = 8 : i64} loc(#loc98)
    %1 = cir.alloca !cir.ptr<!s8i>, !cir.ptr<!cir.ptr<!s8i>>, ["dataPtr", init] {alignment = 8 : i64} loc(#loc99)
    %2 = cir.alloca !s8i, !cir.ptr<!s8i>, ["data", init] {alignment = 1 : i64} loc(#loc100)
    cir.store %arg0, %0 : !cir.ptr<!void>, !cir.ptr<!cir.ptr<!void>> loc(#loc56)
    %3 = cir.load %0 : !cir.ptr<!cir.ptr<!void>>, !cir.ptr<!void> loc(#loc53)
    %4 = cir.cast(bitcast, %3 : !cir.ptr<!void>), !cir.ptr<!s8i> loc(#loc53)
    cir.store %4, %1 : !cir.ptr<!s8i>, !cir.ptr<!cir.ptr<!s8i>> loc(#loc99)
    %5 = cir.load deref %1 : !cir.ptr<!cir.ptr<!s8i>>, !cir.ptr<!s8i> loc(#loc57)
    %6 = cir.load %5 : !cir.ptr<!s8i>, !s8i loc(#loc58)
    cir.store %6, %2 : !s8i, !cir.ptr<!s8i> loc(#loc100)
    cir.scope {
      %7 = cir.load %2 : !cir.ptr<!s8i>, !s8i loc(#loc61)
      %8 = cir.cast(integral, %7 : !s8i), !s32i loc(#loc61)
      %9 = cir.const #cir.int<0> : !s32i loc(#loc62)
      %10 = cir.cmp(lt, %8, %9) : !s32i, !cir.bool loc(#loc102)
      cir.if %10 {
        cir.scope {
          %11 = cir.load %2 : !cir.ptr<!s8i>, !s8i loc(#loc66)
          %12 = cir.cast(integral, %11 : !s8i), !s32i loc(#loc66)
          %13 = cir.const #cir.int<127> : !s32i loc(#loc67)
          %14 = cir.unary(minus, %13) : !s32i, !s32i loc(#loc67)
          %15 = cir.const #cir.int<1> : !s32i loc(#loc67)
          %16 = cir.binop(sub, %14, %15) nsw : !s32i loc(#loc67)
          %17 = cir.const #cir.int<2> : !s32i loc(#loc68)
          %18 = cir.binop(div, %16, %17) : !s32i loc(#loc105)
          %19 = cir.cmp(gt, %12, %18) : !s32i, !cir.bool loc(#loc106)
          cir.if %19 {
            %20 = cir.alloca !s8i, !cir.ptr<!s8i>, ["result", init] {alignment = 1 : i64} loc(#loc108)
            %21 = cir.load %2 : !cir.ptr<!s8i>, !s8i loc(#loc75)
            %22 = cir.cast(integral, %21 : !s8i), !s32i loc(#loc75)
            %23 = cir.const #cir.int<2> : !s32i loc(#loc74)
            %24 = cir.binop(mul, %22, %23) nsw : !s32i loc(#loc75)
            %25 = cir.cast(integral, %24 : !s32i), !s8i loc(#loc75)
            cir.store %25, %20 : !s8i, !cir.ptr<!s8i> loc(#loc108)
            %26 = cir.load %20 : !cir.ptr<!s8i>, !s8i loc(#loc76)
            cir.call @printHexCharLine(%26) : (!s8i) -> () loc(#loc77)
          } else {
            %20 = cir.get_global @".str" : !cir.ptr<!cir.array<!s8i x 51>> loc(#loc47)
            %21 = cir.cast(array_to_ptrdecay, %20 : !cir.ptr<!cir.array<!s8i x 51>>), !cir.ptr<!s8i> loc(#loc47)
            cir.call @printLine(%21) : (!cir.ptr<!s8i>) -> () loc(#loc78)
          } loc(#loc107)
        } loc(#loc104)
      } loc(#loc103)
    } loc(#loc101)
    cir.return loc(#loc49)
  } loc(#loc97)
} loc(#loc)
#loc = loc("/home/ladisgin/git_proj/juliet-c/testcases/CWE191_Integer_Underflow/s01/CWE191_Integer_Underflow__char_rand_multiply_64b.c":0:0)
#loc1 = loc("../../../testcasesupport/std_testcase_io.h":30:1)
#loc2 = loc("../../../testcasesupport/std_testcase_io.h":30:35)
#loc3 = loc("CWE191_Integer_Underflow__char_rand_multiply_64b.c":22:1)
#loc4 = loc("CWE191_Integer_Underflow__char_rand_multiply_64b.c":34:1)
#loc7 = loc("CWE191_Integer_Underflow__char_rand_multiply_64b.c":25:5)
#loc8 = loc("CWE191_Integer_Underflow__char_rand_multiply_64b.c":25:30)
#loc9 = loc("CWE191_Integer_Underflow__char_rand_multiply_64b.c":27:5)
#loc10 = loc("CWE191_Integer_Underflow__char_rand_multiply_64b.c":27:26)
#loc11 = loc("CWE191_Integer_Underflow__char_rand_multiply_64b.c":23:1)
#loc12 = loc("CWE191_Integer_Underflow__char_rand_multiply_64b.c":27:19)
#loc13 = loc("CWE191_Integer_Underflow__char_rand_multiply_64b.c":27:18)
#loc14 = loc("CWE191_Integer_Underflow__char_rand_multiply_64b.c":28:5)
#loc15 = loc("CWE191_Integer_Underflow__char_rand_multiply_64b.c":33:5)
#loc16 = loc("CWE191_Integer_Underflow__char_rand_multiply_64b.c":28:8)
#loc17 = loc("CWE191_Integer_Underflow__char_rand_multiply_64b.c":28:15)
#loc18 = loc("CWE191_Integer_Underflow__char_rand_multiply_64b.c":29:5)
#loc19 = loc("CWE191_Integer_Underflow__char_rand_multiply_64b.c":31:9)
#loc20 = loc("CWE191_Integer_Underflow__char_rand_multiply_64b.c":31:30)
#loc21 = loc("CWE191_Integer_Underflow__char_rand_multiply_64b.c":31:23)
#loc22 = loc("CWE191_Integer_Underflow__char_rand_multiply_64b.c":32:26)
#loc23 = loc("CWE191_Integer_Underflow__char_rand_multiply_64b.c":32:9)
#loc24 = loc("CWE191_Integer_Underflow__char_rand_multiply_64b.c":41:1)
#loc25 = loc("CWE191_Integer_Underflow__char_rand_multiply_64b.c":53:1)
#loc28 = loc("CWE191_Integer_Underflow__char_rand_multiply_64b.c":44:5)
#loc29 = loc("CWE191_Integer_Underflow__char_rand_multiply_64b.c":44:30)
#loc30 = loc("CWE191_Integer_Underflow__char_rand_multiply_64b.c":46:5)
#loc31 = loc("CWE191_Integer_Underflow__char_rand_multiply_64b.c":46:26)
#loc32 = loc("CWE191_Integer_Underflow__char_rand_multiply_64b.c":42:1)
#loc33 = loc("CWE191_Integer_Underflow__char_rand_multiply_64b.c":46:19)
#loc34 = loc("CWE191_Integer_Underflow__char_rand_multiply_64b.c":46:18)
#loc35 = loc("CWE191_Integer_Underflow__char_rand_multiply_64b.c":47:5)
#loc36 = loc("CWE191_Integer_Underflow__char_rand_multiply_64b.c":52:5)
#loc37 = loc("CWE191_Integer_Underflow__char_rand_multiply_64b.c":47:8)
#loc38 = loc("CWE191_Integer_Underflow__char_rand_multiply_64b.c":47:15)
#loc39 = loc("CWE191_Integer_Underflow__char_rand_multiply_64b.c":48:5)
#loc40 = loc("CWE191_Integer_Underflow__char_rand_multiply_64b.c":50:9)
#loc41 = loc("CWE191_Integer_Underflow__char_rand_multiply_64b.c":50:30)
#loc42 = loc("CWE191_Integer_Underflow__char_rand_multiply_64b.c":50:23)
#loc43 = loc("CWE191_Integer_Underflow__char_rand_multiply_64b.c":51:26)
#loc44 = loc("CWE191_Integer_Underflow__char_rand_multiply_64b.c":51:9)
#loc45 = loc("../../../testcasesupport/std_testcase_io.h":14:1)
#loc46 = loc("../../../testcasesupport/std_testcase_io.h":14:33)
#loc47 = loc("CWE191_Integer_Underflow__char_rand_multiply_64b.c":72:23)
#loc48 = loc("CWE191_Integer_Underflow__char_rand_multiply_64b.c":56:1)
#loc49 = loc("CWE191_Integer_Underflow__char_rand_multiply_64b.c":75:1)
#loc52 = loc("CWE191_Integer_Underflow__char_rand_multiply_64b.c":59:5)
#loc53 = loc("CWE191_Integer_Underflow__char_rand_multiply_64b.c":59:30)
#loc54 = loc("CWE191_Integer_Underflow__char_rand_multiply_64b.c":61:5)
#loc55 = loc("CWE191_Integer_Underflow__char_rand_multiply_64b.c":61:26)
#loc56 = loc("CWE191_Integer_Underflow__char_rand_multiply_64b.c":57:1)
#loc57 = loc("CWE191_Integer_Underflow__char_rand_multiply_64b.c":61:19)
#loc58 = loc("CWE191_Integer_Underflow__char_rand_multiply_64b.c":61:18)
#loc59 = loc("CWE191_Integer_Underflow__char_rand_multiply_64b.c":62:5)
#loc60 = loc("CWE191_Integer_Underflow__char_rand_multiply_64b.c":74:5)
#loc61 = loc("CWE191_Integer_Underflow__char_rand_multiply_64b.c":62:8)
#loc62 = loc("CWE191_Integer_Underflow__char_rand_multiply_64b.c":62:15)
#loc63 = loc("CWE191_Integer_Underflow__char_rand_multiply_64b.c":63:5)
#loc64 = loc("CWE191_Integer_Underflow__char_rand_multiply_64b.c":65:9)
#loc65 = loc("CWE191_Integer_Underflow__char_rand_multiply_64b.c":73:9)
#loc66 = loc("CWE191_Integer_Underflow__char_rand_multiply_64b.c":65:13)
#loc67 = loc("CWE191_Integer_Underflow__char_rand_multiply_64b.c":65:21)
#loc68 = loc("CWE191_Integer_Underflow__char_rand_multiply_64b.c":65:30)
#loc69 = loc("CWE191_Integer_Underflow__char_rand_multiply_64b.c":65:31)
#loc70 = loc("CWE191_Integer_Underflow__char_rand_multiply_64b.c":66:9)
#loc71 = loc("CWE191_Integer_Underflow__char_rand_multiply_64b.c":69:9)
#loc72 = loc("CWE191_Integer_Underflow__char_rand_multiply_64b.c":71:9)
#loc73 = loc("CWE191_Integer_Underflow__char_rand_multiply_64b.c":67:13)
#loc74 = loc("CWE191_Integer_Underflow__char_rand_multiply_64b.c":67:34)
#loc75 = loc("CWE191_Integer_Underflow__char_rand_multiply_64b.c":67:27)
#loc76 = loc("CWE191_Integer_Underflow__char_rand_multiply_64b.c":68:30)
#loc77 = loc("CWE191_Integer_Underflow__char_rand_multiply_64b.c":68:13)
#loc78 = loc("CWE191_Integer_Underflow__char_rand_multiply_64b.c":72:13)
#loc79 = loc(fused[#loc1, #loc2])
#loc80 = loc(fused[#loc3, #loc4])
#loc82 = loc(fused[#loc7, #loc8])
#loc83 = loc(fused[#loc9, #loc10])
#loc84 = loc(fused[#loc14, #loc15])
#loc85 = loc(fused[#loc16, #loc17])
#loc86 = loc(fused[#loc18, #loc15])
#loc87 = loc(fused[#loc19, #loc20])
#loc88 = loc(fused[#loc24, #loc25])
#loc90 = loc(fused[#loc28, #loc29])
#loc91 = loc(fused[#loc30, #loc31])
#loc92 = loc(fused[#loc35, #loc36])
#loc93 = loc(fused[#loc37, #loc38])
#loc94 = loc(fused[#loc39, #loc36])
#loc95 = loc(fused[#loc40, #loc41])
#loc96 = loc(fused[#loc45, #loc46])
#loc97 = loc(fused[#loc48, #loc49])
#loc99 = loc(fused[#loc52, #loc53])
#loc100 = loc(fused[#loc54, #loc55])
#loc101 = loc(fused[#loc59, #loc60])
#loc102 = loc(fused[#loc61, #loc62])
#loc103 = loc(fused[#loc63, #loc60])
#loc104 = loc(fused[#loc64, #loc65])
#loc105 = loc(fused[#loc67, #loc68])
#loc106 = loc(fused[#loc66, #loc69])
#loc107 = loc(fused[#loc70, #loc71, #loc72, #loc65])
#loc108 = loc(fused[#loc73, #loc74])
