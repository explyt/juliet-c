!s32i = !cir.int<s, 32>
!s64i = !cir.int<s, 64>
!s8i = !cir.int<s, 8>
!u32i = !cir.int<u, 32>
!u64i = !cir.int<u, 64>
!void = !cir.void
#fn_attr = #cir<extra({nothrow = #cir.nothrow})>
#fn_attr1 = #cir<extra({inline = #cir.inline<no>, nothrow = #cir.nothrow, optnone = #cir.optnone})>
#loc92 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE193_char_loop_15.c":143:10)
#loc93 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE193_char_loop_15.c":143:14)
#loc94 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE193_char_loop_15.c":143:20)
#loc95 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE193_char_loop_15.c":143:32)
#loc268 = loc(fused[#loc92, #loc93])
#loc269 = loc(fused[#loc94, #loc95])
module @"/home/ladisgin/git_proj/juliet-c/testcases/CWE122_Heap_Based_Buffer_Overflow/s06/CWE122_Heap_Based_Buffer_Overflow__c_CWE193_char_loop_15.c" attributes {cir.lang = #cir.lang<c>, cir.sob = #cir.signed_overflow_behavior<undefined>, cir.triple = "x86_64-unknown-linux-gnu", dlti.dl_spec = #dlti.dl_spec<!llvm.ptr<272> = dense<64> : vector<4xi64>, !llvm.ptr<271> = dense<32> : vector<4xi64>, i64 = dense<64> : vector<2xi64>, !llvm.ptr<270> = dense<32> : vector<4xi64>, i128 = dense<128> : vector<2xi64>, f80 = dense<128> : vector<2xi64>, !llvm.ptr = dense<64> : vector<4xi64>, i1 = dense<8> : vector<2xi64>, i8 = dense<8> : vector<2xi64>, i16 = dense<16> : vector<2xi64>, i32 = dense<32> : vector<2xi64>, f16 = dense<16> : vector<2xi64>, f64 = dense<64> : vector<2xi64>, f128 = dense<128> : vector<2xi64>, "dlti.endianness" = "little", "dlti.stack_alignment" = 128 : i64>} {
  cir.global "private" constant cir_private @__const.goodG2B2.source = #cir.const_array<"AAAAAAAAAA\00" : !cir.array<!s8i x 11>> : !cir.array<!s8i x 11> loc(#loc232)
  cir.global "private" constant cir_private @__const.goodG2B1.source = #cir.const_array<"AAAAAAAAAA\00" : !cir.array<!s8i x 11>> : !cir.array<!s8i x 11> loc(#loc233)
  cir.global "private" constant cir_private @__const.CWE122_Heap_Based_Buffer_Overflow__c_CWE193_char_loop_15_bad.source = #cir.const_array<"AAAAAAAAAA\00" : !cir.array<!s8i x 11>> : !cir.array<!s8i x 11> loc(#loc234)
  cir.func private @malloc(!u64i) -> !cir.ptr<!void> extra(#fn_attr) loc(#loc235)
  cir.func private @exit(!s32i) extra(#fn_attr) loc(#loc236)
  cir.func private @printLine(!cir.ptr<!s8i>) loc(#loc237)
  cir.global "private" constant cir_private dsolocal @".str" = #cir.const_array<"Benign, fixed string\00" : !cir.array<!s8i x 21>> : !cir.array<!s8i x 21> {alignment = 1 : i64} loc(#loc13)
  cir.func private @strlen(!cir.ptr<!s8i>) -> !u64i extra(#fn_attr) loc(#loc238)
  cir.func private @free(!cir.ptr<!void>) extra(#fn_attr) loc(#loc239)
  cir.func no_proto @CWE122_Heap_Based_Buffer_Overflow__c_CWE193_char_loop_15_bad() extra(#fn_attr1) {
    %0 = cir.alloca !cir.ptr<!s8i>, !cir.ptr<!cir.ptr<!s8i>>, ["data"] {alignment = 8 : i64} loc(#loc241)
    %1 = cir.const #cir.ptr<null> : !cir.ptr<!s8i> loc(#loc22)
    cir.store %1, %0 : !cir.ptr<!s8i>, !cir.ptr<!cir.ptr<!s8i>> loc(#loc242)
    cir.scope {
      %2 = cir.const #cir.int<6> : !s32i loc(#loc26)
      cir.switch (%2 : !s32i) {
        cir.case(equal, [#cir.int<6> : !s32i]) {
          %3 = cir.get_global @malloc : !cir.ptr<!cir.func<!cir.ptr<!void> (!u64i)>> loc(#loc28)
          %4 = cir.const #cir.int<10> : !s32i loc(#loc29)
          %5 = cir.cast(integral, %4 : !s32i), !u64i loc(#loc29)
          %6 = cir.const #cir.int<1> : !u64i loc(#loc244)
          %7 = cir.binop(mul, %5, %6) : !u64i loc(#loc245)
          %8 = cir.call @malloc(%7) : (!u64i) -> !cir.ptr<!void> extra(#fn_attr) loc(#loc28)
          %9 = cir.cast(bitcast, %8 : !cir.ptr<!void>), !cir.ptr<!s8i> loc(#loc246)
          cir.store %9, %0 : !cir.ptr<!s8i>, !cir.ptr<!cir.ptr<!s8i>> loc(#loc247)
          cir.scope {
            %10 = cir.load %0 : !cir.ptr<!cir.ptr<!s8i>>, !cir.ptr<!s8i> loc(#loc36)
            %11 = cir.const #cir.ptr<null> : !cir.ptr<!void> loc(#loc37)
            %12 = cir.cast(bitcast, %11 : !cir.ptr<!void>), !cir.ptr<!s8i> loc(#loc37)
            %13 = cir.cmp(eq, %10, %12) : !cir.ptr<!s8i>, !cir.bool loc(#loc249)
            cir.if %13 {
              %14 = cir.get_global @exit : !cir.ptr<!cir.func<!void (!s32i)>> loc(#loc39)
              %15 = cir.const #cir.int<1> : !s32i loc(#loc40)
              %16 = cir.unary(minus, %15) : !s32i, !s32i loc(#loc41)
              cir.call @exit(%16) : (!s32i) -> () extra(#fn_attr) loc(#loc39)
            } loc(#loc250)
          } loc(#loc248)
          cir.break loc(#loc42)
        } loc(#loc27)
        cir.case(default, []) {
          %3 = cir.get_global @".str" : !cir.ptr<!cir.array<!s8i x 21>> loc(#loc13)
          %4 = cir.cast(array_to_ptrdecay, %3 : !cir.ptr<!cir.array<!s8i x 21>>), !cir.ptr<!s8i> loc(#loc13)
          cir.call @printLine(%4) : (!cir.ptr<!s8i>) -> () loc(#loc44)
          cir.break loc(#loc45)
        } loc(#loc43)
        cir.yield loc(#loc24)
      } loc(#loc24)
    } loc(#loc243)
    cir.scope {
      %2 = cir.alloca !cir.array<!s8i x 11>, !cir.ptr<!cir.array<!s8i x 11>>, ["source"] {alignment = 1 : i64} loc(#loc234)
      %3 = cir.alloca !u64i, !cir.ptr<!u64i>, ["i"] {alignment = 8 : i64} loc(#loc252)
      %4 = cir.alloca !u64i, !cir.ptr<!u64i>, ["sourceLen"] {alignment = 8 : i64} loc(#loc253)
      %5 = cir.get_global @__const.CWE122_Heap_Based_Buffer_Overflow__c_CWE193_char_loop_15_bad.source : !cir.ptr<!cir.array<!s8i x 11>> loc(#loc234)
      cir.copy %5 to %2 : !cir.ptr<!cir.array<!s8i x 11>> loc(#loc234)
      %6 = cir.get_global @strlen : !cir.ptr<!cir.func<!u64i (!cir.ptr<!s8i>)>> loc(#loc51)
      %7 = cir.cast(array_to_ptrdecay, %2 : !cir.ptr<!cir.array<!s8i x 11>>), !cir.ptr<!s8i> loc(#loc52)
      %8 = cir.call @strlen(%7) : (!cir.ptr<!s8i>) -> !u64i extra(#fn_attr) loc(#loc51)
      cir.store %8, %4 : !u64i, !cir.ptr<!u64i> loc(#loc254)
      cir.scope {
        %13 = cir.const #cir.int<0> : !s32i loc(#loc57)
        %14 = cir.cast(integral, %13 : !s32i), !u64i loc(#loc57)
        cir.store %14, %3 : !u64i, !cir.ptr<!u64i> loc(#loc256)
        cir.for : cond {
          %15 = cir.load %3 : !cir.ptr<!u64i>, !u64i loc(#loc59)
          %16 = cir.load %4 : !cir.ptr<!u64i>, !u64i loc(#loc60)
          %17 = cir.const #cir.int<1> : !s32i loc(#loc61)
          %18 = cir.cast(integral, %17 : !s32i), !u64i loc(#loc61)
          %19 = cir.binop(add, %16, %18) : !u64i loc(#loc257)
          %20 = cir.cmp(lt, %15, %19) : !u64i, !cir.bool loc(#loc258)
          cir.condition(%20) loc(#loc62)
        } body {
          cir.scope {
            %15 = cir.load %3 : !cir.ptr<!u64i>, !u64i loc(#loc64)
            %16 = cir.cast(array_to_ptrdecay, %2 : !cir.ptr<!cir.array<!s8i x 11>>), !cir.ptr<!s8i> loc(#loc65)
            %17 = cir.ptr_stride(%16 : !cir.ptr<!s8i>, %15 : !u64i), !cir.ptr<!s8i> loc(#loc65)
            %18 = cir.load %17 : !cir.ptr<!s8i>, !s8i loc(#loc65)
            %19 = cir.load %0 : !cir.ptr<!cir.ptr<!s8i>>, !cir.ptr<!s8i> loc(#loc66)
            %20 = cir.load %3 : !cir.ptr<!u64i>, !u64i loc(#loc67)
            %21 = cir.ptr_stride(%19 : !cir.ptr<!s8i>, %20 : !u64i), !cir.ptr<!s8i> loc(#loc68)
            cir.store %18, %21 : !s8i, !cir.ptr<!s8i> loc(#loc260)
          } loc(#loc259)
          cir.yield loc(#loc56)
        } step {
          %15 = cir.load %3 : !cir.ptr<!u64i>, !u64i loc(#loc70)
          %16 = cir.unary(inc, %15) : !u64i, !u64i loc(#loc71)
          cir.store %16, %3 : !u64i, !cir.ptr<!u64i> loc(#loc261)
          cir.yield loc(#loc255)
        } loc(#loc255)
      } loc(#loc255)
      %9 = cir.load %0 : !cir.ptr<!cir.ptr<!s8i>>, !cir.ptr<!s8i> loc(#loc72)
      cir.call @printLine(%9) : (!cir.ptr<!s8i>) -> () loc(#loc73)
      %10 = cir.get_global @free : !cir.ptr<!cir.func<!void (!cir.ptr<!void>)>> loc(#loc74)
      %11 = cir.load %0 : !cir.ptr<!cir.ptr<!s8i>>, !cir.ptr<!s8i> loc(#loc75)
      %12 = cir.cast(bitcast, %11 : !cir.ptr<!s8i>), !cir.ptr<!void> loc(#loc75)
      cir.call @free(%12) : (!cir.ptr<!void>) -> () extra(#fn_attr) loc(#loc74)
    } loc(#loc251)
    cir.return loc(#loc19)
  } loc(#loc240)
  cir.func no_proto @CWE122_Heap_Based_Buffer_Overflow__c_CWE193_char_loop_15_good() extra(#fn_attr1) {
    %0 = cir.get_global @goodG2B1 : !cir.ptr<!cir.func<!void ()>> loc(#loc263)
    cir.call %0() : (!cir.ptr<!cir.func<!void ()>>) -> () loc(#loc78)
    %1 = cir.get_global @goodG2B2 : !cir.ptr<!cir.func<!void ()>> loc(#loc264)
    cir.call %1() : (!cir.ptr<!cir.func<!void ()>>) -> () loc(#loc80)
    cir.return loc(#loc77)
  } loc(#loc262)
  cir.func private @srand(!u32i) extra(#fn_attr) loc(#loc265)
  cir.func private @time(!cir.ptr<!s64i>) -> !s64i extra(#fn_attr) loc(#loc266)
  cir.global "private" constant cir_private dsolocal @".str.1" = #cir.const_array<"Calling good()...\00" : !cir.array<!s8i x 18>> : !cir.array<!s8i x 18> {alignment = 1 : i64} loc(#loc86)
  cir.global "private" constant cir_private dsolocal @".str.2" = #cir.const_array<"Finished good()\00" : !cir.array<!s8i x 16>> : !cir.array<!s8i x 16> {alignment = 1 : i64} loc(#loc87)
  cir.global "private" constant cir_private dsolocal @".str.3" = #cir.const_array<"Calling bad()...\00" : !cir.array<!s8i x 17>> : !cir.array<!s8i x 17> {alignment = 1 : i64} loc(#loc88)
  cir.global "private" constant cir_private dsolocal @".str.4" = #cir.const_array<"Finished bad()\00" : !cir.array<!s8i x 15>> : !cir.array<!s8i x 15> {alignment = 1 : i64} loc(#loc89)
  cir.func @main(%arg0: !s32i loc(fused[#loc92, #loc93]), %arg1: !cir.ptr<!cir.ptr<!s8i>> loc(fused[#loc94, #loc95])) -> !s32i extra(#fn_attr1) {
    %0 = cir.alloca !s32i, !cir.ptr<!s32i>, ["argc", init] {alignment = 4 : i64} loc(#loc268)
    %1 = cir.alloca !cir.ptr<!cir.ptr<!s8i>>, !cir.ptr<!cir.ptr<!cir.ptr<!s8i>>>, ["argv", init] {alignment = 8 : i64} loc(#loc269)
    %2 = cir.alloca !s32i, !cir.ptr<!s32i>, ["__retval"] {alignment = 4 : i64} loc(#loc91)
    cir.store %arg0, %0 : !s32i, !cir.ptr<!s32i> loc(#loc96)
    cir.store %arg1, %1 : !cir.ptr<!cir.ptr<!s8i>>, !cir.ptr<!cir.ptr<!cir.ptr<!s8i>>> loc(#loc96)
    %3 = cir.const #cir.ptr<null> : !cir.ptr<!s64i> loc(#loc97)
    %4 = cir.call @time(%3) : (!cir.ptr<!s64i>) -> !s64i extra(#fn_attr) loc(#loc98)
    %5 = cir.cast(integral, %4 : !s64i), !u32i loc(#loc98)
    cir.call @srand(%5) : (!u32i) -> () extra(#fn_attr) loc(#loc99)
    %6 = cir.get_global @".str.1" : !cir.ptr<!cir.array<!s8i x 18>> loc(#loc86)
    %7 = cir.cast(array_to_ptrdecay, %6 : !cir.ptr<!cir.array<!s8i x 18>>), !cir.ptr<!s8i> loc(#loc86)
    cir.call @printLine(%7) : (!cir.ptr<!s8i>) -> () loc(#loc100)
    %8 = cir.get_global @CWE122_Heap_Based_Buffer_Overflow__c_CWE193_char_loop_15_good : !cir.ptr<!cir.func<!void ()>> loc(#loc270)
    cir.call @CWE122_Heap_Based_Buffer_Overflow__c_CWE193_char_loop_15_good() : () -> () loc(#loc101)
    %9 = cir.get_global @".str.2" : !cir.ptr<!cir.array<!s8i x 16>> loc(#loc87)
    %10 = cir.cast(array_to_ptrdecay, %9 : !cir.ptr<!cir.array<!s8i x 16>>), !cir.ptr<!s8i> loc(#loc87)
    cir.call @printLine(%10) : (!cir.ptr<!s8i>) -> () loc(#loc103)
    %11 = cir.get_global @".str.3" : !cir.ptr<!cir.array<!s8i x 17>> loc(#loc88)
    %12 = cir.cast(array_to_ptrdecay, %11 : !cir.ptr<!cir.array<!s8i x 17>>), !cir.ptr<!s8i> loc(#loc88)
    cir.call @printLine(%12) : (!cir.ptr<!s8i>) -> () loc(#loc104)
    %13 = cir.get_global @CWE122_Heap_Based_Buffer_Overflow__c_CWE193_char_loop_15_bad : !cir.ptr<!cir.func<!void ()>> loc(#loc271)
    cir.call @CWE122_Heap_Based_Buffer_Overflow__c_CWE193_char_loop_15_bad() : () -> () loc(#loc105)
    %14 = cir.get_global @".str.4" : !cir.ptr<!cir.array<!s8i x 15>> loc(#loc89)
    %15 = cir.cast(array_to_ptrdecay, %14 : !cir.ptr<!cir.array<!s8i x 15>>), !cir.ptr<!s8i> loc(#loc89)
    cir.call @printLine(%15) : (!cir.ptr<!s8i>) -> () loc(#loc107)
    %16 = cir.const #cir.int<0> : !s32i loc(#loc108)
    cir.store %16, %2 : !s32i, !cir.ptr<!s32i> loc(#loc272)
    %17 = cir.load %2 : !cir.ptr<!s32i>, !s32i loc(#loc272)
    cir.return %17 : !s32i loc(#loc272)
  } loc(#loc267)
  cir.func no_proto internal private @goodG2B1() extra(#fn_attr1) {
    %0 = cir.alloca !cir.ptr<!s8i>, !cir.ptr<!cir.ptr<!s8i>>, ["data"] {alignment = 8 : i64} loc(#loc274)
    %1 = cir.const #cir.ptr<null> : !cir.ptr<!s8i> loc(#loc114)
    cir.store %1, %0 : !cir.ptr<!s8i>, !cir.ptr<!cir.ptr<!s8i>> loc(#loc275)
    cir.scope {
      %2 = cir.const #cir.int<5> : !s32i loc(#loc118)
      cir.switch (%2 : !s32i) {
        cir.case(equal, [#cir.int<6> : !s32i]) {
          %3 = cir.get_global @".str" : !cir.ptr<!cir.array<!s8i x 21>> loc(#loc120)
          %4 = cir.cast(array_to_ptrdecay, %3 : !cir.ptr<!cir.array<!s8i x 21>>), !cir.ptr<!s8i> loc(#loc120)
          cir.call @printLine(%4) : (!cir.ptr<!s8i>) -> () loc(#loc121)
          cir.break loc(#loc122)
        } loc(#loc119)
        cir.case(default, []) {
          %3 = cir.get_global @malloc : !cir.ptr<!cir.func<!cir.ptr<!void> (!u64i)>> loc(#loc124)
          %4 = cir.const #cir.int<10> : !s32i loc(#loc125)
          %5 = cir.const #cir.int<1> : !s32i loc(#loc126)
          %6 = cir.binop(add, %4, %5) nsw : !s32i loc(#loc125)
          %7 = cir.cast(integral, %6 : !s32i), !u64i loc(#loc125)
          %8 = cir.const #cir.int<1> : !u64i loc(#loc277)
          %9 = cir.binop(mul, %7, %8) : !u64i loc(#loc278)
          %10 = cir.call @malloc(%9) : (!u64i) -> !cir.ptr<!void> extra(#fn_attr) loc(#loc124)
          %11 = cir.cast(bitcast, %10 : !cir.ptr<!void>), !cir.ptr<!s8i> loc(#loc279)
          cir.store %11, %0 : !cir.ptr<!s8i>, !cir.ptr<!cir.ptr<!s8i>> loc(#loc280)
          cir.scope {
            %12 = cir.load %0 : !cir.ptr<!cir.ptr<!s8i>>, !cir.ptr<!s8i> loc(#loc134)
            %13 = cir.const #cir.ptr<null> : !cir.ptr<!void> loc(#loc135)
            %14 = cir.cast(bitcast, %13 : !cir.ptr<!void>), !cir.ptr<!s8i> loc(#loc135)
            %15 = cir.cmp(eq, %12, %14) : !cir.ptr<!s8i>, !cir.bool loc(#loc282)
            cir.if %15 {
              %16 = cir.get_global @exit : !cir.ptr<!cir.func<!void (!s32i)>> loc(#loc137)
              %17 = cir.const #cir.int<1> : !s32i loc(#loc138)
              %18 = cir.unary(minus, %17) : !s32i, !s32i loc(#loc139)
              cir.call @exit(%18) : (!s32i) -> () extra(#fn_attr) loc(#loc137)
            } loc(#loc283)
          } loc(#loc281)
          cir.break loc(#loc140)
        } loc(#loc123)
        cir.yield loc(#loc116)
      } loc(#loc116)
    } loc(#loc276)
    cir.scope {
      %2 = cir.alloca !cir.array<!s8i x 11>, !cir.ptr<!cir.array<!s8i x 11>>, ["source"] {alignment = 1 : i64} loc(#loc233)
      %3 = cir.alloca !u64i, !cir.ptr<!u64i>, ["i"] {alignment = 8 : i64} loc(#loc285)
      %4 = cir.alloca !u64i, !cir.ptr<!u64i>, ["sourceLen"] {alignment = 8 : i64} loc(#loc286)
      %5 = cir.get_global @__const.goodG2B1.source : !cir.ptr<!cir.array<!s8i x 11>> loc(#loc233)
      cir.copy %5 to %2 : !cir.ptr<!cir.array<!s8i x 11>> loc(#loc233)
      %6 = cir.get_global @strlen : !cir.ptr<!cir.func<!u64i (!cir.ptr<!s8i>)>> loc(#loc146)
      %7 = cir.cast(array_to_ptrdecay, %2 : !cir.ptr<!cir.array<!s8i x 11>>), !cir.ptr<!s8i> loc(#loc147)
      %8 = cir.call @strlen(%7) : (!cir.ptr<!s8i>) -> !u64i extra(#fn_attr) loc(#loc146)
      cir.store %8, %4 : !u64i, !cir.ptr<!u64i> loc(#loc287)
      cir.scope {
        %13 = cir.const #cir.int<0> : !s32i loc(#loc152)
        %14 = cir.cast(integral, %13 : !s32i), !u64i loc(#loc152)
        cir.store %14, %3 : !u64i, !cir.ptr<!u64i> loc(#loc289)
        cir.for : cond {
          %15 = cir.load %3 : !cir.ptr<!u64i>, !u64i loc(#loc154)
          %16 = cir.load %4 : !cir.ptr<!u64i>, !u64i loc(#loc155)
          %17 = cir.const #cir.int<1> : !s32i loc(#loc156)
          %18 = cir.cast(integral, %17 : !s32i), !u64i loc(#loc156)
          %19 = cir.binop(add, %16, %18) : !u64i loc(#loc290)
          %20 = cir.cmp(lt, %15, %19) : !u64i, !cir.bool loc(#loc291)
          cir.condition(%20) loc(#loc157)
        } body {
          cir.scope {
            %15 = cir.load %3 : !cir.ptr<!u64i>, !u64i loc(#loc159)
            %16 = cir.cast(array_to_ptrdecay, %2 : !cir.ptr<!cir.array<!s8i x 11>>), !cir.ptr<!s8i> loc(#loc160)
            %17 = cir.ptr_stride(%16 : !cir.ptr<!s8i>, %15 : !u64i), !cir.ptr<!s8i> loc(#loc160)
            %18 = cir.load %17 : !cir.ptr<!s8i>, !s8i loc(#loc160)
            %19 = cir.load %0 : !cir.ptr<!cir.ptr<!s8i>>, !cir.ptr<!s8i> loc(#loc161)
            %20 = cir.load %3 : !cir.ptr<!u64i>, !u64i loc(#loc162)
            %21 = cir.ptr_stride(%19 : !cir.ptr<!s8i>, %20 : !u64i), !cir.ptr<!s8i> loc(#loc163)
            cir.store %18, %21 : !s8i, !cir.ptr<!s8i> loc(#loc293)
          } loc(#loc292)
          cir.yield loc(#loc151)
        } step {
          %15 = cir.load %3 : !cir.ptr<!u64i>, !u64i loc(#loc165)
          %16 = cir.unary(inc, %15) : !u64i, !u64i loc(#loc166)
          cir.store %16, %3 : !u64i, !cir.ptr<!u64i> loc(#loc294)
          cir.yield loc(#loc288)
        } loc(#loc288)
      } loc(#loc288)
      %9 = cir.load %0 : !cir.ptr<!cir.ptr<!s8i>>, !cir.ptr<!s8i> loc(#loc167)
      cir.call @printLine(%9) : (!cir.ptr<!s8i>) -> () loc(#loc168)
      %10 = cir.get_global @free : !cir.ptr<!cir.func<!void (!cir.ptr<!void>)>> loc(#loc169)
      %11 = cir.load %0 : !cir.ptr<!cir.ptr<!s8i>>, !cir.ptr<!s8i> loc(#loc170)
      %12 = cir.cast(bitcast, %11 : !cir.ptr<!s8i>), !cir.ptr<!void> loc(#loc170)
      cir.call @free(%12) : (!cir.ptr<!void>) -> () extra(#fn_attr) loc(#loc169)
    } loc(#loc284)
    cir.return loc(#loc111)
  } loc(#loc273)
  cir.func no_proto internal private @goodG2B2() extra(#fn_attr1) {
    %0 = cir.alloca !cir.ptr<!s8i>, !cir.ptr<!cir.ptr<!s8i>>, ["data"] {alignment = 8 : i64} loc(#loc296)
    %1 = cir.const #cir.ptr<null> : !cir.ptr<!s8i> loc(#loc175)
    cir.store %1, %0 : !cir.ptr<!s8i>, !cir.ptr<!cir.ptr<!s8i>> loc(#loc297)
    cir.scope {
      %2 = cir.const #cir.int<6> : !s32i loc(#loc179)
      cir.switch (%2 : !s32i) {
        cir.case(equal, [#cir.int<6> : !s32i]) {
          %3 = cir.get_global @malloc : !cir.ptr<!cir.func<!cir.ptr<!void> (!u64i)>> loc(#loc181)
          %4 = cir.const #cir.int<10> : !s32i loc(#loc182)
          %5 = cir.const #cir.int<1> : !s32i loc(#loc183)
          %6 = cir.binop(add, %4, %5) nsw : !s32i loc(#loc182)
          %7 = cir.cast(integral, %6 : !s32i), !u64i loc(#loc182)
          %8 = cir.const #cir.int<1> : !u64i loc(#loc299)
          %9 = cir.binop(mul, %7, %8) : !u64i loc(#loc300)
          %10 = cir.call @malloc(%9) : (!u64i) -> !cir.ptr<!void> extra(#fn_attr) loc(#loc181)
          %11 = cir.cast(bitcast, %10 : !cir.ptr<!void>), !cir.ptr<!s8i> loc(#loc301)
          cir.store %11, %0 : !cir.ptr<!s8i>, !cir.ptr<!cir.ptr<!s8i>> loc(#loc302)
          cir.scope {
            %12 = cir.load %0 : !cir.ptr<!cir.ptr<!s8i>>, !cir.ptr<!s8i> loc(#loc191)
            %13 = cir.const #cir.ptr<null> : !cir.ptr<!void> loc(#loc192)
            %14 = cir.cast(bitcast, %13 : !cir.ptr<!void>), !cir.ptr<!s8i> loc(#loc192)
            %15 = cir.cmp(eq, %12, %14) : !cir.ptr<!s8i>, !cir.bool loc(#loc304)
            cir.if %15 {
              %16 = cir.get_global @exit : !cir.ptr<!cir.func<!void (!s32i)>> loc(#loc194)
              %17 = cir.const #cir.int<1> : !s32i loc(#loc195)
              %18 = cir.unary(minus, %17) : !s32i, !s32i loc(#loc196)
              cir.call @exit(%18) : (!s32i) -> () extra(#fn_attr) loc(#loc194)
            } loc(#loc305)
          } loc(#loc303)
          cir.break loc(#loc197)
        } loc(#loc180)
        cir.case(default, []) {
          %3 = cir.get_global @".str" : !cir.ptr<!cir.array<!s8i x 21>> loc(#loc199)
          %4 = cir.cast(array_to_ptrdecay, %3 : !cir.ptr<!cir.array<!s8i x 21>>), !cir.ptr<!s8i> loc(#loc199)
          cir.call @printLine(%4) : (!cir.ptr<!s8i>) -> () loc(#loc200)
          cir.break loc(#loc201)
        } loc(#loc198)
        cir.yield loc(#loc177)
      } loc(#loc177)
    } loc(#loc298)
    cir.scope {
      %2 = cir.alloca !cir.array<!s8i x 11>, !cir.ptr<!cir.array<!s8i x 11>>, ["source"] {alignment = 1 : i64} loc(#loc232)
      %3 = cir.alloca !u64i, !cir.ptr<!u64i>, ["i"] {alignment = 8 : i64} loc(#loc307)
      %4 = cir.alloca !u64i, !cir.ptr<!u64i>, ["sourceLen"] {alignment = 8 : i64} loc(#loc308)
      %5 = cir.get_global @__const.goodG2B2.source : !cir.ptr<!cir.array<!s8i x 11>> loc(#loc232)
      cir.copy %5 to %2 : !cir.ptr<!cir.array<!s8i x 11>> loc(#loc232)
      %6 = cir.get_global @strlen : !cir.ptr<!cir.func<!u64i (!cir.ptr<!s8i>)>> loc(#loc207)
      %7 = cir.cast(array_to_ptrdecay, %2 : !cir.ptr<!cir.array<!s8i x 11>>), !cir.ptr<!s8i> loc(#loc208)
      %8 = cir.call @strlen(%7) : (!cir.ptr<!s8i>) -> !u64i extra(#fn_attr) loc(#loc207)
      cir.store %8, %4 : !u64i, !cir.ptr<!u64i> loc(#loc309)
      cir.scope {
        %13 = cir.const #cir.int<0> : !s32i loc(#loc213)
        %14 = cir.cast(integral, %13 : !s32i), !u64i loc(#loc213)
        cir.store %14, %3 : !u64i, !cir.ptr<!u64i> loc(#loc311)
        cir.for : cond {
          %15 = cir.load %3 : !cir.ptr<!u64i>, !u64i loc(#loc215)
          %16 = cir.load %4 : !cir.ptr<!u64i>, !u64i loc(#loc216)
          %17 = cir.const #cir.int<1> : !s32i loc(#loc217)
          %18 = cir.cast(integral, %17 : !s32i), !u64i loc(#loc217)
          %19 = cir.binop(add, %16, %18) : !u64i loc(#loc312)
          %20 = cir.cmp(lt, %15, %19) : !u64i, !cir.bool loc(#loc313)
          cir.condition(%20) loc(#loc218)
        } body {
          cir.scope {
            %15 = cir.load %3 : !cir.ptr<!u64i>, !u64i loc(#loc220)
            %16 = cir.cast(array_to_ptrdecay, %2 : !cir.ptr<!cir.array<!s8i x 11>>), !cir.ptr<!s8i> loc(#loc221)
            %17 = cir.ptr_stride(%16 : !cir.ptr<!s8i>, %15 : !u64i), !cir.ptr<!s8i> loc(#loc221)
            %18 = cir.load %17 : !cir.ptr<!s8i>, !s8i loc(#loc221)
            %19 = cir.load %0 : !cir.ptr<!cir.ptr<!s8i>>, !cir.ptr<!s8i> loc(#loc222)
            %20 = cir.load %3 : !cir.ptr<!u64i>, !u64i loc(#loc223)
            %21 = cir.ptr_stride(%19 : !cir.ptr<!s8i>, %20 : !u64i), !cir.ptr<!s8i> loc(#loc224)
            cir.store %18, %21 : !s8i, !cir.ptr<!s8i> loc(#loc315)
          } loc(#loc314)
          cir.yield loc(#loc212)
        } step {
          %15 = cir.load %3 : !cir.ptr<!u64i>, !u64i loc(#loc226)
          %16 = cir.unary(inc, %15) : !u64i, !u64i loc(#loc227)
          cir.store %16, %3 : !u64i, !cir.ptr<!u64i> loc(#loc316)
          cir.yield loc(#loc310)
        } loc(#loc310)
      } loc(#loc310)
      %9 = cir.load %0 : !cir.ptr<!cir.ptr<!s8i>>, !cir.ptr<!s8i> loc(#loc228)
      cir.call @printLine(%9) : (!cir.ptr<!s8i>) -> () loc(#loc229)
      %10 = cir.get_global @free : !cir.ptr<!cir.func<!void (!cir.ptr<!void>)>> loc(#loc230)
      %11 = cir.load %0 : !cir.ptr<!cir.ptr<!s8i>>, !cir.ptr<!s8i> loc(#loc231)
      %12 = cir.cast(bitcast, %11 : !cir.ptr<!s8i>), !cir.ptr<!void> loc(#loc231)
      cir.call @free(%12) : (!cir.ptr<!void>) -> () extra(#fn_attr) loc(#loc230)
    } loc(#loc306)
    cir.return loc(#loc172)
  } loc(#loc295)
} loc(#loc)
#loc = loc("/home/ladisgin/git_proj/juliet-c/testcases/CWE122_Heap_Based_Buffer_Overflow/s06/CWE122_Heap_Based_Buffer_Overflow__c_CWE193_char_loop_15.c":0:0)
#loc1 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE193_char_loop_15.c":113:9)
#loc2 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE193_char_loop_15.c":113:29)
#loc3 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE193_char_loop_15.c":81:9)
#loc4 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE193_char_loop_15.c":81:29)
#loc5 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE193_char_loop_15.c":45:9)
#loc6 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE193_char_loop_15.c":45:29)
#loc7 = loc("/usr/include/stdlib.h":672:1)
#loc8 = loc("/usr/include/stdlib.h":672:45)
#loc9 = loc("/usr/include/stdlib.h":756:1)
#loc10 = loc("/usr/include/stdlib.h":756:70)
#loc11 = loc("../../../testcasesupport/std_testcase_io.h":14:1)
#loc12 = loc("../../../testcasesupport/std_testcase_io.h":14:33)
#loc13 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE193_char_loop_15.c":41:19)
#loc14 = loc("/usr/include/string.h":407:1)
#loc15 = loc("/usr/include/string.h":408:33)
#loc16 = loc("/usr/include/stdlib.h":687:1)
#loc17 = loc("/usr/include/stdlib.h":687:32)
#loc18 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE193_char_loop_15.c":28:1)
#loc19 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE193_char_loop_15.c":57:1)
#loc20 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE193_char_loop_15.c":30:5)
#loc21 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE193_char_loop_15.c":30:12)
#loc22 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE193_char_loop_15.c":31:12)
#loc23 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE193_char_loop_15.c":31:5)
#loc24 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE193_char_loop_15.c":32:5)
#loc25 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE193_char_loop_15.c":43:5)
#loc26 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE193_char_loop_15.c":32:12)
#loc27 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE193_char_loop_15.c":34:5)
#loc28 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE193_char_loop_15.c":36:24)
#loc29 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE193_char_loop_15.c":36:31)
#loc30 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE193_char_loop_15.c":36:34)
#loc31 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE193_char_loop_15.c":36:45)
#loc32 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE193_char_loop_15.c":36:46)
#loc33 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE193_char_loop_15.c":36:9)
#loc34 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE193_char_loop_15.c":37:9)
#loc35 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE193_char_loop_15.c":37:37)
#loc36 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE193_char_loop_15.c":37:13)
#loc37 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE193_char_loop_15.c":37:21)
#loc38 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE193_char_loop_15.c":37:27)
#loc39 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE193_char_loop_15.c":37:28)
#loc40 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE193_char_loop_15.c":37:34)
#loc41 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE193_char_loop_15.c":37:33)
#loc42 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE193_char_loop_15.c":38:9)
#loc43 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE193_char_loop_15.c":39:5)
#loc44 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE193_char_loop_15.c":41:9)
#loc45 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE193_char_loop_15.c":42:9)
#loc46 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE193_char_loop_15.c":44:5)
#loc47 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE193_char_loop_15.c":56:5)
#loc48 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE193_char_loop_15.c":46:9)
#loc49 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE193_char_loop_15.c":46:16)
#loc50 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE193_char_loop_15.c":46:19)
#loc51 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE193_char_loop_15.c":47:21)
#loc52 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE193_char_loop_15.c":47:28)
#loc53 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE193_char_loop_15.c":47:9)
#loc54 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE193_char_loop_15.c":47:34)
#loc55 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE193_char_loop_15.c":50:9)
#loc56 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE193_char_loop_15.c":53:9)
#loc57 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE193_char_loop_15.c":50:18)
#loc58 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE193_char_loop_15.c":50:14)
#loc59 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE193_char_loop_15.c":50:21)
#loc60 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE193_char_loop_15.c":50:25)
#loc61 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE193_char_loop_15.c":50:37)
#loc62 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE193_char_loop_15.c":50:23)
#loc63 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE193_char_loop_15.c":51:9)
#loc64 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE193_char_loop_15.c":52:30)
#loc65 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE193_char_loop_15.c":52:23)
#loc66 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE193_char_loop_15.c":52:13)
#loc67 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE193_char_loop_15.c":52:18)
#loc68 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE193_char_loop_15.c":52:19)
#loc69 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE193_char_loop_15.c":52:31)
#loc70 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE193_char_loop_15.c":50:41)
#loc71 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE193_char_loop_15.c":50:40)
#loc72 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE193_char_loop_15.c":54:19)
#loc73 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE193_char_loop_15.c":54:9)
#loc74 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE193_char_loop_15.c":55:9)
#loc75 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE193_char_loop_15.c":55:14)
#loc76 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE193_char_loop_15.c":127:1)
#loc77 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE193_char_loop_15.c":131:1)
#loc78 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE193_char_loop_15.c":129:5)
#loc79 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE193_char_loop_15.c":129:14)
#loc80 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE193_char_loop_15.c":130:5)
#loc81 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE193_char_loop_15.c":130:14)
#loc82 = loc("/usr/include/stdlib.h":575:1)
#loc83 = loc("/usr/include/stdlib.h":575:41)
#loc84 = loc("/usr/include/time.h":76:1)
#loc85 = loc("/usr/include/time.h":76:38)
#loc86 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE193_char_loop_15.c":148:15)
#loc87 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE193_char_loop_15.c":150:15)
#loc88 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE193_char_loop_15.c":153:15)
#loc89 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE193_char_loop_15.c":155:15)
#loc90 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE193_char_loop_15.c":143:1)
#loc91 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE193_char_loop_15.c":158:1)
#loc96 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE193_char_loop_15.c":144:1)
#loc97 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE193_char_loop_15.c":146:27)
#loc98 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE193_char_loop_15.c":146:22)
#loc99 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE193_char_loop_15.c":146:5)
#loc100 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE193_char_loop_15.c":148:5)
#loc101 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE193_char_loop_15.c":149:5)
#loc102 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE193_char_loop_15.c":149:67)
#loc103 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE193_char_loop_15.c":150:5)
#loc104 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE193_char_loop_15.c":153:5)
#loc105 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE193_char_loop_15.c":154:5)
#loc106 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE193_char_loop_15.c":154:66)
#loc107 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE193_char_loop_15.c":155:5)
#loc108 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE193_char_loop_15.c":157:12)
#loc109 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE193_char_loop_15.c":157:5)
#loc110 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE193_char_loop_15.c":64:1)
#loc111 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE193_char_loop_15.c":93:1)
#loc112 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE193_char_loop_15.c":66:5)
#loc113 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE193_char_loop_15.c":66:12)
#loc114 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE193_char_loop_15.c":67:12)
#loc115 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE193_char_loop_15.c":67:5)
#loc116 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE193_char_loop_15.c":68:5)
#loc117 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE193_char_loop_15.c":79:5)
#loc118 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE193_char_loop_15.c":68:12)
#loc119 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE193_char_loop_15.c":70:5)
#loc120 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE193_char_loop_15.c":72:19)
#loc121 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE193_char_loop_15.c":72:9)
#loc122 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE193_char_loop_15.c":73:9)
#loc123 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE193_char_loop_15.c":74:5)
#loc124 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE193_char_loop_15.c":76:24)
#loc125 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE193_char_loop_15.c":76:32)
#loc126 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE193_char_loop_15.c":76:35)
#loc127 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE193_char_loop_15.c":76:38)
#loc128 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE193_char_loop_15.c":76:49)
#loc129 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE193_char_loop_15.c":76:31)
#loc130 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE193_char_loop_15.c":76:50)
#loc131 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE193_char_loop_15.c":76:9)
#loc132 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE193_char_loop_15.c":77:9)
#loc133 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE193_char_loop_15.c":77:37)
#loc134 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE193_char_loop_15.c":77:13)
#loc135 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE193_char_loop_15.c":77:21)
#loc136 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE193_char_loop_15.c":77:27)
#loc137 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE193_char_loop_15.c":77:28)
#loc138 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE193_char_loop_15.c":77:34)
#loc139 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE193_char_loop_15.c":77:33)
#loc140 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE193_char_loop_15.c":78:9)
#loc141 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE193_char_loop_15.c":80:5)
#loc142 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE193_char_loop_15.c":92:5)
#loc143 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE193_char_loop_15.c":82:9)
#loc144 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE193_char_loop_15.c":82:16)
#loc145 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE193_char_loop_15.c":82:19)
#loc146 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE193_char_loop_15.c":83:21)
#loc147 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE193_char_loop_15.c":83:28)
#loc148 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE193_char_loop_15.c":83:9)
#loc149 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE193_char_loop_15.c":83:34)
#loc150 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE193_char_loop_15.c":86:9)
#loc151 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE193_char_loop_15.c":89:9)
#loc152 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE193_char_loop_15.c":86:18)
#loc153 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE193_char_loop_15.c":86:14)
#loc154 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE193_char_loop_15.c":86:21)
#loc155 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE193_char_loop_15.c":86:25)
#loc156 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE193_char_loop_15.c":86:37)
#loc157 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE193_char_loop_15.c":86:23)
#loc158 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE193_char_loop_15.c":87:9)
#loc159 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE193_char_loop_15.c":88:30)
#loc160 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE193_char_loop_15.c":88:23)
#loc161 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE193_char_loop_15.c":88:13)
#loc162 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE193_char_loop_15.c":88:18)
#loc163 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE193_char_loop_15.c":88:19)
#loc164 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE193_char_loop_15.c":88:31)
#loc165 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE193_char_loop_15.c":86:41)
#loc166 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE193_char_loop_15.c":86:40)
#loc167 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE193_char_loop_15.c":90:19)
#loc168 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE193_char_loop_15.c":90:9)
#loc169 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE193_char_loop_15.c":91:9)
#loc170 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE193_char_loop_15.c":91:14)
#loc171 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE193_char_loop_15.c":96:1)
#loc172 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE193_char_loop_15.c":125:1)
#loc173 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE193_char_loop_15.c":98:5)
#loc174 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE193_char_loop_15.c":98:12)
#loc175 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE193_char_loop_15.c":99:12)
#loc176 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE193_char_loop_15.c":99:5)
#loc177 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE193_char_loop_15.c":100:5)
#loc178 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE193_char_loop_15.c":111:5)
#loc179 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE193_char_loop_15.c":100:12)
#loc180 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE193_char_loop_15.c":102:5)
#loc181 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE193_char_loop_15.c":104:24)
#loc182 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE193_char_loop_15.c":104:32)
#loc183 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE193_char_loop_15.c":104:35)
#loc184 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE193_char_loop_15.c":104:38)
#loc185 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE193_char_loop_15.c":104:49)
#loc186 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE193_char_loop_15.c":104:31)
#loc187 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE193_char_loop_15.c":104:50)
#loc188 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE193_char_loop_15.c":104:9)
#loc189 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE193_char_loop_15.c":105:9)
#loc190 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE193_char_loop_15.c":105:37)
#loc191 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE193_char_loop_15.c":105:13)
#loc192 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE193_char_loop_15.c":105:21)
#loc193 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE193_char_loop_15.c":105:27)
#loc194 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE193_char_loop_15.c":105:28)
#loc195 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE193_char_loop_15.c":105:34)
#loc196 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE193_char_loop_15.c":105:33)
#loc197 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE193_char_loop_15.c":106:9)
#loc198 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE193_char_loop_15.c":107:5)
#loc199 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE193_char_loop_15.c":109:19)
#loc200 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE193_char_loop_15.c":109:9)
#loc201 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE193_char_loop_15.c":110:9)
#loc202 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE193_char_loop_15.c":112:5)
#loc203 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE193_char_loop_15.c":124:5)
#loc204 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE193_char_loop_15.c":114:9)
#loc205 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE193_char_loop_15.c":114:16)
#loc206 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE193_char_loop_15.c":114:19)
#loc207 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE193_char_loop_15.c":115:21)
#loc208 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE193_char_loop_15.c":115:28)
#loc209 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE193_char_loop_15.c":115:9)
#loc210 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE193_char_loop_15.c":115:34)
#loc211 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE193_char_loop_15.c":118:9)
#loc212 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE193_char_loop_15.c":121:9)
#loc213 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE193_char_loop_15.c":118:18)
#loc214 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE193_char_loop_15.c":118:14)
#loc215 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE193_char_loop_15.c":118:21)
#loc216 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE193_char_loop_15.c":118:25)
#loc217 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE193_char_loop_15.c":118:37)
#loc218 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE193_char_loop_15.c":118:23)
#loc219 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE193_char_loop_15.c":119:9)
#loc220 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE193_char_loop_15.c":120:30)
#loc221 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE193_char_loop_15.c":120:23)
#loc222 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE193_char_loop_15.c":120:13)
#loc223 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE193_char_loop_15.c":120:18)
#loc224 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE193_char_loop_15.c":120:19)
#loc225 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE193_char_loop_15.c":120:31)
#loc226 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE193_char_loop_15.c":118:41)
#loc227 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE193_char_loop_15.c":118:40)
#loc228 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE193_char_loop_15.c":122:19)
#loc229 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE193_char_loop_15.c":122:9)
#loc230 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE193_char_loop_15.c":123:9)
#loc231 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE193_char_loop_15.c":123:14)
#loc232 = loc(fused[#loc1, #loc2])
#loc233 = loc(fused[#loc3, #loc4])
#loc234 = loc(fused[#loc5, #loc6])
#loc235 = loc(fused[#loc7, #loc8])
#loc236 = loc(fused[#loc9, #loc10])
#loc237 = loc(fused[#loc11, #loc12])
#loc238 = loc(fused[#loc14, #loc15])
#loc239 = loc(fused[#loc16, #loc17])
#loc240 = loc(fused[#loc18, #loc19])
#loc241 = loc(fused[#loc20, #loc21])
#loc242 = loc(fused[#loc23, #loc22])
#loc243 = loc(fused[#loc24, #loc25])
#loc244 = loc(fused[#loc30, #loc31])
#loc245 = loc(fused[#loc29, #loc31])
#loc246 = loc(fused[#loc28, #loc32])
#loc247 = loc(fused[#loc33, #loc32])
#loc248 = loc(fused[#loc34, #loc35])
#loc249 = loc(fused[#loc36, #loc37])
#loc250 = loc(fused[#loc38, #loc35])
#loc251 = loc(fused[#loc46, #loc47])
#loc252 = loc(fused[#loc48, #loc49])
#loc253 = loc(fused[#loc48, #loc50])
#loc254 = loc(fused[#loc53, #loc54])
#loc255 = loc(fused[#loc55, #loc56])
#loc256 = loc(fused[#loc58, #loc57])
#loc257 = loc(fused[#loc60, #loc61])
#loc258 = loc(fused[#loc59, #loc61])
#loc259 = loc(fused[#loc63, #loc56])
#loc260 = loc(fused[#loc66, #loc69])
#loc261 = loc(fused[#loc71, #loc70])
#loc262 = loc(fused[#loc76, #loc77])
#loc263 = loc(fused[#loc78, #loc79])
#loc264 = loc(fused[#loc80, #loc81])
#loc265 = loc(fused[#loc82, #loc83])
#loc266 = loc(fused[#loc84, #loc85])
#loc267 = loc(fused[#loc90, #loc91])
#loc270 = loc(fused[#loc101, #loc102])
#loc271 = loc(fused[#loc105, #loc106])
#loc272 = loc(fused[#loc109, #loc108])
#loc273 = loc(fused[#loc110, #loc111])
#loc274 = loc(fused[#loc112, #loc113])
#loc275 = loc(fused[#loc115, #loc114])
#loc276 = loc(fused[#loc116, #loc117])
#loc277 = loc(fused[#loc127, #loc128])
#loc278 = loc(fused[#loc129, #loc128])
#loc279 = loc(fused[#loc124, #loc130])
#loc280 = loc(fused[#loc131, #loc130])
#loc281 = loc(fused[#loc132, #loc133])
#loc282 = loc(fused[#loc134, #loc135])
#loc283 = loc(fused[#loc136, #loc133])
#loc284 = loc(fused[#loc141, #loc142])
#loc285 = loc(fused[#loc143, #loc144])
#loc286 = loc(fused[#loc143, #loc145])
#loc287 = loc(fused[#loc148, #loc149])
#loc288 = loc(fused[#loc150, #loc151])
#loc289 = loc(fused[#loc153, #loc152])
#loc290 = loc(fused[#loc155, #loc156])
#loc291 = loc(fused[#loc154, #loc156])
#loc292 = loc(fused[#loc158, #loc151])
#loc293 = loc(fused[#loc161, #loc164])
#loc294 = loc(fused[#loc166, #loc165])
#loc295 = loc(fused[#loc171, #loc172])
#loc296 = loc(fused[#loc173, #loc174])
#loc297 = loc(fused[#loc176, #loc175])
#loc298 = loc(fused[#loc177, #loc178])
#loc299 = loc(fused[#loc184, #loc185])
#loc300 = loc(fused[#loc186, #loc185])
#loc301 = loc(fused[#loc181, #loc187])
#loc302 = loc(fused[#loc188, #loc187])
#loc303 = loc(fused[#loc189, #loc190])
#loc304 = loc(fused[#loc191, #loc192])
#loc305 = loc(fused[#loc193, #loc190])
#loc306 = loc(fused[#loc202, #loc203])
#loc307 = loc(fused[#loc204, #loc205])
#loc308 = loc(fused[#loc204, #loc206])
#loc309 = loc(fused[#loc209, #loc210])
#loc310 = loc(fused[#loc211, #loc212])
#loc311 = loc(fused[#loc214, #loc213])
#loc312 = loc(fused[#loc216, #loc217])
#loc313 = loc(fused[#loc215, #loc217])
#loc314 = loc(fused[#loc219, #loc212])
#loc315 = loc(fused[#loc222, #loc225])
#loc316 = loc(fused[#loc227, #loc226])
