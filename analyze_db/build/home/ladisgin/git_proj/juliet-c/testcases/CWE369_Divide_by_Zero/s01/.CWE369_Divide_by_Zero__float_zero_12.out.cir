!s32i = !cir.int<s, 32>
!s64i = !cir.int<s, 64>
!s8i = !cir.int<s, 8>
!u32i = !cir.int<u, 32>
!void = !cir.void
#fn_attr = #cir<extra({inline = #cir.inline<no>, nothrow = #cir.nothrow, optnone = #cir.optnone})>
#fn_attr1 = #cir<extra({nothrow = #cir.nothrow})>
#loc71 = loc("CWE369_Divide_by_Zero__float_zero_12.c":163:10)
#loc72 = loc("CWE369_Divide_by_Zero__float_zero_12.c":163:14)
#loc73 = loc("CWE369_Divide_by_Zero__float_zero_12.c":163:20)
#loc74 = loc("CWE369_Divide_by_Zero__float_zero_12.c":163:32)
#loc213 = loc(fused[#loc71, #loc72])
#loc214 = loc(fused[#loc73, #loc74])
module @"/home/ladisgin/git_proj/juliet-c/testcases/CWE369_Divide_by_Zero/s01/CWE369_Divide_by_Zero__float_zero_12.c" attributes {cir.lang = #cir.lang<c>, cir.sob = #cir.signed_overflow_behavior<undefined>, cir.triple = "x86_64-unknown-linux-gnu", dlti.dl_spec = #dlti.dl_spec<i32 = dense<32> : vector<2xi64>, f64 = dense<64> : vector<2xi64>, f128 = dense<128> : vector<2xi64>, !llvm.ptr<270> = dense<32> : vector<4xi64>, f16 = dense<16> : vector<2xi64>, i1 = dense<8> : vector<2xi64>, !llvm.ptr = dense<64> : vector<4xi64>, i16 = dense<16> : vector<2xi64>, i8 = dense<8> : vector<2xi64>, i128 = dense<128> : vector<2xi64>, f80 = dense<128> : vector<2xi64>, !llvm.ptr<271> = dense<32> : vector<4xi64>, !llvm.ptr<272> = dense<64> : vector<4xi64>, i64 = dense<64> : vector<2xi64>, "dlti.endianness" = "little", "dlti.stack_alignment" = 128 : i64>} {
  cir.func no_proto private @globalReturnsTrueOrFalse(...) -> !s32i loc(#loc185)
  cir.func private @printIntLine(!s32i) loc(#loc186)
  cir.func private @printLine(!cir.ptr<!s8i>) loc(#loc187)
  cir.global "private" constant cir_private dsolocal @".str" = #cir.const_array<"This would result in a divide by zero\00" : !cir.array<!s8i x 38>> : !cir.array<!s8i x 38> {alignment = 1 : i64} loc(#loc7)
  cir.func no_proto @CWE369_Divide_by_Zero__float_zero_12_bad() extra(#fn_attr) {
    %0 = cir.alloca !cir.float, !cir.ptr<!cir.float>, ["data"] {alignment = 4 : i64} loc(#loc189)
    %1 = cir.const #cir.fp<0.000000e+00> : !cir.float loc(#loc12)
    cir.store %1, %0 : !cir.float, !cir.ptr<!cir.float> loc(#loc190)
    cir.scope {
      %2 = cir.get_global @globalReturnsTrueOrFalse : !cir.ptr<!cir.func<!s32i (...)>> loc(#loc192)
      %3 = cir.cast(bitcast, %2 : !cir.ptr<!cir.func<!s32i (...)>>), !cir.ptr<!cir.func<!s32i ()>> loc(#loc192)
      %4 = cir.call %3() : (!cir.ptr<!cir.func<!s32i ()>>) -> !s32i loc(#loc16)
      %5 = cir.cast(int_to_bool, %4 : !s32i), !cir.bool loc(#loc16)
      cir.if %5 {
        %6 = cir.const #cir.fp<0.000000e+00> : !cir.float loc(#loc21)
        cir.store %6, %0 : !cir.float, !cir.ptr<!cir.float> loc(#loc194)
      } else {
        %6 = cir.const #cir.fp<2.000000e+00> : !cir.float loc(#loc23)
        cir.store %6, %0 : !cir.float, !cir.ptr<!cir.float> loc(#loc195)
      } loc(#loc193)
    } loc(#loc191)
    cir.scope {
      %2 = cir.get_global @globalReturnsTrueOrFalse : !cir.ptr<!cir.func<!s32i (...)>> loc(#loc197)
      %3 = cir.cast(bitcast, %2 : !cir.ptr<!cir.func<!s32i (...)>>), !cir.ptr<!cir.func<!s32i ()>> loc(#loc197)
      %4 = cir.call %3() : (!cir.ptr<!cir.func<!s32i ()>>) -> !s32i loc(#loc27)
      %5 = cir.cast(int_to_bool, %4 : !s32i), !cir.bool loc(#loc27)
      cir.if %5 {
        cir.scope {
          %6 = cir.alloca !s32i, !cir.ptr<!s32i>, ["result", init] {alignment = 4 : i64} loc(#loc200)
          %7 = cir.const #cir.fp<1.000000e+02> : !cir.double loc(#loc36)
          %8 = cir.load %0 : !cir.ptr<!cir.float>, !cir.float loc(#loc37)
          %9 = cir.cast(floating, %8 : !cir.float), !cir.double loc(#loc37)
          %10 = cir.binop(div, %7, %9) : !cir.double loc(#loc201)
          %11 = cir.cast(float_to_int, %10 : !cir.double), !s32i loc(#loc201)
          cir.store %11, %6 : !s32i, !cir.ptr<!s32i> loc(#loc200)
          %12 = cir.load %6 : !cir.ptr<!s32i>, !s32i loc(#loc38)
          cir.call @printIntLine(%12) : (!s32i) -> () loc(#loc39)
        } loc(#loc199)
      } else {
        cir.scope {
          %6 = cir.load %0 : !cir.ptr<!cir.float>, !cir.float loc(#loc42)
          %7 = cir.cast(floating, %6 : !cir.float), !cir.double loc(#loc42)
          %8 = cir.fabs %7 : !cir.double loc(#loc42)
          %9 = cir.const #cir.fp<9.9999999999999995E-7> : !cir.double loc(#loc43)
          %10 = cir.cmp(gt, %8, %9) : !cir.double, !cir.bool loc(#loc203)
          cir.if %10 {
            %11 = cir.alloca !s32i, !cir.ptr<!s32i>, ["result", init] {alignment = 4 : i64} loc(#loc205)
            %12 = cir.const #cir.fp<1.000000e+02> : !cir.double loc(#loc50)
            %13 = cir.load %0 : !cir.ptr<!cir.float>, !cir.float loc(#loc51)
            %14 = cir.cast(floating, %13 : !cir.float), !cir.double loc(#loc51)
            %15 = cir.binop(div, %12, %14) : !cir.double loc(#loc206)
            %16 = cir.cast(float_to_int, %15 : !cir.double), !s32i loc(#loc206)
            cir.store %16, %11 : !s32i, !cir.ptr<!s32i> loc(#loc205)
            %17 = cir.load %11 : !cir.ptr<!s32i>, !s32i loc(#loc52)
            cir.call @printIntLine(%17) : (!s32i) -> () loc(#loc53)
          } else {
            %11 = cir.get_global @".str" : !cir.ptr<!cir.array<!s8i x 38>> loc(#loc7)
            %12 = cir.cast(array_to_ptrdecay, %11 : !cir.ptr<!cir.array<!s8i x 38>>), !cir.ptr<!s8i> loc(#loc7)
            cir.call @printLine(%12) : (!cir.ptr<!s8i>) -> () loc(#loc54)
          } loc(#loc204)
        } loc(#loc202)
      } loc(#loc198)
    } loc(#loc196)
    cir.return loc(#loc9)
  } loc(#loc188)
  cir.func no_proto @CWE369_Divide_by_Zero__float_zero_12_good() extra(#fn_attr) {
    %0 = cir.get_global @goodB2G : !cir.ptr<!cir.func<!void ()>> loc(#loc208)
    cir.call %0() : (!cir.ptr<!cir.func<!void ()>>) -> () loc(#loc57)
    %1 = cir.get_global @goodG2B : !cir.ptr<!cir.func<!void ()>> loc(#loc209)
    cir.call %1() : (!cir.ptr<!cir.func<!void ()>>) -> () loc(#loc59)
    cir.return loc(#loc56)
  } loc(#loc207)
  cir.func private @srand(!u32i) extra(#fn_attr1) loc(#loc210)
  cir.func private @time(!cir.ptr<!s64i>) -> !s64i extra(#fn_attr1) loc(#loc211)
  cir.global "private" constant cir_private dsolocal @".str.1" = #cir.const_array<"Calling good()...\00" : !cir.array<!s8i x 18>> : !cir.array<!s8i x 18> {alignment = 1 : i64} loc(#loc65)
  cir.global "private" constant cir_private dsolocal @".str.2" = #cir.const_array<"Finished good()\00" : !cir.array<!s8i x 16>> : !cir.array<!s8i x 16> {alignment = 1 : i64} loc(#loc66)
  cir.global "private" constant cir_private dsolocal @".str.3" = #cir.const_array<"Calling bad()...\00" : !cir.array<!s8i x 17>> : !cir.array<!s8i x 17> {alignment = 1 : i64} loc(#loc67)
  cir.global "private" constant cir_private dsolocal @".str.4" = #cir.const_array<"Finished bad()\00" : !cir.array<!s8i x 15>> : !cir.array<!s8i x 15> {alignment = 1 : i64} loc(#loc68)
  cir.func @main(%arg0: !s32i loc(fused[#loc71, #loc72]), %arg1: !cir.ptr<!cir.ptr<!s8i>> loc(fused[#loc73, #loc74])) -> !s32i extra(#fn_attr) {
    %0 = cir.alloca !s32i, !cir.ptr<!s32i>, ["argc", init] {alignment = 4 : i64} loc(#loc213)
    %1 = cir.alloca !cir.ptr<!cir.ptr<!s8i>>, !cir.ptr<!cir.ptr<!cir.ptr<!s8i>>>, ["argv", init] {alignment = 8 : i64} loc(#loc214)
    %2 = cir.alloca !s32i, !cir.ptr<!s32i>, ["__retval"] {alignment = 4 : i64} loc(#loc70)
    cir.store %arg0, %0 : !s32i, !cir.ptr<!s32i> loc(#loc75)
    cir.store %arg1, %1 : !cir.ptr<!cir.ptr<!s8i>>, !cir.ptr<!cir.ptr<!cir.ptr<!s8i>>> loc(#loc75)
    %3 = cir.const #cir.ptr<null> : !cir.ptr<!s64i> loc(#loc76)
    %4 = cir.call @time(%3) : (!cir.ptr<!s64i>) -> !s64i extra(#fn_attr1) loc(#loc77)
    %5 = cir.cast(integral, %4 : !s64i), !u32i loc(#loc77)
    cir.call @srand(%5) : (!u32i) -> () extra(#fn_attr1) loc(#loc78)
    %6 = cir.get_global @".str.1" : !cir.ptr<!cir.array<!s8i x 18>> loc(#loc65)
    %7 = cir.cast(array_to_ptrdecay, %6 : !cir.ptr<!cir.array<!s8i x 18>>), !cir.ptr<!s8i> loc(#loc65)
    cir.call @printLine(%7) : (!cir.ptr<!s8i>) -> () loc(#loc79)
    %8 = cir.get_global @CWE369_Divide_by_Zero__float_zero_12_good : !cir.ptr<!cir.func<!void ()>> loc(#loc215)
    cir.call @CWE369_Divide_by_Zero__float_zero_12_good() : () -> () loc(#loc80)
    %9 = cir.get_global @".str.2" : !cir.ptr<!cir.array<!s8i x 16>> loc(#loc66)
    %10 = cir.cast(array_to_ptrdecay, %9 : !cir.ptr<!cir.array<!s8i x 16>>), !cir.ptr<!s8i> loc(#loc66)
    cir.call @printLine(%10) : (!cir.ptr<!s8i>) -> () loc(#loc82)
    %11 = cir.get_global @".str.3" : !cir.ptr<!cir.array<!s8i x 17>> loc(#loc67)
    %12 = cir.cast(array_to_ptrdecay, %11 : !cir.ptr<!cir.array<!s8i x 17>>), !cir.ptr<!s8i> loc(#loc67)
    cir.call @printLine(%12) : (!cir.ptr<!s8i>) -> () loc(#loc83)
    %13 = cir.get_global @CWE369_Divide_by_Zero__float_zero_12_bad : !cir.ptr<!cir.func<!void ()>> loc(#loc216)
    cir.call @CWE369_Divide_by_Zero__float_zero_12_bad() : () -> () loc(#loc84)
    %14 = cir.get_global @".str.4" : !cir.ptr<!cir.array<!s8i x 15>> loc(#loc68)
    %15 = cir.cast(array_to_ptrdecay, %14 : !cir.ptr<!cir.array<!s8i x 15>>), !cir.ptr<!s8i> loc(#loc68)
    cir.call @printLine(%15) : (!cir.ptr<!s8i>) -> () loc(#loc86)
    %16 = cir.const #cir.int<0> : !s32i loc(#loc87)
    cir.store %16, %2 : !s32i, !cir.ptr<!s32i> loc(#loc217)
    %17 = cir.load %2 : !cir.ptr<!s32i>, !s32i loc(#loc217)
    cir.return %17 : !s32i loc(#loc217)
  } loc(#loc212)
  cir.func no_proto internal private @goodB2G() extra(#fn_attr) {
    %0 = cir.alloca !cir.float, !cir.ptr<!cir.float>, ["data"] {alignment = 4 : i64} loc(#loc219)
    %1 = cir.const #cir.fp<0.000000e+00> : !cir.float loc(#loc93)
    cir.store %1, %0 : !cir.float, !cir.ptr<!cir.float> loc(#loc220)
    cir.scope {
      %2 = cir.get_global @globalReturnsTrueOrFalse : !cir.ptr<!cir.func<!s32i (...)>> loc(#loc222)
      %3 = cir.cast(bitcast, %2 : !cir.ptr<!cir.func<!s32i (...)>>), !cir.ptr<!cir.func<!s32i ()>> loc(#loc222)
      %4 = cir.call %3() : (!cir.ptr<!cir.func<!s32i ()>>) -> !s32i loc(#loc97)
      %5 = cir.cast(int_to_bool, %4 : !s32i), !cir.bool loc(#loc97)
      cir.if %5 {
        %6 = cir.const #cir.fp<0.000000e+00> : !cir.float loc(#loc102)
        cir.store %6, %0 : !cir.float, !cir.ptr<!cir.float> loc(#loc224)
      } else {
        %6 = cir.const #cir.fp<0.000000e+00> : !cir.float loc(#loc104)
        cir.store %6, %0 : !cir.float, !cir.ptr<!cir.float> loc(#loc225)
      } loc(#loc223)
    } loc(#loc221)
    cir.scope {
      %2 = cir.get_global @globalReturnsTrueOrFalse : !cir.ptr<!cir.func<!s32i (...)>> loc(#loc227)
      %3 = cir.cast(bitcast, %2 : !cir.ptr<!cir.func<!s32i (...)>>), !cir.ptr<!cir.func<!s32i ()>> loc(#loc227)
      %4 = cir.call %3() : (!cir.ptr<!cir.func<!s32i ()>>) -> !s32i loc(#loc108)
      %5 = cir.cast(int_to_bool, %4 : !s32i), !cir.bool loc(#loc108)
      cir.if %5 {
        cir.scope {
          %6 = cir.load %0 : !cir.ptr<!cir.float>, !cir.float loc(#loc115)
          %7 = cir.cast(floating, %6 : !cir.float), !cir.double loc(#loc115)
          %8 = cir.fabs %7 : !cir.double loc(#loc115)
          %9 = cir.const #cir.fp<9.9999999999999995E-7> : !cir.double loc(#loc116)
          %10 = cir.cmp(gt, %8, %9) : !cir.double, !cir.bool loc(#loc230)
          cir.if %10 {
            %11 = cir.alloca !s32i, !cir.ptr<!s32i>, ["result", init] {alignment = 4 : i64} loc(#loc232)
            %12 = cir.const #cir.fp<1.000000e+02> : !cir.double loc(#loc123)
            %13 = cir.load %0 : !cir.ptr<!cir.float>, !cir.float loc(#loc124)
            %14 = cir.cast(floating, %13 : !cir.float), !cir.double loc(#loc124)
            %15 = cir.binop(div, %12, %14) : !cir.double loc(#loc233)
            %16 = cir.cast(float_to_int, %15 : !cir.double), !s32i loc(#loc233)
            cir.store %16, %11 : !s32i, !cir.ptr<!s32i> loc(#loc232)
            %17 = cir.load %11 : !cir.ptr<!s32i>, !s32i loc(#loc125)
            cir.call @printIntLine(%17) : (!s32i) -> () loc(#loc126)
          } else {
            %11 = cir.get_global @".str" : !cir.ptr<!cir.array<!s8i x 38>> loc(#loc127)
            %12 = cir.cast(array_to_ptrdecay, %11 : !cir.ptr<!cir.array<!s8i x 38>>), !cir.ptr<!s8i> loc(#loc127)
            cir.call @printLine(%12) : (!cir.ptr<!s8i>) -> () loc(#loc128)
          } loc(#loc231)
        } loc(#loc229)
      } else {
        cir.scope {
          %6 = cir.load %0 : !cir.ptr<!cir.float>, !cir.float loc(#loc131)
          %7 = cir.cast(floating, %6 : !cir.float), !cir.double loc(#loc131)
          %8 = cir.fabs %7 : !cir.double loc(#loc131)
          %9 = cir.const #cir.fp<9.9999999999999995E-7> : !cir.double loc(#loc132)
          %10 = cir.cmp(gt, %8, %9) : !cir.double, !cir.bool loc(#loc235)
          cir.if %10 {
            %11 = cir.alloca !s32i, !cir.ptr<!s32i>, ["result", init] {alignment = 4 : i64} loc(#loc237)
            %12 = cir.const #cir.fp<1.000000e+02> : !cir.double loc(#loc139)
            %13 = cir.load %0 : !cir.ptr<!cir.float>, !cir.float loc(#loc140)
            %14 = cir.cast(floating, %13 : !cir.float), !cir.double loc(#loc140)
            %15 = cir.binop(div, %12, %14) : !cir.double loc(#loc238)
            %16 = cir.cast(float_to_int, %15 : !cir.double), !s32i loc(#loc238)
            cir.store %16, %11 : !s32i, !cir.ptr<!s32i> loc(#loc237)
            %17 = cir.load %11 : !cir.ptr<!s32i>, !s32i loc(#loc141)
            cir.call @printIntLine(%17) : (!s32i) -> () loc(#loc142)
          } else {
            %11 = cir.get_global @".str" : !cir.ptr<!cir.array<!s8i x 38>> loc(#loc143)
            %12 = cir.cast(array_to_ptrdecay, %11 : !cir.ptr<!cir.array<!s8i x 38>>), !cir.ptr<!s8i> loc(#loc143)
            cir.call @printLine(%12) : (!cir.ptr<!s8i>) -> () loc(#loc144)
          } loc(#loc236)
        } loc(#loc234)
      } loc(#loc228)
    } loc(#loc226)
    cir.return loc(#loc90)
  } loc(#loc218)
  cir.func no_proto internal private @goodG2B() extra(#fn_attr) {
    %0 = cir.alloca !cir.float, !cir.ptr<!cir.float>, ["data"] {alignment = 4 : i64} loc(#loc240)
    %1 = cir.const #cir.fp<0.000000e+00> : !cir.float loc(#loc149)
    cir.store %1, %0 : !cir.float, !cir.ptr<!cir.float> loc(#loc241)
    cir.scope {
      %2 = cir.get_global @globalReturnsTrueOrFalse : !cir.ptr<!cir.func<!s32i (...)>> loc(#loc243)
      %3 = cir.cast(bitcast, %2 : !cir.ptr<!cir.func<!s32i (...)>>), !cir.ptr<!cir.func<!s32i ()>> loc(#loc243)
      %4 = cir.call %3() : (!cir.ptr<!cir.func<!s32i ()>>) -> !s32i loc(#loc153)
      %5 = cir.cast(int_to_bool, %4 : !s32i), !cir.bool loc(#loc153)
      cir.if %5 {
        %6 = cir.const #cir.fp<2.000000e+00> : !cir.float loc(#loc158)
        cir.store %6, %0 : !cir.float, !cir.ptr<!cir.float> loc(#loc245)
      } else {
        %6 = cir.const #cir.fp<2.000000e+00> : !cir.float loc(#loc160)
        cir.store %6, %0 : !cir.float, !cir.ptr<!cir.float> loc(#loc246)
      } loc(#loc244)
    } loc(#loc242)
    cir.scope {
      %2 = cir.get_global @globalReturnsTrueOrFalse : !cir.ptr<!cir.func<!s32i (...)>> loc(#loc248)
      %3 = cir.cast(bitcast, %2 : !cir.ptr<!cir.func<!s32i (...)>>), !cir.ptr<!cir.func<!s32i ()>> loc(#loc248)
      %4 = cir.call %3() : (!cir.ptr<!cir.func<!s32i ()>>) -> !s32i loc(#loc164)
      %5 = cir.cast(int_to_bool, %4 : !s32i), !cir.bool loc(#loc164)
      cir.if %5 {
        cir.scope {
          %6 = cir.alloca !s32i, !cir.ptr<!s32i>, ["result", init] {alignment = 4 : i64} loc(#loc251)
          %7 = cir.const #cir.fp<1.000000e+02> : !cir.double loc(#loc173)
          %8 = cir.load %0 : !cir.ptr<!cir.float>, !cir.float loc(#loc174)
          %9 = cir.cast(floating, %8 : !cir.float), !cir.double loc(#loc174)
          %10 = cir.binop(div, %7, %9) : !cir.double loc(#loc252)
          %11 = cir.cast(float_to_int, %10 : !cir.double), !s32i loc(#loc252)
          cir.store %11, %6 : !s32i, !cir.ptr<!s32i> loc(#loc251)
          %12 = cir.load %6 : !cir.ptr<!s32i>, !s32i loc(#loc175)
          cir.call @printIntLine(%12) : (!s32i) -> () loc(#loc176)
        } loc(#loc250)
      } else {
        cir.scope {
          %6 = cir.alloca !s32i, !cir.ptr<!s32i>, ["result", init] {alignment = 4 : i64} loc(#loc254)
          %7 = cir.const #cir.fp<1.000000e+02> : !cir.double loc(#loc181)
          %8 = cir.load %0 : !cir.ptr<!cir.float>, !cir.float loc(#loc182)
          %9 = cir.cast(floating, %8 : !cir.float), !cir.double loc(#loc182)
          %10 = cir.binop(div, %7, %9) : !cir.double loc(#loc255)
          %11 = cir.cast(float_to_int, %10 : !cir.double), !s32i loc(#loc255)
          cir.store %11, %6 : !s32i, !cir.ptr<!s32i> loc(#loc254)
          %12 = cir.load %6 : !cir.ptr<!s32i>, !s32i loc(#loc183)
          cir.call @printIntLine(%12) : (!s32i) -> () loc(#loc184)
        } loc(#loc253)
      } loc(#loc249)
    } loc(#loc247)
    cir.return loc(#loc146)
  } loc(#loc239)
} loc(#loc)
#loc = loc("/home/ladisgin/git_proj/juliet-c/testcases/CWE369_Divide_by_Zero/s01/CWE369_Divide_by_Zero__float_zero_12.c":0:0)
#loc1 = loc("../../../testcasesupport/std_testcase_io.h":52:1)
#loc2 = loc("../../../testcasesupport/std_testcase_io.h":52:30)
#loc3 = loc("../../../testcasesupport/std_testcase_io.h":18:1)
#loc4 = loc("../../../testcasesupport/std_testcase_io.h":18:33)
#loc5 = loc("../../../testcasesupport/std_testcase_io.h":14:1)
#loc6 = loc("../../../testcasesupport/std_testcase_io.h":14:33)
#loc7 = loc("CWE369_Divide_by_Zero__float_zero_12.c":57:23)
#loc8 = loc("CWE369_Divide_by_Zero__float_zero_12.c":24:1)
#loc9 = loc("CWE369_Divide_by_Zero__float_zero_12.c":60:1)
#loc10 = loc("CWE369_Divide_by_Zero__float_zero_12.c":26:5)
#loc11 = loc("CWE369_Divide_by_Zero__float_zero_12.c":26:11)
#loc12 = loc("CWE369_Divide_by_Zero__float_zero_12.c":28:12)
#loc13 = loc("CWE369_Divide_by_Zero__float_zero_12.c":28:5)
#loc14 = loc("CWE369_Divide_by_Zero__float_zero_12.c":29:5)
#loc15 = loc("CWE369_Divide_by_Zero__float_zero_12.c":38:5)
#loc16 = loc("CWE369_Divide_by_Zero__float_zero_12.c":29:8)
#loc17 = loc("CWE369_Divide_by_Zero__float_zero_12.c":29:33)
#loc18 = loc("CWE369_Divide_by_Zero__float_zero_12.c":30:5)
#loc19 = loc("CWE369_Divide_by_Zero__float_zero_12.c":33:5)
#loc20 = loc("CWE369_Divide_by_Zero__float_zero_12.c":35:5)
#loc21 = loc("CWE369_Divide_by_Zero__float_zero_12.c":32:16)
#loc22 = loc("CWE369_Divide_by_Zero__float_zero_12.c":32:9)
#loc23 = loc("CWE369_Divide_by_Zero__float_zero_12.c":37:16)
#loc24 = loc("CWE369_Divide_by_Zero__float_zero_12.c":37:9)
#loc25 = loc("CWE369_Divide_by_Zero__float_zero_12.c":39:5)
#loc26 = loc("CWE369_Divide_by_Zero__float_zero_12.c":59:5)
#loc27 = loc("CWE369_Divide_by_Zero__float_zero_12.c":39:8)
#loc28 = loc("CWE369_Divide_by_Zero__float_zero_12.c":39:33)
#loc29 = loc("CWE369_Divide_by_Zero__float_zero_12.c":40:5)
#loc30 = loc("CWE369_Divide_by_Zero__float_zero_12.c":46:5)
#loc31 = loc("CWE369_Divide_by_Zero__float_zero_12.c":48:5)
#loc32 = loc("CWE369_Divide_by_Zero__float_zero_12.c":41:9)
#loc33 = loc("CWE369_Divide_by_Zero__float_zero_12.c":45:9)
#loc34 = loc("CWE369_Divide_by_Zero__float_zero_12.c":43:13)
#loc35 = loc("CWE369_Divide_by_Zero__float_zero_12.c":43:44)
#loc36 = loc("CWE369_Divide_by_Zero__float_zero_12.c":43:32)
#loc37 = loc("CWE369_Divide_by_Zero__float_zero_12.c":43:40)
#loc38 = loc("CWE369_Divide_by_Zero__float_zero_12.c":44:26)
#loc39 = loc("CWE369_Divide_by_Zero__float_zero_12.c":44:13)
#loc40 = loc("CWE369_Divide_by_Zero__float_zero_12.c":50:9)
#loc41 = loc("CWE369_Divide_by_Zero__float_zero_12.c":58:9)
#loc42 = loc("CWE369_Divide_by_Zero__float_zero_12.c":50:17)
#loc43 = loc("CWE369_Divide_by_Zero__float_zero_12.c":50:25)
#loc44 = loc("CWE369_Divide_by_Zero__float_zero_12.c":50:12)
#loc45 = loc("CWE369_Divide_by_Zero__float_zero_12.c":51:9)
#loc46 = loc("CWE369_Divide_by_Zero__float_zero_12.c":54:9)
#loc47 = loc("CWE369_Divide_by_Zero__float_zero_12.c":56:9)
#loc48 = loc("CWE369_Divide_by_Zero__float_zero_12.c":52:13)
#loc49 = loc("CWE369_Divide_by_Zero__float_zero_12.c":52:44)
#loc50 = loc("CWE369_Divide_by_Zero__float_zero_12.c":52:32)
#loc51 = loc("CWE369_Divide_by_Zero__float_zero_12.c":52:40)
#loc52 = loc("CWE369_Divide_by_Zero__float_zero_12.c":53:26)
#loc53 = loc("CWE369_Divide_by_Zero__float_zero_12.c":53:13)
#loc54 = loc("CWE369_Divide_by_Zero__float_zero_12.c":57:13)
#loc55 = loc("CWE369_Divide_by_Zero__float_zero_12.c":148:1)
#loc56 = loc("CWE369_Divide_by_Zero__float_zero_12.c":152:1)
#loc57 = loc("CWE369_Divide_by_Zero__float_zero_12.c":150:5)
#loc58 = loc("CWE369_Divide_by_Zero__float_zero_12.c":150:13)
#loc59 = loc("CWE369_Divide_by_Zero__float_zero_12.c":151:5)
#loc60 = loc("CWE369_Divide_by_Zero__float_zero_12.c":151:13)
#loc61 = loc("/usr/include/stdlib.h":575:1)
#loc62 = loc("/usr/include/stdlib.h":575:41)
#loc63 = loc("/usr/include/time.h":76:1)
#loc64 = loc("/usr/include/time.h":76:38)
#loc65 = loc("CWE369_Divide_by_Zero__float_zero_12.c":168:15)
#loc66 = loc("CWE369_Divide_by_Zero__float_zero_12.c":170:15)
#loc67 = loc("CWE369_Divide_by_Zero__float_zero_12.c":173:15)
#loc68 = loc("CWE369_Divide_by_Zero__float_zero_12.c":175:15)
#loc69 = loc("CWE369_Divide_by_Zero__float_zero_12.c":163:1)
#loc70 = loc("CWE369_Divide_by_Zero__float_zero_12.c":178:1)
#loc75 = loc("CWE369_Divide_by_Zero__float_zero_12.c":164:1)
#loc76 = loc("CWE369_Divide_by_Zero__float_zero_12.c":166:27)
#loc77 = loc("CWE369_Divide_by_Zero__float_zero_12.c":166:22)
#loc78 = loc("CWE369_Divide_by_Zero__float_zero_12.c":166:5)
#loc79 = loc("CWE369_Divide_by_Zero__float_zero_12.c":168:5)
#loc80 = loc("CWE369_Divide_by_Zero__float_zero_12.c":169:5)
#loc81 = loc("CWE369_Divide_by_Zero__float_zero_12.c":169:47)
#loc82 = loc("CWE369_Divide_by_Zero__float_zero_12.c":170:5)
#loc83 = loc("CWE369_Divide_by_Zero__float_zero_12.c":173:5)
#loc84 = loc("CWE369_Divide_by_Zero__float_zero_12.c":174:5)
#loc85 = loc("CWE369_Divide_by_Zero__float_zero_12.c":174:46)
#loc86 = loc("CWE369_Divide_by_Zero__float_zero_12.c":175:5)
#loc87 = loc("CWE369_Divide_by_Zero__float_zero_12.c":177:12)
#loc88 = loc("CWE369_Divide_by_Zero__float_zero_12.c":177:5)
#loc89 = loc("CWE369_Divide_by_Zero__float_zero_12.c":69:1)
#loc90 = loc("CWE369_Divide_by_Zero__float_zero_12.c":110:1)
#loc91 = loc("CWE369_Divide_by_Zero__float_zero_12.c":71:5)
#loc92 = loc("CWE369_Divide_by_Zero__float_zero_12.c":71:11)
#loc93 = loc("CWE369_Divide_by_Zero__float_zero_12.c":73:12)
#loc94 = loc("CWE369_Divide_by_Zero__float_zero_12.c":73:5)
#loc95 = loc("CWE369_Divide_by_Zero__float_zero_12.c":74:5)
#loc96 = loc("CWE369_Divide_by_Zero__float_zero_12.c":83:5)
#loc97 = loc("CWE369_Divide_by_Zero__float_zero_12.c":74:8)
#loc98 = loc("CWE369_Divide_by_Zero__float_zero_12.c":74:33)
#loc99 = loc("CWE369_Divide_by_Zero__float_zero_12.c":75:5)
#loc100 = loc("CWE369_Divide_by_Zero__float_zero_12.c":78:5)
#loc101 = loc("CWE369_Divide_by_Zero__float_zero_12.c":80:5)
#loc102 = loc("CWE369_Divide_by_Zero__float_zero_12.c":77:16)
#loc103 = loc("CWE369_Divide_by_Zero__float_zero_12.c":77:9)
#loc104 = loc("CWE369_Divide_by_Zero__float_zero_12.c":82:16)
#loc105 = loc("CWE369_Divide_by_Zero__float_zero_12.c":82:9)
#loc106 = loc("CWE369_Divide_by_Zero__float_zero_12.c":84:5)
#loc107 = loc("CWE369_Divide_by_Zero__float_zero_12.c":109:5)
#loc108 = loc("CWE369_Divide_by_Zero__float_zero_12.c":84:8)
#loc109 = loc("CWE369_Divide_by_Zero__float_zero_12.c":84:33)
#loc110 = loc("CWE369_Divide_by_Zero__float_zero_12.c":85:5)
#loc111 = loc("CWE369_Divide_by_Zero__float_zero_12.c":96:5)
#loc112 = loc("CWE369_Divide_by_Zero__float_zero_12.c":98:5)
#loc113 = loc("CWE369_Divide_by_Zero__float_zero_12.c":87:9)
#loc114 = loc("CWE369_Divide_by_Zero__float_zero_12.c":95:9)
#loc115 = loc("CWE369_Divide_by_Zero__float_zero_12.c":87:17)
#loc116 = loc("CWE369_Divide_by_Zero__float_zero_12.c":87:25)
#loc117 = loc("CWE369_Divide_by_Zero__float_zero_12.c":87:12)
#loc118 = loc("CWE369_Divide_by_Zero__float_zero_12.c":88:9)
#loc119 = loc("CWE369_Divide_by_Zero__float_zero_12.c":91:9)
#loc120 = loc("CWE369_Divide_by_Zero__float_zero_12.c":93:9)
#loc121 = loc("CWE369_Divide_by_Zero__float_zero_12.c":89:13)
#loc122 = loc("CWE369_Divide_by_Zero__float_zero_12.c":89:44)
#loc123 = loc("CWE369_Divide_by_Zero__float_zero_12.c":89:32)
#loc124 = loc("CWE369_Divide_by_Zero__float_zero_12.c":89:40)
#loc125 = loc("CWE369_Divide_by_Zero__float_zero_12.c":90:26)
#loc126 = loc("CWE369_Divide_by_Zero__float_zero_12.c":90:13)
#loc127 = loc("CWE369_Divide_by_Zero__float_zero_12.c":94:23)
#loc128 = loc("CWE369_Divide_by_Zero__float_zero_12.c":94:13)
#loc129 = loc("CWE369_Divide_by_Zero__float_zero_12.c":100:9)
#loc130 = loc("CWE369_Divide_by_Zero__float_zero_12.c":108:9)
#loc131 = loc("CWE369_Divide_by_Zero__float_zero_12.c":100:17)
#loc132 = loc("CWE369_Divide_by_Zero__float_zero_12.c":100:25)
#loc133 = loc("CWE369_Divide_by_Zero__float_zero_12.c":100:12)
#loc134 = loc("CWE369_Divide_by_Zero__float_zero_12.c":101:9)
#loc135 = loc("CWE369_Divide_by_Zero__float_zero_12.c":104:9)
#loc136 = loc("CWE369_Divide_by_Zero__float_zero_12.c":106:9)
#loc137 = loc("CWE369_Divide_by_Zero__float_zero_12.c":102:13)
#loc138 = loc("CWE369_Divide_by_Zero__float_zero_12.c":102:44)
#loc139 = loc("CWE369_Divide_by_Zero__float_zero_12.c":102:32)
#loc140 = loc("CWE369_Divide_by_Zero__float_zero_12.c":102:40)
#loc141 = loc("CWE369_Divide_by_Zero__float_zero_12.c":103:26)
#loc142 = loc("CWE369_Divide_by_Zero__float_zero_12.c":103:13)
#loc143 = loc("CWE369_Divide_by_Zero__float_zero_12.c":107:23)
#loc144 = loc("CWE369_Divide_by_Zero__float_zero_12.c":107:13)
#loc145 = loc("CWE369_Divide_by_Zero__float_zero_12.c":115:1)
#loc146 = loc("CWE369_Divide_by_Zero__float_zero_12.c":146:1)
#loc147 = loc("CWE369_Divide_by_Zero__float_zero_12.c":117:5)
#loc148 = loc("CWE369_Divide_by_Zero__float_zero_12.c":117:11)
#loc149 = loc("CWE369_Divide_by_Zero__float_zero_12.c":119:12)
#loc150 = loc("CWE369_Divide_by_Zero__float_zero_12.c":119:5)
#loc151 = loc("CWE369_Divide_by_Zero__float_zero_12.c":120:5)
#loc152 = loc("CWE369_Divide_by_Zero__float_zero_12.c":129:5)
#loc153 = loc("CWE369_Divide_by_Zero__float_zero_12.c":120:8)
#loc154 = loc("CWE369_Divide_by_Zero__float_zero_12.c":120:33)
#loc155 = loc("CWE369_Divide_by_Zero__float_zero_12.c":121:5)
#loc156 = loc("CWE369_Divide_by_Zero__float_zero_12.c":124:5)
#loc157 = loc("CWE369_Divide_by_Zero__float_zero_12.c":126:5)
#loc158 = loc("CWE369_Divide_by_Zero__float_zero_12.c":123:16)
#loc159 = loc("CWE369_Divide_by_Zero__float_zero_12.c":123:9)
#loc160 = loc("CWE369_Divide_by_Zero__float_zero_12.c":128:16)
#loc161 = loc("CWE369_Divide_by_Zero__float_zero_12.c":128:9)
#loc162 = loc("CWE369_Divide_by_Zero__float_zero_12.c":130:5)
#loc163 = loc("CWE369_Divide_by_Zero__float_zero_12.c":145:5)
#loc164 = loc("CWE369_Divide_by_Zero__float_zero_12.c":130:8)
#loc165 = loc("CWE369_Divide_by_Zero__float_zero_12.c":130:33)
#loc166 = loc("CWE369_Divide_by_Zero__float_zero_12.c":131:5)
#loc167 = loc("CWE369_Divide_by_Zero__float_zero_12.c":137:5)
#loc168 = loc("CWE369_Divide_by_Zero__float_zero_12.c":139:5)
#loc169 = loc("CWE369_Divide_by_Zero__float_zero_12.c":132:9)
#loc170 = loc("CWE369_Divide_by_Zero__float_zero_12.c":136:9)
#loc171 = loc("CWE369_Divide_by_Zero__float_zero_12.c":134:13)
#loc172 = loc("CWE369_Divide_by_Zero__float_zero_12.c":134:44)
#loc173 = loc("CWE369_Divide_by_Zero__float_zero_12.c":134:32)
#loc174 = loc("CWE369_Divide_by_Zero__float_zero_12.c":134:40)
#loc175 = loc("CWE369_Divide_by_Zero__float_zero_12.c":135:26)
#loc176 = loc("CWE369_Divide_by_Zero__float_zero_12.c":135:13)
#loc177 = loc("CWE369_Divide_by_Zero__float_zero_12.c":140:9)
#loc178 = loc("CWE369_Divide_by_Zero__float_zero_12.c":144:9)
#loc179 = loc("CWE369_Divide_by_Zero__float_zero_12.c":142:13)
#loc180 = loc("CWE369_Divide_by_Zero__float_zero_12.c":142:44)
#loc181 = loc("CWE369_Divide_by_Zero__float_zero_12.c":142:32)
#loc182 = loc("CWE369_Divide_by_Zero__float_zero_12.c":142:40)
#loc183 = loc("CWE369_Divide_by_Zero__float_zero_12.c":143:26)
#loc184 = loc("CWE369_Divide_by_Zero__float_zero_12.c":143:13)
#loc185 = loc(fused[#loc1, #loc2])
#loc186 = loc(fused[#loc3, #loc4])
#loc187 = loc(fused[#loc5, #loc6])
#loc188 = loc(fused[#loc8, #loc9])
#loc189 = loc(fused[#loc10, #loc11])
#loc190 = loc(fused[#loc13, #loc12])
#loc191 = loc(fused[#loc14, #loc15])
#loc192 = loc(fused[#loc16, #loc17])
#loc193 = loc(fused[#loc18, #loc19, #loc20, #loc15])
#loc194 = loc(fused[#loc22, #loc21])
#loc195 = loc(fused[#loc24, #loc23])
#loc196 = loc(fused[#loc25, #loc26])
#loc197 = loc(fused[#loc27, #loc28])
#loc198 = loc(fused[#loc29, #loc30, #loc31, #loc26])
#loc199 = loc(fused[#loc32, #loc33])
#loc200 = loc(fused[#loc34, #loc35])
#loc201 = loc(fused[#loc36, #loc37])
#loc202 = loc(fused[#loc40, #loc41])
#loc203 = loc(fused[#loc44, #loc43])
#loc204 = loc(fused[#loc45, #loc46, #loc47, #loc41])
#loc205 = loc(fused[#loc48, #loc49])
#loc206 = loc(fused[#loc50, #loc51])
#loc207 = loc(fused[#loc55, #loc56])
#loc208 = loc(fused[#loc57, #loc58])
#loc209 = loc(fused[#loc59, #loc60])
#loc210 = loc(fused[#loc61, #loc62])
#loc211 = loc(fused[#loc63, #loc64])
#loc212 = loc(fused[#loc69, #loc70])
#loc215 = loc(fused[#loc80, #loc81])
#loc216 = loc(fused[#loc84, #loc85])
#loc217 = loc(fused[#loc88, #loc87])
#loc218 = loc(fused[#loc89, #loc90])
#loc219 = loc(fused[#loc91, #loc92])
#loc220 = loc(fused[#loc94, #loc93])
#loc221 = loc(fused[#loc95, #loc96])
#loc222 = loc(fused[#loc97, #loc98])
#loc223 = loc(fused[#loc99, #loc100, #loc101, #loc96])
#loc224 = loc(fused[#loc103, #loc102])
#loc225 = loc(fused[#loc105, #loc104])
#loc226 = loc(fused[#loc106, #loc107])
#loc227 = loc(fused[#loc108, #loc109])
#loc228 = loc(fused[#loc110, #loc111, #loc112, #loc107])
#loc229 = loc(fused[#loc113, #loc114])
#loc230 = loc(fused[#loc117, #loc116])
#loc231 = loc(fused[#loc118, #loc119, #loc120, #loc114])
#loc232 = loc(fused[#loc121, #loc122])
#loc233 = loc(fused[#loc123, #loc124])
#loc234 = loc(fused[#loc129, #loc130])
#loc235 = loc(fused[#loc133, #loc132])
#loc236 = loc(fused[#loc134, #loc135, #loc136, #loc130])
#loc237 = loc(fused[#loc137, #loc138])
#loc238 = loc(fused[#loc139, #loc140])
#loc239 = loc(fused[#loc145, #loc146])
#loc240 = loc(fused[#loc147, #loc148])
#loc241 = loc(fused[#loc150, #loc149])
#loc242 = loc(fused[#loc151, #loc152])
#loc243 = loc(fused[#loc153, #loc154])
#loc244 = loc(fused[#loc155, #loc156, #loc157, #loc152])
#loc245 = loc(fused[#loc159, #loc158])
#loc246 = loc(fused[#loc161, #loc160])
#loc247 = loc(fused[#loc162, #loc163])
#loc248 = loc(fused[#loc164, #loc165])
#loc249 = loc(fused[#loc166, #loc167, #loc168, #loc163])
#loc250 = loc(fused[#loc169, #loc170])
#loc251 = loc(fused[#loc171, #loc172])
#loc252 = loc(fused[#loc173, #loc174])
#loc253 = loc(fused[#loc177, #loc178])
#loc254 = loc(fused[#loc179, #loc180])
#loc255 = loc(fused[#loc181, #loc182])
