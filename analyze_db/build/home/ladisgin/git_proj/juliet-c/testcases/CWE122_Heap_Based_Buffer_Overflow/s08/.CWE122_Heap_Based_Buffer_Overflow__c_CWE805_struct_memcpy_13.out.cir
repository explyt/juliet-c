!s32i = !cir.int<s, 32>
!s64i = !cir.int<s, 64>
!s8i = !cir.int<s, 8>
!u32i = !cir.int<u, 32>
!u64i = !cir.int<u, 64>
!void = !cir.void
#fn_attr = #cir<extra({nothrow = #cir.nothrow})>
#fn_attr1 = #cir<extra({inline = #cir.inline<no>, nothrow = #cir.nothrow, optnone = #cir.optnone})>
#loc93 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_struct_memcpy_13.c":132:10)
#loc94 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_struct_memcpy_13.c":132:14)
#loc95 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_struct_memcpy_13.c":132:20)
#loc96 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_struct_memcpy_13.c":132:32)
!ty__twoIntsStruct = !cir.struct<struct "_twoIntsStruct" {!s32i, !s32i} #cir.record.decl.ast>
#loc278 = loc(fused[#loc93, #loc94])
#loc279 = loc(fused[#loc95, #loc96])
module @"/home/ladisgin/git_proj/juliet-c/testcases/CWE122_Heap_Based_Buffer_Overflow/s08/CWE122_Heap_Based_Buffer_Overflow__c_CWE805_struct_memcpy_13.c" attributes {cir.lang = #cir.lang<c>, cir.sob = #cir.signed_overflow_behavior<undefined>, cir.triple = "x86_64-unknown-linux-gnu", dlti.dl_spec = #dlti.dl_spec<i32 = dense<32> : vector<2xi64>, f16 = dense<16> : vector<2xi64>, !llvm.ptr<270> = dense<32> : vector<4xi64>, f64 = dense<64> : vector<2xi64>, f128 = dense<128> : vector<2xi64>, i1 = dense<8> : vector<2xi64>, !llvm.ptr = dense<64> : vector<4xi64>, i16 = dense<16> : vector<2xi64>, i8 = dense<8> : vector<2xi64>, i128 = dense<128> : vector<2xi64>, f80 = dense<128> : vector<2xi64>, !llvm.ptr<271> = dense<32> : vector<4xi64>, !llvm.ptr<272> = dense<64> : vector<4xi64>, i64 = dense<64> : vector<2xi64>, "dlti.endianness" = "little", "dlti.stack_alignment" = 128 : i64>} {
  cir.global "private" constant external @GLOBAL_CONST_FIVE : !s32i {alignment = 4 : i64} loc(#loc239)
  cir.func private @malloc(!u64i) -> !cir.ptr<!void> extra(#fn_attr) loc(#loc240)
  cir.func private @exit(!s32i) extra(#fn_attr) loc(#loc241)
  cir.func private @printStructLine(!cir.ptr<!ty__twoIntsStruct>) loc(#loc242)
  cir.func private @free(!cir.ptr<!void>) extra(#fn_attr) loc(#loc243)
  cir.func no_proto @CWE122_Heap_Based_Buffer_Overflow__c_CWE805_struct_memcpy_13_bad() extra(#fn_attr1) {
    %0 = cir.alloca !cir.ptr<!ty__twoIntsStruct>, !cir.ptr<!cir.ptr<!ty__twoIntsStruct>>, ["data"] {alignment = 8 : i64} loc(#loc245)
    %1 = cir.const #cir.ptr<null> : !cir.ptr<!ty__twoIntsStruct> loc(#loc15)
    cir.store %1, %0 : !cir.ptr<!ty__twoIntsStruct>, !cir.ptr<!cir.ptr<!ty__twoIntsStruct>> loc(#loc246)
    cir.scope {
      %2 = cir.get_global @GLOBAL_CONST_FIVE : !cir.ptr<!s32i> loc(#loc239)
      %3 = cir.load %2 : !cir.ptr<!s32i>, !s32i loc(#loc19)
      %4 = cir.const #cir.int<5> : !s32i loc(#loc20)
      %5 = cir.cmp(eq, %3, %4) : !s32i, !cir.bool loc(#loc248)
      cir.if %5 {
        %6 = cir.get_global @malloc : !cir.ptr<!cir.func<!cir.ptr<!void> (!u64i)>> loc(#loc22)
        %7 = cir.const #cir.int<50> : !s32i loc(#loc23)
        %8 = cir.cast(integral, %7 : !s32i), !u64i loc(#loc23)
        %9 = cir.const #cir.int<8> : !u64i loc(#loc250)
        %10 = cir.binop(mul, %8, %9) : !u64i loc(#loc251)
        %11 = cir.call @malloc(%10) : (!u64i) -> !cir.ptr<!void> extra(#fn_attr) loc(#loc22)
        %12 = cir.cast(bitcast, %11 : !cir.ptr<!void>), !cir.ptr<!ty__twoIntsStruct> loc(#loc252)
        cir.store %12, %0 : !cir.ptr<!ty__twoIntsStruct>, !cir.ptr<!cir.ptr<!ty__twoIntsStruct>> loc(#loc253)
        cir.scope {
          %13 = cir.load %0 : !cir.ptr<!cir.ptr<!ty__twoIntsStruct>>, !cir.ptr<!ty__twoIntsStruct> loc(#loc30)
          %14 = cir.const #cir.ptr<null> : !cir.ptr<!void> loc(#loc31)
          %15 = cir.cast(bitcast, %14 : !cir.ptr<!void>), !cir.ptr<!ty__twoIntsStruct> loc(#loc31)
          %16 = cir.cmp(eq, %13, %15) : !cir.ptr<!ty__twoIntsStruct>, !cir.bool loc(#loc255)
          cir.if %16 {
            %17 = cir.get_global @exit : !cir.ptr<!cir.func<!void (!s32i)>> loc(#loc33)
            %18 = cir.const #cir.int<1> : !s32i loc(#loc34)
            %19 = cir.unary(minus, %18) : !s32i, !s32i loc(#loc35)
            cir.call @exit(%19) : (!s32i) -> () extra(#fn_attr) loc(#loc33)
          } loc(#loc256)
        } loc(#loc254)
      } loc(#loc249)
    } loc(#loc247)
    cir.scope {
      %2 = cir.alloca !cir.array<!ty__twoIntsStruct x 100>, !cir.ptr<!cir.array<!ty__twoIntsStruct x 100>>, ["source"] {alignment = 16 : i64} loc(#loc258)
      cir.scope {
        %17 = cir.alloca !u64i, !cir.ptr<!u64i>, ["i"] {alignment = 8 : i64} loc(#loc260)
        cir.scope {
          %18 = cir.const #cir.int<0> : !s32i loc(#loc46)
          %19 = cir.cast(integral, %18 : !s32i), !u64i loc(#loc46)
          cir.store %19, %17 : !u64i, !cir.ptr<!u64i> loc(#loc262)
          cir.for : cond {
            %20 = cir.load %17 : !cir.ptr<!u64i>, !u64i loc(#loc48)
            %21 = cir.const #cir.int<100> : !s32i loc(#loc49)
            %22 = cir.cast(integral, %21 : !s32i), !u64i loc(#loc49)
            %23 = cir.cmp(lt, %20, %22) : !u64i, !cir.bool loc(#loc263)
            cir.condition(%23) loc(#loc50)
          } body {
            cir.scope {
              %20 = cir.const #cir.int<0> : !s32i loc(#loc52)
              %21 = cir.load %17 : !cir.ptr<!u64i>, !u64i loc(#loc53)
              %22 = cir.cast(array_to_ptrdecay, %2 : !cir.ptr<!cir.array<!ty__twoIntsStruct x 100>>), !cir.ptr<!ty__twoIntsStruct> loc(#loc54)
              %23 = cir.ptr_stride(%22 : !cir.ptr<!ty__twoIntsStruct>, %21 : !u64i), !cir.ptr<!ty__twoIntsStruct> loc(#loc54)
              %24 = cir.get_member %23[0] {name = "intOne"} : !cir.ptr<!ty__twoIntsStruct> -> !cir.ptr<!s32i> loc(#loc55)
              cir.store %20, %24 : !s32i, !cir.ptr<!s32i> loc(#loc265)
              %25 = cir.const #cir.int<0> : !s32i loc(#loc56)
              %26 = cir.load %17 : !cir.ptr<!u64i>, !u64i loc(#loc57)
              %27 = cir.cast(array_to_ptrdecay, %2 : !cir.ptr<!cir.array<!ty__twoIntsStruct x 100>>), !cir.ptr<!ty__twoIntsStruct> loc(#loc58)
              %28 = cir.ptr_stride(%27 : !cir.ptr<!ty__twoIntsStruct>, %26 : !u64i), !cir.ptr<!ty__twoIntsStruct> loc(#loc58)
              %29 = cir.get_member %28[1] {name = "intTwo"} : !cir.ptr<!ty__twoIntsStruct> -> !cir.ptr<!s32i> loc(#loc59)
              cir.store %25, %29 : !s32i, !cir.ptr<!s32i> loc(#loc266)
            } loc(#loc264)
            cir.yield loc(#loc45)
          } step {
            %20 = cir.load %17 : !cir.ptr<!u64i>, !u64i loc(#loc60)
            %21 = cir.unary(inc, %20) : !u64i, !u64i loc(#loc61)
            cir.store %21, %17 : !u64i, !cir.ptr<!u64i> loc(#loc267)
            cir.yield loc(#loc261)
          } loc(#loc261)
        } loc(#loc261)
      } loc(#loc259)
      %3 = cir.load %0 : !cir.ptr<!cir.ptr<!ty__twoIntsStruct>>, !cir.ptr<!ty__twoIntsStruct> loc(#loc62)
      %4 = cir.cast(bitcast, %3 : !cir.ptr<!ty__twoIntsStruct>), !cir.ptr<!void> loc(#loc62)
      %5 = cir.cast(array_to_ptrdecay, %2 : !cir.ptr<!cir.array<!ty__twoIntsStruct x 100>>), !cir.ptr<!ty__twoIntsStruct> loc(#loc63)
      %6 = cir.cast(bitcast, %5 : !cir.ptr<!ty__twoIntsStruct>), !cir.ptr<!void> loc(#loc63)
      %7 = cir.const #cir.int<100> : !s32i loc(#loc64)
      %8 = cir.cast(integral, %7 : !s32i), !u64i loc(#loc64)
      %9 = cir.const #cir.int<8> : !u64i loc(#loc268)
      %10 = cir.binop(mul, %8, %9) : !u64i loc(#loc269)
      cir.libc.memcpy %10 bytes from %6 to %4 : !u64i, !cir.ptr<!void> -> !cir.ptr<!void> loc(#loc270)
      %11 = cir.load %0 : !cir.ptr<!cir.ptr<!ty__twoIntsStruct>>, !cir.ptr<!ty__twoIntsStruct> loc(#loc69)
      %12 = cir.const #cir.int<0> : !s32i loc(#loc70)
      %13 = cir.ptr_stride(%11 : !cir.ptr<!ty__twoIntsStruct>, %12 : !s32i), !cir.ptr<!ty__twoIntsStruct> loc(#loc71)
      cir.call @printStructLine(%13) : (!cir.ptr<!ty__twoIntsStruct>) -> () loc(#loc72)
      %14 = cir.get_global @free : !cir.ptr<!cir.func<!void (!cir.ptr<!void>)>> loc(#loc73)
      %15 = cir.load %0 : !cir.ptr<!cir.ptr<!ty__twoIntsStruct>>, !cir.ptr<!ty__twoIntsStruct> loc(#loc74)
      %16 = cir.cast(bitcast, %15 : !cir.ptr<!ty__twoIntsStruct>), !cir.ptr<!void> loc(#loc74)
      cir.call @free(%16) : (!cir.ptr<!void>) -> () extra(#fn_attr) loc(#loc73)
    } loc(#loc257)
    cir.return loc(#loc12)
  } loc(#loc244)
  cir.func no_proto @CWE122_Heap_Based_Buffer_Overflow__c_CWE805_struct_memcpy_13_good() extra(#fn_attr1) {
    %0 = cir.get_global @goodG2B1 : !cir.ptr<!cir.func<!void ()>> loc(#loc272)
    cir.call %0() : (!cir.ptr<!cir.func<!void ()>>) -> () loc(#loc77)
    %1 = cir.get_global @goodG2B2 : !cir.ptr<!cir.func<!void ()>> loc(#loc273)
    cir.call %1() : (!cir.ptr<!cir.func<!void ()>>) -> () loc(#loc79)
    cir.return loc(#loc76)
  } loc(#loc271)
  cir.func private @srand(!u32i) extra(#fn_attr) loc(#loc274)
  cir.func private @time(!cir.ptr<!s64i>) -> !s64i extra(#fn_attr) loc(#loc275)
  cir.func private @printLine(!cir.ptr<!s8i>) loc(#loc276)
  cir.global "private" constant cir_private dsolocal @".str" = #cir.const_array<"Calling good()...\00" : !cir.array<!s8i x 18>> : !cir.array<!s8i x 18> {alignment = 1 : i64} loc(#loc87)
  cir.global "private" constant cir_private dsolocal @".str.1" = #cir.const_array<"Finished good()\00" : !cir.array<!s8i x 16>> : !cir.array<!s8i x 16> {alignment = 1 : i64} loc(#loc88)
  cir.global "private" constant cir_private dsolocal @".str.2" = #cir.const_array<"Calling bad()...\00" : !cir.array<!s8i x 17>> : !cir.array<!s8i x 17> {alignment = 1 : i64} loc(#loc89)
  cir.global "private" constant cir_private dsolocal @".str.3" = #cir.const_array<"Finished bad()\00" : !cir.array<!s8i x 15>> : !cir.array<!s8i x 15> {alignment = 1 : i64} loc(#loc90)
  cir.func @main(%arg0: !s32i loc(fused[#loc93, #loc94]), %arg1: !cir.ptr<!cir.ptr<!s8i>> loc(fused[#loc95, #loc96])) -> !s32i extra(#fn_attr1) {
    %0 = cir.alloca !s32i, !cir.ptr<!s32i>, ["argc", init] {alignment = 4 : i64} loc(#loc278)
    %1 = cir.alloca !cir.ptr<!cir.ptr<!s8i>>, !cir.ptr<!cir.ptr<!cir.ptr<!s8i>>>, ["argv", init] {alignment = 8 : i64} loc(#loc279)
    %2 = cir.alloca !s32i, !cir.ptr<!s32i>, ["__retval"] {alignment = 4 : i64} loc(#loc92)
    cir.store %arg0, %0 : !s32i, !cir.ptr<!s32i> loc(#loc97)
    cir.store %arg1, %1 : !cir.ptr<!cir.ptr<!s8i>>, !cir.ptr<!cir.ptr<!cir.ptr<!s8i>>> loc(#loc97)
    %3 = cir.const #cir.ptr<null> : !cir.ptr<!s64i> loc(#loc98)
    %4 = cir.call @time(%3) : (!cir.ptr<!s64i>) -> !s64i extra(#fn_attr) loc(#loc99)
    %5 = cir.cast(integral, %4 : !s64i), !u32i loc(#loc99)
    cir.call @srand(%5) : (!u32i) -> () extra(#fn_attr) loc(#loc100)
    %6 = cir.get_global @".str" : !cir.ptr<!cir.array<!s8i x 18>> loc(#loc87)
    %7 = cir.cast(array_to_ptrdecay, %6 : !cir.ptr<!cir.array<!s8i x 18>>), !cir.ptr<!s8i> loc(#loc87)
    cir.call @printLine(%7) : (!cir.ptr<!s8i>) -> () loc(#loc101)
    %8 = cir.get_global @CWE122_Heap_Based_Buffer_Overflow__c_CWE805_struct_memcpy_13_good : !cir.ptr<!cir.func<!void ()>> loc(#loc280)
    cir.call @CWE122_Heap_Based_Buffer_Overflow__c_CWE805_struct_memcpy_13_good() : () -> () loc(#loc102)
    %9 = cir.get_global @".str.1" : !cir.ptr<!cir.array<!s8i x 16>> loc(#loc88)
    %10 = cir.cast(array_to_ptrdecay, %9 : !cir.ptr<!cir.array<!s8i x 16>>), !cir.ptr<!s8i> loc(#loc88)
    cir.call @printLine(%10) : (!cir.ptr<!s8i>) -> () loc(#loc104)
    %11 = cir.get_global @".str.2" : !cir.ptr<!cir.array<!s8i x 17>> loc(#loc89)
    %12 = cir.cast(array_to_ptrdecay, %11 : !cir.ptr<!cir.array<!s8i x 17>>), !cir.ptr<!s8i> loc(#loc89)
    cir.call @printLine(%12) : (!cir.ptr<!s8i>) -> () loc(#loc105)
    %13 = cir.get_global @CWE122_Heap_Based_Buffer_Overflow__c_CWE805_struct_memcpy_13_bad : !cir.ptr<!cir.func<!void ()>> loc(#loc281)
    cir.call @CWE122_Heap_Based_Buffer_Overflow__c_CWE805_struct_memcpy_13_bad() : () -> () loc(#loc106)
    %14 = cir.get_global @".str.3" : !cir.ptr<!cir.array<!s8i x 15>> loc(#loc90)
    %15 = cir.cast(array_to_ptrdecay, %14 : !cir.ptr<!cir.array<!s8i x 15>>), !cir.ptr<!s8i> loc(#loc90)
    cir.call @printLine(%15) : (!cir.ptr<!s8i>) -> () loc(#loc108)
    %16 = cir.const #cir.int<0> : !s32i loc(#loc109)
    cir.store %16, %2 : !s32i, !cir.ptr<!s32i> loc(#loc282)
    %17 = cir.load %2 : !cir.ptr<!s32i>, !s32i loc(#loc282)
    cir.return %17 : !s32i loc(#loc282)
  } loc(#loc277)
  cir.global "private" constant cir_private dsolocal @".str.4" = #cir.const_array<"Benign, fixed string\00" : !cir.array<!s8i x 21>> : !cir.array<!s8i x 21> {alignment = 1 : i64} loc(#loc111)
  cir.func no_proto internal private @goodG2B1() extra(#fn_attr1) {
    %0 = cir.alloca !cir.ptr<!ty__twoIntsStruct>, !cir.ptr<!cir.ptr<!ty__twoIntsStruct>>, ["data"] {alignment = 8 : i64} loc(#loc284)
    %1 = cir.const #cir.ptr<null> : !cir.ptr<!ty__twoIntsStruct> loc(#loc116)
    cir.store %1, %0 : !cir.ptr<!ty__twoIntsStruct>, !cir.ptr<!cir.ptr<!ty__twoIntsStruct>> loc(#loc285)
    cir.scope {
      %2 = cir.get_global @GLOBAL_CONST_FIVE : !cir.ptr<!s32i> loc(#loc239)
      %3 = cir.load %2 : !cir.ptr<!s32i>, !s32i loc(#loc120)
      %4 = cir.const #cir.int<5> : !s32i loc(#loc121)
      %5 = cir.cmp(ne, %3, %4) : !s32i, !cir.bool loc(#loc287)
      cir.if %5 {
        %6 = cir.get_global @".str.4" : !cir.ptr<!cir.array<!s8i x 21>> loc(#loc111)
        %7 = cir.cast(array_to_ptrdecay, %6 : !cir.ptr<!cir.array<!s8i x 21>>), !cir.ptr<!s8i> loc(#loc111)
        cir.call @printLine(%7) : (!cir.ptr<!s8i>) -> () loc(#loc125)
      } else {
        %6 = cir.get_global @malloc : !cir.ptr<!cir.func<!cir.ptr<!void> (!u64i)>> loc(#loc126)
        %7 = cir.const #cir.int<100> : !s32i loc(#loc127)
        %8 = cir.cast(integral, %7 : !s32i), !u64i loc(#loc127)
        %9 = cir.const #cir.int<8> : !u64i loc(#loc289)
        %10 = cir.binop(mul, %8, %9) : !u64i loc(#loc290)
        %11 = cir.call @malloc(%10) : (!u64i) -> !cir.ptr<!void> extra(#fn_attr) loc(#loc126)
        %12 = cir.cast(bitcast, %11 : !cir.ptr<!void>), !cir.ptr<!ty__twoIntsStruct> loc(#loc291)
        cir.store %12, %0 : !cir.ptr<!ty__twoIntsStruct>, !cir.ptr<!cir.ptr<!ty__twoIntsStruct>> loc(#loc292)
        cir.scope {
          %13 = cir.load %0 : !cir.ptr<!cir.ptr<!ty__twoIntsStruct>>, !cir.ptr<!ty__twoIntsStruct> loc(#loc134)
          %14 = cir.const #cir.ptr<null> : !cir.ptr<!void> loc(#loc135)
          %15 = cir.cast(bitcast, %14 : !cir.ptr<!void>), !cir.ptr<!ty__twoIntsStruct> loc(#loc135)
          %16 = cir.cmp(eq, %13, %15) : !cir.ptr<!ty__twoIntsStruct>, !cir.bool loc(#loc294)
          cir.if %16 {
            %17 = cir.get_global @exit : !cir.ptr<!cir.func<!void (!s32i)>> loc(#loc137)
            %18 = cir.const #cir.int<1> : !s32i loc(#loc138)
            %19 = cir.unary(minus, %18) : !s32i, !s32i loc(#loc139)
            cir.call @exit(%19) : (!s32i) -> () extra(#fn_attr) loc(#loc137)
          } loc(#loc295)
        } loc(#loc293)
      } loc(#loc288)
    } loc(#loc286)
    cir.scope {
      %2 = cir.alloca !cir.array<!ty__twoIntsStruct x 100>, !cir.ptr<!cir.array<!ty__twoIntsStruct x 100>>, ["source"] {alignment = 16 : i64} loc(#loc297)
      cir.scope {
        %17 = cir.alloca !u64i, !cir.ptr<!u64i>, ["i"] {alignment = 8 : i64} loc(#loc299)
        cir.scope {
          %18 = cir.const #cir.int<0> : !s32i loc(#loc150)
          %19 = cir.cast(integral, %18 : !s32i), !u64i loc(#loc150)
          cir.store %19, %17 : !u64i, !cir.ptr<!u64i> loc(#loc301)
          cir.for : cond {
            %20 = cir.load %17 : !cir.ptr<!u64i>, !u64i loc(#loc152)
            %21 = cir.const #cir.int<100> : !s32i loc(#loc153)
            %22 = cir.cast(integral, %21 : !s32i), !u64i loc(#loc153)
            %23 = cir.cmp(lt, %20, %22) : !u64i, !cir.bool loc(#loc302)
            cir.condition(%23) loc(#loc154)
          } body {
            cir.scope {
              %20 = cir.const #cir.int<0> : !s32i loc(#loc156)
              %21 = cir.load %17 : !cir.ptr<!u64i>, !u64i loc(#loc157)
              %22 = cir.cast(array_to_ptrdecay, %2 : !cir.ptr<!cir.array<!ty__twoIntsStruct x 100>>), !cir.ptr<!ty__twoIntsStruct> loc(#loc158)
              %23 = cir.ptr_stride(%22 : !cir.ptr<!ty__twoIntsStruct>, %21 : !u64i), !cir.ptr<!ty__twoIntsStruct> loc(#loc158)
              %24 = cir.get_member %23[0] {name = "intOne"} : !cir.ptr<!ty__twoIntsStruct> -> !cir.ptr<!s32i> loc(#loc55)
              cir.store %20, %24 : !s32i, !cir.ptr<!s32i> loc(#loc304)
              %25 = cir.const #cir.int<0> : !s32i loc(#loc159)
              %26 = cir.load %17 : !cir.ptr<!u64i>, !u64i loc(#loc160)
              %27 = cir.cast(array_to_ptrdecay, %2 : !cir.ptr<!cir.array<!ty__twoIntsStruct x 100>>), !cir.ptr<!ty__twoIntsStruct> loc(#loc161)
              %28 = cir.ptr_stride(%27 : !cir.ptr<!ty__twoIntsStruct>, %26 : !u64i), !cir.ptr<!ty__twoIntsStruct> loc(#loc161)
              %29 = cir.get_member %28[1] {name = "intTwo"} : !cir.ptr<!ty__twoIntsStruct> -> !cir.ptr<!s32i> loc(#loc59)
              cir.store %25, %29 : !s32i, !cir.ptr<!s32i> loc(#loc305)
            } loc(#loc303)
            cir.yield loc(#loc149)
          } step {
            %20 = cir.load %17 : !cir.ptr<!u64i>, !u64i loc(#loc162)
            %21 = cir.unary(inc, %20) : !u64i, !u64i loc(#loc163)
            cir.store %21, %17 : !u64i, !cir.ptr<!u64i> loc(#loc306)
            cir.yield loc(#loc300)
          } loc(#loc300)
        } loc(#loc300)
      } loc(#loc298)
      %3 = cir.load %0 : !cir.ptr<!cir.ptr<!ty__twoIntsStruct>>, !cir.ptr<!ty__twoIntsStruct> loc(#loc164)
      %4 = cir.cast(bitcast, %3 : !cir.ptr<!ty__twoIntsStruct>), !cir.ptr<!void> loc(#loc164)
      %5 = cir.cast(array_to_ptrdecay, %2 : !cir.ptr<!cir.array<!ty__twoIntsStruct x 100>>), !cir.ptr<!ty__twoIntsStruct> loc(#loc165)
      %6 = cir.cast(bitcast, %5 : !cir.ptr<!ty__twoIntsStruct>), !cir.ptr<!void> loc(#loc165)
      %7 = cir.const #cir.int<100> : !s32i loc(#loc166)
      %8 = cir.cast(integral, %7 : !s32i), !u64i loc(#loc166)
      %9 = cir.const #cir.int<8> : !u64i loc(#loc307)
      %10 = cir.binop(mul, %8, %9) : !u64i loc(#loc308)
      cir.libc.memcpy %10 bytes from %6 to %4 : !u64i, !cir.ptr<!void> -> !cir.ptr<!void> loc(#loc309)
      %11 = cir.load %0 : !cir.ptr<!cir.ptr<!ty__twoIntsStruct>>, !cir.ptr<!ty__twoIntsStruct> loc(#loc171)
      %12 = cir.const #cir.int<0> : !s32i loc(#loc172)
      %13 = cir.ptr_stride(%11 : !cir.ptr<!ty__twoIntsStruct>, %12 : !s32i), !cir.ptr<!ty__twoIntsStruct> loc(#loc173)
      cir.call @printStructLine(%13) : (!cir.ptr<!ty__twoIntsStruct>) -> () loc(#loc174)
      %14 = cir.get_global @free : !cir.ptr<!cir.func<!void (!cir.ptr<!void>)>> loc(#loc175)
      %15 = cir.load %0 : !cir.ptr<!cir.ptr<!ty__twoIntsStruct>>, !cir.ptr<!ty__twoIntsStruct> loc(#loc176)
      %16 = cir.cast(bitcast, %15 : !cir.ptr<!ty__twoIntsStruct>), !cir.ptr<!void> loc(#loc176)
      cir.call @free(%16) : (!cir.ptr<!void>) -> () extra(#fn_attr) loc(#loc175)
    } loc(#loc296)
    cir.return loc(#loc113)
  } loc(#loc283)
  cir.func no_proto internal private @goodG2B2() extra(#fn_attr1) {
    %0 = cir.alloca !cir.ptr<!ty__twoIntsStruct>, !cir.ptr<!cir.ptr<!ty__twoIntsStruct>>, ["data"] {alignment = 8 : i64} loc(#loc311)
    %1 = cir.const #cir.ptr<null> : !cir.ptr<!ty__twoIntsStruct> loc(#loc181)
    cir.store %1, %0 : !cir.ptr<!ty__twoIntsStruct>, !cir.ptr<!cir.ptr<!ty__twoIntsStruct>> loc(#loc312)
    cir.scope {
      %2 = cir.get_global @GLOBAL_CONST_FIVE : !cir.ptr<!s32i> loc(#loc239)
      %3 = cir.load %2 : !cir.ptr<!s32i>, !s32i loc(#loc185)
      %4 = cir.const #cir.int<5> : !s32i loc(#loc186)
      %5 = cir.cmp(eq, %3, %4) : !s32i, !cir.bool loc(#loc314)
      cir.if %5 {
        %6 = cir.get_global @malloc : !cir.ptr<!cir.func<!cir.ptr<!void> (!u64i)>> loc(#loc188)
        %7 = cir.const #cir.int<100> : !s32i loc(#loc189)
        %8 = cir.cast(integral, %7 : !s32i), !u64i loc(#loc189)
        %9 = cir.const #cir.int<8> : !u64i loc(#loc316)
        %10 = cir.binop(mul, %8, %9) : !u64i loc(#loc317)
        %11 = cir.call @malloc(%10) : (!u64i) -> !cir.ptr<!void> extra(#fn_attr) loc(#loc188)
        %12 = cir.cast(bitcast, %11 : !cir.ptr<!void>), !cir.ptr<!ty__twoIntsStruct> loc(#loc318)
        cir.store %12, %0 : !cir.ptr<!ty__twoIntsStruct>, !cir.ptr<!cir.ptr<!ty__twoIntsStruct>> loc(#loc319)
        cir.scope {
          %13 = cir.load %0 : !cir.ptr<!cir.ptr<!ty__twoIntsStruct>>, !cir.ptr<!ty__twoIntsStruct> loc(#loc196)
          %14 = cir.const #cir.ptr<null> : !cir.ptr<!void> loc(#loc197)
          %15 = cir.cast(bitcast, %14 : !cir.ptr<!void>), !cir.ptr<!ty__twoIntsStruct> loc(#loc197)
          %16 = cir.cmp(eq, %13, %15) : !cir.ptr<!ty__twoIntsStruct>, !cir.bool loc(#loc321)
          cir.if %16 {
            %17 = cir.get_global @exit : !cir.ptr<!cir.func<!void (!s32i)>> loc(#loc199)
            %18 = cir.const #cir.int<1> : !s32i loc(#loc200)
            %19 = cir.unary(minus, %18) : !s32i, !s32i loc(#loc201)
            cir.call @exit(%19) : (!s32i) -> () extra(#fn_attr) loc(#loc199)
          } loc(#loc322)
        } loc(#loc320)
      } loc(#loc315)
    } loc(#loc313)
    cir.scope {
      %2 = cir.alloca !cir.array<!ty__twoIntsStruct x 100>, !cir.ptr<!cir.array<!ty__twoIntsStruct x 100>>, ["source"] {alignment = 16 : i64} loc(#loc324)
      cir.scope {
        %17 = cir.alloca !u64i, !cir.ptr<!u64i>, ["i"] {alignment = 8 : i64} loc(#loc326)
        cir.scope {
          %18 = cir.const #cir.int<0> : !s32i loc(#loc212)
          %19 = cir.cast(integral, %18 : !s32i), !u64i loc(#loc212)
          cir.store %19, %17 : !u64i, !cir.ptr<!u64i> loc(#loc328)
          cir.for : cond {
            %20 = cir.load %17 : !cir.ptr<!u64i>, !u64i loc(#loc214)
            %21 = cir.const #cir.int<100> : !s32i loc(#loc215)
            %22 = cir.cast(integral, %21 : !s32i), !u64i loc(#loc215)
            %23 = cir.cmp(lt, %20, %22) : !u64i, !cir.bool loc(#loc329)
            cir.condition(%23) loc(#loc216)
          } body {
            cir.scope {
              %20 = cir.const #cir.int<0> : !s32i loc(#loc218)
              %21 = cir.load %17 : !cir.ptr<!u64i>, !u64i loc(#loc219)
              %22 = cir.cast(array_to_ptrdecay, %2 : !cir.ptr<!cir.array<!ty__twoIntsStruct x 100>>), !cir.ptr<!ty__twoIntsStruct> loc(#loc220)
              %23 = cir.ptr_stride(%22 : !cir.ptr<!ty__twoIntsStruct>, %21 : !u64i), !cir.ptr<!ty__twoIntsStruct> loc(#loc220)
              %24 = cir.get_member %23[0] {name = "intOne"} : !cir.ptr<!ty__twoIntsStruct> -> !cir.ptr<!s32i> loc(#loc55)
              cir.store %20, %24 : !s32i, !cir.ptr<!s32i> loc(#loc331)
              %25 = cir.const #cir.int<0> : !s32i loc(#loc221)
              %26 = cir.load %17 : !cir.ptr<!u64i>, !u64i loc(#loc222)
              %27 = cir.cast(array_to_ptrdecay, %2 : !cir.ptr<!cir.array<!ty__twoIntsStruct x 100>>), !cir.ptr<!ty__twoIntsStruct> loc(#loc223)
              %28 = cir.ptr_stride(%27 : !cir.ptr<!ty__twoIntsStruct>, %26 : !u64i), !cir.ptr<!ty__twoIntsStruct> loc(#loc223)
              %29 = cir.get_member %28[1] {name = "intTwo"} : !cir.ptr<!ty__twoIntsStruct> -> !cir.ptr<!s32i> loc(#loc59)
              cir.store %25, %29 : !s32i, !cir.ptr<!s32i> loc(#loc332)
            } loc(#loc330)
            cir.yield loc(#loc211)
          } step {
            %20 = cir.load %17 : !cir.ptr<!u64i>, !u64i loc(#loc224)
            %21 = cir.unary(inc, %20) : !u64i, !u64i loc(#loc225)
            cir.store %21, %17 : !u64i, !cir.ptr<!u64i> loc(#loc333)
            cir.yield loc(#loc327)
          } loc(#loc327)
        } loc(#loc327)
      } loc(#loc325)
      %3 = cir.load %0 : !cir.ptr<!cir.ptr<!ty__twoIntsStruct>>, !cir.ptr<!ty__twoIntsStruct> loc(#loc226)
      %4 = cir.cast(bitcast, %3 : !cir.ptr<!ty__twoIntsStruct>), !cir.ptr<!void> loc(#loc226)
      %5 = cir.cast(array_to_ptrdecay, %2 : !cir.ptr<!cir.array<!ty__twoIntsStruct x 100>>), !cir.ptr<!ty__twoIntsStruct> loc(#loc227)
      %6 = cir.cast(bitcast, %5 : !cir.ptr<!ty__twoIntsStruct>), !cir.ptr<!void> loc(#loc227)
      %7 = cir.const #cir.int<100> : !s32i loc(#loc228)
      %8 = cir.cast(integral, %7 : !s32i), !u64i loc(#loc228)
      %9 = cir.const #cir.int<8> : !u64i loc(#loc334)
      %10 = cir.binop(mul, %8, %9) : !u64i loc(#loc335)
      cir.libc.memcpy %10 bytes from %6 to %4 : !u64i, !cir.ptr<!void> -> !cir.ptr<!void> loc(#loc336)
      %11 = cir.load %0 : !cir.ptr<!cir.ptr<!ty__twoIntsStruct>>, !cir.ptr<!ty__twoIntsStruct> loc(#loc233)
      %12 = cir.const #cir.int<0> : !s32i loc(#loc234)
      %13 = cir.ptr_stride(%11 : !cir.ptr<!ty__twoIntsStruct>, %12 : !s32i), !cir.ptr<!ty__twoIntsStruct> loc(#loc235)
      cir.call @printStructLine(%13) : (!cir.ptr<!ty__twoIntsStruct>) -> () loc(#loc236)
      %14 = cir.get_global @free : !cir.ptr<!cir.func<!void (!cir.ptr<!void>)>> loc(#loc237)
      %15 = cir.load %0 : !cir.ptr<!cir.ptr<!ty__twoIntsStruct>>, !cir.ptr<!ty__twoIntsStruct> loc(#loc238)
      %16 = cir.cast(bitcast, %15 : !cir.ptr<!ty__twoIntsStruct>), !cir.ptr<!void> loc(#loc238)
      cir.call @free(%16) : (!cir.ptr<!void>) -> () extra(#fn_attr) loc(#loc237)
    } loc(#loc323)
    cir.return loc(#loc178)
  } loc(#loc310)
} loc(#loc)
#loc = loc("/home/ladisgin/git_proj/juliet-c/testcases/CWE122_Heap_Based_Buffer_Overflow/s08/CWE122_Heap_Based_Buffer_Overflow__c_CWE805_struct_memcpy_13.c":0:0)
#loc1 = loc("../../../testcasesupport/std_testcase.h":111:1)
#loc2 = loc("../../../testcasesupport/std_testcase.h":111:18)
#loc3 = loc("/usr/include/stdlib.h":672:1)
#loc4 = loc("/usr/include/stdlib.h":672:45)
#loc5 = loc("/usr/include/stdlib.h":756:1)
#loc6 = loc("/usr/include/stdlib.h":756:70)
#loc7 = loc("../../../testcasesupport/std_testcase_io.h":40:1)
#loc8 = loc("../../../testcasesupport/std_testcase_io.h":40:63)
#loc9 = loc("/usr/include/stdlib.h":687:1)
#loc10 = loc("/usr/include/stdlib.h":687:32)
#loc11 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_struct_memcpy_13.c":21:1)
#loc12 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_struct_memcpy_13.c":47:1)
#loc13 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_struct_memcpy_13.c":23:5)
#loc14 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_struct_memcpy_13.c":23:21)
#loc15 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_struct_memcpy_13.c":24:12)
#loc16 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_struct_memcpy_13.c":24:5)
#loc17 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_struct_memcpy_13.c":25:5)
#loc18 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_struct_memcpy_13.c":30:5)
#loc19 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_struct_memcpy_13.c":25:8)
#loc20 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_struct_memcpy_13.c":25:27)
#loc21 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_struct_memcpy_13.c":26:5)
#loc22 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_struct_memcpy_13.c":28:33)
#loc23 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_struct_memcpy_13.c":28:40)
#loc24 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_struct_memcpy_13.c":28:43)
#loc25 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_struct_memcpy_13.c":28:63)
#loc26 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_struct_memcpy_13.c":28:64)
#loc27 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_struct_memcpy_13.c":28:9)
#loc28 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_struct_memcpy_13.c":29:9)
#loc29 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_struct_memcpy_13.c":29:37)
#loc30 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_struct_memcpy_13.c":29:13)
#loc31 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_struct_memcpy_13.c":29:21)
#loc32 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_struct_memcpy_13.c":29:27)
#loc33 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_struct_memcpy_13.c":29:28)
#loc34 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_struct_memcpy_13.c":29:34)
#loc35 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_struct_memcpy_13.c":29:33)
#loc36 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_struct_memcpy_13.c":31:5)
#loc37 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_struct_memcpy_13.c":46:5)
#loc38 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_struct_memcpy_13.c":32:9)
#loc39 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_struct_memcpy_13.c":32:33)
#loc40 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_struct_memcpy_13.c":33:9)
#loc41 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_struct_memcpy_13.c":41:9)
#loc42 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_struct_memcpy_13.c":34:13)
#loc43 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_struct_memcpy_13.c":34:20)
#loc44 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_struct_memcpy_13.c":36:13)
#loc45 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_struct_memcpy_13.c":40:13)
#loc46 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_struct_memcpy_13.c":36:22)
#loc47 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_struct_memcpy_13.c":36:18)
#loc48 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_struct_memcpy_13.c":36:25)
#loc49 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_struct_memcpy_13.c":36:29)
#loc50 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_struct_memcpy_13.c":36:27)
#loc51 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_struct_memcpy_13.c":37:13)
#loc52 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_struct_memcpy_13.c":38:36)
#loc53 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_struct_memcpy_13.c":38:24)
#loc54 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_struct_memcpy_13.c":38:17)
#loc55 = loc("../../../testcasesupport/std_testcase.h":98:9)
#loc56 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_struct_memcpy_13.c":39:36)
#loc57 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_struct_memcpy_13.c":39:24)
#loc58 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_struct_memcpy_13.c":39:17)
#loc59 = loc("../../../testcasesupport/std_testcase.h":99:9)
#loc60 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_struct_memcpy_13.c":36:35)
#loc61 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_struct_memcpy_13.c":36:34)
#loc62 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_struct_memcpy_13.c":43:16)
#loc63 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_struct_memcpy_13.c":43:22)
#loc64 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_struct_memcpy_13.c":43:30)
#loc65 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_struct_memcpy_13.c":43:34)
#loc66 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_struct_memcpy_13.c":43:54)
#loc67 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_struct_memcpy_13.c":43:9)
#loc68 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_struct_memcpy_13.c":43:55)
#loc69 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_struct_memcpy_13.c":44:26)
#loc70 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_struct_memcpy_13.c":44:31)
#loc71 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_struct_memcpy_13.c":44:32)
#loc72 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_struct_memcpy_13.c":44:9)
#loc73 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_struct_memcpy_13.c":45:9)
#loc74 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_struct_memcpy_13.c":45:14)
#loc75 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_struct_memcpy_13.c":116:1)
#loc76 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_struct_memcpy_13.c":120:1)
#loc77 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_struct_memcpy_13.c":118:5)
#loc78 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_struct_memcpy_13.c":118:14)
#loc79 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_struct_memcpy_13.c":119:5)
#loc80 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_struct_memcpy_13.c":119:14)
#loc81 = loc("/usr/include/stdlib.h":575:1)
#loc82 = loc("/usr/include/stdlib.h":575:41)
#loc83 = loc("/usr/include/time.h":76:1)
#loc84 = loc("/usr/include/time.h":76:38)
#loc85 = loc("../../../testcasesupport/std_testcase_io.h":14:1)
#loc86 = loc("../../../testcasesupport/std_testcase_io.h":14:33)
#loc87 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_struct_memcpy_13.c":137:15)
#loc88 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_struct_memcpy_13.c":139:15)
#loc89 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_struct_memcpy_13.c":142:15)
#loc90 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_struct_memcpy_13.c":144:15)
#loc91 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_struct_memcpy_13.c":132:1)
#loc92 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_struct_memcpy_13.c":147:1)
#loc97 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_struct_memcpy_13.c":133:1)
#loc98 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_struct_memcpy_13.c":135:27)
#loc99 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_struct_memcpy_13.c":135:22)
#loc100 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_struct_memcpy_13.c":135:5)
#loc101 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_struct_memcpy_13.c":137:5)
#loc102 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_struct_memcpy_13.c":138:5)
#loc103 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_struct_memcpy_13.c":138:71)
#loc104 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_struct_memcpy_13.c":139:5)
#loc105 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_struct_memcpy_13.c":142:5)
#loc106 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_struct_memcpy_13.c":143:5)
#loc107 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_struct_memcpy_13.c":143:70)
#loc108 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_struct_memcpy_13.c":144:5)
#loc109 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_struct_memcpy_13.c":146:12)
#loc110 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_struct_memcpy_13.c":146:5)
#loc111 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_struct_memcpy_13.c":61:19)
#loc112 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_struct_memcpy_13.c":54:1)
#loc113 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_struct_memcpy_13.c":85:1)
#loc114 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_struct_memcpy_13.c":56:5)
#loc115 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_struct_memcpy_13.c":56:21)
#loc116 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_struct_memcpy_13.c":57:12)
#loc117 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_struct_memcpy_13.c":57:5)
#loc118 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_struct_memcpy_13.c":58:5)
#loc119 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_struct_memcpy_13.c":68:5)
#loc120 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_struct_memcpy_13.c":58:8)
#loc121 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_struct_memcpy_13.c":58:27)
#loc122 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_struct_memcpy_13.c":59:5)
#loc123 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_struct_memcpy_13.c":62:5)
#loc124 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_struct_memcpy_13.c":64:5)
#loc125 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_struct_memcpy_13.c":61:9)
#loc126 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_struct_memcpy_13.c":66:33)
#loc127 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_struct_memcpy_13.c":66:40)
#loc128 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_struct_memcpy_13.c":66:44)
#loc129 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_struct_memcpy_13.c":66:64)
#loc130 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_struct_memcpy_13.c":66:65)
#loc131 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_struct_memcpy_13.c":66:9)
#loc132 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_struct_memcpy_13.c":67:9)
#loc133 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_struct_memcpy_13.c":67:37)
#loc134 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_struct_memcpy_13.c":67:13)
#loc135 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_struct_memcpy_13.c":67:21)
#loc136 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_struct_memcpy_13.c":67:27)
#loc137 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_struct_memcpy_13.c":67:28)
#loc138 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_struct_memcpy_13.c":67:34)
#loc139 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_struct_memcpy_13.c":67:33)
#loc140 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_struct_memcpy_13.c":69:5)
#loc141 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_struct_memcpy_13.c":84:5)
#loc142 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_struct_memcpy_13.c":70:9)
#loc143 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_struct_memcpy_13.c":70:33)
#loc144 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_struct_memcpy_13.c":71:9)
#loc145 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_struct_memcpy_13.c":79:9)
#loc146 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_struct_memcpy_13.c":72:13)
#loc147 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_struct_memcpy_13.c":72:20)
#loc148 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_struct_memcpy_13.c":74:13)
#loc149 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_struct_memcpy_13.c":78:13)
#loc150 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_struct_memcpy_13.c":74:22)
#loc151 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_struct_memcpy_13.c":74:18)
#loc152 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_struct_memcpy_13.c":74:25)
#loc153 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_struct_memcpy_13.c":74:29)
#loc154 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_struct_memcpy_13.c":74:27)
#loc155 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_struct_memcpy_13.c":75:13)
#loc156 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_struct_memcpy_13.c":76:36)
#loc157 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_struct_memcpy_13.c":76:24)
#loc158 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_struct_memcpy_13.c":76:17)
#loc159 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_struct_memcpy_13.c":77:36)
#loc160 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_struct_memcpy_13.c":77:24)
#loc161 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_struct_memcpy_13.c":77:17)
#loc162 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_struct_memcpy_13.c":74:35)
#loc163 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_struct_memcpy_13.c":74:34)
#loc164 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_struct_memcpy_13.c":81:16)
#loc165 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_struct_memcpy_13.c":81:22)
#loc166 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_struct_memcpy_13.c":81:30)
#loc167 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_struct_memcpy_13.c":81:34)
#loc168 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_struct_memcpy_13.c":81:54)
#loc169 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_struct_memcpy_13.c":81:9)
#loc170 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_struct_memcpy_13.c":81:55)
#loc171 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_struct_memcpy_13.c":82:26)
#loc172 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_struct_memcpy_13.c":82:31)
#loc173 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_struct_memcpy_13.c":82:32)
#loc174 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_struct_memcpy_13.c":82:9)
#loc175 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_struct_memcpy_13.c":83:9)
#loc176 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_struct_memcpy_13.c":83:14)
#loc177 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_struct_memcpy_13.c":88:1)
#loc178 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_struct_memcpy_13.c":114:1)
#loc179 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_struct_memcpy_13.c":90:5)
#loc180 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_struct_memcpy_13.c":90:21)
#loc181 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_struct_memcpy_13.c":91:12)
#loc182 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_struct_memcpy_13.c":91:5)
#loc183 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_struct_memcpy_13.c":92:5)
#loc184 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_struct_memcpy_13.c":97:5)
#loc185 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_struct_memcpy_13.c":92:8)
#loc186 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_struct_memcpy_13.c":92:27)
#loc187 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_struct_memcpy_13.c":93:5)
#loc188 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_struct_memcpy_13.c":95:33)
#loc189 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_struct_memcpy_13.c":95:40)
#loc190 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_struct_memcpy_13.c":95:44)
#loc191 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_struct_memcpy_13.c":95:64)
#loc192 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_struct_memcpy_13.c":95:65)
#loc193 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_struct_memcpy_13.c":95:9)
#loc194 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_struct_memcpy_13.c":96:9)
#loc195 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_struct_memcpy_13.c":96:37)
#loc196 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_struct_memcpy_13.c":96:13)
#loc197 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_struct_memcpy_13.c":96:21)
#loc198 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_struct_memcpy_13.c":96:27)
#loc199 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_struct_memcpy_13.c":96:28)
#loc200 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_struct_memcpy_13.c":96:34)
#loc201 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_struct_memcpy_13.c":96:33)
#loc202 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_struct_memcpy_13.c":98:5)
#loc203 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_struct_memcpy_13.c":113:5)
#loc204 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_struct_memcpy_13.c":99:9)
#loc205 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_struct_memcpy_13.c":99:33)
#loc206 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_struct_memcpy_13.c":100:9)
#loc207 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_struct_memcpy_13.c":108:9)
#loc208 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_struct_memcpy_13.c":101:13)
#loc209 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_struct_memcpy_13.c":101:20)
#loc210 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_struct_memcpy_13.c":103:13)
#loc211 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_struct_memcpy_13.c":107:13)
#loc212 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_struct_memcpy_13.c":103:22)
#loc213 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_struct_memcpy_13.c":103:18)
#loc214 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_struct_memcpy_13.c":103:25)
#loc215 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_struct_memcpy_13.c":103:29)
#loc216 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_struct_memcpy_13.c":103:27)
#loc217 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_struct_memcpy_13.c":104:13)
#loc218 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_struct_memcpy_13.c":105:36)
#loc219 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_struct_memcpy_13.c":105:24)
#loc220 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_struct_memcpy_13.c":105:17)
#loc221 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_struct_memcpy_13.c":106:36)
#loc222 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_struct_memcpy_13.c":106:24)
#loc223 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_struct_memcpy_13.c":106:17)
#loc224 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_struct_memcpy_13.c":103:35)
#loc225 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_struct_memcpy_13.c":103:34)
#loc226 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_struct_memcpy_13.c":110:16)
#loc227 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_struct_memcpy_13.c":110:22)
#loc228 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_struct_memcpy_13.c":110:30)
#loc229 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_struct_memcpy_13.c":110:34)
#loc230 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_struct_memcpy_13.c":110:54)
#loc231 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_struct_memcpy_13.c":110:9)
#loc232 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_struct_memcpy_13.c":110:55)
#loc233 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_struct_memcpy_13.c":111:26)
#loc234 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_struct_memcpy_13.c":111:31)
#loc235 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_struct_memcpy_13.c":111:32)
#loc236 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_struct_memcpy_13.c":111:9)
#loc237 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_struct_memcpy_13.c":112:9)
#loc238 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_struct_memcpy_13.c":112:14)
#loc239 = loc(fused[#loc1, #loc2])
#loc240 = loc(fused[#loc3, #loc4])
#loc241 = loc(fused[#loc5, #loc6])
#loc242 = loc(fused[#loc7, #loc8])
#loc243 = loc(fused[#loc9, #loc10])
#loc244 = loc(fused[#loc11, #loc12])
#loc245 = loc(fused[#loc13, #loc14])
#loc246 = loc(fused[#loc16, #loc15])
#loc247 = loc(fused[#loc17, #loc18])
#loc248 = loc(fused[#loc19, #loc20])
#loc249 = loc(fused[#loc21, #loc18])
#loc250 = loc(fused[#loc24, #loc25])
#loc251 = loc(fused[#loc23, #loc25])
#loc252 = loc(fused[#loc22, #loc26])
#loc253 = loc(fused[#loc27, #loc26])
#loc254 = loc(fused[#loc28, #loc29])
#loc255 = loc(fused[#loc30, #loc31])
#loc256 = loc(fused[#loc32, #loc29])
#loc257 = loc(fused[#loc36, #loc37])
#loc258 = loc(fused[#loc38, #loc39])
#loc259 = loc(fused[#loc40, #loc41])
#loc260 = loc(fused[#loc42, #loc43])
#loc261 = loc(fused[#loc44, #loc45])
#loc262 = loc(fused[#loc47, #loc46])
#loc263 = loc(fused[#loc48, #loc49])
#loc264 = loc(fused[#loc51, #loc45])
#loc265 = loc(fused[#loc54, #loc52])
#loc266 = loc(fused[#loc58, #loc56])
#loc267 = loc(fused[#loc61, #loc60])
#loc268 = loc(fused[#loc65, #loc66])
#loc269 = loc(fused[#loc64, #loc66])
#loc270 = loc(fused[#loc67, #loc68])
#loc271 = loc(fused[#loc75, #loc76])
#loc272 = loc(fused[#loc77, #loc78])
#loc273 = loc(fused[#loc79, #loc80])
#loc274 = loc(fused[#loc81, #loc82])
#loc275 = loc(fused[#loc83, #loc84])
#loc276 = loc(fused[#loc85, #loc86])
#loc277 = loc(fused[#loc91, #loc92])
#loc280 = loc(fused[#loc102, #loc103])
#loc281 = loc(fused[#loc106, #loc107])
#loc282 = loc(fused[#loc110, #loc109])
#loc283 = loc(fused[#loc112, #loc113])
#loc284 = loc(fused[#loc114, #loc115])
#loc285 = loc(fused[#loc117, #loc116])
#loc286 = loc(fused[#loc118, #loc119])
#loc287 = loc(fused[#loc120, #loc121])
#loc288 = loc(fused[#loc122, #loc123, #loc124, #loc119])
#loc289 = loc(fused[#loc128, #loc129])
#loc290 = loc(fused[#loc127, #loc129])
#loc291 = loc(fused[#loc126, #loc130])
#loc292 = loc(fused[#loc131, #loc130])
#loc293 = loc(fused[#loc132, #loc133])
#loc294 = loc(fused[#loc134, #loc135])
#loc295 = loc(fused[#loc136, #loc133])
#loc296 = loc(fused[#loc140, #loc141])
#loc297 = loc(fused[#loc142, #loc143])
#loc298 = loc(fused[#loc144, #loc145])
#loc299 = loc(fused[#loc146, #loc147])
#loc300 = loc(fused[#loc148, #loc149])
#loc301 = loc(fused[#loc151, #loc150])
#loc302 = loc(fused[#loc152, #loc153])
#loc303 = loc(fused[#loc155, #loc149])
#loc304 = loc(fused[#loc158, #loc156])
#loc305 = loc(fused[#loc161, #loc159])
#loc306 = loc(fused[#loc163, #loc162])
#loc307 = loc(fused[#loc167, #loc168])
#loc308 = loc(fused[#loc166, #loc168])
#loc309 = loc(fused[#loc169, #loc170])
#loc310 = loc(fused[#loc177, #loc178])
#loc311 = loc(fused[#loc179, #loc180])
#loc312 = loc(fused[#loc182, #loc181])
#loc313 = loc(fused[#loc183, #loc184])
#loc314 = loc(fused[#loc185, #loc186])
#loc315 = loc(fused[#loc187, #loc184])
#loc316 = loc(fused[#loc190, #loc191])
#loc317 = loc(fused[#loc189, #loc191])
#loc318 = loc(fused[#loc188, #loc192])
#loc319 = loc(fused[#loc193, #loc192])
#loc320 = loc(fused[#loc194, #loc195])
#loc321 = loc(fused[#loc196, #loc197])
#loc322 = loc(fused[#loc198, #loc195])
#loc323 = loc(fused[#loc202, #loc203])
#loc324 = loc(fused[#loc204, #loc205])
#loc325 = loc(fused[#loc206, #loc207])
#loc326 = loc(fused[#loc208, #loc209])
#loc327 = loc(fused[#loc210, #loc211])
#loc328 = loc(fused[#loc213, #loc212])
#loc329 = loc(fused[#loc214, #loc215])
#loc330 = loc(fused[#loc217, #loc211])
#loc331 = loc(fused[#loc220, #loc218])
#loc332 = loc(fused[#loc223, #loc221])
#loc333 = loc(fused[#loc225, #loc224])
#loc334 = loc(fused[#loc229, #loc230])
#loc335 = loc(fused[#loc228, #loc230])
#loc336 = loc(fused[#loc231, #loc232])
