!s32i = !cir.int<s, 32>
!s64i = !cir.int<s, 64>
!s8i = !cir.int<s, 8>
!ty__IO_codecvt = !cir.record<struct "_IO_codecvt" incomplete>
!ty__IO_marker = !cir.record<struct "_IO_marker" incomplete>
!ty__IO_wide_data = !cir.record<struct "_IO_wide_data" incomplete>
!u16i = !cir.int<u, 16>
!u32i = !cir.int<u, 32>
!u64i = !cir.int<u, 64>
!void = !cir.void
#fn_attr = #cir<extra({inline = #cir.inline<no>, nothrow = #cir.nothrow, optnone = #cir.optnone, uwtable = #cir.uwtable<async>})>
#fn_attr1 = #cir<extra({nothrow = #cir.nothrow})>
#loc10 = loc("CWE617_Reachable_Assertion__fscanf_21.c":28:22)
#loc11 = loc("CWE617_Reachable_Assertion__fscanf_21.c":28:26)
#loc50 = loc("CWE617_Reachable_Assertion__fscanf_21.c":58:27)
#loc51 = loc("CWE617_Reachable_Assertion__fscanf_21.c":58:31)
#loc83 = loc("CWE617_Reachable_Assertion__fscanf_21.c":85:27)
#loc84 = loc("CWE617_Reachable_Assertion__fscanf_21.c":85:31)
#loc113 = loc(fused[#loc10, #loc11])
#loc129 = loc(fused[#loc50, #loc51])
#loc141 = loc(fused[#loc83, #loc84])
!ty__IO_FILE = !cir.record<struct "_IO_FILE" {!s32i, !cir.ptr<!s8i>, !cir.ptr<!s8i>, !cir.ptr<!s8i>, !cir.ptr<!s8i>, !cir.ptr<!s8i>, !cir.ptr<!s8i>, !cir.ptr<!s8i>, !cir.ptr<!s8i>, !cir.ptr<!s8i>, !cir.ptr<!s8i>, !cir.ptr<!s8i>, !cir.ptr<!ty__IO_marker>, !cir.ptr<!cir.record<struct "_IO_FILE">>, !s32i, !s32i, !s64i, !u16i, !s8i, !cir.array<!s8i x 1>, !cir.ptr<!void>, !s64i, !cir.ptr<!ty__IO_codecvt>, !cir.ptr<!ty__IO_wide_data>, !cir.ptr<!cir.record<struct "_IO_FILE">>, !cir.ptr<!void>, !u64i, !s32i, !cir.array<!s8i x 20>} #cir.record.decl.ast>
module @"/workspaces/juliet-c/testcases/CWE617_Reachable_Assertion/CWE617_Reachable_Assertion__fscanf_21.c" attributes {cir.lang = #cir.lang<c>, cir.sob = #cir.signed_overflow_behavior<undefined>, cir.triple = "x86_64-unknown-linux-gnu", cir.type_size_info = #cir.type_size_info<char = 8, int = 32, size_t = 64>, cir.uwtable = #cir.uwtable<async>, dlti.dl_spec = #dlti.dl_spec<!llvm.ptr<270> = dense<32> : vector<4xi64>, i64 = dense<64> : vector<2xi64>, !llvm.ptr<272> = dense<64> : vector<4xi64>, !llvm.ptr<271> = dense<32> : vector<4xi64>, f80 = dense<128> : vector<2xi64>, i128 = dense<128> : vector<2xi64>, i16 = dense<16> : vector<2xi64>, i8 = dense<8> : vector<2xi64>, i1 = dense<8> : vector<2xi64>, !llvm.ptr = dense<64> : vector<4xi64>, f128 = dense<128> : vector<2xi64>, f16 = dense<16> : vector<2xi64>, f64 = dense<64> : vector<2xi64>, i32 = dense<32> : vector<2xi64>, "dlti.stack_alignment" = 128 : i64, "dlti.endianness" = "little", "dlti.mangling_mode" = "e">} {
  cir.global "private" internal dsolocal @badStatic = #cir.int<0> : !s32i {alignment = 4 : i64} loc(#loc109)
  cir.func private @__isoc99_fscanf(!cir.ptr<!ty__IO_FILE>, !cir.ptr<!s8i>, ...) -> !s32i loc(#loc110)
  cir.global "private" external @stdin : !cir.ptr<!ty__IO_FILE> {alignment = 8 : i64} loc(#loc111)
  cir.global "private" constant cir_private dsolocal @".str.3" = #cir.const_array<"%d\00" : !cir.array<!s8i x 3>> : !cir.array<!s8i x 3> {alignment = 1 : i64} loc(#loc7)
  cir.func internal private @badSource(%arg0: !s32i loc(fused[#loc10, #loc11])) -> !s32i extra(#fn_attr) {
    %0 = cir.alloca !s32i, !cir.ptr<!s32i>, ["data", init] {alignment = 4 : i64} loc(#loc113)
    %1 = cir.alloca !s32i, !cir.ptr<!s32i>, ["__retval"] {alignment = 4 : i64} loc(#loc9)
    cir.store %arg0, %0 : !s32i, !cir.ptr<!s32i> loc(#loc12)
    cir.scope {
      %4 = cir.get_global @badStatic : !cir.ptr<!s32i> loc(#loc109)
      %5 = cir.load %4 : !cir.ptr<!s32i>, !s32i loc(#loc15)
      %6 = cir.cast(int_to_bool, %5 : !s32i), !cir.bool loc(#loc15)
      cir.if %6 {
        %7 = cir.get_global @__isoc99_fscanf : !cir.ptr<!cir.func<(!cir.ptr<!ty__IO_FILE>, !cir.ptr<!s8i>, ...) -> !s32i>> loc(#loc17)
        %8 = cir.get_global @stdin : !cir.ptr<!cir.ptr<!ty__IO_FILE>> loc(#loc111)
        %9 = cir.load %8 : !cir.ptr<!cir.ptr<!ty__IO_FILE>>, !cir.ptr<!ty__IO_FILE> loc(#loc18)
        %10 = cir.get_global @".str.3" : !cir.ptr<!cir.array<!s8i x 3>> loc(#loc7)
        %11 = cir.cast(array_to_ptrdecay, %10 : !cir.ptr<!cir.array<!s8i x 3>>), !cir.ptr<!s8i> loc(#loc7)
        %12 = cir.call @__isoc99_fscanf(%9, %11, %0) : (!cir.ptr<!ty__IO_FILE>, !cir.ptr<!s8i>, !cir.ptr<!s32i>) -> !s32i loc(#loc17)
      } loc(#loc115)
    } loc(#loc114)
    %2 = cir.load %0 : !cir.ptr<!s32i>, !s32i loc(#loc19)
    cir.store %2, %1 : !s32i, !cir.ptr<!s32i> loc(#loc116)
    %3 = cir.load %1 : !cir.ptr<!s32i>, !s32i loc(#loc116)
    cir.return %3 : !s32i loc(#loc116)
  } loc(#loc112)
  cir.func private @__assert_fail(!cir.ptr<!s8i>, !cir.ptr<!s8i>, !u32i, !cir.ptr<!s8i>) extra(#fn_attr1) loc(#loc117)
  cir.global "private" constant cir_private dsolocal @".str" = #cir.const_array<"data > ASSERT_VALUE\00" : !cir.array<!s8i x 20>> : !cir.array<!s8i x 20> {alignment = 1 : i64} loc(#loc23)
  cir.global "private" constant cir_private dsolocal @".str.1" = #cir.const_array<"CWE617_Reachable_Assertion__fscanf_21.c\00" : !cir.array<!s8i x 40>> : !cir.array<!s8i x 40> {alignment = 1 : i64} loc(#loc23)
  cir.global "private" constant cir_private dsolocal @".str.2" = #cir.const_array<"void CWE617_Reachable_Assertion__fscanf_21_bad()\00" : !cir.array<!s8i x 49>> : !cir.array<!s8i x 49> {alignment = 1 : i64} loc(#loc23)
  cir.func no_proto @CWE617_Reachable_Assertion__fscanf_21_bad() extra(#fn_attr) {
    %0 = cir.alloca !s32i, !cir.ptr<!s32i>, ["data"] {alignment = 4 : i64} loc(#loc119)
    %1 = cir.const #cir.int<1> : !s32i loc(#loc28)
    %2 = cir.unary(minus, %1) nsw : !s32i, !s32i loc(#loc29)
    cir.store %2, %0 : !s32i, !cir.ptr<!s32i> loc(#loc120)
    %3 = cir.const #cir.int<1> : !s32i loc(#loc31)
    %4 = cir.get_global @badStatic : !cir.ptr<!s32i> loc(#loc109)
    cir.store %3, %4 : !s32i, !cir.ptr<!s32i> loc(#loc121)
    %5 = cir.load %0 : !cir.ptr<!s32i>, !s32i loc(#loc33)
    %6 = cir.call @badSource(%5) : (!s32i) -> !s32i loc(#loc34)
    cir.store %6, %0 : !s32i, !cir.ptr<!s32i> loc(#loc122)
    %7 = cir.const #cir.int<4> : !u64i loc(#loc23)
    cir.scope {
      cir.scope {
        %8 = cir.load %0 : !cir.ptr<!s32i>, !s32i loc(#loc23)
        %9 = cir.const #cir.int<5> : !s32i loc(#loc23)
        %10 = cir.cmp(gt, %8, %9) : !s32i, !cir.bool loc(#loc23)
        cir.if %10 {
        } else {
          %11 = cir.get_global @".str" : !cir.ptr<!cir.array<!s8i x 20>> loc(#loc23)
          %12 = cir.cast(array_to_ptrdecay, %11 : !cir.ptr<!cir.array<!s8i x 20>>), !cir.ptr<!s8i> loc(#loc23)
          %13 = cir.get_global @".str.1" : !cir.ptr<!cir.array<!s8i x 40>> loc(#loc23)
          %14 = cir.cast(array_to_ptrdecay, %13 : !cir.ptr<!cir.array<!s8i x 40>>), !cir.ptr<!s8i> loc(#loc23)
          %15 = cir.const #cir.int<46> : !s32i loc(#loc23)
          %16 = cir.cast(integral, %15 : !s32i), !u32i loc(#loc23)
          %17 = cir.get_global @".str.2" : !cir.ptr<!cir.array<!s8i x 49>> loc(#loc23)
          %18 = cir.cast(array_to_ptrdecay, %17 : !cir.ptr<!cir.array<!s8i x 49>>), !cir.ptr<!s8i> loc(#loc23)
          cir.call @__assert_fail(%12, %14, %16, %18) : (!cir.ptr<!s8i>, !cir.ptr<!s8i>, !u32i, !cir.ptr<!s8i>) -> () extra(#fn_attr1) loc(#loc23)
        } loc(#loc23)
      } loc(#loc23)
    } loc(#loc23)
    cir.return loc(#loc25)
  } loc(#loc118)
  cir.func no_proto @CWE617_Reachable_Assertion__fscanf_21_good() extra(#fn_attr) {
    %0 = cir.get_global @goodG2B1 : !cir.ptr<!cir.func<()>> loc(#loc124)
    cir.call %0() : (!cir.ptr<!cir.func<()>>) -> () loc(#loc39)
    %1 = cir.get_global @goodG2B2 : !cir.ptr<!cir.func<()>> loc(#loc125)
    cir.call %1() : (!cir.ptr<!cir.func<()>>) -> () loc(#loc41)
    cir.return loc(#loc38)
  } loc(#loc123)
  cir.global "private" internal dsolocal @goodG2B1Static = #cir.int<0> : !s32i {alignment = 4 : i64} loc(#loc126)
  cir.func private @printLine(!cir.ptr<!s8i>) loc(#loc127)
  cir.global "private" constant cir_private dsolocal @".str.5" = #cir.const_array<"Benign, fixed string\00" : !cir.array<!s8i x 21>> : !cir.array<!s8i x 21> {alignment = 1 : i64} loc(#loc47)
  cir.func internal private @goodG2B1Source(%arg0: !s32i loc(fused[#loc50, #loc51])) -> !s32i extra(#fn_attr) {
    %0 = cir.alloca !s32i, !cir.ptr<!s32i>, ["data", init] {alignment = 4 : i64} loc(#loc129)
    %1 = cir.alloca !s32i, !cir.ptr<!s32i>, ["__retval"] {alignment = 4 : i64} loc(#loc49)
    cir.store %arg0, %0 : !s32i, !cir.ptr<!s32i> loc(#loc52)
    cir.scope {
      %4 = cir.get_global @goodG2B1Static : !cir.ptr<!s32i> loc(#loc126)
      %5 = cir.load %4 : !cir.ptr<!s32i>, !s32i loc(#loc55)
      %6 = cir.cast(int_to_bool, %5 : !s32i), !cir.bool loc(#loc55)
      cir.if %6 {
        %7 = cir.get_global @".str.5" : !cir.ptr<!cir.array<!s8i x 21>> loc(#loc47)
        %8 = cir.cast(array_to_ptrdecay, %7 : !cir.ptr<!cir.array<!s8i x 21>>), !cir.ptr<!s8i> loc(#loc47)
        cir.call @printLine(%8) : (!cir.ptr<!s8i>) -> () loc(#loc59)
      } else {
        %7 = cir.const #cir.int<5> : !s32i loc(#loc60)
        %8 = cir.const #cir.int<1> : !s32i loc(#loc61)
        %9 = cir.binop(add, %7, %8) nsw : !s32i loc(#loc60)
        cir.store %9, %0 : !s32i, !cir.ptr<!s32i> loc(#loc132)
      } loc(#loc131)
    } loc(#loc130)
    %2 = cir.load %0 : !cir.ptr<!s32i>, !s32i loc(#loc63)
    cir.store %2, %1 : !s32i, !cir.ptr<!s32i> loc(#loc133)
    %3 = cir.load %1 : !cir.ptr<!s32i>, !s32i loc(#loc133)
    cir.return %3 : !s32i loc(#loc133)
  } loc(#loc128)
  cir.global "private" constant cir_private dsolocal @".str.4" = #cir.const_array<"void goodG2B1()\00" : !cir.array<!s8i x 16>> : !cir.array<!s8i x 16> {alignment = 1 : i64} loc(#loc65)
  cir.func no_proto internal private @goodG2B1() extra(#fn_attr) {
    %0 = cir.alloca !s32i, !cir.ptr<!s32i>, ["data"] {alignment = 4 : i64} loc(#loc135)
    %1 = cir.const #cir.int<1> : !s32i loc(#loc70)
    %2 = cir.unary(minus, %1) nsw : !s32i, !s32i loc(#loc71)
    cir.store %2, %0 : !s32i, !cir.ptr<!s32i> loc(#loc136)
    %3 = cir.const #cir.int<0> : !s32i loc(#loc73)
    %4 = cir.get_global @goodG2B1Static : !cir.ptr<!s32i> loc(#loc126)
    cir.store %3, %4 : !s32i, !cir.ptr<!s32i> loc(#loc137)
    %5 = cir.load %0 : !cir.ptr<!s32i>, !s32i loc(#loc75)
    %6 = cir.call @goodG2B1Source(%5) : (!s32i) -> !s32i loc(#loc76)
    cir.store %6, %0 : !s32i, !cir.ptr<!s32i> loc(#loc138)
    %7 = cir.const #cir.int<4> : !u64i loc(#loc65)
    cir.scope {
      cir.scope {
        %8 = cir.load %0 : !cir.ptr<!s32i>, !s32i loc(#loc65)
        %9 = cir.const #cir.int<5> : !s32i loc(#loc65)
        %10 = cir.cmp(gt, %8, %9) : !s32i, !cir.bool loc(#loc65)
        cir.if %10 {
        } else {
          %11 = cir.get_global @".str" : !cir.ptr<!cir.array<!s8i x 20>> loc(#loc65)
          %12 = cir.cast(array_to_ptrdecay, %11 : !cir.ptr<!cir.array<!s8i x 20>>), !cir.ptr<!s8i> loc(#loc65)
          %13 = cir.get_global @".str.1" : !cir.ptr<!cir.array<!s8i x 40>> loc(#loc65)
          %14 = cir.cast(array_to_ptrdecay, %13 : !cir.ptr<!cir.array<!s8i x 40>>), !cir.ptr<!s8i> loc(#loc65)
          %15 = cir.const #cir.int<81> : !s32i loc(#loc65)
          %16 = cir.cast(integral, %15 : !s32i), !u32i loc(#loc65)
          %17 = cir.get_global @".str.4" : !cir.ptr<!cir.array<!s8i x 16>> loc(#loc65)
          %18 = cir.cast(array_to_ptrdecay, %17 : !cir.ptr<!cir.array<!s8i x 16>>), !cir.ptr<!s8i> loc(#loc65)
          cir.call @__assert_fail(%12, %14, %16, %18) : (!cir.ptr<!s8i>, !cir.ptr<!s8i>, !u32i, !cir.ptr<!s8i>) -> () extra(#fn_attr1) loc(#loc65)
        } loc(#loc65)
      } loc(#loc65)
    } loc(#loc65)
    cir.return loc(#loc67)
  } loc(#loc134)
  cir.global "private" internal dsolocal @goodG2B2Static = #cir.int<0> : !s32i {alignment = 4 : i64} loc(#loc139)
  cir.func internal private @goodG2B2Source(%arg0: !s32i loc(fused[#loc83, #loc84])) -> !s32i extra(#fn_attr) {
    %0 = cir.alloca !s32i, !cir.ptr<!s32i>, ["data", init] {alignment = 4 : i64} loc(#loc141)
    %1 = cir.alloca !s32i, !cir.ptr<!s32i>, ["__retval"] {alignment = 4 : i64} loc(#loc82)
    cir.store %arg0, %0 : !s32i, !cir.ptr<!s32i> loc(#loc85)
    cir.scope {
      %4 = cir.get_global @goodG2B2Static : !cir.ptr<!s32i> loc(#loc139)
      %5 = cir.load %4 : !cir.ptr<!s32i>, !s32i loc(#loc88)
      %6 = cir.cast(int_to_bool, %5 : !s32i), !cir.bool loc(#loc88)
      cir.if %6 {
        %7 = cir.const #cir.int<5> : !s32i loc(#loc90)
        %8 = cir.const #cir.int<1> : !s32i loc(#loc91)
        %9 = cir.binop(add, %7, %8) nsw : !s32i loc(#loc90)
        cir.store %9, %0 : !s32i, !cir.ptr<!s32i> loc(#loc144)
      } loc(#loc143)
    } loc(#loc142)
    %2 = cir.load %0 : !cir.ptr<!s32i>, !s32i loc(#loc93)
    cir.store %2, %1 : !s32i, !cir.ptr<!s32i> loc(#loc145)
    %3 = cir.load %1 : !cir.ptr<!s32i>, !s32i loc(#loc145)
    cir.return %3 : !s32i loc(#loc145)
  } loc(#loc140)
  cir.global "private" constant cir_private dsolocal @".str.6" = #cir.const_array<"void goodG2B2()\00" : !cir.array<!s8i x 16>> : !cir.array<!s8i x 16> {alignment = 1 : i64} loc(#loc95)
  cir.func no_proto internal private @goodG2B2() extra(#fn_attr) {
    %0 = cir.alloca !s32i, !cir.ptr<!s32i>, ["data"] {alignment = 4 : i64} loc(#loc147)
    %1 = cir.const #cir.int<1> : !s32i loc(#loc100)
    %2 = cir.unary(minus, %1) nsw : !s32i, !s32i loc(#loc101)
    cir.store %2, %0 : !s32i, !cir.ptr<!s32i> loc(#loc148)
    %3 = cir.const #cir.int<1> : !s32i loc(#loc103)
    %4 = cir.get_global @goodG2B2Static : !cir.ptr<!s32i> loc(#loc139)
    cir.store %3, %4 : !s32i, !cir.ptr<!s32i> loc(#loc149)
    %5 = cir.load %0 : !cir.ptr<!s32i>, !s32i loc(#loc105)
    %6 = cir.call @goodG2B2Source(%5) : (!s32i) -> !s32i loc(#loc106)
    cir.store %6, %0 : !s32i, !cir.ptr<!s32i> loc(#loc150)
    %7 = cir.const #cir.int<4> : !u64i loc(#loc95)
    cir.scope {
      cir.scope {
        %8 = cir.load %0 : !cir.ptr<!s32i>, !s32i loc(#loc95)
        %9 = cir.const #cir.int<5> : !s32i loc(#loc95)
        %10 = cir.cmp(gt, %8, %9) : !s32i, !cir.bool loc(#loc95)
        cir.if %10 {
        } else {
          %11 = cir.get_global @".str" : !cir.ptr<!cir.array<!s8i x 20>> loc(#loc95)
          %12 = cir.cast(array_to_ptrdecay, %11 : !cir.ptr<!cir.array<!s8i x 20>>), !cir.ptr<!s8i> loc(#loc95)
          %13 = cir.get_global @".str.1" : !cir.ptr<!cir.array<!s8i x 40>> loc(#loc95)
          %14 = cir.cast(array_to_ptrdecay, %13 : !cir.ptr<!cir.array<!s8i x 40>>), !cir.ptr<!s8i> loc(#loc95)
          %15 = cir.const #cir.int<103> : !s32i loc(#loc95)
          %16 = cir.cast(integral, %15 : !s32i), !u32i loc(#loc95)
          %17 = cir.get_global @".str.6" : !cir.ptr<!cir.array<!s8i x 16>> loc(#loc95)
          %18 = cir.cast(array_to_ptrdecay, %17 : !cir.ptr<!cir.array<!s8i x 16>>), !cir.ptr<!s8i> loc(#loc95)
          cir.call @__assert_fail(%12, %14, %16, %18) : (!cir.ptr<!s8i>, !cir.ptr<!s8i>, !u32i, !cir.ptr<!s8i>) -> () extra(#fn_attr1) loc(#loc95)
        } loc(#loc95)
      } loc(#loc95)
    } loc(#loc95)
    cir.return loc(#loc97)
  } loc(#loc146)
} loc(#loc)
#loc = loc("/workspaces/juliet-c/testcases/CWE617_Reachable_Assertion/CWE617_Reachable_Assertion__fscanf_21.c":0:0)
#loc1 = loc("CWE617_Reachable_Assertion__fscanf_21.c":26:1)
#loc2 = loc("CWE617_Reachable_Assertion__fscanf_21.c":26:24)
#loc3 = loc("/usr/include/stdio.h":463:1)
#loc4 = loc("/usr/include/stdio.h":465:33)
#loc5 = loc("/usr/include/stdio.h":149:1)
#loc6 = loc("/usr/include/stdio.h":149:14)
#loc7 = loc("CWE617_Reachable_Assertion__fscanf_21.c":33:23)
#loc8 = loc("CWE617_Reachable_Assertion__fscanf_21.c":28:1)
#loc9 = loc("CWE617_Reachable_Assertion__fscanf_21.c":36:1)
#loc12 = loc("CWE617_Reachable_Assertion__fscanf_21.c":29:1)
#loc13 = loc("CWE617_Reachable_Assertion__fscanf_21.c":30:5)
#loc14 = loc("CWE617_Reachable_Assertion__fscanf_21.c":34:5)
#loc15 = loc("CWE617_Reachable_Assertion__fscanf_21.c":30:8)
#loc16 = loc("CWE617_Reachable_Assertion__fscanf_21.c":31:5)
#loc17 = loc("CWE617_Reachable_Assertion__fscanf_21.c":33:9)
#loc18 = loc("CWE617_Reachable_Assertion__fscanf_21.c":33:16)
#loc19 = loc("CWE617_Reachable_Assertion__fscanf_21.c":35:12)
#loc20 = loc("CWE617_Reachable_Assertion__fscanf_21.c":35:5)
#loc21 = loc("/usr/include/assert.h":69:1)
#loc22 = loc("/usr/include/assert.h":71:43)
#loc23 = loc("CWE617_Reachable_Assertion__fscanf_21.c":46:5)
#loc24 = loc("CWE617_Reachable_Assertion__fscanf_21.c":38:1)
#loc25 = loc("CWE617_Reachable_Assertion__fscanf_21.c":47:1)
#loc26 = loc("CWE617_Reachable_Assertion__fscanf_21.c":40:5)
#loc27 = loc("CWE617_Reachable_Assertion__fscanf_21.c":40:9)
#loc28 = loc("CWE617_Reachable_Assertion__fscanf_21.c":42:13)
#loc29 = loc("CWE617_Reachable_Assertion__fscanf_21.c":42:12)
#loc30 = loc("CWE617_Reachable_Assertion__fscanf_21.c":42:5)
#loc31 = loc("CWE617_Reachable_Assertion__fscanf_21.c":43:17)
#loc32 = loc("CWE617_Reachable_Assertion__fscanf_21.c":43:5)
#loc33 = loc("CWE617_Reachable_Assertion__fscanf_21.c":44:22)
#loc34 = loc("CWE617_Reachable_Assertion__fscanf_21.c":44:12)
#loc35 = loc("CWE617_Reachable_Assertion__fscanf_21.c":44:5)
#loc36 = loc("CWE617_Reachable_Assertion__fscanf_21.c":44:26)
#loc37 = loc("CWE617_Reachable_Assertion__fscanf_21.c":106:1)
#loc38 = loc("CWE617_Reachable_Assertion__fscanf_21.c":110:1)
#loc39 = loc("CWE617_Reachable_Assertion__fscanf_21.c":108:5)
#loc40 = loc("CWE617_Reachable_Assertion__fscanf_21.c":108:14)
#loc41 = loc("CWE617_Reachable_Assertion__fscanf_21.c":109:5)
#loc42 = loc("CWE617_Reachable_Assertion__fscanf_21.c":109:14)
#loc43 = loc("CWE617_Reachable_Assertion__fscanf_21.c":54:1)
#loc44 = loc("CWE617_Reachable_Assertion__fscanf_21.c":54:29)
#loc45 = loc("../../testcasesupport/std_testcase_io.h":14:1)
#loc46 = loc("../../testcasesupport/std_testcase_io.h":14:33)
#loc47 = loc("CWE617_Reachable_Assertion__fscanf_21.c":63:19)
#loc48 = loc("CWE617_Reachable_Assertion__fscanf_21.c":58:1)
#loc49 = loc("CWE617_Reachable_Assertion__fscanf_21.c":71:1)
#loc52 = loc("CWE617_Reachable_Assertion__fscanf_21.c":59:1)
#loc53 = loc("CWE617_Reachable_Assertion__fscanf_21.c":60:5)
#loc54 = loc("CWE617_Reachable_Assertion__fscanf_21.c":69:5)
#loc55 = loc("CWE617_Reachable_Assertion__fscanf_21.c":60:8)
#loc56 = loc("CWE617_Reachable_Assertion__fscanf_21.c":61:5)
#loc57 = loc("CWE617_Reachable_Assertion__fscanf_21.c":64:5)
#loc58 = loc("CWE617_Reachable_Assertion__fscanf_21.c":66:5)
#loc59 = loc("CWE617_Reachable_Assertion__fscanf_21.c":63:9)
#loc60 = loc("CWE617_Reachable_Assertion__fscanf_21.c":68:16)
#loc61 = loc("CWE617_Reachable_Assertion__fscanf_21.c":68:29)
#loc62 = loc("CWE617_Reachable_Assertion__fscanf_21.c":68:9)
#loc63 = loc("CWE617_Reachable_Assertion__fscanf_21.c":70:12)
#loc64 = loc("CWE617_Reachable_Assertion__fscanf_21.c":70:5)
#loc65 = loc("CWE617_Reachable_Assertion__fscanf_21.c":81:5)
#loc66 = loc("CWE617_Reachable_Assertion__fscanf_21.c":73:1)
#loc67 = loc("CWE617_Reachable_Assertion__fscanf_21.c":82:1)
#loc68 = loc("CWE617_Reachable_Assertion__fscanf_21.c":75:5)
#loc69 = loc("CWE617_Reachable_Assertion__fscanf_21.c":75:9)
#loc70 = loc("CWE617_Reachable_Assertion__fscanf_21.c":77:13)
#loc71 = loc("CWE617_Reachable_Assertion__fscanf_21.c":77:12)
#loc72 = loc("CWE617_Reachable_Assertion__fscanf_21.c":77:5)
#loc73 = loc("CWE617_Reachable_Assertion__fscanf_21.c":78:22)
#loc74 = loc("CWE617_Reachable_Assertion__fscanf_21.c":78:5)
#loc75 = loc("CWE617_Reachable_Assertion__fscanf_21.c":79:27)
#loc76 = loc("CWE617_Reachable_Assertion__fscanf_21.c":79:12)
#loc77 = loc("CWE617_Reachable_Assertion__fscanf_21.c":79:5)
#loc78 = loc("CWE617_Reachable_Assertion__fscanf_21.c":79:31)
#loc79 = loc("CWE617_Reachable_Assertion__fscanf_21.c":55:1)
#loc80 = loc("CWE617_Reachable_Assertion__fscanf_21.c":55:29)
#loc81 = loc("CWE617_Reachable_Assertion__fscanf_21.c":85:1)
#loc82 = loc("CWE617_Reachable_Assertion__fscanf_21.c":93:1)
#loc85 = loc("CWE617_Reachable_Assertion__fscanf_21.c":86:1)
#loc86 = loc("CWE617_Reachable_Assertion__fscanf_21.c":87:5)
#loc87 = loc("CWE617_Reachable_Assertion__fscanf_21.c":91:5)
#loc88 = loc("CWE617_Reachable_Assertion__fscanf_21.c":87:8)
#loc89 = loc("CWE617_Reachable_Assertion__fscanf_21.c":88:5)
#loc90 = loc("CWE617_Reachable_Assertion__fscanf_21.c":90:16)
#loc91 = loc("CWE617_Reachable_Assertion__fscanf_21.c":90:29)
#loc92 = loc("CWE617_Reachable_Assertion__fscanf_21.c":90:9)
#loc93 = loc("CWE617_Reachable_Assertion__fscanf_21.c":92:12)
#loc94 = loc("CWE617_Reachable_Assertion__fscanf_21.c":92:5)
#loc95 = loc("CWE617_Reachable_Assertion__fscanf_21.c":103:5)
#loc96 = loc("CWE617_Reachable_Assertion__fscanf_21.c":95:1)
#loc97 = loc("CWE617_Reachable_Assertion__fscanf_21.c":104:1)
#loc98 = loc("CWE617_Reachable_Assertion__fscanf_21.c":97:5)
#loc99 = loc("CWE617_Reachable_Assertion__fscanf_21.c":97:9)
#loc100 = loc("CWE617_Reachable_Assertion__fscanf_21.c":99:13)
#loc101 = loc("CWE617_Reachable_Assertion__fscanf_21.c":99:12)
#loc102 = loc("CWE617_Reachable_Assertion__fscanf_21.c":99:5)
#loc103 = loc("CWE617_Reachable_Assertion__fscanf_21.c":100:22)
#loc104 = loc("CWE617_Reachable_Assertion__fscanf_21.c":100:5)
#loc105 = loc("CWE617_Reachable_Assertion__fscanf_21.c":101:27)
#loc106 = loc("CWE617_Reachable_Assertion__fscanf_21.c":101:12)
#loc107 = loc("CWE617_Reachable_Assertion__fscanf_21.c":101:5)
#loc108 = loc("CWE617_Reachable_Assertion__fscanf_21.c":101:31)
#loc109 = loc(fused[#loc1, #loc2])
#loc110 = loc(fused[#loc3, #loc4])
#loc111 = loc(fused[#loc5, #loc6])
#loc112 = loc(fused[#loc8, #loc9])
#loc114 = loc(fused[#loc13, #loc14])
#loc115 = loc(fused[#loc16, #loc14])
#loc116 = loc(fused[#loc20, #loc19])
#loc117 = loc(fused[#loc21, #loc22])
#loc118 = loc(fused[#loc24, #loc25])
#loc119 = loc(fused[#loc26, #loc27])
#loc120 = loc(fused[#loc30, #loc28])
#loc121 = loc(fused[#loc32, #loc31])
#loc122 = loc(fused[#loc35, #loc36])
#loc123 = loc(fused[#loc37, #loc38])
#loc124 = loc(fused[#loc39, #loc40])
#loc125 = loc(fused[#loc41, #loc42])
#loc126 = loc(fused[#loc43, #loc44])
#loc127 = loc(fused[#loc45, #loc46])
#loc128 = loc(fused[#loc48, #loc49])
#loc130 = loc(fused[#loc53, #loc54])
#loc131 = loc(fused[#loc56, #loc57, #loc58, #loc54])
#loc132 = loc(fused[#loc62, #loc61])
#loc133 = loc(fused[#loc64, #loc63])
#loc134 = loc(fused[#loc66, #loc67])
#loc135 = loc(fused[#loc68, #loc69])
#loc136 = loc(fused[#loc72, #loc70])
#loc137 = loc(fused[#loc74, #loc73])
#loc138 = loc(fused[#loc77, #loc78])
#loc139 = loc(fused[#loc79, #loc80])
#loc140 = loc(fused[#loc81, #loc82])
#loc142 = loc(fused[#loc86, #loc87])
#loc143 = loc(fused[#loc89, #loc87])
#loc144 = loc(fused[#loc92, #loc91])
#loc145 = loc(fused[#loc94, #loc93])
#loc146 = loc(fused[#loc96, #loc97])
#loc147 = loc(fused[#loc98, #loc99])
#loc148 = loc(fused[#loc102, #loc100])
#loc149 = loc(fused[#loc104, #loc103])
#loc150 = loc(fused[#loc107, #loc108])
