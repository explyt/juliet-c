!s32i = !cir.int<s, 32>
!s64i = !cir.int<s, 64>
!s8i = !cir.int<s, 8>
#false = #cir.bool<false> : !cir.bool
#fn_attr = #cir<extra({inline = #cir.inline<no>, nothrow = #cir.nothrow, optnone = #cir.optnone, uwtable = #cir.uwtable<async>})>
#fn_attr1 = #cir<extra({nothrow = #cir.nothrow})>
#true = #cir.bool<true> : !cir.bool
module @"/workspaces/juliet-c/testcases/CWE190_Integer_Overflow/s03/CWE190_Integer_Overflow__int_max_square_16.c" attributes {cir.lang = #cir.lang<c>, cir.sob = #cir.signed_overflow_behavior<undefined>, cir.triple = "x86_64-unknown-linux-gnu", cir.type_size_info = #cir.type_size_info<char = 8, int = 32, size_t = 64>, cir.uwtable = #cir.uwtable<async>, dlti.dl_spec = #dlti.dl_spec<i32 = dense<32> : vector<2xi64>, i16 = dense<16> : vector<2xi64>, i8 = dense<8> : vector<2xi64>, i1 = dense<8> : vector<2xi64>, f64 = dense<64> : vector<2xi64>, f128 = dense<128> : vector<2xi64>, f16 = dense<16> : vector<2xi64>, i64 = dense<64> : vector<2xi64>, i128 = dense<128> : vector<2xi64>, !llvm.ptr<272> = dense<64> : vector<4xi64>, !llvm.ptr<271> = dense<32> : vector<4xi64>, !llvm.ptr = dense<64> : vector<4xi64>, !llvm.ptr<270> = dense<32> : vector<4xi64>, f80 = dense<128> : vector<2xi64>, "dlti.endianness" = "little", "dlti.mangling_mode" = "e", "dlti.stack_alignment" = 128 : i64>} {
  cir.func private @printIntLine(!s32i) loc(#loc100)
  cir.func no_proto @CWE190_Integer_Overflow__int_max_square_16_bad() extra(#fn_attr) {
    %0 = cir.alloca !s32i, !cir.ptr<!s32i>, ["data"] {alignment = 4 : i64} loc(#loc102)
    %1 = cir.const #cir.int<0> : !s32i loc(#loc7)
    cir.store %1, %0 : !s32i, !cir.ptr<!s32i> loc(#loc103)
    cir.scope {
      cir.while {
        %2 = cir.const #cir.int<1> : !s32i loc(#loc11)
        %3 = cir.cast(int_to_bool, %2 : !s32i), !cir.bool loc(#loc11)
        cir.condition(%3) loc(#loc11)
      } do {
        cir.scope {
          %2 = cir.const #cir.int<2147483647> : !s32i loc(#loc13)
          cir.store %2, %0 : !s32i, !cir.ptr<!s32i> loc(#loc106)
          cir.break loc(#loc15)
        } loc(#loc105)
        cir.yield loc(#loc10)
      } loc(#loc104)
    } loc(#loc104)
    cir.scope {
      cir.while {
        %2 = cir.const #cir.int<1> : !s32i loc(#loc18)
        %3 = cir.cast(int_to_bool, %2 : !s32i), !cir.bool loc(#loc18)
        cir.condition(%3) loc(#loc18)
      } do {
        cir.scope {
          cir.scope {
            %2 = cir.alloca !s32i, !cir.ptr<!s32i>, ["result", init] {alignment = 4 : i64} loc(#loc110)
            %3 = cir.load %0 : !cir.ptr<!s32i>, !s32i loc(#loc24)
            %4 = cir.load %0 : !cir.ptr<!s32i>, !s32i loc(#loc23)
            %5 = cir.binop(mul, %3, %4) nsw : !s32i loc(#loc24)
            cir.store %5, %2 : !s32i, !cir.ptr<!s32i> loc(#loc110)
            %6 = cir.load %2 : !cir.ptr<!s32i>, !s32i loc(#loc25)
            cir.call @printIntLine(%6) : (!s32i) -> () loc(#loc26)
          } loc(#loc109)
          cir.break loc(#loc27)
        } loc(#loc108)
        cir.yield loc(#loc17)
      } loc(#loc107)
    } loc(#loc107)
    cir.return loc(#loc4)
  } loc(#loc101)
  cir.func no_proto @CWE190_Integer_Overflow__int_max_square_16_good() extra(#fn_attr) {
    %0 = cir.get_global @goodB2G : !cir.ptr<!cir.func<()>> loc(#loc112)
    cir.call %0() : (!cir.ptr<!cir.func<()>>) -> () loc(#loc30)
    %1 = cir.get_global @goodG2B : !cir.ptr<!cir.func<()>> loc(#loc113)
    cir.call %1() : (!cir.ptr<!cir.func<()>>) -> () loc(#loc32)
    cir.return loc(#loc29)
  } loc(#loc111)
  cir.func private @sqrt(!cir.double) -> !cir.double extra(#fn_attr1) loc(#loc34)
  cir.func private @printLine(!cir.ptr<!s8i>) loc(#loc114)
  cir.global "private" constant cir_private dsolocal @".str" = #cir.const_array<"data value is too large to perform arithmetic safely.\00" : !cir.array<!s8i x 54>> : !cir.array<!s8i x 54> {alignment = 1 : i64} loc(#loc37)
  cir.func no_proto internal private @goodB2G() extra(#fn_attr) {
    %0 = cir.alloca !s32i, !cir.ptr<!s32i>, ["data"] {alignment = 4 : i64} loc(#loc116)
    %1 = cir.const #cir.int<0> : !s32i loc(#loc42)
    cir.store %1, %0 : !s32i, !cir.ptr<!s32i> loc(#loc117)
    cir.scope {
      cir.while {
        %2 = cir.const #cir.int<1> : !s32i loc(#loc46)
        %3 = cir.cast(int_to_bool, %2 : !s32i), !cir.bool loc(#loc46)
        cir.condition(%3) loc(#loc46)
      } do {
        cir.scope {
          %2 = cir.const #cir.int<2147483647> : !s32i loc(#loc48)
          cir.store %2, %0 : !s32i, !cir.ptr<!s32i> loc(#loc120)
          cir.break loc(#loc50)
        } loc(#loc119)
        cir.yield loc(#loc45)
      } loc(#loc118)
    } loc(#loc118)
    cir.scope {
      cir.while {
        %2 = cir.const #cir.int<1> : !s32i loc(#loc53)
        %3 = cir.cast(int_to_bool, %2 : !s32i), !cir.bool loc(#loc53)
        cir.condition(%3) loc(#loc53)
      } do {
        cir.scope {
          cir.scope {
            %2 = cir.load %0 : !cir.ptr<!s32i>, !s32i loc(#loc57)
            %3 = cir.const #cir.int<2147483647> : !s32i loc(#loc58)
            %4 = cir.unary(minus, %3) nsw : !s32i, !s32i loc(#loc58)
            %5 = cir.const #cir.int<1> : !s32i loc(#loc58)
            %6 = cir.binop(sub, %4, %5) nsw : !s32i loc(#loc58)
            %7 = cir.cmp(gt, %2, %6) : !s32i, !cir.bool loc(#loc124)
            %8 = cir.ternary(%7, true {
              %9 = cir.load %0 : !cir.ptr<!s32i>, !s32i loc(#loc60)
              %10 = cir.abs %9 poison : !s32i loc(#loc61)
              %11 = cir.cast(integral, %10 : !s32i), !s64i loc(#loc61)
              %12 = cir.get_global @sqrt : !cir.ptr<!cir.func<(!cir.double) -> !cir.double>> loc(#loc62)
              %13 = cir.const #cir.int<2147483647> : !s32i loc(#loc63)
              %14 = cir.cast(int_to_float, %13 : !s32i), !cir.double loc(#loc63)
              %15 = cir.call @sqrt(%14) : (!cir.double) -> !cir.double extra(#fn_attr1) loc(#loc62)
              %16 = cir.cast(float_to_int, %15 : !cir.double), !s64i loc(#loc62)
              %17 = cir.cmp(lt, %11, %16) : !s64i, !cir.bool loc(#loc125)
              %18 = cir.ternary(%17, true {
                %19 = cir.const #true loc(#loc59)
                cir.yield %19 : !cir.bool loc(#loc59)
              }, false {
                %19 = cir.const #false loc(#loc59)
                cir.yield %19 : !cir.bool loc(#loc59)
              }) : (!cir.bool) -> !cir.bool loc(#loc59)
              cir.yield %18 : !cir.bool loc(#loc59)
            }, false {
              %9 = cir.const #false loc(#loc59)
              cir.yield %9 : !cir.bool loc(#loc59)
            }) : (!cir.bool) -> !cir.bool loc(#loc59)
            cir.if %8 {
              %9 = cir.alloca !s32i, !cir.ptr<!s32i>, ["result", init] {alignment = 4 : i64} loc(#loc127)
              %10 = cir.load %0 : !cir.ptr<!s32i>, !s32i loc(#loc70)
              %11 = cir.load %0 : !cir.ptr<!s32i>, !s32i loc(#loc69)
              %12 = cir.binop(mul, %10, %11) nsw : !s32i loc(#loc70)
              cir.store %12, %9 : !s32i, !cir.ptr<!s32i> loc(#loc127)
              %13 = cir.load %9 : !cir.ptr<!s32i>, !s32i loc(#loc71)
              cir.call @printIntLine(%13) : (!s32i) -> () loc(#loc72)
            } else {
              %9 = cir.get_global @".str" : !cir.ptr<!cir.array<!s8i x 54>> loc(#loc37)
              %10 = cir.cast(array_to_ptrdecay, %9 : !cir.ptr<!cir.array<!s8i x 54>>), !cir.ptr<!s8i> loc(#loc37)
              cir.call @printLine(%10) : (!cir.ptr<!s8i>) -> () loc(#loc73)
            } loc(#loc126)
          } loc(#loc123)
          cir.break loc(#loc74)
        } loc(#loc122)
        cir.yield loc(#loc52)
      } loc(#loc121)
    } loc(#loc121)
    cir.return loc(#loc39)
  } loc(#loc115)
  cir.func no_proto internal private @goodG2B() extra(#fn_attr) {
    %0 = cir.alloca !s32i, !cir.ptr<!s32i>, ["data"] {alignment = 4 : i64} loc(#loc129)
    %1 = cir.const #cir.int<0> : !s32i loc(#loc79)
    cir.store %1, %0 : !s32i, !cir.ptr<!s32i> loc(#loc130)
    cir.scope {
      cir.while {
        %2 = cir.const #cir.int<1> : !s32i loc(#loc83)
        %3 = cir.cast(int_to_bool, %2 : !s32i), !cir.bool loc(#loc83)
        cir.condition(%3) loc(#loc83)
      } do {
        cir.scope {
          %2 = cir.const #cir.int<2> : !s32i loc(#loc85)
          cir.store %2, %0 : !s32i, !cir.ptr<!s32i> loc(#loc133)
          cir.break loc(#loc87)
        } loc(#loc132)
        cir.yield loc(#loc82)
      } loc(#loc131)
    } loc(#loc131)
    cir.scope {
      cir.while {
        %2 = cir.const #cir.int<1> : !s32i loc(#loc90)
        %3 = cir.cast(int_to_bool, %2 : !s32i), !cir.bool loc(#loc90)
        cir.condition(%3) loc(#loc90)
      } do {
        cir.scope {
          cir.scope {
            %2 = cir.alloca !s32i, !cir.ptr<!s32i>, ["result", init] {alignment = 4 : i64} loc(#loc137)
            %3 = cir.load %0 : !cir.ptr<!s32i>, !s32i loc(#loc96)
            %4 = cir.load %0 : !cir.ptr<!s32i>, !s32i loc(#loc95)
            %5 = cir.binop(mul, %3, %4) nsw : !s32i loc(#loc96)
            cir.store %5, %2 : !s32i, !cir.ptr<!s32i> loc(#loc137)
            %6 = cir.load %2 : !cir.ptr<!s32i>, !s32i loc(#loc97)
            cir.call @printIntLine(%6) : (!s32i) -> () loc(#loc98)
          } loc(#loc136)
          cir.break loc(#loc99)
        } loc(#loc135)
        cir.yield loc(#loc89)
      } loc(#loc134)
    } loc(#loc134)
    cir.return loc(#loc76)
  } loc(#loc128)
} loc(#loc)
#loc = loc("/workspaces/juliet-c/testcases/CWE190_Integer_Overflow/s03/CWE190_Integer_Overflow__int_max_square_16.c":0:0)
#loc1 = loc("../../../testcasesupport/std_testcase_io.h":18:1)
#loc2 = loc("../../../testcasesupport/std_testcase_io.h":18:33)
#loc3 = loc("CWE190_Integer_Overflow__int_max_square_16.c":24:1)
#loc4 = loc("CWE190_Integer_Overflow__int_max_square_16.c":44:1)
#loc5 = loc("CWE190_Integer_Overflow__int_max_square_16.c":26:5)
#loc6 = loc("CWE190_Integer_Overflow__int_max_square_16.c":26:9)
#loc7 = loc("CWE190_Integer_Overflow__int_max_square_16.c":28:12)
#loc8 = loc("CWE190_Integer_Overflow__int_max_square_16.c":28:5)
#loc9 = loc("CWE190_Integer_Overflow__int_max_square_16.c":29:5)
#loc10 = loc("CWE190_Integer_Overflow__int_max_square_16.c":34:5)
#loc11 = loc("CWE190_Integer_Overflow__int_max_square_16.c":29:11)
#loc12 = loc("CWE190_Integer_Overflow__int_max_square_16.c":30:5)
#loc13 = loc("CWE190_Integer_Overflow__int_max_square_16.c":32:16)
#loc14 = loc("CWE190_Integer_Overflow__int_max_square_16.c":32:9)
#loc15 = loc("CWE190_Integer_Overflow__int_max_square_16.c":33:9)
#loc16 = loc("CWE190_Integer_Overflow__int_max_square_16.c":35:5)
#loc17 = loc("CWE190_Integer_Overflow__int_max_square_16.c":43:5)
#loc18 = loc("CWE190_Integer_Overflow__int_max_square_16.c":35:11)
#loc19 = loc("CWE190_Integer_Overflow__int_max_square_16.c":36:5)
#loc20 = loc("CWE190_Integer_Overflow__int_max_square_16.c":37:9)
#loc21 = loc("CWE190_Integer_Overflow__int_max_square_16.c":41:9)
#loc22 = loc("CWE190_Integer_Overflow__int_max_square_16.c":39:13)
#loc23 = loc("CWE190_Integer_Overflow__int_max_square_16.c":39:33)
#loc24 = loc("CWE190_Integer_Overflow__int_max_square_16.c":39:26)
#loc25 = loc("CWE190_Integer_Overflow__int_max_square_16.c":40:26)
#loc26 = loc("CWE190_Integer_Overflow__int_max_square_16.c":40:13)
#loc27 = loc("CWE190_Integer_Overflow__int_max_square_16.c":42:9)
#loc28 = loc("CWE190_Integer_Overflow__int_max_square_16.c":101:1)
#loc29 = loc("CWE190_Integer_Overflow__int_max_square_16.c":105:1)
#loc30 = loc("CWE190_Integer_Overflow__int_max_square_16.c":103:5)
#loc31 = loc("CWE190_Integer_Overflow__int_max_square_16.c":103:13)
#loc32 = loc("CWE190_Integer_Overflow__int_max_square_16.c":104:5)
#loc33 = loc("CWE190_Integer_Overflow__int_max_square_16.c":104:13)
#loc34 = loc("/usr/include/x86_64-linux-gnu/bits/mathcalls.h":143:1)
#loc35 = loc("../../../testcasesupport/std_testcase_io.h":14:1)
#loc36 = loc("../../../testcasesupport/std_testcase_io.h":14:33)
#loc37 = loc("CWE190_Integer_Overflow__int_max_square_16.c":72:23)
#loc38 = loc("CWE190_Integer_Overflow__int_max_square_16.c":51:1)
#loc39 = loc("CWE190_Integer_Overflow__int_max_square_16.c":76:1)
#loc40 = loc("CWE190_Integer_Overflow__int_max_square_16.c":53:5)
#loc41 = loc("CWE190_Integer_Overflow__int_max_square_16.c":53:9)
#loc42 = loc("CWE190_Integer_Overflow__int_max_square_16.c":55:12)
#loc43 = loc("CWE190_Integer_Overflow__int_max_square_16.c":55:5)
#loc44 = loc("CWE190_Integer_Overflow__int_max_square_16.c":56:5)
#loc45 = loc("CWE190_Integer_Overflow__int_max_square_16.c":61:5)
#loc46 = loc("CWE190_Integer_Overflow__int_max_square_16.c":56:11)
#loc47 = loc("CWE190_Integer_Overflow__int_max_square_16.c":57:5)
#loc48 = loc("CWE190_Integer_Overflow__int_max_square_16.c":59:16)
#loc49 = loc("CWE190_Integer_Overflow__int_max_square_16.c":59:9)
#loc50 = loc("CWE190_Integer_Overflow__int_max_square_16.c":60:9)
#loc51 = loc("CWE190_Integer_Overflow__int_max_square_16.c":62:5)
#loc52 = loc("CWE190_Integer_Overflow__int_max_square_16.c":75:5)
#loc53 = loc("CWE190_Integer_Overflow__int_max_square_16.c":62:11)
#loc54 = loc("CWE190_Integer_Overflow__int_max_square_16.c":63:5)
#loc55 = loc("CWE190_Integer_Overflow__int_max_square_16.c":65:9)
#loc56 = loc("CWE190_Integer_Overflow__int_max_square_16.c":73:9)
#loc57 = loc("CWE190_Integer_Overflow__int_max_square_16.c":65:13)
#loc58 = loc("CWE190_Integer_Overflow__int_max_square_16.c":65:20)
#loc59 = loc("CWE190_Integer_Overflow__int_max_square_16.c":65:28)
#loc60 = loc("CWE190_Integer_Overflow__int_max_square_16.c":65:35)
#loc61 = loc("CWE190_Integer_Overflow__int_max_square_16.c":65:31)
#loc62 = loc("CWE190_Integer_Overflow__int_max_square_16.c":65:49)
#loc63 = loc("CWE190_Integer_Overflow__int_max_square_16.c":65:62)
#loc64 = loc("CWE190_Integer_Overflow__int_max_square_16.c":65:69)
#loc65 = loc("CWE190_Integer_Overflow__int_max_square_16.c":66:9)
#loc66 = loc("CWE190_Integer_Overflow__int_max_square_16.c":69:9)
#loc67 = loc("CWE190_Integer_Overflow__int_max_square_16.c":71:9)
#loc68 = loc("CWE190_Integer_Overflow__int_max_square_16.c":67:13)
#loc69 = loc("CWE190_Integer_Overflow__int_max_square_16.c":67:33)
#loc70 = loc("CWE190_Integer_Overflow__int_max_square_16.c":67:26)
#loc71 = loc("CWE190_Integer_Overflow__int_max_square_16.c":68:26)
#loc72 = loc("CWE190_Integer_Overflow__int_max_square_16.c":68:13)
#loc73 = loc("CWE190_Integer_Overflow__int_max_square_16.c":72:13)
#loc74 = loc("CWE190_Integer_Overflow__int_max_square_16.c":74:9)
#loc75 = loc("CWE190_Integer_Overflow__int_max_square_16.c":79:1)
#loc76 = loc("CWE190_Integer_Overflow__int_max_square_16.c":99:1)
#loc77 = loc("CWE190_Integer_Overflow__int_max_square_16.c":81:5)
#loc78 = loc("CWE190_Integer_Overflow__int_max_square_16.c":81:9)
#loc79 = loc("CWE190_Integer_Overflow__int_max_square_16.c":83:12)
#loc80 = loc("CWE190_Integer_Overflow__int_max_square_16.c":83:5)
#loc81 = loc("CWE190_Integer_Overflow__int_max_square_16.c":84:5)
#loc82 = loc("CWE190_Integer_Overflow__int_max_square_16.c":89:5)
#loc83 = loc("CWE190_Integer_Overflow__int_max_square_16.c":84:11)
#loc84 = loc("CWE190_Integer_Overflow__int_max_square_16.c":85:5)
#loc85 = loc("CWE190_Integer_Overflow__int_max_square_16.c":87:16)
#loc86 = loc("CWE190_Integer_Overflow__int_max_square_16.c":87:9)
#loc87 = loc("CWE190_Integer_Overflow__int_max_square_16.c":88:9)
#loc88 = loc("CWE190_Integer_Overflow__int_max_square_16.c":90:5)
#loc89 = loc("CWE190_Integer_Overflow__int_max_square_16.c":98:5)
#loc90 = loc("CWE190_Integer_Overflow__int_max_square_16.c":90:11)
#loc91 = loc("CWE190_Integer_Overflow__int_max_square_16.c":91:5)
#loc92 = loc("CWE190_Integer_Overflow__int_max_square_16.c":92:9)
#loc93 = loc("CWE190_Integer_Overflow__int_max_square_16.c":96:9)
#loc94 = loc("CWE190_Integer_Overflow__int_max_square_16.c":94:13)
#loc95 = loc("CWE190_Integer_Overflow__int_max_square_16.c":94:33)
#loc96 = loc("CWE190_Integer_Overflow__int_max_square_16.c":94:26)
#loc97 = loc("CWE190_Integer_Overflow__int_max_square_16.c":95:26)
#loc98 = loc("CWE190_Integer_Overflow__int_max_square_16.c":95:13)
#loc99 = loc("CWE190_Integer_Overflow__int_max_square_16.c":97:9)
#loc100 = loc(fused[#loc1, #loc2])
#loc101 = loc(fused[#loc3, #loc4])
#loc102 = loc(fused[#loc5, #loc6])
#loc103 = loc(fused[#loc8, #loc7])
#loc104 = loc(fused[#loc9, #loc10])
#loc105 = loc(fused[#loc12, #loc10])
#loc106 = loc(fused[#loc14, #loc13])
#loc107 = loc(fused[#loc16, #loc17])
#loc108 = loc(fused[#loc19, #loc17])
#loc109 = loc(fused[#loc20, #loc21])
#loc110 = loc(fused[#loc22, #loc23])
#loc111 = loc(fused[#loc28, #loc29])
#loc112 = loc(fused[#loc30, #loc31])
#loc113 = loc(fused[#loc32, #loc33])
#loc114 = loc(fused[#loc35, #loc36])
#loc115 = loc(fused[#loc38, #loc39])
#loc116 = loc(fused[#loc40, #loc41])
#loc117 = loc(fused[#loc43, #loc42])
#loc118 = loc(fused[#loc44, #loc45])
#loc119 = loc(fused[#loc47, #loc45])
#loc120 = loc(fused[#loc49, #loc48])
#loc121 = loc(fused[#loc51, #loc52])
#loc122 = loc(fused[#loc54, #loc52])
#loc123 = loc(fused[#loc55, #loc56])
#loc124 = loc(fused[#loc57, #loc58])
#loc125 = loc(fused[#loc61, #loc64])
#loc126 = loc(fused[#loc65, #loc66, #loc67, #loc56])
#loc127 = loc(fused[#loc68, #loc69])
#loc128 = loc(fused[#loc75, #loc76])
#loc129 = loc(fused[#loc77, #loc78])
#loc130 = loc(fused[#loc80, #loc79])
#loc131 = loc(fused[#loc81, #loc82])
#loc132 = loc(fused[#loc84, #loc82])
#loc133 = loc(fused[#loc86, #loc85])
#loc134 = loc(fused[#loc88, #loc89])
#loc135 = loc(fused[#loc91, #loc89])
#loc136 = loc(fused[#loc92, #loc93])
#loc137 = loc(fused[#loc94, #loc95])
