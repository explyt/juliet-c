!s32i = !cir.int<s, 32>
!s64i = !cir.int<s, 64>
!s8i = !cir.int<s, 8>
!ty__IO_codecvt = !cir.struct<struct "_IO_codecvt" incomplete>
!ty__IO_marker = !cir.struct<struct "_IO_marker" incomplete>
!ty__IO_wide_data = !cir.struct<struct "_IO_wide_data" incomplete>
!u16i = !cir.int<u, 16>
!u64i = !cir.int<u, 64>
!void = !cir.void
#false = #cir.bool<false> : !cir.bool
#fn_attr = #cir<extra({nothrow = #cir.nothrow})>
#fn_attr1 = #cir<extra({inline = #cir.inline<no>, nothrow = #cir.nothrow, optnone = #cir.optnone})>
#true = #cir.bool<true> : !cir.bool
!ty__IO_FILE = !cir.struct<struct "_IO_FILE" {!s32i, !cir.ptr<!s8i>, !cir.ptr<!s8i>, !cir.ptr<!s8i>, !cir.ptr<!s8i>, !cir.ptr<!s8i>, !cir.ptr<!s8i>, !cir.ptr<!s8i>, !cir.ptr<!s8i>, !cir.ptr<!s8i>, !cir.ptr<!s8i>, !cir.ptr<!s8i>, !cir.ptr<!ty__IO_marker>, !cir.ptr<!cir.struct<struct "_IO_FILE">>, !s32i, !s32i, !s64i, !u16i, !s8i, !cir.array<!s8i x 1>, !cir.ptr<!void>, !s64i, !cir.ptr<!ty__IO_codecvt>, !cir.ptr<!ty__IO_wide_data>, !cir.ptr<!cir.struct<struct "_IO_FILE">>, !cir.ptr<!void>, !u64i, !s32i, !cir.array<!s8i x 20>} #cir.record.decl.ast>
module @"/home/ladisgin/git_proj/test_projects/juliet-c/testcases/CWE78_OS_Command_Injection/s01/CWE78_OS_Command_Injection__char_console_execlp_08.c" attributes {cir.lang = #cir.lang<c>, cir.sob = #cir.signed_overflow_behavior<undefined>, cir.triple = "x86_64-unknown-linux-gnu", dlti.dl_spec = #dlti.dl_spec<#dlti.dl_entry<i16, dense<16> : vector<2xi64>>, #dlti.dl_entry<i32, dense<32> : vector<2xi64>>, #dlti.dl_entry<f64, dense<64> : vector<2xi64>>, #dlti.dl_entry<f16, dense<16> : vector<2xi64>>, #dlti.dl_entry<!llvm.ptr<270>, dense<32> : vector<4xi64>>, #dlti.dl_entry<f128, dense<128> : vector<2xi64>>, #dlti.dl_entry<!llvm.ptr<271>, dense<32> : vector<4xi64>>, #dlti.dl_entry<!llvm.ptr<272>, dense<64> : vector<4xi64>>, #dlti.dl_entry<i64, dense<64> : vector<2xi64>>, #dlti.dl_entry<i128, dense<128> : vector<2xi64>>, #dlti.dl_entry<f80, dense<128> : vector<2xi64>>, #dlti.dl_entry<!llvm.ptr, dense<64> : vector<4xi64>>, #dlti.dl_entry<i1, dense<8> : vector<2xi64>>, #dlti.dl_entry<i8, dense<8> : vector<2xi64>>, #dlti.dl_entry<"dlti.endianness", "little">, #dlti.dl_entry<"dlti.stack_alignment", 128 : i64>>, llvm.data_layout = "e-m:e-p270:32:32-p271:32:32-p272:64:64-i64:64-i128:128-f80:128-n8:16:32:64-S128"} {
  cir.func private  @strlen(!cir.ptr<!s8i>) -> !u64i extra(#fn_attr) loc(#loc149)
  cir.func private  @fgets(!cir.ptr<!s8i>, !s32i, !cir.ptr<!ty__IO_FILE>) -> !cir.ptr<!s8i> loc(#loc150)
  cir.global "private"  external @stdin : !cir.ptr<!ty__IO_FILE> {alignment = 8 : i64} loc(#loc151)
  cir.func private  @printLine(!cir.ptr<!s8i>) loc(#loc152)
  cir.global "private"  constant internal dsolocal @".str" = #cir.const_array<"fgets() failed\00" : !cir.array<!s8i x 15>> : !cir.array<!s8i x 15> {alignment = 1 : i64} loc(#loc9)
  cir.func private  @execlp(!cir.ptr<!s8i>, !cir.ptr<!s8i>, ...) -> !s32i extra(#fn_attr) loc(#loc153)
  cir.global "private"  constant internal dsolocal @".str1" = #cir.const_array<"sh\00" : !cir.array<!s8i x 3>> : !cir.array<!s8i x 3> {alignment = 1 : i64} loc(#loc12)
  cir.global "private"  constant internal dsolocal @".str2" = #cir.const_array<"-c\00" : !cir.array<!s8i x 3>> : !cir.array<!s8i x 3> {alignment = 1 : i64} loc(#loc13)
  cir.func no_proto  @CWE78_OS_Command_Injection__char_console_execlp_08_bad() extra(#fn_attr1) {
    %0 = cir.alloca !cir.ptr<!s8i>, !cir.ptr<!cir.ptr<!s8i>>, ["data"] {alignment = 8 : i64} loc(#loc155)
    %1 = cir.alloca !cir.array<!s8i x 100>, !cir.ptr<!cir.array<!s8i x 100>>, ["dataBuffer"] {alignment = 16 : i64} loc(#loc156)
    %2 = cir.const #cir.const_array<"ls " : !cir.array<!s8i x 3>, trailing_zeros> : !cir.array<!s8i x 100> loc(#loc156)
    cir.store %2, %1 : !cir.array<!s8i x 100>, !cir.ptr<!cir.array<!s8i x 100>> loc(#loc156)
    %3 = cir.cast(array_to_ptrdecay, %1 : !cir.ptr<!cir.array<!s8i x 100>>), !cir.ptr<!s8i> loc(#loc20)
    cir.store %3, %0 : !cir.ptr<!s8i>, !cir.ptr<!cir.ptr<!s8i>> loc(#loc157)
    cir.scope {
      %13 = cir.get_global @staticReturnsTrue : !cir.ptr<!cir.func<!s32i ()>> loc(#loc159)
      %14 = cir.call %13() : (!cir.ptr<!cir.func<!s32i ()>>) -> !s32i loc(#loc24)
      %15 = cir.cast(int_to_bool, %14 : !s32i), !cir.bool loc(#loc24)
      cir.if %15 {
        cir.scope {
          %16 = cir.alloca !u64i, !cir.ptr<!u64i>, ["dataLen", init] {alignment = 8 : i64} loc(#loc162)
          %17 = cir.get_global @strlen : !cir.ptr<!cir.func<!u64i (!cir.ptr<!s8i>)>> loc(#loc31)
          %18 = cir.load %0 : !cir.ptr<!cir.ptr<!s8i>>, !cir.ptr<!s8i> loc(#loc32)
          %19 = cir.call @strlen(%18) : (!cir.ptr<!s8i>) -> !u64i extra(#fn_attr) loc(#loc31)
          cir.store %19, %16 : !u64i, !cir.ptr<!u64i> loc(#loc162)
          cir.scope {
            %20 = cir.const #cir.int<100> : !s32i loc(#loc35)
            %21 = cir.cast(integral, %20 : !s32i), !u64i loc(#loc35)
            %22 = cir.load %16 : !cir.ptr<!u64i>, !u64i loc(#loc36)
            %23 = cir.binop(sub, %21, %22) : !u64i loc(#loc164)
            %24 = cir.const #cir.int<1> : !s32i loc(#loc37)
            %25 = cir.cast(integral, %24 : !s32i), !u64i loc(#loc37)
            %26 = cir.cmp(gt, %23, %25) : !u64i, !s32i loc(#loc165)
            %27 = cir.cast(int_to_bool, %26 : !s32i), !cir.bool loc(#loc38)
            cir.if %27 {
              cir.scope {
                %28 = cir.load %0 : !cir.ptr<!cir.ptr<!s8i>>, !cir.ptr<!s8i> loc(#loc42)
                %29 = cir.load %16 : !cir.ptr<!u64i>, !u64i loc(#loc43)
                %30 = cir.ptr_stride(%28 : !cir.ptr<!s8i>, %29 : !u64i), !cir.ptr<!s8i> loc(#loc44)
                %31 = cir.const #cir.int<100> : !s32i loc(#loc45)
                %32 = cir.cast(integral, %31 : !s32i), !u64i loc(#loc45)
                %33 = cir.load %16 : !cir.ptr<!u64i>, !u64i loc(#loc46)
                %34 = cir.binop(sub, %32, %33) : !u64i loc(#loc168)
                %35 = cir.cast(integral, %34 : !u64i), !s32i loc(#loc168)
                %36 = cir.get_global @stdin : !cir.ptr<!cir.ptr<!ty__IO_FILE>> loc(#loc151)
                %37 = cir.load %36 : !cir.ptr<!cir.ptr<!ty__IO_FILE>>, !cir.ptr<!ty__IO_FILE> loc(#loc47)
                %38 = cir.call @fgets(%30, %35, %37) : (!cir.ptr<!s8i>, !s32i, !cir.ptr<!ty__IO_FILE>) -> !cir.ptr<!s8i> loc(#loc48)
                %39 = cir.const #cir.ptr<null> : !cir.ptr<!void> loc(#loc49)
                %40 = cir.cast(bitcast, %39 : !cir.ptr<!void>), !cir.ptr<!s8i> loc(#loc49)
                %41 = cir.cmp(ne, %38, %40) : !cir.ptr<!s8i>, !s32i loc(#loc169)
                %42 = cir.cast(int_to_bool, %41 : !s32i), !cir.bool loc(#loc50)
                cir.if %42 {
                  %43 = cir.get_global @strlen : !cir.ptr<!cir.func<!u64i (!cir.ptr<!s8i>)>> loc(#loc54)
                  %44 = cir.load %0 : !cir.ptr<!cir.ptr<!s8i>>, !cir.ptr<!s8i> loc(#loc55)
                  %45 = cir.call @strlen(%44) : (!cir.ptr<!s8i>) -> !u64i extra(#fn_attr) loc(#loc54)
                  cir.store %45, %16 : !u64i, !cir.ptr<!u64i> loc(#loc171)
                  cir.scope {
                    %46 = cir.load %16 : !cir.ptr<!u64i>, !u64i loc(#loc60)
                    %47 = cir.const #cir.int<0> : !s32i loc(#loc61)
                    %48 = cir.cast(integral, %47 : !s32i), !u64i loc(#loc61)
                    %49 = cir.cmp(gt, %46, %48) : !u64i, !s32i loc(#loc173)
                    %50 = cir.cast(int_to_bool, %49 : !s32i), !cir.bool loc(#loc62)
                    %51 = cir.ternary(%50, true {
                      %52 = cir.load %0 : !cir.ptr<!cir.ptr<!s8i>>, !cir.ptr<!s8i> loc(#loc64)
                      %53 = cir.load %16 : !cir.ptr<!u64i>, !u64i loc(#loc65)
                      %54 = cir.const #cir.int<1> : !s32i loc(#loc66)
                      %55 = cir.cast(integral, %54 : !s32i), !u64i loc(#loc66)
                      %56 = cir.binop(sub, %53, %55) : !u64i loc(#loc174)
                      %57 = cir.ptr_stride(%52 : !cir.ptr<!s8i>, %56 : !u64i), !cir.ptr<!s8i> loc(#loc67)
                      %58 = cir.load %57 : !cir.ptr<!s8i>, !s8i loc(#loc64)
                      %59 = cir.cast(integral, %58 : !s8i), !s32i loc(#loc64)
                      %60 = cir.const #cir.int<10> : !s32i loc(#loc68)
                      %61 = cir.cmp(eq, %59, %60) : !s32i, !s32i loc(#loc175)
                      %62 = cir.cast(int_to_bool, %61 : !s32i), !cir.bool loc(#loc69)
                      %63 = cir.ternary(%62, true {
                        %64 = cir.const #true loc(#loc63)
                        cir.yield %64 : !cir.bool loc(#loc63)
                      }, false {
                        %64 = cir.const #false loc(#loc63)
                        cir.yield %64 : !cir.bool loc(#loc63)
                      }) : (!cir.bool) -> !cir.bool loc(#loc63)
                      cir.yield %63 : !cir.bool loc(#loc63)
                    }, false {
                      %52 = cir.const #false loc(#loc63)
                      cir.yield %52 : !cir.bool loc(#loc63)
                    }) : (!cir.bool) -> !cir.bool loc(#loc63)
                    cir.if %51 {
                      %52 = cir.const #cir.int<0> : !s32i loc(#loc71)
                      %53 = cir.cast(integral, %52 : !s32i), !s8i loc(#loc71)
                      %54 = cir.load %0 : !cir.ptr<!cir.ptr<!s8i>>, !cir.ptr<!s8i> loc(#loc72)
                      %55 = cir.load %16 : !cir.ptr<!u64i>, !u64i loc(#loc73)
                      %56 = cir.const #cir.int<1> : !s32i loc(#loc74)
                      %57 = cir.cast(integral, %56 : !s32i), !u64i loc(#loc74)
                      %58 = cir.binop(sub, %55, %57) : !u64i loc(#loc177)
                      %59 = cir.ptr_stride(%54 : !cir.ptr<!s8i>, %58 : !u64i), !cir.ptr<!s8i> loc(#loc75)
                      cir.store %53, %59 : !s8i, !cir.ptr<!s8i> loc(#loc178)
                    } loc(#loc176)
                  } loc(#loc172)
                } else {
                  %43 = cir.get_global @".str" : !cir.ptr<!cir.array<!s8i x 15>> loc(#loc9)
                  %44 = cir.cast(array_to_ptrdecay, %43 : !cir.ptr<!cir.array<!s8i x 15>>), !cir.ptr<!s8i> loc(#loc9)
                  cir.call @printLine(%44) : (!cir.ptr<!s8i>) -> () loc(#loc76)
                  %45 = cir.const #cir.int<0> : !s32i loc(#loc77)
                  %46 = cir.cast(integral, %45 : !s32i), !s8i loc(#loc77)
                  %47 = cir.load %0 : !cir.ptr<!cir.ptr<!s8i>>, !cir.ptr<!s8i> loc(#loc78)
                  %48 = cir.load %16 : !cir.ptr<!u64i>, !u64i loc(#loc79)
                  %49 = cir.ptr_stride(%47 : !cir.ptr<!s8i>, %48 : !u64i), !cir.ptr<!s8i> loc(#loc80)
                  cir.store %46, %49 : !s8i, !cir.ptr<!s8i> loc(#loc179)
                } loc(#loc170)
              } loc(#loc167)
            } loc(#loc166)
          } loc(#loc163)
        } loc(#loc161)
      } loc(#loc160)
    } loc(#loc158)
    %4 = cir.get_global @".str1" : !cir.ptr<!cir.array<!s8i x 3>> loc(#loc12)
    %5 = cir.cast(array_to_ptrdecay, %4 : !cir.ptr<!cir.array<!s8i x 3>>), !cir.ptr<!s8i> loc(#loc12)
    %6 = cir.get_global @".str1" : !cir.ptr<!cir.array<!s8i x 3>> loc(#loc81)
    %7 = cir.cast(array_to_ptrdecay, %6 : !cir.ptr<!cir.array<!s8i x 3>>), !cir.ptr<!s8i> loc(#loc81)
    %8 = cir.get_global @".str2" : !cir.ptr<!cir.array<!s8i x 3>> loc(#loc13)
    %9 = cir.cast(array_to_ptrdecay, %8 : !cir.ptr<!cir.array<!s8i x 3>>), !cir.ptr<!s8i> loc(#loc13)
    %10 = cir.load %0 : !cir.ptr<!cir.ptr<!s8i>>, !cir.ptr<!s8i> loc(#loc82)
    %11 = cir.const #cir.ptr<null> : !cir.ptr<!void> loc(#loc83)
    %12 = cir.call @execlp(%5, %7, %9, %10, %11) : (!cir.ptr<!s8i>, !cir.ptr<!s8i>, !cir.ptr<!s8i>, !cir.ptr<!s8i>, !cir.ptr<!void>) -> !s32i extra(#fn_attr) loc(#loc84)
    cir.return loc(#loc15)
  } loc(#loc154)
  cir.func no_proto  @CWE78_OS_Command_Injection__char_console_execlp_08_good() extra(#fn_attr1) {
    %0 = cir.get_global @goodG2B1 : !cir.ptr<!cir.func<!void ()>> loc(#loc181)
    cir.call %0() : (!cir.ptr<!cir.func<!void ()>>) -> () loc(#loc87)
    %1 = cir.get_global @goodG2B2 : !cir.ptr<!cir.func<!void ()>> loc(#loc182)
    cir.call %1() : (!cir.ptr<!cir.func<!void ()>>) -> () loc(#loc89)
    cir.return loc(#loc86)
  } loc(#loc180)
  cir.func no_proto internal private  @staticReturnsTrue() -> !s32i extra(#fn_attr1) {
    %0 = cir.alloca !s32i, !cir.ptr<!s32i>, ["__retval"] {alignment = 4 : i64} loc(#loc92)
    %1 = cir.const #cir.int<1> : !s32i loc(#loc93)
    cir.store %1, %0 : !s32i, !cir.ptr<!s32i> loc(#loc184)
    %2 = cir.load %0 : !cir.ptr<!s32i>, !s32i loc(#loc184)
    cir.return %2 : !s32i loc(#loc184)
  } loc(#loc183)
  cir.global "private"  constant internal dsolocal @".str3" = #cir.const_array<"Benign, fixed string\00" : !cir.array<!s8i x 21>> : !cir.array<!s8i x 21> {alignment = 1 : i64} loc(#loc95)
  cir.func private  @strcat(!cir.ptr<!s8i>, !cir.ptr<!s8i>) -> !cir.ptr<!s8i> extra(#fn_attr) loc(#loc185)
  cir.global "private"  constant internal dsolocal @".str4" = #cir.const_array<"*.*\00" : !cir.array<!s8i x 4>> : !cir.array<!s8i x 4> {alignment = 1 : i64} loc(#loc98)
  cir.func no_proto internal private  @goodG2B1() extra(#fn_attr1) {
    %0 = cir.alloca !cir.ptr<!s8i>, !cir.ptr<!cir.ptr<!s8i>>, ["data"] {alignment = 8 : i64} loc(#loc187)
    %1 = cir.alloca !cir.array<!s8i x 100>, !cir.ptr<!cir.array<!s8i x 100>>, ["dataBuffer"] {alignment = 16 : i64} loc(#loc188)
    %2 = cir.const #cir.const_array<"ls " : !cir.array<!s8i x 3>, trailing_zeros> : !cir.array<!s8i x 100> loc(#loc188)
    cir.store %2, %1 : !cir.array<!s8i x 100>, !cir.ptr<!cir.array<!s8i x 100>> loc(#loc188)
    %3 = cir.cast(array_to_ptrdecay, %1 : !cir.ptr<!cir.array<!s8i x 100>>), !cir.ptr<!s8i> loc(#loc105)
    cir.store %3, %0 : !cir.ptr<!s8i>, !cir.ptr<!cir.ptr<!s8i>> loc(#loc189)
    cir.scope {
      %13 = cir.get_global @staticReturnsFalse : !cir.ptr<!cir.func<!s32i ()>> loc(#loc191)
      %14 = cir.call %13() : (!cir.ptr<!cir.func<!s32i ()>>) -> !s32i loc(#loc109)
      %15 = cir.cast(int_to_bool, %14 : !s32i), !cir.bool loc(#loc109)
      cir.if %15 {
        %16 = cir.get_global @".str3" : !cir.ptr<!cir.array<!s8i x 21>> loc(#loc95)
        %17 = cir.cast(array_to_ptrdecay, %16 : !cir.ptr<!cir.array<!s8i x 21>>), !cir.ptr<!s8i> loc(#loc95)
        cir.call @printLine(%17) : (!cir.ptr<!s8i>) -> () loc(#loc114)
      } else {
        %16 = cir.get_global @strcat : !cir.ptr<!cir.func<!cir.ptr<!s8i> (!cir.ptr<!s8i>, !cir.ptr<!s8i>)>> loc(#loc115)
        %17 = cir.load %0 : !cir.ptr<!cir.ptr<!s8i>>, !cir.ptr<!s8i> loc(#loc116)
        %18 = cir.get_global @".str4" : !cir.ptr<!cir.array<!s8i x 4>> loc(#loc98)
        %19 = cir.cast(array_to_ptrdecay, %18 : !cir.ptr<!cir.array<!s8i x 4>>), !cir.ptr<!s8i> loc(#loc98)
        %20 = cir.call @strcat(%17, %19) : (!cir.ptr<!s8i>, !cir.ptr<!s8i>) -> !cir.ptr<!s8i> extra(#fn_attr) loc(#loc115)
      } loc(#loc192)
    } loc(#loc190)
    %4 = cir.get_global @".str1" : !cir.ptr<!cir.array<!s8i x 3>> loc(#loc117)
    %5 = cir.cast(array_to_ptrdecay, %4 : !cir.ptr<!cir.array<!s8i x 3>>), !cir.ptr<!s8i> loc(#loc117)
    %6 = cir.get_global @".str1" : !cir.ptr<!cir.array<!s8i x 3>> loc(#loc118)
    %7 = cir.cast(array_to_ptrdecay, %6 : !cir.ptr<!cir.array<!s8i x 3>>), !cir.ptr<!s8i> loc(#loc118)
    %8 = cir.get_global @".str2" : !cir.ptr<!cir.array<!s8i x 3>> loc(#loc119)
    %9 = cir.cast(array_to_ptrdecay, %8 : !cir.ptr<!cir.array<!s8i x 3>>), !cir.ptr<!s8i> loc(#loc119)
    %10 = cir.load %0 : !cir.ptr<!cir.ptr<!s8i>>, !cir.ptr<!s8i> loc(#loc120)
    %11 = cir.const #cir.ptr<null> : !cir.ptr<!void> loc(#loc121)
    %12 = cir.call @execlp(%5, %7, %9, %10, %11) : (!cir.ptr<!s8i>, !cir.ptr<!s8i>, !cir.ptr<!s8i>, !cir.ptr<!s8i>, !cir.ptr<!void>) -> !s32i extra(#fn_attr) loc(#loc122)
    cir.return loc(#loc100)
  } loc(#loc186)
  cir.func no_proto internal private  @staticReturnsFalse() -> !s32i extra(#fn_attr1) {
    %0 = cir.alloca !s32i, !cir.ptr<!s32i>, ["__retval"] {alignment = 4 : i64} loc(#loc124)
    %1 = cir.const #cir.int<0> : !s32i loc(#loc125)
    cir.store %1, %0 : !s32i, !cir.ptr<!s32i> loc(#loc194)
    %2 = cir.load %0 : !cir.ptr<!s32i>, !s32i loc(#loc194)
    cir.return %2 : !s32i loc(#loc194)
  } loc(#loc193)
  cir.func no_proto internal private  @goodG2B2() extra(#fn_attr1) {
    %0 = cir.alloca !cir.ptr<!s8i>, !cir.ptr<!cir.ptr<!s8i>>, ["data"] {alignment = 8 : i64} loc(#loc196)
    %1 = cir.alloca !cir.array<!s8i x 100>, !cir.ptr<!cir.array<!s8i x 100>>, ["dataBuffer"] {alignment = 16 : i64} loc(#loc197)
    %2 = cir.const #cir.const_array<"ls " : !cir.array<!s8i x 3>, trailing_zeros> : !cir.array<!s8i x 100> loc(#loc197)
    cir.store %2, %1 : !cir.array<!s8i x 100>, !cir.ptr<!cir.array<!s8i x 100>> loc(#loc197)
    %3 = cir.cast(array_to_ptrdecay, %1 : !cir.ptr<!cir.array<!s8i x 100>>), !cir.ptr<!s8i> loc(#loc133)
    cir.store %3, %0 : !cir.ptr<!s8i>, !cir.ptr<!cir.ptr<!s8i>> loc(#loc198)
    cir.scope {
      %13 = cir.get_global @staticReturnsTrue : !cir.ptr<!cir.func<!s32i ()>> loc(#loc200)
      %14 = cir.call @staticReturnsTrue() : () -> !s32i loc(#loc137)
      %15 = cir.cast(int_to_bool, %14 : !s32i), !cir.bool loc(#loc137)
      cir.if %15 {
        %16 = cir.get_global @strcat : !cir.ptr<!cir.func<!cir.ptr<!s8i> (!cir.ptr<!s8i>, !cir.ptr<!s8i>)>> loc(#loc140)
        %17 = cir.load %0 : !cir.ptr<!cir.ptr<!s8i>>, !cir.ptr<!s8i> loc(#loc141)
        %18 = cir.get_global @".str4" : !cir.ptr<!cir.array<!s8i x 4>> loc(#loc142)
        %19 = cir.cast(array_to_ptrdecay, %18 : !cir.ptr<!cir.array<!s8i x 4>>), !cir.ptr<!s8i> loc(#loc142)
        %20 = cir.call @strcat(%17, %19) : (!cir.ptr<!s8i>, !cir.ptr<!s8i>) -> !cir.ptr<!s8i> extra(#fn_attr) loc(#loc140)
      } loc(#loc201)
    } loc(#loc199)
    %4 = cir.get_global @".str1" : !cir.ptr<!cir.array<!s8i x 3>> loc(#loc143)
    %5 = cir.cast(array_to_ptrdecay, %4 : !cir.ptr<!cir.array<!s8i x 3>>), !cir.ptr<!s8i> loc(#loc143)
    %6 = cir.get_global @".str1" : !cir.ptr<!cir.array<!s8i x 3>> loc(#loc144)
    %7 = cir.cast(array_to_ptrdecay, %6 : !cir.ptr<!cir.array<!s8i x 3>>), !cir.ptr<!s8i> loc(#loc144)
    %8 = cir.get_global @".str2" : !cir.ptr<!cir.array<!s8i x 3>> loc(#loc145)
    %9 = cir.cast(array_to_ptrdecay, %8 : !cir.ptr<!cir.array<!s8i x 3>>), !cir.ptr<!s8i> loc(#loc145)
    %10 = cir.load %0 : !cir.ptr<!cir.ptr<!s8i>>, !cir.ptr<!s8i> loc(#loc146)
    %11 = cir.const #cir.ptr<null> : !cir.ptr<!void> loc(#loc147)
    %12 = cir.call @execlp(%5, %7, %9, %10, %11) : (!cir.ptr<!s8i>, !cir.ptr<!s8i>, !cir.ptr<!s8i>, !cir.ptr<!s8i>, !cir.ptr<!void>) -> !s32i extra(#fn_attr) loc(#loc148)
    cir.return loc(#loc128)
  } loc(#loc195)
} loc(#loc)
#loc = loc("/home/ladisgin/git_proj/test_projects/juliet-c/testcases/CWE78_OS_Command_Injection/s01/CWE78_OS_Command_Injection__char_console_execlp_08.c":0:0)
#loc1 = loc("/usr/include/string.h":407:1)
#loc2 = loc("/usr/include/string.h":408:33)
#loc3 = loc("/usr/include/stdio.h":654:1)
#loc4 = loc("/usr/include/stdio.h":655:59)
#loc5 = loc("/usr/include/stdio.h":149:1)
#loc6 = loc("/usr/include/stdio.h":149:14)
#loc7 = loc("../../../testcasesupport/std_testcase_io.h":14:1)
#loc8 = loc("../../../testcasesupport/std_testcase_io.h":14:33)
#loc9 = loc("CWE78_OS_Command_Injection__char_console_execlp_08.c":85:31)
#loc10 = loc("/usr/include/unistd.h":605:1)
#loc11 = loc("/usr/include/unistd.h":606:14)
#loc12 = loc("CWE78_OS_Command_Injection__char_console_execlp_08.c":95:12)
#loc13 = loc("CWE78_OS_Command_Injection__char_console_execlp_08.c":95:38)
#loc14 = loc("CWE78_OS_Command_Injection__char_console_execlp_08.c":59:1)
#loc15 = loc("CWE78_OS_Command_Injection__char_console_execlp_08.c":96:1)
#loc16 = loc("CWE78_OS_Command_Injection__char_console_execlp_08.c":61:5)
#loc17 = loc("CWE78_OS_Command_Injection__char_console_execlp_08.c":61:12)
#loc18 = loc("CWE78_OS_Command_Injection__char_console_execlp_08.c":62:5)
#loc19 = loc("CWE78_OS_Command_Injection__char_console_execlp_08.c":62:28)
#loc20 = loc("CWE78_OS_Command_Injection__char_console_execlp_08.c":63:12)
#loc21 = loc("CWE78_OS_Command_Injection__char_console_execlp_08.c":63:5)
#loc22 = loc("CWE78_OS_Command_Injection__char_console_execlp_08.c":64:5)
#loc23 = loc("CWE78_OS_Command_Injection__char_console_execlp_08.c":91:5)
#loc24 = loc("CWE78_OS_Command_Injection__char_console_execlp_08.c":64:8)
#loc25 = loc("CWE78_OS_Command_Injection__char_console_execlp_08.c":64:26)
#loc26 = loc("CWE78_OS_Command_Injection__char_console_execlp_08.c":65:5)
#loc27 = loc("CWE78_OS_Command_Injection__char_console_execlp_08.c":66:9)
#loc28 = loc("CWE78_OS_Command_Injection__char_console_execlp_08.c":90:9)
#loc29 = loc("CWE78_OS_Command_Injection__char_console_execlp_08.c":68:13)
#loc30 = loc("CWE78_OS_Command_Injection__char_console_execlp_08.c":68:41)
#loc31 = loc("CWE78_OS_Command_Injection__char_console_execlp_08.c":68:30)
#loc32 = loc("CWE78_OS_Command_Injection__char_console_execlp_08.c":68:37)
#loc33 = loc("CWE78_OS_Command_Injection__char_console_execlp_08.c":70:13)
#loc34 = loc("CWE78_OS_Command_Injection__char_console_execlp_08.c":89:13)
#loc35 = loc("CWE78_OS_Command_Injection__char_console_execlp_08.c":70:17)
#loc36 = loc("CWE78_OS_Command_Injection__char_console_execlp_08.c":70:21)
#loc37 = loc("CWE78_OS_Command_Injection__char_console_execlp_08.c":70:31)
#loc38 = loc("CWE78_OS_Command_Injection__char_console_execlp_08.c":70:29)
#loc39 = loc("CWE78_OS_Command_Injection__char_console_execlp_08.c":71:13)
#loc40 = loc("CWE78_OS_Command_Injection__char_console_execlp_08.c":73:17)
#loc41 = loc("CWE78_OS_Command_Injection__char_console_execlp_08.c":88:17)
#loc42 = loc("CWE78_OS_Command_Injection__char_console_execlp_08.c":73:27)
#loc43 = loc("CWE78_OS_Command_Injection__char_console_execlp_08.c":73:32)
#loc44 = loc("CWE78_OS_Command_Injection__char_console_execlp_08.c":73:31)
#loc45 = loc("CWE78_OS_Command_Injection__char_console_execlp_08.c":73:47)
#loc46 = loc("CWE78_OS_Command_Injection__char_console_execlp_08.c":73:51)
#loc47 = loc("CWE78_OS_Command_Injection__char_console_execlp_08.c":73:61)
#loc48 = loc("CWE78_OS_Command_Injection__char_console_execlp_08.c":73:21)
#loc49 = loc("CWE78_OS_Command_Injection__char_console_execlp_08.c":73:71)
#loc50 = loc("CWE78_OS_Command_Injection__char_console_execlp_08.c":73:68)
#loc51 = loc("CWE78_OS_Command_Injection__char_console_execlp_08.c":74:17)
#loc52 = loc("CWE78_OS_Command_Injection__char_console_execlp_08.c":82:17)
#loc53 = loc("CWE78_OS_Command_Injection__char_console_execlp_08.c":84:17)
#loc54 = loc("CWE78_OS_Command_Injection__char_console_execlp_08.c":77:31)
#loc55 = loc("CWE78_OS_Command_Injection__char_console_execlp_08.c":77:38)
#loc56 = loc("CWE78_OS_Command_Injection__char_console_execlp_08.c":77:21)
#loc57 = loc("CWE78_OS_Command_Injection__char_console_execlp_08.c":77:42)
#loc58 = loc("CWE78_OS_Command_Injection__char_console_execlp_08.c":78:21)
#loc59 = loc("CWE78_OS_Command_Injection__char_console_execlp_08.c":81:21)
#loc60 = loc("CWE78_OS_Command_Injection__char_console_execlp_08.c":78:25)
#loc61 = loc("CWE78_OS_Command_Injection__char_console_execlp_08.c":78:35)
#loc62 = loc("CWE78_OS_Command_Injection__char_console_execlp_08.c":78:33)
#loc63 = loc("CWE78_OS_Command_Injection__char_console_execlp_08.c":78:37)
#loc64 = loc("CWE78_OS_Command_Injection__char_console_execlp_08.c":78:40)
#loc65 = loc("CWE78_OS_Command_Injection__char_console_execlp_08.c":78:45)
#loc66 = loc("CWE78_OS_Command_Injection__char_console_execlp_08.c":78:53)
#loc67 = loc("CWE78_OS_Command_Injection__char_console_execlp_08.c":78:54)
#loc68 = loc("CWE78_OS_Command_Injection__char_console_execlp_08.c":78:59)
#loc69 = loc("CWE78_OS_Command_Injection__char_console_execlp_08.c":78:56)
#loc70 = loc("CWE78_OS_Command_Injection__char_console_execlp_08.c":79:21)
#loc71 = loc("CWE78_OS_Command_Injection__char_console_execlp_08.c":80:43)
#loc72 = loc("CWE78_OS_Command_Injection__char_console_execlp_08.c":80:25)
#loc73 = loc("CWE78_OS_Command_Injection__char_console_execlp_08.c":80:30)
#loc74 = loc("CWE78_OS_Command_Injection__char_console_execlp_08.c":80:38)
#loc75 = loc("CWE78_OS_Command_Injection__char_console_execlp_08.c":80:39)
#loc76 = loc("CWE78_OS_Command_Injection__char_console_execlp_08.c":85:21)
#loc77 = loc("CWE78_OS_Command_Injection__char_console_execlp_08.c":87:37)
#loc78 = loc("CWE78_OS_Command_Injection__char_console_execlp_08.c":87:21)
#loc79 = loc("CWE78_OS_Command_Injection__char_console_execlp_08.c":87:26)
#loc80 = loc("CWE78_OS_Command_Injection__char_console_execlp_08.c":87:33)
#loc81 = loc("CWE78_OS_Command_Injection__char_console_execlp_08.c":95:25)
#loc82 = loc("CWE78_OS_Command_Injection__char_console_execlp_08.c":95:52)
#loc83 = loc("CWE78_OS_Command_Injection__char_console_execlp_08.c":95:66)
#loc84 = loc("CWE78_OS_Command_Injection__char_console_execlp_08.c":95:5)
#loc85 = loc("CWE78_OS_Command_Injection__char_console_execlp_08.c":141:1)
#loc86 = loc("CWE78_OS_Command_Injection__char_console_execlp_08.c":145:1)
#loc87 = loc("CWE78_OS_Command_Injection__char_console_execlp_08.c":143:5)
#loc88 = loc("CWE78_OS_Command_Injection__char_console_execlp_08.c":143:14)
#loc89 = loc("CWE78_OS_Command_Injection__char_console_execlp_08.c":144:5)
#loc90 = loc("CWE78_OS_Command_Injection__char_console_execlp_08.c":144:14)
#loc91 = loc("CWE78_OS_Command_Injection__char_console_execlp_08.c":47:1)
#loc92 = loc("CWE78_OS_Command_Injection__char_console_execlp_08.c":50:1)
#loc93 = loc("CWE78_OS_Command_Injection__char_console_execlp_08.c":49:12)
#loc94 = loc("CWE78_OS_Command_Injection__char_console_execlp_08.c":49:5)
#loc95 = loc("CWE78_OS_Command_Injection__char_console_execlp_08.c":111:19)
#loc96 = loc("/usr/include/string.h":149:1)
#loc97 = loc("/usr/include/string.h":150:14)
#loc98 = loc("CWE78_OS_Command_Injection__char_console_execlp_08.c":116:22)
#loc99 = loc("CWE78_OS_Command_Injection__char_console_execlp_08.c":103:1)
#loc100 = loc("CWE78_OS_Command_Injection__char_console_execlp_08.c":122:1)
#loc101 = loc("CWE78_OS_Command_Injection__char_console_execlp_08.c":105:5)
#loc102 = loc("CWE78_OS_Command_Injection__char_console_execlp_08.c":105:12)
#loc103 = loc("CWE78_OS_Command_Injection__char_console_execlp_08.c":106:5)
#loc104 = loc("CWE78_OS_Command_Injection__char_console_execlp_08.c":106:28)
#loc105 = loc("CWE78_OS_Command_Injection__char_console_execlp_08.c":107:12)
#loc106 = loc("CWE78_OS_Command_Injection__char_console_execlp_08.c":107:5)
#loc107 = loc("CWE78_OS_Command_Injection__char_console_execlp_08.c":108:5)
#loc108 = loc("CWE78_OS_Command_Injection__char_console_execlp_08.c":117:5)
#loc109 = loc("CWE78_OS_Command_Injection__char_console_execlp_08.c":108:8)
#loc110 = loc("CWE78_OS_Command_Injection__char_console_execlp_08.c":108:27)
#loc111 = loc("CWE78_OS_Command_Injection__char_console_execlp_08.c":109:5)
#loc112 = loc("CWE78_OS_Command_Injection__char_console_execlp_08.c":112:5)
#loc113 = loc("CWE78_OS_Command_Injection__char_console_execlp_08.c":114:5)
#loc114 = loc("CWE78_OS_Command_Injection__char_console_execlp_08.c":111:9)
#loc115 = loc("CWE78_OS_Command_Injection__char_console_execlp_08.c":116:9)
#loc116 = loc("CWE78_OS_Command_Injection__char_console_execlp_08.c":116:16)
#loc117 = loc("CWE78_OS_Command_Injection__char_console_execlp_08.c":121:12)
#loc118 = loc("CWE78_OS_Command_Injection__char_console_execlp_08.c":121:25)
#loc119 = loc("CWE78_OS_Command_Injection__char_console_execlp_08.c":121:38)
#loc120 = loc("CWE78_OS_Command_Injection__char_console_execlp_08.c":121:52)
#loc121 = loc("CWE78_OS_Command_Injection__char_console_execlp_08.c":121:66)
#loc122 = loc("CWE78_OS_Command_Injection__char_console_execlp_08.c":121:5)
#loc123 = loc("CWE78_OS_Command_Injection__char_console_execlp_08.c":52:1)
#loc124 = loc("CWE78_OS_Command_Injection__char_console_execlp_08.c":55:1)
#loc125 = loc("CWE78_OS_Command_Injection__char_console_execlp_08.c":54:12)
#loc126 = loc("CWE78_OS_Command_Injection__char_console_execlp_08.c":54:5)
#loc127 = loc("CWE78_OS_Command_Injection__char_console_execlp_08.c":125:1)
#loc128 = loc("CWE78_OS_Command_Injection__char_console_execlp_08.c":139:1)
#loc129 = loc("CWE78_OS_Command_Injection__char_console_execlp_08.c":127:5)
#loc130 = loc("CWE78_OS_Command_Injection__char_console_execlp_08.c":127:12)
#loc131 = loc("CWE78_OS_Command_Injection__char_console_execlp_08.c":128:5)
#loc132 = loc("CWE78_OS_Command_Injection__char_console_execlp_08.c":128:28)
#loc133 = loc("CWE78_OS_Command_Injection__char_console_execlp_08.c":129:12)
#loc134 = loc("CWE78_OS_Command_Injection__char_console_execlp_08.c":129:5)
#loc135 = loc("CWE78_OS_Command_Injection__char_console_execlp_08.c":130:5)
#loc136 = loc("CWE78_OS_Command_Injection__char_console_execlp_08.c":134:5)
#loc137 = loc("CWE78_OS_Command_Injection__char_console_execlp_08.c":130:8)
#loc138 = loc("CWE78_OS_Command_Injection__char_console_execlp_08.c":130:26)
#loc139 = loc("CWE78_OS_Command_Injection__char_console_execlp_08.c":131:5)
#loc140 = loc("CWE78_OS_Command_Injection__char_console_execlp_08.c":133:9)
#loc141 = loc("CWE78_OS_Command_Injection__char_console_execlp_08.c":133:16)
#loc142 = loc("CWE78_OS_Command_Injection__char_console_execlp_08.c":133:22)
#loc143 = loc("CWE78_OS_Command_Injection__char_console_execlp_08.c":138:12)
#loc144 = loc("CWE78_OS_Command_Injection__char_console_execlp_08.c":138:25)
#loc145 = loc("CWE78_OS_Command_Injection__char_console_execlp_08.c":138:38)
#loc146 = loc("CWE78_OS_Command_Injection__char_console_execlp_08.c":138:52)
#loc147 = loc("CWE78_OS_Command_Injection__char_console_execlp_08.c":138:66)
#loc148 = loc("CWE78_OS_Command_Injection__char_console_execlp_08.c":138:5)
#loc149 = loc(fused[#loc1, #loc2])
#loc150 = loc(fused[#loc3, #loc4])
#loc151 = loc(fused[#loc5, #loc6])
#loc152 = loc(fused[#loc7, #loc8])
#loc153 = loc(fused[#loc10, #loc11])
#loc154 = loc(fused[#loc14, #loc15])
#loc155 = loc(fused[#loc16, #loc17])
#loc156 = loc(fused[#loc18, #loc19])
#loc157 = loc(fused[#loc21, #loc20])
#loc158 = loc(fused[#loc22, #loc23])
#loc159 = loc(fused[#loc24, #loc25])
#loc160 = loc(fused[#loc26, #loc23])
#loc161 = loc(fused[#loc27, #loc28])
#loc162 = loc(fused[#loc29, #loc30])
#loc163 = loc(fused[#loc33, #loc34])
#loc164 = loc(fused[#loc35, #loc36])
#loc165 = loc(fused[#loc35, #loc37])
#loc166 = loc(fused[#loc39, #loc34])
#loc167 = loc(fused[#loc40, #loc41])
#loc168 = loc(fused[#loc45, #loc46])
#loc169 = loc(fused[#loc48, #loc49])
#loc170 = loc(fused[#loc51, #loc52, #loc53, #loc41])
#loc171 = loc(fused[#loc56, #loc57])
#loc172 = loc(fused[#loc58, #loc59])
#loc173 = loc(fused[#loc60, #loc61])
#loc174 = loc(fused[#loc65, #loc66])
#loc175 = loc(fused[#loc64, #loc68])
#loc176 = loc(fused[#loc70, #loc59])
#loc177 = loc(fused[#loc73, #loc74])
#loc178 = loc(fused[#loc72, #loc71])
#loc179 = loc(fused[#loc78, #loc77])
#loc180 = loc(fused[#loc85, #loc86])
#loc181 = loc(fused[#loc87, #loc88])
#loc182 = loc(fused[#loc89, #loc90])
#loc183 = loc(fused[#loc91, #loc92])
#loc184 = loc(fused[#loc94, #loc93])
#loc185 = loc(fused[#loc96, #loc97])
#loc186 = loc(fused[#loc99, #loc100])
#loc187 = loc(fused[#loc101, #loc102])
#loc188 = loc(fused[#loc103, #loc104])
#loc189 = loc(fused[#loc106, #loc105])
#loc190 = loc(fused[#loc107, #loc108])
#loc191 = loc(fused[#loc109, #loc110])
#loc192 = loc(fused[#loc111, #loc112, #loc113, #loc108])
#loc193 = loc(fused[#loc123, #loc124])
#loc194 = loc(fused[#loc126, #loc125])
#loc195 = loc(fused[#loc127, #loc128])
#loc196 = loc(fused[#loc129, #loc130])
#loc197 = loc(fused[#loc131, #loc132])
#loc198 = loc(fused[#loc134, #loc133])
#loc199 = loc(fused[#loc135, #loc136])
#loc200 = loc(fused[#loc137, #loc138])
#loc201 = loc(fused[#loc139, #loc136])
