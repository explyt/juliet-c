!s32i = !cir.int<s, 32>
!s8i = !cir.int<s, 8>
!u64i = !cir.int<u, 64>
!void = !cir.void
#fn_attr = #cir<extra({nothrow = #cir.nothrow})>
#fn_attr1 = #cir<extra({inline = #cir.inline<no>, nothrow = #cir.nothrow, optnone = #cir.optnone})>
#loc7 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_char_loop_67b.c":28:72)
#loc8 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_char_loop_67b.c":28:140)
#loc56 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_char_loop_67b.c":52:76)
#loc57 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_char_loop_67b.c":52:144)
#loc105 = loc(fused[#loc7, #loc8])
#loc120 = loc(fused[#loc56, #loc57])
!ty__CWE122_Heap_Based_Buffer_Overflow__c_CWE805_char_loop_67_structType = !cir.struct<struct "_CWE122_Heap_Based_Buffer_Overflow__c_CWE805_char_loop_67_structType" {!cir.ptr<!s8i>}>
module @"/home/ladisgin/git_proj/juliet-c/testcases/CWE122_Heap_Based_Buffer_Overflow/s07/CWE122_Heap_Based_Buffer_Overflow__c_CWE805_char_loop_67b.c" attributes {cir.lang = #cir.lang<c>, cir.sob = #cir.signed_overflow_behavior<undefined>, cir.triple = "x86_64-unknown-linux-gnu", dlti.dl_spec = #dlti.dl_spec<i128 = dense<128> : vector<2xi64>, f80 = dense<128> : vector<2xi64>, i1 = dense<8> : vector<2xi64>, !llvm.ptr = dense<64> : vector<4xi64>, i16 = dense<16> : vector<2xi64>, i8 = dense<8> : vector<2xi64>, i32 = dense<32> : vector<2xi64>, f128 = dense<128> : vector<2xi64>, !llvm.ptr<270> = dense<32> : vector<4xi64>, f64 = dense<64> : vector<2xi64>, f16 = dense<16> : vector<2xi64>, !llvm.ptr<271> = dense<32> : vector<4xi64>, !llvm.ptr<272> = dense<64> : vector<4xi64>, i64 = dense<64> : vector<2xi64>, "dlti.stack_alignment" = 128 : i64, "dlti.endianness" = "little">} {
  cir.func private @printLine(!cir.ptr<!s8i>) loc(#loc102)
  cir.func private @free(!cir.ptr<!void>) extra(#fn_attr) loc(#loc103)
  cir.func @CWE122_Heap_Based_Buffer_Overflow__c_CWE805_char_loop_67b_badSink(%arg0: !ty__CWE122_Heap_Based_Buffer_Overflow__c_CWE805_char_loop_67_structType loc(fused[#loc7, #loc8])) extra(#fn_attr1) {
    %0 = cir.alloca !ty__CWE122_Heap_Based_Buffer_Overflow__c_CWE805_char_loop_67_structType, !cir.ptr<!ty__CWE122_Heap_Based_Buffer_Overflow__c_CWE805_char_loop_67_structType>, ["myStruct", init] {alignment = 8 : i64} loc(#loc105)
    %1 = cir.alloca !cir.ptr<!s8i>, !cir.ptr<!cir.ptr<!s8i>>, ["data", init] {alignment = 8 : i64} loc(#loc106)
    cir.store %arg0, %0 : !ty__CWE122_Heap_Based_Buffer_Overflow__c_CWE805_char_loop_67_structType, !cir.ptr<!ty__CWE122_Heap_Based_Buffer_Overflow__c_CWE805_char_loop_67_structType> loc(#loc11)
    %2 = cir.get_member %0[0] {name = "structFirst"} : !cir.ptr<!ty__CWE122_Heap_Based_Buffer_Overflow__c_CWE805_char_loop_67_structType> -> !cir.ptr<!cir.ptr<!s8i>> loc(#loc12)
    %3 = cir.load %2 : !cir.ptr<!cir.ptr<!s8i>>, !cir.ptr<!s8i> loc(#loc10)
    cir.store %3, %1 : !cir.ptr<!s8i>, !cir.ptr<!cir.ptr<!s8i>> loc(#loc106)
    cir.scope {
      %4 = cir.alloca !u64i, !cir.ptr<!u64i>, ["i"] {alignment = 8 : i64} loc(#loc108)
      %5 = cir.alloca !cir.array<!s8i x 100>, !cir.ptr<!cir.array<!s8i x 100>>, ["source"] {alignment = 16 : i64} loc(#loc109)
      %6 = cir.cast(array_to_ptrdecay, %5 : !cir.ptr<!cir.array<!s8i x 100>>), !cir.ptr<!s8i> loc(#loc19)
      %7 = cir.cast(bitcast, %6 : !cir.ptr<!s8i>), !cir.ptr<!void> loc(#loc19)
      %8 = cir.const #cir.int<67> : !s32i loc(#loc20)
      %9 = cir.const #cir.int<100> : !s32i loc(#loc21)
      %10 = cir.const #cir.int<1> : !s32i loc(#loc22)
      %11 = cir.binop(sub, %9, %10) nsw : !s32i loc(#loc21)
      %12 = cir.cast(integral, %11 : !s32i), !u64i loc(#loc21)
      cir.libc.memset %12 bytes from %7 set to %8 : !cir.ptr<!void>, !s32i, !u64i loc(#loc110)
      %13 = cir.const #cir.int<0> : !s32i loc(#loc25)
      %14 = cir.cast(integral, %13 : !s32i), !s8i loc(#loc25)
      %15 = cir.const #cir.int<100> : !s32i loc(#loc26)
      %16 = cir.const #cir.int<1> : !s32i loc(#loc27)
      %17 = cir.binop(sub, %15, %16) nsw : !s32i loc(#loc26)
      %18 = cir.cast(array_to_ptrdecay, %5 : !cir.ptr<!cir.array<!s8i x 100>>), !cir.ptr<!s8i> loc(#loc28)
      %19 = cir.ptr_stride(%18 : !cir.ptr<!s8i>, %17 : !s32i), !cir.ptr<!s8i> loc(#loc28)
      cir.store %14, %19 : !s8i, !cir.ptr<!s8i> loc(#loc111)
      cir.scope {
        %31 = cir.const #cir.int<0> : !s32i loc(#loc31)
        %32 = cir.cast(integral, %31 : !s32i), !u64i loc(#loc31)
        cir.store %32, %4 : !u64i, !cir.ptr<!u64i> loc(#loc113)
        cir.for : cond {
          %33 = cir.load %4 : !cir.ptr<!u64i>, !u64i loc(#loc33)
          %34 = cir.const #cir.int<100> : !s32i loc(#loc34)
          %35 = cir.cast(integral, %34 : !s32i), !u64i loc(#loc34)
          %36 = cir.cmp(lt, %33, %35) : !u64i, !cir.bool loc(#loc114)
          cir.condition(%36) loc(#loc35)
        } body {
          cir.scope {
            %33 = cir.load %4 : !cir.ptr<!u64i>, !u64i loc(#loc37)
            %34 = cir.cast(array_to_ptrdecay, %5 : !cir.ptr<!cir.array<!s8i x 100>>), !cir.ptr<!s8i> loc(#loc38)
            %35 = cir.ptr_stride(%34 : !cir.ptr<!s8i>, %33 : !u64i), !cir.ptr<!s8i> loc(#loc38)
            %36 = cir.load %35 : !cir.ptr<!s8i>, !s8i loc(#loc38)
            %37 = cir.load %1 : !cir.ptr<!cir.ptr<!s8i>>, !cir.ptr<!s8i> loc(#loc39)
            %38 = cir.load %4 : !cir.ptr<!u64i>, !u64i loc(#loc40)
            %39 = cir.ptr_stride(%37 : !cir.ptr<!s8i>, %38 : !u64i), !cir.ptr<!s8i> loc(#loc41)
            cir.store %36, %39 : !s8i, !cir.ptr<!s8i> loc(#loc116)
          } loc(#loc115)
          cir.yield loc(#loc30)
        } step {
          %33 = cir.load %4 : !cir.ptr<!u64i>, !u64i loc(#loc43)
          %34 = cir.unary(inc, %33) : !u64i, !u64i loc(#loc44)
          cir.store %34, %4 : !u64i, !cir.ptr<!u64i> loc(#loc117)
          cir.yield loc(#loc112)
        } loc(#loc112)
      } loc(#loc112)
      %20 = cir.const #cir.int<0> : !s32i loc(#loc45)
      %21 = cir.cast(integral, %20 : !s32i), !s8i loc(#loc45)
      %22 = cir.load %1 : !cir.ptr<!cir.ptr<!s8i>>, !cir.ptr<!s8i> loc(#loc46)
      %23 = cir.const #cir.int<100> : !s32i loc(#loc47)
      %24 = cir.const #cir.int<1> : !s32i loc(#loc48)
      %25 = cir.binop(sub, %23, %24) nsw : !s32i loc(#loc47)
      %26 = cir.ptr_stride(%22 : !cir.ptr<!s8i>, %25 : !s32i), !cir.ptr<!s8i> loc(#loc49)
      cir.store %21, %26 : !s8i, !cir.ptr<!s8i> loc(#loc118)
      %27 = cir.load %1 : !cir.ptr<!cir.ptr<!s8i>>, !cir.ptr<!s8i> loc(#loc50)
      cir.call @printLine(%27) : (!cir.ptr<!s8i>) -> () loc(#loc51)
      %28 = cir.get_global @free : !cir.ptr<!cir.func<!void (!cir.ptr<!void>)>> loc(#loc52)
      %29 = cir.load %1 : !cir.ptr<!cir.ptr<!s8i>>, !cir.ptr<!s8i> loc(#loc53)
      %30 = cir.cast(bitcast, %29 : !cir.ptr<!s8i>), !cir.ptr<!void> loc(#loc53)
      cir.call @free(%30) : (!cir.ptr<!void>) -> () extra(#fn_attr) loc(#loc52)
    } loc(#loc107)
    cir.return loc(#loc6)
  } loc(#loc104)
  cir.func @CWE122_Heap_Based_Buffer_Overflow__c_CWE805_char_loop_67b_goodG2BSink(%arg0: !ty__CWE122_Heap_Based_Buffer_Overflow__c_CWE805_char_loop_67_structType loc(fused[#loc56, #loc57])) extra(#fn_attr1) {
    %0 = cir.alloca !ty__CWE122_Heap_Based_Buffer_Overflow__c_CWE805_char_loop_67_structType, !cir.ptr<!ty__CWE122_Heap_Based_Buffer_Overflow__c_CWE805_char_loop_67_structType>, ["myStruct", init] {alignment = 8 : i64} loc(#loc120)
    %1 = cir.alloca !cir.ptr<!s8i>, !cir.ptr<!cir.ptr<!s8i>>, ["data", init] {alignment = 8 : i64} loc(#loc121)
    cir.store %arg0, %0 : !ty__CWE122_Heap_Based_Buffer_Overflow__c_CWE805_char_loop_67_structType, !cir.ptr<!ty__CWE122_Heap_Based_Buffer_Overflow__c_CWE805_char_loop_67_structType> loc(#loc60)
    %2 = cir.get_member %0[0] {name = "structFirst"} : !cir.ptr<!ty__CWE122_Heap_Based_Buffer_Overflow__c_CWE805_char_loop_67_structType> -> !cir.ptr<!cir.ptr<!s8i>> loc(#loc12)
    %3 = cir.load %2 : !cir.ptr<!cir.ptr<!s8i>>, !cir.ptr<!s8i> loc(#loc59)
    cir.store %3, %1 : !cir.ptr<!s8i>, !cir.ptr<!cir.ptr<!s8i>> loc(#loc121)
    cir.scope {
      %4 = cir.alloca !u64i, !cir.ptr<!u64i>, ["i"] {alignment = 8 : i64} loc(#loc123)
      %5 = cir.alloca !cir.array<!s8i x 100>, !cir.ptr<!cir.array<!s8i x 100>>, ["source"] {alignment = 16 : i64} loc(#loc124)
      %6 = cir.cast(array_to_ptrdecay, %5 : !cir.ptr<!cir.array<!s8i x 100>>), !cir.ptr<!s8i> loc(#loc67)
      %7 = cir.cast(bitcast, %6 : !cir.ptr<!s8i>), !cir.ptr<!void> loc(#loc67)
      %8 = cir.const #cir.int<67> : !s32i loc(#loc68)
      %9 = cir.const #cir.int<100> : !s32i loc(#loc69)
      %10 = cir.const #cir.int<1> : !s32i loc(#loc70)
      %11 = cir.binop(sub, %9, %10) nsw : !s32i loc(#loc69)
      %12 = cir.cast(integral, %11 : !s32i), !u64i loc(#loc69)
      cir.libc.memset %12 bytes from %7 set to %8 : !cir.ptr<!void>, !s32i, !u64i loc(#loc125)
      %13 = cir.const #cir.int<0> : !s32i loc(#loc73)
      %14 = cir.cast(integral, %13 : !s32i), !s8i loc(#loc73)
      %15 = cir.const #cir.int<100> : !s32i loc(#loc74)
      %16 = cir.const #cir.int<1> : !s32i loc(#loc75)
      %17 = cir.binop(sub, %15, %16) nsw : !s32i loc(#loc74)
      %18 = cir.cast(array_to_ptrdecay, %5 : !cir.ptr<!cir.array<!s8i x 100>>), !cir.ptr<!s8i> loc(#loc76)
      %19 = cir.ptr_stride(%18 : !cir.ptr<!s8i>, %17 : !s32i), !cir.ptr<!s8i> loc(#loc76)
      cir.store %14, %19 : !s8i, !cir.ptr<!s8i> loc(#loc126)
      cir.scope {
        %31 = cir.const #cir.int<0> : !s32i loc(#loc79)
        %32 = cir.cast(integral, %31 : !s32i), !u64i loc(#loc79)
        cir.store %32, %4 : !u64i, !cir.ptr<!u64i> loc(#loc128)
        cir.for : cond {
          %33 = cir.load %4 : !cir.ptr<!u64i>, !u64i loc(#loc81)
          %34 = cir.const #cir.int<100> : !s32i loc(#loc82)
          %35 = cir.cast(integral, %34 : !s32i), !u64i loc(#loc82)
          %36 = cir.cmp(lt, %33, %35) : !u64i, !cir.bool loc(#loc129)
          cir.condition(%36) loc(#loc83)
        } body {
          cir.scope {
            %33 = cir.load %4 : !cir.ptr<!u64i>, !u64i loc(#loc85)
            %34 = cir.cast(array_to_ptrdecay, %5 : !cir.ptr<!cir.array<!s8i x 100>>), !cir.ptr<!s8i> loc(#loc86)
            %35 = cir.ptr_stride(%34 : !cir.ptr<!s8i>, %33 : !u64i), !cir.ptr<!s8i> loc(#loc86)
            %36 = cir.load %35 : !cir.ptr<!s8i>, !s8i loc(#loc86)
            %37 = cir.load %1 : !cir.ptr<!cir.ptr<!s8i>>, !cir.ptr<!s8i> loc(#loc87)
            %38 = cir.load %4 : !cir.ptr<!u64i>, !u64i loc(#loc88)
            %39 = cir.ptr_stride(%37 : !cir.ptr<!s8i>, %38 : !u64i), !cir.ptr<!s8i> loc(#loc89)
            cir.store %36, %39 : !s8i, !cir.ptr<!s8i> loc(#loc131)
          } loc(#loc130)
          cir.yield loc(#loc78)
        } step {
          %33 = cir.load %4 : !cir.ptr<!u64i>, !u64i loc(#loc91)
          %34 = cir.unary(inc, %33) : !u64i, !u64i loc(#loc92)
          cir.store %34, %4 : !u64i, !cir.ptr<!u64i> loc(#loc132)
          cir.yield loc(#loc127)
        } loc(#loc127)
      } loc(#loc127)
      %20 = cir.const #cir.int<0> : !s32i loc(#loc93)
      %21 = cir.cast(integral, %20 : !s32i), !s8i loc(#loc93)
      %22 = cir.load %1 : !cir.ptr<!cir.ptr<!s8i>>, !cir.ptr<!s8i> loc(#loc94)
      %23 = cir.const #cir.int<100> : !s32i loc(#loc95)
      %24 = cir.const #cir.int<1> : !s32i loc(#loc96)
      %25 = cir.binop(sub, %23, %24) nsw : !s32i loc(#loc95)
      %26 = cir.ptr_stride(%22 : !cir.ptr<!s8i>, %25 : !s32i), !cir.ptr<!s8i> loc(#loc97)
      cir.store %21, %26 : !s8i, !cir.ptr<!s8i> loc(#loc133)
      %27 = cir.load %1 : !cir.ptr<!cir.ptr<!s8i>>, !cir.ptr<!s8i> loc(#loc98)
      cir.call @printLine(%27) : (!cir.ptr<!s8i>) -> () loc(#loc99)
      %28 = cir.get_global @free : !cir.ptr<!cir.func<!void (!cir.ptr<!void>)>> loc(#loc100)
      %29 = cir.load %1 : !cir.ptr<!cir.ptr<!s8i>>, !cir.ptr<!s8i> loc(#loc101)
      %30 = cir.cast(bitcast, %29 : !cir.ptr<!s8i>), !cir.ptr<!void> loc(#loc101)
      cir.call @free(%30) : (!cir.ptr<!void>) -> () extra(#fn_attr) loc(#loc100)
    } loc(#loc122)
    cir.return loc(#loc55)
  } loc(#loc119)
} loc(#loc)
#loc = loc("/home/ladisgin/git_proj/juliet-c/testcases/CWE122_Heap_Based_Buffer_Overflow/s07/CWE122_Heap_Based_Buffer_Overflow__c_CWE805_char_loop_67b.c":0:0)
#loc1 = loc("../../../testcasesupport/std_testcase_io.h":14:1)
#loc2 = loc("../../../testcasesupport/std_testcase_io.h":14:33)
#loc3 = loc("/usr/include/stdlib.h":687:1)
#loc4 = loc("/usr/include/stdlib.h":687:32)
#loc5 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_char_loop_67b.c":28:1)
#loc6 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_char_loop_67b.c":45:1)
#loc9 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_char_loop_67b.c":30:5)
#loc10 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_char_loop_67b.c":30:28)
#loc11 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_char_loop_67b.c":29:1)
#loc12 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_char_loop_67b.c":23:12)
#loc13 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_char_loop_67b.c":31:5)
#loc14 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_char_loop_67b.c":44:5)
#loc15 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_char_loop_67b.c":32:9)
#loc16 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_char_loop_67b.c":32:16)
#loc17 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_char_loop_67b.c":33:9)
#loc18 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_char_loop_67b.c":33:24)
#loc19 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_char_loop_67b.c":34:16)
#loc20 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_char_loop_67b.c":34:24)
#loc21 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_char_loop_67b.c":34:29)
#loc22 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_char_loop_67b.c":34:33)
#loc23 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_char_loop_67b.c":34:9)
#loc24 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_char_loop_67b.c":34:34)
#loc25 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_char_loop_67b.c":35:25)
#loc26 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_char_loop_67b.c":35:16)
#loc27 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_char_loop_67b.c":35:20)
#loc28 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_char_loop_67b.c":35:9)
#loc29 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_char_loop_67b.c":37:9)
#loc30 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_char_loop_67b.c":40:9)
#loc31 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_char_loop_67b.c":37:18)
#loc32 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_char_loop_67b.c":37:14)
#loc33 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_char_loop_67b.c":37:21)
#loc34 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_char_loop_67b.c":37:25)
#loc35 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_char_loop_67b.c":37:23)
#loc36 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_char_loop_67b.c":38:9)
#loc37 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_char_loop_67b.c":39:30)
#loc38 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_char_loop_67b.c":39:23)
#loc39 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_char_loop_67b.c":39:13)
#loc40 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_char_loop_67b.c":39:18)
#loc41 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_char_loop_67b.c":39:19)
#loc42 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_char_loop_67b.c":39:31)
#loc43 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_char_loop_67b.c":37:31)
#loc44 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_char_loop_67b.c":37:30)
#loc45 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_char_loop_67b.c":41:23)
#loc46 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_char_loop_67b.c":41:9)
#loc47 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_char_loop_67b.c":41:14)
#loc48 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_char_loop_67b.c":41:18)
#loc49 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_char_loop_67b.c":41:19)
#loc50 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_char_loop_67b.c":42:19)
#loc51 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_char_loop_67b.c":42:9)
#loc52 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_char_loop_67b.c":43:9)
#loc53 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_char_loop_67b.c":43:14)
#loc54 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_char_loop_67b.c":52:1)
#loc55 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_char_loop_67b.c":69:1)
#loc58 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_char_loop_67b.c":54:5)
#loc59 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_char_loop_67b.c":54:28)
#loc60 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_char_loop_67b.c":53:1)
#loc61 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_char_loop_67b.c":55:5)
#loc62 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_char_loop_67b.c":68:5)
#loc63 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_char_loop_67b.c":56:9)
#loc64 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_char_loop_67b.c":56:16)
#loc65 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_char_loop_67b.c":57:9)
#loc66 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_char_loop_67b.c":57:24)
#loc67 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_char_loop_67b.c":58:16)
#loc68 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_char_loop_67b.c":58:24)
#loc69 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_char_loop_67b.c":58:29)
#loc70 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_char_loop_67b.c":58:33)
#loc71 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_char_loop_67b.c":58:9)
#loc72 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_char_loop_67b.c":58:34)
#loc73 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_char_loop_67b.c":59:25)
#loc74 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_char_loop_67b.c":59:16)
#loc75 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_char_loop_67b.c":59:20)
#loc76 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_char_loop_67b.c":59:9)
#loc77 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_char_loop_67b.c":61:9)
#loc78 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_char_loop_67b.c":64:9)
#loc79 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_char_loop_67b.c":61:18)
#loc80 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_char_loop_67b.c":61:14)
#loc81 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_char_loop_67b.c":61:21)
#loc82 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_char_loop_67b.c":61:25)
#loc83 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_char_loop_67b.c":61:23)
#loc84 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_char_loop_67b.c":62:9)
#loc85 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_char_loop_67b.c":63:30)
#loc86 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_char_loop_67b.c":63:23)
#loc87 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_char_loop_67b.c":63:13)
#loc88 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_char_loop_67b.c":63:18)
#loc89 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_char_loop_67b.c":63:19)
#loc90 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_char_loop_67b.c":63:31)
#loc91 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_char_loop_67b.c":61:31)
#loc92 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_char_loop_67b.c":61:30)
#loc93 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_char_loop_67b.c":65:23)
#loc94 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_char_loop_67b.c":65:9)
#loc95 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_char_loop_67b.c":65:14)
#loc96 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_char_loop_67b.c":65:18)
#loc97 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_char_loop_67b.c":65:19)
#loc98 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_char_loop_67b.c":66:19)
#loc99 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_char_loop_67b.c":66:9)
#loc100 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_char_loop_67b.c":67:9)
#loc101 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_char_loop_67b.c":67:14)
#loc102 = loc(fused[#loc1, #loc2])
#loc103 = loc(fused[#loc3, #loc4])
#loc104 = loc(fused[#loc5, #loc6])
#loc106 = loc(fused[#loc9, #loc10])
#loc107 = loc(fused[#loc13, #loc14])
#loc108 = loc(fused[#loc15, #loc16])
#loc109 = loc(fused[#loc17, #loc18])
#loc110 = loc(fused[#loc23, #loc24])
#loc111 = loc(fused[#loc28, #loc25])
#loc112 = loc(fused[#loc29, #loc30])
#loc113 = loc(fused[#loc32, #loc31])
#loc114 = loc(fused[#loc33, #loc34])
#loc115 = loc(fused[#loc36, #loc30])
#loc116 = loc(fused[#loc39, #loc42])
#loc117 = loc(fused[#loc44, #loc43])
#loc118 = loc(fused[#loc46, #loc45])
#loc119 = loc(fused[#loc54, #loc55])
#loc121 = loc(fused[#loc58, #loc59])
#loc122 = loc(fused[#loc61, #loc62])
#loc123 = loc(fused[#loc63, #loc64])
#loc124 = loc(fused[#loc65, #loc66])
#loc125 = loc(fused[#loc71, #loc72])
#loc126 = loc(fused[#loc76, #loc73])
#loc127 = loc(fused[#loc77, #loc78])
#loc128 = loc(fused[#loc80, #loc79])
#loc129 = loc(fused[#loc81, #loc82])
#loc130 = loc(fused[#loc84, #loc78])
#loc131 = loc(fused[#loc87, #loc90])
#loc132 = loc(fused[#loc92, #loc91])
#loc133 = loc(fused[#loc94, #loc93])
