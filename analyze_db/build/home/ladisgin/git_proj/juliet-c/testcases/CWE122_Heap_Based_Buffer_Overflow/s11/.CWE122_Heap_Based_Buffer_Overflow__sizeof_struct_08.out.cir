!s32i = !cir.int<s, 32>
!s64i = !cir.int<s, 64>
!s8i = !cir.int<s, 8>
!u32i = !cir.int<u, 32>
!u64i = !cir.int<u, 64>
!void = !cir.void
#fn_attr = #cir<extra({nothrow = #cir.nothrow})>
#fn_attr1 = #cir<extra({inline = #cir.inline<no>, nothrow = #cir.nothrow, optnone = #cir.optnone})>
#loc61 = loc("CWE122_Heap_Based_Buffer_Overflow__sizeof_struct_08.c":117:10)
#loc62 = loc("CWE122_Heap_Based_Buffer_Overflow__sizeof_struct_08.c":117:14)
#loc63 = loc("CWE122_Heap_Based_Buffer_Overflow__sizeof_struct_08.c":117:20)
#loc64 = loc("CWE122_Heap_Based_Buffer_Overflow__sizeof_struct_08.c":117:32)
!ty__twoIntsStruct = !cir.struct<struct "_twoIntsStruct" {!s32i, !s32i} #cir.record.decl.ast>
#loc180 = loc(fused[#loc61, #loc62])
#loc181 = loc(fused[#loc63, #loc64])
module @"/home/ladisgin/git_proj/juliet-c/testcases/CWE122_Heap_Based_Buffer_Overflow/s11/CWE122_Heap_Based_Buffer_Overflow__sizeof_struct_08.c" attributes {cir.lang = #cir.lang<c>, cir.sob = #cir.signed_overflow_behavior<undefined>, cir.triple = "x86_64-unknown-linux-gnu", dlti.dl_spec = #dlti.dl_spec<i16 = dense<16> : vector<2xi64>, i32 = dense<32> : vector<2xi64>, i1 = dense<8> : vector<2xi64>, i8 = dense<8> : vector<2xi64>, !llvm.ptr<270> = dense<32> : vector<4xi64>, f128 = dense<128> : vector<2xi64>, !llvm.ptr<271> = dense<32> : vector<4xi64>, f64 = dense<64> : vector<2xi64>, f16 = dense<16> : vector<2xi64>, i128 = dense<128> : vector<2xi64>, !llvm.ptr<272> = dense<64> : vector<4xi64>, i64 = dense<64> : vector<2xi64>, !llvm.ptr = dense<64> : vector<4xi64>, f80 = dense<128> : vector<2xi64>, "dlti.endianness" = "little", "dlti.stack_alignment" = 128 : i64>} {
  cir.func private @malloc(!u64i) -> !cir.ptr<!void> extra(#fn_attr) loc(#loc155)
  cir.func private @exit(!s32i) extra(#fn_attr) loc(#loc156)
  cir.func private @printStructLine(!cir.ptr<!ty__twoIntsStruct>) loc(#loc157)
  cir.func private @free(!cir.ptr<!void>) extra(#fn_attr) loc(#loc158)
  cir.func no_proto @CWE122_Heap_Based_Buffer_Overflow__sizeof_struct_08_bad() extra(#fn_attr1) {
    %0 = cir.alloca !cir.ptr<!ty__twoIntsStruct>, !cir.ptr<!cir.ptr<!ty__twoIntsStruct>>, ["data"] {alignment = 8 : i64} loc(#loc160)
    %1 = cir.const #cir.ptr<null> : !cir.ptr<!ty__twoIntsStruct> loc(#loc13)
    cir.store %1, %0 : !cir.ptr<!ty__twoIntsStruct>, !cir.ptr<!cir.ptr<!ty__twoIntsStruct>> loc(#loc161)
    cir.scope {
      %6 = cir.get_global @staticReturnsTrue : !cir.ptr<!cir.func<!s32i ()>> loc(#loc163)
      %7 = cir.call %6() : (!cir.ptr<!cir.func<!s32i ()>>) -> !s32i loc(#loc17)
      %8 = cir.cast(int_to_bool, %7 : !s32i), !cir.bool loc(#loc17)
      cir.if %8 {
        %9 = cir.get_global @malloc : !cir.ptr<!cir.func<!cir.ptr<!void> (!u64i)>> loc(#loc20)
        %10 = cir.const #cir.int<8> : !u64i loc(#loc165)
        %11 = cir.call @malloc(%10) : (!u64i) -> !cir.ptr<!void> extra(#fn_attr) loc(#loc20)
        %12 = cir.cast(bitcast, %11 : !cir.ptr<!void>), !cir.ptr<!ty__twoIntsStruct> loc(#loc166)
        cir.store %12, %0 : !cir.ptr<!ty__twoIntsStruct>, !cir.ptr<!cir.ptr<!ty__twoIntsStruct>> loc(#loc167)
        cir.scope {
          %19 = cir.load %0 : !cir.ptr<!cir.ptr<!ty__twoIntsStruct>>, !cir.ptr<!ty__twoIntsStruct> loc(#loc27)
          %20 = cir.const #cir.ptr<null> : !cir.ptr<!void> loc(#loc28)
          %21 = cir.cast(bitcast, %20 : !cir.ptr<!void>), !cir.ptr<!ty__twoIntsStruct> loc(#loc28)
          %22 = cir.cmp(eq, %19, %21) : !cir.ptr<!ty__twoIntsStruct>, !cir.bool loc(#loc169)
          cir.if %22 {
            %23 = cir.get_global @exit : !cir.ptr<!cir.func<!void (!s32i)>> loc(#loc30)
            %24 = cir.const #cir.int<1> : !s32i loc(#loc31)
            %25 = cir.unary(minus, %24) : !s32i, !s32i loc(#loc32)
            cir.call @exit(%25) : (!s32i) -> () extra(#fn_attr) loc(#loc30)
          } loc(#loc170)
        } loc(#loc168)
        %13 = cir.const #cir.int<1> : !s32i loc(#loc33)
        %14 = cir.load %0 : !cir.ptr<!cir.ptr<!ty__twoIntsStruct>>, !cir.ptr<!ty__twoIntsStruct> loc(#loc34)
        %15 = cir.get_member %14[0] {name = "intOne"} : !cir.ptr<!ty__twoIntsStruct> -> !cir.ptr<!s32i> loc(#loc35)
        cir.store %13, %15 : !s32i, !cir.ptr<!s32i> loc(#loc171)
        %16 = cir.const #cir.int<2> : !s32i loc(#loc36)
        %17 = cir.load %0 : !cir.ptr<!cir.ptr<!ty__twoIntsStruct>>, !cir.ptr<!ty__twoIntsStruct> loc(#loc37)
        %18 = cir.get_member %17[1] {name = "intTwo"} : !cir.ptr<!ty__twoIntsStruct> -> !cir.ptr<!s32i> loc(#loc38)
        cir.store %16, %18 : !s32i, !cir.ptr<!s32i> loc(#loc172)
      } loc(#loc164)
    } loc(#loc162)
    %2 = cir.load %0 : !cir.ptr<!cir.ptr<!ty__twoIntsStruct>>, !cir.ptr<!ty__twoIntsStruct> loc(#loc39)
    cir.call @printStructLine(%2) : (!cir.ptr<!ty__twoIntsStruct>) -> () loc(#loc40)
    %3 = cir.get_global @free : !cir.ptr<!cir.func<!void (!cir.ptr<!void>)>> loc(#loc41)
    %4 = cir.load %0 : !cir.ptr<!cir.ptr<!ty__twoIntsStruct>>, !cir.ptr<!ty__twoIntsStruct> loc(#loc42)
    %5 = cir.cast(bitcast, %4 : !cir.ptr<!ty__twoIntsStruct>), !cir.ptr<!void> loc(#loc42)
    cir.call @free(%5) : (!cir.ptr<!void>) -> () extra(#fn_attr) loc(#loc41)
    cir.return loc(#loc10)
  } loc(#loc159)
  cir.func no_proto @CWE122_Heap_Based_Buffer_Overflow__sizeof_struct_08_good() extra(#fn_attr1) {
    %0 = cir.get_global @goodG2B1 : !cir.ptr<!cir.func<!void ()>> loc(#loc174)
    cir.call %0() : (!cir.ptr<!cir.func<!void ()>>) -> () loc(#loc45)
    %1 = cir.get_global @goodG2B2 : !cir.ptr<!cir.func<!void ()>> loc(#loc175)
    cir.call %1() : (!cir.ptr<!cir.func<!void ()>>) -> () loc(#loc47)
    cir.return loc(#loc44)
  } loc(#loc173)
  cir.func private @srand(!u32i) extra(#fn_attr) loc(#loc176)
  cir.func private @time(!cir.ptr<!s64i>) -> !s64i extra(#fn_attr) loc(#loc177)
  cir.func private @printLine(!cir.ptr<!s8i>) loc(#loc178)
  cir.global "private" constant cir_private dsolocal @".str" = #cir.const_array<"Calling good()...\00" : !cir.array<!s8i x 18>> : !cir.array<!s8i x 18> {alignment = 1 : i64} loc(#loc55)
  cir.global "private" constant cir_private dsolocal @".str.1" = #cir.const_array<"Finished good()\00" : !cir.array<!s8i x 16>> : !cir.array<!s8i x 16> {alignment = 1 : i64} loc(#loc56)
  cir.global "private" constant cir_private dsolocal @".str.2" = #cir.const_array<"Calling bad()...\00" : !cir.array<!s8i x 17>> : !cir.array<!s8i x 17> {alignment = 1 : i64} loc(#loc57)
  cir.global "private" constant cir_private dsolocal @".str.3" = #cir.const_array<"Finished bad()\00" : !cir.array<!s8i x 15>> : !cir.array<!s8i x 15> {alignment = 1 : i64} loc(#loc58)
  cir.func @main(%arg0: !s32i loc(fused[#loc61, #loc62]), %arg1: !cir.ptr<!cir.ptr<!s8i>> loc(fused[#loc63, #loc64])) -> !s32i extra(#fn_attr1) {
    %0 = cir.alloca !s32i, !cir.ptr<!s32i>, ["argc", init] {alignment = 4 : i64} loc(#loc180)
    %1 = cir.alloca !cir.ptr<!cir.ptr<!s8i>>, !cir.ptr<!cir.ptr<!cir.ptr<!s8i>>>, ["argv", init] {alignment = 8 : i64} loc(#loc181)
    %2 = cir.alloca !s32i, !cir.ptr<!s32i>, ["__retval"] {alignment = 4 : i64} loc(#loc60)
    cir.store %arg0, %0 : !s32i, !cir.ptr<!s32i> loc(#loc65)
    cir.store %arg1, %1 : !cir.ptr<!cir.ptr<!s8i>>, !cir.ptr<!cir.ptr<!cir.ptr<!s8i>>> loc(#loc65)
    %3 = cir.const #cir.ptr<null> : !cir.ptr<!s64i> loc(#loc66)
    %4 = cir.call @time(%3) : (!cir.ptr<!s64i>) -> !s64i extra(#fn_attr) loc(#loc67)
    %5 = cir.cast(integral, %4 : !s64i), !u32i loc(#loc67)
    cir.call @srand(%5) : (!u32i) -> () extra(#fn_attr) loc(#loc68)
    %6 = cir.get_global @".str" : !cir.ptr<!cir.array<!s8i x 18>> loc(#loc55)
    %7 = cir.cast(array_to_ptrdecay, %6 : !cir.ptr<!cir.array<!s8i x 18>>), !cir.ptr<!s8i> loc(#loc55)
    cir.call @printLine(%7) : (!cir.ptr<!s8i>) -> () loc(#loc69)
    %8 = cir.get_global @CWE122_Heap_Based_Buffer_Overflow__sizeof_struct_08_good : !cir.ptr<!cir.func<!void ()>> loc(#loc182)
    cir.call @CWE122_Heap_Based_Buffer_Overflow__sizeof_struct_08_good() : () -> () loc(#loc70)
    %9 = cir.get_global @".str.1" : !cir.ptr<!cir.array<!s8i x 16>> loc(#loc56)
    %10 = cir.cast(array_to_ptrdecay, %9 : !cir.ptr<!cir.array<!s8i x 16>>), !cir.ptr<!s8i> loc(#loc56)
    cir.call @printLine(%10) : (!cir.ptr<!s8i>) -> () loc(#loc72)
    %11 = cir.get_global @".str.2" : !cir.ptr<!cir.array<!s8i x 17>> loc(#loc57)
    %12 = cir.cast(array_to_ptrdecay, %11 : !cir.ptr<!cir.array<!s8i x 17>>), !cir.ptr<!s8i> loc(#loc57)
    cir.call @printLine(%12) : (!cir.ptr<!s8i>) -> () loc(#loc73)
    %13 = cir.get_global @CWE122_Heap_Based_Buffer_Overflow__sizeof_struct_08_bad : !cir.ptr<!cir.func<!void ()>> loc(#loc183)
    cir.call @CWE122_Heap_Based_Buffer_Overflow__sizeof_struct_08_bad() : () -> () loc(#loc74)
    %14 = cir.get_global @".str.3" : !cir.ptr<!cir.array<!s8i x 15>> loc(#loc58)
    %15 = cir.cast(array_to_ptrdecay, %14 : !cir.ptr<!cir.array<!s8i x 15>>), !cir.ptr<!s8i> loc(#loc58)
    cir.call @printLine(%15) : (!cir.ptr<!s8i>) -> () loc(#loc76)
    %16 = cir.const #cir.int<0> : !s32i loc(#loc77)
    cir.store %16, %2 : !s32i, !cir.ptr<!s32i> loc(#loc184)
    %17 = cir.load %2 : !cir.ptr<!s32i>, !s32i loc(#loc184)
    cir.return %17 : !s32i loc(#loc184)
  } loc(#loc179)
  cir.func no_proto internal private @staticReturnsTrue() -> !s32i extra(#fn_attr1) {
    %0 = cir.alloca !s32i, !cir.ptr<!s32i>, ["__retval"] {alignment = 4 : i64} loc(#loc80)
    %1 = cir.const #cir.int<1> : !s32i loc(#loc81)
    cir.store %1, %0 : !s32i, !cir.ptr<!s32i> loc(#loc186)
    %2 = cir.load %0 : !cir.ptr<!s32i>, !s32i loc(#loc186)
    cir.return %2 : !s32i loc(#loc186)
  } loc(#loc185)
  cir.global "private" constant cir_private dsolocal @".str.4" = #cir.const_array<"Benign, fixed string\00" : !cir.array<!s8i x 21>> : !cir.array<!s8i x 21> {alignment = 1 : i64} loc(#loc83)
  cir.func no_proto internal private @goodG2B1() extra(#fn_attr1) {
    %0 = cir.alloca !cir.ptr<!ty__twoIntsStruct>, !cir.ptr<!cir.ptr<!ty__twoIntsStruct>>, ["data"] {alignment = 8 : i64} loc(#loc188)
    %1 = cir.const #cir.ptr<null> : !cir.ptr<!ty__twoIntsStruct> loc(#loc88)
    cir.store %1, %0 : !cir.ptr<!ty__twoIntsStruct>, !cir.ptr<!cir.ptr<!ty__twoIntsStruct>> loc(#loc189)
    cir.scope {
      %6 = cir.get_global @staticReturnsFalse : !cir.ptr<!cir.func<!s32i ()>> loc(#loc191)
      %7 = cir.call %6() : (!cir.ptr<!cir.func<!s32i ()>>) -> !s32i loc(#loc92)
      %8 = cir.cast(int_to_bool, %7 : !s32i), !cir.bool loc(#loc92)
      cir.if %8 {
        %9 = cir.get_global @".str.4" : !cir.ptr<!cir.array<!s8i x 21>> loc(#loc83)
        %10 = cir.cast(array_to_ptrdecay, %9 : !cir.ptr<!cir.array<!s8i x 21>>), !cir.ptr<!s8i> loc(#loc83)
        cir.call @printLine(%10) : (!cir.ptr<!s8i>) -> () loc(#loc97)
      } else {
        %9 = cir.get_global @malloc : !cir.ptr<!cir.func<!cir.ptr<!void> (!u64i)>> loc(#loc98)
        %10 = cir.const #cir.int<8> : !u64i loc(#loc193)
        %11 = cir.call @malloc(%10) : (!u64i) -> !cir.ptr<!void> extra(#fn_attr) loc(#loc98)
        %12 = cir.cast(bitcast, %11 : !cir.ptr<!void>), !cir.ptr<!ty__twoIntsStruct> loc(#loc194)
        cir.store %12, %0 : !cir.ptr<!ty__twoIntsStruct>, !cir.ptr<!cir.ptr<!ty__twoIntsStruct>> loc(#loc195)
        cir.scope {
          %19 = cir.load %0 : !cir.ptr<!cir.ptr<!ty__twoIntsStruct>>, !cir.ptr<!ty__twoIntsStruct> loc(#loc105)
          %20 = cir.const #cir.ptr<null> : !cir.ptr<!void> loc(#loc106)
          %21 = cir.cast(bitcast, %20 : !cir.ptr<!void>), !cir.ptr<!ty__twoIntsStruct> loc(#loc106)
          %22 = cir.cmp(eq, %19, %21) : !cir.ptr<!ty__twoIntsStruct>, !cir.bool loc(#loc197)
          cir.if %22 {
            %23 = cir.get_global @exit : !cir.ptr<!cir.func<!void (!s32i)>> loc(#loc108)
            %24 = cir.const #cir.int<1> : !s32i loc(#loc109)
            %25 = cir.unary(minus, %24) : !s32i, !s32i loc(#loc110)
            cir.call @exit(%25) : (!s32i) -> () extra(#fn_attr) loc(#loc108)
          } loc(#loc198)
        } loc(#loc196)
        %13 = cir.const #cir.int<1> : !s32i loc(#loc111)
        %14 = cir.load %0 : !cir.ptr<!cir.ptr<!ty__twoIntsStruct>>, !cir.ptr<!ty__twoIntsStruct> loc(#loc112)
        %15 = cir.get_member %14[0] {name = "intOne"} : !cir.ptr<!ty__twoIntsStruct> -> !cir.ptr<!s32i> loc(#loc35)
        cir.store %13, %15 : !s32i, !cir.ptr<!s32i> loc(#loc199)
        %16 = cir.const #cir.int<2> : !s32i loc(#loc113)
        %17 = cir.load %0 : !cir.ptr<!cir.ptr<!ty__twoIntsStruct>>, !cir.ptr<!ty__twoIntsStruct> loc(#loc114)
        %18 = cir.get_member %17[1] {name = "intTwo"} : !cir.ptr<!ty__twoIntsStruct> -> !cir.ptr<!s32i> loc(#loc38)
        cir.store %16, %18 : !s32i, !cir.ptr<!s32i> loc(#loc200)
      } loc(#loc192)
    } loc(#loc190)
    %2 = cir.load %0 : !cir.ptr<!cir.ptr<!ty__twoIntsStruct>>, !cir.ptr<!ty__twoIntsStruct> loc(#loc115)
    cir.call @printStructLine(%2) : (!cir.ptr<!ty__twoIntsStruct>) -> () loc(#loc116)
    %3 = cir.get_global @free : !cir.ptr<!cir.func<!void (!cir.ptr<!void>)>> loc(#loc117)
    %4 = cir.load %0 : !cir.ptr<!cir.ptr<!ty__twoIntsStruct>>, !cir.ptr<!ty__twoIntsStruct> loc(#loc118)
    %5 = cir.cast(bitcast, %4 : !cir.ptr<!ty__twoIntsStruct>), !cir.ptr<!void> loc(#loc118)
    cir.call @free(%5) : (!cir.ptr<!void>) -> () extra(#fn_attr) loc(#loc117)
    cir.return loc(#loc85)
  } loc(#loc187)
  cir.func no_proto internal private @staticReturnsFalse() -> !s32i extra(#fn_attr1) {
    %0 = cir.alloca !s32i, !cir.ptr<!s32i>, ["__retval"] {alignment = 4 : i64} loc(#loc120)
    %1 = cir.const #cir.int<0> : !s32i loc(#loc121)
    cir.store %1, %0 : !s32i, !cir.ptr<!s32i> loc(#loc202)
    %2 = cir.load %0 : !cir.ptr<!s32i>, !s32i loc(#loc202)
    cir.return %2 : !s32i loc(#loc202)
  } loc(#loc201)
  cir.func no_proto internal private @goodG2B2() extra(#fn_attr1) {
    %0 = cir.alloca !cir.ptr<!ty__twoIntsStruct>, !cir.ptr<!cir.ptr<!ty__twoIntsStruct>>, ["data"] {alignment = 8 : i64} loc(#loc204)
    %1 = cir.const #cir.ptr<null> : !cir.ptr<!ty__twoIntsStruct> loc(#loc127)
    cir.store %1, %0 : !cir.ptr<!ty__twoIntsStruct>, !cir.ptr<!cir.ptr<!ty__twoIntsStruct>> loc(#loc205)
    cir.scope {
      %6 = cir.get_global @staticReturnsTrue : !cir.ptr<!cir.func<!s32i ()>> loc(#loc207)
      %7 = cir.call @staticReturnsTrue() : () -> !s32i loc(#loc131)
      %8 = cir.cast(int_to_bool, %7 : !s32i), !cir.bool loc(#loc131)
      cir.if %8 {
        %9 = cir.get_global @malloc : !cir.ptr<!cir.func<!cir.ptr<!void> (!u64i)>> loc(#loc134)
        %10 = cir.const #cir.int<8> : !u64i loc(#loc209)
        %11 = cir.call @malloc(%10) : (!u64i) -> !cir.ptr<!void> extra(#fn_attr) loc(#loc134)
        %12 = cir.cast(bitcast, %11 : !cir.ptr<!void>), !cir.ptr<!ty__twoIntsStruct> loc(#loc210)
        cir.store %12, %0 : !cir.ptr<!ty__twoIntsStruct>, !cir.ptr<!cir.ptr<!ty__twoIntsStruct>> loc(#loc211)
        cir.scope {
          %19 = cir.load %0 : !cir.ptr<!cir.ptr<!ty__twoIntsStruct>>, !cir.ptr<!ty__twoIntsStruct> loc(#loc141)
          %20 = cir.const #cir.ptr<null> : !cir.ptr<!void> loc(#loc142)
          %21 = cir.cast(bitcast, %20 : !cir.ptr<!void>), !cir.ptr<!ty__twoIntsStruct> loc(#loc142)
          %22 = cir.cmp(eq, %19, %21) : !cir.ptr<!ty__twoIntsStruct>, !cir.bool loc(#loc213)
          cir.if %22 {
            %23 = cir.get_global @exit : !cir.ptr<!cir.func<!void (!s32i)>> loc(#loc144)
            %24 = cir.const #cir.int<1> : !s32i loc(#loc145)
            %25 = cir.unary(minus, %24) : !s32i, !s32i loc(#loc146)
            cir.call @exit(%25) : (!s32i) -> () extra(#fn_attr) loc(#loc144)
          } loc(#loc214)
        } loc(#loc212)
        %13 = cir.const #cir.int<1> : !s32i loc(#loc147)
        %14 = cir.load %0 : !cir.ptr<!cir.ptr<!ty__twoIntsStruct>>, !cir.ptr<!ty__twoIntsStruct> loc(#loc148)
        %15 = cir.get_member %14[0] {name = "intOne"} : !cir.ptr<!ty__twoIntsStruct> -> !cir.ptr<!s32i> loc(#loc35)
        cir.store %13, %15 : !s32i, !cir.ptr<!s32i> loc(#loc215)
        %16 = cir.const #cir.int<2> : !s32i loc(#loc149)
        %17 = cir.load %0 : !cir.ptr<!cir.ptr<!ty__twoIntsStruct>>, !cir.ptr<!ty__twoIntsStruct> loc(#loc150)
        %18 = cir.get_member %17[1] {name = "intTwo"} : !cir.ptr<!ty__twoIntsStruct> -> !cir.ptr<!s32i> loc(#loc38)
        cir.store %16, %18 : !s32i, !cir.ptr<!s32i> loc(#loc216)
      } loc(#loc208)
    } loc(#loc206)
    %2 = cir.load %0 : !cir.ptr<!cir.ptr<!ty__twoIntsStruct>>, !cir.ptr<!ty__twoIntsStruct> loc(#loc151)
    cir.call @printStructLine(%2) : (!cir.ptr<!ty__twoIntsStruct>) -> () loc(#loc152)
    %3 = cir.get_global @free : !cir.ptr<!cir.func<!void (!cir.ptr<!void>)>> loc(#loc153)
    %4 = cir.load %0 : !cir.ptr<!cir.ptr<!ty__twoIntsStruct>>, !cir.ptr<!ty__twoIntsStruct> loc(#loc154)
    %5 = cir.cast(bitcast, %4 : !cir.ptr<!ty__twoIntsStruct>), !cir.ptr<!void> loc(#loc154)
    cir.call @free(%5) : (!cir.ptr<!void>) -> () extra(#fn_attr) loc(#loc153)
    cir.return loc(#loc124)
  } loc(#loc203)
} loc(#loc)
#loc = loc("/home/ladisgin/git_proj/juliet-c/testcases/CWE122_Heap_Based_Buffer_Overflow/s11/CWE122_Heap_Based_Buffer_Overflow__sizeof_struct_08.c":0:0)
#loc1 = loc("/usr/include/stdlib.h":672:1)
#loc2 = loc("/usr/include/stdlib.h":672:45)
#loc3 = loc("/usr/include/stdlib.h":756:1)
#loc4 = loc("/usr/include/stdlib.h":756:70)
#loc5 = loc("../../../testcasesupport/std_testcase_io.h":40:1)
#loc6 = loc("../../../testcasesupport/std_testcase_io.h":40:63)
#loc7 = loc("/usr/include/stdlib.h":687:1)
#loc8 = loc("/usr/include/stdlib.h":687:32)
#loc9 = loc("CWE122_Heap_Based_Buffer_Overflow__sizeof_struct_08.c":35:1)
#loc10 = loc("CWE122_Heap_Based_Buffer_Overflow__sizeof_struct_08.c":52:1)
#loc11 = loc("CWE122_Heap_Based_Buffer_Overflow__sizeof_struct_08.c":37:5)
#loc12 = loc("CWE122_Heap_Based_Buffer_Overflow__sizeof_struct_08.c":37:21)
#loc13 = loc("CWE122_Heap_Based_Buffer_Overflow__sizeof_struct_08.c":39:12)
#loc14 = loc("CWE122_Heap_Based_Buffer_Overflow__sizeof_struct_08.c":39:5)
#loc15 = loc("CWE122_Heap_Based_Buffer_Overflow__sizeof_struct_08.c":40:5)
#loc16 = loc("CWE122_Heap_Based_Buffer_Overflow__sizeof_struct_08.c":48:5)
#loc17 = loc("CWE122_Heap_Based_Buffer_Overflow__sizeof_struct_08.c":40:8)
#loc18 = loc("CWE122_Heap_Based_Buffer_Overflow__sizeof_struct_08.c":40:26)
#loc19 = loc("CWE122_Heap_Based_Buffer_Overflow__sizeof_struct_08.c":41:5)
#loc20 = loc("CWE122_Heap_Based_Buffer_Overflow__sizeof_struct_08.c":44:33)
#loc21 = loc("CWE122_Heap_Based_Buffer_Overflow__sizeof_struct_08.c":44:40)
#loc22 = loc("CWE122_Heap_Based_Buffer_Overflow__sizeof_struct_08.c":44:51)
#loc23 = loc("CWE122_Heap_Based_Buffer_Overflow__sizeof_struct_08.c":44:52)
#loc24 = loc("CWE122_Heap_Based_Buffer_Overflow__sizeof_struct_08.c":44:9)
#loc25 = loc("CWE122_Heap_Based_Buffer_Overflow__sizeof_struct_08.c":45:9)
#loc26 = loc("CWE122_Heap_Based_Buffer_Overflow__sizeof_struct_08.c":45:37)
#loc27 = loc("CWE122_Heap_Based_Buffer_Overflow__sizeof_struct_08.c":45:13)
#loc28 = loc("CWE122_Heap_Based_Buffer_Overflow__sizeof_struct_08.c":45:21)
#loc29 = loc("CWE122_Heap_Based_Buffer_Overflow__sizeof_struct_08.c":45:27)
#loc30 = loc("CWE122_Heap_Based_Buffer_Overflow__sizeof_struct_08.c":45:28)
#loc31 = loc("CWE122_Heap_Based_Buffer_Overflow__sizeof_struct_08.c":45:34)
#loc32 = loc("CWE122_Heap_Based_Buffer_Overflow__sizeof_struct_08.c":45:33)
#loc33 = loc("CWE122_Heap_Based_Buffer_Overflow__sizeof_struct_08.c":46:24)
#loc34 = loc("CWE122_Heap_Based_Buffer_Overflow__sizeof_struct_08.c":46:9)
#loc35 = loc("../../../testcasesupport/std_testcase.h":98:9)
#loc36 = loc("CWE122_Heap_Based_Buffer_Overflow__sizeof_struct_08.c":47:24)
#loc37 = loc("CWE122_Heap_Based_Buffer_Overflow__sizeof_struct_08.c":47:9)
#loc38 = loc("../../../testcasesupport/std_testcase.h":99:9)
#loc39 = loc("CWE122_Heap_Based_Buffer_Overflow__sizeof_struct_08.c":50:21)
#loc40 = loc("CWE122_Heap_Based_Buffer_Overflow__sizeof_struct_08.c":50:5)
#loc41 = loc("CWE122_Heap_Based_Buffer_Overflow__sizeof_struct_08.c":51:5)
#loc42 = loc("CWE122_Heap_Based_Buffer_Overflow__sizeof_struct_08.c":51:10)
#loc43 = loc("CWE122_Heap_Based_Buffer_Overflow__sizeof_struct_08.c":101:1)
#loc44 = loc("CWE122_Heap_Based_Buffer_Overflow__sizeof_struct_08.c":105:1)
#loc45 = loc("CWE122_Heap_Based_Buffer_Overflow__sizeof_struct_08.c":103:5)
#loc46 = loc("CWE122_Heap_Based_Buffer_Overflow__sizeof_struct_08.c":103:14)
#loc47 = loc("CWE122_Heap_Based_Buffer_Overflow__sizeof_struct_08.c":104:5)
#loc48 = loc("CWE122_Heap_Based_Buffer_Overflow__sizeof_struct_08.c":104:14)
#loc49 = loc("/usr/include/stdlib.h":575:1)
#loc50 = loc("/usr/include/stdlib.h":575:41)
#loc51 = loc("/usr/include/time.h":76:1)
#loc52 = loc("/usr/include/time.h":76:38)
#loc53 = loc("../../../testcasesupport/std_testcase_io.h":14:1)
#loc54 = loc("../../../testcasesupport/std_testcase_io.h":14:33)
#loc55 = loc("CWE122_Heap_Based_Buffer_Overflow__sizeof_struct_08.c":122:15)
#loc56 = loc("CWE122_Heap_Based_Buffer_Overflow__sizeof_struct_08.c":124:15)
#loc57 = loc("CWE122_Heap_Based_Buffer_Overflow__sizeof_struct_08.c":127:15)
#loc58 = loc("CWE122_Heap_Based_Buffer_Overflow__sizeof_struct_08.c":129:15)
#loc59 = loc("CWE122_Heap_Based_Buffer_Overflow__sizeof_struct_08.c":117:1)
#loc60 = loc("CWE122_Heap_Based_Buffer_Overflow__sizeof_struct_08.c":132:1)
#loc65 = loc("CWE122_Heap_Based_Buffer_Overflow__sizeof_struct_08.c":118:1)
#loc66 = loc("CWE122_Heap_Based_Buffer_Overflow__sizeof_struct_08.c":120:27)
#loc67 = loc("CWE122_Heap_Based_Buffer_Overflow__sizeof_struct_08.c":120:22)
#loc68 = loc("CWE122_Heap_Based_Buffer_Overflow__sizeof_struct_08.c":120:5)
#loc69 = loc("CWE122_Heap_Based_Buffer_Overflow__sizeof_struct_08.c":122:5)
#loc70 = loc("CWE122_Heap_Based_Buffer_Overflow__sizeof_struct_08.c":123:5)
#loc71 = loc("CWE122_Heap_Based_Buffer_Overflow__sizeof_struct_08.c":123:62)
#loc72 = loc("CWE122_Heap_Based_Buffer_Overflow__sizeof_struct_08.c":124:5)
#loc73 = loc("CWE122_Heap_Based_Buffer_Overflow__sizeof_struct_08.c":127:5)
#loc74 = loc("CWE122_Heap_Based_Buffer_Overflow__sizeof_struct_08.c":128:5)
#loc75 = loc("CWE122_Heap_Based_Buffer_Overflow__sizeof_struct_08.c":128:61)
#loc76 = loc("CWE122_Heap_Based_Buffer_Overflow__sizeof_struct_08.c":129:5)
#loc77 = loc("CWE122_Heap_Based_Buffer_Overflow__sizeof_struct_08.c":131:12)
#loc78 = loc("CWE122_Heap_Based_Buffer_Overflow__sizeof_struct_08.c":131:5)
#loc79 = loc("CWE122_Heap_Based_Buffer_Overflow__sizeof_struct_08.c":23:1)
#loc80 = loc("CWE122_Heap_Based_Buffer_Overflow__sizeof_struct_08.c":26:1)
#loc81 = loc("CWE122_Heap_Based_Buffer_Overflow__sizeof_struct_08.c":25:12)
#loc82 = loc("CWE122_Heap_Based_Buffer_Overflow__sizeof_struct_08.c":25:5)
#loc83 = loc("CWE122_Heap_Based_Buffer_Overflow__sizeof_struct_08.c":67:19)
#loc84 = loc("CWE122_Heap_Based_Buffer_Overflow__sizeof_struct_08.c":59:1)
#loc85 = loc("CWE122_Heap_Based_Buffer_Overflow__sizeof_struct_08.c":80:1)
#loc86 = loc("CWE122_Heap_Based_Buffer_Overflow__sizeof_struct_08.c":61:5)
#loc87 = loc("CWE122_Heap_Based_Buffer_Overflow__sizeof_struct_08.c":61:21)
#loc88 = loc("CWE122_Heap_Based_Buffer_Overflow__sizeof_struct_08.c":63:12)
#loc89 = loc("CWE122_Heap_Based_Buffer_Overflow__sizeof_struct_08.c":63:5)
#loc90 = loc("CWE122_Heap_Based_Buffer_Overflow__sizeof_struct_08.c":64:5)
#loc91 = loc("CWE122_Heap_Based_Buffer_Overflow__sizeof_struct_08.c":76:5)
#loc92 = loc("CWE122_Heap_Based_Buffer_Overflow__sizeof_struct_08.c":64:8)
#loc93 = loc("CWE122_Heap_Based_Buffer_Overflow__sizeof_struct_08.c":64:27)
#loc94 = loc("CWE122_Heap_Based_Buffer_Overflow__sizeof_struct_08.c":65:5)
#loc95 = loc("CWE122_Heap_Based_Buffer_Overflow__sizeof_struct_08.c":68:5)
#loc96 = loc("CWE122_Heap_Based_Buffer_Overflow__sizeof_struct_08.c":70:5)
#loc97 = loc("CWE122_Heap_Based_Buffer_Overflow__sizeof_struct_08.c":67:9)
#loc98 = loc("CWE122_Heap_Based_Buffer_Overflow__sizeof_struct_08.c":72:33)
#loc99 = loc("CWE122_Heap_Based_Buffer_Overflow__sizeof_struct_08.c":72:40)
#loc100 = loc("CWE122_Heap_Based_Buffer_Overflow__sizeof_struct_08.c":72:52)
#loc101 = loc("CWE122_Heap_Based_Buffer_Overflow__sizeof_struct_08.c":72:53)
#loc102 = loc("CWE122_Heap_Based_Buffer_Overflow__sizeof_struct_08.c":72:9)
#loc103 = loc("CWE122_Heap_Based_Buffer_Overflow__sizeof_struct_08.c":73:9)
#loc104 = loc("CWE122_Heap_Based_Buffer_Overflow__sizeof_struct_08.c":73:37)
#loc105 = loc("CWE122_Heap_Based_Buffer_Overflow__sizeof_struct_08.c":73:13)
#loc106 = loc("CWE122_Heap_Based_Buffer_Overflow__sizeof_struct_08.c":73:21)
#loc107 = loc("CWE122_Heap_Based_Buffer_Overflow__sizeof_struct_08.c":73:27)
#loc108 = loc("CWE122_Heap_Based_Buffer_Overflow__sizeof_struct_08.c":73:28)
#loc109 = loc("CWE122_Heap_Based_Buffer_Overflow__sizeof_struct_08.c":73:34)
#loc110 = loc("CWE122_Heap_Based_Buffer_Overflow__sizeof_struct_08.c":73:33)
#loc111 = loc("CWE122_Heap_Based_Buffer_Overflow__sizeof_struct_08.c":74:24)
#loc112 = loc("CWE122_Heap_Based_Buffer_Overflow__sizeof_struct_08.c":74:9)
#loc113 = loc("CWE122_Heap_Based_Buffer_Overflow__sizeof_struct_08.c":75:24)
#loc114 = loc("CWE122_Heap_Based_Buffer_Overflow__sizeof_struct_08.c":75:9)
#loc115 = loc("CWE122_Heap_Based_Buffer_Overflow__sizeof_struct_08.c":78:21)
#loc116 = loc("CWE122_Heap_Based_Buffer_Overflow__sizeof_struct_08.c":78:5)
#loc117 = loc("CWE122_Heap_Based_Buffer_Overflow__sizeof_struct_08.c":79:5)
#loc118 = loc("CWE122_Heap_Based_Buffer_Overflow__sizeof_struct_08.c":79:10)
#loc119 = loc("CWE122_Heap_Based_Buffer_Overflow__sizeof_struct_08.c":28:1)
#loc120 = loc("CWE122_Heap_Based_Buffer_Overflow__sizeof_struct_08.c":31:1)
#loc121 = loc("CWE122_Heap_Based_Buffer_Overflow__sizeof_struct_08.c":30:12)
#loc122 = loc("CWE122_Heap_Based_Buffer_Overflow__sizeof_struct_08.c":30:5)
#loc123 = loc("CWE122_Heap_Based_Buffer_Overflow__sizeof_struct_08.c":83:1)
#loc124 = loc("CWE122_Heap_Based_Buffer_Overflow__sizeof_struct_08.c":99:1)
#loc125 = loc("CWE122_Heap_Based_Buffer_Overflow__sizeof_struct_08.c":85:5)
#loc126 = loc("CWE122_Heap_Based_Buffer_Overflow__sizeof_struct_08.c":85:21)
#loc127 = loc("CWE122_Heap_Based_Buffer_Overflow__sizeof_struct_08.c":87:12)
#loc128 = loc("CWE122_Heap_Based_Buffer_Overflow__sizeof_struct_08.c":87:5)
#loc129 = loc("CWE122_Heap_Based_Buffer_Overflow__sizeof_struct_08.c":88:5)
#loc130 = loc("CWE122_Heap_Based_Buffer_Overflow__sizeof_struct_08.c":95:5)
#loc131 = loc("CWE122_Heap_Based_Buffer_Overflow__sizeof_struct_08.c":88:8)
#loc132 = loc("CWE122_Heap_Based_Buffer_Overflow__sizeof_struct_08.c":88:26)
#loc133 = loc("CWE122_Heap_Based_Buffer_Overflow__sizeof_struct_08.c":89:5)
#loc134 = loc("CWE122_Heap_Based_Buffer_Overflow__sizeof_struct_08.c":91:33)
#loc135 = loc("CWE122_Heap_Based_Buffer_Overflow__sizeof_struct_08.c":91:40)
#loc136 = loc("CWE122_Heap_Based_Buffer_Overflow__sizeof_struct_08.c":91:52)
#loc137 = loc("CWE122_Heap_Based_Buffer_Overflow__sizeof_struct_08.c":91:53)
#loc138 = loc("CWE122_Heap_Based_Buffer_Overflow__sizeof_struct_08.c":91:9)
#loc139 = loc("CWE122_Heap_Based_Buffer_Overflow__sizeof_struct_08.c":92:9)
#loc140 = loc("CWE122_Heap_Based_Buffer_Overflow__sizeof_struct_08.c":92:37)
#loc141 = loc("CWE122_Heap_Based_Buffer_Overflow__sizeof_struct_08.c":92:13)
#loc142 = loc("CWE122_Heap_Based_Buffer_Overflow__sizeof_struct_08.c":92:21)
#loc143 = loc("CWE122_Heap_Based_Buffer_Overflow__sizeof_struct_08.c":92:27)
#loc144 = loc("CWE122_Heap_Based_Buffer_Overflow__sizeof_struct_08.c":92:28)
#loc145 = loc("CWE122_Heap_Based_Buffer_Overflow__sizeof_struct_08.c":92:34)
#loc146 = loc("CWE122_Heap_Based_Buffer_Overflow__sizeof_struct_08.c":92:33)
#loc147 = loc("CWE122_Heap_Based_Buffer_Overflow__sizeof_struct_08.c":93:24)
#loc148 = loc("CWE122_Heap_Based_Buffer_Overflow__sizeof_struct_08.c":93:9)
#loc149 = loc("CWE122_Heap_Based_Buffer_Overflow__sizeof_struct_08.c":94:24)
#loc150 = loc("CWE122_Heap_Based_Buffer_Overflow__sizeof_struct_08.c":94:9)
#loc151 = loc("CWE122_Heap_Based_Buffer_Overflow__sizeof_struct_08.c":97:21)
#loc152 = loc("CWE122_Heap_Based_Buffer_Overflow__sizeof_struct_08.c":97:5)
#loc153 = loc("CWE122_Heap_Based_Buffer_Overflow__sizeof_struct_08.c":98:5)
#loc154 = loc("CWE122_Heap_Based_Buffer_Overflow__sizeof_struct_08.c":98:10)
#loc155 = loc(fused[#loc1, #loc2])
#loc156 = loc(fused[#loc3, #loc4])
#loc157 = loc(fused[#loc5, #loc6])
#loc158 = loc(fused[#loc7, #loc8])
#loc159 = loc(fused[#loc9, #loc10])
#loc160 = loc(fused[#loc11, #loc12])
#loc161 = loc(fused[#loc14, #loc13])
#loc162 = loc(fused[#loc15, #loc16])
#loc163 = loc(fused[#loc17, #loc18])
#loc164 = loc(fused[#loc19, #loc16])
#loc165 = loc(fused[#loc21, #loc22])
#loc166 = loc(fused[#loc20, #loc23])
#loc167 = loc(fused[#loc24, #loc23])
#loc168 = loc(fused[#loc25, #loc26])
#loc169 = loc(fused[#loc27, #loc28])
#loc170 = loc(fused[#loc29, #loc26])
#loc171 = loc(fused[#loc34, #loc33])
#loc172 = loc(fused[#loc37, #loc36])
#loc173 = loc(fused[#loc43, #loc44])
#loc174 = loc(fused[#loc45, #loc46])
#loc175 = loc(fused[#loc47, #loc48])
#loc176 = loc(fused[#loc49, #loc50])
#loc177 = loc(fused[#loc51, #loc52])
#loc178 = loc(fused[#loc53, #loc54])
#loc179 = loc(fused[#loc59, #loc60])
#loc182 = loc(fused[#loc70, #loc71])
#loc183 = loc(fused[#loc74, #loc75])
#loc184 = loc(fused[#loc78, #loc77])
#loc185 = loc(fused[#loc79, #loc80])
#loc186 = loc(fused[#loc82, #loc81])
#loc187 = loc(fused[#loc84, #loc85])
#loc188 = loc(fused[#loc86, #loc87])
#loc189 = loc(fused[#loc89, #loc88])
#loc190 = loc(fused[#loc90, #loc91])
#loc191 = loc(fused[#loc92, #loc93])
#loc192 = loc(fused[#loc94, #loc95, #loc96, #loc91])
#loc193 = loc(fused[#loc99, #loc100])
#loc194 = loc(fused[#loc98, #loc101])
#loc195 = loc(fused[#loc102, #loc101])
#loc196 = loc(fused[#loc103, #loc104])
#loc197 = loc(fused[#loc105, #loc106])
#loc198 = loc(fused[#loc107, #loc104])
#loc199 = loc(fused[#loc112, #loc111])
#loc200 = loc(fused[#loc114, #loc113])
#loc201 = loc(fused[#loc119, #loc120])
#loc202 = loc(fused[#loc122, #loc121])
#loc203 = loc(fused[#loc123, #loc124])
#loc204 = loc(fused[#loc125, #loc126])
#loc205 = loc(fused[#loc128, #loc127])
#loc206 = loc(fused[#loc129, #loc130])
#loc207 = loc(fused[#loc131, #loc132])
#loc208 = loc(fused[#loc133, #loc130])
#loc209 = loc(fused[#loc135, #loc136])
#loc210 = loc(fused[#loc134, #loc137])
#loc211 = loc(fused[#loc138, #loc137])
#loc212 = loc(fused[#loc139, #loc140])
#loc213 = loc(fused[#loc141, #loc142])
#loc214 = loc(fused[#loc143, #loc140])
#loc215 = loc(fused[#loc148, #loc147])
#loc216 = loc(fused[#loc150, #loc149])
