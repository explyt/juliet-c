!s32i = !cir.int<s, 32>
!s8i = !cir.int<s, 8>
!u64i = !cir.int<u, 64>
!void = !cir.void
#fn_attr = #cir<extra({nothrow = #cir.nothrow})>
#fn_attr1 = #cir<extra({inline = #cir.inline<no>, nothrow = #cir.nothrow, optnone = #cir.optnone, uwtable = #cir.uwtable<async>})>
module @"/workspaces/juliet-c/testcases/CWE122_Heap_Based_Buffer_Overflow/s06/CWE122_Heap_Based_Buffer_Overflow__CWE135_31.c" attributes {cir.lang = #cir.lang<c>, cir.sob = #cir.signed_overflow_behavior<undefined>, cir.triple = "x86_64-unknown-linux-gnu", cir.type_size_info = #cir.type_size_info<char = 8, int = 32, size_t = 64>, cir.uwtable = #cir.uwtable<async>, dlti.dl_spec = #dlti.dl_spec<!llvm.ptr<271> = dense<32> : vector<4xi64>, !llvm.ptr<272> = dense<64> : vector<4xi64>, i64 = dense<64> : vector<2xi64>, i32 = dense<32> : vector<2xi64>, !llvm.ptr<270> = dense<32> : vector<4xi64>, f128 = dense<128> : vector<2xi64>, f64 = dense<64> : vector<2xi64>, f16 = dense<16> : vector<2xi64>, i1 = dense<8> : vector<2xi64>, !llvm.ptr = dense<64> : vector<4xi64>, i16 = dense<16> : vector<2xi64>, i8 = dense<8> : vector<2xi64>, i128 = dense<128> : vector<2xi64>, f80 = dense<128> : vector<2xi64>, "dlti.mangling_mode" = "e", "dlti.endianness" = "little", "dlti.stack_alignment" = 128 : i64>} {
  cir.func private @malloc(!u64i) -> !cir.ptr<!void> extra(#fn_attr) loc(#loc233)
  cir.func private @exit(!s32i) extra(#fn_attr) loc(#loc234)
  cir.func private @wmemset(!cir.ptr<!s32i>, !s32i, !u64i) -> !cir.ptr<!s32i> extra(#fn_attr) loc(#loc235)
  cir.func private @strlen(!cir.ptr<!s8i>) -> !u64i extra(#fn_attr) loc(#loc236)
  cir.func private @calloc(!u64i, !u64i) -> !cir.ptr<!void> extra(#fn_attr) loc(#loc237)
  cir.func private @wcscpy(!cir.ptr<!s32i>, !cir.ptr<!s32i>) -> !cir.ptr<!s32i> extra(#fn_attr) loc(#loc238)
  cir.func private @printLine(!cir.ptr<!s8i>) loc(#loc239)
  cir.func private @free(!cir.ptr<!void>) extra(#fn_attr) loc(#loc240)
  cir.func no_proto @CWE122_Heap_Based_Buffer_Overflow__CWE135_31_bad() extra(#fn_attr1) {
    %0 = cir.alloca !cir.ptr<!void>, !cir.ptr<!cir.ptr<!void>>, ["data"] {alignment = 8 : i64} loc(#loc242)
    %1 = cir.const #cir.ptr<null> : !cir.ptr<!void> loc(#loc21)
    cir.store %1, %0 : !cir.ptr<!void>, !cir.ptr<!cir.ptr<!void>> loc(#loc243)
    cir.scope {
      %2 = cir.alloca !cir.ptr<!s32i>, !cir.ptr<!cir.ptr<!s32i>>, ["dataBadBuffer", init] {alignment = 8 : i64} loc(#loc245)
      %3 = cir.get_global @malloc : !cir.ptr<!cir.func<(!u64i) -> !cir.ptr<!void>>> loc(#loc27)
      %4 = cir.const #cir.int<50> : !s32i loc(#loc28)
      %5 = cir.cast(integral, %4 : !s32i), !u64i loc(#loc28)
      %6 = cir.const #cir.int<4> : !u64i loc(#loc246)
      %7 = cir.binop(mul, %5, %6) : !u64i loc(#loc247)
      %8 = cir.call @malloc(%7) : (!u64i) -> !cir.ptr<!void> extra(#fn_attr) loc(#loc27)
      %9 = cir.cast(bitcast, %8 : !cir.ptr<!void>), !cir.ptr<!s32i> loc(#loc248)
      cir.store %9, %2 : !cir.ptr<!s32i>, !cir.ptr<!cir.ptr<!s32i>> loc(#loc245)
      cir.scope {
        %25 = cir.load %2 : !cir.ptr<!cir.ptr<!s32i>>, !cir.ptr<!s32i> loc(#loc33)
        %26 = cir.const #cir.ptr<null> : !cir.ptr<!void> loc(#loc34)
        %27 = cir.cast(bitcast, %26 : !cir.ptr<!void>), !cir.ptr<!s32i> loc(#loc34)
        %28 = cir.cmp(eq, %25, %27) : !cir.ptr<!s32i>, !cir.bool loc(#loc250)
        cir.if %28 {
          %29 = cir.get_global @exit : !cir.ptr<!cir.func<(!s32i)>> loc(#loc36)
          %30 = cir.const #cir.int<1> : !s32i loc(#loc37)
          %31 = cir.unary(minus, %30) nsw : !s32i, !s32i loc(#loc38)
          cir.call @exit(%31) : (!s32i) -> () extra(#fn_attr) loc(#loc36)
        } loc(#loc251)
      } loc(#loc249)
      %10 = cir.load %2 : !cir.ptr<!cir.ptr<!s32i>>, !cir.ptr<!s32i> loc(#loc39)
      %11 = cir.const #cir.int<65> : !s32i loc(#loc40)
      %12 = cir.const #cir.int<50> : !s32i loc(#loc41)
      %13 = cir.const #cir.int<1> : !s32i loc(#loc42)
      %14 = cir.binop(sub, %12, %13) nsw : !s32i loc(#loc41)
      %15 = cir.cast(integral, %14 : !s32i), !u64i loc(#loc41)
      %16 = cir.call @wmemset(%10, %11, %15) : (!cir.ptr<!s32i>, !s32i, !u64i) -> !cir.ptr<!s32i> extra(#fn_attr) loc(#loc43)
      %17 = cir.const #cir.int<0> : !s32i loc(#loc44)
      %18 = cir.load %2 : !cir.ptr<!cir.ptr<!s32i>>, !cir.ptr<!s32i> loc(#loc45)
      %19 = cir.const #cir.int<50> : !s32i loc(#loc46)
      %20 = cir.const #cir.int<1> : !s32i loc(#loc47)
      %21 = cir.binop(sub, %19, %20) nsw : !s32i loc(#loc46)
      %22 = cir.ptr_stride(%18 : !cir.ptr<!s32i>, %21 : !s32i), !cir.ptr<!s32i> loc(#loc48)
      cir.store %17, %22 : !s32i, !cir.ptr<!s32i> loc(#loc252)
      %23 = cir.load %2 : !cir.ptr<!cir.ptr<!s32i>>, !cir.ptr<!s32i> loc(#loc49)
      %24 = cir.cast(bitcast, %23 : !cir.ptr<!s32i>), !cir.ptr<!void> loc(#loc49)
      cir.store %24, %0 : !cir.ptr<!void>, !cir.ptr<!cir.ptr<!void>> loc(#loc253)
    } loc(#loc244)
    cir.scope {
      %2 = cir.alloca !cir.ptr<!void>, !cir.ptr<!cir.ptr<!void>>, ["dataCopy", init] {alignment = 8 : i64} loc(#loc255)
      %3 = cir.alloca !cir.ptr<!void>, !cir.ptr<!cir.ptr<!void>>, ["data", init] {alignment = 8 : i64} loc(#loc256)
      %4 = cir.load %0 : !cir.ptr<!cir.ptr<!void>>, !cir.ptr<!void> loc(#loc54)
      cir.store %4, %2 : !cir.ptr<!void>, !cir.ptr<!cir.ptr<!void>> loc(#loc255)
      %5 = cir.load %2 : !cir.ptr<!cir.ptr<!void>>, !cir.ptr<!void> loc(#loc56)
      cir.store %5, %3 : !cir.ptr<!void>, !cir.ptr<!cir.ptr<!void>> loc(#loc256)
      cir.scope {
        %6 = cir.alloca !u64i, !cir.ptr<!u64i>, ["dataLen", init] {alignment = 8 : i64} loc(#loc258)
        %7 = cir.alloca !cir.ptr<!void>, !cir.ptr<!cir.ptr<!void>>, ["dest", init] {alignment = 8 : i64} loc(#loc259)
        %8 = cir.get_global @strlen : !cir.ptr<!cir.func<(!cir.ptr<!s8i>) -> !u64i>> loc(#loc63)
        %9 = cir.load %3 : !cir.ptr<!cir.ptr<!void>>, !cir.ptr<!void> loc(#loc64)
        %10 = cir.cast(bitcast, %9 : !cir.ptr<!void>), !cir.ptr<!s8i> loc(#loc64)
        %11 = cir.call @strlen(%10) : (!cir.ptr<!s8i>) -> !u64i side_effect(pure) extra(#fn_attr) loc(#loc63)
        cir.store %11, %6 : !u64i, !cir.ptr<!u64i> loc(#loc258)
        %12 = cir.get_global @calloc : !cir.ptr<!cir.func<(!u64i, !u64i) -> !cir.ptr<!void>>> loc(#loc65)
        %13 = cir.load %6 : !cir.ptr<!u64i>, !u64i loc(#loc66)
        %14 = cir.const #cir.int<1> : !s32i loc(#loc67)
        %15 = cir.cast(integral, %14 : !s32i), !u64i loc(#loc67)
        %16 = cir.binop(add, %13, %15) : !u64i loc(#loc260)
        %17 = cir.const #cir.int<4> : !u64i loc(#loc261)
        %18 = cir.call @calloc(%16, %17) : (!u64i, !u64i) -> !cir.ptr<!void> extra(#fn_attr) loc(#loc65)
        cir.store %18, %7 : !cir.ptr<!void>, !cir.ptr<!cir.ptr<!void>> loc(#loc259)
        cir.scope {
          %28 = cir.load %7 : !cir.ptr<!cir.ptr<!void>>, !cir.ptr<!void> loc(#loc72)
          %29 = cir.const #cir.ptr<null> : !cir.ptr<!void> loc(#loc73)
          %30 = cir.cmp(eq, %28, %29) : !cir.ptr<!void>, !cir.bool loc(#loc263)
          cir.if %30 {
            %31 = cir.get_global @exit : !cir.ptr<!cir.func<(!s32i)>> loc(#loc75)
            %32 = cir.const #cir.int<1> : !s32i loc(#loc76)
            %33 = cir.unary(minus, %32) nsw : !s32i, !s32i loc(#loc77)
            cir.call @exit(%33) : (!s32i) -> () extra(#fn_attr) loc(#loc75)
          } loc(#loc264)
        } loc(#loc262)
        %19 = cir.load %7 : !cir.ptr<!cir.ptr<!void>>, !cir.ptr<!void> loc(#loc78)
        %20 = cir.cast(bitcast, %19 : !cir.ptr<!void>), !cir.ptr<!s32i> loc(#loc78)
        %21 = cir.load %3 : !cir.ptr<!cir.ptr<!void>>, !cir.ptr<!void> loc(#loc79)
        %22 = cir.cast(bitcast, %21 : !cir.ptr<!void>), !cir.ptr<!s32i> loc(#loc79)
        %23 = cir.call @wcscpy(%20, %22) : (!cir.ptr<!s32i>, !cir.ptr<!s32i>) -> !cir.ptr<!s32i> extra(#fn_attr) loc(#loc80)
        %24 = cir.load %7 : !cir.ptr<!cir.ptr<!void>>, !cir.ptr<!void> loc(#loc81)
        %25 = cir.cast(bitcast, %24 : !cir.ptr<!void>), !cir.ptr<!s8i> loc(#loc81)
        cir.call @printLine(%25) : (!cir.ptr<!s8i>) -> () loc(#loc82)
        %26 = cir.get_global @free : !cir.ptr<!cir.func<(!cir.ptr<!void>)>> loc(#loc83)
        %27 = cir.load %7 : !cir.ptr<!cir.ptr<!void>>, !cir.ptr<!void> loc(#loc84)
        cir.call @free(%27) : (!cir.ptr<!void>) -> () extra(#fn_attr) loc(#loc83)
      } loc(#loc257)
    } loc(#loc254)
    cir.return loc(#loc18)
  } loc(#loc241)
  cir.func no_proto @CWE122_Heap_Based_Buffer_Overflow__CWE135_31_good() extra(#fn_attr1) {
    %0 = cir.get_global @goodG2B : !cir.ptr<!cir.func<()>> loc(#loc266)
    cir.call %0() : (!cir.ptr<!cir.func<()>>) -> () loc(#loc87)
    %1 = cir.get_global @goodB2G : !cir.ptr<!cir.func<()>> loc(#loc267)
    cir.call %1() : (!cir.ptr<!cir.func<()>>) -> () loc(#loc89)
    cir.return loc(#loc86)
  } loc(#loc265)
  cir.func private @strcpy(!cir.ptr<!s8i>, !cir.ptr<!s8i>) -> !cir.ptr<!s8i> extra(#fn_attr) loc(#loc268)
  cir.func no_proto internal private @goodG2B() extra(#fn_attr1) {
    %0 = cir.alloca !cir.ptr<!void>, !cir.ptr<!cir.ptr<!void>>, ["data"] {alignment = 8 : i64} loc(#loc270)
    %1 = cir.const #cir.ptr<null> : !cir.ptr<!void> loc(#loc97)
    cir.store %1, %0 : !cir.ptr<!void>, !cir.ptr<!cir.ptr<!void>> loc(#loc271)
    cir.scope {
      %2 = cir.alloca !cir.ptr<!s8i>, !cir.ptr<!cir.ptr<!s8i>>, ["dataGoodBuffer", init] {alignment = 8 : i64} loc(#loc273)
      %3 = cir.get_global @malloc : !cir.ptr<!cir.func<(!u64i) -> !cir.ptr<!void>>> loc(#loc103)
      %4 = cir.const #cir.int<50> : !s32i loc(#loc104)
      %5 = cir.cast(integral, %4 : !s32i), !u64i loc(#loc104)
      %6 = cir.const #cir.int<1> : !u64i loc(#loc274)
      %7 = cir.binop(mul, %5, %6) : !u64i loc(#loc275)
      %8 = cir.call @malloc(%7) : (!u64i) -> !cir.ptr<!void> extra(#fn_attr) loc(#loc103)
      %9 = cir.cast(bitcast, %8 : !cir.ptr<!void>), !cir.ptr<!s8i> loc(#loc276)
      cir.store %9, %2 : !cir.ptr<!s8i>, !cir.ptr<!cir.ptr<!s8i>> loc(#loc273)
      cir.scope {
        %26 = cir.load %2 : !cir.ptr<!cir.ptr<!s8i>>, !cir.ptr<!s8i> loc(#loc109)
        %27 = cir.const #cir.ptr<null> : !cir.ptr<!void> loc(#loc110)
        %28 = cir.cast(bitcast, %27 : !cir.ptr<!void>), !cir.ptr<!s8i> loc(#loc110)
        %29 = cir.cmp(eq, %26, %28) : !cir.ptr<!s8i>, !cir.bool loc(#loc278)
        cir.if %29 {
          %30 = cir.get_global @exit : !cir.ptr<!cir.func<(!s32i)>> loc(#loc112)
          %31 = cir.const #cir.int<1> : !s32i loc(#loc113)
          %32 = cir.unary(minus, %31) nsw : !s32i, !s32i loc(#loc114)
          cir.call @exit(%32) : (!s32i) -> () extra(#fn_attr) loc(#loc112)
        } loc(#loc279)
      } loc(#loc277)
      %10 = cir.load %2 : !cir.ptr<!cir.ptr<!s8i>>, !cir.ptr<!s8i> loc(#loc115)
      %11 = cir.cast(bitcast, %10 : !cir.ptr<!s8i>), !cir.ptr<!void> loc(#loc115)
      %12 = cir.const #cir.int<65> : !s32i loc(#loc116)
      %13 = cir.const #cir.int<50> : !s32i loc(#loc117)
      %14 = cir.const #cir.int<1> : !s32i loc(#loc118)
      %15 = cir.binop(sub, %13, %14) nsw : !s32i loc(#loc117)
      %16 = cir.cast(integral, %15 : !s32i), !u64i loc(#loc117)
      cir.libc.memset %16 bytes from %11 set to %12 : !cir.ptr<!void>, !s32i, !u64i loc(#loc280)
      %17 = cir.const #cir.int<0> : !s32i loc(#loc121)
      %18 = cir.cast(integral, %17 : !s32i), !s8i loc(#loc121)
      %19 = cir.load %2 : !cir.ptr<!cir.ptr<!s8i>>, !cir.ptr<!s8i> loc(#loc122)
      %20 = cir.const #cir.int<50> : !s32i loc(#loc123)
      %21 = cir.const #cir.int<1> : !s32i loc(#loc124)
      %22 = cir.binop(sub, %20, %21) nsw : !s32i loc(#loc123)
      %23 = cir.ptr_stride(%19 : !cir.ptr<!s8i>, %22 : !s32i), !cir.ptr<!s8i> loc(#loc125)
      cir.store %18, %23 : !s8i, !cir.ptr<!s8i> loc(#loc281)
      %24 = cir.load %2 : !cir.ptr<!cir.ptr<!s8i>>, !cir.ptr<!s8i> loc(#loc126)
      %25 = cir.cast(bitcast, %24 : !cir.ptr<!s8i>), !cir.ptr<!void> loc(#loc126)
      cir.store %25, %0 : !cir.ptr<!void>, !cir.ptr<!cir.ptr<!void>> loc(#loc282)
    } loc(#loc272)
    cir.scope {
      %2 = cir.alloca !cir.ptr<!void>, !cir.ptr<!cir.ptr<!void>>, ["dataCopy", init] {alignment = 8 : i64} loc(#loc284)
      %3 = cir.alloca !cir.ptr<!void>, !cir.ptr<!cir.ptr<!void>>, ["data", init] {alignment = 8 : i64} loc(#loc285)
      %4 = cir.load %0 : !cir.ptr<!cir.ptr<!void>>, !cir.ptr<!void> loc(#loc131)
      cir.store %4, %2 : !cir.ptr<!void>, !cir.ptr<!cir.ptr<!void>> loc(#loc284)
      %5 = cir.load %2 : !cir.ptr<!cir.ptr<!void>>, !cir.ptr<!void> loc(#loc133)
      cir.store %5, %3 : !cir.ptr<!void>, !cir.ptr<!cir.ptr<!void>> loc(#loc285)
      cir.scope {
        %6 = cir.alloca !u64i, !cir.ptr<!u64i>, ["dataLen", init] {alignment = 8 : i64} loc(#loc287)
        %7 = cir.alloca !cir.ptr<!void>, !cir.ptr<!cir.ptr<!void>>, ["dest", init] {alignment = 8 : i64} loc(#loc288)
        %8 = cir.get_global @strlen : !cir.ptr<!cir.func<(!cir.ptr<!s8i>) -> !u64i>> loc(#loc140)
        %9 = cir.load %3 : !cir.ptr<!cir.ptr<!void>>, !cir.ptr<!void> loc(#loc141)
        %10 = cir.cast(bitcast, %9 : !cir.ptr<!void>), !cir.ptr<!s8i> loc(#loc141)
        %11 = cir.call @strlen(%10) : (!cir.ptr<!s8i>) -> !u64i side_effect(pure) extra(#fn_attr) loc(#loc140)
        cir.store %11, %6 : !u64i, !cir.ptr<!u64i> loc(#loc287)
        %12 = cir.get_global @calloc : !cir.ptr<!cir.func<(!u64i, !u64i) -> !cir.ptr<!void>>> loc(#loc142)
        %13 = cir.load %6 : !cir.ptr<!u64i>, !u64i loc(#loc143)
        %14 = cir.const #cir.int<1> : !s32i loc(#loc144)
        %15 = cir.cast(integral, %14 : !s32i), !u64i loc(#loc144)
        %16 = cir.binop(add, %13, %15) : !u64i loc(#loc289)
        %17 = cir.const #cir.int<1> : !s32i loc(#loc145)
        %18 = cir.cast(integral, %17 : !s32i), !u64i loc(#loc145)
        %19 = cir.call @calloc(%16, %18) : (!u64i, !u64i) -> !cir.ptr<!void> extra(#fn_attr) loc(#loc142)
        cir.store %19, %7 : !cir.ptr<!void>, !cir.ptr<!cir.ptr<!void>> loc(#loc288)
        cir.scope {
          %30 = cir.load %7 : !cir.ptr<!cir.ptr<!void>>, !cir.ptr<!void> loc(#loc148)
          %31 = cir.const #cir.ptr<null> : !cir.ptr<!void> loc(#loc149)
          %32 = cir.cmp(eq, %30, %31) : !cir.ptr<!void>, !cir.bool loc(#loc291)
          cir.if %32 {
            %33 = cir.get_global @exit : !cir.ptr<!cir.func<(!s32i)>> loc(#loc151)
            %34 = cir.const #cir.int<1> : !s32i loc(#loc152)
            %35 = cir.unary(minus, %34) nsw : !s32i, !s32i loc(#loc153)
            cir.call @exit(%35) : (!s32i) -> () extra(#fn_attr) loc(#loc151)
          } loc(#loc292)
        } loc(#loc290)
        %20 = cir.get_global @strcpy : !cir.ptr<!cir.func<(!cir.ptr<!s8i>, !cir.ptr<!s8i>) -> !cir.ptr<!s8i>>> loc(#loc154)
        %21 = cir.load %7 : !cir.ptr<!cir.ptr<!void>>, !cir.ptr<!void> loc(#loc155)
        %22 = cir.cast(bitcast, %21 : !cir.ptr<!void>), !cir.ptr<!s8i> loc(#loc155)
        %23 = cir.load %3 : !cir.ptr<!cir.ptr<!void>>, !cir.ptr<!void> loc(#loc156)
        %24 = cir.cast(bitcast, %23 : !cir.ptr<!void>), !cir.ptr<!s8i> loc(#loc156)
        %25 = cir.call @strcpy(%22, %24) : (!cir.ptr<!s8i>, !cir.ptr<!s8i>) -> !cir.ptr<!s8i> extra(#fn_attr) loc(#loc154)
        %26 = cir.load %7 : !cir.ptr<!cir.ptr<!void>>, !cir.ptr<!void> loc(#loc157)
        %27 = cir.cast(bitcast, %26 : !cir.ptr<!void>), !cir.ptr<!s8i> loc(#loc157)
        cir.call @printLine(%27) : (!cir.ptr<!s8i>) -> () loc(#loc158)
        %28 = cir.get_global @free : !cir.ptr<!cir.func<(!cir.ptr<!void>)>> loc(#loc159)
        %29 = cir.load %7 : !cir.ptr<!cir.ptr<!void>>, !cir.ptr<!void> loc(#loc160)
        cir.call @free(%29) : (!cir.ptr<!void>) -> () extra(#fn_attr) loc(#loc159)
      } loc(#loc286)
    } loc(#loc283)
    cir.return loc(#loc94)
  } loc(#loc269)
  cir.func private @wcslen(!cir.ptr<!s32i>) -> !u64i extra(#fn_attr) loc(#loc293)
  cir.func private @printWLine(!cir.ptr<!s32i>) loc(#loc294)
  cir.func no_proto internal private @goodB2G() extra(#fn_attr1) {
    %0 = cir.alloca !cir.ptr<!void>, !cir.ptr<!cir.ptr<!void>>, ["data"] {alignment = 8 : i64} loc(#loc296)
    %1 = cir.const #cir.ptr<null> : !cir.ptr<!void> loc(#loc169)
    cir.store %1, %0 : !cir.ptr<!void>, !cir.ptr<!cir.ptr<!void>> loc(#loc297)
    cir.scope {
      %2 = cir.alloca !cir.ptr<!s32i>, !cir.ptr<!cir.ptr<!s32i>>, ["dataBadBuffer", init] {alignment = 8 : i64} loc(#loc299)
      %3 = cir.get_global @malloc : !cir.ptr<!cir.func<(!u64i) -> !cir.ptr<!void>>> loc(#loc175)
      %4 = cir.const #cir.int<50> : !s32i loc(#loc176)
      %5 = cir.cast(integral, %4 : !s32i), !u64i loc(#loc176)
      %6 = cir.const #cir.int<4> : !u64i loc(#loc300)
      %7 = cir.binop(mul, %5, %6) : !u64i loc(#loc301)
      %8 = cir.call @malloc(%7) : (!u64i) -> !cir.ptr<!void> extra(#fn_attr) loc(#loc175)
      %9 = cir.cast(bitcast, %8 : !cir.ptr<!void>), !cir.ptr<!s32i> loc(#loc302)
      cir.store %9, %2 : !cir.ptr<!s32i>, !cir.ptr<!cir.ptr<!s32i>> loc(#loc299)
      cir.scope {
        %25 = cir.load %2 : !cir.ptr<!cir.ptr<!s32i>>, !cir.ptr<!s32i> loc(#loc181)
        %26 = cir.const #cir.ptr<null> : !cir.ptr<!void> loc(#loc182)
        %27 = cir.cast(bitcast, %26 : !cir.ptr<!void>), !cir.ptr<!s32i> loc(#loc182)
        %28 = cir.cmp(eq, %25, %27) : !cir.ptr<!s32i>, !cir.bool loc(#loc304)
        cir.if %28 {
          %29 = cir.get_global @exit : !cir.ptr<!cir.func<(!s32i)>> loc(#loc184)
          %30 = cir.const #cir.int<1> : !s32i loc(#loc185)
          %31 = cir.unary(minus, %30) nsw : !s32i, !s32i loc(#loc186)
          cir.call @exit(%31) : (!s32i) -> () extra(#fn_attr) loc(#loc184)
        } loc(#loc305)
      } loc(#loc303)
      %10 = cir.load %2 : !cir.ptr<!cir.ptr<!s32i>>, !cir.ptr<!s32i> loc(#loc187)
      %11 = cir.const #cir.int<65> : !s32i loc(#loc188)
      %12 = cir.const #cir.int<50> : !s32i loc(#loc189)
      %13 = cir.const #cir.int<1> : !s32i loc(#loc190)
      %14 = cir.binop(sub, %12, %13) nsw : !s32i loc(#loc189)
      %15 = cir.cast(integral, %14 : !s32i), !u64i loc(#loc189)
      %16 = cir.call @wmemset(%10, %11, %15) : (!cir.ptr<!s32i>, !s32i, !u64i) -> !cir.ptr<!s32i> extra(#fn_attr) loc(#loc191)
      %17 = cir.const #cir.int<0> : !s32i loc(#loc192)
      %18 = cir.load %2 : !cir.ptr<!cir.ptr<!s32i>>, !cir.ptr<!s32i> loc(#loc193)
      %19 = cir.const #cir.int<50> : !s32i loc(#loc194)
      %20 = cir.const #cir.int<1> : !s32i loc(#loc195)
      %21 = cir.binop(sub, %19, %20) nsw : !s32i loc(#loc194)
      %22 = cir.ptr_stride(%18 : !cir.ptr<!s32i>, %21 : !s32i), !cir.ptr<!s32i> loc(#loc196)
      cir.store %17, %22 : !s32i, !cir.ptr<!s32i> loc(#loc306)
      %23 = cir.load %2 : !cir.ptr<!cir.ptr<!s32i>>, !cir.ptr<!s32i> loc(#loc197)
      %24 = cir.cast(bitcast, %23 : !cir.ptr<!s32i>), !cir.ptr<!void> loc(#loc197)
      cir.store %24, %0 : !cir.ptr<!void>, !cir.ptr<!cir.ptr<!void>> loc(#loc307)
    } loc(#loc298)
    cir.scope {
      %2 = cir.alloca !cir.ptr<!void>, !cir.ptr<!cir.ptr<!void>>, ["dataCopy", init] {alignment = 8 : i64} loc(#loc309)
      %3 = cir.alloca !cir.ptr<!void>, !cir.ptr<!cir.ptr<!void>>, ["data", init] {alignment = 8 : i64} loc(#loc310)
      %4 = cir.load %0 : !cir.ptr<!cir.ptr<!void>>, !cir.ptr<!void> loc(#loc202)
      cir.store %4, %2 : !cir.ptr<!void>, !cir.ptr<!cir.ptr<!void>> loc(#loc309)
      %5 = cir.load %2 : !cir.ptr<!cir.ptr<!void>>, !cir.ptr<!void> loc(#loc204)
      cir.store %5, %3 : !cir.ptr<!void>, !cir.ptr<!cir.ptr<!void>> loc(#loc310)
      cir.scope {
        %6 = cir.alloca !u64i, !cir.ptr<!u64i>, ["dataLen", init] {alignment = 8 : i64} loc(#loc312)
        %7 = cir.alloca !cir.ptr<!void>, !cir.ptr<!cir.ptr<!void>>, ["dest", init] {alignment = 8 : i64} loc(#loc313)
        %8 = cir.get_global @wcslen : !cir.ptr<!cir.func<(!cir.ptr<!s32i>) -> !u64i>> loc(#loc211)
        %9 = cir.load %3 : !cir.ptr<!cir.ptr<!void>>, !cir.ptr<!void> loc(#loc212)
        %10 = cir.cast(bitcast, %9 : !cir.ptr<!void>), !cir.ptr<!s32i> loc(#loc212)
        %11 = cir.call @wcslen(%10) : (!cir.ptr<!s32i>) -> !u64i side_effect(pure) extra(#fn_attr) loc(#loc211)
        cir.store %11, %6 : !u64i, !cir.ptr<!u64i> loc(#loc312)
        %12 = cir.get_global @calloc : !cir.ptr<!cir.func<(!u64i, !u64i) -> !cir.ptr<!void>>> loc(#loc213)
        %13 = cir.load %6 : !cir.ptr<!u64i>, !u64i loc(#loc214)
        %14 = cir.const #cir.int<1> : !s32i loc(#loc215)
        %15 = cir.cast(integral, %14 : !s32i), !u64i loc(#loc215)
        %16 = cir.binop(add, %13, %15) : !u64i loc(#loc314)
        %17 = cir.const #cir.int<4> : !u64i loc(#loc315)
        %18 = cir.call @calloc(%16, %17) : (!u64i, !u64i) -> !cir.ptr<!void> extra(#fn_attr) loc(#loc213)
        cir.store %18, %7 : !cir.ptr<!void>, !cir.ptr<!cir.ptr<!void>> loc(#loc313)
        cir.scope {
          %28 = cir.load %7 : !cir.ptr<!cir.ptr<!void>>, !cir.ptr<!void> loc(#loc220)
          %29 = cir.const #cir.ptr<null> : !cir.ptr<!void> loc(#loc221)
          %30 = cir.cmp(eq, %28, %29) : !cir.ptr<!void>, !cir.bool loc(#loc317)
          cir.if %30 {
            %31 = cir.get_global @exit : !cir.ptr<!cir.func<(!s32i)>> loc(#loc223)
            %32 = cir.const #cir.int<1> : !s32i loc(#loc224)
            %33 = cir.unary(minus, %32) nsw : !s32i, !s32i loc(#loc225)
            cir.call @exit(%33) : (!s32i) -> () extra(#fn_attr) loc(#loc223)
          } loc(#loc318)
        } loc(#loc316)
        %19 = cir.load %7 : !cir.ptr<!cir.ptr<!void>>, !cir.ptr<!void> loc(#loc226)
        %20 = cir.cast(bitcast, %19 : !cir.ptr<!void>), !cir.ptr<!s32i> loc(#loc226)
        %21 = cir.load %3 : !cir.ptr<!cir.ptr<!void>>, !cir.ptr<!void> loc(#loc227)
        %22 = cir.cast(bitcast, %21 : !cir.ptr<!void>), !cir.ptr<!s32i> loc(#loc227)
        %23 = cir.call @wcscpy(%20, %22) : (!cir.ptr<!s32i>, !cir.ptr<!s32i>) -> !cir.ptr<!s32i> extra(#fn_attr) loc(#loc228)
        %24 = cir.load %7 : !cir.ptr<!cir.ptr<!void>>, !cir.ptr<!void> loc(#loc229)
        %25 = cir.cast(bitcast, %24 : !cir.ptr<!void>), !cir.ptr<!s32i> loc(#loc229)
        cir.call @printWLine(%25) : (!cir.ptr<!s32i>) -> () loc(#loc230)
        %26 = cir.get_global @free : !cir.ptr<!cir.func<(!cir.ptr<!void>)>> loc(#loc231)
        %27 = cir.load %7 : !cir.ptr<!cir.ptr<!void>>, !cir.ptr<!void> loc(#loc232)
        cir.call @free(%27) : (!cir.ptr<!void>) -> () extra(#fn_attr) loc(#loc231)
      } loc(#loc311)
    } loc(#loc308)
    cir.return loc(#loc166)
  } loc(#loc295)
} loc(#loc)
#loc = loc("/workspaces/juliet-c/testcases/CWE122_Heap_Based_Buffer_Overflow/s06/CWE122_Heap_Based_Buffer_Overflow__CWE135_31.c":0:0)
#loc1 = loc("/usr/include/stdlib.h":672:1)
#loc2 = loc("/usr/include/stdlib.h":672:45)
#loc3 = loc("/usr/include/stdlib.h":756:1)
#loc4 = loc("/usr/include/stdlib.h":756:70)
#loc5 = loc("/usr/include/wchar.h":296:1)
#loc6 = loc("/usr/include/wchar.h":296:65)
#loc7 = loc("/usr/include/string.h":407:1)
#loc8 = loc("/usr/include/string.h":408:33)
#loc9 = loc("/usr/include/stdlib.h":675:1)
#loc10 = loc("/usr/include/stdlib.h":676:14)
#loc11 = loc("/usr/include/wchar.h":98:1)
#loc12 = loc("/usr/include/wchar.h":100:14)
#loc13 = loc("../../../testcasesupport/std_testcase_io.h":14:1)
#loc14 = loc("../../../testcasesupport/std_testcase_io.h":14:33)
#loc15 = loc("/usr/include/stdlib.h":687:1)
#loc16 = loc("/usr/include/stdlib.h":687:32)
#loc17 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE135_31.c":24:1)
#loc18 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE135_31.c":49:1)
#loc19 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE135_31.c":26:5)
#loc20 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE135_31.c":26:12)
#loc21 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE135_31.c":27:12)
#loc22 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE135_31.c":27:5)
#loc23 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE135_31.c":28:5)
#loc24 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE135_31.c":35:5)
#loc25 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE135_31.c":29:9)
#loc26 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE135_31.c":29:71)
#loc27 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE135_31.c":29:46)
#loc28 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE135_31.c":29:53)
#loc29 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE135_31.c":29:56)
#loc30 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE135_31.c":29:70)
#loc31 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE135_31.c":30:9)
#loc32 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE135_31.c":30:46)
#loc33 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE135_31.c":30:13)
#loc34 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE135_31.c":30:30)
#loc35 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE135_31.c":30:36)
#loc36 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE135_31.c":30:37)
#loc37 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE135_31.c":30:43)
#loc38 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE135_31.c":30:42)
#loc39 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE135_31.c":31:17)
#loc40 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE135_31.c":31:32)
#loc41 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE135_31.c":31:38)
#loc42 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE135_31.c":31:41)
#loc43 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE135_31.c":31:9)
#loc44 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE135_31.c":32:31)
#loc45 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE135_31.c":32:9)
#loc46 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE135_31.c":32:23)
#loc47 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE135_31.c":32:26)
#loc48 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE135_31.c":32:27)
#loc49 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE135_31.c":34:24)
#loc50 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE135_31.c":34:9)
#loc51 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE135_31.c":36:5)
#loc52 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE135_31.c":48:5)
#loc53 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE135_31.c":37:9)
#loc54 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE135_31.c":37:27)
#loc55 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE135_31.c":38:9)
#loc56 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE135_31.c":38:23)
#loc57 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE135_31.c":39:9)
#loc58 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE135_31.c":47:9)
#loc59 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE135_31.c":41:13)
#loc60 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE135_31.c":41:49)
#loc61 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE135_31.c":42:13)
#loc62 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE135_31.c":42:68)
#loc63 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE135_31.c":41:30)
#loc64 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE135_31.c":41:45)
#loc65 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE135_31.c":42:35)
#loc66 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE135_31.c":42:42)
#loc67 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE135_31.c":42:50)
#loc68 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE135_31.c":42:53)
#loc69 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE135_31.c":42:67)
#loc70 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE135_31.c":43:13)
#loc71 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE135_31.c":43:41)
#loc72 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE135_31.c":43:17)
#loc73 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE135_31.c":43:25)
#loc74 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE135_31.c":43:31)
#loc75 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE135_31.c":43:32)
#loc76 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE135_31.c":43:38)
#loc77 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE135_31.c":43:37)
#loc78 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE135_31.c":44:26)
#loc79 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE135_31.c":44:32)
#loc80 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE135_31.c":44:19)
#loc81 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE135_31.c":45:31)
#loc82 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE135_31.c":45:13)
#loc83 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE135_31.c":46:13)
#loc84 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE135_31.c":46:18)
#loc85 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE135_31.c":111:1)
#loc86 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE135_31.c":115:1)
#loc87 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE135_31.c":113:5)
#loc88 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE135_31.c":113:13)
#loc89 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE135_31.c":114:5)
#loc90 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE135_31.c":114:13)
#loc91 = loc("/usr/include/string.h":141:1)
#loc92 = loc("/usr/include/string.h":142:14)
#loc93 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE135_31.c":56:1)
#loc94 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE135_31.c":81:1)
#loc95 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE135_31.c":58:5)
#loc96 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE135_31.c":58:12)
#loc97 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE135_31.c":59:12)
#loc98 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE135_31.c":59:5)
#loc99 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE135_31.c":60:5)
#loc100 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE135_31.c":67:5)
#loc101 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE135_31.c":61:9)
#loc102 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE135_31.c":61:63)
#loc103 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE135_31.c":61:41)
#loc104 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE135_31.c":61:48)
#loc105 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE135_31.c":61:51)
#loc106 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE135_31.c":61:62)
#loc107 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE135_31.c":62:9)
#loc108 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE135_31.c":62:47)
#loc109 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE135_31.c":62:13)
#loc110 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE135_31.c":62:31)
#loc111 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE135_31.c":62:37)
#loc112 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE135_31.c":62:38)
#loc113 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE135_31.c":62:44)
#loc114 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE135_31.c":62:43)
#loc115 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE135_31.c":63:16)
#loc116 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE135_31.c":63:32)
#loc117 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE135_31.c":63:37)
#loc118 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE135_31.c":63:40)
#loc119 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE135_31.c":63:9)
#loc120 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE135_31.c":63:41)
#loc121 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE135_31.c":64:32)
#loc122 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE135_31.c":64:9)
#loc123 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE135_31.c":64:24)
#loc124 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE135_31.c":64:27)
#loc125 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE135_31.c":64:28)
#loc126 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE135_31.c":66:24)
#loc127 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE135_31.c":66:9)
#loc128 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE135_31.c":68:5)
#loc129 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE135_31.c":80:5)
#loc130 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE135_31.c":69:9)
#loc131 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE135_31.c":69:27)
#loc132 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE135_31.c":70:9)
#loc133 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE135_31.c":70:23)
#loc134 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE135_31.c":71:9)
#loc135 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE135_31.c":79:9)
#loc136 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE135_31.c":73:13)
#loc137 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE135_31.c":73:49)
#loc138 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE135_31.c":74:13)
#loc139 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE135_31.c":74:54)
#loc140 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE135_31.c":73:30)
#loc141 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE135_31.c":73:45)
#loc142 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE135_31.c":74:35)
#loc143 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE135_31.c":74:42)
#loc144 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE135_31.c":74:50)
#loc145 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE135_31.c":74:53)
#loc146 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE135_31.c":75:13)
#loc147 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE135_31.c":75:41)
#loc148 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE135_31.c":75:17)
#loc149 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE135_31.c":75:25)
#loc150 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE135_31.c":75:31)
#loc151 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE135_31.c":75:32)
#loc152 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE135_31.c":75:38)
#loc153 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE135_31.c":75:37)
#loc154 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE135_31.c":76:19)
#loc155 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE135_31.c":76:26)
#loc156 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE135_31.c":76:32)
#loc157 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE135_31.c":77:31)
#loc158 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE135_31.c":77:13)
#loc159 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE135_31.c":78:13)
#loc160 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE135_31.c":78:18)
#loc161 = loc("/usr/include/wchar.h":247:1)
#loc162 = loc("/usr/include/wchar.h":247:51)
#loc163 = loc("../../../testcasesupport/std_testcase_io.h":16:1)
#loc164 = loc("../../../testcasesupport/std_testcase_io.h":16:37)
#loc165 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE135_31.c":84:1)
#loc166 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE135_31.c":109:1)
#loc167 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE135_31.c":86:5)
#loc168 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE135_31.c":86:12)
#loc169 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE135_31.c":87:12)
#loc170 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE135_31.c":87:5)
#loc171 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE135_31.c":88:5)
#loc172 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE135_31.c":95:5)
#loc173 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE135_31.c":89:9)
#loc174 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE135_31.c":89:71)
#loc175 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE135_31.c":89:46)
#loc176 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE135_31.c":89:53)
#loc177 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE135_31.c":89:56)
#loc178 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE135_31.c":89:70)
#loc179 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE135_31.c":90:9)
#loc180 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE135_31.c":90:46)
#loc181 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE135_31.c":90:13)
#loc182 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE135_31.c":90:30)
#loc183 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE135_31.c":90:36)
#loc184 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE135_31.c":90:37)
#loc185 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE135_31.c":90:43)
#loc186 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE135_31.c":90:42)
#loc187 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE135_31.c":91:17)
#loc188 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE135_31.c":91:32)
#loc189 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE135_31.c":91:38)
#loc190 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE135_31.c":91:41)
#loc191 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE135_31.c":91:9)
#loc192 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE135_31.c":92:31)
#loc193 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE135_31.c":92:9)
#loc194 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE135_31.c":92:23)
#loc195 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE135_31.c":92:26)
#loc196 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE135_31.c":92:27)
#loc197 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE135_31.c":94:24)
#loc198 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE135_31.c":94:9)
#loc199 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE135_31.c":96:5)
#loc200 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE135_31.c":108:5)
#loc201 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE135_31.c":97:9)
#loc202 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE135_31.c":97:27)
#loc203 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE135_31.c":98:9)
#loc204 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE135_31.c":98:23)
#loc205 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE135_31.c":99:9)
#loc206 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE135_31.c":107:9)
#loc207 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE135_31.c":101:13)
#loc208 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE135_31.c":101:52)
#loc209 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE135_31.c":102:13)
#loc210 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE135_31.c":102:68)
#loc211 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE135_31.c":101:30)
#loc212 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE135_31.c":101:48)
#loc213 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE135_31.c":102:35)
#loc214 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE135_31.c":102:42)
#loc215 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE135_31.c":102:50)
#loc216 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE135_31.c":102:53)
#loc217 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE135_31.c":102:67)
#loc218 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE135_31.c":103:13)
#loc219 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE135_31.c":103:41)
#loc220 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE135_31.c":103:17)
#loc221 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE135_31.c":103:25)
#loc222 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE135_31.c":103:31)
#loc223 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE135_31.c":103:32)
#loc224 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE135_31.c":103:38)
#loc225 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE135_31.c":103:37)
#loc226 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE135_31.c":104:26)
#loc227 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE135_31.c":104:32)
#loc228 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE135_31.c":104:19)
#loc229 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE135_31.c":105:35)
#loc230 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE135_31.c":105:13)
#loc231 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE135_31.c":106:13)
#loc232 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE135_31.c":106:18)
#loc233 = loc(fused[#loc1, #loc2])
#loc234 = loc(fused[#loc3, #loc4])
#loc235 = loc(fused[#loc5, #loc6])
#loc236 = loc(fused[#loc7, #loc8])
#loc237 = loc(fused[#loc9, #loc10])
#loc238 = loc(fused[#loc11, #loc12])
#loc239 = loc(fused[#loc13, #loc14])
#loc240 = loc(fused[#loc15, #loc16])
#loc241 = loc(fused[#loc17, #loc18])
#loc242 = loc(fused[#loc19, #loc20])
#loc243 = loc(fused[#loc22, #loc21])
#loc244 = loc(fused[#loc23, #loc24])
#loc245 = loc(fused[#loc25, #loc26])
#loc246 = loc(fused[#loc29, #loc30])
#loc247 = loc(fused[#loc28, #loc30])
#loc248 = loc(fused[#loc27, #loc26])
#loc249 = loc(fused[#loc31, #loc32])
#loc250 = loc(fused[#loc33, #loc34])
#loc251 = loc(fused[#loc35, #loc32])
#loc252 = loc(fused[#loc45, #loc44])
#loc253 = loc(fused[#loc50, #loc49])
#loc254 = loc(fused[#loc51, #loc52])
#loc255 = loc(fused[#loc53, #loc54])
#loc256 = loc(fused[#loc55, #loc56])
#loc257 = loc(fused[#loc57, #loc58])
#loc258 = loc(fused[#loc59, #loc60])
#loc259 = loc(fused[#loc61, #loc62])
#loc260 = loc(fused[#loc66, #loc67])
#loc261 = loc(fused[#loc68, #loc69])
#loc262 = loc(fused[#loc70, #loc71])
#loc263 = loc(fused[#loc72, #loc73])
#loc264 = loc(fused[#loc74, #loc71])
#loc265 = loc(fused[#loc85, #loc86])
#loc266 = loc(fused[#loc87, #loc88])
#loc267 = loc(fused[#loc89, #loc90])
#loc268 = loc(fused[#loc91, #loc92])
#loc269 = loc(fused[#loc93, #loc94])
#loc270 = loc(fused[#loc95, #loc96])
#loc271 = loc(fused[#loc98, #loc97])
#loc272 = loc(fused[#loc99, #loc100])
#loc273 = loc(fused[#loc101, #loc102])
#loc274 = loc(fused[#loc105, #loc106])
#loc275 = loc(fused[#loc104, #loc106])
#loc276 = loc(fused[#loc103, #loc102])
#loc277 = loc(fused[#loc107, #loc108])
#loc278 = loc(fused[#loc109, #loc110])
#loc279 = loc(fused[#loc111, #loc108])
#loc280 = loc(fused[#loc119, #loc120])
#loc281 = loc(fused[#loc122, #loc121])
#loc282 = loc(fused[#loc127, #loc126])
#loc283 = loc(fused[#loc128, #loc129])
#loc284 = loc(fused[#loc130, #loc131])
#loc285 = loc(fused[#loc132, #loc133])
#loc286 = loc(fused[#loc134, #loc135])
#loc287 = loc(fused[#loc136, #loc137])
#loc288 = loc(fused[#loc138, #loc139])
#loc289 = loc(fused[#loc143, #loc144])
#loc290 = loc(fused[#loc146, #loc147])
#loc291 = loc(fused[#loc148, #loc149])
#loc292 = loc(fused[#loc150, #loc147])
#loc293 = loc(fused[#loc161, #loc162])
#loc294 = loc(fused[#loc163, #loc164])
#loc295 = loc(fused[#loc165, #loc166])
#loc296 = loc(fused[#loc167, #loc168])
#loc297 = loc(fused[#loc170, #loc169])
#loc298 = loc(fused[#loc171, #loc172])
#loc299 = loc(fused[#loc173, #loc174])
#loc300 = loc(fused[#loc177, #loc178])
#loc301 = loc(fused[#loc176, #loc178])
#loc302 = loc(fused[#loc175, #loc174])
#loc303 = loc(fused[#loc179, #loc180])
#loc304 = loc(fused[#loc181, #loc182])
#loc305 = loc(fused[#loc183, #loc180])
#loc306 = loc(fused[#loc193, #loc192])
#loc307 = loc(fused[#loc198, #loc197])
#loc308 = loc(fused[#loc199, #loc200])
#loc309 = loc(fused[#loc201, #loc202])
#loc310 = loc(fused[#loc203, #loc204])
#loc311 = loc(fused[#loc205, #loc206])
#loc312 = loc(fused[#loc207, #loc208])
#loc313 = loc(fused[#loc209, #loc210])
#loc314 = loc(fused[#loc214, #loc215])
#loc315 = loc(fused[#loc216, #loc217])
#loc316 = loc(fused[#loc218, #loc219])
#loc317 = loc(fused[#loc220, #loc221])
#loc318 = loc(fused[#loc222, #loc219])
