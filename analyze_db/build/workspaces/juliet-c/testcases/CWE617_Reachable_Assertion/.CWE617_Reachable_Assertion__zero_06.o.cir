!s32i = !cir.int<s, 32>
!s8i = !cir.int<s, 8>
!u32i = !cir.int<u, 32>
!u64i = !cir.int<u, 64>
#fn_attr = #cir<extra({nothrow = #cir.nothrow})>
#fn_attr1 = #cir<extra({inline = #cir.inline<no>, nothrow = #cir.nothrow, optnone = #cir.optnone, uwtable = #cir.uwtable<async>})>
module @"/workspaces/juliet-c/testcases/CWE617_Reachable_Assertion/CWE617_Reachable_Assertion__zero_06.c" attributes {cir.lang = #cir.lang<c>, cir.sob = #cir.signed_overflow_behavior<undefined>, cir.triple = "x86_64-unknown-linux-gnu", cir.type_size_info = #cir.type_size_info<char = 8, int = 32, size_t = 64>, cir.uwtable = #cir.uwtable<async>, dlti.dl_spec = #dlti.dl_spec<f64 = dense<64> : vector<2xi64>, !llvm.ptr<270> = dense<32> : vector<4xi64>, f128 = dense<128> : vector<2xi64>, i16 = dense<16> : vector<2xi64>, !llvm.ptr<272> = dense<64> : vector<4xi64>, i32 = dense<32> : vector<2xi64>, !llvm.ptr<271> = dense<32> : vector<4xi64>, f16 = dense<16> : vector<2xi64>, !llvm.ptr = dense<64> : vector<4xi64>, i1 = dense<8> : vector<2xi64>, i8 = dense<8> : vector<2xi64>, i64 = dense<64> : vector<2xi64>, i128 = dense<128> : vector<2xi64>, f80 = dense<128> : vector<2xi64>, "dlti.mangling_mode" = "e", "dlti.endianness" = "little", "dlti.stack_alignment" = 128 : i64>} {
  cir.func private @__assert_fail(!cir.ptr<!s8i>, !cir.ptr<!s8i>, !u32i, !cir.ptr<!s8i>) extra(#fn_attr) loc(#loc39)
  cir.global "private" constant cir_private dsolocal @".str" = #cir.const_array<"0\00" : !cir.array<!s8i x 2>> : !cir.array<!s8i x 2> {alignment = 1 : i64} loc(#loc3)
  cir.global "private" constant cir_private dsolocal @".str.1" = #cir.const_array<"CWE617_Reachable_Assertion__zero_06.c\00" : !cir.array<!s8i x 38>> : !cir.array<!s8i x 38> {alignment = 1 : i64} loc(#loc3)
  cir.global "private" constant cir_private dsolocal @".str.2" = #cir.const_array<"void CWE617_Reachable_Assertion__zero_06_bad()\00" : !cir.array<!s8i x 47>> : !cir.array<!s8i x 47> {alignment = 1 : i64} loc(#loc3)
  cir.func no_proto @CWE617_Reachable_Assertion__zero_06_bad() extra(#fn_attr1) {
    cir.br ^bb1 loc(#loc41)
  ^bb1:  // pred: ^bb0
    %0 = cir.const #cir.int<5> : !s32i loc(#loc8)
    %1 = cir.const #cir.int<5> : !s32i loc(#loc9)
    %2 = cir.cmp(eq, %0, %1) : !s32i, !cir.bool loc(#loc42)
    cir.brcond %2 ^bb2, ^bb10 loc(#loc43)
  ^bb2:  // pred: ^bb1
    %3 = cir.const #cir.int<4> : !u64i loc(#loc3)
    cir.br ^bb3 loc(#loc3)
  ^bb3:  // pred: ^bb2
    cir.br ^bb4 loc(#loc3)
  ^bb4:  // pred: ^bb3
    %4 = cir.const #cir.int<0> : !s32i loc(#loc3)
    %5 = cir.cast(int_to_bool, %4 : !s32i), !cir.bool loc(#loc3)
    cir.brcond %5 ^bb5, ^bb6 loc(#loc3)
  ^bb5:  // pred: ^bb4
    cir.br ^bb7 loc(#loc3)
  ^bb6:  // pred: ^bb4
    %6 = cir.get_global @".str" : !cir.ptr<!cir.array<!s8i x 2>> loc(#loc3)
    %7 = cir.cast(array_to_ptrdecay, %6 : !cir.ptr<!cir.array<!s8i x 2>>), !cir.ptr<!s8i> loc(#loc3)
    %8 = cir.get_global @".str.1" : !cir.ptr<!cir.array<!s8i x 38>> loc(#loc3)
    %9 = cir.cast(array_to_ptrdecay, %8 : !cir.ptr<!cir.array<!s8i x 38>>), !cir.ptr<!s8i> loc(#loc3)
    %10 = cir.const #cir.int<32> : !s32i loc(#loc3)
    %11 = cir.cast(integral, %10 : !s32i), !u32i loc(#loc3)
    %12 = cir.get_global @".str.2" : !cir.ptr<!cir.array<!s8i x 47>> loc(#loc3)
    %13 = cir.cast(array_to_ptrdecay, %12 : !cir.ptr<!cir.array<!s8i x 47>>), !cir.ptr<!s8i> loc(#loc3)
    cir.call @__assert_fail(%7, %9, %11, %13) : (!cir.ptr<!s8i>, !cir.ptr<!s8i>, !u32i, !cir.ptr<!s8i>) -> () extra(#fn_attr) loc(#loc3)
    cir.br ^bb7 loc(#loc3)
  ^bb7:  // 2 preds: ^bb5, ^bb6
    cir.br ^bb8 loc(#loc3)
  ^bb8:  // pred: ^bb7
    cir.br ^bb9 loc(#loc3)
  ^bb9:  // pred: ^bb8
    cir.br ^bb10 loc(#loc7)
  ^bb10:  // 2 preds: ^bb1, ^bb9
    cir.br ^bb11 loc(#loc7)
  ^bb11:  // pred: ^bb10
    cir.return loc(#loc5)
  } loc(#loc40)
  cir.func no_proto @CWE617_Reachable_Assertion__zero_06_good() extra(#fn_attr1) {
    %0 = cir.get_global @good1 : !cir.ptr<!cir.func<()>> loc(#loc45)
    cir.call %0() : (!cir.ptr<!cir.func<()>>) -> () loc(#loc13)
    %1 = cir.get_global @good2 : !cir.ptr<!cir.func<()>> loc(#loc46)
    cir.call %1() : (!cir.ptr<!cir.func<()>>) -> () loc(#loc15)
    cir.return loc(#loc12)
  } loc(#loc44)
  cir.func private @printLine(!cir.ptr<!s8i>) loc(#loc47)
  cir.global "private" constant cir_private dsolocal @".str.3" = #cir.const_array<"Benign, fixed string\00" : !cir.array<!s8i x 21>> : !cir.array<!s8i x 21> {alignment = 1 : i64} loc(#loc19)
  cir.global "private" constant cir_private dsolocal @".str.4" = #cir.const_array<"1\00" : !cir.array<!s8i x 2>> : !cir.array<!s8i x 2> {alignment = 1 : i64} loc(#loc20)
  cir.global "private" constant cir_private dsolocal @".str.5" = #cir.const_array<"void good1()\00" : !cir.array<!s8i x 13>> : !cir.array<!s8i x 13> {alignment = 1 : i64} loc(#loc20)
  cir.func no_proto internal private @good1() extra(#fn_attr1) {
    cir.br ^bb1 loc(#loc49)
  ^bb1:  // pred: ^bb0
    %0 = cir.const #cir.int<5> : !s32i loc(#loc25)
    %1 = cir.const #cir.int<5> : !s32i loc(#loc26)
    %2 = cir.cmp(ne, %0, %1) : !s32i, !cir.bool loc(#loc50)
    cir.brcond %2 ^bb2, ^bb3 loc(#loc51)
  ^bb2:  // pred: ^bb1
    %3 = cir.get_global @".str.3" : !cir.ptr<!cir.array<!s8i x 21>> loc(#loc19)
    %4 = cir.cast(array_to_ptrdecay, %3 : !cir.ptr<!cir.array<!s8i x 21>>), !cir.ptr<!s8i> loc(#loc19)
    cir.call @printLine(%4) : (!cir.ptr<!s8i>) -> () loc(#loc30)
    cir.br ^bb11 loc(#loc28)
  ^bb3:  // pred: ^bb1
    %5 = cir.const #cir.int<4> : !u64i loc(#loc20)
    cir.br ^bb4 loc(#loc20)
  ^bb4:  // pred: ^bb3
    cir.br ^bb5 loc(#loc20)
  ^bb5:  // pred: ^bb4
    %6 = cir.const #cir.int<1> : !s32i loc(#loc20)
    %7 = cir.cast(int_to_bool, %6 : !s32i), !cir.bool loc(#loc20)
    cir.brcond %7 ^bb6, ^bb7 loc(#loc20)
  ^bb6:  // pred: ^bb5
    cir.br ^bb8 loc(#loc20)
  ^bb7:  // pred: ^bb5
    %8 = cir.get_global @".str.4" : !cir.ptr<!cir.array<!s8i x 2>> loc(#loc20)
    %9 = cir.cast(array_to_ptrdecay, %8 : !cir.ptr<!cir.array<!s8i x 2>>), !cir.ptr<!s8i> loc(#loc20)
    %10 = cir.get_global @".str.1" : !cir.ptr<!cir.array<!s8i x 38>> loc(#loc20)
    %11 = cir.cast(array_to_ptrdecay, %10 : !cir.ptr<!cir.array<!s8i x 38>>), !cir.ptr<!s8i> loc(#loc20)
    %12 = cir.const #cir.int<53> : !s32i loc(#loc20)
    %13 = cir.cast(integral, %12 : !s32i), !u32i loc(#loc20)
    %14 = cir.get_global @".str.5" : !cir.ptr<!cir.array<!s8i x 13>> loc(#loc20)
    %15 = cir.cast(array_to_ptrdecay, %14 : !cir.ptr<!cir.array<!s8i x 13>>), !cir.ptr<!s8i> loc(#loc20)
    cir.call @__assert_fail(%9, %11, %13, %15) : (!cir.ptr<!s8i>, !cir.ptr<!s8i>, !u32i, !cir.ptr<!s8i>) -> () extra(#fn_attr) loc(#loc20)
    cir.br ^bb8 loc(#loc20)
  ^bb8:  // 2 preds: ^bb6, ^bb7
    cir.br ^bb9 loc(#loc20)
  ^bb9:  // pred: ^bb8
    cir.br ^bb10 loc(#loc20)
  ^bb10:  // pred: ^bb9
    cir.br ^bb11 loc(#loc24)
  ^bb11:  // 2 preds: ^bb2, ^bb10
    cir.br ^bb12 loc(#loc24)
  ^bb12:  // pred: ^bb11
    cir.return loc(#loc22)
  } loc(#loc48)
  cir.global "private" constant cir_private dsolocal @".str.6" = #cir.const_array<"void good2()\00" : !cir.array<!s8i x 13>> : !cir.array<!s8i x 13> {alignment = 1 : i64} loc(#loc31)
  cir.func no_proto internal private @good2() extra(#fn_attr1) {
    cir.br ^bb1 loc(#loc53)
  ^bb1:  // pred: ^bb0
    %0 = cir.const #cir.int<5> : !s32i loc(#loc36)
    %1 = cir.const #cir.int<5> : !s32i loc(#loc37)
    %2 = cir.cmp(eq, %0, %1) : !s32i, !cir.bool loc(#loc54)
    cir.brcond %2 ^bb2, ^bb10 loc(#loc55)
  ^bb2:  // pred: ^bb1
    %3 = cir.const #cir.int<4> : !u64i loc(#loc31)
    cir.br ^bb3 loc(#loc31)
  ^bb3:  // pred: ^bb2
    cir.br ^bb4 loc(#loc31)
  ^bb4:  // pred: ^bb3
    %4 = cir.const #cir.int<1> : !s32i loc(#loc31)
    %5 = cir.cast(int_to_bool, %4 : !s32i), !cir.bool loc(#loc31)
    cir.brcond %5 ^bb5, ^bb6 loc(#loc31)
  ^bb5:  // pred: ^bb4
    cir.br ^bb7 loc(#loc31)
  ^bb6:  // pred: ^bb4
    %6 = cir.get_global @".str.4" : !cir.ptr<!cir.array<!s8i x 2>> loc(#loc31)
    %7 = cir.cast(array_to_ptrdecay, %6 : !cir.ptr<!cir.array<!s8i x 2>>), !cir.ptr<!s8i> loc(#loc31)
    %8 = cir.get_global @".str.1" : !cir.ptr<!cir.array<!s8i x 38>> loc(#loc31)
    %9 = cir.cast(array_to_ptrdecay, %8 : !cir.ptr<!cir.array<!s8i x 38>>), !cir.ptr<!s8i> loc(#loc31)
    %10 = cir.const #cir.int<65> : !s32i loc(#loc31)
    %11 = cir.cast(integral, %10 : !s32i), !u32i loc(#loc31)
    %12 = cir.get_global @".str.6" : !cir.ptr<!cir.array<!s8i x 13>> loc(#loc31)
    %13 = cir.cast(array_to_ptrdecay, %12 : !cir.ptr<!cir.array<!s8i x 13>>), !cir.ptr<!s8i> loc(#loc31)
    cir.call @__assert_fail(%7, %9, %11, %13) : (!cir.ptr<!s8i>, !cir.ptr<!s8i>, !u32i, !cir.ptr<!s8i>) -> () extra(#fn_attr) loc(#loc31)
    cir.br ^bb7 loc(#loc31)
  ^bb7:  // 2 preds: ^bb5, ^bb6
    cir.br ^bb8 loc(#loc31)
  ^bb8:  // pred: ^bb7
    cir.br ^bb9 loc(#loc31)
  ^bb9:  // pred: ^bb8
    cir.br ^bb10 loc(#loc35)
  ^bb10:  // 2 preds: ^bb1, ^bb9
    cir.br ^bb11 loc(#loc35)
  ^bb11:  // pred: ^bb10
    cir.return loc(#loc33)
  } loc(#loc52)
} loc(#loc)
#loc = loc("/workspaces/juliet-c/testcases/CWE617_Reachable_Assertion/CWE617_Reachable_Assertion__zero_06.c":0:0)
#loc1 = loc("/usr/include/assert.h":69:1)
#loc2 = loc("/usr/include/assert.h":71:43)
#loc3 = loc("CWE617_Reachable_Assertion__zero_06.c":32:9)
#loc4 = loc("CWE617_Reachable_Assertion__zero_06.c":27:1)
#loc5 = loc("CWE617_Reachable_Assertion__zero_06.c":34:1)
#loc6 = loc("CWE617_Reachable_Assertion__zero_06.c":29:5)
#loc7 = loc("CWE617_Reachable_Assertion__zero_06.c":33:5)
#loc8 = loc("CWE617_Reachable_Assertion__zero_06.c":29:8)
#loc9 = loc("CWE617_Reachable_Assertion__zero_06.c":29:27)
#loc10 = loc("CWE617_Reachable_Assertion__zero_06.c":30:5)
#loc11 = loc("CWE617_Reachable_Assertion__zero_06.c":69:1)
#loc12 = loc("CWE617_Reachable_Assertion__zero_06.c":73:1)
#loc13 = loc("CWE617_Reachable_Assertion__zero_06.c":71:5)
#loc14 = loc("CWE617_Reachable_Assertion__zero_06.c":71:11)
#loc15 = loc("CWE617_Reachable_Assertion__zero_06.c":72:5)
#loc16 = loc("CWE617_Reachable_Assertion__zero_06.c":72:11)
#loc17 = loc("../../testcasesupport/std_testcase_io.h":14:1)
#loc18 = loc("../../testcasesupport/std_testcase_io.h":14:33)
#loc19 = loc("CWE617_Reachable_Assertion__zero_06.c":46:19)
#loc20 = loc("CWE617_Reachable_Assertion__zero_06.c":53:9)
#loc21 = loc("CWE617_Reachable_Assertion__zero_06.c":41:1)
#loc22 = loc("CWE617_Reachable_Assertion__zero_06.c":55:1)
#loc23 = loc("CWE617_Reachable_Assertion__zero_06.c":43:5)
#loc24 = loc("CWE617_Reachable_Assertion__zero_06.c":54:5)
#loc25 = loc("CWE617_Reachable_Assertion__zero_06.c":43:8)
#loc26 = loc("CWE617_Reachable_Assertion__zero_06.c":43:27)
#loc27 = loc("CWE617_Reachable_Assertion__zero_06.c":44:5)
#loc28 = loc("CWE617_Reachable_Assertion__zero_06.c":47:5)
#loc29 = loc("CWE617_Reachable_Assertion__zero_06.c":49:5)
#loc30 = loc("CWE617_Reachable_Assertion__zero_06.c":46:9)
#loc31 = loc("CWE617_Reachable_Assertion__zero_06.c":65:9)
#loc32 = loc("CWE617_Reachable_Assertion__zero_06.c":58:1)
#loc33 = loc("CWE617_Reachable_Assertion__zero_06.c":67:1)
#loc34 = loc("CWE617_Reachable_Assertion__zero_06.c":60:5)
#loc35 = loc("CWE617_Reachable_Assertion__zero_06.c":66:5)
#loc36 = loc("CWE617_Reachable_Assertion__zero_06.c":60:8)
#loc37 = loc("CWE617_Reachable_Assertion__zero_06.c":60:27)
#loc38 = loc("CWE617_Reachable_Assertion__zero_06.c":61:5)
#loc39 = loc(fused[#loc1, #loc2])
#loc40 = loc(fused[#loc4, #loc5])
#loc41 = loc(fused[#loc6, #loc7])
#loc42 = loc(fused[#loc8, #loc9])
#loc43 = loc(fused[#loc10, #loc7])
#loc44 = loc(fused[#loc11, #loc12])
#loc45 = loc(fused[#loc13, #loc14])
#loc46 = loc(fused[#loc15, #loc16])
#loc47 = loc(fused[#loc17, #loc18])
#loc48 = loc(fused[#loc21, #loc22])
#loc49 = loc(fused[#loc23, #loc24])
#loc50 = loc(fused[#loc25, #loc26])
#loc51 = loc(fused[#loc27, #loc28, #loc29, #loc24])
#loc52 = loc(fused[#loc32, #loc33])
#loc53 = loc(fused[#loc34, #loc35])
#loc54 = loc(fused[#loc36, #loc37])
#loc55 = loc(fused[#loc38, #loc35])
