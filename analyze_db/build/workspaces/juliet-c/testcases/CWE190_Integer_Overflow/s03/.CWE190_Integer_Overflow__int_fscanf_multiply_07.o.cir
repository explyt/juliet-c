!s32i = !cir.int<s, 32>
!s64i = !cir.int<s, 64>
!s8i = !cir.int<s, 8>
!ty__IO_codecvt = !cir.record<struct "_IO_codecvt" incomplete>
!ty__IO_marker = !cir.record<struct "_IO_marker" incomplete>
!ty__IO_wide_data = !cir.record<struct "_IO_wide_data" incomplete>
!u16i = !cir.int<u, 16>
!u64i = !cir.int<u, 64>
!void = !cir.void
#fn_attr = #cir<extra({inline = #cir.inline<no>, nothrow = #cir.nothrow, optnone = #cir.optnone, uwtable = #cir.uwtable<async>})>
!ty__IO_FILE = !cir.record<struct "_IO_FILE" {!s32i, !cir.ptr<!s8i>, !cir.ptr<!s8i>, !cir.ptr<!s8i>, !cir.ptr<!s8i>, !cir.ptr<!s8i>, !cir.ptr<!s8i>, !cir.ptr<!s8i>, !cir.ptr<!s8i>, !cir.ptr<!s8i>, !cir.ptr<!s8i>, !cir.ptr<!s8i>, !cir.ptr<!ty__IO_marker>, !cir.ptr<!cir.record<struct "_IO_FILE">>, !s32i, !s32i, !s64i, !u16i, !s8i, !cir.array<!s8i x 1>, !cir.ptr<!void>, !s64i, !cir.ptr<!ty__IO_codecvt>, !cir.ptr<!ty__IO_wide_data>, !cir.ptr<!cir.record<struct "_IO_FILE">>, !cir.ptr<!void>, !u64i, !s32i, !cir.array<!s8i x 20>} #cir.record.decl.ast>
module @"/workspaces/juliet-c/testcases/CWE190_Integer_Overflow/s03/CWE190_Integer_Overflow__int_fscanf_multiply_07.c" attributes {cir.lang = #cir.lang<c>, cir.sob = #cir.signed_overflow_behavior<undefined>, cir.triple = "x86_64-unknown-linux-gnu", cir.type_size_info = #cir.type_size_info<char = 8, int = 32, size_t = 64>, cir.uwtable = #cir.uwtable<async>, dlti.dl_spec = #dlti.dl_spec<!llvm.ptr = dense<64> : vector<4xi64>, i1 = dense<8> : vector<2xi64>, f80 = dense<128> : vector<2xi64>, i128 = dense<128> : vector<2xi64>, !llvm.ptr<272> = dense<64> : vector<4xi64>, i64 = dense<64> : vector<2xi64>, f128 = dense<128> : vector<2xi64>, !llvm.ptr<271> = dense<32> : vector<4xi64>, f16 = dense<16> : vector<2xi64>, f64 = dense<64> : vector<2xi64>, !llvm.ptr<270> = dense<32> : vector<4xi64>, i32 = dense<32> : vector<2xi64>, i8 = dense<8> : vector<2xi64>, i16 = dense<16> : vector<2xi64>, "dlti.endianness" = "little", "dlti.mangling_mode" = "e", "dlti.stack_alignment" = 128 : i64>} {
  cir.global "private" internal dsolocal @staticFive = #cir.int<5> : !s32i {alignment = 4 : i64} loc(#loc194)
  cir.func private @__isoc99_fscanf(!cir.ptr<!ty__IO_FILE>, !cir.ptr<!s8i>, ...) -> !s32i loc(#loc195)
  cir.global "private" external @stdin : !cir.ptr<!ty__IO_FILE> {alignment = 8 : i64} loc(#loc196)
  cir.global "private" constant cir_private dsolocal @".str" = #cir.const_array<"%d\00" : !cir.array<!s8i x 3>> : !cir.array<!s8i x 3> {alignment = 1 : i64} loc(#loc7)
  cir.func private @printIntLine(!s32i) loc(#loc197)
  cir.func no_proto @CWE190_Integer_Overflow__int_fscanf_multiply_07_bad() extra(#fn_attr) {
    %0 = cir.alloca !s32i, !cir.ptr<!s32i>, ["data"] {alignment = 4 : i64} loc(#loc199)
    %1 = cir.const #cir.int<0> : !s32i loc(#loc14)
    cir.store %1, %0 : !s32i, !cir.ptr<!s32i> loc(#loc200)
    cir.scope {
      %2 = cir.get_global @staticFive : !cir.ptr<!s32i> loc(#loc194)
      %3 = cir.load %2 : !cir.ptr<!s32i>, !s32i loc(#loc18)
      %4 = cir.const #cir.int<5> : !s32i loc(#loc19)
      %5 = cir.cmp(eq, %3, %4) : !s32i, !cir.bool loc(#loc202)
      cir.if %5 {
        %6 = cir.get_global @__isoc99_fscanf : !cir.ptr<!cir.func<(!cir.ptr<!ty__IO_FILE>, !cir.ptr<!s8i>, ...) -> !s32i>> loc(#loc21)
        %7 = cir.get_global @stdin : !cir.ptr<!cir.ptr<!ty__IO_FILE>> loc(#loc196)
        %8 = cir.load %7 : !cir.ptr<!cir.ptr<!ty__IO_FILE>>, !cir.ptr<!ty__IO_FILE> loc(#loc22)
        %9 = cir.get_global @".str" : !cir.ptr<!cir.array<!s8i x 3>> loc(#loc7)
        %10 = cir.cast(array_to_ptrdecay, %9 : !cir.ptr<!cir.array<!s8i x 3>>), !cir.ptr<!s8i> loc(#loc7)
        %11 = cir.call @__isoc99_fscanf(%8, %10, %0) : (!cir.ptr<!ty__IO_FILE>, !cir.ptr<!s8i>, !cir.ptr<!s32i>) -> !s32i loc(#loc21)
      } loc(#loc203)
    } loc(#loc201)
    cir.scope {
      %2 = cir.get_global @staticFive : !cir.ptr<!s32i> loc(#loc194)
      %3 = cir.load %2 : !cir.ptr<!s32i>, !s32i loc(#loc25)
      %4 = cir.const #cir.int<5> : !s32i loc(#loc26)
      %5 = cir.cmp(eq, %3, %4) : !s32i, !cir.bool loc(#loc205)
      cir.if %5 {
        cir.scope {
          %6 = cir.load %0 : !cir.ptr<!s32i>, !s32i loc(#loc30)
          %7 = cir.const #cir.int<0> : !s32i loc(#loc31)
          %8 = cir.cmp(gt, %6, %7) : !s32i, !cir.bool loc(#loc208)
          cir.if %8 {
            %9 = cir.alloca !s32i, !cir.ptr<!s32i>, ["result", init] {alignment = 4 : i64} loc(#loc210)
            %10 = cir.load %0 : !cir.ptr<!s32i>, !s32i loc(#loc35)
            %11 = cir.const #cir.int<2> : !s32i loc(#loc34)
            %12 = cir.binop(mul, %10, %11) nsw : !s32i loc(#loc35)
            cir.store %12, %9 : !s32i, !cir.ptr<!s32i> loc(#loc210)
            %13 = cir.load %9 : !cir.ptr<!s32i>, !s32i loc(#loc36)
            cir.call @printIntLine(%13) : (!s32i) -> () loc(#loc37)
          } loc(#loc209)
        } loc(#loc207)
      } loc(#loc206)
    } loc(#loc204)
    cir.return loc(#loc11)
  } loc(#loc198)
  cir.func no_proto @CWE190_Integer_Overflow__int_fscanf_multiply_07_good() extra(#fn_attr) {
    %0 = cir.get_global @goodB2G1 : !cir.ptr<!cir.func<()>> loc(#loc212)
    cir.call %0() : (!cir.ptr<!cir.func<()>>) -> () loc(#loc40)
    %1 = cir.get_global @goodB2G2 : !cir.ptr<!cir.func<()>> loc(#loc213)
    cir.call %1() : (!cir.ptr<!cir.func<()>>) -> () loc(#loc42)
    %2 = cir.get_global @goodG2B1 : !cir.ptr<!cir.func<()>> loc(#loc214)
    cir.call %2() : (!cir.ptr<!cir.func<()>>) -> () loc(#loc44)
    %3 = cir.get_global @goodG2B2 : !cir.ptr<!cir.func<()>> loc(#loc215)
    cir.call %3() : (!cir.ptr<!cir.func<()>>) -> () loc(#loc46)
    cir.return loc(#loc39)
  } loc(#loc211)
  cir.func private @printLine(!cir.ptr<!s8i>) loc(#loc216)
  cir.global "private" constant cir_private dsolocal @".str.1" = #cir.const_array<"Benign, fixed string\00" : !cir.array<!s8i x 21>> : !cir.array<!s8i x 21> {alignment = 1 : i64} loc(#loc50)
  cir.global "private" constant cir_private dsolocal @".str.2" = #cir.const_array<"data value is too large to perform arithmetic safely.\00" : !cir.array<!s8i x 54>> : !cir.array<!s8i x 54> {alignment = 1 : i64} loc(#loc51)
  cir.func no_proto internal private @goodB2G1() extra(#fn_attr) {
    %0 = cir.alloca !s32i, !cir.ptr<!s32i>, ["data"] {alignment = 4 : i64} loc(#loc218)
    %1 = cir.const #cir.int<0> : !s32i loc(#loc56)
    cir.store %1, %0 : !s32i, !cir.ptr<!s32i> loc(#loc219)
    cir.scope {
      %2 = cir.get_global @staticFive : !cir.ptr<!s32i> loc(#loc194)
      %3 = cir.load %2 : !cir.ptr<!s32i>, !s32i loc(#loc60)
      %4 = cir.const #cir.int<5> : !s32i loc(#loc61)
      %5 = cir.cmp(eq, %3, %4) : !s32i, !cir.bool loc(#loc221)
      cir.if %5 {
        %6 = cir.get_global @__isoc99_fscanf : !cir.ptr<!cir.func<(!cir.ptr<!ty__IO_FILE>, !cir.ptr<!s8i>, ...) -> !s32i>> loc(#loc63)
        %7 = cir.get_global @stdin : !cir.ptr<!cir.ptr<!ty__IO_FILE>> loc(#loc196)
        %8 = cir.load %7 : !cir.ptr<!cir.ptr<!ty__IO_FILE>>, !cir.ptr<!ty__IO_FILE> loc(#loc64)
        %9 = cir.get_global @".str" : !cir.ptr<!cir.array<!s8i x 3>> loc(#loc65)
        %10 = cir.cast(array_to_ptrdecay, %9 : !cir.ptr<!cir.array<!s8i x 3>>), !cir.ptr<!s8i> loc(#loc65)
        %11 = cir.call @__isoc99_fscanf(%8, %10, %0) : (!cir.ptr<!ty__IO_FILE>, !cir.ptr<!s8i>, !cir.ptr<!s32i>) -> !s32i loc(#loc63)
      } loc(#loc222)
    } loc(#loc220)
    cir.scope {
      %2 = cir.get_global @staticFive : !cir.ptr<!s32i> loc(#loc194)
      %3 = cir.load %2 : !cir.ptr<!s32i>, !s32i loc(#loc68)
      %4 = cir.const #cir.int<5> : !s32i loc(#loc69)
      %5 = cir.cmp(ne, %3, %4) : !s32i, !cir.bool loc(#loc224)
      cir.if %5 {
        %6 = cir.get_global @".str.1" : !cir.ptr<!cir.array<!s8i x 21>> loc(#loc50)
        %7 = cir.cast(array_to_ptrdecay, %6 : !cir.ptr<!cir.array<!s8i x 21>>), !cir.ptr<!s8i> loc(#loc50)
        cir.call @printLine(%7) : (!cir.ptr<!s8i>) -> () loc(#loc73)
      } else {
        cir.scope {
          %6 = cir.load %0 : !cir.ptr<!s32i>, !s32i loc(#loc76)
          %7 = cir.const #cir.int<0> : !s32i loc(#loc77)
          %8 = cir.cmp(gt, %6, %7) : !s32i, !cir.bool loc(#loc227)
          cir.if %8 {
            cir.scope {
              %9 = cir.load %0 : !cir.ptr<!s32i>, !s32i loc(#loc81)
              %10 = cir.const #cir.int<2147483647> : !s32i loc(#loc82)
              %11 = cir.const #cir.int<2> : !s32i loc(#loc83)
              %12 = cir.binop(div, %10, %11) : !s32i loc(#loc230)
              %13 = cir.cmp(lt, %9, %12) : !s32i, !cir.bool loc(#loc231)
              cir.if %13 {
                %14 = cir.alloca !s32i, !cir.ptr<!s32i>, ["result", init] {alignment = 4 : i64} loc(#loc233)
                %15 = cir.load %0 : !cir.ptr<!s32i>, !s32i loc(#loc90)
                %16 = cir.const #cir.int<2> : !s32i loc(#loc89)
                %17 = cir.binop(mul, %15, %16) nsw : !s32i loc(#loc90)
                cir.store %17, %14 : !s32i, !cir.ptr<!s32i> loc(#loc233)
                %18 = cir.load %14 : !cir.ptr<!s32i>, !s32i loc(#loc91)
                cir.call @printIntLine(%18) : (!s32i) -> () loc(#loc92)
              } else {
                %14 = cir.get_global @".str.2" : !cir.ptr<!cir.array<!s8i x 54>> loc(#loc51)
                %15 = cir.cast(array_to_ptrdecay, %14 : !cir.ptr<!cir.array<!s8i x 54>>), !cir.ptr<!s8i> loc(#loc51)
                cir.call @printLine(%15) : (!cir.ptr<!s8i>) -> () loc(#loc93)
              } loc(#loc232)
            } loc(#loc229)
          } loc(#loc228)
        } loc(#loc226)
      } loc(#loc225)
    } loc(#loc223)
    cir.return loc(#loc53)
  } loc(#loc217)
  cir.func no_proto internal private @goodB2G2() extra(#fn_attr) {
    %0 = cir.alloca !s32i, !cir.ptr<!s32i>, ["data"] {alignment = 4 : i64} loc(#loc235)
    %1 = cir.const #cir.int<0> : !s32i loc(#loc98)
    cir.store %1, %0 : !s32i, !cir.ptr<!s32i> loc(#loc236)
    cir.scope {
      %2 = cir.get_global @staticFive : !cir.ptr<!s32i> loc(#loc194)
      %3 = cir.load %2 : !cir.ptr<!s32i>, !s32i loc(#loc102)
      %4 = cir.const #cir.int<5> : !s32i loc(#loc103)
      %5 = cir.cmp(eq, %3, %4) : !s32i, !cir.bool loc(#loc238)
      cir.if %5 {
        %6 = cir.get_global @__isoc99_fscanf : !cir.ptr<!cir.func<(!cir.ptr<!ty__IO_FILE>, !cir.ptr<!s8i>, ...) -> !s32i>> loc(#loc105)
        %7 = cir.get_global @stdin : !cir.ptr<!cir.ptr<!ty__IO_FILE>> loc(#loc196)
        %8 = cir.load %7 : !cir.ptr<!cir.ptr<!ty__IO_FILE>>, !cir.ptr<!ty__IO_FILE> loc(#loc106)
        %9 = cir.get_global @".str" : !cir.ptr<!cir.array<!s8i x 3>> loc(#loc107)
        %10 = cir.cast(array_to_ptrdecay, %9 : !cir.ptr<!cir.array<!s8i x 3>>), !cir.ptr<!s8i> loc(#loc107)
        %11 = cir.call @__isoc99_fscanf(%8, %10, %0) : (!cir.ptr<!ty__IO_FILE>, !cir.ptr<!s8i>, !cir.ptr<!s32i>) -> !s32i loc(#loc105)
      } loc(#loc239)
    } loc(#loc237)
    cir.scope {
      %2 = cir.get_global @staticFive : !cir.ptr<!s32i> loc(#loc194)
      %3 = cir.load %2 : !cir.ptr<!s32i>, !s32i loc(#loc110)
      %4 = cir.const #cir.int<5> : !s32i loc(#loc111)
      %5 = cir.cmp(eq, %3, %4) : !s32i, !cir.bool loc(#loc241)
      cir.if %5 {
        cir.scope {
          %6 = cir.load %0 : !cir.ptr<!s32i>, !s32i loc(#loc115)
          %7 = cir.const #cir.int<0> : !s32i loc(#loc116)
          %8 = cir.cmp(gt, %6, %7) : !s32i, !cir.bool loc(#loc244)
          cir.if %8 {
            cir.scope {
              %9 = cir.load %0 : !cir.ptr<!s32i>, !s32i loc(#loc120)
              %10 = cir.const #cir.int<2147483647> : !s32i loc(#loc121)
              %11 = cir.const #cir.int<2> : !s32i loc(#loc122)
              %12 = cir.binop(div, %10, %11) : !s32i loc(#loc247)
              %13 = cir.cmp(lt, %9, %12) : !s32i, !cir.bool loc(#loc248)
              cir.if %13 {
                %14 = cir.alloca !s32i, !cir.ptr<!s32i>, ["result", init] {alignment = 4 : i64} loc(#loc250)
                %15 = cir.load %0 : !cir.ptr<!s32i>, !s32i loc(#loc129)
                %16 = cir.const #cir.int<2> : !s32i loc(#loc128)
                %17 = cir.binop(mul, %15, %16) nsw : !s32i loc(#loc129)
                cir.store %17, %14 : !s32i, !cir.ptr<!s32i> loc(#loc250)
                %18 = cir.load %14 : !cir.ptr<!s32i>, !s32i loc(#loc130)
                cir.call @printIntLine(%18) : (!s32i) -> () loc(#loc131)
              } else {
                %14 = cir.get_global @".str.2" : !cir.ptr<!cir.array<!s8i x 54>> loc(#loc132)
                %15 = cir.cast(array_to_ptrdecay, %14 : !cir.ptr<!cir.array<!s8i x 54>>), !cir.ptr<!s8i> loc(#loc132)
                cir.call @printLine(%15) : (!cir.ptr<!s8i>) -> () loc(#loc133)
              } loc(#loc249)
            } loc(#loc246)
          } loc(#loc245)
        } loc(#loc243)
      } loc(#loc242)
    } loc(#loc240)
    cir.return loc(#loc95)
  } loc(#loc234)
  cir.func no_proto internal private @goodG2B1() extra(#fn_attr) {
    %0 = cir.alloca !s32i, !cir.ptr<!s32i>, ["data"] {alignment = 4 : i64} loc(#loc252)
    %1 = cir.const #cir.int<0> : !s32i loc(#loc138)
    cir.store %1, %0 : !s32i, !cir.ptr<!s32i> loc(#loc253)
    cir.scope {
      %2 = cir.get_global @staticFive : !cir.ptr<!s32i> loc(#loc194)
      %3 = cir.load %2 : !cir.ptr<!s32i>, !s32i loc(#loc142)
      %4 = cir.const #cir.int<5> : !s32i loc(#loc143)
      %5 = cir.cmp(ne, %3, %4) : !s32i, !cir.bool loc(#loc255)
      cir.if %5 {
        %6 = cir.get_global @".str.1" : !cir.ptr<!cir.array<!s8i x 21>> loc(#loc147)
        %7 = cir.cast(array_to_ptrdecay, %6 : !cir.ptr<!cir.array<!s8i x 21>>), !cir.ptr<!s8i> loc(#loc147)
        cir.call @printLine(%7) : (!cir.ptr<!s8i>) -> () loc(#loc148)
      } else {
        %6 = cir.const #cir.int<2> : !s32i loc(#loc149)
        cir.store %6, %0 : !s32i, !cir.ptr<!s32i> loc(#loc257)
      } loc(#loc256)
    } loc(#loc254)
    cir.scope {
      %2 = cir.get_global @staticFive : !cir.ptr<!s32i> loc(#loc194)
      %3 = cir.load %2 : !cir.ptr<!s32i>, !s32i loc(#loc153)
      %4 = cir.const #cir.int<5> : !s32i loc(#loc154)
      %5 = cir.cmp(eq, %3, %4) : !s32i, !cir.bool loc(#loc259)
      cir.if %5 {
        cir.scope {
          %6 = cir.load %0 : !cir.ptr<!s32i>, !s32i loc(#loc158)
          %7 = cir.const #cir.int<0> : !s32i loc(#loc159)
          %8 = cir.cmp(gt, %6, %7) : !s32i, !cir.bool loc(#loc262)
          cir.if %8 {
            %9 = cir.alloca !s32i, !cir.ptr<!s32i>, ["result", init] {alignment = 4 : i64} loc(#loc264)
            %10 = cir.load %0 : !cir.ptr<!s32i>, !s32i loc(#loc163)
            %11 = cir.const #cir.int<2> : !s32i loc(#loc162)
            %12 = cir.binop(mul, %10, %11) nsw : !s32i loc(#loc163)
            cir.store %12, %9 : !s32i, !cir.ptr<!s32i> loc(#loc264)
            %13 = cir.load %9 : !cir.ptr<!s32i>, !s32i loc(#loc164)
            cir.call @printIntLine(%13) : (!s32i) -> () loc(#loc165)
          } loc(#loc263)
        } loc(#loc261)
      } loc(#loc260)
    } loc(#loc258)
    cir.return loc(#loc135)
  } loc(#loc251)
  cir.func no_proto internal private @goodG2B2() extra(#fn_attr) {
    %0 = cir.alloca !s32i, !cir.ptr<!s32i>, ["data"] {alignment = 4 : i64} loc(#loc266)
    %1 = cir.const #cir.int<0> : !s32i loc(#loc170)
    cir.store %1, %0 : !s32i, !cir.ptr<!s32i> loc(#loc267)
    cir.scope {
      %2 = cir.get_global @staticFive : !cir.ptr<!s32i> loc(#loc194)
      %3 = cir.load %2 : !cir.ptr<!s32i>, !s32i loc(#loc174)
      %4 = cir.const #cir.int<5> : !s32i loc(#loc175)
      %5 = cir.cmp(eq, %3, %4) : !s32i, !cir.bool loc(#loc269)
      cir.if %5 {
        %6 = cir.const #cir.int<2> : !s32i loc(#loc177)
        cir.store %6, %0 : !s32i, !cir.ptr<!s32i> loc(#loc271)
      } loc(#loc270)
    } loc(#loc268)
    cir.scope {
      %2 = cir.get_global @staticFive : !cir.ptr<!s32i> loc(#loc194)
      %3 = cir.load %2 : !cir.ptr<!s32i>, !s32i loc(#loc181)
      %4 = cir.const #cir.int<5> : !s32i loc(#loc182)
      %5 = cir.cmp(eq, %3, %4) : !s32i, !cir.bool loc(#loc273)
      cir.if %5 {
        cir.scope {
          %6 = cir.load %0 : !cir.ptr<!s32i>, !s32i loc(#loc186)
          %7 = cir.const #cir.int<0> : !s32i loc(#loc187)
          %8 = cir.cmp(gt, %6, %7) : !s32i, !cir.bool loc(#loc276)
          cir.if %8 {
            %9 = cir.alloca !s32i, !cir.ptr<!s32i>, ["result", init] {alignment = 4 : i64} loc(#loc278)
            %10 = cir.load %0 : !cir.ptr<!s32i>, !s32i loc(#loc191)
            %11 = cir.const #cir.int<2> : !s32i loc(#loc190)
            %12 = cir.binop(mul, %10, %11) nsw : !s32i loc(#loc191)
            cir.store %12, %9 : !s32i, !cir.ptr<!s32i> loc(#loc278)
            %13 = cir.load %9 : !cir.ptr<!s32i>, !s32i loc(#loc192)
            cir.call @printIntLine(%13) : (!s32i) -> () loc(#loc193)
          } loc(#loc277)
        } loc(#loc275)
      } loc(#loc274)
    } loc(#loc272)
    cir.return loc(#loc167)
  } loc(#loc265)
} loc(#loc)
#loc = loc("/workspaces/juliet-c/testcases/CWE190_Integer_Overflow/s03/CWE190_Integer_Overflow__int_fscanf_multiply_07.c":0:0)
#loc1 = loc("CWE190_Integer_Overflow__int_fscanf_multiply_07.c":23:1)
#loc2 = loc("CWE190_Integer_Overflow__int_fscanf_multiply_07.c":23:25)
#loc3 = loc("/usr/include/stdio.h":463:1)
#loc4 = loc("/usr/include/stdio.h":465:33)
#loc5 = loc("/usr/include/stdio.h":149:1)
#loc6 = loc("/usr/include/stdio.h":149:14)
#loc7 = loc("CWE190_Integer_Overflow__int_fscanf_multiply_07.c":35:23)
#loc8 = loc("../../../testcasesupport/std_testcase_io.h":18:1)
#loc9 = loc("../../../testcasesupport/std_testcase_io.h":18:33)
#loc10 = loc("CWE190_Integer_Overflow__int_fscanf_multiply_07.c":27:1)
#loc11 = loc("CWE190_Integer_Overflow__int_fscanf_multiply_07.c":46:1)
#loc12 = loc("CWE190_Integer_Overflow__int_fscanf_multiply_07.c":29:5)
#loc13 = loc("CWE190_Integer_Overflow__int_fscanf_multiply_07.c":29:9)
#loc14 = loc("CWE190_Integer_Overflow__int_fscanf_multiply_07.c":31:12)
#loc15 = loc("CWE190_Integer_Overflow__int_fscanf_multiply_07.c":31:5)
#loc16 = loc("CWE190_Integer_Overflow__int_fscanf_multiply_07.c":32:5)
#loc17 = loc("CWE190_Integer_Overflow__int_fscanf_multiply_07.c":36:5)
#loc18 = loc("CWE190_Integer_Overflow__int_fscanf_multiply_07.c":32:8)
#loc19 = loc("CWE190_Integer_Overflow__int_fscanf_multiply_07.c":32:20)
#loc20 = loc("CWE190_Integer_Overflow__int_fscanf_multiply_07.c":33:5)
#loc21 = loc("CWE190_Integer_Overflow__int_fscanf_multiply_07.c":35:9)
#loc22 = loc("CWE190_Integer_Overflow__int_fscanf_multiply_07.c":35:16)
#loc23 = loc("CWE190_Integer_Overflow__int_fscanf_multiply_07.c":37:5)
#loc24 = loc("CWE190_Integer_Overflow__int_fscanf_multiply_07.c":45:5)
#loc25 = loc("CWE190_Integer_Overflow__int_fscanf_multiply_07.c":37:8)
#loc26 = loc("CWE190_Integer_Overflow__int_fscanf_multiply_07.c":37:20)
#loc27 = loc("CWE190_Integer_Overflow__int_fscanf_multiply_07.c":38:5)
#loc28 = loc("CWE190_Integer_Overflow__int_fscanf_multiply_07.c":39:9)
#loc29 = loc("CWE190_Integer_Overflow__int_fscanf_multiply_07.c":44:9)
#loc30 = loc("CWE190_Integer_Overflow__int_fscanf_multiply_07.c":39:12)
#loc31 = loc("CWE190_Integer_Overflow__int_fscanf_multiply_07.c":39:19)
#loc32 = loc("CWE190_Integer_Overflow__int_fscanf_multiply_07.c":40:9)
#loc33 = loc("CWE190_Integer_Overflow__int_fscanf_multiply_07.c":42:13)
#loc34 = loc("CWE190_Integer_Overflow__int_fscanf_multiply_07.c":42:33)
#loc35 = loc("CWE190_Integer_Overflow__int_fscanf_multiply_07.c":42:26)
#loc36 = loc("CWE190_Integer_Overflow__int_fscanf_multiply_07.c":43:26)
#loc37 = loc("CWE190_Integer_Overflow__int_fscanf_multiply_07.c":43:13)
#loc38 = loc("CWE190_Integer_Overflow__int_fscanf_multiply_07.c":164:1)
#loc39 = loc("CWE190_Integer_Overflow__int_fscanf_multiply_07.c":170:1)
#loc40 = loc("CWE190_Integer_Overflow__int_fscanf_multiply_07.c":166:5)
#loc41 = loc("CWE190_Integer_Overflow__int_fscanf_multiply_07.c":166:14)
#loc42 = loc("CWE190_Integer_Overflow__int_fscanf_multiply_07.c":167:5)
#loc43 = loc("CWE190_Integer_Overflow__int_fscanf_multiply_07.c":167:14)
#loc44 = loc("CWE190_Integer_Overflow__int_fscanf_multiply_07.c":168:5)
#loc45 = loc("CWE190_Integer_Overflow__int_fscanf_multiply_07.c":168:14)
#loc46 = loc("CWE190_Integer_Overflow__int_fscanf_multiply_07.c":169:5)
#loc47 = loc("CWE190_Integer_Overflow__int_fscanf_multiply_07.c":169:14)
#loc48 = loc("../../../testcasesupport/std_testcase_io.h":14:1)
#loc49 = loc("../../../testcasesupport/std_testcase_io.h":14:33)
#loc50 = loc("CWE190_Integer_Overflow__int_fscanf_multiply_07.c":66:19)
#loc51 = loc("CWE190_Integer_Overflow__int_fscanf_multiply_07.c":80:27)
#loc52 = loc("CWE190_Integer_Overflow__int_fscanf_multiply_07.c":53:1)
#loc53 = loc("CWE190_Integer_Overflow__int_fscanf_multiply_07.c":84:1)
#loc54 = loc("CWE190_Integer_Overflow__int_fscanf_multiply_07.c":55:5)
#loc55 = loc("CWE190_Integer_Overflow__int_fscanf_multiply_07.c":55:9)
#loc56 = loc("CWE190_Integer_Overflow__int_fscanf_multiply_07.c":57:12)
#loc57 = loc("CWE190_Integer_Overflow__int_fscanf_multiply_07.c":57:5)
#loc58 = loc("CWE190_Integer_Overflow__int_fscanf_multiply_07.c":58:5)
#loc59 = loc("CWE190_Integer_Overflow__int_fscanf_multiply_07.c":62:5)
#loc60 = loc("CWE190_Integer_Overflow__int_fscanf_multiply_07.c":58:8)
#loc61 = loc("CWE190_Integer_Overflow__int_fscanf_multiply_07.c":58:20)
#loc62 = loc("CWE190_Integer_Overflow__int_fscanf_multiply_07.c":59:5)
#loc63 = loc("CWE190_Integer_Overflow__int_fscanf_multiply_07.c":61:9)
#loc64 = loc("CWE190_Integer_Overflow__int_fscanf_multiply_07.c":61:16)
#loc65 = loc("CWE190_Integer_Overflow__int_fscanf_multiply_07.c":61:23)
#loc66 = loc("CWE190_Integer_Overflow__int_fscanf_multiply_07.c":63:5)
#loc67 = loc("CWE190_Integer_Overflow__int_fscanf_multiply_07.c":83:5)
#loc68 = loc("CWE190_Integer_Overflow__int_fscanf_multiply_07.c":63:8)
#loc69 = loc("CWE190_Integer_Overflow__int_fscanf_multiply_07.c":63:20)
#loc70 = loc("CWE190_Integer_Overflow__int_fscanf_multiply_07.c":64:5)
#loc71 = loc("CWE190_Integer_Overflow__int_fscanf_multiply_07.c":67:5)
#loc72 = loc("CWE190_Integer_Overflow__int_fscanf_multiply_07.c":69:5)
#loc73 = loc("CWE190_Integer_Overflow__int_fscanf_multiply_07.c":66:9)
#loc74 = loc("CWE190_Integer_Overflow__int_fscanf_multiply_07.c":70:9)
#loc75 = loc("CWE190_Integer_Overflow__int_fscanf_multiply_07.c":82:9)
#loc76 = loc("CWE190_Integer_Overflow__int_fscanf_multiply_07.c":70:12)
#loc77 = loc("CWE190_Integer_Overflow__int_fscanf_multiply_07.c":70:19)
#loc78 = loc("CWE190_Integer_Overflow__int_fscanf_multiply_07.c":71:9)
#loc79 = loc("CWE190_Integer_Overflow__int_fscanf_multiply_07.c":73:13)
#loc80 = loc("CWE190_Integer_Overflow__int_fscanf_multiply_07.c":81:13)
#loc81 = loc("CWE190_Integer_Overflow__int_fscanf_multiply_07.c":73:17)
#loc82 = loc("CWE190_Integer_Overflow__int_fscanf_multiply_07.c":73:25)
#loc83 = loc("CWE190_Integer_Overflow__int_fscanf_multiply_07.c":73:33)
#loc84 = loc("CWE190_Integer_Overflow__int_fscanf_multiply_07.c":73:34)
#loc85 = loc("CWE190_Integer_Overflow__int_fscanf_multiply_07.c":74:13)
#loc86 = loc("CWE190_Integer_Overflow__int_fscanf_multiply_07.c":77:13)
#loc87 = loc("CWE190_Integer_Overflow__int_fscanf_multiply_07.c":79:13)
#loc88 = loc("CWE190_Integer_Overflow__int_fscanf_multiply_07.c":75:17)
#loc89 = loc("CWE190_Integer_Overflow__int_fscanf_multiply_07.c":75:37)
#loc90 = loc("CWE190_Integer_Overflow__int_fscanf_multiply_07.c":75:30)
#loc91 = loc("CWE190_Integer_Overflow__int_fscanf_multiply_07.c":76:30)
#loc92 = loc("CWE190_Integer_Overflow__int_fscanf_multiply_07.c":76:17)
#loc93 = loc("CWE190_Integer_Overflow__int_fscanf_multiply_07.c":80:17)
#loc94 = loc("CWE190_Integer_Overflow__int_fscanf_multiply_07.c":87:1)
#loc95 = loc("CWE190_Integer_Overflow__int_fscanf_multiply_07.c":113:1)
#loc96 = loc("CWE190_Integer_Overflow__int_fscanf_multiply_07.c":89:5)
#loc97 = loc("CWE190_Integer_Overflow__int_fscanf_multiply_07.c":89:9)
#loc98 = loc("CWE190_Integer_Overflow__int_fscanf_multiply_07.c":91:12)
#loc99 = loc("CWE190_Integer_Overflow__int_fscanf_multiply_07.c":91:5)
#loc100 = loc("CWE190_Integer_Overflow__int_fscanf_multiply_07.c":92:5)
#loc101 = loc("CWE190_Integer_Overflow__int_fscanf_multiply_07.c":96:5)
#loc102 = loc("CWE190_Integer_Overflow__int_fscanf_multiply_07.c":92:8)
#loc103 = loc("CWE190_Integer_Overflow__int_fscanf_multiply_07.c":92:20)
#loc104 = loc("CWE190_Integer_Overflow__int_fscanf_multiply_07.c":93:5)
#loc105 = loc("CWE190_Integer_Overflow__int_fscanf_multiply_07.c":95:9)
#loc106 = loc("CWE190_Integer_Overflow__int_fscanf_multiply_07.c":95:16)
#loc107 = loc("CWE190_Integer_Overflow__int_fscanf_multiply_07.c":95:23)
#loc108 = loc("CWE190_Integer_Overflow__int_fscanf_multiply_07.c":97:5)
#loc109 = loc("CWE190_Integer_Overflow__int_fscanf_multiply_07.c":112:5)
#loc110 = loc("CWE190_Integer_Overflow__int_fscanf_multiply_07.c":97:8)
#loc111 = loc("CWE190_Integer_Overflow__int_fscanf_multiply_07.c":97:20)
#loc112 = loc("CWE190_Integer_Overflow__int_fscanf_multiply_07.c":98:5)
#loc113 = loc("CWE190_Integer_Overflow__int_fscanf_multiply_07.c":99:9)
#loc114 = loc("CWE190_Integer_Overflow__int_fscanf_multiply_07.c":111:9)
#loc115 = loc("CWE190_Integer_Overflow__int_fscanf_multiply_07.c":99:12)
#loc116 = loc("CWE190_Integer_Overflow__int_fscanf_multiply_07.c":99:19)
#loc117 = loc("CWE190_Integer_Overflow__int_fscanf_multiply_07.c":100:9)
#loc118 = loc("CWE190_Integer_Overflow__int_fscanf_multiply_07.c":102:13)
#loc119 = loc("CWE190_Integer_Overflow__int_fscanf_multiply_07.c":110:13)
#loc120 = loc("CWE190_Integer_Overflow__int_fscanf_multiply_07.c":102:17)
#loc121 = loc("CWE190_Integer_Overflow__int_fscanf_multiply_07.c":102:25)
#loc122 = loc("CWE190_Integer_Overflow__int_fscanf_multiply_07.c":102:33)
#loc123 = loc("CWE190_Integer_Overflow__int_fscanf_multiply_07.c":102:34)
#loc124 = loc("CWE190_Integer_Overflow__int_fscanf_multiply_07.c":103:13)
#loc125 = loc("CWE190_Integer_Overflow__int_fscanf_multiply_07.c":106:13)
#loc126 = loc("CWE190_Integer_Overflow__int_fscanf_multiply_07.c":108:13)
#loc127 = loc("CWE190_Integer_Overflow__int_fscanf_multiply_07.c":104:17)
#loc128 = loc("CWE190_Integer_Overflow__int_fscanf_multiply_07.c":104:37)
#loc129 = loc("CWE190_Integer_Overflow__int_fscanf_multiply_07.c":104:30)
#loc130 = loc("CWE190_Integer_Overflow__int_fscanf_multiply_07.c":105:30)
#loc131 = loc("CWE190_Integer_Overflow__int_fscanf_multiply_07.c":105:17)
#loc132 = loc("CWE190_Integer_Overflow__int_fscanf_multiply_07.c":109:27)
#loc133 = loc("CWE190_Integer_Overflow__int_fscanf_multiply_07.c":109:17)
#loc134 = loc("CWE190_Integer_Overflow__int_fscanf_multiply_07.c":116:1)
#loc135 = loc("CWE190_Integer_Overflow__int_fscanf_multiply_07.c":140:1)
#loc136 = loc("CWE190_Integer_Overflow__int_fscanf_multiply_07.c":118:5)
#loc137 = loc("CWE190_Integer_Overflow__int_fscanf_multiply_07.c":118:9)
#loc138 = loc("CWE190_Integer_Overflow__int_fscanf_multiply_07.c":120:12)
#loc139 = loc("CWE190_Integer_Overflow__int_fscanf_multiply_07.c":120:5)
#loc140 = loc("CWE190_Integer_Overflow__int_fscanf_multiply_07.c":121:5)
#loc141 = loc("CWE190_Integer_Overflow__int_fscanf_multiply_07.c":130:5)
#loc142 = loc("CWE190_Integer_Overflow__int_fscanf_multiply_07.c":121:8)
#loc143 = loc("CWE190_Integer_Overflow__int_fscanf_multiply_07.c":121:20)
#loc144 = loc("CWE190_Integer_Overflow__int_fscanf_multiply_07.c":122:5)
#loc145 = loc("CWE190_Integer_Overflow__int_fscanf_multiply_07.c":125:5)
#loc146 = loc("CWE190_Integer_Overflow__int_fscanf_multiply_07.c":127:5)
#loc147 = loc("CWE190_Integer_Overflow__int_fscanf_multiply_07.c":124:19)
#loc148 = loc("CWE190_Integer_Overflow__int_fscanf_multiply_07.c":124:9)
#loc149 = loc("CWE190_Integer_Overflow__int_fscanf_multiply_07.c":129:16)
#loc150 = loc("CWE190_Integer_Overflow__int_fscanf_multiply_07.c":129:9)
#loc151 = loc("CWE190_Integer_Overflow__int_fscanf_multiply_07.c":131:5)
#loc152 = loc("CWE190_Integer_Overflow__int_fscanf_multiply_07.c":139:5)
#loc153 = loc("CWE190_Integer_Overflow__int_fscanf_multiply_07.c":131:8)
#loc154 = loc("CWE190_Integer_Overflow__int_fscanf_multiply_07.c":131:20)
#loc155 = loc("CWE190_Integer_Overflow__int_fscanf_multiply_07.c":132:5)
#loc156 = loc("CWE190_Integer_Overflow__int_fscanf_multiply_07.c":133:9)
#loc157 = loc("CWE190_Integer_Overflow__int_fscanf_multiply_07.c":138:9)
#loc158 = loc("CWE190_Integer_Overflow__int_fscanf_multiply_07.c":133:12)
#loc159 = loc("CWE190_Integer_Overflow__int_fscanf_multiply_07.c":133:19)
#loc160 = loc("CWE190_Integer_Overflow__int_fscanf_multiply_07.c":134:9)
#loc161 = loc("CWE190_Integer_Overflow__int_fscanf_multiply_07.c":136:13)
#loc162 = loc("CWE190_Integer_Overflow__int_fscanf_multiply_07.c":136:33)
#loc163 = loc("CWE190_Integer_Overflow__int_fscanf_multiply_07.c":136:26)
#loc164 = loc("CWE190_Integer_Overflow__int_fscanf_multiply_07.c":137:26)
#loc165 = loc("CWE190_Integer_Overflow__int_fscanf_multiply_07.c":137:13)
#loc166 = loc("CWE190_Integer_Overflow__int_fscanf_multiply_07.c":143:1)
#loc167 = loc("CWE190_Integer_Overflow__int_fscanf_multiply_07.c":162:1)
#loc168 = loc("CWE190_Integer_Overflow__int_fscanf_multiply_07.c":145:5)
#loc169 = loc("CWE190_Integer_Overflow__int_fscanf_multiply_07.c":145:9)
#loc170 = loc("CWE190_Integer_Overflow__int_fscanf_multiply_07.c":147:12)
#loc171 = loc("CWE190_Integer_Overflow__int_fscanf_multiply_07.c":147:5)
#loc172 = loc("CWE190_Integer_Overflow__int_fscanf_multiply_07.c":148:5)
#loc173 = loc("CWE190_Integer_Overflow__int_fscanf_multiply_07.c":152:5)
#loc174 = loc("CWE190_Integer_Overflow__int_fscanf_multiply_07.c":148:8)
#loc175 = loc("CWE190_Integer_Overflow__int_fscanf_multiply_07.c":148:20)
#loc176 = loc("CWE190_Integer_Overflow__int_fscanf_multiply_07.c":149:5)
#loc177 = loc("CWE190_Integer_Overflow__int_fscanf_multiply_07.c":151:16)
#loc178 = loc("CWE190_Integer_Overflow__int_fscanf_multiply_07.c":151:9)
#loc179 = loc("CWE190_Integer_Overflow__int_fscanf_multiply_07.c":153:5)
#loc180 = loc("CWE190_Integer_Overflow__int_fscanf_multiply_07.c":161:5)
#loc181 = loc("CWE190_Integer_Overflow__int_fscanf_multiply_07.c":153:8)
#loc182 = loc("CWE190_Integer_Overflow__int_fscanf_multiply_07.c":153:20)
#loc183 = loc("CWE190_Integer_Overflow__int_fscanf_multiply_07.c":154:5)
#loc184 = loc("CWE190_Integer_Overflow__int_fscanf_multiply_07.c":155:9)
#loc185 = loc("CWE190_Integer_Overflow__int_fscanf_multiply_07.c":160:9)
#loc186 = loc("CWE190_Integer_Overflow__int_fscanf_multiply_07.c":155:12)
#loc187 = loc("CWE190_Integer_Overflow__int_fscanf_multiply_07.c":155:19)
#loc188 = loc("CWE190_Integer_Overflow__int_fscanf_multiply_07.c":156:9)
#loc189 = loc("CWE190_Integer_Overflow__int_fscanf_multiply_07.c":158:13)
#loc190 = loc("CWE190_Integer_Overflow__int_fscanf_multiply_07.c":158:33)
#loc191 = loc("CWE190_Integer_Overflow__int_fscanf_multiply_07.c":158:26)
#loc192 = loc("CWE190_Integer_Overflow__int_fscanf_multiply_07.c":159:26)
#loc193 = loc("CWE190_Integer_Overflow__int_fscanf_multiply_07.c":159:13)
#loc194 = loc(fused[#loc1, #loc2])
#loc195 = loc(fused[#loc3, #loc4])
#loc196 = loc(fused[#loc5, #loc6])
#loc197 = loc(fused[#loc8, #loc9])
#loc198 = loc(fused[#loc10, #loc11])
#loc199 = loc(fused[#loc12, #loc13])
#loc200 = loc(fused[#loc15, #loc14])
#loc201 = loc(fused[#loc16, #loc17])
#loc202 = loc(fused[#loc18, #loc19])
#loc203 = loc(fused[#loc20, #loc17])
#loc204 = loc(fused[#loc23, #loc24])
#loc205 = loc(fused[#loc25, #loc26])
#loc206 = loc(fused[#loc27, #loc24])
#loc207 = loc(fused[#loc28, #loc29])
#loc208 = loc(fused[#loc30, #loc31])
#loc209 = loc(fused[#loc32, #loc29])
#loc210 = loc(fused[#loc33, #loc34])
#loc211 = loc(fused[#loc38, #loc39])
#loc212 = loc(fused[#loc40, #loc41])
#loc213 = loc(fused[#loc42, #loc43])
#loc214 = loc(fused[#loc44, #loc45])
#loc215 = loc(fused[#loc46, #loc47])
#loc216 = loc(fused[#loc48, #loc49])
#loc217 = loc(fused[#loc52, #loc53])
#loc218 = loc(fused[#loc54, #loc55])
#loc219 = loc(fused[#loc57, #loc56])
#loc220 = loc(fused[#loc58, #loc59])
#loc221 = loc(fused[#loc60, #loc61])
#loc222 = loc(fused[#loc62, #loc59])
#loc223 = loc(fused[#loc66, #loc67])
#loc224 = loc(fused[#loc68, #loc69])
#loc225 = loc(fused[#loc70, #loc71, #loc72, #loc67])
#loc226 = loc(fused[#loc74, #loc75])
#loc227 = loc(fused[#loc76, #loc77])
#loc228 = loc(fused[#loc78, #loc75])
#loc229 = loc(fused[#loc79, #loc80])
#loc230 = loc(fused[#loc82, #loc83])
#loc231 = loc(fused[#loc81, #loc84])
#loc232 = loc(fused[#loc85, #loc86, #loc87, #loc80])
#loc233 = loc(fused[#loc88, #loc89])
#loc234 = loc(fused[#loc94, #loc95])
#loc235 = loc(fused[#loc96, #loc97])
#loc236 = loc(fused[#loc99, #loc98])
#loc237 = loc(fused[#loc100, #loc101])
#loc238 = loc(fused[#loc102, #loc103])
#loc239 = loc(fused[#loc104, #loc101])
#loc240 = loc(fused[#loc108, #loc109])
#loc241 = loc(fused[#loc110, #loc111])
#loc242 = loc(fused[#loc112, #loc109])
#loc243 = loc(fused[#loc113, #loc114])
#loc244 = loc(fused[#loc115, #loc116])
#loc245 = loc(fused[#loc117, #loc114])
#loc246 = loc(fused[#loc118, #loc119])
#loc247 = loc(fused[#loc121, #loc122])
#loc248 = loc(fused[#loc120, #loc123])
#loc249 = loc(fused[#loc124, #loc125, #loc126, #loc119])
#loc250 = loc(fused[#loc127, #loc128])
#loc251 = loc(fused[#loc134, #loc135])
#loc252 = loc(fused[#loc136, #loc137])
#loc253 = loc(fused[#loc139, #loc138])
#loc254 = loc(fused[#loc140, #loc141])
#loc255 = loc(fused[#loc142, #loc143])
#loc256 = loc(fused[#loc144, #loc145, #loc146, #loc141])
#loc257 = loc(fused[#loc150, #loc149])
#loc258 = loc(fused[#loc151, #loc152])
#loc259 = loc(fused[#loc153, #loc154])
#loc260 = loc(fused[#loc155, #loc152])
#loc261 = loc(fused[#loc156, #loc157])
#loc262 = loc(fused[#loc158, #loc159])
#loc263 = loc(fused[#loc160, #loc157])
#loc264 = loc(fused[#loc161, #loc162])
#loc265 = loc(fused[#loc166, #loc167])
#loc266 = loc(fused[#loc168, #loc169])
#loc267 = loc(fused[#loc171, #loc170])
#loc268 = loc(fused[#loc172, #loc173])
#loc269 = loc(fused[#loc174, #loc175])
#loc270 = loc(fused[#loc176, #loc173])
#loc271 = loc(fused[#loc178, #loc177])
#loc272 = loc(fused[#loc179, #loc180])
#loc273 = loc(fused[#loc181, #loc182])
#loc274 = loc(fused[#loc183, #loc180])
#loc275 = loc(fused[#loc184, #loc185])
#loc276 = loc(fused[#loc186, #loc187])
#loc277 = loc(fused[#loc188, #loc185])
#loc278 = loc(fused[#loc189, #loc190])
