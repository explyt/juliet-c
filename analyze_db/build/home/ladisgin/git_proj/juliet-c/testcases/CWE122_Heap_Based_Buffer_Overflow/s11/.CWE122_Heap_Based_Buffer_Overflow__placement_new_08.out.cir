!s32i = !cir.int<s, 32>
!s64i = !cir.int<s, 64>
!s8i = !cir.int<s, 8>
!u32i = !cir.int<u, 32>
!u64i = !cir.int<u, 64>
!void = !cir.void
#fn_attr = #cir<extra({nothrow = #cir.nothrow})>
#fn_attr1 = #cir<extra({inline = #cir.inline<no>, optnone = #cir.optnone})>
#fn_attr2 = #cir<extra({inline = #cir.inline<no>, nothrow = #cir.nothrow, optnone = #cir.optnone})>
#loc9 = loc("../../../testcasesupport/std_testcase.h":61:7)
#loc78 = loc("../../../testcasesupport/std_testcase.h":68:7)
#loc329 = loc("CWE122_Heap_Based_Buffer_Overflow__placement_new_08.cpp":228:10)
#loc330 = loc("CWE122_Heap_Based_Buffer_Overflow__placement_new_08.cpp":228:14)
#loc331 = loc("CWE122_Heap_Based_Buffer_Overflow__placement_new_08.cpp":228:20)
#loc332 = loc("CWE122_Heap_Based_Buffer_Overflow__placement_new_08.cpp":228:32)
!ty_OneIntClass = !cir.struct<class "OneIntClass" {!s32i} #cir.record.decl.ast>
!ty_TwoIntsClass = !cir.struct<class "TwoIntsClass" {!s32i, !s32i} #cir.record.decl.ast>
#loc486 = loc(fused[#loc329, #loc330])
#loc487 = loc(fused[#loc331, #loc332])
module @"/home/ladisgin/git_proj/juliet-c/testcases/CWE122_Heap_Based_Buffer_Overflow/s11/CWE122_Heap_Based_Buffer_Overflow__placement_new_08.cpp" attributes {cir.lang = #cir.lang<cxx>, cir.sob = #cir.signed_overflow_behavior<undefined>, cir.triple = "x86_64-unknown-linux-gnu", dlti.dl_spec = #dlti.dl_spec<f128 = dense<128> : vector<2xi64>, !llvm.ptr<270> = dense<32> : vector<4xi64>, f64 = dense<64> : vector<2xi64>, !llvm.ptr<271> = dense<32> : vector<4xi64>, !llvm.ptr<272> = dense<64> : vector<4xi64>, i64 = dense<64> : vector<2xi64>, i128 = dense<128> : vector<2xi64>, f80 = dense<128> : vector<2xi64>, !llvm.ptr = dense<64> : vector<4xi64>, i1 = dense<8> : vector<2xi64>, i8 = dense<8> : vector<2xi64>, i16 = dense<16> : vector<2xi64>, i32 = dense<32> : vector<2xi64>, f16 = dense<16> : vector<2xi64>, "dlti.endianness" = "little", "dlti.stack_alignment" = 128 : i64>} {
  cir.func private @malloc(!u64i) -> !cir.ptr<!void> extra(#fn_attr) loc(#loc345)
  cir.func private @exit(!s32i) extra(#fn_attr) loc(#loc346)
  cir.func internal private @_ZL17staticReturnsTruev() -> !s32i extra(#fn_attr1) {
    %0 = cir.alloca !s32i, !cir.ptr<!s32i>, ["__retval"] {alignment = 4 : i64} loc(#loc6)
    %1 = cir.const #cir.int<1> : !s32i loc(#loc7)
    cir.store %1, %0 : !s32i, !cir.ptr<!s32i> loc(#loc348)
    %2 = cir.load %0 : !cir.ptr<!s32i>, !s32i loc(#loc348)
    cir.return %2 : !s32i loc(#loc348)
  } loc(#loc347)
  cir.func linkonce_odr @_ZN12TwoIntsClassC2Ev(%arg0: !cir.ptr<!ty_TwoIntsClass> loc("../../../testcasesupport/std_testcase.h":61:7)) extra(#fn_attr2) {
    %0 = cir.alloca !cir.ptr<!ty_TwoIntsClass>, !cir.ptr<!cir.ptr<!ty_TwoIntsClass>>, ["this", init] {alignment = 8 : i64} loc(#loc9)
    cir.store %arg0, %0 : !cir.ptr<!ty_TwoIntsClass>, !cir.ptr<!cir.ptr<!ty_TwoIntsClass>> loc(#loc9)
    %1 = cir.load %0 : !cir.ptr<!cir.ptr<!ty_TwoIntsClass>>, !cir.ptr<!ty_TwoIntsClass> loc(#loc9)
    cir.return loc(#loc9)
  } loc(#loc9)
  cir.func private @printIntLine(!s32i) loc(#loc349)
  cir.func private @free(!cir.ptr<!void>) extra(#fn_attr) loc(#loc350)
  cir.func @_ZN51CWE122_Heap_Based_Buffer_Overflow__placement_new_083badEv() extra(#fn_attr1) {
    %0 = cir.alloca !cir.ptr<!ty_TwoIntsClass>, !cir.ptr<!cir.ptr<!ty_TwoIntsClass>>, ["classTwo", init] {alignment = 8 : i64} loc(#loc352)
    %1 = cir.alloca !cir.ptr<!s8i>, !cir.ptr<!cir.ptr<!s8i>>, ["data"] {alignment = 8 : i64} loc(#loc353)
    %2 = cir.alloca !cir.ptr<!s8i>, !cir.ptr<!cir.ptr<!s8i>>, ["dataBadBuffer", init] {alignment = 8 : i64} loc(#loc354)
    %3 = cir.alloca !cir.ptr<!s8i>, !cir.ptr<!cir.ptr<!s8i>>, ["dataGoodBuffer", init] {alignment = 8 : i64} loc(#loc355)
    %4 = cir.get_global @malloc : !cir.ptr<!cir.func<!cir.ptr<!void> (!u64i)>> loc(#loc24)
    %5 = cir.const #cir.int<4> : !u64i loc(#loc356)
    %6 = cir.call @malloc(%5) : (!u64i) -> !cir.ptr<!void> extra(#fn_attr) loc(#loc24)
    %7 = cir.cast(bitcast, %6 : !cir.ptr<!void>), !cir.ptr<!s8i> loc(#loc357)
    cir.store %7, %2 : !cir.ptr<!s8i>, !cir.ptr<!cir.ptr<!s8i>> loc(#loc354)
    cir.br ^bb1 loc(#loc358)
  ^bb1:  // pred: ^bb0
    %8 = cir.load %2 : !cir.ptr<!cir.ptr<!s8i>>, !cir.ptr<!s8i> loc(#loc29)
    %9 = cir.const #cir.ptr<null> : !cir.ptr<!s8i> loc(#loc30)
    %10 = cir.cmp(eq, %8, %9) : !cir.ptr<!s8i>, !cir.bool loc(#loc359)
    cir.brcond %10 ^bb2, ^bb3 loc(#loc360)
  ^bb2:  // pred: ^bb1
    %11 = cir.get_global @exit : !cir.ptr<!cir.func<!void (!s32i)>> loc(#loc32)
    %12 = cir.const #cir.int<1> : !s32i loc(#loc33)
    %13 = cir.unary(minus, %12) : !s32i, !s32i loc(#loc34)
    cir.call @exit(%13) : (!s32i) -> () extra(#fn_attr) loc(#loc32)
    cir.br ^bb3 loc(#loc28)
  ^bb3:  // 2 preds: ^bb1, ^bb2
    cir.br ^bb4 loc(#loc28)
  ^bb4:  // pred: ^bb3
    %14 = cir.const #cir.int<8> : !u64i loc(#loc361)
    %15 = cir.call @malloc(%14) : (!u64i) -> !cir.ptr<!void> extra(#fn_attr) loc(#loc37)
    %16 = cir.cast(bitcast, %15 : !cir.ptr<!void>), !cir.ptr<!s8i> loc(#loc362)
    cir.store %16, %3 : !cir.ptr<!s8i>, !cir.ptr<!cir.ptr<!s8i>> loc(#loc355)
    cir.br ^bb5 loc(#loc363)
  ^bb5:  // pred: ^bb4
    %17 = cir.load %3 : !cir.ptr<!cir.ptr<!s8i>>, !cir.ptr<!s8i> loc(#loc40)
    %18 = cir.const #cir.ptr<null> : !cir.ptr<!s8i> loc(#loc41)
    %19 = cir.cmp(eq, %17, %18) : !cir.ptr<!s8i>, !cir.bool loc(#loc364)
    cir.brcond %19 ^bb6, ^bb7 loc(#loc365)
  ^bb6:  // pred: ^bb5
    %20 = cir.get_global @exit : !cir.ptr<!cir.func<!void (!s32i)>> loc(#loc43)
    %21 = cir.const #cir.int<1> : !s32i loc(#loc44)
    %22 = cir.unary(minus, %21) : !s32i, !s32i loc(#loc45)
    cir.call @exit(%22) : (!s32i) -> () extra(#fn_attr) loc(#loc43)
    cir.br ^bb7 loc(#loc39)
  ^bb7:  // 2 preds: ^bb5, ^bb6
    cir.br ^bb8 loc(#loc39)
  ^bb8:  // pred: ^bb7
    cir.br ^bb9 loc(#loc366)
  ^bb9:  // pred: ^bb8
    %23 = cir.call @_ZL17staticReturnsTruev() : () -> !s32i loc(#loc48)
    %24 = cir.cast(int_to_bool, %23 : !s32i), !cir.bool loc(#loc367)
    cir.brcond %24 ^bb10, ^bb11 loc(#loc368)
  ^bb10:  // pred: ^bb9
    %25 = cir.load %2 : !cir.ptr<!cir.ptr<!s8i>>, !cir.ptr<!s8i> loc(#loc51)
    cir.store %25, %1 : !cir.ptr<!s8i>, !cir.ptr<!cir.ptr<!s8i>> loc(#loc369)
    cir.br ^bb11 loc(#loc47)
  ^bb11:  // 2 preds: ^bb9, ^bb10
    cir.br ^bb12 loc(#loc47)
  ^bb12:  // pred: ^bb11
    cir.br ^bb13 loc(#loc370)
  ^bb13:  // pred: ^bb12
    %26 = cir.call @_ZL17staticReturnsTruev() : () -> !s32i loc(#loc55)
    %27 = cir.cast(int_to_bool, %26 : !s32i), !cir.bool loc(#loc371)
    cir.brcond %27 ^bb14, ^bb17 loc(#loc372)
  ^bb14:  // pred: ^bb13
    cir.br ^bb15 loc(#loc373)
  ^bb15:  // pred: ^bb14
    %28 = cir.const #cir.int<8> : !u64i loc(#loc374)
    %29 = cir.load %1 : !cir.ptr<!cir.ptr<!s8i>>, !cir.ptr<!s8i> loc(#loc61)
    %30 = cir.cast(bitcast, %29 : !cir.ptr<!s8i>), !cir.ptr<!void> loc(#loc61)
    %31 = cir.cast(bitcast, %30 : !cir.ptr<!void>), !cir.ptr<!ty_TwoIntsClass> loc(#loc374)
    cir.call @_ZN12TwoIntsClassC2Ev(%31) : (!cir.ptr<!ty_TwoIntsClass>) -> () extra(#fn_attr) loc(#loc17)
    cir.store %31, %0 : !cir.ptr<!ty_TwoIntsClass>, !cir.ptr<!cir.ptr<!ty_TwoIntsClass>> loc(#loc352)
    %32 = cir.const #cir.int<5> : !s32i loc(#loc62)
    %33 = cir.load %0 : !cir.ptr<!cir.ptr<!ty_TwoIntsClass>>, !cir.ptr<!ty_TwoIntsClass> loc(#loc63)
    %34 = cir.get_member %33[0] {name = "intOne"} : !cir.ptr<!ty_TwoIntsClass> -> !cir.ptr<!s32i> loc(#loc64)
    cir.store %32, %34 : !s32i, !cir.ptr<!s32i> loc(#loc375)
    %35 = cir.const #cir.int<10> : !s32i loc(#loc65)
    %36 = cir.load %0 : !cir.ptr<!cir.ptr<!ty_TwoIntsClass>>, !cir.ptr<!ty_TwoIntsClass> loc(#loc66)
    %37 = cir.get_member %36[1] {name = "intTwo"} : !cir.ptr<!ty_TwoIntsClass> -> !cir.ptr<!s32i> loc(#loc67)
    cir.store %35, %37 : !s32i, !cir.ptr<!s32i> loc(#loc376)
    %38 = cir.load %0 : !cir.ptr<!cir.ptr<!ty_TwoIntsClass>>, !cir.ptr<!ty_TwoIntsClass> loc(#loc68)
    %39 = cir.get_member %38[0] {name = "intOne"} : !cir.ptr<!ty_TwoIntsClass> -> !cir.ptr<!s32i> loc(#loc64)
    %40 = cir.load %39 : !cir.ptr<!s32i>, !s32i loc(#loc69)
    cir.call @printIntLine(%40) : (!s32i) -> () loc(#loc70)
    %41 = cir.get_global @free : !cir.ptr<!cir.func<!void (!cir.ptr<!void>)>> loc(#loc71)
    %42 = cir.load %1 : !cir.ptr<!cir.ptr<!s8i>>, !cir.ptr<!s8i> loc(#loc72)
    %43 = cir.cast(bitcast, %42 : !cir.ptr<!s8i>), !cir.ptr<!void> loc(#loc72)
    cir.call @free(%43) : (!cir.ptr<!void>) -> () extra(#fn_attr) loc(#loc71)
    cir.br ^bb16 loc(#loc59)
  ^bb16:  // pred: ^bb15
    cir.br ^bb17 loc(#loc54)
  ^bb17:  // 2 preds: ^bb13, ^bb16
    cir.br ^bb18 loc(#loc54)
  ^bb18:  // pred: ^bb17
    cir.return loc(#loc15)
  } loc(#loc351)
  cir.func internal private @_ZL18staticReturnsFalsev() -> !s32i extra(#fn_attr1) {
    %0 = cir.alloca !s32i, !cir.ptr<!s32i>, ["__retval"] {alignment = 4 : i64} loc(#loc74)
    %1 = cir.const #cir.int<0> : !s32i loc(#loc75)
    cir.store %1, %0 : !s32i, !cir.ptr<!s32i> loc(#loc378)
    %2 = cir.load %0 : !cir.ptr<!s32i>, !s32i loc(#loc378)
    cir.return %2 : !s32i loc(#loc378)
  } loc(#loc377)
  cir.global "private" constant cir_private dsolocal @".str.4" = #cir.const_array<"Benign, fixed string\00" : !cir.array<!s8i x 21>> : !cir.array<!s8i x 21> {alignment = 1 : i64} loc(#loc77)
  cir.func linkonce_odr @_ZN11OneIntClassC2Ev(%arg0: !cir.ptr<!ty_OneIntClass> loc("../../../testcasesupport/std_testcase.h":68:7)) extra(#fn_attr2) {
    %0 = cir.alloca !cir.ptr<!ty_OneIntClass>, !cir.ptr<!cir.ptr<!ty_OneIntClass>>, ["this", init] {alignment = 8 : i64} loc(#loc78)
    cir.store %arg0, %0 : !cir.ptr<!ty_OneIntClass>, !cir.ptr<!cir.ptr<!ty_OneIntClass>> loc(#loc78)
    %1 = cir.load %0 : !cir.ptr<!cir.ptr<!ty_OneIntClass>>, !cir.ptr<!ty_OneIntClass> loc(#loc78)
    cir.return loc(#loc78)
  } loc(#loc78)
  cir.func internal private @_ZN51CWE122_Heap_Based_Buffer_Overflow__placement_new_08L8goodB2G1Ev() extra(#fn_attr1) {
    %0 = cir.alloca !cir.ptr<!ty_OneIntClass>, !cir.ptr<!cir.ptr<!ty_OneIntClass>>, ["classOne", init] {alignment = 8 : i64} loc(#loc380)
    %1 = cir.alloca !cir.ptr<!s8i>, !cir.ptr<!cir.ptr<!s8i>>, ["data"] {alignment = 8 : i64} loc(#loc381)
    %2 = cir.alloca !cir.ptr<!s8i>, !cir.ptr<!cir.ptr<!s8i>>, ["dataBadBuffer", init] {alignment = 8 : i64} loc(#loc382)
    %3 = cir.alloca !cir.ptr<!s8i>, !cir.ptr<!cir.ptr<!s8i>>, ["dataGoodBuffer", init] {alignment = 8 : i64} loc(#loc383)
    %4 = cir.get_global @malloc : !cir.ptr<!cir.func<!cir.ptr<!void> (!u64i)>> loc(#loc89)
    %5 = cir.const #cir.int<4> : !u64i loc(#loc384)
    %6 = cir.call @malloc(%5) : (!u64i) -> !cir.ptr<!void> extra(#fn_attr) loc(#loc89)
    %7 = cir.cast(bitcast, %6 : !cir.ptr<!void>), !cir.ptr<!s8i> loc(#loc385)
    cir.store %7, %2 : !cir.ptr<!s8i>, !cir.ptr<!cir.ptr<!s8i>> loc(#loc382)
    cir.br ^bb1 loc(#loc386)
  ^bb1:  // pred: ^bb0
    %8 = cir.load %2 : !cir.ptr<!cir.ptr<!s8i>>, !cir.ptr<!s8i> loc(#loc94)
    %9 = cir.const #cir.ptr<null> : !cir.ptr<!s8i> loc(#loc95)
    %10 = cir.cmp(eq, %8, %9) : !cir.ptr<!s8i>, !cir.bool loc(#loc387)
    cir.brcond %10 ^bb2, ^bb3 loc(#loc388)
  ^bb2:  // pred: ^bb1
    %11 = cir.get_global @exit : !cir.ptr<!cir.func<!void (!s32i)>> loc(#loc97)
    %12 = cir.const #cir.int<1> : !s32i loc(#loc98)
    %13 = cir.unary(minus, %12) : !s32i, !s32i loc(#loc99)
    cir.call @exit(%13) : (!s32i) -> () extra(#fn_attr) loc(#loc97)
    cir.br ^bb3 loc(#loc93)
  ^bb3:  // 2 preds: ^bb1, ^bb2
    cir.br ^bb4 loc(#loc93)
  ^bb4:  // pred: ^bb3
    %14 = cir.const #cir.int<8> : !u64i loc(#loc389)
    %15 = cir.call @malloc(%14) : (!u64i) -> !cir.ptr<!void> extra(#fn_attr) loc(#loc102)
    %16 = cir.cast(bitcast, %15 : !cir.ptr<!void>), !cir.ptr<!s8i> loc(#loc390)
    cir.store %16, %3 : !cir.ptr<!s8i>, !cir.ptr<!cir.ptr<!s8i>> loc(#loc383)
    cir.br ^bb5 loc(#loc391)
  ^bb5:  // pred: ^bb4
    %17 = cir.load %3 : !cir.ptr<!cir.ptr<!s8i>>, !cir.ptr<!s8i> loc(#loc105)
    %18 = cir.const #cir.ptr<null> : !cir.ptr<!s8i> loc(#loc106)
    %19 = cir.cmp(eq, %17, %18) : !cir.ptr<!s8i>, !cir.bool loc(#loc392)
    cir.brcond %19 ^bb6, ^bb7 loc(#loc393)
  ^bb6:  // pred: ^bb5
    %20 = cir.get_global @exit : !cir.ptr<!cir.func<!void (!s32i)>> loc(#loc108)
    %21 = cir.const #cir.int<1> : !s32i loc(#loc109)
    %22 = cir.unary(minus, %21) : !s32i, !s32i loc(#loc110)
    cir.call @exit(%22) : (!s32i) -> () extra(#fn_attr) loc(#loc108)
    cir.br ^bb7 loc(#loc104)
  ^bb7:  // 2 preds: ^bb5, ^bb6
    cir.br ^bb8 loc(#loc104)
  ^bb8:  // pred: ^bb7
    cir.br ^bb9 loc(#loc394)
  ^bb9:  // pred: ^bb8
    %23 = cir.call @_ZL17staticReturnsTruev() : () -> !s32i loc(#loc113)
    %24 = cir.cast(int_to_bool, %23 : !s32i), !cir.bool loc(#loc395)
    cir.brcond %24 ^bb10, ^bb11 loc(#loc396)
  ^bb10:  // pred: ^bb9
    %25 = cir.load %2 : !cir.ptr<!cir.ptr<!s8i>>, !cir.ptr<!s8i> loc(#loc116)
    cir.store %25, %1 : !cir.ptr<!s8i>, !cir.ptr<!cir.ptr<!s8i>> loc(#loc397)
    cir.br ^bb11 loc(#loc112)
  ^bb11:  // 2 preds: ^bb9, ^bb10
    cir.br ^bb12 loc(#loc112)
  ^bb12:  // pred: ^bb11
    cir.br ^bb13 loc(#loc398)
  ^bb13:  // pred: ^bb12
    %26 = cir.call @_ZL18staticReturnsFalsev() : () -> !s32i loc(#loc120)
    %27 = cir.cast(int_to_bool, %26 : !s32i), !cir.bool loc(#loc399)
    cir.brcond %27 ^bb14, ^bb15 loc(#loc400)
  ^bb14:  // pred: ^bb13
    %28 = cir.get_global @".str.4" : !cir.ptr<!cir.array<!s8i x 21>> loc(#loc77)
    %29 = cir.cast(array_to_ptrdecay, %28 : !cir.ptr<!cir.array<!s8i x 21>>), !cir.ptr<!s8i> loc(#loc77)
    cir.call @printLine(%29) : (!cir.ptr<!s8i>) -> () loc(#loc125)
    cir.br ^bb18 loc(#loc123)
  ^bb15:  // pred: ^bb13
    cir.br ^bb16 loc(#loc401)
  ^bb16:  // pred: ^bb15
    %30 = cir.const #cir.int<4> : !u64i loc(#loc402)
    %31 = cir.load %1 : !cir.ptr<!cir.ptr<!s8i>>, !cir.ptr<!s8i> loc(#loc129)
    %32 = cir.cast(bitcast, %31 : !cir.ptr<!s8i>), !cir.ptr<!void> loc(#loc129)
    %33 = cir.cast(bitcast, %32 : !cir.ptr<!void>), !cir.ptr<!ty_OneIntClass> loc(#loc402)
    cir.call @_ZN11OneIntClassC2Ev(%33) : (!cir.ptr<!ty_OneIntClass>) -> () extra(#fn_attr) loc(#loc82)
    cir.store %33, %0 : !cir.ptr<!ty_OneIntClass>, !cir.ptr<!cir.ptr<!ty_OneIntClass>> loc(#loc380)
    %34 = cir.const #cir.int<5> : !s32i loc(#loc130)
    %35 = cir.load %0 : !cir.ptr<!cir.ptr<!ty_OneIntClass>>, !cir.ptr<!ty_OneIntClass> loc(#loc131)
    %36 = cir.get_member %35[0] {name = "intOne"} : !cir.ptr<!ty_OneIntClass> -> !cir.ptr<!s32i> loc(#loc132)
    cir.store %34, %36 : !s32i, !cir.ptr<!s32i> loc(#loc403)
    %37 = cir.load %0 : !cir.ptr<!cir.ptr<!ty_OneIntClass>>, !cir.ptr<!ty_OneIntClass> loc(#loc133)
    %38 = cir.get_member %37[0] {name = "intOne"} : !cir.ptr<!ty_OneIntClass> -> !cir.ptr<!s32i> loc(#loc132)
    %39 = cir.load %38 : !cir.ptr<!s32i>, !s32i loc(#loc134)
    cir.call @printIntLine(%39) : (!s32i) -> () loc(#loc135)
    %40 = cir.get_global @free : !cir.ptr<!cir.func<!void (!cir.ptr<!void>)>> loc(#loc136)
    %41 = cir.load %1 : !cir.ptr<!cir.ptr<!s8i>>, !cir.ptr<!s8i> loc(#loc137)
    %42 = cir.cast(bitcast, %41 : !cir.ptr<!s8i>), !cir.ptr<!void> loc(#loc137)
    cir.call @free(%42) : (!cir.ptr<!void>) -> () extra(#fn_attr) loc(#loc136)
    cir.br ^bb17 loc(#loc127)
  ^bb17:  // pred: ^bb16
    cir.br ^bb18 loc(#loc119)
  ^bb18:  // 2 preds: ^bb14, ^bb17
    cir.br ^bb19 loc(#loc119)
  ^bb19:  // pred: ^bb18
    cir.return loc(#loc80)
  } loc(#loc379)
  cir.func internal private @_ZN51CWE122_Heap_Based_Buffer_Overflow__placement_new_08L8goodB2G2Ev() extra(#fn_attr1) {
    %0 = cir.alloca !cir.ptr<!ty_OneIntClass>, !cir.ptr<!cir.ptr<!ty_OneIntClass>>, ["classOne", init] {alignment = 8 : i64} loc(#loc405)
    %1 = cir.alloca !cir.ptr<!s8i>, !cir.ptr<!cir.ptr<!s8i>>, ["data"] {alignment = 8 : i64} loc(#loc406)
    %2 = cir.alloca !cir.ptr<!s8i>, !cir.ptr<!cir.ptr<!s8i>>, ["dataBadBuffer", init] {alignment = 8 : i64} loc(#loc407)
    %3 = cir.alloca !cir.ptr<!s8i>, !cir.ptr<!cir.ptr<!s8i>>, ["dataGoodBuffer", init] {alignment = 8 : i64} loc(#loc408)
    %4 = cir.get_global @malloc : !cir.ptr<!cir.func<!cir.ptr<!void> (!u64i)>> loc(#loc148)
    %5 = cir.const #cir.int<4> : !u64i loc(#loc409)
    %6 = cir.call @malloc(%5) : (!u64i) -> !cir.ptr<!void> extra(#fn_attr) loc(#loc148)
    %7 = cir.cast(bitcast, %6 : !cir.ptr<!void>), !cir.ptr<!s8i> loc(#loc410)
    cir.store %7, %2 : !cir.ptr<!s8i>, !cir.ptr<!cir.ptr<!s8i>> loc(#loc407)
    cir.br ^bb1 loc(#loc411)
  ^bb1:  // pred: ^bb0
    %8 = cir.load %2 : !cir.ptr<!cir.ptr<!s8i>>, !cir.ptr<!s8i> loc(#loc153)
    %9 = cir.const #cir.ptr<null> : !cir.ptr<!s8i> loc(#loc154)
    %10 = cir.cmp(eq, %8, %9) : !cir.ptr<!s8i>, !cir.bool loc(#loc412)
    cir.brcond %10 ^bb2, ^bb3 loc(#loc413)
  ^bb2:  // pred: ^bb1
    %11 = cir.get_global @exit : !cir.ptr<!cir.func<!void (!s32i)>> loc(#loc156)
    %12 = cir.const #cir.int<1> : !s32i loc(#loc157)
    %13 = cir.unary(minus, %12) : !s32i, !s32i loc(#loc158)
    cir.call @exit(%13) : (!s32i) -> () extra(#fn_attr) loc(#loc156)
    cir.br ^bb3 loc(#loc152)
  ^bb3:  // 2 preds: ^bb1, ^bb2
    cir.br ^bb4 loc(#loc152)
  ^bb4:  // pred: ^bb3
    %14 = cir.const #cir.int<8> : !u64i loc(#loc414)
    %15 = cir.call @malloc(%14) : (!u64i) -> !cir.ptr<!void> extra(#fn_attr) loc(#loc161)
    %16 = cir.cast(bitcast, %15 : !cir.ptr<!void>), !cir.ptr<!s8i> loc(#loc415)
    cir.store %16, %3 : !cir.ptr<!s8i>, !cir.ptr<!cir.ptr<!s8i>> loc(#loc408)
    cir.br ^bb5 loc(#loc416)
  ^bb5:  // pred: ^bb4
    %17 = cir.load %3 : !cir.ptr<!cir.ptr<!s8i>>, !cir.ptr<!s8i> loc(#loc164)
    %18 = cir.const #cir.ptr<null> : !cir.ptr<!s8i> loc(#loc165)
    %19 = cir.cmp(eq, %17, %18) : !cir.ptr<!s8i>, !cir.bool loc(#loc417)
    cir.brcond %19 ^bb6, ^bb7 loc(#loc418)
  ^bb6:  // pred: ^bb5
    %20 = cir.get_global @exit : !cir.ptr<!cir.func<!void (!s32i)>> loc(#loc167)
    %21 = cir.const #cir.int<1> : !s32i loc(#loc168)
    %22 = cir.unary(minus, %21) : !s32i, !s32i loc(#loc169)
    cir.call @exit(%22) : (!s32i) -> () extra(#fn_attr) loc(#loc167)
    cir.br ^bb7 loc(#loc163)
  ^bb7:  // 2 preds: ^bb5, ^bb6
    cir.br ^bb8 loc(#loc163)
  ^bb8:  // pred: ^bb7
    cir.br ^bb9 loc(#loc419)
  ^bb9:  // pred: ^bb8
    %23 = cir.call @_ZL17staticReturnsTruev() : () -> !s32i loc(#loc172)
    %24 = cir.cast(int_to_bool, %23 : !s32i), !cir.bool loc(#loc420)
    cir.brcond %24 ^bb10, ^bb11 loc(#loc421)
  ^bb10:  // pred: ^bb9
    %25 = cir.load %2 : !cir.ptr<!cir.ptr<!s8i>>, !cir.ptr<!s8i> loc(#loc175)
    cir.store %25, %1 : !cir.ptr<!s8i>, !cir.ptr<!cir.ptr<!s8i>> loc(#loc422)
    cir.br ^bb11 loc(#loc171)
  ^bb11:  // 2 preds: ^bb9, ^bb10
    cir.br ^bb12 loc(#loc171)
  ^bb12:  // pred: ^bb11
    cir.br ^bb13 loc(#loc423)
  ^bb13:  // pred: ^bb12
    %26 = cir.call @_ZL17staticReturnsTruev() : () -> !s32i loc(#loc179)
    %27 = cir.cast(int_to_bool, %26 : !s32i), !cir.bool loc(#loc424)
    cir.brcond %27 ^bb14, ^bb17 loc(#loc425)
  ^bb14:  // pred: ^bb13
    cir.br ^bb15 loc(#loc426)
  ^bb15:  // pred: ^bb14
    %28 = cir.const #cir.int<4> : !u64i loc(#loc427)
    %29 = cir.load %1 : !cir.ptr<!cir.ptr<!s8i>>, !cir.ptr<!s8i> loc(#loc185)
    %30 = cir.cast(bitcast, %29 : !cir.ptr<!s8i>), !cir.ptr<!void> loc(#loc185)
    %31 = cir.cast(bitcast, %30 : !cir.ptr<!void>), !cir.ptr<!ty_OneIntClass> loc(#loc427)
    cir.call @_ZN11OneIntClassC2Ev(%31) : (!cir.ptr<!ty_OneIntClass>) -> () extra(#fn_attr) loc(#loc141)
    cir.store %31, %0 : !cir.ptr<!ty_OneIntClass>, !cir.ptr<!cir.ptr<!ty_OneIntClass>> loc(#loc405)
    %32 = cir.const #cir.int<5> : !s32i loc(#loc186)
    %33 = cir.load %0 : !cir.ptr<!cir.ptr<!ty_OneIntClass>>, !cir.ptr<!ty_OneIntClass> loc(#loc187)
    %34 = cir.get_member %33[0] {name = "intOne"} : !cir.ptr<!ty_OneIntClass> -> !cir.ptr<!s32i> loc(#loc132)
    cir.store %32, %34 : !s32i, !cir.ptr<!s32i> loc(#loc428)
    %35 = cir.load %0 : !cir.ptr<!cir.ptr<!ty_OneIntClass>>, !cir.ptr<!ty_OneIntClass> loc(#loc188)
    %36 = cir.get_member %35[0] {name = "intOne"} : !cir.ptr<!ty_OneIntClass> -> !cir.ptr<!s32i> loc(#loc132)
    %37 = cir.load %36 : !cir.ptr<!s32i>, !s32i loc(#loc189)
    cir.call @printIntLine(%37) : (!s32i) -> () loc(#loc190)
    %38 = cir.get_global @free : !cir.ptr<!cir.func<!void (!cir.ptr<!void>)>> loc(#loc191)
    %39 = cir.load %1 : !cir.ptr<!cir.ptr<!s8i>>, !cir.ptr<!s8i> loc(#loc192)
    %40 = cir.cast(bitcast, %39 : !cir.ptr<!s8i>), !cir.ptr<!void> loc(#loc192)
    cir.call @free(%40) : (!cir.ptr<!void>) -> () extra(#fn_attr) loc(#loc191)
    cir.br ^bb16 loc(#loc183)
  ^bb16:  // pred: ^bb15
    cir.br ^bb17 loc(#loc178)
  ^bb17:  // 2 preds: ^bb13, ^bb16
    cir.br ^bb18 loc(#loc178)
  ^bb18:  // pred: ^bb17
    cir.return loc(#loc139)
  } loc(#loc404)
  cir.func internal private @_ZN51CWE122_Heap_Based_Buffer_Overflow__placement_new_08L8goodG2B1Ev() extra(#fn_attr1) {
    %0 = cir.alloca !cir.ptr<!ty_TwoIntsClass>, !cir.ptr<!cir.ptr<!ty_TwoIntsClass>>, ["classTwo", init] {alignment = 8 : i64} loc(#loc430)
    %1 = cir.alloca !cir.ptr<!s8i>, !cir.ptr<!cir.ptr<!s8i>>, ["data"] {alignment = 8 : i64} loc(#loc431)
    %2 = cir.alloca !cir.ptr<!s8i>, !cir.ptr<!cir.ptr<!s8i>>, ["dataBadBuffer", init] {alignment = 8 : i64} loc(#loc432)
    %3 = cir.alloca !cir.ptr<!s8i>, !cir.ptr<!cir.ptr<!s8i>>, ["dataGoodBuffer", init] {alignment = 8 : i64} loc(#loc433)
    %4 = cir.get_global @malloc : !cir.ptr<!cir.func<!cir.ptr<!void> (!u64i)>> loc(#loc203)
    %5 = cir.const #cir.int<4> : !u64i loc(#loc434)
    %6 = cir.call @malloc(%5) : (!u64i) -> !cir.ptr<!void> extra(#fn_attr) loc(#loc203)
    %7 = cir.cast(bitcast, %6 : !cir.ptr<!void>), !cir.ptr<!s8i> loc(#loc435)
    cir.store %7, %2 : !cir.ptr<!s8i>, !cir.ptr<!cir.ptr<!s8i>> loc(#loc432)
    cir.br ^bb1 loc(#loc436)
  ^bb1:  // pred: ^bb0
    %8 = cir.load %2 : !cir.ptr<!cir.ptr<!s8i>>, !cir.ptr<!s8i> loc(#loc208)
    %9 = cir.const #cir.ptr<null> : !cir.ptr<!s8i> loc(#loc209)
    %10 = cir.cmp(eq, %8, %9) : !cir.ptr<!s8i>, !cir.bool loc(#loc437)
    cir.brcond %10 ^bb2, ^bb3 loc(#loc438)
  ^bb2:  // pred: ^bb1
    %11 = cir.get_global @exit : !cir.ptr<!cir.func<!void (!s32i)>> loc(#loc211)
    %12 = cir.const #cir.int<1> : !s32i loc(#loc212)
    %13 = cir.unary(minus, %12) : !s32i, !s32i loc(#loc213)
    cir.call @exit(%13) : (!s32i) -> () extra(#fn_attr) loc(#loc211)
    cir.br ^bb3 loc(#loc207)
  ^bb3:  // 2 preds: ^bb1, ^bb2
    cir.br ^bb4 loc(#loc207)
  ^bb4:  // pred: ^bb3
    %14 = cir.const #cir.int<8> : !u64i loc(#loc439)
    %15 = cir.call @malloc(%14) : (!u64i) -> !cir.ptr<!void> extra(#fn_attr) loc(#loc216)
    %16 = cir.cast(bitcast, %15 : !cir.ptr<!void>), !cir.ptr<!s8i> loc(#loc440)
    cir.store %16, %3 : !cir.ptr<!s8i>, !cir.ptr<!cir.ptr<!s8i>> loc(#loc433)
    cir.br ^bb5 loc(#loc441)
  ^bb5:  // pred: ^bb4
    %17 = cir.load %3 : !cir.ptr<!cir.ptr<!s8i>>, !cir.ptr<!s8i> loc(#loc219)
    %18 = cir.const #cir.ptr<null> : !cir.ptr<!s8i> loc(#loc220)
    %19 = cir.cmp(eq, %17, %18) : !cir.ptr<!s8i>, !cir.bool loc(#loc442)
    cir.brcond %19 ^bb6, ^bb7 loc(#loc443)
  ^bb6:  // pred: ^bb5
    %20 = cir.get_global @exit : !cir.ptr<!cir.func<!void (!s32i)>> loc(#loc222)
    %21 = cir.const #cir.int<1> : !s32i loc(#loc223)
    %22 = cir.unary(minus, %21) : !s32i, !s32i loc(#loc224)
    cir.call @exit(%22) : (!s32i) -> () extra(#fn_attr) loc(#loc222)
    cir.br ^bb7 loc(#loc218)
  ^bb7:  // 2 preds: ^bb5, ^bb6
    cir.br ^bb8 loc(#loc218)
  ^bb8:  // pred: ^bb7
    cir.br ^bb9 loc(#loc444)
  ^bb9:  // pred: ^bb8
    %23 = cir.call @_ZL18staticReturnsFalsev() : () -> !s32i loc(#loc227)
    %24 = cir.cast(int_to_bool, %23 : !s32i), !cir.bool loc(#loc445)
    cir.brcond %24 ^bb10, ^bb11 loc(#loc446)
  ^bb10:  // pred: ^bb9
    %25 = cir.get_global @".str.4" : !cir.ptr<!cir.array<!s8i x 21>> loc(#loc232)
    %26 = cir.cast(array_to_ptrdecay, %25 : !cir.ptr<!cir.array<!s8i x 21>>), !cir.ptr<!s8i> loc(#loc232)
    cir.call @printLine(%26) : (!cir.ptr<!s8i>) -> () loc(#loc233)
    cir.br ^bb12 loc(#loc230)
  ^bb11:  // pred: ^bb9
    %27 = cir.load %3 : !cir.ptr<!cir.ptr<!s8i>>, !cir.ptr<!s8i> loc(#loc234)
    cir.store %27, %1 : !cir.ptr<!s8i>, !cir.ptr<!cir.ptr<!s8i>> loc(#loc447)
    cir.br ^bb12 loc(#loc226)
  ^bb12:  // 2 preds: ^bb10, ^bb11
    cir.br ^bb13 loc(#loc226)
  ^bb13:  // pred: ^bb12
    cir.br ^bb14 loc(#loc448)
  ^bb14:  // pred: ^bb13
    %28 = cir.call @_ZL17staticReturnsTruev() : () -> !s32i loc(#loc238)
    %29 = cir.cast(int_to_bool, %28 : !s32i), !cir.bool loc(#loc449)
    cir.brcond %29 ^bb15, ^bb18 loc(#loc450)
  ^bb15:  // pred: ^bb14
    cir.br ^bb16 loc(#loc451)
  ^bb16:  // pred: ^bb15
    %30 = cir.const #cir.int<8> : !u64i loc(#loc452)
    %31 = cir.load %1 : !cir.ptr<!cir.ptr<!s8i>>, !cir.ptr<!s8i> loc(#loc244)
    %32 = cir.cast(bitcast, %31 : !cir.ptr<!s8i>), !cir.ptr<!void> loc(#loc244)
    %33 = cir.cast(bitcast, %32 : !cir.ptr<!void>), !cir.ptr<!ty_TwoIntsClass> loc(#loc452)
    cir.call @_ZN12TwoIntsClassC2Ev(%33) : (!cir.ptr<!ty_TwoIntsClass>) -> () extra(#fn_attr) loc(#loc196)
    cir.store %33, %0 : !cir.ptr<!ty_TwoIntsClass>, !cir.ptr<!cir.ptr<!ty_TwoIntsClass>> loc(#loc430)
    %34 = cir.const #cir.int<5> : !s32i loc(#loc245)
    %35 = cir.load %0 : !cir.ptr<!cir.ptr<!ty_TwoIntsClass>>, !cir.ptr<!ty_TwoIntsClass> loc(#loc246)
    %36 = cir.get_member %35[0] {name = "intOne"} : !cir.ptr<!ty_TwoIntsClass> -> !cir.ptr<!s32i> loc(#loc64)
    cir.store %34, %36 : !s32i, !cir.ptr<!s32i> loc(#loc453)
    %37 = cir.const #cir.int<10> : !s32i loc(#loc247)
    %38 = cir.load %0 : !cir.ptr<!cir.ptr<!ty_TwoIntsClass>>, !cir.ptr<!ty_TwoIntsClass> loc(#loc248)
    %39 = cir.get_member %38[1] {name = "intTwo"} : !cir.ptr<!ty_TwoIntsClass> -> !cir.ptr<!s32i> loc(#loc67)
    cir.store %37, %39 : !s32i, !cir.ptr<!s32i> loc(#loc454)
    %40 = cir.load %0 : !cir.ptr<!cir.ptr<!ty_TwoIntsClass>>, !cir.ptr<!ty_TwoIntsClass> loc(#loc249)
    %41 = cir.get_member %40[0] {name = "intOne"} : !cir.ptr<!ty_TwoIntsClass> -> !cir.ptr<!s32i> loc(#loc64)
    %42 = cir.load %41 : !cir.ptr<!s32i>, !s32i loc(#loc250)
    cir.call @printIntLine(%42) : (!s32i) -> () loc(#loc251)
    %43 = cir.get_global @free : !cir.ptr<!cir.func<!void (!cir.ptr<!void>)>> loc(#loc252)
    %44 = cir.load %1 : !cir.ptr<!cir.ptr<!s8i>>, !cir.ptr<!s8i> loc(#loc253)
    %45 = cir.cast(bitcast, %44 : !cir.ptr<!s8i>), !cir.ptr<!void> loc(#loc253)
    cir.call @free(%45) : (!cir.ptr<!void>) -> () extra(#fn_attr) loc(#loc252)
    cir.br ^bb17 loc(#loc242)
  ^bb17:  // pred: ^bb16
    cir.br ^bb18 loc(#loc237)
  ^bb18:  // 2 preds: ^bb14, ^bb17
    cir.br ^bb19 loc(#loc237)
  ^bb19:  // pred: ^bb18
    cir.return loc(#loc194)
  } loc(#loc429)
  cir.func internal private @_ZN51CWE122_Heap_Based_Buffer_Overflow__placement_new_08L8goodG2B2Ev() extra(#fn_attr1) {
    %0 = cir.alloca !cir.ptr<!ty_TwoIntsClass>, !cir.ptr<!cir.ptr<!ty_TwoIntsClass>>, ["classTwo", init] {alignment = 8 : i64} loc(#loc456)
    %1 = cir.alloca !cir.ptr<!s8i>, !cir.ptr<!cir.ptr<!s8i>>, ["data"] {alignment = 8 : i64} loc(#loc457)
    %2 = cir.alloca !cir.ptr<!s8i>, !cir.ptr<!cir.ptr<!s8i>>, ["dataBadBuffer", init] {alignment = 8 : i64} loc(#loc458)
    %3 = cir.alloca !cir.ptr<!s8i>, !cir.ptr<!cir.ptr<!s8i>>, ["dataGoodBuffer", init] {alignment = 8 : i64} loc(#loc459)
    %4 = cir.get_global @malloc : !cir.ptr<!cir.func<!cir.ptr<!void> (!u64i)>> loc(#loc264)
    %5 = cir.const #cir.int<4> : !u64i loc(#loc460)
    %6 = cir.call @malloc(%5) : (!u64i) -> !cir.ptr<!void> extra(#fn_attr) loc(#loc264)
    %7 = cir.cast(bitcast, %6 : !cir.ptr<!void>), !cir.ptr<!s8i> loc(#loc461)
    cir.store %7, %2 : !cir.ptr<!s8i>, !cir.ptr<!cir.ptr<!s8i>> loc(#loc458)
    cir.br ^bb1 loc(#loc462)
  ^bb1:  // pred: ^bb0
    %8 = cir.load %2 : !cir.ptr<!cir.ptr<!s8i>>, !cir.ptr<!s8i> loc(#loc269)
    %9 = cir.const #cir.ptr<null> : !cir.ptr<!s8i> loc(#loc270)
    %10 = cir.cmp(eq, %8, %9) : !cir.ptr<!s8i>, !cir.bool loc(#loc463)
    cir.brcond %10 ^bb2, ^bb3 loc(#loc464)
  ^bb2:  // pred: ^bb1
    %11 = cir.get_global @exit : !cir.ptr<!cir.func<!void (!s32i)>> loc(#loc272)
    %12 = cir.const #cir.int<1> : !s32i loc(#loc273)
    %13 = cir.unary(minus, %12) : !s32i, !s32i loc(#loc274)
    cir.call @exit(%13) : (!s32i) -> () extra(#fn_attr) loc(#loc272)
    cir.br ^bb3 loc(#loc268)
  ^bb3:  // 2 preds: ^bb1, ^bb2
    cir.br ^bb4 loc(#loc268)
  ^bb4:  // pred: ^bb3
    %14 = cir.const #cir.int<8> : !u64i loc(#loc465)
    %15 = cir.call @malloc(%14) : (!u64i) -> !cir.ptr<!void> extra(#fn_attr) loc(#loc277)
    %16 = cir.cast(bitcast, %15 : !cir.ptr<!void>), !cir.ptr<!s8i> loc(#loc466)
    cir.store %16, %3 : !cir.ptr<!s8i>, !cir.ptr<!cir.ptr<!s8i>> loc(#loc459)
    cir.br ^bb5 loc(#loc467)
  ^bb5:  // pred: ^bb4
    %17 = cir.load %3 : !cir.ptr<!cir.ptr<!s8i>>, !cir.ptr<!s8i> loc(#loc280)
    %18 = cir.const #cir.ptr<null> : !cir.ptr<!s8i> loc(#loc281)
    %19 = cir.cmp(eq, %17, %18) : !cir.ptr<!s8i>, !cir.bool loc(#loc468)
    cir.brcond %19 ^bb6, ^bb7 loc(#loc469)
  ^bb6:  // pred: ^bb5
    %20 = cir.get_global @exit : !cir.ptr<!cir.func<!void (!s32i)>> loc(#loc283)
    %21 = cir.const #cir.int<1> : !s32i loc(#loc284)
    %22 = cir.unary(minus, %21) : !s32i, !s32i loc(#loc285)
    cir.call @exit(%22) : (!s32i) -> () extra(#fn_attr) loc(#loc283)
    cir.br ^bb7 loc(#loc279)
  ^bb7:  // 2 preds: ^bb5, ^bb6
    cir.br ^bb8 loc(#loc279)
  ^bb8:  // pred: ^bb7
    cir.br ^bb9 loc(#loc470)
  ^bb9:  // pred: ^bb8
    %23 = cir.call @_ZL17staticReturnsTruev() : () -> !s32i loc(#loc288)
    %24 = cir.cast(int_to_bool, %23 : !s32i), !cir.bool loc(#loc471)
    cir.brcond %24 ^bb10, ^bb11 loc(#loc472)
  ^bb10:  // pred: ^bb9
    %25 = cir.load %3 : !cir.ptr<!cir.ptr<!s8i>>, !cir.ptr<!s8i> loc(#loc291)
    cir.store %25, %1 : !cir.ptr<!s8i>, !cir.ptr<!cir.ptr<!s8i>> loc(#loc473)
    cir.br ^bb11 loc(#loc287)
  ^bb11:  // 2 preds: ^bb9, ^bb10
    cir.br ^bb12 loc(#loc287)
  ^bb12:  // pred: ^bb11
    cir.br ^bb13 loc(#loc474)
  ^bb13:  // pred: ^bb12
    %26 = cir.call @_ZL17staticReturnsTruev() : () -> !s32i loc(#loc295)
    %27 = cir.cast(int_to_bool, %26 : !s32i), !cir.bool loc(#loc475)
    cir.brcond %27 ^bb14, ^bb17 loc(#loc476)
  ^bb14:  // pred: ^bb13
    cir.br ^bb15 loc(#loc477)
  ^bb15:  // pred: ^bb14
    %28 = cir.const #cir.int<8> : !u64i loc(#loc478)
    %29 = cir.load %1 : !cir.ptr<!cir.ptr<!s8i>>, !cir.ptr<!s8i> loc(#loc301)
    %30 = cir.cast(bitcast, %29 : !cir.ptr<!s8i>), !cir.ptr<!void> loc(#loc301)
    %31 = cir.cast(bitcast, %30 : !cir.ptr<!void>), !cir.ptr<!ty_TwoIntsClass> loc(#loc478)
    cir.call @_ZN12TwoIntsClassC2Ev(%31) : (!cir.ptr<!ty_TwoIntsClass>) -> () extra(#fn_attr) loc(#loc257)
    cir.store %31, %0 : !cir.ptr<!ty_TwoIntsClass>, !cir.ptr<!cir.ptr<!ty_TwoIntsClass>> loc(#loc456)
    %32 = cir.const #cir.int<5> : !s32i loc(#loc302)
    %33 = cir.load %0 : !cir.ptr<!cir.ptr<!ty_TwoIntsClass>>, !cir.ptr<!ty_TwoIntsClass> loc(#loc303)
    %34 = cir.get_member %33[0] {name = "intOne"} : !cir.ptr<!ty_TwoIntsClass> -> !cir.ptr<!s32i> loc(#loc64)
    cir.store %32, %34 : !s32i, !cir.ptr<!s32i> loc(#loc479)
    %35 = cir.const #cir.int<10> : !s32i loc(#loc304)
    %36 = cir.load %0 : !cir.ptr<!cir.ptr<!ty_TwoIntsClass>>, !cir.ptr<!ty_TwoIntsClass> loc(#loc305)
    %37 = cir.get_member %36[1] {name = "intTwo"} : !cir.ptr<!ty_TwoIntsClass> -> !cir.ptr<!s32i> loc(#loc67)
    cir.store %35, %37 : !s32i, !cir.ptr<!s32i> loc(#loc480)
    %38 = cir.load %0 : !cir.ptr<!cir.ptr<!ty_TwoIntsClass>>, !cir.ptr<!ty_TwoIntsClass> loc(#loc306)
    %39 = cir.get_member %38[0] {name = "intOne"} : !cir.ptr<!ty_TwoIntsClass> -> !cir.ptr<!s32i> loc(#loc64)
    %40 = cir.load %39 : !cir.ptr<!s32i>, !s32i loc(#loc307)
    cir.call @printIntLine(%40) : (!s32i) -> () loc(#loc308)
    %41 = cir.get_global @free : !cir.ptr<!cir.func<!void (!cir.ptr<!void>)>> loc(#loc309)
    %42 = cir.load %1 : !cir.ptr<!cir.ptr<!s8i>>, !cir.ptr<!s8i> loc(#loc310)
    %43 = cir.cast(bitcast, %42 : !cir.ptr<!s8i>), !cir.ptr<!void> loc(#loc310)
    cir.call @free(%43) : (!cir.ptr<!void>) -> () extra(#fn_attr) loc(#loc309)
    cir.br ^bb16 loc(#loc299)
  ^bb16:  // pred: ^bb15
    cir.br ^bb17 loc(#loc294)
  ^bb17:  // 2 preds: ^bb13, ^bb16
    cir.br ^bb18 loc(#loc294)
  ^bb18:  // pred: ^bb17
    cir.return loc(#loc255)
  } loc(#loc455)
  cir.func @_ZN51CWE122_Heap_Based_Buffer_Overflow__placement_new_084goodEv() extra(#fn_attr1) {
    cir.call @_ZN51CWE122_Heap_Based_Buffer_Overflow__placement_new_08L8goodB2G1Ev() : () -> () loc(#loc313)
    cir.call @_ZN51CWE122_Heap_Based_Buffer_Overflow__placement_new_08L8goodB2G2Ev() : () -> () loc(#loc314)
    cir.call @_ZN51CWE122_Heap_Based_Buffer_Overflow__placement_new_08L8goodG2B1Ev() : () -> () loc(#loc315)
    cir.call @_ZN51CWE122_Heap_Based_Buffer_Overflow__placement_new_08L8goodG2B2Ev() : () -> () loc(#loc316)
    cir.return loc(#loc312)
  } loc(#loc481)
  cir.func private @srand(!u32i) extra(#fn_attr) loc(#loc482)
  cir.func private @time(!cir.ptr<!s64i>) -> !s64i extra(#fn_attr) loc(#loc483)
  cir.func private @printLine(!cir.ptr<!s8i>) loc(#loc484)
  cir.global "private" constant cir_private dsolocal @".str" = #cir.const_array<"Calling good()...\00" : !cir.array<!s8i x 18>> : !cir.array<!s8i x 18> {alignment = 1 : i64} loc(#loc323)
  cir.global "private" constant cir_private dsolocal @".str.1" = #cir.const_array<"Finished good()\00" : !cir.array<!s8i x 16>> : !cir.array<!s8i x 16> {alignment = 1 : i64} loc(#loc324)
  cir.global "private" constant cir_private dsolocal @".str.2" = #cir.const_array<"Calling bad()...\00" : !cir.array<!s8i x 17>> : !cir.array<!s8i x 17> {alignment = 1 : i64} loc(#loc325)
  cir.global "private" constant cir_private dsolocal @".str.3" = #cir.const_array<"Finished bad()\00" : !cir.array<!s8i x 15>> : !cir.array<!s8i x 15> {alignment = 1 : i64} loc(#loc326)
  cir.func @main(%arg0: !s32i loc(fused[#loc329, #loc330]), %arg1: !cir.ptr<!cir.ptr<!s8i>> loc(fused[#loc331, #loc332])) -> !s32i extra(#fn_attr1) {
    %0 = cir.alloca !s32i, !cir.ptr<!s32i>, ["argc", init] {alignment = 4 : i64} loc(#loc486)
    %1 = cir.alloca !cir.ptr<!cir.ptr<!s8i>>, !cir.ptr<!cir.ptr<!cir.ptr<!s8i>>>, ["argv", init] {alignment = 8 : i64} loc(#loc487)
    %2 = cir.alloca !s32i, !cir.ptr<!s32i>, ["__retval"] {alignment = 4 : i64} loc(#loc328)
    cir.store %arg0, %0 : !s32i, !cir.ptr<!s32i> loc(#loc333)
    cir.store %arg1, %1 : !cir.ptr<!cir.ptr<!s8i>>, !cir.ptr<!cir.ptr<!cir.ptr<!s8i>>> loc(#loc333)
    %3 = cir.const #cir.ptr<null> : !cir.ptr<!s64i> loc(#loc334)
    %4 = cir.call @time(%3) : (!cir.ptr<!s64i>) -> !s64i extra(#fn_attr) loc(#loc335)
    %5 = cir.cast(integral, %4 : !s64i), !u32i loc(#loc335)
    cir.call @srand(%5) : (!u32i) -> () extra(#fn_attr) loc(#loc336)
    %6 = cir.get_global @".str" : !cir.ptr<!cir.array<!s8i x 18>> loc(#loc323)
    %7 = cir.cast(array_to_ptrdecay, %6 : !cir.ptr<!cir.array<!s8i x 18>>), !cir.ptr<!s8i> loc(#loc323)
    cir.call @printLine(%7) : (!cir.ptr<!s8i>) -> () loc(#loc337)
    cir.call @_ZN51CWE122_Heap_Based_Buffer_Overflow__placement_new_084goodEv() : () -> () loc(#loc338)
    %8 = cir.get_global @".str.1" : !cir.ptr<!cir.array<!s8i x 16>> loc(#loc324)
    %9 = cir.cast(array_to_ptrdecay, %8 : !cir.ptr<!cir.array<!s8i x 16>>), !cir.ptr<!s8i> loc(#loc324)
    cir.call @printLine(%9) : (!cir.ptr<!s8i>) -> () loc(#loc339)
    %10 = cir.get_global @".str.2" : !cir.ptr<!cir.array<!s8i x 17>> loc(#loc325)
    %11 = cir.cast(array_to_ptrdecay, %10 : !cir.ptr<!cir.array<!s8i x 17>>), !cir.ptr<!s8i> loc(#loc325)
    cir.call @printLine(%11) : (!cir.ptr<!s8i>) -> () loc(#loc340)
    cir.call @_ZN51CWE122_Heap_Based_Buffer_Overflow__placement_new_083badEv() : () -> () loc(#loc341)
    %12 = cir.get_global @".str.3" : !cir.ptr<!cir.array<!s8i x 15>> loc(#loc326)
    %13 = cir.cast(array_to_ptrdecay, %12 : !cir.ptr<!cir.array<!s8i x 15>>), !cir.ptr<!s8i> loc(#loc326)
    cir.call @printLine(%13) : (!cir.ptr<!s8i>) -> () loc(#loc342)
    %14 = cir.const #cir.int<0> : !s32i loc(#loc343)
    cir.store %14, %2 : !s32i, !cir.ptr<!s32i> loc(#loc488)
    %15 = cir.load %2 : !cir.ptr<!s32i>, !s32i loc(#loc488)
    cir.return %15 : !s32i loc(#loc488)
  } loc(#loc485)
} loc(#loc)
#loc = loc("/home/ladisgin/git_proj/juliet-c/testcases/CWE122_Heap_Based_Buffer_Overflow/s11/CWE122_Heap_Based_Buffer_Overflow__placement_new_08.cpp":0:0)
#loc1 = loc("/usr/include/stdlib.h":672:1)
#loc2 = loc("/usr/include/stdlib.h":672:45)
#loc3 = loc("/usr/include/stdlib.h":756:1)
#loc4 = loc("/usr/include/stdlib.h":756:70)
#loc5 = loc("CWE122_Heap_Based_Buffer_Overflow__placement_new_08.cpp":23:1)
#loc6 = loc("CWE122_Heap_Based_Buffer_Overflow__placement_new_08.cpp":26:1)
#loc7 = loc("CWE122_Heap_Based_Buffer_Overflow__placement_new_08.cpp":25:12)
#loc8 = loc("CWE122_Heap_Based_Buffer_Overflow__placement_new_08.cpp":25:5)
#loc10 = loc("../../../testcasesupport/std_testcase_io.h":18:1)
#loc11 = loc("../../../testcasesupport/std_testcase_io.h":18:33)
#loc12 = loc("/usr/include/stdlib.h":687:1)
#loc13 = loc("/usr/include/stdlib.h":687:32)
#loc14 = loc("CWE122_Heap_Based_Buffer_Overflow__placement_new_08.cpp":38:1)
#loc15 = loc("CWE122_Heap_Based_Buffer_Overflow__placement_new_08.cpp":67:1)
#loc16 = loc("CWE122_Heap_Based_Buffer_Overflow__placement_new_08.cpp":58:13)
#loc17 = loc("CWE122_Heap_Based_Buffer_Overflow__placement_new_08.cpp":58:49)
#loc18 = loc("CWE122_Heap_Based_Buffer_Overflow__placement_new_08.cpp":40:5)
#loc19 = loc("CWE122_Heap_Based_Buffer_Overflow__placement_new_08.cpp":40:12)
#loc20 = loc("CWE122_Heap_Based_Buffer_Overflow__placement_new_08.cpp":41:5)
#loc21 = loc("CWE122_Heap_Based_Buffer_Overflow__placement_new_08.cpp":41:62)
#loc22 = loc("CWE122_Heap_Based_Buffer_Overflow__placement_new_08.cpp":43:5)
#loc23 = loc("CWE122_Heap_Based_Buffer_Overflow__placement_new_08.cpp":43:64)
#loc24 = loc("CWE122_Heap_Based_Buffer_Overflow__placement_new_08.cpp":41:36)
#loc25 = loc("CWE122_Heap_Based_Buffer_Overflow__placement_new_08.cpp":41:43)
#loc26 = loc("CWE122_Heap_Based_Buffer_Overflow__placement_new_08.cpp":41:61)
#loc27 = loc("CWE122_Heap_Based_Buffer_Overflow__placement_new_08.cpp":42:5)
#loc28 = loc("CWE122_Heap_Based_Buffer_Overflow__placement_new_08.cpp":42:42)
#loc29 = loc("CWE122_Heap_Based_Buffer_Overflow__placement_new_08.cpp":42:9)
#loc30 = loc("CWE122_Heap_Based_Buffer_Overflow__placement_new_08.cpp":42:26)
#loc31 = loc("CWE122_Heap_Based_Buffer_Overflow__placement_new_08.cpp":42:32)
#loc32 = loc("CWE122_Heap_Based_Buffer_Overflow__placement_new_08.cpp":42:33)
#loc33 = loc("CWE122_Heap_Based_Buffer_Overflow__placement_new_08.cpp":42:39)
#loc34 = loc("CWE122_Heap_Based_Buffer_Overflow__placement_new_08.cpp":42:38)
#loc35 = loc("CWE122_Heap_Based_Buffer_Overflow__placement_new_08.cpp":43:44)
#loc36 = loc("CWE122_Heap_Based_Buffer_Overflow__placement_new_08.cpp":43:63)
#loc37 = loc("CWE122_Heap_Based_Buffer_Overflow__placement_new_08.cpp":43:37)
#loc38 = loc("CWE122_Heap_Based_Buffer_Overflow__placement_new_08.cpp":44:5)
#loc39 = loc("CWE122_Heap_Based_Buffer_Overflow__placement_new_08.cpp":44:43)
#loc40 = loc("CWE122_Heap_Based_Buffer_Overflow__placement_new_08.cpp":44:9)
#loc41 = loc("CWE122_Heap_Based_Buffer_Overflow__placement_new_08.cpp":44:27)
#loc42 = loc("CWE122_Heap_Based_Buffer_Overflow__placement_new_08.cpp":44:33)
#loc43 = loc("CWE122_Heap_Based_Buffer_Overflow__placement_new_08.cpp":44:34)
#loc44 = loc("CWE122_Heap_Based_Buffer_Overflow__placement_new_08.cpp":44:40)
#loc45 = loc("CWE122_Heap_Based_Buffer_Overflow__placement_new_08.cpp":44:39)
#loc46 = loc("CWE122_Heap_Based_Buffer_Overflow__placement_new_08.cpp":45:5)
#loc47 = loc("CWE122_Heap_Based_Buffer_Overflow__placement_new_08.cpp":49:5)
#loc48 = loc("CWE122_Heap_Based_Buffer_Overflow__placement_new_08.cpp":45:8)
#loc49 = loc("CWE122_Heap_Based_Buffer_Overflow__placement_new_08.cpp":45:26)
#loc50 = loc("CWE122_Heap_Based_Buffer_Overflow__placement_new_08.cpp":46:5)
#loc51 = loc("CWE122_Heap_Based_Buffer_Overflow__placement_new_08.cpp":48:16)
#loc52 = loc("CWE122_Heap_Based_Buffer_Overflow__placement_new_08.cpp":48:9)
#loc53 = loc("CWE122_Heap_Based_Buffer_Overflow__placement_new_08.cpp":50:5)
#loc54 = loc("CWE122_Heap_Based_Buffer_Overflow__placement_new_08.cpp":66:5)
#loc55 = loc("CWE122_Heap_Based_Buffer_Overflow__placement_new_08.cpp":50:8)
#loc56 = loc("CWE122_Heap_Based_Buffer_Overflow__placement_new_08.cpp":50:26)
#loc57 = loc("CWE122_Heap_Based_Buffer_Overflow__placement_new_08.cpp":51:5)
#loc58 = loc("CWE122_Heap_Based_Buffer_Overflow__placement_new_08.cpp":52:9)
#loc59 = loc("CWE122_Heap_Based_Buffer_Overflow__placement_new_08.cpp":65:9)
#loc60 = loc("CWE122_Heap_Based_Buffer_Overflow__placement_new_08.cpp":58:39)
#loc61 = loc("CWE122_Heap_Based_Buffer_Overflow__placement_new_08.cpp":58:43)
#loc62 = loc("CWE122_Heap_Based_Buffer_Overflow__placement_new_08.cpp":60:32)
#loc63 = loc("CWE122_Heap_Based_Buffer_Overflow__placement_new_08.cpp":60:13)
#loc64 = loc("../../../testcasesupport/std_testcase.h":64:13)
#loc65 = loc("CWE122_Heap_Based_Buffer_Overflow__placement_new_08.cpp":61:32)
#loc66 = loc("CWE122_Heap_Based_Buffer_Overflow__placement_new_08.cpp":61:13)
#loc67 = loc("../../../testcasesupport/std_testcase.h":65:13)
#loc68 = loc("CWE122_Heap_Based_Buffer_Overflow__placement_new_08.cpp":62:26)
#loc69 = loc("CWE122_Heap_Based_Buffer_Overflow__placement_new_08.cpp":62:36)
#loc70 = loc("CWE122_Heap_Based_Buffer_Overflow__placement_new_08.cpp":62:13)
#loc71 = loc("CWE122_Heap_Based_Buffer_Overflow__placement_new_08.cpp":64:13)
#loc72 = loc("CWE122_Heap_Based_Buffer_Overflow__placement_new_08.cpp":64:18)
#loc73 = loc("CWE122_Heap_Based_Buffer_Overflow__placement_new_08.cpp":28:1)
#loc74 = loc("CWE122_Heap_Based_Buffer_Overflow__placement_new_08.cpp":31:1)
#loc75 = loc("CWE122_Heap_Based_Buffer_Overflow__placement_new_08.cpp":30:12)
#loc76 = loc("CWE122_Heap_Based_Buffer_Overflow__placement_new_08.cpp":30:5)
#loc77 = loc("CWE122_Heap_Based_Buffer_Overflow__placement_new_08.cpp":89:19)
#loc79 = loc("CWE122_Heap_Based_Buffer_Overflow__placement_new_08.cpp":74:1)
#loc80 = loc("CWE122_Heap_Based_Buffer_Overflow__placement_new_08.cpp":106:1)
#loc81 = loc("CWE122_Heap_Based_Buffer_Overflow__placement_new_08.cpp":99:13)
#loc82 = loc("CWE122_Heap_Based_Buffer_Overflow__placement_new_08.cpp":99:48)
#loc83 = loc("CWE122_Heap_Based_Buffer_Overflow__placement_new_08.cpp":76:5)
#loc84 = loc("CWE122_Heap_Based_Buffer_Overflow__placement_new_08.cpp":76:12)
#loc85 = loc("CWE122_Heap_Based_Buffer_Overflow__placement_new_08.cpp":77:5)
#loc86 = loc("CWE122_Heap_Based_Buffer_Overflow__placement_new_08.cpp":77:62)
#loc87 = loc("CWE122_Heap_Based_Buffer_Overflow__placement_new_08.cpp":79:5)
#loc88 = loc("CWE122_Heap_Based_Buffer_Overflow__placement_new_08.cpp":79:64)
#loc89 = loc("CWE122_Heap_Based_Buffer_Overflow__placement_new_08.cpp":77:36)
#loc90 = loc("CWE122_Heap_Based_Buffer_Overflow__placement_new_08.cpp":77:43)
#loc91 = loc("CWE122_Heap_Based_Buffer_Overflow__placement_new_08.cpp":77:61)
#loc92 = loc("CWE122_Heap_Based_Buffer_Overflow__placement_new_08.cpp":78:5)
#loc93 = loc("CWE122_Heap_Based_Buffer_Overflow__placement_new_08.cpp":78:42)
#loc94 = loc("CWE122_Heap_Based_Buffer_Overflow__placement_new_08.cpp":78:9)
#loc95 = loc("CWE122_Heap_Based_Buffer_Overflow__placement_new_08.cpp":78:26)
#loc96 = loc("CWE122_Heap_Based_Buffer_Overflow__placement_new_08.cpp":78:32)
#loc97 = loc("CWE122_Heap_Based_Buffer_Overflow__placement_new_08.cpp":78:33)
#loc98 = loc("CWE122_Heap_Based_Buffer_Overflow__placement_new_08.cpp":78:39)
#loc99 = loc("CWE122_Heap_Based_Buffer_Overflow__placement_new_08.cpp":78:38)
#loc100 = loc("CWE122_Heap_Based_Buffer_Overflow__placement_new_08.cpp":79:44)
#loc101 = loc("CWE122_Heap_Based_Buffer_Overflow__placement_new_08.cpp":79:63)
#loc102 = loc("CWE122_Heap_Based_Buffer_Overflow__placement_new_08.cpp":79:37)
#loc103 = loc("CWE122_Heap_Based_Buffer_Overflow__placement_new_08.cpp":80:5)
#loc104 = loc("CWE122_Heap_Based_Buffer_Overflow__placement_new_08.cpp":80:43)
#loc105 = loc("CWE122_Heap_Based_Buffer_Overflow__placement_new_08.cpp":80:9)
#loc106 = loc("CWE122_Heap_Based_Buffer_Overflow__placement_new_08.cpp":80:27)
#loc107 = loc("CWE122_Heap_Based_Buffer_Overflow__placement_new_08.cpp":80:33)
#loc108 = loc("CWE122_Heap_Based_Buffer_Overflow__placement_new_08.cpp":80:34)
#loc109 = loc("CWE122_Heap_Based_Buffer_Overflow__placement_new_08.cpp":80:40)
#loc110 = loc("CWE122_Heap_Based_Buffer_Overflow__placement_new_08.cpp":80:39)
#loc111 = loc("CWE122_Heap_Based_Buffer_Overflow__placement_new_08.cpp":81:5)
#loc112 = loc("CWE122_Heap_Based_Buffer_Overflow__placement_new_08.cpp":85:5)
#loc113 = loc("CWE122_Heap_Based_Buffer_Overflow__placement_new_08.cpp":81:8)
#loc114 = loc("CWE122_Heap_Based_Buffer_Overflow__placement_new_08.cpp":81:26)
#loc115 = loc("CWE122_Heap_Based_Buffer_Overflow__placement_new_08.cpp":82:5)
#loc116 = loc("CWE122_Heap_Based_Buffer_Overflow__placement_new_08.cpp":84:16)
#loc117 = loc("CWE122_Heap_Based_Buffer_Overflow__placement_new_08.cpp":84:9)
#loc118 = loc("CWE122_Heap_Based_Buffer_Overflow__placement_new_08.cpp":86:5)
#loc119 = loc("CWE122_Heap_Based_Buffer_Overflow__placement_new_08.cpp":105:5)
#loc120 = loc("CWE122_Heap_Based_Buffer_Overflow__placement_new_08.cpp":86:8)
#loc121 = loc("CWE122_Heap_Based_Buffer_Overflow__placement_new_08.cpp":86:27)
#loc122 = loc("CWE122_Heap_Based_Buffer_Overflow__placement_new_08.cpp":87:5)
#loc123 = loc("CWE122_Heap_Based_Buffer_Overflow__placement_new_08.cpp":90:5)
#loc124 = loc("CWE122_Heap_Based_Buffer_Overflow__placement_new_08.cpp":92:5)
#loc125 = loc("CWE122_Heap_Based_Buffer_Overflow__placement_new_08.cpp":89:9)
#loc126 = loc("CWE122_Heap_Based_Buffer_Overflow__placement_new_08.cpp":93:9)
#loc127 = loc("CWE122_Heap_Based_Buffer_Overflow__placement_new_08.cpp":104:9)
#loc128 = loc("CWE122_Heap_Based_Buffer_Overflow__placement_new_08.cpp":99:38)
#loc129 = loc("CWE122_Heap_Based_Buffer_Overflow__placement_new_08.cpp":99:42)
#loc130 = loc("CWE122_Heap_Based_Buffer_Overflow__placement_new_08.cpp":101:32)
#loc131 = loc("CWE122_Heap_Based_Buffer_Overflow__placement_new_08.cpp":101:13)
#loc132 = loc("../../../testcasesupport/std_testcase.h":71:13)
#loc133 = loc("CWE122_Heap_Based_Buffer_Overflow__placement_new_08.cpp":102:26)
#loc134 = loc("CWE122_Heap_Based_Buffer_Overflow__placement_new_08.cpp":102:36)
#loc135 = loc("CWE122_Heap_Based_Buffer_Overflow__placement_new_08.cpp":102:13)
#loc136 = loc("CWE122_Heap_Based_Buffer_Overflow__placement_new_08.cpp":103:13)
#loc137 = loc("CWE122_Heap_Based_Buffer_Overflow__placement_new_08.cpp":103:18)
#loc138 = loc("CWE122_Heap_Based_Buffer_Overflow__placement_new_08.cpp":109:1)
#loc139 = loc("CWE122_Heap_Based_Buffer_Overflow__placement_new_08.cpp":136:1)
#loc140 = loc("CWE122_Heap_Based_Buffer_Overflow__placement_new_08.cpp":129:13)
#loc141 = loc("CWE122_Heap_Based_Buffer_Overflow__placement_new_08.cpp":129:48)
#loc142 = loc("CWE122_Heap_Based_Buffer_Overflow__placement_new_08.cpp":111:5)
#loc143 = loc("CWE122_Heap_Based_Buffer_Overflow__placement_new_08.cpp":111:12)
#loc144 = loc("CWE122_Heap_Based_Buffer_Overflow__placement_new_08.cpp":112:5)
#loc145 = loc("CWE122_Heap_Based_Buffer_Overflow__placement_new_08.cpp":112:62)
#loc146 = loc("CWE122_Heap_Based_Buffer_Overflow__placement_new_08.cpp":114:5)
#loc147 = loc("CWE122_Heap_Based_Buffer_Overflow__placement_new_08.cpp":114:64)
#loc148 = loc("CWE122_Heap_Based_Buffer_Overflow__placement_new_08.cpp":112:36)
#loc149 = loc("CWE122_Heap_Based_Buffer_Overflow__placement_new_08.cpp":112:43)
#loc150 = loc("CWE122_Heap_Based_Buffer_Overflow__placement_new_08.cpp":112:61)
#loc151 = loc("CWE122_Heap_Based_Buffer_Overflow__placement_new_08.cpp":113:5)
#loc152 = loc("CWE122_Heap_Based_Buffer_Overflow__placement_new_08.cpp":113:42)
#loc153 = loc("CWE122_Heap_Based_Buffer_Overflow__placement_new_08.cpp":113:9)
#loc154 = loc("CWE122_Heap_Based_Buffer_Overflow__placement_new_08.cpp":113:26)
#loc155 = loc("CWE122_Heap_Based_Buffer_Overflow__placement_new_08.cpp":113:32)
#loc156 = loc("CWE122_Heap_Based_Buffer_Overflow__placement_new_08.cpp":113:33)
#loc157 = loc("CWE122_Heap_Based_Buffer_Overflow__placement_new_08.cpp":113:39)
#loc158 = loc("CWE122_Heap_Based_Buffer_Overflow__placement_new_08.cpp":113:38)
#loc159 = loc("CWE122_Heap_Based_Buffer_Overflow__placement_new_08.cpp":114:44)
#loc160 = loc("CWE122_Heap_Based_Buffer_Overflow__placement_new_08.cpp":114:63)
#loc161 = loc("CWE122_Heap_Based_Buffer_Overflow__placement_new_08.cpp":114:37)
#loc162 = loc("CWE122_Heap_Based_Buffer_Overflow__placement_new_08.cpp":115:5)
#loc163 = loc("CWE122_Heap_Based_Buffer_Overflow__placement_new_08.cpp":115:43)
#loc164 = loc("CWE122_Heap_Based_Buffer_Overflow__placement_new_08.cpp":115:9)
#loc165 = loc("CWE122_Heap_Based_Buffer_Overflow__placement_new_08.cpp":115:27)
#loc166 = loc("CWE122_Heap_Based_Buffer_Overflow__placement_new_08.cpp":115:33)
#loc167 = loc("CWE122_Heap_Based_Buffer_Overflow__placement_new_08.cpp":115:34)
#loc168 = loc("CWE122_Heap_Based_Buffer_Overflow__placement_new_08.cpp":115:40)
#loc169 = loc("CWE122_Heap_Based_Buffer_Overflow__placement_new_08.cpp":115:39)
#loc170 = loc("CWE122_Heap_Based_Buffer_Overflow__placement_new_08.cpp":116:5)
#loc171 = loc("CWE122_Heap_Based_Buffer_Overflow__placement_new_08.cpp":120:5)
#loc172 = loc("CWE122_Heap_Based_Buffer_Overflow__placement_new_08.cpp":116:8)
#loc173 = loc("CWE122_Heap_Based_Buffer_Overflow__placement_new_08.cpp":116:26)
#loc174 = loc("CWE122_Heap_Based_Buffer_Overflow__placement_new_08.cpp":117:5)
#loc175 = loc("CWE122_Heap_Based_Buffer_Overflow__placement_new_08.cpp":119:16)
#loc176 = loc("CWE122_Heap_Based_Buffer_Overflow__placement_new_08.cpp":119:9)
#loc177 = loc("CWE122_Heap_Based_Buffer_Overflow__placement_new_08.cpp":121:5)
#loc178 = loc("CWE122_Heap_Based_Buffer_Overflow__placement_new_08.cpp":135:5)
#loc179 = loc("CWE122_Heap_Based_Buffer_Overflow__placement_new_08.cpp":121:8)
#loc180 = loc("CWE122_Heap_Based_Buffer_Overflow__placement_new_08.cpp":121:26)
#loc181 = loc("CWE122_Heap_Based_Buffer_Overflow__placement_new_08.cpp":122:5)
#loc182 = loc("CWE122_Heap_Based_Buffer_Overflow__placement_new_08.cpp":123:9)
#loc183 = loc("CWE122_Heap_Based_Buffer_Overflow__placement_new_08.cpp":134:9)
#loc184 = loc("CWE122_Heap_Based_Buffer_Overflow__placement_new_08.cpp":129:38)
#loc185 = loc("CWE122_Heap_Based_Buffer_Overflow__placement_new_08.cpp":129:42)
#loc186 = loc("CWE122_Heap_Based_Buffer_Overflow__placement_new_08.cpp":131:32)
#loc187 = loc("CWE122_Heap_Based_Buffer_Overflow__placement_new_08.cpp":131:13)
#loc188 = loc("CWE122_Heap_Based_Buffer_Overflow__placement_new_08.cpp":132:26)
#loc189 = loc("CWE122_Heap_Based_Buffer_Overflow__placement_new_08.cpp":132:36)
#loc190 = loc("CWE122_Heap_Based_Buffer_Overflow__placement_new_08.cpp":132:13)
#loc191 = loc("CWE122_Heap_Based_Buffer_Overflow__placement_new_08.cpp":133:13)
#loc192 = loc("CWE122_Heap_Based_Buffer_Overflow__placement_new_08.cpp":133:18)
#loc193 = loc("CWE122_Heap_Based_Buffer_Overflow__placement_new_08.cpp":139:1)
#loc194 = loc("CWE122_Heap_Based_Buffer_Overflow__placement_new_08.cpp":173:1)
#loc195 = loc("CWE122_Heap_Based_Buffer_Overflow__placement_new_08.cpp":164:13)
#loc196 = loc("CWE122_Heap_Based_Buffer_Overflow__placement_new_08.cpp":164:49)
#loc197 = loc("CWE122_Heap_Based_Buffer_Overflow__placement_new_08.cpp":141:5)
#loc198 = loc("CWE122_Heap_Based_Buffer_Overflow__placement_new_08.cpp":141:12)
#loc199 = loc("CWE122_Heap_Based_Buffer_Overflow__placement_new_08.cpp":142:5)
#loc200 = loc("CWE122_Heap_Based_Buffer_Overflow__placement_new_08.cpp":142:62)
#loc201 = loc("CWE122_Heap_Based_Buffer_Overflow__placement_new_08.cpp":144:5)
#loc202 = loc("CWE122_Heap_Based_Buffer_Overflow__placement_new_08.cpp":144:64)
#loc203 = loc("CWE122_Heap_Based_Buffer_Overflow__placement_new_08.cpp":142:36)
#loc204 = loc("CWE122_Heap_Based_Buffer_Overflow__placement_new_08.cpp":142:43)
#loc205 = loc("CWE122_Heap_Based_Buffer_Overflow__placement_new_08.cpp":142:61)
#loc206 = loc("CWE122_Heap_Based_Buffer_Overflow__placement_new_08.cpp":143:5)
#loc207 = loc("CWE122_Heap_Based_Buffer_Overflow__placement_new_08.cpp":143:42)
#loc208 = loc("CWE122_Heap_Based_Buffer_Overflow__placement_new_08.cpp":143:9)
#loc209 = loc("CWE122_Heap_Based_Buffer_Overflow__placement_new_08.cpp":143:26)
#loc210 = loc("CWE122_Heap_Based_Buffer_Overflow__placement_new_08.cpp":143:32)
#loc211 = loc("CWE122_Heap_Based_Buffer_Overflow__placement_new_08.cpp":143:33)
#loc212 = loc("CWE122_Heap_Based_Buffer_Overflow__placement_new_08.cpp":143:39)
#loc213 = loc("CWE122_Heap_Based_Buffer_Overflow__placement_new_08.cpp":143:38)
#loc214 = loc("CWE122_Heap_Based_Buffer_Overflow__placement_new_08.cpp":144:44)
#loc215 = loc("CWE122_Heap_Based_Buffer_Overflow__placement_new_08.cpp":144:63)
#loc216 = loc("CWE122_Heap_Based_Buffer_Overflow__placement_new_08.cpp":144:37)
#loc217 = loc("CWE122_Heap_Based_Buffer_Overflow__placement_new_08.cpp":145:5)
#loc218 = loc("CWE122_Heap_Based_Buffer_Overflow__placement_new_08.cpp":145:43)
#loc219 = loc("CWE122_Heap_Based_Buffer_Overflow__placement_new_08.cpp":145:9)
#loc220 = loc("CWE122_Heap_Based_Buffer_Overflow__placement_new_08.cpp":145:27)
#loc221 = loc("CWE122_Heap_Based_Buffer_Overflow__placement_new_08.cpp":145:33)
#loc222 = loc("CWE122_Heap_Based_Buffer_Overflow__placement_new_08.cpp":145:34)
#loc223 = loc("CWE122_Heap_Based_Buffer_Overflow__placement_new_08.cpp":145:40)
#loc224 = loc("CWE122_Heap_Based_Buffer_Overflow__placement_new_08.cpp":145:39)
#loc225 = loc("CWE122_Heap_Based_Buffer_Overflow__placement_new_08.cpp":146:5)
#loc226 = loc("CWE122_Heap_Based_Buffer_Overflow__placement_new_08.cpp":155:5)
#loc227 = loc("CWE122_Heap_Based_Buffer_Overflow__placement_new_08.cpp":146:8)
#loc228 = loc("CWE122_Heap_Based_Buffer_Overflow__placement_new_08.cpp":146:27)
#loc229 = loc("CWE122_Heap_Based_Buffer_Overflow__placement_new_08.cpp":147:5)
#loc230 = loc("CWE122_Heap_Based_Buffer_Overflow__placement_new_08.cpp":150:5)
#loc231 = loc("CWE122_Heap_Based_Buffer_Overflow__placement_new_08.cpp":152:5)
#loc232 = loc("CWE122_Heap_Based_Buffer_Overflow__placement_new_08.cpp":149:19)
#loc233 = loc("CWE122_Heap_Based_Buffer_Overflow__placement_new_08.cpp":149:9)
#loc234 = loc("CWE122_Heap_Based_Buffer_Overflow__placement_new_08.cpp":154:16)
#loc235 = loc("CWE122_Heap_Based_Buffer_Overflow__placement_new_08.cpp":154:9)
#loc236 = loc("CWE122_Heap_Based_Buffer_Overflow__placement_new_08.cpp":156:5)
#loc237 = loc("CWE122_Heap_Based_Buffer_Overflow__placement_new_08.cpp":172:5)
#loc238 = loc("CWE122_Heap_Based_Buffer_Overflow__placement_new_08.cpp":156:8)
#loc239 = loc("CWE122_Heap_Based_Buffer_Overflow__placement_new_08.cpp":156:26)
#loc240 = loc("CWE122_Heap_Based_Buffer_Overflow__placement_new_08.cpp":157:5)
#loc241 = loc("CWE122_Heap_Based_Buffer_Overflow__placement_new_08.cpp":158:9)
#loc242 = loc("CWE122_Heap_Based_Buffer_Overflow__placement_new_08.cpp":171:9)
#loc243 = loc("CWE122_Heap_Based_Buffer_Overflow__placement_new_08.cpp":164:39)
#loc244 = loc("CWE122_Heap_Based_Buffer_Overflow__placement_new_08.cpp":164:43)
#loc245 = loc("CWE122_Heap_Based_Buffer_Overflow__placement_new_08.cpp":166:32)
#loc246 = loc("CWE122_Heap_Based_Buffer_Overflow__placement_new_08.cpp":166:13)
#loc247 = loc("CWE122_Heap_Based_Buffer_Overflow__placement_new_08.cpp":167:32)
#loc248 = loc("CWE122_Heap_Based_Buffer_Overflow__placement_new_08.cpp":167:13)
#loc249 = loc("CWE122_Heap_Based_Buffer_Overflow__placement_new_08.cpp":168:26)
#loc250 = loc("CWE122_Heap_Based_Buffer_Overflow__placement_new_08.cpp":168:36)
#loc251 = loc("CWE122_Heap_Based_Buffer_Overflow__placement_new_08.cpp":168:13)
#loc252 = loc("CWE122_Heap_Based_Buffer_Overflow__placement_new_08.cpp":170:13)
#loc253 = loc("CWE122_Heap_Based_Buffer_Overflow__placement_new_08.cpp":170:18)
#loc254 = loc("CWE122_Heap_Based_Buffer_Overflow__placement_new_08.cpp":176:1)
#loc255 = loc("CWE122_Heap_Based_Buffer_Overflow__placement_new_08.cpp":205:1)
#loc256 = loc("CWE122_Heap_Based_Buffer_Overflow__placement_new_08.cpp":196:13)
#loc257 = loc("CWE122_Heap_Based_Buffer_Overflow__placement_new_08.cpp":196:49)
#loc258 = loc("CWE122_Heap_Based_Buffer_Overflow__placement_new_08.cpp":178:5)
#loc259 = loc("CWE122_Heap_Based_Buffer_Overflow__placement_new_08.cpp":178:12)
#loc260 = loc("CWE122_Heap_Based_Buffer_Overflow__placement_new_08.cpp":179:5)
#loc261 = loc("CWE122_Heap_Based_Buffer_Overflow__placement_new_08.cpp":179:62)
#loc262 = loc("CWE122_Heap_Based_Buffer_Overflow__placement_new_08.cpp":181:5)
#loc263 = loc("CWE122_Heap_Based_Buffer_Overflow__placement_new_08.cpp":181:64)
#loc264 = loc("CWE122_Heap_Based_Buffer_Overflow__placement_new_08.cpp":179:36)
#loc265 = loc("CWE122_Heap_Based_Buffer_Overflow__placement_new_08.cpp":179:43)
#loc266 = loc("CWE122_Heap_Based_Buffer_Overflow__placement_new_08.cpp":179:61)
#loc267 = loc("CWE122_Heap_Based_Buffer_Overflow__placement_new_08.cpp":180:5)
#loc268 = loc("CWE122_Heap_Based_Buffer_Overflow__placement_new_08.cpp":180:42)
#loc269 = loc("CWE122_Heap_Based_Buffer_Overflow__placement_new_08.cpp":180:9)
#loc270 = loc("CWE122_Heap_Based_Buffer_Overflow__placement_new_08.cpp":180:26)
#loc271 = loc("CWE122_Heap_Based_Buffer_Overflow__placement_new_08.cpp":180:32)
#loc272 = loc("CWE122_Heap_Based_Buffer_Overflow__placement_new_08.cpp":180:33)
#loc273 = loc("CWE122_Heap_Based_Buffer_Overflow__placement_new_08.cpp":180:39)
#loc274 = loc("CWE122_Heap_Based_Buffer_Overflow__placement_new_08.cpp":180:38)
#loc275 = loc("CWE122_Heap_Based_Buffer_Overflow__placement_new_08.cpp":181:44)
#loc276 = loc("CWE122_Heap_Based_Buffer_Overflow__placement_new_08.cpp":181:63)
#loc277 = loc("CWE122_Heap_Based_Buffer_Overflow__placement_new_08.cpp":181:37)
#loc278 = loc("CWE122_Heap_Based_Buffer_Overflow__placement_new_08.cpp":182:5)
#loc279 = loc("CWE122_Heap_Based_Buffer_Overflow__placement_new_08.cpp":182:43)
#loc280 = loc("CWE122_Heap_Based_Buffer_Overflow__placement_new_08.cpp":182:9)
#loc281 = loc("CWE122_Heap_Based_Buffer_Overflow__placement_new_08.cpp":182:27)
#loc282 = loc("CWE122_Heap_Based_Buffer_Overflow__placement_new_08.cpp":182:33)
#loc283 = loc("CWE122_Heap_Based_Buffer_Overflow__placement_new_08.cpp":182:34)
#loc284 = loc("CWE122_Heap_Based_Buffer_Overflow__placement_new_08.cpp":182:40)
#loc285 = loc("CWE122_Heap_Based_Buffer_Overflow__placement_new_08.cpp":182:39)
#loc286 = loc("CWE122_Heap_Based_Buffer_Overflow__placement_new_08.cpp":183:5)
#loc287 = loc("CWE122_Heap_Based_Buffer_Overflow__placement_new_08.cpp":187:5)
#loc288 = loc("CWE122_Heap_Based_Buffer_Overflow__placement_new_08.cpp":183:8)
#loc289 = loc("CWE122_Heap_Based_Buffer_Overflow__placement_new_08.cpp":183:26)
#loc290 = loc("CWE122_Heap_Based_Buffer_Overflow__placement_new_08.cpp":184:5)
#loc291 = loc("CWE122_Heap_Based_Buffer_Overflow__placement_new_08.cpp":186:16)
#loc292 = loc("CWE122_Heap_Based_Buffer_Overflow__placement_new_08.cpp":186:9)
#loc293 = loc("CWE122_Heap_Based_Buffer_Overflow__placement_new_08.cpp":188:5)
#loc294 = loc("CWE122_Heap_Based_Buffer_Overflow__placement_new_08.cpp":204:5)
#loc295 = loc("CWE122_Heap_Based_Buffer_Overflow__placement_new_08.cpp":188:8)
#loc296 = loc("CWE122_Heap_Based_Buffer_Overflow__placement_new_08.cpp":188:26)
#loc297 = loc("CWE122_Heap_Based_Buffer_Overflow__placement_new_08.cpp":189:5)
#loc298 = loc("CWE122_Heap_Based_Buffer_Overflow__placement_new_08.cpp":190:9)
#loc299 = loc("CWE122_Heap_Based_Buffer_Overflow__placement_new_08.cpp":203:9)
#loc300 = loc("CWE122_Heap_Based_Buffer_Overflow__placement_new_08.cpp":196:39)
#loc301 = loc("CWE122_Heap_Based_Buffer_Overflow__placement_new_08.cpp":196:43)
#loc302 = loc("CWE122_Heap_Based_Buffer_Overflow__placement_new_08.cpp":198:32)
#loc303 = loc("CWE122_Heap_Based_Buffer_Overflow__placement_new_08.cpp":198:13)
#loc304 = loc("CWE122_Heap_Based_Buffer_Overflow__placement_new_08.cpp":199:32)
#loc305 = loc("CWE122_Heap_Based_Buffer_Overflow__placement_new_08.cpp":199:13)
#loc306 = loc("CWE122_Heap_Based_Buffer_Overflow__placement_new_08.cpp":200:26)
#loc307 = loc("CWE122_Heap_Based_Buffer_Overflow__placement_new_08.cpp":200:36)
#loc308 = loc("CWE122_Heap_Based_Buffer_Overflow__placement_new_08.cpp":200:13)
#loc309 = loc("CWE122_Heap_Based_Buffer_Overflow__placement_new_08.cpp":202:13)
#loc310 = loc("CWE122_Heap_Based_Buffer_Overflow__placement_new_08.cpp":202:18)
#loc311 = loc("CWE122_Heap_Based_Buffer_Overflow__placement_new_08.cpp":207:1)
#loc312 = loc("CWE122_Heap_Based_Buffer_Overflow__placement_new_08.cpp":213:1)
#loc313 = loc("CWE122_Heap_Based_Buffer_Overflow__placement_new_08.cpp":209:5)
#loc314 = loc("CWE122_Heap_Based_Buffer_Overflow__placement_new_08.cpp":210:5)
#loc315 = loc("CWE122_Heap_Based_Buffer_Overflow__placement_new_08.cpp":211:5)
#loc316 = loc("CWE122_Heap_Based_Buffer_Overflow__placement_new_08.cpp":212:5)
#loc317 = loc("/usr/include/stdlib.h":575:1)
#loc318 = loc("/usr/include/stdlib.h":575:41)
#loc319 = loc("/usr/include/time.h":76:1)
#loc320 = loc("/usr/include/time.h":76:38)
#loc321 = loc("../../../testcasesupport/std_testcase_io.h":14:1)
#loc322 = loc("../../../testcasesupport/std_testcase_io.h":14:33)
#loc323 = loc("CWE122_Heap_Based_Buffer_Overflow__placement_new_08.cpp":233:15)
#loc324 = loc("CWE122_Heap_Based_Buffer_Overflow__placement_new_08.cpp":235:15)
#loc325 = loc("CWE122_Heap_Based_Buffer_Overflow__placement_new_08.cpp":238:15)
#loc326 = loc("CWE122_Heap_Based_Buffer_Overflow__placement_new_08.cpp":240:15)
#loc327 = loc("CWE122_Heap_Based_Buffer_Overflow__placement_new_08.cpp":228:1)
#loc328 = loc("CWE122_Heap_Based_Buffer_Overflow__placement_new_08.cpp":243:1)
#loc333 = loc("CWE122_Heap_Based_Buffer_Overflow__placement_new_08.cpp":229:1)
#loc334 = loc("CWE122_Heap_Based_Buffer_Overflow__placement_new_08.cpp":231:27)
#loc335 = loc("CWE122_Heap_Based_Buffer_Overflow__placement_new_08.cpp":231:22)
#loc336 = loc("CWE122_Heap_Based_Buffer_Overflow__placement_new_08.cpp":231:5)
#loc337 = loc("CWE122_Heap_Based_Buffer_Overflow__placement_new_08.cpp":233:5)
#loc338 = loc("CWE122_Heap_Based_Buffer_Overflow__placement_new_08.cpp":234:5)
#loc339 = loc("CWE122_Heap_Based_Buffer_Overflow__placement_new_08.cpp":235:5)
#loc340 = loc("CWE122_Heap_Based_Buffer_Overflow__placement_new_08.cpp":238:5)
#loc341 = loc("CWE122_Heap_Based_Buffer_Overflow__placement_new_08.cpp":239:5)
#loc342 = loc("CWE122_Heap_Based_Buffer_Overflow__placement_new_08.cpp":240:5)
#loc343 = loc("CWE122_Heap_Based_Buffer_Overflow__placement_new_08.cpp":242:12)
#loc344 = loc("CWE122_Heap_Based_Buffer_Overflow__placement_new_08.cpp":242:5)
#loc345 = loc(fused[#loc1, #loc2])
#loc346 = loc(fused[#loc3, #loc4])
#loc347 = loc(fused[#loc5, #loc6])
#loc348 = loc(fused[#loc8, #loc7])
#loc349 = loc(fused[#loc10, #loc11])
#loc350 = loc(fused[#loc12, #loc13])
#loc351 = loc(fused[#loc14, #loc15])
#loc352 = loc(fused[#loc16, #loc17])
#loc353 = loc(fused[#loc18, #loc19])
#loc354 = loc(fused[#loc20, #loc21])
#loc355 = loc(fused[#loc22, #loc23])
#loc356 = loc(fused[#loc25, #loc26])
#loc357 = loc(fused[#loc24, #loc21])
#loc358 = loc(fused[#loc27, #loc28])
#loc359 = loc(fused[#loc29, #loc30])
#loc360 = loc(fused[#loc31, #loc28])
#loc361 = loc(fused[#loc35, #loc36])
#loc362 = loc(fused[#loc37, #loc23])
#loc363 = loc(fused[#loc38, #loc39])
#loc364 = loc(fused[#loc40, #loc41])
#loc365 = loc(fused[#loc42, #loc39])
#loc366 = loc(fused[#loc46, #loc47])
#loc367 = loc(fused[#loc48, #loc49])
#loc368 = loc(fused[#loc50, #loc47])
#loc369 = loc(fused[#loc52, #loc51])
#loc370 = loc(fused[#loc53, #loc54])
#loc371 = loc(fused[#loc55, #loc56])
#loc372 = loc(fused[#loc57, #loc54])
#loc373 = loc(fused[#loc58, #loc59])
#loc374 = loc(fused[#loc60, #loc17])
#loc375 = loc(fused[#loc63, #loc62])
#loc376 = loc(fused[#loc66, #loc65])
#loc377 = loc(fused[#loc73, #loc74])
#loc378 = loc(fused[#loc76, #loc75])
#loc379 = loc(fused[#loc79, #loc80])
#loc380 = loc(fused[#loc81, #loc82])
#loc381 = loc(fused[#loc83, #loc84])
#loc382 = loc(fused[#loc85, #loc86])
#loc383 = loc(fused[#loc87, #loc88])
#loc384 = loc(fused[#loc90, #loc91])
#loc385 = loc(fused[#loc89, #loc86])
#loc386 = loc(fused[#loc92, #loc93])
#loc387 = loc(fused[#loc94, #loc95])
#loc388 = loc(fused[#loc96, #loc93])
#loc389 = loc(fused[#loc100, #loc101])
#loc390 = loc(fused[#loc102, #loc88])
#loc391 = loc(fused[#loc103, #loc104])
#loc392 = loc(fused[#loc105, #loc106])
#loc393 = loc(fused[#loc107, #loc104])
#loc394 = loc(fused[#loc111, #loc112])
#loc395 = loc(fused[#loc113, #loc114])
#loc396 = loc(fused[#loc115, #loc112])
#loc397 = loc(fused[#loc117, #loc116])
#loc398 = loc(fused[#loc118, #loc119])
#loc399 = loc(fused[#loc120, #loc121])
#loc400 = loc(fused[#loc122, #loc123, #loc124, #loc119])
#loc401 = loc(fused[#loc126, #loc127])
#loc402 = loc(fused[#loc128, #loc82])
#loc403 = loc(fused[#loc131, #loc130])
#loc404 = loc(fused[#loc138, #loc139])
#loc405 = loc(fused[#loc140, #loc141])
#loc406 = loc(fused[#loc142, #loc143])
#loc407 = loc(fused[#loc144, #loc145])
#loc408 = loc(fused[#loc146, #loc147])
#loc409 = loc(fused[#loc149, #loc150])
#loc410 = loc(fused[#loc148, #loc145])
#loc411 = loc(fused[#loc151, #loc152])
#loc412 = loc(fused[#loc153, #loc154])
#loc413 = loc(fused[#loc155, #loc152])
#loc414 = loc(fused[#loc159, #loc160])
#loc415 = loc(fused[#loc161, #loc147])
#loc416 = loc(fused[#loc162, #loc163])
#loc417 = loc(fused[#loc164, #loc165])
#loc418 = loc(fused[#loc166, #loc163])
#loc419 = loc(fused[#loc170, #loc171])
#loc420 = loc(fused[#loc172, #loc173])
#loc421 = loc(fused[#loc174, #loc171])
#loc422 = loc(fused[#loc176, #loc175])
#loc423 = loc(fused[#loc177, #loc178])
#loc424 = loc(fused[#loc179, #loc180])
#loc425 = loc(fused[#loc181, #loc178])
#loc426 = loc(fused[#loc182, #loc183])
#loc427 = loc(fused[#loc184, #loc141])
#loc428 = loc(fused[#loc187, #loc186])
#loc429 = loc(fused[#loc193, #loc194])
#loc430 = loc(fused[#loc195, #loc196])
#loc431 = loc(fused[#loc197, #loc198])
#loc432 = loc(fused[#loc199, #loc200])
#loc433 = loc(fused[#loc201, #loc202])
#loc434 = loc(fused[#loc204, #loc205])
#loc435 = loc(fused[#loc203, #loc200])
#loc436 = loc(fused[#loc206, #loc207])
#loc437 = loc(fused[#loc208, #loc209])
#loc438 = loc(fused[#loc210, #loc207])
#loc439 = loc(fused[#loc214, #loc215])
#loc440 = loc(fused[#loc216, #loc202])
#loc441 = loc(fused[#loc217, #loc218])
#loc442 = loc(fused[#loc219, #loc220])
#loc443 = loc(fused[#loc221, #loc218])
#loc444 = loc(fused[#loc225, #loc226])
#loc445 = loc(fused[#loc227, #loc228])
#loc446 = loc(fused[#loc229, #loc230, #loc231, #loc226])
#loc447 = loc(fused[#loc235, #loc234])
#loc448 = loc(fused[#loc236, #loc237])
#loc449 = loc(fused[#loc238, #loc239])
#loc450 = loc(fused[#loc240, #loc237])
#loc451 = loc(fused[#loc241, #loc242])
#loc452 = loc(fused[#loc243, #loc196])
#loc453 = loc(fused[#loc246, #loc245])
#loc454 = loc(fused[#loc248, #loc247])
#loc455 = loc(fused[#loc254, #loc255])
#loc456 = loc(fused[#loc256, #loc257])
#loc457 = loc(fused[#loc258, #loc259])
#loc458 = loc(fused[#loc260, #loc261])
#loc459 = loc(fused[#loc262, #loc263])
#loc460 = loc(fused[#loc265, #loc266])
#loc461 = loc(fused[#loc264, #loc261])
#loc462 = loc(fused[#loc267, #loc268])
#loc463 = loc(fused[#loc269, #loc270])
#loc464 = loc(fused[#loc271, #loc268])
#loc465 = loc(fused[#loc275, #loc276])
#loc466 = loc(fused[#loc277, #loc263])
#loc467 = loc(fused[#loc278, #loc279])
#loc468 = loc(fused[#loc280, #loc281])
#loc469 = loc(fused[#loc282, #loc279])
#loc470 = loc(fused[#loc286, #loc287])
#loc471 = loc(fused[#loc288, #loc289])
#loc472 = loc(fused[#loc290, #loc287])
#loc473 = loc(fused[#loc292, #loc291])
#loc474 = loc(fused[#loc293, #loc294])
#loc475 = loc(fused[#loc295, #loc296])
#loc476 = loc(fused[#loc297, #loc294])
#loc477 = loc(fused[#loc298, #loc299])
#loc478 = loc(fused[#loc300, #loc257])
#loc479 = loc(fused[#loc303, #loc302])
#loc480 = loc(fused[#loc305, #loc304])
#loc481 = loc(fused[#loc311, #loc312])
#loc482 = loc(fused[#loc317, #loc318])
#loc483 = loc(fused[#loc319, #loc320])
#loc484 = loc(fused[#loc321, #loc322])
#loc485 = loc(fused[#loc327, #loc328])
#loc488 = loc(fused[#loc344, #loc343])
