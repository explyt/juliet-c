!s32i = !cir.int<s, 32>
!s64i = !cir.int<s, 64>
!s8i = !cir.int<s, 8>
!u32i = !cir.int<u, 32>
!u64i = !cir.int<u, 64>
!void = !cir.void
#fn_attr = #cir<extra({nothrow = #cir.nothrow})>
#fn_attr1 = #cir<extra({inline = #cir.inline<no>, nothrow = #cir.nothrow, optnone = #cir.optnone})>
#loc49 = loc("CWE253_Incorrect_Check_of_Function_Return_Value__char_snprintf_09.c":113:10)
#loc50 = loc("CWE253_Incorrect_Check_of_Function_Return_Value__char_snprintf_09.c":113:14)
#loc51 = loc("CWE253_Incorrect_Check_of_Function_Return_Value__char_snprintf_09.c":113:20)
#loc52 = loc("CWE253_Incorrect_Check_of_Function_Return_Value__char_snprintf_09.c":113:32)
#loc146 = loc(fused[#loc49, #loc50])
#loc147 = loc(fused[#loc51, #loc52])
module @"/home/ladisgin/git_proj/juliet-c/testcases/CWE253_Incorrect_Check_of_Function_Return_Value/CWE253_Incorrect_Check_of_Function_Return_Value__char_snprintf_09.c" attributes {cir.lang = #cir.lang<c>, cir.sob = #cir.signed_overflow_behavior<undefined>, cir.triple = "x86_64-unknown-linux-gnu", dlti.dl_spec = #dlti.dl_spec<i64 = dense<64> : vector<2xi64>, i128 = dense<128> : vector<2xi64>, f128 = dense<128> : vector<2xi64>, !llvm.ptr<270> = dense<32> : vector<4xi64>, f64 = dense<64> : vector<2xi64>, f16 = dense<16> : vector<2xi64>, !llvm.ptr<271> = dense<32> : vector<4xi64>, !llvm.ptr<272> = dense<64> : vector<4xi64>, i16 = dense<16> : vector<2xi64>, i8 = dense<8> : vector<2xi64>, i32 = dense<32> : vector<2xi64>, f80 = dense<128> : vector<2xi64>, i1 = dense<8> : vector<2xi64>, !llvm.ptr = dense<64> : vector<4xi64>, "dlti.endianness" = "little", "dlti.stack_alignment" = 128 : i64>} {
  cir.global "private" constant external @GLOBAL_CONST_TRUE : !s32i {alignment = 4 : i64} loc(#loc125)
  cir.func private @snprintf(!cir.ptr<!s8i>, !u64i, !cir.ptr<!s8i>, ...) -> !s32i extra(#fn_attr) loc(#loc126)
  cir.global "private" constant cir_private dsolocal @".str" = #cir.const_array<"%s\0A\00" : !cir.array<!s8i x 4>> : !cir.array<!s8i x 4> {alignment = 1 : i64} loc(#loc5)
  cir.global "private" constant cir_private dsolocal @".str.1" = #cir.const_array<"string\00" : !cir.array<!s8i x 7>> : !cir.array<!s8i x 7> {alignment = 1 : i64} loc(#loc6)
  cir.func private @printLine(!cir.ptr<!s8i>) loc(#loc127)
  cir.global "private" constant cir_private dsolocal @".str.2" = #cir.const_array<"snprintf failed!\00" : !cir.array<!s8i x 17>> : !cir.array<!s8i x 17> {alignment = 1 : i64} loc(#loc9)
  cir.func no_proto @CWE253_Incorrect_Check_of_Function_Return_Value__char_snprintf_09_bad() extra(#fn_attr1) {
    cir.scope {
      %0 = cir.get_global @GLOBAL_CONST_TRUE : !cir.ptr<!s32i> loc(#loc125)
      %1 = cir.load %0 : !cir.ptr<!s32i>, !s32i loc(#loc14)
      %2 = cir.cast(int_to_bool, %1 : !s32i), !cir.bool loc(#loc14)
      cir.if %2 {
        cir.scope {
          %3 = cir.alloca !cir.array<!s8i x 100>, !cir.ptr<!cir.array<!s8i x 100>>, ["dataBuffer"] {alignment = 16 : i64} loc(#loc132)
          %4 = cir.alloca !cir.ptr<!s8i>, !cir.ptr<!cir.ptr<!s8i>>, ["data", init] {alignment = 8 : i64} loc(#loc133)
          %5 = cir.const #cir.zero : !cir.array<!s8i x 100> loc(#loc132)
          cir.store %5, %3 : !cir.array<!s8i x 100>, !cir.ptr<!cir.array<!s8i x 100>> loc(#loc132)
          %6 = cir.cast(array_to_ptrdecay, %3 : !cir.ptr<!cir.array<!s8i x 100>>), !cir.ptr<!s8i> loc(#loc21)
          cir.store %6, %4 : !cir.ptr<!s8i>, !cir.ptr<!cir.ptr<!s8i>> loc(#loc133)
          cir.scope {
            %7 = cir.get_global @snprintf : !cir.ptr<!cir.func<!s32i (!cir.ptr<!s8i>, !u64i, !cir.ptr<!s8i>, ...)>> loc(#loc24)
            %8 = cir.load %4 : !cir.ptr<!cir.ptr<!s8i>>, !cir.ptr<!s8i> loc(#loc25)
            %9 = cir.const #cir.int<100> : !s32i loc(#loc26)
            %10 = cir.cast(integral, %9 : !s32i), !u64i loc(#loc26)
            %11 = cir.const #cir.int<6> : !u64i loc(#loc135)
            %12 = cir.binop(sub, %10, %11) : !u64i loc(#loc136)
            %13 = cir.const #cir.int<1> : !s32i loc(#loc29)
            %14 = cir.cast(integral, %13 : !s32i), !u64i loc(#loc29)
            %15 = cir.binop(sub, %12, %14) : !u64i loc(#loc137)
            %16 = cir.get_global @".str" : !cir.ptr<!cir.array<!s8i x 4>> loc(#loc5)
            %17 = cir.cast(array_to_ptrdecay, %16 : !cir.ptr<!cir.array<!s8i x 4>>), !cir.ptr<!s8i> loc(#loc5)
            %18 = cir.get_global @".str.1" : !cir.ptr<!cir.array<!s8i x 7>> loc(#loc6)
            %19 = cir.cast(array_to_ptrdecay, %18 : !cir.ptr<!cir.array<!s8i x 7>>), !cir.ptr<!s8i> loc(#loc6)
            %20 = cir.call @snprintf(%8, %15, %17, %19) : (!cir.ptr<!s8i>, !u64i, !cir.ptr<!s8i>, !cir.ptr<!s8i>) -> !s32i extra(#fn_attr) loc(#loc24)
            %21 = cir.const #cir.int<0> : !s32i loc(#loc30)
            %22 = cir.cmp(eq, %20, %21) : !s32i, !cir.bool loc(#loc138)
            cir.if %22 {
              %23 = cir.get_global @".str.2" : !cir.ptr<!cir.array<!s8i x 17>> loc(#loc9)
              %24 = cir.cast(array_to_ptrdecay, %23 : !cir.ptr<!cir.array<!s8i x 17>>), !cir.ptr<!s8i> loc(#loc9)
              cir.call @printLine(%24) : (!cir.ptr<!s8i>) -> () loc(#loc32)
            } loc(#loc139)
          } loc(#loc134)
        } loc(#loc131)
      } loc(#loc130)
    } loc(#loc129)
    cir.return loc(#loc11)
  } loc(#loc128)
  cir.func no_proto @CWE253_Incorrect_Check_of_Function_Return_Value__char_snprintf_09_good() extra(#fn_attr1) {
    %0 = cir.get_global @good1 : !cir.ptr<!cir.func<!void ()>> loc(#loc141)
    cir.call %0() : (!cir.ptr<!cir.func<!void ()>>) -> () loc(#loc35)
    %1 = cir.get_global @good2 : !cir.ptr<!cir.func<!void ()>> loc(#loc142)
    cir.call %1() : (!cir.ptr<!cir.func<!void ()>>) -> () loc(#loc37)
    cir.return loc(#loc34)
  } loc(#loc140)
  cir.func private @srand(!u32i) extra(#fn_attr) loc(#loc143)
  cir.func private @time(!cir.ptr<!s64i>) -> !s64i extra(#fn_attr) loc(#loc144)
  cir.global "private" constant cir_private dsolocal @".str.3" = #cir.const_array<"Calling good()...\00" : !cir.array<!s8i x 18>> : !cir.array<!s8i x 18> {alignment = 1 : i64} loc(#loc43)
  cir.global "private" constant cir_private dsolocal @".str.4" = #cir.const_array<"Finished good()\00" : !cir.array<!s8i x 16>> : !cir.array<!s8i x 16> {alignment = 1 : i64} loc(#loc44)
  cir.global "private" constant cir_private dsolocal @".str.5" = #cir.const_array<"Calling bad()...\00" : !cir.array<!s8i x 17>> : !cir.array<!s8i x 17> {alignment = 1 : i64} loc(#loc45)
  cir.global "private" constant cir_private dsolocal @".str.6" = #cir.const_array<"Finished bad()\00" : !cir.array<!s8i x 15>> : !cir.array<!s8i x 15> {alignment = 1 : i64} loc(#loc46)
  cir.func @main(%arg0: !s32i loc(fused[#loc49, #loc50]), %arg1: !cir.ptr<!cir.ptr<!s8i>> loc(fused[#loc51, #loc52])) -> !s32i extra(#fn_attr1) {
    %0 = cir.alloca !s32i, !cir.ptr<!s32i>, ["argc", init] {alignment = 4 : i64} loc(#loc146)
    %1 = cir.alloca !cir.ptr<!cir.ptr<!s8i>>, !cir.ptr<!cir.ptr<!cir.ptr<!s8i>>>, ["argv", init] {alignment = 8 : i64} loc(#loc147)
    %2 = cir.alloca !s32i, !cir.ptr<!s32i>, ["__retval"] {alignment = 4 : i64} loc(#loc48)
    cir.store %arg0, %0 : !s32i, !cir.ptr<!s32i> loc(#loc53)
    cir.store %arg1, %1 : !cir.ptr<!cir.ptr<!s8i>>, !cir.ptr<!cir.ptr<!cir.ptr<!s8i>>> loc(#loc53)
    %3 = cir.const #cir.ptr<null> : !cir.ptr<!s64i> loc(#loc54)
    %4 = cir.call @time(%3) : (!cir.ptr<!s64i>) -> !s64i extra(#fn_attr) loc(#loc55)
    %5 = cir.cast(integral, %4 : !s64i), !u32i loc(#loc55)
    cir.call @srand(%5) : (!u32i) -> () extra(#fn_attr) loc(#loc56)
    %6 = cir.get_global @".str.3" : !cir.ptr<!cir.array<!s8i x 18>> loc(#loc43)
    %7 = cir.cast(array_to_ptrdecay, %6 : !cir.ptr<!cir.array<!s8i x 18>>), !cir.ptr<!s8i> loc(#loc43)
    cir.call @printLine(%7) : (!cir.ptr<!s8i>) -> () loc(#loc57)
    %8 = cir.get_global @CWE253_Incorrect_Check_of_Function_Return_Value__char_snprintf_09_good : !cir.ptr<!cir.func<!void ()>> loc(#loc148)
    cir.call @CWE253_Incorrect_Check_of_Function_Return_Value__char_snprintf_09_good() : () -> () loc(#loc58)
    %9 = cir.get_global @".str.4" : !cir.ptr<!cir.array<!s8i x 16>> loc(#loc44)
    %10 = cir.cast(array_to_ptrdecay, %9 : !cir.ptr<!cir.array<!s8i x 16>>), !cir.ptr<!s8i> loc(#loc44)
    cir.call @printLine(%10) : (!cir.ptr<!s8i>) -> () loc(#loc60)
    %11 = cir.get_global @".str.5" : !cir.ptr<!cir.array<!s8i x 17>> loc(#loc45)
    %12 = cir.cast(array_to_ptrdecay, %11 : !cir.ptr<!cir.array<!s8i x 17>>), !cir.ptr<!s8i> loc(#loc45)
    cir.call @printLine(%12) : (!cir.ptr<!s8i>) -> () loc(#loc61)
    %13 = cir.get_global @CWE253_Incorrect_Check_of_Function_Return_Value__char_snprintf_09_bad : !cir.ptr<!cir.func<!void ()>> loc(#loc149)
    cir.call @CWE253_Incorrect_Check_of_Function_Return_Value__char_snprintf_09_bad() : () -> () loc(#loc62)
    %14 = cir.get_global @".str.6" : !cir.ptr<!cir.array<!s8i x 15>> loc(#loc46)
    %15 = cir.cast(array_to_ptrdecay, %14 : !cir.ptr<!cir.array<!s8i x 15>>), !cir.ptr<!s8i> loc(#loc46)
    cir.call @printLine(%15) : (!cir.ptr<!s8i>) -> () loc(#loc64)
    %16 = cir.const #cir.int<0> : !s32i loc(#loc65)
    cir.store %16, %2 : !s32i, !cir.ptr<!s32i> loc(#loc150)
    %17 = cir.load %2 : !cir.ptr<!s32i>, !s32i loc(#loc150)
    cir.return %17 : !s32i loc(#loc150)
  } loc(#loc145)
  cir.global "private" constant external @GLOBAL_CONST_FALSE : !s32i {alignment = 4 : i64} loc(#loc151)
  cir.global "private" constant cir_private dsolocal @".str.7" = #cir.const_array<"Benign, fixed string\00" : !cir.array<!s8i x 21>> : !cir.array<!s8i x 21> {alignment = 1 : i64} loc(#loc69)
  cir.func no_proto internal private @good1() extra(#fn_attr1) {
    cir.scope {
      %0 = cir.get_global @GLOBAL_CONST_FALSE : !cir.ptr<!s32i> loc(#loc151)
      %1 = cir.load %0 : !cir.ptr<!s32i>, !s32i loc(#loc74)
      %2 = cir.cast(int_to_bool, %1 : !s32i), !cir.bool loc(#loc74)
      cir.if %2 {
        %3 = cir.get_global @".str.7" : !cir.ptr<!cir.array<!s8i x 21>> loc(#loc69)
        %4 = cir.cast(array_to_ptrdecay, %3 : !cir.ptr<!cir.array<!s8i x 21>>), !cir.ptr<!s8i> loc(#loc69)
        cir.call @printLine(%4) : (!cir.ptr<!s8i>) -> () loc(#loc78)
      } else {
        cir.scope {
          %3 = cir.alloca !cir.array<!s8i x 100>, !cir.ptr<!cir.array<!s8i x 100>>, ["dataBuffer"] {alignment = 16 : i64} loc(#loc156)
          %4 = cir.alloca !cir.ptr<!s8i>, !cir.ptr<!cir.ptr<!s8i>>, ["data", init] {alignment = 8 : i64} loc(#loc157)
          %5 = cir.const #cir.zero : !cir.array<!s8i x 100> loc(#loc156)
          cir.store %5, %3 : !cir.array<!s8i x 100>, !cir.ptr<!cir.array<!s8i x 100>> loc(#loc156)
          %6 = cir.cast(array_to_ptrdecay, %3 : !cir.ptr<!cir.array<!s8i x 100>>), !cir.ptr<!s8i> loc(#loc84)
          cir.store %6, %4 : !cir.ptr<!s8i>, !cir.ptr<!cir.ptr<!s8i>> loc(#loc157)
          cir.scope {
            %7 = cir.get_global @snprintf : !cir.ptr<!cir.func<!s32i (!cir.ptr<!s8i>, !u64i, !cir.ptr<!s8i>, ...)>> loc(#loc87)
            %8 = cir.load %4 : !cir.ptr<!cir.ptr<!s8i>>, !cir.ptr<!s8i> loc(#loc88)
            %9 = cir.const #cir.int<100> : !s32i loc(#loc89)
            %10 = cir.cast(integral, %9 : !s32i), !u64i loc(#loc89)
            %11 = cir.const #cir.int<6> : !u64i loc(#loc159)
            %12 = cir.binop(sub, %10, %11) : !u64i loc(#loc160)
            %13 = cir.const #cir.int<1> : !s32i loc(#loc92)
            %14 = cir.cast(integral, %13 : !s32i), !u64i loc(#loc92)
            %15 = cir.binop(sub, %12, %14) : !u64i loc(#loc161)
            %16 = cir.get_global @".str" : !cir.ptr<!cir.array<!s8i x 4>> loc(#loc93)
            %17 = cir.cast(array_to_ptrdecay, %16 : !cir.ptr<!cir.array<!s8i x 4>>), !cir.ptr<!s8i> loc(#loc93)
            %18 = cir.get_global @".str.1" : !cir.ptr<!cir.array<!s8i x 7>> loc(#loc94)
            %19 = cir.cast(array_to_ptrdecay, %18 : !cir.ptr<!cir.array<!s8i x 7>>), !cir.ptr<!s8i> loc(#loc94)
            %20 = cir.call @snprintf(%8, %15, %17, %19) : (!cir.ptr<!s8i>, !u64i, !cir.ptr<!s8i>, !cir.ptr<!s8i>) -> !s32i extra(#fn_attr) loc(#loc87)
            %21 = cir.const #cir.int<0> : !s32i loc(#loc95)
            %22 = cir.cmp(lt, %20, %21) : !s32i, !cir.bool loc(#loc162)
            cir.if %22 {
              %23 = cir.get_global @".str.2" : !cir.ptr<!cir.array<!s8i x 17>> loc(#loc97)
              %24 = cir.cast(array_to_ptrdecay, %23 : !cir.ptr<!cir.array<!s8i x 17>>), !cir.ptr<!s8i> loc(#loc97)
              cir.call @printLine(%24) : (!cir.ptr<!s8i>) -> () loc(#loc98)
            } loc(#loc163)
          } loc(#loc158)
        } loc(#loc155)
      } loc(#loc154)
    } loc(#loc153)
    cir.return loc(#loc71)
  } loc(#loc152)
  cir.func no_proto internal private @good2() extra(#fn_attr1) {
    cir.scope {
      %0 = cir.get_global @GLOBAL_CONST_TRUE : !cir.ptr<!s32i> loc(#loc125)
      %1 = cir.load %0 : !cir.ptr<!s32i>, !s32i loc(#loc103)
      %2 = cir.cast(int_to_bool, %1 : !s32i), !cir.bool loc(#loc103)
      cir.if %2 {
        cir.scope {
          %3 = cir.alloca !cir.array<!s8i x 100>, !cir.ptr<!cir.array<!s8i x 100>>, ["dataBuffer"] {alignment = 16 : i64} loc(#loc168)
          %4 = cir.alloca !cir.ptr<!s8i>, !cir.ptr<!cir.ptr<!s8i>>, ["data", init] {alignment = 8 : i64} loc(#loc169)
          %5 = cir.const #cir.zero : !cir.array<!s8i x 100> loc(#loc168)
          cir.store %5, %3 : !cir.array<!s8i x 100>, !cir.ptr<!cir.array<!s8i x 100>> loc(#loc168)
          %6 = cir.cast(array_to_ptrdecay, %3 : !cir.ptr<!cir.array<!s8i x 100>>), !cir.ptr<!s8i> loc(#loc110)
          cir.store %6, %4 : !cir.ptr<!s8i>, !cir.ptr<!cir.ptr<!s8i>> loc(#loc169)
          cir.scope {
            %7 = cir.get_global @snprintf : !cir.ptr<!cir.func<!s32i (!cir.ptr<!s8i>, !u64i, !cir.ptr<!s8i>, ...)>> loc(#loc113)
            %8 = cir.load %4 : !cir.ptr<!cir.ptr<!s8i>>, !cir.ptr<!s8i> loc(#loc114)
            %9 = cir.const #cir.int<100> : !s32i loc(#loc115)
            %10 = cir.cast(integral, %9 : !s32i), !u64i loc(#loc115)
            %11 = cir.const #cir.int<6> : !u64i loc(#loc171)
            %12 = cir.binop(sub, %10, %11) : !u64i loc(#loc172)
            %13 = cir.const #cir.int<1> : !s32i loc(#loc118)
            %14 = cir.cast(integral, %13 : !s32i), !u64i loc(#loc118)
            %15 = cir.binop(sub, %12, %14) : !u64i loc(#loc173)
            %16 = cir.get_global @".str" : !cir.ptr<!cir.array<!s8i x 4>> loc(#loc119)
            %17 = cir.cast(array_to_ptrdecay, %16 : !cir.ptr<!cir.array<!s8i x 4>>), !cir.ptr<!s8i> loc(#loc119)
            %18 = cir.get_global @".str.1" : !cir.ptr<!cir.array<!s8i x 7>> loc(#loc120)
            %19 = cir.cast(array_to_ptrdecay, %18 : !cir.ptr<!cir.array<!s8i x 7>>), !cir.ptr<!s8i> loc(#loc120)
            %20 = cir.call @snprintf(%8, %15, %17, %19) : (!cir.ptr<!s8i>, !u64i, !cir.ptr<!s8i>, !cir.ptr<!s8i>) -> !s32i extra(#fn_attr) loc(#loc113)
            %21 = cir.const #cir.int<0> : !s32i loc(#loc121)
            %22 = cir.cmp(lt, %20, %21) : !s32i, !cir.bool loc(#loc174)
            cir.if %22 {
              %23 = cir.get_global @".str.2" : !cir.ptr<!cir.array<!s8i x 17>> loc(#loc123)
              %24 = cir.cast(array_to_ptrdecay, %23 : !cir.ptr<!cir.array<!s8i x 17>>), !cir.ptr<!s8i> loc(#loc123)
              cir.call @printLine(%24) : (!cir.ptr<!s8i>) -> () loc(#loc124)
            } loc(#loc175)
          } loc(#loc170)
        } loc(#loc167)
      } loc(#loc166)
    } loc(#loc165)
    cir.return loc(#loc100)
  } loc(#loc164)
} loc(#loc)
#loc = loc("/home/ladisgin/git_proj/juliet-c/testcases/CWE253_Incorrect_Check_of_Function_Return_Value/CWE253_Incorrect_Check_of_Function_Return_Value__char_snprintf_09.c":0:0)
#loc1 = loc("../../testcasesupport/std_testcase.h":109:1)
#loc2 = loc("../../testcasesupport/std_testcase.h":109:18)
#loc3 = loc("/usr/include/stdio.h":385:1)
#loc4 = loc("/usr/include/stdio.h":387:62)
#loc5 = loc("CWE253_Incorrect_Check_of_Function_Return_Value__char_snprintf_09.c":43:57)
#loc6 = loc("CWE253_Incorrect_Check_of_Function_Return_Value__char_snprintf_09.c":43:65)
#loc7 = loc("../../testcasesupport/std_testcase_io.h":14:1)
#loc8 = loc("../../testcasesupport/std_testcase_io.h":14:33)
#loc9 = loc("CWE253_Incorrect_Check_of_Function_Return_Value__char_snprintf_09.c":45:27)
#loc10 = loc("CWE253_Incorrect_Check_of_Function_Return_Value__char_snprintf_09.c":32:1)
#loc11 = loc("CWE253_Incorrect_Check_of_Function_Return_Value__char_snprintf_09.c":49:1)
#loc12 = loc("CWE253_Incorrect_Check_of_Function_Return_Value__char_snprintf_09.c":34:5)
#loc13 = loc("CWE253_Incorrect_Check_of_Function_Return_Value__char_snprintf_09.c":48:5)
#loc14 = loc("CWE253_Incorrect_Check_of_Function_Return_Value__char_snprintf_09.c":34:8)
#loc15 = loc("CWE253_Incorrect_Check_of_Function_Return_Value__char_snprintf_09.c":35:5)
#loc16 = loc("CWE253_Incorrect_Check_of_Function_Return_Value__char_snprintf_09.c":36:9)
#loc17 = loc("CWE253_Incorrect_Check_of_Function_Return_Value__char_snprintf_09.c":47:9)
#loc18 = loc("CWE253_Incorrect_Check_of_Function_Return_Value__char_snprintf_09.c":39:13)
#loc19 = loc("CWE253_Incorrect_Check_of_Function_Return_Value__char_snprintf_09.c":39:36)
#loc20 = loc("CWE253_Incorrect_Check_of_Function_Return_Value__char_snprintf_09.c":40:13)
#loc21 = loc("CWE253_Incorrect_Check_of_Function_Return_Value__char_snprintf_09.c":40:27)
#loc22 = loc("CWE253_Incorrect_Check_of_Function_Return_Value__char_snprintf_09.c":43:13)
#loc23 = loc("CWE253_Incorrect_Check_of_Function_Return_Value__char_snprintf_09.c":46:13)
#loc24 = loc("CWE253_Incorrect_Check_of_Function_Return_Value__char_snprintf_09.c":43:17)
#loc25 = loc("CWE253_Incorrect_Check_of_Function_Return_Value__char_snprintf_09.c":43:26)
#loc26 = loc("CWE253_Incorrect_Check_of_Function_Return_Value__char_snprintf_09.c":43:31)
#loc27 = loc("CWE253_Incorrect_Check_of_Function_Return_Value__char_snprintf_09.c":43:35)
#loc28 = loc("CWE253_Incorrect_Check_of_Function_Return_Value__char_snprintf_09.c":43:52)
#loc29 = loc("CWE253_Incorrect_Check_of_Function_Return_Value__char_snprintf_09.c":43:54)
#loc30 = loc("CWE253_Incorrect_Check_of_Function_Return_Value__char_snprintf_09.c":43:80)
#loc31 = loc("CWE253_Incorrect_Check_of_Function_Return_Value__char_snprintf_09.c":44:13)
#loc32 = loc("CWE253_Incorrect_Check_of_Function_Return_Value__char_snprintf_09.c":45:17)
#loc33 = loc("CWE253_Incorrect_Check_of_Function_Return_Value__char_snprintf_09.c":98:1)
#loc34 = loc("CWE253_Incorrect_Check_of_Function_Return_Value__char_snprintf_09.c":102:1)
#loc35 = loc("CWE253_Incorrect_Check_of_Function_Return_Value__char_snprintf_09.c":100:5)
#loc36 = loc("CWE253_Incorrect_Check_of_Function_Return_Value__char_snprintf_09.c":100:11)
#loc37 = loc("CWE253_Incorrect_Check_of_Function_Return_Value__char_snprintf_09.c":101:5)
#loc38 = loc("CWE253_Incorrect_Check_of_Function_Return_Value__char_snprintf_09.c":101:11)
#loc39 = loc("/usr/include/stdlib.h":575:1)
#loc40 = loc("/usr/include/stdlib.h":575:41)
#loc41 = loc("/usr/include/time.h":76:1)
#loc42 = loc("/usr/include/time.h":76:38)
#loc43 = loc("CWE253_Incorrect_Check_of_Function_Return_Value__char_snprintf_09.c":118:15)
#loc44 = loc("CWE253_Incorrect_Check_of_Function_Return_Value__char_snprintf_09.c":120:15)
#loc45 = loc("CWE253_Incorrect_Check_of_Function_Return_Value__char_snprintf_09.c":123:15)
#loc46 = loc("CWE253_Incorrect_Check_of_Function_Return_Value__char_snprintf_09.c":125:15)
#loc47 = loc("CWE253_Incorrect_Check_of_Function_Return_Value__char_snprintf_09.c":113:1)
#loc48 = loc("CWE253_Incorrect_Check_of_Function_Return_Value__char_snprintf_09.c":128:1)
#loc53 = loc("CWE253_Incorrect_Check_of_Function_Return_Value__char_snprintf_09.c":114:1)
#loc54 = loc("CWE253_Incorrect_Check_of_Function_Return_Value__char_snprintf_09.c":116:27)
#loc55 = loc("CWE253_Incorrect_Check_of_Function_Return_Value__char_snprintf_09.c":116:22)
#loc56 = loc("CWE253_Incorrect_Check_of_Function_Return_Value__char_snprintf_09.c":116:5)
#loc57 = loc("CWE253_Incorrect_Check_of_Function_Return_Value__char_snprintf_09.c":118:5)
#loc58 = loc("CWE253_Incorrect_Check_of_Function_Return_Value__char_snprintf_09.c":119:5)
#loc59 = loc("CWE253_Incorrect_Check_of_Function_Return_Value__char_snprintf_09.c":119:76)
#loc60 = loc("CWE253_Incorrect_Check_of_Function_Return_Value__char_snprintf_09.c":120:5)
#loc61 = loc("CWE253_Incorrect_Check_of_Function_Return_Value__char_snprintf_09.c":123:5)
#loc62 = loc("CWE253_Incorrect_Check_of_Function_Return_Value__char_snprintf_09.c":124:5)
#loc63 = loc("CWE253_Incorrect_Check_of_Function_Return_Value__char_snprintf_09.c":124:75)
#loc64 = loc("CWE253_Incorrect_Check_of_Function_Return_Value__char_snprintf_09.c":125:5)
#loc65 = loc("CWE253_Incorrect_Check_of_Function_Return_Value__char_snprintf_09.c":127:12)
#loc66 = loc("CWE253_Incorrect_Check_of_Function_Return_Value__char_snprintf_09.c":127:5)
#loc67 = loc("../../testcasesupport/std_testcase.h":110:1)
#loc68 = loc("../../testcasesupport/std_testcase.h":110:18)
#loc69 = loc("CWE253_Incorrect_Check_of_Function_Return_Value__char_snprintf_09.c":61:19)
#loc70 = loc("CWE253_Incorrect_Check_of_Function_Return_Value__char_snprintf_09.c":56:1)
#loc71 = loc("CWE253_Incorrect_Check_of_Function_Return_Value__char_snprintf_09.c":77:1)
#loc72 = loc("CWE253_Incorrect_Check_of_Function_Return_Value__char_snprintf_09.c":58:5)
#loc73 = loc("CWE253_Incorrect_Check_of_Function_Return_Value__char_snprintf_09.c":76:5)
#loc74 = loc("CWE253_Incorrect_Check_of_Function_Return_Value__char_snprintf_09.c":58:8)
#loc75 = loc("CWE253_Incorrect_Check_of_Function_Return_Value__char_snprintf_09.c":59:5)
#loc76 = loc("CWE253_Incorrect_Check_of_Function_Return_Value__char_snprintf_09.c":62:5)
#loc77 = loc("CWE253_Incorrect_Check_of_Function_Return_Value__char_snprintf_09.c":64:5)
#loc78 = loc("CWE253_Incorrect_Check_of_Function_Return_Value__char_snprintf_09.c":61:9)
#loc79 = loc("CWE253_Incorrect_Check_of_Function_Return_Value__char_snprintf_09.c":65:9)
#loc80 = loc("CWE253_Incorrect_Check_of_Function_Return_Value__char_snprintf_09.c":75:9)
#loc81 = loc("CWE253_Incorrect_Check_of_Function_Return_Value__char_snprintf_09.c":68:13)
#loc82 = loc("CWE253_Incorrect_Check_of_Function_Return_Value__char_snprintf_09.c":68:36)
#loc83 = loc("CWE253_Incorrect_Check_of_Function_Return_Value__char_snprintf_09.c":69:13)
#loc84 = loc("CWE253_Incorrect_Check_of_Function_Return_Value__char_snprintf_09.c":69:27)
#loc85 = loc("CWE253_Incorrect_Check_of_Function_Return_Value__char_snprintf_09.c":71:13)
#loc86 = loc("CWE253_Incorrect_Check_of_Function_Return_Value__char_snprintf_09.c":74:13)
#loc87 = loc("CWE253_Incorrect_Check_of_Function_Return_Value__char_snprintf_09.c":71:17)
#loc88 = loc("CWE253_Incorrect_Check_of_Function_Return_Value__char_snprintf_09.c":71:26)
#loc89 = loc("CWE253_Incorrect_Check_of_Function_Return_Value__char_snprintf_09.c":71:31)
#loc90 = loc("CWE253_Incorrect_Check_of_Function_Return_Value__char_snprintf_09.c":71:35)
#loc91 = loc("CWE253_Incorrect_Check_of_Function_Return_Value__char_snprintf_09.c":71:52)
#loc92 = loc("CWE253_Incorrect_Check_of_Function_Return_Value__char_snprintf_09.c":71:54)
#loc93 = loc("CWE253_Incorrect_Check_of_Function_Return_Value__char_snprintf_09.c":71:57)
#loc94 = loc("CWE253_Incorrect_Check_of_Function_Return_Value__char_snprintf_09.c":71:65)
#loc95 = loc("CWE253_Incorrect_Check_of_Function_Return_Value__char_snprintf_09.c":71:79)
#loc96 = loc("CWE253_Incorrect_Check_of_Function_Return_Value__char_snprintf_09.c":72:13)
#loc97 = loc("CWE253_Incorrect_Check_of_Function_Return_Value__char_snprintf_09.c":73:27)
#loc98 = loc("CWE253_Incorrect_Check_of_Function_Return_Value__char_snprintf_09.c":73:17)
#loc99 = loc("CWE253_Incorrect_Check_of_Function_Return_Value__char_snprintf_09.c":80:1)
#loc100 = loc("CWE253_Incorrect_Check_of_Function_Return_Value__char_snprintf_09.c":96:1)
#loc101 = loc("CWE253_Incorrect_Check_of_Function_Return_Value__char_snprintf_09.c":82:5)
#loc102 = loc("CWE253_Incorrect_Check_of_Function_Return_Value__char_snprintf_09.c":95:5)
#loc103 = loc("CWE253_Incorrect_Check_of_Function_Return_Value__char_snprintf_09.c":82:8)
#loc104 = loc("CWE253_Incorrect_Check_of_Function_Return_Value__char_snprintf_09.c":83:5)
#loc105 = loc("CWE253_Incorrect_Check_of_Function_Return_Value__char_snprintf_09.c":84:9)
#loc106 = loc("CWE253_Incorrect_Check_of_Function_Return_Value__char_snprintf_09.c":94:9)
#loc107 = loc("CWE253_Incorrect_Check_of_Function_Return_Value__char_snprintf_09.c":87:13)
#loc108 = loc("CWE253_Incorrect_Check_of_Function_Return_Value__char_snprintf_09.c":87:36)
#loc109 = loc("CWE253_Incorrect_Check_of_Function_Return_Value__char_snprintf_09.c":88:13)
#loc110 = loc("CWE253_Incorrect_Check_of_Function_Return_Value__char_snprintf_09.c":88:27)
#loc111 = loc("CWE253_Incorrect_Check_of_Function_Return_Value__char_snprintf_09.c":90:13)
#loc112 = loc("CWE253_Incorrect_Check_of_Function_Return_Value__char_snprintf_09.c":93:13)
#loc113 = loc("CWE253_Incorrect_Check_of_Function_Return_Value__char_snprintf_09.c":90:17)
#loc114 = loc("CWE253_Incorrect_Check_of_Function_Return_Value__char_snprintf_09.c":90:26)
#loc115 = loc("CWE253_Incorrect_Check_of_Function_Return_Value__char_snprintf_09.c":90:31)
#loc116 = loc("CWE253_Incorrect_Check_of_Function_Return_Value__char_snprintf_09.c":90:35)
#loc117 = loc("CWE253_Incorrect_Check_of_Function_Return_Value__char_snprintf_09.c":90:52)
#loc118 = loc("CWE253_Incorrect_Check_of_Function_Return_Value__char_snprintf_09.c":90:54)
#loc119 = loc("CWE253_Incorrect_Check_of_Function_Return_Value__char_snprintf_09.c":90:57)
#loc120 = loc("CWE253_Incorrect_Check_of_Function_Return_Value__char_snprintf_09.c":90:65)
#loc121 = loc("CWE253_Incorrect_Check_of_Function_Return_Value__char_snprintf_09.c":90:79)
#loc122 = loc("CWE253_Incorrect_Check_of_Function_Return_Value__char_snprintf_09.c":91:13)
#loc123 = loc("CWE253_Incorrect_Check_of_Function_Return_Value__char_snprintf_09.c":92:27)
#loc124 = loc("CWE253_Incorrect_Check_of_Function_Return_Value__char_snprintf_09.c":92:17)
#loc125 = loc(fused[#loc1, #loc2])
#loc126 = loc(fused[#loc3, #loc4])
#loc127 = loc(fused[#loc7, #loc8])
#loc128 = loc(fused[#loc10, #loc11])
#loc129 = loc(fused[#loc12, #loc13])
#loc130 = loc(fused[#loc15, #loc13])
#loc131 = loc(fused[#loc16, #loc17])
#loc132 = loc(fused[#loc18, #loc19])
#loc133 = loc(fused[#loc20, #loc21])
#loc134 = loc(fused[#loc22, #loc23])
#loc135 = loc(fused[#loc27, #loc28])
#loc136 = loc(fused[#loc26, #loc28])
#loc137 = loc(fused[#loc26, #loc29])
#loc138 = loc(fused[#loc24, #loc30])
#loc139 = loc(fused[#loc31, #loc23])
#loc140 = loc(fused[#loc33, #loc34])
#loc141 = loc(fused[#loc35, #loc36])
#loc142 = loc(fused[#loc37, #loc38])
#loc143 = loc(fused[#loc39, #loc40])
#loc144 = loc(fused[#loc41, #loc42])
#loc145 = loc(fused[#loc47, #loc48])
#loc148 = loc(fused[#loc58, #loc59])
#loc149 = loc(fused[#loc62, #loc63])
#loc150 = loc(fused[#loc66, #loc65])
#loc151 = loc(fused[#loc67, #loc68])
#loc152 = loc(fused[#loc70, #loc71])
#loc153 = loc(fused[#loc72, #loc73])
#loc154 = loc(fused[#loc75, #loc76, #loc77, #loc73])
#loc155 = loc(fused[#loc79, #loc80])
#loc156 = loc(fused[#loc81, #loc82])
#loc157 = loc(fused[#loc83, #loc84])
#loc158 = loc(fused[#loc85, #loc86])
#loc159 = loc(fused[#loc90, #loc91])
#loc160 = loc(fused[#loc89, #loc91])
#loc161 = loc(fused[#loc89, #loc92])
#loc162 = loc(fused[#loc87, #loc95])
#loc163 = loc(fused[#loc96, #loc86])
#loc164 = loc(fused[#loc99, #loc100])
#loc165 = loc(fused[#loc101, #loc102])
#loc166 = loc(fused[#loc104, #loc102])
#loc167 = loc(fused[#loc105, #loc106])
#loc168 = loc(fused[#loc107, #loc108])
#loc169 = loc(fused[#loc109, #loc110])
#loc170 = loc(fused[#loc111, #loc112])
#loc171 = loc(fused[#loc116, #loc117])
#loc172 = loc(fused[#loc115, #loc117])
#loc173 = loc(fused[#loc115, #loc118])
#loc174 = loc(fused[#loc113, #loc121])
#loc175 = loc(fused[#loc122, #loc112])
