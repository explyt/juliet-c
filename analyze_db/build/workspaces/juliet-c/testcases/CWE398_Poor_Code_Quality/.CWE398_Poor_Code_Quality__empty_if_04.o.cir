!s32i = !cir.int<s, 32>
!s8i = !cir.int<s, 8>
#fn_attr = #cir<extra({nothrow = #cir.nothrow})>
#fn_attr1 = #cir<extra({inline = #cir.inline<no>, nothrow = #cir.nothrow, optnone = #cir.optnone, uwtable = #cir.uwtable<async>})>
module @"/workspaces/juliet-c/testcases/CWE398_Poor_Code_Quality/CWE398_Poor_Code_Quality__empty_if_04.c" attributes {cir.lang = #cir.lang<c>, cir.sob = #cir.signed_overflow_behavior<undefined>, cir.triple = "x86_64-unknown-linux-gnu", cir.type_size_info = #cir.type_size_info<char = 8, int = 32, size_t = 64>, cir.uwtable = #cir.uwtable<async>, dlti.dl_spec = #dlti.dl_spec<i64 = dense<64> : vector<2xi64>, i32 = dense<32> : vector<2xi64>, !llvm.ptr<272> = dense<64> : vector<4xi64>, f16 = dense<16> : vector<2xi64>, !llvm.ptr<271> = dense<32> : vector<4xi64>, f64 = dense<64> : vector<2xi64>, f128 = dense<128> : vector<2xi64>, !llvm.ptr<270> = dense<32> : vector<4xi64>, f80 = dense<128> : vector<2xi64>, i128 = dense<128> : vector<2xi64>, i16 = dense<16> : vector<2xi64>, i8 = dense<8> : vector<2xi64>, i1 = dense<8> : vector<2xi64>, !llvm.ptr = dense<64> : vector<4xi64>, "dlti.stack_alignment" = 128 : i64, "dlti.mangling_mode" = "e", "dlti.endianness" = "little">} {
  cir.func private @rand() -> !s32i extra(#fn_attr) loc(#loc94)
  cir.func private @printLine(!cir.ptr<!s8i>) loc(#loc95)
  cir.global "private" constant cir_private dsolocal @".str" = #cir.const_array<"Inside the else statement\00" : !cir.array<!s8i x 26>> : !cir.array<!s8i x 26> {alignment = 1 : i64} loc(#loc5)
  cir.global "private" constant cir_private dsolocal @".str.1" = #cir.const_array<"Hello from bad()\00" : !cir.array<!s8i x 17>> : !cir.array<!s8i x 17> {alignment = 1 : i64} loc(#loc6)
  cir.func no_proto @CWE398_Poor_Code_Quality__empty_if_04_bad() extra(#fn_attr1) {
    %0 = cir.alloca !s32i, !cir.ptr<!s32i>, ["x"] {alignment = 4 : i64} loc(#loc97)
    cir.br ^bb1 loc(#loc98)
  ^bb1:  // pred: ^bb0
    %1 = cir.const #cir.int<1> : !s32i loc(#loc13)
    %2 = cir.cast(int_to_bool, %1 : !s32i), !cir.bool loc(#loc13)
    cir.brcond %2 ^bb2, ^bb10 loc(#loc99)
  ^bb2:  // pred: ^bb1
    cir.br ^bb3 loc(#loc100)
  ^bb3:  // pred: ^bb2
    %3 = cir.call @rand() : () -> !s32i extra(#fn_attr) loc(#loc17)
    %4 = cir.const #cir.int<3> : !s32i loc(#loc18)
    %5 = cir.binop(rem, %3, %4) : !s32i loc(#loc101)
    cir.store %5, %0 : !s32i, !cir.ptr<!s32i> loc(#loc102)
    cir.br ^bb4 loc(#loc103)
  ^bb4:  // pred: ^bb3
    %6 = cir.load %0 : !cir.ptr<!s32i>, !s32i loc(#loc23)
    %7 = cir.const #cir.int<0> : !s32i loc(#loc24)
    %8 = cir.cmp(eq, %6, %7) : !s32i, !cir.bool loc(#loc104)
    cir.brcond %8 ^bb5, ^bb6 loc(#loc105)
  ^bb5:  // pred: ^bb4
    cir.br ^bb7 loc(#loc26)
  ^bb6:  // pred: ^bb4
    %9 = cir.get_global @".str" : !cir.ptr<!cir.array<!s8i x 26>> loc(#loc5)
    %10 = cir.cast(array_to_ptrdecay, %9 : !cir.ptr<!cir.array<!s8i x 26>>), !cir.ptr<!s8i> loc(#loc5)
    cir.call @printLine(%10) : (!cir.ptr<!s8i>) -> () loc(#loc28)
    cir.br ^bb7 loc(#loc22)
  ^bb7:  // 2 preds: ^bb5, ^bb6
    cir.br ^bb8 loc(#loc22)
  ^bb8:  // pred: ^bb7
    cir.br ^bb9 loc(#loc16)
  ^bb9:  // pred: ^bb8
    %11 = cir.get_global @".str.1" : !cir.ptr<!cir.array<!s8i x 17>> loc(#loc6)
    %12 = cir.cast(array_to_ptrdecay, %11 : !cir.ptr<!cir.array<!s8i x 17>>), !cir.ptr<!s8i> loc(#loc6)
    cir.call @printLine(%12) : (!cir.ptr<!s8i>) -> () loc(#loc29)
    cir.br ^bb10 loc(#loc12)
  ^bb10:  // 2 preds: ^bb1, ^bb9
    cir.br ^bb11 loc(#loc12)
  ^bb11:  // pred: ^bb10
    cir.return loc(#loc8)
  } loc(#loc96)
  cir.func no_proto @CWE398_Poor_Code_Quality__empty_if_04_good() extra(#fn_attr1) {
    %0 = cir.get_global @good1 : !cir.ptr<!cir.func<()>> loc(#loc107)
    cir.call %0() : (!cir.ptr<!cir.func<()>>) -> () loc(#loc32)
    %1 = cir.get_global @good2 : !cir.ptr<!cir.func<()>> loc(#loc108)
    cir.call %1() : (!cir.ptr<!cir.func<()>>) -> () loc(#loc34)
    cir.return loc(#loc31)
  } loc(#loc106)
  cir.global "private" constant cir_private dsolocal @".str.2" = #cir.const_array<"Benign, fixed string\00" : !cir.array<!s8i x 21>> : !cir.array<!s8i x 21> {alignment = 1 : i64} loc(#loc36)
  cir.global "private" constant cir_private dsolocal @".str.3" = #cir.const_array<"Inside the if statement\00" : !cir.array<!s8i x 24>> : !cir.array<!s8i x 24> {alignment = 1 : i64} loc(#loc37)
  cir.global "private" constant cir_private dsolocal @".str.4" = #cir.const_array<"Hello from good()\00" : !cir.array<!s8i x 18>> : !cir.array<!s8i x 18> {alignment = 1 : i64} loc(#loc38)
  cir.func no_proto internal private @good1() extra(#fn_attr1) {
    %0 = cir.alloca !s32i, !cir.ptr<!s32i>, ["x"] {alignment = 4 : i64} loc(#loc110)
    cir.br ^bb1 loc(#loc111)
  ^bb1:  // pred: ^bb0
    %1 = cir.const #cir.int<0> : !s32i loc(#loc45)
    %2 = cir.cast(int_to_bool, %1 : !s32i), !cir.bool loc(#loc45)
    cir.brcond %2 ^bb2, ^bb3 loc(#loc112)
  ^bb2:  // pred: ^bb1
    %3 = cir.get_global @".str.2" : !cir.ptr<!cir.array<!s8i x 21>> loc(#loc36)
    %4 = cir.cast(array_to_ptrdecay, %3 : !cir.ptr<!cir.array<!s8i x 21>>), !cir.ptr<!s8i> loc(#loc36)
    cir.call @printLine(%4) : (!cir.ptr<!s8i>) -> () loc(#loc49)
    cir.br ^bb11 loc(#loc47)
  ^bb3:  // pred: ^bb1
    cir.br ^bb4 loc(#loc113)
  ^bb4:  // pred: ^bb3
    %5 = cir.call @rand() : () -> !s32i extra(#fn_attr) loc(#loc52)
    %6 = cir.const #cir.int<3> : !s32i loc(#loc53)
    %7 = cir.binop(rem, %5, %6) : !s32i loc(#loc114)
    cir.store %7, %0 : !s32i, !cir.ptr<!s32i> loc(#loc115)
    cir.br ^bb5 loc(#loc116)
  ^bb5:  // pred: ^bb4
    %8 = cir.load %0 : !cir.ptr<!s32i>, !s32i loc(#loc58)
    %9 = cir.const #cir.int<0> : !s32i loc(#loc59)
    %10 = cir.cmp(eq, %8, %9) : !s32i, !cir.bool loc(#loc117)
    cir.brcond %10 ^bb6, ^bb7 loc(#loc118)
  ^bb6:  // pred: ^bb5
    %11 = cir.get_global @".str.3" : !cir.ptr<!cir.array<!s8i x 24>> loc(#loc37)
    %12 = cir.cast(array_to_ptrdecay, %11 : !cir.ptr<!cir.array<!s8i x 24>>), !cir.ptr<!s8i> loc(#loc37)
    cir.call @printLine(%12) : (!cir.ptr<!s8i>) -> () loc(#loc63)
    cir.br ^bb8 loc(#loc61)
  ^bb7:  // pred: ^bb5
    %13 = cir.get_global @".str" : !cir.ptr<!cir.array<!s8i x 26>> loc(#loc64)
    %14 = cir.cast(array_to_ptrdecay, %13 : !cir.ptr<!cir.array<!s8i x 26>>), !cir.ptr<!s8i> loc(#loc64)
    cir.call @printLine(%14) : (!cir.ptr<!s8i>) -> () loc(#loc65)
    cir.br ^bb8 loc(#loc57)
  ^bb8:  // 2 preds: ^bb6, ^bb7
    cir.br ^bb9 loc(#loc57)
  ^bb9:  // pred: ^bb8
    cir.br ^bb10 loc(#loc51)
  ^bb10:  // pred: ^bb9
    %15 = cir.get_global @".str.4" : !cir.ptr<!cir.array<!s8i x 18>> loc(#loc38)
    %16 = cir.cast(array_to_ptrdecay, %15 : !cir.ptr<!cir.array<!s8i x 18>>), !cir.ptr<!s8i> loc(#loc38)
    cir.call @printLine(%16) : (!cir.ptr<!s8i>) -> () loc(#loc66)
    cir.br ^bb11 loc(#loc44)
  ^bb11:  // 2 preds: ^bb2, ^bb10
    cir.br ^bb12 loc(#loc44)
  ^bb12:  // pred: ^bb11
    cir.return loc(#loc40)
  } loc(#loc109)
  cir.func no_proto internal private @good2() extra(#fn_attr1) {
    %0 = cir.alloca !s32i, !cir.ptr<!s32i>, ["x"] {alignment = 4 : i64} loc(#loc120)
    cir.br ^bb1 loc(#loc121)
  ^bb1:  // pred: ^bb0
    %1 = cir.const #cir.int<1> : !s32i loc(#loc73)
    %2 = cir.cast(int_to_bool, %1 : !s32i), !cir.bool loc(#loc73)
    cir.brcond %2 ^bb2, ^bb10 loc(#loc122)
  ^bb2:  // pred: ^bb1
    cir.br ^bb3 loc(#loc123)
  ^bb3:  // pred: ^bb2
    %3 = cir.call @rand() : () -> !s32i extra(#fn_attr) loc(#loc77)
    %4 = cir.const #cir.int<3> : !s32i loc(#loc78)
    %5 = cir.binop(rem, %3, %4) : !s32i loc(#loc124)
    cir.store %5, %0 : !s32i, !cir.ptr<!s32i> loc(#loc125)
    cir.br ^bb4 loc(#loc126)
  ^bb4:  // pred: ^bb3
    %6 = cir.load %0 : !cir.ptr<!s32i>, !s32i loc(#loc83)
    %7 = cir.const #cir.int<0> : !s32i loc(#loc84)
    %8 = cir.cmp(eq, %6, %7) : !s32i, !cir.bool loc(#loc127)
    cir.brcond %8 ^bb5, ^bb6 loc(#loc128)
  ^bb5:  // pred: ^bb4
    %9 = cir.get_global @".str.3" : !cir.ptr<!cir.array<!s8i x 24>> loc(#loc88)
    %10 = cir.cast(array_to_ptrdecay, %9 : !cir.ptr<!cir.array<!s8i x 24>>), !cir.ptr<!s8i> loc(#loc88)
    cir.call @printLine(%10) : (!cir.ptr<!s8i>) -> () loc(#loc89)
    cir.br ^bb7 loc(#loc86)
  ^bb6:  // pred: ^bb4
    %11 = cir.get_global @".str" : !cir.ptr<!cir.array<!s8i x 26>> loc(#loc90)
    %12 = cir.cast(array_to_ptrdecay, %11 : !cir.ptr<!cir.array<!s8i x 26>>), !cir.ptr<!s8i> loc(#loc90)
    cir.call @printLine(%12) : (!cir.ptr<!s8i>) -> () loc(#loc91)
    cir.br ^bb7 loc(#loc82)
  ^bb7:  // 2 preds: ^bb5, ^bb6
    cir.br ^bb8 loc(#loc82)
  ^bb8:  // pred: ^bb7
    cir.br ^bb9 loc(#loc76)
  ^bb9:  // pred: ^bb8
    %13 = cir.get_global @".str.4" : !cir.ptr<!cir.array<!s8i x 18>> loc(#loc92)
    %14 = cir.cast(array_to_ptrdecay, %13 : !cir.ptr<!cir.array<!s8i x 18>>), !cir.ptr<!s8i> loc(#loc92)
    cir.call @printLine(%14) : (!cir.ptr<!s8i>) -> () loc(#loc93)
    cir.br ^bb10 loc(#loc72)
  ^bb10:  // 2 preds: ^bb1, ^bb9
    cir.br ^bb11 loc(#loc72)
  ^bb11:  // pred: ^bb10
    cir.return loc(#loc68)
  } loc(#loc119)
} loc(#loc)
#loc = loc("/workspaces/juliet-c/testcases/CWE398_Poor_Code_Quality/CWE398_Poor_Code_Quality__empty_if_04.c":0:0)
#loc1 = loc("/usr/include/stdlib.h":573:1)
#loc2 = loc("/usr/include/stdlib.h":573:24)
#loc3 = loc("../../testcasesupport/std_testcase_io.h":14:1)
#loc4 = loc("../../testcasesupport/std_testcase_io.h":14:33)
#loc5 = loc("CWE398_Poor_Code_Quality__empty_if_04.c":39:27)
#loc6 = loc("CWE398_Poor_Code_Quality__empty_if_04.c":42:19)
#loc7 = loc("CWE398_Poor_Code_Quality__empty_if_04.c":26:1)
#loc8 = loc("CWE398_Poor_Code_Quality__empty_if_04.c":44:1)
#loc9 = loc("CWE398_Poor_Code_Quality__empty_if_04.c":32:13)
#loc10 = loc("CWE398_Poor_Code_Quality__empty_if_04.c":32:17)
#loc11 = loc("CWE398_Poor_Code_Quality__empty_if_04.c":28:5)
#loc12 = loc("CWE398_Poor_Code_Quality__empty_if_04.c":43:5)
#loc13 = loc("CWE398_Poor_Code_Quality__empty_if_04.c":28:8)
#loc14 = loc("CWE398_Poor_Code_Quality__empty_if_04.c":29:5)
#loc15 = loc("CWE398_Poor_Code_Quality__empty_if_04.c":31:9)
#loc16 = loc("CWE398_Poor_Code_Quality__empty_if_04.c":41:9)
#loc17 = loc("CWE398_Poor_Code_Quality__empty_if_04.c":33:18)
#loc18 = loc("CWE398_Poor_Code_Quality__empty_if_04.c":33:27)
#loc19 = loc("CWE398_Poor_Code_Quality__empty_if_04.c":33:13)
#loc20 = loc("CWE398_Poor_Code_Quality__empty_if_04.c":33:28)
#loc21 = loc("CWE398_Poor_Code_Quality__empty_if_04.c":34:13)
#loc22 = loc("CWE398_Poor_Code_Quality__empty_if_04.c":40:13)
#loc23 = loc("CWE398_Poor_Code_Quality__empty_if_04.c":34:17)
#loc24 = loc("CWE398_Poor_Code_Quality__empty_if_04.c":34:22)
#loc25 = loc("CWE398_Poor_Code_Quality__empty_if_04.c":35:13)
#loc26 = loc("CWE398_Poor_Code_Quality__empty_if_04.c":36:13)
#loc27 = loc("CWE398_Poor_Code_Quality__empty_if_04.c":38:13)
#loc28 = loc("CWE398_Poor_Code_Quality__empty_if_04.c":39:17)
#loc29 = loc("CWE398_Poor_Code_Quality__empty_if_04.c":42:9)
#loc30 = loc("CWE398_Poor_Code_Quality__empty_if_04.c":99:1)
#loc31 = loc("CWE398_Poor_Code_Quality__empty_if_04.c":103:1)
#loc32 = loc("CWE398_Poor_Code_Quality__empty_if_04.c":101:5)
#loc33 = loc("CWE398_Poor_Code_Quality__empty_if_04.c":101:11)
#loc34 = loc("CWE398_Poor_Code_Quality__empty_if_04.c":102:5)
#loc35 = loc("CWE398_Poor_Code_Quality__empty_if_04.c":102:11)
#loc36 = loc("CWE398_Poor_Code_Quality__empty_if_04.c":56:19)
#loc37 = loc("CWE398_Poor_Code_Quality__empty_if_04.c":66:27)
#loc38 = loc("CWE398_Poor_Code_Quality__empty_if_04.c":73:19)
#loc39 = loc("CWE398_Poor_Code_Quality__empty_if_04.c":51:1)
#loc40 = loc("CWE398_Poor_Code_Quality__empty_if_04.c":75:1)
#loc41 = loc("CWE398_Poor_Code_Quality__empty_if_04.c":62:13)
#loc42 = loc("CWE398_Poor_Code_Quality__empty_if_04.c":62:17)
#loc43 = loc("CWE398_Poor_Code_Quality__empty_if_04.c":53:5)
#loc44 = loc("CWE398_Poor_Code_Quality__empty_if_04.c":74:5)
#loc45 = loc("CWE398_Poor_Code_Quality__empty_if_04.c":53:8)
#loc46 = loc("CWE398_Poor_Code_Quality__empty_if_04.c":54:5)
#loc47 = loc("CWE398_Poor_Code_Quality__empty_if_04.c":57:5)
#loc48 = loc("CWE398_Poor_Code_Quality__empty_if_04.c":59:5)
#loc49 = loc("CWE398_Poor_Code_Quality__empty_if_04.c":56:9)
#loc50 = loc("CWE398_Poor_Code_Quality__empty_if_04.c":61:9)
#loc51 = loc("CWE398_Poor_Code_Quality__empty_if_04.c":72:9)
#loc52 = loc("CWE398_Poor_Code_Quality__empty_if_04.c":63:18)
#loc53 = loc("CWE398_Poor_Code_Quality__empty_if_04.c":63:27)
#loc54 = loc("CWE398_Poor_Code_Quality__empty_if_04.c":63:13)
#loc55 = loc("CWE398_Poor_Code_Quality__empty_if_04.c":63:28)
#loc56 = loc("CWE398_Poor_Code_Quality__empty_if_04.c":64:13)
#loc57 = loc("CWE398_Poor_Code_Quality__empty_if_04.c":71:13)
#loc58 = loc("CWE398_Poor_Code_Quality__empty_if_04.c":64:17)
#loc59 = loc("CWE398_Poor_Code_Quality__empty_if_04.c":64:22)
#loc60 = loc("CWE398_Poor_Code_Quality__empty_if_04.c":65:13)
#loc61 = loc("CWE398_Poor_Code_Quality__empty_if_04.c":67:13)
#loc62 = loc("CWE398_Poor_Code_Quality__empty_if_04.c":69:13)
#loc63 = loc("CWE398_Poor_Code_Quality__empty_if_04.c":66:17)
#loc64 = loc("CWE398_Poor_Code_Quality__empty_if_04.c":70:27)
#loc65 = loc("CWE398_Poor_Code_Quality__empty_if_04.c":70:17)
#loc66 = loc("CWE398_Poor_Code_Quality__empty_if_04.c":73:9)
#loc67 = loc("CWE398_Poor_Code_Quality__empty_if_04.c":78:1)
#loc68 = loc("CWE398_Poor_Code_Quality__empty_if_04.c":97:1)
#loc69 = loc("CWE398_Poor_Code_Quality__empty_if_04.c":84:13)
#loc70 = loc("CWE398_Poor_Code_Quality__empty_if_04.c":84:17)
#loc71 = loc("CWE398_Poor_Code_Quality__empty_if_04.c":80:5)
#loc72 = loc("CWE398_Poor_Code_Quality__empty_if_04.c":96:5)
#loc73 = loc("CWE398_Poor_Code_Quality__empty_if_04.c":80:8)
#loc74 = loc("CWE398_Poor_Code_Quality__empty_if_04.c":81:5)
#loc75 = loc("CWE398_Poor_Code_Quality__empty_if_04.c":83:9)
#loc76 = loc("CWE398_Poor_Code_Quality__empty_if_04.c":94:9)
#loc77 = loc("CWE398_Poor_Code_Quality__empty_if_04.c":85:18)
#loc78 = loc("CWE398_Poor_Code_Quality__empty_if_04.c":85:27)
#loc79 = loc("CWE398_Poor_Code_Quality__empty_if_04.c":85:13)
#loc80 = loc("CWE398_Poor_Code_Quality__empty_if_04.c":85:28)
#loc81 = loc("CWE398_Poor_Code_Quality__empty_if_04.c":86:13)
#loc82 = loc("CWE398_Poor_Code_Quality__empty_if_04.c":93:13)
#loc83 = loc("CWE398_Poor_Code_Quality__empty_if_04.c":86:17)
#loc84 = loc("CWE398_Poor_Code_Quality__empty_if_04.c":86:22)
#loc85 = loc("CWE398_Poor_Code_Quality__empty_if_04.c":87:13)
#loc86 = loc("CWE398_Poor_Code_Quality__empty_if_04.c":89:13)
#loc87 = loc("CWE398_Poor_Code_Quality__empty_if_04.c":91:13)
#loc88 = loc("CWE398_Poor_Code_Quality__empty_if_04.c":88:27)
#loc89 = loc("CWE398_Poor_Code_Quality__empty_if_04.c":88:17)
#loc90 = loc("CWE398_Poor_Code_Quality__empty_if_04.c":92:27)
#loc91 = loc("CWE398_Poor_Code_Quality__empty_if_04.c":92:17)
#loc92 = loc("CWE398_Poor_Code_Quality__empty_if_04.c":95:19)
#loc93 = loc("CWE398_Poor_Code_Quality__empty_if_04.c":95:9)
#loc94 = loc(fused[#loc1, #loc2])
#loc95 = loc(fused[#loc3, #loc4])
#loc96 = loc(fused[#loc7, #loc8])
#loc97 = loc(fused[#loc9, #loc10])
#loc98 = loc(fused[#loc11, #loc12])
#loc99 = loc(fused[#loc14, #loc12])
#loc100 = loc(fused[#loc15, #loc16])
#loc101 = loc(fused[#loc17, #loc18])
#loc102 = loc(fused[#loc19, #loc20])
#loc103 = loc(fused[#loc21, #loc22])
#loc104 = loc(fused[#loc23, #loc24])
#loc105 = loc(fused[#loc25, #loc26, #loc27, #loc22])
#loc106 = loc(fused[#loc30, #loc31])
#loc107 = loc(fused[#loc32, #loc33])
#loc108 = loc(fused[#loc34, #loc35])
#loc109 = loc(fused[#loc39, #loc40])
#loc110 = loc(fused[#loc41, #loc42])
#loc111 = loc(fused[#loc43, #loc44])
#loc112 = loc(fused[#loc46, #loc47, #loc48, #loc44])
#loc113 = loc(fused[#loc50, #loc51])
#loc114 = loc(fused[#loc52, #loc53])
#loc115 = loc(fused[#loc54, #loc55])
#loc116 = loc(fused[#loc56, #loc57])
#loc117 = loc(fused[#loc58, #loc59])
#loc118 = loc(fused[#loc60, #loc61, #loc62, #loc57])
#loc119 = loc(fused[#loc67, #loc68])
#loc120 = loc(fused[#loc69, #loc70])
#loc121 = loc(fused[#loc71, #loc72])
#loc122 = loc(fused[#loc74, #loc72])
#loc123 = loc(fused[#loc75, #loc76])
#loc124 = loc(fused[#loc77, #loc78])
#loc125 = loc(fused[#loc79, #loc80])
#loc126 = loc(fused[#loc81, #loc82])
#loc127 = loc(fused[#loc83, #loc84])
#loc128 = loc(fused[#loc85, #loc86, #loc87, #loc82])
