!s32i = !cir.int<s, 32>
!s8i = !cir.int<s, 8>
!u32i = !cir.int<u, 32>
!void = !cir.void
#false = #cir.bool<false> : !cir.bool
#fn_attr = #cir<extra({nothrow = #cir.nothrow})>
#fn_attr1 = #cir<extra({inline = #cir.inline<no>, nothrow = #cir.nothrow, optnone = #cir.optnone})>
#true = #cir.bool<true> : !cir.bool
!ty_CWE400_Resource_Exhaustion__rand_sleep_34_unionType = !cir.struct<union "CWE400_Resource_Exhaustion__rand_sleep_34_unionType" {!s32i, !s32i}>
module @"/home/ladisgin/git_proj/test_projects/juliet-c/testcases/CWE400_Resource_Exhaustion/s02/CWE400_Resource_Exhaustion__rand_sleep_34.c" attributes {cir.lang = #cir.lang<c>, cir.sob = #cir.signed_overflow_behavior<undefined>, cir.triple = "x86_64-unknown-linux-gnu", dlti.dl_spec = #dlti.dl_spec<#dlti.dl_entry<i128, dense<128> : vector<2xi64>>, #dlti.dl_entry<i64, dense<64> : vector<2xi64>>, #dlti.dl_entry<!llvm.ptr<271>, dense<32> : vector<4xi64>>, #dlti.dl_entry<!llvm.ptr<272>, dense<64> : vector<4xi64>>, #dlti.dl_entry<f16, dense<16> : vector<2xi64>>, #dlti.dl_entry<f128, dense<128> : vector<2xi64>>, #dlti.dl_entry<!llvm.ptr<270>, dense<32> : vector<4xi64>>, #dlti.dl_entry<f64, dense<64> : vector<2xi64>>, #dlti.dl_entry<i32, dense<32> : vector<2xi64>>, #dlti.dl_entry<i16, dense<16> : vector<2xi64>>, #dlti.dl_entry<i8, dense<8> : vector<2xi64>>, #dlti.dl_entry<!llvm.ptr, dense<64> : vector<4xi64>>, #dlti.dl_entry<i1, dense<8> : vector<2xi64>>, #dlti.dl_entry<f80, dense<128> : vector<2xi64>>, #dlti.dl_entry<"dlti.endianness", "little">, #dlti.dl_entry<"dlti.stack_alignment", 128 : i64>>, llvm.data_layout = "e-m:e-p270:32:32-p271:32:32-p272:64:64-i64:64-i128:128-f80:128-n8:16:32:64-S128"} {
  cir.func private  @rand() -> !s32i extra(#fn_attr) loc(#loc92)
  cir.func private  @usleep(!u32i) -> !s32i loc(#loc93)
  cir.func private  @printLine(!cir.ptr<!s8i>) loc(#loc94)
  cir.global "private"  constant internal dsolocal @".str" = #cir.const_array<"Sleep time possibly too long\00" : !cir.array<!s8i x 29>> : !cir.array<!s8i x 29> {alignment = 1 : i64} loc(#loc7)
  cir.func no_proto  @CWE400_Resource_Exhaustion__rand_sleep_34_bad() extra(#fn_attr1) {
    %0 = cir.alloca !s32i, !cir.ptr<!s32i>, ["count"] {alignment = 4 : i64} loc(#loc96)
    %1 = cir.alloca !ty_CWE400_Resource_Exhaustion__rand_sleep_34_unionType, !cir.ptr<!ty_CWE400_Resource_Exhaustion__rand_sleep_34_unionType>, ["myUnion"] {alignment = 4 : i64} loc(#loc97)
    %2 = cir.const #cir.int<1> : !s32i loc(#loc14)
    %3 = cir.unary(minus, %2) : !s32i, !s32i loc(#loc15)
    cir.store %3, %0 : !s32i, !cir.ptr<!s32i> loc(#loc98)
    %4 = cir.call @rand() : () -> !s32i extra(#fn_attr) loc(#loc17)
    %5 = cir.const #cir.int<1> : !s32i loc(#loc17)
    %6 = cir.binop(and, %4, %5) : !s32i loc(#loc17)
    %7 = cir.cast(int_to_bool, %6 : !s32i), !cir.bool loc(#loc17)
    %8 = cir.ternary(%7, true {
      %12 = cir.call @rand() : () -> !s32i extra(#fn_attr) loc(#loc17)
      %13 = cir.cast(integral, %12 : !s32i), !u32i loc(#loc17)
      %14 = cir.const #cir.int<30> : !s32i loc(#loc17)
      %15 = cir.shift(left, %13 : !u32i, %14 : !s32i) -> !u32i loc(#loc17)
      %16 = cir.call @rand() : () -> !s32i extra(#fn_attr) loc(#loc17)
      %17 = cir.cast(integral, %16 : !s32i), !u32i loc(#loc17)
      %18 = cir.const #cir.int<15> : !s32i loc(#loc17)
      %19 = cir.shift(left, %17 : !u32i, %18 : !s32i) -> !u32i loc(#loc17)
      %20 = cir.binop(xor, %15, %19) : !u32i loc(#loc17)
      %21 = cir.call @rand() : () -> !s32i extra(#fn_attr) loc(#loc17)
      %22 = cir.cast(integral, %21 : !s32i), !u32i loc(#loc17)
      %23 = cir.binop(xor, %20, %22) : !u32i loc(#loc17)
      cir.yield %23 : !u32i loc(#loc17)
    }, false {
      %12 = cir.call @rand() : () -> !s32i extra(#fn_attr) loc(#loc17)
      %13 = cir.cast(integral, %12 : !s32i), !u32i loc(#loc17)
      %14 = cir.const #cir.int<30> : !s32i loc(#loc17)
      %15 = cir.shift(left, %13 : !u32i, %14 : !s32i) -> !u32i loc(#loc17)
      %16 = cir.call @rand() : () -> !s32i extra(#fn_attr) loc(#loc17)
      %17 = cir.cast(integral, %16 : !s32i), !u32i loc(#loc17)
      %18 = cir.const #cir.int<15> : !s32i loc(#loc17)
      %19 = cir.shift(left, %17 : !u32i, %18 : !s32i) -> !u32i loc(#loc17)
      %20 = cir.binop(xor, %15, %19) : !u32i loc(#loc17)
      %21 = cir.call @rand() : () -> !s32i extra(#fn_attr) loc(#loc17)
      %22 = cir.cast(integral, %21 : !s32i), !u32i loc(#loc17)
      %23 = cir.binop(xor, %20, %22) : !u32i loc(#loc17)
      %24 = cir.unary(minus, %23) : !u32i, !u32i loc(#loc17)
      %25 = cir.const #cir.int<1> : !s32i loc(#loc17)
      %26 = cir.cast(integral, %25 : !s32i), !u32i loc(#loc17)
      %27 = cir.binop(sub, %24, %26) : !u32i loc(#loc17)
      cir.yield %27 : !u32i loc(#loc17)
    }) : (!cir.bool) -> !u32i loc(#loc17)
    %9 = cir.cast(integral, %8 : !u32i), !s32i loc(#loc17)
    cir.store %9, %0 : !s32i, !cir.ptr<!s32i> loc(#loc99)
    %10 = cir.load %0 : !cir.ptr<!s32i>, !s32i loc(#loc19)
    %11 = cir.get_member %1[0] {name = "unionFirst"} : !cir.ptr<!ty_CWE400_Resource_Exhaustion__rand_sleep_34_unionType> -> !cir.ptr<!s32i> loc(#loc20)
    cir.store %10, %11 : !s32i, !cir.ptr<!s32i> loc(#loc100)
    cir.scope {
      %12 = cir.alloca !s32i, !cir.ptr<!s32i>, ["count", init] {alignment = 4 : i64} loc(#loc102)
      %13 = cir.get_member %1[1] {name = "unionSecond"} : !cir.ptr<!ty_CWE400_Resource_Exhaustion__rand_sleep_34_unionType> -> !cir.ptr<!s32i> loc(#loc26)
      %14 = cir.load %13 : !cir.ptr<!s32i>, !s32i loc(#loc25)
      cir.store %14, %12 : !s32i, !cir.ptr<!s32i> loc(#loc102)
      %15 = cir.load %12 : !cir.ptr<!s32i>, !s32i loc(#loc27)
      %16 = cir.cast(integral, %15 : !s32i), !u32i loc(#loc27)
      %17 = cir.call @usleep(%16) : (!u32i) -> !s32i loc(#loc28)
      %18 = cir.get_global @".str" : !cir.ptr<!cir.array<!s8i x 29>> loc(#loc7)
      %19 = cir.cast(array_to_ptrdecay, %18 : !cir.ptr<!cir.array<!s8i x 29>>), !cir.ptr<!s8i> loc(#loc7)
      cir.call @printLine(%19) : (!cir.ptr<!s8i>) -> () loc(#loc29)
    } loc(#loc101)
    cir.return loc(#loc9)
  } loc(#loc95)
  cir.func no_proto  @CWE400_Resource_Exhaustion__rand_sleep_34_good() extra(#fn_attr1) {
    %0 = cir.get_global @goodG2B : !cir.ptr<!cir.func<!void ()>> loc(#loc104)
    cir.call %0() : (!cir.ptr<!cir.func<!void ()>>) -> () loc(#loc32)
    %1 = cir.get_global @goodB2G : !cir.ptr<!cir.func<!void ()>> loc(#loc105)
    cir.call %1() : (!cir.ptr<!cir.func<!void ()>>) -> () loc(#loc34)
    cir.return loc(#loc31)
  } loc(#loc103)
  cir.func no_proto internal private  @goodG2B() extra(#fn_attr1) {
    %0 = cir.alloca !s32i, !cir.ptr<!s32i>, ["count"] {alignment = 4 : i64} loc(#loc107)
    %1 = cir.alloca !ty_CWE400_Resource_Exhaustion__rand_sleep_34_unionType, !cir.ptr<!ty_CWE400_Resource_Exhaustion__rand_sleep_34_unionType>, ["myUnion"] {alignment = 4 : i64} loc(#loc108)
    %2 = cir.const #cir.int<1> : !s32i loc(#loc42)
    %3 = cir.unary(minus, %2) : !s32i, !s32i loc(#loc43)
    cir.store %3, %0 : !s32i, !cir.ptr<!s32i> loc(#loc109)
    %4 = cir.const #cir.int<20> : !s32i loc(#loc45)
    cir.store %4, %0 : !s32i, !cir.ptr<!s32i> loc(#loc110)
    %5 = cir.load %0 : !cir.ptr<!s32i>, !s32i loc(#loc47)
    %6 = cir.get_member %1[0] {name = "unionFirst"} : !cir.ptr<!ty_CWE400_Resource_Exhaustion__rand_sleep_34_unionType> -> !cir.ptr<!s32i> loc(#loc20)
    cir.store %5, %6 : !s32i, !cir.ptr<!s32i> loc(#loc111)
    cir.scope {
      %7 = cir.alloca !s32i, !cir.ptr<!s32i>, ["count", init] {alignment = 4 : i64} loc(#loc113)
      %8 = cir.get_member %1[1] {name = "unionSecond"} : !cir.ptr<!ty_CWE400_Resource_Exhaustion__rand_sleep_34_unionType> -> !cir.ptr<!s32i> loc(#loc26)
      %9 = cir.load %8 : !cir.ptr<!s32i>, !s32i loc(#loc52)
      cir.store %9, %7 : !s32i, !cir.ptr<!s32i> loc(#loc113)
      %10 = cir.load %7 : !cir.ptr<!s32i>, !s32i loc(#loc53)
      %11 = cir.cast(integral, %10 : !s32i), !u32i loc(#loc53)
      %12 = cir.call @usleep(%11) : (!u32i) -> !s32i loc(#loc54)
      %13 = cir.get_global @".str" : !cir.ptr<!cir.array<!s8i x 29>> loc(#loc55)
      %14 = cir.cast(array_to_ptrdecay, %13 : !cir.ptr<!cir.array<!s8i x 29>>), !cir.ptr<!s8i> loc(#loc55)
      cir.call @printLine(%14) : (!cir.ptr<!s8i>) -> () loc(#loc56)
    } loc(#loc112)
    cir.return loc(#loc37)
  } loc(#loc106)
  cir.global "private"  constant internal dsolocal @".str1" = #cir.const_array<"Sleep time OK\00" : !cir.array<!s8i x 14>> : !cir.array<!s8i x 14> {alignment = 1 : i64} loc(#loc57)
  cir.global "private"  constant internal dsolocal @".str2" = #cir.const_array<"Sleep time too long\00" : !cir.array<!s8i x 20>> : !cir.array<!s8i x 20> {alignment = 1 : i64} loc(#loc58)
  cir.func no_proto internal private  @goodB2G() extra(#fn_attr1) {
    %0 = cir.alloca !s32i, !cir.ptr<!s32i>, ["count"] {alignment = 4 : i64} loc(#loc115)
    %1 = cir.alloca !ty_CWE400_Resource_Exhaustion__rand_sleep_34_unionType, !cir.ptr<!ty_CWE400_Resource_Exhaustion__rand_sleep_34_unionType>, ["myUnion"] {alignment = 4 : i64} loc(#loc116)
    %2 = cir.const #cir.int<1> : !s32i loc(#loc65)
    %3 = cir.unary(minus, %2) : !s32i, !s32i loc(#loc66)
    cir.store %3, %0 : !s32i, !cir.ptr<!s32i> loc(#loc117)
    %4 = cir.call @rand() : () -> !s32i extra(#fn_attr) loc(#loc68)
    %5 = cir.const #cir.int<1> : !s32i loc(#loc68)
    %6 = cir.binop(and, %4, %5) : !s32i loc(#loc68)
    %7 = cir.cast(int_to_bool, %6 : !s32i), !cir.bool loc(#loc68)
    %8 = cir.ternary(%7, true {
      %12 = cir.call @rand() : () -> !s32i extra(#fn_attr) loc(#loc68)
      %13 = cir.cast(integral, %12 : !s32i), !u32i loc(#loc68)
      %14 = cir.const #cir.int<30> : !s32i loc(#loc68)
      %15 = cir.shift(left, %13 : !u32i, %14 : !s32i) -> !u32i loc(#loc68)
      %16 = cir.call @rand() : () -> !s32i extra(#fn_attr) loc(#loc68)
      %17 = cir.cast(integral, %16 : !s32i), !u32i loc(#loc68)
      %18 = cir.const #cir.int<15> : !s32i loc(#loc68)
      %19 = cir.shift(left, %17 : !u32i, %18 : !s32i) -> !u32i loc(#loc68)
      %20 = cir.binop(xor, %15, %19) : !u32i loc(#loc68)
      %21 = cir.call @rand() : () -> !s32i extra(#fn_attr) loc(#loc68)
      %22 = cir.cast(integral, %21 : !s32i), !u32i loc(#loc68)
      %23 = cir.binop(xor, %20, %22) : !u32i loc(#loc68)
      cir.yield %23 : !u32i loc(#loc68)
    }, false {
      %12 = cir.call @rand() : () -> !s32i extra(#fn_attr) loc(#loc68)
      %13 = cir.cast(integral, %12 : !s32i), !u32i loc(#loc68)
      %14 = cir.const #cir.int<30> : !s32i loc(#loc68)
      %15 = cir.shift(left, %13 : !u32i, %14 : !s32i) -> !u32i loc(#loc68)
      %16 = cir.call @rand() : () -> !s32i extra(#fn_attr) loc(#loc68)
      %17 = cir.cast(integral, %16 : !s32i), !u32i loc(#loc68)
      %18 = cir.const #cir.int<15> : !s32i loc(#loc68)
      %19 = cir.shift(left, %17 : !u32i, %18 : !s32i) -> !u32i loc(#loc68)
      %20 = cir.binop(xor, %15, %19) : !u32i loc(#loc68)
      %21 = cir.call @rand() : () -> !s32i extra(#fn_attr) loc(#loc68)
      %22 = cir.cast(integral, %21 : !s32i), !u32i loc(#loc68)
      %23 = cir.binop(xor, %20, %22) : !u32i loc(#loc68)
      %24 = cir.unary(minus, %23) : !u32i, !u32i loc(#loc68)
      %25 = cir.const #cir.int<1> : !s32i loc(#loc68)
      %26 = cir.cast(integral, %25 : !s32i), !u32i loc(#loc68)
      %27 = cir.binop(sub, %24, %26) : !u32i loc(#loc68)
      cir.yield %27 : !u32i loc(#loc68)
    }) : (!cir.bool) -> !u32i loc(#loc68)
    %9 = cir.cast(integral, %8 : !u32i), !s32i loc(#loc68)
    cir.store %9, %0 : !s32i, !cir.ptr<!s32i> loc(#loc118)
    %10 = cir.load %0 : !cir.ptr<!s32i>, !s32i loc(#loc70)
    %11 = cir.get_member %1[0] {name = "unionFirst"} : !cir.ptr<!ty_CWE400_Resource_Exhaustion__rand_sleep_34_unionType> -> !cir.ptr<!s32i> loc(#loc20)
    cir.store %10, %11 : !s32i, !cir.ptr<!s32i> loc(#loc119)
    cir.scope {
      %12 = cir.alloca !s32i, !cir.ptr<!s32i>, ["count", init] {alignment = 4 : i64} loc(#loc121)
      %13 = cir.get_member %1[1] {name = "unionSecond"} : !cir.ptr<!ty_CWE400_Resource_Exhaustion__rand_sleep_34_unionType> -> !cir.ptr<!s32i> loc(#loc26)
      %14 = cir.load %13 : !cir.ptr<!s32i>, !s32i loc(#loc75)
      cir.store %14, %12 : !s32i, !cir.ptr<!s32i> loc(#loc121)
      cir.scope {
        %15 = cir.load %12 : !cir.ptr<!s32i>, !s32i loc(#loc78)
        %16 = cir.const #cir.int<0> : !s32i loc(#loc79)
        %17 = cir.cmp(gt, %15, %16) : !s32i, !s32i loc(#loc123)
        %18 = cir.cast(int_to_bool, %17 : !s32i), !cir.bool loc(#loc80)
        %19 = cir.ternary(%18, true {
          %20 = cir.load %12 : !cir.ptr<!s32i>, !s32i loc(#loc82)
          %21 = cir.const #cir.int<2000> : !s32i loc(#loc83)
          %22 = cir.cmp(le, %20, %21) : !s32i, !s32i loc(#loc124)
          %23 = cir.cast(int_to_bool, %22 : !s32i), !cir.bool loc(#loc84)
          %24 = cir.ternary(%23, true {
            %25 = cir.const #true loc(#loc81)
            cir.yield %25 : !cir.bool loc(#loc81)
          }, false {
            %25 = cir.const #false loc(#loc81)
            cir.yield %25 : !cir.bool loc(#loc81)
          }) : (!cir.bool) -> !cir.bool loc(#loc81)
          cir.yield %24 : !cir.bool loc(#loc81)
        }, false {
          %20 = cir.const #false loc(#loc81)
          cir.yield %20 : !cir.bool loc(#loc81)
        }) : (!cir.bool) -> !cir.bool loc(#loc81)
        cir.if %19 {
          %20 = cir.load %12 : !cir.ptr<!s32i>, !s32i loc(#loc88)
          %21 = cir.cast(integral, %20 : !s32i), !u32i loc(#loc88)
          %22 = cir.call @usleep(%21) : (!u32i) -> !s32i loc(#loc89)
          %23 = cir.get_global @".str1" : !cir.ptr<!cir.array<!s8i x 14>> loc(#loc57)
          %24 = cir.cast(array_to_ptrdecay, %23 : !cir.ptr<!cir.array<!s8i x 14>>), !cir.ptr<!s8i> loc(#loc57)
          cir.call @printLine(%24) : (!cir.ptr<!s8i>) -> () loc(#loc90)
        } else {
          %20 = cir.get_global @".str2" : !cir.ptr<!cir.array<!s8i x 20>> loc(#loc58)
          %21 = cir.cast(array_to_ptrdecay, %20 : !cir.ptr<!cir.array<!s8i x 20>>), !cir.ptr<!s8i> loc(#loc58)
          cir.call @printLine(%21) : (!cir.ptr<!s8i>) -> () loc(#loc91)
        } loc(#loc125)
      } loc(#loc122)
    } loc(#loc120)
    cir.return loc(#loc60)
  } loc(#loc114)
} loc(#loc)
#loc = loc("/home/ladisgin/git_proj/test_projects/juliet-c/testcases/CWE400_Resource_Exhaustion/s02/CWE400_Resource_Exhaustion__rand_sleep_34.c":0:0)
#loc1 = loc("/usr/include/stdlib.h":573:1)
#loc2 = loc("/usr/include/stdlib.h":573:24)
#loc3 = loc("/usr/include/unistd.h":480:1)
#loc4 = loc("/usr/include/unistd.h":480:43)
#loc5 = loc("../../../testcasesupport/std_testcase_io.h":14:1)
#loc6 = loc("../../../testcasesupport/std_testcase_io.h":14:33)
#loc7 = loc("CWE400_Resource_Exhaustion__rand_sleep_34.c":49:19)
#loc8 = loc("CWE400_Resource_Exhaustion__rand_sleep_34.c":36:1)
#loc9 = loc("CWE400_Resource_Exhaustion__rand_sleep_34.c":51:1)
#loc10 = loc("CWE400_Resource_Exhaustion__rand_sleep_34.c":38:5)
#loc11 = loc("CWE400_Resource_Exhaustion__rand_sleep_34.c":38:9)
#loc12 = loc("CWE400_Resource_Exhaustion__rand_sleep_34.c":39:5)
#loc13 = loc("CWE400_Resource_Exhaustion__rand_sleep_34.c":39:57)
#loc14 = loc("CWE400_Resource_Exhaustion__rand_sleep_34.c":41:14)
#loc15 = loc("CWE400_Resource_Exhaustion__rand_sleep_34.c":41:13)
#loc16 = loc("CWE400_Resource_Exhaustion__rand_sleep_34.c":41:5)
#loc17 = loc("CWE400_Resource_Exhaustion__rand_sleep_34.c":43:13)
#loc18 = loc("CWE400_Resource_Exhaustion__rand_sleep_34.c":43:5)
#loc19 = loc("CWE400_Resource_Exhaustion__rand_sleep_34.c":44:26)
#loc20 = loc("CWE400_Resource_Exhaustion__rand_sleep_34.c":30:9)
#loc21 = loc("CWE400_Resource_Exhaustion__rand_sleep_34.c":44:5)
#loc22 = loc("CWE400_Resource_Exhaustion__rand_sleep_34.c":45:5)
#loc23 = loc("CWE400_Resource_Exhaustion__rand_sleep_34.c":50:5)
#loc24 = loc("CWE400_Resource_Exhaustion__rand_sleep_34.c":46:9)
#loc25 = loc("CWE400_Resource_Exhaustion__rand_sleep_34.c":46:29)
#loc26 = loc("CWE400_Resource_Exhaustion__rand_sleep_34.c":31:9)
#loc27 = loc("CWE400_Resource_Exhaustion__rand_sleep_34.c":48:15)
#loc28 = loc("CWE400_Resource_Exhaustion__rand_sleep_34.c":48:9)
#loc29 = loc("CWE400_Resource_Exhaustion__rand_sleep_34.c":49:9)
#loc30 = loc("CWE400_Resource_Exhaustion__rand_sleep_34.c":100:1)
#loc31 = loc("CWE400_Resource_Exhaustion__rand_sleep_34.c":104:1)
#loc32 = loc("CWE400_Resource_Exhaustion__rand_sleep_34.c":102:5)
#loc33 = loc("CWE400_Resource_Exhaustion__rand_sleep_34.c":102:13)
#loc34 = loc("CWE400_Resource_Exhaustion__rand_sleep_34.c":103:5)
#loc35 = loc("CWE400_Resource_Exhaustion__rand_sleep_34.c":103:13)
#loc36 = loc("CWE400_Resource_Exhaustion__rand_sleep_34.c":58:1)
#loc37 = loc("CWE400_Resource_Exhaustion__rand_sleep_34.c":73:1)
#loc38 = loc("CWE400_Resource_Exhaustion__rand_sleep_34.c":60:5)
#loc39 = loc("CWE400_Resource_Exhaustion__rand_sleep_34.c":60:9)
#loc40 = loc("CWE400_Resource_Exhaustion__rand_sleep_34.c":61:5)
#loc41 = loc("CWE400_Resource_Exhaustion__rand_sleep_34.c":61:57)
#loc42 = loc("CWE400_Resource_Exhaustion__rand_sleep_34.c":63:14)
#loc43 = loc("CWE400_Resource_Exhaustion__rand_sleep_34.c":63:13)
#loc44 = loc("CWE400_Resource_Exhaustion__rand_sleep_34.c":63:5)
#loc45 = loc("CWE400_Resource_Exhaustion__rand_sleep_34.c":65:13)
#loc46 = loc("CWE400_Resource_Exhaustion__rand_sleep_34.c":65:5)
#loc47 = loc("CWE400_Resource_Exhaustion__rand_sleep_34.c":66:26)
#loc48 = loc("CWE400_Resource_Exhaustion__rand_sleep_34.c":66:5)
#loc49 = loc("CWE400_Resource_Exhaustion__rand_sleep_34.c":67:5)
#loc50 = loc("CWE400_Resource_Exhaustion__rand_sleep_34.c":72:5)
#loc51 = loc("CWE400_Resource_Exhaustion__rand_sleep_34.c":68:9)
#loc52 = loc("CWE400_Resource_Exhaustion__rand_sleep_34.c":68:29)
#loc53 = loc("CWE400_Resource_Exhaustion__rand_sleep_34.c":70:15)
#loc54 = loc("CWE400_Resource_Exhaustion__rand_sleep_34.c":70:9)
#loc55 = loc("CWE400_Resource_Exhaustion__rand_sleep_34.c":71:19)
#loc56 = loc("CWE400_Resource_Exhaustion__rand_sleep_34.c":71:9)
#loc57 = loc("CWE400_Resource_Exhaustion__rand_sleep_34.c":91:23)
#loc58 = loc("CWE400_Resource_Exhaustion__rand_sleep_34.c":95:23)
#loc59 = loc("CWE400_Resource_Exhaustion__rand_sleep_34.c":76:1)
#loc60 = loc("CWE400_Resource_Exhaustion__rand_sleep_34.c":98:1)
#loc61 = loc("CWE400_Resource_Exhaustion__rand_sleep_34.c":78:5)
#loc62 = loc("CWE400_Resource_Exhaustion__rand_sleep_34.c":78:9)
#loc63 = loc("CWE400_Resource_Exhaustion__rand_sleep_34.c":79:5)
#loc64 = loc("CWE400_Resource_Exhaustion__rand_sleep_34.c":79:57)
#loc65 = loc("CWE400_Resource_Exhaustion__rand_sleep_34.c":81:14)
#loc66 = loc("CWE400_Resource_Exhaustion__rand_sleep_34.c":81:13)
#loc67 = loc("CWE400_Resource_Exhaustion__rand_sleep_34.c":81:5)
#loc68 = loc("CWE400_Resource_Exhaustion__rand_sleep_34.c":83:13)
#loc69 = loc("CWE400_Resource_Exhaustion__rand_sleep_34.c":83:5)
#loc70 = loc("CWE400_Resource_Exhaustion__rand_sleep_34.c":84:26)
#loc71 = loc("CWE400_Resource_Exhaustion__rand_sleep_34.c":84:5)
#loc72 = loc("CWE400_Resource_Exhaustion__rand_sleep_34.c":85:5)
#loc73 = loc("CWE400_Resource_Exhaustion__rand_sleep_34.c":97:5)
#loc74 = loc("CWE400_Resource_Exhaustion__rand_sleep_34.c":86:9)
#loc75 = loc("CWE400_Resource_Exhaustion__rand_sleep_34.c":86:29)
#loc76 = loc("CWE400_Resource_Exhaustion__rand_sleep_34.c":88:9)
#loc77 = loc("CWE400_Resource_Exhaustion__rand_sleep_34.c":96:9)
#loc78 = loc("CWE400_Resource_Exhaustion__rand_sleep_34.c":88:13)
#loc79 = loc("CWE400_Resource_Exhaustion__rand_sleep_34.c":88:21)
#loc80 = loc("CWE400_Resource_Exhaustion__rand_sleep_34.c":88:19)
#loc81 = loc("CWE400_Resource_Exhaustion__rand_sleep_34.c":88:23)
#loc82 = loc("CWE400_Resource_Exhaustion__rand_sleep_34.c":88:26)
#loc83 = loc("CWE400_Resource_Exhaustion__rand_sleep_34.c":88:35)
#loc84 = loc("CWE400_Resource_Exhaustion__rand_sleep_34.c":88:32)
#loc85 = loc("CWE400_Resource_Exhaustion__rand_sleep_34.c":89:9)
#loc86 = loc("CWE400_Resource_Exhaustion__rand_sleep_34.c":92:9)
#loc87 = loc("CWE400_Resource_Exhaustion__rand_sleep_34.c":94:9)
#loc88 = loc("CWE400_Resource_Exhaustion__rand_sleep_34.c":90:19)
#loc89 = loc("CWE400_Resource_Exhaustion__rand_sleep_34.c":90:13)
#loc90 = loc("CWE400_Resource_Exhaustion__rand_sleep_34.c":91:13)
#loc91 = loc("CWE400_Resource_Exhaustion__rand_sleep_34.c":95:13)
#loc92 = loc(fused[#loc1, #loc2])
#loc93 = loc(fused[#loc3, #loc4])
#loc94 = loc(fused[#loc5, #loc6])
#loc95 = loc(fused[#loc8, #loc9])
#loc96 = loc(fused[#loc10, #loc11])
#loc97 = loc(fused[#loc12, #loc13])
#loc98 = loc(fused[#loc16, #loc14])
#loc99 = loc(fused[#loc18, #loc17])
#loc100 = loc(fused[#loc21, #loc19])
#loc101 = loc(fused[#loc22, #loc23])
#loc102 = loc(fused[#loc24, #loc25])
#loc103 = loc(fused[#loc30, #loc31])
#loc104 = loc(fused[#loc32, #loc33])
#loc105 = loc(fused[#loc34, #loc35])
#loc106 = loc(fused[#loc36, #loc37])
#loc107 = loc(fused[#loc38, #loc39])
#loc108 = loc(fused[#loc40, #loc41])
#loc109 = loc(fused[#loc44, #loc42])
#loc110 = loc(fused[#loc46, #loc45])
#loc111 = loc(fused[#loc48, #loc47])
#loc112 = loc(fused[#loc49, #loc50])
#loc113 = loc(fused[#loc51, #loc52])
#loc114 = loc(fused[#loc59, #loc60])
#loc115 = loc(fused[#loc61, #loc62])
#loc116 = loc(fused[#loc63, #loc64])
#loc117 = loc(fused[#loc67, #loc65])
#loc118 = loc(fused[#loc69, #loc68])
#loc119 = loc(fused[#loc71, #loc70])
#loc120 = loc(fused[#loc72, #loc73])
#loc121 = loc(fused[#loc74, #loc75])
#loc122 = loc(fused[#loc76, #loc77])
#loc123 = loc(fused[#loc78, #loc79])
#loc124 = loc(fused[#loc82, #loc83])
#loc125 = loc(fused[#loc85, #loc86, #loc87, #loc77])
