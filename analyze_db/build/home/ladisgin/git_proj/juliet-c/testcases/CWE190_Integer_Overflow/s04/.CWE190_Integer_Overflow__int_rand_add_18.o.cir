!s32i = !cir.int<s, 32>
!s8i = !cir.int<s, 8>
!u32i = !cir.int<u, 32>
!void = !cir.void
#fn_attr = #cir<extra({nothrow = #cir.nothrow})>
#fn_attr1 = #cir<extra({inline = #cir.inline<no>, nothrow = #cir.nothrow, optnone = #cir.optnone})>
#loc15 = loc("CWE190_Integer_Overflow__int_rand_add_18.c":30:12)
#loc41 = loc("CWE190_Integer_Overflow__int_rand_add_18.c":53:12)
module @"/home/ladisgin/git_proj/juliet-c/testcases/CWE190_Integer_Overflow/s04/CWE190_Integer_Overflow__int_rand_add_18.c" attributes {cir.lang = #cir.lang<c>, cir.sob = #cir.signed_overflow_behavior<undefined>, cir.triple = "x86_64-unknown-linux-gnu", dlti.dl_spec = #dlti.dl_spec<i64 = dense<64> : vector<2xi64>, i128 = dense<128> : vector<2xi64>, !llvm.ptr<270> = dense<32> : vector<4xi64>, !llvm.ptr<272> = dense<64> : vector<4xi64>, f16 = dense<16> : vector<2xi64>, !llvm.ptr<271> = dense<32> : vector<4xi64>, f64 = dense<64> : vector<2xi64>, f128 = dense<128> : vector<2xi64>, i16 = dense<16> : vector<2xi64>, i8 = dense<8> : vector<2xi64>, i32 = dense<32> : vector<2xi64>, f80 = dense<128> : vector<2xi64>, i1 = dense<8> : vector<2xi64>, !llvm.ptr = dense<64> : vector<4xi64>, "dlti.endianness" = "little", "dlti.stack_alignment" = 128 : i64>} {
  cir.func private @rand() -> !s32i extra(#fn_attr) loc(#loc73)
  cir.func private @printIntLine(!s32i) loc(#loc74)
  cir.func no_proto @CWE190_Integer_Overflow__int_rand_add_18_bad() extra(#fn_attr1) {
    %0 = cir.alloca !s32i, !cir.ptr<!s32i>, ["data"] {alignment = 4 : i64} loc(#loc76)
    %1 = cir.alloca !s32i, !cir.ptr<!s32i>, ["result", init] {alignment = 4 : i64} loc(#loc77)
    %2 = cir.const #cir.int<0> : !s32i loc(#loc11)
    cir.store %2, %0 : !s32i, !cir.ptr<!s32i> loc(#loc78)
    cir.br ^bb1 loc(#loc79)
  ^bb1:  // pred: ^bb0
    %3 = cir.call @rand() : () -> !s32i extra(#fn_attr) loc(#loc15)
    %4 = cir.const #cir.int<1> : !s32i loc(#loc15)
    %5 = cir.binop(and, %3, %4) : !s32i loc(#loc15)
    %6 = cir.cast(int_to_bool, %5 : !s32i), !cir.bool loc(#loc15)
    cir.brcond %6 ^bb2, ^bb3 loc(#loc15)
  ^bb2:  // pred: ^bb1
    %7 = cir.call @rand() : () -> !s32i extra(#fn_attr) loc(#loc15)
    %8 = cir.cast(integral, %7 : !s32i), !u32i loc(#loc15)
    %9 = cir.const #cir.int<30> : !s32i loc(#loc15)
    %10 = cir.shift(left, %8 : !u32i, %9 : !s32i) -> !u32i loc(#loc15)
    %11 = cir.call @rand() : () -> !s32i extra(#fn_attr) loc(#loc15)
    %12 = cir.cast(integral, %11 : !s32i), !u32i loc(#loc15)
    %13 = cir.const #cir.int<15> : !s32i loc(#loc15)
    %14 = cir.shift(left, %12 : !u32i, %13 : !s32i) -> !u32i loc(#loc15)
    %15 = cir.binop(xor, %10, %14) : !u32i loc(#loc15)
    %16 = cir.call @rand() : () -> !s32i extra(#fn_attr) loc(#loc15)
    %17 = cir.cast(integral, %16 : !s32i), !u32i loc(#loc15)
    %18 = cir.binop(xor, %15, %17) : !u32i loc(#loc15)
    cir.br ^bb4(%18 : !u32i) loc(#loc15)
  ^bb3:  // pred: ^bb1
    %19 = cir.call @rand() : () -> !s32i extra(#fn_attr) loc(#loc15)
    %20 = cir.cast(integral, %19 : !s32i), !u32i loc(#loc15)
    %21 = cir.const #cir.int<30> : !s32i loc(#loc15)
    %22 = cir.shift(left, %20 : !u32i, %21 : !s32i) -> !u32i loc(#loc15)
    %23 = cir.call @rand() : () -> !s32i extra(#fn_attr) loc(#loc15)
    %24 = cir.cast(integral, %23 : !s32i), !u32i loc(#loc15)
    %25 = cir.const #cir.int<15> : !s32i loc(#loc15)
    %26 = cir.shift(left, %24 : !u32i, %25 : !s32i) -> !u32i loc(#loc15)
    %27 = cir.binop(xor, %22, %26) : !u32i loc(#loc15)
    %28 = cir.call @rand() : () -> !s32i extra(#fn_attr) loc(#loc15)
    %29 = cir.cast(integral, %28 : !s32i), !u32i loc(#loc15)
    %30 = cir.binop(xor, %27, %29) : !u32i loc(#loc15)
    %31 = cir.unary(minus, %30) : !u32i, !u32i loc(#loc15)
    %32 = cir.const #cir.int<1> : !s32i loc(#loc15)
    %33 = cir.cast(integral, %32 : !s32i), !u32i loc(#loc15)
    %34 = cir.binop(sub, %31, %33) : !u32i loc(#loc15)
    cir.br ^bb4(%34 : !u32i) loc(#loc15)
  ^bb4(%35: !u32i loc("CWE190_Integer_Overflow__int_rand_add_18.c":30:12)):  // 2 preds: ^bb2, ^bb3
    cir.br ^bb5 loc(#loc15)
  ^bb5:  // pred: ^bb4
    %36 = cir.cast(integral, %35 : !u32i), !s32i loc(#loc15)
    cir.store %36, %0 : !s32i, !cir.ptr<!s32i> loc(#loc80)
    cir.br ^bb6 loc(#loc81)
  ^bb6:  // pred: ^bb5
    %37 = cir.load %0 : !cir.ptr<!s32i>, !s32i loc(#loc19)
    %38 = cir.const #cir.int<1> : !s32i loc(#loc10)
    %39 = cir.binop(add, %37, %38) nsw : !s32i loc(#loc19)
    cir.store %39, %1 : !s32i, !cir.ptr<!s32i> loc(#loc77)
    %40 = cir.load %1 : !cir.ptr<!s32i>, !s32i loc(#loc20)
    cir.call @printIntLine(%40) : (!s32i) -> () loc(#loc21)
    cir.return loc(#loc6)
  } loc(#loc75)
  cir.func no_proto @CWE190_Integer_Overflow__int_rand_add_18_good() extra(#fn_attr1) {
    %0 = cir.get_global @goodB2G : !cir.ptr<!cir.func<!void ()>> loc(#loc83)
    cir.call %0() : (!cir.ptr<!cir.func<!void ()>>) -> () loc(#loc24)
    %1 = cir.get_global @goodG2B : !cir.ptr<!cir.func<!void ()>> loc(#loc84)
    cir.call %1() : (!cir.ptr<!cir.func<!void ()>>) -> () loc(#loc26)
    cir.return loc(#loc23)
  } loc(#loc82)
  cir.func private @printLine(!cir.ptr<!s8i>) loc(#loc85)
  cir.global "private" constant cir_private dsolocal @".str" = #cir.const_array<"data value is too large to perform arithmetic safely.\00" : !cir.array<!s8i x 54>> : !cir.array<!s8i x 54> {alignment = 1 : i64} loc(#loc30)
  cir.func no_proto internal private @goodB2G() extra(#fn_attr1) {
    %0 = cir.alloca !s32i, !cir.ptr<!s32i>, ["result", init] {alignment = 4 : i64} loc(#loc87)
    %1 = cir.alloca !s32i, !cir.ptr<!s32i>, ["data"] {alignment = 4 : i64} loc(#loc88)
    %2 = cir.const #cir.int<0> : !s32i loc(#loc37)
    cir.store %2, %1 : !s32i, !cir.ptr<!s32i> loc(#loc89)
    cir.br ^bb1 loc(#loc90)
  ^bb1:  // pred: ^bb0
    %3 = cir.call @rand() : () -> !s32i extra(#fn_attr) loc(#loc41)
    %4 = cir.const #cir.int<1> : !s32i loc(#loc41)
    %5 = cir.binop(and, %3, %4) : !s32i loc(#loc41)
    %6 = cir.cast(int_to_bool, %5 : !s32i), !cir.bool loc(#loc41)
    cir.brcond %6 ^bb2, ^bb3 loc(#loc41)
  ^bb2:  // pred: ^bb1
    %7 = cir.call @rand() : () -> !s32i extra(#fn_attr) loc(#loc41)
    %8 = cir.cast(integral, %7 : !s32i), !u32i loc(#loc41)
    %9 = cir.const #cir.int<30> : !s32i loc(#loc41)
    %10 = cir.shift(left, %8 : !u32i, %9 : !s32i) -> !u32i loc(#loc41)
    %11 = cir.call @rand() : () -> !s32i extra(#fn_attr) loc(#loc41)
    %12 = cir.cast(integral, %11 : !s32i), !u32i loc(#loc41)
    %13 = cir.const #cir.int<15> : !s32i loc(#loc41)
    %14 = cir.shift(left, %12 : !u32i, %13 : !s32i) -> !u32i loc(#loc41)
    %15 = cir.binop(xor, %10, %14) : !u32i loc(#loc41)
    %16 = cir.call @rand() : () -> !s32i extra(#fn_attr) loc(#loc41)
    %17 = cir.cast(integral, %16 : !s32i), !u32i loc(#loc41)
    %18 = cir.binop(xor, %15, %17) : !u32i loc(#loc41)
    cir.br ^bb4(%18 : !u32i) loc(#loc41)
  ^bb3:  // pred: ^bb1
    %19 = cir.call @rand() : () -> !s32i extra(#fn_attr) loc(#loc41)
    %20 = cir.cast(integral, %19 : !s32i), !u32i loc(#loc41)
    %21 = cir.const #cir.int<30> : !s32i loc(#loc41)
    %22 = cir.shift(left, %20 : !u32i, %21 : !s32i) -> !u32i loc(#loc41)
    %23 = cir.call @rand() : () -> !s32i extra(#fn_attr) loc(#loc41)
    %24 = cir.cast(integral, %23 : !s32i), !u32i loc(#loc41)
    %25 = cir.const #cir.int<15> : !s32i loc(#loc41)
    %26 = cir.shift(left, %24 : !u32i, %25 : !s32i) -> !u32i loc(#loc41)
    %27 = cir.binop(xor, %22, %26) : !u32i loc(#loc41)
    %28 = cir.call @rand() : () -> !s32i extra(#fn_attr) loc(#loc41)
    %29 = cir.cast(integral, %28 : !s32i), !u32i loc(#loc41)
    %30 = cir.binop(xor, %27, %29) : !u32i loc(#loc41)
    %31 = cir.unary(minus, %30) : !u32i, !u32i loc(#loc41)
    %32 = cir.const #cir.int<1> : !s32i loc(#loc41)
    %33 = cir.cast(integral, %32 : !s32i), !u32i loc(#loc41)
    %34 = cir.binop(sub, %31, %33) : !u32i loc(#loc41)
    cir.br ^bb4(%34 : !u32i) loc(#loc41)
  ^bb4(%35: !u32i loc("CWE190_Integer_Overflow__int_rand_add_18.c":53:12)):  // 2 preds: ^bb2, ^bb3
    cir.br ^bb5 loc(#loc41)
  ^bb5:  // pred: ^bb4
    %36 = cir.cast(integral, %35 : !u32i), !s32i loc(#loc41)
    cir.store %36, %1 : !s32i, !cir.ptr<!s32i> loc(#loc91)
    cir.br ^bb6 loc(#loc92)
  ^bb6:  // pred: ^bb5
    cir.br ^bb7 loc(#loc93)
  ^bb7:  // pred: ^bb6
    %37 = cir.load %1 : !cir.ptr<!s32i>, !s32i loc(#loc47)
    %38 = cir.const #cir.int<2147483647> : !s32i loc(#loc48)
    %39 = cir.cmp(lt, %37, %38) : !s32i, !cir.bool loc(#loc94)
    cir.brcond %39 ^bb8, ^bb9 loc(#loc95)
  ^bb8:  // pred: ^bb7
    %40 = cir.load %1 : !cir.ptr<!s32i>, !s32i loc(#loc52)
    %41 = cir.const #cir.int<1> : !s32i loc(#loc34)
    %42 = cir.binop(add, %40, %41) nsw : !s32i loc(#loc52)
    cir.store %42, %0 : !s32i, !cir.ptr<!s32i> loc(#loc87)
    %43 = cir.load %0 : !cir.ptr<!s32i>, !s32i loc(#loc53)
    cir.call @printIntLine(%43) : (!s32i) -> () loc(#loc54)
    cir.br ^bb10 loc(#loc50)
  ^bb9:  // pred: ^bb7
    %44 = cir.get_global @".str" : !cir.ptr<!cir.array<!s8i x 54>> loc(#loc30)
    %45 = cir.cast(array_to_ptrdecay, %44 : !cir.ptr<!cir.array<!s8i x 54>>), !cir.ptr<!s8i> loc(#loc30)
    cir.call @printLine(%45) : (!cir.ptr<!s8i>) -> () loc(#loc55)
    cir.br ^bb10 loc(#loc46)
  ^bb10:  // 2 preds: ^bb8, ^bb9
    cir.br ^bb11 loc(#loc46)
  ^bb11:  // pred: ^bb10
    cir.return loc(#loc32)
  } loc(#loc86)
  cir.func no_proto internal private @goodG2B() extra(#fn_attr1) {
    %0 = cir.alloca !s32i, !cir.ptr<!s32i>, ["data"] {alignment = 4 : i64} loc(#loc97)
    %1 = cir.alloca !s32i, !cir.ptr<!s32i>, ["result", init] {alignment = 4 : i64} loc(#loc98)
    %2 = cir.const #cir.int<0> : !s32i loc(#loc62)
    cir.store %2, %0 : !s32i, !cir.ptr<!s32i> loc(#loc99)
    cir.br ^bb1 loc(#loc100)
  ^bb1:  // pred: ^bb0
    %3 = cir.const #cir.int<2> : !s32i loc(#loc66)
    cir.store %3, %0 : !s32i, !cir.ptr<!s32i> loc(#loc101)
    cir.br ^bb2 loc(#loc102)
  ^bb2:  // pred: ^bb1
    %4 = cir.load %0 : !cir.ptr<!s32i>, !s32i loc(#loc70)
    %5 = cir.const #cir.int<1> : !s32i loc(#loc61)
    %6 = cir.binop(add, %4, %5) nsw : !s32i loc(#loc70)
    cir.store %6, %1 : !s32i, !cir.ptr<!s32i> loc(#loc98)
    %7 = cir.load %1 : !cir.ptr<!s32i>, !s32i loc(#loc71)
    cir.call @printIntLine(%7) : (!s32i) -> () loc(#loc72)
    cir.return loc(#loc57)
  } loc(#loc96)
} loc(#loc)
#loc = loc("/home/ladisgin/git_proj/juliet-c/testcases/CWE190_Integer_Overflow/s04/CWE190_Integer_Overflow__int_rand_add_18.c":0:0)
#loc1 = loc("/usr/include/stdlib.h":573:1)
#loc2 = loc("/usr/include/stdlib.h":573:24)
#loc3 = loc("../../../testcasesupport/std_testcase_io.h":18:1)
#loc4 = loc("../../../testcasesupport/std_testcase_io.h":18:33)
#loc5 = loc("CWE190_Integer_Overflow__int_rand_add_18.c":22:1)
#loc6 = loc("CWE190_Integer_Overflow__int_rand_add_18.c":38:1)
#loc7 = loc("CWE190_Integer_Overflow__int_rand_add_18.c":24:5)
#loc8 = loc("CWE190_Integer_Overflow__int_rand_add_18.c":24:9)
#loc9 = loc("CWE190_Integer_Overflow__int_rand_add_18.c":35:9)
#loc10 = loc("CWE190_Integer_Overflow__int_rand_add_18.c":35:29)
#loc11 = loc("CWE190_Integer_Overflow__int_rand_add_18.c":26:12)
#loc12 = loc("CWE190_Integer_Overflow__int_rand_add_18.c":26:5)
#loc13 = loc("CWE190_Integer_Overflow__int_rand_add_18.c":27:5)
#loc14 = loc("CWE190_Integer_Overflow__int_rand_add_18.c":27:10)
#loc16 = loc("CWE190_Integer_Overflow__int_rand_add_18.c":30:5)
#loc17 = loc("CWE190_Integer_Overflow__int_rand_add_18.c":31:5)
#loc18 = loc("CWE190_Integer_Overflow__int_rand_add_18.c":31:10)
#loc19 = loc("CWE190_Integer_Overflow__int_rand_add_18.c":35:22)
#loc20 = loc("CWE190_Integer_Overflow__int_rand_add_18.c":36:22)
#loc21 = loc("CWE190_Integer_Overflow__int_rand_add_18.c":36:9)
#loc22 = loc("CWE190_Integer_Overflow__int_rand_add_18.c":87:1)
#loc23 = loc("CWE190_Integer_Overflow__int_rand_add_18.c":91:1)
#loc24 = loc("CWE190_Integer_Overflow__int_rand_add_18.c":89:5)
#loc25 = loc("CWE190_Integer_Overflow__int_rand_add_18.c":89:13)
#loc26 = loc("CWE190_Integer_Overflow__int_rand_add_18.c":90:5)
#loc27 = loc("CWE190_Integer_Overflow__int_rand_add_18.c":90:13)
#loc28 = loc("../../../testcasesupport/std_testcase_io.h":14:1)
#loc29 = loc("../../../testcasesupport/std_testcase_io.h":14:33)
#loc30 = loc("CWE190_Integer_Overflow__int_rand_add_18.c":64:19)
#loc31 = loc("CWE190_Integer_Overflow__int_rand_add_18.c":45:1)
#loc32 = loc("CWE190_Integer_Overflow__int_rand_add_18.c":66:1)
#loc33 = loc("CWE190_Integer_Overflow__int_rand_add_18.c":59:9)
#loc34 = loc("CWE190_Integer_Overflow__int_rand_add_18.c":59:29)
#loc35 = loc("CWE190_Integer_Overflow__int_rand_add_18.c":47:5)
#loc36 = loc("CWE190_Integer_Overflow__int_rand_add_18.c":47:9)
#loc37 = loc("CWE190_Integer_Overflow__int_rand_add_18.c":49:12)
#loc38 = loc("CWE190_Integer_Overflow__int_rand_add_18.c":49:5)
#loc39 = loc("CWE190_Integer_Overflow__int_rand_add_18.c":50:5)
#loc40 = loc("CWE190_Integer_Overflow__int_rand_add_18.c":50:10)
#loc42 = loc("CWE190_Integer_Overflow__int_rand_add_18.c":53:5)
#loc43 = loc("CWE190_Integer_Overflow__int_rand_add_18.c":54:5)
#loc44 = loc("CWE190_Integer_Overflow__int_rand_add_18.c":54:10)
#loc45 = loc("CWE190_Integer_Overflow__int_rand_add_18.c":57:5)
#loc46 = loc("CWE190_Integer_Overflow__int_rand_add_18.c":65:5)
#loc47 = loc("CWE190_Integer_Overflow__int_rand_add_18.c":57:9)
#loc48 = loc("CWE190_Integer_Overflow__int_rand_add_18.c":57:16)
#loc49 = loc("CWE190_Integer_Overflow__int_rand_add_18.c":58:5)
#loc50 = loc("CWE190_Integer_Overflow__int_rand_add_18.c":61:5)
#loc51 = loc("CWE190_Integer_Overflow__int_rand_add_18.c":63:5)
#loc52 = loc("CWE190_Integer_Overflow__int_rand_add_18.c":59:22)
#loc53 = loc("CWE190_Integer_Overflow__int_rand_add_18.c":60:22)
#loc54 = loc("CWE190_Integer_Overflow__int_rand_add_18.c":60:9)
#loc55 = loc("CWE190_Integer_Overflow__int_rand_add_18.c":64:9)
#loc56 = loc("CWE190_Integer_Overflow__int_rand_add_18.c":69:1)
#loc57 = loc("CWE190_Integer_Overflow__int_rand_add_18.c":85:1)
#loc58 = loc("CWE190_Integer_Overflow__int_rand_add_18.c":71:5)
#loc59 = loc("CWE190_Integer_Overflow__int_rand_add_18.c":71:9)
#loc60 = loc("CWE190_Integer_Overflow__int_rand_add_18.c":82:9)
#loc61 = loc("CWE190_Integer_Overflow__int_rand_add_18.c":82:29)
#loc62 = loc("CWE190_Integer_Overflow__int_rand_add_18.c":73:12)
#loc63 = loc("CWE190_Integer_Overflow__int_rand_add_18.c":73:5)
#loc64 = loc("CWE190_Integer_Overflow__int_rand_add_18.c":74:5)
#loc65 = loc("CWE190_Integer_Overflow__int_rand_add_18.c":74:10)
#loc66 = loc("CWE190_Integer_Overflow__int_rand_add_18.c":77:12)
#loc67 = loc("CWE190_Integer_Overflow__int_rand_add_18.c":77:5)
#loc68 = loc("CWE190_Integer_Overflow__int_rand_add_18.c":78:5)
#loc69 = loc("CWE190_Integer_Overflow__int_rand_add_18.c":78:10)
#loc70 = loc("CWE190_Integer_Overflow__int_rand_add_18.c":82:22)
#loc71 = loc("CWE190_Integer_Overflow__int_rand_add_18.c":83:22)
#loc72 = loc("CWE190_Integer_Overflow__int_rand_add_18.c":83:9)
#loc73 = loc(fused[#loc1, #loc2])
#loc74 = loc(fused[#loc3, #loc4])
#loc75 = loc(fused[#loc5, #loc6])
#loc76 = loc(fused[#loc7, #loc8])
#loc77 = loc(fused[#loc9, #loc10])
#loc78 = loc(fused[#loc12, #loc11])
#loc79 = loc(fused[#loc13, #loc14])
#loc80 = loc(fused[#loc16, #loc15])
#loc81 = loc(fused[#loc17, #loc18])
#loc82 = loc(fused[#loc22, #loc23])
#loc83 = loc(fused[#loc24, #loc25])
#loc84 = loc(fused[#loc26, #loc27])
#loc85 = loc(fused[#loc28, #loc29])
#loc86 = loc(fused[#loc31, #loc32])
#loc87 = loc(fused[#loc33, #loc34])
#loc88 = loc(fused[#loc35, #loc36])
#loc89 = loc(fused[#loc38, #loc37])
#loc90 = loc(fused[#loc39, #loc40])
#loc91 = loc(fused[#loc42, #loc41])
#loc92 = loc(fused[#loc43, #loc44])
#loc93 = loc(fused[#loc45, #loc46])
#loc94 = loc(fused[#loc47, #loc48])
#loc95 = loc(fused[#loc49, #loc50, #loc51, #loc46])
#loc96 = loc(fused[#loc56, #loc57])
#loc97 = loc(fused[#loc58, #loc59])
#loc98 = loc(fused[#loc60, #loc61])
#loc99 = loc(fused[#loc63, #loc62])
#loc100 = loc(fused[#loc64, #loc65])
#loc101 = loc(fused[#loc67, #loc66])
#loc102 = loc(fused[#loc68, #loc69])
