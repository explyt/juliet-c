!s32i = !cir.int<s, 32>
!s8i = !cir.int<s, 8>
!void = !cir.void
#false = #cir.bool<false> : !cir.bool
#fn_attr = #cir<extra({inline = #cir.inline<no>, nothrow = #cir.nothrow, optnone = #cir.optnone})>
#true = #cir.bool<true> : !cir.bool
module @"/home/ladisgin/git_proj/test_projects/juliet-c/testcases/CWE127_Buffer_Underread/s02/CWE127_Buffer_Underread__CWE839_negative_04.c" attributes {cir.lang = #cir.lang<c>, cir.sob = #cir.signed_overflow_behavior<undefined>, cir.triple = "x86_64-unknown-linux-gnu", dlti.dl_spec = #dlti.dl_spec<#dlti.dl_entry<i1, dense<8> : vector<2xi64>>, #dlti.dl_entry<i16, dense<16> : vector<2xi64>>, #dlti.dl_entry<i8, dense<8> : vector<2xi64>>, #dlti.dl_entry<i32, dense<32> : vector<2xi64>>, #dlti.dl_entry<f16, dense<16> : vector<2xi64>>, #dlti.dl_entry<f128, dense<128> : vector<2xi64>>, #dlti.dl_entry<!llvm.ptr<270>, dense<32> : vector<4xi64>>, #dlti.dl_entry<f64, dense<64> : vector<2xi64>>, #dlti.dl_entry<!llvm.ptr<271>, dense<32> : vector<4xi64>>, #dlti.dl_entry<!llvm.ptr<272>, dense<64> : vector<4xi64>>, #dlti.dl_entry<i64, dense<64> : vector<2xi64>>, #dlti.dl_entry<i128, dense<128> : vector<2xi64>>, #dlti.dl_entry<f80, dense<128> : vector<2xi64>>, #dlti.dl_entry<!llvm.ptr, dense<64> : vector<4xi64>>, #dlti.dl_entry<"dlti.endianness", "little">, #dlti.dl_entry<"dlti.stack_alignment", 128 : i64>>, llvm.data_layout = "e-m:e-p270:32:32-p271:32:32-p272:64:64-i64:64-i128:128-f80:128-n8:16:32:64-S128"} {
  cir.func private  @printIntLine(!s32i) loc(#loc206)
  cir.func private  @printLine(!cir.ptr<!s8i>) loc(#loc207)
  cir.global "private"  constant internal dsolocal @".str" = #cir.const_array<"ERROR: Array index is too big.\00" : !cir.array<!s8i x 31>> : !cir.array<!s8i x 31> {alignment = 1 : i64} loc(#loc5)
  cir.func no_proto  @CWE127_Buffer_Underread__CWE839_negative_04_bad() extra(#fn_attr) {
    %0 = cir.alloca !s32i, !cir.ptr<!s32i>, ["data"] {alignment = 4 : i64} loc(#loc209)
    %1 = cir.const #cir.int<1> : !s32i loc(#loc10)
    %2 = cir.unary(minus, %1) : !s32i, !s32i loc(#loc11)
    cir.store %2, %0 : !s32i, !cir.ptr<!s32i> loc(#loc210)
    cir.scope {
      %3 = cir.const #cir.int<1> : !s32i loc(#loc15)
      %4 = cir.cast(int_to_bool, %3 : !s32i), !cir.bool loc(#loc15)
      cir.if %4 {
        %5 = cir.const #cir.int<5> : !s32i loc(#loc17)
        %6 = cir.unary(minus, %5) : !s32i, !s32i loc(#loc18)
        cir.store %6, %0 : !s32i, !cir.ptr<!s32i> loc(#loc213)
      } loc(#loc212)
    } loc(#loc211)
    cir.scope {
      %3 = cir.const #cir.int<1> : !s32i loc(#loc22)
      %4 = cir.cast(int_to_bool, %3 : !s32i), !cir.bool loc(#loc22)
      cir.if %4 {
        cir.scope {
          %5 = cir.alloca !cir.array<!s32i x 10>, !cir.ptr<!cir.array<!s32i x 10>>, ["buffer"] {alignment = 16 : i64} loc(#loc217)
          %6 = cir.const #cir.zero : !cir.array<!s32i x 10> loc(#loc217)
          cir.store %6, %5 : !cir.array<!s32i x 10>, !cir.ptr<!cir.array<!s32i x 10>> loc(#loc217)
          cir.scope {
            %7 = cir.load %0 : !cir.ptr<!s32i>, !s32i loc(#loc30)
            %8 = cir.const #cir.int<10> : !s32i loc(#loc31)
            %9 = cir.cmp(lt, %7, %8) : !s32i, !s32i loc(#loc219)
            %10 = cir.cast(int_to_bool, %9 : !s32i), !cir.bool loc(#loc32)
            cir.if %10 {
              %11 = cir.load %0 : !cir.ptr<!s32i>, !s32i loc(#loc36)
              %12 = cir.cast(array_to_ptrdecay, %5 : !cir.ptr<!cir.array<!s32i x 10>>), !cir.ptr<!s32i> loc(#loc37)
              %13 = cir.ptr_stride(%12 : !cir.ptr<!s32i>, %11 : !s32i), !cir.ptr<!s32i> loc(#loc37)
              %14 = cir.load %13 : !cir.ptr<!s32i>, !s32i loc(#loc37)
              cir.call @printIntLine(%14) : (!s32i) -> () loc(#loc38)
            } else {
              %11 = cir.get_global @".str" : !cir.ptr<!cir.array<!s8i x 31>> loc(#loc5)
              %12 = cir.cast(array_to_ptrdecay, %11 : !cir.ptr<!cir.array<!s8i x 31>>), !cir.ptr<!s8i> loc(#loc5)
              cir.call @printLine(%12) : (!cir.ptr<!s8i>) -> () loc(#loc39)
            } loc(#loc220)
          } loc(#loc218)
        } loc(#loc216)
      } loc(#loc215)
    } loc(#loc214)
    cir.return loc(#loc7)
  } loc(#loc208)
  cir.func no_proto  @CWE127_Buffer_Underread__CWE839_negative_04_good() extra(#fn_attr) {
    %0 = cir.get_global @goodB2G1 : !cir.ptr<!cir.func<!void ()>> loc(#loc222)
    cir.call %0() : (!cir.ptr<!cir.func<!void ()>>) -> () loc(#loc42)
    %1 = cir.get_global @goodB2G2 : !cir.ptr<!cir.func<!void ()>> loc(#loc223)
    cir.call %1() : (!cir.ptr<!cir.func<!void ()>>) -> () loc(#loc44)
    %2 = cir.get_global @goodG2B1 : !cir.ptr<!cir.func<!void ()>> loc(#loc224)
    cir.call %2() : (!cir.ptr<!cir.func<!void ()>>) -> () loc(#loc46)
    %3 = cir.get_global @goodG2B2 : !cir.ptr<!cir.func<!void ()>> loc(#loc225)
    cir.call %3() : (!cir.ptr<!cir.func<!void ()>>) -> () loc(#loc48)
    cir.return loc(#loc41)
  } loc(#loc221)
  cir.global "private"  constant internal dsolocal @".str1" = #cir.const_array<"Benign, fixed string\00" : !cir.array<!s8i x 21>> : !cir.array<!s8i x 21> {alignment = 1 : i64} loc(#loc50)
  cir.global "private"  constant internal dsolocal @".str2" = #cir.const_array<"ERROR: Array index is out-of-bounds\00" : !cir.array<!s8i x 36>> : !cir.array<!s8i x 36> {alignment = 1 : i64} loc(#loc51)
  cir.func no_proto internal private  @goodB2G1() extra(#fn_attr) {
    %0 = cir.alloca !s32i, !cir.ptr<!s32i>, ["data"] {alignment = 4 : i64} loc(#loc227)
    %1 = cir.const #cir.int<1> : !s32i loc(#loc56)
    %2 = cir.unary(minus, %1) : !s32i, !s32i loc(#loc57)
    cir.store %2, %0 : !s32i, !cir.ptr<!s32i> loc(#loc228)
    cir.scope {
      %3 = cir.const #cir.int<1> : !s32i loc(#loc61)
      %4 = cir.cast(int_to_bool, %3 : !s32i), !cir.bool loc(#loc61)
      cir.if %4 {
        %5 = cir.const #cir.int<5> : !s32i loc(#loc63)
        %6 = cir.unary(minus, %5) : !s32i, !s32i loc(#loc64)
        cir.store %6, %0 : !s32i, !cir.ptr<!s32i> loc(#loc231)
      } loc(#loc230)
    } loc(#loc229)
    cir.scope {
      %3 = cir.const #cir.int<0> : !s32i loc(#loc68)
      %4 = cir.cast(int_to_bool, %3 : !s32i), !cir.bool loc(#loc68)
      cir.if %4 {
        %5 = cir.get_global @".str1" : !cir.ptr<!cir.array<!s8i x 21>> loc(#loc50)
        %6 = cir.cast(array_to_ptrdecay, %5 : !cir.ptr<!cir.array<!s8i x 21>>), !cir.ptr<!s8i> loc(#loc50)
        cir.call @printLine(%6) : (!cir.ptr<!s8i>) -> () loc(#loc72)
      } else {
        cir.scope {
          %5 = cir.alloca !cir.array<!s32i x 10>, !cir.ptr<!cir.array<!s32i x 10>>, ["buffer"] {alignment = 16 : i64} loc(#loc235)
          %6 = cir.const #cir.zero : !cir.array<!s32i x 10> loc(#loc235)
          cir.store %6, %5 : !cir.array<!s32i x 10>, !cir.ptr<!cir.array<!s32i x 10>> loc(#loc235)
          cir.scope {
            %7 = cir.load %0 : !cir.ptr<!s32i>, !s32i loc(#loc79)
            %8 = cir.const #cir.int<0> : !s32i loc(#loc80)
            %9 = cir.cmp(ge, %7, %8) : !s32i, !s32i loc(#loc237)
            %10 = cir.cast(int_to_bool, %9 : !s32i), !cir.bool loc(#loc81)
            %11 = cir.ternary(%10, true {
              %12 = cir.load %0 : !cir.ptr<!s32i>, !s32i loc(#loc83)
              %13 = cir.const #cir.int<10> : !s32i loc(#loc84)
              %14 = cir.cmp(lt, %12, %13) : !s32i, !s32i loc(#loc238)
              %15 = cir.cast(int_to_bool, %14 : !s32i), !cir.bool loc(#loc86)
              %16 = cir.ternary(%15, true {
                %17 = cir.const #true loc(#loc82)
                cir.yield %17 : !cir.bool loc(#loc82)
              }, false {
                %17 = cir.const #false loc(#loc82)
                cir.yield %17 : !cir.bool loc(#loc82)
              }) : (!cir.bool) -> !cir.bool loc(#loc82)
              cir.yield %16 : !cir.bool loc(#loc82)
            }, false {
              %12 = cir.const #false loc(#loc82)
              cir.yield %12 : !cir.bool loc(#loc82)
            }) : (!cir.bool) -> !cir.bool loc(#loc82)
            cir.if %11 {
              %12 = cir.load %0 : !cir.ptr<!s32i>, !s32i loc(#loc90)
              %13 = cir.cast(array_to_ptrdecay, %5 : !cir.ptr<!cir.array<!s32i x 10>>), !cir.ptr<!s32i> loc(#loc91)
              %14 = cir.ptr_stride(%13 : !cir.ptr<!s32i>, %12 : !s32i), !cir.ptr<!s32i> loc(#loc91)
              %15 = cir.load %14 : !cir.ptr<!s32i>, !s32i loc(#loc91)
              cir.call @printIntLine(%15) : (!s32i) -> () loc(#loc92)
            } else {
              %12 = cir.get_global @".str2" : !cir.ptr<!cir.array<!s8i x 36>> loc(#loc51)
              %13 = cir.cast(array_to_ptrdecay, %12 : !cir.ptr<!cir.array<!s8i x 36>>), !cir.ptr<!s8i> loc(#loc51)
              cir.call @printLine(%13) : (!cir.ptr<!s8i>) -> () loc(#loc93)
            } loc(#loc239)
          } loc(#loc236)
        } loc(#loc234)
      } loc(#loc233)
    } loc(#loc232)
    cir.return loc(#loc53)
  } loc(#loc226)
  cir.func no_proto internal private  @goodB2G2() extra(#fn_attr) {
    %0 = cir.alloca !s32i, !cir.ptr<!s32i>, ["data"] {alignment = 4 : i64} loc(#loc241)
    %1 = cir.const #cir.int<1> : !s32i loc(#loc98)
    %2 = cir.unary(minus, %1) : !s32i, !s32i loc(#loc99)
    cir.store %2, %0 : !s32i, !cir.ptr<!s32i> loc(#loc242)
    cir.scope {
      %3 = cir.const #cir.int<1> : !s32i loc(#loc103)
      %4 = cir.cast(int_to_bool, %3 : !s32i), !cir.bool loc(#loc103)
      cir.if %4 {
        %5 = cir.const #cir.int<5> : !s32i loc(#loc105)
        %6 = cir.unary(minus, %5) : !s32i, !s32i loc(#loc106)
        cir.store %6, %0 : !s32i, !cir.ptr<!s32i> loc(#loc245)
      } loc(#loc244)
    } loc(#loc243)
    cir.scope {
      %3 = cir.const #cir.int<1> : !s32i loc(#loc110)
      %4 = cir.cast(int_to_bool, %3 : !s32i), !cir.bool loc(#loc110)
      cir.if %4 {
        cir.scope {
          %5 = cir.alloca !cir.array<!s32i x 10>, !cir.ptr<!cir.array<!s32i x 10>>, ["buffer"] {alignment = 16 : i64} loc(#loc249)
          %6 = cir.const #cir.zero : !cir.array<!s32i x 10> loc(#loc249)
          cir.store %6, %5 : !cir.array<!s32i x 10>, !cir.ptr<!cir.array<!s32i x 10>> loc(#loc249)
          cir.scope {
            %7 = cir.load %0 : !cir.ptr<!s32i>, !s32i loc(#loc118)
            %8 = cir.const #cir.int<0> : !s32i loc(#loc119)
            %9 = cir.cmp(ge, %7, %8) : !s32i, !s32i loc(#loc251)
            %10 = cir.cast(int_to_bool, %9 : !s32i), !cir.bool loc(#loc120)
            %11 = cir.ternary(%10, true {
              %12 = cir.load %0 : !cir.ptr<!s32i>, !s32i loc(#loc122)
              %13 = cir.const #cir.int<10> : !s32i loc(#loc123)
              %14 = cir.cmp(lt, %12, %13) : !s32i, !s32i loc(#loc252)
              %15 = cir.cast(int_to_bool, %14 : !s32i), !cir.bool loc(#loc125)
              %16 = cir.ternary(%15, true {
                %17 = cir.const #true loc(#loc121)
                cir.yield %17 : !cir.bool loc(#loc121)
              }, false {
                %17 = cir.const #false loc(#loc121)
                cir.yield %17 : !cir.bool loc(#loc121)
              }) : (!cir.bool) -> !cir.bool loc(#loc121)
              cir.yield %16 : !cir.bool loc(#loc121)
            }, false {
              %12 = cir.const #false loc(#loc121)
              cir.yield %12 : !cir.bool loc(#loc121)
            }) : (!cir.bool) -> !cir.bool loc(#loc121)
            cir.if %11 {
              %12 = cir.load %0 : !cir.ptr<!s32i>, !s32i loc(#loc129)
              %13 = cir.cast(array_to_ptrdecay, %5 : !cir.ptr<!cir.array<!s32i x 10>>), !cir.ptr<!s32i> loc(#loc130)
              %14 = cir.ptr_stride(%13 : !cir.ptr<!s32i>, %12 : !s32i), !cir.ptr<!s32i> loc(#loc130)
              %15 = cir.load %14 : !cir.ptr<!s32i>, !s32i loc(#loc130)
              cir.call @printIntLine(%15) : (!s32i) -> () loc(#loc131)
            } else {
              %12 = cir.get_global @".str2" : !cir.ptr<!cir.array<!s8i x 36>> loc(#loc132)
              %13 = cir.cast(array_to_ptrdecay, %12 : !cir.ptr<!cir.array<!s8i x 36>>), !cir.ptr<!s8i> loc(#loc132)
              cir.call @printLine(%13) : (!cir.ptr<!s8i>) -> () loc(#loc133)
            } loc(#loc253)
          } loc(#loc250)
        } loc(#loc248)
      } loc(#loc247)
    } loc(#loc246)
    cir.return loc(#loc95)
  } loc(#loc240)
  cir.func no_proto internal private  @goodG2B1() extra(#fn_attr) {
    %0 = cir.alloca !s32i, !cir.ptr<!s32i>, ["data"] {alignment = 4 : i64} loc(#loc255)
    %1 = cir.const #cir.int<1> : !s32i loc(#loc138)
    %2 = cir.unary(minus, %1) : !s32i, !s32i loc(#loc139)
    cir.store %2, %0 : !s32i, !cir.ptr<!s32i> loc(#loc256)
    cir.scope {
      %3 = cir.const #cir.int<0> : !s32i loc(#loc143)
      %4 = cir.cast(int_to_bool, %3 : !s32i), !cir.bool loc(#loc143)
      cir.if %4 {
        %5 = cir.get_global @".str1" : !cir.ptr<!cir.array<!s8i x 21>> loc(#loc147)
        %6 = cir.cast(array_to_ptrdecay, %5 : !cir.ptr<!cir.array<!s8i x 21>>), !cir.ptr<!s8i> loc(#loc147)
        cir.call @printLine(%6) : (!cir.ptr<!s8i>) -> () loc(#loc148)
      } else {
        %5 = cir.const #cir.int<7> : !s32i loc(#loc149)
        cir.store %5, %0 : !s32i, !cir.ptr<!s32i> loc(#loc259)
      } loc(#loc258)
    } loc(#loc257)
    cir.scope {
      %3 = cir.const #cir.int<1> : !s32i loc(#loc153)
      %4 = cir.cast(int_to_bool, %3 : !s32i), !cir.bool loc(#loc153)
      cir.if %4 {
        cir.scope {
          %5 = cir.alloca !cir.array<!s32i x 10>, !cir.ptr<!cir.array<!s32i x 10>>, ["buffer"] {alignment = 16 : i64} loc(#loc263)
          %6 = cir.const #cir.zero : !cir.array<!s32i x 10> loc(#loc263)
          cir.store %6, %5 : !cir.array<!s32i x 10>, !cir.ptr<!cir.array<!s32i x 10>> loc(#loc263)
          cir.scope {
            %7 = cir.load %0 : !cir.ptr<!s32i>, !s32i loc(#loc161)
            %8 = cir.const #cir.int<10> : !s32i loc(#loc162)
            %9 = cir.cmp(lt, %7, %8) : !s32i, !s32i loc(#loc265)
            %10 = cir.cast(int_to_bool, %9 : !s32i), !cir.bool loc(#loc163)
            cir.if %10 {
              %11 = cir.load %0 : !cir.ptr<!s32i>, !s32i loc(#loc167)
              %12 = cir.cast(array_to_ptrdecay, %5 : !cir.ptr<!cir.array<!s32i x 10>>), !cir.ptr<!s32i> loc(#loc168)
              %13 = cir.ptr_stride(%12 : !cir.ptr<!s32i>, %11 : !s32i), !cir.ptr<!s32i> loc(#loc168)
              %14 = cir.load %13 : !cir.ptr<!s32i>, !s32i loc(#loc168)
              cir.call @printIntLine(%14) : (!s32i) -> () loc(#loc169)
            } else {
              %11 = cir.get_global @".str" : !cir.ptr<!cir.array<!s8i x 31>> loc(#loc170)
              %12 = cir.cast(array_to_ptrdecay, %11 : !cir.ptr<!cir.array<!s8i x 31>>), !cir.ptr<!s8i> loc(#loc170)
              cir.call @printLine(%12) : (!cir.ptr<!s8i>) -> () loc(#loc171)
            } loc(#loc266)
          } loc(#loc264)
        } loc(#loc262)
      } loc(#loc261)
    } loc(#loc260)
    cir.return loc(#loc135)
  } loc(#loc254)
  cir.func no_proto internal private  @goodG2B2() extra(#fn_attr) {
    %0 = cir.alloca !s32i, !cir.ptr<!s32i>, ["data"] {alignment = 4 : i64} loc(#loc268)
    %1 = cir.const #cir.int<1> : !s32i loc(#loc176)
    %2 = cir.unary(minus, %1) : !s32i, !s32i loc(#loc177)
    cir.store %2, %0 : !s32i, !cir.ptr<!s32i> loc(#loc269)
    cir.scope {
      %3 = cir.const #cir.int<1> : !s32i loc(#loc181)
      %4 = cir.cast(int_to_bool, %3 : !s32i), !cir.bool loc(#loc181)
      cir.if %4 {
        %5 = cir.const #cir.int<7> : !s32i loc(#loc183)
        cir.store %5, %0 : !s32i, !cir.ptr<!s32i> loc(#loc272)
      } loc(#loc271)
    } loc(#loc270)
    cir.scope {
      %3 = cir.const #cir.int<1> : !s32i loc(#loc187)
      %4 = cir.cast(int_to_bool, %3 : !s32i), !cir.bool loc(#loc187)
      cir.if %4 {
        cir.scope {
          %5 = cir.alloca !cir.array<!s32i x 10>, !cir.ptr<!cir.array<!s32i x 10>>, ["buffer"] {alignment = 16 : i64} loc(#loc276)
          %6 = cir.const #cir.zero : !cir.array<!s32i x 10> loc(#loc276)
          cir.store %6, %5 : !cir.array<!s32i x 10>, !cir.ptr<!cir.array<!s32i x 10>> loc(#loc276)
          cir.scope {
            %7 = cir.load %0 : !cir.ptr<!s32i>, !s32i loc(#loc195)
            %8 = cir.const #cir.int<10> : !s32i loc(#loc196)
            %9 = cir.cmp(lt, %7, %8) : !s32i, !s32i loc(#loc278)
            %10 = cir.cast(int_to_bool, %9 : !s32i), !cir.bool loc(#loc197)
            cir.if %10 {
              %11 = cir.load %0 : !cir.ptr<!s32i>, !s32i loc(#loc201)
              %12 = cir.cast(array_to_ptrdecay, %5 : !cir.ptr<!cir.array<!s32i x 10>>), !cir.ptr<!s32i> loc(#loc202)
              %13 = cir.ptr_stride(%12 : !cir.ptr<!s32i>, %11 : !s32i), !cir.ptr<!s32i> loc(#loc202)
              %14 = cir.load %13 : !cir.ptr<!s32i>, !s32i loc(#loc202)
              cir.call @printIntLine(%14) : (!s32i) -> () loc(#loc203)
            } else {
              %11 = cir.get_global @".str" : !cir.ptr<!cir.array<!s8i x 31>> loc(#loc204)
              %12 = cir.cast(array_to_ptrdecay, %11 : !cir.ptr<!cir.array<!s8i x 31>>), !cir.ptr<!s8i> loc(#loc204)
              cir.call @printLine(%12) : (!cir.ptr<!s8i>) -> () loc(#loc205)
            } loc(#loc279)
          } loc(#loc277)
        } loc(#loc275)
      } loc(#loc274)
    } loc(#loc273)
    cir.return loc(#loc173)
  } loc(#loc267)
} loc(#loc)
#loc = loc("/home/ladisgin/git_proj/test_projects/juliet-c/testcases/CWE127_Buffer_Underread/s02/CWE127_Buffer_Underread__CWE839_negative_04.c":0:0)
#loc1 = loc("../../../testcasesupport/std_testcase_io.h":18:1)
#loc2 = loc("../../../testcasesupport/std_testcase_io.h":18:33)
#loc3 = loc("../../../testcasesupport/std_testcase_io.h":14:1)
#loc4 = loc("../../../testcasesupport/std_testcase_io.h":14:33)
#loc5 = loc("CWE127_Buffer_Underread__CWE839_negative_04.c":50:27)
#loc6 = loc("CWE127_Buffer_Underread__CWE839_negative_04.c":28:1)
#loc7 = loc("CWE127_Buffer_Underread__CWE839_negative_04.c":54:1)
#loc8 = loc("CWE127_Buffer_Underread__CWE839_negative_04.c":30:5)
#loc9 = loc("CWE127_Buffer_Underread__CWE839_negative_04.c":30:9)
#loc10 = loc("CWE127_Buffer_Underread__CWE839_negative_04.c":32:13)
#loc11 = loc("CWE127_Buffer_Underread__CWE839_negative_04.c":32:12)
#loc12 = loc("CWE127_Buffer_Underread__CWE839_negative_04.c":32:5)
#loc13 = loc("CWE127_Buffer_Underread__CWE839_negative_04.c":33:5)
#loc14 = loc("CWE127_Buffer_Underread__CWE839_negative_04.c":37:5)
#loc15 = loc("CWE127_Buffer_Underread__CWE839_negative_04.c":33:8)
#loc16 = loc("CWE127_Buffer_Underread__CWE839_negative_04.c":34:5)
#loc17 = loc("CWE127_Buffer_Underread__CWE839_negative_04.c":36:17)
#loc18 = loc("CWE127_Buffer_Underread__CWE839_negative_04.c":36:16)
#loc19 = loc("CWE127_Buffer_Underread__CWE839_negative_04.c":36:9)
#loc20 = loc("CWE127_Buffer_Underread__CWE839_negative_04.c":38:5)
#loc21 = loc("CWE127_Buffer_Underread__CWE839_negative_04.c":53:5)
#loc22 = loc("CWE127_Buffer_Underread__CWE839_negative_04.c":38:8)
#loc23 = loc("CWE127_Buffer_Underread__CWE839_negative_04.c":39:5)
#loc24 = loc("CWE127_Buffer_Underread__CWE839_negative_04.c":40:9)
#loc25 = loc("CWE127_Buffer_Underread__CWE839_negative_04.c":52:9)
#loc26 = loc("CWE127_Buffer_Underread__CWE839_negative_04.c":41:13)
#loc27 = loc("CWE127_Buffer_Underread__CWE839_negative_04.c":41:34)
#loc28 = loc("CWE127_Buffer_Underread__CWE839_negative_04.c":44:13)
#loc29 = loc("CWE127_Buffer_Underread__CWE839_negative_04.c":51:13)
#loc30 = loc("CWE127_Buffer_Underread__CWE839_negative_04.c":44:17)
#loc31 = loc("CWE127_Buffer_Underread__CWE839_negative_04.c":44:24)
#loc32 = loc("CWE127_Buffer_Underread__CWE839_negative_04.c":44:22)
#loc33 = loc("CWE127_Buffer_Underread__CWE839_negative_04.c":45:13)
#loc34 = loc("CWE127_Buffer_Underread__CWE839_negative_04.c":47:13)
#loc35 = loc("CWE127_Buffer_Underread__CWE839_negative_04.c":49:13)
#loc36 = loc("CWE127_Buffer_Underread__CWE839_negative_04.c":46:37)
#loc37 = loc("CWE127_Buffer_Underread__CWE839_negative_04.c":46:30)
#loc38 = loc("CWE127_Buffer_Underread__CWE839_negative_04.c":46:17)
#loc39 = loc("CWE127_Buffer_Underread__CWE839_negative_04.c":50:17)
#loc40 = loc("CWE127_Buffer_Underread__CWE839_negative_04.c":186:1)
#loc41 = loc("CWE127_Buffer_Underread__CWE839_negative_04.c":192:1)
#loc42 = loc("CWE127_Buffer_Underread__CWE839_negative_04.c":188:5)
#loc43 = loc("CWE127_Buffer_Underread__CWE839_negative_04.c":188:14)
#loc44 = loc("CWE127_Buffer_Underread__CWE839_negative_04.c":189:5)
#loc45 = loc("CWE127_Buffer_Underread__CWE839_negative_04.c":189:14)
#loc46 = loc("CWE127_Buffer_Underread__CWE839_negative_04.c":190:5)
#loc47 = loc("CWE127_Buffer_Underread__CWE839_negative_04.c":190:14)
#loc48 = loc("CWE127_Buffer_Underread__CWE839_negative_04.c":191:5)
#loc49 = loc("CWE127_Buffer_Underread__CWE839_negative_04.c":191:14)
#loc50 = loc("CWE127_Buffer_Underread__CWE839_negative_04.c":74:19)
#loc51 = loc("CWE127_Buffer_Underread__CWE839_negative_04.c":87:27)
#loc52 = loc("CWE127_Buffer_Underread__CWE839_negative_04.c":61:1)
#loc53 = loc("CWE127_Buffer_Underread__CWE839_negative_04.c":91:1)
#loc54 = loc("CWE127_Buffer_Underread__CWE839_negative_04.c":63:5)
#loc55 = loc("CWE127_Buffer_Underread__CWE839_negative_04.c":63:9)
#loc56 = loc("CWE127_Buffer_Underread__CWE839_negative_04.c":65:13)
#loc57 = loc("CWE127_Buffer_Underread__CWE839_negative_04.c":65:12)
#loc58 = loc("CWE127_Buffer_Underread__CWE839_negative_04.c":65:5)
#loc59 = loc("CWE127_Buffer_Underread__CWE839_negative_04.c":66:5)
#loc60 = loc("CWE127_Buffer_Underread__CWE839_negative_04.c":70:5)
#loc61 = loc("CWE127_Buffer_Underread__CWE839_negative_04.c":66:8)
#loc62 = loc("CWE127_Buffer_Underread__CWE839_negative_04.c":67:5)
#loc63 = loc("CWE127_Buffer_Underread__CWE839_negative_04.c":69:17)
#loc64 = loc("CWE127_Buffer_Underread__CWE839_negative_04.c":69:16)
#loc65 = loc("CWE127_Buffer_Underread__CWE839_negative_04.c":69:9)
#loc66 = loc("CWE127_Buffer_Underread__CWE839_negative_04.c":71:5)
#loc67 = loc("CWE127_Buffer_Underread__CWE839_negative_04.c":90:5)
#loc68 = loc("CWE127_Buffer_Underread__CWE839_negative_04.c":71:8)
#loc69 = loc("CWE127_Buffer_Underread__CWE839_negative_04.c":72:5)
#loc70 = loc("CWE127_Buffer_Underread__CWE839_negative_04.c":75:5)
#loc71 = loc("CWE127_Buffer_Underread__CWE839_negative_04.c":77:5)
#loc72 = loc("CWE127_Buffer_Underread__CWE839_negative_04.c":74:9)
#loc73 = loc("CWE127_Buffer_Underread__CWE839_negative_04.c":78:9)
#loc74 = loc("CWE127_Buffer_Underread__CWE839_negative_04.c":89:9)
#loc75 = loc("CWE127_Buffer_Underread__CWE839_negative_04.c":79:13)
#loc76 = loc("CWE127_Buffer_Underread__CWE839_negative_04.c":79:34)
#loc77 = loc("CWE127_Buffer_Underread__CWE839_negative_04.c":81:13)
#loc78 = loc("CWE127_Buffer_Underread__CWE839_negative_04.c":88:13)
#loc79 = loc("CWE127_Buffer_Underread__CWE839_negative_04.c":81:17)
#loc80 = loc("CWE127_Buffer_Underread__CWE839_negative_04.c":81:25)
#loc81 = loc("CWE127_Buffer_Underread__CWE839_negative_04.c":81:22)
#loc82 = loc("CWE127_Buffer_Underread__CWE839_negative_04.c":81:27)
#loc83 = loc("CWE127_Buffer_Underread__CWE839_negative_04.c":81:30)
#loc84 = loc("CWE127_Buffer_Underread__CWE839_negative_04.c":81:38)
#loc85 = loc("CWE127_Buffer_Underread__CWE839_negative_04.c":81:40)
#loc86 = loc("CWE127_Buffer_Underread__CWE839_negative_04.c":81:35)
#loc87 = loc("CWE127_Buffer_Underread__CWE839_negative_04.c":82:13)
#loc88 = loc("CWE127_Buffer_Underread__CWE839_negative_04.c":84:13)
#loc89 = loc("CWE127_Buffer_Underread__CWE839_negative_04.c":86:13)
#loc90 = loc("CWE127_Buffer_Underread__CWE839_negative_04.c":83:37)
#loc91 = loc("CWE127_Buffer_Underread__CWE839_negative_04.c":83:30)
#loc92 = loc("CWE127_Buffer_Underread__CWE839_negative_04.c":83:17)
#loc93 = loc("CWE127_Buffer_Underread__CWE839_negative_04.c":87:17)
#loc94 = loc("CWE127_Buffer_Underread__CWE839_negative_04.c":94:1)
#loc95 = loc("CWE127_Buffer_Underread__CWE839_negative_04.c":119:1)
#loc96 = loc("CWE127_Buffer_Underread__CWE839_negative_04.c":96:5)
#loc97 = loc("CWE127_Buffer_Underread__CWE839_negative_04.c":96:9)
#loc98 = loc("CWE127_Buffer_Underread__CWE839_negative_04.c":98:13)
#loc99 = loc("CWE127_Buffer_Underread__CWE839_negative_04.c":98:12)
#loc100 = loc("CWE127_Buffer_Underread__CWE839_negative_04.c":98:5)
#loc101 = loc("CWE127_Buffer_Underread__CWE839_negative_04.c":99:5)
#loc102 = loc("CWE127_Buffer_Underread__CWE839_negative_04.c":103:5)
#loc103 = loc("CWE127_Buffer_Underread__CWE839_negative_04.c":99:8)
#loc104 = loc("CWE127_Buffer_Underread__CWE839_negative_04.c":100:5)
#loc105 = loc("CWE127_Buffer_Underread__CWE839_negative_04.c":102:17)
#loc106 = loc("CWE127_Buffer_Underread__CWE839_negative_04.c":102:16)
#loc107 = loc("CWE127_Buffer_Underread__CWE839_negative_04.c":102:9)
#loc108 = loc("CWE127_Buffer_Underread__CWE839_negative_04.c":104:5)
#loc109 = loc("CWE127_Buffer_Underread__CWE839_negative_04.c":118:5)
#loc110 = loc("CWE127_Buffer_Underread__CWE839_negative_04.c":104:8)
#loc111 = loc("CWE127_Buffer_Underread__CWE839_negative_04.c":105:5)
#loc112 = loc("CWE127_Buffer_Underread__CWE839_negative_04.c":106:9)
#loc113 = loc("CWE127_Buffer_Underread__CWE839_negative_04.c":117:9)
#loc114 = loc("CWE127_Buffer_Underread__CWE839_negative_04.c":107:13)
#loc115 = loc("CWE127_Buffer_Underread__CWE839_negative_04.c":107:34)
#loc116 = loc("CWE127_Buffer_Underread__CWE839_negative_04.c":109:13)
#loc117 = loc("CWE127_Buffer_Underread__CWE839_negative_04.c":116:13)
#loc118 = loc("CWE127_Buffer_Underread__CWE839_negative_04.c":109:17)
#loc119 = loc("CWE127_Buffer_Underread__CWE839_negative_04.c":109:25)
#loc120 = loc("CWE127_Buffer_Underread__CWE839_negative_04.c":109:22)
#loc121 = loc("CWE127_Buffer_Underread__CWE839_negative_04.c":109:27)
#loc122 = loc("CWE127_Buffer_Underread__CWE839_negative_04.c":109:30)
#loc123 = loc("CWE127_Buffer_Underread__CWE839_negative_04.c":109:38)
#loc124 = loc("CWE127_Buffer_Underread__CWE839_negative_04.c":109:40)
#loc125 = loc("CWE127_Buffer_Underread__CWE839_negative_04.c":109:35)
#loc126 = loc("CWE127_Buffer_Underread__CWE839_negative_04.c":110:13)
#loc127 = loc("CWE127_Buffer_Underread__CWE839_negative_04.c":112:13)
#loc128 = loc("CWE127_Buffer_Underread__CWE839_negative_04.c":114:13)
#loc129 = loc("CWE127_Buffer_Underread__CWE839_negative_04.c":111:37)
#loc130 = loc("CWE127_Buffer_Underread__CWE839_negative_04.c":111:30)
#loc131 = loc("CWE127_Buffer_Underread__CWE839_negative_04.c":111:17)
#loc132 = loc("CWE127_Buffer_Underread__CWE839_negative_04.c":115:27)
#loc133 = loc("CWE127_Buffer_Underread__CWE839_negative_04.c":115:17)
#loc134 = loc("CWE127_Buffer_Underread__CWE839_negative_04.c":122:1)
#loc135 = loc("CWE127_Buffer_Underread__CWE839_negative_04.c":154:1)
#loc136 = loc("CWE127_Buffer_Underread__CWE839_negative_04.c":124:5)
#loc137 = loc("CWE127_Buffer_Underread__CWE839_negative_04.c":124:9)
#loc138 = loc("CWE127_Buffer_Underread__CWE839_negative_04.c":126:13)
#loc139 = loc("CWE127_Buffer_Underread__CWE839_negative_04.c":126:12)
#loc140 = loc("CWE127_Buffer_Underread__CWE839_negative_04.c":126:5)
#loc141 = loc("CWE127_Buffer_Underread__CWE839_negative_04.c":127:5)
#loc142 = loc("CWE127_Buffer_Underread__CWE839_negative_04.c":137:5)
#loc143 = loc("CWE127_Buffer_Underread__CWE839_negative_04.c":127:8)
#loc144 = loc("CWE127_Buffer_Underread__CWE839_negative_04.c":128:5)
#loc145 = loc("CWE127_Buffer_Underread__CWE839_negative_04.c":131:5)
#loc146 = loc("CWE127_Buffer_Underread__CWE839_negative_04.c":133:5)
#loc147 = loc("CWE127_Buffer_Underread__CWE839_negative_04.c":130:19)
#loc148 = loc("CWE127_Buffer_Underread__CWE839_negative_04.c":130:9)
#loc149 = loc("CWE127_Buffer_Underread__CWE839_negative_04.c":136:16)
#loc150 = loc("CWE127_Buffer_Underread__CWE839_negative_04.c":136:9)
#loc151 = loc("CWE127_Buffer_Underread__CWE839_negative_04.c":138:5)
#loc152 = loc("CWE127_Buffer_Underread__CWE839_negative_04.c":153:5)
#loc153 = loc("CWE127_Buffer_Underread__CWE839_negative_04.c":138:8)
#loc154 = loc("CWE127_Buffer_Underread__CWE839_negative_04.c":139:5)
#loc155 = loc("CWE127_Buffer_Underread__CWE839_negative_04.c":140:9)
#loc156 = loc("CWE127_Buffer_Underread__CWE839_negative_04.c":152:9)
#loc157 = loc("CWE127_Buffer_Underread__CWE839_negative_04.c":141:13)
#loc158 = loc("CWE127_Buffer_Underread__CWE839_negative_04.c":141:34)
#loc159 = loc("CWE127_Buffer_Underread__CWE839_negative_04.c":144:13)
#loc160 = loc("CWE127_Buffer_Underread__CWE839_negative_04.c":151:13)
#loc161 = loc("CWE127_Buffer_Underread__CWE839_negative_04.c":144:17)
#loc162 = loc("CWE127_Buffer_Underread__CWE839_negative_04.c":144:24)
#loc163 = loc("CWE127_Buffer_Underread__CWE839_negative_04.c":144:22)
#loc164 = loc("CWE127_Buffer_Underread__CWE839_negative_04.c":145:13)
#loc165 = loc("CWE127_Buffer_Underread__CWE839_negative_04.c":147:13)
#loc166 = loc("CWE127_Buffer_Underread__CWE839_negative_04.c":149:13)
#loc167 = loc("CWE127_Buffer_Underread__CWE839_negative_04.c":146:37)
#loc168 = loc("CWE127_Buffer_Underread__CWE839_negative_04.c":146:30)
#loc169 = loc("CWE127_Buffer_Underread__CWE839_negative_04.c":146:17)
#loc170 = loc("CWE127_Buffer_Underread__CWE839_negative_04.c":150:27)
#loc171 = loc("CWE127_Buffer_Underread__CWE839_negative_04.c":150:17)
#loc172 = loc("CWE127_Buffer_Underread__CWE839_negative_04.c":157:1)
#loc173 = loc("CWE127_Buffer_Underread__CWE839_negative_04.c":184:1)
#loc174 = loc("CWE127_Buffer_Underread__CWE839_negative_04.c":159:5)
#loc175 = loc("CWE127_Buffer_Underread__CWE839_negative_04.c":159:9)
#loc176 = loc("CWE127_Buffer_Underread__CWE839_negative_04.c":161:13)
#loc177 = loc("CWE127_Buffer_Underread__CWE839_negative_04.c":161:12)
#loc178 = loc("CWE127_Buffer_Underread__CWE839_negative_04.c":161:5)
#loc179 = loc("CWE127_Buffer_Underread__CWE839_negative_04.c":162:5)
#loc180 = loc("CWE127_Buffer_Underread__CWE839_negative_04.c":167:5)
#loc181 = loc("CWE127_Buffer_Underread__CWE839_negative_04.c":162:8)
#loc182 = loc("CWE127_Buffer_Underread__CWE839_negative_04.c":163:5)
#loc183 = loc("CWE127_Buffer_Underread__CWE839_negative_04.c":166:16)
#loc184 = loc("CWE127_Buffer_Underread__CWE839_negative_04.c":166:9)
#loc185 = loc("CWE127_Buffer_Underread__CWE839_negative_04.c":168:5)
#loc186 = loc("CWE127_Buffer_Underread__CWE839_negative_04.c":183:5)
#loc187 = loc("CWE127_Buffer_Underread__CWE839_negative_04.c":168:8)
#loc188 = loc("CWE127_Buffer_Underread__CWE839_negative_04.c":169:5)
#loc189 = loc("CWE127_Buffer_Underread__CWE839_negative_04.c":170:9)
#loc190 = loc("CWE127_Buffer_Underread__CWE839_negative_04.c":182:9)
#loc191 = loc("CWE127_Buffer_Underread__CWE839_negative_04.c":171:13)
#loc192 = loc("CWE127_Buffer_Underread__CWE839_negative_04.c":171:34)
#loc193 = loc("CWE127_Buffer_Underread__CWE839_negative_04.c":174:13)
#loc194 = loc("CWE127_Buffer_Underread__CWE839_negative_04.c":181:13)
#loc195 = loc("CWE127_Buffer_Underread__CWE839_negative_04.c":174:17)
#loc196 = loc("CWE127_Buffer_Underread__CWE839_negative_04.c":174:24)
#loc197 = loc("CWE127_Buffer_Underread__CWE839_negative_04.c":174:22)
#loc198 = loc("CWE127_Buffer_Underread__CWE839_negative_04.c":175:13)
#loc199 = loc("CWE127_Buffer_Underread__CWE839_negative_04.c":177:13)
#loc200 = loc("CWE127_Buffer_Underread__CWE839_negative_04.c":179:13)
#loc201 = loc("CWE127_Buffer_Underread__CWE839_negative_04.c":176:37)
#loc202 = loc("CWE127_Buffer_Underread__CWE839_negative_04.c":176:30)
#loc203 = loc("CWE127_Buffer_Underread__CWE839_negative_04.c":176:17)
#loc204 = loc("CWE127_Buffer_Underread__CWE839_negative_04.c":180:27)
#loc205 = loc("CWE127_Buffer_Underread__CWE839_negative_04.c":180:17)
#loc206 = loc(fused[#loc1, #loc2])
#loc207 = loc(fused[#loc3, #loc4])
#loc208 = loc(fused[#loc6, #loc7])
#loc209 = loc(fused[#loc8, #loc9])
#loc210 = loc(fused[#loc12, #loc10])
#loc211 = loc(fused[#loc13, #loc14])
#loc212 = loc(fused[#loc16, #loc14])
#loc213 = loc(fused[#loc19, #loc17])
#loc214 = loc(fused[#loc20, #loc21])
#loc215 = loc(fused[#loc23, #loc21])
#loc216 = loc(fused[#loc24, #loc25])
#loc217 = loc(fused[#loc26, #loc27])
#loc218 = loc(fused[#loc28, #loc29])
#loc219 = loc(fused[#loc30, #loc31])
#loc220 = loc(fused[#loc33, #loc34, #loc35, #loc29])
#loc221 = loc(fused[#loc40, #loc41])
#loc222 = loc(fused[#loc42, #loc43])
#loc223 = loc(fused[#loc44, #loc45])
#loc224 = loc(fused[#loc46, #loc47])
#loc225 = loc(fused[#loc48, #loc49])
#loc226 = loc(fused[#loc52, #loc53])
#loc227 = loc(fused[#loc54, #loc55])
#loc228 = loc(fused[#loc58, #loc56])
#loc229 = loc(fused[#loc59, #loc60])
#loc230 = loc(fused[#loc62, #loc60])
#loc231 = loc(fused[#loc65, #loc63])
#loc232 = loc(fused[#loc66, #loc67])
#loc233 = loc(fused[#loc69, #loc70, #loc71, #loc67])
#loc234 = loc(fused[#loc73, #loc74])
#loc235 = loc(fused[#loc75, #loc76])
#loc236 = loc(fused[#loc77, #loc78])
#loc237 = loc(fused[#loc79, #loc80])
#loc238 = loc(fused[#loc83, #loc85])
#loc239 = loc(fused[#loc87, #loc88, #loc89, #loc78])
#loc240 = loc(fused[#loc94, #loc95])
#loc241 = loc(fused[#loc96, #loc97])
#loc242 = loc(fused[#loc100, #loc98])
#loc243 = loc(fused[#loc101, #loc102])
#loc244 = loc(fused[#loc104, #loc102])
#loc245 = loc(fused[#loc107, #loc105])
#loc246 = loc(fused[#loc108, #loc109])
#loc247 = loc(fused[#loc111, #loc109])
#loc248 = loc(fused[#loc112, #loc113])
#loc249 = loc(fused[#loc114, #loc115])
#loc250 = loc(fused[#loc116, #loc117])
#loc251 = loc(fused[#loc118, #loc119])
#loc252 = loc(fused[#loc122, #loc124])
#loc253 = loc(fused[#loc126, #loc127, #loc128, #loc117])
#loc254 = loc(fused[#loc134, #loc135])
#loc255 = loc(fused[#loc136, #loc137])
#loc256 = loc(fused[#loc140, #loc138])
#loc257 = loc(fused[#loc141, #loc142])
#loc258 = loc(fused[#loc144, #loc145, #loc146, #loc142])
#loc259 = loc(fused[#loc150, #loc149])
#loc260 = loc(fused[#loc151, #loc152])
#loc261 = loc(fused[#loc154, #loc152])
#loc262 = loc(fused[#loc155, #loc156])
#loc263 = loc(fused[#loc157, #loc158])
#loc264 = loc(fused[#loc159, #loc160])
#loc265 = loc(fused[#loc161, #loc162])
#loc266 = loc(fused[#loc164, #loc165, #loc166, #loc160])
#loc267 = loc(fused[#loc172, #loc173])
#loc268 = loc(fused[#loc174, #loc175])
#loc269 = loc(fused[#loc178, #loc176])
#loc270 = loc(fused[#loc179, #loc180])
#loc271 = loc(fused[#loc182, #loc180])
#loc272 = loc(fused[#loc184, #loc183])
#loc273 = loc(fused[#loc185, #loc186])
#loc274 = loc(fused[#loc188, #loc186])
#loc275 = loc(fused[#loc189, #loc190])
#loc276 = loc(fused[#loc191, #loc192])
#loc277 = loc(fused[#loc193, #loc194])
#loc278 = loc(fused[#loc195, #loc196])
#loc279 = loc(fused[#loc198, #loc199, #loc200, #loc194])
