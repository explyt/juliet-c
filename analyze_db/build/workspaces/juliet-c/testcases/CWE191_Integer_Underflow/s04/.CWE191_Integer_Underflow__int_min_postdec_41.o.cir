!s32i = !cir.int<s, 32>
!s8i = !cir.int<s, 8>
#fn_attr = #cir<extra({inline = #cir.inline<no>, nothrow = #cir.nothrow, optnone = #cir.optnone, uwtable = #cir.uwtable<async>})>
#loc5 = loc("CWE191_Integer_Underflow__int_min_postdec_41.c":22:21)
#loc6 = loc("CWE191_Integer_Underflow__int_min_postdec_41.c":22:25)
#loc37 = loc("CWE191_Integer_Underflow__int_min_postdec_41.c":68:25)
#loc38 = loc("CWE191_Integer_Underflow__int_min_postdec_41.c":68:29)
#loc66 = loc("CWE191_Integer_Underflow__int_min_postdec_41.c":47:25)
#loc67 = loc("CWE191_Integer_Underflow__int_min_postdec_41.c":47:29)
#loc90 = loc(fused[#loc5, #loc6])
#loc103 = loc(fused[#loc37, #loc38])
#loc114 = loc(fused[#loc66, #loc67])
module @"/workspaces/juliet-c/testcases/CWE191_Integer_Underflow/s04/CWE191_Integer_Underflow__int_min_postdec_41.c" attributes {cir.lang = #cir.lang<c>, cir.sob = #cir.signed_overflow_behavior<undefined>, cir.triple = "x86_64-unknown-linux-gnu", cir.type_size_info = #cir.type_size_info<char = 8, int = 32, size_t = 64>, cir.uwtable = #cir.uwtable<async>, dlti.dl_spec = #dlti.dl_spec<i32 = dense<32> : vector<2xi64>, i16 = dense<16> : vector<2xi64>, i8 = dense<8> : vector<2xi64>, !llvm.ptr<271> = dense<32> : vector<4xi64>, f128 = dense<128> : vector<2xi64>, !llvm.ptr<270> = dense<32> : vector<4xi64>, f64 = dense<64> : vector<2xi64>, f16 = dense<16> : vector<2xi64>, i128 = dense<128> : vector<2xi64>, i64 = dense<64> : vector<2xi64>, !llvm.ptr<272> = dense<64> : vector<4xi64>, i1 = dense<8> : vector<2xi64>, !llvm.ptr = dense<64> : vector<4xi64>, f80 = dense<128> : vector<2xi64>, "dlti.mangling_mode" = "e", "dlti.endianness" = "little", "dlti.stack_alignment" = 128 : i64>} {
  cir.func private @printIntLine(!s32i) loc(#loc88)
  cir.func internal private @badSink(%arg0: !s32i loc(fused[#loc5, #loc6])) extra(#fn_attr) {
    %0 = cir.alloca !s32i, !cir.ptr<!s32i>, ["data", init] {alignment = 4 : i64} loc(#loc90)
    cir.store %arg0, %0 : !s32i, !cir.ptr<!s32i> loc(#loc7)
    cir.scope {
      %1 = cir.alloca !s32i, !cir.ptr<!s32i>, ["result", init] {alignment = 4 : i64} loc(#loc92)
      %2 = cir.load %0 : !cir.ptr<!s32i>, !s32i loc(#loc12)
      %3 = cir.unary(dec, %2) nsw : !s32i, !s32i loc(#loc13)
      cir.store %3, %0 : !s32i, !cir.ptr<!s32i> loc(#loc93)
      %4 = cir.load %0 : !cir.ptr<!s32i>, !s32i loc(#loc11)
      cir.store %4, %1 : !s32i, !cir.ptr<!s32i> loc(#loc92)
      %5 = cir.load %1 : !cir.ptr<!s32i>, !s32i loc(#loc14)
      cir.call @printIntLine(%5) : (!s32i) -> () loc(#loc15)
    } loc(#loc91)
    cir.return loc(#loc4)
  } loc(#loc89)
  cir.func no_proto @CWE191_Integer_Underflow__int_min_postdec_41_bad() extra(#fn_attr) {
    %0 = cir.alloca !s32i, !cir.ptr<!s32i>, ["data"] {alignment = 4 : i64} loc(#loc95)
    %1 = cir.const #cir.int<0> : !s32i loc(#loc20)
    cir.store %1, %0 : !s32i, !cir.ptr<!s32i> loc(#loc96)
    %2 = cir.const #cir.int<2147483647> : !s32i loc(#loc22)
    %3 = cir.unary(minus, %2) nsw : !s32i, !s32i loc(#loc22)
    %4 = cir.const #cir.int<1> : !s32i loc(#loc22)
    %5 = cir.binop(sub, %3, %4) nsw : !s32i loc(#loc22)
    cir.store %5, %0 : !s32i, !cir.ptr<!s32i> loc(#loc97)
    %6 = cir.load %0 : !cir.ptr<!s32i>, !s32i loc(#loc24)
    cir.call @badSink(%6) : (!s32i) -> () loc(#loc25)
    cir.return loc(#loc17)
  } loc(#loc94)
  cir.func no_proto @CWE191_Integer_Underflow__int_min_postdec_41_good() extra(#fn_attr) {
    %0 = cir.get_global @goodB2G : !cir.ptr<!cir.func<()>> loc(#loc99)
    cir.call %0() : (!cir.ptr<!cir.func<()>>) -> () loc(#loc28)
    %1 = cir.get_global @goodG2B : !cir.ptr<!cir.func<()>> loc(#loc100)
    cir.call %1() : (!cir.ptr<!cir.func<()>>) -> () loc(#loc30)
    cir.return loc(#loc27)
  } loc(#loc98)
  cir.func private @printLine(!cir.ptr<!s8i>) loc(#loc101)
  cir.global "private" constant cir_private dsolocal @".str" = #cir.const_array<"data value is too large to perform arithmetic safely.\00" : !cir.array<!s8i x 54>> : !cir.array<!s8i x 54> {alignment = 1 : i64} loc(#loc34)
  cir.func internal private @goodB2GSink(%arg0: !s32i loc(fused[#loc37, #loc38])) extra(#fn_attr) {
    %0 = cir.alloca !s32i, !cir.ptr<!s32i>, ["data", init] {alignment = 4 : i64} loc(#loc103)
    cir.store %arg0, %0 : !s32i, !cir.ptr<!s32i> loc(#loc39)
    cir.scope {
      %1 = cir.load %0 : !cir.ptr<!s32i>, !s32i loc(#loc42)
      %2 = cir.const #cir.int<2147483647> : !s32i loc(#loc43)
      %3 = cir.unary(minus, %2) nsw : !s32i, !s32i loc(#loc43)
      %4 = cir.const #cir.int<1> : !s32i loc(#loc43)
      %5 = cir.binop(sub, %3, %4) nsw : !s32i loc(#loc43)
      %6 = cir.cmp(gt, %1, %5) : !s32i, !cir.bool loc(#loc105)
      cir.if %6 {
        %7 = cir.alloca !s32i, !cir.ptr<!s32i>, ["result", init] {alignment = 4 : i64} loc(#loc107)
        %8 = cir.load %0 : !cir.ptr<!s32i>, !s32i loc(#loc49)
        %9 = cir.unary(dec, %8) nsw : !s32i, !s32i loc(#loc50)
        cir.store %9, %0 : !s32i, !cir.ptr<!s32i> loc(#loc108)
        %10 = cir.load %0 : !cir.ptr<!s32i>, !s32i loc(#loc48)
        cir.store %10, %7 : !s32i, !cir.ptr<!s32i> loc(#loc107)
        %11 = cir.load %7 : !cir.ptr<!s32i>, !s32i loc(#loc51)
        cir.call @printIntLine(%11) : (!s32i) -> () loc(#loc52)
      } else {
        %7 = cir.get_global @".str" : !cir.ptr<!cir.array<!s8i x 54>> loc(#loc34)
        %8 = cir.cast(array_to_ptrdecay, %7 : !cir.ptr<!cir.array<!s8i x 54>>), !cir.ptr<!s8i> loc(#loc34)
        cir.call @printLine(%8) : (!cir.ptr<!s8i>) -> () loc(#loc53)
      } loc(#loc106)
    } loc(#loc104)
    cir.return loc(#loc36)
  } loc(#loc102)
  cir.func no_proto internal private @goodB2G() extra(#fn_attr) {
    %0 = cir.alloca !s32i, !cir.ptr<!s32i>, ["data"] {alignment = 4 : i64} loc(#loc110)
    %1 = cir.const #cir.int<0> : !s32i loc(#loc58)
    cir.store %1, %0 : !s32i, !cir.ptr<!s32i> loc(#loc111)
    %2 = cir.const #cir.int<2147483647> : !s32i loc(#loc60)
    %3 = cir.unary(minus, %2) nsw : !s32i, !s32i loc(#loc60)
    %4 = cir.const #cir.int<1> : !s32i loc(#loc60)
    %5 = cir.binop(sub, %3, %4) nsw : !s32i loc(#loc60)
    cir.store %5, %0 : !s32i, !cir.ptr<!s32i> loc(#loc112)
    %6 = cir.load %0 : !cir.ptr<!s32i>, !s32i loc(#loc62)
    cir.call @goodB2GSink(%6) : (!s32i) -> () loc(#loc63)
    cir.return loc(#loc55)
  } loc(#loc109)
  cir.func internal private @goodG2BSink(%arg0: !s32i loc(fused[#loc66, #loc67])) extra(#fn_attr) {
    %0 = cir.alloca !s32i, !cir.ptr<!s32i>, ["data", init] {alignment = 4 : i64} loc(#loc114)
    cir.store %arg0, %0 : !s32i, !cir.ptr<!s32i> loc(#loc68)
    cir.scope {
      %1 = cir.alloca !s32i, !cir.ptr<!s32i>, ["result", init] {alignment = 4 : i64} loc(#loc116)
      %2 = cir.load %0 : !cir.ptr<!s32i>, !s32i loc(#loc73)
      %3 = cir.unary(dec, %2) nsw : !s32i, !s32i loc(#loc74)
      cir.store %3, %0 : !s32i, !cir.ptr<!s32i> loc(#loc117)
      %4 = cir.load %0 : !cir.ptr<!s32i>, !s32i loc(#loc72)
      cir.store %4, %1 : !s32i, !cir.ptr<!s32i> loc(#loc116)
      %5 = cir.load %1 : !cir.ptr<!s32i>, !s32i loc(#loc75)
      cir.call @printIntLine(%5) : (!s32i) -> () loc(#loc76)
    } loc(#loc115)
    cir.return loc(#loc65)
  } loc(#loc113)
  cir.func no_proto internal private @goodG2B() extra(#fn_attr) {
    %0 = cir.alloca !s32i, !cir.ptr<!s32i>, ["data"] {alignment = 4 : i64} loc(#loc119)
    %1 = cir.const #cir.int<0> : !s32i loc(#loc81)
    cir.store %1, %0 : !s32i, !cir.ptr<!s32i> loc(#loc120)
    %2 = cir.const #cir.int<2> : !s32i loc(#loc83)
    %3 = cir.unary(minus, %2) nsw : !s32i, !s32i loc(#loc84)
    cir.store %3, %0 : !s32i, !cir.ptr<!s32i> loc(#loc121)
    %4 = cir.load %0 : !cir.ptr<!s32i>, !s32i loc(#loc86)
    cir.call @goodG2BSink(%4) : (!s32i) -> () loc(#loc87)
    cir.return loc(#loc78)
  } loc(#loc118)
} loc(#loc)
#loc = loc("/workspaces/juliet-c/testcases/CWE191_Integer_Underflow/s04/CWE191_Integer_Underflow__int_min_postdec_41.c":0:0)
#loc1 = loc("../../../testcasesupport/std_testcase_io.h":18:1)
#loc2 = loc("../../../testcasesupport/std_testcase_io.h":18:33)
#loc3 = loc("CWE191_Integer_Underflow__int_min_postdec_41.c":22:1)
#loc4 = loc("CWE191_Integer_Underflow__int_min_postdec_41.c":30:1)
#loc7 = loc("CWE191_Integer_Underflow__int_min_postdec_41.c":23:1)
#loc8 = loc("CWE191_Integer_Underflow__int_min_postdec_41.c":24:5)
#loc9 = loc("CWE191_Integer_Underflow__int_min_postdec_41.c":29:5)
#loc10 = loc("CWE191_Integer_Underflow__int_min_postdec_41.c":27:9)
#loc11 = loc("CWE191_Integer_Underflow__int_min_postdec_41.c":27:22)
#loc12 = loc("CWE191_Integer_Underflow__int_min_postdec_41.c":26:13)
#loc13 = loc("CWE191_Integer_Underflow__int_min_postdec_41.c":26:9)
#loc14 = loc("CWE191_Integer_Underflow__int_min_postdec_41.c":28:22)
#loc15 = loc("CWE191_Integer_Underflow__int_min_postdec_41.c":28:9)
#loc16 = loc("CWE191_Integer_Underflow__int_min_postdec_41.c":32:1)
#loc17 = loc("CWE191_Integer_Underflow__int_min_postdec_41.c":40:1)
#loc18 = loc("CWE191_Integer_Underflow__int_min_postdec_41.c":34:5)
#loc19 = loc("CWE191_Integer_Underflow__int_min_postdec_41.c":34:9)
#loc20 = loc("CWE191_Integer_Underflow__int_min_postdec_41.c":36:12)
#loc21 = loc("CWE191_Integer_Underflow__int_min_postdec_41.c":36:5)
#loc22 = loc("CWE191_Integer_Underflow__int_min_postdec_41.c":38:12)
#loc23 = loc("CWE191_Integer_Underflow__int_min_postdec_41.c":38:5)
#loc24 = loc("CWE191_Integer_Underflow__int_min_postdec_41.c":39:13)
#loc25 = loc("CWE191_Integer_Underflow__int_min_postdec_41.c":39:5)
#loc26 = loc("CWE191_Integer_Underflow__int_min_postdec_41.c":93:1)
#loc27 = loc("CWE191_Integer_Underflow__int_min_postdec_41.c":97:1)
#loc28 = loc("CWE191_Integer_Underflow__int_min_postdec_41.c":95:5)
#loc29 = loc("CWE191_Integer_Underflow__int_min_postdec_41.c":95:13)
#loc30 = loc("CWE191_Integer_Underflow__int_min_postdec_41.c":96:5)
#loc31 = loc("CWE191_Integer_Underflow__int_min_postdec_41.c":96:13)
#loc32 = loc("../../../testcasesupport/std_testcase_io.h":14:1)
#loc33 = loc("../../../testcasesupport/std_testcase_io.h":14:33)
#loc34 = loc("CWE191_Integer_Underflow__int_min_postdec_41.c":79:19)
#loc35 = loc("CWE191_Integer_Underflow__int_min_postdec_41.c":68:1)
#loc36 = loc("CWE191_Integer_Underflow__int_min_postdec_41.c":81:1)
#loc39 = loc("CWE191_Integer_Underflow__int_min_postdec_41.c":69:1)
#loc40 = loc("CWE191_Integer_Underflow__int_min_postdec_41.c":71:5)
#loc41 = loc("CWE191_Integer_Underflow__int_min_postdec_41.c":80:5)
#loc42 = loc("CWE191_Integer_Underflow__int_min_postdec_41.c":71:9)
#loc43 = loc("CWE191_Integer_Underflow__int_min_postdec_41.c":71:16)
#loc44 = loc("CWE191_Integer_Underflow__int_min_postdec_41.c":72:5)
#loc45 = loc("CWE191_Integer_Underflow__int_min_postdec_41.c":76:5)
#loc46 = loc("CWE191_Integer_Underflow__int_min_postdec_41.c":78:5)
#loc47 = loc("CWE191_Integer_Underflow__int_min_postdec_41.c":74:9)
#loc48 = loc("CWE191_Integer_Underflow__int_min_postdec_41.c":74:22)
#loc49 = loc("CWE191_Integer_Underflow__int_min_postdec_41.c":73:13)
#loc50 = loc("CWE191_Integer_Underflow__int_min_postdec_41.c":73:9)
#loc51 = loc("CWE191_Integer_Underflow__int_min_postdec_41.c":75:22)
#loc52 = loc("CWE191_Integer_Underflow__int_min_postdec_41.c":75:9)
#loc53 = loc("CWE191_Integer_Underflow__int_min_postdec_41.c":79:9)
#loc54 = loc("CWE191_Integer_Underflow__int_min_postdec_41.c":83:1)
#loc55 = loc("CWE191_Integer_Underflow__int_min_postdec_41.c":91:1)
#loc56 = loc("CWE191_Integer_Underflow__int_min_postdec_41.c":85:5)
#loc57 = loc("CWE191_Integer_Underflow__int_min_postdec_41.c":85:9)
#loc58 = loc("CWE191_Integer_Underflow__int_min_postdec_41.c":87:12)
#loc59 = loc("CWE191_Integer_Underflow__int_min_postdec_41.c":87:5)
#loc60 = loc("CWE191_Integer_Underflow__int_min_postdec_41.c":89:12)
#loc61 = loc("CWE191_Integer_Underflow__int_min_postdec_41.c":89:5)
#loc62 = loc("CWE191_Integer_Underflow__int_min_postdec_41.c":90:17)
#loc63 = loc("CWE191_Integer_Underflow__int_min_postdec_41.c":90:5)
#loc64 = loc("CWE191_Integer_Underflow__int_min_postdec_41.c":47:1)
#loc65 = loc("CWE191_Integer_Underflow__int_min_postdec_41.c":55:1)
#loc68 = loc("CWE191_Integer_Underflow__int_min_postdec_41.c":48:1)
#loc69 = loc("CWE191_Integer_Underflow__int_min_postdec_41.c":49:5)
#loc70 = loc("CWE191_Integer_Underflow__int_min_postdec_41.c":54:5)
#loc71 = loc("CWE191_Integer_Underflow__int_min_postdec_41.c":52:9)
#loc72 = loc("CWE191_Integer_Underflow__int_min_postdec_41.c":52:22)
#loc73 = loc("CWE191_Integer_Underflow__int_min_postdec_41.c":51:13)
#loc74 = loc("CWE191_Integer_Underflow__int_min_postdec_41.c":51:9)
#loc75 = loc("CWE191_Integer_Underflow__int_min_postdec_41.c":53:22)
#loc76 = loc("CWE191_Integer_Underflow__int_min_postdec_41.c":53:9)
#loc77 = loc("CWE191_Integer_Underflow__int_min_postdec_41.c":57:1)
#loc78 = loc("CWE191_Integer_Underflow__int_min_postdec_41.c":65:1)
#loc79 = loc("CWE191_Integer_Underflow__int_min_postdec_41.c":59:5)
#loc80 = loc("CWE191_Integer_Underflow__int_min_postdec_41.c":59:9)
#loc81 = loc("CWE191_Integer_Underflow__int_min_postdec_41.c":61:12)
#loc82 = loc("CWE191_Integer_Underflow__int_min_postdec_41.c":61:5)
#loc83 = loc("CWE191_Integer_Underflow__int_min_postdec_41.c":63:13)
#loc84 = loc("CWE191_Integer_Underflow__int_min_postdec_41.c":63:12)
#loc85 = loc("CWE191_Integer_Underflow__int_min_postdec_41.c":63:5)
#loc86 = loc("CWE191_Integer_Underflow__int_min_postdec_41.c":64:17)
#loc87 = loc("CWE191_Integer_Underflow__int_min_postdec_41.c":64:5)
#loc88 = loc(fused[#loc1, #loc2])
#loc89 = loc(fused[#loc3, #loc4])
#loc91 = loc(fused[#loc8, #loc9])
#loc92 = loc(fused[#loc10, #loc11])
#loc93 = loc(fused[#loc13, #loc12])
#loc94 = loc(fused[#loc16, #loc17])
#loc95 = loc(fused[#loc18, #loc19])
#loc96 = loc(fused[#loc21, #loc20])
#loc97 = loc(fused[#loc23, #loc22])
#loc98 = loc(fused[#loc26, #loc27])
#loc99 = loc(fused[#loc28, #loc29])
#loc100 = loc(fused[#loc30, #loc31])
#loc101 = loc(fused[#loc32, #loc33])
#loc102 = loc(fused[#loc35, #loc36])
#loc104 = loc(fused[#loc40, #loc41])
#loc105 = loc(fused[#loc42, #loc43])
#loc106 = loc(fused[#loc44, #loc45, #loc46, #loc41])
#loc107 = loc(fused[#loc47, #loc48])
#loc108 = loc(fused[#loc50, #loc49])
#loc109 = loc(fused[#loc54, #loc55])
#loc110 = loc(fused[#loc56, #loc57])
#loc111 = loc(fused[#loc59, #loc58])
#loc112 = loc(fused[#loc61, #loc60])
#loc113 = loc(fused[#loc64, #loc65])
#loc115 = loc(fused[#loc69, #loc70])
#loc116 = loc(fused[#loc71, #loc72])
#loc117 = loc(fused[#loc74, #loc73])
#loc118 = loc(fused[#loc77, #loc78])
#loc119 = loc(fused[#loc79, #loc80])
#loc120 = loc(fused[#loc82, #loc81])
#loc121 = loc(fused[#loc85, #loc83])
