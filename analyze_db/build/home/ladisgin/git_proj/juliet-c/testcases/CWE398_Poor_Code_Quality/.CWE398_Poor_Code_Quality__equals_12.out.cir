!s32i = !cir.int<s, 32>
!s64i = !cir.int<s, 64>
!s8i = !cir.int<s, 8>
!u32i = !cir.int<u, 32>
!void = !cir.void
#fn_attr = #cir<extra({inline = #cir.inline<no>, nothrow = #cir.nothrow, optnone = #cir.optnone})>
#fn_attr1 = #cir<extra({nothrow = #cir.nothrow})>
#loc51 = loc("CWE398_Poor_Code_Quality__equals_12.c":87:10)
#loc52 = loc("CWE398_Poor_Code_Quality__equals_12.c":87:14)
#loc53 = loc("CWE398_Poor_Code_Quality__equals_12.c":87:20)
#loc54 = loc("CWE398_Poor_Code_Quality__equals_12.c":87:32)
#loc119 = loc(fused[#loc51, #loc52])
#loc120 = loc(fused[#loc53, #loc54])
module @"/home/ladisgin/git_proj/juliet-c/testcases/CWE398_Poor_Code_Quality/CWE398_Poor_Code_Quality__equals_12.c" attributes {cir.lang = #cir.lang<c>, cir.sob = #cir.signed_overflow_behavior<undefined>, cir.triple = "x86_64-unknown-linux-gnu", dlti.dl_spec = #dlti.dl_spec<!llvm.ptr<270> = dense<32> : vector<4xi64>, f64 = dense<64> : vector<2xi64>, f128 = dense<128> : vector<2xi64>, f16 = dense<16> : vector<2xi64>, i32 = dense<32> : vector<2xi64>, i16 = dense<16> : vector<2xi64>, i8 = dense<8> : vector<2xi64>, i1 = dense<8> : vector<2xi64>, !llvm.ptr = dense<64> : vector<4xi64>, f80 = dense<128> : vector<2xi64>, i128 = dense<128> : vector<2xi64>, i64 = dense<64> : vector<2xi64>, !llvm.ptr<271> = dense<32> : vector<4xi64>, !llvm.ptr<272> = dense<64> : vector<4xi64>, "dlti.endianness" = "little", "dlti.stack_alignment" = 128 : i64>} {
  cir.func no_proto private @globalReturnsTrueOrFalse(...) -> !s32i loc(#loc100)
  cir.func private @printIntLine(!s32i) loc(#loc101)
  cir.func no_proto @CWE398_Poor_Code_Quality__equals_12_bad() extra(#fn_attr) {
    cir.scope {
      %0 = cir.get_global @globalReturnsTrueOrFalse : !cir.ptr<!cir.func<!s32i (...)>> loc(#loc104)
      %1 = cir.cast(bitcast, %0 : !cir.ptr<!cir.func<!s32i (...)>>), !cir.ptr<!cir.func<!s32i ()>> loc(#loc104)
      %2 = cir.call %1() : (!cir.ptr<!cir.func<!s32i ()>>) -> !s32i loc(#loc9)
      %3 = cir.cast(int_to_bool, %2 : !s32i), !cir.bool loc(#loc9)
      cir.if %3 {
        cir.scope {
          %4 = cir.alloca !s32i, !cir.ptr<!s32i>, ["intOne", init] {alignment = 4 : i64} loc(#loc107)
          %5 = cir.const #cir.int<1> : !s32i loc(#loc17)
          cir.store %5, %4 : !s32i, !cir.ptr<!s32i> loc(#loc107)
          %6 = cir.load %4 : !cir.ptr<!s32i>, !s32i loc(#loc18)
          cir.call @printIntLine(%6) : (!s32i) -> () loc(#loc19)
          %7 = cir.load %4 : !cir.ptr<!s32i>, !s32i loc(#loc20)
          cir.store %7, %4 : !s32i, !cir.ptr<!s32i> loc(#loc108)
          %8 = cir.load %4 : !cir.ptr<!s32i>, !s32i loc(#loc22)
          cir.call @printIntLine(%8) : (!s32i) -> () loc(#loc23)
        } loc(#loc106)
      } else {
        cir.scope {
          %4 = cir.alloca !s32i, !cir.ptr<!s32i>, ["intOne", init] {alignment = 4 : i64} loc(#loc110)
          %5 = cir.alloca !s32i, !cir.ptr<!s32i>, ["intFive", init] {alignment = 4 : i64} loc(#loc111)
          %6 = cir.const #cir.int<1> : !s32i loc(#loc27)
          cir.store %6, %4 : !s32i, !cir.ptr<!s32i> loc(#loc110)
          %7 = cir.const #cir.int<5> : !s32i loc(#loc28)
          cir.store %7, %5 : !s32i, !cir.ptr<!s32i> loc(#loc111)
          %8 = cir.load %4 : !cir.ptr<!s32i>, !s32i loc(#loc29)
          cir.call @printIntLine(%8) : (!s32i) -> () loc(#loc30)
          %9 = cir.load %5 : !cir.ptr<!s32i>, !s32i loc(#loc31)
          cir.store %9, %4 : !s32i, !cir.ptr<!s32i> loc(#loc112)
          %10 = cir.load %4 : !cir.ptr<!s32i>, !s32i loc(#loc33)
          cir.call @printIntLine(%10) : (!s32i) -> () loc(#loc34)
        } loc(#loc109)
      } loc(#loc105)
    } loc(#loc103)
    cir.return loc(#loc6)
  } loc(#loc102)
  cir.func no_proto @CWE398_Poor_Code_Quality__equals_12_good() extra(#fn_attr) {
    %0 = cir.get_global @good1 : !cir.ptr<!cir.func<!void ()>> loc(#loc114)
    cir.call %0() : (!cir.ptr<!cir.func<!void ()>>) -> () loc(#loc37)
    cir.return loc(#loc36)
  } loc(#loc113)
  cir.func private @srand(!u32i) extra(#fn_attr1) loc(#loc115)
  cir.func private @time(!cir.ptr<!s64i>) -> !s64i extra(#fn_attr1) loc(#loc116)
  cir.func private @printLine(!cir.ptr<!s8i>) loc(#loc117)
  cir.global "private" constant cir_private dsolocal @".str" = #cir.const_array<"Calling good()...\00" : !cir.array<!s8i x 18>> : !cir.array<!s8i x 18> {alignment = 1 : i64} loc(#loc45)
  cir.global "private" constant cir_private dsolocal @".str.1" = #cir.const_array<"Finished good()\00" : !cir.array<!s8i x 16>> : !cir.array<!s8i x 16> {alignment = 1 : i64} loc(#loc46)
  cir.global "private" constant cir_private dsolocal @".str.2" = #cir.const_array<"Calling bad()...\00" : !cir.array<!s8i x 17>> : !cir.array<!s8i x 17> {alignment = 1 : i64} loc(#loc47)
  cir.global "private" constant cir_private dsolocal @".str.3" = #cir.const_array<"Finished bad()\00" : !cir.array<!s8i x 15>> : !cir.array<!s8i x 15> {alignment = 1 : i64} loc(#loc48)
  cir.func @main(%arg0: !s32i loc(fused[#loc51, #loc52]), %arg1: !cir.ptr<!cir.ptr<!s8i>> loc(fused[#loc53, #loc54])) -> !s32i extra(#fn_attr) {
    %0 = cir.alloca !s32i, !cir.ptr<!s32i>, ["argc", init] {alignment = 4 : i64} loc(#loc119)
    %1 = cir.alloca !cir.ptr<!cir.ptr<!s8i>>, !cir.ptr<!cir.ptr<!cir.ptr<!s8i>>>, ["argv", init] {alignment = 8 : i64} loc(#loc120)
    %2 = cir.alloca !s32i, !cir.ptr<!s32i>, ["__retval"] {alignment = 4 : i64} loc(#loc50)
    cir.store %arg0, %0 : !s32i, !cir.ptr<!s32i> loc(#loc55)
    cir.store %arg1, %1 : !cir.ptr<!cir.ptr<!s8i>>, !cir.ptr<!cir.ptr<!cir.ptr<!s8i>>> loc(#loc55)
    %3 = cir.const #cir.ptr<null> : !cir.ptr<!s64i> loc(#loc56)
    %4 = cir.call @time(%3) : (!cir.ptr<!s64i>) -> !s64i extra(#fn_attr1) loc(#loc57)
    %5 = cir.cast(integral, %4 : !s64i), !u32i loc(#loc57)
    cir.call @srand(%5) : (!u32i) -> () extra(#fn_attr1) loc(#loc58)
    %6 = cir.get_global @".str" : !cir.ptr<!cir.array<!s8i x 18>> loc(#loc45)
    %7 = cir.cast(array_to_ptrdecay, %6 : !cir.ptr<!cir.array<!s8i x 18>>), !cir.ptr<!s8i> loc(#loc45)
    cir.call @printLine(%7) : (!cir.ptr<!s8i>) -> () loc(#loc59)
    %8 = cir.get_global @CWE398_Poor_Code_Quality__equals_12_good : !cir.ptr<!cir.func<!void ()>> loc(#loc121)
    cir.call @CWE398_Poor_Code_Quality__equals_12_good() : () -> () loc(#loc60)
    %9 = cir.get_global @".str.1" : !cir.ptr<!cir.array<!s8i x 16>> loc(#loc46)
    %10 = cir.cast(array_to_ptrdecay, %9 : !cir.ptr<!cir.array<!s8i x 16>>), !cir.ptr<!s8i> loc(#loc46)
    cir.call @printLine(%10) : (!cir.ptr<!s8i>) -> () loc(#loc62)
    %11 = cir.get_global @".str.2" : !cir.ptr<!cir.array<!s8i x 17>> loc(#loc47)
    %12 = cir.cast(array_to_ptrdecay, %11 : !cir.ptr<!cir.array<!s8i x 17>>), !cir.ptr<!s8i> loc(#loc47)
    cir.call @printLine(%12) : (!cir.ptr<!s8i>) -> () loc(#loc63)
    %13 = cir.get_global @CWE398_Poor_Code_Quality__equals_12_bad : !cir.ptr<!cir.func<!void ()>> loc(#loc122)
    cir.call @CWE398_Poor_Code_Quality__equals_12_bad() : () -> () loc(#loc64)
    %14 = cir.get_global @".str.3" : !cir.ptr<!cir.array<!s8i x 15>> loc(#loc48)
    %15 = cir.cast(array_to_ptrdecay, %14 : !cir.ptr<!cir.array<!s8i x 15>>), !cir.ptr<!s8i> loc(#loc48)
    cir.call @printLine(%15) : (!cir.ptr<!s8i>) -> () loc(#loc66)
    %16 = cir.const #cir.int<0> : !s32i loc(#loc67)
    cir.store %16, %2 : !s32i, !cir.ptr<!s32i> loc(#loc123)
    %17 = cir.load %2 : !cir.ptr<!s32i>, !s32i loc(#loc123)
    cir.return %17 : !s32i loc(#loc123)
  } loc(#loc118)
  cir.func no_proto internal private @good1() extra(#fn_attr) {
    cir.scope {
      %0 = cir.get_global @globalReturnsTrueOrFalse : !cir.ptr<!cir.func<!s32i (...)>> loc(#loc126)
      %1 = cir.cast(bitcast, %0 : !cir.ptr<!cir.func<!s32i (...)>>), !cir.ptr<!cir.func<!s32i ()>> loc(#loc126)
      %2 = cir.call %1() : (!cir.ptr<!cir.func<!s32i ()>>) -> !s32i loc(#loc73)
      %3 = cir.cast(int_to_bool, %2 : !s32i), !cir.bool loc(#loc73)
      cir.if %3 {
        cir.scope {
          %4 = cir.alloca !s32i, !cir.ptr<!s32i>, ["intOne", init] {alignment = 4 : i64} loc(#loc129)
          %5 = cir.alloca !s32i, !cir.ptr<!s32i>, ["intFive", init] {alignment = 4 : i64} loc(#loc130)
          %6 = cir.const #cir.int<1> : !s32i loc(#loc81)
          cir.store %6, %4 : !s32i, !cir.ptr<!s32i> loc(#loc129)
          %7 = cir.const #cir.int<5> : !s32i loc(#loc82)
          cir.store %7, %5 : !s32i, !cir.ptr<!s32i> loc(#loc130)
          %8 = cir.load %4 : !cir.ptr<!s32i>, !s32i loc(#loc83)
          cir.call @printIntLine(%8) : (!s32i) -> () loc(#loc84)
          %9 = cir.load %5 : !cir.ptr<!s32i>, !s32i loc(#loc85)
          cir.store %9, %4 : !s32i, !cir.ptr<!s32i> loc(#loc131)
          %10 = cir.load %4 : !cir.ptr<!s32i>, !s32i loc(#loc87)
          cir.call @printIntLine(%10) : (!s32i) -> () loc(#loc88)
        } loc(#loc128)
      } else {
        cir.scope {
          %4 = cir.alloca !s32i, !cir.ptr<!s32i>, ["intOne", init] {alignment = 4 : i64} loc(#loc133)
          %5 = cir.alloca !s32i, !cir.ptr<!s32i>, ["intFive", init] {alignment = 4 : i64} loc(#loc134)
          %6 = cir.const #cir.int<1> : !s32i loc(#loc92)
          cir.store %6, %4 : !s32i, !cir.ptr<!s32i> loc(#loc133)
          %7 = cir.const #cir.int<5> : !s32i loc(#loc93)
          cir.store %7, %5 : !s32i, !cir.ptr<!s32i> loc(#loc134)
          %8 = cir.load %4 : !cir.ptr<!s32i>, !s32i loc(#loc94)
          cir.call @printIntLine(%8) : (!s32i) -> () loc(#loc95)
          %9 = cir.load %5 : !cir.ptr<!s32i>, !s32i loc(#loc96)
          cir.store %9, %4 : !s32i, !cir.ptr<!s32i> loc(#loc135)
          %10 = cir.load %4 : !cir.ptr<!s32i>, !s32i loc(#loc98)
          cir.call @printIntLine(%10) : (!s32i) -> () loc(#loc99)
        } loc(#loc132)
      } loc(#loc127)
    } loc(#loc125)
    cir.return loc(#loc70)
  } loc(#loc124)
} loc(#loc)
#loc = loc("/home/ladisgin/git_proj/juliet-c/testcases/CWE398_Poor_Code_Quality/CWE398_Poor_Code_Quality__equals_12.c":0:0)
#loc1 = loc("../../testcasesupport/std_testcase_io.h":52:1)
#loc2 = loc("../../testcasesupport/std_testcase_io.h":52:30)
#loc3 = loc("../../testcasesupport/std_testcase_io.h":18:1)
#loc4 = loc("../../testcasesupport/std_testcase_io.h":18:33)
#loc5 = loc("CWE398_Poor_Code_Quality__equals_12.c":20:1)
#loc6 = loc("CWE398_Poor_Code_Quality__equals_12.c":42:1)
#loc7 = loc("CWE398_Poor_Code_Quality__equals_12.c":22:5)
#loc8 = loc("CWE398_Poor_Code_Quality__equals_12.c":41:5)
#loc9 = loc("CWE398_Poor_Code_Quality__equals_12.c":22:8)
#loc10 = loc("CWE398_Poor_Code_Quality__equals_12.c":22:33)
#loc11 = loc("CWE398_Poor_Code_Quality__equals_12.c":23:5)
#loc12 = loc("CWE398_Poor_Code_Quality__equals_12.c":31:5)
#loc13 = loc("CWE398_Poor_Code_Quality__equals_12.c":33:5)
#loc14 = loc("CWE398_Poor_Code_Quality__equals_12.c":24:9)
#loc15 = loc("CWE398_Poor_Code_Quality__equals_12.c":30:9)
#loc16 = loc("CWE398_Poor_Code_Quality__equals_12.c":25:13)
#loc17 = loc("CWE398_Poor_Code_Quality__equals_12.c":25:26)
#loc18 = loc("CWE398_Poor_Code_Quality__equals_12.c":26:26)
#loc19 = loc("CWE398_Poor_Code_Quality__equals_12.c":26:13)
#loc20 = loc("CWE398_Poor_Code_Quality__equals_12.c":28:22)
#loc21 = loc("CWE398_Poor_Code_Quality__equals_12.c":28:13)
#loc22 = loc("CWE398_Poor_Code_Quality__equals_12.c":29:26)
#loc23 = loc("CWE398_Poor_Code_Quality__equals_12.c":29:13)
#loc24 = loc("CWE398_Poor_Code_Quality__equals_12.c":34:9)
#loc25 = loc("CWE398_Poor_Code_Quality__equals_12.c":40:9)
#loc26 = loc("CWE398_Poor_Code_Quality__equals_12.c":35:13)
#loc27 = loc("CWE398_Poor_Code_Quality__equals_12.c":35:26)
#loc28 = loc("CWE398_Poor_Code_Quality__equals_12.c":35:39)
#loc29 = loc("CWE398_Poor_Code_Quality__equals_12.c":36:26)
#loc30 = loc("CWE398_Poor_Code_Quality__equals_12.c":36:13)
#loc31 = loc("CWE398_Poor_Code_Quality__equals_12.c":38:22)
#loc32 = loc("CWE398_Poor_Code_Quality__equals_12.c":38:13)
#loc33 = loc("CWE398_Poor_Code_Quality__equals_12.c":39:26)
#loc34 = loc("CWE398_Poor_Code_Quality__equals_12.c":39:13)
#loc35 = loc("CWE398_Poor_Code_Quality__equals_12.c":73:1)
#loc36 = loc("CWE398_Poor_Code_Quality__equals_12.c":76:1)
#loc37 = loc("CWE398_Poor_Code_Quality__equals_12.c":75:5)
#loc38 = loc("CWE398_Poor_Code_Quality__equals_12.c":75:11)
#loc39 = loc("/usr/include/stdlib.h":575:1)
#loc40 = loc("/usr/include/stdlib.h":575:41)
#loc41 = loc("/usr/include/time.h":76:1)
#loc42 = loc("/usr/include/time.h":76:38)
#loc43 = loc("../../testcasesupport/std_testcase_io.h":14:1)
#loc44 = loc("../../testcasesupport/std_testcase_io.h":14:33)
#loc45 = loc("CWE398_Poor_Code_Quality__equals_12.c":92:15)
#loc46 = loc("CWE398_Poor_Code_Quality__equals_12.c":94:15)
#loc47 = loc("CWE398_Poor_Code_Quality__equals_12.c":97:15)
#loc48 = loc("CWE398_Poor_Code_Quality__equals_12.c":99:15)
#loc49 = loc("CWE398_Poor_Code_Quality__equals_12.c":87:1)
#loc50 = loc("CWE398_Poor_Code_Quality__equals_12.c":102:1)
#loc55 = loc("CWE398_Poor_Code_Quality__equals_12.c":88:1)
#loc56 = loc("CWE398_Poor_Code_Quality__equals_12.c":90:27)
#loc57 = loc("CWE398_Poor_Code_Quality__equals_12.c":90:22)
#loc58 = loc("CWE398_Poor_Code_Quality__equals_12.c":90:5)
#loc59 = loc("CWE398_Poor_Code_Quality__equals_12.c":92:5)
#loc60 = loc("CWE398_Poor_Code_Quality__equals_12.c":93:5)
#loc61 = loc("CWE398_Poor_Code_Quality__equals_12.c":93:46)
#loc62 = loc("CWE398_Poor_Code_Quality__equals_12.c":94:5)
#loc63 = loc("CWE398_Poor_Code_Quality__equals_12.c":97:5)
#loc64 = loc("CWE398_Poor_Code_Quality__equals_12.c":98:5)
#loc65 = loc("CWE398_Poor_Code_Quality__equals_12.c":98:45)
#loc66 = loc("CWE398_Poor_Code_Quality__equals_12.c":99:5)
#loc67 = loc("CWE398_Poor_Code_Quality__equals_12.c":101:12)
#loc68 = loc("CWE398_Poor_Code_Quality__equals_12.c":101:5)
#loc69 = loc("CWE398_Poor_Code_Quality__equals_12.c":49:1)
#loc70 = loc("CWE398_Poor_Code_Quality__equals_12.c":71:1)
#loc71 = loc("CWE398_Poor_Code_Quality__equals_12.c":51:5)
#loc72 = loc("CWE398_Poor_Code_Quality__equals_12.c":70:5)
#loc73 = loc("CWE398_Poor_Code_Quality__equals_12.c":51:8)
#loc74 = loc("CWE398_Poor_Code_Quality__equals_12.c":51:33)
#loc75 = loc("CWE398_Poor_Code_Quality__equals_12.c":52:5)
#loc76 = loc("CWE398_Poor_Code_Quality__equals_12.c":60:5)
#loc77 = loc("CWE398_Poor_Code_Quality__equals_12.c":62:5)
#loc78 = loc("CWE398_Poor_Code_Quality__equals_12.c":53:9)
#loc79 = loc("CWE398_Poor_Code_Quality__equals_12.c":59:9)
#loc80 = loc("CWE398_Poor_Code_Quality__equals_12.c":54:13)
#loc81 = loc("CWE398_Poor_Code_Quality__equals_12.c":54:26)
#loc82 = loc("CWE398_Poor_Code_Quality__equals_12.c":54:39)
#loc83 = loc("CWE398_Poor_Code_Quality__equals_12.c":55:26)
#loc84 = loc("CWE398_Poor_Code_Quality__equals_12.c":55:13)
#loc85 = loc("CWE398_Poor_Code_Quality__equals_12.c":57:22)
#loc86 = loc("CWE398_Poor_Code_Quality__equals_12.c":57:13)
#loc87 = loc("CWE398_Poor_Code_Quality__equals_12.c":58:26)
#loc88 = loc("CWE398_Poor_Code_Quality__equals_12.c":58:13)
#loc89 = loc("CWE398_Poor_Code_Quality__equals_12.c":63:9)
#loc90 = loc("CWE398_Poor_Code_Quality__equals_12.c":69:9)
#loc91 = loc("CWE398_Poor_Code_Quality__equals_12.c":64:13)
#loc92 = loc("CWE398_Poor_Code_Quality__equals_12.c":64:26)
#loc93 = loc("CWE398_Poor_Code_Quality__equals_12.c":64:39)
#loc94 = loc("CWE398_Poor_Code_Quality__equals_12.c":65:26)
#loc95 = loc("CWE398_Poor_Code_Quality__equals_12.c":65:13)
#loc96 = loc("CWE398_Poor_Code_Quality__equals_12.c":67:22)
#loc97 = loc("CWE398_Poor_Code_Quality__equals_12.c":67:13)
#loc98 = loc("CWE398_Poor_Code_Quality__equals_12.c":68:26)
#loc99 = loc("CWE398_Poor_Code_Quality__equals_12.c":68:13)
#loc100 = loc(fused[#loc1, #loc2])
#loc101 = loc(fused[#loc3, #loc4])
#loc102 = loc(fused[#loc5, #loc6])
#loc103 = loc(fused[#loc7, #loc8])
#loc104 = loc(fused[#loc9, #loc10])
#loc105 = loc(fused[#loc11, #loc12, #loc13, #loc8])
#loc106 = loc(fused[#loc14, #loc15])
#loc107 = loc(fused[#loc16, #loc17])
#loc108 = loc(fused[#loc21, #loc20])
#loc109 = loc(fused[#loc24, #loc25])
#loc110 = loc(fused[#loc26, #loc27])
#loc111 = loc(fused[#loc26, #loc28])
#loc112 = loc(fused[#loc32, #loc31])
#loc113 = loc(fused[#loc35, #loc36])
#loc114 = loc(fused[#loc37, #loc38])
#loc115 = loc(fused[#loc39, #loc40])
#loc116 = loc(fused[#loc41, #loc42])
#loc117 = loc(fused[#loc43, #loc44])
#loc118 = loc(fused[#loc49, #loc50])
#loc121 = loc(fused[#loc60, #loc61])
#loc122 = loc(fused[#loc64, #loc65])
#loc123 = loc(fused[#loc68, #loc67])
#loc124 = loc(fused[#loc69, #loc70])
#loc125 = loc(fused[#loc71, #loc72])
#loc126 = loc(fused[#loc73, #loc74])
#loc127 = loc(fused[#loc75, #loc76, #loc77, #loc72])
#loc128 = loc(fused[#loc78, #loc79])
#loc129 = loc(fused[#loc80, #loc81])
#loc130 = loc(fused[#loc80, #loc82])
#loc131 = loc(fused[#loc86, #loc85])
#loc132 = loc(fused[#loc89, #loc90])
#loc133 = loc(fused[#loc91, #loc92])
#loc134 = loc(fused[#loc91, #loc93])
#loc135 = loc(fused[#loc97, #loc96])
