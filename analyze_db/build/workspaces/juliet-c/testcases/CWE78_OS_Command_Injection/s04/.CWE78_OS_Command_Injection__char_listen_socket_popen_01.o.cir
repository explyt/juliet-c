!s32i = !cir.int<s, 32>
!s64i = !cir.int<s, 64>
!s8i = !cir.int<s, 8>
!ty__IO_codecvt = !cir.record<struct "_IO_codecvt" incomplete>
!ty__IO_marker = !cir.record<struct "_IO_marker" incomplete>
!ty__IO_wide_data = !cir.record<struct "_IO_wide_data" incomplete>
!u16i = !cir.int<u, 16>
!u32i = !cir.int<u, 32>
!u64i = !cir.int<u, 64>
!u8i = !cir.int<u, 8>
!void = !cir.void
#false = #cir.bool<false> : !cir.bool
#fn_attr = #cir<extra({nothrow = #cir.nothrow})>
#fn_attr1 = #cir<extra({inline = #cir.inline<no>, nothrow = #cir.nothrow, optnone = #cir.optnone, uwtable = #cir.uwtable<async>})>
#true = #cir.bool<true> : !cir.bool
!ty_in_addr = !cir.record<struct "in_addr" {!u32i} #cir.record.decl.ast>
!ty__IO_FILE = !cir.record<struct "_IO_FILE" {!s32i, !cir.ptr<!s8i>, !cir.ptr<!s8i>, !cir.ptr<!s8i>, !cir.ptr<!s8i>, !cir.ptr<!s8i>, !cir.ptr<!s8i>, !cir.ptr<!s8i>, !cir.ptr<!s8i>, !cir.ptr<!s8i>, !cir.ptr<!s8i>, !cir.ptr<!s8i>, !cir.ptr<!ty__IO_marker>, !cir.ptr<!cir.record<struct "_IO_FILE">>, !s32i, !s32i, !s64i, !u16i, !s8i, !cir.array<!s8i x 1>, !cir.ptr<!void>, !s64i, !cir.ptr<!ty__IO_codecvt>, !cir.ptr<!ty__IO_wide_data>, !cir.ptr<!cir.record<struct "_IO_FILE">>, !cir.ptr<!void>, !u64i, !s32i, !cir.array<!s8i x 20>} #cir.record.decl.ast>
!ty_sockaddr = !cir.record<struct "sockaddr" {!u16i, !cir.array<!s8i x 14>} #cir.record.decl.ast>
!ty_sockaddr_in = !cir.record<struct "sockaddr_in" {!u16i, !u16i, !ty_in_addr, !cir.array<!u8i x 8>}>
module @"/workspaces/juliet-c/testcases/CWE78_OS_Command_Injection/s04/CWE78_OS_Command_Injection__char_listen_socket_popen_01.c" attributes {cir.lang = #cir.lang<c>, cir.sob = #cir.signed_overflow_behavior<undefined>, cir.triple = "x86_64-unknown-linux-gnu", cir.type_size_info = #cir.type_size_info<char = 8, int = 32, size_t = 64>, cir.uwtable = #cir.uwtable<async>, dlti.dl_spec = #dlti.dl_spec<f128 = dense<128> : vector<2xi64>, !llvm.ptr<271> = dense<32> : vector<4xi64>, f16 = dense<16> : vector<2xi64>, f64 = dense<64> : vector<2xi64>, i32 = dense<32> : vector<2xi64>, i16 = dense<16> : vector<2xi64>, i8 = dense<8> : vector<2xi64>, i1 = dense<8> : vector<2xi64>, !llvm.ptr = dense<64> : vector<4xi64>, f80 = dense<128> : vector<2xi64>, i128 = dense<128> : vector<2xi64>, !llvm.ptr<272> = dense<64> : vector<4xi64>, i64 = dense<64> : vector<2xi64>, !llvm.ptr<270> = dense<32> : vector<4xi64>, "dlti.mangling_mode" = "e", "dlti.endianness" = "little", "dlti.stack_alignment" = 128 : i64>} {
  cir.global "private" constant cir_private @__const.goodG2B.data_buf = #cir.const_array<"ls " : !cir.array<!s8i x 3>, trailing_zeros> : !cir.array<!s8i x 100> loc(#loc233)
  cir.global "private" constant cir_private @__const.CWE78_OS_Command_Injection__char_listen_socket_popen_01_bad.data_buf = #cir.const_array<"ls " : !cir.array<!s8i x 3>, trailing_zeros> : !cir.array<!s8i x 100> loc(#loc234)
  cir.func private @strlen(!cir.ptr<!s8i>) -> !u64i extra(#fn_attr) loc(#loc235)
  cir.func private @socket(!s32i, !s32i, !s32i) -> !s32i extra(#fn_attr) loc(#loc236)
  cir.func private @htons(!u16i) -> !u16i extra(#fn_attr) loc(#loc237)
  cir.func private @bind(!s32i, !cir.ptr<!ty_sockaddr>, !u32i) -> !s32i extra(#fn_attr) loc(#loc238)
  cir.func private @listen(!s32i, !s32i) -> !s32i extra(#fn_attr) loc(#loc239)
  cir.func private @accept(!s32i, !cir.ptr<!ty_sockaddr>, !cir.ptr<!u32i>) -> !s32i loc(#loc240)
  cir.func private @recv(!s32i, !cir.ptr<!void>, !u64i, !s32i) -> !s64i loc(#loc241)
  cir.func private @strchr(!cir.ptr<!s8i>, !s32i) -> !cir.ptr<!s8i> extra(#fn_attr) loc(#loc242)
  cir.func private @close(!s32i) -> !s32i loc(#loc243)
  cir.func private @popen(!cir.ptr<!s8i>, !cir.ptr<!s8i>) -> !cir.ptr<!ty__IO_FILE> loc(#loc244)
  cir.global "private" constant cir_private dsolocal @".str" = #cir.const_array<"w\00" : !cir.array<!s8i x 2>> : !cir.array<!s8i x 2> {alignment = 1 : i64} loc(#loc25)
  cir.func private @pclose(!cir.ptr<!ty__IO_FILE>) -> !s32i loc(#loc245)
  cir.func no_proto @CWE78_OS_Command_Injection__char_listen_socket_popen_01_bad() extra(#fn_attr1) {
    %0 = cir.alloca !cir.ptr<!s8i>, !cir.ptr<!cir.ptr<!s8i>>, ["data"] {alignment = 8 : i64} loc(#loc247)
    %1 = cir.alloca !cir.array<!s8i x 100>, !cir.ptr<!cir.array<!s8i x 100>>, ["data_buf"] {alignment = 16 : i64} loc(#loc234)
    %2 = cir.get_global @__const.CWE78_OS_Command_Injection__char_listen_socket_popen_01_bad.data_buf : !cir.ptr<!cir.array<!s8i x 100>> loc(#loc234)
    cir.copy %2 to %1 : !cir.ptr<!cir.array<!s8i x 100>> loc(#loc234)
    %3 = cir.cast(array_to_ptrdecay, %1 : !cir.ptr<!cir.array<!s8i x 100>>), !cir.ptr<!s8i> loc(#loc32)
    cir.store %3, %0 : !cir.ptr<!s8i>, !cir.ptr<!cir.ptr<!s8i>> loc(#loc248)
    cir.scope {
      %4 = cir.alloca !s32i, !cir.ptr<!s32i>, ["recvResult"] {alignment = 4 : i64} loc(#loc250)
      %5 = cir.alloca !ty_sockaddr_in, !cir.ptr<!ty_sockaddr_in>, ["service"] {alignment = 4 : i64} loc(#loc251)
      %6 = cir.alloca !cir.ptr<!s8i>, !cir.ptr<!cir.ptr<!s8i>>, ["replace"] {alignment = 8 : i64} loc(#loc252)
      %7 = cir.alloca !s32i, !cir.ptr<!s32i>, ["listenSocket", init] {alignment = 4 : i64} loc(#loc253)
      %8 = cir.alloca !s32i, !cir.ptr<!s32i>, ["acceptSocket", init] {alignment = 4 : i64} loc(#loc254)
      %9 = cir.alloca !u64i, !cir.ptr<!u64i>, ["dataLen", init] {alignment = 8 : i64} loc(#loc255)
      %10 = cir.const #cir.int<1> : !s32i loc(#loc43)
      %11 = cir.unary(minus, %10) nsw : !s32i, !s32i loc(#loc43)
      cir.store %11, %7 : !s32i, !cir.ptr<!s32i> loc(#loc253)
      %12 = cir.const #cir.int<1> : !s32i loc(#loc45)
      %13 = cir.unary(minus, %12) nsw : !s32i, !s32i loc(#loc45)
      cir.store %13, %8 : !s32i, !cir.ptr<!s32i> loc(#loc254)
      %14 = cir.get_global @strlen : !cir.ptr<!cir.func<(!cir.ptr<!s8i>) -> !u64i>> loc(#loc48)
      %15 = cir.load %0 : !cir.ptr<!cir.ptr<!s8i>>, !cir.ptr<!s8i> loc(#loc49)
      %16 = cir.call @strlen(%15) : (!cir.ptr<!s8i>) -> !u64i side_effect(pure) extra(#fn_attr) loc(#loc48)
      cir.store %16, %9 : !u64i, !cir.ptr<!u64i> loc(#loc255)
      cir.scope {
        cir.do {
          cir.scope {
            %17 = cir.const #cir.int<2> : !s32i loc(#loc54)
            %18 = cir.const #cir.int<1> : !s32i loc(#loc55)
            %19 = cir.const #cir.int<6> : !s32i loc(#loc56)
            %20 = cir.call @socket(%17, %18, %19) : (!s32i, !s32i, !s32i) -> !s32i extra(#fn_attr) loc(#loc57)
            cir.store %20, %7 : !s32i, !cir.ptr<!s32i> loc(#loc258)
            cir.scope {
              %74 = cir.load %7 : !cir.ptr<!s32i>, !s32i loc(#loc62)
              %75 = cir.const #cir.int<1> : !s32i loc(#loc63)
              %76 = cir.unary(minus, %75) nsw : !s32i, !s32i loc(#loc63)
              %77 = cir.cmp(eq, %74, %76) : !s32i, !cir.bool loc(#loc260)
              cir.if %77 {
                cir.break loc(#loc65)
              } loc(#loc261)
            } loc(#loc259)
            %21 = cir.cast(bitcast, %5 : !cir.ptr<!ty_sockaddr_in>), !cir.ptr<!void> loc(#loc262)
            %22 = cir.const #cir.int<0> : !s32i loc(#loc68)
            %23 = cir.const #cir.int<16> : !u64i loc(#loc263)
            cir.libc.memset %23 bytes from %21 set to %22 : !cir.ptr<!void>, !s32i, !u64i loc(#loc264)
            %24 = cir.const #cir.int<2> : !s32i loc(#loc73)
            %25 = cir.cast(integral, %24 : !s32i), !u16i loc(#loc73)
            %26 = cir.get_member %5[0] {name = "sin_family"} : !cir.ptr<!ty_sockaddr_in> -> !cir.ptr<!u16i> loc(#loc74)
            cir.store %25, %26 : !u16i, !cir.ptr<!u16i> loc(#loc265)
            %27 = cir.const #cir.int<0> : !s32i loc(#loc76)
            %28 = cir.cast(integral, %27 : !s32i), !u32i loc(#loc76)
            %29 = cir.get_member %5[2] {name = "sin_addr"} : !cir.ptr<!ty_sockaddr_in> -> !cir.ptr<!ty_in_addr> loc(#loc77)
            %30 = cir.get_member %29[0] {name = "s_addr"} : !cir.ptr<!ty_in_addr> -> !cir.ptr<!u32i> loc(#loc78)
            cir.store %28, %30 : !u32i, !cir.ptr<!u32i> loc(#loc266)
            %31 = cir.const #cir.int<27015> : !s32i loc(#loc80)
            %32 = cir.cast(integral, %31 : !s32i), !u16i loc(#loc80)
            %33 = cir.call @htons(%32) : (!u16i) -> !u16i side_effect(const) extra(#fn_attr) loc(#loc81)
            %34 = cir.get_member %5[1] {name = "sin_port"} : !cir.ptr<!ty_sockaddr_in> -> !cir.ptr<!u16i> loc(#loc82)
            cir.store %33, %34 : !u16i, !cir.ptr<!u16i> loc(#loc267)
            cir.scope {
              %74 = cir.load %7 : !cir.ptr<!s32i>, !s32i loc(#loc87)
              %75 = cir.cast(bitcast, %5 : !cir.ptr<!ty_sockaddr_in>), !cir.ptr<!ty_sockaddr> loc(#loc269)
              %76 = cir.const #cir.int<16> : !u64i loc(#loc270)
              %77 = cir.cast(integral, %76 : !u64i), !u32i loc(#loc270)
              %78 = cir.call @bind(%74, %75, %77) : (!s32i, !cir.ptr<!ty_sockaddr>, !u32i) -> !s32i extra(#fn_attr) loc(#loc92)
              %79 = cir.const #cir.int<1> : !s32i loc(#loc93)
              %80 = cir.unary(minus, %79) nsw : !s32i, !s32i loc(#loc93)
              %81 = cir.cmp(eq, %78, %80) : !s32i, !cir.bool loc(#loc271)
              cir.if %81 {
                cir.break loc(#loc95)
              } loc(#loc272)
            } loc(#loc268)
            cir.scope {
              %74 = cir.load %7 : !cir.ptr<!s32i>, !s32i loc(#loc98)
              %75 = cir.const #cir.int<5> : !s32i loc(#loc99)
              %76 = cir.call @listen(%74, %75) : (!s32i, !s32i) -> !s32i extra(#fn_attr) loc(#loc100)
              %77 = cir.const #cir.int<1> : !s32i loc(#loc101)
              %78 = cir.unary(minus, %77) nsw : !s32i, !s32i loc(#loc101)
              %79 = cir.cmp(eq, %76, %78) : !s32i, !cir.bool loc(#loc274)
              cir.if %79 {
                cir.break loc(#loc103)
              } loc(#loc275)
            } loc(#loc273)
            %35 = cir.load %7 : !cir.ptr<!s32i>, !s32i loc(#loc104)
            %36 = cir.const #cir.ptr<null> : !cir.ptr<!ty_sockaddr> loc(#loc105)
            %37 = cir.const #cir.ptr<null> : !cir.ptr<!u32i> loc(#loc106)
            %38 = cir.call @accept(%35, %36, %37) : (!s32i, !cir.ptr<!ty_sockaddr>, !cir.ptr<!u32i>) -> !s32i loc(#loc107)
            cir.store %38, %8 : !s32i, !cir.ptr<!s32i> loc(#loc276)
            cir.scope {
              %74 = cir.load %8 : !cir.ptr<!s32i>, !s32i loc(#loc112)
              %75 = cir.const #cir.int<1> : !s32i loc(#loc113)
              %76 = cir.unary(minus, %75) nsw : !s32i, !s32i loc(#loc113)
              %77 = cir.cmp(eq, %74, %76) : !s32i, !cir.bool loc(#loc278)
              cir.if %77 {
                cir.break loc(#loc115)
              } loc(#loc279)
            } loc(#loc277)
            %39 = cir.load %8 : !cir.ptr<!s32i>, !s32i loc(#loc116)
            %40 = cir.load %0 : !cir.ptr<!cir.ptr<!s8i>>, !cir.ptr<!s8i> loc(#loc117)
            %41 = cir.load %9 : !cir.ptr<!u64i>, !u64i loc(#loc118)
            %42 = cir.ptr_stride(%40 : !cir.ptr<!s8i>, %41 : !u64i), !cir.ptr<!s8i> loc(#loc119)
            %43 = cir.cast(bitcast, %42 : !cir.ptr<!s8i>), !cir.ptr<!void> loc(#loc280)
            %44 = cir.const #cir.int<1> : !u64i loc(#loc281)
            %45 = cir.const #cir.int<100> : !s32i loc(#loc124)
            %46 = cir.cast(integral, %45 : !s32i), !u64i loc(#loc124)
            %47 = cir.load %9 : !cir.ptr<!u64i>, !u64i loc(#loc125)
            %48 = cir.binop(sub, %46, %47) : !u64i loc(#loc282)
            %49 = cir.const #cir.int<1> : !s32i loc(#loc126)
            %50 = cir.cast(integral, %49 : !s32i), !u64i loc(#loc126)
            %51 = cir.binop(sub, %48, %50) : !u64i loc(#loc283)
            %52 = cir.binop(mul, %44, %51) : !u64i loc(#loc284)
            %53 = cir.const #cir.int<0> : !s32i loc(#loc128)
            %54 = cir.call @recv(%39, %43, %52, %53) : (!s32i, !cir.ptr<!void>, !u64i, !s32i) -> !s64i loc(#loc129)
            %55 = cir.cast(integral, %54 : !s64i), !s32i loc(#loc129)
            cir.store %55, %4 : !s32i, !cir.ptr<!s32i> loc(#loc285)
            cir.scope {
              %74 = cir.load %4 : !cir.ptr<!s32i>, !s32i loc(#loc134)
              %75 = cir.const #cir.int<1> : !s32i loc(#loc135)
              %76 = cir.unary(minus, %75) nsw : !s32i, !s32i loc(#loc135)
              %77 = cir.cmp(eq, %74, %76) : !s32i, !cir.bool loc(#loc287)
              %78 = cir.ternary(%77, true {
                %79 = cir.const #true loc(#loc136)
                cir.yield %79 : !cir.bool loc(#loc136)
              }, false {
                %79 = cir.load %4 : !cir.ptr<!s32i>, !s32i loc(#loc137)
                %80 = cir.const #cir.int<0> : !s32i loc(#loc138)
                %81 = cir.cmp(eq, %79, %80) : !s32i, !cir.bool loc(#loc288)
                %82 = cir.ternary(%81, true {
                  %83 = cir.const #true loc(#loc136)
                  cir.yield %83 : !cir.bool loc(#loc136)
                }, false {
                  %83 = cir.const #false loc(#loc136)
                  cir.yield %83 : !cir.bool loc(#loc136)
                }) : (!cir.bool) -> !cir.bool loc(#loc136)
                cir.yield %82 : !cir.bool loc(#loc136)
              }) : (!cir.bool) -> !cir.bool loc(#loc136)
              cir.if %78 {
                cir.break loc(#loc140)
              } loc(#loc289)
            } loc(#loc286)
            %56 = cir.const #cir.int<0> : !s32i loc(#loc141)
            %57 = cir.cast(integral, %56 : !s32i), !s8i loc(#loc141)
            %58 = cir.load %0 : !cir.ptr<!cir.ptr<!s8i>>, !cir.ptr<!s8i> loc(#loc142)
            %59 = cir.load %9 : !cir.ptr<!u64i>, !u64i loc(#loc143)
            %60 = cir.load %4 : !cir.ptr<!s32i>, !s32i loc(#loc144)
            %61 = cir.cast(integral, %60 : !s32i), !u64i loc(#loc144)
            %62 = cir.const #cir.int<1> : !u64i loc(#loc290)
            %63 = cir.binop(div, %61, %62) : !u64i loc(#loc291)
            %64 = cir.binop(add, %59, %63) : !u64i loc(#loc292)
            %65 = cir.ptr_stride(%58 : !cir.ptr<!s8i>, %64 : !u64i), !cir.ptr<!s8i> loc(#loc147)
            cir.store %57, %65 : !s8i, !cir.ptr<!s8i> loc(#loc293)
            %66 = cir.get_global @strchr : !cir.ptr<!cir.func<(!cir.ptr<!s8i>, !s32i) -> !cir.ptr<!s8i>>> loc(#loc148)
            %67 = cir.load %0 : !cir.ptr<!cir.ptr<!s8i>>, !cir.ptr<!s8i> loc(#loc149)
            %68 = cir.const #cir.int<13> : !s32i loc(#loc150)
            %69 = cir.call @strchr(%67, %68) : (!cir.ptr<!s8i>, !s32i) -> !cir.ptr<!s8i> side_effect(pure) extra(#fn_attr) loc(#loc148)
            cir.store %69, %6 : !cir.ptr<!s8i>, !cir.ptr<!cir.ptr<!s8i>> loc(#loc294)
            cir.scope {
              %74 = cir.load %6 : !cir.ptr<!cir.ptr<!s8i>>, !cir.ptr<!s8i> loc(#loc155)
              %75 = cir.cast(ptr_to_bool, %74 : !cir.ptr<!s8i>), !cir.bool loc(#loc155)
              cir.if %75 {
                %76 = cir.const #cir.int<0> : !s32i loc(#loc157)
                %77 = cir.cast(integral, %76 : !s32i), !s8i loc(#loc157)
                %78 = cir.load deref %6 : !cir.ptr<!cir.ptr<!s8i>>, !cir.ptr<!s8i> loc(#loc158)
                cir.store %77, %78 : !s8i, !cir.ptr<!s8i> loc(#loc297)
              } loc(#loc296)
            } loc(#loc295)
            %70 = cir.get_global @strchr : !cir.ptr<!cir.func<(!cir.ptr<!s8i>, !s32i) -> !cir.ptr<!s8i>>> loc(#loc160)
            %71 = cir.load %0 : !cir.ptr<!cir.ptr<!s8i>>, !cir.ptr<!s8i> loc(#loc161)
            %72 = cir.const #cir.int<10> : !s32i loc(#loc162)
            %73 = cir.call @strchr(%71, %72) : (!cir.ptr<!s8i>, !s32i) -> !cir.ptr<!s8i> side_effect(pure) extra(#fn_attr) loc(#loc160)
            cir.store %73, %6 : !cir.ptr<!s8i>, !cir.ptr<!cir.ptr<!s8i>> loc(#loc298)
            cir.scope {
              %74 = cir.load %6 : !cir.ptr<!cir.ptr<!s8i>>, !cir.ptr<!s8i> loc(#loc167)
              %75 = cir.cast(ptr_to_bool, %74 : !cir.ptr<!s8i>), !cir.bool loc(#loc167)
              cir.if %75 {
                %76 = cir.const #cir.int<0> : !s32i loc(#loc169)
                %77 = cir.cast(integral, %76 : !s32i), !s8i loc(#loc169)
                %78 = cir.load deref %6 : !cir.ptr<!cir.ptr<!s8i>>, !cir.ptr<!s8i> loc(#loc170)
                cir.store %77, %78 : !s8i, !cir.ptr<!s8i> loc(#loc301)
              } loc(#loc300)
            } loc(#loc299)
          } loc(#loc257)
          cir.yield loc(#loc51)
        } while {
          %17 = cir.const #cir.int<0> : !s32i loc(#loc172)
          %18 = cir.cast(int_to_bool, %17 : !s32i), !cir.bool loc(#loc172)
          cir.condition(%18) loc(#loc172)
        } loc(#loc256)
      } loc(#loc256)
      cir.scope {
        %17 = cir.load %7 : !cir.ptr<!s32i>, !s32i loc(#loc175)
        %18 = cir.const #cir.int<1> : !s32i loc(#loc176)
        %19 = cir.unary(minus, %18) nsw : !s32i, !s32i loc(#loc176)
        %20 = cir.cmp(ne, %17, %19) : !s32i, !cir.bool loc(#loc303)
        cir.if %20 {
          %21 = cir.load %7 : !cir.ptr<!s32i>, !s32i loc(#loc178)
          %22 = cir.call @close(%21) : (!s32i) -> !s32i loc(#loc179)
        } loc(#loc304)
      } loc(#loc302)
      cir.scope {
        %17 = cir.load %8 : !cir.ptr<!s32i>, !s32i loc(#loc182)
        %18 = cir.const #cir.int<1> : !s32i loc(#loc183)
        %19 = cir.unary(minus, %18) nsw : !s32i, !s32i loc(#loc183)
        %20 = cir.cmp(ne, %17, %19) : !s32i, !cir.bool loc(#loc306)
        cir.if %20 {
          %21 = cir.load %8 : !cir.ptr<!s32i>, !s32i loc(#loc185)
          %22 = cir.call @close(%21) : (!s32i) -> !s32i loc(#loc186)
        } loc(#loc307)
      } loc(#loc305)
    } loc(#loc249)
    cir.scope {
      %4 = cir.alloca !cir.ptr<!ty__IO_FILE>, !cir.ptr<!cir.ptr<!ty__IO_FILE>>, ["pipe"] {alignment = 8 : i64} loc(#loc309)
      %5 = cir.load %0 : !cir.ptr<!cir.ptr<!s8i>>, !cir.ptr<!s8i> loc(#loc191)
      %6 = cir.get_global @".str" : !cir.ptr<!cir.array<!s8i x 2>> loc(#loc25)
      %7 = cir.cast(array_to_ptrdecay, %6 : !cir.ptr<!cir.array<!s8i x 2>>), !cir.ptr<!s8i> loc(#loc25)
      %8 = cir.call @popen(%5, %7) : (!cir.ptr<!s8i>, !cir.ptr<!s8i>) -> !cir.ptr<!ty__IO_FILE> loc(#loc192)
      cir.store %8, %4 : !cir.ptr<!ty__IO_FILE>, !cir.ptr<!cir.ptr<!ty__IO_FILE>> loc(#loc310)
      cir.scope {
        %9 = cir.load %4 : !cir.ptr<!cir.ptr<!ty__IO_FILE>>, !cir.ptr<!ty__IO_FILE> loc(#loc197)
        %10 = cir.const #cir.ptr<null> : !cir.ptr<!void> loc(#loc198)
        %11 = cir.cast(bitcast, %10 : !cir.ptr<!void>), !cir.ptr<!ty__IO_FILE> loc(#loc198)
        %12 = cir.cmp(ne, %9, %11) : !cir.ptr<!ty__IO_FILE>, !cir.bool loc(#loc312)
        cir.if %12 {
          %13 = cir.load %4 : !cir.ptr<!cir.ptr<!ty__IO_FILE>>, !cir.ptr<!ty__IO_FILE> loc(#loc200)
          %14 = cir.call @pclose(%13) : (!cir.ptr<!ty__IO_FILE>) -> !s32i loc(#loc201)
        } loc(#loc313)
      } loc(#loc311)
    } loc(#loc308)
    cir.return loc(#loc29)
  } loc(#loc246)
  cir.func no_proto @CWE78_OS_Command_Injection__char_listen_socket_popen_01_good() extra(#fn_attr1) {
    %0 = cir.get_global @goodG2B : !cir.ptr<!cir.func<()>> loc(#loc315)
    cir.call %0() : (!cir.ptr<!cir.func<()>>) -> () loc(#loc204)
    cir.return loc(#loc203)
  } loc(#loc314)
  cir.func private @strcat(!cir.ptr<!s8i>, !cir.ptr<!s8i>) -> !cir.ptr<!s8i> extra(#fn_attr) loc(#loc316)
  cir.global "private" constant cir_private dsolocal @".str.1" = #cir.const_array<"*.*\00" : !cir.array<!s8i x 4>> : !cir.array<!s8i x 4> {alignment = 1 : i64} loc(#loc208)
  cir.func no_proto internal private @goodG2B() extra(#fn_attr1) {
    %0 = cir.alloca !cir.ptr<!s8i>, !cir.ptr<!cir.ptr<!s8i>>, ["data"] {alignment = 8 : i64} loc(#loc318)
    %1 = cir.alloca !cir.array<!s8i x 100>, !cir.ptr<!cir.array<!s8i x 100>>, ["data_buf"] {alignment = 16 : i64} loc(#loc233)
    %2 = cir.get_global @__const.goodG2B.data_buf : !cir.ptr<!cir.array<!s8i x 100>> loc(#loc233)
    cir.copy %2 to %1 : !cir.ptr<!cir.array<!s8i x 100>> loc(#loc233)
    %3 = cir.cast(array_to_ptrdecay, %1 : !cir.ptr<!cir.array<!s8i x 100>>), !cir.ptr<!s8i> loc(#loc213)
    cir.store %3, %0 : !cir.ptr<!s8i>, !cir.ptr<!cir.ptr<!s8i>> loc(#loc319)
    %4 = cir.get_global @strcat : !cir.ptr<!cir.func<(!cir.ptr<!s8i>, !cir.ptr<!s8i>) -> !cir.ptr<!s8i>>> loc(#loc215)
    %5 = cir.load %0 : !cir.ptr<!cir.ptr<!s8i>>, !cir.ptr<!s8i> loc(#loc216)
    %6 = cir.get_global @".str.1" : !cir.ptr<!cir.array<!s8i x 4>> loc(#loc208)
    %7 = cir.cast(array_to_ptrdecay, %6 : !cir.ptr<!cir.array<!s8i x 4>>), !cir.ptr<!s8i> loc(#loc208)
    %8 = cir.call @strcat(%5, %7) : (!cir.ptr<!s8i>, !cir.ptr<!s8i>) -> !cir.ptr<!s8i> extra(#fn_attr) loc(#loc215)
    cir.scope {
      %9 = cir.alloca !cir.ptr<!ty__IO_FILE>, !cir.ptr<!cir.ptr<!ty__IO_FILE>>, ["pipe"] {alignment = 8 : i64} loc(#loc321)
      %10 = cir.load %0 : !cir.ptr<!cir.ptr<!s8i>>, !cir.ptr<!s8i> loc(#loc221)
      %11 = cir.get_global @".str" : !cir.ptr<!cir.array<!s8i x 2>> loc(#loc222)
      %12 = cir.cast(array_to_ptrdecay, %11 : !cir.ptr<!cir.array<!s8i x 2>>), !cir.ptr<!s8i> loc(#loc222)
      %13 = cir.call @popen(%10, %12) : (!cir.ptr<!s8i>, !cir.ptr<!s8i>) -> !cir.ptr<!ty__IO_FILE> loc(#loc223)
      cir.store %13, %9 : !cir.ptr<!ty__IO_FILE>, !cir.ptr<!cir.ptr<!ty__IO_FILE>> loc(#loc322)
      cir.scope {
        %14 = cir.load %9 : !cir.ptr<!cir.ptr<!ty__IO_FILE>>, !cir.ptr<!ty__IO_FILE> loc(#loc228)
        %15 = cir.const #cir.ptr<null> : !cir.ptr<!void> loc(#loc229)
        %16 = cir.cast(bitcast, %15 : !cir.ptr<!void>), !cir.ptr<!ty__IO_FILE> loc(#loc229)
        %17 = cir.cmp(ne, %14, %16) : !cir.ptr<!ty__IO_FILE>, !cir.bool loc(#loc324)
        cir.if %17 {
          %18 = cir.load %9 : !cir.ptr<!cir.ptr<!ty__IO_FILE>>, !cir.ptr<!ty__IO_FILE> loc(#loc231)
          %19 = cir.call @pclose(%18) : (!cir.ptr<!ty__IO_FILE>) -> !s32i loc(#loc232)
        } loc(#loc325)
      } loc(#loc323)
    } loc(#loc320)
    cir.return loc(#loc210)
  } loc(#loc317)
} loc(#loc)
#loc = loc("/workspaces/juliet-c/testcases/CWE78_OS_Command_Injection/s04/CWE78_OS_Command_Injection__char_listen_socket_popen_01.c":0:0)
#loc1 = loc("CWE78_OS_Command_Injection__char_listen_socket_popen_01.c":162:5)
#loc2 = loc("CWE78_OS_Command_Injection__char_listen_socket_popen_01.c":162:26)
#loc3 = loc("CWE78_OS_Command_Injection__char_listen_socket_popen_01.c":62:5)
#loc4 = loc("CWE78_OS_Command_Injection__char_listen_socket_popen_01.c":62:26)
#loc5 = loc("/usr/include/string.h":407:1)
#loc6 = loc("/usr/include/string.h":408:33)
#loc7 = loc("/usr/include/x86_64-linux-gnu/sys/socket.h":102:1)
#loc8 = loc("/usr/include/x86_64-linux-gnu/sys/socket.h":102:62)
#loc9 = loc("/usr/include/netinet/in.h":402:1)
#loc10 = loc("/usr/include/netinet/in.h":403:40)
#loc11 = loc("/usr/include/x86_64-linux-gnu/sys/socket.h":112:1)
#loc12 = loc("/usr/include/x86_64-linux-gnu/sys/socket.h":113:6)
#loc13 = loc("/usr/include/x86_64-linux-gnu/sys/socket.h":296:1)
#loc14 = loc("/usr/include/x86_64-linux-gnu/sys/socket.h":296:39)
#loc15 = loc("/usr/include/x86_64-linux-gnu/sys/socket.h":306:1)
#loc16 = loc("/usr/include/x86_64-linux-gnu/sys/socket.h":307:38)
#loc17 = loc("/usr/include/x86_64-linux-gnu/sys/socket.h":145:1)
#loc18 = loc("/usr/include/x86_64-linux-gnu/sys/socket.h":145:68)
#loc19 = loc("/usr/include/string.h":246:1)
#loc20 = loc("/usr/include/string.h":247:33)
#loc21 = loc("/usr/include/unistd.h":358:1)
#loc22 = loc("/usr/include/unistd.h":358:27)
#loc23 = loc("/usr/include/stdio.h":903:1)
#loc24 = loc("/usr/include/stdio.h":904:3)
#loc25 = loc("CWE78_OS_Command_Injection__char_listen_socket_popen_01.c":146:28)
#loc26 = loc("/usr/include/stdio.h":897:1)
#loc27 = loc("/usr/include/stdio.h":897:36)
#loc28 = loc("CWE78_OS_Command_Injection__char_listen_socket_popen_01.c":59:1)
#loc29 = loc("CWE78_OS_Command_Injection__char_listen_socket_popen_01.c":152:1)
#loc30 = loc("CWE78_OS_Command_Injection__char_listen_socket_popen_01.c":61:5)
#loc31 = loc("CWE78_OS_Command_Injection__char_listen_socket_popen_01.c":61:12)
#loc32 = loc("CWE78_OS_Command_Injection__char_listen_socket_popen_01.c":63:12)
#loc33 = loc("CWE78_OS_Command_Injection__char_listen_socket_popen_01.c":63:5)
#loc34 = loc("CWE78_OS_Command_Injection__char_listen_socket_popen_01.c":64:5)
#loc35 = loc("CWE78_OS_Command_Injection__char_listen_socket_popen_01.c":142:5)
#loc36 = loc("CWE78_OS_Command_Injection__char_listen_socket_popen_01.c":69:9)
#loc37 = loc("CWE78_OS_Command_Injection__char_listen_socket_popen_01.c":69:13)
#loc38 = loc("CWE78_OS_Command_Injection__char_listen_socket_popen_01.c":70:9)
#loc39 = loc("CWE78_OS_Command_Injection__char_listen_socket_popen_01.c":70:28)
#loc40 = loc("CWE78_OS_Command_Injection__char_listen_socket_popen_01.c":71:9)
#loc41 = loc("CWE78_OS_Command_Injection__char_listen_socket_popen_01.c":71:15)
#loc42 = loc("CWE78_OS_Command_Injection__char_listen_socket_popen_01.c":72:9)
#loc43 = loc("CWE78_OS_Command_Injection__char_listen_socket_popen_01.c":72:31)
#loc44 = loc("CWE78_OS_Command_Injection__char_listen_socket_popen_01.c":73:9)
#loc45 = loc("CWE78_OS_Command_Injection__char_listen_socket_popen_01.c":73:31)
#loc46 = loc("CWE78_OS_Command_Injection__char_listen_socket_popen_01.c":74:9)
#loc47 = loc("CWE78_OS_Command_Injection__char_listen_socket_popen_01.c":74:37)
#loc48 = loc("CWE78_OS_Command_Injection__char_listen_socket_popen_01.c":74:26)
#loc49 = loc("CWE78_OS_Command_Injection__char_listen_socket_popen_01.c":74:33)
#loc50 = loc("CWE78_OS_Command_Injection__char_listen_socket_popen_01.c":75:9)
#loc51 = loc("CWE78_OS_Command_Injection__char_listen_socket_popen_01.c":127:17)
#loc52 = loc("CWE78_OS_Command_Injection__char_listen_socket_popen_01.c":76:9)
#loc53 = loc("CWE78_OS_Command_Injection__char_listen_socket_popen_01.c":126:9)
#loc54 = loc("CWE78_OS_Command_Injection__char_listen_socket_popen_01.c":85:35)
#loc55 = loc("CWE78_OS_Command_Injection__char_listen_socket_popen_01.c":85:44)
#loc56 = loc("CWE78_OS_Command_Injection__char_listen_socket_popen_01.c":85:57)
#loc57 = loc("CWE78_OS_Command_Injection__char_listen_socket_popen_01.c":85:28)
#loc58 = loc("CWE78_OS_Command_Injection__char_listen_socket_popen_01.c":85:13)
#loc59 = loc("CWE78_OS_Command_Injection__char_listen_socket_popen_01.c":85:68)
#loc60 = loc("CWE78_OS_Command_Injection__char_listen_socket_popen_01.c":86:13)
#loc61 = loc("CWE78_OS_Command_Injection__char_listen_socket_popen_01.c":89:13)
#loc62 = loc("CWE78_OS_Command_Injection__char_listen_socket_popen_01.c":86:17)
#loc63 = loc("CWE78_OS_Command_Injection__char_listen_socket_popen_01.c":86:33)
#loc64 = loc("CWE78_OS_Command_Injection__char_listen_socket_popen_01.c":87:13)
#loc65 = loc("CWE78_OS_Command_Injection__char_listen_socket_popen_01.c":88:17)
#loc66 = loc("CWE78_OS_Command_Injection__char_listen_socket_popen_01.c":90:20)
#loc67 = loc("CWE78_OS_Command_Injection__char_listen_socket_popen_01.c":90:21)
#loc68 = loc("CWE78_OS_Command_Injection__char_listen_socket_popen_01.c":90:30)
#loc69 = loc("CWE78_OS_Command_Injection__char_listen_socket_popen_01.c":90:33)
#loc70 = loc("CWE78_OS_Command_Injection__char_listen_socket_popen_01.c":90:47)
#loc71 = loc("CWE78_OS_Command_Injection__char_listen_socket_popen_01.c":90:13)
#loc72 = loc("CWE78_OS_Command_Injection__char_listen_socket_popen_01.c":90:48)
#loc73 = loc("CWE78_OS_Command_Injection__char_listen_socket_popen_01.c":91:34)
#loc74 = loc("/usr/include/netinet/in.h":249:5)
#loc75 = loc("CWE78_OS_Command_Injection__char_listen_socket_popen_01.c":91:13)
#loc76 = loc("CWE78_OS_Command_Injection__char_listen_socket_popen_01.c":92:39)
#loc77 = loc("/usr/include/netinet/in.h":251:20)
#loc78 = loc("/usr/include/netinet/in.h":33:15)
#loc79 = loc("CWE78_OS_Command_Injection__char_listen_socket_popen_01.c":92:13)
#loc80 = loc("CWE78_OS_Command_Injection__char_listen_socket_popen_01.c":93:38)
#loc81 = loc("CWE78_OS_Command_Injection__char_listen_socket_popen_01.c":93:32)
#loc82 = loc("/usr/include/netinet/in.h":250:15)
#loc83 = loc("CWE78_OS_Command_Injection__char_listen_socket_popen_01.c":93:13)
#loc84 = loc("CWE78_OS_Command_Injection__char_listen_socket_popen_01.c":93:46)
#loc85 = loc("CWE78_OS_Command_Injection__char_listen_socket_popen_01.c":94:13)
#loc86 = loc("CWE78_OS_Command_Injection__char_listen_socket_popen_01.c":97:13)
#loc87 = loc("CWE78_OS_Command_Injection__char_listen_socket_popen_01.c":94:22)
#loc88 = loc("CWE78_OS_Command_Injection__char_listen_socket_popen_01.c":94:54)
#loc89 = loc("CWE78_OS_Command_Injection__char_listen_socket_popen_01.c":94:55)
#loc90 = loc("CWE78_OS_Command_Injection__char_listen_socket_popen_01.c":94:64)
#loc91 = loc("CWE78_OS_Command_Injection__char_listen_socket_popen_01.c":94:78)
#loc92 = loc("CWE78_OS_Command_Injection__char_listen_socket_popen_01.c":94:17)
#loc93 = loc("CWE78_OS_Command_Injection__char_listen_socket_popen_01.c":94:84)
#loc94 = loc("CWE78_OS_Command_Injection__char_listen_socket_popen_01.c":95:13)
#loc95 = loc("CWE78_OS_Command_Injection__char_listen_socket_popen_01.c":96:17)
#loc96 = loc("CWE78_OS_Command_Injection__char_listen_socket_popen_01.c":98:13)
#loc97 = loc("CWE78_OS_Command_Injection__char_listen_socket_popen_01.c":101:13)
#loc98 = loc("CWE78_OS_Command_Injection__char_listen_socket_popen_01.c":98:24)
#loc99 = loc("CWE78_OS_Command_Injection__char_listen_socket_popen_01.c":98:38)
#loc100 = loc("CWE78_OS_Command_Injection__char_listen_socket_popen_01.c":98:17)
#loc101 = loc("CWE78_OS_Command_Injection__char_listen_socket_popen_01.c":98:57)
#loc102 = loc("CWE78_OS_Command_Injection__char_listen_socket_popen_01.c":99:13)
#loc103 = loc("CWE78_OS_Command_Injection__char_listen_socket_popen_01.c":100:17)
#loc104 = loc("CWE78_OS_Command_Injection__char_listen_socket_popen_01.c":102:35)
#loc105 = loc("CWE78_OS_Command_Injection__char_listen_socket_popen_01.c":102:49)
#loc106 = loc("CWE78_OS_Command_Injection__char_listen_socket_popen_01.c":102:55)
#loc107 = loc("CWE78_OS_Command_Injection__char_listen_socket_popen_01.c":102:28)
#loc108 = loc("CWE78_OS_Command_Injection__char_listen_socket_popen_01.c":102:13)
#loc109 = loc("CWE78_OS_Command_Injection__char_listen_socket_popen_01.c":102:59)
#loc110 = loc("CWE78_OS_Command_Injection__char_listen_socket_popen_01.c":103:13)
#loc111 = loc("CWE78_OS_Command_Injection__char_listen_socket_popen_01.c":106:13)
#loc112 = loc("CWE78_OS_Command_Injection__char_listen_socket_popen_01.c":103:17)
#loc113 = loc("CWE78_OS_Command_Injection__char_listen_socket_popen_01.c":103:33)
#loc114 = loc("CWE78_OS_Command_Injection__char_listen_socket_popen_01.c":104:13)
#loc115 = loc("CWE78_OS_Command_Injection__char_listen_socket_popen_01.c":105:17)
#loc116 = loc("CWE78_OS_Command_Injection__char_listen_socket_popen_01.c":108:31)
#loc117 = loc("CWE78_OS_Command_Injection__char_listen_socket_popen_01.c":108:54)
#loc118 = loc("CWE78_OS_Command_Injection__char_listen_socket_popen_01.c":108:61)
#loc119 = loc("CWE78_OS_Command_Injection__char_listen_socket_popen_01.c":108:59)
#loc120 = loc("CWE78_OS_Command_Injection__char_listen_socket_popen_01.c":108:45)
#loc121 = loc("CWE78_OS_Command_Injection__char_listen_socket_popen_01.c":108:68)
#loc122 = loc("CWE78_OS_Command_Injection__char_listen_socket_popen_01.c":108:71)
#loc123 = loc("CWE78_OS_Command_Injection__char_listen_socket_popen_01.c":108:82)
#loc124 = loc("CWE78_OS_Command_Injection__char_listen_socket_popen_01.c":108:87)
#loc125 = loc("CWE78_OS_Command_Injection__char_listen_socket_popen_01.c":108:93)
#loc126 = loc("CWE78_OS_Command_Injection__char_listen_socket_popen_01.c":108:103)
#loc127 = loc("CWE78_OS_Command_Injection__char_listen_socket_popen_01.c":108:104)
#loc128 = loc("CWE78_OS_Command_Injection__char_listen_socket_popen_01.c":108:107)
#loc129 = loc("CWE78_OS_Command_Injection__char_listen_socket_popen_01.c":108:26)
#loc130 = loc("CWE78_OS_Command_Injection__char_listen_socket_popen_01.c":108:13)
#loc131 = loc("CWE78_OS_Command_Injection__char_listen_socket_popen_01.c":108:108)
#loc132 = loc("CWE78_OS_Command_Injection__char_listen_socket_popen_01.c":109:13)
#loc133 = loc("CWE78_OS_Command_Injection__char_listen_socket_popen_01.c":112:13)
#loc134 = loc("CWE78_OS_Command_Injection__char_listen_socket_popen_01.c":109:17)
#loc135 = loc("CWE78_OS_Command_Injection__char_listen_socket_popen_01.c":109:31)
#loc136 = loc("CWE78_OS_Command_Injection__char_listen_socket_popen_01.c":109:44)
#loc137 = loc("CWE78_OS_Command_Injection__char_listen_socket_popen_01.c":109:47)
#loc138 = loc("CWE78_OS_Command_Injection__char_listen_socket_popen_01.c":109:61)
#loc139 = loc("CWE78_OS_Command_Injection__char_listen_socket_popen_01.c":110:13)
#loc140 = loc("CWE78_OS_Command_Injection__char_listen_socket_popen_01.c":111:17)
#loc141 = loc("CWE78_OS_Command_Injection__char_listen_socket_popen_01.c":114:57)
#loc142 = loc("CWE78_OS_Command_Injection__char_listen_socket_popen_01.c":114:13)
#loc143 = loc("CWE78_OS_Command_Injection__char_listen_socket_popen_01.c":114:18)
#loc144 = loc("CWE78_OS_Command_Injection__char_listen_socket_popen_01.c":114:28)
#loc145 = loc("CWE78_OS_Command_Injection__char_listen_socket_popen_01.c":114:41)
#loc146 = loc("CWE78_OS_Command_Injection__char_listen_socket_popen_01.c":114:52)
#loc147 = loc("CWE78_OS_Command_Injection__char_listen_socket_popen_01.c":114:53)
#loc148 = loc("CWE78_OS_Command_Injection__char_listen_socket_popen_01.c":116:23)
#loc149 = loc("CWE78_OS_Command_Injection__char_listen_socket_popen_01.c":116:30)
#loc150 = loc("CWE78_OS_Command_Injection__char_listen_socket_popen_01.c":116:36)
#loc151 = loc("CWE78_OS_Command_Injection__char_listen_socket_popen_01.c":116:13)
#loc152 = loc("CWE78_OS_Command_Injection__char_listen_socket_popen_01.c":116:40)
#loc153 = loc("CWE78_OS_Command_Injection__char_listen_socket_popen_01.c":117:13)
#loc154 = loc("CWE78_OS_Command_Injection__char_listen_socket_popen_01.c":120:13)
#loc155 = loc("CWE78_OS_Command_Injection__char_listen_socket_popen_01.c":117:17)
#loc156 = loc("CWE78_OS_Command_Injection__char_listen_socket_popen_01.c":118:13)
#loc157 = loc("CWE78_OS_Command_Injection__char_listen_socket_popen_01.c":119:28)
#loc158 = loc("CWE78_OS_Command_Injection__char_listen_socket_popen_01.c":119:18)
#loc159 = loc("CWE78_OS_Command_Injection__char_listen_socket_popen_01.c":119:17)
#loc160 = loc("CWE78_OS_Command_Injection__char_listen_socket_popen_01.c":121:23)
#loc161 = loc("CWE78_OS_Command_Injection__char_listen_socket_popen_01.c":121:30)
#loc162 = loc("CWE78_OS_Command_Injection__char_listen_socket_popen_01.c":121:36)
#loc163 = loc("CWE78_OS_Command_Injection__char_listen_socket_popen_01.c":121:13)
#loc164 = loc("CWE78_OS_Command_Injection__char_listen_socket_popen_01.c":121:40)
#loc165 = loc("CWE78_OS_Command_Injection__char_listen_socket_popen_01.c":122:13)
#loc166 = loc("CWE78_OS_Command_Injection__char_listen_socket_popen_01.c":125:13)
#loc167 = loc("CWE78_OS_Command_Injection__char_listen_socket_popen_01.c":122:17)
#loc168 = loc("CWE78_OS_Command_Injection__char_listen_socket_popen_01.c":123:13)
#loc169 = loc("CWE78_OS_Command_Injection__char_listen_socket_popen_01.c":124:28)
#loc170 = loc("CWE78_OS_Command_Injection__char_listen_socket_popen_01.c":124:18)
#loc171 = loc("CWE78_OS_Command_Injection__char_listen_socket_popen_01.c":124:17)
#loc172 = loc("CWE78_OS_Command_Injection__char_listen_socket_popen_01.c":127:16)
#loc173 = loc("CWE78_OS_Command_Injection__char_listen_socket_popen_01.c":128:9)
#loc174 = loc("CWE78_OS_Command_Injection__char_listen_socket_popen_01.c":131:9)
#loc175 = loc("CWE78_OS_Command_Injection__char_listen_socket_popen_01.c":128:13)
#loc176 = loc("CWE78_OS_Command_Injection__char_listen_socket_popen_01.c":128:29)
#loc177 = loc("CWE78_OS_Command_Injection__char_listen_socket_popen_01.c":129:9)
#loc178 = loc("CWE78_OS_Command_Injection__char_listen_socket_popen_01.c":130:26)
#loc179 = loc("CWE78_OS_Command_Injection__char_listen_socket_popen_01.c":130:13)
#loc180 = loc("CWE78_OS_Command_Injection__char_listen_socket_popen_01.c":132:9)
#loc181 = loc("CWE78_OS_Command_Injection__char_listen_socket_popen_01.c":135:9)
#loc182 = loc("CWE78_OS_Command_Injection__char_listen_socket_popen_01.c":132:13)
#loc183 = loc("CWE78_OS_Command_Injection__char_listen_socket_popen_01.c":132:29)
#loc184 = loc("CWE78_OS_Command_Injection__char_listen_socket_popen_01.c":133:9)
#loc185 = loc("CWE78_OS_Command_Injection__char_listen_socket_popen_01.c":134:26)
#loc186 = loc("CWE78_OS_Command_Injection__char_listen_socket_popen_01.c":134:13)
#loc187 = loc("CWE78_OS_Command_Injection__char_listen_socket_popen_01.c":143:5)
#loc188 = loc("CWE78_OS_Command_Injection__char_listen_socket_popen_01.c":151:5)
#loc189 = loc("CWE78_OS_Command_Injection__char_listen_socket_popen_01.c":144:9)
#loc190 = loc("CWE78_OS_Command_Injection__char_listen_socket_popen_01.c":144:15)
#loc191 = loc("CWE78_OS_Command_Injection__char_listen_socket_popen_01.c":146:22)
#loc192 = loc("CWE78_OS_Command_Injection__char_listen_socket_popen_01.c":146:16)
#loc193 = loc("CWE78_OS_Command_Injection__char_listen_socket_popen_01.c":146:9)
#loc194 = loc("CWE78_OS_Command_Injection__char_listen_socket_popen_01.c":146:31)
#loc195 = loc("CWE78_OS_Command_Injection__char_listen_socket_popen_01.c":147:9)
#loc196 = loc("CWE78_OS_Command_Injection__char_listen_socket_popen_01.c":150:9)
#loc197 = loc("CWE78_OS_Command_Injection__char_listen_socket_popen_01.c":147:13)
#loc198 = loc("CWE78_OS_Command_Injection__char_listen_socket_popen_01.c":147:21)
#loc199 = loc("CWE78_OS_Command_Injection__char_listen_socket_popen_01.c":148:9)
#loc200 = loc("CWE78_OS_Command_Injection__char_listen_socket_popen_01.c":149:20)
#loc201 = loc("CWE78_OS_Command_Injection__char_listen_socket_popen_01.c":149:13)
#loc202 = loc("CWE78_OS_Command_Injection__char_listen_socket_popen_01.c":177:1)
#loc203 = loc("CWE78_OS_Command_Injection__char_listen_socket_popen_01.c":180:1)
#loc204 = loc("CWE78_OS_Command_Injection__char_listen_socket_popen_01.c":179:5)
#loc205 = loc("CWE78_OS_Command_Injection__char_listen_socket_popen_01.c":179:13)
#loc206 = loc("/usr/include/string.h":149:1)
#loc207 = loc("/usr/include/string.h":150:14)
#loc208 = loc("CWE78_OS_Command_Injection__char_listen_socket_popen_01.c":165:18)
#loc209 = loc("CWE78_OS_Command_Injection__char_listen_socket_popen_01.c":159:1)
#loc210 = loc("CWE78_OS_Command_Injection__char_listen_socket_popen_01.c":175:1)
#loc211 = loc("CWE78_OS_Command_Injection__char_listen_socket_popen_01.c":161:5)
#loc212 = loc("CWE78_OS_Command_Injection__char_listen_socket_popen_01.c":161:12)
#loc213 = loc("CWE78_OS_Command_Injection__char_listen_socket_popen_01.c":163:12)
#loc214 = loc("CWE78_OS_Command_Injection__char_listen_socket_popen_01.c":163:5)
#loc215 = loc("CWE78_OS_Command_Injection__char_listen_socket_popen_01.c":165:5)
#loc216 = loc("CWE78_OS_Command_Injection__char_listen_socket_popen_01.c":165:12)
#loc217 = loc("CWE78_OS_Command_Injection__char_listen_socket_popen_01.c":166:5)
#loc218 = loc("CWE78_OS_Command_Injection__char_listen_socket_popen_01.c":174:5)
#loc219 = loc("CWE78_OS_Command_Injection__char_listen_socket_popen_01.c":167:9)
#loc220 = loc("CWE78_OS_Command_Injection__char_listen_socket_popen_01.c":167:15)
#loc221 = loc("CWE78_OS_Command_Injection__char_listen_socket_popen_01.c":169:22)
#loc222 = loc("CWE78_OS_Command_Injection__char_listen_socket_popen_01.c":169:28)
#loc223 = loc("CWE78_OS_Command_Injection__char_listen_socket_popen_01.c":169:16)
#loc224 = loc("CWE78_OS_Command_Injection__char_listen_socket_popen_01.c":169:9)
#loc225 = loc("CWE78_OS_Command_Injection__char_listen_socket_popen_01.c":169:31)
#loc226 = loc("CWE78_OS_Command_Injection__char_listen_socket_popen_01.c":170:9)
#loc227 = loc("CWE78_OS_Command_Injection__char_listen_socket_popen_01.c":173:9)
#loc228 = loc("CWE78_OS_Command_Injection__char_listen_socket_popen_01.c":170:13)
#loc229 = loc("CWE78_OS_Command_Injection__char_listen_socket_popen_01.c":170:21)
#loc230 = loc("CWE78_OS_Command_Injection__char_listen_socket_popen_01.c":171:9)
#loc231 = loc("CWE78_OS_Command_Injection__char_listen_socket_popen_01.c":172:20)
#loc232 = loc("CWE78_OS_Command_Injection__char_listen_socket_popen_01.c":172:13)
#loc233 = loc(fused[#loc1, #loc2])
#loc234 = loc(fused[#loc3, #loc4])
#loc235 = loc(fused[#loc5, #loc6])
#loc236 = loc(fused[#loc7, #loc8])
#loc237 = loc(fused[#loc9, #loc10])
#loc238 = loc(fused[#loc11, #loc12])
#loc239 = loc(fused[#loc13, #loc14])
#loc240 = loc(fused[#loc15, #loc16])
#loc241 = loc(fused[#loc17, #loc18])
#loc242 = loc(fused[#loc19, #loc20])
#loc243 = loc(fused[#loc21, #loc22])
#loc244 = loc(fused[#loc23, #loc24])
#loc245 = loc(fused[#loc26, #loc27])
#loc246 = loc(fused[#loc28, #loc29])
#loc247 = loc(fused[#loc30, #loc31])
#loc248 = loc(fused[#loc33, #loc32])
#loc249 = loc(fused[#loc34, #loc35])
#loc250 = loc(fused[#loc36, #loc37])
#loc251 = loc(fused[#loc38, #loc39])
#loc252 = loc(fused[#loc40, #loc41])
#loc253 = loc(fused[#loc42, #loc43])
#loc254 = loc(fused[#loc44, #loc45])
#loc255 = loc(fused[#loc46, #loc47])
#loc256 = loc(fused[#loc50, #loc51])
#loc257 = loc(fused[#loc52, #loc53])
#loc258 = loc(fused[#loc58, #loc59])
#loc259 = loc(fused[#loc60, #loc61])
#loc260 = loc(fused[#loc62, #loc63])
#loc261 = loc(fused[#loc64, #loc61])
#loc262 = loc(fused[#loc66, #loc67])
#loc263 = loc(fused[#loc69, #loc70])
#loc264 = loc(fused[#loc71, #loc72])
#loc265 = loc(fused[#loc75, #loc73])
#loc266 = loc(fused[#loc79, #loc76])
#loc267 = loc(fused[#loc83, #loc84])
#loc268 = loc(fused[#loc85, #loc86])
#loc269 = loc(fused[#loc88, #loc89])
#loc270 = loc(fused[#loc90, #loc91])
#loc271 = loc(fused[#loc92, #loc93])
#loc272 = loc(fused[#loc94, #loc86])
#loc273 = loc(fused[#loc96, #loc97])
#loc274 = loc(fused[#loc100, #loc101])
#loc275 = loc(fused[#loc102, #loc97])
#loc276 = loc(fused[#loc108, #loc109])
#loc277 = loc(fused[#loc110, #loc111])
#loc278 = loc(fused[#loc112, #loc113])
#loc279 = loc(fused[#loc114, #loc111])
#loc280 = loc(fused[#loc120, #loc121])
#loc281 = loc(fused[#loc122, #loc123])
#loc282 = loc(fused[#loc124, #loc125])
#loc283 = loc(fused[#loc124, #loc126])
#loc284 = loc(fused[#loc122, #loc127])
#loc285 = loc(fused[#loc130, #loc131])
#loc286 = loc(fused[#loc132, #loc133])
#loc287 = loc(fused[#loc134, #loc135])
#loc288 = loc(fused[#loc137, #loc138])
#loc289 = loc(fused[#loc139, #loc133])
#loc290 = loc(fused[#loc145, #loc146])
#loc291 = loc(fused[#loc144, #loc146])
#loc292 = loc(fused[#loc143, #loc146])
#loc293 = loc(fused[#loc142, #loc141])
#loc294 = loc(fused[#loc151, #loc152])
#loc295 = loc(fused[#loc153, #loc154])
#loc296 = loc(fused[#loc156, #loc154])
#loc297 = loc(fused[#loc159, #loc157])
#loc298 = loc(fused[#loc163, #loc164])
#loc299 = loc(fused[#loc165, #loc166])
#loc300 = loc(fused[#loc168, #loc166])
#loc301 = loc(fused[#loc171, #loc169])
#loc302 = loc(fused[#loc173, #loc174])
#loc303 = loc(fused[#loc175, #loc176])
#loc304 = loc(fused[#loc177, #loc174])
#loc305 = loc(fused[#loc180, #loc181])
#loc306 = loc(fused[#loc182, #loc183])
#loc307 = loc(fused[#loc184, #loc181])
#loc308 = loc(fused[#loc187, #loc188])
#loc309 = loc(fused[#loc189, #loc190])
#loc310 = loc(fused[#loc193, #loc194])
#loc311 = loc(fused[#loc195, #loc196])
#loc312 = loc(fused[#loc197, #loc198])
#loc313 = loc(fused[#loc199, #loc196])
#loc314 = loc(fused[#loc202, #loc203])
#loc315 = loc(fused[#loc204, #loc205])
#loc316 = loc(fused[#loc206, #loc207])
#loc317 = loc(fused[#loc209, #loc210])
#loc318 = loc(fused[#loc211, #loc212])
#loc319 = loc(fused[#loc214, #loc213])
#loc320 = loc(fused[#loc217, #loc218])
#loc321 = loc(fused[#loc219, #loc220])
#loc322 = loc(fused[#loc224, #loc225])
#loc323 = loc(fused[#loc226, #loc227])
#loc324 = loc(fused[#loc228, #loc229])
#loc325 = loc(fused[#loc230, #loc227])
