!s32i = !cir.int<s, 32>
!s8i = !cir.int<s, 8>
!u32i = !cir.int<u, 32>
#fn_attr = #cir<extra({nothrow = #cir.nothrow})>
#fn_attr1 = #cir<extra({inline = #cir.inline<no>, nothrow = #cir.nothrow, optnone = #cir.optnone, uwtable = #cir.uwtable<async>})>
#loc16 = loc("CWE369_Divide_by_Zero__int_rand_divide_34.c":35:12)
#loc67 = loc("CWE369_Divide_by_Zero__int_rand_divide_34.c":73:12)
!ty_CWE369_Divide_by_Zero__int_rand_divide_34_unionType = !cir.record<union "CWE369_Divide_by_Zero__int_rand_divide_34_unionType" {!s32i, !s32i}>
module @"/workspaces/juliet-c/testcases/CWE369_Divide_by_Zero/s02/CWE369_Divide_by_Zero__int_rand_divide_34.c" attributes {cir.lang = #cir.lang<c>, cir.sob = #cir.signed_overflow_behavior<undefined>, cir.triple = "x86_64-unknown-linux-gnu", cir.type_size_info = #cir.type_size_info<char = 8, int = 32, size_t = 64>, cir.uwtable = #cir.uwtable<async>, dlti.dl_spec = #dlti.dl_spec<i64 = dense<64> : vector<2xi64>, i128 = dense<128> : vector<2xi64>, !llvm.ptr<272> = dense<64> : vector<4xi64>, !llvm.ptr<271> = dense<32> : vector<4xi64>, f80 = dense<128> : vector<2xi64>, !llvm.ptr = dense<64> : vector<4xi64>, i1 = dense<8> : vector<2xi64>, i8 = dense<8> : vector<2xi64>, i16 = dense<16> : vector<2xi64>, !llvm.ptr<270> = dense<32> : vector<4xi64>, i32 = dense<32> : vector<2xi64>, f16 = dense<16> : vector<2xi64>, f64 = dense<64> : vector<2xi64>, f128 = dense<128> : vector<2xi64>, "dlti.stack_alignment" = 128 : i64, "dlti.endianness" = "little", "dlti.mangling_mode" = "e">} {
  cir.func private @rand() -> !s32i extra(#fn_attr) loc(#loc84)
  cir.func private @printIntLine(!s32i) loc(#loc85)
  cir.func no_proto @CWE369_Divide_by_Zero__int_rand_divide_34_bad() extra(#fn_attr1) {
    %0 = cir.alloca !s32i, !cir.ptr<!s32i>, ["data", init] {alignment = 4 : i64} loc(#loc87)
    %1 = cir.alloca !s32i, !cir.ptr<!s32i>, ["data"] {alignment = 4 : i64} loc(#loc88)
    %2 = cir.alloca !ty_CWE369_Divide_by_Zero__int_rand_divide_34_unionType, !cir.ptr<!ty_CWE369_Divide_by_Zero__int_rand_divide_34_unionType>, ["myUnion"] {alignment = 4 : i64} loc(#loc89)
    %3 = cir.const #cir.int<1> : !s32i loc(#loc13)
    %4 = cir.unary(minus, %3) nsw : !s32i, !s32i loc(#loc14)
    cir.store %4, %1 : !s32i, !cir.ptr<!s32i> loc(#loc90)
    %5 = cir.call @rand() : () -> !s32i extra(#fn_attr) loc(#loc16)
    %6 = cir.const #cir.int<1> : !s32i loc(#loc16)
    %7 = cir.binop(and, %5, %6) : !s32i loc(#loc16)
    %8 = cir.cast(int_to_bool, %7 : !s32i), !cir.bool loc(#loc16)
    cir.brcond %8 ^bb1, ^bb2 loc(#loc16)
  ^bb1:  // pred: ^bb0
    %9 = cir.call @rand() : () -> !s32i extra(#fn_attr) loc(#loc16)
    %10 = cir.cast(integral, %9 : !s32i), !u32i loc(#loc16)
    %11 = cir.const #cir.int<30> : !s32i loc(#loc16)
    %12 = cir.shift(left, %10 : !u32i, %11 : !s32i) -> !u32i loc(#loc16)
    %13 = cir.call @rand() : () -> !s32i extra(#fn_attr) loc(#loc16)
    %14 = cir.cast(integral, %13 : !s32i), !u32i loc(#loc16)
    %15 = cir.const #cir.int<15> : !s32i loc(#loc16)
    %16 = cir.shift(left, %14 : !u32i, %15 : !s32i) -> !u32i loc(#loc16)
    %17 = cir.binop(xor, %12, %16) : !u32i loc(#loc16)
    %18 = cir.call @rand() : () -> !s32i extra(#fn_attr) loc(#loc16)
    %19 = cir.cast(integral, %18 : !s32i), !u32i loc(#loc16)
    %20 = cir.binop(xor, %17, %19) : !u32i loc(#loc16)
    cir.br ^bb3(%20 : !u32i) loc(#loc16)
  ^bb2:  // pred: ^bb0
    %21 = cir.call @rand() : () -> !s32i extra(#fn_attr) loc(#loc16)
    %22 = cir.cast(integral, %21 : !s32i), !u32i loc(#loc16)
    %23 = cir.const #cir.int<30> : !s32i loc(#loc16)
    %24 = cir.shift(left, %22 : !u32i, %23 : !s32i) -> !u32i loc(#loc16)
    %25 = cir.call @rand() : () -> !s32i extra(#fn_attr) loc(#loc16)
    %26 = cir.cast(integral, %25 : !s32i), !u32i loc(#loc16)
    %27 = cir.const #cir.int<15> : !s32i loc(#loc16)
    %28 = cir.shift(left, %26 : !u32i, %27 : !s32i) -> !u32i loc(#loc16)
    %29 = cir.binop(xor, %24, %28) : !u32i loc(#loc16)
    %30 = cir.call @rand() : () -> !s32i extra(#fn_attr) loc(#loc16)
    %31 = cir.cast(integral, %30 : !s32i), !u32i loc(#loc16)
    %32 = cir.binop(xor, %29, %31) : !u32i loc(#loc16)
    %33 = cir.unary(minus, %32) : !u32i, !u32i loc(#loc16)
    %34 = cir.const #cir.int<1> : !s32i loc(#loc16)
    %35 = cir.cast(integral, %34 : !s32i), !u32i loc(#loc16)
    %36 = cir.binop(sub, %33, %35) : !u32i loc(#loc16)
    cir.br ^bb3(%36 : !u32i) loc(#loc16)
  ^bb3(%37: !u32i loc("CWE369_Divide_by_Zero__int_rand_divide_34.c":35:12)):  // 2 preds: ^bb1, ^bb2
    cir.br ^bb4 loc(#loc16)
  ^bb4:  // pred: ^bb3
    %38 = cir.cast(integral, %37 : !u32i), !s32i loc(#loc16)
    cir.store %38, %1 : !s32i, !cir.ptr<!s32i> loc(#loc91)
    %39 = cir.load %1 : !cir.ptr<!s32i>, !s32i loc(#loc18)
    %40 = cir.get_member %2[0] {name = "unionFirst"} : !cir.ptr<!ty_CWE369_Divide_by_Zero__int_rand_divide_34_unionType> -> !cir.ptr<!s32i> loc(#loc19)
    cir.store %39, %40 : !s32i, !cir.ptr<!s32i> loc(#loc92)
    cir.br ^bb5 loc(#loc93)
  ^bb5:  // pred: ^bb4
    %41 = cir.get_member %2[1] {name = "unionSecond"} : !cir.ptr<!ty_CWE369_Divide_by_Zero__int_rand_divide_34_unionType> -> !cir.ptr<!s32i> loc(#loc23)
    %42 = cir.load %41 : !cir.ptr<!s32i>, !s32i loc(#loc8)
    cir.store %42, %0 : !s32i, !cir.ptr<!s32i> loc(#loc87)
    %43 = cir.const #cir.int<100> : !s32i loc(#loc24)
    %44 = cir.load %0 : !cir.ptr<!s32i>, !s32i loc(#loc25)
    %45 = cir.binop(div, %43, %44) : !s32i loc(#loc94)
    cir.call @printIntLine(%45) : (!s32i) -> () loc(#loc26)
    cir.br ^bb6 loc(#loc22)
  ^bb6:  // pred: ^bb5
    cir.return loc(#loc6)
  } loc(#loc86)
  cir.func no_proto @CWE369_Divide_by_Zero__int_rand_divide_34_good() extra(#fn_attr1) {
    %0 = cir.get_global @goodG2B : !cir.ptr<!cir.func<()>> loc(#loc96)
    cir.call %0() : (!cir.ptr<!cir.func<()>>) -> () loc(#loc29)
    %1 = cir.get_global @goodB2G : !cir.ptr<!cir.func<()>> loc(#loc97)
    cir.call %1() : (!cir.ptr<!cir.func<()>>) -> () loc(#loc31)
    cir.return loc(#loc28)
  } loc(#loc95)
  cir.func no_proto internal private @goodG2B() extra(#fn_attr1) {
    %0 = cir.alloca !s32i, !cir.ptr<!s32i>, ["data", init] {alignment = 4 : i64} loc(#loc99)
    %1 = cir.alloca !s32i, !cir.ptr<!s32i>, ["data"] {alignment = 4 : i64} loc(#loc100)
    %2 = cir.alloca !ty_CWE369_Divide_by_Zero__int_rand_divide_34_unionType, !cir.ptr<!ty_CWE369_Divide_by_Zero__int_rand_divide_34_unionType>, ["myUnion"] {alignment = 4 : i64} loc(#loc101)
    %3 = cir.const #cir.int<1> : !s32i loc(#loc41)
    %4 = cir.unary(minus, %3) nsw : !s32i, !s32i loc(#loc42)
    cir.store %4, %1 : !s32i, !cir.ptr<!s32i> loc(#loc102)
    %5 = cir.const #cir.int<7> : !s32i loc(#loc44)
    cir.store %5, %1 : !s32i, !cir.ptr<!s32i> loc(#loc103)
    %6 = cir.load %1 : !cir.ptr<!s32i>, !s32i loc(#loc46)
    %7 = cir.get_member %2[0] {name = "unionFirst"} : !cir.ptr<!ty_CWE369_Divide_by_Zero__int_rand_divide_34_unionType> -> !cir.ptr<!s32i> loc(#loc19)
    cir.store %6, %7 : !s32i, !cir.ptr<!s32i> loc(#loc104)
    cir.br ^bb1 loc(#loc105)
  ^bb1:  // pred: ^bb0
    %8 = cir.get_member %2[1] {name = "unionSecond"} : !cir.ptr<!ty_CWE369_Divide_by_Zero__int_rand_divide_34_unionType> -> !cir.ptr<!s32i> loc(#loc23)
    %9 = cir.load %8 : !cir.ptr<!s32i>, !s32i loc(#loc36)
    cir.store %9, %0 : !s32i, !cir.ptr<!s32i> loc(#loc99)
    %10 = cir.const #cir.int<100> : !s32i loc(#loc50)
    %11 = cir.load %0 : !cir.ptr<!s32i>, !s32i loc(#loc51)
    %12 = cir.binop(div, %10, %11) : !s32i loc(#loc106)
    cir.call @printIntLine(%12) : (!s32i) -> () loc(#loc52)
    cir.br ^bb2 loc(#loc49)
  ^bb2:  // pred: ^bb1
    cir.return loc(#loc34)
  } loc(#loc98)
  cir.func private @printLine(!cir.ptr<!s8i>) loc(#loc107)
  cir.global "private" constant cir_private dsolocal @".str" = #cir.const_array<"This would result in a divide by zero\00" : !cir.array<!s8i x 38>> : !cir.array<!s8i x 38> {alignment = 1 : i64} loc(#loc55)
  cir.func no_proto internal private @goodB2G() extra(#fn_attr1) {
    %0 = cir.alloca !s32i, !cir.ptr<!s32i>, ["data", init] {alignment = 4 : i64} loc(#loc109)
    %1 = cir.alloca !s32i, !cir.ptr<!s32i>, ["data"] {alignment = 4 : i64} loc(#loc110)
    %2 = cir.alloca !ty_CWE369_Divide_by_Zero__int_rand_divide_34_unionType, !cir.ptr<!ty_CWE369_Divide_by_Zero__int_rand_divide_34_unionType>, ["myUnion"] {alignment = 4 : i64} loc(#loc111)
    %3 = cir.const #cir.int<1> : !s32i loc(#loc64)
    %4 = cir.unary(minus, %3) nsw : !s32i, !s32i loc(#loc65)
    cir.store %4, %1 : !s32i, !cir.ptr<!s32i> loc(#loc112)
    %5 = cir.call @rand() : () -> !s32i extra(#fn_attr) loc(#loc67)
    %6 = cir.const #cir.int<1> : !s32i loc(#loc67)
    %7 = cir.binop(and, %5, %6) : !s32i loc(#loc67)
    %8 = cir.cast(int_to_bool, %7 : !s32i), !cir.bool loc(#loc67)
    cir.brcond %8 ^bb1, ^bb2 loc(#loc67)
  ^bb1:  // pred: ^bb0
    %9 = cir.call @rand() : () -> !s32i extra(#fn_attr) loc(#loc67)
    %10 = cir.cast(integral, %9 : !s32i), !u32i loc(#loc67)
    %11 = cir.const #cir.int<30> : !s32i loc(#loc67)
    %12 = cir.shift(left, %10 : !u32i, %11 : !s32i) -> !u32i loc(#loc67)
    %13 = cir.call @rand() : () -> !s32i extra(#fn_attr) loc(#loc67)
    %14 = cir.cast(integral, %13 : !s32i), !u32i loc(#loc67)
    %15 = cir.const #cir.int<15> : !s32i loc(#loc67)
    %16 = cir.shift(left, %14 : !u32i, %15 : !s32i) -> !u32i loc(#loc67)
    %17 = cir.binop(xor, %12, %16) : !u32i loc(#loc67)
    %18 = cir.call @rand() : () -> !s32i extra(#fn_attr) loc(#loc67)
    %19 = cir.cast(integral, %18 : !s32i), !u32i loc(#loc67)
    %20 = cir.binop(xor, %17, %19) : !u32i loc(#loc67)
    cir.br ^bb3(%20 : !u32i) loc(#loc67)
  ^bb2:  // pred: ^bb0
    %21 = cir.call @rand() : () -> !s32i extra(#fn_attr) loc(#loc67)
    %22 = cir.cast(integral, %21 : !s32i), !u32i loc(#loc67)
    %23 = cir.const #cir.int<30> : !s32i loc(#loc67)
    %24 = cir.shift(left, %22 : !u32i, %23 : !s32i) -> !u32i loc(#loc67)
    %25 = cir.call @rand() : () -> !s32i extra(#fn_attr) loc(#loc67)
    %26 = cir.cast(integral, %25 : !s32i), !u32i loc(#loc67)
    %27 = cir.const #cir.int<15> : !s32i loc(#loc67)
    %28 = cir.shift(left, %26 : !u32i, %27 : !s32i) -> !u32i loc(#loc67)
    %29 = cir.binop(xor, %24, %28) : !u32i loc(#loc67)
    %30 = cir.call @rand() : () -> !s32i extra(#fn_attr) loc(#loc67)
    %31 = cir.cast(integral, %30 : !s32i), !u32i loc(#loc67)
    %32 = cir.binop(xor, %29, %31) : !u32i loc(#loc67)
    %33 = cir.unary(minus, %32) : !u32i, !u32i loc(#loc67)
    %34 = cir.const #cir.int<1> : !s32i loc(#loc67)
    %35 = cir.cast(integral, %34 : !s32i), !u32i loc(#loc67)
    %36 = cir.binop(sub, %33, %35) : !u32i loc(#loc67)
    cir.br ^bb3(%36 : !u32i) loc(#loc67)
  ^bb3(%37: !u32i loc("CWE369_Divide_by_Zero__int_rand_divide_34.c":73:12)):  // 2 preds: ^bb1, ^bb2
    cir.br ^bb4 loc(#loc67)
  ^bb4:  // pred: ^bb3
    %38 = cir.cast(integral, %37 : !u32i), !s32i loc(#loc67)
    cir.store %38, %1 : !s32i, !cir.ptr<!s32i> loc(#loc113)
    %39 = cir.load %1 : !cir.ptr<!s32i>, !s32i loc(#loc69)
    %40 = cir.get_member %2[0] {name = "unionFirst"} : !cir.ptr<!ty_CWE369_Divide_by_Zero__int_rand_divide_34_unionType> -> !cir.ptr<!s32i> loc(#loc19)
    cir.store %39, %40 : !s32i, !cir.ptr<!s32i> loc(#loc114)
    cir.br ^bb5 loc(#loc115)
  ^bb5:  // pred: ^bb4
    %41 = cir.get_member %2[1] {name = "unionSecond"} : !cir.ptr<!ty_CWE369_Divide_by_Zero__int_rand_divide_34_unionType> -> !cir.ptr<!s32i> loc(#loc23)
    %42 = cir.load %41 : !cir.ptr<!s32i>, !s32i loc(#loc59)
    cir.store %42, %0 : !s32i, !cir.ptr<!s32i> loc(#loc109)
    cir.br ^bb6 loc(#loc116)
  ^bb6:  // pred: ^bb5
    %43 = cir.load %0 : !cir.ptr<!s32i>, !s32i loc(#loc75)
    %44 = cir.const #cir.int<0> : !s32i loc(#loc76)
    %45 = cir.cmp(ne, %43, %44) : !s32i, !cir.bool loc(#loc117)
    cir.brcond %45 ^bb7, ^bb8 loc(#loc118)
  ^bb7:  // pred: ^bb6
    %46 = cir.const #cir.int<100> : !s32i loc(#loc80)
    %47 = cir.load %0 : !cir.ptr<!s32i>, !s32i loc(#loc81)
    %48 = cir.binop(div, %46, %47) : !s32i loc(#loc119)
    cir.call @printIntLine(%48) : (!s32i) -> () loc(#loc82)
    cir.br ^bb9 loc(#loc78)
  ^bb8:  // pred: ^bb6
    %49 = cir.get_global @".str" : !cir.ptr<!cir.array<!s8i x 38>> loc(#loc55)
    %50 = cir.cast(array_to_ptrdecay, %49 : !cir.ptr<!cir.array<!s8i x 38>>), !cir.ptr<!s8i> loc(#loc55)
    cir.call @printLine(%50) : (!cir.ptr<!s8i>) -> () loc(#loc83)
    cir.br ^bb9 loc(#loc74)
  ^bb9:  // 2 preds: ^bb7, ^bb8
    cir.br ^bb10 loc(#loc74)
  ^bb10:  // pred: ^bb9
    cir.br ^bb11 loc(#loc72)
  ^bb11:  // pred: ^bb10
    cir.return loc(#loc57)
  } loc(#loc108)
} loc(#loc)
#loc = loc("/workspaces/juliet-c/testcases/CWE369_Divide_by_Zero/s02/CWE369_Divide_by_Zero__int_rand_divide_34.c":0:0)
#loc1 = loc("/usr/include/stdlib.h":573:1)
#loc2 = loc("/usr/include/stdlib.h":573:24)
#loc3 = loc("../../../testcasesupport/std_testcase_io.h":18:1)
#loc4 = loc("../../../testcasesupport/std_testcase_io.h":18:33)
#loc5 = loc("CWE369_Divide_by_Zero__int_rand_divide_34.c":28:1)
#loc6 = loc("CWE369_Divide_by_Zero__int_rand_divide_34.c":42:1)
#loc7 = loc("CWE369_Divide_by_Zero__int_rand_divide_34.c":38:9)
#loc8 = loc("CWE369_Divide_by_Zero__int_rand_divide_34.c":38:28)
#loc9 = loc("CWE369_Divide_by_Zero__int_rand_divide_34.c":30:5)
#loc10 = loc("CWE369_Divide_by_Zero__int_rand_divide_34.c":30:9)
#loc11 = loc("CWE369_Divide_by_Zero__int_rand_divide_34.c":31:5)
#loc12 = loc("CWE369_Divide_by_Zero__int_rand_divide_34.c":31:57)
#loc13 = loc("CWE369_Divide_by_Zero__int_rand_divide_34.c":33:13)
#loc14 = loc("CWE369_Divide_by_Zero__int_rand_divide_34.c":33:12)
#loc15 = loc("CWE369_Divide_by_Zero__int_rand_divide_34.c":33:5)
#loc17 = loc("CWE369_Divide_by_Zero__int_rand_divide_34.c":35:5)
#loc18 = loc("CWE369_Divide_by_Zero__int_rand_divide_34.c":36:26)
#loc19 = loc("CWE369_Divide_by_Zero__int_rand_divide_34.c":22:9)
#loc20 = loc("CWE369_Divide_by_Zero__int_rand_divide_34.c":36:5)
#loc21 = loc("CWE369_Divide_by_Zero__int_rand_divide_34.c":37:5)
#loc22 = loc("CWE369_Divide_by_Zero__int_rand_divide_34.c":41:5)
#loc23 = loc("CWE369_Divide_by_Zero__int_rand_divide_34.c":23:9)
#loc24 = loc("CWE369_Divide_by_Zero__int_rand_divide_34.c":40:22)
#loc25 = loc("CWE369_Divide_by_Zero__int_rand_divide_34.c":40:28)
#loc26 = loc("CWE369_Divide_by_Zero__int_rand_divide_34.c":40:9)
#loc27 = loc("CWE369_Divide_by_Zero__int_rand_divide_34.c":89:1)
#loc28 = loc("CWE369_Divide_by_Zero__int_rand_divide_34.c":93:1)
#loc29 = loc("CWE369_Divide_by_Zero__int_rand_divide_34.c":91:5)
#loc30 = loc("CWE369_Divide_by_Zero__int_rand_divide_34.c":91:13)
#loc31 = loc("CWE369_Divide_by_Zero__int_rand_divide_34.c":92:5)
#loc32 = loc("CWE369_Divide_by_Zero__int_rand_divide_34.c":92:13)
#loc33 = loc("CWE369_Divide_by_Zero__int_rand_divide_34.c":49:1)
#loc34 = loc("CWE369_Divide_by_Zero__int_rand_divide_34.c":63:1)
#loc35 = loc("CWE369_Divide_by_Zero__int_rand_divide_34.c":59:9)
#loc36 = loc("CWE369_Divide_by_Zero__int_rand_divide_34.c":59:28)
#loc37 = loc("CWE369_Divide_by_Zero__int_rand_divide_34.c":51:5)
#loc38 = loc("CWE369_Divide_by_Zero__int_rand_divide_34.c":51:9)
#loc39 = loc("CWE369_Divide_by_Zero__int_rand_divide_34.c":52:5)
#loc40 = loc("CWE369_Divide_by_Zero__int_rand_divide_34.c":52:57)
#loc41 = loc("CWE369_Divide_by_Zero__int_rand_divide_34.c":54:13)
#loc42 = loc("CWE369_Divide_by_Zero__int_rand_divide_34.c":54:12)
#loc43 = loc("CWE369_Divide_by_Zero__int_rand_divide_34.c":54:5)
#loc44 = loc("CWE369_Divide_by_Zero__int_rand_divide_34.c":56:12)
#loc45 = loc("CWE369_Divide_by_Zero__int_rand_divide_34.c":56:5)
#loc46 = loc("CWE369_Divide_by_Zero__int_rand_divide_34.c":57:26)
#loc47 = loc("CWE369_Divide_by_Zero__int_rand_divide_34.c":57:5)
#loc48 = loc("CWE369_Divide_by_Zero__int_rand_divide_34.c":58:5)
#loc49 = loc("CWE369_Divide_by_Zero__int_rand_divide_34.c":62:5)
#loc50 = loc("CWE369_Divide_by_Zero__int_rand_divide_34.c":61:22)
#loc51 = loc("CWE369_Divide_by_Zero__int_rand_divide_34.c":61:28)
#loc52 = loc("CWE369_Divide_by_Zero__int_rand_divide_34.c":61:9)
#loc53 = loc("../../../testcasesupport/std_testcase_io.h":14:1)
#loc54 = loc("../../../testcasesupport/std_testcase_io.h":14:33)
#loc55 = loc("CWE369_Divide_by_Zero__int_rand_divide_34.c":84:23)
#loc56 = loc("CWE369_Divide_by_Zero__int_rand_divide_34.c":66:1)
#loc57 = loc("CWE369_Divide_by_Zero__int_rand_divide_34.c":87:1)
#loc58 = loc("CWE369_Divide_by_Zero__int_rand_divide_34.c":76:9)
#loc59 = loc("CWE369_Divide_by_Zero__int_rand_divide_34.c":76:28)
#loc60 = loc("CWE369_Divide_by_Zero__int_rand_divide_34.c":68:5)
#loc61 = loc("CWE369_Divide_by_Zero__int_rand_divide_34.c":68:9)
#loc62 = loc("CWE369_Divide_by_Zero__int_rand_divide_34.c":69:5)
#loc63 = loc("CWE369_Divide_by_Zero__int_rand_divide_34.c":69:57)
#loc64 = loc("CWE369_Divide_by_Zero__int_rand_divide_34.c":71:13)
#loc65 = loc("CWE369_Divide_by_Zero__int_rand_divide_34.c":71:12)
#loc66 = loc("CWE369_Divide_by_Zero__int_rand_divide_34.c":71:5)
#loc68 = loc("CWE369_Divide_by_Zero__int_rand_divide_34.c":73:5)
#loc69 = loc("CWE369_Divide_by_Zero__int_rand_divide_34.c":74:26)
#loc70 = loc("CWE369_Divide_by_Zero__int_rand_divide_34.c":74:5)
#loc71 = loc("CWE369_Divide_by_Zero__int_rand_divide_34.c":75:5)
#loc72 = loc("CWE369_Divide_by_Zero__int_rand_divide_34.c":86:5)
#loc73 = loc("CWE369_Divide_by_Zero__int_rand_divide_34.c":78:9)
#loc74 = loc("CWE369_Divide_by_Zero__int_rand_divide_34.c":85:9)
#loc75 = loc("CWE369_Divide_by_Zero__int_rand_divide_34.c":78:13)
#loc76 = loc("CWE369_Divide_by_Zero__int_rand_divide_34.c":78:21)
#loc77 = loc("CWE369_Divide_by_Zero__int_rand_divide_34.c":79:9)
#loc78 = loc("CWE369_Divide_by_Zero__int_rand_divide_34.c":81:9)
#loc79 = loc("CWE369_Divide_by_Zero__int_rand_divide_34.c":83:9)
#loc80 = loc("CWE369_Divide_by_Zero__int_rand_divide_34.c":80:26)
#loc81 = loc("CWE369_Divide_by_Zero__int_rand_divide_34.c":80:32)
#loc82 = loc("CWE369_Divide_by_Zero__int_rand_divide_34.c":80:13)
#loc83 = loc("CWE369_Divide_by_Zero__int_rand_divide_34.c":84:13)
#loc84 = loc(fused[#loc1, #loc2])
#loc85 = loc(fused[#loc3, #loc4])
#loc86 = loc(fused[#loc5, #loc6])
#loc87 = loc(fused[#loc7, #loc8])
#loc88 = loc(fused[#loc9, #loc10])
#loc89 = loc(fused[#loc11, #loc12])
#loc90 = loc(fused[#loc15, #loc13])
#loc91 = loc(fused[#loc17, #loc16])
#loc92 = loc(fused[#loc20, #loc18])
#loc93 = loc(fused[#loc21, #loc22])
#loc94 = loc(fused[#loc24, #loc25])
#loc95 = loc(fused[#loc27, #loc28])
#loc96 = loc(fused[#loc29, #loc30])
#loc97 = loc(fused[#loc31, #loc32])
#loc98 = loc(fused[#loc33, #loc34])
#loc99 = loc(fused[#loc35, #loc36])
#loc100 = loc(fused[#loc37, #loc38])
#loc101 = loc(fused[#loc39, #loc40])
#loc102 = loc(fused[#loc43, #loc41])
#loc103 = loc(fused[#loc45, #loc44])
#loc104 = loc(fused[#loc47, #loc46])
#loc105 = loc(fused[#loc48, #loc49])
#loc106 = loc(fused[#loc50, #loc51])
#loc107 = loc(fused[#loc53, #loc54])
#loc108 = loc(fused[#loc56, #loc57])
#loc109 = loc(fused[#loc58, #loc59])
#loc110 = loc(fused[#loc60, #loc61])
#loc111 = loc(fused[#loc62, #loc63])
#loc112 = loc(fused[#loc66, #loc64])
#loc113 = loc(fused[#loc68, #loc67])
#loc114 = loc(fused[#loc70, #loc69])
#loc115 = loc(fused[#loc71, #loc72])
#loc116 = loc(fused[#loc73, #loc74])
#loc117 = loc(fused[#loc75, #loc76])
#loc118 = loc(fused[#loc77, #loc78, #loc79, #loc74])
#loc119 = loc(fused[#loc80, #loc81])
