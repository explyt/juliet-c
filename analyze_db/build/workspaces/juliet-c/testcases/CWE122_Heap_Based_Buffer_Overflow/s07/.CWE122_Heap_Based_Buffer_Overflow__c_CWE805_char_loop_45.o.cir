!s32i = !cir.int<s, 32>
!s8i = !cir.int<s, 8>
!u64i = !cir.int<u, 64>
!void = !cir.void
#fn_attr = #cir<extra({nothrow = #cir.nothrow})>
#fn_attr1 = #cir<extra({inline = #cir.inline<no>, nothrow = #cir.nothrow, optnone = #cir.optnone, uwtable = #cir.uwtable<async>})>
module @"/workspaces/juliet-c/testcases/CWE122_Heap_Based_Buffer_Overflow/s07/CWE122_Heap_Based_Buffer_Overflow__c_CWE805_char_loop_45.c" attributes {cir.lang = #cir.lang<c>, cir.sob = #cir.signed_overflow_behavior<undefined>, cir.triple = "x86_64-unknown-linux-gnu", cir.type_size_info = #cir.type_size_info<char = 8, int = 32, size_t = 64>, cir.uwtable = #cir.uwtable<async>, dlti.dl_spec = #dlti.dl_spec<!llvm.ptr = dense<64> : vector<4xi64>, i1 = dense<8> : vector<2xi64>, i8 = dense<8> : vector<2xi64>, i64 = dense<64> : vector<2xi64>, i128 = dense<128> : vector<2xi64>, f80 = dense<128> : vector<2xi64>, f128 = dense<128> : vector<2xi64>, f64 = dense<64> : vector<2xi64>, !llvm.ptr<270> = dense<32> : vector<4xi64>, !llvm.ptr<271> = dense<32> : vector<4xi64>, !llvm.ptr<272> = dense<64> : vector<4xi64>, i16 = dense<16> : vector<2xi64>, i32 = dense<32> : vector<2xi64>, f16 = dense<16> : vector<2xi64>, "dlti.endianness" = "little", "dlti.stack_alignment" = 128 : i64, "dlti.mangling_mode" = "e">} {
  cir.func private @malloc(!u64i) -> !cir.ptr<!void> extra(#fn_attr) loc(#loc163)
  cir.func private @exit(!s32i) extra(#fn_attr) loc(#loc164)
  cir.global "private" internal dsolocal @CWE122_Heap_Based_Buffer_Overflow__c_CWE805_char_loop_45_badData = #cir.ptr<null> : !cir.ptr<!s8i> {alignment = 8 : i64} loc(#loc165)
  cir.func no_proto @CWE122_Heap_Based_Buffer_Overflow__c_CWE805_char_loop_45_bad() extra(#fn_attr1) {
    %0 = cir.alloca !cir.ptr<!s8i>, !cir.ptr<!cir.ptr<!s8i>>, ["data"] {alignment = 8 : i64} loc(#loc167)
    %1 = cir.const #cir.ptr<null> : !cir.ptr<!s8i> loc(#loc11)
    cir.store %1, %0 : !cir.ptr<!s8i>, !cir.ptr<!cir.ptr<!s8i>> loc(#loc168)
    %2 = cir.get_global @malloc : !cir.ptr<!cir.func<(!u64i) -> !cir.ptr<!void>>> loc(#loc13)
    %3 = cir.const #cir.int<50> : !s32i loc(#loc14)
    %4 = cir.cast(integral, %3 : !s32i), !u64i loc(#loc14)
    %5 = cir.const #cir.int<1> : !u64i loc(#loc169)
    %6 = cir.binop(mul, %4, %5) : !u64i loc(#loc170)
    %7 = cir.call @malloc(%6) : (!u64i) -> !cir.ptr<!void> extra(#fn_attr) loc(#loc13)
    %8 = cir.cast(bitcast, %7 : !cir.ptr<!void>), !cir.ptr<!s8i> loc(#loc171)
    cir.store %8, %0 : !cir.ptr<!s8i>, !cir.ptr<!cir.ptr<!s8i>> loc(#loc172)
    cir.scope {
      %17 = cir.load %0 : !cir.ptr<!cir.ptr<!s8i>>, !cir.ptr<!s8i> loc(#loc21)
      %18 = cir.const #cir.ptr<null> : !cir.ptr<!void> loc(#loc22)
      %19 = cir.cast(bitcast, %18 : !cir.ptr<!void>), !cir.ptr<!s8i> loc(#loc22)
      %20 = cir.cmp(eq, %17, %19) : !cir.ptr<!s8i>, !cir.bool loc(#loc174)
      cir.if %20 {
        %21 = cir.get_global @exit : !cir.ptr<!cir.func<(!s32i)>> loc(#loc24)
        %22 = cir.const #cir.int<1> : !s32i loc(#loc25)
        %23 = cir.unary(minus, %22) nsw : !s32i, !s32i loc(#loc26)
        cir.call @exit(%23) : (!s32i) -> () extra(#fn_attr) loc(#loc24)
      } loc(#loc175)
    } loc(#loc173)
    %9 = cir.const #cir.int<0> : !s32i loc(#loc27)
    %10 = cir.cast(integral, %9 : !s32i), !s8i loc(#loc27)
    %11 = cir.load %0 : !cir.ptr<!cir.ptr<!s8i>>, !cir.ptr<!s8i> loc(#loc28)
    %12 = cir.const #cir.int<0> : !s32i loc(#loc29)
    %13 = cir.ptr_stride(%11 : !cir.ptr<!s8i>, %12 : !s32i), !cir.ptr<!s8i> loc(#loc30)
    cir.store %10, %13 : !s8i, !cir.ptr<!s8i> loc(#loc176)
    %14 = cir.load %0 : !cir.ptr<!cir.ptr<!s8i>>, !cir.ptr<!s8i> loc(#loc31)
    %15 = cir.get_global @CWE122_Heap_Based_Buffer_Overflow__c_CWE805_char_loop_45_badData : !cir.ptr<!cir.ptr<!s8i>> loc(#loc165)
    cir.store %14, %15 : !cir.ptr<!s8i>, !cir.ptr<!cir.ptr<!s8i>> loc(#loc177)
    %16 = cir.get_global @badSink : !cir.ptr<!cir.func<()>> loc(#loc178)
    cir.call %16() : (!cir.ptr<!cir.func<()>>) -> () loc(#loc33)
    cir.return loc(#loc8)
  } loc(#loc166)
  cir.func no_proto @CWE122_Heap_Based_Buffer_Overflow__c_CWE805_char_loop_45_good() extra(#fn_attr1) {
    %0 = cir.get_global @goodG2B : !cir.ptr<!cir.func<()>> loc(#loc180)
    cir.call %0() : (!cir.ptr<!cir.func<()>>) -> () loc(#loc37)
    cir.return loc(#loc36)
  } loc(#loc179)
  cir.func private @printLine(!cir.ptr<!s8i>) loc(#loc181)
  cir.func private @free(!cir.ptr<!void>) extra(#fn_attr) loc(#loc182)
  cir.func no_proto internal private @badSink() extra(#fn_attr1) {
    %0 = cir.alloca !cir.ptr<!s8i>, !cir.ptr<!cir.ptr<!s8i>>, ["data", init] {alignment = 8 : i64} loc(#loc184)
    %1 = cir.get_global @CWE122_Heap_Based_Buffer_Overflow__c_CWE805_char_loop_45_badData : !cir.ptr<!cir.ptr<!s8i>> loc(#loc165)
    %2 = cir.load %1 : !cir.ptr<!cir.ptr<!s8i>>, !cir.ptr<!s8i> loc(#loc46)
    cir.store %2, %0 : !cir.ptr<!s8i>, !cir.ptr<!cir.ptr<!s8i>> loc(#loc184)
    cir.scope {
      %3 = cir.alloca !u64i, !cir.ptr<!u64i>, ["i"] {alignment = 8 : i64} loc(#loc186)
      %4 = cir.alloca !cir.array<!s8i x 100>, !cir.ptr<!cir.array<!s8i x 100>>, ["source"] {alignment = 16 : i64} loc(#loc187)
      %5 = cir.cast(array_to_ptrdecay, %4 : !cir.ptr<!cir.array<!s8i x 100>>), !cir.ptr<!s8i> loc(#loc53)
      %6 = cir.cast(bitcast, %5 : !cir.ptr<!s8i>), !cir.ptr<!void> loc(#loc53)
      %7 = cir.const #cir.int<67> : !s32i loc(#loc54)
      %8 = cir.const #cir.int<100> : !s32i loc(#loc55)
      %9 = cir.const #cir.int<1> : !s32i loc(#loc56)
      %10 = cir.binop(sub, %8, %9) nsw : !s32i loc(#loc55)
      %11 = cir.cast(integral, %10 : !s32i), !u64i loc(#loc55)
      cir.libc.memset %11 bytes from %6 set to %7 : !cir.ptr<!void>, !s32i, !u64i loc(#loc188)
      %12 = cir.const #cir.int<0> : !s32i loc(#loc59)
      %13 = cir.cast(integral, %12 : !s32i), !s8i loc(#loc59)
      %14 = cir.const #cir.int<100> : !s32i loc(#loc60)
      %15 = cir.const #cir.int<1> : !s32i loc(#loc61)
      %16 = cir.binop(sub, %14, %15) nsw : !s32i loc(#loc60)
      %17 = cir.cast(array_to_ptrdecay, %4 : !cir.ptr<!cir.array<!s8i x 100>>), !cir.ptr<!s8i> loc(#loc62)
      %18 = cir.ptr_stride(%17 : !cir.ptr<!s8i>, %16 : !s32i), !cir.ptr<!s8i> loc(#loc62)
      cir.store %13, %18 : !s8i, !cir.ptr<!s8i> loc(#loc189)
      cir.scope {
        %30 = cir.const #cir.int<0> : !s32i loc(#loc65)
        %31 = cir.cast(integral, %30 : !s32i), !u64i loc(#loc65)
        cir.store %31, %3 : !u64i, !cir.ptr<!u64i> loc(#loc191)
        cir.for : cond {
          %32 = cir.load %3 : !cir.ptr<!u64i>, !u64i loc(#loc67)
          %33 = cir.const #cir.int<100> : !s32i loc(#loc68)
          %34 = cir.cast(integral, %33 : !s32i), !u64i loc(#loc68)
          %35 = cir.cmp(lt, %32, %34) : !u64i, !cir.bool loc(#loc192)
          cir.condition(%35) loc(#loc69)
        } body {
          cir.scope {
            %32 = cir.load %3 : !cir.ptr<!u64i>, !u64i loc(#loc71)
            %33 = cir.cast(array_to_ptrdecay, %4 : !cir.ptr<!cir.array<!s8i x 100>>), !cir.ptr<!s8i> loc(#loc72)
            %34 = cir.ptr_stride(%33 : !cir.ptr<!s8i>, %32 : !u64i), !cir.ptr<!s8i> loc(#loc72)
            %35 = cir.load %34 : !cir.ptr<!s8i>, !s8i loc(#loc72)
            %36 = cir.load %0 : !cir.ptr<!cir.ptr<!s8i>>, !cir.ptr<!s8i> loc(#loc73)
            %37 = cir.load %3 : !cir.ptr<!u64i>, !u64i loc(#loc74)
            %38 = cir.ptr_stride(%36 : !cir.ptr<!s8i>, %37 : !u64i), !cir.ptr<!s8i> loc(#loc75)
            cir.store %35, %38 : !s8i, !cir.ptr<!s8i> loc(#loc194)
          } loc(#loc193)
          cir.yield loc(#loc64)
        } step {
          %32 = cir.load %3 : !cir.ptr<!u64i>, !u64i loc(#loc77)
          %33 = cir.unary(inc, %32) : !u64i, !u64i loc(#loc78)
          cir.store %33, %3 : !u64i, !cir.ptr<!u64i> loc(#loc195)
          cir.yield loc(#loc190)
        } loc(#loc190)
      } loc(#loc190)
      %19 = cir.const #cir.int<0> : !s32i loc(#loc79)
      %20 = cir.cast(integral, %19 : !s32i), !s8i loc(#loc79)
      %21 = cir.load %0 : !cir.ptr<!cir.ptr<!s8i>>, !cir.ptr<!s8i> loc(#loc80)
      %22 = cir.const #cir.int<100> : !s32i loc(#loc81)
      %23 = cir.const #cir.int<1> : !s32i loc(#loc82)
      %24 = cir.binop(sub, %22, %23) nsw : !s32i loc(#loc81)
      %25 = cir.ptr_stride(%21 : !cir.ptr<!s8i>, %24 : !s32i), !cir.ptr<!s8i> loc(#loc83)
      cir.store %20, %25 : !s8i, !cir.ptr<!s8i> loc(#loc196)
      %26 = cir.load %0 : !cir.ptr<!cir.ptr<!s8i>>, !cir.ptr<!s8i> loc(#loc84)
      cir.call @printLine(%26) : (!cir.ptr<!s8i>) -> () loc(#loc85)
      %27 = cir.get_global @free : !cir.ptr<!cir.func<(!cir.ptr<!void>)>> loc(#loc86)
      %28 = cir.load %0 : !cir.ptr<!cir.ptr<!s8i>>, !cir.ptr<!s8i> loc(#loc87)
      %29 = cir.cast(bitcast, %28 : !cir.ptr<!s8i>), !cir.ptr<!void> loc(#loc87)
      cir.call @free(%29) : (!cir.ptr<!void>) -> () extra(#fn_attr) loc(#loc86)
    } loc(#loc185)
    cir.return loc(#loc44)
  } loc(#loc183)
  cir.global "private" internal dsolocal @CWE122_Heap_Based_Buffer_Overflow__c_CWE805_char_loop_45_goodG2BData = #cir.ptr<null> : !cir.ptr<!s8i> {alignment = 8 : i64} loc(#loc197)
  cir.func no_proto internal private @goodG2B() extra(#fn_attr1) {
    %0 = cir.alloca !cir.ptr<!s8i>, !cir.ptr<!cir.ptr<!s8i>>, ["data"] {alignment = 8 : i64} loc(#loc199)
    %1 = cir.const #cir.ptr<null> : !cir.ptr<!s8i> loc(#loc94)
    cir.store %1, %0 : !cir.ptr<!s8i>, !cir.ptr<!cir.ptr<!s8i>> loc(#loc200)
    %2 = cir.get_global @malloc : !cir.ptr<!cir.func<(!u64i) -> !cir.ptr<!void>>> loc(#loc96)
    %3 = cir.const #cir.int<100> : !s32i loc(#loc97)
    %4 = cir.cast(integral, %3 : !s32i), !u64i loc(#loc97)
    %5 = cir.const #cir.int<1> : !u64i loc(#loc201)
    %6 = cir.binop(mul, %4, %5) : !u64i loc(#loc202)
    %7 = cir.call @malloc(%6) : (!u64i) -> !cir.ptr<!void> extra(#fn_attr) loc(#loc96)
    %8 = cir.cast(bitcast, %7 : !cir.ptr<!void>), !cir.ptr<!s8i> loc(#loc203)
    cir.store %8, %0 : !cir.ptr<!s8i>, !cir.ptr<!cir.ptr<!s8i>> loc(#loc204)
    cir.scope {
      %17 = cir.load %0 : !cir.ptr<!cir.ptr<!s8i>>, !cir.ptr<!s8i> loc(#loc104)
      %18 = cir.const #cir.ptr<null> : !cir.ptr<!void> loc(#loc105)
      %19 = cir.cast(bitcast, %18 : !cir.ptr<!void>), !cir.ptr<!s8i> loc(#loc105)
      %20 = cir.cmp(eq, %17, %19) : !cir.ptr<!s8i>, !cir.bool loc(#loc206)
      cir.if %20 {
        %21 = cir.get_global @exit : !cir.ptr<!cir.func<(!s32i)>> loc(#loc107)
        %22 = cir.const #cir.int<1> : !s32i loc(#loc108)
        %23 = cir.unary(minus, %22) nsw : !s32i, !s32i loc(#loc109)
        cir.call @exit(%23) : (!s32i) -> () extra(#fn_attr) loc(#loc107)
      } loc(#loc207)
    } loc(#loc205)
    %9 = cir.const #cir.int<0> : !s32i loc(#loc110)
    %10 = cir.cast(integral, %9 : !s32i), !s8i loc(#loc110)
    %11 = cir.load %0 : !cir.ptr<!cir.ptr<!s8i>>, !cir.ptr<!s8i> loc(#loc111)
    %12 = cir.const #cir.int<0> : !s32i loc(#loc112)
    %13 = cir.ptr_stride(%11 : !cir.ptr<!s8i>, %12 : !s32i), !cir.ptr<!s8i> loc(#loc113)
    cir.store %10, %13 : !s8i, !cir.ptr<!s8i> loc(#loc208)
    %14 = cir.load %0 : !cir.ptr<!cir.ptr<!s8i>>, !cir.ptr<!s8i> loc(#loc114)
    %15 = cir.get_global @CWE122_Heap_Based_Buffer_Overflow__c_CWE805_char_loop_45_goodG2BData : !cir.ptr<!cir.ptr<!s8i>> loc(#loc197)
    cir.store %14, %15 : !cir.ptr<!s8i>, !cir.ptr<!cir.ptr<!s8i>> loc(#loc209)
    %16 = cir.get_global @goodG2BSink : !cir.ptr<!cir.func<()>> loc(#loc210)
    cir.call %16() : (!cir.ptr<!cir.func<()>>) -> () loc(#loc116)
    cir.return loc(#loc91)
  } loc(#loc198)
  cir.func no_proto internal private @goodG2BSink() extra(#fn_attr1) {
    %0 = cir.alloca !cir.ptr<!s8i>, !cir.ptr<!cir.ptr<!s8i>>, ["data", init] {alignment = 8 : i64} loc(#loc212)
    %1 = cir.get_global @CWE122_Heap_Based_Buffer_Overflow__c_CWE805_char_loop_45_goodG2BData : !cir.ptr<!cir.ptr<!s8i>> loc(#loc197)
    %2 = cir.load %1 : !cir.ptr<!cir.ptr<!s8i>>, !cir.ptr<!s8i> loc(#loc121)
    cir.store %2, %0 : !cir.ptr<!s8i>, !cir.ptr<!cir.ptr<!s8i>> loc(#loc212)
    cir.scope {
      %3 = cir.alloca !u64i, !cir.ptr<!u64i>, ["i"] {alignment = 8 : i64} loc(#loc214)
      %4 = cir.alloca !cir.array<!s8i x 100>, !cir.ptr<!cir.array<!s8i x 100>>, ["source"] {alignment = 16 : i64} loc(#loc215)
      %5 = cir.cast(array_to_ptrdecay, %4 : !cir.ptr<!cir.array<!s8i x 100>>), !cir.ptr<!s8i> loc(#loc128)
      %6 = cir.cast(bitcast, %5 : !cir.ptr<!s8i>), !cir.ptr<!void> loc(#loc128)
      %7 = cir.const #cir.int<67> : !s32i loc(#loc129)
      %8 = cir.const #cir.int<100> : !s32i loc(#loc130)
      %9 = cir.const #cir.int<1> : !s32i loc(#loc131)
      %10 = cir.binop(sub, %8, %9) nsw : !s32i loc(#loc130)
      %11 = cir.cast(integral, %10 : !s32i), !u64i loc(#loc130)
      cir.libc.memset %11 bytes from %6 set to %7 : !cir.ptr<!void>, !s32i, !u64i loc(#loc216)
      %12 = cir.const #cir.int<0> : !s32i loc(#loc134)
      %13 = cir.cast(integral, %12 : !s32i), !s8i loc(#loc134)
      %14 = cir.const #cir.int<100> : !s32i loc(#loc135)
      %15 = cir.const #cir.int<1> : !s32i loc(#loc136)
      %16 = cir.binop(sub, %14, %15) nsw : !s32i loc(#loc135)
      %17 = cir.cast(array_to_ptrdecay, %4 : !cir.ptr<!cir.array<!s8i x 100>>), !cir.ptr<!s8i> loc(#loc137)
      %18 = cir.ptr_stride(%17 : !cir.ptr<!s8i>, %16 : !s32i), !cir.ptr<!s8i> loc(#loc137)
      cir.store %13, %18 : !s8i, !cir.ptr<!s8i> loc(#loc217)
      cir.scope {
        %30 = cir.const #cir.int<0> : !s32i loc(#loc140)
        %31 = cir.cast(integral, %30 : !s32i), !u64i loc(#loc140)
        cir.store %31, %3 : !u64i, !cir.ptr<!u64i> loc(#loc219)
        cir.for : cond {
          %32 = cir.load %3 : !cir.ptr<!u64i>, !u64i loc(#loc142)
          %33 = cir.const #cir.int<100> : !s32i loc(#loc143)
          %34 = cir.cast(integral, %33 : !s32i), !u64i loc(#loc143)
          %35 = cir.cmp(lt, %32, %34) : !u64i, !cir.bool loc(#loc220)
          cir.condition(%35) loc(#loc144)
        } body {
          cir.scope {
            %32 = cir.load %3 : !cir.ptr<!u64i>, !u64i loc(#loc146)
            %33 = cir.cast(array_to_ptrdecay, %4 : !cir.ptr<!cir.array<!s8i x 100>>), !cir.ptr<!s8i> loc(#loc147)
            %34 = cir.ptr_stride(%33 : !cir.ptr<!s8i>, %32 : !u64i), !cir.ptr<!s8i> loc(#loc147)
            %35 = cir.load %34 : !cir.ptr<!s8i>, !s8i loc(#loc147)
            %36 = cir.load %0 : !cir.ptr<!cir.ptr<!s8i>>, !cir.ptr<!s8i> loc(#loc148)
            %37 = cir.load %3 : !cir.ptr<!u64i>, !u64i loc(#loc149)
            %38 = cir.ptr_stride(%36 : !cir.ptr<!s8i>, %37 : !u64i), !cir.ptr<!s8i> loc(#loc150)
            cir.store %35, %38 : !s8i, !cir.ptr<!s8i> loc(#loc222)
          } loc(#loc221)
          cir.yield loc(#loc139)
        } step {
          %32 = cir.load %3 : !cir.ptr<!u64i>, !u64i loc(#loc152)
          %33 = cir.unary(inc, %32) : !u64i, !u64i loc(#loc153)
          cir.store %33, %3 : !u64i, !cir.ptr<!u64i> loc(#loc223)
          cir.yield loc(#loc218)
        } loc(#loc218)
      } loc(#loc218)
      %19 = cir.const #cir.int<0> : !s32i loc(#loc154)
      %20 = cir.cast(integral, %19 : !s32i), !s8i loc(#loc154)
      %21 = cir.load %0 : !cir.ptr<!cir.ptr<!s8i>>, !cir.ptr<!s8i> loc(#loc155)
      %22 = cir.const #cir.int<100> : !s32i loc(#loc156)
      %23 = cir.const #cir.int<1> : !s32i loc(#loc157)
      %24 = cir.binop(sub, %22, %23) nsw : !s32i loc(#loc156)
      %25 = cir.ptr_stride(%21 : !cir.ptr<!s8i>, %24 : !s32i), !cir.ptr<!s8i> loc(#loc158)
      cir.store %20, %25 : !s8i, !cir.ptr<!s8i> loc(#loc224)
      %26 = cir.load %0 : !cir.ptr<!cir.ptr<!s8i>>, !cir.ptr<!s8i> loc(#loc159)
      cir.call @printLine(%26) : (!cir.ptr<!s8i>) -> () loc(#loc160)
      %27 = cir.get_global @free : !cir.ptr<!cir.func<(!cir.ptr<!void>)>> loc(#loc161)
      %28 = cir.load %0 : !cir.ptr<!cir.ptr<!s8i>>, !cir.ptr<!s8i> loc(#loc162)
      %29 = cir.cast(bitcast, %28 : !cir.ptr<!s8i>), !cir.ptr<!void> loc(#loc162)
      cir.call @free(%29) : (!cir.ptr<!void>) -> () extra(#fn_attr) loc(#loc161)
    } loc(#loc213)
    cir.return loc(#loc119)
  } loc(#loc211)
} loc(#loc)
#loc = loc("/workspaces/juliet-c/testcases/CWE122_Heap_Based_Buffer_Overflow/s07/CWE122_Heap_Based_Buffer_Overflow__c_CWE805_char_loop_45.c":0:0)
#loc1 = loc("/usr/include/stdlib.h":672:1)
#loc2 = loc("/usr/include/stdlib.h":672:45)
#loc3 = loc("/usr/include/stdlib.h":756:1)
#loc4 = loc("/usr/include/stdlib.h":756:70)
#loc5 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_char_loop_45.c":21:1)
#loc6 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_char_loop_45.c":21:15)
#loc7 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_char_loop_45.c":45:1)
#loc8 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_char_loop_45.c":55:1)
#loc9 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_char_loop_45.c":47:5)
#loc10 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_char_loop_45.c":47:12)
#loc11 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_char_loop_45.c":48:12)
#loc12 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_char_loop_45.c":48:5)
#loc13 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_char_loop_45.c":50:20)
#loc14 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_char_loop_45.c":50:27)
#loc15 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_char_loop_45.c":50:30)
#loc16 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_char_loop_45.c":50:41)
#loc17 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_char_loop_45.c":50:42)
#loc18 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_char_loop_45.c":50:5)
#loc19 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_char_loop_45.c":51:5)
#loc20 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_char_loop_45.c":51:33)
#loc21 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_char_loop_45.c":51:9)
#loc22 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_char_loop_45.c":51:17)
#loc23 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_char_loop_45.c":51:23)
#loc24 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_char_loop_45.c":51:24)
#loc25 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_char_loop_45.c":51:30)
#loc26 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_char_loop_45.c":51:29)
#loc27 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_char_loop_45.c":52:15)
#loc28 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_char_loop_45.c":52:5)
#loc29 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_char_loop_45.c":52:10)
#loc30 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_char_loop_45.c":52:11)
#loc31 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_char_loop_45.c":53:72)
#loc32 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_char_loop_45.c":53:5)
#loc33 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_char_loop_45.c":54:5)
#loc34 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_char_loop_45.c":54:13)
#loc35 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_char_loop_45.c":93:1)
#loc36 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_char_loop_45.c":96:1)
#loc37 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_char_loop_45.c":95:5)
#loc38 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_char_loop_45.c":95:13)
#loc39 = loc("../../../testcasesupport/std_testcase_io.h":14:1)
#loc40 = loc("../../../testcasesupport/std_testcase_io.h":14:33)
#loc41 = loc("/usr/include/stdlib.h":687:1)
#loc42 = loc("/usr/include/stdlib.h":687:32)
#loc43 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_char_loop_45.c":26:1)
#loc44 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_char_loop_45.c":43:1)
#loc45 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_char_loop_45.c":28:5)
#loc46 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_char_loop_45.c":28:19)
#loc47 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_char_loop_45.c":29:5)
#loc48 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_char_loop_45.c":42:5)
#loc49 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_char_loop_45.c":30:9)
#loc50 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_char_loop_45.c":30:16)
#loc51 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_char_loop_45.c":31:9)
#loc52 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_char_loop_45.c":31:24)
#loc53 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_char_loop_45.c":32:16)
#loc54 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_char_loop_45.c":32:24)
#loc55 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_char_loop_45.c":32:29)
#loc56 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_char_loop_45.c":32:33)
#loc57 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_char_loop_45.c":32:9)
#loc58 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_char_loop_45.c":32:34)
#loc59 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_char_loop_45.c":33:25)
#loc60 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_char_loop_45.c":33:16)
#loc61 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_char_loop_45.c":33:20)
#loc62 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_char_loop_45.c":33:9)
#loc63 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_char_loop_45.c":35:9)
#loc64 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_char_loop_45.c":38:9)
#loc65 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_char_loop_45.c":35:18)
#loc66 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_char_loop_45.c":35:14)
#loc67 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_char_loop_45.c":35:21)
#loc68 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_char_loop_45.c":35:25)
#loc69 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_char_loop_45.c":35:23)
#loc70 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_char_loop_45.c":36:9)
#loc71 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_char_loop_45.c":37:30)
#loc72 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_char_loop_45.c":37:23)
#loc73 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_char_loop_45.c":37:13)
#loc74 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_char_loop_45.c":37:18)
#loc75 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_char_loop_45.c":37:19)
#loc76 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_char_loop_45.c":37:31)
#loc77 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_char_loop_45.c":35:31)
#loc78 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_char_loop_45.c":35:30)
#loc79 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_char_loop_45.c":39:23)
#loc80 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_char_loop_45.c":39:9)
#loc81 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_char_loop_45.c":39:14)
#loc82 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_char_loop_45.c":39:18)
#loc83 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_char_loop_45.c":39:19)
#loc84 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_char_loop_45.c":40:19)
#loc85 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_char_loop_45.c":40:9)
#loc86 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_char_loop_45.c":41:9)
#loc87 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_char_loop_45.c":41:14)
#loc88 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_char_loop_45.c":22:1)
#loc89 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_char_loop_45.c":22:15)
#loc90 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_char_loop_45.c":81:1)
#loc91 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_char_loop_45.c":91:1)
#loc92 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_char_loop_45.c":83:5)
#loc93 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_char_loop_45.c":83:12)
#loc94 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_char_loop_45.c":84:12)
#loc95 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_char_loop_45.c":84:5)
#loc96 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_char_loop_45.c":86:20)
#loc97 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_char_loop_45.c":86:27)
#loc98 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_char_loop_45.c":86:31)
#loc99 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_char_loop_45.c":86:42)
#loc100 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_char_loop_45.c":86:43)
#loc101 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_char_loop_45.c":86:5)
#loc102 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_char_loop_45.c":87:5)
#loc103 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_char_loop_45.c":87:33)
#loc104 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_char_loop_45.c":87:9)
#loc105 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_char_loop_45.c":87:17)
#loc106 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_char_loop_45.c":87:23)
#loc107 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_char_loop_45.c":87:24)
#loc108 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_char_loop_45.c":87:30)
#loc109 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_char_loop_45.c":87:29)
#loc110 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_char_loop_45.c":88:15)
#loc111 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_char_loop_45.c":88:5)
#loc112 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_char_loop_45.c":88:10)
#loc113 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_char_loop_45.c":88:11)
#loc114 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_char_loop_45.c":89:76)
#loc115 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_char_loop_45.c":89:5)
#loc116 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_char_loop_45.c":90:5)
#loc117 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_char_loop_45.c":90:17)
#loc118 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_char_loop_45.c":62:1)
#loc119 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_char_loop_45.c":79:1)
#loc120 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_char_loop_45.c":64:5)
#loc121 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_char_loop_45.c":64:19)
#loc122 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_char_loop_45.c":65:5)
#loc123 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_char_loop_45.c":78:5)
#loc124 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_char_loop_45.c":66:9)
#loc125 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_char_loop_45.c":66:16)
#loc126 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_char_loop_45.c":67:9)
#loc127 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_char_loop_45.c":67:24)
#loc128 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_char_loop_45.c":68:16)
#loc129 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_char_loop_45.c":68:24)
#loc130 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_char_loop_45.c":68:29)
#loc131 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_char_loop_45.c":68:33)
#loc132 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_char_loop_45.c":68:9)
#loc133 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_char_loop_45.c":68:34)
#loc134 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_char_loop_45.c":69:25)
#loc135 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_char_loop_45.c":69:16)
#loc136 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_char_loop_45.c":69:20)
#loc137 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_char_loop_45.c":69:9)
#loc138 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_char_loop_45.c":71:9)
#loc139 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_char_loop_45.c":74:9)
#loc140 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_char_loop_45.c":71:18)
#loc141 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_char_loop_45.c":71:14)
#loc142 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_char_loop_45.c":71:21)
#loc143 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_char_loop_45.c":71:25)
#loc144 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_char_loop_45.c":71:23)
#loc145 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_char_loop_45.c":72:9)
#loc146 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_char_loop_45.c":73:30)
#loc147 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_char_loop_45.c":73:23)
#loc148 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_char_loop_45.c":73:13)
#loc149 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_char_loop_45.c":73:18)
#loc150 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_char_loop_45.c":73:19)
#loc151 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_char_loop_45.c":73:31)
#loc152 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_char_loop_45.c":71:31)
#loc153 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_char_loop_45.c":71:30)
#loc154 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_char_loop_45.c":75:23)
#loc155 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_char_loop_45.c":75:9)
#loc156 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_char_loop_45.c":75:14)
#loc157 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_char_loop_45.c":75:18)
#loc158 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_char_loop_45.c":75:19)
#loc159 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_char_loop_45.c":76:19)
#loc160 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_char_loop_45.c":76:9)
#loc161 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_char_loop_45.c":77:9)
#loc162 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_char_loop_45.c":77:14)
#loc163 = loc(fused[#loc1, #loc2])
#loc164 = loc(fused[#loc3, #loc4])
#loc165 = loc(fused[#loc5, #loc6])
#loc166 = loc(fused[#loc7, #loc8])
#loc167 = loc(fused[#loc9, #loc10])
#loc168 = loc(fused[#loc12, #loc11])
#loc169 = loc(fused[#loc15, #loc16])
#loc170 = loc(fused[#loc14, #loc16])
#loc171 = loc(fused[#loc13, #loc17])
#loc172 = loc(fused[#loc18, #loc17])
#loc173 = loc(fused[#loc19, #loc20])
#loc174 = loc(fused[#loc21, #loc22])
#loc175 = loc(fused[#loc23, #loc20])
#loc176 = loc(fused[#loc28, #loc27])
#loc177 = loc(fused[#loc32, #loc31])
#loc178 = loc(fused[#loc33, #loc34])
#loc179 = loc(fused[#loc35, #loc36])
#loc180 = loc(fused[#loc37, #loc38])
#loc181 = loc(fused[#loc39, #loc40])
#loc182 = loc(fused[#loc41, #loc42])
#loc183 = loc(fused[#loc43, #loc44])
#loc184 = loc(fused[#loc45, #loc46])
#loc185 = loc(fused[#loc47, #loc48])
#loc186 = loc(fused[#loc49, #loc50])
#loc187 = loc(fused[#loc51, #loc52])
#loc188 = loc(fused[#loc57, #loc58])
#loc189 = loc(fused[#loc62, #loc59])
#loc190 = loc(fused[#loc63, #loc64])
#loc191 = loc(fused[#loc66, #loc65])
#loc192 = loc(fused[#loc67, #loc68])
#loc193 = loc(fused[#loc70, #loc64])
#loc194 = loc(fused[#loc73, #loc76])
#loc195 = loc(fused[#loc78, #loc77])
#loc196 = loc(fused[#loc80, #loc79])
#loc197 = loc(fused[#loc88, #loc89])
#loc198 = loc(fused[#loc90, #loc91])
#loc199 = loc(fused[#loc92, #loc93])
#loc200 = loc(fused[#loc95, #loc94])
#loc201 = loc(fused[#loc98, #loc99])
#loc202 = loc(fused[#loc97, #loc99])
#loc203 = loc(fused[#loc96, #loc100])
#loc204 = loc(fused[#loc101, #loc100])
#loc205 = loc(fused[#loc102, #loc103])
#loc206 = loc(fused[#loc104, #loc105])
#loc207 = loc(fused[#loc106, #loc103])
#loc208 = loc(fused[#loc111, #loc110])
#loc209 = loc(fused[#loc115, #loc114])
#loc210 = loc(fused[#loc116, #loc117])
#loc211 = loc(fused[#loc118, #loc119])
#loc212 = loc(fused[#loc120, #loc121])
#loc213 = loc(fused[#loc122, #loc123])
#loc214 = loc(fused[#loc124, #loc125])
#loc215 = loc(fused[#loc126, #loc127])
#loc216 = loc(fused[#loc132, #loc133])
#loc217 = loc(fused[#loc137, #loc134])
#loc218 = loc(fused[#loc138, #loc139])
#loc219 = loc(fused[#loc141, #loc140])
#loc220 = loc(fused[#loc142, #loc143])
#loc221 = loc(fused[#loc145, #loc139])
#loc222 = loc(fused[#loc148, #loc151])
#loc223 = loc(fused[#loc153, #loc152])
#loc224 = loc(fused[#loc155, #loc154])
