!s16i = !cir.int<s, 16>
!s32i = !cir.int<s, 32>
!s64i = !cir.int<s, 64>
!s8i = !cir.int<s, 8>
!u32i = !cir.int<u, 32>
#fn_attr = #cir<extra({nothrow = #cir.nothrow})>
#fn_attr1 = #cir<extra({inline = #cir.inline<no>, optnone = #cir.optnone, uwtable = #cir.uwtable<async>})>
#fn_attr2 = #cir<extra({inline = #cir.inline<no>, nothrow = #cir.nothrow, optnone = #cir.optnone, uwtable = #cir.uwtable<async>})>
#loc5 = loc("CWE190_Integer_Overflow__short_rand_square_83_goodB2G.cpp":26:56)
#loc6 = loc("CWE190_Integer_Overflow__short_rand_square_83_goodB2G.cpp":26:110)
#loc7 = loc("CWE190_Integer_Overflow__short_rand_square_83_goodB2G.cpp":26:116)
#loc16 = loc("/usr/lib/gcc/x86_64-linux-gnu/13/../../../../include/c++/13/bits/std_abs.h":56:7)
#loc17 = loc("/usr/lib/gcc/x86_64-linux-gnu/13/../../../../include/c++/13/bits/std_abs.h":56:12)
#loc31 = loc("CWE190_Integer_Overflow__short_rand_square_83_goodB2G.cpp":33:56)
!ty_CWE190_Integer_Overflow__short_rand_square_833A3ACWE190_Integer_Overflow__short_rand_square_83_goodB2G = !cir.record<class "CWE190_Integer_Overflow__short_rand_square_83::CWE190_Integer_Overflow__short_rand_square_83_goodB2G" {!s16i} #cir.record.decl.ast>
#loc51 = loc(fused[#loc6, #loc7])
#loc55 = loc(fused[#loc16, #loc17])
module @"/workspaces/juliet-c/testcases/CWE190_Integer_Overflow/s05/CWE190_Integer_Overflow__short_rand_square_83_goodB2G.cpp" attributes {cir.lang = #cir.lang<cxx>, cir.sob = #cir.signed_overflow_behavior<undefined>, cir.triple = "x86_64-unknown-linux-gnu", cir.type_size_info = #cir.type_size_info<char = 8, int = 32, size_t = 64>, cir.uwtable = #cir.uwtable<async>, dlti.dl_spec = #dlti.dl_spec<i64 = dense<64> : vector<2xi64>, !llvm.ptr<272> = dense<64> : vector<4xi64>, !llvm.ptr<271> = dense<32> : vector<4xi64>, f128 = dense<128> : vector<2xi64>, f80 = dense<128> : vector<2xi64>, i128 = dense<128> : vector<2xi64>, i8 = dense<8> : vector<2xi64>, !llvm.ptr = dense<64> : vector<4xi64>, i1 = dense<8> : vector<2xi64>, !llvm.ptr<270> = dense<32> : vector<4xi64>, f16 = dense<16> : vector<2xi64>, f64 = dense<64> : vector<2xi64>, i32 = dense<32> : vector<2xi64>, i16 = dense<16> : vector<2xi64>, "dlti.stack_alignment" = 128 : i64, "dlti.mangling_mode" = "e", "dlti.endianness" = "little">} {
  cir.func private @rand() -> !s32i extra(#fn_attr) loc(#loc49)
  cir.func @_ZN45CWE190_Integer_Overflow__short_rand_square_8353CWE190_Integer_Overflow__short_rand_square_83_goodB2GC2Es(%arg0: !cir.ptr<!ty_CWE190_Integer_Overflow__short_rand_square_833A3ACWE190_Integer_Overflow__short_rand_square_83_goodB2G> loc("CWE190_Integer_Overflow__short_rand_square_83_goodB2G.cpp":26:56), %arg1: !s16i loc(fused[#loc6, #loc7])) extra(#fn_attr1) {
    %0 = cir.alloca !cir.ptr<!ty_CWE190_Integer_Overflow__short_rand_square_833A3ACWE190_Integer_Overflow__short_rand_square_83_goodB2G>, !cir.ptr<!cir.ptr<!ty_CWE190_Integer_Overflow__short_rand_square_833A3ACWE190_Integer_Overflow__short_rand_square_83_goodB2G>>, ["this", init] {alignment = 8 : i64} loc(#loc5)
    %1 = cir.alloca !s16i, !cir.ptr<!s16i>, ["dataCopy", init] {alignment = 2 : i64} loc(#loc51)
    cir.store %arg0, %0 : !cir.ptr<!ty_CWE190_Integer_Overflow__short_rand_square_833A3ACWE190_Integer_Overflow__short_rand_square_83_goodB2G>, !cir.ptr<!cir.ptr<!ty_CWE190_Integer_Overflow__short_rand_square_833A3ACWE190_Integer_Overflow__short_rand_square_83_goodB2G>> loc(#loc8)
    cir.store %arg1, %1 : !s16i, !cir.ptr<!s16i> loc(#loc8)
    %2 = cir.load %0 : !cir.ptr<!cir.ptr<!ty_CWE190_Integer_Overflow__short_rand_square_833A3ACWE190_Integer_Overflow__short_rand_square_83_goodB2G>>, !cir.ptr<!ty_CWE190_Integer_Overflow__short_rand_square_833A3ACWE190_Integer_Overflow__short_rand_square_83_goodB2G> loc(#loc5)
    %3 = cir.load %1 : !cir.ptr<!s16i>, !s16i loc(#loc9)
    %4 = cir.get_member %2[0] {name = "data"} : !cir.ptr<!ty_CWE190_Integer_Overflow__short_rand_square_833A3ACWE190_Integer_Overflow__short_rand_square_83_goodB2G> -> !cir.ptr<!s16i> loc(#loc10)
    cir.store %3, %4 : !s16i, !cir.ptr<!s16i> loc(#loc52)
    %5 = cir.call @rand() : () -> !s32i extra(#fn_attr) loc(#loc12)
    %6 = cir.const #cir.int<1> : !s32i loc(#loc12)
    %7 = cir.binop(and, %5, %6) : !s32i loc(#loc12)
    %8 = cir.cast(int_to_bool, %7 : !s32i), !cir.bool loc(#loc12)
    %9 = cir.ternary(%8, true {
      %13 = cir.call @rand() : () -> !s32i extra(#fn_attr) loc(#loc12)
      %14 = cir.cast(integral, %13 : !s32i), !u32i loc(#loc12)
      %15 = cir.const #cir.int<30> : !s32i loc(#loc12)
      %16 = cir.shift(left, %14 : !u32i, %15 : !s32i) -> !u32i loc(#loc12)
      %17 = cir.call @rand() : () -> !s32i extra(#fn_attr) loc(#loc12)
      %18 = cir.cast(integral, %17 : !s32i), !u32i loc(#loc12)
      %19 = cir.const #cir.int<15> : !s32i loc(#loc12)
      %20 = cir.shift(left, %18 : !u32i, %19 : !s32i) -> !u32i loc(#loc12)
      %21 = cir.binop(xor, %16, %20) : !u32i loc(#loc12)
      %22 = cir.call @rand() : () -> !s32i extra(#fn_attr) loc(#loc12)
      %23 = cir.cast(integral, %22 : !s32i), !u32i loc(#loc12)
      %24 = cir.binop(xor, %21, %23) : !u32i loc(#loc12)
      cir.yield %24 : !u32i loc(#loc12)
    }, false {
      %13 = cir.call @rand() : () -> !s32i extra(#fn_attr) loc(#loc12)
      %14 = cir.cast(integral, %13 : !s32i), !u32i loc(#loc12)
      %15 = cir.const #cir.int<30> : !s32i loc(#loc12)
      %16 = cir.shift(left, %14 : !u32i, %15 : !s32i) -> !u32i loc(#loc12)
      %17 = cir.call @rand() : () -> !s32i extra(#fn_attr) loc(#loc12)
      %18 = cir.cast(integral, %17 : !s32i), !u32i loc(#loc12)
      %19 = cir.const #cir.int<15> : !s32i loc(#loc12)
      %20 = cir.shift(left, %18 : !u32i, %19 : !s32i) -> !u32i loc(#loc12)
      %21 = cir.binop(xor, %16, %20) : !u32i loc(#loc12)
      %22 = cir.call @rand() : () -> !s32i extra(#fn_attr) loc(#loc12)
      %23 = cir.cast(integral, %22 : !s32i), !u32i loc(#loc12)
      %24 = cir.binop(xor, %21, %23) : !u32i loc(#loc12)
      %25 = cir.unary(minus, %24) : !u32i, !u32i loc(#loc12)
      %26 = cir.const #cir.int<1> : !s32i loc(#loc12)
      %27 = cir.cast(integral, %26 : !s32i), !u32i loc(#loc12)
      %28 = cir.binop(sub, %25, %27) : !u32i loc(#loc12)
      cir.yield %28 : !u32i loc(#loc12)
    }) : (!cir.bool) -> !u32i loc(#loc12)
    %10 = cir.cast(integral, %9 : !u32i), !s32i loc(#loc12)
    %11 = cir.cast(integral, %10 : !s32i), !s16i loc(#loc12)
    %12 = cir.get_member %2[0] {name = "data"} : !cir.ptr<!ty_CWE190_Integer_Overflow__short_rand_square_833A3ACWE190_Integer_Overflow__short_rand_square_83_goodB2G> -> !cir.ptr<!s16i> loc(#loc10)
    cir.store %11, %12 : !s16i, !cir.ptr<!s16i> loc(#loc53)
    cir.return loc(#loc4)
  } loc(#loc50)
  cir.func private @_ZN45CWE190_Integer_Overflow__short_rand_square_8353CWE190_Integer_Overflow__short_rand_square_83_goodB2GC1Es(!cir.ptr<!ty_CWE190_Integer_Overflow__short_rand_square_833A3ACWE190_Integer_Overflow__short_rand_square_83_goodB2G>, !s16i) alias(@_ZN45CWE190_Integer_Overflow__short_rand_square_8353CWE190_Integer_Overflow__short_rand_square_83_goodB2GC2Es) loc(#loc50)
  cir.func linkonce_odr @_ZSt3absl(%arg0: !s64i loc(fused[#loc16, #loc17])) -> !s64i extra(#fn_attr1) {
    %0 = cir.alloca !s64i, !cir.ptr<!s64i>, ["__i", init] {alignment = 8 : i64} loc(#loc55)
    %1 = cir.alloca !s64i, !cir.ptr<!s64i>, ["__retval"] {alignment = 8 : i64} loc(#loc15)
    cir.store %arg0, %0 : !s64i, !cir.ptr<!s64i> loc(#loc18)
    %2 = cir.load %0 : !cir.ptr<!s64i>, !s64i loc(#loc19)
    %3 = cir.abs %2 poison : !s64i loc(#loc20)
    cir.store %3, %1 : !s64i, !cir.ptr<!s64i> loc(#loc56)
    %4 = cir.load %1 : !cir.ptr<!s64i>, !s64i loc(#loc56)
    cir.return %4 : !s64i loc(#loc56)
  } loc(#loc54)
  cir.func private @sqrt(!cir.double) -> !cir.double extra(#fn_attr) loc(#loc23)
  cir.func private @printIntLine(!s32i) loc(#loc57)
  cir.func private @printLine(!cir.ptr<!s8i>) loc(#loc58)
  cir.global "private" constant cir_private dsolocal @".str" = #cir.const_array<"data value is too large to perform arithmetic safely.\00" : !cir.array<!s8i x 54>> : !cir.array<!s8i x 54> {alignment = 1 : i64} loc(#loc28)
  cir.func @_ZN45CWE190_Integer_Overflow__short_rand_square_8353CWE190_Integer_Overflow__short_rand_square_83_goodB2GD2Ev(%arg0: !cir.ptr<!ty_CWE190_Integer_Overflow__short_rand_square_833A3ACWE190_Integer_Overflow__short_rand_square_83_goodB2G> loc("CWE190_Integer_Overflow__short_rand_square_83_goodB2G.cpp":33:56)) extra(#fn_attr2) {
    %0 = cir.alloca !cir.ptr<!ty_CWE190_Integer_Overflow__short_rand_square_833A3ACWE190_Integer_Overflow__short_rand_square_83_goodB2G>, !cir.ptr<!cir.ptr<!ty_CWE190_Integer_Overflow__short_rand_square_833A3ACWE190_Integer_Overflow__short_rand_square_83_goodB2G>>, ["this", init] {alignment = 8 : i64} loc(#loc31)
    cir.store %arg0, %0 : !cir.ptr<!ty_CWE190_Integer_Overflow__short_rand_square_833A3ACWE190_Integer_Overflow__short_rand_square_83_goodB2G>, !cir.ptr<!cir.ptr<!ty_CWE190_Integer_Overflow__short_rand_square_833A3ACWE190_Integer_Overflow__short_rand_square_83_goodB2G>> loc(#loc32)
    %1 = cir.load %0 : !cir.ptr<!cir.ptr<!ty_CWE190_Integer_Overflow__short_rand_square_833A3ACWE190_Integer_Overflow__short_rand_square_83_goodB2G>>, !cir.ptr<!ty_CWE190_Integer_Overflow__short_rand_square_833A3ACWE190_Integer_Overflow__short_rand_square_83_goodB2G> loc(#loc31)
    cir.scope {
      %2 = cir.get_member %1[0] {name = "data"} : !cir.ptr<!ty_CWE190_Integer_Overflow__short_rand_square_833A3ACWE190_Integer_Overflow__short_rand_square_83_goodB2G> -> !cir.ptr<!s16i> loc(#loc10)
      %3 = cir.load %2 : !cir.ptr<!s16i>, !s16i loc(#loc35)
      %4 = cir.cast(integral, %3 : !s16i), !s64i loc(#loc35)
      %5 = cir.call @_ZSt3absl(%4) : (!s64i) -> !s64i loc(#loc36)
      %6 = cir.get_global @sqrt : !cir.ptr<!cir.func<(!cir.double) -> !cir.double>> loc(#loc37)
      %7 = cir.const #cir.int<32767> : !s32i loc(#loc38)
      %8 = cir.cast(int_to_float, %7 : !s32i), !cir.double loc(#loc38)
      %9 = cir.call @sqrt(%8) : (!cir.double) -> !cir.double extra(#fn_attr) loc(#loc37)
      %10 = cir.cast(float_to_int, %9 : !cir.double), !s64i loc(#loc37)
      %11 = cir.cmp(le, %5, %10) : !s64i, !cir.bool loc(#loc61)
      cir.if %11 {
        %12 = cir.alloca !s16i, !cir.ptr<!s16i>, ["result", init] {alignment = 2 : i64} loc(#loc63)
        %13 = cir.get_member %1[0] {name = "data"} : !cir.ptr<!ty_CWE190_Integer_Overflow__short_rand_square_833A3ACWE190_Integer_Overflow__short_rand_square_83_goodB2G> -> !cir.ptr<!s16i> loc(#loc10)
        %14 = cir.load %13 : !cir.ptr<!s16i>, !s16i loc(#loc45)
        %15 = cir.cast(integral, %14 : !s16i), !s32i loc(#loc45)
        %16 = cir.get_member %1[0] {name = "data"} : !cir.ptr<!ty_CWE190_Integer_Overflow__short_rand_square_833A3ACWE190_Integer_Overflow__short_rand_square_83_goodB2G> -> !cir.ptr<!s16i> loc(#loc10)
        %17 = cir.load %16 : !cir.ptr<!s16i>, !s16i loc(#loc44)
        %18 = cir.cast(integral, %17 : !s16i), !s32i loc(#loc44)
        %19 = cir.binop(mul, %15, %18) nsw : !s32i loc(#loc45)
        %20 = cir.cast(integral, %19 : !s32i), !s16i loc(#loc45)
        cir.store %20, %12 : !s16i, !cir.ptr<!s16i> loc(#loc63)
        %21 = cir.load %12 : !cir.ptr<!s16i>, !s16i loc(#loc46)
        %22 = cir.cast(integral, %21 : !s16i), !s32i loc(#loc46)
        cir.call @printIntLine(%22) : (!s32i) -> () loc(#loc47)
      } else {
        %12 = cir.get_global @".str" : !cir.ptr<!cir.array<!s8i x 54>> loc(#loc28)
        %13 = cir.cast(array_to_ptrdecay, %12 : !cir.ptr<!cir.array<!s8i x 54>>), !cir.ptr<!s8i> loc(#loc28)
        cir.call @printLine(%13) : (!cir.ptr<!s8i>) -> () loc(#loc48)
      } loc(#loc62)
    } loc(#loc60)
    cir.return loc(#loc30)
  } loc(#loc59)
  cir.func private @_ZN45CWE190_Integer_Overflow__short_rand_square_8353CWE190_Integer_Overflow__short_rand_square_83_goodB2GD1Ev(!cir.ptr<!ty_CWE190_Integer_Overflow__short_rand_square_833A3ACWE190_Integer_Overflow__short_rand_square_83_goodB2G>) alias(@_ZN45CWE190_Integer_Overflow__short_rand_square_8353CWE190_Integer_Overflow__short_rand_square_83_goodB2GD2Ev) loc(#loc59)
} loc(#loc)
#loc = loc("/workspaces/juliet-c/testcases/CWE190_Integer_Overflow/s05/CWE190_Integer_Overflow__short_rand_square_83_goodB2G.cpp":0:0)
#loc1 = loc("/usr/include/stdlib.h":573:1)
#loc2 = loc("/usr/include/stdlib.h":573:24)
#loc3 = loc("CWE190_Integer_Overflow__short_rand_square_83_goodB2G.cpp":26:1)
#loc4 = loc("CWE190_Integer_Overflow__short_rand_square_83_goodB2G.cpp":31:1)
#loc8 = loc("CWE190_Integer_Overflow__short_rand_square_83_goodB2G.cpp":27:1)
#loc9 = loc("CWE190_Integer_Overflow__short_rand_square_83_goodB2G.cpp":28:12)
#loc10 = loc("./CWE190_Integer_Overflow__short_rand_square_83.h":56:11)
#loc11 = loc("CWE190_Integer_Overflow__short_rand_square_83_goodB2G.cpp":28:5)
#loc12 = loc("CWE190_Integer_Overflow__short_rand_square_83_goodB2G.cpp":30:19)
#loc13 = loc("CWE190_Integer_Overflow__short_rand_square_83_goodB2G.cpp":30:5)
#loc14 = loc("/usr/lib/gcc/x86_64-linux-gnu/13/../../../../include/c++/13/bits/std_abs.h":55:3)
#loc15 = loc("/usr/lib/gcc/x86_64-linux-gnu/13/../../../../include/c++/13/bits/std_abs.h":56:47)
#loc18 = loc("/usr/lib/gcc/x86_64-linux-gnu/13/../../../../include/c++/13/bits/std_abs.h":56:17)
#loc19 = loc("/usr/lib/gcc/x86_64-linux-gnu/13/../../../../include/c++/13/bits/std_abs.h":56:41)
#loc20 = loc("/usr/lib/gcc/x86_64-linux-gnu/13/../../../../include/c++/13/bits/std_abs.h":56:26)
#loc21 = loc("/usr/lib/gcc/x86_64-linux-gnu/13/../../../../include/c++/13/bits/std_abs.h":56:19)
#loc22 = loc("/usr/lib/gcc/x86_64-linux-gnu/13/../../../../include/c++/13/bits/std_abs.h":56:44)
#loc23 = loc("/usr/include/x86_64-linux-gnu/bits/mathcalls.h":143:1)
#loc24 = loc("../../../testcasesupport/std_testcase_io.h":18:1)
#loc25 = loc("../../../testcasesupport/std_testcase_io.h":18:33)
#loc26 = loc("../../../testcasesupport/std_testcase_io.h":14:1)
#loc27 = loc("../../../testcasesupport/std_testcase_io.h":14:33)
#loc28 = loc("CWE190_Integer_Overflow__short_rand_square_83_goodB2G.cpp":43:19)
#loc29 = loc("CWE190_Integer_Overflow__short_rand_square_83_goodB2G.cpp":33:1)
#loc30 = loc("CWE190_Integer_Overflow__short_rand_square_83_goodB2G.cpp":45:1)
#loc32 = loc("CWE190_Integer_Overflow__short_rand_square_83_goodB2G.cpp":34:1)
#loc33 = loc("CWE190_Integer_Overflow__short_rand_square_83_goodB2G.cpp":36:5)
#loc34 = loc("CWE190_Integer_Overflow__short_rand_square_83_goodB2G.cpp":44:5)
#loc35 = loc("CWE190_Integer_Overflow__short_rand_square_83_goodB2G.cpp":36:19)
#loc36 = loc("CWE190_Integer_Overflow__short_rand_square_83_goodB2G.cpp":36:9)
#loc37 = loc("CWE190_Integer_Overflow__short_rand_square_83_goodB2G.cpp":36:34)
#loc38 = loc("CWE190_Integer_Overflow__short_rand_square_83_goodB2G.cpp":36:47)
#loc39 = loc("CWE190_Integer_Overflow__short_rand_square_83_goodB2G.cpp":36:55)
#loc40 = loc("CWE190_Integer_Overflow__short_rand_square_83_goodB2G.cpp":37:5)
#loc41 = loc("CWE190_Integer_Overflow__short_rand_square_83_goodB2G.cpp":40:5)
#loc42 = loc("CWE190_Integer_Overflow__short_rand_square_83_goodB2G.cpp":42:5)
#loc43 = loc("CWE190_Integer_Overflow__short_rand_square_83_goodB2G.cpp":38:9)
#loc44 = loc("CWE190_Integer_Overflow__short_rand_square_83_goodB2G.cpp":38:31)
#loc45 = loc("CWE190_Integer_Overflow__short_rand_square_83_goodB2G.cpp":38:24)
#loc46 = loc("CWE190_Integer_Overflow__short_rand_square_83_goodB2G.cpp":39:22)
#loc47 = loc("CWE190_Integer_Overflow__short_rand_square_83_goodB2G.cpp":39:9)
#loc48 = loc("CWE190_Integer_Overflow__short_rand_square_83_goodB2G.cpp":43:9)
#loc49 = loc(fused[#loc1, #loc2])
#loc50 = loc(fused[#loc3, #loc4])
#loc52 = loc(fused[#loc11, #loc9])
#loc53 = loc(fused[#loc13, #loc12])
#loc54 = loc(fused[#loc14, #loc15])
#loc56 = loc(fused[#loc21, #loc22])
#loc57 = loc(fused[#loc24, #loc25])
#loc58 = loc(fused[#loc26, #loc27])
#loc59 = loc(fused[#loc29, #loc30])
#loc60 = loc(fused[#loc33, #loc34])
#loc61 = loc(fused[#loc36, #loc39])
#loc62 = loc(fused[#loc40, #loc41, #loc42, #loc34])
#loc63 = loc(fused[#loc43, #loc44])
