!s32i = !cir.int<s, 32>
!s64i = !cir.int<s, 64>
!s8i = !cir.int<s, 8>
!u32i = !cir.int<u, 32>
!void = !cir.void
#fn_attr = #cir<extra({nothrow = #cir.nothrow})>
#fn_attr1 = #cir<extra({inline = #cir.inline<no>, nothrow = #cir.nothrow, optnone = #cir.optnone})>
#loc9 = loc("CWE191_Integer_Underflow__char_rand_postdec_21.c":25:21)
#loc10 = loc("CWE191_Integer_Underflow__char_rand_postdec_21.c":25:26)
#loc30 = loc("CWE191_Integer_Underflow__char_rand_postdec_21.c":43:18)
#loc56 = loc("CWE191_Integer_Underflow__char_rand_postdec_21.c":160:10)
#loc57 = loc("CWE191_Integer_Underflow__char_rand_postdec_21.c":160:14)
#loc58 = loc("CWE191_Integer_Underflow__char_rand_postdec_21.c":160:20)
#loc59 = loc("CWE191_Integer_Underflow__char_rand_postdec_21.c":160:32)
#loc80 = loc("CWE191_Integer_Underflow__char_rand_postdec_21.c":58:26)
#loc81 = loc("CWE191_Integer_Underflow__char_rand_postdec_21.c":58:31)
#loc110 = loc("CWE191_Integer_Underflow__char_rand_postdec_21.c":86:18)
#loc120 = loc("CWE191_Integer_Underflow__char_rand_postdec_21.c":92:26)
#loc121 = loc("CWE191_Integer_Underflow__char_rand_postdec_21.c":92:31)
#loc148 = loc("CWE191_Integer_Underflow__char_rand_postdec_21.c":115:18)
#loc158 = loc("CWE191_Integer_Underflow__char_rand_postdec_21.c":121:25)
#loc159 = loc("CWE191_Integer_Underflow__char_rand_postdec_21.c":121:30)
#loc190 = loc(fused[#loc9, #loc10])
#loc209 = loc(fused[#loc56, #loc57])
#loc210 = loc(fused[#loc58, #loc59])
#loc216 = loc(fused[#loc80, #loc81])
#loc231 = loc(fused[#loc120, #loc121])
#loc246 = loc(fused[#loc158, #loc159])
module @"/home/ladisgin/git_proj/juliet-c/testcases/CWE191_Integer_Underflow/s04/CWE191_Integer_Underflow__char_rand_postdec_21.c" attributes {cir.lang = #cir.lang<c>, cir.sob = #cir.signed_overflow_behavior<undefined>, cir.triple = "x86_64-unknown-linux-gnu", dlti.dl_spec = #dlti.dl_spec<i64 = dense<64> : vector<2xi64>, i128 = dense<128> : vector<2xi64>, f80 = dense<128> : vector<2xi64>, f128 = dense<128> : vector<2xi64>, f16 = dense<16> : vector<2xi64>, !llvm.ptr<270> = dense<32> : vector<4xi64>, f64 = dense<64> : vector<2xi64>, !llvm.ptr<271> = dense<32> : vector<4xi64>, !llvm.ptr<272> = dense<64> : vector<4xi64>, i16 = dense<16> : vector<2xi64>, i8 = dense<8> : vector<2xi64>, i32 = dense<32> : vector<2xi64>, !llvm.ptr = dense<64> : vector<4xi64>, i1 = dense<8> : vector<2xi64>, "dlti.endianness" = "little", "dlti.stack_alignment" = 128 : i64>} {
  cir.func private @rand() -> !s32i extra(#fn_attr) loc(#loc186)
  cir.global "private" internal dsolocal @badStatic = #cir.int<0> : !s32i {alignment = 4 : i64} loc(#loc187)
  cir.func private @printHexCharLine(!s8i) loc(#loc188)
  cir.func internal private @badSink(%arg0: !s8i loc(fused[#loc9, #loc10])) extra(#fn_attr1) {
    %0 = cir.alloca !s8i, !cir.ptr<!s8i>, ["result", init] {alignment = 1 : i64} loc(#loc191)
    %1 = cir.alloca !s8i, !cir.ptr<!s8i>, ["data", init] {alignment = 1 : i64} loc(#loc190)
    cir.store %arg0, %1 : !s8i, !cir.ptr<!s8i> loc(#loc13)
    cir.br ^bb1 loc(#loc192)
  ^bb1:  // pred: ^bb0
    %2 = cir.get_global @badStatic : !cir.ptr<!s32i> loc(#loc187)
    %3 = cir.load %2 : !cir.ptr<!s32i>, !s32i loc(#loc16)
    %4 = cir.cast(int_to_bool, %3 : !s32i), !cir.bool loc(#loc16)
    cir.brcond %4 ^bb2, ^bb5 loc(#loc193)
  ^bb2:  // pred: ^bb1
    cir.br ^bb3 loc(#loc194)
  ^bb3:  // pred: ^bb2
    %5 = cir.load %1 : !cir.ptr<!s8i>, !s8i loc(#loc20)
    %6 = cir.unary(dec, %5) : !s8i, !s8i loc(#loc21)
    cir.store %6, %1 : !s8i, !cir.ptr<!s8i> loc(#loc195)
    %7 = cir.load %1 : !cir.ptr<!s8i>, !s8i loc(#loc12)
    cir.store %7, %0 : !s8i, !cir.ptr<!s8i> loc(#loc191)
    %8 = cir.load %0 : !cir.ptr<!s8i>, !s8i loc(#loc22)
    cir.call @printHexCharLine(%8) : (!s8i) -> () loc(#loc23)
    cir.br ^bb4 loc(#loc19)
  ^bb4:  // pred: ^bb3
    cir.br ^bb5 loc(#loc15)
  ^bb5:  // 2 preds: ^bb1, ^bb4
    cir.br ^bb6 loc(#loc15)
  ^bb6:  // pred: ^bb5
    cir.return loc(#loc8)
  } loc(#loc189)
  cir.func no_proto @CWE191_Integer_Underflow__char_rand_postdec_21_bad() extra(#fn_attr1) {
    %0 = cir.alloca !s8i, !cir.ptr<!s8i>, ["data"] {alignment = 1 : i64} loc(#loc197)
    %1 = cir.const #cir.int<32> : !s32i loc(#loc28)
    %2 = cir.cast(integral, %1 : !s32i), !s8i loc(#loc28)
    cir.store %2, %0 : !s8i, !cir.ptr<!s8i> loc(#loc198)
    %3 = cir.call @rand() : () -> !s32i extra(#fn_attr) loc(#loc30)
    %4 = cir.const #cir.int<1> : !s32i loc(#loc30)
    %5 = cir.binop(and, %3, %4) : !s32i loc(#loc30)
    %6 = cir.cast(int_to_bool, %5 : !s32i), !cir.bool loc(#loc30)
    cir.brcond %6 ^bb1, ^bb2 loc(#loc30)
  ^bb1:  // pred: ^bb0
    %7 = cir.call @rand() : () -> !s32i extra(#fn_attr) loc(#loc30)
    %8 = cir.cast(integral, %7 : !s32i), !u32i loc(#loc30)
    %9 = cir.const #cir.int<30> : !s32i loc(#loc30)
    %10 = cir.shift(left, %8 : !u32i, %9 : !s32i) -> !u32i loc(#loc30)
    %11 = cir.call @rand() : () -> !s32i extra(#fn_attr) loc(#loc30)
    %12 = cir.cast(integral, %11 : !s32i), !u32i loc(#loc30)
    %13 = cir.const #cir.int<15> : !s32i loc(#loc30)
    %14 = cir.shift(left, %12 : !u32i, %13 : !s32i) -> !u32i loc(#loc30)
    %15 = cir.binop(xor, %10, %14) : !u32i loc(#loc30)
    %16 = cir.call @rand() : () -> !s32i extra(#fn_attr) loc(#loc30)
    %17 = cir.cast(integral, %16 : !s32i), !u32i loc(#loc30)
    %18 = cir.binop(xor, %15, %17) : !u32i loc(#loc30)
    cir.br ^bb3(%18 : !u32i) loc(#loc30)
  ^bb2:  // pred: ^bb0
    %19 = cir.call @rand() : () -> !s32i extra(#fn_attr) loc(#loc30)
    %20 = cir.cast(integral, %19 : !s32i), !u32i loc(#loc30)
    %21 = cir.const #cir.int<30> : !s32i loc(#loc30)
    %22 = cir.shift(left, %20 : !u32i, %21 : !s32i) -> !u32i loc(#loc30)
    %23 = cir.call @rand() : () -> !s32i extra(#fn_attr) loc(#loc30)
    %24 = cir.cast(integral, %23 : !s32i), !u32i loc(#loc30)
    %25 = cir.const #cir.int<15> : !s32i loc(#loc30)
    %26 = cir.shift(left, %24 : !u32i, %25 : !s32i) -> !u32i loc(#loc30)
    %27 = cir.binop(xor, %22, %26) : !u32i loc(#loc30)
    %28 = cir.call @rand() : () -> !s32i extra(#fn_attr) loc(#loc30)
    %29 = cir.cast(integral, %28 : !s32i), !u32i loc(#loc30)
    %30 = cir.binop(xor, %27, %29) : !u32i loc(#loc30)
    %31 = cir.unary(minus, %30) : !u32i, !u32i loc(#loc30)
    %32 = cir.const #cir.int<1> : !s32i loc(#loc30)
    %33 = cir.cast(integral, %32 : !s32i), !u32i loc(#loc30)
    %34 = cir.binop(sub, %31, %33) : !u32i loc(#loc30)
    cir.br ^bb3(%34 : !u32i) loc(#loc30)
  ^bb3(%35: !u32i loc("CWE191_Integer_Underflow__char_rand_postdec_21.c":43:18)):  // 2 preds: ^bb1, ^bb2
    cir.br ^bb4 loc(#loc30)
  ^bb4:  // pred: ^bb3
    %36 = cir.cast(integral, %35 : !u32i), !s32i loc(#loc30)
    %37 = cir.cast(integral, %36 : !s32i), !s8i loc(#loc30)
    cir.store %37, %0 : !s8i, !cir.ptr<!s8i> loc(#loc199)
    %38 = cir.const #cir.int<1> : !s32i loc(#loc32)
    %39 = cir.get_global @badStatic : !cir.ptr<!s32i> loc(#loc187)
    cir.store %38, %39 : !s32i, !cir.ptr<!s32i> loc(#loc200)
    %40 = cir.load %0 : !cir.ptr<!s8i>, !s8i loc(#loc34)
    cir.call @badSink(%40) : (!s8i) -> () loc(#loc35)
    cir.return loc(#loc25)
  } loc(#loc196)
  cir.func no_proto @CWE191_Integer_Underflow__char_rand_postdec_21_good() extra(#fn_attr1) {
    %0 = cir.get_global @goodB2G1 : !cir.ptr<!cir.func<!void ()>> loc(#loc202)
    cir.call %0() : (!cir.ptr<!cir.func<!void ()>>) -> () loc(#loc38)
    %1 = cir.get_global @goodB2G2 : !cir.ptr<!cir.func<!void ()>> loc(#loc203)
    cir.call %1() : (!cir.ptr<!cir.func<!void ()>>) -> () loc(#loc40)
    %2 = cir.get_global @goodG2B : !cir.ptr<!cir.func<!void ()>> loc(#loc204)
    cir.call %2() : (!cir.ptr<!cir.func<!void ()>>) -> () loc(#loc42)
    cir.return loc(#loc37)
  } loc(#loc201)
  cir.func private @srand(!u32i) extra(#fn_attr) loc(#loc205)
  cir.func private @time(!cir.ptr<!s64i>) -> !s64i extra(#fn_attr) loc(#loc206)
  cir.func private @printLine(!cir.ptr<!s8i>) loc(#loc207)
  cir.global "private" constant cir_private dsolocal @".str" = #cir.const_array<"Calling good()...\00" : !cir.array<!s8i x 18>> : !cir.array<!s8i x 18> {alignment = 1 : i64} loc(#loc50)
  cir.global "private" constant cir_private dsolocal @".str.1" = #cir.const_array<"Finished good()\00" : !cir.array<!s8i x 16>> : !cir.array<!s8i x 16> {alignment = 1 : i64} loc(#loc51)
  cir.global "private" constant cir_private dsolocal @".str.2" = #cir.const_array<"Calling bad()...\00" : !cir.array<!s8i x 17>> : !cir.array<!s8i x 17> {alignment = 1 : i64} loc(#loc52)
  cir.global "private" constant cir_private dsolocal @".str.3" = #cir.const_array<"Finished bad()\00" : !cir.array<!s8i x 15>> : !cir.array<!s8i x 15> {alignment = 1 : i64} loc(#loc53)
  cir.func @main(%arg0: !s32i loc(fused[#loc56, #loc57]), %arg1: !cir.ptr<!cir.ptr<!s8i>> loc(fused[#loc58, #loc59])) -> !s32i extra(#fn_attr1) {
    %0 = cir.alloca !s32i, !cir.ptr<!s32i>, ["argc", init] {alignment = 4 : i64} loc(#loc209)
    %1 = cir.alloca !cir.ptr<!cir.ptr<!s8i>>, !cir.ptr<!cir.ptr<!cir.ptr<!s8i>>>, ["argv", init] {alignment = 8 : i64} loc(#loc210)
    %2 = cir.alloca !s32i, !cir.ptr<!s32i>, ["__retval"] {alignment = 4 : i64} loc(#loc55)
    cir.store %arg0, %0 : !s32i, !cir.ptr<!s32i> loc(#loc60)
    cir.store %arg1, %1 : !cir.ptr<!cir.ptr<!s8i>>, !cir.ptr<!cir.ptr<!cir.ptr<!s8i>>> loc(#loc60)
    %3 = cir.const #cir.ptr<null> : !cir.ptr<!s64i> loc(#loc61)
    %4 = cir.call @time(%3) : (!cir.ptr<!s64i>) -> !s64i extra(#fn_attr) loc(#loc62)
    %5 = cir.cast(integral, %4 : !s64i), !u32i loc(#loc62)
    cir.call @srand(%5) : (!u32i) -> () extra(#fn_attr) loc(#loc63)
    %6 = cir.get_global @".str" : !cir.ptr<!cir.array<!s8i x 18>> loc(#loc50)
    %7 = cir.cast(array_to_ptrdecay, %6 : !cir.ptr<!cir.array<!s8i x 18>>), !cir.ptr<!s8i> loc(#loc50)
    cir.call @printLine(%7) : (!cir.ptr<!s8i>) -> () loc(#loc64)
    %8 = cir.get_global @CWE191_Integer_Underflow__char_rand_postdec_21_good : !cir.ptr<!cir.func<!void ()>> loc(#loc211)
    cir.call @CWE191_Integer_Underflow__char_rand_postdec_21_good() : () -> () loc(#loc65)
    %9 = cir.get_global @".str.1" : !cir.ptr<!cir.array<!s8i x 16>> loc(#loc51)
    %10 = cir.cast(array_to_ptrdecay, %9 : !cir.ptr<!cir.array<!s8i x 16>>), !cir.ptr<!s8i> loc(#loc51)
    cir.call @printLine(%10) : (!cir.ptr<!s8i>) -> () loc(#loc67)
    %11 = cir.get_global @".str.2" : !cir.ptr<!cir.array<!s8i x 17>> loc(#loc52)
    %12 = cir.cast(array_to_ptrdecay, %11 : !cir.ptr<!cir.array<!s8i x 17>>), !cir.ptr<!s8i> loc(#loc52)
    cir.call @printLine(%12) : (!cir.ptr<!s8i>) -> () loc(#loc68)
    %13 = cir.get_global @CWE191_Integer_Underflow__char_rand_postdec_21_bad : !cir.ptr<!cir.func<!void ()>> loc(#loc212)
    cir.call @CWE191_Integer_Underflow__char_rand_postdec_21_bad() : () -> () loc(#loc69)
    %14 = cir.get_global @".str.3" : !cir.ptr<!cir.array<!s8i x 15>> loc(#loc53)
    %15 = cir.cast(array_to_ptrdecay, %14 : !cir.ptr<!cir.array<!s8i x 15>>), !cir.ptr<!s8i> loc(#loc53)
    cir.call @printLine(%15) : (!cir.ptr<!s8i>) -> () loc(#loc71)
    %16 = cir.const #cir.int<0> : !s32i loc(#loc72)
    cir.store %16, %2 : !s32i, !cir.ptr<!s32i> loc(#loc213)
    %17 = cir.load %2 : !cir.ptr<!s32i>, !s32i loc(#loc213)
    cir.return %17 : !s32i loc(#loc213)
  } loc(#loc208)
  cir.global "private" internal dsolocal @goodB2G1Static = #cir.int<0> : !s32i {alignment = 4 : i64} loc(#loc214)
  cir.global "private" constant cir_private dsolocal @".str.4" = #cir.const_array<"Benign, fixed string\00" : !cir.array<!s8i x 21>> : !cir.array<!s8i x 21> {alignment = 1 : i64} loc(#loc76)
  cir.global "private" constant cir_private dsolocal @".str.5" = #cir.const_array<"data value is too large to perform arithmetic safely.\00" : !cir.array<!s8i x 54>> : !cir.array<!s8i x 54> {alignment = 1 : i64} loc(#loc77)
  cir.func internal private @goodB2G1Sink(%arg0: !s8i loc(fused[#loc80, #loc81])) extra(#fn_attr1) {
    %0 = cir.alloca !s8i, !cir.ptr<!s8i>, ["result", init] {alignment = 1 : i64} loc(#loc217)
    %1 = cir.alloca !s8i, !cir.ptr<!s8i>, ["data", init] {alignment = 1 : i64} loc(#loc216)
    cir.store %arg0, %1 : !s8i, !cir.ptr<!s8i> loc(#loc84)
    cir.br ^bb1 loc(#loc218)
  ^bb1:  // pred: ^bb0
    %2 = cir.get_global @goodB2G1Static : !cir.ptr<!s32i> loc(#loc214)
    %3 = cir.load %2 : !cir.ptr<!s32i>, !s32i loc(#loc87)
    %4 = cir.cast(int_to_bool, %3 : !s32i), !cir.bool loc(#loc87)
    cir.brcond %4 ^bb2, ^bb3 loc(#loc219)
  ^bb2:  // pred: ^bb1
    %5 = cir.get_global @".str.4" : !cir.ptr<!cir.array<!s8i x 21>> loc(#loc76)
    %6 = cir.cast(array_to_ptrdecay, %5 : !cir.ptr<!cir.array<!s8i x 21>>), !cir.ptr<!s8i> loc(#loc76)
    cir.call @printLine(%6) : (!cir.ptr<!s8i>) -> () loc(#loc91)
    cir.br ^bb9 loc(#loc89)
  ^bb3:  // pred: ^bb1
    cir.br ^bb4 loc(#loc220)
  ^bb4:  // pred: ^bb3
    %7 = cir.load %1 : !cir.ptr<!s8i>, !s8i loc(#loc94)
    %8 = cir.cast(integral, %7 : !s8i), !s32i loc(#loc94)
    %9 = cir.const #cir.int<127> : !s32i loc(#loc95)
    %10 = cir.unary(minus, %9) : !s32i, !s32i loc(#loc95)
    %11 = cir.const #cir.int<1> : !s32i loc(#loc95)
    %12 = cir.binop(sub, %10, %11) nsw : !s32i loc(#loc95)
    %13 = cir.cmp(gt, %8, %12) : !s32i, !cir.bool loc(#loc221)
    cir.brcond %13 ^bb5, ^bb6 loc(#loc222)
  ^bb5:  // pred: ^bb4
    %14 = cir.load %1 : !cir.ptr<!s8i>, !s8i loc(#loc99)
    %15 = cir.unary(dec, %14) : !s8i, !s8i loc(#loc100)
    cir.store %15, %1 : !s8i, !cir.ptr<!s8i> loc(#loc223)
    %16 = cir.load %1 : !cir.ptr<!s8i>, !s8i loc(#loc83)
    cir.store %16, %0 : !s8i, !cir.ptr<!s8i> loc(#loc217)
    %17 = cir.load %0 : !cir.ptr<!s8i>, !s8i loc(#loc101)
    cir.call @printHexCharLine(%17) : (!s8i) -> () loc(#loc102)
    cir.br ^bb7 loc(#loc97)
  ^bb6:  // pred: ^bb4
    %18 = cir.get_global @".str.5" : !cir.ptr<!cir.array<!s8i x 54>> loc(#loc77)
    %19 = cir.cast(array_to_ptrdecay, %18 : !cir.ptr<!cir.array<!s8i x 54>>), !cir.ptr<!s8i> loc(#loc77)
    cir.call @printLine(%19) : (!cir.ptr<!s8i>) -> () loc(#loc103)
    cir.br ^bb7 loc(#loc93)
  ^bb7:  // 2 preds: ^bb5, ^bb6
    cir.br ^bb8 loc(#loc93)
  ^bb8:  // pred: ^bb7
    cir.br ^bb9 loc(#loc86)
  ^bb9:  // 2 preds: ^bb2, ^bb8
    cir.br ^bb10 loc(#loc86)
  ^bb10:  // pred: ^bb9
    cir.return loc(#loc79)
  } loc(#loc215)
  cir.func no_proto internal private @goodB2G1() extra(#fn_attr1) {
    %0 = cir.alloca !s8i, !cir.ptr<!s8i>, ["data"] {alignment = 1 : i64} loc(#loc225)
    %1 = cir.const #cir.int<32> : !s32i loc(#loc108)
    %2 = cir.cast(integral, %1 : !s32i), !s8i loc(#loc108)
    cir.store %2, %0 : !s8i, !cir.ptr<!s8i> loc(#loc226)
    %3 = cir.call @rand() : () -> !s32i extra(#fn_attr) loc(#loc110)
    %4 = cir.const #cir.int<1> : !s32i loc(#loc110)
    %5 = cir.binop(and, %3, %4) : !s32i loc(#loc110)
    %6 = cir.cast(int_to_bool, %5 : !s32i), !cir.bool loc(#loc110)
    cir.brcond %6 ^bb1, ^bb2 loc(#loc110)
  ^bb1:  // pred: ^bb0
    %7 = cir.call @rand() : () -> !s32i extra(#fn_attr) loc(#loc110)
    %8 = cir.cast(integral, %7 : !s32i), !u32i loc(#loc110)
    %9 = cir.const #cir.int<30> : !s32i loc(#loc110)
    %10 = cir.shift(left, %8 : !u32i, %9 : !s32i) -> !u32i loc(#loc110)
    %11 = cir.call @rand() : () -> !s32i extra(#fn_attr) loc(#loc110)
    %12 = cir.cast(integral, %11 : !s32i), !u32i loc(#loc110)
    %13 = cir.const #cir.int<15> : !s32i loc(#loc110)
    %14 = cir.shift(left, %12 : !u32i, %13 : !s32i) -> !u32i loc(#loc110)
    %15 = cir.binop(xor, %10, %14) : !u32i loc(#loc110)
    %16 = cir.call @rand() : () -> !s32i extra(#fn_attr) loc(#loc110)
    %17 = cir.cast(integral, %16 : !s32i), !u32i loc(#loc110)
    %18 = cir.binop(xor, %15, %17) : !u32i loc(#loc110)
    cir.br ^bb3(%18 : !u32i) loc(#loc110)
  ^bb2:  // pred: ^bb0
    %19 = cir.call @rand() : () -> !s32i extra(#fn_attr) loc(#loc110)
    %20 = cir.cast(integral, %19 : !s32i), !u32i loc(#loc110)
    %21 = cir.const #cir.int<30> : !s32i loc(#loc110)
    %22 = cir.shift(left, %20 : !u32i, %21 : !s32i) -> !u32i loc(#loc110)
    %23 = cir.call @rand() : () -> !s32i extra(#fn_attr) loc(#loc110)
    %24 = cir.cast(integral, %23 : !s32i), !u32i loc(#loc110)
    %25 = cir.const #cir.int<15> : !s32i loc(#loc110)
    %26 = cir.shift(left, %24 : !u32i, %25 : !s32i) -> !u32i loc(#loc110)
    %27 = cir.binop(xor, %22, %26) : !u32i loc(#loc110)
    %28 = cir.call @rand() : () -> !s32i extra(#fn_attr) loc(#loc110)
    %29 = cir.cast(integral, %28 : !s32i), !u32i loc(#loc110)
    %30 = cir.binop(xor, %27, %29) : !u32i loc(#loc110)
    %31 = cir.unary(minus, %30) : !u32i, !u32i loc(#loc110)
    %32 = cir.const #cir.int<1> : !s32i loc(#loc110)
    %33 = cir.cast(integral, %32 : !s32i), !u32i loc(#loc110)
    %34 = cir.binop(sub, %31, %33) : !u32i loc(#loc110)
    cir.br ^bb3(%34 : !u32i) loc(#loc110)
  ^bb3(%35: !u32i loc("CWE191_Integer_Underflow__char_rand_postdec_21.c":86:18)):  // 2 preds: ^bb1, ^bb2
    cir.br ^bb4 loc(#loc110)
  ^bb4:  // pred: ^bb3
    %36 = cir.cast(integral, %35 : !u32i), !s32i loc(#loc110)
    %37 = cir.cast(integral, %36 : !s32i), !s8i loc(#loc110)
    cir.store %37, %0 : !s8i, !cir.ptr<!s8i> loc(#loc227)
    %38 = cir.const #cir.int<0> : !s32i loc(#loc112)
    %39 = cir.get_global @goodB2G1Static : !cir.ptr<!s32i> loc(#loc214)
    cir.store %38, %39 : !s32i, !cir.ptr<!s32i> loc(#loc228)
    %40 = cir.load %0 : !cir.ptr<!s8i>, !s8i loc(#loc114)
    cir.call @goodB2G1Sink(%40) : (!s8i) -> () loc(#loc115)
    cir.return loc(#loc105)
  } loc(#loc224)
  cir.global "private" internal dsolocal @goodB2G2Static = #cir.int<0> : !s32i {alignment = 4 : i64} loc(#loc229)
  cir.func internal private @goodB2G2Sink(%arg0: !s8i loc(fused[#loc120, #loc121])) extra(#fn_attr1) {
    %0 = cir.alloca !s8i, !cir.ptr<!s8i>, ["result", init] {alignment = 1 : i64} loc(#loc232)
    %1 = cir.alloca !s8i, !cir.ptr<!s8i>, ["data", init] {alignment = 1 : i64} loc(#loc231)
    cir.store %arg0, %1 : !s8i, !cir.ptr<!s8i> loc(#loc124)
    cir.br ^bb1 loc(#loc233)
  ^bb1:  // pred: ^bb0
    %2 = cir.get_global @goodB2G2Static : !cir.ptr<!s32i> loc(#loc229)
    %3 = cir.load %2 : !cir.ptr<!s32i>, !s32i loc(#loc127)
    %4 = cir.cast(int_to_bool, %3 : !s32i), !cir.bool loc(#loc127)
    cir.brcond %4 ^bb2, ^bb8 loc(#loc234)
  ^bb2:  // pred: ^bb1
    cir.br ^bb3 loc(#loc235)
  ^bb3:  // pred: ^bb2
    %5 = cir.load %1 : !cir.ptr<!s8i>, !s8i loc(#loc131)
    %6 = cir.cast(integral, %5 : !s8i), !s32i loc(#loc131)
    %7 = cir.const #cir.int<127> : !s32i loc(#loc132)
    %8 = cir.unary(minus, %7) : !s32i, !s32i loc(#loc132)
    %9 = cir.const #cir.int<1> : !s32i loc(#loc132)
    %10 = cir.binop(sub, %8, %9) nsw : !s32i loc(#loc132)
    %11 = cir.cmp(gt, %6, %10) : !s32i, !cir.bool loc(#loc236)
    cir.brcond %11 ^bb4, ^bb5 loc(#loc237)
  ^bb4:  // pred: ^bb3
    %12 = cir.load %1 : !cir.ptr<!s8i>, !s8i loc(#loc136)
    %13 = cir.unary(dec, %12) : !s8i, !s8i loc(#loc137)
    cir.store %13, %1 : !s8i, !cir.ptr<!s8i> loc(#loc238)
    %14 = cir.load %1 : !cir.ptr<!s8i>, !s8i loc(#loc123)
    cir.store %14, %0 : !s8i, !cir.ptr<!s8i> loc(#loc232)
    %15 = cir.load %0 : !cir.ptr<!s8i>, !s8i loc(#loc138)
    cir.call @printHexCharLine(%15) : (!s8i) -> () loc(#loc139)
    cir.br ^bb6 loc(#loc134)
  ^bb5:  // pred: ^bb3
    %16 = cir.get_global @".str.5" : !cir.ptr<!cir.array<!s8i x 54>> loc(#loc140)
    %17 = cir.cast(array_to_ptrdecay, %16 : !cir.ptr<!cir.array<!s8i x 54>>), !cir.ptr<!s8i> loc(#loc140)
    cir.call @printLine(%17) : (!cir.ptr<!s8i>) -> () loc(#loc141)
    cir.br ^bb6 loc(#loc130)
  ^bb6:  // 2 preds: ^bb4, ^bb5
    cir.br ^bb7 loc(#loc130)
  ^bb7:  // pred: ^bb6
    cir.br ^bb8 loc(#loc126)
  ^bb8:  // 2 preds: ^bb1, ^bb7
    cir.br ^bb9 loc(#loc126)
  ^bb9:  // pred: ^bb8
    cir.return loc(#loc119)
  } loc(#loc230)
  cir.func no_proto internal private @goodB2G2() extra(#fn_attr1) {
    %0 = cir.alloca !s8i, !cir.ptr<!s8i>, ["data"] {alignment = 1 : i64} loc(#loc240)
    %1 = cir.const #cir.int<32> : !s32i loc(#loc146)
    %2 = cir.cast(integral, %1 : !s32i), !s8i loc(#loc146)
    cir.store %2, %0 : !s8i, !cir.ptr<!s8i> loc(#loc241)
    %3 = cir.call @rand() : () -> !s32i extra(#fn_attr) loc(#loc148)
    %4 = cir.const #cir.int<1> : !s32i loc(#loc148)
    %5 = cir.binop(and, %3, %4) : !s32i loc(#loc148)
    %6 = cir.cast(int_to_bool, %5 : !s32i), !cir.bool loc(#loc148)
    cir.brcond %6 ^bb1, ^bb2 loc(#loc148)
  ^bb1:  // pred: ^bb0
    %7 = cir.call @rand() : () -> !s32i extra(#fn_attr) loc(#loc148)
    %8 = cir.cast(integral, %7 : !s32i), !u32i loc(#loc148)
    %9 = cir.const #cir.int<30> : !s32i loc(#loc148)
    %10 = cir.shift(left, %8 : !u32i, %9 : !s32i) -> !u32i loc(#loc148)
    %11 = cir.call @rand() : () -> !s32i extra(#fn_attr) loc(#loc148)
    %12 = cir.cast(integral, %11 : !s32i), !u32i loc(#loc148)
    %13 = cir.const #cir.int<15> : !s32i loc(#loc148)
    %14 = cir.shift(left, %12 : !u32i, %13 : !s32i) -> !u32i loc(#loc148)
    %15 = cir.binop(xor, %10, %14) : !u32i loc(#loc148)
    %16 = cir.call @rand() : () -> !s32i extra(#fn_attr) loc(#loc148)
    %17 = cir.cast(integral, %16 : !s32i), !u32i loc(#loc148)
    %18 = cir.binop(xor, %15, %17) : !u32i loc(#loc148)
    cir.br ^bb3(%18 : !u32i) loc(#loc148)
  ^bb2:  // pred: ^bb0
    %19 = cir.call @rand() : () -> !s32i extra(#fn_attr) loc(#loc148)
    %20 = cir.cast(integral, %19 : !s32i), !u32i loc(#loc148)
    %21 = cir.const #cir.int<30> : !s32i loc(#loc148)
    %22 = cir.shift(left, %20 : !u32i, %21 : !s32i) -> !u32i loc(#loc148)
    %23 = cir.call @rand() : () -> !s32i extra(#fn_attr) loc(#loc148)
    %24 = cir.cast(integral, %23 : !s32i), !u32i loc(#loc148)
    %25 = cir.const #cir.int<15> : !s32i loc(#loc148)
    %26 = cir.shift(left, %24 : !u32i, %25 : !s32i) -> !u32i loc(#loc148)
    %27 = cir.binop(xor, %22, %26) : !u32i loc(#loc148)
    %28 = cir.call @rand() : () -> !s32i extra(#fn_attr) loc(#loc148)
    %29 = cir.cast(integral, %28 : !s32i), !u32i loc(#loc148)
    %30 = cir.binop(xor, %27, %29) : !u32i loc(#loc148)
    %31 = cir.unary(minus, %30) : !u32i, !u32i loc(#loc148)
    %32 = cir.const #cir.int<1> : !s32i loc(#loc148)
    %33 = cir.cast(integral, %32 : !s32i), !u32i loc(#loc148)
    %34 = cir.binop(sub, %31, %33) : !u32i loc(#loc148)
    cir.br ^bb3(%34 : !u32i) loc(#loc148)
  ^bb3(%35: !u32i loc("CWE191_Integer_Underflow__char_rand_postdec_21.c":115:18)):  // 2 preds: ^bb1, ^bb2
    cir.br ^bb4 loc(#loc148)
  ^bb4:  // pred: ^bb3
    %36 = cir.cast(integral, %35 : !u32i), !s32i loc(#loc148)
    %37 = cir.cast(integral, %36 : !s32i), !s8i loc(#loc148)
    cir.store %37, %0 : !s8i, !cir.ptr<!s8i> loc(#loc242)
    %38 = cir.const #cir.int<1> : !s32i loc(#loc150)
    %39 = cir.get_global @goodB2G2Static : !cir.ptr<!s32i> loc(#loc229)
    cir.store %38, %39 : !s32i, !cir.ptr<!s32i> loc(#loc243)
    %40 = cir.load %0 : !cir.ptr<!s8i>, !s8i loc(#loc152)
    cir.call @goodB2G2Sink(%40) : (!s8i) -> () loc(#loc153)
    cir.return loc(#loc143)
  } loc(#loc239)
  cir.global "private" internal dsolocal @goodG2BStatic = #cir.int<0> : !s32i {alignment = 4 : i64} loc(#loc244)
  cir.func internal private @goodG2BSink(%arg0: !s8i loc(fused[#loc158, #loc159])) extra(#fn_attr1) {
    %0 = cir.alloca !s8i, !cir.ptr<!s8i>, ["result", init] {alignment = 1 : i64} loc(#loc247)
    %1 = cir.alloca !s8i, !cir.ptr<!s8i>, ["data", init] {alignment = 1 : i64} loc(#loc246)
    cir.store %arg0, %1 : !s8i, !cir.ptr<!s8i> loc(#loc162)
    cir.br ^bb1 loc(#loc248)
  ^bb1:  // pred: ^bb0
    %2 = cir.get_global @goodG2BStatic : !cir.ptr<!s32i> loc(#loc244)
    %3 = cir.load %2 : !cir.ptr<!s32i>, !s32i loc(#loc165)
    %4 = cir.cast(int_to_bool, %3 : !s32i), !cir.bool loc(#loc165)
    cir.brcond %4 ^bb2, ^bb5 loc(#loc249)
  ^bb2:  // pred: ^bb1
    cir.br ^bb3 loc(#loc250)
  ^bb3:  // pred: ^bb2
    %5 = cir.load %1 : !cir.ptr<!s8i>, !s8i loc(#loc169)
    %6 = cir.unary(dec, %5) : !s8i, !s8i loc(#loc170)
    cir.store %6, %1 : !s8i, !cir.ptr<!s8i> loc(#loc251)
    %7 = cir.load %1 : !cir.ptr<!s8i>, !s8i loc(#loc161)
    cir.store %7, %0 : !s8i, !cir.ptr<!s8i> loc(#loc247)
    %8 = cir.load %0 : !cir.ptr<!s8i>, !s8i loc(#loc171)
    cir.call @printHexCharLine(%8) : (!s8i) -> () loc(#loc172)
    cir.br ^bb4 loc(#loc168)
  ^bb4:  // pred: ^bb3
    cir.br ^bb5 loc(#loc164)
  ^bb5:  // 2 preds: ^bb1, ^bb4
    cir.br ^bb6 loc(#loc164)
  ^bb6:  // pred: ^bb5
    cir.return loc(#loc157)
  } loc(#loc245)
  cir.func no_proto internal private @goodG2B() extra(#fn_attr1) {
    %0 = cir.alloca !s8i, !cir.ptr<!s8i>, ["data"] {alignment = 1 : i64} loc(#loc253)
    %1 = cir.const #cir.int<32> : !s32i loc(#loc177)
    %2 = cir.cast(integral, %1 : !s32i), !s8i loc(#loc177)
    cir.store %2, %0 : !s8i, !cir.ptr<!s8i> loc(#loc254)
    %3 = cir.const #cir.int<2> : !s32i loc(#loc179)
    %4 = cir.unary(minus, %3) : !s32i, !s32i loc(#loc180)
    %5 = cir.cast(integral, %4 : !s32i), !s8i loc(#loc180)
    cir.store %5, %0 : !s8i, !cir.ptr<!s8i> loc(#loc255)
    %6 = cir.const #cir.int<1> : !s32i loc(#loc182)
    %7 = cir.get_global @goodG2BStatic : !cir.ptr<!s32i> loc(#loc244)
    cir.store %6, %7 : !s32i, !cir.ptr<!s32i> loc(#loc256)
    %8 = cir.load %0 : !cir.ptr<!s8i>, !s8i loc(#loc184)
    cir.call @goodG2BSink(%8) : (!s8i) -> () loc(#loc185)
    cir.return loc(#loc174)
  } loc(#loc252)
} loc(#loc)
#loc = loc("/home/ladisgin/git_proj/juliet-c/testcases/CWE191_Integer_Underflow/s04/CWE191_Integer_Underflow__char_rand_postdec_21.c":0:0)
#loc1 = loc("/usr/include/stdlib.h":573:1)
#loc2 = loc("/usr/include/stdlib.h":573:24)
#loc3 = loc("CWE191_Integer_Underflow__char_rand_postdec_21.c":23:1)
#loc4 = loc("CWE191_Integer_Underflow__char_rand_postdec_21.c":23:24)
#loc5 = loc("../../../testcasesupport/std_testcase_io.h":30:1)
#loc6 = loc("../../../testcasesupport/std_testcase_io.h":30:35)
#loc7 = loc("CWE191_Integer_Underflow__char_rand_postdec_21.c":25:1)
#loc8 = loc("CWE191_Integer_Underflow__char_rand_postdec_21.c":36:1)
#loc11 = loc("CWE191_Integer_Underflow__char_rand_postdec_21.c":32:13)
#loc12 = loc("CWE191_Integer_Underflow__char_rand_postdec_21.c":32:27)
#loc13 = loc("CWE191_Integer_Underflow__char_rand_postdec_21.c":26:1)
#loc14 = loc("CWE191_Integer_Underflow__char_rand_postdec_21.c":27:5)
#loc15 = loc("CWE191_Integer_Underflow__char_rand_postdec_21.c":35:5)
#loc16 = loc("CWE191_Integer_Underflow__char_rand_postdec_21.c":27:8)
#loc17 = loc("CWE191_Integer_Underflow__char_rand_postdec_21.c":28:5)
#loc18 = loc("CWE191_Integer_Underflow__char_rand_postdec_21.c":29:9)
#loc19 = loc("CWE191_Integer_Underflow__char_rand_postdec_21.c":34:9)
#loc20 = loc("CWE191_Integer_Underflow__char_rand_postdec_21.c":31:17)
#loc21 = loc("CWE191_Integer_Underflow__char_rand_postdec_21.c":31:13)
#loc22 = loc("CWE191_Integer_Underflow__char_rand_postdec_21.c":33:30)
#loc23 = loc("CWE191_Integer_Underflow__char_rand_postdec_21.c":33:13)
#loc24 = loc("CWE191_Integer_Underflow__char_rand_postdec_21.c":38:1)
#loc25 = loc("CWE191_Integer_Underflow__char_rand_postdec_21.c":46:1)
#loc26 = loc("CWE191_Integer_Underflow__char_rand_postdec_21.c":40:5)
#loc27 = loc("CWE191_Integer_Underflow__char_rand_postdec_21.c":40:10)
#loc28 = loc("CWE191_Integer_Underflow__char_rand_postdec_21.c":41:12)
#loc29 = loc("CWE191_Integer_Underflow__char_rand_postdec_21.c":41:5)
#loc31 = loc("CWE191_Integer_Underflow__char_rand_postdec_21.c":43:5)
#loc32 = loc("CWE191_Integer_Underflow__char_rand_postdec_21.c":44:17)
#loc33 = loc("CWE191_Integer_Underflow__char_rand_postdec_21.c":44:5)
#loc34 = loc("CWE191_Integer_Underflow__char_rand_postdec_21.c":45:13)
#loc35 = loc("CWE191_Integer_Underflow__char_rand_postdec_21.c":45:5)
#loc36 = loc("CWE191_Integer_Underflow__char_rand_postdec_21.c":144:1)
#loc37 = loc("CWE191_Integer_Underflow__char_rand_postdec_21.c":149:1)
#loc38 = loc("CWE191_Integer_Underflow__char_rand_postdec_21.c":146:5)
#loc39 = loc("CWE191_Integer_Underflow__char_rand_postdec_21.c":146:14)
#loc40 = loc("CWE191_Integer_Underflow__char_rand_postdec_21.c":147:5)
#loc41 = loc("CWE191_Integer_Underflow__char_rand_postdec_21.c":147:14)
#loc42 = loc("CWE191_Integer_Underflow__char_rand_postdec_21.c":148:5)
#loc43 = loc("CWE191_Integer_Underflow__char_rand_postdec_21.c":148:13)
#loc44 = loc("/usr/include/stdlib.h":575:1)
#loc45 = loc("/usr/include/stdlib.h":575:41)
#loc46 = loc("/usr/include/time.h":76:1)
#loc47 = loc("/usr/include/time.h":76:38)
#loc48 = loc("../../../testcasesupport/std_testcase_io.h":14:1)
#loc49 = loc("../../../testcasesupport/std_testcase_io.h":14:33)
#loc50 = loc("CWE191_Integer_Underflow__char_rand_postdec_21.c":165:15)
#loc51 = loc("CWE191_Integer_Underflow__char_rand_postdec_21.c":167:15)
#loc52 = loc("CWE191_Integer_Underflow__char_rand_postdec_21.c":170:15)
#loc53 = loc("CWE191_Integer_Underflow__char_rand_postdec_21.c":172:15)
#loc54 = loc("CWE191_Integer_Underflow__char_rand_postdec_21.c":160:1)
#loc55 = loc("CWE191_Integer_Underflow__char_rand_postdec_21.c":175:1)
#loc60 = loc("CWE191_Integer_Underflow__char_rand_postdec_21.c":161:1)
#loc61 = loc("CWE191_Integer_Underflow__char_rand_postdec_21.c":163:27)
#loc62 = loc("CWE191_Integer_Underflow__char_rand_postdec_21.c":163:22)
#loc63 = loc("CWE191_Integer_Underflow__char_rand_postdec_21.c":163:5)
#loc64 = loc("CWE191_Integer_Underflow__char_rand_postdec_21.c":165:5)
#loc65 = loc("CWE191_Integer_Underflow__char_rand_postdec_21.c":166:5)
#loc66 = loc("CWE191_Integer_Underflow__char_rand_postdec_21.c":166:57)
#loc67 = loc("CWE191_Integer_Underflow__char_rand_postdec_21.c":167:5)
#loc68 = loc("CWE191_Integer_Underflow__char_rand_postdec_21.c":170:5)
#loc69 = loc("CWE191_Integer_Underflow__char_rand_postdec_21.c":171:5)
#loc70 = loc("CWE191_Integer_Underflow__char_rand_postdec_21.c":171:56)
#loc71 = loc("CWE191_Integer_Underflow__char_rand_postdec_21.c":172:5)
#loc72 = loc("CWE191_Integer_Underflow__char_rand_postdec_21.c":174:12)
#loc73 = loc("CWE191_Integer_Underflow__char_rand_postdec_21.c":174:5)
#loc74 = loc("CWE191_Integer_Underflow__char_rand_postdec_21.c":53:1)
#loc75 = loc("CWE191_Integer_Underflow__char_rand_postdec_21.c":53:29)
#loc76 = loc("CWE191_Integer_Underflow__char_rand_postdec_21.c":63:19)
#loc77 = loc("CWE191_Integer_Underflow__char_rand_postdec_21.c":76:23)
#loc78 = loc("CWE191_Integer_Underflow__char_rand_postdec_21.c":58:1)
#loc79 = loc("CWE191_Integer_Underflow__char_rand_postdec_21.c":79:1)
#loc82 = loc("CWE191_Integer_Underflow__char_rand_postdec_21.c":71:13)
#loc83 = loc("CWE191_Integer_Underflow__char_rand_postdec_21.c":71:27)
#loc84 = loc("CWE191_Integer_Underflow__char_rand_postdec_21.c":59:1)
#loc85 = loc("CWE191_Integer_Underflow__char_rand_postdec_21.c":60:5)
#loc86 = loc("CWE191_Integer_Underflow__char_rand_postdec_21.c":78:5)
#loc87 = loc("CWE191_Integer_Underflow__char_rand_postdec_21.c":60:8)
#loc88 = loc("CWE191_Integer_Underflow__char_rand_postdec_21.c":61:5)
#loc89 = loc("CWE191_Integer_Underflow__char_rand_postdec_21.c":64:5)
#loc90 = loc("CWE191_Integer_Underflow__char_rand_postdec_21.c":66:5)
#loc91 = loc("CWE191_Integer_Underflow__char_rand_postdec_21.c":63:9)
#loc92 = loc("CWE191_Integer_Underflow__char_rand_postdec_21.c":68:9)
#loc93 = loc("CWE191_Integer_Underflow__char_rand_postdec_21.c":77:9)
#loc94 = loc("CWE191_Integer_Underflow__char_rand_postdec_21.c":68:13)
#loc95 = loc("CWE191_Integer_Underflow__char_rand_postdec_21.c":68:20)
#loc96 = loc("CWE191_Integer_Underflow__char_rand_postdec_21.c":69:9)
#loc97 = loc("CWE191_Integer_Underflow__char_rand_postdec_21.c":73:9)
#loc98 = loc("CWE191_Integer_Underflow__char_rand_postdec_21.c":75:9)
#loc99 = loc("CWE191_Integer_Underflow__char_rand_postdec_21.c":70:17)
#loc100 = loc("CWE191_Integer_Underflow__char_rand_postdec_21.c":70:13)
#loc101 = loc("CWE191_Integer_Underflow__char_rand_postdec_21.c":72:30)
#loc102 = loc("CWE191_Integer_Underflow__char_rand_postdec_21.c":72:13)
#loc103 = loc("CWE191_Integer_Underflow__char_rand_postdec_21.c":76:13)
#loc104 = loc("CWE191_Integer_Underflow__char_rand_postdec_21.c":81:1)
#loc105 = loc("CWE191_Integer_Underflow__char_rand_postdec_21.c":89:1)
#loc106 = loc("CWE191_Integer_Underflow__char_rand_postdec_21.c":83:5)
#loc107 = loc("CWE191_Integer_Underflow__char_rand_postdec_21.c":83:10)
#loc108 = loc("CWE191_Integer_Underflow__char_rand_postdec_21.c":84:12)
#loc109 = loc("CWE191_Integer_Underflow__char_rand_postdec_21.c":84:5)
#loc111 = loc("CWE191_Integer_Underflow__char_rand_postdec_21.c":86:5)
#loc112 = loc("CWE191_Integer_Underflow__char_rand_postdec_21.c":87:22)
#loc113 = loc("CWE191_Integer_Underflow__char_rand_postdec_21.c":87:5)
#loc114 = loc("CWE191_Integer_Underflow__char_rand_postdec_21.c":88:18)
#loc115 = loc("CWE191_Integer_Underflow__char_rand_postdec_21.c":88:5)
#loc116 = loc("CWE191_Integer_Underflow__char_rand_postdec_21.c":54:1)
#loc117 = loc("CWE191_Integer_Underflow__char_rand_postdec_21.c":54:29)
#loc118 = loc("CWE191_Integer_Underflow__char_rand_postdec_21.c":92:1)
#loc119 = loc("CWE191_Integer_Underflow__char_rand_postdec_21.c":108:1)
#loc122 = loc("CWE191_Integer_Underflow__char_rand_postdec_21.c":100:13)
#loc123 = loc("CWE191_Integer_Underflow__char_rand_postdec_21.c":100:27)
#loc124 = loc("CWE191_Integer_Underflow__char_rand_postdec_21.c":93:1)
#loc125 = loc("CWE191_Integer_Underflow__char_rand_postdec_21.c":94:5)
#loc126 = loc("CWE191_Integer_Underflow__char_rand_postdec_21.c":107:5)
#loc127 = loc("CWE191_Integer_Underflow__char_rand_postdec_21.c":94:8)
#loc128 = loc("CWE191_Integer_Underflow__char_rand_postdec_21.c":95:5)
#loc129 = loc("CWE191_Integer_Underflow__char_rand_postdec_21.c":97:9)
#loc130 = loc("CWE191_Integer_Underflow__char_rand_postdec_21.c":106:9)
#loc131 = loc("CWE191_Integer_Underflow__char_rand_postdec_21.c":97:13)
#loc132 = loc("CWE191_Integer_Underflow__char_rand_postdec_21.c":97:20)
#loc133 = loc("CWE191_Integer_Underflow__char_rand_postdec_21.c":98:9)
#loc134 = loc("CWE191_Integer_Underflow__char_rand_postdec_21.c":102:9)
#loc135 = loc("CWE191_Integer_Underflow__char_rand_postdec_21.c":104:9)
#loc136 = loc("CWE191_Integer_Underflow__char_rand_postdec_21.c":99:17)
#loc137 = loc("CWE191_Integer_Underflow__char_rand_postdec_21.c":99:13)
#loc138 = loc("CWE191_Integer_Underflow__char_rand_postdec_21.c":101:30)
#loc139 = loc("CWE191_Integer_Underflow__char_rand_postdec_21.c":101:13)
#loc140 = loc("CWE191_Integer_Underflow__char_rand_postdec_21.c":105:23)
#loc141 = loc("CWE191_Integer_Underflow__char_rand_postdec_21.c":105:13)
#loc142 = loc("CWE191_Integer_Underflow__char_rand_postdec_21.c":110:1)
#loc143 = loc("CWE191_Integer_Underflow__char_rand_postdec_21.c":118:1)
#loc144 = loc("CWE191_Integer_Underflow__char_rand_postdec_21.c":112:5)
#loc145 = loc("CWE191_Integer_Underflow__char_rand_postdec_21.c":112:10)
#loc146 = loc("CWE191_Integer_Underflow__char_rand_postdec_21.c":113:12)
#loc147 = loc("CWE191_Integer_Underflow__char_rand_postdec_21.c":113:5)
#loc149 = loc("CWE191_Integer_Underflow__char_rand_postdec_21.c":115:5)
#loc150 = loc("CWE191_Integer_Underflow__char_rand_postdec_21.c":116:22)
#loc151 = loc("CWE191_Integer_Underflow__char_rand_postdec_21.c":116:5)
#loc152 = loc("CWE191_Integer_Underflow__char_rand_postdec_21.c":117:18)
#loc153 = loc("CWE191_Integer_Underflow__char_rand_postdec_21.c":117:5)
#loc154 = loc("CWE191_Integer_Underflow__char_rand_postdec_21.c":55:1)
#loc155 = loc("CWE191_Integer_Underflow__char_rand_postdec_21.c":55:28)
#loc156 = loc("CWE191_Integer_Underflow__char_rand_postdec_21.c":121:1)
#loc157 = loc("CWE191_Integer_Underflow__char_rand_postdec_21.c":132:1)
#loc160 = loc("CWE191_Integer_Underflow__char_rand_postdec_21.c":128:13)
#loc161 = loc("CWE191_Integer_Underflow__char_rand_postdec_21.c":128:27)
#loc162 = loc("CWE191_Integer_Underflow__char_rand_postdec_21.c":122:1)
#loc163 = loc("CWE191_Integer_Underflow__char_rand_postdec_21.c":123:5)
#loc164 = loc("CWE191_Integer_Underflow__char_rand_postdec_21.c":131:5)
#loc165 = loc("CWE191_Integer_Underflow__char_rand_postdec_21.c":123:8)
#loc166 = loc("CWE191_Integer_Underflow__char_rand_postdec_21.c":124:5)
#loc167 = loc("CWE191_Integer_Underflow__char_rand_postdec_21.c":125:9)
#loc168 = loc("CWE191_Integer_Underflow__char_rand_postdec_21.c":130:9)
#loc169 = loc("CWE191_Integer_Underflow__char_rand_postdec_21.c":127:17)
#loc170 = loc("CWE191_Integer_Underflow__char_rand_postdec_21.c":127:13)
#loc171 = loc("CWE191_Integer_Underflow__char_rand_postdec_21.c":129:30)
#loc172 = loc("CWE191_Integer_Underflow__char_rand_postdec_21.c":129:13)
#loc173 = loc("CWE191_Integer_Underflow__char_rand_postdec_21.c":134:1)
#loc174 = loc("CWE191_Integer_Underflow__char_rand_postdec_21.c":142:1)
#loc175 = loc("CWE191_Integer_Underflow__char_rand_postdec_21.c":136:5)
#loc176 = loc("CWE191_Integer_Underflow__char_rand_postdec_21.c":136:10)
#loc177 = loc("CWE191_Integer_Underflow__char_rand_postdec_21.c":137:12)
#loc178 = loc("CWE191_Integer_Underflow__char_rand_postdec_21.c":137:5)
#loc179 = loc("CWE191_Integer_Underflow__char_rand_postdec_21.c":139:13)
#loc180 = loc("CWE191_Integer_Underflow__char_rand_postdec_21.c":139:12)
#loc181 = loc("CWE191_Integer_Underflow__char_rand_postdec_21.c":139:5)
#loc182 = loc("CWE191_Integer_Underflow__char_rand_postdec_21.c":140:21)
#loc183 = loc("CWE191_Integer_Underflow__char_rand_postdec_21.c":140:5)
#loc184 = loc("CWE191_Integer_Underflow__char_rand_postdec_21.c":141:17)
#loc185 = loc("CWE191_Integer_Underflow__char_rand_postdec_21.c":141:5)
#loc186 = loc(fused[#loc1, #loc2])
#loc187 = loc(fused[#loc3, #loc4])
#loc188 = loc(fused[#loc5, #loc6])
#loc189 = loc(fused[#loc7, #loc8])
#loc191 = loc(fused[#loc11, #loc12])
#loc192 = loc(fused[#loc14, #loc15])
#loc193 = loc(fused[#loc17, #loc15])
#loc194 = loc(fused[#loc18, #loc19])
#loc195 = loc(fused[#loc21, #loc20])
#loc196 = loc(fused[#loc24, #loc25])
#loc197 = loc(fused[#loc26, #loc27])
#loc198 = loc(fused[#loc29, #loc28])
#loc199 = loc(fused[#loc31, #loc30])
#loc200 = loc(fused[#loc33, #loc32])
#loc201 = loc(fused[#loc36, #loc37])
#loc202 = loc(fused[#loc38, #loc39])
#loc203 = loc(fused[#loc40, #loc41])
#loc204 = loc(fused[#loc42, #loc43])
#loc205 = loc(fused[#loc44, #loc45])
#loc206 = loc(fused[#loc46, #loc47])
#loc207 = loc(fused[#loc48, #loc49])
#loc208 = loc(fused[#loc54, #loc55])
#loc211 = loc(fused[#loc65, #loc66])
#loc212 = loc(fused[#loc69, #loc70])
#loc213 = loc(fused[#loc73, #loc72])
#loc214 = loc(fused[#loc74, #loc75])
#loc215 = loc(fused[#loc78, #loc79])
#loc217 = loc(fused[#loc82, #loc83])
#loc218 = loc(fused[#loc85, #loc86])
#loc219 = loc(fused[#loc88, #loc89, #loc90, #loc86])
#loc220 = loc(fused[#loc92, #loc93])
#loc221 = loc(fused[#loc94, #loc95])
#loc222 = loc(fused[#loc96, #loc97, #loc98, #loc93])
#loc223 = loc(fused[#loc100, #loc99])
#loc224 = loc(fused[#loc104, #loc105])
#loc225 = loc(fused[#loc106, #loc107])
#loc226 = loc(fused[#loc109, #loc108])
#loc227 = loc(fused[#loc111, #loc110])
#loc228 = loc(fused[#loc113, #loc112])
#loc229 = loc(fused[#loc116, #loc117])
#loc230 = loc(fused[#loc118, #loc119])
#loc232 = loc(fused[#loc122, #loc123])
#loc233 = loc(fused[#loc125, #loc126])
#loc234 = loc(fused[#loc128, #loc126])
#loc235 = loc(fused[#loc129, #loc130])
#loc236 = loc(fused[#loc131, #loc132])
#loc237 = loc(fused[#loc133, #loc134, #loc135, #loc130])
#loc238 = loc(fused[#loc137, #loc136])
#loc239 = loc(fused[#loc142, #loc143])
#loc240 = loc(fused[#loc144, #loc145])
#loc241 = loc(fused[#loc147, #loc146])
#loc242 = loc(fused[#loc149, #loc148])
#loc243 = loc(fused[#loc151, #loc150])
#loc244 = loc(fused[#loc154, #loc155])
#loc245 = loc(fused[#loc156, #loc157])
#loc247 = loc(fused[#loc160, #loc161])
#loc248 = loc(fused[#loc163, #loc164])
#loc249 = loc(fused[#loc166, #loc164])
#loc250 = loc(fused[#loc167, #loc168])
#loc251 = loc(fused[#loc170, #loc169])
#loc252 = loc(fused[#loc173, #loc174])
#loc253 = loc(fused[#loc175, #loc176])
#loc254 = loc(fused[#loc178, #loc177])
#loc255 = loc(fused[#loc181, #loc179])
#loc256 = loc(fused[#loc183, #loc182])
