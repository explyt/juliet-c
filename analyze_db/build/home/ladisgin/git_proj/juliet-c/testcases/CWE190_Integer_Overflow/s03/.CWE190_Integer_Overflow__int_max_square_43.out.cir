!s32i = !cir.int<s, 32>
!s64i = !cir.int<s, 64>
!s8i = !cir.int<s, 8>
!u32i = !cir.int<u, 32>
#false = #cir.bool<false> : !cir.bool
#fn_attr = #cir<extra({inline = #cir.inline<no>, optnone = #cir.optnone})>
#fn_attr1 = #cir<extra({nothrow = #cir.nothrow})>
#loc3 = loc("CWE190_Integer_Overflow__int_max_square_43.cpp":27:23)
#loc4 = loc("CWE190_Integer_Overflow__int_max_square_43.cpp":27:28)
#loc26 = loc("CWE190_Integer_Overflow__int_max_square_43.cpp":51:27)
#loc27 = loc("CWE190_Integer_Overflow__int_max_square_43.cpp":51:32)
#loc47 = loc("CWE190_Integer_Overflow__int_max_square_43.cpp":71:27)
#loc48 = loc("CWE190_Integer_Overflow__int_max_square_43.cpp":71:32)
#loc96 = loc("CWE190_Integer_Overflow__int_max_square_43.cpp":114:10)
#loc97 = loc("CWE190_Integer_Overflow__int_max_square_43.cpp":114:14)
#loc98 = loc("CWE190_Integer_Overflow__int_max_square_43.cpp":114:20)
#loc99 = loc("CWE190_Integer_Overflow__int_max_square_43.cpp":114:32)
#true = #cir.bool<true> : !cir.bool
#loc113 = loc(fused[#loc3, #loc4])
#loc122 = loc(fused[#loc26, #loc27])
#loc130 = loc(fused[#loc47, #loc48])
#loc145 = loc(fused[#loc96, #loc97])
#loc146 = loc(fused[#loc98, #loc99])
module @"/home/ladisgin/git_proj/juliet-c/testcases/CWE190_Integer_Overflow/s03/CWE190_Integer_Overflow__int_max_square_43.cpp" attributes {cir.lang = #cir.lang<cxx>, cir.sob = #cir.signed_overflow_behavior<undefined>, cir.triple = "x86_64-unknown-linux-gnu", dlti.dl_spec = #dlti.dl_spec<!llvm.ptr<270> = dense<32> : vector<4xi64>, f128 = dense<128> : vector<2xi64>, f64 = dense<64> : vector<2xi64>, f16 = dense<16> : vector<2xi64>, i32 = dense<32> : vector<2xi64>, i64 = dense<64> : vector<2xi64>, !llvm.ptr<272> = dense<64> : vector<4xi64>, !llvm.ptr<271> = dense<32> : vector<4xi64>, f80 = dense<128> : vector<2xi64>, i128 = dense<128> : vector<2xi64>, i16 = dense<16> : vector<2xi64>, i8 = dense<8> : vector<2xi64>, i1 = dense<8> : vector<2xi64>, !llvm.ptr = dense<64> : vector<4xi64>, "dlti.endianness" = "little", "dlti.stack_alignment" = 128 : i64>} {
  cir.func internal private @_ZN42CWE190_Integer_Overflow__int_max_square_43L9badSourceERi(%arg0: !cir.ptr<!s32i> loc(fused[#loc3, #loc4])) extra(#fn_attr) {
    %0 = cir.alloca !cir.ptr<!s32i>, !cir.ptr<!cir.ptr<!s32i>>, ["data", init, const] {alignment = 8 : i64} loc(#loc113)
    cir.store %arg0, %0 : !cir.ptr<!s32i>, !cir.ptr<!cir.ptr<!s32i>> loc(#loc5)
    %1 = cir.const #cir.int<2147483647> : !s32i loc(#loc6)
    %2 = cir.load %0 : !cir.ptr<!cir.ptr<!s32i>>, !cir.ptr<!s32i> loc(#loc7)
    cir.store %1, %2 : !s32i, !cir.ptr<!s32i> loc(#loc114)
    cir.return loc(#loc2)
  } loc(#loc112)
  cir.func private @printIntLine(!s32i) loc(#loc115)
  cir.func @_ZN42CWE190_Integer_Overflow__int_max_square_433badEv() extra(#fn_attr) {
    %0 = cir.alloca !s32i, !cir.ptr<!s32i>, ["data"] {alignment = 4 : i64} loc(#loc117)
    %1 = cir.const #cir.int<0> : !s32i loc(#loc14)
    cir.store %1, %0 : !s32i, !cir.ptr<!s32i> loc(#loc118)
    cir.call @_ZN42CWE190_Integer_Overflow__int_max_square_43L9badSourceERi(%0) : (!cir.ptr<!s32i>) -> () loc(#loc16)
    cir.scope {
      %2 = cir.alloca !s32i, !cir.ptr<!s32i>, ["result", init] {alignment = 4 : i64} loc(#loc120)
      %3 = cir.load %0 : !cir.ptr<!s32i>, !s32i loc(#loc21)
      %4 = cir.load %0 : !cir.ptr<!s32i>, !s32i loc(#loc20)
      %5 = cir.binop(mul, %3, %4) nsw : !s32i loc(#loc21)
      cir.store %5, %2 : !s32i, !cir.ptr<!s32i> loc(#loc120)
      %6 = cir.load %2 : !cir.ptr<!s32i>, !s32i loc(#loc22)
      cir.call @printIntLine(%6) : (!s32i) -> () loc(#loc23)
    } loc(#loc119)
    cir.return loc(#loc11)
  } loc(#loc116)
  cir.func internal private @_ZN42CWE190_Integer_Overflow__int_max_square_43L13goodG2BSourceERi(%arg0: !cir.ptr<!s32i> loc(fused[#loc26, #loc27])) extra(#fn_attr) {
    %0 = cir.alloca !cir.ptr<!s32i>, !cir.ptr<!cir.ptr<!s32i>>, ["data", init, const] {alignment = 8 : i64} loc(#loc122)
    cir.store %arg0, %0 : !cir.ptr<!s32i>, !cir.ptr<!cir.ptr<!s32i>> loc(#loc28)
    %1 = cir.const #cir.int<2> : !s32i loc(#loc29)
    %2 = cir.load %0 : !cir.ptr<!cir.ptr<!s32i>>, !cir.ptr<!s32i> loc(#loc30)
    cir.store %1, %2 : !s32i, !cir.ptr<!s32i> loc(#loc123)
    cir.return loc(#loc25)
  } loc(#loc121)
  cir.func internal private @_ZN42CWE190_Integer_Overflow__int_max_square_43L7goodG2BEv() extra(#fn_attr) {
    %0 = cir.alloca !s32i, !cir.ptr<!s32i>, ["data"] {alignment = 4 : i64} loc(#loc125)
    %1 = cir.const #cir.int<0> : !s32i loc(#loc35)
    cir.store %1, %0 : !s32i, !cir.ptr<!s32i> loc(#loc126)
    cir.call @_ZN42CWE190_Integer_Overflow__int_max_square_43L13goodG2BSourceERi(%0) : (!cir.ptr<!s32i>) -> () loc(#loc37)
    cir.scope {
      %2 = cir.alloca !s32i, !cir.ptr<!s32i>, ["result", init] {alignment = 4 : i64} loc(#loc128)
      %3 = cir.load %0 : !cir.ptr<!s32i>, !s32i loc(#loc42)
      %4 = cir.load %0 : !cir.ptr<!s32i>, !s32i loc(#loc41)
      %5 = cir.binop(mul, %3, %4) nsw : !s32i loc(#loc42)
      cir.store %5, %2 : !s32i, !cir.ptr<!s32i> loc(#loc128)
      %6 = cir.load %2 : !cir.ptr<!s32i>, !s32i loc(#loc43)
      cir.call @printIntLine(%6) : (!s32i) -> () loc(#loc44)
    } loc(#loc127)
    cir.return loc(#loc32)
  } loc(#loc124)
  cir.func internal private @_ZN42CWE190_Integer_Overflow__int_max_square_43L13goodB2GSourceERi(%arg0: !cir.ptr<!s32i> loc(fused[#loc47, #loc48])) extra(#fn_attr) {
    %0 = cir.alloca !cir.ptr<!s32i>, !cir.ptr<!cir.ptr<!s32i>>, ["data", init, const] {alignment = 8 : i64} loc(#loc130)
    cir.store %arg0, %0 : !cir.ptr<!s32i>, !cir.ptr<!cir.ptr<!s32i>> loc(#loc49)
    %1 = cir.const #cir.int<2147483647> : !s32i loc(#loc50)
    %2 = cir.load %0 : !cir.ptr<!cir.ptr<!s32i>>, !cir.ptr<!s32i> loc(#loc51)
    cir.store %1, %2 : !s32i, !cir.ptr<!s32i> loc(#loc131)
    cir.return loc(#loc46)
  } loc(#loc129)
  cir.func private @sqrt(!cir.double) -> !cir.double extra(#fn_attr1) loc(#loc52)
  cir.global "private" constant cir_private dsolocal @".str.4" = #cir.const_array<"data value is too large to perform arithmetic safely.\00" : !cir.array<!s8i x 54>> : !cir.array<!s8i x 54> {alignment = 1 : i64} loc(#loc53)
  cir.func internal private @_ZN42CWE190_Integer_Overflow__int_max_square_43L7goodB2GEv() extra(#fn_attr) {
    %0 = cir.alloca !s32i, !cir.ptr<!s32i>, ["data"] {alignment = 4 : i64} loc(#loc133)
    %1 = cir.const #cir.int<0> : !s32i loc(#loc58)
    cir.store %1, %0 : !s32i, !cir.ptr<!s32i> loc(#loc134)
    cir.call @_ZN42CWE190_Integer_Overflow__int_max_square_43L13goodB2GSourceERi(%0) : (!cir.ptr<!s32i>) -> () loc(#loc60)
    cir.scope {
      %2 = cir.load %0 : !cir.ptr<!s32i>, !s32i loc(#loc63)
      %3 = cir.const #cir.int<2147483647> : !s32i loc(#loc64)
      %4 = cir.unary(minus, %3) : !s32i, !s32i loc(#loc64)
      %5 = cir.const #cir.int<1> : !s32i loc(#loc64)
      %6 = cir.binop(sub, %4, %5) nsw : !s32i loc(#loc64)
      %7 = cir.cmp(gt, %2, %6) : !s32i, !cir.bool loc(#loc136)
      %8 = cir.ternary(%7, true {
        %9 = cir.load %0 : !cir.ptr<!s32i>, !s32i loc(#loc66)
        %10 = cir.abs %9 poison : !s32i loc(#loc67)
        %11 = cir.cast(integral, %10 : !s32i), !s64i loc(#loc67)
        %12 = cir.get_global @sqrt : !cir.ptr<!cir.func<!cir.double (!cir.double)>> loc(#loc68)
        %13 = cir.const #cir.int<2147483647> : !s32i loc(#loc69)
        %14 = cir.cast(int_to_float, %13 : !s32i), !cir.double loc(#loc69)
        %15 = cir.call @sqrt(%14) : (!cir.double) -> !cir.double extra(#fn_attr1) loc(#loc68)
        %16 = cir.cast(float_to_int, %15 : !cir.double), !s64i loc(#loc68)
        %17 = cir.cmp(lt, %11, %16) : !s64i, !cir.bool loc(#loc137)
        %18 = cir.ternary(%17, true {
          %19 = cir.const #true loc(#loc65)
          cir.yield %19 : !cir.bool loc(#loc65)
        }, false {
          %19 = cir.const #false loc(#loc65)
          cir.yield %19 : !cir.bool loc(#loc65)
        }) : (!cir.bool) -> !cir.bool loc(#loc65)
        cir.yield %18 : !cir.bool loc(#loc65)
      }, false {
        %9 = cir.const #false loc(#loc65)
        cir.yield %9 : !cir.bool loc(#loc65)
      }) : (!cir.bool) -> !cir.bool loc(#loc65)
      cir.if %8 {
        %9 = cir.alloca !s32i, !cir.ptr<!s32i>, ["result", init] {alignment = 4 : i64} loc(#loc139)
        %10 = cir.load %0 : !cir.ptr<!s32i>, !s32i loc(#loc76)
        %11 = cir.load %0 : !cir.ptr<!s32i>, !s32i loc(#loc75)
        %12 = cir.binop(mul, %10, %11) nsw : !s32i loc(#loc76)
        cir.store %12, %9 : !s32i, !cir.ptr<!s32i> loc(#loc139)
        %13 = cir.load %9 : !cir.ptr<!s32i>, !s32i loc(#loc77)
        cir.call @printIntLine(%13) : (!s32i) -> () loc(#loc78)
      } else {
        %9 = cir.get_global @".str.4" : !cir.ptr<!cir.array<!s8i x 54>> loc(#loc53)
        %10 = cir.cast(array_to_ptrdecay, %9 : !cir.ptr<!cir.array<!s8i x 54>>), !cir.ptr<!s8i> loc(#loc53)
        cir.call @printLine(%10) : (!cir.ptr<!s8i>) -> () loc(#loc79)
      } loc(#loc138)
    } loc(#loc135)
    cir.return loc(#loc55)
  } loc(#loc132)
  cir.func @_ZN42CWE190_Integer_Overflow__int_max_square_434goodEv() extra(#fn_attr) {
    cir.call @_ZN42CWE190_Integer_Overflow__int_max_square_43L7goodG2BEv() : () -> () loc(#loc82)
    cir.call @_ZN42CWE190_Integer_Overflow__int_max_square_43L7goodB2GEv() : () -> () loc(#loc83)
    cir.return loc(#loc81)
  } loc(#loc140)
  cir.func private @srand(!u32i) extra(#fn_attr1) loc(#loc141)
  cir.func private @time(!cir.ptr<!s64i>) -> !s64i extra(#fn_attr1) loc(#loc142)
  cir.func private @printLine(!cir.ptr<!s8i>) loc(#loc143)
  cir.global "private" constant cir_private dsolocal @".str" = #cir.const_array<"Calling good()...\00" : !cir.array<!s8i x 18>> : !cir.array<!s8i x 18> {alignment = 1 : i64} loc(#loc90)
  cir.global "private" constant cir_private dsolocal @".str.1" = #cir.const_array<"Finished good()\00" : !cir.array<!s8i x 16>> : !cir.array<!s8i x 16> {alignment = 1 : i64} loc(#loc91)
  cir.global "private" constant cir_private dsolocal @".str.2" = #cir.const_array<"Calling bad()...\00" : !cir.array<!s8i x 17>> : !cir.array<!s8i x 17> {alignment = 1 : i64} loc(#loc92)
  cir.global "private" constant cir_private dsolocal @".str.3" = #cir.const_array<"Finished bad()\00" : !cir.array<!s8i x 15>> : !cir.array<!s8i x 15> {alignment = 1 : i64} loc(#loc93)
  cir.func @main(%arg0: !s32i loc(fused[#loc96, #loc97]), %arg1: !cir.ptr<!cir.ptr<!s8i>> loc(fused[#loc98, #loc99])) -> !s32i extra(#fn_attr) {
    %0 = cir.alloca !s32i, !cir.ptr<!s32i>, ["argc", init] {alignment = 4 : i64} loc(#loc145)
    %1 = cir.alloca !cir.ptr<!cir.ptr<!s8i>>, !cir.ptr<!cir.ptr<!cir.ptr<!s8i>>>, ["argv", init] {alignment = 8 : i64} loc(#loc146)
    %2 = cir.alloca !s32i, !cir.ptr<!s32i>, ["__retval"] {alignment = 4 : i64} loc(#loc95)
    cir.store %arg0, %0 : !s32i, !cir.ptr<!s32i> loc(#loc100)
    cir.store %arg1, %1 : !cir.ptr<!cir.ptr<!s8i>>, !cir.ptr<!cir.ptr<!cir.ptr<!s8i>>> loc(#loc100)
    %3 = cir.const #cir.ptr<null> : !cir.ptr<!s64i> loc(#loc101)
    %4 = cir.call @time(%3) : (!cir.ptr<!s64i>) -> !s64i extra(#fn_attr1) loc(#loc102)
    %5 = cir.cast(integral, %4 : !s64i), !u32i loc(#loc102)
    cir.call @srand(%5) : (!u32i) -> () extra(#fn_attr1) loc(#loc103)
    %6 = cir.get_global @".str" : !cir.ptr<!cir.array<!s8i x 18>> loc(#loc90)
    %7 = cir.cast(array_to_ptrdecay, %6 : !cir.ptr<!cir.array<!s8i x 18>>), !cir.ptr<!s8i> loc(#loc90)
    cir.call @printLine(%7) : (!cir.ptr<!s8i>) -> () loc(#loc104)
    cir.call @_ZN42CWE190_Integer_Overflow__int_max_square_434goodEv() : () -> () loc(#loc105)
    %8 = cir.get_global @".str.1" : !cir.ptr<!cir.array<!s8i x 16>> loc(#loc91)
    %9 = cir.cast(array_to_ptrdecay, %8 : !cir.ptr<!cir.array<!s8i x 16>>), !cir.ptr<!s8i> loc(#loc91)
    cir.call @printLine(%9) : (!cir.ptr<!s8i>) -> () loc(#loc106)
    %10 = cir.get_global @".str.2" : !cir.ptr<!cir.array<!s8i x 17>> loc(#loc92)
    %11 = cir.cast(array_to_ptrdecay, %10 : !cir.ptr<!cir.array<!s8i x 17>>), !cir.ptr<!s8i> loc(#loc92)
    cir.call @printLine(%11) : (!cir.ptr<!s8i>) -> () loc(#loc107)
    cir.call @_ZN42CWE190_Integer_Overflow__int_max_square_433badEv() : () -> () loc(#loc108)
    %12 = cir.get_global @".str.3" : !cir.ptr<!cir.array<!s8i x 15>> loc(#loc93)
    %13 = cir.cast(array_to_ptrdecay, %12 : !cir.ptr<!cir.array<!s8i x 15>>), !cir.ptr<!s8i> loc(#loc93)
    cir.call @printLine(%13) : (!cir.ptr<!s8i>) -> () loc(#loc109)
    %14 = cir.const #cir.int<0> : !s32i loc(#loc110)
    cir.store %14, %2 : !s32i, !cir.ptr<!s32i> loc(#loc147)
    %15 = cir.load %2 : !cir.ptr<!s32i>, !s32i loc(#loc147)
    cir.return %15 : !s32i loc(#loc147)
  } loc(#loc144)
} loc(#loc)
#loc = loc("/home/ladisgin/git_proj/juliet-c/testcases/CWE190_Integer_Overflow/s03/CWE190_Integer_Overflow__int_max_square_43.cpp":0:0)
#loc1 = loc("CWE190_Integer_Overflow__int_max_square_43.cpp":27:1)
#loc2 = loc("CWE190_Integer_Overflow__int_max_square_43.cpp":31:1)
#loc5 = loc("CWE190_Integer_Overflow__int_max_square_43.cpp":28:1)
#loc6 = loc("CWE190_Integer_Overflow__int_max_square_43.cpp":30:12)
#loc7 = loc("CWE190_Integer_Overflow__int_max_square_43.cpp":30:5)
#loc8 = loc("../../../testcasesupport/std_testcase_io.h":18:1)
#loc9 = loc("../../../testcasesupport/std_testcase_io.h":18:33)
#loc10 = loc("CWE190_Integer_Overflow__int_max_square_43.cpp":33:1)
#loc11 = loc("CWE190_Integer_Overflow__int_max_square_43.cpp":44:1)
#loc12 = loc("CWE190_Integer_Overflow__int_max_square_43.cpp":35:5)
#loc13 = loc("CWE190_Integer_Overflow__int_max_square_43.cpp":35:9)
#loc14 = loc("CWE190_Integer_Overflow__int_max_square_43.cpp":37:12)
#loc15 = loc("CWE190_Integer_Overflow__int_max_square_43.cpp":37:5)
#loc16 = loc("CWE190_Integer_Overflow__int_max_square_43.cpp":38:5)
#loc17 = loc("CWE190_Integer_Overflow__int_max_square_43.cpp":39:5)
#loc18 = loc("CWE190_Integer_Overflow__int_max_square_43.cpp":43:5)
#loc19 = loc("CWE190_Integer_Overflow__int_max_square_43.cpp":41:9)
#loc20 = loc("CWE190_Integer_Overflow__int_max_square_43.cpp":41:29)
#loc21 = loc("CWE190_Integer_Overflow__int_max_square_43.cpp":41:22)
#loc22 = loc("CWE190_Integer_Overflow__int_max_square_43.cpp":42:22)
#loc23 = loc("CWE190_Integer_Overflow__int_max_square_43.cpp":42:9)
#loc24 = loc("CWE190_Integer_Overflow__int_max_square_43.cpp":51:1)
#loc25 = loc("CWE190_Integer_Overflow__int_max_square_43.cpp":55:1)
#loc28 = loc("CWE190_Integer_Overflow__int_max_square_43.cpp":52:1)
#loc29 = loc("CWE190_Integer_Overflow__int_max_square_43.cpp":54:12)
#loc30 = loc("CWE190_Integer_Overflow__int_max_square_43.cpp":54:5)
#loc31 = loc("CWE190_Integer_Overflow__int_max_square_43.cpp":57:1)
#loc32 = loc("CWE190_Integer_Overflow__int_max_square_43.cpp":68:1)
#loc33 = loc("CWE190_Integer_Overflow__int_max_square_43.cpp":59:5)
#loc34 = loc("CWE190_Integer_Overflow__int_max_square_43.cpp":59:9)
#loc35 = loc("CWE190_Integer_Overflow__int_max_square_43.cpp":61:12)
#loc36 = loc("CWE190_Integer_Overflow__int_max_square_43.cpp":61:5)
#loc37 = loc("CWE190_Integer_Overflow__int_max_square_43.cpp":62:5)
#loc38 = loc("CWE190_Integer_Overflow__int_max_square_43.cpp":63:5)
#loc39 = loc("CWE190_Integer_Overflow__int_max_square_43.cpp":67:5)
#loc40 = loc("CWE190_Integer_Overflow__int_max_square_43.cpp":65:9)
#loc41 = loc("CWE190_Integer_Overflow__int_max_square_43.cpp":65:29)
#loc42 = loc("CWE190_Integer_Overflow__int_max_square_43.cpp":65:22)
#loc43 = loc("CWE190_Integer_Overflow__int_max_square_43.cpp":66:22)
#loc44 = loc("CWE190_Integer_Overflow__int_max_square_43.cpp":66:9)
#loc45 = loc("CWE190_Integer_Overflow__int_max_square_43.cpp":71:1)
#loc46 = loc("CWE190_Integer_Overflow__int_max_square_43.cpp":75:1)
#loc49 = loc("CWE190_Integer_Overflow__int_max_square_43.cpp":72:1)
#loc50 = loc("CWE190_Integer_Overflow__int_max_square_43.cpp":74:12)
#loc51 = loc("CWE190_Integer_Overflow__int_max_square_43.cpp":74:5)
#loc52 = loc("/usr/include/bits/mathcalls.h":158:1)
#loc53 = loc("CWE190_Integer_Overflow__int_max_square_43.cpp":91:19)
#loc54 = loc("CWE190_Integer_Overflow__int_max_square_43.cpp":77:1)
#loc55 = loc("CWE190_Integer_Overflow__int_max_square_43.cpp":93:1)
#loc56 = loc("CWE190_Integer_Overflow__int_max_square_43.cpp":79:5)
#loc57 = loc("CWE190_Integer_Overflow__int_max_square_43.cpp":79:9)
#loc58 = loc("CWE190_Integer_Overflow__int_max_square_43.cpp":81:12)
#loc59 = loc("CWE190_Integer_Overflow__int_max_square_43.cpp":81:5)
#loc60 = loc("CWE190_Integer_Overflow__int_max_square_43.cpp":82:5)
#loc61 = loc("CWE190_Integer_Overflow__int_max_square_43.cpp":84:5)
#loc62 = loc("CWE190_Integer_Overflow__int_max_square_43.cpp":92:5)
#loc63 = loc("CWE190_Integer_Overflow__int_max_square_43.cpp":84:9)
#loc64 = loc("CWE190_Integer_Overflow__int_max_square_43.cpp":84:16)
#loc65 = loc("CWE190_Integer_Overflow__int_max_square_43.cpp":84:24)
#loc66 = loc("CWE190_Integer_Overflow__int_max_square_43.cpp":84:31)
#loc67 = loc("CWE190_Integer_Overflow__int_max_square_43.cpp":84:27)
#loc68 = loc("CWE190_Integer_Overflow__int_max_square_43.cpp":84:45)
#loc69 = loc("CWE190_Integer_Overflow__int_max_square_43.cpp":84:58)
#loc70 = loc("CWE190_Integer_Overflow__int_max_square_43.cpp":84:65)
#loc71 = loc("CWE190_Integer_Overflow__int_max_square_43.cpp":85:5)
#loc72 = loc("CWE190_Integer_Overflow__int_max_square_43.cpp":88:5)
#loc73 = loc("CWE190_Integer_Overflow__int_max_square_43.cpp":90:5)
#loc74 = loc("CWE190_Integer_Overflow__int_max_square_43.cpp":86:9)
#loc75 = loc("CWE190_Integer_Overflow__int_max_square_43.cpp":86:29)
#loc76 = loc("CWE190_Integer_Overflow__int_max_square_43.cpp":86:22)
#loc77 = loc("CWE190_Integer_Overflow__int_max_square_43.cpp":87:22)
#loc78 = loc("CWE190_Integer_Overflow__int_max_square_43.cpp":87:9)
#loc79 = loc("CWE190_Integer_Overflow__int_max_square_43.cpp":91:9)
#loc80 = loc("CWE190_Integer_Overflow__int_max_square_43.cpp":95:1)
#loc81 = loc("CWE190_Integer_Overflow__int_max_square_43.cpp":99:1)
#loc82 = loc("CWE190_Integer_Overflow__int_max_square_43.cpp":97:5)
#loc83 = loc("CWE190_Integer_Overflow__int_max_square_43.cpp":98:5)
#loc84 = loc("/usr/include/stdlib.h":575:1)
#loc85 = loc("/usr/include/stdlib.h":575:41)
#loc86 = loc("/usr/include/time.h":76:1)
#loc87 = loc("/usr/include/time.h":76:38)
#loc88 = loc("../../../testcasesupport/std_testcase_io.h":14:1)
#loc89 = loc("../../../testcasesupport/std_testcase_io.h":14:33)
#loc90 = loc("CWE190_Integer_Overflow__int_max_square_43.cpp":119:15)
#loc91 = loc("CWE190_Integer_Overflow__int_max_square_43.cpp":121:15)
#loc92 = loc("CWE190_Integer_Overflow__int_max_square_43.cpp":124:15)
#loc93 = loc("CWE190_Integer_Overflow__int_max_square_43.cpp":126:15)
#loc94 = loc("CWE190_Integer_Overflow__int_max_square_43.cpp":114:1)
#loc95 = loc("CWE190_Integer_Overflow__int_max_square_43.cpp":129:1)
#loc100 = loc("CWE190_Integer_Overflow__int_max_square_43.cpp":115:1)
#loc101 = loc("CWE190_Integer_Overflow__int_max_square_43.cpp":117:27)
#loc102 = loc("CWE190_Integer_Overflow__int_max_square_43.cpp":117:22)
#loc103 = loc("CWE190_Integer_Overflow__int_max_square_43.cpp":117:5)
#loc104 = loc("CWE190_Integer_Overflow__int_max_square_43.cpp":119:5)
#loc105 = loc("CWE190_Integer_Overflow__int_max_square_43.cpp":120:5)
#loc106 = loc("CWE190_Integer_Overflow__int_max_square_43.cpp":121:5)
#loc107 = loc("CWE190_Integer_Overflow__int_max_square_43.cpp":124:5)
#loc108 = loc("CWE190_Integer_Overflow__int_max_square_43.cpp":125:5)
#loc109 = loc("CWE190_Integer_Overflow__int_max_square_43.cpp":126:5)
#loc110 = loc("CWE190_Integer_Overflow__int_max_square_43.cpp":128:12)
#loc111 = loc("CWE190_Integer_Overflow__int_max_square_43.cpp":128:5)
#loc112 = loc(fused[#loc1, #loc2])
#loc114 = loc(fused[#loc7, #loc6])
#loc115 = loc(fused[#loc8, #loc9])
#loc116 = loc(fused[#loc10, #loc11])
#loc117 = loc(fused[#loc12, #loc13])
#loc118 = loc(fused[#loc15, #loc14])
#loc119 = loc(fused[#loc17, #loc18])
#loc120 = loc(fused[#loc19, #loc20])
#loc121 = loc(fused[#loc24, #loc25])
#loc123 = loc(fused[#loc30, #loc29])
#loc124 = loc(fused[#loc31, #loc32])
#loc125 = loc(fused[#loc33, #loc34])
#loc126 = loc(fused[#loc36, #loc35])
#loc127 = loc(fused[#loc38, #loc39])
#loc128 = loc(fused[#loc40, #loc41])
#loc129 = loc(fused[#loc45, #loc46])
#loc131 = loc(fused[#loc51, #loc50])
#loc132 = loc(fused[#loc54, #loc55])
#loc133 = loc(fused[#loc56, #loc57])
#loc134 = loc(fused[#loc59, #loc58])
#loc135 = loc(fused[#loc61, #loc62])
#loc136 = loc(fused[#loc63, #loc64])
#loc137 = loc(fused[#loc67, #loc70])
#loc138 = loc(fused[#loc71, #loc72, #loc73, #loc62])
#loc139 = loc(fused[#loc74, #loc75])
#loc140 = loc(fused[#loc80, #loc81])
#loc141 = loc(fused[#loc84, #loc85])
#loc142 = loc(fused[#loc86, #loc87])
#loc143 = loc(fused[#loc88, #loc89])
#loc144 = loc(fused[#loc94, #loc95])
#loc147 = loc(fused[#loc111, #loc110])
