!s32i = !cir.int<s, 32>
!s64i = !cir.int<s, 64>
!s8i = !cir.int<s, 8>
!u32i = !cir.int<u, 32>
!u64i = !cir.int<u, 64>
!u8i = !cir.int<u, 8>
!void = !cir.void
#fn_attr = #cir<extra({nothrow = #cir.nothrow})>
#fn_attr1 = #cir<extra({inline = #cir.inline<no>, nothrow = #cir.nothrow, optnone = #cir.optnone})>
#loc68 = loc("CWE401_Memory_Leak__strdup_char_12.c":154:10)
#loc69 = loc("CWE401_Memory_Leak__strdup_char_12.c":154:14)
#loc70 = loc("CWE401_Memory_Leak__strdup_char_12.c":154:20)
#loc71 = loc("CWE401_Memory_Leak__strdup_char_12.c":154:32)
#loc187 = loc(fused[#loc68, #loc69])
#loc188 = loc(fused[#loc70, #loc71])
module @"/home/ladisgin/git_proj/juliet-c/testcases/CWE401_Memory_Leak/s02/CWE401_Memory_Leak__strdup_char_12.c" attributes {cir.lang = #cir.lang<c>, cir.sob = #cir.signed_overflow_behavior<undefined>, cir.triple = "x86_64-unknown-linux-gnu", dlti.dl_spec = #dlti.dl_spec<i1 = dense<8> : vector<2xi64>, !llvm.ptr = dense<64> : vector<4xi64>, f80 = dense<128> : vector<2xi64>, i64 = dense<64> : vector<2xi64>, i128 = dense<128> : vector<2xi64>, !llvm.ptr<272> = dense<64> : vector<4xi64>, !llvm.ptr<271> = dense<32> : vector<4xi64>, !llvm.ptr<270> = dense<32> : vector<4xi64>, f64 = dense<64> : vector<2xi64>, f128 = dense<128> : vector<2xi64>, f16 = dense<16> : vector<2xi64>, i32 = dense<32> : vector<2xi64>, i8 = dense<8> : vector<2xi64>, i16 = dense<16> : vector<2xi64>, "dlti.stack_alignment" = 128 : i64, "dlti.endianness" = "little">} {
  cir.global "private" constant cir_private @__const.goodB2G.myString = #cir.const_array<"myString\00" : !cir.array<!s8i x 9>> : !cir.array<!s8i x 9> loc(#loc162)
  cir.global "private" constant cir_private @__const.CWE401_Memory_Leak__strdup_char_12_bad.myString = #cir.const_array<"myString\00" : !cir.array<!s8i x 9>> : !cir.array<!s8i x 9> loc(#loc163)
  cir.func no_proto private @globalReturnsTrueOrFalse(...) -> !s32i loc(#loc164)
  cir.func private @strdup(!cir.ptr<!s8i>) -> !cir.ptr<!s8i> extra(#fn_attr) loc(#loc165)
  cir.func private @printLine(!cir.ptr<!s8i>) loc(#loc166)
  cir.func private @strcpy(!cir.ptr<!s8i>, !cir.ptr<!s8i>) -> !cir.ptr<!s8i> extra(#fn_attr) loc(#loc167)
  cir.global "private" constant cir_private dsolocal @".str" = #cir.const_array<"a string\00" : !cir.array<!s8i x 9>> : !cir.array<!s8i x 9> {alignment = 1 : i64} loc(#loc13)
  cir.func private @free(!cir.ptr<!void>) extra(#fn_attr) loc(#loc168)
  cir.func no_proto @CWE401_Memory_Leak__strdup_char_12_bad() extra(#fn_attr1) {
    %0 = cir.alloca !cir.array<!s8i x 9>, !cir.ptr<!cir.array<!s8i x 9>>, ["myString"] {alignment = 1 : i64} loc(#loc163)
    %1 = cir.alloca !cir.ptr<!s8i>, !cir.ptr<!cir.ptr<!s8i>>, ["data"] {alignment = 8 : i64} loc(#loc170)
    %2 = cir.const #cir.ptr<null> : !cir.ptr<!s8i> loc(#loc20)
    cir.store %2, %1 : !cir.ptr<!s8i>, !cir.ptr<!cir.ptr<!s8i>> loc(#loc171)
    cir.br ^bb1 loc(#loc172)
  ^bb1:  // pred: ^bb0
    %3 = cir.get_global @globalReturnsTrueOrFalse : !cir.ptr<!cir.func<!s32i (...)>> loc(#loc173)
    %4 = cir.cast(bitcast, %3 : !cir.ptr<!cir.func<!s32i (...)>>), !cir.ptr<!cir.func<!s32i ()>> loc(#loc173)
    %5 = cir.call %4() : (!cir.ptr<!cir.func<!s32i ()>>) -> !s32i loc(#loc24)
    %6 = cir.cast(int_to_bool, %5 : !s32i), !cir.bool loc(#loc24)
    cir.brcond %6 ^bb2, ^bb5 loc(#loc174)
  ^bb2:  // pred: ^bb1
    cir.br ^bb3 loc(#loc175)
  ^bb3:  // pred: ^bb2
    %7 = cir.get_global @__const.CWE401_Memory_Leak__strdup_char_12_bad.myString : !cir.ptr<!cir.array<!s8i x 9>> loc(#loc163)
    cir.copy %7 to %0 : !cir.ptr<!cir.array<!s8i x 9>> loc(#loc163)
    %8 = cir.get_global @strdup : !cir.ptr<!cir.func<!cir.ptr<!s8i> (!cir.ptr<!s8i>)>> loc(#loc31)
    %9 = cir.cast(array_to_ptrdecay, %0 : !cir.ptr<!cir.array<!s8i x 9>>), !cir.ptr<!s8i> loc(#loc32)
    %10 = cir.call @strdup(%9) : (!cir.ptr<!s8i>) -> !cir.ptr<!s8i> extra(#fn_attr) loc(#loc31)
    cir.store %10, %1 : !cir.ptr<!s8i>, !cir.ptr<!cir.ptr<!s8i>> loc(#loc176)
    %11 = cir.load %1 : !cir.ptr<!cir.ptr<!s8i>>, !cir.ptr<!s8i> loc(#loc35)
    cir.call @printLine(%11) : (!cir.ptr<!s8i>) -> () loc(#loc36)
    cir.br ^bb4 loc(#loc30)
  ^bb4:  // pred: ^bb3
    cir.br ^bb6 loc(#loc27)
  ^bb5:  // pred: ^bb1
    %12 = cir.const #cir.int<100> : !s32i loc(#loc37)
    %13 = cir.cast(integral, %12 : !s32i), !u64i loc(#loc37)
    %14 = cir.const #cir.int<1> : !u64i loc(#loc37)
    %15 = cir.binop(mul, %13, %14) : !u64i loc(#loc37)
    %16 = cir.alloca !u8i, !cir.ptr<!u8i>, %15 : !u64i, ["bi_alloca"] {alignment = 16 : i64} loc(#loc37)
    %17 = cir.cast(bitcast, %16 : !cir.ptr<!u8i>), !cir.ptr<!void> loc(#loc37)
    %18 = cir.cast(bitcast, %17 : !cir.ptr<!void>), !cir.ptr<!s8i> loc(#loc37)
    cir.store %18, %1 : !cir.ptr<!s8i>, !cir.ptr<!cir.ptr<!s8i>> loc(#loc177)
    %19 = cir.get_global @strcpy : !cir.ptr<!cir.func<!cir.ptr<!s8i> (!cir.ptr<!s8i>, !cir.ptr<!s8i>)>> loc(#loc39)
    %20 = cir.load %1 : !cir.ptr<!cir.ptr<!s8i>>, !cir.ptr<!s8i> loc(#loc40)
    %21 = cir.get_global @".str" : !cir.ptr<!cir.array<!s8i x 9>> loc(#loc13)
    %22 = cir.cast(array_to_ptrdecay, %21 : !cir.ptr<!cir.array<!s8i x 9>>), !cir.ptr<!s8i> loc(#loc13)
    %23 = cir.call @strcpy(%20, %22) : (!cir.ptr<!s8i>, !cir.ptr<!s8i>) -> !cir.ptr<!s8i> extra(#fn_attr) loc(#loc39)
    %24 = cir.load %1 : !cir.ptr<!cir.ptr<!s8i>>, !cir.ptr<!s8i> loc(#loc41)
    cir.call @printLine(%24) : (!cir.ptr<!s8i>) -> () loc(#loc42)
    cir.br ^bb6 loc(#loc23)
  ^bb6:  // 2 preds: ^bb4, ^bb5
    cir.br ^bb7 loc(#loc23)
  ^bb7:  // pred: ^bb6
    cir.br ^bb8 loc(#loc178)
  ^bb8:  // pred: ^bb7
    %25 = cir.get_global @globalReturnsTrueOrFalse : !cir.ptr<!cir.func<!s32i (...)>> loc(#loc179)
    %26 = cir.cast(bitcast, %25 : !cir.ptr<!cir.func<!s32i (...)>>), !cir.ptr<!cir.func<!s32i ()>> loc(#loc179)
    %27 = cir.call %26() : (!cir.ptr<!cir.func<!s32i ()>>) -> !s32i loc(#loc45)
    %28 = cir.cast(int_to_bool, %27 : !s32i), !cir.bool loc(#loc45)
    cir.brcond %28 ^bb9, ^bb10 loc(#loc180)
  ^bb9:  // pred: ^bb8
    cir.br ^bb11 loc(#loc48)
  ^bb10:  // pred: ^bb8
    %29 = cir.get_global @free : !cir.ptr<!cir.func<!void (!cir.ptr<!void>)>> loc(#loc50)
    %30 = cir.load %1 : !cir.ptr<!cir.ptr<!s8i>>, !cir.ptr<!s8i> loc(#loc51)
    %31 = cir.cast(bitcast, %30 : !cir.ptr<!s8i>), !cir.ptr<!void> loc(#loc51)
    cir.call @free(%31) : (!cir.ptr<!void>) -> () extra(#fn_attr) loc(#loc50)
    cir.br ^bb11 loc(#loc44)
  ^bb11:  // 2 preds: ^bb9, ^bb10
    cir.br ^bb12 loc(#loc44)
  ^bb12:  // pred: ^bb11
    cir.return loc(#loc17)
  } loc(#loc169)
  cir.func no_proto @CWE401_Memory_Leak__strdup_char_12_good() extra(#fn_attr1) {
    %0 = cir.get_global @goodB2G : !cir.ptr<!cir.func<!void ()>> loc(#loc182)
    cir.call %0() : (!cir.ptr<!cir.func<!void ()>>) -> () loc(#loc54)
    %1 = cir.get_global @goodG2B : !cir.ptr<!cir.func<!void ()>> loc(#loc183)
    cir.call %1() : (!cir.ptr<!cir.func<!void ()>>) -> () loc(#loc56)
    cir.return loc(#loc53)
  } loc(#loc181)
  cir.func private @srand(!u32i) extra(#fn_attr) loc(#loc184)
  cir.func private @time(!cir.ptr<!s64i>) -> !s64i extra(#fn_attr) loc(#loc185)
  cir.global "private" constant cir_private dsolocal @".str.1" = #cir.const_array<"Calling good()...\00" : !cir.array<!s8i x 18>> : !cir.array<!s8i x 18> {alignment = 1 : i64} loc(#loc62)
  cir.global "private" constant cir_private dsolocal @".str.2" = #cir.const_array<"Finished good()\00" : !cir.array<!s8i x 16>> : !cir.array<!s8i x 16> {alignment = 1 : i64} loc(#loc63)
  cir.global "private" constant cir_private dsolocal @".str.3" = #cir.const_array<"Calling bad()...\00" : !cir.array<!s8i x 17>> : !cir.array<!s8i x 17> {alignment = 1 : i64} loc(#loc64)
  cir.global "private" constant cir_private dsolocal @".str.4" = #cir.const_array<"Finished bad()\00" : !cir.array<!s8i x 15>> : !cir.array<!s8i x 15> {alignment = 1 : i64} loc(#loc65)
  cir.func @main(%arg0: !s32i loc(fused[#loc68, #loc69]), %arg1: !cir.ptr<!cir.ptr<!s8i>> loc(fused[#loc70, #loc71])) -> !s32i extra(#fn_attr1) {
    %0 = cir.alloca !s32i, !cir.ptr<!s32i>, ["argc", init] {alignment = 4 : i64} loc(#loc187)
    %1 = cir.alloca !cir.ptr<!cir.ptr<!s8i>>, !cir.ptr<!cir.ptr<!cir.ptr<!s8i>>>, ["argv", init] {alignment = 8 : i64} loc(#loc188)
    %2 = cir.alloca !s32i, !cir.ptr<!s32i>, ["__retval"] {alignment = 4 : i64} loc(#loc67)
    cir.store %arg0, %0 : !s32i, !cir.ptr<!s32i> loc(#loc72)
    cir.store %arg1, %1 : !cir.ptr<!cir.ptr<!s8i>>, !cir.ptr<!cir.ptr<!cir.ptr<!s8i>>> loc(#loc72)
    %3 = cir.const #cir.ptr<null> : !cir.ptr<!s64i> loc(#loc73)
    %4 = cir.call @time(%3) : (!cir.ptr<!s64i>) -> !s64i extra(#fn_attr) loc(#loc74)
    %5 = cir.cast(integral, %4 : !s64i), !u32i loc(#loc74)
    cir.call @srand(%5) : (!u32i) -> () extra(#fn_attr) loc(#loc75)
    %6 = cir.get_global @".str.1" : !cir.ptr<!cir.array<!s8i x 18>> loc(#loc62)
    %7 = cir.cast(array_to_ptrdecay, %6 : !cir.ptr<!cir.array<!s8i x 18>>), !cir.ptr<!s8i> loc(#loc62)
    cir.call @printLine(%7) : (!cir.ptr<!s8i>) -> () loc(#loc76)
    %8 = cir.get_global @CWE401_Memory_Leak__strdup_char_12_good : !cir.ptr<!cir.func<!void ()>> loc(#loc189)
    cir.call @CWE401_Memory_Leak__strdup_char_12_good() : () -> () loc(#loc77)
    %9 = cir.get_global @".str.2" : !cir.ptr<!cir.array<!s8i x 16>> loc(#loc63)
    %10 = cir.cast(array_to_ptrdecay, %9 : !cir.ptr<!cir.array<!s8i x 16>>), !cir.ptr<!s8i> loc(#loc63)
    cir.call @printLine(%10) : (!cir.ptr<!s8i>) -> () loc(#loc79)
    %11 = cir.get_global @".str.3" : !cir.ptr<!cir.array<!s8i x 17>> loc(#loc64)
    %12 = cir.cast(array_to_ptrdecay, %11 : !cir.ptr<!cir.array<!s8i x 17>>), !cir.ptr<!s8i> loc(#loc64)
    cir.call @printLine(%12) : (!cir.ptr<!s8i>) -> () loc(#loc80)
    %13 = cir.get_global @CWE401_Memory_Leak__strdup_char_12_bad : !cir.ptr<!cir.func<!void ()>> loc(#loc190)
    cir.call @CWE401_Memory_Leak__strdup_char_12_bad() : () -> () loc(#loc81)
    %14 = cir.get_global @".str.4" : !cir.ptr<!cir.array<!s8i x 15>> loc(#loc65)
    %15 = cir.cast(array_to_ptrdecay, %14 : !cir.ptr<!cir.array<!s8i x 15>>), !cir.ptr<!s8i> loc(#loc65)
    cir.call @printLine(%15) : (!cir.ptr<!s8i>) -> () loc(#loc83)
    %16 = cir.const #cir.int<0> : !s32i loc(#loc84)
    cir.store %16, %2 : !s32i, !cir.ptr<!s32i> loc(#loc191)
    %17 = cir.load %2 : !cir.ptr<!s32i>, !s32i loc(#loc191)
    cir.return %17 : !s32i loc(#loc191)
  } loc(#loc186)
  cir.func no_proto internal private @goodB2G() extra(#fn_attr1) {
    %0 = cir.alloca !cir.array<!s8i x 9>, !cir.ptr<!cir.array<!s8i x 9>>, ["myString"] {alignment = 1 : i64} loc(#loc162)
    %1 = cir.alloca !cir.array<!s8i x 9>, !cir.ptr<!cir.array<!s8i x 9>>, ["myString"] {alignment = 1 : i64} loc(#loc193)
    %2 = cir.alloca !cir.ptr<!s8i>, !cir.ptr<!cir.ptr<!s8i>>, ["data"] {alignment = 8 : i64} loc(#loc194)
    %3 = cir.const #cir.ptr<null> : !cir.ptr<!s8i> loc(#loc92)
    cir.store %3, %2 : !cir.ptr<!s8i>, !cir.ptr<!cir.ptr<!s8i>> loc(#loc195)
    cir.br ^bb1 loc(#loc196)
  ^bb1:  // pred: ^bb0
    %4 = cir.get_global @globalReturnsTrueOrFalse : !cir.ptr<!cir.func<!s32i (...)>> loc(#loc197)
    %5 = cir.cast(bitcast, %4 : !cir.ptr<!cir.func<!s32i (...)>>), !cir.ptr<!cir.func<!s32i ()>> loc(#loc197)
    %6 = cir.call %5() : (!cir.ptr<!cir.func<!s32i ()>>) -> !s32i loc(#loc96)
    %7 = cir.cast(int_to_bool, %6 : !s32i), !cir.bool loc(#loc96)
    cir.brcond %7 ^bb2, ^bb5 loc(#loc198)
  ^bb2:  // pred: ^bb1
    cir.br ^bb3 loc(#loc199)
  ^bb3:  // pred: ^bb2
    %8 = cir.get_global @__const.goodB2G.myString : !cir.ptr<!cir.array<!s8i x 9>> loc(#loc162)
    cir.copy %8 to %0 : !cir.ptr<!cir.array<!s8i x 9>> loc(#loc162)
    %9 = cir.get_global @strdup : !cir.ptr<!cir.func<!cir.ptr<!s8i> (!cir.ptr<!s8i>)>> loc(#loc103)
    %10 = cir.cast(array_to_ptrdecay, %0 : !cir.ptr<!cir.array<!s8i x 9>>), !cir.ptr<!s8i> loc(#loc104)
    %11 = cir.call @strdup(%10) : (!cir.ptr<!s8i>) -> !cir.ptr<!s8i> extra(#fn_attr) loc(#loc103)
    cir.store %11, %2 : !cir.ptr<!s8i>, !cir.ptr<!cir.ptr<!s8i>> loc(#loc200)
    %12 = cir.load %2 : !cir.ptr<!cir.ptr<!s8i>>, !cir.ptr<!s8i> loc(#loc107)
    cir.call @printLine(%12) : (!cir.ptr<!s8i>) -> () loc(#loc108)
    cir.br ^bb4 loc(#loc102)
  ^bb4:  // pred: ^bb3
    cir.br ^bb8 loc(#loc99)
  ^bb5:  // pred: ^bb1
    cir.br ^bb6 loc(#loc201)
  ^bb6:  // pred: ^bb5
    %13 = cir.get_global @__const.goodB2G.myString : !cir.ptr<!cir.array<!s8i x 9>> loc(#loc162)
    cir.copy %13 to %1 : !cir.ptr<!cir.array<!s8i x 9>> loc(#loc193)
    %14 = cir.get_global @strdup : !cir.ptr<!cir.func<!cir.ptr<!s8i> (!cir.ptr<!s8i>)>> loc(#loc111)
    %15 = cir.cast(array_to_ptrdecay, %1 : !cir.ptr<!cir.array<!s8i x 9>>), !cir.ptr<!s8i> loc(#loc112)
    %16 = cir.call @strdup(%15) : (!cir.ptr<!s8i>) -> !cir.ptr<!s8i> extra(#fn_attr) loc(#loc111)
    cir.store %16, %2 : !cir.ptr<!s8i>, !cir.ptr<!cir.ptr<!s8i>> loc(#loc202)
    %17 = cir.load %2 : !cir.ptr<!cir.ptr<!s8i>>, !cir.ptr<!s8i> loc(#loc115)
    cir.call @printLine(%17) : (!cir.ptr<!s8i>) -> () loc(#loc116)
    cir.br ^bb7 loc(#loc110)
  ^bb7:  // pred: ^bb6
    cir.br ^bb8 loc(#loc95)
  ^bb8:  // 2 preds: ^bb4, ^bb7
    cir.br ^bb9 loc(#loc95)
  ^bb9:  // pred: ^bb8
    cir.br ^bb10 loc(#loc203)
  ^bb10:  // pred: ^bb9
    %18 = cir.get_global @globalReturnsTrueOrFalse : !cir.ptr<!cir.func<!s32i (...)>> loc(#loc204)
    %19 = cir.cast(bitcast, %18 : !cir.ptr<!cir.func<!s32i (...)>>), !cir.ptr<!cir.func<!s32i ()>> loc(#loc204)
    %20 = cir.call %19() : (!cir.ptr<!cir.func<!s32i ()>>) -> !s32i loc(#loc119)
    %21 = cir.cast(int_to_bool, %20 : !s32i), !cir.bool loc(#loc119)
    cir.brcond %21 ^bb11, ^bb12 loc(#loc205)
  ^bb11:  // pred: ^bb10
    %22 = cir.get_global @free : !cir.ptr<!cir.func<!void (!cir.ptr<!void>)>> loc(#loc124)
    %23 = cir.load %2 : !cir.ptr<!cir.ptr<!s8i>>, !cir.ptr<!s8i> loc(#loc125)
    %24 = cir.cast(bitcast, %23 : !cir.ptr<!s8i>), !cir.ptr<!void> loc(#loc125)
    cir.call @free(%24) : (!cir.ptr<!void>) -> () extra(#fn_attr) loc(#loc124)
    cir.br ^bb13 loc(#loc122)
  ^bb12:  // pred: ^bb10
    %25 = cir.get_global @free : !cir.ptr<!cir.func<!void (!cir.ptr<!void>)>> loc(#loc126)
    %26 = cir.load %2 : !cir.ptr<!cir.ptr<!s8i>>, !cir.ptr<!s8i> loc(#loc127)
    %27 = cir.cast(bitcast, %26 : !cir.ptr<!s8i>), !cir.ptr<!void> loc(#loc127)
    cir.call @free(%27) : (!cir.ptr<!void>) -> () extra(#fn_attr) loc(#loc126)
    cir.br ^bb13 loc(#loc118)
  ^bb13:  // 2 preds: ^bb11, ^bb12
    cir.br ^bb14 loc(#loc118)
  ^bb14:  // pred: ^bb13
    cir.return loc(#loc87)
  } loc(#loc192)
  cir.func no_proto internal private @goodG2B() extra(#fn_attr1) {
    %0 = cir.alloca !cir.ptr<!s8i>, !cir.ptr<!cir.ptr<!s8i>>, ["data"] {alignment = 8 : i64} loc(#loc207)
    %1 = cir.const #cir.ptr<null> : !cir.ptr<!s8i> loc(#loc132)
    cir.store %1, %0 : !cir.ptr<!s8i>, !cir.ptr<!cir.ptr<!s8i>> loc(#loc208)
    cir.br ^bb1 loc(#loc209)
  ^bb1:  // pred: ^bb0
    %2 = cir.get_global @globalReturnsTrueOrFalse : !cir.ptr<!cir.func<!s32i (...)>> loc(#loc210)
    %3 = cir.cast(bitcast, %2 : !cir.ptr<!cir.func<!s32i (...)>>), !cir.ptr<!cir.func<!s32i ()>> loc(#loc210)
    %4 = cir.call %3() : (!cir.ptr<!cir.func<!s32i ()>>) -> !s32i loc(#loc136)
    %5 = cir.cast(int_to_bool, %4 : !s32i), !cir.bool loc(#loc136)
    cir.brcond %5 ^bb2, ^bb3 loc(#loc211)
  ^bb2:  // pred: ^bb1
    %6 = cir.const #cir.int<100> : !s32i loc(#loc141)
    %7 = cir.cast(integral, %6 : !s32i), !u64i loc(#loc141)
    %8 = cir.const #cir.int<1> : !u64i loc(#loc141)
    %9 = cir.binop(mul, %7, %8) : !u64i loc(#loc141)
    %10 = cir.alloca !u8i, !cir.ptr<!u8i>, %9 : !u64i, ["bi_alloca"] {alignment = 16 : i64} loc(#loc141)
    %11 = cir.cast(bitcast, %10 : !cir.ptr<!u8i>), !cir.ptr<!void> loc(#loc141)
    %12 = cir.cast(bitcast, %11 : !cir.ptr<!void>), !cir.ptr<!s8i> loc(#loc141)
    cir.store %12, %0 : !cir.ptr<!s8i>, !cir.ptr<!cir.ptr<!s8i>> loc(#loc212)
    %13 = cir.get_global @strcpy : !cir.ptr<!cir.func<!cir.ptr<!s8i> (!cir.ptr<!s8i>, !cir.ptr<!s8i>)>> loc(#loc143)
    %14 = cir.load %0 : !cir.ptr<!cir.ptr<!s8i>>, !cir.ptr<!s8i> loc(#loc144)
    %15 = cir.get_global @".str" : !cir.ptr<!cir.array<!s8i x 9>> loc(#loc145)
    %16 = cir.cast(array_to_ptrdecay, %15 : !cir.ptr<!cir.array<!s8i x 9>>), !cir.ptr<!s8i> loc(#loc145)
    %17 = cir.call @strcpy(%14, %16) : (!cir.ptr<!s8i>, !cir.ptr<!s8i>) -> !cir.ptr<!s8i> extra(#fn_attr) loc(#loc143)
    %18 = cir.load %0 : !cir.ptr<!cir.ptr<!s8i>>, !cir.ptr<!s8i> loc(#loc146)
    cir.call @printLine(%18) : (!cir.ptr<!s8i>) -> () loc(#loc147)
    cir.br ^bb4 loc(#loc139)
  ^bb3:  // pred: ^bb1
    %19 = cir.const #cir.int<100> : !s32i loc(#loc148)
    %20 = cir.cast(integral, %19 : !s32i), !u64i loc(#loc148)
    %21 = cir.const #cir.int<1> : !u64i loc(#loc148)
    %22 = cir.binop(mul, %20, %21) : !u64i loc(#loc148)
    %23 = cir.alloca !u8i, !cir.ptr<!u8i>, %22 : !u64i, ["bi_alloca"] {alignment = 16 : i64} loc(#loc148)
    %24 = cir.cast(bitcast, %23 : !cir.ptr<!u8i>), !cir.ptr<!void> loc(#loc148)
    %25 = cir.cast(bitcast, %24 : !cir.ptr<!void>), !cir.ptr<!s8i> loc(#loc148)
    cir.store %25, %0 : !cir.ptr<!s8i>, !cir.ptr<!cir.ptr<!s8i>> loc(#loc213)
    %26 = cir.get_global @strcpy : !cir.ptr<!cir.func<!cir.ptr<!s8i> (!cir.ptr<!s8i>, !cir.ptr<!s8i>)>> loc(#loc150)
    %27 = cir.load %0 : !cir.ptr<!cir.ptr<!s8i>>, !cir.ptr<!s8i> loc(#loc151)
    %28 = cir.get_global @".str" : !cir.ptr<!cir.array<!s8i x 9>> loc(#loc152)
    %29 = cir.cast(array_to_ptrdecay, %28 : !cir.ptr<!cir.array<!s8i x 9>>), !cir.ptr<!s8i> loc(#loc152)
    %30 = cir.call @strcpy(%27, %29) : (!cir.ptr<!s8i>, !cir.ptr<!s8i>) -> !cir.ptr<!s8i> extra(#fn_attr) loc(#loc150)
    %31 = cir.load %0 : !cir.ptr<!cir.ptr<!s8i>>, !cir.ptr<!s8i> loc(#loc153)
    cir.call @printLine(%31) : (!cir.ptr<!s8i>) -> () loc(#loc154)
    cir.br ^bb4 loc(#loc135)
  ^bb4:  // 2 preds: ^bb2, ^bb3
    cir.br ^bb5 loc(#loc135)
  ^bb5:  // pred: ^bb4
    cir.br ^bb6 loc(#loc214)
  ^bb6:  // pred: ^bb5
    %32 = cir.get_global @globalReturnsTrueOrFalse : !cir.ptr<!cir.func<!s32i (...)>> loc(#loc215)
    %33 = cir.cast(bitcast, %32 : !cir.ptr<!cir.func<!s32i (...)>>), !cir.ptr<!cir.func<!s32i ()>> loc(#loc215)
    %34 = cir.call %33() : (!cir.ptr<!cir.func<!s32i ()>>) -> !s32i loc(#loc157)
    %35 = cir.cast(int_to_bool, %34 : !s32i), !cir.bool loc(#loc157)
    cir.brcond %35 ^bb7, ^bb8 loc(#loc216)
  ^bb7:  // pred: ^bb6
    cir.br ^bb9 loc(#loc160)
  ^bb8:  // pred: ^bb6
    cir.br ^bb9 loc(#loc156)
  ^bb9:  // 2 preds: ^bb7, ^bb8
    cir.br ^bb10 loc(#loc156)
  ^bb10:  // pred: ^bb9
    cir.return loc(#loc129)
  } loc(#loc206)
} loc(#loc)
#loc = loc("/home/ladisgin/git_proj/juliet-c/testcases/CWE401_Memory_Leak/s02/CWE401_Memory_Leak__strdup_char_12.c":0:0)
#loc1 = loc("CWE401_Memory_Leak__strdup_char_12.c":73:13)
#loc2 = loc("CWE401_Memory_Leak__strdup_char_12.c":73:31)
#loc3 = loc("CWE401_Memory_Leak__strdup_char_12.c":31:13)
#loc4 = loc("CWE401_Memory_Leak__strdup_char_12.c":31:31)
#loc5 = loc("../../../testcasesupport/std_testcase_io.h":52:1)
#loc6 = loc("../../../testcasesupport/std_testcase_io.h":52:30)
#loc7 = loc("/usr/include/string.h":187:1)
#loc8 = loc("/usr/include/string.h":188:35)
#loc9 = loc("../../../testcasesupport/std_testcase_io.h":14:1)
#loc10 = loc("../../../testcasesupport/std_testcase_io.h":14:33)
#loc11 = loc("/usr/include/string.h":141:1)
#loc12 = loc("/usr/include/string.h":142:14)
#loc13 = loc("CWE401_Memory_Leak__strdup_char_12.c":43:22)
#loc14 = loc("/usr/include/stdlib.h":687:1)
#loc15 = loc("/usr/include/stdlib.h":687:32)
#loc16 = loc("CWE401_Memory_Leak__strdup_char_12.c":24:1)
#loc17 = loc("CWE401_Memory_Leak__strdup_char_12.c":57:1)
#loc18 = loc("CWE401_Memory_Leak__strdup_char_12.c":26:5)
#loc19 = loc("CWE401_Memory_Leak__strdup_char_12.c":26:12)
#loc20 = loc("CWE401_Memory_Leak__strdup_char_12.c":27:12)
#loc21 = loc("CWE401_Memory_Leak__strdup_char_12.c":27:5)
#loc22 = loc("CWE401_Memory_Leak__strdup_char_12.c":28:5)
#loc23 = loc("CWE401_Memory_Leak__strdup_char_12.c":45:5)
#loc24 = loc("CWE401_Memory_Leak__strdup_char_12.c":28:8)
#loc25 = loc("CWE401_Memory_Leak__strdup_char_12.c":28:33)
#loc26 = loc("CWE401_Memory_Leak__strdup_char_12.c":29:5)
#loc27 = loc("CWE401_Memory_Leak__strdup_char_12.c":37:5)
#loc28 = loc("CWE401_Memory_Leak__strdup_char_12.c":39:5)
#loc29 = loc("CWE401_Memory_Leak__strdup_char_12.c":30:9)
#loc30 = loc("CWE401_Memory_Leak__strdup_char_12.c":36:9)
#loc31 = loc("CWE401_Memory_Leak__strdup_char_12.c":33:20)
#loc32 = loc("CWE401_Memory_Leak__strdup_char_12.c":33:27)
#loc33 = loc("CWE401_Memory_Leak__strdup_char_12.c":33:13)
#loc34 = loc("CWE401_Memory_Leak__strdup_char_12.c":33:35)
#loc35 = loc("CWE401_Memory_Leak__strdup_char_12.c":35:23)
#loc36 = loc("CWE401_Memory_Leak__strdup_char_12.c":35:13)
#loc37 = loc("CWE401_Memory_Leak__strdup_char_12.c":41:24)
#loc38 = loc("CWE401_Memory_Leak__strdup_char_12.c":41:9)
#loc39 = loc("CWE401_Memory_Leak__strdup_char_12.c":43:9)
#loc40 = loc("CWE401_Memory_Leak__strdup_char_12.c":43:16)
#loc41 = loc("CWE401_Memory_Leak__strdup_char_12.c":44:19)
#loc42 = loc("CWE401_Memory_Leak__strdup_char_12.c":44:9)
#loc43 = loc("CWE401_Memory_Leak__strdup_char_12.c":46:5)
#loc44 = loc("CWE401_Memory_Leak__strdup_char_12.c":56:5)
#loc45 = loc("CWE401_Memory_Leak__strdup_char_12.c":46:8)
#loc46 = loc("CWE401_Memory_Leak__strdup_char_12.c":46:33)
#loc47 = loc("CWE401_Memory_Leak__strdup_char_12.c":47:5)
#loc48 = loc("CWE401_Memory_Leak__strdup_char_12.c":51:5)
#loc49 = loc("CWE401_Memory_Leak__strdup_char_12.c":53:5)
#loc50 = loc("CWE401_Memory_Leak__strdup_char_12.c":55:9)
#loc51 = loc("CWE401_Memory_Leak__strdup_char_12.c":55:14)
#loc52 = loc("CWE401_Memory_Leak__strdup_char_12.c":139:1)
#loc53 = loc("CWE401_Memory_Leak__strdup_char_12.c":143:1)
#loc54 = loc("CWE401_Memory_Leak__strdup_char_12.c":141:5)
#loc55 = loc("CWE401_Memory_Leak__strdup_char_12.c":141:13)
#loc56 = loc("CWE401_Memory_Leak__strdup_char_12.c":142:5)
#loc57 = loc("CWE401_Memory_Leak__strdup_char_12.c":142:13)
#loc58 = loc("/usr/include/stdlib.h":575:1)
#loc59 = loc("/usr/include/stdlib.h":575:41)
#loc60 = loc("/usr/include/time.h":76:1)
#loc61 = loc("/usr/include/time.h":76:38)
#loc62 = loc("CWE401_Memory_Leak__strdup_char_12.c":159:15)
#loc63 = loc("CWE401_Memory_Leak__strdup_char_12.c":161:15)
#loc64 = loc("CWE401_Memory_Leak__strdup_char_12.c":164:15)
#loc65 = loc("CWE401_Memory_Leak__strdup_char_12.c":166:15)
#loc66 = loc("CWE401_Memory_Leak__strdup_char_12.c":154:1)
#loc67 = loc("CWE401_Memory_Leak__strdup_char_12.c":169:1)
#loc72 = loc("CWE401_Memory_Leak__strdup_char_12.c":155:1)
#loc73 = loc("CWE401_Memory_Leak__strdup_char_12.c":157:27)
#loc74 = loc("CWE401_Memory_Leak__strdup_char_12.c":157:22)
#loc75 = loc("CWE401_Memory_Leak__strdup_char_12.c":157:5)
#loc76 = loc("CWE401_Memory_Leak__strdup_char_12.c":159:5)
#loc77 = loc("CWE401_Memory_Leak__strdup_char_12.c":160:5)
#loc78 = loc("CWE401_Memory_Leak__strdup_char_12.c":160:45)
#loc79 = loc("CWE401_Memory_Leak__strdup_char_12.c":161:5)
#loc80 = loc("CWE401_Memory_Leak__strdup_char_12.c":164:5)
#loc81 = loc("CWE401_Memory_Leak__strdup_char_12.c":165:5)
#loc82 = loc("CWE401_Memory_Leak__strdup_char_12.c":165:44)
#loc83 = loc("CWE401_Memory_Leak__strdup_char_12.c":166:5)
#loc84 = loc("CWE401_Memory_Leak__strdup_char_12.c":168:12)
#loc85 = loc("CWE401_Memory_Leak__strdup_char_12.c":168:5)
#loc86 = loc("CWE401_Memory_Leak__strdup_char_12.c":66:1)
#loc87 = loc("CWE401_Memory_Leak__strdup_char_12.c":100:1)
#loc88 = loc("CWE401_Memory_Leak__strdup_char_12.c":83:13)
#loc89 = loc("CWE401_Memory_Leak__strdup_char_12.c":83:31)
#loc90 = loc("CWE401_Memory_Leak__strdup_char_12.c":68:5)
#loc91 = loc("CWE401_Memory_Leak__strdup_char_12.c":68:12)
#loc92 = loc("CWE401_Memory_Leak__strdup_char_12.c":69:12)
#loc93 = loc("CWE401_Memory_Leak__strdup_char_12.c":69:5)
#loc94 = loc("CWE401_Memory_Leak__strdup_char_12.c":70:5)
#loc95 = loc("CWE401_Memory_Leak__strdup_char_12.c":89:5)
#loc96 = loc("CWE401_Memory_Leak__strdup_char_12.c":70:8)
#loc97 = loc("CWE401_Memory_Leak__strdup_char_12.c":70:33)
#loc98 = loc("CWE401_Memory_Leak__strdup_char_12.c":71:5)
#loc99 = loc("CWE401_Memory_Leak__strdup_char_12.c":79:5)
#loc100 = loc("CWE401_Memory_Leak__strdup_char_12.c":81:5)
#loc101 = loc("CWE401_Memory_Leak__strdup_char_12.c":72:9)
#loc102 = loc("CWE401_Memory_Leak__strdup_char_12.c":78:9)
#loc103 = loc("CWE401_Memory_Leak__strdup_char_12.c":75:20)
#loc104 = loc("CWE401_Memory_Leak__strdup_char_12.c":75:27)
#loc105 = loc("CWE401_Memory_Leak__strdup_char_12.c":75:13)
#loc106 = loc("CWE401_Memory_Leak__strdup_char_12.c":75:35)
#loc107 = loc("CWE401_Memory_Leak__strdup_char_12.c":77:23)
#loc108 = loc("CWE401_Memory_Leak__strdup_char_12.c":77:13)
#loc109 = loc("CWE401_Memory_Leak__strdup_char_12.c":82:9)
#loc110 = loc("CWE401_Memory_Leak__strdup_char_12.c":88:9)
#loc111 = loc("CWE401_Memory_Leak__strdup_char_12.c":85:20)
#loc112 = loc("CWE401_Memory_Leak__strdup_char_12.c":85:27)
#loc113 = loc("CWE401_Memory_Leak__strdup_char_12.c":85:13)
#loc114 = loc("CWE401_Memory_Leak__strdup_char_12.c":85:35)
#loc115 = loc("CWE401_Memory_Leak__strdup_char_12.c":87:23)
#loc116 = loc("CWE401_Memory_Leak__strdup_char_12.c":87:13)
#loc117 = loc("CWE401_Memory_Leak__strdup_char_12.c":90:5)
#loc118 = loc("CWE401_Memory_Leak__strdup_char_12.c":99:5)
#loc119 = loc("CWE401_Memory_Leak__strdup_char_12.c":90:8)
#loc120 = loc("CWE401_Memory_Leak__strdup_char_12.c":90:33)
#loc121 = loc("CWE401_Memory_Leak__strdup_char_12.c":91:5)
#loc122 = loc("CWE401_Memory_Leak__strdup_char_12.c":94:5)
#loc123 = loc("CWE401_Memory_Leak__strdup_char_12.c":96:5)
#loc124 = loc("CWE401_Memory_Leak__strdup_char_12.c":93:9)
#loc125 = loc("CWE401_Memory_Leak__strdup_char_12.c":93:14)
#loc126 = loc("CWE401_Memory_Leak__strdup_char_12.c":98:9)
#loc127 = loc("CWE401_Memory_Leak__strdup_char_12.c":98:14)
#loc128 = loc("CWE401_Memory_Leak__strdup_char_12.c":105:1)
#loc129 = loc("CWE401_Memory_Leak__strdup_char_12.c":137:1)
#loc130 = loc("CWE401_Memory_Leak__strdup_char_12.c":107:5)
#loc131 = loc("CWE401_Memory_Leak__strdup_char_12.c":107:12)
#loc132 = loc("CWE401_Memory_Leak__strdup_char_12.c":108:12)
#loc133 = loc("CWE401_Memory_Leak__strdup_char_12.c":108:5)
#loc134 = loc("CWE401_Memory_Leak__strdup_char_12.c":109:5)
#loc135 = loc("CWE401_Memory_Leak__strdup_char_12.c":124:5)
#loc136 = loc("CWE401_Memory_Leak__strdup_char_12.c":109:8)
#loc137 = loc("CWE401_Memory_Leak__strdup_char_12.c":109:33)
#loc138 = loc("CWE401_Memory_Leak__strdup_char_12.c":110:5)
#loc139 = loc("CWE401_Memory_Leak__strdup_char_12.c":116:5)
#loc140 = loc("CWE401_Memory_Leak__strdup_char_12.c":118:5)
#loc141 = loc("CWE401_Memory_Leak__strdup_char_12.c":112:24)
#loc142 = loc("CWE401_Memory_Leak__strdup_char_12.c":112:9)
#loc143 = loc("CWE401_Memory_Leak__strdup_char_12.c":114:9)
#loc144 = loc("CWE401_Memory_Leak__strdup_char_12.c":114:16)
#loc145 = loc("CWE401_Memory_Leak__strdup_char_12.c":114:22)
#loc146 = loc("CWE401_Memory_Leak__strdup_char_12.c":115:19)
#loc147 = loc("CWE401_Memory_Leak__strdup_char_12.c":115:9)
#loc148 = loc("CWE401_Memory_Leak__strdup_char_12.c":120:24)
#loc149 = loc("CWE401_Memory_Leak__strdup_char_12.c":120:9)
#loc150 = loc("CWE401_Memory_Leak__strdup_char_12.c":122:9)
#loc151 = loc("CWE401_Memory_Leak__strdup_char_12.c":122:16)
#loc152 = loc("CWE401_Memory_Leak__strdup_char_12.c":122:22)
#loc153 = loc("CWE401_Memory_Leak__strdup_char_12.c":123:19)
#loc154 = loc("CWE401_Memory_Leak__strdup_char_12.c":123:9)
#loc155 = loc("CWE401_Memory_Leak__strdup_char_12.c":125:5)
#loc156 = loc("CWE401_Memory_Leak__strdup_char_12.c":136:5)
#loc157 = loc("CWE401_Memory_Leak__strdup_char_12.c":125:8)
#loc158 = loc("CWE401_Memory_Leak__strdup_char_12.c":125:33)
#loc159 = loc("CWE401_Memory_Leak__strdup_char_12.c":126:5)
#loc160 = loc("CWE401_Memory_Leak__strdup_char_12.c":130:5)
#loc161 = loc("CWE401_Memory_Leak__strdup_char_12.c":132:5)
#loc162 = loc(fused[#loc1, #loc2])
#loc163 = loc(fused[#loc3, #loc4])
#loc164 = loc(fused[#loc5, #loc6])
#loc165 = loc(fused[#loc7, #loc8])
#loc166 = loc(fused[#loc9, #loc10])
#loc167 = loc(fused[#loc11, #loc12])
#loc168 = loc(fused[#loc14, #loc15])
#loc169 = loc(fused[#loc16, #loc17])
#loc170 = loc(fused[#loc18, #loc19])
#loc171 = loc(fused[#loc21, #loc20])
#loc172 = loc(fused[#loc22, #loc23])
#loc173 = loc(fused[#loc24, #loc25])
#loc174 = loc(fused[#loc26, #loc27, #loc28, #loc23])
#loc175 = loc(fused[#loc29, #loc30])
#loc176 = loc(fused[#loc33, #loc34])
#loc177 = loc(fused[#loc38, #loc37])
#loc178 = loc(fused[#loc43, #loc44])
#loc179 = loc(fused[#loc45, #loc46])
#loc180 = loc(fused[#loc47, #loc48, #loc49, #loc44])
#loc181 = loc(fused[#loc52, #loc53])
#loc182 = loc(fused[#loc54, #loc55])
#loc183 = loc(fused[#loc56, #loc57])
#loc184 = loc(fused[#loc58, #loc59])
#loc185 = loc(fused[#loc60, #loc61])
#loc186 = loc(fused[#loc66, #loc67])
#loc189 = loc(fused[#loc77, #loc78])
#loc190 = loc(fused[#loc81, #loc82])
#loc191 = loc(fused[#loc85, #loc84])
#loc192 = loc(fused[#loc86, #loc87])
#loc193 = loc(fused[#loc88, #loc89])
#loc194 = loc(fused[#loc90, #loc91])
#loc195 = loc(fused[#loc93, #loc92])
#loc196 = loc(fused[#loc94, #loc95])
#loc197 = loc(fused[#loc96, #loc97])
#loc198 = loc(fused[#loc98, #loc99, #loc100, #loc95])
#loc199 = loc(fused[#loc101, #loc102])
#loc200 = loc(fused[#loc105, #loc106])
#loc201 = loc(fused[#loc109, #loc110])
#loc202 = loc(fused[#loc113, #loc114])
#loc203 = loc(fused[#loc117, #loc118])
#loc204 = loc(fused[#loc119, #loc120])
#loc205 = loc(fused[#loc121, #loc122, #loc123, #loc118])
#loc206 = loc(fused[#loc128, #loc129])
#loc207 = loc(fused[#loc130, #loc131])
#loc208 = loc(fused[#loc133, #loc132])
#loc209 = loc(fused[#loc134, #loc135])
#loc210 = loc(fused[#loc136, #loc137])
#loc211 = loc(fused[#loc138, #loc139, #loc140, #loc135])
#loc212 = loc(fused[#loc142, #loc141])
#loc213 = loc(fused[#loc149, #loc148])
#loc214 = loc(fused[#loc155, #loc156])
#loc215 = loc(fused[#loc157, #loc158])
#loc216 = loc(fused[#loc159, #loc160, #loc161, #loc156])
