!s32i = !cir.int<s, 32>
!s8i = !cir.int<s, 8>
!ty_std3A3A_Vector_base3Cfloat2C_std3A3Aallocator3Cfloat3E3E3A3A_Vector_impl_data = !cir.struct<struct "std::_Vector_base<float, std::allocator<float>>::_Vector_impl_data" {!cir.ptr<!cir.float>, !cir.ptr<!cir.float>, !cir.ptr<!cir.float>} #cir.record.decl.ast>
!u64i = !cir.int<u, 64>
#fn_attr = #cir<extra({inline = #cir.inline<no>, nothrow = #cir.nothrow, optnone = #cir.optnone})>
#fn_attr1 = #cir<extra({inline = #cir.inline<no>, optnone = #cir.optnone})>
#fn_attr2 = #cir<extra({nothrow = #cir.nothrow})>
#loc3 = loc("/usr/lib/gcc/x86_64-redhat-linux/14/../../../../include/c++/14/bits/stl_vector.h":1128:7)
#loc4 = loc("/usr/lib/gcc/x86_64-redhat-linux/14/../../../../include/c++/14/bits/stl_vector.h":1128:18)
#loc5 = loc("/usr/lib/gcc/x86_64-redhat-linux/14/../../../../include/c++/14/bits/stl_vector.h":1128:28)
#loc19 = loc("CWE369_Divide_by_Zero__float_rand_72b.cpp":30:14)
#loc20 = loc("CWE369_Divide_by_Zero__float_rand_72b.cpp":30:28)
#loc36 = loc("CWE369_Divide_by_Zero__float_rand_72b.cpp":46:18)
#loc37 = loc("CWE369_Divide_by_Zero__float_rand_72b.cpp":46:32)
#loc53 = loc("/usr/lib/gcc/x86_64-redhat-linux/14/../../../../include/c++/14/cmath":238:8)
#loc54 = loc("/usr/lib/gcc/x86_64-redhat-linux/14/../../../../include/c++/14/cmath":238:14)
#loc64 = loc("CWE369_Divide_by_Zero__float_rand_72b.cpp":57:18)
#loc65 = loc("CWE369_Divide_by_Zero__float_rand_72b.cpp":57:32)
!ty_std3A3A_Vector_base3Cfloat2C_std3A3Aallocator3Cfloat3E3E3A3A_Vector_impl = !cir.struct<struct "std::_Vector_base<float, std::allocator<float>>::_Vector_impl" {!ty_std3A3A_Vector_base3Cfloat2C_std3A3Aallocator3Cfloat3E3E3A3A_Vector_impl_data} #cir.record.decl.ast>
#loc87 = loc(fused[#loc4, #loc5])
#loc91 = loc(fused[#loc19, #loc20])
#loc97 = loc(fused[#loc36, #loc37])
#loc103 = loc(fused[#loc53, #loc54])
#loc107 = loc(fused[#loc64, #loc65])
!ty_std3A3A_Vector_base3Cfloat2C_std3A3Aallocator3Cfloat3E3E = !cir.struct<struct "std::_Vector_base<float, std::allocator<float>>" {!ty_std3A3A_Vector_base3Cfloat2C_std3A3Aallocator3Cfloat3E3E3A3A_Vector_impl} #cir.record.decl.ast>
!ty_std3A3Avector3Cfloat2C_std3A3Aallocator3Cfloat3E3E = !cir.struct<class "std::vector<float, std::allocator<float>>" {!ty_std3A3A_Vector_base3Cfloat2C_std3A3Aallocator3Cfloat3E3E}>
module @"/home/ladisgin/git_proj/test_projects/juliet-c/testcases/CWE369_Divide_by_Zero/s01/CWE369_Divide_by_Zero__float_rand_72b.cpp" attributes {cir.lang = #cir.lang<cxx>, cir.sob = #cir.signed_overflow_behavior<undefined>, cir.triple = "x86_64-unknown-linux-gnu", dlti.dl_spec = #dlti.dl_spec<#dlti.dl_entry<!llvm.ptr, dense<64> : vector<4xi64>>, #dlti.dl_entry<i1, dense<8> : vector<2xi64>>, #dlti.dl_entry<i16, dense<16> : vector<2xi64>>, #dlti.dl_entry<i8, dense<8> : vector<2xi64>>, #dlti.dl_entry<i32, dense<32> : vector<2xi64>>, #dlti.dl_entry<f16, dense<16> : vector<2xi64>>, #dlti.dl_entry<f128, dense<128> : vector<2xi64>>, #dlti.dl_entry<!llvm.ptr<270>, dense<32> : vector<4xi64>>, #dlti.dl_entry<f64, dense<64> : vector<2xi64>>, #dlti.dl_entry<!llvm.ptr<271>, dense<32> : vector<4xi64>>, #dlti.dl_entry<!llvm.ptr<272>, dense<64> : vector<4xi64>>, #dlti.dl_entry<i64, dense<64> : vector<2xi64>>, #dlti.dl_entry<i128, dense<128> : vector<2xi64>>, #dlti.dl_entry<f80, dense<128> : vector<2xi64>>, #dlti.dl_entry<"dlti.stack_alignment", 128 : i64>, #dlti.dl_entry<"dlti.endianness", "little">>, llvm.data_layout = "e-m:e-p270:32:32-p271:32:32-p272:64:64-i64:64-i128:128-f80:128-n8:16:32:64-S128"} {
  cir.func linkonce_odr  @_ZNSt6vectorIfSaIfEEixEm(%arg0: !cir.ptr<!ty_std3A3Avector3Cfloat2C_std3A3Aallocator3Cfloat3E3E> loc("/usr/lib/gcc/x86_64-redhat-linux/14/../../../../include/c++/14/bits/stl_vector.h":1128:7), %arg1: !u64i loc(fused[#loc4, #loc5])) -> !cir.ptr<!cir.float> extra(#fn_attr) {
    %0 = cir.alloca !cir.ptr<!ty_std3A3Avector3Cfloat2C_std3A3Aallocator3Cfloat3E3E>, !cir.ptr<!cir.ptr<!ty_std3A3Avector3Cfloat2C_std3A3Aallocator3Cfloat3E3E>>, ["this", init] {alignment = 8 : i64} loc(#loc3)
    %1 = cir.alloca !u64i, !cir.ptr<!u64i>, ["__n", init] {alignment = 8 : i64} loc(#loc87)
    %2 = cir.alloca !cir.ptr<!cir.float>, !cir.ptr<!cir.ptr<!cir.float>>, ["__retval"] {alignment = 8 : i64} loc(#loc2)
    cir.store %arg0, %0 : !cir.ptr<!ty_std3A3Avector3Cfloat2C_std3A3Aallocator3Cfloat3E3E>, !cir.ptr<!cir.ptr<!ty_std3A3Avector3Cfloat2C_std3A3Aallocator3Cfloat3E3E>> loc(#loc6)
    cir.store %arg1, %1 : !u64i, !cir.ptr<!u64i> loc(#loc6)
    %3 = cir.load %0 : !cir.ptr<!cir.ptr<!ty_std3A3Avector3Cfloat2C_std3A3Aallocator3Cfloat3E3E>>, !cir.ptr<!ty_std3A3Avector3Cfloat2C_std3A3Aallocator3Cfloat3E3E> loc(#loc3)
    %4 = cir.base_class_addr(%3 : !cir.ptr<!ty_std3A3Avector3Cfloat2C_std3A3Aallocator3Cfloat3E3E> nonnull) [0] -> !cir.ptr<!ty_std3A3A_Vector_base3Cfloat2C_std3A3Aallocator3Cfloat3E3E> loc(#loc7)
    %5 = cir.get_member %4[0] {name = "_M_impl"} : !cir.ptr<!ty_std3A3A_Vector_base3Cfloat2C_std3A3Aallocator3Cfloat3E3E> -> !cir.ptr<!ty_std3A3A_Vector_base3Cfloat2C_std3A3Aallocator3Cfloat3E3E3A3A_Vector_impl> loc(#loc8)
    %6 = cir.base_class_addr(%5 : !cir.ptr<!ty_std3A3A_Vector_base3Cfloat2C_std3A3Aallocator3Cfloat3E3E3A3A_Vector_impl> nonnull) [0] -> !cir.ptr<!ty_std3A3A_Vector_base3Cfloat2C_std3A3Aallocator3Cfloat3E3E3A3A_Vector_impl_data> loc(#loc7)
    %7 = cir.get_member %6[0] {name = "_M_start"} : !cir.ptr<!ty_std3A3A_Vector_base3Cfloat2C_std3A3Aallocator3Cfloat3E3E3A3A_Vector_impl_data> -> !cir.ptr<!cir.ptr<!cir.float>> loc(#loc9)
    %8 = cir.load %7 : !cir.ptr<!cir.ptr<!cir.float>>, !cir.ptr<!cir.float> loc(#loc10)
    %9 = cir.load %1 : !cir.ptr<!u64i>, !u64i loc(#loc11)
    %10 = cir.ptr_stride(%8 : !cir.ptr<!cir.float>, %9 : !u64i), !cir.ptr<!cir.float> loc(#loc12)
    cir.store %10, %2 : !cir.ptr<!cir.float>, !cir.ptr<!cir.ptr<!cir.float>> loc(#loc88)
    %11 = cir.load %2 : !cir.ptr<!cir.ptr<!cir.float>>, !cir.ptr<!cir.float> loc(#loc88)
    cir.return %11 : !cir.ptr<!cir.float> loc(#loc88)
  } loc(#loc86)
  cir.func private  @printIntLine(!s32i) loc(#loc89)
  cir.func  @_ZN36CWE369_Divide_by_Zero__float_rand_727badSinkESt6vectorIfSaIfEE(%arg0: !ty_std3A3Avector3Cfloat2C_std3A3Aallocator3Cfloat3E3E loc(fused[#loc19, #loc20])) extra(#fn_attr1) {
    %0 = cir.alloca !ty_std3A3Avector3Cfloat2C_std3A3Aallocator3Cfloat3E3E, !cir.ptr<!ty_std3A3Avector3Cfloat2C_std3A3Aallocator3Cfloat3E3E>, ["dataVector", init] {alignment = 8 : i64} loc(#loc91)
    %1 = cir.alloca !cir.float, !cir.ptr<!cir.float>, ["data", init] {alignment = 4 : i64} loc(#loc92)
    cir.store %arg0, %0 : !ty_std3A3Avector3Cfloat2C_std3A3Aallocator3Cfloat3E3E, !cir.ptr<!ty_std3A3Avector3Cfloat2C_std3A3Aallocator3Cfloat3E3E> loc(#loc23)
    %2 = cir.const #cir.int<2> : !s32i loc(#loc24)
    %3 = cir.cast(integral, %2 : !s32i), !u64i loc(#loc24)
    %4 = cir.call @_ZNSt6vectorIfSaIfEEixEm(%0, %3) : (!cir.ptr<!ty_std3A3Avector3Cfloat2C_std3A3Aallocator3Cfloat3E3E>, !u64i) -> !cir.ptr<!cir.float> extra(#fn_attr2) loc(#loc25)
    %5 = cir.load %4 : !cir.ptr<!cir.float>, !cir.float loc(#loc25)
    cir.store %5, %1 : !cir.float, !cir.ptr<!cir.float> loc(#loc92)
    cir.scope {
      %6 = cir.alloca !s32i, !cir.ptr<!s32i>, ["result", init] {alignment = 4 : i64} loc(#loc94)
      %7 = cir.const #cir.fp<1.000000e+02> : !cir.double loc(#loc30)
      %8 = cir.load %1 : !cir.ptr<!cir.float>, !cir.float loc(#loc31)
      %9 = cir.cast(floating, %8 : !cir.float), !cir.double loc(#loc31)
      %10 = cir.binop(div, %7, %9) : !cir.double loc(#loc95)
      %11 = cir.cast(float_to_int, %10 : !cir.double), !s32i loc(#loc95)
      cir.store %11, %6 : !s32i, !cir.ptr<!s32i> loc(#loc94)
      %12 = cir.load %6 : !cir.ptr<!s32i>, !s32i loc(#loc32)
      cir.call @printIntLine(%12) : (!s32i) -> () loc(#loc33)
    } loc(#loc93)
    cir.return loc(#loc18)
  } loc(#loc90)
  cir.func  @_ZN36CWE369_Divide_by_Zero__float_rand_7211goodG2BSinkESt6vectorIfSaIfEE(%arg0: !ty_std3A3Avector3Cfloat2C_std3A3Aallocator3Cfloat3E3E loc(fused[#loc36, #loc37])) extra(#fn_attr1) {
    %0 = cir.alloca !ty_std3A3Avector3Cfloat2C_std3A3Aallocator3Cfloat3E3E, !cir.ptr<!ty_std3A3Avector3Cfloat2C_std3A3Aallocator3Cfloat3E3E>, ["dataVector", init] {alignment = 8 : i64} loc(#loc97)
    %1 = cir.alloca !cir.float, !cir.ptr<!cir.float>, ["data", init] {alignment = 4 : i64} loc(#loc98)
    cir.store %arg0, %0 : !ty_std3A3Avector3Cfloat2C_std3A3Aallocator3Cfloat3E3E, !cir.ptr<!ty_std3A3Avector3Cfloat2C_std3A3Aallocator3Cfloat3E3E> loc(#loc40)
    %2 = cir.const #cir.int<2> : !s32i loc(#loc41)
    %3 = cir.cast(integral, %2 : !s32i), !u64i loc(#loc41)
    %4 = cir.call @_ZNSt6vectorIfSaIfEEixEm(%0, %3) : (!cir.ptr<!ty_std3A3Avector3Cfloat2C_std3A3Aallocator3Cfloat3E3E>, !u64i) -> !cir.ptr<!cir.float> extra(#fn_attr2) loc(#loc42)
    %5 = cir.load %4 : !cir.ptr<!cir.float>, !cir.float loc(#loc42)
    cir.store %5, %1 : !cir.float, !cir.ptr<!cir.float> loc(#loc98)
    cir.scope {
      %6 = cir.alloca !s32i, !cir.ptr<!s32i>, ["result", init] {alignment = 4 : i64} loc(#loc100)
      %7 = cir.const #cir.fp<1.000000e+02> : !cir.double loc(#loc47)
      %8 = cir.load %1 : !cir.ptr<!cir.float>, !cir.float loc(#loc48)
      %9 = cir.cast(floating, %8 : !cir.float), !cir.double loc(#loc48)
      %10 = cir.binop(div, %7, %9) : !cir.double loc(#loc101)
      %11 = cir.cast(float_to_int, %10 : !cir.double), !s32i loc(#loc101)
      cir.store %11, %6 : !s32i, !cir.ptr<!s32i> loc(#loc100)
      %12 = cir.load %6 : !cir.ptr<!s32i>, !s32i loc(#loc49)
      cir.call @printIntLine(%12) : (!s32i) -> () loc(#loc50)
    } loc(#loc99)
    cir.return loc(#loc35)
  } loc(#loc96)
  cir.func linkonce_odr  @_ZSt4fabsf(%arg0: !cir.float loc(fused[#loc53, #loc54])) -> !cir.float extra(#fn_attr1) {
    %0 = cir.alloca !cir.float, !cir.ptr<!cir.float>, ["__x", init] {alignment = 4 : i64} loc(#loc103)
    %1 = cir.alloca !cir.float, !cir.ptr<!cir.float>, ["__retval"] {alignment = 4 : i64} loc(#loc52)
    cir.store %arg0, %0 : !cir.float, !cir.ptr<!cir.float> loc(#loc55)
    %2 = cir.load %0 : !cir.ptr<!cir.float>, !cir.float loc(#loc56)
    %3 = cir.fabs %2 : !cir.float loc(#loc56)
    cir.store %3, %1 : !cir.float, !cir.ptr<!cir.float> loc(#loc104)
    %4 = cir.load %1 : !cir.ptr<!cir.float>, !cir.float loc(#loc104)
    cir.return %4 : !cir.float loc(#loc104)
  } loc(#loc102)
  cir.func private  @printLine(!cir.ptr<!s8i>) loc(#loc105)
  cir.global "private"  constant internal dsolocal @".str" = #cir.const_array<"This would result in a divide by zero\00" : !cir.array<!s8i x 38>> : !cir.array<!s8i x 38> {alignment = 1 : i64} loc(#loc61)
  cir.func  @_ZN36CWE369_Divide_by_Zero__float_rand_7211goodB2GSinkESt6vectorIfSaIfEE(%arg0: !ty_std3A3Avector3Cfloat2C_std3A3Aallocator3Cfloat3E3E loc(fused[#loc64, #loc65])) extra(#fn_attr1) {
    %0 = cir.alloca !ty_std3A3Avector3Cfloat2C_std3A3Aallocator3Cfloat3E3E, !cir.ptr<!ty_std3A3Avector3Cfloat2C_std3A3Aallocator3Cfloat3E3E>, ["dataVector", init] {alignment = 8 : i64} loc(#loc107)
    %1 = cir.alloca !cir.float, !cir.ptr<!cir.float>, ["data", init] {alignment = 4 : i64} loc(#loc108)
    cir.store %arg0, %0 : !ty_std3A3Avector3Cfloat2C_std3A3Aallocator3Cfloat3E3E, !cir.ptr<!ty_std3A3Avector3Cfloat2C_std3A3Aallocator3Cfloat3E3E> loc(#loc68)
    %2 = cir.const #cir.int<2> : !s32i loc(#loc69)
    %3 = cir.cast(integral, %2 : !s32i), !u64i loc(#loc69)
    %4 = cir.call @_ZNSt6vectorIfSaIfEEixEm(%0, %3) : (!cir.ptr<!ty_std3A3Avector3Cfloat2C_std3A3Aallocator3Cfloat3E3E>, !u64i) -> !cir.ptr<!cir.float> extra(#fn_attr2) loc(#loc70)
    %5 = cir.load %4 : !cir.ptr<!cir.float>, !cir.float loc(#loc70)
    cir.store %5, %1 : !cir.float, !cir.ptr<!cir.float> loc(#loc108)
    cir.scope {
      %6 = cir.load %1 : !cir.ptr<!cir.float>, !cir.float loc(#loc73)
      %7 = cir.call @_ZSt4fabsf(%6) : (!cir.float) -> !cir.float loc(#loc74)
      %8 = cir.cast(floating, %7 : !cir.float), !cir.double loc(#loc74)
      %9 = cir.const #cir.fp<9.9999999999999995E-7> : !cir.double loc(#loc75)
      %10 = cir.cmp(gt, %8, %9) : !cir.double, !cir.bool loc(#loc110)
      cir.if %10 {
        %11 = cir.alloca !s32i, !cir.ptr<!s32i>, ["result", init] {alignment = 4 : i64} loc(#loc112)
        %12 = cir.const #cir.fp<1.000000e+02> : !cir.double loc(#loc81)
        %13 = cir.load %1 : !cir.ptr<!cir.float>, !cir.float loc(#loc82)
        %14 = cir.cast(floating, %13 : !cir.float), !cir.double loc(#loc82)
        %15 = cir.binop(div, %12, %14) : !cir.double loc(#loc113)
        %16 = cir.cast(float_to_int, %15 : !cir.double), !s32i loc(#loc113)
        cir.store %16, %11 : !s32i, !cir.ptr<!s32i> loc(#loc112)
        %17 = cir.load %11 : !cir.ptr<!s32i>, !s32i loc(#loc83)
        cir.call @printIntLine(%17) : (!s32i) -> () loc(#loc84)
      } else {
        %11 = cir.get_global @".str" : !cir.ptr<!cir.array<!s8i x 38>> loc(#loc61)
        %12 = cir.cast(array_to_ptrdecay, %11 : !cir.ptr<!cir.array<!s8i x 38>>), !cir.ptr<!s8i> loc(#loc61)
        cir.call @printLine(%12) : (!cir.ptr<!s8i>) -> () loc(#loc85)
      } loc(#loc111)
    } loc(#loc109)
    cir.return loc(#loc63)
  } loc(#loc106)
} loc(#loc)
#loc = loc("/home/ladisgin/git_proj/test_projects/juliet-c/testcases/CWE369_Divide_by_Zero/s01/CWE369_Divide_by_Zero__float_rand_72b.cpp":0:0)
#loc1 = loc("/usr/lib/gcc/x86_64-redhat-linux/14/../../../../include/c++/14/bits/stl_vector.h":1127:7)
#loc2 = loc("/usr/lib/gcc/x86_64-redhat-linux/14/../../../../include/c++/14/bits/stl_vector.h":1132:7)
#loc6 = loc("/usr/lib/gcc/x86_64-redhat-linux/14/../../../../include/c++/14/bits/stl_vector.h":1129:7)
#loc7 = loc("/usr/lib/gcc/x86_64-redhat-linux/14/../../../../include/c++/14/bits/stl_vector.h":1131:11)
#loc8 = loc("/usr/lib/gcc/x86_64-redhat-linux/14/../../../../include/c++/14/bits/stl_vector.h":373:20)
#loc9 = loc("/usr/lib/gcc/x86_64-redhat-linux/14/../../../../include/c++/14/bits/stl_vector.h":93:10)
#loc10 = loc("/usr/lib/gcc/x86_64-redhat-linux/14/../../../../include/c++/14/bits/stl_vector.h":1131:25)
#loc11 = loc("/usr/lib/gcc/x86_64-redhat-linux/14/../../../../include/c++/14/bits/stl_vector.h":1131:36)
#loc12 = loc("/usr/lib/gcc/x86_64-redhat-linux/14/../../../../include/c++/14/bits/stl_vector.h":1131:34)
#loc13 = loc("/usr/lib/gcc/x86_64-redhat-linux/14/../../../../include/c++/14/bits/stl_vector.h":1131:2)
#loc14 = loc("/usr/lib/gcc/x86_64-redhat-linux/14/../../../../include/c++/14/bits/stl_vector.h":1131:39)
#loc15 = loc("../../../testcasesupport/std_testcase_io.h":18:1)
#loc16 = loc("../../../testcasesupport/std_testcase_io.h":18:33)
#loc17 = loc("CWE369_Divide_by_Zero__float_rand_72b.cpp":30:1)
#loc18 = loc("CWE369_Divide_by_Zero__float_rand_72b.cpp":39:1)
#loc21 = loc("CWE369_Divide_by_Zero__float_rand_72b.cpp":33:5)
#loc22 = loc("CWE369_Divide_by_Zero__float_rand_72b.cpp":33:30)
#loc23 = loc("CWE369_Divide_by_Zero__float_rand_72b.cpp":31:1)
#loc24 = loc("CWE369_Divide_by_Zero__float_rand_72b.cpp":33:29)
#loc25 = loc("CWE369_Divide_by_Zero__float_rand_72b.cpp":33:18)
#loc26 = loc("CWE369_Divide_by_Zero__float_rand_72b.cpp":34:5)
#loc27 = loc("CWE369_Divide_by_Zero__float_rand_72b.cpp":38:5)
#loc28 = loc("CWE369_Divide_by_Zero__float_rand_72b.cpp":36:9)
#loc29 = loc("CWE369_Divide_by_Zero__float_rand_72b.cpp":36:40)
#loc30 = loc("CWE369_Divide_by_Zero__float_rand_72b.cpp":36:28)
#loc31 = loc("CWE369_Divide_by_Zero__float_rand_72b.cpp":36:36)
#loc32 = loc("CWE369_Divide_by_Zero__float_rand_72b.cpp":37:22)
#loc33 = loc("CWE369_Divide_by_Zero__float_rand_72b.cpp":37:9)
#loc34 = loc("CWE369_Divide_by_Zero__float_rand_72b.cpp":46:1)
#loc35 = loc("CWE369_Divide_by_Zero__float_rand_72b.cpp":54:1)
#loc38 = loc("CWE369_Divide_by_Zero__float_rand_72b.cpp":48:5)
#loc39 = loc("CWE369_Divide_by_Zero__float_rand_72b.cpp":48:30)
#loc40 = loc("CWE369_Divide_by_Zero__float_rand_72b.cpp":47:1)
#loc41 = loc("CWE369_Divide_by_Zero__float_rand_72b.cpp":48:29)
#loc42 = loc("CWE369_Divide_by_Zero__float_rand_72b.cpp":48:18)
#loc43 = loc("CWE369_Divide_by_Zero__float_rand_72b.cpp":49:5)
#loc44 = loc("CWE369_Divide_by_Zero__float_rand_72b.cpp":53:5)
#loc45 = loc("CWE369_Divide_by_Zero__float_rand_72b.cpp":51:9)
#loc46 = loc("CWE369_Divide_by_Zero__float_rand_72b.cpp":51:40)
#loc47 = loc("CWE369_Divide_by_Zero__float_rand_72b.cpp":51:28)
#loc48 = loc("CWE369_Divide_by_Zero__float_rand_72b.cpp":51:36)
#loc49 = loc("CWE369_Divide_by_Zero__float_rand_72b.cpp":52:22)
#loc50 = loc("CWE369_Divide_by_Zero__float_rand_72b.cpp":52:9)
#loc51 = loc("/usr/lib/gcc/x86_64-redhat-linux/14/../../../../include/c++/14/cmath":237:3)
#loc52 = loc("/usr/lib/gcc/x86_64-redhat-linux/14/../../../../include/c++/14/cmath":239:34)
#loc55 = loc("/usr/lib/gcc/x86_64-redhat-linux/14/../../../../include/c++/14/cmath":239:3)
#loc56 = loc("/usr/lib/gcc/x86_64-redhat-linux/14/../../../../include/c++/14/cmath":239:28)
#loc57 = loc("/usr/lib/gcc/x86_64-redhat-linux/14/../../../../include/c++/14/cmath":239:5)
#loc58 = loc("/usr/lib/gcc/x86_64-redhat-linux/14/../../../../include/c++/14/cmath":239:31)
#loc59 = loc("../../../testcasesupport/std_testcase_io.h":14:1)
#loc60 = loc("../../../testcasesupport/std_testcase_io.h":14:33)
#loc61 = loc("CWE369_Divide_by_Zero__float_rand_72b.cpp":68:19)
#loc62 = loc("CWE369_Divide_by_Zero__float_rand_72b.cpp":57:1)
#loc63 = loc("CWE369_Divide_by_Zero__float_rand_72b.cpp":70:1)
#loc66 = loc("CWE369_Divide_by_Zero__float_rand_72b.cpp":59:5)
#loc67 = loc("CWE369_Divide_by_Zero__float_rand_72b.cpp":59:30)
#loc68 = loc("CWE369_Divide_by_Zero__float_rand_72b.cpp":58:1)
#loc69 = loc("CWE369_Divide_by_Zero__float_rand_72b.cpp":59:29)
#loc70 = loc("CWE369_Divide_by_Zero__float_rand_72b.cpp":59:18)
#loc71 = loc("CWE369_Divide_by_Zero__float_rand_72b.cpp":61:5)
#loc72 = loc("CWE369_Divide_by_Zero__float_rand_72b.cpp":69:5)
#loc73 = loc("CWE369_Divide_by_Zero__float_rand_72b.cpp":61:13)
#loc74 = loc("CWE369_Divide_by_Zero__float_rand_72b.cpp":61:8)
#loc75 = loc("CWE369_Divide_by_Zero__float_rand_72b.cpp":61:21)
#loc76 = loc("CWE369_Divide_by_Zero__float_rand_72b.cpp":62:5)
#loc77 = loc("CWE369_Divide_by_Zero__float_rand_72b.cpp":65:5)
#loc78 = loc("CWE369_Divide_by_Zero__float_rand_72b.cpp":67:5)
#loc79 = loc("CWE369_Divide_by_Zero__float_rand_72b.cpp":63:9)
#loc80 = loc("CWE369_Divide_by_Zero__float_rand_72b.cpp":63:40)
#loc81 = loc("CWE369_Divide_by_Zero__float_rand_72b.cpp":63:28)
#loc82 = loc("CWE369_Divide_by_Zero__float_rand_72b.cpp":63:36)
#loc83 = loc("CWE369_Divide_by_Zero__float_rand_72b.cpp":64:22)
#loc84 = loc("CWE369_Divide_by_Zero__float_rand_72b.cpp":64:9)
#loc85 = loc("CWE369_Divide_by_Zero__float_rand_72b.cpp":68:9)
#loc86 = loc(fused[#loc1, #loc2])
#loc88 = loc(fused[#loc13, #loc14])
#loc89 = loc(fused[#loc15, #loc16])
#loc90 = loc(fused[#loc17, #loc18])
#loc92 = loc(fused[#loc21, #loc22])
#loc93 = loc(fused[#loc26, #loc27])
#loc94 = loc(fused[#loc28, #loc29])
#loc95 = loc(fused[#loc30, #loc31])
#loc96 = loc(fused[#loc34, #loc35])
#loc98 = loc(fused[#loc38, #loc39])
#loc99 = loc(fused[#loc43, #loc44])
#loc100 = loc(fused[#loc45, #loc46])
#loc101 = loc(fused[#loc47, #loc48])
#loc102 = loc(fused[#loc51, #loc52])
#loc104 = loc(fused[#loc57, #loc58])
#loc105 = loc(fused[#loc59, #loc60])
#loc106 = loc(fused[#loc62, #loc63])
#loc108 = loc(fused[#loc66, #loc67])
#loc109 = loc(fused[#loc71, #loc72])
#loc110 = loc(fused[#loc74, #loc75])
#loc111 = loc(fused[#loc76, #loc77, #loc78, #loc72])
#loc112 = loc(fused[#loc79, #loc80])
#loc113 = loc(fused[#loc81, #loc82])
