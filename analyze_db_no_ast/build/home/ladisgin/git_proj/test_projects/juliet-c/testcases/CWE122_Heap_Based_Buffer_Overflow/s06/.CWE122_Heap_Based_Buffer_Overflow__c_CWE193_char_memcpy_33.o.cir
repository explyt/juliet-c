!s32i = !cir.int<s, 32>
!s8i = !cir.int<s, 8>
!u64i = !cir.int<u, 64>
!void = !cir.void
#fn_attr = #cir<extra({nothrow = #cir.nothrow})>
#fn_attr1 = #cir<extra({inline = #cir.inline<no>, optnone = #cir.optnone})>
module @"/home/ladisgin/git_proj/test_projects/juliet-c/testcases/CWE122_Heap_Based_Buffer_Overflow/s06/CWE122_Heap_Based_Buffer_Overflow__c_CWE193_char_memcpy_33.cpp" attributes {cir.lang = #cir.lang<cxx>, cir.sob = #cir.signed_overflow_behavior<undefined>, cir.triple = "x86_64-unknown-linux-gnu", dlti.dl_spec = #dlti.dl_spec<#dlti.dl_entry<i8, dense<8> : vector<2xi64>>, #dlti.dl_entry<i16, dense<16> : vector<2xi64>>, #dlti.dl_entry<!llvm.ptr, dense<64> : vector<4xi64>>, #dlti.dl_entry<i1, dense<8> : vector<2xi64>>, #dlti.dl_entry<f16, dense<16> : vector<2xi64>>, #dlti.dl_entry<f64, dense<64> : vector<2xi64>>, #dlti.dl_entry<f128, dense<128> : vector<2xi64>>, #dlti.dl_entry<!llvm.ptr<270>, dense<32> : vector<4xi64>>, #dlti.dl_entry<i32, dense<32> : vector<2xi64>>, #dlti.dl_entry<i64, dense<64> : vector<2xi64>>, #dlti.dl_entry<!llvm.ptr<271>, dense<32> : vector<4xi64>>, #dlti.dl_entry<!llvm.ptr<272>, dense<64> : vector<4xi64>>, #dlti.dl_entry<i128, dense<128> : vector<2xi64>>, #dlti.dl_entry<f80, dense<128> : vector<2xi64>>, #dlti.dl_entry<"dlti.endianness", "little">, #dlti.dl_entry<"dlti.stack_alignment", 128 : i64>>, llvm.data_layout = "e-m:e-p270:32:32-p271:32:32-p272:64:64-i64:64-i128:128-f80:128-n8:16:32:64-S128"} {
  cir.func private  @malloc(!u64i) -> !cir.ptr<!void> extra(#fn_attr) loc(#loc104)
  cir.func private  @exit(!s32i) extra(#fn_attr) loc(#loc105)
  cir.func private  @strlen(!cir.ptr<!s8i>) -> !u64i extra(#fn_attr) loc(#loc106)
  cir.func private  @printLine(!cir.ptr<!s8i>) loc(#loc107)
  cir.func private  @free(!cir.ptr<!void>) extra(#fn_attr) loc(#loc108)
  cir.func  @_ZN58CWE122_Heap_Based_Buffer_Overflow__c_CWE193_char_memcpy_333badEv() extra(#fn_attr1) {
    %0 = cir.alloca !cir.ptr<!s8i>, !cir.ptr<!cir.ptr<!s8i>>, ["data"] {alignment = 8 : i64} loc(#loc110)
    %1 = cir.alloca !cir.ptr<!cir.ptr<!s8i>>, !cir.ptr<!cir.ptr<!cir.ptr<!s8i>>>, ["dataRef", init, const] {alignment = 8 : i64} loc(#loc111)
    cir.store %0, %1 : !cir.ptr<!cir.ptr<!s8i>>, !cir.ptr<!cir.ptr<!cir.ptr<!s8i>>> loc(#loc16)
    %2 = cir.const #cir.ptr<null> : !cir.ptr<!s8i> loc(#loc17)
    cir.store %2, %0 : !cir.ptr<!s8i>, !cir.ptr<!cir.ptr<!s8i>> loc(#loc112)
    %3 = cir.get_global @malloc : !cir.ptr<!cir.func<!cir.ptr<!void> (!u64i)>> loc(#loc19)
    %4 = cir.const #cir.int<10> : !s32i loc(#loc20)
    %5 = cir.cast(integral, %4 : !s32i), !u64i loc(#loc20)
    %6 = cir.const #cir.int<1> : !u64i loc(#loc113)
    %7 = cir.binop(mul, %5, %6) : !u64i loc(#loc114)
    %8 = cir.call @malloc(%7) : (!u64i) -> !cir.ptr<!void> extra(#fn_attr) loc(#loc19)
    %9 = cir.cast(bitcast, %8 : !cir.ptr<!void>), !cir.ptr<!s8i> loc(#loc115)
    cir.store %9, %0 : !cir.ptr<!s8i>, !cir.ptr<!cir.ptr<!s8i>> loc(#loc116)
    cir.scope {
      %10 = cir.load %0 : !cir.ptr<!cir.ptr<!s8i>>, !cir.ptr<!s8i> loc(#loc27)
      %11 = cir.const #cir.ptr<null> : !cir.ptr<!s8i> loc(#loc28)
      %12 = cir.cmp(eq, %10, %11) : !cir.ptr<!s8i>, !cir.bool loc(#loc118)
      cir.if %12 {
        %13 = cir.get_global @exit : !cir.ptr<!cir.func<!void (!s32i)>> loc(#loc30)
        %14 = cir.const #cir.int<1> : !s32i loc(#loc31)
        %15 = cir.unary(minus, %14) : !s32i, !s32i loc(#loc32)
        cir.call @exit(%15) : (!s32i) -> () extra(#fn_attr) loc(#loc30)
      } loc(#loc119)
    } loc(#loc117)
    cir.scope {
      %10 = cir.alloca !cir.ptr<!s8i>, !cir.ptr<!cir.ptr<!s8i>>, ["data", init] {alignment = 8 : i64} loc(#loc121)
      %11 = cir.load %1 : !cir.ptr<!cir.ptr<!cir.ptr<!s8i>>>, !cir.ptr<!cir.ptr<!s8i>> loc(#loc36)
      %12 = cir.load %11 : !cir.ptr<!cir.ptr<!s8i>>, !cir.ptr<!s8i> loc(#loc36)
      cir.store %12, %10 : !cir.ptr<!s8i>, !cir.ptr<!cir.ptr<!s8i>> loc(#loc121)
      cir.scope {
        %13 = cir.alloca !cir.array<!s8i x 11>, !cir.ptr<!cir.array<!s8i x 11>>, ["source"] {alignment = 1 : i64} loc(#loc123)
        %14 = cir.const #cir.const_array<"AAAAAAAAAA\00" : !cir.array<!s8i x 11>> : !cir.array<!s8i x 11> loc(#loc123)
        cir.store %14, %13 : !cir.array<!s8i x 11>, !cir.ptr<!cir.array<!s8i x 11>> loc(#loc123)
        %15 = cir.load %10 : !cir.ptr<!cir.ptr<!s8i>>, !cir.ptr<!s8i> loc(#loc41)
        %16 = cir.cast(bitcast, %15 : !cir.ptr<!s8i>), !cir.ptr<!void> loc(#loc41)
        %17 = cir.cast(array_to_ptrdecay, %13 : !cir.ptr<!cir.array<!s8i x 11>>), !cir.ptr<!s8i> loc(#loc42)
        %18 = cir.cast(bitcast, %17 : !cir.ptr<!s8i>), !cir.ptr<!void> loc(#loc42)
        %19 = cir.get_global @strlen : !cir.ptr<!cir.func<!u64i (!cir.ptr<!s8i>)>> loc(#loc43)
        %20 = cir.cast(array_to_ptrdecay, %13 : !cir.ptr<!cir.array<!s8i x 11>>), !cir.ptr<!s8i> loc(#loc44)
        %21 = cir.call @strlen(%20) : (!cir.ptr<!s8i>) -> !u64i extra(#fn_attr) loc(#loc43)
        %22 = cir.const #cir.int<1> : !s32i loc(#loc45)
        %23 = cir.cast(integral, %22 : !s32i), !u64i loc(#loc45)
        %24 = cir.binop(add, %21, %23) : !u64i loc(#loc124)
        %25 = cir.const #cir.int<1> : !u64i loc(#loc125)
        %26 = cir.binop(mul, %24, %25) : !u64i loc(#loc126)
        cir.libc.memcpy %26 bytes from %18 to %16 : !u64i, !cir.ptr<!void> -> !cir.ptr<!void> loc(#loc127)
        %27 = cir.load %10 : !cir.ptr<!cir.ptr<!s8i>>, !cir.ptr<!s8i> loc(#loc51)
        cir.call @printLine(%27) : (!cir.ptr<!s8i>) -> () loc(#loc52)
        %28 = cir.get_global @free : !cir.ptr<!cir.func<!void (!cir.ptr<!void>)>> loc(#loc53)
        %29 = cir.load %10 : !cir.ptr<!cir.ptr<!s8i>>, !cir.ptr<!s8i> loc(#loc54)
        %30 = cir.cast(bitcast, %29 : !cir.ptr<!s8i>), !cir.ptr<!void> loc(#loc54)
        cir.call @free(%30) : (!cir.ptr<!void>) -> () extra(#fn_attr) loc(#loc53)
      } loc(#loc122)
    } loc(#loc120)
    cir.return loc(#loc12)
  } loc(#loc109)
  cir.func internal private  @_ZN58CWE122_Heap_Based_Buffer_Overflow__c_CWE193_char_memcpy_33L7goodG2BEv() extra(#fn_attr1) {
    %0 = cir.alloca !cir.ptr<!s8i>, !cir.ptr<!cir.ptr<!s8i>>, ["data"] {alignment = 8 : i64} loc(#loc129)
    %1 = cir.alloca !cir.ptr<!cir.ptr<!s8i>>, !cir.ptr<!cir.ptr<!cir.ptr<!s8i>>>, ["dataRef", init, const] {alignment = 8 : i64} loc(#loc130)
    cir.store %0, %1 : !cir.ptr<!cir.ptr<!s8i>>, !cir.ptr<!cir.ptr<!cir.ptr<!s8i>>> loc(#loc60)
    %2 = cir.const #cir.ptr<null> : !cir.ptr<!s8i> loc(#loc61)
    cir.store %2, %0 : !cir.ptr<!s8i>, !cir.ptr<!cir.ptr<!s8i>> loc(#loc131)
    %3 = cir.get_global @malloc : !cir.ptr<!cir.func<!cir.ptr<!void> (!u64i)>> loc(#loc63)
    %4 = cir.const #cir.int<10> : !s32i loc(#loc64)
    %5 = cir.const #cir.int<1> : !s32i loc(#loc65)
    %6 = cir.binop(add, %4, %5) nsw : !s32i loc(#loc64)
    %7 = cir.cast(integral, %6 : !s32i), !u64i loc(#loc64)
    %8 = cir.const #cir.int<1> : !u64i loc(#loc132)
    %9 = cir.binop(mul, %7, %8) : !u64i loc(#loc133)
    %10 = cir.call @malloc(%9) : (!u64i) -> !cir.ptr<!void> extra(#fn_attr) loc(#loc63)
    %11 = cir.cast(bitcast, %10 : !cir.ptr<!void>), !cir.ptr<!s8i> loc(#loc134)
    cir.store %11, %0 : !cir.ptr<!s8i>, !cir.ptr<!cir.ptr<!s8i>> loc(#loc135)
    cir.scope {
      %12 = cir.load %0 : !cir.ptr<!cir.ptr<!s8i>>, !cir.ptr<!s8i> loc(#loc73)
      %13 = cir.const #cir.ptr<null> : !cir.ptr<!s8i> loc(#loc74)
      %14 = cir.cmp(eq, %12, %13) : !cir.ptr<!s8i>, !cir.bool loc(#loc137)
      cir.if %14 {
        %15 = cir.get_global @exit : !cir.ptr<!cir.func<!void (!s32i)>> loc(#loc76)
        %16 = cir.const #cir.int<1> : !s32i loc(#loc77)
        %17 = cir.unary(minus, %16) : !s32i, !s32i loc(#loc78)
        cir.call @exit(%17) : (!s32i) -> () extra(#fn_attr) loc(#loc76)
      } loc(#loc138)
    } loc(#loc136)
    cir.scope {
      %12 = cir.alloca !cir.ptr<!s8i>, !cir.ptr<!cir.ptr<!s8i>>, ["data", init] {alignment = 8 : i64} loc(#loc140)
      %13 = cir.load %1 : !cir.ptr<!cir.ptr<!cir.ptr<!s8i>>>, !cir.ptr<!cir.ptr<!s8i>> loc(#loc82)
      %14 = cir.load %13 : !cir.ptr<!cir.ptr<!s8i>>, !cir.ptr<!s8i> loc(#loc82)
      cir.store %14, %12 : !cir.ptr<!s8i>, !cir.ptr<!cir.ptr<!s8i>> loc(#loc140)
      cir.scope {
        %15 = cir.alloca !cir.array<!s8i x 11>, !cir.ptr<!cir.array<!s8i x 11>>, ["source"] {alignment = 1 : i64} loc(#loc142)
        %16 = cir.const #cir.const_array<"AAAAAAAAAA\00" : !cir.array<!s8i x 11>> : !cir.array<!s8i x 11> loc(#loc142)
        cir.store %16, %15 : !cir.array<!s8i x 11>, !cir.ptr<!cir.array<!s8i x 11>> loc(#loc142)
        %17 = cir.load %12 : !cir.ptr<!cir.ptr<!s8i>>, !cir.ptr<!s8i> loc(#loc87)
        %18 = cir.cast(bitcast, %17 : !cir.ptr<!s8i>), !cir.ptr<!void> loc(#loc87)
        %19 = cir.cast(array_to_ptrdecay, %15 : !cir.ptr<!cir.array<!s8i x 11>>), !cir.ptr<!s8i> loc(#loc88)
        %20 = cir.cast(bitcast, %19 : !cir.ptr<!s8i>), !cir.ptr<!void> loc(#loc88)
        %21 = cir.get_global @strlen : !cir.ptr<!cir.func<!u64i (!cir.ptr<!s8i>)>> loc(#loc89)
        %22 = cir.cast(array_to_ptrdecay, %15 : !cir.ptr<!cir.array<!s8i x 11>>), !cir.ptr<!s8i> loc(#loc90)
        %23 = cir.call @strlen(%22) : (!cir.ptr<!s8i>) -> !u64i extra(#fn_attr) loc(#loc89)
        %24 = cir.const #cir.int<1> : !s32i loc(#loc91)
        %25 = cir.cast(integral, %24 : !s32i), !u64i loc(#loc91)
        %26 = cir.binop(add, %23, %25) : !u64i loc(#loc143)
        %27 = cir.const #cir.int<1> : !u64i loc(#loc144)
        %28 = cir.binop(mul, %26, %27) : !u64i loc(#loc145)
        cir.libc.memcpy %28 bytes from %20 to %18 : !u64i, !cir.ptr<!void> -> !cir.ptr<!void> loc(#loc146)
        %29 = cir.load %12 : !cir.ptr<!cir.ptr<!s8i>>, !cir.ptr<!s8i> loc(#loc97)
        cir.call @printLine(%29) : (!cir.ptr<!s8i>) -> () loc(#loc98)
        %30 = cir.get_global @free : !cir.ptr<!cir.func<!void (!cir.ptr<!void>)>> loc(#loc99)
        %31 = cir.load %12 : !cir.ptr<!cir.ptr<!s8i>>, !cir.ptr<!s8i> loc(#loc100)
        %32 = cir.cast(bitcast, %31 : !cir.ptr<!s8i>), !cir.ptr<!void> loc(#loc100)
        cir.call @free(%32) : (!cir.ptr<!void>) -> () extra(#fn_attr) loc(#loc99)
      } loc(#loc141)
    } loc(#loc139)
    cir.return loc(#loc56)
  } loc(#loc128)
  cir.func  @_ZN58CWE122_Heap_Based_Buffer_Overflow__c_CWE193_char_memcpy_334goodEv() extra(#fn_attr1) {
    cir.call @_ZN58CWE122_Heap_Based_Buffer_Overflow__c_CWE193_char_memcpy_33L7goodG2BEv() : () -> () loc(#loc103)
    cir.return loc(#loc102)
  } loc(#loc147)
} loc(#loc)
#loc = loc("/home/ladisgin/git_proj/test_projects/juliet-c/testcases/CWE122_Heap_Based_Buffer_Overflow/s06/CWE122_Heap_Based_Buffer_Overflow__c_CWE193_char_memcpy_33.cpp":0:0)
#loc1 = loc("/usr/include/stdlib.h":672:1)
#loc2 = loc("/usr/include/stdlib.h":672:45)
#loc3 = loc("/usr/include/stdlib.h":756:1)
#loc4 = loc("/usr/include/stdlib.h":756:70)
#loc5 = loc("/usr/include/string.h":407:1)
#loc6 = loc("/usr/include/string.h":408:33)
#loc7 = loc("../../../testcasesupport/std_testcase_io.h":14:1)
#loc8 = loc("../../../testcasesupport/std_testcase_io.h":14:33)
#loc9 = loc("/usr/include/stdlib.h":687:1)
#loc10 = loc("/usr/include/stdlib.h":687:32)
#loc11 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE193_char_memcpy_33.cpp":31:1)
#loc12 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE193_char_memcpy_33.cpp":50:1)
#loc13 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE193_char_memcpy_33.cpp":33:5)
#loc14 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE193_char_memcpy_33.cpp":33:12)
#loc15 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE193_char_memcpy_33.cpp":34:5)
#loc16 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE193_char_memcpy_33.cpp":34:23)
#loc17 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE193_char_memcpy_33.cpp":35:12)
#loc18 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE193_char_memcpy_33.cpp":35:5)
#loc19 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE193_char_memcpy_33.cpp":37:20)
#loc20 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE193_char_memcpy_33.cpp":37:27)
#loc21 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE193_char_memcpy_33.cpp":37:30)
#loc22 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE193_char_memcpy_33.cpp":37:41)
#loc23 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE193_char_memcpy_33.cpp":37:42)
#loc24 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE193_char_memcpy_33.cpp":37:5)
#loc25 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE193_char_memcpy_33.cpp":38:5)
#loc26 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE193_char_memcpy_33.cpp":38:33)
#loc27 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE193_char_memcpy_33.cpp":38:9)
#loc28 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE193_char_memcpy_33.cpp":38:17)
#loc29 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE193_char_memcpy_33.cpp":38:23)
#loc30 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE193_char_memcpy_33.cpp":38:24)
#loc31 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE193_char_memcpy_33.cpp":38:30)
#loc32 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE193_char_memcpy_33.cpp":38:29)
#loc33 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE193_char_memcpy_33.cpp":39:5)
#loc34 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE193_char_memcpy_33.cpp":49:5)
#loc35 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE193_char_memcpy_33.cpp":40:9)
#loc36 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE193_char_memcpy_33.cpp":40:23)
#loc37 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE193_char_memcpy_33.cpp":41:9)
#loc38 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE193_char_memcpy_33.cpp":48:9)
#loc39 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE193_char_memcpy_33.cpp":42:13)
#loc40 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE193_char_memcpy_33.cpp":42:33)
#loc41 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE193_char_memcpy_33.cpp":45:20)
#loc42 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE193_char_memcpy_33.cpp":45:26)
#loc43 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE193_char_memcpy_33.cpp":45:35)
#loc44 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE193_char_memcpy_33.cpp":45:42)
#loc45 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE193_char_memcpy_33.cpp":45:52)
#loc46 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE193_char_memcpy_33.cpp":45:57)
#loc47 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE193_char_memcpy_33.cpp":45:68)
#loc48 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE193_char_memcpy_33.cpp":45:34)
#loc49 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE193_char_memcpy_33.cpp":45:13)
#loc50 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE193_char_memcpy_33.cpp":45:69)
#loc51 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE193_char_memcpy_33.cpp":46:23)
#loc52 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE193_char_memcpy_33.cpp":46:13)
#loc53 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE193_char_memcpy_33.cpp":47:13)
#loc54 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE193_char_memcpy_33.cpp":47:18)
#loc55 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE193_char_memcpy_33.cpp":57:1)
#loc56 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE193_char_memcpy_33.cpp":76:1)
#loc57 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE193_char_memcpy_33.cpp":59:5)
#loc58 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE193_char_memcpy_33.cpp":59:12)
#loc59 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE193_char_memcpy_33.cpp":60:5)
#loc60 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE193_char_memcpy_33.cpp":60:23)
#loc61 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE193_char_memcpy_33.cpp":61:12)
#loc62 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE193_char_memcpy_33.cpp":61:5)
#loc63 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE193_char_memcpy_33.cpp":63:20)
#loc64 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE193_char_memcpy_33.cpp":63:28)
#loc65 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE193_char_memcpy_33.cpp":63:31)
#loc66 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE193_char_memcpy_33.cpp":63:34)
#loc67 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE193_char_memcpy_33.cpp":63:45)
#loc68 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE193_char_memcpy_33.cpp":63:27)
#loc69 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE193_char_memcpy_33.cpp":63:46)
#loc70 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE193_char_memcpy_33.cpp":63:5)
#loc71 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE193_char_memcpy_33.cpp":64:5)
#loc72 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE193_char_memcpy_33.cpp":64:33)
#loc73 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE193_char_memcpy_33.cpp":64:9)
#loc74 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE193_char_memcpy_33.cpp":64:17)
#loc75 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE193_char_memcpy_33.cpp":64:23)
#loc76 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE193_char_memcpy_33.cpp":64:24)
#loc77 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE193_char_memcpy_33.cpp":64:30)
#loc78 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE193_char_memcpy_33.cpp":64:29)
#loc79 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE193_char_memcpy_33.cpp":65:5)
#loc80 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE193_char_memcpy_33.cpp":75:5)
#loc81 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE193_char_memcpy_33.cpp":66:9)
#loc82 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE193_char_memcpy_33.cpp":66:23)
#loc83 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE193_char_memcpy_33.cpp":67:9)
#loc84 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE193_char_memcpy_33.cpp":74:9)
#loc85 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE193_char_memcpy_33.cpp":68:13)
#loc86 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE193_char_memcpy_33.cpp":68:33)
#loc87 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE193_char_memcpy_33.cpp":71:20)
#loc88 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE193_char_memcpy_33.cpp":71:26)
#loc89 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE193_char_memcpy_33.cpp":71:35)
#loc90 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE193_char_memcpy_33.cpp":71:42)
#loc91 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE193_char_memcpy_33.cpp":71:52)
#loc92 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE193_char_memcpy_33.cpp":71:57)
#loc93 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE193_char_memcpy_33.cpp":71:68)
#loc94 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE193_char_memcpy_33.cpp":71:34)
#loc95 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE193_char_memcpy_33.cpp":71:13)
#loc96 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE193_char_memcpy_33.cpp":71:69)
#loc97 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE193_char_memcpy_33.cpp":72:23)
#loc98 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE193_char_memcpy_33.cpp":72:13)
#loc99 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE193_char_memcpy_33.cpp":73:13)
#loc100 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE193_char_memcpy_33.cpp":73:18)
#loc101 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE193_char_memcpy_33.cpp":78:1)
#loc102 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE193_char_memcpy_33.cpp":81:1)
#loc103 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE193_char_memcpy_33.cpp":80:5)
#loc104 = loc(fused[#loc1, #loc2])
#loc105 = loc(fused[#loc3, #loc4])
#loc106 = loc(fused[#loc5, #loc6])
#loc107 = loc(fused[#loc7, #loc8])
#loc108 = loc(fused[#loc9, #loc10])
#loc109 = loc(fused[#loc11, #loc12])
#loc110 = loc(fused[#loc13, #loc14])
#loc111 = loc(fused[#loc15, #loc16])
#loc112 = loc(fused[#loc18, #loc17])
#loc113 = loc(fused[#loc21, #loc22])
#loc114 = loc(fused[#loc20, #loc22])
#loc115 = loc(fused[#loc19, #loc23])
#loc116 = loc(fused[#loc24, #loc23])
#loc117 = loc(fused[#loc25, #loc26])
#loc118 = loc(fused[#loc27, #loc28])
#loc119 = loc(fused[#loc29, #loc26])
#loc120 = loc(fused[#loc33, #loc34])
#loc121 = loc(fused[#loc35, #loc36])
#loc122 = loc(fused[#loc37, #loc38])
#loc123 = loc(fused[#loc39, #loc40])
#loc124 = loc(fused[#loc43, #loc45])
#loc125 = loc(fused[#loc46, #loc47])
#loc126 = loc(fused[#loc48, #loc47])
#loc127 = loc(fused[#loc49, #loc50])
#loc128 = loc(fused[#loc55, #loc56])
#loc129 = loc(fused[#loc57, #loc58])
#loc130 = loc(fused[#loc59, #loc60])
#loc131 = loc(fused[#loc62, #loc61])
#loc132 = loc(fused[#loc66, #loc67])
#loc133 = loc(fused[#loc68, #loc67])
#loc134 = loc(fused[#loc63, #loc69])
#loc135 = loc(fused[#loc70, #loc69])
#loc136 = loc(fused[#loc71, #loc72])
#loc137 = loc(fused[#loc73, #loc74])
#loc138 = loc(fused[#loc75, #loc72])
#loc139 = loc(fused[#loc79, #loc80])
#loc140 = loc(fused[#loc81, #loc82])
#loc141 = loc(fused[#loc83, #loc84])
#loc142 = loc(fused[#loc85, #loc86])
#loc143 = loc(fused[#loc89, #loc91])
#loc144 = loc(fused[#loc92, #loc93])
#loc145 = loc(fused[#loc94, #loc93])
#loc146 = loc(fused[#loc95, #loc96])
#loc147 = loc(fused[#loc101, #loc102])
