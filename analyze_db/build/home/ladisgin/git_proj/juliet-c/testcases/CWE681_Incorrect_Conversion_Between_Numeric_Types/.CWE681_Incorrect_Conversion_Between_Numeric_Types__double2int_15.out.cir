!s32i = !cir.int<s, 32>
!s64i = !cir.int<s, 64>
!s8i = !cir.int<s, 8>
!ty__IO_codecvt = !cir.struct<struct "_IO_codecvt" incomplete>
!ty__IO_marker = !cir.struct<struct "_IO_marker" incomplete>
!ty__IO_wide_data = !cir.struct<struct "_IO_wide_data" incomplete>
!u16i = !cir.int<u, 16>
!u32i = !cir.int<u, 32>
!void = !cir.void
#false = #cir.bool<false> : !cir.bool
#fn_attr = #cir<extra({nothrow = #cir.nothrow})>
#fn_attr1 = #cir<extra({inline = #cir.inline<no>, nothrow = #cir.nothrow, optnone = #cir.optnone})>
#loc62 = loc("CWE681_Incorrect_Conversion_Between_Numeric_Types__double2int_15.c":152:10)
#loc63 = loc("CWE681_Incorrect_Conversion_Between_Numeric_Types__double2int_15.c":152:14)
#loc64 = loc("CWE681_Incorrect_Conversion_Between_Numeric_Types__double2int_15.c":152:20)
#loc65 = loc("CWE681_Incorrect_Conversion_Between_Numeric_Types__double2int_15.c":152:32)
#true = #cir.bool<true> : !cir.bool
#loc194 = loc(fused[#loc62, #loc63])
#loc195 = loc(fused[#loc64, #loc65])
!ty__IO_FILE = !cir.struct<struct "_IO_FILE" {!s32i, !cir.ptr<!s8i>, !cir.ptr<!s8i>, !cir.ptr<!s8i>, !cir.ptr<!s8i>, !cir.ptr<!s8i>, !cir.ptr<!s8i>, !cir.ptr<!s8i>, !cir.ptr<!s8i>, !cir.ptr<!s8i>, !cir.ptr<!s8i>, !cir.ptr<!s8i>, !cir.ptr<!ty__IO_marker>, !cir.ptr<!cir.struct<struct "_IO_FILE">>, !s32i, !s32i, !s64i, !u16i, !s8i, !cir.array<!s8i x 1>, !cir.ptr<!void>, !s64i, !cir.ptr<!ty__IO_codecvt>, !cir.ptr<!ty__IO_wide_data>, !cir.ptr<!cir.struct<struct "_IO_FILE">>, !cir.ptr<!void>, !cir.ptr<!cir.ptr<!cir.struct<struct "_IO_FILE">>>, !s32i, !cir.array<!s8i x 20>} #cir.record.decl.ast>
module @"/home/ladisgin/git_proj/juliet-c/testcases/CWE681_Incorrect_Conversion_Between_Numeric_Types/CWE681_Incorrect_Conversion_Between_Numeric_Types__double2int_15.c" attributes {cir.lang = #cir.lang<c>, cir.sob = #cir.signed_overflow_behavior<undefined>, cir.triple = "x86_64-unknown-linux-gnu", dlti.dl_spec = #dlti.dl_spec<!llvm.ptr = dense<64> : vector<4xi64>, i1 = dense<8> : vector<2xi64>, i8 = dense<8> : vector<2xi64>, i16 = dense<16> : vector<2xi64>, i128 = dense<128> : vector<2xi64>, f80 = dense<128> : vector<2xi64>, !llvm.ptr<270> = dense<32> : vector<4xi64>, i32 = dense<32> : vector<2xi64>, i64 = dense<64> : vector<2xi64>, f16 = dense<16> : vector<2xi64>, !llvm.ptr<272> = dense<64> : vector<4xi64>, f64 = dense<64> : vector<2xi64>, !llvm.ptr<271> = dense<32> : vector<4xi64>, f128 = dense<128> : vector<2xi64>, "dlti.stack_alignment" = 128 : i64, "dlti.endianness" = "little">} {
  cir.func private @fgets(!cir.ptr<!s8i>, !s32i, !cir.ptr<!ty__IO_FILE>) -> !cir.ptr<!s8i> loc(#loc174)
  cir.global "private" external @stdin : !cir.ptr<!ty__IO_FILE> {alignment = 8 : i64} loc(#loc175)
  cir.func private @atof(!cir.ptr<!s8i>) -> !cir.double extra(#fn_attr) loc(#loc176)
  cir.func private @printLine(!cir.ptr<!s8i>) loc(#loc177)
  cir.global "private" constant cir_private dsolocal @".str" = #cir.const_array<"fgets() failed.\00" : !cir.array<!s8i x 16>> : !cir.array<!s8i x 16> {alignment = 1 : i64} loc(#loc9)
  cir.func private @printIntLine(!s32i) loc(#loc178)
  cir.global "private" constant cir_private dsolocal @".str.1" = #cir.const_array<"Benign, fixed string\00" : !cir.array<!s8i x 21>> : !cir.array<!s8i x 21> {alignment = 1 : i64} loc(#loc12)
  cir.func no_proto @CWE681_Incorrect_Conversion_Between_Numeric_Types__double2int_15_bad() extra(#fn_attr1) {
    cir.scope {
      %0 = cir.const #cir.int<6> : !s32i loc(#loc17)
      cir.switch (%0 : !s32i) {
        cir.case(equal, [#cir.int<6> : !s32i]) {
          cir.scope {
            %1 = cir.alloca !cir.array<!s8i x 256>, !cir.ptr<!cir.array<!s8i x 256>>, ["inputBuffer"] {alignment = 16 : i64} loc(#loc182)
            %2 = cir.alloca !cir.double, !cir.ptr<!cir.double>, ["doubleNumber", init] {alignment = 8 : i64} loc(#loc183)
            %3 = cir.const #cir.int<0> : !s32i loc(#loc24)
            %4 = cir.cast(int_to_float, %3 : !s32i), !cir.double loc(#loc24)
            cir.store %4, %2 : !cir.double, !cir.ptr<!cir.double> loc(#loc183)
            cir.scope {
              %7 = cir.cast(array_to_ptrdecay, %1 : !cir.ptr<!cir.array<!s8i x 256>>), !cir.ptr<!s8i> loc(#loc27)
              %8 = cir.const #cir.int<256> : !s32i loc(#loc28)
              %9 = cir.get_global @stdin : !cir.ptr<!cir.ptr<!ty__IO_FILE>> loc(#loc175)
              %10 = cir.load %9 : !cir.ptr<!cir.ptr<!ty__IO_FILE>>, !cir.ptr<!ty__IO_FILE> loc(#loc29)
              %11 = cir.call @fgets(%7, %8, %10) : (!cir.ptr<!s8i>, !s32i, !cir.ptr<!ty__IO_FILE>) -> !cir.ptr<!s8i> loc(#loc30)
              %12 = cir.const #cir.ptr<null> : !cir.ptr<!void> loc(#loc31)
              %13 = cir.cast(bitcast, %12 : !cir.ptr<!void>), !cir.ptr<!s8i> loc(#loc31)
              %14 = cir.cmp(ne, %11, %13) : !cir.ptr<!s8i>, !cir.bool loc(#loc185)
              cir.if %14 {
                %15 = cir.cast(array_to_ptrdecay, %1 : !cir.ptr<!cir.array<!s8i x 256>>), !cir.ptr<!s8i> loc(#loc35)
                %16 = cir.call @atof(%15) : (!cir.ptr<!s8i>) -> !cir.double extra(#fn_attr) loc(#loc36)
                cir.store %16, %2 : !cir.double, !cir.ptr<!cir.double> loc(#loc187)
              } else {
                %15 = cir.get_global @".str" : !cir.ptr<!cir.array<!s8i x 16>> loc(#loc9)
                %16 = cir.cast(array_to_ptrdecay, %15 : !cir.ptr<!cir.array<!s8i x 16>>), !cir.ptr<!s8i> loc(#loc9)
                cir.call @printLine(%16) : (!cir.ptr<!s8i>) -> () loc(#loc39)
              } loc(#loc186)
            } loc(#loc184)
            %5 = cir.load %2 : !cir.ptr<!cir.double>, !cir.double loc(#loc40)
            %6 = cir.cast(float_to_int, %5 : !cir.double), !s32i loc(#loc40)
            cir.call @printIntLine(%6) : (!s32i) -> () loc(#loc41)
          } loc(#loc181)
          cir.break loc(#loc42)
        } loc(#loc18)
        cir.case(default, []) {
          %1 = cir.get_global @".str.1" : !cir.ptr<!cir.array<!s8i x 21>> loc(#loc12)
          %2 = cir.cast(array_to_ptrdecay, %1 : !cir.ptr<!cir.array<!s8i x 21>>), !cir.ptr<!s8i> loc(#loc12)
          cir.call @printLine(%2) : (!cir.ptr<!s8i>) -> () loc(#loc44)
          cir.break loc(#loc45)
        } loc(#loc43)
        cir.yield loc(#loc15)
      } loc(#loc15)
    } loc(#loc180)
    cir.return loc(#loc14)
  } loc(#loc179)
  cir.func no_proto @CWE681_Incorrect_Conversion_Between_Numeric_Types__double2int_15_good() extra(#fn_attr1) {
    %0 = cir.get_global @good1 : !cir.ptr<!cir.func<!void ()>> loc(#loc189)
    cir.call %0() : (!cir.ptr<!cir.func<!void ()>>) -> () loc(#loc48)
    %1 = cir.get_global @good2 : !cir.ptr<!cir.func<!void ()>> loc(#loc190)
    cir.call %1() : (!cir.ptr<!cir.func<!void ()>>) -> () loc(#loc50)
    cir.return loc(#loc47)
  } loc(#loc188)
  cir.func private @srand(!u32i) extra(#fn_attr) loc(#loc191)
  cir.func private @time(!cir.ptr<!s64i>) -> !s64i extra(#fn_attr) loc(#loc192)
  cir.global "private" constant cir_private dsolocal @".str.2" = #cir.const_array<"Calling good()...\00" : !cir.array<!s8i x 18>> : !cir.array<!s8i x 18> {alignment = 1 : i64} loc(#loc56)
  cir.global "private" constant cir_private dsolocal @".str.3" = #cir.const_array<"Finished good()\00" : !cir.array<!s8i x 16>> : !cir.array<!s8i x 16> {alignment = 1 : i64} loc(#loc57)
  cir.global "private" constant cir_private dsolocal @".str.4" = #cir.const_array<"Calling bad()...\00" : !cir.array<!s8i x 17>> : !cir.array<!s8i x 17> {alignment = 1 : i64} loc(#loc58)
  cir.global "private" constant cir_private dsolocal @".str.5" = #cir.const_array<"Finished bad()\00" : !cir.array<!s8i x 15>> : !cir.array<!s8i x 15> {alignment = 1 : i64} loc(#loc59)
  cir.func @main(%arg0: !s32i loc(fused[#loc62, #loc63]), %arg1: !cir.ptr<!cir.ptr<!s8i>> loc(fused[#loc64, #loc65])) -> !s32i extra(#fn_attr1) {
    %0 = cir.alloca !s32i, !cir.ptr<!s32i>, ["argc", init] {alignment = 4 : i64} loc(#loc194)
    %1 = cir.alloca !cir.ptr<!cir.ptr<!s8i>>, !cir.ptr<!cir.ptr<!cir.ptr<!s8i>>>, ["argv", init] {alignment = 8 : i64} loc(#loc195)
    %2 = cir.alloca !s32i, !cir.ptr<!s32i>, ["__retval"] {alignment = 4 : i64} loc(#loc61)
    cir.store %arg0, %0 : !s32i, !cir.ptr<!s32i> loc(#loc66)
    cir.store %arg1, %1 : !cir.ptr<!cir.ptr<!s8i>>, !cir.ptr<!cir.ptr<!cir.ptr<!s8i>>> loc(#loc66)
    %3 = cir.const #cir.ptr<null> : !cir.ptr<!s64i> loc(#loc67)
    %4 = cir.call @time(%3) : (!cir.ptr<!s64i>) -> !s64i extra(#fn_attr) loc(#loc68)
    %5 = cir.cast(integral, %4 : !s64i), !u32i loc(#loc68)
    cir.call @srand(%5) : (!u32i) -> () extra(#fn_attr) loc(#loc69)
    %6 = cir.get_global @".str.2" : !cir.ptr<!cir.array<!s8i x 18>> loc(#loc56)
    %7 = cir.cast(array_to_ptrdecay, %6 : !cir.ptr<!cir.array<!s8i x 18>>), !cir.ptr<!s8i> loc(#loc56)
    cir.call @printLine(%7) : (!cir.ptr<!s8i>) -> () loc(#loc70)
    %8 = cir.get_global @CWE681_Incorrect_Conversion_Between_Numeric_Types__double2int_15_good : !cir.ptr<!cir.func<!void ()>> loc(#loc196)
    cir.call @CWE681_Incorrect_Conversion_Between_Numeric_Types__double2int_15_good() : () -> () loc(#loc71)
    %9 = cir.get_global @".str.3" : !cir.ptr<!cir.array<!s8i x 16>> loc(#loc57)
    %10 = cir.cast(array_to_ptrdecay, %9 : !cir.ptr<!cir.array<!s8i x 16>>), !cir.ptr<!s8i> loc(#loc57)
    cir.call @printLine(%10) : (!cir.ptr<!s8i>) -> () loc(#loc73)
    %11 = cir.get_global @".str.4" : !cir.ptr<!cir.array<!s8i x 17>> loc(#loc58)
    %12 = cir.cast(array_to_ptrdecay, %11 : !cir.ptr<!cir.array<!s8i x 17>>), !cir.ptr<!s8i> loc(#loc58)
    cir.call @printLine(%12) : (!cir.ptr<!s8i>) -> () loc(#loc74)
    %13 = cir.get_global @CWE681_Incorrect_Conversion_Between_Numeric_Types__double2int_15_bad : !cir.ptr<!cir.func<!void ()>> loc(#loc197)
    cir.call @CWE681_Incorrect_Conversion_Between_Numeric_Types__double2int_15_bad() : () -> () loc(#loc75)
    %14 = cir.get_global @".str.5" : !cir.ptr<!cir.array<!s8i x 15>> loc(#loc59)
    %15 = cir.cast(array_to_ptrdecay, %14 : !cir.ptr<!cir.array<!s8i x 15>>), !cir.ptr<!s8i> loc(#loc59)
    cir.call @printLine(%15) : (!cir.ptr<!s8i>) -> () loc(#loc77)
    %16 = cir.const #cir.int<0> : !s32i loc(#loc78)
    cir.store %16, %2 : !s32i, !cir.ptr<!s32i> loc(#loc198)
    %17 = cir.load %2 : !cir.ptr<!s32i>, !s32i loc(#loc198)
    cir.return %17 : !s32i loc(#loc198)
  } loc(#loc193)
  cir.global "private" constant cir_private dsolocal @".str.6" = #cir.const_array<"Value is too small or large to be represented as an int\00" : !cir.array<!s8i x 56>> : !cir.array<!s8i x 56> {alignment = 1 : i64} loc(#loc80)
  cir.func no_proto internal private @good1() extra(#fn_attr1) {
    cir.scope {
      %0 = cir.const #cir.int<5> : !s32i loc(#loc85)
      cir.switch (%0 : !s32i) {
        cir.case(equal, [#cir.int<6> : !s32i]) {
          %1 = cir.get_global @".str.1" : !cir.ptr<!cir.array<!s8i x 21>> loc(#loc87)
          %2 = cir.cast(array_to_ptrdecay, %1 : !cir.ptr<!cir.array<!s8i x 21>>), !cir.ptr<!s8i> loc(#loc87)
          cir.call @printLine(%2) : (!cir.ptr<!s8i>) -> () loc(#loc88)
          cir.break loc(#loc89)
        } loc(#loc86)
        cir.case(default, []) {
          cir.scope {
            %1 = cir.alloca !cir.array<!s8i x 256>, !cir.ptr<!cir.array<!s8i x 256>>, ["inputBuffer"] {alignment = 16 : i64} loc(#loc202)
            %2 = cir.alloca !cir.double, !cir.ptr<!cir.double>, ["doubleNumber", init] {alignment = 8 : i64} loc(#loc203)
            %3 = cir.const #cir.int<0> : !s32i loc(#loc96)
            %4 = cir.cast(int_to_float, %3 : !s32i), !cir.double loc(#loc96)
            cir.store %4, %2 : !cir.double, !cir.ptr<!cir.double> loc(#loc203)
            cir.scope {
              %5 = cir.cast(array_to_ptrdecay, %1 : !cir.ptr<!cir.array<!s8i x 256>>), !cir.ptr<!s8i> loc(#loc99)
              %6 = cir.const #cir.int<256> : !s32i loc(#loc100)
              %7 = cir.get_global @stdin : !cir.ptr<!cir.ptr<!ty__IO_FILE>> loc(#loc175)
              %8 = cir.load %7 : !cir.ptr<!cir.ptr<!ty__IO_FILE>>, !cir.ptr<!ty__IO_FILE> loc(#loc101)
              %9 = cir.call @fgets(%5, %6, %8) : (!cir.ptr<!s8i>, !s32i, !cir.ptr<!ty__IO_FILE>) -> !cir.ptr<!s8i> loc(#loc102)
              %10 = cir.const #cir.ptr<null> : !cir.ptr<!void> loc(#loc103)
              %11 = cir.cast(bitcast, %10 : !cir.ptr<!void>), !cir.ptr<!s8i> loc(#loc103)
              %12 = cir.cmp(ne, %9, %11) : !cir.ptr<!s8i>, !cir.bool loc(#loc205)
              cir.if %12 {
                %13 = cir.cast(array_to_ptrdecay, %1 : !cir.ptr<!cir.array<!s8i x 256>>), !cir.ptr<!s8i> loc(#loc107)
                %14 = cir.call @atof(%13) : (!cir.ptr<!s8i>) -> !cir.double extra(#fn_attr) loc(#loc108)
                cir.store %14, %2 : !cir.double, !cir.ptr<!cir.double> loc(#loc207)
              } else {
                %13 = cir.get_global @".str" : !cir.ptr<!cir.array<!s8i x 16>> loc(#loc111)
                %14 = cir.cast(array_to_ptrdecay, %13 : !cir.ptr<!cir.array<!s8i x 16>>), !cir.ptr<!s8i> loc(#loc111)
                cir.call @printLine(%14) : (!cir.ptr<!s8i>) -> () loc(#loc112)
              } loc(#loc206)
            } loc(#loc204)
            cir.scope {
              %5 = cir.load %2 : !cir.ptr<!cir.double>, !cir.double loc(#loc115)
              %6 = cir.const #cir.int<2147483647> : !s32i loc(#loc116)
              %7 = cir.cast(int_to_float, %6 : !s32i), !cir.double loc(#loc116)
              %8 = cir.cmp(gt, %5, %7) : !cir.double, !cir.bool loc(#loc209)
              %9 = cir.ternary(%8, true {
                %10 = cir.const #true loc(#loc117)
                cir.yield %10 : !cir.bool loc(#loc117)
              }, false {
                %10 = cir.load %2 : !cir.ptr<!cir.double>, !cir.double loc(#loc118)
                %11 = cir.const #cir.int<2147483647> : !s32i loc(#loc119)
                %12 = cir.unary(minus, %11) : !s32i, !s32i loc(#loc119)
                %13 = cir.const #cir.int<1> : !s32i loc(#loc119)
                %14 = cir.binop(sub, %12, %13) nsw : !s32i loc(#loc119)
                %15 = cir.cast(int_to_float, %14 : !s32i), !cir.double loc(#loc119)
                %16 = cir.cmp(lt, %10, %15) : !cir.double, !cir.bool loc(#loc210)
                %17 = cir.ternary(%16, true {
                  %18 = cir.const #true loc(#loc117)
                  cir.yield %18 : !cir.bool loc(#loc117)
                }, false {
                  %18 = cir.const #false loc(#loc117)
                  cir.yield %18 : !cir.bool loc(#loc117)
                }) : (!cir.bool) -> !cir.bool loc(#loc117)
                cir.yield %17 : !cir.bool loc(#loc117)
              }) : (!cir.bool) -> !cir.bool loc(#loc117)
              cir.if %9 {
                %10 = cir.get_global @".str.6" : !cir.ptr<!cir.array<!s8i x 56>> loc(#loc80)
                %11 = cir.cast(array_to_ptrdecay, %10 : !cir.ptr<!cir.array<!s8i x 56>>), !cir.ptr<!s8i> loc(#loc80)
                cir.call @printLine(%11) : (!cir.ptr<!s8i>) -> () loc(#loc123)
              } else {
                %10 = cir.load %2 : !cir.ptr<!cir.double>, !cir.double loc(#loc124)
                %11 = cir.cast(float_to_int, %10 : !cir.double), !s32i loc(#loc124)
                cir.call @printIntLine(%11) : (!s32i) -> () loc(#loc125)
              } loc(#loc211)
            } loc(#loc208)
          } loc(#loc201)
          cir.break loc(#loc126)
        } loc(#loc90)
        cir.yield loc(#loc83)
      } loc(#loc83)
    } loc(#loc200)
    cir.return loc(#loc82)
  } loc(#loc199)
  cir.func no_proto internal private @good2() extra(#fn_attr1) {
    cir.scope {
      %0 = cir.const #cir.int<6> : !s32i loc(#loc131)
      cir.switch (%0 : !s32i) {
        cir.case(equal, [#cir.int<6> : !s32i]) {
          cir.scope {
            %1 = cir.alloca !cir.array<!s8i x 256>, !cir.ptr<!cir.array<!s8i x 256>>, ["inputBuffer"] {alignment = 16 : i64} loc(#loc215)
            %2 = cir.alloca !cir.double, !cir.ptr<!cir.double>, ["doubleNumber", init] {alignment = 8 : i64} loc(#loc216)
            %3 = cir.const #cir.int<0> : !s32i loc(#loc138)
            %4 = cir.cast(int_to_float, %3 : !s32i), !cir.double loc(#loc138)
            cir.store %4, %2 : !cir.double, !cir.ptr<!cir.double> loc(#loc216)
            cir.scope {
              %5 = cir.cast(array_to_ptrdecay, %1 : !cir.ptr<!cir.array<!s8i x 256>>), !cir.ptr<!s8i> loc(#loc141)
              %6 = cir.const #cir.int<256> : !s32i loc(#loc142)
              %7 = cir.get_global @stdin : !cir.ptr<!cir.ptr<!ty__IO_FILE>> loc(#loc175)
              %8 = cir.load %7 : !cir.ptr<!cir.ptr<!ty__IO_FILE>>, !cir.ptr<!ty__IO_FILE> loc(#loc143)
              %9 = cir.call @fgets(%5, %6, %8) : (!cir.ptr<!s8i>, !s32i, !cir.ptr<!ty__IO_FILE>) -> !cir.ptr<!s8i> loc(#loc144)
              %10 = cir.const #cir.ptr<null> : !cir.ptr<!void> loc(#loc145)
              %11 = cir.cast(bitcast, %10 : !cir.ptr<!void>), !cir.ptr<!s8i> loc(#loc145)
              %12 = cir.cmp(ne, %9, %11) : !cir.ptr<!s8i>, !cir.bool loc(#loc218)
              cir.if %12 {
                %13 = cir.cast(array_to_ptrdecay, %1 : !cir.ptr<!cir.array<!s8i x 256>>), !cir.ptr<!s8i> loc(#loc149)
                %14 = cir.call @atof(%13) : (!cir.ptr<!s8i>) -> !cir.double extra(#fn_attr) loc(#loc150)
                cir.store %14, %2 : !cir.double, !cir.ptr<!cir.double> loc(#loc220)
              } else {
                %13 = cir.get_global @".str" : !cir.ptr<!cir.array<!s8i x 16>> loc(#loc153)
                %14 = cir.cast(array_to_ptrdecay, %13 : !cir.ptr<!cir.array<!s8i x 16>>), !cir.ptr<!s8i> loc(#loc153)
                cir.call @printLine(%14) : (!cir.ptr<!s8i>) -> () loc(#loc154)
              } loc(#loc219)
            } loc(#loc217)
            cir.scope {
              %5 = cir.load %2 : !cir.ptr<!cir.double>, !cir.double loc(#loc157)
              %6 = cir.const #cir.int<2147483647> : !s32i loc(#loc158)
              %7 = cir.cast(int_to_float, %6 : !s32i), !cir.double loc(#loc158)
              %8 = cir.cmp(gt, %5, %7) : !cir.double, !cir.bool loc(#loc222)
              %9 = cir.ternary(%8, true {
                %10 = cir.const #true loc(#loc159)
                cir.yield %10 : !cir.bool loc(#loc159)
              }, false {
                %10 = cir.load %2 : !cir.ptr<!cir.double>, !cir.double loc(#loc160)
                %11 = cir.const #cir.int<2147483647> : !s32i loc(#loc161)
                %12 = cir.unary(minus, %11) : !s32i, !s32i loc(#loc161)
                %13 = cir.const #cir.int<1> : !s32i loc(#loc161)
                %14 = cir.binop(sub, %12, %13) nsw : !s32i loc(#loc161)
                %15 = cir.cast(int_to_float, %14 : !s32i), !cir.double loc(#loc161)
                %16 = cir.cmp(lt, %10, %15) : !cir.double, !cir.bool loc(#loc223)
                %17 = cir.ternary(%16, true {
                  %18 = cir.const #true loc(#loc159)
                  cir.yield %18 : !cir.bool loc(#loc159)
                }, false {
                  %18 = cir.const #false loc(#loc159)
                  cir.yield %18 : !cir.bool loc(#loc159)
                }) : (!cir.bool) -> !cir.bool loc(#loc159)
                cir.yield %17 : !cir.bool loc(#loc159)
              }) : (!cir.bool) -> !cir.bool loc(#loc159)
              cir.if %9 {
                %10 = cir.get_global @".str.6" : !cir.ptr<!cir.array<!s8i x 56>> loc(#loc165)
                %11 = cir.cast(array_to_ptrdecay, %10 : !cir.ptr<!cir.array<!s8i x 56>>), !cir.ptr<!s8i> loc(#loc165)
                cir.call @printLine(%11) : (!cir.ptr<!s8i>) -> () loc(#loc166)
              } else {
                %10 = cir.load %2 : !cir.ptr<!cir.double>, !cir.double loc(#loc167)
                %11 = cir.cast(float_to_int, %10 : !cir.double), !s32i loc(#loc167)
                cir.call @printIntLine(%11) : (!s32i) -> () loc(#loc168)
              } loc(#loc224)
            } loc(#loc221)
          } loc(#loc214)
          cir.break loc(#loc169)
        } loc(#loc132)
        cir.case(default, []) {
          %1 = cir.get_global @".str.1" : !cir.ptr<!cir.array<!s8i x 21>> loc(#loc171)
          %2 = cir.cast(array_to_ptrdecay, %1 : !cir.ptr<!cir.array<!s8i x 21>>), !cir.ptr<!s8i> loc(#loc171)
          cir.call @printLine(%2) : (!cir.ptr<!s8i>) -> () loc(#loc172)
          cir.break loc(#loc173)
        } loc(#loc170)
        cir.yield loc(#loc129)
      } loc(#loc129)
    } loc(#loc213)
    cir.return loc(#loc128)
  } loc(#loc212)
} loc(#loc)
#loc = loc("/home/ladisgin/git_proj/juliet-c/testcases/CWE681_Incorrect_Conversion_Between_Numeric_Types/CWE681_Incorrect_Conversion_Between_Numeric_Types__double2int_15.c":0:0)
#loc1 = loc("/usr/include/stdio.h":654:1)
#loc2 = loc("/usr/include/stdio.h":655:59)
#loc3 = loc("/usr/include/stdio.h":149:1)
#loc4 = loc("/usr/include/stdio.h":149:14)
#loc5 = loc("/usr/include/stdlib.h":102:1)
#loc6 = loc("/usr/include/stdlib.h":103:33)
#loc7 = loc("../../testcasesupport/std_testcase_io.h":14:1)
#loc8 = loc("../../testcasesupport/std_testcase_io.h":14:33)
#loc9 = loc("CWE681_Incorrect_Conversion_Between_Numeric_Types__double2int_15.c":38:23)
#loc10 = loc("../../testcasesupport/std_testcase_io.h":18:1)
#loc11 = loc("../../testcasesupport/std_testcase_io.h":18:33)
#loc12 = loc("CWE681_Incorrect_Conversion_Between_Numeric_Types__double2int_15.c":46:19)
#loc13 = loc("CWE681_Incorrect_Conversion_Between_Numeric_Types__double2int_15.c":22:1)
#loc14 = loc("CWE681_Incorrect_Conversion_Between_Numeric_Types__double2int_15.c":49:1)
#loc15 = loc("CWE681_Incorrect_Conversion_Between_Numeric_Types__double2int_15.c":24:5)
#loc16 = loc("CWE681_Incorrect_Conversion_Between_Numeric_Types__double2int_15.c":48:5)
#loc17 = loc("CWE681_Incorrect_Conversion_Between_Numeric_Types__double2int_15.c":24:12)
#loc18 = loc("CWE681_Incorrect_Conversion_Between_Numeric_Types__double2int_15.c":26:5)
#loc19 = loc("CWE681_Incorrect_Conversion_Between_Numeric_Types__double2int_15.c":27:5)
#loc20 = loc("CWE681_Incorrect_Conversion_Between_Numeric_Types__double2int_15.c":42:5)
#loc21 = loc("CWE681_Incorrect_Conversion_Between_Numeric_Types__double2int_15.c":28:9)
#loc22 = loc("CWE681_Incorrect_Conversion_Between_Numeric_Types__double2int_15.c":28:41)
#loc23 = loc("CWE681_Incorrect_Conversion_Between_Numeric_Types__double2int_15.c":29:9)
#loc24 = loc("CWE681_Incorrect_Conversion_Between_Numeric_Types__double2int_15.c":29:31)
#loc25 = loc("CWE681_Incorrect_Conversion_Between_Numeric_Types__double2int_15.c":31:9)
#loc26 = loc("CWE681_Incorrect_Conversion_Between_Numeric_Types__double2int_15.c":39:9)
#loc27 = loc("CWE681_Incorrect_Conversion_Between_Numeric_Types__double2int_15.c":31:19)
#loc28 = loc("CWE681_Incorrect_Conversion_Between_Numeric_Types__double2int_15.c":31:32)
#loc29 = loc("CWE681_Incorrect_Conversion_Between_Numeric_Types__double2int_15.c":31:49)
#loc30 = loc("CWE681_Incorrect_Conversion_Between_Numeric_Types__double2int_15.c":31:13)
#loc31 = loc("CWE681_Incorrect_Conversion_Between_Numeric_Types__double2int_15.c":31:59)
#loc32 = loc("CWE681_Incorrect_Conversion_Between_Numeric_Types__double2int_15.c":32:9)
#loc33 = loc("CWE681_Incorrect_Conversion_Between_Numeric_Types__double2int_15.c":35:9)
#loc34 = loc("CWE681_Incorrect_Conversion_Between_Numeric_Types__double2int_15.c":37:9)
#loc35 = loc("CWE681_Incorrect_Conversion_Between_Numeric_Types__double2int_15.c":34:33)
#loc36 = loc("CWE681_Incorrect_Conversion_Between_Numeric_Types__double2int_15.c":34:28)
#loc37 = loc("CWE681_Incorrect_Conversion_Between_Numeric_Types__double2int_15.c":34:13)
#loc38 = loc("CWE681_Incorrect_Conversion_Between_Numeric_Types__double2int_15.c":34:44)
#loc39 = loc("CWE681_Incorrect_Conversion_Between_Numeric_Types__double2int_15.c":38:13)
#loc40 = loc("CWE681_Incorrect_Conversion_Between_Numeric_Types__double2int_15.c":41:27)
#loc41 = loc("CWE681_Incorrect_Conversion_Between_Numeric_Types__double2int_15.c":41:9)
#loc42 = loc("CWE681_Incorrect_Conversion_Between_Numeric_Types__double2int_15.c":43:5)
#loc43 = loc("CWE681_Incorrect_Conversion_Between_Numeric_Types__double2int_15.c":44:5)
#loc44 = loc("CWE681_Incorrect_Conversion_Between_Numeric_Types__double2int_15.c":46:9)
#loc45 = loc("CWE681_Incorrect_Conversion_Between_Numeric_Types__double2int_15.c":47:9)
#loc46 = loc("CWE681_Incorrect_Conversion_Between_Numeric_Types__double2int_15.c":137:1)
#loc47 = loc("CWE681_Incorrect_Conversion_Between_Numeric_Types__double2int_15.c":141:1)
#loc48 = loc("CWE681_Incorrect_Conversion_Between_Numeric_Types__double2int_15.c":139:5)
#loc49 = loc("CWE681_Incorrect_Conversion_Between_Numeric_Types__double2int_15.c":139:11)
#loc50 = loc("CWE681_Incorrect_Conversion_Between_Numeric_Types__double2int_15.c":140:5)
#loc51 = loc("CWE681_Incorrect_Conversion_Between_Numeric_Types__double2int_15.c":140:11)
#loc52 = loc("/usr/include/stdlib.h":575:1)
#loc53 = loc("/usr/include/stdlib.h":575:41)
#loc54 = loc("/usr/include/time.h":76:1)
#loc55 = loc("/usr/include/time.h":76:38)
#loc56 = loc("CWE681_Incorrect_Conversion_Between_Numeric_Types__double2int_15.c":157:15)
#loc57 = loc("CWE681_Incorrect_Conversion_Between_Numeric_Types__double2int_15.c":159:15)
#loc58 = loc("CWE681_Incorrect_Conversion_Between_Numeric_Types__double2int_15.c":162:15)
#loc59 = loc("CWE681_Incorrect_Conversion_Between_Numeric_Types__double2int_15.c":164:15)
#loc60 = loc("CWE681_Incorrect_Conversion_Between_Numeric_Types__double2int_15.c":152:1)
#loc61 = loc("CWE681_Incorrect_Conversion_Between_Numeric_Types__double2int_15.c":167:1)
#loc66 = loc("CWE681_Incorrect_Conversion_Between_Numeric_Types__double2int_15.c":153:1)
#loc67 = loc("CWE681_Incorrect_Conversion_Between_Numeric_Types__double2int_15.c":155:27)
#loc68 = loc("CWE681_Incorrect_Conversion_Between_Numeric_Types__double2int_15.c":155:22)
#loc69 = loc("CWE681_Incorrect_Conversion_Between_Numeric_Types__double2int_15.c":155:5)
#loc70 = loc("CWE681_Incorrect_Conversion_Between_Numeric_Types__double2int_15.c":157:5)
#loc71 = loc("CWE681_Incorrect_Conversion_Between_Numeric_Types__double2int_15.c":158:5)
#loc72 = loc("CWE681_Incorrect_Conversion_Between_Numeric_Types__double2int_15.c":158:75)
#loc73 = loc("CWE681_Incorrect_Conversion_Between_Numeric_Types__double2int_15.c":159:5)
#loc74 = loc("CWE681_Incorrect_Conversion_Between_Numeric_Types__double2int_15.c":162:5)
#loc75 = loc("CWE681_Incorrect_Conversion_Between_Numeric_Types__double2int_15.c":163:5)
#loc76 = loc("CWE681_Incorrect_Conversion_Between_Numeric_Types__double2int_15.c":163:74)
#loc77 = loc("CWE681_Incorrect_Conversion_Between_Numeric_Types__double2int_15.c":164:5)
#loc78 = loc("CWE681_Incorrect_Conversion_Between_Numeric_Types__double2int_15.c":166:12)
#loc79 = loc("CWE681_Incorrect_Conversion_Between_Numeric_Types__double2int_15.c":166:5)
#loc80 = loc("CWE681_Incorrect_Conversion_Between_Numeric_Types__double2int_15.c":85:23)
#loc81 = loc("CWE681_Incorrect_Conversion_Between_Numeric_Types__double2int_15.c":56:1)
#loc82 = loc("CWE681_Incorrect_Conversion_Between_Numeric_Types__double2int_15.c":94:1)
#loc83 = loc("CWE681_Incorrect_Conversion_Between_Numeric_Types__double2int_15.c":58:5)
#loc84 = loc("CWE681_Incorrect_Conversion_Between_Numeric_Types__double2int_15.c":93:5)
#loc85 = loc("CWE681_Incorrect_Conversion_Between_Numeric_Types__double2int_15.c":58:12)
#loc86 = loc("CWE681_Incorrect_Conversion_Between_Numeric_Types__double2int_15.c":60:5)
#loc87 = loc("CWE681_Incorrect_Conversion_Between_Numeric_Types__double2int_15.c":62:19)
#loc88 = loc("CWE681_Incorrect_Conversion_Between_Numeric_Types__double2int_15.c":62:9)
#loc89 = loc("CWE681_Incorrect_Conversion_Between_Numeric_Types__double2int_15.c":63:9)
#loc90 = loc("CWE681_Incorrect_Conversion_Between_Numeric_Types__double2int_15.c":64:5)
#loc91 = loc("CWE681_Incorrect_Conversion_Between_Numeric_Types__double2int_15.c":65:5)
#loc92 = loc("CWE681_Incorrect_Conversion_Between_Numeric_Types__double2int_15.c":91:5)
#loc93 = loc("CWE681_Incorrect_Conversion_Between_Numeric_Types__double2int_15.c":66:9)
#loc94 = loc("CWE681_Incorrect_Conversion_Between_Numeric_Types__double2int_15.c":66:41)
#loc95 = loc("CWE681_Incorrect_Conversion_Between_Numeric_Types__double2int_15.c":67:9)
#loc96 = loc("CWE681_Incorrect_Conversion_Between_Numeric_Types__double2int_15.c":67:31)
#loc97 = loc("CWE681_Incorrect_Conversion_Between_Numeric_Types__double2int_15.c":73:9)
#loc98 = loc("CWE681_Incorrect_Conversion_Between_Numeric_Types__double2int_15.c":81:9)
#loc99 = loc("CWE681_Incorrect_Conversion_Between_Numeric_Types__double2int_15.c":73:19)
#loc100 = loc("CWE681_Incorrect_Conversion_Between_Numeric_Types__double2int_15.c":73:32)
#loc101 = loc("CWE681_Incorrect_Conversion_Between_Numeric_Types__double2int_15.c":73:49)
#loc102 = loc("CWE681_Incorrect_Conversion_Between_Numeric_Types__double2int_15.c":73:13)
#loc103 = loc("CWE681_Incorrect_Conversion_Between_Numeric_Types__double2int_15.c":73:59)
#loc104 = loc("CWE681_Incorrect_Conversion_Between_Numeric_Types__double2int_15.c":74:9)
#loc105 = loc("CWE681_Incorrect_Conversion_Between_Numeric_Types__double2int_15.c":77:9)
#loc106 = loc("CWE681_Incorrect_Conversion_Between_Numeric_Types__double2int_15.c":79:9)
#loc107 = loc("CWE681_Incorrect_Conversion_Between_Numeric_Types__double2int_15.c":76:33)
#loc108 = loc("CWE681_Incorrect_Conversion_Between_Numeric_Types__double2int_15.c":76:28)
#loc109 = loc("CWE681_Incorrect_Conversion_Between_Numeric_Types__double2int_15.c":76:13)
#loc110 = loc("CWE681_Incorrect_Conversion_Between_Numeric_Types__double2int_15.c":76:44)
#loc111 = loc("CWE681_Incorrect_Conversion_Between_Numeric_Types__double2int_15.c":80:23)
#loc112 = loc("CWE681_Incorrect_Conversion_Between_Numeric_Types__double2int_15.c":80:13)
#loc113 = loc("CWE681_Incorrect_Conversion_Between_Numeric_Types__double2int_15.c":83:9)
#loc114 = loc("CWE681_Incorrect_Conversion_Between_Numeric_Types__double2int_15.c":90:9)
#loc115 = loc("CWE681_Incorrect_Conversion_Between_Numeric_Types__double2int_15.c":83:13)
#loc116 = loc("CWE681_Incorrect_Conversion_Between_Numeric_Types__double2int_15.c":83:28)
#loc117 = loc("CWE681_Incorrect_Conversion_Between_Numeric_Types__double2int_15.c":83:36)
#loc118 = loc("CWE681_Incorrect_Conversion_Between_Numeric_Types__double2int_15.c":83:39)
#loc119 = loc("CWE681_Incorrect_Conversion_Between_Numeric_Types__double2int_15.c":83:54)
#loc120 = loc("CWE681_Incorrect_Conversion_Between_Numeric_Types__double2int_15.c":84:9)
#loc121 = loc("CWE681_Incorrect_Conversion_Between_Numeric_Types__double2int_15.c":86:9)
#loc122 = loc("CWE681_Incorrect_Conversion_Between_Numeric_Types__double2int_15.c":88:9)
#loc123 = loc("CWE681_Incorrect_Conversion_Between_Numeric_Types__double2int_15.c":85:13)
#loc124 = loc("CWE681_Incorrect_Conversion_Between_Numeric_Types__double2int_15.c":89:31)
#loc125 = loc("CWE681_Incorrect_Conversion_Between_Numeric_Types__double2int_15.c":89:13)
#loc126 = loc("CWE681_Incorrect_Conversion_Between_Numeric_Types__double2int_15.c":92:5)
#loc127 = loc("CWE681_Incorrect_Conversion_Between_Numeric_Types__double2int_15.c":97:1)
#loc128 = loc("CWE681_Incorrect_Conversion_Between_Numeric_Types__double2int_15.c":135:1)
#loc129 = loc("CWE681_Incorrect_Conversion_Between_Numeric_Types__double2int_15.c":99:5)
#loc130 = loc("CWE681_Incorrect_Conversion_Between_Numeric_Types__double2int_15.c":134:5)
#loc131 = loc("CWE681_Incorrect_Conversion_Between_Numeric_Types__double2int_15.c":99:12)
#loc132 = loc("CWE681_Incorrect_Conversion_Between_Numeric_Types__double2int_15.c":101:5)
#loc133 = loc("CWE681_Incorrect_Conversion_Between_Numeric_Types__double2int_15.c":102:5)
#loc134 = loc("CWE681_Incorrect_Conversion_Between_Numeric_Types__double2int_15.c":128:5)
#loc135 = loc("CWE681_Incorrect_Conversion_Between_Numeric_Types__double2int_15.c":103:9)
#loc136 = loc("CWE681_Incorrect_Conversion_Between_Numeric_Types__double2int_15.c":103:41)
#loc137 = loc("CWE681_Incorrect_Conversion_Between_Numeric_Types__double2int_15.c":104:9)
#loc138 = loc("CWE681_Incorrect_Conversion_Between_Numeric_Types__double2int_15.c":104:31)
#loc139 = loc("CWE681_Incorrect_Conversion_Between_Numeric_Types__double2int_15.c":110:9)
#loc140 = loc("CWE681_Incorrect_Conversion_Between_Numeric_Types__double2int_15.c":118:9)
#loc141 = loc("CWE681_Incorrect_Conversion_Between_Numeric_Types__double2int_15.c":110:19)
#loc142 = loc("CWE681_Incorrect_Conversion_Between_Numeric_Types__double2int_15.c":110:32)
#loc143 = loc("CWE681_Incorrect_Conversion_Between_Numeric_Types__double2int_15.c":110:49)
#loc144 = loc("CWE681_Incorrect_Conversion_Between_Numeric_Types__double2int_15.c":110:13)
#loc145 = loc("CWE681_Incorrect_Conversion_Between_Numeric_Types__double2int_15.c":110:59)
#loc146 = loc("CWE681_Incorrect_Conversion_Between_Numeric_Types__double2int_15.c":111:9)
#loc147 = loc("CWE681_Incorrect_Conversion_Between_Numeric_Types__double2int_15.c":114:9)
#loc148 = loc("CWE681_Incorrect_Conversion_Between_Numeric_Types__double2int_15.c":116:9)
#loc149 = loc("CWE681_Incorrect_Conversion_Between_Numeric_Types__double2int_15.c":113:33)
#loc150 = loc("CWE681_Incorrect_Conversion_Between_Numeric_Types__double2int_15.c":113:28)
#loc151 = loc("CWE681_Incorrect_Conversion_Between_Numeric_Types__double2int_15.c":113:13)
#loc152 = loc("CWE681_Incorrect_Conversion_Between_Numeric_Types__double2int_15.c":113:44)
#loc153 = loc("CWE681_Incorrect_Conversion_Between_Numeric_Types__double2int_15.c":117:23)
#loc154 = loc("CWE681_Incorrect_Conversion_Between_Numeric_Types__double2int_15.c":117:13)
#loc155 = loc("CWE681_Incorrect_Conversion_Between_Numeric_Types__double2int_15.c":120:9)
#loc156 = loc("CWE681_Incorrect_Conversion_Between_Numeric_Types__double2int_15.c":127:9)
#loc157 = loc("CWE681_Incorrect_Conversion_Between_Numeric_Types__double2int_15.c":120:13)
#loc158 = loc("CWE681_Incorrect_Conversion_Between_Numeric_Types__double2int_15.c":120:28)
#loc159 = loc("CWE681_Incorrect_Conversion_Between_Numeric_Types__double2int_15.c":120:36)
#loc160 = loc("CWE681_Incorrect_Conversion_Between_Numeric_Types__double2int_15.c":120:39)
#loc161 = loc("CWE681_Incorrect_Conversion_Between_Numeric_Types__double2int_15.c":120:54)
#loc162 = loc("CWE681_Incorrect_Conversion_Between_Numeric_Types__double2int_15.c":121:9)
#loc163 = loc("CWE681_Incorrect_Conversion_Between_Numeric_Types__double2int_15.c":123:9)
#loc164 = loc("CWE681_Incorrect_Conversion_Between_Numeric_Types__double2int_15.c":125:9)
#loc165 = loc("CWE681_Incorrect_Conversion_Between_Numeric_Types__double2int_15.c":122:23)
#loc166 = loc("CWE681_Incorrect_Conversion_Between_Numeric_Types__double2int_15.c":122:13)
#loc167 = loc("CWE681_Incorrect_Conversion_Between_Numeric_Types__double2int_15.c":126:31)
#loc168 = loc("CWE681_Incorrect_Conversion_Between_Numeric_Types__double2int_15.c":126:13)
#loc169 = loc("CWE681_Incorrect_Conversion_Between_Numeric_Types__double2int_15.c":129:5)
#loc170 = loc("CWE681_Incorrect_Conversion_Between_Numeric_Types__double2int_15.c":130:5)
#loc171 = loc("CWE681_Incorrect_Conversion_Between_Numeric_Types__double2int_15.c":132:19)
#loc172 = loc("CWE681_Incorrect_Conversion_Between_Numeric_Types__double2int_15.c":132:9)
#loc173 = loc("CWE681_Incorrect_Conversion_Between_Numeric_Types__double2int_15.c":133:9)
#loc174 = loc(fused[#loc1, #loc2])
#loc175 = loc(fused[#loc3, #loc4])
#loc176 = loc(fused[#loc5, #loc6])
#loc177 = loc(fused[#loc7, #loc8])
#loc178 = loc(fused[#loc10, #loc11])
#loc179 = loc(fused[#loc13, #loc14])
#loc180 = loc(fused[#loc15, #loc16])
#loc181 = loc(fused[#loc19, #loc20])
#loc182 = loc(fused[#loc21, #loc22])
#loc183 = loc(fused[#loc23, #loc24])
#loc184 = loc(fused[#loc25, #loc26])
#loc185 = loc(fused[#loc30, #loc31])
#loc186 = loc(fused[#loc32, #loc33, #loc34, #loc26])
#loc187 = loc(fused[#loc37, #loc38])
#loc188 = loc(fused[#loc46, #loc47])
#loc189 = loc(fused[#loc48, #loc49])
#loc190 = loc(fused[#loc50, #loc51])
#loc191 = loc(fused[#loc52, #loc53])
#loc192 = loc(fused[#loc54, #loc55])
#loc193 = loc(fused[#loc60, #loc61])
#loc196 = loc(fused[#loc71, #loc72])
#loc197 = loc(fused[#loc75, #loc76])
#loc198 = loc(fused[#loc79, #loc78])
#loc199 = loc(fused[#loc81, #loc82])
#loc200 = loc(fused[#loc83, #loc84])
#loc201 = loc(fused[#loc91, #loc92])
#loc202 = loc(fused[#loc93, #loc94])
#loc203 = loc(fused[#loc95, #loc96])
#loc204 = loc(fused[#loc97, #loc98])
#loc205 = loc(fused[#loc102, #loc103])
#loc206 = loc(fused[#loc104, #loc105, #loc106, #loc98])
#loc207 = loc(fused[#loc109, #loc110])
#loc208 = loc(fused[#loc113, #loc114])
#loc209 = loc(fused[#loc115, #loc116])
#loc210 = loc(fused[#loc118, #loc119])
#loc211 = loc(fused[#loc120, #loc121, #loc122, #loc114])
#loc212 = loc(fused[#loc127, #loc128])
#loc213 = loc(fused[#loc129, #loc130])
#loc214 = loc(fused[#loc133, #loc134])
#loc215 = loc(fused[#loc135, #loc136])
#loc216 = loc(fused[#loc137, #loc138])
#loc217 = loc(fused[#loc139, #loc140])
#loc218 = loc(fused[#loc144, #loc145])
#loc219 = loc(fused[#loc146, #loc147, #loc148, #loc140])
#loc220 = loc(fused[#loc151, #loc152])
#loc221 = loc(fused[#loc155, #loc156])
#loc222 = loc(fused[#loc157, #loc158])
#loc223 = loc(fused[#loc160, #loc161])
#loc224 = loc(fused[#loc162, #loc163, #loc164, #loc156])
