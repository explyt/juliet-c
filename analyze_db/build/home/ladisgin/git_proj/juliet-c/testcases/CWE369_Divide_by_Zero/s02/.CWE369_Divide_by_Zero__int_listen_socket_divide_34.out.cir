!s32i = !cir.int<s, 32>
!s64i = !cir.int<s, 64>
!s8i = !cir.int<s, 8>
!u16i = !cir.int<u, 16>
!u32i = !cir.int<u, 32>
!u64i = !cir.int<u, 64>
!u8i = !cir.int<u, 8>
!void = !cir.void
#false = #cir.bool<false> : !cir.bool
#fn_attr = #cir<extra({nothrow = #cir.nothrow})>
#fn_attr1 = #cir<extra({inline = #cir.inline<no>, nothrow = #cir.nothrow, optnone = #cir.optnone})>
#loc172 = loc("CWE369_Divide_by_Zero__int_listen_socket_divide_34.c":259:10)
#loc173 = loc("CWE369_Divide_by_Zero__int_listen_socket_divide_34.c":259:14)
#loc174 = loc("CWE369_Divide_by_Zero__int_listen_socket_divide_34.c":259:20)
#loc175 = loc("CWE369_Divide_by_Zero__int_listen_socket_divide_34.c":259:32)
#true = #cir.bool<true> : !cir.bool
!ty_CWE369_Divide_by_Zero__int_listen_socket_divide_34_unionType = !cir.struct<union "CWE369_Divide_by_Zero__int_listen_socket_divide_34_unionType" {!s32i, !s32i}>
!ty_in_addr = !cir.struct<struct "in_addr" {!u32i} #cir.record.decl.ast>
#loc415 = loc(fused[#loc172, #loc173])
#loc416 = loc(fused[#loc174, #loc175])
!ty_sockaddr = !cir.struct<struct "sockaddr" {!u16i, !cir.array<!s8i x 14>} #cir.record.decl.ast>
!ty_sockaddr_in = !cir.struct<struct "sockaddr_in" {!u16i, !u16i, !ty_in_addr, !cir.array<!u8i x 8>}>
module @"/home/ladisgin/git_proj/juliet-c/testcases/CWE369_Divide_by_Zero/s02/CWE369_Divide_by_Zero__int_listen_socket_divide_34.c" attributes {cir.lang = #cir.lang<c>, cir.sob = #cir.signed_overflow_behavior<undefined>, cir.triple = "x86_64-unknown-linux-gnu", dlti.dl_spec = #dlti.dl_spec<f16 = dense<16> : vector<2xi64>, f64 = dense<64> : vector<2xi64>, !llvm.ptr<270> = dense<32> : vector<4xi64>, !llvm.ptr<271> = dense<32> : vector<4xi64>, f128 = dense<128> : vector<2xi64>, i8 = dense<8> : vector<2xi64>, i1 = dense<8> : vector<2xi64>, i32 = dense<32> : vector<2xi64>, i16 = dense<16> : vector<2xi64>, f80 = dense<128> : vector<2xi64>, !llvm.ptr = dense<64> : vector<4xi64>, !llvm.ptr<272> = dense<64> : vector<4xi64>, i64 = dense<64> : vector<2xi64>, i128 = dense<128> : vector<2xi64>, "dlti.endianness" = "little", "dlti.stack_alignment" = 128 : i64>} {
  cir.func private @socket(!s32i, !s32i, !s32i) -> !s32i extra(#fn_attr) loc(#loc348)
  cir.func private @htons(!u16i) -> !u16i extra(#fn_attr) loc(#loc349)
  cir.func private @bind(!s32i, !cir.ptr<!ty_sockaddr>, !u32i) -> !s32i extra(#fn_attr) loc(#loc350)
  cir.func private @listen(!s32i, !s32i) -> !s32i extra(#fn_attr) loc(#loc351)
  cir.func private @accept(!s32i, !cir.ptr<!ty_sockaddr>, !cir.ptr<!u32i>) -> !s32i loc(#loc352)
  cir.func private @recv(!s32i, !cir.ptr<!void>, !u64i, !s32i) -> !s64i loc(#loc353)
  cir.func private @atoi(!cir.ptr<!s8i>) -> !s32i extra(#fn_attr) loc(#loc354)
  cir.func private @close(!s32i) -> !s32i loc(#loc355)
  cir.func private @printIntLine(!s32i) loc(#loc356)
  cir.func no_proto @CWE369_Divide_by_Zero__int_listen_socket_divide_34_bad() extra(#fn_attr1) {
    %0 = cir.alloca !s32i, !cir.ptr<!s32i>, ["data"] {alignment = 4 : i64} loc(#loc358)
    %1 = cir.alloca !ty_CWE369_Divide_by_Zero__int_listen_socket_divide_34_unionType, !cir.ptr<!ty_CWE369_Divide_by_Zero__int_listen_socket_divide_34_unionType>, ["myUnion"] {alignment = 4 : i64} loc(#loc359)
    %2 = cir.const #cir.int<1> : !s32i loc(#loc25)
    %3 = cir.unary(minus, %2) : !s32i, !s32i loc(#loc26)
    cir.store %3, %0 : !s32i, !cir.ptr<!s32i> loc(#loc360)
    cir.scope {
      %6 = cir.alloca !s32i, !cir.ptr<!s32i>, ["recvResult"] {alignment = 4 : i64} loc(#loc362)
      %7 = cir.alloca !ty_sockaddr_in, !cir.ptr<!ty_sockaddr_in>, ["service"] {alignment = 4 : i64} loc(#loc363)
      %8 = cir.alloca !s32i, !cir.ptr<!s32i>, ["listenSocket", init] {alignment = 4 : i64} loc(#loc364)
      %9 = cir.alloca !s32i, !cir.ptr<!s32i>, ["acceptSocket", init] {alignment = 4 : i64} loc(#loc365)
      %10 = cir.alloca !cir.array<!s8i x 14>, !cir.ptr<!cir.array<!s8i x 14>>, ["inputBuffer"] {alignment = 1 : i64} loc(#loc366)
      %11 = cir.const #cir.int<1> : !s32i loc(#loc35)
      %12 = cir.unary(minus, %11) : !s32i, !s32i loc(#loc35)
      cir.store %12, %8 : !s32i, !cir.ptr<!s32i> loc(#loc364)
      %13 = cir.const #cir.int<1> : !s32i loc(#loc37)
      %14 = cir.unary(minus, %13) : !s32i, !s32i loc(#loc37)
      cir.store %14, %9 : !s32i, !cir.ptr<!s32i> loc(#loc365)
      cir.scope {
        cir.do {
          %15 = cir.const #cir.int<2> : !s32i loc(#loc42)
          %16 = cir.const #cir.int<1> : !s32i loc(#loc43)
          %17 = cir.const #cir.int<6> : !s32i loc(#loc44)
          %18 = cir.call @socket(%15, %16, %17) : (!s32i, !s32i, !s32i) -> !s32i extra(#fn_attr) loc(#loc45)
          cir.store %18, %8 : !s32i, !cir.ptr<!s32i> loc(#loc368)
          cir.scope {
            %60 = cir.load %8 : !cir.ptr<!s32i>, !s32i loc(#loc50)
            %61 = cir.const #cir.int<1> : !s32i loc(#loc51)
            %62 = cir.unary(minus, %61) : !s32i, !s32i loc(#loc51)
            %63 = cir.cmp(eq, %60, %62) : !s32i, !cir.bool loc(#loc370)
            cir.if %63 {
              cir.break loc(#loc53)
            } loc(#loc371)
          } loc(#loc369)
          %19 = cir.cast(bitcast, %7 : !cir.ptr<!ty_sockaddr_in>), !cir.ptr<!void> loc(#loc372)
          %20 = cir.const #cir.int<0> : !s32i loc(#loc56)
          %21 = cir.const #cir.int<16> : !u64i loc(#loc373)
          cir.libc.memset %21 bytes from %19 set to %20 : !cir.ptr<!void>, !s32i, !u64i loc(#loc374)
          %22 = cir.const #cir.int<2> : !s32i loc(#loc61)
          %23 = cir.cast(integral, %22 : !s32i), !u16i loc(#loc61)
          %24 = cir.get_member %7[0] {name = "sin_family"} : !cir.ptr<!ty_sockaddr_in> -> !cir.ptr<!u16i> loc(#loc62)
          cir.store %23, %24 : !u16i, !cir.ptr<!u16i> loc(#loc375)
          %25 = cir.const #cir.int<0> : !s32i loc(#loc64)
          %26 = cir.cast(integral, %25 : !s32i), !u32i loc(#loc64)
          %27 = cir.get_member %7[2] {name = "sin_addr"} : !cir.ptr<!ty_sockaddr_in> -> !cir.ptr<!ty_in_addr> loc(#loc65)
          %28 = cir.get_member %27[0] {name = "s_addr"} : !cir.ptr<!ty_in_addr> -> !cir.ptr<!u32i> loc(#loc66)
          cir.store %26, %28 : !u32i, !cir.ptr<!u32i> loc(#loc376)
          %29 = cir.const #cir.int<27015> : !s32i loc(#loc68)
          %30 = cir.cast(integral, %29 : !s32i), !u16i loc(#loc68)
          %31 = cir.call @htons(%30) : (!u16i) -> !u16i extra(#fn_attr) loc(#loc69)
          %32 = cir.get_member %7[1] {name = "sin_port"} : !cir.ptr<!ty_sockaddr_in> -> !cir.ptr<!u16i> loc(#loc70)
          cir.store %31, %32 : !u16i, !cir.ptr<!u16i> loc(#loc377)
          cir.scope {
            %60 = cir.load %8 : !cir.ptr<!s32i>, !s32i loc(#loc75)
            %61 = cir.cast(bitcast, %7 : !cir.ptr<!ty_sockaddr_in>), !cir.ptr<!ty_sockaddr> loc(#loc379)
            %62 = cir.const #cir.int<16> : !u64i loc(#loc380)
            %63 = cir.cast(integral, %62 : !u64i), !u32i loc(#loc380)
            %64 = cir.call @bind(%60, %61, %63) : (!s32i, !cir.ptr<!ty_sockaddr>, !u32i) -> !s32i extra(#fn_attr) loc(#loc80)
            %65 = cir.const #cir.int<1> : !s32i loc(#loc81)
            %66 = cir.unary(minus, %65) : !s32i, !s32i loc(#loc81)
            %67 = cir.cmp(eq, %64, %66) : !s32i, !cir.bool loc(#loc381)
            cir.if %67 {
              cir.break loc(#loc83)
            } loc(#loc382)
          } loc(#loc378)
          cir.scope {
            %60 = cir.load %8 : !cir.ptr<!s32i>, !s32i loc(#loc86)
            %61 = cir.const #cir.int<5> : !s32i loc(#loc87)
            %62 = cir.call @listen(%60, %61) : (!s32i, !s32i) -> !s32i extra(#fn_attr) loc(#loc88)
            %63 = cir.const #cir.int<1> : !s32i loc(#loc89)
            %64 = cir.unary(minus, %63) : !s32i, !s32i loc(#loc89)
            %65 = cir.cmp(eq, %62, %64) : !s32i, !cir.bool loc(#loc384)
            cir.if %65 {
              cir.break loc(#loc91)
            } loc(#loc385)
          } loc(#loc383)
          %33 = cir.load %8 : !cir.ptr<!s32i>, !s32i loc(#loc92)
          %34 = cir.const #cir.ptr<null> : !cir.ptr<!ty_sockaddr> loc(#loc93)
          %35 = cir.const #cir.ptr<null> : !cir.ptr<!u32i> loc(#loc94)
          %36 = cir.call @accept(%33, %34, %35) : (!s32i, !cir.ptr<!ty_sockaddr>, !cir.ptr<!u32i>) -> !s32i loc(#loc95)
          cir.store %36, %9 : !s32i, !cir.ptr<!s32i> loc(#loc386)
          cir.scope {
            %60 = cir.load %9 : !cir.ptr<!s32i>, !s32i loc(#loc100)
            %61 = cir.const #cir.int<1> : !s32i loc(#loc101)
            %62 = cir.unary(minus, %61) : !s32i, !s32i loc(#loc101)
            %63 = cir.cmp(eq, %60, %62) : !s32i, !cir.bool loc(#loc388)
            cir.if %63 {
              cir.break loc(#loc103)
            } loc(#loc389)
          } loc(#loc387)
          %37 = cir.load %9 : !cir.ptr<!s32i>, !s32i loc(#loc104)
          %38 = cir.cast(array_to_ptrdecay, %10 : !cir.ptr<!cir.array<!s8i x 14>>), !cir.ptr<!s8i> loc(#loc105)
          %39 = cir.cast(bitcast, %38 : !cir.ptr<!s8i>), !cir.ptr<!void> loc(#loc105)
          %40 = cir.const #cir.int<3> : !s32i loc(#loc106)
          %41 = cir.cast(integral, %40 : !s32i), !u64i loc(#loc106)
          %42 = cir.const #cir.int<4> : !u64i loc(#loc106)
          %43 = cir.binop(mul, %41, %42) : !u64i loc(#loc106)
          %44 = cir.const #cir.int<2> : !s32i loc(#loc106)
          %45 = cir.cast(integral, %44 : !s32i), !u64i loc(#loc106)
          %46 = cir.binop(add, %43, %45) : !u64i loc(#loc106)
          %47 = cir.const #cir.int<1> : !s32i loc(#loc107)
          %48 = cir.cast(integral, %47 : !s32i), !u64i loc(#loc107)
          %49 = cir.binop(sub, %46, %48) : !u64i loc(#loc390)
          %50 = cir.const #cir.int<0> : !s32i loc(#loc108)
          %51 = cir.call @recv(%37, %39, %49, %50) : (!s32i, !cir.ptr<!void>, !u64i, !s32i) -> !s64i loc(#loc109)
          %52 = cir.cast(integral, %51 : !s64i), !s32i loc(#loc109)
          cir.store %52, %6 : !s32i, !cir.ptr<!s32i> loc(#loc391)
          cir.scope {
            %60 = cir.load %6 : !cir.ptr<!s32i>, !s32i loc(#loc114)
            %61 = cir.const #cir.int<1> : !s32i loc(#loc115)
            %62 = cir.unary(minus, %61) : !s32i, !s32i loc(#loc115)
            %63 = cir.cmp(eq, %60, %62) : !s32i, !cir.bool loc(#loc393)
            %64 = cir.ternary(%63, true {
              %65 = cir.const #true loc(#loc116)
              cir.yield %65 : !cir.bool loc(#loc116)
            }, false {
              %65 = cir.load %6 : !cir.ptr<!s32i>, !s32i loc(#loc117)
              %66 = cir.const #cir.int<0> : !s32i loc(#loc118)
              %67 = cir.cmp(eq, %65, %66) : !s32i, !cir.bool loc(#loc394)
              %68 = cir.ternary(%67, true {
                %69 = cir.const #true loc(#loc116)
                cir.yield %69 : !cir.bool loc(#loc116)
              }, false {
                %69 = cir.const #false loc(#loc116)
                cir.yield %69 : !cir.bool loc(#loc116)
              }) : (!cir.bool) -> !cir.bool loc(#loc116)
              cir.yield %68 : !cir.bool loc(#loc116)
            }) : (!cir.bool) -> !cir.bool loc(#loc116)
            cir.if %64 {
              cir.break loc(#loc120)
            } loc(#loc395)
          } loc(#loc392)
          %53 = cir.const #cir.int<0> : !s32i loc(#loc121)
          %54 = cir.cast(integral, %53 : !s32i), !s8i loc(#loc121)
          %55 = cir.load %6 : !cir.ptr<!s32i>, !s32i loc(#loc122)
          %56 = cir.cast(array_to_ptrdecay, %10 : !cir.ptr<!cir.array<!s8i x 14>>), !cir.ptr<!s8i> loc(#loc123)
          %57 = cir.ptr_stride(%56 : !cir.ptr<!s8i>, %55 : !s32i), !cir.ptr<!s8i> loc(#loc123)
          cir.store %54, %57 : !s8i, !cir.ptr<!s8i> loc(#loc396)
          %58 = cir.cast(array_to_ptrdecay, %10 : !cir.ptr<!cir.array<!s8i x 14>>), !cir.ptr<!s8i> loc(#loc124)
          %59 = cir.call @atoi(%58) : (!cir.ptr<!s8i>) -> !s32i extra(#fn_attr) loc(#loc125)
          cir.store %59, %0 : !s32i, !cir.ptr<!s32i> loc(#loc397)
          cir.yield loc(#loc41)
        } while {
          %15 = cir.const #cir.int<0> : !s32i loc(#loc128)
          %16 = cir.cast(int_to_bool, %15 : !s32i), !cir.bool loc(#loc128)
          cir.condition(%16) loc(#loc128)
        } loc(#loc367)
      } loc(#loc367)
      cir.scope {
        %15 = cir.load %8 : !cir.ptr<!s32i>, !s32i loc(#loc131)
        %16 = cir.const #cir.int<1> : !s32i loc(#loc132)
        %17 = cir.unary(minus, %16) : !s32i, !s32i loc(#loc132)
        %18 = cir.cmp(ne, %15, %17) : !s32i, !cir.bool loc(#loc399)
        cir.if %18 {
          %19 = cir.load %8 : !cir.ptr<!s32i>, !s32i loc(#loc134)
          %20 = cir.call @close(%19) : (!s32i) -> !s32i loc(#loc135)
        } loc(#loc400)
      } loc(#loc398)
      cir.scope {
        %15 = cir.load %9 : !cir.ptr<!s32i>, !s32i loc(#loc138)
        %16 = cir.const #cir.int<1> : !s32i loc(#loc139)
        %17 = cir.unary(minus, %16) : !s32i, !s32i loc(#loc139)
        %18 = cir.cmp(ne, %15, %17) : !s32i, !cir.bool loc(#loc402)
        cir.if %18 {
          %19 = cir.load %9 : !cir.ptr<!s32i>, !s32i loc(#loc141)
          %20 = cir.call @close(%19) : (!s32i) -> !s32i loc(#loc142)
        } loc(#loc403)
      } loc(#loc401)
    } loc(#loc361)
    %4 = cir.load %0 : !cir.ptr<!s32i>, !s32i loc(#loc143)
    %5 = cir.get_member %1[0] {name = "unionFirst"} : !cir.ptr<!ty_CWE369_Divide_by_Zero__int_listen_socket_divide_34_unionType> -> !cir.ptr<!s32i> loc(#loc144)
    cir.store %4, %5 : !s32i, !cir.ptr<!s32i> loc(#loc404)
    cir.scope {
      %6 = cir.alloca !s32i, !cir.ptr<!s32i>, ["data", init] {alignment = 4 : i64} loc(#loc406)
      %7 = cir.get_member %1[1] {name = "unionSecond"} : !cir.ptr<!ty_CWE369_Divide_by_Zero__int_listen_socket_divide_34_unionType> -> !cir.ptr<!s32i> loc(#loc150)
      %8 = cir.load %7 : !cir.ptr<!s32i>, !s32i loc(#loc149)
      cir.store %8, %6 : !s32i, !cir.ptr<!s32i> loc(#loc406)
      %9 = cir.const #cir.int<100> : !s32i loc(#loc151)
      %10 = cir.load %6 : !cir.ptr<!s32i>, !s32i loc(#loc152)
      %11 = cir.binop(div, %9, %10) : !s32i loc(#loc407)
      cir.call @printIntLine(%11) : (!s32i) -> () loc(#loc153)
    } loc(#loc405)
    cir.return loc(#loc20)
  } loc(#loc357)
  cir.func no_proto @CWE369_Divide_by_Zero__int_listen_socket_divide_34_good() extra(#fn_attr1) {
    %0 = cir.get_global @goodG2B : !cir.ptr<!cir.func<!void ()>> loc(#loc409)
    cir.call %0() : (!cir.ptr<!cir.func<!void ()>>) -> () loc(#loc156)
    %1 = cir.get_global @goodB2G : !cir.ptr<!cir.func<!void ()>> loc(#loc410)
    cir.call %1() : (!cir.ptr<!cir.func<!void ()>>) -> () loc(#loc158)
    cir.return loc(#loc155)
  } loc(#loc408)
  cir.func private @srand(!u32i) extra(#fn_attr) loc(#loc411)
  cir.func private @time(!cir.ptr<!s64i>) -> !s64i extra(#fn_attr) loc(#loc412)
  cir.func private @printLine(!cir.ptr<!s8i>) loc(#loc413)
  cir.global "private" constant cir_private dsolocal @".str" = #cir.const_array<"Calling good()...\00" : !cir.array<!s8i x 18>> : !cir.array<!s8i x 18> {alignment = 1 : i64} loc(#loc166)
  cir.global "private" constant cir_private dsolocal @".str.1" = #cir.const_array<"Finished good()\00" : !cir.array<!s8i x 16>> : !cir.array<!s8i x 16> {alignment = 1 : i64} loc(#loc167)
  cir.global "private" constant cir_private dsolocal @".str.2" = #cir.const_array<"Calling bad()...\00" : !cir.array<!s8i x 17>> : !cir.array<!s8i x 17> {alignment = 1 : i64} loc(#loc168)
  cir.global "private" constant cir_private dsolocal @".str.3" = #cir.const_array<"Finished bad()\00" : !cir.array<!s8i x 15>> : !cir.array<!s8i x 15> {alignment = 1 : i64} loc(#loc169)
  cir.func @main(%arg0: !s32i loc(fused[#loc172, #loc173]), %arg1: !cir.ptr<!cir.ptr<!s8i>> loc(fused[#loc174, #loc175])) -> !s32i extra(#fn_attr1) {
    %0 = cir.alloca !s32i, !cir.ptr<!s32i>, ["argc", init] {alignment = 4 : i64} loc(#loc415)
    %1 = cir.alloca !cir.ptr<!cir.ptr<!s8i>>, !cir.ptr<!cir.ptr<!cir.ptr<!s8i>>>, ["argv", init] {alignment = 8 : i64} loc(#loc416)
    %2 = cir.alloca !s32i, !cir.ptr<!s32i>, ["__retval"] {alignment = 4 : i64} loc(#loc171)
    cir.store %arg0, %0 : !s32i, !cir.ptr<!s32i> loc(#loc176)
    cir.store %arg1, %1 : !cir.ptr<!cir.ptr<!s8i>>, !cir.ptr<!cir.ptr<!cir.ptr<!s8i>>> loc(#loc176)
    %3 = cir.const #cir.ptr<null> : !cir.ptr<!s64i> loc(#loc177)
    %4 = cir.call @time(%3) : (!cir.ptr<!s64i>) -> !s64i extra(#fn_attr) loc(#loc178)
    %5 = cir.cast(integral, %4 : !s64i), !u32i loc(#loc178)
    cir.call @srand(%5) : (!u32i) -> () extra(#fn_attr) loc(#loc179)
    %6 = cir.get_global @".str" : !cir.ptr<!cir.array<!s8i x 18>> loc(#loc166)
    %7 = cir.cast(array_to_ptrdecay, %6 : !cir.ptr<!cir.array<!s8i x 18>>), !cir.ptr<!s8i> loc(#loc166)
    cir.call @printLine(%7) : (!cir.ptr<!s8i>) -> () loc(#loc180)
    %8 = cir.get_global @CWE369_Divide_by_Zero__int_listen_socket_divide_34_good : !cir.ptr<!cir.func<!void ()>> loc(#loc417)
    cir.call @CWE369_Divide_by_Zero__int_listen_socket_divide_34_good() : () -> () loc(#loc181)
    %9 = cir.get_global @".str.1" : !cir.ptr<!cir.array<!s8i x 16>> loc(#loc167)
    %10 = cir.cast(array_to_ptrdecay, %9 : !cir.ptr<!cir.array<!s8i x 16>>), !cir.ptr<!s8i> loc(#loc167)
    cir.call @printLine(%10) : (!cir.ptr<!s8i>) -> () loc(#loc183)
    %11 = cir.get_global @".str.2" : !cir.ptr<!cir.array<!s8i x 17>> loc(#loc168)
    %12 = cir.cast(array_to_ptrdecay, %11 : !cir.ptr<!cir.array<!s8i x 17>>), !cir.ptr<!s8i> loc(#loc168)
    cir.call @printLine(%12) : (!cir.ptr<!s8i>) -> () loc(#loc184)
    %13 = cir.get_global @CWE369_Divide_by_Zero__int_listen_socket_divide_34_bad : !cir.ptr<!cir.func<!void ()>> loc(#loc418)
    cir.call @CWE369_Divide_by_Zero__int_listen_socket_divide_34_bad() : () -> () loc(#loc185)
    %14 = cir.get_global @".str.3" : !cir.ptr<!cir.array<!s8i x 15>> loc(#loc169)
    %15 = cir.cast(array_to_ptrdecay, %14 : !cir.ptr<!cir.array<!s8i x 15>>), !cir.ptr<!s8i> loc(#loc169)
    cir.call @printLine(%15) : (!cir.ptr<!s8i>) -> () loc(#loc187)
    %16 = cir.const #cir.int<0> : !s32i loc(#loc188)
    cir.store %16, %2 : !s32i, !cir.ptr<!s32i> loc(#loc419)
    %17 = cir.load %2 : !cir.ptr<!s32i>, !s32i loc(#loc419)
    cir.return %17 : !s32i loc(#loc419)
  } loc(#loc414)
  cir.func no_proto internal private @goodG2B() extra(#fn_attr1) {
    %0 = cir.alloca !s32i, !cir.ptr<!s32i>, ["data"] {alignment = 4 : i64} loc(#loc421)
    %1 = cir.alloca !ty_CWE369_Divide_by_Zero__int_listen_socket_divide_34_unionType, !cir.ptr<!ty_CWE369_Divide_by_Zero__int_listen_socket_divide_34_unionType>, ["myUnion"] {alignment = 4 : i64} loc(#loc422)
    %2 = cir.const #cir.int<1> : !s32i loc(#loc196)
    %3 = cir.unary(minus, %2) : !s32i, !s32i loc(#loc197)
    cir.store %3, %0 : !s32i, !cir.ptr<!s32i> loc(#loc423)
    %4 = cir.const #cir.int<7> : !s32i loc(#loc199)
    cir.store %4, %0 : !s32i, !cir.ptr<!s32i> loc(#loc424)
    %5 = cir.load %0 : !cir.ptr<!s32i>, !s32i loc(#loc201)
    %6 = cir.get_member %1[0] {name = "unionFirst"} : !cir.ptr<!ty_CWE369_Divide_by_Zero__int_listen_socket_divide_34_unionType> -> !cir.ptr<!s32i> loc(#loc144)
    cir.store %5, %6 : !s32i, !cir.ptr<!s32i> loc(#loc425)
    cir.scope {
      %7 = cir.alloca !s32i, !cir.ptr<!s32i>, ["data", init] {alignment = 4 : i64} loc(#loc427)
      %8 = cir.get_member %1[1] {name = "unionSecond"} : !cir.ptr<!ty_CWE369_Divide_by_Zero__int_listen_socket_divide_34_unionType> -> !cir.ptr<!s32i> loc(#loc150)
      %9 = cir.load %8 : !cir.ptr<!s32i>, !s32i loc(#loc206)
      cir.store %9, %7 : !s32i, !cir.ptr<!s32i> loc(#loc427)
      %10 = cir.const #cir.int<100> : !s32i loc(#loc207)
      %11 = cir.load %7 : !cir.ptr<!s32i>, !s32i loc(#loc208)
      %12 = cir.binop(div, %10, %11) : !s32i loc(#loc428)
      cir.call @printIntLine(%12) : (!s32i) -> () loc(#loc209)
    } loc(#loc426)
    cir.return loc(#loc191)
  } loc(#loc420)
  cir.global "private" constant cir_private dsolocal @".str.4" = #cir.const_array<"This would result in a divide by zero\00" : !cir.array<!s8i x 38>> : !cir.array<!s8i x 38> {alignment = 1 : i64} loc(#loc210)
  cir.func no_proto internal private @goodB2G() extra(#fn_attr1) {
    %0 = cir.alloca !s32i, !cir.ptr<!s32i>, ["data"] {alignment = 4 : i64} loc(#loc430)
    %1 = cir.alloca !ty_CWE369_Divide_by_Zero__int_listen_socket_divide_34_unionType, !cir.ptr<!ty_CWE369_Divide_by_Zero__int_listen_socket_divide_34_unionType>, ["myUnion"] {alignment = 4 : i64} loc(#loc431)
    %2 = cir.const #cir.int<1> : !s32i loc(#loc217)
    %3 = cir.unary(minus, %2) : !s32i, !s32i loc(#loc218)
    cir.store %3, %0 : !s32i, !cir.ptr<!s32i> loc(#loc432)
    cir.scope {
      %6 = cir.alloca !s32i, !cir.ptr<!s32i>, ["recvResult"] {alignment = 4 : i64} loc(#loc434)
      %7 = cir.alloca !ty_sockaddr_in, !cir.ptr<!ty_sockaddr_in>, ["service"] {alignment = 4 : i64} loc(#loc435)
      %8 = cir.alloca !s32i, !cir.ptr<!s32i>, ["listenSocket", init] {alignment = 4 : i64} loc(#loc436)
      %9 = cir.alloca !s32i, !cir.ptr<!s32i>, ["acceptSocket", init] {alignment = 4 : i64} loc(#loc437)
      %10 = cir.alloca !cir.array<!s8i x 14>, !cir.ptr<!cir.array<!s8i x 14>>, ["inputBuffer"] {alignment = 1 : i64} loc(#loc438)
      %11 = cir.const #cir.int<1> : !s32i loc(#loc227)
      %12 = cir.unary(minus, %11) : !s32i, !s32i loc(#loc227)
      cir.store %12, %8 : !s32i, !cir.ptr<!s32i> loc(#loc436)
      %13 = cir.const #cir.int<1> : !s32i loc(#loc229)
      %14 = cir.unary(minus, %13) : !s32i, !s32i loc(#loc229)
      cir.store %14, %9 : !s32i, !cir.ptr<!s32i> loc(#loc437)
      cir.scope {
        cir.do {
          %15 = cir.const #cir.int<2> : !s32i loc(#loc234)
          %16 = cir.const #cir.int<1> : !s32i loc(#loc235)
          %17 = cir.const #cir.int<6> : !s32i loc(#loc236)
          %18 = cir.call @socket(%15, %16, %17) : (!s32i, !s32i, !s32i) -> !s32i extra(#fn_attr) loc(#loc237)
          cir.store %18, %8 : !s32i, !cir.ptr<!s32i> loc(#loc440)
          cir.scope {
            %60 = cir.load %8 : !cir.ptr<!s32i>, !s32i loc(#loc242)
            %61 = cir.const #cir.int<1> : !s32i loc(#loc243)
            %62 = cir.unary(minus, %61) : !s32i, !s32i loc(#loc243)
            %63 = cir.cmp(eq, %60, %62) : !s32i, !cir.bool loc(#loc442)
            cir.if %63 {
              cir.break loc(#loc245)
            } loc(#loc443)
          } loc(#loc441)
          %19 = cir.cast(bitcast, %7 : !cir.ptr<!ty_sockaddr_in>), !cir.ptr<!void> loc(#loc444)
          %20 = cir.const #cir.int<0> : !s32i loc(#loc248)
          %21 = cir.const #cir.int<16> : !u64i loc(#loc445)
          cir.libc.memset %21 bytes from %19 set to %20 : !cir.ptr<!void>, !s32i, !u64i loc(#loc446)
          %22 = cir.const #cir.int<2> : !s32i loc(#loc253)
          %23 = cir.cast(integral, %22 : !s32i), !u16i loc(#loc253)
          %24 = cir.get_member %7[0] {name = "sin_family"} : !cir.ptr<!ty_sockaddr_in> -> !cir.ptr<!u16i> loc(#loc62)
          cir.store %23, %24 : !u16i, !cir.ptr<!u16i> loc(#loc447)
          %25 = cir.const #cir.int<0> : !s32i loc(#loc255)
          %26 = cir.cast(integral, %25 : !s32i), !u32i loc(#loc255)
          %27 = cir.get_member %7[2] {name = "sin_addr"} : !cir.ptr<!ty_sockaddr_in> -> !cir.ptr<!ty_in_addr> loc(#loc65)
          %28 = cir.get_member %27[0] {name = "s_addr"} : !cir.ptr<!ty_in_addr> -> !cir.ptr<!u32i> loc(#loc66)
          cir.store %26, %28 : !u32i, !cir.ptr<!u32i> loc(#loc448)
          %29 = cir.const #cir.int<27015> : !s32i loc(#loc257)
          %30 = cir.cast(integral, %29 : !s32i), !u16i loc(#loc257)
          %31 = cir.call @htons(%30) : (!u16i) -> !u16i extra(#fn_attr) loc(#loc258)
          %32 = cir.get_member %7[1] {name = "sin_port"} : !cir.ptr<!ty_sockaddr_in> -> !cir.ptr<!u16i> loc(#loc70)
          cir.store %31, %32 : !u16i, !cir.ptr<!u16i> loc(#loc449)
          cir.scope {
            %60 = cir.load %8 : !cir.ptr<!s32i>, !s32i loc(#loc263)
            %61 = cir.cast(bitcast, %7 : !cir.ptr<!ty_sockaddr_in>), !cir.ptr<!ty_sockaddr> loc(#loc451)
            %62 = cir.const #cir.int<16> : !u64i loc(#loc452)
            %63 = cir.cast(integral, %62 : !u64i), !u32i loc(#loc452)
            %64 = cir.call @bind(%60, %61, %63) : (!s32i, !cir.ptr<!ty_sockaddr>, !u32i) -> !s32i extra(#fn_attr) loc(#loc268)
            %65 = cir.const #cir.int<1> : !s32i loc(#loc269)
            %66 = cir.unary(minus, %65) : !s32i, !s32i loc(#loc269)
            %67 = cir.cmp(eq, %64, %66) : !s32i, !cir.bool loc(#loc453)
            cir.if %67 {
              cir.break loc(#loc271)
            } loc(#loc454)
          } loc(#loc450)
          cir.scope {
            %60 = cir.load %8 : !cir.ptr<!s32i>, !s32i loc(#loc274)
            %61 = cir.const #cir.int<5> : !s32i loc(#loc275)
            %62 = cir.call @listen(%60, %61) : (!s32i, !s32i) -> !s32i extra(#fn_attr) loc(#loc276)
            %63 = cir.const #cir.int<1> : !s32i loc(#loc277)
            %64 = cir.unary(minus, %63) : !s32i, !s32i loc(#loc277)
            %65 = cir.cmp(eq, %62, %64) : !s32i, !cir.bool loc(#loc456)
            cir.if %65 {
              cir.break loc(#loc279)
            } loc(#loc457)
          } loc(#loc455)
          %33 = cir.load %8 : !cir.ptr<!s32i>, !s32i loc(#loc280)
          %34 = cir.const #cir.ptr<null> : !cir.ptr<!ty_sockaddr> loc(#loc281)
          %35 = cir.const #cir.ptr<null> : !cir.ptr<!u32i> loc(#loc282)
          %36 = cir.call @accept(%33, %34, %35) : (!s32i, !cir.ptr<!ty_sockaddr>, !cir.ptr<!u32i>) -> !s32i loc(#loc283)
          cir.store %36, %9 : !s32i, !cir.ptr<!s32i> loc(#loc458)
          cir.scope {
            %60 = cir.load %9 : !cir.ptr<!s32i>, !s32i loc(#loc288)
            %61 = cir.const #cir.int<1> : !s32i loc(#loc289)
            %62 = cir.unary(minus, %61) : !s32i, !s32i loc(#loc289)
            %63 = cir.cmp(eq, %60, %62) : !s32i, !cir.bool loc(#loc460)
            cir.if %63 {
              cir.break loc(#loc291)
            } loc(#loc461)
          } loc(#loc459)
          %37 = cir.load %9 : !cir.ptr<!s32i>, !s32i loc(#loc292)
          %38 = cir.cast(array_to_ptrdecay, %10 : !cir.ptr<!cir.array<!s8i x 14>>), !cir.ptr<!s8i> loc(#loc293)
          %39 = cir.cast(bitcast, %38 : !cir.ptr<!s8i>), !cir.ptr<!void> loc(#loc293)
          %40 = cir.const #cir.int<3> : !s32i loc(#loc294)
          %41 = cir.cast(integral, %40 : !s32i), !u64i loc(#loc294)
          %42 = cir.const #cir.int<4> : !u64i loc(#loc294)
          %43 = cir.binop(mul, %41, %42) : !u64i loc(#loc294)
          %44 = cir.const #cir.int<2> : !s32i loc(#loc294)
          %45 = cir.cast(integral, %44 : !s32i), !u64i loc(#loc294)
          %46 = cir.binop(add, %43, %45) : !u64i loc(#loc294)
          %47 = cir.const #cir.int<1> : !s32i loc(#loc295)
          %48 = cir.cast(integral, %47 : !s32i), !u64i loc(#loc295)
          %49 = cir.binop(sub, %46, %48) : !u64i loc(#loc462)
          %50 = cir.const #cir.int<0> : !s32i loc(#loc296)
          %51 = cir.call @recv(%37, %39, %49, %50) : (!s32i, !cir.ptr<!void>, !u64i, !s32i) -> !s64i loc(#loc297)
          %52 = cir.cast(integral, %51 : !s64i), !s32i loc(#loc297)
          cir.store %52, %6 : !s32i, !cir.ptr<!s32i> loc(#loc463)
          cir.scope {
            %60 = cir.load %6 : !cir.ptr<!s32i>, !s32i loc(#loc302)
            %61 = cir.const #cir.int<1> : !s32i loc(#loc303)
            %62 = cir.unary(minus, %61) : !s32i, !s32i loc(#loc303)
            %63 = cir.cmp(eq, %60, %62) : !s32i, !cir.bool loc(#loc465)
            %64 = cir.ternary(%63, true {
              %65 = cir.const #true loc(#loc304)
              cir.yield %65 : !cir.bool loc(#loc304)
            }, false {
              %65 = cir.load %6 : !cir.ptr<!s32i>, !s32i loc(#loc305)
              %66 = cir.const #cir.int<0> : !s32i loc(#loc306)
              %67 = cir.cmp(eq, %65, %66) : !s32i, !cir.bool loc(#loc466)
              %68 = cir.ternary(%67, true {
                %69 = cir.const #true loc(#loc304)
                cir.yield %69 : !cir.bool loc(#loc304)
              }, false {
                %69 = cir.const #false loc(#loc304)
                cir.yield %69 : !cir.bool loc(#loc304)
              }) : (!cir.bool) -> !cir.bool loc(#loc304)
              cir.yield %68 : !cir.bool loc(#loc304)
            }) : (!cir.bool) -> !cir.bool loc(#loc304)
            cir.if %64 {
              cir.break loc(#loc308)
            } loc(#loc467)
          } loc(#loc464)
          %53 = cir.const #cir.int<0> : !s32i loc(#loc309)
          %54 = cir.cast(integral, %53 : !s32i), !s8i loc(#loc309)
          %55 = cir.load %6 : !cir.ptr<!s32i>, !s32i loc(#loc310)
          %56 = cir.cast(array_to_ptrdecay, %10 : !cir.ptr<!cir.array<!s8i x 14>>), !cir.ptr<!s8i> loc(#loc311)
          %57 = cir.ptr_stride(%56 : !cir.ptr<!s8i>, %55 : !s32i), !cir.ptr<!s8i> loc(#loc311)
          cir.store %54, %57 : !s8i, !cir.ptr<!s8i> loc(#loc468)
          %58 = cir.cast(array_to_ptrdecay, %10 : !cir.ptr<!cir.array<!s8i x 14>>), !cir.ptr<!s8i> loc(#loc312)
          %59 = cir.call @atoi(%58) : (!cir.ptr<!s8i>) -> !s32i extra(#fn_attr) loc(#loc313)
          cir.store %59, %0 : !s32i, !cir.ptr<!s32i> loc(#loc469)
          cir.yield loc(#loc233)
        } while {
          %15 = cir.const #cir.int<0> : !s32i loc(#loc316)
          %16 = cir.cast(int_to_bool, %15 : !s32i), !cir.bool loc(#loc316)
          cir.condition(%16) loc(#loc316)
        } loc(#loc439)
      } loc(#loc439)
      cir.scope {
        %15 = cir.load %8 : !cir.ptr<!s32i>, !s32i loc(#loc319)
        %16 = cir.const #cir.int<1> : !s32i loc(#loc320)
        %17 = cir.unary(minus, %16) : !s32i, !s32i loc(#loc320)
        %18 = cir.cmp(ne, %15, %17) : !s32i, !cir.bool loc(#loc471)
        cir.if %18 {
          %19 = cir.load %8 : !cir.ptr<!s32i>, !s32i loc(#loc322)
          %20 = cir.call @close(%19) : (!s32i) -> !s32i loc(#loc323)
        } loc(#loc472)
      } loc(#loc470)
      cir.scope {
        %15 = cir.load %9 : !cir.ptr<!s32i>, !s32i loc(#loc326)
        %16 = cir.const #cir.int<1> : !s32i loc(#loc327)
        %17 = cir.unary(minus, %16) : !s32i, !s32i loc(#loc327)
        %18 = cir.cmp(ne, %15, %17) : !s32i, !cir.bool loc(#loc474)
        cir.if %18 {
          %19 = cir.load %9 : !cir.ptr<!s32i>, !s32i loc(#loc329)
          %20 = cir.call @close(%19) : (!s32i) -> !s32i loc(#loc330)
        } loc(#loc475)
      } loc(#loc473)
    } loc(#loc433)
    %4 = cir.load %0 : !cir.ptr<!s32i>, !s32i loc(#loc331)
    %5 = cir.get_member %1[0] {name = "unionFirst"} : !cir.ptr<!ty_CWE369_Divide_by_Zero__int_listen_socket_divide_34_unionType> -> !cir.ptr<!s32i> loc(#loc144)
    cir.store %4, %5 : !s32i, !cir.ptr<!s32i> loc(#loc476)
    cir.scope {
      %6 = cir.alloca !s32i, !cir.ptr<!s32i>, ["data", init] {alignment = 4 : i64} loc(#loc478)
      %7 = cir.get_member %1[1] {name = "unionSecond"} : !cir.ptr<!ty_CWE369_Divide_by_Zero__int_listen_socket_divide_34_unionType> -> !cir.ptr<!s32i> loc(#loc150)
      %8 = cir.load %7 : !cir.ptr<!s32i>, !s32i loc(#loc336)
      cir.store %8, %6 : !s32i, !cir.ptr<!s32i> loc(#loc478)
      cir.scope {
        %9 = cir.load %6 : !cir.ptr<!s32i>, !s32i loc(#loc339)
        %10 = cir.const #cir.int<0> : !s32i loc(#loc340)
        %11 = cir.cmp(ne, %9, %10) : !s32i, !cir.bool loc(#loc480)
        cir.if %11 {
          %12 = cir.const #cir.int<100> : !s32i loc(#loc344)
          %13 = cir.load %6 : !cir.ptr<!s32i>, !s32i loc(#loc345)
          %14 = cir.binop(div, %12, %13) : !s32i loc(#loc482)
          cir.call @printIntLine(%14) : (!s32i) -> () loc(#loc346)
        } else {
          %12 = cir.get_global @".str.4" : !cir.ptr<!cir.array<!s8i x 38>> loc(#loc210)
          %13 = cir.cast(array_to_ptrdecay, %12 : !cir.ptr<!cir.array<!s8i x 38>>), !cir.ptr<!s8i> loc(#loc210)
          cir.call @printLine(%13) : (!cir.ptr<!s8i>) -> () loc(#loc347)
        } loc(#loc481)
      } loc(#loc479)
    } loc(#loc477)
    cir.return loc(#loc212)
  } loc(#loc429)
} loc(#loc)
#loc = loc("/home/ladisgin/git_proj/juliet-c/testcases/CWE369_Divide_by_Zero/s02/CWE369_Divide_by_Zero__int_listen_socket_divide_34.c":0:0)
#loc1 = loc("/usr/include/sys/socket.h":102:1)
#loc2 = loc("/usr/include/sys/socket.h":102:62)
#loc3 = loc("/usr/include/netinet/in.h":404:1)
#loc4 = loc("/usr/include/netinet/in.h":405:40)
#loc5 = loc("/usr/include/sys/socket.h":112:1)
#loc6 = loc("/usr/include/sys/socket.h":113:6)
#loc7 = loc("/usr/include/sys/socket.h":296:1)
#loc8 = loc("/usr/include/sys/socket.h":296:39)
#loc9 = loc("/usr/include/sys/socket.h":306:1)
#loc10 = loc("/usr/include/sys/socket.h":307:38)
#loc11 = loc("/usr/include/sys/socket.h":145:1)
#loc12 = loc("/usr/include/sys/socket.h":145:68)
#loc13 = loc("/usr/include/stdlib.h":105:1)
#loc14 = loc("/usr/include/stdlib.h":106:33)
#loc15 = loc("/usr/include/unistd.h":358:1)
#loc16 = loc("/usr/include/unistd.h":358:27)
#loc17 = loc("../../../testcasesupport/std_testcase_io.h":18:1)
#loc18 = loc("../../../testcasesupport/std_testcase_io.h":18:33)
#loc19 = loc("CWE369_Divide_by_Zero__int_listen_socket_divide_34.c":50:1)
#loc20 = loc("CWE369_Divide_by_Zero__int_listen_socket_divide_34.c":131:1)
#loc21 = loc("CWE369_Divide_by_Zero__int_listen_socket_divide_34.c":52:5)
#loc22 = loc("CWE369_Divide_by_Zero__int_listen_socket_divide_34.c":52:9)
#loc23 = loc("CWE369_Divide_by_Zero__int_listen_socket_divide_34.c":53:5)
#loc24 = loc("CWE369_Divide_by_Zero__int_listen_socket_divide_34.c":53:66)
#loc25 = loc("CWE369_Divide_by_Zero__int_listen_socket_divide_34.c":55:13)
#loc26 = loc("CWE369_Divide_by_Zero__int_listen_socket_divide_34.c":55:12)
#loc27 = loc("CWE369_Divide_by_Zero__int_listen_socket_divide_34.c":55:5)
#loc28 = loc("CWE369_Divide_by_Zero__int_listen_socket_divide_34.c":56:5)
#loc29 = loc("CWE369_Divide_by_Zero__int_listen_socket_divide_34.c":124:5)
#loc30 = loc("CWE369_Divide_by_Zero__int_listen_socket_divide_34.c":61:9)
#loc31 = loc("CWE369_Divide_by_Zero__int_listen_socket_divide_34.c":61:13)
#loc32 = loc("CWE369_Divide_by_Zero__int_listen_socket_divide_34.c":62:9)
#loc33 = loc("CWE369_Divide_by_Zero__int_listen_socket_divide_34.c":62:28)
#loc34 = loc("CWE369_Divide_by_Zero__int_listen_socket_divide_34.c":63:9)
#loc35 = loc("CWE369_Divide_by_Zero__int_listen_socket_divide_34.c":63:31)
#loc36 = loc("CWE369_Divide_by_Zero__int_listen_socket_divide_34.c":64:9)
#loc37 = loc("CWE369_Divide_by_Zero__int_listen_socket_divide_34.c":64:31)
#loc38 = loc("CWE369_Divide_by_Zero__int_listen_socket_divide_34.c":65:9)
#loc39 = loc("CWE369_Divide_by_Zero__int_listen_socket_divide_34.c":65:41)
#loc40 = loc("CWE369_Divide_by_Zero__int_listen_socket_divide_34.c":66:9)
#loc41 = loc("CWE369_Divide_by_Zero__int_listen_socket_divide_34.c":109:17)
#loc42 = loc("CWE369_Divide_by_Zero__int_listen_socket_divide_34.c":76:35)
#loc43 = loc("CWE369_Divide_by_Zero__int_listen_socket_divide_34.c":76:44)
#loc44 = loc("CWE369_Divide_by_Zero__int_listen_socket_divide_34.c":76:57)
#loc45 = loc("CWE369_Divide_by_Zero__int_listen_socket_divide_34.c":76:28)
#loc46 = loc("CWE369_Divide_by_Zero__int_listen_socket_divide_34.c":76:13)
#loc47 = loc("CWE369_Divide_by_Zero__int_listen_socket_divide_34.c":76:68)
#loc48 = loc("CWE369_Divide_by_Zero__int_listen_socket_divide_34.c":77:13)
#loc49 = loc("CWE369_Divide_by_Zero__int_listen_socket_divide_34.c":80:13)
#loc50 = loc("CWE369_Divide_by_Zero__int_listen_socket_divide_34.c":77:17)
#loc51 = loc("CWE369_Divide_by_Zero__int_listen_socket_divide_34.c":77:33)
#loc52 = loc("CWE369_Divide_by_Zero__int_listen_socket_divide_34.c":78:13)
#loc53 = loc("CWE369_Divide_by_Zero__int_listen_socket_divide_34.c":79:17)
#loc54 = loc("CWE369_Divide_by_Zero__int_listen_socket_divide_34.c":81:20)
#loc55 = loc("CWE369_Divide_by_Zero__int_listen_socket_divide_34.c":81:21)
#loc56 = loc("CWE369_Divide_by_Zero__int_listen_socket_divide_34.c":81:30)
#loc57 = loc("CWE369_Divide_by_Zero__int_listen_socket_divide_34.c":81:33)
#loc58 = loc("CWE369_Divide_by_Zero__int_listen_socket_divide_34.c":81:47)
#loc59 = loc("CWE369_Divide_by_Zero__int_listen_socket_divide_34.c":81:13)
#loc60 = loc("CWE369_Divide_by_Zero__int_listen_socket_divide_34.c":81:48)
#loc61 = loc("CWE369_Divide_by_Zero__int_listen_socket_divide_34.c":82:34)
#loc62 = loc("/usr/include/netinet/in.h":249:5)
#loc63 = loc("CWE369_Divide_by_Zero__int_listen_socket_divide_34.c":82:13)
#loc64 = loc("CWE369_Divide_by_Zero__int_listen_socket_divide_34.c":83:39)
#loc65 = loc("/usr/include/netinet/in.h":251:20)
#loc66 = loc("/usr/include/netinet/in.h":33:15)
#loc67 = loc("CWE369_Divide_by_Zero__int_listen_socket_divide_34.c":83:13)
#loc68 = loc("CWE369_Divide_by_Zero__int_listen_socket_divide_34.c":84:38)
#loc69 = loc("CWE369_Divide_by_Zero__int_listen_socket_divide_34.c":84:32)
#loc70 = loc("/usr/include/netinet/in.h":250:15)
#loc71 = loc("CWE369_Divide_by_Zero__int_listen_socket_divide_34.c":84:13)
#loc72 = loc("CWE369_Divide_by_Zero__int_listen_socket_divide_34.c":84:46)
#loc73 = loc("CWE369_Divide_by_Zero__int_listen_socket_divide_34.c":85:13)
#loc74 = loc("CWE369_Divide_by_Zero__int_listen_socket_divide_34.c":88:13)
#loc75 = loc("CWE369_Divide_by_Zero__int_listen_socket_divide_34.c":85:22)
#loc76 = loc("CWE369_Divide_by_Zero__int_listen_socket_divide_34.c":85:54)
#loc77 = loc("CWE369_Divide_by_Zero__int_listen_socket_divide_34.c":85:55)
#loc78 = loc("CWE369_Divide_by_Zero__int_listen_socket_divide_34.c":85:64)
#loc79 = loc("CWE369_Divide_by_Zero__int_listen_socket_divide_34.c":85:78)
#loc80 = loc("CWE369_Divide_by_Zero__int_listen_socket_divide_34.c":85:17)
#loc81 = loc("CWE369_Divide_by_Zero__int_listen_socket_divide_34.c":85:84)
#loc82 = loc("CWE369_Divide_by_Zero__int_listen_socket_divide_34.c":86:13)
#loc83 = loc("CWE369_Divide_by_Zero__int_listen_socket_divide_34.c":87:17)
#loc84 = loc("CWE369_Divide_by_Zero__int_listen_socket_divide_34.c":89:13)
#loc85 = loc("CWE369_Divide_by_Zero__int_listen_socket_divide_34.c":92:13)
#loc86 = loc("CWE369_Divide_by_Zero__int_listen_socket_divide_34.c":89:24)
#loc87 = loc("CWE369_Divide_by_Zero__int_listen_socket_divide_34.c":89:38)
#loc88 = loc("CWE369_Divide_by_Zero__int_listen_socket_divide_34.c":89:17)
#loc89 = loc("CWE369_Divide_by_Zero__int_listen_socket_divide_34.c":89:57)
#loc90 = loc("CWE369_Divide_by_Zero__int_listen_socket_divide_34.c":90:13)
#loc91 = loc("CWE369_Divide_by_Zero__int_listen_socket_divide_34.c":91:17)
#loc92 = loc("CWE369_Divide_by_Zero__int_listen_socket_divide_34.c":93:35)
#loc93 = loc("CWE369_Divide_by_Zero__int_listen_socket_divide_34.c":93:49)
#loc94 = loc("CWE369_Divide_by_Zero__int_listen_socket_divide_34.c":93:55)
#loc95 = loc("CWE369_Divide_by_Zero__int_listen_socket_divide_34.c":93:28)
#loc96 = loc("CWE369_Divide_by_Zero__int_listen_socket_divide_34.c":93:13)
#loc97 = loc("CWE369_Divide_by_Zero__int_listen_socket_divide_34.c":93:59)
#loc98 = loc("CWE369_Divide_by_Zero__int_listen_socket_divide_34.c":94:13)
#loc99 = loc("CWE369_Divide_by_Zero__int_listen_socket_divide_34.c":97:13)
#loc100 = loc("CWE369_Divide_by_Zero__int_listen_socket_divide_34.c":94:17)
#loc101 = loc("CWE369_Divide_by_Zero__int_listen_socket_divide_34.c":94:33)
#loc102 = loc("CWE369_Divide_by_Zero__int_listen_socket_divide_34.c":95:13)
#loc103 = loc("CWE369_Divide_by_Zero__int_listen_socket_divide_34.c":96:17)
#loc104 = loc("CWE369_Divide_by_Zero__int_listen_socket_divide_34.c":99:31)
#loc105 = loc("CWE369_Divide_by_Zero__int_listen_socket_divide_34.c":99:45)
#loc106 = loc("CWE369_Divide_by_Zero__int_listen_socket_divide_34.c":99:58)
#loc107 = loc("CWE369_Divide_by_Zero__int_listen_socket_divide_34.c":99:76)
#loc108 = loc("CWE369_Divide_by_Zero__int_listen_socket_divide_34.c":99:79)
#loc109 = loc("CWE369_Divide_by_Zero__int_listen_socket_divide_34.c":99:26)
#loc110 = loc("CWE369_Divide_by_Zero__int_listen_socket_divide_34.c":99:13)
#loc111 = loc("CWE369_Divide_by_Zero__int_listen_socket_divide_34.c":99:80)
#loc112 = loc("CWE369_Divide_by_Zero__int_listen_socket_divide_34.c":100:13)
#loc113 = loc("CWE369_Divide_by_Zero__int_listen_socket_divide_34.c":103:13)
#loc114 = loc("CWE369_Divide_by_Zero__int_listen_socket_divide_34.c":100:17)
#loc115 = loc("CWE369_Divide_by_Zero__int_listen_socket_divide_34.c":100:31)
#loc116 = loc("CWE369_Divide_by_Zero__int_listen_socket_divide_34.c":100:44)
#loc117 = loc("CWE369_Divide_by_Zero__int_listen_socket_divide_34.c":100:47)
#loc118 = loc("CWE369_Divide_by_Zero__int_listen_socket_divide_34.c":100:61)
#loc119 = loc("CWE369_Divide_by_Zero__int_listen_socket_divide_34.c":101:13)
#loc120 = loc("CWE369_Divide_by_Zero__int_listen_socket_divide_34.c":102:17)
#loc121 = loc("CWE369_Divide_by_Zero__int_listen_socket_divide_34.c":105:39)
#loc122 = loc("CWE369_Divide_by_Zero__int_listen_socket_divide_34.c":105:25)
#loc123 = loc("CWE369_Divide_by_Zero__int_listen_socket_divide_34.c":105:13)
#loc124 = loc("CWE369_Divide_by_Zero__int_listen_socket_divide_34.c":107:25)
#loc125 = loc("CWE369_Divide_by_Zero__int_listen_socket_divide_34.c":107:20)
#loc126 = loc("CWE369_Divide_by_Zero__int_listen_socket_divide_34.c":107:13)
#loc127 = loc("CWE369_Divide_by_Zero__int_listen_socket_divide_34.c":107:36)
#loc128 = loc("CWE369_Divide_by_Zero__int_listen_socket_divide_34.c":109:16)
#loc129 = loc("CWE369_Divide_by_Zero__int_listen_socket_divide_34.c":110:9)
#loc130 = loc("CWE369_Divide_by_Zero__int_listen_socket_divide_34.c":113:9)
#loc131 = loc("CWE369_Divide_by_Zero__int_listen_socket_divide_34.c":110:13)
#loc132 = loc("CWE369_Divide_by_Zero__int_listen_socket_divide_34.c":110:29)
#loc133 = loc("CWE369_Divide_by_Zero__int_listen_socket_divide_34.c":111:9)
#loc134 = loc("CWE369_Divide_by_Zero__int_listen_socket_divide_34.c":112:26)
#loc135 = loc("CWE369_Divide_by_Zero__int_listen_socket_divide_34.c":112:13)
#loc136 = loc("CWE369_Divide_by_Zero__int_listen_socket_divide_34.c":114:9)
#loc137 = loc("CWE369_Divide_by_Zero__int_listen_socket_divide_34.c":117:9)
#loc138 = loc("CWE369_Divide_by_Zero__int_listen_socket_divide_34.c":114:13)
#loc139 = loc("CWE369_Divide_by_Zero__int_listen_socket_divide_34.c":114:29)
#loc140 = loc("CWE369_Divide_by_Zero__int_listen_socket_divide_34.c":115:9)
#loc141 = loc("CWE369_Divide_by_Zero__int_listen_socket_divide_34.c":116:26)
#loc142 = loc("CWE369_Divide_by_Zero__int_listen_socket_divide_34.c":116:13)
#loc143 = loc("CWE369_Divide_by_Zero__int_listen_socket_divide_34.c":125:26)
#loc144 = loc("CWE369_Divide_by_Zero__int_listen_socket_divide_34.c":44:9)
#loc145 = loc("CWE369_Divide_by_Zero__int_listen_socket_divide_34.c":125:5)
#loc146 = loc("CWE369_Divide_by_Zero__int_listen_socket_divide_34.c":126:5)
#loc147 = loc("CWE369_Divide_by_Zero__int_listen_socket_divide_34.c":130:5)
#loc148 = loc("CWE369_Divide_by_Zero__int_listen_socket_divide_34.c":127:9)
#loc149 = loc("CWE369_Divide_by_Zero__int_listen_socket_divide_34.c":127:28)
#loc150 = loc("CWE369_Divide_by_Zero__int_listen_socket_divide_34.c":45:9)
#loc151 = loc("CWE369_Divide_by_Zero__int_listen_socket_divide_34.c":129:22)
#loc152 = loc("CWE369_Divide_by_Zero__int_listen_socket_divide_34.c":129:28)
#loc153 = loc("CWE369_Divide_by_Zero__int_listen_socket_divide_34.c":129:9)
#loc154 = loc("CWE369_Divide_by_Zero__int_listen_socket_divide_34.c":245:1)
#loc155 = loc("CWE369_Divide_by_Zero__int_listen_socket_divide_34.c":249:1)
#loc156 = loc("CWE369_Divide_by_Zero__int_listen_socket_divide_34.c":247:5)
#loc157 = loc("CWE369_Divide_by_Zero__int_listen_socket_divide_34.c":247:13)
#loc158 = loc("CWE369_Divide_by_Zero__int_listen_socket_divide_34.c":248:5)
#loc159 = loc("CWE369_Divide_by_Zero__int_listen_socket_divide_34.c":248:13)
#loc160 = loc("/usr/include/stdlib.h":575:1)
#loc161 = loc("/usr/include/stdlib.h":575:41)
#loc162 = loc("/usr/include/time.h":76:1)
#loc163 = loc("/usr/include/time.h":76:38)
#loc164 = loc("../../../testcasesupport/std_testcase_io.h":14:1)
#loc165 = loc("../../../testcasesupport/std_testcase_io.h":14:33)
#loc166 = loc("CWE369_Divide_by_Zero__int_listen_socket_divide_34.c":264:15)
#loc167 = loc("CWE369_Divide_by_Zero__int_listen_socket_divide_34.c":266:15)
#loc168 = loc("CWE369_Divide_by_Zero__int_listen_socket_divide_34.c":269:15)
#loc169 = loc("CWE369_Divide_by_Zero__int_listen_socket_divide_34.c":271:15)
#loc170 = loc("CWE369_Divide_by_Zero__int_listen_socket_divide_34.c":259:1)
#loc171 = loc("CWE369_Divide_by_Zero__int_listen_socket_divide_34.c":274:1)
#loc176 = loc("CWE369_Divide_by_Zero__int_listen_socket_divide_34.c":260:1)
#loc177 = loc("CWE369_Divide_by_Zero__int_listen_socket_divide_34.c":262:27)
#loc178 = loc("CWE369_Divide_by_Zero__int_listen_socket_divide_34.c":262:22)
#loc179 = loc("CWE369_Divide_by_Zero__int_listen_socket_divide_34.c":262:5)
#loc180 = loc("CWE369_Divide_by_Zero__int_listen_socket_divide_34.c":264:5)
#loc181 = loc("CWE369_Divide_by_Zero__int_listen_socket_divide_34.c":265:5)
#loc182 = loc("CWE369_Divide_by_Zero__int_listen_socket_divide_34.c":265:61)
#loc183 = loc("CWE369_Divide_by_Zero__int_listen_socket_divide_34.c":266:5)
#loc184 = loc("CWE369_Divide_by_Zero__int_listen_socket_divide_34.c":269:5)
#loc185 = loc("CWE369_Divide_by_Zero__int_listen_socket_divide_34.c":270:5)
#loc186 = loc("CWE369_Divide_by_Zero__int_listen_socket_divide_34.c":270:60)
#loc187 = loc("CWE369_Divide_by_Zero__int_listen_socket_divide_34.c":271:5)
#loc188 = loc("CWE369_Divide_by_Zero__int_listen_socket_divide_34.c":273:12)
#loc189 = loc("CWE369_Divide_by_Zero__int_listen_socket_divide_34.c":273:5)
#loc190 = loc("CWE369_Divide_by_Zero__int_listen_socket_divide_34.c":138:1)
#loc191 = loc("CWE369_Divide_by_Zero__int_listen_socket_divide_34.c":152:1)
#loc192 = loc("CWE369_Divide_by_Zero__int_listen_socket_divide_34.c":140:5)
#loc193 = loc("CWE369_Divide_by_Zero__int_listen_socket_divide_34.c":140:9)
#loc194 = loc("CWE369_Divide_by_Zero__int_listen_socket_divide_34.c":141:5)
#loc195 = loc("CWE369_Divide_by_Zero__int_listen_socket_divide_34.c":141:66)
#loc196 = loc("CWE369_Divide_by_Zero__int_listen_socket_divide_34.c":143:13)
#loc197 = loc("CWE369_Divide_by_Zero__int_listen_socket_divide_34.c":143:12)
#loc198 = loc("CWE369_Divide_by_Zero__int_listen_socket_divide_34.c":143:5)
#loc199 = loc("CWE369_Divide_by_Zero__int_listen_socket_divide_34.c":145:12)
#loc200 = loc("CWE369_Divide_by_Zero__int_listen_socket_divide_34.c":145:5)
#loc201 = loc("CWE369_Divide_by_Zero__int_listen_socket_divide_34.c":146:26)
#loc202 = loc("CWE369_Divide_by_Zero__int_listen_socket_divide_34.c":146:5)
#loc203 = loc("CWE369_Divide_by_Zero__int_listen_socket_divide_34.c":147:5)
#loc204 = loc("CWE369_Divide_by_Zero__int_listen_socket_divide_34.c":151:5)
#loc205 = loc("CWE369_Divide_by_Zero__int_listen_socket_divide_34.c":148:9)
#loc206 = loc("CWE369_Divide_by_Zero__int_listen_socket_divide_34.c":148:28)
#loc207 = loc("CWE369_Divide_by_Zero__int_listen_socket_divide_34.c":150:22)
#loc208 = loc("CWE369_Divide_by_Zero__int_listen_socket_divide_34.c":150:28)
#loc209 = loc("CWE369_Divide_by_Zero__int_listen_socket_divide_34.c":150:9)
#loc210 = loc("CWE369_Divide_by_Zero__int_listen_socket_divide_34.c":240:23)
#loc211 = loc("CWE369_Divide_by_Zero__int_listen_socket_divide_34.c":155:1)
#loc212 = loc("CWE369_Divide_by_Zero__int_listen_socket_divide_34.c":243:1)
#loc213 = loc("CWE369_Divide_by_Zero__int_listen_socket_divide_34.c":157:5)
#loc214 = loc("CWE369_Divide_by_Zero__int_listen_socket_divide_34.c":157:9)
#loc215 = loc("CWE369_Divide_by_Zero__int_listen_socket_divide_34.c":158:5)
#loc216 = loc("CWE369_Divide_by_Zero__int_listen_socket_divide_34.c":158:66)
#loc217 = loc("CWE369_Divide_by_Zero__int_listen_socket_divide_34.c":160:13)
#loc218 = loc("CWE369_Divide_by_Zero__int_listen_socket_divide_34.c":160:12)
#loc219 = loc("CWE369_Divide_by_Zero__int_listen_socket_divide_34.c":160:5)
#loc220 = loc("CWE369_Divide_by_Zero__int_listen_socket_divide_34.c":161:5)
#loc221 = loc("CWE369_Divide_by_Zero__int_listen_socket_divide_34.c":229:5)
#loc222 = loc("CWE369_Divide_by_Zero__int_listen_socket_divide_34.c":166:9)
#loc223 = loc("CWE369_Divide_by_Zero__int_listen_socket_divide_34.c":166:13)
#loc224 = loc("CWE369_Divide_by_Zero__int_listen_socket_divide_34.c":167:9)
#loc225 = loc("CWE369_Divide_by_Zero__int_listen_socket_divide_34.c":167:28)
#loc226 = loc("CWE369_Divide_by_Zero__int_listen_socket_divide_34.c":168:9)
#loc227 = loc("CWE369_Divide_by_Zero__int_listen_socket_divide_34.c":168:31)
#loc228 = loc("CWE369_Divide_by_Zero__int_listen_socket_divide_34.c":169:9)
#loc229 = loc("CWE369_Divide_by_Zero__int_listen_socket_divide_34.c":169:31)
#loc230 = loc("CWE369_Divide_by_Zero__int_listen_socket_divide_34.c":170:9)
#loc231 = loc("CWE369_Divide_by_Zero__int_listen_socket_divide_34.c":170:41)
#loc232 = loc("CWE369_Divide_by_Zero__int_listen_socket_divide_34.c":171:9)
#loc233 = loc("CWE369_Divide_by_Zero__int_listen_socket_divide_34.c":214:17)
#loc234 = loc("CWE369_Divide_by_Zero__int_listen_socket_divide_34.c":181:35)
#loc235 = loc("CWE369_Divide_by_Zero__int_listen_socket_divide_34.c":181:44)
#loc236 = loc("CWE369_Divide_by_Zero__int_listen_socket_divide_34.c":181:57)
#loc237 = loc("CWE369_Divide_by_Zero__int_listen_socket_divide_34.c":181:28)
#loc238 = loc("CWE369_Divide_by_Zero__int_listen_socket_divide_34.c":181:13)
#loc239 = loc("CWE369_Divide_by_Zero__int_listen_socket_divide_34.c":181:68)
#loc240 = loc("CWE369_Divide_by_Zero__int_listen_socket_divide_34.c":182:13)
#loc241 = loc("CWE369_Divide_by_Zero__int_listen_socket_divide_34.c":185:13)
#loc242 = loc("CWE369_Divide_by_Zero__int_listen_socket_divide_34.c":182:17)
#loc243 = loc("CWE369_Divide_by_Zero__int_listen_socket_divide_34.c":182:33)
#loc244 = loc("CWE369_Divide_by_Zero__int_listen_socket_divide_34.c":183:13)
#loc245 = loc("CWE369_Divide_by_Zero__int_listen_socket_divide_34.c":184:17)
#loc246 = loc("CWE369_Divide_by_Zero__int_listen_socket_divide_34.c":186:20)
#loc247 = loc("CWE369_Divide_by_Zero__int_listen_socket_divide_34.c":186:21)
#loc248 = loc("CWE369_Divide_by_Zero__int_listen_socket_divide_34.c":186:30)
#loc249 = loc("CWE369_Divide_by_Zero__int_listen_socket_divide_34.c":186:33)
#loc250 = loc("CWE369_Divide_by_Zero__int_listen_socket_divide_34.c":186:47)
#loc251 = loc("CWE369_Divide_by_Zero__int_listen_socket_divide_34.c":186:13)
#loc252 = loc("CWE369_Divide_by_Zero__int_listen_socket_divide_34.c":186:48)
#loc253 = loc("CWE369_Divide_by_Zero__int_listen_socket_divide_34.c":187:34)
#loc254 = loc("CWE369_Divide_by_Zero__int_listen_socket_divide_34.c":187:13)
#loc255 = loc("CWE369_Divide_by_Zero__int_listen_socket_divide_34.c":188:39)
#loc256 = loc("CWE369_Divide_by_Zero__int_listen_socket_divide_34.c":188:13)
#loc257 = loc("CWE369_Divide_by_Zero__int_listen_socket_divide_34.c":189:38)
#loc258 = loc("CWE369_Divide_by_Zero__int_listen_socket_divide_34.c":189:32)
#loc259 = loc("CWE369_Divide_by_Zero__int_listen_socket_divide_34.c":189:13)
#loc260 = loc("CWE369_Divide_by_Zero__int_listen_socket_divide_34.c":189:46)
#loc261 = loc("CWE369_Divide_by_Zero__int_listen_socket_divide_34.c":190:13)
#loc262 = loc("CWE369_Divide_by_Zero__int_listen_socket_divide_34.c":193:13)
#loc263 = loc("CWE369_Divide_by_Zero__int_listen_socket_divide_34.c":190:22)
#loc264 = loc("CWE369_Divide_by_Zero__int_listen_socket_divide_34.c":190:54)
#loc265 = loc("CWE369_Divide_by_Zero__int_listen_socket_divide_34.c":190:55)
#loc266 = loc("CWE369_Divide_by_Zero__int_listen_socket_divide_34.c":190:64)
#loc267 = loc("CWE369_Divide_by_Zero__int_listen_socket_divide_34.c":190:78)
#loc268 = loc("CWE369_Divide_by_Zero__int_listen_socket_divide_34.c":190:17)
#loc269 = loc("CWE369_Divide_by_Zero__int_listen_socket_divide_34.c":190:84)
#loc270 = loc("CWE369_Divide_by_Zero__int_listen_socket_divide_34.c":191:13)
#loc271 = loc("CWE369_Divide_by_Zero__int_listen_socket_divide_34.c":192:17)
#loc272 = loc("CWE369_Divide_by_Zero__int_listen_socket_divide_34.c":194:13)
#loc273 = loc("CWE369_Divide_by_Zero__int_listen_socket_divide_34.c":197:13)
#loc274 = loc("CWE369_Divide_by_Zero__int_listen_socket_divide_34.c":194:24)
#loc275 = loc("CWE369_Divide_by_Zero__int_listen_socket_divide_34.c":194:38)
#loc276 = loc("CWE369_Divide_by_Zero__int_listen_socket_divide_34.c":194:17)
#loc277 = loc("CWE369_Divide_by_Zero__int_listen_socket_divide_34.c":194:57)
#loc278 = loc("CWE369_Divide_by_Zero__int_listen_socket_divide_34.c":195:13)
#loc279 = loc("CWE369_Divide_by_Zero__int_listen_socket_divide_34.c":196:17)
#loc280 = loc("CWE369_Divide_by_Zero__int_listen_socket_divide_34.c":198:35)
#loc281 = loc("CWE369_Divide_by_Zero__int_listen_socket_divide_34.c":198:49)
#loc282 = loc("CWE369_Divide_by_Zero__int_listen_socket_divide_34.c":198:55)
#loc283 = loc("CWE369_Divide_by_Zero__int_listen_socket_divide_34.c":198:28)
#loc284 = loc("CWE369_Divide_by_Zero__int_listen_socket_divide_34.c":198:13)
#loc285 = loc("CWE369_Divide_by_Zero__int_listen_socket_divide_34.c":198:59)
#loc286 = loc("CWE369_Divide_by_Zero__int_listen_socket_divide_34.c":199:13)
#loc287 = loc("CWE369_Divide_by_Zero__int_listen_socket_divide_34.c":202:13)
#loc288 = loc("CWE369_Divide_by_Zero__int_listen_socket_divide_34.c":199:17)
#loc289 = loc("CWE369_Divide_by_Zero__int_listen_socket_divide_34.c":199:33)
#loc290 = loc("CWE369_Divide_by_Zero__int_listen_socket_divide_34.c":200:13)
#loc291 = loc("CWE369_Divide_by_Zero__int_listen_socket_divide_34.c":201:17)
#loc292 = loc("CWE369_Divide_by_Zero__int_listen_socket_divide_34.c":204:31)
#loc293 = loc("CWE369_Divide_by_Zero__int_listen_socket_divide_34.c":204:45)
#loc294 = loc("CWE369_Divide_by_Zero__int_listen_socket_divide_34.c":204:58)
#loc295 = loc("CWE369_Divide_by_Zero__int_listen_socket_divide_34.c":204:76)
#loc296 = loc("CWE369_Divide_by_Zero__int_listen_socket_divide_34.c":204:79)
#loc297 = loc("CWE369_Divide_by_Zero__int_listen_socket_divide_34.c":204:26)
#loc298 = loc("CWE369_Divide_by_Zero__int_listen_socket_divide_34.c":204:13)
#loc299 = loc("CWE369_Divide_by_Zero__int_listen_socket_divide_34.c":204:80)
#loc300 = loc("CWE369_Divide_by_Zero__int_listen_socket_divide_34.c":205:13)
#loc301 = loc("CWE369_Divide_by_Zero__int_listen_socket_divide_34.c":208:13)
#loc302 = loc("CWE369_Divide_by_Zero__int_listen_socket_divide_34.c":205:17)
#loc303 = loc("CWE369_Divide_by_Zero__int_listen_socket_divide_34.c":205:31)
#loc304 = loc("CWE369_Divide_by_Zero__int_listen_socket_divide_34.c":205:44)
#loc305 = loc("CWE369_Divide_by_Zero__int_listen_socket_divide_34.c":205:47)
#loc306 = loc("CWE369_Divide_by_Zero__int_listen_socket_divide_34.c":205:61)
#loc307 = loc("CWE369_Divide_by_Zero__int_listen_socket_divide_34.c":206:13)
#loc308 = loc("CWE369_Divide_by_Zero__int_listen_socket_divide_34.c":207:17)
#loc309 = loc("CWE369_Divide_by_Zero__int_listen_socket_divide_34.c":210:39)
#loc310 = loc("CWE369_Divide_by_Zero__int_listen_socket_divide_34.c":210:25)
#loc311 = loc("CWE369_Divide_by_Zero__int_listen_socket_divide_34.c":210:13)
#loc312 = loc("CWE369_Divide_by_Zero__int_listen_socket_divide_34.c":212:25)
#loc313 = loc("CWE369_Divide_by_Zero__int_listen_socket_divide_34.c":212:20)
#loc314 = loc("CWE369_Divide_by_Zero__int_listen_socket_divide_34.c":212:13)
#loc315 = loc("CWE369_Divide_by_Zero__int_listen_socket_divide_34.c":212:36)
#loc316 = loc("CWE369_Divide_by_Zero__int_listen_socket_divide_34.c":214:16)
#loc317 = loc("CWE369_Divide_by_Zero__int_listen_socket_divide_34.c":215:9)
#loc318 = loc("CWE369_Divide_by_Zero__int_listen_socket_divide_34.c":218:9)
#loc319 = loc("CWE369_Divide_by_Zero__int_listen_socket_divide_34.c":215:13)
#loc320 = loc("CWE369_Divide_by_Zero__int_listen_socket_divide_34.c":215:29)
#loc321 = loc("CWE369_Divide_by_Zero__int_listen_socket_divide_34.c":216:9)
#loc322 = loc("CWE369_Divide_by_Zero__int_listen_socket_divide_34.c":217:26)
#loc323 = loc("CWE369_Divide_by_Zero__int_listen_socket_divide_34.c":217:13)
#loc324 = loc("CWE369_Divide_by_Zero__int_listen_socket_divide_34.c":219:9)
#loc325 = loc("CWE369_Divide_by_Zero__int_listen_socket_divide_34.c":222:9)
#loc326 = loc("CWE369_Divide_by_Zero__int_listen_socket_divide_34.c":219:13)
#loc327 = loc("CWE369_Divide_by_Zero__int_listen_socket_divide_34.c":219:29)
#loc328 = loc("CWE369_Divide_by_Zero__int_listen_socket_divide_34.c":220:9)
#loc329 = loc("CWE369_Divide_by_Zero__int_listen_socket_divide_34.c":221:26)
#loc330 = loc("CWE369_Divide_by_Zero__int_listen_socket_divide_34.c":221:13)
#loc331 = loc("CWE369_Divide_by_Zero__int_listen_socket_divide_34.c":230:26)
#loc332 = loc("CWE369_Divide_by_Zero__int_listen_socket_divide_34.c":230:5)
#loc333 = loc("CWE369_Divide_by_Zero__int_listen_socket_divide_34.c":231:5)
#loc334 = loc("CWE369_Divide_by_Zero__int_listen_socket_divide_34.c":242:5)
#loc335 = loc("CWE369_Divide_by_Zero__int_listen_socket_divide_34.c":232:9)
#loc336 = loc("CWE369_Divide_by_Zero__int_listen_socket_divide_34.c":232:28)
#loc337 = loc("CWE369_Divide_by_Zero__int_listen_socket_divide_34.c":234:9)
#loc338 = loc("CWE369_Divide_by_Zero__int_listen_socket_divide_34.c":241:9)
#loc339 = loc("CWE369_Divide_by_Zero__int_listen_socket_divide_34.c":234:13)
#loc340 = loc("CWE369_Divide_by_Zero__int_listen_socket_divide_34.c":234:21)
#loc341 = loc("CWE369_Divide_by_Zero__int_listen_socket_divide_34.c":235:9)
#loc342 = loc("CWE369_Divide_by_Zero__int_listen_socket_divide_34.c":237:9)
#loc343 = loc("CWE369_Divide_by_Zero__int_listen_socket_divide_34.c":239:9)
#loc344 = loc("CWE369_Divide_by_Zero__int_listen_socket_divide_34.c":236:26)
#loc345 = loc("CWE369_Divide_by_Zero__int_listen_socket_divide_34.c":236:32)
#loc346 = loc("CWE369_Divide_by_Zero__int_listen_socket_divide_34.c":236:13)
#loc347 = loc("CWE369_Divide_by_Zero__int_listen_socket_divide_34.c":240:13)
#loc348 = loc(fused[#loc1, #loc2])
#loc349 = loc(fused[#loc3, #loc4])
#loc350 = loc(fused[#loc5, #loc6])
#loc351 = loc(fused[#loc7, #loc8])
#loc352 = loc(fused[#loc9, #loc10])
#loc353 = loc(fused[#loc11, #loc12])
#loc354 = loc(fused[#loc13, #loc14])
#loc355 = loc(fused[#loc15, #loc16])
#loc356 = loc(fused[#loc17, #loc18])
#loc357 = loc(fused[#loc19, #loc20])
#loc358 = loc(fused[#loc21, #loc22])
#loc359 = loc(fused[#loc23, #loc24])
#loc360 = loc(fused[#loc27, #loc25])
#loc361 = loc(fused[#loc28, #loc29])
#loc362 = loc(fused[#loc30, #loc31])
#loc363 = loc(fused[#loc32, #loc33])
#loc364 = loc(fused[#loc34, #loc35])
#loc365 = loc(fused[#loc36, #loc37])
#loc366 = loc(fused[#loc38, #loc39])
#loc367 = loc(fused[#loc40, #loc41])
#loc368 = loc(fused[#loc46, #loc47])
#loc369 = loc(fused[#loc48, #loc49])
#loc370 = loc(fused[#loc50, #loc51])
#loc371 = loc(fused[#loc52, #loc49])
#loc372 = loc(fused[#loc54, #loc55])
#loc373 = loc(fused[#loc57, #loc58])
#loc374 = loc(fused[#loc59, #loc60])
#loc375 = loc(fused[#loc63, #loc61])
#loc376 = loc(fused[#loc67, #loc64])
#loc377 = loc(fused[#loc71, #loc72])
#loc378 = loc(fused[#loc73, #loc74])
#loc379 = loc(fused[#loc76, #loc77])
#loc380 = loc(fused[#loc78, #loc79])
#loc381 = loc(fused[#loc80, #loc81])
#loc382 = loc(fused[#loc82, #loc74])
#loc383 = loc(fused[#loc84, #loc85])
#loc384 = loc(fused[#loc88, #loc89])
#loc385 = loc(fused[#loc90, #loc85])
#loc386 = loc(fused[#loc96, #loc97])
#loc387 = loc(fused[#loc98, #loc99])
#loc388 = loc(fused[#loc100, #loc101])
#loc389 = loc(fused[#loc102, #loc99])
#loc390 = loc(fused[#loc106, #loc107])
#loc391 = loc(fused[#loc110, #loc111])
#loc392 = loc(fused[#loc112, #loc113])
#loc393 = loc(fused[#loc114, #loc115])
#loc394 = loc(fused[#loc117, #loc118])
#loc395 = loc(fused[#loc119, #loc113])
#loc396 = loc(fused[#loc123, #loc121])
#loc397 = loc(fused[#loc126, #loc127])
#loc398 = loc(fused[#loc129, #loc130])
#loc399 = loc(fused[#loc131, #loc132])
#loc400 = loc(fused[#loc133, #loc130])
#loc401 = loc(fused[#loc136, #loc137])
#loc402 = loc(fused[#loc138, #loc139])
#loc403 = loc(fused[#loc140, #loc137])
#loc404 = loc(fused[#loc145, #loc143])
#loc405 = loc(fused[#loc146, #loc147])
#loc406 = loc(fused[#loc148, #loc149])
#loc407 = loc(fused[#loc151, #loc152])
#loc408 = loc(fused[#loc154, #loc155])
#loc409 = loc(fused[#loc156, #loc157])
#loc410 = loc(fused[#loc158, #loc159])
#loc411 = loc(fused[#loc160, #loc161])
#loc412 = loc(fused[#loc162, #loc163])
#loc413 = loc(fused[#loc164, #loc165])
#loc414 = loc(fused[#loc170, #loc171])
#loc417 = loc(fused[#loc181, #loc182])
#loc418 = loc(fused[#loc185, #loc186])
#loc419 = loc(fused[#loc189, #loc188])
#loc420 = loc(fused[#loc190, #loc191])
#loc421 = loc(fused[#loc192, #loc193])
#loc422 = loc(fused[#loc194, #loc195])
#loc423 = loc(fused[#loc198, #loc196])
#loc424 = loc(fused[#loc200, #loc199])
#loc425 = loc(fused[#loc202, #loc201])
#loc426 = loc(fused[#loc203, #loc204])
#loc427 = loc(fused[#loc205, #loc206])
#loc428 = loc(fused[#loc207, #loc208])
#loc429 = loc(fused[#loc211, #loc212])
#loc430 = loc(fused[#loc213, #loc214])
#loc431 = loc(fused[#loc215, #loc216])
#loc432 = loc(fused[#loc219, #loc217])
#loc433 = loc(fused[#loc220, #loc221])
#loc434 = loc(fused[#loc222, #loc223])
#loc435 = loc(fused[#loc224, #loc225])
#loc436 = loc(fused[#loc226, #loc227])
#loc437 = loc(fused[#loc228, #loc229])
#loc438 = loc(fused[#loc230, #loc231])
#loc439 = loc(fused[#loc232, #loc233])
#loc440 = loc(fused[#loc238, #loc239])
#loc441 = loc(fused[#loc240, #loc241])
#loc442 = loc(fused[#loc242, #loc243])
#loc443 = loc(fused[#loc244, #loc241])
#loc444 = loc(fused[#loc246, #loc247])
#loc445 = loc(fused[#loc249, #loc250])
#loc446 = loc(fused[#loc251, #loc252])
#loc447 = loc(fused[#loc254, #loc253])
#loc448 = loc(fused[#loc256, #loc255])
#loc449 = loc(fused[#loc259, #loc260])
#loc450 = loc(fused[#loc261, #loc262])
#loc451 = loc(fused[#loc264, #loc265])
#loc452 = loc(fused[#loc266, #loc267])
#loc453 = loc(fused[#loc268, #loc269])
#loc454 = loc(fused[#loc270, #loc262])
#loc455 = loc(fused[#loc272, #loc273])
#loc456 = loc(fused[#loc276, #loc277])
#loc457 = loc(fused[#loc278, #loc273])
#loc458 = loc(fused[#loc284, #loc285])
#loc459 = loc(fused[#loc286, #loc287])
#loc460 = loc(fused[#loc288, #loc289])
#loc461 = loc(fused[#loc290, #loc287])
#loc462 = loc(fused[#loc294, #loc295])
#loc463 = loc(fused[#loc298, #loc299])
#loc464 = loc(fused[#loc300, #loc301])
#loc465 = loc(fused[#loc302, #loc303])
#loc466 = loc(fused[#loc305, #loc306])
#loc467 = loc(fused[#loc307, #loc301])
#loc468 = loc(fused[#loc311, #loc309])
#loc469 = loc(fused[#loc314, #loc315])
#loc470 = loc(fused[#loc317, #loc318])
#loc471 = loc(fused[#loc319, #loc320])
#loc472 = loc(fused[#loc321, #loc318])
#loc473 = loc(fused[#loc324, #loc325])
#loc474 = loc(fused[#loc326, #loc327])
#loc475 = loc(fused[#loc328, #loc325])
#loc476 = loc(fused[#loc332, #loc331])
#loc477 = loc(fused[#loc333, #loc334])
#loc478 = loc(fused[#loc335, #loc336])
#loc479 = loc(fused[#loc337, #loc338])
#loc480 = loc(fused[#loc339, #loc340])
#loc481 = loc(fused[#loc341, #loc342, #loc343, #loc338])
#loc482 = loc(fused[#loc344, #loc345])
