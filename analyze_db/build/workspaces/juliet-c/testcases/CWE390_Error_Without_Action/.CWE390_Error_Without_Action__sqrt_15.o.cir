!s32i = !cir.int<s, 32>
!s8i = !cir.int<s, 8>
#fn_attr = #cir<extra({nothrow = #cir.nothrow})>
#fn_attr1 = #cir<extra({inline = #cir.inline<no>, nothrow = #cir.nothrow, optnone = #cir.optnone, uwtable = #cir.uwtable<async>})>
module @"/workspaces/juliet-c/testcases/CWE390_Error_Without_Action/CWE390_Error_Without_Action__sqrt_15.c" attributes {cir.lang = #cir.lang<c>, cir.sob = #cir.signed_overflow_behavior<undefined>, cir.triple = "x86_64-unknown-linux-gnu", cir.type_size_info = #cir.type_size_info<char = 8, int = 32, size_t = 64>, cir.uwtable = #cir.uwtable<async>, dlti.dl_spec = #dlti.dl_spec<i128 = dense<128> : vector<2xi64>, i64 = dense<64> : vector<2xi64>, !llvm.ptr<271> = dense<32> : vector<4xi64>, !llvm.ptr<272> = dense<64> : vector<4xi64>, f16 = dense<16> : vector<2xi64>, f128 = dense<128> : vector<2xi64>, f64 = dense<64> : vector<2xi64>, i32 = dense<32> : vector<2xi64>, i8 = dense<8> : vector<2xi64>, i16 = dense<16> : vector<2xi64>, !llvm.ptr<270> = dense<32> : vector<4xi64>, !llvm.ptr = dense<64> : vector<4xi64>, i1 = dense<8> : vector<2xi64>, f80 = dense<128> : vector<2xi64>, "dlti.endianness" = "little", "dlti.mangling_mode" = "e", "dlti.stack_alignment" = 128 : i64>} {
  cir.func private @__errno_location() -> !cir.ptr<!s32i> extra(#fn_attr) loc(#loc111)
  cir.func private @sqrt(!cir.double) -> !cir.double extra(#fn_attr) loc(#loc3)
  cir.func private @printDoubleLine(!cir.double) loc(#loc112)
  cir.func private @printLine(!cir.ptr<!s8i>) loc(#loc113)
  cir.global "private" constant cir_private dsolocal @".str" = #cir.const_array<"Benign, fixed string\00" : !cir.array<!s8i x 21>> : !cir.array<!s8i x 21> {alignment = 1 : i64} loc(#loc8)
  cir.func no_proto @CWE390_Error_Without_Action__sqrt_15_bad() extra(#fn_attr1) {
    cir.scope {
      %0 = cir.const #cir.int<6> : !s32i loc(#loc13)
      cir.switch (%0 : !s32i) {
        cir.case(equal, [#cir.int<6> : !s32i]) {
          cir.scope {
            %1 = cir.alloca !cir.double, !cir.ptr<!cir.double>, ["doubleNumber"] {alignment = 8 : i64} loc(#loc117)
            %2 = cir.const #cir.int<0> : !s32i loc(#loc19)
            %3 = cir.call @__errno_location() : () -> !cir.ptr<!s32i> side_effect(const) extra(#fn_attr) loc(#loc20)
            cir.store %2, %3 : !s32i, !cir.ptr<!s32i> loc(#loc118)
            %4 = cir.get_global @sqrt : !cir.ptr<!cir.func<(!cir.double) -> !cir.double>> loc(#loc21)
            %5 = cir.const #cir.int<1> : !s32i loc(#loc22)
            %6 = cir.unary(minus, %5) nsw : !s32i, !s32i loc(#loc23)
            %7 = cir.cast(int_to_float, %6 : !s32i), !cir.double loc(#loc23)
            %8 = cir.call @sqrt(%7) : (!cir.double) -> !cir.double extra(#fn_attr) loc(#loc21)
            cir.store %8, %1 : !cir.double, !cir.ptr<!cir.double> loc(#loc119)
            cir.scope {
              %10 = cir.call @__errno_location() : () -> !cir.ptr<!s32i> side_effect(const) extra(#fn_attr) loc(#loc28)
              %11 = cir.load %10 : !cir.ptr<!s32i>, !s32i loc(#loc28)
              %12 = cir.const #cir.int<33> : !s32i loc(#loc29)
              %13 = cir.cmp(eq, %11, %12) : !s32i, !cir.bool loc(#loc121)
              cir.if %13 {
              } loc(#loc122)
            } loc(#loc120)
            %9 = cir.load %1 : !cir.ptr<!cir.double>, !cir.double loc(#loc31)
            cir.call @printDoubleLine(%9) : (!cir.double) -> () loc(#loc32)
          } loc(#loc116)
          cir.break loc(#loc33)
        } loc(#loc14)
        cir.case(default, []) {
          %1 = cir.get_global @".str" : !cir.ptr<!cir.array<!s8i x 21>> loc(#loc8)
          %2 = cir.cast(array_to_ptrdecay, %1 : !cir.ptr<!cir.array<!s8i x 21>>), !cir.ptr<!s8i> loc(#loc8)
          cir.call @printLine(%2) : (!cir.ptr<!s8i>) -> () loc(#loc35)
          cir.break loc(#loc36)
        } loc(#loc34)
        cir.yield loc(#loc11)
      } loc(#loc11)
    } loc(#loc115)
    cir.return loc(#loc10)
  } loc(#loc114)
  cir.func no_proto @CWE390_Error_Without_Action__sqrt_15_good() extra(#fn_attr1) {
    %0 = cir.get_global @good1 : !cir.ptr<!cir.func<()>> loc(#loc124)
    cir.call %0() : (!cir.ptr<!cir.func<()>>) -> () loc(#loc39)
    %1 = cir.get_global @good2 : !cir.ptr<!cir.func<()>> loc(#loc125)
    cir.call %1() : (!cir.ptr<!cir.func<()>>) -> () loc(#loc41)
    cir.return loc(#loc38)
  } loc(#loc123)
  cir.global "private" constant cir_private dsolocal @".str.1" = #cir.const_array<"sqrt() failed\00" : !cir.array<!s8i x 14>> : !cir.array<!s8i x 14> {alignment = 1 : i64} loc(#loc43)
  cir.func private @exit(!s32i) extra(#fn_attr) loc(#loc126)
  cir.func no_proto internal private @good1() extra(#fn_attr1) {
    cir.scope {
      %0 = cir.const #cir.int<5> : !s32i loc(#loc50)
      cir.switch (%0 : !s32i) {
        cir.case(equal, [#cir.int<6> : !s32i]) {
          %1 = cir.get_global @".str" : !cir.ptr<!cir.array<!s8i x 21>> loc(#loc52)
          %2 = cir.cast(array_to_ptrdecay, %1 : !cir.ptr<!cir.array<!s8i x 21>>), !cir.ptr<!s8i> loc(#loc52)
          cir.call @printLine(%2) : (!cir.ptr<!s8i>) -> () loc(#loc53)
          cir.break loc(#loc54)
        } loc(#loc51)
        cir.case(default, []) {
          cir.scope {
            %1 = cir.alloca !cir.double, !cir.ptr<!cir.double>, ["doubleNumber"] {alignment = 8 : i64} loc(#loc130)
            %2 = cir.const #cir.int<0> : !s32i loc(#loc60)
            %3 = cir.call @__errno_location() : () -> !cir.ptr<!s32i> side_effect(const) extra(#fn_attr) loc(#loc61)
            cir.store %2, %3 : !s32i, !cir.ptr<!s32i> loc(#loc131)
            %4 = cir.get_global @sqrt : !cir.ptr<!cir.func<(!cir.double) -> !cir.double>> loc(#loc62)
            %5 = cir.const #cir.int<1> : !s32i loc(#loc63)
            %6 = cir.unary(minus, %5) nsw : !s32i, !s32i loc(#loc64)
            %7 = cir.cast(int_to_float, %6 : !s32i), !cir.double loc(#loc64)
            %8 = cir.call @sqrt(%7) : (!cir.double) -> !cir.double extra(#fn_attr) loc(#loc62)
            cir.store %8, %1 : !cir.double, !cir.ptr<!cir.double> loc(#loc132)
            cir.scope {
              %10 = cir.call @__errno_location() : () -> !cir.ptr<!s32i> side_effect(const) extra(#fn_attr) loc(#loc69)
              %11 = cir.load %10 : !cir.ptr<!s32i>, !s32i loc(#loc69)
              %12 = cir.const #cir.int<33> : !s32i loc(#loc70)
              %13 = cir.cmp(eq, %11, %12) : !s32i, !cir.bool loc(#loc134)
              cir.if %13 {
                %14 = cir.get_global @".str.1" : !cir.ptr<!cir.array<!s8i x 14>> loc(#loc43)
                %15 = cir.cast(array_to_ptrdecay, %14 : !cir.ptr<!cir.array<!s8i x 14>>), !cir.ptr<!s8i> loc(#loc43)
                cir.call @printLine(%15) : (!cir.ptr<!s8i>) -> () loc(#loc72)
                %16 = cir.get_global @exit : !cir.ptr<!cir.func<(!s32i)>> loc(#loc73)
                %17 = cir.const #cir.int<1> : !s32i loc(#loc74)
                cir.call @exit(%17) : (!s32i) -> () extra(#fn_attr) loc(#loc73)
              } loc(#loc135)
            } loc(#loc133)
            %9 = cir.load %1 : !cir.ptr<!cir.double>, !cir.double loc(#loc75)
            cir.call @printDoubleLine(%9) : (!cir.double) -> () loc(#loc76)
          } loc(#loc129)
          cir.break loc(#loc77)
        } loc(#loc55)
        cir.yield loc(#loc48)
      } loc(#loc48)
    } loc(#loc128)
    cir.return loc(#loc47)
  } loc(#loc127)
  cir.func no_proto internal private @good2() extra(#fn_attr1) {
    cir.scope {
      %0 = cir.const #cir.int<6> : !s32i loc(#loc82)
      cir.switch (%0 : !s32i) {
        cir.case(equal, [#cir.int<6> : !s32i]) {
          cir.scope {
            %1 = cir.alloca !cir.double, !cir.ptr<!cir.double>, ["doubleNumber"] {alignment = 8 : i64} loc(#loc139)
            %2 = cir.const #cir.int<0> : !s32i loc(#loc88)
            %3 = cir.call @__errno_location() : () -> !cir.ptr<!s32i> side_effect(const) extra(#fn_attr) loc(#loc89)
            cir.store %2, %3 : !s32i, !cir.ptr<!s32i> loc(#loc140)
            %4 = cir.get_global @sqrt : !cir.ptr<!cir.func<(!cir.double) -> !cir.double>> loc(#loc90)
            %5 = cir.const #cir.int<1> : !s32i loc(#loc91)
            %6 = cir.unary(minus, %5) nsw : !s32i, !s32i loc(#loc92)
            %7 = cir.cast(int_to_float, %6 : !s32i), !cir.double loc(#loc92)
            %8 = cir.call @sqrt(%7) : (!cir.double) -> !cir.double extra(#fn_attr) loc(#loc90)
            cir.store %8, %1 : !cir.double, !cir.ptr<!cir.double> loc(#loc141)
            cir.scope {
              %10 = cir.call @__errno_location() : () -> !cir.ptr<!s32i> side_effect(const) extra(#fn_attr) loc(#loc97)
              %11 = cir.load %10 : !cir.ptr<!s32i>, !s32i loc(#loc97)
              %12 = cir.const #cir.int<33> : !s32i loc(#loc98)
              %13 = cir.cmp(eq, %11, %12) : !s32i, !cir.bool loc(#loc143)
              cir.if %13 {
                %14 = cir.get_global @".str.1" : !cir.ptr<!cir.array<!s8i x 14>> loc(#loc100)
                %15 = cir.cast(array_to_ptrdecay, %14 : !cir.ptr<!cir.array<!s8i x 14>>), !cir.ptr<!s8i> loc(#loc100)
                cir.call @printLine(%15) : (!cir.ptr<!s8i>) -> () loc(#loc101)
                %16 = cir.get_global @exit : !cir.ptr<!cir.func<(!s32i)>> loc(#loc102)
                %17 = cir.const #cir.int<1> : !s32i loc(#loc103)
                cir.call @exit(%17) : (!s32i) -> () extra(#fn_attr) loc(#loc102)
              } loc(#loc144)
            } loc(#loc142)
            %9 = cir.load %1 : !cir.ptr<!cir.double>, !cir.double loc(#loc104)
            cir.call @printDoubleLine(%9) : (!cir.double) -> () loc(#loc105)
          } loc(#loc138)
          cir.break loc(#loc106)
        } loc(#loc83)
        cir.case(default, []) {
          %1 = cir.get_global @".str" : !cir.ptr<!cir.array<!s8i x 21>> loc(#loc108)
          %2 = cir.cast(array_to_ptrdecay, %1 : !cir.ptr<!cir.array<!s8i x 21>>), !cir.ptr<!s8i> loc(#loc108)
          cir.call @printLine(%2) : (!cir.ptr<!s8i>) -> () loc(#loc109)
          cir.break loc(#loc110)
        } loc(#loc107)
        cir.yield loc(#loc80)
      } loc(#loc80)
    } loc(#loc137)
    cir.return loc(#loc79)
  } loc(#loc136)
} loc(#loc)
#loc = loc("/workspaces/juliet-c/testcases/CWE390_Error_Without_Action/CWE390_Error_Without_Action__sqrt_15.c":0:0)
#loc1 = loc("/usr/include/errno.h":37:1)
#loc2 = loc("/usr/include/errno.h":37:45)
#loc3 = loc("/usr/include/x86_64-linux-gnu/bits/mathcalls.h":143:1)
#loc4 = loc("../../testcasesupport/std_testcase_io.h":38:1)
#loc5 = loc("../../testcasesupport/std_testcase_io.h":38:41)
#loc6 = loc("../../testcasesupport/std_testcase_io.h":14:1)
#loc7 = loc("../../testcasesupport/std_testcase_io.h":14:33)
#loc8 = loc("CWE390_Error_Without_Action__sqrt_15.c":42:19)
#loc9 = loc("CWE390_Error_Without_Action__sqrt_15.c":23:1)
#loc10 = loc("CWE390_Error_Without_Action__sqrt_15.c":45:1)
#loc11 = loc("CWE390_Error_Without_Action__sqrt_15.c":25:5)
#loc12 = loc("CWE390_Error_Without_Action__sqrt_15.c":44:5)
#loc13 = loc("CWE390_Error_Without_Action__sqrt_15.c":25:12)
#loc14 = loc("CWE390_Error_Without_Action__sqrt_15.c":27:5)
#loc15 = loc("CWE390_Error_Without_Action__sqrt_15.c":28:5)
#loc16 = loc("CWE390_Error_Without_Action__sqrt_15.c":38:5)
#loc17 = loc("CWE390_Error_Without_Action__sqrt_15.c":29:9)
#loc18 = loc("CWE390_Error_Without_Action__sqrt_15.c":29:16)
#loc19 = loc("CWE390_Error_Without_Action__sqrt_15.c":30:17)
#loc20 = loc("CWE390_Error_Without_Action__sqrt_15.c":30:9)
#loc21 = loc("CWE390_Error_Without_Action__sqrt_15.c":31:32)
#loc22 = loc("CWE390_Error_Without_Action__sqrt_15.c":31:46)
#loc23 = loc("CWE390_Error_Without_Action__sqrt_15.c":31:45)
#loc24 = loc("CWE390_Error_Without_Action__sqrt_15.c":31:9)
#loc25 = loc("CWE390_Error_Without_Action__sqrt_15.c":31:47)
#loc26 = loc("CWE390_Error_Without_Action__sqrt_15.c":33:9)
#loc27 = loc("CWE390_Error_Without_Action__sqrt_15.c":36:9)
#loc28 = loc("CWE390_Error_Without_Action__sqrt_15.c":33:13)
#loc29 = loc("CWE390_Error_Without_Action__sqrt_15.c":33:22)
#loc30 = loc("CWE390_Error_Without_Action__sqrt_15.c":34:9)
#loc31 = loc("CWE390_Error_Without_Action__sqrt_15.c":37:25)
#loc32 = loc("CWE390_Error_Without_Action__sqrt_15.c":37:9)
#loc33 = loc("CWE390_Error_Without_Action__sqrt_15.c":39:5)
#loc34 = loc("CWE390_Error_Without_Action__sqrt_15.c":40:5)
#loc35 = loc("CWE390_Error_Without_Action__sqrt_15.c":42:9)
#loc36 = loc("CWE390_Error_Without_Action__sqrt_15.c":43:9)
#loc37 = loc("CWE390_Error_Without_Action__sqrt_15.c":103:1)
#loc38 = loc("CWE390_Error_Without_Action__sqrt_15.c":107:1)
#loc39 = loc("CWE390_Error_Without_Action__sqrt_15.c":105:5)
#loc40 = loc("CWE390_Error_Without_Action__sqrt_15.c":105:11)
#loc41 = loc("CWE390_Error_Without_Action__sqrt_15.c":106:5)
#loc42 = loc("CWE390_Error_Without_Action__sqrt_15.c":106:11)
#loc43 = loc("CWE390_Error_Without_Action__sqrt_15.c":68:23)
#loc44 = loc("/usr/include/stdlib.h":756:1)
#loc45 = loc("/usr/include/stdlib.h":756:70)
#loc46 = loc("CWE390_Error_Without_Action__sqrt_15.c":52:1)
#loc47 = loc("CWE390_Error_Without_Action__sqrt_15.c":75:1)
#loc48 = loc("CWE390_Error_Without_Action__sqrt_15.c":54:5)
#loc49 = loc("CWE390_Error_Without_Action__sqrt_15.c":74:5)
#loc50 = loc("CWE390_Error_Without_Action__sqrt_15.c":54:12)
#loc51 = loc("CWE390_Error_Without_Action__sqrt_15.c":56:5)
#loc52 = loc("CWE390_Error_Without_Action__sqrt_15.c":58:19)
#loc53 = loc("CWE390_Error_Without_Action__sqrt_15.c":58:9)
#loc54 = loc("CWE390_Error_Without_Action__sqrt_15.c":59:9)
#loc55 = loc("CWE390_Error_Without_Action__sqrt_15.c":60:5)
#loc56 = loc("CWE390_Error_Without_Action__sqrt_15.c":61:5)
#loc57 = loc("CWE390_Error_Without_Action__sqrt_15.c":72:5)
#loc58 = loc("CWE390_Error_Without_Action__sqrt_15.c":62:9)
#loc59 = loc("CWE390_Error_Without_Action__sqrt_15.c":62:16)
#loc60 = loc("CWE390_Error_Without_Action__sqrt_15.c":63:17)
#loc61 = loc("CWE390_Error_Without_Action__sqrt_15.c":63:9)
#loc62 = loc("CWE390_Error_Without_Action__sqrt_15.c":64:32)
#loc63 = loc("CWE390_Error_Without_Action__sqrt_15.c":64:46)
#loc64 = loc("CWE390_Error_Without_Action__sqrt_15.c":64:45)
#loc65 = loc("CWE390_Error_Without_Action__sqrt_15.c":64:9)
#loc66 = loc("CWE390_Error_Without_Action__sqrt_15.c":64:47)
#loc67 = loc("CWE390_Error_Without_Action__sqrt_15.c":66:9)
#loc68 = loc("CWE390_Error_Without_Action__sqrt_15.c":70:9)
#loc69 = loc("CWE390_Error_Without_Action__sqrt_15.c":66:13)
#loc70 = loc("CWE390_Error_Without_Action__sqrt_15.c":66:22)
#loc71 = loc("CWE390_Error_Without_Action__sqrt_15.c":67:9)
#loc72 = loc("CWE390_Error_Without_Action__sqrt_15.c":68:13)
#loc73 = loc("CWE390_Error_Without_Action__sqrt_15.c":69:13)
#loc74 = loc("CWE390_Error_Without_Action__sqrt_15.c":69:18)
#loc75 = loc("CWE390_Error_Without_Action__sqrt_15.c":71:25)
#loc76 = loc("CWE390_Error_Without_Action__sqrt_15.c":71:9)
#loc77 = loc("CWE390_Error_Without_Action__sqrt_15.c":73:5)
#loc78 = loc("CWE390_Error_Without_Action__sqrt_15.c":78:1)
#loc79 = loc("CWE390_Error_Without_Action__sqrt_15.c":101:1)
#loc80 = loc("CWE390_Error_Without_Action__sqrt_15.c":80:5)
#loc81 = loc("CWE390_Error_Without_Action__sqrt_15.c":100:5)
#loc82 = loc("CWE390_Error_Without_Action__sqrt_15.c":80:12)
#loc83 = loc("CWE390_Error_Without_Action__sqrt_15.c":82:5)
#loc84 = loc("CWE390_Error_Without_Action__sqrt_15.c":83:5)
#loc85 = loc("CWE390_Error_Without_Action__sqrt_15.c":94:5)
#loc86 = loc("CWE390_Error_Without_Action__sqrt_15.c":84:9)
#loc87 = loc("CWE390_Error_Without_Action__sqrt_15.c":84:16)
#loc88 = loc("CWE390_Error_Without_Action__sqrt_15.c":85:17)
#loc89 = loc("CWE390_Error_Without_Action__sqrt_15.c":85:9)
#loc90 = loc("CWE390_Error_Without_Action__sqrt_15.c":86:32)
#loc91 = loc("CWE390_Error_Without_Action__sqrt_15.c":86:46)
#loc92 = loc("CWE390_Error_Without_Action__sqrt_15.c":86:45)
#loc93 = loc("CWE390_Error_Without_Action__sqrt_15.c":86:9)
#loc94 = loc("CWE390_Error_Without_Action__sqrt_15.c":86:47)
#loc95 = loc("CWE390_Error_Without_Action__sqrt_15.c":88:9)
#loc96 = loc("CWE390_Error_Without_Action__sqrt_15.c":92:9)
#loc97 = loc("CWE390_Error_Without_Action__sqrt_15.c":88:13)
#loc98 = loc("CWE390_Error_Without_Action__sqrt_15.c":88:22)
#loc99 = loc("CWE390_Error_Without_Action__sqrt_15.c":89:9)
#loc100 = loc("CWE390_Error_Without_Action__sqrt_15.c":90:23)
#loc101 = loc("CWE390_Error_Without_Action__sqrt_15.c":90:13)
#loc102 = loc("CWE390_Error_Without_Action__sqrt_15.c":91:13)
#loc103 = loc("CWE390_Error_Without_Action__sqrt_15.c":91:18)
#loc104 = loc("CWE390_Error_Without_Action__sqrt_15.c":93:25)
#loc105 = loc("CWE390_Error_Without_Action__sqrt_15.c":93:9)
#loc106 = loc("CWE390_Error_Without_Action__sqrt_15.c":95:5)
#loc107 = loc("CWE390_Error_Without_Action__sqrt_15.c":96:5)
#loc108 = loc("CWE390_Error_Without_Action__sqrt_15.c":98:19)
#loc109 = loc("CWE390_Error_Without_Action__sqrt_15.c":98:9)
#loc110 = loc("CWE390_Error_Without_Action__sqrt_15.c":99:9)
#loc111 = loc(fused[#loc1, #loc2])
#loc112 = loc(fused[#loc4, #loc5])
#loc113 = loc(fused[#loc6, #loc7])
#loc114 = loc(fused[#loc9, #loc10])
#loc115 = loc(fused[#loc11, #loc12])
#loc116 = loc(fused[#loc15, #loc16])
#loc117 = loc(fused[#loc17, #loc18])
#loc118 = loc(fused[#loc20, #loc19])
#loc119 = loc(fused[#loc24, #loc25])
#loc120 = loc(fused[#loc26, #loc27])
#loc121 = loc(fused[#loc28, #loc29])
#loc122 = loc(fused[#loc30, #loc27])
#loc123 = loc(fused[#loc37, #loc38])
#loc124 = loc(fused[#loc39, #loc40])
#loc125 = loc(fused[#loc41, #loc42])
#loc126 = loc(fused[#loc44, #loc45])
#loc127 = loc(fused[#loc46, #loc47])
#loc128 = loc(fused[#loc48, #loc49])
#loc129 = loc(fused[#loc56, #loc57])
#loc130 = loc(fused[#loc58, #loc59])
#loc131 = loc(fused[#loc61, #loc60])
#loc132 = loc(fused[#loc65, #loc66])
#loc133 = loc(fused[#loc67, #loc68])
#loc134 = loc(fused[#loc69, #loc70])
#loc135 = loc(fused[#loc71, #loc68])
#loc136 = loc(fused[#loc78, #loc79])
#loc137 = loc(fused[#loc80, #loc81])
#loc138 = loc(fused[#loc84, #loc85])
#loc139 = loc(fused[#loc86, #loc87])
#loc140 = loc(fused[#loc89, #loc88])
#loc141 = loc(fused[#loc93, #loc94])
#loc142 = loc(fused[#loc95, #loc96])
#loc143 = loc(fused[#loc97, #loc98])
#loc144 = loc(fused[#loc99, #loc96])
