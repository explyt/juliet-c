!s16i = !cir.int<s, 16>
!s32i = !cir.int<s, 32>
!s64i = !cir.int<s, 64>
!s8i = !cir.int<s, 8>
!u32i = !cir.int<u, 32>
!void = !cir.void
#fn_attr = #cir<extra({inline = #cir.inline<no>, nothrow = #cir.nothrow, optnone = #cir.optnone})>
#fn_attr1 = #cir<extra({nothrow = #cir.nothrow})>
#loc47 = loc("CWE191_Integer_Underflow__short_min_multiply_16.c":116:10)
#loc48 = loc("CWE191_Integer_Underflow__short_min_multiply_16.c":116:14)
#loc49 = loc("CWE191_Integer_Underflow__short_min_multiply_16.c":116:20)
#loc50 = loc("CWE191_Integer_Underflow__short_min_multiply_16.c":116:32)
#loc147 = loc(fused[#loc47, #loc48])
#loc148 = loc(fused[#loc49, #loc50])
module @"/home/ladisgin/git_proj/juliet-c/testcases/CWE191_Integer_Underflow/s03/CWE191_Integer_Underflow__short_min_multiply_16.c" attributes {cir.lang = #cir.lang<c>, cir.sob = #cir.signed_overflow_behavior<undefined>, cir.triple = "x86_64-unknown-linux-gnu", dlti.dl_spec = #dlti.dl_spec<i8 = dense<8> : vector<2xi64>, i16 = dense<16> : vector<2xi64>, i32 = dense<32> : vector<2xi64>, f64 = dense<64> : vector<2xi64>, f16 = dense<16> : vector<2xi64>, f128 = dense<128> : vector<2xi64>, !llvm.ptr<270> = dense<32> : vector<4xi64>, !llvm.ptr<271> = dense<32> : vector<4xi64>, !llvm.ptr<272> = dense<64> : vector<4xi64>, i64 = dense<64> : vector<2xi64>, i128 = dense<128> : vector<2xi64>, f80 = dense<128> : vector<2xi64>, !llvm.ptr = dense<64> : vector<4xi64>, i1 = dense<8> : vector<2xi64>, "dlti.endianness" = "little", "dlti.stack_alignment" = 128 : i64>} {
  cir.func private @printIntLine(!s32i) loc(#loc129)
  cir.func no_proto @CWE191_Integer_Underflow__short_min_multiply_16_bad() extra(#fn_attr) {
    %0 = cir.alloca !s16i, !cir.ptr<!s16i>, ["data"] {alignment = 2 : i64} loc(#loc131)
    %1 = cir.const #cir.int<0> : !s32i loc(#loc7)
    %2 = cir.cast(integral, %1 : !s32i), !s16i loc(#loc7)
    cir.store %2, %0 : !s16i, !cir.ptr<!s16i> loc(#loc132)
    cir.scope {
      cir.while {
        %3 = cir.const #cir.int<1> : !s32i loc(#loc11)
        %4 = cir.cast(int_to_bool, %3 : !s32i), !cir.bool loc(#loc11)
        cir.condition(%4) loc(#loc11)
      } do {
        %3 = cir.const #cir.int<32767> : !s32i loc(#loc12)
        %4 = cir.unary(minus, %3) : !s32i, !s32i loc(#loc12)
        %5 = cir.const #cir.int<1> : !s32i loc(#loc12)
        %6 = cir.binop(sub, %4, %5) nsw : !s32i loc(#loc12)
        %7 = cir.cast(integral, %6 : !s32i), !s16i loc(#loc12)
        cir.store %7, %0 : !s16i, !cir.ptr<!s16i> loc(#loc134)
        cir.break loc(#loc14)
      } loc(#loc133)
    } loc(#loc133)
    cir.scope {
      cir.while {
        %3 = cir.const #cir.int<1> : !s32i loc(#loc17)
        %4 = cir.cast(int_to_bool, %3 : !s32i), !cir.bool loc(#loc17)
        cir.condition(%4) loc(#loc17)
      } do {
        cir.scope {
          %3 = cir.load %0 : !cir.ptr<!s16i>, !s16i loc(#loc20)
          %4 = cir.cast(integral, %3 : !s16i), !s32i loc(#loc20)
          %5 = cir.const #cir.int<0> : !s32i loc(#loc21)
          %6 = cir.cmp(lt, %4, %5) : !s32i, !cir.bool loc(#loc137)
          cir.if %6 {
            %7 = cir.alloca !s16i, !cir.ptr<!s16i>, ["result", init] {alignment = 2 : i64} loc(#loc139)
            %8 = cir.load %0 : !cir.ptr<!s16i>, !s16i loc(#loc25)
            %9 = cir.cast(integral, %8 : !s16i), !s32i loc(#loc25)
            %10 = cir.const #cir.int<2> : !s32i loc(#loc24)
            %11 = cir.binop(mul, %9, %10) nsw : !s32i loc(#loc25)
            %12 = cir.cast(integral, %11 : !s32i), !s16i loc(#loc25)
            cir.store %12, %7 : !s16i, !cir.ptr<!s16i> loc(#loc139)
            %13 = cir.load %7 : !cir.ptr<!s16i>, !s16i loc(#loc26)
            %14 = cir.cast(integral, %13 : !s16i), !s32i loc(#loc26)
            cir.call @printIntLine(%14) : (!s32i) -> () loc(#loc27)
          } loc(#loc138)
        } loc(#loc136)
        cir.break loc(#loc28)
      } loc(#loc135)
    } loc(#loc135)
    cir.return loc(#loc4)
  } loc(#loc130)
  cir.func no_proto @CWE191_Integer_Underflow__short_min_multiply_16_good() extra(#fn_attr) {
    %0 = cir.get_global @goodB2G : !cir.ptr<!cir.func<!void ()>> loc(#loc141)
    cir.call %0() : (!cir.ptr<!cir.func<!void ()>>) -> () loc(#loc31)
    %1 = cir.get_global @goodG2B : !cir.ptr<!cir.func<!void ()>> loc(#loc142)
    cir.call %1() : (!cir.ptr<!cir.func<!void ()>>) -> () loc(#loc33)
    cir.return loc(#loc30)
  } loc(#loc140)
  cir.func private @srand(!u32i) extra(#fn_attr1) loc(#loc143)
  cir.func private @time(!cir.ptr<!s64i>) -> !s64i extra(#fn_attr1) loc(#loc144)
  cir.func private @printLine(!cir.ptr<!s8i>) loc(#loc145)
  cir.global "private" constant cir_private dsolocal @".str" = #cir.const_array<"Calling good()...\00" : !cir.array<!s8i x 18>> : !cir.array<!s8i x 18> {alignment = 1 : i64} loc(#loc41)
  cir.global "private" constant cir_private dsolocal @".str.1" = #cir.const_array<"Finished good()\00" : !cir.array<!s8i x 16>> : !cir.array<!s8i x 16> {alignment = 1 : i64} loc(#loc42)
  cir.global "private" constant cir_private dsolocal @".str.2" = #cir.const_array<"Calling bad()...\00" : !cir.array<!s8i x 17>> : !cir.array<!s8i x 17> {alignment = 1 : i64} loc(#loc43)
  cir.global "private" constant cir_private dsolocal @".str.3" = #cir.const_array<"Finished bad()\00" : !cir.array<!s8i x 15>> : !cir.array<!s8i x 15> {alignment = 1 : i64} loc(#loc44)
  cir.func @main(%arg0: !s32i loc(fused[#loc47, #loc48]), %arg1: !cir.ptr<!cir.ptr<!s8i>> loc(fused[#loc49, #loc50])) -> !s32i extra(#fn_attr) {
    %0 = cir.alloca !s32i, !cir.ptr<!s32i>, ["argc", init] {alignment = 4 : i64} loc(#loc147)
    %1 = cir.alloca !cir.ptr<!cir.ptr<!s8i>>, !cir.ptr<!cir.ptr<!cir.ptr<!s8i>>>, ["argv", init] {alignment = 8 : i64} loc(#loc148)
    %2 = cir.alloca !s32i, !cir.ptr<!s32i>, ["__retval"] {alignment = 4 : i64} loc(#loc46)
    cir.store %arg0, %0 : !s32i, !cir.ptr<!s32i> loc(#loc51)
    cir.store %arg1, %1 : !cir.ptr<!cir.ptr<!s8i>>, !cir.ptr<!cir.ptr<!cir.ptr<!s8i>>> loc(#loc51)
    %3 = cir.const #cir.ptr<null> : !cir.ptr<!s64i> loc(#loc52)
    %4 = cir.call @time(%3) : (!cir.ptr<!s64i>) -> !s64i extra(#fn_attr1) loc(#loc53)
    %5 = cir.cast(integral, %4 : !s64i), !u32i loc(#loc53)
    cir.call @srand(%5) : (!u32i) -> () extra(#fn_attr1) loc(#loc54)
    %6 = cir.get_global @".str" : !cir.ptr<!cir.array<!s8i x 18>> loc(#loc41)
    %7 = cir.cast(array_to_ptrdecay, %6 : !cir.ptr<!cir.array<!s8i x 18>>), !cir.ptr<!s8i> loc(#loc41)
    cir.call @printLine(%7) : (!cir.ptr<!s8i>) -> () loc(#loc55)
    %8 = cir.get_global @CWE191_Integer_Underflow__short_min_multiply_16_good : !cir.ptr<!cir.func<!void ()>> loc(#loc149)
    cir.call @CWE191_Integer_Underflow__short_min_multiply_16_good() : () -> () loc(#loc56)
    %9 = cir.get_global @".str.1" : !cir.ptr<!cir.array<!s8i x 16>> loc(#loc42)
    %10 = cir.cast(array_to_ptrdecay, %9 : !cir.ptr<!cir.array<!s8i x 16>>), !cir.ptr<!s8i> loc(#loc42)
    cir.call @printLine(%10) : (!cir.ptr<!s8i>) -> () loc(#loc58)
    %11 = cir.get_global @".str.2" : !cir.ptr<!cir.array<!s8i x 17>> loc(#loc43)
    %12 = cir.cast(array_to_ptrdecay, %11 : !cir.ptr<!cir.array<!s8i x 17>>), !cir.ptr<!s8i> loc(#loc43)
    cir.call @printLine(%12) : (!cir.ptr<!s8i>) -> () loc(#loc59)
    %13 = cir.get_global @CWE191_Integer_Underflow__short_min_multiply_16_bad : !cir.ptr<!cir.func<!void ()>> loc(#loc150)
    cir.call @CWE191_Integer_Underflow__short_min_multiply_16_bad() : () -> () loc(#loc60)
    %14 = cir.get_global @".str.3" : !cir.ptr<!cir.array<!s8i x 15>> loc(#loc44)
    %15 = cir.cast(array_to_ptrdecay, %14 : !cir.ptr<!cir.array<!s8i x 15>>), !cir.ptr<!s8i> loc(#loc44)
    cir.call @printLine(%15) : (!cir.ptr<!s8i>) -> () loc(#loc62)
    %16 = cir.const #cir.int<0> : !s32i loc(#loc63)
    cir.store %16, %2 : !s32i, !cir.ptr<!s32i> loc(#loc151)
    %17 = cir.load %2 : !cir.ptr<!s32i>, !s32i loc(#loc151)
    cir.return %17 : !s32i loc(#loc151)
  } loc(#loc146)
  cir.global "private" constant cir_private dsolocal @".str.4" = #cir.const_array<"data value is too small to perform multiplication.\00" : !cir.array<!s8i x 51>> : !cir.array<!s8i x 51> {alignment = 1 : i64} loc(#loc65)
  cir.func no_proto internal private @goodB2G() extra(#fn_attr) {
    %0 = cir.alloca !s16i, !cir.ptr<!s16i>, ["data"] {alignment = 2 : i64} loc(#loc153)
    %1 = cir.const #cir.int<0> : !s32i loc(#loc70)
    %2 = cir.cast(integral, %1 : !s32i), !s16i loc(#loc70)
    cir.store %2, %0 : !s16i, !cir.ptr<!s16i> loc(#loc154)
    cir.scope {
      cir.while {
        %3 = cir.const #cir.int<1> : !s32i loc(#loc74)
        %4 = cir.cast(int_to_bool, %3 : !s32i), !cir.bool loc(#loc74)
        cir.condition(%4) loc(#loc74)
      } do {
        %3 = cir.const #cir.int<32767> : !s32i loc(#loc75)
        %4 = cir.unary(minus, %3) : !s32i, !s32i loc(#loc75)
        %5 = cir.const #cir.int<1> : !s32i loc(#loc75)
        %6 = cir.binop(sub, %4, %5) nsw : !s32i loc(#loc75)
        %7 = cir.cast(integral, %6 : !s32i), !s16i loc(#loc75)
        cir.store %7, %0 : !s16i, !cir.ptr<!s16i> loc(#loc156)
        cir.break loc(#loc77)
      } loc(#loc155)
    } loc(#loc155)
    cir.scope {
      cir.while {
        %3 = cir.const #cir.int<1> : !s32i loc(#loc80)
        %4 = cir.cast(int_to_bool, %3 : !s32i), !cir.bool loc(#loc80)
        cir.condition(%4) loc(#loc80)
      } do {
        cir.scope {
          %3 = cir.load %0 : !cir.ptr<!s16i>, !s16i loc(#loc83)
          %4 = cir.cast(integral, %3 : !s16i), !s32i loc(#loc83)
          %5 = cir.const #cir.int<0> : !s32i loc(#loc84)
          %6 = cir.cmp(lt, %4, %5) : !s32i, !cir.bool loc(#loc159)
          cir.if %6 {
            cir.scope {
              %7 = cir.load %0 : !cir.ptr<!s16i>, !s16i loc(#loc88)
              %8 = cir.cast(integral, %7 : !s16i), !s32i loc(#loc88)
              %9 = cir.const #cir.int<32767> : !s32i loc(#loc89)
              %10 = cir.unary(minus, %9) : !s32i, !s32i loc(#loc89)
              %11 = cir.const #cir.int<1> : !s32i loc(#loc89)
              %12 = cir.binop(sub, %10, %11) nsw : !s32i loc(#loc89)
              %13 = cir.const #cir.int<2> : !s32i loc(#loc90)
              %14 = cir.binop(div, %12, %13) : !s32i loc(#loc162)
              %15 = cir.cmp(gt, %8, %14) : !s32i, !cir.bool loc(#loc163)
              cir.if %15 {
                %16 = cir.alloca !s16i, !cir.ptr<!s16i>, ["result", init] {alignment = 2 : i64} loc(#loc165)
                %17 = cir.load %0 : !cir.ptr<!s16i>, !s16i loc(#loc97)
                %18 = cir.cast(integral, %17 : !s16i), !s32i loc(#loc97)
                %19 = cir.const #cir.int<2> : !s32i loc(#loc96)
                %20 = cir.binop(mul, %18, %19) nsw : !s32i loc(#loc97)
                %21 = cir.cast(integral, %20 : !s32i), !s16i loc(#loc97)
                cir.store %21, %16 : !s16i, !cir.ptr<!s16i> loc(#loc165)
                %22 = cir.load %16 : !cir.ptr<!s16i>, !s16i loc(#loc98)
                %23 = cir.cast(integral, %22 : !s16i), !s32i loc(#loc98)
                cir.call @printIntLine(%23) : (!s32i) -> () loc(#loc99)
              } else {
                %16 = cir.get_global @".str.4" : !cir.ptr<!cir.array<!s8i x 51>> loc(#loc65)
                %17 = cir.cast(array_to_ptrdecay, %16 : !cir.ptr<!cir.array<!s8i x 51>>), !cir.ptr<!s8i> loc(#loc65)
                cir.call @printLine(%17) : (!cir.ptr<!s8i>) -> () loc(#loc100)
              } loc(#loc164)
            } loc(#loc161)
          } loc(#loc160)
        } loc(#loc158)
        cir.break loc(#loc101)
      } loc(#loc157)
    } loc(#loc157)
    cir.return loc(#loc67)
  } loc(#loc152)
  cir.func no_proto internal private @goodG2B() extra(#fn_attr) {
    %0 = cir.alloca !s16i, !cir.ptr<!s16i>, ["data"] {alignment = 2 : i64} loc(#loc167)
    %1 = cir.const #cir.int<0> : !s32i loc(#loc106)
    %2 = cir.cast(integral, %1 : !s32i), !s16i loc(#loc106)
    cir.store %2, %0 : !s16i, !cir.ptr<!s16i> loc(#loc168)
    cir.scope {
      cir.while {
        %3 = cir.const #cir.int<1> : !s32i loc(#loc110)
        %4 = cir.cast(int_to_bool, %3 : !s32i), !cir.bool loc(#loc110)
        cir.condition(%4) loc(#loc110)
      } do {
        %3 = cir.const #cir.int<2> : !s32i loc(#loc111)
        %4 = cir.unary(minus, %3) : !s32i, !s32i loc(#loc112)
        %5 = cir.cast(integral, %4 : !s32i), !s16i loc(#loc112)
        cir.store %5, %0 : !s16i, !cir.ptr<!s16i> loc(#loc170)
        cir.break loc(#loc114)
      } loc(#loc169)
    } loc(#loc169)
    cir.scope {
      cir.while {
        %3 = cir.const #cir.int<1> : !s32i loc(#loc117)
        %4 = cir.cast(int_to_bool, %3 : !s32i), !cir.bool loc(#loc117)
        cir.condition(%4) loc(#loc117)
      } do {
        cir.scope {
          %3 = cir.load %0 : !cir.ptr<!s16i>, !s16i loc(#loc120)
          %4 = cir.cast(integral, %3 : !s16i), !s32i loc(#loc120)
          %5 = cir.const #cir.int<0> : !s32i loc(#loc121)
          %6 = cir.cmp(lt, %4, %5) : !s32i, !cir.bool loc(#loc173)
          cir.if %6 {
            %7 = cir.alloca !s16i, !cir.ptr<!s16i>, ["result", init] {alignment = 2 : i64} loc(#loc175)
            %8 = cir.load %0 : !cir.ptr<!s16i>, !s16i loc(#loc125)
            %9 = cir.cast(integral, %8 : !s16i), !s32i loc(#loc125)
            %10 = cir.const #cir.int<2> : !s32i loc(#loc124)
            %11 = cir.binop(mul, %9, %10) nsw : !s32i loc(#loc125)
            %12 = cir.cast(integral, %11 : !s32i), !s16i loc(#loc125)
            cir.store %12, %7 : !s16i, !cir.ptr<!s16i> loc(#loc175)
            %13 = cir.load %7 : !cir.ptr<!s16i>, !s16i loc(#loc126)
            %14 = cir.cast(integral, %13 : !s16i), !s32i loc(#loc126)
            cir.call @printIntLine(%14) : (!s32i) -> () loc(#loc127)
          } loc(#loc174)
        } loc(#loc172)
        cir.break loc(#loc128)
      } loc(#loc171)
    } loc(#loc171)
    cir.return loc(#loc103)
  } loc(#loc166)
} loc(#loc)
#loc = loc("/home/ladisgin/git_proj/juliet-c/testcases/CWE191_Integer_Underflow/s03/CWE191_Integer_Underflow__short_min_multiply_16.c":0:0)
#loc1 = loc("../../../testcasesupport/std_testcase_io.h":18:1)
#loc2 = loc("../../../testcasesupport/std_testcase_io.h":18:33)
#loc3 = loc("CWE191_Integer_Underflow__short_min_multiply_16.c":22:1)
#loc4 = loc("CWE191_Integer_Underflow__short_min_multiply_16.c":42:1)
#loc5 = loc("CWE191_Integer_Underflow__short_min_multiply_16.c":24:5)
#loc6 = loc("CWE191_Integer_Underflow__short_min_multiply_16.c":24:11)
#loc7 = loc("CWE191_Integer_Underflow__short_min_multiply_16.c":25:12)
#loc8 = loc("CWE191_Integer_Underflow__short_min_multiply_16.c":25:5)
#loc9 = loc("CWE191_Integer_Underflow__short_min_multiply_16.c":26:5)
#loc10 = loc("CWE191_Integer_Underflow__short_min_multiply_16.c":31:5)
#loc11 = loc("CWE191_Integer_Underflow__short_min_multiply_16.c":26:11)
#loc12 = loc("CWE191_Integer_Underflow__short_min_multiply_16.c":29:16)
#loc13 = loc("CWE191_Integer_Underflow__short_min_multiply_16.c":29:9)
#loc14 = loc("CWE191_Integer_Underflow__short_min_multiply_16.c":30:9)
#loc15 = loc("CWE191_Integer_Underflow__short_min_multiply_16.c":32:5)
#loc16 = loc("CWE191_Integer_Underflow__short_min_multiply_16.c":41:5)
#loc17 = loc("CWE191_Integer_Underflow__short_min_multiply_16.c":32:11)
#loc18 = loc("CWE191_Integer_Underflow__short_min_multiply_16.c":34:9)
#loc19 = loc("CWE191_Integer_Underflow__short_min_multiply_16.c":39:9)
#loc20 = loc("CWE191_Integer_Underflow__short_min_multiply_16.c":34:12)
#loc21 = loc("CWE191_Integer_Underflow__short_min_multiply_16.c":34:19)
#loc22 = loc("CWE191_Integer_Underflow__short_min_multiply_16.c":35:9)
#loc23 = loc("CWE191_Integer_Underflow__short_min_multiply_16.c":37:13)
#loc24 = loc("CWE191_Integer_Underflow__short_min_multiply_16.c":37:35)
#loc25 = loc("CWE191_Integer_Underflow__short_min_multiply_16.c":37:28)
#loc26 = loc("CWE191_Integer_Underflow__short_min_multiply_16.c":38:26)
#loc27 = loc("CWE191_Integer_Underflow__short_min_multiply_16.c":38:13)
#loc28 = loc("CWE191_Integer_Underflow__short_min_multiply_16.c":40:9)
#loc29 = loc("CWE191_Integer_Underflow__short_min_multiply_16.c":101:1)
#loc30 = loc("CWE191_Integer_Underflow__short_min_multiply_16.c":105:1)
#loc31 = loc("CWE191_Integer_Underflow__short_min_multiply_16.c":103:5)
#loc32 = loc("CWE191_Integer_Underflow__short_min_multiply_16.c":103:13)
#loc33 = loc("CWE191_Integer_Underflow__short_min_multiply_16.c":104:5)
#loc34 = loc("CWE191_Integer_Underflow__short_min_multiply_16.c":104:13)
#loc35 = loc("/usr/include/stdlib.h":575:1)
#loc36 = loc("/usr/include/stdlib.h":575:41)
#loc37 = loc("/usr/include/time.h":76:1)
#loc38 = loc("/usr/include/time.h":76:38)
#loc39 = loc("../../../testcasesupport/std_testcase_io.h":14:1)
#loc40 = loc("../../../testcasesupport/std_testcase_io.h":14:33)
#loc41 = loc("CWE191_Integer_Underflow__short_min_multiply_16.c":121:15)
#loc42 = loc("CWE191_Integer_Underflow__short_min_multiply_16.c":123:15)
#loc43 = loc("CWE191_Integer_Underflow__short_min_multiply_16.c":126:15)
#loc44 = loc("CWE191_Integer_Underflow__short_min_multiply_16.c":128:15)
#loc45 = loc("CWE191_Integer_Underflow__short_min_multiply_16.c":116:1)
#loc46 = loc("CWE191_Integer_Underflow__short_min_multiply_16.c":131:1)
#loc51 = loc("CWE191_Integer_Underflow__short_min_multiply_16.c":117:1)
#loc52 = loc("CWE191_Integer_Underflow__short_min_multiply_16.c":119:27)
#loc53 = loc("CWE191_Integer_Underflow__short_min_multiply_16.c":119:22)
#loc54 = loc("CWE191_Integer_Underflow__short_min_multiply_16.c":119:5)
#loc55 = loc("CWE191_Integer_Underflow__short_min_multiply_16.c":121:5)
#loc56 = loc("CWE191_Integer_Underflow__short_min_multiply_16.c":122:5)
#loc57 = loc("CWE191_Integer_Underflow__short_min_multiply_16.c":122:58)
#loc58 = loc("CWE191_Integer_Underflow__short_min_multiply_16.c":123:5)
#loc59 = loc("CWE191_Integer_Underflow__short_min_multiply_16.c":126:5)
#loc60 = loc("CWE191_Integer_Underflow__short_min_multiply_16.c":127:5)
#loc61 = loc("CWE191_Integer_Underflow__short_min_multiply_16.c":127:57)
#loc62 = loc("CWE191_Integer_Underflow__short_min_multiply_16.c":128:5)
#loc63 = loc("CWE191_Integer_Underflow__short_min_multiply_16.c":130:12)
#loc64 = loc("CWE191_Integer_Underflow__short_min_multiply_16.c":130:5)
#loc65 = loc("CWE191_Integer_Underflow__short_min_multiply_16.c":71:27)
#loc66 = loc("CWE191_Integer_Underflow__short_min_multiply_16.c":49:1)
#loc67 = loc("CWE191_Integer_Underflow__short_min_multiply_16.c":76:1)
#loc68 = loc("CWE191_Integer_Underflow__short_min_multiply_16.c":51:5)
#loc69 = loc("CWE191_Integer_Underflow__short_min_multiply_16.c":51:11)
#loc70 = loc("CWE191_Integer_Underflow__short_min_multiply_16.c":52:12)
#loc71 = loc("CWE191_Integer_Underflow__short_min_multiply_16.c":52:5)
#loc72 = loc("CWE191_Integer_Underflow__short_min_multiply_16.c":53:5)
#loc73 = loc("CWE191_Integer_Underflow__short_min_multiply_16.c":58:5)
#loc74 = loc("CWE191_Integer_Underflow__short_min_multiply_16.c":53:11)
#loc75 = loc("CWE191_Integer_Underflow__short_min_multiply_16.c":56:16)
#loc76 = loc("CWE191_Integer_Underflow__short_min_multiply_16.c":56:9)
#loc77 = loc("CWE191_Integer_Underflow__short_min_multiply_16.c":57:9)
#loc78 = loc("CWE191_Integer_Underflow__short_min_multiply_16.c":59:5)
#loc79 = loc("CWE191_Integer_Underflow__short_min_multiply_16.c":75:5)
#loc80 = loc("CWE191_Integer_Underflow__short_min_multiply_16.c":59:11)
#loc81 = loc("CWE191_Integer_Underflow__short_min_multiply_16.c":61:9)
#loc82 = loc("CWE191_Integer_Underflow__short_min_multiply_16.c":73:9)
#loc83 = loc("CWE191_Integer_Underflow__short_min_multiply_16.c":61:12)
#loc84 = loc("CWE191_Integer_Underflow__short_min_multiply_16.c":61:19)
#loc85 = loc("CWE191_Integer_Underflow__short_min_multiply_16.c":62:9)
#loc86 = loc("CWE191_Integer_Underflow__short_min_multiply_16.c":64:13)
#loc87 = loc("CWE191_Integer_Underflow__short_min_multiply_16.c":72:13)
#loc88 = loc("CWE191_Integer_Underflow__short_min_multiply_16.c":64:17)
#loc89 = loc("CWE191_Integer_Underflow__short_min_multiply_16.c":64:25)
#loc90 = loc("CWE191_Integer_Underflow__short_min_multiply_16.c":64:34)
#loc91 = loc("CWE191_Integer_Underflow__short_min_multiply_16.c":64:35)
#loc92 = loc("CWE191_Integer_Underflow__short_min_multiply_16.c":65:13)
#loc93 = loc("CWE191_Integer_Underflow__short_min_multiply_16.c":68:13)
#loc94 = loc("CWE191_Integer_Underflow__short_min_multiply_16.c":70:13)
#loc95 = loc("CWE191_Integer_Underflow__short_min_multiply_16.c":66:17)
#loc96 = loc("CWE191_Integer_Underflow__short_min_multiply_16.c":66:39)
#loc97 = loc("CWE191_Integer_Underflow__short_min_multiply_16.c":66:32)
#loc98 = loc("CWE191_Integer_Underflow__short_min_multiply_16.c":67:30)
#loc99 = loc("CWE191_Integer_Underflow__short_min_multiply_16.c":67:17)
#loc100 = loc("CWE191_Integer_Underflow__short_min_multiply_16.c":71:17)
#loc101 = loc("CWE191_Integer_Underflow__short_min_multiply_16.c":74:9)
#loc102 = loc("CWE191_Integer_Underflow__short_min_multiply_16.c":79:1)
#loc103 = loc("CWE191_Integer_Underflow__short_min_multiply_16.c":99:1)
#loc104 = loc("CWE191_Integer_Underflow__short_min_multiply_16.c":81:5)
#loc105 = loc("CWE191_Integer_Underflow__short_min_multiply_16.c":81:11)
#loc106 = loc("CWE191_Integer_Underflow__short_min_multiply_16.c":82:12)
#loc107 = loc("CWE191_Integer_Underflow__short_min_multiply_16.c":82:5)
#loc108 = loc("CWE191_Integer_Underflow__short_min_multiply_16.c":83:5)
#loc109 = loc("CWE191_Integer_Underflow__short_min_multiply_16.c":88:5)
#loc110 = loc("CWE191_Integer_Underflow__short_min_multiply_16.c":83:11)
#loc111 = loc("CWE191_Integer_Underflow__short_min_multiply_16.c":86:17)
#loc112 = loc("CWE191_Integer_Underflow__short_min_multiply_16.c":86:16)
#loc113 = loc("CWE191_Integer_Underflow__short_min_multiply_16.c":86:9)
#loc114 = loc("CWE191_Integer_Underflow__short_min_multiply_16.c":87:9)
#loc115 = loc("CWE191_Integer_Underflow__short_min_multiply_16.c":89:5)
#loc116 = loc("CWE191_Integer_Underflow__short_min_multiply_16.c":98:5)
#loc117 = loc("CWE191_Integer_Underflow__short_min_multiply_16.c":89:11)
#loc118 = loc("CWE191_Integer_Underflow__short_min_multiply_16.c":91:9)
#loc119 = loc("CWE191_Integer_Underflow__short_min_multiply_16.c":96:9)
#loc120 = loc("CWE191_Integer_Underflow__short_min_multiply_16.c":91:12)
#loc121 = loc("CWE191_Integer_Underflow__short_min_multiply_16.c":91:19)
#loc122 = loc("CWE191_Integer_Underflow__short_min_multiply_16.c":92:9)
#loc123 = loc("CWE191_Integer_Underflow__short_min_multiply_16.c":94:13)
#loc124 = loc("CWE191_Integer_Underflow__short_min_multiply_16.c":94:35)
#loc125 = loc("CWE191_Integer_Underflow__short_min_multiply_16.c":94:28)
#loc126 = loc("CWE191_Integer_Underflow__short_min_multiply_16.c":95:26)
#loc127 = loc("CWE191_Integer_Underflow__short_min_multiply_16.c":95:13)
#loc128 = loc("CWE191_Integer_Underflow__short_min_multiply_16.c":97:9)
#loc129 = loc(fused[#loc1, #loc2])
#loc130 = loc(fused[#loc3, #loc4])
#loc131 = loc(fused[#loc5, #loc6])
#loc132 = loc(fused[#loc8, #loc7])
#loc133 = loc(fused[#loc9, #loc10])
#loc134 = loc(fused[#loc13, #loc12])
#loc135 = loc(fused[#loc15, #loc16])
#loc136 = loc(fused[#loc18, #loc19])
#loc137 = loc(fused[#loc20, #loc21])
#loc138 = loc(fused[#loc22, #loc19])
#loc139 = loc(fused[#loc23, #loc24])
#loc140 = loc(fused[#loc29, #loc30])
#loc141 = loc(fused[#loc31, #loc32])
#loc142 = loc(fused[#loc33, #loc34])
#loc143 = loc(fused[#loc35, #loc36])
#loc144 = loc(fused[#loc37, #loc38])
#loc145 = loc(fused[#loc39, #loc40])
#loc146 = loc(fused[#loc45, #loc46])
#loc149 = loc(fused[#loc56, #loc57])
#loc150 = loc(fused[#loc60, #loc61])
#loc151 = loc(fused[#loc64, #loc63])
#loc152 = loc(fused[#loc66, #loc67])
#loc153 = loc(fused[#loc68, #loc69])
#loc154 = loc(fused[#loc71, #loc70])
#loc155 = loc(fused[#loc72, #loc73])
#loc156 = loc(fused[#loc76, #loc75])
#loc157 = loc(fused[#loc78, #loc79])
#loc158 = loc(fused[#loc81, #loc82])
#loc159 = loc(fused[#loc83, #loc84])
#loc160 = loc(fused[#loc85, #loc82])
#loc161 = loc(fused[#loc86, #loc87])
#loc162 = loc(fused[#loc89, #loc90])
#loc163 = loc(fused[#loc88, #loc91])
#loc164 = loc(fused[#loc92, #loc93, #loc94, #loc87])
#loc165 = loc(fused[#loc95, #loc96])
#loc166 = loc(fused[#loc102, #loc103])
#loc167 = loc(fused[#loc104, #loc105])
#loc168 = loc(fused[#loc107, #loc106])
#loc169 = loc(fused[#loc108, #loc109])
#loc170 = loc(fused[#loc113, #loc111])
#loc171 = loc(fused[#loc115, #loc116])
#loc172 = loc(fused[#loc118, #loc119])
#loc173 = loc(fused[#loc120, #loc121])
#loc174 = loc(fused[#loc122, #loc119])
#loc175 = loc(fused[#loc123, #loc124])
