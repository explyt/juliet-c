!s32i = !cir.int<s, 32>
!s8i = !cir.int<s, 8>
!u64i = !cir.int<u, 64>
!void = !cir.void
#fn_attr = #cir<extra({inline = #cir.inline<no>, optnone = #cir.optnone, uwtable = #cir.uwtable<async>})>
#loc7 = loc("CWE680_Integer_Overflow_to_Buffer_Overflow__new_listen_socket_65b.cpp":46:14)
#loc8 = loc("CWE680_Integer_Overflow_to_Buffer_Overflow__new_listen_socket_65b.cpp":46:18)
#loc46 = loc("CWE680_Integer_Overflow_to_Buffer_Overflow__new_listen_socket_65b.cpp":68:18)
#loc47 = loc("CWE680_Integer_Overflow_to_Buffer_Overflow__new_listen_socket_65b.cpp":68:22)
#loc86 = loc(fused[#loc7, #loc8])
#loc103 = loc(fused[#loc46, #loc47])
module @"/workspaces/juliet-c/testcases/CWE680_Integer_Overflow_to_Buffer_Overflow/CWE680_Integer_Overflow_to_Buffer_Overflow__new_listen_socket_65b.cpp" attributes {cir.lang = #cir.lang<cxx>, cir.sob = #cir.signed_overflow_behavior<undefined>, cir.triple = "x86_64-unknown-linux-gnu", cir.type_size_info = #cir.type_size_info<char = 8, int = 32, size_t = 64>, cir.uwtable = #cir.uwtable<async>, dlti.dl_spec = #dlti.dl_spec<f80 = dense<128> : vector<2xi64>, i128 = dense<128> : vector<2xi64>, !llvm.ptr<272> = dense<64> : vector<4xi64>, i64 = dense<64> : vector<2xi64>, f128 = dense<128> : vector<2xi64>, !llvm.ptr<271> = dense<32> : vector<4xi64>, f16 = dense<16> : vector<2xi64>, f64 = dense<64> : vector<2xi64>, i16 = dense<16> : vector<2xi64>, !llvm.ptr<270> = dense<32> : vector<4xi64>, i32 = dense<32> : vector<2xi64>, i8 = dense<8> : vector<2xi64>, !llvm.ptr = dense<64> : vector<4xi64>, i1 = dense<8> : vector<2xi64>, "dlti.stack_alignment" = 128 : i64, "dlti.mangling_mode" = "e", "dlti.endianness" = "little">} {
  cir.func private @_Znam(!u64i) -> !cir.ptr<!void> loc(#loc83)
  cir.func private @printIntLine(!s32i) loc(#loc84)
  cir.func @_ZN64CWE680_Integer_Overflow_to_Buffer_Overflow__new_listen_socket_657badSinkEi(%arg0: !s32i loc(fused[#loc7, #loc8])) extra(#fn_attr) {
    %0 = cir.alloca !s32i, !cir.ptr<!s32i>, ["data", init] {alignment = 4 : i64} loc(#loc86)
    cir.store %arg0, %0 : !s32i, !cir.ptr<!s32i> loc(#loc9)
    cir.scope {
      %1 = cir.alloca !u64i, !cir.ptr<!u64i>, ["dataBytes"] {alignment = 8 : i64} loc(#loc88)
      %2 = cir.alloca !u64i, !cir.ptr<!u64i>, ["i"] {alignment = 8 : i64} loc(#loc89)
      %3 = cir.alloca !cir.ptr<!s32i>, !cir.ptr<!cir.ptr<!s32i>>, ["intPointer"] {alignment = 8 : i64} loc(#loc90)
      %4 = cir.load %0 : !cir.ptr<!s32i>, !s32i loc(#loc17)
      %5 = cir.cast(integral, %4 : !s32i), !u64i loc(#loc17)
      %6 = cir.const #cir.int<4> : !u64i loc(#loc91)
      %7 = cir.binop(mul, %5, %6) : !u64i loc(#loc92)
      cir.store %7, %1 : !u64i, !cir.ptr<!u64i> loc(#loc93)
      %8 = cir.load %1 : !cir.ptr<!u64i>, !u64i loc(#loc21)
      %9 = cir.call @_Znam(%8) : (!u64i) -> !cir.ptr<!void> loc(#loc22)
      %10 = cir.cast(bitcast, %9 : !cir.ptr<!void>), !cir.ptr<!s8i> loc(#loc94)
      %11 = cir.cast(bitcast, %10 : !cir.ptr<!s8i>), !cir.ptr<!s32i> loc(#loc94)
      cir.store %11, %3 : !cir.ptr<!s32i>, !cir.ptr<!cir.ptr<!s32i>> loc(#loc95)
      cir.scope {
        %17 = cir.const #cir.int<0> : !s32i loc(#loc28)
        %18 = cir.cast(integral, %17 : !s32i), !u64i loc(#loc28)
        cir.store %18, %2 : !u64i, !cir.ptr<!u64i> loc(#loc97)
        cir.for : cond {
          %19 = cir.load %2 : !cir.ptr<!u64i>, !u64i loc(#loc30)
          %20 = cir.load %0 : !cir.ptr<!s32i>, !s32i loc(#loc31)
          %21 = cir.cast(integral, %20 : !s32i), !u64i loc(#loc31)
          %22 = cir.cmp(lt, %19, %21) : !u64i, !cir.bool loc(#loc98)
          cir.condition(%22) loc(#loc98)
        } body {
          cir.scope {
            %19 = cir.const #cir.int<0> : !s32i loc(#loc33)
            %20 = cir.load %3 : !cir.ptr<!cir.ptr<!s32i>>, !cir.ptr<!s32i> loc(#loc34)
            %21 = cir.load %2 : !cir.ptr<!u64i>, !u64i loc(#loc35)
            %22 = cir.ptr_stride(%20 : !cir.ptr<!s32i>, %21 : !u64i), !cir.ptr<!s32i> loc(#loc36)
            cir.store %19, %22 : !s32i, !cir.ptr<!s32i> loc(#loc100)
          } loc(#loc99)
          cir.yield loc(#loc27)
        } step {
          %19 = cir.load %2 : !cir.ptr<!u64i>, !u64i loc(#loc37)
          %20 = cir.unary(inc, %19) : !u64i, !u64i loc(#loc38)
          cir.store %20, %2 : !u64i, !cir.ptr<!u64i> loc(#loc101)
          cir.yield loc(#loc96)
        } loc(#loc96)
      } loc(#loc96)
      %12 = cir.load %3 : !cir.ptr<!cir.ptr<!s32i>>, !cir.ptr<!s32i> loc(#loc39)
      %13 = cir.const #cir.int<0> : !s32i loc(#loc40)
      %14 = cir.ptr_stride(%12 : !cir.ptr<!s32i>, %13 : !s32i), !cir.ptr<!s32i> loc(#loc41)
      %15 = cir.load %14 : !cir.ptr<!s32i>, !s32i loc(#loc39)
      cir.call @printIntLine(%15) : (!s32i) -> () loc(#loc42)
      %16 = cir.load %3 : !cir.ptr<!cir.ptr<!s32i>>, !cir.ptr<!s32i> loc(#loc43)
      cir.delete.array %16 : <!s32i> loc(#loc43)
    } loc(#loc87)
    cir.return loc(#loc6)
  } loc(#loc85)
  cir.func @_ZN64CWE680_Integer_Overflow_to_Buffer_Overflow__new_listen_socket_6511goodG2BSinkEi(%arg0: !s32i loc(fused[#loc46, #loc47])) extra(#fn_attr) {
    %0 = cir.alloca !s32i, !cir.ptr<!s32i>, ["data", init] {alignment = 4 : i64} loc(#loc103)
    cir.store %arg0, %0 : !s32i, !cir.ptr<!s32i> loc(#loc48)
    cir.scope {
      %1 = cir.alloca !u64i, !cir.ptr<!u64i>, ["dataBytes"] {alignment = 8 : i64} loc(#loc105)
      %2 = cir.alloca !u64i, !cir.ptr<!u64i>, ["i"] {alignment = 8 : i64} loc(#loc106)
      %3 = cir.alloca !cir.ptr<!s32i>, !cir.ptr<!cir.ptr<!s32i>>, ["intPointer"] {alignment = 8 : i64} loc(#loc107)
      %4 = cir.load %0 : !cir.ptr<!s32i>, !s32i loc(#loc56)
      %5 = cir.cast(integral, %4 : !s32i), !u64i loc(#loc56)
      %6 = cir.const #cir.int<4> : !u64i loc(#loc108)
      %7 = cir.binop(mul, %5, %6) : !u64i loc(#loc109)
      cir.store %7, %1 : !u64i, !cir.ptr<!u64i> loc(#loc110)
      %8 = cir.load %1 : !cir.ptr<!u64i>, !u64i loc(#loc60)
      %9 = cir.call @_Znam(%8) : (!u64i) -> !cir.ptr<!void> loc(#loc61)
      %10 = cir.cast(bitcast, %9 : !cir.ptr<!void>), !cir.ptr<!s8i> loc(#loc111)
      %11 = cir.cast(bitcast, %10 : !cir.ptr<!s8i>), !cir.ptr<!s32i> loc(#loc111)
      cir.store %11, %3 : !cir.ptr<!s32i>, !cir.ptr<!cir.ptr<!s32i>> loc(#loc112)
      cir.scope {
        %17 = cir.const #cir.int<0> : !s32i loc(#loc67)
        %18 = cir.cast(integral, %17 : !s32i), !u64i loc(#loc67)
        cir.store %18, %2 : !u64i, !cir.ptr<!u64i> loc(#loc114)
        cir.for : cond {
          %19 = cir.load %2 : !cir.ptr<!u64i>, !u64i loc(#loc69)
          %20 = cir.load %0 : !cir.ptr<!s32i>, !s32i loc(#loc70)
          %21 = cir.cast(integral, %20 : !s32i), !u64i loc(#loc70)
          %22 = cir.cmp(lt, %19, %21) : !u64i, !cir.bool loc(#loc115)
          cir.condition(%22) loc(#loc115)
        } body {
          cir.scope {
            %19 = cir.const #cir.int<0> : !s32i loc(#loc72)
            %20 = cir.load %3 : !cir.ptr<!cir.ptr<!s32i>>, !cir.ptr<!s32i> loc(#loc73)
            %21 = cir.load %2 : !cir.ptr<!u64i>, !u64i loc(#loc74)
            %22 = cir.ptr_stride(%20 : !cir.ptr<!s32i>, %21 : !u64i), !cir.ptr<!s32i> loc(#loc75)
            cir.store %19, %22 : !s32i, !cir.ptr<!s32i> loc(#loc117)
          } loc(#loc116)
          cir.yield loc(#loc66)
        } step {
          %19 = cir.load %2 : !cir.ptr<!u64i>, !u64i loc(#loc76)
          %20 = cir.unary(inc, %19) : !u64i, !u64i loc(#loc77)
          cir.store %20, %2 : !u64i, !cir.ptr<!u64i> loc(#loc118)
          cir.yield loc(#loc113)
        } loc(#loc113)
      } loc(#loc113)
      %12 = cir.load %3 : !cir.ptr<!cir.ptr<!s32i>>, !cir.ptr<!s32i> loc(#loc78)
      %13 = cir.const #cir.int<0> : !s32i loc(#loc79)
      %14 = cir.ptr_stride(%12 : !cir.ptr<!s32i>, %13 : !s32i), !cir.ptr<!s32i> loc(#loc80)
      %15 = cir.load %14 : !cir.ptr<!s32i>, !s32i loc(#loc78)
      cir.call @printIntLine(%15) : (!s32i) -> () loc(#loc81)
      %16 = cir.load %3 : !cir.ptr<!cir.ptr<!s32i>>, !cir.ptr<!s32i> loc(#loc82)
      cir.delete.array %16 : <!s32i> loc(#loc82)
    } loc(#loc104)
    cir.return loc(#loc45)
  } loc(#loc102)
} loc(#loc)
#loc = loc("/workspaces/juliet-c/testcases/CWE680_Integer_Overflow_to_Buffer_Overflow/CWE680_Integer_Overflow_to_Buffer_Overflow__new_listen_socket_65b.cpp":0:0)
#loc1 = loc("/usr/lib/gcc/x86_64-linux-gnu/13/../../../../include/c++/13/new":128:20)
#loc2 = loc("/usr/lib/gcc/x86_64-linux-gnu/13/../../../../include/c++/13/new":129:41)
#loc3 = loc("../../testcasesupport/std_testcase_io.h":18:1)
#loc4 = loc("../../testcasesupport/std_testcase_io.h":18:33)
#loc5 = loc("CWE680_Integer_Overflow_to_Buffer_Overflow__new_listen_socket_65b.cpp":46:1)
#loc6 = loc("CWE680_Integer_Overflow_to_Buffer_Overflow__new_listen_socket_65b.cpp":61:1)
#loc9 = loc("CWE680_Integer_Overflow_to_Buffer_Overflow__new_listen_socket_65b.cpp":47:1)
#loc10 = loc("CWE680_Integer_Overflow_to_Buffer_Overflow__new_listen_socket_65b.cpp":48:5)
#loc11 = loc("CWE680_Integer_Overflow_to_Buffer_Overflow__new_listen_socket_65b.cpp":60:5)
#loc12 = loc("CWE680_Integer_Overflow_to_Buffer_Overflow__new_listen_socket_65b.cpp":49:9)
#loc13 = loc("CWE680_Integer_Overflow_to_Buffer_Overflow__new_listen_socket_65b.cpp":49:16)
#loc14 = loc("CWE680_Integer_Overflow_to_Buffer_Overflow__new_listen_socket_65b.cpp":49:26)
#loc15 = loc("CWE680_Integer_Overflow_to_Buffer_Overflow__new_listen_socket_65b.cpp":50:9)
#loc16 = loc("CWE680_Integer_Overflow_to_Buffer_Overflow__new_listen_socket_65b.cpp":50:14)
#loc17 = loc("CWE680_Integer_Overflow_to_Buffer_Overflow__new_listen_socket_65b.cpp":52:21)
#loc18 = loc("CWE680_Integer_Overflow_to_Buffer_Overflow__new_listen_socket_65b.cpp":52:28)
#loc19 = loc("CWE680_Integer_Overflow_to_Buffer_Overflow__new_listen_socket_65b.cpp":52:38)
#loc20 = loc("CWE680_Integer_Overflow_to_Buffer_Overflow__new_listen_socket_65b.cpp":52:9)
#loc21 = loc("CWE680_Integer_Overflow_to_Buffer_Overflow__new_listen_socket_65b.cpp":53:37)
#loc22 = loc("CWE680_Integer_Overflow_to_Buffer_Overflow__new_listen_socket_65b.cpp":46:6)
#loc23 = loc("CWE680_Integer_Overflow_to_Buffer_Overflow__new_listen_socket_65b.cpp":53:28)
#loc24 = loc("CWE680_Integer_Overflow_to_Buffer_Overflow__new_listen_socket_65b.cpp":53:46)
#loc25 = loc("CWE680_Integer_Overflow_to_Buffer_Overflow__new_listen_socket_65b.cpp":53:9)
#loc26 = loc("CWE680_Integer_Overflow_to_Buffer_Overflow__new_listen_socket_65b.cpp":54:9)
#loc27 = loc("CWE680_Integer_Overflow_to_Buffer_Overflow__new_listen_socket_65b.cpp":57:9)
#loc28 = loc("CWE680_Integer_Overflow_to_Buffer_Overflow__new_listen_socket_65b.cpp":54:18)
#loc29 = loc("CWE680_Integer_Overflow_to_Buffer_Overflow__new_listen_socket_65b.cpp":54:14)
#loc30 = loc("CWE680_Integer_Overflow_to_Buffer_Overflow__new_listen_socket_65b.cpp":54:21)
#loc31 = loc("CWE680_Integer_Overflow_to_Buffer_Overflow__new_listen_socket_65b.cpp":54:33)
#loc32 = loc("CWE680_Integer_Overflow_to_Buffer_Overflow__new_listen_socket_65b.cpp":55:9)
#loc33 = loc("CWE680_Integer_Overflow_to_Buffer_Overflow__new_listen_socket_65b.cpp":56:29)
#loc34 = loc("CWE680_Integer_Overflow_to_Buffer_Overflow__new_listen_socket_65b.cpp":56:13)
#loc35 = loc("CWE680_Integer_Overflow_to_Buffer_Overflow__new_listen_socket_65b.cpp":56:24)
#loc36 = loc("CWE680_Integer_Overflow_to_Buffer_Overflow__new_listen_socket_65b.cpp":56:25)
#loc37 = loc("CWE680_Integer_Overflow_to_Buffer_Overflow__new_listen_socket_65b.cpp":54:40)
#loc38 = loc("CWE680_Integer_Overflow_to_Buffer_Overflow__new_listen_socket_65b.cpp":54:39)
#loc39 = loc("CWE680_Integer_Overflow_to_Buffer_Overflow__new_listen_socket_65b.cpp":58:22)
#loc40 = loc("CWE680_Integer_Overflow_to_Buffer_Overflow__new_listen_socket_65b.cpp":58:33)
#loc41 = loc("CWE680_Integer_Overflow_to_Buffer_Overflow__new_listen_socket_65b.cpp":58:34)
#loc42 = loc("CWE680_Integer_Overflow_to_Buffer_Overflow__new_listen_socket_65b.cpp":58:9)
#loc43 = loc("CWE680_Integer_Overflow_to_Buffer_Overflow__new_listen_socket_65b.cpp":59:19)
#loc44 = loc("CWE680_Integer_Overflow_to_Buffer_Overflow__new_listen_socket_65b.cpp":68:1)
#loc45 = loc("CWE680_Integer_Overflow_to_Buffer_Overflow__new_listen_socket_65b.cpp":83:1)
#loc48 = loc("CWE680_Integer_Overflow_to_Buffer_Overflow__new_listen_socket_65b.cpp":69:1)
#loc49 = loc("CWE680_Integer_Overflow_to_Buffer_Overflow__new_listen_socket_65b.cpp":70:5)
#loc50 = loc("CWE680_Integer_Overflow_to_Buffer_Overflow__new_listen_socket_65b.cpp":82:5)
#loc51 = loc("CWE680_Integer_Overflow_to_Buffer_Overflow__new_listen_socket_65b.cpp":71:9)
#loc52 = loc("CWE680_Integer_Overflow_to_Buffer_Overflow__new_listen_socket_65b.cpp":71:16)
#loc53 = loc("CWE680_Integer_Overflow_to_Buffer_Overflow__new_listen_socket_65b.cpp":71:26)
#loc54 = loc("CWE680_Integer_Overflow_to_Buffer_Overflow__new_listen_socket_65b.cpp":72:9)
#loc55 = loc("CWE680_Integer_Overflow_to_Buffer_Overflow__new_listen_socket_65b.cpp":72:14)
#loc56 = loc("CWE680_Integer_Overflow_to_Buffer_Overflow__new_listen_socket_65b.cpp":74:21)
#loc57 = loc("CWE680_Integer_Overflow_to_Buffer_Overflow__new_listen_socket_65b.cpp":74:28)
#loc58 = loc("CWE680_Integer_Overflow_to_Buffer_Overflow__new_listen_socket_65b.cpp":74:38)
#loc59 = loc("CWE680_Integer_Overflow_to_Buffer_Overflow__new_listen_socket_65b.cpp":74:9)
#loc60 = loc("CWE680_Integer_Overflow_to_Buffer_Overflow__new_listen_socket_65b.cpp":75:37)
#loc61 = loc("CWE680_Integer_Overflow_to_Buffer_Overflow__new_listen_socket_65b.cpp":68:6)
#loc62 = loc("CWE680_Integer_Overflow_to_Buffer_Overflow__new_listen_socket_65b.cpp":75:28)
#loc63 = loc("CWE680_Integer_Overflow_to_Buffer_Overflow__new_listen_socket_65b.cpp":75:46)
#loc64 = loc("CWE680_Integer_Overflow_to_Buffer_Overflow__new_listen_socket_65b.cpp":75:9)
#loc65 = loc("CWE680_Integer_Overflow_to_Buffer_Overflow__new_listen_socket_65b.cpp":76:9)
#loc66 = loc("CWE680_Integer_Overflow_to_Buffer_Overflow__new_listen_socket_65b.cpp":79:9)
#loc67 = loc("CWE680_Integer_Overflow_to_Buffer_Overflow__new_listen_socket_65b.cpp":76:18)
#loc68 = loc("CWE680_Integer_Overflow_to_Buffer_Overflow__new_listen_socket_65b.cpp":76:14)
#loc69 = loc("CWE680_Integer_Overflow_to_Buffer_Overflow__new_listen_socket_65b.cpp":76:21)
#loc70 = loc("CWE680_Integer_Overflow_to_Buffer_Overflow__new_listen_socket_65b.cpp":76:33)
#loc71 = loc("CWE680_Integer_Overflow_to_Buffer_Overflow__new_listen_socket_65b.cpp":77:9)
#loc72 = loc("CWE680_Integer_Overflow_to_Buffer_Overflow__new_listen_socket_65b.cpp":78:29)
#loc73 = loc("CWE680_Integer_Overflow_to_Buffer_Overflow__new_listen_socket_65b.cpp":78:13)
#loc74 = loc("CWE680_Integer_Overflow_to_Buffer_Overflow__new_listen_socket_65b.cpp":78:24)
#loc75 = loc("CWE680_Integer_Overflow_to_Buffer_Overflow__new_listen_socket_65b.cpp":78:25)
#loc76 = loc("CWE680_Integer_Overflow_to_Buffer_Overflow__new_listen_socket_65b.cpp":76:40)
#loc77 = loc("CWE680_Integer_Overflow_to_Buffer_Overflow__new_listen_socket_65b.cpp":76:39)
#loc78 = loc("CWE680_Integer_Overflow_to_Buffer_Overflow__new_listen_socket_65b.cpp":80:22)
#loc79 = loc("CWE680_Integer_Overflow_to_Buffer_Overflow__new_listen_socket_65b.cpp":80:33)
#loc80 = loc("CWE680_Integer_Overflow_to_Buffer_Overflow__new_listen_socket_65b.cpp":80:34)
#loc81 = loc("CWE680_Integer_Overflow_to_Buffer_Overflow__new_listen_socket_65b.cpp":80:9)
#loc82 = loc("CWE680_Integer_Overflow_to_Buffer_Overflow__new_listen_socket_65b.cpp":81:19)
#loc83 = loc(fused[#loc1, #loc2])
#loc84 = loc(fused[#loc3, #loc4])
#loc85 = loc(fused[#loc5, #loc6])
#loc87 = loc(fused[#loc10, #loc11])
#loc88 = loc(fused[#loc12, #loc13])
#loc89 = loc(fused[#loc12, #loc14])
#loc90 = loc(fused[#loc15, #loc16])
#loc91 = loc(fused[#loc18, #loc19])
#loc92 = loc(fused[#loc17, #loc19])
#loc93 = loc(fused[#loc20, #loc19])
#loc94 = loc(fused[#loc23, #loc24])
#loc95 = loc(fused[#loc25, #loc24])
#loc96 = loc(fused[#loc26, #loc27])
#loc97 = loc(fused[#loc29, #loc28])
#loc98 = loc(fused[#loc30, #loc31])
#loc99 = loc(fused[#loc32, #loc27])
#loc100 = loc(fused[#loc34, #loc33])
#loc101 = loc(fused[#loc38, #loc37])
#loc102 = loc(fused[#loc44, #loc45])
#loc104 = loc(fused[#loc49, #loc50])
#loc105 = loc(fused[#loc51, #loc52])
#loc106 = loc(fused[#loc51, #loc53])
#loc107 = loc(fused[#loc54, #loc55])
#loc108 = loc(fused[#loc57, #loc58])
#loc109 = loc(fused[#loc56, #loc58])
#loc110 = loc(fused[#loc59, #loc58])
#loc111 = loc(fused[#loc62, #loc63])
#loc112 = loc(fused[#loc64, #loc63])
#loc113 = loc(fused[#loc65, #loc66])
#loc114 = loc(fused[#loc68, #loc67])
#loc115 = loc(fused[#loc69, #loc70])
#loc116 = loc(fused[#loc71, #loc66])
#loc117 = loc(fused[#loc73, #loc72])
#loc118 = loc(fused[#loc77, #loc76])
