!s32i = !cir.int<s, 32>
!s8i = !cir.int<s, 8>
!u32i = !cir.int<u, 32>
#fn_attr = #cir<extra({nothrow = #cir.nothrow})>
#fn_attr1 = #cir<extra({inline = #cir.inline<no>, nothrow = #cir.nothrow, optnone = #cir.optnone, uwtable = #cir.uwtable<async>})>
#loc5 = loc("CWE191_Integer_Underflow__char_rand_multiply_42.c":22:23)
#loc6 = loc("CWE191_Integer_Underflow__char_rand_multiply_42.c":22:28)
#loc42 = loc("CWE191_Integer_Underflow__char_rand_multiply_42.c":68:27)
#loc43 = loc("CWE191_Integer_Underflow__char_rand_multiply_42.c":68:32)
#loc84 = loc("CWE191_Integer_Underflow__char_rand_multiply_42.c":47:27)
#loc85 = loc("CWE191_Integer_Underflow__char_rand_multiply_42.c":47:32)
#loc114 = loc(fused[#loc5, #loc6])
#loc130 = loc(fused[#loc42, #loc43])
#loc147 = loc(fused[#loc84, #loc85])
module @"/workspaces/juliet-c/testcases/CWE191_Integer_Underflow/s01/CWE191_Integer_Underflow__char_rand_multiply_42.c" attributes {cir.lang = #cir.lang<c>, cir.sob = #cir.signed_overflow_behavior<undefined>, cir.triple = "x86_64-unknown-linux-gnu", cir.type_size_info = #cir.type_size_info<char = 8, int = 32, size_t = 64>, cir.uwtable = #cir.uwtable<async>, dlti.dl_spec = #dlti.dl_spec<f64 = dense<64> : vector<2xi64>, f16 = dense<16> : vector<2xi64>, !llvm.ptr<271> = dense<32> : vector<4xi64>, f128 = dense<128> : vector<2xi64>, i16 = dense<16> : vector<2xi64>, i8 = dense<8> : vector<2xi64>, i32 = dense<32> : vector<2xi64>, f80 = dense<128> : vector<2xi64>, i1 = dense<8> : vector<2xi64>, !llvm.ptr = dense<64> : vector<4xi64>, i64 = dense<64> : vector<2xi64>, !llvm.ptr<272> = dense<64> : vector<4xi64>, !llvm.ptr<270> = dense<32> : vector<4xi64>, i128 = dense<128> : vector<2xi64>, "dlti.stack_alignment" = 128 : i64, "dlti.endianness" = "little", "dlti.mangling_mode" = "e">} {
  cir.func private @rand() -> !s32i extra(#fn_attr) loc(#loc112)
  cir.func internal private @badSource(%arg0: !s8i loc(fused[#loc5, #loc6])) -> !s8i extra(#fn_attr1) {
    %0 = cir.alloca !s8i, !cir.ptr<!s8i>, ["data", init] {alignment = 1 : i64} loc(#loc114)
    %1 = cir.alloca !s8i, !cir.ptr<!s8i>, ["__retval"] {alignment = 1 : i64} loc(#loc4)
    cir.store %arg0, %0 : !s8i, !cir.ptr<!s8i> loc(#loc7)
    %2 = cir.call @rand() : () -> !s32i extra(#fn_attr) loc(#loc8)
    %3 = cir.const #cir.int<1> : !s32i loc(#loc8)
    %4 = cir.binop(and, %2, %3) : !s32i loc(#loc8)
    %5 = cir.cast(int_to_bool, %4 : !s32i), !cir.bool loc(#loc8)
    %6 = cir.ternary(%5, true {
      %11 = cir.call @rand() : () -> !s32i extra(#fn_attr) loc(#loc8)
      %12 = cir.cast(integral, %11 : !s32i), !u32i loc(#loc8)
      %13 = cir.const #cir.int<30> : !s32i loc(#loc8)
      %14 = cir.shift(left, %12 : !u32i, %13 : !s32i) -> !u32i loc(#loc8)
      %15 = cir.call @rand() : () -> !s32i extra(#fn_attr) loc(#loc8)
      %16 = cir.cast(integral, %15 : !s32i), !u32i loc(#loc8)
      %17 = cir.const #cir.int<15> : !s32i loc(#loc8)
      %18 = cir.shift(left, %16 : !u32i, %17 : !s32i) -> !u32i loc(#loc8)
      %19 = cir.binop(xor, %14, %18) : !u32i loc(#loc8)
      %20 = cir.call @rand() : () -> !s32i extra(#fn_attr) loc(#loc8)
      %21 = cir.cast(integral, %20 : !s32i), !u32i loc(#loc8)
      %22 = cir.binop(xor, %19, %21) : !u32i loc(#loc8)
      cir.yield %22 : !u32i loc(#loc8)
    }, false {
      %11 = cir.call @rand() : () -> !s32i extra(#fn_attr) loc(#loc8)
      %12 = cir.cast(integral, %11 : !s32i), !u32i loc(#loc8)
      %13 = cir.const #cir.int<30> : !s32i loc(#loc8)
      %14 = cir.shift(left, %12 : !u32i, %13 : !s32i) -> !u32i loc(#loc8)
      %15 = cir.call @rand() : () -> !s32i extra(#fn_attr) loc(#loc8)
      %16 = cir.cast(integral, %15 : !s32i), !u32i loc(#loc8)
      %17 = cir.const #cir.int<15> : !s32i loc(#loc8)
      %18 = cir.shift(left, %16 : !u32i, %17 : !s32i) -> !u32i loc(#loc8)
      %19 = cir.binop(xor, %14, %18) : !u32i loc(#loc8)
      %20 = cir.call @rand() : () -> !s32i extra(#fn_attr) loc(#loc8)
      %21 = cir.cast(integral, %20 : !s32i), !u32i loc(#loc8)
      %22 = cir.binop(xor, %19, %21) : !u32i loc(#loc8)
      %23 = cir.unary(minus, %22) : !u32i, !u32i loc(#loc8)
      %24 = cir.const #cir.int<1> : !s32i loc(#loc8)
      %25 = cir.cast(integral, %24 : !s32i), !u32i loc(#loc8)
      %26 = cir.binop(sub, %23, %25) : !u32i loc(#loc8)
      cir.yield %26 : !u32i loc(#loc8)
    }) : (!cir.bool) -> !u32i loc(#loc8)
    %7 = cir.cast(integral, %6 : !u32i), !s32i loc(#loc8)
    %8 = cir.cast(integral, %7 : !s32i), !s8i loc(#loc8)
    cir.store %8, %0 : !s8i, !cir.ptr<!s8i> loc(#loc115)
    %9 = cir.load %0 : !cir.ptr<!s8i>, !s8i loc(#loc10)
    cir.store %9, %1 : !s8i, !cir.ptr<!s8i> loc(#loc116)
    %10 = cir.load %1 : !cir.ptr<!s8i>, !s8i loc(#loc116)
    cir.return %10 : !s8i loc(#loc116)
  } loc(#loc113)
  cir.func private @printHexCharLine(!s8i) loc(#loc117)
  cir.func no_proto @CWE191_Integer_Underflow__char_rand_multiply_42_bad() extra(#fn_attr1) {
    %0 = cir.alloca !s8i, !cir.ptr<!s8i>, ["data"] {alignment = 1 : i64} loc(#loc119)
    %1 = cir.const #cir.int<32> : !s32i loc(#loc18)
    %2 = cir.cast(integral, %1 : !s32i), !s8i loc(#loc18)
    cir.store %2, %0 : !s8i, !cir.ptr<!s8i> loc(#loc120)
    %3 = cir.load %0 : !cir.ptr<!s8i>, !s8i loc(#loc20)
    %4 = cir.call @badSource(%3) : (!s8i) -> !s8i loc(#loc21)
    cir.store %4, %0 : !s8i, !cir.ptr<!s8i> loc(#loc121)
    cir.scope {
      %5 = cir.load %0 : !cir.ptr<!s8i>, !s8i loc(#loc26)
      %6 = cir.cast(integral, %5 : !s8i), !s32i loc(#loc26)
      %7 = cir.const #cir.int<0> : !s32i loc(#loc27)
      %8 = cir.cmp(lt, %6, %7) : !s32i, !cir.bool loc(#loc123)
      cir.if %8 {
        %9 = cir.alloca !s8i, !cir.ptr<!s8i>, ["result", init] {alignment = 1 : i64} loc(#loc125)
        %10 = cir.load %0 : !cir.ptr<!s8i>, !s8i loc(#loc31)
        %11 = cir.cast(integral, %10 : !s8i), !s32i loc(#loc31)
        %12 = cir.const #cir.int<2> : !s32i loc(#loc30)
        %13 = cir.binop(mul, %11, %12) nsw : !s32i loc(#loc31)
        %14 = cir.cast(integral, %13 : !s32i), !s8i loc(#loc31)
        cir.store %14, %9 : !s8i, !cir.ptr<!s8i> loc(#loc125)
        %15 = cir.load %9 : !cir.ptr<!s8i>, !s8i loc(#loc32)
        cir.call @printHexCharLine(%15) : (!s8i) -> () loc(#loc33)
      } loc(#loc124)
    } loc(#loc122)
    cir.return loc(#loc15)
  } loc(#loc118)
  cir.func no_proto @CWE191_Integer_Underflow__char_rand_multiply_42_good() extra(#fn_attr1) {
    %0 = cir.get_global @goodB2G : !cir.ptr<!cir.func<()>> loc(#loc127)
    cir.call %0() : (!cir.ptr<!cir.func<()>>) -> () loc(#loc36)
    %1 = cir.get_global @goodG2B : !cir.ptr<!cir.func<()>> loc(#loc128)
    cir.call %1() : (!cir.ptr<!cir.func<()>>) -> () loc(#loc38)
    cir.return loc(#loc35)
  } loc(#loc126)
  cir.func internal private @goodB2GSource(%arg0: !s8i loc(fused[#loc42, #loc43])) -> !s8i extra(#fn_attr1) {
    %0 = cir.alloca !s8i, !cir.ptr<!s8i>, ["data", init] {alignment = 1 : i64} loc(#loc130)
    %1 = cir.alloca !s8i, !cir.ptr<!s8i>, ["__retval"] {alignment = 1 : i64} loc(#loc41)
    cir.store %arg0, %0 : !s8i, !cir.ptr<!s8i> loc(#loc44)
    %2 = cir.call @rand() : () -> !s32i extra(#fn_attr) loc(#loc45)
    %3 = cir.const #cir.int<1> : !s32i loc(#loc45)
    %4 = cir.binop(and, %2, %3) : !s32i loc(#loc45)
    %5 = cir.cast(int_to_bool, %4 : !s32i), !cir.bool loc(#loc45)
    %6 = cir.ternary(%5, true {
      %11 = cir.call @rand() : () -> !s32i extra(#fn_attr) loc(#loc45)
      %12 = cir.cast(integral, %11 : !s32i), !u32i loc(#loc45)
      %13 = cir.const #cir.int<30> : !s32i loc(#loc45)
      %14 = cir.shift(left, %12 : !u32i, %13 : !s32i) -> !u32i loc(#loc45)
      %15 = cir.call @rand() : () -> !s32i extra(#fn_attr) loc(#loc45)
      %16 = cir.cast(integral, %15 : !s32i), !u32i loc(#loc45)
      %17 = cir.const #cir.int<15> : !s32i loc(#loc45)
      %18 = cir.shift(left, %16 : !u32i, %17 : !s32i) -> !u32i loc(#loc45)
      %19 = cir.binop(xor, %14, %18) : !u32i loc(#loc45)
      %20 = cir.call @rand() : () -> !s32i extra(#fn_attr) loc(#loc45)
      %21 = cir.cast(integral, %20 : !s32i), !u32i loc(#loc45)
      %22 = cir.binop(xor, %19, %21) : !u32i loc(#loc45)
      cir.yield %22 : !u32i loc(#loc45)
    }, false {
      %11 = cir.call @rand() : () -> !s32i extra(#fn_attr) loc(#loc45)
      %12 = cir.cast(integral, %11 : !s32i), !u32i loc(#loc45)
      %13 = cir.const #cir.int<30> : !s32i loc(#loc45)
      %14 = cir.shift(left, %12 : !u32i, %13 : !s32i) -> !u32i loc(#loc45)
      %15 = cir.call @rand() : () -> !s32i extra(#fn_attr) loc(#loc45)
      %16 = cir.cast(integral, %15 : !s32i), !u32i loc(#loc45)
      %17 = cir.const #cir.int<15> : !s32i loc(#loc45)
      %18 = cir.shift(left, %16 : !u32i, %17 : !s32i) -> !u32i loc(#loc45)
      %19 = cir.binop(xor, %14, %18) : !u32i loc(#loc45)
      %20 = cir.call @rand() : () -> !s32i extra(#fn_attr) loc(#loc45)
      %21 = cir.cast(integral, %20 : !s32i), !u32i loc(#loc45)
      %22 = cir.binop(xor, %19, %21) : !u32i loc(#loc45)
      %23 = cir.unary(minus, %22) : !u32i, !u32i loc(#loc45)
      %24 = cir.const #cir.int<1> : !s32i loc(#loc45)
      %25 = cir.cast(integral, %24 : !s32i), !u32i loc(#loc45)
      %26 = cir.binop(sub, %23, %25) : !u32i loc(#loc45)
      cir.yield %26 : !u32i loc(#loc45)
    }) : (!cir.bool) -> !u32i loc(#loc45)
    %7 = cir.cast(integral, %6 : !u32i), !s32i loc(#loc45)
    %8 = cir.cast(integral, %7 : !s32i), !s8i loc(#loc45)
    cir.store %8, %0 : !s8i, !cir.ptr<!s8i> loc(#loc131)
    %9 = cir.load %0 : !cir.ptr<!s8i>, !s8i loc(#loc47)
    cir.store %9, %1 : !s8i, !cir.ptr<!s8i> loc(#loc132)
    %10 = cir.load %1 : !cir.ptr<!s8i>, !s8i loc(#loc132)
    cir.return %10 : !s8i loc(#loc132)
  } loc(#loc129)
  cir.func private @printLine(!cir.ptr<!s8i>) loc(#loc133)
  cir.global "private" constant cir_private dsolocal @".str" = #cir.const_array<"data value is too small to perform multiplication.\00" : !cir.array<!s8i x 51>> : !cir.array<!s8i x 51> {alignment = 1 : i64} loc(#loc51)
  cir.func no_proto internal private @goodB2G() extra(#fn_attr1) {
    %0 = cir.alloca !s8i, !cir.ptr<!s8i>, ["data"] {alignment = 1 : i64} loc(#loc135)
    %1 = cir.const #cir.int<32> : !s32i loc(#loc56)
    %2 = cir.cast(integral, %1 : !s32i), !s8i loc(#loc56)
    cir.store %2, %0 : !s8i, !cir.ptr<!s8i> loc(#loc136)
    %3 = cir.load %0 : !cir.ptr<!s8i>, !s8i loc(#loc58)
    %4 = cir.call @goodB2GSource(%3) : (!s8i) -> !s8i loc(#loc59)
    cir.store %4, %0 : !s8i, !cir.ptr<!s8i> loc(#loc137)
    cir.scope {
      %5 = cir.load %0 : !cir.ptr<!s8i>, !s8i loc(#loc64)
      %6 = cir.cast(integral, %5 : !s8i), !s32i loc(#loc64)
      %7 = cir.const #cir.int<0> : !s32i loc(#loc65)
      %8 = cir.cmp(lt, %6, %7) : !s32i, !cir.bool loc(#loc139)
      cir.if %8 {
        cir.scope {
          %9 = cir.load %0 : !cir.ptr<!s8i>, !s8i loc(#loc69)
          %10 = cir.cast(integral, %9 : !s8i), !s32i loc(#loc69)
          %11 = cir.const #cir.int<127> : !s32i loc(#loc70)
          %12 = cir.unary(minus, %11) nsw : !s32i, !s32i loc(#loc70)
          %13 = cir.const #cir.int<1> : !s32i loc(#loc70)
          %14 = cir.binop(sub, %12, %13) nsw : !s32i loc(#loc70)
          %15 = cir.const #cir.int<2> : !s32i loc(#loc71)
          %16 = cir.binop(div, %14, %15) : !s32i loc(#loc142)
          %17 = cir.cmp(gt, %10, %16) : !s32i, !cir.bool loc(#loc143)
          cir.if %17 {
            %18 = cir.alloca !s8i, !cir.ptr<!s8i>, ["result", init] {alignment = 1 : i64} loc(#loc145)
            %19 = cir.load %0 : !cir.ptr<!s8i>, !s8i loc(#loc78)
            %20 = cir.cast(integral, %19 : !s8i), !s32i loc(#loc78)
            %21 = cir.const #cir.int<2> : !s32i loc(#loc77)
            %22 = cir.binop(mul, %20, %21) nsw : !s32i loc(#loc78)
            %23 = cir.cast(integral, %22 : !s32i), !s8i loc(#loc78)
            cir.store %23, %18 : !s8i, !cir.ptr<!s8i> loc(#loc145)
            %24 = cir.load %18 : !cir.ptr<!s8i>, !s8i loc(#loc79)
            cir.call @printHexCharLine(%24) : (!s8i) -> () loc(#loc80)
          } else {
            %18 = cir.get_global @".str" : !cir.ptr<!cir.array<!s8i x 51>> loc(#loc51)
            %19 = cir.cast(array_to_ptrdecay, %18 : !cir.ptr<!cir.array<!s8i x 51>>), !cir.ptr<!s8i> loc(#loc51)
            cir.call @printLine(%19) : (!cir.ptr<!s8i>) -> () loc(#loc81)
          } loc(#loc144)
        } loc(#loc141)
      } loc(#loc140)
    } loc(#loc138)
    cir.return loc(#loc53)
  } loc(#loc134)
  cir.func internal private @goodG2BSource(%arg0: !s8i loc(fused[#loc84, #loc85])) -> !s8i extra(#fn_attr1) {
    %0 = cir.alloca !s8i, !cir.ptr<!s8i>, ["data", init] {alignment = 1 : i64} loc(#loc147)
    %1 = cir.alloca !s8i, !cir.ptr<!s8i>, ["__retval"] {alignment = 1 : i64} loc(#loc83)
    cir.store %arg0, %0 : !s8i, !cir.ptr<!s8i> loc(#loc86)
    %2 = cir.const #cir.int<2> : !s32i loc(#loc87)
    %3 = cir.unary(minus, %2) nsw : !s32i, !s32i loc(#loc88)
    %4 = cir.cast(integral, %3 : !s32i), !s8i loc(#loc88)
    cir.store %4, %0 : !s8i, !cir.ptr<!s8i> loc(#loc148)
    %5 = cir.load %0 : !cir.ptr<!s8i>, !s8i loc(#loc90)
    cir.store %5, %1 : !s8i, !cir.ptr<!s8i> loc(#loc149)
    %6 = cir.load %1 : !cir.ptr<!s8i>, !s8i loc(#loc149)
    cir.return %6 : !s8i loc(#loc149)
  } loc(#loc146)
  cir.func no_proto internal private @goodG2B() extra(#fn_attr1) {
    %0 = cir.alloca !s8i, !cir.ptr<!s8i>, ["data"] {alignment = 1 : i64} loc(#loc151)
    %1 = cir.const #cir.int<32> : !s32i loc(#loc96)
    %2 = cir.cast(integral, %1 : !s32i), !s8i loc(#loc96)
    cir.store %2, %0 : !s8i, !cir.ptr<!s8i> loc(#loc152)
    %3 = cir.load %0 : !cir.ptr<!s8i>, !s8i loc(#loc98)
    %4 = cir.call @goodG2BSource(%3) : (!s8i) -> !s8i loc(#loc99)
    cir.store %4, %0 : !s8i, !cir.ptr<!s8i> loc(#loc153)
    cir.scope {
      %5 = cir.load %0 : !cir.ptr<!s8i>, !s8i loc(#loc104)
      %6 = cir.cast(integral, %5 : !s8i), !s32i loc(#loc104)
      %7 = cir.const #cir.int<0> : !s32i loc(#loc105)
      %8 = cir.cmp(lt, %6, %7) : !s32i, !cir.bool loc(#loc155)
      cir.if %8 {
        %9 = cir.alloca !s8i, !cir.ptr<!s8i>, ["result", init] {alignment = 1 : i64} loc(#loc157)
        %10 = cir.load %0 : !cir.ptr<!s8i>, !s8i loc(#loc109)
        %11 = cir.cast(integral, %10 : !s8i), !s32i loc(#loc109)
        %12 = cir.const #cir.int<2> : !s32i loc(#loc108)
        %13 = cir.binop(mul, %11, %12) nsw : !s32i loc(#loc109)
        %14 = cir.cast(integral, %13 : !s32i), !s8i loc(#loc109)
        cir.store %14, %9 : !s8i, !cir.ptr<!s8i> loc(#loc157)
        %15 = cir.load %9 : !cir.ptr<!s8i>, !s8i loc(#loc110)
        cir.call @printHexCharLine(%15) : (!s8i) -> () loc(#loc111)
      } loc(#loc156)
    } loc(#loc154)
    cir.return loc(#loc93)
  } loc(#loc150)
} loc(#loc)
#loc = loc("/workspaces/juliet-c/testcases/CWE191_Integer_Underflow/s01/CWE191_Integer_Underflow__char_rand_multiply_42.c":0:0)
#loc1 = loc("/usr/include/stdlib.h":573:1)
#loc2 = loc("/usr/include/stdlib.h":573:24)
#loc3 = loc("CWE191_Integer_Underflow__char_rand_multiply_42.c":22:1)
#loc4 = loc("CWE191_Integer_Underflow__char_rand_multiply_42.c":27:1)
#loc7 = loc("CWE191_Integer_Underflow__char_rand_multiply_42.c":23:1)
#loc8 = loc("CWE191_Integer_Underflow__char_rand_multiply_42.c":25:18)
#loc9 = loc("CWE191_Integer_Underflow__char_rand_multiply_42.c":25:5)
#loc10 = loc("CWE191_Integer_Underflow__char_rand_multiply_42.c":26:12)
#loc11 = loc("CWE191_Integer_Underflow__char_rand_multiply_42.c":26:5)
#loc12 = loc("../../../testcasesupport/std_testcase_io.h":30:1)
#loc13 = loc("../../../testcasesupport/std_testcase_io.h":30:35)
#loc14 = loc("CWE191_Integer_Underflow__char_rand_multiply_42.c":29:1)
#loc15 = loc("CWE191_Integer_Underflow__char_rand_multiply_42.c":40:1)
#loc16 = loc("CWE191_Integer_Underflow__char_rand_multiply_42.c":31:5)
#loc17 = loc("CWE191_Integer_Underflow__char_rand_multiply_42.c":31:10)
#loc18 = loc("CWE191_Integer_Underflow__char_rand_multiply_42.c":32:12)
#loc19 = loc("CWE191_Integer_Underflow__char_rand_multiply_42.c":32:5)
#loc20 = loc("CWE191_Integer_Underflow__char_rand_multiply_42.c":33:22)
#loc21 = loc("CWE191_Integer_Underflow__char_rand_multiply_42.c":33:12)
#loc22 = loc("CWE191_Integer_Underflow__char_rand_multiply_42.c":33:5)
#loc23 = loc("CWE191_Integer_Underflow__char_rand_multiply_42.c":33:26)
#loc24 = loc("CWE191_Integer_Underflow__char_rand_multiply_42.c":34:5)
#loc25 = loc("CWE191_Integer_Underflow__char_rand_multiply_42.c":39:5)
#loc26 = loc("CWE191_Integer_Underflow__char_rand_multiply_42.c":34:8)
#loc27 = loc("CWE191_Integer_Underflow__char_rand_multiply_42.c":34:15)
#loc28 = loc("CWE191_Integer_Underflow__char_rand_multiply_42.c":35:5)
#loc29 = loc("CWE191_Integer_Underflow__char_rand_multiply_42.c":37:9)
#loc30 = loc("CWE191_Integer_Underflow__char_rand_multiply_42.c":37:30)
#loc31 = loc("CWE191_Integer_Underflow__char_rand_multiply_42.c":37:23)
#loc32 = loc("CWE191_Integer_Underflow__char_rand_multiply_42.c":38:26)
#loc33 = loc("CWE191_Integer_Underflow__char_rand_multiply_42.c":38:9)
#loc34 = loc("CWE191_Integer_Underflow__char_rand_multiply_42.c":95:1)
#loc35 = loc("CWE191_Integer_Underflow__char_rand_multiply_42.c":99:1)
#loc36 = loc("CWE191_Integer_Underflow__char_rand_multiply_42.c":97:5)
#loc37 = loc("CWE191_Integer_Underflow__char_rand_multiply_42.c":97:13)
#loc38 = loc("CWE191_Integer_Underflow__char_rand_multiply_42.c":98:5)
#loc39 = loc("CWE191_Integer_Underflow__char_rand_multiply_42.c":98:13)
#loc40 = loc("CWE191_Integer_Underflow__char_rand_multiply_42.c":68:1)
#loc41 = loc("CWE191_Integer_Underflow__char_rand_multiply_42.c":73:1)
#loc44 = loc("CWE191_Integer_Underflow__char_rand_multiply_42.c":69:1)
#loc45 = loc("CWE191_Integer_Underflow__char_rand_multiply_42.c":71:18)
#loc46 = loc("CWE191_Integer_Underflow__char_rand_multiply_42.c":71:5)
#loc47 = loc("CWE191_Integer_Underflow__char_rand_multiply_42.c":72:12)
#loc48 = loc("CWE191_Integer_Underflow__char_rand_multiply_42.c":72:5)
#loc49 = loc("../../../testcasesupport/std_testcase_io.h":14:1)
#loc50 = loc("../../../testcasesupport/std_testcase_io.h":14:33)
#loc51 = loc("CWE191_Integer_Underflow__char_rand_multiply_42.c":90:23)
#loc52 = loc("CWE191_Integer_Underflow__char_rand_multiply_42.c":75:1)
#loc53 = loc("CWE191_Integer_Underflow__char_rand_multiply_42.c":93:1)
#loc54 = loc("CWE191_Integer_Underflow__char_rand_multiply_42.c":77:5)
#loc55 = loc("CWE191_Integer_Underflow__char_rand_multiply_42.c":77:10)
#loc56 = loc("CWE191_Integer_Underflow__char_rand_multiply_42.c":78:12)
#loc57 = loc("CWE191_Integer_Underflow__char_rand_multiply_42.c":78:5)
#loc58 = loc("CWE191_Integer_Underflow__char_rand_multiply_42.c":79:26)
#loc59 = loc("CWE191_Integer_Underflow__char_rand_multiply_42.c":79:12)
#loc60 = loc("CWE191_Integer_Underflow__char_rand_multiply_42.c":79:5)
#loc61 = loc("CWE191_Integer_Underflow__char_rand_multiply_42.c":79:30)
#loc62 = loc("CWE191_Integer_Underflow__char_rand_multiply_42.c":80:5)
#loc63 = loc("CWE191_Integer_Underflow__char_rand_multiply_42.c":92:5)
#loc64 = loc("CWE191_Integer_Underflow__char_rand_multiply_42.c":80:8)
#loc65 = loc("CWE191_Integer_Underflow__char_rand_multiply_42.c":80:15)
#loc66 = loc("CWE191_Integer_Underflow__char_rand_multiply_42.c":81:5)
#loc67 = loc("CWE191_Integer_Underflow__char_rand_multiply_42.c":83:9)
#loc68 = loc("CWE191_Integer_Underflow__char_rand_multiply_42.c":91:9)
#loc69 = loc("CWE191_Integer_Underflow__char_rand_multiply_42.c":83:13)
#loc70 = loc("CWE191_Integer_Underflow__char_rand_multiply_42.c":83:21)
#loc71 = loc("CWE191_Integer_Underflow__char_rand_multiply_42.c":83:30)
#loc72 = loc("CWE191_Integer_Underflow__char_rand_multiply_42.c":83:31)
#loc73 = loc("CWE191_Integer_Underflow__char_rand_multiply_42.c":84:9)
#loc74 = loc("CWE191_Integer_Underflow__char_rand_multiply_42.c":87:9)
#loc75 = loc("CWE191_Integer_Underflow__char_rand_multiply_42.c":89:9)
#loc76 = loc("CWE191_Integer_Underflow__char_rand_multiply_42.c":85:13)
#loc77 = loc("CWE191_Integer_Underflow__char_rand_multiply_42.c":85:34)
#loc78 = loc("CWE191_Integer_Underflow__char_rand_multiply_42.c":85:27)
#loc79 = loc("CWE191_Integer_Underflow__char_rand_multiply_42.c":86:30)
#loc80 = loc("CWE191_Integer_Underflow__char_rand_multiply_42.c":86:13)
#loc81 = loc("CWE191_Integer_Underflow__char_rand_multiply_42.c":90:13)
#loc82 = loc("CWE191_Integer_Underflow__char_rand_multiply_42.c":47:1)
#loc83 = loc("CWE191_Integer_Underflow__char_rand_multiply_42.c":52:1)
#loc86 = loc("CWE191_Integer_Underflow__char_rand_multiply_42.c":48:1)
#loc87 = loc("CWE191_Integer_Underflow__char_rand_multiply_42.c":50:13)
#loc88 = loc("CWE191_Integer_Underflow__char_rand_multiply_42.c":50:12)
#loc89 = loc("CWE191_Integer_Underflow__char_rand_multiply_42.c":50:5)
#loc90 = loc("CWE191_Integer_Underflow__char_rand_multiply_42.c":51:12)
#loc91 = loc("CWE191_Integer_Underflow__char_rand_multiply_42.c":51:5)
#loc92 = loc("CWE191_Integer_Underflow__char_rand_multiply_42.c":54:1)
#loc93 = loc("CWE191_Integer_Underflow__char_rand_multiply_42.c":65:1)
#loc94 = loc("CWE191_Integer_Underflow__char_rand_multiply_42.c":56:5)
#loc95 = loc("CWE191_Integer_Underflow__char_rand_multiply_42.c":56:10)
#loc96 = loc("CWE191_Integer_Underflow__char_rand_multiply_42.c":57:12)
#loc97 = loc("CWE191_Integer_Underflow__char_rand_multiply_42.c":57:5)
#loc98 = loc("CWE191_Integer_Underflow__char_rand_multiply_42.c":58:26)
#loc99 = loc("CWE191_Integer_Underflow__char_rand_multiply_42.c":58:12)
#loc100 = loc("CWE191_Integer_Underflow__char_rand_multiply_42.c":58:5)
#loc101 = loc("CWE191_Integer_Underflow__char_rand_multiply_42.c":58:30)
#loc102 = loc("CWE191_Integer_Underflow__char_rand_multiply_42.c":59:5)
#loc103 = loc("CWE191_Integer_Underflow__char_rand_multiply_42.c":64:5)
#loc104 = loc("CWE191_Integer_Underflow__char_rand_multiply_42.c":59:8)
#loc105 = loc("CWE191_Integer_Underflow__char_rand_multiply_42.c":59:15)
#loc106 = loc("CWE191_Integer_Underflow__char_rand_multiply_42.c":60:5)
#loc107 = loc("CWE191_Integer_Underflow__char_rand_multiply_42.c":62:9)
#loc108 = loc("CWE191_Integer_Underflow__char_rand_multiply_42.c":62:30)
#loc109 = loc("CWE191_Integer_Underflow__char_rand_multiply_42.c":62:23)
#loc110 = loc("CWE191_Integer_Underflow__char_rand_multiply_42.c":63:26)
#loc111 = loc("CWE191_Integer_Underflow__char_rand_multiply_42.c":63:9)
#loc112 = loc(fused[#loc1, #loc2])
#loc113 = loc(fused[#loc3, #loc4])
#loc115 = loc(fused[#loc9, #loc8])
#loc116 = loc(fused[#loc11, #loc10])
#loc117 = loc(fused[#loc12, #loc13])
#loc118 = loc(fused[#loc14, #loc15])
#loc119 = loc(fused[#loc16, #loc17])
#loc120 = loc(fused[#loc19, #loc18])
#loc121 = loc(fused[#loc22, #loc23])
#loc122 = loc(fused[#loc24, #loc25])
#loc123 = loc(fused[#loc26, #loc27])
#loc124 = loc(fused[#loc28, #loc25])
#loc125 = loc(fused[#loc29, #loc30])
#loc126 = loc(fused[#loc34, #loc35])
#loc127 = loc(fused[#loc36, #loc37])
#loc128 = loc(fused[#loc38, #loc39])
#loc129 = loc(fused[#loc40, #loc41])
#loc131 = loc(fused[#loc46, #loc45])
#loc132 = loc(fused[#loc48, #loc47])
#loc133 = loc(fused[#loc49, #loc50])
#loc134 = loc(fused[#loc52, #loc53])
#loc135 = loc(fused[#loc54, #loc55])
#loc136 = loc(fused[#loc57, #loc56])
#loc137 = loc(fused[#loc60, #loc61])
#loc138 = loc(fused[#loc62, #loc63])
#loc139 = loc(fused[#loc64, #loc65])
#loc140 = loc(fused[#loc66, #loc63])
#loc141 = loc(fused[#loc67, #loc68])
#loc142 = loc(fused[#loc70, #loc71])
#loc143 = loc(fused[#loc69, #loc72])
#loc144 = loc(fused[#loc73, #loc74, #loc75, #loc68])
#loc145 = loc(fused[#loc76, #loc77])
#loc146 = loc(fused[#loc82, #loc83])
#loc148 = loc(fused[#loc89, #loc87])
#loc149 = loc(fused[#loc91, #loc90])
#loc150 = loc(fused[#loc92, #loc93])
#loc151 = loc(fused[#loc94, #loc95])
#loc152 = loc(fused[#loc97, #loc96])
#loc153 = loc(fused[#loc100, #loc101])
#loc154 = loc(fused[#loc102, #loc103])
#loc155 = loc(fused[#loc104, #loc105])
#loc156 = loc(fused[#loc106, #loc103])
#loc157 = loc(fused[#loc107, #loc108])
