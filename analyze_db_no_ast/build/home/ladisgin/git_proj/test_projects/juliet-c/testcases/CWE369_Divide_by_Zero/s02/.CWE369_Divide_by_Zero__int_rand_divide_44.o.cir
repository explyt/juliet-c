!s32i = !cir.int<s, 32>
!s8i = !cir.int<s, 8>
!u32i = !cir.int<u, 32>
!void = !cir.void
#fn_attr = #cir<extra({inline = #cir.inline<no>, nothrow = #cir.nothrow, optnone = #cir.optnone})>
#fn_attr1 = #cir<extra({nothrow = #cir.nothrow})>
#loc5 = loc("CWE369_Divide_by_Zero__int_rand_divide_44.c":22:21)
#loc6 = loc("CWE369_Divide_by_Zero__int_rand_divide_44.c":22:25)
#loc34 = loc("CWE369_Divide_by_Zero__int_rand_divide_44.c":46:25)
#loc35 = loc("CWE369_Divide_by_Zero__int_rand_divide_44.c":46:29)
#loc58 = loc("CWE369_Divide_by_Zero__int_rand_divide_44.c":64:25)
#loc59 = loc("CWE369_Divide_by_Zero__int_rand_divide_44.c":64:29)
#loc88 = loc(fused[#loc5, #loc6])
#loc100 = loc(fused[#loc34, #loc35])
#loc109 = loc(fused[#loc58, #loc59])
module @"/home/ladisgin/git_proj/test_projects/juliet-c/testcases/CWE369_Divide_by_Zero/s02/CWE369_Divide_by_Zero__int_rand_divide_44.c" attributes {cir.lang = #cir.lang<c>, cir.sob = #cir.signed_overflow_behavior<undefined>, cir.triple = "x86_64-unknown-linux-gnu", dlti.dl_spec = #dlti.dl_spec<#dlti.dl_entry<!llvm.ptr, dense<64> : vector<4xi64>>, #dlti.dl_entry<i8, dense<8> : vector<2xi64>>, #dlti.dl_entry<i1, dense<8> : vector<2xi64>>, #dlti.dl_entry<i128, dense<128> : vector<2xi64>>, #dlti.dl_entry<i64, dense<64> : vector<2xi64>>, #dlti.dl_entry<f80, dense<128> : vector<2xi64>>, #dlti.dl_entry<f128, dense<128> : vector<2xi64>>, #dlti.dl_entry<!llvm.ptr<270>, dense<32> : vector<4xi64>>, #dlti.dl_entry<f64, dense<64> : vector<2xi64>>, #dlti.dl_entry<!llvm.ptr<271>, dense<32> : vector<4xi64>>, #dlti.dl_entry<!llvm.ptr<272>, dense<64> : vector<4xi64>>, #dlti.dl_entry<i32, dense<32> : vector<2xi64>>, #dlti.dl_entry<i16, dense<16> : vector<2xi64>>, #dlti.dl_entry<f16, dense<16> : vector<2xi64>>, #dlti.dl_entry<"dlti.stack_alignment", 128 : i64>, #dlti.dl_entry<"dlti.endianness", "little">>, llvm.data_layout = "e-m:e-p270:32:32-p271:32:32-p272:64:64-i64:64-i128:128-f80:128-n8:16:32:64-S128"} {
  cir.func private  @printIntLine(!s32i) loc(#loc86)
  cir.func internal private  @badSink(%arg0: !s32i loc(fused[#loc5, #loc6])) extra(#fn_attr) {
    %0 = cir.alloca !s32i, !cir.ptr<!s32i>, ["data", init] {alignment = 4 : i64} loc(#loc88)
    cir.store %arg0, %0 : !s32i, !cir.ptr<!s32i> loc(#loc7)
    %1 = cir.const #cir.int<100> : !s32i loc(#loc8)
    %2 = cir.load %0 : !cir.ptr<!s32i>, !s32i loc(#loc9)
    %3 = cir.binop(div, %1, %2) : !s32i loc(#loc89)
    cir.call @printIntLine(%3) : (!s32i) -> () loc(#loc10)
    cir.return loc(#loc4)
  } loc(#loc87)
  cir.func private  @rand() -> !s32i extra(#fn_attr1) loc(#loc90)
  cir.func no_proto  @CWE369_Divide_by_Zero__int_rand_divide_44_bad() extra(#fn_attr) {
    %0 = cir.alloca !s32i, !cir.ptr<!s32i>, ["data"] {alignment = 4 : i64} loc(#loc92)
    %1 = cir.alloca !cir.ptr<!cir.func<!void (!s32i)>>, !cir.ptr<!cir.ptr<!cir.func<!void (!s32i)>>>, ["funcPtr", init] {alignment = 8 : i64} loc(#loc93)
    %2 = cir.get_global @badSink : !cir.ptr<!cir.func<!void (!s32i)>> loc(#loc18)
    cir.store %2, %1 : !cir.ptr<!cir.func<!void (!s32i)>>, !cir.ptr<!cir.ptr<!cir.func<!void (!s32i)>>> loc(#loc93)
    %3 = cir.const #cir.int<1> : !s32i loc(#loc19)
    %4 = cir.unary(minus, %3) : !s32i, !s32i loc(#loc20)
    cir.store %4, %0 : !s32i, !cir.ptr<!s32i> loc(#loc94)
    %5 = cir.call @rand() : () -> !s32i extra(#fn_attr1) loc(#loc22)
    %6 = cir.const #cir.int<1> : !s32i loc(#loc22)
    %7 = cir.binop(and, %5, %6) : !s32i loc(#loc22)
    %8 = cir.cast(int_to_bool, %7 : !s32i), !cir.bool loc(#loc22)
    %9 = cir.ternary(%8, true {
      %13 = cir.call @rand() : () -> !s32i extra(#fn_attr1) loc(#loc22)
      %14 = cir.cast(integral, %13 : !s32i), !u32i loc(#loc22)
      %15 = cir.const #cir.int<30> : !s32i loc(#loc22)
      %16 = cir.shift(left, %14 : !u32i, %15 : !s32i) -> !u32i loc(#loc22)
      %17 = cir.call @rand() : () -> !s32i extra(#fn_attr1) loc(#loc22)
      %18 = cir.cast(integral, %17 : !s32i), !u32i loc(#loc22)
      %19 = cir.const #cir.int<15> : !s32i loc(#loc22)
      %20 = cir.shift(left, %18 : !u32i, %19 : !s32i) -> !u32i loc(#loc22)
      %21 = cir.binop(xor, %16, %20) : !u32i loc(#loc22)
      %22 = cir.call @rand() : () -> !s32i extra(#fn_attr1) loc(#loc22)
      %23 = cir.cast(integral, %22 : !s32i), !u32i loc(#loc22)
      %24 = cir.binop(xor, %21, %23) : !u32i loc(#loc22)
      cir.yield %24 : !u32i loc(#loc22)
    }, false {
      %13 = cir.call @rand() : () -> !s32i extra(#fn_attr1) loc(#loc22)
      %14 = cir.cast(integral, %13 : !s32i), !u32i loc(#loc22)
      %15 = cir.const #cir.int<30> : !s32i loc(#loc22)
      %16 = cir.shift(left, %14 : !u32i, %15 : !s32i) -> !u32i loc(#loc22)
      %17 = cir.call @rand() : () -> !s32i extra(#fn_attr1) loc(#loc22)
      %18 = cir.cast(integral, %17 : !s32i), !u32i loc(#loc22)
      %19 = cir.const #cir.int<15> : !s32i loc(#loc22)
      %20 = cir.shift(left, %18 : !u32i, %19 : !s32i) -> !u32i loc(#loc22)
      %21 = cir.binop(xor, %16, %20) : !u32i loc(#loc22)
      %22 = cir.call @rand() : () -> !s32i extra(#fn_attr1) loc(#loc22)
      %23 = cir.cast(integral, %22 : !s32i), !u32i loc(#loc22)
      %24 = cir.binop(xor, %21, %23) : !u32i loc(#loc22)
      %25 = cir.unary(minus, %24) : !u32i, !u32i loc(#loc22)
      %26 = cir.const #cir.int<1> : !s32i loc(#loc22)
      %27 = cir.cast(integral, %26 : !s32i), !u32i loc(#loc22)
      %28 = cir.binop(sub, %25, %27) : !u32i loc(#loc22)
      cir.yield %28 : !u32i loc(#loc22)
    }) : (!cir.bool) -> !u32i loc(#loc22)
    %10 = cir.cast(integral, %9 : !u32i), !s32i loc(#loc22)
    cir.store %10, %0 : !s32i, !cir.ptr<!s32i> loc(#loc95)
    %11 = cir.load %1 : !cir.ptr<!cir.ptr<!cir.func<!void (!s32i)>>>, !cir.ptr<!cir.func<!void (!s32i)>> loc(#loc24)
    %12 = cir.load %0 : !cir.ptr<!s32i>, !s32i loc(#loc25)
    cir.call %11(%12) : (!cir.ptr<!cir.func<!void (!s32i)>>, !s32i) -> () loc(#loc24)
    cir.return loc(#loc14)
  } loc(#loc91)
  cir.func no_proto  @CWE369_Divide_by_Zero__int_rand_divide_44_good() extra(#fn_attr) {
    %0 = cir.get_global @goodG2B : !cir.ptr<!cir.func<!void ()>> loc(#loc97)
    cir.call %0() : (!cir.ptr<!cir.func<!void ()>>) -> () loc(#loc28)
    %1 = cir.get_global @goodB2G : !cir.ptr<!cir.func<!void ()>> loc(#loc98)
    cir.call %1() : (!cir.ptr<!cir.func<!void ()>>) -> () loc(#loc30)
    cir.return loc(#loc27)
  } loc(#loc96)
  cir.func internal private  @goodG2BSink(%arg0: !s32i loc(fused[#loc34, #loc35])) extra(#fn_attr) {
    %0 = cir.alloca !s32i, !cir.ptr<!s32i>, ["data", init] {alignment = 4 : i64} loc(#loc100)
    cir.store %arg0, %0 : !s32i, !cir.ptr<!s32i> loc(#loc36)
    %1 = cir.const #cir.int<100> : !s32i loc(#loc37)
    %2 = cir.load %0 : !cir.ptr<!s32i>, !s32i loc(#loc38)
    %3 = cir.binop(div, %1, %2) : !s32i loc(#loc101)
    cir.call @printIntLine(%3) : (!s32i) -> () loc(#loc39)
    cir.return loc(#loc33)
  } loc(#loc99)
  cir.func no_proto internal private  @goodG2B() extra(#fn_attr) {
    %0 = cir.alloca !s32i, !cir.ptr<!s32i>, ["data"] {alignment = 4 : i64} loc(#loc103)
    %1 = cir.alloca !cir.ptr<!cir.func<!void (!s32i)>>, !cir.ptr<!cir.ptr<!cir.func<!void (!s32i)>>>, ["funcPtr", init] {alignment = 8 : i64} loc(#loc104)
    %2 = cir.get_global @goodG2BSink : !cir.ptr<!cir.func<!void (!s32i)>> loc(#loc45)
    cir.store %2, %1 : !cir.ptr<!cir.func<!void (!s32i)>>, !cir.ptr<!cir.ptr<!cir.func<!void (!s32i)>>> loc(#loc104)
    %3 = cir.const #cir.int<1> : !s32i loc(#loc46)
    %4 = cir.unary(minus, %3) : !s32i, !s32i loc(#loc47)
    cir.store %4, %0 : !s32i, !cir.ptr<!s32i> loc(#loc105)
    %5 = cir.const #cir.int<7> : !s32i loc(#loc49)
    cir.store %5, %0 : !s32i, !cir.ptr<!s32i> loc(#loc106)
    %6 = cir.load %1 : !cir.ptr<!cir.ptr<!cir.func<!void (!s32i)>>>, !cir.ptr<!cir.func<!void (!s32i)>> loc(#loc51)
    %7 = cir.load %0 : !cir.ptr<!s32i>, !s32i loc(#loc52)
    cir.call %6(%7) : (!cir.ptr<!cir.func<!void (!s32i)>>, !s32i) -> () loc(#loc51)
    cir.return loc(#loc41)
  } loc(#loc102)
  cir.func private  @printLine(!cir.ptr<!s8i>) loc(#loc107)
  cir.global "private"  constant internal dsolocal @".str" = #cir.const_array<"This would result in a divide by zero\00" : !cir.array<!s8i x 38>> : !cir.array<!s8i x 38> {alignment = 1 : i64} loc(#loc55)
  cir.func internal private  @goodB2GSink(%arg0: !s32i loc(fused[#loc58, #loc59])) extra(#fn_attr) {
    %0 = cir.alloca !s32i, !cir.ptr<!s32i>, ["data", init] {alignment = 4 : i64} loc(#loc109)
    cir.store %arg0, %0 : !s32i, !cir.ptr<!s32i> loc(#loc60)
    cir.scope {
      %1 = cir.load %0 : !cir.ptr<!s32i>, !s32i loc(#loc63)
      %2 = cir.const #cir.int<0> : !s32i loc(#loc64)
      %3 = cir.cmp(ne, %1, %2) : !s32i, !s32i loc(#loc111)
      %4 = cir.cast(int_to_bool, %3 : !s32i), !cir.bool loc(#loc65)
      cir.if %4 {
        %5 = cir.const #cir.int<100> : !s32i loc(#loc69)
        %6 = cir.load %0 : !cir.ptr<!s32i>, !s32i loc(#loc70)
        %7 = cir.binop(div, %5, %6) : !s32i loc(#loc113)
        cir.call @printIntLine(%7) : (!s32i) -> () loc(#loc71)
      } else {
        %5 = cir.get_global @".str" : !cir.ptr<!cir.array<!s8i x 38>> loc(#loc55)
        %6 = cir.cast(array_to_ptrdecay, %5 : !cir.ptr<!cir.array<!s8i x 38>>), !cir.ptr<!s8i> loc(#loc55)
        cir.call @printLine(%6) : (!cir.ptr<!s8i>) -> () loc(#loc72)
      } loc(#loc112)
    } loc(#loc110)
    cir.return loc(#loc57)
  } loc(#loc108)
  cir.func no_proto internal private  @goodB2G() extra(#fn_attr) {
    %0 = cir.alloca !s32i, !cir.ptr<!s32i>, ["data"] {alignment = 4 : i64} loc(#loc115)
    %1 = cir.alloca !cir.ptr<!cir.func<!void (!s32i)>>, !cir.ptr<!cir.ptr<!cir.func<!void (!s32i)>>>, ["funcPtr", init] {alignment = 8 : i64} loc(#loc116)
    %2 = cir.get_global @goodB2GSink : !cir.ptr<!cir.func<!void (!s32i)>> loc(#loc78)
    cir.store %2, %1 : !cir.ptr<!cir.func<!void (!s32i)>>, !cir.ptr<!cir.ptr<!cir.func<!void (!s32i)>>> loc(#loc116)
    %3 = cir.const #cir.int<1> : !s32i loc(#loc79)
    %4 = cir.unary(minus, %3) : !s32i, !s32i loc(#loc80)
    cir.store %4, %0 : !s32i, !cir.ptr<!s32i> loc(#loc117)
    %5 = cir.call @rand() : () -> !s32i extra(#fn_attr1) loc(#loc82)
    %6 = cir.const #cir.int<1> : !s32i loc(#loc82)
    %7 = cir.binop(and, %5, %6) : !s32i loc(#loc82)
    %8 = cir.cast(int_to_bool, %7 : !s32i), !cir.bool loc(#loc82)
    %9 = cir.ternary(%8, true {
      %13 = cir.call @rand() : () -> !s32i extra(#fn_attr1) loc(#loc82)
      %14 = cir.cast(integral, %13 : !s32i), !u32i loc(#loc82)
      %15 = cir.const #cir.int<30> : !s32i loc(#loc82)
      %16 = cir.shift(left, %14 : !u32i, %15 : !s32i) -> !u32i loc(#loc82)
      %17 = cir.call @rand() : () -> !s32i extra(#fn_attr1) loc(#loc82)
      %18 = cir.cast(integral, %17 : !s32i), !u32i loc(#loc82)
      %19 = cir.const #cir.int<15> : !s32i loc(#loc82)
      %20 = cir.shift(left, %18 : !u32i, %19 : !s32i) -> !u32i loc(#loc82)
      %21 = cir.binop(xor, %16, %20) : !u32i loc(#loc82)
      %22 = cir.call @rand() : () -> !s32i extra(#fn_attr1) loc(#loc82)
      %23 = cir.cast(integral, %22 : !s32i), !u32i loc(#loc82)
      %24 = cir.binop(xor, %21, %23) : !u32i loc(#loc82)
      cir.yield %24 : !u32i loc(#loc82)
    }, false {
      %13 = cir.call @rand() : () -> !s32i extra(#fn_attr1) loc(#loc82)
      %14 = cir.cast(integral, %13 : !s32i), !u32i loc(#loc82)
      %15 = cir.const #cir.int<30> : !s32i loc(#loc82)
      %16 = cir.shift(left, %14 : !u32i, %15 : !s32i) -> !u32i loc(#loc82)
      %17 = cir.call @rand() : () -> !s32i extra(#fn_attr1) loc(#loc82)
      %18 = cir.cast(integral, %17 : !s32i), !u32i loc(#loc82)
      %19 = cir.const #cir.int<15> : !s32i loc(#loc82)
      %20 = cir.shift(left, %18 : !u32i, %19 : !s32i) -> !u32i loc(#loc82)
      %21 = cir.binop(xor, %16, %20) : !u32i loc(#loc82)
      %22 = cir.call @rand() : () -> !s32i extra(#fn_attr1) loc(#loc82)
      %23 = cir.cast(integral, %22 : !s32i), !u32i loc(#loc82)
      %24 = cir.binop(xor, %21, %23) : !u32i loc(#loc82)
      %25 = cir.unary(minus, %24) : !u32i, !u32i loc(#loc82)
      %26 = cir.const #cir.int<1> : !s32i loc(#loc82)
      %27 = cir.cast(integral, %26 : !s32i), !u32i loc(#loc82)
      %28 = cir.binop(sub, %25, %27) : !u32i loc(#loc82)
      cir.yield %28 : !u32i loc(#loc82)
    }) : (!cir.bool) -> !u32i loc(#loc82)
    %10 = cir.cast(integral, %9 : !u32i), !s32i loc(#loc82)
    cir.store %10, %0 : !s32i, !cir.ptr<!s32i> loc(#loc118)
    %11 = cir.load %1 : !cir.ptr<!cir.ptr<!cir.func<!void (!s32i)>>>, !cir.ptr<!cir.func<!void (!s32i)>> loc(#loc84)
    %12 = cir.load %0 : !cir.ptr<!s32i>, !s32i loc(#loc85)
    cir.call %11(%12) : (!cir.ptr<!cir.func<!void (!s32i)>>, !s32i) -> () loc(#loc84)
    cir.return loc(#loc74)
  } loc(#loc114)
} loc(#loc)
#loc = loc("/home/ladisgin/git_proj/test_projects/juliet-c/testcases/CWE369_Divide_by_Zero/s02/CWE369_Divide_by_Zero__int_rand_divide_44.c":0:0)
#loc1 = loc("../../../testcasesupport/std_testcase_io.h":18:1)
#loc2 = loc("../../../testcasesupport/std_testcase_io.h":18:33)
#loc3 = loc("CWE369_Divide_by_Zero__int_rand_divide_44.c":22:1)
#loc4 = loc("CWE369_Divide_by_Zero__int_rand_divide_44.c":26:1)
#loc7 = loc("CWE369_Divide_by_Zero__int_rand_divide_44.c":23:1)
#loc8 = loc("CWE369_Divide_by_Zero__int_rand_divide_44.c":25:18)
#loc9 = loc("CWE369_Divide_by_Zero__int_rand_divide_44.c":25:24)
#loc10 = loc("CWE369_Divide_by_Zero__int_rand_divide_44.c":25:5)
#loc11 = loc("/usr/include/stdlib.h":573:1)
#loc12 = loc("/usr/include/stdlib.h":573:24)
#loc13 = loc("CWE369_Divide_by_Zero__int_rand_divide_44.c":28:1)
#loc14 = loc("CWE369_Divide_by_Zero__int_rand_divide_44.c":39:1)
#loc15 = loc("CWE369_Divide_by_Zero__int_rand_divide_44.c":30:5)
#loc16 = loc("CWE369_Divide_by_Zero__int_rand_divide_44.c":30:9)
#loc17 = loc("CWE369_Divide_by_Zero__int_rand_divide_44.c":32:5)
#loc18 = loc("CWE369_Divide_by_Zero__int_rand_divide_44.c":32:29)
#loc19 = loc("CWE369_Divide_by_Zero__int_rand_divide_44.c":34:13)
#loc20 = loc("CWE369_Divide_by_Zero__int_rand_divide_44.c":34:12)
#loc21 = loc("CWE369_Divide_by_Zero__int_rand_divide_44.c":34:5)
#loc22 = loc("CWE369_Divide_by_Zero__int_rand_divide_44.c":36:12)
#loc23 = loc("CWE369_Divide_by_Zero__int_rand_divide_44.c":36:5)
#loc24 = loc("CWE369_Divide_by_Zero__int_rand_divide_44.c":38:5)
#loc25 = loc("CWE369_Divide_by_Zero__int_rand_divide_44.c":38:13)
#loc26 = loc("CWE369_Divide_by_Zero__int_rand_divide_44.c":88:1)
#loc27 = loc("CWE369_Divide_by_Zero__int_rand_divide_44.c":92:1)
#loc28 = loc("CWE369_Divide_by_Zero__int_rand_divide_44.c":90:5)
#loc29 = loc("CWE369_Divide_by_Zero__int_rand_divide_44.c":90:13)
#loc30 = loc("CWE369_Divide_by_Zero__int_rand_divide_44.c":91:5)
#loc31 = loc("CWE369_Divide_by_Zero__int_rand_divide_44.c":91:13)
#loc32 = loc("CWE369_Divide_by_Zero__int_rand_divide_44.c":46:1)
#loc33 = loc("CWE369_Divide_by_Zero__int_rand_divide_44.c":50:1)
#loc36 = loc("CWE369_Divide_by_Zero__int_rand_divide_44.c":47:1)
#loc37 = loc("CWE369_Divide_by_Zero__int_rand_divide_44.c":49:18)
#loc38 = loc("CWE369_Divide_by_Zero__int_rand_divide_44.c":49:24)
#loc39 = loc("CWE369_Divide_by_Zero__int_rand_divide_44.c":49:5)
#loc40 = loc("CWE369_Divide_by_Zero__int_rand_divide_44.c":52:1)
#loc41 = loc("CWE369_Divide_by_Zero__int_rand_divide_44.c":61:1)
#loc42 = loc("CWE369_Divide_by_Zero__int_rand_divide_44.c":54:5)
#loc43 = loc("CWE369_Divide_by_Zero__int_rand_divide_44.c":54:9)
#loc44 = loc("CWE369_Divide_by_Zero__int_rand_divide_44.c":55:5)
#loc45 = loc("CWE369_Divide_by_Zero__int_rand_divide_44.c":55:29)
#loc46 = loc("CWE369_Divide_by_Zero__int_rand_divide_44.c":57:13)
#loc47 = loc("CWE369_Divide_by_Zero__int_rand_divide_44.c":57:12)
#loc48 = loc("CWE369_Divide_by_Zero__int_rand_divide_44.c":57:5)
#loc49 = loc("CWE369_Divide_by_Zero__int_rand_divide_44.c":59:12)
#loc50 = loc("CWE369_Divide_by_Zero__int_rand_divide_44.c":59:5)
#loc51 = loc("CWE369_Divide_by_Zero__int_rand_divide_44.c":60:5)
#loc52 = loc("CWE369_Divide_by_Zero__int_rand_divide_44.c":60:13)
#loc53 = loc("../../../testcasesupport/std_testcase_io.h":14:1)
#loc54 = loc("../../../testcasesupport/std_testcase_io.h":14:33)
#loc55 = loc("CWE369_Divide_by_Zero__int_rand_divide_44.c":73:19)
#loc56 = loc("CWE369_Divide_by_Zero__int_rand_divide_44.c":64:1)
#loc57 = loc("CWE369_Divide_by_Zero__int_rand_divide_44.c":75:1)
#loc60 = loc("CWE369_Divide_by_Zero__int_rand_divide_44.c":65:1)
#loc61 = loc("CWE369_Divide_by_Zero__int_rand_divide_44.c":67:5)
#loc62 = loc("CWE369_Divide_by_Zero__int_rand_divide_44.c":74:5)
#loc63 = loc("CWE369_Divide_by_Zero__int_rand_divide_44.c":67:9)
#loc64 = loc("CWE369_Divide_by_Zero__int_rand_divide_44.c":67:17)
#loc65 = loc("CWE369_Divide_by_Zero__int_rand_divide_44.c":67:14)
#loc66 = loc("CWE369_Divide_by_Zero__int_rand_divide_44.c":68:5)
#loc67 = loc("CWE369_Divide_by_Zero__int_rand_divide_44.c":70:5)
#loc68 = loc("CWE369_Divide_by_Zero__int_rand_divide_44.c":72:5)
#loc69 = loc("CWE369_Divide_by_Zero__int_rand_divide_44.c":69:22)
#loc70 = loc("CWE369_Divide_by_Zero__int_rand_divide_44.c":69:28)
#loc71 = loc("CWE369_Divide_by_Zero__int_rand_divide_44.c":69:9)
#loc72 = loc("CWE369_Divide_by_Zero__int_rand_divide_44.c":73:9)
#loc73 = loc("CWE369_Divide_by_Zero__int_rand_divide_44.c":77:1)
#loc74 = loc("CWE369_Divide_by_Zero__int_rand_divide_44.c":86:1)
#loc75 = loc("CWE369_Divide_by_Zero__int_rand_divide_44.c":79:5)
#loc76 = loc("CWE369_Divide_by_Zero__int_rand_divide_44.c":79:9)
#loc77 = loc("CWE369_Divide_by_Zero__int_rand_divide_44.c":80:5)
#loc78 = loc("CWE369_Divide_by_Zero__int_rand_divide_44.c":80:29)
#loc79 = loc("CWE369_Divide_by_Zero__int_rand_divide_44.c":82:13)
#loc80 = loc("CWE369_Divide_by_Zero__int_rand_divide_44.c":82:12)
#loc81 = loc("CWE369_Divide_by_Zero__int_rand_divide_44.c":82:5)
#loc82 = loc("CWE369_Divide_by_Zero__int_rand_divide_44.c":84:12)
#loc83 = loc("CWE369_Divide_by_Zero__int_rand_divide_44.c":84:5)
#loc84 = loc("CWE369_Divide_by_Zero__int_rand_divide_44.c":85:5)
#loc85 = loc("CWE369_Divide_by_Zero__int_rand_divide_44.c":85:13)
#loc86 = loc(fused[#loc1, #loc2])
#loc87 = loc(fused[#loc3, #loc4])
#loc89 = loc(fused[#loc8, #loc9])
#loc90 = loc(fused[#loc11, #loc12])
#loc91 = loc(fused[#loc13, #loc14])
#loc92 = loc(fused[#loc15, #loc16])
#loc93 = loc(fused[#loc17, #loc18])
#loc94 = loc(fused[#loc21, #loc19])
#loc95 = loc(fused[#loc23, #loc22])
#loc96 = loc(fused[#loc26, #loc27])
#loc97 = loc(fused[#loc28, #loc29])
#loc98 = loc(fused[#loc30, #loc31])
#loc99 = loc(fused[#loc32, #loc33])
#loc101 = loc(fused[#loc37, #loc38])
#loc102 = loc(fused[#loc40, #loc41])
#loc103 = loc(fused[#loc42, #loc43])
#loc104 = loc(fused[#loc44, #loc45])
#loc105 = loc(fused[#loc48, #loc46])
#loc106 = loc(fused[#loc50, #loc49])
#loc107 = loc(fused[#loc53, #loc54])
#loc108 = loc(fused[#loc56, #loc57])
#loc110 = loc(fused[#loc61, #loc62])
#loc111 = loc(fused[#loc63, #loc64])
#loc112 = loc(fused[#loc66, #loc67, #loc68, #loc62])
#loc113 = loc(fused[#loc69, #loc70])
#loc114 = loc(fused[#loc73, #loc74])
#loc115 = loc(fused[#loc75, #loc76])
#loc116 = loc(fused[#loc77, #loc78])
#loc117 = loc(fused[#loc81, #loc79])
#loc118 = loc(fused[#loc83, #loc82])
