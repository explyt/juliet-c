!s32i = !cir.int<s, 32>
!s64i = !cir.int<s, 64>
!s8i = !cir.int<s, 8>
!ty__IO_codecvt = !cir.record<struct "_IO_codecvt" incomplete>
!ty__IO_marker = !cir.record<struct "_IO_marker" incomplete>
!ty__IO_wide_data = !cir.record<struct "_IO_wide_data" incomplete>
!u16i = !cir.int<u, 16>
!u64i = !cir.int<u, 64>
!void = !cir.void
#fn_attr = #cir<extra({nothrow = #cir.nothrow})>
#fn_attr1 = #cir<extra({inline = #cir.inline<no>, nothrow = #cir.nothrow, optnone = #cir.optnone, uwtable = #cir.uwtable<async>})>
!ty__IO_FILE = !cir.record<struct "_IO_FILE" {!s32i, !cir.ptr<!s8i>, !cir.ptr<!s8i>, !cir.ptr<!s8i>, !cir.ptr<!s8i>, !cir.ptr<!s8i>, !cir.ptr<!s8i>, !cir.ptr<!s8i>, !cir.ptr<!s8i>, !cir.ptr<!s8i>, !cir.ptr<!s8i>, !cir.ptr<!s8i>, !cir.ptr<!ty__IO_marker>, !cir.ptr<!cir.record<struct "_IO_FILE">>, !s32i, !s32i, !s64i, !u16i, !s8i, !cir.array<!s8i x 1>, !cir.ptr<!void>, !s64i, !cir.ptr<!ty__IO_codecvt>, !cir.ptr<!ty__IO_wide_data>, !cir.ptr<!cir.record<struct "_IO_FILE">>, !cir.ptr<!void>, !u64i, !s32i, !cir.array<!s8i x 20>} #cir.record.decl.ast>
module @"/workspaces/juliet-c/testcases/CWE190_Integer_Overflow/s06/CWE190_Integer_Overflow__int_fgets_postinc_16.c" attributes {cir.lang = #cir.lang<c>, cir.sob = #cir.signed_overflow_behavior<undefined>, cir.triple = "x86_64-unknown-linux-gnu", cir.type_size_info = #cir.type_size_info<char = 8, int = 32, size_t = 64>, cir.uwtable = #cir.uwtable<async>, dlti.dl_spec = #dlti.dl_spec<i16 = dense<16> : vector<2xi64>, i8 = dense<8> : vector<2xi64>, i1 = dense<8> : vector<2xi64>, !llvm.ptr = dense<64> : vector<4xi64>, f80 = dense<128> : vector<2xi64>, i128 = dense<128> : vector<2xi64>, i64 = dense<64> : vector<2xi64>, !llvm.ptr<272> = dense<64> : vector<4xi64>, !llvm.ptr<271> = dense<32> : vector<4xi64>, f128 = dense<128> : vector<2xi64>, !llvm.ptr<270> = dense<32> : vector<4xi64>, f64 = dense<64> : vector<2xi64>, f16 = dense<16> : vector<2xi64>, i32 = dense<32> : vector<2xi64>, "dlti.endianness" = "little", "dlti.mangling_mode" = "e", "dlti.stack_alignment" = 128 : i64>} {
  cir.func private @fgets(!cir.ptr<!s8i>, !s32i, !cir.ptr<!ty__IO_FILE>) -> !cir.ptr<!s8i> loc(#loc138)
  cir.global "private" external @stdin : !cir.ptr<!ty__IO_FILE> {alignment = 8 : i64} loc(#loc139)
  cir.func private @atoi(!cir.ptr<!s8i>) -> !s32i extra(#fn_attr) loc(#loc140)
  cir.func private @printLine(!cir.ptr<!s8i>) loc(#loc141)
  cir.global "private" constant cir_private dsolocal @".str" = #cir.const_array<"fgets() failed.\00" : !cir.array<!s8i x 16>> : !cir.array<!s8i x 16> {alignment = 1 : i64} loc(#loc9)
  cir.func private @printIntLine(!s32i) loc(#loc142)
  cir.func no_proto @CWE190_Integer_Overflow__int_fgets_postinc_16_bad() extra(#fn_attr1) {
    %0 = cir.alloca !s32i, !cir.ptr<!s32i>, ["data"] {alignment = 4 : i64} loc(#loc144)
    %1 = cir.const #cir.int<0> : !s32i loc(#loc16)
    cir.store %1, %0 : !s32i, !cir.ptr<!s32i> loc(#loc145)
    cir.scope {
      cir.while {
        %2 = cir.const #cir.int<1> : !s32i loc(#loc20)
        %3 = cir.cast(int_to_bool, %2 : !s32i), !cir.bool loc(#loc20)
        cir.condition(%3) loc(#loc20)
      } do {
        cir.scope {
          cir.scope {
            %2 = cir.alloca !cir.array<!s8i x 14>, !cir.ptr<!cir.array<!s8i x 14>>, ["inputBuffer"] {alignment = 1 : i64} loc(#loc149)
            %3 = cir.const #cir.zero : !cir.array<!s8i x 14> loc(#loc149)
            cir.store %3, %2 : !cir.array<!s8i x 14>, !cir.ptr<!cir.array<!s8i x 14>> loc(#loc149)
            cir.scope {
              %4 = cir.cast(array_to_ptrdecay, %2 : !cir.ptr<!cir.array<!s8i x 14>>), !cir.ptr<!s8i> loc(#loc28)
              %5 = cir.const #cir.int<3> : !s32i loc(#loc29)
              %6 = cir.cast(integral, %5 : !s32i), !u64i loc(#loc29)
              %7 = cir.const #cir.int<4> : !u64i loc(#loc29)
              %8 = cir.binop(mul, %6, %7) : !u64i loc(#loc29)
              %9 = cir.const #cir.int<2> : !s32i loc(#loc29)
              %10 = cir.cast(integral, %9 : !s32i), !u64i loc(#loc29)
              %11 = cir.binop(add, %8, %10) : !u64i loc(#loc29)
              %12 = cir.cast(integral, %11 : !u64i), !s32i loc(#loc29)
              %13 = cir.get_global @stdin : !cir.ptr<!cir.ptr<!ty__IO_FILE>> loc(#loc139)
              %14 = cir.load %13 : !cir.ptr<!cir.ptr<!ty__IO_FILE>>, !cir.ptr<!ty__IO_FILE> loc(#loc30)
              %15 = cir.call @fgets(%4, %12, %14) : (!cir.ptr<!s8i>, !s32i, !cir.ptr<!ty__IO_FILE>) -> !cir.ptr<!s8i> loc(#loc31)
              %16 = cir.const #cir.ptr<null> : !cir.ptr<!void> loc(#loc32)
              %17 = cir.cast(bitcast, %16 : !cir.ptr<!void>), !cir.ptr<!s8i> loc(#loc32)
              %18 = cir.cmp(ne, %15, %17) : !cir.ptr<!s8i>, !cir.bool loc(#loc151)
              cir.if %18 {
                %19 = cir.cast(array_to_ptrdecay, %2 : !cir.ptr<!cir.array<!s8i x 14>>), !cir.ptr<!s8i> loc(#loc36)
                %20 = cir.call @atoi(%19) : (!cir.ptr<!s8i>) -> !s32i side_effect(pure) extra(#fn_attr) loc(#loc37)
                cir.store %20, %0 : !s32i, !cir.ptr<!s32i> loc(#loc153)
              } else {
                %19 = cir.get_global @".str" : !cir.ptr<!cir.array<!s8i x 16>> loc(#loc9)
                %20 = cir.cast(array_to_ptrdecay, %19 : !cir.ptr<!cir.array<!s8i x 16>>), !cir.ptr<!s8i> loc(#loc9)
                cir.call @printLine(%20) : (!cir.ptr<!s8i>) -> () loc(#loc40)
              } loc(#loc152)
            } loc(#loc150)
          } loc(#loc148)
          cir.break loc(#loc41)
        } loc(#loc147)
        cir.yield loc(#loc19)
      } loc(#loc146)
    } loc(#loc146)
    cir.scope {
      cir.while {
        %2 = cir.const #cir.int<1> : !s32i loc(#loc44)
        %3 = cir.cast(int_to_bool, %2 : !s32i), !cir.bool loc(#loc44)
        cir.condition(%3) loc(#loc44)
      } do {
        cir.scope {
          cir.scope {
            %2 = cir.alloca !s32i, !cir.ptr<!s32i>, ["result", init] {alignment = 4 : i64} loc(#loc157)
            %3 = cir.load %0 : !cir.ptr<!s32i>, !s32i loc(#loc50)
            %4 = cir.unary(inc, %3) nsw : !s32i, !s32i loc(#loc51)
            cir.store %4, %0 : !s32i, !cir.ptr<!s32i> loc(#loc158)
            %5 = cir.load %0 : !cir.ptr<!s32i>, !s32i loc(#loc49)
            cir.store %5, %2 : !s32i, !cir.ptr<!s32i> loc(#loc157)
            %6 = cir.load %2 : !cir.ptr<!s32i>, !s32i loc(#loc52)
            cir.call @printIntLine(%6) : (!s32i) -> () loc(#loc53)
          } loc(#loc156)
          cir.break loc(#loc54)
        } loc(#loc155)
        cir.yield loc(#loc43)
      } loc(#loc154)
    } loc(#loc154)
    cir.return loc(#loc13)
  } loc(#loc143)
  cir.func no_proto @CWE190_Integer_Overflow__int_fgets_postinc_16_good() extra(#fn_attr1) {
    %0 = cir.get_global @goodB2G : !cir.ptr<!cir.func<()>> loc(#loc160)
    cir.call %0() : (!cir.ptr<!cir.func<()>>) -> () loc(#loc57)
    %1 = cir.get_global @goodG2B : !cir.ptr<!cir.func<()>> loc(#loc161)
    cir.call %1() : (!cir.ptr<!cir.func<()>>) -> () loc(#loc59)
    cir.return loc(#loc56)
  } loc(#loc159)
  cir.global "private" constant cir_private dsolocal @".str.1" = #cir.const_array<"data value is too large to perform arithmetic safely.\00" : !cir.array<!s8i x 54>> : !cir.array<!s8i x 54> {alignment = 1 : i64} loc(#loc61)
  cir.func no_proto internal private @goodB2G() extra(#fn_attr1) {
    %0 = cir.alloca !s32i, !cir.ptr<!s32i>, ["data"] {alignment = 4 : i64} loc(#loc163)
    %1 = cir.const #cir.int<0> : !s32i loc(#loc66)
    cir.store %1, %0 : !s32i, !cir.ptr<!s32i> loc(#loc164)
    cir.scope {
      cir.while {
        %2 = cir.const #cir.int<1> : !s32i loc(#loc70)
        %3 = cir.cast(int_to_bool, %2 : !s32i), !cir.bool loc(#loc70)
        cir.condition(%3) loc(#loc70)
      } do {
        cir.scope {
          cir.scope {
            %2 = cir.alloca !cir.array<!s8i x 14>, !cir.ptr<!cir.array<!s8i x 14>>, ["inputBuffer"] {alignment = 1 : i64} loc(#loc168)
            %3 = cir.const #cir.zero : !cir.array<!s8i x 14> loc(#loc168)
            cir.store %3, %2 : !cir.array<!s8i x 14>, !cir.ptr<!cir.array<!s8i x 14>> loc(#loc168)
            cir.scope {
              %4 = cir.cast(array_to_ptrdecay, %2 : !cir.ptr<!cir.array<!s8i x 14>>), !cir.ptr<!s8i> loc(#loc78)
              %5 = cir.const #cir.int<3> : !s32i loc(#loc79)
              %6 = cir.cast(integral, %5 : !s32i), !u64i loc(#loc79)
              %7 = cir.const #cir.int<4> : !u64i loc(#loc79)
              %8 = cir.binop(mul, %6, %7) : !u64i loc(#loc79)
              %9 = cir.const #cir.int<2> : !s32i loc(#loc79)
              %10 = cir.cast(integral, %9 : !s32i), !u64i loc(#loc79)
              %11 = cir.binop(add, %8, %10) : !u64i loc(#loc79)
              %12 = cir.cast(integral, %11 : !u64i), !s32i loc(#loc79)
              %13 = cir.get_global @stdin : !cir.ptr<!cir.ptr<!ty__IO_FILE>> loc(#loc139)
              %14 = cir.load %13 : !cir.ptr<!cir.ptr<!ty__IO_FILE>>, !cir.ptr<!ty__IO_FILE> loc(#loc80)
              %15 = cir.call @fgets(%4, %12, %14) : (!cir.ptr<!s8i>, !s32i, !cir.ptr<!ty__IO_FILE>) -> !cir.ptr<!s8i> loc(#loc81)
              %16 = cir.const #cir.ptr<null> : !cir.ptr<!void> loc(#loc82)
              %17 = cir.cast(bitcast, %16 : !cir.ptr<!void>), !cir.ptr<!s8i> loc(#loc82)
              %18 = cir.cmp(ne, %15, %17) : !cir.ptr<!s8i>, !cir.bool loc(#loc170)
              cir.if %18 {
                %19 = cir.cast(array_to_ptrdecay, %2 : !cir.ptr<!cir.array<!s8i x 14>>), !cir.ptr<!s8i> loc(#loc86)
                %20 = cir.call @atoi(%19) : (!cir.ptr<!s8i>) -> !s32i side_effect(pure) extra(#fn_attr) loc(#loc87)
                cir.store %20, %0 : !s32i, !cir.ptr<!s32i> loc(#loc172)
              } else {
                %19 = cir.get_global @".str" : !cir.ptr<!cir.array<!s8i x 16>> loc(#loc90)
                %20 = cir.cast(array_to_ptrdecay, %19 : !cir.ptr<!cir.array<!s8i x 16>>), !cir.ptr<!s8i> loc(#loc90)
                cir.call @printLine(%20) : (!cir.ptr<!s8i>) -> () loc(#loc91)
              } loc(#loc171)
            } loc(#loc169)
          } loc(#loc167)
          cir.break loc(#loc92)
        } loc(#loc166)
        cir.yield loc(#loc69)
      } loc(#loc165)
    } loc(#loc165)
    cir.scope {
      cir.while {
        %2 = cir.const #cir.int<1> : !s32i loc(#loc95)
        %3 = cir.cast(int_to_bool, %2 : !s32i), !cir.bool loc(#loc95)
        cir.condition(%3) loc(#loc95)
      } do {
        cir.scope {
          cir.scope {
            %2 = cir.load %0 : !cir.ptr<!s32i>, !s32i loc(#loc99)
            %3 = cir.const #cir.int<2147483647> : !s32i loc(#loc100)
            %4 = cir.cmp(lt, %2, %3) : !s32i, !cir.bool loc(#loc176)
            cir.if %4 {
              %5 = cir.alloca !s32i, !cir.ptr<!s32i>, ["result", init] {alignment = 4 : i64} loc(#loc178)
              %6 = cir.load %0 : !cir.ptr<!s32i>, !s32i loc(#loc106)
              %7 = cir.unary(inc, %6) nsw : !s32i, !s32i loc(#loc107)
              cir.store %7, %0 : !s32i, !cir.ptr<!s32i> loc(#loc179)
              %8 = cir.load %0 : !cir.ptr<!s32i>, !s32i loc(#loc105)
              cir.store %8, %5 : !s32i, !cir.ptr<!s32i> loc(#loc178)
              %9 = cir.load %5 : !cir.ptr<!s32i>, !s32i loc(#loc108)
              cir.call @printIntLine(%9) : (!s32i) -> () loc(#loc109)
            } else {
              %5 = cir.get_global @".str.1" : !cir.ptr<!cir.array<!s8i x 54>> loc(#loc61)
              %6 = cir.cast(array_to_ptrdecay, %5 : !cir.ptr<!cir.array<!s8i x 54>>), !cir.ptr<!s8i> loc(#loc61)
              cir.call @printLine(%6) : (!cir.ptr<!s8i>) -> () loc(#loc110)
            } loc(#loc177)
          } loc(#loc175)
          cir.break loc(#loc111)
        } loc(#loc174)
        cir.yield loc(#loc94)
      } loc(#loc173)
    } loc(#loc173)
    cir.return loc(#loc63)
  } loc(#loc162)
  cir.func no_proto internal private @goodG2B() extra(#fn_attr1) {
    %0 = cir.alloca !s32i, !cir.ptr<!s32i>, ["data"] {alignment = 4 : i64} loc(#loc181)
    %1 = cir.const #cir.int<0> : !s32i loc(#loc116)
    cir.store %1, %0 : !s32i, !cir.ptr<!s32i> loc(#loc182)
    cir.scope {
      cir.while {
        %2 = cir.const #cir.int<1> : !s32i loc(#loc120)
        %3 = cir.cast(int_to_bool, %2 : !s32i), !cir.bool loc(#loc120)
        cir.condition(%3) loc(#loc120)
      } do {
        cir.scope {
          %2 = cir.const #cir.int<2> : !s32i loc(#loc122)
          cir.store %2, %0 : !s32i, !cir.ptr<!s32i> loc(#loc185)
          cir.break loc(#loc124)
        } loc(#loc184)
        cir.yield loc(#loc119)
      } loc(#loc183)
    } loc(#loc183)
    cir.scope {
      cir.while {
        %2 = cir.const #cir.int<1> : !s32i loc(#loc127)
        %3 = cir.cast(int_to_bool, %2 : !s32i), !cir.bool loc(#loc127)
        cir.condition(%3) loc(#loc127)
      } do {
        cir.scope {
          cir.scope {
            %2 = cir.alloca !s32i, !cir.ptr<!s32i>, ["result", init] {alignment = 4 : i64} loc(#loc189)
            %3 = cir.load %0 : !cir.ptr<!s32i>, !s32i loc(#loc133)
            %4 = cir.unary(inc, %3) nsw : !s32i, !s32i loc(#loc134)
            cir.store %4, %0 : !s32i, !cir.ptr<!s32i> loc(#loc190)
            %5 = cir.load %0 : !cir.ptr<!s32i>, !s32i loc(#loc132)
            cir.store %5, %2 : !s32i, !cir.ptr<!s32i> loc(#loc189)
            %6 = cir.load %2 : !cir.ptr<!s32i>, !s32i loc(#loc135)
            cir.call @printIntLine(%6) : (!s32i) -> () loc(#loc136)
          } loc(#loc188)
          cir.break loc(#loc137)
        } loc(#loc187)
        cir.yield loc(#loc126)
      } loc(#loc186)
    } loc(#loc186)
    cir.return loc(#loc113)
  } loc(#loc180)
} loc(#loc)
#loc = loc("/workspaces/juliet-c/testcases/CWE190_Integer_Overflow/s06/CWE190_Integer_Overflow__int_fgets_postinc_16.c":0:0)
#loc1 = loc("/usr/include/stdio.h":654:1)
#loc2 = loc("/usr/include/stdio.h":655:59)
#loc3 = loc("/usr/include/stdio.h":149:1)
#loc4 = loc("/usr/include/stdio.h":149:14)
#loc5 = loc("/usr/include/stdlib.h":105:1)
#loc6 = loc("/usr/include/stdlib.h":106:33)
#loc7 = loc("../../../testcasesupport/std_testcase_io.h":14:1)
#loc8 = loc("../../../testcasesupport/std_testcase_io.h":14:33)
#loc9 = loc("CWE190_Integer_Overflow__int_fgets_postinc_16.c":41:27)
#loc10 = loc("../../../testcasesupport/std_testcase_io.h":18:1)
#loc11 = loc("../../../testcasesupport/std_testcase_io.h":18:33)
#loc12 = loc("CWE190_Integer_Overflow__int_fgets_postinc_16.c":24:1)
#loc13 = loc("CWE190_Integer_Overflow__int_fgets_postinc_16.c":56:1)
#loc14 = loc("CWE190_Integer_Overflow__int_fgets_postinc_16.c":26:5)
#loc15 = loc("CWE190_Integer_Overflow__int_fgets_postinc_16.c":26:9)
#loc16 = loc("CWE190_Integer_Overflow__int_fgets_postinc_16.c":28:12)
#loc17 = loc("CWE190_Integer_Overflow__int_fgets_postinc_16.c":28:5)
#loc18 = loc("CWE190_Integer_Overflow__int_fgets_postinc_16.c":29:5)
#loc19 = loc("CWE190_Integer_Overflow__int_fgets_postinc_16.c":45:5)
#loc20 = loc("CWE190_Integer_Overflow__int_fgets_postinc_16.c":29:11)
#loc21 = loc("CWE190_Integer_Overflow__int_fgets_postinc_16.c":30:5)
#loc22 = loc("CWE190_Integer_Overflow__int_fgets_postinc_16.c":31:9)
#loc23 = loc("CWE190_Integer_Overflow__int_fgets_postinc_16.c":43:9)
#loc24 = loc("CWE190_Integer_Overflow__int_fgets_postinc_16.c":32:13)
#loc25 = loc("CWE190_Integer_Overflow__int_fgets_postinc_16.c":32:49)
#loc26 = loc("CWE190_Integer_Overflow__int_fgets_postinc_16.c":34:13)
#loc27 = loc("CWE190_Integer_Overflow__int_fgets_postinc_16.c":42:13)
#loc28 = loc("CWE190_Integer_Overflow__int_fgets_postinc_16.c":34:23)
#loc29 = loc("CWE190_Integer_Overflow__int_fgets_postinc_16.c":34:36)
#loc30 = loc("CWE190_Integer_Overflow__int_fgets_postinc_16.c":34:53)
#loc31 = loc("CWE190_Integer_Overflow__int_fgets_postinc_16.c":34:17)
#loc32 = loc("CWE190_Integer_Overflow__int_fgets_postinc_16.c":34:63)
#loc33 = loc("CWE190_Integer_Overflow__int_fgets_postinc_16.c":35:13)
#loc34 = loc("CWE190_Integer_Overflow__int_fgets_postinc_16.c":38:13)
#loc35 = loc("CWE190_Integer_Overflow__int_fgets_postinc_16.c":40:13)
#loc36 = loc("CWE190_Integer_Overflow__int_fgets_postinc_16.c":37:29)
#loc37 = loc("CWE190_Integer_Overflow__int_fgets_postinc_16.c":37:24)
#loc38 = loc("CWE190_Integer_Overflow__int_fgets_postinc_16.c":37:17)
#loc39 = loc("CWE190_Integer_Overflow__int_fgets_postinc_16.c":37:40)
#loc40 = loc("CWE190_Integer_Overflow__int_fgets_postinc_16.c":41:17)
#loc41 = loc("CWE190_Integer_Overflow__int_fgets_postinc_16.c":44:9)
#loc42 = loc("CWE190_Integer_Overflow__int_fgets_postinc_16.c":46:5)
#loc43 = loc("CWE190_Integer_Overflow__int_fgets_postinc_16.c":55:5)
#loc44 = loc("CWE190_Integer_Overflow__int_fgets_postinc_16.c":46:11)
#loc45 = loc("CWE190_Integer_Overflow__int_fgets_postinc_16.c":47:5)
#loc46 = loc("CWE190_Integer_Overflow__int_fgets_postinc_16.c":48:9)
#loc47 = loc("CWE190_Integer_Overflow__int_fgets_postinc_16.c":53:9)
#loc48 = loc("CWE190_Integer_Overflow__int_fgets_postinc_16.c":51:13)
#loc49 = loc("CWE190_Integer_Overflow__int_fgets_postinc_16.c":51:26)
#loc50 = loc("CWE190_Integer_Overflow__int_fgets_postinc_16.c":50:17)
#loc51 = loc("CWE190_Integer_Overflow__int_fgets_postinc_16.c":50:13)
#loc52 = loc("CWE190_Integer_Overflow__int_fgets_postinc_16.c":52:26)
#loc53 = loc("CWE190_Integer_Overflow__int_fgets_postinc_16.c":52:13)
#loc54 = loc("CWE190_Integer_Overflow__int_fgets_postinc_16.c":54:9)
#loc55 = loc("CWE190_Integer_Overflow__int_fgets_postinc_16.c":126:1)
#loc56 = loc("CWE190_Integer_Overflow__int_fgets_postinc_16.c":130:1)
#loc57 = loc("CWE190_Integer_Overflow__int_fgets_postinc_16.c":128:5)
#loc58 = loc("CWE190_Integer_Overflow__int_fgets_postinc_16.c":128:13)
#loc59 = loc("CWE190_Integer_Overflow__int_fgets_postinc_16.c":129:5)
#loc60 = loc("CWE190_Integer_Overflow__int_fgets_postinc_16.c":129:13)
#loc61 = loc("CWE190_Integer_Overflow__int_fgets_postinc_16.c":96:23)
#loc62 = loc("CWE190_Integer_Overflow__int_fgets_postinc_16.c":63:1)
#loc63 = loc("CWE190_Integer_Overflow__int_fgets_postinc_16.c":100:1)
#loc64 = loc("CWE190_Integer_Overflow__int_fgets_postinc_16.c":65:5)
#loc65 = loc("CWE190_Integer_Overflow__int_fgets_postinc_16.c":65:9)
#loc66 = loc("CWE190_Integer_Overflow__int_fgets_postinc_16.c":67:12)
#loc67 = loc("CWE190_Integer_Overflow__int_fgets_postinc_16.c":67:5)
#loc68 = loc("CWE190_Integer_Overflow__int_fgets_postinc_16.c":68:5)
#loc69 = loc("CWE190_Integer_Overflow__int_fgets_postinc_16.c":84:5)
#loc70 = loc("CWE190_Integer_Overflow__int_fgets_postinc_16.c":68:11)
#loc71 = loc("CWE190_Integer_Overflow__int_fgets_postinc_16.c":69:5)
#loc72 = loc("CWE190_Integer_Overflow__int_fgets_postinc_16.c":70:9)
#loc73 = loc("CWE190_Integer_Overflow__int_fgets_postinc_16.c":82:9)
#loc74 = loc("CWE190_Integer_Overflow__int_fgets_postinc_16.c":71:13)
#loc75 = loc("CWE190_Integer_Overflow__int_fgets_postinc_16.c":71:49)
#loc76 = loc("CWE190_Integer_Overflow__int_fgets_postinc_16.c":73:13)
#loc77 = loc("CWE190_Integer_Overflow__int_fgets_postinc_16.c":81:13)
#loc78 = loc("CWE190_Integer_Overflow__int_fgets_postinc_16.c":73:23)
#loc79 = loc("CWE190_Integer_Overflow__int_fgets_postinc_16.c":73:36)
#loc80 = loc("CWE190_Integer_Overflow__int_fgets_postinc_16.c":73:53)
#loc81 = loc("CWE190_Integer_Overflow__int_fgets_postinc_16.c":73:17)
#loc82 = loc("CWE190_Integer_Overflow__int_fgets_postinc_16.c":73:63)
#loc83 = loc("CWE190_Integer_Overflow__int_fgets_postinc_16.c":74:13)
#loc84 = loc("CWE190_Integer_Overflow__int_fgets_postinc_16.c":77:13)
#loc85 = loc("CWE190_Integer_Overflow__int_fgets_postinc_16.c":79:13)
#loc86 = loc("CWE190_Integer_Overflow__int_fgets_postinc_16.c":76:29)
#loc87 = loc("CWE190_Integer_Overflow__int_fgets_postinc_16.c":76:24)
#loc88 = loc("CWE190_Integer_Overflow__int_fgets_postinc_16.c":76:17)
#loc89 = loc("CWE190_Integer_Overflow__int_fgets_postinc_16.c":76:40)
#loc90 = loc("CWE190_Integer_Overflow__int_fgets_postinc_16.c":80:27)
#loc91 = loc("CWE190_Integer_Overflow__int_fgets_postinc_16.c":80:17)
#loc92 = loc("CWE190_Integer_Overflow__int_fgets_postinc_16.c":83:9)
#loc93 = loc("CWE190_Integer_Overflow__int_fgets_postinc_16.c":85:5)
#loc94 = loc("CWE190_Integer_Overflow__int_fgets_postinc_16.c":99:5)
#loc95 = loc("CWE190_Integer_Overflow__int_fgets_postinc_16.c":85:11)
#loc96 = loc("CWE190_Integer_Overflow__int_fgets_postinc_16.c":86:5)
#loc97 = loc("CWE190_Integer_Overflow__int_fgets_postinc_16.c":88:9)
#loc98 = loc("CWE190_Integer_Overflow__int_fgets_postinc_16.c":97:9)
#loc99 = loc("CWE190_Integer_Overflow__int_fgets_postinc_16.c":88:13)
#loc100 = loc("CWE190_Integer_Overflow__int_fgets_postinc_16.c":88:20)
#loc101 = loc("CWE190_Integer_Overflow__int_fgets_postinc_16.c":89:9)
#loc102 = loc("CWE190_Integer_Overflow__int_fgets_postinc_16.c":93:9)
#loc103 = loc("CWE190_Integer_Overflow__int_fgets_postinc_16.c":95:9)
#loc104 = loc("CWE190_Integer_Overflow__int_fgets_postinc_16.c":91:13)
#loc105 = loc("CWE190_Integer_Overflow__int_fgets_postinc_16.c":91:26)
#loc106 = loc("CWE190_Integer_Overflow__int_fgets_postinc_16.c":90:17)
#loc107 = loc("CWE190_Integer_Overflow__int_fgets_postinc_16.c":90:13)
#loc108 = loc("CWE190_Integer_Overflow__int_fgets_postinc_16.c":92:26)
#loc109 = loc("CWE190_Integer_Overflow__int_fgets_postinc_16.c":92:13)
#loc110 = loc("CWE190_Integer_Overflow__int_fgets_postinc_16.c":96:13)
#loc111 = loc("CWE190_Integer_Overflow__int_fgets_postinc_16.c":98:9)
#loc112 = loc("CWE190_Integer_Overflow__int_fgets_postinc_16.c":103:1)
#loc113 = loc("CWE190_Integer_Overflow__int_fgets_postinc_16.c":124:1)
#loc114 = loc("CWE190_Integer_Overflow__int_fgets_postinc_16.c":105:5)
#loc115 = loc("CWE190_Integer_Overflow__int_fgets_postinc_16.c":105:9)
#loc116 = loc("CWE190_Integer_Overflow__int_fgets_postinc_16.c":107:12)
#loc117 = loc("CWE190_Integer_Overflow__int_fgets_postinc_16.c":107:5)
#loc118 = loc("CWE190_Integer_Overflow__int_fgets_postinc_16.c":108:5)
#loc119 = loc("CWE190_Integer_Overflow__int_fgets_postinc_16.c":113:5)
#loc120 = loc("CWE190_Integer_Overflow__int_fgets_postinc_16.c":108:11)
#loc121 = loc("CWE190_Integer_Overflow__int_fgets_postinc_16.c":109:5)
#loc122 = loc("CWE190_Integer_Overflow__int_fgets_postinc_16.c":111:16)
#loc123 = loc("CWE190_Integer_Overflow__int_fgets_postinc_16.c":111:9)
#loc124 = loc("CWE190_Integer_Overflow__int_fgets_postinc_16.c":112:9)
#loc125 = loc("CWE190_Integer_Overflow__int_fgets_postinc_16.c":114:5)
#loc126 = loc("CWE190_Integer_Overflow__int_fgets_postinc_16.c":123:5)
#loc127 = loc("CWE190_Integer_Overflow__int_fgets_postinc_16.c":114:11)
#loc128 = loc("CWE190_Integer_Overflow__int_fgets_postinc_16.c":115:5)
#loc129 = loc("CWE190_Integer_Overflow__int_fgets_postinc_16.c":116:9)
#loc130 = loc("CWE190_Integer_Overflow__int_fgets_postinc_16.c":121:9)
#loc131 = loc("CWE190_Integer_Overflow__int_fgets_postinc_16.c":119:13)
#loc132 = loc("CWE190_Integer_Overflow__int_fgets_postinc_16.c":119:26)
#loc133 = loc("CWE190_Integer_Overflow__int_fgets_postinc_16.c":118:17)
#loc134 = loc("CWE190_Integer_Overflow__int_fgets_postinc_16.c":118:13)
#loc135 = loc("CWE190_Integer_Overflow__int_fgets_postinc_16.c":120:26)
#loc136 = loc("CWE190_Integer_Overflow__int_fgets_postinc_16.c":120:13)
#loc137 = loc("CWE190_Integer_Overflow__int_fgets_postinc_16.c":122:9)
#loc138 = loc(fused[#loc1, #loc2])
#loc139 = loc(fused[#loc3, #loc4])
#loc140 = loc(fused[#loc5, #loc6])
#loc141 = loc(fused[#loc7, #loc8])
#loc142 = loc(fused[#loc10, #loc11])
#loc143 = loc(fused[#loc12, #loc13])
#loc144 = loc(fused[#loc14, #loc15])
#loc145 = loc(fused[#loc17, #loc16])
#loc146 = loc(fused[#loc18, #loc19])
#loc147 = loc(fused[#loc21, #loc19])
#loc148 = loc(fused[#loc22, #loc23])
#loc149 = loc(fused[#loc24, #loc25])
#loc150 = loc(fused[#loc26, #loc27])
#loc151 = loc(fused[#loc31, #loc32])
#loc152 = loc(fused[#loc33, #loc34, #loc35, #loc27])
#loc153 = loc(fused[#loc38, #loc39])
#loc154 = loc(fused[#loc42, #loc43])
#loc155 = loc(fused[#loc45, #loc43])
#loc156 = loc(fused[#loc46, #loc47])
#loc157 = loc(fused[#loc48, #loc49])
#loc158 = loc(fused[#loc51, #loc50])
#loc159 = loc(fused[#loc55, #loc56])
#loc160 = loc(fused[#loc57, #loc58])
#loc161 = loc(fused[#loc59, #loc60])
#loc162 = loc(fused[#loc62, #loc63])
#loc163 = loc(fused[#loc64, #loc65])
#loc164 = loc(fused[#loc67, #loc66])
#loc165 = loc(fused[#loc68, #loc69])
#loc166 = loc(fused[#loc71, #loc69])
#loc167 = loc(fused[#loc72, #loc73])
#loc168 = loc(fused[#loc74, #loc75])
#loc169 = loc(fused[#loc76, #loc77])
#loc170 = loc(fused[#loc81, #loc82])
#loc171 = loc(fused[#loc83, #loc84, #loc85, #loc77])
#loc172 = loc(fused[#loc88, #loc89])
#loc173 = loc(fused[#loc93, #loc94])
#loc174 = loc(fused[#loc96, #loc94])
#loc175 = loc(fused[#loc97, #loc98])
#loc176 = loc(fused[#loc99, #loc100])
#loc177 = loc(fused[#loc101, #loc102, #loc103, #loc98])
#loc178 = loc(fused[#loc104, #loc105])
#loc179 = loc(fused[#loc107, #loc106])
#loc180 = loc(fused[#loc112, #loc113])
#loc181 = loc(fused[#loc114, #loc115])
#loc182 = loc(fused[#loc117, #loc116])
#loc183 = loc(fused[#loc118, #loc119])
#loc184 = loc(fused[#loc121, #loc119])
#loc185 = loc(fused[#loc123, #loc122])
#loc186 = loc(fused[#loc125, #loc126])
#loc187 = loc(fused[#loc128, #loc126])
#loc188 = loc(fused[#loc129, #loc130])
#loc189 = loc(fused[#loc131, #loc132])
#loc190 = loc(fused[#loc134, #loc133])
