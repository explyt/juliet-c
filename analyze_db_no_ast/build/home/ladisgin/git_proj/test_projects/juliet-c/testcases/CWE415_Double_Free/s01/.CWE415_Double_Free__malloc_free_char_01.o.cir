!s32i = !cir.int<s, 32>
!s8i = !cir.int<s, 8>
!u64i = !cir.int<u, 64>
!void = !cir.void
#fn_attr = #cir<extra({nothrow = #cir.nothrow})>
#fn_attr1 = #cir<extra({inline = #cir.inline<no>, nothrow = #cir.nothrow, optnone = #cir.optnone})>
module @"/home/ladisgin/git_proj/test_projects/juliet-c/testcases/CWE415_Double_Free/s01/CWE415_Double_Free__malloc_free_char_01.c" attributes {cir.lang = #cir.lang<c>, cir.sob = #cir.signed_overflow_behavior<undefined>, cir.triple = "x86_64-unknown-linux-gnu", dlti.dl_spec = #dlti.dl_spec<#dlti.dl_entry<!llvm.ptr<272>, dense<64> : vector<4xi64>>, #dlti.dl_entry<!llvm.ptr<271>, dense<32> : vector<4xi64>>, #dlti.dl_entry<!llvm.ptr<270>, dense<32> : vector<4xi64>>, #dlti.dl_entry<f16, dense<16> : vector<2xi64>>, #dlti.dl_entry<i128, dense<128> : vector<2xi64>>, #dlti.dl_entry<f64, dense<64> : vector<2xi64>>, #dlti.dl_entry<f128, dense<128> : vector<2xi64>>, #dlti.dl_entry<i64, dense<64> : vector<2xi64>>, #dlti.dl_entry<i8, dense<8> : vector<2xi64>>, #dlti.dl_entry<i16, dense<16> : vector<2xi64>>, #dlti.dl_entry<i32, dense<32> : vector<2xi64>>, #dlti.dl_entry<f80, dense<128> : vector<2xi64>>, #dlti.dl_entry<!llvm.ptr, dense<64> : vector<4xi64>>, #dlti.dl_entry<i1, dense<8> : vector<2xi64>>, #dlti.dl_entry<"dlti.endianness", "little">, #dlti.dl_entry<"dlti.stack_alignment", 128 : i64>>, llvm.data_layout = "e-m:e-p270:32:32-p271:32:32-p272:64:64-i64:64-i128:128-f80:128-n8:16:32:64-S128"} {
  cir.func private  @malloc(!u64i) -> !cir.ptr<!void> extra(#fn_attr) loc(#loc84)
  cir.func private  @exit(!s32i) extra(#fn_attr) loc(#loc85)
  cir.func private  @free(!cir.ptr<!void>) extra(#fn_attr) loc(#loc86)
  cir.func no_proto  @CWE415_Double_Free__malloc_free_char_01_bad() extra(#fn_attr1) {
    %0 = cir.alloca !cir.ptr<!s8i>, !cir.ptr<!cir.ptr<!s8i>>, ["data"] {alignment = 8 : i64} loc(#loc88)
    %1 = cir.const #cir.ptr<null> : !cir.ptr<!s8i> loc(#loc11)
    cir.store %1, %0 : !cir.ptr<!s8i>, !cir.ptr<!cir.ptr<!s8i>> loc(#loc89)
    %2 = cir.get_global @malloc : !cir.ptr<!cir.func<!cir.ptr<!void> (!u64i)>> loc(#loc13)
    %3 = cir.const #cir.int<100> : !s32i loc(#loc14)
    %4 = cir.cast(integral, %3 : !s32i), !u64i loc(#loc14)
    %5 = cir.const #cir.int<1> : !u64i loc(#loc90)
    %6 = cir.binop(mul, %4, %5) : !u64i loc(#loc91)
    %7 = cir.call @malloc(%6) : (!u64i) -> !cir.ptr<!void> extra(#fn_attr) loc(#loc13)
    %8 = cir.cast(bitcast, %7 : !cir.ptr<!void>), !cir.ptr<!s8i> loc(#loc92)
    cir.store %8, %0 : !cir.ptr<!s8i>, !cir.ptr<!cir.ptr<!s8i>> loc(#loc93)
    cir.scope {
      %15 = cir.load %0 : !cir.ptr<!cir.ptr<!s8i>>, !cir.ptr<!s8i> loc(#loc21)
      %16 = cir.const #cir.ptr<null> : !cir.ptr<!void> loc(#loc22)
      %17 = cir.cast(bitcast, %16 : !cir.ptr<!void>), !cir.ptr<!s8i> loc(#loc22)
      %18 = cir.cmp(eq, %15, %17) : !cir.ptr<!s8i>, !s32i loc(#loc95)
      %19 = cir.cast(int_to_bool, %18 : !s32i), !cir.bool loc(#loc23)
      cir.if %19 {
        %20 = cir.get_global @exit : !cir.ptr<!cir.func<!void (!s32i)>> loc(#loc25)
        %21 = cir.const #cir.int<1> : !s32i loc(#loc26)
        %22 = cir.unary(minus, %21) : !s32i, !s32i loc(#loc27)
        cir.call @exit(%22) : (!s32i) -> () extra(#fn_attr) loc(#loc25)
      } loc(#loc96)
    } loc(#loc94)
    %9 = cir.get_global @free : !cir.ptr<!cir.func<!void (!cir.ptr<!void>)>> loc(#loc28)
    %10 = cir.load %0 : !cir.ptr<!cir.ptr<!s8i>>, !cir.ptr<!s8i> loc(#loc29)
    %11 = cir.cast(bitcast, %10 : !cir.ptr<!s8i>), !cir.ptr<!void> loc(#loc29)
    cir.call @free(%11) : (!cir.ptr<!void>) -> () extra(#fn_attr) loc(#loc28)
    %12 = cir.get_global @free : !cir.ptr<!cir.func<!void (!cir.ptr<!void>)>> loc(#loc30)
    %13 = cir.load %0 : !cir.ptr<!cir.ptr<!s8i>>, !cir.ptr<!s8i> loc(#loc31)
    %14 = cir.cast(bitcast, %13 : !cir.ptr<!s8i>), !cir.ptr<!void> loc(#loc31)
    cir.call @free(%14) : (!cir.ptr<!void>) -> () extra(#fn_attr) loc(#loc30)
    cir.return loc(#loc8)
  } loc(#loc87)
  cir.func no_proto  @CWE415_Double_Free__malloc_free_char_01_good() extra(#fn_attr1) {
    %0 = cir.get_global @goodG2B : !cir.ptr<!cir.func<!void ()>> loc(#loc98)
    cir.call %0() : (!cir.ptr<!cir.func<!void ()>>) -> () loc(#loc34)
    %1 = cir.get_global @goodB2G : !cir.ptr<!cir.func<!void ()>> loc(#loc99)
    cir.call %1() : (!cir.ptr<!cir.func<!void ()>>) -> () loc(#loc36)
    cir.return loc(#loc33)
  } loc(#loc97)
  cir.func no_proto internal private  @goodG2B() extra(#fn_attr1) {
    %0 = cir.alloca !cir.ptr<!s8i>, !cir.ptr<!cir.ptr<!s8i>>, ["data"] {alignment = 8 : i64} loc(#loc101)
    %1 = cir.const #cir.ptr<null> : !cir.ptr<!s8i> loc(#loc42)
    cir.store %1, %0 : !cir.ptr<!s8i>, !cir.ptr<!cir.ptr<!s8i>> loc(#loc102)
    %2 = cir.get_global @malloc : !cir.ptr<!cir.func<!cir.ptr<!void> (!u64i)>> loc(#loc44)
    %3 = cir.const #cir.int<100> : !s32i loc(#loc45)
    %4 = cir.cast(integral, %3 : !s32i), !u64i loc(#loc45)
    %5 = cir.const #cir.int<1> : !u64i loc(#loc103)
    %6 = cir.binop(mul, %4, %5) : !u64i loc(#loc104)
    %7 = cir.call @malloc(%6) : (!u64i) -> !cir.ptr<!void> extra(#fn_attr) loc(#loc44)
    %8 = cir.cast(bitcast, %7 : !cir.ptr<!void>), !cir.ptr<!s8i> loc(#loc105)
    cir.store %8, %0 : !cir.ptr<!s8i>, !cir.ptr<!cir.ptr<!s8i>> loc(#loc106)
    cir.scope {
      %12 = cir.load %0 : !cir.ptr<!cir.ptr<!s8i>>, !cir.ptr<!s8i> loc(#loc52)
      %13 = cir.const #cir.ptr<null> : !cir.ptr<!void> loc(#loc53)
      %14 = cir.cast(bitcast, %13 : !cir.ptr<!void>), !cir.ptr<!s8i> loc(#loc53)
      %15 = cir.cmp(eq, %12, %14) : !cir.ptr<!s8i>, !s32i loc(#loc108)
      %16 = cir.cast(int_to_bool, %15 : !s32i), !cir.bool loc(#loc54)
      cir.if %16 {
        %17 = cir.get_global @exit : !cir.ptr<!cir.func<!void (!s32i)>> loc(#loc56)
        %18 = cir.const #cir.int<1> : !s32i loc(#loc57)
        %19 = cir.unary(minus, %18) : !s32i, !s32i loc(#loc58)
        cir.call @exit(%19) : (!s32i) -> () extra(#fn_attr) loc(#loc56)
      } loc(#loc109)
    } loc(#loc107)
    %9 = cir.get_global @free : !cir.ptr<!cir.func<!void (!cir.ptr<!void>)>> loc(#loc59)
    %10 = cir.load %0 : !cir.ptr<!cir.ptr<!s8i>>, !cir.ptr<!s8i> loc(#loc60)
    %11 = cir.cast(bitcast, %10 : !cir.ptr<!s8i>), !cir.ptr<!void> loc(#loc60)
    cir.call @free(%11) : (!cir.ptr<!void>) -> () extra(#fn_attr) loc(#loc59)
    cir.return loc(#loc39)
  } loc(#loc100)
  cir.func no_proto internal private  @goodB2G() extra(#fn_attr1) {
    %0 = cir.alloca !cir.ptr<!s8i>, !cir.ptr<!cir.ptr<!s8i>>, ["data"] {alignment = 8 : i64} loc(#loc111)
    %1 = cir.const #cir.ptr<null> : !cir.ptr<!s8i> loc(#loc65)
    cir.store %1, %0 : !cir.ptr<!s8i>, !cir.ptr<!cir.ptr<!s8i>> loc(#loc112)
    %2 = cir.get_global @malloc : !cir.ptr<!cir.func<!cir.ptr<!void> (!u64i)>> loc(#loc67)
    %3 = cir.const #cir.int<100> : !s32i loc(#loc68)
    %4 = cir.cast(integral, %3 : !s32i), !u64i loc(#loc68)
    %5 = cir.const #cir.int<1> : !u64i loc(#loc113)
    %6 = cir.binop(mul, %4, %5) : !u64i loc(#loc114)
    %7 = cir.call @malloc(%6) : (!u64i) -> !cir.ptr<!void> extra(#fn_attr) loc(#loc67)
    %8 = cir.cast(bitcast, %7 : !cir.ptr<!void>), !cir.ptr<!s8i> loc(#loc115)
    cir.store %8, %0 : !cir.ptr<!s8i>, !cir.ptr<!cir.ptr<!s8i>> loc(#loc116)
    cir.scope {
      %12 = cir.load %0 : !cir.ptr<!cir.ptr<!s8i>>, !cir.ptr<!s8i> loc(#loc75)
      %13 = cir.const #cir.ptr<null> : !cir.ptr<!void> loc(#loc76)
      %14 = cir.cast(bitcast, %13 : !cir.ptr<!void>), !cir.ptr<!s8i> loc(#loc76)
      %15 = cir.cmp(eq, %12, %14) : !cir.ptr<!s8i>, !s32i loc(#loc118)
      %16 = cir.cast(int_to_bool, %15 : !s32i), !cir.bool loc(#loc77)
      cir.if %16 {
        %17 = cir.get_global @exit : !cir.ptr<!cir.func<!void (!s32i)>> loc(#loc79)
        %18 = cir.const #cir.int<1> : !s32i loc(#loc80)
        %19 = cir.unary(minus, %18) : !s32i, !s32i loc(#loc81)
        cir.call @exit(%19) : (!s32i) -> () extra(#fn_attr) loc(#loc79)
      } loc(#loc119)
    } loc(#loc117)
    %9 = cir.get_global @free : !cir.ptr<!cir.func<!void (!cir.ptr<!void>)>> loc(#loc82)
    %10 = cir.load %0 : !cir.ptr<!cir.ptr<!s8i>>, !cir.ptr<!s8i> loc(#loc83)
    %11 = cir.cast(bitcast, %10 : !cir.ptr<!s8i>), !cir.ptr<!void> loc(#loc83)
    cir.call @free(%11) : (!cir.ptr<!void>) -> () extra(#fn_attr) loc(#loc82)
    cir.return loc(#loc62)
  } loc(#loc110)
} loc(#loc)
#loc = loc("/home/ladisgin/git_proj/test_projects/juliet-c/testcases/CWE415_Double_Free/s01/CWE415_Double_Free__malloc_free_char_01.c":0:0)
#loc1 = loc("/usr/include/stdlib.h":672:1)
#loc2 = loc("/usr/include/stdlib.h":672:45)
#loc3 = loc("/usr/include/stdlib.h":756:1)
#loc4 = loc("/usr/include/stdlib.h":756:70)
#loc5 = loc("/usr/include/stdlib.h":687:1)
#loc6 = loc("/usr/include/stdlib.h":687:32)
#loc7 = loc("CWE415_Double_Free__malloc_free_char_01.c":24:1)
#loc8 = loc("CWE415_Double_Free__malloc_free_char_01.c":35:1)
#loc9 = loc("CWE415_Double_Free__malloc_free_char_01.c":26:5)
#loc10 = loc("CWE415_Double_Free__malloc_free_char_01.c":26:12)
#loc11 = loc("CWE415_Double_Free__malloc_free_char_01.c":28:12)
#loc12 = loc("CWE415_Double_Free__malloc_free_char_01.c":28:5)
#loc13 = loc("CWE415_Double_Free__malloc_free_char_01.c":29:20)
#loc14 = loc("CWE415_Double_Free__malloc_free_char_01.c":29:27)
#loc15 = loc("CWE415_Double_Free__malloc_free_char_01.c":29:31)
#loc16 = loc("CWE415_Double_Free__malloc_free_char_01.c":29:42)
#loc17 = loc("CWE415_Double_Free__malloc_free_char_01.c":29:43)
#loc18 = loc("CWE415_Double_Free__malloc_free_char_01.c":29:5)
#loc19 = loc("CWE415_Double_Free__malloc_free_char_01.c":30:5)
#loc20 = loc("CWE415_Double_Free__malloc_free_char_01.c":30:33)
#loc21 = loc("CWE415_Double_Free__malloc_free_char_01.c":30:9)
#loc22 = loc("CWE415_Double_Free__malloc_free_char_01.c":30:17)
#loc23 = loc("CWE415_Double_Free__malloc_free_char_01.c":30:14)
#loc24 = loc("CWE415_Double_Free__malloc_free_char_01.c":30:23)
#loc25 = loc("CWE415_Double_Free__malloc_free_char_01.c":30:24)
#loc26 = loc("CWE415_Double_Free__malloc_free_char_01.c":30:30)
#loc27 = loc("CWE415_Double_Free__malloc_free_char_01.c":30:29)
#loc28 = loc("CWE415_Double_Free__malloc_free_char_01.c":32:5)
#loc29 = loc("CWE415_Double_Free__malloc_free_char_01.c":32:10)
#loc30 = loc("CWE415_Double_Free__malloc_free_char_01.c":34:5)
#loc31 = loc("CWE415_Double_Free__malloc_free_char_01.c":34:10)
#loc32 = loc("CWE415_Double_Free__malloc_free_char_01.c":69:1)
#loc33 = loc("CWE415_Double_Free__malloc_free_char_01.c":73:1)
#loc34 = loc("CWE415_Double_Free__malloc_free_char_01.c":71:5)
#loc35 = loc("CWE415_Double_Free__malloc_free_char_01.c":71:13)
#loc36 = loc("CWE415_Double_Free__malloc_free_char_01.c":72:5)
#loc37 = loc("CWE415_Double_Free__malloc_free_char_01.c":72:13)
#loc38 = loc("CWE415_Double_Free__malloc_free_char_01.c":42:1)
#loc39 = loc("CWE415_Double_Free__malloc_free_char_01.c":52:1)
#loc40 = loc("CWE415_Double_Free__malloc_free_char_01.c":44:5)
#loc41 = loc("CWE415_Double_Free__malloc_free_char_01.c":44:12)
#loc42 = loc("CWE415_Double_Free__malloc_free_char_01.c":46:12)
#loc43 = loc("CWE415_Double_Free__malloc_free_char_01.c":46:5)
#loc44 = loc("CWE415_Double_Free__malloc_free_char_01.c":47:20)
#loc45 = loc("CWE415_Double_Free__malloc_free_char_01.c":47:27)
#loc46 = loc("CWE415_Double_Free__malloc_free_char_01.c":47:31)
#loc47 = loc("CWE415_Double_Free__malloc_free_char_01.c":47:42)
#loc48 = loc("CWE415_Double_Free__malloc_free_char_01.c":47:43)
#loc49 = loc("CWE415_Double_Free__malloc_free_char_01.c":47:5)
#loc50 = loc("CWE415_Double_Free__malloc_free_char_01.c":48:5)
#loc51 = loc("CWE415_Double_Free__malloc_free_char_01.c":48:33)
#loc52 = loc("CWE415_Double_Free__malloc_free_char_01.c":48:9)
#loc53 = loc("CWE415_Double_Free__malloc_free_char_01.c":48:17)
#loc54 = loc("CWE415_Double_Free__malloc_free_char_01.c":48:14)
#loc55 = loc("CWE415_Double_Free__malloc_free_char_01.c":48:23)
#loc56 = loc("CWE415_Double_Free__malloc_free_char_01.c":48:24)
#loc57 = loc("CWE415_Double_Free__malloc_free_char_01.c":48:30)
#loc58 = loc("CWE415_Double_Free__malloc_free_char_01.c":48:29)
#loc59 = loc("CWE415_Double_Free__malloc_free_char_01.c":51:5)
#loc60 = loc("CWE415_Double_Free__malloc_free_char_01.c":51:10)
#loc61 = loc("CWE415_Double_Free__malloc_free_char_01.c":55:1)
#loc62 = loc("CWE415_Double_Free__malloc_free_char_01.c":67:1)
#loc63 = loc("CWE415_Double_Free__malloc_free_char_01.c":57:5)
#loc64 = loc("CWE415_Double_Free__malloc_free_char_01.c":57:12)
#loc65 = loc("CWE415_Double_Free__malloc_free_char_01.c":59:12)
#loc66 = loc("CWE415_Double_Free__malloc_free_char_01.c":59:5)
#loc67 = loc("CWE415_Double_Free__malloc_free_char_01.c":60:20)
#loc68 = loc("CWE415_Double_Free__malloc_free_char_01.c":60:27)
#loc69 = loc("CWE415_Double_Free__malloc_free_char_01.c":60:31)
#loc70 = loc("CWE415_Double_Free__malloc_free_char_01.c":60:42)
#loc71 = loc("CWE415_Double_Free__malloc_free_char_01.c":60:43)
#loc72 = loc("CWE415_Double_Free__malloc_free_char_01.c":60:5)
#loc73 = loc("CWE415_Double_Free__malloc_free_char_01.c":61:5)
#loc74 = loc("CWE415_Double_Free__malloc_free_char_01.c":61:33)
#loc75 = loc("CWE415_Double_Free__malloc_free_char_01.c":61:9)
#loc76 = loc("CWE415_Double_Free__malloc_free_char_01.c":61:17)
#loc77 = loc("CWE415_Double_Free__malloc_free_char_01.c":61:14)
#loc78 = loc("CWE415_Double_Free__malloc_free_char_01.c":61:23)
#loc79 = loc("CWE415_Double_Free__malloc_free_char_01.c":61:24)
#loc80 = loc("CWE415_Double_Free__malloc_free_char_01.c":61:30)
#loc81 = loc("CWE415_Double_Free__malloc_free_char_01.c":61:29)
#loc82 = loc("CWE415_Double_Free__malloc_free_char_01.c":63:5)
#loc83 = loc("CWE415_Double_Free__malloc_free_char_01.c":63:10)
#loc84 = loc(fused[#loc1, #loc2])
#loc85 = loc(fused[#loc3, #loc4])
#loc86 = loc(fused[#loc5, #loc6])
#loc87 = loc(fused[#loc7, #loc8])
#loc88 = loc(fused[#loc9, #loc10])
#loc89 = loc(fused[#loc12, #loc11])
#loc90 = loc(fused[#loc15, #loc16])
#loc91 = loc(fused[#loc14, #loc16])
#loc92 = loc(fused[#loc13, #loc17])
#loc93 = loc(fused[#loc18, #loc17])
#loc94 = loc(fused[#loc19, #loc20])
#loc95 = loc(fused[#loc21, #loc22])
#loc96 = loc(fused[#loc24, #loc20])
#loc97 = loc(fused[#loc32, #loc33])
#loc98 = loc(fused[#loc34, #loc35])
#loc99 = loc(fused[#loc36, #loc37])
#loc100 = loc(fused[#loc38, #loc39])
#loc101 = loc(fused[#loc40, #loc41])
#loc102 = loc(fused[#loc43, #loc42])
#loc103 = loc(fused[#loc46, #loc47])
#loc104 = loc(fused[#loc45, #loc47])
#loc105 = loc(fused[#loc44, #loc48])
#loc106 = loc(fused[#loc49, #loc48])
#loc107 = loc(fused[#loc50, #loc51])
#loc108 = loc(fused[#loc52, #loc53])
#loc109 = loc(fused[#loc55, #loc51])
#loc110 = loc(fused[#loc61, #loc62])
#loc111 = loc(fused[#loc63, #loc64])
#loc112 = loc(fused[#loc66, #loc65])
#loc113 = loc(fused[#loc69, #loc70])
#loc114 = loc(fused[#loc68, #loc70])
#loc115 = loc(fused[#loc67, #loc71])
#loc116 = loc(fused[#loc72, #loc71])
#loc117 = loc(fused[#loc73, #loc74])
#loc118 = loc(fused[#loc75, #loc76])
#loc119 = loc(fused[#loc78, #loc74])
