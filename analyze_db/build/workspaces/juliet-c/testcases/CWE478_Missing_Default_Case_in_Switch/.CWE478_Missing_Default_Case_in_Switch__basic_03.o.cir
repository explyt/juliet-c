!s32i = !cir.int<s, 32>
!s8i = !cir.int<s, 8>
#fn_attr = #cir<extra({nothrow = #cir.nothrow})>
#fn_attr1 = #cir<extra({inline = #cir.inline<no>, nothrow = #cir.nothrow, optnone = #cir.optnone, uwtable = #cir.uwtable<async>})>
module @"/workspaces/juliet-c/testcases/CWE478_Missing_Default_Case_in_Switch/CWE478_Missing_Default_Case_in_Switch__basic_03.c" attributes {cir.lang = #cir.lang<c>, cir.sob = #cir.signed_overflow_behavior<undefined>, cir.triple = "x86_64-unknown-linux-gnu", cir.type_size_info = #cir.type_size_info<char = 8, int = 32, size_t = 64>, cir.uwtable = #cir.uwtable<async>, dlti.dl_spec = #dlti.dl_spec<f80 = dense<128> : vector<2xi64>, i128 = dense<128> : vector<2xi64>, i64 = dense<64> : vector<2xi64>, !llvm.ptr<272> = dense<64> : vector<4xi64>, !llvm.ptr<271> = dense<32> : vector<4xi64>, f16 = dense<16> : vector<2xi64>, f128 = dense<128> : vector<2xi64>, f64 = dense<64> : vector<2xi64>, !llvm.ptr<270> = dense<32> : vector<4xi64>, i32 = dense<32> : vector<2xi64>, i8 = dense<8> : vector<2xi64>, i16 = dense<16> : vector<2xi64>, !llvm.ptr = dense<64> : vector<4xi64>, i1 = dense<8> : vector<2xi64>, "dlti.stack_alignment" = 128 : i64, "dlti.endianness" = "little", "dlti.mangling_mode" = "e">} {
  cir.global "private" constant cir_private dsolocal @".str" = #cir.const_array<"shouldn't see this value\00" : !cir.array<!s8i x 25>> : !cir.array<!s8i x 25> {alignment = 1 : i64} loc(#loc1)
  cir.func private @rand() -> !s32i extra(#fn_attr) loc(#loc109)
  cir.global "private" constant cir_private dsolocal @".str.1" = #cir.const_array<"0\00" : !cir.array<!s8i x 2>> : !cir.array<!s8i x 2> {alignment = 1 : i64} loc(#loc4)
  cir.global "private" constant cir_private dsolocal @".str.2" = #cir.const_array<"1\00" : !cir.array<!s8i x 2>> : !cir.array<!s8i x 2> {alignment = 1 : i64} loc(#loc5)
  cir.func private @printLine(!cir.ptr<!s8i>) loc(#loc110)
  cir.func no_proto @CWE478_Missing_Default_Case_in_Switch__basic_03_bad() extra(#fn_attr1) {
    cir.scope {
      %0 = cir.const #cir.int<5> : !s32i loc(#loc12)
      %1 = cir.const #cir.int<5> : !s32i loc(#loc13)
      %2 = cir.cmp(eq, %0, %1) : !s32i, !cir.bool loc(#loc113)
      cir.if %2 {
        cir.scope {
          %3 = cir.alloca !cir.ptr<!s8i>, !cir.ptr<!cir.ptr<!s8i>>, ["charString", init] {alignment = 8 : i64} loc(#loc116)
          %4 = cir.alloca !s32i, !cir.ptr<!s32i>, ["x"] {alignment = 4 : i64} loc(#loc117)
          %5 = cir.get_global @".str" : !cir.ptr<!cir.array<!s8i x 25>> loc(#loc1)
          %6 = cir.cast(array_to_ptrdecay, %5 : !cir.ptr<!cir.array<!s8i x 25>>), !cir.ptr<!s8i> loc(#loc1)
          cir.store %6, %3 : !cir.ptr<!s8i>, !cir.ptr<!cir.ptr<!s8i>> loc(#loc116)
          %7 = cir.call @rand() : () -> !s32i extra(#fn_attr) loc(#loc20)
          %8 = cir.const #cir.int<3> : !s32i loc(#loc21)
          %9 = cir.binop(rem, %7, %8) : !s32i loc(#loc118)
          cir.store %9, %4 : !s32i, !cir.ptr<!s32i> loc(#loc119)
          cir.scope {
            %11 = cir.load %4 : !cir.ptr<!s32i>, !s32i loc(#loc26)
            cir.switch (%11 : !s32i) {
              cir.case(equal, [#cir.int<0> : !s32i]) {
                %12 = cir.get_global @".str.1" : !cir.ptr<!cir.array<!s8i x 2>> loc(#loc4)
                %13 = cir.cast(array_to_ptrdecay, %12 : !cir.ptr<!cir.array<!s8i x 2>>), !cir.ptr<!s8i> loc(#loc4)
                cir.store %13, %3 : !cir.ptr<!s8i>, !cir.ptr<!cir.ptr<!s8i>> loc(#loc121)
                cir.break loc(#loc29)
              } loc(#loc27)
              cir.case(equal, [#cir.int<1> : !s32i]) {
                %12 = cir.get_global @".str.2" : !cir.ptr<!cir.array<!s8i x 2>> loc(#loc5)
                %13 = cir.cast(array_to_ptrdecay, %12 : !cir.ptr<!cir.array<!s8i x 2>>), !cir.ptr<!s8i> loc(#loc5)
                cir.store %13, %3 : !cir.ptr<!s8i>, !cir.ptr<!cir.ptr<!s8i>> loc(#loc122)
                cir.break loc(#loc32)
              } loc(#loc30)
              cir.yield loc(#loc24)
            } loc(#loc24)
          } loc(#loc120)
          %10 = cir.load %3 : !cir.ptr<!cir.ptr<!s8i>>, !cir.ptr<!s8i> loc(#loc33)
          cir.call @printLine(%10) : (!cir.ptr<!s8i>) -> () loc(#loc34)
        } loc(#loc115)
      } loc(#loc114)
    } loc(#loc112)
    cir.return loc(#loc9)
  } loc(#loc111)
  cir.func no_proto @CWE478_Missing_Default_Case_in_Switch__basic_03_good() extra(#fn_attr1) {
    %0 = cir.get_global @good1 : !cir.ptr<!cir.func<()>> loc(#loc124)
    cir.call %0() : (!cir.ptr<!cir.func<()>>) -> () loc(#loc37)
    %1 = cir.get_global @good2 : !cir.ptr<!cir.func<()>> loc(#loc125)
    cir.call %1() : (!cir.ptr<!cir.func<()>>) -> () loc(#loc39)
    cir.return loc(#loc36)
  } loc(#loc123)
  cir.global "private" constant cir_private dsolocal @".str.3" = #cir.const_array<"Benign, fixed string\00" : !cir.array<!s8i x 21>> : !cir.array<!s8i x 21> {alignment = 1 : i64} loc(#loc41)
  cir.func no_proto internal private @good1() extra(#fn_attr1) {
    cir.scope {
      %0 = cir.const #cir.int<5> : !s32i loc(#loc46)
      %1 = cir.const #cir.int<5> : !s32i loc(#loc47)
      %2 = cir.cmp(ne, %0, %1) : !s32i, !cir.bool loc(#loc128)
      cir.if %2 {
        %3 = cir.get_global @".str.3" : !cir.ptr<!cir.array<!s8i x 21>> loc(#loc41)
        %4 = cir.cast(array_to_ptrdecay, %3 : !cir.ptr<!cir.array<!s8i x 21>>), !cir.ptr<!s8i> loc(#loc41)
        cir.call @printLine(%4) : (!cir.ptr<!s8i>) -> () loc(#loc51)
      } else {
        cir.scope {
          %3 = cir.alloca !cir.ptr<!s8i>, !cir.ptr<!cir.ptr<!s8i>>, ["charString", init] {alignment = 8 : i64} loc(#loc131)
          %4 = cir.alloca !s32i, !cir.ptr<!s32i>, ["x"] {alignment = 4 : i64} loc(#loc132)
          %5 = cir.get_global @".str" : !cir.ptr<!cir.array<!s8i x 25>> loc(#loc55)
          %6 = cir.cast(array_to_ptrdecay, %5 : !cir.ptr<!cir.array<!s8i x 25>>), !cir.ptr<!s8i> loc(#loc55)
          cir.store %6, %3 : !cir.ptr<!s8i>, !cir.ptr<!cir.ptr<!s8i>> loc(#loc131)
          %7 = cir.call @rand() : () -> !s32i extra(#fn_attr) loc(#loc58)
          %8 = cir.const #cir.int<3> : !s32i loc(#loc59)
          %9 = cir.binop(rem, %7, %8) : !s32i loc(#loc133)
          cir.store %9, %4 : !s32i, !cir.ptr<!s32i> loc(#loc134)
          cir.scope {
            %11 = cir.load %4 : !cir.ptr<!s32i>, !s32i loc(#loc64)
            cir.switch (%11 : !s32i) {
              cir.case(equal, [#cir.int<0> : !s32i]) {
                %12 = cir.get_global @".str.1" : !cir.ptr<!cir.array<!s8i x 2>> loc(#loc66)
                %13 = cir.cast(array_to_ptrdecay, %12 : !cir.ptr<!cir.array<!s8i x 2>>), !cir.ptr<!s8i> loc(#loc66)
                cir.store %13, %3 : !cir.ptr<!s8i>, !cir.ptr<!cir.ptr<!s8i>> loc(#loc136)
                cir.break loc(#loc68)
              } loc(#loc65)
              cir.case(equal, [#cir.int<1> : !s32i]) {
                %12 = cir.get_global @".str.2" : !cir.ptr<!cir.array<!s8i x 2>> loc(#loc70)
                %13 = cir.cast(array_to_ptrdecay, %12 : !cir.ptr<!cir.array<!s8i x 2>>), !cir.ptr<!s8i> loc(#loc70)
                cir.store %13, %3 : !cir.ptr<!s8i>, !cir.ptr<!cir.ptr<!s8i>> loc(#loc137)
                cir.break loc(#loc72)
              } loc(#loc69)
              cir.case(default, []) {
                cir.return loc(#loc74)
              } loc(#loc73)
              cir.yield loc(#loc62)
            } loc(#loc62)
          } loc(#loc135)
          %10 = cir.load %3 : !cir.ptr<!cir.ptr<!s8i>>, !cir.ptr<!s8i> loc(#loc75)
          cir.call @printLine(%10) : (!cir.ptr<!s8i>) -> () loc(#loc76)
        } loc(#loc130)
      } loc(#loc129)
    } loc(#loc127)
    cir.return loc(#loc43)
  } loc(#loc126)
  cir.func no_proto internal private @good2() extra(#fn_attr1) {
    cir.scope {
      %0 = cir.const #cir.int<5> : !s32i loc(#loc81)
      %1 = cir.const #cir.int<5> : !s32i loc(#loc82)
      %2 = cir.cmp(eq, %0, %1) : !s32i, !cir.bool loc(#loc140)
      cir.if %2 {
        cir.scope {
          %3 = cir.alloca !cir.ptr<!s8i>, !cir.ptr<!cir.ptr<!s8i>>, ["charString", init] {alignment = 8 : i64} loc(#loc143)
          %4 = cir.alloca !s32i, !cir.ptr<!s32i>, ["x"] {alignment = 4 : i64} loc(#loc144)
          %5 = cir.get_global @".str" : !cir.ptr<!cir.array<!s8i x 25>> loc(#loc87)
          %6 = cir.cast(array_to_ptrdecay, %5 : !cir.ptr<!cir.array<!s8i x 25>>), !cir.ptr<!s8i> loc(#loc87)
          cir.store %6, %3 : !cir.ptr<!s8i>, !cir.ptr<!cir.ptr<!s8i>> loc(#loc143)
          %7 = cir.call @rand() : () -> !s32i extra(#fn_attr) loc(#loc90)
          %8 = cir.const #cir.int<3> : !s32i loc(#loc91)
          %9 = cir.binop(rem, %7, %8) : !s32i loc(#loc145)
          cir.store %9, %4 : !s32i, !cir.ptr<!s32i> loc(#loc146)
          cir.scope {
            %11 = cir.load %4 : !cir.ptr<!s32i>, !s32i loc(#loc96)
            cir.switch (%11 : !s32i) {
              cir.case(equal, [#cir.int<0> : !s32i]) {
                %12 = cir.get_global @".str.1" : !cir.ptr<!cir.array<!s8i x 2>> loc(#loc98)
                %13 = cir.cast(array_to_ptrdecay, %12 : !cir.ptr<!cir.array<!s8i x 2>>), !cir.ptr<!s8i> loc(#loc98)
                cir.store %13, %3 : !cir.ptr<!s8i>, !cir.ptr<!cir.ptr<!s8i>> loc(#loc148)
                cir.break loc(#loc100)
              } loc(#loc97)
              cir.case(equal, [#cir.int<1> : !s32i]) {
                %12 = cir.get_global @".str.2" : !cir.ptr<!cir.array<!s8i x 2>> loc(#loc102)
                %13 = cir.cast(array_to_ptrdecay, %12 : !cir.ptr<!cir.array<!s8i x 2>>), !cir.ptr<!s8i> loc(#loc102)
                cir.store %13, %3 : !cir.ptr<!s8i>, !cir.ptr<!cir.ptr<!s8i>> loc(#loc149)
                cir.break loc(#loc104)
              } loc(#loc101)
              cir.case(default, []) {
                cir.return loc(#loc106)
              } loc(#loc105)
              cir.yield loc(#loc94)
            } loc(#loc94)
          } loc(#loc147)
          %10 = cir.load %3 : !cir.ptr<!cir.ptr<!s8i>>, !cir.ptr<!s8i> loc(#loc107)
          cir.call @printLine(%10) : (!cir.ptr<!s8i>) -> () loc(#loc108)
        } loc(#loc142)
      } loc(#loc141)
    } loc(#loc139)
    cir.return loc(#loc78)
  } loc(#loc138)
} loc(#loc)
#loc = loc("/workspaces/juliet-c/testcases/CWE478_Missing_Default_Case_in_Switch/CWE478_Missing_Default_Case_in_Switch__basic_03.c":0:0)
#loc1 = loc("CWE478_Missing_Default_Case_in_Switch__basic_03.c":25:38)
#loc2 = loc("/usr/include/stdlib.h":573:1)
#loc3 = loc("/usr/include/stdlib.h":573:24)
#loc4 = loc("CWE478_Missing_Default_Case_in_Switch__basic_03.c":31:30)
#loc5 = loc("CWE478_Missing_Default_Case_in_Switch__basic_03.c":34:30)
#loc6 = loc("../../testcasesupport/std_testcase_io.h":14:1)
#loc7 = loc("../../testcasesupport/std_testcase_io.h":14:33)
#loc8 = loc("CWE478_Missing_Default_Case_in_Switch__basic_03.c":20:1)
#loc9 = loc("CWE478_Missing_Default_Case_in_Switch__basic_03.c":41:1)
#loc10 = loc("CWE478_Missing_Default_Case_in_Switch__basic_03.c":22:5)
#loc11 = loc("CWE478_Missing_Default_Case_in_Switch__basic_03.c":40:5)
#loc12 = loc("CWE478_Missing_Default_Case_in_Switch__basic_03.c":22:8)
#loc13 = loc("CWE478_Missing_Default_Case_in_Switch__basic_03.c":22:11)
#loc14 = loc("CWE478_Missing_Default_Case_in_Switch__basic_03.c":23:5)
#loc15 = loc("CWE478_Missing_Default_Case_in_Switch__basic_03.c":24:9)
#loc16 = loc("CWE478_Missing_Default_Case_in_Switch__basic_03.c":39:9)
#loc17 = loc("CWE478_Missing_Default_Case_in_Switch__basic_03.c":25:13)
#loc18 = loc("CWE478_Missing_Default_Case_in_Switch__basic_03.c":26:13)
#loc19 = loc("CWE478_Missing_Default_Case_in_Switch__basic_03.c":26:17)
#loc20 = loc("CWE478_Missing_Default_Case_in_Switch__basic_03.c":27:18)
#loc21 = loc("CWE478_Missing_Default_Case_in_Switch__basic_03.c":27:27)
#loc22 = loc("CWE478_Missing_Default_Case_in_Switch__basic_03.c":27:13)
#loc23 = loc("CWE478_Missing_Default_Case_in_Switch__basic_03.c":27:28)
#loc24 = loc("CWE478_Missing_Default_Case_in_Switch__basic_03.c":28:13)
#loc25 = loc("CWE478_Missing_Default_Case_in_Switch__basic_03.c":37:13)
#loc26 = loc("CWE478_Missing_Default_Case_in_Switch__basic_03.c":28:21)
#loc27 = loc("CWE478_Missing_Default_Case_in_Switch__basic_03.c":30:13)
#loc28 = loc("CWE478_Missing_Default_Case_in_Switch__basic_03.c":31:17)
#loc29 = loc("CWE478_Missing_Default_Case_in_Switch__basic_03.c":32:17)
#loc30 = loc("CWE478_Missing_Default_Case_in_Switch__basic_03.c":33:13)
#loc31 = loc("CWE478_Missing_Default_Case_in_Switch__basic_03.c":34:17)
#loc32 = loc("CWE478_Missing_Default_Case_in_Switch__basic_03.c":35:17)
#loc33 = loc("CWE478_Missing_Default_Case_in_Switch__basic_03.c":38:23)
#loc34 = loc("CWE478_Missing_Default_Case_in_Switch__basic_03.c":38:13)
#loc35 = loc("CWE478_Missing_Default_Case_in_Switch__basic_03.c":104:1)
#loc36 = loc("CWE478_Missing_Default_Case_in_Switch__basic_03.c":108:1)
#loc37 = loc("CWE478_Missing_Default_Case_in_Switch__basic_03.c":106:5)
#loc38 = loc("CWE478_Missing_Default_Case_in_Switch__basic_03.c":106:11)
#loc39 = loc("CWE478_Missing_Default_Case_in_Switch__basic_03.c":107:5)
#loc40 = loc("CWE478_Missing_Default_Case_in_Switch__basic_03.c":107:11)
#loc41 = loc("CWE478_Missing_Default_Case_in_Switch__basic_03.c":53:19)
#loc42 = loc("CWE478_Missing_Default_Case_in_Switch__basic_03.c":48:1)
#loc43 = loc("CWE478_Missing_Default_Case_in_Switch__basic_03.c":76:1)
#loc44 = loc("CWE478_Missing_Default_Case_in_Switch__basic_03.c":50:5)
#loc45 = loc("CWE478_Missing_Default_Case_in_Switch__basic_03.c":75:5)
#loc46 = loc("CWE478_Missing_Default_Case_in_Switch__basic_03.c":50:8)
#loc47 = loc("CWE478_Missing_Default_Case_in_Switch__basic_03.c":50:11)
#loc48 = loc("CWE478_Missing_Default_Case_in_Switch__basic_03.c":51:5)
#loc49 = loc("CWE478_Missing_Default_Case_in_Switch__basic_03.c":54:5)
#loc50 = loc("CWE478_Missing_Default_Case_in_Switch__basic_03.c":56:5)
#loc51 = loc("CWE478_Missing_Default_Case_in_Switch__basic_03.c":53:9)
#loc52 = loc("CWE478_Missing_Default_Case_in_Switch__basic_03.c":57:9)
#loc53 = loc("CWE478_Missing_Default_Case_in_Switch__basic_03.c":74:9)
#loc54 = loc("CWE478_Missing_Default_Case_in_Switch__basic_03.c":58:13)
#loc55 = loc("CWE478_Missing_Default_Case_in_Switch__basic_03.c":58:38)
#loc56 = loc("CWE478_Missing_Default_Case_in_Switch__basic_03.c":59:13)
#loc57 = loc("CWE478_Missing_Default_Case_in_Switch__basic_03.c":59:17)
#loc58 = loc("CWE478_Missing_Default_Case_in_Switch__basic_03.c":60:18)
#loc59 = loc("CWE478_Missing_Default_Case_in_Switch__basic_03.c":60:27)
#loc60 = loc("CWE478_Missing_Default_Case_in_Switch__basic_03.c":60:13)
#loc61 = loc("CWE478_Missing_Default_Case_in_Switch__basic_03.c":60:28)
#loc62 = loc("CWE478_Missing_Default_Case_in_Switch__basic_03.c":61:13)
#loc63 = loc("CWE478_Missing_Default_Case_in_Switch__basic_03.c":72:13)
#loc64 = loc("CWE478_Missing_Default_Case_in_Switch__basic_03.c":61:21)
#loc65 = loc("CWE478_Missing_Default_Case_in_Switch__basic_03.c":63:13)
#loc66 = loc("CWE478_Missing_Default_Case_in_Switch__basic_03.c":64:30)
#loc67 = loc("CWE478_Missing_Default_Case_in_Switch__basic_03.c":64:17)
#loc68 = loc("CWE478_Missing_Default_Case_in_Switch__basic_03.c":65:17)
#loc69 = loc("CWE478_Missing_Default_Case_in_Switch__basic_03.c":66:13)
#loc70 = loc("CWE478_Missing_Default_Case_in_Switch__basic_03.c":67:30)
#loc71 = loc("CWE478_Missing_Default_Case_in_Switch__basic_03.c":67:17)
#loc72 = loc("CWE478_Missing_Default_Case_in_Switch__basic_03.c":68:17)
#loc73 = loc("CWE478_Missing_Default_Case_in_Switch__basic_03.c":70:13)
#loc74 = loc("CWE478_Missing_Default_Case_in_Switch__basic_03.c":71:17)
#loc75 = loc("CWE478_Missing_Default_Case_in_Switch__basic_03.c":73:23)
#loc76 = loc("CWE478_Missing_Default_Case_in_Switch__basic_03.c":73:13)
#loc77 = loc("CWE478_Missing_Default_Case_in_Switch__basic_03.c":79:1)
#loc78 = loc("CWE478_Missing_Default_Case_in_Switch__basic_03.c":102:1)
#loc79 = loc("CWE478_Missing_Default_Case_in_Switch__basic_03.c":81:5)
#loc80 = loc("CWE478_Missing_Default_Case_in_Switch__basic_03.c":101:5)
#loc81 = loc("CWE478_Missing_Default_Case_in_Switch__basic_03.c":81:8)
#loc82 = loc("CWE478_Missing_Default_Case_in_Switch__basic_03.c":81:11)
#loc83 = loc("CWE478_Missing_Default_Case_in_Switch__basic_03.c":82:5)
#loc84 = loc("CWE478_Missing_Default_Case_in_Switch__basic_03.c":83:9)
#loc85 = loc("CWE478_Missing_Default_Case_in_Switch__basic_03.c":100:9)
#loc86 = loc("CWE478_Missing_Default_Case_in_Switch__basic_03.c":84:13)
#loc87 = loc("CWE478_Missing_Default_Case_in_Switch__basic_03.c":84:38)
#loc88 = loc("CWE478_Missing_Default_Case_in_Switch__basic_03.c":85:13)
#loc89 = loc("CWE478_Missing_Default_Case_in_Switch__basic_03.c":85:17)
#loc90 = loc("CWE478_Missing_Default_Case_in_Switch__basic_03.c":86:18)
#loc91 = loc("CWE478_Missing_Default_Case_in_Switch__basic_03.c":86:27)
#loc92 = loc("CWE478_Missing_Default_Case_in_Switch__basic_03.c":86:13)
#loc93 = loc("CWE478_Missing_Default_Case_in_Switch__basic_03.c":86:28)
#loc94 = loc("CWE478_Missing_Default_Case_in_Switch__basic_03.c":87:13)
#loc95 = loc("CWE478_Missing_Default_Case_in_Switch__basic_03.c":98:13)
#loc96 = loc("CWE478_Missing_Default_Case_in_Switch__basic_03.c":87:21)
#loc97 = loc("CWE478_Missing_Default_Case_in_Switch__basic_03.c":89:13)
#loc98 = loc("CWE478_Missing_Default_Case_in_Switch__basic_03.c":90:30)
#loc99 = loc("CWE478_Missing_Default_Case_in_Switch__basic_03.c":90:17)
#loc100 = loc("CWE478_Missing_Default_Case_in_Switch__basic_03.c":91:17)
#loc101 = loc("CWE478_Missing_Default_Case_in_Switch__basic_03.c":92:13)
#loc102 = loc("CWE478_Missing_Default_Case_in_Switch__basic_03.c":93:30)
#loc103 = loc("CWE478_Missing_Default_Case_in_Switch__basic_03.c":93:17)
#loc104 = loc("CWE478_Missing_Default_Case_in_Switch__basic_03.c":94:17)
#loc105 = loc("CWE478_Missing_Default_Case_in_Switch__basic_03.c":96:13)
#loc106 = loc("CWE478_Missing_Default_Case_in_Switch__basic_03.c":97:17)
#loc107 = loc("CWE478_Missing_Default_Case_in_Switch__basic_03.c":99:23)
#loc108 = loc("CWE478_Missing_Default_Case_in_Switch__basic_03.c":99:13)
#loc109 = loc(fused[#loc2, #loc3])
#loc110 = loc(fused[#loc6, #loc7])
#loc111 = loc(fused[#loc8, #loc9])
#loc112 = loc(fused[#loc10, #loc11])
#loc113 = loc(fused[#loc12, #loc13])
#loc114 = loc(fused[#loc14, #loc11])
#loc115 = loc(fused[#loc15, #loc16])
#loc116 = loc(fused[#loc17, #loc1])
#loc117 = loc(fused[#loc18, #loc19])
#loc118 = loc(fused[#loc20, #loc21])
#loc119 = loc(fused[#loc22, #loc23])
#loc120 = loc(fused[#loc24, #loc25])
#loc121 = loc(fused[#loc28, #loc4])
#loc122 = loc(fused[#loc31, #loc5])
#loc123 = loc(fused[#loc35, #loc36])
#loc124 = loc(fused[#loc37, #loc38])
#loc125 = loc(fused[#loc39, #loc40])
#loc126 = loc(fused[#loc42, #loc43])
#loc127 = loc(fused[#loc44, #loc45])
#loc128 = loc(fused[#loc46, #loc47])
#loc129 = loc(fused[#loc48, #loc49, #loc50, #loc45])
#loc130 = loc(fused[#loc52, #loc53])
#loc131 = loc(fused[#loc54, #loc55])
#loc132 = loc(fused[#loc56, #loc57])
#loc133 = loc(fused[#loc58, #loc59])
#loc134 = loc(fused[#loc60, #loc61])
#loc135 = loc(fused[#loc62, #loc63])
#loc136 = loc(fused[#loc67, #loc66])
#loc137 = loc(fused[#loc71, #loc70])
#loc138 = loc(fused[#loc77, #loc78])
#loc139 = loc(fused[#loc79, #loc80])
#loc140 = loc(fused[#loc81, #loc82])
#loc141 = loc(fused[#loc83, #loc80])
#loc142 = loc(fused[#loc84, #loc85])
#loc143 = loc(fused[#loc86, #loc87])
#loc144 = loc(fused[#loc88, #loc89])
#loc145 = loc(fused[#loc90, #loc91])
#loc146 = loc(fused[#loc92, #loc93])
#loc147 = loc(fused[#loc94, #loc95])
#loc148 = loc(fused[#loc99, #loc98])
#loc149 = loc(fused[#loc103, #loc102])
