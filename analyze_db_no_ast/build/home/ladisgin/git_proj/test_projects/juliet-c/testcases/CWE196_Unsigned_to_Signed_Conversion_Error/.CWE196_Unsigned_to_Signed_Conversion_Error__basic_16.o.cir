!s32i = !cir.int<s, 32>
!u32i = !cir.int<u, 32>
!void = !cir.void
#fn_attr = #cir<extra({nothrow = #cir.nothrow})>
#fn_attr1 = #cir<extra({inline = #cir.inline<no>, nothrow = #cir.nothrow, optnone = #cir.optnone})>
module @"/home/ladisgin/git_proj/test_projects/juliet-c/testcases/CWE196_Unsigned_to_Signed_Conversion_Error/CWE196_Unsigned_to_Signed_Conversion_Error__basic_16.c" attributes {cir.lang = #cir.lang<c>, cir.sob = #cir.signed_overflow_behavior<undefined>, cir.triple = "x86_64-unknown-linux-gnu", dlti.dl_spec = #dlti.dl_spec<#dlti.dl_entry<!llvm.ptr, dense<64> : vector<4xi64>>, #dlti.dl_entry<i1, dense<8> : vector<2xi64>>, #dlti.dl_entry<f80, dense<128> : vector<2xi64>>, #dlti.dl_entry<i32, dense<32> : vector<2xi64>>, #dlti.dl_entry<i8, dense<8> : vector<2xi64>>, #dlti.dl_entry<i16, dense<16> : vector<2xi64>>, #dlti.dl_entry<!llvm.ptr<271>, dense<32> : vector<4xi64>>, #dlti.dl_entry<!llvm.ptr<272>, dense<64> : vector<4xi64>>, #dlti.dl_entry<f128, dense<128> : vector<2xi64>>, #dlti.dl_entry<f16, dense<16> : vector<2xi64>>, #dlti.dl_entry<!llvm.ptr<270>, dense<32> : vector<4xi64>>, #dlti.dl_entry<i128, dense<128> : vector<2xi64>>, #dlti.dl_entry<f64, dense<64> : vector<2xi64>>, #dlti.dl_entry<i64, dense<64> : vector<2xi64>>, #dlti.dl_entry<"dlti.stack_alignment", 128 : i64>, #dlti.dl_entry<"dlti.endianness", "little">>, llvm.data_layout = "e-m:e-p270:32:32-p271:32:32-p272:64:64-i64:64-i128:128-f80:128-n8:16:32:64-S128"} {
  cir.func private  @rand() -> !s32i extra(#fn_attr) loc(#loc77)
  cir.func private  @printIntLine(!s32i) loc(#loc78)
  cir.func no_proto  @CWE196_Unsigned_to_Signed_Conversion_Error__basic_16_bad() extra(#fn_attr1) {
    cir.scope {
      cir.while {
        %0 = cir.const #cir.int<1> : !s32i loc(#loc9)
        %1 = cir.cast(int_to_bool, %0 : !s32i), !cir.bool loc(#loc9)
        cir.condition(%1) loc(#loc9)
      } do {
        cir.scope {
          %0 = cir.alloca !u32i, !cir.ptr<!u32i>, ["intUnsigned"] {alignment = 4 : i64} loc(#loc82)
          %1 = cir.alloca !s32i, !cir.ptr<!s32i>, ["intSigned"] {alignment = 4 : i64} loc(#loc83)
          %2 = cir.call @rand() : () -> !s32i extra(#fn_attr) loc(#loc16)
          %3 = cir.cast(integral, %2 : !s32i), !u32i loc(#loc16)
          cir.store %3, %0 : !u32i, !cir.ptr<!u32i> loc(#loc84)
          cir.scope {
            %7 = cir.call @rand() : () -> !s32i extra(#fn_attr) loc(#loc21)
            %8 = cir.const #cir.int<2> : !s32i loc(#loc22)
            %9 = cir.binop(rem, %7, %8) : !s32i loc(#loc86)
            %10 = cir.const #cir.int<0> : !s32i loc(#loc23)
            %11 = cir.cmp(eq, %9, %10) : !s32i, !s32i loc(#loc87)
            %12 = cir.cast(int_to_bool, %11 : !s32i), !cir.bool loc(#loc24)
            cir.if %12 {
              %13 = cir.const #cir.int<2147483647> : !s32i loc(#loc26)
              %14 = cir.cast(integral, %13 : !s32i), !u32i loc(#loc26)
              %15 = cir.const #cir.int<2> : !u32i loc(#loc26)
              %16 = cir.binop(mul, %14, %15) : !u32i loc(#loc26)
              %17 = cir.const #cir.int<1> : !u32i loc(#loc26)
              %18 = cir.binop(add, %16, %17) : !u32i loc(#loc26)
              %19 = cir.load %0 : !cir.ptr<!u32i>, !u32i loc(#loc27)
              %20 = cir.binop(sub, %18, %19) : !u32i loc(#loc89)
              cir.store %20, %0 : !u32i, !cir.ptr<!u32i> loc(#loc90)
            } loc(#loc88)
          } loc(#loc85)
          %4 = cir.load %0 : !cir.ptr<!u32i>, !u32i loc(#loc29)
          %5 = cir.cast(integral, %4 : !u32i), !s32i loc(#loc29)
          cir.store %5, %1 : !s32i, !cir.ptr<!s32i> loc(#loc91)
          %6 = cir.load %1 : !cir.ptr<!s32i>, !s32i loc(#loc31)
          cir.call @printIntLine(%6) : (!s32i) -> () loc(#loc32)
        } loc(#loc81)
        cir.break loc(#loc33)
      } loc(#loc80)
    } loc(#loc80)
    cir.return loc(#loc6)
  } loc(#loc79)
  cir.func no_proto  @CWE196_Unsigned_to_Signed_Conversion_Error__basic_16_good() extra(#fn_attr1) {
    %0 = cir.get_global @good1 : !cir.ptr<!cir.func<!void ()>> loc(#loc93)
    cir.call %0() : (!cir.ptr<!cir.func<!void ()>>) -> () loc(#loc36)
    cir.return loc(#loc35)
  } loc(#loc92)
  cir.func private  @exit(!s32i) extra(#fn_attr) loc(#loc94)
  cir.func no_proto internal private  @good1() extra(#fn_attr1) {
    cir.scope {
      cir.while {
        %0 = cir.const #cir.int<1> : !s32i loc(#loc44)
        %1 = cir.cast(int_to_bool, %0 : !s32i), !cir.bool loc(#loc44)
        cir.condition(%1) loc(#loc44)
      } do {
        cir.scope {
          %0 = cir.alloca !u32i, !cir.ptr<!u32i>, ["intUnsigned"] {alignment = 4 : i64} loc(#loc98)
          %1 = cir.alloca !s32i, !cir.ptr<!s32i>, ["intSigned"] {alignment = 4 : i64} loc(#loc99)
          %2 = cir.call @rand() : () -> !s32i extra(#fn_attr) loc(#loc51)
          %3 = cir.cast(integral, %2 : !s32i), !u32i loc(#loc51)
          cir.store %3, %0 : !u32i, !cir.ptr<!u32i> loc(#loc100)
          cir.scope {
            %7 = cir.call @rand() : () -> !s32i extra(#fn_attr) loc(#loc56)
            %8 = cir.const #cir.int<2> : !s32i loc(#loc57)
            %9 = cir.binop(rem, %7, %8) : !s32i loc(#loc102)
            %10 = cir.const #cir.int<0> : !s32i loc(#loc58)
            %11 = cir.cmp(eq, %9, %10) : !s32i, !s32i loc(#loc103)
            %12 = cir.cast(int_to_bool, %11 : !s32i), !cir.bool loc(#loc59)
            cir.if %12 {
              %13 = cir.const #cir.int<2147483647> : !s32i loc(#loc61)
              %14 = cir.cast(integral, %13 : !s32i), !u32i loc(#loc61)
              %15 = cir.const #cir.int<2> : !u32i loc(#loc61)
              %16 = cir.binop(mul, %14, %15) : !u32i loc(#loc61)
              %17 = cir.const #cir.int<1> : !u32i loc(#loc61)
              %18 = cir.binop(add, %16, %17) : !u32i loc(#loc61)
              %19 = cir.load %0 : !cir.ptr<!u32i>, !u32i loc(#loc62)
              %20 = cir.binop(sub, %18, %19) : !u32i loc(#loc105)
              cir.store %20, %0 : !u32i, !cir.ptr<!u32i> loc(#loc106)
            } loc(#loc104)
          } loc(#loc101)
          cir.scope {
            %7 = cir.load %0 : !cir.ptr<!u32i>, !u32i loc(#loc66)
            %8 = cir.const #cir.int<2147483647> : !s32i loc(#loc67)
            %9 = cir.cast(integral, %8 : !s32i), !u32i loc(#loc67)
            %10 = cir.cmp(gt, %7, %9) : !u32i, !s32i loc(#loc108)
            %11 = cir.cast(int_to_bool, %10 : !s32i), !cir.bool loc(#loc68)
            cir.if %11 {
              %12 = cir.get_global @exit : !cir.ptr<!cir.func<!void (!s32i)>> loc(#loc70)
              %13 = cir.const #cir.int<1> : !s32i loc(#loc71)
              cir.call @exit(%13) : (!s32i) -> () extra(#fn_attr) loc(#loc70)
            } loc(#loc109)
          } loc(#loc107)
          %4 = cir.load %0 : !cir.ptr<!u32i>, !u32i loc(#loc72)
          %5 = cir.cast(integral, %4 : !u32i), !s32i loc(#loc72)
          cir.store %5, %1 : !s32i, !cir.ptr<!s32i> loc(#loc110)
          %6 = cir.load %1 : !cir.ptr<!s32i>, !s32i loc(#loc74)
          cir.call @printIntLine(%6) : (!s32i) -> () loc(#loc75)
        } loc(#loc97)
        cir.break loc(#loc76)
      } loc(#loc96)
    } loc(#loc96)
    cir.return loc(#loc41)
  } loc(#loc95)
} loc(#loc)
#loc = loc("/home/ladisgin/git_proj/test_projects/juliet-c/testcases/CWE196_Unsigned_to_Signed_Conversion_Error/CWE196_Unsigned_to_Signed_Conversion_Error__basic_16.c":0:0)
#loc1 = loc("/usr/include/stdlib.h":573:1)
#loc2 = loc("/usr/include/stdlib.h":573:24)
#loc3 = loc("../../testcasesupport/std_testcase_io.h":18:1)
#loc4 = loc("../../testcasesupport/std_testcase_io.h":18:33)
#loc5 = loc("CWE196_Unsigned_to_Signed_Conversion_Error__basic_16.c":20:1)
#loc6 = loc("CWE196_Unsigned_to_Signed_Conversion_Error__basic_16.c":38:1)
#loc7 = loc("CWE196_Unsigned_to_Signed_Conversion_Error__basic_16.c":22:5)
#loc8 = loc("CWE196_Unsigned_to_Signed_Conversion_Error__basic_16.c":37:5)
#loc9 = loc("CWE196_Unsigned_to_Signed_Conversion_Error__basic_16.c":22:11)
#loc10 = loc("CWE196_Unsigned_to_Signed_Conversion_Error__basic_16.c":24:9)
#loc11 = loc("CWE196_Unsigned_to_Signed_Conversion_Error__basic_16.c":35:9)
#loc12 = loc("CWE196_Unsigned_to_Signed_Conversion_Error__basic_16.c":25:13)
#loc13 = loc("CWE196_Unsigned_to_Signed_Conversion_Error__basic_16.c":25:22)
#loc14 = loc("CWE196_Unsigned_to_Signed_Conversion_Error__basic_16.c":26:13)
#loc15 = loc("CWE196_Unsigned_to_Signed_Conversion_Error__basic_16.c":26:17)
#loc16 = loc("CWE196_Unsigned_to_Signed_Conversion_Error__basic_16.c":27:27)
#loc17 = loc("CWE196_Unsigned_to_Signed_Conversion_Error__basic_16.c":27:13)
#loc18 = loc("CWE196_Unsigned_to_Signed_Conversion_Error__basic_16.c":27:32)
#loc19 = loc("CWE196_Unsigned_to_Signed_Conversion_Error__basic_16.c":28:13)
#loc20 = loc("CWE196_Unsigned_to_Signed_Conversion_Error__basic_16.c":31:13)
#loc21 = loc("CWE196_Unsigned_to_Signed_Conversion_Error__basic_16.c":28:17)
#loc22 = loc("CWE196_Unsigned_to_Signed_Conversion_Error__basic_16.c":28:26)
#loc23 = loc("CWE196_Unsigned_to_Signed_Conversion_Error__basic_16.c":28:31)
#loc24 = loc("CWE196_Unsigned_to_Signed_Conversion_Error__basic_16.c":28:28)
#loc25 = loc("CWE196_Unsigned_to_Signed_Conversion_Error__basic_16.c":29:13)
#loc26 = loc("CWE196_Unsigned_to_Signed_Conversion_Error__basic_16.c":30:31)
#loc27 = loc("CWE196_Unsigned_to_Signed_Conversion_Error__basic_16.c":30:42)
#loc28 = loc("CWE196_Unsigned_to_Signed_Conversion_Error__basic_16.c":30:17)
#loc29 = loc("CWE196_Unsigned_to_Signed_Conversion_Error__basic_16.c":33:25)
#loc30 = loc("CWE196_Unsigned_to_Signed_Conversion_Error__basic_16.c":33:13)
#loc31 = loc("CWE196_Unsigned_to_Signed_Conversion_Error__basic_16.c":34:26)
#loc32 = loc("CWE196_Unsigned_to_Signed_Conversion_Error__basic_16.c":34:13)
#loc33 = loc("CWE196_Unsigned_to_Signed_Conversion_Error__basic_16.c":36:9)
#loc34 = loc("CWE196_Unsigned_to_Signed_Conversion_Error__basic_16.c":69:1)
#loc35 = loc("CWE196_Unsigned_to_Signed_Conversion_Error__basic_16.c":72:1)
#loc36 = loc("CWE196_Unsigned_to_Signed_Conversion_Error__basic_16.c":71:5)
#loc37 = loc("CWE196_Unsigned_to_Signed_Conversion_Error__basic_16.c":71:11)
#loc38 = loc("/usr/include/stdlib.h":756:1)
#loc39 = loc("/usr/include/stdlib.h":756:70)
#loc40 = loc("CWE196_Unsigned_to_Signed_Conversion_Error__basic_16.c":45:1)
#loc41 = loc("CWE196_Unsigned_to_Signed_Conversion_Error__basic_16.c":67:1)
#loc42 = loc("CWE196_Unsigned_to_Signed_Conversion_Error__basic_16.c":47:5)
#loc43 = loc("CWE196_Unsigned_to_Signed_Conversion_Error__basic_16.c":66:5)
#loc44 = loc("CWE196_Unsigned_to_Signed_Conversion_Error__basic_16.c":47:11)
#loc45 = loc("CWE196_Unsigned_to_Signed_Conversion_Error__basic_16.c":49:9)
#loc46 = loc("CWE196_Unsigned_to_Signed_Conversion_Error__basic_16.c":64:9)
#loc47 = loc("CWE196_Unsigned_to_Signed_Conversion_Error__basic_16.c":50:13)
#loc48 = loc("CWE196_Unsigned_to_Signed_Conversion_Error__basic_16.c":50:22)
#loc49 = loc("CWE196_Unsigned_to_Signed_Conversion_Error__basic_16.c":51:13)
#loc50 = loc("CWE196_Unsigned_to_Signed_Conversion_Error__basic_16.c":51:17)
#loc51 = loc("CWE196_Unsigned_to_Signed_Conversion_Error__basic_16.c":52:27)
#loc52 = loc("CWE196_Unsigned_to_Signed_Conversion_Error__basic_16.c":52:13)
#loc53 = loc("CWE196_Unsigned_to_Signed_Conversion_Error__basic_16.c":52:32)
#loc54 = loc("CWE196_Unsigned_to_Signed_Conversion_Error__basic_16.c":53:13)
#loc55 = loc("CWE196_Unsigned_to_Signed_Conversion_Error__basic_16.c":56:13)
#loc56 = loc("CWE196_Unsigned_to_Signed_Conversion_Error__basic_16.c":53:17)
#loc57 = loc("CWE196_Unsigned_to_Signed_Conversion_Error__basic_16.c":53:26)
#loc58 = loc("CWE196_Unsigned_to_Signed_Conversion_Error__basic_16.c":53:31)
#loc59 = loc("CWE196_Unsigned_to_Signed_Conversion_Error__basic_16.c":53:28)
#loc60 = loc("CWE196_Unsigned_to_Signed_Conversion_Error__basic_16.c":54:13)
#loc61 = loc("CWE196_Unsigned_to_Signed_Conversion_Error__basic_16.c":55:31)
#loc62 = loc("CWE196_Unsigned_to_Signed_Conversion_Error__basic_16.c":55:42)
#loc63 = loc("CWE196_Unsigned_to_Signed_Conversion_Error__basic_16.c":55:17)
#loc64 = loc("CWE196_Unsigned_to_Signed_Conversion_Error__basic_16.c":58:13)
#loc65 = loc("CWE196_Unsigned_to_Signed_Conversion_Error__basic_16.c":61:13)
#loc66 = loc("CWE196_Unsigned_to_Signed_Conversion_Error__basic_16.c":58:17)
#loc67 = loc("CWE196_Unsigned_to_Signed_Conversion_Error__basic_16.c":58:31)
#loc68 = loc("CWE196_Unsigned_to_Signed_Conversion_Error__basic_16.c":58:29)
#loc69 = loc("CWE196_Unsigned_to_Signed_Conversion_Error__basic_16.c":59:13)
#loc70 = loc("CWE196_Unsigned_to_Signed_Conversion_Error__basic_16.c":60:17)
#loc71 = loc("CWE196_Unsigned_to_Signed_Conversion_Error__basic_16.c":60:22)
#loc72 = loc("CWE196_Unsigned_to_Signed_Conversion_Error__basic_16.c":62:25)
#loc73 = loc("CWE196_Unsigned_to_Signed_Conversion_Error__basic_16.c":62:13)
#loc74 = loc("CWE196_Unsigned_to_Signed_Conversion_Error__basic_16.c":63:26)
#loc75 = loc("CWE196_Unsigned_to_Signed_Conversion_Error__basic_16.c":63:13)
#loc76 = loc("CWE196_Unsigned_to_Signed_Conversion_Error__basic_16.c":65:9)
#loc77 = loc(fused[#loc1, #loc2])
#loc78 = loc(fused[#loc3, #loc4])
#loc79 = loc(fused[#loc5, #loc6])
#loc80 = loc(fused[#loc7, #loc8])
#loc81 = loc(fused[#loc10, #loc11])
#loc82 = loc(fused[#loc12, #loc13])
#loc83 = loc(fused[#loc14, #loc15])
#loc84 = loc(fused[#loc17, #loc18])
#loc85 = loc(fused[#loc19, #loc20])
#loc86 = loc(fused[#loc21, #loc22])
#loc87 = loc(fused[#loc21, #loc23])
#loc88 = loc(fused[#loc25, #loc20])
#loc89 = loc(fused[#loc26, #loc27])
#loc90 = loc(fused[#loc28, #loc27])
#loc91 = loc(fused[#loc30, #loc29])
#loc92 = loc(fused[#loc34, #loc35])
#loc93 = loc(fused[#loc36, #loc37])
#loc94 = loc(fused[#loc38, #loc39])
#loc95 = loc(fused[#loc40, #loc41])
#loc96 = loc(fused[#loc42, #loc43])
#loc97 = loc(fused[#loc45, #loc46])
#loc98 = loc(fused[#loc47, #loc48])
#loc99 = loc(fused[#loc49, #loc50])
#loc100 = loc(fused[#loc52, #loc53])
#loc101 = loc(fused[#loc54, #loc55])
#loc102 = loc(fused[#loc56, #loc57])
#loc103 = loc(fused[#loc56, #loc58])
#loc104 = loc(fused[#loc60, #loc55])
#loc105 = loc(fused[#loc61, #loc62])
#loc106 = loc(fused[#loc63, #loc62])
#loc107 = loc(fused[#loc64, #loc65])
#loc108 = loc(fused[#loc66, #loc67])
#loc109 = loc(fused[#loc69, #loc65])
#loc110 = loc(fused[#loc73, #loc72])
