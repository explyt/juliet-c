!s32i = !cir.int<s, 32>
!s8i = !cir.int<s, 8>
#fn_attr = #cir<extra({nothrow = #cir.nothrow})>
#fn_attr1 = #cir<extra({inline = #cir.inline<no>, nothrow = #cir.nothrow, optnone = #cir.optnone, uwtable = #cir.uwtable<async>})>
module @"/workspaces/juliet-c/testcases/CWE481_Assigning_Instead_of_Comparing/CWE481_Assigning_Instead_of_Comparing__basic_15.c" attributes {cir.lang = #cir.lang<c>, cir.sob = #cir.signed_overflow_behavior<undefined>, cir.triple = "x86_64-unknown-linux-gnu", cir.type_size_info = #cir.type_size_info<char = 8, int = 32, size_t = 64>, cir.uwtable = #cir.uwtable<async>, dlti.dl_spec = #dlti.dl_spec<!llvm.ptr = dense<64> : vector<4xi64>, !llvm.ptr<270> = dense<32> : vector<4xi64>, i1 = dense<8> : vector<2xi64>, i8 = dense<8> : vector<2xi64>, i16 = dense<16> : vector<2xi64>, f16 = dense<16> : vector<2xi64>, i32 = dense<32> : vector<2xi64>, f128 = dense<128> : vector<2xi64>, f64 = dense<64> : vector<2xi64>, !llvm.ptr<272> = dense<64> : vector<4xi64>, !llvm.ptr<271> = dense<32> : vector<4xi64>, i64 = dense<64> : vector<2xi64>, f80 = dense<128> : vector<2xi64>, i128 = dense<128> : vector<2xi64>, "dlti.endianness" = "little", "dlti.stack_alignment" = 128 : i64, "dlti.mangling_mode" = "e">} {
  cir.func private @rand() -> !s32i extra(#fn_attr) loc(#loc81)
  cir.func private @printLine(!cir.ptr<!s8i>) loc(#loc82)
  cir.global "private" constant cir_private dsolocal @".str" = #cir.const_array<"i was 5\00" : !cir.array<!s8i x 8>> : !cir.array<!s8i x 8> {alignment = 1 : i64} loc(#loc5)
  cir.global "private" constant cir_private dsolocal @".str.1" = #cir.const_array<"Benign, fixed string\00" : !cir.array<!s8i x 21>> : !cir.array<!s8i x 21> {alignment = 1 : i64} loc(#loc6)
  cir.func no_proto @CWE481_Assigning_Instead_of_Comparing__basic_15_bad() extra(#fn_attr1) {
    cir.scope {
      %0 = cir.const #cir.int<6> : !s32i loc(#loc11)
      cir.switch (%0 : !s32i) {
        cir.case(equal, [#cir.int<6> : !s32i]) {
          cir.scope {
            %1 = cir.alloca !s32i, !cir.ptr<!s32i>, ["intRand", init] {alignment = 4 : i64} loc(#loc86)
            %2 = cir.call @rand() : () -> !s32i extra(#fn_attr) loc(#loc17)
            cir.store %2, %1 : !s32i, !cir.ptr<!s32i> loc(#loc86)
            cir.scope {
              %3 = cir.const #cir.int<5> : !s32i loc(#loc20)
              cir.store %3, %1 : !s32i, !cir.ptr<!s32i> loc(#loc88)
              %4 = cir.cast(int_to_bool, %3 : !s32i), !cir.bool loc(#loc22)
              cir.if %4 {
                %5 = cir.get_global @".str" : !cir.ptr<!cir.array<!s8i x 8>> loc(#loc5)
                %6 = cir.cast(array_to_ptrdecay, %5 : !cir.ptr<!cir.array<!s8i x 8>>), !cir.ptr<!s8i> loc(#loc5)
                cir.call @printLine(%6) : (!cir.ptr<!s8i>) -> () loc(#loc24)
              } loc(#loc89)
            } loc(#loc87)
          } loc(#loc85)
          cir.break loc(#loc25)
        } loc(#loc12)
        cir.case(default, []) {
          %1 = cir.get_global @".str.1" : !cir.ptr<!cir.array<!s8i x 21>> loc(#loc6)
          %2 = cir.cast(array_to_ptrdecay, %1 : !cir.ptr<!cir.array<!s8i x 21>>), !cir.ptr<!s8i> loc(#loc6)
          cir.call @printLine(%2) : (!cir.ptr<!s8i>) -> () loc(#loc27)
          cir.break loc(#loc28)
        } loc(#loc26)
        cir.yield loc(#loc9)
      } loc(#loc9)
    } loc(#loc84)
    cir.return loc(#loc8)
  } loc(#loc83)
  cir.func no_proto @CWE481_Assigning_Instead_of_Comparing__basic_15_good() extra(#fn_attr1) {
    %0 = cir.get_global @good1 : !cir.ptr<!cir.func<()>> loc(#loc91)
    cir.call %0() : (!cir.ptr<!cir.func<()>>) -> () loc(#loc31)
    %1 = cir.get_global @good2 : !cir.ptr<!cir.func<()>> loc(#loc92)
    cir.call %1() : (!cir.ptr<!cir.func<()>>) -> () loc(#loc33)
    cir.return loc(#loc30)
  } loc(#loc90)
  cir.func no_proto internal private @good1() extra(#fn_attr1) {
    cir.scope {
      %0 = cir.const #cir.int<5> : !s32i loc(#loc39)
      cir.switch (%0 : !s32i) {
        cir.case(equal, [#cir.int<6> : !s32i]) {
          %1 = cir.get_global @".str.1" : !cir.ptr<!cir.array<!s8i x 21>> loc(#loc41)
          %2 = cir.cast(array_to_ptrdecay, %1 : !cir.ptr<!cir.array<!s8i x 21>>), !cir.ptr<!s8i> loc(#loc41)
          cir.call @printLine(%2) : (!cir.ptr<!s8i>) -> () loc(#loc42)
          cir.break loc(#loc43)
        } loc(#loc40)
        cir.case(default, []) {
          cir.scope {
            %1 = cir.alloca !s32i, !cir.ptr<!s32i>, ["intRand", init] {alignment = 4 : i64} loc(#loc96)
            %2 = cir.call @rand() : () -> !s32i extra(#fn_attr) loc(#loc49)
            cir.store %2, %1 : !s32i, !cir.ptr<!s32i> loc(#loc96)
            cir.scope {
              %3 = cir.load %1 : !cir.ptr<!s32i>, !s32i loc(#loc52)
              %4 = cir.const #cir.int<5> : !s32i loc(#loc53)
              %5 = cir.cmp(eq, %3, %4) : !s32i, !cir.bool loc(#loc98)
              cir.if %5 {
                %6 = cir.get_global @".str" : !cir.ptr<!cir.array<!s8i x 8>> loc(#loc55)
                %7 = cir.cast(array_to_ptrdecay, %6 : !cir.ptr<!cir.array<!s8i x 8>>), !cir.ptr<!s8i> loc(#loc55)
                cir.call @printLine(%7) : (!cir.ptr<!s8i>) -> () loc(#loc56)
              } loc(#loc99)
            } loc(#loc97)
          } loc(#loc95)
          cir.break loc(#loc57)
        } loc(#loc44)
        cir.yield loc(#loc37)
      } loc(#loc37)
    } loc(#loc94)
    cir.return loc(#loc36)
  } loc(#loc93)
  cir.func no_proto internal private @good2() extra(#fn_attr1) {
    cir.scope {
      %0 = cir.const #cir.int<6> : !s32i loc(#loc62)
      cir.switch (%0 : !s32i) {
        cir.case(equal, [#cir.int<6> : !s32i]) {
          cir.scope {
            %1 = cir.alloca !s32i, !cir.ptr<!s32i>, ["intRand", init] {alignment = 4 : i64} loc(#loc103)
            %2 = cir.call @rand() : () -> !s32i extra(#fn_attr) loc(#loc68)
            cir.store %2, %1 : !s32i, !cir.ptr<!s32i> loc(#loc103)
            cir.scope {
              %3 = cir.load %1 : !cir.ptr<!s32i>, !s32i loc(#loc71)
              %4 = cir.const #cir.int<5> : !s32i loc(#loc72)
              %5 = cir.cmp(eq, %3, %4) : !s32i, !cir.bool loc(#loc105)
              cir.if %5 {
                %6 = cir.get_global @".str" : !cir.ptr<!cir.array<!s8i x 8>> loc(#loc74)
                %7 = cir.cast(array_to_ptrdecay, %6 : !cir.ptr<!cir.array<!s8i x 8>>), !cir.ptr<!s8i> loc(#loc74)
                cir.call @printLine(%7) : (!cir.ptr<!s8i>) -> () loc(#loc75)
              } loc(#loc106)
            } loc(#loc104)
          } loc(#loc102)
          cir.break loc(#loc76)
        } loc(#loc63)
        cir.case(default, []) {
          %1 = cir.get_global @".str.1" : !cir.ptr<!cir.array<!s8i x 21>> loc(#loc78)
          %2 = cir.cast(array_to_ptrdecay, %1 : !cir.ptr<!cir.array<!s8i x 21>>), !cir.ptr<!s8i> loc(#loc78)
          cir.call @printLine(%2) : (!cir.ptr<!s8i>) -> () loc(#loc79)
          cir.break loc(#loc80)
        } loc(#loc77)
        cir.yield loc(#loc60)
      } loc(#loc60)
    } loc(#loc101)
    cir.return loc(#loc59)
  } loc(#loc100)
} loc(#loc)
#loc = loc("/workspaces/juliet-c/testcases/CWE481_Assigning_Instead_of_Comparing/CWE481_Assigning_Instead_of_Comparing__basic_15.c":0:0)
#loc1 = loc("/usr/include/stdlib.h":573:1)
#loc2 = loc("/usr/include/stdlib.h":573:24)
#loc3 = loc("../../testcasesupport/std_testcase_io.h":14:1)
#loc4 = loc("../../testcasesupport/std_testcase_io.h":14:33)
#loc5 = loc("CWE481_Assigning_Instead_of_Comparing__basic_15.c":30:23)
#loc6 = loc("CWE481_Assigning_Instead_of_Comparing__basic_15.c":36:19)
#loc7 = loc("CWE481_Assigning_Instead_of_Comparing__basic_15.c":20:1)
#loc8 = loc("CWE481_Assigning_Instead_of_Comparing__basic_15.c":39:1)
#loc9 = loc("CWE481_Assigning_Instead_of_Comparing__basic_15.c":22:5)
#loc10 = loc("CWE481_Assigning_Instead_of_Comparing__basic_15.c":38:5)
#loc11 = loc("CWE481_Assigning_Instead_of_Comparing__basic_15.c":22:12)
#loc12 = loc("CWE481_Assigning_Instead_of_Comparing__basic_15.c":24:5)
#loc13 = loc("CWE481_Assigning_Instead_of_Comparing__basic_15.c":25:5)
#loc14 = loc("CWE481_Assigning_Instead_of_Comparing__basic_15.c":32:5)
#loc15 = loc("CWE481_Assigning_Instead_of_Comparing__basic_15.c":26:9)
#loc16 = loc("CWE481_Assigning_Instead_of_Comparing__basic_15.c":26:28)
#loc17 = loc("CWE481_Assigning_Instead_of_Comparing__basic_15.c":26:23)
#loc18 = loc("CWE481_Assigning_Instead_of_Comparing__basic_15.c":28:9)
#loc19 = loc("CWE481_Assigning_Instead_of_Comparing__basic_15.c":31:9)
#loc20 = loc("CWE481_Assigning_Instead_of_Comparing__basic_15.c":28:22)
#loc21 = loc("CWE481_Assigning_Instead_of_Comparing__basic_15.c":28:12)
#loc22 = loc("CWE481_Assigning_Instead_of_Comparing__basic_15.c":28:20)
#loc23 = loc("CWE481_Assigning_Instead_of_Comparing__basic_15.c":29:9)
#loc24 = loc("CWE481_Assigning_Instead_of_Comparing__basic_15.c":30:13)
#loc25 = loc("CWE481_Assigning_Instead_of_Comparing__basic_15.c":33:5)
#loc26 = loc("CWE481_Assigning_Instead_of_Comparing__basic_15.c":34:5)
#loc27 = loc("CWE481_Assigning_Instead_of_Comparing__basic_15.c":36:9)
#loc28 = loc("CWE481_Assigning_Instead_of_Comparing__basic_15.c":37:9)
#loc29 = loc("CWE481_Assigning_Instead_of_Comparing__basic_15.c":89:1)
#loc30 = loc("CWE481_Assigning_Instead_of_Comparing__basic_15.c":93:1)
#loc31 = loc("CWE481_Assigning_Instead_of_Comparing__basic_15.c":91:5)
#loc32 = loc("CWE481_Assigning_Instead_of_Comparing__basic_15.c":91:11)
#loc33 = loc("CWE481_Assigning_Instead_of_Comparing__basic_15.c":92:5)
#loc34 = loc("CWE481_Assigning_Instead_of_Comparing__basic_15.c":92:11)
#loc35 = loc("CWE481_Assigning_Instead_of_Comparing__basic_15.c":46:1)
#loc36 = loc("CWE481_Assigning_Instead_of_Comparing__basic_15.c":65:1)
#loc37 = loc("CWE481_Assigning_Instead_of_Comparing__basic_15.c":48:5)
#loc38 = loc("CWE481_Assigning_Instead_of_Comparing__basic_15.c":64:5)
#loc39 = loc("CWE481_Assigning_Instead_of_Comparing__basic_15.c":48:12)
#loc40 = loc("CWE481_Assigning_Instead_of_Comparing__basic_15.c":50:5)
#loc41 = loc("CWE481_Assigning_Instead_of_Comparing__basic_15.c":52:19)
#loc42 = loc("CWE481_Assigning_Instead_of_Comparing__basic_15.c":52:9)
#loc43 = loc("CWE481_Assigning_Instead_of_Comparing__basic_15.c":53:9)
#loc44 = loc("CWE481_Assigning_Instead_of_Comparing__basic_15.c":54:5)
#loc45 = loc("CWE481_Assigning_Instead_of_Comparing__basic_15.c":55:5)
#loc46 = loc("CWE481_Assigning_Instead_of_Comparing__basic_15.c":62:5)
#loc47 = loc("CWE481_Assigning_Instead_of_Comparing__basic_15.c":56:9)
#loc48 = loc("CWE481_Assigning_Instead_of_Comparing__basic_15.c":56:28)
#loc49 = loc("CWE481_Assigning_Instead_of_Comparing__basic_15.c":56:23)
#loc50 = loc("CWE481_Assigning_Instead_of_Comparing__basic_15.c":58:9)
#loc51 = loc("CWE481_Assigning_Instead_of_Comparing__basic_15.c":61:9)
#loc52 = loc("CWE481_Assigning_Instead_of_Comparing__basic_15.c":58:12)
#loc53 = loc("CWE481_Assigning_Instead_of_Comparing__basic_15.c":58:23)
#loc54 = loc("CWE481_Assigning_Instead_of_Comparing__basic_15.c":59:9)
#loc55 = loc("CWE481_Assigning_Instead_of_Comparing__basic_15.c":60:23)
#loc56 = loc("CWE481_Assigning_Instead_of_Comparing__basic_15.c":60:13)
#loc57 = loc("CWE481_Assigning_Instead_of_Comparing__basic_15.c":63:5)
#loc58 = loc("CWE481_Assigning_Instead_of_Comparing__basic_15.c":68:1)
#loc59 = loc("CWE481_Assigning_Instead_of_Comparing__basic_15.c":87:1)
#loc60 = loc("CWE481_Assigning_Instead_of_Comparing__basic_15.c":70:5)
#loc61 = loc("CWE481_Assigning_Instead_of_Comparing__basic_15.c":86:5)
#loc62 = loc("CWE481_Assigning_Instead_of_Comparing__basic_15.c":70:12)
#loc63 = loc("CWE481_Assigning_Instead_of_Comparing__basic_15.c":72:5)
#loc64 = loc("CWE481_Assigning_Instead_of_Comparing__basic_15.c":73:5)
#loc65 = loc("CWE481_Assigning_Instead_of_Comparing__basic_15.c":80:5)
#loc66 = loc("CWE481_Assigning_Instead_of_Comparing__basic_15.c":74:9)
#loc67 = loc("CWE481_Assigning_Instead_of_Comparing__basic_15.c":74:28)
#loc68 = loc("CWE481_Assigning_Instead_of_Comparing__basic_15.c":74:23)
#loc69 = loc("CWE481_Assigning_Instead_of_Comparing__basic_15.c":76:9)
#loc70 = loc("CWE481_Assigning_Instead_of_Comparing__basic_15.c":79:9)
#loc71 = loc("CWE481_Assigning_Instead_of_Comparing__basic_15.c":76:12)
#loc72 = loc("CWE481_Assigning_Instead_of_Comparing__basic_15.c":76:23)
#loc73 = loc("CWE481_Assigning_Instead_of_Comparing__basic_15.c":77:9)
#loc74 = loc("CWE481_Assigning_Instead_of_Comparing__basic_15.c":78:23)
#loc75 = loc("CWE481_Assigning_Instead_of_Comparing__basic_15.c":78:13)
#loc76 = loc("CWE481_Assigning_Instead_of_Comparing__basic_15.c":81:5)
#loc77 = loc("CWE481_Assigning_Instead_of_Comparing__basic_15.c":82:5)
#loc78 = loc("CWE481_Assigning_Instead_of_Comparing__basic_15.c":84:19)
#loc79 = loc("CWE481_Assigning_Instead_of_Comparing__basic_15.c":84:9)
#loc80 = loc("CWE481_Assigning_Instead_of_Comparing__basic_15.c":85:9)
#loc81 = loc(fused[#loc1, #loc2])
#loc82 = loc(fused[#loc3, #loc4])
#loc83 = loc(fused[#loc7, #loc8])
#loc84 = loc(fused[#loc9, #loc10])
#loc85 = loc(fused[#loc13, #loc14])
#loc86 = loc(fused[#loc15, #loc16])
#loc87 = loc(fused[#loc18, #loc19])
#loc88 = loc(fused[#loc21, #loc20])
#loc89 = loc(fused[#loc23, #loc19])
#loc90 = loc(fused[#loc29, #loc30])
#loc91 = loc(fused[#loc31, #loc32])
#loc92 = loc(fused[#loc33, #loc34])
#loc93 = loc(fused[#loc35, #loc36])
#loc94 = loc(fused[#loc37, #loc38])
#loc95 = loc(fused[#loc45, #loc46])
#loc96 = loc(fused[#loc47, #loc48])
#loc97 = loc(fused[#loc50, #loc51])
#loc98 = loc(fused[#loc52, #loc53])
#loc99 = loc(fused[#loc54, #loc51])
#loc100 = loc(fused[#loc58, #loc59])
#loc101 = loc(fused[#loc60, #loc61])
#loc102 = loc(fused[#loc64, #loc65])
#loc103 = loc(fused[#loc66, #loc67])
#loc104 = loc(fused[#loc69, #loc70])
#loc105 = loc(fused[#loc71, #loc72])
#loc106 = loc(fused[#loc73, #loc70])
