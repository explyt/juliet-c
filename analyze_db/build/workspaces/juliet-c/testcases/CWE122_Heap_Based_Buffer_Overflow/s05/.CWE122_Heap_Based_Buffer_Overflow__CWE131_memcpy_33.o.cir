!s32i = !cir.int<s, 32>
!u64i = !cir.int<u, 64>
!void = !cir.void
#fn_attr = #cir<extra({nothrow = #cir.nothrow})>
#fn_attr1 = #cir<extra({inline = #cir.inline<no>, optnone = #cir.optnone, uwtable = #cir.uwtable<async>})>
module @"/workspaces/juliet-c/testcases/CWE122_Heap_Based_Buffer_Overflow/s05/CWE122_Heap_Based_Buffer_Overflow__CWE131_memcpy_33.cpp" attributes {cir.lang = #cir.lang<cxx>, cir.sob = #cir.signed_overflow_behavior<undefined>, cir.triple = "x86_64-unknown-linux-gnu", cir.type_size_info = #cir.type_size_info<char = 8, int = 32, size_t = 64>, cir.uwtable = #cir.uwtable<async>, dlti.dl_spec = #dlti.dl_spec<i128 = dense<128> : vector<2xi64>, f80 = dense<128> : vector<2xi64>, i64 = dense<64> : vector<2xi64>, !llvm.ptr<272> = dense<64> : vector<4xi64>, !llvm.ptr<271> = dense<32> : vector<4xi64>, !llvm.ptr = dense<64> : vector<4xi64>, i1 = dense<8> : vector<2xi64>, i8 = dense<8> : vector<2xi64>, i16 = dense<16> : vector<2xi64>, i32 = dense<32> : vector<2xi64>, f16 = dense<16> : vector<2xi64>, f64 = dense<64> : vector<2xi64>, f128 = dense<128> : vector<2xi64>, !llvm.ptr<270> = dense<32> : vector<4xi64>, "dlti.mangling_mode" = "e", "dlti.stack_alignment" = 128 : i64, "dlti.endianness" = "little">} {
  cir.func private @malloc(!u64i) -> !cir.ptr<!void> extra(#fn_attr) loc(#loc96)
  cir.func private @exit(!s32i) extra(#fn_attr) loc(#loc97)
  cir.func private @printIntLine(!s32i) loc(#loc98)
  cir.func private @free(!cir.ptr<!void>) extra(#fn_attr) loc(#loc99)
  cir.func @_ZN51CWE122_Heap_Based_Buffer_Overflow__CWE131_memcpy_333badEv() extra(#fn_attr1) {
    %0 = cir.alloca !cir.ptr<!s32i>, !cir.ptr<!cir.ptr<!s32i>>, ["data", init] {alignment = 8 : i64} loc(#loc101)
    %1 = cir.alloca !cir.array<!s32i x 10>, !cir.ptr<!cir.array<!s32i x 10>>, ["source"] {alignment = 16 : i64} loc(#loc102)
    %2 = cir.alloca !cir.ptr<!s32i>, !cir.ptr<!cir.ptr<!s32i>>, ["data"] {alignment = 8 : i64} loc(#loc103)
    %3 = cir.alloca !cir.ptr<!cir.ptr<!s32i>>, !cir.ptr<!cir.ptr<!cir.ptr<!s32i>>>, ["dataRef", init, const] {alignment = 8 : i64} loc(#loc104)
    cir.store %2, %3 : !cir.ptr<!cir.ptr<!s32i>>, !cir.ptr<!cir.ptr<!cir.ptr<!s32i>>> loc(#loc18)
    %4 = cir.const #cir.ptr<null> : !cir.ptr<!s32i> loc(#loc19)
    cir.store %4, %2 : !cir.ptr<!s32i>, !cir.ptr<!cir.ptr<!s32i>> loc(#loc105)
    %5 = cir.get_global @malloc : !cir.ptr<!cir.func<(!u64i) -> !cir.ptr<!void>>> loc(#loc21)
    %6 = cir.const #cir.int<10> : !s32i loc(#loc22)
    %7 = cir.cast(integral, %6 : !s32i), !u64i loc(#loc22)
    %8 = cir.call @malloc(%7) : (!u64i) -> !cir.ptr<!void> extra(#fn_attr) loc(#loc21)
    %9 = cir.cast(bitcast, %8 : !cir.ptr<!void>), !cir.ptr<!s32i> loc(#loc106)
    cir.store %9, %2 : !cir.ptr<!s32i>, !cir.ptr<!cir.ptr<!s32i>> loc(#loc107)
    cir.br ^bb1 loc(#loc108)
  ^bb1:  // pred: ^bb0
    %10 = cir.load %2 : !cir.ptr<!cir.ptr<!s32i>>, !cir.ptr<!s32i> loc(#loc27)
    %11 = cir.const #cir.ptr<null> : !cir.ptr<!s32i> loc(#loc28)
    %12 = cir.cmp(eq, %10, %11) : !cir.ptr<!s32i>, !cir.bool loc(#loc109)
    cir.brcond %12 ^bb2, ^bb3 loc(#loc110)
  ^bb2:  // pred: ^bb1
    %13 = cir.get_global @exit : !cir.ptr<!cir.func<(!s32i)>> loc(#loc30)
    %14 = cir.const #cir.int<1> : !s32i loc(#loc31)
    %15 = cir.unary(minus, %14) nsw : !s32i, !s32i loc(#loc32)
    cir.call @exit(%15) : (!s32i) -> () extra(#fn_attr) loc(#loc30)
    cir.br ^bb3 loc(#loc26)
  ^bb3:  // 2 preds: ^bb1, ^bb2
    cir.br ^bb4 loc(#loc26)
  ^bb4:  // pred: ^bb3
    cir.br ^bb5 loc(#loc111)
  ^bb5:  // pred: ^bb4
    %16 = cir.load %3 : !cir.ptr<!cir.ptr<!cir.ptr<!s32i>>>, !cir.ptr<!cir.ptr<!s32i>> loc(#loc12)
    %17 = cir.load %16 : !cir.ptr<!cir.ptr<!s32i>>, !cir.ptr<!s32i> loc(#loc12)
    cir.store %17, %0 : !cir.ptr<!s32i>, !cir.ptr<!cir.ptr<!s32i>> loc(#loc101)
    cir.br ^bb6 loc(#loc112)
  ^bb6:  // pred: ^bb5
    %18 = cir.const #cir.zero : !cir.array<!s32i x 10> loc(#loc102)
    cir.store %18, %1 : !cir.array<!s32i x 10>, !cir.ptr<!cir.array<!s32i x 10>> loc(#loc102)
    %19 = cir.load %0 : !cir.ptr<!cir.ptr<!s32i>>, !cir.ptr<!s32i> loc(#loc37)
    %20 = cir.cast(bitcast, %19 : !cir.ptr<!s32i>), !cir.ptr<!void> loc(#loc37)
    %21 = cir.cast(array_to_ptrdecay, %1 : !cir.ptr<!cir.array<!s32i x 10>>), !cir.ptr<!s32i> loc(#loc38)
    %22 = cir.cast(bitcast, %21 : !cir.ptr<!s32i>), !cir.ptr<!void> loc(#loc38)
    %23 = cir.const #cir.int<10> : !s32i loc(#loc39)
    %24 = cir.cast(integral, %23 : !s32i), !u64i loc(#loc39)
    %25 = cir.const #cir.int<4> : !u64i loc(#loc113)
    %26 = cir.binop(mul, %24, %25) : !u64i loc(#loc114)
    cir.libc.memcpy %26 bytes from %22 to %20 : !u64i, !cir.ptr<!void> -> !cir.ptr<!void> loc(#loc115)
    %27 = cir.load %0 : !cir.ptr<!cir.ptr<!s32i>>, !cir.ptr<!s32i> loc(#loc44)
    %28 = cir.const #cir.int<0> : !s32i loc(#loc45)
    %29 = cir.ptr_stride(%27 : !cir.ptr<!s32i>, %28 : !s32i), !cir.ptr<!s32i> loc(#loc46)
    %30 = cir.load %29 : !cir.ptr<!s32i>, !s32i loc(#loc44)
    cir.call @printIntLine(%30) : (!s32i) -> () loc(#loc47)
    %31 = cir.get_global @free : !cir.ptr<!cir.func<(!cir.ptr<!void>)>> loc(#loc48)
    %32 = cir.load %0 : !cir.ptr<!cir.ptr<!s32i>>, !cir.ptr<!s32i> loc(#loc49)
    %33 = cir.cast(bitcast, %32 : !cir.ptr<!s32i>), !cir.ptr<!void> loc(#loc49)
    cir.call @free(%33) : (!cir.ptr<!void>) -> () extra(#fn_attr) loc(#loc48)
    cir.br ^bb7 loc(#loc36)
  ^bb7:  // pred: ^bb6
    cir.br ^bb8 loc(#loc34)
  ^bb8:  // pred: ^bb7
    cir.return loc(#loc10)
  } loc(#loc100)
  cir.func internal private @_ZN51CWE122_Heap_Based_Buffer_Overflow__CWE131_memcpy_33L7goodG2BEv() extra(#fn_attr1) {
    %0 = cir.alloca !cir.ptr<!s32i>, !cir.ptr<!cir.ptr<!s32i>>, ["data", init] {alignment = 8 : i64} loc(#loc117)
    %1 = cir.alloca !cir.array<!s32i x 10>, !cir.ptr<!cir.array<!s32i x 10>>, ["source"] {alignment = 16 : i64} loc(#loc118)
    %2 = cir.alloca !cir.ptr<!s32i>, !cir.ptr<!cir.ptr<!s32i>>, ["data"] {alignment = 8 : i64} loc(#loc119)
    %3 = cir.alloca !cir.ptr<!cir.ptr<!s32i>>, !cir.ptr<!cir.ptr<!cir.ptr<!s32i>>>, ["dataRef", init, const] {alignment = 8 : i64} loc(#loc120)
    cir.store %2, %3 : !cir.ptr<!cir.ptr<!s32i>>, !cir.ptr<!cir.ptr<!cir.ptr<!s32i>>> loc(#loc59)
    %4 = cir.const #cir.ptr<null> : !cir.ptr<!s32i> loc(#loc60)
    cir.store %4, %2 : !cir.ptr<!s32i>, !cir.ptr<!cir.ptr<!s32i>> loc(#loc121)
    %5 = cir.get_global @malloc : !cir.ptr<!cir.func<(!u64i) -> !cir.ptr<!void>>> loc(#loc62)
    %6 = cir.const #cir.int<10> : !s32i loc(#loc63)
    %7 = cir.cast(integral, %6 : !s32i), !u64i loc(#loc63)
    %8 = cir.const #cir.int<4> : !u64i loc(#loc122)
    %9 = cir.binop(mul, %7, %8) : !u64i loc(#loc123)
    %10 = cir.call @malloc(%9) : (!u64i) -> !cir.ptr<!void> extra(#fn_attr) loc(#loc62)
    %11 = cir.cast(bitcast, %10 : !cir.ptr<!void>), !cir.ptr<!s32i> loc(#loc124)
    cir.store %11, %2 : !cir.ptr<!s32i>, !cir.ptr<!cir.ptr<!s32i>> loc(#loc125)
    cir.br ^bb1 loc(#loc126)
  ^bb1:  // pred: ^bb0
    %12 = cir.load %2 : !cir.ptr<!cir.ptr<!s32i>>, !cir.ptr<!s32i> loc(#loc70)
    %13 = cir.const #cir.ptr<null> : !cir.ptr<!s32i> loc(#loc71)
    %14 = cir.cmp(eq, %12, %13) : !cir.ptr<!s32i>, !cir.bool loc(#loc127)
    cir.brcond %14 ^bb2, ^bb3 loc(#loc128)
  ^bb2:  // pred: ^bb1
    %15 = cir.get_global @exit : !cir.ptr<!cir.func<(!s32i)>> loc(#loc73)
    %16 = cir.const #cir.int<1> : !s32i loc(#loc74)
    %17 = cir.unary(minus, %16) nsw : !s32i, !s32i loc(#loc75)
    cir.call @exit(%17) : (!s32i) -> () extra(#fn_attr) loc(#loc73)
    cir.br ^bb3 loc(#loc69)
  ^bb3:  // 2 preds: ^bb1, ^bb2
    cir.br ^bb4 loc(#loc69)
  ^bb4:  // pred: ^bb3
    cir.br ^bb5 loc(#loc129)
  ^bb5:  // pred: ^bb4
    %18 = cir.load %3 : !cir.ptr<!cir.ptr<!cir.ptr<!s32i>>>, !cir.ptr<!cir.ptr<!s32i>> loc(#loc53)
    %19 = cir.load %18 : !cir.ptr<!cir.ptr<!s32i>>, !cir.ptr<!s32i> loc(#loc53)
    cir.store %19, %0 : !cir.ptr<!s32i>, !cir.ptr<!cir.ptr<!s32i>> loc(#loc117)
    cir.br ^bb6 loc(#loc130)
  ^bb6:  // pred: ^bb5
    %20 = cir.const #cir.zero : !cir.array<!s32i x 10> loc(#loc118)
    cir.store %20, %1 : !cir.array<!s32i x 10>, !cir.ptr<!cir.array<!s32i x 10>> loc(#loc118)
    %21 = cir.load %0 : !cir.ptr<!cir.ptr<!s32i>>, !cir.ptr<!s32i> loc(#loc80)
    %22 = cir.cast(bitcast, %21 : !cir.ptr<!s32i>), !cir.ptr<!void> loc(#loc80)
    %23 = cir.cast(array_to_ptrdecay, %1 : !cir.ptr<!cir.array<!s32i x 10>>), !cir.ptr<!s32i> loc(#loc81)
    %24 = cir.cast(bitcast, %23 : !cir.ptr<!s32i>), !cir.ptr<!void> loc(#loc81)
    %25 = cir.const #cir.int<10> : !s32i loc(#loc82)
    %26 = cir.cast(integral, %25 : !s32i), !u64i loc(#loc82)
    %27 = cir.const #cir.int<4> : !u64i loc(#loc131)
    %28 = cir.binop(mul, %26, %27) : !u64i loc(#loc132)
    cir.libc.memcpy %28 bytes from %24 to %22 : !u64i, !cir.ptr<!void> -> !cir.ptr<!void> loc(#loc133)
    %29 = cir.load %0 : !cir.ptr<!cir.ptr<!s32i>>, !cir.ptr<!s32i> loc(#loc87)
    %30 = cir.const #cir.int<0> : !s32i loc(#loc88)
    %31 = cir.ptr_stride(%29 : !cir.ptr<!s32i>, %30 : !s32i), !cir.ptr<!s32i> loc(#loc89)
    %32 = cir.load %31 : !cir.ptr<!s32i>, !s32i loc(#loc87)
    cir.call @printIntLine(%32) : (!s32i) -> () loc(#loc90)
    %33 = cir.get_global @free : !cir.ptr<!cir.func<(!cir.ptr<!void>)>> loc(#loc91)
    %34 = cir.load %0 : !cir.ptr<!cir.ptr<!s32i>>, !cir.ptr<!s32i> loc(#loc92)
    %35 = cir.cast(bitcast, %34 : !cir.ptr<!s32i>), !cir.ptr<!void> loc(#loc92)
    cir.call @free(%35) : (!cir.ptr<!void>) -> () extra(#fn_attr) loc(#loc91)
    cir.br ^bb7 loc(#loc79)
  ^bb7:  // pred: ^bb6
    cir.br ^bb8 loc(#loc77)
  ^bb8:  // pred: ^bb7
    cir.return loc(#loc51)
  } loc(#loc116)
  cir.func @_ZN51CWE122_Heap_Based_Buffer_Overflow__CWE131_memcpy_334goodEv() extra(#fn_attr1) {
    cir.call @_ZN51CWE122_Heap_Based_Buffer_Overflow__CWE131_memcpy_33L7goodG2BEv() : () -> () loc(#loc95)
    cir.return loc(#loc94)
  } loc(#loc134)
} loc(#loc)
#loc = loc("/workspaces/juliet-c/testcases/CWE122_Heap_Based_Buffer_Overflow/s05/CWE122_Heap_Based_Buffer_Overflow__CWE131_memcpy_33.cpp":0:0)
#loc1 = loc("/usr/include/stdlib.h":672:1)
#loc2 = loc("/usr/include/stdlib.h":672:45)
#loc3 = loc("/usr/include/stdlib.h":756:1)
#loc4 = loc("/usr/include/stdlib.h":756:70)
#loc5 = loc("../../../testcasesupport/std_testcase_io.h":18:1)
#loc6 = loc("../../../testcasesupport/std_testcase_io.h":18:33)
#loc7 = loc("/usr/include/stdlib.h":687:1)
#loc8 = loc("/usr/include/stdlib.h":687:32)
#loc9 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE131_memcpy_33.cpp":24:1)
#loc10 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE131_memcpy_33.cpp":42:1)
#loc11 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE131_memcpy_33.cpp":33:9)
#loc12 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE131_memcpy_33.cpp":33:22)
#loc13 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE131_memcpy_33.cpp":35:13)
#loc14 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE131_memcpy_33.cpp":35:32)
#loc15 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE131_memcpy_33.cpp":26:5)
#loc16 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE131_memcpy_33.cpp":26:11)
#loc17 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE131_memcpy_33.cpp":27:5)
#loc18 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE131_memcpy_33.cpp":27:22)
#loc19 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE131_memcpy_33.cpp":28:12)
#loc20 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE131_memcpy_33.cpp":28:5)
#loc21 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE131_memcpy_33.cpp":30:19)
#loc22 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE131_memcpy_33.cpp":30:26)
#loc23 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE131_memcpy_33.cpp":30:28)
#loc24 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE131_memcpy_33.cpp":30:5)
#loc25 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE131_memcpy_33.cpp":31:5)
#loc26 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE131_memcpy_33.cpp":31:33)
#loc27 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE131_memcpy_33.cpp":31:9)
#loc28 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE131_memcpy_33.cpp":31:17)
#loc29 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE131_memcpy_33.cpp":31:23)
#loc30 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE131_memcpy_33.cpp":31:24)
#loc31 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE131_memcpy_33.cpp":31:30)
#loc32 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE131_memcpy_33.cpp":31:29)
#loc33 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE131_memcpy_33.cpp":32:5)
#loc34 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE131_memcpy_33.cpp":41:5)
#loc35 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE131_memcpy_33.cpp":34:9)
#loc36 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE131_memcpy_33.cpp":40:9)
#loc37 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE131_memcpy_33.cpp":37:20)
#loc38 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE131_memcpy_33.cpp":37:26)
#loc39 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE131_memcpy_33.cpp":37:34)
#loc40 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE131_memcpy_33.cpp":37:37)
#loc41 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE131_memcpy_33.cpp":37:47)
#loc42 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE131_memcpy_33.cpp":37:13)
#loc43 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE131_memcpy_33.cpp":37:48)
#loc44 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE131_memcpy_33.cpp":38:26)
#loc45 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE131_memcpy_33.cpp":38:31)
#loc46 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE131_memcpy_33.cpp":38:32)
#loc47 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE131_memcpy_33.cpp":38:13)
#loc48 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE131_memcpy_33.cpp":39:13)
#loc49 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE131_memcpy_33.cpp":39:18)
#loc50 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE131_memcpy_33.cpp":49:1)
#loc51 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE131_memcpy_33.cpp":67:1)
#loc52 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE131_memcpy_33.cpp":58:9)
#loc53 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE131_memcpy_33.cpp":58:22)
#loc54 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE131_memcpy_33.cpp":60:13)
#loc55 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE131_memcpy_33.cpp":60:32)
#loc56 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE131_memcpy_33.cpp":51:5)
#loc57 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE131_memcpy_33.cpp":51:11)
#loc58 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE131_memcpy_33.cpp":52:5)
#loc59 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE131_memcpy_33.cpp":52:22)
#loc60 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE131_memcpy_33.cpp":53:12)
#loc61 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE131_memcpy_33.cpp":53:5)
#loc62 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE131_memcpy_33.cpp":55:19)
#loc63 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE131_memcpy_33.cpp":55:26)
#loc64 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE131_memcpy_33.cpp":55:29)
#loc65 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE131_memcpy_33.cpp":55:39)
#loc66 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE131_memcpy_33.cpp":55:40)
#loc67 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE131_memcpy_33.cpp":55:5)
#loc68 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE131_memcpy_33.cpp":56:5)
#loc69 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE131_memcpy_33.cpp":56:33)
#loc70 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE131_memcpy_33.cpp":56:9)
#loc71 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE131_memcpy_33.cpp":56:17)
#loc72 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE131_memcpy_33.cpp":56:23)
#loc73 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE131_memcpy_33.cpp":56:24)
#loc74 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE131_memcpy_33.cpp":56:30)
#loc75 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE131_memcpy_33.cpp":56:29)
#loc76 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE131_memcpy_33.cpp":57:5)
#loc77 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE131_memcpy_33.cpp":66:5)
#loc78 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE131_memcpy_33.cpp":59:9)
#loc79 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE131_memcpy_33.cpp":65:9)
#loc80 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE131_memcpy_33.cpp":62:20)
#loc81 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE131_memcpy_33.cpp":62:26)
#loc82 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE131_memcpy_33.cpp":62:34)
#loc83 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE131_memcpy_33.cpp":62:37)
#loc84 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE131_memcpy_33.cpp":62:47)
#loc85 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE131_memcpy_33.cpp":62:13)
#loc86 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE131_memcpy_33.cpp":62:48)
#loc87 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE131_memcpy_33.cpp":63:26)
#loc88 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE131_memcpy_33.cpp":63:31)
#loc89 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE131_memcpy_33.cpp":63:32)
#loc90 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE131_memcpy_33.cpp":63:13)
#loc91 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE131_memcpy_33.cpp":64:13)
#loc92 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE131_memcpy_33.cpp":64:18)
#loc93 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE131_memcpy_33.cpp":69:1)
#loc94 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE131_memcpy_33.cpp":72:1)
#loc95 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE131_memcpy_33.cpp":71:5)
#loc96 = loc(fused[#loc1, #loc2])
#loc97 = loc(fused[#loc3, #loc4])
#loc98 = loc(fused[#loc5, #loc6])
#loc99 = loc(fused[#loc7, #loc8])
#loc100 = loc(fused[#loc9, #loc10])
#loc101 = loc(fused[#loc11, #loc12])
#loc102 = loc(fused[#loc13, #loc14])
#loc103 = loc(fused[#loc15, #loc16])
#loc104 = loc(fused[#loc17, #loc18])
#loc105 = loc(fused[#loc20, #loc19])
#loc106 = loc(fused[#loc21, #loc23])
#loc107 = loc(fused[#loc24, #loc23])
#loc108 = loc(fused[#loc25, #loc26])
#loc109 = loc(fused[#loc27, #loc28])
#loc110 = loc(fused[#loc29, #loc26])
#loc111 = loc(fused[#loc33, #loc34])
#loc112 = loc(fused[#loc35, #loc36])
#loc113 = loc(fused[#loc40, #loc41])
#loc114 = loc(fused[#loc39, #loc41])
#loc115 = loc(fused[#loc42, #loc43])
#loc116 = loc(fused[#loc50, #loc51])
#loc117 = loc(fused[#loc52, #loc53])
#loc118 = loc(fused[#loc54, #loc55])
#loc119 = loc(fused[#loc56, #loc57])
#loc120 = loc(fused[#loc58, #loc59])
#loc121 = loc(fused[#loc61, #loc60])
#loc122 = loc(fused[#loc64, #loc65])
#loc123 = loc(fused[#loc63, #loc65])
#loc124 = loc(fused[#loc62, #loc66])
#loc125 = loc(fused[#loc67, #loc66])
#loc126 = loc(fused[#loc68, #loc69])
#loc127 = loc(fused[#loc70, #loc71])
#loc128 = loc(fused[#loc72, #loc69])
#loc129 = loc(fused[#loc76, #loc77])
#loc130 = loc(fused[#loc78, #loc79])
#loc131 = loc(fused[#loc83, #loc84])
#loc132 = loc(fused[#loc82, #loc84])
#loc133 = loc(fused[#loc85, #loc86])
#loc134 = loc(fused[#loc93, #loc94])
