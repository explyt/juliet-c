!s16i = !cir.int<s, 16>
!s32i = !cir.int<s, 32>
!s64i = !cir.int<s, 64>
!s8i = !cir.int<s, 8>
!u32i = !cir.int<u, 32>
#fn_attr = #cir<extra({nothrow = #cir.nothrow})>
#fn_attr1 = #cir<extra({inline = #cir.inline<no>, nothrow = #cir.nothrow, optnone = #cir.optnone, uwtable = #cir.uwtable<async>})>
module @"/workspaces/juliet-c/testcases/CWE190_Integer_Overflow/s05/CWE190_Integer_Overflow__short_rand_square_03.c" attributes {cir.lang = #cir.lang<c>, cir.sob = #cir.signed_overflow_behavior<undefined>, cir.triple = "x86_64-unknown-linux-gnu", cir.type_size_info = #cir.type_size_info<char = 8, int = 32, size_t = 64>, cir.uwtable = #cir.uwtable<async>, dlti.dl_spec = #dlti.dl_spec<!llvm.ptr<271> = dense<32> : vector<4xi64>, !llvm.ptr<272> = dense<64> : vector<4xi64>, !llvm.ptr<270> = dense<32> : vector<4xi64>, i64 = dense<64> : vector<2xi64>, i128 = dense<128> : vector<2xi64>, f80 = dense<128> : vector<2xi64>, !llvm.ptr = dense<64> : vector<4xi64>, i1 = dense<8> : vector<2xi64>, i8 = dense<8> : vector<2xi64>, i16 = dense<16> : vector<2xi64>, i32 = dense<32> : vector<2xi64>, f16 = dense<16> : vector<2xi64>, f128 = dense<128> : vector<2xi64>, f64 = dense<64> : vector<2xi64>, "dlti.mangling_mode" = "e", "dlti.stack_alignment" = 128 : i64, "dlti.endianness" = "little">} {
  cir.func private @rand() -> !s32i extra(#fn_attr) loc(#loc171)
  cir.func private @printIntLine(!s32i) loc(#loc172)
  cir.func no_proto @CWE190_Integer_Overflow__short_rand_square_03_bad() extra(#fn_attr1) {
    %0 = cir.alloca !s16i, !cir.ptr<!s16i>, ["data"] {alignment = 2 : i64} loc(#loc174)
    %1 = cir.const #cir.int<0> : !s32i loc(#loc9)
    %2 = cir.cast(integral, %1 : !s32i), !s16i loc(#loc9)
    cir.store %2, %0 : !s16i, !cir.ptr<!s16i> loc(#loc175)
    cir.scope {
      %3 = cir.const #cir.int<5> : !s32i loc(#loc13)
      %4 = cir.const #cir.int<5> : !s32i loc(#loc14)
      %5 = cir.cmp(eq, %3, %4) : !s32i, !cir.bool loc(#loc177)
      cir.if %5 {
        %6 = cir.call @rand() : () -> !s32i extra(#fn_attr) loc(#loc16)
        %7 = cir.const #cir.int<1> : !s32i loc(#loc16)
        %8 = cir.binop(and, %6, %7) : !s32i loc(#loc16)
        %9 = cir.cast(int_to_bool, %8 : !s32i), !cir.bool loc(#loc16)
        %10 = cir.ternary(%9, true {
          %13 = cir.call @rand() : () -> !s32i extra(#fn_attr) loc(#loc16)
          %14 = cir.cast(integral, %13 : !s32i), !u32i loc(#loc16)
          %15 = cir.const #cir.int<30> : !s32i loc(#loc16)
          %16 = cir.shift(left, %14 : !u32i, %15 : !s32i) -> !u32i loc(#loc16)
          %17 = cir.call @rand() : () -> !s32i extra(#fn_attr) loc(#loc16)
          %18 = cir.cast(integral, %17 : !s32i), !u32i loc(#loc16)
          %19 = cir.const #cir.int<15> : !s32i loc(#loc16)
          %20 = cir.shift(left, %18 : !u32i, %19 : !s32i) -> !u32i loc(#loc16)
          %21 = cir.binop(xor, %16, %20) : !u32i loc(#loc16)
          %22 = cir.call @rand() : () -> !s32i extra(#fn_attr) loc(#loc16)
          %23 = cir.cast(integral, %22 : !s32i), !u32i loc(#loc16)
          %24 = cir.binop(xor, %21, %23) : !u32i loc(#loc16)
          cir.yield %24 : !u32i loc(#loc16)
        }, false {
          %13 = cir.call @rand() : () -> !s32i extra(#fn_attr) loc(#loc16)
          %14 = cir.cast(integral, %13 : !s32i), !u32i loc(#loc16)
          %15 = cir.const #cir.int<30> : !s32i loc(#loc16)
          %16 = cir.shift(left, %14 : !u32i, %15 : !s32i) -> !u32i loc(#loc16)
          %17 = cir.call @rand() : () -> !s32i extra(#fn_attr) loc(#loc16)
          %18 = cir.cast(integral, %17 : !s32i), !u32i loc(#loc16)
          %19 = cir.const #cir.int<15> : !s32i loc(#loc16)
          %20 = cir.shift(left, %18 : !u32i, %19 : !s32i) -> !u32i loc(#loc16)
          %21 = cir.binop(xor, %16, %20) : !u32i loc(#loc16)
          %22 = cir.call @rand() : () -> !s32i extra(#fn_attr) loc(#loc16)
          %23 = cir.cast(integral, %22 : !s32i), !u32i loc(#loc16)
          %24 = cir.binop(xor, %21, %23) : !u32i loc(#loc16)
          %25 = cir.unary(minus, %24) : !u32i, !u32i loc(#loc16)
          %26 = cir.const #cir.int<1> : !s32i loc(#loc16)
          %27 = cir.cast(integral, %26 : !s32i), !u32i loc(#loc16)
          %28 = cir.binop(sub, %25, %27) : !u32i loc(#loc16)
          cir.yield %28 : !u32i loc(#loc16)
        }) : (!cir.bool) -> !u32i loc(#loc16)
        %11 = cir.cast(integral, %10 : !u32i), !s32i loc(#loc16)
        %12 = cir.cast(integral, %11 : !s32i), !s16i loc(#loc16)
        cir.store %12, %0 : !s16i, !cir.ptr<!s16i> loc(#loc179)
      } loc(#loc178)
    } loc(#loc176)
    cir.scope {
      %3 = cir.const #cir.int<5> : !s32i loc(#loc20)
      %4 = cir.const #cir.int<5> : !s32i loc(#loc21)
      %5 = cir.cmp(eq, %3, %4) : !s32i, !cir.bool loc(#loc181)
      cir.if %5 {
        cir.scope {
          %6 = cir.alloca !s16i, !cir.ptr<!s16i>, ["result", init] {alignment = 2 : i64} loc(#loc184)
          %7 = cir.load %0 : !cir.ptr<!s16i>, !s16i loc(#loc27)
          %8 = cir.cast(integral, %7 : !s16i), !s32i loc(#loc27)
          %9 = cir.load %0 : !cir.ptr<!s16i>, !s16i loc(#loc26)
          %10 = cir.cast(integral, %9 : !s16i), !s32i loc(#loc26)
          %11 = cir.binop(mul, %8, %10) nsw : !s32i loc(#loc27)
          %12 = cir.cast(integral, %11 : !s32i), !s16i loc(#loc27)
          cir.store %12, %6 : !s16i, !cir.ptr<!s16i> loc(#loc184)
          %13 = cir.load %6 : !cir.ptr<!s16i>, !s16i loc(#loc28)
          %14 = cir.cast(integral, %13 : !s16i), !s32i loc(#loc28)
          cir.call @printIntLine(%14) : (!s32i) -> () loc(#loc29)
        } loc(#loc183)
      } loc(#loc182)
    } loc(#loc180)
    cir.return loc(#loc6)
  } loc(#loc173)
  cir.func no_proto @CWE190_Integer_Overflow__short_rand_square_03_good() extra(#fn_attr1) {
    %0 = cir.get_global @goodB2G1 : !cir.ptr<!cir.func<()>> loc(#loc186)
    cir.call %0() : (!cir.ptr<!cir.func<()>>) -> () loc(#loc32)
    %1 = cir.get_global @goodB2G2 : !cir.ptr<!cir.func<()>> loc(#loc187)
    cir.call %1() : (!cir.ptr<!cir.func<()>>) -> () loc(#loc34)
    %2 = cir.get_global @goodG2B1 : !cir.ptr<!cir.func<()>> loc(#loc188)
    cir.call %2() : (!cir.ptr<!cir.func<()>>) -> () loc(#loc36)
    %3 = cir.get_global @goodG2B2 : !cir.ptr<!cir.func<()>> loc(#loc189)
    cir.call %3() : (!cir.ptr<!cir.func<()>>) -> () loc(#loc38)
    cir.return loc(#loc31)
  } loc(#loc185)
  cir.func private @printLine(!cir.ptr<!s8i>) loc(#loc190)
  cir.global "private" constant cir_private dsolocal @".str" = #cir.const_array<"Benign, fixed string\00" : !cir.array<!s8i x 21>> : !cir.array<!s8i x 21> {alignment = 1 : i64} loc(#loc42)
  cir.func private @sqrt(!cir.double) -> !cir.double extra(#fn_attr) loc(#loc43)
  cir.global "private" constant cir_private dsolocal @".str.1" = #cir.const_array<"data value is too large to perform arithmetic safely.\00" : !cir.array<!s8i x 54>> : !cir.array<!s8i x 54> {alignment = 1 : i64} loc(#loc44)
  cir.func no_proto internal private @goodB2G1() extra(#fn_attr1) {
    %0 = cir.alloca !s16i, !cir.ptr<!s16i>, ["data"] {alignment = 2 : i64} loc(#loc192)
    %1 = cir.const #cir.int<0> : !s32i loc(#loc49)
    %2 = cir.cast(integral, %1 : !s32i), !s16i loc(#loc49)
    cir.store %2, %0 : !s16i, !cir.ptr<!s16i> loc(#loc193)
    cir.scope {
      %3 = cir.const #cir.int<5> : !s32i loc(#loc53)
      %4 = cir.const #cir.int<5> : !s32i loc(#loc54)
      %5 = cir.cmp(eq, %3, %4) : !s32i, !cir.bool loc(#loc195)
      cir.if %5 {
        %6 = cir.call @rand() : () -> !s32i extra(#fn_attr) loc(#loc56)
        %7 = cir.const #cir.int<1> : !s32i loc(#loc56)
        %8 = cir.binop(and, %6, %7) : !s32i loc(#loc56)
        %9 = cir.cast(int_to_bool, %8 : !s32i), !cir.bool loc(#loc56)
        %10 = cir.ternary(%9, true {
          %13 = cir.call @rand() : () -> !s32i extra(#fn_attr) loc(#loc56)
          %14 = cir.cast(integral, %13 : !s32i), !u32i loc(#loc56)
          %15 = cir.const #cir.int<30> : !s32i loc(#loc56)
          %16 = cir.shift(left, %14 : !u32i, %15 : !s32i) -> !u32i loc(#loc56)
          %17 = cir.call @rand() : () -> !s32i extra(#fn_attr) loc(#loc56)
          %18 = cir.cast(integral, %17 : !s32i), !u32i loc(#loc56)
          %19 = cir.const #cir.int<15> : !s32i loc(#loc56)
          %20 = cir.shift(left, %18 : !u32i, %19 : !s32i) -> !u32i loc(#loc56)
          %21 = cir.binop(xor, %16, %20) : !u32i loc(#loc56)
          %22 = cir.call @rand() : () -> !s32i extra(#fn_attr) loc(#loc56)
          %23 = cir.cast(integral, %22 : !s32i), !u32i loc(#loc56)
          %24 = cir.binop(xor, %21, %23) : !u32i loc(#loc56)
          cir.yield %24 : !u32i loc(#loc56)
        }, false {
          %13 = cir.call @rand() : () -> !s32i extra(#fn_attr) loc(#loc56)
          %14 = cir.cast(integral, %13 : !s32i), !u32i loc(#loc56)
          %15 = cir.const #cir.int<30> : !s32i loc(#loc56)
          %16 = cir.shift(left, %14 : !u32i, %15 : !s32i) -> !u32i loc(#loc56)
          %17 = cir.call @rand() : () -> !s32i extra(#fn_attr) loc(#loc56)
          %18 = cir.cast(integral, %17 : !s32i), !u32i loc(#loc56)
          %19 = cir.const #cir.int<15> : !s32i loc(#loc56)
          %20 = cir.shift(left, %18 : !u32i, %19 : !s32i) -> !u32i loc(#loc56)
          %21 = cir.binop(xor, %16, %20) : !u32i loc(#loc56)
          %22 = cir.call @rand() : () -> !s32i extra(#fn_attr) loc(#loc56)
          %23 = cir.cast(integral, %22 : !s32i), !u32i loc(#loc56)
          %24 = cir.binop(xor, %21, %23) : !u32i loc(#loc56)
          %25 = cir.unary(minus, %24) : !u32i, !u32i loc(#loc56)
          %26 = cir.const #cir.int<1> : !s32i loc(#loc56)
          %27 = cir.cast(integral, %26 : !s32i), !u32i loc(#loc56)
          %28 = cir.binop(sub, %25, %27) : !u32i loc(#loc56)
          cir.yield %28 : !u32i loc(#loc56)
        }) : (!cir.bool) -> !u32i loc(#loc56)
        %11 = cir.cast(integral, %10 : !u32i), !s32i loc(#loc56)
        %12 = cir.cast(integral, %11 : !s32i), !s16i loc(#loc56)
        cir.store %12, %0 : !s16i, !cir.ptr<!s16i> loc(#loc197)
      } loc(#loc196)
    } loc(#loc194)
    cir.scope {
      %3 = cir.const #cir.int<5> : !s32i loc(#loc60)
      %4 = cir.const #cir.int<5> : !s32i loc(#loc61)
      %5 = cir.cmp(ne, %3, %4) : !s32i, !cir.bool loc(#loc199)
      cir.if %5 {
        %6 = cir.get_global @".str" : !cir.ptr<!cir.array<!s8i x 21>> loc(#loc42)
        %7 = cir.cast(array_to_ptrdecay, %6 : !cir.ptr<!cir.array<!s8i x 21>>), !cir.ptr<!s8i> loc(#loc42)
        cir.call @printLine(%7) : (!cir.ptr<!s8i>) -> () loc(#loc65)
      } else {
        cir.scope {
          %6 = cir.load %0 : !cir.ptr<!s16i>, !s16i loc(#loc68)
          %7 = cir.cast(integral, %6 : !s16i), !s64i loc(#loc68)
          %8 = cir.cast(integral, %7 : !s64i), !s32i loc(#loc68)
          %9 = cir.abs %8 poison : !s32i loc(#loc69)
          %10 = cir.cast(integral, %9 : !s32i), !s64i loc(#loc69)
          %11 = cir.get_global @sqrt : !cir.ptr<!cir.func<(!cir.double) -> !cir.double>> loc(#loc70)
          %12 = cir.const #cir.int<32767> : !s32i loc(#loc71)
          %13 = cir.cast(int_to_float, %12 : !s32i), !cir.double loc(#loc71)
          %14 = cir.call @sqrt(%13) : (!cir.double) -> !cir.double extra(#fn_attr) loc(#loc70)
          %15 = cir.cast(float_to_int, %14 : !cir.double), !s64i loc(#loc70)
          %16 = cir.cmp(le, %10, %15) : !s64i, !cir.bool loc(#loc202)
          cir.if %16 {
            %17 = cir.alloca !s16i, !cir.ptr<!s16i>, ["result", init] {alignment = 2 : i64} loc(#loc204)
            %18 = cir.load %0 : !cir.ptr<!s16i>, !s16i loc(#loc78)
            %19 = cir.cast(integral, %18 : !s16i), !s32i loc(#loc78)
            %20 = cir.load %0 : !cir.ptr<!s16i>, !s16i loc(#loc77)
            %21 = cir.cast(integral, %20 : !s16i), !s32i loc(#loc77)
            %22 = cir.binop(mul, %19, %21) nsw : !s32i loc(#loc78)
            %23 = cir.cast(integral, %22 : !s32i), !s16i loc(#loc78)
            cir.store %23, %17 : !s16i, !cir.ptr<!s16i> loc(#loc204)
            %24 = cir.load %17 : !cir.ptr<!s16i>, !s16i loc(#loc79)
            %25 = cir.cast(integral, %24 : !s16i), !s32i loc(#loc79)
            cir.call @printIntLine(%25) : (!s32i) -> () loc(#loc80)
          } else {
            %17 = cir.get_global @".str.1" : !cir.ptr<!cir.array<!s8i x 54>> loc(#loc44)
            %18 = cir.cast(array_to_ptrdecay, %17 : !cir.ptr<!cir.array<!s8i x 54>>), !cir.ptr<!s8i> loc(#loc44)
            cir.call @printLine(%18) : (!cir.ptr<!s8i>) -> () loc(#loc81)
          } loc(#loc203)
        } loc(#loc201)
      } loc(#loc200)
    } loc(#loc198)
    cir.return loc(#loc46)
  } loc(#loc191)
  cir.func no_proto internal private @goodB2G2() extra(#fn_attr1) {
    %0 = cir.alloca !s16i, !cir.ptr<!s16i>, ["data"] {alignment = 2 : i64} loc(#loc206)
    %1 = cir.const #cir.int<0> : !s32i loc(#loc86)
    %2 = cir.cast(integral, %1 : !s32i), !s16i loc(#loc86)
    cir.store %2, %0 : !s16i, !cir.ptr<!s16i> loc(#loc207)
    cir.scope {
      %3 = cir.const #cir.int<5> : !s32i loc(#loc90)
      %4 = cir.const #cir.int<5> : !s32i loc(#loc91)
      %5 = cir.cmp(eq, %3, %4) : !s32i, !cir.bool loc(#loc209)
      cir.if %5 {
        %6 = cir.call @rand() : () -> !s32i extra(#fn_attr) loc(#loc93)
        %7 = cir.const #cir.int<1> : !s32i loc(#loc93)
        %8 = cir.binop(and, %6, %7) : !s32i loc(#loc93)
        %9 = cir.cast(int_to_bool, %8 : !s32i), !cir.bool loc(#loc93)
        %10 = cir.ternary(%9, true {
          %13 = cir.call @rand() : () -> !s32i extra(#fn_attr) loc(#loc93)
          %14 = cir.cast(integral, %13 : !s32i), !u32i loc(#loc93)
          %15 = cir.const #cir.int<30> : !s32i loc(#loc93)
          %16 = cir.shift(left, %14 : !u32i, %15 : !s32i) -> !u32i loc(#loc93)
          %17 = cir.call @rand() : () -> !s32i extra(#fn_attr) loc(#loc93)
          %18 = cir.cast(integral, %17 : !s32i), !u32i loc(#loc93)
          %19 = cir.const #cir.int<15> : !s32i loc(#loc93)
          %20 = cir.shift(left, %18 : !u32i, %19 : !s32i) -> !u32i loc(#loc93)
          %21 = cir.binop(xor, %16, %20) : !u32i loc(#loc93)
          %22 = cir.call @rand() : () -> !s32i extra(#fn_attr) loc(#loc93)
          %23 = cir.cast(integral, %22 : !s32i), !u32i loc(#loc93)
          %24 = cir.binop(xor, %21, %23) : !u32i loc(#loc93)
          cir.yield %24 : !u32i loc(#loc93)
        }, false {
          %13 = cir.call @rand() : () -> !s32i extra(#fn_attr) loc(#loc93)
          %14 = cir.cast(integral, %13 : !s32i), !u32i loc(#loc93)
          %15 = cir.const #cir.int<30> : !s32i loc(#loc93)
          %16 = cir.shift(left, %14 : !u32i, %15 : !s32i) -> !u32i loc(#loc93)
          %17 = cir.call @rand() : () -> !s32i extra(#fn_attr) loc(#loc93)
          %18 = cir.cast(integral, %17 : !s32i), !u32i loc(#loc93)
          %19 = cir.const #cir.int<15> : !s32i loc(#loc93)
          %20 = cir.shift(left, %18 : !u32i, %19 : !s32i) -> !u32i loc(#loc93)
          %21 = cir.binop(xor, %16, %20) : !u32i loc(#loc93)
          %22 = cir.call @rand() : () -> !s32i extra(#fn_attr) loc(#loc93)
          %23 = cir.cast(integral, %22 : !s32i), !u32i loc(#loc93)
          %24 = cir.binop(xor, %21, %23) : !u32i loc(#loc93)
          %25 = cir.unary(minus, %24) : !u32i, !u32i loc(#loc93)
          %26 = cir.const #cir.int<1> : !s32i loc(#loc93)
          %27 = cir.cast(integral, %26 : !s32i), !u32i loc(#loc93)
          %28 = cir.binop(sub, %25, %27) : !u32i loc(#loc93)
          cir.yield %28 : !u32i loc(#loc93)
        }) : (!cir.bool) -> !u32i loc(#loc93)
        %11 = cir.cast(integral, %10 : !u32i), !s32i loc(#loc93)
        %12 = cir.cast(integral, %11 : !s32i), !s16i loc(#loc93)
        cir.store %12, %0 : !s16i, !cir.ptr<!s16i> loc(#loc211)
      } loc(#loc210)
    } loc(#loc208)
    cir.scope {
      %3 = cir.const #cir.int<5> : !s32i loc(#loc97)
      %4 = cir.const #cir.int<5> : !s32i loc(#loc98)
      %5 = cir.cmp(eq, %3, %4) : !s32i, !cir.bool loc(#loc213)
      cir.if %5 {
        cir.scope {
          %6 = cir.load %0 : !cir.ptr<!s16i>, !s16i loc(#loc102)
          %7 = cir.cast(integral, %6 : !s16i), !s64i loc(#loc102)
          %8 = cir.cast(integral, %7 : !s64i), !s32i loc(#loc102)
          %9 = cir.abs %8 poison : !s32i loc(#loc103)
          %10 = cir.cast(integral, %9 : !s32i), !s64i loc(#loc103)
          %11 = cir.get_global @sqrt : !cir.ptr<!cir.func<(!cir.double) -> !cir.double>> loc(#loc104)
          %12 = cir.const #cir.int<32767> : !s32i loc(#loc105)
          %13 = cir.cast(int_to_float, %12 : !s32i), !cir.double loc(#loc105)
          %14 = cir.call @sqrt(%13) : (!cir.double) -> !cir.double extra(#fn_attr) loc(#loc104)
          %15 = cir.cast(float_to_int, %14 : !cir.double), !s64i loc(#loc104)
          %16 = cir.cmp(le, %10, %15) : !s64i, !cir.bool loc(#loc216)
          cir.if %16 {
            %17 = cir.alloca !s16i, !cir.ptr<!s16i>, ["result", init] {alignment = 2 : i64} loc(#loc218)
            %18 = cir.load %0 : !cir.ptr<!s16i>, !s16i loc(#loc112)
            %19 = cir.cast(integral, %18 : !s16i), !s32i loc(#loc112)
            %20 = cir.load %0 : !cir.ptr<!s16i>, !s16i loc(#loc111)
            %21 = cir.cast(integral, %20 : !s16i), !s32i loc(#loc111)
            %22 = cir.binop(mul, %19, %21) nsw : !s32i loc(#loc112)
            %23 = cir.cast(integral, %22 : !s32i), !s16i loc(#loc112)
            cir.store %23, %17 : !s16i, !cir.ptr<!s16i> loc(#loc218)
            %24 = cir.load %17 : !cir.ptr<!s16i>, !s16i loc(#loc113)
            %25 = cir.cast(integral, %24 : !s16i), !s32i loc(#loc113)
            cir.call @printIntLine(%25) : (!s32i) -> () loc(#loc114)
          } else {
            %17 = cir.get_global @".str.1" : !cir.ptr<!cir.array<!s8i x 54>> loc(#loc115)
            %18 = cir.cast(array_to_ptrdecay, %17 : !cir.ptr<!cir.array<!s8i x 54>>), !cir.ptr<!s8i> loc(#loc115)
            cir.call @printLine(%18) : (!cir.ptr<!s8i>) -> () loc(#loc116)
          } loc(#loc217)
        } loc(#loc215)
      } loc(#loc214)
    } loc(#loc212)
    cir.return loc(#loc83)
  } loc(#loc205)
  cir.func no_proto internal private @goodG2B1() extra(#fn_attr1) {
    %0 = cir.alloca !s16i, !cir.ptr<!s16i>, ["data"] {alignment = 2 : i64} loc(#loc220)
    %1 = cir.const #cir.int<0> : !s32i loc(#loc121)
    %2 = cir.cast(integral, %1 : !s32i), !s16i loc(#loc121)
    cir.store %2, %0 : !s16i, !cir.ptr<!s16i> loc(#loc221)
    cir.scope {
      %3 = cir.const #cir.int<5> : !s32i loc(#loc125)
      %4 = cir.const #cir.int<5> : !s32i loc(#loc126)
      %5 = cir.cmp(ne, %3, %4) : !s32i, !cir.bool loc(#loc223)
      cir.if %5 {
        %6 = cir.get_global @".str" : !cir.ptr<!cir.array<!s8i x 21>> loc(#loc130)
        %7 = cir.cast(array_to_ptrdecay, %6 : !cir.ptr<!cir.array<!s8i x 21>>), !cir.ptr<!s8i> loc(#loc130)
        cir.call @printLine(%7) : (!cir.ptr<!s8i>) -> () loc(#loc131)
      } else {
        %6 = cir.const #cir.int<2> : !s32i loc(#loc132)
        %7 = cir.cast(integral, %6 : !s32i), !s16i loc(#loc132)
        cir.store %7, %0 : !s16i, !cir.ptr<!s16i> loc(#loc225)
      } loc(#loc224)
    } loc(#loc222)
    cir.scope {
      %3 = cir.const #cir.int<5> : !s32i loc(#loc136)
      %4 = cir.const #cir.int<5> : !s32i loc(#loc137)
      %5 = cir.cmp(eq, %3, %4) : !s32i, !cir.bool loc(#loc227)
      cir.if %5 {
        cir.scope {
          %6 = cir.alloca !s16i, !cir.ptr<!s16i>, ["result", init] {alignment = 2 : i64} loc(#loc230)
          %7 = cir.load %0 : !cir.ptr<!s16i>, !s16i loc(#loc143)
          %8 = cir.cast(integral, %7 : !s16i), !s32i loc(#loc143)
          %9 = cir.load %0 : !cir.ptr<!s16i>, !s16i loc(#loc142)
          %10 = cir.cast(integral, %9 : !s16i), !s32i loc(#loc142)
          %11 = cir.binop(mul, %8, %10) nsw : !s32i loc(#loc143)
          %12 = cir.cast(integral, %11 : !s32i), !s16i loc(#loc143)
          cir.store %12, %6 : !s16i, !cir.ptr<!s16i> loc(#loc230)
          %13 = cir.load %6 : !cir.ptr<!s16i>, !s16i loc(#loc144)
          %14 = cir.cast(integral, %13 : !s16i), !s32i loc(#loc144)
          cir.call @printIntLine(%14) : (!s32i) -> () loc(#loc145)
        } loc(#loc229)
      } loc(#loc228)
    } loc(#loc226)
    cir.return loc(#loc118)
  } loc(#loc219)
  cir.func no_proto internal private @goodG2B2() extra(#fn_attr1) {
    %0 = cir.alloca !s16i, !cir.ptr<!s16i>, ["data"] {alignment = 2 : i64} loc(#loc232)
    %1 = cir.const #cir.int<0> : !s32i loc(#loc150)
    %2 = cir.cast(integral, %1 : !s32i), !s16i loc(#loc150)
    cir.store %2, %0 : !s16i, !cir.ptr<!s16i> loc(#loc233)
    cir.scope {
      %3 = cir.const #cir.int<5> : !s32i loc(#loc154)
      %4 = cir.const #cir.int<5> : !s32i loc(#loc155)
      %5 = cir.cmp(eq, %3, %4) : !s32i, !cir.bool loc(#loc235)
      cir.if %5 {
        %6 = cir.const #cir.int<2> : !s32i loc(#loc157)
        %7 = cir.cast(integral, %6 : !s32i), !s16i loc(#loc157)
        cir.store %7, %0 : !s16i, !cir.ptr<!s16i> loc(#loc237)
      } loc(#loc236)
    } loc(#loc234)
    cir.scope {
      %3 = cir.const #cir.int<5> : !s32i loc(#loc161)
      %4 = cir.const #cir.int<5> : !s32i loc(#loc162)
      %5 = cir.cmp(eq, %3, %4) : !s32i, !cir.bool loc(#loc239)
      cir.if %5 {
        cir.scope {
          %6 = cir.alloca !s16i, !cir.ptr<!s16i>, ["result", init] {alignment = 2 : i64} loc(#loc242)
          %7 = cir.load %0 : !cir.ptr<!s16i>, !s16i loc(#loc168)
          %8 = cir.cast(integral, %7 : !s16i), !s32i loc(#loc168)
          %9 = cir.load %0 : !cir.ptr<!s16i>, !s16i loc(#loc167)
          %10 = cir.cast(integral, %9 : !s16i), !s32i loc(#loc167)
          %11 = cir.binop(mul, %8, %10) nsw : !s32i loc(#loc168)
          %12 = cir.cast(integral, %11 : !s32i), !s16i loc(#loc168)
          cir.store %12, %6 : !s16i, !cir.ptr<!s16i> loc(#loc242)
          %13 = cir.load %6 : !cir.ptr<!s16i>, !s16i loc(#loc169)
          %14 = cir.cast(integral, %13 : !s16i), !s32i loc(#loc169)
          cir.call @printIntLine(%14) : (!s32i) -> () loc(#loc170)
        } loc(#loc241)
      } loc(#loc240)
    } loc(#loc238)
    cir.return loc(#loc147)
  } loc(#loc231)
} loc(#loc)
#loc = loc("/workspaces/juliet-c/testcases/CWE190_Integer_Overflow/s05/CWE190_Integer_Overflow__short_rand_square_03.c":0:0)
#loc1 = loc("/usr/include/stdlib.h":573:1)
#loc2 = loc("/usr/include/stdlib.h":573:24)
#loc3 = loc("../../../testcasesupport/std_testcase_io.h":18:1)
#loc4 = loc("../../../testcasesupport/std_testcase_io.h":18:33)
#loc5 = loc("CWE190_Integer_Overflow__short_rand_square_03.c":24:1)
#loc6 = loc("CWE190_Integer_Overflow__short_rand_square_03.c":41:1)
#loc7 = loc("CWE190_Integer_Overflow__short_rand_square_03.c":26:5)
#loc8 = loc("CWE190_Integer_Overflow__short_rand_square_03.c":26:11)
#loc9 = loc("CWE190_Integer_Overflow__short_rand_square_03.c":27:12)
#loc10 = loc("CWE190_Integer_Overflow__short_rand_square_03.c":27:5)
#loc11 = loc("CWE190_Integer_Overflow__short_rand_square_03.c":28:5)
#loc12 = loc("CWE190_Integer_Overflow__short_rand_square_03.c":32:5)
#loc13 = loc("CWE190_Integer_Overflow__short_rand_square_03.c":28:8)
#loc14 = loc("CWE190_Integer_Overflow__short_rand_square_03.c":28:11)
#loc15 = loc("CWE190_Integer_Overflow__short_rand_square_03.c":29:5)
#loc16 = loc("CWE190_Integer_Overflow__short_rand_square_03.c":31:23)
#loc17 = loc("CWE190_Integer_Overflow__short_rand_square_03.c":31:9)
#loc18 = loc("CWE190_Integer_Overflow__short_rand_square_03.c":33:5)
#loc19 = loc("CWE190_Integer_Overflow__short_rand_square_03.c":40:5)
#loc20 = loc("CWE190_Integer_Overflow__short_rand_square_03.c":33:8)
#loc21 = loc("CWE190_Integer_Overflow__short_rand_square_03.c":33:11)
#loc22 = loc("CWE190_Integer_Overflow__short_rand_square_03.c":34:5)
#loc23 = loc("CWE190_Integer_Overflow__short_rand_square_03.c":35:9)
#loc24 = loc("CWE190_Integer_Overflow__short_rand_square_03.c":39:9)
#loc25 = loc("CWE190_Integer_Overflow__short_rand_square_03.c":37:13)
#loc26 = loc("CWE190_Integer_Overflow__short_rand_square_03.c":37:35)
#loc27 = loc("CWE190_Integer_Overflow__short_rand_square_03.c":37:28)
#loc28 = loc("CWE190_Integer_Overflow__short_rand_square_03.c":38:26)
#loc29 = loc("CWE190_Integer_Overflow__short_rand_square_03.c":38:13)
#loc30 = loc("CWE190_Integer_Overflow__short_rand_square_03.c":147:1)
#loc31 = loc("CWE190_Integer_Overflow__short_rand_square_03.c":153:1)
#loc32 = loc("CWE190_Integer_Overflow__short_rand_square_03.c":149:5)
#loc33 = loc("CWE190_Integer_Overflow__short_rand_square_03.c":149:14)
#loc34 = loc("CWE190_Integer_Overflow__short_rand_square_03.c":150:5)
#loc35 = loc("CWE190_Integer_Overflow__short_rand_square_03.c":150:14)
#loc36 = loc("CWE190_Integer_Overflow__short_rand_square_03.c":151:5)
#loc37 = loc("CWE190_Integer_Overflow__short_rand_square_03.c":151:14)
#loc38 = loc("CWE190_Integer_Overflow__short_rand_square_03.c":152:5)
#loc39 = loc("CWE190_Integer_Overflow__short_rand_square_03.c":152:14)
#loc40 = loc("../../../testcasesupport/std_testcase_io.h":14:1)
#loc41 = loc("../../../testcasesupport/std_testcase_io.h":14:33)
#loc42 = loc("CWE190_Integer_Overflow__short_rand_square_03.c":60:19)
#loc43 = loc("/usr/include/x86_64-linux-gnu/bits/mathcalls.h":143:1)
#loc44 = loc("CWE190_Integer_Overflow__short_rand_square_03.c":72:23)
#loc45 = loc("CWE190_Integer_Overflow__short_rand_square_03.c":48:1)
#loc46 = loc("CWE190_Integer_Overflow__short_rand_square_03.c":75:1)
#loc47 = loc("CWE190_Integer_Overflow__short_rand_square_03.c":50:5)
#loc48 = loc("CWE190_Integer_Overflow__short_rand_square_03.c":50:11)
#loc49 = loc("CWE190_Integer_Overflow__short_rand_square_03.c":51:12)
#loc50 = loc("CWE190_Integer_Overflow__short_rand_square_03.c":51:5)
#loc51 = loc("CWE190_Integer_Overflow__short_rand_square_03.c":52:5)
#loc52 = loc("CWE190_Integer_Overflow__short_rand_square_03.c":56:5)
#loc53 = loc("CWE190_Integer_Overflow__short_rand_square_03.c":52:8)
#loc54 = loc("CWE190_Integer_Overflow__short_rand_square_03.c":52:11)
#loc55 = loc("CWE190_Integer_Overflow__short_rand_square_03.c":53:5)
#loc56 = loc("CWE190_Integer_Overflow__short_rand_square_03.c":55:23)
#loc57 = loc("CWE190_Integer_Overflow__short_rand_square_03.c":55:9)
#loc58 = loc("CWE190_Integer_Overflow__short_rand_square_03.c":57:5)
#loc59 = loc("CWE190_Integer_Overflow__short_rand_square_03.c":74:5)
#loc60 = loc("CWE190_Integer_Overflow__short_rand_square_03.c":57:8)
#loc61 = loc("CWE190_Integer_Overflow__short_rand_square_03.c":57:11)
#loc62 = loc("CWE190_Integer_Overflow__short_rand_square_03.c":58:5)
#loc63 = loc("CWE190_Integer_Overflow__short_rand_square_03.c":61:5)
#loc64 = loc("CWE190_Integer_Overflow__short_rand_square_03.c":63:5)
#loc65 = loc("CWE190_Integer_Overflow__short_rand_square_03.c":60:9)
#loc66 = loc("CWE190_Integer_Overflow__short_rand_square_03.c":65:9)
#loc67 = loc("CWE190_Integer_Overflow__short_rand_square_03.c":73:9)
#loc68 = loc("CWE190_Integer_Overflow__short_rand_square_03.c":65:23)
#loc69 = loc("CWE190_Integer_Overflow__short_rand_square_03.c":65:13)
#loc70 = loc("CWE190_Integer_Overflow__short_rand_square_03.c":65:38)
#loc71 = loc("CWE190_Integer_Overflow__short_rand_square_03.c":65:51)
#loc72 = loc("CWE190_Integer_Overflow__short_rand_square_03.c":65:59)
#loc73 = loc("CWE190_Integer_Overflow__short_rand_square_03.c":66:9)
#loc74 = loc("CWE190_Integer_Overflow__short_rand_square_03.c":69:9)
#loc75 = loc("CWE190_Integer_Overflow__short_rand_square_03.c":71:9)
#loc76 = loc("CWE190_Integer_Overflow__short_rand_square_03.c":67:13)
#loc77 = loc("CWE190_Integer_Overflow__short_rand_square_03.c":67:35)
#loc78 = loc("CWE190_Integer_Overflow__short_rand_square_03.c":67:28)
#loc79 = loc("CWE190_Integer_Overflow__short_rand_square_03.c":68:26)
#loc80 = loc("CWE190_Integer_Overflow__short_rand_square_03.c":68:13)
#loc81 = loc("CWE190_Integer_Overflow__short_rand_square_03.c":72:13)
#loc82 = loc("CWE190_Integer_Overflow__short_rand_square_03.c":78:1)
#loc83 = loc("CWE190_Integer_Overflow__short_rand_square_03.c":100:1)
#loc84 = loc("CWE190_Integer_Overflow__short_rand_square_03.c":80:5)
#loc85 = loc("CWE190_Integer_Overflow__short_rand_square_03.c":80:11)
#loc86 = loc("CWE190_Integer_Overflow__short_rand_square_03.c":81:12)
#loc87 = loc("CWE190_Integer_Overflow__short_rand_square_03.c":81:5)
#loc88 = loc("CWE190_Integer_Overflow__short_rand_square_03.c":82:5)
#loc89 = loc("CWE190_Integer_Overflow__short_rand_square_03.c":86:5)
#loc90 = loc("CWE190_Integer_Overflow__short_rand_square_03.c":82:8)
#loc91 = loc("CWE190_Integer_Overflow__short_rand_square_03.c":82:11)
#loc92 = loc("CWE190_Integer_Overflow__short_rand_square_03.c":83:5)
#loc93 = loc("CWE190_Integer_Overflow__short_rand_square_03.c":85:23)
#loc94 = loc("CWE190_Integer_Overflow__short_rand_square_03.c":85:9)
#loc95 = loc("CWE190_Integer_Overflow__short_rand_square_03.c":87:5)
#loc96 = loc("CWE190_Integer_Overflow__short_rand_square_03.c":99:5)
#loc97 = loc("CWE190_Integer_Overflow__short_rand_square_03.c":87:8)
#loc98 = loc("CWE190_Integer_Overflow__short_rand_square_03.c":87:11)
#loc99 = loc("CWE190_Integer_Overflow__short_rand_square_03.c":88:5)
#loc100 = loc("CWE190_Integer_Overflow__short_rand_square_03.c":90:9)
#loc101 = loc("CWE190_Integer_Overflow__short_rand_square_03.c":98:9)
#loc102 = loc("CWE190_Integer_Overflow__short_rand_square_03.c":90:23)
#loc103 = loc("CWE190_Integer_Overflow__short_rand_square_03.c":90:13)
#loc104 = loc("CWE190_Integer_Overflow__short_rand_square_03.c":90:38)
#loc105 = loc("CWE190_Integer_Overflow__short_rand_square_03.c":90:51)
#loc106 = loc("CWE190_Integer_Overflow__short_rand_square_03.c":90:59)
#loc107 = loc("CWE190_Integer_Overflow__short_rand_square_03.c":91:9)
#loc108 = loc("CWE190_Integer_Overflow__short_rand_square_03.c":94:9)
#loc109 = loc("CWE190_Integer_Overflow__short_rand_square_03.c":96:9)
#loc110 = loc("CWE190_Integer_Overflow__short_rand_square_03.c":92:13)
#loc111 = loc("CWE190_Integer_Overflow__short_rand_square_03.c":92:35)
#loc112 = loc("CWE190_Integer_Overflow__short_rand_square_03.c":92:28)
#loc113 = loc("CWE190_Integer_Overflow__short_rand_square_03.c":93:26)
#loc114 = loc("CWE190_Integer_Overflow__short_rand_square_03.c":93:13)
#loc115 = loc("CWE190_Integer_Overflow__short_rand_square_03.c":97:23)
#loc116 = loc("CWE190_Integer_Overflow__short_rand_square_03.c":97:13)
#loc117 = loc("CWE190_Integer_Overflow__short_rand_square_03.c":103:1)
#loc118 = loc("CWE190_Integer_Overflow__short_rand_square_03.c":125:1)
#loc119 = loc("CWE190_Integer_Overflow__short_rand_square_03.c":105:5)
#loc120 = loc("CWE190_Integer_Overflow__short_rand_square_03.c":105:11)
#loc121 = loc("CWE190_Integer_Overflow__short_rand_square_03.c":106:12)
#loc122 = loc("CWE190_Integer_Overflow__short_rand_square_03.c":106:5)
#loc123 = loc("CWE190_Integer_Overflow__short_rand_square_03.c":107:5)
#loc124 = loc("CWE190_Integer_Overflow__short_rand_square_03.c":116:5)
#loc125 = loc("CWE190_Integer_Overflow__short_rand_square_03.c":107:8)
#loc126 = loc("CWE190_Integer_Overflow__short_rand_square_03.c":107:11)
#loc127 = loc("CWE190_Integer_Overflow__short_rand_square_03.c":108:5)
#loc128 = loc("CWE190_Integer_Overflow__short_rand_square_03.c":111:5)
#loc129 = loc("CWE190_Integer_Overflow__short_rand_square_03.c":113:5)
#loc130 = loc("CWE190_Integer_Overflow__short_rand_square_03.c":110:19)
#loc131 = loc("CWE190_Integer_Overflow__short_rand_square_03.c":110:9)
#loc132 = loc("CWE190_Integer_Overflow__short_rand_square_03.c":115:16)
#loc133 = loc("CWE190_Integer_Overflow__short_rand_square_03.c":115:9)
#loc134 = loc("CWE190_Integer_Overflow__short_rand_square_03.c":117:5)
#loc135 = loc("CWE190_Integer_Overflow__short_rand_square_03.c":124:5)
#loc136 = loc("CWE190_Integer_Overflow__short_rand_square_03.c":117:8)
#loc137 = loc("CWE190_Integer_Overflow__short_rand_square_03.c":117:11)
#loc138 = loc("CWE190_Integer_Overflow__short_rand_square_03.c":118:5)
#loc139 = loc("CWE190_Integer_Overflow__short_rand_square_03.c":119:9)
#loc140 = loc("CWE190_Integer_Overflow__short_rand_square_03.c":123:9)
#loc141 = loc("CWE190_Integer_Overflow__short_rand_square_03.c":121:13)
#loc142 = loc("CWE190_Integer_Overflow__short_rand_square_03.c":121:35)
#loc143 = loc("CWE190_Integer_Overflow__short_rand_square_03.c":121:28)
#loc144 = loc("CWE190_Integer_Overflow__short_rand_square_03.c":122:26)
#loc145 = loc("CWE190_Integer_Overflow__short_rand_square_03.c":122:13)
#loc146 = loc("CWE190_Integer_Overflow__short_rand_square_03.c":128:1)
#loc147 = loc("CWE190_Integer_Overflow__short_rand_square_03.c":145:1)
#loc148 = loc("CWE190_Integer_Overflow__short_rand_square_03.c":130:5)
#loc149 = loc("CWE190_Integer_Overflow__short_rand_square_03.c":130:11)
#loc150 = loc("CWE190_Integer_Overflow__short_rand_square_03.c":131:12)
#loc151 = loc("CWE190_Integer_Overflow__short_rand_square_03.c":131:5)
#loc152 = loc("CWE190_Integer_Overflow__short_rand_square_03.c":132:5)
#loc153 = loc("CWE190_Integer_Overflow__short_rand_square_03.c":136:5)
#loc154 = loc("CWE190_Integer_Overflow__short_rand_square_03.c":132:8)
#loc155 = loc("CWE190_Integer_Overflow__short_rand_square_03.c":132:11)
#loc156 = loc("CWE190_Integer_Overflow__short_rand_square_03.c":133:5)
#loc157 = loc("CWE190_Integer_Overflow__short_rand_square_03.c":135:16)
#loc158 = loc("CWE190_Integer_Overflow__short_rand_square_03.c":135:9)
#loc159 = loc("CWE190_Integer_Overflow__short_rand_square_03.c":137:5)
#loc160 = loc("CWE190_Integer_Overflow__short_rand_square_03.c":144:5)
#loc161 = loc("CWE190_Integer_Overflow__short_rand_square_03.c":137:8)
#loc162 = loc("CWE190_Integer_Overflow__short_rand_square_03.c":137:11)
#loc163 = loc("CWE190_Integer_Overflow__short_rand_square_03.c":138:5)
#loc164 = loc("CWE190_Integer_Overflow__short_rand_square_03.c":139:9)
#loc165 = loc("CWE190_Integer_Overflow__short_rand_square_03.c":143:9)
#loc166 = loc("CWE190_Integer_Overflow__short_rand_square_03.c":141:13)
#loc167 = loc("CWE190_Integer_Overflow__short_rand_square_03.c":141:35)
#loc168 = loc("CWE190_Integer_Overflow__short_rand_square_03.c":141:28)
#loc169 = loc("CWE190_Integer_Overflow__short_rand_square_03.c":142:26)
#loc170 = loc("CWE190_Integer_Overflow__short_rand_square_03.c":142:13)
#loc171 = loc(fused[#loc1, #loc2])
#loc172 = loc(fused[#loc3, #loc4])
#loc173 = loc(fused[#loc5, #loc6])
#loc174 = loc(fused[#loc7, #loc8])
#loc175 = loc(fused[#loc10, #loc9])
#loc176 = loc(fused[#loc11, #loc12])
#loc177 = loc(fused[#loc13, #loc14])
#loc178 = loc(fused[#loc15, #loc12])
#loc179 = loc(fused[#loc17, #loc16])
#loc180 = loc(fused[#loc18, #loc19])
#loc181 = loc(fused[#loc20, #loc21])
#loc182 = loc(fused[#loc22, #loc19])
#loc183 = loc(fused[#loc23, #loc24])
#loc184 = loc(fused[#loc25, #loc26])
#loc185 = loc(fused[#loc30, #loc31])
#loc186 = loc(fused[#loc32, #loc33])
#loc187 = loc(fused[#loc34, #loc35])
#loc188 = loc(fused[#loc36, #loc37])
#loc189 = loc(fused[#loc38, #loc39])
#loc190 = loc(fused[#loc40, #loc41])
#loc191 = loc(fused[#loc45, #loc46])
#loc192 = loc(fused[#loc47, #loc48])
#loc193 = loc(fused[#loc50, #loc49])
#loc194 = loc(fused[#loc51, #loc52])
#loc195 = loc(fused[#loc53, #loc54])
#loc196 = loc(fused[#loc55, #loc52])
#loc197 = loc(fused[#loc57, #loc56])
#loc198 = loc(fused[#loc58, #loc59])
#loc199 = loc(fused[#loc60, #loc61])
#loc200 = loc(fused[#loc62, #loc63, #loc64, #loc59])
#loc201 = loc(fused[#loc66, #loc67])
#loc202 = loc(fused[#loc69, #loc72])
#loc203 = loc(fused[#loc73, #loc74, #loc75, #loc67])
#loc204 = loc(fused[#loc76, #loc77])
#loc205 = loc(fused[#loc82, #loc83])
#loc206 = loc(fused[#loc84, #loc85])
#loc207 = loc(fused[#loc87, #loc86])
#loc208 = loc(fused[#loc88, #loc89])
#loc209 = loc(fused[#loc90, #loc91])
#loc210 = loc(fused[#loc92, #loc89])
#loc211 = loc(fused[#loc94, #loc93])
#loc212 = loc(fused[#loc95, #loc96])
#loc213 = loc(fused[#loc97, #loc98])
#loc214 = loc(fused[#loc99, #loc96])
#loc215 = loc(fused[#loc100, #loc101])
#loc216 = loc(fused[#loc103, #loc106])
#loc217 = loc(fused[#loc107, #loc108, #loc109, #loc101])
#loc218 = loc(fused[#loc110, #loc111])
#loc219 = loc(fused[#loc117, #loc118])
#loc220 = loc(fused[#loc119, #loc120])
#loc221 = loc(fused[#loc122, #loc121])
#loc222 = loc(fused[#loc123, #loc124])
#loc223 = loc(fused[#loc125, #loc126])
#loc224 = loc(fused[#loc127, #loc128, #loc129, #loc124])
#loc225 = loc(fused[#loc133, #loc132])
#loc226 = loc(fused[#loc134, #loc135])
#loc227 = loc(fused[#loc136, #loc137])
#loc228 = loc(fused[#loc138, #loc135])
#loc229 = loc(fused[#loc139, #loc140])
#loc230 = loc(fused[#loc141, #loc142])
#loc231 = loc(fused[#loc146, #loc147])
#loc232 = loc(fused[#loc148, #loc149])
#loc233 = loc(fused[#loc151, #loc150])
#loc234 = loc(fused[#loc152, #loc153])
#loc235 = loc(fused[#loc154, #loc155])
#loc236 = loc(fused[#loc156, #loc153])
#loc237 = loc(fused[#loc158, #loc157])
#loc238 = loc(fused[#loc159, #loc160])
#loc239 = loc(fused[#loc161, #loc162])
#loc240 = loc(fused[#loc163, #loc160])
#loc241 = loc(fused[#loc164, #loc165])
#loc242 = loc(fused[#loc166, #loc167])
