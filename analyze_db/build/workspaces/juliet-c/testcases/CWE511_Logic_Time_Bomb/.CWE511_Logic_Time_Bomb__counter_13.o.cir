!s32i = !cir.int<s, 32>
!s8i = !cir.int<s, 8>
#fn_attr = #cir<extra({nothrow = #cir.nothrow})>
#fn_attr1 = #cir<extra({inline = #cir.inline<no>, nothrow = #cir.nothrow, optnone = #cir.optnone, uwtable = #cir.uwtable<async>})>
module @"/workspaces/juliet-c/testcases/CWE511_Logic_Time_Bomb/CWE511_Logic_Time_Bomb__counter_13.c" attributes {cir.lang = #cir.lang<c>, cir.sob = #cir.signed_overflow_behavior<undefined>, cir.triple = "x86_64-unknown-linux-gnu", cir.type_size_info = #cir.type_size_info<char = 8, int = 32, size_t = 64>, cir.uwtable = #cir.uwtable<async>, dlti.dl_spec = #dlti.dl_spec<f80 = dense<128> : vector<2xi64>, !llvm.ptr<270> = dense<32> : vector<4xi64>, !llvm.ptr = dense<64> : vector<4xi64>, i1 = dense<8> : vector<2xi64>, i64 = dense<64> : vector<2xi64>, i128 = dense<128> : vector<2xi64>, f16 = dense<16> : vector<2xi64>, f128 = dense<128> : vector<2xi64>, f64 = dense<64> : vector<2xi64>, !llvm.ptr<271> = dense<32> : vector<4xi64>, !llvm.ptr<272> = dense<64> : vector<4xi64>, i16 = dense<16> : vector<2xi64>, i8 = dense<8> : vector<2xi64>, i32 = dense<32> : vector<2xi64>, "dlti.stack_alignment" = 128 : i64, "dlti.mangling_mode" = "e", "dlti.endianness" = "little">} {
  cir.global "private" constant external @GLOBAL_CONST_FIVE : !s32i {alignment = 4 : i64} loc(#loc98)
  cir.func private @unlink(!cir.ptr<!s8i>) -> !s32i extra(#fn_attr) loc(#loc99)
  cir.global "private" constant cir_private dsolocal @".str" = #cir.const_array<"important_file.txt\00" : !cir.array<!s8i x 19>> : !cir.array<!s8i x 19> {alignment = 1 : i64} loc(#loc5)
  cir.func no_proto @CWE511_Logic_Time_Bomb__counter_13_bad() extra(#fn_attr1) {
    cir.scope {
      %0 = cir.get_global @GLOBAL_CONST_FIVE : !cir.ptr<!s32i> loc(#loc98)
      %1 = cir.load %0 : !cir.ptr<!s32i>, !s32i loc(#loc10)
      %2 = cir.const #cir.int<5> : !s32i loc(#loc11)
      %3 = cir.cmp(eq, %1, %2) : !s32i, !cir.bool loc(#loc102)
      cir.if %3 {
        cir.scope {
          %4 = cir.alloca !s32i, !cir.ptr<!s32i>, ["count", init] {alignment = 4 : i64} loc(#loc105)
          %5 = cir.const #cir.int<0> : !s32i loc(#loc16)
          cir.store %5, %4 : !s32i, !cir.ptr<!s32i> loc(#loc105)
          cir.scope {
            cir.do {
              cir.scope {
                cir.scope {
                  %8 = cir.load %4 : !cir.ptr<!s32i>, !s32i loc(#loc23)
                  %9 = cir.const #cir.int<20000> : !s32i loc(#loc24)
                  %10 = cir.cmp(eq, %8, %9) : !s32i, !cir.bool loc(#loc109)
                  cir.if %10 {
                    %11 = cir.get_global @".str" : !cir.ptr<!cir.array<!s8i x 19>> loc(#loc5)
                    %12 = cir.cast(array_to_ptrdecay, %11 : !cir.ptr<!cir.array<!s8i x 19>>), !cir.ptr<!s8i> loc(#loc5)
                    %13 = cir.call @unlink(%12) : (!cir.ptr<!s8i>) -> !s32i extra(#fn_attr) loc(#loc26)
                  } loc(#loc110)
                } loc(#loc108)
                %6 = cir.load %4 : !cir.ptr<!s32i>, !s32i loc(#loc27)
                %7 = cir.unary(inc, %6) nsw : !s32i, !s32i loc(#loc28)
                cir.store %7, %4 : !s32i, !cir.ptr<!s32i> loc(#loc111)
              } loc(#loc107)
              cir.yield loc(#loc18)
            } while {
              %6 = cir.const #cir.int<1> : !s32i loc(#loc29)
              %7 = cir.const #cir.int<1> : !s32i loc(#loc30)
              %8 = cir.cmp(eq, %6, %7) : !s32i, !cir.bool loc(#loc112)
              cir.condition(%8) loc(#loc31)
            } loc(#loc106)
          } loc(#loc106)
        } loc(#loc104)
      } loc(#loc103)
    } loc(#loc101)
    cir.return loc(#loc7)
  } loc(#loc100)
  cir.func no_proto @CWE511_Logic_Time_Bomb__counter_13_good() extra(#fn_attr1) {
    %0 = cir.get_global @good1 : !cir.ptr<!cir.func<()>> loc(#loc114)
    cir.call %0() : (!cir.ptr<!cir.func<()>>) -> () loc(#loc34)
    %1 = cir.get_global @good2 : !cir.ptr<!cir.func<()>> loc(#loc115)
    cir.call %1() : (!cir.ptr<!cir.func<()>>) -> () loc(#loc36)
    cir.return loc(#loc33)
  } loc(#loc113)
  cir.func private @printLine(!cir.ptr<!s8i>) loc(#loc116)
  cir.global "private" constant cir_private dsolocal @".str.1" = #cir.const_array<"Benign, fixed string\00" : !cir.array<!s8i x 21>> : !cir.array<!s8i x 21> {alignment = 1 : i64} loc(#loc40)
  cir.global "private" constant cir_private dsolocal @".str.2" = #cir.const_array<"Happy New Year!\00" : !cir.array<!s8i x 16>> : !cir.array<!s8i x 16> {alignment = 1 : i64} loc(#loc41)
  cir.func no_proto internal private @good1() extra(#fn_attr1) {
    cir.scope {
      %0 = cir.get_global @GLOBAL_CONST_FIVE : !cir.ptr<!s32i> loc(#loc98)
      %1 = cir.load %0 : !cir.ptr<!s32i>, !s32i loc(#loc46)
      %2 = cir.const #cir.int<5> : !s32i loc(#loc47)
      %3 = cir.cmp(ne, %1, %2) : !s32i, !cir.bool loc(#loc119)
      cir.if %3 {
        %4 = cir.get_global @".str.1" : !cir.ptr<!cir.array<!s8i x 21>> loc(#loc40)
        %5 = cir.cast(array_to_ptrdecay, %4 : !cir.ptr<!cir.array<!s8i x 21>>), !cir.ptr<!s8i> loc(#loc40)
        cir.call @printLine(%5) : (!cir.ptr<!s8i>) -> () loc(#loc51)
      } else {
        cir.scope {
          %4 = cir.alloca !s32i, !cir.ptr<!s32i>, ["count", init] {alignment = 4 : i64} loc(#loc122)
          %5 = cir.const #cir.int<0> : !s32i loc(#loc55)
          cir.store %5, %4 : !s32i, !cir.ptr<!s32i> loc(#loc122)
          cir.scope {
            cir.do {
              cir.scope {
                cir.scope {
                  %8 = cir.load %4 : !cir.ptr<!s32i>, !s32i loc(#loc62)
                  %9 = cir.const #cir.int<20000> : !s32i loc(#loc63)
                  %10 = cir.cmp(eq, %8, %9) : !s32i, !cir.bool loc(#loc126)
                  cir.if %10 {
                    %11 = cir.get_global @".str.2" : !cir.ptr<!cir.array<!s8i x 16>> loc(#loc41)
                    %12 = cir.cast(array_to_ptrdecay, %11 : !cir.ptr<!cir.array<!s8i x 16>>), !cir.ptr<!s8i> loc(#loc41)
                    cir.call @printLine(%12) : (!cir.ptr<!s8i>) -> () loc(#loc65)
                  } loc(#loc127)
                } loc(#loc125)
                %6 = cir.load %4 : !cir.ptr<!s32i>, !s32i loc(#loc66)
                %7 = cir.unary(inc, %6) nsw : !s32i, !s32i loc(#loc67)
                cir.store %7, %4 : !s32i, !cir.ptr<!s32i> loc(#loc128)
              } loc(#loc124)
              cir.yield loc(#loc57)
            } while {
              %6 = cir.const #cir.int<1> : !s32i loc(#loc68)
              %7 = cir.const #cir.int<1> : !s32i loc(#loc69)
              %8 = cir.cmp(eq, %6, %7) : !s32i, !cir.bool loc(#loc129)
              cir.condition(%8) loc(#loc70)
            } loc(#loc123)
          } loc(#loc123)
        } loc(#loc121)
      } loc(#loc120)
    } loc(#loc118)
    cir.return loc(#loc43)
  } loc(#loc117)
  cir.func no_proto internal private @good2() extra(#fn_attr1) {
    cir.scope {
      %0 = cir.get_global @GLOBAL_CONST_FIVE : !cir.ptr<!s32i> loc(#loc98)
      %1 = cir.load %0 : !cir.ptr<!s32i>, !s32i loc(#loc75)
      %2 = cir.const #cir.int<5> : !s32i loc(#loc76)
      %3 = cir.cmp(eq, %1, %2) : !s32i, !cir.bool loc(#loc132)
      cir.if %3 {
        cir.scope {
          %4 = cir.alloca !s32i, !cir.ptr<!s32i>, ["count", init] {alignment = 4 : i64} loc(#loc135)
          %5 = cir.const #cir.int<0> : !s32i loc(#loc81)
          cir.store %5, %4 : !s32i, !cir.ptr<!s32i> loc(#loc135)
          cir.scope {
            cir.do {
              cir.scope {
                cir.scope {
                  %8 = cir.load %4 : !cir.ptr<!s32i>, !s32i loc(#loc88)
                  %9 = cir.const #cir.int<20000> : !s32i loc(#loc89)
                  %10 = cir.cmp(eq, %8, %9) : !s32i, !cir.bool loc(#loc139)
                  cir.if %10 {
                    %11 = cir.get_global @".str.2" : !cir.ptr<!cir.array<!s8i x 16>> loc(#loc91)
                    %12 = cir.cast(array_to_ptrdecay, %11 : !cir.ptr<!cir.array<!s8i x 16>>), !cir.ptr<!s8i> loc(#loc91)
                    cir.call @printLine(%12) : (!cir.ptr<!s8i>) -> () loc(#loc92)
                  } loc(#loc140)
                } loc(#loc138)
                %6 = cir.load %4 : !cir.ptr<!s32i>, !s32i loc(#loc93)
                %7 = cir.unary(inc, %6) nsw : !s32i, !s32i loc(#loc94)
                cir.store %7, %4 : !s32i, !cir.ptr<!s32i> loc(#loc141)
              } loc(#loc137)
              cir.yield loc(#loc83)
            } while {
              %6 = cir.const #cir.int<1> : !s32i loc(#loc95)
              %7 = cir.const #cir.int<1> : !s32i loc(#loc96)
              %8 = cir.cmp(eq, %6, %7) : !s32i, !cir.bool loc(#loc142)
              cir.condition(%8) loc(#loc97)
            } loc(#loc136)
          } loc(#loc136)
        } loc(#loc134)
      } loc(#loc133)
    } loc(#loc131)
    cir.return loc(#loc72)
  } loc(#loc130)
} loc(#loc)
#loc = loc("/workspaces/juliet-c/testcases/CWE511_Logic_Time_Bomb/CWE511_Logic_Time_Bomb__counter_13.c":0:0)
#loc1 = loc("../../testcasesupport/std_testcase.h":111:1)
#loc2 = loc("../../testcasesupport/std_testcase.h":111:18)
#loc3 = loc("/usr/include/unistd.h":858:1)
#loc4 = loc("/usr/include/unistd.h":858:48)
#loc5 = loc("CWE511_Logic_Time_Bomb__counter_13.c":40:28)
#loc6 = loc("CWE511_Logic_Time_Bomb__counter_13.c":29:1)
#loc7 = loc("CWE511_Logic_Time_Bomb__counter_13.c":47:1)
#loc8 = loc("CWE511_Logic_Time_Bomb__counter_13.c":31:5)
#loc9 = loc("CWE511_Logic_Time_Bomb__counter_13.c":46:5)
#loc10 = loc("CWE511_Logic_Time_Bomb__counter_13.c":31:8)
#loc11 = loc("CWE511_Logic_Time_Bomb__counter_13.c":31:27)
#loc12 = loc("CWE511_Logic_Time_Bomb__counter_13.c":32:5)
#loc13 = loc("CWE511_Logic_Time_Bomb__counter_13.c":33:9)
#loc14 = loc("CWE511_Logic_Time_Bomb__counter_13.c":45:9)
#loc15 = loc("CWE511_Logic_Time_Bomb__counter_13.c":34:13)
#loc16 = loc("CWE511_Logic_Time_Bomb__counter_13.c":34:25)
#loc17 = loc("CWE511_Logic_Time_Bomb__counter_13.c":35:13)
#loc18 = loc("CWE511_Logic_Time_Bomb__counter_13.c":44:25)
#loc19 = loc("CWE511_Logic_Time_Bomb__counter_13.c":36:13)
#loc20 = loc("CWE511_Logic_Time_Bomb__counter_13.c":43:13)
#loc21 = loc("CWE511_Logic_Time_Bomb__counter_13.c":38:17)
#loc22 = loc("CWE511_Logic_Time_Bomb__counter_13.c":41:17)
#loc23 = loc("CWE511_Logic_Time_Bomb__counter_13.c":38:21)
#loc24 = loc("CWE511_Logic_Time_Bomb__counter_13.c":38:30)
#loc25 = loc("CWE511_Logic_Time_Bomb__counter_13.c":39:17)
#loc26 = loc("CWE511_Logic_Time_Bomb__counter_13.c":40:21)
#loc27 = loc("CWE511_Logic_Time_Bomb__counter_13.c":42:22)
#loc28 = loc("CWE511_Logic_Time_Bomb__counter_13.c":42:17)
#loc29 = loc("CWE511_Logic_Time_Bomb__counter_13.c":44:19)
#loc30 = loc("CWE511_Logic_Time_Bomb__counter_13.c":44:24)
#loc31 = loc("CWE511_Logic_Time_Bomb__counter_13.c":44:21)
#loc32 = loc("CWE511_Logic_Time_Bomb__counter_13.c":100:1)
#loc33 = loc("CWE511_Logic_Time_Bomb__counter_13.c":104:1)
#loc34 = loc("CWE511_Logic_Time_Bomb__counter_13.c":102:5)
#loc35 = loc("CWE511_Logic_Time_Bomb__counter_13.c":102:11)
#loc36 = loc("CWE511_Logic_Time_Bomb__counter_13.c":103:5)
#loc37 = loc("CWE511_Logic_Time_Bomb__counter_13.c":103:11)
#loc38 = loc("../../testcasesupport/std_testcase_io.h":14:1)
#loc39 = loc("../../testcasesupport/std_testcase_io.h":14:33)
#loc40 = loc("CWE511_Logic_Time_Bomb__counter_13.c":59:19)
#loc41 = loc("CWE511_Logic_Time_Bomb__counter_13.c":70:31)
#loc42 = loc("CWE511_Logic_Time_Bomb__counter_13.c":54:1)
#loc43 = loc("CWE511_Logic_Time_Bomb__counter_13.c":77:1)
#loc44 = loc("CWE511_Logic_Time_Bomb__counter_13.c":56:5)
#loc45 = loc("CWE511_Logic_Time_Bomb__counter_13.c":76:5)
#loc46 = loc("CWE511_Logic_Time_Bomb__counter_13.c":56:8)
#loc47 = loc("CWE511_Logic_Time_Bomb__counter_13.c":56:27)
#loc48 = loc("CWE511_Logic_Time_Bomb__counter_13.c":57:5)
#loc49 = loc("CWE511_Logic_Time_Bomb__counter_13.c":60:5)
#loc50 = loc("CWE511_Logic_Time_Bomb__counter_13.c":62:5)
#loc51 = loc("CWE511_Logic_Time_Bomb__counter_13.c":59:9)
#loc52 = loc("CWE511_Logic_Time_Bomb__counter_13.c":63:9)
#loc53 = loc("CWE511_Logic_Time_Bomb__counter_13.c":75:9)
#loc54 = loc("CWE511_Logic_Time_Bomb__counter_13.c":64:13)
#loc55 = loc("CWE511_Logic_Time_Bomb__counter_13.c":64:25)
#loc56 = loc("CWE511_Logic_Time_Bomb__counter_13.c":65:13)
#loc57 = loc("CWE511_Logic_Time_Bomb__counter_13.c":74:25)
#loc58 = loc("CWE511_Logic_Time_Bomb__counter_13.c":66:13)
#loc59 = loc("CWE511_Logic_Time_Bomb__counter_13.c":73:13)
#loc60 = loc("CWE511_Logic_Time_Bomb__counter_13.c":68:17)
#loc61 = loc("CWE511_Logic_Time_Bomb__counter_13.c":71:17)
#loc62 = loc("CWE511_Logic_Time_Bomb__counter_13.c":68:21)
#loc63 = loc("CWE511_Logic_Time_Bomb__counter_13.c":68:30)
#loc64 = loc("CWE511_Logic_Time_Bomb__counter_13.c":69:17)
#loc65 = loc("CWE511_Logic_Time_Bomb__counter_13.c":70:21)
#loc66 = loc("CWE511_Logic_Time_Bomb__counter_13.c":72:22)
#loc67 = loc("CWE511_Logic_Time_Bomb__counter_13.c":72:17)
#loc68 = loc("CWE511_Logic_Time_Bomb__counter_13.c":74:19)
#loc69 = loc("CWE511_Logic_Time_Bomb__counter_13.c":74:24)
#loc70 = loc("CWE511_Logic_Time_Bomb__counter_13.c":74:21)
#loc71 = loc("CWE511_Logic_Time_Bomb__counter_13.c":80:1)
#loc72 = loc("CWE511_Logic_Time_Bomb__counter_13.c":98:1)
#loc73 = loc("CWE511_Logic_Time_Bomb__counter_13.c":82:5)
#loc74 = loc("CWE511_Logic_Time_Bomb__counter_13.c":97:5)
#loc75 = loc("CWE511_Logic_Time_Bomb__counter_13.c":82:8)
#loc76 = loc("CWE511_Logic_Time_Bomb__counter_13.c":82:27)
#loc77 = loc("CWE511_Logic_Time_Bomb__counter_13.c":83:5)
#loc78 = loc("CWE511_Logic_Time_Bomb__counter_13.c":84:9)
#loc79 = loc("CWE511_Logic_Time_Bomb__counter_13.c":96:9)
#loc80 = loc("CWE511_Logic_Time_Bomb__counter_13.c":85:13)
#loc81 = loc("CWE511_Logic_Time_Bomb__counter_13.c":85:25)
#loc82 = loc("CWE511_Logic_Time_Bomb__counter_13.c":86:13)
#loc83 = loc("CWE511_Logic_Time_Bomb__counter_13.c":95:25)
#loc84 = loc("CWE511_Logic_Time_Bomb__counter_13.c":87:13)
#loc85 = loc("CWE511_Logic_Time_Bomb__counter_13.c":94:13)
#loc86 = loc("CWE511_Logic_Time_Bomb__counter_13.c":89:17)
#loc87 = loc("CWE511_Logic_Time_Bomb__counter_13.c":92:17)
#loc88 = loc("CWE511_Logic_Time_Bomb__counter_13.c":89:21)
#loc89 = loc("CWE511_Logic_Time_Bomb__counter_13.c":89:30)
#loc90 = loc("CWE511_Logic_Time_Bomb__counter_13.c":90:17)
#loc91 = loc("CWE511_Logic_Time_Bomb__counter_13.c":91:31)
#loc92 = loc("CWE511_Logic_Time_Bomb__counter_13.c":91:21)
#loc93 = loc("CWE511_Logic_Time_Bomb__counter_13.c":93:22)
#loc94 = loc("CWE511_Logic_Time_Bomb__counter_13.c":93:17)
#loc95 = loc("CWE511_Logic_Time_Bomb__counter_13.c":95:19)
#loc96 = loc("CWE511_Logic_Time_Bomb__counter_13.c":95:24)
#loc97 = loc("CWE511_Logic_Time_Bomb__counter_13.c":95:21)
#loc98 = loc(fused[#loc1, #loc2])
#loc99 = loc(fused[#loc3, #loc4])
#loc100 = loc(fused[#loc6, #loc7])
#loc101 = loc(fused[#loc8, #loc9])
#loc102 = loc(fused[#loc10, #loc11])
#loc103 = loc(fused[#loc12, #loc9])
#loc104 = loc(fused[#loc13, #loc14])
#loc105 = loc(fused[#loc15, #loc16])
#loc106 = loc(fused[#loc17, #loc18])
#loc107 = loc(fused[#loc19, #loc20])
#loc108 = loc(fused[#loc21, #loc22])
#loc109 = loc(fused[#loc23, #loc24])
#loc110 = loc(fused[#loc25, #loc22])
#loc111 = loc(fused[#loc28, #loc27])
#loc112 = loc(fused[#loc29, #loc30])
#loc113 = loc(fused[#loc32, #loc33])
#loc114 = loc(fused[#loc34, #loc35])
#loc115 = loc(fused[#loc36, #loc37])
#loc116 = loc(fused[#loc38, #loc39])
#loc117 = loc(fused[#loc42, #loc43])
#loc118 = loc(fused[#loc44, #loc45])
#loc119 = loc(fused[#loc46, #loc47])
#loc120 = loc(fused[#loc48, #loc49, #loc50, #loc45])
#loc121 = loc(fused[#loc52, #loc53])
#loc122 = loc(fused[#loc54, #loc55])
#loc123 = loc(fused[#loc56, #loc57])
#loc124 = loc(fused[#loc58, #loc59])
#loc125 = loc(fused[#loc60, #loc61])
#loc126 = loc(fused[#loc62, #loc63])
#loc127 = loc(fused[#loc64, #loc61])
#loc128 = loc(fused[#loc67, #loc66])
#loc129 = loc(fused[#loc68, #loc69])
#loc130 = loc(fused[#loc71, #loc72])
#loc131 = loc(fused[#loc73, #loc74])
#loc132 = loc(fused[#loc75, #loc76])
#loc133 = loc(fused[#loc77, #loc74])
#loc134 = loc(fused[#loc78, #loc79])
#loc135 = loc(fused[#loc80, #loc81])
#loc136 = loc(fused[#loc82, #loc83])
#loc137 = loc(fused[#loc84, #loc85])
#loc138 = loc(fused[#loc86, #loc87])
#loc139 = loc(fused[#loc88, #loc89])
#loc140 = loc(fused[#loc90, #loc87])
#loc141 = loc(fused[#loc94, #loc93])
#loc142 = loc(fused[#loc95, #loc96])
