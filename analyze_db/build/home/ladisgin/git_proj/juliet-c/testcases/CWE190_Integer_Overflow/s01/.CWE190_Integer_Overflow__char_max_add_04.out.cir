!s32i = !cir.int<s, 32>
!s64i = !cir.int<s, 64>
!s8i = !cir.int<s, 8>
!u32i = !cir.int<u, 32>
!void = !cir.void
#fn_attr = #cir<extra({inline = #cir.inline<no>, nothrow = #cir.nothrow, optnone = #cir.optnone})>
#fn_attr1 = #cir<extra({nothrow = #cir.nothrow})>
#loc48 = loc("CWE190_Integer_Overflow__char_max_add_04.c":168:10)
#loc49 = loc("CWE190_Integer_Overflow__char_max_add_04.c":168:14)
#loc50 = loc("CWE190_Integer_Overflow__char_max_add_04.c":168:20)
#loc51 = loc("CWE190_Integer_Overflow__char_max_add_04.c":168:32)
#loc200 = loc(fused[#loc48, #loc49])
#loc201 = loc(fused[#loc50, #loc51])
module @"/home/ladisgin/git_proj/juliet-c/testcases/CWE190_Integer_Overflow/s01/CWE190_Integer_Overflow__char_max_add_04.c" attributes {cir.lang = #cir.lang<c>, cir.sob = #cir.signed_overflow_behavior<undefined>, cir.triple = "x86_64-unknown-linux-gnu", dlti.dl_spec = #dlti.dl_spec<i32 = dense<32> : vector<2xi64>, i16 = dense<16> : vector<2xi64>, i8 = dense<8> : vector<2xi64>, !llvm.ptr<270> = dense<32> : vector<4xi64>, f128 = dense<128> : vector<2xi64>, !llvm.ptr<271> = dense<32> : vector<4xi64>, f16 = dense<16> : vector<2xi64>, f64 = dense<64> : vector<2xi64>, i128 = dense<128> : vector<2xi64>, !llvm.ptr<272> = dense<64> : vector<4xi64>, i64 = dense<64> : vector<2xi64>, !llvm.ptr = dense<64> : vector<4xi64>, i1 = dense<8> : vector<2xi64>, f80 = dense<128> : vector<2xi64>, "dlti.endianness" = "little", "dlti.stack_alignment" = 128 : i64>} {
  cir.func private @printHexCharLine(!s8i) loc(#loc180)
  cir.func no_proto @CWE190_Integer_Overflow__char_max_add_04_bad() extra(#fn_attr) {
    %0 = cir.alloca !s8i, !cir.ptr<!s8i>, ["data"] {alignment = 1 : i64} loc(#loc182)
    %1 = cir.const #cir.int<32> : !s32i loc(#loc7)
    %2 = cir.cast(integral, %1 : !s32i), !s8i loc(#loc7)
    cir.store %2, %0 : !s8i, !cir.ptr<!s8i> loc(#loc183)
    cir.scope {
      %3 = cir.const #cir.int<1> : !s32i loc(#loc11)
      %4 = cir.cast(int_to_bool, %3 : !s32i), !cir.bool loc(#loc11)
      cir.if %4 {
        %5 = cir.const #cir.int<127> : !s32i loc(#loc13)
        %6 = cir.cast(integral, %5 : !s32i), !s8i loc(#loc13)
        cir.store %6, %0 : !s8i, !cir.ptr<!s8i> loc(#loc186)
      } loc(#loc185)
    } loc(#loc184)
    cir.scope {
      %3 = cir.const #cir.int<1> : !s32i loc(#loc17)
      %4 = cir.cast(int_to_bool, %3 : !s32i), !cir.bool loc(#loc17)
      cir.if %4 {
        cir.scope {
          %5 = cir.alloca !s8i, !cir.ptr<!s8i>, ["result", init] {alignment = 1 : i64} loc(#loc190)
          %6 = cir.load %0 : !cir.ptr<!s8i>, !s8i loc(#loc23)
          %7 = cir.cast(integral, %6 : !s8i), !s32i loc(#loc23)
          %8 = cir.const #cir.int<1> : !s32i loc(#loc22)
          %9 = cir.binop(add, %7, %8) nsw : !s32i loc(#loc23)
          %10 = cir.cast(integral, %9 : !s32i), !s8i loc(#loc23)
          cir.store %10, %5 : !s8i, !cir.ptr<!s8i> loc(#loc190)
          %11 = cir.load %5 : !cir.ptr<!s8i>, !s8i loc(#loc24)
          cir.call @printHexCharLine(%11) : (!s8i) -> () loc(#loc25)
        } loc(#loc189)
      } loc(#loc188)
    } loc(#loc187)
    cir.return loc(#loc4)
  } loc(#loc181)
  cir.func no_proto @CWE190_Integer_Overflow__char_max_add_04_good() extra(#fn_attr) {
    %0 = cir.get_global @goodB2G1 : !cir.ptr<!cir.func<!void ()>> loc(#loc192)
    cir.call %0() : (!cir.ptr<!cir.func<!void ()>>) -> () loc(#loc28)
    %1 = cir.get_global @goodB2G2 : !cir.ptr<!cir.func<!void ()>> loc(#loc193)
    cir.call %1() : (!cir.ptr<!cir.func<!void ()>>) -> () loc(#loc30)
    %2 = cir.get_global @goodG2B1 : !cir.ptr<!cir.func<!void ()>> loc(#loc194)
    cir.call %2() : (!cir.ptr<!cir.func<!void ()>>) -> () loc(#loc32)
    %3 = cir.get_global @goodG2B2 : !cir.ptr<!cir.func<!void ()>> loc(#loc195)
    cir.call %3() : (!cir.ptr<!cir.func<!void ()>>) -> () loc(#loc34)
    cir.return loc(#loc27)
  } loc(#loc191)
  cir.func private @srand(!u32i) extra(#fn_attr1) loc(#loc196)
  cir.func private @time(!cir.ptr<!s64i>) -> !s64i extra(#fn_attr1) loc(#loc197)
  cir.func private @printLine(!cir.ptr<!s8i>) loc(#loc198)
  cir.global "private" constant cir_private dsolocal @".str" = #cir.const_array<"Calling good()...\00" : !cir.array<!s8i x 18>> : !cir.array<!s8i x 18> {alignment = 1 : i64} loc(#loc42)
  cir.global "private" constant cir_private dsolocal @".str.1" = #cir.const_array<"Finished good()\00" : !cir.array<!s8i x 16>> : !cir.array<!s8i x 16> {alignment = 1 : i64} loc(#loc43)
  cir.global "private" constant cir_private dsolocal @".str.2" = #cir.const_array<"Calling bad()...\00" : !cir.array<!s8i x 17>> : !cir.array<!s8i x 17> {alignment = 1 : i64} loc(#loc44)
  cir.global "private" constant cir_private dsolocal @".str.3" = #cir.const_array<"Finished bad()\00" : !cir.array<!s8i x 15>> : !cir.array<!s8i x 15> {alignment = 1 : i64} loc(#loc45)
  cir.func @main(%arg0: !s32i loc(fused[#loc48, #loc49]), %arg1: !cir.ptr<!cir.ptr<!s8i>> loc(fused[#loc50, #loc51])) -> !s32i extra(#fn_attr) {
    %0 = cir.alloca !s32i, !cir.ptr<!s32i>, ["argc", init] {alignment = 4 : i64} loc(#loc200)
    %1 = cir.alloca !cir.ptr<!cir.ptr<!s8i>>, !cir.ptr<!cir.ptr<!cir.ptr<!s8i>>>, ["argv", init] {alignment = 8 : i64} loc(#loc201)
    %2 = cir.alloca !s32i, !cir.ptr<!s32i>, ["__retval"] {alignment = 4 : i64} loc(#loc47)
    cir.store %arg0, %0 : !s32i, !cir.ptr<!s32i> loc(#loc52)
    cir.store %arg1, %1 : !cir.ptr<!cir.ptr<!s8i>>, !cir.ptr<!cir.ptr<!cir.ptr<!s8i>>> loc(#loc52)
    %3 = cir.const #cir.ptr<null> : !cir.ptr<!s64i> loc(#loc53)
    %4 = cir.call @time(%3) : (!cir.ptr<!s64i>) -> !s64i extra(#fn_attr1) loc(#loc54)
    %5 = cir.cast(integral, %4 : !s64i), !u32i loc(#loc54)
    cir.call @srand(%5) : (!u32i) -> () extra(#fn_attr1) loc(#loc55)
    %6 = cir.get_global @".str" : !cir.ptr<!cir.array<!s8i x 18>> loc(#loc42)
    %7 = cir.cast(array_to_ptrdecay, %6 : !cir.ptr<!cir.array<!s8i x 18>>), !cir.ptr<!s8i> loc(#loc42)
    cir.call @printLine(%7) : (!cir.ptr<!s8i>) -> () loc(#loc56)
    %8 = cir.get_global @CWE190_Integer_Overflow__char_max_add_04_good : !cir.ptr<!cir.func<!void ()>> loc(#loc202)
    cir.call @CWE190_Integer_Overflow__char_max_add_04_good() : () -> () loc(#loc57)
    %9 = cir.get_global @".str.1" : !cir.ptr<!cir.array<!s8i x 16>> loc(#loc43)
    %10 = cir.cast(array_to_ptrdecay, %9 : !cir.ptr<!cir.array<!s8i x 16>>), !cir.ptr<!s8i> loc(#loc43)
    cir.call @printLine(%10) : (!cir.ptr<!s8i>) -> () loc(#loc59)
    %11 = cir.get_global @".str.2" : !cir.ptr<!cir.array<!s8i x 17>> loc(#loc44)
    %12 = cir.cast(array_to_ptrdecay, %11 : !cir.ptr<!cir.array<!s8i x 17>>), !cir.ptr<!s8i> loc(#loc44)
    cir.call @printLine(%12) : (!cir.ptr<!s8i>) -> () loc(#loc60)
    %13 = cir.get_global @CWE190_Integer_Overflow__char_max_add_04_bad : !cir.ptr<!cir.func<!void ()>> loc(#loc203)
    cir.call @CWE190_Integer_Overflow__char_max_add_04_bad() : () -> () loc(#loc61)
    %14 = cir.get_global @".str.3" : !cir.ptr<!cir.array<!s8i x 15>> loc(#loc45)
    %15 = cir.cast(array_to_ptrdecay, %14 : !cir.ptr<!cir.array<!s8i x 15>>), !cir.ptr<!s8i> loc(#loc45)
    cir.call @printLine(%15) : (!cir.ptr<!s8i>) -> () loc(#loc63)
    %16 = cir.const #cir.int<0> : !s32i loc(#loc64)
    cir.store %16, %2 : !s32i, !cir.ptr<!s32i> loc(#loc204)
    %17 = cir.load %2 : !cir.ptr<!s32i>, !s32i loc(#loc204)
    cir.return %17 : !s32i loc(#loc204)
  } loc(#loc199)
  cir.global "private" constant cir_private dsolocal @".str.4" = #cir.const_array<"Benign, fixed string\00" : !cir.array<!s8i x 21>> : !cir.array<!s8i x 21> {alignment = 1 : i64} loc(#loc66)
  cir.global "private" constant cir_private dsolocal @".str.5" = #cir.const_array<"data value is too large to perform arithmetic safely.\00" : !cir.array<!s8i x 54>> : !cir.array<!s8i x 54> {alignment = 1 : i64} loc(#loc67)
  cir.func no_proto internal private @goodB2G1() extra(#fn_attr) {
    %0 = cir.alloca !s8i, !cir.ptr<!s8i>, ["data"] {alignment = 1 : i64} loc(#loc206)
    %1 = cir.const #cir.int<32> : !s32i loc(#loc72)
    %2 = cir.cast(integral, %1 : !s32i), !s8i loc(#loc72)
    cir.store %2, %0 : !s8i, !cir.ptr<!s8i> loc(#loc207)
    cir.scope {
      %3 = cir.const #cir.int<1> : !s32i loc(#loc76)
      %4 = cir.cast(int_to_bool, %3 : !s32i), !cir.bool loc(#loc76)
      cir.if %4 {
        %5 = cir.const #cir.int<127> : !s32i loc(#loc78)
        %6 = cir.cast(integral, %5 : !s32i), !s8i loc(#loc78)
        cir.store %6, %0 : !s8i, !cir.ptr<!s8i> loc(#loc210)
      } loc(#loc209)
    } loc(#loc208)
    cir.scope {
      %3 = cir.const #cir.int<0> : !s32i loc(#loc82)
      %4 = cir.cast(int_to_bool, %3 : !s32i), !cir.bool loc(#loc82)
      cir.if %4 {
        %5 = cir.get_global @".str.4" : !cir.ptr<!cir.array<!s8i x 21>> loc(#loc66)
        %6 = cir.cast(array_to_ptrdecay, %5 : !cir.ptr<!cir.array<!s8i x 21>>), !cir.ptr<!s8i> loc(#loc66)
        cir.call @printLine(%6) : (!cir.ptr<!s8i>) -> () loc(#loc86)
      } else {
        cir.scope {
          %5 = cir.load %0 : !cir.ptr<!s8i>, !s8i loc(#loc89)
          %6 = cir.cast(integral, %5 : !s8i), !s32i loc(#loc89)
          %7 = cir.const #cir.int<127> : !s32i loc(#loc90)
          %8 = cir.cmp(lt, %6, %7) : !s32i, !cir.bool loc(#loc214)
          cir.if %8 {
            %9 = cir.alloca !s8i, !cir.ptr<!s8i>, ["result", init] {alignment = 1 : i64} loc(#loc216)
            %10 = cir.load %0 : !cir.ptr<!s8i>, !s8i loc(#loc96)
            %11 = cir.cast(integral, %10 : !s8i), !s32i loc(#loc96)
            %12 = cir.const #cir.int<1> : !s32i loc(#loc95)
            %13 = cir.binop(add, %11, %12) nsw : !s32i loc(#loc96)
            %14 = cir.cast(integral, %13 : !s32i), !s8i loc(#loc96)
            cir.store %14, %9 : !s8i, !cir.ptr<!s8i> loc(#loc216)
            %15 = cir.load %9 : !cir.ptr<!s8i>, !s8i loc(#loc97)
            cir.call @printHexCharLine(%15) : (!s8i) -> () loc(#loc98)
          } else {
            %9 = cir.get_global @".str.5" : !cir.ptr<!cir.array<!s8i x 54>> loc(#loc67)
            %10 = cir.cast(array_to_ptrdecay, %9 : !cir.ptr<!cir.array<!s8i x 54>>), !cir.ptr<!s8i> loc(#loc67)
            cir.call @printLine(%10) : (!cir.ptr<!s8i>) -> () loc(#loc99)
          } loc(#loc215)
        } loc(#loc213)
      } loc(#loc212)
    } loc(#loc211)
    cir.return loc(#loc69)
  } loc(#loc205)
  cir.func no_proto internal private @goodB2G2() extra(#fn_attr) {
    %0 = cir.alloca !s8i, !cir.ptr<!s8i>, ["data"] {alignment = 1 : i64} loc(#loc218)
    %1 = cir.const #cir.int<32> : !s32i loc(#loc104)
    %2 = cir.cast(integral, %1 : !s32i), !s8i loc(#loc104)
    cir.store %2, %0 : !s8i, !cir.ptr<!s8i> loc(#loc219)
    cir.scope {
      %3 = cir.const #cir.int<1> : !s32i loc(#loc108)
      %4 = cir.cast(int_to_bool, %3 : !s32i), !cir.bool loc(#loc108)
      cir.if %4 {
        %5 = cir.const #cir.int<127> : !s32i loc(#loc110)
        %6 = cir.cast(integral, %5 : !s32i), !s8i loc(#loc110)
        cir.store %6, %0 : !s8i, !cir.ptr<!s8i> loc(#loc222)
      } loc(#loc221)
    } loc(#loc220)
    cir.scope {
      %3 = cir.const #cir.int<1> : !s32i loc(#loc114)
      %4 = cir.cast(int_to_bool, %3 : !s32i), !cir.bool loc(#loc114)
      cir.if %4 {
        cir.scope {
          %5 = cir.load %0 : !cir.ptr<!s8i>, !s8i loc(#loc118)
          %6 = cir.cast(integral, %5 : !s8i), !s32i loc(#loc118)
          %7 = cir.const #cir.int<127> : !s32i loc(#loc119)
          %8 = cir.cmp(lt, %6, %7) : !s32i, !cir.bool loc(#loc226)
          cir.if %8 {
            %9 = cir.alloca !s8i, !cir.ptr<!s8i>, ["result", init] {alignment = 1 : i64} loc(#loc228)
            %10 = cir.load %0 : !cir.ptr<!s8i>, !s8i loc(#loc125)
            %11 = cir.cast(integral, %10 : !s8i), !s32i loc(#loc125)
            %12 = cir.const #cir.int<1> : !s32i loc(#loc124)
            %13 = cir.binop(add, %11, %12) nsw : !s32i loc(#loc125)
            %14 = cir.cast(integral, %13 : !s32i), !s8i loc(#loc125)
            cir.store %14, %9 : !s8i, !cir.ptr<!s8i> loc(#loc228)
            %15 = cir.load %9 : !cir.ptr<!s8i>, !s8i loc(#loc126)
            cir.call @printHexCharLine(%15) : (!s8i) -> () loc(#loc127)
          } else {
            %9 = cir.get_global @".str.5" : !cir.ptr<!cir.array<!s8i x 54>> loc(#loc128)
            %10 = cir.cast(array_to_ptrdecay, %9 : !cir.ptr<!cir.array<!s8i x 54>>), !cir.ptr<!s8i> loc(#loc128)
            cir.call @printLine(%10) : (!cir.ptr<!s8i>) -> () loc(#loc129)
          } loc(#loc227)
        } loc(#loc225)
      } loc(#loc224)
    } loc(#loc223)
    cir.return loc(#loc101)
  } loc(#loc217)
  cir.func no_proto internal private @goodG2B1() extra(#fn_attr) {
    %0 = cir.alloca !s8i, !cir.ptr<!s8i>, ["data"] {alignment = 1 : i64} loc(#loc230)
    %1 = cir.const #cir.int<32> : !s32i loc(#loc134)
    %2 = cir.cast(integral, %1 : !s32i), !s8i loc(#loc134)
    cir.store %2, %0 : !s8i, !cir.ptr<!s8i> loc(#loc231)
    cir.scope {
      %3 = cir.const #cir.int<0> : !s32i loc(#loc138)
      %4 = cir.cast(int_to_bool, %3 : !s32i), !cir.bool loc(#loc138)
      cir.if %4 {
        %5 = cir.get_global @".str.4" : !cir.ptr<!cir.array<!s8i x 21>> loc(#loc142)
        %6 = cir.cast(array_to_ptrdecay, %5 : !cir.ptr<!cir.array<!s8i x 21>>), !cir.ptr<!s8i> loc(#loc142)
        cir.call @printLine(%6) : (!cir.ptr<!s8i>) -> () loc(#loc143)
      } else {
        %5 = cir.const #cir.int<2> : !s32i loc(#loc144)
        %6 = cir.cast(integral, %5 : !s32i), !s8i loc(#loc144)
        cir.store %6, %0 : !s8i, !cir.ptr<!s8i> loc(#loc234)
      } loc(#loc233)
    } loc(#loc232)
    cir.scope {
      %3 = cir.const #cir.int<1> : !s32i loc(#loc148)
      %4 = cir.cast(int_to_bool, %3 : !s32i), !cir.bool loc(#loc148)
      cir.if %4 {
        cir.scope {
          %5 = cir.alloca !s8i, !cir.ptr<!s8i>, ["result", init] {alignment = 1 : i64} loc(#loc238)
          %6 = cir.load %0 : !cir.ptr<!s8i>, !s8i loc(#loc154)
          %7 = cir.cast(integral, %6 : !s8i), !s32i loc(#loc154)
          %8 = cir.const #cir.int<1> : !s32i loc(#loc153)
          %9 = cir.binop(add, %7, %8) nsw : !s32i loc(#loc154)
          %10 = cir.cast(integral, %9 : !s32i), !s8i loc(#loc154)
          cir.store %10, %5 : !s8i, !cir.ptr<!s8i> loc(#loc238)
          %11 = cir.load %5 : !cir.ptr<!s8i>, !s8i loc(#loc155)
          cir.call @printHexCharLine(%11) : (!s8i) -> () loc(#loc156)
        } loc(#loc237)
      } loc(#loc236)
    } loc(#loc235)
    cir.return loc(#loc131)
  } loc(#loc229)
  cir.func no_proto internal private @goodG2B2() extra(#fn_attr) {
    %0 = cir.alloca !s8i, !cir.ptr<!s8i>, ["data"] {alignment = 1 : i64} loc(#loc240)
    %1 = cir.const #cir.int<32> : !s32i loc(#loc161)
    %2 = cir.cast(integral, %1 : !s32i), !s8i loc(#loc161)
    cir.store %2, %0 : !s8i, !cir.ptr<!s8i> loc(#loc241)
    cir.scope {
      %3 = cir.const #cir.int<1> : !s32i loc(#loc165)
      %4 = cir.cast(int_to_bool, %3 : !s32i), !cir.bool loc(#loc165)
      cir.if %4 {
        %5 = cir.const #cir.int<2> : !s32i loc(#loc167)
        %6 = cir.cast(integral, %5 : !s32i), !s8i loc(#loc167)
        cir.store %6, %0 : !s8i, !cir.ptr<!s8i> loc(#loc244)
      } loc(#loc243)
    } loc(#loc242)
    cir.scope {
      %3 = cir.const #cir.int<1> : !s32i loc(#loc171)
      %4 = cir.cast(int_to_bool, %3 : !s32i), !cir.bool loc(#loc171)
      cir.if %4 {
        cir.scope {
          %5 = cir.alloca !s8i, !cir.ptr<!s8i>, ["result", init] {alignment = 1 : i64} loc(#loc248)
          %6 = cir.load %0 : !cir.ptr<!s8i>, !s8i loc(#loc177)
          %7 = cir.cast(integral, %6 : !s8i), !s32i loc(#loc177)
          %8 = cir.const #cir.int<1> : !s32i loc(#loc176)
          %9 = cir.binop(add, %7, %8) nsw : !s32i loc(#loc177)
          %10 = cir.cast(integral, %9 : !s32i), !s8i loc(#loc177)
          cir.store %10, %5 : !s8i, !cir.ptr<!s8i> loc(#loc248)
          %11 = cir.load %5 : !cir.ptr<!s8i>, !s8i loc(#loc178)
          cir.call @printHexCharLine(%11) : (!s8i) -> () loc(#loc179)
        } loc(#loc247)
      } loc(#loc246)
    } loc(#loc245)
    cir.return loc(#loc158)
  } loc(#loc239)
} loc(#loc)
#loc = loc("/home/ladisgin/git_proj/juliet-c/testcases/CWE190_Integer_Overflow/s01/CWE190_Integer_Overflow__char_max_add_04.c":0:0)
#loc1 = loc("../../../testcasesupport/std_testcase_io.h":30:1)
#loc2 = loc("../../../testcasesupport/std_testcase_io.h":30:35)
#loc3 = loc("CWE190_Integer_Overflow__char_max_add_04.c":28:1)
#loc4 = loc("CWE190_Integer_Overflow__char_max_add_04.c":45:1)
#loc5 = loc("CWE190_Integer_Overflow__char_max_add_04.c":30:5)
#loc6 = loc("CWE190_Integer_Overflow__char_max_add_04.c":30:10)
#loc7 = loc("CWE190_Integer_Overflow__char_max_add_04.c":31:12)
#loc8 = loc("CWE190_Integer_Overflow__char_max_add_04.c":31:5)
#loc9 = loc("CWE190_Integer_Overflow__char_max_add_04.c":32:5)
#loc10 = loc("CWE190_Integer_Overflow__char_max_add_04.c":36:5)
#loc11 = loc("CWE190_Integer_Overflow__char_max_add_04.c":32:8)
#loc12 = loc("CWE190_Integer_Overflow__char_max_add_04.c":33:5)
#loc13 = loc("CWE190_Integer_Overflow__char_max_add_04.c":35:16)
#loc14 = loc("CWE190_Integer_Overflow__char_max_add_04.c":35:9)
#loc15 = loc("CWE190_Integer_Overflow__char_max_add_04.c":37:5)
#loc16 = loc("CWE190_Integer_Overflow__char_max_add_04.c":44:5)
#loc17 = loc("CWE190_Integer_Overflow__char_max_add_04.c":37:8)
#loc18 = loc("CWE190_Integer_Overflow__char_max_add_04.c":38:5)
#loc19 = loc("CWE190_Integer_Overflow__char_max_add_04.c":39:9)
#loc20 = loc("CWE190_Integer_Overflow__char_max_add_04.c":43:9)
#loc21 = loc("CWE190_Integer_Overflow__char_max_add_04.c":41:13)
#loc22 = loc("CWE190_Integer_Overflow__char_max_add_04.c":41:34)
#loc23 = loc("CWE190_Integer_Overflow__char_max_add_04.c":41:27)
#loc24 = loc("CWE190_Integer_Overflow__char_max_add_04.c":42:30)
#loc25 = loc("CWE190_Integer_Overflow__char_max_add_04.c":42:13)
#loc26 = loc("CWE190_Integer_Overflow__char_max_add_04.c":151:1)
#loc27 = loc("CWE190_Integer_Overflow__char_max_add_04.c":157:1)
#loc28 = loc("CWE190_Integer_Overflow__char_max_add_04.c":153:5)
#loc29 = loc("CWE190_Integer_Overflow__char_max_add_04.c":153:14)
#loc30 = loc("CWE190_Integer_Overflow__char_max_add_04.c":154:5)
#loc31 = loc("CWE190_Integer_Overflow__char_max_add_04.c":154:14)
#loc32 = loc("CWE190_Integer_Overflow__char_max_add_04.c":155:5)
#loc33 = loc("CWE190_Integer_Overflow__char_max_add_04.c":155:14)
#loc34 = loc("CWE190_Integer_Overflow__char_max_add_04.c":156:5)
#loc35 = loc("CWE190_Integer_Overflow__char_max_add_04.c":156:14)
#loc36 = loc("/usr/include/stdlib.h":575:1)
#loc37 = loc("/usr/include/stdlib.h":575:41)
#loc38 = loc("/usr/include/time.h":76:1)
#loc39 = loc("/usr/include/time.h":76:38)
#loc40 = loc("../../../testcasesupport/std_testcase_io.h":14:1)
#loc41 = loc("../../../testcasesupport/std_testcase_io.h":14:33)
#loc42 = loc("CWE190_Integer_Overflow__char_max_add_04.c":173:15)
#loc43 = loc("CWE190_Integer_Overflow__char_max_add_04.c":175:15)
#loc44 = loc("CWE190_Integer_Overflow__char_max_add_04.c":178:15)
#loc45 = loc("CWE190_Integer_Overflow__char_max_add_04.c":180:15)
#loc46 = loc("CWE190_Integer_Overflow__char_max_add_04.c":168:1)
#loc47 = loc("CWE190_Integer_Overflow__char_max_add_04.c":183:1)
#loc52 = loc("CWE190_Integer_Overflow__char_max_add_04.c":169:1)
#loc53 = loc("CWE190_Integer_Overflow__char_max_add_04.c":171:27)
#loc54 = loc("CWE190_Integer_Overflow__char_max_add_04.c":171:22)
#loc55 = loc("CWE190_Integer_Overflow__char_max_add_04.c":171:5)
#loc56 = loc("CWE190_Integer_Overflow__char_max_add_04.c":173:5)
#loc57 = loc("CWE190_Integer_Overflow__char_max_add_04.c":174:5)
#loc58 = loc("CWE190_Integer_Overflow__char_max_add_04.c":174:51)
#loc59 = loc("CWE190_Integer_Overflow__char_max_add_04.c":175:5)
#loc60 = loc("CWE190_Integer_Overflow__char_max_add_04.c":178:5)
#loc61 = loc("CWE190_Integer_Overflow__char_max_add_04.c":179:5)
#loc62 = loc("CWE190_Integer_Overflow__char_max_add_04.c":179:50)
#loc63 = loc("CWE190_Integer_Overflow__char_max_add_04.c":180:5)
#loc64 = loc("CWE190_Integer_Overflow__char_max_add_04.c":182:12)
#loc65 = loc("CWE190_Integer_Overflow__char_max_add_04.c":182:5)
#loc66 = loc("CWE190_Integer_Overflow__char_max_add_04.c":64:19)
#loc67 = loc("CWE190_Integer_Overflow__char_max_add_04.c":76:23)
#loc68 = loc("CWE190_Integer_Overflow__char_max_add_04.c":52:1)
#loc69 = loc("CWE190_Integer_Overflow__char_max_add_04.c":79:1)
#loc70 = loc("CWE190_Integer_Overflow__char_max_add_04.c":54:5)
#loc71 = loc("CWE190_Integer_Overflow__char_max_add_04.c":54:10)
#loc72 = loc("CWE190_Integer_Overflow__char_max_add_04.c":55:12)
#loc73 = loc("CWE190_Integer_Overflow__char_max_add_04.c":55:5)
#loc74 = loc("CWE190_Integer_Overflow__char_max_add_04.c":56:5)
#loc75 = loc("CWE190_Integer_Overflow__char_max_add_04.c":60:5)
#loc76 = loc("CWE190_Integer_Overflow__char_max_add_04.c":56:8)
#loc77 = loc("CWE190_Integer_Overflow__char_max_add_04.c":57:5)
#loc78 = loc("CWE190_Integer_Overflow__char_max_add_04.c":59:16)
#loc79 = loc("CWE190_Integer_Overflow__char_max_add_04.c":59:9)
#loc80 = loc("CWE190_Integer_Overflow__char_max_add_04.c":61:5)
#loc81 = loc("CWE190_Integer_Overflow__char_max_add_04.c":78:5)
#loc82 = loc("CWE190_Integer_Overflow__char_max_add_04.c":61:8)
#loc83 = loc("CWE190_Integer_Overflow__char_max_add_04.c":62:5)
#loc84 = loc("CWE190_Integer_Overflow__char_max_add_04.c":65:5)
#loc85 = loc("CWE190_Integer_Overflow__char_max_add_04.c":67:5)
#loc86 = loc("CWE190_Integer_Overflow__char_max_add_04.c":64:9)
#loc87 = loc("CWE190_Integer_Overflow__char_max_add_04.c":69:9)
#loc88 = loc("CWE190_Integer_Overflow__char_max_add_04.c":77:9)
#loc89 = loc("CWE190_Integer_Overflow__char_max_add_04.c":69:13)
#loc90 = loc("CWE190_Integer_Overflow__char_max_add_04.c":69:20)
#loc91 = loc("CWE190_Integer_Overflow__char_max_add_04.c":70:9)
#loc92 = loc("CWE190_Integer_Overflow__char_max_add_04.c":73:9)
#loc93 = loc("CWE190_Integer_Overflow__char_max_add_04.c":75:9)
#loc94 = loc("CWE190_Integer_Overflow__char_max_add_04.c":71:13)
#loc95 = loc("CWE190_Integer_Overflow__char_max_add_04.c":71:34)
#loc96 = loc("CWE190_Integer_Overflow__char_max_add_04.c":71:27)
#loc97 = loc("CWE190_Integer_Overflow__char_max_add_04.c":72:30)
#loc98 = loc("CWE190_Integer_Overflow__char_max_add_04.c":72:13)
#loc99 = loc("CWE190_Integer_Overflow__char_max_add_04.c":76:13)
#loc100 = loc("CWE190_Integer_Overflow__char_max_add_04.c":82:1)
#loc101 = loc("CWE190_Integer_Overflow__char_max_add_04.c":104:1)
#loc102 = loc("CWE190_Integer_Overflow__char_max_add_04.c":84:5)
#loc103 = loc("CWE190_Integer_Overflow__char_max_add_04.c":84:10)
#loc104 = loc("CWE190_Integer_Overflow__char_max_add_04.c":85:12)
#loc105 = loc("CWE190_Integer_Overflow__char_max_add_04.c":85:5)
#loc106 = loc("CWE190_Integer_Overflow__char_max_add_04.c":86:5)
#loc107 = loc("CWE190_Integer_Overflow__char_max_add_04.c":90:5)
#loc108 = loc("CWE190_Integer_Overflow__char_max_add_04.c":86:8)
#loc109 = loc("CWE190_Integer_Overflow__char_max_add_04.c":87:5)
#loc110 = loc("CWE190_Integer_Overflow__char_max_add_04.c":89:16)
#loc111 = loc("CWE190_Integer_Overflow__char_max_add_04.c":89:9)
#loc112 = loc("CWE190_Integer_Overflow__char_max_add_04.c":91:5)
#loc113 = loc("CWE190_Integer_Overflow__char_max_add_04.c":103:5)
#loc114 = loc("CWE190_Integer_Overflow__char_max_add_04.c":91:8)
#loc115 = loc("CWE190_Integer_Overflow__char_max_add_04.c":92:5)
#loc116 = loc("CWE190_Integer_Overflow__char_max_add_04.c":94:9)
#loc117 = loc("CWE190_Integer_Overflow__char_max_add_04.c":102:9)
#loc118 = loc("CWE190_Integer_Overflow__char_max_add_04.c":94:13)
#loc119 = loc("CWE190_Integer_Overflow__char_max_add_04.c":94:20)
#loc120 = loc("CWE190_Integer_Overflow__char_max_add_04.c":95:9)
#loc121 = loc("CWE190_Integer_Overflow__char_max_add_04.c":98:9)
#loc122 = loc("CWE190_Integer_Overflow__char_max_add_04.c":100:9)
#loc123 = loc("CWE190_Integer_Overflow__char_max_add_04.c":96:13)
#loc124 = loc("CWE190_Integer_Overflow__char_max_add_04.c":96:34)
#loc125 = loc("CWE190_Integer_Overflow__char_max_add_04.c":96:27)
#loc126 = loc("CWE190_Integer_Overflow__char_max_add_04.c":97:30)
#loc127 = loc("CWE190_Integer_Overflow__char_max_add_04.c":97:13)
#loc128 = loc("CWE190_Integer_Overflow__char_max_add_04.c":101:23)
#loc129 = loc("CWE190_Integer_Overflow__char_max_add_04.c":101:13)
#loc130 = loc("CWE190_Integer_Overflow__char_max_add_04.c":107:1)
#loc131 = loc("CWE190_Integer_Overflow__char_max_add_04.c":129:1)
#loc132 = loc("CWE190_Integer_Overflow__char_max_add_04.c":109:5)
#loc133 = loc("CWE190_Integer_Overflow__char_max_add_04.c":109:10)
#loc134 = loc("CWE190_Integer_Overflow__char_max_add_04.c":110:12)
#loc135 = loc("CWE190_Integer_Overflow__char_max_add_04.c":110:5)
#loc136 = loc("CWE190_Integer_Overflow__char_max_add_04.c":111:5)
#loc137 = loc("CWE190_Integer_Overflow__char_max_add_04.c":120:5)
#loc138 = loc("CWE190_Integer_Overflow__char_max_add_04.c":111:8)
#loc139 = loc("CWE190_Integer_Overflow__char_max_add_04.c":112:5)
#loc140 = loc("CWE190_Integer_Overflow__char_max_add_04.c":115:5)
#loc141 = loc("CWE190_Integer_Overflow__char_max_add_04.c":117:5)
#loc142 = loc("CWE190_Integer_Overflow__char_max_add_04.c":114:19)
#loc143 = loc("CWE190_Integer_Overflow__char_max_add_04.c":114:9)
#loc144 = loc("CWE190_Integer_Overflow__char_max_add_04.c":119:16)
#loc145 = loc("CWE190_Integer_Overflow__char_max_add_04.c":119:9)
#loc146 = loc("CWE190_Integer_Overflow__char_max_add_04.c":121:5)
#loc147 = loc("CWE190_Integer_Overflow__char_max_add_04.c":128:5)
#loc148 = loc("CWE190_Integer_Overflow__char_max_add_04.c":121:8)
#loc149 = loc("CWE190_Integer_Overflow__char_max_add_04.c":122:5)
#loc150 = loc("CWE190_Integer_Overflow__char_max_add_04.c":123:9)
#loc151 = loc("CWE190_Integer_Overflow__char_max_add_04.c":127:9)
#loc152 = loc("CWE190_Integer_Overflow__char_max_add_04.c":125:13)
#loc153 = loc("CWE190_Integer_Overflow__char_max_add_04.c":125:34)
#loc154 = loc("CWE190_Integer_Overflow__char_max_add_04.c":125:27)
#loc155 = loc("CWE190_Integer_Overflow__char_max_add_04.c":126:30)
#loc156 = loc("CWE190_Integer_Overflow__char_max_add_04.c":126:13)
#loc157 = loc("CWE190_Integer_Overflow__char_max_add_04.c":132:1)
#loc158 = loc("CWE190_Integer_Overflow__char_max_add_04.c":149:1)
#loc159 = loc("CWE190_Integer_Overflow__char_max_add_04.c":134:5)
#loc160 = loc("CWE190_Integer_Overflow__char_max_add_04.c":134:10)
#loc161 = loc("CWE190_Integer_Overflow__char_max_add_04.c":135:12)
#loc162 = loc("CWE190_Integer_Overflow__char_max_add_04.c":135:5)
#loc163 = loc("CWE190_Integer_Overflow__char_max_add_04.c":136:5)
#loc164 = loc("CWE190_Integer_Overflow__char_max_add_04.c":140:5)
#loc165 = loc("CWE190_Integer_Overflow__char_max_add_04.c":136:8)
#loc166 = loc("CWE190_Integer_Overflow__char_max_add_04.c":137:5)
#loc167 = loc("CWE190_Integer_Overflow__char_max_add_04.c":139:16)
#loc168 = loc("CWE190_Integer_Overflow__char_max_add_04.c":139:9)
#loc169 = loc("CWE190_Integer_Overflow__char_max_add_04.c":141:5)
#loc170 = loc("CWE190_Integer_Overflow__char_max_add_04.c":148:5)
#loc171 = loc("CWE190_Integer_Overflow__char_max_add_04.c":141:8)
#loc172 = loc("CWE190_Integer_Overflow__char_max_add_04.c":142:5)
#loc173 = loc("CWE190_Integer_Overflow__char_max_add_04.c":143:9)
#loc174 = loc("CWE190_Integer_Overflow__char_max_add_04.c":147:9)
#loc175 = loc("CWE190_Integer_Overflow__char_max_add_04.c":145:13)
#loc176 = loc("CWE190_Integer_Overflow__char_max_add_04.c":145:34)
#loc177 = loc("CWE190_Integer_Overflow__char_max_add_04.c":145:27)
#loc178 = loc("CWE190_Integer_Overflow__char_max_add_04.c":146:30)
#loc179 = loc("CWE190_Integer_Overflow__char_max_add_04.c":146:13)
#loc180 = loc(fused[#loc1, #loc2])
#loc181 = loc(fused[#loc3, #loc4])
#loc182 = loc(fused[#loc5, #loc6])
#loc183 = loc(fused[#loc8, #loc7])
#loc184 = loc(fused[#loc9, #loc10])
#loc185 = loc(fused[#loc12, #loc10])
#loc186 = loc(fused[#loc14, #loc13])
#loc187 = loc(fused[#loc15, #loc16])
#loc188 = loc(fused[#loc18, #loc16])
#loc189 = loc(fused[#loc19, #loc20])
#loc190 = loc(fused[#loc21, #loc22])
#loc191 = loc(fused[#loc26, #loc27])
#loc192 = loc(fused[#loc28, #loc29])
#loc193 = loc(fused[#loc30, #loc31])
#loc194 = loc(fused[#loc32, #loc33])
#loc195 = loc(fused[#loc34, #loc35])
#loc196 = loc(fused[#loc36, #loc37])
#loc197 = loc(fused[#loc38, #loc39])
#loc198 = loc(fused[#loc40, #loc41])
#loc199 = loc(fused[#loc46, #loc47])
#loc202 = loc(fused[#loc57, #loc58])
#loc203 = loc(fused[#loc61, #loc62])
#loc204 = loc(fused[#loc65, #loc64])
#loc205 = loc(fused[#loc68, #loc69])
#loc206 = loc(fused[#loc70, #loc71])
#loc207 = loc(fused[#loc73, #loc72])
#loc208 = loc(fused[#loc74, #loc75])
#loc209 = loc(fused[#loc77, #loc75])
#loc210 = loc(fused[#loc79, #loc78])
#loc211 = loc(fused[#loc80, #loc81])
#loc212 = loc(fused[#loc83, #loc84, #loc85, #loc81])
#loc213 = loc(fused[#loc87, #loc88])
#loc214 = loc(fused[#loc89, #loc90])
#loc215 = loc(fused[#loc91, #loc92, #loc93, #loc88])
#loc216 = loc(fused[#loc94, #loc95])
#loc217 = loc(fused[#loc100, #loc101])
#loc218 = loc(fused[#loc102, #loc103])
#loc219 = loc(fused[#loc105, #loc104])
#loc220 = loc(fused[#loc106, #loc107])
#loc221 = loc(fused[#loc109, #loc107])
#loc222 = loc(fused[#loc111, #loc110])
#loc223 = loc(fused[#loc112, #loc113])
#loc224 = loc(fused[#loc115, #loc113])
#loc225 = loc(fused[#loc116, #loc117])
#loc226 = loc(fused[#loc118, #loc119])
#loc227 = loc(fused[#loc120, #loc121, #loc122, #loc117])
#loc228 = loc(fused[#loc123, #loc124])
#loc229 = loc(fused[#loc130, #loc131])
#loc230 = loc(fused[#loc132, #loc133])
#loc231 = loc(fused[#loc135, #loc134])
#loc232 = loc(fused[#loc136, #loc137])
#loc233 = loc(fused[#loc139, #loc140, #loc141, #loc137])
#loc234 = loc(fused[#loc145, #loc144])
#loc235 = loc(fused[#loc146, #loc147])
#loc236 = loc(fused[#loc149, #loc147])
#loc237 = loc(fused[#loc150, #loc151])
#loc238 = loc(fused[#loc152, #loc153])
#loc239 = loc(fused[#loc157, #loc158])
#loc240 = loc(fused[#loc159, #loc160])
#loc241 = loc(fused[#loc162, #loc161])
#loc242 = loc(fused[#loc163, #loc164])
#loc243 = loc(fused[#loc166, #loc164])
#loc244 = loc(fused[#loc168, #loc167])
#loc245 = loc(fused[#loc169, #loc170])
#loc246 = loc(fused[#loc172, #loc170])
#loc247 = loc(fused[#loc173, #loc174])
#loc248 = loc(fused[#loc175, #loc176])
