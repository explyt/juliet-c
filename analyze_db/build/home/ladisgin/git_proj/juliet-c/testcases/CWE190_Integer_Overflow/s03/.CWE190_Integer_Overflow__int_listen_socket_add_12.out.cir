!s32i = !cir.int<s, 32>
!s64i = !cir.int<s, 64>
!s8i = !cir.int<s, 8>
!u16i = !cir.int<u, 16>
!u32i = !cir.int<u, 32>
!u64i = !cir.int<u, 64>
!u8i = !cir.int<u, 8>
!void = !cir.void
#false = #cir.bool<false> : !cir.bool
#fn_attr = #cir<extra({nothrow = #cir.nothrow})>
#fn_attr1 = #cir<extra({inline = #cir.inline<no>, nothrow = #cir.nothrow, optnone = #cir.optnone})>
#loc197 = loc("CWE190_Integer_Overflow__int_listen_socket_add_12.c":384:10)
#loc198 = loc("CWE190_Integer_Overflow__int_listen_socket_add_12.c":384:14)
#loc199 = loc("CWE190_Integer_Overflow__int_listen_socket_add_12.c":384:20)
#loc200 = loc("CWE190_Integer_Overflow__int_listen_socket_add_12.c":384:32)
#true = #cir.bool<true> : !cir.bool
!ty_in_addr = !cir.struct<struct "in_addr" {!u32i} #cir.record.decl.ast>
#loc599 = loc(fused[#loc197, #loc198])
#loc600 = loc(fused[#loc199, #loc200])
!ty_sockaddr = !cir.struct<struct "sockaddr" {!u16i, !cir.array<!s8i x 14>} #cir.record.decl.ast>
!ty_sockaddr_in = !cir.struct<struct "sockaddr_in" {!u16i, !u16i, !ty_in_addr, !cir.array<!u8i x 8>}>
module @"/home/ladisgin/git_proj/juliet-c/testcases/CWE190_Integer_Overflow/s03/CWE190_Integer_Overflow__int_listen_socket_add_12.c" attributes {cir.lang = #cir.lang<c>, cir.sob = #cir.signed_overflow_behavior<undefined>, cir.triple = "x86_64-unknown-linux-gnu", dlti.dl_spec = #dlti.dl_spec<i16 = dense<16> : vector<2xi64>, f16 = dense<16> : vector<2xi64>, i32 = dense<32> : vector<2xi64>, !llvm.ptr<270> = dense<32> : vector<4xi64>, f64 = dense<64> : vector<2xi64>, f128 = dense<128> : vector<2xi64>, !llvm.ptr<272> = dense<64> : vector<4xi64>, !llvm.ptr<271> = dense<32> : vector<4xi64>, i128 = dense<128> : vector<2xi64>, i64 = dense<64> : vector<2xi64>, f80 = dense<128> : vector<2xi64>, !llvm.ptr = dense<64> : vector<4xi64>, i8 = dense<8> : vector<2xi64>, i1 = dense<8> : vector<2xi64>, "dlti.endianness" = "little", "dlti.stack_alignment" = 128 : i64>} {
  cir.func no_proto private @globalReturnsTrueOrFalse(...) -> !s32i loc(#loc523)
  cir.func private @socket(!s32i, !s32i, !s32i) -> !s32i extra(#fn_attr) loc(#loc524)
  cir.func private @htons(!u16i) -> !u16i extra(#fn_attr) loc(#loc525)
  cir.func private @bind(!s32i, !cir.ptr<!ty_sockaddr>, !u32i) -> !s32i extra(#fn_attr) loc(#loc526)
  cir.func private @listen(!s32i, !s32i) -> !s32i extra(#fn_attr) loc(#loc527)
  cir.func private @accept(!s32i, !cir.ptr<!ty_sockaddr>, !cir.ptr<!u32i>) -> !s32i loc(#loc528)
  cir.func private @recv(!s32i, !cir.ptr<!void>, !u64i, !s32i) -> !s64i loc(#loc529)
  cir.func private @atoi(!cir.ptr<!s8i>) -> !s32i extra(#fn_attr) loc(#loc530)
  cir.func private @close(!s32i) -> !s32i loc(#loc531)
  cir.func private @printIntLine(!s32i) loc(#loc532)
  cir.func private @printLine(!cir.ptr<!s8i>) loc(#loc533)
  cir.global "private" constant cir_private dsolocal @".str" = #cir.const_array<"data value is too large to perform arithmetic safely.\00" : !cir.array<!s8i x 54>> : !cir.array<!s8i x 54> {alignment = 1 : i64} loc(#loc23)
  cir.func no_proto @CWE190_Integer_Overflow__int_listen_socket_add_12_bad() extra(#fn_attr1) {
    %0 = cir.alloca !s32i, !cir.ptr<!s32i>, ["data"] {alignment = 4 : i64} loc(#loc535)
    %1 = cir.const #cir.int<0> : !s32i loc(#loc28)
    cir.store %1, %0 : !s32i, !cir.ptr<!s32i> loc(#loc536)
    cir.scope {
      %2 = cir.get_global @globalReturnsTrueOrFalse : !cir.ptr<!cir.func<!s32i (...)>> loc(#loc538)
      %3 = cir.cast(bitcast, %2 : !cir.ptr<!cir.func<!s32i (...)>>), !cir.ptr<!cir.func<!s32i ()>> loc(#loc538)
      %4 = cir.call %3() : (!cir.ptr<!cir.func<!s32i ()>>) -> !s32i loc(#loc32)
      %5 = cir.cast(int_to_bool, %4 : !s32i), !cir.bool loc(#loc32)
      cir.if %5 {
        cir.scope {
          %6 = cir.alloca !s32i, !cir.ptr<!s32i>, ["recvResult"] {alignment = 4 : i64} loc(#loc541)
          %7 = cir.alloca !ty_sockaddr_in, !cir.ptr<!ty_sockaddr_in>, ["service"] {alignment = 4 : i64} loc(#loc542)
          %8 = cir.alloca !s32i, !cir.ptr<!s32i>, ["listenSocket", init] {alignment = 4 : i64} loc(#loc543)
          %9 = cir.alloca !s32i, !cir.ptr<!s32i>, ["acceptSocket", init] {alignment = 4 : i64} loc(#loc544)
          %10 = cir.alloca !cir.array<!s8i x 14>, !cir.ptr<!cir.array<!s8i x 14>>, ["inputBuffer"] {alignment = 1 : i64} loc(#loc545)
          %11 = cir.const #cir.int<1> : !s32i loc(#loc44)
          %12 = cir.unary(minus, %11) : !s32i, !s32i loc(#loc44)
          cir.store %12, %8 : !s32i, !cir.ptr<!s32i> loc(#loc543)
          %13 = cir.const #cir.int<1> : !s32i loc(#loc46)
          %14 = cir.unary(minus, %13) : !s32i, !s32i loc(#loc46)
          cir.store %14, %9 : !s32i, !cir.ptr<!s32i> loc(#loc544)
          cir.scope {
            cir.do {
              %15 = cir.const #cir.int<2> : !s32i loc(#loc51)
              %16 = cir.const #cir.int<1> : !s32i loc(#loc52)
              %17 = cir.const #cir.int<6> : !s32i loc(#loc53)
              %18 = cir.call @socket(%15, %16, %17) : (!s32i, !s32i, !s32i) -> !s32i extra(#fn_attr) loc(#loc54)
              cir.store %18, %8 : !s32i, !cir.ptr<!s32i> loc(#loc547)
              cir.scope {
                %60 = cir.load %8 : !cir.ptr<!s32i>, !s32i loc(#loc59)
                %61 = cir.const #cir.int<1> : !s32i loc(#loc60)
                %62 = cir.unary(minus, %61) : !s32i, !s32i loc(#loc60)
                %63 = cir.cmp(eq, %60, %62) : !s32i, !cir.bool loc(#loc549)
                cir.if %63 {
                  cir.break loc(#loc62)
                } loc(#loc550)
              } loc(#loc548)
              %19 = cir.cast(bitcast, %7 : !cir.ptr<!ty_sockaddr_in>), !cir.ptr<!void> loc(#loc551)
              %20 = cir.const #cir.int<0> : !s32i loc(#loc65)
              %21 = cir.const #cir.int<16> : !u64i loc(#loc552)
              cir.libc.memset %21 bytes from %19 set to %20 : !cir.ptr<!void>, !s32i, !u64i loc(#loc553)
              %22 = cir.const #cir.int<2> : !s32i loc(#loc70)
              %23 = cir.cast(integral, %22 : !s32i), !u16i loc(#loc70)
              %24 = cir.get_member %7[0] {name = "sin_family"} : !cir.ptr<!ty_sockaddr_in> -> !cir.ptr<!u16i> loc(#loc71)
              cir.store %23, %24 : !u16i, !cir.ptr<!u16i> loc(#loc554)
              %25 = cir.const #cir.int<0> : !s32i loc(#loc73)
              %26 = cir.cast(integral, %25 : !s32i), !u32i loc(#loc73)
              %27 = cir.get_member %7[2] {name = "sin_addr"} : !cir.ptr<!ty_sockaddr_in> -> !cir.ptr<!ty_in_addr> loc(#loc74)
              %28 = cir.get_member %27[0] {name = "s_addr"} : !cir.ptr<!ty_in_addr> -> !cir.ptr<!u32i> loc(#loc75)
              cir.store %26, %28 : !u32i, !cir.ptr<!u32i> loc(#loc555)
              %29 = cir.const #cir.int<27015> : !s32i loc(#loc77)
              %30 = cir.cast(integral, %29 : !s32i), !u16i loc(#loc77)
              %31 = cir.call @htons(%30) : (!u16i) -> !u16i extra(#fn_attr) loc(#loc78)
              %32 = cir.get_member %7[1] {name = "sin_port"} : !cir.ptr<!ty_sockaddr_in> -> !cir.ptr<!u16i> loc(#loc79)
              cir.store %31, %32 : !u16i, !cir.ptr<!u16i> loc(#loc556)
              cir.scope {
                %60 = cir.load %8 : !cir.ptr<!s32i>, !s32i loc(#loc84)
                %61 = cir.cast(bitcast, %7 : !cir.ptr<!ty_sockaddr_in>), !cir.ptr<!ty_sockaddr> loc(#loc558)
                %62 = cir.const #cir.int<16> : !u64i loc(#loc559)
                %63 = cir.cast(integral, %62 : !u64i), !u32i loc(#loc559)
                %64 = cir.call @bind(%60, %61, %63) : (!s32i, !cir.ptr<!ty_sockaddr>, !u32i) -> !s32i extra(#fn_attr) loc(#loc89)
                %65 = cir.const #cir.int<1> : !s32i loc(#loc90)
                %66 = cir.unary(minus, %65) : !s32i, !s32i loc(#loc90)
                %67 = cir.cmp(eq, %64, %66) : !s32i, !cir.bool loc(#loc560)
                cir.if %67 {
                  cir.break loc(#loc92)
                } loc(#loc561)
              } loc(#loc557)
              cir.scope {
                %60 = cir.load %8 : !cir.ptr<!s32i>, !s32i loc(#loc95)
                %61 = cir.const #cir.int<5> : !s32i loc(#loc96)
                %62 = cir.call @listen(%60, %61) : (!s32i, !s32i) -> !s32i extra(#fn_attr) loc(#loc97)
                %63 = cir.const #cir.int<1> : !s32i loc(#loc98)
                %64 = cir.unary(minus, %63) : !s32i, !s32i loc(#loc98)
                %65 = cir.cmp(eq, %62, %64) : !s32i, !cir.bool loc(#loc563)
                cir.if %65 {
                  cir.break loc(#loc100)
                } loc(#loc564)
              } loc(#loc562)
              %33 = cir.load %8 : !cir.ptr<!s32i>, !s32i loc(#loc101)
              %34 = cir.const #cir.ptr<null> : !cir.ptr<!ty_sockaddr> loc(#loc102)
              %35 = cir.const #cir.ptr<null> : !cir.ptr<!u32i> loc(#loc103)
              %36 = cir.call @accept(%33, %34, %35) : (!s32i, !cir.ptr<!ty_sockaddr>, !cir.ptr<!u32i>) -> !s32i loc(#loc104)
              cir.store %36, %9 : !s32i, !cir.ptr<!s32i> loc(#loc565)
              cir.scope {
                %60 = cir.load %9 : !cir.ptr<!s32i>, !s32i loc(#loc109)
                %61 = cir.const #cir.int<1> : !s32i loc(#loc110)
                %62 = cir.unary(minus, %61) : !s32i, !s32i loc(#loc110)
                %63 = cir.cmp(eq, %60, %62) : !s32i, !cir.bool loc(#loc567)
                cir.if %63 {
                  cir.break loc(#loc112)
                } loc(#loc568)
              } loc(#loc566)
              %37 = cir.load %9 : !cir.ptr<!s32i>, !s32i loc(#loc113)
              %38 = cir.cast(array_to_ptrdecay, %10 : !cir.ptr<!cir.array<!s8i x 14>>), !cir.ptr<!s8i> loc(#loc114)
              %39 = cir.cast(bitcast, %38 : !cir.ptr<!s8i>), !cir.ptr<!void> loc(#loc114)
              %40 = cir.const #cir.int<3> : !s32i loc(#loc115)
              %41 = cir.cast(integral, %40 : !s32i), !u64i loc(#loc115)
              %42 = cir.const #cir.int<4> : !u64i loc(#loc115)
              %43 = cir.binop(mul, %41, %42) : !u64i loc(#loc115)
              %44 = cir.const #cir.int<2> : !s32i loc(#loc115)
              %45 = cir.cast(integral, %44 : !s32i), !u64i loc(#loc115)
              %46 = cir.binop(add, %43, %45) : !u64i loc(#loc115)
              %47 = cir.const #cir.int<1> : !s32i loc(#loc116)
              %48 = cir.cast(integral, %47 : !s32i), !u64i loc(#loc116)
              %49 = cir.binop(sub, %46, %48) : !u64i loc(#loc569)
              %50 = cir.const #cir.int<0> : !s32i loc(#loc117)
              %51 = cir.call @recv(%37, %39, %49, %50) : (!s32i, !cir.ptr<!void>, !u64i, !s32i) -> !s64i loc(#loc118)
              %52 = cir.cast(integral, %51 : !s64i), !s32i loc(#loc118)
              cir.store %52, %6 : !s32i, !cir.ptr<!s32i> loc(#loc570)
              cir.scope {
                %60 = cir.load %6 : !cir.ptr<!s32i>, !s32i loc(#loc123)
                %61 = cir.const #cir.int<1> : !s32i loc(#loc124)
                %62 = cir.unary(minus, %61) : !s32i, !s32i loc(#loc124)
                %63 = cir.cmp(eq, %60, %62) : !s32i, !cir.bool loc(#loc572)
                %64 = cir.ternary(%63, true {
                  %65 = cir.const #true loc(#loc125)
                  cir.yield %65 : !cir.bool loc(#loc125)
                }, false {
                  %65 = cir.load %6 : !cir.ptr<!s32i>, !s32i loc(#loc126)
                  %66 = cir.const #cir.int<0> : !s32i loc(#loc127)
                  %67 = cir.cmp(eq, %65, %66) : !s32i, !cir.bool loc(#loc573)
                  %68 = cir.ternary(%67, true {
                    %69 = cir.const #true loc(#loc125)
                    cir.yield %69 : !cir.bool loc(#loc125)
                  }, false {
                    %69 = cir.const #false loc(#loc125)
                    cir.yield %69 : !cir.bool loc(#loc125)
                  }) : (!cir.bool) -> !cir.bool loc(#loc125)
                  cir.yield %68 : !cir.bool loc(#loc125)
                }) : (!cir.bool) -> !cir.bool loc(#loc125)
                cir.if %64 {
                  cir.break loc(#loc129)
                } loc(#loc574)
              } loc(#loc571)
              %53 = cir.const #cir.int<0> : !s32i loc(#loc130)
              %54 = cir.cast(integral, %53 : !s32i), !s8i loc(#loc130)
              %55 = cir.load %6 : !cir.ptr<!s32i>, !s32i loc(#loc131)
              %56 = cir.cast(array_to_ptrdecay, %10 : !cir.ptr<!cir.array<!s8i x 14>>), !cir.ptr<!s8i> loc(#loc132)
              %57 = cir.ptr_stride(%56 : !cir.ptr<!s8i>, %55 : !s32i), !cir.ptr<!s8i> loc(#loc132)
              cir.store %54, %57 : !s8i, !cir.ptr<!s8i> loc(#loc575)
              %58 = cir.cast(array_to_ptrdecay, %10 : !cir.ptr<!cir.array<!s8i x 14>>), !cir.ptr<!s8i> loc(#loc133)
              %59 = cir.call @atoi(%58) : (!cir.ptr<!s8i>) -> !s32i extra(#fn_attr) loc(#loc134)
              cir.store %59, %0 : !s32i, !cir.ptr<!s32i> loc(#loc576)
              cir.yield loc(#loc50)
            } while {
              %15 = cir.const #cir.int<0> : !s32i loc(#loc137)
              %16 = cir.cast(int_to_bool, %15 : !s32i), !cir.bool loc(#loc137)
              cir.condition(%16) loc(#loc137)
            } loc(#loc546)
          } loc(#loc546)
          cir.scope {
            %15 = cir.load %8 : !cir.ptr<!s32i>, !s32i loc(#loc140)
            %16 = cir.const #cir.int<1> : !s32i loc(#loc141)
            %17 = cir.unary(minus, %16) : !s32i, !s32i loc(#loc141)
            %18 = cir.cmp(ne, %15, %17) : !s32i, !cir.bool loc(#loc578)
            cir.if %18 {
              %19 = cir.load %8 : !cir.ptr<!s32i>, !s32i loc(#loc143)
              %20 = cir.call @close(%19) : (!s32i) -> !s32i loc(#loc144)
            } loc(#loc579)
          } loc(#loc577)
          cir.scope {
            %15 = cir.load %9 : !cir.ptr<!s32i>, !s32i loc(#loc147)
            %16 = cir.const #cir.int<1> : !s32i loc(#loc148)
            %17 = cir.unary(minus, %16) : !s32i, !s32i loc(#loc148)
            %18 = cir.cmp(ne, %15, %17) : !s32i, !cir.bool loc(#loc581)
            cir.if %18 {
              %19 = cir.load %9 : !cir.ptr<!s32i>, !s32i loc(#loc150)
              %20 = cir.call @close(%19) : (!s32i) -> !s32i loc(#loc151)
            } loc(#loc582)
          } loc(#loc580)
        } loc(#loc540)
      } else {
        %6 = cir.const #cir.int<2> : !s32i loc(#loc152)
        cir.store %6, %0 : !s32i, !cir.ptr<!s32i> loc(#loc583)
      } loc(#loc539)
    } loc(#loc537)
    cir.scope {
      %2 = cir.get_global @globalReturnsTrueOrFalse : !cir.ptr<!cir.func<!s32i (...)>> loc(#loc585)
      %3 = cir.cast(bitcast, %2 : !cir.ptr<!cir.func<!s32i (...)>>), !cir.ptr<!cir.func<!s32i ()>> loc(#loc585)
      %4 = cir.call %3() : (!cir.ptr<!cir.func<!s32i ()>>) -> !s32i loc(#loc156)
      %5 = cir.cast(int_to_bool, %4 : !s32i), !cir.bool loc(#loc156)
      cir.if %5 {
        cir.scope {
          %6 = cir.alloca !s32i, !cir.ptr<!s32i>, ["result", init] {alignment = 4 : i64} loc(#loc588)
          %7 = cir.load %0 : !cir.ptr<!s32i>, !s32i loc(#loc165)
          %8 = cir.const #cir.int<1> : !s32i loc(#loc164)
          %9 = cir.binop(add, %7, %8) nsw : !s32i loc(#loc165)
          cir.store %9, %6 : !s32i, !cir.ptr<!s32i> loc(#loc588)
          %10 = cir.load %6 : !cir.ptr<!s32i>, !s32i loc(#loc166)
          cir.call @printIntLine(%10) : (!s32i) -> () loc(#loc167)
        } loc(#loc587)
      } else {
        cir.scope {
          %6 = cir.load %0 : !cir.ptr<!s32i>, !s32i loc(#loc170)
          %7 = cir.const #cir.int<2147483647> : !s32i loc(#loc171)
          %8 = cir.cmp(lt, %6, %7) : !s32i, !cir.bool loc(#loc590)
          cir.if %8 {
            %9 = cir.alloca !s32i, !cir.ptr<!s32i>, ["result", init] {alignment = 4 : i64} loc(#loc592)
            %10 = cir.load %0 : !cir.ptr<!s32i>, !s32i loc(#loc177)
            %11 = cir.const #cir.int<1> : !s32i loc(#loc176)
            %12 = cir.binop(add, %10, %11) nsw : !s32i loc(#loc177)
            cir.store %12, %9 : !s32i, !cir.ptr<!s32i> loc(#loc592)
            %13 = cir.load %9 : !cir.ptr<!s32i>, !s32i loc(#loc178)
            cir.call @printIntLine(%13) : (!s32i) -> () loc(#loc179)
          } else {
            %9 = cir.get_global @".str" : !cir.ptr<!cir.array<!s8i x 54>> loc(#loc23)
            %10 = cir.cast(array_to_ptrdecay, %9 : !cir.ptr<!cir.array<!s8i x 54>>), !cir.ptr<!s8i> loc(#loc23)
            cir.call @printLine(%10) : (!cir.ptr<!s8i>) -> () loc(#loc180)
          } loc(#loc591)
        } loc(#loc589)
      } loc(#loc586)
    } loc(#loc584)
    cir.return loc(#loc25)
  } loc(#loc534)
  cir.func no_proto @CWE190_Integer_Overflow__int_listen_socket_add_12_good() extra(#fn_attr1) {
    %0 = cir.get_global @goodB2G : !cir.ptr<!cir.func<!void ()>> loc(#loc594)
    cir.call %0() : (!cir.ptr<!cir.func<!void ()>>) -> () loc(#loc183)
    %1 = cir.get_global @goodG2B : !cir.ptr<!cir.func<!void ()>> loc(#loc595)
    cir.call %1() : (!cir.ptr<!cir.func<!void ()>>) -> () loc(#loc185)
    cir.return loc(#loc182)
  } loc(#loc593)
  cir.func private @srand(!u32i) extra(#fn_attr) loc(#loc596)
  cir.func private @time(!cir.ptr<!s64i>) -> !s64i extra(#fn_attr) loc(#loc597)
  cir.global "private" constant cir_private dsolocal @".str.1" = #cir.const_array<"Calling good()...\00" : !cir.array<!s8i x 18>> : !cir.array<!s8i x 18> {alignment = 1 : i64} loc(#loc191)
  cir.global "private" constant cir_private dsolocal @".str.2" = #cir.const_array<"Finished good()\00" : !cir.array<!s8i x 16>> : !cir.array<!s8i x 16> {alignment = 1 : i64} loc(#loc192)
  cir.global "private" constant cir_private dsolocal @".str.3" = #cir.const_array<"Calling bad()...\00" : !cir.array<!s8i x 17>> : !cir.array<!s8i x 17> {alignment = 1 : i64} loc(#loc193)
  cir.global "private" constant cir_private dsolocal @".str.4" = #cir.const_array<"Finished bad()\00" : !cir.array<!s8i x 15>> : !cir.array<!s8i x 15> {alignment = 1 : i64} loc(#loc194)
  cir.func @main(%arg0: !s32i loc(fused[#loc197, #loc198]), %arg1: !cir.ptr<!cir.ptr<!s8i>> loc(fused[#loc199, #loc200])) -> !s32i extra(#fn_attr1) {
    %0 = cir.alloca !s32i, !cir.ptr<!s32i>, ["argc", init] {alignment = 4 : i64} loc(#loc599)
    %1 = cir.alloca !cir.ptr<!cir.ptr<!s8i>>, !cir.ptr<!cir.ptr<!cir.ptr<!s8i>>>, ["argv", init] {alignment = 8 : i64} loc(#loc600)
    %2 = cir.alloca !s32i, !cir.ptr<!s32i>, ["__retval"] {alignment = 4 : i64} loc(#loc196)
    cir.store %arg0, %0 : !s32i, !cir.ptr<!s32i> loc(#loc201)
    cir.store %arg1, %1 : !cir.ptr<!cir.ptr<!s8i>>, !cir.ptr<!cir.ptr<!cir.ptr<!s8i>>> loc(#loc201)
    %3 = cir.const #cir.ptr<null> : !cir.ptr<!s64i> loc(#loc202)
    %4 = cir.call @time(%3) : (!cir.ptr<!s64i>) -> !s64i extra(#fn_attr) loc(#loc203)
    %5 = cir.cast(integral, %4 : !s64i), !u32i loc(#loc203)
    cir.call @srand(%5) : (!u32i) -> () extra(#fn_attr) loc(#loc204)
    %6 = cir.get_global @".str.1" : !cir.ptr<!cir.array<!s8i x 18>> loc(#loc191)
    %7 = cir.cast(array_to_ptrdecay, %6 : !cir.ptr<!cir.array<!s8i x 18>>), !cir.ptr<!s8i> loc(#loc191)
    cir.call @printLine(%7) : (!cir.ptr<!s8i>) -> () loc(#loc205)
    %8 = cir.get_global @CWE190_Integer_Overflow__int_listen_socket_add_12_good : !cir.ptr<!cir.func<!void ()>> loc(#loc601)
    cir.call @CWE190_Integer_Overflow__int_listen_socket_add_12_good() : () -> () loc(#loc206)
    %9 = cir.get_global @".str.2" : !cir.ptr<!cir.array<!s8i x 16>> loc(#loc192)
    %10 = cir.cast(array_to_ptrdecay, %9 : !cir.ptr<!cir.array<!s8i x 16>>), !cir.ptr<!s8i> loc(#loc192)
    cir.call @printLine(%10) : (!cir.ptr<!s8i>) -> () loc(#loc208)
    %11 = cir.get_global @".str.3" : !cir.ptr<!cir.array<!s8i x 17>> loc(#loc193)
    %12 = cir.cast(array_to_ptrdecay, %11 : !cir.ptr<!cir.array<!s8i x 17>>), !cir.ptr<!s8i> loc(#loc193)
    cir.call @printLine(%12) : (!cir.ptr<!s8i>) -> () loc(#loc209)
    %13 = cir.get_global @CWE190_Integer_Overflow__int_listen_socket_add_12_bad : !cir.ptr<!cir.func<!void ()>> loc(#loc602)
    cir.call @CWE190_Integer_Overflow__int_listen_socket_add_12_bad() : () -> () loc(#loc210)
    %14 = cir.get_global @".str.4" : !cir.ptr<!cir.array<!s8i x 15>> loc(#loc194)
    %15 = cir.cast(array_to_ptrdecay, %14 : !cir.ptr<!cir.array<!s8i x 15>>), !cir.ptr<!s8i> loc(#loc194)
    cir.call @printLine(%15) : (!cir.ptr<!s8i>) -> () loc(#loc212)
    %16 = cir.const #cir.int<0> : !s32i loc(#loc213)
    cir.store %16, %2 : !s32i, !cir.ptr<!s32i> loc(#loc603)
    %17 = cir.load %2 : !cir.ptr<!s32i>, !s32i loc(#loc603)
    cir.return %17 : !s32i loc(#loc603)
  } loc(#loc598)
  cir.func no_proto internal private @goodB2G() extra(#fn_attr1) {
    %0 = cir.alloca !s32i, !cir.ptr<!s32i>, ["data"] {alignment = 4 : i64} loc(#loc605)
    %1 = cir.const #cir.int<0> : !s32i loc(#loc219)
    cir.store %1, %0 : !s32i, !cir.ptr<!s32i> loc(#loc606)
    cir.scope {
      %2 = cir.get_global @globalReturnsTrueOrFalse : !cir.ptr<!cir.func<!s32i (...)>> loc(#loc608)
      %3 = cir.cast(bitcast, %2 : !cir.ptr<!cir.func<!s32i (...)>>), !cir.ptr<!cir.func<!s32i ()>> loc(#loc608)
      %4 = cir.call %3() : (!cir.ptr<!cir.func<!s32i ()>>) -> !s32i loc(#loc223)
      %5 = cir.cast(int_to_bool, %4 : !s32i), !cir.bool loc(#loc223)
      cir.if %5 {
        cir.scope {
          %6 = cir.alloca !s32i, !cir.ptr<!s32i>, ["recvResult"] {alignment = 4 : i64} loc(#loc611)
          %7 = cir.alloca !ty_sockaddr_in, !cir.ptr<!ty_sockaddr_in>, ["service"] {alignment = 4 : i64} loc(#loc612)
          %8 = cir.alloca !s32i, !cir.ptr<!s32i>, ["listenSocket", init] {alignment = 4 : i64} loc(#loc613)
          %9 = cir.alloca !s32i, !cir.ptr<!s32i>, ["acceptSocket", init] {alignment = 4 : i64} loc(#loc614)
          %10 = cir.alloca !cir.array<!s8i x 14>, !cir.ptr<!cir.array<!s8i x 14>>, ["inputBuffer"] {alignment = 1 : i64} loc(#loc615)
          %11 = cir.const #cir.int<1> : !s32i loc(#loc235)
          %12 = cir.unary(minus, %11) : !s32i, !s32i loc(#loc235)
          cir.store %12, %8 : !s32i, !cir.ptr<!s32i> loc(#loc613)
          %13 = cir.const #cir.int<1> : !s32i loc(#loc237)
          %14 = cir.unary(minus, %13) : !s32i, !s32i loc(#loc237)
          cir.store %14, %9 : !s32i, !cir.ptr<!s32i> loc(#loc614)
          cir.scope {
            cir.do {
              %15 = cir.const #cir.int<2> : !s32i loc(#loc242)
              %16 = cir.const #cir.int<1> : !s32i loc(#loc243)
              %17 = cir.const #cir.int<6> : !s32i loc(#loc244)
              %18 = cir.call @socket(%15, %16, %17) : (!s32i, !s32i, !s32i) -> !s32i extra(#fn_attr) loc(#loc245)
              cir.store %18, %8 : !s32i, !cir.ptr<!s32i> loc(#loc617)
              cir.scope {
                %60 = cir.load %8 : !cir.ptr<!s32i>, !s32i loc(#loc250)
                %61 = cir.const #cir.int<1> : !s32i loc(#loc251)
                %62 = cir.unary(minus, %61) : !s32i, !s32i loc(#loc251)
                %63 = cir.cmp(eq, %60, %62) : !s32i, !cir.bool loc(#loc619)
                cir.if %63 {
                  cir.break loc(#loc253)
                } loc(#loc620)
              } loc(#loc618)
              %19 = cir.cast(bitcast, %7 : !cir.ptr<!ty_sockaddr_in>), !cir.ptr<!void> loc(#loc621)
              %20 = cir.const #cir.int<0> : !s32i loc(#loc256)
              %21 = cir.const #cir.int<16> : !u64i loc(#loc622)
              cir.libc.memset %21 bytes from %19 set to %20 : !cir.ptr<!void>, !s32i, !u64i loc(#loc623)
              %22 = cir.const #cir.int<2> : !s32i loc(#loc261)
              %23 = cir.cast(integral, %22 : !s32i), !u16i loc(#loc261)
              %24 = cir.get_member %7[0] {name = "sin_family"} : !cir.ptr<!ty_sockaddr_in> -> !cir.ptr<!u16i> loc(#loc71)
              cir.store %23, %24 : !u16i, !cir.ptr<!u16i> loc(#loc624)
              %25 = cir.const #cir.int<0> : !s32i loc(#loc263)
              %26 = cir.cast(integral, %25 : !s32i), !u32i loc(#loc263)
              %27 = cir.get_member %7[2] {name = "sin_addr"} : !cir.ptr<!ty_sockaddr_in> -> !cir.ptr<!ty_in_addr> loc(#loc74)
              %28 = cir.get_member %27[0] {name = "s_addr"} : !cir.ptr<!ty_in_addr> -> !cir.ptr<!u32i> loc(#loc75)
              cir.store %26, %28 : !u32i, !cir.ptr<!u32i> loc(#loc625)
              %29 = cir.const #cir.int<27015> : !s32i loc(#loc265)
              %30 = cir.cast(integral, %29 : !s32i), !u16i loc(#loc265)
              %31 = cir.call @htons(%30) : (!u16i) -> !u16i extra(#fn_attr) loc(#loc266)
              %32 = cir.get_member %7[1] {name = "sin_port"} : !cir.ptr<!ty_sockaddr_in> -> !cir.ptr<!u16i> loc(#loc79)
              cir.store %31, %32 : !u16i, !cir.ptr<!u16i> loc(#loc626)
              cir.scope {
                %60 = cir.load %8 : !cir.ptr<!s32i>, !s32i loc(#loc271)
                %61 = cir.cast(bitcast, %7 : !cir.ptr<!ty_sockaddr_in>), !cir.ptr<!ty_sockaddr> loc(#loc628)
                %62 = cir.const #cir.int<16> : !u64i loc(#loc629)
                %63 = cir.cast(integral, %62 : !u64i), !u32i loc(#loc629)
                %64 = cir.call @bind(%60, %61, %63) : (!s32i, !cir.ptr<!ty_sockaddr>, !u32i) -> !s32i extra(#fn_attr) loc(#loc276)
                %65 = cir.const #cir.int<1> : !s32i loc(#loc277)
                %66 = cir.unary(minus, %65) : !s32i, !s32i loc(#loc277)
                %67 = cir.cmp(eq, %64, %66) : !s32i, !cir.bool loc(#loc630)
                cir.if %67 {
                  cir.break loc(#loc279)
                } loc(#loc631)
              } loc(#loc627)
              cir.scope {
                %60 = cir.load %8 : !cir.ptr<!s32i>, !s32i loc(#loc282)
                %61 = cir.const #cir.int<5> : !s32i loc(#loc283)
                %62 = cir.call @listen(%60, %61) : (!s32i, !s32i) -> !s32i extra(#fn_attr) loc(#loc284)
                %63 = cir.const #cir.int<1> : !s32i loc(#loc285)
                %64 = cir.unary(minus, %63) : !s32i, !s32i loc(#loc285)
                %65 = cir.cmp(eq, %62, %64) : !s32i, !cir.bool loc(#loc633)
                cir.if %65 {
                  cir.break loc(#loc287)
                } loc(#loc634)
              } loc(#loc632)
              %33 = cir.load %8 : !cir.ptr<!s32i>, !s32i loc(#loc288)
              %34 = cir.const #cir.ptr<null> : !cir.ptr<!ty_sockaddr> loc(#loc289)
              %35 = cir.const #cir.ptr<null> : !cir.ptr<!u32i> loc(#loc290)
              %36 = cir.call @accept(%33, %34, %35) : (!s32i, !cir.ptr<!ty_sockaddr>, !cir.ptr<!u32i>) -> !s32i loc(#loc291)
              cir.store %36, %9 : !s32i, !cir.ptr<!s32i> loc(#loc635)
              cir.scope {
                %60 = cir.load %9 : !cir.ptr<!s32i>, !s32i loc(#loc296)
                %61 = cir.const #cir.int<1> : !s32i loc(#loc297)
                %62 = cir.unary(minus, %61) : !s32i, !s32i loc(#loc297)
                %63 = cir.cmp(eq, %60, %62) : !s32i, !cir.bool loc(#loc637)
                cir.if %63 {
                  cir.break loc(#loc299)
                } loc(#loc638)
              } loc(#loc636)
              %37 = cir.load %9 : !cir.ptr<!s32i>, !s32i loc(#loc300)
              %38 = cir.cast(array_to_ptrdecay, %10 : !cir.ptr<!cir.array<!s8i x 14>>), !cir.ptr<!s8i> loc(#loc301)
              %39 = cir.cast(bitcast, %38 : !cir.ptr<!s8i>), !cir.ptr<!void> loc(#loc301)
              %40 = cir.const #cir.int<3> : !s32i loc(#loc302)
              %41 = cir.cast(integral, %40 : !s32i), !u64i loc(#loc302)
              %42 = cir.const #cir.int<4> : !u64i loc(#loc302)
              %43 = cir.binop(mul, %41, %42) : !u64i loc(#loc302)
              %44 = cir.const #cir.int<2> : !s32i loc(#loc302)
              %45 = cir.cast(integral, %44 : !s32i), !u64i loc(#loc302)
              %46 = cir.binop(add, %43, %45) : !u64i loc(#loc302)
              %47 = cir.const #cir.int<1> : !s32i loc(#loc303)
              %48 = cir.cast(integral, %47 : !s32i), !u64i loc(#loc303)
              %49 = cir.binop(sub, %46, %48) : !u64i loc(#loc639)
              %50 = cir.const #cir.int<0> : !s32i loc(#loc304)
              %51 = cir.call @recv(%37, %39, %49, %50) : (!s32i, !cir.ptr<!void>, !u64i, !s32i) -> !s64i loc(#loc305)
              %52 = cir.cast(integral, %51 : !s64i), !s32i loc(#loc305)
              cir.store %52, %6 : !s32i, !cir.ptr<!s32i> loc(#loc640)
              cir.scope {
                %60 = cir.load %6 : !cir.ptr<!s32i>, !s32i loc(#loc310)
                %61 = cir.const #cir.int<1> : !s32i loc(#loc311)
                %62 = cir.unary(minus, %61) : !s32i, !s32i loc(#loc311)
                %63 = cir.cmp(eq, %60, %62) : !s32i, !cir.bool loc(#loc642)
                %64 = cir.ternary(%63, true {
                  %65 = cir.const #true loc(#loc312)
                  cir.yield %65 : !cir.bool loc(#loc312)
                }, false {
                  %65 = cir.load %6 : !cir.ptr<!s32i>, !s32i loc(#loc313)
                  %66 = cir.const #cir.int<0> : !s32i loc(#loc314)
                  %67 = cir.cmp(eq, %65, %66) : !s32i, !cir.bool loc(#loc643)
                  %68 = cir.ternary(%67, true {
                    %69 = cir.const #true loc(#loc312)
                    cir.yield %69 : !cir.bool loc(#loc312)
                  }, false {
                    %69 = cir.const #false loc(#loc312)
                    cir.yield %69 : !cir.bool loc(#loc312)
                  }) : (!cir.bool) -> !cir.bool loc(#loc312)
                  cir.yield %68 : !cir.bool loc(#loc312)
                }) : (!cir.bool) -> !cir.bool loc(#loc312)
                cir.if %64 {
                  cir.break loc(#loc316)
                } loc(#loc644)
              } loc(#loc641)
              %53 = cir.const #cir.int<0> : !s32i loc(#loc317)
              %54 = cir.cast(integral, %53 : !s32i), !s8i loc(#loc317)
              %55 = cir.load %6 : !cir.ptr<!s32i>, !s32i loc(#loc318)
              %56 = cir.cast(array_to_ptrdecay, %10 : !cir.ptr<!cir.array<!s8i x 14>>), !cir.ptr<!s8i> loc(#loc319)
              %57 = cir.ptr_stride(%56 : !cir.ptr<!s8i>, %55 : !s32i), !cir.ptr<!s8i> loc(#loc319)
              cir.store %54, %57 : !s8i, !cir.ptr<!s8i> loc(#loc645)
              %58 = cir.cast(array_to_ptrdecay, %10 : !cir.ptr<!cir.array<!s8i x 14>>), !cir.ptr<!s8i> loc(#loc320)
              %59 = cir.call @atoi(%58) : (!cir.ptr<!s8i>) -> !s32i extra(#fn_attr) loc(#loc321)
              cir.store %59, %0 : !s32i, !cir.ptr<!s32i> loc(#loc646)
              cir.yield loc(#loc241)
            } while {
              %15 = cir.const #cir.int<0> : !s32i loc(#loc324)
              %16 = cir.cast(int_to_bool, %15 : !s32i), !cir.bool loc(#loc324)
              cir.condition(%16) loc(#loc324)
            } loc(#loc616)
          } loc(#loc616)
          cir.scope {
            %15 = cir.load %8 : !cir.ptr<!s32i>, !s32i loc(#loc327)
            %16 = cir.const #cir.int<1> : !s32i loc(#loc328)
            %17 = cir.unary(minus, %16) : !s32i, !s32i loc(#loc328)
            %18 = cir.cmp(ne, %15, %17) : !s32i, !cir.bool loc(#loc648)
            cir.if %18 {
              %19 = cir.load %8 : !cir.ptr<!s32i>, !s32i loc(#loc330)
              %20 = cir.call @close(%19) : (!s32i) -> !s32i loc(#loc331)
            } loc(#loc649)
          } loc(#loc647)
          cir.scope {
            %15 = cir.load %9 : !cir.ptr<!s32i>, !s32i loc(#loc334)
            %16 = cir.const #cir.int<1> : !s32i loc(#loc335)
            %17 = cir.unary(minus, %16) : !s32i, !s32i loc(#loc335)
            %18 = cir.cmp(ne, %15, %17) : !s32i, !cir.bool loc(#loc651)
            cir.if %18 {
              %19 = cir.load %9 : !cir.ptr<!s32i>, !s32i loc(#loc337)
              %20 = cir.call @close(%19) : (!s32i) -> !s32i loc(#loc338)
            } loc(#loc652)
          } loc(#loc650)
        } loc(#loc610)
      } else {
        cir.scope {
          %6 = cir.alloca !s32i, !cir.ptr<!s32i>, ["recvResult"] {alignment = 4 : i64} loc(#loc654)
          %7 = cir.alloca !ty_sockaddr_in, !cir.ptr<!ty_sockaddr_in>, ["service"] {alignment = 4 : i64} loc(#loc655)
          %8 = cir.alloca !s32i, !cir.ptr<!s32i>, ["listenSocket", init] {alignment = 4 : i64} loc(#loc656)
          %9 = cir.alloca !s32i, !cir.ptr<!s32i>, ["acceptSocket", init] {alignment = 4 : i64} loc(#loc657)
          %10 = cir.alloca !cir.array<!s8i x 14>, !cir.ptr<!cir.array<!s8i x 14>>, ["inputBuffer"] {alignment = 1 : i64} loc(#loc658)
          %11 = cir.const #cir.int<1> : !s32i loc(#loc346)
          %12 = cir.unary(minus, %11) : !s32i, !s32i loc(#loc346)
          cir.store %12, %8 : !s32i, !cir.ptr<!s32i> loc(#loc656)
          %13 = cir.const #cir.int<1> : !s32i loc(#loc348)
          %14 = cir.unary(minus, %13) : !s32i, !s32i loc(#loc348)
          cir.store %14, %9 : !s32i, !cir.ptr<!s32i> loc(#loc657)
          cir.scope {
            cir.do {
              %15 = cir.const #cir.int<2> : !s32i loc(#loc353)
              %16 = cir.const #cir.int<1> : !s32i loc(#loc354)
              %17 = cir.const #cir.int<6> : !s32i loc(#loc355)
              %18 = cir.call @socket(%15, %16, %17) : (!s32i, !s32i, !s32i) -> !s32i extra(#fn_attr) loc(#loc356)
              cir.store %18, %8 : !s32i, !cir.ptr<!s32i> loc(#loc660)
              cir.scope {
                %60 = cir.load %8 : !cir.ptr<!s32i>, !s32i loc(#loc361)
                %61 = cir.const #cir.int<1> : !s32i loc(#loc362)
                %62 = cir.unary(minus, %61) : !s32i, !s32i loc(#loc362)
                %63 = cir.cmp(eq, %60, %62) : !s32i, !cir.bool loc(#loc662)
                cir.if %63 {
                  cir.break loc(#loc364)
                } loc(#loc663)
              } loc(#loc661)
              %19 = cir.cast(bitcast, %7 : !cir.ptr<!ty_sockaddr_in>), !cir.ptr<!void> loc(#loc664)
              %20 = cir.const #cir.int<0> : !s32i loc(#loc367)
              %21 = cir.const #cir.int<16> : !u64i loc(#loc665)
              cir.libc.memset %21 bytes from %19 set to %20 : !cir.ptr<!void>, !s32i, !u64i loc(#loc666)
              %22 = cir.const #cir.int<2> : !s32i loc(#loc372)
              %23 = cir.cast(integral, %22 : !s32i), !u16i loc(#loc372)
              %24 = cir.get_member %7[0] {name = "sin_family"} : !cir.ptr<!ty_sockaddr_in> -> !cir.ptr<!u16i> loc(#loc71)
              cir.store %23, %24 : !u16i, !cir.ptr<!u16i> loc(#loc667)
              %25 = cir.const #cir.int<0> : !s32i loc(#loc374)
              %26 = cir.cast(integral, %25 : !s32i), !u32i loc(#loc374)
              %27 = cir.get_member %7[2] {name = "sin_addr"} : !cir.ptr<!ty_sockaddr_in> -> !cir.ptr<!ty_in_addr> loc(#loc74)
              %28 = cir.get_member %27[0] {name = "s_addr"} : !cir.ptr<!ty_in_addr> -> !cir.ptr<!u32i> loc(#loc75)
              cir.store %26, %28 : !u32i, !cir.ptr<!u32i> loc(#loc668)
              %29 = cir.const #cir.int<27015> : !s32i loc(#loc376)
              %30 = cir.cast(integral, %29 : !s32i), !u16i loc(#loc376)
              %31 = cir.call @htons(%30) : (!u16i) -> !u16i extra(#fn_attr) loc(#loc377)
              %32 = cir.get_member %7[1] {name = "sin_port"} : !cir.ptr<!ty_sockaddr_in> -> !cir.ptr<!u16i> loc(#loc79)
              cir.store %31, %32 : !u16i, !cir.ptr<!u16i> loc(#loc669)
              cir.scope {
                %60 = cir.load %8 : !cir.ptr<!s32i>, !s32i loc(#loc382)
                %61 = cir.cast(bitcast, %7 : !cir.ptr<!ty_sockaddr_in>), !cir.ptr<!ty_sockaddr> loc(#loc671)
                %62 = cir.const #cir.int<16> : !u64i loc(#loc672)
                %63 = cir.cast(integral, %62 : !u64i), !u32i loc(#loc672)
                %64 = cir.call @bind(%60, %61, %63) : (!s32i, !cir.ptr<!ty_sockaddr>, !u32i) -> !s32i extra(#fn_attr) loc(#loc387)
                %65 = cir.const #cir.int<1> : !s32i loc(#loc388)
                %66 = cir.unary(minus, %65) : !s32i, !s32i loc(#loc388)
                %67 = cir.cmp(eq, %64, %66) : !s32i, !cir.bool loc(#loc673)
                cir.if %67 {
                  cir.break loc(#loc390)
                } loc(#loc674)
              } loc(#loc670)
              cir.scope {
                %60 = cir.load %8 : !cir.ptr<!s32i>, !s32i loc(#loc393)
                %61 = cir.const #cir.int<5> : !s32i loc(#loc394)
                %62 = cir.call @listen(%60, %61) : (!s32i, !s32i) -> !s32i extra(#fn_attr) loc(#loc395)
                %63 = cir.const #cir.int<1> : !s32i loc(#loc396)
                %64 = cir.unary(minus, %63) : !s32i, !s32i loc(#loc396)
                %65 = cir.cmp(eq, %62, %64) : !s32i, !cir.bool loc(#loc676)
                cir.if %65 {
                  cir.break loc(#loc398)
                } loc(#loc677)
              } loc(#loc675)
              %33 = cir.load %8 : !cir.ptr<!s32i>, !s32i loc(#loc399)
              %34 = cir.const #cir.ptr<null> : !cir.ptr<!ty_sockaddr> loc(#loc400)
              %35 = cir.const #cir.ptr<null> : !cir.ptr<!u32i> loc(#loc401)
              %36 = cir.call @accept(%33, %34, %35) : (!s32i, !cir.ptr<!ty_sockaddr>, !cir.ptr<!u32i>) -> !s32i loc(#loc402)
              cir.store %36, %9 : !s32i, !cir.ptr<!s32i> loc(#loc678)
              cir.scope {
                %60 = cir.load %9 : !cir.ptr<!s32i>, !s32i loc(#loc407)
                %61 = cir.const #cir.int<1> : !s32i loc(#loc408)
                %62 = cir.unary(minus, %61) : !s32i, !s32i loc(#loc408)
                %63 = cir.cmp(eq, %60, %62) : !s32i, !cir.bool loc(#loc680)
                cir.if %63 {
                  cir.break loc(#loc410)
                } loc(#loc681)
              } loc(#loc679)
              %37 = cir.load %9 : !cir.ptr<!s32i>, !s32i loc(#loc411)
              %38 = cir.cast(array_to_ptrdecay, %10 : !cir.ptr<!cir.array<!s8i x 14>>), !cir.ptr<!s8i> loc(#loc412)
              %39 = cir.cast(bitcast, %38 : !cir.ptr<!s8i>), !cir.ptr<!void> loc(#loc412)
              %40 = cir.const #cir.int<3> : !s32i loc(#loc413)
              %41 = cir.cast(integral, %40 : !s32i), !u64i loc(#loc413)
              %42 = cir.const #cir.int<4> : !u64i loc(#loc413)
              %43 = cir.binop(mul, %41, %42) : !u64i loc(#loc413)
              %44 = cir.const #cir.int<2> : !s32i loc(#loc413)
              %45 = cir.cast(integral, %44 : !s32i), !u64i loc(#loc413)
              %46 = cir.binop(add, %43, %45) : !u64i loc(#loc413)
              %47 = cir.const #cir.int<1> : !s32i loc(#loc414)
              %48 = cir.cast(integral, %47 : !s32i), !u64i loc(#loc414)
              %49 = cir.binop(sub, %46, %48) : !u64i loc(#loc682)
              %50 = cir.const #cir.int<0> : !s32i loc(#loc415)
              %51 = cir.call @recv(%37, %39, %49, %50) : (!s32i, !cir.ptr<!void>, !u64i, !s32i) -> !s64i loc(#loc416)
              %52 = cir.cast(integral, %51 : !s64i), !s32i loc(#loc416)
              cir.store %52, %6 : !s32i, !cir.ptr<!s32i> loc(#loc683)
              cir.scope {
                %60 = cir.load %6 : !cir.ptr<!s32i>, !s32i loc(#loc421)
                %61 = cir.const #cir.int<1> : !s32i loc(#loc422)
                %62 = cir.unary(minus, %61) : !s32i, !s32i loc(#loc422)
                %63 = cir.cmp(eq, %60, %62) : !s32i, !cir.bool loc(#loc685)
                %64 = cir.ternary(%63, true {
                  %65 = cir.const #true loc(#loc423)
                  cir.yield %65 : !cir.bool loc(#loc423)
                }, false {
                  %65 = cir.load %6 : !cir.ptr<!s32i>, !s32i loc(#loc424)
                  %66 = cir.const #cir.int<0> : !s32i loc(#loc425)
                  %67 = cir.cmp(eq, %65, %66) : !s32i, !cir.bool loc(#loc686)
                  %68 = cir.ternary(%67, true {
                    %69 = cir.const #true loc(#loc423)
                    cir.yield %69 : !cir.bool loc(#loc423)
                  }, false {
                    %69 = cir.const #false loc(#loc423)
                    cir.yield %69 : !cir.bool loc(#loc423)
                  }) : (!cir.bool) -> !cir.bool loc(#loc423)
                  cir.yield %68 : !cir.bool loc(#loc423)
                }) : (!cir.bool) -> !cir.bool loc(#loc423)
                cir.if %64 {
                  cir.break loc(#loc427)
                } loc(#loc687)
              } loc(#loc684)
              %53 = cir.const #cir.int<0> : !s32i loc(#loc428)
              %54 = cir.cast(integral, %53 : !s32i), !s8i loc(#loc428)
              %55 = cir.load %6 : !cir.ptr<!s32i>, !s32i loc(#loc429)
              %56 = cir.cast(array_to_ptrdecay, %10 : !cir.ptr<!cir.array<!s8i x 14>>), !cir.ptr<!s8i> loc(#loc430)
              %57 = cir.ptr_stride(%56 : !cir.ptr<!s8i>, %55 : !s32i), !cir.ptr<!s8i> loc(#loc430)
              cir.store %54, %57 : !s8i, !cir.ptr<!s8i> loc(#loc688)
              %58 = cir.cast(array_to_ptrdecay, %10 : !cir.ptr<!cir.array<!s8i x 14>>), !cir.ptr<!s8i> loc(#loc431)
              %59 = cir.call @atoi(%58) : (!cir.ptr<!s8i>) -> !s32i extra(#fn_attr) loc(#loc432)
              cir.store %59, %0 : !s32i, !cir.ptr<!s32i> loc(#loc689)
              cir.yield loc(#loc352)
            } while {
              %15 = cir.const #cir.int<0> : !s32i loc(#loc435)
              %16 = cir.cast(int_to_bool, %15 : !s32i), !cir.bool loc(#loc435)
              cir.condition(%16) loc(#loc435)
            } loc(#loc659)
          } loc(#loc659)
          cir.scope {
            %15 = cir.load %8 : !cir.ptr<!s32i>, !s32i loc(#loc438)
            %16 = cir.const #cir.int<1> : !s32i loc(#loc439)
            %17 = cir.unary(minus, %16) : !s32i, !s32i loc(#loc439)
            %18 = cir.cmp(ne, %15, %17) : !s32i, !cir.bool loc(#loc691)
            cir.if %18 {
              %19 = cir.load %8 : !cir.ptr<!s32i>, !s32i loc(#loc441)
              %20 = cir.call @close(%19) : (!s32i) -> !s32i loc(#loc442)
            } loc(#loc692)
          } loc(#loc690)
          cir.scope {
            %15 = cir.load %9 : !cir.ptr<!s32i>, !s32i loc(#loc445)
            %16 = cir.const #cir.int<1> : !s32i loc(#loc446)
            %17 = cir.unary(minus, %16) : !s32i, !s32i loc(#loc446)
            %18 = cir.cmp(ne, %15, %17) : !s32i, !cir.bool loc(#loc694)
            cir.if %18 {
              %19 = cir.load %9 : !cir.ptr<!s32i>, !s32i loc(#loc448)
              %20 = cir.call @close(%19) : (!s32i) -> !s32i loc(#loc449)
            } loc(#loc695)
          } loc(#loc693)
        } loc(#loc653)
      } loc(#loc609)
    } loc(#loc607)
    cir.scope {
      %2 = cir.get_global @globalReturnsTrueOrFalse : !cir.ptr<!cir.func<!s32i (...)>> loc(#loc697)
      %3 = cir.cast(bitcast, %2 : !cir.ptr<!cir.func<!s32i (...)>>), !cir.ptr<!cir.func<!s32i ()>> loc(#loc697)
      %4 = cir.call %3() : (!cir.ptr<!cir.func<!s32i ()>>) -> !s32i loc(#loc452)
      %5 = cir.cast(int_to_bool, %4 : !s32i), !cir.bool loc(#loc452)
      cir.if %5 {
        cir.scope {
          %6 = cir.load %0 : !cir.ptr<!s32i>, !s32i loc(#loc459)
          %7 = cir.const #cir.int<2147483647> : !s32i loc(#loc460)
          %8 = cir.cmp(lt, %6, %7) : !s32i, !cir.bool loc(#loc700)
          cir.if %8 {
            %9 = cir.alloca !s32i, !cir.ptr<!s32i>, ["result", init] {alignment = 4 : i64} loc(#loc702)
            %10 = cir.load %0 : !cir.ptr<!s32i>, !s32i loc(#loc466)
            %11 = cir.const #cir.int<1> : !s32i loc(#loc465)
            %12 = cir.binop(add, %10, %11) nsw : !s32i loc(#loc466)
            cir.store %12, %9 : !s32i, !cir.ptr<!s32i> loc(#loc702)
            %13 = cir.load %9 : !cir.ptr<!s32i>, !s32i loc(#loc467)
            cir.call @printIntLine(%13) : (!s32i) -> () loc(#loc468)
          } else {
            %9 = cir.get_global @".str" : !cir.ptr<!cir.array<!s8i x 54>> loc(#loc469)
            %10 = cir.cast(array_to_ptrdecay, %9 : !cir.ptr<!cir.array<!s8i x 54>>), !cir.ptr<!s8i> loc(#loc469)
            cir.call @printLine(%10) : (!cir.ptr<!s8i>) -> () loc(#loc470)
          } loc(#loc701)
        } loc(#loc699)
      } else {
        cir.scope {
          %6 = cir.load %0 : !cir.ptr<!s32i>, !s32i loc(#loc473)
          %7 = cir.const #cir.int<2147483647> : !s32i loc(#loc474)
          %8 = cir.cmp(lt, %6, %7) : !s32i, !cir.bool loc(#loc704)
          cir.if %8 {
            %9 = cir.alloca !s32i, !cir.ptr<!s32i>, ["result", init] {alignment = 4 : i64} loc(#loc706)
            %10 = cir.load %0 : !cir.ptr<!s32i>, !s32i loc(#loc480)
            %11 = cir.const #cir.int<1> : !s32i loc(#loc479)
            %12 = cir.binop(add, %10, %11) nsw : !s32i loc(#loc480)
            cir.store %12, %9 : !s32i, !cir.ptr<!s32i> loc(#loc706)
            %13 = cir.load %9 : !cir.ptr<!s32i>, !s32i loc(#loc481)
            cir.call @printIntLine(%13) : (!s32i) -> () loc(#loc482)
          } else {
            %9 = cir.get_global @".str" : !cir.ptr<!cir.array<!s8i x 54>> loc(#loc483)
            %10 = cir.cast(array_to_ptrdecay, %9 : !cir.ptr<!cir.array<!s8i x 54>>), !cir.ptr<!s8i> loc(#loc483)
            cir.call @printLine(%10) : (!cir.ptr<!s8i>) -> () loc(#loc484)
          } loc(#loc705)
        } loc(#loc703)
      } loc(#loc698)
    } loc(#loc696)
    cir.return loc(#loc216)
  } loc(#loc604)
  cir.func no_proto internal private @goodG2B() extra(#fn_attr1) {
    %0 = cir.alloca !s32i, !cir.ptr<!s32i>, ["data"] {alignment = 4 : i64} loc(#loc708)
    %1 = cir.const #cir.int<0> : !s32i loc(#loc489)
    cir.store %1, %0 : !s32i, !cir.ptr<!s32i> loc(#loc709)
    cir.scope {
      %2 = cir.get_global @globalReturnsTrueOrFalse : !cir.ptr<!cir.func<!s32i (...)>> loc(#loc711)
      %3 = cir.cast(bitcast, %2 : !cir.ptr<!cir.func<!s32i (...)>>), !cir.ptr<!cir.func<!s32i ()>> loc(#loc711)
      %4 = cir.call %3() : (!cir.ptr<!cir.func<!s32i ()>>) -> !s32i loc(#loc493)
      %5 = cir.cast(int_to_bool, %4 : !s32i), !cir.bool loc(#loc493)
      cir.if %5 {
        %6 = cir.const #cir.int<2> : !s32i loc(#loc498)
        cir.store %6, %0 : !s32i, !cir.ptr<!s32i> loc(#loc713)
      } else {
        %6 = cir.const #cir.int<2> : !s32i loc(#loc500)
        cir.store %6, %0 : !s32i, !cir.ptr<!s32i> loc(#loc714)
      } loc(#loc712)
    } loc(#loc710)
    cir.scope {
      %2 = cir.get_global @globalReturnsTrueOrFalse : !cir.ptr<!cir.func<!s32i (...)>> loc(#loc716)
      %3 = cir.cast(bitcast, %2 : !cir.ptr<!cir.func<!s32i (...)>>), !cir.ptr<!cir.func<!s32i ()>> loc(#loc716)
      %4 = cir.call %3() : (!cir.ptr<!cir.func<!s32i ()>>) -> !s32i loc(#loc504)
      %5 = cir.cast(int_to_bool, %4 : !s32i), !cir.bool loc(#loc504)
      cir.if %5 {
        cir.scope {
          %6 = cir.alloca !s32i, !cir.ptr<!s32i>, ["result", init] {alignment = 4 : i64} loc(#loc719)
          %7 = cir.load %0 : !cir.ptr<!s32i>, !s32i loc(#loc513)
          %8 = cir.const #cir.int<1> : !s32i loc(#loc512)
          %9 = cir.binop(add, %7, %8) nsw : !s32i loc(#loc513)
          cir.store %9, %6 : !s32i, !cir.ptr<!s32i> loc(#loc719)
          %10 = cir.load %6 : !cir.ptr<!s32i>, !s32i loc(#loc514)
          cir.call @printIntLine(%10) : (!s32i) -> () loc(#loc515)
        } loc(#loc718)
      } else {
        cir.scope {
          %6 = cir.alloca !s32i, !cir.ptr<!s32i>, ["result", init] {alignment = 4 : i64} loc(#loc721)
          %7 = cir.load %0 : !cir.ptr<!s32i>, !s32i loc(#loc520)
          %8 = cir.const #cir.int<1> : !s32i loc(#loc519)
          %9 = cir.binop(add, %7, %8) nsw : !s32i loc(#loc520)
          cir.store %9, %6 : !s32i, !cir.ptr<!s32i> loc(#loc721)
          %10 = cir.load %6 : !cir.ptr<!s32i>, !s32i loc(#loc521)
          cir.call @printIntLine(%10) : (!s32i) -> () loc(#loc522)
        } loc(#loc720)
      } loc(#loc717)
    } loc(#loc715)
    cir.return loc(#loc486)
  } loc(#loc707)
} loc(#loc)
#loc = loc("/home/ladisgin/git_proj/juliet-c/testcases/CWE190_Integer_Overflow/s03/CWE190_Integer_Overflow__int_listen_socket_add_12.c":0:0)
#loc1 = loc("../../../testcasesupport/std_testcase_io.h":52:1)
#loc2 = loc("../../../testcasesupport/std_testcase_io.h":52:30)
#loc3 = loc("/usr/include/sys/socket.h":102:1)
#loc4 = loc("/usr/include/sys/socket.h":102:62)
#loc5 = loc("/usr/include/netinet/in.h":404:1)
#loc6 = loc("/usr/include/netinet/in.h":405:40)
#loc7 = loc("/usr/include/sys/socket.h":112:1)
#loc8 = loc("/usr/include/sys/socket.h":113:6)
#loc9 = loc("/usr/include/sys/socket.h":296:1)
#loc10 = loc("/usr/include/sys/socket.h":296:39)
#loc11 = loc("/usr/include/sys/socket.h":306:1)
#loc12 = loc("/usr/include/sys/socket.h":307:38)
#loc13 = loc("/usr/include/sys/socket.h":145:1)
#loc14 = loc("/usr/include/sys/socket.h":145:68)
#loc15 = loc("/usr/include/stdlib.h":105:1)
#loc16 = loc("/usr/include/stdlib.h":106:33)
#loc17 = loc("/usr/include/unistd.h":358:1)
#loc18 = loc("/usr/include/unistd.h":358:27)
#loc19 = loc("../../../testcasesupport/std_testcase_io.h":18:1)
#loc20 = loc("../../../testcasesupport/std_testcase_io.h":18:33)
#loc21 = loc("../../../testcasesupport/std_testcase_io.h":14:1)
#loc22 = loc("../../../testcasesupport/std_testcase_io.h":14:33)
#loc23 = loc("CWE190_Integer_Overflow__int_listen_socket_add_12.c":144:23)
#loc24 = loc("CWE190_Integer_Overflow__int_listen_socket_add_12.c":44:1)
#loc25 = loc("CWE190_Integer_Overflow__int_listen_socket_add_12.c":147:1)
#loc26 = loc("CWE190_Integer_Overflow__int_listen_socket_add_12.c":46:5)
#loc27 = loc("CWE190_Integer_Overflow__int_listen_socket_add_12.c":46:9)
#loc28 = loc("CWE190_Integer_Overflow__int_listen_socket_add_12.c":48:12)
#loc29 = loc("CWE190_Integer_Overflow__int_listen_socket_add_12.c":48:5)
#loc30 = loc("CWE190_Integer_Overflow__int_listen_socket_add_12.c":49:5)
#loc31 = loc("CWE190_Integer_Overflow__int_listen_socket_add_12.c":125:5)
#loc32 = loc("CWE190_Integer_Overflow__int_listen_socket_add_12.c":49:8)
#loc33 = loc("CWE190_Integer_Overflow__int_listen_socket_add_12.c":49:33)
#loc34 = loc("CWE190_Integer_Overflow__int_listen_socket_add_12.c":50:5)
#loc35 = loc("CWE190_Integer_Overflow__int_listen_socket_add_12.c":120:5)
#loc36 = loc("CWE190_Integer_Overflow__int_listen_socket_add_12.c":122:5)
#loc37 = loc("CWE190_Integer_Overflow__int_listen_socket_add_12.c":51:9)
#loc38 = loc("CWE190_Integer_Overflow__int_listen_socket_add_12.c":119:9)
#loc39 = loc("CWE190_Integer_Overflow__int_listen_socket_add_12.c":56:13)
#loc40 = loc("CWE190_Integer_Overflow__int_listen_socket_add_12.c":56:17)
#loc41 = loc("CWE190_Integer_Overflow__int_listen_socket_add_12.c":57:13)
#loc42 = loc("CWE190_Integer_Overflow__int_listen_socket_add_12.c":57:32)
#loc43 = loc("CWE190_Integer_Overflow__int_listen_socket_add_12.c":58:13)
#loc44 = loc("CWE190_Integer_Overflow__int_listen_socket_add_12.c":58:35)
#loc45 = loc("CWE190_Integer_Overflow__int_listen_socket_add_12.c":59:13)
#loc46 = loc("CWE190_Integer_Overflow__int_listen_socket_add_12.c":59:35)
#loc47 = loc("CWE190_Integer_Overflow__int_listen_socket_add_12.c":60:13)
#loc48 = loc("CWE190_Integer_Overflow__int_listen_socket_add_12.c":60:45)
#loc49 = loc("CWE190_Integer_Overflow__int_listen_socket_add_12.c":61:13)
#loc50 = loc("CWE190_Integer_Overflow__int_listen_socket_add_12.c":104:21)
#loc51 = loc("CWE190_Integer_Overflow__int_listen_socket_add_12.c":71:39)
#loc52 = loc("CWE190_Integer_Overflow__int_listen_socket_add_12.c":71:48)
#loc53 = loc("CWE190_Integer_Overflow__int_listen_socket_add_12.c":71:61)
#loc54 = loc("CWE190_Integer_Overflow__int_listen_socket_add_12.c":71:32)
#loc55 = loc("CWE190_Integer_Overflow__int_listen_socket_add_12.c":71:17)
#loc56 = loc("CWE190_Integer_Overflow__int_listen_socket_add_12.c":71:72)
#loc57 = loc("CWE190_Integer_Overflow__int_listen_socket_add_12.c":72:17)
#loc58 = loc("CWE190_Integer_Overflow__int_listen_socket_add_12.c":75:17)
#loc59 = loc("CWE190_Integer_Overflow__int_listen_socket_add_12.c":72:21)
#loc60 = loc("CWE190_Integer_Overflow__int_listen_socket_add_12.c":72:37)
#loc61 = loc("CWE190_Integer_Overflow__int_listen_socket_add_12.c":73:17)
#loc62 = loc("CWE190_Integer_Overflow__int_listen_socket_add_12.c":74:21)
#loc63 = loc("CWE190_Integer_Overflow__int_listen_socket_add_12.c":76:24)
#loc64 = loc("CWE190_Integer_Overflow__int_listen_socket_add_12.c":76:25)
#loc65 = loc("CWE190_Integer_Overflow__int_listen_socket_add_12.c":76:34)
#loc66 = loc("CWE190_Integer_Overflow__int_listen_socket_add_12.c":76:37)
#loc67 = loc("CWE190_Integer_Overflow__int_listen_socket_add_12.c":76:51)
#loc68 = loc("CWE190_Integer_Overflow__int_listen_socket_add_12.c":76:17)
#loc69 = loc("CWE190_Integer_Overflow__int_listen_socket_add_12.c":76:52)
#loc70 = loc("CWE190_Integer_Overflow__int_listen_socket_add_12.c":77:38)
#loc71 = loc("/usr/include/netinet/in.h":249:5)
#loc72 = loc("CWE190_Integer_Overflow__int_listen_socket_add_12.c":77:17)
#loc73 = loc("CWE190_Integer_Overflow__int_listen_socket_add_12.c":78:43)
#loc74 = loc("/usr/include/netinet/in.h":251:20)
#loc75 = loc("/usr/include/netinet/in.h":33:15)
#loc76 = loc("CWE190_Integer_Overflow__int_listen_socket_add_12.c":78:17)
#loc77 = loc("CWE190_Integer_Overflow__int_listen_socket_add_12.c":79:42)
#loc78 = loc("CWE190_Integer_Overflow__int_listen_socket_add_12.c":79:36)
#loc79 = loc("/usr/include/netinet/in.h":250:15)
#loc80 = loc("CWE190_Integer_Overflow__int_listen_socket_add_12.c":79:17)
#loc81 = loc("CWE190_Integer_Overflow__int_listen_socket_add_12.c":79:50)
#loc82 = loc("CWE190_Integer_Overflow__int_listen_socket_add_12.c":80:17)
#loc83 = loc("CWE190_Integer_Overflow__int_listen_socket_add_12.c":83:17)
#loc84 = loc("CWE190_Integer_Overflow__int_listen_socket_add_12.c":80:26)
#loc85 = loc("CWE190_Integer_Overflow__int_listen_socket_add_12.c":80:58)
#loc86 = loc("CWE190_Integer_Overflow__int_listen_socket_add_12.c":80:59)
#loc87 = loc("CWE190_Integer_Overflow__int_listen_socket_add_12.c":80:68)
#loc88 = loc("CWE190_Integer_Overflow__int_listen_socket_add_12.c":80:82)
#loc89 = loc("CWE190_Integer_Overflow__int_listen_socket_add_12.c":80:21)
#loc90 = loc("CWE190_Integer_Overflow__int_listen_socket_add_12.c":80:88)
#loc91 = loc("CWE190_Integer_Overflow__int_listen_socket_add_12.c":81:17)
#loc92 = loc("CWE190_Integer_Overflow__int_listen_socket_add_12.c":82:21)
#loc93 = loc("CWE190_Integer_Overflow__int_listen_socket_add_12.c":84:17)
#loc94 = loc("CWE190_Integer_Overflow__int_listen_socket_add_12.c":87:17)
#loc95 = loc("CWE190_Integer_Overflow__int_listen_socket_add_12.c":84:28)
#loc96 = loc("CWE190_Integer_Overflow__int_listen_socket_add_12.c":84:42)
#loc97 = loc("CWE190_Integer_Overflow__int_listen_socket_add_12.c":84:21)
#loc98 = loc("CWE190_Integer_Overflow__int_listen_socket_add_12.c":84:61)
#loc99 = loc("CWE190_Integer_Overflow__int_listen_socket_add_12.c":85:17)
#loc100 = loc("CWE190_Integer_Overflow__int_listen_socket_add_12.c":86:21)
#loc101 = loc("CWE190_Integer_Overflow__int_listen_socket_add_12.c":88:39)
#loc102 = loc("CWE190_Integer_Overflow__int_listen_socket_add_12.c":88:53)
#loc103 = loc("CWE190_Integer_Overflow__int_listen_socket_add_12.c":88:59)
#loc104 = loc("CWE190_Integer_Overflow__int_listen_socket_add_12.c":88:32)
#loc105 = loc("CWE190_Integer_Overflow__int_listen_socket_add_12.c":88:17)
#loc106 = loc("CWE190_Integer_Overflow__int_listen_socket_add_12.c":88:63)
#loc107 = loc("CWE190_Integer_Overflow__int_listen_socket_add_12.c":89:17)
#loc108 = loc("CWE190_Integer_Overflow__int_listen_socket_add_12.c":92:17)
#loc109 = loc("CWE190_Integer_Overflow__int_listen_socket_add_12.c":89:21)
#loc110 = loc("CWE190_Integer_Overflow__int_listen_socket_add_12.c":89:37)
#loc111 = loc("CWE190_Integer_Overflow__int_listen_socket_add_12.c":90:17)
#loc112 = loc("CWE190_Integer_Overflow__int_listen_socket_add_12.c":91:21)
#loc113 = loc("CWE190_Integer_Overflow__int_listen_socket_add_12.c":94:35)
#loc114 = loc("CWE190_Integer_Overflow__int_listen_socket_add_12.c":94:49)
#loc115 = loc("CWE190_Integer_Overflow__int_listen_socket_add_12.c":94:62)
#loc116 = loc("CWE190_Integer_Overflow__int_listen_socket_add_12.c":94:80)
#loc117 = loc("CWE190_Integer_Overflow__int_listen_socket_add_12.c":94:83)
#loc118 = loc("CWE190_Integer_Overflow__int_listen_socket_add_12.c":94:30)
#loc119 = loc("CWE190_Integer_Overflow__int_listen_socket_add_12.c":94:17)
#loc120 = loc("CWE190_Integer_Overflow__int_listen_socket_add_12.c":94:84)
#loc121 = loc("CWE190_Integer_Overflow__int_listen_socket_add_12.c":95:17)
#loc122 = loc("CWE190_Integer_Overflow__int_listen_socket_add_12.c":98:17)
#loc123 = loc("CWE190_Integer_Overflow__int_listen_socket_add_12.c":95:21)
#loc124 = loc("CWE190_Integer_Overflow__int_listen_socket_add_12.c":95:35)
#loc125 = loc("CWE190_Integer_Overflow__int_listen_socket_add_12.c":95:48)
#loc126 = loc("CWE190_Integer_Overflow__int_listen_socket_add_12.c":95:51)
#loc127 = loc("CWE190_Integer_Overflow__int_listen_socket_add_12.c":95:65)
#loc128 = loc("CWE190_Integer_Overflow__int_listen_socket_add_12.c":96:17)
#loc129 = loc("CWE190_Integer_Overflow__int_listen_socket_add_12.c":97:21)
#loc130 = loc("CWE190_Integer_Overflow__int_listen_socket_add_12.c":100:43)
#loc131 = loc("CWE190_Integer_Overflow__int_listen_socket_add_12.c":100:29)
#loc132 = loc("CWE190_Integer_Overflow__int_listen_socket_add_12.c":100:17)
#loc133 = loc("CWE190_Integer_Overflow__int_listen_socket_add_12.c":102:29)
#loc134 = loc("CWE190_Integer_Overflow__int_listen_socket_add_12.c":102:24)
#loc135 = loc("CWE190_Integer_Overflow__int_listen_socket_add_12.c":102:17)
#loc136 = loc("CWE190_Integer_Overflow__int_listen_socket_add_12.c":102:40)
#loc137 = loc("CWE190_Integer_Overflow__int_listen_socket_add_12.c":104:20)
#loc138 = loc("CWE190_Integer_Overflow__int_listen_socket_add_12.c":105:13)
#loc139 = loc("CWE190_Integer_Overflow__int_listen_socket_add_12.c":108:13)
#loc140 = loc("CWE190_Integer_Overflow__int_listen_socket_add_12.c":105:17)
#loc141 = loc("CWE190_Integer_Overflow__int_listen_socket_add_12.c":105:33)
#loc142 = loc("CWE190_Integer_Overflow__int_listen_socket_add_12.c":106:13)
#loc143 = loc("CWE190_Integer_Overflow__int_listen_socket_add_12.c":107:30)
#loc144 = loc("CWE190_Integer_Overflow__int_listen_socket_add_12.c":107:17)
#loc145 = loc("CWE190_Integer_Overflow__int_listen_socket_add_12.c":109:13)
#loc146 = loc("CWE190_Integer_Overflow__int_listen_socket_add_12.c":112:13)
#loc147 = loc("CWE190_Integer_Overflow__int_listen_socket_add_12.c":109:17)
#loc148 = loc("CWE190_Integer_Overflow__int_listen_socket_add_12.c":109:33)
#loc149 = loc("CWE190_Integer_Overflow__int_listen_socket_add_12.c":110:13)
#loc150 = loc("CWE190_Integer_Overflow__int_listen_socket_add_12.c":111:30)
#loc151 = loc("CWE190_Integer_Overflow__int_listen_socket_add_12.c":111:17)
#loc152 = loc("CWE190_Integer_Overflow__int_listen_socket_add_12.c":124:16)
#loc153 = loc("CWE190_Integer_Overflow__int_listen_socket_add_12.c":124:9)
#loc154 = loc("CWE190_Integer_Overflow__int_listen_socket_add_12.c":126:5)
#loc155 = loc("CWE190_Integer_Overflow__int_listen_socket_add_12.c":146:5)
#loc156 = loc("CWE190_Integer_Overflow__int_listen_socket_add_12.c":126:8)
#loc157 = loc("CWE190_Integer_Overflow__int_listen_socket_add_12.c":126:33)
#loc158 = loc("CWE190_Integer_Overflow__int_listen_socket_add_12.c":127:5)
#loc159 = loc("CWE190_Integer_Overflow__int_listen_socket_add_12.c":133:5)
#loc160 = loc("CWE190_Integer_Overflow__int_listen_socket_add_12.c":135:5)
#loc161 = loc("CWE190_Integer_Overflow__int_listen_socket_add_12.c":128:9)
#loc162 = loc("CWE190_Integer_Overflow__int_listen_socket_add_12.c":132:9)
#loc163 = loc("CWE190_Integer_Overflow__int_listen_socket_add_12.c":130:13)
#loc164 = loc("CWE190_Integer_Overflow__int_listen_socket_add_12.c":130:33)
#loc165 = loc("CWE190_Integer_Overflow__int_listen_socket_add_12.c":130:26)
#loc166 = loc("CWE190_Integer_Overflow__int_listen_socket_add_12.c":131:26)
#loc167 = loc("CWE190_Integer_Overflow__int_listen_socket_add_12.c":131:13)
#loc168 = loc("CWE190_Integer_Overflow__int_listen_socket_add_12.c":137:9)
#loc169 = loc("CWE190_Integer_Overflow__int_listen_socket_add_12.c":145:9)
#loc170 = loc("CWE190_Integer_Overflow__int_listen_socket_add_12.c":137:13)
#loc171 = loc("CWE190_Integer_Overflow__int_listen_socket_add_12.c":137:20)
#loc172 = loc("CWE190_Integer_Overflow__int_listen_socket_add_12.c":138:9)
#loc173 = loc("CWE190_Integer_Overflow__int_listen_socket_add_12.c":141:9)
#loc174 = loc("CWE190_Integer_Overflow__int_listen_socket_add_12.c":143:9)
#loc175 = loc("CWE190_Integer_Overflow__int_listen_socket_add_12.c":139:13)
#loc176 = loc("CWE190_Integer_Overflow__int_listen_socket_add_12.c":139:33)
#loc177 = loc("CWE190_Integer_Overflow__int_listen_socket_add_12.c":139:26)
#loc178 = loc("CWE190_Integer_Overflow__int_listen_socket_add_12.c":140:26)
#loc179 = loc("CWE190_Integer_Overflow__int_listen_socket_add_12.c":140:13)
#loc180 = loc("CWE190_Integer_Overflow__int_listen_socket_add_12.c":144:13)
#loc181 = loc("CWE190_Integer_Overflow__int_listen_socket_add_12.c":369:1)
#loc182 = loc("CWE190_Integer_Overflow__int_listen_socket_add_12.c":373:1)
#loc183 = loc("CWE190_Integer_Overflow__int_listen_socket_add_12.c":371:5)
#loc184 = loc("CWE190_Integer_Overflow__int_listen_socket_add_12.c":371:13)
#loc185 = loc("CWE190_Integer_Overflow__int_listen_socket_add_12.c":372:5)
#loc186 = loc("CWE190_Integer_Overflow__int_listen_socket_add_12.c":372:13)
#loc187 = loc("/usr/include/stdlib.h":575:1)
#loc188 = loc("/usr/include/stdlib.h":575:41)
#loc189 = loc("/usr/include/time.h":76:1)
#loc190 = loc("/usr/include/time.h":76:38)
#loc191 = loc("CWE190_Integer_Overflow__int_listen_socket_add_12.c":389:15)
#loc192 = loc("CWE190_Integer_Overflow__int_listen_socket_add_12.c":391:15)
#loc193 = loc("CWE190_Integer_Overflow__int_listen_socket_add_12.c":394:15)
#loc194 = loc("CWE190_Integer_Overflow__int_listen_socket_add_12.c":396:15)
#loc195 = loc("CWE190_Integer_Overflow__int_listen_socket_add_12.c":384:1)
#loc196 = loc("CWE190_Integer_Overflow__int_listen_socket_add_12.c":399:1)
#loc201 = loc("CWE190_Integer_Overflow__int_listen_socket_add_12.c":385:1)
#loc202 = loc("CWE190_Integer_Overflow__int_listen_socket_add_12.c":387:27)
#loc203 = loc("CWE190_Integer_Overflow__int_listen_socket_add_12.c":387:22)
#loc204 = loc("CWE190_Integer_Overflow__int_listen_socket_add_12.c":387:5)
#loc205 = loc("CWE190_Integer_Overflow__int_listen_socket_add_12.c":389:5)
#loc206 = loc("CWE190_Integer_Overflow__int_listen_socket_add_12.c":390:5)
#loc207 = loc("CWE190_Integer_Overflow__int_listen_socket_add_12.c":390:60)
#loc208 = loc("CWE190_Integer_Overflow__int_listen_socket_add_12.c":391:5)
#loc209 = loc("CWE190_Integer_Overflow__int_listen_socket_add_12.c":394:5)
#loc210 = loc("CWE190_Integer_Overflow__int_listen_socket_add_12.c":395:5)
#loc211 = loc("CWE190_Integer_Overflow__int_listen_socket_add_12.c":395:59)
#loc212 = loc("CWE190_Integer_Overflow__int_listen_socket_add_12.c":396:5)
#loc213 = loc("CWE190_Integer_Overflow__int_listen_socket_add_12.c":398:12)
#loc214 = loc("CWE190_Integer_Overflow__int_listen_socket_add_12.c":398:5)
#loc215 = loc("CWE190_Integer_Overflow__int_listen_socket_add_12.c":156:1)
#loc216 = loc("CWE190_Integer_Overflow__int_listen_socket_add_12.c":331:1)
#loc217 = loc("CWE190_Integer_Overflow__int_listen_socket_add_12.c":158:5)
#loc218 = loc("CWE190_Integer_Overflow__int_listen_socket_add_12.c":158:9)
#loc219 = loc("CWE190_Integer_Overflow__int_listen_socket_add_12.c":160:12)
#loc220 = loc("CWE190_Integer_Overflow__int_listen_socket_add_12.c":160:5)
#loc221 = loc("CWE190_Integer_Overflow__int_listen_socket_add_12.c":161:5)
#loc222 = loc("CWE190_Integer_Overflow__int_listen_socket_add_12.c":304:5)
#loc223 = loc("CWE190_Integer_Overflow__int_listen_socket_add_12.c":161:8)
#loc224 = loc("CWE190_Integer_Overflow__int_listen_socket_add_12.c":161:33)
#loc225 = loc("CWE190_Integer_Overflow__int_listen_socket_add_12.c":162:5)
#loc226 = loc("CWE190_Integer_Overflow__int_listen_socket_add_12.c":232:5)
#loc227 = loc("CWE190_Integer_Overflow__int_listen_socket_add_12.c":234:5)
#loc228 = loc("CWE190_Integer_Overflow__int_listen_socket_add_12.c":163:9)
#loc229 = loc("CWE190_Integer_Overflow__int_listen_socket_add_12.c":231:9)
#loc230 = loc("CWE190_Integer_Overflow__int_listen_socket_add_12.c":168:13)
#loc231 = loc("CWE190_Integer_Overflow__int_listen_socket_add_12.c":168:17)
#loc232 = loc("CWE190_Integer_Overflow__int_listen_socket_add_12.c":169:13)
#loc233 = loc("CWE190_Integer_Overflow__int_listen_socket_add_12.c":169:32)
#loc234 = loc("CWE190_Integer_Overflow__int_listen_socket_add_12.c":170:13)
#loc235 = loc("CWE190_Integer_Overflow__int_listen_socket_add_12.c":170:35)
#loc236 = loc("CWE190_Integer_Overflow__int_listen_socket_add_12.c":171:13)
#loc237 = loc("CWE190_Integer_Overflow__int_listen_socket_add_12.c":171:35)
#loc238 = loc("CWE190_Integer_Overflow__int_listen_socket_add_12.c":172:13)
#loc239 = loc("CWE190_Integer_Overflow__int_listen_socket_add_12.c":172:45)
#loc240 = loc("CWE190_Integer_Overflow__int_listen_socket_add_12.c":173:13)
#loc241 = loc("CWE190_Integer_Overflow__int_listen_socket_add_12.c":216:21)
#loc242 = loc("CWE190_Integer_Overflow__int_listen_socket_add_12.c":183:39)
#loc243 = loc("CWE190_Integer_Overflow__int_listen_socket_add_12.c":183:48)
#loc244 = loc("CWE190_Integer_Overflow__int_listen_socket_add_12.c":183:61)
#loc245 = loc("CWE190_Integer_Overflow__int_listen_socket_add_12.c":183:32)
#loc246 = loc("CWE190_Integer_Overflow__int_listen_socket_add_12.c":183:17)
#loc247 = loc("CWE190_Integer_Overflow__int_listen_socket_add_12.c":183:72)
#loc248 = loc("CWE190_Integer_Overflow__int_listen_socket_add_12.c":184:17)
#loc249 = loc("CWE190_Integer_Overflow__int_listen_socket_add_12.c":187:17)
#loc250 = loc("CWE190_Integer_Overflow__int_listen_socket_add_12.c":184:21)
#loc251 = loc("CWE190_Integer_Overflow__int_listen_socket_add_12.c":184:37)
#loc252 = loc("CWE190_Integer_Overflow__int_listen_socket_add_12.c":185:17)
#loc253 = loc("CWE190_Integer_Overflow__int_listen_socket_add_12.c":186:21)
#loc254 = loc("CWE190_Integer_Overflow__int_listen_socket_add_12.c":188:24)
#loc255 = loc("CWE190_Integer_Overflow__int_listen_socket_add_12.c":188:25)
#loc256 = loc("CWE190_Integer_Overflow__int_listen_socket_add_12.c":188:34)
#loc257 = loc("CWE190_Integer_Overflow__int_listen_socket_add_12.c":188:37)
#loc258 = loc("CWE190_Integer_Overflow__int_listen_socket_add_12.c":188:51)
#loc259 = loc("CWE190_Integer_Overflow__int_listen_socket_add_12.c":188:17)
#loc260 = loc("CWE190_Integer_Overflow__int_listen_socket_add_12.c":188:52)
#loc261 = loc("CWE190_Integer_Overflow__int_listen_socket_add_12.c":189:38)
#loc262 = loc("CWE190_Integer_Overflow__int_listen_socket_add_12.c":189:17)
#loc263 = loc("CWE190_Integer_Overflow__int_listen_socket_add_12.c":190:43)
#loc264 = loc("CWE190_Integer_Overflow__int_listen_socket_add_12.c":190:17)
#loc265 = loc("CWE190_Integer_Overflow__int_listen_socket_add_12.c":191:42)
#loc266 = loc("CWE190_Integer_Overflow__int_listen_socket_add_12.c":191:36)
#loc267 = loc("CWE190_Integer_Overflow__int_listen_socket_add_12.c":191:17)
#loc268 = loc("CWE190_Integer_Overflow__int_listen_socket_add_12.c":191:50)
#loc269 = loc("CWE190_Integer_Overflow__int_listen_socket_add_12.c":192:17)
#loc270 = loc("CWE190_Integer_Overflow__int_listen_socket_add_12.c":195:17)
#loc271 = loc("CWE190_Integer_Overflow__int_listen_socket_add_12.c":192:26)
#loc272 = loc("CWE190_Integer_Overflow__int_listen_socket_add_12.c":192:58)
#loc273 = loc("CWE190_Integer_Overflow__int_listen_socket_add_12.c":192:59)
#loc274 = loc("CWE190_Integer_Overflow__int_listen_socket_add_12.c":192:68)
#loc275 = loc("CWE190_Integer_Overflow__int_listen_socket_add_12.c":192:82)
#loc276 = loc("CWE190_Integer_Overflow__int_listen_socket_add_12.c":192:21)
#loc277 = loc("CWE190_Integer_Overflow__int_listen_socket_add_12.c":192:88)
#loc278 = loc("CWE190_Integer_Overflow__int_listen_socket_add_12.c":193:17)
#loc279 = loc("CWE190_Integer_Overflow__int_listen_socket_add_12.c":194:21)
#loc280 = loc("CWE190_Integer_Overflow__int_listen_socket_add_12.c":196:17)
#loc281 = loc("CWE190_Integer_Overflow__int_listen_socket_add_12.c":199:17)
#loc282 = loc("CWE190_Integer_Overflow__int_listen_socket_add_12.c":196:28)
#loc283 = loc("CWE190_Integer_Overflow__int_listen_socket_add_12.c":196:42)
#loc284 = loc("CWE190_Integer_Overflow__int_listen_socket_add_12.c":196:21)
#loc285 = loc("CWE190_Integer_Overflow__int_listen_socket_add_12.c":196:61)
#loc286 = loc("CWE190_Integer_Overflow__int_listen_socket_add_12.c":197:17)
#loc287 = loc("CWE190_Integer_Overflow__int_listen_socket_add_12.c":198:21)
#loc288 = loc("CWE190_Integer_Overflow__int_listen_socket_add_12.c":200:39)
#loc289 = loc("CWE190_Integer_Overflow__int_listen_socket_add_12.c":200:53)
#loc290 = loc("CWE190_Integer_Overflow__int_listen_socket_add_12.c":200:59)
#loc291 = loc("CWE190_Integer_Overflow__int_listen_socket_add_12.c":200:32)
#loc292 = loc("CWE190_Integer_Overflow__int_listen_socket_add_12.c":200:17)
#loc293 = loc("CWE190_Integer_Overflow__int_listen_socket_add_12.c":200:63)
#loc294 = loc("CWE190_Integer_Overflow__int_listen_socket_add_12.c":201:17)
#loc295 = loc("CWE190_Integer_Overflow__int_listen_socket_add_12.c":204:17)
#loc296 = loc("CWE190_Integer_Overflow__int_listen_socket_add_12.c":201:21)
#loc297 = loc("CWE190_Integer_Overflow__int_listen_socket_add_12.c":201:37)
#loc298 = loc("CWE190_Integer_Overflow__int_listen_socket_add_12.c":202:17)
#loc299 = loc("CWE190_Integer_Overflow__int_listen_socket_add_12.c":203:21)
#loc300 = loc("CWE190_Integer_Overflow__int_listen_socket_add_12.c":206:35)
#loc301 = loc("CWE190_Integer_Overflow__int_listen_socket_add_12.c":206:49)
#loc302 = loc("CWE190_Integer_Overflow__int_listen_socket_add_12.c":206:62)
#loc303 = loc("CWE190_Integer_Overflow__int_listen_socket_add_12.c":206:80)
#loc304 = loc("CWE190_Integer_Overflow__int_listen_socket_add_12.c":206:83)
#loc305 = loc("CWE190_Integer_Overflow__int_listen_socket_add_12.c":206:30)
#loc306 = loc("CWE190_Integer_Overflow__int_listen_socket_add_12.c":206:17)
#loc307 = loc("CWE190_Integer_Overflow__int_listen_socket_add_12.c":206:84)
#loc308 = loc("CWE190_Integer_Overflow__int_listen_socket_add_12.c":207:17)
#loc309 = loc("CWE190_Integer_Overflow__int_listen_socket_add_12.c":210:17)
#loc310 = loc("CWE190_Integer_Overflow__int_listen_socket_add_12.c":207:21)
#loc311 = loc("CWE190_Integer_Overflow__int_listen_socket_add_12.c":207:35)
#loc312 = loc("CWE190_Integer_Overflow__int_listen_socket_add_12.c":207:48)
#loc313 = loc("CWE190_Integer_Overflow__int_listen_socket_add_12.c":207:51)
#loc314 = loc("CWE190_Integer_Overflow__int_listen_socket_add_12.c":207:65)
#loc315 = loc("CWE190_Integer_Overflow__int_listen_socket_add_12.c":208:17)
#loc316 = loc("CWE190_Integer_Overflow__int_listen_socket_add_12.c":209:21)
#loc317 = loc("CWE190_Integer_Overflow__int_listen_socket_add_12.c":212:43)
#loc318 = loc("CWE190_Integer_Overflow__int_listen_socket_add_12.c":212:29)
#loc319 = loc("CWE190_Integer_Overflow__int_listen_socket_add_12.c":212:17)
#loc320 = loc("CWE190_Integer_Overflow__int_listen_socket_add_12.c":214:29)
#loc321 = loc("CWE190_Integer_Overflow__int_listen_socket_add_12.c":214:24)
#loc322 = loc("CWE190_Integer_Overflow__int_listen_socket_add_12.c":214:17)
#loc323 = loc("CWE190_Integer_Overflow__int_listen_socket_add_12.c":214:40)
#loc324 = loc("CWE190_Integer_Overflow__int_listen_socket_add_12.c":216:20)
#loc325 = loc("CWE190_Integer_Overflow__int_listen_socket_add_12.c":217:13)
#loc326 = loc("CWE190_Integer_Overflow__int_listen_socket_add_12.c":220:13)
#loc327 = loc("CWE190_Integer_Overflow__int_listen_socket_add_12.c":217:17)
#loc328 = loc("CWE190_Integer_Overflow__int_listen_socket_add_12.c":217:33)
#loc329 = loc("CWE190_Integer_Overflow__int_listen_socket_add_12.c":218:13)
#loc330 = loc("CWE190_Integer_Overflow__int_listen_socket_add_12.c":219:30)
#loc331 = loc("CWE190_Integer_Overflow__int_listen_socket_add_12.c":219:17)
#loc332 = loc("CWE190_Integer_Overflow__int_listen_socket_add_12.c":221:13)
#loc333 = loc("CWE190_Integer_Overflow__int_listen_socket_add_12.c":224:13)
#loc334 = loc("CWE190_Integer_Overflow__int_listen_socket_add_12.c":221:17)
#loc335 = loc("CWE190_Integer_Overflow__int_listen_socket_add_12.c":221:33)
#loc336 = loc("CWE190_Integer_Overflow__int_listen_socket_add_12.c":222:13)
#loc337 = loc("CWE190_Integer_Overflow__int_listen_socket_add_12.c":223:30)
#loc338 = loc("CWE190_Integer_Overflow__int_listen_socket_add_12.c":223:17)
#loc339 = loc("CWE190_Integer_Overflow__int_listen_socket_add_12.c":235:9)
#loc340 = loc("CWE190_Integer_Overflow__int_listen_socket_add_12.c":303:9)
#loc341 = loc("CWE190_Integer_Overflow__int_listen_socket_add_12.c":240:13)
#loc342 = loc("CWE190_Integer_Overflow__int_listen_socket_add_12.c":240:17)
#loc343 = loc("CWE190_Integer_Overflow__int_listen_socket_add_12.c":241:13)
#loc344 = loc("CWE190_Integer_Overflow__int_listen_socket_add_12.c":241:32)
#loc345 = loc("CWE190_Integer_Overflow__int_listen_socket_add_12.c":242:13)
#loc346 = loc("CWE190_Integer_Overflow__int_listen_socket_add_12.c":242:35)
#loc347 = loc("CWE190_Integer_Overflow__int_listen_socket_add_12.c":243:13)
#loc348 = loc("CWE190_Integer_Overflow__int_listen_socket_add_12.c":243:35)
#loc349 = loc("CWE190_Integer_Overflow__int_listen_socket_add_12.c":244:13)
#loc350 = loc("CWE190_Integer_Overflow__int_listen_socket_add_12.c":244:45)
#loc351 = loc("CWE190_Integer_Overflow__int_listen_socket_add_12.c":245:13)
#loc352 = loc("CWE190_Integer_Overflow__int_listen_socket_add_12.c":288:21)
#loc353 = loc("CWE190_Integer_Overflow__int_listen_socket_add_12.c":255:39)
#loc354 = loc("CWE190_Integer_Overflow__int_listen_socket_add_12.c":255:48)
#loc355 = loc("CWE190_Integer_Overflow__int_listen_socket_add_12.c":255:61)
#loc356 = loc("CWE190_Integer_Overflow__int_listen_socket_add_12.c":255:32)
#loc357 = loc("CWE190_Integer_Overflow__int_listen_socket_add_12.c":255:17)
#loc358 = loc("CWE190_Integer_Overflow__int_listen_socket_add_12.c":255:72)
#loc359 = loc("CWE190_Integer_Overflow__int_listen_socket_add_12.c":256:17)
#loc360 = loc("CWE190_Integer_Overflow__int_listen_socket_add_12.c":259:17)
#loc361 = loc("CWE190_Integer_Overflow__int_listen_socket_add_12.c":256:21)
#loc362 = loc("CWE190_Integer_Overflow__int_listen_socket_add_12.c":256:37)
#loc363 = loc("CWE190_Integer_Overflow__int_listen_socket_add_12.c":257:17)
#loc364 = loc("CWE190_Integer_Overflow__int_listen_socket_add_12.c":258:21)
#loc365 = loc("CWE190_Integer_Overflow__int_listen_socket_add_12.c":260:24)
#loc366 = loc("CWE190_Integer_Overflow__int_listen_socket_add_12.c":260:25)
#loc367 = loc("CWE190_Integer_Overflow__int_listen_socket_add_12.c":260:34)
#loc368 = loc("CWE190_Integer_Overflow__int_listen_socket_add_12.c":260:37)
#loc369 = loc("CWE190_Integer_Overflow__int_listen_socket_add_12.c":260:51)
#loc370 = loc("CWE190_Integer_Overflow__int_listen_socket_add_12.c":260:17)
#loc371 = loc("CWE190_Integer_Overflow__int_listen_socket_add_12.c":260:52)
#loc372 = loc("CWE190_Integer_Overflow__int_listen_socket_add_12.c":261:38)
#loc373 = loc("CWE190_Integer_Overflow__int_listen_socket_add_12.c":261:17)
#loc374 = loc("CWE190_Integer_Overflow__int_listen_socket_add_12.c":262:43)
#loc375 = loc("CWE190_Integer_Overflow__int_listen_socket_add_12.c":262:17)
#loc376 = loc("CWE190_Integer_Overflow__int_listen_socket_add_12.c":263:42)
#loc377 = loc("CWE190_Integer_Overflow__int_listen_socket_add_12.c":263:36)
#loc378 = loc("CWE190_Integer_Overflow__int_listen_socket_add_12.c":263:17)
#loc379 = loc("CWE190_Integer_Overflow__int_listen_socket_add_12.c":263:50)
#loc380 = loc("CWE190_Integer_Overflow__int_listen_socket_add_12.c":264:17)
#loc381 = loc("CWE190_Integer_Overflow__int_listen_socket_add_12.c":267:17)
#loc382 = loc("CWE190_Integer_Overflow__int_listen_socket_add_12.c":264:26)
#loc383 = loc("CWE190_Integer_Overflow__int_listen_socket_add_12.c":264:58)
#loc384 = loc("CWE190_Integer_Overflow__int_listen_socket_add_12.c":264:59)
#loc385 = loc("CWE190_Integer_Overflow__int_listen_socket_add_12.c":264:68)
#loc386 = loc("CWE190_Integer_Overflow__int_listen_socket_add_12.c":264:82)
#loc387 = loc("CWE190_Integer_Overflow__int_listen_socket_add_12.c":264:21)
#loc388 = loc("CWE190_Integer_Overflow__int_listen_socket_add_12.c":264:88)
#loc389 = loc("CWE190_Integer_Overflow__int_listen_socket_add_12.c":265:17)
#loc390 = loc("CWE190_Integer_Overflow__int_listen_socket_add_12.c":266:21)
#loc391 = loc("CWE190_Integer_Overflow__int_listen_socket_add_12.c":268:17)
#loc392 = loc("CWE190_Integer_Overflow__int_listen_socket_add_12.c":271:17)
#loc393 = loc("CWE190_Integer_Overflow__int_listen_socket_add_12.c":268:28)
#loc394 = loc("CWE190_Integer_Overflow__int_listen_socket_add_12.c":268:42)
#loc395 = loc("CWE190_Integer_Overflow__int_listen_socket_add_12.c":268:21)
#loc396 = loc("CWE190_Integer_Overflow__int_listen_socket_add_12.c":268:61)
#loc397 = loc("CWE190_Integer_Overflow__int_listen_socket_add_12.c":269:17)
#loc398 = loc("CWE190_Integer_Overflow__int_listen_socket_add_12.c":270:21)
#loc399 = loc("CWE190_Integer_Overflow__int_listen_socket_add_12.c":272:39)
#loc400 = loc("CWE190_Integer_Overflow__int_listen_socket_add_12.c":272:53)
#loc401 = loc("CWE190_Integer_Overflow__int_listen_socket_add_12.c":272:59)
#loc402 = loc("CWE190_Integer_Overflow__int_listen_socket_add_12.c":272:32)
#loc403 = loc("CWE190_Integer_Overflow__int_listen_socket_add_12.c":272:17)
#loc404 = loc("CWE190_Integer_Overflow__int_listen_socket_add_12.c":272:63)
#loc405 = loc("CWE190_Integer_Overflow__int_listen_socket_add_12.c":273:17)
#loc406 = loc("CWE190_Integer_Overflow__int_listen_socket_add_12.c":276:17)
#loc407 = loc("CWE190_Integer_Overflow__int_listen_socket_add_12.c":273:21)
#loc408 = loc("CWE190_Integer_Overflow__int_listen_socket_add_12.c":273:37)
#loc409 = loc("CWE190_Integer_Overflow__int_listen_socket_add_12.c":274:17)
#loc410 = loc("CWE190_Integer_Overflow__int_listen_socket_add_12.c":275:21)
#loc411 = loc("CWE190_Integer_Overflow__int_listen_socket_add_12.c":278:35)
#loc412 = loc("CWE190_Integer_Overflow__int_listen_socket_add_12.c":278:49)
#loc413 = loc("CWE190_Integer_Overflow__int_listen_socket_add_12.c":278:62)
#loc414 = loc("CWE190_Integer_Overflow__int_listen_socket_add_12.c":278:80)
#loc415 = loc("CWE190_Integer_Overflow__int_listen_socket_add_12.c":278:83)
#loc416 = loc("CWE190_Integer_Overflow__int_listen_socket_add_12.c":278:30)
#loc417 = loc("CWE190_Integer_Overflow__int_listen_socket_add_12.c":278:17)
#loc418 = loc("CWE190_Integer_Overflow__int_listen_socket_add_12.c":278:84)
#loc419 = loc("CWE190_Integer_Overflow__int_listen_socket_add_12.c":279:17)
#loc420 = loc("CWE190_Integer_Overflow__int_listen_socket_add_12.c":282:17)
#loc421 = loc("CWE190_Integer_Overflow__int_listen_socket_add_12.c":279:21)
#loc422 = loc("CWE190_Integer_Overflow__int_listen_socket_add_12.c":279:35)
#loc423 = loc("CWE190_Integer_Overflow__int_listen_socket_add_12.c":279:48)
#loc424 = loc("CWE190_Integer_Overflow__int_listen_socket_add_12.c":279:51)
#loc425 = loc("CWE190_Integer_Overflow__int_listen_socket_add_12.c":279:65)
#loc426 = loc("CWE190_Integer_Overflow__int_listen_socket_add_12.c":280:17)
#loc427 = loc("CWE190_Integer_Overflow__int_listen_socket_add_12.c":281:21)
#loc428 = loc("CWE190_Integer_Overflow__int_listen_socket_add_12.c":284:43)
#loc429 = loc("CWE190_Integer_Overflow__int_listen_socket_add_12.c":284:29)
#loc430 = loc("CWE190_Integer_Overflow__int_listen_socket_add_12.c":284:17)
#loc431 = loc("CWE190_Integer_Overflow__int_listen_socket_add_12.c":286:29)
#loc432 = loc("CWE190_Integer_Overflow__int_listen_socket_add_12.c":286:24)
#loc433 = loc("CWE190_Integer_Overflow__int_listen_socket_add_12.c":286:17)
#loc434 = loc("CWE190_Integer_Overflow__int_listen_socket_add_12.c":286:40)
#loc435 = loc("CWE190_Integer_Overflow__int_listen_socket_add_12.c":288:20)
#loc436 = loc("CWE190_Integer_Overflow__int_listen_socket_add_12.c":289:13)
#loc437 = loc("CWE190_Integer_Overflow__int_listen_socket_add_12.c":292:13)
#loc438 = loc("CWE190_Integer_Overflow__int_listen_socket_add_12.c":289:17)
#loc439 = loc("CWE190_Integer_Overflow__int_listen_socket_add_12.c":289:33)
#loc440 = loc("CWE190_Integer_Overflow__int_listen_socket_add_12.c":290:13)
#loc441 = loc("CWE190_Integer_Overflow__int_listen_socket_add_12.c":291:30)
#loc442 = loc("CWE190_Integer_Overflow__int_listen_socket_add_12.c":291:17)
#loc443 = loc("CWE190_Integer_Overflow__int_listen_socket_add_12.c":293:13)
#loc444 = loc("CWE190_Integer_Overflow__int_listen_socket_add_12.c":296:13)
#loc445 = loc("CWE190_Integer_Overflow__int_listen_socket_add_12.c":293:17)
#loc446 = loc("CWE190_Integer_Overflow__int_listen_socket_add_12.c":293:33)
#loc447 = loc("CWE190_Integer_Overflow__int_listen_socket_add_12.c":294:13)
#loc448 = loc("CWE190_Integer_Overflow__int_listen_socket_add_12.c":295:30)
#loc449 = loc("CWE190_Integer_Overflow__int_listen_socket_add_12.c":295:17)
#loc450 = loc("CWE190_Integer_Overflow__int_listen_socket_add_12.c":305:5)
#loc451 = loc("CWE190_Integer_Overflow__int_listen_socket_add_12.c":330:5)
#loc452 = loc("CWE190_Integer_Overflow__int_listen_socket_add_12.c":305:8)
#loc453 = loc("CWE190_Integer_Overflow__int_listen_socket_add_12.c":305:33)
#loc454 = loc("CWE190_Integer_Overflow__int_listen_socket_add_12.c":306:5)
#loc455 = loc("CWE190_Integer_Overflow__int_listen_socket_add_12.c":317:5)
#loc456 = loc("CWE190_Integer_Overflow__int_listen_socket_add_12.c":319:5)
#loc457 = loc("CWE190_Integer_Overflow__int_listen_socket_add_12.c":308:9)
#loc458 = loc("CWE190_Integer_Overflow__int_listen_socket_add_12.c":316:9)
#loc459 = loc("CWE190_Integer_Overflow__int_listen_socket_add_12.c":308:13)
#loc460 = loc("CWE190_Integer_Overflow__int_listen_socket_add_12.c":308:20)
#loc461 = loc("CWE190_Integer_Overflow__int_listen_socket_add_12.c":309:9)
#loc462 = loc("CWE190_Integer_Overflow__int_listen_socket_add_12.c":312:9)
#loc463 = loc("CWE190_Integer_Overflow__int_listen_socket_add_12.c":314:9)
#loc464 = loc("CWE190_Integer_Overflow__int_listen_socket_add_12.c":310:13)
#loc465 = loc("CWE190_Integer_Overflow__int_listen_socket_add_12.c":310:33)
#loc466 = loc("CWE190_Integer_Overflow__int_listen_socket_add_12.c":310:26)
#loc467 = loc("CWE190_Integer_Overflow__int_listen_socket_add_12.c":311:26)
#loc468 = loc("CWE190_Integer_Overflow__int_listen_socket_add_12.c":311:13)
#loc469 = loc("CWE190_Integer_Overflow__int_listen_socket_add_12.c":315:23)
#loc470 = loc("CWE190_Integer_Overflow__int_listen_socket_add_12.c":315:13)
#loc471 = loc("CWE190_Integer_Overflow__int_listen_socket_add_12.c":321:9)
#loc472 = loc("CWE190_Integer_Overflow__int_listen_socket_add_12.c":329:9)
#loc473 = loc("CWE190_Integer_Overflow__int_listen_socket_add_12.c":321:13)
#loc474 = loc("CWE190_Integer_Overflow__int_listen_socket_add_12.c":321:20)
#loc475 = loc("CWE190_Integer_Overflow__int_listen_socket_add_12.c":322:9)
#loc476 = loc("CWE190_Integer_Overflow__int_listen_socket_add_12.c":325:9)
#loc477 = loc("CWE190_Integer_Overflow__int_listen_socket_add_12.c":327:9)
#loc478 = loc("CWE190_Integer_Overflow__int_listen_socket_add_12.c":323:13)
#loc479 = loc("CWE190_Integer_Overflow__int_listen_socket_add_12.c":323:33)
#loc480 = loc("CWE190_Integer_Overflow__int_listen_socket_add_12.c":323:26)
#loc481 = loc("CWE190_Integer_Overflow__int_listen_socket_add_12.c":324:26)
#loc482 = loc("CWE190_Integer_Overflow__int_listen_socket_add_12.c":324:13)
#loc483 = loc("CWE190_Integer_Overflow__int_listen_socket_add_12.c":328:23)
#loc484 = loc("CWE190_Integer_Overflow__int_listen_socket_add_12.c":328:13)
#loc485 = loc("CWE190_Integer_Overflow__int_listen_socket_add_12.c":336:1)
#loc486 = loc("CWE190_Integer_Overflow__int_listen_socket_add_12.c":367:1)
#loc487 = loc("CWE190_Integer_Overflow__int_listen_socket_add_12.c":338:5)
#loc488 = loc("CWE190_Integer_Overflow__int_listen_socket_add_12.c":338:9)
#loc489 = loc("CWE190_Integer_Overflow__int_listen_socket_add_12.c":340:12)
#loc490 = loc("CWE190_Integer_Overflow__int_listen_socket_add_12.c":340:5)
#loc491 = loc("CWE190_Integer_Overflow__int_listen_socket_add_12.c":341:5)
#loc492 = loc("CWE190_Integer_Overflow__int_listen_socket_add_12.c":350:5)
#loc493 = loc("CWE190_Integer_Overflow__int_listen_socket_add_12.c":341:8)
#loc494 = loc("CWE190_Integer_Overflow__int_listen_socket_add_12.c":341:33)
#loc495 = loc("CWE190_Integer_Overflow__int_listen_socket_add_12.c":342:5)
#loc496 = loc("CWE190_Integer_Overflow__int_listen_socket_add_12.c":345:5)
#loc497 = loc("CWE190_Integer_Overflow__int_listen_socket_add_12.c":347:5)
#loc498 = loc("CWE190_Integer_Overflow__int_listen_socket_add_12.c":344:16)
#loc499 = loc("CWE190_Integer_Overflow__int_listen_socket_add_12.c":344:9)
#loc500 = loc("CWE190_Integer_Overflow__int_listen_socket_add_12.c":349:16)
#loc501 = loc("CWE190_Integer_Overflow__int_listen_socket_add_12.c":349:9)
#loc502 = loc("CWE190_Integer_Overflow__int_listen_socket_add_12.c":351:5)
#loc503 = loc("CWE190_Integer_Overflow__int_listen_socket_add_12.c":366:5)
#loc504 = loc("CWE190_Integer_Overflow__int_listen_socket_add_12.c":351:8)
#loc505 = loc("CWE190_Integer_Overflow__int_listen_socket_add_12.c":351:33)
#loc506 = loc("CWE190_Integer_Overflow__int_listen_socket_add_12.c":352:5)
#loc507 = loc("CWE190_Integer_Overflow__int_listen_socket_add_12.c":358:5)
#loc508 = loc("CWE190_Integer_Overflow__int_listen_socket_add_12.c":360:5)
#loc509 = loc("CWE190_Integer_Overflow__int_listen_socket_add_12.c":353:9)
#loc510 = loc("CWE190_Integer_Overflow__int_listen_socket_add_12.c":357:9)
#loc511 = loc("CWE190_Integer_Overflow__int_listen_socket_add_12.c":355:13)
#loc512 = loc("CWE190_Integer_Overflow__int_listen_socket_add_12.c":355:33)
#loc513 = loc("CWE190_Integer_Overflow__int_listen_socket_add_12.c":355:26)
#loc514 = loc("CWE190_Integer_Overflow__int_listen_socket_add_12.c":356:26)
#loc515 = loc("CWE190_Integer_Overflow__int_listen_socket_add_12.c":356:13)
#loc516 = loc("CWE190_Integer_Overflow__int_listen_socket_add_12.c":361:9)
#loc517 = loc("CWE190_Integer_Overflow__int_listen_socket_add_12.c":365:9)
#loc518 = loc("CWE190_Integer_Overflow__int_listen_socket_add_12.c":363:13)
#loc519 = loc("CWE190_Integer_Overflow__int_listen_socket_add_12.c":363:33)
#loc520 = loc("CWE190_Integer_Overflow__int_listen_socket_add_12.c":363:26)
#loc521 = loc("CWE190_Integer_Overflow__int_listen_socket_add_12.c":364:26)
#loc522 = loc("CWE190_Integer_Overflow__int_listen_socket_add_12.c":364:13)
#loc523 = loc(fused[#loc1, #loc2])
#loc524 = loc(fused[#loc3, #loc4])
#loc525 = loc(fused[#loc5, #loc6])
#loc526 = loc(fused[#loc7, #loc8])
#loc527 = loc(fused[#loc9, #loc10])
#loc528 = loc(fused[#loc11, #loc12])
#loc529 = loc(fused[#loc13, #loc14])
#loc530 = loc(fused[#loc15, #loc16])
#loc531 = loc(fused[#loc17, #loc18])
#loc532 = loc(fused[#loc19, #loc20])
#loc533 = loc(fused[#loc21, #loc22])
#loc534 = loc(fused[#loc24, #loc25])
#loc535 = loc(fused[#loc26, #loc27])
#loc536 = loc(fused[#loc29, #loc28])
#loc537 = loc(fused[#loc30, #loc31])
#loc538 = loc(fused[#loc32, #loc33])
#loc539 = loc(fused[#loc34, #loc35, #loc36, #loc31])
#loc540 = loc(fused[#loc37, #loc38])
#loc541 = loc(fused[#loc39, #loc40])
#loc542 = loc(fused[#loc41, #loc42])
#loc543 = loc(fused[#loc43, #loc44])
#loc544 = loc(fused[#loc45, #loc46])
#loc545 = loc(fused[#loc47, #loc48])
#loc546 = loc(fused[#loc49, #loc50])
#loc547 = loc(fused[#loc55, #loc56])
#loc548 = loc(fused[#loc57, #loc58])
#loc549 = loc(fused[#loc59, #loc60])
#loc550 = loc(fused[#loc61, #loc58])
#loc551 = loc(fused[#loc63, #loc64])
#loc552 = loc(fused[#loc66, #loc67])
#loc553 = loc(fused[#loc68, #loc69])
#loc554 = loc(fused[#loc72, #loc70])
#loc555 = loc(fused[#loc76, #loc73])
#loc556 = loc(fused[#loc80, #loc81])
#loc557 = loc(fused[#loc82, #loc83])
#loc558 = loc(fused[#loc85, #loc86])
#loc559 = loc(fused[#loc87, #loc88])
#loc560 = loc(fused[#loc89, #loc90])
#loc561 = loc(fused[#loc91, #loc83])
#loc562 = loc(fused[#loc93, #loc94])
#loc563 = loc(fused[#loc97, #loc98])
#loc564 = loc(fused[#loc99, #loc94])
#loc565 = loc(fused[#loc105, #loc106])
#loc566 = loc(fused[#loc107, #loc108])
#loc567 = loc(fused[#loc109, #loc110])
#loc568 = loc(fused[#loc111, #loc108])
#loc569 = loc(fused[#loc115, #loc116])
#loc570 = loc(fused[#loc119, #loc120])
#loc571 = loc(fused[#loc121, #loc122])
#loc572 = loc(fused[#loc123, #loc124])
#loc573 = loc(fused[#loc126, #loc127])
#loc574 = loc(fused[#loc128, #loc122])
#loc575 = loc(fused[#loc132, #loc130])
#loc576 = loc(fused[#loc135, #loc136])
#loc577 = loc(fused[#loc138, #loc139])
#loc578 = loc(fused[#loc140, #loc141])
#loc579 = loc(fused[#loc142, #loc139])
#loc580 = loc(fused[#loc145, #loc146])
#loc581 = loc(fused[#loc147, #loc148])
#loc582 = loc(fused[#loc149, #loc146])
#loc583 = loc(fused[#loc153, #loc152])
#loc584 = loc(fused[#loc154, #loc155])
#loc585 = loc(fused[#loc156, #loc157])
#loc586 = loc(fused[#loc158, #loc159, #loc160, #loc155])
#loc587 = loc(fused[#loc161, #loc162])
#loc588 = loc(fused[#loc163, #loc164])
#loc589 = loc(fused[#loc168, #loc169])
#loc590 = loc(fused[#loc170, #loc171])
#loc591 = loc(fused[#loc172, #loc173, #loc174, #loc169])
#loc592 = loc(fused[#loc175, #loc176])
#loc593 = loc(fused[#loc181, #loc182])
#loc594 = loc(fused[#loc183, #loc184])
#loc595 = loc(fused[#loc185, #loc186])
#loc596 = loc(fused[#loc187, #loc188])
#loc597 = loc(fused[#loc189, #loc190])
#loc598 = loc(fused[#loc195, #loc196])
#loc601 = loc(fused[#loc206, #loc207])
#loc602 = loc(fused[#loc210, #loc211])
#loc603 = loc(fused[#loc214, #loc213])
#loc604 = loc(fused[#loc215, #loc216])
#loc605 = loc(fused[#loc217, #loc218])
#loc606 = loc(fused[#loc220, #loc219])
#loc607 = loc(fused[#loc221, #loc222])
#loc608 = loc(fused[#loc223, #loc224])
#loc609 = loc(fused[#loc225, #loc226, #loc227, #loc222])
#loc610 = loc(fused[#loc228, #loc229])
#loc611 = loc(fused[#loc230, #loc231])
#loc612 = loc(fused[#loc232, #loc233])
#loc613 = loc(fused[#loc234, #loc235])
#loc614 = loc(fused[#loc236, #loc237])
#loc615 = loc(fused[#loc238, #loc239])
#loc616 = loc(fused[#loc240, #loc241])
#loc617 = loc(fused[#loc246, #loc247])
#loc618 = loc(fused[#loc248, #loc249])
#loc619 = loc(fused[#loc250, #loc251])
#loc620 = loc(fused[#loc252, #loc249])
#loc621 = loc(fused[#loc254, #loc255])
#loc622 = loc(fused[#loc257, #loc258])
#loc623 = loc(fused[#loc259, #loc260])
#loc624 = loc(fused[#loc262, #loc261])
#loc625 = loc(fused[#loc264, #loc263])
#loc626 = loc(fused[#loc267, #loc268])
#loc627 = loc(fused[#loc269, #loc270])
#loc628 = loc(fused[#loc272, #loc273])
#loc629 = loc(fused[#loc274, #loc275])
#loc630 = loc(fused[#loc276, #loc277])
#loc631 = loc(fused[#loc278, #loc270])
#loc632 = loc(fused[#loc280, #loc281])
#loc633 = loc(fused[#loc284, #loc285])
#loc634 = loc(fused[#loc286, #loc281])
#loc635 = loc(fused[#loc292, #loc293])
#loc636 = loc(fused[#loc294, #loc295])
#loc637 = loc(fused[#loc296, #loc297])
#loc638 = loc(fused[#loc298, #loc295])
#loc639 = loc(fused[#loc302, #loc303])
#loc640 = loc(fused[#loc306, #loc307])
#loc641 = loc(fused[#loc308, #loc309])
#loc642 = loc(fused[#loc310, #loc311])
#loc643 = loc(fused[#loc313, #loc314])
#loc644 = loc(fused[#loc315, #loc309])
#loc645 = loc(fused[#loc319, #loc317])
#loc646 = loc(fused[#loc322, #loc323])
#loc647 = loc(fused[#loc325, #loc326])
#loc648 = loc(fused[#loc327, #loc328])
#loc649 = loc(fused[#loc329, #loc326])
#loc650 = loc(fused[#loc332, #loc333])
#loc651 = loc(fused[#loc334, #loc335])
#loc652 = loc(fused[#loc336, #loc333])
#loc653 = loc(fused[#loc339, #loc340])
#loc654 = loc(fused[#loc341, #loc342])
#loc655 = loc(fused[#loc343, #loc344])
#loc656 = loc(fused[#loc345, #loc346])
#loc657 = loc(fused[#loc347, #loc348])
#loc658 = loc(fused[#loc349, #loc350])
#loc659 = loc(fused[#loc351, #loc352])
#loc660 = loc(fused[#loc357, #loc358])
#loc661 = loc(fused[#loc359, #loc360])
#loc662 = loc(fused[#loc361, #loc362])
#loc663 = loc(fused[#loc363, #loc360])
#loc664 = loc(fused[#loc365, #loc366])
#loc665 = loc(fused[#loc368, #loc369])
#loc666 = loc(fused[#loc370, #loc371])
#loc667 = loc(fused[#loc373, #loc372])
#loc668 = loc(fused[#loc375, #loc374])
#loc669 = loc(fused[#loc378, #loc379])
#loc670 = loc(fused[#loc380, #loc381])
#loc671 = loc(fused[#loc383, #loc384])
#loc672 = loc(fused[#loc385, #loc386])
#loc673 = loc(fused[#loc387, #loc388])
#loc674 = loc(fused[#loc389, #loc381])
#loc675 = loc(fused[#loc391, #loc392])
#loc676 = loc(fused[#loc395, #loc396])
#loc677 = loc(fused[#loc397, #loc392])
#loc678 = loc(fused[#loc403, #loc404])
#loc679 = loc(fused[#loc405, #loc406])
#loc680 = loc(fused[#loc407, #loc408])
#loc681 = loc(fused[#loc409, #loc406])
#loc682 = loc(fused[#loc413, #loc414])
#loc683 = loc(fused[#loc417, #loc418])
#loc684 = loc(fused[#loc419, #loc420])
#loc685 = loc(fused[#loc421, #loc422])
#loc686 = loc(fused[#loc424, #loc425])
#loc687 = loc(fused[#loc426, #loc420])
#loc688 = loc(fused[#loc430, #loc428])
#loc689 = loc(fused[#loc433, #loc434])
#loc690 = loc(fused[#loc436, #loc437])
#loc691 = loc(fused[#loc438, #loc439])
#loc692 = loc(fused[#loc440, #loc437])
#loc693 = loc(fused[#loc443, #loc444])
#loc694 = loc(fused[#loc445, #loc446])
#loc695 = loc(fused[#loc447, #loc444])
#loc696 = loc(fused[#loc450, #loc451])
#loc697 = loc(fused[#loc452, #loc453])
#loc698 = loc(fused[#loc454, #loc455, #loc456, #loc451])
#loc699 = loc(fused[#loc457, #loc458])
#loc700 = loc(fused[#loc459, #loc460])
#loc701 = loc(fused[#loc461, #loc462, #loc463, #loc458])
#loc702 = loc(fused[#loc464, #loc465])
#loc703 = loc(fused[#loc471, #loc472])
#loc704 = loc(fused[#loc473, #loc474])
#loc705 = loc(fused[#loc475, #loc476, #loc477, #loc472])
#loc706 = loc(fused[#loc478, #loc479])
#loc707 = loc(fused[#loc485, #loc486])
#loc708 = loc(fused[#loc487, #loc488])
#loc709 = loc(fused[#loc490, #loc489])
#loc710 = loc(fused[#loc491, #loc492])
#loc711 = loc(fused[#loc493, #loc494])
#loc712 = loc(fused[#loc495, #loc496, #loc497, #loc492])
#loc713 = loc(fused[#loc499, #loc498])
#loc714 = loc(fused[#loc501, #loc500])
#loc715 = loc(fused[#loc502, #loc503])
#loc716 = loc(fused[#loc504, #loc505])
#loc717 = loc(fused[#loc506, #loc507, #loc508, #loc503])
#loc718 = loc(fused[#loc509, #loc510])
#loc719 = loc(fused[#loc511, #loc512])
#loc720 = loc(fused[#loc516, #loc517])
#loc721 = loc(fused[#loc518, #loc519])
