!s32i = !cir.int<s, 32>
!s8i = !cir.int<s, 8>
!u64i = !cir.int<u, 64>
!void = !cir.void
#fn_attr = #cir<extra({nothrow = #cir.nothrow})>
#fn_attr1 = #cir<extra({inline = #cir.inline<no>, nothrow = #cir.nothrow, optnone = #cir.optnone})>
module @"/home/ladisgin/git_proj/juliet-c/testcases/CWE122_Heap_Based_Buffer_Overflow/s09/CWE122_Heap_Based_Buffer_Overflow__c_CWE806_char_memmove_68b.c" attributes {cir.lang = #cir.lang<c>, cir.sob = #cir.signed_overflow_behavior<undefined>, cir.triple = "x86_64-unknown-linux-gnu", dlti.dl_spec = #dlti.dl_spec<i64 = dense<64> : vector<2xi64>, !llvm.ptr<271> = dense<32> : vector<4xi64>, !llvm.ptr<272> = dense<64> : vector<4xi64>, f80 = dense<128> : vector<2xi64>, i128 = dense<128> : vector<2xi64>, i16 = dense<16> : vector<2xi64>, i8 = dense<8> : vector<2xi64>, i1 = dense<8> : vector<2xi64>, !llvm.ptr = dense<64> : vector<4xi64>, f64 = dense<64> : vector<2xi64>, f128 = dense<128> : vector<2xi64>, !llvm.ptr<270> = dense<32> : vector<4xi64>, f16 = dense<16> : vector<2xi64>, i32 = dense<32> : vector<2xi64>, "dlti.stack_alignment" = 128 : i64, "dlti.endianness" = "little">} {
  cir.global "private" external @CWE122_Heap_Based_Buffer_Overflow__c_CWE806_char_memmove_68_badData : !cir.ptr<!s8i> {alignment = 8 : i64} loc(#loc59)
  cir.func private @strlen(!cir.ptr<!s8i>) -> !u64i extra(#fn_attr) loc(#loc60)
  cir.func private @printLine(!cir.ptr<!s8i>) loc(#loc61)
  cir.func private @free(!cir.ptr<!void>) extra(#fn_attr) loc(#loc62)
  cir.func no_proto @CWE122_Heap_Based_Buffer_Overflow__c_CWE806_char_memmove_68b_badSink() extra(#fn_attr1) {
    %0 = cir.alloca !cir.array<!s8i x 50>, !cir.ptr<!cir.array<!s8i x 50>>, ["dest"] {alignment = 16 : i64} loc(#loc64)
    %1 = cir.alloca !cir.ptr<!s8i>, !cir.ptr<!cir.ptr<!s8i>>, ["data", init] {alignment = 8 : i64} loc(#loc65)
    %2 = cir.get_global @CWE122_Heap_Based_Buffer_Overflow__c_CWE806_char_memmove_68_badData : !cir.ptr<!cir.ptr<!s8i>> loc(#loc59)
    %3 = cir.load %2 : !cir.ptr<!cir.ptr<!s8i>>, !cir.ptr<!s8i> loc(#loc14)
    cir.store %3, %1 : !cir.ptr<!s8i>, !cir.ptr<!cir.ptr<!s8i>> loc(#loc65)
    cir.br ^bb1 loc(#loc66)
  ^bb1:  // pred: ^bb0
    %4 = cir.const #cir.zero : !cir.array<!s8i x 50> loc(#loc64)
    cir.store %4, %0 : !cir.array<!s8i x 50>, !cir.ptr<!cir.array<!s8i x 50>> loc(#loc64)
    %5 = cir.cast(array_to_ptrdecay, %0 : !cir.ptr<!cir.array<!s8i x 50>>), !cir.ptr<!s8i> loc(#loc17)
    %6 = cir.cast(bitcast, %5 : !cir.ptr<!s8i>), !cir.ptr<!void> loc(#loc17)
    %7 = cir.load %1 : !cir.ptr<!cir.ptr<!s8i>>, !cir.ptr<!s8i> loc(#loc18)
    %8 = cir.cast(bitcast, %7 : !cir.ptr<!s8i>), !cir.ptr<!void> loc(#loc18)
    %9 = cir.get_global @strlen : !cir.ptr<!cir.func<!u64i (!cir.ptr<!s8i>)>> loc(#loc19)
    %10 = cir.load %1 : !cir.ptr<!cir.ptr<!s8i>>, !cir.ptr<!s8i> loc(#loc20)
    %11 = cir.call @strlen(%10) : (!cir.ptr<!s8i>) -> !u64i extra(#fn_attr) loc(#loc19)
    %12 = cir.const #cir.int<1> : !u64i loc(#loc67)
    %13 = cir.binop(mul, %11, %12) : !u64i loc(#loc68)
    cir.libc.memmove %13 bytes from %8 to %6 : !cir.ptr<!void>, !u64i loc(#loc69)
    %14 = cir.const #cir.int<0> : !s32i loc(#loc25)
    %15 = cir.cast(integral, %14 : !s32i), !s8i loc(#loc25)
    %16 = cir.const #cir.int<50> : !s32i loc(#loc26)
    %17 = cir.const #cir.int<1> : !s32i loc(#loc27)
    %18 = cir.binop(sub, %16, %17) nsw : !s32i loc(#loc26)
    %19 = cir.cast(array_to_ptrdecay, %0 : !cir.ptr<!cir.array<!s8i x 50>>), !cir.ptr<!s8i> loc(#loc28)
    %20 = cir.ptr_stride(%19 : !cir.ptr<!s8i>, %18 : !s32i), !cir.ptr<!s8i> loc(#loc28)
    cir.store %15, %20 : !s8i, !cir.ptr<!s8i> loc(#loc70)
    %21 = cir.load %1 : !cir.ptr<!cir.ptr<!s8i>>, !cir.ptr<!s8i> loc(#loc29)
    cir.call @printLine(%21) : (!cir.ptr<!s8i>) -> () loc(#loc30)
    %22 = cir.get_global @free : !cir.ptr<!cir.func<!void (!cir.ptr<!void>)>> loc(#loc31)
    %23 = cir.load %1 : !cir.ptr<!cir.ptr<!s8i>>, !cir.ptr<!s8i> loc(#loc32)
    %24 = cir.cast(bitcast, %23 : !cir.ptr<!s8i>), !cir.ptr<!void> loc(#loc32)
    cir.call @free(%24) : (!cir.ptr<!void>) -> () extra(#fn_attr) loc(#loc31)
    cir.br ^bb2 loc(#loc16)
  ^bb2:  // pred: ^bb1
    cir.return loc(#loc10)
  } loc(#loc63)
  cir.global "private" external @CWE122_Heap_Based_Buffer_Overflow__c_CWE806_char_memmove_68_goodG2BData : !cir.ptr<!s8i> {alignment = 8 : i64} loc(#loc71)
  cir.func no_proto @CWE122_Heap_Based_Buffer_Overflow__c_CWE806_char_memmove_68b_goodG2BSink() extra(#fn_attr1) {
    %0 = cir.alloca !cir.array<!s8i x 50>, !cir.ptr<!cir.array<!s8i x 50>>, ["dest"] {alignment = 16 : i64} loc(#loc73)
    %1 = cir.alloca !cir.ptr<!s8i>, !cir.ptr<!cir.ptr<!s8i>>, ["data", init] {alignment = 8 : i64} loc(#loc74)
    %2 = cir.get_global @CWE122_Heap_Based_Buffer_Overflow__c_CWE806_char_memmove_68_goodG2BData : !cir.ptr<!cir.ptr<!s8i>> loc(#loc71)
    %3 = cir.load %2 : !cir.ptr<!cir.ptr<!s8i>>, !cir.ptr<!s8i> loc(#loc40)
    cir.store %3, %1 : !cir.ptr<!s8i>, !cir.ptr<!cir.ptr<!s8i>> loc(#loc74)
    cir.br ^bb1 loc(#loc75)
  ^bb1:  // pred: ^bb0
    %4 = cir.const #cir.zero : !cir.array<!s8i x 50> loc(#loc73)
    cir.store %4, %0 : !cir.array<!s8i x 50>, !cir.ptr<!cir.array<!s8i x 50>> loc(#loc73)
    %5 = cir.cast(array_to_ptrdecay, %0 : !cir.ptr<!cir.array<!s8i x 50>>), !cir.ptr<!s8i> loc(#loc43)
    %6 = cir.cast(bitcast, %5 : !cir.ptr<!s8i>), !cir.ptr<!void> loc(#loc43)
    %7 = cir.load %1 : !cir.ptr<!cir.ptr<!s8i>>, !cir.ptr<!s8i> loc(#loc44)
    %8 = cir.cast(bitcast, %7 : !cir.ptr<!s8i>), !cir.ptr<!void> loc(#loc44)
    %9 = cir.get_global @strlen : !cir.ptr<!cir.func<!u64i (!cir.ptr<!s8i>)>> loc(#loc45)
    %10 = cir.load %1 : !cir.ptr<!cir.ptr<!s8i>>, !cir.ptr<!s8i> loc(#loc46)
    %11 = cir.call @strlen(%10) : (!cir.ptr<!s8i>) -> !u64i extra(#fn_attr) loc(#loc45)
    %12 = cir.const #cir.int<1> : !u64i loc(#loc76)
    %13 = cir.binop(mul, %11, %12) : !u64i loc(#loc77)
    cir.libc.memmove %13 bytes from %8 to %6 : !cir.ptr<!void>, !u64i loc(#loc78)
    %14 = cir.const #cir.int<0> : !s32i loc(#loc51)
    %15 = cir.cast(integral, %14 : !s32i), !s8i loc(#loc51)
    %16 = cir.const #cir.int<50> : !s32i loc(#loc52)
    %17 = cir.const #cir.int<1> : !s32i loc(#loc53)
    %18 = cir.binop(sub, %16, %17) nsw : !s32i loc(#loc52)
    %19 = cir.cast(array_to_ptrdecay, %0 : !cir.ptr<!cir.array<!s8i x 50>>), !cir.ptr<!s8i> loc(#loc54)
    %20 = cir.ptr_stride(%19 : !cir.ptr<!s8i>, %18 : !s32i), !cir.ptr<!s8i> loc(#loc54)
    cir.store %15, %20 : !s8i, !cir.ptr<!s8i> loc(#loc79)
    %21 = cir.load %1 : !cir.ptr<!cir.ptr<!s8i>>, !cir.ptr<!s8i> loc(#loc55)
    cir.call @printLine(%21) : (!cir.ptr<!s8i>) -> () loc(#loc56)
    %22 = cir.get_global @free : !cir.ptr<!cir.func<!void (!cir.ptr<!void>)>> loc(#loc57)
    %23 = cir.load %1 : !cir.ptr<!cir.ptr<!s8i>>, !cir.ptr<!s8i> loc(#loc58)
    %24 = cir.cast(bitcast, %23 : !cir.ptr<!s8i>), !cir.ptr<!void> loc(#loc58)
    cir.call @free(%24) : (!cir.ptr<!void>) -> () extra(#fn_attr) loc(#loc57)
    cir.br ^bb2 loc(#loc42)
  ^bb2:  // pred: ^bb1
    cir.return loc(#loc36)
  } loc(#loc72)
} loc(#loc)
#loc = loc("/home/ladisgin/git_proj/juliet-c/testcases/CWE122_Heap_Based_Buffer_Overflow/s09/CWE122_Heap_Based_Buffer_Overflow__c_CWE806_char_memmove_68b.c":0:0)
#loc1 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE806_char_memmove_68b.c":21:1)
#loc2 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE806_char_memmove_68b.c":21:15)
#loc3 = loc("/usr/include/string.h":407:1)
#loc4 = loc("/usr/include/string.h":408:33)
#loc5 = loc("../../../testcasesupport/std_testcase_io.h":14:1)
#loc6 = loc("../../../testcasesupport/std_testcase_io.h":14:33)
#loc7 = loc("/usr/include/stdlib.h":687:1)
#loc8 = loc("/usr/include/stdlib.h":687:32)
#loc9 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE806_char_memmove_68b.c":28:1)
#loc10 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE806_char_memmove_68b.c":39:1)
#loc11 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE806_char_memmove_68b.c":32:9)
#loc12 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE806_char_memmove_68b.c":32:25)
#loc13 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE806_char_memmove_68b.c":30:5)
#loc14 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE806_char_memmove_68b.c":30:19)
#loc15 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE806_char_memmove_68b.c":31:5)
#loc16 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE806_char_memmove_68b.c":38:5)
#loc17 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE806_char_memmove_68b.c":34:17)
#loc18 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE806_char_memmove_68b.c":34:23)
#loc19 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE806_char_memmove_68b.c":34:29)
#loc20 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE806_char_memmove_68b.c":34:36)
#loc21 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE806_char_memmove_68b.c":34:42)
#loc22 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE806_char_memmove_68b.c":34:53)
#loc23 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE806_char_memmove_68b.c":34:9)
#loc24 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE806_char_memmove_68b.c":34:54)
#loc25 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE806_char_memmove_68b.c":35:22)
#loc26 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE806_char_memmove_68b.c":35:14)
#loc27 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE806_char_memmove_68b.c":35:17)
#loc28 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE806_char_memmove_68b.c":35:9)
#loc29 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE806_char_memmove_68b.c":36:19)
#loc30 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE806_char_memmove_68b.c":36:9)
#loc31 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE806_char_memmove_68b.c":37:9)
#loc32 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE806_char_memmove_68b.c":37:14)
#loc33 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE806_char_memmove_68b.c":22:1)
#loc34 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE806_char_memmove_68b.c":22:15)
#loc35 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE806_char_memmove_68b.c":46:1)
#loc36 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE806_char_memmove_68b.c":57:1)
#loc37 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE806_char_memmove_68b.c":50:9)
#loc38 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE806_char_memmove_68b.c":50:25)
#loc39 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE806_char_memmove_68b.c":48:5)
#loc40 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE806_char_memmove_68b.c":48:19)
#loc41 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE806_char_memmove_68b.c":49:5)
#loc42 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE806_char_memmove_68b.c":56:5)
#loc43 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE806_char_memmove_68b.c":52:17)
#loc44 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE806_char_memmove_68b.c":52:23)
#loc45 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE806_char_memmove_68b.c":52:29)
#loc46 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE806_char_memmove_68b.c":52:36)
#loc47 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE806_char_memmove_68b.c":52:42)
#loc48 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE806_char_memmove_68b.c":52:53)
#loc49 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE806_char_memmove_68b.c":52:9)
#loc50 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE806_char_memmove_68b.c":52:54)
#loc51 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE806_char_memmove_68b.c":53:22)
#loc52 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE806_char_memmove_68b.c":53:14)
#loc53 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE806_char_memmove_68b.c":53:17)
#loc54 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE806_char_memmove_68b.c":53:9)
#loc55 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE806_char_memmove_68b.c":54:19)
#loc56 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE806_char_memmove_68b.c":54:9)
#loc57 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE806_char_memmove_68b.c":55:9)
#loc58 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE806_char_memmove_68b.c":55:14)
#loc59 = loc(fused[#loc1, #loc2])
#loc60 = loc(fused[#loc3, #loc4])
#loc61 = loc(fused[#loc5, #loc6])
#loc62 = loc(fused[#loc7, #loc8])
#loc63 = loc(fused[#loc9, #loc10])
#loc64 = loc(fused[#loc11, #loc12])
#loc65 = loc(fused[#loc13, #loc14])
#loc66 = loc(fused[#loc15, #loc16])
#loc67 = loc(fused[#loc21, #loc22])
#loc68 = loc(fused[#loc19, #loc22])
#loc69 = loc(fused[#loc23, #loc24])
#loc70 = loc(fused[#loc28, #loc25])
#loc71 = loc(fused[#loc33, #loc34])
#loc72 = loc(fused[#loc35, #loc36])
#loc73 = loc(fused[#loc37, #loc38])
#loc74 = loc(fused[#loc39, #loc40])
#loc75 = loc(fused[#loc41, #loc42])
#loc76 = loc(fused[#loc47, #loc48])
#loc77 = loc(fused[#loc45, #loc48])
#loc78 = loc(fused[#loc49, #loc50])
#loc79 = loc(fused[#loc54, #loc51])
