!s32i = !cir.int<s, 32>
!s8i = !cir.int<s, 8>
#fn_attr = #cir<extra({nothrow = #cir.nothrow})>
#fn_attr1 = #cir<extra({inline = #cir.inline<no>, nothrow = #cir.nothrow, optnone = #cir.optnone, uwtable = #cir.uwtable<async>})>
module @"/workspaces/juliet-c/testcases/CWE398_Poor_Code_Quality/CWE398_Poor_Code_Quality__empty_if_15.c" attributes {cir.lang = #cir.lang<c>, cir.sob = #cir.signed_overflow_behavior<undefined>, cir.triple = "x86_64-unknown-linux-gnu", cir.type_size_info = #cir.type_size_info<char = 8, int = 32, size_t = 64>, cir.uwtable = #cir.uwtable<async>, dlti.dl_spec = #dlti.dl_spec<f16 = dense<16> : vector<2xi64>, f64 = dense<64> : vector<2xi64>, i32 = dense<32> : vector<2xi64>, i16 = dense<16> : vector<2xi64>, i8 = dense<8> : vector<2xi64>, i1 = dense<8> : vector<2xi64>, !llvm.ptr = dense<64> : vector<4xi64>, f80 = dense<128> : vector<2xi64>, !llvm.ptr<270> = dense<32> : vector<4xi64>, i128 = dense<128> : vector<2xi64>, !llvm.ptr<272> = dense<64> : vector<4xi64>, i64 = dense<64> : vector<2xi64>, !llvm.ptr<271> = dense<32> : vector<4xi64>, f128 = dense<128> : vector<2xi64>, "dlti.stack_alignment" = 128 : i64, "dlti.mangling_mode" = "e", "dlti.endianness" = "little">} {
  cir.func private @rand() -> !s32i extra(#fn_attr) loc(#loc105)
  cir.func private @printLine(!cir.ptr<!s8i>) loc(#loc106)
  cir.global "private" constant cir_private dsolocal @".str" = #cir.const_array<"Inside the else statement\00" : !cir.array<!s8i x 26>> : !cir.array<!s8i x 26> {alignment = 1 : i64} loc(#loc5)
  cir.global "private" constant cir_private dsolocal @".str.1" = #cir.const_array<"Hello from bad()\00" : !cir.array<!s8i x 17>> : !cir.array<!s8i x 17> {alignment = 1 : i64} loc(#loc6)
  cir.global "private" constant cir_private dsolocal @".str.2" = #cir.const_array<"Benign, fixed string\00" : !cir.array<!s8i x 21>> : !cir.array<!s8i x 21> {alignment = 1 : i64} loc(#loc7)
  cir.func no_proto @CWE398_Poor_Code_Quality__empty_if_15_bad() extra(#fn_attr1) {
    cir.scope {
      %0 = cir.const #cir.int<6> : !s32i loc(#loc12)
      cir.switch (%0 : !s32i) {
        cir.case(equal, [#cir.int<6> : !s32i]) {
          cir.scope {
            %3 = cir.alloca !s32i, !cir.ptr<!s32i>, ["x"] {alignment = 4 : i64} loc(#loc110)
            %4 = cir.call @rand() : () -> !s32i extra(#fn_attr) loc(#loc18)
            %5 = cir.const #cir.int<3> : !s32i loc(#loc19)
            %6 = cir.binop(rem, %4, %5) : !s32i loc(#loc111)
            cir.store %6, %3 : !s32i, !cir.ptr<!s32i> loc(#loc112)
            cir.scope {
              %7 = cir.load %3 : !cir.ptr<!s32i>, !s32i loc(#loc24)
              %8 = cir.const #cir.int<0> : !s32i loc(#loc25)
              %9 = cir.cmp(eq, %7, %8) : !s32i, !cir.bool loc(#loc114)
              cir.if %9 {
              } else {
                %10 = cir.get_global @".str" : !cir.ptr<!cir.array<!s8i x 26>> loc(#loc5)
                %11 = cir.cast(array_to_ptrdecay, %10 : !cir.ptr<!cir.array<!s8i x 26>>), !cir.ptr<!s8i> loc(#loc5)
                cir.call @printLine(%11) : (!cir.ptr<!s8i>) -> () loc(#loc29)
              } loc(#loc115)
            } loc(#loc113)
          } loc(#loc109)
          %1 = cir.get_global @".str.1" : !cir.ptr<!cir.array<!s8i x 17>> loc(#loc6)
          %2 = cir.cast(array_to_ptrdecay, %1 : !cir.ptr<!cir.array<!s8i x 17>>), !cir.ptr<!s8i> loc(#loc6)
          cir.call @printLine(%2) : (!cir.ptr<!s8i>) -> () loc(#loc30)
          cir.break loc(#loc31)
        } loc(#loc13)
        cir.case(default, []) {
          %1 = cir.get_global @".str.2" : !cir.ptr<!cir.array<!s8i x 21>> loc(#loc7)
          %2 = cir.cast(array_to_ptrdecay, %1 : !cir.ptr<!cir.array<!s8i x 21>>), !cir.ptr<!s8i> loc(#loc7)
          cir.call @printLine(%2) : (!cir.ptr<!s8i>) -> () loc(#loc33)
          cir.break loc(#loc34)
        } loc(#loc32)
        cir.yield loc(#loc10)
      } loc(#loc10)
    } loc(#loc108)
    cir.return loc(#loc9)
  } loc(#loc107)
  cir.func no_proto @CWE398_Poor_Code_Quality__empty_if_15_good() extra(#fn_attr1) {
    %0 = cir.get_global @good1 : !cir.ptr<!cir.func<()>> loc(#loc117)
    cir.call %0() : (!cir.ptr<!cir.func<()>>) -> () loc(#loc37)
    %1 = cir.get_global @good2 : !cir.ptr<!cir.func<()>> loc(#loc118)
    cir.call %1() : (!cir.ptr<!cir.func<()>>) -> () loc(#loc39)
    cir.return loc(#loc36)
  } loc(#loc116)
  cir.global "private" constant cir_private dsolocal @".str.3" = #cir.const_array<"Inside the if statement\00" : !cir.array<!s8i x 24>> : !cir.array<!s8i x 24> {alignment = 1 : i64} loc(#loc41)
  cir.global "private" constant cir_private dsolocal @".str.4" = #cir.const_array<"Hello from good()\00" : !cir.array<!s8i x 18>> : !cir.array<!s8i x 18> {alignment = 1 : i64} loc(#loc42)
  cir.func no_proto internal private @good1() extra(#fn_attr1) {
    cir.scope {
      %0 = cir.const #cir.int<5> : !s32i loc(#loc47)
      cir.switch (%0 : !s32i) {
        cir.case(equal, [#cir.int<6> : !s32i]) {
          %1 = cir.get_global @".str.2" : !cir.ptr<!cir.array<!s8i x 21>> loc(#loc49)
          %2 = cir.cast(array_to_ptrdecay, %1 : !cir.ptr<!cir.array<!s8i x 21>>), !cir.ptr<!s8i> loc(#loc49)
          cir.call @printLine(%2) : (!cir.ptr<!s8i>) -> () loc(#loc50)
          cir.break loc(#loc51)
        } loc(#loc48)
        cir.case(default, []) {
          cir.scope {
            %3 = cir.alloca !s32i, !cir.ptr<!s32i>, ["x"] {alignment = 4 : i64} loc(#loc122)
            %4 = cir.call @rand() : () -> !s32i extra(#fn_attr) loc(#loc57)
            %5 = cir.const #cir.int<3> : !s32i loc(#loc58)
            %6 = cir.binop(rem, %4, %5) : !s32i loc(#loc123)
            cir.store %6, %3 : !s32i, !cir.ptr<!s32i> loc(#loc124)
            cir.scope {
              %7 = cir.load %3 : !cir.ptr<!s32i>, !s32i loc(#loc63)
              %8 = cir.const #cir.int<0> : !s32i loc(#loc64)
              %9 = cir.cmp(eq, %7, %8) : !s32i, !cir.bool loc(#loc126)
              cir.if %9 {
                %10 = cir.get_global @".str.3" : !cir.ptr<!cir.array<!s8i x 24>> loc(#loc41)
                %11 = cir.cast(array_to_ptrdecay, %10 : !cir.ptr<!cir.array<!s8i x 24>>), !cir.ptr<!s8i> loc(#loc41)
                cir.call @printLine(%11) : (!cir.ptr<!s8i>) -> () loc(#loc68)
              } else {
                %10 = cir.get_global @".str" : !cir.ptr<!cir.array<!s8i x 26>> loc(#loc69)
                %11 = cir.cast(array_to_ptrdecay, %10 : !cir.ptr<!cir.array<!s8i x 26>>), !cir.ptr<!s8i> loc(#loc69)
                cir.call @printLine(%11) : (!cir.ptr<!s8i>) -> () loc(#loc70)
              } loc(#loc127)
            } loc(#loc125)
          } loc(#loc121)
          %1 = cir.get_global @".str.4" : !cir.ptr<!cir.array<!s8i x 18>> loc(#loc42)
          %2 = cir.cast(array_to_ptrdecay, %1 : !cir.ptr<!cir.array<!s8i x 18>>), !cir.ptr<!s8i> loc(#loc42)
          cir.call @printLine(%2) : (!cir.ptr<!s8i>) -> () loc(#loc71)
          cir.break loc(#loc72)
        } loc(#loc52)
        cir.yield loc(#loc45)
      } loc(#loc45)
    } loc(#loc120)
    cir.return loc(#loc44)
  } loc(#loc119)
  cir.func no_proto internal private @good2() extra(#fn_attr1) {
    cir.scope {
      %0 = cir.const #cir.int<6> : !s32i loc(#loc77)
      cir.switch (%0 : !s32i) {
        cir.case(equal, [#cir.int<6> : !s32i]) {
          cir.scope {
            %3 = cir.alloca !s32i, !cir.ptr<!s32i>, ["x"] {alignment = 4 : i64} loc(#loc131)
            %4 = cir.call @rand() : () -> !s32i extra(#fn_attr) loc(#loc83)
            %5 = cir.const #cir.int<3> : !s32i loc(#loc84)
            %6 = cir.binop(rem, %4, %5) : !s32i loc(#loc132)
            cir.store %6, %3 : !s32i, !cir.ptr<!s32i> loc(#loc133)
            cir.scope {
              %7 = cir.load %3 : !cir.ptr<!s32i>, !s32i loc(#loc89)
              %8 = cir.const #cir.int<0> : !s32i loc(#loc90)
              %9 = cir.cmp(eq, %7, %8) : !s32i, !cir.bool loc(#loc135)
              cir.if %9 {
                %10 = cir.get_global @".str.3" : !cir.ptr<!cir.array<!s8i x 24>> loc(#loc94)
                %11 = cir.cast(array_to_ptrdecay, %10 : !cir.ptr<!cir.array<!s8i x 24>>), !cir.ptr<!s8i> loc(#loc94)
                cir.call @printLine(%11) : (!cir.ptr<!s8i>) -> () loc(#loc95)
              } else {
                %10 = cir.get_global @".str" : !cir.ptr<!cir.array<!s8i x 26>> loc(#loc96)
                %11 = cir.cast(array_to_ptrdecay, %10 : !cir.ptr<!cir.array<!s8i x 26>>), !cir.ptr<!s8i> loc(#loc96)
                cir.call @printLine(%11) : (!cir.ptr<!s8i>) -> () loc(#loc97)
              } loc(#loc136)
            } loc(#loc134)
          } loc(#loc130)
          %1 = cir.get_global @".str.4" : !cir.ptr<!cir.array<!s8i x 18>> loc(#loc98)
          %2 = cir.cast(array_to_ptrdecay, %1 : !cir.ptr<!cir.array<!s8i x 18>>), !cir.ptr<!s8i> loc(#loc98)
          cir.call @printLine(%2) : (!cir.ptr<!s8i>) -> () loc(#loc99)
          cir.break loc(#loc100)
        } loc(#loc78)
        cir.case(default, []) {
          %1 = cir.get_global @".str.2" : !cir.ptr<!cir.array<!s8i x 21>> loc(#loc102)
          %2 = cir.cast(array_to_ptrdecay, %1 : !cir.ptr<!cir.array<!s8i x 21>>), !cir.ptr<!s8i> loc(#loc102)
          cir.call @printLine(%2) : (!cir.ptr<!s8i>) -> () loc(#loc103)
          cir.break loc(#loc104)
        } loc(#loc101)
        cir.yield loc(#loc75)
      } loc(#loc75)
    } loc(#loc129)
    cir.return loc(#loc74)
  } loc(#loc128)
} loc(#loc)
#loc = loc("/workspaces/juliet-c/testcases/CWE398_Poor_Code_Quality/CWE398_Poor_Code_Quality__empty_if_15.c":0:0)
#loc1 = loc("/usr/include/stdlib.h":573:1)
#loc2 = loc("/usr/include/stdlib.h":573:24)
#loc3 = loc("../../testcasesupport/std_testcase_io.h":14:1)
#loc4 = loc("../../testcasesupport/std_testcase_io.h":14:33)
#loc5 = loc("CWE398_Poor_Code_Quality__empty_if_15.c":34:23)
#loc6 = loc("CWE398_Poor_Code_Quality__empty_if_15.c":37:15)
#loc7 = loc("CWE398_Poor_Code_Quality__empty_if_15.c":41:19)
#loc8 = loc("CWE398_Poor_Code_Quality__empty_if_15.c":20:1)
#loc9 = loc("CWE398_Poor_Code_Quality__empty_if_15.c":44:1)
#loc10 = loc("CWE398_Poor_Code_Quality__empty_if_15.c":22:5)
#loc11 = loc("CWE398_Poor_Code_Quality__empty_if_15.c":43:5)
#loc12 = loc("CWE398_Poor_Code_Quality__empty_if_15.c":22:12)
#loc13 = loc("CWE398_Poor_Code_Quality__empty_if_15.c":24:5)
#loc14 = loc("CWE398_Poor_Code_Quality__empty_if_15.c":26:5)
#loc15 = loc("CWE398_Poor_Code_Quality__empty_if_15.c":36:5)
#loc16 = loc("CWE398_Poor_Code_Quality__empty_if_15.c":27:9)
#loc17 = loc("CWE398_Poor_Code_Quality__empty_if_15.c":27:13)
#loc18 = loc("CWE398_Poor_Code_Quality__empty_if_15.c":28:14)
#loc19 = loc("CWE398_Poor_Code_Quality__empty_if_15.c":28:23)
#loc20 = loc("CWE398_Poor_Code_Quality__empty_if_15.c":28:9)
#loc21 = loc("CWE398_Poor_Code_Quality__empty_if_15.c":28:24)
#loc22 = loc("CWE398_Poor_Code_Quality__empty_if_15.c":29:9)
#loc23 = loc("CWE398_Poor_Code_Quality__empty_if_15.c":35:9)
#loc24 = loc("CWE398_Poor_Code_Quality__empty_if_15.c":29:13)
#loc25 = loc("CWE398_Poor_Code_Quality__empty_if_15.c":29:18)
#loc26 = loc("CWE398_Poor_Code_Quality__empty_if_15.c":30:9)
#loc27 = loc("CWE398_Poor_Code_Quality__empty_if_15.c":31:9)
#loc28 = loc("CWE398_Poor_Code_Quality__empty_if_15.c":33:9)
#loc29 = loc("CWE398_Poor_Code_Quality__empty_if_15.c":34:13)
#loc30 = loc("CWE398_Poor_Code_Quality__empty_if_15.c":37:5)
#loc31 = loc("CWE398_Poor_Code_Quality__empty_if_15.c":38:5)
#loc32 = loc("CWE398_Poor_Code_Quality__empty_if_15.c":39:5)
#loc33 = loc("CWE398_Poor_Code_Quality__empty_if_15.c":41:9)
#loc34 = loc("CWE398_Poor_Code_Quality__empty_if_15.c":42:9)
#loc35 = loc("CWE398_Poor_Code_Quality__empty_if_15.c":106:1)
#loc36 = loc("CWE398_Poor_Code_Quality__empty_if_15.c":110:1)
#loc37 = loc("CWE398_Poor_Code_Quality__empty_if_15.c":108:5)
#loc38 = loc("CWE398_Poor_Code_Quality__empty_if_15.c":108:11)
#loc39 = loc("CWE398_Poor_Code_Quality__empty_if_15.c":109:5)
#loc40 = loc("CWE398_Poor_Code_Quality__empty_if_15.c":109:11)
#loc41 = loc("CWE398_Poor_Code_Quality__empty_if_15.c":66:23)
#loc42 = loc("CWE398_Poor_Code_Quality__empty_if_15.c":73:15)
#loc43 = loc("CWE398_Poor_Code_Quality__empty_if_15.c":51:1)
#loc44 = loc("CWE398_Poor_Code_Quality__empty_if_15.c":76:1)
#loc45 = loc("CWE398_Poor_Code_Quality__empty_if_15.c":53:5)
#loc46 = loc("CWE398_Poor_Code_Quality__empty_if_15.c":75:5)
#loc47 = loc("CWE398_Poor_Code_Quality__empty_if_15.c":53:12)
#loc48 = loc("CWE398_Poor_Code_Quality__empty_if_15.c":55:5)
#loc49 = loc("CWE398_Poor_Code_Quality__empty_if_15.c":57:19)
#loc50 = loc("CWE398_Poor_Code_Quality__empty_if_15.c":57:9)
#loc51 = loc("CWE398_Poor_Code_Quality__empty_if_15.c":58:9)
#loc52 = loc("CWE398_Poor_Code_Quality__empty_if_15.c":59:5)
#loc53 = loc("CWE398_Poor_Code_Quality__empty_if_15.c":61:5)
#loc54 = loc("CWE398_Poor_Code_Quality__empty_if_15.c":72:5)
#loc55 = loc("CWE398_Poor_Code_Quality__empty_if_15.c":62:9)
#loc56 = loc("CWE398_Poor_Code_Quality__empty_if_15.c":62:13)
#loc57 = loc("CWE398_Poor_Code_Quality__empty_if_15.c":63:14)
#loc58 = loc("CWE398_Poor_Code_Quality__empty_if_15.c":63:23)
#loc59 = loc("CWE398_Poor_Code_Quality__empty_if_15.c":63:9)
#loc60 = loc("CWE398_Poor_Code_Quality__empty_if_15.c":63:24)
#loc61 = loc("CWE398_Poor_Code_Quality__empty_if_15.c":64:9)
#loc62 = loc("CWE398_Poor_Code_Quality__empty_if_15.c":71:9)
#loc63 = loc("CWE398_Poor_Code_Quality__empty_if_15.c":64:13)
#loc64 = loc("CWE398_Poor_Code_Quality__empty_if_15.c":64:18)
#loc65 = loc("CWE398_Poor_Code_Quality__empty_if_15.c":65:9)
#loc66 = loc("CWE398_Poor_Code_Quality__empty_if_15.c":67:9)
#loc67 = loc("CWE398_Poor_Code_Quality__empty_if_15.c":69:9)
#loc68 = loc("CWE398_Poor_Code_Quality__empty_if_15.c":66:13)
#loc69 = loc("CWE398_Poor_Code_Quality__empty_if_15.c":70:23)
#loc70 = loc("CWE398_Poor_Code_Quality__empty_if_15.c":70:13)
#loc71 = loc("CWE398_Poor_Code_Quality__empty_if_15.c":73:5)
#loc72 = loc("CWE398_Poor_Code_Quality__empty_if_15.c":74:5)
#loc73 = loc("CWE398_Poor_Code_Quality__empty_if_15.c":79:1)
#loc74 = loc("CWE398_Poor_Code_Quality__empty_if_15.c":104:1)
#loc75 = loc("CWE398_Poor_Code_Quality__empty_if_15.c":81:5)
#loc76 = loc("CWE398_Poor_Code_Quality__empty_if_15.c":103:5)
#loc77 = loc("CWE398_Poor_Code_Quality__empty_if_15.c":81:12)
#loc78 = loc("CWE398_Poor_Code_Quality__empty_if_15.c":83:5)
#loc79 = loc("CWE398_Poor_Code_Quality__empty_if_15.c":85:5)
#loc80 = loc("CWE398_Poor_Code_Quality__empty_if_15.c":96:5)
#loc81 = loc("CWE398_Poor_Code_Quality__empty_if_15.c":86:9)
#loc82 = loc("CWE398_Poor_Code_Quality__empty_if_15.c":86:13)
#loc83 = loc("CWE398_Poor_Code_Quality__empty_if_15.c":87:14)
#loc84 = loc("CWE398_Poor_Code_Quality__empty_if_15.c":87:23)
#loc85 = loc("CWE398_Poor_Code_Quality__empty_if_15.c":87:9)
#loc86 = loc("CWE398_Poor_Code_Quality__empty_if_15.c":87:24)
#loc87 = loc("CWE398_Poor_Code_Quality__empty_if_15.c":88:9)
#loc88 = loc("CWE398_Poor_Code_Quality__empty_if_15.c":95:9)
#loc89 = loc("CWE398_Poor_Code_Quality__empty_if_15.c":88:13)
#loc90 = loc("CWE398_Poor_Code_Quality__empty_if_15.c":88:18)
#loc91 = loc("CWE398_Poor_Code_Quality__empty_if_15.c":89:9)
#loc92 = loc("CWE398_Poor_Code_Quality__empty_if_15.c":91:9)
#loc93 = loc("CWE398_Poor_Code_Quality__empty_if_15.c":93:9)
#loc94 = loc("CWE398_Poor_Code_Quality__empty_if_15.c":90:23)
#loc95 = loc("CWE398_Poor_Code_Quality__empty_if_15.c":90:13)
#loc96 = loc("CWE398_Poor_Code_Quality__empty_if_15.c":94:23)
#loc97 = loc("CWE398_Poor_Code_Quality__empty_if_15.c":94:13)
#loc98 = loc("CWE398_Poor_Code_Quality__empty_if_15.c":97:15)
#loc99 = loc("CWE398_Poor_Code_Quality__empty_if_15.c":97:5)
#loc100 = loc("CWE398_Poor_Code_Quality__empty_if_15.c":98:5)
#loc101 = loc("CWE398_Poor_Code_Quality__empty_if_15.c":99:5)
#loc102 = loc("CWE398_Poor_Code_Quality__empty_if_15.c":101:19)
#loc103 = loc("CWE398_Poor_Code_Quality__empty_if_15.c":101:9)
#loc104 = loc("CWE398_Poor_Code_Quality__empty_if_15.c":102:9)
#loc105 = loc(fused[#loc1, #loc2])
#loc106 = loc(fused[#loc3, #loc4])
#loc107 = loc(fused[#loc8, #loc9])
#loc108 = loc(fused[#loc10, #loc11])
#loc109 = loc(fused[#loc14, #loc15])
#loc110 = loc(fused[#loc16, #loc17])
#loc111 = loc(fused[#loc18, #loc19])
#loc112 = loc(fused[#loc20, #loc21])
#loc113 = loc(fused[#loc22, #loc23])
#loc114 = loc(fused[#loc24, #loc25])
#loc115 = loc(fused[#loc26, #loc27, #loc28, #loc23])
#loc116 = loc(fused[#loc35, #loc36])
#loc117 = loc(fused[#loc37, #loc38])
#loc118 = loc(fused[#loc39, #loc40])
#loc119 = loc(fused[#loc43, #loc44])
#loc120 = loc(fused[#loc45, #loc46])
#loc121 = loc(fused[#loc53, #loc54])
#loc122 = loc(fused[#loc55, #loc56])
#loc123 = loc(fused[#loc57, #loc58])
#loc124 = loc(fused[#loc59, #loc60])
#loc125 = loc(fused[#loc61, #loc62])
#loc126 = loc(fused[#loc63, #loc64])
#loc127 = loc(fused[#loc65, #loc66, #loc67, #loc62])
#loc128 = loc(fused[#loc73, #loc74])
#loc129 = loc(fused[#loc75, #loc76])
#loc130 = loc(fused[#loc79, #loc80])
#loc131 = loc(fused[#loc81, #loc82])
#loc132 = loc(fused[#loc83, #loc84])
#loc133 = loc(fused[#loc85, #loc86])
#loc134 = loc(fused[#loc87, #loc88])
#loc135 = loc(fused[#loc89, #loc90])
#loc136 = loc(fused[#loc91, #loc92, #loc93, #loc88])
