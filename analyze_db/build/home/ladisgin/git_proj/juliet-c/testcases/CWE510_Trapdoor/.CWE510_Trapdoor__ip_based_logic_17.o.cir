!s32i = !cir.int<s, 32>
!s64i = !cir.int<s, 64>
!s8i = !cir.int<s, 8>
!u16i = !cir.int<u, 16>
!u32i = !cir.int<u, 32>
!u64i = !cir.int<u, 64>
!u8i = !cir.int<u, 8>
!void = !cir.void
#fn_attr = #cir<extra({nothrow = #cir.nothrow})>
#fn_attr1 = #cir<extra({inline = #cir.inline<no>, nothrow = #cir.nothrow, optnone = #cir.optnone})>
!ty_in_addr = !cir.struct<struct "in_addr" {!u32i} #cir.record.decl.ast>
!ty_sockaddr = !cir.struct<struct "sockaddr" {!u16i, !cir.array<!s8i x 14>} #cir.record.decl.ast>
!ty_sockaddr_in = !cir.struct<struct "sockaddr_in" {!u16i, !u16i, !ty_in_addr, !cir.array<!u8i x 8>}>
module @"/home/ladisgin/git_proj/juliet-c/testcases/CWE510_Trapdoor/CWE510_Trapdoor__ip_based_logic_17.c" attributes {cir.lang = #cir.lang<c>, cir.sob = #cir.signed_overflow_behavior<undefined>, cir.triple = "x86_64-unknown-linux-gnu", dlti.dl_spec = #dlti.dl_spec<i128 = dense<128> : vector<2xi64>, f80 = dense<128> : vector<2xi64>, !llvm.ptr<271> = dense<32> : vector<4xi64>, !llvm.ptr<272> = dense<64> : vector<4xi64>, i64 = dense<64> : vector<2xi64>, i32 = dense<32> : vector<2xi64>, f128 = dense<128> : vector<2xi64>, !llvm.ptr<270> = dense<32> : vector<4xi64>, f64 = dense<64> : vector<2xi64>, f16 = dense<16> : vector<2xi64>, i1 = dense<8> : vector<2xi64>, !llvm.ptr = dense<64> : vector<4xi64>, i16 = dense<16> : vector<2xi64>, i8 = dense<8> : vector<2xi64>, "dlti.stack_alignment" = 128 : i64, "dlti.endianness" = "little">} {
  cir.func private @socket(!s32i, !s32i, !s32i) -> !s32i extra(#fn_attr) loc(#loc285)
  cir.func private @htons(!u16i) -> !u16i extra(#fn_attr) loc(#loc286)
  cir.func private @bind(!s32i, !cir.ptr<!ty_sockaddr>, !u32i) -> !s32i extra(#fn_attr) loc(#loc287)
  cir.func private @listen(!s32i, !s32i) -> !s32i extra(#fn_attr) loc(#loc288)
  cir.func private @accept(!s32i, !cir.ptr<!ty_sockaddr>, !cir.ptr<!u32i>) -> !s32i loc(#loc289)
  cir.func private @getsockname(!s32i, !cir.ptr<!ty_sockaddr>, !cir.ptr<!u32i>) -> !s32i extra(#fn_attr) loc(#loc290)
  cir.func private @strcmp(!cir.ptr<!s8i>, !cir.ptr<!s8i>) -> !s32i extra(#fn_attr) loc(#loc291)
  cir.global "private" constant cir_private dsolocal @".str" = #cir.const_array<"192.168.30.123\00" : !cir.array<!s8i x 15>> : !cir.array<!s8i x 15> {alignment = 1 : i64} loc(#loc15)
  cir.func private @inet_ntoa(!ty_in_addr) -> !cir.ptr<!s8i> extra(#fn_attr) loc(#loc292)
  cir.func private @send(!s32i, !cir.ptr<!void>, !u64i, !s32i) -> !s64i loc(#loc293)
  cir.global "private" constant cir_private dsolocal @".str.1" = #cir.const_array<"Welcome, admin!\00" : !cir.array<!s8i x 16>> : !cir.array<!s8i x 16> {alignment = 1 : i64} loc(#loc20)
  cir.global "private" constant cir_private dsolocal @".str.2" = #cir.const_array<"Welcome!\00" : !cir.array<!s8i x 9>> : !cir.array<!s8i x 9> {alignment = 1 : i64} loc(#loc21)
  cir.func private @printLine(!cir.ptr<!s8i>) loc(#loc294)
  cir.global "private" constant cir_private dsolocal @".str.3" = #cir.const_array<"Send failed!\00" : !cir.array<!s8i x 13>> : !cir.array<!s8i x 13> {alignment = 1 : i64} loc(#loc24)
  cir.func private @close(!s32i) -> !s32i loc(#loc295)
  cir.func no_proto @CWE510_Trapdoor__ip_based_logic_17_bad() extra(#fn_attr1) {
    %0 = cir.alloca !ty_sockaddr_in, !cir.ptr<!ty_sockaddr_in>, ["service"] {alignment = 4 : i64} loc(#loc297)
    %1 = cir.alloca !ty_sockaddr_in, !cir.ptr<!ty_sockaddr_in>, ["acceptService"] {alignment = 4 : i64} loc(#loc298)
    %2 = cir.alloca !s32i, !cir.ptr<!s32i>, ["acceptServiceLen", init] {alignment = 4 : i64} loc(#loc299)
    %3 = cir.alloca !s32i, !cir.ptr<!s32i>, ["listenSocket", init] {alignment = 4 : i64} loc(#loc300)
    %4 = cir.alloca !s32i, !cir.ptr<!s32i>, ["acceptSocket", init] {alignment = 4 : i64} loc(#loc301)
    %5 = cir.alloca !s32i, !cir.ptr<!s32i>, ["j"] {alignment = 4 : i64} loc(#loc302)
    cir.br ^bb1 loc(#loc303)
  ^bb1:  // pred: ^bb0
    %6 = cir.const #cir.int<0> : !s32i loc(#loc42)
    cir.store %6, %5 : !s32i, !cir.ptr<!s32i> loc(#loc304)
    cir.br ^bb2 loc(#loc303)
  ^bb2:  // 2 preds: ^bb1, ^bb54
    %7 = cir.load %5 : !cir.ptr<!s32i>, !s32i loc(#loc44)
    %8 = cir.const #cir.int<1> : !s32i loc(#loc45)
    %9 = cir.cmp(lt, %7, %8) : !s32i, !cir.bool loc(#loc305)
    cir.brcond %9 ^bb3, ^bb55 loc(#loc46)
  ^bb3:  // pred: ^bb2
    cir.br ^bb4 loc(#loc306)
  ^bb4:  // pred: ^bb3
    cir.br ^bb5 loc(#loc307)
  ^bb5:  // pred: ^bb4
    %10 = cir.const #cir.int<16> : !u64i loc(#loc308)
    %11 = cir.cast(integral, %10 : !u64i), !s32i loc(#loc308)
    cir.store %11, %2 : !s32i, !cir.ptr<!s32i> loc(#loc299)
    %12 = cir.const #cir.int<1> : !s32i loc(#loc35)
    %13 = cir.unary(minus, %12) : !s32i, !s32i loc(#loc35)
    cir.store %13, %3 : !s32i, !cir.ptr<!s32i> loc(#loc300)
    %14 = cir.const #cir.int<1> : !s32i loc(#loc37)
    %15 = cir.unary(minus, %14) : !s32i, !s32i loc(#loc37)
    cir.store %15, %4 : !s32i, !cir.ptr<!s32i> loc(#loc301)
    cir.br ^bb6 loc(#loc309)
  ^bb6:  // pred: ^bb5
    cir.br ^bb8 loc(#loc309)
  ^bb7:  // pred: ^bb41
    %16 = cir.const #cir.int<0> : !s32i loc(#loc53)
    %17 = cir.cast(int_to_bool, %16 : !s32i), !cir.bool loc(#loc53)
    cir.brcond %17 ^bb8, ^bb42 loc(#loc53)
  ^bb8:  // 2 preds: ^bb6, ^bb7
    %18 = cir.const #cir.int<2> : !s32i loc(#loc54)
    %19 = cir.const #cir.int<1> : !s32i loc(#loc55)
    %20 = cir.const #cir.int<6> : !s32i loc(#loc56)
    %21 = cir.call @socket(%18, %19, %20) : (!s32i, !s32i, !s32i) -> !s32i extra(#fn_attr) loc(#loc57)
    cir.store %21, %3 : !s32i, !cir.ptr<!s32i> loc(#loc310)
    cir.br ^bb9 loc(#loc311)
  ^bb9:  // pred: ^bb8
    %22 = cir.load %3 : !cir.ptr<!s32i>, !s32i loc(#loc62)
    %23 = cir.const #cir.int<1> : !s32i loc(#loc63)
    %24 = cir.unary(minus, %23) : !s32i, !s32i loc(#loc63)
    %25 = cir.cmp(eq, %22, %24) : !s32i, !cir.bool loc(#loc312)
    cir.brcond %25 ^bb10, ^bb11 loc(#loc313)
  ^bb10:  // pred: ^bb9
    cir.br ^bb42 loc(#loc65)
  ^bb11:  // pred: ^bb9
    cir.br ^bb12 loc(#loc61)
  ^bb12:  // pred: ^bb11
    %26 = cir.cast(bitcast, %0 : !cir.ptr<!ty_sockaddr_in>), !cir.ptr<!void> loc(#loc314)
    %27 = cir.const #cir.int<0> : !s32i loc(#loc68)
    %28 = cir.const #cir.int<16> : !u64i loc(#loc315)
    cir.libc.memset %28 bytes from %26 set to %27 : !cir.ptr<!void>, !s32i, !u64i loc(#loc316)
    %29 = cir.const #cir.int<2> : !s32i loc(#loc73)
    %30 = cir.cast(integral, %29 : !s32i), !u16i loc(#loc73)
    %31 = cir.get_member %0[0] {name = "sin_family"} : !cir.ptr<!ty_sockaddr_in> -> !cir.ptr<!u16i> loc(#loc74)
    cir.store %30, %31 : !u16i, !cir.ptr<!u16i> loc(#loc317)
    %32 = cir.const #cir.int<0> : !s32i loc(#loc76)
    %33 = cir.cast(integral, %32 : !s32i), !u32i loc(#loc76)
    %34 = cir.get_member %0[2] {name = "sin_addr"} : !cir.ptr<!ty_sockaddr_in> -> !cir.ptr<!ty_in_addr> loc(#loc77)
    %35 = cir.get_member %34[0] {name = "s_addr"} : !cir.ptr<!ty_in_addr> -> !cir.ptr<!u32i> loc(#loc78)
    cir.store %33, %35 : !u32i, !cir.ptr<!u32i> loc(#loc318)
    %36 = cir.const #cir.int<20000> : !s32i loc(#loc80)
    %37 = cir.cast(integral, %36 : !s32i), !u16i loc(#loc80)
    %38 = cir.call @htons(%37) : (!u16i) -> !u16i extra(#fn_attr) loc(#loc81)
    %39 = cir.get_member %0[1] {name = "sin_port"} : !cir.ptr<!ty_sockaddr_in> -> !cir.ptr<!u16i> loc(#loc82)
    cir.store %38, %39 : !u16i, !cir.ptr<!u16i> loc(#loc319)
    cir.br ^bb13 loc(#loc320)
  ^bb13:  // pred: ^bb12
    %40 = cir.load %3 : !cir.ptr<!s32i>, !s32i loc(#loc87)
    %41 = cir.cast(bitcast, %0 : !cir.ptr<!ty_sockaddr_in>), !cir.ptr<!ty_sockaddr> loc(#loc321)
    %42 = cir.const #cir.int<16> : !u64i loc(#loc322)
    %43 = cir.cast(integral, %42 : !u64i), !u32i loc(#loc322)
    %44 = cir.call @bind(%40, %41, %43) : (!s32i, !cir.ptr<!ty_sockaddr>, !u32i) -> !s32i extra(#fn_attr) loc(#loc92)
    %45 = cir.const #cir.int<1> : !s32i loc(#loc93)
    %46 = cir.unary(minus, %45) : !s32i, !s32i loc(#loc93)
    %47 = cir.cmp(eq, %44, %46) : !s32i, !cir.bool loc(#loc323)
    cir.brcond %47 ^bb14, ^bb15 loc(#loc324)
  ^bb14:  // pred: ^bb13
    cir.br ^bb42 loc(#loc95)
  ^bb15:  // pred: ^bb13
    cir.br ^bb16 loc(#loc86)
  ^bb16:  // pred: ^bb15
    cir.br ^bb17 loc(#loc325)
  ^bb17:  // pred: ^bb16
    %48 = cir.load %3 : !cir.ptr<!s32i>, !s32i loc(#loc98)
    %49 = cir.const #cir.int<5> : !s32i loc(#loc99)
    %50 = cir.call @listen(%48, %49) : (!s32i, !s32i) -> !s32i extra(#fn_attr) loc(#loc100)
    %51 = cir.const #cir.int<1> : !s32i loc(#loc101)
    %52 = cir.unary(minus, %51) : !s32i, !s32i loc(#loc101)
    %53 = cir.cmp(eq, %50, %52) : !s32i, !cir.bool loc(#loc326)
    cir.brcond %53 ^bb18, ^bb19 loc(#loc327)
  ^bb18:  // pred: ^bb17
    cir.br ^bb42 loc(#loc103)
  ^bb19:  // pred: ^bb17
    cir.br ^bb20 loc(#loc97)
  ^bb20:  // pred: ^bb19
    %54 = cir.load %3 : !cir.ptr<!s32i>, !s32i loc(#loc104)
    %55 = cir.const #cir.ptr<null> : !cir.ptr<!ty_sockaddr> loc(#loc105)
    %56 = cir.const #cir.ptr<null> : !cir.ptr<!u32i> loc(#loc106)
    %57 = cir.call @accept(%54, %55, %56) : (!s32i, !cir.ptr<!ty_sockaddr>, !cir.ptr<!u32i>) -> !s32i loc(#loc107)
    cir.store %57, %4 : !s32i, !cir.ptr<!s32i> loc(#loc328)
    cir.br ^bb21 loc(#loc329)
  ^bb21:  // pred: ^bb20
    %58 = cir.load %4 : !cir.ptr<!s32i>, !s32i loc(#loc112)
    %59 = cir.const #cir.int<1> : !s32i loc(#loc113)
    %60 = cir.unary(minus, %59) : !s32i, !s32i loc(#loc113)
    %61 = cir.cmp(eq, %58, %60) : !s32i, !cir.bool loc(#loc330)
    cir.brcond %61 ^bb22, ^bb23 loc(#loc331)
  ^bb22:  // pred: ^bb21
    cir.br ^bb42 loc(#loc115)
  ^bb23:  // pred: ^bb21
    cir.br ^bb24 loc(#loc111)
  ^bb24:  // pred: ^bb23
    cir.br ^bb25 loc(#loc332)
  ^bb25:  // pred: ^bb24
    %62 = cir.load %4 : !cir.ptr<!s32i>, !s32i loc(#loc118)
    %63 = cir.cast(bitcast, %1 : !cir.ptr<!ty_sockaddr_in>), !cir.ptr<!ty_sockaddr> loc(#loc333)
    %64 = cir.cast(bitcast, %2 : !cir.ptr<!s32i>), !cir.ptr<!u32i> loc(#loc334)
    %65 = cir.call @getsockname(%62, %63, %64) : (!s32i, !cir.ptr<!ty_sockaddr>, !cir.ptr<!u32i>) -> !s32i extra(#fn_attr) loc(#loc123)
    %66 = cir.const #cir.int<1> : !s32i loc(#loc124)
    %67 = cir.unary(minus, %66) : !s32i, !s32i loc(#loc125)
    %68 = cir.cmp(eq, %65, %67) : !s32i, !cir.bool loc(#loc335)
    cir.brcond %68 ^bb26, ^bb27 loc(#loc336)
  ^bb26:  // pred: ^bb25
    cir.br ^bb42 loc(#loc127)
  ^bb27:  // pred: ^bb25
    cir.br ^bb28 loc(#loc117)
  ^bb28:  // pred: ^bb27
    cir.br ^bb29 loc(#loc337)
  ^bb29:  // pred: ^bb28
    %69 = cir.get_global @strcmp : !cir.ptr<!cir.func<!s32i (!cir.ptr<!s8i>, !cir.ptr<!s8i>)>> loc(#loc130)
    %70 = cir.get_global @".str" : !cir.ptr<!cir.array<!s8i x 15>> loc(#loc15)
    %71 = cir.cast(array_to_ptrdecay, %70 : !cir.ptr<!cir.array<!s8i x 15>>), !cir.ptr<!s8i> loc(#loc15)
    %72 = cir.get_member %1[2] {name = "sin_addr"} : !cir.ptr<!ty_sockaddr_in> -> !cir.ptr<!ty_in_addr> loc(#loc77)
    %73 = cir.load %72 : !cir.ptr<!ty_in_addr>, !ty_in_addr loc(#loc131)
    %74 = cir.call @inet_ntoa(%73) : (!ty_in_addr) -> !cir.ptr<!s8i> extra(#fn_attr) loc(#loc131)
    %75 = cir.call @strcmp(%71, %74) : (!cir.ptr<!s8i>, !cir.ptr<!s8i>) -> !s32i extra(#fn_attr) loc(#loc130)
    %76 = cir.const #cir.int<0> : !s32i loc(#loc132)
    %77 = cir.cmp(eq, %75, %76) : !s32i, !cir.bool loc(#loc338)
    cir.brcond %77 ^bb30, ^bb35 loc(#loc339)
  ^bb30:  // pred: ^bb29
    cir.br ^bb31 loc(#loc340)
  ^bb31:  // pred: ^bb30
    %78 = cir.load %4 : !cir.ptr<!s32i>, !s32i loc(#loc138)
    %79 = cir.get_global @".str.1" : !cir.ptr<!cir.array<!s8i x 16>> loc(#loc20)
    %80 = cir.cast(array_to_ptrdecay, %79 : !cir.ptr<!cir.array<!s8i x 16>>), !cir.ptr<!s8i> loc(#loc20)
    %81 = cir.cast(bitcast, %80 : !cir.ptr<!s8i>), !cir.ptr<!void> loc(#loc20)
    %82 = cir.const #cir.int<15> : !u64i loc(#loc341)
    %83 = cir.const #cir.int<0> : !s32i loc(#loc141)
    %84 = cir.call @send(%78, %81, %82, %83) : (!s32i, !cir.ptr<!void>, !u64i, !s32i) -> !s64i loc(#loc142)
    %85 = cir.const #cir.int<1> : !s32i loc(#loc143)
    %86 = cir.unary(minus, %85) : !s32i, !s32i loc(#loc143)
    %87 = cir.cast(integral, %86 : !s32i), !s64i loc(#loc143)
    %88 = cir.cmp(eq, %84, %87) : !s64i, !cir.bool loc(#loc342)
    cir.brcond %88 ^bb32, ^bb33 loc(#loc343)
  ^bb32:  // pred: ^bb31
    cir.br ^bb42 loc(#loc145)
  ^bb33:  // pred: ^bb31
    cir.br ^bb34 loc(#loc137)
  ^bb34:  // pred: ^bb33
    cir.br ^bb40 loc(#loc134)
  ^bb35:  // pred: ^bb29
    cir.br ^bb36 loc(#loc344)
  ^bb36:  // pred: ^bb35
    %89 = cir.load %4 : !cir.ptr<!s32i>, !s32i loc(#loc148)
    %90 = cir.get_global @".str.2" : !cir.ptr<!cir.array<!s8i x 9>> loc(#loc21)
    %91 = cir.cast(array_to_ptrdecay, %90 : !cir.ptr<!cir.array<!s8i x 9>>), !cir.ptr<!s8i> loc(#loc21)
    %92 = cir.cast(bitcast, %91 : !cir.ptr<!s8i>), !cir.ptr<!void> loc(#loc21)
    %93 = cir.const #cir.int<8> : !u64i loc(#loc345)
    %94 = cir.const #cir.int<0> : !s32i loc(#loc151)
    %95 = cir.call @send(%89, %92, %93, %94) : (!s32i, !cir.ptr<!void>, !u64i, !s32i) -> !s64i loc(#loc152)
    %96 = cir.const #cir.int<1> : !s32i loc(#loc153)
    %97 = cir.unary(minus, %96) : !s32i, !s32i loc(#loc153)
    %98 = cir.cast(integral, %97 : !s32i), !s64i loc(#loc153)
    %99 = cir.cmp(eq, %95, %98) : !s64i, !cir.bool loc(#loc346)
    cir.brcond %99 ^bb37, ^bb38 loc(#loc347)
  ^bb37:  // pred: ^bb36
    %100 = cir.get_global @".str.3" : !cir.ptr<!cir.array<!s8i x 13>> loc(#loc24)
    %101 = cir.cast(array_to_ptrdecay, %100 : !cir.ptr<!cir.array<!s8i x 13>>), !cir.ptr<!s8i> loc(#loc24)
    cir.call @printLine(%101) : (!cir.ptr<!s8i>) -> () loc(#loc155)
    cir.br ^bb38 loc(#loc147)
  ^bb38:  // 2 preds: ^bb36, ^bb37
    cir.br ^bb39 loc(#loc147)
  ^bb39:  // pred: ^bb38
    cir.br ^bb40 loc(#loc129)
  ^bb40:  // 2 preds: ^bb34, ^bb39
    cir.br ^bb41 loc(#loc129)
  ^bb41:  // pred: ^bb40
    cir.br ^bb7 loc(#loc52)
  ^bb42:  // 7 preds: ^bb7, ^bb10, ^bb14, ^bb18, ^bb22, ^bb26, ^bb32
    cir.br ^bb43 loc(#loc52)
  ^bb43:  // pred: ^bb42
    cir.br ^bb44 loc(#loc348)
  ^bb44:  // pred: ^bb43
    %102 = cir.load %3 : !cir.ptr<!s32i>, !s32i loc(#loc158)
    %103 = cir.const #cir.int<1> : !s32i loc(#loc159)
    %104 = cir.unary(minus, %103) : !s32i, !s32i loc(#loc159)
    %105 = cir.cmp(ne, %102, %104) : !s32i, !cir.bool loc(#loc349)
    cir.brcond %105 ^bb45, ^bb46 loc(#loc350)
  ^bb45:  // pred: ^bb44
    %106 = cir.load %3 : !cir.ptr<!s32i>, !s32i loc(#loc161)
    %107 = cir.call @close(%106) : (!s32i) -> !s32i loc(#loc162)
    cir.br ^bb46 loc(#loc157)
  ^bb46:  // 2 preds: ^bb44, ^bb45
    cir.br ^bb47 loc(#loc157)
  ^bb47:  // pred: ^bb46
    cir.br ^bb48 loc(#loc351)
  ^bb48:  // pred: ^bb47
    %108 = cir.load %4 : !cir.ptr<!s32i>, !s32i loc(#loc165)
    %109 = cir.const #cir.int<1> : !s32i loc(#loc166)
    %110 = cir.unary(minus, %109) : !s32i, !s32i loc(#loc166)
    %111 = cir.cmp(ne, %108, %110) : !s32i, !cir.bool loc(#loc352)
    cir.brcond %111 ^bb49, ^bb50 loc(#loc353)
  ^bb49:  // pred: ^bb48
    %112 = cir.load %4 : !cir.ptr<!s32i>, !s32i loc(#loc168)
    %113 = cir.call @close(%112) : (!s32i) -> !s32i loc(#loc169)
    cir.br ^bb50 loc(#loc164)
  ^bb50:  // 2 preds: ^bb48, ^bb49
    cir.br ^bb51 loc(#loc164)
  ^bb51:  // pred: ^bb50
    cir.br ^bb52 loc(#loc49)
  ^bb52:  // pred: ^bb51
    cir.br ^bb53 loc(#loc41)
  ^bb53:  // pred: ^bb52
    cir.br ^bb54 loc(#loc41)
  ^bb54:  // pred: ^bb53
    %114 = cir.load %5 : !cir.ptr<!s32i>, !s32i loc(#loc170)
    %115 = cir.unary(inc, %114) : !s32i, !s32i loc(#loc171)
    cir.store %115, %5 : !s32i, !cir.ptr<!s32i> loc(#loc354)
    cir.br ^bb2 loc(#loc303)
  ^bb55:  // pred: ^bb2
    cir.br ^bb56 loc(#loc41)
  ^bb56:  // pred: ^bb55
    cir.return loc(#loc28)
  } loc(#loc296)
  cir.func no_proto @CWE510_Trapdoor__ip_based_logic_17_good() extra(#fn_attr1) {
    %0 = cir.get_global @good1 : !cir.ptr<!cir.func<!void ()>> loc(#loc356)
    cir.call %0() : (!cir.ptr<!cir.func<!void ()>>) -> () loc(#loc174)
    cir.return loc(#loc173)
  } loc(#loc355)
  cir.func no_proto internal private @good1() extra(#fn_attr1) {
    %0 = cir.alloca !ty_sockaddr_in, !cir.ptr<!ty_sockaddr_in>, ["service"] {alignment = 4 : i64} loc(#loc358)
    %1 = cir.alloca !s32i, !cir.ptr<!s32i>, ["listenSocket", init] {alignment = 4 : i64} loc(#loc359)
    %2 = cir.alloca !s32i, !cir.ptr<!s32i>, ["acceptSocket", init] {alignment = 4 : i64} loc(#loc360)
    %3 = cir.alloca !s32i, !cir.ptr<!s32i>, ["k"] {alignment = 4 : i64} loc(#loc361)
    cir.br ^bb1 loc(#loc362)
  ^bb1:  // pred: ^bb0
    %4 = cir.const #cir.int<0> : !s32i loc(#loc188)
    cir.store %4, %3 : !s32i, !cir.ptr<!s32i> loc(#loc363)
    cir.br ^bb2 loc(#loc362)
  ^bb2:  // 2 preds: ^bb1, ^bb41
    %5 = cir.load %3 : !cir.ptr<!s32i>, !s32i loc(#loc190)
    %6 = cir.const #cir.int<1> : !s32i loc(#loc191)
    %7 = cir.cmp(lt, %5, %6) : !s32i, !cir.bool loc(#loc364)
    cir.brcond %7 ^bb3, ^bb42 loc(#loc192)
  ^bb3:  // pred: ^bb2
    cir.br ^bb4 loc(#loc365)
  ^bb4:  // pred: ^bb3
    cir.br ^bb5 loc(#loc366)
  ^bb5:  // pred: ^bb4
    %8 = cir.const #cir.int<1> : !s32i loc(#loc181)
    %9 = cir.unary(minus, %8) : !s32i, !s32i loc(#loc181)
    cir.store %9, %1 : !s32i, !cir.ptr<!s32i> loc(#loc359)
    %10 = cir.const #cir.int<1> : !s32i loc(#loc183)
    %11 = cir.unary(minus, %10) : !s32i, !s32i loc(#loc183)
    cir.store %11, %2 : !s32i, !cir.ptr<!s32i> loc(#loc360)
    cir.br ^bb6 loc(#loc367)
  ^bb6:  // pred: ^bb5
    cir.br ^bb8 loc(#loc367)
  ^bb7:  // pred: ^bb28
    %12 = cir.const #cir.int<0> : !s32i loc(#loc198)
    %13 = cir.cast(int_to_bool, %12 : !s32i), !cir.bool loc(#loc198)
    cir.brcond %13 ^bb8, ^bb29 loc(#loc198)
  ^bb8:  // 2 preds: ^bb6, ^bb7
    %14 = cir.const #cir.int<2> : !s32i loc(#loc199)
    %15 = cir.const #cir.int<1> : !s32i loc(#loc200)
    %16 = cir.const #cir.int<6> : !s32i loc(#loc201)
    %17 = cir.call @socket(%14, %15, %16) : (!s32i, !s32i, !s32i) -> !s32i extra(#fn_attr) loc(#loc202)
    cir.store %17, %1 : !s32i, !cir.ptr<!s32i> loc(#loc368)
    cir.br ^bb9 loc(#loc369)
  ^bb9:  // pred: ^bb8
    %18 = cir.load %1 : !cir.ptr<!s32i>, !s32i loc(#loc207)
    %19 = cir.const #cir.int<1> : !s32i loc(#loc208)
    %20 = cir.unary(minus, %19) : !s32i, !s32i loc(#loc208)
    %21 = cir.cmp(eq, %18, %20) : !s32i, !cir.bool loc(#loc370)
    cir.brcond %21 ^bb10, ^bb11 loc(#loc371)
  ^bb10:  // pred: ^bb9
    cir.br ^bb29 loc(#loc210)
  ^bb11:  // pred: ^bb9
    cir.br ^bb12 loc(#loc206)
  ^bb12:  // pred: ^bb11
    %22 = cir.cast(bitcast, %0 : !cir.ptr<!ty_sockaddr_in>), !cir.ptr<!void> loc(#loc372)
    %23 = cir.const #cir.int<0> : !s32i loc(#loc213)
    %24 = cir.const #cir.int<16> : !u64i loc(#loc373)
    cir.libc.memset %24 bytes from %22 set to %23 : !cir.ptr<!void>, !s32i, !u64i loc(#loc374)
    %25 = cir.const #cir.int<2> : !s32i loc(#loc218)
    %26 = cir.cast(integral, %25 : !s32i), !u16i loc(#loc218)
    %27 = cir.get_member %0[0] {name = "sin_family"} : !cir.ptr<!ty_sockaddr_in> -> !cir.ptr<!u16i> loc(#loc74)
    cir.store %26, %27 : !u16i, !cir.ptr<!u16i> loc(#loc375)
    %28 = cir.const #cir.int<0> : !s32i loc(#loc220)
    %29 = cir.cast(integral, %28 : !s32i), !u32i loc(#loc220)
    %30 = cir.get_member %0[2] {name = "sin_addr"} : !cir.ptr<!ty_sockaddr_in> -> !cir.ptr<!ty_in_addr> loc(#loc77)
    %31 = cir.get_member %30[0] {name = "s_addr"} : !cir.ptr<!ty_in_addr> -> !cir.ptr<!u32i> loc(#loc78)
    cir.store %29, %31 : !u32i, !cir.ptr<!u32i> loc(#loc376)
    %32 = cir.const #cir.int<20000> : !s32i loc(#loc222)
    %33 = cir.cast(integral, %32 : !s32i), !u16i loc(#loc222)
    %34 = cir.call @htons(%33) : (!u16i) -> !u16i extra(#fn_attr) loc(#loc223)
    %35 = cir.get_member %0[1] {name = "sin_port"} : !cir.ptr<!ty_sockaddr_in> -> !cir.ptr<!u16i> loc(#loc82)
    cir.store %34, %35 : !u16i, !cir.ptr<!u16i> loc(#loc377)
    cir.br ^bb13 loc(#loc378)
  ^bb13:  // pred: ^bb12
    %36 = cir.load %1 : !cir.ptr<!s32i>, !s32i loc(#loc228)
    %37 = cir.cast(bitcast, %0 : !cir.ptr<!ty_sockaddr_in>), !cir.ptr<!ty_sockaddr> loc(#loc379)
    %38 = cir.const #cir.int<16> : !u64i loc(#loc380)
    %39 = cir.cast(integral, %38 : !u64i), !u32i loc(#loc380)
    %40 = cir.call @bind(%36, %37, %39) : (!s32i, !cir.ptr<!ty_sockaddr>, !u32i) -> !s32i extra(#fn_attr) loc(#loc233)
    %41 = cir.const #cir.int<1> : !s32i loc(#loc234)
    %42 = cir.unary(minus, %41) : !s32i, !s32i loc(#loc234)
    %43 = cir.cmp(eq, %40, %42) : !s32i, !cir.bool loc(#loc381)
    cir.brcond %43 ^bb14, ^bb15 loc(#loc382)
  ^bb14:  // pred: ^bb13
    cir.br ^bb29 loc(#loc236)
  ^bb15:  // pred: ^bb13
    cir.br ^bb16 loc(#loc227)
  ^bb16:  // pred: ^bb15
    cir.br ^bb17 loc(#loc383)
  ^bb17:  // pred: ^bb16
    %44 = cir.load %1 : !cir.ptr<!s32i>, !s32i loc(#loc239)
    %45 = cir.const #cir.int<5> : !s32i loc(#loc240)
    %46 = cir.call @listen(%44, %45) : (!s32i, !s32i) -> !s32i extra(#fn_attr) loc(#loc241)
    %47 = cir.const #cir.int<1> : !s32i loc(#loc242)
    %48 = cir.unary(minus, %47) : !s32i, !s32i loc(#loc242)
    %49 = cir.cmp(eq, %46, %48) : !s32i, !cir.bool loc(#loc384)
    cir.brcond %49 ^bb18, ^bb19 loc(#loc385)
  ^bb18:  // pred: ^bb17
    cir.br ^bb29 loc(#loc244)
  ^bb19:  // pred: ^bb17
    cir.br ^bb20 loc(#loc238)
  ^bb20:  // pred: ^bb19
    %50 = cir.load %1 : !cir.ptr<!s32i>, !s32i loc(#loc245)
    %51 = cir.const #cir.ptr<null> : !cir.ptr<!ty_sockaddr> loc(#loc246)
    %52 = cir.const #cir.ptr<null> : !cir.ptr<!u32i> loc(#loc247)
    %53 = cir.call @accept(%50, %51, %52) : (!s32i, !cir.ptr<!ty_sockaddr>, !cir.ptr<!u32i>) -> !s32i loc(#loc248)
    cir.store %53, %2 : !s32i, !cir.ptr<!s32i> loc(#loc386)
    cir.br ^bb21 loc(#loc387)
  ^bb21:  // pred: ^bb20
    %54 = cir.load %2 : !cir.ptr<!s32i>, !s32i loc(#loc253)
    %55 = cir.const #cir.int<1> : !s32i loc(#loc254)
    %56 = cir.unary(minus, %55) : !s32i, !s32i loc(#loc254)
    %57 = cir.cmp(eq, %54, %56) : !s32i, !cir.bool loc(#loc388)
    cir.brcond %57 ^bb22, ^bb23 loc(#loc389)
  ^bb22:  // pred: ^bb21
    cir.br ^bb29 loc(#loc256)
  ^bb23:  // pred: ^bb21
    cir.br ^bb24 loc(#loc252)
  ^bb24:  // pred: ^bb23
    cir.br ^bb25 loc(#loc390)
  ^bb25:  // pred: ^bb24
    %58 = cir.load %2 : !cir.ptr<!s32i>, !s32i loc(#loc259)
    %59 = cir.get_global @".str.2" : !cir.ptr<!cir.array<!s8i x 9>> loc(#loc260)
    %60 = cir.cast(array_to_ptrdecay, %59 : !cir.ptr<!cir.array<!s8i x 9>>), !cir.ptr<!s8i> loc(#loc260)
    %61 = cir.cast(bitcast, %60 : !cir.ptr<!s8i>), !cir.ptr<!void> loc(#loc260)
    %62 = cir.const #cir.int<8> : !u64i loc(#loc391)
    %63 = cir.const #cir.int<0> : !s32i loc(#loc263)
    %64 = cir.call @send(%58, %61, %62, %63) : (!s32i, !cir.ptr<!void>, !u64i, !s32i) -> !s64i loc(#loc264)
    %65 = cir.const #cir.int<1> : !s32i loc(#loc265)
    %66 = cir.unary(minus, %65) : !s32i, !s32i loc(#loc265)
    %67 = cir.cast(integral, %66 : !s32i), !s64i loc(#loc265)
    %68 = cir.cmp(eq, %64, %67) : !s64i, !cir.bool loc(#loc392)
    cir.brcond %68 ^bb26, ^bb27 loc(#loc393)
  ^bb26:  // pred: ^bb25
    %69 = cir.get_global @".str.3" : !cir.ptr<!cir.array<!s8i x 13>> loc(#loc267)
    %70 = cir.cast(array_to_ptrdecay, %69 : !cir.ptr<!cir.array<!s8i x 13>>), !cir.ptr<!s8i> loc(#loc267)
    cir.call @printLine(%70) : (!cir.ptr<!s8i>) -> () loc(#loc268)
    cir.br ^bb27 loc(#loc258)
  ^bb27:  // 2 preds: ^bb25, ^bb26
    cir.br ^bb28 loc(#loc258)
  ^bb28:  // pred: ^bb27
    cir.br ^bb7 loc(#loc197)
  ^bb29:  // 5 preds: ^bb7, ^bb10, ^bb14, ^bb18, ^bb22
    cir.br ^bb30 loc(#loc197)
  ^bb30:  // pred: ^bb29
    cir.br ^bb31 loc(#loc394)
  ^bb31:  // pred: ^bb30
    %71 = cir.load %1 : !cir.ptr<!s32i>, !s32i loc(#loc271)
    %72 = cir.const #cir.int<1> : !s32i loc(#loc272)
    %73 = cir.unary(minus, %72) : !s32i, !s32i loc(#loc272)
    %74 = cir.cmp(ne, %71, %73) : !s32i, !cir.bool loc(#loc395)
    cir.brcond %74 ^bb32, ^bb33 loc(#loc396)
  ^bb32:  // pred: ^bb31
    %75 = cir.load %1 : !cir.ptr<!s32i>, !s32i loc(#loc274)
    %76 = cir.call @close(%75) : (!s32i) -> !s32i loc(#loc275)
    cir.br ^bb33 loc(#loc270)
  ^bb33:  // 2 preds: ^bb31, ^bb32
    cir.br ^bb34 loc(#loc270)
  ^bb34:  // pred: ^bb33
    cir.br ^bb35 loc(#loc397)
  ^bb35:  // pred: ^bb34
    %77 = cir.load %2 : !cir.ptr<!s32i>, !s32i loc(#loc278)
    %78 = cir.const #cir.int<1> : !s32i loc(#loc279)
    %79 = cir.unary(minus, %78) : !s32i, !s32i loc(#loc279)
    %80 = cir.cmp(ne, %77, %79) : !s32i, !cir.bool loc(#loc398)
    cir.brcond %80 ^bb36, ^bb37 loc(#loc399)
  ^bb36:  // pred: ^bb35
    %81 = cir.load %2 : !cir.ptr<!s32i>, !s32i loc(#loc281)
    %82 = cir.call @close(%81) : (!s32i) -> !s32i loc(#loc282)
    cir.br ^bb37 loc(#loc277)
  ^bb37:  // 2 preds: ^bb35, ^bb36
    cir.br ^bb38 loc(#loc277)
  ^bb38:  // pred: ^bb37
    cir.br ^bb39 loc(#loc195)
  ^bb39:  // pred: ^bb38
    cir.br ^bb40 loc(#loc187)
  ^bb40:  // pred: ^bb39
    cir.br ^bb41 loc(#loc187)
  ^bb41:  // pred: ^bb40
    %83 = cir.load %3 : !cir.ptr<!s32i>, !s32i loc(#loc283)
    %84 = cir.unary(inc, %83) : !s32i, !s32i loc(#loc284)
    cir.store %84, %3 : !s32i, !cir.ptr<!s32i> loc(#loc400)
    cir.br ^bb2 loc(#loc362)
  ^bb42:  // pred: ^bb2
    cir.br ^bb43 loc(#loc187)
  ^bb43:  // pred: ^bb42
    cir.return loc(#loc177)
  } loc(#loc357)
} loc(#loc)
#loc = loc("/home/ladisgin/git_proj/juliet-c/testcases/CWE510_Trapdoor/CWE510_Trapdoor__ip_based_logic_17.c":0:0)
#loc1 = loc("/usr/include/sys/socket.h":102:1)
#loc2 = loc("/usr/include/sys/socket.h":102:62)
#loc3 = loc("/usr/include/netinet/in.h":404:1)
#loc4 = loc("/usr/include/netinet/in.h":405:40)
#loc5 = loc("/usr/include/sys/socket.h":112:1)
#loc6 = loc("/usr/include/sys/socket.h":113:6)
#loc7 = loc("/usr/include/sys/socket.h":296:1)
#loc8 = loc("/usr/include/sys/socket.h":296:39)
#loc9 = loc("/usr/include/sys/socket.h":306:1)
#loc10 = loc("/usr/include/sys/socket.h":307:38)
#loc11 = loc("/usr/include/sys/socket.h":116:1)
#loc12 = loc("/usr/include/sys/socket.h":117:33)
#loc13 = loc("/usr/include/string.h":156:1)
#loc14 = loc("/usr/include/string.h":157:33)
#loc15 = loc("CWE510_Trapdoor__ip_based_logic_17.c":91:28)
#loc16 = loc("/usr/include/arpa/inet.h":53:1)
#loc17 = loc("/usr/include/arpa/inet.h":53:46)
#loc18 = loc("/usr/include/sys/socket.h":138:1)
#loc19 = loc("/usr/include/sys/socket.h":138:74)
#loc20 = loc("CWE510_Trapdoor__ip_based_logic_17.c":93:44)
#loc21 = loc("CWE510_Trapdoor__ip_based_logic_17.c":101:44)
#loc22 = loc("../../testcasesupport/std_testcase_io.h":14:1)
#loc23 = loc("../../testcasesupport/std_testcase_io.h":14:33)
#loc24 = loc("CWE510_Trapdoor__ip_based_logic_17.c":103:35)
#loc25 = loc("/usr/include/unistd.h":358:1)
#loc26 = loc("/usr/include/unistd.h":358:27)
#loc27 = loc("CWE510_Trapdoor__ip_based_logic_17.c":41:1)
#loc28 = loc("CWE510_Trapdoor__ip_based_logic_17.c":124:1)
#loc29 = loc("CWE510_Trapdoor__ip_based_logic_17.c":51:13)
#loc30 = loc("CWE510_Trapdoor__ip_based_logic_17.c":51:32)
#loc31 = loc("CWE510_Trapdoor__ip_based_logic_17.c":51:41)
#loc32 = loc("CWE510_Trapdoor__ip_based_logic_17.c":52:13)
#loc33 = loc("CWE510_Trapdoor__ip_based_logic_17.c":52:56)
#loc34 = loc("CWE510_Trapdoor__ip_based_logic_17.c":53:13)
#loc35 = loc("CWE510_Trapdoor__ip_based_logic_17.c":53:35)
#loc36 = loc("CWE510_Trapdoor__ip_based_logic_17.c":54:13)
#loc37 = loc("CWE510_Trapdoor__ip_based_logic_17.c":54:35)
#loc38 = loc("CWE510_Trapdoor__ip_based_logic_17.c":43:5)
#loc39 = loc("CWE510_Trapdoor__ip_based_logic_17.c":43:9)
#loc40 = loc("CWE510_Trapdoor__ip_based_logic_17.c":44:5)
#loc41 = loc("CWE510_Trapdoor__ip_based_logic_17.c":123:5)
#loc42 = loc("CWE510_Trapdoor__ip_based_logic_17.c":44:13)
#loc43 = loc("CWE510_Trapdoor__ip_based_logic_17.c":44:9)
#loc44 = loc("CWE510_Trapdoor__ip_based_logic_17.c":44:16)
#loc45 = loc("CWE510_Trapdoor__ip_based_logic_17.c":44:20)
#loc46 = loc("CWE510_Trapdoor__ip_based_logic_17.c":44:18)
#loc47 = loc("CWE510_Trapdoor__ip_based_logic_17.c":45:5)
#loc48 = loc("CWE510_Trapdoor__ip_based_logic_17.c":46:9)
#loc49 = loc("CWE510_Trapdoor__ip_based_logic_17.c":122:9)
#loc50 = loc("CWE510_Trapdoor__ip_based_logic_17.c":52:36)
#loc51 = loc("CWE510_Trapdoor__ip_based_logic_17.c":55:13)
#loc52 = loc("CWE510_Trapdoor__ip_based_logic_17.c":107:21)
#loc53 = loc("CWE510_Trapdoor__ip_based_logic_17.c":107:20)
#loc54 = loc("CWE510_Trapdoor__ip_based_logic_17.c":64:39)
#loc55 = loc("CWE510_Trapdoor__ip_based_logic_17.c":64:48)
#loc56 = loc("CWE510_Trapdoor__ip_based_logic_17.c":64:61)
#loc57 = loc("CWE510_Trapdoor__ip_based_logic_17.c":64:32)
#loc58 = loc("CWE510_Trapdoor__ip_based_logic_17.c":64:17)
#loc59 = loc("CWE510_Trapdoor__ip_based_logic_17.c":64:72)
#loc60 = loc("CWE510_Trapdoor__ip_based_logic_17.c":65:17)
#loc61 = loc("CWE510_Trapdoor__ip_based_logic_17.c":68:17)
#loc62 = loc("CWE510_Trapdoor__ip_based_logic_17.c":65:21)
#loc63 = loc("CWE510_Trapdoor__ip_based_logic_17.c":65:37)
#loc64 = loc("CWE510_Trapdoor__ip_based_logic_17.c":66:17)
#loc65 = loc("CWE510_Trapdoor__ip_based_logic_17.c":67:21)
#loc66 = loc("CWE510_Trapdoor__ip_based_logic_17.c":69:24)
#loc67 = loc("CWE510_Trapdoor__ip_based_logic_17.c":69:25)
#loc68 = loc("CWE510_Trapdoor__ip_based_logic_17.c":69:34)
#loc69 = loc("CWE510_Trapdoor__ip_based_logic_17.c":69:37)
#loc70 = loc("CWE510_Trapdoor__ip_based_logic_17.c":69:51)
#loc71 = loc("CWE510_Trapdoor__ip_based_logic_17.c":69:17)
#loc72 = loc("CWE510_Trapdoor__ip_based_logic_17.c":69:52)
#loc73 = loc("CWE510_Trapdoor__ip_based_logic_17.c":70:38)
#loc74 = loc("/usr/include/netinet/in.h":249:5)
#loc75 = loc("CWE510_Trapdoor__ip_based_logic_17.c":70:17)
#loc76 = loc("CWE510_Trapdoor__ip_based_logic_17.c":71:43)
#loc77 = loc("/usr/include/netinet/in.h":251:20)
#loc78 = loc("/usr/include/netinet/in.h":33:15)
#loc79 = loc("CWE510_Trapdoor__ip_based_logic_17.c":71:17)
#loc80 = loc("CWE510_Trapdoor__ip_based_logic_17.c":72:42)
#loc81 = loc("CWE510_Trapdoor__ip_based_logic_17.c":72:36)
#loc82 = loc("/usr/include/netinet/in.h":250:15)
#loc83 = loc("CWE510_Trapdoor__ip_based_logic_17.c":72:17)
#loc84 = loc("CWE510_Trapdoor__ip_based_logic_17.c":72:47)
#loc85 = loc("CWE510_Trapdoor__ip_based_logic_17.c":73:17)
#loc86 = loc("CWE510_Trapdoor__ip_based_logic_17.c":76:17)
#loc87 = loc("CWE510_Trapdoor__ip_based_logic_17.c":73:26)
#loc88 = loc("CWE510_Trapdoor__ip_based_logic_17.c":73:58)
#loc89 = loc("CWE510_Trapdoor__ip_based_logic_17.c":73:59)
#loc90 = loc("CWE510_Trapdoor__ip_based_logic_17.c":73:68)
#loc91 = loc("CWE510_Trapdoor__ip_based_logic_17.c":73:82)
#loc92 = loc("CWE510_Trapdoor__ip_based_logic_17.c":73:21)
#loc93 = loc("CWE510_Trapdoor__ip_based_logic_17.c":73:88)
#loc94 = loc("CWE510_Trapdoor__ip_based_logic_17.c":74:17)
#loc95 = loc("CWE510_Trapdoor__ip_based_logic_17.c":75:21)
#loc96 = loc("CWE510_Trapdoor__ip_based_logic_17.c":77:17)
#loc97 = loc("CWE510_Trapdoor__ip_based_logic_17.c":80:17)
#loc98 = loc("CWE510_Trapdoor__ip_based_logic_17.c":77:28)
#loc99 = loc("CWE510_Trapdoor__ip_based_logic_17.c":77:42)
#loc100 = loc("CWE510_Trapdoor__ip_based_logic_17.c":77:21)
#loc101 = loc("CWE510_Trapdoor__ip_based_logic_17.c":77:48)
#loc102 = loc("CWE510_Trapdoor__ip_based_logic_17.c":78:17)
#loc103 = loc("CWE510_Trapdoor__ip_based_logic_17.c":79:21)
#loc104 = loc("CWE510_Trapdoor__ip_based_logic_17.c":81:39)
#loc105 = loc("CWE510_Trapdoor__ip_based_logic_17.c":81:53)
#loc106 = loc("CWE510_Trapdoor__ip_based_logic_17.c":81:59)
#loc107 = loc("CWE510_Trapdoor__ip_based_logic_17.c":81:32)
#loc108 = loc("CWE510_Trapdoor__ip_based_logic_17.c":81:17)
#loc109 = loc("CWE510_Trapdoor__ip_based_logic_17.c":81:63)
#loc110 = loc("CWE510_Trapdoor__ip_based_logic_17.c":82:17)
#loc111 = loc("CWE510_Trapdoor__ip_based_logic_17.c":85:17)
#loc112 = loc("CWE510_Trapdoor__ip_based_logic_17.c":82:21)
#loc113 = loc("CWE510_Trapdoor__ip_based_logic_17.c":82:37)
#loc114 = loc("CWE510_Trapdoor__ip_based_logic_17.c":83:17)
#loc115 = loc("CWE510_Trapdoor__ip_based_logic_17.c":84:21)
#loc116 = loc("CWE510_Trapdoor__ip_based_logic_17.c":86:17)
#loc117 = loc("CWE510_Trapdoor__ip_based_logic_17.c":89:17)
#loc118 = loc("CWE510_Trapdoor__ip_based_logic_17.c":86:33)
#loc119 = loc("CWE510_Trapdoor__ip_based_logic_17.c":86:66)
#loc120 = loc("CWE510_Trapdoor__ip_based_logic_17.c":86:67)
#loc121 = loc("CWE510_Trapdoor__ip_based_logic_17.c":86:82)
#loc122 = loc("CWE510_Trapdoor__ip_based_logic_17.c":86:83)
#loc123 = loc("CWE510_Trapdoor__ip_based_logic_17.c":86:21)
#loc124 = loc("CWE510_Trapdoor__ip_based_logic_17.c":86:105)
#loc125 = loc("CWE510_Trapdoor__ip_based_logic_17.c":86:104)
#loc126 = loc("CWE510_Trapdoor__ip_based_logic_17.c":87:17)
#loc127 = loc("CWE510_Trapdoor__ip_based_logic_17.c":88:21)
#loc128 = loc("CWE510_Trapdoor__ip_based_logic_17.c":91:17)
#loc129 = loc("CWE510_Trapdoor__ip_based_logic_17.c":105:17)
#loc130 = loc("CWE510_Trapdoor__ip_based_logic_17.c":91:21)
#loc131 = loc("CWE510_Trapdoor__ip_based_logic_17.c":91:46)
#loc132 = loc("CWE510_Trapdoor__ip_based_logic_17.c":91:84)
#loc133 = loc("CWE510_Trapdoor__ip_based_logic_17.c":92:17)
#loc134 = loc("CWE510_Trapdoor__ip_based_logic_17.c":98:17)
#loc135 = loc("CWE510_Trapdoor__ip_based_logic_17.c":100:17)
#loc136 = loc("CWE510_Trapdoor__ip_based_logic_17.c":93:21)
#loc137 = loc("CWE510_Trapdoor__ip_based_logic_17.c":97:21)
#loc138 = loc("CWE510_Trapdoor__ip_based_logic_17.c":93:30)
#loc139 = loc("CWE510_Trapdoor__ip_based_logic_17.c":93:59)
#loc140 = loc("CWE510_Trapdoor__ip_based_logic_17.c":93:79)
#loc141 = loc("CWE510_Trapdoor__ip_based_logic_17.c":93:82)
#loc142 = loc("CWE510_Trapdoor__ip_based_logic_17.c":93:25)
#loc143 = loc("CWE510_Trapdoor__ip_based_logic_17.c":93:89)
#loc144 = loc("CWE510_Trapdoor__ip_based_logic_17.c":94:21)
#loc145 = loc("CWE510_Trapdoor__ip_based_logic_17.c":96:25)
#loc146 = loc("CWE510_Trapdoor__ip_based_logic_17.c":101:21)
#loc147 = loc("CWE510_Trapdoor__ip_based_logic_17.c":104:21)
#loc148 = loc("CWE510_Trapdoor__ip_based_logic_17.c":101:30)
#loc149 = loc("CWE510_Trapdoor__ip_based_logic_17.c":101:61)
#loc150 = loc("CWE510_Trapdoor__ip_based_logic_17.c":101:83)
#loc151 = loc("CWE510_Trapdoor__ip_based_logic_17.c":101:86)
#loc152 = loc("CWE510_Trapdoor__ip_based_logic_17.c":101:25)
#loc153 = loc("CWE510_Trapdoor__ip_based_logic_17.c":101:92)
#loc154 = loc("CWE510_Trapdoor__ip_based_logic_17.c":102:21)
#loc155 = loc("CWE510_Trapdoor__ip_based_logic_17.c":103:25)
#loc156 = loc("CWE510_Trapdoor__ip_based_logic_17.c":108:13)
#loc157 = loc("CWE510_Trapdoor__ip_based_logic_17.c":111:13)
#loc158 = loc("CWE510_Trapdoor__ip_based_logic_17.c":108:17)
#loc159 = loc("CWE510_Trapdoor__ip_based_logic_17.c":108:33)
#loc160 = loc("CWE510_Trapdoor__ip_based_logic_17.c":109:13)
#loc161 = loc("CWE510_Trapdoor__ip_based_logic_17.c":110:30)
#loc162 = loc("CWE510_Trapdoor__ip_based_logic_17.c":110:17)
#loc163 = loc("CWE510_Trapdoor__ip_based_logic_17.c":112:13)
#loc164 = loc("CWE510_Trapdoor__ip_based_logic_17.c":115:13)
#loc165 = loc("CWE510_Trapdoor__ip_based_logic_17.c":112:17)
#loc166 = loc("CWE510_Trapdoor__ip_based_logic_17.c":112:33)
#loc167 = loc("CWE510_Trapdoor__ip_based_logic_17.c":113:13)
#loc168 = loc("CWE510_Trapdoor__ip_based_logic_17.c":114:30)
#loc169 = loc("CWE510_Trapdoor__ip_based_logic_17.c":114:17)
#loc170 = loc("CWE510_Trapdoor__ip_based_logic_17.c":44:24)
#loc171 = loc("CWE510_Trapdoor__ip_based_logic_17.c":44:23)
#loc172 = loc("CWE510_Trapdoor__ip_based_logic_17.c":200:1)
#loc173 = loc("CWE510_Trapdoor__ip_based_logic_17.c":203:1)
#loc174 = loc("CWE510_Trapdoor__ip_based_logic_17.c":202:5)
#loc175 = loc("CWE510_Trapdoor__ip_based_logic_17.c":202:11)
#loc176 = loc("CWE510_Trapdoor__ip_based_logic_17.c":131:1)
#loc177 = loc("CWE510_Trapdoor__ip_based_logic_17.c":198:1)
#loc178 = loc("CWE510_Trapdoor__ip_based_logic_17.c":141:13)
#loc179 = loc("CWE510_Trapdoor__ip_based_logic_17.c":141:32)
#loc180 = loc("CWE510_Trapdoor__ip_based_logic_17.c":142:13)
#loc181 = loc("CWE510_Trapdoor__ip_based_logic_17.c":142:35)
#loc182 = loc("CWE510_Trapdoor__ip_based_logic_17.c":143:13)
#loc183 = loc("CWE510_Trapdoor__ip_based_logic_17.c":143:35)
#loc184 = loc("CWE510_Trapdoor__ip_based_logic_17.c":133:5)
#loc185 = loc("CWE510_Trapdoor__ip_based_logic_17.c":133:9)
#loc186 = loc("CWE510_Trapdoor__ip_based_logic_17.c":134:5)
#loc187 = loc("CWE510_Trapdoor__ip_based_logic_17.c":197:5)
#loc188 = loc("CWE510_Trapdoor__ip_based_logic_17.c":134:13)
#loc189 = loc("CWE510_Trapdoor__ip_based_logic_17.c":134:9)
#loc190 = loc("CWE510_Trapdoor__ip_based_logic_17.c":134:16)
#loc191 = loc("CWE510_Trapdoor__ip_based_logic_17.c":134:20)
#loc192 = loc("CWE510_Trapdoor__ip_based_logic_17.c":134:18)
#loc193 = loc("CWE510_Trapdoor__ip_based_logic_17.c":135:5)
#loc194 = loc("CWE510_Trapdoor__ip_based_logic_17.c":136:9)
#loc195 = loc("CWE510_Trapdoor__ip_based_logic_17.c":196:9)
#loc196 = loc("CWE510_Trapdoor__ip_based_logic_17.c":144:13)
#loc197 = loc("CWE510_Trapdoor__ip_based_logic_17.c":181:21)
#loc198 = loc("CWE510_Trapdoor__ip_based_logic_17.c":181:20)
#loc199 = loc("CWE510_Trapdoor__ip_based_logic_17.c":153:39)
#loc200 = loc("CWE510_Trapdoor__ip_based_logic_17.c":153:48)
#loc201 = loc("CWE510_Trapdoor__ip_based_logic_17.c":153:61)
#loc202 = loc("CWE510_Trapdoor__ip_based_logic_17.c":153:32)
#loc203 = loc("CWE510_Trapdoor__ip_based_logic_17.c":153:17)
#loc204 = loc("CWE510_Trapdoor__ip_based_logic_17.c":153:72)
#loc205 = loc("CWE510_Trapdoor__ip_based_logic_17.c":154:17)
#loc206 = loc("CWE510_Trapdoor__ip_based_logic_17.c":157:17)
#loc207 = loc("CWE510_Trapdoor__ip_based_logic_17.c":154:21)
#loc208 = loc("CWE510_Trapdoor__ip_based_logic_17.c":154:37)
#loc209 = loc("CWE510_Trapdoor__ip_based_logic_17.c":155:17)
#loc210 = loc("CWE510_Trapdoor__ip_based_logic_17.c":156:21)
#loc211 = loc("CWE510_Trapdoor__ip_based_logic_17.c":158:24)
#loc212 = loc("CWE510_Trapdoor__ip_based_logic_17.c":158:25)
#loc213 = loc("CWE510_Trapdoor__ip_based_logic_17.c":158:34)
#loc214 = loc("CWE510_Trapdoor__ip_based_logic_17.c":158:37)
#loc215 = loc("CWE510_Trapdoor__ip_based_logic_17.c":158:51)
#loc216 = loc("CWE510_Trapdoor__ip_based_logic_17.c":158:17)
#loc217 = loc("CWE510_Trapdoor__ip_based_logic_17.c":158:52)
#loc218 = loc("CWE510_Trapdoor__ip_based_logic_17.c":159:38)
#loc219 = loc("CWE510_Trapdoor__ip_based_logic_17.c":159:17)
#loc220 = loc("CWE510_Trapdoor__ip_based_logic_17.c":160:43)
#loc221 = loc("CWE510_Trapdoor__ip_based_logic_17.c":160:17)
#loc222 = loc("CWE510_Trapdoor__ip_based_logic_17.c":161:42)
#loc223 = loc("CWE510_Trapdoor__ip_based_logic_17.c":161:36)
#loc224 = loc("CWE510_Trapdoor__ip_based_logic_17.c":161:17)
#loc225 = loc("CWE510_Trapdoor__ip_based_logic_17.c":161:47)
#loc226 = loc("CWE510_Trapdoor__ip_based_logic_17.c":162:17)
#loc227 = loc("CWE510_Trapdoor__ip_based_logic_17.c":165:17)
#loc228 = loc("CWE510_Trapdoor__ip_based_logic_17.c":162:26)
#loc229 = loc("CWE510_Trapdoor__ip_based_logic_17.c":162:58)
#loc230 = loc("CWE510_Trapdoor__ip_based_logic_17.c":162:59)
#loc231 = loc("CWE510_Trapdoor__ip_based_logic_17.c":162:68)
#loc232 = loc("CWE510_Trapdoor__ip_based_logic_17.c":162:82)
#loc233 = loc("CWE510_Trapdoor__ip_based_logic_17.c":162:21)
#loc234 = loc("CWE510_Trapdoor__ip_based_logic_17.c":162:88)
#loc235 = loc("CWE510_Trapdoor__ip_based_logic_17.c":163:17)
#loc236 = loc("CWE510_Trapdoor__ip_based_logic_17.c":164:21)
#loc237 = loc("CWE510_Trapdoor__ip_based_logic_17.c":166:17)
#loc238 = loc("CWE510_Trapdoor__ip_based_logic_17.c":169:17)
#loc239 = loc("CWE510_Trapdoor__ip_based_logic_17.c":166:28)
#loc240 = loc("CWE510_Trapdoor__ip_based_logic_17.c":166:42)
#loc241 = loc("CWE510_Trapdoor__ip_based_logic_17.c":166:21)
#loc242 = loc("CWE510_Trapdoor__ip_based_logic_17.c":166:48)
#loc243 = loc("CWE510_Trapdoor__ip_based_logic_17.c":167:17)
#loc244 = loc("CWE510_Trapdoor__ip_based_logic_17.c":168:21)
#loc245 = loc("CWE510_Trapdoor__ip_based_logic_17.c":170:39)
#loc246 = loc("CWE510_Trapdoor__ip_based_logic_17.c":170:53)
#loc247 = loc("CWE510_Trapdoor__ip_based_logic_17.c":170:59)
#loc248 = loc("CWE510_Trapdoor__ip_based_logic_17.c":170:32)
#loc249 = loc("CWE510_Trapdoor__ip_based_logic_17.c":170:17)
#loc250 = loc("CWE510_Trapdoor__ip_based_logic_17.c":170:63)
#loc251 = loc("CWE510_Trapdoor__ip_based_logic_17.c":171:17)
#loc252 = loc("CWE510_Trapdoor__ip_based_logic_17.c":174:17)
#loc253 = loc("CWE510_Trapdoor__ip_based_logic_17.c":171:21)
#loc254 = loc("CWE510_Trapdoor__ip_based_logic_17.c":171:37)
#loc255 = loc("CWE510_Trapdoor__ip_based_logic_17.c":172:17)
#loc256 = loc("CWE510_Trapdoor__ip_based_logic_17.c":173:21)
#loc257 = loc("CWE510_Trapdoor__ip_based_logic_17.c":176:17)
#loc258 = loc("CWE510_Trapdoor__ip_based_logic_17.c":179:17)
#loc259 = loc("CWE510_Trapdoor__ip_based_logic_17.c":176:26)
#loc260 = loc("CWE510_Trapdoor__ip_based_logic_17.c":176:40)
#loc261 = loc("CWE510_Trapdoor__ip_based_logic_17.c":176:57)
#loc262 = loc("CWE510_Trapdoor__ip_based_logic_17.c":176:79)
#loc263 = loc("CWE510_Trapdoor__ip_based_logic_17.c":176:82)
#loc264 = loc("CWE510_Trapdoor__ip_based_logic_17.c":176:21)
#loc265 = loc("CWE510_Trapdoor__ip_based_logic_17.c":176:88)
#loc266 = loc("CWE510_Trapdoor__ip_based_logic_17.c":177:17)
#loc267 = loc("CWE510_Trapdoor__ip_based_logic_17.c":178:31)
#loc268 = loc("CWE510_Trapdoor__ip_based_logic_17.c":178:21)
#loc269 = loc("CWE510_Trapdoor__ip_based_logic_17.c":182:13)
#loc270 = loc("CWE510_Trapdoor__ip_based_logic_17.c":185:13)
#loc271 = loc("CWE510_Trapdoor__ip_based_logic_17.c":182:17)
#loc272 = loc("CWE510_Trapdoor__ip_based_logic_17.c":182:33)
#loc273 = loc("CWE510_Trapdoor__ip_based_logic_17.c":183:13)
#loc274 = loc("CWE510_Trapdoor__ip_based_logic_17.c":184:30)
#loc275 = loc("CWE510_Trapdoor__ip_based_logic_17.c":184:17)
#loc276 = loc("CWE510_Trapdoor__ip_based_logic_17.c":186:13)
#loc277 = loc("CWE510_Trapdoor__ip_based_logic_17.c":189:13)
#loc278 = loc("CWE510_Trapdoor__ip_based_logic_17.c":186:17)
#loc279 = loc("CWE510_Trapdoor__ip_based_logic_17.c":186:33)
#loc280 = loc("CWE510_Trapdoor__ip_based_logic_17.c":187:13)
#loc281 = loc("CWE510_Trapdoor__ip_based_logic_17.c":188:30)
#loc282 = loc("CWE510_Trapdoor__ip_based_logic_17.c":188:17)
#loc283 = loc("CWE510_Trapdoor__ip_based_logic_17.c":134:24)
#loc284 = loc("CWE510_Trapdoor__ip_based_logic_17.c":134:23)
#loc285 = loc(fused[#loc1, #loc2])
#loc286 = loc(fused[#loc3, #loc4])
#loc287 = loc(fused[#loc5, #loc6])
#loc288 = loc(fused[#loc7, #loc8])
#loc289 = loc(fused[#loc9, #loc10])
#loc290 = loc(fused[#loc11, #loc12])
#loc291 = loc(fused[#loc13, #loc14])
#loc292 = loc(fused[#loc16, #loc17])
#loc293 = loc(fused[#loc18, #loc19])
#loc294 = loc(fused[#loc22, #loc23])
#loc295 = loc(fused[#loc25, #loc26])
#loc296 = loc(fused[#loc27, #loc28])
#loc297 = loc(fused[#loc29, #loc30])
#loc298 = loc(fused[#loc29, #loc31])
#loc299 = loc(fused[#loc32, #loc33])
#loc300 = loc(fused[#loc34, #loc35])
#loc301 = loc(fused[#loc36, #loc37])
#loc302 = loc(fused[#loc38, #loc39])
#loc303 = loc(fused[#loc40, #loc41])
#loc304 = loc(fused[#loc43, #loc42])
#loc305 = loc(fused[#loc44, #loc45])
#loc306 = loc(fused[#loc47, #loc41])
#loc307 = loc(fused[#loc48, #loc49])
#loc308 = loc(fused[#loc50, #loc33])
#loc309 = loc(fused[#loc51, #loc52])
#loc310 = loc(fused[#loc58, #loc59])
#loc311 = loc(fused[#loc60, #loc61])
#loc312 = loc(fused[#loc62, #loc63])
#loc313 = loc(fused[#loc64, #loc61])
#loc314 = loc(fused[#loc66, #loc67])
#loc315 = loc(fused[#loc69, #loc70])
#loc316 = loc(fused[#loc71, #loc72])
#loc317 = loc(fused[#loc75, #loc73])
#loc318 = loc(fused[#loc79, #loc76])
#loc319 = loc(fused[#loc83, #loc84])
#loc320 = loc(fused[#loc85, #loc86])
#loc321 = loc(fused[#loc88, #loc89])
#loc322 = loc(fused[#loc90, #loc91])
#loc323 = loc(fused[#loc92, #loc93])
#loc324 = loc(fused[#loc94, #loc86])
#loc325 = loc(fused[#loc96, #loc97])
#loc326 = loc(fused[#loc100, #loc101])
#loc327 = loc(fused[#loc102, #loc97])
#loc328 = loc(fused[#loc108, #loc109])
#loc329 = loc(fused[#loc110, #loc111])
#loc330 = loc(fused[#loc112, #loc113])
#loc331 = loc(fused[#loc114, #loc111])
#loc332 = loc(fused[#loc116, #loc117])
#loc333 = loc(fused[#loc119, #loc120])
#loc334 = loc(fused[#loc121, #loc122])
#loc335 = loc(fused[#loc123, #loc124])
#loc336 = loc(fused[#loc126, #loc117])
#loc337 = loc(fused[#loc128, #loc129])
#loc338 = loc(fused[#loc130, #loc132])
#loc339 = loc(fused[#loc133, #loc134, #loc135, #loc129])
#loc340 = loc(fused[#loc136, #loc137])
#loc341 = loc(fused[#loc139, #loc140])
#loc342 = loc(fused[#loc142, #loc143])
#loc343 = loc(fused[#loc144, #loc137])
#loc344 = loc(fused[#loc146, #loc147])
#loc345 = loc(fused[#loc149, #loc150])
#loc346 = loc(fused[#loc152, #loc153])
#loc347 = loc(fused[#loc154, #loc147])
#loc348 = loc(fused[#loc156, #loc157])
#loc349 = loc(fused[#loc158, #loc159])
#loc350 = loc(fused[#loc160, #loc157])
#loc351 = loc(fused[#loc163, #loc164])
#loc352 = loc(fused[#loc165, #loc166])
#loc353 = loc(fused[#loc167, #loc164])
#loc354 = loc(fused[#loc171, #loc170])
#loc355 = loc(fused[#loc172, #loc173])
#loc356 = loc(fused[#loc174, #loc175])
#loc357 = loc(fused[#loc176, #loc177])
#loc358 = loc(fused[#loc178, #loc179])
#loc359 = loc(fused[#loc180, #loc181])
#loc360 = loc(fused[#loc182, #loc183])
#loc361 = loc(fused[#loc184, #loc185])
#loc362 = loc(fused[#loc186, #loc187])
#loc363 = loc(fused[#loc189, #loc188])
#loc364 = loc(fused[#loc190, #loc191])
#loc365 = loc(fused[#loc193, #loc187])
#loc366 = loc(fused[#loc194, #loc195])
#loc367 = loc(fused[#loc196, #loc197])
#loc368 = loc(fused[#loc203, #loc204])
#loc369 = loc(fused[#loc205, #loc206])
#loc370 = loc(fused[#loc207, #loc208])
#loc371 = loc(fused[#loc209, #loc206])
#loc372 = loc(fused[#loc211, #loc212])
#loc373 = loc(fused[#loc214, #loc215])
#loc374 = loc(fused[#loc216, #loc217])
#loc375 = loc(fused[#loc219, #loc218])
#loc376 = loc(fused[#loc221, #loc220])
#loc377 = loc(fused[#loc224, #loc225])
#loc378 = loc(fused[#loc226, #loc227])
#loc379 = loc(fused[#loc229, #loc230])
#loc380 = loc(fused[#loc231, #loc232])
#loc381 = loc(fused[#loc233, #loc234])
#loc382 = loc(fused[#loc235, #loc227])
#loc383 = loc(fused[#loc237, #loc238])
#loc384 = loc(fused[#loc241, #loc242])
#loc385 = loc(fused[#loc243, #loc238])
#loc386 = loc(fused[#loc249, #loc250])
#loc387 = loc(fused[#loc251, #loc252])
#loc388 = loc(fused[#loc253, #loc254])
#loc389 = loc(fused[#loc255, #loc252])
#loc390 = loc(fused[#loc257, #loc258])
#loc391 = loc(fused[#loc261, #loc262])
#loc392 = loc(fused[#loc264, #loc265])
#loc393 = loc(fused[#loc266, #loc258])
#loc394 = loc(fused[#loc269, #loc270])
#loc395 = loc(fused[#loc271, #loc272])
#loc396 = loc(fused[#loc273, #loc270])
#loc397 = loc(fused[#loc276, #loc277])
#loc398 = loc(fused[#loc278, #loc279])
#loc399 = loc(fused[#loc280, #loc277])
#loc400 = loc(fused[#loc284, #loc283])
