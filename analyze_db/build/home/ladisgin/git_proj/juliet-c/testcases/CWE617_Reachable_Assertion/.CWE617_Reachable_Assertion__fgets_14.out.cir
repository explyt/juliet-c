!s32i = !cir.int<s, 32>
!s64i = !cir.int<s, 64>
!s8i = !cir.int<s, 8>
!ty__IO_codecvt = !cir.struct<struct "_IO_codecvt" incomplete>
!ty__IO_marker = !cir.struct<struct "_IO_marker" incomplete>
!ty__IO_wide_data = !cir.struct<struct "_IO_wide_data" incomplete>
!u16i = !cir.int<u, 16>
!u32i = !cir.int<u, 32>
!u64i = !cir.int<u, 64>
!void = !cir.void
#fn_attr = #cir<extra({nothrow = #cir.nothrow})>
#fn_attr1 = #cir<extra({inline = #cir.inline<no>, nothrow = #cir.nothrow, optnone = #cir.optnone})>
#loc62 = loc("CWE617_Reachable_Assertion__fgets_14.c":107:10)
#loc63 = loc("CWE617_Reachable_Assertion__fgets_14.c":107:14)
#loc64 = loc("CWE617_Reachable_Assertion__fgets_14.c":107:20)
#loc65 = loc("CWE617_Reachable_Assertion__fgets_14.c":107:32)
#loc140 = loc(fused[#loc62, #loc63])
#loc141 = loc(fused[#loc64, #loc65])
!ty__IO_FILE = !cir.struct<struct "_IO_FILE" {!s32i, !cir.ptr<!s8i>, !cir.ptr<!s8i>, !cir.ptr<!s8i>, !cir.ptr<!s8i>, !cir.ptr<!s8i>, !cir.ptr<!s8i>, !cir.ptr<!s8i>, !cir.ptr<!s8i>, !cir.ptr<!s8i>, !cir.ptr<!s8i>, !cir.ptr<!s8i>, !cir.ptr<!ty__IO_marker>, !cir.ptr<!cir.struct<struct "_IO_FILE">>, !s32i, !s32i, !s64i, !u16i, !s8i, !cir.array<!s8i x 1>, !cir.ptr<!void>, !s64i, !cir.ptr<!ty__IO_codecvt>, !cir.ptr<!ty__IO_wide_data>, !cir.ptr<!cir.struct<struct "_IO_FILE">>, !cir.ptr<!void>, !cir.ptr<!cir.ptr<!cir.struct<struct "_IO_FILE">>>, !s32i, !cir.array<!s8i x 20>} #cir.record.decl.ast>
module @"/home/ladisgin/git_proj/juliet-c/testcases/CWE617_Reachable_Assertion/CWE617_Reachable_Assertion__fgets_14.c" attributes {cir.lang = #cir.lang<c>, cir.sob = #cir.signed_overflow_behavior<undefined>, cir.triple = "x86_64-unknown-linux-gnu", dlti.dl_spec = #dlti.dl_spec<i64 = dense<64> : vector<2xi64>, !llvm.ptr<272> = dense<64> : vector<4xi64>, !llvm.ptr<271> = dense<32> : vector<4xi64>, f80 = dense<128> : vector<2xi64>, i128 = dense<128> : vector<2xi64>, i16 = dense<16> : vector<2xi64>, i8 = dense<8> : vector<2xi64>, !llvm.ptr = dense<64> : vector<4xi64>, i1 = dense<8> : vector<2xi64>, f128 = dense<128> : vector<2xi64>, f16 = dense<16> : vector<2xi64>, !llvm.ptr<270> = dense<32> : vector<4xi64>, f64 = dense<64> : vector<2xi64>, i32 = dense<32> : vector<2xi64>, "dlti.stack_alignment" = 128 : i64, "dlti.endianness" = "little">} {
  cir.global "private" external @globalFive : !s32i {alignment = 4 : i64} loc(#loc116)
  cir.func private @fgets(!cir.ptr<!s8i>, !s32i, !cir.ptr<!ty__IO_FILE>) -> !cir.ptr<!s8i> loc(#loc117)
  cir.global "private" external @stdin : !cir.ptr<!ty__IO_FILE> {alignment = 8 : i64} loc(#loc118)
  cir.func private @atoi(!cir.ptr<!s8i>) -> !s32i extra(#fn_attr) loc(#loc119)
  cir.func private @printLine(!cir.ptr<!s8i>) loc(#loc120)
  cir.global "private" constant cir_private dsolocal @".str" = #cir.const_array<"fgets() failed.\00" : !cir.array<!s8i x 16>> : !cir.array<!s8i x 16> {alignment = 1 : i64} loc(#loc11)
  cir.func private @__assert_fail(!cir.ptr<!s8i>, !cir.ptr<!s8i>, !u32i, !cir.ptr<!s8i>) extra(#fn_attr) loc(#loc121)
  cir.global "private" constant cir_private dsolocal @".str.1" = #cir.const_array<"data > ASSERT_VALUE\00" : !cir.array<!s8i x 20>> : !cir.array<!s8i x 20> {alignment = 1 : i64} loc(#loc14)
  cir.global "private" constant cir_private dsolocal @".str.2" = #cir.const_array<"CWE617_Reachable_Assertion__fgets_14.c\00" : !cir.array<!s8i x 39>> : !cir.array<!s8i x 39> {alignment = 1 : i64} loc(#loc14)
  cir.global "private" constant cir_private dsolocal @".str.3" = #cir.const_array<"void CWE617_Reachable_Assertion__fgets_14_bad()\00" : !cir.array<!s8i x 48>> : !cir.array<!s8i x 48> {alignment = 1 : i64} loc(#loc14)
  cir.func no_proto @CWE617_Reachable_Assertion__fgets_14_bad() extra(#fn_attr1) {
    %0 = cir.alloca !s32i, !cir.ptr<!s32i>, ["data"] {alignment = 4 : i64} loc(#loc123)
    %1 = cir.const #cir.int<1> : !s32i loc(#loc19)
    %2 = cir.unary(minus, %1) : !s32i, !s32i loc(#loc20)
    cir.store %2, %0 : !s32i, !cir.ptr<!s32i> loc(#loc124)
    cir.scope {
      %4 = cir.get_global @globalFive : !cir.ptr<!s32i> loc(#loc116)
      %5 = cir.load %4 : !cir.ptr<!s32i>, !s32i loc(#loc24)
      %6 = cir.const #cir.int<5> : !s32i loc(#loc25)
      %7 = cir.cmp(eq, %5, %6) : !s32i, !cir.bool loc(#loc126)
      cir.if %7 {
        cir.scope {
          %8 = cir.alloca !cir.array<!s8i x 14>, !cir.ptr<!cir.array<!s8i x 14>>, ["inputBuffer"] {alignment = 1 : i64} loc(#loc129)
          %9 = cir.const #cir.zero : !cir.array<!s8i x 14> loc(#loc129)
          cir.store %9, %8 : !cir.array<!s8i x 14>, !cir.ptr<!cir.array<!s8i x 14>> loc(#loc129)
          cir.scope {
            %10 = cir.cast(array_to_ptrdecay, %8 : !cir.ptr<!cir.array<!s8i x 14>>), !cir.ptr<!s8i> loc(#loc33)
            %11 = cir.const #cir.int<3> : !s32i loc(#loc34)
            %12 = cir.cast(integral, %11 : !s32i), !u64i loc(#loc34)
            %13 = cir.const #cir.int<4> : !u64i loc(#loc34)
            %14 = cir.binop(mul, %12, %13) : !u64i loc(#loc34)
            %15 = cir.const #cir.int<2> : !s32i loc(#loc34)
            %16 = cir.cast(integral, %15 : !s32i), !u64i loc(#loc34)
            %17 = cir.binop(add, %14, %16) : !u64i loc(#loc34)
            %18 = cir.cast(integral, %17 : !u64i), !s32i loc(#loc34)
            %19 = cir.get_global @stdin : !cir.ptr<!cir.ptr<!ty__IO_FILE>> loc(#loc118)
            %20 = cir.load %19 : !cir.ptr<!cir.ptr<!ty__IO_FILE>>, !cir.ptr<!ty__IO_FILE> loc(#loc35)
            %21 = cir.call @fgets(%10, %18, %20) : (!cir.ptr<!s8i>, !s32i, !cir.ptr<!ty__IO_FILE>) -> !cir.ptr<!s8i> loc(#loc36)
            %22 = cir.const #cir.ptr<null> : !cir.ptr<!void> loc(#loc37)
            %23 = cir.cast(bitcast, %22 : !cir.ptr<!void>), !cir.ptr<!s8i> loc(#loc37)
            %24 = cir.cmp(ne, %21, %23) : !cir.ptr<!s8i>, !cir.bool loc(#loc131)
            cir.if %24 {
              %25 = cir.cast(array_to_ptrdecay, %8 : !cir.ptr<!cir.array<!s8i x 14>>), !cir.ptr<!s8i> loc(#loc41)
              %26 = cir.call @atoi(%25) : (!cir.ptr<!s8i>) -> !s32i extra(#fn_attr) loc(#loc42)
              cir.store %26, %0 : !s32i, !cir.ptr<!s32i> loc(#loc133)
            } else {
              %25 = cir.get_global @".str" : !cir.ptr<!cir.array<!s8i x 16>> loc(#loc11)
              %26 = cir.cast(array_to_ptrdecay, %25 : !cir.ptr<!cir.array<!s8i x 16>>), !cir.ptr<!s8i> loc(#loc11)
              cir.call @printLine(%26) : (!cir.ptr<!s8i>) -> () loc(#loc45)
            } loc(#loc132)
          } loc(#loc130)
        } loc(#loc128)
      } loc(#loc127)
    } loc(#loc125)
    %3 = cir.const #cir.int<4> : !u64i loc(#loc14)
    cir.scope {
      cir.scope {
        %4 = cir.load %0 : !cir.ptr<!s32i>, !s32i loc(#loc14)
        %5 = cir.const #cir.int<5> : !s32i loc(#loc14)
        %6 = cir.cmp(gt, %4, %5) : !s32i, !cir.bool loc(#loc14)
        cir.if %6 {
        } else {
          %7 = cir.get_global @".str.1" : !cir.ptr<!cir.array<!s8i x 20>> loc(#loc14)
          %8 = cir.cast(array_to_ptrdecay, %7 : !cir.ptr<!cir.array<!s8i x 20>>), !cir.ptr<!s8i> loc(#loc14)
          %9 = cir.get_global @".str.2" : !cir.ptr<!cir.array<!s8i x 39>> loc(#loc14)
          %10 = cir.cast(array_to_ptrdecay, %9 : !cir.ptr<!cir.array<!s8i x 39>>), !cir.ptr<!s8i> loc(#loc14)
          %11 = cir.const #cir.int<49> : !s32i loc(#loc14)
          %12 = cir.cast(integral, %11 : !s32i), !u32i loc(#loc14)
          %13 = cir.get_global @".str.3" : !cir.ptr<!cir.array<!s8i x 48>> loc(#loc14)
          %14 = cir.cast(array_to_ptrdecay, %13 : !cir.ptr<!cir.array<!s8i x 48>>), !cir.ptr<!s8i> loc(#loc14)
          cir.call @__assert_fail(%8, %10, %12, %14) : (!cir.ptr<!s8i>, !cir.ptr<!s8i>, !u32i, !cir.ptr<!s8i>) -> () extra(#fn_attr) loc(#loc14)
        } loc(#loc14)
      } loc(#loc14)
    } loc(#loc14)
    cir.return loc(#loc16)
  } loc(#loc122)
  cir.func no_proto @CWE617_Reachable_Assertion__fgets_14_good() extra(#fn_attr1) {
    %0 = cir.get_global @goodG2B1 : !cir.ptr<!cir.func<!void ()>> loc(#loc135)
    cir.call %0() : (!cir.ptr<!cir.func<!void ()>>) -> () loc(#loc48)
    %1 = cir.get_global @goodG2B2 : !cir.ptr<!cir.func<!void ()>> loc(#loc136)
    cir.call %1() : (!cir.ptr<!cir.func<!void ()>>) -> () loc(#loc50)
    cir.return loc(#loc47)
  } loc(#loc134)
  cir.func private @srand(!u32i) extra(#fn_attr) loc(#loc137)
  cir.func private @time(!cir.ptr<!s64i>) -> !s64i extra(#fn_attr) loc(#loc138)
  cir.global "private" constant cir_private dsolocal @".str.4" = #cir.const_array<"Calling good()...\00" : !cir.array<!s8i x 18>> : !cir.array<!s8i x 18> {alignment = 1 : i64} loc(#loc56)
  cir.global "private" constant cir_private dsolocal @".str.5" = #cir.const_array<"Finished good()\00" : !cir.array<!s8i x 16>> : !cir.array<!s8i x 16> {alignment = 1 : i64} loc(#loc57)
  cir.global "private" constant cir_private dsolocal @".str.6" = #cir.const_array<"Calling bad()...\00" : !cir.array<!s8i x 17>> : !cir.array<!s8i x 17> {alignment = 1 : i64} loc(#loc58)
  cir.global "private" constant cir_private dsolocal @".str.7" = #cir.const_array<"Finished bad()\00" : !cir.array<!s8i x 15>> : !cir.array<!s8i x 15> {alignment = 1 : i64} loc(#loc59)
  cir.func @main(%arg0: !s32i loc(fused[#loc62, #loc63]), %arg1: !cir.ptr<!cir.ptr<!s8i>> loc(fused[#loc64, #loc65])) -> !s32i extra(#fn_attr1) {
    %0 = cir.alloca !s32i, !cir.ptr<!s32i>, ["argc", init] {alignment = 4 : i64} loc(#loc140)
    %1 = cir.alloca !cir.ptr<!cir.ptr<!s8i>>, !cir.ptr<!cir.ptr<!cir.ptr<!s8i>>>, ["argv", init] {alignment = 8 : i64} loc(#loc141)
    %2 = cir.alloca !s32i, !cir.ptr<!s32i>, ["__retval"] {alignment = 4 : i64} loc(#loc61)
    cir.store %arg0, %0 : !s32i, !cir.ptr<!s32i> loc(#loc66)
    cir.store %arg1, %1 : !cir.ptr<!cir.ptr<!s8i>>, !cir.ptr<!cir.ptr<!cir.ptr<!s8i>>> loc(#loc66)
    %3 = cir.const #cir.ptr<null> : !cir.ptr<!s64i> loc(#loc67)
    %4 = cir.call @time(%3) : (!cir.ptr<!s64i>) -> !s64i extra(#fn_attr) loc(#loc68)
    %5 = cir.cast(integral, %4 : !s64i), !u32i loc(#loc68)
    cir.call @srand(%5) : (!u32i) -> () extra(#fn_attr) loc(#loc69)
    %6 = cir.get_global @".str.4" : !cir.ptr<!cir.array<!s8i x 18>> loc(#loc56)
    %7 = cir.cast(array_to_ptrdecay, %6 : !cir.ptr<!cir.array<!s8i x 18>>), !cir.ptr<!s8i> loc(#loc56)
    cir.call @printLine(%7) : (!cir.ptr<!s8i>) -> () loc(#loc70)
    %8 = cir.get_global @CWE617_Reachable_Assertion__fgets_14_good : !cir.ptr<!cir.func<!void ()>> loc(#loc142)
    cir.call @CWE617_Reachable_Assertion__fgets_14_good() : () -> () loc(#loc71)
    %9 = cir.get_global @".str.5" : !cir.ptr<!cir.array<!s8i x 16>> loc(#loc57)
    %10 = cir.cast(array_to_ptrdecay, %9 : !cir.ptr<!cir.array<!s8i x 16>>), !cir.ptr<!s8i> loc(#loc57)
    cir.call @printLine(%10) : (!cir.ptr<!s8i>) -> () loc(#loc73)
    %11 = cir.get_global @".str.6" : !cir.ptr<!cir.array<!s8i x 17>> loc(#loc58)
    %12 = cir.cast(array_to_ptrdecay, %11 : !cir.ptr<!cir.array<!s8i x 17>>), !cir.ptr<!s8i> loc(#loc58)
    cir.call @printLine(%12) : (!cir.ptr<!s8i>) -> () loc(#loc74)
    %13 = cir.get_global @CWE617_Reachable_Assertion__fgets_14_bad : !cir.ptr<!cir.func<!void ()>> loc(#loc143)
    cir.call @CWE617_Reachable_Assertion__fgets_14_bad() : () -> () loc(#loc75)
    %14 = cir.get_global @".str.7" : !cir.ptr<!cir.array<!s8i x 15>> loc(#loc59)
    %15 = cir.cast(array_to_ptrdecay, %14 : !cir.ptr<!cir.array<!s8i x 15>>), !cir.ptr<!s8i> loc(#loc59)
    cir.call @printLine(%15) : (!cir.ptr<!s8i>) -> () loc(#loc77)
    %16 = cir.const #cir.int<0> : !s32i loc(#loc78)
    cir.store %16, %2 : !s32i, !cir.ptr<!s32i> loc(#loc144)
    %17 = cir.load %2 : !cir.ptr<!s32i>, !s32i loc(#loc144)
    cir.return %17 : !s32i loc(#loc144)
  } loc(#loc139)
  cir.global "private" constant cir_private dsolocal @".str.8" = #cir.const_array<"Benign, fixed string\00" : !cir.array<!s8i x 21>> : !cir.array<!s8i x 21> {alignment = 1 : i64} loc(#loc80)
  cir.global "private" constant cir_private dsolocal @".str.9" = #cir.const_array<"void goodG2B1()\00" : !cir.array<!s8i x 16>> : !cir.array<!s8i x 16> {alignment = 1 : i64} loc(#loc81)
  cir.func no_proto internal private @goodG2B1() extra(#fn_attr1) {
    %0 = cir.alloca !s32i, !cir.ptr<!s32i>, ["data"] {alignment = 4 : i64} loc(#loc146)
    %1 = cir.const #cir.int<1> : !s32i loc(#loc86)
    %2 = cir.unary(minus, %1) : !s32i, !s32i loc(#loc87)
    cir.store %2, %0 : !s32i, !cir.ptr<!s32i> loc(#loc147)
    cir.scope {
      %4 = cir.get_global @globalFive : !cir.ptr<!s32i> loc(#loc116)
      %5 = cir.load %4 : !cir.ptr<!s32i>, !s32i loc(#loc91)
      %6 = cir.const #cir.int<5> : !s32i loc(#loc92)
      %7 = cir.cmp(ne, %5, %6) : !s32i, !cir.bool loc(#loc149)
      cir.if %7 {
        %8 = cir.get_global @".str.8" : !cir.ptr<!cir.array<!s8i x 21>> loc(#loc80)
        %9 = cir.cast(array_to_ptrdecay, %8 : !cir.ptr<!cir.array<!s8i x 21>>), !cir.ptr<!s8i> loc(#loc80)
        cir.call @printLine(%9) : (!cir.ptr<!s8i>) -> () loc(#loc96)
      } else {
        %8 = cir.const #cir.int<5> : !s32i loc(#loc97)
        %9 = cir.const #cir.int<1> : !s32i loc(#loc98)
        %10 = cir.binop(add, %8, %9) nsw : !s32i loc(#loc97)
        cir.store %10, %0 : !s32i, !cir.ptr<!s32i> loc(#loc151)
      } loc(#loc150)
    } loc(#loc148)
    %3 = cir.const #cir.int<4> : !u64i loc(#loc81)
    cir.scope {
      cir.scope {
        %4 = cir.load %0 : !cir.ptr<!s32i>, !s32i loc(#loc81)
        %5 = cir.const #cir.int<5> : !s32i loc(#loc81)
        %6 = cir.cmp(gt, %4, %5) : !s32i, !cir.bool loc(#loc81)
        cir.if %6 {
        } else {
          %7 = cir.get_global @".str.1" : !cir.ptr<!cir.array<!s8i x 20>> loc(#loc81)
          %8 = cir.cast(array_to_ptrdecay, %7 : !cir.ptr<!cir.array<!s8i x 20>>), !cir.ptr<!s8i> loc(#loc81)
          %9 = cir.get_global @".str.2" : !cir.ptr<!cir.array<!s8i x 39>> loc(#loc81)
          %10 = cir.cast(array_to_ptrdecay, %9 : !cir.ptr<!cir.array<!s8i x 39>>), !cir.ptr<!s8i> loc(#loc81)
          %11 = cir.const #cir.int<73> : !s32i loc(#loc81)
          %12 = cir.cast(integral, %11 : !s32i), !u32i loc(#loc81)
          %13 = cir.get_global @".str.9" : !cir.ptr<!cir.array<!s8i x 16>> loc(#loc81)
          %14 = cir.cast(array_to_ptrdecay, %13 : !cir.ptr<!cir.array<!s8i x 16>>), !cir.ptr<!s8i> loc(#loc81)
          cir.call @__assert_fail(%8, %10, %12, %14) : (!cir.ptr<!s8i>, !cir.ptr<!s8i>, !u32i, !cir.ptr<!s8i>) -> () extra(#fn_attr) loc(#loc81)
        } loc(#loc81)
      } loc(#loc81)
    } loc(#loc81)
    cir.return loc(#loc83)
  } loc(#loc145)
  cir.global "private" constant cir_private dsolocal @".str.10" = #cir.const_array<"void goodG2B2()\00" : !cir.array<!s8i x 16>> : !cir.array<!s8i x 16> {alignment = 1 : i64} loc(#loc100)
  cir.func no_proto internal private @goodG2B2() extra(#fn_attr1) {
    %0 = cir.alloca !s32i, !cir.ptr<!s32i>, ["data"] {alignment = 4 : i64} loc(#loc153)
    %1 = cir.const #cir.int<1> : !s32i loc(#loc105)
    %2 = cir.unary(minus, %1) : !s32i, !s32i loc(#loc106)
    cir.store %2, %0 : !s32i, !cir.ptr<!s32i> loc(#loc154)
    cir.scope {
      %4 = cir.get_global @globalFive : !cir.ptr<!s32i> loc(#loc116)
      %5 = cir.load %4 : !cir.ptr<!s32i>, !s32i loc(#loc110)
      %6 = cir.const #cir.int<5> : !s32i loc(#loc111)
      %7 = cir.cmp(eq, %5, %6) : !s32i, !cir.bool loc(#loc156)
      cir.if %7 {
        %8 = cir.const #cir.int<5> : !s32i loc(#loc113)
        %9 = cir.const #cir.int<1> : !s32i loc(#loc114)
        %10 = cir.binop(add, %8, %9) nsw : !s32i loc(#loc113)
        cir.store %10, %0 : !s32i, !cir.ptr<!s32i> loc(#loc158)
      } loc(#loc157)
    } loc(#loc155)
    %3 = cir.const #cir.int<4> : !u64i loc(#loc100)
    cir.scope {
      cir.scope {
        %4 = cir.load %0 : !cir.ptr<!s32i>, !s32i loc(#loc100)
        %5 = cir.const #cir.int<5> : !s32i loc(#loc100)
        %6 = cir.cmp(gt, %4, %5) : !s32i, !cir.bool loc(#loc100)
        cir.if %6 {
        } else {
          %7 = cir.get_global @".str.1" : !cir.ptr<!cir.array<!s8i x 20>> loc(#loc100)
          %8 = cir.cast(array_to_ptrdecay, %7 : !cir.ptr<!cir.array<!s8i x 20>>), !cir.ptr<!s8i> loc(#loc100)
          %9 = cir.get_global @".str.2" : !cir.ptr<!cir.array<!s8i x 39>> loc(#loc100)
          %10 = cir.cast(array_to_ptrdecay, %9 : !cir.ptr<!cir.array<!s8i x 39>>), !cir.ptr<!s8i> loc(#loc100)
          %11 = cir.const #cir.int<88> : !s32i loc(#loc100)
          %12 = cir.cast(integral, %11 : !s32i), !u32i loc(#loc100)
          %13 = cir.get_global @".str.10" : !cir.ptr<!cir.array<!s8i x 16>> loc(#loc100)
          %14 = cir.cast(array_to_ptrdecay, %13 : !cir.ptr<!cir.array<!s8i x 16>>), !cir.ptr<!s8i> loc(#loc100)
          cir.call @__assert_fail(%8, %10, %12, %14) : (!cir.ptr<!s8i>, !cir.ptr<!s8i>, !u32i, !cir.ptr<!s8i>) -> () extra(#fn_attr) loc(#loc100)
        } loc(#loc100)
      } loc(#loc100)
    } loc(#loc100)
    cir.return loc(#loc102)
  } loc(#loc152)
} loc(#loc)
#loc = loc("/home/ladisgin/git_proj/juliet-c/testcases/CWE617_Reachable_Assertion/CWE617_Reachable_Assertion__fgets_14.c":0:0)
#loc1 = loc("../../testcasesupport/std_testcase.h":118:1)
#loc2 = loc("../../testcasesupport/std_testcase.h":118:12)
#loc3 = loc("/usr/include/stdio.h":654:1)
#loc4 = loc("/usr/include/stdio.h":655:59)
#loc5 = loc("/usr/include/stdio.h":149:1)
#loc6 = loc("/usr/include/stdio.h":149:14)
#loc7 = loc("/usr/include/stdlib.h":105:1)
#loc8 = loc("/usr/include/stdlib.h":106:33)
#loc9 = loc("../../testcasesupport/std_testcase_io.h":14:1)
#loc10 = loc("../../testcasesupport/std_testcase_io.h":14:33)
#loc11 = loc("CWE617_Reachable_Assertion__fgets_14.c":44:27)
#loc12 = loc("/usr/include/assert.h":67:1)
#loc13 = loc("/usr/include/assert.h":69:43)
#loc14 = loc("CWE617_Reachable_Assertion__fgets_14.c":49:5)
#loc15 = loc("CWE617_Reachable_Assertion__fgets_14.c":27:1)
#loc16 = loc("CWE617_Reachable_Assertion__fgets_14.c":50:1)
#loc17 = loc("CWE617_Reachable_Assertion__fgets_14.c":29:5)
#loc18 = loc("CWE617_Reachable_Assertion__fgets_14.c":29:9)
#loc19 = loc("CWE617_Reachable_Assertion__fgets_14.c":31:13)
#loc20 = loc("CWE617_Reachable_Assertion__fgets_14.c":31:12)
#loc21 = loc("CWE617_Reachable_Assertion__fgets_14.c":31:5)
#loc22 = loc("CWE617_Reachable_Assertion__fgets_14.c":32:5)
#loc23 = loc("CWE617_Reachable_Assertion__fgets_14.c":47:5)
#loc24 = loc("CWE617_Reachable_Assertion__fgets_14.c":32:8)
#loc25 = loc("CWE617_Reachable_Assertion__fgets_14.c":32:20)
#loc26 = loc("CWE617_Reachable_Assertion__fgets_14.c":33:5)
#loc27 = loc("CWE617_Reachable_Assertion__fgets_14.c":34:9)
#loc28 = loc("CWE617_Reachable_Assertion__fgets_14.c":46:9)
#loc29 = loc("CWE617_Reachable_Assertion__fgets_14.c":35:13)
#loc30 = loc("CWE617_Reachable_Assertion__fgets_14.c":35:49)
#loc31 = loc("CWE617_Reachable_Assertion__fgets_14.c":37:13)
#loc32 = loc("CWE617_Reachable_Assertion__fgets_14.c":45:13)
#loc33 = loc("CWE617_Reachable_Assertion__fgets_14.c":37:23)
#loc34 = loc("CWE617_Reachable_Assertion__fgets_14.c":37:36)
#loc35 = loc("CWE617_Reachable_Assertion__fgets_14.c":37:53)
#loc36 = loc("CWE617_Reachable_Assertion__fgets_14.c":37:17)
#loc37 = loc("CWE617_Reachable_Assertion__fgets_14.c":37:63)
#loc38 = loc("CWE617_Reachable_Assertion__fgets_14.c":38:13)
#loc39 = loc("CWE617_Reachable_Assertion__fgets_14.c":41:13)
#loc40 = loc("CWE617_Reachable_Assertion__fgets_14.c":43:13)
#loc41 = loc("CWE617_Reachable_Assertion__fgets_14.c":40:29)
#loc42 = loc("CWE617_Reachable_Assertion__fgets_14.c":40:24)
#loc43 = loc("CWE617_Reachable_Assertion__fgets_14.c":40:17)
#loc44 = loc("CWE617_Reachable_Assertion__fgets_14.c":40:40)
#loc45 = loc("CWE617_Reachable_Assertion__fgets_14.c":44:17)
#loc46 = loc("CWE617_Reachable_Assertion__fgets_14.c":91:1)
#loc47 = loc("CWE617_Reachable_Assertion__fgets_14.c":95:1)
#loc48 = loc("CWE617_Reachable_Assertion__fgets_14.c":93:5)
#loc49 = loc("CWE617_Reachable_Assertion__fgets_14.c":93:14)
#loc50 = loc("CWE617_Reachable_Assertion__fgets_14.c":94:5)
#loc51 = loc("CWE617_Reachable_Assertion__fgets_14.c":94:14)
#loc52 = loc("/usr/include/stdlib.h":575:1)
#loc53 = loc("/usr/include/stdlib.h":575:41)
#loc54 = loc("/usr/include/time.h":76:1)
#loc55 = loc("/usr/include/time.h":76:38)
#loc56 = loc("CWE617_Reachable_Assertion__fgets_14.c":112:15)
#loc57 = loc("CWE617_Reachable_Assertion__fgets_14.c":114:15)
#loc58 = loc("CWE617_Reachable_Assertion__fgets_14.c":117:15)
#loc59 = loc("CWE617_Reachable_Assertion__fgets_14.c":119:15)
#loc60 = loc("CWE617_Reachable_Assertion__fgets_14.c":107:1)
#loc61 = loc("CWE617_Reachable_Assertion__fgets_14.c":122:1)
#loc66 = loc("CWE617_Reachable_Assertion__fgets_14.c":108:1)
#loc67 = loc("CWE617_Reachable_Assertion__fgets_14.c":110:27)
#loc68 = loc("CWE617_Reachable_Assertion__fgets_14.c":110:22)
#loc69 = loc("CWE617_Reachable_Assertion__fgets_14.c":110:5)
#loc70 = loc("CWE617_Reachable_Assertion__fgets_14.c":112:5)
#loc71 = loc("CWE617_Reachable_Assertion__fgets_14.c":113:5)
#loc72 = loc("CWE617_Reachable_Assertion__fgets_14.c":113:47)
#loc73 = loc("CWE617_Reachable_Assertion__fgets_14.c":114:5)
#loc74 = loc("CWE617_Reachable_Assertion__fgets_14.c":117:5)
#loc75 = loc("CWE617_Reachable_Assertion__fgets_14.c":118:5)
#loc76 = loc("CWE617_Reachable_Assertion__fgets_14.c":118:46)
#loc77 = loc("CWE617_Reachable_Assertion__fgets_14.c":119:5)
#loc78 = loc("CWE617_Reachable_Assertion__fgets_14.c":121:12)
#loc79 = loc("CWE617_Reachable_Assertion__fgets_14.c":121:5)
#loc80 = loc("CWE617_Reachable_Assertion__fgets_14.c":65:19)
#loc81 = loc("CWE617_Reachable_Assertion__fgets_14.c":73:5)
#loc82 = loc("CWE617_Reachable_Assertion__fgets_14.c":57:1)
#loc83 = loc("CWE617_Reachable_Assertion__fgets_14.c":74:1)
#loc84 = loc("CWE617_Reachable_Assertion__fgets_14.c":59:5)
#loc85 = loc("CWE617_Reachable_Assertion__fgets_14.c":59:9)
#loc86 = loc("CWE617_Reachable_Assertion__fgets_14.c":61:13)
#loc87 = loc("CWE617_Reachable_Assertion__fgets_14.c":61:12)
#loc88 = loc("CWE617_Reachable_Assertion__fgets_14.c":61:5)
#loc89 = loc("CWE617_Reachable_Assertion__fgets_14.c":62:5)
#loc90 = loc("CWE617_Reachable_Assertion__fgets_14.c":71:5)
#loc91 = loc("CWE617_Reachable_Assertion__fgets_14.c":62:8)
#loc92 = loc("CWE617_Reachable_Assertion__fgets_14.c":62:20)
#loc93 = loc("CWE617_Reachable_Assertion__fgets_14.c":63:5)
#loc94 = loc("CWE617_Reachable_Assertion__fgets_14.c":66:5)
#loc95 = loc("CWE617_Reachable_Assertion__fgets_14.c":68:5)
#loc96 = loc("CWE617_Reachable_Assertion__fgets_14.c":65:9)
#loc97 = loc("CWE617_Reachable_Assertion__fgets_14.c":70:16)
#loc98 = loc("CWE617_Reachable_Assertion__fgets_14.c":70:29)
#loc99 = loc("CWE617_Reachable_Assertion__fgets_14.c":70:9)
#loc100 = loc("CWE617_Reachable_Assertion__fgets_14.c":88:5)
#loc101 = loc("CWE617_Reachable_Assertion__fgets_14.c":77:1)
#loc102 = loc("CWE617_Reachable_Assertion__fgets_14.c":89:1)
#loc103 = loc("CWE617_Reachable_Assertion__fgets_14.c":79:5)
#loc104 = loc("CWE617_Reachable_Assertion__fgets_14.c":79:9)
#loc105 = loc("CWE617_Reachable_Assertion__fgets_14.c":81:13)
#loc106 = loc("CWE617_Reachable_Assertion__fgets_14.c":81:12)
#loc107 = loc("CWE617_Reachable_Assertion__fgets_14.c":81:5)
#loc108 = loc("CWE617_Reachable_Assertion__fgets_14.c":82:5)
#loc109 = loc("CWE617_Reachable_Assertion__fgets_14.c":86:5)
#loc110 = loc("CWE617_Reachable_Assertion__fgets_14.c":82:8)
#loc111 = loc("CWE617_Reachable_Assertion__fgets_14.c":82:20)
#loc112 = loc("CWE617_Reachable_Assertion__fgets_14.c":83:5)
#loc113 = loc("CWE617_Reachable_Assertion__fgets_14.c":85:16)
#loc114 = loc("CWE617_Reachable_Assertion__fgets_14.c":85:29)
#loc115 = loc("CWE617_Reachable_Assertion__fgets_14.c":85:9)
#loc116 = loc(fused[#loc1, #loc2])
#loc117 = loc(fused[#loc3, #loc4])
#loc118 = loc(fused[#loc5, #loc6])
#loc119 = loc(fused[#loc7, #loc8])
#loc120 = loc(fused[#loc9, #loc10])
#loc121 = loc(fused[#loc12, #loc13])
#loc122 = loc(fused[#loc15, #loc16])
#loc123 = loc(fused[#loc17, #loc18])
#loc124 = loc(fused[#loc21, #loc19])
#loc125 = loc(fused[#loc22, #loc23])
#loc126 = loc(fused[#loc24, #loc25])
#loc127 = loc(fused[#loc26, #loc23])
#loc128 = loc(fused[#loc27, #loc28])
#loc129 = loc(fused[#loc29, #loc30])
#loc130 = loc(fused[#loc31, #loc32])
#loc131 = loc(fused[#loc36, #loc37])
#loc132 = loc(fused[#loc38, #loc39, #loc40, #loc32])
#loc133 = loc(fused[#loc43, #loc44])
#loc134 = loc(fused[#loc46, #loc47])
#loc135 = loc(fused[#loc48, #loc49])
#loc136 = loc(fused[#loc50, #loc51])
#loc137 = loc(fused[#loc52, #loc53])
#loc138 = loc(fused[#loc54, #loc55])
#loc139 = loc(fused[#loc60, #loc61])
#loc142 = loc(fused[#loc71, #loc72])
#loc143 = loc(fused[#loc75, #loc76])
#loc144 = loc(fused[#loc79, #loc78])
#loc145 = loc(fused[#loc82, #loc83])
#loc146 = loc(fused[#loc84, #loc85])
#loc147 = loc(fused[#loc88, #loc86])
#loc148 = loc(fused[#loc89, #loc90])
#loc149 = loc(fused[#loc91, #loc92])
#loc150 = loc(fused[#loc93, #loc94, #loc95, #loc90])
#loc151 = loc(fused[#loc99, #loc98])
#loc152 = loc(fused[#loc101, #loc102])
#loc153 = loc(fused[#loc103, #loc104])
#loc154 = loc(fused[#loc107, #loc105])
#loc155 = loc(fused[#loc108, #loc109])
#loc156 = loc(fused[#loc110, #loc111])
#loc157 = loc(fused[#loc112, #loc109])
#loc158 = loc(fused[#loc115, #loc114])
