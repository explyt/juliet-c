!s32i = !cir.int<s, 32>
!s8i = !cir.int<s, 8>
!void = !cir.void
#fn_attr = #cir<extra({nothrow = #cir.nothrow})>
#fn_attr1 = #cir<extra({inline = #cir.inline<no>, nothrow = #cir.nothrow, optnone = #cir.optnone})>
module @"/home/ladisgin/git_proj/juliet-c/testcases/CWE478_Missing_Default_Case_in_Switch/CWE478_Missing_Default_Case_in_Switch__basic_08.c" attributes {cir.lang = #cir.lang<c>, cir.sob = #cir.signed_overflow_behavior<undefined>, cir.triple = "x86_64-unknown-linux-gnu", dlti.dl_spec = #dlti.dl_spec<f64 = dense<64> : vector<2xi64>, f128 = dense<128> : vector<2xi64>, !llvm.ptr<270> = dense<32> : vector<4xi64>, f16 = dense<16> : vector<2xi64>, i16 = dense<16> : vector<2xi64>, i32 = dense<32> : vector<2xi64>, i1 = dense<8> : vector<2xi64>, i8 = dense<8> : vector<2xi64>, f80 = dense<128> : vector<2xi64>, !llvm.ptr = dense<64> : vector<4xi64>, !llvm.ptr<272> = dense<64> : vector<4xi64>, !llvm.ptr<271> = dense<32> : vector<4xi64>, i128 = dense<128> : vector<2xi64>, i64 = dense<64> : vector<2xi64>, "dlti.endianness" = "little", "dlti.stack_alignment" = 128 : i64>} {
  cir.global "private" constant cir_private dsolocal @".str" = #cir.const_array<"shouldn't see this value\00" : !cir.array<!s8i x 25>> : !cir.array<!s8i x 25> {alignment = 1 : i64} loc(#loc1)
  cir.func private @rand() -> !s32i extra(#fn_attr) loc(#loc112)
  cir.global "private" constant cir_private dsolocal @".str.1" = #cir.const_array<"0\00" : !cir.array<!s8i x 2>> : !cir.array<!s8i x 2> {alignment = 1 : i64} loc(#loc4)
  cir.global "private" constant cir_private dsolocal @".str.2" = #cir.const_array<"1\00" : !cir.array<!s8i x 2>> : !cir.array<!s8i x 2> {alignment = 1 : i64} loc(#loc5)
  cir.func private @printLine(!cir.ptr<!s8i>) loc(#loc113)
  cir.func no_proto @CWE478_Missing_Default_Case_in_Switch__basic_08_bad() extra(#fn_attr1) {
    %0 = cir.alloca !cir.ptr<!s8i>, !cir.ptr<!cir.ptr<!s8i>>, ["charString", init] {alignment = 8 : i64} loc(#loc115)
    %1 = cir.alloca !s32i, !cir.ptr<!s32i>, ["x"] {alignment = 4 : i64} loc(#loc116)
    cir.br ^bb1 loc(#loc117)
  ^bb1:  // pred: ^bb0
    %2 = cir.get_global @staticReturnsTrue : !cir.ptr<!cir.func<!s32i ()>> loc(#loc118)
    %3 = cir.call %2() : (!cir.ptr<!cir.func<!s32i ()>>) -> !s32i loc(#loc15)
    %4 = cir.cast(int_to_bool, %3 : !s32i), !cir.bool loc(#loc15)
    cir.brcond %4 ^bb2, ^bb12 loc(#loc119)
  ^bb2:  // pred: ^bb1
    cir.br ^bb3 loc(#loc120)
  ^bb3:  // pred: ^bb2
    %5 = cir.get_global @".str" : !cir.ptr<!cir.array<!s8i x 25>> loc(#loc1)
    %6 = cir.cast(array_to_ptrdecay, %5 : !cir.ptr<!cir.array<!s8i x 25>>), !cir.ptr<!s8i> loc(#loc1)
    cir.store %6, %0 : !cir.ptr<!s8i>, !cir.ptr<!cir.ptr<!s8i>> loc(#loc115)
    %7 = cir.call @rand() : () -> !s32i extra(#fn_attr) loc(#loc20)
    %8 = cir.const #cir.int<3> : !s32i loc(#loc21)
    %9 = cir.binop(rem, %7, %8) : !s32i loc(#loc121)
    cir.store %9, %1 : !s32i, !cir.ptr<!s32i> loc(#loc122)
    cir.br ^bb4 loc(#loc123)
  ^bb4:  // pred: ^bb3
    %10 = cir.load %1 : !cir.ptr<!s32i>, !s32i loc(#loc26)
    cir.br ^bb5 loc(#loc24)
  ^bb5:  // pred: ^bb4
    cir.switch.flat %10 : !s32i, ^bb9 [
      0: ^bb7,
      1: ^bb8
    ] loc(#loc24)
  ^bb6:  // no predecessors
    cir.br ^bb7 loc(#loc27)
  ^bb7:  // 2 preds: ^bb5, ^bb6
    %11 = cir.get_global @".str.1" : !cir.ptr<!cir.array<!s8i x 2>> loc(#loc4)
    %12 = cir.cast(array_to_ptrdecay, %11 : !cir.ptr<!cir.array<!s8i x 2>>), !cir.ptr<!s8i> loc(#loc4)
    cir.store %12, %0 : !cir.ptr<!s8i>, !cir.ptr<!cir.ptr<!s8i>> loc(#loc124)
    cir.br ^bb9 loc(#loc29)
  ^bb8:  // pred: ^bb5
    %13 = cir.get_global @".str.2" : !cir.ptr<!cir.array<!s8i x 2>> loc(#loc5)
    %14 = cir.cast(array_to_ptrdecay, %13 : !cir.ptr<!cir.array<!s8i x 2>>), !cir.ptr<!s8i> loc(#loc5)
    cir.store %14, %0 : !cir.ptr<!s8i>, !cir.ptr<!cir.ptr<!s8i>> loc(#loc125)
    cir.br ^bb9 loc(#loc31)
  ^bb9:  // 3 preds: ^bb5, ^bb7, ^bb8
    cir.br ^bb10 loc(#loc25)
  ^bb10:  // pred: ^bb9
    %15 = cir.load %0 : !cir.ptr<!cir.ptr<!s8i>>, !cir.ptr<!s8i> loc(#loc32)
    cir.call @printLine(%15) : (!cir.ptr<!s8i>) -> () loc(#loc33)
    cir.br ^bb11 loc(#loc19)
  ^bb11:  // pred: ^bb10
    cir.br ^bb12 loc(#loc14)
  ^bb12:  // 2 preds: ^bb1, ^bb11
    cir.br ^bb13 loc(#loc14)
  ^bb13:  // pred: ^bb12
    cir.return loc(#loc9)
  } loc(#loc114)
  cir.func no_proto @CWE478_Missing_Default_Case_in_Switch__basic_08_good() extra(#fn_attr1) {
    %0 = cir.get_global @good1 : !cir.ptr<!cir.func<!void ()>> loc(#loc127)
    cir.call %0() : (!cir.ptr<!cir.func<!void ()>>) -> () loc(#loc36)
    %1 = cir.get_global @good2 : !cir.ptr<!cir.func<!void ()>> loc(#loc128)
    cir.call %1() : (!cir.ptr<!cir.func<!void ()>>) -> () loc(#loc38)
    cir.return loc(#loc35)
  } loc(#loc126)
  cir.func no_proto internal private @staticReturnsTrue() -> !s32i extra(#fn_attr1) {
    %0 = cir.alloca !s32i, !cir.ptr<!s32i>, ["__retval"] {alignment = 4 : i64} loc(#loc41)
    %1 = cir.const #cir.int<1> : !s32i loc(#loc42)
    cir.store %1, %0 : !s32i, !cir.ptr<!s32i> loc(#loc130)
    %2 = cir.load %0 : !cir.ptr<!s32i>, !s32i loc(#loc130)
    cir.return %2 : !s32i loc(#loc130)
  } loc(#loc129)
  cir.global "private" constant cir_private dsolocal @".str.3" = #cir.const_array<"Benign, fixed string\00" : !cir.array<!s8i x 21>> : !cir.array<!s8i x 21> {alignment = 1 : i64} loc(#loc44)
  cir.func no_proto internal private @good1() extra(#fn_attr1) {
    %0 = cir.alloca !cir.ptr<!s8i>, !cir.ptr<!cir.ptr<!s8i>>, ["charString", init] {alignment = 8 : i64} loc(#loc132)
    %1 = cir.alloca !s32i, !cir.ptr<!s32i>, ["x"] {alignment = 4 : i64} loc(#loc133)
    cir.br ^bb1 loc(#loc134)
  ^bb1:  // pred: ^bb0
    %2 = cir.get_global @staticReturnsFalse : !cir.ptr<!cir.func<!s32i ()>> loc(#loc135)
    %3 = cir.call %2() : (!cir.ptr<!cir.func<!s32i ()>>) -> !s32i loc(#loc53)
    %4 = cir.cast(int_to_bool, %3 : !s32i), !cir.bool loc(#loc53)
    cir.brcond %4 ^bb2, ^bb3 loc(#loc136)
  ^bb2:  // pred: ^bb1
    %5 = cir.get_global @".str.3" : !cir.ptr<!cir.array<!s8i x 21>> loc(#loc44)
    %6 = cir.cast(array_to_ptrdecay, %5 : !cir.ptr<!cir.array<!s8i x 21>>), !cir.ptr<!s8i> loc(#loc44)
    cir.call @printLine(%6) : (!cir.ptr<!s8i>) -> () loc(#loc58)
    cir.br ^bb14 loc(#loc56)
  ^bb3:  // pred: ^bb1
    cir.br ^bb4 loc(#loc137)
  ^bb4:  // pred: ^bb3
    %7 = cir.get_global @".str" : !cir.ptr<!cir.array<!s8i x 25>> loc(#loc48)
    %8 = cir.cast(array_to_ptrdecay, %7 : !cir.ptr<!cir.array<!s8i x 25>>), !cir.ptr<!s8i> loc(#loc48)
    cir.store %8, %0 : !cir.ptr<!s8i>, !cir.ptr<!cir.ptr<!s8i>> loc(#loc132)
    %9 = cir.call @rand() : () -> !s32i extra(#fn_attr) loc(#loc61)
    %10 = cir.const #cir.int<3> : !s32i loc(#loc62)
    %11 = cir.binop(rem, %9, %10) : !s32i loc(#loc138)
    cir.store %11, %1 : !s32i, !cir.ptr<!s32i> loc(#loc139)
    cir.br ^bb5 loc(#loc140)
  ^bb5:  // pred: ^bb4
    %12 = cir.load %1 : !cir.ptr<!s32i>, !s32i loc(#loc67)
    cir.br ^bb6 loc(#loc65)
  ^bb6:  // pred: ^bb5
    cir.switch.flat %12 : !s32i, ^bb10 [
      0: ^bb8,
      1: ^bb9
    ] loc(#loc65)
  ^bb7:  // no predecessors
    cir.br ^bb8 loc(#loc68)
  ^bb8:  // 2 preds: ^bb6, ^bb7
    %13 = cir.get_global @".str.1" : !cir.ptr<!cir.array<!s8i x 2>> loc(#loc69)
    %14 = cir.cast(array_to_ptrdecay, %13 : !cir.ptr<!cir.array<!s8i x 2>>), !cir.ptr<!s8i> loc(#loc69)
    cir.store %14, %0 : !cir.ptr<!s8i>, !cir.ptr<!cir.ptr<!s8i>> loc(#loc141)
    cir.br ^bb11 loc(#loc71)
  ^bb9:  // pred: ^bb6
    %15 = cir.get_global @".str.2" : !cir.ptr<!cir.array<!s8i x 2>> loc(#loc72)
    %16 = cir.cast(array_to_ptrdecay, %15 : !cir.ptr<!cir.array<!s8i x 2>>), !cir.ptr<!s8i> loc(#loc72)
    cir.store %16, %0 : !cir.ptr<!s8i>, !cir.ptr<!cir.ptr<!s8i>> loc(#loc142)
    cir.br ^bb11 loc(#loc74)
  ^bb10:  // pred: ^bb6
    cir.return loc(#loc75)
  ^bb11:  // 2 preds: ^bb8, ^bb9
    cir.br ^bb12 loc(#loc66)
  ^bb12:  // pred: ^bb11
    %17 = cir.load %0 : !cir.ptr<!cir.ptr<!s8i>>, !cir.ptr<!s8i> loc(#loc76)
    cir.call @printLine(%17) : (!cir.ptr<!s8i>) -> () loc(#loc77)
    cir.br ^bb13 loc(#loc60)
  ^bb13:  // pred: ^bb12
    cir.br ^bb14 loc(#loc52)
  ^bb14:  // 2 preds: ^bb2, ^bb13
    cir.br ^bb15 loc(#loc52)
  ^bb15:  // pred: ^bb14
    cir.return loc(#loc46)
  } loc(#loc131)
  cir.func no_proto internal private @staticReturnsFalse() -> !s32i extra(#fn_attr1) {
    %0 = cir.alloca !s32i, !cir.ptr<!s32i>, ["__retval"] {alignment = 4 : i64} loc(#loc79)
    %1 = cir.const #cir.int<0> : !s32i loc(#loc80)
    cir.store %1, %0 : !s32i, !cir.ptr<!s32i> loc(#loc144)
    %2 = cir.load %0 : !cir.ptr<!s32i>, !s32i loc(#loc144)
    cir.return %2 : !s32i loc(#loc144)
  } loc(#loc143)
  cir.func no_proto internal private @good2() extra(#fn_attr1) {
    %0 = cir.alloca !cir.ptr<!s8i>, !cir.ptr<!cir.ptr<!s8i>>, ["charString", init] {alignment = 8 : i64} loc(#loc146)
    %1 = cir.alloca !s32i, !cir.ptr<!s32i>, ["x"] {alignment = 4 : i64} loc(#loc147)
    cir.br ^bb1 loc(#loc148)
  ^bb1:  // pred: ^bb0
    %2 = cir.get_global @staticReturnsTrue : !cir.ptr<!cir.func<!s32i ()>> loc(#loc149)
    %3 = cir.call @staticReturnsTrue() : () -> !s32i loc(#loc90)
    %4 = cir.cast(int_to_bool, %3 : !s32i), !cir.bool loc(#loc90)
    cir.brcond %4 ^bb2, ^bb13 loc(#loc150)
  ^bb2:  // pred: ^bb1
    cir.br ^bb3 loc(#loc151)
  ^bb3:  // pred: ^bb2
    %5 = cir.get_global @".str" : !cir.ptr<!cir.array<!s8i x 25>> loc(#loc85)
    %6 = cir.cast(array_to_ptrdecay, %5 : !cir.ptr<!cir.array<!s8i x 25>>), !cir.ptr<!s8i> loc(#loc85)
    cir.store %6, %0 : !cir.ptr<!s8i>, !cir.ptr<!cir.ptr<!s8i>> loc(#loc146)
    %7 = cir.call @rand() : () -> !s32i extra(#fn_attr) loc(#loc95)
    %8 = cir.const #cir.int<3> : !s32i loc(#loc96)
    %9 = cir.binop(rem, %7, %8) : !s32i loc(#loc152)
    cir.store %9, %1 : !s32i, !cir.ptr<!s32i> loc(#loc153)
    cir.br ^bb4 loc(#loc154)
  ^bb4:  // pred: ^bb3
    %10 = cir.load %1 : !cir.ptr<!s32i>, !s32i loc(#loc101)
    cir.br ^bb5 loc(#loc99)
  ^bb5:  // pred: ^bb4
    cir.switch.flat %10 : !s32i, ^bb9 [
      0: ^bb7,
      1: ^bb8
    ] loc(#loc99)
  ^bb6:  // no predecessors
    cir.br ^bb7 loc(#loc102)
  ^bb7:  // 2 preds: ^bb5, ^bb6
    %11 = cir.get_global @".str.1" : !cir.ptr<!cir.array<!s8i x 2>> loc(#loc103)
    %12 = cir.cast(array_to_ptrdecay, %11 : !cir.ptr<!cir.array<!s8i x 2>>), !cir.ptr<!s8i> loc(#loc103)
    cir.store %12, %0 : !cir.ptr<!s8i>, !cir.ptr<!cir.ptr<!s8i>> loc(#loc155)
    cir.br ^bb10 loc(#loc105)
  ^bb8:  // pred: ^bb5
    %13 = cir.get_global @".str.2" : !cir.ptr<!cir.array<!s8i x 2>> loc(#loc106)
    %14 = cir.cast(array_to_ptrdecay, %13 : !cir.ptr<!cir.array<!s8i x 2>>), !cir.ptr<!s8i> loc(#loc106)
    cir.store %14, %0 : !cir.ptr<!s8i>, !cir.ptr<!cir.ptr<!s8i>> loc(#loc156)
    cir.br ^bb10 loc(#loc108)
  ^bb9:  // pred: ^bb5
    cir.return loc(#loc109)
  ^bb10:  // 2 preds: ^bb7, ^bb8
    cir.br ^bb11 loc(#loc100)
  ^bb11:  // pred: ^bb10
    %15 = cir.load %0 : !cir.ptr<!cir.ptr<!s8i>>, !cir.ptr<!s8i> loc(#loc110)
    cir.call @printLine(%15) : (!cir.ptr<!s8i>) -> () loc(#loc111)
    cir.br ^bb12 loc(#loc94)
  ^bb12:  // pred: ^bb11
    cir.br ^bb13 loc(#loc89)
  ^bb13:  // 2 preds: ^bb1, ^bb12
    cir.br ^bb14 loc(#loc89)
  ^bb14:  // pred: ^bb13
    cir.return loc(#loc83)
  } loc(#loc145)
} loc(#loc)
#loc = loc("/home/ladisgin/git_proj/juliet-c/testcases/CWE478_Missing_Default_Case_in_Switch/CWE478_Missing_Default_Case_in_Switch__basic_08.c":0:0)
#loc1 = loc("CWE478_Missing_Default_Case_in_Switch__basic_08.c":38:38)
#loc2 = loc("/usr/include/stdlib.h":573:1)
#loc3 = loc("/usr/include/stdlib.h":573:24)
#loc4 = loc("CWE478_Missing_Default_Case_in_Switch__basic_08.c":44:30)
#loc5 = loc("CWE478_Missing_Default_Case_in_Switch__basic_08.c":47:30)
#loc6 = loc("../../testcasesupport/std_testcase_io.h":14:1)
#loc7 = loc("../../testcasesupport/std_testcase_io.h":14:33)
#loc8 = loc("CWE478_Missing_Default_Case_in_Switch__basic_08.c":33:1)
#loc9 = loc("CWE478_Missing_Default_Case_in_Switch__basic_08.c":54:1)
#loc10 = loc("CWE478_Missing_Default_Case_in_Switch__basic_08.c":38:13)
#loc11 = loc("CWE478_Missing_Default_Case_in_Switch__basic_08.c":39:13)
#loc12 = loc("CWE478_Missing_Default_Case_in_Switch__basic_08.c":39:17)
#loc13 = loc("CWE478_Missing_Default_Case_in_Switch__basic_08.c":35:5)
#loc14 = loc("CWE478_Missing_Default_Case_in_Switch__basic_08.c":53:5)
#loc15 = loc("CWE478_Missing_Default_Case_in_Switch__basic_08.c":35:8)
#loc16 = loc("CWE478_Missing_Default_Case_in_Switch__basic_08.c":35:26)
#loc17 = loc("CWE478_Missing_Default_Case_in_Switch__basic_08.c":36:5)
#loc18 = loc("CWE478_Missing_Default_Case_in_Switch__basic_08.c":37:9)
#loc19 = loc("CWE478_Missing_Default_Case_in_Switch__basic_08.c":52:9)
#loc20 = loc("CWE478_Missing_Default_Case_in_Switch__basic_08.c":40:18)
#loc21 = loc("CWE478_Missing_Default_Case_in_Switch__basic_08.c":40:27)
#loc22 = loc("CWE478_Missing_Default_Case_in_Switch__basic_08.c":40:13)
#loc23 = loc("CWE478_Missing_Default_Case_in_Switch__basic_08.c":40:28)
#loc24 = loc("CWE478_Missing_Default_Case_in_Switch__basic_08.c":41:13)
#loc25 = loc("CWE478_Missing_Default_Case_in_Switch__basic_08.c":50:13)
#loc26 = loc("CWE478_Missing_Default_Case_in_Switch__basic_08.c":41:21)
#loc27 = loc("CWE478_Missing_Default_Case_in_Switch__basic_08.c":43:13)
#loc28 = loc("CWE478_Missing_Default_Case_in_Switch__basic_08.c":44:17)
#loc29 = loc("CWE478_Missing_Default_Case_in_Switch__basic_08.c":45:17)
#loc30 = loc("CWE478_Missing_Default_Case_in_Switch__basic_08.c":47:17)
#loc31 = loc("CWE478_Missing_Default_Case_in_Switch__basic_08.c":48:17)
#loc32 = loc("CWE478_Missing_Default_Case_in_Switch__basic_08.c":51:23)
#loc33 = loc("CWE478_Missing_Default_Case_in_Switch__basic_08.c":51:13)
#loc34 = loc("CWE478_Missing_Default_Case_in_Switch__basic_08.c":117:1)
#loc35 = loc("CWE478_Missing_Default_Case_in_Switch__basic_08.c":121:1)
#loc36 = loc("CWE478_Missing_Default_Case_in_Switch__basic_08.c":119:5)
#loc37 = loc("CWE478_Missing_Default_Case_in_Switch__basic_08.c":119:11)
#loc38 = loc("CWE478_Missing_Default_Case_in_Switch__basic_08.c":120:5)
#loc39 = loc("CWE478_Missing_Default_Case_in_Switch__basic_08.c":120:11)
#loc40 = loc("CWE478_Missing_Default_Case_in_Switch__basic_08.c":21:1)
#loc41 = loc("CWE478_Missing_Default_Case_in_Switch__basic_08.c":24:1)
#loc42 = loc("CWE478_Missing_Default_Case_in_Switch__basic_08.c":23:12)
#loc43 = loc("CWE478_Missing_Default_Case_in_Switch__basic_08.c":23:5)
#loc44 = loc("CWE478_Missing_Default_Case_in_Switch__basic_08.c":66:19)
#loc45 = loc("CWE478_Missing_Default_Case_in_Switch__basic_08.c":61:1)
#loc46 = loc("CWE478_Missing_Default_Case_in_Switch__basic_08.c":89:1)
#loc47 = loc("CWE478_Missing_Default_Case_in_Switch__basic_08.c":71:13)
#loc48 = loc("CWE478_Missing_Default_Case_in_Switch__basic_08.c":71:38)
#loc49 = loc("CWE478_Missing_Default_Case_in_Switch__basic_08.c":72:13)
#loc50 = loc("CWE478_Missing_Default_Case_in_Switch__basic_08.c":72:17)
#loc51 = loc("CWE478_Missing_Default_Case_in_Switch__basic_08.c":63:5)
#loc52 = loc("CWE478_Missing_Default_Case_in_Switch__basic_08.c":88:5)
#loc53 = loc("CWE478_Missing_Default_Case_in_Switch__basic_08.c":63:8)
#loc54 = loc("CWE478_Missing_Default_Case_in_Switch__basic_08.c":63:27)
#loc55 = loc("CWE478_Missing_Default_Case_in_Switch__basic_08.c":64:5)
#loc56 = loc("CWE478_Missing_Default_Case_in_Switch__basic_08.c":67:5)
#loc57 = loc("CWE478_Missing_Default_Case_in_Switch__basic_08.c":69:5)
#loc58 = loc("CWE478_Missing_Default_Case_in_Switch__basic_08.c":66:9)
#loc59 = loc("CWE478_Missing_Default_Case_in_Switch__basic_08.c":70:9)
#loc60 = loc("CWE478_Missing_Default_Case_in_Switch__basic_08.c":87:9)
#loc61 = loc("CWE478_Missing_Default_Case_in_Switch__basic_08.c":73:18)
#loc62 = loc("CWE478_Missing_Default_Case_in_Switch__basic_08.c":73:27)
#loc63 = loc("CWE478_Missing_Default_Case_in_Switch__basic_08.c":73:13)
#loc64 = loc("CWE478_Missing_Default_Case_in_Switch__basic_08.c":73:28)
#loc65 = loc("CWE478_Missing_Default_Case_in_Switch__basic_08.c":74:13)
#loc66 = loc("CWE478_Missing_Default_Case_in_Switch__basic_08.c":85:13)
#loc67 = loc("CWE478_Missing_Default_Case_in_Switch__basic_08.c":74:21)
#loc68 = loc("CWE478_Missing_Default_Case_in_Switch__basic_08.c":76:13)
#loc69 = loc("CWE478_Missing_Default_Case_in_Switch__basic_08.c":77:30)
#loc70 = loc("CWE478_Missing_Default_Case_in_Switch__basic_08.c":77:17)
#loc71 = loc("CWE478_Missing_Default_Case_in_Switch__basic_08.c":78:17)
#loc72 = loc("CWE478_Missing_Default_Case_in_Switch__basic_08.c":80:30)
#loc73 = loc("CWE478_Missing_Default_Case_in_Switch__basic_08.c":80:17)
#loc74 = loc("CWE478_Missing_Default_Case_in_Switch__basic_08.c":81:17)
#loc75 = loc("CWE478_Missing_Default_Case_in_Switch__basic_08.c":84:17)
#loc76 = loc("CWE478_Missing_Default_Case_in_Switch__basic_08.c":86:23)
#loc77 = loc("CWE478_Missing_Default_Case_in_Switch__basic_08.c":86:13)
#loc78 = loc("CWE478_Missing_Default_Case_in_Switch__basic_08.c":26:1)
#loc79 = loc("CWE478_Missing_Default_Case_in_Switch__basic_08.c":29:1)
#loc80 = loc("CWE478_Missing_Default_Case_in_Switch__basic_08.c":28:12)
#loc81 = loc("CWE478_Missing_Default_Case_in_Switch__basic_08.c":28:5)
#loc82 = loc("CWE478_Missing_Default_Case_in_Switch__basic_08.c":92:1)
#loc83 = loc("CWE478_Missing_Default_Case_in_Switch__basic_08.c":115:1)
#loc84 = loc("CWE478_Missing_Default_Case_in_Switch__basic_08.c":97:13)
#loc85 = loc("CWE478_Missing_Default_Case_in_Switch__basic_08.c":97:38)
#loc86 = loc("CWE478_Missing_Default_Case_in_Switch__basic_08.c":98:13)
#loc87 = loc("CWE478_Missing_Default_Case_in_Switch__basic_08.c":98:17)
#loc88 = loc("CWE478_Missing_Default_Case_in_Switch__basic_08.c":94:5)
#loc89 = loc("CWE478_Missing_Default_Case_in_Switch__basic_08.c":114:5)
#loc90 = loc("CWE478_Missing_Default_Case_in_Switch__basic_08.c":94:8)
#loc91 = loc("CWE478_Missing_Default_Case_in_Switch__basic_08.c":94:26)
#loc92 = loc("CWE478_Missing_Default_Case_in_Switch__basic_08.c":95:5)
#loc93 = loc("CWE478_Missing_Default_Case_in_Switch__basic_08.c":96:9)
#loc94 = loc("CWE478_Missing_Default_Case_in_Switch__basic_08.c":113:9)
#loc95 = loc("CWE478_Missing_Default_Case_in_Switch__basic_08.c":99:18)
#loc96 = loc("CWE478_Missing_Default_Case_in_Switch__basic_08.c":99:27)
#loc97 = loc("CWE478_Missing_Default_Case_in_Switch__basic_08.c":99:13)
#loc98 = loc("CWE478_Missing_Default_Case_in_Switch__basic_08.c":99:28)
#loc99 = loc("CWE478_Missing_Default_Case_in_Switch__basic_08.c":100:13)
#loc100 = loc("CWE478_Missing_Default_Case_in_Switch__basic_08.c":111:13)
#loc101 = loc("CWE478_Missing_Default_Case_in_Switch__basic_08.c":100:21)
#loc102 = loc("CWE478_Missing_Default_Case_in_Switch__basic_08.c":102:13)
#loc103 = loc("CWE478_Missing_Default_Case_in_Switch__basic_08.c":103:30)
#loc104 = loc("CWE478_Missing_Default_Case_in_Switch__basic_08.c":103:17)
#loc105 = loc("CWE478_Missing_Default_Case_in_Switch__basic_08.c":104:17)
#loc106 = loc("CWE478_Missing_Default_Case_in_Switch__basic_08.c":106:30)
#loc107 = loc("CWE478_Missing_Default_Case_in_Switch__basic_08.c":106:17)
#loc108 = loc("CWE478_Missing_Default_Case_in_Switch__basic_08.c":107:17)
#loc109 = loc("CWE478_Missing_Default_Case_in_Switch__basic_08.c":110:17)
#loc110 = loc("CWE478_Missing_Default_Case_in_Switch__basic_08.c":112:23)
#loc111 = loc("CWE478_Missing_Default_Case_in_Switch__basic_08.c":112:13)
#loc112 = loc(fused[#loc2, #loc3])
#loc113 = loc(fused[#loc6, #loc7])
#loc114 = loc(fused[#loc8, #loc9])
#loc115 = loc(fused[#loc10, #loc1])
#loc116 = loc(fused[#loc11, #loc12])
#loc117 = loc(fused[#loc13, #loc14])
#loc118 = loc(fused[#loc15, #loc16])
#loc119 = loc(fused[#loc17, #loc14])
#loc120 = loc(fused[#loc18, #loc19])
#loc121 = loc(fused[#loc20, #loc21])
#loc122 = loc(fused[#loc22, #loc23])
#loc123 = loc(fused[#loc24, #loc25])
#loc124 = loc(fused[#loc28, #loc4])
#loc125 = loc(fused[#loc30, #loc5])
#loc126 = loc(fused[#loc34, #loc35])
#loc127 = loc(fused[#loc36, #loc37])
#loc128 = loc(fused[#loc38, #loc39])
#loc129 = loc(fused[#loc40, #loc41])
#loc130 = loc(fused[#loc43, #loc42])
#loc131 = loc(fused[#loc45, #loc46])
#loc132 = loc(fused[#loc47, #loc48])
#loc133 = loc(fused[#loc49, #loc50])
#loc134 = loc(fused[#loc51, #loc52])
#loc135 = loc(fused[#loc53, #loc54])
#loc136 = loc(fused[#loc55, #loc56, #loc57, #loc52])
#loc137 = loc(fused[#loc59, #loc60])
#loc138 = loc(fused[#loc61, #loc62])
#loc139 = loc(fused[#loc63, #loc64])
#loc140 = loc(fused[#loc65, #loc66])
#loc141 = loc(fused[#loc70, #loc69])
#loc142 = loc(fused[#loc73, #loc72])
#loc143 = loc(fused[#loc78, #loc79])
#loc144 = loc(fused[#loc81, #loc80])
#loc145 = loc(fused[#loc82, #loc83])
#loc146 = loc(fused[#loc84, #loc85])
#loc147 = loc(fused[#loc86, #loc87])
#loc148 = loc(fused[#loc88, #loc89])
#loc149 = loc(fused[#loc90, #loc91])
#loc150 = loc(fused[#loc92, #loc89])
#loc151 = loc(fused[#loc93, #loc94])
#loc152 = loc(fused[#loc95, #loc96])
#loc153 = loc(fused[#loc97, #loc98])
#loc154 = loc(fused[#loc99, #loc100])
#loc155 = loc(fused[#loc104, #loc103])
#loc156 = loc(fused[#loc107, #loc106])
