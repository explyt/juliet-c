!s32i = !cir.int<s, 32>
!s64i = !cir.int<s, 64>
!s8i = !cir.int<s, 8>
!u16i = !cir.int<u, 16>
!u32i = !cir.int<u, 32>
!u64i = !cir.int<u, 64>
!u8i = !cir.int<u, 8>
!void = !cir.void
#false = #cir.bool<false> : !cir.bool
#fn_attr = #cir<extra({nothrow = #cir.nothrow})>
#fn_attr1 = #cir<extra({inline = #cir.inline<no>, nothrow = #cir.nothrow, optnone = #cir.optnone, uwtable = #cir.uwtable<async>})>
#loc29 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_connect_socket_41.c":44:21)
#loc30 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_connect_socket_41.c":44:25)
#loc199 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_connect_socket_41.c":185:25)
#loc200 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_connect_socket_41.c":185:29)
#loc363 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_connect_socket_41.c":143:25)
#loc364 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_connect_socket_41.c":143:29)
#true = #cir.bool<true> : !cir.bool
!ty_in_addr = !cir.record<struct "in_addr" {!u32i} #cir.record.decl.ast>
#loc451 = loc(fused[#loc29, #loc30])
#loc516 = loc(fused[#loc199, #loc200])
#loc579 = loc(fused[#loc363, #loc364])
!ty_sockaddr = !cir.record<struct "sockaddr" {!u16i, !cir.array<!s8i x 14>} #cir.record.decl.ast>
!ty_sockaddr_in = !cir.record<struct "sockaddr_in" {!u16i, !u16i, !ty_in_addr, !cir.array<!u8i x 8>}>
module @"/workspaces/juliet-c/testcases/CWE122_Heap_Based_Buffer_Overflow/s06/CWE122_Heap_Based_Buffer_Overflow__c_CWE129_connect_socket_41.c" attributes {cir.lang = #cir.lang<c>, cir.sob = #cir.signed_overflow_behavior<undefined>, cir.triple = "x86_64-unknown-linux-gnu", cir.type_size_info = #cir.type_size_info<char = 8, int = 32, size_t = 64>, cir.uwtable = #cir.uwtable<async>, dlti.dl_spec = #dlti.dl_spec<f128 = dense<128> : vector<2xi64>, f64 = dense<64> : vector<2xi64>, f16 = dense<16> : vector<2xi64>, !llvm.ptr<270> = dense<32> : vector<4xi64>, i32 = dense<32> : vector<2xi64>, i16 = dense<16> : vector<2xi64>, i8 = dense<8> : vector<2xi64>, i1 = dense<8> : vector<2xi64>, !llvm.ptr = dense<64> : vector<4xi64>, f80 = dense<128> : vector<2xi64>, i128 = dense<128> : vector<2xi64>, i64 = dense<64> : vector<2xi64>, !llvm.ptr<271> = dense<32> : vector<4xi64>, !llvm.ptr<272> = dense<64> : vector<4xi64>, "dlti.mangling_mode" = "e", "dlti.stack_alignment" = 128 : i64, "dlti.endianness" = "little">} {
  cir.func private @socket(!s32i, !s32i, !s32i) -> !s32i extra(#fn_attr) loc(#loc438)
  cir.func private @inet_addr(!cir.ptr<!s8i>) -> !u32i extra(#fn_attr) loc(#loc439)
  cir.global "private" constant cir_private dsolocal @".str" = #cir.const_array<"127.0.0.1\00" : !cir.array<!s8i x 10>> : !cir.array<!s8i x 10> {alignment = 1 : i64} loc(#loc5)
  cir.func private @htons(!u16i) -> !u16i extra(#fn_attr) loc(#loc440)
  cir.func private @connect(!s32i, !cir.ptr<!ty_sockaddr>, !u32i) -> !s32i loc(#loc441)
  cir.func private @recv(!s32i, !cir.ptr<!void>, !u64i, !s32i) -> !s64i loc(#loc442)
  cir.func private @atoi(!cir.ptr<!s8i>) -> !s32i extra(#fn_attr) loc(#loc443)
  cir.func private @close(!s32i) -> !s32i loc(#loc444)
  cir.func private @malloc(!u64i) -> !cir.ptr<!void> extra(#fn_attr) loc(#loc445)
  cir.func private @exit(!s32i) extra(#fn_attr) loc(#loc446)
  cir.func private @printIntLine(!s32i) loc(#loc447)
  cir.func private @printLine(!cir.ptr<!s8i>) loc(#loc448)
  cir.global "private" constant cir_private dsolocal @".str.1" = #cir.const_array<"ERROR: Array index is negative.\00" : !cir.array<!s8i x 32>> : !cir.array<!s8i x 32> {alignment = 1 : i64} loc(#loc24)
  cir.func private @free(!cir.ptr<!void>) extra(#fn_attr) loc(#loc449)
  cir.func internal private @badSink(%arg0: !s32i loc(fused[#loc29, #loc30])) extra(#fn_attr1) {
    %0 = cir.alloca !s32i, !cir.ptr<!s32i>, ["data", init] {alignment = 4 : i64} loc(#loc451)
    cir.store %arg0, %0 : !s32i, !cir.ptr<!s32i> loc(#loc31)
    cir.scope {
      %1 = cir.alloca !s32i, !cir.ptr<!s32i>, ["i"] {alignment = 4 : i64} loc(#loc453)
      %2 = cir.alloca !cir.ptr<!s32i>, !cir.ptr<!cir.ptr<!s32i>>, ["buffer", init] {alignment = 8 : i64} loc(#loc454)
      %3 = cir.get_global @malloc : !cir.ptr<!cir.func<(!u64i) -> !cir.ptr<!void>>> loc(#loc38)
      %4 = cir.const #cir.int<10> : !s32i loc(#loc39)
      %5 = cir.cast(integral, %4 : !s32i), !u64i loc(#loc39)
      %6 = cir.const #cir.int<4> : !u64i loc(#loc455)
      %7 = cir.binop(mul, %5, %6) : !u64i loc(#loc456)
      %8 = cir.call @malloc(%7) : (!u64i) -> !cir.ptr<!void> extra(#fn_attr) loc(#loc38)
      %9 = cir.cast(bitcast, %8 : !cir.ptr<!void>), !cir.ptr<!s32i> loc(#loc457)
      cir.store %9, %2 : !cir.ptr<!s32i>, !cir.ptr<!cir.ptr<!s32i>> loc(#loc454)
      cir.scope {
        %13 = cir.load %2 : !cir.ptr<!cir.ptr<!s32i>>, !cir.ptr<!s32i> loc(#loc44)
        %14 = cir.const #cir.ptr<null> : !cir.ptr<!void> loc(#loc45)
        %15 = cir.cast(bitcast, %14 : !cir.ptr<!void>), !cir.ptr<!s32i> loc(#loc45)
        %16 = cir.cmp(eq, %13, %15) : !cir.ptr<!s32i>, !cir.bool loc(#loc459)
        cir.if %16 {
          %17 = cir.get_global @exit : !cir.ptr<!cir.func<(!s32i)>> loc(#loc47)
          %18 = cir.const #cir.int<1> : !s32i loc(#loc48)
          %19 = cir.unary(minus, %18) nsw : !s32i, !s32i loc(#loc49)
          cir.call @exit(%19) : (!s32i) -> () extra(#fn_attr) loc(#loc47)
        } loc(#loc460)
      } loc(#loc458)
      cir.scope {
        %13 = cir.const #cir.int<0> : !s32i loc(#loc52)
        cir.store %13, %1 : !s32i, !cir.ptr<!s32i> loc(#loc462)
        cir.for : cond {
          %14 = cir.load %1 : !cir.ptr<!s32i>, !s32i loc(#loc54)
          %15 = cir.const #cir.int<10> : !s32i loc(#loc55)
          %16 = cir.cmp(lt, %14, %15) : !s32i, !cir.bool loc(#loc463)
          cir.condition(%16) loc(#loc56)
        } body {
          cir.scope {
            %14 = cir.const #cir.int<0> : !s32i loc(#loc58)
            %15 = cir.load %2 : !cir.ptr<!cir.ptr<!s32i>>, !cir.ptr<!s32i> loc(#loc59)
            %16 = cir.load %1 : !cir.ptr<!s32i>, !s32i loc(#loc60)
            %17 = cir.ptr_stride(%15 : !cir.ptr<!s32i>, %16 : !s32i), !cir.ptr<!s32i> loc(#loc61)
            cir.store %14, %17 : !s32i, !cir.ptr<!s32i> loc(#loc465)
          } loc(#loc464)
          cir.yield loc(#loc51)
        } step {
          %14 = cir.load %1 : !cir.ptr<!s32i>, !s32i loc(#loc62)
          %15 = cir.unary(inc, %14) nsw : !s32i, !s32i loc(#loc63)
          cir.store %15, %1 : !s32i, !cir.ptr<!s32i> loc(#loc466)
          cir.yield loc(#loc461)
        } loc(#loc461)
      } loc(#loc461)
      cir.scope {
        %13 = cir.load %0 : !cir.ptr<!s32i>, !s32i loc(#loc66)
        %14 = cir.const #cir.int<0> : !s32i loc(#loc67)
        %15 = cir.cmp(ge, %13, %14) : !s32i, !cir.bool loc(#loc468)
        cir.if %15 {
          %16 = cir.const #cir.int<1> : !s32i loc(#loc71)
          %17 = cir.load %2 : !cir.ptr<!cir.ptr<!s32i>>, !cir.ptr<!s32i> loc(#loc72)
          %18 = cir.load %0 : !cir.ptr<!s32i>, !s32i loc(#loc73)
          %19 = cir.ptr_stride(%17 : !cir.ptr<!s32i>, %18 : !s32i), !cir.ptr<!s32i> loc(#loc74)
          cir.store %16, %19 : !s32i, !cir.ptr<!s32i> loc(#loc470)
          cir.scope {
            %20 = cir.const #cir.int<0> : !s32i loc(#loc77)
            cir.store %20, %1 : !s32i, !cir.ptr<!s32i> loc(#loc472)
            cir.for : cond {
              %21 = cir.load %1 : !cir.ptr<!s32i>, !s32i loc(#loc79)
              %22 = cir.const #cir.int<10> : !s32i loc(#loc80)
              %23 = cir.cmp(lt, %21, %22) : !s32i, !cir.bool loc(#loc473)
              cir.condition(%23) loc(#loc81)
            } body {
              cir.scope {
                %21 = cir.load %2 : !cir.ptr<!cir.ptr<!s32i>>, !cir.ptr<!s32i> loc(#loc83)
                %22 = cir.load %1 : !cir.ptr<!s32i>, !s32i loc(#loc84)
                %23 = cir.ptr_stride(%21 : !cir.ptr<!s32i>, %22 : !s32i), !cir.ptr<!s32i> loc(#loc85)
                %24 = cir.load %23 : !cir.ptr<!s32i>, !s32i loc(#loc83)
                cir.call @printIntLine(%24) : (!s32i) -> () loc(#loc86)
              } loc(#loc474)
              cir.yield loc(#loc76)
            } step {
              %21 = cir.load %1 : !cir.ptr<!s32i>, !s32i loc(#loc87)
              %22 = cir.unary(inc, %21) nsw : !s32i, !s32i loc(#loc88)
              cir.store %22, %1 : !s32i, !cir.ptr<!s32i> loc(#loc475)
              cir.yield loc(#loc471)
            } loc(#loc471)
          } loc(#loc471)
        } else {
          %16 = cir.get_global @".str.1" : !cir.ptr<!cir.array<!s8i x 32>> loc(#loc24)
          %17 = cir.cast(array_to_ptrdecay, %16 : !cir.ptr<!cir.array<!s8i x 32>>), !cir.ptr<!s8i> loc(#loc24)
          cir.call @printLine(%17) : (!cir.ptr<!s8i>) -> () loc(#loc89)
        } loc(#loc469)
      } loc(#loc467)
      %10 = cir.get_global @free : !cir.ptr<!cir.func<(!cir.ptr<!void>)>> loc(#loc90)
      %11 = cir.load %2 : !cir.ptr<!cir.ptr<!s32i>>, !cir.ptr<!s32i> loc(#loc91)
      %12 = cir.cast(bitcast, %11 : !cir.ptr<!s32i>), !cir.ptr<!void> loc(#loc91)
      cir.call @free(%12) : (!cir.ptr<!void>) -> () extra(#fn_attr) loc(#loc90)
    } loc(#loc452)
    cir.return loc(#loc28)
  } loc(#loc450)
  cir.func no_proto @CWE122_Heap_Based_Buffer_Overflow__c_CWE129_connect_socket_41_bad() extra(#fn_attr1) {
    %0 = cir.alloca !s32i, !cir.ptr<!s32i>, ["data"] {alignment = 4 : i64} loc(#loc477)
    %1 = cir.const #cir.int<1> : !s32i loc(#loc96)
    %2 = cir.unary(minus, %1) nsw : !s32i, !s32i loc(#loc97)
    cir.store %2, %0 : !s32i, !cir.ptr<!s32i> loc(#loc478)
    cir.scope {
      %4 = cir.alloca !s32i, !cir.ptr<!s32i>, ["recvResult"] {alignment = 4 : i64} loc(#loc480)
      %5 = cir.alloca !ty_sockaddr_in, !cir.ptr<!ty_sockaddr_in>, ["service"] {alignment = 4 : i64} loc(#loc481)
      %6 = cir.alloca !s32i, !cir.ptr<!s32i>, ["connectSocket", init] {alignment = 4 : i64} loc(#loc482)
      %7 = cir.alloca !cir.array<!s8i x 14>, !cir.ptr<!cir.array<!s8i x 14>>, ["inputBuffer"] {alignment = 1 : i64} loc(#loc483)
      %8 = cir.const #cir.int<1> : !s32i loc(#loc106)
      %9 = cir.unary(minus, %8) nsw : !s32i, !s32i loc(#loc106)
      cir.store %9, %6 : !s32i, !cir.ptr<!s32i> loc(#loc482)
      cir.scope {
        cir.do {
          cir.scope {
            %10 = cir.const #cir.int<2> : !s32i loc(#loc113)
            %11 = cir.const #cir.int<1> : !s32i loc(#loc114)
            %12 = cir.const #cir.int<6> : !s32i loc(#loc115)
            %13 = cir.call @socket(%10, %11, %12) : (!s32i, !s32i, !s32i) -> !s32i extra(#fn_attr) loc(#loc116)
            cir.store %13, %6 : !s32i, !cir.ptr<!s32i> loc(#loc486)
            cir.scope {
              %52 = cir.load %6 : !cir.ptr<!s32i>, !s32i loc(#loc121)
              %53 = cir.const #cir.int<1> : !s32i loc(#loc122)
              %54 = cir.unary(minus, %53) nsw : !s32i, !s32i loc(#loc122)
              %55 = cir.cmp(eq, %52, %54) : !s32i, !cir.bool loc(#loc488)
              cir.if %55 {
                cir.break loc(#loc124)
              } loc(#loc489)
            } loc(#loc487)
            %14 = cir.cast(bitcast, %5 : !cir.ptr<!ty_sockaddr_in>), !cir.ptr<!void> loc(#loc490)
            %15 = cir.const #cir.int<0> : !s32i loc(#loc127)
            %16 = cir.const #cir.int<16> : !u64i loc(#loc491)
            cir.libc.memset %16 bytes from %14 set to %15 : !cir.ptr<!void>, !s32i, !u64i loc(#loc492)
            %17 = cir.const #cir.int<2> : !s32i loc(#loc132)
            %18 = cir.cast(integral, %17 : !s32i), !u16i loc(#loc132)
            %19 = cir.get_member %5[0] {name = "sin_family"} : !cir.ptr<!ty_sockaddr_in> -> !cir.ptr<!u16i> loc(#loc133)
            cir.store %18, %19 : !u16i, !cir.ptr<!u16i> loc(#loc493)
            %20 = cir.get_global @".str" : !cir.ptr<!cir.array<!s8i x 10>> loc(#loc5)
            %21 = cir.cast(array_to_ptrdecay, %20 : !cir.ptr<!cir.array<!s8i x 10>>), !cir.ptr<!s8i> loc(#loc5)
            %22 = cir.call @inet_addr(%21) : (!cir.ptr<!s8i>) -> !u32i extra(#fn_attr) loc(#loc135)
            %23 = cir.get_member %5[2] {name = "sin_addr"} : !cir.ptr<!ty_sockaddr_in> -> !cir.ptr<!ty_in_addr> loc(#loc136)
            %24 = cir.get_member %23[0] {name = "s_addr"} : !cir.ptr<!ty_in_addr> -> !cir.ptr<!u32i> loc(#loc137)
            cir.store %22, %24 : !u32i, !cir.ptr<!u32i> loc(#loc494)
            %25 = cir.const #cir.int<27015> : !s32i loc(#loc140)
            %26 = cir.cast(integral, %25 : !s32i), !u16i loc(#loc140)
            %27 = cir.call @htons(%26) : (!u16i) -> !u16i side_effect(const) extra(#fn_attr) loc(#loc141)
            %28 = cir.get_member %5[1] {name = "sin_port"} : !cir.ptr<!ty_sockaddr_in> -> !cir.ptr<!u16i> loc(#loc142)
            cir.store %27, %28 : !u16i, !cir.ptr<!u16i> loc(#loc495)
            cir.scope {
              %52 = cir.load %6 : !cir.ptr<!s32i>, !s32i loc(#loc147)
              %53 = cir.cast(bitcast, %5 : !cir.ptr<!ty_sockaddr_in>), !cir.ptr<!ty_sockaddr> loc(#loc497)
              %54 = cir.const #cir.int<16> : !u64i loc(#loc498)
              %55 = cir.cast(integral, %54 : !u64i), !u32i loc(#loc498)
              %56 = cir.call @connect(%52, %53, %55) : (!s32i, !cir.ptr<!ty_sockaddr>, !u32i) -> !s32i loc(#loc152)
              %57 = cir.const #cir.int<1> : !s32i loc(#loc153)
              %58 = cir.unary(minus, %57) nsw : !s32i, !s32i loc(#loc153)
              %59 = cir.cmp(eq, %56, %58) : !s32i, !cir.bool loc(#loc499)
              cir.if %59 {
                cir.break loc(#loc155)
              } loc(#loc500)
            } loc(#loc496)
            %29 = cir.load %6 : !cir.ptr<!s32i>, !s32i loc(#loc156)
            %30 = cir.cast(array_to_ptrdecay, %7 : !cir.ptr<!cir.array<!s8i x 14>>), !cir.ptr<!s8i> loc(#loc157)
            %31 = cir.cast(bitcast, %30 : !cir.ptr<!s8i>), !cir.ptr<!void> loc(#loc157)
            %32 = cir.const #cir.int<3> : !s32i loc(#loc158)
            %33 = cir.cast(integral, %32 : !s32i), !u64i loc(#loc158)
            %34 = cir.const #cir.int<4> : !u64i loc(#loc158)
            %35 = cir.binop(mul, %33, %34) : !u64i loc(#loc158)
            %36 = cir.const #cir.int<2> : !s32i loc(#loc158)
            %37 = cir.cast(integral, %36 : !s32i), !u64i loc(#loc158)
            %38 = cir.binop(add, %35, %37) : !u64i loc(#loc158)
            %39 = cir.const #cir.int<1> : !s32i loc(#loc159)
            %40 = cir.cast(integral, %39 : !s32i), !u64i loc(#loc159)
            %41 = cir.binop(sub, %38, %40) : !u64i loc(#loc501)
            %42 = cir.const #cir.int<0> : !s32i loc(#loc160)
            %43 = cir.call @recv(%29, %31, %41, %42) : (!s32i, !cir.ptr<!void>, !u64i, !s32i) -> !s64i loc(#loc161)
            %44 = cir.cast(integral, %43 : !s64i), !s32i loc(#loc161)
            cir.store %44, %4 : !s32i, !cir.ptr<!s32i> loc(#loc502)
            cir.scope {
              %52 = cir.load %4 : !cir.ptr<!s32i>, !s32i loc(#loc166)
              %53 = cir.const #cir.int<1> : !s32i loc(#loc167)
              %54 = cir.unary(minus, %53) nsw : !s32i, !s32i loc(#loc167)
              %55 = cir.cmp(eq, %52, %54) : !s32i, !cir.bool loc(#loc504)
              %56 = cir.ternary(%55, true {
                %57 = cir.const #true loc(#loc168)
                cir.yield %57 : !cir.bool loc(#loc168)
              }, false {
                %57 = cir.load %4 : !cir.ptr<!s32i>, !s32i loc(#loc169)
                %58 = cir.const #cir.int<0> : !s32i loc(#loc170)
                %59 = cir.cmp(eq, %57, %58) : !s32i, !cir.bool loc(#loc505)
                %60 = cir.ternary(%59, true {
                  %61 = cir.const #true loc(#loc168)
                  cir.yield %61 : !cir.bool loc(#loc168)
                }, false {
                  %61 = cir.const #false loc(#loc168)
                  cir.yield %61 : !cir.bool loc(#loc168)
                }) : (!cir.bool) -> !cir.bool loc(#loc168)
                cir.yield %60 : !cir.bool loc(#loc168)
              }) : (!cir.bool) -> !cir.bool loc(#loc168)
              cir.if %56 {
                cir.break loc(#loc172)
              } loc(#loc506)
            } loc(#loc503)
            %45 = cir.const #cir.int<0> : !s32i loc(#loc173)
            %46 = cir.cast(integral, %45 : !s32i), !s8i loc(#loc173)
            %47 = cir.load %4 : !cir.ptr<!s32i>, !s32i loc(#loc174)
            %48 = cir.cast(array_to_ptrdecay, %7 : !cir.ptr<!cir.array<!s8i x 14>>), !cir.ptr<!s8i> loc(#loc175)
            %49 = cir.ptr_stride(%48 : !cir.ptr<!s8i>, %47 : !s32i), !cir.ptr<!s8i> loc(#loc175)
            cir.store %46, %49 : !s8i, !cir.ptr<!s8i> loc(#loc507)
            %50 = cir.cast(array_to_ptrdecay, %7 : !cir.ptr<!cir.array<!s8i x 14>>), !cir.ptr<!s8i> loc(#loc176)
            %51 = cir.call @atoi(%50) : (!cir.ptr<!s8i>) -> !s32i side_effect(pure) extra(#fn_attr) loc(#loc177)
            cir.store %51, %0 : !s32i, !cir.ptr<!s32i> loc(#loc508)
          } loc(#loc485)
          cir.yield loc(#loc110)
        } while {
          %10 = cir.const #cir.int<0> : !s32i loc(#loc180)
          %11 = cir.cast(int_to_bool, %10 : !s32i), !cir.bool loc(#loc180)
          cir.condition(%11) loc(#loc180)
        } loc(#loc484)
      } loc(#loc484)
      cir.scope {
        %10 = cir.load %6 : !cir.ptr<!s32i>, !s32i loc(#loc183)
        %11 = cir.const #cir.int<1> : !s32i loc(#loc184)
        %12 = cir.unary(minus, %11) nsw : !s32i, !s32i loc(#loc184)
        %13 = cir.cmp(ne, %10, %12) : !s32i, !cir.bool loc(#loc510)
        cir.if %13 {
          %14 = cir.load %6 : !cir.ptr<!s32i>, !s32i loc(#loc186)
          %15 = cir.call @close(%14) : (!s32i) -> !s32i loc(#loc187)
        } loc(#loc511)
      } loc(#loc509)
    } loc(#loc479)
    %3 = cir.load %0 : !cir.ptr<!s32i>, !s32i loc(#loc188)
    cir.call @badSink(%3) : (!s32i) -> () loc(#loc189)
    cir.return loc(#loc93)
  } loc(#loc476)
  cir.func no_proto @CWE122_Heap_Based_Buffer_Overflow__c_CWE129_connect_socket_41_good() extra(#fn_attr1) {
    %0 = cir.get_global @goodB2G : !cir.ptr<!cir.func<()>> loc(#loc513)
    cir.call %0() : (!cir.ptr<!cir.func<()>>) -> () loc(#loc192)
    %1 = cir.get_global @goodG2B : !cir.ptr<!cir.func<()>> loc(#loc514)
    cir.call %1() : (!cir.ptr<!cir.func<()>>) -> () loc(#loc194)
    cir.return loc(#loc191)
  } loc(#loc512)
  cir.global "private" constant cir_private dsolocal @".str.2" = #cir.const_array<"ERROR: Array index is out-of-bounds\00" : !cir.array<!s8i x 36>> : !cir.array<!s8i x 36> {alignment = 1 : i64} loc(#loc196)
  cir.func internal private @goodB2GSink(%arg0: !s32i loc(fused[#loc199, #loc200])) extra(#fn_attr1) {
    %0 = cir.alloca !s32i, !cir.ptr<!s32i>, ["data", init] {alignment = 4 : i64} loc(#loc516)
    cir.store %arg0, %0 : !s32i, !cir.ptr<!s32i> loc(#loc201)
    cir.scope {
      %1 = cir.alloca !s32i, !cir.ptr<!s32i>, ["i"] {alignment = 4 : i64} loc(#loc518)
      %2 = cir.alloca !cir.ptr<!s32i>, !cir.ptr<!cir.ptr<!s32i>>, ["buffer", init] {alignment = 8 : i64} loc(#loc519)
      %3 = cir.get_global @malloc : !cir.ptr<!cir.func<(!u64i) -> !cir.ptr<!void>>> loc(#loc208)
      %4 = cir.const #cir.int<10> : !s32i loc(#loc209)
      %5 = cir.cast(integral, %4 : !s32i), !u64i loc(#loc209)
      %6 = cir.const #cir.int<4> : !u64i loc(#loc520)
      %7 = cir.binop(mul, %5, %6) : !u64i loc(#loc521)
      %8 = cir.call @malloc(%7) : (!u64i) -> !cir.ptr<!void> extra(#fn_attr) loc(#loc208)
      %9 = cir.cast(bitcast, %8 : !cir.ptr<!void>), !cir.ptr<!s32i> loc(#loc522)
      cir.store %9, %2 : !cir.ptr<!s32i>, !cir.ptr<!cir.ptr<!s32i>> loc(#loc519)
      cir.scope {
        %13 = cir.load %2 : !cir.ptr<!cir.ptr<!s32i>>, !cir.ptr<!s32i> loc(#loc214)
        %14 = cir.const #cir.ptr<null> : !cir.ptr<!void> loc(#loc215)
        %15 = cir.cast(bitcast, %14 : !cir.ptr<!void>), !cir.ptr<!s32i> loc(#loc215)
        %16 = cir.cmp(eq, %13, %15) : !cir.ptr<!s32i>, !cir.bool loc(#loc524)
        cir.if %16 {
          %17 = cir.get_global @exit : !cir.ptr<!cir.func<(!s32i)>> loc(#loc217)
          %18 = cir.const #cir.int<1> : !s32i loc(#loc218)
          %19 = cir.unary(minus, %18) nsw : !s32i, !s32i loc(#loc219)
          cir.call @exit(%19) : (!s32i) -> () extra(#fn_attr) loc(#loc217)
        } loc(#loc525)
      } loc(#loc523)
      cir.scope {
        %13 = cir.const #cir.int<0> : !s32i loc(#loc222)
        cir.store %13, %1 : !s32i, !cir.ptr<!s32i> loc(#loc527)
        cir.for : cond {
          %14 = cir.load %1 : !cir.ptr<!s32i>, !s32i loc(#loc224)
          %15 = cir.const #cir.int<10> : !s32i loc(#loc225)
          %16 = cir.cmp(lt, %14, %15) : !s32i, !cir.bool loc(#loc528)
          cir.condition(%16) loc(#loc226)
        } body {
          cir.scope {
            %14 = cir.const #cir.int<0> : !s32i loc(#loc228)
            %15 = cir.load %2 : !cir.ptr<!cir.ptr<!s32i>>, !cir.ptr<!s32i> loc(#loc229)
            %16 = cir.load %1 : !cir.ptr<!s32i>, !s32i loc(#loc230)
            %17 = cir.ptr_stride(%15 : !cir.ptr<!s32i>, %16 : !s32i), !cir.ptr<!s32i> loc(#loc231)
            cir.store %14, %17 : !s32i, !cir.ptr<!s32i> loc(#loc530)
          } loc(#loc529)
          cir.yield loc(#loc221)
        } step {
          %14 = cir.load %1 : !cir.ptr<!s32i>, !s32i loc(#loc232)
          %15 = cir.unary(inc, %14) nsw : !s32i, !s32i loc(#loc233)
          cir.store %15, %1 : !s32i, !cir.ptr<!s32i> loc(#loc531)
          cir.yield loc(#loc526)
        } loc(#loc526)
      } loc(#loc526)
      cir.scope {
        %13 = cir.load %0 : !cir.ptr<!s32i>, !s32i loc(#loc236)
        %14 = cir.const #cir.int<0> : !s32i loc(#loc237)
        %15 = cir.cmp(ge, %13, %14) : !s32i, !cir.bool loc(#loc533)
        %16 = cir.ternary(%15, true {
          %17 = cir.load %0 : !cir.ptr<!s32i>, !s32i loc(#loc239)
          %18 = cir.const #cir.int<10> : !s32i loc(#loc240)
          %19 = cir.cmp(lt, %17, %18) : !s32i, !cir.bool loc(#loc534)
          %20 = cir.ternary(%19, true {
            %21 = cir.const #true loc(#loc238)
            cir.yield %21 : !cir.bool loc(#loc238)
          }, false {
            %21 = cir.const #false loc(#loc238)
            cir.yield %21 : !cir.bool loc(#loc238)
          }) : (!cir.bool) -> !cir.bool loc(#loc238)
          cir.yield %20 : !cir.bool loc(#loc238)
        }, false {
          %17 = cir.const #false loc(#loc238)
          cir.yield %17 : !cir.bool loc(#loc238)
        }) : (!cir.bool) -> !cir.bool loc(#loc238)
        cir.if %16 {
          %17 = cir.const #cir.int<1> : !s32i loc(#loc245)
          %18 = cir.load %2 : !cir.ptr<!cir.ptr<!s32i>>, !cir.ptr<!s32i> loc(#loc246)
          %19 = cir.load %0 : !cir.ptr<!s32i>, !s32i loc(#loc247)
          %20 = cir.ptr_stride(%18 : !cir.ptr<!s32i>, %19 : !s32i), !cir.ptr<!s32i> loc(#loc248)
          cir.store %17, %20 : !s32i, !cir.ptr<!s32i> loc(#loc536)
          cir.scope {
            %21 = cir.const #cir.int<0> : !s32i loc(#loc251)
            cir.store %21, %1 : !s32i, !cir.ptr<!s32i> loc(#loc538)
            cir.for : cond {
              %22 = cir.load %1 : !cir.ptr<!s32i>, !s32i loc(#loc253)
              %23 = cir.const #cir.int<10> : !s32i loc(#loc254)
              %24 = cir.cmp(lt, %22, %23) : !s32i, !cir.bool loc(#loc539)
              cir.condition(%24) loc(#loc255)
            } body {
              cir.scope {
                %22 = cir.load %2 : !cir.ptr<!cir.ptr<!s32i>>, !cir.ptr<!s32i> loc(#loc257)
                %23 = cir.load %1 : !cir.ptr<!s32i>, !s32i loc(#loc258)
                %24 = cir.ptr_stride(%22 : !cir.ptr<!s32i>, %23 : !s32i), !cir.ptr<!s32i> loc(#loc259)
                %25 = cir.load %24 : !cir.ptr<!s32i>, !s32i loc(#loc257)
                cir.call @printIntLine(%25) : (!s32i) -> () loc(#loc260)
              } loc(#loc540)
              cir.yield loc(#loc250)
            } step {
              %22 = cir.load %1 : !cir.ptr<!s32i>, !s32i loc(#loc261)
              %23 = cir.unary(inc, %22) nsw : !s32i, !s32i loc(#loc262)
              cir.store %23, %1 : !s32i, !cir.ptr<!s32i> loc(#loc541)
              cir.yield loc(#loc537)
            } loc(#loc537)
          } loc(#loc537)
        } else {
          %17 = cir.get_global @".str.2" : !cir.ptr<!cir.array<!s8i x 36>> loc(#loc196)
          %18 = cir.cast(array_to_ptrdecay, %17 : !cir.ptr<!cir.array<!s8i x 36>>), !cir.ptr<!s8i> loc(#loc196)
          cir.call @printLine(%18) : (!cir.ptr<!s8i>) -> () loc(#loc263)
        } loc(#loc535)
      } loc(#loc532)
      %10 = cir.get_global @free : !cir.ptr<!cir.func<(!cir.ptr<!void>)>> loc(#loc264)
      %11 = cir.load %2 : !cir.ptr<!cir.ptr<!s32i>>, !cir.ptr<!s32i> loc(#loc265)
      %12 = cir.cast(bitcast, %11 : !cir.ptr<!s32i>), !cir.ptr<!void> loc(#loc265)
      cir.call @free(%12) : (!cir.ptr<!void>) -> () extra(#fn_attr) loc(#loc264)
    } loc(#loc517)
    cir.return loc(#loc198)
  } loc(#loc515)
  cir.func no_proto internal private @goodB2G() extra(#fn_attr1) {
    %0 = cir.alloca !s32i, !cir.ptr<!s32i>, ["data"] {alignment = 4 : i64} loc(#loc543)
    %1 = cir.const #cir.int<1> : !s32i loc(#loc270)
    %2 = cir.unary(minus, %1) nsw : !s32i, !s32i loc(#loc271)
    cir.store %2, %0 : !s32i, !cir.ptr<!s32i> loc(#loc544)
    cir.scope {
      %4 = cir.alloca !s32i, !cir.ptr<!s32i>, ["recvResult"] {alignment = 4 : i64} loc(#loc546)
      %5 = cir.alloca !ty_sockaddr_in, !cir.ptr<!ty_sockaddr_in>, ["service"] {alignment = 4 : i64} loc(#loc547)
      %6 = cir.alloca !s32i, !cir.ptr<!s32i>, ["connectSocket", init] {alignment = 4 : i64} loc(#loc548)
      %7 = cir.alloca !cir.array<!s8i x 14>, !cir.ptr<!cir.array<!s8i x 14>>, ["inputBuffer"] {alignment = 1 : i64} loc(#loc549)
      %8 = cir.const #cir.int<1> : !s32i loc(#loc280)
      %9 = cir.unary(minus, %8) nsw : !s32i, !s32i loc(#loc280)
      cir.store %9, %6 : !s32i, !cir.ptr<!s32i> loc(#loc548)
      cir.scope {
        cir.do {
          cir.scope {
            %10 = cir.const #cir.int<2> : !s32i loc(#loc287)
            %11 = cir.const #cir.int<1> : !s32i loc(#loc288)
            %12 = cir.const #cir.int<6> : !s32i loc(#loc289)
            %13 = cir.call @socket(%10, %11, %12) : (!s32i, !s32i, !s32i) -> !s32i extra(#fn_attr) loc(#loc290)
            cir.store %13, %6 : !s32i, !cir.ptr<!s32i> loc(#loc552)
            cir.scope {
              %52 = cir.load %6 : !cir.ptr<!s32i>, !s32i loc(#loc295)
              %53 = cir.const #cir.int<1> : !s32i loc(#loc296)
              %54 = cir.unary(minus, %53) nsw : !s32i, !s32i loc(#loc296)
              %55 = cir.cmp(eq, %52, %54) : !s32i, !cir.bool loc(#loc554)
              cir.if %55 {
                cir.break loc(#loc298)
              } loc(#loc555)
            } loc(#loc553)
            %14 = cir.cast(bitcast, %5 : !cir.ptr<!ty_sockaddr_in>), !cir.ptr<!void> loc(#loc556)
            %15 = cir.const #cir.int<0> : !s32i loc(#loc301)
            %16 = cir.const #cir.int<16> : !u64i loc(#loc557)
            cir.libc.memset %16 bytes from %14 set to %15 : !cir.ptr<!void>, !s32i, !u64i loc(#loc558)
            %17 = cir.const #cir.int<2> : !s32i loc(#loc306)
            %18 = cir.cast(integral, %17 : !s32i), !u16i loc(#loc306)
            %19 = cir.get_member %5[0] {name = "sin_family"} : !cir.ptr<!ty_sockaddr_in> -> !cir.ptr<!u16i> loc(#loc133)
            cir.store %18, %19 : !u16i, !cir.ptr<!u16i> loc(#loc559)
            %20 = cir.get_global @".str" : !cir.ptr<!cir.array<!s8i x 10>> loc(#loc308)
            %21 = cir.cast(array_to_ptrdecay, %20 : !cir.ptr<!cir.array<!s8i x 10>>), !cir.ptr<!s8i> loc(#loc308)
            %22 = cir.call @inet_addr(%21) : (!cir.ptr<!s8i>) -> !u32i extra(#fn_attr) loc(#loc309)
            %23 = cir.get_member %5[2] {name = "sin_addr"} : !cir.ptr<!ty_sockaddr_in> -> !cir.ptr<!ty_in_addr> loc(#loc136)
            %24 = cir.get_member %23[0] {name = "s_addr"} : !cir.ptr<!ty_in_addr> -> !cir.ptr<!u32i> loc(#loc137)
            cir.store %22, %24 : !u32i, !cir.ptr<!u32i> loc(#loc560)
            %25 = cir.const #cir.int<27015> : !s32i loc(#loc312)
            %26 = cir.cast(integral, %25 : !s32i), !u16i loc(#loc312)
            %27 = cir.call @htons(%26) : (!u16i) -> !u16i side_effect(const) extra(#fn_attr) loc(#loc313)
            %28 = cir.get_member %5[1] {name = "sin_port"} : !cir.ptr<!ty_sockaddr_in> -> !cir.ptr<!u16i> loc(#loc142)
            cir.store %27, %28 : !u16i, !cir.ptr<!u16i> loc(#loc561)
            cir.scope {
              %52 = cir.load %6 : !cir.ptr<!s32i>, !s32i loc(#loc318)
              %53 = cir.cast(bitcast, %5 : !cir.ptr<!ty_sockaddr_in>), !cir.ptr<!ty_sockaddr> loc(#loc563)
              %54 = cir.const #cir.int<16> : !u64i loc(#loc564)
              %55 = cir.cast(integral, %54 : !u64i), !u32i loc(#loc564)
              %56 = cir.call @connect(%52, %53, %55) : (!s32i, !cir.ptr<!ty_sockaddr>, !u32i) -> !s32i loc(#loc323)
              %57 = cir.const #cir.int<1> : !s32i loc(#loc324)
              %58 = cir.unary(minus, %57) nsw : !s32i, !s32i loc(#loc324)
              %59 = cir.cmp(eq, %56, %58) : !s32i, !cir.bool loc(#loc565)
              cir.if %59 {
                cir.break loc(#loc326)
              } loc(#loc566)
            } loc(#loc562)
            %29 = cir.load %6 : !cir.ptr<!s32i>, !s32i loc(#loc327)
            %30 = cir.cast(array_to_ptrdecay, %7 : !cir.ptr<!cir.array<!s8i x 14>>), !cir.ptr<!s8i> loc(#loc328)
            %31 = cir.cast(bitcast, %30 : !cir.ptr<!s8i>), !cir.ptr<!void> loc(#loc328)
            %32 = cir.const #cir.int<3> : !s32i loc(#loc329)
            %33 = cir.cast(integral, %32 : !s32i), !u64i loc(#loc329)
            %34 = cir.const #cir.int<4> : !u64i loc(#loc329)
            %35 = cir.binop(mul, %33, %34) : !u64i loc(#loc329)
            %36 = cir.const #cir.int<2> : !s32i loc(#loc329)
            %37 = cir.cast(integral, %36 : !s32i), !u64i loc(#loc329)
            %38 = cir.binop(add, %35, %37) : !u64i loc(#loc329)
            %39 = cir.const #cir.int<1> : !s32i loc(#loc330)
            %40 = cir.cast(integral, %39 : !s32i), !u64i loc(#loc330)
            %41 = cir.binop(sub, %38, %40) : !u64i loc(#loc567)
            %42 = cir.const #cir.int<0> : !s32i loc(#loc331)
            %43 = cir.call @recv(%29, %31, %41, %42) : (!s32i, !cir.ptr<!void>, !u64i, !s32i) -> !s64i loc(#loc332)
            %44 = cir.cast(integral, %43 : !s64i), !s32i loc(#loc332)
            cir.store %44, %4 : !s32i, !cir.ptr<!s32i> loc(#loc568)
            cir.scope {
              %52 = cir.load %4 : !cir.ptr<!s32i>, !s32i loc(#loc337)
              %53 = cir.const #cir.int<1> : !s32i loc(#loc338)
              %54 = cir.unary(minus, %53) nsw : !s32i, !s32i loc(#loc338)
              %55 = cir.cmp(eq, %52, %54) : !s32i, !cir.bool loc(#loc570)
              %56 = cir.ternary(%55, true {
                %57 = cir.const #true loc(#loc339)
                cir.yield %57 : !cir.bool loc(#loc339)
              }, false {
                %57 = cir.load %4 : !cir.ptr<!s32i>, !s32i loc(#loc340)
                %58 = cir.const #cir.int<0> : !s32i loc(#loc341)
                %59 = cir.cmp(eq, %57, %58) : !s32i, !cir.bool loc(#loc571)
                %60 = cir.ternary(%59, true {
                  %61 = cir.const #true loc(#loc339)
                  cir.yield %61 : !cir.bool loc(#loc339)
                }, false {
                  %61 = cir.const #false loc(#loc339)
                  cir.yield %61 : !cir.bool loc(#loc339)
                }) : (!cir.bool) -> !cir.bool loc(#loc339)
                cir.yield %60 : !cir.bool loc(#loc339)
              }) : (!cir.bool) -> !cir.bool loc(#loc339)
              cir.if %56 {
                cir.break loc(#loc343)
              } loc(#loc572)
            } loc(#loc569)
            %45 = cir.const #cir.int<0> : !s32i loc(#loc344)
            %46 = cir.cast(integral, %45 : !s32i), !s8i loc(#loc344)
            %47 = cir.load %4 : !cir.ptr<!s32i>, !s32i loc(#loc345)
            %48 = cir.cast(array_to_ptrdecay, %7 : !cir.ptr<!cir.array<!s8i x 14>>), !cir.ptr<!s8i> loc(#loc346)
            %49 = cir.ptr_stride(%48 : !cir.ptr<!s8i>, %47 : !s32i), !cir.ptr<!s8i> loc(#loc346)
            cir.store %46, %49 : !s8i, !cir.ptr<!s8i> loc(#loc573)
            %50 = cir.cast(array_to_ptrdecay, %7 : !cir.ptr<!cir.array<!s8i x 14>>), !cir.ptr<!s8i> loc(#loc347)
            %51 = cir.call @atoi(%50) : (!cir.ptr<!s8i>) -> !s32i side_effect(pure) extra(#fn_attr) loc(#loc348)
            cir.store %51, %0 : !s32i, !cir.ptr<!s32i> loc(#loc574)
          } loc(#loc551)
          cir.yield loc(#loc284)
        } while {
          %10 = cir.const #cir.int<0> : !s32i loc(#loc351)
          %11 = cir.cast(int_to_bool, %10 : !s32i), !cir.bool loc(#loc351)
          cir.condition(%11) loc(#loc351)
        } loc(#loc550)
      } loc(#loc550)
      cir.scope {
        %10 = cir.load %6 : !cir.ptr<!s32i>, !s32i loc(#loc354)
        %11 = cir.const #cir.int<1> : !s32i loc(#loc355)
        %12 = cir.unary(minus, %11) nsw : !s32i, !s32i loc(#loc355)
        %13 = cir.cmp(ne, %10, %12) : !s32i, !cir.bool loc(#loc576)
        cir.if %13 {
          %14 = cir.load %6 : !cir.ptr<!s32i>, !s32i loc(#loc357)
          %15 = cir.call @close(%14) : (!s32i) -> !s32i loc(#loc358)
        } loc(#loc577)
      } loc(#loc575)
    } loc(#loc545)
    %3 = cir.load %0 : !cir.ptr<!s32i>, !s32i loc(#loc359)
    cir.call @goodB2GSink(%3) : (!s32i) -> () loc(#loc360)
    cir.return loc(#loc267)
  } loc(#loc542)
  cir.func internal private @goodG2BSink(%arg0: !s32i loc(fused[#loc363, #loc364])) extra(#fn_attr1) {
    %0 = cir.alloca !s32i, !cir.ptr<!s32i>, ["data", init] {alignment = 4 : i64} loc(#loc579)
    cir.store %arg0, %0 : !s32i, !cir.ptr<!s32i> loc(#loc365)
    cir.scope {
      %1 = cir.alloca !s32i, !cir.ptr<!s32i>, ["i"] {alignment = 4 : i64} loc(#loc581)
      %2 = cir.alloca !cir.ptr<!s32i>, !cir.ptr<!cir.ptr<!s32i>>, ["buffer", init] {alignment = 8 : i64} loc(#loc582)
      %3 = cir.get_global @malloc : !cir.ptr<!cir.func<(!u64i) -> !cir.ptr<!void>>> loc(#loc372)
      %4 = cir.const #cir.int<10> : !s32i loc(#loc373)
      %5 = cir.cast(integral, %4 : !s32i), !u64i loc(#loc373)
      %6 = cir.const #cir.int<4> : !u64i loc(#loc583)
      %7 = cir.binop(mul, %5, %6) : !u64i loc(#loc584)
      %8 = cir.call @malloc(%7) : (!u64i) -> !cir.ptr<!void> extra(#fn_attr) loc(#loc372)
      %9 = cir.cast(bitcast, %8 : !cir.ptr<!void>), !cir.ptr<!s32i> loc(#loc585)
      cir.store %9, %2 : !cir.ptr<!s32i>, !cir.ptr<!cir.ptr<!s32i>> loc(#loc582)
      cir.scope {
        %13 = cir.load %2 : !cir.ptr<!cir.ptr<!s32i>>, !cir.ptr<!s32i> loc(#loc378)
        %14 = cir.const #cir.ptr<null> : !cir.ptr<!void> loc(#loc379)
        %15 = cir.cast(bitcast, %14 : !cir.ptr<!void>), !cir.ptr<!s32i> loc(#loc379)
        %16 = cir.cmp(eq, %13, %15) : !cir.ptr<!s32i>, !cir.bool loc(#loc587)
        cir.if %16 {
          %17 = cir.get_global @exit : !cir.ptr<!cir.func<(!s32i)>> loc(#loc381)
          %18 = cir.const #cir.int<1> : !s32i loc(#loc382)
          %19 = cir.unary(minus, %18) nsw : !s32i, !s32i loc(#loc383)
          cir.call @exit(%19) : (!s32i) -> () extra(#fn_attr) loc(#loc381)
        } loc(#loc588)
      } loc(#loc586)
      cir.scope {
        %13 = cir.const #cir.int<0> : !s32i loc(#loc386)
        cir.store %13, %1 : !s32i, !cir.ptr<!s32i> loc(#loc590)
        cir.for : cond {
          %14 = cir.load %1 : !cir.ptr<!s32i>, !s32i loc(#loc388)
          %15 = cir.const #cir.int<10> : !s32i loc(#loc389)
          %16 = cir.cmp(lt, %14, %15) : !s32i, !cir.bool loc(#loc591)
          cir.condition(%16) loc(#loc390)
        } body {
          cir.scope {
            %14 = cir.const #cir.int<0> : !s32i loc(#loc392)
            %15 = cir.load %2 : !cir.ptr<!cir.ptr<!s32i>>, !cir.ptr<!s32i> loc(#loc393)
            %16 = cir.load %1 : !cir.ptr<!s32i>, !s32i loc(#loc394)
            %17 = cir.ptr_stride(%15 : !cir.ptr<!s32i>, %16 : !s32i), !cir.ptr<!s32i> loc(#loc395)
            cir.store %14, %17 : !s32i, !cir.ptr<!s32i> loc(#loc593)
          } loc(#loc592)
          cir.yield loc(#loc385)
        } step {
          %14 = cir.load %1 : !cir.ptr<!s32i>, !s32i loc(#loc396)
          %15 = cir.unary(inc, %14) nsw : !s32i, !s32i loc(#loc397)
          cir.store %15, %1 : !s32i, !cir.ptr<!s32i> loc(#loc594)
          cir.yield loc(#loc589)
        } loc(#loc589)
      } loc(#loc589)
      cir.scope {
        %13 = cir.load %0 : !cir.ptr<!s32i>, !s32i loc(#loc400)
        %14 = cir.const #cir.int<0> : !s32i loc(#loc401)
        %15 = cir.cmp(ge, %13, %14) : !s32i, !cir.bool loc(#loc596)
        cir.if %15 {
          %16 = cir.const #cir.int<1> : !s32i loc(#loc405)
          %17 = cir.load %2 : !cir.ptr<!cir.ptr<!s32i>>, !cir.ptr<!s32i> loc(#loc406)
          %18 = cir.load %0 : !cir.ptr<!s32i>, !s32i loc(#loc407)
          %19 = cir.ptr_stride(%17 : !cir.ptr<!s32i>, %18 : !s32i), !cir.ptr<!s32i> loc(#loc408)
          cir.store %16, %19 : !s32i, !cir.ptr<!s32i> loc(#loc598)
          cir.scope {
            %20 = cir.const #cir.int<0> : !s32i loc(#loc411)
            cir.store %20, %1 : !s32i, !cir.ptr<!s32i> loc(#loc600)
            cir.for : cond {
              %21 = cir.load %1 : !cir.ptr<!s32i>, !s32i loc(#loc413)
              %22 = cir.const #cir.int<10> : !s32i loc(#loc414)
              %23 = cir.cmp(lt, %21, %22) : !s32i, !cir.bool loc(#loc601)
              cir.condition(%23) loc(#loc415)
            } body {
              cir.scope {
                %21 = cir.load %2 : !cir.ptr<!cir.ptr<!s32i>>, !cir.ptr<!s32i> loc(#loc417)
                %22 = cir.load %1 : !cir.ptr<!s32i>, !s32i loc(#loc418)
                %23 = cir.ptr_stride(%21 : !cir.ptr<!s32i>, %22 : !s32i), !cir.ptr<!s32i> loc(#loc419)
                %24 = cir.load %23 : !cir.ptr<!s32i>, !s32i loc(#loc417)
                cir.call @printIntLine(%24) : (!s32i) -> () loc(#loc420)
              } loc(#loc602)
              cir.yield loc(#loc410)
            } step {
              %21 = cir.load %1 : !cir.ptr<!s32i>, !s32i loc(#loc421)
              %22 = cir.unary(inc, %21) nsw : !s32i, !s32i loc(#loc422)
              cir.store %22, %1 : !s32i, !cir.ptr<!s32i> loc(#loc603)
              cir.yield loc(#loc599)
            } loc(#loc599)
          } loc(#loc599)
        } else {
          %16 = cir.get_global @".str.1" : !cir.ptr<!cir.array<!s8i x 32>> loc(#loc423)
          %17 = cir.cast(array_to_ptrdecay, %16 : !cir.ptr<!cir.array<!s8i x 32>>), !cir.ptr<!s8i> loc(#loc423)
          cir.call @printLine(%17) : (!cir.ptr<!s8i>) -> () loc(#loc424)
        } loc(#loc597)
      } loc(#loc595)
      %10 = cir.get_global @free : !cir.ptr<!cir.func<(!cir.ptr<!void>)>> loc(#loc425)
      %11 = cir.load %2 : !cir.ptr<!cir.ptr<!s32i>>, !cir.ptr<!s32i> loc(#loc426)
      %12 = cir.cast(bitcast, %11 : !cir.ptr<!s32i>), !cir.ptr<!void> loc(#loc426)
      cir.call @free(%12) : (!cir.ptr<!void>) -> () extra(#fn_attr) loc(#loc425)
    } loc(#loc580)
    cir.return loc(#loc362)
  } loc(#loc578)
  cir.func no_proto internal private @goodG2B() extra(#fn_attr1) {
    %0 = cir.alloca !s32i, !cir.ptr<!s32i>, ["data"] {alignment = 4 : i64} loc(#loc605)
    %1 = cir.const #cir.int<1> : !s32i loc(#loc431)
    %2 = cir.unary(minus, %1) nsw : !s32i, !s32i loc(#loc432)
    cir.store %2, %0 : !s32i, !cir.ptr<!s32i> loc(#loc606)
    %3 = cir.const #cir.int<7> : !s32i loc(#loc434)
    cir.store %3, %0 : !s32i, !cir.ptr<!s32i> loc(#loc607)
    %4 = cir.load %0 : !cir.ptr<!s32i>, !s32i loc(#loc436)
    cir.call @goodG2BSink(%4) : (!s32i) -> () loc(#loc437)
    cir.return loc(#loc428)
  } loc(#loc604)
} loc(#loc)
#loc = loc("/workspaces/juliet-c/testcases/CWE122_Heap_Based_Buffer_Overflow/s06/CWE122_Heap_Based_Buffer_Overflow__c_CWE129_connect_socket_41.c":0:0)
#loc1 = loc("/usr/include/x86_64-linux-gnu/sys/socket.h":102:1)
#loc2 = loc("/usr/include/x86_64-linux-gnu/sys/socket.h":102:62)
#loc3 = loc("/usr/include/arpa/inet.h":34:1)
#loc4 = loc("/usr/include/arpa/inet.h":34:47)
#loc5 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_connect_socket_41.c":105:49)
#loc6 = loc("/usr/include/netinet/in.h":402:1)
#loc7 = loc("/usr/include/netinet/in.h":403:40)
#loc8 = loc("/usr/include/x86_64-linux-gnu/sys/socket.h":126:1)
#loc9 = loc("/usr/include/x86_64-linux-gnu/sys/socket.h":126:75)
#loc10 = loc("/usr/include/x86_64-linux-gnu/sys/socket.h":145:1)
#loc11 = loc("/usr/include/x86_64-linux-gnu/sys/socket.h":145:68)
#loc12 = loc("/usr/include/stdlib.h":105:1)
#loc13 = loc("/usr/include/stdlib.h":106:33)
#loc14 = loc("/usr/include/unistd.h":358:1)
#loc15 = loc("/usr/include/unistd.h":358:27)
#loc16 = loc("/usr/include/stdlib.h":672:1)
#loc17 = loc("/usr/include/stdlib.h":672:45)
#loc18 = loc("/usr/include/stdlib.h":756:1)
#loc19 = loc("/usr/include/stdlib.h":756:70)
#loc20 = loc("../../../testcasesupport/std_testcase_io.h":18:1)
#loc21 = loc("../../../testcasesupport/std_testcase_io.h":18:33)
#loc22 = loc("../../../testcasesupport/std_testcase_io.h":14:1)
#loc23 = loc("../../../testcasesupport/std_testcase_io.h":14:33)
#loc24 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_connect_socket_41.c":68:23)
#loc25 = loc("/usr/include/stdlib.h":687:1)
#loc26 = loc("/usr/include/stdlib.h":687:32)
#loc27 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_connect_socket_41.c":44:1)
#loc28 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_connect_socket_41.c":72:1)
#loc31 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_connect_socket_41.c":45:1)
#loc32 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_connect_socket_41.c":46:5)
#loc33 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_connect_socket_41.c":71:5)
#loc34 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_connect_socket_41.c":47:9)
#loc35 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_connect_socket_41.c":47:13)
#loc36 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_connect_socket_41.c":48:9)
#loc37 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_connect_socket_41.c":48:54)
#loc38 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_connect_socket_41.c":48:31)
#loc39 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_connect_socket_41.c":48:38)
#loc40 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_connect_socket_41.c":48:43)
#loc41 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_connect_socket_41.c":48:53)
#loc42 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_connect_socket_41.c":49:9)
#loc43 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_connect_socket_41.c":49:39)
#loc44 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_connect_socket_41.c":49:13)
#loc45 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_connect_socket_41.c":49:23)
#loc46 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_connect_socket_41.c":49:29)
#loc47 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_connect_socket_41.c":49:30)
#loc48 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_connect_socket_41.c":49:36)
#loc49 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_connect_socket_41.c":49:35)
#loc50 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_connect_socket_41.c":51:9)
#loc51 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_connect_socket_41.c":54:9)
#loc52 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_connect_socket_41.c":51:18)
#loc53 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_connect_socket_41.c":51:14)
#loc54 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_connect_socket_41.c":51:21)
#loc55 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_connect_socket_41.c":51:25)
#loc56 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_connect_socket_41.c":51:23)
#loc57 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_connect_socket_41.c":52:9)
#loc58 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_connect_socket_41.c":53:25)
#loc59 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_connect_socket_41.c":53:13)
#loc60 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_connect_socket_41.c":53:20)
#loc61 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_connect_socket_41.c":53:21)
#loc62 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_connect_socket_41.c":51:30)
#loc63 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_connect_socket_41.c":51:29)
#loc64 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_connect_socket_41.c":57:9)
#loc65 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_connect_socket_41.c":69:9)
#loc66 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_connect_socket_41.c":57:13)
#loc67 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_connect_socket_41.c":57:21)
#loc68 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_connect_socket_41.c":58:9)
#loc69 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_connect_socket_41.c":65:9)
#loc70 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_connect_socket_41.c":67:9)
#loc71 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_connect_socket_41.c":59:28)
#loc72 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_connect_socket_41.c":59:13)
#loc73 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_connect_socket_41.c":59:20)
#loc74 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_connect_socket_41.c":59:24)
#loc75 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_connect_socket_41.c":61:13)
#loc76 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_connect_socket_41.c":64:13)
#loc77 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_connect_socket_41.c":61:21)
#loc78 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_connect_socket_41.c":61:17)
#loc79 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_connect_socket_41.c":61:24)
#loc80 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_connect_socket_41.c":61:28)
#loc81 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_connect_socket_41.c":61:26)
#loc82 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_connect_socket_41.c":62:13)
#loc83 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_connect_socket_41.c":63:30)
#loc84 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_connect_socket_41.c":63:37)
#loc85 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_connect_socket_41.c":63:38)
#loc86 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_connect_socket_41.c":63:17)
#loc87 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_connect_socket_41.c":61:33)
#loc88 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_connect_socket_41.c":61:32)
#loc89 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_connect_socket_41.c":68:13)
#loc90 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_connect_socket_41.c":70:9)
#loc91 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_connect_socket_41.c":70:14)
#loc92 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_connect_socket_41.c":74:1)
#loc93 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_connect_socket_41.c":136:1)
#loc94 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_connect_socket_41.c":76:5)
#loc95 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_connect_socket_41.c":76:9)
#loc96 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_connect_socket_41.c":78:13)
#loc97 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_connect_socket_41.c":78:12)
#loc98 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_connect_socket_41.c":78:5)
#loc99 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_connect_socket_41.c":79:5)
#loc100 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_connect_socket_41.c":134:5)
#loc101 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_connect_socket_41.c":84:9)
#loc102 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_connect_socket_41.c":84:13)
#loc103 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_connect_socket_41.c":85:9)
#loc104 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_connect_socket_41.c":85:28)
#loc105 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_connect_socket_41.c":86:9)
#loc106 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_connect_socket_41.c":86:32)
#loc107 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_connect_socket_41.c":87:9)
#loc108 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_connect_socket_41.c":87:41)
#loc109 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_connect_socket_41.c":88:9)
#loc110 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_connect_socket_41.c":123:17)
#loc111 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_connect_socket_41.c":89:9)
#loc112 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_connect_socket_41.c":122:9)
#loc113 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_connect_socket_41.c":98:36)
#loc114 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_connect_socket_41.c":98:45)
#loc115 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_connect_socket_41.c":98:58)
#loc116 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_connect_socket_41.c":98:29)
#loc117 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_connect_socket_41.c":98:13)
#loc118 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_connect_socket_41.c":98:69)
#loc119 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_connect_socket_41.c":99:13)
#loc120 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_connect_socket_41.c":102:13)
#loc121 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_connect_socket_41.c":99:17)
#loc122 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_connect_socket_41.c":99:34)
#loc123 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_connect_socket_41.c":100:13)
#loc124 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_connect_socket_41.c":101:17)
#loc125 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_connect_socket_41.c":103:20)
#loc126 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_connect_socket_41.c":103:21)
#loc127 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_connect_socket_41.c":103:30)
#loc128 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_connect_socket_41.c":103:33)
#loc129 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_connect_socket_41.c":103:47)
#loc130 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_connect_socket_41.c":103:13)
#loc131 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_connect_socket_41.c":103:48)
#loc132 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_connect_socket_41.c":104:34)
#loc133 = loc("/usr/include/netinet/in.h":249:5)
#loc134 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_connect_socket_41.c":104:13)
#loc135 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_connect_socket_41.c":105:39)
#loc136 = loc("/usr/include/netinet/in.h":251:20)
#loc137 = loc("/usr/include/netinet/in.h":33:15)
#loc138 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_connect_socket_41.c":105:13)
#loc139 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_connect_socket_41.c":105:59)
#loc140 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_connect_socket_41.c":106:38)
#loc141 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_connect_socket_41.c":106:32)
#loc142 = loc("/usr/include/netinet/in.h":250:15)
#loc143 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_connect_socket_41.c":106:13)
#loc144 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_connect_socket_41.c":106:46)
#loc145 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_connect_socket_41.c":107:13)
#loc146 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_connect_socket_41.c":110:13)
#loc147 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_connect_socket_41.c":107:25)
#loc148 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_connect_socket_41.c":107:58)
#loc149 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_connect_socket_41.c":107:59)
#loc150 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_connect_socket_41.c":107:68)
#loc151 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_connect_socket_41.c":107:82)
#loc152 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_connect_socket_41.c":107:17)
#loc153 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_connect_socket_41.c":107:88)
#loc154 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_connect_socket_41.c":108:13)
#loc155 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_connect_socket_41.c":109:17)
#loc156 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_connect_socket_41.c":113:31)
#loc157 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_connect_socket_41.c":113:46)
#loc158 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_connect_socket_41.c":113:59)
#loc159 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_connect_socket_41.c":113:77)
#loc160 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_connect_socket_41.c":113:80)
#loc161 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_connect_socket_41.c":113:26)
#loc162 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_connect_socket_41.c":113:13)
#loc163 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_connect_socket_41.c":113:81)
#loc164 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_connect_socket_41.c":114:13)
#loc165 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_connect_socket_41.c":117:13)
#loc166 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_connect_socket_41.c":114:17)
#loc167 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_connect_socket_41.c":114:31)
#loc168 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_connect_socket_41.c":114:44)
#loc169 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_connect_socket_41.c":114:47)
#loc170 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_connect_socket_41.c":114:61)
#loc171 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_connect_socket_41.c":115:13)
#loc172 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_connect_socket_41.c":116:17)
#loc173 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_connect_socket_41.c":119:39)
#loc174 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_connect_socket_41.c":119:25)
#loc175 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_connect_socket_41.c":119:13)
#loc176 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_connect_socket_41.c":121:25)
#loc177 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_connect_socket_41.c":121:20)
#loc178 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_connect_socket_41.c":121:13)
#loc179 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_connect_socket_41.c":121:36)
#loc180 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_connect_socket_41.c":123:16)
#loc181 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_connect_socket_41.c":124:9)
#loc182 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_connect_socket_41.c":127:9)
#loc183 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_connect_socket_41.c":124:13)
#loc184 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_connect_socket_41.c":124:30)
#loc185 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_connect_socket_41.c":125:9)
#loc186 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_connect_socket_41.c":126:26)
#loc187 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_connect_socket_41.c":126:13)
#loc188 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_connect_socket_41.c":135:13)
#loc189 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_connect_socket_41.c":135:5)
#loc190 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_connect_socket_41.c":278:1)
#loc191 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_connect_socket_41.c":282:1)
#loc192 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_connect_socket_41.c":280:5)
#loc193 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_connect_socket_41.c":280:13)
#loc194 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_connect_socket_41.c":281:5)
#loc195 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_connect_socket_41.c":281:13)
#loc196 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_connect_socket_41.c":208:23)
#loc197 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_connect_socket_41.c":185:1)
#loc198 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_connect_socket_41.c":212:1)
#loc201 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_connect_socket_41.c":186:1)
#loc202 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_connect_socket_41.c":187:5)
#loc203 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_connect_socket_41.c":211:5)
#loc204 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_connect_socket_41.c":188:9)
#loc205 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_connect_socket_41.c":188:13)
#loc206 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_connect_socket_41.c":189:9)
#loc207 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_connect_socket_41.c":189:54)
#loc208 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_connect_socket_41.c":189:31)
#loc209 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_connect_socket_41.c":189:38)
#loc210 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_connect_socket_41.c":189:43)
#loc211 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_connect_socket_41.c":189:53)
#loc212 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_connect_socket_41.c":190:9)
#loc213 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_connect_socket_41.c":190:39)
#loc214 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_connect_socket_41.c":190:13)
#loc215 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_connect_socket_41.c":190:23)
#loc216 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_connect_socket_41.c":190:29)
#loc217 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_connect_socket_41.c":190:30)
#loc218 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_connect_socket_41.c":190:36)
#loc219 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_connect_socket_41.c":190:35)
#loc220 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_connect_socket_41.c":192:9)
#loc221 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_connect_socket_41.c":195:9)
#loc222 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_connect_socket_41.c":192:18)
#loc223 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_connect_socket_41.c":192:14)
#loc224 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_connect_socket_41.c":192:21)
#loc225 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_connect_socket_41.c":192:25)
#loc226 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_connect_socket_41.c":192:23)
#loc227 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_connect_socket_41.c":193:9)
#loc228 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_connect_socket_41.c":194:25)
#loc229 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_connect_socket_41.c":194:13)
#loc230 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_connect_socket_41.c":194:20)
#loc231 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_connect_socket_41.c":194:21)
#loc232 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_connect_socket_41.c":192:30)
#loc233 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_connect_socket_41.c":192:29)
#loc234 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_connect_socket_41.c":197:9)
#loc235 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_connect_socket_41.c":209:9)
#loc236 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_connect_socket_41.c":197:13)
#loc237 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_connect_socket_41.c":197:21)
#loc238 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_connect_socket_41.c":197:23)
#loc239 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_connect_socket_41.c":197:26)
#loc240 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_connect_socket_41.c":197:34)
#loc241 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_connect_socket_41.c":197:36)
#loc242 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_connect_socket_41.c":198:9)
#loc243 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_connect_socket_41.c":205:9)
#loc244 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_connect_socket_41.c":207:9)
#loc245 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_connect_socket_41.c":199:28)
#loc246 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_connect_socket_41.c":199:13)
#loc247 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_connect_socket_41.c":199:20)
#loc248 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_connect_socket_41.c":199:24)
#loc249 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_connect_socket_41.c":201:13)
#loc250 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_connect_socket_41.c":204:13)
#loc251 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_connect_socket_41.c":201:21)
#loc252 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_connect_socket_41.c":201:17)
#loc253 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_connect_socket_41.c":201:24)
#loc254 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_connect_socket_41.c":201:28)
#loc255 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_connect_socket_41.c":201:26)
#loc256 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_connect_socket_41.c":202:13)
#loc257 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_connect_socket_41.c":203:30)
#loc258 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_connect_socket_41.c":203:37)
#loc259 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_connect_socket_41.c":203:38)
#loc260 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_connect_socket_41.c":203:17)
#loc261 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_connect_socket_41.c":201:33)
#loc262 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_connect_socket_41.c":201:32)
#loc263 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_connect_socket_41.c":208:13)
#loc264 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_connect_socket_41.c":210:9)
#loc265 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_connect_socket_41.c":210:14)
#loc266 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_connect_socket_41.c":214:1)
#loc267 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_connect_socket_41.c":276:1)
#loc268 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_connect_socket_41.c":216:5)
#loc269 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_connect_socket_41.c":216:9)
#loc270 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_connect_socket_41.c":218:13)
#loc271 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_connect_socket_41.c":218:12)
#loc272 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_connect_socket_41.c":218:5)
#loc273 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_connect_socket_41.c":219:5)
#loc274 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_connect_socket_41.c":274:5)
#loc275 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_connect_socket_41.c":224:9)
#loc276 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_connect_socket_41.c":224:13)
#loc277 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_connect_socket_41.c":225:9)
#loc278 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_connect_socket_41.c":225:28)
#loc279 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_connect_socket_41.c":226:9)
#loc280 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_connect_socket_41.c":226:32)
#loc281 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_connect_socket_41.c":227:9)
#loc282 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_connect_socket_41.c":227:41)
#loc283 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_connect_socket_41.c":228:9)
#loc284 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_connect_socket_41.c":263:17)
#loc285 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_connect_socket_41.c":229:9)
#loc286 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_connect_socket_41.c":262:9)
#loc287 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_connect_socket_41.c":238:36)
#loc288 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_connect_socket_41.c":238:45)
#loc289 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_connect_socket_41.c":238:58)
#loc290 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_connect_socket_41.c":238:29)
#loc291 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_connect_socket_41.c":238:13)
#loc292 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_connect_socket_41.c":238:69)
#loc293 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_connect_socket_41.c":239:13)
#loc294 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_connect_socket_41.c":242:13)
#loc295 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_connect_socket_41.c":239:17)
#loc296 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_connect_socket_41.c":239:34)
#loc297 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_connect_socket_41.c":240:13)
#loc298 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_connect_socket_41.c":241:17)
#loc299 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_connect_socket_41.c":243:20)
#loc300 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_connect_socket_41.c":243:21)
#loc301 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_connect_socket_41.c":243:30)
#loc302 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_connect_socket_41.c":243:33)
#loc303 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_connect_socket_41.c":243:47)
#loc304 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_connect_socket_41.c":243:13)
#loc305 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_connect_socket_41.c":243:48)
#loc306 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_connect_socket_41.c":244:34)
#loc307 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_connect_socket_41.c":244:13)
#loc308 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_connect_socket_41.c":245:49)
#loc309 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_connect_socket_41.c":245:39)
#loc310 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_connect_socket_41.c":245:13)
#loc311 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_connect_socket_41.c":245:59)
#loc312 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_connect_socket_41.c":246:38)
#loc313 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_connect_socket_41.c":246:32)
#loc314 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_connect_socket_41.c":246:13)
#loc315 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_connect_socket_41.c":246:46)
#loc316 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_connect_socket_41.c":247:13)
#loc317 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_connect_socket_41.c":250:13)
#loc318 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_connect_socket_41.c":247:25)
#loc319 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_connect_socket_41.c":247:58)
#loc320 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_connect_socket_41.c":247:59)
#loc321 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_connect_socket_41.c":247:68)
#loc322 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_connect_socket_41.c":247:82)
#loc323 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_connect_socket_41.c":247:17)
#loc324 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_connect_socket_41.c":247:88)
#loc325 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_connect_socket_41.c":248:13)
#loc326 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_connect_socket_41.c":249:17)
#loc327 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_connect_socket_41.c":253:31)
#loc328 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_connect_socket_41.c":253:46)
#loc329 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_connect_socket_41.c":253:59)
#loc330 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_connect_socket_41.c":253:77)
#loc331 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_connect_socket_41.c":253:80)
#loc332 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_connect_socket_41.c":253:26)
#loc333 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_connect_socket_41.c":253:13)
#loc334 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_connect_socket_41.c":253:81)
#loc335 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_connect_socket_41.c":254:13)
#loc336 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_connect_socket_41.c":257:13)
#loc337 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_connect_socket_41.c":254:17)
#loc338 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_connect_socket_41.c":254:31)
#loc339 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_connect_socket_41.c":254:44)
#loc340 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_connect_socket_41.c":254:47)
#loc341 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_connect_socket_41.c":254:61)
#loc342 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_connect_socket_41.c":255:13)
#loc343 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_connect_socket_41.c":256:17)
#loc344 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_connect_socket_41.c":259:39)
#loc345 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_connect_socket_41.c":259:25)
#loc346 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_connect_socket_41.c":259:13)
#loc347 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_connect_socket_41.c":261:25)
#loc348 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_connect_socket_41.c":261:20)
#loc349 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_connect_socket_41.c":261:13)
#loc350 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_connect_socket_41.c":261:36)
#loc351 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_connect_socket_41.c":263:16)
#loc352 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_connect_socket_41.c":264:9)
#loc353 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_connect_socket_41.c":267:9)
#loc354 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_connect_socket_41.c":264:13)
#loc355 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_connect_socket_41.c":264:30)
#loc356 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_connect_socket_41.c":265:9)
#loc357 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_connect_socket_41.c":266:26)
#loc358 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_connect_socket_41.c":266:13)
#loc359 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_connect_socket_41.c":275:17)
#loc360 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_connect_socket_41.c":275:5)
#loc361 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_connect_socket_41.c":143:1)
#loc362 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_connect_socket_41.c":171:1)
#loc365 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_connect_socket_41.c":144:1)
#loc366 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_connect_socket_41.c":145:5)
#loc367 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_connect_socket_41.c":170:5)
#loc368 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_connect_socket_41.c":146:9)
#loc369 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_connect_socket_41.c":146:13)
#loc370 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_connect_socket_41.c":147:9)
#loc371 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_connect_socket_41.c":147:54)
#loc372 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_connect_socket_41.c":147:31)
#loc373 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_connect_socket_41.c":147:38)
#loc374 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_connect_socket_41.c":147:43)
#loc375 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_connect_socket_41.c":147:53)
#loc376 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_connect_socket_41.c":148:9)
#loc377 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_connect_socket_41.c":148:39)
#loc378 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_connect_socket_41.c":148:13)
#loc379 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_connect_socket_41.c":148:23)
#loc380 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_connect_socket_41.c":148:29)
#loc381 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_connect_socket_41.c":148:30)
#loc382 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_connect_socket_41.c":148:36)
#loc383 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_connect_socket_41.c":148:35)
#loc384 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_connect_socket_41.c":150:9)
#loc385 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_connect_socket_41.c":153:9)
#loc386 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_connect_socket_41.c":150:18)
#loc387 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_connect_socket_41.c":150:14)
#loc388 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_connect_socket_41.c":150:21)
#loc389 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_connect_socket_41.c":150:25)
#loc390 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_connect_socket_41.c":150:23)
#loc391 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_connect_socket_41.c":151:9)
#loc392 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_connect_socket_41.c":152:25)
#loc393 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_connect_socket_41.c":152:13)
#loc394 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_connect_socket_41.c":152:20)
#loc395 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_connect_socket_41.c":152:21)
#loc396 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_connect_socket_41.c":150:30)
#loc397 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_connect_socket_41.c":150:29)
#loc398 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_connect_socket_41.c":156:9)
#loc399 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_connect_socket_41.c":168:9)
#loc400 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_connect_socket_41.c":156:13)
#loc401 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_connect_socket_41.c":156:21)
#loc402 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_connect_socket_41.c":157:9)
#loc403 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_connect_socket_41.c":164:9)
#loc404 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_connect_socket_41.c":166:9)
#loc405 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_connect_socket_41.c":158:28)
#loc406 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_connect_socket_41.c":158:13)
#loc407 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_connect_socket_41.c":158:20)
#loc408 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_connect_socket_41.c":158:24)
#loc409 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_connect_socket_41.c":160:13)
#loc410 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_connect_socket_41.c":163:13)
#loc411 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_connect_socket_41.c":160:21)
#loc412 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_connect_socket_41.c":160:17)
#loc413 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_connect_socket_41.c":160:24)
#loc414 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_connect_socket_41.c":160:28)
#loc415 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_connect_socket_41.c":160:26)
#loc416 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_connect_socket_41.c":161:13)
#loc417 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_connect_socket_41.c":162:30)
#loc418 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_connect_socket_41.c":162:37)
#loc419 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_connect_socket_41.c":162:38)
#loc420 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_connect_socket_41.c":162:17)
#loc421 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_connect_socket_41.c":160:33)
#loc422 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_connect_socket_41.c":160:32)
#loc423 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_connect_socket_41.c":167:23)
#loc424 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_connect_socket_41.c":167:13)
#loc425 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_connect_socket_41.c":169:9)
#loc426 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_connect_socket_41.c":169:14)
#loc427 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_connect_socket_41.c":173:1)
#loc428 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_connect_socket_41.c":182:1)
#loc429 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_connect_socket_41.c":175:5)
#loc430 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_connect_socket_41.c":175:9)
#loc431 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_connect_socket_41.c":177:13)
#loc432 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_connect_socket_41.c":177:12)
#loc433 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_connect_socket_41.c":177:5)
#loc434 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_connect_socket_41.c":180:12)
#loc435 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_connect_socket_41.c":180:5)
#loc436 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_connect_socket_41.c":181:17)
#loc437 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_connect_socket_41.c":181:5)
#loc438 = loc(fused[#loc1, #loc2])
#loc439 = loc(fused[#loc3, #loc4])
#loc440 = loc(fused[#loc6, #loc7])
#loc441 = loc(fused[#loc8, #loc9])
#loc442 = loc(fused[#loc10, #loc11])
#loc443 = loc(fused[#loc12, #loc13])
#loc444 = loc(fused[#loc14, #loc15])
#loc445 = loc(fused[#loc16, #loc17])
#loc446 = loc(fused[#loc18, #loc19])
#loc447 = loc(fused[#loc20, #loc21])
#loc448 = loc(fused[#loc22, #loc23])
#loc449 = loc(fused[#loc25, #loc26])
#loc450 = loc(fused[#loc27, #loc28])
#loc452 = loc(fused[#loc32, #loc33])
#loc453 = loc(fused[#loc34, #loc35])
#loc454 = loc(fused[#loc36, #loc37])
#loc455 = loc(fused[#loc40, #loc41])
#loc456 = loc(fused[#loc39, #loc41])
#loc457 = loc(fused[#loc38, #loc37])
#loc458 = loc(fused[#loc42, #loc43])
#loc459 = loc(fused[#loc44, #loc45])
#loc460 = loc(fused[#loc46, #loc43])
#loc461 = loc(fused[#loc50, #loc51])
#loc462 = loc(fused[#loc53, #loc52])
#loc463 = loc(fused[#loc54, #loc55])
#loc464 = loc(fused[#loc57, #loc51])
#loc465 = loc(fused[#loc59, #loc58])
#loc466 = loc(fused[#loc63, #loc62])
#loc467 = loc(fused[#loc64, #loc65])
#loc468 = loc(fused[#loc66, #loc67])
#loc469 = loc(fused[#loc68, #loc69, #loc70, #loc65])
#loc470 = loc(fused[#loc72, #loc71])
#loc471 = loc(fused[#loc75, #loc76])
#loc472 = loc(fused[#loc78, #loc77])
#loc473 = loc(fused[#loc79, #loc80])
#loc474 = loc(fused[#loc82, #loc76])
#loc475 = loc(fused[#loc88, #loc87])
#loc476 = loc(fused[#loc92, #loc93])
#loc477 = loc(fused[#loc94, #loc95])
#loc478 = loc(fused[#loc98, #loc96])
#loc479 = loc(fused[#loc99, #loc100])
#loc480 = loc(fused[#loc101, #loc102])
#loc481 = loc(fused[#loc103, #loc104])
#loc482 = loc(fused[#loc105, #loc106])
#loc483 = loc(fused[#loc107, #loc108])
#loc484 = loc(fused[#loc109, #loc110])
#loc485 = loc(fused[#loc111, #loc112])
#loc486 = loc(fused[#loc117, #loc118])
#loc487 = loc(fused[#loc119, #loc120])
#loc488 = loc(fused[#loc121, #loc122])
#loc489 = loc(fused[#loc123, #loc120])
#loc490 = loc(fused[#loc125, #loc126])
#loc491 = loc(fused[#loc128, #loc129])
#loc492 = loc(fused[#loc130, #loc131])
#loc493 = loc(fused[#loc134, #loc132])
#loc494 = loc(fused[#loc138, #loc139])
#loc495 = loc(fused[#loc143, #loc144])
#loc496 = loc(fused[#loc145, #loc146])
#loc497 = loc(fused[#loc148, #loc149])
#loc498 = loc(fused[#loc150, #loc151])
#loc499 = loc(fused[#loc152, #loc153])
#loc500 = loc(fused[#loc154, #loc146])
#loc501 = loc(fused[#loc158, #loc159])
#loc502 = loc(fused[#loc162, #loc163])
#loc503 = loc(fused[#loc164, #loc165])
#loc504 = loc(fused[#loc166, #loc167])
#loc505 = loc(fused[#loc169, #loc170])
#loc506 = loc(fused[#loc171, #loc165])
#loc507 = loc(fused[#loc175, #loc173])
#loc508 = loc(fused[#loc178, #loc179])
#loc509 = loc(fused[#loc181, #loc182])
#loc510 = loc(fused[#loc183, #loc184])
#loc511 = loc(fused[#loc185, #loc182])
#loc512 = loc(fused[#loc190, #loc191])
#loc513 = loc(fused[#loc192, #loc193])
#loc514 = loc(fused[#loc194, #loc195])
#loc515 = loc(fused[#loc197, #loc198])
#loc517 = loc(fused[#loc202, #loc203])
#loc518 = loc(fused[#loc204, #loc205])
#loc519 = loc(fused[#loc206, #loc207])
#loc520 = loc(fused[#loc210, #loc211])
#loc521 = loc(fused[#loc209, #loc211])
#loc522 = loc(fused[#loc208, #loc207])
#loc523 = loc(fused[#loc212, #loc213])
#loc524 = loc(fused[#loc214, #loc215])
#loc525 = loc(fused[#loc216, #loc213])
#loc526 = loc(fused[#loc220, #loc221])
#loc527 = loc(fused[#loc223, #loc222])
#loc528 = loc(fused[#loc224, #loc225])
#loc529 = loc(fused[#loc227, #loc221])
#loc530 = loc(fused[#loc229, #loc228])
#loc531 = loc(fused[#loc233, #loc232])
#loc532 = loc(fused[#loc234, #loc235])
#loc533 = loc(fused[#loc236, #loc237])
#loc534 = loc(fused[#loc239, #loc241])
#loc535 = loc(fused[#loc242, #loc243, #loc244, #loc235])
#loc536 = loc(fused[#loc246, #loc245])
#loc537 = loc(fused[#loc249, #loc250])
#loc538 = loc(fused[#loc252, #loc251])
#loc539 = loc(fused[#loc253, #loc254])
#loc540 = loc(fused[#loc256, #loc250])
#loc541 = loc(fused[#loc262, #loc261])
#loc542 = loc(fused[#loc266, #loc267])
#loc543 = loc(fused[#loc268, #loc269])
#loc544 = loc(fused[#loc272, #loc270])
#loc545 = loc(fused[#loc273, #loc274])
#loc546 = loc(fused[#loc275, #loc276])
#loc547 = loc(fused[#loc277, #loc278])
#loc548 = loc(fused[#loc279, #loc280])
#loc549 = loc(fused[#loc281, #loc282])
#loc550 = loc(fused[#loc283, #loc284])
#loc551 = loc(fused[#loc285, #loc286])
#loc552 = loc(fused[#loc291, #loc292])
#loc553 = loc(fused[#loc293, #loc294])
#loc554 = loc(fused[#loc295, #loc296])
#loc555 = loc(fused[#loc297, #loc294])
#loc556 = loc(fused[#loc299, #loc300])
#loc557 = loc(fused[#loc302, #loc303])
#loc558 = loc(fused[#loc304, #loc305])
#loc559 = loc(fused[#loc307, #loc306])
#loc560 = loc(fused[#loc310, #loc311])
#loc561 = loc(fused[#loc314, #loc315])
#loc562 = loc(fused[#loc316, #loc317])
#loc563 = loc(fused[#loc319, #loc320])
#loc564 = loc(fused[#loc321, #loc322])
#loc565 = loc(fused[#loc323, #loc324])
#loc566 = loc(fused[#loc325, #loc317])
#loc567 = loc(fused[#loc329, #loc330])
#loc568 = loc(fused[#loc333, #loc334])
#loc569 = loc(fused[#loc335, #loc336])
#loc570 = loc(fused[#loc337, #loc338])
#loc571 = loc(fused[#loc340, #loc341])
#loc572 = loc(fused[#loc342, #loc336])
#loc573 = loc(fused[#loc346, #loc344])
#loc574 = loc(fused[#loc349, #loc350])
#loc575 = loc(fused[#loc352, #loc353])
#loc576 = loc(fused[#loc354, #loc355])
#loc577 = loc(fused[#loc356, #loc353])
#loc578 = loc(fused[#loc361, #loc362])
#loc580 = loc(fused[#loc366, #loc367])
#loc581 = loc(fused[#loc368, #loc369])
#loc582 = loc(fused[#loc370, #loc371])
#loc583 = loc(fused[#loc374, #loc375])
#loc584 = loc(fused[#loc373, #loc375])
#loc585 = loc(fused[#loc372, #loc371])
#loc586 = loc(fused[#loc376, #loc377])
#loc587 = loc(fused[#loc378, #loc379])
#loc588 = loc(fused[#loc380, #loc377])
#loc589 = loc(fused[#loc384, #loc385])
#loc590 = loc(fused[#loc387, #loc386])
#loc591 = loc(fused[#loc388, #loc389])
#loc592 = loc(fused[#loc391, #loc385])
#loc593 = loc(fused[#loc393, #loc392])
#loc594 = loc(fused[#loc397, #loc396])
#loc595 = loc(fused[#loc398, #loc399])
#loc596 = loc(fused[#loc400, #loc401])
#loc597 = loc(fused[#loc402, #loc403, #loc404, #loc399])
#loc598 = loc(fused[#loc406, #loc405])
#loc599 = loc(fused[#loc409, #loc410])
#loc600 = loc(fused[#loc412, #loc411])
#loc601 = loc(fused[#loc413, #loc414])
#loc602 = loc(fused[#loc416, #loc410])
#loc603 = loc(fused[#loc422, #loc421])
#loc604 = loc(fused[#loc427, #loc428])
#loc605 = loc(fused[#loc429, #loc430])
#loc606 = loc(fused[#loc433, #loc431])
#loc607 = loc(fused[#loc435, #loc434])
