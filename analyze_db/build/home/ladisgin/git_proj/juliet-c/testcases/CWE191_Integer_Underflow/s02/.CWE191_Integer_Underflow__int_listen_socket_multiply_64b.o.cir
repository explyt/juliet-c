!s32i = !cir.int<s, 32>
!s8i = !cir.int<s, 8>
!void = !cir.void
#fn_attr = #cir<extra({inline = #cir.inline<no>, nothrow = #cir.nothrow, optnone = #cir.optnone})>
#loc5 = loc("CWE191_Integer_Underflow__int_listen_socket_multiply_64b.c":44:71)
#loc6 = loc("CWE191_Integer_Underflow__int_listen_socket_multiply_64b.c":44:78)
#loc26 = loc("CWE191_Integer_Underflow__int_listen_socket_multiply_64b.c":63:75)
#loc27 = loc("CWE191_Integer_Underflow__int_listen_socket_multiply_64b.c":63:82)
#loc50 = loc("CWE191_Integer_Underflow__int_listen_socket_multiply_64b.c":78:75)
#loc51 = loc("CWE191_Integer_Underflow__int_listen_socket_multiply_64b.c":78:82)
#loc81 = loc(fused[#loc5, #loc6])
#loc89 = loc(fused[#loc26, #loc27])
#loc98 = loc(fused[#loc50, #loc51])
module @"/home/ladisgin/git_proj/juliet-c/testcases/CWE191_Integer_Underflow/s02/CWE191_Integer_Underflow__int_listen_socket_multiply_64b.c" attributes {cir.lang = #cir.lang<c>, cir.sob = #cir.signed_overflow_behavior<undefined>, cir.triple = "x86_64-unknown-linux-gnu", dlti.dl_spec = #dlti.dl_spec<f80 = dense<128> : vector<2xi64>, i128 = dense<128> : vector<2xi64>, !llvm.ptr<272> = dense<64> : vector<4xi64>, !llvm.ptr<271> = dense<32> : vector<4xi64>, i64 = dense<64> : vector<2xi64>, f16 = dense<16> : vector<2xi64>, i32 = dense<32> : vector<2xi64>, !llvm.ptr<270> = dense<32> : vector<4xi64>, f128 = dense<128> : vector<2xi64>, f64 = dense<64> : vector<2xi64>, i1 = dense<8> : vector<2xi64>, !llvm.ptr = dense<64> : vector<4xi64>, i16 = dense<16> : vector<2xi64>, i8 = dense<8> : vector<2xi64>, "dlti.stack_alignment" = 128 : i64, "dlti.endianness" = "little">} {
  cir.func private @printIntLine(!s32i) loc(#loc79)
  cir.func @CWE191_Integer_Underflow__int_listen_socket_multiply_64b_badSink(%arg0: !cir.ptr<!void> loc(fused[#loc5, #loc6])) extra(#fn_attr) {
    %0 = cir.alloca !s32i, !cir.ptr<!s32i>, ["result", init] {alignment = 4 : i64} loc(#loc82)
    %1 = cir.alloca !cir.ptr<!void>, !cir.ptr<!cir.ptr<!void>>, ["dataVoidPtr", init] {alignment = 8 : i64} loc(#loc81)
    %2 = cir.alloca !cir.ptr<!s32i>, !cir.ptr<!cir.ptr<!s32i>>, ["dataPtr", init] {alignment = 8 : i64} loc(#loc83)
    %3 = cir.alloca !s32i, !cir.ptr<!s32i>, ["data", init] {alignment = 4 : i64} loc(#loc84)
    cir.store %arg0, %1 : !cir.ptr<!void>, !cir.ptr<!cir.ptr<!void>> loc(#loc13)
    %4 = cir.load %1 : !cir.ptr<!cir.ptr<!void>>, !cir.ptr<!void> loc(#loc10)
    %5 = cir.cast(bitcast, %4 : !cir.ptr<!void>), !cir.ptr<!s32i> loc(#loc10)
    cir.store %5, %2 : !cir.ptr<!s32i>, !cir.ptr<!cir.ptr<!s32i>> loc(#loc83)
    %6 = cir.load deref %2 : !cir.ptr<!cir.ptr<!s32i>>, !cir.ptr<!s32i> loc(#loc14)
    %7 = cir.load %6 : !cir.ptr<!s32i>, !s32i loc(#loc15)
    cir.store %7, %3 : !s32i, !cir.ptr<!s32i> loc(#loc84)
    cir.br ^bb1 loc(#loc85)
  ^bb1:  // pred: ^bb0
    %8 = cir.load %3 : !cir.ptr<!s32i>, !s32i loc(#loc18)
    %9 = cir.const #cir.int<0> : !s32i loc(#loc19)
    %10 = cir.cmp(lt, %8, %9) : !s32i, !cir.bool loc(#loc86)
    cir.brcond %10 ^bb2, ^bb3 loc(#loc87)
  ^bb2:  // pred: ^bb1
    %11 = cir.load %3 : !cir.ptr<!s32i>, !s32i loc(#loc21)
    %12 = cir.const #cir.int<2> : !s32i loc(#loc8)
    %13 = cir.binop(mul, %11, %12) nsw : !s32i loc(#loc21)
    cir.store %13, %0 : !s32i, !cir.ptr<!s32i> loc(#loc82)
    %14 = cir.load %0 : !cir.ptr<!s32i>, !s32i loc(#loc22)
    cir.call @printIntLine(%14) : (!s32i) -> () loc(#loc23)
    cir.br ^bb3 loc(#loc17)
  ^bb3:  // 2 preds: ^bb1, ^bb2
    cir.br ^bb4 loc(#loc17)
  ^bb4:  // pred: ^bb3
    cir.return loc(#loc4)
  } loc(#loc80)
  cir.func @CWE191_Integer_Underflow__int_listen_socket_multiply_64b_goodG2BSink(%arg0: !cir.ptr<!void> loc(fused[#loc26, #loc27])) extra(#fn_attr) {
    %0 = cir.alloca !s32i, !cir.ptr<!s32i>, ["result", init] {alignment = 4 : i64} loc(#loc90)
    %1 = cir.alloca !cir.ptr<!void>, !cir.ptr<!cir.ptr<!void>>, ["dataVoidPtr", init] {alignment = 8 : i64} loc(#loc89)
    %2 = cir.alloca !cir.ptr<!s32i>, !cir.ptr<!cir.ptr<!s32i>>, ["dataPtr", init] {alignment = 8 : i64} loc(#loc91)
    %3 = cir.alloca !s32i, !cir.ptr<!s32i>, ["data", init] {alignment = 4 : i64} loc(#loc92)
    cir.store %arg0, %1 : !cir.ptr<!void>, !cir.ptr<!cir.ptr<!void>> loc(#loc34)
    %4 = cir.load %1 : !cir.ptr<!cir.ptr<!void>>, !cir.ptr<!void> loc(#loc31)
    %5 = cir.cast(bitcast, %4 : !cir.ptr<!void>), !cir.ptr<!s32i> loc(#loc31)
    cir.store %5, %2 : !cir.ptr<!s32i>, !cir.ptr<!cir.ptr<!s32i>> loc(#loc91)
    %6 = cir.load deref %2 : !cir.ptr<!cir.ptr<!s32i>>, !cir.ptr<!s32i> loc(#loc35)
    %7 = cir.load %6 : !cir.ptr<!s32i>, !s32i loc(#loc36)
    cir.store %7, %3 : !s32i, !cir.ptr<!s32i> loc(#loc92)
    cir.br ^bb1 loc(#loc93)
  ^bb1:  // pred: ^bb0
    %8 = cir.load %3 : !cir.ptr<!s32i>, !s32i loc(#loc39)
    %9 = cir.const #cir.int<0> : !s32i loc(#loc40)
    %10 = cir.cmp(lt, %8, %9) : !s32i, !cir.bool loc(#loc94)
    cir.brcond %10 ^bb2, ^bb3 loc(#loc95)
  ^bb2:  // pred: ^bb1
    %11 = cir.load %3 : !cir.ptr<!s32i>, !s32i loc(#loc42)
    %12 = cir.const #cir.int<2> : !s32i loc(#loc29)
    %13 = cir.binop(mul, %11, %12) nsw : !s32i loc(#loc42)
    cir.store %13, %0 : !s32i, !cir.ptr<!s32i> loc(#loc90)
    %14 = cir.load %0 : !cir.ptr<!s32i>, !s32i loc(#loc43)
    cir.call @printIntLine(%14) : (!s32i) -> () loc(#loc44)
    cir.br ^bb3 loc(#loc38)
  ^bb3:  // 2 preds: ^bb1, ^bb2
    cir.br ^bb4 loc(#loc38)
  ^bb4:  // pred: ^bb3
    cir.return loc(#loc25)
  } loc(#loc88)
  cir.func private @printLine(!cir.ptr<!s8i>) loc(#loc96)
  cir.global "private" constant cir_private dsolocal @".str" = #cir.const_array<"data value is too small to perform multiplication.\00" : !cir.array<!s8i x 51>> : !cir.array<!s8i x 51> {alignment = 1 : i64} loc(#loc47)
  cir.func @CWE191_Integer_Underflow__int_listen_socket_multiply_64b_goodB2GSink(%arg0: !cir.ptr<!void> loc(fused[#loc50, #loc51])) extra(#fn_attr) {
    %0 = cir.alloca !s32i, !cir.ptr<!s32i>, ["result", init] {alignment = 4 : i64} loc(#loc99)
    %1 = cir.alloca !cir.ptr<!void>, !cir.ptr<!cir.ptr<!void>>, ["dataVoidPtr", init] {alignment = 8 : i64} loc(#loc98)
    %2 = cir.alloca !cir.ptr<!s32i>, !cir.ptr<!cir.ptr<!s32i>>, ["dataPtr", init] {alignment = 8 : i64} loc(#loc100)
    %3 = cir.alloca !s32i, !cir.ptr<!s32i>, ["data", init] {alignment = 4 : i64} loc(#loc101)
    cir.store %arg0, %1 : !cir.ptr<!void>, !cir.ptr<!cir.ptr<!void>> loc(#loc58)
    %4 = cir.load %1 : !cir.ptr<!cir.ptr<!void>>, !cir.ptr<!void> loc(#loc55)
    %5 = cir.cast(bitcast, %4 : !cir.ptr<!void>), !cir.ptr<!s32i> loc(#loc55)
    cir.store %5, %2 : !cir.ptr<!s32i>, !cir.ptr<!cir.ptr<!s32i>> loc(#loc100)
    %6 = cir.load deref %2 : !cir.ptr<!cir.ptr<!s32i>>, !cir.ptr<!s32i> loc(#loc59)
    %7 = cir.load %6 : !cir.ptr<!s32i>, !s32i loc(#loc60)
    cir.store %7, %3 : !s32i, !cir.ptr<!s32i> loc(#loc101)
    cir.br ^bb1 loc(#loc102)
  ^bb1:  // pred: ^bb0
    %8 = cir.load %3 : !cir.ptr<!s32i>, !s32i loc(#loc63)
    %9 = cir.const #cir.int<0> : !s32i loc(#loc64)
    %10 = cir.cmp(lt, %8, %9) : !s32i, !cir.bool loc(#loc103)
    cir.brcond %10 ^bb2, ^bb8 loc(#loc104)
  ^bb2:  // pred: ^bb1
    cir.br ^bb3 loc(#loc105)
  ^bb3:  // pred: ^bb2
    %11 = cir.load %3 : !cir.ptr<!s32i>, !s32i loc(#loc68)
    %12 = cir.const #cir.int<2147483647> : !s32i loc(#loc69)
    %13 = cir.unary(minus, %12) : !s32i, !s32i loc(#loc69)
    %14 = cir.const #cir.int<1> : !s32i loc(#loc69)
    %15 = cir.binop(sub, %13, %14) nsw : !s32i loc(#loc69)
    %16 = cir.const #cir.int<2> : !s32i loc(#loc70)
    %17 = cir.binop(div, %15, %16) : !s32i loc(#loc106)
    %18 = cir.cmp(gt, %11, %17) : !s32i, !cir.bool loc(#loc107)
    cir.brcond %18 ^bb4, ^bb5 loc(#loc108)
  ^bb4:  // pred: ^bb3
    %19 = cir.load %3 : !cir.ptr<!s32i>, !s32i loc(#loc75)
    %20 = cir.const #cir.int<2> : !s32i loc(#loc53)
    %21 = cir.binop(mul, %19, %20) nsw : !s32i loc(#loc75)
    cir.store %21, %0 : !s32i, !cir.ptr<!s32i> loc(#loc99)
    %22 = cir.load %0 : !cir.ptr<!s32i>, !s32i loc(#loc76)
    cir.call @printIntLine(%22) : (!s32i) -> () loc(#loc77)
    cir.br ^bb6 loc(#loc73)
  ^bb5:  // pred: ^bb3
    %23 = cir.get_global @".str" : !cir.ptr<!cir.array<!s8i x 51>> loc(#loc47)
    %24 = cir.cast(array_to_ptrdecay, %23 : !cir.ptr<!cir.array<!s8i x 51>>), !cir.ptr<!s8i> loc(#loc47)
    cir.call @printLine(%24) : (!cir.ptr<!s8i>) -> () loc(#loc78)
    cir.br ^bb6 loc(#loc67)
  ^bb6:  // 2 preds: ^bb4, ^bb5
    cir.br ^bb7 loc(#loc67)
  ^bb7:  // pred: ^bb6
    cir.br ^bb8 loc(#loc62)
  ^bb8:  // 2 preds: ^bb1, ^bb7
    cir.br ^bb9 loc(#loc62)
  ^bb9:  // pred: ^bb8
    cir.return loc(#loc49)
  } loc(#loc97)
} loc(#loc)
#loc = loc("/home/ladisgin/git_proj/juliet-c/testcases/CWE191_Integer_Underflow/s02/CWE191_Integer_Underflow__int_listen_socket_multiply_64b.c":0:0)
#loc1 = loc("../../../testcasesupport/std_testcase_io.h":18:1)
#loc2 = loc("../../../testcasesupport/std_testcase_io.h":18:33)
#loc3 = loc("CWE191_Integer_Underflow__int_listen_socket_multiply_64b.c":44:1)
#loc4 = loc("CWE191_Integer_Underflow__int_listen_socket_multiply_64b.c":56:1)
#loc7 = loc("CWE191_Integer_Underflow__int_listen_socket_multiply_64b.c":53:9)
#loc8 = loc("CWE191_Integer_Underflow__int_listen_socket_multiply_64b.c":53:29)
#loc9 = loc("CWE191_Integer_Underflow__int_listen_socket_multiply_64b.c":47:5)
#loc10 = loc("CWE191_Integer_Underflow__int_listen_socket_multiply_64b.c":47:28)
#loc11 = loc("CWE191_Integer_Underflow__int_listen_socket_multiply_64b.c":49:5)
#loc12 = loc("CWE191_Integer_Underflow__int_listen_socket_multiply_64b.c":49:25)
#loc13 = loc("CWE191_Integer_Underflow__int_listen_socket_multiply_64b.c":45:1)
#loc14 = loc("CWE191_Integer_Underflow__int_listen_socket_multiply_64b.c":49:18)
#loc15 = loc("CWE191_Integer_Underflow__int_listen_socket_multiply_64b.c":49:17)
#loc16 = loc("CWE191_Integer_Underflow__int_listen_socket_multiply_64b.c":50:5)
#loc17 = loc("CWE191_Integer_Underflow__int_listen_socket_multiply_64b.c":55:5)
#loc18 = loc("CWE191_Integer_Underflow__int_listen_socket_multiply_64b.c":50:8)
#loc19 = loc("CWE191_Integer_Underflow__int_listen_socket_multiply_64b.c":50:15)
#loc20 = loc("CWE191_Integer_Underflow__int_listen_socket_multiply_64b.c":51:5)
#loc21 = loc("CWE191_Integer_Underflow__int_listen_socket_multiply_64b.c":53:22)
#loc22 = loc("CWE191_Integer_Underflow__int_listen_socket_multiply_64b.c":54:22)
#loc23 = loc("CWE191_Integer_Underflow__int_listen_socket_multiply_64b.c":54:9)
#loc24 = loc("CWE191_Integer_Underflow__int_listen_socket_multiply_64b.c":63:1)
#loc25 = loc("CWE191_Integer_Underflow__int_listen_socket_multiply_64b.c":75:1)
#loc28 = loc("CWE191_Integer_Underflow__int_listen_socket_multiply_64b.c":72:9)
#loc29 = loc("CWE191_Integer_Underflow__int_listen_socket_multiply_64b.c":72:29)
#loc30 = loc("CWE191_Integer_Underflow__int_listen_socket_multiply_64b.c":66:5)
#loc31 = loc("CWE191_Integer_Underflow__int_listen_socket_multiply_64b.c":66:28)
#loc32 = loc("CWE191_Integer_Underflow__int_listen_socket_multiply_64b.c":68:5)
#loc33 = loc("CWE191_Integer_Underflow__int_listen_socket_multiply_64b.c":68:25)
#loc34 = loc("CWE191_Integer_Underflow__int_listen_socket_multiply_64b.c":64:1)
#loc35 = loc("CWE191_Integer_Underflow__int_listen_socket_multiply_64b.c":68:18)
#loc36 = loc("CWE191_Integer_Underflow__int_listen_socket_multiply_64b.c":68:17)
#loc37 = loc("CWE191_Integer_Underflow__int_listen_socket_multiply_64b.c":69:5)
#loc38 = loc("CWE191_Integer_Underflow__int_listen_socket_multiply_64b.c":74:5)
#loc39 = loc("CWE191_Integer_Underflow__int_listen_socket_multiply_64b.c":69:8)
#loc40 = loc("CWE191_Integer_Underflow__int_listen_socket_multiply_64b.c":69:15)
#loc41 = loc("CWE191_Integer_Underflow__int_listen_socket_multiply_64b.c":70:5)
#loc42 = loc("CWE191_Integer_Underflow__int_listen_socket_multiply_64b.c":72:22)
#loc43 = loc("CWE191_Integer_Underflow__int_listen_socket_multiply_64b.c":73:22)
#loc44 = loc("CWE191_Integer_Underflow__int_listen_socket_multiply_64b.c":73:9)
#loc45 = loc("../../../testcasesupport/std_testcase_io.h":14:1)
#loc46 = loc("../../../testcasesupport/std_testcase_io.h":14:33)
#loc47 = loc("CWE191_Integer_Underflow__int_listen_socket_multiply_64b.c":94:23)
#loc48 = loc("CWE191_Integer_Underflow__int_listen_socket_multiply_64b.c":78:1)
#loc49 = loc("CWE191_Integer_Underflow__int_listen_socket_multiply_64b.c":97:1)
#loc52 = loc("CWE191_Integer_Underflow__int_listen_socket_multiply_64b.c":89:13)
#loc53 = loc("CWE191_Integer_Underflow__int_listen_socket_multiply_64b.c":89:33)
#loc54 = loc("CWE191_Integer_Underflow__int_listen_socket_multiply_64b.c":81:5)
#loc55 = loc("CWE191_Integer_Underflow__int_listen_socket_multiply_64b.c":81:28)
#loc56 = loc("CWE191_Integer_Underflow__int_listen_socket_multiply_64b.c":83:5)
#loc57 = loc("CWE191_Integer_Underflow__int_listen_socket_multiply_64b.c":83:25)
#loc58 = loc("CWE191_Integer_Underflow__int_listen_socket_multiply_64b.c":79:1)
#loc59 = loc("CWE191_Integer_Underflow__int_listen_socket_multiply_64b.c":83:18)
#loc60 = loc("CWE191_Integer_Underflow__int_listen_socket_multiply_64b.c":83:17)
#loc61 = loc("CWE191_Integer_Underflow__int_listen_socket_multiply_64b.c":84:5)
#loc62 = loc("CWE191_Integer_Underflow__int_listen_socket_multiply_64b.c":96:5)
#loc63 = loc("CWE191_Integer_Underflow__int_listen_socket_multiply_64b.c":84:8)
#loc64 = loc("CWE191_Integer_Underflow__int_listen_socket_multiply_64b.c":84:15)
#loc65 = loc("CWE191_Integer_Underflow__int_listen_socket_multiply_64b.c":85:5)
#loc66 = loc("CWE191_Integer_Underflow__int_listen_socket_multiply_64b.c":87:9)
#loc67 = loc("CWE191_Integer_Underflow__int_listen_socket_multiply_64b.c":95:9)
#loc68 = loc("CWE191_Integer_Underflow__int_listen_socket_multiply_64b.c":87:13)
#loc69 = loc("CWE191_Integer_Underflow__int_listen_socket_multiply_64b.c":87:21)
#loc70 = loc("CWE191_Integer_Underflow__int_listen_socket_multiply_64b.c":87:29)
#loc71 = loc("CWE191_Integer_Underflow__int_listen_socket_multiply_64b.c":87:30)
#loc72 = loc("CWE191_Integer_Underflow__int_listen_socket_multiply_64b.c":88:9)
#loc73 = loc("CWE191_Integer_Underflow__int_listen_socket_multiply_64b.c":91:9)
#loc74 = loc("CWE191_Integer_Underflow__int_listen_socket_multiply_64b.c":93:9)
#loc75 = loc("CWE191_Integer_Underflow__int_listen_socket_multiply_64b.c":89:26)
#loc76 = loc("CWE191_Integer_Underflow__int_listen_socket_multiply_64b.c":90:26)
#loc77 = loc("CWE191_Integer_Underflow__int_listen_socket_multiply_64b.c":90:13)
#loc78 = loc("CWE191_Integer_Underflow__int_listen_socket_multiply_64b.c":94:13)
#loc79 = loc(fused[#loc1, #loc2])
#loc80 = loc(fused[#loc3, #loc4])
#loc82 = loc(fused[#loc7, #loc8])
#loc83 = loc(fused[#loc9, #loc10])
#loc84 = loc(fused[#loc11, #loc12])
#loc85 = loc(fused[#loc16, #loc17])
#loc86 = loc(fused[#loc18, #loc19])
#loc87 = loc(fused[#loc20, #loc17])
#loc88 = loc(fused[#loc24, #loc25])
#loc90 = loc(fused[#loc28, #loc29])
#loc91 = loc(fused[#loc30, #loc31])
#loc92 = loc(fused[#loc32, #loc33])
#loc93 = loc(fused[#loc37, #loc38])
#loc94 = loc(fused[#loc39, #loc40])
#loc95 = loc(fused[#loc41, #loc38])
#loc96 = loc(fused[#loc45, #loc46])
#loc97 = loc(fused[#loc48, #loc49])
#loc99 = loc(fused[#loc52, #loc53])
#loc100 = loc(fused[#loc54, #loc55])
#loc101 = loc(fused[#loc56, #loc57])
#loc102 = loc(fused[#loc61, #loc62])
#loc103 = loc(fused[#loc63, #loc64])
#loc104 = loc(fused[#loc65, #loc62])
#loc105 = loc(fused[#loc66, #loc67])
#loc106 = loc(fused[#loc69, #loc70])
#loc107 = loc(fused[#loc68, #loc71])
#loc108 = loc(fused[#loc72, #loc73, #loc74, #loc67])
