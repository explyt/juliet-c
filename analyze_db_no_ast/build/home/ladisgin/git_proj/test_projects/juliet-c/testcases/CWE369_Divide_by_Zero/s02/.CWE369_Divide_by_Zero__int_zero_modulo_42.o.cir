!s32i = !cir.int<s, 32>
!s8i = !cir.int<s, 8>
!void = !cir.void
#fn_attr = #cir<extra({inline = #cir.inline<no>, nothrow = #cir.nothrow, optnone = #cir.optnone})>
#loc3 = loc("CWE369_Divide_by_Zero__int_zero_modulo_42.c":22:22)
#loc4 = loc("CWE369_Divide_by_Zero__int_zero_modulo_42.c":22:26)
#loc34 = loc("CWE369_Divide_by_Zero__int_zero_modulo_42.c":62:26)
#loc35 = loc("CWE369_Divide_by_Zero__int_zero_modulo_42.c":62:30)
#loc69 = loc("CWE369_Divide_by_Zero__int_zero_modulo_42.c":44:26)
#loc70 = loc("CWE369_Divide_by_Zero__int_zero_modulo_42.c":44:30)
#loc91 = loc(fused[#loc3, #loc4])
#loc104 = loc(fused[#loc34, #loc35])
#loc117 = loc(fused[#loc69, #loc70])
module @"/home/ladisgin/git_proj/test_projects/juliet-c/testcases/CWE369_Divide_by_Zero/s02/CWE369_Divide_by_Zero__int_zero_modulo_42.c" attributes {cir.lang = #cir.lang<c>, cir.sob = #cir.signed_overflow_behavior<undefined>, cir.triple = "x86_64-unknown-linux-gnu", dlti.dl_spec = #dlti.dl_spec<#dlti.dl_entry<i16, dense<16> : vector<2xi64>>, #dlti.dl_entry<i32, dense<32> : vector<2xi64>>, #dlti.dl_entry<i1, dense<8> : vector<2xi64>>, #dlti.dl_entry<i8, dense<8> : vector<2xi64>>, #dlti.dl_entry<f64, dense<64> : vector<2xi64>>, #dlti.dl_entry<f128, dense<128> : vector<2xi64>>, #dlti.dl_entry<!llvm.ptr<270>, dense<32> : vector<4xi64>>, #dlti.dl_entry<f16, dense<16> : vector<2xi64>>, #dlti.dl_entry<!llvm.ptr<272>, dense<64> : vector<4xi64>>, #dlti.dl_entry<!llvm.ptr<271>, dense<32> : vector<4xi64>>, #dlti.dl_entry<i128, dense<128> : vector<2xi64>>, #dlti.dl_entry<i64, dense<64> : vector<2xi64>>, #dlti.dl_entry<f80, dense<128> : vector<2xi64>>, #dlti.dl_entry<!llvm.ptr, dense<64> : vector<4xi64>>, #dlti.dl_entry<"dlti.endianness", "little">, #dlti.dl_entry<"dlti.stack_alignment", 128 : i64>>, llvm.data_layout = "e-m:e-p270:32:32-p271:32:32-p272:64:64-i64:64-i128:128-f80:128-n8:16:32:64-S128"} {
  cir.func internal private  @badSource(%arg0: !s32i loc(fused[#loc3, #loc4])) -> !s32i extra(#fn_attr) {
    %0 = cir.alloca !s32i, !cir.ptr<!s32i>, ["data", init] {alignment = 4 : i64} loc(#loc91)
    %1 = cir.alloca !s32i, !cir.ptr<!s32i>, ["__retval"] {alignment = 4 : i64} loc(#loc2)
    cir.store %arg0, %0 : !s32i, !cir.ptr<!s32i> loc(#loc5)
    %2 = cir.const #cir.int<0> : !s32i loc(#loc6)
    cir.store %2, %0 : !s32i, !cir.ptr<!s32i> loc(#loc92)
    %3 = cir.load %0 : !cir.ptr<!s32i>, !s32i loc(#loc8)
    cir.store %3, %1 : !s32i, !cir.ptr<!s32i> loc(#loc93)
    %4 = cir.load %1 : !cir.ptr<!s32i>, !s32i loc(#loc93)
    cir.return %4 : !s32i loc(#loc93)
  } loc(#loc90)
  cir.func private  @printIntLine(!s32i) loc(#loc94)
  cir.func no_proto  @CWE369_Divide_by_Zero__int_zero_modulo_42_bad() extra(#fn_attr) {
    %0 = cir.alloca !s32i, !cir.ptr<!s32i>, ["data"] {alignment = 4 : i64} loc(#loc96)
    %1 = cir.const #cir.int<1> : !s32i loc(#loc16)
    %2 = cir.unary(minus, %1) : !s32i, !s32i loc(#loc17)
    cir.store %2, %0 : !s32i, !cir.ptr<!s32i> loc(#loc97)
    %3 = cir.load %0 : !cir.ptr<!s32i>, !s32i loc(#loc19)
    %4 = cir.call @badSource(%3) : (!s32i) -> !s32i loc(#loc20)
    cir.store %4, %0 : !s32i, !cir.ptr<!s32i> loc(#loc98)
    %5 = cir.const #cir.int<100> : !s32i loc(#loc23)
    %6 = cir.load %0 : !cir.ptr<!s32i>, !s32i loc(#loc24)
    %7 = cir.binop(rem, %5, %6) : !s32i loc(#loc99)
    cir.call @printIntLine(%7) : (!s32i) -> () loc(#loc25)
    cir.return loc(#loc13)
  } loc(#loc95)
  cir.func no_proto  @CWE369_Divide_by_Zero__int_zero_modulo_42_good() extra(#fn_attr) {
    %0 = cir.get_global @goodB2G : !cir.ptr<!cir.func<!void ()>> loc(#loc101)
    cir.call %0() : (!cir.ptr<!cir.func<!void ()>>) -> () loc(#loc28)
    %1 = cir.get_global @goodG2B : !cir.ptr<!cir.func<!void ()>> loc(#loc102)
    cir.call %1() : (!cir.ptr<!cir.func<!void ()>>) -> () loc(#loc30)
    cir.return loc(#loc27)
  } loc(#loc100)
  cir.func internal private  @goodB2GSource(%arg0: !s32i loc(fused[#loc34, #loc35])) -> !s32i extra(#fn_attr) {
    %0 = cir.alloca !s32i, !cir.ptr<!s32i>, ["data", init] {alignment = 4 : i64} loc(#loc104)
    %1 = cir.alloca !s32i, !cir.ptr<!s32i>, ["__retval"] {alignment = 4 : i64} loc(#loc33)
    cir.store %arg0, %0 : !s32i, !cir.ptr<!s32i> loc(#loc36)
    %2 = cir.const #cir.int<0> : !s32i loc(#loc37)
    cir.store %2, %0 : !s32i, !cir.ptr<!s32i> loc(#loc105)
    %3 = cir.load %0 : !cir.ptr<!s32i>, !s32i loc(#loc39)
    cir.store %3, %1 : !s32i, !cir.ptr<!s32i> loc(#loc106)
    %4 = cir.load %1 : !cir.ptr<!s32i>, !s32i loc(#loc106)
    cir.return %4 : !s32i loc(#loc106)
  } loc(#loc103)
  cir.func private  @printLine(!cir.ptr<!s8i>) loc(#loc107)
  cir.global "private"  constant internal dsolocal @".str" = #cir.const_array<"This would result in a divide by zero\00" : !cir.array<!s8i x 38>> : !cir.array<!s8i x 38> {alignment = 1 : i64} loc(#loc43)
  cir.func no_proto internal private  @goodB2G() extra(#fn_attr) {
    %0 = cir.alloca !s32i, !cir.ptr<!s32i>, ["data"] {alignment = 4 : i64} loc(#loc109)
    %1 = cir.const #cir.int<1> : !s32i loc(#loc48)
    %2 = cir.unary(minus, %1) : !s32i, !s32i loc(#loc49)
    cir.store %2, %0 : !s32i, !cir.ptr<!s32i> loc(#loc110)
    %3 = cir.load %0 : !cir.ptr<!s32i>, !s32i loc(#loc51)
    %4 = cir.call @goodB2GSource(%3) : (!s32i) -> !s32i loc(#loc52)
    cir.store %4, %0 : !s32i, !cir.ptr<!s32i> loc(#loc111)
    cir.scope {
      %5 = cir.load %0 : !cir.ptr<!s32i>, !s32i loc(#loc57)
      %6 = cir.const #cir.int<0> : !s32i loc(#loc58)
      %7 = cir.cmp(ne, %5, %6) : !s32i, !s32i loc(#loc113)
      %8 = cir.cast(int_to_bool, %7 : !s32i), !cir.bool loc(#loc59)
      cir.if %8 {
        %9 = cir.const #cir.int<100> : !s32i loc(#loc63)
        %10 = cir.load %0 : !cir.ptr<!s32i>, !s32i loc(#loc64)
        %11 = cir.binop(rem, %9, %10) : !s32i loc(#loc115)
        cir.call @printIntLine(%11) : (!s32i) -> () loc(#loc65)
      } else {
        %9 = cir.get_global @".str" : !cir.ptr<!cir.array<!s8i x 38>> loc(#loc43)
        %10 = cir.cast(array_to_ptrdecay, %9 : !cir.ptr<!cir.array<!s8i x 38>>), !cir.ptr<!s8i> loc(#loc43)
        cir.call @printLine(%10) : (!cir.ptr<!s8i>) -> () loc(#loc66)
      } loc(#loc114)
    } loc(#loc112)
    cir.return loc(#loc45)
  } loc(#loc108)
  cir.func internal private  @goodG2BSource(%arg0: !s32i loc(fused[#loc69, #loc70])) -> !s32i extra(#fn_attr) {
    %0 = cir.alloca !s32i, !cir.ptr<!s32i>, ["data", init] {alignment = 4 : i64} loc(#loc117)
    %1 = cir.alloca !s32i, !cir.ptr<!s32i>, ["__retval"] {alignment = 4 : i64} loc(#loc68)
    cir.store %arg0, %0 : !s32i, !cir.ptr<!s32i> loc(#loc71)
    %2 = cir.const #cir.int<7> : !s32i loc(#loc72)
    cir.store %2, %0 : !s32i, !cir.ptr<!s32i> loc(#loc118)
    %3 = cir.load %0 : !cir.ptr<!s32i>, !s32i loc(#loc74)
    cir.store %3, %1 : !s32i, !cir.ptr<!s32i> loc(#loc119)
    %4 = cir.load %1 : !cir.ptr<!s32i>, !s32i loc(#loc119)
    cir.return %4 : !s32i loc(#loc119)
  } loc(#loc116)
  cir.func no_proto internal private  @goodG2B() extra(#fn_attr) {
    %0 = cir.alloca !s32i, !cir.ptr<!s32i>, ["data"] {alignment = 4 : i64} loc(#loc121)
    %1 = cir.const #cir.int<1> : !s32i loc(#loc80)
    %2 = cir.unary(minus, %1) : !s32i, !s32i loc(#loc81)
    cir.store %2, %0 : !s32i, !cir.ptr<!s32i> loc(#loc122)
    %3 = cir.load %0 : !cir.ptr<!s32i>, !s32i loc(#loc83)
    %4 = cir.call @goodG2BSource(%3) : (!s32i) -> !s32i loc(#loc84)
    cir.store %4, %0 : !s32i, !cir.ptr<!s32i> loc(#loc123)
    %5 = cir.const #cir.int<100> : !s32i loc(#loc87)
    %6 = cir.load %0 : !cir.ptr<!s32i>, !s32i loc(#loc88)
    %7 = cir.binop(rem, %5, %6) : !s32i loc(#loc124)
    cir.call @printIntLine(%7) : (!s32i) -> () loc(#loc89)
    cir.return loc(#loc77)
  } loc(#loc120)
} loc(#loc)
#loc = loc("/home/ladisgin/git_proj/test_projects/juliet-c/testcases/CWE369_Divide_by_Zero/s02/CWE369_Divide_by_Zero__int_zero_modulo_42.c":0:0)
#loc1 = loc("CWE369_Divide_by_Zero__int_zero_modulo_42.c":22:1)
#loc2 = loc("CWE369_Divide_by_Zero__int_zero_modulo_42.c":27:1)
#loc5 = loc("CWE369_Divide_by_Zero__int_zero_modulo_42.c":23:1)
#loc6 = loc("CWE369_Divide_by_Zero__int_zero_modulo_42.c":25:12)
#loc7 = loc("CWE369_Divide_by_Zero__int_zero_modulo_42.c":25:5)
#loc8 = loc("CWE369_Divide_by_Zero__int_zero_modulo_42.c":26:12)
#loc9 = loc("CWE369_Divide_by_Zero__int_zero_modulo_42.c":26:5)
#loc10 = loc("../../../testcasesupport/std_testcase_io.h":18:1)
#loc11 = loc("../../../testcasesupport/std_testcase_io.h":18:33)
#loc12 = loc("CWE369_Divide_by_Zero__int_zero_modulo_42.c":29:1)
#loc13 = loc("CWE369_Divide_by_Zero__int_zero_modulo_42.c":37:1)
#loc14 = loc("CWE369_Divide_by_Zero__int_zero_modulo_42.c":31:5)
#loc15 = loc("CWE369_Divide_by_Zero__int_zero_modulo_42.c":31:9)
#loc16 = loc("CWE369_Divide_by_Zero__int_zero_modulo_42.c":33:13)
#loc17 = loc("CWE369_Divide_by_Zero__int_zero_modulo_42.c":33:12)
#loc18 = loc("CWE369_Divide_by_Zero__int_zero_modulo_42.c":33:5)
#loc19 = loc("CWE369_Divide_by_Zero__int_zero_modulo_42.c":34:22)
#loc20 = loc("CWE369_Divide_by_Zero__int_zero_modulo_42.c":34:12)
#loc21 = loc("CWE369_Divide_by_Zero__int_zero_modulo_42.c":34:5)
#loc22 = loc("CWE369_Divide_by_Zero__int_zero_modulo_42.c":34:26)
#loc23 = loc("CWE369_Divide_by_Zero__int_zero_modulo_42.c":36:18)
#loc24 = loc("CWE369_Divide_by_Zero__int_zero_modulo_42.c":36:24)
#loc25 = loc("CWE369_Divide_by_Zero__int_zero_modulo_42.c":36:5)
#loc26 = loc("CWE369_Divide_by_Zero__int_zero_modulo_42.c":86:1)
#loc27 = loc("CWE369_Divide_by_Zero__int_zero_modulo_42.c":90:1)
#loc28 = loc("CWE369_Divide_by_Zero__int_zero_modulo_42.c":88:5)
#loc29 = loc("CWE369_Divide_by_Zero__int_zero_modulo_42.c":88:13)
#loc30 = loc("CWE369_Divide_by_Zero__int_zero_modulo_42.c":89:5)
#loc31 = loc("CWE369_Divide_by_Zero__int_zero_modulo_42.c":89:13)
#loc32 = loc("CWE369_Divide_by_Zero__int_zero_modulo_42.c":62:1)
#loc33 = loc("CWE369_Divide_by_Zero__int_zero_modulo_42.c":67:1)
#loc36 = loc("CWE369_Divide_by_Zero__int_zero_modulo_42.c":63:1)
#loc37 = loc("CWE369_Divide_by_Zero__int_zero_modulo_42.c":65:12)
#loc38 = loc("CWE369_Divide_by_Zero__int_zero_modulo_42.c":65:5)
#loc39 = loc("CWE369_Divide_by_Zero__int_zero_modulo_42.c":66:12)
#loc40 = loc("CWE369_Divide_by_Zero__int_zero_modulo_42.c":66:5)
#loc41 = loc("../../../testcasesupport/std_testcase_io.h":14:1)
#loc42 = loc("../../../testcasesupport/std_testcase_io.h":14:33)
#loc43 = loc("CWE369_Divide_by_Zero__int_zero_modulo_42.c":82:19)
#loc44 = loc("CWE369_Divide_by_Zero__int_zero_modulo_42.c":69:1)
#loc45 = loc("CWE369_Divide_by_Zero__int_zero_modulo_42.c":84:1)
#loc46 = loc("CWE369_Divide_by_Zero__int_zero_modulo_42.c":71:5)
#loc47 = loc("CWE369_Divide_by_Zero__int_zero_modulo_42.c":71:9)
#loc48 = loc("CWE369_Divide_by_Zero__int_zero_modulo_42.c":73:13)
#loc49 = loc("CWE369_Divide_by_Zero__int_zero_modulo_42.c":73:12)
#loc50 = loc("CWE369_Divide_by_Zero__int_zero_modulo_42.c":73:5)
#loc51 = loc("CWE369_Divide_by_Zero__int_zero_modulo_42.c":74:26)
#loc52 = loc("CWE369_Divide_by_Zero__int_zero_modulo_42.c":74:12)
#loc53 = loc("CWE369_Divide_by_Zero__int_zero_modulo_42.c":74:5)
#loc54 = loc("CWE369_Divide_by_Zero__int_zero_modulo_42.c":74:30)
#loc55 = loc("CWE369_Divide_by_Zero__int_zero_modulo_42.c":76:5)
#loc56 = loc("CWE369_Divide_by_Zero__int_zero_modulo_42.c":83:5)
#loc57 = loc("CWE369_Divide_by_Zero__int_zero_modulo_42.c":76:9)
#loc58 = loc("CWE369_Divide_by_Zero__int_zero_modulo_42.c":76:17)
#loc59 = loc("CWE369_Divide_by_Zero__int_zero_modulo_42.c":76:14)
#loc60 = loc("CWE369_Divide_by_Zero__int_zero_modulo_42.c":77:5)
#loc61 = loc("CWE369_Divide_by_Zero__int_zero_modulo_42.c":79:5)
#loc62 = loc("CWE369_Divide_by_Zero__int_zero_modulo_42.c":81:5)
#loc63 = loc("CWE369_Divide_by_Zero__int_zero_modulo_42.c":78:22)
#loc64 = loc("CWE369_Divide_by_Zero__int_zero_modulo_42.c":78:28)
#loc65 = loc("CWE369_Divide_by_Zero__int_zero_modulo_42.c":78:9)
#loc66 = loc("CWE369_Divide_by_Zero__int_zero_modulo_42.c":82:9)
#loc67 = loc("CWE369_Divide_by_Zero__int_zero_modulo_42.c":44:1)
#loc68 = loc("CWE369_Divide_by_Zero__int_zero_modulo_42.c":49:1)
#loc71 = loc("CWE369_Divide_by_Zero__int_zero_modulo_42.c":45:1)
#loc72 = loc("CWE369_Divide_by_Zero__int_zero_modulo_42.c":47:12)
#loc73 = loc("CWE369_Divide_by_Zero__int_zero_modulo_42.c":47:5)
#loc74 = loc("CWE369_Divide_by_Zero__int_zero_modulo_42.c":48:12)
#loc75 = loc("CWE369_Divide_by_Zero__int_zero_modulo_42.c":48:5)
#loc76 = loc("CWE369_Divide_by_Zero__int_zero_modulo_42.c":51:1)
#loc77 = loc("CWE369_Divide_by_Zero__int_zero_modulo_42.c":59:1)
#loc78 = loc("CWE369_Divide_by_Zero__int_zero_modulo_42.c":53:5)
#loc79 = loc("CWE369_Divide_by_Zero__int_zero_modulo_42.c":53:9)
#loc80 = loc("CWE369_Divide_by_Zero__int_zero_modulo_42.c":55:13)
#loc81 = loc("CWE369_Divide_by_Zero__int_zero_modulo_42.c":55:12)
#loc82 = loc("CWE369_Divide_by_Zero__int_zero_modulo_42.c":55:5)
#loc83 = loc("CWE369_Divide_by_Zero__int_zero_modulo_42.c":56:26)
#loc84 = loc("CWE369_Divide_by_Zero__int_zero_modulo_42.c":56:12)
#loc85 = loc("CWE369_Divide_by_Zero__int_zero_modulo_42.c":56:5)
#loc86 = loc("CWE369_Divide_by_Zero__int_zero_modulo_42.c":56:30)
#loc87 = loc("CWE369_Divide_by_Zero__int_zero_modulo_42.c":58:18)
#loc88 = loc("CWE369_Divide_by_Zero__int_zero_modulo_42.c":58:24)
#loc89 = loc("CWE369_Divide_by_Zero__int_zero_modulo_42.c":58:5)
#loc90 = loc(fused[#loc1, #loc2])
#loc92 = loc(fused[#loc7, #loc6])
#loc93 = loc(fused[#loc9, #loc8])
#loc94 = loc(fused[#loc10, #loc11])
#loc95 = loc(fused[#loc12, #loc13])
#loc96 = loc(fused[#loc14, #loc15])
#loc97 = loc(fused[#loc18, #loc16])
#loc98 = loc(fused[#loc21, #loc22])
#loc99 = loc(fused[#loc23, #loc24])
#loc100 = loc(fused[#loc26, #loc27])
#loc101 = loc(fused[#loc28, #loc29])
#loc102 = loc(fused[#loc30, #loc31])
#loc103 = loc(fused[#loc32, #loc33])
#loc105 = loc(fused[#loc38, #loc37])
#loc106 = loc(fused[#loc40, #loc39])
#loc107 = loc(fused[#loc41, #loc42])
#loc108 = loc(fused[#loc44, #loc45])
#loc109 = loc(fused[#loc46, #loc47])
#loc110 = loc(fused[#loc50, #loc48])
#loc111 = loc(fused[#loc53, #loc54])
#loc112 = loc(fused[#loc55, #loc56])
#loc113 = loc(fused[#loc57, #loc58])
#loc114 = loc(fused[#loc60, #loc61, #loc62, #loc56])
#loc115 = loc(fused[#loc63, #loc64])
#loc116 = loc(fused[#loc67, #loc68])
#loc118 = loc(fused[#loc73, #loc72])
#loc119 = loc(fused[#loc75, #loc74])
#loc120 = loc(fused[#loc76, #loc77])
#loc121 = loc(fused[#loc78, #loc79])
#loc122 = loc(fused[#loc82, #loc80])
#loc123 = loc(fused[#loc85, #loc86])
#loc124 = loc(fused[#loc87, #loc88])
