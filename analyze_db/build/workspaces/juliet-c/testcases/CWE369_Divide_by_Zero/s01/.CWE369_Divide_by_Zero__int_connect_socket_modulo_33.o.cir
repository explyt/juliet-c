!s32i = !cir.int<s, 32>
!s64i = !cir.int<s, 64>
!s8i = !cir.int<s, 8>
!u16i = !cir.int<u, 16>
!u32i = !cir.int<u, 32>
!u64i = !cir.int<u, 64>
!u8i = !cir.int<u, 8>
!void = !cir.void
#false = #cir.bool<false> : !cir.bool
#fn_attr = #cir<extra({nothrow = #cir.nothrow})>
#fn_attr1 = #cir<extra({inline = #cir.inline<no>, optnone = #cir.optnone, uwtable = #cir.uwtable<async>})>
#true = #cir.bool<true> : !cir.bool
!ty_in_addr = !cir.record<struct "in_addr" {!u32i} #cir.record.decl.ast>
!ty_sockaddr = !cir.record<struct "sockaddr" {!u16i, !cir.array<!s8i x 14>} #cir.record.decl.ast>
!ty_sockaddr_in = !cir.record<struct "sockaddr_in" {!u16i, !u16i, !ty_in_addr, !cir.array<!u8i x 8>}>
module @"/workspaces/juliet-c/testcases/CWE369_Divide_by_Zero/s01/CWE369_Divide_by_Zero__int_connect_socket_modulo_33.cpp" attributes {cir.lang = #cir.lang<cxx>, cir.sob = #cir.signed_overflow_behavior<undefined>, cir.triple = "x86_64-unknown-linux-gnu", cir.type_size_info = #cir.type_size_info<char = 8, int = 32, size_t = 64>, cir.uwtable = #cir.uwtable<async>, dlti.dl_spec = #dlti.dl_spec<!llvm.ptr = dense<64> : vector<4xi64>, f80 = dense<128> : vector<2xi64>, i16 = dense<16> : vector<2xi64>, i1 = dense<8> : vector<2xi64>, i8 = dense<8> : vector<2xi64>, f128 = dense<128> : vector<2xi64>, !llvm.ptr<270> = dense<32> : vector<4xi64>, f64 = dense<64> : vector<2xi64>, i32 = dense<32> : vector<2xi64>, f16 = dense<16> : vector<2xi64>, i64 = dense<64> : vector<2xi64>, i128 = dense<128> : vector<2xi64>, !llvm.ptr<271> = dense<32> : vector<4xi64>, !llvm.ptr<272> = dense<64> : vector<4xi64>, "dlti.stack_alignment" = 128 : i64, "dlti.endianness" = "little", "dlti.mangling_mode" = "e">} {
  cir.func private @socket(!s32i, !s32i, !s32i) -> !s32i extra(#fn_attr) loc(#loc258)
  cir.func private @inet_addr(!cir.ptr<!s8i>) -> !u32i extra(#fn_attr) loc(#loc259)
  cir.global "private" constant cir_private dsolocal @".str" = #cir.const_array<"127.0.0.1\00" : !cir.array<!s8i x 10>> : !cir.array<!s8i x 10> {alignment = 1 : i64} loc(#loc5)
  cir.func private @htons(!u16i) -> !u16i extra(#fn_attr) loc(#loc260)
  cir.func private @connect(!s32i, !cir.ptr<!ty_sockaddr>, !u32i) -> !s32i loc(#loc261)
  cir.func private @recv(!s32i, !cir.ptr<!void>, !u64i, !s32i) -> !s64i loc(#loc262)
  cir.func private @atoi(!cir.ptr<!s8i>) -> !s32i extra(#fn_attr) loc(#loc263)
  cir.func private @close(!s32i) -> !s32i loc(#loc264)
  cir.func private @printIntLine(!s32i) loc(#loc265)
  cir.func @_ZN51CWE369_Divide_by_Zero__int_connect_socket_modulo_333badEv() extra(#fn_attr1) {
    %0 = cir.alloca !s32i, !cir.ptr<!s32i>, ["data"] {alignment = 4 : i64} loc(#loc267)
    %1 = cir.alloca !cir.ptr<!s32i>, !cir.ptr<!cir.ptr<!s32i>>, ["dataRef", init, const] {alignment = 8 : i64} loc(#loc268)
    cir.store %0, %1 : !cir.ptr<!s32i>, !cir.ptr<!cir.ptr<!s32i>> loc(#loc23)
    %2 = cir.const #cir.int<1> : !s32i loc(#loc24)
    %3 = cir.unary(minus, %2) nsw : !s32i, !s32i loc(#loc25)
    cir.store %3, %0 : !s32i, !cir.ptr<!s32i> loc(#loc269)
    cir.scope {
      %4 = cir.alloca !s32i, !cir.ptr<!s32i>, ["recvResult"] {alignment = 4 : i64} loc(#loc271)
      %5 = cir.alloca !ty_sockaddr_in, !cir.ptr<!ty_sockaddr_in>, ["service"] {alignment = 4 : i64} loc(#loc272)
      %6 = cir.alloca !s32i, !cir.ptr<!s32i>, ["connectSocket", init] {alignment = 4 : i64} loc(#loc273)
      %7 = cir.alloca !cir.array<!s8i x 14>, !cir.ptr<!cir.array<!s8i x 14>>, ["inputBuffer"] {alignment = 1 : i64} loc(#loc274)
      %8 = cir.const #cir.int<1> : !s32i loc(#loc34)
      %9 = cir.unary(minus, %8) nsw : !s32i, !s32i loc(#loc34)
      cir.store %9, %6 : !s32i, !cir.ptr<!s32i> loc(#loc273)
      cir.scope {
        cir.do {
          cir.scope {
            %10 = cir.const #cir.int<2> : !s32i loc(#loc41)
            %11 = cir.const #cir.int<1> : !u32i loc(#loc42)
            %12 = cir.cast(integral, %11 : !u32i), !s32i loc(#loc42)
            %13 = cir.const #cir.int<6> : !u32i loc(#loc43)
            %14 = cir.cast(integral, %13 : !u32i), !s32i loc(#loc43)
            %15 = cir.call @socket(%10, %12, %14) : (!s32i, !s32i, !s32i) -> !s32i extra(#fn_attr) loc(#loc44)
            cir.store %15, %6 : !s32i, !cir.ptr<!s32i> loc(#loc277)
            cir.scope {
              %53 = cir.load %6 : !cir.ptr<!s32i>, !s32i loc(#loc49)
              %54 = cir.const #cir.int<1> : !s32i loc(#loc50)
              %55 = cir.unary(minus, %54) nsw : !s32i, !s32i loc(#loc50)
              %56 = cir.cmp(eq, %53, %55) : !s32i, !cir.bool loc(#loc279)
              cir.if %56 {
                cir.break loc(#loc52)
              } loc(#loc280)
            } loc(#loc278)
            %16 = cir.cast(bitcast, %5 : !cir.ptr<!ty_sockaddr_in>), !cir.ptr<!void> loc(#loc281)
            %17 = cir.const #cir.int<0> : !s32i loc(#loc55)
            %18 = cir.const #cir.int<16> : !u64i loc(#loc282)
            cir.libc.memset %18 bytes from %16 set to %17 : !cir.ptr<!void>, !s32i, !u64i loc(#loc283)
            %19 = cir.const #cir.int<2> : !s32i loc(#loc60)
            %20 = cir.cast(integral, %19 : !s32i), !u16i loc(#loc60)
            %21 = cir.get_member %5[0] {name = "sin_family"} : !cir.ptr<!ty_sockaddr_in> -> !cir.ptr<!u16i> loc(#loc61)
            cir.store %20, %21 : !u16i, !cir.ptr<!u16i> loc(#loc284)
            %22 = cir.get_global @".str" : !cir.ptr<!cir.array<!s8i x 10>> loc(#loc5)
            %23 = cir.cast(array_to_ptrdecay, %22 : !cir.ptr<!cir.array<!s8i x 10>>), !cir.ptr<!s8i> loc(#loc5)
            %24 = cir.call @inet_addr(%23) : (!cir.ptr<!s8i>) -> !u32i extra(#fn_attr) loc(#loc63)
            %25 = cir.get_member %5[2] {name = "sin_addr"} : !cir.ptr<!ty_sockaddr_in> -> !cir.ptr<!ty_in_addr> loc(#loc64)
            %26 = cir.get_member %25[0] {name = "s_addr"} : !cir.ptr<!ty_in_addr> -> !cir.ptr<!u32i> loc(#loc65)
            cir.store %24, %26 : !u32i, !cir.ptr<!u32i> loc(#loc285)
            %27 = cir.const #cir.int<27015> : !s32i loc(#loc68)
            %28 = cir.cast(integral, %27 : !s32i), !u16i loc(#loc68)
            %29 = cir.call @htons(%28) : (!u16i) -> !u16i side_effect(const) extra(#fn_attr) loc(#loc69)
            %30 = cir.get_member %5[1] {name = "sin_port"} : !cir.ptr<!ty_sockaddr_in> -> !cir.ptr<!u16i> loc(#loc70)
            cir.store %29, %30 : !u16i, !cir.ptr<!u16i> loc(#loc286)
            cir.scope {
              %53 = cir.load %6 : !cir.ptr<!s32i>, !s32i loc(#loc75)
              %54 = cir.cast(bitcast, %5 : !cir.ptr<!ty_sockaddr_in>), !cir.ptr<!ty_sockaddr> loc(#loc288)
              %55 = cir.const #cir.int<16> : !u64i loc(#loc289)
              %56 = cir.cast(integral, %55 : !u64i), !u32i loc(#loc289)
              %57 = cir.call @connect(%53, %54, %56) : (!s32i, !cir.ptr<!ty_sockaddr>, !u32i) -> !s32i loc(#loc80)
              %58 = cir.const #cir.int<1> : !s32i loc(#loc81)
              %59 = cir.unary(minus, %58) nsw : !s32i, !s32i loc(#loc81)
              %60 = cir.cmp(eq, %57, %59) : !s32i, !cir.bool loc(#loc290)
              cir.if %60 {
                cir.break loc(#loc83)
              } loc(#loc291)
            } loc(#loc287)
            %31 = cir.load %6 : !cir.ptr<!s32i>, !s32i loc(#loc84)
            %32 = cir.cast(array_to_ptrdecay, %7 : !cir.ptr<!cir.array<!s8i x 14>>), !cir.ptr<!s8i> loc(#loc85)
            %33 = cir.cast(bitcast, %32 : !cir.ptr<!s8i>), !cir.ptr<!void> loc(#loc85)
            %34 = cir.const #cir.int<3> : !s32i loc(#loc86)
            %35 = cir.cast(integral, %34 : !s32i), !u64i loc(#loc86)
            %36 = cir.const #cir.int<4> : !u64i loc(#loc86)
            %37 = cir.binop(mul, %35, %36) : !u64i loc(#loc86)
            %38 = cir.const #cir.int<2> : !s32i loc(#loc86)
            %39 = cir.cast(integral, %38 : !s32i), !u64i loc(#loc86)
            %40 = cir.binop(add, %37, %39) : !u64i loc(#loc86)
            %41 = cir.const #cir.int<1> : !s32i loc(#loc87)
            %42 = cir.cast(integral, %41 : !s32i), !u64i loc(#loc87)
            %43 = cir.binop(sub, %40, %42) : !u64i loc(#loc292)
            %44 = cir.const #cir.int<0> : !s32i loc(#loc88)
            %45 = cir.call @recv(%31, %33, %43, %44) : (!s32i, !cir.ptr<!void>, !u64i, !s32i) -> !s64i loc(#loc89)
            %46 = cir.cast(integral, %45 : !s64i), !s32i loc(#loc89)
            cir.store %46, %4 : !s32i, !cir.ptr<!s32i> loc(#loc293)
            cir.scope {
              %53 = cir.load %4 : !cir.ptr<!s32i>, !s32i loc(#loc94)
              %54 = cir.const #cir.int<1> : !s32i loc(#loc95)
              %55 = cir.unary(minus, %54) nsw : !s32i, !s32i loc(#loc95)
              %56 = cir.cmp(eq, %53, %55) : !s32i, !cir.bool loc(#loc295)
              %57 = cir.ternary(%56, true {
                %58 = cir.const #true loc(#loc96)
                cir.yield %58 : !cir.bool loc(#loc96)
              }, false {
                %58 = cir.load %4 : !cir.ptr<!s32i>, !s32i loc(#loc97)
                %59 = cir.const #cir.int<0> : !s32i loc(#loc98)
                %60 = cir.cmp(eq, %58, %59) : !s32i, !cir.bool loc(#loc296)
                %61 = cir.ternary(%60, true {
                  %62 = cir.const #true loc(#loc96)
                  cir.yield %62 : !cir.bool loc(#loc96)
                }, false {
                  %62 = cir.const #false loc(#loc96)
                  cir.yield %62 : !cir.bool loc(#loc96)
                }) : (!cir.bool) -> !cir.bool loc(#loc96)
                cir.yield %61 : !cir.bool loc(#loc96)
              }) : (!cir.bool) -> !cir.bool loc(#loc96)
              cir.if %57 {
                cir.break loc(#loc100)
              } loc(#loc297)
            } loc(#loc294)
            %47 = cir.const #cir.int<0> : !s8i loc(#loc101)
            %48 = cir.load %4 : !cir.ptr<!s32i>, !s32i loc(#loc102)
            %49 = cir.cast(array_to_ptrdecay, %7 : !cir.ptr<!cir.array<!s8i x 14>>), !cir.ptr<!s8i> loc(#loc103)
            %50 = cir.ptr_stride(%49 : !cir.ptr<!s8i>, %48 : !s32i), !cir.ptr<!s8i> loc(#loc103)
            cir.store %47, %50 : !s8i, !cir.ptr<!s8i> loc(#loc298)
            %51 = cir.cast(array_to_ptrdecay, %7 : !cir.ptr<!cir.array<!s8i x 14>>), !cir.ptr<!s8i> loc(#loc104)
            %52 = cir.call @atoi(%51) : (!cir.ptr<!s8i>) -> !s32i side_effect(pure) extra(#fn_attr) loc(#loc105)
            cir.store %52, %0 : !s32i, !cir.ptr<!s32i> loc(#loc299)
          } loc(#loc276)
          cir.yield loc(#loc38)
        } while {
          %10 = cir.const #cir.int<0> : !s32i loc(#loc108)
          %11 = cir.cast(int_to_bool, %10 : !s32i), !cir.bool loc(#loc108)
          cir.condition(%11) loc(#loc108)
        } loc(#loc275)
      } loc(#loc275)
      cir.scope {
        %10 = cir.load %6 : !cir.ptr<!s32i>, !s32i loc(#loc111)
        %11 = cir.const #cir.int<1> : !s32i loc(#loc112)
        %12 = cir.unary(minus, %11) nsw : !s32i, !s32i loc(#loc112)
        %13 = cir.cmp(ne, %10, %12) : !s32i, !cir.bool loc(#loc301)
        cir.if %13 {
          %14 = cir.load %6 : !cir.ptr<!s32i>, !s32i loc(#loc114)
          %15 = cir.call @close(%14) : (!s32i) -> !s32i loc(#loc115)
        } loc(#loc302)
      } loc(#loc300)
    } loc(#loc270)
    cir.scope {
      %4 = cir.alloca !s32i, !cir.ptr<!s32i>, ["data", init] {alignment = 4 : i64} loc(#loc304)
      %5 = cir.load %1 : !cir.ptr<!cir.ptr<!s32i>>, !cir.ptr<!s32i> loc(#loc119)
      %6 = cir.load %5 : !cir.ptr<!s32i>, !s32i loc(#loc119)
      cir.store %6, %4 : !s32i, !cir.ptr<!s32i> loc(#loc304)
      %7 = cir.const #cir.int<100> : !s32i loc(#loc120)
      %8 = cir.load %4 : !cir.ptr<!s32i>, !s32i loc(#loc121)
      %9 = cir.binop(rem, %7, %8) : !s32i loc(#loc305)
      cir.call @printIntLine(%9) : (!s32i) -> () loc(#loc122)
    } loc(#loc303)
    cir.return loc(#loc19)
  } loc(#loc266)
  cir.func internal private @_ZN51CWE369_Divide_by_Zero__int_connect_socket_modulo_33L7goodG2BEv() extra(#fn_attr1) {
    %0 = cir.alloca !s32i, !cir.ptr<!s32i>, ["data"] {alignment = 4 : i64} loc(#loc307)
    %1 = cir.alloca !cir.ptr<!s32i>, !cir.ptr<!cir.ptr<!s32i>>, ["dataRef", init, const] {alignment = 8 : i64} loc(#loc308)
    cir.store %0, %1 : !cir.ptr<!s32i>, !cir.ptr<!cir.ptr<!s32i>> loc(#loc128)
    %2 = cir.const #cir.int<1> : !s32i loc(#loc129)
    %3 = cir.unary(minus, %2) nsw : !s32i, !s32i loc(#loc130)
    cir.store %3, %0 : !s32i, !cir.ptr<!s32i> loc(#loc309)
    %4 = cir.const #cir.int<7> : !s32i loc(#loc132)
    cir.store %4, %0 : !s32i, !cir.ptr<!s32i> loc(#loc310)
    cir.scope {
      %5 = cir.alloca !s32i, !cir.ptr<!s32i>, ["data", init] {alignment = 4 : i64} loc(#loc312)
      %6 = cir.load %1 : !cir.ptr<!cir.ptr<!s32i>>, !cir.ptr<!s32i> loc(#loc137)
      %7 = cir.load %6 : !cir.ptr<!s32i>, !s32i loc(#loc137)
      cir.store %7, %5 : !s32i, !cir.ptr<!s32i> loc(#loc312)
      %8 = cir.const #cir.int<100> : !s32i loc(#loc138)
      %9 = cir.load %5 : !cir.ptr<!s32i>, !s32i loc(#loc139)
      %10 = cir.binop(rem, %8, %9) : !s32i loc(#loc313)
      cir.call @printIntLine(%10) : (!s32i) -> () loc(#loc140)
    } loc(#loc311)
    cir.return loc(#loc124)
  } loc(#loc306)
  cir.func private @printLine(!cir.ptr<!s8i>) loc(#loc314)
  cir.global "private" constant cir_private dsolocal @".str.1" = #cir.const_array<"This would result in a divide by zero\00" : !cir.array<!s8i x 38>> : !cir.array<!s8i x 38> {alignment = 1 : i64} loc(#loc143)
  cir.func internal private @_ZN51CWE369_Divide_by_Zero__int_connect_socket_modulo_33L7goodB2GEv() extra(#fn_attr1) {
    %0 = cir.alloca !s32i, !cir.ptr<!s32i>, ["data"] {alignment = 4 : i64} loc(#loc316)
    %1 = cir.alloca !cir.ptr<!s32i>, !cir.ptr<!cir.ptr<!s32i>>, ["dataRef", init, const] {alignment = 8 : i64} loc(#loc317)
    cir.store %0, %1 : !cir.ptr<!s32i>, !cir.ptr<!cir.ptr<!s32i>> loc(#loc149)
    %2 = cir.const #cir.int<1> : !s32i loc(#loc150)
    %3 = cir.unary(minus, %2) nsw : !s32i, !s32i loc(#loc151)
    cir.store %3, %0 : !s32i, !cir.ptr<!s32i> loc(#loc318)
    cir.scope {
      %4 = cir.alloca !s32i, !cir.ptr<!s32i>, ["recvResult"] {alignment = 4 : i64} loc(#loc320)
      %5 = cir.alloca !ty_sockaddr_in, !cir.ptr<!ty_sockaddr_in>, ["service"] {alignment = 4 : i64} loc(#loc321)
      %6 = cir.alloca !s32i, !cir.ptr<!s32i>, ["connectSocket", init] {alignment = 4 : i64} loc(#loc322)
      %7 = cir.alloca !cir.array<!s8i x 14>, !cir.ptr<!cir.array<!s8i x 14>>, ["inputBuffer"] {alignment = 1 : i64} loc(#loc323)
      %8 = cir.const #cir.int<1> : !s32i loc(#loc160)
      %9 = cir.unary(minus, %8) nsw : !s32i, !s32i loc(#loc160)
      cir.store %9, %6 : !s32i, !cir.ptr<!s32i> loc(#loc322)
      cir.scope {
        cir.do {
          cir.scope {
            %10 = cir.const #cir.int<2> : !s32i loc(#loc167)
            %11 = cir.const #cir.int<1> : !u32i loc(#loc168)
            %12 = cir.cast(integral, %11 : !u32i), !s32i loc(#loc168)
            %13 = cir.const #cir.int<6> : !u32i loc(#loc169)
            %14 = cir.cast(integral, %13 : !u32i), !s32i loc(#loc169)
            %15 = cir.call @socket(%10, %12, %14) : (!s32i, !s32i, !s32i) -> !s32i extra(#fn_attr) loc(#loc170)
            cir.store %15, %6 : !s32i, !cir.ptr<!s32i> loc(#loc326)
            cir.scope {
              %53 = cir.load %6 : !cir.ptr<!s32i>, !s32i loc(#loc175)
              %54 = cir.const #cir.int<1> : !s32i loc(#loc176)
              %55 = cir.unary(minus, %54) nsw : !s32i, !s32i loc(#loc176)
              %56 = cir.cmp(eq, %53, %55) : !s32i, !cir.bool loc(#loc328)
              cir.if %56 {
                cir.break loc(#loc178)
              } loc(#loc329)
            } loc(#loc327)
            %16 = cir.cast(bitcast, %5 : !cir.ptr<!ty_sockaddr_in>), !cir.ptr<!void> loc(#loc330)
            %17 = cir.const #cir.int<0> : !s32i loc(#loc181)
            %18 = cir.const #cir.int<16> : !u64i loc(#loc331)
            cir.libc.memset %18 bytes from %16 set to %17 : !cir.ptr<!void>, !s32i, !u64i loc(#loc332)
            %19 = cir.const #cir.int<2> : !s32i loc(#loc186)
            %20 = cir.cast(integral, %19 : !s32i), !u16i loc(#loc186)
            %21 = cir.get_member %5[0] {name = "sin_family"} : !cir.ptr<!ty_sockaddr_in> -> !cir.ptr<!u16i> loc(#loc61)
            cir.store %20, %21 : !u16i, !cir.ptr<!u16i> loc(#loc333)
            %22 = cir.get_global @".str" : !cir.ptr<!cir.array<!s8i x 10>> loc(#loc188)
            %23 = cir.cast(array_to_ptrdecay, %22 : !cir.ptr<!cir.array<!s8i x 10>>), !cir.ptr<!s8i> loc(#loc188)
            %24 = cir.call @inet_addr(%23) : (!cir.ptr<!s8i>) -> !u32i extra(#fn_attr) loc(#loc189)
            %25 = cir.get_member %5[2] {name = "sin_addr"} : !cir.ptr<!ty_sockaddr_in> -> !cir.ptr<!ty_in_addr> loc(#loc64)
            %26 = cir.get_member %25[0] {name = "s_addr"} : !cir.ptr<!ty_in_addr> -> !cir.ptr<!u32i> loc(#loc65)
            cir.store %24, %26 : !u32i, !cir.ptr<!u32i> loc(#loc334)
            %27 = cir.const #cir.int<27015> : !s32i loc(#loc192)
            %28 = cir.cast(integral, %27 : !s32i), !u16i loc(#loc192)
            %29 = cir.call @htons(%28) : (!u16i) -> !u16i side_effect(const) extra(#fn_attr) loc(#loc193)
            %30 = cir.get_member %5[1] {name = "sin_port"} : !cir.ptr<!ty_sockaddr_in> -> !cir.ptr<!u16i> loc(#loc70)
            cir.store %29, %30 : !u16i, !cir.ptr<!u16i> loc(#loc335)
            cir.scope {
              %53 = cir.load %6 : !cir.ptr<!s32i>, !s32i loc(#loc198)
              %54 = cir.cast(bitcast, %5 : !cir.ptr<!ty_sockaddr_in>), !cir.ptr<!ty_sockaddr> loc(#loc337)
              %55 = cir.const #cir.int<16> : !u64i loc(#loc338)
              %56 = cir.cast(integral, %55 : !u64i), !u32i loc(#loc338)
              %57 = cir.call @connect(%53, %54, %56) : (!s32i, !cir.ptr<!ty_sockaddr>, !u32i) -> !s32i loc(#loc203)
              %58 = cir.const #cir.int<1> : !s32i loc(#loc204)
              %59 = cir.unary(minus, %58) nsw : !s32i, !s32i loc(#loc204)
              %60 = cir.cmp(eq, %57, %59) : !s32i, !cir.bool loc(#loc339)
              cir.if %60 {
                cir.break loc(#loc206)
              } loc(#loc340)
            } loc(#loc336)
            %31 = cir.load %6 : !cir.ptr<!s32i>, !s32i loc(#loc207)
            %32 = cir.cast(array_to_ptrdecay, %7 : !cir.ptr<!cir.array<!s8i x 14>>), !cir.ptr<!s8i> loc(#loc208)
            %33 = cir.cast(bitcast, %32 : !cir.ptr<!s8i>), !cir.ptr<!void> loc(#loc208)
            %34 = cir.const #cir.int<3> : !s32i loc(#loc209)
            %35 = cir.cast(integral, %34 : !s32i), !u64i loc(#loc209)
            %36 = cir.const #cir.int<4> : !u64i loc(#loc209)
            %37 = cir.binop(mul, %35, %36) : !u64i loc(#loc209)
            %38 = cir.const #cir.int<2> : !s32i loc(#loc209)
            %39 = cir.cast(integral, %38 : !s32i), !u64i loc(#loc209)
            %40 = cir.binop(add, %37, %39) : !u64i loc(#loc209)
            %41 = cir.const #cir.int<1> : !s32i loc(#loc210)
            %42 = cir.cast(integral, %41 : !s32i), !u64i loc(#loc210)
            %43 = cir.binop(sub, %40, %42) : !u64i loc(#loc341)
            %44 = cir.const #cir.int<0> : !s32i loc(#loc211)
            %45 = cir.call @recv(%31, %33, %43, %44) : (!s32i, !cir.ptr<!void>, !u64i, !s32i) -> !s64i loc(#loc212)
            %46 = cir.cast(integral, %45 : !s64i), !s32i loc(#loc212)
            cir.store %46, %4 : !s32i, !cir.ptr<!s32i> loc(#loc342)
            cir.scope {
              %53 = cir.load %4 : !cir.ptr<!s32i>, !s32i loc(#loc217)
              %54 = cir.const #cir.int<1> : !s32i loc(#loc218)
              %55 = cir.unary(minus, %54) nsw : !s32i, !s32i loc(#loc218)
              %56 = cir.cmp(eq, %53, %55) : !s32i, !cir.bool loc(#loc344)
              %57 = cir.ternary(%56, true {
                %58 = cir.const #true loc(#loc219)
                cir.yield %58 : !cir.bool loc(#loc219)
              }, false {
                %58 = cir.load %4 : !cir.ptr<!s32i>, !s32i loc(#loc220)
                %59 = cir.const #cir.int<0> : !s32i loc(#loc221)
                %60 = cir.cmp(eq, %58, %59) : !s32i, !cir.bool loc(#loc345)
                %61 = cir.ternary(%60, true {
                  %62 = cir.const #true loc(#loc219)
                  cir.yield %62 : !cir.bool loc(#loc219)
                }, false {
                  %62 = cir.const #false loc(#loc219)
                  cir.yield %62 : !cir.bool loc(#loc219)
                }) : (!cir.bool) -> !cir.bool loc(#loc219)
                cir.yield %61 : !cir.bool loc(#loc219)
              }) : (!cir.bool) -> !cir.bool loc(#loc219)
              cir.if %57 {
                cir.break loc(#loc223)
              } loc(#loc346)
            } loc(#loc343)
            %47 = cir.const #cir.int<0> : !s8i loc(#loc224)
            %48 = cir.load %4 : !cir.ptr<!s32i>, !s32i loc(#loc225)
            %49 = cir.cast(array_to_ptrdecay, %7 : !cir.ptr<!cir.array<!s8i x 14>>), !cir.ptr<!s8i> loc(#loc226)
            %50 = cir.ptr_stride(%49 : !cir.ptr<!s8i>, %48 : !s32i), !cir.ptr<!s8i> loc(#loc226)
            cir.store %47, %50 : !s8i, !cir.ptr<!s8i> loc(#loc347)
            %51 = cir.cast(array_to_ptrdecay, %7 : !cir.ptr<!cir.array<!s8i x 14>>), !cir.ptr<!s8i> loc(#loc227)
            %52 = cir.call @atoi(%51) : (!cir.ptr<!s8i>) -> !s32i side_effect(pure) extra(#fn_attr) loc(#loc228)
            cir.store %52, %0 : !s32i, !cir.ptr<!s32i> loc(#loc348)
          } loc(#loc325)
          cir.yield loc(#loc164)
        } while {
          %10 = cir.const #cir.int<0> : !s32i loc(#loc231)
          %11 = cir.cast(int_to_bool, %10 : !s32i), !cir.bool loc(#loc231)
          cir.condition(%11) loc(#loc231)
        } loc(#loc324)
      } loc(#loc324)
      cir.scope {
        %10 = cir.load %6 : !cir.ptr<!s32i>, !s32i loc(#loc234)
        %11 = cir.const #cir.int<1> : !s32i loc(#loc235)
        %12 = cir.unary(minus, %11) nsw : !s32i, !s32i loc(#loc235)
        %13 = cir.cmp(ne, %10, %12) : !s32i, !cir.bool loc(#loc350)
        cir.if %13 {
          %14 = cir.load %6 : !cir.ptr<!s32i>, !s32i loc(#loc237)
          %15 = cir.call @close(%14) : (!s32i) -> !s32i loc(#loc238)
        } loc(#loc351)
      } loc(#loc349)
    } loc(#loc319)
    cir.scope {
      %4 = cir.alloca !s32i, !cir.ptr<!s32i>, ["data", init] {alignment = 4 : i64} loc(#loc353)
      %5 = cir.load %1 : !cir.ptr<!cir.ptr<!s32i>>, !cir.ptr<!s32i> loc(#loc242)
      %6 = cir.load %5 : !cir.ptr<!s32i>, !s32i loc(#loc242)
      cir.store %6, %4 : !s32i, !cir.ptr<!s32i> loc(#loc353)
      cir.scope {
        %7 = cir.load %4 : !cir.ptr<!s32i>, !s32i loc(#loc245)
        %8 = cir.const #cir.int<0> : !s32i loc(#loc246)
        %9 = cir.cmp(ne, %7, %8) : !s32i, !cir.bool loc(#loc355)
        cir.if %9 {
          %10 = cir.const #cir.int<100> : !s32i loc(#loc250)
          %11 = cir.load %4 : !cir.ptr<!s32i>, !s32i loc(#loc251)
          %12 = cir.binop(rem, %10, %11) : !s32i loc(#loc357)
          cir.call @printIntLine(%12) : (!s32i) -> () loc(#loc252)
        } else {
          %10 = cir.get_global @".str.1" : !cir.ptr<!cir.array<!s8i x 38>> loc(#loc143)
          %11 = cir.cast(array_to_ptrdecay, %10 : !cir.ptr<!cir.array<!s8i x 38>>), !cir.ptr<!s8i> loc(#loc143)
          cir.call @printLine(%11) : (!cir.ptr<!s8i>) -> () loc(#loc253)
        } loc(#loc356)
      } loc(#loc354)
    } loc(#loc352)
    cir.return loc(#loc145)
  } loc(#loc315)
  cir.func @_ZN51CWE369_Divide_by_Zero__int_connect_socket_modulo_334goodEv() extra(#fn_attr1) {
    cir.call @_ZN51CWE369_Divide_by_Zero__int_connect_socket_modulo_33L7goodG2BEv() : () -> () loc(#loc256)
    cir.call @_ZN51CWE369_Divide_by_Zero__int_connect_socket_modulo_33L7goodB2GEv() : () -> () loc(#loc257)
    cir.return loc(#loc255)
  } loc(#loc358)
} loc(#loc)
#loc = loc("/workspaces/juliet-c/testcases/CWE369_Divide_by_Zero/s01/CWE369_Divide_by_Zero__int_connect_socket_modulo_33.cpp":0:0)
#loc1 = loc("/usr/include/x86_64-linux-gnu/sys/socket.h":102:1)
#loc2 = loc("/usr/include/x86_64-linux-gnu/sys/socket.h":102:62)
#loc3 = loc("/usr/include/arpa/inet.h":34:1)
#loc4 = loc("/usr/include/arpa/inet.h":34:47)
#loc5 = loc("CWE369_Divide_by_Zero__int_connect_socket_modulo_33.cpp":79:49)
#loc6 = loc("/usr/include/netinet/in.h":402:1)
#loc7 = loc("/usr/include/netinet/in.h":403:40)
#loc8 = loc("/usr/include/x86_64-linux-gnu/sys/socket.h":126:1)
#loc9 = loc("/usr/include/x86_64-linux-gnu/sys/socket.h":126:75)
#loc10 = loc("/usr/include/x86_64-linux-gnu/sys/socket.h":145:1)
#loc11 = loc("/usr/include/x86_64-linux-gnu/sys/socket.h":145:68)
#loc12 = loc("/usr/include/stdlib.h":105:1)
#loc13 = loc("/usr/include/stdlib.h":106:33)
#loc14 = loc("/usr/include/unistd.h":358:1)
#loc15 = loc("/usr/include/unistd.h":358:27)
#loc16 = loc("../../../testcasesupport/std_testcase_io.h":18:1)
#loc17 = loc("../../../testcasesupport/std_testcase_io.h":18:33)
#loc18 = loc("CWE369_Divide_by_Zero__int_connect_socket_modulo_33.cpp":47:1)
#loc19 = loc("CWE369_Divide_by_Zero__int_connect_socket_modulo_33.cpp":114:1)
#loc20 = loc("CWE369_Divide_by_Zero__int_connect_socket_modulo_33.cpp":49:5)
#loc21 = loc("CWE369_Divide_by_Zero__int_connect_socket_modulo_33.cpp":49:9)
#loc22 = loc("CWE369_Divide_by_Zero__int_connect_socket_modulo_33.cpp":50:5)
#loc23 = loc("CWE369_Divide_by_Zero__int_connect_socket_modulo_33.cpp":50:20)
#loc24 = loc("CWE369_Divide_by_Zero__int_connect_socket_modulo_33.cpp":52:13)
#loc25 = loc("CWE369_Divide_by_Zero__int_connect_socket_modulo_33.cpp":52:12)
#loc26 = loc("CWE369_Divide_by_Zero__int_connect_socket_modulo_33.cpp":52:5)
#loc27 = loc("CWE369_Divide_by_Zero__int_connect_socket_modulo_33.cpp":53:5)
#loc28 = loc("CWE369_Divide_by_Zero__int_connect_socket_modulo_33.cpp":108:5)
#loc29 = loc("CWE369_Divide_by_Zero__int_connect_socket_modulo_33.cpp":58:9)
#loc30 = loc("CWE369_Divide_by_Zero__int_connect_socket_modulo_33.cpp":58:13)
#loc31 = loc("CWE369_Divide_by_Zero__int_connect_socket_modulo_33.cpp":59:9)
#loc32 = loc("CWE369_Divide_by_Zero__int_connect_socket_modulo_33.cpp":59:28)
#loc33 = loc("CWE369_Divide_by_Zero__int_connect_socket_modulo_33.cpp":60:9)
#loc34 = loc("CWE369_Divide_by_Zero__int_connect_socket_modulo_33.cpp":60:32)
#loc35 = loc("CWE369_Divide_by_Zero__int_connect_socket_modulo_33.cpp":61:9)
#loc36 = loc("CWE369_Divide_by_Zero__int_connect_socket_modulo_33.cpp":61:41)
#loc37 = loc("CWE369_Divide_by_Zero__int_connect_socket_modulo_33.cpp":62:9)
#loc38 = loc("CWE369_Divide_by_Zero__int_connect_socket_modulo_33.cpp":97:17)
#loc39 = loc("CWE369_Divide_by_Zero__int_connect_socket_modulo_33.cpp":63:9)
#loc40 = loc("CWE369_Divide_by_Zero__int_connect_socket_modulo_33.cpp":96:9)
#loc41 = loc("CWE369_Divide_by_Zero__int_connect_socket_modulo_33.cpp":72:36)
#loc42 = loc("CWE369_Divide_by_Zero__int_connect_socket_modulo_33.cpp":72:45)
#loc43 = loc("CWE369_Divide_by_Zero__int_connect_socket_modulo_33.cpp":72:58)
#loc44 = loc("CWE369_Divide_by_Zero__int_connect_socket_modulo_33.cpp":72:29)
#loc45 = loc("CWE369_Divide_by_Zero__int_connect_socket_modulo_33.cpp":72:13)
#loc46 = loc("CWE369_Divide_by_Zero__int_connect_socket_modulo_33.cpp":72:69)
#loc47 = loc("CWE369_Divide_by_Zero__int_connect_socket_modulo_33.cpp":73:13)
#loc48 = loc("CWE369_Divide_by_Zero__int_connect_socket_modulo_33.cpp":76:13)
#loc49 = loc("CWE369_Divide_by_Zero__int_connect_socket_modulo_33.cpp":73:17)
#loc50 = loc("CWE369_Divide_by_Zero__int_connect_socket_modulo_33.cpp":73:34)
#loc51 = loc("CWE369_Divide_by_Zero__int_connect_socket_modulo_33.cpp":74:13)
#loc52 = loc("CWE369_Divide_by_Zero__int_connect_socket_modulo_33.cpp":75:17)
#loc53 = loc("CWE369_Divide_by_Zero__int_connect_socket_modulo_33.cpp":77:20)
#loc54 = loc("CWE369_Divide_by_Zero__int_connect_socket_modulo_33.cpp":77:21)
#loc55 = loc("CWE369_Divide_by_Zero__int_connect_socket_modulo_33.cpp":77:30)
#loc56 = loc("CWE369_Divide_by_Zero__int_connect_socket_modulo_33.cpp":77:33)
#loc57 = loc("CWE369_Divide_by_Zero__int_connect_socket_modulo_33.cpp":77:47)
#loc58 = loc("CWE369_Divide_by_Zero__int_connect_socket_modulo_33.cpp":77:13)
#loc59 = loc("CWE369_Divide_by_Zero__int_connect_socket_modulo_33.cpp":77:48)
#loc60 = loc("CWE369_Divide_by_Zero__int_connect_socket_modulo_33.cpp":78:34)
#loc61 = loc("/usr/include/netinet/in.h":249:5)
#loc62 = loc("CWE369_Divide_by_Zero__int_connect_socket_modulo_33.cpp":78:13)
#loc63 = loc("CWE369_Divide_by_Zero__int_connect_socket_modulo_33.cpp":79:39)
#loc64 = loc("/usr/include/netinet/in.h":251:20)
#loc65 = loc("/usr/include/netinet/in.h":33:15)
#loc66 = loc("CWE369_Divide_by_Zero__int_connect_socket_modulo_33.cpp":79:13)
#loc67 = loc("CWE369_Divide_by_Zero__int_connect_socket_modulo_33.cpp":79:59)
#loc68 = loc("CWE369_Divide_by_Zero__int_connect_socket_modulo_33.cpp":80:38)
#loc69 = loc("CWE369_Divide_by_Zero__int_connect_socket_modulo_33.cpp":80:32)
#loc70 = loc("/usr/include/netinet/in.h":250:15)
#loc71 = loc("CWE369_Divide_by_Zero__int_connect_socket_modulo_33.cpp":80:13)
#loc72 = loc("CWE369_Divide_by_Zero__int_connect_socket_modulo_33.cpp":80:46)
#loc73 = loc("CWE369_Divide_by_Zero__int_connect_socket_modulo_33.cpp":81:13)
#loc74 = loc("CWE369_Divide_by_Zero__int_connect_socket_modulo_33.cpp":84:13)
#loc75 = loc("CWE369_Divide_by_Zero__int_connect_socket_modulo_33.cpp":81:25)
#loc76 = loc("CWE369_Divide_by_Zero__int_connect_socket_modulo_33.cpp":81:58)
#loc77 = loc("CWE369_Divide_by_Zero__int_connect_socket_modulo_33.cpp":81:59)
#loc78 = loc("CWE369_Divide_by_Zero__int_connect_socket_modulo_33.cpp":81:68)
#loc79 = loc("CWE369_Divide_by_Zero__int_connect_socket_modulo_33.cpp":81:82)
#loc80 = loc("CWE369_Divide_by_Zero__int_connect_socket_modulo_33.cpp":81:17)
#loc81 = loc("CWE369_Divide_by_Zero__int_connect_socket_modulo_33.cpp":81:88)
#loc82 = loc("CWE369_Divide_by_Zero__int_connect_socket_modulo_33.cpp":82:13)
#loc83 = loc("CWE369_Divide_by_Zero__int_connect_socket_modulo_33.cpp":83:17)
#loc84 = loc("CWE369_Divide_by_Zero__int_connect_socket_modulo_33.cpp":87:31)
#loc85 = loc("CWE369_Divide_by_Zero__int_connect_socket_modulo_33.cpp":87:46)
#loc86 = loc("CWE369_Divide_by_Zero__int_connect_socket_modulo_33.cpp":87:59)
#loc87 = loc("CWE369_Divide_by_Zero__int_connect_socket_modulo_33.cpp":87:77)
#loc88 = loc("CWE369_Divide_by_Zero__int_connect_socket_modulo_33.cpp":87:80)
#loc89 = loc("CWE369_Divide_by_Zero__int_connect_socket_modulo_33.cpp":87:26)
#loc90 = loc("CWE369_Divide_by_Zero__int_connect_socket_modulo_33.cpp":87:13)
#loc91 = loc("CWE369_Divide_by_Zero__int_connect_socket_modulo_33.cpp":87:81)
#loc92 = loc("CWE369_Divide_by_Zero__int_connect_socket_modulo_33.cpp":88:13)
#loc93 = loc("CWE369_Divide_by_Zero__int_connect_socket_modulo_33.cpp":91:13)
#loc94 = loc("CWE369_Divide_by_Zero__int_connect_socket_modulo_33.cpp":88:17)
#loc95 = loc("CWE369_Divide_by_Zero__int_connect_socket_modulo_33.cpp":88:31)
#loc96 = loc("CWE369_Divide_by_Zero__int_connect_socket_modulo_33.cpp":88:44)
#loc97 = loc("CWE369_Divide_by_Zero__int_connect_socket_modulo_33.cpp":88:47)
#loc98 = loc("CWE369_Divide_by_Zero__int_connect_socket_modulo_33.cpp":88:61)
#loc99 = loc("CWE369_Divide_by_Zero__int_connect_socket_modulo_33.cpp":89:13)
#loc100 = loc("CWE369_Divide_by_Zero__int_connect_socket_modulo_33.cpp":90:17)
#loc101 = loc("CWE369_Divide_by_Zero__int_connect_socket_modulo_33.cpp":93:39)
#loc102 = loc("CWE369_Divide_by_Zero__int_connect_socket_modulo_33.cpp":93:25)
#loc103 = loc("CWE369_Divide_by_Zero__int_connect_socket_modulo_33.cpp":93:13)
#loc104 = loc("CWE369_Divide_by_Zero__int_connect_socket_modulo_33.cpp":95:25)
#loc105 = loc("CWE369_Divide_by_Zero__int_connect_socket_modulo_33.cpp":95:20)
#loc106 = loc("CWE369_Divide_by_Zero__int_connect_socket_modulo_33.cpp":95:13)
#loc107 = loc("CWE369_Divide_by_Zero__int_connect_socket_modulo_33.cpp":95:36)
#loc108 = loc("CWE369_Divide_by_Zero__int_connect_socket_modulo_33.cpp":97:16)
#loc109 = loc("CWE369_Divide_by_Zero__int_connect_socket_modulo_33.cpp":98:9)
#loc110 = loc("CWE369_Divide_by_Zero__int_connect_socket_modulo_33.cpp":101:9)
#loc111 = loc("CWE369_Divide_by_Zero__int_connect_socket_modulo_33.cpp":98:13)
#loc112 = loc("CWE369_Divide_by_Zero__int_connect_socket_modulo_33.cpp":98:30)
#loc113 = loc("CWE369_Divide_by_Zero__int_connect_socket_modulo_33.cpp":99:9)
#loc114 = loc("CWE369_Divide_by_Zero__int_connect_socket_modulo_33.cpp":100:26)
#loc115 = loc("CWE369_Divide_by_Zero__int_connect_socket_modulo_33.cpp":100:13)
#loc116 = loc("CWE369_Divide_by_Zero__int_connect_socket_modulo_33.cpp":109:5)
#loc117 = loc("CWE369_Divide_by_Zero__int_connect_socket_modulo_33.cpp":113:5)
#loc118 = loc("CWE369_Divide_by_Zero__int_connect_socket_modulo_33.cpp":110:9)
#loc119 = loc("CWE369_Divide_by_Zero__int_connect_socket_modulo_33.cpp":110:20)
#loc120 = loc("CWE369_Divide_by_Zero__int_connect_socket_modulo_33.cpp":112:22)
#loc121 = loc("CWE369_Divide_by_Zero__int_connect_socket_modulo_33.cpp":112:28)
#loc122 = loc("CWE369_Divide_by_Zero__int_connect_socket_modulo_33.cpp":112:9)
#loc123 = loc("CWE369_Divide_by_Zero__int_connect_socket_modulo_33.cpp":121:1)
#loc124 = loc("CWE369_Divide_by_Zero__int_connect_socket_modulo_33.cpp":134:1)
#loc125 = loc("CWE369_Divide_by_Zero__int_connect_socket_modulo_33.cpp":123:5)
#loc126 = loc("CWE369_Divide_by_Zero__int_connect_socket_modulo_33.cpp":123:9)
#loc127 = loc("CWE369_Divide_by_Zero__int_connect_socket_modulo_33.cpp":124:5)
#loc128 = loc("CWE369_Divide_by_Zero__int_connect_socket_modulo_33.cpp":124:20)
#loc129 = loc("CWE369_Divide_by_Zero__int_connect_socket_modulo_33.cpp":126:13)
#loc130 = loc("CWE369_Divide_by_Zero__int_connect_socket_modulo_33.cpp":126:12)
#loc131 = loc("CWE369_Divide_by_Zero__int_connect_socket_modulo_33.cpp":126:5)
#loc132 = loc("CWE369_Divide_by_Zero__int_connect_socket_modulo_33.cpp":128:12)
#loc133 = loc("CWE369_Divide_by_Zero__int_connect_socket_modulo_33.cpp":128:5)
#loc134 = loc("CWE369_Divide_by_Zero__int_connect_socket_modulo_33.cpp":129:5)
#loc135 = loc("CWE369_Divide_by_Zero__int_connect_socket_modulo_33.cpp":133:5)
#loc136 = loc("CWE369_Divide_by_Zero__int_connect_socket_modulo_33.cpp":130:9)
#loc137 = loc("CWE369_Divide_by_Zero__int_connect_socket_modulo_33.cpp":130:20)
#loc138 = loc("CWE369_Divide_by_Zero__int_connect_socket_modulo_33.cpp":132:22)
#loc139 = loc("CWE369_Divide_by_Zero__int_connect_socket_modulo_33.cpp":132:28)
#loc140 = loc("CWE369_Divide_by_Zero__int_connect_socket_modulo_33.cpp":132:9)
#loc141 = loc("../../../testcasesupport/std_testcase_io.h":14:1)
#loc142 = loc("../../../testcasesupport/std_testcase_io.h":14:33)
#loc143 = loc("CWE369_Divide_by_Zero__int_connect_socket_modulo_33.cpp":208:23)
#loc144 = loc("CWE369_Divide_by_Zero__int_connect_socket_modulo_33.cpp":137:1)
#loc145 = loc("CWE369_Divide_by_Zero__int_connect_socket_modulo_33.cpp":211:1)
#loc146 = loc("CWE369_Divide_by_Zero__int_connect_socket_modulo_33.cpp":139:5)
#loc147 = loc("CWE369_Divide_by_Zero__int_connect_socket_modulo_33.cpp":139:9)
#loc148 = loc("CWE369_Divide_by_Zero__int_connect_socket_modulo_33.cpp":140:5)
#loc149 = loc("CWE369_Divide_by_Zero__int_connect_socket_modulo_33.cpp":140:20)
#loc150 = loc("CWE369_Divide_by_Zero__int_connect_socket_modulo_33.cpp":142:13)
#loc151 = loc("CWE369_Divide_by_Zero__int_connect_socket_modulo_33.cpp":142:12)
#loc152 = loc("CWE369_Divide_by_Zero__int_connect_socket_modulo_33.cpp":142:5)
#loc153 = loc("CWE369_Divide_by_Zero__int_connect_socket_modulo_33.cpp":143:5)
#loc154 = loc("CWE369_Divide_by_Zero__int_connect_socket_modulo_33.cpp":198:5)
#loc155 = loc("CWE369_Divide_by_Zero__int_connect_socket_modulo_33.cpp":148:9)
#loc156 = loc("CWE369_Divide_by_Zero__int_connect_socket_modulo_33.cpp":148:13)
#loc157 = loc("CWE369_Divide_by_Zero__int_connect_socket_modulo_33.cpp":149:9)
#loc158 = loc("CWE369_Divide_by_Zero__int_connect_socket_modulo_33.cpp":149:28)
#loc159 = loc("CWE369_Divide_by_Zero__int_connect_socket_modulo_33.cpp":150:9)
#loc160 = loc("CWE369_Divide_by_Zero__int_connect_socket_modulo_33.cpp":150:32)
#loc161 = loc("CWE369_Divide_by_Zero__int_connect_socket_modulo_33.cpp":151:9)
#loc162 = loc("CWE369_Divide_by_Zero__int_connect_socket_modulo_33.cpp":151:41)
#loc163 = loc("CWE369_Divide_by_Zero__int_connect_socket_modulo_33.cpp":152:9)
#loc164 = loc("CWE369_Divide_by_Zero__int_connect_socket_modulo_33.cpp":187:17)
#loc165 = loc("CWE369_Divide_by_Zero__int_connect_socket_modulo_33.cpp":153:9)
#loc166 = loc("CWE369_Divide_by_Zero__int_connect_socket_modulo_33.cpp":186:9)
#loc167 = loc("CWE369_Divide_by_Zero__int_connect_socket_modulo_33.cpp":162:36)
#loc168 = loc("CWE369_Divide_by_Zero__int_connect_socket_modulo_33.cpp":162:45)
#loc169 = loc("CWE369_Divide_by_Zero__int_connect_socket_modulo_33.cpp":162:58)
#loc170 = loc("CWE369_Divide_by_Zero__int_connect_socket_modulo_33.cpp":162:29)
#loc171 = loc("CWE369_Divide_by_Zero__int_connect_socket_modulo_33.cpp":162:13)
#loc172 = loc("CWE369_Divide_by_Zero__int_connect_socket_modulo_33.cpp":162:69)
#loc173 = loc("CWE369_Divide_by_Zero__int_connect_socket_modulo_33.cpp":163:13)
#loc174 = loc("CWE369_Divide_by_Zero__int_connect_socket_modulo_33.cpp":166:13)
#loc175 = loc("CWE369_Divide_by_Zero__int_connect_socket_modulo_33.cpp":163:17)
#loc176 = loc("CWE369_Divide_by_Zero__int_connect_socket_modulo_33.cpp":163:34)
#loc177 = loc("CWE369_Divide_by_Zero__int_connect_socket_modulo_33.cpp":164:13)
#loc178 = loc("CWE369_Divide_by_Zero__int_connect_socket_modulo_33.cpp":165:17)
#loc179 = loc("CWE369_Divide_by_Zero__int_connect_socket_modulo_33.cpp":167:20)
#loc180 = loc("CWE369_Divide_by_Zero__int_connect_socket_modulo_33.cpp":167:21)
#loc181 = loc("CWE369_Divide_by_Zero__int_connect_socket_modulo_33.cpp":167:30)
#loc182 = loc("CWE369_Divide_by_Zero__int_connect_socket_modulo_33.cpp":167:33)
#loc183 = loc("CWE369_Divide_by_Zero__int_connect_socket_modulo_33.cpp":167:47)
#loc184 = loc("CWE369_Divide_by_Zero__int_connect_socket_modulo_33.cpp":167:13)
#loc185 = loc("CWE369_Divide_by_Zero__int_connect_socket_modulo_33.cpp":167:48)
#loc186 = loc("CWE369_Divide_by_Zero__int_connect_socket_modulo_33.cpp":168:34)
#loc187 = loc("CWE369_Divide_by_Zero__int_connect_socket_modulo_33.cpp":168:13)
#loc188 = loc("CWE369_Divide_by_Zero__int_connect_socket_modulo_33.cpp":169:49)
#loc189 = loc("CWE369_Divide_by_Zero__int_connect_socket_modulo_33.cpp":169:39)
#loc190 = loc("CWE369_Divide_by_Zero__int_connect_socket_modulo_33.cpp":169:13)
#loc191 = loc("CWE369_Divide_by_Zero__int_connect_socket_modulo_33.cpp":169:59)
#loc192 = loc("CWE369_Divide_by_Zero__int_connect_socket_modulo_33.cpp":170:38)
#loc193 = loc("CWE369_Divide_by_Zero__int_connect_socket_modulo_33.cpp":170:32)
#loc194 = loc("CWE369_Divide_by_Zero__int_connect_socket_modulo_33.cpp":170:13)
#loc195 = loc("CWE369_Divide_by_Zero__int_connect_socket_modulo_33.cpp":170:46)
#loc196 = loc("CWE369_Divide_by_Zero__int_connect_socket_modulo_33.cpp":171:13)
#loc197 = loc("CWE369_Divide_by_Zero__int_connect_socket_modulo_33.cpp":174:13)
#loc198 = loc("CWE369_Divide_by_Zero__int_connect_socket_modulo_33.cpp":171:25)
#loc199 = loc("CWE369_Divide_by_Zero__int_connect_socket_modulo_33.cpp":171:58)
#loc200 = loc("CWE369_Divide_by_Zero__int_connect_socket_modulo_33.cpp":171:59)
#loc201 = loc("CWE369_Divide_by_Zero__int_connect_socket_modulo_33.cpp":171:68)
#loc202 = loc("CWE369_Divide_by_Zero__int_connect_socket_modulo_33.cpp":171:82)
#loc203 = loc("CWE369_Divide_by_Zero__int_connect_socket_modulo_33.cpp":171:17)
#loc204 = loc("CWE369_Divide_by_Zero__int_connect_socket_modulo_33.cpp":171:88)
#loc205 = loc("CWE369_Divide_by_Zero__int_connect_socket_modulo_33.cpp":172:13)
#loc206 = loc("CWE369_Divide_by_Zero__int_connect_socket_modulo_33.cpp":173:17)
#loc207 = loc("CWE369_Divide_by_Zero__int_connect_socket_modulo_33.cpp":177:31)
#loc208 = loc("CWE369_Divide_by_Zero__int_connect_socket_modulo_33.cpp":177:46)
#loc209 = loc("CWE369_Divide_by_Zero__int_connect_socket_modulo_33.cpp":177:59)
#loc210 = loc("CWE369_Divide_by_Zero__int_connect_socket_modulo_33.cpp":177:77)
#loc211 = loc("CWE369_Divide_by_Zero__int_connect_socket_modulo_33.cpp":177:80)
#loc212 = loc("CWE369_Divide_by_Zero__int_connect_socket_modulo_33.cpp":177:26)
#loc213 = loc("CWE369_Divide_by_Zero__int_connect_socket_modulo_33.cpp":177:13)
#loc214 = loc("CWE369_Divide_by_Zero__int_connect_socket_modulo_33.cpp":177:81)
#loc215 = loc("CWE369_Divide_by_Zero__int_connect_socket_modulo_33.cpp":178:13)
#loc216 = loc("CWE369_Divide_by_Zero__int_connect_socket_modulo_33.cpp":181:13)
#loc217 = loc("CWE369_Divide_by_Zero__int_connect_socket_modulo_33.cpp":178:17)
#loc218 = loc("CWE369_Divide_by_Zero__int_connect_socket_modulo_33.cpp":178:31)
#loc219 = loc("CWE369_Divide_by_Zero__int_connect_socket_modulo_33.cpp":178:44)
#loc220 = loc("CWE369_Divide_by_Zero__int_connect_socket_modulo_33.cpp":178:47)
#loc221 = loc("CWE369_Divide_by_Zero__int_connect_socket_modulo_33.cpp":178:61)
#loc222 = loc("CWE369_Divide_by_Zero__int_connect_socket_modulo_33.cpp":179:13)
#loc223 = loc("CWE369_Divide_by_Zero__int_connect_socket_modulo_33.cpp":180:17)
#loc224 = loc("CWE369_Divide_by_Zero__int_connect_socket_modulo_33.cpp":183:39)
#loc225 = loc("CWE369_Divide_by_Zero__int_connect_socket_modulo_33.cpp":183:25)
#loc226 = loc("CWE369_Divide_by_Zero__int_connect_socket_modulo_33.cpp":183:13)
#loc227 = loc("CWE369_Divide_by_Zero__int_connect_socket_modulo_33.cpp":185:25)
#loc228 = loc("CWE369_Divide_by_Zero__int_connect_socket_modulo_33.cpp":185:20)
#loc229 = loc("CWE369_Divide_by_Zero__int_connect_socket_modulo_33.cpp":185:13)
#loc230 = loc("CWE369_Divide_by_Zero__int_connect_socket_modulo_33.cpp":185:36)
#loc231 = loc("CWE369_Divide_by_Zero__int_connect_socket_modulo_33.cpp":187:16)
#loc232 = loc("CWE369_Divide_by_Zero__int_connect_socket_modulo_33.cpp":188:9)
#loc233 = loc("CWE369_Divide_by_Zero__int_connect_socket_modulo_33.cpp":191:9)
#loc234 = loc("CWE369_Divide_by_Zero__int_connect_socket_modulo_33.cpp":188:13)
#loc235 = loc("CWE369_Divide_by_Zero__int_connect_socket_modulo_33.cpp":188:30)
#loc236 = loc("CWE369_Divide_by_Zero__int_connect_socket_modulo_33.cpp":189:9)
#loc237 = loc("CWE369_Divide_by_Zero__int_connect_socket_modulo_33.cpp":190:26)
#loc238 = loc("CWE369_Divide_by_Zero__int_connect_socket_modulo_33.cpp":190:13)
#loc239 = loc("CWE369_Divide_by_Zero__int_connect_socket_modulo_33.cpp":199:5)
#loc240 = loc("CWE369_Divide_by_Zero__int_connect_socket_modulo_33.cpp":210:5)
#loc241 = loc("CWE369_Divide_by_Zero__int_connect_socket_modulo_33.cpp":200:9)
#loc242 = loc("CWE369_Divide_by_Zero__int_connect_socket_modulo_33.cpp":200:20)
#loc243 = loc("CWE369_Divide_by_Zero__int_connect_socket_modulo_33.cpp":202:9)
#loc244 = loc("CWE369_Divide_by_Zero__int_connect_socket_modulo_33.cpp":209:9)
#loc245 = loc("CWE369_Divide_by_Zero__int_connect_socket_modulo_33.cpp":202:13)
#loc246 = loc("CWE369_Divide_by_Zero__int_connect_socket_modulo_33.cpp":202:21)
#loc247 = loc("CWE369_Divide_by_Zero__int_connect_socket_modulo_33.cpp":203:9)
#loc248 = loc("CWE369_Divide_by_Zero__int_connect_socket_modulo_33.cpp":205:9)
#loc249 = loc("CWE369_Divide_by_Zero__int_connect_socket_modulo_33.cpp":207:9)
#loc250 = loc("CWE369_Divide_by_Zero__int_connect_socket_modulo_33.cpp":204:26)
#loc251 = loc("CWE369_Divide_by_Zero__int_connect_socket_modulo_33.cpp":204:32)
#loc252 = loc("CWE369_Divide_by_Zero__int_connect_socket_modulo_33.cpp":204:13)
#loc253 = loc("CWE369_Divide_by_Zero__int_connect_socket_modulo_33.cpp":208:13)
#loc254 = loc("CWE369_Divide_by_Zero__int_connect_socket_modulo_33.cpp":213:1)
#loc255 = loc("CWE369_Divide_by_Zero__int_connect_socket_modulo_33.cpp":217:1)
#loc256 = loc("CWE369_Divide_by_Zero__int_connect_socket_modulo_33.cpp":215:5)
#loc257 = loc("CWE369_Divide_by_Zero__int_connect_socket_modulo_33.cpp":216:5)
#loc258 = loc(fused[#loc1, #loc2])
#loc259 = loc(fused[#loc3, #loc4])
#loc260 = loc(fused[#loc6, #loc7])
#loc261 = loc(fused[#loc8, #loc9])
#loc262 = loc(fused[#loc10, #loc11])
#loc263 = loc(fused[#loc12, #loc13])
#loc264 = loc(fused[#loc14, #loc15])
#loc265 = loc(fused[#loc16, #loc17])
#loc266 = loc(fused[#loc18, #loc19])
#loc267 = loc(fused[#loc20, #loc21])
#loc268 = loc(fused[#loc22, #loc23])
#loc269 = loc(fused[#loc26, #loc24])
#loc270 = loc(fused[#loc27, #loc28])
#loc271 = loc(fused[#loc29, #loc30])
#loc272 = loc(fused[#loc31, #loc32])
#loc273 = loc(fused[#loc33, #loc34])
#loc274 = loc(fused[#loc35, #loc36])
#loc275 = loc(fused[#loc37, #loc38])
#loc276 = loc(fused[#loc39, #loc40])
#loc277 = loc(fused[#loc45, #loc46])
#loc278 = loc(fused[#loc47, #loc48])
#loc279 = loc(fused[#loc49, #loc50])
#loc280 = loc(fused[#loc51, #loc48])
#loc281 = loc(fused[#loc53, #loc54])
#loc282 = loc(fused[#loc56, #loc57])
#loc283 = loc(fused[#loc58, #loc59])
#loc284 = loc(fused[#loc62, #loc60])
#loc285 = loc(fused[#loc66, #loc67])
#loc286 = loc(fused[#loc71, #loc72])
#loc287 = loc(fused[#loc73, #loc74])
#loc288 = loc(fused[#loc76, #loc77])
#loc289 = loc(fused[#loc78, #loc79])
#loc290 = loc(fused[#loc80, #loc81])
#loc291 = loc(fused[#loc82, #loc74])
#loc292 = loc(fused[#loc86, #loc87])
#loc293 = loc(fused[#loc90, #loc91])
#loc294 = loc(fused[#loc92, #loc93])
#loc295 = loc(fused[#loc94, #loc95])
#loc296 = loc(fused[#loc97, #loc98])
#loc297 = loc(fused[#loc99, #loc93])
#loc298 = loc(fused[#loc103, #loc101])
#loc299 = loc(fused[#loc106, #loc107])
#loc300 = loc(fused[#loc109, #loc110])
#loc301 = loc(fused[#loc111, #loc112])
#loc302 = loc(fused[#loc113, #loc110])
#loc303 = loc(fused[#loc116, #loc117])
#loc304 = loc(fused[#loc118, #loc119])
#loc305 = loc(fused[#loc120, #loc121])
#loc306 = loc(fused[#loc123, #loc124])
#loc307 = loc(fused[#loc125, #loc126])
#loc308 = loc(fused[#loc127, #loc128])
#loc309 = loc(fused[#loc131, #loc129])
#loc310 = loc(fused[#loc133, #loc132])
#loc311 = loc(fused[#loc134, #loc135])
#loc312 = loc(fused[#loc136, #loc137])
#loc313 = loc(fused[#loc138, #loc139])
#loc314 = loc(fused[#loc141, #loc142])
#loc315 = loc(fused[#loc144, #loc145])
#loc316 = loc(fused[#loc146, #loc147])
#loc317 = loc(fused[#loc148, #loc149])
#loc318 = loc(fused[#loc152, #loc150])
#loc319 = loc(fused[#loc153, #loc154])
#loc320 = loc(fused[#loc155, #loc156])
#loc321 = loc(fused[#loc157, #loc158])
#loc322 = loc(fused[#loc159, #loc160])
#loc323 = loc(fused[#loc161, #loc162])
#loc324 = loc(fused[#loc163, #loc164])
#loc325 = loc(fused[#loc165, #loc166])
#loc326 = loc(fused[#loc171, #loc172])
#loc327 = loc(fused[#loc173, #loc174])
#loc328 = loc(fused[#loc175, #loc176])
#loc329 = loc(fused[#loc177, #loc174])
#loc330 = loc(fused[#loc179, #loc180])
#loc331 = loc(fused[#loc182, #loc183])
#loc332 = loc(fused[#loc184, #loc185])
#loc333 = loc(fused[#loc187, #loc186])
#loc334 = loc(fused[#loc190, #loc191])
#loc335 = loc(fused[#loc194, #loc195])
#loc336 = loc(fused[#loc196, #loc197])
#loc337 = loc(fused[#loc199, #loc200])
#loc338 = loc(fused[#loc201, #loc202])
#loc339 = loc(fused[#loc203, #loc204])
#loc340 = loc(fused[#loc205, #loc197])
#loc341 = loc(fused[#loc209, #loc210])
#loc342 = loc(fused[#loc213, #loc214])
#loc343 = loc(fused[#loc215, #loc216])
#loc344 = loc(fused[#loc217, #loc218])
#loc345 = loc(fused[#loc220, #loc221])
#loc346 = loc(fused[#loc222, #loc216])
#loc347 = loc(fused[#loc226, #loc224])
#loc348 = loc(fused[#loc229, #loc230])
#loc349 = loc(fused[#loc232, #loc233])
#loc350 = loc(fused[#loc234, #loc235])
#loc351 = loc(fused[#loc236, #loc233])
#loc352 = loc(fused[#loc239, #loc240])
#loc353 = loc(fused[#loc241, #loc242])
#loc354 = loc(fused[#loc243, #loc244])
#loc355 = loc(fused[#loc245, #loc246])
#loc356 = loc(fused[#loc247, #loc248, #loc249, #loc244])
#loc357 = loc(fused[#loc250, #loc251])
#loc358 = loc(fused[#loc254, #loc255])
