!s32i = !cir.int<s, 32>
!s64i = !cir.int<s, 64>
!s8i = !cir.int<s, 8>
!u32i = !cir.int<u, 32>
!void = !cir.void
#fn_attr = #cir<extra({nothrow = #cir.nothrow})>
#fn_attr1 = #cir<extra({inline = #cir.inline<no>, nothrow = #cir.nothrow, optnone = #cir.optnone})>
#loc78 = loc("CWE478_Missing_Default_Case_in_Switch__basic_12.c":129:10)
#loc79 = loc("CWE478_Missing_Default_Case_in_Switch__basic_12.c":129:14)
#loc80 = loc("CWE478_Missing_Default_Case_in_Switch__basic_12.c":129:20)
#loc81 = loc("CWE478_Missing_Default_Case_in_Switch__basic_12.c":129:32)
#loc183 = loc(fused[#loc78, #loc79])
#loc184 = loc(fused[#loc80, #loc81])
module @"/home/ladisgin/git_proj/juliet-c/testcases/CWE478_Missing_Default_Case_in_Switch/CWE478_Missing_Default_Case_in_Switch__basic_12.c" attributes {cir.lang = #cir.lang<c>, cir.sob = #cir.signed_overflow_behavior<undefined>, cir.triple = "x86_64-unknown-linux-gnu", dlti.dl_spec = #dlti.dl_spec<f80 = dense<128> : vector<2xi64>, !llvm.ptr = dense<64> : vector<4xi64>, i1 = dense<8> : vector<2xi64>, i64 = dense<64> : vector<2xi64>, i128 = dense<128> : vector<2xi64>, f16 = dense<16> : vector<2xi64>, f64 = dense<64> : vector<2xi64>, f128 = dense<128> : vector<2xi64>, !llvm.ptr<272> = dense<64> : vector<4xi64>, !llvm.ptr<271> = dense<32> : vector<4xi64>, i8 = dense<8> : vector<2xi64>, i16 = dense<16> : vector<2xi64>, !llvm.ptr<270> = dense<32> : vector<4xi64>, i32 = dense<32> : vector<2xi64>, "dlti.stack_alignment" = 128 : i64, "dlti.endianness" = "little">} {
  cir.func no_proto private @globalReturnsTrueOrFalse(...) -> !s32i loc(#loc155)
  cir.global "private" constant cir_private dsolocal @".str" = #cir.const_array<"shouldn't see this value\00" : !cir.array<!s8i x 25>> : !cir.array<!s8i x 25> {alignment = 1 : i64} loc(#loc3)
  cir.func private @rand() -> !s32i extra(#fn_attr) loc(#loc156)
  cir.global "private" constant cir_private dsolocal @".str.1" = #cir.const_array<"0\00" : !cir.array<!s8i x 2>> : !cir.array<!s8i x 2> {alignment = 1 : i64} loc(#loc6)
  cir.global "private" constant cir_private dsolocal @".str.2" = #cir.const_array<"1\00" : !cir.array<!s8i x 2>> : !cir.array<!s8i x 2> {alignment = 1 : i64} loc(#loc7)
  cir.func private @printLine(!cir.ptr<!s8i>) loc(#loc157)
  cir.func no_proto @CWE478_Missing_Default_Case_in_Switch__basic_12_bad() extra(#fn_attr1) {
    cir.scope {
      %0 = cir.get_global @globalReturnsTrueOrFalse : !cir.ptr<!cir.func<!s32i (...)>> loc(#loc160)
      %1 = cir.cast(bitcast, %0 : !cir.ptr<!cir.func<!s32i (...)>>), !cir.ptr<!cir.func<!s32i ()>> loc(#loc160)
      %2 = cir.call %1() : (!cir.ptr<!cir.func<!s32i ()>>) -> !s32i loc(#loc14)
      %3 = cir.cast(int_to_bool, %2 : !s32i), !cir.bool loc(#loc14)
      cir.if %3 {
        cir.scope {
          %4 = cir.alloca !cir.ptr<!s8i>, !cir.ptr<!cir.ptr<!s8i>>, ["charString", init] {alignment = 8 : i64} loc(#loc163)
          %5 = cir.alloca !s32i, !cir.ptr<!s32i>, ["x"] {alignment = 4 : i64} loc(#loc164)
          %6 = cir.get_global @".str" : !cir.ptr<!cir.array<!s8i x 25>> loc(#loc3)
          %7 = cir.cast(array_to_ptrdecay, %6 : !cir.ptr<!cir.array<!s8i x 25>>), !cir.ptr<!s8i> loc(#loc3)
          cir.store %7, %4 : !cir.ptr<!s8i>, !cir.ptr<!cir.ptr<!s8i>> loc(#loc163)
          %8 = cir.call @rand() : () -> !s32i extra(#fn_attr) loc(#loc24)
          %9 = cir.const #cir.int<3> : !s32i loc(#loc25)
          %10 = cir.binop(rem, %8, %9) : !s32i loc(#loc165)
          cir.store %10, %5 : !s32i, !cir.ptr<!s32i> loc(#loc166)
          cir.scope {
            %12 = cir.load %5 : !cir.ptr<!s32i>, !s32i loc(#loc30)
            cir.switch (%12 : !s32i) {
              cir.case(equal, [#cir.int<0> : !s32i]) {
                %13 = cir.get_global @".str.1" : !cir.ptr<!cir.array<!s8i x 2>> loc(#loc6)
                %14 = cir.cast(array_to_ptrdecay, %13 : !cir.ptr<!cir.array<!s8i x 2>>), !cir.ptr<!s8i> loc(#loc6)
                cir.store %14, %4 : !cir.ptr<!s8i>, !cir.ptr<!cir.ptr<!s8i>> loc(#loc168)
                cir.break loc(#loc33)
              } loc(#loc31)
              cir.case(equal, [#cir.int<1> : !s32i]) {
                %13 = cir.get_global @".str.2" : !cir.ptr<!cir.array<!s8i x 2>> loc(#loc7)
                %14 = cir.cast(array_to_ptrdecay, %13 : !cir.ptr<!cir.array<!s8i x 2>>), !cir.ptr<!s8i> loc(#loc7)
                cir.store %14, %4 : !cir.ptr<!s8i>, !cir.ptr<!cir.ptr<!s8i>> loc(#loc169)
                cir.break loc(#loc36)
              } loc(#loc34)
              cir.yield loc(#loc28)
            } loc(#loc28)
          } loc(#loc167)
          %11 = cir.load %4 : !cir.ptr<!cir.ptr<!s8i>>, !cir.ptr<!s8i> loc(#loc37)
          cir.call @printLine(%11) : (!cir.ptr<!s8i>) -> () loc(#loc38)
        } loc(#loc162)
      } else {
        cir.scope {
          %4 = cir.alloca !cir.ptr<!s8i>, !cir.ptr<!cir.ptr<!s8i>>, ["charString", init] {alignment = 8 : i64} loc(#loc171)
          %5 = cir.alloca !s32i, !cir.ptr<!s32i>, ["x"] {alignment = 4 : i64} loc(#loc172)
          %6 = cir.get_global @".str" : !cir.ptr<!cir.array<!s8i x 25>> loc(#loc42)
          %7 = cir.cast(array_to_ptrdecay, %6 : !cir.ptr<!cir.array<!s8i x 25>>), !cir.ptr<!s8i> loc(#loc42)
          cir.store %7, %4 : !cir.ptr<!s8i>, !cir.ptr<!cir.ptr<!s8i>> loc(#loc171)
          %8 = cir.call @rand() : () -> !s32i extra(#fn_attr) loc(#loc45)
          %9 = cir.const #cir.int<3> : !s32i loc(#loc46)
          %10 = cir.binop(rem, %8, %9) : !s32i loc(#loc173)
          cir.store %10, %5 : !s32i, !cir.ptr<!s32i> loc(#loc174)
          cir.scope {
            %12 = cir.load %5 : !cir.ptr<!s32i>, !s32i loc(#loc51)
            cir.switch (%12 : !s32i) {
              cir.case(equal, [#cir.int<0> : !s32i]) {
                %13 = cir.get_global @".str.1" : !cir.ptr<!cir.array<!s8i x 2>> loc(#loc53)
                %14 = cir.cast(array_to_ptrdecay, %13 : !cir.ptr<!cir.array<!s8i x 2>>), !cir.ptr<!s8i> loc(#loc53)
                cir.store %14, %4 : !cir.ptr<!s8i>, !cir.ptr<!cir.ptr<!s8i>> loc(#loc176)
                cir.break loc(#loc55)
              } loc(#loc52)
              cir.case(equal, [#cir.int<1> : !s32i]) {
                %13 = cir.get_global @".str.2" : !cir.ptr<!cir.array<!s8i x 2>> loc(#loc57)
                %14 = cir.cast(array_to_ptrdecay, %13 : !cir.ptr<!cir.array<!s8i x 2>>), !cir.ptr<!s8i> loc(#loc57)
                cir.store %14, %4 : !cir.ptr<!s8i>, !cir.ptr<!cir.ptr<!s8i>> loc(#loc177)
                cir.break loc(#loc59)
              } loc(#loc56)
              cir.case(default, []) {
                cir.return loc(#loc61)
              } loc(#loc60)
              cir.yield loc(#loc49)
            } loc(#loc49)
          } loc(#loc175)
          %11 = cir.load %4 : !cir.ptr<!cir.ptr<!s8i>>, !cir.ptr<!s8i> loc(#loc62)
          cir.call @printLine(%11) : (!cir.ptr<!s8i>) -> () loc(#loc63)
        } loc(#loc170)
      } loc(#loc161)
    } loc(#loc159)
    cir.return loc(#loc11)
  } loc(#loc158)
  cir.func no_proto @CWE478_Missing_Default_Case_in_Switch__basic_12_good() extra(#fn_attr1) {
    %0 = cir.get_global @good1 : !cir.ptr<!cir.func<!void ()>> loc(#loc179)
    cir.call %0() : (!cir.ptr<!cir.func<!void ()>>) -> () loc(#loc66)
    cir.return loc(#loc65)
  } loc(#loc178)
  cir.func private @srand(!u32i) extra(#fn_attr) loc(#loc180)
  cir.func private @time(!cir.ptr<!s64i>) -> !s64i extra(#fn_attr) loc(#loc181)
  cir.global "private" constant cir_private dsolocal @".str.3" = #cir.const_array<"Calling good()...\00" : !cir.array<!s8i x 18>> : !cir.array<!s8i x 18> {alignment = 1 : i64} loc(#loc72)
  cir.global "private" constant cir_private dsolocal @".str.4" = #cir.const_array<"Finished good()\00" : !cir.array<!s8i x 16>> : !cir.array<!s8i x 16> {alignment = 1 : i64} loc(#loc73)
  cir.global "private" constant cir_private dsolocal @".str.5" = #cir.const_array<"Calling bad()...\00" : !cir.array<!s8i x 17>> : !cir.array<!s8i x 17> {alignment = 1 : i64} loc(#loc74)
  cir.global "private" constant cir_private dsolocal @".str.6" = #cir.const_array<"Finished bad()\00" : !cir.array<!s8i x 15>> : !cir.array<!s8i x 15> {alignment = 1 : i64} loc(#loc75)
  cir.func @main(%arg0: !s32i loc(fused[#loc78, #loc79]), %arg1: !cir.ptr<!cir.ptr<!s8i>> loc(fused[#loc80, #loc81])) -> !s32i extra(#fn_attr1) {
    %0 = cir.alloca !s32i, !cir.ptr<!s32i>, ["argc", init] {alignment = 4 : i64} loc(#loc183)
    %1 = cir.alloca !cir.ptr<!cir.ptr<!s8i>>, !cir.ptr<!cir.ptr<!cir.ptr<!s8i>>>, ["argv", init] {alignment = 8 : i64} loc(#loc184)
    %2 = cir.alloca !s32i, !cir.ptr<!s32i>, ["__retval"] {alignment = 4 : i64} loc(#loc77)
    cir.store %arg0, %0 : !s32i, !cir.ptr<!s32i> loc(#loc82)
    cir.store %arg1, %1 : !cir.ptr<!cir.ptr<!s8i>>, !cir.ptr<!cir.ptr<!cir.ptr<!s8i>>> loc(#loc82)
    %3 = cir.const #cir.ptr<null> : !cir.ptr<!s64i> loc(#loc83)
    %4 = cir.call @time(%3) : (!cir.ptr<!s64i>) -> !s64i extra(#fn_attr) loc(#loc84)
    %5 = cir.cast(integral, %4 : !s64i), !u32i loc(#loc84)
    cir.call @srand(%5) : (!u32i) -> () extra(#fn_attr) loc(#loc85)
    %6 = cir.get_global @".str.3" : !cir.ptr<!cir.array<!s8i x 18>> loc(#loc72)
    %7 = cir.cast(array_to_ptrdecay, %6 : !cir.ptr<!cir.array<!s8i x 18>>), !cir.ptr<!s8i> loc(#loc72)
    cir.call @printLine(%7) : (!cir.ptr<!s8i>) -> () loc(#loc86)
    %8 = cir.get_global @CWE478_Missing_Default_Case_in_Switch__basic_12_good : !cir.ptr<!cir.func<!void ()>> loc(#loc185)
    cir.call @CWE478_Missing_Default_Case_in_Switch__basic_12_good() : () -> () loc(#loc87)
    %9 = cir.get_global @".str.4" : !cir.ptr<!cir.array<!s8i x 16>> loc(#loc73)
    %10 = cir.cast(array_to_ptrdecay, %9 : !cir.ptr<!cir.array<!s8i x 16>>), !cir.ptr<!s8i> loc(#loc73)
    cir.call @printLine(%10) : (!cir.ptr<!s8i>) -> () loc(#loc89)
    %11 = cir.get_global @".str.5" : !cir.ptr<!cir.array<!s8i x 17>> loc(#loc74)
    %12 = cir.cast(array_to_ptrdecay, %11 : !cir.ptr<!cir.array<!s8i x 17>>), !cir.ptr<!s8i> loc(#loc74)
    cir.call @printLine(%12) : (!cir.ptr<!s8i>) -> () loc(#loc90)
    %13 = cir.get_global @CWE478_Missing_Default_Case_in_Switch__basic_12_bad : !cir.ptr<!cir.func<!void ()>> loc(#loc186)
    cir.call @CWE478_Missing_Default_Case_in_Switch__basic_12_bad() : () -> () loc(#loc91)
    %14 = cir.get_global @".str.6" : !cir.ptr<!cir.array<!s8i x 15>> loc(#loc75)
    %15 = cir.cast(array_to_ptrdecay, %14 : !cir.ptr<!cir.array<!s8i x 15>>), !cir.ptr<!s8i> loc(#loc75)
    cir.call @printLine(%15) : (!cir.ptr<!s8i>) -> () loc(#loc93)
    %16 = cir.const #cir.int<0> : !s32i loc(#loc94)
    cir.store %16, %2 : !s32i, !cir.ptr<!s32i> loc(#loc187)
    %17 = cir.load %2 : !cir.ptr<!s32i>, !s32i loc(#loc187)
    cir.return %17 : !s32i loc(#loc187)
  } loc(#loc182)
  cir.func no_proto internal private @good1() extra(#fn_attr1) {
    cir.scope {
      %0 = cir.get_global @globalReturnsTrueOrFalse : !cir.ptr<!cir.func<!s32i (...)>> loc(#loc190)
      %1 = cir.cast(bitcast, %0 : !cir.ptr<!cir.func<!s32i (...)>>), !cir.ptr<!cir.func<!s32i ()>> loc(#loc190)
      %2 = cir.call %1() : (!cir.ptr<!cir.func<!s32i ()>>) -> !s32i loc(#loc100)
      %3 = cir.cast(int_to_bool, %2 : !s32i), !cir.bool loc(#loc100)
      cir.if %3 {
        cir.scope {
          %4 = cir.alloca !cir.ptr<!s8i>, !cir.ptr<!cir.ptr<!s8i>>, ["charString", init] {alignment = 8 : i64} loc(#loc193)
          %5 = cir.alloca !s32i, !cir.ptr<!s32i>, ["x"] {alignment = 4 : i64} loc(#loc194)
          %6 = cir.get_global @".str" : !cir.ptr<!cir.array<!s8i x 25>> loc(#loc108)
          %7 = cir.cast(array_to_ptrdecay, %6 : !cir.ptr<!cir.array<!s8i x 25>>), !cir.ptr<!s8i> loc(#loc108)
          cir.store %7, %4 : !cir.ptr<!s8i>, !cir.ptr<!cir.ptr<!s8i>> loc(#loc193)
          %8 = cir.call @rand() : () -> !s32i extra(#fn_attr) loc(#loc111)
          %9 = cir.const #cir.int<3> : !s32i loc(#loc112)
          %10 = cir.binop(rem, %8, %9) : !s32i loc(#loc195)
          cir.store %10, %5 : !s32i, !cir.ptr<!s32i> loc(#loc196)
          cir.scope {
            %12 = cir.load %5 : !cir.ptr<!s32i>, !s32i loc(#loc117)
            cir.switch (%12 : !s32i) {
              cir.case(equal, [#cir.int<0> : !s32i]) {
                %13 = cir.get_global @".str.1" : !cir.ptr<!cir.array<!s8i x 2>> loc(#loc119)
                %14 = cir.cast(array_to_ptrdecay, %13 : !cir.ptr<!cir.array<!s8i x 2>>), !cir.ptr<!s8i> loc(#loc119)
                cir.store %14, %4 : !cir.ptr<!s8i>, !cir.ptr<!cir.ptr<!s8i>> loc(#loc198)
                cir.break loc(#loc121)
              } loc(#loc118)
              cir.case(equal, [#cir.int<1> : !s32i]) {
                %13 = cir.get_global @".str.2" : !cir.ptr<!cir.array<!s8i x 2>> loc(#loc123)
                %14 = cir.cast(array_to_ptrdecay, %13 : !cir.ptr<!cir.array<!s8i x 2>>), !cir.ptr<!s8i> loc(#loc123)
                cir.store %14, %4 : !cir.ptr<!s8i>, !cir.ptr<!cir.ptr<!s8i>> loc(#loc199)
                cir.break loc(#loc125)
              } loc(#loc122)
              cir.case(default, []) {
                cir.return loc(#loc127)
              } loc(#loc126)
              cir.yield loc(#loc115)
            } loc(#loc115)
          } loc(#loc197)
          %11 = cir.load %4 : !cir.ptr<!cir.ptr<!s8i>>, !cir.ptr<!s8i> loc(#loc128)
          cir.call @printLine(%11) : (!cir.ptr<!s8i>) -> () loc(#loc129)
        } loc(#loc192)
      } else {
        cir.scope {
          %4 = cir.alloca !cir.ptr<!s8i>, !cir.ptr<!cir.ptr<!s8i>>, ["charString", init] {alignment = 8 : i64} loc(#loc201)
          %5 = cir.alloca !s32i, !cir.ptr<!s32i>, ["x"] {alignment = 4 : i64} loc(#loc202)
          %6 = cir.get_global @".str" : !cir.ptr<!cir.array<!s8i x 25>> loc(#loc133)
          %7 = cir.cast(array_to_ptrdecay, %6 : !cir.ptr<!cir.array<!s8i x 25>>), !cir.ptr<!s8i> loc(#loc133)
          cir.store %7, %4 : !cir.ptr<!s8i>, !cir.ptr<!cir.ptr<!s8i>> loc(#loc201)
          %8 = cir.call @rand() : () -> !s32i extra(#fn_attr) loc(#loc136)
          %9 = cir.const #cir.int<3> : !s32i loc(#loc137)
          %10 = cir.binop(rem, %8, %9) : !s32i loc(#loc203)
          cir.store %10, %5 : !s32i, !cir.ptr<!s32i> loc(#loc204)
          cir.scope {
            %12 = cir.load %5 : !cir.ptr<!s32i>, !s32i loc(#loc142)
            cir.switch (%12 : !s32i) {
              cir.case(equal, [#cir.int<0> : !s32i]) {
                %13 = cir.get_global @".str.1" : !cir.ptr<!cir.array<!s8i x 2>> loc(#loc144)
                %14 = cir.cast(array_to_ptrdecay, %13 : !cir.ptr<!cir.array<!s8i x 2>>), !cir.ptr<!s8i> loc(#loc144)
                cir.store %14, %4 : !cir.ptr<!s8i>, !cir.ptr<!cir.ptr<!s8i>> loc(#loc206)
                cir.break loc(#loc146)
              } loc(#loc143)
              cir.case(equal, [#cir.int<1> : !s32i]) {
                %13 = cir.get_global @".str.2" : !cir.ptr<!cir.array<!s8i x 2>> loc(#loc148)
                %14 = cir.cast(array_to_ptrdecay, %13 : !cir.ptr<!cir.array<!s8i x 2>>), !cir.ptr<!s8i> loc(#loc148)
                cir.store %14, %4 : !cir.ptr<!s8i>, !cir.ptr<!cir.ptr<!s8i>> loc(#loc207)
                cir.break loc(#loc150)
              } loc(#loc147)
              cir.case(default, []) {
                cir.return loc(#loc152)
              } loc(#loc151)
              cir.yield loc(#loc140)
            } loc(#loc140)
          } loc(#loc205)
          %11 = cir.load %4 : !cir.ptr<!cir.ptr<!s8i>>, !cir.ptr<!s8i> loc(#loc153)
          cir.call @printLine(%11) : (!cir.ptr<!s8i>) -> () loc(#loc154)
        } loc(#loc200)
      } loc(#loc191)
    } loc(#loc189)
    cir.return loc(#loc97)
  } loc(#loc188)
} loc(#loc)
#loc = loc("/home/ladisgin/git_proj/juliet-c/testcases/CWE478_Missing_Default_Case_in_Switch/CWE478_Missing_Default_Case_in_Switch__basic_12.c":0:0)
#loc1 = loc("../../testcasesupport/std_testcase_io.h":52:1)
#loc2 = loc("../../testcasesupport/std_testcase_io.h":52:30)
#loc3 = loc("CWE478_Missing_Default_Case_in_Switch__basic_12.c":25:38)
#loc4 = loc("/usr/include/stdlib.h":573:1)
#loc5 = loc("/usr/include/stdlib.h":573:24)
#loc6 = loc("CWE478_Missing_Default_Case_in_Switch__basic_12.c":31:30)
#loc7 = loc("CWE478_Missing_Default_Case_in_Switch__basic_12.c":34:30)
#loc8 = loc("../../testcasesupport/std_testcase_io.h":14:1)
#loc9 = loc("../../testcasesupport/std_testcase_io.h":14:33)
#loc10 = loc("CWE478_Missing_Default_Case_in_Switch__basic_12.c":20:1)
#loc11 = loc("CWE478_Missing_Default_Case_in_Switch__basic_12.c":62:1)
#loc12 = loc("CWE478_Missing_Default_Case_in_Switch__basic_12.c":22:5)
#loc13 = loc("CWE478_Missing_Default_Case_in_Switch__basic_12.c":61:5)
#loc14 = loc("CWE478_Missing_Default_Case_in_Switch__basic_12.c":22:8)
#loc15 = loc("CWE478_Missing_Default_Case_in_Switch__basic_12.c":22:33)
#loc16 = loc("CWE478_Missing_Default_Case_in_Switch__basic_12.c":23:5)
#loc17 = loc("CWE478_Missing_Default_Case_in_Switch__basic_12.c":40:5)
#loc18 = loc("CWE478_Missing_Default_Case_in_Switch__basic_12.c":42:5)
#loc19 = loc("CWE478_Missing_Default_Case_in_Switch__basic_12.c":24:9)
#loc20 = loc("CWE478_Missing_Default_Case_in_Switch__basic_12.c":39:9)
#loc21 = loc("CWE478_Missing_Default_Case_in_Switch__basic_12.c":25:13)
#loc22 = loc("CWE478_Missing_Default_Case_in_Switch__basic_12.c":26:13)
#loc23 = loc("CWE478_Missing_Default_Case_in_Switch__basic_12.c":26:17)
#loc24 = loc("CWE478_Missing_Default_Case_in_Switch__basic_12.c":27:18)
#loc25 = loc("CWE478_Missing_Default_Case_in_Switch__basic_12.c":27:27)
#loc26 = loc("CWE478_Missing_Default_Case_in_Switch__basic_12.c":27:13)
#loc27 = loc("CWE478_Missing_Default_Case_in_Switch__basic_12.c":27:28)
#loc28 = loc("CWE478_Missing_Default_Case_in_Switch__basic_12.c":28:13)
#loc29 = loc("CWE478_Missing_Default_Case_in_Switch__basic_12.c":37:13)
#loc30 = loc("CWE478_Missing_Default_Case_in_Switch__basic_12.c":28:21)
#loc31 = loc("CWE478_Missing_Default_Case_in_Switch__basic_12.c":30:13)
#loc32 = loc("CWE478_Missing_Default_Case_in_Switch__basic_12.c":31:17)
#loc33 = loc("CWE478_Missing_Default_Case_in_Switch__basic_12.c":32:17)
#loc34 = loc("CWE478_Missing_Default_Case_in_Switch__basic_12.c":33:13)
#loc35 = loc("CWE478_Missing_Default_Case_in_Switch__basic_12.c":34:17)
#loc36 = loc("CWE478_Missing_Default_Case_in_Switch__basic_12.c":35:17)
#loc37 = loc("CWE478_Missing_Default_Case_in_Switch__basic_12.c":38:23)
#loc38 = loc("CWE478_Missing_Default_Case_in_Switch__basic_12.c":38:13)
#loc39 = loc("CWE478_Missing_Default_Case_in_Switch__basic_12.c":43:9)
#loc40 = loc("CWE478_Missing_Default_Case_in_Switch__basic_12.c":60:9)
#loc41 = loc("CWE478_Missing_Default_Case_in_Switch__basic_12.c":44:13)
#loc42 = loc("CWE478_Missing_Default_Case_in_Switch__basic_12.c":44:38)
#loc43 = loc("CWE478_Missing_Default_Case_in_Switch__basic_12.c":45:13)
#loc44 = loc("CWE478_Missing_Default_Case_in_Switch__basic_12.c":45:17)
#loc45 = loc("CWE478_Missing_Default_Case_in_Switch__basic_12.c":46:18)
#loc46 = loc("CWE478_Missing_Default_Case_in_Switch__basic_12.c":46:27)
#loc47 = loc("CWE478_Missing_Default_Case_in_Switch__basic_12.c":46:13)
#loc48 = loc("CWE478_Missing_Default_Case_in_Switch__basic_12.c":46:28)
#loc49 = loc("CWE478_Missing_Default_Case_in_Switch__basic_12.c":47:13)
#loc50 = loc("CWE478_Missing_Default_Case_in_Switch__basic_12.c":58:13)
#loc51 = loc("CWE478_Missing_Default_Case_in_Switch__basic_12.c":47:21)
#loc52 = loc("CWE478_Missing_Default_Case_in_Switch__basic_12.c":49:13)
#loc53 = loc("CWE478_Missing_Default_Case_in_Switch__basic_12.c":50:30)
#loc54 = loc("CWE478_Missing_Default_Case_in_Switch__basic_12.c":50:17)
#loc55 = loc("CWE478_Missing_Default_Case_in_Switch__basic_12.c":51:17)
#loc56 = loc("CWE478_Missing_Default_Case_in_Switch__basic_12.c":52:13)
#loc57 = loc("CWE478_Missing_Default_Case_in_Switch__basic_12.c":53:30)
#loc58 = loc("CWE478_Missing_Default_Case_in_Switch__basic_12.c":53:17)
#loc59 = loc("CWE478_Missing_Default_Case_in_Switch__basic_12.c":54:17)
#loc60 = loc("CWE478_Missing_Default_Case_in_Switch__basic_12.c":56:13)
#loc61 = loc("CWE478_Missing_Default_Case_in_Switch__basic_12.c":57:17)
#loc62 = loc("CWE478_Missing_Default_Case_in_Switch__basic_12.c":59:23)
#loc63 = loc("CWE478_Missing_Default_Case_in_Switch__basic_12.c":59:13)
#loc64 = loc("CWE478_Missing_Default_Case_in_Switch__basic_12.c":115:1)
#loc65 = loc("CWE478_Missing_Default_Case_in_Switch__basic_12.c":118:1)
#loc66 = loc("CWE478_Missing_Default_Case_in_Switch__basic_12.c":117:5)
#loc67 = loc("CWE478_Missing_Default_Case_in_Switch__basic_12.c":117:11)
#loc68 = loc("/usr/include/stdlib.h":575:1)
#loc69 = loc("/usr/include/stdlib.h":575:41)
#loc70 = loc("/usr/include/time.h":76:1)
#loc71 = loc("/usr/include/time.h":76:38)
#loc72 = loc("CWE478_Missing_Default_Case_in_Switch__basic_12.c":134:15)
#loc73 = loc("CWE478_Missing_Default_Case_in_Switch__basic_12.c":136:15)
#loc74 = loc("CWE478_Missing_Default_Case_in_Switch__basic_12.c":139:15)
#loc75 = loc("CWE478_Missing_Default_Case_in_Switch__basic_12.c":141:15)
#loc76 = loc("CWE478_Missing_Default_Case_in_Switch__basic_12.c":129:1)
#loc77 = loc("CWE478_Missing_Default_Case_in_Switch__basic_12.c":144:1)
#loc82 = loc("CWE478_Missing_Default_Case_in_Switch__basic_12.c":130:1)
#loc83 = loc("CWE478_Missing_Default_Case_in_Switch__basic_12.c":132:27)
#loc84 = loc("CWE478_Missing_Default_Case_in_Switch__basic_12.c":132:22)
#loc85 = loc("CWE478_Missing_Default_Case_in_Switch__basic_12.c":132:5)
#loc86 = loc("CWE478_Missing_Default_Case_in_Switch__basic_12.c":134:5)
#loc87 = loc("CWE478_Missing_Default_Case_in_Switch__basic_12.c":135:5)
#loc88 = loc("CWE478_Missing_Default_Case_in_Switch__basic_12.c":135:58)
#loc89 = loc("CWE478_Missing_Default_Case_in_Switch__basic_12.c":136:5)
#loc90 = loc("CWE478_Missing_Default_Case_in_Switch__basic_12.c":139:5)
#loc91 = loc("CWE478_Missing_Default_Case_in_Switch__basic_12.c":140:5)
#loc92 = loc("CWE478_Missing_Default_Case_in_Switch__basic_12.c":140:57)
#loc93 = loc("CWE478_Missing_Default_Case_in_Switch__basic_12.c":141:5)
#loc94 = loc("CWE478_Missing_Default_Case_in_Switch__basic_12.c":143:12)
#loc95 = loc("CWE478_Missing_Default_Case_in_Switch__basic_12.c":143:5)
#loc96 = loc("CWE478_Missing_Default_Case_in_Switch__basic_12.c":69:1)
#loc97 = loc("CWE478_Missing_Default_Case_in_Switch__basic_12.c":113:1)
#loc98 = loc("CWE478_Missing_Default_Case_in_Switch__basic_12.c":71:5)
#loc99 = loc("CWE478_Missing_Default_Case_in_Switch__basic_12.c":112:5)
#loc100 = loc("CWE478_Missing_Default_Case_in_Switch__basic_12.c":71:8)
#loc101 = loc("CWE478_Missing_Default_Case_in_Switch__basic_12.c":71:33)
#loc102 = loc("CWE478_Missing_Default_Case_in_Switch__basic_12.c":72:5)
#loc103 = loc("CWE478_Missing_Default_Case_in_Switch__basic_12.c":91:5)
#loc104 = loc("CWE478_Missing_Default_Case_in_Switch__basic_12.c":93:5)
#loc105 = loc("CWE478_Missing_Default_Case_in_Switch__basic_12.c":73:9)
#loc106 = loc("CWE478_Missing_Default_Case_in_Switch__basic_12.c":90:9)
#loc107 = loc("CWE478_Missing_Default_Case_in_Switch__basic_12.c":74:13)
#loc108 = loc("CWE478_Missing_Default_Case_in_Switch__basic_12.c":74:38)
#loc109 = loc("CWE478_Missing_Default_Case_in_Switch__basic_12.c":75:13)
#loc110 = loc("CWE478_Missing_Default_Case_in_Switch__basic_12.c":75:17)
#loc111 = loc("CWE478_Missing_Default_Case_in_Switch__basic_12.c":76:18)
#loc112 = loc("CWE478_Missing_Default_Case_in_Switch__basic_12.c":76:27)
#loc113 = loc("CWE478_Missing_Default_Case_in_Switch__basic_12.c":76:13)
#loc114 = loc("CWE478_Missing_Default_Case_in_Switch__basic_12.c":76:28)
#loc115 = loc("CWE478_Missing_Default_Case_in_Switch__basic_12.c":77:13)
#loc116 = loc("CWE478_Missing_Default_Case_in_Switch__basic_12.c":88:13)
#loc117 = loc("CWE478_Missing_Default_Case_in_Switch__basic_12.c":77:21)
#loc118 = loc("CWE478_Missing_Default_Case_in_Switch__basic_12.c":79:13)
#loc119 = loc("CWE478_Missing_Default_Case_in_Switch__basic_12.c":80:30)
#loc120 = loc("CWE478_Missing_Default_Case_in_Switch__basic_12.c":80:17)
#loc121 = loc("CWE478_Missing_Default_Case_in_Switch__basic_12.c":81:17)
#loc122 = loc("CWE478_Missing_Default_Case_in_Switch__basic_12.c":82:13)
#loc123 = loc("CWE478_Missing_Default_Case_in_Switch__basic_12.c":83:30)
#loc124 = loc("CWE478_Missing_Default_Case_in_Switch__basic_12.c":83:17)
#loc125 = loc("CWE478_Missing_Default_Case_in_Switch__basic_12.c":84:17)
#loc126 = loc("CWE478_Missing_Default_Case_in_Switch__basic_12.c":86:13)
#loc127 = loc("CWE478_Missing_Default_Case_in_Switch__basic_12.c":87:17)
#loc128 = loc("CWE478_Missing_Default_Case_in_Switch__basic_12.c":89:23)
#loc129 = loc("CWE478_Missing_Default_Case_in_Switch__basic_12.c":89:13)
#loc130 = loc("CWE478_Missing_Default_Case_in_Switch__basic_12.c":94:9)
#loc131 = loc("CWE478_Missing_Default_Case_in_Switch__basic_12.c":111:9)
#loc132 = loc("CWE478_Missing_Default_Case_in_Switch__basic_12.c":95:13)
#loc133 = loc("CWE478_Missing_Default_Case_in_Switch__basic_12.c":95:38)
#loc134 = loc("CWE478_Missing_Default_Case_in_Switch__basic_12.c":96:13)
#loc135 = loc("CWE478_Missing_Default_Case_in_Switch__basic_12.c":96:17)
#loc136 = loc("CWE478_Missing_Default_Case_in_Switch__basic_12.c":97:18)
#loc137 = loc("CWE478_Missing_Default_Case_in_Switch__basic_12.c":97:27)
#loc138 = loc("CWE478_Missing_Default_Case_in_Switch__basic_12.c":97:13)
#loc139 = loc("CWE478_Missing_Default_Case_in_Switch__basic_12.c":97:28)
#loc140 = loc("CWE478_Missing_Default_Case_in_Switch__basic_12.c":98:13)
#loc141 = loc("CWE478_Missing_Default_Case_in_Switch__basic_12.c":109:13)
#loc142 = loc("CWE478_Missing_Default_Case_in_Switch__basic_12.c":98:21)
#loc143 = loc("CWE478_Missing_Default_Case_in_Switch__basic_12.c":100:13)
#loc144 = loc("CWE478_Missing_Default_Case_in_Switch__basic_12.c":101:30)
#loc145 = loc("CWE478_Missing_Default_Case_in_Switch__basic_12.c":101:17)
#loc146 = loc("CWE478_Missing_Default_Case_in_Switch__basic_12.c":102:17)
#loc147 = loc("CWE478_Missing_Default_Case_in_Switch__basic_12.c":103:13)
#loc148 = loc("CWE478_Missing_Default_Case_in_Switch__basic_12.c":104:30)
#loc149 = loc("CWE478_Missing_Default_Case_in_Switch__basic_12.c":104:17)
#loc150 = loc("CWE478_Missing_Default_Case_in_Switch__basic_12.c":105:17)
#loc151 = loc("CWE478_Missing_Default_Case_in_Switch__basic_12.c":107:13)
#loc152 = loc("CWE478_Missing_Default_Case_in_Switch__basic_12.c":108:17)
#loc153 = loc("CWE478_Missing_Default_Case_in_Switch__basic_12.c":110:23)
#loc154 = loc("CWE478_Missing_Default_Case_in_Switch__basic_12.c":110:13)
#loc155 = loc(fused[#loc1, #loc2])
#loc156 = loc(fused[#loc4, #loc5])
#loc157 = loc(fused[#loc8, #loc9])
#loc158 = loc(fused[#loc10, #loc11])
#loc159 = loc(fused[#loc12, #loc13])
#loc160 = loc(fused[#loc14, #loc15])
#loc161 = loc(fused[#loc16, #loc17, #loc18, #loc13])
#loc162 = loc(fused[#loc19, #loc20])
#loc163 = loc(fused[#loc21, #loc3])
#loc164 = loc(fused[#loc22, #loc23])
#loc165 = loc(fused[#loc24, #loc25])
#loc166 = loc(fused[#loc26, #loc27])
#loc167 = loc(fused[#loc28, #loc29])
#loc168 = loc(fused[#loc32, #loc6])
#loc169 = loc(fused[#loc35, #loc7])
#loc170 = loc(fused[#loc39, #loc40])
#loc171 = loc(fused[#loc41, #loc42])
#loc172 = loc(fused[#loc43, #loc44])
#loc173 = loc(fused[#loc45, #loc46])
#loc174 = loc(fused[#loc47, #loc48])
#loc175 = loc(fused[#loc49, #loc50])
#loc176 = loc(fused[#loc54, #loc53])
#loc177 = loc(fused[#loc58, #loc57])
#loc178 = loc(fused[#loc64, #loc65])
#loc179 = loc(fused[#loc66, #loc67])
#loc180 = loc(fused[#loc68, #loc69])
#loc181 = loc(fused[#loc70, #loc71])
#loc182 = loc(fused[#loc76, #loc77])
#loc185 = loc(fused[#loc87, #loc88])
#loc186 = loc(fused[#loc91, #loc92])
#loc187 = loc(fused[#loc95, #loc94])
#loc188 = loc(fused[#loc96, #loc97])
#loc189 = loc(fused[#loc98, #loc99])
#loc190 = loc(fused[#loc100, #loc101])
#loc191 = loc(fused[#loc102, #loc103, #loc104, #loc99])
#loc192 = loc(fused[#loc105, #loc106])
#loc193 = loc(fused[#loc107, #loc108])
#loc194 = loc(fused[#loc109, #loc110])
#loc195 = loc(fused[#loc111, #loc112])
#loc196 = loc(fused[#loc113, #loc114])
#loc197 = loc(fused[#loc115, #loc116])
#loc198 = loc(fused[#loc120, #loc119])
#loc199 = loc(fused[#loc124, #loc123])
#loc200 = loc(fused[#loc130, #loc131])
#loc201 = loc(fused[#loc132, #loc133])
#loc202 = loc(fused[#loc134, #loc135])
#loc203 = loc(fused[#loc136, #loc137])
#loc204 = loc(fused[#loc138, #loc139])
#loc205 = loc(fused[#loc140, #loc141])
#loc206 = loc(fused[#loc145, #loc144])
#loc207 = loc(fused[#loc149, #loc148])
