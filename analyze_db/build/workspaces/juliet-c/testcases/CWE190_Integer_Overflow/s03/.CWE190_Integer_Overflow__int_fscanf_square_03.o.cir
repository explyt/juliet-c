!s32i = !cir.int<s, 32>
!s64i = !cir.int<s, 64>
!s8i = !cir.int<s, 8>
!ty__IO_codecvt = !cir.record<struct "_IO_codecvt" incomplete>
!ty__IO_marker = !cir.record<struct "_IO_marker" incomplete>
!ty__IO_wide_data = !cir.record<struct "_IO_wide_data" incomplete>
!u16i = !cir.int<u, 16>
!u64i = !cir.int<u, 64>
!void = !cir.void
#false = #cir.bool<false> : !cir.bool
#fn_attr = #cir<extra({inline = #cir.inline<no>, nothrow = #cir.nothrow, optnone = #cir.optnone, uwtable = #cir.uwtable<async>})>
#fn_attr1 = #cir<extra({nothrow = #cir.nothrow})>
#true = #cir.bool<true> : !cir.bool
!ty__IO_FILE = !cir.record<struct "_IO_FILE" {!s32i, !cir.ptr<!s8i>, !cir.ptr<!s8i>, !cir.ptr<!s8i>, !cir.ptr<!s8i>, !cir.ptr<!s8i>, !cir.ptr<!s8i>, !cir.ptr<!s8i>, !cir.ptr<!s8i>, !cir.ptr<!s8i>, !cir.ptr<!s8i>, !cir.ptr<!s8i>, !cir.ptr<!ty__IO_marker>, !cir.ptr<!cir.record<struct "_IO_FILE">>, !s32i, !s32i, !s64i, !u16i, !s8i, !cir.array<!s8i x 1>, !cir.ptr<!void>, !s64i, !cir.ptr<!ty__IO_codecvt>, !cir.ptr<!ty__IO_wide_data>, !cir.ptr<!cir.record<struct "_IO_FILE">>, !cir.ptr<!void>, !u64i, !s32i, !cir.array<!s8i x 20>} #cir.record.decl.ast>
module @"/workspaces/juliet-c/testcases/CWE190_Integer_Overflow/s03/CWE190_Integer_Overflow__int_fscanf_square_03.c" attributes {cir.lang = #cir.lang<c>, cir.sob = #cir.signed_overflow_behavior<undefined>, cir.triple = "x86_64-unknown-linux-gnu", cir.type_size_info = #cir.type_size_info<char = 8, int = 32, size_t = 64>, cir.uwtable = #cir.uwtable<async>, dlti.dl_spec = #dlti.dl_spec<f80 = dense<128> : vector<2xi64>, !llvm.ptr<270> = dense<32> : vector<4xi64>, i128 = dense<128> : vector<2xi64>, i64 = dense<64> : vector<2xi64>, i8 = dense<8> : vector<2xi64>, i1 = dense<8> : vector<2xi64>, !llvm.ptr = dense<64> : vector<4xi64>, f64 = dense<64> : vector<2xi64>, f16 = dense<16> : vector<2xi64>, i32 = dense<32> : vector<2xi64>, i16 = dense<16> : vector<2xi64>, !llvm.ptr<272> = dense<64> : vector<4xi64>, !llvm.ptr<271> = dense<32> : vector<4xi64>, f128 = dense<128> : vector<2xi64>, "dlti.stack_alignment" = 128 : i64, "dlti.mangling_mode" = "e", "dlti.endianness" = "little">} {
  cir.func private @__isoc99_fscanf(!cir.ptr<!ty__IO_FILE>, !cir.ptr<!s8i>, ...) -> !s32i loc(#loc182)
  cir.global "private" external @stdin : !cir.ptr<!ty__IO_FILE> {alignment = 8 : i64} loc(#loc183)
  cir.global "private" constant cir_private dsolocal @".str" = #cir.const_array<"%d\00" : !cir.array<!s8i x 3>> : !cir.array<!s8i x 3> {alignment = 1 : i64} loc(#loc5)
  cir.func private @printIntLine(!s32i) loc(#loc184)
  cir.func no_proto @CWE190_Integer_Overflow__int_fscanf_square_03_bad() extra(#fn_attr) {
    %0 = cir.alloca !s32i, !cir.ptr<!s32i>, ["data"] {alignment = 4 : i64} loc(#loc186)
    %1 = cir.const #cir.int<0> : !s32i loc(#loc12)
    cir.store %1, %0 : !s32i, !cir.ptr<!s32i> loc(#loc187)
    cir.scope {
      %2 = cir.const #cir.int<5> : !s32i loc(#loc16)
      %3 = cir.const #cir.int<5> : !s32i loc(#loc17)
      %4 = cir.cmp(eq, %2, %3) : !s32i, !cir.bool loc(#loc189)
      cir.if %4 {
        %5 = cir.get_global @__isoc99_fscanf : !cir.ptr<!cir.func<(!cir.ptr<!ty__IO_FILE>, !cir.ptr<!s8i>, ...) -> !s32i>> loc(#loc19)
        %6 = cir.get_global @stdin : !cir.ptr<!cir.ptr<!ty__IO_FILE>> loc(#loc183)
        %7 = cir.load %6 : !cir.ptr<!cir.ptr<!ty__IO_FILE>>, !cir.ptr<!ty__IO_FILE> loc(#loc20)
        %8 = cir.get_global @".str" : !cir.ptr<!cir.array<!s8i x 3>> loc(#loc5)
        %9 = cir.cast(array_to_ptrdecay, %8 : !cir.ptr<!cir.array<!s8i x 3>>), !cir.ptr<!s8i> loc(#loc5)
        %10 = cir.call @__isoc99_fscanf(%7, %9, %0) : (!cir.ptr<!ty__IO_FILE>, !cir.ptr<!s8i>, !cir.ptr<!s32i>) -> !s32i loc(#loc19)
      } loc(#loc190)
    } loc(#loc188)
    cir.scope {
      %2 = cir.const #cir.int<5> : !s32i loc(#loc23)
      %3 = cir.const #cir.int<5> : !s32i loc(#loc24)
      %4 = cir.cmp(eq, %2, %3) : !s32i, !cir.bool loc(#loc192)
      cir.if %4 {
        cir.scope {
          %5 = cir.alloca !s32i, !cir.ptr<!s32i>, ["result", init] {alignment = 4 : i64} loc(#loc195)
          %6 = cir.load %0 : !cir.ptr<!s32i>, !s32i loc(#loc30)
          %7 = cir.load %0 : !cir.ptr<!s32i>, !s32i loc(#loc29)
          %8 = cir.binop(mul, %6, %7) nsw : !s32i loc(#loc30)
          cir.store %8, %5 : !s32i, !cir.ptr<!s32i> loc(#loc195)
          %9 = cir.load %5 : !cir.ptr<!s32i>, !s32i loc(#loc31)
          cir.call @printIntLine(%9) : (!s32i) -> () loc(#loc32)
        } loc(#loc194)
      } loc(#loc193)
    } loc(#loc191)
    cir.return loc(#loc9)
  } loc(#loc185)
  cir.func no_proto @CWE190_Integer_Overflow__int_fscanf_square_03_good() extra(#fn_attr) {
    %0 = cir.get_global @goodB2G1 : !cir.ptr<!cir.func<()>> loc(#loc197)
    cir.call %0() : (!cir.ptr<!cir.func<()>>) -> () loc(#loc35)
    %1 = cir.get_global @goodB2G2 : !cir.ptr<!cir.func<()>> loc(#loc198)
    cir.call %1() : (!cir.ptr<!cir.func<()>>) -> () loc(#loc37)
    %2 = cir.get_global @goodG2B1 : !cir.ptr<!cir.func<()>> loc(#loc199)
    cir.call %2() : (!cir.ptr<!cir.func<()>>) -> () loc(#loc39)
    %3 = cir.get_global @goodG2B2 : !cir.ptr<!cir.func<()>> loc(#loc200)
    cir.call %3() : (!cir.ptr<!cir.func<()>>) -> () loc(#loc41)
    cir.return loc(#loc34)
  } loc(#loc196)
  cir.func private @printLine(!cir.ptr<!s8i>) loc(#loc201)
  cir.global "private" constant cir_private dsolocal @".str.1" = #cir.const_array<"Benign, fixed string\00" : !cir.array<!s8i x 21>> : !cir.array<!s8i x 21> {alignment = 1 : i64} loc(#loc45)
  cir.func private @sqrt(!cir.double) -> !cir.double extra(#fn_attr1) loc(#loc46)
  cir.global "private" constant cir_private dsolocal @".str.2" = #cir.const_array<"data value is too large to perform arithmetic safely.\00" : !cir.array<!s8i x 54>> : !cir.array<!s8i x 54> {alignment = 1 : i64} loc(#loc47)
  cir.func no_proto internal private @goodB2G1() extra(#fn_attr) {
    %0 = cir.alloca !s32i, !cir.ptr<!s32i>, ["data"] {alignment = 4 : i64} loc(#loc203)
    %1 = cir.const #cir.int<0> : !s32i loc(#loc52)
    cir.store %1, %0 : !s32i, !cir.ptr<!s32i> loc(#loc204)
    cir.scope {
      %2 = cir.const #cir.int<5> : !s32i loc(#loc56)
      %3 = cir.const #cir.int<5> : !s32i loc(#loc57)
      %4 = cir.cmp(eq, %2, %3) : !s32i, !cir.bool loc(#loc206)
      cir.if %4 {
        %5 = cir.get_global @__isoc99_fscanf : !cir.ptr<!cir.func<(!cir.ptr<!ty__IO_FILE>, !cir.ptr<!s8i>, ...) -> !s32i>> loc(#loc59)
        %6 = cir.get_global @stdin : !cir.ptr<!cir.ptr<!ty__IO_FILE>> loc(#loc183)
        %7 = cir.load %6 : !cir.ptr<!cir.ptr<!ty__IO_FILE>>, !cir.ptr<!ty__IO_FILE> loc(#loc60)
        %8 = cir.get_global @".str" : !cir.ptr<!cir.array<!s8i x 3>> loc(#loc61)
        %9 = cir.cast(array_to_ptrdecay, %8 : !cir.ptr<!cir.array<!s8i x 3>>), !cir.ptr<!s8i> loc(#loc61)
        %10 = cir.call @__isoc99_fscanf(%7, %9, %0) : (!cir.ptr<!ty__IO_FILE>, !cir.ptr<!s8i>, !cir.ptr<!s32i>) -> !s32i loc(#loc59)
      } loc(#loc207)
    } loc(#loc205)
    cir.scope {
      %2 = cir.const #cir.int<5> : !s32i loc(#loc64)
      %3 = cir.const #cir.int<5> : !s32i loc(#loc65)
      %4 = cir.cmp(ne, %2, %3) : !s32i, !cir.bool loc(#loc209)
      cir.if %4 {
        %5 = cir.get_global @".str.1" : !cir.ptr<!cir.array<!s8i x 21>> loc(#loc45)
        %6 = cir.cast(array_to_ptrdecay, %5 : !cir.ptr<!cir.array<!s8i x 21>>), !cir.ptr<!s8i> loc(#loc45)
        cir.call @printLine(%6) : (!cir.ptr<!s8i>) -> () loc(#loc69)
      } else {
        cir.scope {
          %5 = cir.load %0 : !cir.ptr<!s32i>, !s32i loc(#loc72)
          %6 = cir.const #cir.int<2147483647> : !s32i loc(#loc73)
          %7 = cir.unary(minus, %6) nsw : !s32i, !s32i loc(#loc73)
          %8 = cir.const #cir.int<1> : !s32i loc(#loc73)
          %9 = cir.binop(sub, %7, %8) nsw : !s32i loc(#loc73)
          %10 = cir.cmp(gt, %5, %9) : !s32i, !cir.bool loc(#loc212)
          %11 = cir.ternary(%10, true {
            %12 = cir.load %0 : !cir.ptr<!s32i>, !s32i loc(#loc75)
            %13 = cir.abs %12 poison : !s32i loc(#loc76)
            %14 = cir.cast(integral, %13 : !s32i), !s64i loc(#loc76)
            %15 = cir.get_global @sqrt : !cir.ptr<!cir.func<(!cir.double) -> !cir.double>> loc(#loc77)
            %16 = cir.const #cir.int<2147483647> : !s32i loc(#loc78)
            %17 = cir.cast(int_to_float, %16 : !s32i), !cir.double loc(#loc78)
            %18 = cir.call @sqrt(%17) : (!cir.double) -> !cir.double extra(#fn_attr1) loc(#loc77)
            %19 = cir.cast(float_to_int, %18 : !cir.double), !s64i loc(#loc77)
            %20 = cir.cmp(lt, %14, %19) : !s64i, !cir.bool loc(#loc213)
            %21 = cir.ternary(%20, true {
              %22 = cir.const #true loc(#loc74)
              cir.yield %22 : !cir.bool loc(#loc74)
            }, false {
              %22 = cir.const #false loc(#loc74)
              cir.yield %22 : !cir.bool loc(#loc74)
            }) : (!cir.bool) -> !cir.bool loc(#loc74)
            cir.yield %21 : !cir.bool loc(#loc74)
          }, false {
            %12 = cir.const #false loc(#loc74)
            cir.yield %12 : !cir.bool loc(#loc74)
          }) : (!cir.bool) -> !cir.bool loc(#loc74)
          cir.if %11 {
            %12 = cir.alloca !s32i, !cir.ptr<!s32i>, ["result", init] {alignment = 4 : i64} loc(#loc215)
            %13 = cir.load %0 : !cir.ptr<!s32i>, !s32i loc(#loc85)
            %14 = cir.load %0 : !cir.ptr<!s32i>, !s32i loc(#loc84)
            %15 = cir.binop(mul, %13, %14) nsw : !s32i loc(#loc85)
            cir.store %15, %12 : !s32i, !cir.ptr<!s32i> loc(#loc215)
            %16 = cir.load %12 : !cir.ptr<!s32i>, !s32i loc(#loc86)
            cir.call @printIntLine(%16) : (!s32i) -> () loc(#loc87)
          } else {
            %12 = cir.get_global @".str.2" : !cir.ptr<!cir.array<!s8i x 54>> loc(#loc47)
            %13 = cir.cast(array_to_ptrdecay, %12 : !cir.ptr<!cir.array<!s8i x 54>>), !cir.ptr<!s8i> loc(#loc47)
            cir.call @printLine(%13) : (!cir.ptr<!s8i>) -> () loc(#loc88)
          } loc(#loc214)
        } loc(#loc211)
      } loc(#loc210)
    } loc(#loc208)
    cir.return loc(#loc49)
  } loc(#loc202)
  cir.func no_proto internal private @goodB2G2() extra(#fn_attr) {
    %0 = cir.alloca !s32i, !cir.ptr<!s32i>, ["data"] {alignment = 4 : i64} loc(#loc217)
    %1 = cir.const #cir.int<0> : !s32i loc(#loc93)
    cir.store %1, %0 : !s32i, !cir.ptr<!s32i> loc(#loc218)
    cir.scope {
      %2 = cir.const #cir.int<5> : !s32i loc(#loc97)
      %3 = cir.const #cir.int<5> : !s32i loc(#loc98)
      %4 = cir.cmp(eq, %2, %3) : !s32i, !cir.bool loc(#loc220)
      cir.if %4 {
        %5 = cir.get_global @__isoc99_fscanf : !cir.ptr<!cir.func<(!cir.ptr<!ty__IO_FILE>, !cir.ptr<!s8i>, ...) -> !s32i>> loc(#loc100)
        %6 = cir.get_global @stdin : !cir.ptr<!cir.ptr<!ty__IO_FILE>> loc(#loc183)
        %7 = cir.load %6 : !cir.ptr<!cir.ptr<!ty__IO_FILE>>, !cir.ptr<!ty__IO_FILE> loc(#loc101)
        %8 = cir.get_global @".str" : !cir.ptr<!cir.array<!s8i x 3>> loc(#loc102)
        %9 = cir.cast(array_to_ptrdecay, %8 : !cir.ptr<!cir.array<!s8i x 3>>), !cir.ptr<!s8i> loc(#loc102)
        %10 = cir.call @__isoc99_fscanf(%7, %9, %0) : (!cir.ptr<!ty__IO_FILE>, !cir.ptr<!s8i>, !cir.ptr<!s32i>) -> !s32i loc(#loc100)
      } loc(#loc221)
    } loc(#loc219)
    cir.scope {
      %2 = cir.const #cir.int<5> : !s32i loc(#loc105)
      %3 = cir.const #cir.int<5> : !s32i loc(#loc106)
      %4 = cir.cmp(eq, %2, %3) : !s32i, !cir.bool loc(#loc223)
      cir.if %4 {
        cir.scope {
          %5 = cir.load %0 : !cir.ptr<!s32i>, !s32i loc(#loc110)
          %6 = cir.const #cir.int<2147483647> : !s32i loc(#loc111)
          %7 = cir.unary(minus, %6) nsw : !s32i, !s32i loc(#loc111)
          %8 = cir.const #cir.int<1> : !s32i loc(#loc111)
          %9 = cir.binop(sub, %7, %8) nsw : !s32i loc(#loc111)
          %10 = cir.cmp(gt, %5, %9) : !s32i, !cir.bool loc(#loc226)
          %11 = cir.ternary(%10, true {
            %12 = cir.load %0 : !cir.ptr<!s32i>, !s32i loc(#loc113)
            %13 = cir.abs %12 poison : !s32i loc(#loc114)
            %14 = cir.cast(integral, %13 : !s32i), !s64i loc(#loc114)
            %15 = cir.get_global @sqrt : !cir.ptr<!cir.func<(!cir.double) -> !cir.double>> loc(#loc115)
            %16 = cir.const #cir.int<2147483647> : !s32i loc(#loc116)
            %17 = cir.cast(int_to_float, %16 : !s32i), !cir.double loc(#loc116)
            %18 = cir.call @sqrt(%17) : (!cir.double) -> !cir.double extra(#fn_attr1) loc(#loc115)
            %19 = cir.cast(float_to_int, %18 : !cir.double), !s64i loc(#loc115)
            %20 = cir.cmp(lt, %14, %19) : !s64i, !cir.bool loc(#loc227)
            %21 = cir.ternary(%20, true {
              %22 = cir.const #true loc(#loc112)
              cir.yield %22 : !cir.bool loc(#loc112)
            }, false {
              %22 = cir.const #false loc(#loc112)
              cir.yield %22 : !cir.bool loc(#loc112)
            }) : (!cir.bool) -> !cir.bool loc(#loc112)
            cir.yield %21 : !cir.bool loc(#loc112)
          }, false {
            %12 = cir.const #false loc(#loc112)
            cir.yield %12 : !cir.bool loc(#loc112)
          }) : (!cir.bool) -> !cir.bool loc(#loc112)
          cir.if %11 {
            %12 = cir.alloca !s32i, !cir.ptr<!s32i>, ["result", init] {alignment = 4 : i64} loc(#loc229)
            %13 = cir.load %0 : !cir.ptr<!s32i>, !s32i loc(#loc123)
            %14 = cir.load %0 : !cir.ptr<!s32i>, !s32i loc(#loc122)
            %15 = cir.binop(mul, %13, %14) nsw : !s32i loc(#loc123)
            cir.store %15, %12 : !s32i, !cir.ptr<!s32i> loc(#loc229)
            %16 = cir.load %12 : !cir.ptr<!s32i>, !s32i loc(#loc124)
            cir.call @printIntLine(%16) : (!s32i) -> () loc(#loc125)
          } else {
            %12 = cir.get_global @".str.2" : !cir.ptr<!cir.array<!s8i x 54>> loc(#loc126)
            %13 = cir.cast(array_to_ptrdecay, %12 : !cir.ptr<!cir.array<!s8i x 54>>), !cir.ptr<!s8i> loc(#loc126)
            cir.call @printLine(%13) : (!cir.ptr<!s8i>) -> () loc(#loc127)
          } loc(#loc228)
        } loc(#loc225)
      } loc(#loc224)
    } loc(#loc222)
    cir.return loc(#loc90)
  } loc(#loc216)
  cir.func no_proto internal private @goodG2B1() extra(#fn_attr) {
    %0 = cir.alloca !s32i, !cir.ptr<!s32i>, ["data"] {alignment = 4 : i64} loc(#loc231)
    %1 = cir.const #cir.int<0> : !s32i loc(#loc132)
    cir.store %1, %0 : !s32i, !cir.ptr<!s32i> loc(#loc232)
    cir.scope {
      %2 = cir.const #cir.int<5> : !s32i loc(#loc136)
      %3 = cir.const #cir.int<5> : !s32i loc(#loc137)
      %4 = cir.cmp(ne, %2, %3) : !s32i, !cir.bool loc(#loc234)
      cir.if %4 {
        %5 = cir.get_global @".str.1" : !cir.ptr<!cir.array<!s8i x 21>> loc(#loc141)
        %6 = cir.cast(array_to_ptrdecay, %5 : !cir.ptr<!cir.array<!s8i x 21>>), !cir.ptr<!s8i> loc(#loc141)
        cir.call @printLine(%6) : (!cir.ptr<!s8i>) -> () loc(#loc142)
      } else {
        %5 = cir.const #cir.int<2> : !s32i loc(#loc143)
        cir.store %5, %0 : !s32i, !cir.ptr<!s32i> loc(#loc236)
      } loc(#loc235)
    } loc(#loc233)
    cir.scope {
      %2 = cir.const #cir.int<5> : !s32i loc(#loc147)
      %3 = cir.const #cir.int<5> : !s32i loc(#loc148)
      %4 = cir.cmp(eq, %2, %3) : !s32i, !cir.bool loc(#loc238)
      cir.if %4 {
        cir.scope {
          %5 = cir.alloca !s32i, !cir.ptr<!s32i>, ["result", init] {alignment = 4 : i64} loc(#loc241)
          %6 = cir.load %0 : !cir.ptr<!s32i>, !s32i loc(#loc154)
          %7 = cir.load %0 : !cir.ptr<!s32i>, !s32i loc(#loc153)
          %8 = cir.binop(mul, %6, %7) nsw : !s32i loc(#loc154)
          cir.store %8, %5 : !s32i, !cir.ptr<!s32i> loc(#loc241)
          %9 = cir.load %5 : !cir.ptr<!s32i>, !s32i loc(#loc155)
          cir.call @printIntLine(%9) : (!s32i) -> () loc(#loc156)
        } loc(#loc240)
      } loc(#loc239)
    } loc(#loc237)
    cir.return loc(#loc129)
  } loc(#loc230)
  cir.func no_proto internal private @goodG2B2() extra(#fn_attr) {
    %0 = cir.alloca !s32i, !cir.ptr<!s32i>, ["data"] {alignment = 4 : i64} loc(#loc243)
    %1 = cir.const #cir.int<0> : !s32i loc(#loc161)
    cir.store %1, %0 : !s32i, !cir.ptr<!s32i> loc(#loc244)
    cir.scope {
      %2 = cir.const #cir.int<5> : !s32i loc(#loc165)
      %3 = cir.const #cir.int<5> : !s32i loc(#loc166)
      %4 = cir.cmp(eq, %2, %3) : !s32i, !cir.bool loc(#loc246)
      cir.if %4 {
        %5 = cir.const #cir.int<2> : !s32i loc(#loc168)
        cir.store %5, %0 : !s32i, !cir.ptr<!s32i> loc(#loc248)
      } loc(#loc247)
    } loc(#loc245)
    cir.scope {
      %2 = cir.const #cir.int<5> : !s32i loc(#loc172)
      %3 = cir.const #cir.int<5> : !s32i loc(#loc173)
      %4 = cir.cmp(eq, %2, %3) : !s32i, !cir.bool loc(#loc250)
      cir.if %4 {
        cir.scope {
          %5 = cir.alloca !s32i, !cir.ptr<!s32i>, ["result", init] {alignment = 4 : i64} loc(#loc253)
          %6 = cir.load %0 : !cir.ptr<!s32i>, !s32i loc(#loc179)
          %7 = cir.load %0 : !cir.ptr<!s32i>, !s32i loc(#loc178)
          %8 = cir.binop(mul, %6, %7) nsw : !s32i loc(#loc179)
          cir.store %8, %5 : !s32i, !cir.ptr<!s32i> loc(#loc253)
          %9 = cir.load %5 : !cir.ptr<!s32i>, !s32i loc(#loc180)
          cir.call @printIntLine(%9) : (!s32i) -> () loc(#loc181)
        } loc(#loc252)
      } loc(#loc251)
    } loc(#loc249)
    cir.return loc(#loc158)
  } loc(#loc242)
} loc(#loc)
#loc = loc("/workspaces/juliet-c/testcases/CWE190_Integer_Overflow/s03/CWE190_Integer_Overflow__int_fscanf_square_03.c":0:0)
#loc1 = loc("/usr/include/stdio.h":463:1)
#loc2 = loc("/usr/include/stdio.h":465:33)
#loc3 = loc("/usr/include/stdio.h":149:1)
#loc4 = loc("/usr/include/stdio.h":149:14)
#loc5 = loc("CWE190_Integer_Overflow__int_fscanf_square_03.c":32:23)
#loc6 = loc("../../../testcasesupport/std_testcase_io.h":18:1)
#loc7 = loc("../../../testcasesupport/std_testcase_io.h":18:33)
#loc8 = loc("CWE190_Integer_Overflow__int_fscanf_square_03.c":24:1)
#loc9 = loc("CWE190_Integer_Overflow__int_fscanf_square_03.c":42:1)
#loc10 = loc("CWE190_Integer_Overflow__int_fscanf_square_03.c":26:5)
#loc11 = loc("CWE190_Integer_Overflow__int_fscanf_square_03.c":26:9)
#loc12 = loc("CWE190_Integer_Overflow__int_fscanf_square_03.c":28:12)
#loc13 = loc("CWE190_Integer_Overflow__int_fscanf_square_03.c":28:5)
#loc14 = loc("CWE190_Integer_Overflow__int_fscanf_square_03.c":29:5)
#loc15 = loc("CWE190_Integer_Overflow__int_fscanf_square_03.c":33:5)
#loc16 = loc("CWE190_Integer_Overflow__int_fscanf_square_03.c":29:8)
#loc17 = loc("CWE190_Integer_Overflow__int_fscanf_square_03.c":29:11)
#loc18 = loc("CWE190_Integer_Overflow__int_fscanf_square_03.c":30:5)
#loc19 = loc("CWE190_Integer_Overflow__int_fscanf_square_03.c":32:9)
#loc20 = loc("CWE190_Integer_Overflow__int_fscanf_square_03.c":32:16)
#loc21 = loc("CWE190_Integer_Overflow__int_fscanf_square_03.c":34:5)
#loc22 = loc("CWE190_Integer_Overflow__int_fscanf_square_03.c":41:5)
#loc23 = loc("CWE190_Integer_Overflow__int_fscanf_square_03.c":34:8)
#loc24 = loc("CWE190_Integer_Overflow__int_fscanf_square_03.c":34:11)
#loc25 = loc("CWE190_Integer_Overflow__int_fscanf_square_03.c":35:5)
#loc26 = loc("CWE190_Integer_Overflow__int_fscanf_square_03.c":36:9)
#loc27 = loc("CWE190_Integer_Overflow__int_fscanf_square_03.c":40:9)
#loc28 = loc("CWE190_Integer_Overflow__int_fscanf_square_03.c":38:13)
#loc29 = loc("CWE190_Integer_Overflow__int_fscanf_square_03.c":38:33)
#loc30 = loc("CWE190_Integer_Overflow__int_fscanf_square_03.c":38:26)
#loc31 = loc("CWE190_Integer_Overflow__int_fscanf_square_03.c":39:26)
#loc32 = loc("CWE190_Integer_Overflow__int_fscanf_square_03.c":39:13)
#loc33 = loc("CWE190_Integer_Overflow__int_fscanf_square_03.c":152:1)
#loc34 = loc("CWE190_Integer_Overflow__int_fscanf_square_03.c":158:1)
#loc35 = loc("CWE190_Integer_Overflow__int_fscanf_square_03.c":154:5)
#loc36 = loc("CWE190_Integer_Overflow__int_fscanf_square_03.c":154:14)
#loc37 = loc("CWE190_Integer_Overflow__int_fscanf_square_03.c":155:5)
#loc38 = loc("CWE190_Integer_Overflow__int_fscanf_square_03.c":155:14)
#loc39 = loc("CWE190_Integer_Overflow__int_fscanf_square_03.c":156:5)
#loc40 = loc("CWE190_Integer_Overflow__int_fscanf_square_03.c":156:14)
#loc41 = loc("CWE190_Integer_Overflow__int_fscanf_square_03.c":157:5)
#loc42 = loc("CWE190_Integer_Overflow__int_fscanf_square_03.c":157:14)
#loc43 = loc("../../../testcasesupport/std_testcase_io.h":14:1)
#loc44 = loc("../../../testcasesupport/std_testcase_io.h":14:33)
#loc45 = loc("CWE190_Integer_Overflow__int_fscanf_square_03.c":62:19)
#loc46 = loc("/usr/include/x86_64-linux-gnu/bits/mathcalls.h":143:1)
#loc47 = loc("CWE190_Integer_Overflow__int_fscanf_square_03.c":74:23)
#loc48 = loc("CWE190_Integer_Overflow__int_fscanf_square_03.c":49:1)
#loc49 = loc("CWE190_Integer_Overflow__int_fscanf_square_03.c":77:1)
#loc50 = loc("CWE190_Integer_Overflow__int_fscanf_square_03.c":51:5)
#loc51 = loc("CWE190_Integer_Overflow__int_fscanf_square_03.c":51:9)
#loc52 = loc("CWE190_Integer_Overflow__int_fscanf_square_03.c":53:12)
#loc53 = loc("CWE190_Integer_Overflow__int_fscanf_square_03.c":53:5)
#loc54 = loc("CWE190_Integer_Overflow__int_fscanf_square_03.c":54:5)
#loc55 = loc("CWE190_Integer_Overflow__int_fscanf_square_03.c":58:5)
#loc56 = loc("CWE190_Integer_Overflow__int_fscanf_square_03.c":54:8)
#loc57 = loc("CWE190_Integer_Overflow__int_fscanf_square_03.c":54:11)
#loc58 = loc("CWE190_Integer_Overflow__int_fscanf_square_03.c":55:5)
#loc59 = loc("CWE190_Integer_Overflow__int_fscanf_square_03.c":57:9)
#loc60 = loc("CWE190_Integer_Overflow__int_fscanf_square_03.c":57:16)
#loc61 = loc("CWE190_Integer_Overflow__int_fscanf_square_03.c":57:23)
#loc62 = loc("CWE190_Integer_Overflow__int_fscanf_square_03.c":59:5)
#loc63 = loc("CWE190_Integer_Overflow__int_fscanf_square_03.c":76:5)
#loc64 = loc("CWE190_Integer_Overflow__int_fscanf_square_03.c":59:8)
#loc65 = loc("CWE190_Integer_Overflow__int_fscanf_square_03.c":59:11)
#loc66 = loc("CWE190_Integer_Overflow__int_fscanf_square_03.c":60:5)
#loc67 = loc("CWE190_Integer_Overflow__int_fscanf_square_03.c":63:5)
#loc68 = loc("CWE190_Integer_Overflow__int_fscanf_square_03.c":65:5)
#loc69 = loc("CWE190_Integer_Overflow__int_fscanf_square_03.c":62:9)
#loc70 = loc("CWE190_Integer_Overflow__int_fscanf_square_03.c":67:9)
#loc71 = loc("CWE190_Integer_Overflow__int_fscanf_square_03.c":75:9)
#loc72 = loc("CWE190_Integer_Overflow__int_fscanf_square_03.c":67:13)
#loc73 = loc("CWE190_Integer_Overflow__int_fscanf_square_03.c":67:20)
#loc74 = loc("CWE190_Integer_Overflow__int_fscanf_square_03.c":67:28)
#loc75 = loc("CWE190_Integer_Overflow__int_fscanf_square_03.c":67:35)
#loc76 = loc("CWE190_Integer_Overflow__int_fscanf_square_03.c":67:31)
#loc77 = loc("CWE190_Integer_Overflow__int_fscanf_square_03.c":67:49)
#loc78 = loc("CWE190_Integer_Overflow__int_fscanf_square_03.c":67:62)
#loc79 = loc("CWE190_Integer_Overflow__int_fscanf_square_03.c":67:69)
#loc80 = loc("CWE190_Integer_Overflow__int_fscanf_square_03.c":68:9)
#loc81 = loc("CWE190_Integer_Overflow__int_fscanf_square_03.c":71:9)
#loc82 = loc("CWE190_Integer_Overflow__int_fscanf_square_03.c":73:9)
#loc83 = loc("CWE190_Integer_Overflow__int_fscanf_square_03.c":69:13)
#loc84 = loc("CWE190_Integer_Overflow__int_fscanf_square_03.c":69:33)
#loc85 = loc("CWE190_Integer_Overflow__int_fscanf_square_03.c":69:26)
#loc86 = loc("CWE190_Integer_Overflow__int_fscanf_square_03.c":70:26)
#loc87 = loc("CWE190_Integer_Overflow__int_fscanf_square_03.c":70:13)
#loc88 = loc("CWE190_Integer_Overflow__int_fscanf_square_03.c":74:13)
#loc89 = loc("CWE190_Integer_Overflow__int_fscanf_square_03.c":80:1)
#loc90 = loc("CWE190_Integer_Overflow__int_fscanf_square_03.c":103:1)
#loc91 = loc("CWE190_Integer_Overflow__int_fscanf_square_03.c":82:5)
#loc92 = loc("CWE190_Integer_Overflow__int_fscanf_square_03.c":82:9)
#loc93 = loc("CWE190_Integer_Overflow__int_fscanf_square_03.c":84:12)
#loc94 = loc("CWE190_Integer_Overflow__int_fscanf_square_03.c":84:5)
#loc95 = loc("CWE190_Integer_Overflow__int_fscanf_square_03.c":85:5)
#loc96 = loc("CWE190_Integer_Overflow__int_fscanf_square_03.c":89:5)
#loc97 = loc("CWE190_Integer_Overflow__int_fscanf_square_03.c":85:8)
#loc98 = loc("CWE190_Integer_Overflow__int_fscanf_square_03.c":85:11)
#loc99 = loc("CWE190_Integer_Overflow__int_fscanf_square_03.c":86:5)
#loc100 = loc("CWE190_Integer_Overflow__int_fscanf_square_03.c":88:9)
#loc101 = loc("CWE190_Integer_Overflow__int_fscanf_square_03.c":88:16)
#loc102 = loc("CWE190_Integer_Overflow__int_fscanf_square_03.c":88:23)
#loc103 = loc("CWE190_Integer_Overflow__int_fscanf_square_03.c":90:5)
#loc104 = loc("CWE190_Integer_Overflow__int_fscanf_square_03.c":102:5)
#loc105 = loc("CWE190_Integer_Overflow__int_fscanf_square_03.c":90:8)
#loc106 = loc("CWE190_Integer_Overflow__int_fscanf_square_03.c":90:11)
#loc107 = loc("CWE190_Integer_Overflow__int_fscanf_square_03.c":91:5)
#loc108 = loc("CWE190_Integer_Overflow__int_fscanf_square_03.c":93:9)
#loc109 = loc("CWE190_Integer_Overflow__int_fscanf_square_03.c":101:9)
#loc110 = loc("CWE190_Integer_Overflow__int_fscanf_square_03.c":93:13)
#loc111 = loc("CWE190_Integer_Overflow__int_fscanf_square_03.c":93:20)
#loc112 = loc("CWE190_Integer_Overflow__int_fscanf_square_03.c":93:28)
#loc113 = loc("CWE190_Integer_Overflow__int_fscanf_square_03.c":93:35)
#loc114 = loc("CWE190_Integer_Overflow__int_fscanf_square_03.c":93:31)
#loc115 = loc("CWE190_Integer_Overflow__int_fscanf_square_03.c":93:49)
#loc116 = loc("CWE190_Integer_Overflow__int_fscanf_square_03.c":93:62)
#loc117 = loc("CWE190_Integer_Overflow__int_fscanf_square_03.c":93:69)
#loc118 = loc("CWE190_Integer_Overflow__int_fscanf_square_03.c":94:9)
#loc119 = loc("CWE190_Integer_Overflow__int_fscanf_square_03.c":97:9)
#loc120 = loc("CWE190_Integer_Overflow__int_fscanf_square_03.c":99:9)
#loc121 = loc("CWE190_Integer_Overflow__int_fscanf_square_03.c":95:13)
#loc122 = loc("CWE190_Integer_Overflow__int_fscanf_square_03.c":95:33)
#loc123 = loc("CWE190_Integer_Overflow__int_fscanf_square_03.c":95:26)
#loc124 = loc("CWE190_Integer_Overflow__int_fscanf_square_03.c":96:26)
#loc125 = loc("CWE190_Integer_Overflow__int_fscanf_square_03.c":96:13)
#loc126 = loc("CWE190_Integer_Overflow__int_fscanf_square_03.c":100:23)
#loc127 = loc("CWE190_Integer_Overflow__int_fscanf_square_03.c":100:13)
#loc128 = loc("CWE190_Integer_Overflow__int_fscanf_square_03.c":106:1)
#loc129 = loc("CWE190_Integer_Overflow__int_fscanf_square_03.c":129:1)
#loc130 = loc("CWE190_Integer_Overflow__int_fscanf_square_03.c":108:5)
#loc131 = loc("CWE190_Integer_Overflow__int_fscanf_square_03.c":108:9)
#loc132 = loc("CWE190_Integer_Overflow__int_fscanf_square_03.c":110:12)
#loc133 = loc("CWE190_Integer_Overflow__int_fscanf_square_03.c":110:5)
#loc134 = loc("CWE190_Integer_Overflow__int_fscanf_square_03.c":111:5)
#loc135 = loc("CWE190_Integer_Overflow__int_fscanf_square_03.c":120:5)
#loc136 = loc("CWE190_Integer_Overflow__int_fscanf_square_03.c":111:8)
#loc137 = loc("CWE190_Integer_Overflow__int_fscanf_square_03.c":111:11)
#loc138 = loc("CWE190_Integer_Overflow__int_fscanf_square_03.c":112:5)
#loc139 = loc("CWE190_Integer_Overflow__int_fscanf_square_03.c":115:5)
#loc140 = loc("CWE190_Integer_Overflow__int_fscanf_square_03.c":117:5)
#loc141 = loc("CWE190_Integer_Overflow__int_fscanf_square_03.c":114:19)
#loc142 = loc("CWE190_Integer_Overflow__int_fscanf_square_03.c":114:9)
#loc143 = loc("CWE190_Integer_Overflow__int_fscanf_square_03.c":119:16)
#loc144 = loc("CWE190_Integer_Overflow__int_fscanf_square_03.c":119:9)
#loc145 = loc("CWE190_Integer_Overflow__int_fscanf_square_03.c":121:5)
#loc146 = loc("CWE190_Integer_Overflow__int_fscanf_square_03.c":128:5)
#loc147 = loc("CWE190_Integer_Overflow__int_fscanf_square_03.c":121:8)
#loc148 = loc("CWE190_Integer_Overflow__int_fscanf_square_03.c":121:11)
#loc149 = loc("CWE190_Integer_Overflow__int_fscanf_square_03.c":122:5)
#loc150 = loc("CWE190_Integer_Overflow__int_fscanf_square_03.c":123:9)
#loc151 = loc("CWE190_Integer_Overflow__int_fscanf_square_03.c":127:9)
#loc152 = loc("CWE190_Integer_Overflow__int_fscanf_square_03.c":125:13)
#loc153 = loc("CWE190_Integer_Overflow__int_fscanf_square_03.c":125:33)
#loc154 = loc("CWE190_Integer_Overflow__int_fscanf_square_03.c":125:26)
#loc155 = loc("CWE190_Integer_Overflow__int_fscanf_square_03.c":126:26)
#loc156 = loc("CWE190_Integer_Overflow__int_fscanf_square_03.c":126:13)
#loc157 = loc("CWE190_Integer_Overflow__int_fscanf_square_03.c":132:1)
#loc158 = loc("CWE190_Integer_Overflow__int_fscanf_square_03.c":150:1)
#loc159 = loc("CWE190_Integer_Overflow__int_fscanf_square_03.c":134:5)
#loc160 = loc("CWE190_Integer_Overflow__int_fscanf_square_03.c":134:9)
#loc161 = loc("CWE190_Integer_Overflow__int_fscanf_square_03.c":136:12)
#loc162 = loc("CWE190_Integer_Overflow__int_fscanf_square_03.c":136:5)
#loc163 = loc("CWE190_Integer_Overflow__int_fscanf_square_03.c":137:5)
#loc164 = loc("CWE190_Integer_Overflow__int_fscanf_square_03.c":141:5)
#loc165 = loc("CWE190_Integer_Overflow__int_fscanf_square_03.c":137:8)
#loc166 = loc("CWE190_Integer_Overflow__int_fscanf_square_03.c":137:11)
#loc167 = loc("CWE190_Integer_Overflow__int_fscanf_square_03.c":138:5)
#loc168 = loc("CWE190_Integer_Overflow__int_fscanf_square_03.c":140:16)
#loc169 = loc("CWE190_Integer_Overflow__int_fscanf_square_03.c":140:9)
#loc170 = loc("CWE190_Integer_Overflow__int_fscanf_square_03.c":142:5)
#loc171 = loc("CWE190_Integer_Overflow__int_fscanf_square_03.c":149:5)
#loc172 = loc("CWE190_Integer_Overflow__int_fscanf_square_03.c":142:8)
#loc173 = loc("CWE190_Integer_Overflow__int_fscanf_square_03.c":142:11)
#loc174 = loc("CWE190_Integer_Overflow__int_fscanf_square_03.c":143:5)
#loc175 = loc("CWE190_Integer_Overflow__int_fscanf_square_03.c":144:9)
#loc176 = loc("CWE190_Integer_Overflow__int_fscanf_square_03.c":148:9)
#loc177 = loc("CWE190_Integer_Overflow__int_fscanf_square_03.c":146:13)
#loc178 = loc("CWE190_Integer_Overflow__int_fscanf_square_03.c":146:33)
#loc179 = loc("CWE190_Integer_Overflow__int_fscanf_square_03.c":146:26)
#loc180 = loc("CWE190_Integer_Overflow__int_fscanf_square_03.c":147:26)
#loc181 = loc("CWE190_Integer_Overflow__int_fscanf_square_03.c":147:13)
#loc182 = loc(fused[#loc1, #loc2])
#loc183 = loc(fused[#loc3, #loc4])
#loc184 = loc(fused[#loc6, #loc7])
#loc185 = loc(fused[#loc8, #loc9])
#loc186 = loc(fused[#loc10, #loc11])
#loc187 = loc(fused[#loc13, #loc12])
#loc188 = loc(fused[#loc14, #loc15])
#loc189 = loc(fused[#loc16, #loc17])
#loc190 = loc(fused[#loc18, #loc15])
#loc191 = loc(fused[#loc21, #loc22])
#loc192 = loc(fused[#loc23, #loc24])
#loc193 = loc(fused[#loc25, #loc22])
#loc194 = loc(fused[#loc26, #loc27])
#loc195 = loc(fused[#loc28, #loc29])
#loc196 = loc(fused[#loc33, #loc34])
#loc197 = loc(fused[#loc35, #loc36])
#loc198 = loc(fused[#loc37, #loc38])
#loc199 = loc(fused[#loc39, #loc40])
#loc200 = loc(fused[#loc41, #loc42])
#loc201 = loc(fused[#loc43, #loc44])
#loc202 = loc(fused[#loc48, #loc49])
#loc203 = loc(fused[#loc50, #loc51])
#loc204 = loc(fused[#loc53, #loc52])
#loc205 = loc(fused[#loc54, #loc55])
#loc206 = loc(fused[#loc56, #loc57])
#loc207 = loc(fused[#loc58, #loc55])
#loc208 = loc(fused[#loc62, #loc63])
#loc209 = loc(fused[#loc64, #loc65])
#loc210 = loc(fused[#loc66, #loc67, #loc68, #loc63])
#loc211 = loc(fused[#loc70, #loc71])
#loc212 = loc(fused[#loc72, #loc73])
#loc213 = loc(fused[#loc76, #loc79])
#loc214 = loc(fused[#loc80, #loc81, #loc82, #loc71])
#loc215 = loc(fused[#loc83, #loc84])
#loc216 = loc(fused[#loc89, #loc90])
#loc217 = loc(fused[#loc91, #loc92])
#loc218 = loc(fused[#loc94, #loc93])
#loc219 = loc(fused[#loc95, #loc96])
#loc220 = loc(fused[#loc97, #loc98])
#loc221 = loc(fused[#loc99, #loc96])
#loc222 = loc(fused[#loc103, #loc104])
#loc223 = loc(fused[#loc105, #loc106])
#loc224 = loc(fused[#loc107, #loc104])
#loc225 = loc(fused[#loc108, #loc109])
#loc226 = loc(fused[#loc110, #loc111])
#loc227 = loc(fused[#loc114, #loc117])
#loc228 = loc(fused[#loc118, #loc119, #loc120, #loc109])
#loc229 = loc(fused[#loc121, #loc122])
#loc230 = loc(fused[#loc128, #loc129])
#loc231 = loc(fused[#loc130, #loc131])
#loc232 = loc(fused[#loc133, #loc132])
#loc233 = loc(fused[#loc134, #loc135])
#loc234 = loc(fused[#loc136, #loc137])
#loc235 = loc(fused[#loc138, #loc139, #loc140, #loc135])
#loc236 = loc(fused[#loc144, #loc143])
#loc237 = loc(fused[#loc145, #loc146])
#loc238 = loc(fused[#loc147, #loc148])
#loc239 = loc(fused[#loc149, #loc146])
#loc240 = loc(fused[#loc150, #loc151])
#loc241 = loc(fused[#loc152, #loc153])
#loc242 = loc(fused[#loc157, #loc158])
#loc243 = loc(fused[#loc159, #loc160])
#loc244 = loc(fused[#loc162, #loc161])
#loc245 = loc(fused[#loc163, #loc164])
#loc246 = loc(fused[#loc165, #loc166])
#loc247 = loc(fused[#loc167, #loc164])
#loc248 = loc(fused[#loc169, #loc168])
#loc249 = loc(fused[#loc170, #loc171])
#loc250 = loc(fused[#loc172, #loc173])
#loc251 = loc(fused[#loc174, #loc171])
#loc252 = loc(fused[#loc175, #loc176])
#loc253 = loc(fused[#loc177, #loc178])
