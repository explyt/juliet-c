!s32i = !cir.int<s, 32>
!u64i = !cir.int<u, 64>
!void = !cir.void
#fn_attr = #cir<extra({nothrow = #cir.nothrow})>
#fn_attr1 = #cir<extra({inline = #cir.inline<no>, nothrow = #cir.nothrow, optnone = #cir.optnone})>
#loc7 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE131_memmove_61b.c":21:71)
#loc8 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE131_memmove_61b.c":21:77)
#loc26 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE131_memmove_61b.c":34:75)
#loc27 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE131_memmove_61b.c":34:81)
#loc48 = loc(fused[#loc7, #loc8])
#loc56 = loc(fused[#loc26, #loc27])
module @"/home/ladisgin/git_proj/juliet-c/testcases/CWE122_Heap_Based_Buffer_Overflow/s06/CWE122_Heap_Based_Buffer_Overflow__CWE131_memmove_61b.c" attributes {cir.lang = #cir.lang<c>, cir.sob = #cir.signed_overflow_behavior<undefined>, cir.triple = "x86_64-unknown-linux-gnu", dlti.dl_spec = #dlti.dl_spec<!llvm.ptr = dense<64> : vector<4xi64>, i1 = dense<8> : vector<2xi64>, i8 = dense<8> : vector<2xi64>, i16 = dense<16> : vector<2xi64>, i32 = dense<32> : vector<2xi64>, f16 = dense<16> : vector<2xi64>, f64 = dense<64> : vector<2xi64>, f128 = dense<128> : vector<2xi64>, !llvm.ptr<270> = dense<32> : vector<4xi64>, !llvm.ptr<271> = dense<32> : vector<4xi64>, !llvm.ptr<272> = dense<64> : vector<4xi64>, i64 = dense<64> : vector<2xi64>, i128 = dense<128> : vector<2xi64>, f80 = dense<128> : vector<2xi64>, "dlti.endianness" = "little", "dlti.stack_alignment" = 128 : i64>} {
  cir.func private @malloc(!u64i) -> !cir.ptr<!void> extra(#fn_attr) loc(#loc45)
  cir.func private @exit(!s32i) extra(#fn_attr) loc(#loc46)
  cir.func @CWE122_Heap_Based_Buffer_Overflow__CWE131_memmove_61b_badSource(%arg0: !cir.ptr<!s32i> loc(fused[#loc7, #loc8])) -> !cir.ptr<!s32i> extra(#fn_attr1) {
    %0 = cir.alloca !cir.ptr<!s32i>, !cir.ptr<!cir.ptr<!s32i>>, ["data", init] {alignment = 8 : i64} loc(#loc48)
    %1 = cir.alloca !cir.ptr<!s32i>, !cir.ptr<!cir.ptr<!s32i>>, ["__retval"] {alignment = 8 : i64} loc(#loc6)
    cir.store %arg0, %0 : !cir.ptr<!s32i>, !cir.ptr<!cir.ptr<!s32i>> loc(#loc9)
    %2 = cir.get_global @malloc : !cir.ptr<!cir.func<!cir.ptr<!void> (!u64i)>> loc(#loc10)
    %3 = cir.const #cir.int<10> : !s32i loc(#loc11)
    %4 = cir.cast(integral, %3 : !s32i), !u64i loc(#loc11)
    %5 = cir.call @malloc(%4) : (!u64i) -> !cir.ptr<!void> extra(#fn_attr) loc(#loc10)
    %6 = cir.cast(bitcast, %5 : !cir.ptr<!void>), !cir.ptr<!s32i> loc(#loc49)
    cir.store %6, %0 : !cir.ptr<!s32i>, !cir.ptr<!cir.ptr<!s32i>> loc(#loc50)
    cir.br ^bb1 loc(#loc51)
  ^bb1:  // pred: ^bb0
    %7 = cir.load %0 : !cir.ptr<!cir.ptr<!s32i>>, !cir.ptr<!s32i> loc(#loc16)
    %8 = cir.const #cir.ptr<null> : !cir.ptr<!void> loc(#loc17)
    %9 = cir.cast(bitcast, %8 : !cir.ptr<!void>), !cir.ptr<!s32i> loc(#loc17)
    %10 = cir.cmp(eq, %7, %9) : !cir.ptr<!s32i>, !cir.bool loc(#loc52)
    cir.brcond %10 ^bb2, ^bb3 loc(#loc53)
  ^bb2:  // pred: ^bb1
    %11 = cir.get_global @exit : !cir.ptr<!cir.func<!void (!s32i)>> loc(#loc19)
    %12 = cir.const #cir.int<1> : !s32i loc(#loc20)
    %13 = cir.unary(minus, %12) : !s32i, !s32i loc(#loc21)
    cir.call @exit(%13) : (!s32i) -> () extra(#fn_attr) loc(#loc19)
    cir.br ^bb3 loc(#loc15)
  ^bb3:  // 2 preds: ^bb1, ^bb2
    cir.br ^bb4 loc(#loc15)
  ^bb4:  // pred: ^bb3
    %14 = cir.load %0 : !cir.ptr<!cir.ptr<!s32i>>, !cir.ptr<!s32i> loc(#loc22)
    cir.store %14, %1 : !cir.ptr<!s32i>, !cir.ptr<!cir.ptr<!s32i>> loc(#loc54)
    %15 = cir.load %1 : !cir.ptr<!cir.ptr<!s32i>>, !cir.ptr<!s32i> loc(#loc54)
    cir.return %15 : !cir.ptr<!s32i> loc(#loc54)
  } loc(#loc47)
  cir.func @CWE122_Heap_Based_Buffer_Overflow__CWE131_memmove_61b_goodG2BSource(%arg0: !cir.ptr<!s32i> loc(fused[#loc26, #loc27])) -> !cir.ptr<!s32i> extra(#fn_attr1) {
    %0 = cir.alloca !cir.ptr<!s32i>, !cir.ptr<!cir.ptr<!s32i>>, ["data", init] {alignment = 8 : i64} loc(#loc56)
    %1 = cir.alloca !cir.ptr<!s32i>, !cir.ptr<!cir.ptr<!s32i>>, ["__retval"] {alignment = 8 : i64} loc(#loc25)
    cir.store %arg0, %0 : !cir.ptr<!s32i>, !cir.ptr<!cir.ptr<!s32i>> loc(#loc28)
    %2 = cir.get_global @malloc : !cir.ptr<!cir.func<!cir.ptr<!void> (!u64i)>> loc(#loc29)
    %3 = cir.const #cir.int<10> : !s32i loc(#loc30)
    %4 = cir.cast(integral, %3 : !s32i), !u64i loc(#loc30)
    %5 = cir.const #cir.int<4> : !u64i loc(#loc57)
    %6 = cir.binop(mul, %4, %5) : !u64i loc(#loc58)
    %7 = cir.call @malloc(%6) : (!u64i) -> !cir.ptr<!void> extra(#fn_attr) loc(#loc29)
    %8 = cir.cast(bitcast, %7 : !cir.ptr<!void>), !cir.ptr<!s32i> loc(#loc59)
    cir.store %8, %0 : !cir.ptr<!s32i>, !cir.ptr<!cir.ptr<!s32i>> loc(#loc60)
    cir.br ^bb1 loc(#loc61)
  ^bb1:  // pred: ^bb0
    %9 = cir.load %0 : !cir.ptr<!cir.ptr<!s32i>>, !cir.ptr<!s32i> loc(#loc37)
    %10 = cir.const #cir.ptr<null> : !cir.ptr<!void> loc(#loc38)
    %11 = cir.cast(bitcast, %10 : !cir.ptr<!void>), !cir.ptr<!s32i> loc(#loc38)
    %12 = cir.cmp(eq, %9, %11) : !cir.ptr<!s32i>, !cir.bool loc(#loc62)
    cir.brcond %12 ^bb2, ^bb3 loc(#loc63)
  ^bb2:  // pred: ^bb1
    %13 = cir.get_global @exit : !cir.ptr<!cir.func<!void (!s32i)>> loc(#loc40)
    %14 = cir.const #cir.int<1> : !s32i loc(#loc41)
    %15 = cir.unary(minus, %14) : !s32i, !s32i loc(#loc42)
    cir.call @exit(%15) : (!s32i) -> () extra(#fn_attr) loc(#loc40)
    cir.br ^bb3 loc(#loc36)
  ^bb3:  // 2 preds: ^bb1, ^bb2
    cir.br ^bb4 loc(#loc36)
  ^bb4:  // pred: ^bb3
    %16 = cir.load %0 : !cir.ptr<!cir.ptr<!s32i>>, !cir.ptr<!s32i> loc(#loc43)
    cir.store %16, %1 : !cir.ptr<!s32i>, !cir.ptr<!cir.ptr<!s32i>> loc(#loc64)
    %17 = cir.load %1 : !cir.ptr<!cir.ptr<!s32i>>, !cir.ptr<!s32i> loc(#loc64)
    cir.return %17 : !cir.ptr<!s32i> loc(#loc64)
  } loc(#loc55)
} loc(#loc)
#loc = loc("/home/ladisgin/git_proj/juliet-c/testcases/CWE122_Heap_Based_Buffer_Overflow/s06/CWE122_Heap_Based_Buffer_Overflow__CWE131_memmove_61b.c":0:0)
#loc1 = loc("/usr/include/stdlib.h":672:1)
#loc2 = loc("/usr/include/stdlib.h":672:45)
#loc3 = loc("/usr/include/stdlib.h":756:1)
#loc4 = loc("/usr/include/stdlib.h":756:70)
#loc5 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE131_memmove_61b.c":21:1)
#loc6 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE131_memmove_61b.c":27:1)
#loc9 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE131_memmove_61b.c":22:1)
#loc10 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE131_memmove_61b.c":24:19)
#loc11 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE131_memmove_61b.c":24:26)
#loc12 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE131_memmove_61b.c":24:28)
#loc13 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE131_memmove_61b.c":24:5)
#loc14 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE131_memmove_61b.c":25:5)
#loc15 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE131_memmove_61b.c":25:33)
#loc16 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE131_memmove_61b.c":25:9)
#loc17 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE131_memmove_61b.c":25:17)
#loc18 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE131_memmove_61b.c":25:23)
#loc19 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE131_memmove_61b.c":25:24)
#loc20 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE131_memmove_61b.c":25:30)
#loc21 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE131_memmove_61b.c":25:29)
#loc22 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE131_memmove_61b.c":26:12)
#loc23 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE131_memmove_61b.c":26:5)
#loc24 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE131_memmove_61b.c":34:1)
#loc25 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE131_memmove_61b.c":40:1)
#loc28 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE131_memmove_61b.c":35:1)
#loc29 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE131_memmove_61b.c":37:19)
#loc30 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE131_memmove_61b.c":37:26)
#loc31 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE131_memmove_61b.c":37:29)
#loc32 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE131_memmove_61b.c":37:39)
#loc33 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE131_memmove_61b.c":37:40)
#loc34 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE131_memmove_61b.c":37:5)
#loc35 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE131_memmove_61b.c":38:5)
#loc36 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE131_memmove_61b.c":38:33)
#loc37 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE131_memmove_61b.c":38:9)
#loc38 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE131_memmove_61b.c":38:17)
#loc39 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE131_memmove_61b.c":38:23)
#loc40 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE131_memmove_61b.c":38:24)
#loc41 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE131_memmove_61b.c":38:30)
#loc42 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE131_memmove_61b.c":38:29)
#loc43 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE131_memmove_61b.c":39:12)
#loc44 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE131_memmove_61b.c":39:5)
#loc45 = loc(fused[#loc1, #loc2])
#loc46 = loc(fused[#loc3, #loc4])
#loc47 = loc(fused[#loc5, #loc6])
#loc49 = loc(fused[#loc10, #loc12])
#loc50 = loc(fused[#loc13, #loc12])
#loc51 = loc(fused[#loc14, #loc15])
#loc52 = loc(fused[#loc16, #loc17])
#loc53 = loc(fused[#loc18, #loc15])
#loc54 = loc(fused[#loc23, #loc22])
#loc55 = loc(fused[#loc24, #loc25])
#loc57 = loc(fused[#loc31, #loc32])
#loc58 = loc(fused[#loc30, #loc32])
#loc59 = loc(fused[#loc29, #loc33])
#loc60 = loc(fused[#loc34, #loc33])
#loc61 = loc(fused[#loc35, #loc36])
#loc62 = loc(fused[#loc37, #loc38])
#loc63 = loc(fused[#loc39, #loc36])
#loc64 = loc(fused[#loc44, #loc43])
