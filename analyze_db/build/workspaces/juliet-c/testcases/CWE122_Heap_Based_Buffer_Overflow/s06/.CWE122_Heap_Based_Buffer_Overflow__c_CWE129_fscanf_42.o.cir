!s32i = !cir.int<s, 32>
!s64i = !cir.int<s, 64>
!s8i = !cir.int<s, 8>
!ty__IO_codecvt = !cir.record<struct "_IO_codecvt" incomplete>
!ty__IO_marker = !cir.record<struct "_IO_marker" incomplete>
!ty__IO_wide_data = !cir.record<struct "_IO_wide_data" incomplete>
!u16i = !cir.int<u, 16>
!u64i = !cir.int<u, 64>
!void = !cir.void
#false = #cir.bool<false> : !cir.bool
#fn_attr = #cir<extra({inline = #cir.inline<no>, nothrow = #cir.nothrow, optnone = #cir.optnone, uwtable = #cir.uwtable<async>})>
#fn_attr1 = #cir<extra({nothrow = #cir.nothrow})>
#loc8 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fscanf_42.c":22:22)
#loc9 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fscanf_42.c":22:26)
#loc105 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fscanf_42.c":111:26)
#loc106 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fscanf_42.c":111:30)
#loc191 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fscanf_42.c":68:26)
#loc192 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fscanf_42.c":68:30)
#true = #cir.bool<true> : !cir.bool
#loc273 = loc(fused[#loc8, #loc9])
#loc312 = loc(fused[#loc105, #loc106])
#loc344 = loc(fused[#loc191, #loc192])
!ty__IO_FILE = !cir.record<struct "_IO_FILE" {!s32i, !cir.ptr<!s8i>, !cir.ptr<!s8i>, !cir.ptr<!s8i>, !cir.ptr<!s8i>, !cir.ptr<!s8i>, !cir.ptr<!s8i>, !cir.ptr<!s8i>, !cir.ptr<!s8i>, !cir.ptr<!s8i>, !cir.ptr<!s8i>, !cir.ptr<!s8i>, !cir.ptr<!ty__IO_marker>, !cir.ptr<!cir.record<struct "_IO_FILE">>, !s32i, !s32i, !s64i, !u16i, !s8i, !cir.array<!s8i x 1>, !cir.ptr<!void>, !s64i, !cir.ptr<!ty__IO_codecvt>, !cir.ptr<!ty__IO_wide_data>, !cir.ptr<!cir.record<struct "_IO_FILE">>, !cir.ptr<!void>, !u64i, !s32i, !cir.array<!s8i x 20>} #cir.record.decl.ast>
module @"/workspaces/juliet-c/testcases/CWE122_Heap_Based_Buffer_Overflow/s06/CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fscanf_42.c" attributes {cir.lang = #cir.lang<c>, cir.sob = #cir.signed_overflow_behavior<undefined>, cir.triple = "x86_64-unknown-linux-gnu", cir.type_size_info = #cir.type_size_info<char = 8, int = 32, size_t = 64>, cir.uwtable = #cir.uwtable<async>, dlti.dl_spec = #dlti.dl_spec<f16 = dense<16> : vector<2xi64>, f64 = dense<64> : vector<2xi64>, i16 = dense<16> : vector<2xi64>, i32 = dense<32> : vector<2xi64>, !llvm.ptr<271> = dense<32> : vector<4xi64>, f128 = dense<128> : vector<2xi64>, !llvm.ptr<272> = dense<64> : vector<4xi64>, !llvm.ptr<270> = dense<32> : vector<4xi64>, f80 = dense<128> : vector<2xi64>, i64 = dense<64> : vector<2xi64>, i128 = dense<128> : vector<2xi64>, i1 = dense<8> : vector<2xi64>, i8 = dense<8> : vector<2xi64>, !llvm.ptr = dense<64> : vector<4xi64>, "dlti.mangling_mode" = "e", "dlti.stack_alignment" = 128 : i64, "dlti.endianness" = "little">} {
  cir.func private @__isoc99_fscanf(!cir.ptr<!ty__IO_FILE>, !cir.ptr<!s8i>, ...) -> !s32i loc(#loc270)
  cir.global "private" external @stdin : !cir.ptr<!ty__IO_FILE> {alignment = 8 : i64} loc(#loc271)
  cir.global "private" constant cir_private dsolocal @".str.1" = #cir.const_array<"%d\00" : !cir.array<!s8i x 3>> : !cir.array<!s8i x 3> {alignment = 1 : i64} loc(#loc5)
  cir.func internal private @badSource(%arg0: !s32i loc(fused[#loc8, #loc9])) -> !s32i extra(#fn_attr) {
    %0 = cir.alloca !s32i, !cir.ptr<!s32i>, ["data", init] {alignment = 4 : i64} loc(#loc273)
    %1 = cir.alloca !s32i, !cir.ptr<!s32i>, ["__retval"] {alignment = 4 : i64} loc(#loc7)
    cir.store %arg0, %0 : !s32i, !cir.ptr<!s32i> loc(#loc10)
    %2 = cir.get_global @__isoc99_fscanf : !cir.ptr<!cir.func<(!cir.ptr<!ty__IO_FILE>, !cir.ptr<!s8i>, ...) -> !s32i>> loc(#loc11)
    %3 = cir.get_global @stdin : !cir.ptr<!cir.ptr<!ty__IO_FILE>> loc(#loc271)
    %4 = cir.load %3 : !cir.ptr<!cir.ptr<!ty__IO_FILE>>, !cir.ptr<!ty__IO_FILE> loc(#loc12)
    %5 = cir.get_global @".str.1" : !cir.ptr<!cir.array<!s8i x 3>> loc(#loc5)
    %6 = cir.cast(array_to_ptrdecay, %5 : !cir.ptr<!cir.array<!s8i x 3>>), !cir.ptr<!s8i> loc(#loc5)
    %7 = cir.call @__isoc99_fscanf(%4, %6, %0) : (!cir.ptr<!ty__IO_FILE>, !cir.ptr<!s8i>, !cir.ptr<!s32i>) -> !s32i loc(#loc11)
    %8 = cir.load %0 : !cir.ptr<!s32i>, !s32i loc(#loc13)
    cir.store %8, %1 : !s32i, !cir.ptr<!s32i> loc(#loc274)
    %9 = cir.load %1 : !cir.ptr<!s32i>, !s32i loc(#loc274)
    cir.return %9 : !s32i loc(#loc274)
  } loc(#loc272)
  cir.func private @malloc(!u64i) -> !cir.ptr<!void> extra(#fn_attr1) loc(#loc275)
  cir.func private @exit(!s32i) extra(#fn_attr1) loc(#loc276)
  cir.func private @printIntLine(!s32i) loc(#loc277)
  cir.func private @printLine(!cir.ptr<!s8i>) loc(#loc278)
  cir.global "private" constant cir_private dsolocal @".str" = #cir.const_array<"ERROR: Array index is negative.\00" : !cir.array<!s8i x 32>> : !cir.array<!s8i x 32> {alignment = 1 : i64} loc(#loc23)
  cir.func private @free(!cir.ptr<!void>) extra(#fn_attr1) loc(#loc279)
  cir.func no_proto @CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fscanf_42_bad() extra(#fn_attr) {
    %0 = cir.alloca !s32i, !cir.ptr<!s32i>, ["data"] {alignment = 4 : i64} loc(#loc281)
    %1 = cir.const #cir.int<1> : !s32i loc(#loc30)
    %2 = cir.unary(minus, %1) nsw : !s32i, !s32i loc(#loc31)
    cir.store %2, %0 : !s32i, !cir.ptr<!s32i> loc(#loc282)
    %3 = cir.load %0 : !cir.ptr<!s32i>, !s32i loc(#loc33)
    %4 = cir.call @badSource(%3) : (!s32i) -> !s32i loc(#loc34)
    cir.store %4, %0 : !s32i, !cir.ptr<!s32i> loc(#loc283)
    cir.scope {
      %5 = cir.alloca !s32i, !cir.ptr<!s32i>, ["i"] {alignment = 4 : i64} loc(#loc285)
      %6 = cir.alloca !cir.ptr<!s32i>, !cir.ptr<!cir.ptr<!s32i>>, ["buffer", init] {alignment = 8 : i64} loc(#loc286)
      %7 = cir.get_global @malloc : !cir.ptr<!cir.func<(!u64i) -> !cir.ptr<!void>>> loc(#loc43)
      %8 = cir.const #cir.int<10> : !s32i loc(#loc44)
      %9 = cir.cast(integral, %8 : !s32i), !u64i loc(#loc44)
      %10 = cir.const #cir.int<4> : !u64i loc(#loc287)
      %11 = cir.binop(mul, %9, %10) : !u64i loc(#loc288)
      %12 = cir.call @malloc(%11) : (!u64i) -> !cir.ptr<!void> extra(#fn_attr1) loc(#loc43)
      %13 = cir.cast(bitcast, %12 : !cir.ptr<!void>), !cir.ptr<!s32i> loc(#loc289)
      cir.store %13, %6 : !cir.ptr<!s32i>, !cir.ptr<!cir.ptr<!s32i>> loc(#loc286)
      cir.scope {
        %17 = cir.load %6 : !cir.ptr<!cir.ptr<!s32i>>, !cir.ptr<!s32i> loc(#loc49)
        %18 = cir.const #cir.ptr<null> : !cir.ptr<!void> loc(#loc50)
        %19 = cir.cast(bitcast, %18 : !cir.ptr<!void>), !cir.ptr<!s32i> loc(#loc50)
        %20 = cir.cmp(eq, %17, %19) : !cir.ptr<!s32i>, !cir.bool loc(#loc291)
        cir.if %20 {
          %21 = cir.get_global @exit : !cir.ptr<!cir.func<(!s32i)>> loc(#loc52)
          %22 = cir.const #cir.int<1> : !s32i loc(#loc53)
          %23 = cir.unary(minus, %22) nsw : !s32i, !s32i loc(#loc54)
          cir.call @exit(%23) : (!s32i) -> () extra(#fn_attr1) loc(#loc52)
        } loc(#loc292)
      } loc(#loc290)
      cir.scope {
        %17 = cir.const #cir.int<0> : !s32i loc(#loc57)
        cir.store %17, %5 : !s32i, !cir.ptr<!s32i> loc(#loc294)
        cir.for : cond {
          %18 = cir.load %5 : !cir.ptr<!s32i>, !s32i loc(#loc59)
          %19 = cir.const #cir.int<10> : !s32i loc(#loc60)
          %20 = cir.cmp(lt, %18, %19) : !s32i, !cir.bool loc(#loc295)
          cir.condition(%20) loc(#loc61)
        } body {
          cir.scope {
            %18 = cir.const #cir.int<0> : !s32i loc(#loc63)
            %19 = cir.load %6 : !cir.ptr<!cir.ptr<!s32i>>, !cir.ptr<!s32i> loc(#loc64)
            %20 = cir.load %5 : !cir.ptr<!s32i>, !s32i loc(#loc65)
            %21 = cir.ptr_stride(%19 : !cir.ptr<!s32i>, %20 : !s32i), !cir.ptr<!s32i> loc(#loc66)
            cir.store %18, %21 : !s32i, !cir.ptr<!s32i> loc(#loc297)
          } loc(#loc296)
          cir.yield loc(#loc56)
        } step {
          %18 = cir.load %5 : !cir.ptr<!s32i>, !s32i loc(#loc67)
          %19 = cir.unary(inc, %18) nsw : !s32i, !s32i loc(#loc68)
          cir.store %19, %5 : !s32i, !cir.ptr<!s32i> loc(#loc298)
          cir.yield loc(#loc293)
        } loc(#loc293)
      } loc(#loc293)
      cir.scope {
        %17 = cir.load %0 : !cir.ptr<!s32i>, !s32i loc(#loc71)
        %18 = cir.const #cir.int<0> : !s32i loc(#loc72)
        %19 = cir.cmp(ge, %17, %18) : !s32i, !cir.bool loc(#loc300)
        cir.if %19 {
          %20 = cir.const #cir.int<1> : !s32i loc(#loc76)
          %21 = cir.load %6 : !cir.ptr<!cir.ptr<!s32i>>, !cir.ptr<!s32i> loc(#loc77)
          %22 = cir.load %0 : !cir.ptr<!s32i>, !s32i loc(#loc78)
          %23 = cir.ptr_stride(%21 : !cir.ptr<!s32i>, %22 : !s32i), !cir.ptr<!s32i> loc(#loc79)
          cir.store %20, %23 : !s32i, !cir.ptr<!s32i> loc(#loc302)
          cir.scope {
            %24 = cir.const #cir.int<0> : !s32i loc(#loc82)
            cir.store %24, %5 : !s32i, !cir.ptr<!s32i> loc(#loc304)
            cir.for : cond {
              %25 = cir.load %5 : !cir.ptr<!s32i>, !s32i loc(#loc84)
              %26 = cir.const #cir.int<10> : !s32i loc(#loc85)
              %27 = cir.cmp(lt, %25, %26) : !s32i, !cir.bool loc(#loc305)
              cir.condition(%27) loc(#loc86)
            } body {
              cir.scope {
                %25 = cir.load %6 : !cir.ptr<!cir.ptr<!s32i>>, !cir.ptr<!s32i> loc(#loc88)
                %26 = cir.load %5 : !cir.ptr<!s32i>, !s32i loc(#loc89)
                %27 = cir.ptr_stride(%25 : !cir.ptr<!s32i>, %26 : !s32i), !cir.ptr<!s32i> loc(#loc90)
                %28 = cir.load %27 : !cir.ptr<!s32i>, !s32i loc(#loc88)
                cir.call @printIntLine(%28) : (!s32i) -> () loc(#loc91)
              } loc(#loc306)
              cir.yield loc(#loc81)
            } step {
              %25 = cir.load %5 : !cir.ptr<!s32i>, !s32i loc(#loc92)
              %26 = cir.unary(inc, %25) nsw : !s32i, !s32i loc(#loc93)
              cir.store %26, %5 : !s32i, !cir.ptr<!s32i> loc(#loc307)
              cir.yield loc(#loc303)
            } loc(#loc303)
          } loc(#loc303)
        } else {
          %20 = cir.get_global @".str" : !cir.ptr<!cir.array<!s8i x 32>> loc(#loc23)
          %21 = cir.cast(array_to_ptrdecay, %20 : !cir.ptr<!cir.array<!s8i x 32>>), !cir.ptr<!s8i> loc(#loc23)
          cir.call @printLine(%21) : (!cir.ptr<!s8i>) -> () loc(#loc94)
        } loc(#loc301)
      } loc(#loc299)
      %14 = cir.get_global @free : !cir.ptr<!cir.func<(!cir.ptr<!void>)>> loc(#loc95)
      %15 = cir.load %6 : !cir.ptr<!cir.ptr<!s32i>>, !cir.ptr<!s32i> loc(#loc96)
      %16 = cir.cast(bitcast, %15 : !cir.ptr<!s32i>), !cir.ptr<!void> loc(#loc96)
      cir.call @free(%16) : (!cir.ptr<!void>) -> () extra(#fn_attr1) loc(#loc95)
    } loc(#loc284)
    cir.return loc(#loc27)
  } loc(#loc280)
  cir.func no_proto @CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fscanf_42_good() extra(#fn_attr) {
    %0 = cir.get_global @goodB2G : !cir.ptr<!cir.func<()>> loc(#loc309)
    cir.call %0() : (!cir.ptr<!cir.func<()>>) -> () loc(#loc99)
    %1 = cir.get_global @goodG2B : !cir.ptr<!cir.func<()>> loc(#loc310)
    cir.call %1() : (!cir.ptr<!cir.func<()>>) -> () loc(#loc101)
    cir.return loc(#loc98)
  } loc(#loc308)
  cir.func internal private @goodB2GSource(%arg0: !s32i loc(fused[#loc105, #loc106])) -> !s32i extra(#fn_attr) {
    %0 = cir.alloca !s32i, !cir.ptr<!s32i>, ["data", init] {alignment = 4 : i64} loc(#loc312)
    %1 = cir.alloca !s32i, !cir.ptr<!s32i>, ["__retval"] {alignment = 4 : i64} loc(#loc104)
    cir.store %arg0, %0 : !s32i, !cir.ptr<!s32i> loc(#loc107)
    %2 = cir.get_global @__isoc99_fscanf : !cir.ptr<!cir.func<(!cir.ptr<!ty__IO_FILE>, !cir.ptr<!s8i>, ...) -> !s32i>> loc(#loc108)
    %3 = cir.get_global @stdin : !cir.ptr<!cir.ptr<!ty__IO_FILE>> loc(#loc271)
    %4 = cir.load %3 : !cir.ptr<!cir.ptr<!ty__IO_FILE>>, !cir.ptr<!ty__IO_FILE> loc(#loc109)
    %5 = cir.get_global @".str.1" : !cir.ptr<!cir.array<!s8i x 3>> loc(#loc110)
    %6 = cir.cast(array_to_ptrdecay, %5 : !cir.ptr<!cir.array<!s8i x 3>>), !cir.ptr<!s8i> loc(#loc110)
    %7 = cir.call @__isoc99_fscanf(%4, %6, %0) : (!cir.ptr<!ty__IO_FILE>, !cir.ptr<!s8i>, !cir.ptr<!s32i>) -> !s32i loc(#loc108)
    %8 = cir.load %0 : !cir.ptr<!s32i>, !s32i loc(#loc111)
    cir.store %8, %1 : !s32i, !cir.ptr<!s32i> loc(#loc313)
    %9 = cir.load %1 : !cir.ptr<!s32i>, !s32i loc(#loc313)
    cir.return %9 : !s32i loc(#loc313)
  } loc(#loc311)
  cir.global "private" constant cir_private dsolocal @".str.2" = #cir.const_array<"ERROR: Array index is out-of-bounds\00" : !cir.array<!s8i x 36>> : !cir.array<!s8i x 36> {alignment = 1 : i64} loc(#loc113)
  cir.func no_proto internal private @goodB2G() extra(#fn_attr) {
    %0 = cir.alloca !s32i, !cir.ptr<!s32i>, ["data"] {alignment = 4 : i64} loc(#loc315)
    %1 = cir.const #cir.int<1> : !s32i loc(#loc118)
    %2 = cir.unary(minus, %1) nsw : !s32i, !s32i loc(#loc119)
    cir.store %2, %0 : !s32i, !cir.ptr<!s32i> loc(#loc316)
    %3 = cir.load %0 : !cir.ptr<!s32i>, !s32i loc(#loc121)
    %4 = cir.call @goodB2GSource(%3) : (!s32i) -> !s32i loc(#loc122)
    cir.store %4, %0 : !s32i, !cir.ptr<!s32i> loc(#loc317)
    cir.scope {
      %5 = cir.alloca !s32i, !cir.ptr<!s32i>, ["i"] {alignment = 4 : i64} loc(#loc319)
      %6 = cir.alloca !cir.ptr<!s32i>, !cir.ptr<!cir.ptr<!s32i>>, ["buffer", init] {alignment = 8 : i64} loc(#loc320)
      %7 = cir.get_global @malloc : !cir.ptr<!cir.func<(!u64i) -> !cir.ptr<!void>>> loc(#loc131)
      %8 = cir.const #cir.int<10> : !s32i loc(#loc132)
      %9 = cir.cast(integral, %8 : !s32i), !u64i loc(#loc132)
      %10 = cir.const #cir.int<4> : !u64i loc(#loc321)
      %11 = cir.binop(mul, %9, %10) : !u64i loc(#loc322)
      %12 = cir.call @malloc(%11) : (!u64i) -> !cir.ptr<!void> extra(#fn_attr1) loc(#loc131)
      %13 = cir.cast(bitcast, %12 : !cir.ptr<!void>), !cir.ptr<!s32i> loc(#loc323)
      cir.store %13, %6 : !cir.ptr<!s32i>, !cir.ptr<!cir.ptr<!s32i>> loc(#loc320)
      cir.scope {
        %17 = cir.load %6 : !cir.ptr<!cir.ptr<!s32i>>, !cir.ptr<!s32i> loc(#loc137)
        %18 = cir.const #cir.ptr<null> : !cir.ptr<!void> loc(#loc138)
        %19 = cir.cast(bitcast, %18 : !cir.ptr<!void>), !cir.ptr<!s32i> loc(#loc138)
        %20 = cir.cmp(eq, %17, %19) : !cir.ptr<!s32i>, !cir.bool loc(#loc325)
        cir.if %20 {
          %21 = cir.get_global @exit : !cir.ptr<!cir.func<(!s32i)>> loc(#loc140)
          %22 = cir.const #cir.int<1> : !s32i loc(#loc141)
          %23 = cir.unary(minus, %22) nsw : !s32i, !s32i loc(#loc142)
          cir.call @exit(%23) : (!s32i) -> () extra(#fn_attr1) loc(#loc140)
        } loc(#loc326)
      } loc(#loc324)
      cir.scope {
        %17 = cir.const #cir.int<0> : !s32i loc(#loc145)
        cir.store %17, %5 : !s32i, !cir.ptr<!s32i> loc(#loc328)
        cir.for : cond {
          %18 = cir.load %5 : !cir.ptr<!s32i>, !s32i loc(#loc147)
          %19 = cir.const #cir.int<10> : !s32i loc(#loc148)
          %20 = cir.cmp(lt, %18, %19) : !s32i, !cir.bool loc(#loc329)
          cir.condition(%20) loc(#loc149)
        } body {
          cir.scope {
            %18 = cir.const #cir.int<0> : !s32i loc(#loc151)
            %19 = cir.load %6 : !cir.ptr<!cir.ptr<!s32i>>, !cir.ptr<!s32i> loc(#loc152)
            %20 = cir.load %5 : !cir.ptr<!s32i>, !s32i loc(#loc153)
            %21 = cir.ptr_stride(%19 : !cir.ptr<!s32i>, %20 : !s32i), !cir.ptr<!s32i> loc(#loc154)
            cir.store %18, %21 : !s32i, !cir.ptr<!s32i> loc(#loc331)
          } loc(#loc330)
          cir.yield loc(#loc144)
        } step {
          %18 = cir.load %5 : !cir.ptr<!s32i>, !s32i loc(#loc155)
          %19 = cir.unary(inc, %18) nsw : !s32i, !s32i loc(#loc156)
          cir.store %19, %5 : !s32i, !cir.ptr<!s32i> loc(#loc332)
          cir.yield loc(#loc327)
        } loc(#loc327)
      } loc(#loc327)
      cir.scope {
        %17 = cir.load %0 : !cir.ptr<!s32i>, !s32i loc(#loc159)
        %18 = cir.const #cir.int<0> : !s32i loc(#loc160)
        %19 = cir.cmp(ge, %17, %18) : !s32i, !cir.bool loc(#loc334)
        %20 = cir.ternary(%19, true {
          %21 = cir.load %0 : !cir.ptr<!s32i>, !s32i loc(#loc162)
          %22 = cir.const #cir.int<10> : !s32i loc(#loc163)
          %23 = cir.cmp(lt, %21, %22) : !s32i, !cir.bool loc(#loc335)
          %24 = cir.ternary(%23, true {
            %25 = cir.const #true loc(#loc161)
            cir.yield %25 : !cir.bool loc(#loc161)
          }, false {
            %25 = cir.const #false loc(#loc161)
            cir.yield %25 : !cir.bool loc(#loc161)
          }) : (!cir.bool) -> !cir.bool loc(#loc161)
          cir.yield %24 : !cir.bool loc(#loc161)
        }, false {
          %21 = cir.const #false loc(#loc161)
          cir.yield %21 : !cir.bool loc(#loc161)
        }) : (!cir.bool) -> !cir.bool loc(#loc161)
        cir.if %20 {
          %21 = cir.const #cir.int<1> : !s32i loc(#loc168)
          %22 = cir.load %6 : !cir.ptr<!cir.ptr<!s32i>>, !cir.ptr<!s32i> loc(#loc169)
          %23 = cir.load %0 : !cir.ptr<!s32i>, !s32i loc(#loc170)
          %24 = cir.ptr_stride(%22 : !cir.ptr<!s32i>, %23 : !s32i), !cir.ptr<!s32i> loc(#loc171)
          cir.store %21, %24 : !s32i, !cir.ptr<!s32i> loc(#loc337)
          cir.scope {
            %25 = cir.const #cir.int<0> : !s32i loc(#loc174)
            cir.store %25, %5 : !s32i, !cir.ptr<!s32i> loc(#loc339)
            cir.for : cond {
              %26 = cir.load %5 : !cir.ptr<!s32i>, !s32i loc(#loc176)
              %27 = cir.const #cir.int<10> : !s32i loc(#loc177)
              %28 = cir.cmp(lt, %26, %27) : !s32i, !cir.bool loc(#loc340)
              cir.condition(%28) loc(#loc178)
            } body {
              cir.scope {
                %26 = cir.load %6 : !cir.ptr<!cir.ptr<!s32i>>, !cir.ptr<!s32i> loc(#loc180)
                %27 = cir.load %5 : !cir.ptr<!s32i>, !s32i loc(#loc181)
                %28 = cir.ptr_stride(%26 : !cir.ptr<!s32i>, %27 : !s32i), !cir.ptr<!s32i> loc(#loc182)
                %29 = cir.load %28 : !cir.ptr<!s32i>, !s32i loc(#loc180)
                cir.call @printIntLine(%29) : (!s32i) -> () loc(#loc183)
              } loc(#loc341)
              cir.yield loc(#loc173)
            } step {
              %26 = cir.load %5 : !cir.ptr<!s32i>, !s32i loc(#loc184)
              %27 = cir.unary(inc, %26) nsw : !s32i, !s32i loc(#loc185)
              cir.store %27, %5 : !s32i, !cir.ptr<!s32i> loc(#loc342)
              cir.yield loc(#loc338)
            } loc(#loc338)
          } loc(#loc338)
        } else {
          %21 = cir.get_global @".str.2" : !cir.ptr<!cir.array<!s8i x 36>> loc(#loc113)
          %22 = cir.cast(array_to_ptrdecay, %21 : !cir.ptr<!cir.array<!s8i x 36>>), !cir.ptr<!s8i> loc(#loc113)
          cir.call @printLine(%22) : (!cir.ptr<!s8i>) -> () loc(#loc186)
        } loc(#loc336)
      } loc(#loc333)
      %14 = cir.get_global @free : !cir.ptr<!cir.func<(!cir.ptr<!void>)>> loc(#loc187)
      %15 = cir.load %6 : !cir.ptr<!cir.ptr<!s32i>>, !cir.ptr<!s32i> loc(#loc188)
      %16 = cir.cast(bitcast, %15 : !cir.ptr<!s32i>), !cir.ptr<!void> loc(#loc188)
      cir.call @free(%16) : (!cir.ptr<!void>) -> () extra(#fn_attr1) loc(#loc187)
    } loc(#loc318)
    cir.return loc(#loc115)
  } loc(#loc314)
  cir.func internal private @goodG2BSource(%arg0: !s32i loc(fused[#loc191, #loc192])) -> !s32i extra(#fn_attr) {
    %0 = cir.alloca !s32i, !cir.ptr<!s32i>, ["data", init] {alignment = 4 : i64} loc(#loc344)
    %1 = cir.alloca !s32i, !cir.ptr<!s32i>, ["__retval"] {alignment = 4 : i64} loc(#loc190)
    cir.store %arg0, %0 : !s32i, !cir.ptr<!s32i> loc(#loc193)
    %2 = cir.const #cir.int<7> : !s32i loc(#loc194)
    cir.store %2, %0 : !s32i, !cir.ptr<!s32i> loc(#loc345)
    %3 = cir.load %0 : !cir.ptr<!s32i>, !s32i loc(#loc196)
    cir.store %3, %1 : !s32i, !cir.ptr<!s32i> loc(#loc346)
    %4 = cir.load %1 : !cir.ptr<!s32i>, !s32i loc(#loc346)
    cir.return %4 : !s32i loc(#loc346)
  } loc(#loc343)
  cir.func no_proto internal private @goodG2B() extra(#fn_attr) {
    %0 = cir.alloca !s32i, !cir.ptr<!s32i>, ["data"] {alignment = 4 : i64} loc(#loc348)
    %1 = cir.const #cir.int<1> : !s32i loc(#loc202)
    %2 = cir.unary(minus, %1) nsw : !s32i, !s32i loc(#loc203)
    cir.store %2, %0 : !s32i, !cir.ptr<!s32i> loc(#loc349)
    %3 = cir.load %0 : !cir.ptr<!s32i>, !s32i loc(#loc205)
    %4 = cir.call @goodG2BSource(%3) : (!s32i) -> !s32i loc(#loc206)
    cir.store %4, %0 : !s32i, !cir.ptr<!s32i> loc(#loc350)
    cir.scope {
      %5 = cir.alloca !s32i, !cir.ptr<!s32i>, ["i"] {alignment = 4 : i64} loc(#loc352)
      %6 = cir.alloca !cir.ptr<!s32i>, !cir.ptr<!cir.ptr<!s32i>>, ["buffer", init] {alignment = 8 : i64} loc(#loc353)
      %7 = cir.get_global @malloc : !cir.ptr<!cir.func<(!u64i) -> !cir.ptr<!void>>> loc(#loc215)
      %8 = cir.const #cir.int<10> : !s32i loc(#loc216)
      %9 = cir.cast(integral, %8 : !s32i), !u64i loc(#loc216)
      %10 = cir.const #cir.int<4> : !u64i loc(#loc354)
      %11 = cir.binop(mul, %9, %10) : !u64i loc(#loc355)
      %12 = cir.call @malloc(%11) : (!u64i) -> !cir.ptr<!void> extra(#fn_attr1) loc(#loc215)
      %13 = cir.cast(bitcast, %12 : !cir.ptr<!void>), !cir.ptr<!s32i> loc(#loc356)
      cir.store %13, %6 : !cir.ptr<!s32i>, !cir.ptr<!cir.ptr<!s32i>> loc(#loc353)
      cir.scope {
        %17 = cir.load %6 : !cir.ptr<!cir.ptr<!s32i>>, !cir.ptr<!s32i> loc(#loc221)
        %18 = cir.const #cir.ptr<null> : !cir.ptr<!void> loc(#loc222)
        %19 = cir.cast(bitcast, %18 : !cir.ptr<!void>), !cir.ptr<!s32i> loc(#loc222)
        %20 = cir.cmp(eq, %17, %19) : !cir.ptr<!s32i>, !cir.bool loc(#loc358)
        cir.if %20 {
          %21 = cir.get_global @exit : !cir.ptr<!cir.func<(!s32i)>> loc(#loc224)
          %22 = cir.const #cir.int<1> : !s32i loc(#loc225)
          %23 = cir.unary(minus, %22) nsw : !s32i, !s32i loc(#loc226)
          cir.call @exit(%23) : (!s32i) -> () extra(#fn_attr1) loc(#loc224)
        } loc(#loc359)
      } loc(#loc357)
      cir.scope {
        %17 = cir.const #cir.int<0> : !s32i loc(#loc229)
        cir.store %17, %5 : !s32i, !cir.ptr<!s32i> loc(#loc361)
        cir.for : cond {
          %18 = cir.load %5 : !cir.ptr<!s32i>, !s32i loc(#loc231)
          %19 = cir.const #cir.int<10> : !s32i loc(#loc232)
          %20 = cir.cmp(lt, %18, %19) : !s32i, !cir.bool loc(#loc362)
          cir.condition(%20) loc(#loc233)
        } body {
          cir.scope {
            %18 = cir.const #cir.int<0> : !s32i loc(#loc235)
            %19 = cir.load %6 : !cir.ptr<!cir.ptr<!s32i>>, !cir.ptr<!s32i> loc(#loc236)
            %20 = cir.load %5 : !cir.ptr<!s32i>, !s32i loc(#loc237)
            %21 = cir.ptr_stride(%19 : !cir.ptr<!s32i>, %20 : !s32i), !cir.ptr<!s32i> loc(#loc238)
            cir.store %18, %21 : !s32i, !cir.ptr<!s32i> loc(#loc364)
          } loc(#loc363)
          cir.yield loc(#loc228)
        } step {
          %18 = cir.load %5 : !cir.ptr<!s32i>, !s32i loc(#loc239)
          %19 = cir.unary(inc, %18) nsw : !s32i, !s32i loc(#loc240)
          cir.store %19, %5 : !s32i, !cir.ptr<!s32i> loc(#loc365)
          cir.yield loc(#loc360)
        } loc(#loc360)
      } loc(#loc360)
      cir.scope {
        %17 = cir.load %0 : !cir.ptr<!s32i>, !s32i loc(#loc243)
        %18 = cir.const #cir.int<0> : !s32i loc(#loc244)
        %19 = cir.cmp(ge, %17, %18) : !s32i, !cir.bool loc(#loc367)
        cir.if %19 {
          %20 = cir.const #cir.int<1> : !s32i loc(#loc248)
          %21 = cir.load %6 : !cir.ptr<!cir.ptr<!s32i>>, !cir.ptr<!s32i> loc(#loc249)
          %22 = cir.load %0 : !cir.ptr<!s32i>, !s32i loc(#loc250)
          %23 = cir.ptr_stride(%21 : !cir.ptr<!s32i>, %22 : !s32i), !cir.ptr<!s32i> loc(#loc251)
          cir.store %20, %23 : !s32i, !cir.ptr<!s32i> loc(#loc369)
          cir.scope {
            %24 = cir.const #cir.int<0> : !s32i loc(#loc254)
            cir.store %24, %5 : !s32i, !cir.ptr<!s32i> loc(#loc371)
            cir.for : cond {
              %25 = cir.load %5 : !cir.ptr<!s32i>, !s32i loc(#loc256)
              %26 = cir.const #cir.int<10> : !s32i loc(#loc257)
              %27 = cir.cmp(lt, %25, %26) : !s32i, !cir.bool loc(#loc372)
              cir.condition(%27) loc(#loc258)
            } body {
              cir.scope {
                %25 = cir.load %6 : !cir.ptr<!cir.ptr<!s32i>>, !cir.ptr<!s32i> loc(#loc260)
                %26 = cir.load %5 : !cir.ptr<!s32i>, !s32i loc(#loc261)
                %27 = cir.ptr_stride(%25 : !cir.ptr<!s32i>, %26 : !s32i), !cir.ptr<!s32i> loc(#loc262)
                %28 = cir.load %27 : !cir.ptr<!s32i>, !s32i loc(#loc260)
                cir.call @printIntLine(%28) : (!s32i) -> () loc(#loc263)
              } loc(#loc373)
              cir.yield loc(#loc253)
            } step {
              %25 = cir.load %5 : !cir.ptr<!s32i>, !s32i loc(#loc264)
              %26 = cir.unary(inc, %25) nsw : !s32i, !s32i loc(#loc265)
              cir.store %26, %5 : !s32i, !cir.ptr<!s32i> loc(#loc374)
              cir.yield loc(#loc370)
            } loc(#loc370)
          } loc(#loc370)
        } else {
          %20 = cir.get_global @".str" : !cir.ptr<!cir.array<!s8i x 32>> loc(#loc266)
          %21 = cir.cast(array_to_ptrdecay, %20 : !cir.ptr<!cir.array<!s8i x 32>>), !cir.ptr<!s8i> loc(#loc266)
          cir.call @printLine(%21) : (!cir.ptr<!s8i>) -> () loc(#loc267)
        } loc(#loc368)
      } loc(#loc366)
      %14 = cir.get_global @free : !cir.ptr<!cir.func<(!cir.ptr<!void>)>> loc(#loc268)
      %15 = cir.load %6 : !cir.ptr<!cir.ptr<!s32i>>, !cir.ptr<!s32i> loc(#loc269)
      %16 = cir.cast(bitcast, %15 : !cir.ptr<!s32i>), !cir.ptr<!void> loc(#loc269)
      cir.call @free(%16) : (!cir.ptr<!void>) -> () extra(#fn_attr1) loc(#loc268)
    } loc(#loc351)
    cir.return loc(#loc199)
  } loc(#loc347)
} loc(#loc)
#loc = loc("/workspaces/juliet-c/testcases/CWE122_Heap_Based_Buffer_Overflow/s06/CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fscanf_42.c":0:0)
#loc1 = loc("/usr/include/stdio.h":463:1)
#loc2 = loc("/usr/include/stdio.h":465:33)
#loc3 = loc("/usr/include/stdio.h":149:1)
#loc4 = loc("/usr/include/stdio.h":149:14)
#loc5 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fscanf_42.c":25:19)
#loc6 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fscanf_42.c":22:1)
#loc7 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fscanf_42.c":27:1)
#loc10 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fscanf_42.c":23:1)
#loc11 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fscanf_42.c":25:5)
#loc12 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fscanf_42.c":25:12)
#loc13 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fscanf_42.c":26:12)
#loc14 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fscanf_42.c":26:5)
#loc15 = loc("/usr/include/stdlib.h":672:1)
#loc16 = loc("/usr/include/stdlib.h":672:45)
#loc17 = loc("/usr/include/stdlib.h":756:1)
#loc18 = loc("/usr/include/stdlib.h":756:70)
#loc19 = loc("../../../testcasesupport/std_testcase_io.h":18:1)
#loc20 = loc("../../../testcasesupport/std_testcase_io.h":18:33)
#loc21 = loc("../../../testcasesupport/std_testcase_io.h":14:1)
#loc22 = loc("../../../testcasesupport/std_testcase_io.h":14:33)
#loc23 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fscanf_42.c":57:23)
#loc24 = loc("/usr/include/stdlib.h":687:1)
#loc25 = loc("/usr/include/stdlib.h":687:32)
#loc26 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fscanf_42.c":29:1)
#loc27 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fscanf_42.c":61:1)
#loc28 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fscanf_42.c":31:5)
#loc29 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fscanf_42.c":31:9)
#loc30 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fscanf_42.c":33:13)
#loc31 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fscanf_42.c":33:12)
#loc32 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fscanf_42.c":33:5)
#loc33 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fscanf_42.c":34:22)
#loc34 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fscanf_42.c":34:12)
#loc35 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fscanf_42.c":34:5)
#loc36 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fscanf_42.c":34:26)
#loc37 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fscanf_42.c":35:5)
#loc38 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fscanf_42.c":60:5)
#loc39 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fscanf_42.c":36:9)
#loc40 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fscanf_42.c":36:13)
#loc41 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fscanf_42.c":37:9)
#loc42 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fscanf_42.c":37:54)
#loc43 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fscanf_42.c":37:31)
#loc44 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fscanf_42.c":37:38)
#loc45 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fscanf_42.c":37:43)
#loc46 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fscanf_42.c":37:53)
#loc47 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fscanf_42.c":38:9)
#loc48 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fscanf_42.c":38:39)
#loc49 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fscanf_42.c":38:13)
#loc50 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fscanf_42.c":38:23)
#loc51 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fscanf_42.c":38:29)
#loc52 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fscanf_42.c":38:30)
#loc53 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fscanf_42.c":38:36)
#loc54 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fscanf_42.c":38:35)
#loc55 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fscanf_42.c":40:9)
#loc56 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fscanf_42.c":43:9)
#loc57 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fscanf_42.c":40:18)
#loc58 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fscanf_42.c":40:14)
#loc59 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fscanf_42.c":40:21)
#loc60 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fscanf_42.c":40:25)
#loc61 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fscanf_42.c":40:23)
#loc62 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fscanf_42.c":41:9)
#loc63 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fscanf_42.c":42:25)
#loc64 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fscanf_42.c":42:13)
#loc65 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fscanf_42.c":42:20)
#loc66 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fscanf_42.c":42:21)
#loc67 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fscanf_42.c":40:30)
#loc68 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fscanf_42.c":40:29)
#loc69 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fscanf_42.c":46:9)
#loc70 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fscanf_42.c":58:9)
#loc71 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fscanf_42.c":46:13)
#loc72 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fscanf_42.c":46:21)
#loc73 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fscanf_42.c":47:9)
#loc74 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fscanf_42.c":54:9)
#loc75 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fscanf_42.c":56:9)
#loc76 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fscanf_42.c":48:28)
#loc77 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fscanf_42.c":48:13)
#loc78 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fscanf_42.c":48:20)
#loc79 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fscanf_42.c":48:24)
#loc80 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fscanf_42.c":50:13)
#loc81 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fscanf_42.c":53:13)
#loc82 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fscanf_42.c":50:21)
#loc83 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fscanf_42.c":50:17)
#loc84 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fscanf_42.c":50:24)
#loc85 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fscanf_42.c":50:28)
#loc86 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fscanf_42.c":50:26)
#loc87 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fscanf_42.c":51:13)
#loc88 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fscanf_42.c":52:30)
#loc89 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fscanf_42.c":52:37)
#loc90 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fscanf_42.c":52:38)
#loc91 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fscanf_42.c":52:17)
#loc92 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fscanf_42.c":50:33)
#loc93 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fscanf_42.c":50:32)
#loc94 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fscanf_42.c":57:13)
#loc95 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fscanf_42.c":59:9)
#loc96 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fscanf_42.c":59:14)
#loc97 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fscanf_42.c":151:1)
#loc98 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fscanf_42.c":155:1)
#loc99 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fscanf_42.c":153:5)
#loc100 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fscanf_42.c":153:13)
#loc101 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fscanf_42.c":154:5)
#loc102 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fscanf_42.c":154:13)
#loc103 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fscanf_42.c":111:1)
#loc104 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fscanf_42.c":116:1)
#loc107 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fscanf_42.c":112:1)
#loc108 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fscanf_42.c":114:5)
#loc109 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fscanf_42.c":114:12)
#loc110 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fscanf_42.c":114:19)
#loc111 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fscanf_42.c":115:12)
#loc112 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fscanf_42.c":115:5)
#loc113 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fscanf_42.c":145:23)
#loc114 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fscanf_42.c":118:1)
#loc115 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fscanf_42.c":149:1)
#loc116 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fscanf_42.c":120:5)
#loc117 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fscanf_42.c":120:9)
#loc118 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fscanf_42.c":122:13)
#loc119 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fscanf_42.c":122:12)
#loc120 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fscanf_42.c":122:5)
#loc121 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fscanf_42.c":123:26)
#loc122 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fscanf_42.c":123:12)
#loc123 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fscanf_42.c":123:5)
#loc124 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fscanf_42.c":123:30)
#loc125 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fscanf_42.c":124:5)
#loc126 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fscanf_42.c":148:5)
#loc127 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fscanf_42.c":125:9)
#loc128 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fscanf_42.c":125:13)
#loc129 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fscanf_42.c":126:9)
#loc130 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fscanf_42.c":126:54)
#loc131 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fscanf_42.c":126:31)
#loc132 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fscanf_42.c":126:38)
#loc133 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fscanf_42.c":126:43)
#loc134 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fscanf_42.c":126:53)
#loc135 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fscanf_42.c":127:9)
#loc136 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fscanf_42.c":127:39)
#loc137 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fscanf_42.c":127:13)
#loc138 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fscanf_42.c":127:23)
#loc139 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fscanf_42.c":127:29)
#loc140 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fscanf_42.c":127:30)
#loc141 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fscanf_42.c":127:36)
#loc142 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fscanf_42.c":127:35)
#loc143 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fscanf_42.c":129:9)
#loc144 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fscanf_42.c":132:9)
#loc145 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fscanf_42.c":129:18)
#loc146 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fscanf_42.c":129:14)
#loc147 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fscanf_42.c":129:21)
#loc148 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fscanf_42.c":129:25)
#loc149 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fscanf_42.c":129:23)
#loc150 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fscanf_42.c":130:9)
#loc151 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fscanf_42.c":131:25)
#loc152 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fscanf_42.c":131:13)
#loc153 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fscanf_42.c":131:20)
#loc154 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fscanf_42.c":131:21)
#loc155 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fscanf_42.c":129:30)
#loc156 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fscanf_42.c":129:29)
#loc157 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fscanf_42.c":134:9)
#loc158 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fscanf_42.c":146:9)
#loc159 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fscanf_42.c":134:13)
#loc160 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fscanf_42.c":134:21)
#loc161 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fscanf_42.c":134:23)
#loc162 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fscanf_42.c":134:26)
#loc163 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fscanf_42.c":134:34)
#loc164 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fscanf_42.c":134:36)
#loc165 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fscanf_42.c":135:9)
#loc166 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fscanf_42.c":142:9)
#loc167 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fscanf_42.c":144:9)
#loc168 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fscanf_42.c":136:28)
#loc169 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fscanf_42.c":136:13)
#loc170 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fscanf_42.c":136:20)
#loc171 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fscanf_42.c":136:24)
#loc172 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fscanf_42.c":138:13)
#loc173 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fscanf_42.c":141:13)
#loc174 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fscanf_42.c":138:21)
#loc175 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fscanf_42.c":138:17)
#loc176 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fscanf_42.c":138:24)
#loc177 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fscanf_42.c":138:28)
#loc178 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fscanf_42.c":138:26)
#loc179 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fscanf_42.c":139:13)
#loc180 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fscanf_42.c":140:30)
#loc181 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fscanf_42.c":140:37)
#loc182 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fscanf_42.c":140:38)
#loc183 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fscanf_42.c":140:17)
#loc184 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fscanf_42.c":138:33)
#loc185 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fscanf_42.c":138:32)
#loc186 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fscanf_42.c":145:13)
#loc187 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fscanf_42.c":147:9)
#loc188 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fscanf_42.c":147:14)
#loc189 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fscanf_42.c":68:1)
#loc190 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fscanf_42.c":74:1)
#loc193 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fscanf_42.c":69:1)
#loc194 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fscanf_42.c":72:12)
#loc195 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fscanf_42.c":72:5)
#loc196 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fscanf_42.c":73:12)
#loc197 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fscanf_42.c":73:5)
#loc198 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fscanf_42.c":76:1)
#loc199 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fscanf_42.c":108:1)
#loc200 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fscanf_42.c":78:5)
#loc201 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fscanf_42.c":78:9)
#loc202 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fscanf_42.c":80:13)
#loc203 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fscanf_42.c":80:12)
#loc204 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fscanf_42.c":80:5)
#loc205 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fscanf_42.c":81:26)
#loc206 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fscanf_42.c":81:12)
#loc207 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fscanf_42.c":81:5)
#loc208 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fscanf_42.c":81:30)
#loc209 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fscanf_42.c":82:5)
#loc210 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fscanf_42.c":107:5)
#loc211 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fscanf_42.c":83:9)
#loc212 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fscanf_42.c":83:13)
#loc213 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fscanf_42.c":84:9)
#loc214 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fscanf_42.c":84:54)
#loc215 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fscanf_42.c":84:31)
#loc216 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fscanf_42.c":84:38)
#loc217 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fscanf_42.c":84:43)
#loc218 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fscanf_42.c":84:53)
#loc219 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fscanf_42.c":85:9)
#loc220 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fscanf_42.c":85:39)
#loc221 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fscanf_42.c":85:13)
#loc222 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fscanf_42.c":85:23)
#loc223 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fscanf_42.c":85:29)
#loc224 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fscanf_42.c":85:30)
#loc225 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fscanf_42.c":85:36)
#loc226 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fscanf_42.c":85:35)
#loc227 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fscanf_42.c":87:9)
#loc228 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fscanf_42.c":90:9)
#loc229 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fscanf_42.c":87:18)
#loc230 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fscanf_42.c":87:14)
#loc231 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fscanf_42.c":87:21)
#loc232 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fscanf_42.c":87:25)
#loc233 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fscanf_42.c":87:23)
#loc234 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fscanf_42.c":88:9)
#loc235 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fscanf_42.c":89:25)
#loc236 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fscanf_42.c":89:13)
#loc237 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fscanf_42.c":89:20)
#loc238 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fscanf_42.c":89:21)
#loc239 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fscanf_42.c":87:30)
#loc240 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fscanf_42.c":87:29)
#loc241 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fscanf_42.c":93:9)
#loc242 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fscanf_42.c":105:9)
#loc243 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fscanf_42.c":93:13)
#loc244 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fscanf_42.c":93:21)
#loc245 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fscanf_42.c":94:9)
#loc246 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fscanf_42.c":101:9)
#loc247 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fscanf_42.c":103:9)
#loc248 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fscanf_42.c":95:28)
#loc249 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fscanf_42.c":95:13)
#loc250 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fscanf_42.c":95:20)
#loc251 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fscanf_42.c":95:24)
#loc252 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fscanf_42.c":97:13)
#loc253 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fscanf_42.c":100:13)
#loc254 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fscanf_42.c":97:21)
#loc255 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fscanf_42.c":97:17)
#loc256 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fscanf_42.c":97:24)
#loc257 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fscanf_42.c":97:28)
#loc258 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fscanf_42.c":97:26)
#loc259 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fscanf_42.c":98:13)
#loc260 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fscanf_42.c":99:30)
#loc261 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fscanf_42.c":99:37)
#loc262 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fscanf_42.c":99:38)
#loc263 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fscanf_42.c":99:17)
#loc264 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fscanf_42.c":97:33)
#loc265 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fscanf_42.c":97:32)
#loc266 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fscanf_42.c":104:23)
#loc267 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fscanf_42.c":104:13)
#loc268 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fscanf_42.c":106:9)
#loc269 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fscanf_42.c":106:14)
#loc270 = loc(fused[#loc1, #loc2])
#loc271 = loc(fused[#loc3, #loc4])
#loc272 = loc(fused[#loc6, #loc7])
#loc274 = loc(fused[#loc14, #loc13])
#loc275 = loc(fused[#loc15, #loc16])
#loc276 = loc(fused[#loc17, #loc18])
#loc277 = loc(fused[#loc19, #loc20])
#loc278 = loc(fused[#loc21, #loc22])
#loc279 = loc(fused[#loc24, #loc25])
#loc280 = loc(fused[#loc26, #loc27])
#loc281 = loc(fused[#loc28, #loc29])
#loc282 = loc(fused[#loc32, #loc30])
#loc283 = loc(fused[#loc35, #loc36])
#loc284 = loc(fused[#loc37, #loc38])
#loc285 = loc(fused[#loc39, #loc40])
#loc286 = loc(fused[#loc41, #loc42])
#loc287 = loc(fused[#loc45, #loc46])
#loc288 = loc(fused[#loc44, #loc46])
#loc289 = loc(fused[#loc43, #loc42])
#loc290 = loc(fused[#loc47, #loc48])
#loc291 = loc(fused[#loc49, #loc50])
#loc292 = loc(fused[#loc51, #loc48])
#loc293 = loc(fused[#loc55, #loc56])
#loc294 = loc(fused[#loc58, #loc57])
#loc295 = loc(fused[#loc59, #loc60])
#loc296 = loc(fused[#loc62, #loc56])
#loc297 = loc(fused[#loc64, #loc63])
#loc298 = loc(fused[#loc68, #loc67])
#loc299 = loc(fused[#loc69, #loc70])
#loc300 = loc(fused[#loc71, #loc72])
#loc301 = loc(fused[#loc73, #loc74, #loc75, #loc70])
#loc302 = loc(fused[#loc77, #loc76])
#loc303 = loc(fused[#loc80, #loc81])
#loc304 = loc(fused[#loc83, #loc82])
#loc305 = loc(fused[#loc84, #loc85])
#loc306 = loc(fused[#loc87, #loc81])
#loc307 = loc(fused[#loc93, #loc92])
#loc308 = loc(fused[#loc97, #loc98])
#loc309 = loc(fused[#loc99, #loc100])
#loc310 = loc(fused[#loc101, #loc102])
#loc311 = loc(fused[#loc103, #loc104])
#loc313 = loc(fused[#loc112, #loc111])
#loc314 = loc(fused[#loc114, #loc115])
#loc315 = loc(fused[#loc116, #loc117])
#loc316 = loc(fused[#loc120, #loc118])
#loc317 = loc(fused[#loc123, #loc124])
#loc318 = loc(fused[#loc125, #loc126])
#loc319 = loc(fused[#loc127, #loc128])
#loc320 = loc(fused[#loc129, #loc130])
#loc321 = loc(fused[#loc133, #loc134])
#loc322 = loc(fused[#loc132, #loc134])
#loc323 = loc(fused[#loc131, #loc130])
#loc324 = loc(fused[#loc135, #loc136])
#loc325 = loc(fused[#loc137, #loc138])
#loc326 = loc(fused[#loc139, #loc136])
#loc327 = loc(fused[#loc143, #loc144])
#loc328 = loc(fused[#loc146, #loc145])
#loc329 = loc(fused[#loc147, #loc148])
#loc330 = loc(fused[#loc150, #loc144])
#loc331 = loc(fused[#loc152, #loc151])
#loc332 = loc(fused[#loc156, #loc155])
#loc333 = loc(fused[#loc157, #loc158])
#loc334 = loc(fused[#loc159, #loc160])
#loc335 = loc(fused[#loc162, #loc164])
#loc336 = loc(fused[#loc165, #loc166, #loc167, #loc158])
#loc337 = loc(fused[#loc169, #loc168])
#loc338 = loc(fused[#loc172, #loc173])
#loc339 = loc(fused[#loc175, #loc174])
#loc340 = loc(fused[#loc176, #loc177])
#loc341 = loc(fused[#loc179, #loc173])
#loc342 = loc(fused[#loc185, #loc184])
#loc343 = loc(fused[#loc189, #loc190])
#loc345 = loc(fused[#loc195, #loc194])
#loc346 = loc(fused[#loc197, #loc196])
#loc347 = loc(fused[#loc198, #loc199])
#loc348 = loc(fused[#loc200, #loc201])
#loc349 = loc(fused[#loc204, #loc202])
#loc350 = loc(fused[#loc207, #loc208])
#loc351 = loc(fused[#loc209, #loc210])
#loc352 = loc(fused[#loc211, #loc212])
#loc353 = loc(fused[#loc213, #loc214])
#loc354 = loc(fused[#loc217, #loc218])
#loc355 = loc(fused[#loc216, #loc218])
#loc356 = loc(fused[#loc215, #loc214])
#loc357 = loc(fused[#loc219, #loc220])
#loc358 = loc(fused[#loc221, #loc222])
#loc359 = loc(fused[#loc223, #loc220])
#loc360 = loc(fused[#loc227, #loc228])
#loc361 = loc(fused[#loc230, #loc229])
#loc362 = loc(fused[#loc231, #loc232])
#loc363 = loc(fused[#loc234, #loc228])
#loc364 = loc(fused[#loc236, #loc235])
#loc365 = loc(fused[#loc240, #loc239])
#loc366 = loc(fused[#loc241, #loc242])
#loc367 = loc(fused[#loc243, #loc244])
#loc368 = loc(fused[#loc245, #loc246, #loc247, #loc242])
#loc369 = loc(fused[#loc249, #loc248])
#loc370 = loc(fused[#loc252, #loc253])
#loc371 = loc(fused[#loc255, #loc254])
#loc372 = loc(fused[#loc256, #loc257])
#loc373 = loc(fused[#loc259, #loc253])
#loc374 = loc(fused[#loc265, #loc264])
