!s32i = !cir.int<s, 32>
!s64i = !cir.int<s, 64>
!s8i = !cir.int<s, 8>
!u16i = !cir.int<u, 16>
!u32i = !cir.int<u, 32>
!u64i = !cir.int<u, 64>
!u8i = !cir.int<u, 8>
!void = !cir.void
#false = #cir.bool<false> : !cir.bool
#fn_attr = #cir<extra({nothrow = #cir.nothrow})>
#fn_attr1 = #cir<extra({inline = #cir.inline<no>, nothrow = #cir.nothrow, optnone = #cir.optnone, uwtable = #cir.uwtable<async>})>
#true = #cir.bool<true> : !cir.bool
!ty_in_addr = !cir.record<struct "in_addr" {!u32i} #cir.record.decl.ast>
!ty_sockaddr = !cir.record<struct "sockaddr" {!u16i, !cir.array<!s8i x 14>} #cir.record.decl.ast>
!ty_sockaddr_in = !cir.record<struct "sockaddr_in" {!u16i, !u16i, !ty_in_addr, !cir.array<!u8i x 8>}>
module @"/workspaces/juliet-c/testcases/CWE122_Heap_Based_Buffer_Overflow/s06/CWE122_Heap_Based_Buffer_Overflow__c_CWE129_listen_socket_65a.c" attributes {cir.lang = #cir.lang<c>, cir.sob = #cir.signed_overflow_behavior<undefined>, cir.triple = "x86_64-unknown-linux-gnu", cir.type_size_info = #cir.type_size_info<char = 8, int = 32, size_t = 64>, cir.uwtable = #cir.uwtable<async>, dlti.dl_spec = #dlti.dl_spec<i16 = dense<16> : vector<2xi64>, i8 = dense<8> : vector<2xi64>, i32 = dense<32> : vector<2xi64>, !llvm.ptr<270> = dense<32> : vector<4xi64>, f16 = dense<16> : vector<2xi64>, f64 = dense<64> : vector<2xi64>, f128 = dense<128> : vector<2xi64>, !llvm.ptr<271> = dense<32> : vector<4xi64>, !llvm.ptr<272> = dense<64> : vector<4xi64>, i64 = dense<64> : vector<2xi64>, i128 = dense<128> : vector<2xi64>, f80 = dense<128> : vector<2xi64>, i1 = dense<8> : vector<2xi64>, !llvm.ptr = dense<64> : vector<4xi64>, "dlti.mangling_mode" = "e", "dlti.stack_alignment" = 128 : i64, "dlti.endianness" = "little">} {
  cir.func private @CWE122_Heap_Based_Buffer_Overflow__c_CWE129_listen_socket_65b_badSink(!s32i) loc(#loc294)
  cir.func private @socket(!s32i, !s32i, !s32i) -> !s32i extra(#fn_attr) loc(#loc295)
  cir.func private @htons(!u16i) -> !u16i extra(#fn_attr) loc(#loc296)
  cir.func private @bind(!s32i, !cir.ptr<!ty_sockaddr>, !u32i) -> !s32i extra(#fn_attr) loc(#loc297)
  cir.func private @listen(!s32i, !s32i) -> !s32i extra(#fn_attr) loc(#loc298)
  cir.func private @accept(!s32i, !cir.ptr<!ty_sockaddr>, !cir.ptr<!u32i>) -> !s32i loc(#loc299)
  cir.func private @recv(!s32i, !cir.ptr<!void>, !u64i, !s32i) -> !s64i loc(#loc300)
  cir.func private @atoi(!cir.ptr<!s8i>) -> !s32i extra(#fn_attr) loc(#loc301)
  cir.func private @close(!s32i) -> !s32i loc(#loc302)
  cir.func no_proto @CWE122_Heap_Based_Buffer_Overflow__c_CWE129_listen_socket_65_bad() extra(#fn_attr1) {
    %0 = cir.alloca !s32i, !cir.ptr<!s32i>, ["data"] {alignment = 4 : i64} loc(#loc304)
    %1 = cir.alloca !cir.ptr<!cir.func<(!s32i)>>, !cir.ptr<!cir.ptr<!cir.func<(!s32i)>>>, ["funcPtr", init] {alignment = 8 : i64} loc(#loc305)
    %2 = cir.get_global @CWE122_Heap_Based_Buffer_Overflow__c_CWE129_listen_socket_65b_badSink : !cir.ptr<!cir.func<(!s32i)>> loc(#loc24)
    cir.store %2, %1 : !cir.ptr<!cir.func<(!s32i)>>, !cir.ptr<!cir.ptr<!cir.func<(!s32i)>>> loc(#loc305)
    %3 = cir.const #cir.int<1> : !s32i loc(#loc25)
    %4 = cir.unary(minus, %3) nsw : !s32i, !s32i loc(#loc26)
    cir.store %4, %0 : !s32i, !cir.ptr<!s32i> loc(#loc306)
    cir.scope {
      %7 = cir.alloca !s32i, !cir.ptr<!s32i>, ["recvResult"] {alignment = 4 : i64} loc(#loc308)
      %8 = cir.alloca !ty_sockaddr_in, !cir.ptr<!ty_sockaddr_in>, ["service"] {alignment = 4 : i64} loc(#loc309)
      %9 = cir.alloca !s32i, !cir.ptr<!s32i>, ["listenSocket", init] {alignment = 4 : i64} loc(#loc310)
      %10 = cir.alloca !s32i, !cir.ptr<!s32i>, ["acceptSocket", init] {alignment = 4 : i64} loc(#loc311)
      %11 = cir.alloca !cir.array<!s8i x 14>, !cir.ptr<!cir.array<!s8i x 14>>, ["inputBuffer"] {alignment = 1 : i64} loc(#loc312)
      %12 = cir.const #cir.int<1> : !s32i loc(#loc35)
      %13 = cir.unary(minus, %12) nsw : !s32i, !s32i loc(#loc35)
      cir.store %13, %9 : !s32i, !cir.ptr<!s32i> loc(#loc310)
      %14 = cir.const #cir.int<1> : !s32i loc(#loc37)
      %15 = cir.unary(minus, %14) nsw : !s32i, !s32i loc(#loc37)
      cir.store %15, %10 : !s32i, !cir.ptr<!s32i> loc(#loc311)
      cir.scope {
        cir.do {
          cir.scope {
            %16 = cir.const #cir.int<2> : !s32i loc(#loc44)
            %17 = cir.const #cir.int<1> : !s32i loc(#loc45)
            %18 = cir.const #cir.int<6> : !s32i loc(#loc46)
            %19 = cir.call @socket(%16, %17, %18) : (!s32i, !s32i, !s32i) -> !s32i extra(#fn_attr) loc(#loc47)
            cir.store %19, %9 : !s32i, !cir.ptr<!s32i> loc(#loc315)
            cir.scope {
              %61 = cir.load %9 : !cir.ptr<!s32i>, !s32i loc(#loc52)
              %62 = cir.const #cir.int<1> : !s32i loc(#loc53)
              %63 = cir.unary(minus, %62) nsw : !s32i, !s32i loc(#loc53)
              %64 = cir.cmp(eq, %61, %63) : !s32i, !cir.bool loc(#loc317)
              cir.if %64 {
                cir.break loc(#loc55)
              } loc(#loc318)
            } loc(#loc316)
            %20 = cir.cast(bitcast, %8 : !cir.ptr<!ty_sockaddr_in>), !cir.ptr<!void> loc(#loc319)
            %21 = cir.const #cir.int<0> : !s32i loc(#loc58)
            %22 = cir.const #cir.int<16> : !u64i loc(#loc320)
            cir.libc.memset %22 bytes from %20 set to %21 : !cir.ptr<!void>, !s32i, !u64i loc(#loc321)
            %23 = cir.const #cir.int<2> : !s32i loc(#loc63)
            %24 = cir.cast(integral, %23 : !s32i), !u16i loc(#loc63)
            %25 = cir.get_member %8[0] {name = "sin_family"} : !cir.ptr<!ty_sockaddr_in> -> !cir.ptr<!u16i> loc(#loc64)
            cir.store %24, %25 : !u16i, !cir.ptr<!u16i> loc(#loc322)
            %26 = cir.const #cir.int<0> : !s32i loc(#loc66)
            %27 = cir.cast(integral, %26 : !s32i), !u32i loc(#loc66)
            %28 = cir.get_member %8[2] {name = "sin_addr"} : !cir.ptr<!ty_sockaddr_in> -> !cir.ptr<!ty_in_addr> loc(#loc67)
            %29 = cir.get_member %28[0] {name = "s_addr"} : !cir.ptr<!ty_in_addr> -> !cir.ptr<!u32i> loc(#loc68)
            cir.store %27, %29 : !u32i, !cir.ptr<!u32i> loc(#loc323)
            %30 = cir.const #cir.int<27015> : !s32i loc(#loc70)
            %31 = cir.cast(integral, %30 : !s32i), !u16i loc(#loc70)
            %32 = cir.call @htons(%31) : (!u16i) -> !u16i side_effect(const) extra(#fn_attr) loc(#loc71)
            %33 = cir.get_member %8[1] {name = "sin_port"} : !cir.ptr<!ty_sockaddr_in> -> !cir.ptr<!u16i> loc(#loc72)
            cir.store %32, %33 : !u16i, !cir.ptr<!u16i> loc(#loc324)
            cir.scope {
              %61 = cir.load %9 : !cir.ptr<!s32i>, !s32i loc(#loc77)
              %62 = cir.cast(bitcast, %8 : !cir.ptr<!ty_sockaddr_in>), !cir.ptr<!ty_sockaddr> loc(#loc326)
              %63 = cir.const #cir.int<16> : !u64i loc(#loc327)
              %64 = cir.cast(integral, %63 : !u64i), !u32i loc(#loc327)
              %65 = cir.call @bind(%61, %62, %64) : (!s32i, !cir.ptr<!ty_sockaddr>, !u32i) -> !s32i extra(#fn_attr) loc(#loc82)
              %66 = cir.const #cir.int<1> : !s32i loc(#loc83)
              %67 = cir.unary(minus, %66) nsw : !s32i, !s32i loc(#loc83)
              %68 = cir.cmp(eq, %65, %67) : !s32i, !cir.bool loc(#loc328)
              cir.if %68 {
                cir.break loc(#loc85)
              } loc(#loc329)
            } loc(#loc325)
            cir.scope {
              %61 = cir.load %9 : !cir.ptr<!s32i>, !s32i loc(#loc88)
              %62 = cir.const #cir.int<5> : !s32i loc(#loc89)
              %63 = cir.call @listen(%61, %62) : (!s32i, !s32i) -> !s32i extra(#fn_attr) loc(#loc90)
              %64 = cir.const #cir.int<1> : !s32i loc(#loc91)
              %65 = cir.unary(minus, %64) nsw : !s32i, !s32i loc(#loc91)
              %66 = cir.cmp(eq, %63, %65) : !s32i, !cir.bool loc(#loc331)
              cir.if %66 {
                cir.break loc(#loc93)
              } loc(#loc332)
            } loc(#loc330)
            %34 = cir.load %9 : !cir.ptr<!s32i>, !s32i loc(#loc94)
            %35 = cir.const #cir.ptr<null> : !cir.ptr<!ty_sockaddr> loc(#loc95)
            %36 = cir.const #cir.ptr<null> : !cir.ptr<!u32i> loc(#loc96)
            %37 = cir.call @accept(%34, %35, %36) : (!s32i, !cir.ptr<!ty_sockaddr>, !cir.ptr<!u32i>) -> !s32i loc(#loc97)
            cir.store %37, %10 : !s32i, !cir.ptr<!s32i> loc(#loc333)
            cir.scope {
              %61 = cir.load %10 : !cir.ptr<!s32i>, !s32i loc(#loc102)
              %62 = cir.const #cir.int<1> : !s32i loc(#loc103)
              %63 = cir.unary(minus, %62) nsw : !s32i, !s32i loc(#loc103)
              %64 = cir.cmp(eq, %61, %63) : !s32i, !cir.bool loc(#loc335)
              cir.if %64 {
                cir.break loc(#loc105)
              } loc(#loc336)
            } loc(#loc334)
            %38 = cir.load %10 : !cir.ptr<!s32i>, !s32i loc(#loc106)
            %39 = cir.cast(array_to_ptrdecay, %11 : !cir.ptr<!cir.array<!s8i x 14>>), !cir.ptr<!s8i> loc(#loc107)
            %40 = cir.cast(bitcast, %39 : !cir.ptr<!s8i>), !cir.ptr<!void> loc(#loc107)
            %41 = cir.const #cir.int<3> : !s32i loc(#loc108)
            %42 = cir.cast(integral, %41 : !s32i), !u64i loc(#loc108)
            %43 = cir.const #cir.int<4> : !u64i loc(#loc108)
            %44 = cir.binop(mul, %42, %43) : !u64i loc(#loc108)
            %45 = cir.const #cir.int<2> : !s32i loc(#loc108)
            %46 = cir.cast(integral, %45 : !s32i), !u64i loc(#loc108)
            %47 = cir.binop(add, %44, %46) : !u64i loc(#loc108)
            %48 = cir.const #cir.int<1> : !s32i loc(#loc109)
            %49 = cir.cast(integral, %48 : !s32i), !u64i loc(#loc109)
            %50 = cir.binop(sub, %47, %49) : !u64i loc(#loc337)
            %51 = cir.const #cir.int<0> : !s32i loc(#loc110)
            %52 = cir.call @recv(%38, %40, %50, %51) : (!s32i, !cir.ptr<!void>, !u64i, !s32i) -> !s64i loc(#loc111)
            %53 = cir.cast(integral, %52 : !s64i), !s32i loc(#loc111)
            cir.store %53, %7 : !s32i, !cir.ptr<!s32i> loc(#loc338)
            cir.scope {
              %61 = cir.load %7 : !cir.ptr<!s32i>, !s32i loc(#loc116)
              %62 = cir.const #cir.int<1> : !s32i loc(#loc117)
              %63 = cir.unary(minus, %62) nsw : !s32i, !s32i loc(#loc117)
              %64 = cir.cmp(eq, %61, %63) : !s32i, !cir.bool loc(#loc340)
              %65 = cir.ternary(%64, true {
                %66 = cir.const #true loc(#loc118)
                cir.yield %66 : !cir.bool loc(#loc118)
              }, false {
                %66 = cir.load %7 : !cir.ptr<!s32i>, !s32i loc(#loc119)
                %67 = cir.const #cir.int<0> : !s32i loc(#loc120)
                %68 = cir.cmp(eq, %66, %67) : !s32i, !cir.bool loc(#loc341)
                %69 = cir.ternary(%68, true {
                  %70 = cir.const #true loc(#loc118)
                  cir.yield %70 : !cir.bool loc(#loc118)
                }, false {
                  %70 = cir.const #false loc(#loc118)
                  cir.yield %70 : !cir.bool loc(#loc118)
                }) : (!cir.bool) -> !cir.bool loc(#loc118)
                cir.yield %69 : !cir.bool loc(#loc118)
              }) : (!cir.bool) -> !cir.bool loc(#loc118)
              cir.if %65 {
                cir.break loc(#loc122)
              } loc(#loc342)
            } loc(#loc339)
            %54 = cir.const #cir.int<0> : !s32i loc(#loc123)
            %55 = cir.cast(integral, %54 : !s32i), !s8i loc(#loc123)
            %56 = cir.load %7 : !cir.ptr<!s32i>, !s32i loc(#loc124)
            %57 = cir.cast(array_to_ptrdecay, %11 : !cir.ptr<!cir.array<!s8i x 14>>), !cir.ptr<!s8i> loc(#loc125)
            %58 = cir.ptr_stride(%57 : !cir.ptr<!s8i>, %56 : !s32i), !cir.ptr<!s8i> loc(#loc125)
            cir.store %55, %58 : !s8i, !cir.ptr<!s8i> loc(#loc343)
            %59 = cir.cast(array_to_ptrdecay, %11 : !cir.ptr<!cir.array<!s8i x 14>>), !cir.ptr<!s8i> loc(#loc126)
            %60 = cir.call @atoi(%59) : (!cir.ptr<!s8i>) -> !s32i side_effect(pure) extra(#fn_attr) loc(#loc127)
            cir.store %60, %0 : !s32i, !cir.ptr<!s32i> loc(#loc344)
          } loc(#loc314)
          cir.yield loc(#loc41)
        } while {
          %16 = cir.const #cir.int<0> : !s32i loc(#loc130)
          %17 = cir.cast(int_to_bool, %16 : !s32i), !cir.bool loc(#loc130)
          cir.condition(%17) loc(#loc130)
        } loc(#loc313)
      } loc(#loc313)
      cir.scope {
        %16 = cir.load %9 : !cir.ptr<!s32i>, !s32i loc(#loc133)
        %17 = cir.const #cir.int<1> : !s32i loc(#loc134)
        %18 = cir.unary(minus, %17) nsw : !s32i, !s32i loc(#loc134)
        %19 = cir.cmp(ne, %16, %18) : !s32i, !cir.bool loc(#loc346)
        cir.if %19 {
          %20 = cir.load %9 : !cir.ptr<!s32i>, !s32i loc(#loc136)
          %21 = cir.call @close(%20) : (!s32i) -> !s32i loc(#loc137)
        } loc(#loc347)
      } loc(#loc345)
      cir.scope {
        %16 = cir.load %10 : !cir.ptr<!s32i>, !s32i loc(#loc140)
        %17 = cir.const #cir.int<1> : !s32i loc(#loc141)
        %18 = cir.unary(minus, %17) nsw : !s32i, !s32i loc(#loc141)
        %19 = cir.cmp(ne, %16, %18) : !s32i, !cir.bool loc(#loc349)
        cir.if %19 {
          %20 = cir.load %10 : !cir.ptr<!s32i>, !s32i loc(#loc143)
          %21 = cir.call @close(%20) : (!s32i) -> !s32i loc(#loc144)
        } loc(#loc350)
      } loc(#loc348)
    } loc(#loc307)
    %5 = cir.load %1 : !cir.ptr<!cir.ptr<!cir.func<(!s32i)>>>, !cir.ptr<!cir.func<(!s32i)>> loc(#loc145)
    %6 = cir.load %0 : !cir.ptr<!s32i>, !s32i loc(#loc146)
    cir.call %5(%6) : (!cir.ptr<!cir.func<(!s32i)>>, !s32i) -> () loc(#loc145)
    cir.return loc(#loc20)
  } loc(#loc303)
  cir.func no_proto @CWE122_Heap_Based_Buffer_Overflow__c_CWE129_listen_socket_65_good() extra(#fn_attr1) {
    %0 = cir.get_global @goodG2B : !cir.ptr<!cir.func<()>> loc(#loc352)
    cir.call %0() : (!cir.ptr<!cir.func<()>>) -> () loc(#loc149)
    %1 = cir.get_global @goodB2G : !cir.ptr<!cir.func<()>> loc(#loc353)
    cir.call %1() : (!cir.ptr<!cir.func<()>>) -> () loc(#loc151)
    cir.return loc(#loc148)
  } loc(#loc351)
  cir.func private @CWE122_Heap_Based_Buffer_Overflow__c_CWE129_listen_socket_65b_goodG2BSink(!s32i) loc(#loc354)
  cir.func no_proto internal private @goodG2B() extra(#fn_attr1) {
    %0 = cir.alloca !s32i, !cir.ptr<!s32i>, ["data"] {alignment = 4 : i64} loc(#loc356)
    %1 = cir.alloca !cir.ptr<!cir.func<(!s32i)>>, !cir.ptr<!cir.ptr<!cir.func<(!s32i)>>>, ["funcPtr", init] {alignment = 8 : i64} loc(#loc357)
    %2 = cir.get_global @CWE122_Heap_Based_Buffer_Overflow__c_CWE129_listen_socket_65b_goodG2BSink : !cir.ptr<!cir.func<(!s32i)>> loc(#loc160)
    cir.store %2, %1 : !cir.ptr<!cir.func<(!s32i)>>, !cir.ptr<!cir.ptr<!cir.func<(!s32i)>>> loc(#loc357)
    %3 = cir.const #cir.int<1> : !s32i loc(#loc161)
    %4 = cir.unary(minus, %3) nsw : !s32i, !s32i loc(#loc162)
    cir.store %4, %0 : !s32i, !cir.ptr<!s32i> loc(#loc358)
    %5 = cir.const #cir.int<7> : !s32i loc(#loc164)
    cir.store %5, %0 : !s32i, !cir.ptr<!s32i> loc(#loc359)
    %6 = cir.load %1 : !cir.ptr<!cir.ptr<!cir.func<(!s32i)>>>, !cir.ptr<!cir.func<(!s32i)>> loc(#loc166)
    %7 = cir.load %0 : !cir.ptr<!s32i>, !s32i loc(#loc167)
    cir.call %6(%7) : (!cir.ptr<!cir.func<(!s32i)>>, !s32i) -> () loc(#loc166)
    cir.return loc(#loc156)
  } loc(#loc355)
  cir.func private @CWE122_Heap_Based_Buffer_Overflow__c_CWE129_listen_socket_65b_goodB2GSink(!s32i) loc(#loc360)
  cir.func no_proto internal private @goodB2G() extra(#fn_attr1) {
    %0 = cir.alloca !s32i, !cir.ptr<!s32i>, ["data"] {alignment = 4 : i64} loc(#loc362)
    %1 = cir.alloca !cir.ptr<!cir.func<(!s32i)>>, !cir.ptr<!cir.ptr<!cir.func<(!s32i)>>>, ["funcPtr", init] {alignment = 8 : i64} loc(#loc363)
    %2 = cir.get_global @CWE122_Heap_Based_Buffer_Overflow__c_CWE129_listen_socket_65b_goodB2GSink : !cir.ptr<!cir.func<(!s32i)>> loc(#loc175)
    cir.store %2, %1 : !cir.ptr<!cir.func<(!s32i)>>, !cir.ptr<!cir.ptr<!cir.func<(!s32i)>>> loc(#loc363)
    %3 = cir.const #cir.int<1> : !s32i loc(#loc176)
    %4 = cir.unary(minus, %3) nsw : !s32i, !s32i loc(#loc177)
    cir.store %4, %0 : !s32i, !cir.ptr<!s32i> loc(#loc364)
    cir.scope {
      %7 = cir.alloca !s32i, !cir.ptr<!s32i>, ["recvResult"] {alignment = 4 : i64} loc(#loc366)
      %8 = cir.alloca !ty_sockaddr_in, !cir.ptr<!ty_sockaddr_in>, ["service"] {alignment = 4 : i64} loc(#loc367)
      %9 = cir.alloca !s32i, !cir.ptr<!s32i>, ["listenSocket", init] {alignment = 4 : i64} loc(#loc368)
      %10 = cir.alloca !s32i, !cir.ptr<!s32i>, ["acceptSocket", init] {alignment = 4 : i64} loc(#loc369)
      %11 = cir.alloca !cir.array<!s8i x 14>, !cir.ptr<!cir.array<!s8i x 14>>, ["inputBuffer"] {alignment = 1 : i64} loc(#loc370)
      %12 = cir.const #cir.int<1> : !s32i loc(#loc186)
      %13 = cir.unary(minus, %12) nsw : !s32i, !s32i loc(#loc186)
      cir.store %13, %9 : !s32i, !cir.ptr<!s32i> loc(#loc368)
      %14 = cir.const #cir.int<1> : !s32i loc(#loc188)
      %15 = cir.unary(minus, %14) nsw : !s32i, !s32i loc(#loc188)
      cir.store %15, %10 : !s32i, !cir.ptr<!s32i> loc(#loc369)
      cir.scope {
        cir.do {
          cir.scope {
            %16 = cir.const #cir.int<2> : !s32i loc(#loc195)
            %17 = cir.const #cir.int<1> : !s32i loc(#loc196)
            %18 = cir.const #cir.int<6> : !s32i loc(#loc197)
            %19 = cir.call @socket(%16, %17, %18) : (!s32i, !s32i, !s32i) -> !s32i extra(#fn_attr) loc(#loc198)
            cir.store %19, %9 : !s32i, !cir.ptr<!s32i> loc(#loc373)
            cir.scope {
              %61 = cir.load %9 : !cir.ptr<!s32i>, !s32i loc(#loc203)
              %62 = cir.const #cir.int<1> : !s32i loc(#loc204)
              %63 = cir.unary(minus, %62) nsw : !s32i, !s32i loc(#loc204)
              %64 = cir.cmp(eq, %61, %63) : !s32i, !cir.bool loc(#loc375)
              cir.if %64 {
                cir.break loc(#loc206)
              } loc(#loc376)
            } loc(#loc374)
            %20 = cir.cast(bitcast, %8 : !cir.ptr<!ty_sockaddr_in>), !cir.ptr<!void> loc(#loc377)
            %21 = cir.const #cir.int<0> : !s32i loc(#loc209)
            %22 = cir.const #cir.int<16> : !u64i loc(#loc378)
            cir.libc.memset %22 bytes from %20 set to %21 : !cir.ptr<!void>, !s32i, !u64i loc(#loc379)
            %23 = cir.const #cir.int<2> : !s32i loc(#loc214)
            %24 = cir.cast(integral, %23 : !s32i), !u16i loc(#loc214)
            %25 = cir.get_member %8[0] {name = "sin_family"} : !cir.ptr<!ty_sockaddr_in> -> !cir.ptr<!u16i> loc(#loc64)
            cir.store %24, %25 : !u16i, !cir.ptr<!u16i> loc(#loc380)
            %26 = cir.const #cir.int<0> : !s32i loc(#loc216)
            %27 = cir.cast(integral, %26 : !s32i), !u32i loc(#loc216)
            %28 = cir.get_member %8[2] {name = "sin_addr"} : !cir.ptr<!ty_sockaddr_in> -> !cir.ptr<!ty_in_addr> loc(#loc67)
            %29 = cir.get_member %28[0] {name = "s_addr"} : !cir.ptr<!ty_in_addr> -> !cir.ptr<!u32i> loc(#loc68)
            cir.store %27, %29 : !u32i, !cir.ptr<!u32i> loc(#loc381)
            %30 = cir.const #cir.int<27015> : !s32i loc(#loc218)
            %31 = cir.cast(integral, %30 : !s32i), !u16i loc(#loc218)
            %32 = cir.call @htons(%31) : (!u16i) -> !u16i side_effect(const) extra(#fn_attr) loc(#loc219)
            %33 = cir.get_member %8[1] {name = "sin_port"} : !cir.ptr<!ty_sockaddr_in> -> !cir.ptr<!u16i> loc(#loc72)
            cir.store %32, %33 : !u16i, !cir.ptr<!u16i> loc(#loc382)
            cir.scope {
              %61 = cir.load %9 : !cir.ptr<!s32i>, !s32i loc(#loc224)
              %62 = cir.cast(bitcast, %8 : !cir.ptr<!ty_sockaddr_in>), !cir.ptr<!ty_sockaddr> loc(#loc384)
              %63 = cir.const #cir.int<16> : !u64i loc(#loc385)
              %64 = cir.cast(integral, %63 : !u64i), !u32i loc(#loc385)
              %65 = cir.call @bind(%61, %62, %64) : (!s32i, !cir.ptr<!ty_sockaddr>, !u32i) -> !s32i extra(#fn_attr) loc(#loc229)
              %66 = cir.const #cir.int<1> : !s32i loc(#loc230)
              %67 = cir.unary(minus, %66) nsw : !s32i, !s32i loc(#loc230)
              %68 = cir.cmp(eq, %65, %67) : !s32i, !cir.bool loc(#loc386)
              cir.if %68 {
                cir.break loc(#loc232)
              } loc(#loc387)
            } loc(#loc383)
            cir.scope {
              %61 = cir.load %9 : !cir.ptr<!s32i>, !s32i loc(#loc235)
              %62 = cir.const #cir.int<5> : !s32i loc(#loc236)
              %63 = cir.call @listen(%61, %62) : (!s32i, !s32i) -> !s32i extra(#fn_attr) loc(#loc237)
              %64 = cir.const #cir.int<1> : !s32i loc(#loc238)
              %65 = cir.unary(minus, %64) nsw : !s32i, !s32i loc(#loc238)
              %66 = cir.cmp(eq, %63, %65) : !s32i, !cir.bool loc(#loc389)
              cir.if %66 {
                cir.break loc(#loc240)
              } loc(#loc390)
            } loc(#loc388)
            %34 = cir.load %9 : !cir.ptr<!s32i>, !s32i loc(#loc241)
            %35 = cir.const #cir.ptr<null> : !cir.ptr<!ty_sockaddr> loc(#loc242)
            %36 = cir.const #cir.ptr<null> : !cir.ptr<!u32i> loc(#loc243)
            %37 = cir.call @accept(%34, %35, %36) : (!s32i, !cir.ptr<!ty_sockaddr>, !cir.ptr<!u32i>) -> !s32i loc(#loc244)
            cir.store %37, %10 : !s32i, !cir.ptr<!s32i> loc(#loc391)
            cir.scope {
              %61 = cir.load %10 : !cir.ptr<!s32i>, !s32i loc(#loc249)
              %62 = cir.const #cir.int<1> : !s32i loc(#loc250)
              %63 = cir.unary(minus, %62) nsw : !s32i, !s32i loc(#loc250)
              %64 = cir.cmp(eq, %61, %63) : !s32i, !cir.bool loc(#loc393)
              cir.if %64 {
                cir.break loc(#loc252)
              } loc(#loc394)
            } loc(#loc392)
            %38 = cir.load %10 : !cir.ptr<!s32i>, !s32i loc(#loc253)
            %39 = cir.cast(array_to_ptrdecay, %11 : !cir.ptr<!cir.array<!s8i x 14>>), !cir.ptr<!s8i> loc(#loc254)
            %40 = cir.cast(bitcast, %39 : !cir.ptr<!s8i>), !cir.ptr<!void> loc(#loc254)
            %41 = cir.const #cir.int<3> : !s32i loc(#loc255)
            %42 = cir.cast(integral, %41 : !s32i), !u64i loc(#loc255)
            %43 = cir.const #cir.int<4> : !u64i loc(#loc255)
            %44 = cir.binop(mul, %42, %43) : !u64i loc(#loc255)
            %45 = cir.const #cir.int<2> : !s32i loc(#loc255)
            %46 = cir.cast(integral, %45 : !s32i), !u64i loc(#loc255)
            %47 = cir.binop(add, %44, %46) : !u64i loc(#loc255)
            %48 = cir.const #cir.int<1> : !s32i loc(#loc256)
            %49 = cir.cast(integral, %48 : !s32i), !u64i loc(#loc256)
            %50 = cir.binop(sub, %47, %49) : !u64i loc(#loc395)
            %51 = cir.const #cir.int<0> : !s32i loc(#loc257)
            %52 = cir.call @recv(%38, %40, %50, %51) : (!s32i, !cir.ptr<!void>, !u64i, !s32i) -> !s64i loc(#loc258)
            %53 = cir.cast(integral, %52 : !s64i), !s32i loc(#loc258)
            cir.store %53, %7 : !s32i, !cir.ptr<!s32i> loc(#loc396)
            cir.scope {
              %61 = cir.load %7 : !cir.ptr<!s32i>, !s32i loc(#loc263)
              %62 = cir.const #cir.int<1> : !s32i loc(#loc264)
              %63 = cir.unary(minus, %62) nsw : !s32i, !s32i loc(#loc264)
              %64 = cir.cmp(eq, %61, %63) : !s32i, !cir.bool loc(#loc398)
              %65 = cir.ternary(%64, true {
                %66 = cir.const #true loc(#loc265)
                cir.yield %66 : !cir.bool loc(#loc265)
              }, false {
                %66 = cir.load %7 : !cir.ptr<!s32i>, !s32i loc(#loc266)
                %67 = cir.const #cir.int<0> : !s32i loc(#loc267)
                %68 = cir.cmp(eq, %66, %67) : !s32i, !cir.bool loc(#loc399)
                %69 = cir.ternary(%68, true {
                  %70 = cir.const #true loc(#loc265)
                  cir.yield %70 : !cir.bool loc(#loc265)
                }, false {
                  %70 = cir.const #false loc(#loc265)
                  cir.yield %70 : !cir.bool loc(#loc265)
                }) : (!cir.bool) -> !cir.bool loc(#loc265)
                cir.yield %69 : !cir.bool loc(#loc265)
              }) : (!cir.bool) -> !cir.bool loc(#loc265)
              cir.if %65 {
                cir.break loc(#loc269)
              } loc(#loc400)
            } loc(#loc397)
            %54 = cir.const #cir.int<0> : !s32i loc(#loc270)
            %55 = cir.cast(integral, %54 : !s32i), !s8i loc(#loc270)
            %56 = cir.load %7 : !cir.ptr<!s32i>, !s32i loc(#loc271)
            %57 = cir.cast(array_to_ptrdecay, %11 : !cir.ptr<!cir.array<!s8i x 14>>), !cir.ptr<!s8i> loc(#loc272)
            %58 = cir.ptr_stride(%57 : !cir.ptr<!s8i>, %56 : !s32i), !cir.ptr<!s8i> loc(#loc272)
            cir.store %55, %58 : !s8i, !cir.ptr<!s8i> loc(#loc401)
            %59 = cir.cast(array_to_ptrdecay, %11 : !cir.ptr<!cir.array<!s8i x 14>>), !cir.ptr<!s8i> loc(#loc273)
            %60 = cir.call @atoi(%59) : (!cir.ptr<!s8i>) -> !s32i side_effect(pure) extra(#fn_attr) loc(#loc274)
            cir.store %60, %0 : !s32i, !cir.ptr<!s32i> loc(#loc402)
          } loc(#loc372)
          cir.yield loc(#loc192)
        } while {
          %16 = cir.const #cir.int<0> : !s32i loc(#loc277)
          %17 = cir.cast(int_to_bool, %16 : !s32i), !cir.bool loc(#loc277)
          cir.condition(%17) loc(#loc277)
        } loc(#loc371)
      } loc(#loc371)
      cir.scope {
        %16 = cir.load %9 : !cir.ptr<!s32i>, !s32i loc(#loc280)
        %17 = cir.const #cir.int<1> : !s32i loc(#loc281)
        %18 = cir.unary(minus, %17) nsw : !s32i, !s32i loc(#loc281)
        %19 = cir.cmp(ne, %16, %18) : !s32i, !cir.bool loc(#loc404)
        cir.if %19 {
          %20 = cir.load %9 : !cir.ptr<!s32i>, !s32i loc(#loc283)
          %21 = cir.call @close(%20) : (!s32i) -> !s32i loc(#loc284)
        } loc(#loc405)
      } loc(#loc403)
      cir.scope {
        %16 = cir.load %10 : !cir.ptr<!s32i>, !s32i loc(#loc287)
        %17 = cir.const #cir.int<1> : !s32i loc(#loc288)
        %18 = cir.unary(minus, %17) nsw : !s32i, !s32i loc(#loc288)
        %19 = cir.cmp(ne, %16, %18) : !s32i, !cir.bool loc(#loc407)
        cir.if %19 {
          %20 = cir.load %10 : !cir.ptr<!s32i>, !s32i loc(#loc290)
          %21 = cir.call @close(%20) : (!s32i) -> !s32i loc(#loc291)
        } loc(#loc408)
      } loc(#loc406)
    } loc(#loc365)
    %5 = cir.load %1 : !cir.ptr<!cir.ptr<!cir.func<(!s32i)>>>, !cir.ptr<!cir.func<(!s32i)>> loc(#loc292)
    %6 = cir.load %0 : !cir.ptr<!s32i>, !s32i loc(#loc293)
    cir.call %5(%6) : (!cir.ptr<!cir.func<(!s32i)>>, !s32i) -> () loc(#loc292)
    cir.return loc(#loc171)
  } loc(#loc361)
} loc(#loc)
#loc = loc("/workspaces/juliet-c/testcases/CWE122_Heap_Based_Buffer_Overflow/s06/CWE122_Heap_Based_Buffer_Overflow__c_CWE129_listen_socket_65a.c":0:0)
#loc1 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_listen_socket_65a.c":45:1)
#loc2 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_listen_socket_65a.c":45:84)
#loc3 = loc("/usr/include/x86_64-linux-gnu/sys/socket.h":102:1)
#loc4 = loc("/usr/include/x86_64-linux-gnu/sys/socket.h":102:62)
#loc5 = loc("/usr/include/netinet/in.h":402:1)
#loc6 = loc("/usr/include/netinet/in.h":403:40)
#loc7 = loc("/usr/include/x86_64-linux-gnu/sys/socket.h":112:1)
#loc8 = loc("/usr/include/x86_64-linux-gnu/sys/socket.h":113:6)
#loc9 = loc("/usr/include/x86_64-linux-gnu/sys/socket.h":296:1)
#loc10 = loc("/usr/include/x86_64-linux-gnu/sys/socket.h":296:39)
#loc11 = loc("/usr/include/x86_64-linux-gnu/sys/socket.h":306:1)
#loc12 = loc("/usr/include/x86_64-linux-gnu/sys/socket.h":307:38)
#loc13 = loc("/usr/include/x86_64-linux-gnu/sys/socket.h":145:1)
#loc14 = loc("/usr/include/x86_64-linux-gnu/sys/socket.h":145:68)
#loc15 = loc("/usr/include/stdlib.h":105:1)
#loc16 = loc("/usr/include/stdlib.h":106:33)
#loc17 = loc("/usr/include/unistd.h":358:1)
#loc18 = loc("/usr/include/unistd.h":358:27)
#loc19 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_listen_socket_65a.c":47:1)
#loc20 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_listen_socket_65a.c":125:1)
#loc21 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_listen_socket_65a.c":49:5)
#loc22 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_listen_socket_65a.c":49:9)
#loc23 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_listen_socket_65a.c":51:5)
#loc24 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_listen_socket_65a.c":51:29)
#loc25 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_listen_socket_65a.c":53:13)
#loc26 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_listen_socket_65a.c":53:12)
#loc27 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_listen_socket_65a.c":53:5)
#loc28 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_listen_socket_65a.c":54:5)
#loc29 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_listen_socket_65a.c":122:5)
#loc30 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_listen_socket_65a.c":59:9)
#loc31 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_listen_socket_65a.c":59:13)
#loc32 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_listen_socket_65a.c":60:9)
#loc33 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_listen_socket_65a.c":60:28)
#loc34 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_listen_socket_65a.c":61:9)
#loc35 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_listen_socket_65a.c":61:31)
#loc36 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_listen_socket_65a.c":62:9)
#loc37 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_listen_socket_65a.c":62:31)
#loc38 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_listen_socket_65a.c":63:9)
#loc39 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_listen_socket_65a.c":63:41)
#loc40 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_listen_socket_65a.c":64:9)
#loc41 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_listen_socket_65a.c":107:17)
#loc42 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_listen_socket_65a.c":65:9)
#loc43 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_listen_socket_65a.c":106:9)
#loc44 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_listen_socket_65a.c":74:35)
#loc45 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_listen_socket_65a.c":74:44)
#loc46 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_listen_socket_65a.c":74:57)
#loc47 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_listen_socket_65a.c":74:28)
#loc48 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_listen_socket_65a.c":74:13)
#loc49 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_listen_socket_65a.c":74:68)
#loc50 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_listen_socket_65a.c":75:13)
#loc51 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_listen_socket_65a.c":78:13)
#loc52 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_listen_socket_65a.c":75:17)
#loc53 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_listen_socket_65a.c":75:33)
#loc54 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_listen_socket_65a.c":76:13)
#loc55 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_listen_socket_65a.c":77:17)
#loc56 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_listen_socket_65a.c":79:20)
#loc57 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_listen_socket_65a.c":79:21)
#loc58 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_listen_socket_65a.c":79:30)
#loc59 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_listen_socket_65a.c":79:33)
#loc60 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_listen_socket_65a.c":79:47)
#loc61 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_listen_socket_65a.c":79:13)
#loc62 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_listen_socket_65a.c":79:48)
#loc63 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_listen_socket_65a.c":80:34)
#loc64 = loc("/usr/include/netinet/in.h":249:5)
#loc65 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_listen_socket_65a.c":80:13)
#loc66 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_listen_socket_65a.c":81:39)
#loc67 = loc("/usr/include/netinet/in.h":251:20)
#loc68 = loc("/usr/include/netinet/in.h":33:15)
#loc69 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_listen_socket_65a.c":81:13)
#loc70 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_listen_socket_65a.c":82:38)
#loc71 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_listen_socket_65a.c":82:32)
#loc72 = loc("/usr/include/netinet/in.h":250:15)
#loc73 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_listen_socket_65a.c":82:13)
#loc74 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_listen_socket_65a.c":82:46)
#loc75 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_listen_socket_65a.c":83:13)
#loc76 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_listen_socket_65a.c":86:13)
#loc77 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_listen_socket_65a.c":83:22)
#loc78 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_listen_socket_65a.c":83:54)
#loc79 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_listen_socket_65a.c":83:55)
#loc80 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_listen_socket_65a.c":83:64)
#loc81 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_listen_socket_65a.c":83:78)
#loc82 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_listen_socket_65a.c":83:17)
#loc83 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_listen_socket_65a.c":83:84)
#loc84 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_listen_socket_65a.c":84:13)
#loc85 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_listen_socket_65a.c":85:17)
#loc86 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_listen_socket_65a.c":87:13)
#loc87 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_listen_socket_65a.c":90:13)
#loc88 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_listen_socket_65a.c":87:24)
#loc89 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_listen_socket_65a.c":87:38)
#loc90 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_listen_socket_65a.c":87:17)
#loc91 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_listen_socket_65a.c":87:57)
#loc92 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_listen_socket_65a.c":88:13)
#loc93 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_listen_socket_65a.c":89:17)
#loc94 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_listen_socket_65a.c":91:35)
#loc95 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_listen_socket_65a.c":91:49)
#loc96 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_listen_socket_65a.c":91:55)
#loc97 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_listen_socket_65a.c":91:28)
#loc98 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_listen_socket_65a.c":91:13)
#loc99 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_listen_socket_65a.c":91:59)
#loc100 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_listen_socket_65a.c":92:13)
#loc101 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_listen_socket_65a.c":95:13)
#loc102 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_listen_socket_65a.c":92:17)
#loc103 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_listen_socket_65a.c":92:33)
#loc104 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_listen_socket_65a.c":93:13)
#loc105 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_listen_socket_65a.c":94:17)
#loc106 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_listen_socket_65a.c":97:31)
#loc107 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_listen_socket_65a.c":97:45)
#loc108 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_listen_socket_65a.c":97:58)
#loc109 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_listen_socket_65a.c":97:76)
#loc110 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_listen_socket_65a.c":97:79)
#loc111 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_listen_socket_65a.c":97:26)
#loc112 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_listen_socket_65a.c":97:13)
#loc113 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_listen_socket_65a.c":97:80)
#loc114 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_listen_socket_65a.c":98:13)
#loc115 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_listen_socket_65a.c":101:13)
#loc116 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_listen_socket_65a.c":98:17)
#loc117 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_listen_socket_65a.c":98:31)
#loc118 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_listen_socket_65a.c":98:44)
#loc119 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_listen_socket_65a.c":98:47)
#loc120 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_listen_socket_65a.c":98:61)
#loc121 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_listen_socket_65a.c":99:13)
#loc122 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_listen_socket_65a.c":100:17)
#loc123 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_listen_socket_65a.c":103:39)
#loc124 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_listen_socket_65a.c":103:25)
#loc125 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_listen_socket_65a.c":103:13)
#loc126 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_listen_socket_65a.c":105:25)
#loc127 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_listen_socket_65a.c":105:20)
#loc128 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_listen_socket_65a.c":105:13)
#loc129 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_listen_socket_65a.c":105:36)
#loc130 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_listen_socket_65a.c":107:16)
#loc131 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_listen_socket_65a.c":108:9)
#loc132 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_listen_socket_65a.c":111:9)
#loc133 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_listen_socket_65a.c":108:13)
#loc134 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_listen_socket_65a.c":108:29)
#loc135 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_listen_socket_65a.c":109:9)
#loc136 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_listen_socket_65a.c":110:26)
#loc137 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_listen_socket_65a.c":110:13)
#loc138 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_listen_socket_65a.c":112:9)
#loc139 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_listen_socket_65a.c":115:9)
#loc140 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_listen_socket_65a.c":112:13)
#loc141 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_listen_socket_65a.c":112:29)
#loc142 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_listen_socket_65a.c":113:9)
#loc143 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_listen_socket_65a.c":114:26)
#loc144 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_listen_socket_65a.c":114:13)
#loc145 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_listen_socket_65a.c":124:5)
#loc146 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_listen_socket_65a.c":124:13)
#loc147 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_listen_socket_65a.c":227:1)
#loc148 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_listen_socket_65a.c":231:1)
#loc149 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_listen_socket_65a.c":229:5)
#loc150 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_listen_socket_65a.c":229:13)
#loc151 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_listen_socket_65a.c":230:5)
#loc152 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_listen_socket_65a.c":230:13)
#loc153 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_listen_socket_65a.c":132:1)
#loc154 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_listen_socket_65a.c":132:88)
#loc155 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_listen_socket_65a.c":134:1)
#loc156 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_listen_socket_65a.c":144:1)
#loc157 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_listen_socket_65a.c":136:5)
#loc158 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_listen_socket_65a.c":136:9)
#loc159 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_listen_socket_65a.c":137:5)
#loc160 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_listen_socket_65a.c":137:29)
#loc161 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_listen_socket_65a.c":139:13)
#loc162 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_listen_socket_65a.c":139:12)
#loc163 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_listen_socket_65a.c":139:5)
#loc164 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_listen_socket_65a.c":142:12)
#loc165 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_listen_socket_65a.c":142:5)
#loc166 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_listen_socket_65a.c":143:5)
#loc167 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_listen_socket_65a.c":143:13)
#loc168 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_listen_socket_65a.c":147:1)
#loc169 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_listen_socket_65a.c":147:88)
#loc170 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_listen_socket_65a.c":149:1)
#loc171 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_listen_socket_65a.c":225:1)
#loc172 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_listen_socket_65a.c":151:5)
#loc173 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_listen_socket_65a.c":151:9)
#loc174 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_listen_socket_65a.c":152:5)
#loc175 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_listen_socket_65a.c":152:29)
#loc176 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_listen_socket_65a.c":154:13)
#loc177 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_listen_socket_65a.c":154:12)
#loc178 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_listen_socket_65a.c":154:5)
#loc179 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_listen_socket_65a.c":155:5)
#loc180 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_listen_socket_65a.c":223:5)
#loc181 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_listen_socket_65a.c":160:9)
#loc182 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_listen_socket_65a.c":160:13)
#loc183 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_listen_socket_65a.c":161:9)
#loc184 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_listen_socket_65a.c":161:28)
#loc185 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_listen_socket_65a.c":162:9)
#loc186 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_listen_socket_65a.c":162:31)
#loc187 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_listen_socket_65a.c":163:9)
#loc188 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_listen_socket_65a.c":163:31)
#loc189 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_listen_socket_65a.c":164:9)
#loc190 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_listen_socket_65a.c":164:41)
#loc191 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_listen_socket_65a.c":165:9)
#loc192 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_listen_socket_65a.c":208:17)
#loc193 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_listen_socket_65a.c":166:9)
#loc194 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_listen_socket_65a.c":207:9)
#loc195 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_listen_socket_65a.c":175:35)
#loc196 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_listen_socket_65a.c":175:44)
#loc197 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_listen_socket_65a.c":175:57)
#loc198 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_listen_socket_65a.c":175:28)
#loc199 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_listen_socket_65a.c":175:13)
#loc200 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_listen_socket_65a.c":175:68)
#loc201 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_listen_socket_65a.c":176:13)
#loc202 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_listen_socket_65a.c":179:13)
#loc203 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_listen_socket_65a.c":176:17)
#loc204 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_listen_socket_65a.c":176:33)
#loc205 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_listen_socket_65a.c":177:13)
#loc206 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_listen_socket_65a.c":178:17)
#loc207 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_listen_socket_65a.c":180:20)
#loc208 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_listen_socket_65a.c":180:21)
#loc209 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_listen_socket_65a.c":180:30)
#loc210 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_listen_socket_65a.c":180:33)
#loc211 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_listen_socket_65a.c":180:47)
#loc212 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_listen_socket_65a.c":180:13)
#loc213 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_listen_socket_65a.c":180:48)
#loc214 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_listen_socket_65a.c":181:34)
#loc215 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_listen_socket_65a.c":181:13)
#loc216 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_listen_socket_65a.c":182:39)
#loc217 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_listen_socket_65a.c":182:13)
#loc218 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_listen_socket_65a.c":183:38)
#loc219 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_listen_socket_65a.c":183:32)
#loc220 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_listen_socket_65a.c":183:13)
#loc221 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_listen_socket_65a.c":183:46)
#loc222 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_listen_socket_65a.c":184:13)
#loc223 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_listen_socket_65a.c":187:13)
#loc224 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_listen_socket_65a.c":184:22)
#loc225 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_listen_socket_65a.c":184:54)
#loc226 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_listen_socket_65a.c":184:55)
#loc227 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_listen_socket_65a.c":184:64)
#loc228 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_listen_socket_65a.c":184:78)
#loc229 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_listen_socket_65a.c":184:17)
#loc230 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_listen_socket_65a.c":184:84)
#loc231 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_listen_socket_65a.c":185:13)
#loc232 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_listen_socket_65a.c":186:17)
#loc233 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_listen_socket_65a.c":188:13)
#loc234 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_listen_socket_65a.c":191:13)
#loc235 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_listen_socket_65a.c":188:24)
#loc236 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_listen_socket_65a.c":188:38)
#loc237 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_listen_socket_65a.c":188:17)
#loc238 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_listen_socket_65a.c":188:57)
#loc239 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_listen_socket_65a.c":189:13)
#loc240 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_listen_socket_65a.c":190:17)
#loc241 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_listen_socket_65a.c":192:35)
#loc242 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_listen_socket_65a.c":192:49)
#loc243 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_listen_socket_65a.c":192:55)
#loc244 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_listen_socket_65a.c":192:28)
#loc245 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_listen_socket_65a.c":192:13)
#loc246 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_listen_socket_65a.c":192:59)
#loc247 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_listen_socket_65a.c":193:13)
#loc248 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_listen_socket_65a.c":196:13)
#loc249 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_listen_socket_65a.c":193:17)
#loc250 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_listen_socket_65a.c":193:33)
#loc251 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_listen_socket_65a.c":194:13)
#loc252 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_listen_socket_65a.c":195:17)
#loc253 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_listen_socket_65a.c":198:31)
#loc254 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_listen_socket_65a.c":198:45)
#loc255 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_listen_socket_65a.c":198:58)
#loc256 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_listen_socket_65a.c":198:76)
#loc257 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_listen_socket_65a.c":198:79)
#loc258 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_listen_socket_65a.c":198:26)
#loc259 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_listen_socket_65a.c":198:13)
#loc260 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_listen_socket_65a.c":198:80)
#loc261 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_listen_socket_65a.c":199:13)
#loc262 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_listen_socket_65a.c":202:13)
#loc263 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_listen_socket_65a.c":199:17)
#loc264 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_listen_socket_65a.c":199:31)
#loc265 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_listen_socket_65a.c":199:44)
#loc266 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_listen_socket_65a.c":199:47)
#loc267 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_listen_socket_65a.c":199:61)
#loc268 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_listen_socket_65a.c":200:13)
#loc269 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_listen_socket_65a.c":201:17)
#loc270 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_listen_socket_65a.c":204:39)
#loc271 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_listen_socket_65a.c":204:25)
#loc272 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_listen_socket_65a.c":204:13)
#loc273 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_listen_socket_65a.c":206:25)
#loc274 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_listen_socket_65a.c":206:20)
#loc275 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_listen_socket_65a.c":206:13)
#loc276 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_listen_socket_65a.c":206:36)
#loc277 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_listen_socket_65a.c":208:16)
#loc278 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_listen_socket_65a.c":209:9)
#loc279 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_listen_socket_65a.c":212:9)
#loc280 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_listen_socket_65a.c":209:13)
#loc281 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_listen_socket_65a.c":209:29)
#loc282 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_listen_socket_65a.c":210:9)
#loc283 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_listen_socket_65a.c":211:26)
#loc284 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_listen_socket_65a.c":211:13)
#loc285 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_listen_socket_65a.c":213:9)
#loc286 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_listen_socket_65a.c":216:9)
#loc287 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_listen_socket_65a.c":213:13)
#loc288 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_listen_socket_65a.c":213:29)
#loc289 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_listen_socket_65a.c":214:9)
#loc290 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_listen_socket_65a.c":215:26)
#loc291 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_listen_socket_65a.c":215:13)
#loc292 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_listen_socket_65a.c":224:5)
#loc293 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_listen_socket_65a.c":224:13)
#loc294 = loc(fused[#loc1, #loc2])
#loc295 = loc(fused[#loc3, #loc4])
#loc296 = loc(fused[#loc5, #loc6])
#loc297 = loc(fused[#loc7, #loc8])
#loc298 = loc(fused[#loc9, #loc10])
#loc299 = loc(fused[#loc11, #loc12])
#loc300 = loc(fused[#loc13, #loc14])
#loc301 = loc(fused[#loc15, #loc16])
#loc302 = loc(fused[#loc17, #loc18])
#loc303 = loc(fused[#loc19, #loc20])
#loc304 = loc(fused[#loc21, #loc22])
#loc305 = loc(fused[#loc23, #loc24])
#loc306 = loc(fused[#loc27, #loc25])
#loc307 = loc(fused[#loc28, #loc29])
#loc308 = loc(fused[#loc30, #loc31])
#loc309 = loc(fused[#loc32, #loc33])
#loc310 = loc(fused[#loc34, #loc35])
#loc311 = loc(fused[#loc36, #loc37])
#loc312 = loc(fused[#loc38, #loc39])
#loc313 = loc(fused[#loc40, #loc41])
#loc314 = loc(fused[#loc42, #loc43])
#loc315 = loc(fused[#loc48, #loc49])
#loc316 = loc(fused[#loc50, #loc51])
#loc317 = loc(fused[#loc52, #loc53])
#loc318 = loc(fused[#loc54, #loc51])
#loc319 = loc(fused[#loc56, #loc57])
#loc320 = loc(fused[#loc59, #loc60])
#loc321 = loc(fused[#loc61, #loc62])
#loc322 = loc(fused[#loc65, #loc63])
#loc323 = loc(fused[#loc69, #loc66])
#loc324 = loc(fused[#loc73, #loc74])
#loc325 = loc(fused[#loc75, #loc76])
#loc326 = loc(fused[#loc78, #loc79])
#loc327 = loc(fused[#loc80, #loc81])
#loc328 = loc(fused[#loc82, #loc83])
#loc329 = loc(fused[#loc84, #loc76])
#loc330 = loc(fused[#loc86, #loc87])
#loc331 = loc(fused[#loc90, #loc91])
#loc332 = loc(fused[#loc92, #loc87])
#loc333 = loc(fused[#loc98, #loc99])
#loc334 = loc(fused[#loc100, #loc101])
#loc335 = loc(fused[#loc102, #loc103])
#loc336 = loc(fused[#loc104, #loc101])
#loc337 = loc(fused[#loc108, #loc109])
#loc338 = loc(fused[#loc112, #loc113])
#loc339 = loc(fused[#loc114, #loc115])
#loc340 = loc(fused[#loc116, #loc117])
#loc341 = loc(fused[#loc119, #loc120])
#loc342 = loc(fused[#loc121, #loc115])
#loc343 = loc(fused[#loc125, #loc123])
#loc344 = loc(fused[#loc128, #loc129])
#loc345 = loc(fused[#loc131, #loc132])
#loc346 = loc(fused[#loc133, #loc134])
#loc347 = loc(fused[#loc135, #loc132])
#loc348 = loc(fused[#loc138, #loc139])
#loc349 = loc(fused[#loc140, #loc141])
#loc350 = loc(fused[#loc142, #loc139])
#loc351 = loc(fused[#loc147, #loc148])
#loc352 = loc(fused[#loc149, #loc150])
#loc353 = loc(fused[#loc151, #loc152])
#loc354 = loc(fused[#loc153, #loc154])
#loc355 = loc(fused[#loc155, #loc156])
#loc356 = loc(fused[#loc157, #loc158])
#loc357 = loc(fused[#loc159, #loc160])
#loc358 = loc(fused[#loc163, #loc161])
#loc359 = loc(fused[#loc165, #loc164])
#loc360 = loc(fused[#loc168, #loc169])
#loc361 = loc(fused[#loc170, #loc171])
#loc362 = loc(fused[#loc172, #loc173])
#loc363 = loc(fused[#loc174, #loc175])
#loc364 = loc(fused[#loc178, #loc176])
#loc365 = loc(fused[#loc179, #loc180])
#loc366 = loc(fused[#loc181, #loc182])
#loc367 = loc(fused[#loc183, #loc184])
#loc368 = loc(fused[#loc185, #loc186])
#loc369 = loc(fused[#loc187, #loc188])
#loc370 = loc(fused[#loc189, #loc190])
#loc371 = loc(fused[#loc191, #loc192])
#loc372 = loc(fused[#loc193, #loc194])
#loc373 = loc(fused[#loc199, #loc200])
#loc374 = loc(fused[#loc201, #loc202])
#loc375 = loc(fused[#loc203, #loc204])
#loc376 = loc(fused[#loc205, #loc202])
#loc377 = loc(fused[#loc207, #loc208])
#loc378 = loc(fused[#loc210, #loc211])
#loc379 = loc(fused[#loc212, #loc213])
#loc380 = loc(fused[#loc215, #loc214])
#loc381 = loc(fused[#loc217, #loc216])
#loc382 = loc(fused[#loc220, #loc221])
#loc383 = loc(fused[#loc222, #loc223])
#loc384 = loc(fused[#loc225, #loc226])
#loc385 = loc(fused[#loc227, #loc228])
#loc386 = loc(fused[#loc229, #loc230])
#loc387 = loc(fused[#loc231, #loc223])
#loc388 = loc(fused[#loc233, #loc234])
#loc389 = loc(fused[#loc237, #loc238])
#loc390 = loc(fused[#loc239, #loc234])
#loc391 = loc(fused[#loc245, #loc246])
#loc392 = loc(fused[#loc247, #loc248])
#loc393 = loc(fused[#loc249, #loc250])
#loc394 = loc(fused[#loc251, #loc248])
#loc395 = loc(fused[#loc255, #loc256])
#loc396 = loc(fused[#loc259, #loc260])
#loc397 = loc(fused[#loc261, #loc262])
#loc398 = loc(fused[#loc263, #loc264])
#loc399 = loc(fused[#loc266, #loc267])
#loc400 = loc(fused[#loc268, #loc262])
#loc401 = loc(fused[#loc272, #loc270])
#loc402 = loc(fused[#loc275, #loc276])
#loc403 = loc(fused[#loc278, #loc279])
#loc404 = loc(fused[#loc280, #loc281])
#loc405 = loc(fused[#loc282, #loc279])
#loc406 = loc(fused[#loc285, #loc286])
#loc407 = loc(fused[#loc287, #loc288])
#loc408 = loc(fused[#loc289, #loc286])
