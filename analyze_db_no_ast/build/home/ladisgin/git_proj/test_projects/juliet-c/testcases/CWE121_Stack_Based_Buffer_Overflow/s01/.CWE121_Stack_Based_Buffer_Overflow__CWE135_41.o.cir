!s32i = !cir.int<s, 32>
!s8i = !cir.int<s, 8>
!u64i = !cir.int<u, 64>
!u8i = !cir.int<u, 8>
!void = !cir.void
#fn_attr = #cir<extra({nothrow = #cir.nothrow})>
#fn_attr1 = #cir<extra({inline = #cir.inline<no>, nothrow = #cir.nothrow, optnone = #cir.optnone})>
#loc10 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE135_41.c":27:21)
#loc11 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE135_41.c":27:28)
#loc47 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE135_41.c":73:25)
#loc48 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE135_41.c":73:32)
#loc78 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE135_41.c":52:25)
#loc79 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE135_41.c":52:32)
#loc107 = loc(fused[#loc10, #loc11])
#loc121 = loc(fused[#loc47, #loc48])
#loc131 = loc(fused[#loc78, #loc79])
module @"/home/ladisgin/git_proj/test_projects/juliet-c/testcases/CWE121_Stack_Based_Buffer_Overflow/s01/CWE121_Stack_Based_Buffer_Overflow__CWE135_41.c" attributes {cir.lang = #cir.lang<c>, cir.sob = #cir.signed_overflow_behavior<undefined>, cir.triple = "x86_64-unknown-linux-gnu", dlti.dl_spec = #dlti.dl_spec<#dlti.dl_entry<f64, dense<64> : vector<2xi64>>, #dlti.dl_entry<i8, dense<8> : vector<2xi64>>, #dlti.dl_entry<i1, dense<8> : vector<2xi64>>, #dlti.dl_entry<i32, dense<32> : vector<2xi64>>, #dlti.dl_entry<i16, dense<16> : vector<2xi64>>, #dlti.dl_entry<f80, dense<128> : vector<2xi64>>, #dlti.dl_entry<!llvm.ptr, dense<64> : vector<4xi64>>, #dlti.dl_entry<!llvm.ptr<272>, dense<64> : vector<4xi64>>, #dlti.dl_entry<i128, dense<128> : vector<2xi64>>, #dlti.dl_entry<i64, dense<64> : vector<2xi64>>, #dlti.dl_entry<f128, dense<128> : vector<2xi64>>, #dlti.dl_entry<!llvm.ptr<271>, dense<32> : vector<4xi64>>, #dlti.dl_entry<f16, dense<16> : vector<2xi64>>, #dlti.dl_entry<!llvm.ptr<270>, dense<32> : vector<4xi64>>, #dlti.dl_entry<"dlti.stack_alignment", 128 : i64>, #dlti.dl_entry<"dlti.endianness", "little">>, llvm.data_layout = "e-m:e-p270:32:32-p271:32:32-p272:64:64-i64:64-i128:128-f80:128-n8:16:32:64-S128"} {
  cir.global "private"  constant internal dsolocal @".str" = #cir.const_array<[#cir.int<65> : !s32i, #cir.int<65> : !s32i, #cir.int<65> : !s32i, #cir.int<65> : !s32i, #cir.int<65> : !s32i, #cir.int<65> : !s32i, #cir.int<65> : !s32i, #cir.int<65> : !s32i, #cir.int<65> : !s32i, #cir.int<65> : !s32i, #cir.int<65> : !s32i, #cir.int<65> : !s32i, #cir.int<65> : !s32i, #cir.int<65> : !s32i, #cir.int<65> : !s32i, #cir.int<65> : !s32i, #cir.int<65> : !s32i, #cir.int<65> : !s32i, #cir.int<65> : !s32i, #cir.int<65> : !s32i, #cir.int<65> : !s32i, #cir.int<65> : !s32i, #cir.int<65> : !s32i, #cir.int<65> : !s32i, #cir.int<65> : !s32i, #cir.int<65> : !s32i, #cir.int<65> : !s32i, #cir.int<65> : !s32i, #cir.int<65> : !s32i, #cir.int<65> : !s32i, #cir.int<65> : !s32i, #cir.int<65> : !s32i, #cir.int<65> : !s32i, #cir.int<65> : !s32i, #cir.int<65> : !s32i, #cir.int<65> : !s32i, #cir.int<65> : !s32i, #cir.int<65> : !s32i, #cir.int<65> : !s32i, #cir.int<65> : !s32i, #cir.int<65> : !s32i, #cir.int<65> : !s32i, #cir.int<0> : !s32i]> : !cir.array<!s32i x 43> {alignment = 4 : i64} loc(#loc1)
  cir.func private  @strlen(!cir.ptr<!s8i>) -> !u64i extra(#fn_attr) loc(#loc103)
  cir.func private  @wcscpy(!cir.ptr<!s32i>, !cir.ptr<!s32i>) -> !cir.ptr<!s32i> extra(#fn_attr) loc(#loc104)
  cir.func private  @printLine(!cir.ptr<!s8i>) loc(#loc105)
  cir.func internal private  @badSink(%arg0: !cir.ptr<!void> loc(fused[#loc10, #loc11])) extra(#fn_attr1) {
    %0 = cir.alloca !cir.ptr<!void>, !cir.ptr<!cir.ptr<!void>>, ["data", init] {alignment = 8 : i64} loc(#loc107)
    cir.store %arg0, %0 : !cir.ptr<!void>, !cir.ptr<!cir.ptr<!void>> loc(#loc12)
    cir.scope {
      %1 = cir.alloca !u64i, !cir.ptr<!u64i>, ["dataLen", init] {alignment = 8 : i64} loc(#loc109)
      %2 = cir.alloca !cir.ptr<!void>, !cir.ptr<!cir.ptr<!void>>, ["dest", init] {alignment = 8 : i64} loc(#loc110)
      %3 = cir.get_global @strlen : !cir.ptr<!cir.func<!u64i (!cir.ptr<!s8i>)>> loc(#loc19)
      %4 = cir.load %0 : !cir.ptr<!cir.ptr<!void>>, !cir.ptr<!void> loc(#loc20)
      %5 = cir.cast(bitcast, %4 : !cir.ptr<!void>), !cir.ptr<!s8i> loc(#loc20)
      %6 = cir.call @strlen(%5) : (!cir.ptr<!s8i>) -> !u64i extra(#fn_attr) loc(#loc19)
      cir.store %6, %1 : !u64i, !cir.ptr<!u64i> loc(#loc109)
      %7 = cir.load %1 : !cir.ptr<!u64i>, !u64i loc(#loc18)
      %8 = cir.const #cir.int<1> : !s32i loc(#loc18)
      %9 = cir.cast(integral, %8 : !s32i), !u64i loc(#loc18)
      %10 = cir.binop(add, %7, %9) : !u64i loc(#loc18)
      %11 = cir.const #cir.int<4> : !u64i loc(#loc18)
      %12 = cir.binop(mul, %10, %11) : !u64i loc(#loc18)
      %13 = cir.alloca !u8i, !cir.ptr<!u8i>, %12 : !u64i, ["bi_alloca"] {alignment = 16 : i64} loc(#loc18)
      %14 = cir.cast(bitcast, %13 : !cir.ptr<!u8i>), !cir.ptr<!void> loc(#loc18)
      cir.store %14, %2 : !cir.ptr<!void>, !cir.ptr<!cir.ptr<!void>> loc(#loc110)
      %15 = cir.load %2 : !cir.ptr<!cir.ptr<!void>>, !cir.ptr<!void> loc(#loc21)
      %16 = cir.cast(bitcast, %15 : !cir.ptr<!void>), !cir.ptr<!s32i> loc(#loc21)
      %17 = cir.load %0 : !cir.ptr<!cir.ptr<!void>>, !cir.ptr<!void> loc(#loc22)
      %18 = cir.cast(bitcast, %17 : !cir.ptr<!void>), !cir.ptr<!s32i> loc(#loc22)
      %19 = cir.call @wcscpy(%16, %18) : (!cir.ptr<!s32i>, !cir.ptr<!s32i>) -> !cir.ptr<!s32i> extra(#fn_attr) loc(#loc23)
      %20 = cir.load %2 : !cir.ptr<!cir.ptr<!void>>, !cir.ptr<!void> loc(#loc24)
      %21 = cir.cast(bitcast, %20 : !cir.ptr<!void>), !cir.ptr<!s8i> loc(#loc24)
      cir.call @printLine(%21) : (!cir.ptr<!s8i>) -> () loc(#loc25)
    } loc(#loc108)
    cir.return loc(#loc9)
  } loc(#loc106)
  cir.func no_proto  @CWE121_Stack_Based_Buffer_Overflow__CWE135_41_bad() extra(#fn_attr1) {
    %0 = cir.alloca !cir.ptr<!void>, !cir.ptr<!cir.ptr<!void>>, ["data"] {alignment = 8 : i64} loc(#loc112)
    %1 = cir.const #cir.ptr<null> : !cir.ptr<!void> loc(#loc30)
    cir.store %1, %0 : !cir.ptr<!void>, !cir.ptr<!cir.ptr<!void>> loc(#loc113)
    %2 = cir.get_global @".str" : !cir.ptr<!cir.array<!s32i x 43>> loc(#loc1)
    %3 = cir.cast(array_to_ptrdecay, %2 : !cir.ptr<!cir.array<!s32i x 43>>), !cir.ptr<!s32i> loc(#loc1)
    %4 = cir.cast(bitcast, %3 : !cir.ptr<!s32i>), !cir.ptr<!void> loc(#loc1)
    cir.store %4, %0 : !cir.ptr<!void>, !cir.ptr<!cir.ptr<!void>> loc(#loc114)
    %5 = cir.load %0 : !cir.ptr<!cir.ptr<!void>>, !cir.ptr<!void> loc(#loc33)
    cir.call @badSink(%5) : (!cir.ptr<!void>) -> () loc(#loc34)
    cir.return loc(#loc27)
  } loc(#loc111)
  cir.func no_proto  @CWE121_Stack_Based_Buffer_Overflow__CWE135_41_good() extra(#fn_attr1) {
    %0 = cir.get_global @goodB2G : !cir.ptr<!cir.func<!void ()>> loc(#loc116)
    cir.call %0() : (!cir.ptr<!cir.func<!void ()>>) -> () loc(#loc37)
    %1 = cir.get_global @goodG2B : !cir.ptr<!cir.func<!void ()>> loc(#loc117)
    cir.call %1() : (!cir.ptr<!cir.func<!void ()>>) -> () loc(#loc39)
    cir.return loc(#loc36)
  } loc(#loc115)
  cir.func private  @wcslen(!cir.ptr<!s32i>) -> !u64i extra(#fn_attr) loc(#loc118)
  cir.func private  @printWLine(!cir.ptr<!s32i>) loc(#loc119)
  cir.func internal private  @goodB2GSink(%arg0: !cir.ptr<!void> loc(fused[#loc47, #loc48])) extra(#fn_attr1) {
    %0 = cir.alloca !cir.ptr<!void>, !cir.ptr<!cir.ptr<!void>>, ["data", init] {alignment = 8 : i64} loc(#loc121)
    cir.store %arg0, %0 : !cir.ptr<!void>, !cir.ptr<!cir.ptr<!void>> loc(#loc49)
    cir.scope {
      %1 = cir.alloca !u64i, !cir.ptr<!u64i>, ["dataLen", init] {alignment = 8 : i64} loc(#loc123)
      %2 = cir.alloca !cir.ptr<!void>, !cir.ptr<!cir.ptr<!void>>, ["dest", init] {alignment = 8 : i64} loc(#loc124)
      %3 = cir.get_global @wcslen : !cir.ptr<!cir.func<!u64i (!cir.ptr<!s32i>)>> loc(#loc56)
      %4 = cir.load %0 : !cir.ptr<!cir.ptr<!void>>, !cir.ptr<!void> loc(#loc57)
      %5 = cir.cast(bitcast, %4 : !cir.ptr<!void>), !cir.ptr<!s32i> loc(#loc57)
      %6 = cir.call @wcslen(%5) : (!cir.ptr<!s32i>) -> !u64i extra(#fn_attr) loc(#loc56)
      cir.store %6, %1 : !u64i, !cir.ptr<!u64i> loc(#loc123)
      %7 = cir.load %1 : !cir.ptr<!u64i>, !u64i loc(#loc55)
      %8 = cir.const #cir.int<1> : !s32i loc(#loc55)
      %9 = cir.cast(integral, %8 : !s32i), !u64i loc(#loc55)
      %10 = cir.binop(add, %7, %9) : !u64i loc(#loc55)
      %11 = cir.const #cir.int<4> : !u64i loc(#loc55)
      %12 = cir.binop(mul, %10, %11) : !u64i loc(#loc55)
      %13 = cir.alloca !u8i, !cir.ptr<!u8i>, %12 : !u64i, ["bi_alloca"] {alignment = 16 : i64} loc(#loc55)
      %14 = cir.cast(bitcast, %13 : !cir.ptr<!u8i>), !cir.ptr<!void> loc(#loc55)
      cir.store %14, %2 : !cir.ptr<!void>, !cir.ptr<!cir.ptr<!void>> loc(#loc124)
      %15 = cir.load %2 : !cir.ptr<!cir.ptr<!void>>, !cir.ptr<!void> loc(#loc58)
      %16 = cir.cast(bitcast, %15 : !cir.ptr<!void>), !cir.ptr<!s32i> loc(#loc58)
      %17 = cir.load %0 : !cir.ptr<!cir.ptr<!void>>, !cir.ptr<!void> loc(#loc59)
      %18 = cir.cast(bitcast, %17 : !cir.ptr<!void>), !cir.ptr<!s32i> loc(#loc59)
      %19 = cir.call @wcscpy(%16, %18) : (!cir.ptr<!s32i>, !cir.ptr<!s32i>) -> !cir.ptr<!s32i> extra(#fn_attr) loc(#loc60)
      %20 = cir.load %2 : !cir.ptr<!cir.ptr<!void>>, !cir.ptr<!void> loc(#loc61)
      %21 = cir.cast(bitcast, %20 : !cir.ptr<!void>), !cir.ptr<!s32i> loc(#loc61)
      cir.call @printWLine(%21) : (!cir.ptr<!s32i>) -> () loc(#loc62)
    } loc(#loc122)
    cir.return loc(#loc46)
  } loc(#loc120)
  cir.func no_proto internal private  @goodB2G() extra(#fn_attr1) {
    %0 = cir.alloca !cir.ptr<!void>, !cir.ptr<!cir.ptr<!void>>, ["data"] {alignment = 8 : i64} loc(#loc126)
    %1 = cir.const #cir.ptr<null> : !cir.ptr<!void> loc(#loc67)
    cir.store %1, %0 : !cir.ptr<!void>, !cir.ptr<!cir.ptr<!void>> loc(#loc127)
    %2 = cir.get_global @".str" : !cir.ptr<!cir.array<!s32i x 43>> loc(#loc69)
    %3 = cir.cast(array_to_ptrdecay, %2 : !cir.ptr<!cir.array<!s32i x 43>>), !cir.ptr<!s32i> loc(#loc69)
    %4 = cir.cast(bitcast, %3 : !cir.ptr<!s32i>), !cir.ptr<!void> loc(#loc69)
    cir.store %4, %0 : !cir.ptr<!void>, !cir.ptr<!cir.ptr<!void>> loc(#loc128)
    %5 = cir.load %0 : !cir.ptr<!cir.ptr<!void>>, !cir.ptr<!void> loc(#loc71)
    cir.call @goodB2GSink(%5) : (!cir.ptr<!void>) -> () loc(#loc72)
    cir.return loc(#loc64)
  } loc(#loc125)
  cir.global "private"  constant internal dsolocal @".str1" = #cir.const_array<"AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA\00" : !cir.array<!s8i x 43>> : !cir.array<!s8i x 43> {alignment = 1 : i64} loc(#loc73)
  cir.func private  @strcpy(!cir.ptr<!s8i>, !cir.ptr<!s8i>) -> !cir.ptr<!s8i> extra(#fn_attr) loc(#loc129)
  cir.func internal private  @goodG2BSink(%arg0: !cir.ptr<!void> loc(fused[#loc78, #loc79])) extra(#fn_attr1) {
    %0 = cir.alloca !cir.ptr<!void>, !cir.ptr<!cir.ptr<!void>>, ["data", init] {alignment = 8 : i64} loc(#loc131)
    cir.store %arg0, %0 : !cir.ptr<!void>, !cir.ptr<!cir.ptr<!void>> loc(#loc80)
    cir.scope {
      %1 = cir.alloca !u64i, !cir.ptr<!u64i>, ["dataLen", init] {alignment = 8 : i64} loc(#loc133)
      %2 = cir.alloca !cir.ptr<!void>, !cir.ptr<!cir.ptr<!void>>, ["dest", init] {alignment = 8 : i64} loc(#loc134)
      %3 = cir.get_global @strlen : !cir.ptr<!cir.func<!u64i (!cir.ptr<!s8i>)>> loc(#loc87)
      %4 = cir.load %0 : !cir.ptr<!cir.ptr<!void>>, !cir.ptr<!void> loc(#loc88)
      %5 = cir.cast(bitcast, %4 : !cir.ptr<!void>), !cir.ptr<!s8i> loc(#loc88)
      %6 = cir.call @strlen(%5) : (!cir.ptr<!s8i>) -> !u64i extra(#fn_attr) loc(#loc87)
      cir.store %6, %1 : !u64i, !cir.ptr<!u64i> loc(#loc133)
      %7 = cir.load %1 : !cir.ptr<!u64i>, !u64i loc(#loc86)
      %8 = cir.const #cir.int<1> : !s32i loc(#loc86)
      %9 = cir.cast(integral, %8 : !s32i), !u64i loc(#loc86)
      %10 = cir.binop(add, %7, %9) : !u64i loc(#loc86)
      %11 = cir.const #cir.int<1> : !s32i loc(#loc86)
      %12 = cir.cast(integral, %11 : !s32i), !u64i loc(#loc86)
      %13 = cir.binop(mul, %10, %12) : !u64i loc(#loc86)
      %14 = cir.alloca !u8i, !cir.ptr<!u8i>, %13 : !u64i, ["bi_alloca"] {alignment = 16 : i64} loc(#loc86)
      %15 = cir.cast(bitcast, %14 : !cir.ptr<!u8i>), !cir.ptr<!void> loc(#loc86)
      cir.store %15, %2 : !cir.ptr<!void>, !cir.ptr<!cir.ptr<!void>> loc(#loc134)
      %16 = cir.get_global @strcpy : !cir.ptr<!cir.func<!cir.ptr<!s8i> (!cir.ptr<!s8i>, !cir.ptr<!s8i>)>> loc(#loc89)
      %17 = cir.load %2 : !cir.ptr<!cir.ptr<!void>>, !cir.ptr<!void> loc(#loc90)
      %18 = cir.cast(bitcast, %17 : !cir.ptr<!void>), !cir.ptr<!s8i> loc(#loc90)
      %19 = cir.load %0 : !cir.ptr<!cir.ptr<!void>>, !cir.ptr<!void> loc(#loc91)
      %20 = cir.cast(bitcast, %19 : !cir.ptr<!void>), !cir.ptr<!s8i> loc(#loc91)
      %21 = cir.call @strcpy(%18, %20) : (!cir.ptr<!s8i>, !cir.ptr<!s8i>) -> !cir.ptr<!s8i> extra(#fn_attr) loc(#loc89)
      %22 = cir.load %2 : !cir.ptr<!cir.ptr<!void>>, !cir.ptr<!void> loc(#loc92)
      %23 = cir.cast(bitcast, %22 : !cir.ptr<!void>), !cir.ptr<!s8i> loc(#loc92)
      cir.call @printLine(%23) : (!cir.ptr<!s8i>) -> () loc(#loc93)
    } loc(#loc132)
    cir.return loc(#loc77)
  } loc(#loc130)
  cir.func no_proto internal private  @goodG2B() extra(#fn_attr1) {
    %0 = cir.alloca !cir.ptr<!void>, !cir.ptr<!cir.ptr<!void>>, ["data"] {alignment = 8 : i64} loc(#loc136)
    %1 = cir.const #cir.ptr<null> : !cir.ptr<!void> loc(#loc98)
    cir.store %1, %0 : !cir.ptr<!void>, !cir.ptr<!cir.ptr<!void>> loc(#loc137)
    %2 = cir.get_global @".str1" : !cir.ptr<!cir.array<!s8i x 43>> loc(#loc73)
    %3 = cir.cast(array_to_ptrdecay, %2 : !cir.ptr<!cir.array<!s8i x 43>>), !cir.ptr<!s8i> loc(#loc73)
    %4 = cir.cast(bitcast, %3 : !cir.ptr<!s8i>), !cir.ptr<!void> loc(#loc73)
    cir.store %4, %0 : !cir.ptr<!void>, !cir.ptr<!cir.ptr<!void>> loc(#loc138)
    %5 = cir.load %0 : !cir.ptr<!cir.ptr<!void>>, !cir.ptr<!void> loc(#loc101)
    cir.call @goodG2BSink(%5) : (!cir.ptr<!void>) -> () loc(#loc102)
    cir.return loc(#loc95)
  } loc(#loc135)
} loc(#loc)
#loc = loc("/home/ladisgin/git_proj/test_projects/juliet-c/testcases/CWE121_Stack_Based_Buffer_Overflow/s01/CWE121_Stack_Based_Buffer_Overflow__CWE135_41.c":0:0)
#loc1 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE135_41.c":43:20)
#loc2 = loc("/usr/include/string.h":407:1)
#loc3 = loc("/usr/include/string.h":408:33)
#loc4 = loc("/usr/include/wchar.h":98:1)
#loc5 = loc("/usr/include/wchar.h":100:14)
#loc6 = loc("../../../testcasesupport/std_testcase_io.h":14:1)
#loc7 = loc("../../../testcasesupport/std_testcase_io.h":14:33)
#loc8 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE135_41.c":27:1)
#loc9 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE135_41.c":36:1)
#loc12 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE135_41.c":28:1)
#loc13 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE135_41.c":29:5)
#loc14 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE135_41.c":35:5)
#loc15 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE135_41.c":31:9)
#loc16 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE135_41.c":31:45)
#loc17 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE135_41.c":32:9)
#loc18 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE135_41.c":32:31)
#loc19 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE135_41.c":31:26)
#loc20 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE135_41.c":31:41)
#loc21 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE135_41.c":33:22)
#loc22 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE135_41.c":33:28)
#loc23 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE135_41.c":33:15)
#loc24 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE135_41.c":34:27)
#loc25 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE135_41.c":34:9)
#loc26 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE135_41.c":38:1)
#loc27 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE135_41.c":45:1)
#loc28 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE135_41.c":40:5)
#loc29 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE135_41.c":40:12)
#loc30 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE135_41.c":41:12)
#loc31 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE135_41.c":41:5)
#loc32 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE135_41.c":43:5)
#loc33 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE135_41.c":44:13)
#loc34 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE135_41.c":44:5)
#loc35 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE135_41.c":93:1)
#loc36 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE135_41.c":97:1)
#loc37 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE135_41.c":95:5)
#loc38 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE135_41.c":95:13)
#loc39 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE135_41.c":96:5)
#loc40 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE135_41.c":96:13)
#loc41 = loc("/usr/include/wchar.h":247:1)
#loc42 = loc("/usr/include/wchar.h":247:51)
#loc43 = loc("../../../testcasesupport/std_testcase_io.h":16:1)
#loc44 = loc("../../../testcasesupport/std_testcase_io.h":16:37)
#loc45 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE135_41.c":73:1)
#loc46 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE135_41.c":82:1)
#loc49 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE135_41.c":74:1)
#loc50 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE135_41.c":75:5)
#loc51 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE135_41.c":81:5)
#loc52 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE135_41.c":77:9)
#loc53 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE135_41.c":77:48)
#loc54 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE135_41.c":78:9)
#loc55 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE135_41.c":78:31)
#loc56 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE135_41.c":77:26)
#loc57 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE135_41.c":77:44)
#loc58 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE135_41.c":79:22)
#loc59 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE135_41.c":79:28)
#loc60 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE135_41.c":79:15)
#loc61 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE135_41.c":80:31)
#loc62 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE135_41.c":80:9)
#loc63 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE135_41.c":84:1)
#loc64 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE135_41.c":91:1)
#loc65 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE135_41.c":86:5)
#loc66 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE135_41.c":86:12)
#loc67 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE135_41.c":87:12)
#loc68 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE135_41.c":87:5)
#loc69 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE135_41.c":89:20)
#loc70 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE135_41.c":89:5)
#loc71 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE135_41.c":90:17)
#loc72 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE135_41.c":90:5)
#loc73 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE135_41.c":68:20)
#loc74 = loc("/usr/include/string.h":141:1)
#loc75 = loc("/usr/include/string.h":142:14)
#loc76 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE135_41.c":52:1)
#loc77 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE135_41.c":61:1)
#loc80 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE135_41.c":53:1)
#loc81 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE135_41.c":54:5)
#loc82 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE135_41.c":60:5)
#loc83 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE135_41.c":56:9)
#loc84 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE135_41.c":56:45)
#loc85 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE135_41.c":57:9)
#loc86 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE135_41.c":57:31)
#loc87 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE135_41.c":56:26)
#loc88 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE135_41.c":56:41)
#loc89 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE135_41.c":58:15)
#loc90 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE135_41.c":58:22)
#loc91 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE135_41.c":58:28)
#loc92 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE135_41.c":59:27)
#loc93 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE135_41.c":59:9)
#loc94 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE135_41.c":63:1)
#loc95 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE135_41.c":70:1)
#loc96 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE135_41.c":65:5)
#loc97 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE135_41.c":65:12)
#loc98 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE135_41.c":66:12)
#loc99 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE135_41.c":66:5)
#loc100 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE135_41.c":68:5)
#loc101 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE135_41.c":69:17)
#loc102 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE135_41.c":69:5)
#loc103 = loc(fused[#loc2, #loc3])
#loc104 = loc(fused[#loc4, #loc5])
#loc105 = loc(fused[#loc6, #loc7])
#loc106 = loc(fused[#loc8, #loc9])
#loc108 = loc(fused[#loc13, #loc14])
#loc109 = loc(fused[#loc15, #loc16])
#loc110 = loc(fused[#loc17, #loc18])
#loc111 = loc(fused[#loc26, #loc27])
#loc112 = loc(fused[#loc28, #loc29])
#loc113 = loc(fused[#loc31, #loc30])
#loc114 = loc(fused[#loc32, #loc1])
#loc115 = loc(fused[#loc35, #loc36])
#loc116 = loc(fused[#loc37, #loc38])
#loc117 = loc(fused[#loc39, #loc40])
#loc118 = loc(fused[#loc41, #loc42])
#loc119 = loc(fused[#loc43, #loc44])
#loc120 = loc(fused[#loc45, #loc46])
#loc122 = loc(fused[#loc50, #loc51])
#loc123 = loc(fused[#loc52, #loc53])
#loc124 = loc(fused[#loc54, #loc55])
#loc125 = loc(fused[#loc63, #loc64])
#loc126 = loc(fused[#loc65, #loc66])
#loc127 = loc(fused[#loc68, #loc67])
#loc128 = loc(fused[#loc70, #loc69])
#loc129 = loc(fused[#loc74, #loc75])
#loc130 = loc(fused[#loc76, #loc77])
#loc132 = loc(fused[#loc81, #loc82])
#loc133 = loc(fused[#loc83, #loc84])
#loc134 = loc(fused[#loc85, #loc86])
#loc135 = loc(fused[#loc94, #loc95])
#loc136 = loc(fused[#loc96, #loc97])
#loc137 = loc(fused[#loc99, #loc98])
#loc138 = loc(fused[#loc100, #loc73])
