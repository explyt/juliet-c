!s32i = !cir.int<s, 32>
!s8i = !cir.int<s, 8>
!u64i = !cir.int<u, 64>
!u8i = !cir.int<u, 8>
!void = !cir.void
#fn_attr = #cir<extra({inline = #cir.inline<no>, nothrow = #cir.nothrow, optnone = #cir.optnone, uwtable = #cir.uwtable<async>})>
module @"/workspaces/juliet-c/testcases/CWE121_Stack_Based_Buffer_Overflow/s01/CWE121_Stack_Based_Buffer_Overflow__CWE131_memmove_03.c" attributes {cir.lang = #cir.lang<c>, cir.sob = #cir.signed_overflow_behavior<undefined>, cir.triple = "x86_64-unknown-linux-gnu", cir.type_size_info = #cir.type_size_info<char = 8, int = 32, size_t = 64>, cir.uwtable = #cir.uwtable<async>, dlti.dl_spec = #dlti.dl_spec<i16 = dense<16> : vector<2xi64>, i32 = dense<32> : vector<2xi64>, f16 = dense<16> : vector<2xi64>, f64 = dense<64> : vector<2xi64>, f128 = dense<128> : vector<2xi64>, i64 = dense<64> : vector<2xi64>, i128 = dense<128> : vector<2xi64>, !llvm.ptr<272> = dense<64> : vector<4xi64>, !llvm.ptr<271> = dense<32> : vector<4xi64>, f80 = dense<128> : vector<2xi64>, !llvm.ptr<270> = dense<32> : vector<4xi64>, !llvm.ptr = dense<64> : vector<4xi64>, i1 = dense<8> : vector<2xi64>, i8 = dense<8> : vector<2xi64>, "dlti.mangling_mode" = "e", "dlti.stack_alignment" = 128 : i64, "dlti.endianness" = "little">} {
  cir.func private @printIntLine(!s32i) loc(#loc99)
  cir.func no_proto @CWE121_Stack_Based_Buffer_Overflow__CWE131_memmove_03_bad() extra(#fn_attr) {
    %0 = cir.alloca !cir.ptr<!s32i>, !cir.ptr<!cir.ptr<!s32i>>, ["data"] {alignment = 8 : i64} loc(#loc101)
    %1 = cir.const #cir.ptr<null> : !cir.ptr<!s32i> loc(#loc7)
    cir.store %1, %0 : !cir.ptr<!s32i>, !cir.ptr<!cir.ptr<!s32i>> loc(#loc102)
    cir.scope {
      %2 = cir.const #cir.int<5> : !s32i loc(#loc11)
      %3 = cir.const #cir.int<5> : !s32i loc(#loc12)
      %4 = cir.cmp(eq, %2, %3) : !s32i, !cir.bool loc(#loc104)
      cir.if %4 {
        %5 = cir.const #cir.int<10> : !s32i loc(#loc14)
        %6 = cir.cast(integral, %5 : !s32i), !u64i loc(#loc14)
        %7 = cir.alloca !u8i, !cir.ptr<!u8i>, %6 : !u64i, ["bi_alloca"] {alignment = 16 : i64} loc(#loc14)
        %8 = cir.cast(bitcast, %7 : !cir.ptr<!u8i>), !cir.ptr<!void> loc(#loc14)
        %9 = cir.cast(bitcast, %8 : !cir.ptr<!void>), !cir.ptr<!s32i> loc(#loc14)
        cir.store %9, %0 : !cir.ptr<!s32i>, !cir.ptr<!cir.ptr<!s32i>> loc(#loc106)
      } loc(#loc105)
    } loc(#loc103)
    cir.scope {
      %2 = cir.alloca !cir.array<!s32i x 10>, !cir.ptr<!cir.array<!s32i x 10>>, ["source"] {alignment = 16 : i64} loc(#loc108)
      %3 = cir.const #cir.zero : !cir.array<!s32i x 10> loc(#loc108)
      cir.store %3, %2 : !cir.array<!s32i x 10>, !cir.ptr<!cir.array<!s32i x 10>> loc(#loc108)
      %4 = cir.load %0 : !cir.ptr<!cir.ptr<!s32i>>, !cir.ptr<!s32i> loc(#loc20)
      %5 = cir.cast(bitcast, %4 : !cir.ptr<!s32i>), !cir.ptr<!void> loc(#loc20)
      %6 = cir.cast(array_to_ptrdecay, %2 : !cir.ptr<!cir.array<!s32i x 10>>), !cir.ptr<!s32i> loc(#loc21)
      %7 = cir.cast(bitcast, %6 : !cir.ptr<!s32i>), !cir.ptr<!void> loc(#loc21)
      %8 = cir.const #cir.int<10> : !s32i loc(#loc22)
      %9 = cir.cast(integral, %8 : !s32i), !u64i loc(#loc22)
      %10 = cir.const #cir.int<4> : !u64i loc(#loc109)
      %11 = cir.binop(mul, %9, %10) : !u64i loc(#loc110)
      cir.libc.memmove %11 bytes from %7 to %5 : !cir.ptr<!void>, !u64i loc(#loc111)
      %12 = cir.load %0 : !cir.ptr<!cir.ptr<!s32i>>, !cir.ptr<!s32i> loc(#loc27)
      %13 = cir.const #cir.int<0> : !s32i loc(#loc28)
      %14 = cir.ptr_stride(%12 : !cir.ptr<!s32i>, %13 : !s32i), !cir.ptr<!s32i> loc(#loc29)
      %15 = cir.load %14 : !cir.ptr<!s32i>, !s32i loc(#loc27)
      cir.call @printIntLine(%15) : (!s32i) -> () loc(#loc30)
    } loc(#loc107)
    cir.return loc(#loc4)
  } loc(#loc100)
  cir.func no_proto @CWE121_Stack_Based_Buffer_Overflow__CWE131_memmove_03_good() extra(#fn_attr) {
    %0 = cir.get_global @goodG2B1 : !cir.ptr<!cir.func<()>> loc(#loc113)
    cir.call %0() : (!cir.ptr<!cir.func<()>>) -> () loc(#loc33)
    %1 = cir.get_global @goodG2B2 : !cir.ptr<!cir.func<()>> loc(#loc114)
    cir.call %1() : (!cir.ptr<!cir.func<()>>) -> () loc(#loc35)
    cir.return loc(#loc32)
  } loc(#loc112)
  cir.func private @printLine(!cir.ptr<!s8i>) loc(#loc115)
  cir.global "private" constant cir_private dsolocal @".str" = #cir.const_array<"Benign, fixed string\00" : !cir.array<!s8i x 21>> : !cir.array<!s8i x 21> {alignment = 1 : i64} loc(#loc39)
  cir.func no_proto internal private @goodG2B1() extra(#fn_attr) {
    %0 = cir.alloca !cir.ptr<!s32i>, !cir.ptr<!cir.ptr<!s32i>>, ["data"] {alignment = 8 : i64} loc(#loc117)
    %1 = cir.const #cir.ptr<null> : !cir.ptr<!s32i> loc(#loc44)
    cir.store %1, %0 : !cir.ptr<!s32i>, !cir.ptr<!cir.ptr<!s32i>> loc(#loc118)
    cir.scope {
      %2 = cir.const #cir.int<5> : !s32i loc(#loc48)
      %3 = cir.const #cir.int<5> : !s32i loc(#loc49)
      %4 = cir.cmp(ne, %2, %3) : !s32i, !cir.bool loc(#loc120)
      cir.if %4 {
        %5 = cir.get_global @".str" : !cir.ptr<!cir.array<!s8i x 21>> loc(#loc39)
        %6 = cir.cast(array_to_ptrdecay, %5 : !cir.ptr<!cir.array<!s8i x 21>>), !cir.ptr<!s8i> loc(#loc39)
        cir.call @printLine(%6) : (!cir.ptr<!s8i>) -> () loc(#loc53)
      } else {
        %5 = cir.const #cir.int<10> : !s32i loc(#loc54)
        %6 = cir.cast(integral, %5 : !s32i), !u64i loc(#loc54)
        %7 = cir.const #cir.int<4> : !u64i loc(#loc54)
        %8 = cir.binop(mul, %6, %7) : !u64i loc(#loc54)
        %9 = cir.alloca !u8i, !cir.ptr<!u8i>, %8 : !u64i, ["bi_alloca"] {alignment = 16 : i64} loc(#loc54)
        %10 = cir.cast(bitcast, %9 : !cir.ptr<!u8i>), !cir.ptr<!void> loc(#loc54)
        %11 = cir.cast(bitcast, %10 : !cir.ptr<!void>), !cir.ptr<!s32i> loc(#loc54)
        cir.store %11, %0 : !cir.ptr<!s32i>, !cir.ptr<!cir.ptr<!s32i>> loc(#loc122)
      } loc(#loc121)
    } loc(#loc119)
    cir.scope {
      %2 = cir.alloca !cir.array<!s32i x 10>, !cir.ptr<!cir.array<!s32i x 10>>, ["source"] {alignment = 16 : i64} loc(#loc124)
      %3 = cir.const #cir.zero : !cir.array<!s32i x 10> loc(#loc124)
      cir.store %3, %2 : !cir.array<!s32i x 10>, !cir.ptr<!cir.array<!s32i x 10>> loc(#loc124)
      %4 = cir.load %0 : !cir.ptr<!cir.ptr<!s32i>>, !cir.ptr<!s32i> loc(#loc60)
      %5 = cir.cast(bitcast, %4 : !cir.ptr<!s32i>), !cir.ptr<!void> loc(#loc60)
      %6 = cir.cast(array_to_ptrdecay, %2 : !cir.ptr<!cir.array<!s32i x 10>>), !cir.ptr<!s32i> loc(#loc61)
      %7 = cir.cast(bitcast, %6 : !cir.ptr<!s32i>), !cir.ptr<!void> loc(#loc61)
      %8 = cir.const #cir.int<10> : !s32i loc(#loc62)
      %9 = cir.cast(integral, %8 : !s32i), !u64i loc(#loc62)
      %10 = cir.const #cir.int<4> : !u64i loc(#loc125)
      %11 = cir.binop(mul, %9, %10) : !u64i loc(#loc126)
      cir.libc.memmove %11 bytes from %7 to %5 : !cir.ptr<!void>, !u64i loc(#loc127)
      %12 = cir.load %0 : !cir.ptr<!cir.ptr<!s32i>>, !cir.ptr<!s32i> loc(#loc67)
      %13 = cir.const #cir.int<0> : !s32i loc(#loc68)
      %14 = cir.ptr_stride(%12 : !cir.ptr<!s32i>, %13 : !s32i), !cir.ptr<!s32i> loc(#loc69)
      %15 = cir.load %14 : !cir.ptr<!s32i>, !s32i loc(#loc67)
      cir.call @printIntLine(%15) : (!s32i) -> () loc(#loc70)
    } loc(#loc123)
    cir.return loc(#loc41)
  } loc(#loc116)
  cir.func no_proto internal private @goodG2B2() extra(#fn_attr) {
    %0 = cir.alloca !cir.ptr<!s32i>, !cir.ptr<!cir.ptr<!s32i>>, ["data"] {alignment = 8 : i64} loc(#loc129)
    %1 = cir.const #cir.ptr<null> : !cir.ptr<!s32i> loc(#loc75)
    cir.store %1, %0 : !cir.ptr<!s32i>, !cir.ptr<!cir.ptr<!s32i>> loc(#loc130)
    cir.scope {
      %2 = cir.const #cir.int<5> : !s32i loc(#loc79)
      %3 = cir.const #cir.int<5> : !s32i loc(#loc80)
      %4 = cir.cmp(eq, %2, %3) : !s32i, !cir.bool loc(#loc132)
      cir.if %4 {
        %5 = cir.const #cir.int<10> : !s32i loc(#loc82)
        %6 = cir.cast(integral, %5 : !s32i), !u64i loc(#loc82)
        %7 = cir.const #cir.int<4> : !u64i loc(#loc82)
        %8 = cir.binop(mul, %6, %7) : !u64i loc(#loc82)
        %9 = cir.alloca !u8i, !cir.ptr<!u8i>, %8 : !u64i, ["bi_alloca"] {alignment = 16 : i64} loc(#loc82)
        %10 = cir.cast(bitcast, %9 : !cir.ptr<!u8i>), !cir.ptr<!void> loc(#loc82)
        %11 = cir.cast(bitcast, %10 : !cir.ptr<!void>), !cir.ptr<!s32i> loc(#loc82)
        cir.store %11, %0 : !cir.ptr<!s32i>, !cir.ptr<!cir.ptr<!s32i>> loc(#loc134)
      } loc(#loc133)
    } loc(#loc131)
    cir.scope {
      %2 = cir.alloca !cir.array<!s32i x 10>, !cir.ptr<!cir.array<!s32i x 10>>, ["source"] {alignment = 16 : i64} loc(#loc136)
      %3 = cir.const #cir.zero : !cir.array<!s32i x 10> loc(#loc136)
      cir.store %3, %2 : !cir.array<!s32i x 10>, !cir.ptr<!cir.array<!s32i x 10>> loc(#loc136)
      %4 = cir.load %0 : !cir.ptr<!cir.ptr<!s32i>>, !cir.ptr<!s32i> loc(#loc88)
      %5 = cir.cast(bitcast, %4 : !cir.ptr<!s32i>), !cir.ptr<!void> loc(#loc88)
      %6 = cir.cast(array_to_ptrdecay, %2 : !cir.ptr<!cir.array<!s32i x 10>>), !cir.ptr<!s32i> loc(#loc89)
      %7 = cir.cast(bitcast, %6 : !cir.ptr<!s32i>), !cir.ptr<!void> loc(#loc89)
      %8 = cir.const #cir.int<10> : !s32i loc(#loc90)
      %9 = cir.cast(integral, %8 : !s32i), !u64i loc(#loc90)
      %10 = cir.const #cir.int<4> : !u64i loc(#loc137)
      %11 = cir.binop(mul, %9, %10) : !u64i loc(#loc138)
      cir.libc.memmove %11 bytes from %7 to %5 : !cir.ptr<!void>, !u64i loc(#loc139)
      %12 = cir.load %0 : !cir.ptr<!cir.ptr<!s32i>>, !cir.ptr<!s32i> loc(#loc95)
      %13 = cir.const #cir.int<0> : !s32i loc(#loc96)
      %14 = cir.ptr_stride(%12 : !cir.ptr<!s32i>, %13 : !s32i), !cir.ptr<!s32i> loc(#loc97)
      %15 = cir.load %14 : !cir.ptr<!s32i>, !s32i loc(#loc95)
      cir.call @printIntLine(%15) : (!s32i) -> () loc(#loc98)
    } loc(#loc135)
    cir.return loc(#loc72)
  } loc(#loc128)
} loc(#loc)
#loc = loc("/workspaces/juliet-c/testcases/CWE121_Stack_Based_Buffer_Overflow/s01/CWE121_Stack_Based_Buffer_Overflow__CWE131_memmove_03.c":0:0)
#loc1 = loc("../../../testcasesupport/std_testcase_io.h":18:1)
#loc2 = loc("../../../testcasesupport/std_testcase_io.h":18:33)
#loc3 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE131_memmove_03.c":21:1)
#loc4 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE131_memmove_03.c":36:1)
#loc5 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE131_memmove_03.c":23:5)
#loc6 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE131_memmove_03.c":23:11)
#loc7 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE131_memmove_03.c":24:12)
#loc8 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE131_memmove_03.c":24:5)
#loc9 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE131_memmove_03.c":25:5)
#loc10 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE131_memmove_03.c":29:5)
#loc11 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE131_memmove_03.c":25:8)
#loc12 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE131_memmove_03.c":25:11)
#loc13 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE131_memmove_03.c":26:5)
#loc14 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE131_memmove_03.c":28:23)
#loc15 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE131_memmove_03.c":28:9)
#loc16 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE131_memmove_03.c":30:5)
#loc17 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE131_memmove_03.c":35:5)
#loc18 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE131_memmove_03.c":31:9)
#loc19 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE131_memmove_03.c":31:28)
#loc20 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE131_memmove_03.c":33:17)
#loc21 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE131_memmove_03.c":33:23)
#loc22 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE131_memmove_03.c":33:31)
#loc23 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE131_memmove_03.c":33:34)
#loc24 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE131_memmove_03.c":33:44)
#loc25 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE131_memmove_03.c":33:9)
#loc26 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE131_memmove_03.c":33:45)
#loc27 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE131_memmove_03.c":34:22)
#loc28 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE131_memmove_03.c":34:27)
#loc29 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE131_memmove_03.c":34:28)
#loc30 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE131_memmove_03.c":34:9)
#loc31 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE131_memmove_03.c":83:1)
#loc32 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE131_memmove_03.c":87:1)
#loc33 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE131_memmove_03.c":85:5)
#loc34 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE131_memmove_03.c":85:14)
#loc35 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE131_memmove_03.c":86:5)
#loc36 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE131_memmove_03.c":86:14)
#loc37 = loc("../../../testcasesupport/std_testcase_io.h":14:1)
#loc38 = loc("../../../testcasesupport/std_testcase_io.h":14:33)
#loc39 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE131_memmove_03.c":50:19)
#loc40 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE131_memmove_03.c":43:1)
#loc41 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE131_memmove_03.c":63:1)
#loc42 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE131_memmove_03.c":45:5)
#loc43 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE131_memmove_03.c":45:11)
#loc44 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE131_memmove_03.c":46:12)
#loc45 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE131_memmove_03.c":46:5)
#loc46 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE131_memmove_03.c":47:5)
#loc47 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE131_memmove_03.c":56:5)
#loc48 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE131_memmove_03.c":47:8)
#loc49 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE131_memmove_03.c":47:11)
#loc50 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE131_memmove_03.c":48:5)
#loc51 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE131_memmove_03.c":51:5)
#loc52 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE131_memmove_03.c":53:5)
#loc53 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE131_memmove_03.c":50:9)
#loc54 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE131_memmove_03.c":55:23)
#loc55 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE131_memmove_03.c":55:9)
#loc56 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE131_memmove_03.c":57:5)
#loc57 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE131_memmove_03.c":62:5)
#loc58 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE131_memmove_03.c":58:9)
#loc59 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE131_memmove_03.c":58:28)
#loc60 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE131_memmove_03.c":60:17)
#loc61 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE131_memmove_03.c":60:23)
#loc62 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE131_memmove_03.c":60:31)
#loc63 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE131_memmove_03.c":60:34)
#loc64 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE131_memmove_03.c":60:44)
#loc65 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE131_memmove_03.c":60:9)
#loc66 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE131_memmove_03.c":60:45)
#loc67 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE131_memmove_03.c":61:22)
#loc68 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE131_memmove_03.c":61:27)
#loc69 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE131_memmove_03.c":61:28)
#loc70 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE131_memmove_03.c":61:9)
#loc71 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE131_memmove_03.c":66:1)
#loc72 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE131_memmove_03.c":81:1)
#loc73 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE131_memmove_03.c":68:5)
#loc74 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE131_memmove_03.c":68:11)
#loc75 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE131_memmove_03.c":69:12)
#loc76 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE131_memmove_03.c":69:5)
#loc77 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE131_memmove_03.c":70:5)
#loc78 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE131_memmove_03.c":74:5)
#loc79 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE131_memmove_03.c":70:8)
#loc80 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE131_memmove_03.c":70:11)
#loc81 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE131_memmove_03.c":71:5)
#loc82 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE131_memmove_03.c":73:23)
#loc83 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE131_memmove_03.c":73:9)
#loc84 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE131_memmove_03.c":75:5)
#loc85 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE131_memmove_03.c":80:5)
#loc86 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE131_memmove_03.c":76:9)
#loc87 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE131_memmove_03.c":76:28)
#loc88 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE131_memmove_03.c":78:17)
#loc89 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE131_memmove_03.c":78:23)
#loc90 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE131_memmove_03.c":78:31)
#loc91 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE131_memmove_03.c":78:34)
#loc92 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE131_memmove_03.c":78:44)
#loc93 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE131_memmove_03.c":78:9)
#loc94 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE131_memmove_03.c":78:45)
#loc95 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE131_memmove_03.c":79:22)
#loc96 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE131_memmove_03.c":79:27)
#loc97 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE131_memmove_03.c":79:28)
#loc98 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE131_memmove_03.c":79:9)
#loc99 = loc(fused[#loc1, #loc2])
#loc100 = loc(fused[#loc3, #loc4])
#loc101 = loc(fused[#loc5, #loc6])
#loc102 = loc(fused[#loc8, #loc7])
#loc103 = loc(fused[#loc9, #loc10])
#loc104 = loc(fused[#loc11, #loc12])
#loc105 = loc(fused[#loc13, #loc10])
#loc106 = loc(fused[#loc15, #loc14])
#loc107 = loc(fused[#loc16, #loc17])
#loc108 = loc(fused[#loc18, #loc19])
#loc109 = loc(fused[#loc23, #loc24])
#loc110 = loc(fused[#loc22, #loc24])
#loc111 = loc(fused[#loc25, #loc26])
#loc112 = loc(fused[#loc31, #loc32])
#loc113 = loc(fused[#loc33, #loc34])
#loc114 = loc(fused[#loc35, #loc36])
#loc115 = loc(fused[#loc37, #loc38])
#loc116 = loc(fused[#loc40, #loc41])
#loc117 = loc(fused[#loc42, #loc43])
#loc118 = loc(fused[#loc45, #loc44])
#loc119 = loc(fused[#loc46, #loc47])
#loc120 = loc(fused[#loc48, #loc49])
#loc121 = loc(fused[#loc50, #loc51, #loc52, #loc47])
#loc122 = loc(fused[#loc55, #loc54])
#loc123 = loc(fused[#loc56, #loc57])
#loc124 = loc(fused[#loc58, #loc59])
#loc125 = loc(fused[#loc63, #loc64])
#loc126 = loc(fused[#loc62, #loc64])
#loc127 = loc(fused[#loc65, #loc66])
#loc128 = loc(fused[#loc71, #loc72])
#loc129 = loc(fused[#loc73, #loc74])
#loc130 = loc(fused[#loc76, #loc75])
#loc131 = loc(fused[#loc77, #loc78])
#loc132 = loc(fused[#loc79, #loc80])
#loc133 = loc(fused[#loc81, #loc78])
#loc134 = loc(fused[#loc83, #loc82])
#loc135 = loc(fused[#loc84, #loc85])
#loc136 = loc(fused[#loc86, #loc87])
#loc137 = loc(fused[#loc91, #loc92])
#loc138 = loc(fused[#loc90, #loc92])
#loc139 = loc(fused[#loc93, #loc94])
