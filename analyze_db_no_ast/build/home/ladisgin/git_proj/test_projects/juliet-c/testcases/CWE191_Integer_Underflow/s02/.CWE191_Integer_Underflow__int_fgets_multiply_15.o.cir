!s32i = !cir.int<s, 32>
!s64i = !cir.int<s, 64>
!s8i = !cir.int<s, 8>
!ty__IO_codecvt = !cir.struct<struct "_IO_codecvt" incomplete>
!ty__IO_marker = !cir.struct<struct "_IO_marker" incomplete>
!ty__IO_wide_data = !cir.struct<struct "_IO_wide_data" incomplete>
!u16i = !cir.int<u, 16>
!u64i = !cir.int<u, 64>
!void = !cir.void
#fn_attr = #cir<extra({nothrow = #cir.nothrow})>
#fn_attr1 = #cir<extra({inline = #cir.inline<no>, nothrow = #cir.nothrow, optnone = #cir.optnone})>
!ty__IO_FILE = !cir.struct<struct "_IO_FILE" {!s32i, !cir.ptr<!s8i>, !cir.ptr<!s8i>, !cir.ptr<!s8i>, !cir.ptr<!s8i>, !cir.ptr<!s8i>, !cir.ptr<!s8i>, !cir.ptr<!s8i>, !cir.ptr<!s8i>, !cir.ptr<!s8i>, !cir.ptr<!s8i>, !cir.ptr<!s8i>, !cir.ptr<!ty__IO_marker>, !cir.ptr<!cir.struct<struct "_IO_FILE">>, !s32i, !s32i, !s64i, !u16i, !s8i, !cir.array<!s8i x 1>, !cir.ptr<!void>, !s64i, !cir.ptr<!ty__IO_codecvt>, !cir.ptr<!ty__IO_wide_data>, !cir.ptr<!cir.struct<struct "_IO_FILE">>, !cir.ptr<!void>, !u64i, !s32i, !cir.array<!s8i x 20>} #cir.record.decl.ast>
module @"/home/ladisgin/git_proj/test_projects/juliet-c/testcases/CWE191_Integer_Underflow/s02/CWE191_Integer_Underflow__int_fgets_multiply_15.c" attributes {cir.lang = #cir.lang<c>, cir.sob = #cir.signed_overflow_behavior<undefined>, cir.triple = "x86_64-unknown-linux-gnu", dlti.dl_spec = #dlti.dl_spec<#dlti.dl_entry<i32, dense<32> : vector<2xi64>>, #dlti.dl_entry<f64, dense<64> : vector<2xi64>>, #dlti.dl_entry<f16, dense<16> : vector<2xi64>>, #dlti.dl_entry<!llvm.ptr<271>, dense<32> : vector<4xi64>>, #dlti.dl_entry<!llvm.ptr<270>, dense<32> : vector<4xi64>>, #dlti.dl_entry<f128, dense<128> : vector<2xi64>>, #dlti.dl_entry<i64, dense<64> : vector<2xi64>>, #dlti.dl_entry<!llvm.ptr<272>, dense<64> : vector<4xi64>>, #dlti.dl_entry<i128, dense<128> : vector<2xi64>>, #dlti.dl_entry<f80, dense<128> : vector<2xi64>>, #dlti.dl_entry<i1, dense<8> : vector<2xi64>>, #dlti.dl_entry<!llvm.ptr, dense<64> : vector<4xi64>>, #dlti.dl_entry<i16, dense<16> : vector<2xi64>>, #dlti.dl_entry<i8, dense<8> : vector<2xi64>>, #dlti.dl_entry<"dlti.endianness", "little">, #dlti.dl_entry<"dlti.stack_alignment", 128 : i64>>, llvm.data_layout = "e-m:e-p270:32:32-p271:32:32-p272:64:64-i64:64-i128:128-f80:128-n8:16:32:64-S128"} {
  cir.func private  @fgets(!cir.ptr<!s8i>, !s32i, !cir.ptr<!ty__IO_FILE>) -> !cir.ptr<!s8i> loc(#loc269)
  cir.global "private"  external @stdin : !cir.ptr<!ty__IO_FILE> {alignment = 8 : i64} loc(#loc270)
  cir.func private  @atoi(!cir.ptr<!s8i>) -> !s32i extra(#fn_attr) loc(#loc271)
  cir.func private  @printLine(!cir.ptr<!s8i>) loc(#loc272)
  cir.global "private"  constant internal dsolocal @".str" = #cir.const_array<"fgets() failed.\00" : !cir.array<!s8i x 16>> : !cir.array<!s8i x 16> {alignment = 1 : i64} loc(#loc9)
  cir.global "private"  constant internal dsolocal @".str1" = #cir.const_array<"Benign, fixed string\00" : !cir.array<!s8i x 21>> : !cir.array<!s8i x 21> {alignment = 1 : i64} loc(#loc10)
  cir.func private  @printIntLine(!s32i) loc(#loc273)
  cir.func no_proto  @CWE191_Integer_Underflow__int_fgets_multiply_15_bad() extra(#fn_attr1) {
    %0 = cir.alloca !s32i, !cir.ptr<!s32i>, ["data"] {alignment = 4 : i64} loc(#loc275)
    %1 = cir.const #cir.int<0> : !s32i loc(#loc17)
    cir.store %1, %0 : !s32i, !cir.ptr<!s32i> loc(#loc276)
    cir.scope {
      %2 = cir.const #cir.int<6> : !s32i loc(#loc21)
      cir.switch (%2 : !s32i) [
      case (equal, 6) {
        cir.scope {
          %3 = cir.alloca !cir.array<!s8i x 14>, !cir.ptr<!cir.array<!s8i x 14>>, ["inputBuffer"] {alignment = 1 : i64} loc(#loc279)
          %4 = cir.const #cir.zero : !cir.array<!s8i x 14> loc(#loc279)
          cir.store %4, %3 : !cir.array<!s8i x 14>, !cir.ptr<!cir.array<!s8i x 14>> loc(#loc279)
          cir.scope {
            %5 = cir.cast(array_to_ptrdecay, %3 : !cir.ptr<!cir.array<!s8i x 14>>), !cir.ptr<!s8i> loc(#loc28)
            %6 = cir.const #cir.int<3> : !s32i loc(#loc29)
            %7 = cir.cast(integral, %6 : !s32i), !u64i loc(#loc29)
            %8 = cir.const #cir.int<4> : !u64i loc(#loc29)
            %9 = cir.binop(mul, %7, %8) : !u64i loc(#loc29)
            %10 = cir.const #cir.int<2> : !s32i loc(#loc29)
            %11 = cir.cast(integral, %10 : !s32i), !u64i loc(#loc29)
            %12 = cir.binop(add, %9, %11) : !u64i loc(#loc29)
            %13 = cir.cast(integral, %12 : !u64i), !s32i loc(#loc29)
            %14 = cir.get_global @stdin : !cir.ptr<!cir.ptr<!ty__IO_FILE>> loc(#loc270)
            %15 = cir.load %14 : !cir.ptr<!cir.ptr<!ty__IO_FILE>>, !cir.ptr<!ty__IO_FILE> loc(#loc30)
            %16 = cir.call @fgets(%5, %13, %15) : (!cir.ptr<!s8i>, !s32i, !cir.ptr<!ty__IO_FILE>) -> !cir.ptr<!s8i> loc(#loc31)
            %17 = cir.const #cir.ptr<null> : !cir.ptr<!void> loc(#loc32)
            %18 = cir.cast(bitcast, %17 : !cir.ptr<!void>), !cir.ptr<!s8i> loc(#loc32)
            %19 = cir.cmp(ne, %16, %18) : !cir.ptr<!s8i>, !s32i loc(#loc281)
            %20 = cir.cast(int_to_bool, %19 : !s32i), !cir.bool loc(#loc33)
            cir.if %20 {
              %21 = cir.cast(array_to_ptrdecay, %3 : !cir.ptr<!cir.array<!s8i x 14>>), !cir.ptr<!s8i> loc(#loc37)
              %22 = cir.call @atoi(%21) : (!cir.ptr<!s8i>) -> !s32i extra(#fn_attr) loc(#loc38)
              cir.store %22, %0 : !s32i, !cir.ptr<!s32i> loc(#loc283)
            } else {
              %21 = cir.get_global @".str" : !cir.ptr<!cir.array<!s8i x 16>> loc(#loc9)
              %22 = cir.cast(array_to_ptrdecay, %21 : !cir.ptr<!cir.array<!s8i x 16>>), !cir.ptr<!s8i> loc(#loc9)
              cir.call @printLine(%22) : (!cir.ptr<!s8i>) -> () loc(#loc41)
            } loc(#loc282)
          } loc(#loc280)
        } loc(#loc278)
        cir.break loc(#loc42)
      },
      case (default) {
        %3 = cir.get_global @".str1" : !cir.ptr<!cir.array<!s8i x 21>> loc(#loc10)
        %4 = cir.cast(array_to_ptrdecay, %3 : !cir.ptr<!cir.array<!s8i x 21>>), !cir.ptr<!s8i> loc(#loc10)
        cir.call @printLine(%4) : (!cir.ptr<!s8i>) -> () loc(#loc43)
        cir.break loc(#loc44)
      }
      ] loc(#loc19)
    } loc(#loc277)
    cir.scope {
      %2 = cir.const #cir.int<7> : !s32i loc(#loc47)
      cir.switch (%2 : !s32i) [
      case (equal, 7) {
        cir.scope {
          %3 = cir.load %0 : !cir.ptr<!s32i>, !s32i loc(#loc50)
          %4 = cir.const #cir.int<0> : !s32i loc(#loc51)
          %5 = cir.cmp(lt, %3, %4) : !s32i, !s32i loc(#loc286)
          %6 = cir.cast(int_to_bool, %5 : !s32i), !cir.bool loc(#loc52)
          cir.if %6 {
            %7 = cir.alloca !s32i, !cir.ptr<!s32i>, ["result", init] {alignment = 4 : i64} loc(#loc288)
            %8 = cir.load %0 : !cir.ptr<!s32i>, !s32i loc(#loc56)
            %9 = cir.const #cir.int<2> : !s32i loc(#loc55)
            %10 = cir.binop(mul, %8, %9) nsw : !s32i loc(#loc56)
            cir.store %10, %7 : !s32i, !cir.ptr<!s32i> loc(#loc288)
            %11 = cir.load %7 : !cir.ptr<!s32i>, !s32i loc(#loc57)
            cir.call @printIntLine(%11) : (!s32i) -> () loc(#loc58)
          } loc(#loc287)
        } loc(#loc285)
        cir.break loc(#loc59)
      },
      case (default) {
        %3 = cir.get_global @".str1" : !cir.ptr<!cir.array<!s8i x 21>> loc(#loc60)
        %4 = cir.cast(array_to_ptrdecay, %3 : !cir.ptr<!cir.array<!s8i x 21>>), !cir.ptr<!s8i> loc(#loc60)
        cir.call @printLine(%4) : (!cir.ptr<!s8i>) -> () loc(#loc61)
        cir.break loc(#loc62)
      }
      ] loc(#loc45)
    } loc(#loc284)
    cir.return loc(#loc14)
  } loc(#loc274)
  cir.func no_proto  @CWE191_Integer_Underflow__int_fgets_multiply_15_good() extra(#fn_attr1) {
    %0 = cir.get_global @goodB2G1 : !cir.ptr<!cir.func<!void ()>> loc(#loc290)
    cir.call %0() : (!cir.ptr<!cir.func<!void ()>>) -> () loc(#loc65)
    %1 = cir.get_global @goodB2G2 : !cir.ptr<!cir.func<!void ()>> loc(#loc291)
    cir.call %1() : (!cir.ptr<!cir.func<!void ()>>) -> () loc(#loc67)
    %2 = cir.get_global @goodG2B1 : !cir.ptr<!cir.func<!void ()>> loc(#loc292)
    cir.call %2() : (!cir.ptr<!cir.func<!void ()>>) -> () loc(#loc69)
    %3 = cir.get_global @goodG2B2 : !cir.ptr<!cir.func<!void ()>> loc(#loc293)
    cir.call %3() : (!cir.ptr<!cir.func<!void ()>>) -> () loc(#loc71)
    cir.return loc(#loc64)
  } loc(#loc289)
  cir.global "private"  constant internal dsolocal @".str2" = #cir.const_array<"data value is too small to perform multiplication.\00" : !cir.array<!s8i x 51>> : !cir.array<!s8i x 51> {alignment = 1 : i64} loc(#loc73)
  cir.func no_proto internal private  @goodB2G1() extra(#fn_attr1) {
    %0 = cir.alloca !s32i, !cir.ptr<!s32i>, ["data"] {alignment = 4 : i64} loc(#loc295)
    %1 = cir.const #cir.int<0> : !s32i loc(#loc78)
    cir.store %1, %0 : !s32i, !cir.ptr<!s32i> loc(#loc296)
    cir.scope {
      %2 = cir.const #cir.int<6> : !s32i loc(#loc82)
      cir.switch (%2 : !s32i) [
      case (equal, 6) {
        cir.scope {
          %3 = cir.alloca !cir.array<!s8i x 14>, !cir.ptr<!cir.array<!s8i x 14>>, ["inputBuffer"] {alignment = 1 : i64} loc(#loc299)
          %4 = cir.const #cir.zero : !cir.array<!s8i x 14> loc(#loc299)
          cir.store %4, %3 : !cir.array<!s8i x 14>, !cir.ptr<!cir.array<!s8i x 14>> loc(#loc299)
          cir.scope {
            %5 = cir.cast(array_to_ptrdecay, %3 : !cir.ptr<!cir.array<!s8i x 14>>), !cir.ptr<!s8i> loc(#loc89)
            %6 = cir.const #cir.int<3> : !s32i loc(#loc90)
            %7 = cir.cast(integral, %6 : !s32i), !u64i loc(#loc90)
            %8 = cir.const #cir.int<4> : !u64i loc(#loc90)
            %9 = cir.binop(mul, %7, %8) : !u64i loc(#loc90)
            %10 = cir.const #cir.int<2> : !s32i loc(#loc90)
            %11 = cir.cast(integral, %10 : !s32i), !u64i loc(#loc90)
            %12 = cir.binop(add, %9, %11) : !u64i loc(#loc90)
            %13 = cir.cast(integral, %12 : !u64i), !s32i loc(#loc90)
            %14 = cir.get_global @stdin : !cir.ptr<!cir.ptr<!ty__IO_FILE>> loc(#loc270)
            %15 = cir.load %14 : !cir.ptr<!cir.ptr<!ty__IO_FILE>>, !cir.ptr<!ty__IO_FILE> loc(#loc91)
            %16 = cir.call @fgets(%5, %13, %15) : (!cir.ptr<!s8i>, !s32i, !cir.ptr<!ty__IO_FILE>) -> !cir.ptr<!s8i> loc(#loc92)
            %17 = cir.const #cir.ptr<null> : !cir.ptr<!void> loc(#loc93)
            %18 = cir.cast(bitcast, %17 : !cir.ptr<!void>), !cir.ptr<!s8i> loc(#loc93)
            %19 = cir.cmp(ne, %16, %18) : !cir.ptr<!s8i>, !s32i loc(#loc301)
            %20 = cir.cast(int_to_bool, %19 : !s32i), !cir.bool loc(#loc94)
            cir.if %20 {
              %21 = cir.cast(array_to_ptrdecay, %3 : !cir.ptr<!cir.array<!s8i x 14>>), !cir.ptr<!s8i> loc(#loc98)
              %22 = cir.call @atoi(%21) : (!cir.ptr<!s8i>) -> !s32i extra(#fn_attr) loc(#loc99)
              cir.store %22, %0 : !s32i, !cir.ptr<!s32i> loc(#loc303)
            } else {
              %21 = cir.get_global @".str" : !cir.ptr<!cir.array<!s8i x 16>> loc(#loc102)
              %22 = cir.cast(array_to_ptrdecay, %21 : !cir.ptr<!cir.array<!s8i x 16>>), !cir.ptr<!s8i> loc(#loc102)
              cir.call @printLine(%22) : (!cir.ptr<!s8i>) -> () loc(#loc103)
            } loc(#loc302)
          } loc(#loc300)
        } loc(#loc298)
        cir.break loc(#loc104)
      },
      case (default) {
        %3 = cir.get_global @".str1" : !cir.ptr<!cir.array<!s8i x 21>> loc(#loc105)
        %4 = cir.cast(array_to_ptrdecay, %3 : !cir.ptr<!cir.array<!s8i x 21>>), !cir.ptr<!s8i> loc(#loc105)
        cir.call @printLine(%4) : (!cir.ptr<!s8i>) -> () loc(#loc106)
        cir.break loc(#loc107)
      }
      ] loc(#loc80)
    } loc(#loc297)
    cir.scope {
      %2 = cir.const #cir.int<8> : !s32i loc(#loc110)
      cir.switch (%2 : !s32i) [
      case (equal, 7) {
        %3 = cir.get_global @".str1" : !cir.ptr<!cir.array<!s8i x 21>> loc(#loc111)
        %4 = cir.cast(array_to_ptrdecay, %3 : !cir.ptr<!cir.array<!s8i x 21>>), !cir.ptr<!s8i> loc(#loc111)
        cir.call @printLine(%4) : (!cir.ptr<!s8i>) -> () loc(#loc112)
        cir.break loc(#loc113)
      },
      case (default) {
        cir.scope {
          %3 = cir.load %0 : !cir.ptr<!s32i>, !s32i loc(#loc116)
          %4 = cir.const #cir.int<0> : !s32i loc(#loc117)
          %5 = cir.cmp(lt, %3, %4) : !s32i, !s32i loc(#loc306)
          %6 = cir.cast(int_to_bool, %5 : !s32i), !cir.bool loc(#loc118)
          cir.if %6 {
            cir.scope {
              %7 = cir.load %0 : !cir.ptr<!s32i>, !s32i loc(#loc122)
              %8 = cir.const #cir.int<2147483647> : !s32i loc(#loc123)
              %9 = cir.unary(minus, %8) : !s32i, !s32i loc(#loc123)
              %10 = cir.const #cir.int<1> : !s32i loc(#loc123)
              %11 = cir.binop(sub, %9, %10) nsw : !s32i loc(#loc123)
              %12 = cir.const #cir.int<2> : !s32i loc(#loc124)
              %13 = cir.binop(div, %11, %12) : !s32i loc(#loc309)
              %14 = cir.cmp(gt, %7, %13) : !s32i, !s32i loc(#loc310)
              %15 = cir.cast(int_to_bool, %14 : !s32i), !cir.bool loc(#loc126)
              cir.if %15 {
                %16 = cir.alloca !s32i, !cir.ptr<!s32i>, ["result", init] {alignment = 4 : i64} loc(#loc312)
                %17 = cir.load %0 : !cir.ptr<!s32i>, !s32i loc(#loc132)
                %18 = cir.const #cir.int<2> : !s32i loc(#loc131)
                %19 = cir.binop(mul, %17, %18) nsw : !s32i loc(#loc132)
                cir.store %19, %16 : !s32i, !cir.ptr<!s32i> loc(#loc312)
                %20 = cir.load %16 : !cir.ptr<!s32i>, !s32i loc(#loc133)
                cir.call @printIntLine(%20) : (!s32i) -> () loc(#loc134)
              } else {
                %16 = cir.get_global @".str2" : !cir.ptr<!cir.array<!s8i x 51>> loc(#loc73)
                %17 = cir.cast(array_to_ptrdecay, %16 : !cir.ptr<!cir.array<!s8i x 51>>), !cir.ptr<!s8i> loc(#loc73)
                cir.call @printLine(%17) : (!cir.ptr<!s8i>) -> () loc(#loc135)
              } loc(#loc311)
            } loc(#loc308)
          } loc(#loc307)
        } loc(#loc305)
        cir.break loc(#loc136)
      }
      ] loc(#loc108)
    } loc(#loc304)
    cir.return loc(#loc75)
  } loc(#loc294)
  cir.func no_proto internal private  @goodB2G2() extra(#fn_attr1) {
    %0 = cir.alloca !s32i, !cir.ptr<!s32i>, ["data"] {alignment = 4 : i64} loc(#loc314)
    %1 = cir.const #cir.int<0> : !s32i loc(#loc141)
    cir.store %1, %0 : !s32i, !cir.ptr<!s32i> loc(#loc315)
    cir.scope {
      %2 = cir.const #cir.int<6> : !s32i loc(#loc145)
      cir.switch (%2 : !s32i) [
      case (equal, 6) {
        cir.scope {
          %3 = cir.alloca !cir.array<!s8i x 14>, !cir.ptr<!cir.array<!s8i x 14>>, ["inputBuffer"] {alignment = 1 : i64} loc(#loc318)
          %4 = cir.const #cir.zero : !cir.array<!s8i x 14> loc(#loc318)
          cir.store %4, %3 : !cir.array<!s8i x 14>, !cir.ptr<!cir.array<!s8i x 14>> loc(#loc318)
          cir.scope {
            %5 = cir.cast(array_to_ptrdecay, %3 : !cir.ptr<!cir.array<!s8i x 14>>), !cir.ptr<!s8i> loc(#loc152)
            %6 = cir.const #cir.int<3> : !s32i loc(#loc153)
            %7 = cir.cast(integral, %6 : !s32i), !u64i loc(#loc153)
            %8 = cir.const #cir.int<4> : !u64i loc(#loc153)
            %9 = cir.binop(mul, %7, %8) : !u64i loc(#loc153)
            %10 = cir.const #cir.int<2> : !s32i loc(#loc153)
            %11 = cir.cast(integral, %10 : !s32i), !u64i loc(#loc153)
            %12 = cir.binop(add, %9, %11) : !u64i loc(#loc153)
            %13 = cir.cast(integral, %12 : !u64i), !s32i loc(#loc153)
            %14 = cir.get_global @stdin : !cir.ptr<!cir.ptr<!ty__IO_FILE>> loc(#loc270)
            %15 = cir.load %14 : !cir.ptr<!cir.ptr<!ty__IO_FILE>>, !cir.ptr<!ty__IO_FILE> loc(#loc154)
            %16 = cir.call @fgets(%5, %13, %15) : (!cir.ptr<!s8i>, !s32i, !cir.ptr<!ty__IO_FILE>) -> !cir.ptr<!s8i> loc(#loc155)
            %17 = cir.const #cir.ptr<null> : !cir.ptr<!void> loc(#loc156)
            %18 = cir.cast(bitcast, %17 : !cir.ptr<!void>), !cir.ptr<!s8i> loc(#loc156)
            %19 = cir.cmp(ne, %16, %18) : !cir.ptr<!s8i>, !s32i loc(#loc320)
            %20 = cir.cast(int_to_bool, %19 : !s32i), !cir.bool loc(#loc157)
            cir.if %20 {
              %21 = cir.cast(array_to_ptrdecay, %3 : !cir.ptr<!cir.array<!s8i x 14>>), !cir.ptr<!s8i> loc(#loc161)
              %22 = cir.call @atoi(%21) : (!cir.ptr<!s8i>) -> !s32i extra(#fn_attr) loc(#loc162)
              cir.store %22, %0 : !s32i, !cir.ptr<!s32i> loc(#loc322)
            } else {
              %21 = cir.get_global @".str" : !cir.ptr<!cir.array<!s8i x 16>> loc(#loc165)
              %22 = cir.cast(array_to_ptrdecay, %21 : !cir.ptr<!cir.array<!s8i x 16>>), !cir.ptr<!s8i> loc(#loc165)
              cir.call @printLine(%22) : (!cir.ptr<!s8i>) -> () loc(#loc166)
            } loc(#loc321)
          } loc(#loc319)
        } loc(#loc317)
        cir.break loc(#loc167)
      },
      case (default) {
        %3 = cir.get_global @".str1" : !cir.ptr<!cir.array<!s8i x 21>> loc(#loc168)
        %4 = cir.cast(array_to_ptrdecay, %3 : !cir.ptr<!cir.array<!s8i x 21>>), !cir.ptr<!s8i> loc(#loc168)
        cir.call @printLine(%4) : (!cir.ptr<!s8i>) -> () loc(#loc169)
        cir.break loc(#loc170)
      }
      ] loc(#loc143)
    } loc(#loc316)
    cir.scope {
      %2 = cir.const #cir.int<7> : !s32i loc(#loc173)
      cir.switch (%2 : !s32i) [
      case (equal, 7) {
        cir.scope {
          %3 = cir.load %0 : !cir.ptr<!s32i>, !s32i loc(#loc176)
          %4 = cir.const #cir.int<0> : !s32i loc(#loc177)
          %5 = cir.cmp(lt, %3, %4) : !s32i, !s32i loc(#loc325)
          %6 = cir.cast(int_to_bool, %5 : !s32i), !cir.bool loc(#loc178)
          cir.if %6 {
            cir.scope {
              %7 = cir.load %0 : !cir.ptr<!s32i>, !s32i loc(#loc182)
              %8 = cir.const #cir.int<2147483647> : !s32i loc(#loc183)
              %9 = cir.unary(minus, %8) : !s32i, !s32i loc(#loc183)
              %10 = cir.const #cir.int<1> : !s32i loc(#loc183)
              %11 = cir.binop(sub, %9, %10) nsw : !s32i loc(#loc183)
              %12 = cir.const #cir.int<2> : !s32i loc(#loc184)
              %13 = cir.binop(div, %11, %12) : !s32i loc(#loc328)
              %14 = cir.cmp(gt, %7, %13) : !s32i, !s32i loc(#loc329)
              %15 = cir.cast(int_to_bool, %14 : !s32i), !cir.bool loc(#loc186)
              cir.if %15 {
                %16 = cir.alloca !s32i, !cir.ptr<!s32i>, ["result", init] {alignment = 4 : i64} loc(#loc331)
                %17 = cir.load %0 : !cir.ptr<!s32i>, !s32i loc(#loc192)
                %18 = cir.const #cir.int<2> : !s32i loc(#loc191)
                %19 = cir.binop(mul, %17, %18) nsw : !s32i loc(#loc192)
                cir.store %19, %16 : !s32i, !cir.ptr<!s32i> loc(#loc331)
                %20 = cir.load %16 : !cir.ptr<!s32i>, !s32i loc(#loc193)
                cir.call @printIntLine(%20) : (!s32i) -> () loc(#loc194)
              } else {
                %16 = cir.get_global @".str2" : !cir.ptr<!cir.array<!s8i x 51>> loc(#loc195)
                %17 = cir.cast(array_to_ptrdecay, %16 : !cir.ptr<!cir.array<!s8i x 51>>), !cir.ptr<!s8i> loc(#loc195)
                cir.call @printLine(%17) : (!cir.ptr<!s8i>) -> () loc(#loc196)
              } loc(#loc330)
            } loc(#loc327)
          } loc(#loc326)
        } loc(#loc324)
        cir.break loc(#loc197)
      },
      case (default) {
        %3 = cir.get_global @".str1" : !cir.ptr<!cir.array<!s8i x 21>> loc(#loc198)
        %4 = cir.cast(array_to_ptrdecay, %3 : !cir.ptr<!cir.array<!s8i x 21>>), !cir.ptr<!s8i> loc(#loc198)
        cir.call @printLine(%4) : (!cir.ptr<!s8i>) -> () loc(#loc199)
        cir.break loc(#loc200)
      }
      ] loc(#loc171)
    } loc(#loc323)
    cir.return loc(#loc138)
  } loc(#loc313)
  cir.func no_proto internal private  @goodG2B1() extra(#fn_attr1) {
    %0 = cir.alloca !s32i, !cir.ptr<!s32i>, ["data"] {alignment = 4 : i64} loc(#loc333)
    %1 = cir.const #cir.int<0> : !s32i loc(#loc205)
    cir.store %1, %0 : !s32i, !cir.ptr<!s32i> loc(#loc334)
    cir.scope {
      %2 = cir.const #cir.int<5> : !s32i loc(#loc209)
      cir.switch (%2 : !s32i) [
      case (equal, 6) {
        %3 = cir.get_global @".str1" : !cir.ptr<!cir.array<!s8i x 21>> loc(#loc210)
        %4 = cir.cast(array_to_ptrdecay, %3 : !cir.ptr<!cir.array<!s8i x 21>>), !cir.ptr<!s8i> loc(#loc210)
        cir.call @printLine(%4) : (!cir.ptr<!s8i>) -> () loc(#loc211)
        cir.break loc(#loc212)
      },
      case (default) {
        %3 = cir.const #cir.int<2> : !s32i loc(#loc213)
        %4 = cir.unary(minus, %3) : !s32i, !s32i loc(#loc214)
        cir.store %4, %0 : !s32i, !cir.ptr<!s32i> loc(#loc336)
        cir.break loc(#loc216)
      }
      ] loc(#loc207)
    } loc(#loc335)
    cir.scope {
      %2 = cir.const #cir.int<7> : !s32i loc(#loc219)
      cir.switch (%2 : !s32i) [
      case (equal, 7) {
        cir.scope {
          %3 = cir.load %0 : !cir.ptr<!s32i>, !s32i loc(#loc222)
          %4 = cir.const #cir.int<0> : !s32i loc(#loc223)
          %5 = cir.cmp(lt, %3, %4) : !s32i, !s32i loc(#loc339)
          %6 = cir.cast(int_to_bool, %5 : !s32i), !cir.bool loc(#loc224)
          cir.if %6 {
            %7 = cir.alloca !s32i, !cir.ptr<!s32i>, ["result", init] {alignment = 4 : i64} loc(#loc341)
            %8 = cir.load %0 : !cir.ptr<!s32i>, !s32i loc(#loc228)
            %9 = cir.const #cir.int<2> : !s32i loc(#loc227)
            %10 = cir.binop(mul, %8, %9) nsw : !s32i loc(#loc228)
            cir.store %10, %7 : !s32i, !cir.ptr<!s32i> loc(#loc341)
            %11 = cir.load %7 : !cir.ptr<!s32i>, !s32i loc(#loc229)
            cir.call @printIntLine(%11) : (!s32i) -> () loc(#loc230)
          } loc(#loc340)
        } loc(#loc338)
        cir.break loc(#loc231)
      },
      case (default) {
        %3 = cir.get_global @".str1" : !cir.ptr<!cir.array<!s8i x 21>> loc(#loc232)
        %4 = cir.cast(array_to_ptrdecay, %3 : !cir.ptr<!cir.array<!s8i x 21>>), !cir.ptr<!s8i> loc(#loc232)
        cir.call @printLine(%4) : (!cir.ptr<!s8i>) -> () loc(#loc233)
        cir.break loc(#loc234)
      }
      ] loc(#loc217)
    } loc(#loc337)
    cir.return loc(#loc202)
  } loc(#loc332)
  cir.func no_proto internal private  @goodG2B2() extra(#fn_attr1) {
    %0 = cir.alloca !s32i, !cir.ptr<!s32i>, ["data"] {alignment = 4 : i64} loc(#loc343)
    %1 = cir.const #cir.int<0> : !s32i loc(#loc239)
    cir.store %1, %0 : !s32i, !cir.ptr<!s32i> loc(#loc344)
    cir.scope {
      %2 = cir.const #cir.int<6> : !s32i loc(#loc243)
      cir.switch (%2 : !s32i) [
      case (equal, 6) {
        %3 = cir.const #cir.int<2> : !s32i loc(#loc244)
        %4 = cir.unary(minus, %3) : !s32i, !s32i loc(#loc245)
        cir.store %4, %0 : !s32i, !cir.ptr<!s32i> loc(#loc346)
        cir.break loc(#loc247)
      },
      case (default) {
        %3 = cir.get_global @".str1" : !cir.ptr<!cir.array<!s8i x 21>> loc(#loc248)
        %4 = cir.cast(array_to_ptrdecay, %3 : !cir.ptr<!cir.array<!s8i x 21>>), !cir.ptr<!s8i> loc(#loc248)
        cir.call @printLine(%4) : (!cir.ptr<!s8i>) -> () loc(#loc249)
        cir.break loc(#loc250)
      }
      ] loc(#loc241)
    } loc(#loc345)
    cir.scope {
      %2 = cir.const #cir.int<7> : !s32i loc(#loc253)
      cir.switch (%2 : !s32i) [
      case (equal, 7) {
        cir.scope {
          %3 = cir.load %0 : !cir.ptr<!s32i>, !s32i loc(#loc256)
          %4 = cir.const #cir.int<0> : !s32i loc(#loc257)
          %5 = cir.cmp(lt, %3, %4) : !s32i, !s32i loc(#loc349)
          %6 = cir.cast(int_to_bool, %5 : !s32i), !cir.bool loc(#loc258)
          cir.if %6 {
            %7 = cir.alloca !s32i, !cir.ptr<!s32i>, ["result", init] {alignment = 4 : i64} loc(#loc351)
            %8 = cir.load %0 : !cir.ptr<!s32i>, !s32i loc(#loc262)
            %9 = cir.const #cir.int<2> : !s32i loc(#loc261)
            %10 = cir.binop(mul, %8, %9) nsw : !s32i loc(#loc262)
            cir.store %10, %7 : !s32i, !cir.ptr<!s32i> loc(#loc351)
            %11 = cir.load %7 : !cir.ptr<!s32i>, !s32i loc(#loc263)
            cir.call @printIntLine(%11) : (!s32i) -> () loc(#loc264)
          } loc(#loc350)
        } loc(#loc348)
        cir.break loc(#loc265)
      },
      case (default) {
        %3 = cir.get_global @".str1" : !cir.ptr<!cir.array<!s8i x 21>> loc(#loc266)
        %4 = cir.cast(array_to_ptrdecay, %3 : !cir.ptr<!cir.array<!s8i x 21>>), !cir.ptr<!s8i> loc(#loc266)
        cir.call @printLine(%4) : (!cir.ptr<!s8i>) -> () loc(#loc267)
        cir.break loc(#loc268)
      }
      ] loc(#loc251)
    } loc(#loc347)
    cir.return loc(#loc236)
  } loc(#loc342)
} loc(#loc)
#loc = loc("/home/ladisgin/git_proj/test_projects/juliet-c/testcases/CWE191_Integer_Underflow/s02/CWE191_Integer_Underflow__int_fgets_multiply_15.c":0:0)
#loc1 = loc("/usr/include/stdio.h":654:1)
#loc2 = loc("/usr/include/stdio.h":655:59)
#loc3 = loc("/usr/include/stdio.h":149:1)
#loc4 = loc("/usr/include/stdio.h":149:14)
#loc5 = loc("/usr/include/stdlib.h":105:1)
#loc6 = loc("/usr/include/stdlib.h":106:33)
#loc7 = loc("../../../testcasesupport/std_testcase_io.h":14:1)
#loc8 = loc("../../../testcasesupport/std_testcase_io.h":14:33)
#loc9 = loc("CWE191_Integer_Underflow__int_fgets_multiply_15.c":42:23)
#loc10 = loc("CWE191_Integer_Underflow__int_fgets_multiply_15.c":48:19)
#loc11 = loc("../../../testcasesupport/std_testcase_io.h":18:1)
#loc12 = loc("../../../testcasesupport/std_testcase_io.h":18:33)
#loc13 = loc("CWE191_Integer_Underflow__int_fgets_multiply_15.c":24:1)
#loc14 = loc("CWE191_Integer_Underflow__int_fgets_multiply_15.c":66:1)
#loc15 = loc("CWE191_Integer_Underflow__int_fgets_multiply_15.c":26:5)
#loc16 = loc("CWE191_Integer_Underflow__int_fgets_multiply_15.c":26:9)
#loc17 = loc("CWE191_Integer_Underflow__int_fgets_multiply_15.c":28:12)
#loc18 = loc("CWE191_Integer_Underflow__int_fgets_multiply_15.c":28:5)
#loc19 = loc("CWE191_Integer_Underflow__int_fgets_multiply_15.c":29:5)
#loc20 = loc("CWE191_Integer_Underflow__int_fgets_multiply_15.c":50:5)
#loc21 = loc("CWE191_Integer_Underflow__int_fgets_multiply_15.c":29:12)
#loc22 = loc("CWE191_Integer_Underflow__int_fgets_multiply_15.c":32:5)
#loc23 = loc("CWE191_Integer_Underflow__int_fgets_multiply_15.c":44:5)
#loc24 = loc("CWE191_Integer_Underflow__int_fgets_multiply_15.c":33:9)
#loc25 = loc("CWE191_Integer_Underflow__int_fgets_multiply_15.c":33:45)
#loc26 = loc("CWE191_Integer_Underflow__int_fgets_multiply_15.c":35:9)
#loc27 = loc("CWE191_Integer_Underflow__int_fgets_multiply_15.c":43:9)
#loc28 = loc("CWE191_Integer_Underflow__int_fgets_multiply_15.c":35:19)
#loc29 = loc("CWE191_Integer_Underflow__int_fgets_multiply_15.c":35:32)
#loc30 = loc("CWE191_Integer_Underflow__int_fgets_multiply_15.c":35:49)
#loc31 = loc("CWE191_Integer_Underflow__int_fgets_multiply_15.c":35:13)
#loc32 = loc("CWE191_Integer_Underflow__int_fgets_multiply_15.c":35:59)
#loc33 = loc("CWE191_Integer_Underflow__int_fgets_multiply_15.c":35:56)
#loc34 = loc("CWE191_Integer_Underflow__int_fgets_multiply_15.c":36:9)
#loc35 = loc("CWE191_Integer_Underflow__int_fgets_multiply_15.c":39:9)
#loc36 = loc("CWE191_Integer_Underflow__int_fgets_multiply_15.c":41:9)
#loc37 = loc("CWE191_Integer_Underflow__int_fgets_multiply_15.c":38:25)
#loc38 = loc("CWE191_Integer_Underflow__int_fgets_multiply_15.c":38:20)
#loc39 = loc("CWE191_Integer_Underflow__int_fgets_multiply_15.c":38:13)
#loc40 = loc("CWE191_Integer_Underflow__int_fgets_multiply_15.c":38:36)
#loc41 = loc("CWE191_Integer_Underflow__int_fgets_multiply_15.c":42:13)
#loc42 = loc("CWE191_Integer_Underflow__int_fgets_multiply_15.c":45:5)
#loc43 = loc("CWE191_Integer_Underflow__int_fgets_multiply_15.c":48:9)
#loc44 = loc("CWE191_Integer_Underflow__int_fgets_multiply_15.c":49:9)
#loc45 = loc("CWE191_Integer_Underflow__int_fgets_multiply_15.c":51:5)
#loc46 = loc("CWE191_Integer_Underflow__int_fgets_multiply_15.c":65:5)
#loc47 = loc("CWE191_Integer_Underflow__int_fgets_multiply_15.c":51:12)
#loc48 = loc("CWE191_Integer_Underflow__int_fgets_multiply_15.c":54:9)
#loc49 = loc("CWE191_Integer_Underflow__int_fgets_multiply_15.c":59:9)
#loc50 = loc("CWE191_Integer_Underflow__int_fgets_multiply_15.c":54:12)
#loc51 = loc("CWE191_Integer_Underflow__int_fgets_multiply_15.c":54:19)
#loc52 = loc("CWE191_Integer_Underflow__int_fgets_multiply_15.c":54:17)
#loc53 = loc("CWE191_Integer_Underflow__int_fgets_multiply_15.c":55:9)
#loc54 = loc("CWE191_Integer_Underflow__int_fgets_multiply_15.c":57:13)
#loc55 = loc("CWE191_Integer_Underflow__int_fgets_multiply_15.c":57:33)
#loc56 = loc("CWE191_Integer_Underflow__int_fgets_multiply_15.c":57:26)
#loc57 = loc("CWE191_Integer_Underflow__int_fgets_multiply_15.c":58:26)
#loc58 = loc("CWE191_Integer_Underflow__int_fgets_multiply_15.c":58:13)
#loc59 = loc("CWE191_Integer_Underflow__int_fgets_multiply_15.c":60:9)
#loc60 = loc("CWE191_Integer_Underflow__int_fgets_multiply_15.c":63:19)
#loc61 = loc("CWE191_Integer_Underflow__int_fgets_multiply_15.c":63:9)
#loc62 = loc("CWE191_Integer_Underflow__int_fgets_multiply_15.c":64:9)
#loc63 = loc("CWE191_Integer_Underflow__int_fgets_multiply_15.c":244:1)
#loc64 = loc("CWE191_Integer_Underflow__int_fgets_multiply_15.c":250:1)
#loc65 = loc("CWE191_Integer_Underflow__int_fgets_multiply_15.c":246:5)
#loc66 = loc("CWE191_Integer_Underflow__int_fgets_multiply_15.c":246:14)
#loc67 = loc("CWE191_Integer_Underflow__int_fgets_multiply_15.c":247:5)
#loc68 = loc("CWE191_Integer_Underflow__int_fgets_multiply_15.c":247:14)
#loc69 = loc("CWE191_Integer_Underflow__int_fgets_multiply_15.c":248:5)
#loc70 = loc("CWE191_Integer_Underflow__int_fgets_multiply_15.c":248:14)
#loc71 = loc("CWE191_Integer_Underflow__int_fgets_multiply_15.c":249:5)
#loc72 = loc("CWE191_Integer_Underflow__int_fgets_multiply_15.c":249:14)
#loc73 = loc("CWE191_Integer_Underflow__int_fgets_multiply_15.c":117:27)
#loc74 = loc("CWE191_Integer_Underflow__int_fgets_multiply_15.c":73:1)
#loc75 = loc("CWE191_Integer_Underflow__int_fgets_multiply_15.c":122:1)
#loc76 = loc("CWE191_Integer_Underflow__int_fgets_multiply_15.c":75:5)
#loc77 = loc("CWE191_Integer_Underflow__int_fgets_multiply_15.c":75:9)
#loc78 = loc("CWE191_Integer_Underflow__int_fgets_multiply_15.c":77:12)
#loc79 = loc("CWE191_Integer_Underflow__int_fgets_multiply_15.c":77:5)
#loc80 = loc("CWE191_Integer_Underflow__int_fgets_multiply_15.c":78:5)
#loc81 = loc("CWE191_Integer_Underflow__int_fgets_multiply_15.c":99:5)
#loc82 = loc("CWE191_Integer_Underflow__int_fgets_multiply_15.c":78:12)
#loc83 = loc("CWE191_Integer_Underflow__int_fgets_multiply_15.c":81:5)
#loc84 = loc("CWE191_Integer_Underflow__int_fgets_multiply_15.c":93:5)
#loc85 = loc("CWE191_Integer_Underflow__int_fgets_multiply_15.c":82:9)
#loc86 = loc("CWE191_Integer_Underflow__int_fgets_multiply_15.c":82:45)
#loc87 = loc("CWE191_Integer_Underflow__int_fgets_multiply_15.c":84:9)
#loc88 = loc("CWE191_Integer_Underflow__int_fgets_multiply_15.c":92:9)
#loc89 = loc("CWE191_Integer_Underflow__int_fgets_multiply_15.c":84:19)
#loc90 = loc("CWE191_Integer_Underflow__int_fgets_multiply_15.c":84:32)
#loc91 = loc("CWE191_Integer_Underflow__int_fgets_multiply_15.c":84:49)
#loc92 = loc("CWE191_Integer_Underflow__int_fgets_multiply_15.c":84:13)
#loc93 = loc("CWE191_Integer_Underflow__int_fgets_multiply_15.c":84:59)
#loc94 = loc("CWE191_Integer_Underflow__int_fgets_multiply_15.c":84:56)
#loc95 = loc("CWE191_Integer_Underflow__int_fgets_multiply_15.c":85:9)
#loc96 = loc("CWE191_Integer_Underflow__int_fgets_multiply_15.c":88:9)
#loc97 = loc("CWE191_Integer_Underflow__int_fgets_multiply_15.c":90:9)
#loc98 = loc("CWE191_Integer_Underflow__int_fgets_multiply_15.c":87:25)
#loc99 = loc("CWE191_Integer_Underflow__int_fgets_multiply_15.c":87:20)
#loc100 = loc("CWE191_Integer_Underflow__int_fgets_multiply_15.c":87:13)
#loc101 = loc("CWE191_Integer_Underflow__int_fgets_multiply_15.c":87:36)
#loc102 = loc("CWE191_Integer_Underflow__int_fgets_multiply_15.c":91:23)
#loc103 = loc("CWE191_Integer_Underflow__int_fgets_multiply_15.c":91:13)
#loc104 = loc("CWE191_Integer_Underflow__int_fgets_multiply_15.c":94:5)
#loc105 = loc("CWE191_Integer_Underflow__int_fgets_multiply_15.c":97:19)
#loc106 = loc("CWE191_Integer_Underflow__int_fgets_multiply_15.c":97:9)
#loc107 = loc("CWE191_Integer_Underflow__int_fgets_multiply_15.c":98:9)
#loc108 = loc("CWE191_Integer_Underflow__int_fgets_multiply_15.c":100:5)
#loc109 = loc("CWE191_Integer_Underflow__int_fgets_multiply_15.c":121:5)
#loc110 = loc("CWE191_Integer_Underflow__int_fgets_multiply_15.c":100:12)
#loc111 = loc("CWE191_Integer_Underflow__int_fgets_multiply_15.c":104:19)
#loc112 = loc("CWE191_Integer_Underflow__int_fgets_multiply_15.c":104:9)
#loc113 = loc("CWE191_Integer_Underflow__int_fgets_multiply_15.c":105:9)
#loc114 = loc("CWE191_Integer_Underflow__int_fgets_multiply_15.c":107:9)
#loc115 = loc("CWE191_Integer_Underflow__int_fgets_multiply_15.c":119:9)
#loc116 = loc("CWE191_Integer_Underflow__int_fgets_multiply_15.c":107:12)
#loc117 = loc("CWE191_Integer_Underflow__int_fgets_multiply_15.c":107:19)
#loc118 = loc("CWE191_Integer_Underflow__int_fgets_multiply_15.c":107:17)
#loc119 = loc("CWE191_Integer_Underflow__int_fgets_multiply_15.c":108:9)
#loc120 = loc("CWE191_Integer_Underflow__int_fgets_multiply_15.c":110:13)
#loc121 = loc("CWE191_Integer_Underflow__int_fgets_multiply_15.c":118:13)
#loc122 = loc("CWE191_Integer_Underflow__int_fgets_multiply_15.c":110:17)
#loc123 = loc("CWE191_Integer_Underflow__int_fgets_multiply_15.c":110:25)
#loc124 = loc("CWE191_Integer_Underflow__int_fgets_multiply_15.c":110:33)
#loc125 = loc("CWE191_Integer_Underflow__int_fgets_multiply_15.c":110:34)
#loc126 = loc("CWE191_Integer_Underflow__int_fgets_multiply_15.c":110:22)
#loc127 = loc("CWE191_Integer_Underflow__int_fgets_multiply_15.c":111:13)
#loc128 = loc("CWE191_Integer_Underflow__int_fgets_multiply_15.c":114:13)
#loc129 = loc("CWE191_Integer_Underflow__int_fgets_multiply_15.c":116:13)
#loc130 = loc("CWE191_Integer_Underflow__int_fgets_multiply_15.c":112:17)
#loc131 = loc("CWE191_Integer_Underflow__int_fgets_multiply_15.c":112:37)
#loc132 = loc("CWE191_Integer_Underflow__int_fgets_multiply_15.c":112:30)
#loc133 = loc("CWE191_Integer_Underflow__int_fgets_multiply_15.c":113:30)
#loc134 = loc("CWE191_Integer_Underflow__int_fgets_multiply_15.c":113:17)
#loc135 = loc("CWE191_Integer_Underflow__int_fgets_multiply_15.c":117:17)
#loc136 = loc("CWE191_Integer_Underflow__int_fgets_multiply_15.c":120:9)
#loc137 = loc("CWE191_Integer_Underflow__int_fgets_multiply_15.c":125:1)
#loc138 = loc("CWE191_Integer_Underflow__int_fgets_multiply_15.c":174:1)
#loc139 = loc("CWE191_Integer_Underflow__int_fgets_multiply_15.c":127:5)
#loc140 = loc("CWE191_Integer_Underflow__int_fgets_multiply_15.c":127:9)
#loc141 = loc("CWE191_Integer_Underflow__int_fgets_multiply_15.c":129:12)
#loc142 = loc("CWE191_Integer_Underflow__int_fgets_multiply_15.c":129:5)
#loc143 = loc("CWE191_Integer_Underflow__int_fgets_multiply_15.c":130:5)
#loc144 = loc("CWE191_Integer_Underflow__int_fgets_multiply_15.c":151:5)
#loc145 = loc("CWE191_Integer_Underflow__int_fgets_multiply_15.c":130:12)
#loc146 = loc("CWE191_Integer_Underflow__int_fgets_multiply_15.c":133:5)
#loc147 = loc("CWE191_Integer_Underflow__int_fgets_multiply_15.c":145:5)
#loc148 = loc("CWE191_Integer_Underflow__int_fgets_multiply_15.c":134:9)
#loc149 = loc("CWE191_Integer_Underflow__int_fgets_multiply_15.c":134:45)
#loc150 = loc("CWE191_Integer_Underflow__int_fgets_multiply_15.c":136:9)
#loc151 = loc("CWE191_Integer_Underflow__int_fgets_multiply_15.c":144:9)
#loc152 = loc("CWE191_Integer_Underflow__int_fgets_multiply_15.c":136:19)
#loc153 = loc("CWE191_Integer_Underflow__int_fgets_multiply_15.c":136:32)
#loc154 = loc("CWE191_Integer_Underflow__int_fgets_multiply_15.c":136:49)
#loc155 = loc("CWE191_Integer_Underflow__int_fgets_multiply_15.c":136:13)
#loc156 = loc("CWE191_Integer_Underflow__int_fgets_multiply_15.c":136:59)
#loc157 = loc("CWE191_Integer_Underflow__int_fgets_multiply_15.c":136:56)
#loc158 = loc("CWE191_Integer_Underflow__int_fgets_multiply_15.c":137:9)
#loc159 = loc("CWE191_Integer_Underflow__int_fgets_multiply_15.c":140:9)
#loc160 = loc("CWE191_Integer_Underflow__int_fgets_multiply_15.c":142:9)
#loc161 = loc("CWE191_Integer_Underflow__int_fgets_multiply_15.c":139:25)
#loc162 = loc("CWE191_Integer_Underflow__int_fgets_multiply_15.c":139:20)
#loc163 = loc("CWE191_Integer_Underflow__int_fgets_multiply_15.c":139:13)
#loc164 = loc("CWE191_Integer_Underflow__int_fgets_multiply_15.c":139:36)
#loc165 = loc("CWE191_Integer_Underflow__int_fgets_multiply_15.c":143:23)
#loc166 = loc("CWE191_Integer_Underflow__int_fgets_multiply_15.c":143:13)
#loc167 = loc("CWE191_Integer_Underflow__int_fgets_multiply_15.c":146:5)
#loc168 = loc("CWE191_Integer_Underflow__int_fgets_multiply_15.c":149:19)
#loc169 = loc("CWE191_Integer_Underflow__int_fgets_multiply_15.c":149:9)
#loc170 = loc("CWE191_Integer_Underflow__int_fgets_multiply_15.c":150:9)
#loc171 = loc("CWE191_Integer_Underflow__int_fgets_multiply_15.c":152:5)
#loc172 = loc("CWE191_Integer_Underflow__int_fgets_multiply_15.c":173:5)
#loc173 = loc("CWE191_Integer_Underflow__int_fgets_multiply_15.c":152:12)
#loc174 = loc("CWE191_Integer_Underflow__int_fgets_multiply_15.c":155:9)
#loc175 = loc("CWE191_Integer_Underflow__int_fgets_multiply_15.c":167:9)
#loc176 = loc("CWE191_Integer_Underflow__int_fgets_multiply_15.c":155:12)
#loc177 = loc("CWE191_Integer_Underflow__int_fgets_multiply_15.c":155:19)
#loc178 = loc("CWE191_Integer_Underflow__int_fgets_multiply_15.c":155:17)
#loc179 = loc("CWE191_Integer_Underflow__int_fgets_multiply_15.c":156:9)
#loc180 = loc("CWE191_Integer_Underflow__int_fgets_multiply_15.c":158:13)
#loc181 = loc("CWE191_Integer_Underflow__int_fgets_multiply_15.c":166:13)
#loc182 = loc("CWE191_Integer_Underflow__int_fgets_multiply_15.c":158:17)
#loc183 = loc("CWE191_Integer_Underflow__int_fgets_multiply_15.c":158:25)
#loc184 = loc("CWE191_Integer_Underflow__int_fgets_multiply_15.c":158:33)
#loc185 = loc("CWE191_Integer_Underflow__int_fgets_multiply_15.c":158:34)
#loc186 = loc("CWE191_Integer_Underflow__int_fgets_multiply_15.c":158:22)
#loc187 = loc("CWE191_Integer_Underflow__int_fgets_multiply_15.c":159:13)
#loc188 = loc("CWE191_Integer_Underflow__int_fgets_multiply_15.c":162:13)
#loc189 = loc("CWE191_Integer_Underflow__int_fgets_multiply_15.c":164:13)
#loc190 = loc("CWE191_Integer_Underflow__int_fgets_multiply_15.c":160:17)
#loc191 = loc("CWE191_Integer_Underflow__int_fgets_multiply_15.c":160:37)
#loc192 = loc("CWE191_Integer_Underflow__int_fgets_multiply_15.c":160:30)
#loc193 = loc("CWE191_Integer_Underflow__int_fgets_multiply_15.c":161:30)
#loc194 = loc("CWE191_Integer_Underflow__int_fgets_multiply_15.c":161:17)
#loc195 = loc("CWE191_Integer_Underflow__int_fgets_multiply_15.c":165:27)
#loc196 = loc("CWE191_Integer_Underflow__int_fgets_multiply_15.c":165:17)
#loc197 = loc("CWE191_Integer_Underflow__int_fgets_multiply_15.c":168:9)
#loc198 = loc("CWE191_Integer_Underflow__int_fgets_multiply_15.c":171:19)
#loc199 = loc("CWE191_Integer_Underflow__int_fgets_multiply_15.c":171:9)
#loc200 = loc("CWE191_Integer_Underflow__int_fgets_multiply_15.c":172:9)
#loc201 = loc("CWE191_Integer_Underflow__int_fgets_multiply_15.c":177:1)
#loc202 = loc("CWE191_Integer_Underflow__int_fgets_multiply_15.c":208:1)
#loc203 = loc("CWE191_Integer_Underflow__int_fgets_multiply_15.c":179:5)
#loc204 = loc("CWE191_Integer_Underflow__int_fgets_multiply_15.c":179:9)
#loc205 = loc("CWE191_Integer_Underflow__int_fgets_multiply_15.c":181:12)
#loc206 = loc("CWE191_Integer_Underflow__int_fgets_multiply_15.c":181:5)
#loc207 = loc("CWE191_Integer_Underflow__int_fgets_multiply_15.c":182:5)
#loc208 = loc("CWE191_Integer_Underflow__int_fgets_multiply_15.c":192:5)
#loc209 = loc("CWE191_Integer_Underflow__int_fgets_multiply_15.c":182:12)
#loc210 = loc("CWE191_Integer_Underflow__int_fgets_multiply_15.c":186:19)
#loc211 = loc("CWE191_Integer_Underflow__int_fgets_multiply_15.c":186:9)
#loc212 = loc("CWE191_Integer_Underflow__int_fgets_multiply_15.c":187:9)
#loc213 = loc("CWE191_Integer_Underflow__int_fgets_multiply_15.c":190:17)
#loc214 = loc("CWE191_Integer_Underflow__int_fgets_multiply_15.c":190:16)
#loc215 = loc("CWE191_Integer_Underflow__int_fgets_multiply_15.c":190:9)
#loc216 = loc("CWE191_Integer_Underflow__int_fgets_multiply_15.c":191:9)
#loc217 = loc("CWE191_Integer_Underflow__int_fgets_multiply_15.c":193:5)
#loc218 = loc("CWE191_Integer_Underflow__int_fgets_multiply_15.c":207:5)
#loc219 = loc("CWE191_Integer_Underflow__int_fgets_multiply_15.c":193:12)
#loc220 = loc("CWE191_Integer_Underflow__int_fgets_multiply_15.c":196:9)
#loc221 = loc("CWE191_Integer_Underflow__int_fgets_multiply_15.c":201:9)
#loc222 = loc("CWE191_Integer_Underflow__int_fgets_multiply_15.c":196:12)
#loc223 = loc("CWE191_Integer_Underflow__int_fgets_multiply_15.c":196:19)
#loc224 = loc("CWE191_Integer_Underflow__int_fgets_multiply_15.c":196:17)
#loc225 = loc("CWE191_Integer_Underflow__int_fgets_multiply_15.c":197:9)
#loc226 = loc("CWE191_Integer_Underflow__int_fgets_multiply_15.c":199:13)
#loc227 = loc("CWE191_Integer_Underflow__int_fgets_multiply_15.c":199:33)
#loc228 = loc("CWE191_Integer_Underflow__int_fgets_multiply_15.c":199:26)
#loc229 = loc("CWE191_Integer_Underflow__int_fgets_multiply_15.c":200:26)
#loc230 = loc("CWE191_Integer_Underflow__int_fgets_multiply_15.c":200:13)
#loc231 = loc("CWE191_Integer_Underflow__int_fgets_multiply_15.c":202:9)
#loc232 = loc("CWE191_Integer_Underflow__int_fgets_multiply_15.c":205:19)
#loc233 = loc("CWE191_Integer_Underflow__int_fgets_multiply_15.c":205:9)
#loc234 = loc("CWE191_Integer_Underflow__int_fgets_multiply_15.c":206:9)
#loc235 = loc("CWE191_Integer_Underflow__int_fgets_multiply_15.c":211:1)
#loc236 = loc("CWE191_Integer_Underflow__int_fgets_multiply_15.c":242:1)
#loc237 = loc("CWE191_Integer_Underflow__int_fgets_multiply_15.c":213:5)
#loc238 = loc("CWE191_Integer_Underflow__int_fgets_multiply_15.c":213:9)
#loc239 = loc("CWE191_Integer_Underflow__int_fgets_multiply_15.c":215:12)
#loc240 = loc("CWE191_Integer_Underflow__int_fgets_multiply_15.c":215:5)
#loc241 = loc("CWE191_Integer_Underflow__int_fgets_multiply_15.c":216:5)
#loc242 = loc("CWE191_Integer_Underflow__int_fgets_multiply_15.c":226:5)
#loc243 = loc("CWE191_Integer_Underflow__int_fgets_multiply_15.c":216:12)
#loc244 = loc("CWE191_Integer_Underflow__int_fgets_multiply_15.c":220:17)
#loc245 = loc("CWE191_Integer_Underflow__int_fgets_multiply_15.c":220:16)
#loc246 = loc("CWE191_Integer_Underflow__int_fgets_multiply_15.c":220:9)
#loc247 = loc("CWE191_Integer_Underflow__int_fgets_multiply_15.c":221:9)
#loc248 = loc("CWE191_Integer_Underflow__int_fgets_multiply_15.c":224:19)
#loc249 = loc("CWE191_Integer_Underflow__int_fgets_multiply_15.c":224:9)
#loc250 = loc("CWE191_Integer_Underflow__int_fgets_multiply_15.c":225:9)
#loc251 = loc("CWE191_Integer_Underflow__int_fgets_multiply_15.c":227:5)
#loc252 = loc("CWE191_Integer_Underflow__int_fgets_multiply_15.c":241:5)
#loc253 = loc("CWE191_Integer_Underflow__int_fgets_multiply_15.c":227:12)
#loc254 = loc("CWE191_Integer_Underflow__int_fgets_multiply_15.c":230:9)
#loc255 = loc("CWE191_Integer_Underflow__int_fgets_multiply_15.c":235:9)
#loc256 = loc("CWE191_Integer_Underflow__int_fgets_multiply_15.c":230:12)
#loc257 = loc("CWE191_Integer_Underflow__int_fgets_multiply_15.c":230:19)
#loc258 = loc("CWE191_Integer_Underflow__int_fgets_multiply_15.c":230:17)
#loc259 = loc("CWE191_Integer_Underflow__int_fgets_multiply_15.c":231:9)
#loc260 = loc("CWE191_Integer_Underflow__int_fgets_multiply_15.c":233:13)
#loc261 = loc("CWE191_Integer_Underflow__int_fgets_multiply_15.c":233:33)
#loc262 = loc("CWE191_Integer_Underflow__int_fgets_multiply_15.c":233:26)
#loc263 = loc("CWE191_Integer_Underflow__int_fgets_multiply_15.c":234:26)
#loc264 = loc("CWE191_Integer_Underflow__int_fgets_multiply_15.c":234:13)
#loc265 = loc("CWE191_Integer_Underflow__int_fgets_multiply_15.c":236:9)
#loc266 = loc("CWE191_Integer_Underflow__int_fgets_multiply_15.c":239:19)
#loc267 = loc("CWE191_Integer_Underflow__int_fgets_multiply_15.c":239:9)
#loc268 = loc("CWE191_Integer_Underflow__int_fgets_multiply_15.c":240:9)
#loc269 = loc(fused[#loc1, #loc2])
#loc270 = loc(fused[#loc3, #loc4])
#loc271 = loc(fused[#loc5, #loc6])
#loc272 = loc(fused[#loc7, #loc8])
#loc273 = loc(fused[#loc11, #loc12])
#loc274 = loc(fused[#loc13, #loc14])
#loc275 = loc(fused[#loc15, #loc16])
#loc276 = loc(fused[#loc18, #loc17])
#loc277 = loc(fused[#loc19, #loc20])
#loc278 = loc(fused[#loc22, #loc23])
#loc279 = loc(fused[#loc24, #loc25])
#loc280 = loc(fused[#loc26, #loc27])
#loc281 = loc(fused[#loc31, #loc32])
#loc282 = loc(fused[#loc34, #loc35, #loc36, #loc27])
#loc283 = loc(fused[#loc39, #loc40])
#loc284 = loc(fused[#loc45, #loc46])
#loc285 = loc(fused[#loc48, #loc49])
#loc286 = loc(fused[#loc50, #loc51])
#loc287 = loc(fused[#loc53, #loc49])
#loc288 = loc(fused[#loc54, #loc55])
#loc289 = loc(fused[#loc63, #loc64])
#loc290 = loc(fused[#loc65, #loc66])
#loc291 = loc(fused[#loc67, #loc68])
#loc292 = loc(fused[#loc69, #loc70])
#loc293 = loc(fused[#loc71, #loc72])
#loc294 = loc(fused[#loc74, #loc75])
#loc295 = loc(fused[#loc76, #loc77])
#loc296 = loc(fused[#loc79, #loc78])
#loc297 = loc(fused[#loc80, #loc81])
#loc298 = loc(fused[#loc83, #loc84])
#loc299 = loc(fused[#loc85, #loc86])
#loc300 = loc(fused[#loc87, #loc88])
#loc301 = loc(fused[#loc92, #loc93])
#loc302 = loc(fused[#loc95, #loc96, #loc97, #loc88])
#loc303 = loc(fused[#loc100, #loc101])
#loc304 = loc(fused[#loc108, #loc109])
#loc305 = loc(fused[#loc114, #loc115])
#loc306 = loc(fused[#loc116, #loc117])
#loc307 = loc(fused[#loc119, #loc115])
#loc308 = loc(fused[#loc120, #loc121])
#loc309 = loc(fused[#loc123, #loc124])
#loc310 = loc(fused[#loc122, #loc125])
#loc311 = loc(fused[#loc127, #loc128, #loc129, #loc121])
#loc312 = loc(fused[#loc130, #loc131])
#loc313 = loc(fused[#loc137, #loc138])
#loc314 = loc(fused[#loc139, #loc140])
#loc315 = loc(fused[#loc142, #loc141])
#loc316 = loc(fused[#loc143, #loc144])
#loc317 = loc(fused[#loc146, #loc147])
#loc318 = loc(fused[#loc148, #loc149])
#loc319 = loc(fused[#loc150, #loc151])
#loc320 = loc(fused[#loc155, #loc156])
#loc321 = loc(fused[#loc158, #loc159, #loc160, #loc151])
#loc322 = loc(fused[#loc163, #loc164])
#loc323 = loc(fused[#loc171, #loc172])
#loc324 = loc(fused[#loc174, #loc175])
#loc325 = loc(fused[#loc176, #loc177])
#loc326 = loc(fused[#loc179, #loc175])
#loc327 = loc(fused[#loc180, #loc181])
#loc328 = loc(fused[#loc183, #loc184])
#loc329 = loc(fused[#loc182, #loc185])
#loc330 = loc(fused[#loc187, #loc188, #loc189, #loc181])
#loc331 = loc(fused[#loc190, #loc191])
#loc332 = loc(fused[#loc201, #loc202])
#loc333 = loc(fused[#loc203, #loc204])
#loc334 = loc(fused[#loc206, #loc205])
#loc335 = loc(fused[#loc207, #loc208])
#loc336 = loc(fused[#loc215, #loc213])
#loc337 = loc(fused[#loc217, #loc218])
#loc338 = loc(fused[#loc220, #loc221])
#loc339 = loc(fused[#loc222, #loc223])
#loc340 = loc(fused[#loc225, #loc221])
#loc341 = loc(fused[#loc226, #loc227])
#loc342 = loc(fused[#loc235, #loc236])
#loc343 = loc(fused[#loc237, #loc238])
#loc344 = loc(fused[#loc240, #loc239])
#loc345 = loc(fused[#loc241, #loc242])
#loc346 = loc(fused[#loc246, #loc244])
#loc347 = loc(fused[#loc251, #loc252])
#loc348 = loc(fused[#loc254, #loc255])
#loc349 = loc(fused[#loc256, #loc257])
#loc350 = loc(fused[#loc259, #loc255])
#loc351 = loc(fused[#loc260, #loc261])
