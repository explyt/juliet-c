!s32i = !cir.int<s, 32>
!s64i = !cir.int<s, 64>
!s8i = !cir.int<s, 8>
!u16i = !cir.int<u, 16>
!u32i = !cir.int<u, 32>
!u64i = !cir.int<u, 64>
!u8i = !cir.int<u, 8>
!void = !cir.void
#fn_attr = #cir<extra({nothrow = #cir.nothrow})>
#fn_attr1 = #cir<extra({inline = #cir.inline<no>, nothrow = #cir.nothrow, optnone = #cir.optnone, uwtable = #cir.uwtable<async>})>
!ty_in_addr = !cir.record<struct "in_addr" {!u32i} #cir.record.decl.ast>
!ty_sockaddr = !cir.record<struct "sockaddr" {!u16i, !cir.array<!s8i x 14>} #cir.record.decl.ast>
!ty_sockaddr_in = !cir.record<struct "sockaddr_in" {!u16i, !u16i, !ty_in_addr, !cir.array<!u8i x 8>}>
module @"/workspaces/juliet-c/testcases/CWE510_Trapdoor/CWE510_Trapdoor__ip_based_logic_17.c" attributes {cir.lang = #cir.lang<c>, cir.sob = #cir.signed_overflow_behavior<undefined>, cir.triple = "x86_64-unknown-linux-gnu", cir.type_size_info = #cir.type_size_info<char = 8, int = 32, size_t = 64>, cir.uwtable = #cir.uwtable<async>, dlti.dl_spec = #dlti.dl_spec<i64 = dense<64> : vector<2xi64>, !llvm.ptr<272> = dense<64> : vector<4xi64>, f80 = dense<128> : vector<2xi64>, !llvm.ptr<271> = dense<32> : vector<4xi64>, !llvm.ptr<270> = dense<32> : vector<4xi64>, i128 = dense<128> : vector<2xi64>, i8 = dense<8> : vector<2xi64>, i16 = dense<16> : vector<2xi64>, !llvm.ptr = dense<64> : vector<4xi64>, i1 = dense<8> : vector<2xi64>, f16 = dense<16> : vector<2xi64>, f64 = dense<64> : vector<2xi64>, f128 = dense<128> : vector<2xi64>, i32 = dense<32> : vector<2xi64>, "dlti.mangling_mode" = "e", "dlti.endianness" = "little", "dlti.stack_alignment" = 128 : i64>} {
  cir.func private @socket(!s32i, !s32i, !s32i) -> !s32i extra(#fn_attr) loc(#loc289)
  cir.func private @htons(!u16i) -> !u16i extra(#fn_attr) loc(#loc290)
  cir.func private @bind(!s32i, !cir.ptr<!ty_sockaddr>, !u32i) -> !s32i extra(#fn_attr) loc(#loc291)
  cir.func private @listen(!s32i, !s32i) -> !s32i extra(#fn_attr) loc(#loc292)
  cir.func private @accept(!s32i, !cir.ptr<!ty_sockaddr>, !cir.ptr<!u32i>) -> !s32i loc(#loc293)
  cir.func private @getsockname(!s32i, !cir.ptr<!ty_sockaddr>, !cir.ptr<!u32i>) -> !s32i extra(#fn_attr) loc(#loc294)
  cir.func private @strcmp(!cir.ptr<!s8i>, !cir.ptr<!s8i>) -> !s32i extra(#fn_attr) loc(#loc295)
  cir.global "private" constant cir_private dsolocal @".str" = #cir.const_array<"192.168.30.123\00" : !cir.array<!s8i x 15>> : !cir.array<!s8i x 15> {alignment = 1 : i64} loc(#loc15)
  cir.func private @inet_ntoa(!ty_in_addr) -> !cir.ptr<!s8i> extra(#fn_attr) loc(#loc296)
  cir.func private @send(!s32i, !cir.ptr<!void>, !u64i, !s32i) -> !s64i loc(#loc297)
  cir.global "private" constant cir_private dsolocal @".str.1" = #cir.const_array<"Welcome, admin!\00" : !cir.array<!s8i x 16>> : !cir.array<!s8i x 16> {alignment = 1 : i64} loc(#loc20)
  cir.global "private" constant cir_private dsolocal @".str.2" = #cir.const_array<"Welcome!\00" : !cir.array<!s8i x 9>> : !cir.array<!s8i x 9> {alignment = 1 : i64} loc(#loc21)
  cir.func private @printLine(!cir.ptr<!s8i>) loc(#loc298)
  cir.global "private" constant cir_private dsolocal @".str.3" = #cir.const_array<"Send failed!\00" : !cir.array<!s8i x 13>> : !cir.array<!s8i x 13> {alignment = 1 : i64} loc(#loc24)
  cir.func private @close(!s32i) -> !s32i loc(#loc299)
  cir.func no_proto @CWE510_Trapdoor__ip_based_logic_17_bad() extra(#fn_attr1) {
    %0 = cir.alloca !s32i, !cir.ptr<!s32i>, ["j"] {alignment = 4 : i64} loc(#loc301)
    cir.scope {
      %1 = cir.const #cir.int<0> : !s32i loc(#loc33)
      cir.store %1, %0 : !s32i, !cir.ptr<!s32i> loc(#loc303)
      cir.for : cond {
        %2 = cir.load %0 : !cir.ptr<!s32i>, !s32i loc(#loc35)
        %3 = cir.const #cir.int<1> : !s32i loc(#loc36)
        %4 = cir.cmp(lt, %2, %3) : !s32i, !cir.bool loc(#loc304)
        cir.condition(%4) loc(#loc37)
      } body {
        cir.scope {
          cir.scope {
            %2 = cir.alloca !ty_sockaddr_in, !cir.ptr<!ty_sockaddr_in>, ["service"] {alignment = 4 : i64} loc(#loc307)
            %3 = cir.alloca !ty_sockaddr_in, !cir.ptr<!ty_sockaddr_in>, ["acceptService"] {alignment = 4 : i64} loc(#loc308)
            %4 = cir.alloca !s32i, !cir.ptr<!s32i>, ["acceptServiceLen", init] {alignment = 4 : i64} loc(#loc309)
            %5 = cir.alloca !s32i, !cir.ptr<!s32i>, ["listenSocket", init] {alignment = 4 : i64} loc(#loc310)
            %6 = cir.alloca !s32i, !cir.ptr<!s32i>, ["acceptSocket", init] {alignment = 4 : i64} loc(#loc311)
            %7 = cir.const #cir.int<16> : !u64i loc(#loc312)
            %8 = cir.cast(integral, %7 : !u64i), !s32i loc(#loc312)
            cir.store %8, %4 : !s32i, !cir.ptr<!s32i> loc(#loc309)
            %9 = cir.const #cir.int<1> : !s32i loc(#loc47)
            %10 = cir.unary(minus, %9) nsw : !s32i, !s32i loc(#loc47)
            cir.store %10, %5 : !s32i, !cir.ptr<!s32i> loc(#loc310)
            %11 = cir.const #cir.int<1> : !s32i loc(#loc49)
            %12 = cir.unary(minus, %11) nsw : !s32i, !s32i loc(#loc49)
            cir.store %12, %6 : !s32i, !cir.ptr<!s32i> loc(#loc311)
            cir.scope {
              cir.do {
                cir.scope {
                  %13 = cir.const #cir.int<2> : !s32i loc(#loc55)
                  %14 = cir.const #cir.int<1> : !s32i loc(#loc56)
                  %15 = cir.const #cir.int<6> : !s32i loc(#loc57)
                  %16 = cir.call @socket(%13, %14, %15) : (!s32i, !s32i, !s32i) -> !s32i extra(#fn_attr) loc(#loc58)
                  cir.store %16, %5 : !s32i, !cir.ptr<!s32i> loc(#loc315)
                  cir.scope {
                    %35 = cir.load %5 : !cir.ptr<!s32i>, !s32i loc(#loc63)
                    %36 = cir.const #cir.int<1> : !s32i loc(#loc64)
                    %37 = cir.unary(minus, %36) nsw : !s32i, !s32i loc(#loc64)
                    %38 = cir.cmp(eq, %35, %37) : !s32i, !cir.bool loc(#loc317)
                    cir.if %38 {
                      cir.break loc(#loc66)
                    } loc(#loc318)
                  } loc(#loc316)
                  %17 = cir.cast(bitcast, %2 : !cir.ptr<!ty_sockaddr_in>), !cir.ptr<!void> loc(#loc319)
                  %18 = cir.const #cir.int<0> : !s32i loc(#loc69)
                  %19 = cir.const #cir.int<16> : !u64i loc(#loc320)
                  cir.libc.memset %19 bytes from %17 set to %18 : !cir.ptr<!void>, !s32i, !u64i loc(#loc321)
                  %20 = cir.const #cir.int<2> : !s32i loc(#loc74)
                  %21 = cir.cast(integral, %20 : !s32i), !u16i loc(#loc74)
                  %22 = cir.get_member %2[0] {name = "sin_family"} : !cir.ptr<!ty_sockaddr_in> -> !cir.ptr<!u16i> loc(#loc75)
                  cir.store %21, %22 : !u16i, !cir.ptr<!u16i> loc(#loc322)
                  %23 = cir.const #cir.int<0> : !s32i loc(#loc77)
                  %24 = cir.cast(integral, %23 : !s32i), !u32i loc(#loc77)
                  %25 = cir.get_member %2[2] {name = "sin_addr"} : !cir.ptr<!ty_sockaddr_in> -> !cir.ptr<!ty_in_addr> loc(#loc78)
                  %26 = cir.get_member %25[0] {name = "s_addr"} : !cir.ptr<!ty_in_addr> -> !cir.ptr<!u32i> loc(#loc79)
                  cir.store %24, %26 : !u32i, !cir.ptr<!u32i> loc(#loc323)
                  %27 = cir.const #cir.int<20000> : !s32i loc(#loc81)
                  %28 = cir.cast(integral, %27 : !s32i), !u16i loc(#loc81)
                  %29 = cir.call @htons(%28) : (!u16i) -> !u16i side_effect(const) extra(#fn_attr) loc(#loc82)
                  %30 = cir.get_member %2[1] {name = "sin_port"} : !cir.ptr<!ty_sockaddr_in> -> !cir.ptr<!u16i> loc(#loc83)
                  cir.store %29, %30 : !u16i, !cir.ptr<!u16i> loc(#loc324)
                  cir.scope {
                    %35 = cir.load %5 : !cir.ptr<!s32i>, !s32i loc(#loc88)
                    %36 = cir.cast(bitcast, %2 : !cir.ptr<!ty_sockaddr_in>), !cir.ptr<!ty_sockaddr> loc(#loc326)
                    %37 = cir.const #cir.int<16> : !u64i loc(#loc327)
                    %38 = cir.cast(integral, %37 : !u64i), !u32i loc(#loc327)
                    %39 = cir.call @bind(%35, %36, %38) : (!s32i, !cir.ptr<!ty_sockaddr>, !u32i) -> !s32i extra(#fn_attr) loc(#loc93)
                    %40 = cir.const #cir.int<1> : !s32i loc(#loc94)
                    %41 = cir.unary(minus, %40) nsw : !s32i, !s32i loc(#loc94)
                    %42 = cir.cmp(eq, %39, %41) : !s32i, !cir.bool loc(#loc328)
                    cir.if %42 {
                      cir.break loc(#loc96)
                    } loc(#loc329)
                  } loc(#loc325)
                  cir.scope {
                    %35 = cir.load %5 : !cir.ptr<!s32i>, !s32i loc(#loc99)
                    %36 = cir.const #cir.int<5> : !s32i loc(#loc100)
                    %37 = cir.call @listen(%35, %36) : (!s32i, !s32i) -> !s32i extra(#fn_attr) loc(#loc101)
                    %38 = cir.const #cir.int<1> : !s32i loc(#loc102)
                    %39 = cir.unary(minus, %38) nsw : !s32i, !s32i loc(#loc102)
                    %40 = cir.cmp(eq, %37, %39) : !s32i, !cir.bool loc(#loc331)
                    cir.if %40 {
                      cir.break loc(#loc104)
                    } loc(#loc332)
                  } loc(#loc330)
                  %31 = cir.load %5 : !cir.ptr<!s32i>, !s32i loc(#loc105)
                  %32 = cir.const #cir.ptr<null> : !cir.ptr<!ty_sockaddr> loc(#loc106)
                  %33 = cir.const #cir.ptr<null> : !cir.ptr<!u32i> loc(#loc107)
                  %34 = cir.call @accept(%31, %32, %33) : (!s32i, !cir.ptr<!ty_sockaddr>, !cir.ptr<!u32i>) -> !s32i loc(#loc108)
                  cir.store %34, %6 : !s32i, !cir.ptr<!s32i> loc(#loc333)
                  cir.scope {
                    %35 = cir.load %6 : !cir.ptr<!s32i>, !s32i loc(#loc113)
                    %36 = cir.const #cir.int<1> : !s32i loc(#loc114)
                    %37 = cir.unary(minus, %36) nsw : !s32i, !s32i loc(#loc114)
                    %38 = cir.cmp(eq, %35, %37) : !s32i, !cir.bool loc(#loc335)
                    cir.if %38 {
                      cir.break loc(#loc116)
                    } loc(#loc336)
                  } loc(#loc334)
                  cir.scope {
                    %35 = cir.load %6 : !cir.ptr<!s32i>, !s32i loc(#loc119)
                    %36 = cir.cast(bitcast, %3 : !cir.ptr<!ty_sockaddr_in>), !cir.ptr<!ty_sockaddr> loc(#loc338)
                    %37 = cir.cast(bitcast, %4 : !cir.ptr<!s32i>), !cir.ptr<!u32i> loc(#loc339)
                    %38 = cir.call @getsockname(%35, %36, %37) : (!s32i, !cir.ptr<!ty_sockaddr>, !cir.ptr<!u32i>) -> !s32i extra(#fn_attr) loc(#loc124)
                    %39 = cir.const #cir.int<1> : !s32i loc(#loc125)
                    %40 = cir.unary(minus, %39) nsw : !s32i, !s32i loc(#loc126)
                    %41 = cir.cmp(eq, %38, %40) : !s32i, !cir.bool loc(#loc340)
                    cir.if %41 {
                      cir.break loc(#loc128)
                    } loc(#loc341)
                  } loc(#loc337)
                  cir.scope {
                    %35 = cir.get_global @strcmp : !cir.ptr<!cir.func<(!cir.ptr<!s8i>, !cir.ptr<!s8i>) -> !s32i>> loc(#loc131)
                    %36 = cir.get_global @".str" : !cir.ptr<!cir.array<!s8i x 15>> loc(#loc15)
                    %37 = cir.cast(array_to_ptrdecay, %36 : !cir.ptr<!cir.array<!s8i x 15>>), !cir.ptr<!s8i> loc(#loc15)
                    %38 = cir.get_member %3[2] {name = "sin_addr"} : !cir.ptr<!ty_sockaddr_in> -> !cir.ptr<!ty_in_addr> loc(#loc78)
                    %39 = cir.load %38 : !cir.ptr<!ty_in_addr>, !ty_in_addr loc(#loc132)
                    %40 = cir.call @inet_ntoa(%39) : (!ty_in_addr) -> !cir.ptr<!s8i> extra(#fn_attr) loc(#loc132)
                    %41 = cir.call @strcmp(%37, %40) : (!cir.ptr<!s8i>, !cir.ptr<!s8i>) -> !s32i side_effect(pure) extra(#fn_attr) loc(#loc131)
                    %42 = cir.const #cir.int<0> : !s32i loc(#loc133)
                    %43 = cir.cmp(eq, %41, %42) : !s32i, !cir.bool loc(#loc343)
                    cir.if %43 {
                      cir.scope {
                        %44 = cir.load %6 : !cir.ptr<!s32i>, !s32i loc(#loc139)
                        %45 = cir.get_global @".str.1" : !cir.ptr<!cir.array<!s8i x 16>> loc(#loc20)
                        %46 = cir.cast(array_to_ptrdecay, %45 : !cir.ptr<!cir.array<!s8i x 16>>), !cir.ptr<!s8i> loc(#loc20)
                        %47 = cir.cast(bitcast, %46 : !cir.ptr<!s8i>), !cir.ptr<!void> loc(#loc20)
                        %48 = cir.const #cir.int<15> : !u64i loc(#loc346)
                        %49 = cir.const #cir.int<0> : !s32i loc(#loc142)
                        %50 = cir.call @send(%44, %47, %48, %49) : (!s32i, !cir.ptr<!void>, !u64i, !s32i) -> !s64i loc(#loc143)
                        %51 = cir.const #cir.int<1> : !s32i loc(#loc144)
                        %52 = cir.unary(minus, %51) nsw : !s32i, !s32i loc(#loc144)
                        %53 = cir.cast(integral, %52 : !s32i), !s64i loc(#loc144)
                        %54 = cir.cmp(eq, %50, %53) : !s64i, !cir.bool loc(#loc347)
                        cir.if %54 {
                          cir.break loc(#loc146)
                        } loc(#loc348)
                      } loc(#loc345)
                    } else {
                      cir.scope {
                        %44 = cir.load %6 : !cir.ptr<!s32i>, !s32i loc(#loc149)
                        %45 = cir.get_global @".str.2" : !cir.ptr<!cir.array<!s8i x 9>> loc(#loc21)
                        %46 = cir.cast(array_to_ptrdecay, %45 : !cir.ptr<!cir.array<!s8i x 9>>), !cir.ptr<!s8i> loc(#loc21)
                        %47 = cir.cast(bitcast, %46 : !cir.ptr<!s8i>), !cir.ptr<!void> loc(#loc21)
                        %48 = cir.const #cir.int<8> : !u64i loc(#loc350)
                        %49 = cir.const #cir.int<0> : !s32i loc(#loc152)
                        %50 = cir.call @send(%44, %47, %48, %49) : (!s32i, !cir.ptr<!void>, !u64i, !s32i) -> !s64i loc(#loc153)
                        %51 = cir.const #cir.int<1> : !s32i loc(#loc154)
                        %52 = cir.unary(minus, %51) nsw : !s32i, !s32i loc(#loc154)
                        %53 = cir.cast(integral, %52 : !s32i), !s64i loc(#loc154)
                        %54 = cir.cmp(eq, %50, %53) : !s64i, !cir.bool loc(#loc351)
                        cir.if %54 {
                          %55 = cir.get_global @".str.3" : !cir.ptr<!cir.array<!s8i x 13>> loc(#loc24)
                          %56 = cir.cast(array_to_ptrdecay, %55 : !cir.ptr<!cir.array<!s8i x 13>>), !cir.ptr<!s8i> loc(#loc24)
                          cir.call @printLine(%56) : (!cir.ptr<!s8i>) -> () loc(#loc156)
                        } loc(#loc352)
                      } loc(#loc349)
                    } loc(#loc344)
                  } loc(#loc342)
                } loc(#loc314)
                cir.yield loc(#loc52)
              } while {
                %13 = cir.const #cir.int<0> : !s32i loc(#loc157)
                %14 = cir.cast(int_to_bool, %13 : !s32i), !cir.bool loc(#loc157)
                cir.condition(%14) loc(#loc157)
              } loc(#loc313)
            } loc(#loc313)
            cir.scope {
              %13 = cir.load %5 : !cir.ptr<!s32i>, !s32i loc(#loc160)
              %14 = cir.const #cir.int<1> : !s32i loc(#loc161)
              %15 = cir.unary(minus, %14) nsw : !s32i, !s32i loc(#loc161)
              %16 = cir.cmp(ne, %13, %15) : !s32i, !cir.bool loc(#loc354)
              cir.if %16 {
                %17 = cir.load %5 : !cir.ptr<!s32i>, !s32i loc(#loc163)
                %18 = cir.call @close(%17) : (!s32i) -> !s32i loc(#loc164)
              } loc(#loc355)
            } loc(#loc353)
            cir.scope {
              %13 = cir.load %6 : !cir.ptr<!s32i>, !s32i loc(#loc167)
              %14 = cir.const #cir.int<1> : !s32i loc(#loc168)
              %15 = cir.unary(minus, %14) nsw : !s32i, !s32i loc(#loc168)
              %16 = cir.cmp(ne, %13, %15) : !s32i, !cir.bool loc(#loc357)
              cir.if %16 {
                %17 = cir.load %6 : !cir.ptr<!s32i>, !s32i loc(#loc170)
                %18 = cir.call @close(%17) : (!s32i) -> !s32i loc(#loc171)
              } loc(#loc358)
            } loc(#loc356)
          } loc(#loc306)
        } loc(#loc305)
        cir.yield loc(#loc32)
      } step {
        %2 = cir.load %0 : !cir.ptr<!s32i>, !s32i loc(#loc172)
        %3 = cir.unary(inc, %2) nsw : !s32i, !s32i loc(#loc173)
        cir.store %3, %0 : !s32i, !cir.ptr<!s32i> loc(#loc359)
        cir.yield loc(#loc302)
      } loc(#loc302)
    } loc(#loc302)
    cir.return loc(#loc28)
  } loc(#loc300)
  cir.func no_proto @CWE510_Trapdoor__ip_based_logic_17_good() extra(#fn_attr1) {
    %0 = cir.get_global @good1 : !cir.ptr<!cir.func<()>> loc(#loc361)
    cir.call %0() : (!cir.ptr<!cir.func<()>>) -> () loc(#loc176)
    cir.return loc(#loc175)
  } loc(#loc360)
  cir.func no_proto internal private @good1() extra(#fn_attr1) {
    %0 = cir.alloca !s32i, !cir.ptr<!s32i>, ["k"] {alignment = 4 : i64} loc(#loc363)
    cir.scope {
      %1 = cir.const #cir.int<0> : !s32i loc(#loc184)
      cir.store %1, %0 : !s32i, !cir.ptr<!s32i> loc(#loc365)
      cir.for : cond {
        %2 = cir.load %0 : !cir.ptr<!s32i>, !s32i loc(#loc186)
        %3 = cir.const #cir.int<1> : !s32i loc(#loc187)
        %4 = cir.cmp(lt, %2, %3) : !s32i, !cir.bool loc(#loc366)
        cir.condition(%4) loc(#loc188)
      } body {
        cir.scope {
          cir.scope {
            %2 = cir.alloca !ty_sockaddr_in, !cir.ptr<!ty_sockaddr_in>, ["service"] {alignment = 4 : i64} loc(#loc369)
            %3 = cir.alloca !s32i, !cir.ptr<!s32i>, ["listenSocket", init] {alignment = 4 : i64} loc(#loc370)
            %4 = cir.alloca !s32i, !cir.ptr<!s32i>, ["acceptSocket", init] {alignment = 4 : i64} loc(#loc371)
            %5 = cir.const #cir.int<1> : !s32i loc(#loc195)
            %6 = cir.unary(minus, %5) nsw : !s32i, !s32i loc(#loc195)
            cir.store %6, %3 : !s32i, !cir.ptr<!s32i> loc(#loc370)
            %7 = cir.const #cir.int<1> : !s32i loc(#loc197)
            %8 = cir.unary(minus, %7) nsw : !s32i, !s32i loc(#loc197)
            cir.store %8, %4 : !s32i, !cir.ptr<!s32i> loc(#loc371)
            cir.scope {
              cir.do {
                cir.scope {
                  %9 = cir.const #cir.int<2> : !s32i loc(#loc202)
                  %10 = cir.const #cir.int<1> : !s32i loc(#loc203)
                  %11 = cir.const #cir.int<6> : !s32i loc(#loc204)
                  %12 = cir.call @socket(%9, %10, %11) : (!s32i, !s32i, !s32i) -> !s32i extra(#fn_attr) loc(#loc205)
                  cir.store %12, %3 : !s32i, !cir.ptr<!s32i> loc(#loc374)
                  cir.scope {
                    %31 = cir.load %3 : !cir.ptr<!s32i>, !s32i loc(#loc210)
                    %32 = cir.const #cir.int<1> : !s32i loc(#loc211)
                    %33 = cir.unary(minus, %32) nsw : !s32i, !s32i loc(#loc211)
                    %34 = cir.cmp(eq, %31, %33) : !s32i, !cir.bool loc(#loc376)
                    cir.if %34 {
                      cir.break loc(#loc213)
                    } loc(#loc377)
                  } loc(#loc375)
                  %13 = cir.cast(bitcast, %2 : !cir.ptr<!ty_sockaddr_in>), !cir.ptr<!void> loc(#loc378)
                  %14 = cir.const #cir.int<0> : !s32i loc(#loc216)
                  %15 = cir.const #cir.int<16> : !u64i loc(#loc379)
                  cir.libc.memset %15 bytes from %13 set to %14 : !cir.ptr<!void>, !s32i, !u64i loc(#loc380)
                  %16 = cir.const #cir.int<2> : !s32i loc(#loc221)
                  %17 = cir.cast(integral, %16 : !s32i), !u16i loc(#loc221)
                  %18 = cir.get_member %2[0] {name = "sin_family"} : !cir.ptr<!ty_sockaddr_in> -> !cir.ptr<!u16i> loc(#loc75)
                  cir.store %17, %18 : !u16i, !cir.ptr<!u16i> loc(#loc381)
                  %19 = cir.const #cir.int<0> : !s32i loc(#loc223)
                  %20 = cir.cast(integral, %19 : !s32i), !u32i loc(#loc223)
                  %21 = cir.get_member %2[2] {name = "sin_addr"} : !cir.ptr<!ty_sockaddr_in> -> !cir.ptr<!ty_in_addr> loc(#loc78)
                  %22 = cir.get_member %21[0] {name = "s_addr"} : !cir.ptr<!ty_in_addr> -> !cir.ptr<!u32i> loc(#loc79)
                  cir.store %20, %22 : !u32i, !cir.ptr<!u32i> loc(#loc382)
                  %23 = cir.const #cir.int<20000> : !s32i loc(#loc225)
                  %24 = cir.cast(integral, %23 : !s32i), !u16i loc(#loc225)
                  %25 = cir.call @htons(%24) : (!u16i) -> !u16i side_effect(const) extra(#fn_attr) loc(#loc226)
                  %26 = cir.get_member %2[1] {name = "sin_port"} : !cir.ptr<!ty_sockaddr_in> -> !cir.ptr<!u16i> loc(#loc83)
                  cir.store %25, %26 : !u16i, !cir.ptr<!u16i> loc(#loc383)
                  cir.scope {
                    %31 = cir.load %3 : !cir.ptr<!s32i>, !s32i loc(#loc231)
                    %32 = cir.cast(bitcast, %2 : !cir.ptr<!ty_sockaddr_in>), !cir.ptr<!ty_sockaddr> loc(#loc385)
                    %33 = cir.const #cir.int<16> : !u64i loc(#loc386)
                    %34 = cir.cast(integral, %33 : !u64i), !u32i loc(#loc386)
                    %35 = cir.call @bind(%31, %32, %34) : (!s32i, !cir.ptr<!ty_sockaddr>, !u32i) -> !s32i extra(#fn_attr) loc(#loc236)
                    %36 = cir.const #cir.int<1> : !s32i loc(#loc237)
                    %37 = cir.unary(minus, %36) nsw : !s32i, !s32i loc(#loc237)
                    %38 = cir.cmp(eq, %35, %37) : !s32i, !cir.bool loc(#loc387)
                    cir.if %38 {
                      cir.break loc(#loc239)
                    } loc(#loc388)
                  } loc(#loc384)
                  cir.scope {
                    %31 = cir.load %3 : !cir.ptr<!s32i>, !s32i loc(#loc242)
                    %32 = cir.const #cir.int<5> : !s32i loc(#loc243)
                    %33 = cir.call @listen(%31, %32) : (!s32i, !s32i) -> !s32i extra(#fn_attr) loc(#loc244)
                    %34 = cir.const #cir.int<1> : !s32i loc(#loc245)
                    %35 = cir.unary(minus, %34) nsw : !s32i, !s32i loc(#loc245)
                    %36 = cir.cmp(eq, %33, %35) : !s32i, !cir.bool loc(#loc390)
                    cir.if %36 {
                      cir.break loc(#loc247)
                    } loc(#loc391)
                  } loc(#loc389)
                  %27 = cir.load %3 : !cir.ptr<!s32i>, !s32i loc(#loc248)
                  %28 = cir.const #cir.ptr<null> : !cir.ptr<!ty_sockaddr> loc(#loc249)
                  %29 = cir.const #cir.ptr<null> : !cir.ptr<!u32i> loc(#loc250)
                  %30 = cir.call @accept(%27, %28, %29) : (!s32i, !cir.ptr<!ty_sockaddr>, !cir.ptr<!u32i>) -> !s32i loc(#loc251)
                  cir.store %30, %4 : !s32i, !cir.ptr<!s32i> loc(#loc392)
                  cir.scope {
                    %31 = cir.load %4 : !cir.ptr<!s32i>, !s32i loc(#loc256)
                    %32 = cir.const #cir.int<1> : !s32i loc(#loc257)
                    %33 = cir.unary(minus, %32) nsw : !s32i, !s32i loc(#loc257)
                    %34 = cir.cmp(eq, %31, %33) : !s32i, !cir.bool loc(#loc394)
                    cir.if %34 {
                      cir.break loc(#loc259)
                    } loc(#loc395)
                  } loc(#loc393)
                  cir.scope {
                    %31 = cir.load %4 : !cir.ptr<!s32i>, !s32i loc(#loc262)
                    %32 = cir.get_global @".str.2" : !cir.ptr<!cir.array<!s8i x 9>> loc(#loc263)
                    %33 = cir.cast(array_to_ptrdecay, %32 : !cir.ptr<!cir.array<!s8i x 9>>), !cir.ptr<!s8i> loc(#loc263)
                    %34 = cir.cast(bitcast, %33 : !cir.ptr<!s8i>), !cir.ptr<!void> loc(#loc263)
                    %35 = cir.const #cir.int<8> : !u64i loc(#loc397)
                    %36 = cir.const #cir.int<0> : !s32i loc(#loc266)
                    %37 = cir.call @send(%31, %34, %35, %36) : (!s32i, !cir.ptr<!void>, !u64i, !s32i) -> !s64i loc(#loc267)
                    %38 = cir.const #cir.int<1> : !s32i loc(#loc268)
                    %39 = cir.unary(minus, %38) nsw : !s32i, !s32i loc(#loc268)
                    %40 = cir.cast(integral, %39 : !s32i), !s64i loc(#loc268)
                    %41 = cir.cmp(eq, %37, %40) : !s64i, !cir.bool loc(#loc398)
                    cir.if %41 {
                      %42 = cir.get_global @".str.3" : !cir.ptr<!cir.array<!s8i x 13>> loc(#loc270)
                      %43 = cir.cast(array_to_ptrdecay, %42 : !cir.ptr<!cir.array<!s8i x 13>>), !cir.ptr<!s8i> loc(#loc270)
                      cir.call @printLine(%43) : (!cir.ptr<!s8i>) -> () loc(#loc271)
                    } loc(#loc399)
                  } loc(#loc396)
                } loc(#loc373)
                cir.yield loc(#loc199)
              } while {
                %9 = cir.const #cir.int<0> : !s32i loc(#loc272)
                %10 = cir.cast(int_to_bool, %9 : !s32i), !cir.bool loc(#loc272)
                cir.condition(%10) loc(#loc272)
              } loc(#loc372)
            } loc(#loc372)
            cir.scope {
              %9 = cir.load %3 : !cir.ptr<!s32i>, !s32i loc(#loc275)
              %10 = cir.const #cir.int<1> : !s32i loc(#loc276)
              %11 = cir.unary(minus, %10) nsw : !s32i, !s32i loc(#loc276)
              %12 = cir.cmp(ne, %9, %11) : !s32i, !cir.bool loc(#loc401)
              cir.if %12 {
                %13 = cir.load %3 : !cir.ptr<!s32i>, !s32i loc(#loc278)
                %14 = cir.call @close(%13) : (!s32i) -> !s32i loc(#loc279)
              } loc(#loc402)
            } loc(#loc400)
            cir.scope {
              %9 = cir.load %4 : !cir.ptr<!s32i>, !s32i loc(#loc282)
              %10 = cir.const #cir.int<1> : !s32i loc(#loc283)
              %11 = cir.unary(minus, %10) nsw : !s32i, !s32i loc(#loc283)
              %12 = cir.cmp(ne, %9, %11) : !s32i, !cir.bool loc(#loc404)
              cir.if %12 {
                %13 = cir.load %4 : !cir.ptr<!s32i>, !s32i loc(#loc285)
                %14 = cir.call @close(%13) : (!s32i) -> !s32i loc(#loc286)
              } loc(#loc405)
            } loc(#loc403)
          } loc(#loc368)
        } loc(#loc367)
        cir.yield loc(#loc183)
      } step {
        %2 = cir.load %0 : !cir.ptr<!s32i>, !s32i loc(#loc287)
        %3 = cir.unary(inc, %2) nsw : !s32i, !s32i loc(#loc288)
        cir.store %3, %0 : !s32i, !cir.ptr<!s32i> loc(#loc406)
        cir.yield loc(#loc364)
      } loc(#loc364)
    } loc(#loc364)
    cir.return loc(#loc179)
  } loc(#loc362)
} loc(#loc)
#loc = loc("/workspaces/juliet-c/testcases/CWE510_Trapdoor/CWE510_Trapdoor__ip_based_logic_17.c":0:0)
#loc1 = loc("/usr/include/x86_64-linux-gnu/sys/socket.h":102:1)
#loc2 = loc("/usr/include/x86_64-linux-gnu/sys/socket.h":102:62)
#loc3 = loc("/usr/include/netinet/in.h":402:1)
#loc4 = loc("/usr/include/netinet/in.h":403:40)
#loc5 = loc("/usr/include/x86_64-linux-gnu/sys/socket.h":112:1)
#loc6 = loc("/usr/include/x86_64-linux-gnu/sys/socket.h":113:6)
#loc7 = loc("/usr/include/x86_64-linux-gnu/sys/socket.h":296:1)
#loc8 = loc("/usr/include/x86_64-linux-gnu/sys/socket.h":296:39)
#loc9 = loc("/usr/include/x86_64-linux-gnu/sys/socket.h":306:1)
#loc10 = loc("/usr/include/x86_64-linux-gnu/sys/socket.h":307:38)
#loc11 = loc("/usr/include/x86_64-linux-gnu/sys/socket.h":116:1)
#loc12 = loc("/usr/include/x86_64-linux-gnu/sys/socket.h":117:33)
#loc13 = loc("/usr/include/string.h":156:1)
#loc14 = loc("/usr/include/string.h":157:33)
#loc15 = loc("CWE510_Trapdoor__ip_based_logic_17.c":91:28)
#loc16 = loc("/usr/include/arpa/inet.h":53:1)
#loc17 = loc("/usr/include/arpa/inet.h":53:46)
#loc18 = loc("/usr/include/x86_64-linux-gnu/sys/socket.h":138:1)
#loc19 = loc("/usr/include/x86_64-linux-gnu/sys/socket.h":138:74)
#loc20 = loc("CWE510_Trapdoor__ip_based_logic_17.c":93:44)
#loc21 = loc("CWE510_Trapdoor__ip_based_logic_17.c":101:44)
#loc22 = loc("../../testcasesupport/std_testcase_io.h":14:1)
#loc23 = loc("../../testcasesupport/std_testcase_io.h":14:33)
#loc24 = loc("CWE510_Trapdoor__ip_based_logic_17.c":103:35)
#loc25 = loc("/usr/include/unistd.h":358:1)
#loc26 = loc("/usr/include/unistd.h":358:27)
#loc27 = loc("CWE510_Trapdoor__ip_based_logic_17.c":41:1)
#loc28 = loc("CWE510_Trapdoor__ip_based_logic_17.c":124:1)
#loc29 = loc("CWE510_Trapdoor__ip_based_logic_17.c":43:5)
#loc30 = loc("CWE510_Trapdoor__ip_based_logic_17.c":43:9)
#loc31 = loc("CWE510_Trapdoor__ip_based_logic_17.c":44:5)
#loc32 = loc("CWE510_Trapdoor__ip_based_logic_17.c":123:5)
#loc33 = loc("CWE510_Trapdoor__ip_based_logic_17.c":44:13)
#loc34 = loc("CWE510_Trapdoor__ip_based_logic_17.c":44:9)
#loc35 = loc("CWE510_Trapdoor__ip_based_logic_17.c":44:16)
#loc36 = loc("CWE510_Trapdoor__ip_based_logic_17.c":44:20)
#loc37 = loc("CWE510_Trapdoor__ip_based_logic_17.c":44:18)
#loc38 = loc("CWE510_Trapdoor__ip_based_logic_17.c":45:5)
#loc39 = loc("CWE510_Trapdoor__ip_based_logic_17.c":46:9)
#loc40 = loc("CWE510_Trapdoor__ip_based_logic_17.c":122:9)
#loc41 = loc("CWE510_Trapdoor__ip_based_logic_17.c":51:13)
#loc42 = loc("CWE510_Trapdoor__ip_based_logic_17.c":51:32)
#loc43 = loc("CWE510_Trapdoor__ip_based_logic_17.c":51:41)
#loc44 = loc("CWE510_Trapdoor__ip_based_logic_17.c":52:13)
#loc45 = loc("CWE510_Trapdoor__ip_based_logic_17.c":52:56)
#loc46 = loc("CWE510_Trapdoor__ip_based_logic_17.c":53:13)
#loc47 = loc("CWE510_Trapdoor__ip_based_logic_17.c":53:35)
#loc48 = loc("CWE510_Trapdoor__ip_based_logic_17.c":54:13)
#loc49 = loc("CWE510_Trapdoor__ip_based_logic_17.c":54:35)
#loc50 = loc("CWE510_Trapdoor__ip_based_logic_17.c":52:36)
#loc51 = loc("CWE510_Trapdoor__ip_based_logic_17.c":55:13)
#loc52 = loc("CWE510_Trapdoor__ip_based_logic_17.c":107:21)
#loc53 = loc("CWE510_Trapdoor__ip_based_logic_17.c":56:13)
#loc54 = loc("CWE510_Trapdoor__ip_based_logic_17.c":106:13)
#loc55 = loc("CWE510_Trapdoor__ip_based_logic_17.c":64:39)
#loc56 = loc("CWE510_Trapdoor__ip_based_logic_17.c":64:48)
#loc57 = loc("CWE510_Trapdoor__ip_based_logic_17.c":64:61)
#loc58 = loc("CWE510_Trapdoor__ip_based_logic_17.c":64:32)
#loc59 = loc("CWE510_Trapdoor__ip_based_logic_17.c":64:17)
#loc60 = loc("CWE510_Trapdoor__ip_based_logic_17.c":64:72)
#loc61 = loc("CWE510_Trapdoor__ip_based_logic_17.c":65:17)
#loc62 = loc("CWE510_Trapdoor__ip_based_logic_17.c":68:17)
#loc63 = loc("CWE510_Trapdoor__ip_based_logic_17.c":65:21)
#loc64 = loc("CWE510_Trapdoor__ip_based_logic_17.c":65:37)
#loc65 = loc("CWE510_Trapdoor__ip_based_logic_17.c":66:17)
#loc66 = loc("CWE510_Trapdoor__ip_based_logic_17.c":67:21)
#loc67 = loc("CWE510_Trapdoor__ip_based_logic_17.c":69:24)
#loc68 = loc("CWE510_Trapdoor__ip_based_logic_17.c":69:25)
#loc69 = loc("CWE510_Trapdoor__ip_based_logic_17.c":69:34)
#loc70 = loc("CWE510_Trapdoor__ip_based_logic_17.c":69:37)
#loc71 = loc("CWE510_Trapdoor__ip_based_logic_17.c":69:51)
#loc72 = loc("CWE510_Trapdoor__ip_based_logic_17.c":69:17)
#loc73 = loc("CWE510_Trapdoor__ip_based_logic_17.c":69:52)
#loc74 = loc("CWE510_Trapdoor__ip_based_logic_17.c":70:38)
#loc75 = loc("/usr/include/netinet/in.h":249:5)
#loc76 = loc("CWE510_Trapdoor__ip_based_logic_17.c":70:17)
#loc77 = loc("CWE510_Trapdoor__ip_based_logic_17.c":71:43)
#loc78 = loc("/usr/include/netinet/in.h":251:20)
#loc79 = loc("/usr/include/netinet/in.h":33:15)
#loc80 = loc("CWE510_Trapdoor__ip_based_logic_17.c":71:17)
#loc81 = loc("CWE510_Trapdoor__ip_based_logic_17.c":72:42)
#loc82 = loc("CWE510_Trapdoor__ip_based_logic_17.c":72:36)
#loc83 = loc("/usr/include/netinet/in.h":250:15)
#loc84 = loc("CWE510_Trapdoor__ip_based_logic_17.c":72:17)
#loc85 = loc("CWE510_Trapdoor__ip_based_logic_17.c":72:47)
#loc86 = loc("CWE510_Trapdoor__ip_based_logic_17.c":73:17)
#loc87 = loc("CWE510_Trapdoor__ip_based_logic_17.c":76:17)
#loc88 = loc("CWE510_Trapdoor__ip_based_logic_17.c":73:26)
#loc89 = loc("CWE510_Trapdoor__ip_based_logic_17.c":73:58)
#loc90 = loc("CWE510_Trapdoor__ip_based_logic_17.c":73:59)
#loc91 = loc("CWE510_Trapdoor__ip_based_logic_17.c":73:68)
#loc92 = loc("CWE510_Trapdoor__ip_based_logic_17.c":73:82)
#loc93 = loc("CWE510_Trapdoor__ip_based_logic_17.c":73:21)
#loc94 = loc("CWE510_Trapdoor__ip_based_logic_17.c":73:88)
#loc95 = loc("CWE510_Trapdoor__ip_based_logic_17.c":74:17)
#loc96 = loc("CWE510_Trapdoor__ip_based_logic_17.c":75:21)
#loc97 = loc("CWE510_Trapdoor__ip_based_logic_17.c":77:17)
#loc98 = loc("CWE510_Trapdoor__ip_based_logic_17.c":80:17)
#loc99 = loc("CWE510_Trapdoor__ip_based_logic_17.c":77:28)
#loc100 = loc("CWE510_Trapdoor__ip_based_logic_17.c":77:42)
#loc101 = loc("CWE510_Trapdoor__ip_based_logic_17.c":77:21)
#loc102 = loc("CWE510_Trapdoor__ip_based_logic_17.c":77:48)
#loc103 = loc("CWE510_Trapdoor__ip_based_logic_17.c":78:17)
#loc104 = loc("CWE510_Trapdoor__ip_based_logic_17.c":79:21)
#loc105 = loc("CWE510_Trapdoor__ip_based_logic_17.c":81:39)
#loc106 = loc("CWE510_Trapdoor__ip_based_logic_17.c":81:53)
#loc107 = loc("CWE510_Trapdoor__ip_based_logic_17.c":81:59)
#loc108 = loc("CWE510_Trapdoor__ip_based_logic_17.c":81:32)
#loc109 = loc("CWE510_Trapdoor__ip_based_logic_17.c":81:17)
#loc110 = loc("CWE510_Trapdoor__ip_based_logic_17.c":81:63)
#loc111 = loc("CWE510_Trapdoor__ip_based_logic_17.c":82:17)
#loc112 = loc("CWE510_Trapdoor__ip_based_logic_17.c":85:17)
#loc113 = loc("CWE510_Trapdoor__ip_based_logic_17.c":82:21)
#loc114 = loc("CWE510_Trapdoor__ip_based_logic_17.c":82:37)
#loc115 = loc("CWE510_Trapdoor__ip_based_logic_17.c":83:17)
#loc116 = loc("CWE510_Trapdoor__ip_based_logic_17.c":84:21)
#loc117 = loc("CWE510_Trapdoor__ip_based_logic_17.c":86:17)
#loc118 = loc("CWE510_Trapdoor__ip_based_logic_17.c":89:17)
#loc119 = loc("CWE510_Trapdoor__ip_based_logic_17.c":86:33)
#loc120 = loc("CWE510_Trapdoor__ip_based_logic_17.c":86:66)
#loc121 = loc("CWE510_Trapdoor__ip_based_logic_17.c":86:67)
#loc122 = loc("CWE510_Trapdoor__ip_based_logic_17.c":86:82)
#loc123 = loc("CWE510_Trapdoor__ip_based_logic_17.c":86:83)
#loc124 = loc("CWE510_Trapdoor__ip_based_logic_17.c":86:21)
#loc125 = loc("CWE510_Trapdoor__ip_based_logic_17.c":86:105)
#loc126 = loc("CWE510_Trapdoor__ip_based_logic_17.c":86:104)
#loc127 = loc("CWE510_Trapdoor__ip_based_logic_17.c":87:17)
#loc128 = loc("CWE510_Trapdoor__ip_based_logic_17.c":88:21)
#loc129 = loc("CWE510_Trapdoor__ip_based_logic_17.c":91:17)
#loc130 = loc("CWE510_Trapdoor__ip_based_logic_17.c":105:17)
#loc131 = loc("CWE510_Trapdoor__ip_based_logic_17.c":91:21)
#loc132 = loc("CWE510_Trapdoor__ip_based_logic_17.c":91:46)
#loc133 = loc("CWE510_Trapdoor__ip_based_logic_17.c":91:84)
#loc134 = loc("CWE510_Trapdoor__ip_based_logic_17.c":92:17)
#loc135 = loc("CWE510_Trapdoor__ip_based_logic_17.c":98:17)
#loc136 = loc("CWE510_Trapdoor__ip_based_logic_17.c":100:17)
#loc137 = loc("CWE510_Trapdoor__ip_based_logic_17.c":93:21)
#loc138 = loc("CWE510_Trapdoor__ip_based_logic_17.c":97:21)
#loc139 = loc("CWE510_Trapdoor__ip_based_logic_17.c":93:30)
#loc140 = loc("CWE510_Trapdoor__ip_based_logic_17.c":93:59)
#loc141 = loc("CWE510_Trapdoor__ip_based_logic_17.c":93:79)
#loc142 = loc("CWE510_Trapdoor__ip_based_logic_17.c":93:82)
#loc143 = loc("CWE510_Trapdoor__ip_based_logic_17.c":93:25)
#loc144 = loc("CWE510_Trapdoor__ip_based_logic_17.c":93:89)
#loc145 = loc("CWE510_Trapdoor__ip_based_logic_17.c":94:21)
#loc146 = loc("CWE510_Trapdoor__ip_based_logic_17.c":96:25)
#loc147 = loc("CWE510_Trapdoor__ip_based_logic_17.c":101:21)
#loc148 = loc("CWE510_Trapdoor__ip_based_logic_17.c":104:21)
#loc149 = loc("CWE510_Trapdoor__ip_based_logic_17.c":101:30)
#loc150 = loc("CWE510_Trapdoor__ip_based_logic_17.c":101:61)
#loc151 = loc("CWE510_Trapdoor__ip_based_logic_17.c":101:83)
#loc152 = loc("CWE510_Trapdoor__ip_based_logic_17.c":101:86)
#loc153 = loc("CWE510_Trapdoor__ip_based_logic_17.c":101:25)
#loc154 = loc("CWE510_Trapdoor__ip_based_logic_17.c":101:92)
#loc155 = loc("CWE510_Trapdoor__ip_based_logic_17.c":102:21)
#loc156 = loc("CWE510_Trapdoor__ip_based_logic_17.c":103:25)
#loc157 = loc("CWE510_Trapdoor__ip_based_logic_17.c":107:20)
#loc158 = loc("CWE510_Trapdoor__ip_based_logic_17.c":108:13)
#loc159 = loc("CWE510_Trapdoor__ip_based_logic_17.c":111:13)
#loc160 = loc("CWE510_Trapdoor__ip_based_logic_17.c":108:17)
#loc161 = loc("CWE510_Trapdoor__ip_based_logic_17.c":108:33)
#loc162 = loc("CWE510_Trapdoor__ip_based_logic_17.c":109:13)
#loc163 = loc("CWE510_Trapdoor__ip_based_logic_17.c":110:30)
#loc164 = loc("CWE510_Trapdoor__ip_based_logic_17.c":110:17)
#loc165 = loc("CWE510_Trapdoor__ip_based_logic_17.c":112:13)
#loc166 = loc("CWE510_Trapdoor__ip_based_logic_17.c":115:13)
#loc167 = loc("CWE510_Trapdoor__ip_based_logic_17.c":112:17)
#loc168 = loc("CWE510_Trapdoor__ip_based_logic_17.c":112:33)
#loc169 = loc("CWE510_Trapdoor__ip_based_logic_17.c":113:13)
#loc170 = loc("CWE510_Trapdoor__ip_based_logic_17.c":114:30)
#loc171 = loc("CWE510_Trapdoor__ip_based_logic_17.c":114:17)
#loc172 = loc("CWE510_Trapdoor__ip_based_logic_17.c":44:24)
#loc173 = loc("CWE510_Trapdoor__ip_based_logic_17.c":44:23)
#loc174 = loc("CWE510_Trapdoor__ip_based_logic_17.c":200:1)
#loc175 = loc("CWE510_Trapdoor__ip_based_logic_17.c":203:1)
#loc176 = loc("CWE510_Trapdoor__ip_based_logic_17.c":202:5)
#loc177 = loc("CWE510_Trapdoor__ip_based_logic_17.c":202:11)
#loc178 = loc("CWE510_Trapdoor__ip_based_logic_17.c":131:1)
#loc179 = loc("CWE510_Trapdoor__ip_based_logic_17.c":198:1)
#loc180 = loc("CWE510_Trapdoor__ip_based_logic_17.c":133:5)
#loc181 = loc("CWE510_Trapdoor__ip_based_logic_17.c":133:9)
#loc182 = loc("CWE510_Trapdoor__ip_based_logic_17.c":134:5)
#loc183 = loc("CWE510_Trapdoor__ip_based_logic_17.c":197:5)
#loc184 = loc("CWE510_Trapdoor__ip_based_logic_17.c":134:13)
#loc185 = loc("CWE510_Trapdoor__ip_based_logic_17.c":134:9)
#loc186 = loc("CWE510_Trapdoor__ip_based_logic_17.c":134:16)
#loc187 = loc("CWE510_Trapdoor__ip_based_logic_17.c":134:20)
#loc188 = loc("CWE510_Trapdoor__ip_based_logic_17.c":134:18)
#loc189 = loc("CWE510_Trapdoor__ip_based_logic_17.c":135:5)
#loc190 = loc("CWE510_Trapdoor__ip_based_logic_17.c":136:9)
#loc191 = loc("CWE510_Trapdoor__ip_based_logic_17.c":196:9)
#loc192 = loc("CWE510_Trapdoor__ip_based_logic_17.c":141:13)
#loc193 = loc("CWE510_Trapdoor__ip_based_logic_17.c":141:32)
#loc194 = loc("CWE510_Trapdoor__ip_based_logic_17.c":142:13)
#loc195 = loc("CWE510_Trapdoor__ip_based_logic_17.c":142:35)
#loc196 = loc("CWE510_Trapdoor__ip_based_logic_17.c":143:13)
#loc197 = loc("CWE510_Trapdoor__ip_based_logic_17.c":143:35)
#loc198 = loc("CWE510_Trapdoor__ip_based_logic_17.c":144:13)
#loc199 = loc("CWE510_Trapdoor__ip_based_logic_17.c":181:21)
#loc200 = loc("CWE510_Trapdoor__ip_based_logic_17.c":145:13)
#loc201 = loc("CWE510_Trapdoor__ip_based_logic_17.c":180:13)
#loc202 = loc("CWE510_Trapdoor__ip_based_logic_17.c":153:39)
#loc203 = loc("CWE510_Trapdoor__ip_based_logic_17.c":153:48)
#loc204 = loc("CWE510_Trapdoor__ip_based_logic_17.c":153:61)
#loc205 = loc("CWE510_Trapdoor__ip_based_logic_17.c":153:32)
#loc206 = loc("CWE510_Trapdoor__ip_based_logic_17.c":153:17)
#loc207 = loc("CWE510_Trapdoor__ip_based_logic_17.c":153:72)
#loc208 = loc("CWE510_Trapdoor__ip_based_logic_17.c":154:17)
#loc209 = loc("CWE510_Trapdoor__ip_based_logic_17.c":157:17)
#loc210 = loc("CWE510_Trapdoor__ip_based_logic_17.c":154:21)
#loc211 = loc("CWE510_Trapdoor__ip_based_logic_17.c":154:37)
#loc212 = loc("CWE510_Trapdoor__ip_based_logic_17.c":155:17)
#loc213 = loc("CWE510_Trapdoor__ip_based_logic_17.c":156:21)
#loc214 = loc("CWE510_Trapdoor__ip_based_logic_17.c":158:24)
#loc215 = loc("CWE510_Trapdoor__ip_based_logic_17.c":158:25)
#loc216 = loc("CWE510_Trapdoor__ip_based_logic_17.c":158:34)
#loc217 = loc("CWE510_Trapdoor__ip_based_logic_17.c":158:37)
#loc218 = loc("CWE510_Trapdoor__ip_based_logic_17.c":158:51)
#loc219 = loc("CWE510_Trapdoor__ip_based_logic_17.c":158:17)
#loc220 = loc("CWE510_Trapdoor__ip_based_logic_17.c":158:52)
#loc221 = loc("CWE510_Trapdoor__ip_based_logic_17.c":159:38)
#loc222 = loc("CWE510_Trapdoor__ip_based_logic_17.c":159:17)
#loc223 = loc("CWE510_Trapdoor__ip_based_logic_17.c":160:43)
#loc224 = loc("CWE510_Trapdoor__ip_based_logic_17.c":160:17)
#loc225 = loc("CWE510_Trapdoor__ip_based_logic_17.c":161:42)
#loc226 = loc("CWE510_Trapdoor__ip_based_logic_17.c":161:36)
#loc227 = loc("CWE510_Trapdoor__ip_based_logic_17.c":161:17)
#loc228 = loc("CWE510_Trapdoor__ip_based_logic_17.c":161:47)
#loc229 = loc("CWE510_Trapdoor__ip_based_logic_17.c":162:17)
#loc230 = loc("CWE510_Trapdoor__ip_based_logic_17.c":165:17)
#loc231 = loc("CWE510_Trapdoor__ip_based_logic_17.c":162:26)
#loc232 = loc("CWE510_Trapdoor__ip_based_logic_17.c":162:58)
#loc233 = loc("CWE510_Trapdoor__ip_based_logic_17.c":162:59)
#loc234 = loc("CWE510_Trapdoor__ip_based_logic_17.c":162:68)
#loc235 = loc("CWE510_Trapdoor__ip_based_logic_17.c":162:82)
#loc236 = loc("CWE510_Trapdoor__ip_based_logic_17.c":162:21)
#loc237 = loc("CWE510_Trapdoor__ip_based_logic_17.c":162:88)
#loc238 = loc("CWE510_Trapdoor__ip_based_logic_17.c":163:17)
#loc239 = loc("CWE510_Trapdoor__ip_based_logic_17.c":164:21)
#loc240 = loc("CWE510_Trapdoor__ip_based_logic_17.c":166:17)
#loc241 = loc("CWE510_Trapdoor__ip_based_logic_17.c":169:17)
#loc242 = loc("CWE510_Trapdoor__ip_based_logic_17.c":166:28)
#loc243 = loc("CWE510_Trapdoor__ip_based_logic_17.c":166:42)
#loc244 = loc("CWE510_Trapdoor__ip_based_logic_17.c":166:21)
#loc245 = loc("CWE510_Trapdoor__ip_based_logic_17.c":166:48)
#loc246 = loc("CWE510_Trapdoor__ip_based_logic_17.c":167:17)
#loc247 = loc("CWE510_Trapdoor__ip_based_logic_17.c":168:21)
#loc248 = loc("CWE510_Trapdoor__ip_based_logic_17.c":170:39)
#loc249 = loc("CWE510_Trapdoor__ip_based_logic_17.c":170:53)
#loc250 = loc("CWE510_Trapdoor__ip_based_logic_17.c":170:59)
#loc251 = loc("CWE510_Trapdoor__ip_based_logic_17.c":170:32)
#loc252 = loc("CWE510_Trapdoor__ip_based_logic_17.c":170:17)
#loc253 = loc("CWE510_Trapdoor__ip_based_logic_17.c":170:63)
#loc254 = loc("CWE510_Trapdoor__ip_based_logic_17.c":171:17)
#loc255 = loc("CWE510_Trapdoor__ip_based_logic_17.c":174:17)
#loc256 = loc("CWE510_Trapdoor__ip_based_logic_17.c":171:21)
#loc257 = loc("CWE510_Trapdoor__ip_based_logic_17.c":171:37)
#loc258 = loc("CWE510_Trapdoor__ip_based_logic_17.c":172:17)
#loc259 = loc("CWE510_Trapdoor__ip_based_logic_17.c":173:21)
#loc260 = loc("CWE510_Trapdoor__ip_based_logic_17.c":176:17)
#loc261 = loc("CWE510_Trapdoor__ip_based_logic_17.c":179:17)
#loc262 = loc("CWE510_Trapdoor__ip_based_logic_17.c":176:26)
#loc263 = loc("CWE510_Trapdoor__ip_based_logic_17.c":176:40)
#loc264 = loc("CWE510_Trapdoor__ip_based_logic_17.c":176:57)
#loc265 = loc("CWE510_Trapdoor__ip_based_logic_17.c":176:79)
#loc266 = loc("CWE510_Trapdoor__ip_based_logic_17.c":176:82)
#loc267 = loc("CWE510_Trapdoor__ip_based_logic_17.c":176:21)
#loc268 = loc("CWE510_Trapdoor__ip_based_logic_17.c":176:88)
#loc269 = loc("CWE510_Trapdoor__ip_based_logic_17.c":177:17)
#loc270 = loc("CWE510_Trapdoor__ip_based_logic_17.c":178:31)
#loc271 = loc("CWE510_Trapdoor__ip_based_logic_17.c":178:21)
#loc272 = loc("CWE510_Trapdoor__ip_based_logic_17.c":181:20)
#loc273 = loc("CWE510_Trapdoor__ip_based_logic_17.c":182:13)
#loc274 = loc("CWE510_Trapdoor__ip_based_logic_17.c":185:13)
#loc275 = loc("CWE510_Trapdoor__ip_based_logic_17.c":182:17)
#loc276 = loc("CWE510_Trapdoor__ip_based_logic_17.c":182:33)
#loc277 = loc("CWE510_Trapdoor__ip_based_logic_17.c":183:13)
#loc278 = loc("CWE510_Trapdoor__ip_based_logic_17.c":184:30)
#loc279 = loc("CWE510_Trapdoor__ip_based_logic_17.c":184:17)
#loc280 = loc("CWE510_Trapdoor__ip_based_logic_17.c":186:13)
#loc281 = loc("CWE510_Trapdoor__ip_based_logic_17.c":189:13)
#loc282 = loc("CWE510_Trapdoor__ip_based_logic_17.c":186:17)
#loc283 = loc("CWE510_Trapdoor__ip_based_logic_17.c":186:33)
#loc284 = loc("CWE510_Trapdoor__ip_based_logic_17.c":187:13)
#loc285 = loc("CWE510_Trapdoor__ip_based_logic_17.c":188:30)
#loc286 = loc("CWE510_Trapdoor__ip_based_logic_17.c":188:17)
#loc287 = loc("CWE510_Trapdoor__ip_based_logic_17.c":134:24)
#loc288 = loc("CWE510_Trapdoor__ip_based_logic_17.c":134:23)
#loc289 = loc(fused[#loc1, #loc2])
#loc290 = loc(fused[#loc3, #loc4])
#loc291 = loc(fused[#loc5, #loc6])
#loc292 = loc(fused[#loc7, #loc8])
#loc293 = loc(fused[#loc9, #loc10])
#loc294 = loc(fused[#loc11, #loc12])
#loc295 = loc(fused[#loc13, #loc14])
#loc296 = loc(fused[#loc16, #loc17])
#loc297 = loc(fused[#loc18, #loc19])
#loc298 = loc(fused[#loc22, #loc23])
#loc299 = loc(fused[#loc25, #loc26])
#loc300 = loc(fused[#loc27, #loc28])
#loc301 = loc(fused[#loc29, #loc30])
#loc302 = loc(fused[#loc31, #loc32])
#loc303 = loc(fused[#loc34, #loc33])
#loc304 = loc(fused[#loc35, #loc36])
#loc305 = loc(fused[#loc38, #loc32])
#loc306 = loc(fused[#loc39, #loc40])
#loc307 = loc(fused[#loc41, #loc42])
#loc308 = loc(fused[#loc41, #loc43])
#loc309 = loc(fused[#loc44, #loc45])
#loc310 = loc(fused[#loc46, #loc47])
#loc311 = loc(fused[#loc48, #loc49])
#loc312 = loc(fused[#loc50, #loc45])
#loc313 = loc(fused[#loc51, #loc52])
#loc314 = loc(fused[#loc53, #loc54])
#loc315 = loc(fused[#loc59, #loc60])
#loc316 = loc(fused[#loc61, #loc62])
#loc317 = loc(fused[#loc63, #loc64])
#loc318 = loc(fused[#loc65, #loc62])
#loc319 = loc(fused[#loc67, #loc68])
#loc320 = loc(fused[#loc70, #loc71])
#loc321 = loc(fused[#loc72, #loc73])
#loc322 = loc(fused[#loc76, #loc74])
#loc323 = loc(fused[#loc80, #loc77])
#loc324 = loc(fused[#loc84, #loc85])
#loc325 = loc(fused[#loc86, #loc87])
#loc326 = loc(fused[#loc89, #loc90])
#loc327 = loc(fused[#loc91, #loc92])
#loc328 = loc(fused[#loc93, #loc94])
#loc329 = loc(fused[#loc95, #loc87])
#loc330 = loc(fused[#loc97, #loc98])
#loc331 = loc(fused[#loc101, #loc102])
#loc332 = loc(fused[#loc103, #loc98])
#loc333 = loc(fused[#loc109, #loc110])
#loc334 = loc(fused[#loc111, #loc112])
#loc335 = loc(fused[#loc113, #loc114])
#loc336 = loc(fused[#loc115, #loc112])
#loc337 = loc(fused[#loc117, #loc118])
#loc338 = loc(fused[#loc120, #loc121])
#loc339 = loc(fused[#loc122, #loc123])
#loc340 = loc(fused[#loc124, #loc125])
#loc341 = loc(fused[#loc127, #loc118])
#loc342 = loc(fused[#loc129, #loc130])
#loc343 = loc(fused[#loc131, #loc133])
#loc344 = loc(fused[#loc134, #loc135, #loc136, #loc130])
#loc345 = loc(fused[#loc137, #loc138])
#loc346 = loc(fused[#loc140, #loc141])
#loc347 = loc(fused[#loc143, #loc144])
#loc348 = loc(fused[#loc145, #loc138])
#loc349 = loc(fused[#loc147, #loc148])
#loc350 = loc(fused[#loc150, #loc151])
#loc351 = loc(fused[#loc153, #loc154])
#loc352 = loc(fused[#loc155, #loc148])
#loc353 = loc(fused[#loc158, #loc159])
#loc354 = loc(fused[#loc160, #loc161])
#loc355 = loc(fused[#loc162, #loc159])
#loc356 = loc(fused[#loc165, #loc166])
#loc357 = loc(fused[#loc167, #loc168])
#loc358 = loc(fused[#loc169, #loc166])
#loc359 = loc(fused[#loc173, #loc172])
#loc360 = loc(fused[#loc174, #loc175])
#loc361 = loc(fused[#loc176, #loc177])
#loc362 = loc(fused[#loc178, #loc179])
#loc363 = loc(fused[#loc180, #loc181])
#loc364 = loc(fused[#loc182, #loc183])
#loc365 = loc(fused[#loc185, #loc184])
#loc366 = loc(fused[#loc186, #loc187])
#loc367 = loc(fused[#loc189, #loc183])
#loc368 = loc(fused[#loc190, #loc191])
#loc369 = loc(fused[#loc192, #loc193])
#loc370 = loc(fused[#loc194, #loc195])
#loc371 = loc(fused[#loc196, #loc197])
#loc372 = loc(fused[#loc198, #loc199])
#loc373 = loc(fused[#loc200, #loc201])
#loc374 = loc(fused[#loc206, #loc207])
#loc375 = loc(fused[#loc208, #loc209])
#loc376 = loc(fused[#loc210, #loc211])
#loc377 = loc(fused[#loc212, #loc209])
#loc378 = loc(fused[#loc214, #loc215])
#loc379 = loc(fused[#loc217, #loc218])
#loc380 = loc(fused[#loc219, #loc220])
#loc381 = loc(fused[#loc222, #loc221])
#loc382 = loc(fused[#loc224, #loc223])
#loc383 = loc(fused[#loc227, #loc228])
#loc384 = loc(fused[#loc229, #loc230])
#loc385 = loc(fused[#loc232, #loc233])
#loc386 = loc(fused[#loc234, #loc235])
#loc387 = loc(fused[#loc236, #loc237])
#loc388 = loc(fused[#loc238, #loc230])
#loc389 = loc(fused[#loc240, #loc241])
#loc390 = loc(fused[#loc244, #loc245])
#loc391 = loc(fused[#loc246, #loc241])
#loc392 = loc(fused[#loc252, #loc253])
#loc393 = loc(fused[#loc254, #loc255])
#loc394 = loc(fused[#loc256, #loc257])
#loc395 = loc(fused[#loc258, #loc255])
#loc396 = loc(fused[#loc260, #loc261])
#loc397 = loc(fused[#loc264, #loc265])
#loc398 = loc(fused[#loc267, #loc268])
#loc399 = loc(fused[#loc269, #loc261])
#loc400 = loc(fused[#loc273, #loc274])
#loc401 = loc(fused[#loc275, #loc276])
#loc402 = loc(fused[#loc277, #loc274])
#loc403 = loc(fused[#loc280, #loc281])
#loc404 = loc(fused[#loc282, #loc283])
#loc405 = loc(fused[#loc284, #loc281])
#loc406 = loc(fused[#loc288, #loc287])
