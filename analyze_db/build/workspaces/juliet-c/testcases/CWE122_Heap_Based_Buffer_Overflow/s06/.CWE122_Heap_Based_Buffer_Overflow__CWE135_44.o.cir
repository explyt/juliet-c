!s32i = !cir.int<s, 32>
!s8i = !cir.int<s, 8>
!u64i = !cir.int<u, 64>
!void = !cir.void
#fn_attr = #cir<extra({nothrow = #cir.nothrow})>
#fn_attr1 = #cir<extra({inline = #cir.inline<no>, nothrow = #cir.nothrow, optnone = #cir.optnone, uwtable = #cir.uwtable<async>})>
#loc13 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE135_44.c":24:21)
#loc14 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE135_44.c":24:28)
#loc98 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE135_44.c":60:25)
#loc99 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE135_44.c":60:32)
#loc173 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE135_44.c":90:25)
#loc174 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE135_44.c":90:32)
#loc248 = loc(fused[#loc13, #loc14])
#loc279 = loc(fused[#loc98, #loc99])
#loc305 = loc(fused[#loc173, #loc174])
module @"/workspaces/juliet-c/testcases/CWE122_Heap_Based_Buffer_Overflow/s06/CWE122_Heap_Based_Buffer_Overflow__CWE135_44.c" attributes {cir.lang = #cir.lang<c>, cir.sob = #cir.signed_overflow_behavior<undefined>, cir.triple = "x86_64-unknown-linux-gnu", cir.type_size_info = #cir.type_size_info<char = 8, int = 32, size_t = 64>, cir.uwtable = #cir.uwtable<async>, dlti.dl_spec = #dlti.dl_spec<i8 = dense<8> : vector<2xi64>, i32 = dense<32> : vector<2xi64>, i16 = dense<16> : vector<2xi64>, f80 = dense<128> : vector<2xi64>, i1 = dense<8> : vector<2xi64>, !llvm.ptr<270> = dense<32> : vector<4xi64>, !llvm.ptr = dense<64> : vector<4xi64>, i64 = dense<64> : vector<2xi64>, !llvm.ptr<272> = dense<64> : vector<4xi64>, i128 = dense<128> : vector<2xi64>, f128 = dense<128> : vector<2xi64>, !llvm.ptr<271> = dense<32> : vector<4xi64>, f16 = dense<16> : vector<2xi64>, f64 = dense<64> : vector<2xi64>, "dlti.endianness" = "little", "dlti.stack_alignment" = 128 : i64, "dlti.mangling_mode" = "e">} {
  cir.func private @strlen(!cir.ptr<!s8i>) -> !u64i extra(#fn_attr) loc(#loc242)
  cir.func private @calloc(!u64i, !u64i) -> !cir.ptr<!void> extra(#fn_attr) loc(#loc243)
  cir.func private @wcscpy(!cir.ptr<!s32i>, !cir.ptr<!s32i>) -> !cir.ptr<!s32i> extra(#fn_attr) loc(#loc244)
  cir.func private @printLine(!cir.ptr<!s8i>) loc(#loc245)
  cir.func private @free(!cir.ptr<!void>) extra(#fn_attr) loc(#loc246)
  cir.func internal private @badSink(%arg0: !cir.ptr<!void> loc(fused[#loc13, #loc14])) extra(#fn_attr1) {
    %0 = cir.alloca !cir.ptr<!void>, !cir.ptr<!cir.ptr<!void>>, ["data", init] {alignment = 8 : i64} loc(#loc248)
    cir.store %arg0, %0 : !cir.ptr<!void>, !cir.ptr<!cir.ptr<!void>> loc(#loc15)
    cir.scope {
      %1 = cir.alloca !u64i, !cir.ptr<!u64i>, ["dataLen", init] {alignment = 8 : i64} loc(#loc250)
      %2 = cir.alloca !cir.ptr<!void>, !cir.ptr<!cir.ptr<!void>>, ["dest", init] {alignment = 8 : i64} loc(#loc251)
      %3 = cir.get_global @strlen : !cir.ptr<!cir.func<(!cir.ptr<!s8i>) -> !u64i>> loc(#loc22)
      %4 = cir.load %0 : !cir.ptr<!cir.ptr<!void>>, !cir.ptr<!void> loc(#loc23)
      %5 = cir.cast(bitcast, %4 : !cir.ptr<!void>), !cir.ptr<!s8i> loc(#loc23)
      %6 = cir.call @strlen(%5) : (!cir.ptr<!s8i>) -> !u64i side_effect(pure) extra(#fn_attr) loc(#loc22)
      cir.store %6, %1 : !u64i, !cir.ptr<!u64i> loc(#loc250)
      %7 = cir.get_global @calloc : !cir.ptr<!cir.func<(!u64i, !u64i) -> !cir.ptr<!void>>> loc(#loc24)
      %8 = cir.load %1 : !cir.ptr<!u64i>, !u64i loc(#loc25)
      %9 = cir.const #cir.int<1> : !s32i loc(#loc26)
      %10 = cir.cast(integral, %9 : !s32i), !u64i loc(#loc26)
      %11 = cir.binop(add, %8, %10) : !u64i loc(#loc252)
      %12 = cir.const #cir.int<4> : !u64i loc(#loc253)
      %13 = cir.call @calloc(%11, %12) : (!u64i, !u64i) -> !cir.ptr<!void> extra(#fn_attr) loc(#loc24)
      cir.store %13, %2 : !cir.ptr<!void>, !cir.ptr<!cir.ptr<!void>> loc(#loc251)
      cir.scope {
        %23 = cir.load %2 : !cir.ptr<!cir.ptr<!void>>, !cir.ptr<!void> loc(#loc31)
        %24 = cir.const #cir.ptr<null> : !cir.ptr<!void> loc(#loc32)
        %25 = cir.cmp(eq, %23, %24) : !cir.ptr<!void>, !cir.bool loc(#loc255)
        cir.if %25 {
          %26 = cir.get_global @exit : !cir.ptr<!cir.func<(!s32i)>> loc(#loc34)
          %27 = cir.const #cir.int<1> : !s32i loc(#loc35)
          %28 = cir.unary(minus, %27) nsw : !s32i, !s32i loc(#loc36)
          cir.call @exit(%28) : (!s32i) -> () extra(#fn_attr) loc(#loc34)
        } loc(#loc256)
      } loc(#loc254)
      %14 = cir.load %2 : !cir.ptr<!cir.ptr<!void>>, !cir.ptr<!void> loc(#loc37)
      %15 = cir.cast(bitcast, %14 : !cir.ptr<!void>), !cir.ptr<!s32i> loc(#loc37)
      %16 = cir.load %0 : !cir.ptr<!cir.ptr<!void>>, !cir.ptr<!void> loc(#loc38)
      %17 = cir.cast(bitcast, %16 : !cir.ptr<!void>), !cir.ptr<!s32i> loc(#loc38)
      %18 = cir.call @wcscpy(%15, %17) : (!cir.ptr<!s32i>, !cir.ptr<!s32i>) -> !cir.ptr<!s32i> extra(#fn_attr) loc(#loc39)
      %19 = cir.load %2 : !cir.ptr<!cir.ptr<!void>>, !cir.ptr<!void> loc(#loc40)
      %20 = cir.cast(bitcast, %19 : !cir.ptr<!void>), !cir.ptr<!s8i> loc(#loc40)
      cir.call @printLine(%20) : (!cir.ptr<!s8i>) -> () loc(#loc41)
      %21 = cir.get_global @free : !cir.ptr<!cir.func<(!cir.ptr<!void>)>> loc(#loc42)
      %22 = cir.load %2 : !cir.ptr<!cir.ptr<!void>>, !cir.ptr<!void> loc(#loc43)
      cir.call @free(%22) : (!cir.ptr<!void>) -> () extra(#fn_attr) loc(#loc42)
    } loc(#loc249)
    cir.return loc(#loc12)
  } loc(#loc247)
  cir.func private @malloc(!u64i) -> !cir.ptr<!void> extra(#fn_attr) loc(#loc257)
  cir.func private @exit(!s32i) extra(#fn_attr) loc(#loc258)
  cir.func private @wmemset(!cir.ptr<!s32i>, !s32i, !u64i) -> !cir.ptr<!s32i> extra(#fn_attr) loc(#loc259)
  cir.func no_proto @CWE122_Heap_Based_Buffer_Overflow__CWE135_44_bad() extra(#fn_attr1) {
    %0 = cir.alloca !cir.ptr<!void>, !cir.ptr<!cir.ptr<!void>>, ["data"] {alignment = 8 : i64} loc(#loc261)
    %1 = cir.alloca !cir.ptr<!cir.func<(!cir.ptr<!void>)>>, !cir.ptr<!cir.ptr<!cir.func<(!cir.ptr<!void>)>>>, ["funcPtr", init] {alignment = 8 : i64} loc(#loc262)
    %2 = cir.get_global @badSink : !cir.ptr<!cir.func<(!cir.ptr<!void>)>> loc(#loc55)
    cir.store %2, %1 : !cir.ptr<!cir.func<(!cir.ptr<!void>)>>, !cir.ptr<!cir.ptr<!cir.func<(!cir.ptr<!void>)>>> loc(#loc262)
    %3 = cir.const #cir.ptr<null> : !cir.ptr<!void> loc(#loc56)
    cir.store %3, %0 : !cir.ptr<!void>, !cir.ptr<!cir.ptr<!void>> loc(#loc263)
    cir.scope {
      %6 = cir.alloca !cir.ptr<!s32i>, !cir.ptr<!cir.ptr<!s32i>>, ["dataBadBuffer", init] {alignment = 8 : i64} loc(#loc265)
      %7 = cir.get_global @malloc : !cir.ptr<!cir.func<(!u64i) -> !cir.ptr<!void>>> loc(#loc62)
      %8 = cir.const #cir.int<50> : !s32i loc(#loc63)
      %9 = cir.cast(integral, %8 : !s32i), !u64i loc(#loc63)
      %10 = cir.const #cir.int<4> : !u64i loc(#loc266)
      %11 = cir.binop(mul, %9, %10) : !u64i loc(#loc267)
      %12 = cir.call @malloc(%11) : (!u64i) -> !cir.ptr<!void> extra(#fn_attr) loc(#loc62)
      %13 = cir.cast(bitcast, %12 : !cir.ptr<!void>), !cir.ptr<!s32i> loc(#loc268)
      cir.store %13, %6 : !cir.ptr<!s32i>, !cir.ptr<!cir.ptr<!s32i>> loc(#loc265)
      cir.scope {
        %29 = cir.load %6 : !cir.ptr<!cir.ptr<!s32i>>, !cir.ptr<!s32i> loc(#loc68)
        %30 = cir.const #cir.ptr<null> : !cir.ptr<!void> loc(#loc69)
        %31 = cir.cast(bitcast, %30 : !cir.ptr<!void>), !cir.ptr<!s32i> loc(#loc69)
        %32 = cir.cmp(eq, %29, %31) : !cir.ptr<!s32i>, !cir.bool loc(#loc270)
        cir.if %32 {
          %33 = cir.get_global @exit : !cir.ptr<!cir.func<(!s32i)>> loc(#loc71)
          %34 = cir.const #cir.int<1> : !s32i loc(#loc72)
          %35 = cir.unary(minus, %34) nsw : !s32i, !s32i loc(#loc73)
          cir.call @exit(%35) : (!s32i) -> () extra(#fn_attr) loc(#loc71)
        } loc(#loc271)
      } loc(#loc269)
      %14 = cir.load %6 : !cir.ptr<!cir.ptr<!s32i>>, !cir.ptr<!s32i> loc(#loc74)
      %15 = cir.const #cir.int<65> : !s32i loc(#loc75)
      %16 = cir.const #cir.int<50> : !s32i loc(#loc76)
      %17 = cir.const #cir.int<1> : !s32i loc(#loc77)
      %18 = cir.binop(sub, %16, %17) nsw : !s32i loc(#loc76)
      %19 = cir.cast(integral, %18 : !s32i), !u64i loc(#loc76)
      %20 = cir.call @wmemset(%14, %15, %19) : (!cir.ptr<!s32i>, !s32i, !u64i) -> !cir.ptr<!s32i> extra(#fn_attr) loc(#loc78)
      %21 = cir.const #cir.int<0> : !s32i loc(#loc79)
      %22 = cir.load %6 : !cir.ptr<!cir.ptr<!s32i>>, !cir.ptr<!s32i> loc(#loc80)
      %23 = cir.const #cir.int<50> : !s32i loc(#loc81)
      %24 = cir.const #cir.int<1> : !s32i loc(#loc82)
      %25 = cir.binop(sub, %23, %24) nsw : !s32i loc(#loc81)
      %26 = cir.ptr_stride(%22 : !cir.ptr<!s32i>, %25 : !s32i), !cir.ptr<!s32i> loc(#loc83)
      cir.store %21, %26 : !s32i, !cir.ptr<!s32i> loc(#loc272)
      %27 = cir.load %6 : !cir.ptr<!cir.ptr<!s32i>>, !cir.ptr<!s32i> loc(#loc84)
      %28 = cir.cast(bitcast, %27 : !cir.ptr<!s32i>), !cir.ptr<!void> loc(#loc84)
      cir.store %28, %0 : !cir.ptr<!void>, !cir.ptr<!cir.ptr<!void>> loc(#loc273)
    } loc(#loc264)
    %4 = cir.load %1 : !cir.ptr<!cir.ptr<!cir.func<(!cir.ptr<!void>)>>>, !cir.ptr<!cir.func<(!cir.ptr<!void>)>> loc(#loc86)
    %5 = cir.load %0 : !cir.ptr<!cir.ptr<!void>>, !cir.ptr<!void> loc(#loc87)
    cir.call %4(%5) : (!cir.ptr<!cir.func<(!cir.ptr<!void>)>>, !cir.ptr<!void>) -> () loc(#loc86)
    cir.return loc(#loc51)
  } loc(#loc260)
  cir.func no_proto @CWE122_Heap_Based_Buffer_Overflow__CWE135_44_good() extra(#fn_attr1) {
    %0 = cir.get_global @goodG2B : !cir.ptr<!cir.func<()>> loc(#loc275)
    cir.call %0() : (!cir.ptr<!cir.func<()>>) -> () loc(#loc90)
    %1 = cir.get_global @goodB2G : !cir.ptr<!cir.func<()>> loc(#loc276)
    cir.call %1() : (!cir.ptr<!cir.func<()>>) -> () loc(#loc92)
    cir.return loc(#loc89)
  } loc(#loc274)
  cir.func private @strcpy(!cir.ptr<!s8i>, !cir.ptr<!s8i>) -> !cir.ptr<!s8i> extra(#fn_attr) loc(#loc277)
  cir.func internal private @goodG2BSink(%arg0: !cir.ptr<!void> loc(fused[#loc98, #loc99])) extra(#fn_attr1) {
    %0 = cir.alloca !cir.ptr<!void>, !cir.ptr<!cir.ptr<!void>>, ["data", init] {alignment = 8 : i64} loc(#loc279)
    cir.store %arg0, %0 : !cir.ptr<!void>, !cir.ptr<!cir.ptr<!void>> loc(#loc100)
    cir.scope {
      %1 = cir.alloca !u64i, !cir.ptr<!u64i>, ["dataLen", init] {alignment = 8 : i64} loc(#loc281)
      %2 = cir.alloca !cir.ptr<!void>, !cir.ptr<!cir.ptr<!void>>, ["dest", init] {alignment = 8 : i64} loc(#loc282)
      %3 = cir.get_global @strlen : !cir.ptr<!cir.func<(!cir.ptr<!s8i>) -> !u64i>> loc(#loc107)
      %4 = cir.load %0 : !cir.ptr<!cir.ptr<!void>>, !cir.ptr<!void> loc(#loc108)
      %5 = cir.cast(bitcast, %4 : !cir.ptr<!void>), !cir.ptr<!s8i> loc(#loc108)
      %6 = cir.call @strlen(%5) : (!cir.ptr<!s8i>) -> !u64i side_effect(pure) extra(#fn_attr) loc(#loc107)
      cir.store %6, %1 : !u64i, !cir.ptr<!u64i> loc(#loc281)
      %7 = cir.get_global @calloc : !cir.ptr<!cir.func<(!u64i, !u64i) -> !cir.ptr<!void>>> loc(#loc109)
      %8 = cir.load %1 : !cir.ptr<!u64i>, !u64i loc(#loc110)
      %9 = cir.const #cir.int<1> : !s32i loc(#loc111)
      %10 = cir.cast(integral, %9 : !s32i), !u64i loc(#loc111)
      %11 = cir.binop(add, %8, %10) : !u64i loc(#loc283)
      %12 = cir.const #cir.int<1> : !s32i loc(#loc112)
      %13 = cir.cast(integral, %12 : !s32i), !u64i loc(#loc112)
      %14 = cir.call @calloc(%11, %13) : (!u64i, !u64i) -> !cir.ptr<!void> extra(#fn_attr) loc(#loc109)
      cir.store %14, %2 : !cir.ptr<!void>, !cir.ptr<!cir.ptr<!void>> loc(#loc282)
      cir.scope {
        %25 = cir.load %2 : !cir.ptr<!cir.ptr<!void>>, !cir.ptr<!void> loc(#loc115)
        %26 = cir.const #cir.ptr<null> : !cir.ptr<!void> loc(#loc116)
        %27 = cir.cmp(eq, %25, %26) : !cir.ptr<!void>, !cir.bool loc(#loc285)
        cir.if %27 {
          %28 = cir.get_global @exit : !cir.ptr<!cir.func<(!s32i)>> loc(#loc118)
          %29 = cir.const #cir.int<1> : !s32i loc(#loc119)
          %30 = cir.unary(minus, %29) nsw : !s32i, !s32i loc(#loc120)
          cir.call @exit(%30) : (!s32i) -> () extra(#fn_attr) loc(#loc118)
        } loc(#loc286)
      } loc(#loc284)
      %15 = cir.get_global @strcpy : !cir.ptr<!cir.func<(!cir.ptr<!s8i>, !cir.ptr<!s8i>) -> !cir.ptr<!s8i>>> loc(#loc121)
      %16 = cir.load %2 : !cir.ptr<!cir.ptr<!void>>, !cir.ptr<!void> loc(#loc122)
      %17 = cir.cast(bitcast, %16 : !cir.ptr<!void>), !cir.ptr<!s8i> loc(#loc122)
      %18 = cir.load %0 : !cir.ptr<!cir.ptr<!void>>, !cir.ptr<!void> loc(#loc123)
      %19 = cir.cast(bitcast, %18 : !cir.ptr<!void>), !cir.ptr<!s8i> loc(#loc123)
      %20 = cir.call @strcpy(%17, %19) : (!cir.ptr<!s8i>, !cir.ptr<!s8i>) -> !cir.ptr<!s8i> extra(#fn_attr) loc(#loc121)
      %21 = cir.load %2 : !cir.ptr<!cir.ptr<!void>>, !cir.ptr<!void> loc(#loc124)
      %22 = cir.cast(bitcast, %21 : !cir.ptr<!void>), !cir.ptr<!s8i> loc(#loc124)
      cir.call @printLine(%22) : (!cir.ptr<!s8i>) -> () loc(#loc125)
      %23 = cir.get_global @free : !cir.ptr<!cir.func<(!cir.ptr<!void>)>> loc(#loc126)
      %24 = cir.load %2 : !cir.ptr<!cir.ptr<!void>>, !cir.ptr<!void> loc(#loc127)
      cir.call @free(%24) : (!cir.ptr<!void>) -> () extra(#fn_attr) loc(#loc126)
    } loc(#loc280)
    cir.return loc(#loc97)
  } loc(#loc278)
  cir.func no_proto internal private @goodG2B() extra(#fn_attr1) {
    %0 = cir.alloca !cir.ptr<!void>, !cir.ptr<!cir.ptr<!void>>, ["data"] {alignment = 8 : i64} loc(#loc288)
    %1 = cir.alloca !cir.ptr<!cir.func<(!cir.ptr<!void>)>>, !cir.ptr<!cir.ptr<!cir.func<(!cir.ptr<!void>)>>>, ["funcPtr", init] {alignment = 8 : i64} loc(#loc289)
    %2 = cir.get_global @goodG2BSink : !cir.ptr<!cir.func<(!cir.ptr<!void>)>> loc(#loc133)
    cir.store %2, %1 : !cir.ptr<!cir.func<(!cir.ptr<!void>)>>, !cir.ptr<!cir.ptr<!cir.func<(!cir.ptr<!void>)>>> loc(#loc289)
    %3 = cir.const #cir.ptr<null> : !cir.ptr<!void> loc(#loc134)
    cir.store %3, %0 : !cir.ptr<!void>, !cir.ptr<!cir.ptr<!void>> loc(#loc290)
    cir.scope {
      %6 = cir.alloca !cir.ptr<!s8i>, !cir.ptr<!cir.ptr<!s8i>>, ["dataGoodBuffer", init] {alignment = 8 : i64} loc(#loc292)
      %7 = cir.get_global @malloc : !cir.ptr<!cir.func<(!u64i) -> !cir.ptr<!void>>> loc(#loc140)
      %8 = cir.const #cir.int<50> : !s32i loc(#loc141)
      %9 = cir.cast(integral, %8 : !s32i), !u64i loc(#loc141)
      %10 = cir.const #cir.int<1> : !u64i loc(#loc293)
      %11 = cir.binop(mul, %9, %10) : !u64i loc(#loc294)
      %12 = cir.call @malloc(%11) : (!u64i) -> !cir.ptr<!void> extra(#fn_attr) loc(#loc140)
      %13 = cir.cast(bitcast, %12 : !cir.ptr<!void>), !cir.ptr<!s8i> loc(#loc295)
      cir.store %13, %6 : !cir.ptr<!s8i>, !cir.ptr<!cir.ptr<!s8i>> loc(#loc292)
      cir.scope {
        %30 = cir.load %6 : !cir.ptr<!cir.ptr<!s8i>>, !cir.ptr<!s8i> loc(#loc146)
        %31 = cir.const #cir.ptr<null> : !cir.ptr<!void> loc(#loc147)
        %32 = cir.cast(bitcast, %31 : !cir.ptr<!void>), !cir.ptr<!s8i> loc(#loc147)
        %33 = cir.cmp(eq, %30, %32) : !cir.ptr<!s8i>, !cir.bool loc(#loc297)
        cir.if %33 {
          %34 = cir.get_global @exit : !cir.ptr<!cir.func<(!s32i)>> loc(#loc149)
          %35 = cir.const #cir.int<1> : !s32i loc(#loc150)
          %36 = cir.unary(minus, %35) nsw : !s32i, !s32i loc(#loc151)
          cir.call @exit(%36) : (!s32i) -> () extra(#fn_attr) loc(#loc149)
        } loc(#loc298)
      } loc(#loc296)
      %14 = cir.load %6 : !cir.ptr<!cir.ptr<!s8i>>, !cir.ptr<!s8i> loc(#loc152)
      %15 = cir.cast(bitcast, %14 : !cir.ptr<!s8i>), !cir.ptr<!void> loc(#loc152)
      %16 = cir.const #cir.int<65> : !s32i loc(#loc153)
      %17 = cir.const #cir.int<50> : !s32i loc(#loc154)
      %18 = cir.const #cir.int<1> : !s32i loc(#loc155)
      %19 = cir.binop(sub, %17, %18) nsw : !s32i loc(#loc154)
      %20 = cir.cast(integral, %19 : !s32i), !u64i loc(#loc154)
      cir.libc.memset %20 bytes from %15 set to %16 : !cir.ptr<!void>, !s32i, !u64i loc(#loc299)
      %21 = cir.const #cir.int<0> : !s32i loc(#loc158)
      %22 = cir.cast(integral, %21 : !s32i), !s8i loc(#loc158)
      %23 = cir.load %6 : !cir.ptr<!cir.ptr<!s8i>>, !cir.ptr<!s8i> loc(#loc159)
      %24 = cir.const #cir.int<50> : !s32i loc(#loc160)
      %25 = cir.const #cir.int<1> : !s32i loc(#loc161)
      %26 = cir.binop(sub, %24, %25) nsw : !s32i loc(#loc160)
      %27 = cir.ptr_stride(%23 : !cir.ptr<!s8i>, %26 : !s32i), !cir.ptr<!s8i> loc(#loc162)
      cir.store %22, %27 : !s8i, !cir.ptr<!s8i> loc(#loc300)
      %28 = cir.load %6 : !cir.ptr<!cir.ptr<!s8i>>, !cir.ptr<!s8i> loc(#loc163)
      %29 = cir.cast(bitcast, %28 : !cir.ptr<!s8i>), !cir.ptr<!void> loc(#loc163)
      cir.store %29, %0 : !cir.ptr<!void>, !cir.ptr<!cir.ptr<!void>> loc(#loc301)
    } loc(#loc291)
    %4 = cir.load %1 : !cir.ptr<!cir.ptr<!cir.func<(!cir.ptr<!void>)>>>, !cir.ptr<!cir.func<(!cir.ptr<!void>)>> loc(#loc165)
    %5 = cir.load %0 : !cir.ptr<!cir.ptr<!void>>, !cir.ptr<!void> loc(#loc166)
    cir.call %4(%5) : (!cir.ptr<!cir.func<(!cir.ptr<!void>)>>, !cir.ptr<!void>) -> () loc(#loc165)
    cir.return loc(#loc129)
  } loc(#loc287)
  cir.func private @wcslen(!cir.ptr<!s32i>) -> !u64i extra(#fn_attr) loc(#loc302)
  cir.func private @printWLine(!cir.ptr<!s32i>) loc(#loc303)
  cir.func internal private @goodB2GSink(%arg0: !cir.ptr<!void> loc(fused[#loc173, #loc174])) extra(#fn_attr1) {
    %0 = cir.alloca !cir.ptr<!void>, !cir.ptr<!cir.ptr<!void>>, ["data", init] {alignment = 8 : i64} loc(#loc305)
    cir.store %arg0, %0 : !cir.ptr<!void>, !cir.ptr<!cir.ptr<!void>> loc(#loc175)
    cir.scope {
      %1 = cir.alloca !u64i, !cir.ptr<!u64i>, ["dataLen", init] {alignment = 8 : i64} loc(#loc307)
      %2 = cir.alloca !cir.ptr<!void>, !cir.ptr<!cir.ptr<!void>>, ["dest", init] {alignment = 8 : i64} loc(#loc308)
      %3 = cir.get_global @wcslen : !cir.ptr<!cir.func<(!cir.ptr<!s32i>) -> !u64i>> loc(#loc182)
      %4 = cir.load %0 : !cir.ptr<!cir.ptr<!void>>, !cir.ptr<!void> loc(#loc183)
      %5 = cir.cast(bitcast, %4 : !cir.ptr<!void>), !cir.ptr<!s32i> loc(#loc183)
      %6 = cir.call @wcslen(%5) : (!cir.ptr<!s32i>) -> !u64i side_effect(pure) extra(#fn_attr) loc(#loc182)
      cir.store %6, %1 : !u64i, !cir.ptr<!u64i> loc(#loc307)
      %7 = cir.get_global @calloc : !cir.ptr<!cir.func<(!u64i, !u64i) -> !cir.ptr<!void>>> loc(#loc184)
      %8 = cir.load %1 : !cir.ptr<!u64i>, !u64i loc(#loc185)
      %9 = cir.const #cir.int<1> : !s32i loc(#loc186)
      %10 = cir.cast(integral, %9 : !s32i), !u64i loc(#loc186)
      %11 = cir.binop(add, %8, %10) : !u64i loc(#loc309)
      %12 = cir.const #cir.int<4> : !u64i loc(#loc310)
      %13 = cir.call @calloc(%11, %12) : (!u64i, !u64i) -> !cir.ptr<!void> extra(#fn_attr) loc(#loc184)
      cir.store %13, %2 : !cir.ptr<!void>, !cir.ptr<!cir.ptr<!void>> loc(#loc308)
      cir.scope {
        %23 = cir.load %2 : !cir.ptr<!cir.ptr<!void>>, !cir.ptr<!void> loc(#loc191)
        %24 = cir.const #cir.ptr<null> : !cir.ptr<!void> loc(#loc192)
        %25 = cir.cmp(eq, %23, %24) : !cir.ptr<!void>, !cir.bool loc(#loc312)
        cir.if %25 {
          %26 = cir.get_global @exit : !cir.ptr<!cir.func<(!s32i)>> loc(#loc194)
          %27 = cir.const #cir.int<1> : !s32i loc(#loc195)
          %28 = cir.unary(minus, %27) nsw : !s32i, !s32i loc(#loc196)
          cir.call @exit(%28) : (!s32i) -> () extra(#fn_attr) loc(#loc194)
        } loc(#loc313)
      } loc(#loc311)
      %14 = cir.load %2 : !cir.ptr<!cir.ptr<!void>>, !cir.ptr<!void> loc(#loc197)
      %15 = cir.cast(bitcast, %14 : !cir.ptr<!void>), !cir.ptr<!s32i> loc(#loc197)
      %16 = cir.load %0 : !cir.ptr<!cir.ptr<!void>>, !cir.ptr<!void> loc(#loc198)
      %17 = cir.cast(bitcast, %16 : !cir.ptr<!void>), !cir.ptr<!s32i> loc(#loc198)
      %18 = cir.call @wcscpy(%15, %17) : (!cir.ptr<!s32i>, !cir.ptr<!s32i>) -> !cir.ptr<!s32i> extra(#fn_attr) loc(#loc199)
      %19 = cir.load %2 : !cir.ptr<!cir.ptr<!void>>, !cir.ptr<!void> loc(#loc200)
      %20 = cir.cast(bitcast, %19 : !cir.ptr<!void>), !cir.ptr<!s32i> loc(#loc200)
      cir.call @printWLine(%20) : (!cir.ptr<!s32i>) -> () loc(#loc201)
      %21 = cir.get_global @free : !cir.ptr<!cir.func<(!cir.ptr<!void>)>> loc(#loc202)
      %22 = cir.load %2 : !cir.ptr<!cir.ptr<!void>>, !cir.ptr<!void> loc(#loc203)
      cir.call @free(%22) : (!cir.ptr<!void>) -> () extra(#fn_attr) loc(#loc202)
    } loc(#loc306)
    cir.return loc(#loc172)
  } loc(#loc304)
  cir.func no_proto internal private @goodB2G() extra(#fn_attr1) {
    %0 = cir.alloca !cir.ptr<!void>, !cir.ptr<!cir.ptr<!void>>, ["data"] {alignment = 8 : i64} loc(#loc315)
    %1 = cir.alloca !cir.ptr<!cir.func<(!cir.ptr<!void>)>>, !cir.ptr<!cir.ptr<!cir.func<(!cir.ptr<!void>)>>>, ["funcPtr", init] {alignment = 8 : i64} loc(#loc316)
    %2 = cir.get_global @goodB2GSink : !cir.ptr<!cir.func<(!cir.ptr<!void>)>> loc(#loc209)
    cir.store %2, %1 : !cir.ptr<!cir.func<(!cir.ptr<!void>)>>, !cir.ptr<!cir.ptr<!cir.func<(!cir.ptr<!void>)>>> loc(#loc316)
    %3 = cir.const #cir.ptr<null> : !cir.ptr<!void> loc(#loc210)
    cir.store %3, %0 : !cir.ptr<!void>, !cir.ptr<!cir.ptr<!void>> loc(#loc317)
    cir.scope {
      %6 = cir.alloca !cir.ptr<!s32i>, !cir.ptr<!cir.ptr<!s32i>>, ["dataBadBuffer", init] {alignment = 8 : i64} loc(#loc319)
      %7 = cir.get_global @malloc : !cir.ptr<!cir.func<(!u64i) -> !cir.ptr<!void>>> loc(#loc216)
      %8 = cir.const #cir.int<50> : !s32i loc(#loc217)
      %9 = cir.cast(integral, %8 : !s32i), !u64i loc(#loc217)
      %10 = cir.const #cir.int<4> : !u64i loc(#loc320)
      %11 = cir.binop(mul, %9, %10) : !u64i loc(#loc321)
      %12 = cir.call @malloc(%11) : (!u64i) -> !cir.ptr<!void> extra(#fn_attr) loc(#loc216)
      %13 = cir.cast(bitcast, %12 : !cir.ptr<!void>), !cir.ptr<!s32i> loc(#loc322)
      cir.store %13, %6 : !cir.ptr<!s32i>, !cir.ptr<!cir.ptr<!s32i>> loc(#loc319)
      cir.scope {
        %29 = cir.load %6 : !cir.ptr<!cir.ptr<!s32i>>, !cir.ptr<!s32i> loc(#loc222)
        %30 = cir.const #cir.ptr<null> : !cir.ptr<!void> loc(#loc223)
        %31 = cir.cast(bitcast, %30 : !cir.ptr<!void>), !cir.ptr<!s32i> loc(#loc223)
        %32 = cir.cmp(eq, %29, %31) : !cir.ptr<!s32i>, !cir.bool loc(#loc324)
        cir.if %32 {
          %33 = cir.get_global @exit : !cir.ptr<!cir.func<(!s32i)>> loc(#loc225)
          %34 = cir.const #cir.int<1> : !s32i loc(#loc226)
          %35 = cir.unary(minus, %34) nsw : !s32i, !s32i loc(#loc227)
          cir.call @exit(%35) : (!s32i) -> () extra(#fn_attr) loc(#loc225)
        } loc(#loc325)
      } loc(#loc323)
      %14 = cir.load %6 : !cir.ptr<!cir.ptr<!s32i>>, !cir.ptr<!s32i> loc(#loc228)
      %15 = cir.const #cir.int<65> : !s32i loc(#loc229)
      %16 = cir.const #cir.int<50> : !s32i loc(#loc230)
      %17 = cir.const #cir.int<1> : !s32i loc(#loc231)
      %18 = cir.binop(sub, %16, %17) nsw : !s32i loc(#loc230)
      %19 = cir.cast(integral, %18 : !s32i), !u64i loc(#loc230)
      %20 = cir.call @wmemset(%14, %15, %19) : (!cir.ptr<!s32i>, !s32i, !u64i) -> !cir.ptr<!s32i> extra(#fn_attr) loc(#loc232)
      %21 = cir.const #cir.int<0> : !s32i loc(#loc233)
      %22 = cir.load %6 : !cir.ptr<!cir.ptr<!s32i>>, !cir.ptr<!s32i> loc(#loc234)
      %23 = cir.const #cir.int<50> : !s32i loc(#loc235)
      %24 = cir.const #cir.int<1> : !s32i loc(#loc236)
      %25 = cir.binop(sub, %23, %24) nsw : !s32i loc(#loc235)
      %26 = cir.ptr_stride(%22 : !cir.ptr<!s32i>, %25 : !s32i), !cir.ptr<!s32i> loc(#loc237)
      cir.store %21, %26 : !s32i, !cir.ptr<!s32i> loc(#loc326)
      %27 = cir.load %6 : !cir.ptr<!cir.ptr<!s32i>>, !cir.ptr<!s32i> loc(#loc238)
      %28 = cir.cast(bitcast, %27 : !cir.ptr<!s32i>), !cir.ptr<!void> loc(#loc238)
      cir.store %28, %0 : !cir.ptr<!void>, !cir.ptr<!cir.ptr<!void>> loc(#loc327)
    } loc(#loc318)
    %4 = cir.load %1 : !cir.ptr<!cir.ptr<!cir.func<(!cir.ptr<!void>)>>>, !cir.ptr<!cir.func<(!cir.ptr<!void>)>> loc(#loc240)
    %5 = cir.load %0 : !cir.ptr<!cir.ptr<!void>>, !cir.ptr<!void> loc(#loc241)
    cir.call %4(%5) : (!cir.ptr<!cir.func<(!cir.ptr<!void>)>>, !cir.ptr<!void>) -> () loc(#loc240)
    cir.return loc(#loc205)
  } loc(#loc314)
} loc(#loc)
#loc = loc("/workspaces/juliet-c/testcases/CWE122_Heap_Based_Buffer_Overflow/s06/CWE122_Heap_Based_Buffer_Overflow__CWE135_44.c":0:0)
#loc1 = loc("/usr/include/string.h":407:1)
#loc2 = loc("/usr/include/string.h":408:33)
#loc3 = loc("/usr/include/stdlib.h":675:1)
#loc4 = loc("/usr/include/stdlib.h":676:14)
#loc5 = loc("/usr/include/wchar.h":98:1)
#loc6 = loc("/usr/include/wchar.h":100:14)
#loc7 = loc("../../../testcasesupport/std_testcase_io.h":14:1)
#loc8 = loc("../../../testcasesupport/std_testcase_io.h":14:33)
#loc9 = loc("/usr/include/stdlib.h":687:1)
#loc10 = loc("/usr/include/stdlib.h":687:32)
#loc11 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE135_44.c":24:1)
#loc12 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE135_44.c":35:1)
#loc15 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE135_44.c":25:1)
#loc16 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE135_44.c":26:5)
#loc17 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE135_44.c":34:5)
#loc18 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE135_44.c":28:9)
#loc19 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE135_44.c":28:45)
#loc20 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE135_44.c":29:9)
#loc21 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE135_44.c":29:64)
#loc22 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE135_44.c":28:26)
#loc23 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE135_44.c":28:41)
#loc24 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE135_44.c":29:31)
#loc25 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE135_44.c":29:38)
#loc26 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE135_44.c":29:46)
#loc27 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE135_44.c":29:49)
#loc28 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE135_44.c":29:63)
#loc29 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE135_44.c":30:9)
#loc30 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE135_44.c":30:37)
#loc31 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE135_44.c":30:13)
#loc32 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE135_44.c":30:21)
#loc33 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE135_44.c":30:27)
#loc34 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE135_44.c":30:28)
#loc35 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE135_44.c":30:34)
#loc36 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE135_44.c":30:33)
#loc37 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE135_44.c":31:22)
#loc38 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE135_44.c":31:28)
#loc39 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE135_44.c":31:15)
#loc40 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE135_44.c":32:27)
#loc41 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE135_44.c":32:9)
#loc42 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE135_44.c":33:9)
#loc43 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE135_44.c":33:14)
#loc44 = loc("/usr/include/stdlib.h":672:1)
#loc45 = loc("/usr/include/stdlib.h":672:45)
#loc46 = loc("/usr/include/stdlib.h":756:1)
#loc47 = loc("/usr/include/stdlib.h":756:70)
#loc48 = loc("/usr/include/wchar.h":296:1)
#loc49 = loc("/usr/include/wchar.h":296:65)
#loc50 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE135_44.c":37:1)
#loc51 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE135_44.c":53:1)
#loc52 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE135_44.c":39:5)
#loc53 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE135_44.c":39:12)
#loc54 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE135_44.c":41:5)
#loc55 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE135_44.c":41:32)
#loc56 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE135_44.c":42:12)
#loc57 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE135_44.c":42:5)
#loc58 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE135_44.c":43:5)
#loc59 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE135_44.c":50:5)
#loc60 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE135_44.c":44:9)
#loc61 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE135_44.c":44:71)
#loc62 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE135_44.c":44:46)
#loc63 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE135_44.c":44:53)
#loc64 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE135_44.c":44:56)
#loc65 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE135_44.c":44:70)
#loc66 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE135_44.c":45:9)
#loc67 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE135_44.c":45:46)
#loc68 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE135_44.c":45:13)
#loc69 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE135_44.c":45:30)
#loc70 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE135_44.c":45:36)
#loc71 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE135_44.c":45:37)
#loc72 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE135_44.c":45:43)
#loc73 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE135_44.c":45:42)
#loc74 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE135_44.c":46:17)
#loc75 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE135_44.c":46:32)
#loc76 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE135_44.c":46:38)
#loc77 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE135_44.c":46:41)
#loc78 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE135_44.c":46:9)
#loc79 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE135_44.c":47:31)
#loc80 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE135_44.c":47:9)
#loc81 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE135_44.c":47:23)
#loc82 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE135_44.c":47:26)
#loc83 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE135_44.c":47:27)
#loc84 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE135_44.c":49:24)
#loc85 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE135_44.c":49:9)
#loc86 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE135_44.c":52:5)
#loc87 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE135_44.c":52:13)
#loc88 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE135_44.c":119:1)
#loc89 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE135_44.c":123:1)
#loc90 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE135_44.c":121:5)
#loc91 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE135_44.c":121:13)
#loc92 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE135_44.c":122:5)
#loc93 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE135_44.c":122:13)
#loc94 = loc("/usr/include/string.h":141:1)
#loc95 = loc("/usr/include/string.h":142:14)
#loc96 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE135_44.c":60:1)
#loc97 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE135_44.c":71:1)
#loc100 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE135_44.c":61:1)
#loc101 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE135_44.c":62:5)
#loc102 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE135_44.c":70:5)
#loc103 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE135_44.c":64:9)
#loc104 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE135_44.c":64:45)
#loc105 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE135_44.c":65:9)
#loc106 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE135_44.c":65:50)
#loc107 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE135_44.c":64:26)
#loc108 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE135_44.c":64:41)
#loc109 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE135_44.c":65:31)
#loc110 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE135_44.c":65:38)
#loc111 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE135_44.c":65:46)
#loc112 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE135_44.c":65:49)
#loc113 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE135_44.c":66:9)
#loc114 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE135_44.c":66:37)
#loc115 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE135_44.c":66:13)
#loc116 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE135_44.c":66:21)
#loc117 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE135_44.c":66:27)
#loc118 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE135_44.c":66:28)
#loc119 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE135_44.c":66:34)
#loc120 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE135_44.c":66:33)
#loc121 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE135_44.c":67:15)
#loc122 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE135_44.c":67:22)
#loc123 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE135_44.c":67:28)
#loc124 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE135_44.c":68:27)
#loc125 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE135_44.c":68:9)
#loc126 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE135_44.c":69:9)
#loc127 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE135_44.c":69:14)
#loc128 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE135_44.c":73:1)
#loc129 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE135_44.c":87:1)
#loc130 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE135_44.c":75:5)
#loc131 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE135_44.c":75:12)
#loc132 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE135_44.c":76:5)
#loc133 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE135_44.c":76:32)
#loc134 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE135_44.c":77:12)
#loc135 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE135_44.c":77:5)
#loc136 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE135_44.c":78:5)
#loc137 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE135_44.c":85:5)
#loc138 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE135_44.c":79:9)
#loc139 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE135_44.c":79:63)
#loc140 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE135_44.c":79:41)
#loc141 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE135_44.c":79:48)
#loc142 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE135_44.c":79:51)
#loc143 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE135_44.c":79:62)
#loc144 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE135_44.c":80:9)
#loc145 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE135_44.c":80:47)
#loc146 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE135_44.c":80:13)
#loc147 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE135_44.c":80:31)
#loc148 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE135_44.c":80:37)
#loc149 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE135_44.c":80:38)
#loc150 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE135_44.c":80:44)
#loc151 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE135_44.c":80:43)
#loc152 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE135_44.c":81:16)
#loc153 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE135_44.c":81:32)
#loc154 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE135_44.c":81:37)
#loc155 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE135_44.c":81:40)
#loc156 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE135_44.c":81:9)
#loc157 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE135_44.c":81:41)
#loc158 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE135_44.c":82:32)
#loc159 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE135_44.c":82:9)
#loc160 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE135_44.c":82:24)
#loc161 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE135_44.c":82:27)
#loc162 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE135_44.c":82:28)
#loc163 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE135_44.c":84:24)
#loc164 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE135_44.c":84:9)
#loc165 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE135_44.c":86:5)
#loc166 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE135_44.c":86:13)
#loc167 = loc("/usr/include/wchar.h":247:1)
#loc168 = loc("/usr/include/wchar.h":247:51)
#loc169 = loc("../../../testcasesupport/std_testcase_io.h":16:1)
#loc170 = loc("../../../testcasesupport/std_testcase_io.h":16:37)
#loc171 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE135_44.c":90:1)
#loc172 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE135_44.c":101:1)
#loc175 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE135_44.c":91:1)
#loc176 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE135_44.c":92:5)
#loc177 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE135_44.c":100:5)
#loc178 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE135_44.c":94:9)
#loc179 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE135_44.c":94:48)
#loc180 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE135_44.c":95:9)
#loc181 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE135_44.c":95:64)
#loc182 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE135_44.c":94:26)
#loc183 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE135_44.c":94:44)
#loc184 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE135_44.c":95:31)
#loc185 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE135_44.c":95:38)
#loc186 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE135_44.c":95:46)
#loc187 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE135_44.c":95:49)
#loc188 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE135_44.c":95:63)
#loc189 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE135_44.c":96:9)
#loc190 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE135_44.c":96:37)
#loc191 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE135_44.c":96:13)
#loc192 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE135_44.c":96:21)
#loc193 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE135_44.c":96:27)
#loc194 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE135_44.c":96:28)
#loc195 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE135_44.c":96:34)
#loc196 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE135_44.c":96:33)
#loc197 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE135_44.c":97:22)
#loc198 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE135_44.c":97:28)
#loc199 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE135_44.c":97:15)
#loc200 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE135_44.c":98:31)
#loc201 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE135_44.c":98:9)
#loc202 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE135_44.c":99:9)
#loc203 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE135_44.c":99:14)
#loc204 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE135_44.c":103:1)
#loc205 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE135_44.c":117:1)
#loc206 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE135_44.c":105:5)
#loc207 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE135_44.c":105:12)
#loc208 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE135_44.c":106:5)
#loc209 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE135_44.c":106:32)
#loc210 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE135_44.c":107:12)
#loc211 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE135_44.c":107:5)
#loc212 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE135_44.c":108:5)
#loc213 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE135_44.c":115:5)
#loc214 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE135_44.c":109:9)
#loc215 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE135_44.c":109:71)
#loc216 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE135_44.c":109:46)
#loc217 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE135_44.c":109:53)
#loc218 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE135_44.c":109:56)
#loc219 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE135_44.c":109:70)
#loc220 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE135_44.c":110:9)
#loc221 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE135_44.c":110:46)
#loc222 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE135_44.c":110:13)
#loc223 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE135_44.c":110:30)
#loc224 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE135_44.c":110:36)
#loc225 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE135_44.c":110:37)
#loc226 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE135_44.c":110:43)
#loc227 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE135_44.c":110:42)
#loc228 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE135_44.c":111:17)
#loc229 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE135_44.c":111:32)
#loc230 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE135_44.c":111:38)
#loc231 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE135_44.c":111:41)
#loc232 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE135_44.c":111:9)
#loc233 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE135_44.c":112:31)
#loc234 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE135_44.c":112:9)
#loc235 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE135_44.c":112:23)
#loc236 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE135_44.c":112:26)
#loc237 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE135_44.c":112:27)
#loc238 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE135_44.c":114:24)
#loc239 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE135_44.c":114:9)
#loc240 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE135_44.c":116:5)
#loc241 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE135_44.c":116:13)
#loc242 = loc(fused[#loc1, #loc2])
#loc243 = loc(fused[#loc3, #loc4])
#loc244 = loc(fused[#loc5, #loc6])
#loc245 = loc(fused[#loc7, #loc8])
#loc246 = loc(fused[#loc9, #loc10])
#loc247 = loc(fused[#loc11, #loc12])
#loc249 = loc(fused[#loc16, #loc17])
#loc250 = loc(fused[#loc18, #loc19])
#loc251 = loc(fused[#loc20, #loc21])
#loc252 = loc(fused[#loc25, #loc26])
#loc253 = loc(fused[#loc27, #loc28])
#loc254 = loc(fused[#loc29, #loc30])
#loc255 = loc(fused[#loc31, #loc32])
#loc256 = loc(fused[#loc33, #loc30])
#loc257 = loc(fused[#loc44, #loc45])
#loc258 = loc(fused[#loc46, #loc47])
#loc259 = loc(fused[#loc48, #loc49])
#loc260 = loc(fused[#loc50, #loc51])
#loc261 = loc(fused[#loc52, #loc53])
#loc262 = loc(fused[#loc54, #loc55])
#loc263 = loc(fused[#loc57, #loc56])
#loc264 = loc(fused[#loc58, #loc59])
#loc265 = loc(fused[#loc60, #loc61])
#loc266 = loc(fused[#loc64, #loc65])
#loc267 = loc(fused[#loc63, #loc65])
#loc268 = loc(fused[#loc62, #loc61])
#loc269 = loc(fused[#loc66, #loc67])
#loc270 = loc(fused[#loc68, #loc69])
#loc271 = loc(fused[#loc70, #loc67])
#loc272 = loc(fused[#loc80, #loc79])
#loc273 = loc(fused[#loc85, #loc84])
#loc274 = loc(fused[#loc88, #loc89])
#loc275 = loc(fused[#loc90, #loc91])
#loc276 = loc(fused[#loc92, #loc93])
#loc277 = loc(fused[#loc94, #loc95])
#loc278 = loc(fused[#loc96, #loc97])
#loc280 = loc(fused[#loc101, #loc102])
#loc281 = loc(fused[#loc103, #loc104])
#loc282 = loc(fused[#loc105, #loc106])
#loc283 = loc(fused[#loc110, #loc111])
#loc284 = loc(fused[#loc113, #loc114])
#loc285 = loc(fused[#loc115, #loc116])
#loc286 = loc(fused[#loc117, #loc114])
#loc287 = loc(fused[#loc128, #loc129])
#loc288 = loc(fused[#loc130, #loc131])
#loc289 = loc(fused[#loc132, #loc133])
#loc290 = loc(fused[#loc135, #loc134])
#loc291 = loc(fused[#loc136, #loc137])
#loc292 = loc(fused[#loc138, #loc139])
#loc293 = loc(fused[#loc142, #loc143])
#loc294 = loc(fused[#loc141, #loc143])
#loc295 = loc(fused[#loc140, #loc139])
#loc296 = loc(fused[#loc144, #loc145])
#loc297 = loc(fused[#loc146, #loc147])
#loc298 = loc(fused[#loc148, #loc145])
#loc299 = loc(fused[#loc156, #loc157])
#loc300 = loc(fused[#loc159, #loc158])
#loc301 = loc(fused[#loc164, #loc163])
#loc302 = loc(fused[#loc167, #loc168])
#loc303 = loc(fused[#loc169, #loc170])
#loc304 = loc(fused[#loc171, #loc172])
#loc306 = loc(fused[#loc176, #loc177])
#loc307 = loc(fused[#loc178, #loc179])
#loc308 = loc(fused[#loc180, #loc181])
#loc309 = loc(fused[#loc185, #loc186])
#loc310 = loc(fused[#loc187, #loc188])
#loc311 = loc(fused[#loc189, #loc190])
#loc312 = loc(fused[#loc191, #loc192])
#loc313 = loc(fused[#loc193, #loc190])
#loc314 = loc(fused[#loc204, #loc205])
#loc315 = loc(fused[#loc206, #loc207])
#loc316 = loc(fused[#loc208, #loc209])
#loc317 = loc(fused[#loc211, #loc210])
#loc318 = loc(fused[#loc212, #loc213])
#loc319 = loc(fused[#loc214, #loc215])
#loc320 = loc(fused[#loc218, #loc219])
#loc321 = loc(fused[#loc217, #loc219])
#loc322 = loc(fused[#loc216, #loc215])
#loc323 = loc(fused[#loc220, #loc221])
#loc324 = loc(fused[#loc222, #loc223])
#loc325 = loc(fused[#loc224, #loc221])
#loc326 = loc(fused[#loc234, #loc233])
#loc327 = loc(fused[#loc239, #loc238])
