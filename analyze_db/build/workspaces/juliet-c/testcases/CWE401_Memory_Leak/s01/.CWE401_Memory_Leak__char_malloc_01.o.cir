!s32i = !cir.int<s, 32>
!s8i = !cir.int<s, 8>
!u64i = !cir.int<u, 64>
!u8i = !cir.int<u, 8>
!void = !cir.void
#fn_attr = #cir<extra({nothrow = #cir.nothrow})>
#fn_attr1 = #cir<extra({inline = #cir.inline<no>, nothrow = #cir.nothrow, optnone = #cir.optnone, uwtable = #cir.uwtable<async>})>
module @"/workspaces/juliet-c/testcases/CWE401_Memory_Leak/s01/CWE401_Memory_Leak__char_malloc_01.c" attributes {cir.lang = #cir.lang<c>, cir.sob = #cir.signed_overflow_behavior<undefined>, cir.triple = "x86_64-unknown-linux-gnu", cir.type_size_info = #cir.type_size_info<char = 8, int = 32, size_t = 64>, cir.uwtable = #cir.uwtable<async>, dlti.dl_spec = #dlti.dl_spec<f80 = dense<128> : vector<2xi64>, i128 = dense<128> : vector<2xi64>, !llvm.ptr<272> = dense<64> : vector<4xi64>, i64 = dense<64> : vector<2xi64>, !llvm.ptr<270> = dense<32> : vector<4xi64>, !llvm.ptr<271> = dense<32> : vector<4xi64>, f128 = dense<128> : vector<2xi64>, f16 = dense<16> : vector<2xi64>, f64 = dense<64> : vector<2xi64>, i32 = dense<32> : vector<2xi64>, i16 = dense<16> : vector<2xi64>, i8 = dense<8> : vector<2xi64>, i1 = dense<8> : vector<2xi64>, !llvm.ptr = dense<64> : vector<4xi64>, "dlti.stack_alignment" = 128 : i64, "dlti.mangling_mode" = "e", "dlti.endianness" = "little">} {
  cir.func private @malloc(!u64i) -> !cir.ptr<!void> extra(#fn_attr) loc(#loc82)
  cir.func private @exit(!s32i) extra(#fn_attr) loc(#loc83)
  cir.func private @strcpy(!cir.ptr<!s8i>, !cir.ptr<!s8i>) -> !cir.ptr<!s8i> extra(#fn_attr) loc(#loc84)
  cir.global "private" constant cir_private dsolocal @".str" = #cir.const_array<"A String\00" : !cir.array<!s8i x 9>> : !cir.array<!s8i x 9> {alignment = 1 : i64} loc(#loc7)
  cir.func private @printLine(!cir.ptr<!s8i>) loc(#loc85)
  cir.func no_proto @CWE401_Memory_Leak__char_malloc_01_bad() extra(#fn_attr1) {
    %0 = cir.alloca !cir.ptr<!s8i>, !cir.ptr<!cir.ptr<!s8i>>, ["data"] {alignment = 8 : i64} loc(#loc87)
    %1 = cir.const #cir.ptr<null> : !cir.ptr<!s8i> loc(#loc14)
    cir.store %1, %0 : !cir.ptr<!s8i>, !cir.ptr<!cir.ptr<!s8i>> loc(#loc88)
    %2 = cir.get_global @malloc : !cir.ptr<!cir.func<(!u64i) -> !cir.ptr<!void>>> loc(#loc16)
    %3 = cir.const #cir.int<100> : !s32i loc(#loc17)
    %4 = cir.cast(integral, %3 : !s32i), !u64i loc(#loc17)
    %5 = cir.const #cir.int<1> : !u64i loc(#loc89)
    %6 = cir.binop(mul, %4, %5) : !u64i loc(#loc90)
    %7 = cir.call @malloc(%6) : (!u64i) -> !cir.ptr<!void> extra(#fn_attr) loc(#loc16)
    %8 = cir.cast(bitcast, %7 : !cir.ptr<!void>), !cir.ptr<!s8i> loc(#loc91)
    cir.store %8, %0 : !cir.ptr<!s8i>, !cir.ptr<!cir.ptr<!s8i>> loc(#loc92)
    cir.br ^bb1 loc(#loc93)
  ^bb1:  // pred: ^bb0
    %9 = cir.load %0 : !cir.ptr<!cir.ptr<!s8i>>, !cir.ptr<!s8i> loc(#loc24)
    %10 = cir.const #cir.ptr<null> : !cir.ptr<!void> loc(#loc25)
    %11 = cir.cast(bitcast, %10 : !cir.ptr<!void>), !cir.ptr<!s8i> loc(#loc25)
    %12 = cir.cmp(eq, %9, %11) : !cir.ptr<!s8i>, !cir.bool loc(#loc94)
    cir.brcond %12 ^bb2, ^bb3 loc(#loc95)
  ^bb2:  // pred: ^bb1
    %13 = cir.get_global @exit : !cir.ptr<!cir.func<(!s32i)>> loc(#loc27)
    %14 = cir.const #cir.int<1> : !s32i loc(#loc28)
    %15 = cir.unary(minus, %14) nsw : !s32i, !s32i loc(#loc29)
    cir.call @exit(%15) : (!s32i) -> () extra(#fn_attr) loc(#loc27)
    cir.br ^bb3 loc(#loc23)
  ^bb3:  // 2 preds: ^bb1, ^bb2
    cir.br ^bb4 loc(#loc23)
  ^bb4:  // pred: ^bb3
    %16 = cir.load %0 : !cir.ptr<!cir.ptr<!s8i>>, !cir.ptr<!s8i> loc(#loc30)
    %17 = cir.get_global @".str" : !cir.ptr<!cir.array<!s8i x 9>> loc(#loc7)
    %18 = cir.cast(array_to_ptrdecay, %17 : !cir.ptr<!cir.array<!s8i x 9>>), !cir.ptr<!s8i> loc(#loc7)
    %19 = cir.call @strcpy(%16, %18) : (!cir.ptr<!s8i>, !cir.ptr<!s8i>) -> !cir.ptr<!s8i> extra(#fn_attr) loc(#loc31)
    %20 = cir.load %0 : !cir.ptr<!cir.ptr<!s8i>>, !cir.ptr<!s8i> loc(#loc32)
    cir.call @printLine(%20) : (!cir.ptr<!s8i>) -> () loc(#loc33)
    cir.return loc(#loc11)
  } loc(#loc86)
  cir.func no_proto @CWE401_Memory_Leak__char_malloc_01_good() extra(#fn_attr1) {
    %0 = cir.get_global @goodG2B : !cir.ptr<!cir.func<()>> loc(#loc97)
    cir.call %0() : (!cir.ptr<!cir.func<()>>) -> () loc(#loc36)
    %1 = cir.get_global @goodB2G : !cir.ptr<!cir.func<()>> loc(#loc98)
    cir.call %1() : (!cir.ptr<!cir.func<()>>) -> () loc(#loc38)
    cir.return loc(#loc35)
  } loc(#loc96)
  cir.func no_proto internal private @goodG2B() extra(#fn_attr1) {
    %0 = cir.alloca !cir.ptr<!s8i>, !cir.ptr<!cir.ptr<!s8i>>, ["data"] {alignment = 8 : i64} loc(#loc100)
    %1 = cir.const #cir.ptr<null> : !cir.ptr<!s8i> loc(#loc44)
    cir.store %1, %0 : !cir.ptr<!s8i>, !cir.ptr<!cir.ptr<!s8i>> loc(#loc101)
    %2 = cir.const #cir.int<100> : !s32i loc(#loc46)
    %3 = cir.cast(integral, %2 : !s32i), !u64i loc(#loc46)
    %4 = cir.const #cir.int<1> : !u64i loc(#loc46)
    %5 = cir.binop(mul, %3, %4) : !u64i loc(#loc46)
    %6 = cir.alloca !u8i, !cir.ptr<!u8i>, %5 : !u64i, ["bi_alloca"] {alignment = 16 : i64} loc(#loc46)
    %7 = cir.cast(bitcast, %6 : !cir.ptr<!u8i>), !cir.ptr<!void> loc(#loc46)
    %8 = cir.cast(bitcast, %7 : !cir.ptr<!void>), !cir.ptr<!s8i> loc(#loc46)
    cir.store %8, %0 : !cir.ptr<!s8i>, !cir.ptr<!cir.ptr<!s8i>> loc(#loc102)
    %9 = cir.get_global @strcpy : !cir.ptr<!cir.func<(!cir.ptr<!s8i>, !cir.ptr<!s8i>) -> !cir.ptr<!s8i>>> loc(#loc48)
    %10 = cir.load %0 : !cir.ptr<!cir.ptr<!s8i>>, !cir.ptr<!s8i> loc(#loc49)
    %11 = cir.get_global @".str" : !cir.ptr<!cir.array<!s8i x 9>> loc(#loc50)
    %12 = cir.cast(array_to_ptrdecay, %11 : !cir.ptr<!cir.array<!s8i x 9>>), !cir.ptr<!s8i> loc(#loc50)
    %13 = cir.call @strcpy(%10, %12) : (!cir.ptr<!s8i>, !cir.ptr<!s8i>) -> !cir.ptr<!s8i> extra(#fn_attr) loc(#loc48)
    %14 = cir.load %0 : !cir.ptr<!cir.ptr<!s8i>>, !cir.ptr<!s8i> loc(#loc51)
    cir.call @printLine(%14) : (!cir.ptr<!s8i>) -> () loc(#loc52)
    cir.return loc(#loc41)
  } loc(#loc99)
  cir.func private @free(!cir.ptr<!void>) extra(#fn_attr) loc(#loc103)
  cir.func no_proto internal private @goodB2G() extra(#fn_attr1) {
    %0 = cir.alloca !cir.ptr<!s8i>, !cir.ptr<!cir.ptr<!s8i>>, ["data"] {alignment = 8 : i64} loc(#loc105)
    %1 = cir.const #cir.ptr<null> : !cir.ptr<!s8i> loc(#loc59)
    cir.store %1, %0 : !cir.ptr<!s8i>, !cir.ptr<!cir.ptr<!s8i>> loc(#loc106)
    %2 = cir.get_global @malloc : !cir.ptr<!cir.func<(!u64i) -> !cir.ptr<!void>>> loc(#loc61)
    %3 = cir.const #cir.int<100> : !s32i loc(#loc62)
    %4 = cir.cast(integral, %3 : !s32i), !u64i loc(#loc62)
    %5 = cir.const #cir.int<1> : !u64i loc(#loc107)
    %6 = cir.binop(mul, %4, %5) : !u64i loc(#loc108)
    %7 = cir.call @malloc(%6) : (!u64i) -> !cir.ptr<!void> extra(#fn_attr) loc(#loc61)
    %8 = cir.cast(bitcast, %7 : !cir.ptr<!void>), !cir.ptr<!s8i> loc(#loc109)
    cir.store %8, %0 : !cir.ptr<!s8i>, !cir.ptr<!cir.ptr<!s8i>> loc(#loc110)
    cir.br ^bb1 loc(#loc111)
  ^bb1:  // pred: ^bb0
    %9 = cir.load %0 : !cir.ptr<!cir.ptr<!s8i>>, !cir.ptr<!s8i> loc(#loc69)
    %10 = cir.const #cir.ptr<null> : !cir.ptr<!void> loc(#loc70)
    %11 = cir.cast(bitcast, %10 : !cir.ptr<!void>), !cir.ptr<!s8i> loc(#loc70)
    %12 = cir.cmp(eq, %9, %11) : !cir.ptr<!s8i>, !cir.bool loc(#loc112)
    cir.brcond %12 ^bb2, ^bb3 loc(#loc113)
  ^bb2:  // pred: ^bb1
    %13 = cir.get_global @exit : !cir.ptr<!cir.func<(!s32i)>> loc(#loc72)
    %14 = cir.const #cir.int<1> : !s32i loc(#loc73)
    %15 = cir.unary(minus, %14) nsw : !s32i, !s32i loc(#loc74)
    cir.call @exit(%15) : (!s32i) -> () extra(#fn_attr) loc(#loc72)
    cir.br ^bb3 loc(#loc68)
  ^bb3:  // 2 preds: ^bb1, ^bb2
    cir.br ^bb4 loc(#loc68)
  ^bb4:  // pred: ^bb3
    %16 = cir.load %0 : !cir.ptr<!cir.ptr<!s8i>>, !cir.ptr<!s8i> loc(#loc75)
    %17 = cir.get_global @".str" : !cir.ptr<!cir.array<!s8i x 9>> loc(#loc76)
    %18 = cir.cast(array_to_ptrdecay, %17 : !cir.ptr<!cir.array<!s8i x 9>>), !cir.ptr<!s8i> loc(#loc76)
    %19 = cir.call @strcpy(%16, %18) : (!cir.ptr<!s8i>, !cir.ptr<!s8i>) -> !cir.ptr<!s8i> extra(#fn_attr) loc(#loc77)
    %20 = cir.load %0 : !cir.ptr<!cir.ptr<!s8i>>, !cir.ptr<!s8i> loc(#loc78)
    cir.call @printLine(%20) : (!cir.ptr<!s8i>) -> () loc(#loc79)
    %21 = cir.load %0 : !cir.ptr<!cir.ptr<!s8i>>, !cir.ptr<!s8i> loc(#loc80)
    %22 = cir.cast(bitcast, %21 : !cir.ptr<!s8i>), !cir.ptr<!void> loc(#loc80)
    cir.call @free(%22) : (!cir.ptr<!void>) -> () extra(#fn_attr) loc(#loc81)
    cir.return loc(#loc56)
  } loc(#loc104)
} loc(#loc)
#loc = loc("/workspaces/juliet-c/testcases/CWE401_Memory_Leak/s01/CWE401_Memory_Leak__char_malloc_01.c":0:0)
#loc1 = loc("/usr/include/stdlib.h":672:1)
#loc2 = loc("/usr/include/stdlib.h":672:45)
#loc3 = loc("/usr/include/stdlib.h":756:1)
#loc4 = loc("/usr/include/stdlib.h":756:70)
#loc5 = loc("/usr/include/string.h":141:1)
#loc6 = loc("/usr/include/string.h":142:14)
#loc7 = loc("CWE401_Memory_Leak__char_malloc_01.c":32:18)
#loc8 = loc("../../../testcasesupport/std_testcase_io.h":14:1)
#loc9 = loc("../../../testcasesupport/std_testcase_io.h":14:33)
#loc10 = loc("CWE401_Memory_Leak__char_malloc_01.c":24:1)
#loc11 = loc("CWE401_Memory_Leak__char_malloc_01.c":36:1)
#loc12 = loc("CWE401_Memory_Leak__char_malloc_01.c":26:5)
#loc13 = loc("CWE401_Memory_Leak__char_malloc_01.c":26:12)
#loc14 = loc("CWE401_Memory_Leak__char_malloc_01.c":27:12)
#loc15 = loc("CWE401_Memory_Leak__char_malloc_01.c":27:5)
#loc16 = loc("CWE401_Memory_Leak__char_malloc_01.c":29:20)
#loc17 = loc("CWE401_Memory_Leak__char_malloc_01.c":29:27)
#loc18 = loc("CWE401_Memory_Leak__char_malloc_01.c":29:31)
#loc19 = loc("CWE401_Memory_Leak__char_malloc_01.c":29:42)
#loc20 = loc("CWE401_Memory_Leak__char_malloc_01.c":29:43)
#loc21 = loc("CWE401_Memory_Leak__char_malloc_01.c":29:5)
#loc22 = loc("CWE401_Memory_Leak__char_malloc_01.c":30:5)
#loc23 = loc("CWE401_Memory_Leak__char_malloc_01.c":30:33)
#loc24 = loc("CWE401_Memory_Leak__char_malloc_01.c":30:9)
#loc25 = loc("CWE401_Memory_Leak__char_malloc_01.c":30:17)
#loc26 = loc("CWE401_Memory_Leak__char_malloc_01.c":30:23)
#loc27 = loc("CWE401_Memory_Leak__char_malloc_01.c":30:24)
#loc28 = loc("CWE401_Memory_Leak__char_malloc_01.c":30:30)
#loc29 = loc("CWE401_Memory_Leak__char_malloc_01.c":30:29)
#loc30 = loc("CWE401_Memory_Leak__char_malloc_01.c":32:12)
#loc31 = loc("CWE401_Memory_Leak__char_malloc_01.c":32:5)
#loc32 = loc("CWE401_Memory_Leak__char_malloc_01.c":33:15)
#loc33 = loc("CWE401_Memory_Leak__char_malloc_01.c":33:5)
#loc34 = loc("CWE401_Memory_Leak__char_malloc_01.c":71:1)
#loc35 = loc("CWE401_Memory_Leak__char_malloc_01.c":75:1)
#loc36 = loc("CWE401_Memory_Leak__char_malloc_01.c":73:5)
#loc37 = loc("CWE401_Memory_Leak__char_malloc_01.c":73:13)
#loc38 = loc("CWE401_Memory_Leak__char_malloc_01.c":74:5)
#loc39 = loc("CWE401_Memory_Leak__char_malloc_01.c":74:13)
#loc40 = loc("CWE401_Memory_Leak__char_malloc_01.c":43:1)
#loc41 = loc("CWE401_Memory_Leak__char_malloc_01.c":54:1)
#loc42 = loc("CWE401_Memory_Leak__char_malloc_01.c":45:5)
#loc43 = loc("CWE401_Memory_Leak__char_malloc_01.c":45:12)
#loc44 = loc("CWE401_Memory_Leak__char_malloc_01.c":46:12)
#loc45 = loc("CWE401_Memory_Leak__char_malloc_01.c":46:5)
#loc46 = loc("CWE401_Memory_Leak__char_malloc_01.c":48:20)
#loc47 = loc("CWE401_Memory_Leak__char_malloc_01.c":48:5)
#loc48 = loc("CWE401_Memory_Leak__char_malloc_01.c":50:5)
#loc49 = loc("CWE401_Memory_Leak__char_malloc_01.c":50:12)
#loc50 = loc("CWE401_Memory_Leak__char_malloc_01.c":50:18)
#loc51 = loc("CWE401_Memory_Leak__char_malloc_01.c":51:15)
#loc52 = loc("CWE401_Memory_Leak__char_malloc_01.c":51:5)
#loc53 = loc("/usr/include/stdlib.h":687:1)
#loc54 = loc("/usr/include/stdlib.h":687:32)
#loc55 = loc("CWE401_Memory_Leak__char_malloc_01.c":57:1)
#loc56 = loc("CWE401_Memory_Leak__char_malloc_01.c":69:1)
#loc57 = loc("CWE401_Memory_Leak__char_malloc_01.c":59:5)
#loc58 = loc("CWE401_Memory_Leak__char_malloc_01.c":59:12)
#loc59 = loc("CWE401_Memory_Leak__char_malloc_01.c":60:12)
#loc60 = loc("CWE401_Memory_Leak__char_malloc_01.c":60:5)
#loc61 = loc("CWE401_Memory_Leak__char_malloc_01.c":62:20)
#loc62 = loc("CWE401_Memory_Leak__char_malloc_01.c":62:27)
#loc63 = loc("CWE401_Memory_Leak__char_malloc_01.c":62:31)
#loc64 = loc("CWE401_Memory_Leak__char_malloc_01.c":62:42)
#loc65 = loc("CWE401_Memory_Leak__char_malloc_01.c":62:43)
#loc66 = loc("CWE401_Memory_Leak__char_malloc_01.c":62:5)
#loc67 = loc("CWE401_Memory_Leak__char_malloc_01.c":63:5)
#loc68 = loc("CWE401_Memory_Leak__char_malloc_01.c":63:33)
#loc69 = loc("CWE401_Memory_Leak__char_malloc_01.c":63:9)
#loc70 = loc("CWE401_Memory_Leak__char_malloc_01.c":63:17)
#loc71 = loc("CWE401_Memory_Leak__char_malloc_01.c":63:23)
#loc72 = loc("CWE401_Memory_Leak__char_malloc_01.c":63:24)
#loc73 = loc("CWE401_Memory_Leak__char_malloc_01.c":63:30)
#loc74 = loc("CWE401_Memory_Leak__char_malloc_01.c":63:29)
#loc75 = loc("CWE401_Memory_Leak__char_malloc_01.c":65:12)
#loc76 = loc("CWE401_Memory_Leak__char_malloc_01.c":65:18)
#loc77 = loc("CWE401_Memory_Leak__char_malloc_01.c":65:5)
#loc78 = loc("CWE401_Memory_Leak__char_malloc_01.c":66:15)
#loc79 = loc("CWE401_Memory_Leak__char_malloc_01.c":66:5)
#loc80 = loc("CWE401_Memory_Leak__char_malloc_01.c":68:10)
#loc81 = loc("CWE401_Memory_Leak__char_malloc_01.c":68:5)
#loc82 = loc(fused[#loc1, #loc2])
#loc83 = loc(fused[#loc3, #loc4])
#loc84 = loc(fused[#loc5, #loc6])
#loc85 = loc(fused[#loc8, #loc9])
#loc86 = loc(fused[#loc10, #loc11])
#loc87 = loc(fused[#loc12, #loc13])
#loc88 = loc(fused[#loc15, #loc14])
#loc89 = loc(fused[#loc18, #loc19])
#loc90 = loc(fused[#loc17, #loc19])
#loc91 = loc(fused[#loc16, #loc20])
#loc92 = loc(fused[#loc21, #loc20])
#loc93 = loc(fused[#loc22, #loc23])
#loc94 = loc(fused[#loc24, #loc25])
#loc95 = loc(fused[#loc26, #loc23])
#loc96 = loc(fused[#loc34, #loc35])
#loc97 = loc(fused[#loc36, #loc37])
#loc98 = loc(fused[#loc38, #loc39])
#loc99 = loc(fused[#loc40, #loc41])
#loc100 = loc(fused[#loc42, #loc43])
#loc101 = loc(fused[#loc45, #loc44])
#loc102 = loc(fused[#loc47, #loc46])
#loc103 = loc(fused[#loc53, #loc54])
#loc104 = loc(fused[#loc55, #loc56])
#loc105 = loc(fused[#loc57, #loc58])
#loc106 = loc(fused[#loc60, #loc59])
#loc107 = loc(fused[#loc63, #loc64])
#loc108 = loc(fused[#loc62, #loc64])
#loc109 = loc(fused[#loc61, #loc65])
#loc110 = loc(fused[#loc66, #loc65])
#loc111 = loc(fused[#loc67, #loc68])
#loc112 = loc(fused[#loc69, #loc70])
#loc113 = loc(fused[#loc71, #loc68])
