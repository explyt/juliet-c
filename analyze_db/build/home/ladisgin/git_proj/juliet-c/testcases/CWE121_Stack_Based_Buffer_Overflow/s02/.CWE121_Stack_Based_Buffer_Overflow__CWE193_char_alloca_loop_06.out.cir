!s32i = !cir.int<s, 32>
!s64i = !cir.int<s, 64>
!s8i = !cir.int<s, 8>
!u32i = !cir.int<u, 32>
!u64i = !cir.int<u, 64>
!u8i = !cir.int<u, 8>
!void = !cir.void
#fn_attr = #cir<extra({nothrow = #cir.nothrow})>
#fn_attr1 = #cir<extra({inline = #cir.inline<no>, nothrow = #cir.nothrow, optnone = #cir.optnone})>
#loc74 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE193_char_alloca_loop_06.c":137:10)
#loc75 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE193_char_alloca_loop_06.c":137:14)
#loc76 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE193_char_alloca_loop_06.c":137:20)
#loc77 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE193_char_alloca_loop_06.c":137:32)
#loc221 = loc(fused[#loc74, #loc75])
#loc222 = loc(fused[#loc76, #loc77])
module @"/home/ladisgin/git_proj/juliet-c/testcases/CWE121_Stack_Based_Buffer_Overflow/s02/CWE121_Stack_Based_Buffer_Overflow__CWE193_char_alloca_loop_06.c" attributes {cir.lang = #cir.lang<c>, cir.sob = #cir.signed_overflow_behavior<undefined>, cir.triple = "x86_64-unknown-linux-gnu", dlti.dl_spec = #dlti.dl_spec<!llvm.ptr = dense<64> : vector<4xi64>, i1 = dense<8> : vector<2xi64>, i8 = dense<8> : vector<2xi64>, i16 = dense<16> : vector<2xi64>, i32 = dense<32> : vector<2xi64>, f64 = dense<64> : vector<2xi64>, f16 = dense<16> : vector<2xi64>, !llvm.ptr<270> = dense<32> : vector<4xi64>, f128 = dense<128> : vector<2xi64>, !llvm.ptr<271> = dense<32> : vector<4xi64>, !llvm.ptr<272> = dense<64> : vector<4xi64>, i64 = dense<64> : vector<2xi64>, i128 = dense<128> : vector<2xi64>, f80 = dense<128> : vector<2xi64>, "dlti.stack_alignment" = 128 : i64, "dlti.endianness" = "little">} {
  cir.global "private" constant cir_private @__const.goodG2B2.source = #cir.const_array<"AAAAAAAAAA\00" : !cir.array<!s8i x 11>> : !cir.array<!s8i x 11> loc(#loc190)
  cir.global "private" constant cir_private @__const.goodG2B1.source = #cir.const_array<"AAAAAAAAAA\00" : !cir.array<!s8i x 11>> : !cir.array<!s8i x 11> loc(#loc191)
  cir.global "private" constant cir_private @__const.CWE121_Stack_Based_Buffer_Overflow__CWE193_char_alloca_loop_06_bad.source = #cir.const_array<"AAAAAAAAAA\00" : !cir.array<!s8i x 11>> : !cir.array<!s8i x 11> loc(#loc192)
  cir.func private @strlen(!cir.ptr<!s8i>) -> !u64i extra(#fn_attr) loc(#loc193)
  cir.func private @printLine(!cir.ptr<!s8i>) loc(#loc194)
  cir.func no_proto @CWE121_Stack_Based_Buffer_Overflow__CWE193_char_alloca_loop_06_bad() extra(#fn_attr1) {
    %0 = cir.alloca !cir.ptr<!s8i>, !cir.ptr<!cir.ptr<!s8i>>, ["data"] {alignment = 8 : i64} loc(#loc196)
    %1 = cir.alloca !cir.ptr<!s8i>, !cir.ptr<!cir.ptr<!s8i>>, ["dataBadBuffer", init] {alignment = 8 : i64} loc(#loc197)
    %2 = cir.const #cir.int<10> : !s32i loc(#loc16)
    %3 = cir.cast(integral, %2 : !s32i), !u64i loc(#loc16)
    %4 = cir.const #cir.int<1> : !u64i loc(#loc16)
    %5 = cir.binop(mul, %3, %4) : !u64i loc(#loc16)
    %6 = cir.alloca !u8i, !cir.ptr<!u8i>, %5 : !u64i, ["bi_alloca"] {alignment = 16 : i64} loc(#loc16)
    %7 = cir.alloca !cir.ptr<!s8i>, !cir.ptr<!cir.ptr<!s8i>>, ["dataGoodBuffer", init] {alignment = 8 : i64} loc(#loc198)
    %8 = cir.cast(bitcast, %6 : !cir.ptr<!u8i>), !cir.ptr<!void> loc(#loc16)
    %9 = cir.cast(bitcast, %8 : !cir.ptr<!void>), !cir.ptr<!s8i> loc(#loc16)
    cir.store %9, %1 : !cir.ptr<!s8i>, !cir.ptr<!cir.ptr<!s8i>> loc(#loc197)
    %10 = cir.const #cir.int<10> : !s32i loc(#loc18)
    %11 = cir.const #cir.int<1> : !s32i loc(#loc18)
    %12 = cir.binop(add, %10, %11) nsw : !s32i loc(#loc18)
    %13 = cir.cast(integral, %12 : !s32i), !u64i loc(#loc18)
    %14 = cir.const #cir.int<1> : !u64i loc(#loc18)
    %15 = cir.binop(mul, %13, %14) : !u64i loc(#loc18)
    %16 = cir.alloca !u8i, !cir.ptr<!u8i>, %15 : !u64i, ["bi_alloca"] {alignment = 16 : i64} loc(#loc18)
    %17 = cir.cast(bitcast, %16 : !cir.ptr<!u8i>), !cir.ptr<!void> loc(#loc18)
    %18 = cir.cast(bitcast, %17 : !cir.ptr<!void>), !cir.ptr<!s8i> loc(#loc18)
    cir.store %18, %7 : !cir.ptr<!s8i>, !cir.ptr<!cir.ptr<!s8i>> loc(#loc198)
    cir.scope {
      %19 = cir.const #cir.int<5> : !s32i loc(#loc21)
      %20 = cir.const #cir.int<5> : !s32i loc(#loc22)
      %21 = cir.cmp(eq, %19, %20) : !s32i, !cir.bool loc(#loc200)
      cir.if %21 {
        %22 = cir.load %1 : !cir.ptr<!cir.ptr<!s8i>>, !cir.ptr<!s8i> loc(#loc24)
        cir.store %22, %0 : !cir.ptr<!s8i>, !cir.ptr<!cir.ptr<!s8i>> loc(#loc202)
        %23 = cir.const #cir.int<0> : !s32i loc(#loc26)
        %24 = cir.cast(integral, %23 : !s32i), !s8i loc(#loc26)
        %25 = cir.load %0 : !cir.ptr<!cir.ptr<!s8i>>, !cir.ptr<!s8i> loc(#loc27)
        %26 = cir.const #cir.int<0> : !s32i loc(#loc28)
        %27 = cir.ptr_stride(%25 : !cir.ptr<!s8i>, %26 : !s32i), !cir.ptr<!s8i> loc(#loc29)
        cir.store %24, %27 : !s8i, !cir.ptr<!s8i> loc(#loc203)
      } loc(#loc201)
    } loc(#loc199)
    cir.scope {
      %19 = cir.alloca !cir.array<!s8i x 11>, !cir.ptr<!cir.array<!s8i x 11>>, ["source"] {alignment = 1 : i64} loc(#loc192)
      %20 = cir.alloca !u64i, !cir.ptr<!u64i>, ["i"] {alignment = 8 : i64} loc(#loc205)
      %21 = cir.alloca !u64i, !cir.ptr<!u64i>, ["sourceLen"] {alignment = 8 : i64} loc(#loc206)
      %22 = cir.get_global @__const.CWE121_Stack_Based_Buffer_Overflow__CWE193_char_alloca_loop_06_bad.source : !cir.ptr<!cir.array<!s8i x 11>> loc(#loc192)
      cir.copy %22 to %19 : !cir.ptr<!cir.array<!s8i x 11>> loc(#loc192)
      %23 = cir.get_global @strlen : !cir.ptr<!cir.func<!u64i (!cir.ptr<!s8i>)>> loc(#loc35)
      %24 = cir.cast(array_to_ptrdecay, %19 : !cir.ptr<!cir.array<!s8i x 11>>), !cir.ptr<!s8i> loc(#loc36)
      %25 = cir.call @strlen(%24) : (!cir.ptr<!s8i>) -> !u64i extra(#fn_attr) loc(#loc35)
      cir.store %25, %21 : !u64i, !cir.ptr<!u64i> loc(#loc207)
      cir.scope {
        %27 = cir.const #cir.int<0> : !s32i loc(#loc41)
        %28 = cir.cast(integral, %27 : !s32i), !u64i loc(#loc41)
        cir.store %28, %20 : !u64i, !cir.ptr<!u64i> loc(#loc209)
        cir.for : cond {
          %29 = cir.load %20 : !cir.ptr<!u64i>, !u64i loc(#loc43)
          %30 = cir.load %21 : !cir.ptr<!u64i>, !u64i loc(#loc44)
          %31 = cir.const #cir.int<1> : !s32i loc(#loc45)
          %32 = cir.cast(integral, %31 : !s32i), !u64i loc(#loc45)
          %33 = cir.binop(add, %30, %32) : !u64i loc(#loc210)
          %34 = cir.cmp(lt, %29, %33) : !u64i, !cir.bool loc(#loc211)
          cir.condition(%34) loc(#loc46)
        } body {
          cir.scope {
            %29 = cir.load %20 : !cir.ptr<!u64i>, !u64i loc(#loc48)
            %30 = cir.cast(array_to_ptrdecay, %19 : !cir.ptr<!cir.array<!s8i x 11>>), !cir.ptr<!s8i> loc(#loc49)
            %31 = cir.ptr_stride(%30 : !cir.ptr<!s8i>, %29 : !u64i), !cir.ptr<!s8i> loc(#loc49)
            %32 = cir.load %31 : !cir.ptr<!s8i>, !s8i loc(#loc49)
            %33 = cir.load %0 : !cir.ptr<!cir.ptr<!s8i>>, !cir.ptr<!s8i> loc(#loc50)
            %34 = cir.load %20 : !cir.ptr<!u64i>, !u64i loc(#loc51)
            %35 = cir.ptr_stride(%33 : !cir.ptr<!s8i>, %34 : !u64i), !cir.ptr<!s8i> loc(#loc52)
            cir.store %32, %35 : !s8i, !cir.ptr<!s8i> loc(#loc213)
          } loc(#loc212)
          cir.yield loc(#loc40)
        } step {
          %29 = cir.load %20 : !cir.ptr<!u64i>, !u64i loc(#loc54)
          %30 = cir.unary(inc, %29) : !u64i, !u64i loc(#loc55)
          cir.store %30, %20 : !u64i, !cir.ptr<!u64i> loc(#loc214)
          cir.yield loc(#loc208)
        } loc(#loc208)
      } loc(#loc208)
      %26 = cir.load %0 : !cir.ptr<!cir.ptr<!s8i>>, !cir.ptr<!s8i> loc(#loc56)
      cir.call @printLine(%26) : (!cir.ptr<!s8i>) -> () loc(#loc57)
    } loc(#loc204)
    cir.return loc(#loc12)
  } loc(#loc195)
  cir.func no_proto @CWE121_Stack_Based_Buffer_Overflow__CWE193_char_alloca_loop_06_good() extra(#fn_attr1) {
    %0 = cir.get_global @goodG2B1 : !cir.ptr<!cir.func<!void ()>> loc(#loc216)
    cir.call %0() : (!cir.ptr<!cir.func<!void ()>>) -> () loc(#loc60)
    %1 = cir.get_global @goodG2B2 : !cir.ptr<!cir.func<!void ()>> loc(#loc217)
    cir.call %1() : (!cir.ptr<!cir.func<!void ()>>) -> () loc(#loc62)
    cir.return loc(#loc59)
  } loc(#loc215)
  cir.func private @srand(!u32i) extra(#fn_attr) loc(#loc218)
  cir.func private @time(!cir.ptr<!s64i>) -> !s64i extra(#fn_attr) loc(#loc219)
  cir.global "private" constant cir_private dsolocal @".str" = #cir.const_array<"Calling good()...\00" : !cir.array<!s8i x 18>> : !cir.array<!s8i x 18> {alignment = 1 : i64} loc(#loc68)
  cir.global "private" constant cir_private dsolocal @".str.1" = #cir.const_array<"Finished good()\00" : !cir.array<!s8i x 16>> : !cir.array<!s8i x 16> {alignment = 1 : i64} loc(#loc69)
  cir.global "private" constant cir_private dsolocal @".str.2" = #cir.const_array<"Calling bad()...\00" : !cir.array<!s8i x 17>> : !cir.array<!s8i x 17> {alignment = 1 : i64} loc(#loc70)
  cir.global "private" constant cir_private dsolocal @".str.3" = #cir.const_array<"Finished bad()\00" : !cir.array<!s8i x 15>> : !cir.array<!s8i x 15> {alignment = 1 : i64} loc(#loc71)
  cir.func @main(%arg0: !s32i loc(fused[#loc74, #loc75]), %arg1: !cir.ptr<!cir.ptr<!s8i>> loc(fused[#loc76, #loc77])) -> !s32i extra(#fn_attr1) {
    %0 = cir.alloca !s32i, !cir.ptr<!s32i>, ["argc", init] {alignment = 4 : i64} loc(#loc221)
    %1 = cir.alloca !cir.ptr<!cir.ptr<!s8i>>, !cir.ptr<!cir.ptr<!cir.ptr<!s8i>>>, ["argv", init] {alignment = 8 : i64} loc(#loc222)
    %2 = cir.alloca !s32i, !cir.ptr<!s32i>, ["__retval"] {alignment = 4 : i64} loc(#loc73)
    cir.store %arg0, %0 : !s32i, !cir.ptr<!s32i> loc(#loc78)
    cir.store %arg1, %1 : !cir.ptr<!cir.ptr<!s8i>>, !cir.ptr<!cir.ptr<!cir.ptr<!s8i>>> loc(#loc78)
    %3 = cir.const #cir.ptr<null> : !cir.ptr<!s64i> loc(#loc79)
    %4 = cir.call @time(%3) : (!cir.ptr<!s64i>) -> !s64i extra(#fn_attr) loc(#loc80)
    %5 = cir.cast(integral, %4 : !s64i), !u32i loc(#loc80)
    cir.call @srand(%5) : (!u32i) -> () extra(#fn_attr) loc(#loc81)
    %6 = cir.get_global @".str" : !cir.ptr<!cir.array<!s8i x 18>> loc(#loc68)
    %7 = cir.cast(array_to_ptrdecay, %6 : !cir.ptr<!cir.array<!s8i x 18>>), !cir.ptr<!s8i> loc(#loc68)
    cir.call @printLine(%7) : (!cir.ptr<!s8i>) -> () loc(#loc82)
    %8 = cir.get_global @CWE121_Stack_Based_Buffer_Overflow__CWE193_char_alloca_loop_06_good : !cir.ptr<!cir.func<!void ()>> loc(#loc223)
    cir.call @CWE121_Stack_Based_Buffer_Overflow__CWE193_char_alloca_loop_06_good() : () -> () loc(#loc83)
    %9 = cir.get_global @".str.1" : !cir.ptr<!cir.array<!s8i x 16>> loc(#loc69)
    %10 = cir.cast(array_to_ptrdecay, %9 : !cir.ptr<!cir.array<!s8i x 16>>), !cir.ptr<!s8i> loc(#loc69)
    cir.call @printLine(%10) : (!cir.ptr<!s8i>) -> () loc(#loc85)
    %11 = cir.get_global @".str.2" : !cir.ptr<!cir.array<!s8i x 17>> loc(#loc70)
    %12 = cir.cast(array_to_ptrdecay, %11 : !cir.ptr<!cir.array<!s8i x 17>>), !cir.ptr<!s8i> loc(#loc70)
    cir.call @printLine(%12) : (!cir.ptr<!s8i>) -> () loc(#loc86)
    %13 = cir.get_global @CWE121_Stack_Based_Buffer_Overflow__CWE193_char_alloca_loop_06_bad : !cir.ptr<!cir.func<!void ()>> loc(#loc224)
    cir.call @CWE121_Stack_Based_Buffer_Overflow__CWE193_char_alloca_loop_06_bad() : () -> () loc(#loc87)
    %14 = cir.get_global @".str.3" : !cir.ptr<!cir.array<!s8i x 15>> loc(#loc71)
    %15 = cir.cast(array_to_ptrdecay, %14 : !cir.ptr<!cir.array<!s8i x 15>>), !cir.ptr<!s8i> loc(#loc71)
    cir.call @printLine(%15) : (!cir.ptr<!s8i>) -> () loc(#loc89)
    %16 = cir.const #cir.int<0> : !s32i loc(#loc90)
    cir.store %16, %2 : !s32i, !cir.ptr<!s32i> loc(#loc225)
    %17 = cir.load %2 : !cir.ptr<!s32i>, !s32i loc(#loc225)
    cir.return %17 : !s32i loc(#loc225)
  } loc(#loc220)
  cir.global "private" constant cir_private dsolocal @".str.4" = #cir.const_array<"Benign, fixed string\00" : !cir.array<!s8i x 21>> : !cir.array<!s8i x 21> {alignment = 1 : i64} loc(#loc92)
  cir.func no_proto internal private @goodG2B1() extra(#fn_attr1) {
    %0 = cir.alloca !cir.ptr<!s8i>, !cir.ptr<!cir.ptr<!s8i>>, ["data"] {alignment = 8 : i64} loc(#loc227)
    %1 = cir.alloca !cir.ptr<!s8i>, !cir.ptr<!cir.ptr<!s8i>>, ["dataBadBuffer", init] {alignment = 8 : i64} loc(#loc228)
    %2 = cir.const #cir.int<10> : !s32i loc(#loc98)
    %3 = cir.cast(integral, %2 : !s32i), !u64i loc(#loc98)
    %4 = cir.const #cir.int<1> : !u64i loc(#loc98)
    %5 = cir.binop(mul, %3, %4) : !u64i loc(#loc98)
    %6 = cir.alloca !u8i, !cir.ptr<!u8i>, %5 : !u64i, ["bi_alloca"] {alignment = 16 : i64} loc(#loc98)
    %7 = cir.alloca !cir.ptr<!s8i>, !cir.ptr<!cir.ptr<!s8i>>, ["dataGoodBuffer", init] {alignment = 8 : i64} loc(#loc229)
    %8 = cir.cast(bitcast, %6 : !cir.ptr<!u8i>), !cir.ptr<!void> loc(#loc98)
    %9 = cir.cast(bitcast, %8 : !cir.ptr<!void>), !cir.ptr<!s8i> loc(#loc98)
    cir.store %9, %1 : !cir.ptr<!s8i>, !cir.ptr<!cir.ptr<!s8i>> loc(#loc228)
    %10 = cir.const #cir.int<10> : !s32i loc(#loc100)
    %11 = cir.const #cir.int<1> : !s32i loc(#loc100)
    %12 = cir.binop(add, %10, %11) nsw : !s32i loc(#loc100)
    %13 = cir.cast(integral, %12 : !s32i), !u64i loc(#loc100)
    %14 = cir.const #cir.int<1> : !u64i loc(#loc100)
    %15 = cir.binop(mul, %13, %14) : !u64i loc(#loc100)
    %16 = cir.alloca !u8i, !cir.ptr<!u8i>, %15 : !u64i, ["bi_alloca"] {alignment = 16 : i64} loc(#loc100)
    %17 = cir.cast(bitcast, %16 : !cir.ptr<!u8i>), !cir.ptr<!void> loc(#loc100)
    %18 = cir.cast(bitcast, %17 : !cir.ptr<!void>), !cir.ptr<!s8i> loc(#loc100)
    cir.store %18, %7 : !cir.ptr<!s8i>, !cir.ptr<!cir.ptr<!s8i>> loc(#loc229)
    cir.scope {
      %19 = cir.const #cir.int<5> : !s32i loc(#loc103)
      %20 = cir.const #cir.int<5> : !s32i loc(#loc104)
      %21 = cir.cmp(ne, %19, %20) : !s32i, !cir.bool loc(#loc231)
      cir.if %21 {
        %22 = cir.get_global @".str.4" : !cir.ptr<!cir.array<!s8i x 21>> loc(#loc92)
        %23 = cir.cast(array_to_ptrdecay, %22 : !cir.ptr<!cir.array<!s8i x 21>>), !cir.ptr<!s8i> loc(#loc92)
        cir.call @printLine(%23) : (!cir.ptr<!s8i>) -> () loc(#loc108)
      } else {
        %22 = cir.load %7 : !cir.ptr<!cir.ptr<!s8i>>, !cir.ptr<!s8i> loc(#loc109)
        cir.store %22, %0 : !cir.ptr<!s8i>, !cir.ptr<!cir.ptr<!s8i>> loc(#loc233)
        %23 = cir.const #cir.int<0> : !s32i loc(#loc111)
        %24 = cir.cast(integral, %23 : !s32i), !s8i loc(#loc111)
        %25 = cir.load %0 : !cir.ptr<!cir.ptr<!s8i>>, !cir.ptr<!s8i> loc(#loc112)
        %26 = cir.const #cir.int<0> : !s32i loc(#loc113)
        %27 = cir.ptr_stride(%25 : !cir.ptr<!s8i>, %26 : !s32i), !cir.ptr<!s8i> loc(#loc114)
        cir.store %24, %27 : !s8i, !cir.ptr<!s8i> loc(#loc234)
      } loc(#loc232)
    } loc(#loc230)
    cir.scope {
      %19 = cir.alloca !cir.array<!s8i x 11>, !cir.ptr<!cir.array<!s8i x 11>>, ["source"] {alignment = 1 : i64} loc(#loc191)
      %20 = cir.alloca !u64i, !cir.ptr<!u64i>, ["i"] {alignment = 8 : i64} loc(#loc236)
      %21 = cir.alloca !u64i, !cir.ptr<!u64i>, ["sourceLen"] {alignment = 8 : i64} loc(#loc237)
      %22 = cir.get_global @__const.goodG2B1.source : !cir.ptr<!cir.array<!s8i x 11>> loc(#loc191)
      cir.copy %22 to %19 : !cir.ptr<!cir.array<!s8i x 11>> loc(#loc191)
      %23 = cir.get_global @strlen : !cir.ptr<!cir.func<!u64i (!cir.ptr<!s8i>)>> loc(#loc120)
      %24 = cir.cast(array_to_ptrdecay, %19 : !cir.ptr<!cir.array<!s8i x 11>>), !cir.ptr<!s8i> loc(#loc121)
      %25 = cir.call @strlen(%24) : (!cir.ptr<!s8i>) -> !u64i extra(#fn_attr) loc(#loc120)
      cir.store %25, %21 : !u64i, !cir.ptr<!u64i> loc(#loc238)
      cir.scope {
        %27 = cir.const #cir.int<0> : !s32i loc(#loc126)
        %28 = cir.cast(integral, %27 : !s32i), !u64i loc(#loc126)
        cir.store %28, %20 : !u64i, !cir.ptr<!u64i> loc(#loc240)
        cir.for : cond {
          %29 = cir.load %20 : !cir.ptr<!u64i>, !u64i loc(#loc128)
          %30 = cir.load %21 : !cir.ptr<!u64i>, !u64i loc(#loc129)
          %31 = cir.const #cir.int<1> : !s32i loc(#loc130)
          %32 = cir.cast(integral, %31 : !s32i), !u64i loc(#loc130)
          %33 = cir.binop(add, %30, %32) : !u64i loc(#loc241)
          %34 = cir.cmp(lt, %29, %33) : !u64i, !cir.bool loc(#loc242)
          cir.condition(%34) loc(#loc131)
        } body {
          cir.scope {
            %29 = cir.load %20 : !cir.ptr<!u64i>, !u64i loc(#loc133)
            %30 = cir.cast(array_to_ptrdecay, %19 : !cir.ptr<!cir.array<!s8i x 11>>), !cir.ptr<!s8i> loc(#loc134)
            %31 = cir.ptr_stride(%30 : !cir.ptr<!s8i>, %29 : !u64i), !cir.ptr<!s8i> loc(#loc134)
            %32 = cir.load %31 : !cir.ptr<!s8i>, !s8i loc(#loc134)
            %33 = cir.load %0 : !cir.ptr<!cir.ptr<!s8i>>, !cir.ptr<!s8i> loc(#loc135)
            %34 = cir.load %20 : !cir.ptr<!u64i>, !u64i loc(#loc136)
            %35 = cir.ptr_stride(%33 : !cir.ptr<!s8i>, %34 : !u64i), !cir.ptr<!s8i> loc(#loc137)
            cir.store %32, %35 : !s8i, !cir.ptr<!s8i> loc(#loc244)
          } loc(#loc243)
          cir.yield loc(#loc125)
        } step {
          %29 = cir.load %20 : !cir.ptr<!u64i>, !u64i loc(#loc139)
          %30 = cir.unary(inc, %29) : !u64i, !u64i loc(#loc140)
          cir.store %30, %20 : !u64i, !cir.ptr<!u64i> loc(#loc245)
          cir.yield loc(#loc239)
        } loc(#loc239)
      } loc(#loc239)
      %26 = cir.load %0 : !cir.ptr<!cir.ptr<!s8i>>, !cir.ptr<!s8i> loc(#loc141)
      cir.call @printLine(%26) : (!cir.ptr<!s8i>) -> () loc(#loc142)
    } loc(#loc235)
    cir.return loc(#loc94)
  } loc(#loc226)
  cir.func no_proto internal private @goodG2B2() extra(#fn_attr1) {
    %0 = cir.alloca !cir.ptr<!s8i>, !cir.ptr<!cir.ptr<!s8i>>, ["data"] {alignment = 8 : i64} loc(#loc247)
    %1 = cir.alloca !cir.ptr<!s8i>, !cir.ptr<!cir.ptr<!s8i>>, ["dataBadBuffer", init] {alignment = 8 : i64} loc(#loc248)
    %2 = cir.const #cir.int<10> : !s32i loc(#loc148)
    %3 = cir.cast(integral, %2 : !s32i), !u64i loc(#loc148)
    %4 = cir.const #cir.int<1> : !u64i loc(#loc148)
    %5 = cir.binop(mul, %3, %4) : !u64i loc(#loc148)
    %6 = cir.alloca !u8i, !cir.ptr<!u8i>, %5 : !u64i, ["bi_alloca"] {alignment = 16 : i64} loc(#loc148)
    %7 = cir.alloca !cir.ptr<!s8i>, !cir.ptr<!cir.ptr<!s8i>>, ["dataGoodBuffer", init] {alignment = 8 : i64} loc(#loc249)
    %8 = cir.cast(bitcast, %6 : !cir.ptr<!u8i>), !cir.ptr<!void> loc(#loc148)
    %9 = cir.cast(bitcast, %8 : !cir.ptr<!void>), !cir.ptr<!s8i> loc(#loc148)
    cir.store %9, %1 : !cir.ptr<!s8i>, !cir.ptr<!cir.ptr<!s8i>> loc(#loc248)
    %10 = cir.const #cir.int<10> : !s32i loc(#loc150)
    %11 = cir.const #cir.int<1> : !s32i loc(#loc150)
    %12 = cir.binop(add, %10, %11) nsw : !s32i loc(#loc150)
    %13 = cir.cast(integral, %12 : !s32i), !u64i loc(#loc150)
    %14 = cir.const #cir.int<1> : !u64i loc(#loc150)
    %15 = cir.binop(mul, %13, %14) : !u64i loc(#loc150)
    %16 = cir.alloca !u8i, !cir.ptr<!u8i>, %15 : !u64i, ["bi_alloca"] {alignment = 16 : i64} loc(#loc150)
    %17 = cir.cast(bitcast, %16 : !cir.ptr<!u8i>), !cir.ptr<!void> loc(#loc150)
    %18 = cir.cast(bitcast, %17 : !cir.ptr<!void>), !cir.ptr<!s8i> loc(#loc150)
    cir.store %18, %7 : !cir.ptr<!s8i>, !cir.ptr<!cir.ptr<!s8i>> loc(#loc249)
    cir.scope {
      %19 = cir.const #cir.int<5> : !s32i loc(#loc153)
      %20 = cir.const #cir.int<5> : !s32i loc(#loc154)
      %21 = cir.cmp(eq, %19, %20) : !s32i, !cir.bool loc(#loc251)
      cir.if %21 {
        %22 = cir.load %7 : !cir.ptr<!cir.ptr<!s8i>>, !cir.ptr<!s8i> loc(#loc156)
        cir.store %22, %0 : !cir.ptr<!s8i>, !cir.ptr<!cir.ptr<!s8i>> loc(#loc253)
        %23 = cir.const #cir.int<0> : !s32i loc(#loc158)
        %24 = cir.cast(integral, %23 : !s32i), !s8i loc(#loc158)
        %25 = cir.load %0 : !cir.ptr<!cir.ptr<!s8i>>, !cir.ptr<!s8i> loc(#loc159)
        %26 = cir.const #cir.int<0> : !s32i loc(#loc160)
        %27 = cir.ptr_stride(%25 : !cir.ptr<!s8i>, %26 : !s32i), !cir.ptr<!s8i> loc(#loc161)
        cir.store %24, %27 : !s8i, !cir.ptr<!s8i> loc(#loc254)
      } loc(#loc252)
    } loc(#loc250)
    cir.scope {
      %19 = cir.alloca !cir.array<!s8i x 11>, !cir.ptr<!cir.array<!s8i x 11>>, ["source"] {alignment = 1 : i64} loc(#loc190)
      %20 = cir.alloca !u64i, !cir.ptr<!u64i>, ["i"] {alignment = 8 : i64} loc(#loc256)
      %21 = cir.alloca !u64i, !cir.ptr<!u64i>, ["sourceLen"] {alignment = 8 : i64} loc(#loc257)
      %22 = cir.get_global @__const.goodG2B2.source : !cir.ptr<!cir.array<!s8i x 11>> loc(#loc190)
      cir.copy %22 to %19 : !cir.ptr<!cir.array<!s8i x 11>> loc(#loc190)
      %23 = cir.get_global @strlen : !cir.ptr<!cir.func<!u64i (!cir.ptr<!s8i>)>> loc(#loc167)
      %24 = cir.cast(array_to_ptrdecay, %19 : !cir.ptr<!cir.array<!s8i x 11>>), !cir.ptr<!s8i> loc(#loc168)
      %25 = cir.call @strlen(%24) : (!cir.ptr<!s8i>) -> !u64i extra(#fn_attr) loc(#loc167)
      cir.store %25, %21 : !u64i, !cir.ptr<!u64i> loc(#loc258)
      cir.scope {
        %27 = cir.const #cir.int<0> : !s32i loc(#loc173)
        %28 = cir.cast(integral, %27 : !s32i), !u64i loc(#loc173)
        cir.store %28, %20 : !u64i, !cir.ptr<!u64i> loc(#loc260)
        cir.for : cond {
          %29 = cir.load %20 : !cir.ptr<!u64i>, !u64i loc(#loc175)
          %30 = cir.load %21 : !cir.ptr<!u64i>, !u64i loc(#loc176)
          %31 = cir.const #cir.int<1> : !s32i loc(#loc177)
          %32 = cir.cast(integral, %31 : !s32i), !u64i loc(#loc177)
          %33 = cir.binop(add, %30, %32) : !u64i loc(#loc261)
          %34 = cir.cmp(lt, %29, %33) : !u64i, !cir.bool loc(#loc262)
          cir.condition(%34) loc(#loc178)
        } body {
          cir.scope {
            %29 = cir.load %20 : !cir.ptr<!u64i>, !u64i loc(#loc180)
            %30 = cir.cast(array_to_ptrdecay, %19 : !cir.ptr<!cir.array<!s8i x 11>>), !cir.ptr<!s8i> loc(#loc181)
            %31 = cir.ptr_stride(%30 : !cir.ptr<!s8i>, %29 : !u64i), !cir.ptr<!s8i> loc(#loc181)
            %32 = cir.load %31 : !cir.ptr<!s8i>, !s8i loc(#loc181)
            %33 = cir.load %0 : !cir.ptr<!cir.ptr<!s8i>>, !cir.ptr<!s8i> loc(#loc182)
            %34 = cir.load %20 : !cir.ptr<!u64i>, !u64i loc(#loc183)
            %35 = cir.ptr_stride(%33 : !cir.ptr<!s8i>, %34 : !u64i), !cir.ptr<!s8i> loc(#loc184)
            cir.store %32, %35 : !s8i, !cir.ptr<!s8i> loc(#loc264)
          } loc(#loc263)
          cir.yield loc(#loc172)
        } step {
          %29 = cir.load %20 : !cir.ptr<!u64i>, !u64i loc(#loc186)
          %30 = cir.unary(inc, %29) : !u64i, !u64i loc(#loc187)
          cir.store %30, %20 : !u64i, !cir.ptr<!u64i> loc(#loc265)
          cir.yield loc(#loc259)
        } loc(#loc259)
      } loc(#loc259)
      %26 = cir.load %0 : !cir.ptr<!cir.ptr<!s8i>>, !cir.ptr<!s8i> loc(#loc188)
      cir.call @printLine(%26) : (!cir.ptr<!s8i>) -> () loc(#loc189)
    } loc(#loc255)
    cir.return loc(#loc144)
  } loc(#loc246)
} loc(#loc)
#loc = loc("/home/ladisgin/git_proj/juliet-c/testcases/CWE121_Stack_Based_Buffer_Overflow/s02/CWE121_Stack_Based_Buffer_Overflow__CWE193_char_alloca_loop_06.c":0:0)
#loc1 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE193_char_alloca_loop_06.c":108:9)
#loc2 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE193_char_alloca_loop_06.c":108:29)
#loc3 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE193_char_alloca_loop_06.c":81:9)
#loc4 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE193_char_alloca_loop_06.c":81:29)
#loc5 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE193_char_alloca_loop_06.c":45:9)
#loc6 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE193_char_alloca_loop_06.c":45:29)
#loc7 = loc("/usr/include/string.h":407:1)
#loc8 = loc("/usr/include/string.h":408:33)
#loc9 = loc("../../../testcasesupport/std_testcase_io.h":14:1)
#loc10 = loc("../../../testcasesupport/std_testcase_io.h":14:33)
#loc11 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE193_char_alloca_loop_06.c":32:1)
#loc12 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE193_char_alloca_loop_06.c":56:1)
#loc13 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE193_char_alloca_loop_06.c":34:5)
#loc14 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE193_char_alloca_loop_06.c":34:12)
#loc15 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE193_char_alloca_loop_06.c":35:5)
#loc16 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE193_char_alloca_loop_06.c":35:36)
#loc17 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE193_char_alloca_loop_06.c":36:5)
#loc18 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE193_char_alloca_loop_06.c":36:37)
#loc19 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE193_char_alloca_loop_06.c":37:5)
#loc20 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE193_char_alloca_loop_06.c":43:5)
#loc21 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE193_char_alloca_loop_06.c":37:8)
#loc22 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE193_char_alloca_loop_06.c":37:27)
#loc23 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE193_char_alloca_loop_06.c":38:5)
#loc24 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE193_char_alloca_loop_06.c":41:16)
#loc25 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE193_char_alloca_loop_06.c":41:9)
#loc26 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE193_char_alloca_loop_06.c":42:19)
#loc27 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE193_char_alloca_loop_06.c":42:9)
#loc28 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE193_char_alloca_loop_06.c":42:14)
#loc29 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE193_char_alloca_loop_06.c":42:15)
#loc30 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE193_char_alloca_loop_06.c":44:5)
#loc31 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE193_char_alloca_loop_06.c":55:5)
#loc32 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE193_char_alloca_loop_06.c":46:9)
#loc33 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE193_char_alloca_loop_06.c":46:16)
#loc34 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE193_char_alloca_loop_06.c":46:19)
#loc35 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE193_char_alloca_loop_06.c":47:21)
#loc36 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE193_char_alloca_loop_06.c":47:28)
#loc37 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE193_char_alloca_loop_06.c":47:9)
#loc38 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE193_char_alloca_loop_06.c":47:34)
#loc39 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE193_char_alloca_loop_06.c":50:9)
#loc40 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE193_char_alloca_loop_06.c":53:9)
#loc41 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE193_char_alloca_loop_06.c":50:18)
#loc42 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE193_char_alloca_loop_06.c":50:14)
#loc43 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE193_char_alloca_loop_06.c":50:21)
#loc44 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE193_char_alloca_loop_06.c":50:25)
#loc45 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE193_char_alloca_loop_06.c":50:37)
#loc46 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE193_char_alloca_loop_06.c":50:23)
#loc47 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE193_char_alloca_loop_06.c":51:9)
#loc48 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE193_char_alloca_loop_06.c":52:30)
#loc49 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE193_char_alloca_loop_06.c":52:23)
#loc50 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE193_char_alloca_loop_06.c":52:13)
#loc51 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE193_char_alloca_loop_06.c":52:18)
#loc52 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE193_char_alloca_loop_06.c":52:19)
#loc53 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE193_char_alloca_loop_06.c":52:31)
#loc54 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE193_char_alloca_loop_06.c":50:41)
#loc55 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE193_char_alloca_loop_06.c":50:40)
#loc56 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE193_char_alloca_loop_06.c":54:19)
#loc57 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE193_char_alloca_loop_06.c":54:9)
#loc58 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE193_char_alloca_loop_06.c":121:1)
#loc59 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE193_char_alloca_loop_06.c":125:1)
#loc60 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE193_char_alloca_loop_06.c":123:5)
#loc61 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE193_char_alloca_loop_06.c":123:14)
#loc62 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE193_char_alloca_loop_06.c":124:5)
#loc63 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE193_char_alloca_loop_06.c":124:14)
#loc64 = loc("/usr/include/stdlib.h":575:1)
#loc65 = loc("/usr/include/stdlib.h":575:41)
#loc66 = loc("/usr/include/time.h":76:1)
#loc67 = loc("/usr/include/time.h":76:38)
#loc68 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE193_char_alloca_loop_06.c":142:15)
#loc69 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE193_char_alloca_loop_06.c":144:15)
#loc70 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE193_char_alloca_loop_06.c":147:15)
#loc71 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE193_char_alloca_loop_06.c":149:15)
#loc72 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE193_char_alloca_loop_06.c":137:1)
#loc73 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE193_char_alloca_loop_06.c":152:1)
#loc78 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE193_char_alloca_loop_06.c":138:1)
#loc79 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE193_char_alloca_loop_06.c":140:27)
#loc80 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE193_char_alloca_loop_06.c":140:22)
#loc81 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE193_char_alloca_loop_06.c":140:5)
#loc82 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE193_char_alloca_loop_06.c":142:5)
#loc83 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE193_char_alloca_loop_06.c":143:5)
#loc84 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE193_char_alloca_loop_06.c":143:73)
#loc85 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE193_char_alloca_loop_06.c":144:5)
#loc86 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE193_char_alloca_loop_06.c":147:5)
#loc87 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE193_char_alloca_loop_06.c":148:5)
#loc88 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE193_char_alloca_loop_06.c":148:72)
#loc89 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE193_char_alloca_loop_06.c":149:5)
#loc90 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE193_char_alloca_loop_06.c":151:12)
#loc91 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE193_char_alloca_loop_06.c":151:5)
#loc92 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE193_char_alloca_loop_06.c":71:19)
#loc93 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE193_char_alloca_loop_06.c":63:1)
#loc94 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE193_char_alloca_loop_06.c":92:1)
#loc95 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE193_char_alloca_loop_06.c":65:5)
#loc96 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE193_char_alloca_loop_06.c":65:12)
#loc97 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE193_char_alloca_loop_06.c":66:5)
#loc98 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE193_char_alloca_loop_06.c":66:36)
#loc99 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE193_char_alloca_loop_06.c":67:5)
#loc100 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE193_char_alloca_loop_06.c":67:37)
#loc101 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE193_char_alloca_loop_06.c":68:5)
#loc102 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE193_char_alloca_loop_06.c":79:5)
#loc103 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE193_char_alloca_loop_06.c":68:8)
#loc104 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE193_char_alloca_loop_06.c":68:27)
#loc105 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE193_char_alloca_loop_06.c":69:5)
#loc106 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE193_char_alloca_loop_06.c":72:5)
#loc107 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE193_char_alloca_loop_06.c":74:5)
#loc108 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE193_char_alloca_loop_06.c":71:9)
#loc109 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE193_char_alloca_loop_06.c":77:16)
#loc110 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE193_char_alloca_loop_06.c":77:9)
#loc111 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE193_char_alloca_loop_06.c":78:19)
#loc112 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE193_char_alloca_loop_06.c":78:9)
#loc113 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE193_char_alloca_loop_06.c":78:14)
#loc114 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE193_char_alloca_loop_06.c":78:15)
#loc115 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE193_char_alloca_loop_06.c":80:5)
#loc116 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE193_char_alloca_loop_06.c":91:5)
#loc117 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE193_char_alloca_loop_06.c":82:9)
#loc118 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE193_char_alloca_loop_06.c":82:16)
#loc119 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE193_char_alloca_loop_06.c":82:19)
#loc120 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE193_char_alloca_loop_06.c":83:21)
#loc121 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE193_char_alloca_loop_06.c":83:28)
#loc122 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE193_char_alloca_loop_06.c":83:9)
#loc123 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE193_char_alloca_loop_06.c":83:34)
#loc124 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE193_char_alloca_loop_06.c":86:9)
#loc125 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE193_char_alloca_loop_06.c":89:9)
#loc126 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE193_char_alloca_loop_06.c":86:18)
#loc127 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE193_char_alloca_loop_06.c":86:14)
#loc128 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE193_char_alloca_loop_06.c":86:21)
#loc129 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE193_char_alloca_loop_06.c":86:25)
#loc130 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE193_char_alloca_loop_06.c":86:37)
#loc131 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE193_char_alloca_loop_06.c":86:23)
#loc132 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE193_char_alloca_loop_06.c":87:9)
#loc133 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE193_char_alloca_loop_06.c":88:30)
#loc134 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE193_char_alloca_loop_06.c":88:23)
#loc135 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE193_char_alloca_loop_06.c":88:13)
#loc136 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE193_char_alloca_loop_06.c":88:18)
#loc137 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE193_char_alloca_loop_06.c":88:19)
#loc138 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE193_char_alloca_loop_06.c":88:31)
#loc139 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE193_char_alloca_loop_06.c":86:41)
#loc140 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE193_char_alloca_loop_06.c":86:40)
#loc141 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE193_char_alloca_loop_06.c":90:19)
#loc142 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE193_char_alloca_loop_06.c":90:9)
#loc143 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE193_char_alloca_loop_06.c":95:1)
#loc144 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE193_char_alloca_loop_06.c":119:1)
#loc145 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE193_char_alloca_loop_06.c":97:5)
#loc146 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE193_char_alloca_loop_06.c":97:12)
#loc147 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE193_char_alloca_loop_06.c":98:5)
#loc148 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE193_char_alloca_loop_06.c":98:36)
#loc149 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE193_char_alloca_loop_06.c":99:5)
#loc150 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE193_char_alloca_loop_06.c":99:37)
#loc151 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE193_char_alloca_loop_06.c":100:5)
#loc152 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE193_char_alloca_loop_06.c":106:5)
#loc153 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE193_char_alloca_loop_06.c":100:8)
#loc154 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE193_char_alloca_loop_06.c":100:27)
#loc155 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE193_char_alloca_loop_06.c":101:5)
#loc156 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE193_char_alloca_loop_06.c":104:16)
#loc157 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE193_char_alloca_loop_06.c":104:9)
#loc158 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE193_char_alloca_loop_06.c":105:19)
#loc159 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE193_char_alloca_loop_06.c":105:9)
#loc160 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE193_char_alloca_loop_06.c":105:14)
#loc161 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE193_char_alloca_loop_06.c":105:15)
#loc162 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE193_char_alloca_loop_06.c":107:5)
#loc163 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE193_char_alloca_loop_06.c":118:5)
#loc164 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE193_char_alloca_loop_06.c":109:9)
#loc165 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE193_char_alloca_loop_06.c":109:16)
#loc166 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE193_char_alloca_loop_06.c":109:19)
#loc167 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE193_char_alloca_loop_06.c":110:21)
#loc168 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE193_char_alloca_loop_06.c":110:28)
#loc169 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE193_char_alloca_loop_06.c":110:9)
#loc170 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE193_char_alloca_loop_06.c":110:34)
#loc171 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE193_char_alloca_loop_06.c":113:9)
#loc172 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE193_char_alloca_loop_06.c":116:9)
#loc173 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE193_char_alloca_loop_06.c":113:18)
#loc174 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE193_char_alloca_loop_06.c":113:14)
#loc175 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE193_char_alloca_loop_06.c":113:21)
#loc176 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE193_char_alloca_loop_06.c":113:25)
#loc177 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE193_char_alloca_loop_06.c":113:37)
#loc178 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE193_char_alloca_loop_06.c":113:23)
#loc179 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE193_char_alloca_loop_06.c":114:9)
#loc180 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE193_char_alloca_loop_06.c":115:30)
#loc181 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE193_char_alloca_loop_06.c":115:23)
#loc182 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE193_char_alloca_loop_06.c":115:13)
#loc183 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE193_char_alloca_loop_06.c":115:18)
#loc184 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE193_char_alloca_loop_06.c":115:19)
#loc185 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE193_char_alloca_loop_06.c":115:31)
#loc186 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE193_char_alloca_loop_06.c":113:41)
#loc187 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE193_char_alloca_loop_06.c":113:40)
#loc188 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE193_char_alloca_loop_06.c":117:19)
#loc189 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE193_char_alloca_loop_06.c":117:9)
#loc190 = loc(fused[#loc1, #loc2])
#loc191 = loc(fused[#loc3, #loc4])
#loc192 = loc(fused[#loc5, #loc6])
#loc193 = loc(fused[#loc7, #loc8])
#loc194 = loc(fused[#loc9, #loc10])
#loc195 = loc(fused[#loc11, #loc12])
#loc196 = loc(fused[#loc13, #loc14])
#loc197 = loc(fused[#loc15, #loc16])
#loc198 = loc(fused[#loc17, #loc18])
#loc199 = loc(fused[#loc19, #loc20])
#loc200 = loc(fused[#loc21, #loc22])
#loc201 = loc(fused[#loc23, #loc20])
#loc202 = loc(fused[#loc25, #loc24])
#loc203 = loc(fused[#loc27, #loc26])
#loc204 = loc(fused[#loc30, #loc31])
#loc205 = loc(fused[#loc32, #loc33])
#loc206 = loc(fused[#loc32, #loc34])
#loc207 = loc(fused[#loc37, #loc38])
#loc208 = loc(fused[#loc39, #loc40])
#loc209 = loc(fused[#loc42, #loc41])
#loc210 = loc(fused[#loc44, #loc45])
#loc211 = loc(fused[#loc43, #loc45])
#loc212 = loc(fused[#loc47, #loc40])
#loc213 = loc(fused[#loc50, #loc53])
#loc214 = loc(fused[#loc55, #loc54])
#loc215 = loc(fused[#loc58, #loc59])
#loc216 = loc(fused[#loc60, #loc61])
#loc217 = loc(fused[#loc62, #loc63])
#loc218 = loc(fused[#loc64, #loc65])
#loc219 = loc(fused[#loc66, #loc67])
#loc220 = loc(fused[#loc72, #loc73])
#loc223 = loc(fused[#loc83, #loc84])
#loc224 = loc(fused[#loc87, #loc88])
#loc225 = loc(fused[#loc91, #loc90])
#loc226 = loc(fused[#loc93, #loc94])
#loc227 = loc(fused[#loc95, #loc96])
#loc228 = loc(fused[#loc97, #loc98])
#loc229 = loc(fused[#loc99, #loc100])
#loc230 = loc(fused[#loc101, #loc102])
#loc231 = loc(fused[#loc103, #loc104])
#loc232 = loc(fused[#loc105, #loc106, #loc107, #loc102])
#loc233 = loc(fused[#loc110, #loc109])
#loc234 = loc(fused[#loc112, #loc111])
#loc235 = loc(fused[#loc115, #loc116])
#loc236 = loc(fused[#loc117, #loc118])
#loc237 = loc(fused[#loc117, #loc119])
#loc238 = loc(fused[#loc122, #loc123])
#loc239 = loc(fused[#loc124, #loc125])
#loc240 = loc(fused[#loc127, #loc126])
#loc241 = loc(fused[#loc129, #loc130])
#loc242 = loc(fused[#loc128, #loc130])
#loc243 = loc(fused[#loc132, #loc125])
#loc244 = loc(fused[#loc135, #loc138])
#loc245 = loc(fused[#loc140, #loc139])
#loc246 = loc(fused[#loc143, #loc144])
#loc247 = loc(fused[#loc145, #loc146])
#loc248 = loc(fused[#loc147, #loc148])
#loc249 = loc(fused[#loc149, #loc150])
#loc250 = loc(fused[#loc151, #loc152])
#loc251 = loc(fused[#loc153, #loc154])
#loc252 = loc(fused[#loc155, #loc152])
#loc253 = loc(fused[#loc157, #loc156])
#loc254 = loc(fused[#loc159, #loc158])
#loc255 = loc(fused[#loc162, #loc163])
#loc256 = loc(fused[#loc164, #loc165])
#loc257 = loc(fused[#loc164, #loc166])
#loc258 = loc(fused[#loc169, #loc170])
#loc259 = loc(fused[#loc171, #loc172])
#loc260 = loc(fused[#loc174, #loc173])
#loc261 = loc(fused[#loc176, #loc177])
#loc262 = loc(fused[#loc175, #loc177])
#loc263 = loc(fused[#loc179, #loc172])
#loc264 = loc(fused[#loc182, #loc185])
#loc265 = loc(fused[#loc187, #loc186])
