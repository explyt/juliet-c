!s32i = !cir.int<s, 32>
!s64i = !cir.int<s, 64>
!s8i = !cir.int<s, 8>
!u32i = !cir.int<u, 32>
!u64i = !cir.int<u, 64>
!void = !cir.void
#fn_attr = #cir<extra({nothrow = #cir.nothrow})>
#fn_attr1 = #cir<extra({inline = #cir.inline<no>, nothrow = #cir.nothrow, optnone = #cir.optnone})>
#loc82 = loc("CWE122_Heap_Based_Buffer_Overflow__c_src_char_cat_32.c":94:10)
#loc83 = loc("CWE122_Heap_Based_Buffer_Overflow__c_src_char_cat_32.c":94:14)
#loc84 = loc("CWE122_Heap_Based_Buffer_Overflow__c_src_char_cat_32.c":94:20)
#loc85 = loc("CWE122_Heap_Based_Buffer_Overflow__c_src_char_cat_32.c":94:32)
#loc187 = loc(fused[#loc82, #loc83])
#loc188 = loc(fused[#loc84, #loc85])
module @"/home/ladisgin/git_proj/juliet-c/testcases/CWE122_Heap_Based_Buffer_Overflow/s10/CWE122_Heap_Based_Buffer_Overflow__c_src_char_cat_32.c" attributes {cir.lang = #cir.lang<c>, cir.sob = #cir.signed_overflow_behavior<undefined>, cir.triple = "x86_64-unknown-linux-gnu", dlti.dl_spec = #dlti.dl_spec<i16 = dense<16> : vector<2xi64>, i8 = dense<8> : vector<2xi64>, i32 = dense<32> : vector<2xi64>, i1 = dense<8> : vector<2xi64>, !llvm.ptr = dense<64> : vector<4xi64>, f16 = dense<16> : vector<2xi64>, f64 = dense<64> : vector<2xi64>, f128 = dense<128> : vector<2xi64>, f80 = dense<128> : vector<2xi64>, i128 = dense<128> : vector<2xi64>, i64 = dense<64> : vector<2xi64>, !llvm.ptr<272> = dense<64> : vector<4xi64>, !llvm.ptr<271> = dense<32> : vector<4xi64>, !llvm.ptr<270> = dense<32> : vector<4xi64>, "dlti.stack_alignment" = 128 : i64, "dlti.endianness" = "little">} {
  cir.func private @malloc(!u64i) -> !cir.ptr<!void> extra(#fn_attr) loc(#loc157)
  cir.func private @exit(!s32i) extra(#fn_attr) loc(#loc158)
  cir.func private @strcat(!cir.ptr<!s8i>, !cir.ptr<!s8i>) -> !cir.ptr<!s8i> extra(#fn_attr) loc(#loc159)
  cir.func private @printLine(!cir.ptr<!s8i>) loc(#loc160)
  cir.func private @free(!cir.ptr<!void>) extra(#fn_attr) loc(#loc161)
  cir.func no_proto @CWE122_Heap_Based_Buffer_Overflow__c_src_char_cat_32_bad() extra(#fn_attr1) {
    %0 = cir.alloca !cir.ptr<!s8i>, !cir.ptr<!cir.ptr<!s8i>>, ["data"] {alignment = 8 : i64} loc(#loc163)
    %1 = cir.alloca !cir.ptr<!cir.ptr<!s8i>>, !cir.ptr<!cir.ptr<!cir.ptr<!s8i>>>, ["dataPtr1", init] {alignment = 8 : i64} loc(#loc164)
    %2 = cir.alloca !cir.ptr<!cir.ptr<!s8i>>, !cir.ptr<!cir.ptr<!cir.ptr<!s8i>>>, ["dataPtr2", init] {alignment = 8 : i64} loc(#loc165)
    cir.store %0, %1 : !cir.ptr<!cir.ptr<!s8i>>, !cir.ptr<!cir.ptr<!cir.ptr<!s8i>>> loc(#loc164)
    cir.store %0, %2 : !cir.ptr<!cir.ptr<!s8i>>, !cir.ptr<!cir.ptr<!cir.ptr<!s8i>>> loc(#loc165)
    %3 = cir.get_global @malloc : !cir.ptr<!cir.func<!cir.ptr<!void> (!u64i)>> loc(#loc19)
    %4 = cir.const #cir.int<100> : !s32i loc(#loc20)
    %5 = cir.cast(integral, %4 : !s32i), !u64i loc(#loc20)
    %6 = cir.const #cir.int<1> : !u64i loc(#loc166)
    %7 = cir.binop(mul, %5, %6) : !u64i loc(#loc167)
    %8 = cir.call @malloc(%7) : (!u64i) -> !cir.ptr<!void> extra(#fn_attr) loc(#loc19)
    %9 = cir.cast(bitcast, %8 : !cir.ptr<!void>), !cir.ptr<!s8i> loc(#loc168)
    cir.store %9, %0 : !cir.ptr<!s8i>, !cir.ptr<!cir.ptr<!s8i>> loc(#loc169)
    cir.scope {
      %10 = cir.load %0 : !cir.ptr<!cir.ptr<!s8i>>, !cir.ptr<!s8i> loc(#loc27)
      %11 = cir.const #cir.ptr<null> : !cir.ptr<!void> loc(#loc28)
      %12 = cir.cast(bitcast, %11 : !cir.ptr<!void>), !cir.ptr<!s8i> loc(#loc28)
      %13 = cir.cmp(eq, %10, %12) : !cir.ptr<!s8i>, !cir.bool loc(#loc171)
      cir.if %13 {
        %14 = cir.get_global @exit : !cir.ptr<!cir.func<!void (!s32i)>> loc(#loc30)
        %15 = cir.const #cir.int<1> : !s32i loc(#loc31)
        %16 = cir.unary(minus, %15) : !s32i, !s32i loc(#loc32)
        cir.call @exit(%16) : (!s32i) -> () extra(#fn_attr) loc(#loc30)
      } loc(#loc172)
    } loc(#loc170)
    cir.scope {
      %10 = cir.alloca !cir.ptr<!s8i>, !cir.ptr<!cir.ptr<!s8i>>, ["data", init] {alignment = 8 : i64} loc(#loc174)
      %11 = cir.load deref %1 : !cir.ptr<!cir.ptr<!cir.ptr<!s8i>>>, !cir.ptr<!cir.ptr<!s8i>> loc(#loc36)
      %12 = cir.load %11 : !cir.ptr<!cir.ptr<!s8i>>, !cir.ptr<!s8i> loc(#loc37)
      cir.store %12, %10 : !cir.ptr<!s8i>, !cir.ptr<!cir.ptr<!s8i>> loc(#loc174)
      %13 = cir.load %10 : !cir.ptr<!cir.ptr<!s8i>>, !cir.ptr<!s8i> loc(#loc38)
      %14 = cir.cast(bitcast, %13 : !cir.ptr<!s8i>), !cir.ptr<!void> loc(#loc38)
      %15 = cir.const #cir.int<65> : !s32i loc(#loc39)
      %16 = cir.const #cir.int<100> : !s32i loc(#loc40)
      %17 = cir.const #cir.int<1> : !s32i loc(#loc41)
      %18 = cir.binop(sub, %16, %17) nsw : !s32i loc(#loc40)
      %19 = cir.cast(integral, %18 : !s32i), !u64i loc(#loc40)
      cir.libc.memset %19 bytes from %14 set to %15 : !cir.ptr<!void>, !s32i, !u64i loc(#loc175)
      %20 = cir.const #cir.int<0> : !s32i loc(#loc44)
      %21 = cir.cast(integral, %20 : !s32i), !s8i loc(#loc44)
      %22 = cir.load %10 : !cir.ptr<!cir.ptr<!s8i>>, !cir.ptr<!s8i> loc(#loc45)
      %23 = cir.const #cir.int<100> : !s32i loc(#loc46)
      %24 = cir.const #cir.int<1> : !s32i loc(#loc47)
      %25 = cir.binop(sub, %23, %24) nsw : !s32i loc(#loc46)
      %26 = cir.ptr_stride(%22 : !cir.ptr<!s8i>, %25 : !s32i), !cir.ptr<!s8i> loc(#loc48)
      cir.store %21, %26 : !s8i, !cir.ptr<!s8i> loc(#loc176)
      %27 = cir.load %10 : !cir.ptr<!cir.ptr<!s8i>>, !cir.ptr<!s8i> loc(#loc49)
      %28 = cir.load deref %1 : !cir.ptr<!cir.ptr<!cir.ptr<!s8i>>>, !cir.ptr<!cir.ptr<!s8i>> loc(#loc50)
      cir.store %27, %28 : !cir.ptr<!s8i>, !cir.ptr<!cir.ptr<!s8i>> loc(#loc177)
    } loc(#loc173)
    cir.scope {
      %10 = cir.alloca !cir.ptr<!s8i>, !cir.ptr<!cir.ptr<!s8i>>, ["data", init] {alignment = 8 : i64} loc(#loc179)
      %11 = cir.load deref %2 : !cir.ptr<!cir.ptr<!cir.ptr<!s8i>>>, !cir.ptr<!cir.ptr<!s8i>> loc(#loc55)
      %12 = cir.load %11 : !cir.ptr<!cir.ptr<!s8i>>, !cir.ptr<!s8i> loc(#loc56)
      cir.store %12, %10 : !cir.ptr<!s8i>, !cir.ptr<!cir.ptr<!s8i>> loc(#loc179)
      cir.scope {
        %13 = cir.alloca !cir.array<!s8i x 50>, !cir.ptr<!cir.array<!s8i x 50>>, ["dest"] {alignment = 16 : i64} loc(#loc181)
        %14 = cir.const #cir.zero : !cir.array<!s8i x 50> loc(#loc181)
        cir.store %14, %13 : !cir.array<!s8i x 50>, !cir.ptr<!cir.array<!s8i x 50>> loc(#loc181)
        %15 = cir.get_global @strcat : !cir.ptr<!cir.func<!cir.ptr<!s8i> (!cir.ptr<!s8i>, !cir.ptr<!s8i>)>> loc(#loc61)
        %16 = cir.cast(array_to_ptrdecay, %13 : !cir.ptr<!cir.array<!s8i x 50>>), !cir.ptr<!s8i> loc(#loc62)
        %17 = cir.load %10 : !cir.ptr<!cir.ptr<!s8i>>, !cir.ptr<!s8i> loc(#loc63)
        %18 = cir.call @strcat(%16, %17) : (!cir.ptr<!s8i>, !cir.ptr<!s8i>) -> !cir.ptr<!s8i> extra(#fn_attr) loc(#loc61)
        %19 = cir.load %10 : !cir.ptr<!cir.ptr<!s8i>>, !cir.ptr<!s8i> loc(#loc64)
        cir.call @printLine(%19) : (!cir.ptr<!s8i>) -> () loc(#loc65)
        %20 = cir.get_global @free : !cir.ptr<!cir.func<!void (!cir.ptr<!void>)>> loc(#loc66)
        %21 = cir.load %10 : !cir.ptr<!cir.ptr<!s8i>>, !cir.ptr<!s8i> loc(#loc67)
        %22 = cir.cast(bitcast, %21 : !cir.ptr<!s8i>), !cir.ptr<!void> loc(#loc67)
        cir.call @free(%22) : (!cir.ptr<!void>) -> () extra(#fn_attr) loc(#loc66)
      } loc(#loc180)
    } loc(#loc178)
    cir.return loc(#loc12)
  } loc(#loc162)
  cir.func no_proto @CWE122_Heap_Based_Buffer_Overflow__c_src_char_cat_32_good() extra(#fn_attr1) {
    %0 = cir.get_global @goodG2B : !cir.ptr<!cir.func<!void ()>> loc(#loc183)
    cir.call %0() : (!cir.ptr<!cir.func<!void ()>>) -> () loc(#loc70)
    cir.return loc(#loc69)
  } loc(#loc182)
  cir.func private @srand(!u32i) extra(#fn_attr) loc(#loc184)
  cir.func private @time(!cir.ptr<!s64i>) -> !s64i extra(#fn_attr) loc(#loc185)
  cir.global "private" constant cir_private dsolocal @".str" = #cir.const_array<"Calling good()...\00" : !cir.array<!s8i x 18>> : !cir.array<!s8i x 18> {alignment = 1 : i64} loc(#loc76)
  cir.global "private" constant cir_private dsolocal @".str.1" = #cir.const_array<"Finished good()\00" : !cir.array<!s8i x 16>> : !cir.array<!s8i x 16> {alignment = 1 : i64} loc(#loc77)
  cir.global "private" constant cir_private dsolocal @".str.2" = #cir.const_array<"Calling bad()...\00" : !cir.array<!s8i x 17>> : !cir.array<!s8i x 17> {alignment = 1 : i64} loc(#loc78)
  cir.global "private" constant cir_private dsolocal @".str.3" = #cir.const_array<"Finished bad()\00" : !cir.array<!s8i x 15>> : !cir.array<!s8i x 15> {alignment = 1 : i64} loc(#loc79)
  cir.func @main(%arg0: !s32i loc(fused[#loc82, #loc83]), %arg1: !cir.ptr<!cir.ptr<!s8i>> loc(fused[#loc84, #loc85])) -> !s32i extra(#fn_attr1) {
    %0 = cir.alloca !s32i, !cir.ptr<!s32i>, ["argc", init] {alignment = 4 : i64} loc(#loc187)
    %1 = cir.alloca !cir.ptr<!cir.ptr<!s8i>>, !cir.ptr<!cir.ptr<!cir.ptr<!s8i>>>, ["argv", init] {alignment = 8 : i64} loc(#loc188)
    %2 = cir.alloca !s32i, !cir.ptr<!s32i>, ["__retval"] {alignment = 4 : i64} loc(#loc81)
    cir.store %arg0, %0 : !s32i, !cir.ptr<!s32i> loc(#loc86)
    cir.store %arg1, %1 : !cir.ptr<!cir.ptr<!s8i>>, !cir.ptr<!cir.ptr<!cir.ptr<!s8i>>> loc(#loc86)
    %3 = cir.const #cir.ptr<null> : !cir.ptr<!s64i> loc(#loc87)
    %4 = cir.call @time(%3) : (!cir.ptr<!s64i>) -> !s64i extra(#fn_attr) loc(#loc88)
    %5 = cir.cast(integral, %4 : !s64i), !u32i loc(#loc88)
    cir.call @srand(%5) : (!u32i) -> () extra(#fn_attr) loc(#loc89)
    %6 = cir.get_global @".str" : !cir.ptr<!cir.array<!s8i x 18>> loc(#loc76)
    %7 = cir.cast(array_to_ptrdecay, %6 : !cir.ptr<!cir.array<!s8i x 18>>), !cir.ptr<!s8i> loc(#loc76)
    cir.call @printLine(%7) : (!cir.ptr<!s8i>) -> () loc(#loc90)
    %8 = cir.get_global @CWE122_Heap_Based_Buffer_Overflow__c_src_char_cat_32_good : !cir.ptr<!cir.func<!void ()>> loc(#loc189)
    cir.call @CWE122_Heap_Based_Buffer_Overflow__c_src_char_cat_32_good() : () -> () loc(#loc91)
    %9 = cir.get_global @".str.1" : !cir.ptr<!cir.array<!s8i x 16>> loc(#loc77)
    %10 = cir.cast(array_to_ptrdecay, %9 : !cir.ptr<!cir.array<!s8i x 16>>), !cir.ptr<!s8i> loc(#loc77)
    cir.call @printLine(%10) : (!cir.ptr<!s8i>) -> () loc(#loc93)
    %11 = cir.get_global @".str.2" : !cir.ptr<!cir.array<!s8i x 17>> loc(#loc78)
    %12 = cir.cast(array_to_ptrdecay, %11 : !cir.ptr<!cir.array<!s8i x 17>>), !cir.ptr<!s8i> loc(#loc78)
    cir.call @printLine(%12) : (!cir.ptr<!s8i>) -> () loc(#loc94)
    %13 = cir.get_global @CWE122_Heap_Based_Buffer_Overflow__c_src_char_cat_32_bad : !cir.ptr<!cir.func<!void ()>> loc(#loc190)
    cir.call @CWE122_Heap_Based_Buffer_Overflow__c_src_char_cat_32_bad() : () -> () loc(#loc95)
    %14 = cir.get_global @".str.3" : !cir.ptr<!cir.array<!s8i x 15>> loc(#loc79)
    %15 = cir.cast(array_to_ptrdecay, %14 : !cir.ptr<!cir.array<!s8i x 15>>), !cir.ptr<!s8i> loc(#loc79)
    cir.call @printLine(%15) : (!cir.ptr<!s8i>) -> () loc(#loc97)
    %16 = cir.const #cir.int<0> : !s32i loc(#loc98)
    cir.store %16, %2 : !s32i, !cir.ptr<!s32i> loc(#loc191)
    %17 = cir.load %2 : !cir.ptr<!s32i>, !s32i loc(#loc191)
    cir.return %17 : !s32i loc(#loc191)
  } loc(#loc186)
  cir.func no_proto internal private @goodG2B() extra(#fn_attr1) {
    %0 = cir.alloca !cir.ptr<!s8i>, !cir.ptr<!cir.ptr<!s8i>>, ["data"] {alignment = 8 : i64} loc(#loc193)
    %1 = cir.alloca !cir.ptr<!cir.ptr<!s8i>>, !cir.ptr<!cir.ptr<!cir.ptr<!s8i>>>, ["dataPtr1", init] {alignment = 8 : i64} loc(#loc194)
    %2 = cir.alloca !cir.ptr<!cir.ptr<!s8i>>, !cir.ptr<!cir.ptr<!cir.ptr<!s8i>>>, ["dataPtr2", init] {alignment = 8 : i64} loc(#loc195)
    cir.store %0, %1 : !cir.ptr<!cir.ptr<!s8i>>, !cir.ptr<!cir.ptr<!cir.ptr<!s8i>>> loc(#loc194)
    cir.store %0, %2 : !cir.ptr<!cir.ptr<!s8i>>, !cir.ptr<!cir.ptr<!cir.ptr<!s8i>>> loc(#loc195)
    %3 = cir.get_global @malloc : !cir.ptr<!cir.func<!cir.ptr<!void> (!u64i)>> loc(#loc108)
    %4 = cir.const #cir.int<100> : !s32i loc(#loc109)
    %5 = cir.cast(integral, %4 : !s32i), !u64i loc(#loc109)
    %6 = cir.const #cir.int<1> : !u64i loc(#loc196)
    %7 = cir.binop(mul, %5, %6) : !u64i loc(#loc197)
    %8 = cir.call @malloc(%7) : (!u64i) -> !cir.ptr<!void> extra(#fn_attr) loc(#loc108)
    %9 = cir.cast(bitcast, %8 : !cir.ptr<!void>), !cir.ptr<!s8i> loc(#loc198)
    cir.store %9, %0 : !cir.ptr<!s8i>, !cir.ptr<!cir.ptr<!s8i>> loc(#loc199)
    cir.scope {
      %10 = cir.load %0 : !cir.ptr<!cir.ptr<!s8i>>, !cir.ptr<!s8i> loc(#loc116)
      %11 = cir.const #cir.ptr<null> : !cir.ptr<!void> loc(#loc117)
      %12 = cir.cast(bitcast, %11 : !cir.ptr<!void>), !cir.ptr<!s8i> loc(#loc117)
      %13 = cir.cmp(eq, %10, %12) : !cir.ptr<!s8i>, !cir.bool loc(#loc201)
      cir.if %13 {
        %14 = cir.get_global @exit : !cir.ptr<!cir.func<!void (!s32i)>> loc(#loc119)
        %15 = cir.const #cir.int<1> : !s32i loc(#loc120)
        %16 = cir.unary(minus, %15) : !s32i, !s32i loc(#loc121)
        cir.call @exit(%16) : (!s32i) -> () extra(#fn_attr) loc(#loc119)
      } loc(#loc202)
    } loc(#loc200)
    cir.scope {
      %10 = cir.alloca !cir.ptr<!s8i>, !cir.ptr<!cir.ptr<!s8i>>, ["data", init] {alignment = 8 : i64} loc(#loc204)
      %11 = cir.load deref %1 : !cir.ptr<!cir.ptr<!cir.ptr<!s8i>>>, !cir.ptr<!cir.ptr<!s8i>> loc(#loc125)
      %12 = cir.load %11 : !cir.ptr<!cir.ptr<!s8i>>, !cir.ptr<!s8i> loc(#loc126)
      cir.store %12, %10 : !cir.ptr<!s8i>, !cir.ptr<!cir.ptr<!s8i>> loc(#loc204)
      %13 = cir.load %10 : !cir.ptr<!cir.ptr<!s8i>>, !cir.ptr<!s8i> loc(#loc127)
      %14 = cir.cast(bitcast, %13 : !cir.ptr<!s8i>), !cir.ptr<!void> loc(#loc127)
      %15 = cir.const #cir.int<65> : !s32i loc(#loc128)
      %16 = cir.const #cir.int<50> : !s32i loc(#loc129)
      %17 = cir.const #cir.int<1> : !s32i loc(#loc130)
      %18 = cir.binop(sub, %16, %17) nsw : !s32i loc(#loc129)
      %19 = cir.cast(integral, %18 : !s32i), !u64i loc(#loc129)
      cir.libc.memset %19 bytes from %14 set to %15 : !cir.ptr<!void>, !s32i, !u64i loc(#loc205)
      %20 = cir.const #cir.int<0> : !s32i loc(#loc133)
      %21 = cir.cast(integral, %20 : !s32i), !s8i loc(#loc133)
      %22 = cir.load %10 : !cir.ptr<!cir.ptr<!s8i>>, !cir.ptr<!s8i> loc(#loc134)
      %23 = cir.const #cir.int<50> : !s32i loc(#loc135)
      %24 = cir.const #cir.int<1> : !s32i loc(#loc136)
      %25 = cir.binop(sub, %23, %24) nsw : !s32i loc(#loc135)
      %26 = cir.ptr_stride(%22 : !cir.ptr<!s8i>, %25 : !s32i), !cir.ptr<!s8i> loc(#loc137)
      cir.store %21, %26 : !s8i, !cir.ptr<!s8i> loc(#loc206)
      %27 = cir.load %10 : !cir.ptr<!cir.ptr<!s8i>>, !cir.ptr<!s8i> loc(#loc138)
      %28 = cir.load deref %1 : !cir.ptr<!cir.ptr<!cir.ptr<!s8i>>>, !cir.ptr<!cir.ptr<!s8i>> loc(#loc139)
      cir.store %27, %28 : !cir.ptr<!s8i>, !cir.ptr<!cir.ptr<!s8i>> loc(#loc207)
    } loc(#loc203)
    cir.scope {
      %10 = cir.alloca !cir.ptr<!s8i>, !cir.ptr<!cir.ptr<!s8i>>, ["data", init] {alignment = 8 : i64} loc(#loc209)
      %11 = cir.load deref %2 : !cir.ptr<!cir.ptr<!cir.ptr<!s8i>>>, !cir.ptr<!cir.ptr<!s8i>> loc(#loc144)
      %12 = cir.load %11 : !cir.ptr<!cir.ptr<!s8i>>, !cir.ptr<!s8i> loc(#loc145)
      cir.store %12, %10 : !cir.ptr<!s8i>, !cir.ptr<!cir.ptr<!s8i>> loc(#loc209)
      cir.scope {
        %13 = cir.alloca !cir.array<!s8i x 50>, !cir.ptr<!cir.array<!s8i x 50>>, ["dest"] {alignment = 16 : i64} loc(#loc211)
        %14 = cir.const #cir.zero : !cir.array<!s8i x 50> loc(#loc211)
        cir.store %14, %13 : !cir.array<!s8i x 50>, !cir.ptr<!cir.array<!s8i x 50>> loc(#loc211)
        %15 = cir.get_global @strcat : !cir.ptr<!cir.func<!cir.ptr<!s8i> (!cir.ptr<!s8i>, !cir.ptr<!s8i>)>> loc(#loc150)
        %16 = cir.cast(array_to_ptrdecay, %13 : !cir.ptr<!cir.array<!s8i x 50>>), !cir.ptr<!s8i> loc(#loc151)
        %17 = cir.load %10 : !cir.ptr<!cir.ptr<!s8i>>, !cir.ptr<!s8i> loc(#loc152)
        %18 = cir.call @strcat(%16, %17) : (!cir.ptr<!s8i>, !cir.ptr<!s8i>) -> !cir.ptr<!s8i> extra(#fn_attr) loc(#loc150)
        %19 = cir.load %10 : !cir.ptr<!cir.ptr<!s8i>>, !cir.ptr<!s8i> loc(#loc153)
        cir.call @printLine(%19) : (!cir.ptr<!s8i>) -> () loc(#loc154)
        %20 = cir.get_global @free : !cir.ptr<!cir.func<!void (!cir.ptr<!void>)>> loc(#loc155)
        %21 = cir.load %10 : !cir.ptr<!cir.ptr<!s8i>>, !cir.ptr<!s8i> loc(#loc156)
        %22 = cir.cast(bitcast, %21 : !cir.ptr<!s8i>), !cir.ptr<!void> loc(#loc156)
        cir.call @free(%22) : (!cir.ptr<!void>) -> () extra(#fn_attr) loc(#loc155)
      } loc(#loc210)
    } loc(#loc208)
    cir.return loc(#loc101)
  } loc(#loc192)
} loc(#loc)
#loc = loc("/home/ladisgin/git_proj/juliet-c/testcases/CWE122_Heap_Based_Buffer_Overflow/s10/CWE122_Heap_Based_Buffer_Overflow__c_src_char_cat_32.c":0:0)
#loc1 = loc("/usr/include/stdlib.h":672:1)
#loc2 = loc("/usr/include/stdlib.h":672:45)
#loc3 = loc("/usr/include/stdlib.h":756:1)
#loc4 = loc("/usr/include/stdlib.h":756:70)
#loc5 = loc("/usr/include/string.h":149:1)
#loc6 = loc("/usr/include/string.h":150:14)
#loc7 = loc("../../../testcasesupport/std_testcase_io.h":14:1)
#loc8 = loc("../../../testcasesupport/std_testcase_io.h":14:33)
#loc9 = loc("/usr/include/stdlib.h":687:1)
#loc10 = loc("/usr/include/stdlib.h":687:32)
#loc11 = loc("CWE122_Heap_Based_Buffer_Overflow__c_src_char_cat_32.c":23:1)
#loc12 = loc("CWE122_Heap_Based_Buffer_Overflow__c_src_char_cat_32.c":47:1)
#loc13 = loc("CWE122_Heap_Based_Buffer_Overflow__c_src_char_cat_32.c":25:5)
#loc14 = loc("CWE122_Heap_Based_Buffer_Overflow__c_src_char_cat_32.c":25:12)
#loc15 = loc("CWE122_Heap_Based_Buffer_Overflow__c_src_char_cat_32.c":26:5)
#loc16 = loc("CWE122_Heap_Based_Buffer_Overflow__c_src_char_cat_32.c":26:25)
#loc17 = loc("CWE122_Heap_Based_Buffer_Overflow__c_src_char_cat_32.c":27:5)
#loc18 = loc("CWE122_Heap_Based_Buffer_Overflow__c_src_char_cat_32.c":27:25)
#loc19 = loc("CWE122_Heap_Based_Buffer_Overflow__c_src_char_cat_32.c":28:20)
#loc20 = loc("CWE122_Heap_Based_Buffer_Overflow__c_src_char_cat_32.c":28:27)
#loc21 = loc("CWE122_Heap_Based_Buffer_Overflow__c_src_char_cat_32.c":28:31)
#loc22 = loc("CWE122_Heap_Based_Buffer_Overflow__c_src_char_cat_32.c":28:42)
#loc23 = loc("CWE122_Heap_Based_Buffer_Overflow__c_src_char_cat_32.c":28:43)
#loc24 = loc("CWE122_Heap_Based_Buffer_Overflow__c_src_char_cat_32.c":28:5)
#loc25 = loc("CWE122_Heap_Based_Buffer_Overflow__c_src_char_cat_32.c":29:5)
#loc26 = loc("CWE122_Heap_Based_Buffer_Overflow__c_src_char_cat_32.c":29:33)
#loc27 = loc("CWE122_Heap_Based_Buffer_Overflow__c_src_char_cat_32.c":29:9)
#loc28 = loc("CWE122_Heap_Based_Buffer_Overflow__c_src_char_cat_32.c":29:17)
#loc29 = loc("CWE122_Heap_Based_Buffer_Overflow__c_src_char_cat_32.c":29:23)
#loc30 = loc("CWE122_Heap_Based_Buffer_Overflow__c_src_char_cat_32.c":29:24)
#loc31 = loc("CWE122_Heap_Based_Buffer_Overflow__c_src_char_cat_32.c":29:30)
#loc32 = loc("CWE122_Heap_Based_Buffer_Overflow__c_src_char_cat_32.c":29:29)
#loc33 = loc("CWE122_Heap_Based_Buffer_Overflow__c_src_char_cat_32.c":30:5)
#loc34 = loc("CWE122_Heap_Based_Buffer_Overflow__c_src_char_cat_32.c":36:5)
#loc35 = loc("CWE122_Heap_Based_Buffer_Overflow__c_src_char_cat_32.c":31:9)
#loc36 = loc("CWE122_Heap_Based_Buffer_Overflow__c_src_char_cat_32.c":31:24)
#loc37 = loc("CWE122_Heap_Based_Buffer_Overflow__c_src_char_cat_32.c":31:23)
#loc38 = loc("CWE122_Heap_Based_Buffer_Overflow__c_src_char_cat_32.c":33:16)
#loc39 = loc("CWE122_Heap_Based_Buffer_Overflow__c_src_char_cat_32.c":33:22)
#loc40 = loc("CWE122_Heap_Based_Buffer_Overflow__c_src_char_cat_32.c":33:27)
#loc41 = loc("CWE122_Heap_Based_Buffer_Overflow__c_src_char_cat_32.c":33:31)
#loc42 = loc("CWE122_Heap_Based_Buffer_Overflow__c_src_char_cat_32.c":33:9)
#loc43 = loc("CWE122_Heap_Based_Buffer_Overflow__c_src_char_cat_32.c":33:32)
#loc44 = loc("CWE122_Heap_Based_Buffer_Overflow__c_src_char_cat_32.c":34:23)
#loc45 = loc("CWE122_Heap_Based_Buffer_Overflow__c_src_char_cat_32.c":34:9)
#loc46 = loc("CWE122_Heap_Based_Buffer_Overflow__c_src_char_cat_32.c":34:14)
#loc47 = loc("CWE122_Heap_Based_Buffer_Overflow__c_src_char_cat_32.c":34:18)
#loc48 = loc("CWE122_Heap_Based_Buffer_Overflow__c_src_char_cat_32.c":34:19)
#loc49 = loc("CWE122_Heap_Based_Buffer_Overflow__c_src_char_cat_32.c":35:21)
#loc50 = loc("CWE122_Heap_Based_Buffer_Overflow__c_src_char_cat_32.c":35:10)
#loc51 = loc("CWE122_Heap_Based_Buffer_Overflow__c_src_char_cat_32.c":35:9)
#loc52 = loc("CWE122_Heap_Based_Buffer_Overflow__c_src_char_cat_32.c":37:5)
#loc53 = loc("CWE122_Heap_Based_Buffer_Overflow__c_src_char_cat_32.c":46:5)
#loc54 = loc("CWE122_Heap_Based_Buffer_Overflow__c_src_char_cat_32.c":38:9)
#loc55 = loc("CWE122_Heap_Based_Buffer_Overflow__c_src_char_cat_32.c":38:24)
#loc56 = loc("CWE122_Heap_Based_Buffer_Overflow__c_src_char_cat_32.c":38:23)
#loc57 = loc("CWE122_Heap_Based_Buffer_Overflow__c_src_char_cat_32.c":39:9)
#loc58 = loc("CWE122_Heap_Based_Buffer_Overflow__c_src_char_cat_32.c":45:9)
#loc59 = loc("CWE122_Heap_Based_Buffer_Overflow__c_src_char_cat_32.c":40:13)
#loc60 = loc("CWE122_Heap_Based_Buffer_Overflow__c_src_char_cat_32.c":40:29)
#loc61 = loc("CWE122_Heap_Based_Buffer_Overflow__c_src_char_cat_32.c":42:13)
#loc62 = loc("CWE122_Heap_Based_Buffer_Overflow__c_src_char_cat_32.c":42:20)
#loc63 = loc("CWE122_Heap_Based_Buffer_Overflow__c_src_char_cat_32.c":42:26)
#loc64 = loc("CWE122_Heap_Based_Buffer_Overflow__c_src_char_cat_32.c":43:23)
#loc65 = loc("CWE122_Heap_Based_Buffer_Overflow__c_src_char_cat_32.c":43:13)
#loc66 = loc("CWE122_Heap_Based_Buffer_Overflow__c_src_char_cat_32.c":44:13)
#loc67 = loc("CWE122_Heap_Based_Buffer_Overflow__c_src_char_cat_32.c":44:18)
#loc68 = loc("CWE122_Heap_Based_Buffer_Overflow__c_src_char_cat_32.c":80:1)
#loc69 = loc("CWE122_Heap_Based_Buffer_Overflow__c_src_char_cat_32.c":83:1)
#loc70 = loc("CWE122_Heap_Based_Buffer_Overflow__c_src_char_cat_32.c":82:5)
#loc71 = loc("CWE122_Heap_Based_Buffer_Overflow__c_src_char_cat_32.c":82:13)
#loc72 = loc("/usr/include/stdlib.h":575:1)
#loc73 = loc("/usr/include/stdlib.h":575:41)
#loc74 = loc("/usr/include/time.h":76:1)
#loc75 = loc("/usr/include/time.h":76:38)
#loc76 = loc("CWE122_Heap_Based_Buffer_Overflow__c_src_char_cat_32.c":99:15)
#loc77 = loc("CWE122_Heap_Based_Buffer_Overflow__c_src_char_cat_32.c":101:15)
#loc78 = loc("CWE122_Heap_Based_Buffer_Overflow__c_src_char_cat_32.c":104:15)
#loc79 = loc("CWE122_Heap_Based_Buffer_Overflow__c_src_char_cat_32.c":106:15)
#loc80 = loc("CWE122_Heap_Based_Buffer_Overflow__c_src_char_cat_32.c":94:1)
#loc81 = loc("CWE122_Heap_Based_Buffer_Overflow__c_src_char_cat_32.c":109:1)
#loc86 = loc("CWE122_Heap_Based_Buffer_Overflow__c_src_char_cat_32.c":95:1)
#loc87 = loc("CWE122_Heap_Based_Buffer_Overflow__c_src_char_cat_32.c":97:27)
#loc88 = loc("CWE122_Heap_Based_Buffer_Overflow__c_src_char_cat_32.c":97:22)
#loc89 = loc("CWE122_Heap_Based_Buffer_Overflow__c_src_char_cat_32.c":97:5)
#loc90 = loc("CWE122_Heap_Based_Buffer_Overflow__c_src_char_cat_32.c":99:5)
#loc91 = loc("CWE122_Heap_Based_Buffer_Overflow__c_src_char_cat_32.c":100:5)
#loc92 = loc("CWE122_Heap_Based_Buffer_Overflow__c_src_char_cat_32.c":100:63)
#loc93 = loc("CWE122_Heap_Based_Buffer_Overflow__c_src_char_cat_32.c":101:5)
#loc94 = loc("CWE122_Heap_Based_Buffer_Overflow__c_src_char_cat_32.c":104:5)
#loc95 = loc("CWE122_Heap_Based_Buffer_Overflow__c_src_char_cat_32.c":105:5)
#loc96 = loc("CWE122_Heap_Based_Buffer_Overflow__c_src_char_cat_32.c":105:62)
#loc97 = loc("CWE122_Heap_Based_Buffer_Overflow__c_src_char_cat_32.c":106:5)
#loc98 = loc("CWE122_Heap_Based_Buffer_Overflow__c_src_char_cat_32.c":108:12)
#loc99 = loc("CWE122_Heap_Based_Buffer_Overflow__c_src_char_cat_32.c":108:5)
#loc100 = loc("CWE122_Heap_Based_Buffer_Overflow__c_src_char_cat_32.c":54:1)
#loc101 = loc("CWE122_Heap_Based_Buffer_Overflow__c_src_char_cat_32.c":78:1)
#loc102 = loc("CWE122_Heap_Based_Buffer_Overflow__c_src_char_cat_32.c":56:5)
#loc103 = loc("CWE122_Heap_Based_Buffer_Overflow__c_src_char_cat_32.c":56:12)
#loc104 = loc("CWE122_Heap_Based_Buffer_Overflow__c_src_char_cat_32.c":57:5)
#loc105 = loc("CWE122_Heap_Based_Buffer_Overflow__c_src_char_cat_32.c":57:25)
#loc106 = loc("CWE122_Heap_Based_Buffer_Overflow__c_src_char_cat_32.c":58:5)
#loc107 = loc("CWE122_Heap_Based_Buffer_Overflow__c_src_char_cat_32.c":58:25)
#loc108 = loc("CWE122_Heap_Based_Buffer_Overflow__c_src_char_cat_32.c":59:20)
#loc109 = loc("CWE122_Heap_Based_Buffer_Overflow__c_src_char_cat_32.c":59:27)
#loc110 = loc("CWE122_Heap_Based_Buffer_Overflow__c_src_char_cat_32.c":59:31)
#loc111 = loc("CWE122_Heap_Based_Buffer_Overflow__c_src_char_cat_32.c":59:42)
#loc112 = loc("CWE122_Heap_Based_Buffer_Overflow__c_src_char_cat_32.c":59:43)
#loc113 = loc("CWE122_Heap_Based_Buffer_Overflow__c_src_char_cat_32.c":59:5)
#loc114 = loc("CWE122_Heap_Based_Buffer_Overflow__c_src_char_cat_32.c":60:5)
#loc115 = loc("CWE122_Heap_Based_Buffer_Overflow__c_src_char_cat_32.c":60:33)
#loc116 = loc("CWE122_Heap_Based_Buffer_Overflow__c_src_char_cat_32.c":60:9)
#loc117 = loc("CWE122_Heap_Based_Buffer_Overflow__c_src_char_cat_32.c":60:17)
#loc118 = loc("CWE122_Heap_Based_Buffer_Overflow__c_src_char_cat_32.c":60:23)
#loc119 = loc("CWE122_Heap_Based_Buffer_Overflow__c_src_char_cat_32.c":60:24)
#loc120 = loc("CWE122_Heap_Based_Buffer_Overflow__c_src_char_cat_32.c":60:30)
#loc121 = loc("CWE122_Heap_Based_Buffer_Overflow__c_src_char_cat_32.c":60:29)
#loc122 = loc("CWE122_Heap_Based_Buffer_Overflow__c_src_char_cat_32.c":61:5)
#loc123 = loc("CWE122_Heap_Based_Buffer_Overflow__c_src_char_cat_32.c":67:5)
#loc124 = loc("CWE122_Heap_Based_Buffer_Overflow__c_src_char_cat_32.c":62:9)
#loc125 = loc("CWE122_Heap_Based_Buffer_Overflow__c_src_char_cat_32.c":62:24)
#loc126 = loc("CWE122_Heap_Based_Buffer_Overflow__c_src_char_cat_32.c":62:23)
#loc127 = loc("CWE122_Heap_Based_Buffer_Overflow__c_src_char_cat_32.c":64:16)
#loc128 = loc("CWE122_Heap_Based_Buffer_Overflow__c_src_char_cat_32.c":64:22)
#loc129 = loc("CWE122_Heap_Based_Buffer_Overflow__c_src_char_cat_32.c":64:27)
#loc130 = loc("CWE122_Heap_Based_Buffer_Overflow__c_src_char_cat_32.c":64:30)
#loc131 = loc("CWE122_Heap_Based_Buffer_Overflow__c_src_char_cat_32.c":64:9)
#loc132 = loc("CWE122_Heap_Based_Buffer_Overflow__c_src_char_cat_32.c":64:31)
#loc133 = loc("CWE122_Heap_Based_Buffer_Overflow__c_src_char_cat_32.c":65:22)
#loc134 = loc("CWE122_Heap_Based_Buffer_Overflow__c_src_char_cat_32.c":65:9)
#loc135 = loc("CWE122_Heap_Based_Buffer_Overflow__c_src_char_cat_32.c":65:14)
#loc136 = loc("CWE122_Heap_Based_Buffer_Overflow__c_src_char_cat_32.c":65:17)
#loc137 = loc("CWE122_Heap_Based_Buffer_Overflow__c_src_char_cat_32.c":65:18)
#loc138 = loc("CWE122_Heap_Based_Buffer_Overflow__c_src_char_cat_32.c":66:21)
#loc139 = loc("CWE122_Heap_Based_Buffer_Overflow__c_src_char_cat_32.c":66:10)
#loc140 = loc("CWE122_Heap_Based_Buffer_Overflow__c_src_char_cat_32.c":66:9)
#loc141 = loc("CWE122_Heap_Based_Buffer_Overflow__c_src_char_cat_32.c":68:5)
#loc142 = loc("CWE122_Heap_Based_Buffer_Overflow__c_src_char_cat_32.c":77:5)
#loc143 = loc("CWE122_Heap_Based_Buffer_Overflow__c_src_char_cat_32.c":69:9)
#loc144 = loc("CWE122_Heap_Based_Buffer_Overflow__c_src_char_cat_32.c":69:24)
#loc145 = loc("CWE122_Heap_Based_Buffer_Overflow__c_src_char_cat_32.c":69:23)
#loc146 = loc("CWE122_Heap_Based_Buffer_Overflow__c_src_char_cat_32.c":70:9)
#loc147 = loc("CWE122_Heap_Based_Buffer_Overflow__c_src_char_cat_32.c":76:9)
#loc148 = loc("CWE122_Heap_Based_Buffer_Overflow__c_src_char_cat_32.c":71:13)
#loc149 = loc("CWE122_Heap_Based_Buffer_Overflow__c_src_char_cat_32.c":71:29)
#loc150 = loc("CWE122_Heap_Based_Buffer_Overflow__c_src_char_cat_32.c":73:13)
#loc151 = loc("CWE122_Heap_Based_Buffer_Overflow__c_src_char_cat_32.c":73:20)
#loc152 = loc("CWE122_Heap_Based_Buffer_Overflow__c_src_char_cat_32.c":73:26)
#loc153 = loc("CWE122_Heap_Based_Buffer_Overflow__c_src_char_cat_32.c":74:23)
#loc154 = loc("CWE122_Heap_Based_Buffer_Overflow__c_src_char_cat_32.c":74:13)
#loc155 = loc("CWE122_Heap_Based_Buffer_Overflow__c_src_char_cat_32.c":75:13)
#loc156 = loc("CWE122_Heap_Based_Buffer_Overflow__c_src_char_cat_32.c":75:18)
#loc157 = loc(fused[#loc1, #loc2])
#loc158 = loc(fused[#loc3, #loc4])
#loc159 = loc(fused[#loc5, #loc6])
#loc160 = loc(fused[#loc7, #loc8])
#loc161 = loc(fused[#loc9, #loc10])
#loc162 = loc(fused[#loc11, #loc12])
#loc163 = loc(fused[#loc13, #loc14])
#loc164 = loc(fused[#loc15, #loc16])
#loc165 = loc(fused[#loc17, #loc18])
#loc166 = loc(fused[#loc21, #loc22])
#loc167 = loc(fused[#loc20, #loc22])
#loc168 = loc(fused[#loc19, #loc23])
#loc169 = loc(fused[#loc24, #loc23])
#loc170 = loc(fused[#loc25, #loc26])
#loc171 = loc(fused[#loc27, #loc28])
#loc172 = loc(fused[#loc29, #loc26])
#loc173 = loc(fused[#loc33, #loc34])
#loc174 = loc(fused[#loc35, #loc36])
#loc175 = loc(fused[#loc42, #loc43])
#loc176 = loc(fused[#loc45, #loc44])
#loc177 = loc(fused[#loc51, #loc49])
#loc178 = loc(fused[#loc52, #loc53])
#loc179 = loc(fused[#loc54, #loc55])
#loc180 = loc(fused[#loc57, #loc58])
#loc181 = loc(fused[#loc59, #loc60])
#loc182 = loc(fused[#loc68, #loc69])
#loc183 = loc(fused[#loc70, #loc71])
#loc184 = loc(fused[#loc72, #loc73])
#loc185 = loc(fused[#loc74, #loc75])
#loc186 = loc(fused[#loc80, #loc81])
#loc189 = loc(fused[#loc91, #loc92])
#loc190 = loc(fused[#loc95, #loc96])
#loc191 = loc(fused[#loc99, #loc98])
#loc192 = loc(fused[#loc100, #loc101])
#loc193 = loc(fused[#loc102, #loc103])
#loc194 = loc(fused[#loc104, #loc105])
#loc195 = loc(fused[#loc106, #loc107])
#loc196 = loc(fused[#loc110, #loc111])
#loc197 = loc(fused[#loc109, #loc111])
#loc198 = loc(fused[#loc108, #loc112])
#loc199 = loc(fused[#loc113, #loc112])
#loc200 = loc(fused[#loc114, #loc115])
#loc201 = loc(fused[#loc116, #loc117])
#loc202 = loc(fused[#loc118, #loc115])
#loc203 = loc(fused[#loc122, #loc123])
#loc204 = loc(fused[#loc124, #loc125])
#loc205 = loc(fused[#loc131, #loc132])
#loc206 = loc(fused[#loc134, #loc133])
#loc207 = loc(fused[#loc140, #loc138])
#loc208 = loc(fused[#loc141, #loc142])
#loc209 = loc(fused[#loc143, #loc144])
#loc210 = loc(fused[#loc146, #loc147])
#loc211 = loc(fused[#loc148, #loc149])
