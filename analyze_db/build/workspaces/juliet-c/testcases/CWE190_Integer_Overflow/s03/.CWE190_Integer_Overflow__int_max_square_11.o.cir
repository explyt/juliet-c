!s32i = !cir.int<s, 32>
!s64i = !cir.int<s, 64>
!s8i = !cir.int<s, 8>
#false = #cir.bool<false> : !cir.bool
#fn_attr = #cir<extra({inline = #cir.inline<no>, nothrow = #cir.nothrow, optnone = #cir.optnone, uwtable = #cir.uwtable<async>})>
#fn_attr1 = #cir<extra({nothrow = #cir.nothrow})>
#true = #cir.bool<true> : !cir.bool
module @"/workspaces/juliet-c/testcases/CWE190_Integer_Overflow/s03/CWE190_Integer_Overflow__int_max_square_11.c" attributes {cir.lang = #cir.lang<c>, cir.sob = #cir.signed_overflow_behavior<undefined>, cir.triple = "x86_64-unknown-linux-gnu", cir.type_size_info = #cir.type_size_info<char = 8, int = 32, size_t = 64>, cir.uwtable = #cir.uwtable<async>, dlti.dl_spec = #dlti.dl_spec<i64 = dense<64> : vector<2xi64>, f80 = dense<128> : vector<2xi64>, i128 = dense<128> : vector<2xi64>, !llvm.ptr<272> = dense<64> : vector<4xi64>, f64 = dense<64> : vector<2xi64>, !llvm.ptr<271> = dense<32> : vector<4xi64>, f128 = dense<128> : vector<2xi64>, i16 = dense<16> : vector<2xi64>, i8 = dense<8> : vector<2xi64>, f16 = dense<16> : vector<2xi64>, !llvm.ptr<270> = dense<32> : vector<4xi64>, i32 = dense<32> : vector<2xi64>, i1 = dense<8> : vector<2xi64>, !llvm.ptr = dense<64> : vector<4xi64>, "dlti.mangling_mode" = "e", "dlti.endianness" = "little", "dlti.stack_alignment" = 128 : i64>} {
  cir.func no_proto private @globalReturnsTrue(...) -> !s32i loc(#loc179)
  cir.func private @printIntLine(!s32i) loc(#loc180)
  cir.func no_proto @CWE190_Integer_Overflow__int_max_square_11_bad() extra(#fn_attr) {
    %0 = cir.alloca !s32i, !cir.ptr<!s32i>, ["data"] {alignment = 4 : i64} loc(#loc182)
    %1 = cir.const #cir.int<0> : !s32i loc(#loc9)
    cir.store %1, %0 : !s32i, !cir.ptr<!s32i> loc(#loc183)
    cir.scope {
      %2 = cir.get_global @globalReturnsTrue : !cir.ptr<!cir.func<(...) -> !s32i>> loc(#loc185)
      %3 = cir.cast(bitcast, %2 : !cir.ptr<!cir.func<(...) -> !s32i>>), !cir.ptr<!cir.func<() -> !s32i>> loc(#loc185)
      %4 = cir.call %3() : (!cir.ptr<!cir.func<() -> !s32i>>) -> !s32i loc(#loc13)
      %5 = cir.cast(int_to_bool, %4 : !s32i), !cir.bool loc(#loc13)
      cir.if %5 {
        %6 = cir.const #cir.int<2147483647> : !s32i loc(#loc16)
        cir.store %6, %0 : !s32i, !cir.ptr<!s32i> loc(#loc187)
      } loc(#loc186)
    } loc(#loc184)
    cir.scope {
      %2 = cir.get_global @globalReturnsTrue : !cir.ptr<!cir.func<(...) -> !s32i>> loc(#loc189)
      %3 = cir.cast(bitcast, %2 : !cir.ptr<!cir.func<(...) -> !s32i>>), !cir.ptr<!cir.func<() -> !s32i>> loc(#loc189)
      %4 = cir.call %3() : (!cir.ptr<!cir.func<() -> !s32i>>) -> !s32i loc(#loc20)
      %5 = cir.cast(int_to_bool, %4 : !s32i), !cir.bool loc(#loc20)
      cir.if %5 {
        cir.scope {
          %6 = cir.alloca !s32i, !cir.ptr<!s32i>, ["result", init] {alignment = 4 : i64} loc(#loc192)
          %7 = cir.load %0 : !cir.ptr<!s32i>, !s32i loc(#loc27)
          %8 = cir.load %0 : !cir.ptr<!s32i>, !s32i loc(#loc26)
          %9 = cir.binop(mul, %7, %8) nsw : !s32i loc(#loc27)
          cir.store %9, %6 : !s32i, !cir.ptr<!s32i> loc(#loc192)
          %10 = cir.load %6 : !cir.ptr<!s32i>, !s32i loc(#loc28)
          cir.call @printIntLine(%10) : (!s32i) -> () loc(#loc29)
        } loc(#loc191)
      } loc(#loc190)
    } loc(#loc188)
    cir.return loc(#loc6)
  } loc(#loc181)
  cir.func no_proto @CWE190_Integer_Overflow__int_max_square_11_good() extra(#fn_attr) {
    %0 = cir.get_global @goodB2G1 : !cir.ptr<!cir.func<()>> loc(#loc194)
    cir.call %0() : (!cir.ptr<!cir.func<()>>) -> () loc(#loc32)
    %1 = cir.get_global @goodB2G2 : !cir.ptr<!cir.func<()>> loc(#loc195)
    cir.call %1() : (!cir.ptr<!cir.func<()>>) -> () loc(#loc34)
    %2 = cir.get_global @goodG2B1 : !cir.ptr<!cir.func<()>> loc(#loc196)
    cir.call %2() : (!cir.ptr<!cir.func<()>>) -> () loc(#loc36)
    %3 = cir.get_global @goodG2B2 : !cir.ptr<!cir.func<()>> loc(#loc197)
    cir.call %3() : (!cir.ptr<!cir.func<()>>) -> () loc(#loc38)
    cir.return loc(#loc31)
  } loc(#loc193)
  cir.func no_proto private @globalReturnsFalse(...) -> !s32i loc(#loc198)
  cir.func private @printLine(!cir.ptr<!s8i>) loc(#loc199)
  cir.global "private" constant cir_private dsolocal @".str" = #cir.const_array<"Benign, fixed string\00" : !cir.array<!s8i x 21>> : !cir.array<!s8i x 21> {alignment = 1 : i64} loc(#loc44)
  cir.func private @sqrt(!cir.double) -> !cir.double extra(#fn_attr1) loc(#loc45)
  cir.global "private" constant cir_private dsolocal @".str.1" = #cir.const_array<"data value is too large to perform arithmetic safely.\00" : !cir.array<!s8i x 54>> : !cir.array<!s8i x 54> {alignment = 1 : i64} loc(#loc46)
  cir.func no_proto internal private @goodB2G1() extra(#fn_attr) {
    %0 = cir.alloca !s32i, !cir.ptr<!s32i>, ["data"] {alignment = 4 : i64} loc(#loc201)
    %1 = cir.const #cir.int<0> : !s32i loc(#loc51)
    cir.store %1, %0 : !s32i, !cir.ptr<!s32i> loc(#loc202)
    cir.scope {
      %2 = cir.get_global @globalReturnsTrue : !cir.ptr<!cir.func<(...) -> !s32i>> loc(#loc204)
      %3 = cir.cast(bitcast, %2 : !cir.ptr<!cir.func<(...) -> !s32i>>), !cir.ptr<!cir.func<() -> !s32i>> loc(#loc204)
      %4 = cir.call %3() : (!cir.ptr<!cir.func<() -> !s32i>>) -> !s32i loc(#loc55)
      %5 = cir.cast(int_to_bool, %4 : !s32i), !cir.bool loc(#loc55)
      cir.if %5 {
        %6 = cir.const #cir.int<2147483647> : !s32i loc(#loc58)
        cir.store %6, %0 : !s32i, !cir.ptr<!s32i> loc(#loc206)
      } loc(#loc205)
    } loc(#loc203)
    cir.scope {
      %2 = cir.get_global @globalReturnsFalse : !cir.ptr<!cir.func<(...) -> !s32i>> loc(#loc208)
      %3 = cir.cast(bitcast, %2 : !cir.ptr<!cir.func<(...) -> !s32i>>), !cir.ptr<!cir.func<() -> !s32i>> loc(#loc208)
      %4 = cir.call %3() : (!cir.ptr<!cir.func<() -> !s32i>>) -> !s32i loc(#loc62)
      %5 = cir.cast(int_to_bool, %4 : !s32i), !cir.bool loc(#loc62)
      cir.if %5 {
        %6 = cir.get_global @".str" : !cir.ptr<!cir.array<!s8i x 21>> loc(#loc44)
        %7 = cir.cast(array_to_ptrdecay, %6 : !cir.ptr<!cir.array<!s8i x 21>>), !cir.ptr<!s8i> loc(#loc44)
        cir.call @printLine(%7) : (!cir.ptr<!s8i>) -> () loc(#loc67)
      } else {
        cir.scope {
          %6 = cir.load %0 : !cir.ptr<!s32i>, !s32i loc(#loc70)
          %7 = cir.const #cir.int<2147483647> : !s32i loc(#loc71)
          %8 = cir.unary(minus, %7) nsw : !s32i, !s32i loc(#loc71)
          %9 = cir.const #cir.int<1> : !s32i loc(#loc71)
          %10 = cir.binop(sub, %8, %9) nsw : !s32i loc(#loc71)
          %11 = cir.cmp(gt, %6, %10) : !s32i, !cir.bool loc(#loc211)
          %12 = cir.ternary(%11, true {
            %13 = cir.load %0 : !cir.ptr<!s32i>, !s32i loc(#loc73)
            %14 = cir.abs %13 poison : !s32i loc(#loc74)
            %15 = cir.cast(integral, %14 : !s32i), !s64i loc(#loc74)
            %16 = cir.get_global @sqrt : !cir.ptr<!cir.func<(!cir.double) -> !cir.double>> loc(#loc75)
            %17 = cir.const #cir.int<2147483647> : !s32i loc(#loc76)
            %18 = cir.cast(int_to_float, %17 : !s32i), !cir.double loc(#loc76)
            %19 = cir.call @sqrt(%18) : (!cir.double) -> !cir.double extra(#fn_attr1) loc(#loc75)
            %20 = cir.cast(float_to_int, %19 : !cir.double), !s64i loc(#loc75)
            %21 = cir.cmp(lt, %15, %20) : !s64i, !cir.bool loc(#loc212)
            %22 = cir.ternary(%21, true {
              %23 = cir.const #true loc(#loc72)
              cir.yield %23 : !cir.bool loc(#loc72)
            }, false {
              %23 = cir.const #false loc(#loc72)
              cir.yield %23 : !cir.bool loc(#loc72)
            }) : (!cir.bool) -> !cir.bool loc(#loc72)
            cir.yield %22 : !cir.bool loc(#loc72)
          }, false {
            %13 = cir.const #false loc(#loc72)
            cir.yield %13 : !cir.bool loc(#loc72)
          }) : (!cir.bool) -> !cir.bool loc(#loc72)
          cir.if %12 {
            %13 = cir.alloca !s32i, !cir.ptr<!s32i>, ["result", init] {alignment = 4 : i64} loc(#loc214)
            %14 = cir.load %0 : !cir.ptr<!s32i>, !s32i loc(#loc83)
            %15 = cir.load %0 : !cir.ptr<!s32i>, !s32i loc(#loc82)
            %16 = cir.binop(mul, %14, %15) nsw : !s32i loc(#loc83)
            cir.store %16, %13 : !s32i, !cir.ptr<!s32i> loc(#loc214)
            %17 = cir.load %13 : !cir.ptr<!s32i>, !s32i loc(#loc84)
            cir.call @printIntLine(%17) : (!s32i) -> () loc(#loc85)
          } else {
            %13 = cir.get_global @".str.1" : !cir.ptr<!cir.array<!s8i x 54>> loc(#loc46)
            %14 = cir.cast(array_to_ptrdecay, %13 : !cir.ptr<!cir.array<!s8i x 54>>), !cir.ptr<!s8i> loc(#loc46)
            cir.call @printLine(%14) : (!cir.ptr<!s8i>) -> () loc(#loc86)
          } loc(#loc213)
        } loc(#loc210)
      } loc(#loc209)
    } loc(#loc207)
    cir.return loc(#loc48)
  } loc(#loc200)
  cir.func no_proto internal private @goodB2G2() extra(#fn_attr) {
    %0 = cir.alloca !s32i, !cir.ptr<!s32i>, ["data"] {alignment = 4 : i64} loc(#loc216)
    %1 = cir.const #cir.int<0> : !s32i loc(#loc91)
    cir.store %1, %0 : !s32i, !cir.ptr<!s32i> loc(#loc217)
    cir.scope {
      %2 = cir.get_global @globalReturnsTrue : !cir.ptr<!cir.func<(...) -> !s32i>> loc(#loc219)
      %3 = cir.cast(bitcast, %2 : !cir.ptr<!cir.func<(...) -> !s32i>>), !cir.ptr<!cir.func<() -> !s32i>> loc(#loc219)
      %4 = cir.call %3() : (!cir.ptr<!cir.func<() -> !s32i>>) -> !s32i loc(#loc95)
      %5 = cir.cast(int_to_bool, %4 : !s32i), !cir.bool loc(#loc95)
      cir.if %5 {
        %6 = cir.const #cir.int<2147483647> : !s32i loc(#loc98)
        cir.store %6, %0 : !s32i, !cir.ptr<!s32i> loc(#loc221)
      } loc(#loc220)
    } loc(#loc218)
    cir.scope {
      %2 = cir.get_global @globalReturnsTrue : !cir.ptr<!cir.func<(...) -> !s32i>> loc(#loc223)
      %3 = cir.cast(bitcast, %2 : !cir.ptr<!cir.func<(...) -> !s32i>>), !cir.ptr<!cir.func<() -> !s32i>> loc(#loc223)
      %4 = cir.call %3() : (!cir.ptr<!cir.func<() -> !s32i>>) -> !s32i loc(#loc102)
      %5 = cir.cast(int_to_bool, %4 : !s32i), !cir.bool loc(#loc102)
      cir.if %5 {
        cir.scope {
          %6 = cir.load %0 : !cir.ptr<!s32i>, !s32i loc(#loc107)
          %7 = cir.const #cir.int<2147483647> : !s32i loc(#loc108)
          %8 = cir.unary(minus, %7) nsw : !s32i, !s32i loc(#loc108)
          %9 = cir.const #cir.int<1> : !s32i loc(#loc108)
          %10 = cir.binop(sub, %8, %9) nsw : !s32i loc(#loc108)
          %11 = cir.cmp(gt, %6, %10) : !s32i, !cir.bool loc(#loc226)
          %12 = cir.ternary(%11, true {
            %13 = cir.load %0 : !cir.ptr<!s32i>, !s32i loc(#loc110)
            %14 = cir.abs %13 poison : !s32i loc(#loc111)
            %15 = cir.cast(integral, %14 : !s32i), !s64i loc(#loc111)
            %16 = cir.get_global @sqrt : !cir.ptr<!cir.func<(!cir.double) -> !cir.double>> loc(#loc112)
            %17 = cir.const #cir.int<2147483647> : !s32i loc(#loc113)
            %18 = cir.cast(int_to_float, %17 : !s32i), !cir.double loc(#loc113)
            %19 = cir.call @sqrt(%18) : (!cir.double) -> !cir.double extra(#fn_attr1) loc(#loc112)
            %20 = cir.cast(float_to_int, %19 : !cir.double), !s64i loc(#loc112)
            %21 = cir.cmp(lt, %15, %20) : !s64i, !cir.bool loc(#loc227)
            %22 = cir.ternary(%21, true {
              %23 = cir.const #true loc(#loc109)
              cir.yield %23 : !cir.bool loc(#loc109)
            }, false {
              %23 = cir.const #false loc(#loc109)
              cir.yield %23 : !cir.bool loc(#loc109)
            }) : (!cir.bool) -> !cir.bool loc(#loc109)
            cir.yield %22 : !cir.bool loc(#loc109)
          }, false {
            %13 = cir.const #false loc(#loc109)
            cir.yield %13 : !cir.bool loc(#loc109)
          }) : (!cir.bool) -> !cir.bool loc(#loc109)
          cir.if %12 {
            %13 = cir.alloca !s32i, !cir.ptr<!s32i>, ["result", init] {alignment = 4 : i64} loc(#loc229)
            %14 = cir.load %0 : !cir.ptr<!s32i>, !s32i loc(#loc120)
            %15 = cir.load %0 : !cir.ptr<!s32i>, !s32i loc(#loc119)
            %16 = cir.binop(mul, %14, %15) nsw : !s32i loc(#loc120)
            cir.store %16, %13 : !s32i, !cir.ptr<!s32i> loc(#loc229)
            %17 = cir.load %13 : !cir.ptr<!s32i>, !s32i loc(#loc121)
            cir.call @printIntLine(%17) : (!s32i) -> () loc(#loc122)
          } else {
            %13 = cir.get_global @".str.1" : !cir.ptr<!cir.array<!s8i x 54>> loc(#loc123)
            %14 = cir.cast(array_to_ptrdecay, %13 : !cir.ptr<!cir.array<!s8i x 54>>), !cir.ptr<!s8i> loc(#loc123)
            cir.call @printLine(%14) : (!cir.ptr<!s8i>) -> () loc(#loc124)
          } loc(#loc228)
        } loc(#loc225)
      } loc(#loc224)
    } loc(#loc222)
    cir.return loc(#loc88)
  } loc(#loc215)
  cir.func no_proto internal private @goodG2B1() extra(#fn_attr) {
    %0 = cir.alloca !s32i, !cir.ptr<!s32i>, ["data"] {alignment = 4 : i64} loc(#loc231)
    %1 = cir.const #cir.int<0> : !s32i loc(#loc129)
    cir.store %1, %0 : !s32i, !cir.ptr<!s32i> loc(#loc232)
    cir.scope {
      %2 = cir.get_global @globalReturnsFalse : !cir.ptr<!cir.func<(...) -> !s32i>> loc(#loc234)
      %3 = cir.cast(bitcast, %2 : !cir.ptr<!cir.func<(...) -> !s32i>>), !cir.ptr<!cir.func<() -> !s32i>> loc(#loc234)
      %4 = cir.call %3() : (!cir.ptr<!cir.func<() -> !s32i>>) -> !s32i loc(#loc133)
      %5 = cir.cast(int_to_bool, %4 : !s32i), !cir.bool loc(#loc133)
      cir.if %5 {
        %6 = cir.get_global @".str" : !cir.ptr<!cir.array<!s8i x 21>> loc(#loc138)
        %7 = cir.cast(array_to_ptrdecay, %6 : !cir.ptr<!cir.array<!s8i x 21>>), !cir.ptr<!s8i> loc(#loc138)
        cir.call @printLine(%7) : (!cir.ptr<!s8i>) -> () loc(#loc139)
      } else {
        %6 = cir.const #cir.int<2> : !s32i loc(#loc140)
        cir.store %6, %0 : !s32i, !cir.ptr<!s32i> loc(#loc236)
      } loc(#loc235)
    } loc(#loc233)
    cir.scope {
      %2 = cir.get_global @globalReturnsTrue : !cir.ptr<!cir.func<(...) -> !s32i>> loc(#loc238)
      %3 = cir.cast(bitcast, %2 : !cir.ptr<!cir.func<(...) -> !s32i>>), !cir.ptr<!cir.func<() -> !s32i>> loc(#loc238)
      %4 = cir.call %3() : (!cir.ptr<!cir.func<() -> !s32i>>) -> !s32i loc(#loc144)
      %5 = cir.cast(int_to_bool, %4 : !s32i), !cir.bool loc(#loc144)
      cir.if %5 {
        cir.scope {
          %6 = cir.alloca !s32i, !cir.ptr<!s32i>, ["result", init] {alignment = 4 : i64} loc(#loc241)
          %7 = cir.load %0 : !cir.ptr<!s32i>, !s32i loc(#loc151)
          %8 = cir.load %0 : !cir.ptr<!s32i>, !s32i loc(#loc150)
          %9 = cir.binop(mul, %7, %8) nsw : !s32i loc(#loc151)
          cir.store %9, %6 : !s32i, !cir.ptr<!s32i> loc(#loc241)
          %10 = cir.load %6 : !cir.ptr<!s32i>, !s32i loc(#loc152)
          cir.call @printIntLine(%10) : (!s32i) -> () loc(#loc153)
        } loc(#loc240)
      } loc(#loc239)
    } loc(#loc237)
    cir.return loc(#loc126)
  } loc(#loc230)
  cir.func no_proto internal private @goodG2B2() extra(#fn_attr) {
    %0 = cir.alloca !s32i, !cir.ptr<!s32i>, ["data"] {alignment = 4 : i64} loc(#loc243)
    %1 = cir.const #cir.int<0> : !s32i loc(#loc158)
    cir.store %1, %0 : !s32i, !cir.ptr<!s32i> loc(#loc244)
    cir.scope {
      %2 = cir.get_global @globalReturnsTrue : !cir.ptr<!cir.func<(...) -> !s32i>> loc(#loc246)
      %3 = cir.cast(bitcast, %2 : !cir.ptr<!cir.func<(...) -> !s32i>>), !cir.ptr<!cir.func<() -> !s32i>> loc(#loc246)
      %4 = cir.call %3() : (!cir.ptr<!cir.func<() -> !s32i>>) -> !s32i loc(#loc162)
      %5 = cir.cast(int_to_bool, %4 : !s32i), !cir.bool loc(#loc162)
      cir.if %5 {
        %6 = cir.const #cir.int<2> : !s32i loc(#loc165)
        cir.store %6, %0 : !s32i, !cir.ptr<!s32i> loc(#loc248)
      } loc(#loc247)
    } loc(#loc245)
    cir.scope {
      %2 = cir.get_global @globalReturnsTrue : !cir.ptr<!cir.func<(...) -> !s32i>> loc(#loc250)
      %3 = cir.cast(bitcast, %2 : !cir.ptr<!cir.func<(...) -> !s32i>>), !cir.ptr<!cir.func<() -> !s32i>> loc(#loc250)
      %4 = cir.call %3() : (!cir.ptr<!cir.func<() -> !s32i>>) -> !s32i loc(#loc169)
      %5 = cir.cast(int_to_bool, %4 : !s32i), !cir.bool loc(#loc169)
      cir.if %5 {
        cir.scope {
          %6 = cir.alloca !s32i, !cir.ptr<!s32i>, ["result", init] {alignment = 4 : i64} loc(#loc253)
          %7 = cir.load %0 : !cir.ptr<!s32i>, !s32i loc(#loc176)
          %8 = cir.load %0 : !cir.ptr<!s32i>, !s32i loc(#loc175)
          %9 = cir.binop(mul, %7, %8) nsw : !s32i loc(#loc176)
          cir.store %9, %6 : !s32i, !cir.ptr<!s32i> loc(#loc253)
          %10 = cir.load %6 : !cir.ptr<!s32i>, !s32i loc(#loc177)
          cir.call @printIntLine(%10) : (!s32i) -> () loc(#loc178)
        } loc(#loc252)
      } loc(#loc251)
    } loc(#loc249)
    cir.return loc(#loc155)
  } loc(#loc242)
} loc(#loc)
#loc = loc("/workspaces/juliet-c/testcases/CWE190_Integer_Overflow/s03/CWE190_Integer_Overflow__int_max_square_11.c":0:0)
#loc1 = loc("../../../testcasesupport/std_testcase_io.h":48:1)
#loc2 = loc("../../../testcasesupport/std_testcase_io.h":48:23)
#loc3 = loc("../../../testcasesupport/std_testcase_io.h":18:1)
#loc4 = loc("../../../testcasesupport/std_testcase_io.h":18:33)
#loc5 = loc("CWE190_Integer_Overflow__int_max_square_11.c":24:1)
#loc6 = loc("CWE190_Integer_Overflow__int_max_square_11.c":42:1)
#loc7 = loc("CWE190_Integer_Overflow__int_max_square_11.c":26:5)
#loc8 = loc("CWE190_Integer_Overflow__int_max_square_11.c":26:9)
#loc9 = loc("CWE190_Integer_Overflow__int_max_square_11.c":28:12)
#loc10 = loc("CWE190_Integer_Overflow__int_max_square_11.c":28:5)
#loc11 = loc("CWE190_Integer_Overflow__int_max_square_11.c":29:5)
#loc12 = loc("CWE190_Integer_Overflow__int_max_square_11.c":33:5)
#loc13 = loc("CWE190_Integer_Overflow__int_max_square_11.c":29:8)
#loc14 = loc("CWE190_Integer_Overflow__int_max_square_11.c":29:26)
#loc15 = loc("CWE190_Integer_Overflow__int_max_square_11.c":30:5)
#loc16 = loc("CWE190_Integer_Overflow__int_max_square_11.c":32:16)
#loc17 = loc("CWE190_Integer_Overflow__int_max_square_11.c":32:9)
#loc18 = loc("CWE190_Integer_Overflow__int_max_square_11.c":34:5)
#loc19 = loc("CWE190_Integer_Overflow__int_max_square_11.c":41:5)
#loc20 = loc("CWE190_Integer_Overflow__int_max_square_11.c":34:8)
#loc21 = loc("CWE190_Integer_Overflow__int_max_square_11.c":34:26)
#loc22 = loc("CWE190_Integer_Overflow__int_max_square_11.c":35:5)
#loc23 = loc("CWE190_Integer_Overflow__int_max_square_11.c":36:9)
#loc24 = loc("CWE190_Integer_Overflow__int_max_square_11.c":40:9)
#loc25 = loc("CWE190_Integer_Overflow__int_max_square_11.c":38:13)
#loc26 = loc("CWE190_Integer_Overflow__int_max_square_11.c":38:33)
#loc27 = loc("CWE190_Integer_Overflow__int_max_square_11.c":38:26)
#loc28 = loc("CWE190_Integer_Overflow__int_max_square_11.c":39:26)
#loc29 = loc("CWE190_Integer_Overflow__int_max_square_11.c":39:13)
#loc30 = loc("CWE190_Integer_Overflow__int_max_square_11.c":152:1)
#loc31 = loc("CWE190_Integer_Overflow__int_max_square_11.c":158:1)
#loc32 = loc("CWE190_Integer_Overflow__int_max_square_11.c":154:5)
#loc33 = loc("CWE190_Integer_Overflow__int_max_square_11.c":154:14)
#loc34 = loc("CWE190_Integer_Overflow__int_max_square_11.c":155:5)
#loc35 = loc("CWE190_Integer_Overflow__int_max_square_11.c":155:14)
#loc36 = loc("CWE190_Integer_Overflow__int_max_square_11.c":156:5)
#loc37 = loc("CWE190_Integer_Overflow__int_max_square_11.c":156:14)
#loc38 = loc("CWE190_Integer_Overflow__int_max_square_11.c":157:5)
#loc39 = loc("CWE190_Integer_Overflow__int_max_square_11.c":157:14)
#loc40 = loc("../../../testcasesupport/std_testcase_io.h":50:1)
#loc41 = loc("../../../testcasesupport/std_testcase_io.h":50:24)
#loc42 = loc("../../../testcasesupport/std_testcase_io.h":14:1)
#loc43 = loc("../../../testcasesupport/std_testcase_io.h":14:33)
#loc44 = loc("CWE190_Integer_Overflow__int_max_square_11.c":62:19)
#loc45 = loc("/usr/include/x86_64-linux-gnu/bits/mathcalls.h":143:1)
#loc46 = loc("CWE190_Integer_Overflow__int_max_square_11.c":74:23)
#loc47 = loc("CWE190_Integer_Overflow__int_max_square_11.c":49:1)
#loc48 = loc("CWE190_Integer_Overflow__int_max_square_11.c":77:1)
#loc49 = loc("CWE190_Integer_Overflow__int_max_square_11.c":51:5)
#loc50 = loc("CWE190_Integer_Overflow__int_max_square_11.c":51:9)
#loc51 = loc("CWE190_Integer_Overflow__int_max_square_11.c":53:12)
#loc52 = loc("CWE190_Integer_Overflow__int_max_square_11.c":53:5)
#loc53 = loc("CWE190_Integer_Overflow__int_max_square_11.c":54:5)
#loc54 = loc("CWE190_Integer_Overflow__int_max_square_11.c":58:5)
#loc55 = loc("CWE190_Integer_Overflow__int_max_square_11.c":54:8)
#loc56 = loc("CWE190_Integer_Overflow__int_max_square_11.c":54:26)
#loc57 = loc("CWE190_Integer_Overflow__int_max_square_11.c":55:5)
#loc58 = loc("CWE190_Integer_Overflow__int_max_square_11.c":57:16)
#loc59 = loc("CWE190_Integer_Overflow__int_max_square_11.c":57:9)
#loc60 = loc("CWE190_Integer_Overflow__int_max_square_11.c":59:5)
#loc61 = loc("CWE190_Integer_Overflow__int_max_square_11.c":76:5)
#loc62 = loc("CWE190_Integer_Overflow__int_max_square_11.c":59:8)
#loc63 = loc("CWE190_Integer_Overflow__int_max_square_11.c":59:27)
#loc64 = loc("CWE190_Integer_Overflow__int_max_square_11.c":60:5)
#loc65 = loc("CWE190_Integer_Overflow__int_max_square_11.c":63:5)
#loc66 = loc("CWE190_Integer_Overflow__int_max_square_11.c":65:5)
#loc67 = loc("CWE190_Integer_Overflow__int_max_square_11.c":62:9)
#loc68 = loc("CWE190_Integer_Overflow__int_max_square_11.c":67:9)
#loc69 = loc("CWE190_Integer_Overflow__int_max_square_11.c":75:9)
#loc70 = loc("CWE190_Integer_Overflow__int_max_square_11.c":67:13)
#loc71 = loc("CWE190_Integer_Overflow__int_max_square_11.c":67:20)
#loc72 = loc("CWE190_Integer_Overflow__int_max_square_11.c":67:28)
#loc73 = loc("CWE190_Integer_Overflow__int_max_square_11.c":67:35)
#loc74 = loc("CWE190_Integer_Overflow__int_max_square_11.c":67:31)
#loc75 = loc("CWE190_Integer_Overflow__int_max_square_11.c":67:49)
#loc76 = loc("CWE190_Integer_Overflow__int_max_square_11.c":67:62)
#loc77 = loc("CWE190_Integer_Overflow__int_max_square_11.c":67:69)
#loc78 = loc("CWE190_Integer_Overflow__int_max_square_11.c":68:9)
#loc79 = loc("CWE190_Integer_Overflow__int_max_square_11.c":71:9)
#loc80 = loc("CWE190_Integer_Overflow__int_max_square_11.c":73:9)
#loc81 = loc("CWE190_Integer_Overflow__int_max_square_11.c":69:13)
#loc82 = loc("CWE190_Integer_Overflow__int_max_square_11.c":69:33)
#loc83 = loc("CWE190_Integer_Overflow__int_max_square_11.c":69:26)
#loc84 = loc("CWE190_Integer_Overflow__int_max_square_11.c":70:26)
#loc85 = loc("CWE190_Integer_Overflow__int_max_square_11.c":70:13)
#loc86 = loc("CWE190_Integer_Overflow__int_max_square_11.c":74:13)
#loc87 = loc("CWE190_Integer_Overflow__int_max_square_11.c":80:1)
#loc88 = loc("CWE190_Integer_Overflow__int_max_square_11.c":103:1)
#loc89 = loc("CWE190_Integer_Overflow__int_max_square_11.c":82:5)
#loc90 = loc("CWE190_Integer_Overflow__int_max_square_11.c":82:9)
#loc91 = loc("CWE190_Integer_Overflow__int_max_square_11.c":84:12)
#loc92 = loc("CWE190_Integer_Overflow__int_max_square_11.c":84:5)
#loc93 = loc("CWE190_Integer_Overflow__int_max_square_11.c":85:5)
#loc94 = loc("CWE190_Integer_Overflow__int_max_square_11.c":89:5)
#loc95 = loc("CWE190_Integer_Overflow__int_max_square_11.c":85:8)
#loc96 = loc("CWE190_Integer_Overflow__int_max_square_11.c":85:26)
#loc97 = loc("CWE190_Integer_Overflow__int_max_square_11.c":86:5)
#loc98 = loc("CWE190_Integer_Overflow__int_max_square_11.c":88:16)
#loc99 = loc("CWE190_Integer_Overflow__int_max_square_11.c":88:9)
#loc100 = loc("CWE190_Integer_Overflow__int_max_square_11.c":90:5)
#loc101 = loc("CWE190_Integer_Overflow__int_max_square_11.c":102:5)
#loc102 = loc("CWE190_Integer_Overflow__int_max_square_11.c":90:8)
#loc103 = loc("CWE190_Integer_Overflow__int_max_square_11.c":90:26)
#loc104 = loc("CWE190_Integer_Overflow__int_max_square_11.c":91:5)
#loc105 = loc("CWE190_Integer_Overflow__int_max_square_11.c":93:9)
#loc106 = loc("CWE190_Integer_Overflow__int_max_square_11.c":101:9)
#loc107 = loc("CWE190_Integer_Overflow__int_max_square_11.c":93:13)
#loc108 = loc("CWE190_Integer_Overflow__int_max_square_11.c":93:20)
#loc109 = loc("CWE190_Integer_Overflow__int_max_square_11.c":93:28)
#loc110 = loc("CWE190_Integer_Overflow__int_max_square_11.c":93:35)
#loc111 = loc("CWE190_Integer_Overflow__int_max_square_11.c":93:31)
#loc112 = loc("CWE190_Integer_Overflow__int_max_square_11.c":93:49)
#loc113 = loc("CWE190_Integer_Overflow__int_max_square_11.c":93:62)
#loc114 = loc("CWE190_Integer_Overflow__int_max_square_11.c":93:69)
#loc115 = loc("CWE190_Integer_Overflow__int_max_square_11.c":94:9)
#loc116 = loc("CWE190_Integer_Overflow__int_max_square_11.c":97:9)
#loc117 = loc("CWE190_Integer_Overflow__int_max_square_11.c":99:9)
#loc118 = loc("CWE190_Integer_Overflow__int_max_square_11.c":95:13)
#loc119 = loc("CWE190_Integer_Overflow__int_max_square_11.c":95:33)
#loc120 = loc("CWE190_Integer_Overflow__int_max_square_11.c":95:26)
#loc121 = loc("CWE190_Integer_Overflow__int_max_square_11.c":96:26)
#loc122 = loc("CWE190_Integer_Overflow__int_max_square_11.c":96:13)
#loc123 = loc("CWE190_Integer_Overflow__int_max_square_11.c":100:23)
#loc124 = loc("CWE190_Integer_Overflow__int_max_square_11.c":100:13)
#loc125 = loc("CWE190_Integer_Overflow__int_max_square_11.c":106:1)
#loc126 = loc("CWE190_Integer_Overflow__int_max_square_11.c":129:1)
#loc127 = loc("CWE190_Integer_Overflow__int_max_square_11.c":108:5)
#loc128 = loc("CWE190_Integer_Overflow__int_max_square_11.c":108:9)
#loc129 = loc("CWE190_Integer_Overflow__int_max_square_11.c":110:12)
#loc130 = loc("CWE190_Integer_Overflow__int_max_square_11.c":110:5)
#loc131 = loc("CWE190_Integer_Overflow__int_max_square_11.c":111:5)
#loc132 = loc("CWE190_Integer_Overflow__int_max_square_11.c":120:5)
#loc133 = loc("CWE190_Integer_Overflow__int_max_square_11.c":111:8)
#loc134 = loc("CWE190_Integer_Overflow__int_max_square_11.c":111:27)
#loc135 = loc("CWE190_Integer_Overflow__int_max_square_11.c":112:5)
#loc136 = loc("CWE190_Integer_Overflow__int_max_square_11.c":115:5)
#loc137 = loc("CWE190_Integer_Overflow__int_max_square_11.c":117:5)
#loc138 = loc("CWE190_Integer_Overflow__int_max_square_11.c":114:19)
#loc139 = loc("CWE190_Integer_Overflow__int_max_square_11.c":114:9)
#loc140 = loc("CWE190_Integer_Overflow__int_max_square_11.c":119:16)
#loc141 = loc("CWE190_Integer_Overflow__int_max_square_11.c":119:9)
#loc142 = loc("CWE190_Integer_Overflow__int_max_square_11.c":121:5)
#loc143 = loc("CWE190_Integer_Overflow__int_max_square_11.c":128:5)
#loc144 = loc("CWE190_Integer_Overflow__int_max_square_11.c":121:8)
#loc145 = loc("CWE190_Integer_Overflow__int_max_square_11.c":121:26)
#loc146 = loc("CWE190_Integer_Overflow__int_max_square_11.c":122:5)
#loc147 = loc("CWE190_Integer_Overflow__int_max_square_11.c":123:9)
#loc148 = loc("CWE190_Integer_Overflow__int_max_square_11.c":127:9)
#loc149 = loc("CWE190_Integer_Overflow__int_max_square_11.c":125:13)
#loc150 = loc("CWE190_Integer_Overflow__int_max_square_11.c":125:33)
#loc151 = loc("CWE190_Integer_Overflow__int_max_square_11.c":125:26)
#loc152 = loc("CWE190_Integer_Overflow__int_max_square_11.c":126:26)
#loc153 = loc("CWE190_Integer_Overflow__int_max_square_11.c":126:13)
#loc154 = loc("CWE190_Integer_Overflow__int_max_square_11.c":132:1)
#loc155 = loc("CWE190_Integer_Overflow__int_max_square_11.c":150:1)
#loc156 = loc("CWE190_Integer_Overflow__int_max_square_11.c":134:5)
#loc157 = loc("CWE190_Integer_Overflow__int_max_square_11.c":134:9)
#loc158 = loc("CWE190_Integer_Overflow__int_max_square_11.c":136:12)
#loc159 = loc("CWE190_Integer_Overflow__int_max_square_11.c":136:5)
#loc160 = loc("CWE190_Integer_Overflow__int_max_square_11.c":137:5)
#loc161 = loc("CWE190_Integer_Overflow__int_max_square_11.c":141:5)
#loc162 = loc("CWE190_Integer_Overflow__int_max_square_11.c":137:8)
#loc163 = loc("CWE190_Integer_Overflow__int_max_square_11.c":137:26)
#loc164 = loc("CWE190_Integer_Overflow__int_max_square_11.c":138:5)
#loc165 = loc("CWE190_Integer_Overflow__int_max_square_11.c":140:16)
#loc166 = loc("CWE190_Integer_Overflow__int_max_square_11.c":140:9)
#loc167 = loc("CWE190_Integer_Overflow__int_max_square_11.c":142:5)
#loc168 = loc("CWE190_Integer_Overflow__int_max_square_11.c":149:5)
#loc169 = loc("CWE190_Integer_Overflow__int_max_square_11.c":142:8)
#loc170 = loc("CWE190_Integer_Overflow__int_max_square_11.c":142:26)
#loc171 = loc("CWE190_Integer_Overflow__int_max_square_11.c":143:5)
#loc172 = loc("CWE190_Integer_Overflow__int_max_square_11.c":144:9)
#loc173 = loc("CWE190_Integer_Overflow__int_max_square_11.c":148:9)
#loc174 = loc("CWE190_Integer_Overflow__int_max_square_11.c":146:13)
#loc175 = loc("CWE190_Integer_Overflow__int_max_square_11.c":146:33)
#loc176 = loc("CWE190_Integer_Overflow__int_max_square_11.c":146:26)
#loc177 = loc("CWE190_Integer_Overflow__int_max_square_11.c":147:26)
#loc178 = loc("CWE190_Integer_Overflow__int_max_square_11.c":147:13)
#loc179 = loc(fused[#loc1, #loc2])
#loc180 = loc(fused[#loc3, #loc4])
#loc181 = loc(fused[#loc5, #loc6])
#loc182 = loc(fused[#loc7, #loc8])
#loc183 = loc(fused[#loc10, #loc9])
#loc184 = loc(fused[#loc11, #loc12])
#loc185 = loc(fused[#loc13, #loc14])
#loc186 = loc(fused[#loc15, #loc12])
#loc187 = loc(fused[#loc17, #loc16])
#loc188 = loc(fused[#loc18, #loc19])
#loc189 = loc(fused[#loc20, #loc21])
#loc190 = loc(fused[#loc22, #loc19])
#loc191 = loc(fused[#loc23, #loc24])
#loc192 = loc(fused[#loc25, #loc26])
#loc193 = loc(fused[#loc30, #loc31])
#loc194 = loc(fused[#loc32, #loc33])
#loc195 = loc(fused[#loc34, #loc35])
#loc196 = loc(fused[#loc36, #loc37])
#loc197 = loc(fused[#loc38, #loc39])
#loc198 = loc(fused[#loc40, #loc41])
#loc199 = loc(fused[#loc42, #loc43])
#loc200 = loc(fused[#loc47, #loc48])
#loc201 = loc(fused[#loc49, #loc50])
#loc202 = loc(fused[#loc52, #loc51])
#loc203 = loc(fused[#loc53, #loc54])
#loc204 = loc(fused[#loc55, #loc56])
#loc205 = loc(fused[#loc57, #loc54])
#loc206 = loc(fused[#loc59, #loc58])
#loc207 = loc(fused[#loc60, #loc61])
#loc208 = loc(fused[#loc62, #loc63])
#loc209 = loc(fused[#loc64, #loc65, #loc66, #loc61])
#loc210 = loc(fused[#loc68, #loc69])
#loc211 = loc(fused[#loc70, #loc71])
#loc212 = loc(fused[#loc74, #loc77])
#loc213 = loc(fused[#loc78, #loc79, #loc80, #loc69])
#loc214 = loc(fused[#loc81, #loc82])
#loc215 = loc(fused[#loc87, #loc88])
#loc216 = loc(fused[#loc89, #loc90])
#loc217 = loc(fused[#loc92, #loc91])
#loc218 = loc(fused[#loc93, #loc94])
#loc219 = loc(fused[#loc95, #loc96])
#loc220 = loc(fused[#loc97, #loc94])
#loc221 = loc(fused[#loc99, #loc98])
#loc222 = loc(fused[#loc100, #loc101])
#loc223 = loc(fused[#loc102, #loc103])
#loc224 = loc(fused[#loc104, #loc101])
#loc225 = loc(fused[#loc105, #loc106])
#loc226 = loc(fused[#loc107, #loc108])
#loc227 = loc(fused[#loc111, #loc114])
#loc228 = loc(fused[#loc115, #loc116, #loc117, #loc106])
#loc229 = loc(fused[#loc118, #loc119])
#loc230 = loc(fused[#loc125, #loc126])
#loc231 = loc(fused[#loc127, #loc128])
#loc232 = loc(fused[#loc130, #loc129])
#loc233 = loc(fused[#loc131, #loc132])
#loc234 = loc(fused[#loc133, #loc134])
#loc235 = loc(fused[#loc135, #loc136, #loc137, #loc132])
#loc236 = loc(fused[#loc141, #loc140])
#loc237 = loc(fused[#loc142, #loc143])
#loc238 = loc(fused[#loc144, #loc145])
#loc239 = loc(fused[#loc146, #loc143])
#loc240 = loc(fused[#loc147, #loc148])
#loc241 = loc(fused[#loc149, #loc150])
#loc242 = loc(fused[#loc154, #loc155])
#loc243 = loc(fused[#loc156, #loc157])
#loc244 = loc(fused[#loc159, #loc158])
#loc245 = loc(fused[#loc160, #loc161])
#loc246 = loc(fused[#loc162, #loc163])
#loc247 = loc(fused[#loc164, #loc161])
#loc248 = loc(fused[#loc166, #loc165])
#loc249 = loc(fused[#loc167, #loc168])
#loc250 = loc(fused[#loc169, #loc170])
#loc251 = loc(fused[#loc171, #loc168])
#loc252 = loc(fused[#loc172, #loc173])
#loc253 = loc(fused[#loc174, #loc175])
