!s32i = !cir.int<s, 32>
!s8i = !cir.int<s, 8>
#fn_attr = #cir<extra({inline = #cir.inline<no>, nothrow = #cir.nothrow, optnone = #cir.optnone})>
#loc7 = loc("CWE190_Integer_Overflow__int_fgets_multiply_22b.c":25:61)
#loc8 = loc("CWE190_Integer_Overflow__int_fgets_multiply_22b.c":25:65)
#loc33 = loc("CWE190_Integer_Overflow__int_fgets_multiply_22b.c":48:66)
#loc34 = loc("CWE190_Integer_Overflow__int_fgets_multiply_22b.c":48:70)
#loc69 = loc("CWE190_Integer_Overflow__int_fgets_multiply_22b.c":74:66)
#loc70 = loc("CWE190_Integer_Overflow__int_fgets_multiply_22b.c":74:70)
#loc103 = loc("CWE190_Integer_Overflow__int_fgets_multiply_22b.c":95:65)
#loc104 = loc("CWE190_Integer_Overflow__int_fgets_multiply_22b.c":95:69)
#loc124 = loc(fused[#loc7, #loc8])
#loc134 = loc(fused[#loc33, #loc34])
#loc147 = loc(fused[#loc69, #loc70])
#loc160 = loc(fused[#loc103, #loc104])
module @"/home/ladisgin/git_proj/test_projects/juliet-c/testcases/CWE190_Integer_Overflow/s03/CWE190_Integer_Overflow__int_fgets_multiply_22b.c" attributes {cir.lang = #cir.lang<c>, cir.sob = #cir.signed_overflow_behavior<undefined>, cir.triple = "x86_64-unknown-linux-gnu", dlti.dl_spec = #dlti.dl_spec<#dlti.dl_entry<f64, dense<64> : vector<2xi64>>, #dlti.dl_entry<f16, dense<16> : vector<2xi64>>, #dlti.dl_entry<!llvm.ptr<270>, dense<32> : vector<4xi64>>, #dlti.dl_entry<!llvm.ptr<271>, dense<32> : vector<4xi64>>, #dlti.dl_entry<f128, dense<128> : vector<2xi64>>, #dlti.dl_entry<!llvm.ptr<272>, dense<64> : vector<4xi64>>, #dlti.dl_entry<i64, dense<64> : vector<2xi64>>, #dlti.dl_entry<i128, dense<128> : vector<2xi64>>, #dlti.dl_entry<f80, dense<128> : vector<2xi64>>, #dlti.dl_entry<!llvm.ptr, dense<64> : vector<4xi64>>, #dlti.dl_entry<i1, dense<8> : vector<2xi64>>, #dlti.dl_entry<i8, dense<8> : vector<2xi64>>, #dlti.dl_entry<i16, dense<16> : vector<2xi64>>, #dlti.dl_entry<i32, dense<32> : vector<2xi64>>, #dlti.dl_entry<"dlti.endianness", "little">, #dlti.dl_entry<"dlti.stack_alignment", 128 : i64>>, llvm.data_layout = "e-m:e-p270:32:32-p271:32:32-p272:64:64-i64:64-i128:128-f80:128-n8:16:32:64-S128"} {
  cir.global "private"  external @CWE190_Integer_Overflow__int_fgets_multiply_22_badGlobal : !s32i {alignment = 4 : i64} loc(#loc121)
  cir.func private  @printIntLine(!s32i) loc(#loc122)
  cir.func  @CWE190_Integer_Overflow__int_fgets_multiply_22_badSink(%arg0: !s32i loc(fused[#loc7, #loc8])) extra(#fn_attr) {
    %0 = cir.alloca !s32i, !cir.ptr<!s32i>, ["data", init] {alignment = 4 : i64} loc(#loc124)
    cir.store %arg0, %0 : !s32i, !cir.ptr<!s32i> loc(#loc9)
    cir.scope {
      %1 = cir.get_global @CWE190_Integer_Overflow__int_fgets_multiply_22_badGlobal : !cir.ptr<!s32i> loc(#loc121)
      %2 = cir.load %1 : !cir.ptr<!s32i>, !s32i loc(#loc12)
      %3 = cir.cast(int_to_bool, %2 : !s32i), !cir.bool loc(#loc12)
      cir.if %3 {
        cir.scope {
          %4 = cir.load %0 : !cir.ptr<!s32i>, !s32i loc(#loc16)
          %5 = cir.const #cir.int<0> : !s32i loc(#loc17)
          %6 = cir.cmp(gt, %4, %5) : !s32i, !s32i loc(#loc128)
          %7 = cir.cast(int_to_bool, %6 : !s32i), !cir.bool loc(#loc18)
          cir.if %7 {
            %8 = cir.alloca !s32i, !cir.ptr<!s32i>, ["result", init] {alignment = 4 : i64} loc(#loc130)
            %9 = cir.load %0 : !cir.ptr<!s32i>, !s32i loc(#loc22)
            %10 = cir.const #cir.int<2> : !s32i loc(#loc21)
            %11 = cir.binop(mul, %9, %10) nsw : !s32i loc(#loc22)
            cir.store %11, %8 : !s32i, !cir.ptr<!s32i> loc(#loc130)
            %12 = cir.load %8 : !cir.ptr<!s32i>, !s32i loc(#loc23)
            cir.call @printIntLine(%12) : (!s32i) -> () loc(#loc24)
          } loc(#loc129)
        } loc(#loc127)
      } loc(#loc126)
    } loc(#loc125)
    cir.return loc(#loc6)
  } loc(#loc123)
  cir.global "private"  external @CWE190_Integer_Overflow__int_fgets_multiply_22_goodB2G1Global : !s32i {alignment = 4 : i64} loc(#loc131)
  cir.func private  @printLine(!cir.ptr<!s8i>) loc(#loc132)
  cir.global "private"  constant internal dsolocal @".str" = #cir.const_array<"Benign, fixed string\00" : !cir.array<!s8i x 21>> : !cir.array<!s8i x 21> {alignment = 1 : i64} loc(#loc29)
  cir.global "private"  constant internal dsolocal @".str1" = #cir.const_array<"data value is too large to perform arithmetic safely.\00" : !cir.array<!s8i x 54>> : !cir.array<!s8i x 54> {alignment = 1 : i64} loc(#loc30)
  cir.func  @CWE190_Integer_Overflow__int_fgets_multiply_22_goodB2G1Sink(%arg0: !s32i loc(fused[#loc33, #loc34])) extra(#fn_attr) {
    %0 = cir.alloca !s32i, !cir.ptr<!s32i>, ["data", init] {alignment = 4 : i64} loc(#loc134)
    cir.store %arg0, %0 : !s32i, !cir.ptr<!s32i> loc(#loc35)
    cir.scope {
      %1 = cir.get_global @CWE190_Integer_Overflow__int_fgets_multiply_22_goodB2G1Global : !cir.ptr<!s32i> loc(#loc131)
      %2 = cir.load %1 : !cir.ptr<!s32i>, !s32i loc(#loc38)
      %3 = cir.cast(int_to_bool, %2 : !s32i), !cir.bool loc(#loc38)
      cir.if %3 {
        %4 = cir.get_global @".str" : !cir.ptr<!cir.array<!s8i x 21>> loc(#loc29)
        %5 = cir.cast(array_to_ptrdecay, %4 : !cir.ptr<!cir.array<!s8i x 21>>), !cir.ptr<!s8i> loc(#loc29)
        cir.call @printLine(%5) : (!cir.ptr<!s8i>) -> () loc(#loc42)
      } else {
        cir.scope {
          %4 = cir.load %0 : !cir.ptr<!s32i>, !s32i loc(#loc45)
          %5 = cir.const #cir.int<0> : !s32i loc(#loc46)
          %6 = cir.cmp(gt, %4, %5) : !s32i, !s32i loc(#loc138)
          %7 = cir.cast(int_to_bool, %6 : !s32i), !cir.bool loc(#loc47)
          cir.if %7 {
            cir.scope {
              %8 = cir.load %0 : !cir.ptr<!s32i>, !s32i loc(#loc51)
              %9 = cir.const #cir.int<2147483647> : !s32i loc(#loc52)
              %10 = cir.const #cir.int<2> : !s32i loc(#loc53)
              %11 = cir.binop(div, %9, %10) : !s32i loc(#loc141)
              %12 = cir.cmp(lt, %8, %11) : !s32i, !s32i loc(#loc142)
              %13 = cir.cast(int_to_bool, %12 : !s32i), !cir.bool loc(#loc55)
              cir.if %13 {
                %14 = cir.alloca !s32i, !cir.ptr<!s32i>, ["result", init] {alignment = 4 : i64} loc(#loc144)
                %15 = cir.load %0 : !cir.ptr<!s32i>, !s32i loc(#loc61)
                %16 = cir.const #cir.int<2> : !s32i loc(#loc60)
                %17 = cir.binop(mul, %15, %16) nsw : !s32i loc(#loc61)
                cir.store %17, %14 : !s32i, !cir.ptr<!s32i> loc(#loc144)
                %18 = cir.load %14 : !cir.ptr<!s32i>, !s32i loc(#loc62)
                cir.call @printIntLine(%18) : (!s32i) -> () loc(#loc63)
              } else {
                %14 = cir.get_global @".str1" : !cir.ptr<!cir.array<!s8i x 54>> loc(#loc30)
                %15 = cir.cast(array_to_ptrdecay, %14 : !cir.ptr<!cir.array<!s8i x 54>>), !cir.ptr<!s8i> loc(#loc30)
                cir.call @printLine(%15) : (!cir.ptr<!s8i>) -> () loc(#loc64)
              } loc(#loc143)
            } loc(#loc140)
          } loc(#loc139)
        } loc(#loc137)
      } loc(#loc136)
    } loc(#loc135)
    cir.return loc(#loc32)
  } loc(#loc133)
  cir.global "private"  external @CWE190_Integer_Overflow__int_fgets_multiply_22_goodB2G2Global : !s32i {alignment = 4 : i64} loc(#loc145)
  cir.func  @CWE190_Integer_Overflow__int_fgets_multiply_22_goodB2G2Sink(%arg0: !s32i loc(fused[#loc69, #loc70])) extra(#fn_attr) {
    %0 = cir.alloca !s32i, !cir.ptr<!s32i>, ["data", init] {alignment = 4 : i64} loc(#loc147)
    cir.store %arg0, %0 : !s32i, !cir.ptr<!s32i> loc(#loc71)
    cir.scope {
      %1 = cir.get_global @CWE190_Integer_Overflow__int_fgets_multiply_22_goodB2G2Global : !cir.ptr<!s32i> loc(#loc145)
      %2 = cir.load %1 : !cir.ptr<!s32i>, !s32i loc(#loc74)
      %3 = cir.cast(int_to_bool, %2 : !s32i), !cir.bool loc(#loc74)
      cir.if %3 {
        cir.scope {
          %4 = cir.load %0 : !cir.ptr<!s32i>, !s32i loc(#loc78)
          %5 = cir.const #cir.int<0> : !s32i loc(#loc79)
          %6 = cir.cmp(gt, %4, %5) : !s32i, !s32i loc(#loc151)
          %7 = cir.cast(int_to_bool, %6 : !s32i), !cir.bool loc(#loc80)
          cir.if %7 {
            cir.scope {
              %8 = cir.load %0 : !cir.ptr<!s32i>, !s32i loc(#loc84)
              %9 = cir.const #cir.int<2147483647> : !s32i loc(#loc85)
              %10 = cir.const #cir.int<2> : !s32i loc(#loc86)
              %11 = cir.binop(div, %9, %10) : !s32i loc(#loc154)
              %12 = cir.cmp(lt, %8, %11) : !s32i, !s32i loc(#loc155)
              %13 = cir.cast(int_to_bool, %12 : !s32i), !cir.bool loc(#loc88)
              cir.if %13 {
                %14 = cir.alloca !s32i, !cir.ptr<!s32i>, ["result", init] {alignment = 4 : i64} loc(#loc157)
                %15 = cir.load %0 : !cir.ptr<!s32i>, !s32i loc(#loc94)
                %16 = cir.const #cir.int<2> : !s32i loc(#loc93)
                %17 = cir.binop(mul, %15, %16) nsw : !s32i loc(#loc94)
                cir.store %17, %14 : !s32i, !cir.ptr<!s32i> loc(#loc157)
                %18 = cir.load %14 : !cir.ptr<!s32i>, !s32i loc(#loc95)
                cir.call @printIntLine(%18) : (!s32i) -> () loc(#loc96)
              } else {
                %14 = cir.get_global @".str1" : !cir.ptr<!cir.array<!s8i x 54>> loc(#loc97)
                %15 = cir.cast(array_to_ptrdecay, %14 : !cir.ptr<!cir.array<!s8i x 54>>), !cir.ptr<!s8i> loc(#loc97)
                cir.call @printLine(%15) : (!cir.ptr<!s8i>) -> () loc(#loc98)
              } loc(#loc156)
            } loc(#loc153)
          } loc(#loc152)
        } loc(#loc150)
      } loc(#loc149)
    } loc(#loc148)
    cir.return loc(#loc68)
  } loc(#loc146)
  cir.global "private"  external @CWE190_Integer_Overflow__int_fgets_multiply_22_goodG2BGlobal : !s32i {alignment = 4 : i64} loc(#loc158)
  cir.func  @CWE190_Integer_Overflow__int_fgets_multiply_22_goodG2BSink(%arg0: !s32i loc(fused[#loc103, #loc104])) extra(#fn_attr) {
    %0 = cir.alloca !s32i, !cir.ptr<!s32i>, ["data", init] {alignment = 4 : i64} loc(#loc160)
    cir.store %arg0, %0 : !s32i, !cir.ptr<!s32i> loc(#loc105)
    cir.scope {
      %1 = cir.get_global @CWE190_Integer_Overflow__int_fgets_multiply_22_goodG2BGlobal : !cir.ptr<!s32i> loc(#loc158)
      %2 = cir.load %1 : !cir.ptr<!s32i>, !s32i loc(#loc108)
      %3 = cir.cast(int_to_bool, %2 : !s32i), !cir.bool loc(#loc108)
      cir.if %3 {
        cir.scope {
          %4 = cir.load %0 : !cir.ptr<!s32i>, !s32i loc(#loc112)
          %5 = cir.const #cir.int<0> : !s32i loc(#loc113)
          %6 = cir.cmp(gt, %4, %5) : !s32i, !s32i loc(#loc164)
          %7 = cir.cast(int_to_bool, %6 : !s32i), !cir.bool loc(#loc114)
          cir.if %7 {
            %8 = cir.alloca !s32i, !cir.ptr<!s32i>, ["result", init] {alignment = 4 : i64} loc(#loc166)
            %9 = cir.load %0 : !cir.ptr<!s32i>, !s32i loc(#loc118)
            %10 = cir.const #cir.int<2> : !s32i loc(#loc117)
            %11 = cir.binop(mul, %9, %10) nsw : !s32i loc(#loc118)
            cir.store %11, %8 : !s32i, !cir.ptr<!s32i> loc(#loc166)
            %12 = cir.load %8 : !cir.ptr<!s32i>, !s32i loc(#loc119)
            cir.call @printIntLine(%12) : (!s32i) -> () loc(#loc120)
          } loc(#loc165)
        } loc(#loc163)
      } loc(#loc162)
    } loc(#loc161)
    cir.return loc(#loc102)
  } loc(#loc159)
} loc(#loc)
#loc = loc("/home/ladisgin/git_proj/test_projects/juliet-c/testcases/CWE190_Integer_Overflow/s03/CWE190_Integer_Overflow__int_fgets_multiply_22b.c":0:0)
#loc1 = loc("CWE190_Integer_Overflow__int_fgets_multiply_22b.c":23:1)
#loc2 = loc("CWE190_Integer_Overflow__int_fgets_multiply_22b.c":23:12)
#loc3 = loc("../../../testcasesupport/std_testcase_io.h":18:1)
#loc4 = loc("../../../testcasesupport/std_testcase_io.h":18:33)
#loc5 = loc("CWE190_Integer_Overflow__int_fgets_multiply_22b.c":25:1)
#loc6 = loc("CWE190_Integer_Overflow__int_fgets_multiply_22b.c":36:1)
#loc9 = loc("CWE190_Integer_Overflow__int_fgets_multiply_22b.c":26:1)
#loc10 = loc("CWE190_Integer_Overflow__int_fgets_multiply_22b.c":27:5)
#loc11 = loc("CWE190_Integer_Overflow__int_fgets_multiply_22b.c":35:5)
#loc12 = loc("CWE190_Integer_Overflow__int_fgets_multiply_22b.c":27:8)
#loc13 = loc("CWE190_Integer_Overflow__int_fgets_multiply_22b.c":28:5)
#loc14 = loc("CWE190_Integer_Overflow__int_fgets_multiply_22b.c":29:9)
#loc15 = loc("CWE190_Integer_Overflow__int_fgets_multiply_22b.c":34:9)
#loc16 = loc("CWE190_Integer_Overflow__int_fgets_multiply_22b.c":29:12)
#loc17 = loc("CWE190_Integer_Overflow__int_fgets_multiply_22b.c":29:19)
#loc18 = loc("CWE190_Integer_Overflow__int_fgets_multiply_22b.c":29:17)
#loc19 = loc("CWE190_Integer_Overflow__int_fgets_multiply_22b.c":30:9)
#loc20 = loc("CWE190_Integer_Overflow__int_fgets_multiply_22b.c":32:13)
#loc21 = loc("CWE190_Integer_Overflow__int_fgets_multiply_22b.c":32:33)
#loc22 = loc("CWE190_Integer_Overflow__int_fgets_multiply_22b.c":32:26)
#loc23 = loc("CWE190_Integer_Overflow__int_fgets_multiply_22b.c":33:26)
#loc24 = loc("CWE190_Integer_Overflow__int_fgets_multiply_22b.c":33:13)
#loc25 = loc("CWE190_Integer_Overflow__int_fgets_multiply_22b.c":43:1)
#loc26 = loc("CWE190_Integer_Overflow__int_fgets_multiply_22b.c":43:12)
#loc27 = loc("../../../testcasesupport/std_testcase_io.h":14:1)
#loc28 = loc("../../../testcasesupport/std_testcase_io.h":14:33)
#loc29 = loc("CWE190_Integer_Overflow__int_fgets_multiply_22b.c":53:19)
#loc30 = loc("CWE190_Integer_Overflow__int_fgets_multiply_22b.c":67:27)
#loc31 = loc("CWE190_Integer_Overflow__int_fgets_multiply_22b.c":48:1)
#loc32 = loc("CWE190_Integer_Overflow__int_fgets_multiply_22b.c":71:1)
#loc35 = loc("CWE190_Integer_Overflow__int_fgets_multiply_22b.c":49:1)
#loc36 = loc("CWE190_Integer_Overflow__int_fgets_multiply_22b.c":50:5)
#loc37 = loc("CWE190_Integer_Overflow__int_fgets_multiply_22b.c":70:5)
#loc38 = loc("CWE190_Integer_Overflow__int_fgets_multiply_22b.c":50:8)
#loc39 = loc("CWE190_Integer_Overflow__int_fgets_multiply_22b.c":51:5)
#loc40 = loc("CWE190_Integer_Overflow__int_fgets_multiply_22b.c":54:5)
#loc41 = loc("CWE190_Integer_Overflow__int_fgets_multiply_22b.c":56:5)
#loc42 = loc("CWE190_Integer_Overflow__int_fgets_multiply_22b.c":53:9)
#loc43 = loc("CWE190_Integer_Overflow__int_fgets_multiply_22b.c":57:9)
#loc44 = loc("CWE190_Integer_Overflow__int_fgets_multiply_22b.c":69:9)
#loc45 = loc("CWE190_Integer_Overflow__int_fgets_multiply_22b.c":57:12)
#loc46 = loc("CWE190_Integer_Overflow__int_fgets_multiply_22b.c":57:19)
#loc47 = loc("CWE190_Integer_Overflow__int_fgets_multiply_22b.c":57:17)
#loc48 = loc("CWE190_Integer_Overflow__int_fgets_multiply_22b.c":58:9)
#loc49 = loc("CWE190_Integer_Overflow__int_fgets_multiply_22b.c":60:13)
#loc50 = loc("CWE190_Integer_Overflow__int_fgets_multiply_22b.c":68:13)
#loc51 = loc("CWE190_Integer_Overflow__int_fgets_multiply_22b.c":60:17)
#loc52 = loc("CWE190_Integer_Overflow__int_fgets_multiply_22b.c":60:25)
#loc53 = loc("CWE190_Integer_Overflow__int_fgets_multiply_22b.c":60:33)
#loc54 = loc("CWE190_Integer_Overflow__int_fgets_multiply_22b.c":60:34)
#loc55 = loc("CWE190_Integer_Overflow__int_fgets_multiply_22b.c":60:22)
#loc56 = loc("CWE190_Integer_Overflow__int_fgets_multiply_22b.c":61:13)
#loc57 = loc("CWE190_Integer_Overflow__int_fgets_multiply_22b.c":64:13)
#loc58 = loc("CWE190_Integer_Overflow__int_fgets_multiply_22b.c":66:13)
#loc59 = loc("CWE190_Integer_Overflow__int_fgets_multiply_22b.c":62:17)
#loc60 = loc("CWE190_Integer_Overflow__int_fgets_multiply_22b.c":62:37)
#loc61 = loc("CWE190_Integer_Overflow__int_fgets_multiply_22b.c":62:30)
#loc62 = loc("CWE190_Integer_Overflow__int_fgets_multiply_22b.c":63:30)
#loc63 = loc("CWE190_Integer_Overflow__int_fgets_multiply_22b.c":63:17)
#loc64 = loc("CWE190_Integer_Overflow__int_fgets_multiply_22b.c":67:17)
#loc65 = loc("CWE190_Integer_Overflow__int_fgets_multiply_22b.c":44:1)
#loc66 = loc("CWE190_Integer_Overflow__int_fgets_multiply_22b.c":44:12)
#loc67 = loc("CWE190_Integer_Overflow__int_fgets_multiply_22b.c":74:1)
#loc68 = loc("CWE190_Integer_Overflow__int_fgets_multiply_22b.c":92:1)
#loc71 = loc("CWE190_Integer_Overflow__int_fgets_multiply_22b.c":75:1)
#loc72 = loc("CWE190_Integer_Overflow__int_fgets_multiply_22b.c":76:5)
#loc73 = loc("CWE190_Integer_Overflow__int_fgets_multiply_22b.c":91:5)
#loc74 = loc("CWE190_Integer_Overflow__int_fgets_multiply_22b.c":76:8)
#loc75 = loc("CWE190_Integer_Overflow__int_fgets_multiply_22b.c":77:5)
#loc76 = loc("CWE190_Integer_Overflow__int_fgets_multiply_22b.c":78:9)
#loc77 = loc("CWE190_Integer_Overflow__int_fgets_multiply_22b.c":90:9)
#loc78 = loc("CWE190_Integer_Overflow__int_fgets_multiply_22b.c":78:12)
#loc79 = loc("CWE190_Integer_Overflow__int_fgets_multiply_22b.c":78:19)
#loc80 = loc("CWE190_Integer_Overflow__int_fgets_multiply_22b.c":78:17)
#loc81 = loc("CWE190_Integer_Overflow__int_fgets_multiply_22b.c":79:9)
#loc82 = loc("CWE190_Integer_Overflow__int_fgets_multiply_22b.c":81:13)
#loc83 = loc("CWE190_Integer_Overflow__int_fgets_multiply_22b.c":89:13)
#loc84 = loc("CWE190_Integer_Overflow__int_fgets_multiply_22b.c":81:17)
#loc85 = loc("CWE190_Integer_Overflow__int_fgets_multiply_22b.c":81:25)
#loc86 = loc("CWE190_Integer_Overflow__int_fgets_multiply_22b.c":81:33)
#loc87 = loc("CWE190_Integer_Overflow__int_fgets_multiply_22b.c":81:34)
#loc88 = loc("CWE190_Integer_Overflow__int_fgets_multiply_22b.c":81:22)
#loc89 = loc("CWE190_Integer_Overflow__int_fgets_multiply_22b.c":82:13)
#loc90 = loc("CWE190_Integer_Overflow__int_fgets_multiply_22b.c":85:13)
#loc91 = loc("CWE190_Integer_Overflow__int_fgets_multiply_22b.c":87:13)
#loc92 = loc("CWE190_Integer_Overflow__int_fgets_multiply_22b.c":83:17)
#loc93 = loc("CWE190_Integer_Overflow__int_fgets_multiply_22b.c":83:37)
#loc94 = loc("CWE190_Integer_Overflow__int_fgets_multiply_22b.c":83:30)
#loc95 = loc("CWE190_Integer_Overflow__int_fgets_multiply_22b.c":84:30)
#loc96 = loc("CWE190_Integer_Overflow__int_fgets_multiply_22b.c":84:17)
#loc97 = loc("CWE190_Integer_Overflow__int_fgets_multiply_22b.c":88:27)
#loc98 = loc("CWE190_Integer_Overflow__int_fgets_multiply_22b.c":88:17)
#loc99 = loc("CWE190_Integer_Overflow__int_fgets_multiply_22b.c":45:1)
#loc100 = loc("CWE190_Integer_Overflow__int_fgets_multiply_22b.c":45:12)
#loc101 = loc("CWE190_Integer_Overflow__int_fgets_multiply_22b.c":95:1)
#loc102 = loc("CWE190_Integer_Overflow__int_fgets_multiply_22b.c":106:1)
#loc105 = loc("CWE190_Integer_Overflow__int_fgets_multiply_22b.c":96:1)
#loc106 = loc("CWE190_Integer_Overflow__int_fgets_multiply_22b.c":97:5)
#loc107 = loc("CWE190_Integer_Overflow__int_fgets_multiply_22b.c":105:5)
#loc108 = loc("CWE190_Integer_Overflow__int_fgets_multiply_22b.c":97:8)
#loc109 = loc("CWE190_Integer_Overflow__int_fgets_multiply_22b.c":98:5)
#loc110 = loc("CWE190_Integer_Overflow__int_fgets_multiply_22b.c":99:9)
#loc111 = loc("CWE190_Integer_Overflow__int_fgets_multiply_22b.c":104:9)
#loc112 = loc("CWE190_Integer_Overflow__int_fgets_multiply_22b.c":99:12)
#loc113 = loc("CWE190_Integer_Overflow__int_fgets_multiply_22b.c":99:19)
#loc114 = loc("CWE190_Integer_Overflow__int_fgets_multiply_22b.c":99:17)
#loc115 = loc("CWE190_Integer_Overflow__int_fgets_multiply_22b.c":100:9)
#loc116 = loc("CWE190_Integer_Overflow__int_fgets_multiply_22b.c":102:13)
#loc117 = loc("CWE190_Integer_Overflow__int_fgets_multiply_22b.c":102:33)
#loc118 = loc("CWE190_Integer_Overflow__int_fgets_multiply_22b.c":102:26)
#loc119 = loc("CWE190_Integer_Overflow__int_fgets_multiply_22b.c":103:26)
#loc120 = loc("CWE190_Integer_Overflow__int_fgets_multiply_22b.c":103:13)
#loc121 = loc(fused[#loc1, #loc2])
#loc122 = loc(fused[#loc3, #loc4])
#loc123 = loc(fused[#loc5, #loc6])
#loc125 = loc(fused[#loc10, #loc11])
#loc126 = loc(fused[#loc13, #loc11])
#loc127 = loc(fused[#loc14, #loc15])
#loc128 = loc(fused[#loc16, #loc17])
#loc129 = loc(fused[#loc19, #loc15])
#loc130 = loc(fused[#loc20, #loc21])
#loc131 = loc(fused[#loc25, #loc26])
#loc132 = loc(fused[#loc27, #loc28])
#loc133 = loc(fused[#loc31, #loc32])
#loc135 = loc(fused[#loc36, #loc37])
#loc136 = loc(fused[#loc39, #loc40, #loc41, #loc37])
#loc137 = loc(fused[#loc43, #loc44])
#loc138 = loc(fused[#loc45, #loc46])
#loc139 = loc(fused[#loc48, #loc44])
#loc140 = loc(fused[#loc49, #loc50])
#loc141 = loc(fused[#loc52, #loc53])
#loc142 = loc(fused[#loc51, #loc54])
#loc143 = loc(fused[#loc56, #loc57, #loc58, #loc50])
#loc144 = loc(fused[#loc59, #loc60])
#loc145 = loc(fused[#loc65, #loc66])
#loc146 = loc(fused[#loc67, #loc68])
#loc148 = loc(fused[#loc72, #loc73])
#loc149 = loc(fused[#loc75, #loc73])
#loc150 = loc(fused[#loc76, #loc77])
#loc151 = loc(fused[#loc78, #loc79])
#loc152 = loc(fused[#loc81, #loc77])
#loc153 = loc(fused[#loc82, #loc83])
#loc154 = loc(fused[#loc85, #loc86])
#loc155 = loc(fused[#loc84, #loc87])
#loc156 = loc(fused[#loc89, #loc90, #loc91, #loc83])
#loc157 = loc(fused[#loc92, #loc93])
#loc158 = loc(fused[#loc99, #loc100])
#loc159 = loc(fused[#loc101, #loc102])
#loc161 = loc(fused[#loc106, #loc107])
#loc162 = loc(fused[#loc109, #loc107])
#loc163 = loc(fused[#loc110, #loc111])
#loc164 = loc(fused[#loc112, #loc113])
#loc165 = loc(fused[#loc115, #loc111])
#loc166 = loc(fused[#loc116, #loc117])
