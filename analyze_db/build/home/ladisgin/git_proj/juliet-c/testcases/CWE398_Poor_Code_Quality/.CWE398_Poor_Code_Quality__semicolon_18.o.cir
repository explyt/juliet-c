!s8i = !cir.int<s, 8>
!void = !cir.void
#fn_attr = #cir<extra({inline = #cir.inline<no>, nothrow = #cir.nothrow, optnone = #cir.optnone})>
module @"/home/ladisgin/git_proj/juliet-c/testcases/CWE398_Poor_Code_Quality/CWE398_Poor_Code_Quality__semicolon_18.c" attributes {cir.lang = #cir.lang<c>, cir.sob = #cir.signed_overflow_behavior<undefined>, cir.triple = "x86_64-unknown-linux-gnu", dlti.dl_spec = #dlti.dl_spec<i1 = dense<8> : vector<2xi64>, !llvm.ptr = dense<64> : vector<4xi64>, i16 = dense<16> : vector<2xi64>, i8 = dense<8> : vector<2xi64>, i32 = dense<32> : vector<2xi64>, !llvm.ptr<270> = dense<32> : vector<4xi64>, f128 = dense<128> : vector<2xi64>, f64 = dense<64> : vector<2xi64>, f16 = dense<16> : vector<2xi64>, !llvm.ptr<272> = dense<64> : vector<4xi64>, !llvm.ptr<271> = dense<32> : vector<4xi64>, i64 = dense<64> : vector<2xi64>, f80 = dense<128> : vector<2xi64>, i128 = dense<128> : vector<2xi64>, "dlti.endianness" = "little", "dlti.stack_alignment" = 128 : i64>} {
  cir.func private @printLine(!cir.ptr<!s8i>) loc(#loc19)
  cir.global "private" constant cir_private dsolocal @".str" = #cir.const_array<"Hello from bad()\00" : !cir.array<!s8i x 17>> : !cir.array<!s8i x 17> {alignment = 1 : i64} loc(#loc3)
  cir.func no_proto @CWE398_Poor_Code_Quality__semicolon_18_bad() extra(#fn_attr) {
    cir.br ^bb1 loc(#loc21)
  ^bb1:  // pred: ^bb0
    %0 = cir.get_global @".str" : !cir.ptr<!cir.array<!s8i x 17>> loc(#loc3)
    %1 = cir.cast(array_to_ptrdecay, %0 : !cir.ptr<!cir.array<!s8i x 17>>), !cir.ptr<!s8i> loc(#loc3)
    cir.call @printLine(%1) : (!cir.ptr<!s8i>) -> () loc(#loc8)
    cir.return loc(#loc5)
  } loc(#loc20)
  cir.func no_proto @CWE398_Poor_Code_Quality__semicolon_18_good() extra(#fn_attr) {
    %0 = cir.get_global @good1 : !cir.ptr<!cir.func<!void ()>> loc(#loc23)
    cir.call %0() : (!cir.ptr<!cir.func<!void ()>>) -> () loc(#loc11)
    cir.return loc(#loc10)
  } loc(#loc22)
  cir.global "private" constant cir_private dsolocal @".str.1" = #cir.const_array<"Hello from good()\00" : !cir.array<!s8i x 18>> : !cir.array<!s8i x 18> {alignment = 1 : i64} loc(#loc13)
  cir.func no_proto internal private @good1() extra(#fn_attr) {
    cir.br ^bb1 loc(#loc25)
  ^bb1:  // pred: ^bb0
    %0 = cir.get_global @".str.1" : !cir.ptr<!cir.array<!s8i x 18>> loc(#loc13)
    %1 = cir.cast(array_to_ptrdecay, %0 : !cir.ptr<!cir.array<!s8i x 18>>), !cir.ptr<!s8i> loc(#loc13)
    cir.call @printLine(%1) : (!cir.ptr<!s8i>) -> () loc(#loc18)
    cir.return loc(#loc15)
  } loc(#loc24)
} loc(#loc)
#loc = loc("/home/ladisgin/git_proj/juliet-c/testcases/CWE398_Poor_Code_Quality/CWE398_Poor_Code_Quality__semicolon_18.c":0:0)
#loc1 = loc("../../testcasesupport/std_testcase_io.h":14:1)
#loc2 = loc("../../testcasesupport/std_testcase_io.h":14:33)
#loc3 = loc("CWE398_Poor_Code_Quality__semicolon_18.c":26:15)
#loc4 = loc("CWE398_Poor_Code_Quality__semicolon_18.c":20:1)
#loc5 = loc("CWE398_Poor_Code_Quality__semicolon_18.c":27:1)
#loc6 = loc("CWE398_Poor_Code_Quality__semicolon_18.c":22:5)
#loc7 = loc("CWE398_Poor_Code_Quality__semicolon_18.c":22:10)
#loc8 = loc("CWE398_Poor_Code_Quality__semicolon_18.c":26:5)
#loc9 = loc("CWE398_Poor_Code_Quality__semicolon_18.c":42:1)
#loc10 = loc("CWE398_Poor_Code_Quality__semicolon_18.c":45:1)
#loc11 = loc("CWE398_Poor_Code_Quality__semicolon_18.c":44:5)
#loc12 = loc("CWE398_Poor_Code_Quality__semicolon_18.c":44:11)
#loc13 = loc("CWE398_Poor_Code_Quality__semicolon_18.c":39:15)
#loc14 = loc("CWE398_Poor_Code_Quality__semicolon_18.c":34:1)
#loc15 = loc("CWE398_Poor_Code_Quality__semicolon_18.c":40:1)
#loc16 = loc("CWE398_Poor_Code_Quality__semicolon_18.c":36:5)
#loc17 = loc("CWE398_Poor_Code_Quality__semicolon_18.c":36:10)
#loc18 = loc("CWE398_Poor_Code_Quality__semicolon_18.c":39:5)
#loc19 = loc(fused[#loc1, #loc2])
#loc20 = loc(fused[#loc4, #loc5])
#loc21 = loc(fused[#loc6, #loc7])
#loc22 = loc(fused[#loc9, #loc10])
#loc23 = loc(fused[#loc11, #loc12])
#loc24 = loc(fused[#loc14, #loc15])
#loc25 = loc(fused[#loc16, #loc17])
