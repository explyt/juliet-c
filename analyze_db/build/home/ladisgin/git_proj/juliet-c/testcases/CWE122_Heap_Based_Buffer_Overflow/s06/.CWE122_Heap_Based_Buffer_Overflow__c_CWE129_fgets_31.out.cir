!s32i = !cir.int<s, 32>
!s64i = !cir.int<s, 64>
!s8i = !cir.int<s, 8>
!ty__IO_codecvt = !cir.struct<struct "_IO_codecvt" incomplete>
!ty__IO_marker = !cir.struct<struct "_IO_marker" incomplete>
!ty__IO_wide_data = !cir.struct<struct "_IO_wide_data" incomplete>
!u16i = !cir.int<u, 16>
!u32i = !cir.int<u, 32>
!u64i = !cir.int<u, 64>
!void = !cir.void
#false = #cir.bool<false> : !cir.bool
#fn_attr = #cir<extra({nothrow = #cir.nothrow})>
#fn_attr1 = #cir<extra({inline = #cir.inline<no>, nothrow = #cir.nothrow, optnone = #cir.optnone})>
#loc127 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_31.c":183:10)
#loc128 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_31.c":183:14)
#loc129 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_31.c":183:20)
#loc130 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_31.c":183:32)
#true = #cir.bool<true> : !cir.bool
#loc369 = loc(fused[#loc127, #loc128])
#loc370 = loc(fused[#loc129, #loc130])
!ty__IO_FILE = !cir.struct<struct "_IO_FILE" {!s32i, !cir.ptr<!s8i>, !cir.ptr<!s8i>, !cir.ptr<!s8i>, !cir.ptr<!s8i>, !cir.ptr<!s8i>, !cir.ptr<!s8i>, !cir.ptr<!s8i>, !cir.ptr<!s8i>, !cir.ptr<!s8i>, !cir.ptr<!s8i>, !cir.ptr<!s8i>, !cir.ptr<!ty__IO_marker>, !cir.ptr<!cir.struct<struct "_IO_FILE">>, !s32i, !s32i, !s64i, !u16i, !s8i, !cir.array<!s8i x 1>, !cir.ptr<!void>, !s64i, !cir.ptr<!ty__IO_codecvt>, !cir.ptr<!ty__IO_wide_data>, !cir.ptr<!cir.struct<struct "_IO_FILE">>, !cir.ptr<!void>, !cir.ptr<!cir.ptr<!cir.struct<struct "_IO_FILE">>>, !s32i, !cir.array<!s8i x 20>} #cir.record.decl.ast>
module @"/home/ladisgin/git_proj/juliet-c/testcases/CWE122_Heap_Based_Buffer_Overflow/s06/CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_31.c" attributes {cir.lang = #cir.lang<c>, cir.sob = #cir.signed_overflow_behavior<undefined>, cir.triple = "x86_64-unknown-linux-gnu", dlti.dl_spec = #dlti.dl_spec<i1 = dense<8> : vector<2xi64>, i8 = dense<8> : vector<2xi64>, i16 = dense<16> : vector<2xi64>, i32 = dense<32> : vector<2xi64>, f64 = dense<64> : vector<2xi64>, f16 = dense<16> : vector<2xi64>, !llvm.ptr<270> = dense<32> : vector<4xi64>, f128 = dense<128> : vector<2xi64>, !llvm.ptr<271> = dense<32> : vector<4xi64>, !llvm.ptr<272> = dense<64> : vector<4xi64>, i64 = dense<64> : vector<2xi64>, i128 = dense<128> : vector<2xi64>, f80 = dense<128> : vector<2xi64>, !llvm.ptr = dense<64> : vector<4xi64>, "dlti.endianness" = "little", "dlti.stack_alignment" = 128 : i64>} {
  cir.func private @fgets(!cir.ptr<!s8i>, !s32i, !cir.ptr<!ty__IO_FILE>) -> !cir.ptr<!s8i> loc(#loc319)
  cir.global "private" external @stdin : !cir.ptr<!ty__IO_FILE> {alignment = 8 : i64} loc(#loc320)
  cir.func private @atoi(!cir.ptr<!s8i>) -> !s32i extra(#fn_attr) loc(#loc321)
  cir.func private @printLine(!cir.ptr<!s8i>) loc(#loc322)
  cir.global "private" constant cir_private dsolocal @".str" = #cir.const_array<"fgets() failed.\00" : !cir.array<!s8i x 16>> : !cir.array<!s8i x 16> {alignment = 1 : i64} loc(#loc9)
  cir.func private @malloc(!u64i) -> !cir.ptr<!void> extra(#fn_attr) loc(#loc323)
  cir.func private @exit(!s32i) extra(#fn_attr) loc(#loc324)
  cir.func private @printIntLine(!s32i) loc(#loc325)
  cir.global "private" constant cir_private dsolocal @".str.1" = #cir.const_array<"ERROR: Array index is negative.\00" : !cir.array<!s8i x 32>> : !cir.array<!s8i x 32> {alignment = 1 : i64} loc(#loc16)
  cir.func private @free(!cir.ptr<!void>) extra(#fn_attr) loc(#loc326)
  cir.func no_proto @CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_31_bad() extra(#fn_attr1) {
    %0 = cir.alloca !s32i, !cir.ptr<!s32i>, ["data"] {alignment = 4 : i64} loc(#loc328)
    %1 = cir.const #cir.int<1> : !s32i loc(#loc23)
    %2 = cir.unary(minus, %1) : !s32i, !s32i loc(#loc24)
    cir.store %2, %0 : !s32i, !cir.ptr<!s32i> loc(#loc329)
    cir.scope {
      %3 = cir.alloca !cir.array<!s8i x 14>, !cir.ptr<!cir.array<!s8i x 14>>, ["inputBuffer"] {alignment = 1 : i64} loc(#loc331)
      %4 = cir.const #cir.zero : !cir.array<!s8i x 14> loc(#loc331)
      cir.store %4, %3 : !cir.array<!s8i x 14>, !cir.ptr<!cir.array<!s8i x 14>> loc(#loc331)
      cir.scope {
        %5 = cir.cast(array_to_ptrdecay, %3 : !cir.ptr<!cir.array<!s8i x 14>>), !cir.ptr<!s8i> loc(#loc32)
        %6 = cir.const #cir.int<3> : !s32i loc(#loc33)
        %7 = cir.cast(integral, %6 : !s32i), !u64i loc(#loc33)
        %8 = cir.const #cir.int<4> : !u64i loc(#loc33)
        %9 = cir.binop(mul, %7, %8) : !u64i loc(#loc33)
        %10 = cir.const #cir.int<2> : !s32i loc(#loc33)
        %11 = cir.cast(integral, %10 : !s32i), !u64i loc(#loc33)
        %12 = cir.binop(add, %9, %11) : !u64i loc(#loc33)
        %13 = cir.cast(integral, %12 : !u64i), !s32i loc(#loc33)
        %14 = cir.get_global @stdin : !cir.ptr<!cir.ptr<!ty__IO_FILE>> loc(#loc320)
        %15 = cir.load %14 : !cir.ptr<!cir.ptr<!ty__IO_FILE>>, !cir.ptr<!ty__IO_FILE> loc(#loc34)
        %16 = cir.call @fgets(%5, %13, %15) : (!cir.ptr<!s8i>, !s32i, !cir.ptr<!ty__IO_FILE>) -> !cir.ptr<!s8i> loc(#loc35)
        %17 = cir.const #cir.ptr<null> : !cir.ptr<!void> loc(#loc36)
        %18 = cir.cast(bitcast, %17 : !cir.ptr<!void>), !cir.ptr<!s8i> loc(#loc36)
        %19 = cir.cmp(ne, %16, %18) : !cir.ptr<!s8i>, !cir.bool loc(#loc333)
        cir.if %19 {
          %20 = cir.cast(array_to_ptrdecay, %3 : !cir.ptr<!cir.array<!s8i x 14>>), !cir.ptr<!s8i> loc(#loc40)
          %21 = cir.call @atoi(%20) : (!cir.ptr<!s8i>) -> !s32i extra(#fn_attr) loc(#loc41)
          cir.store %21, %0 : !s32i, !cir.ptr<!s32i> loc(#loc335)
        } else {
          %20 = cir.get_global @".str" : !cir.ptr<!cir.array<!s8i x 16>> loc(#loc9)
          %21 = cir.cast(array_to_ptrdecay, %20 : !cir.ptr<!cir.array<!s8i x 16>>), !cir.ptr<!s8i> loc(#loc9)
          cir.call @printLine(%21) : (!cir.ptr<!s8i>) -> () loc(#loc44)
        } loc(#loc334)
      } loc(#loc332)
    } loc(#loc330)
    cir.scope {
      %3 = cir.alloca !s32i, !cir.ptr<!s32i>, ["dataCopy", init] {alignment = 4 : i64} loc(#loc337)
      %4 = cir.alloca !s32i, !cir.ptr<!s32i>, ["data", init] {alignment = 4 : i64} loc(#loc338)
      %5 = cir.load %0 : !cir.ptr<!s32i>, !s32i loc(#loc48)
      cir.store %5, %3 : !s32i, !cir.ptr<!s32i> loc(#loc337)
      %6 = cir.load %3 : !cir.ptr<!s32i>, !s32i loc(#loc50)
      cir.store %6, %4 : !s32i, !cir.ptr<!s32i> loc(#loc338)
      cir.scope {
        %7 = cir.alloca !s32i, !cir.ptr<!s32i>, ["i"] {alignment = 4 : i64} loc(#loc340)
        %8 = cir.alloca !cir.ptr<!s32i>, !cir.ptr<!cir.ptr<!s32i>>, ["buffer", init] {alignment = 8 : i64} loc(#loc341)
        %9 = cir.get_global @malloc : !cir.ptr<!cir.func<!cir.ptr<!void> (!u64i)>> loc(#loc57)
        %10 = cir.const #cir.int<10> : !s32i loc(#loc58)
        %11 = cir.cast(integral, %10 : !s32i), !u64i loc(#loc58)
        %12 = cir.const #cir.int<4> : !u64i loc(#loc342)
        %13 = cir.binop(mul, %11, %12) : !u64i loc(#loc343)
        %14 = cir.call @malloc(%13) : (!u64i) -> !cir.ptr<!void> extra(#fn_attr) loc(#loc57)
        %15 = cir.cast(bitcast, %14 : !cir.ptr<!void>), !cir.ptr<!s32i> loc(#loc344)
        cir.store %15, %8 : !cir.ptr<!s32i>, !cir.ptr<!cir.ptr<!s32i>> loc(#loc341)
        cir.scope {
          %19 = cir.load %8 : !cir.ptr<!cir.ptr<!s32i>>, !cir.ptr<!s32i> loc(#loc63)
          %20 = cir.const #cir.ptr<null> : !cir.ptr<!void> loc(#loc64)
          %21 = cir.cast(bitcast, %20 : !cir.ptr<!void>), !cir.ptr<!s32i> loc(#loc64)
          %22 = cir.cmp(eq, %19, %21) : !cir.ptr<!s32i>, !cir.bool loc(#loc346)
          cir.if %22 {
            %23 = cir.get_global @exit : !cir.ptr<!cir.func<!void (!s32i)>> loc(#loc66)
            %24 = cir.const #cir.int<1> : !s32i loc(#loc67)
            %25 = cir.unary(minus, %24) : !s32i, !s32i loc(#loc68)
            cir.call @exit(%25) : (!s32i) -> () extra(#fn_attr) loc(#loc66)
          } loc(#loc347)
        } loc(#loc345)
        cir.scope {
          %19 = cir.const #cir.int<0> : !s32i loc(#loc71)
          cir.store %19, %7 : !s32i, !cir.ptr<!s32i> loc(#loc349)
          cir.for : cond {
            %20 = cir.load %7 : !cir.ptr<!s32i>, !s32i loc(#loc73)
            %21 = cir.const #cir.int<10> : !s32i loc(#loc74)
            %22 = cir.cmp(lt, %20, %21) : !s32i, !cir.bool loc(#loc350)
            cir.condition(%22) loc(#loc75)
          } body {
            cir.scope {
              %20 = cir.const #cir.int<0> : !s32i loc(#loc77)
              %21 = cir.load %8 : !cir.ptr<!cir.ptr<!s32i>>, !cir.ptr<!s32i> loc(#loc78)
              %22 = cir.load %7 : !cir.ptr<!s32i>, !s32i loc(#loc79)
              %23 = cir.ptr_stride(%21 : !cir.ptr<!s32i>, %22 : !s32i), !cir.ptr<!s32i> loc(#loc80)
              cir.store %20, %23 : !s32i, !cir.ptr<!s32i> loc(#loc352)
            } loc(#loc351)
            cir.yield loc(#loc70)
          } step {
            %20 = cir.load %7 : !cir.ptr<!s32i>, !s32i loc(#loc81)
            %21 = cir.unary(inc, %20) : !s32i, !s32i loc(#loc82)
            cir.store %21, %7 : !s32i, !cir.ptr<!s32i> loc(#loc353)
            cir.yield loc(#loc348)
          } loc(#loc348)
        } loc(#loc348)
        cir.scope {
          %19 = cir.load %4 : !cir.ptr<!s32i>, !s32i loc(#loc85)
          %20 = cir.const #cir.int<0> : !s32i loc(#loc86)
          %21 = cir.cmp(ge, %19, %20) : !s32i, !cir.bool loc(#loc355)
          cir.if %21 {
            %22 = cir.const #cir.int<1> : !s32i loc(#loc90)
            %23 = cir.load %8 : !cir.ptr<!cir.ptr<!s32i>>, !cir.ptr<!s32i> loc(#loc91)
            %24 = cir.load %4 : !cir.ptr<!s32i>, !s32i loc(#loc92)
            %25 = cir.ptr_stride(%23 : !cir.ptr<!s32i>, %24 : !s32i), !cir.ptr<!s32i> loc(#loc93)
            cir.store %22, %25 : !s32i, !cir.ptr<!s32i> loc(#loc357)
            cir.scope {
              %26 = cir.const #cir.int<0> : !s32i loc(#loc96)
              cir.store %26, %7 : !s32i, !cir.ptr<!s32i> loc(#loc359)
              cir.for : cond {
                %27 = cir.load %7 : !cir.ptr<!s32i>, !s32i loc(#loc98)
                %28 = cir.const #cir.int<10> : !s32i loc(#loc99)
                %29 = cir.cmp(lt, %27, %28) : !s32i, !cir.bool loc(#loc360)
                cir.condition(%29) loc(#loc100)
              } body {
                cir.scope {
                  %27 = cir.load %8 : !cir.ptr<!cir.ptr<!s32i>>, !cir.ptr<!s32i> loc(#loc102)
                  %28 = cir.load %7 : !cir.ptr<!s32i>, !s32i loc(#loc103)
                  %29 = cir.ptr_stride(%27 : !cir.ptr<!s32i>, %28 : !s32i), !cir.ptr<!s32i> loc(#loc104)
                  %30 = cir.load %29 : !cir.ptr<!s32i>, !s32i loc(#loc102)
                  cir.call @printIntLine(%30) : (!s32i) -> () loc(#loc105)
                } loc(#loc361)
                cir.yield loc(#loc95)
              } step {
                %27 = cir.load %7 : !cir.ptr<!s32i>, !s32i loc(#loc106)
                %28 = cir.unary(inc, %27) : !s32i, !s32i loc(#loc107)
                cir.store %28, %7 : !s32i, !cir.ptr<!s32i> loc(#loc362)
                cir.yield loc(#loc358)
              } loc(#loc358)
            } loc(#loc358)
          } else {
            %22 = cir.get_global @".str.1" : !cir.ptr<!cir.array<!s8i x 32>> loc(#loc16)
            %23 = cir.cast(array_to_ptrdecay, %22 : !cir.ptr<!cir.array<!s8i x 32>>), !cir.ptr<!s8i> loc(#loc16)
            cir.call @printLine(%23) : (!cir.ptr<!s8i>) -> () loc(#loc108)
          } loc(#loc356)
        } loc(#loc354)
        %16 = cir.get_global @free : !cir.ptr<!cir.func<!void (!cir.ptr<!void>)>> loc(#loc109)
        %17 = cir.load %8 : !cir.ptr<!cir.ptr<!s32i>>, !cir.ptr<!s32i> loc(#loc110)
        %18 = cir.cast(bitcast, %17 : !cir.ptr<!s32i>), !cir.ptr<!void> loc(#loc110)
        cir.call @free(%18) : (!cir.ptr<!void>) -> () extra(#fn_attr) loc(#loc109)
      } loc(#loc339)
    } loc(#loc336)
    cir.return loc(#loc20)
  } loc(#loc327)
  cir.func no_proto @CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_31_good() extra(#fn_attr1) {
    %0 = cir.get_global @goodG2B : !cir.ptr<!cir.func<!void ()>> loc(#loc364)
    cir.call %0() : (!cir.ptr<!cir.func<!void ()>>) -> () loc(#loc113)
    %1 = cir.get_global @goodB2G : !cir.ptr<!cir.func<!void ()>> loc(#loc365)
    cir.call %1() : (!cir.ptr<!cir.func<!void ()>>) -> () loc(#loc115)
    cir.return loc(#loc112)
  } loc(#loc363)
  cir.func private @srand(!u32i) extra(#fn_attr) loc(#loc366)
  cir.func private @time(!cir.ptr<!s64i>) -> !s64i extra(#fn_attr) loc(#loc367)
  cir.global "private" constant cir_private dsolocal @".str.2" = #cir.const_array<"Calling good()...\00" : !cir.array<!s8i x 18>> : !cir.array<!s8i x 18> {alignment = 1 : i64} loc(#loc121)
  cir.global "private" constant cir_private dsolocal @".str.3" = #cir.const_array<"Finished good()\00" : !cir.array<!s8i x 16>> : !cir.array<!s8i x 16> {alignment = 1 : i64} loc(#loc122)
  cir.global "private" constant cir_private dsolocal @".str.4" = #cir.const_array<"Calling bad()...\00" : !cir.array<!s8i x 17>> : !cir.array<!s8i x 17> {alignment = 1 : i64} loc(#loc123)
  cir.global "private" constant cir_private dsolocal @".str.5" = #cir.const_array<"Finished bad()\00" : !cir.array<!s8i x 15>> : !cir.array<!s8i x 15> {alignment = 1 : i64} loc(#loc124)
  cir.func @main(%arg0: !s32i loc(fused[#loc127, #loc128]), %arg1: !cir.ptr<!cir.ptr<!s8i>> loc(fused[#loc129, #loc130])) -> !s32i extra(#fn_attr1) {
    %0 = cir.alloca !s32i, !cir.ptr<!s32i>, ["argc", init] {alignment = 4 : i64} loc(#loc369)
    %1 = cir.alloca !cir.ptr<!cir.ptr<!s8i>>, !cir.ptr<!cir.ptr<!cir.ptr<!s8i>>>, ["argv", init] {alignment = 8 : i64} loc(#loc370)
    %2 = cir.alloca !s32i, !cir.ptr<!s32i>, ["__retval"] {alignment = 4 : i64} loc(#loc126)
    cir.store %arg0, %0 : !s32i, !cir.ptr<!s32i> loc(#loc131)
    cir.store %arg1, %1 : !cir.ptr<!cir.ptr<!s8i>>, !cir.ptr<!cir.ptr<!cir.ptr<!s8i>>> loc(#loc131)
    %3 = cir.const #cir.ptr<null> : !cir.ptr<!s64i> loc(#loc132)
    %4 = cir.call @time(%3) : (!cir.ptr<!s64i>) -> !s64i extra(#fn_attr) loc(#loc133)
    %5 = cir.cast(integral, %4 : !s64i), !u32i loc(#loc133)
    cir.call @srand(%5) : (!u32i) -> () extra(#fn_attr) loc(#loc134)
    %6 = cir.get_global @".str.2" : !cir.ptr<!cir.array<!s8i x 18>> loc(#loc121)
    %7 = cir.cast(array_to_ptrdecay, %6 : !cir.ptr<!cir.array<!s8i x 18>>), !cir.ptr<!s8i> loc(#loc121)
    cir.call @printLine(%7) : (!cir.ptr<!s8i>) -> () loc(#loc135)
    %8 = cir.get_global @CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_31_good : !cir.ptr<!cir.func<!void ()>> loc(#loc371)
    cir.call @CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_31_good() : () -> () loc(#loc136)
    %9 = cir.get_global @".str.3" : !cir.ptr<!cir.array<!s8i x 16>> loc(#loc122)
    %10 = cir.cast(array_to_ptrdecay, %9 : !cir.ptr<!cir.array<!s8i x 16>>), !cir.ptr<!s8i> loc(#loc122)
    cir.call @printLine(%10) : (!cir.ptr<!s8i>) -> () loc(#loc138)
    %11 = cir.get_global @".str.4" : !cir.ptr<!cir.array<!s8i x 17>> loc(#loc123)
    %12 = cir.cast(array_to_ptrdecay, %11 : !cir.ptr<!cir.array<!s8i x 17>>), !cir.ptr<!s8i> loc(#loc123)
    cir.call @printLine(%12) : (!cir.ptr<!s8i>) -> () loc(#loc139)
    %13 = cir.get_global @CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_31_bad : !cir.ptr<!cir.func<!void ()>> loc(#loc372)
    cir.call @CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_31_bad() : () -> () loc(#loc140)
    %14 = cir.get_global @".str.5" : !cir.ptr<!cir.array<!s8i x 15>> loc(#loc124)
    %15 = cir.cast(array_to_ptrdecay, %14 : !cir.ptr<!cir.array<!s8i x 15>>), !cir.ptr<!s8i> loc(#loc124)
    cir.call @printLine(%15) : (!cir.ptr<!s8i>) -> () loc(#loc142)
    %16 = cir.const #cir.int<0> : !s32i loc(#loc143)
    cir.store %16, %2 : !s32i, !cir.ptr<!s32i> loc(#loc373)
    %17 = cir.load %2 : !cir.ptr<!s32i>, !s32i loc(#loc373)
    cir.return %17 : !s32i loc(#loc373)
  } loc(#loc368)
  cir.func no_proto internal private @goodG2B() extra(#fn_attr1) {
    %0 = cir.alloca !s32i, !cir.ptr<!s32i>, ["data"] {alignment = 4 : i64} loc(#loc375)
    %1 = cir.const #cir.int<1> : !s32i loc(#loc149)
    %2 = cir.unary(minus, %1) : !s32i, !s32i loc(#loc150)
    cir.store %2, %0 : !s32i, !cir.ptr<!s32i> loc(#loc376)
    %3 = cir.const #cir.int<7> : !s32i loc(#loc152)
    cir.store %3, %0 : !s32i, !cir.ptr<!s32i> loc(#loc377)
    cir.scope {
      %4 = cir.alloca !s32i, !cir.ptr<!s32i>, ["dataCopy", init] {alignment = 4 : i64} loc(#loc379)
      %5 = cir.alloca !s32i, !cir.ptr<!s32i>, ["data", init] {alignment = 4 : i64} loc(#loc380)
      %6 = cir.load %0 : !cir.ptr<!s32i>, !s32i loc(#loc157)
      cir.store %6, %4 : !s32i, !cir.ptr<!s32i> loc(#loc379)
      %7 = cir.load %4 : !cir.ptr<!s32i>, !s32i loc(#loc159)
      cir.store %7, %5 : !s32i, !cir.ptr<!s32i> loc(#loc380)
      cir.scope {
        %8 = cir.alloca !s32i, !cir.ptr<!s32i>, ["i"] {alignment = 4 : i64} loc(#loc382)
        %9 = cir.alloca !cir.ptr<!s32i>, !cir.ptr<!cir.ptr<!s32i>>, ["buffer", init] {alignment = 8 : i64} loc(#loc383)
        %10 = cir.get_global @malloc : !cir.ptr<!cir.func<!cir.ptr<!void> (!u64i)>> loc(#loc166)
        %11 = cir.const #cir.int<10> : !s32i loc(#loc167)
        %12 = cir.cast(integral, %11 : !s32i), !u64i loc(#loc167)
        %13 = cir.const #cir.int<4> : !u64i loc(#loc384)
        %14 = cir.binop(mul, %12, %13) : !u64i loc(#loc385)
        %15 = cir.call @malloc(%14) : (!u64i) -> !cir.ptr<!void> extra(#fn_attr) loc(#loc166)
        %16 = cir.cast(bitcast, %15 : !cir.ptr<!void>), !cir.ptr<!s32i> loc(#loc386)
        cir.store %16, %9 : !cir.ptr<!s32i>, !cir.ptr<!cir.ptr<!s32i>> loc(#loc383)
        cir.scope {
          %20 = cir.load %9 : !cir.ptr<!cir.ptr<!s32i>>, !cir.ptr<!s32i> loc(#loc172)
          %21 = cir.const #cir.ptr<null> : !cir.ptr<!void> loc(#loc173)
          %22 = cir.cast(bitcast, %21 : !cir.ptr<!void>), !cir.ptr<!s32i> loc(#loc173)
          %23 = cir.cmp(eq, %20, %22) : !cir.ptr<!s32i>, !cir.bool loc(#loc388)
          cir.if %23 {
            %24 = cir.get_global @exit : !cir.ptr<!cir.func<!void (!s32i)>> loc(#loc175)
            %25 = cir.const #cir.int<1> : !s32i loc(#loc176)
            %26 = cir.unary(minus, %25) : !s32i, !s32i loc(#loc177)
            cir.call @exit(%26) : (!s32i) -> () extra(#fn_attr) loc(#loc175)
          } loc(#loc389)
        } loc(#loc387)
        cir.scope {
          %20 = cir.const #cir.int<0> : !s32i loc(#loc180)
          cir.store %20, %8 : !s32i, !cir.ptr<!s32i> loc(#loc391)
          cir.for : cond {
            %21 = cir.load %8 : !cir.ptr<!s32i>, !s32i loc(#loc182)
            %22 = cir.const #cir.int<10> : !s32i loc(#loc183)
            %23 = cir.cmp(lt, %21, %22) : !s32i, !cir.bool loc(#loc392)
            cir.condition(%23) loc(#loc184)
          } body {
            cir.scope {
              %21 = cir.const #cir.int<0> : !s32i loc(#loc186)
              %22 = cir.load %9 : !cir.ptr<!cir.ptr<!s32i>>, !cir.ptr<!s32i> loc(#loc187)
              %23 = cir.load %8 : !cir.ptr<!s32i>, !s32i loc(#loc188)
              %24 = cir.ptr_stride(%22 : !cir.ptr<!s32i>, %23 : !s32i), !cir.ptr<!s32i> loc(#loc189)
              cir.store %21, %24 : !s32i, !cir.ptr<!s32i> loc(#loc394)
            } loc(#loc393)
            cir.yield loc(#loc179)
          } step {
            %21 = cir.load %8 : !cir.ptr<!s32i>, !s32i loc(#loc190)
            %22 = cir.unary(inc, %21) : !s32i, !s32i loc(#loc191)
            cir.store %22, %8 : !s32i, !cir.ptr<!s32i> loc(#loc395)
            cir.yield loc(#loc390)
          } loc(#loc390)
        } loc(#loc390)
        cir.scope {
          %20 = cir.load %5 : !cir.ptr<!s32i>, !s32i loc(#loc194)
          %21 = cir.const #cir.int<0> : !s32i loc(#loc195)
          %22 = cir.cmp(ge, %20, %21) : !s32i, !cir.bool loc(#loc397)
          cir.if %22 {
            %23 = cir.const #cir.int<1> : !s32i loc(#loc199)
            %24 = cir.load %9 : !cir.ptr<!cir.ptr<!s32i>>, !cir.ptr<!s32i> loc(#loc200)
            %25 = cir.load %5 : !cir.ptr<!s32i>, !s32i loc(#loc201)
            %26 = cir.ptr_stride(%24 : !cir.ptr<!s32i>, %25 : !s32i), !cir.ptr<!s32i> loc(#loc202)
            cir.store %23, %26 : !s32i, !cir.ptr<!s32i> loc(#loc399)
            cir.scope {
              %27 = cir.const #cir.int<0> : !s32i loc(#loc205)
              cir.store %27, %8 : !s32i, !cir.ptr<!s32i> loc(#loc401)
              cir.for : cond {
                %28 = cir.load %8 : !cir.ptr<!s32i>, !s32i loc(#loc207)
                %29 = cir.const #cir.int<10> : !s32i loc(#loc208)
                %30 = cir.cmp(lt, %28, %29) : !s32i, !cir.bool loc(#loc402)
                cir.condition(%30) loc(#loc209)
              } body {
                cir.scope {
                  %28 = cir.load %9 : !cir.ptr<!cir.ptr<!s32i>>, !cir.ptr<!s32i> loc(#loc211)
                  %29 = cir.load %8 : !cir.ptr<!s32i>, !s32i loc(#loc212)
                  %30 = cir.ptr_stride(%28 : !cir.ptr<!s32i>, %29 : !s32i), !cir.ptr<!s32i> loc(#loc213)
                  %31 = cir.load %30 : !cir.ptr<!s32i>, !s32i loc(#loc211)
                  cir.call @printIntLine(%31) : (!s32i) -> () loc(#loc214)
                } loc(#loc403)
                cir.yield loc(#loc204)
              } step {
                %28 = cir.load %8 : !cir.ptr<!s32i>, !s32i loc(#loc215)
                %29 = cir.unary(inc, %28) : !s32i, !s32i loc(#loc216)
                cir.store %29, %8 : !s32i, !cir.ptr<!s32i> loc(#loc404)
                cir.yield loc(#loc400)
              } loc(#loc400)
            } loc(#loc400)
          } else {
            %23 = cir.get_global @".str.1" : !cir.ptr<!cir.array<!s8i x 32>> loc(#loc217)
            %24 = cir.cast(array_to_ptrdecay, %23 : !cir.ptr<!cir.array<!s8i x 32>>), !cir.ptr<!s8i> loc(#loc217)
            cir.call @printLine(%24) : (!cir.ptr<!s8i>) -> () loc(#loc218)
          } loc(#loc398)
        } loc(#loc396)
        %17 = cir.get_global @free : !cir.ptr<!cir.func<!void (!cir.ptr<!void>)>> loc(#loc219)
        %18 = cir.load %9 : !cir.ptr<!cir.ptr<!s32i>>, !cir.ptr<!s32i> loc(#loc220)
        %19 = cir.cast(bitcast, %18 : !cir.ptr<!s32i>), !cir.ptr<!void> loc(#loc220)
        cir.call @free(%19) : (!cir.ptr<!void>) -> () extra(#fn_attr) loc(#loc219)
      } loc(#loc381)
    } loc(#loc378)
    cir.return loc(#loc146)
  } loc(#loc374)
  cir.global "private" constant cir_private dsolocal @".str.6" = #cir.const_array<"ERROR: Array index is out-of-bounds\00" : !cir.array<!s8i x 36>> : !cir.array<!s8i x 36> {alignment = 1 : i64} loc(#loc221)
  cir.func no_proto internal private @goodB2G() extra(#fn_attr1) {
    %0 = cir.alloca !s32i, !cir.ptr<!s32i>, ["data"] {alignment = 4 : i64} loc(#loc406)
    %1 = cir.const #cir.int<1> : !s32i loc(#loc226)
    %2 = cir.unary(minus, %1) : !s32i, !s32i loc(#loc227)
    cir.store %2, %0 : !s32i, !cir.ptr<!s32i> loc(#loc407)
    cir.scope {
      %3 = cir.alloca !cir.array<!s8i x 14>, !cir.ptr<!cir.array<!s8i x 14>>, ["inputBuffer"] {alignment = 1 : i64} loc(#loc409)
      %4 = cir.const #cir.zero : !cir.array<!s8i x 14> loc(#loc409)
      cir.store %4, %3 : !cir.array<!s8i x 14>, !cir.ptr<!cir.array<!s8i x 14>> loc(#loc409)
      cir.scope {
        %5 = cir.cast(array_to_ptrdecay, %3 : !cir.ptr<!cir.array<!s8i x 14>>), !cir.ptr<!s8i> loc(#loc235)
        %6 = cir.const #cir.int<3> : !s32i loc(#loc236)
        %7 = cir.cast(integral, %6 : !s32i), !u64i loc(#loc236)
        %8 = cir.const #cir.int<4> : !u64i loc(#loc236)
        %9 = cir.binop(mul, %7, %8) : !u64i loc(#loc236)
        %10 = cir.const #cir.int<2> : !s32i loc(#loc236)
        %11 = cir.cast(integral, %10 : !s32i), !u64i loc(#loc236)
        %12 = cir.binop(add, %9, %11) : !u64i loc(#loc236)
        %13 = cir.cast(integral, %12 : !u64i), !s32i loc(#loc236)
        %14 = cir.get_global @stdin : !cir.ptr<!cir.ptr<!ty__IO_FILE>> loc(#loc320)
        %15 = cir.load %14 : !cir.ptr<!cir.ptr<!ty__IO_FILE>>, !cir.ptr<!ty__IO_FILE> loc(#loc237)
        %16 = cir.call @fgets(%5, %13, %15) : (!cir.ptr<!s8i>, !s32i, !cir.ptr<!ty__IO_FILE>) -> !cir.ptr<!s8i> loc(#loc238)
        %17 = cir.const #cir.ptr<null> : !cir.ptr<!void> loc(#loc239)
        %18 = cir.cast(bitcast, %17 : !cir.ptr<!void>), !cir.ptr<!s8i> loc(#loc239)
        %19 = cir.cmp(ne, %16, %18) : !cir.ptr<!s8i>, !cir.bool loc(#loc411)
        cir.if %19 {
          %20 = cir.cast(array_to_ptrdecay, %3 : !cir.ptr<!cir.array<!s8i x 14>>), !cir.ptr<!s8i> loc(#loc243)
          %21 = cir.call @atoi(%20) : (!cir.ptr<!s8i>) -> !s32i extra(#fn_attr) loc(#loc244)
          cir.store %21, %0 : !s32i, !cir.ptr<!s32i> loc(#loc413)
        } else {
          %20 = cir.get_global @".str" : !cir.ptr<!cir.array<!s8i x 16>> loc(#loc247)
          %21 = cir.cast(array_to_ptrdecay, %20 : !cir.ptr<!cir.array<!s8i x 16>>), !cir.ptr<!s8i> loc(#loc247)
          cir.call @printLine(%21) : (!cir.ptr<!s8i>) -> () loc(#loc248)
        } loc(#loc412)
      } loc(#loc410)
    } loc(#loc408)
    cir.scope {
      %3 = cir.alloca !s32i, !cir.ptr<!s32i>, ["dataCopy", init] {alignment = 4 : i64} loc(#loc415)
      %4 = cir.alloca !s32i, !cir.ptr<!s32i>, ["data", init] {alignment = 4 : i64} loc(#loc416)
      %5 = cir.load %0 : !cir.ptr<!s32i>, !s32i loc(#loc252)
      cir.store %5, %3 : !s32i, !cir.ptr<!s32i> loc(#loc415)
      %6 = cir.load %3 : !cir.ptr<!s32i>, !s32i loc(#loc254)
      cir.store %6, %4 : !s32i, !cir.ptr<!s32i> loc(#loc416)
      cir.scope {
        %7 = cir.alloca !s32i, !cir.ptr<!s32i>, ["i"] {alignment = 4 : i64} loc(#loc418)
        %8 = cir.alloca !cir.ptr<!s32i>, !cir.ptr<!cir.ptr<!s32i>>, ["buffer", init] {alignment = 8 : i64} loc(#loc419)
        %9 = cir.get_global @malloc : !cir.ptr<!cir.func<!cir.ptr<!void> (!u64i)>> loc(#loc261)
        %10 = cir.const #cir.int<10> : !s32i loc(#loc262)
        %11 = cir.cast(integral, %10 : !s32i), !u64i loc(#loc262)
        %12 = cir.const #cir.int<4> : !u64i loc(#loc420)
        %13 = cir.binop(mul, %11, %12) : !u64i loc(#loc421)
        %14 = cir.call @malloc(%13) : (!u64i) -> !cir.ptr<!void> extra(#fn_attr) loc(#loc261)
        %15 = cir.cast(bitcast, %14 : !cir.ptr<!void>), !cir.ptr<!s32i> loc(#loc422)
        cir.store %15, %8 : !cir.ptr<!s32i>, !cir.ptr<!cir.ptr<!s32i>> loc(#loc419)
        cir.scope {
          %19 = cir.load %8 : !cir.ptr<!cir.ptr<!s32i>>, !cir.ptr<!s32i> loc(#loc267)
          %20 = cir.const #cir.ptr<null> : !cir.ptr<!void> loc(#loc268)
          %21 = cir.cast(bitcast, %20 : !cir.ptr<!void>), !cir.ptr<!s32i> loc(#loc268)
          %22 = cir.cmp(eq, %19, %21) : !cir.ptr<!s32i>, !cir.bool loc(#loc424)
          cir.if %22 {
            %23 = cir.get_global @exit : !cir.ptr<!cir.func<!void (!s32i)>> loc(#loc270)
            %24 = cir.const #cir.int<1> : !s32i loc(#loc271)
            %25 = cir.unary(minus, %24) : !s32i, !s32i loc(#loc272)
            cir.call @exit(%25) : (!s32i) -> () extra(#fn_attr) loc(#loc270)
          } loc(#loc425)
        } loc(#loc423)
        cir.scope {
          %19 = cir.const #cir.int<0> : !s32i loc(#loc275)
          cir.store %19, %7 : !s32i, !cir.ptr<!s32i> loc(#loc427)
          cir.for : cond {
            %20 = cir.load %7 : !cir.ptr<!s32i>, !s32i loc(#loc277)
            %21 = cir.const #cir.int<10> : !s32i loc(#loc278)
            %22 = cir.cmp(lt, %20, %21) : !s32i, !cir.bool loc(#loc428)
            cir.condition(%22) loc(#loc279)
          } body {
            cir.scope {
              %20 = cir.const #cir.int<0> : !s32i loc(#loc281)
              %21 = cir.load %8 : !cir.ptr<!cir.ptr<!s32i>>, !cir.ptr<!s32i> loc(#loc282)
              %22 = cir.load %7 : !cir.ptr<!s32i>, !s32i loc(#loc283)
              %23 = cir.ptr_stride(%21 : !cir.ptr<!s32i>, %22 : !s32i), !cir.ptr<!s32i> loc(#loc284)
              cir.store %20, %23 : !s32i, !cir.ptr<!s32i> loc(#loc430)
            } loc(#loc429)
            cir.yield loc(#loc274)
          } step {
            %20 = cir.load %7 : !cir.ptr<!s32i>, !s32i loc(#loc285)
            %21 = cir.unary(inc, %20) : !s32i, !s32i loc(#loc286)
            cir.store %21, %7 : !s32i, !cir.ptr<!s32i> loc(#loc431)
            cir.yield loc(#loc426)
          } loc(#loc426)
        } loc(#loc426)
        cir.scope {
          %19 = cir.load %4 : !cir.ptr<!s32i>, !s32i loc(#loc289)
          %20 = cir.const #cir.int<0> : !s32i loc(#loc290)
          %21 = cir.cmp(ge, %19, %20) : !s32i, !cir.bool loc(#loc433)
          %22 = cir.ternary(%21, true {
            %23 = cir.load %4 : !cir.ptr<!s32i>, !s32i loc(#loc292)
            %24 = cir.const #cir.int<10> : !s32i loc(#loc293)
            %25 = cir.cmp(lt, %23, %24) : !s32i, !cir.bool loc(#loc434)
            %26 = cir.ternary(%25, true {
              %27 = cir.const #true loc(#loc291)
              cir.yield %27 : !cir.bool loc(#loc291)
            }, false {
              %27 = cir.const #false loc(#loc291)
              cir.yield %27 : !cir.bool loc(#loc291)
            }) : (!cir.bool) -> !cir.bool loc(#loc291)
            cir.yield %26 : !cir.bool loc(#loc291)
          }, false {
            %23 = cir.const #false loc(#loc291)
            cir.yield %23 : !cir.bool loc(#loc291)
          }) : (!cir.bool) -> !cir.bool loc(#loc291)
          cir.if %22 {
            %23 = cir.const #cir.int<1> : !s32i loc(#loc298)
            %24 = cir.load %8 : !cir.ptr<!cir.ptr<!s32i>>, !cir.ptr<!s32i> loc(#loc299)
            %25 = cir.load %4 : !cir.ptr<!s32i>, !s32i loc(#loc300)
            %26 = cir.ptr_stride(%24 : !cir.ptr<!s32i>, %25 : !s32i), !cir.ptr<!s32i> loc(#loc301)
            cir.store %23, %26 : !s32i, !cir.ptr<!s32i> loc(#loc436)
            cir.scope {
              %27 = cir.const #cir.int<0> : !s32i loc(#loc304)
              cir.store %27, %7 : !s32i, !cir.ptr<!s32i> loc(#loc438)
              cir.for : cond {
                %28 = cir.load %7 : !cir.ptr<!s32i>, !s32i loc(#loc306)
                %29 = cir.const #cir.int<10> : !s32i loc(#loc307)
                %30 = cir.cmp(lt, %28, %29) : !s32i, !cir.bool loc(#loc439)
                cir.condition(%30) loc(#loc308)
              } body {
                cir.scope {
                  %28 = cir.load %8 : !cir.ptr<!cir.ptr<!s32i>>, !cir.ptr<!s32i> loc(#loc310)
                  %29 = cir.load %7 : !cir.ptr<!s32i>, !s32i loc(#loc311)
                  %30 = cir.ptr_stride(%28 : !cir.ptr<!s32i>, %29 : !s32i), !cir.ptr<!s32i> loc(#loc312)
                  %31 = cir.load %30 : !cir.ptr<!s32i>, !s32i loc(#loc310)
                  cir.call @printIntLine(%31) : (!s32i) -> () loc(#loc313)
                } loc(#loc440)
                cir.yield loc(#loc303)
              } step {
                %28 = cir.load %7 : !cir.ptr<!s32i>, !s32i loc(#loc314)
                %29 = cir.unary(inc, %28) : !s32i, !s32i loc(#loc315)
                cir.store %29, %7 : !s32i, !cir.ptr<!s32i> loc(#loc441)
                cir.yield loc(#loc437)
              } loc(#loc437)
            } loc(#loc437)
          } else {
            %23 = cir.get_global @".str.6" : !cir.ptr<!cir.array<!s8i x 36>> loc(#loc221)
            %24 = cir.cast(array_to_ptrdecay, %23 : !cir.ptr<!cir.array<!s8i x 36>>), !cir.ptr<!s8i> loc(#loc221)
            cir.call @printLine(%24) : (!cir.ptr<!s8i>) -> () loc(#loc316)
          } loc(#loc435)
        } loc(#loc432)
        %16 = cir.get_global @free : !cir.ptr<!cir.func<!void (!cir.ptr<!void>)>> loc(#loc317)
        %17 = cir.load %8 : !cir.ptr<!cir.ptr<!s32i>>, !cir.ptr<!s32i> loc(#loc318)
        %18 = cir.cast(bitcast, %17 : !cir.ptr<!s32i>), !cir.ptr<!void> loc(#loc318)
        cir.call @free(%18) : (!cir.ptr<!void>) -> () extra(#fn_attr) loc(#loc317)
      } loc(#loc417)
    } loc(#loc414)
    cir.return loc(#loc223)
  } loc(#loc405)
} loc(#loc)
#loc = loc("/home/ladisgin/git_proj/juliet-c/testcases/CWE122_Heap_Based_Buffer_Overflow/s06/CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_31.c":0:0)
#loc1 = loc("/usr/include/stdio.h":654:1)
#loc2 = loc("/usr/include/stdio.h":655:59)
#loc3 = loc("/usr/include/stdio.h":149:1)
#loc4 = loc("/usr/include/stdio.h":149:14)
#loc5 = loc("/usr/include/stdlib.h":105:1)
#loc6 = loc("/usr/include/stdlib.h":106:33)
#loc7 = loc("../../../testcasesupport/std_testcase_io.h":14:1)
#loc8 = loc("../../../testcasesupport/std_testcase_io.h":14:33)
#loc9 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_31.c":39:23)
#loc10 = loc("/usr/include/stdlib.h":672:1)
#loc11 = loc("/usr/include/stdlib.h":672:45)
#loc12 = loc("/usr/include/stdlib.h":756:1)
#loc13 = loc("/usr/include/stdlib.h":756:70)
#loc14 = loc("../../../testcasesupport/std_testcase_io.h":18:1)
#loc15 = loc("../../../testcasesupport/std_testcase_io.h":18:33)
#loc16 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_31.c":67:27)
#loc17 = loc("/usr/include/stdlib.h":687:1)
#loc18 = loc("/usr/include/stdlib.h":687:32)
#loc19 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_31.c":24:1)
#loc20 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_31.c":72:1)
#loc21 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_31.c":26:5)
#loc22 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_31.c":26:9)
#loc23 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_31.c":28:13)
#loc24 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_31.c":28:12)
#loc25 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_31.c":28:5)
#loc26 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_31.c":29:5)
#loc27 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_31.c":41:5)
#loc28 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_31.c":30:9)
#loc29 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_31.c":30:45)
#loc30 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_31.c":32:9)
#loc31 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_31.c":40:9)
#loc32 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_31.c":32:19)
#loc33 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_31.c":32:32)
#loc34 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_31.c":32:49)
#loc35 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_31.c":32:13)
#loc36 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_31.c":32:59)
#loc37 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_31.c":33:9)
#loc38 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_31.c":36:9)
#loc39 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_31.c":38:9)
#loc40 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_31.c":35:25)
#loc41 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_31.c":35:20)
#loc42 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_31.c":35:13)
#loc43 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_31.c":35:36)
#loc44 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_31.c":39:13)
#loc45 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_31.c":42:5)
#loc46 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_31.c":71:5)
#loc47 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_31.c":43:9)
#loc48 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_31.c":43:24)
#loc49 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_31.c":44:9)
#loc50 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_31.c":44:20)
#loc51 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_31.c":45:9)
#loc52 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_31.c":70:9)
#loc53 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_31.c":46:13)
#loc54 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_31.c":46:17)
#loc55 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_31.c":47:13)
#loc56 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_31.c":47:58)
#loc57 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_31.c":47:35)
#loc58 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_31.c":47:42)
#loc59 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_31.c":47:47)
#loc60 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_31.c":47:57)
#loc61 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_31.c":48:13)
#loc62 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_31.c":48:43)
#loc63 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_31.c":48:17)
#loc64 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_31.c":48:27)
#loc65 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_31.c":48:33)
#loc66 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_31.c":48:34)
#loc67 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_31.c":48:40)
#loc68 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_31.c":48:39)
#loc69 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_31.c":50:13)
#loc70 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_31.c":53:13)
#loc71 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_31.c":50:22)
#loc72 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_31.c":50:18)
#loc73 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_31.c":50:25)
#loc74 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_31.c":50:29)
#loc75 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_31.c":50:27)
#loc76 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_31.c":51:13)
#loc77 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_31.c":52:29)
#loc78 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_31.c":52:17)
#loc79 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_31.c":52:24)
#loc80 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_31.c":52:25)
#loc81 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_31.c":50:34)
#loc82 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_31.c":50:33)
#loc83 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_31.c":56:13)
#loc84 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_31.c":68:13)
#loc85 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_31.c":56:17)
#loc86 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_31.c":56:25)
#loc87 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_31.c":57:13)
#loc88 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_31.c":64:13)
#loc89 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_31.c":66:13)
#loc90 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_31.c":58:32)
#loc91 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_31.c":58:17)
#loc92 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_31.c":58:24)
#loc93 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_31.c":58:28)
#loc94 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_31.c":60:17)
#loc95 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_31.c":63:17)
#loc96 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_31.c":60:25)
#loc97 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_31.c":60:21)
#loc98 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_31.c":60:28)
#loc99 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_31.c":60:32)
#loc100 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_31.c":60:30)
#loc101 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_31.c":61:17)
#loc102 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_31.c":62:34)
#loc103 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_31.c":62:41)
#loc104 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_31.c":62:42)
#loc105 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_31.c":62:21)
#loc106 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_31.c":60:37)
#loc107 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_31.c":60:36)
#loc108 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_31.c":67:17)
#loc109 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_31.c":69:13)
#loc110 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_31.c":69:18)
#loc111 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_31.c":169:1)
#loc112 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_31.c":173:1)
#loc113 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_31.c":171:5)
#loc114 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_31.c":171:13)
#loc115 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_31.c":172:5)
#loc116 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_31.c":172:13)
#loc117 = loc("/usr/include/stdlib.h":575:1)
#loc118 = loc("/usr/include/stdlib.h":575:41)
#loc119 = loc("/usr/include/time.h":76:1)
#loc120 = loc("/usr/include/time.h":76:38)
#loc121 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_31.c":188:15)
#loc122 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_31.c":190:15)
#loc123 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_31.c":193:15)
#loc124 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_31.c":195:15)
#loc125 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_31.c":183:1)
#loc126 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_31.c":198:1)
#loc131 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_31.c":184:1)
#loc132 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_31.c":186:27)
#loc133 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_31.c":186:22)
#loc134 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_31.c":186:5)
#loc135 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_31.c":188:5)
#loc136 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_31.c":189:5)
#loc137 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_31.c":189:63)
#loc138 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_31.c":190:5)
#loc139 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_31.c":193:5)
#loc140 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_31.c":194:5)
#loc141 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_31.c":194:62)
#loc142 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_31.c":195:5)
#loc143 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_31.c":197:12)
#loc144 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_31.c":197:5)
#loc145 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_31.c":79:1)
#loc146 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_31.c":117:1)
#loc147 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_31.c":81:5)
#loc148 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_31.c":81:9)
#loc149 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_31.c":83:13)
#loc150 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_31.c":83:12)
#loc151 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_31.c":83:5)
#loc152 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_31.c":86:12)
#loc153 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_31.c":86:5)
#loc154 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_31.c":87:5)
#loc155 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_31.c":116:5)
#loc156 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_31.c":88:9)
#loc157 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_31.c":88:24)
#loc158 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_31.c":89:9)
#loc159 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_31.c":89:20)
#loc160 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_31.c":90:9)
#loc161 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_31.c":115:9)
#loc162 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_31.c":91:13)
#loc163 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_31.c":91:17)
#loc164 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_31.c":92:13)
#loc165 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_31.c":92:58)
#loc166 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_31.c":92:35)
#loc167 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_31.c":92:42)
#loc168 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_31.c":92:47)
#loc169 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_31.c":92:57)
#loc170 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_31.c":93:13)
#loc171 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_31.c":93:43)
#loc172 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_31.c":93:17)
#loc173 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_31.c":93:27)
#loc174 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_31.c":93:33)
#loc175 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_31.c":93:34)
#loc176 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_31.c":93:40)
#loc177 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_31.c":93:39)
#loc178 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_31.c":95:13)
#loc179 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_31.c":98:13)
#loc180 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_31.c":95:22)
#loc181 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_31.c":95:18)
#loc182 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_31.c":95:25)
#loc183 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_31.c":95:29)
#loc184 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_31.c":95:27)
#loc185 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_31.c":96:13)
#loc186 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_31.c":97:29)
#loc187 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_31.c":97:17)
#loc188 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_31.c":97:24)
#loc189 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_31.c":97:25)
#loc190 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_31.c":95:34)
#loc191 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_31.c":95:33)
#loc192 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_31.c":101:13)
#loc193 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_31.c":113:13)
#loc194 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_31.c":101:17)
#loc195 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_31.c":101:25)
#loc196 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_31.c":102:13)
#loc197 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_31.c":109:13)
#loc198 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_31.c":111:13)
#loc199 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_31.c":103:32)
#loc200 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_31.c":103:17)
#loc201 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_31.c":103:24)
#loc202 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_31.c":103:28)
#loc203 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_31.c":105:17)
#loc204 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_31.c":108:17)
#loc205 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_31.c":105:25)
#loc206 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_31.c":105:21)
#loc207 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_31.c":105:28)
#loc208 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_31.c":105:32)
#loc209 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_31.c":105:30)
#loc210 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_31.c":106:17)
#loc211 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_31.c":107:34)
#loc212 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_31.c":107:41)
#loc213 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_31.c":107:42)
#loc214 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_31.c":107:21)
#loc215 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_31.c":105:37)
#loc216 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_31.c":105:36)
#loc217 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_31.c":112:27)
#loc218 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_31.c":112:17)
#loc219 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_31.c":114:13)
#loc220 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_31.c":114:18)
#loc221 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_31.c":162:27)
#loc222 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_31.c":120:1)
#loc223 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_31.c":167:1)
#loc224 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_31.c":122:5)
#loc225 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_31.c":122:9)
#loc226 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_31.c":124:13)
#loc227 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_31.c":124:12)
#loc228 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_31.c":124:5)
#loc229 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_31.c":125:5)
#loc230 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_31.c":137:5)
#loc231 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_31.c":126:9)
#loc232 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_31.c":126:45)
#loc233 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_31.c":128:9)
#loc234 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_31.c":136:9)
#loc235 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_31.c":128:19)
#loc236 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_31.c":128:32)
#loc237 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_31.c":128:49)
#loc238 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_31.c":128:13)
#loc239 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_31.c":128:59)
#loc240 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_31.c":129:9)
#loc241 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_31.c":132:9)
#loc242 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_31.c":134:9)
#loc243 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_31.c":131:25)
#loc244 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_31.c":131:20)
#loc245 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_31.c":131:13)
#loc246 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_31.c":131:36)
#loc247 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_31.c":135:23)
#loc248 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_31.c":135:13)
#loc249 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_31.c":138:5)
#loc250 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_31.c":166:5)
#loc251 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_31.c":139:9)
#loc252 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_31.c":139:24)
#loc253 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_31.c":140:9)
#loc254 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_31.c":140:20)
#loc255 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_31.c":141:9)
#loc256 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_31.c":165:9)
#loc257 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_31.c":142:13)
#loc258 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_31.c":142:17)
#loc259 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_31.c":143:13)
#loc260 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_31.c":143:58)
#loc261 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_31.c":143:35)
#loc262 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_31.c":143:42)
#loc263 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_31.c":143:47)
#loc264 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_31.c":143:57)
#loc265 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_31.c":144:13)
#loc266 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_31.c":144:43)
#loc267 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_31.c":144:17)
#loc268 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_31.c":144:27)
#loc269 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_31.c":144:33)
#loc270 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_31.c":144:34)
#loc271 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_31.c":144:40)
#loc272 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_31.c":144:39)
#loc273 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_31.c":146:13)
#loc274 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_31.c":149:13)
#loc275 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_31.c":146:22)
#loc276 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_31.c":146:18)
#loc277 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_31.c":146:25)
#loc278 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_31.c":146:29)
#loc279 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_31.c":146:27)
#loc280 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_31.c":147:13)
#loc281 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_31.c":148:29)
#loc282 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_31.c":148:17)
#loc283 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_31.c":148:24)
#loc284 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_31.c":148:25)
#loc285 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_31.c":146:34)
#loc286 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_31.c":146:33)
#loc287 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_31.c":151:13)
#loc288 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_31.c":163:13)
#loc289 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_31.c":151:17)
#loc290 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_31.c":151:25)
#loc291 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_31.c":151:27)
#loc292 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_31.c":151:30)
#loc293 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_31.c":151:38)
#loc294 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_31.c":151:40)
#loc295 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_31.c":152:13)
#loc296 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_31.c":159:13)
#loc297 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_31.c":161:13)
#loc298 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_31.c":153:32)
#loc299 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_31.c":153:17)
#loc300 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_31.c":153:24)
#loc301 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_31.c":153:28)
#loc302 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_31.c":155:17)
#loc303 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_31.c":158:17)
#loc304 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_31.c":155:25)
#loc305 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_31.c":155:21)
#loc306 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_31.c":155:28)
#loc307 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_31.c":155:32)
#loc308 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_31.c":155:30)
#loc309 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_31.c":156:17)
#loc310 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_31.c":157:34)
#loc311 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_31.c":157:41)
#loc312 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_31.c":157:42)
#loc313 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_31.c":157:21)
#loc314 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_31.c":155:37)
#loc315 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_31.c":155:36)
#loc316 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_31.c":162:17)
#loc317 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_31.c":164:13)
#loc318 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_31.c":164:18)
#loc319 = loc(fused[#loc1, #loc2])
#loc320 = loc(fused[#loc3, #loc4])
#loc321 = loc(fused[#loc5, #loc6])
#loc322 = loc(fused[#loc7, #loc8])
#loc323 = loc(fused[#loc10, #loc11])
#loc324 = loc(fused[#loc12, #loc13])
#loc325 = loc(fused[#loc14, #loc15])
#loc326 = loc(fused[#loc17, #loc18])
#loc327 = loc(fused[#loc19, #loc20])
#loc328 = loc(fused[#loc21, #loc22])
#loc329 = loc(fused[#loc25, #loc23])
#loc330 = loc(fused[#loc26, #loc27])
#loc331 = loc(fused[#loc28, #loc29])
#loc332 = loc(fused[#loc30, #loc31])
#loc333 = loc(fused[#loc35, #loc36])
#loc334 = loc(fused[#loc37, #loc38, #loc39, #loc31])
#loc335 = loc(fused[#loc42, #loc43])
#loc336 = loc(fused[#loc45, #loc46])
#loc337 = loc(fused[#loc47, #loc48])
#loc338 = loc(fused[#loc49, #loc50])
#loc339 = loc(fused[#loc51, #loc52])
#loc340 = loc(fused[#loc53, #loc54])
#loc341 = loc(fused[#loc55, #loc56])
#loc342 = loc(fused[#loc59, #loc60])
#loc343 = loc(fused[#loc58, #loc60])
#loc344 = loc(fused[#loc57, #loc56])
#loc345 = loc(fused[#loc61, #loc62])
#loc346 = loc(fused[#loc63, #loc64])
#loc347 = loc(fused[#loc65, #loc62])
#loc348 = loc(fused[#loc69, #loc70])
#loc349 = loc(fused[#loc72, #loc71])
#loc350 = loc(fused[#loc73, #loc74])
#loc351 = loc(fused[#loc76, #loc70])
#loc352 = loc(fused[#loc78, #loc77])
#loc353 = loc(fused[#loc82, #loc81])
#loc354 = loc(fused[#loc83, #loc84])
#loc355 = loc(fused[#loc85, #loc86])
#loc356 = loc(fused[#loc87, #loc88, #loc89, #loc84])
#loc357 = loc(fused[#loc91, #loc90])
#loc358 = loc(fused[#loc94, #loc95])
#loc359 = loc(fused[#loc97, #loc96])
#loc360 = loc(fused[#loc98, #loc99])
#loc361 = loc(fused[#loc101, #loc95])
#loc362 = loc(fused[#loc107, #loc106])
#loc363 = loc(fused[#loc111, #loc112])
#loc364 = loc(fused[#loc113, #loc114])
#loc365 = loc(fused[#loc115, #loc116])
#loc366 = loc(fused[#loc117, #loc118])
#loc367 = loc(fused[#loc119, #loc120])
#loc368 = loc(fused[#loc125, #loc126])
#loc371 = loc(fused[#loc136, #loc137])
#loc372 = loc(fused[#loc140, #loc141])
#loc373 = loc(fused[#loc144, #loc143])
#loc374 = loc(fused[#loc145, #loc146])
#loc375 = loc(fused[#loc147, #loc148])
#loc376 = loc(fused[#loc151, #loc149])
#loc377 = loc(fused[#loc153, #loc152])
#loc378 = loc(fused[#loc154, #loc155])
#loc379 = loc(fused[#loc156, #loc157])
#loc380 = loc(fused[#loc158, #loc159])
#loc381 = loc(fused[#loc160, #loc161])
#loc382 = loc(fused[#loc162, #loc163])
#loc383 = loc(fused[#loc164, #loc165])
#loc384 = loc(fused[#loc168, #loc169])
#loc385 = loc(fused[#loc167, #loc169])
#loc386 = loc(fused[#loc166, #loc165])
#loc387 = loc(fused[#loc170, #loc171])
#loc388 = loc(fused[#loc172, #loc173])
#loc389 = loc(fused[#loc174, #loc171])
#loc390 = loc(fused[#loc178, #loc179])
#loc391 = loc(fused[#loc181, #loc180])
#loc392 = loc(fused[#loc182, #loc183])
#loc393 = loc(fused[#loc185, #loc179])
#loc394 = loc(fused[#loc187, #loc186])
#loc395 = loc(fused[#loc191, #loc190])
#loc396 = loc(fused[#loc192, #loc193])
#loc397 = loc(fused[#loc194, #loc195])
#loc398 = loc(fused[#loc196, #loc197, #loc198, #loc193])
#loc399 = loc(fused[#loc200, #loc199])
#loc400 = loc(fused[#loc203, #loc204])
#loc401 = loc(fused[#loc206, #loc205])
#loc402 = loc(fused[#loc207, #loc208])
#loc403 = loc(fused[#loc210, #loc204])
#loc404 = loc(fused[#loc216, #loc215])
#loc405 = loc(fused[#loc222, #loc223])
#loc406 = loc(fused[#loc224, #loc225])
#loc407 = loc(fused[#loc228, #loc226])
#loc408 = loc(fused[#loc229, #loc230])
#loc409 = loc(fused[#loc231, #loc232])
#loc410 = loc(fused[#loc233, #loc234])
#loc411 = loc(fused[#loc238, #loc239])
#loc412 = loc(fused[#loc240, #loc241, #loc242, #loc234])
#loc413 = loc(fused[#loc245, #loc246])
#loc414 = loc(fused[#loc249, #loc250])
#loc415 = loc(fused[#loc251, #loc252])
#loc416 = loc(fused[#loc253, #loc254])
#loc417 = loc(fused[#loc255, #loc256])
#loc418 = loc(fused[#loc257, #loc258])
#loc419 = loc(fused[#loc259, #loc260])
#loc420 = loc(fused[#loc263, #loc264])
#loc421 = loc(fused[#loc262, #loc264])
#loc422 = loc(fused[#loc261, #loc260])
#loc423 = loc(fused[#loc265, #loc266])
#loc424 = loc(fused[#loc267, #loc268])
#loc425 = loc(fused[#loc269, #loc266])
#loc426 = loc(fused[#loc273, #loc274])
#loc427 = loc(fused[#loc276, #loc275])
#loc428 = loc(fused[#loc277, #loc278])
#loc429 = loc(fused[#loc280, #loc274])
#loc430 = loc(fused[#loc282, #loc281])
#loc431 = loc(fused[#loc286, #loc285])
#loc432 = loc(fused[#loc287, #loc288])
#loc433 = loc(fused[#loc289, #loc290])
#loc434 = loc(fused[#loc292, #loc294])
#loc435 = loc(fused[#loc295, #loc296, #loc297, #loc288])
#loc436 = loc(fused[#loc299, #loc298])
#loc437 = loc(fused[#loc302, #loc303])
#loc438 = loc(fused[#loc305, #loc304])
#loc439 = loc(fused[#loc306, #loc307])
#loc440 = loc(fused[#loc309, #loc303])
#loc441 = loc(fused[#loc315, #loc314])
