!s32i = !cir.int<s, 32>
!s8i = !cir.int<s, 8>
!u64i = !cir.int<u, 64>
!void = !cir.void
#fn_attr = #cir<extra({nothrow = #cir.nothrow})>
#fn_attr1 = #cir<extra({inline = #cir.inline<no>, nothrow = #cir.nothrow, optnone = #cir.optnone, uwtable = #cir.uwtable<async>})>
module @"/workspaces/juliet-c/testcases/CWE122_Heap_Based_Buffer_Overflow/s07/CWE122_Heap_Based_Buffer_Overflow__c_CWE805_char_memmove_16.c" attributes {cir.lang = #cir.lang<c>, cir.sob = #cir.signed_overflow_behavior<undefined>, cir.triple = "x86_64-unknown-linux-gnu", cir.type_size_info = #cir.type_size_info<char = 8, int = 32, size_t = 64>, cir.uwtable = #cir.uwtable<async>, dlti.dl_spec = #dlti.dl_spec<i32 = dense<32> : vector<2xi64>, i8 = dense<8> : vector<2xi64>, i16 = dense<16> : vector<2xi64>, !llvm.ptr = dense<64> : vector<4xi64>, i1 = dense<8> : vector<2xi64>, f80 = dense<128> : vector<2xi64>, i128 = dense<128> : vector<2xi64>, !llvm.ptr<270> = dense<32> : vector<4xi64>, i64 = dense<64> : vector<2xi64>, !llvm.ptr<271> = dense<32> : vector<4xi64>, !llvm.ptr<272> = dense<64> : vector<4xi64>, f64 = dense<64> : vector<2xi64>, f16 = dense<16> : vector<2xi64>, f128 = dense<128> : vector<2xi64>, "dlti.stack_alignment" = 128 : i64, "dlti.mangling_mode" = "e", "dlti.endianness" = "little">} {
  cir.func private @malloc(!u64i) -> !cir.ptr<!void> extra(#fn_attr) loc(#loc131)
  cir.func private @exit(!s32i) extra(#fn_attr) loc(#loc132)
  cir.func private @printLine(!cir.ptr<!s8i>) loc(#loc133)
  cir.func private @free(!cir.ptr<!void>) extra(#fn_attr) loc(#loc134)
  cir.func no_proto @CWE122_Heap_Based_Buffer_Overflow__c_CWE805_char_memmove_16_bad() extra(#fn_attr1) {
    %0 = cir.alloca !cir.ptr<!s8i>, !cir.ptr<!cir.ptr<!s8i>>, ["data"] {alignment = 8 : i64} loc(#loc136)
    %1 = cir.const #cir.ptr<null> : !cir.ptr<!s8i> loc(#loc13)
    cir.store %1, %0 : !cir.ptr<!s8i>, !cir.ptr<!cir.ptr<!s8i>> loc(#loc137)
    cir.scope {
      cir.while {
        %2 = cir.const #cir.int<1> : !s32i loc(#loc17)
        %3 = cir.cast(int_to_bool, %2 : !s32i), !cir.bool loc(#loc17)
        cir.condition(%3) loc(#loc17)
      } do {
        cir.scope {
          %2 = cir.get_global @malloc : !cir.ptr<!cir.func<(!u64i) -> !cir.ptr<!void>>> loc(#loc19)
          %3 = cir.const #cir.int<50> : !s32i loc(#loc20)
          %4 = cir.cast(integral, %3 : !s32i), !u64i loc(#loc20)
          %5 = cir.const #cir.int<1> : !u64i loc(#loc140)
          %6 = cir.binop(mul, %4, %5) : !u64i loc(#loc141)
          %7 = cir.call @malloc(%6) : (!u64i) -> !cir.ptr<!void> extra(#fn_attr) loc(#loc19)
          %8 = cir.cast(bitcast, %7 : !cir.ptr<!void>), !cir.ptr<!s8i> loc(#loc142)
          cir.store %8, %0 : !cir.ptr<!s8i>, !cir.ptr<!cir.ptr<!s8i>> loc(#loc143)
          cir.scope {
            %14 = cir.load %0 : !cir.ptr<!cir.ptr<!s8i>>, !cir.ptr<!s8i> loc(#loc27)
            %15 = cir.const #cir.ptr<null> : !cir.ptr<!void> loc(#loc28)
            %16 = cir.cast(bitcast, %15 : !cir.ptr<!void>), !cir.ptr<!s8i> loc(#loc28)
            %17 = cir.cmp(eq, %14, %16) : !cir.ptr<!s8i>, !cir.bool loc(#loc145)
            cir.if %17 {
              %18 = cir.get_global @exit : !cir.ptr<!cir.func<(!s32i)>> loc(#loc30)
              %19 = cir.const #cir.int<1> : !s32i loc(#loc31)
              %20 = cir.unary(minus, %19) nsw : !s32i, !s32i loc(#loc32)
              cir.call @exit(%20) : (!s32i) -> () extra(#fn_attr) loc(#loc30)
            } loc(#loc146)
          } loc(#loc144)
          %9 = cir.const #cir.int<0> : !s32i loc(#loc33)
          %10 = cir.cast(integral, %9 : !s32i), !s8i loc(#loc33)
          %11 = cir.load %0 : !cir.ptr<!cir.ptr<!s8i>>, !cir.ptr<!s8i> loc(#loc34)
          %12 = cir.const #cir.int<0> : !s32i loc(#loc35)
          %13 = cir.ptr_stride(%11 : !cir.ptr<!s8i>, %12 : !s32i), !cir.ptr<!s8i> loc(#loc36)
          cir.store %10, %13 : !s8i, !cir.ptr<!s8i> loc(#loc147)
          cir.break loc(#loc37)
        } loc(#loc139)
        cir.yield loc(#loc16)
      } loc(#loc138)
    } loc(#loc138)
    cir.scope {
      %2 = cir.alloca !cir.array<!s8i x 100>, !cir.ptr<!cir.array<!s8i x 100>>, ["source"] {alignment = 16 : i64} loc(#loc149)
      %3 = cir.cast(array_to_ptrdecay, %2 : !cir.ptr<!cir.array<!s8i x 100>>), !cir.ptr<!s8i> loc(#loc42)
      %4 = cir.cast(bitcast, %3 : !cir.ptr<!s8i>), !cir.ptr<!void> loc(#loc42)
      %5 = cir.const #cir.int<67> : !s32i loc(#loc43)
      %6 = cir.const #cir.int<100> : !s32i loc(#loc44)
      %7 = cir.const #cir.int<1> : !s32i loc(#loc45)
      %8 = cir.binop(sub, %6, %7) nsw : !s32i loc(#loc44)
      %9 = cir.cast(integral, %8 : !s32i), !u64i loc(#loc44)
      cir.libc.memset %9 bytes from %4 set to %5 : !cir.ptr<!void>, !s32i, !u64i loc(#loc150)
      %10 = cir.const #cir.int<0> : !s32i loc(#loc48)
      %11 = cir.cast(integral, %10 : !s32i), !s8i loc(#loc48)
      %12 = cir.const #cir.int<100> : !s32i loc(#loc49)
      %13 = cir.const #cir.int<1> : !s32i loc(#loc50)
      %14 = cir.binop(sub, %12, %13) nsw : !s32i loc(#loc49)
      %15 = cir.cast(array_to_ptrdecay, %2 : !cir.ptr<!cir.array<!s8i x 100>>), !cir.ptr<!s8i> loc(#loc51)
      %16 = cir.ptr_stride(%15 : !cir.ptr<!s8i>, %14 : !s32i), !cir.ptr<!s8i> loc(#loc51)
      cir.store %11, %16 : !s8i, !cir.ptr<!s8i> loc(#loc151)
      %17 = cir.load %0 : !cir.ptr<!cir.ptr<!s8i>>, !cir.ptr<!s8i> loc(#loc52)
      %18 = cir.cast(bitcast, %17 : !cir.ptr<!s8i>), !cir.ptr<!void> loc(#loc52)
      %19 = cir.cast(array_to_ptrdecay, %2 : !cir.ptr<!cir.array<!s8i x 100>>), !cir.ptr<!s8i> loc(#loc53)
      %20 = cir.cast(bitcast, %19 : !cir.ptr<!s8i>), !cir.ptr<!void> loc(#loc53)
      %21 = cir.const #cir.int<100> : !s32i loc(#loc54)
      %22 = cir.cast(integral, %21 : !s32i), !u64i loc(#loc54)
      %23 = cir.const #cir.int<1> : !u64i loc(#loc152)
      %24 = cir.binop(mul, %22, %23) : !u64i loc(#loc153)
      cir.libc.memmove %24 bytes from %20 to %18 : !cir.ptr<!void>, !u64i loc(#loc154)
      %25 = cir.const #cir.int<0> : !s32i loc(#loc59)
      %26 = cir.cast(integral, %25 : !s32i), !s8i loc(#loc59)
      %27 = cir.load %0 : !cir.ptr<!cir.ptr<!s8i>>, !cir.ptr<!s8i> loc(#loc60)
      %28 = cir.const #cir.int<100> : !s32i loc(#loc61)
      %29 = cir.const #cir.int<1> : !s32i loc(#loc62)
      %30 = cir.binop(sub, %28, %29) nsw : !s32i loc(#loc61)
      %31 = cir.ptr_stride(%27 : !cir.ptr<!s8i>, %30 : !s32i), !cir.ptr<!s8i> loc(#loc63)
      cir.store %26, %31 : !s8i, !cir.ptr<!s8i> loc(#loc155)
      %32 = cir.load %0 : !cir.ptr<!cir.ptr<!s8i>>, !cir.ptr<!s8i> loc(#loc64)
      cir.call @printLine(%32) : (!cir.ptr<!s8i>) -> () loc(#loc65)
      %33 = cir.get_global @free : !cir.ptr<!cir.func<(!cir.ptr<!void>)>> loc(#loc66)
      %34 = cir.load %0 : !cir.ptr<!cir.ptr<!s8i>>, !cir.ptr<!s8i> loc(#loc67)
      %35 = cir.cast(bitcast, %34 : !cir.ptr<!s8i>), !cir.ptr<!void> loc(#loc67)
      cir.call @free(%35) : (!cir.ptr<!void>) -> () extra(#fn_attr) loc(#loc66)
    } loc(#loc148)
    cir.return loc(#loc10)
  } loc(#loc135)
  cir.func no_proto @CWE122_Heap_Based_Buffer_Overflow__c_CWE805_char_memmove_16_good() extra(#fn_attr1) {
    %0 = cir.get_global @goodG2B : !cir.ptr<!cir.func<()>> loc(#loc157)
    cir.call %0() : (!cir.ptr<!cir.func<()>>) -> () loc(#loc70)
    cir.return loc(#loc69)
  } loc(#loc156)
  cir.func no_proto internal private @goodG2B() extra(#fn_attr1) {
    %0 = cir.alloca !cir.ptr<!s8i>, !cir.ptr<!cir.ptr<!s8i>>, ["data"] {alignment = 8 : i64} loc(#loc159)
    %1 = cir.const #cir.ptr<null> : !cir.ptr<!s8i> loc(#loc76)
    cir.store %1, %0 : !cir.ptr<!s8i>, !cir.ptr<!cir.ptr<!s8i>> loc(#loc160)
    cir.scope {
      cir.while {
        %2 = cir.const #cir.int<1> : !s32i loc(#loc80)
        %3 = cir.cast(int_to_bool, %2 : !s32i), !cir.bool loc(#loc80)
        cir.condition(%3) loc(#loc80)
      } do {
        cir.scope {
          %2 = cir.get_global @malloc : !cir.ptr<!cir.func<(!u64i) -> !cir.ptr<!void>>> loc(#loc82)
          %3 = cir.const #cir.int<100> : !s32i loc(#loc83)
          %4 = cir.cast(integral, %3 : !s32i), !u64i loc(#loc83)
          %5 = cir.const #cir.int<1> : !u64i loc(#loc163)
          %6 = cir.binop(mul, %4, %5) : !u64i loc(#loc164)
          %7 = cir.call @malloc(%6) : (!u64i) -> !cir.ptr<!void> extra(#fn_attr) loc(#loc82)
          %8 = cir.cast(bitcast, %7 : !cir.ptr<!void>), !cir.ptr<!s8i> loc(#loc165)
          cir.store %8, %0 : !cir.ptr<!s8i>, !cir.ptr<!cir.ptr<!s8i>> loc(#loc166)
          cir.scope {
            %14 = cir.load %0 : !cir.ptr<!cir.ptr<!s8i>>, !cir.ptr<!s8i> loc(#loc90)
            %15 = cir.const #cir.ptr<null> : !cir.ptr<!void> loc(#loc91)
            %16 = cir.cast(bitcast, %15 : !cir.ptr<!void>), !cir.ptr<!s8i> loc(#loc91)
            %17 = cir.cmp(eq, %14, %16) : !cir.ptr<!s8i>, !cir.bool loc(#loc168)
            cir.if %17 {
              %18 = cir.get_global @exit : !cir.ptr<!cir.func<(!s32i)>> loc(#loc93)
              %19 = cir.const #cir.int<1> : !s32i loc(#loc94)
              %20 = cir.unary(minus, %19) nsw : !s32i, !s32i loc(#loc95)
              cir.call @exit(%20) : (!s32i) -> () extra(#fn_attr) loc(#loc93)
            } loc(#loc169)
          } loc(#loc167)
          %9 = cir.const #cir.int<0> : !s32i loc(#loc96)
          %10 = cir.cast(integral, %9 : !s32i), !s8i loc(#loc96)
          %11 = cir.load %0 : !cir.ptr<!cir.ptr<!s8i>>, !cir.ptr<!s8i> loc(#loc97)
          %12 = cir.const #cir.int<0> : !s32i loc(#loc98)
          %13 = cir.ptr_stride(%11 : !cir.ptr<!s8i>, %12 : !s32i), !cir.ptr<!s8i> loc(#loc99)
          cir.store %10, %13 : !s8i, !cir.ptr<!s8i> loc(#loc170)
          cir.break loc(#loc100)
        } loc(#loc162)
        cir.yield loc(#loc79)
      } loc(#loc161)
    } loc(#loc161)
    cir.scope {
      %2 = cir.alloca !cir.array<!s8i x 100>, !cir.ptr<!cir.array<!s8i x 100>>, ["source"] {alignment = 16 : i64} loc(#loc172)
      %3 = cir.cast(array_to_ptrdecay, %2 : !cir.ptr<!cir.array<!s8i x 100>>), !cir.ptr<!s8i> loc(#loc105)
      %4 = cir.cast(bitcast, %3 : !cir.ptr<!s8i>), !cir.ptr<!void> loc(#loc105)
      %5 = cir.const #cir.int<67> : !s32i loc(#loc106)
      %6 = cir.const #cir.int<100> : !s32i loc(#loc107)
      %7 = cir.const #cir.int<1> : !s32i loc(#loc108)
      %8 = cir.binop(sub, %6, %7) nsw : !s32i loc(#loc107)
      %9 = cir.cast(integral, %8 : !s32i), !u64i loc(#loc107)
      cir.libc.memset %9 bytes from %4 set to %5 : !cir.ptr<!void>, !s32i, !u64i loc(#loc173)
      %10 = cir.const #cir.int<0> : !s32i loc(#loc111)
      %11 = cir.cast(integral, %10 : !s32i), !s8i loc(#loc111)
      %12 = cir.const #cir.int<100> : !s32i loc(#loc112)
      %13 = cir.const #cir.int<1> : !s32i loc(#loc113)
      %14 = cir.binop(sub, %12, %13) nsw : !s32i loc(#loc112)
      %15 = cir.cast(array_to_ptrdecay, %2 : !cir.ptr<!cir.array<!s8i x 100>>), !cir.ptr<!s8i> loc(#loc114)
      %16 = cir.ptr_stride(%15 : !cir.ptr<!s8i>, %14 : !s32i), !cir.ptr<!s8i> loc(#loc114)
      cir.store %11, %16 : !s8i, !cir.ptr<!s8i> loc(#loc174)
      %17 = cir.load %0 : !cir.ptr<!cir.ptr<!s8i>>, !cir.ptr<!s8i> loc(#loc115)
      %18 = cir.cast(bitcast, %17 : !cir.ptr<!s8i>), !cir.ptr<!void> loc(#loc115)
      %19 = cir.cast(array_to_ptrdecay, %2 : !cir.ptr<!cir.array<!s8i x 100>>), !cir.ptr<!s8i> loc(#loc116)
      %20 = cir.cast(bitcast, %19 : !cir.ptr<!s8i>), !cir.ptr<!void> loc(#loc116)
      %21 = cir.const #cir.int<100> : !s32i loc(#loc117)
      %22 = cir.cast(integral, %21 : !s32i), !u64i loc(#loc117)
      %23 = cir.const #cir.int<1> : !u64i loc(#loc175)
      %24 = cir.binop(mul, %22, %23) : !u64i loc(#loc176)
      cir.libc.memmove %24 bytes from %20 to %18 : !cir.ptr<!void>, !u64i loc(#loc177)
      %25 = cir.const #cir.int<0> : !s32i loc(#loc122)
      %26 = cir.cast(integral, %25 : !s32i), !s8i loc(#loc122)
      %27 = cir.load %0 : !cir.ptr<!cir.ptr<!s8i>>, !cir.ptr<!s8i> loc(#loc123)
      %28 = cir.const #cir.int<100> : !s32i loc(#loc124)
      %29 = cir.const #cir.int<1> : !s32i loc(#loc125)
      %30 = cir.binop(sub, %28, %29) nsw : !s32i loc(#loc124)
      %31 = cir.ptr_stride(%27 : !cir.ptr<!s8i>, %30 : !s32i), !cir.ptr<!s8i> loc(#loc126)
      cir.store %26, %31 : !s8i, !cir.ptr<!s8i> loc(#loc178)
      %32 = cir.load %0 : !cir.ptr<!cir.ptr<!s8i>>, !cir.ptr<!s8i> loc(#loc127)
      cir.call @printLine(%32) : (!cir.ptr<!s8i>) -> () loc(#loc128)
      %33 = cir.get_global @free : !cir.ptr<!cir.func<(!cir.ptr<!void>)>> loc(#loc129)
      %34 = cir.load %0 : !cir.ptr<!cir.ptr<!s8i>>, !cir.ptr<!s8i> loc(#loc130)
      %35 = cir.cast(bitcast, %34 : !cir.ptr<!s8i>), !cir.ptr<!void> loc(#loc130)
      cir.call @free(%35) : (!cir.ptr<!void>) -> () extra(#fn_attr) loc(#loc129)
    } loc(#loc171)
    cir.return loc(#loc73)
  } loc(#loc158)
} loc(#loc)
#loc = loc("/workspaces/juliet-c/testcases/CWE122_Heap_Based_Buffer_Overflow/s07/CWE122_Heap_Based_Buffer_Overflow__c_CWE805_char_memmove_16.c":0:0)
#loc1 = loc("/usr/include/stdlib.h":672:1)
#loc2 = loc("/usr/include/stdlib.h":672:45)
#loc3 = loc("/usr/include/stdlib.h":756:1)
#loc4 = loc("/usr/include/stdlib.h":756:70)
#loc5 = loc("../../../testcasesupport/std_testcase_io.h":14:1)
#loc6 = loc("../../../testcasesupport/std_testcase_io.h":14:33)
#loc7 = loc("/usr/include/stdlib.h":687:1)
#loc8 = loc("/usr/include/stdlib.h":687:32)
#loc9 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_char_memmove_16.c":23:1)
#loc10 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_char_memmove_16.c":45:1)
#loc11 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_char_memmove_16.c":25:5)
#loc12 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_char_memmove_16.c":25:12)
#loc13 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_char_memmove_16.c":26:12)
#loc14 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_char_memmove_16.c":26:5)
#loc15 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_char_memmove_16.c":27:5)
#loc16 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_char_memmove_16.c":34:5)
#loc17 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_char_memmove_16.c":27:11)
#loc18 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_char_memmove_16.c":28:5)
#loc19 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_char_memmove_16.c":30:24)
#loc20 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_char_memmove_16.c":30:31)
#loc21 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_char_memmove_16.c":30:34)
#loc22 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_char_memmove_16.c":30:45)
#loc23 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_char_memmove_16.c":30:46)
#loc24 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_char_memmove_16.c":30:9)
#loc25 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_char_memmove_16.c":31:9)
#loc26 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_char_memmove_16.c":31:37)
#loc27 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_char_memmove_16.c":31:13)
#loc28 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_char_memmove_16.c":31:21)
#loc29 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_char_memmove_16.c":31:27)
#loc30 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_char_memmove_16.c":31:28)
#loc31 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_char_memmove_16.c":31:34)
#loc32 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_char_memmove_16.c":31:33)
#loc33 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_char_memmove_16.c":32:19)
#loc34 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_char_memmove_16.c":32:9)
#loc35 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_char_memmove_16.c":32:14)
#loc36 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_char_memmove_16.c":32:15)
#loc37 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_char_memmove_16.c":33:9)
#loc38 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_char_memmove_16.c":35:5)
#loc39 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_char_memmove_16.c":44:5)
#loc40 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_char_memmove_16.c":36:9)
#loc41 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_char_memmove_16.c":36:24)
#loc42 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_char_memmove_16.c":37:16)
#loc43 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_char_memmove_16.c":37:24)
#loc44 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_char_memmove_16.c":37:29)
#loc45 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_char_memmove_16.c":37:33)
#loc46 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_char_memmove_16.c":37:9)
#loc47 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_char_memmove_16.c":37:34)
#loc48 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_char_memmove_16.c":38:25)
#loc49 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_char_memmove_16.c":38:16)
#loc50 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_char_memmove_16.c":38:20)
#loc51 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_char_memmove_16.c":38:9)
#loc52 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_char_memmove_16.c":40:17)
#loc53 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_char_memmove_16.c":40:23)
#loc54 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_char_memmove_16.c":40:31)
#loc55 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_char_memmove_16.c":40:35)
#loc56 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_char_memmove_16.c":40:46)
#loc57 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_char_memmove_16.c":40:9)
#loc58 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_char_memmove_16.c":40:47)
#loc59 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_char_memmove_16.c":41:23)
#loc60 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_char_memmove_16.c":41:9)
#loc61 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_char_memmove_16.c":41:14)
#loc62 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_char_memmove_16.c":41:18)
#loc63 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_char_memmove_16.c":41:19)
#loc64 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_char_memmove_16.c":42:19)
#loc65 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_char_memmove_16.c":42:9)
#loc66 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_char_memmove_16.c":43:9)
#loc67 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_char_memmove_16.c":43:14)
#loc68 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_char_memmove_16.c":76:1)
#loc69 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_char_memmove_16.c":79:1)
#loc70 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_char_memmove_16.c":78:5)
#loc71 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_char_memmove_16.c":78:13)
#loc72 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_char_memmove_16.c":52:1)
#loc73 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_char_memmove_16.c":74:1)
#loc74 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_char_memmove_16.c":54:5)
#loc75 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_char_memmove_16.c":54:12)
#loc76 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_char_memmove_16.c":55:12)
#loc77 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_char_memmove_16.c":55:5)
#loc78 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_char_memmove_16.c":56:5)
#loc79 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_char_memmove_16.c":63:5)
#loc80 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_char_memmove_16.c":56:11)
#loc81 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_char_memmove_16.c":57:5)
#loc82 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_char_memmove_16.c":59:24)
#loc83 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_char_memmove_16.c":59:31)
#loc84 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_char_memmove_16.c":59:35)
#loc85 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_char_memmove_16.c":59:46)
#loc86 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_char_memmove_16.c":59:47)
#loc87 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_char_memmove_16.c":59:9)
#loc88 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_char_memmove_16.c":60:9)
#loc89 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_char_memmove_16.c":60:37)
#loc90 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_char_memmove_16.c":60:13)
#loc91 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_char_memmove_16.c":60:21)
#loc92 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_char_memmove_16.c":60:27)
#loc93 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_char_memmove_16.c":60:28)
#loc94 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_char_memmove_16.c":60:34)
#loc95 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_char_memmove_16.c":60:33)
#loc96 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_char_memmove_16.c":61:19)
#loc97 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_char_memmove_16.c":61:9)
#loc98 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_char_memmove_16.c":61:14)
#loc99 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_char_memmove_16.c":61:15)
#loc100 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_char_memmove_16.c":62:9)
#loc101 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_char_memmove_16.c":64:5)
#loc102 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_char_memmove_16.c":73:5)
#loc103 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_char_memmove_16.c":65:9)
#loc104 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_char_memmove_16.c":65:24)
#loc105 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_char_memmove_16.c":66:16)
#loc106 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_char_memmove_16.c":66:24)
#loc107 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_char_memmove_16.c":66:29)
#loc108 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_char_memmove_16.c":66:33)
#loc109 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_char_memmove_16.c":66:9)
#loc110 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_char_memmove_16.c":66:34)
#loc111 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_char_memmove_16.c":67:25)
#loc112 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_char_memmove_16.c":67:16)
#loc113 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_char_memmove_16.c":67:20)
#loc114 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_char_memmove_16.c":67:9)
#loc115 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_char_memmove_16.c":69:17)
#loc116 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_char_memmove_16.c":69:23)
#loc117 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_char_memmove_16.c":69:31)
#loc118 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_char_memmove_16.c":69:35)
#loc119 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_char_memmove_16.c":69:46)
#loc120 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_char_memmove_16.c":69:9)
#loc121 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_char_memmove_16.c":69:47)
#loc122 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_char_memmove_16.c":70:23)
#loc123 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_char_memmove_16.c":70:9)
#loc124 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_char_memmove_16.c":70:14)
#loc125 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_char_memmove_16.c":70:18)
#loc126 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_char_memmove_16.c":70:19)
#loc127 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_char_memmove_16.c":71:19)
#loc128 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_char_memmove_16.c":71:9)
#loc129 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_char_memmove_16.c":72:9)
#loc130 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_char_memmove_16.c":72:14)
#loc131 = loc(fused[#loc1, #loc2])
#loc132 = loc(fused[#loc3, #loc4])
#loc133 = loc(fused[#loc5, #loc6])
#loc134 = loc(fused[#loc7, #loc8])
#loc135 = loc(fused[#loc9, #loc10])
#loc136 = loc(fused[#loc11, #loc12])
#loc137 = loc(fused[#loc14, #loc13])
#loc138 = loc(fused[#loc15, #loc16])
#loc139 = loc(fused[#loc18, #loc16])
#loc140 = loc(fused[#loc21, #loc22])
#loc141 = loc(fused[#loc20, #loc22])
#loc142 = loc(fused[#loc19, #loc23])
#loc143 = loc(fused[#loc24, #loc23])
#loc144 = loc(fused[#loc25, #loc26])
#loc145 = loc(fused[#loc27, #loc28])
#loc146 = loc(fused[#loc29, #loc26])
#loc147 = loc(fused[#loc34, #loc33])
#loc148 = loc(fused[#loc38, #loc39])
#loc149 = loc(fused[#loc40, #loc41])
#loc150 = loc(fused[#loc46, #loc47])
#loc151 = loc(fused[#loc51, #loc48])
#loc152 = loc(fused[#loc55, #loc56])
#loc153 = loc(fused[#loc54, #loc56])
#loc154 = loc(fused[#loc57, #loc58])
#loc155 = loc(fused[#loc60, #loc59])
#loc156 = loc(fused[#loc68, #loc69])
#loc157 = loc(fused[#loc70, #loc71])
#loc158 = loc(fused[#loc72, #loc73])
#loc159 = loc(fused[#loc74, #loc75])
#loc160 = loc(fused[#loc77, #loc76])
#loc161 = loc(fused[#loc78, #loc79])
#loc162 = loc(fused[#loc81, #loc79])
#loc163 = loc(fused[#loc84, #loc85])
#loc164 = loc(fused[#loc83, #loc85])
#loc165 = loc(fused[#loc82, #loc86])
#loc166 = loc(fused[#loc87, #loc86])
#loc167 = loc(fused[#loc88, #loc89])
#loc168 = loc(fused[#loc90, #loc91])
#loc169 = loc(fused[#loc92, #loc89])
#loc170 = loc(fused[#loc97, #loc96])
#loc171 = loc(fused[#loc101, #loc102])
#loc172 = loc(fused[#loc103, #loc104])
#loc173 = loc(fused[#loc109, #loc110])
#loc174 = loc(fused[#loc114, #loc111])
#loc175 = loc(fused[#loc118, #loc119])
#loc176 = loc(fused[#loc117, #loc119])
#loc177 = loc(fused[#loc120, #loc121])
#loc178 = loc(fused[#loc123, #loc122])
