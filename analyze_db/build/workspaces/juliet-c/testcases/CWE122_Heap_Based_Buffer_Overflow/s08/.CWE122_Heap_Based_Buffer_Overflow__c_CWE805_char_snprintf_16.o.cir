!s32i = !cir.int<s, 32>
!s8i = !cir.int<s, 8>
!u64i = !cir.int<u, 64>
!void = !cir.void
#fn_attr = #cir<extra({nothrow = #cir.nothrow})>
#fn_attr1 = #cir<extra({inline = #cir.inline<no>, nothrow = #cir.nothrow, optnone = #cir.optnone, uwtable = #cir.uwtable<async>})>
module @"/workspaces/juliet-c/testcases/CWE122_Heap_Based_Buffer_Overflow/s08/CWE122_Heap_Based_Buffer_Overflow__c_CWE805_char_snprintf_16.c" attributes {cir.lang = #cir.lang<c>, cir.sob = #cir.signed_overflow_behavior<undefined>, cir.triple = "x86_64-unknown-linux-gnu", cir.type_size_info = #cir.type_size_info<char = 8, int = 32, size_t = 64>, cir.uwtable = #cir.uwtable<async>, dlti.dl_spec = #dlti.dl_spec<i32 = dense<32> : vector<2xi64>, i16 = dense<16> : vector<2xi64>, i8 = dense<8> : vector<2xi64>, f128 = dense<128> : vector<2xi64>, !llvm.ptr<271> = dense<32> : vector<4xi64>, f16 = dense<16> : vector<2xi64>, !llvm.ptr<270> = dense<32> : vector<4xi64>, f64 = dense<64> : vector<2xi64>, i128 = dense<128> : vector<2xi64>, !llvm.ptr<272> = dense<64> : vector<4xi64>, i64 = dense<64> : vector<2xi64>, i1 = dense<8> : vector<2xi64>, !llvm.ptr = dense<64> : vector<4xi64>, f80 = dense<128> : vector<2xi64>, "dlti.mangling_mode" = "e", "dlti.endianness" = "little", "dlti.stack_alignment" = 128 : i64>} {
  cir.func private @malloc(!u64i) -> !cir.ptr<!void> extra(#fn_attr) loc(#loc119)
  cir.func private @exit(!s32i) extra(#fn_attr) loc(#loc120)
  cir.func private @snprintf(!cir.ptr<!s8i>, !u64i, !cir.ptr<!s8i>, ...) -> !s32i extra(#fn_attr) loc(#loc121)
  cir.global "private" constant cir_private dsolocal @".str" = #cir.const_array<"%s\00" : !cir.array<!s8i x 3>> : !cir.array<!s8i x 3> {alignment = 1 : i64} loc(#loc7)
  cir.func private @printLine(!cir.ptr<!s8i>) loc(#loc122)
  cir.func private @free(!cir.ptr<!void>) extra(#fn_attr) loc(#loc123)
  cir.func no_proto @CWE122_Heap_Based_Buffer_Overflow__c_CWE805_char_snprintf_16_bad() extra(#fn_attr1) {
    %0 = cir.alloca !cir.ptr<!s8i>, !cir.ptr<!cir.ptr<!s8i>>, ["data"] {alignment = 8 : i64} loc(#loc125)
    %1 = cir.const #cir.ptr<null> : !cir.ptr<!s8i> loc(#loc16)
    cir.store %1, %0 : !cir.ptr<!s8i>, !cir.ptr<!cir.ptr<!s8i>> loc(#loc126)
    cir.scope {
      cir.while {
        %2 = cir.const #cir.int<1> : !s32i loc(#loc20)
        %3 = cir.cast(int_to_bool, %2 : !s32i), !cir.bool loc(#loc20)
        cir.condition(%3) loc(#loc20)
      } do {
        cir.scope {
          %2 = cir.get_global @malloc : !cir.ptr<!cir.func<(!u64i) -> !cir.ptr<!void>>> loc(#loc22)
          %3 = cir.const #cir.int<50> : !s32i loc(#loc23)
          %4 = cir.cast(integral, %3 : !s32i), !u64i loc(#loc23)
          %5 = cir.const #cir.int<1> : !u64i loc(#loc129)
          %6 = cir.binop(mul, %4, %5) : !u64i loc(#loc130)
          %7 = cir.call @malloc(%6) : (!u64i) -> !cir.ptr<!void> extra(#fn_attr) loc(#loc22)
          %8 = cir.cast(bitcast, %7 : !cir.ptr<!void>), !cir.ptr<!s8i> loc(#loc131)
          cir.store %8, %0 : !cir.ptr<!s8i>, !cir.ptr<!cir.ptr<!s8i>> loc(#loc132)
          cir.scope {
            %14 = cir.load %0 : !cir.ptr<!cir.ptr<!s8i>>, !cir.ptr<!s8i> loc(#loc30)
            %15 = cir.const #cir.ptr<null> : !cir.ptr<!void> loc(#loc31)
            %16 = cir.cast(bitcast, %15 : !cir.ptr<!void>), !cir.ptr<!s8i> loc(#loc31)
            %17 = cir.cmp(eq, %14, %16) : !cir.ptr<!s8i>, !cir.bool loc(#loc134)
            cir.if %17 {
              %18 = cir.get_global @exit : !cir.ptr<!cir.func<(!s32i)>> loc(#loc33)
              %19 = cir.const #cir.int<1> : !s32i loc(#loc34)
              %20 = cir.unary(minus, %19) nsw : !s32i, !s32i loc(#loc35)
              cir.call @exit(%20) : (!s32i) -> () extra(#fn_attr) loc(#loc33)
            } loc(#loc135)
          } loc(#loc133)
          %9 = cir.const #cir.int<0> : !s32i loc(#loc36)
          %10 = cir.cast(integral, %9 : !s32i), !s8i loc(#loc36)
          %11 = cir.load %0 : !cir.ptr<!cir.ptr<!s8i>>, !cir.ptr<!s8i> loc(#loc37)
          %12 = cir.const #cir.int<0> : !s32i loc(#loc38)
          %13 = cir.ptr_stride(%11 : !cir.ptr<!s8i>, %12 : !s32i), !cir.ptr<!s8i> loc(#loc39)
          cir.store %10, %13 : !s8i, !cir.ptr<!s8i> loc(#loc136)
          cir.break loc(#loc40)
        } loc(#loc128)
        cir.yield loc(#loc19)
      } loc(#loc127)
    } loc(#loc127)
    cir.scope {
      %2 = cir.alloca !cir.array<!s8i x 100>, !cir.ptr<!cir.array<!s8i x 100>>, ["source"] {alignment = 16 : i64} loc(#loc138)
      %3 = cir.cast(array_to_ptrdecay, %2 : !cir.ptr<!cir.array<!s8i x 100>>), !cir.ptr<!s8i> loc(#loc45)
      %4 = cir.cast(bitcast, %3 : !cir.ptr<!s8i>), !cir.ptr<!void> loc(#loc45)
      %5 = cir.const #cir.int<67> : !s32i loc(#loc46)
      %6 = cir.const #cir.int<100> : !s32i loc(#loc47)
      %7 = cir.const #cir.int<1> : !s32i loc(#loc48)
      %8 = cir.binop(sub, %6, %7) nsw : !s32i loc(#loc47)
      %9 = cir.cast(integral, %8 : !s32i), !u64i loc(#loc47)
      cir.libc.memset %9 bytes from %4 set to %5 : !cir.ptr<!void>, !s32i, !u64i loc(#loc139)
      %10 = cir.const #cir.int<0> : !s32i loc(#loc51)
      %11 = cir.cast(integral, %10 : !s32i), !s8i loc(#loc51)
      %12 = cir.const #cir.int<100> : !s32i loc(#loc52)
      %13 = cir.const #cir.int<1> : !s32i loc(#loc53)
      %14 = cir.binop(sub, %12, %13) nsw : !s32i loc(#loc52)
      %15 = cir.cast(array_to_ptrdecay, %2 : !cir.ptr<!cir.array<!s8i x 100>>), !cir.ptr<!s8i> loc(#loc54)
      %16 = cir.ptr_stride(%15 : !cir.ptr<!s8i>, %14 : !s32i), !cir.ptr<!s8i> loc(#loc54)
      cir.store %11, %16 : !s8i, !cir.ptr<!s8i> loc(#loc140)
      %17 = cir.get_global @snprintf : !cir.ptr<!cir.func<(!cir.ptr<!s8i>, !u64i, !cir.ptr<!s8i>, ...) -> !s32i>> loc(#loc55)
      %18 = cir.load %0 : !cir.ptr<!cir.ptr<!s8i>>, !cir.ptr<!s8i> loc(#loc56)
      %19 = cir.const #cir.int<100> : !s32i loc(#loc57)
      %20 = cir.cast(integral, %19 : !s32i), !u64i loc(#loc57)
      %21 = cir.get_global @".str" : !cir.ptr<!cir.array<!s8i x 3>> loc(#loc7)
      %22 = cir.cast(array_to_ptrdecay, %21 : !cir.ptr<!cir.array<!s8i x 3>>), !cir.ptr<!s8i> loc(#loc7)
      %23 = cir.cast(array_to_ptrdecay, %2 : !cir.ptr<!cir.array<!s8i x 100>>), !cir.ptr<!s8i> loc(#loc58)
      %24 = cir.call @snprintf(%18, %20, %22, %23) : (!cir.ptr<!s8i>, !u64i, !cir.ptr<!s8i>, !cir.ptr<!s8i>) -> !s32i extra(#fn_attr) loc(#loc55)
      %25 = cir.load %0 : !cir.ptr<!cir.ptr<!s8i>>, !cir.ptr<!s8i> loc(#loc59)
      cir.call @printLine(%25) : (!cir.ptr<!s8i>) -> () loc(#loc60)
      %26 = cir.get_global @free : !cir.ptr<!cir.func<(!cir.ptr<!void>)>> loc(#loc61)
      %27 = cir.load %0 : !cir.ptr<!cir.ptr<!s8i>>, !cir.ptr<!s8i> loc(#loc62)
      %28 = cir.cast(bitcast, %27 : !cir.ptr<!s8i>), !cir.ptr<!void> loc(#loc62)
      cir.call @free(%28) : (!cir.ptr<!void>) -> () extra(#fn_attr) loc(#loc61)
    } loc(#loc137)
    cir.return loc(#loc13)
  } loc(#loc124)
  cir.func no_proto @CWE122_Heap_Based_Buffer_Overflow__c_CWE805_char_snprintf_16_good() extra(#fn_attr1) {
    %0 = cir.get_global @goodG2B : !cir.ptr<!cir.func<()>> loc(#loc142)
    cir.call %0() : (!cir.ptr<!cir.func<()>>) -> () loc(#loc65)
    cir.return loc(#loc64)
  } loc(#loc141)
  cir.func no_proto internal private @goodG2B() extra(#fn_attr1) {
    %0 = cir.alloca !cir.ptr<!s8i>, !cir.ptr<!cir.ptr<!s8i>>, ["data"] {alignment = 8 : i64} loc(#loc144)
    %1 = cir.const #cir.ptr<null> : !cir.ptr<!s8i> loc(#loc71)
    cir.store %1, %0 : !cir.ptr<!s8i>, !cir.ptr<!cir.ptr<!s8i>> loc(#loc145)
    cir.scope {
      cir.while {
        %2 = cir.const #cir.int<1> : !s32i loc(#loc75)
        %3 = cir.cast(int_to_bool, %2 : !s32i), !cir.bool loc(#loc75)
        cir.condition(%3) loc(#loc75)
      } do {
        cir.scope {
          %2 = cir.get_global @malloc : !cir.ptr<!cir.func<(!u64i) -> !cir.ptr<!void>>> loc(#loc77)
          %3 = cir.const #cir.int<100> : !s32i loc(#loc78)
          %4 = cir.cast(integral, %3 : !s32i), !u64i loc(#loc78)
          %5 = cir.const #cir.int<1> : !u64i loc(#loc148)
          %6 = cir.binop(mul, %4, %5) : !u64i loc(#loc149)
          %7 = cir.call @malloc(%6) : (!u64i) -> !cir.ptr<!void> extra(#fn_attr) loc(#loc77)
          %8 = cir.cast(bitcast, %7 : !cir.ptr<!void>), !cir.ptr<!s8i> loc(#loc150)
          cir.store %8, %0 : !cir.ptr<!s8i>, !cir.ptr<!cir.ptr<!s8i>> loc(#loc151)
          cir.scope {
            %14 = cir.load %0 : !cir.ptr<!cir.ptr<!s8i>>, !cir.ptr<!s8i> loc(#loc85)
            %15 = cir.const #cir.ptr<null> : !cir.ptr<!void> loc(#loc86)
            %16 = cir.cast(bitcast, %15 : !cir.ptr<!void>), !cir.ptr<!s8i> loc(#loc86)
            %17 = cir.cmp(eq, %14, %16) : !cir.ptr<!s8i>, !cir.bool loc(#loc153)
            cir.if %17 {
              %18 = cir.get_global @exit : !cir.ptr<!cir.func<(!s32i)>> loc(#loc88)
              %19 = cir.const #cir.int<1> : !s32i loc(#loc89)
              %20 = cir.unary(minus, %19) nsw : !s32i, !s32i loc(#loc90)
              cir.call @exit(%20) : (!s32i) -> () extra(#fn_attr) loc(#loc88)
            } loc(#loc154)
          } loc(#loc152)
          %9 = cir.const #cir.int<0> : !s32i loc(#loc91)
          %10 = cir.cast(integral, %9 : !s32i), !s8i loc(#loc91)
          %11 = cir.load %0 : !cir.ptr<!cir.ptr<!s8i>>, !cir.ptr<!s8i> loc(#loc92)
          %12 = cir.const #cir.int<0> : !s32i loc(#loc93)
          %13 = cir.ptr_stride(%11 : !cir.ptr<!s8i>, %12 : !s32i), !cir.ptr<!s8i> loc(#loc94)
          cir.store %10, %13 : !s8i, !cir.ptr<!s8i> loc(#loc155)
          cir.break loc(#loc95)
        } loc(#loc147)
        cir.yield loc(#loc74)
      } loc(#loc146)
    } loc(#loc146)
    cir.scope {
      %2 = cir.alloca !cir.array<!s8i x 100>, !cir.ptr<!cir.array<!s8i x 100>>, ["source"] {alignment = 16 : i64} loc(#loc157)
      %3 = cir.cast(array_to_ptrdecay, %2 : !cir.ptr<!cir.array<!s8i x 100>>), !cir.ptr<!s8i> loc(#loc100)
      %4 = cir.cast(bitcast, %3 : !cir.ptr<!s8i>), !cir.ptr<!void> loc(#loc100)
      %5 = cir.const #cir.int<67> : !s32i loc(#loc101)
      %6 = cir.const #cir.int<100> : !s32i loc(#loc102)
      %7 = cir.const #cir.int<1> : !s32i loc(#loc103)
      %8 = cir.binop(sub, %6, %7) nsw : !s32i loc(#loc102)
      %9 = cir.cast(integral, %8 : !s32i), !u64i loc(#loc102)
      cir.libc.memset %9 bytes from %4 set to %5 : !cir.ptr<!void>, !s32i, !u64i loc(#loc158)
      %10 = cir.const #cir.int<0> : !s32i loc(#loc106)
      %11 = cir.cast(integral, %10 : !s32i), !s8i loc(#loc106)
      %12 = cir.const #cir.int<100> : !s32i loc(#loc107)
      %13 = cir.const #cir.int<1> : !s32i loc(#loc108)
      %14 = cir.binop(sub, %12, %13) nsw : !s32i loc(#loc107)
      %15 = cir.cast(array_to_ptrdecay, %2 : !cir.ptr<!cir.array<!s8i x 100>>), !cir.ptr<!s8i> loc(#loc109)
      %16 = cir.ptr_stride(%15 : !cir.ptr<!s8i>, %14 : !s32i), !cir.ptr<!s8i> loc(#loc109)
      cir.store %11, %16 : !s8i, !cir.ptr<!s8i> loc(#loc159)
      %17 = cir.get_global @snprintf : !cir.ptr<!cir.func<(!cir.ptr<!s8i>, !u64i, !cir.ptr<!s8i>, ...) -> !s32i>> loc(#loc110)
      %18 = cir.load %0 : !cir.ptr<!cir.ptr<!s8i>>, !cir.ptr<!s8i> loc(#loc111)
      %19 = cir.const #cir.int<100> : !s32i loc(#loc112)
      %20 = cir.cast(integral, %19 : !s32i), !u64i loc(#loc112)
      %21 = cir.get_global @".str" : !cir.ptr<!cir.array<!s8i x 3>> loc(#loc113)
      %22 = cir.cast(array_to_ptrdecay, %21 : !cir.ptr<!cir.array<!s8i x 3>>), !cir.ptr<!s8i> loc(#loc113)
      %23 = cir.cast(array_to_ptrdecay, %2 : !cir.ptr<!cir.array<!s8i x 100>>), !cir.ptr<!s8i> loc(#loc114)
      %24 = cir.call @snprintf(%18, %20, %22, %23) : (!cir.ptr<!s8i>, !u64i, !cir.ptr<!s8i>, !cir.ptr<!s8i>) -> !s32i extra(#fn_attr) loc(#loc110)
      %25 = cir.load %0 : !cir.ptr<!cir.ptr<!s8i>>, !cir.ptr<!s8i> loc(#loc115)
      cir.call @printLine(%25) : (!cir.ptr<!s8i>) -> () loc(#loc116)
      %26 = cir.get_global @free : !cir.ptr<!cir.func<(!cir.ptr<!void>)>> loc(#loc117)
      %27 = cir.load %0 : !cir.ptr<!cir.ptr<!s8i>>, !cir.ptr<!s8i> loc(#loc118)
      %28 = cir.cast(bitcast, %27 : !cir.ptr<!s8i>), !cir.ptr<!void> loc(#loc118)
      cir.call @free(%28) : (!cir.ptr<!void>) -> () extra(#fn_attr) loc(#loc117)
    } loc(#loc156)
    cir.return loc(#loc68)
  } loc(#loc143)
} loc(#loc)
#loc = loc("/workspaces/juliet-c/testcases/CWE122_Heap_Based_Buffer_Overflow/s08/CWE122_Heap_Based_Buffer_Overflow__c_CWE805_char_snprintf_16.c":0:0)
#loc1 = loc("/usr/include/stdlib.h":672:1)
#loc2 = loc("/usr/include/stdlib.h":672:45)
#loc3 = loc("/usr/include/stdlib.h":756:1)
#loc4 = loc("/usr/include/stdlib.h":756:70)
#loc5 = loc("/usr/include/stdio.h":385:1)
#loc6 = loc("/usr/include/stdio.h":387:62)
#loc7 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_char_snprintf_16.c":46:29)
#loc8 = loc("../../../testcasesupport/std_testcase_io.h":14:1)
#loc9 = loc("../../../testcasesupport/std_testcase_io.h":14:33)
#loc10 = loc("/usr/include/stdlib.h":687:1)
#loc11 = loc("/usr/include/stdlib.h":687:32)
#loc12 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_char_snprintf_16.c":29:1)
#loc13 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_char_snprintf_16.c":50:1)
#loc14 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_char_snprintf_16.c":31:5)
#loc15 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_char_snprintf_16.c":31:12)
#loc16 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_char_snprintf_16.c":32:12)
#loc17 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_char_snprintf_16.c":32:5)
#loc18 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_char_snprintf_16.c":33:5)
#loc19 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_char_snprintf_16.c":40:5)
#loc20 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_char_snprintf_16.c":33:11)
#loc21 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_char_snprintf_16.c":34:5)
#loc22 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_char_snprintf_16.c":36:24)
#loc23 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_char_snprintf_16.c":36:31)
#loc24 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_char_snprintf_16.c":36:34)
#loc25 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_char_snprintf_16.c":36:45)
#loc26 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_char_snprintf_16.c":36:46)
#loc27 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_char_snprintf_16.c":36:9)
#loc28 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_char_snprintf_16.c":37:9)
#loc29 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_char_snprintf_16.c":37:37)
#loc30 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_char_snprintf_16.c":37:13)
#loc31 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_char_snprintf_16.c":37:21)
#loc32 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_char_snprintf_16.c":37:27)
#loc33 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_char_snprintf_16.c":37:28)
#loc34 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_char_snprintf_16.c":37:34)
#loc35 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_char_snprintf_16.c":37:33)
#loc36 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_char_snprintf_16.c":38:19)
#loc37 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_char_snprintf_16.c":38:9)
#loc38 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_char_snprintf_16.c":38:14)
#loc39 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_char_snprintf_16.c":38:15)
#loc40 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_char_snprintf_16.c":39:9)
#loc41 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_char_snprintf_16.c":41:5)
#loc42 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_char_snprintf_16.c":49:5)
#loc43 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_char_snprintf_16.c":42:9)
#loc44 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_char_snprintf_16.c":42:24)
#loc45 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_char_snprintf_16.c":43:16)
#loc46 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_char_snprintf_16.c":43:24)
#loc47 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_char_snprintf_16.c":43:29)
#loc48 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_char_snprintf_16.c":43:33)
#loc49 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_char_snprintf_16.c":43:9)
#loc50 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_char_snprintf_16.c":43:34)
#loc51 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_char_snprintf_16.c":44:25)
#loc52 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_char_snprintf_16.c":44:16)
#loc53 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_char_snprintf_16.c":44:20)
#loc54 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_char_snprintf_16.c":44:9)
#loc55 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_char_snprintf_16.c":46:9)
#loc56 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_char_snprintf_16.c":46:18)
#loc57 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_char_snprintf_16.c":46:24)
#loc58 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_char_snprintf_16.c":46:35)
#loc59 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_char_snprintf_16.c":47:19)
#loc60 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_char_snprintf_16.c":47:9)
#loc61 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_char_snprintf_16.c":48:9)
#loc62 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_char_snprintf_16.c":48:14)
#loc63 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_char_snprintf_16.c":80:1)
#loc64 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_char_snprintf_16.c":83:1)
#loc65 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_char_snprintf_16.c":82:5)
#loc66 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_char_snprintf_16.c":82:13)
#loc67 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_char_snprintf_16.c":57:1)
#loc68 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_char_snprintf_16.c":78:1)
#loc69 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_char_snprintf_16.c":59:5)
#loc70 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_char_snprintf_16.c":59:12)
#loc71 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_char_snprintf_16.c":60:12)
#loc72 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_char_snprintf_16.c":60:5)
#loc73 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_char_snprintf_16.c":61:5)
#loc74 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_char_snprintf_16.c":68:5)
#loc75 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_char_snprintf_16.c":61:11)
#loc76 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_char_snprintf_16.c":62:5)
#loc77 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_char_snprintf_16.c":64:24)
#loc78 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_char_snprintf_16.c":64:31)
#loc79 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_char_snprintf_16.c":64:35)
#loc80 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_char_snprintf_16.c":64:46)
#loc81 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_char_snprintf_16.c":64:47)
#loc82 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_char_snprintf_16.c":64:9)
#loc83 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_char_snprintf_16.c":65:9)
#loc84 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_char_snprintf_16.c":65:37)
#loc85 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_char_snprintf_16.c":65:13)
#loc86 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_char_snprintf_16.c":65:21)
#loc87 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_char_snprintf_16.c":65:27)
#loc88 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_char_snprintf_16.c":65:28)
#loc89 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_char_snprintf_16.c":65:34)
#loc90 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_char_snprintf_16.c":65:33)
#loc91 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_char_snprintf_16.c":66:19)
#loc92 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_char_snprintf_16.c":66:9)
#loc93 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_char_snprintf_16.c":66:14)
#loc94 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_char_snprintf_16.c":66:15)
#loc95 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_char_snprintf_16.c":67:9)
#loc96 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_char_snprintf_16.c":69:5)
#loc97 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_char_snprintf_16.c":77:5)
#loc98 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_char_snprintf_16.c":70:9)
#loc99 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_char_snprintf_16.c":70:24)
#loc100 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_char_snprintf_16.c":71:16)
#loc101 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_char_snprintf_16.c":71:24)
#loc102 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_char_snprintf_16.c":71:29)
#loc103 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_char_snprintf_16.c":71:33)
#loc104 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_char_snprintf_16.c":71:9)
#loc105 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_char_snprintf_16.c":71:34)
#loc106 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_char_snprintf_16.c":72:25)
#loc107 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_char_snprintf_16.c":72:16)
#loc108 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_char_snprintf_16.c":72:20)
#loc109 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_char_snprintf_16.c":72:9)
#loc110 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_char_snprintf_16.c":74:9)
#loc111 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_char_snprintf_16.c":74:18)
#loc112 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_char_snprintf_16.c":74:24)
#loc113 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_char_snprintf_16.c":74:29)
#loc114 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_char_snprintf_16.c":74:35)
#loc115 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_char_snprintf_16.c":75:19)
#loc116 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_char_snprintf_16.c":75:9)
#loc117 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_char_snprintf_16.c":76:9)
#loc118 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_char_snprintf_16.c":76:14)
#loc119 = loc(fused[#loc1, #loc2])
#loc120 = loc(fused[#loc3, #loc4])
#loc121 = loc(fused[#loc5, #loc6])
#loc122 = loc(fused[#loc8, #loc9])
#loc123 = loc(fused[#loc10, #loc11])
#loc124 = loc(fused[#loc12, #loc13])
#loc125 = loc(fused[#loc14, #loc15])
#loc126 = loc(fused[#loc17, #loc16])
#loc127 = loc(fused[#loc18, #loc19])
#loc128 = loc(fused[#loc21, #loc19])
#loc129 = loc(fused[#loc24, #loc25])
#loc130 = loc(fused[#loc23, #loc25])
#loc131 = loc(fused[#loc22, #loc26])
#loc132 = loc(fused[#loc27, #loc26])
#loc133 = loc(fused[#loc28, #loc29])
#loc134 = loc(fused[#loc30, #loc31])
#loc135 = loc(fused[#loc32, #loc29])
#loc136 = loc(fused[#loc37, #loc36])
#loc137 = loc(fused[#loc41, #loc42])
#loc138 = loc(fused[#loc43, #loc44])
#loc139 = loc(fused[#loc49, #loc50])
#loc140 = loc(fused[#loc54, #loc51])
#loc141 = loc(fused[#loc63, #loc64])
#loc142 = loc(fused[#loc65, #loc66])
#loc143 = loc(fused[#loc67, #loc68])
#loc144 = loc(fused[#loc69, #loc70])
#loc145 = loc(fused[#loc72, #loc71])
#loc146 = loc(fused[#loc73, #loc74])
#loc147 = loc(fused[#loc76, #loc74])
#loc148 = loc(fused[#loc79, #loc80])
#loc149 = loc(fused[#loc78, #loc80])
#loc150 = loc(fused[#loc77, #loc81])
#loc151 = loc(fused[#loc82, #loc81])
#loc152 = loc(fused[#loc83, #loc84])
#loc153 = loc(fused[#loc85, #loc86])
#loc154 = loc(fused[#loc87, #loc84])
#loc155 = loc(fused[#loc92, #loc91])
#loc156 = loc(fused[#loc96, #loc97])
#loc157 = loc(fused[#loc98, #loc99])
#loc158 = loc(fused[#loc104, #loc105])
#loc159 = loc(fused[#loc109, #loc106])
