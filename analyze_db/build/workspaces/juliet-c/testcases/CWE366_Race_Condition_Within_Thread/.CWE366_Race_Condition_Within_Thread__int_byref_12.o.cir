!s32i = !cir.int<s, 32>
!ty__stdThread = !cir.record<struct "_stdThread" incomplete>
!ty__stdThreadLock = !cir.record<struct "_stdThreadLock" incomplete>
!void = !cir.void
#false = #cir.bool<false> : !cir.bool
#fn_attr = #cir<extra({inline = #cir.inline<no>, nothrow = #cir.nothrow, optnone = #cir.optnone, uwtable = #cir.uwtable<async>})>
#loc7 = loc("CWE366_Race_Condition_Within_Thread__int_byref_12.c":24:23)
#loc8 = loc("CWE366_Race_Condition_Within_Thread__int_byref_12.c":24:29)
#loc45 = loc("CWE366_Race_Condition_Within_Thread__int_byref_12.c":38:24)
#loc46 = loc("CWE366_Race_Condition_Within_Thread__int_byref_12.c":38:30)
#true = #cir.bool<true> : !cir.bool
#loc311 = loc(fused[#loc7, #loc8])
#loc328 = loc(fused[#loc45, #loc46])
module @"/workspaces/juliet-c/testcases/CWE366_Race_Condition_Within_Thread/CWE366_Race_Condition_Within_Thread__int_byref_12.c" attributes {cir.lang = #cir.lang<c>, cir.sob = #cir.signed_overflow_behavior<undefined>, cir.triple = "x86_64-unknown-linux-gnu", cir.type_size_info = #cir.type_size_info<char = 8, int = 32, size_t = 64>, cir.uwtable = #cir.uwtable<async>, dlti.dl_spec = #dlti.dl_spec<!llvm.ptr<270> = dense<32> : vector<4xi64>, !llvm.ptr<272> = dense<64> : vector<4xi64>, !llvm.ptr<271> = dense<32> : vector<4xi64>, f64 = dense<64> : vector<2xi64>, f128 = dense<128> : vector<2xi64>, f16 = dense<16> : vector<2xi64>, i32 = dense<32> : vector<2xi64>, i16 = dense<16> : vector<2xi64>, i8 = dense<8> : vector<2xi64>, i1 = dense<8> : vector<2xi64>, !llvm.ptr = dense<64> : vector<4xi64>, f80 = dense<128> : vector<2xi64>, i128 = dense<128> : vector<2xi64>, i64 = dense<64> : vector<2xi64>, "dlti.mangling_mode" = "e", "dlti.endianness" = "little", "dlti.stack_alignment" = 128 : i64>} {
  cir.func no_proto private @globalReturnsTrueOrFalse(...) -> !s32i loc(#loc308)
  cir.func private @stdThreadCreate(!cir.ptr<!cir.func<(!cir.ptr<!void>)>>, !cir.ptr<!void>, !cir.ptr<!cir.ptr<!ty__stdThread>>) -> !s32i loc(#loc309)
  cir.func internal private @helperBad(%arg0: !cir.ptr<!void> loc(fused[#loc7, #loc8])) extra(#fn_attr) {
    %0 = cir.alloca !cir.ptr<!void>, !cir.ptr<!cir.ptr<!void>>, ["args", init] {alignment = 8 : i64} loc(#loc311)
    %1 = cir.alloca !cir.ptr<!s32i>, !cir.ptr<!cir.ptr<!s32i>>, ["pIntArgs", init] {alignment = 8 : i64} loc(#loc312)
    %2 = cir.alloca !s32i, !cir.ptr<!s32i>, ["i"] {alignment = 4 : i64} loc(#loc313)
    cir.store %arg0, %0 : !cir.ptr<!void>, !cir.ptr<!cir.ptr<!void>> loc(#loc13)
    %3 = cir.load %0 : !cir.ptr<!cir.ptr<!void>>, !cir.ptr<!void> loc(#loc10)
    %4 = cir.cast(bitcast, %3 : !cir.ptr<!void>), !cir.ptr<!s32i> loc(#loc10)
    cir.store %4, %1 : !cir.ptr<!s32i>, !cir.ptr<!cir.ptr<!s32i>> loc(#loc312)
    cir.scope {
      %5 = cir.const #cir.int<0> : !s32i loc(#loc16)
      cir.store %5, %2 : !s32i, !cir.ptr<!s32i> loc(#loc315)
      cir.for : cond {
        %6 = cir.load %2 : !cir.ptr<!s32i>, !s32i loc(#loc18)
        %7 = cir.const #cir.int<1000000> : !s32i loc(#loc19)
        %8 = cir.cmp(lt, %6, %7) : !s32i, !cir.bool loc(#loc316)
        cir.condition(%8) loc(#loc20)
      } body {
        cir.scope {
          %6 = cir.load deref %1 : !cir.ptr<!cir.ptr<!s32i>>, !cir.ptr<!s32i> loc(#loc22)
          %7 = cir.load %6 : !cir.ptr<!s32i>, !s32i loc(#loc23)
          %8 = cir.const #cir.int<1> : !s32i loc(#loc24)
          %9 = cir.binop(add, %7, %8) nsw : !s32i loc(#loc23)
          %10 = cir.load deref %1 : !cir.ptr<!cir.ptr<!s32i>>, !cir.ptr<!s32i> loc(#loc25)
          cir.store %9, %10 : !s32i, !cir.ptr<!s32i> loc(#loc318)
        } loc(#loc317)
        cir.yield loc(#loc15)
      } step {
        %6 = cir.load %2 : !cir.ptr<!s32i>, !s32i loc(#loc27)
        %7 = cir.unary(inc, %6) nsw : !s32i, !s32i loc(#loc28)
        cir.store %7, %2 : !s32i, !cir.ptr<!s32i> loc(#loc319)
        cir.yield loc(#loc314)
      } loc(#loc314)
    } loc(#loc314)
    cir.return loc(#loc6)
  } loc(#loc310)
  cir.func private @stdThreadJoin(!cir.ptr<!ty__stdThread>) -> !s32i loc(#loc320)
  cir.func private @stdThreadDestroy(!cir.ptr<!ty__stdThread>) -> !s32i loc(#loc321)
  cir.func private @printIntLine(!s32i) loc(#loc322)
  cir.func private @stdThreadLockCreate(!cir.ptr<!cir.ptr<!ty__stdThreadLock>>) -> !s32i loc(#loc323)
  cir.global "private" internal dsolocal @gGoodLock = #cir.ptr<null> : !cir.ptr<!ty__stdThreadLock> {alignment = 8 : i64} loc(#loc324)
  cir.func private @stdThreadLockAcquire(!cir.ptr<!ty__stdThreadLock>) loc(#loc325)
  cir.func private @stdThreadLockRelease(!cir.ptr<!ty__stdThreadLock>) loc(#loc326)
  cir.func internal private @helperGood(%arg0: !cir.ptr<!void> loc(fused[#loc45, #loc46])) extra(#fn_attr) {
    %0 = cir.alloca !cir.ptr<!void>, !cir.ptr<!cir.ptr<!void>>, ["args", init] {alignment = 8 : i64} loc(#loc328)
    %1 = cir.alloca !cir.ptr<!s32i>, !cir.ptr<!cir.ptr<!s32i>>, ["pIntArgs", init] {alignment = 8 : i64} loc(#loc329)
    %2 = cir.alloca !s32i, !cir.ptr<!s32i>, ["i"] {alignment = 4 : i64} loc(#loc330)
    cir.store %arg0, %0 : !cir.ptr<!void>, !cir.ptr<!cir.ptr<!void>> loc(#loc51)
    %3 = cir.load %0 : !cir.ptr<!cir.ptr<!void>>, !cir.ptr<!void> loc(#loc48)
    %4 = cir.cast(bitcast, %3 : !cir.ptr<!void>), !cir.ptr<!s32i> loc(#loc48)
    cir.store %4, %1 : !cir.ptr<!s32i>, !cir.ptr<!cir.ptr<!s32i>> loc(#loc329)
    %5 = cir.get_global @gGoodLock : !cir.ptr<!cir.ptr<!ty__stdThreadLock>> loc(#loc324)
    %6 = cir.load %5 : !cir.ptr<!cir.ptr<!ty__stdThreadLock>>, !cir.ptr<!ty__stdThreadLock> loc(#loc52)
    cir.call @stdThreadLockAcquire(%6) : (!cir.ptr<!ty__stdThreadLock>) -> () loc(#loc53)
    cir.scope {
      %9 = cir.const #cir.int<0> : !s32i loc(#loc56)
      cir.store %9, %2 : !s32i, !cir.ptr<!s32i> loc(#loc332)
      cir.for : cond {
        %10 = cir.load %2 : !cir.ptr<!s32i>, !s32i loc(#loc58)
        %11 = cir.const #cir.int<1000000> : !s32i loc(#loc59)
        %12 = cir.cmp(lt, %10, %11) : !s32i, !cir.bool loc(#loc333)
        cir.condition(%12) loc(#loc60)
      } body {
        cir.scope {
          %10 = cir.load deref %1 : !cir.ptr<!cir.ptr<!s32i>>, !cir.ptr<!s32i> loc(#loc62)
          %11 = cir.load %10 : !cir.ptr<!s32i>, !s32i loc(#loc63)
          %12 = cir.const #cir.int<1> : !s32i loc(#loc64)
          %13 = cir.binop(add, %11, %12) nsw : !s32i loc(#loc63)
          %14 = cir.load deref %1 : !cir.ptr<!cir.ptr<!s32i>>, !cir.ptr<!s32i> loc(#loc65)
          cir.store %13, %14 : !s32i, !cir.ptr<!s32i> loc(#loc335)
        } loc(#loc334)
        cir.yield loc(#loc55)
      } step {
        %10 = cir.load %2 : !cir.ptr<!s32i>, !s32i loc(#loc67)
        %11 = cir.unary(inc, %10) nsw : !s32i, !s32i loc(#loc68)
        cir.store %11, %2 : !s32i, !cir.ptr<!s32i> loc(#loc336)
        cir.yield loc(#loc331)
      } loc(#loc331)
    } loc(#loc331)
    %7 = cir.get_global @gGoodLock : !cir.ptr<!cir.ptr<!ty__stdThreadLock>> loc(#loc324)
    %8 = cir.load %7 : !cir.ptr<!cir.ptr<!ty__stdThreadLock>>, !cir.ptr<!ty__stdThreadLock> loc(#loc69)
    cir.call @stdThreadLockRelease(%8) : (!cir.ptr<!ty__stdThreadLock>) -> () loc(#loc70)
    cir.return loc(#loc44)
  } loc(#loc327)
  cir.func private @stdThreadLockDestroy(!cir.ptr<!ty__stdThreadLock>) loc(#loc337)
  cir.func no_proto @CWE366_Race_Condition_Within_Thread__int_byref_12_bad() extra(#fn_attr) {
    cir.scope {
      %0 = cir.get_global @globalReturnsTrueOrFalse : !cir.ptr<!cir.func<(...) -> !s32i>> loc(#loc340)
      %1 = cir.cast(bitcast, %0 : !cir.ptr<!cir.func<(...) -> !s32i>>), !cir.ptr<!cir.func<() -> !s32i>> loc(#loc340)
      %2 = cir.call %1() : (!cir.ptr<!cir.func<() -> !s32i>>) -> !s32i loc(#loc77)
      %3 = cir.cast(int_to_bool, %2 : !s32i), !cir.bool loc(#loc77)
      cir.if %3 {
        cir.scope {
          %4 = cir.alloca !cir.ptr<!ty__stdThread>, !cir.ptr<!cir.ptr<!ty__stdThread>>, ["threadA", init] {alignment = 8 : i64} loc(#loc343)
          %5 = cir.alloca !cir.ptr<!ty__stdThread>, !cir.ptr<!cir.ptr<!ty__stdThread>>, ["threadB", init] {alignment = 8 : i64} loc(#loc344)
          %6 = cir.alloca !s32i, !cir.ptr<!s32i>, ["valBadSink"] {alignment = 4 : i64} loc(#loc345)
          %7 = cir.const #cir.ptr<null> : !cir.ptr<!ty__stdThread> loc(#loc85)
          cir.store %7, %4 : !cir.ptr<!ty__stdThread>, !cir.ptr<!cir.ptr<!ty__stdThread>> loc(#loc343)
          %8 = cir.const #cir.ptr<null> : !cir.ptr<!ty__stdThread> loc(#loc87)
          cir.store %8, %5 : !cir.ptr<!ty__stdThread>, !cir.ptr<!cir.ptr<!ty__stdThread>> loc(#loc344)
          %9 = cir.const #cir.int<0> : !s32i loc(#loc90)
          cir.store %9, %6 : !s32i, !cir.ptr<!s32i> loc(#loc346)
          cir.scope {
            %11 = cir.get_global @helperBad : !cir.ptr<!cir.func<(!cir.ptr<!void>)>> loc(#loc94)
            %12 = cir.cast(bitcast, %6 : !cir.ptr<!s32i>), !cir.ptr<!void> loc(#loc348)
            %13 = cir.call @stdThreadCreate(%11, %12, %4) : (!cir.ptr<!cir.func<(!cir.ptr<!void>)>>, !cir.ptr<!void>, !cir.ptr<!cir.ptr<!ty__stdThread>>) -> !s32i loc(#loc97)
            %14 = cir.cast(int_to_bool, %13 : !s32i), !cir.bool loc(#loc97)
            %15 = cir.unary(not, %14) : !cir.bool, !cir.bool loc(#loc97)
            cir.if %15 {
              %16 = cir.const #cir.ptr<null> : !cir.ptr<!ty__stdThread> loc(#loc99)
              cir.store %16, %4 : !cir.ptr<!ty__stdThread>, !cir.ptr<!cir.ptr<!ty__stdThread>> loc(#loc350)
            } loc(#loc349)
          } loc(#loc347)
          cir.scope {
            %11 = cir.get_global @helperBad : !cir.ptr<!cir.func<(!cir.ptr<!void>)>> loc(#loc103)
            %12 = cir.cast(bitcast, %6 : !cir.ptr<!s32i>), !cir.ptr<!void> loc(#loc352)
            %13 = cir.call @stdThreadCreate(%11, %12, %5) : (!cir.ptr<!cir.func<(!cir.ptr<!void>)>>, !cir.ptr<!void>, !cir.ptr<!cir.ptr<!ty__stdThread>>) -> !s32i loc(#loc106)
            %14 = cir.cast(int_to_bool, %13 : !s32i), !cir.bool loc(#loc106)
            %15 = cir.unary(not, %14) : !cir.bool, !cir.bool loc(#loc106)
            cir.if %15 {
              %16 = cir.const #cir.ptr<null> : !cir.ptr<!ty__stdThread> loc(#loc108)
              cir.store %16, %5 : !cir.ptr<!ty__stdThread>, !cir.ptr<!cir.ptr<!ty__stdThread>> loc(#loc354)
            } loc(#loc353)
          } loc(#loc351)
          cir.scope {
            %11 = cir.load %4 : !cir.ptr<!cir.ptr<!ty__stdThread>>, !cir.ptr<!ty__stdThread> loc(#loc112)
            %12 = cir.cast(ptr_to_bool, %11 : !cir.ptr<!ty__stdThread>), !cir.bool loc(#loc112)
            %13 = cir.ternary(%12, true {
              %14 = cir.load %4 : !cir.ptr<!cir.ptr<!ty__stdThread>>, !cir.ptr<!ty__stdThread> loc(#loc114)
              %15 = cir.call @stdThreadJoin(%14) : (!cir.ptr<!ty__stdThread>) -> !s32i loc(#loc115)
              %16 = cir.cast(int_to_bool, %15 : !s32i), !cir.bool loc(#loc115)
              %17 = cir.ternary(%16, true {
                %18 = cir.const #true loc(#loc113)
                cir.yield %18 : !cir.bool loc(#loc113)
              }, false {
                %18 = cir.const #false loc(#loc113)
                cir.yield %18 : !cir.bool loc(#loc113)
              }) : (!cir.bool) -> !cir.bool loc(#loc113)
              cir.yield %17 : !cir.bool loc(#loc113)
            }, false {
              %14 = cir.const #false loc(#loc113)
              cir.yield %14 : !cir.bool loc(#loc113)
            }) : (!cir.bool) -> !cir.bool loc(#loc113)
            cir.if %13 {
              %14 = cir.load %4 : !cir.ptr<!cir.ptr<!ty__stdThread>>, !cir.ptr<!ty__stdThread> loc(#loc117)
              %15 = cir.call @stdThreadDestroy(%14) : (!cir.ptr<!ty__stdThread>) -> !s32i loc(#loc118)
            } loc(#loc356)
          } loc(#loc355)
          cir.scope {
            %11 = cir.load %5 : !cir.ptr<!cir.ptr<!ty__stdThread>>, !cir.ptr<!ty__stdThread> loc(#loc121)
            %12 = cir.cast(ptr_to_bool, %11 : !cir.ptr<!ty__stdThread>), !cir.bool loc(#loc121)
            %13 = cir.ternary(%12, true {
              %14 = cir.load %5 : !cir.ptr<!cir.ptr<!ty__stdThread>>, !cir.ptr<!ty__stdThread> loc(#loc123)
              %15 = cir.call @stdThreadJoin(%14) : (!cir.ptr<!ty__stdThread>) -> !s32i loc(#loc124)
              %16 = cir.cast(int_to_bool, %15 : !s32i), !cir.bool loc(#loc124)
              %17 = cir.ternary(%16, true {
                %18 = cir.const #true loc(#loc122)
                cir.yield %18 : !cir.bool loc(#loc122)
              }, false {
                %18 = cir.const #false loc(#loc122)
                cir.yield %18 : !cir.bool loc(#loc122)
              }) : (!cir.bool) -> !cir.bool loc(#loc122)
              cir.yield %17 : !cir.bool loc(#loc122)
            }, false {
              %14 = cir.const #false loc(#loc122)
              cir.yield %14 : !cir.bool loc(#loc122)
            }) : (!cir.bool) -> !cir.bool loc(#loc122)
            cir.if %13 {
              %14 = cir.load %5 : !cir.ptr<!cir.ptr<!ty__stdThread>>, !cir.ptr<!ty__stdThread> loc(#loc126)
              %15 = cir.call @stdThreadDestroy(%14) : (!cir.ptr<!ty__stdThread>) -> !s32i loc(#loc127)
            } loc(#loc358)
          } loc(#loc357)
          %10 = cir.load %6 : !cir.ptr<!s32i>, !s32i loc(#loc128)
          cir.call @printIntLine(%10) : (!s32i) -> () loc(#loc129)
        } loc(#loc342)
      } else {
        cir.scope {
          %4 = cir.alloca !cir.ptr<!ty__stdThread>, !cir.ptr<!cir.ptr<!ty__stdThread>>, ["threadA", init] {alignment = 8 : i64} loc(#loc360)
          %5 = cir.alloca !cir.ptr<!ty__stdThread>, !cir.ptr<!cir.ptr<!ty__stdThread>>, ["threadB", init] {alignment = 8 : i64} loc(#loc361)
          %6 = cir.alloca !s32i, !cir.ptr<!s32i>, ["valGoodSink"] {alignment = 4 : i64} loc(#loc362)
          %7 = cir.const #cir.ptr<null> : !cir.ptr<!ty__stdThread> loc(#loc133)
          cir.store %7, %4 : !cir.ptr<!ty__stdThread>, !cir.ptr<!cir.ptr<!ty__stdThread>> loc(#loc360)
          %8 = cir.const #cir.ptr<null> : !cir.ptr<!ty__stdThread> loc(#loc135)
          cir.store %8, %5 : !cir.ptr<!ty__stdThread>, !cir.ptr<!cir.ptr<!ty__stdThread>> loc(#loc361)
          %9 = cir.const #cir.int<0> : !s32i loc(#loc138)
          cir.store %9, %6 : !s32i, !cir.ptr<!s32i> loc(#loc363)
          cir.scope {
            %13 = cir.get_global @gGoodLock : !cir.ptr<!cir.ptr<!ty__stdThreadLock>> loc(#loc324)
            %14 = cir.call @stdThreadLockCreate(%13) : (!cir.ptr<!cir.ptr<!ty__stdThreadLock>>) -> !s32i loc(#loc142)
            %15 = cir.cast(int_to_bool, %14 : !s32i), !cir.bool loc(#loc142)
            %16 = cir.unary(not, %15) : !cir.bool, !cir.bool loc(#loc142)
            cir.if %16 {
              cir.return loc(#loc144)
            } loc(#loc365)
          } loc(#loc364)
          cir.scope {
            %13 = cir.get_global @helperGood : !cir.ptr<!cir.func<(!cir.ptr<!void>)>> loc(#loc147)
            %14 = cir.cast(bitcast, %6 : !cir.ptr<!s32i>), !cir.ptr<!void> loc(#loc367)
            %15 = cir.call @stdThreadCreate(%13, %14, %4) : (!cir.ptr<!cir.func<(!cir.ptr<!void>)>>, !cir.ptr<!void>, !cir.ptr<!cir.ptr<!ty__stdThread>>) -> !s32i loc(#loc150)
            %16 = cir.cast(int_to_bool, %15 : !s32i), !cir.bool loc(#loc150)
            %17 = cir.unary(not, %16) : !cir.bool, !cir.bool loc(#loc150)
            cir.if %17 {
              %18 = cir.const #cir.ptr<null> : !cir.ptr<!ty__stdThread> loc(#loc152)
              cir.store %18, %4 : !cir.ptr<!ty__stdThread>, !cir.ptr<!cir.ptr<!ty__stdThread>> loc(#loc369)
            } loc(#loc368)
          } loc(#loc366)
          cir.scope {
            %13 = cir.get_global @helperGood : !cir.ptr<!cir.func<(!cir.ptr<!void>)>> loc(#loc156)
            %14 = cir.cast(bitcast, %6 : !cir.ptr<!s32i>), !cir.ptr<!void> loc(#loc371)
            %15 = cir.call @stdThreadCreate(%13, %14, %5) : (!cir.ptr<!cir.func<(!cir.ptr<!void>)>>, !cir.ptr<!void>, !cir.ptr<!cir.ptr<!ty__stdThread>>) -> !s32i loc(#loc159)
            %16 = cir.cast(int_to_bool, %15 : !s32i), !cir.bool loc(#loc159)
            %17 = cir.unary(not, %16) : !cir.bool, !cir.bool loc(#loc159)
            cir.if %17 {
              %18 = cir.const #cir.ptr<null> : !cir.ptr<!ty__stdThread> loc(#loc161)
              cir.store %18, %5 : !cir.ptr<!ty__stdThread>, !cir.ptr<!cir.ptr<!ty__stdThread>> loc(#loc373)
            } loc(#loc372)
          } loc(#loc370)
          cir.scope {
            %13 = cir.load %4 : !cir.ptr<!cir.ptr<!ty__stdThread>>, !cir.ptr<!ty__stdThread> loc(#loc165)
            %14 = cir.cast(ptr_to_bool, %13 : !cir.ptr<!ty__stdThread>), !cir.bool loc(#loc165)
            %15 = cir.ternary(%14, true {
              %16 = cir.load %4 : !cir.ptr<!cir.ptr<!ty__stdThread>>, !cir.ptr<!ty__stdThread> loc(#loc167)
              %17 = cir.call @stdThreadJoin(%16) : (!cir.ptr<!ty__stdThread>) -> !s32i loc(#loc168)
              %18 = cir.cast(int_to_bool, %17 : !s32i), !cir.bool loc(#loc168)
              %19 = cir.ternary(%18, true {
                %20 = cir.const #true loc(#loc166)
                cir.yield %20 : !cir.bool loc(#loc166)
              }, false {
                %20 = cir.const #false loc(#loc166)
                cir.yield %20 : !cir.bool loc(#loc166)
              }) : (!cir.bool) -> !cir.bool loc(#loc166)
              cir.yield %19 : !cir.bool loc(#loc166)
            }, false {
              %16 = cir.const #false loc(#loc166)
              cir.yield %16 : !cir.bool loc(#loc166)
            }) : (!cir.bool) -> !cir.bool loc(#loc166)
            cir.if %15 {
              %16 = cir.load %4 : !cir.ptr<!cir.ptr<!ty__stdThread>>, !cir.ptr<!ty__stdThread> loc(#loc170)
              %17 = cir.call @stdThreadDestroy(%16) : (!cir.ptr<!ty__stdThread>) -> !s32i loc(#loc171)
            } loc(#loc375)
          } loc(#loc374)
          cir.scope {
            %13 = cir.load %5 : !cir.ptr<!cir.ptr<!ty__stdThread>>, !cir.ptr<!ty__stdThread> loc(#loc174)
            %14 = cir.cast(ptr_to_bool, %13 : !cir.ptr<!ty__stdThread>), !cir.bool loc(#loc174)
            %15 = cir.ternary(%14, true {
              %16 = cir.load %5 : !cir.ptr<!cir.ptr<!ty__stdThread>>, !cir.ptr<!ty__stdThread> loc(#loc176)
              %17 = cir.call @stdThreadJoin(%16) : (!cir.ptr<!ty__stdThread>) -> !s32i loc(#loc177)
              %18 = cir.cast(int_to_bool, %17 : !s32i), !cir.bool loc(#loc177)
              %19 = cir.ternary(%18, true {
                %20 = cir.const #true loc(#loc175)
                cir.yield %20 : !cir.bool loc(#loc175)
              }, false {
                %20 = cir.const #false loc(#loc175)
                cir.yield %20 : !cir.bool loc(#loc175)
              }) : (!cir.bool) -> !cir.bool loc(#loc175)
              cir.yield %19 : !cir.bool loc(#loc175)
            }, false {
              %16 = cir.const #false loc(#loc175)
              cir.yield %16 : !cir.bool loc(#loc175)
            }) : (!cir.bool) -> !cir.bool loc(#loc175)
            cir.if %15 {
              %16 = cir.load %5 : !cir.ptr<!cir.ptr<!ty__stdThread>>, !cir.ptr<!ty__stdThread> loc(#loc179)
              %17 = cir.call @stdThreadDestroy(%16) : (!cir.ptr<!ty__stdThread>) -> !s32i loc(#loc180)
            } loc(#loc377)
          } loc(#loc376)
          %10 = cir.get_global @gGoodLock : !cir.ptr<!cir.ptr<!ty__stdThreadLock>> loc(#loc324)
          %11 = cir.load %10 : !cir.ptr<!cir.ptr<!ty__stdThreadLock>>, !cir.ptr<!ty__stdThreadLock> loc(#loc181)
          cir.call @stdThreadLockDestroy(%11) : (!cir.ptr<!ty__stdThreadLock>) -> () loc(#loc182)
          %12 = cir.load %6 : !cir.ptr<!s32i>, !s32i loc(#loc183)
          cir.call @printIntLine(%12) : (!s32i) -> () loc(#loc184)
        } loc(#loc359)
      } loc(#loc341)
    } loc(#loc339)
    cir.return loc(#loc74)
  } loc(#loc338)
  cir.func no_proto @CWE366_Race_Condition_Within_Thread__int_byref_12_good() extra(#fn_attr) {
    %0 = cir.get_global @good1 : !cir.ptr<!cir.func<()>> loc(#loc379)
    cir.call %0() : (!cir.ptr<!cir.func<()>>) -> () loc(#loc187)
    cir.return loc(#loc186)
  } loc(#loc378)
  cir.func no_proto internal private @good1() extra(#fn_attr) {
    cir.scope {
      %0 = cir.get_global @globalReturnsTrueOrFalse : !cir.ptr<!cir.func<(...) -> !s32i>> loc(#loc382)
      %1 = cir.cast(bitcast, %0 : !cir.ptr<!cir.func<(...) -> !s32i>>), !cir.ptr<!cir.func<() -> !s32i>> loc(#loc382)
      %2 = cir.call %1() : (!cir.ptr<!cir.func<() -> !s32i>>) -> !s32i loc(#loc193)
      %3 = cir.cast(int_to_bool, %2 : !s32i), !cir.bool loc(#loc193)
      cir.if %3 {
        cir.scope {
          %4 = cir.alloca !cir.ptr<!ty__stdThread>, !cir.ptr<!cir.ptr<!ty__stdThread>>, ["threadA", init] {alignment = 8 : i64} loc(#loc385)
          %5 = cir.alloca !cir.ptr<!ty__stdThread>, !cir.ptr<!cir.ptr<!ty__stdThread>>, ["threadB", init] {alignment = 8 : i64} loc(#loc386)
          %6 = cir.alloca !s32i, !cir.ptr<!s32i>, ["valGoodSink"] {alignment = 4 : i64} loc(#loc387)
          %7 = cir.const #cir.ptr<null> : !cir.ptr<!ty__stdThread> loc(#loc201)
          cir.store %7, %4 : !cir.ptr<!ty__stdThread>, !cir.ptr<!cir.ptr<!ty__stdThread>> loc(#loc385)
          %8 = cir.const #cir.ptr<null> : !cir.ptr<!ty__stdThread> loc(#loc203)
          cir.store %8, %5 : !cir.ptr<!ty__stdThread>, !cir.ptr<!cir.ptr<!ty__stdThread>> loc(#loc386)
          %9 = cir.const #cir.int<0> : !s32i loc(#loc206)
          cir.store %9, %6 : !s32i, !cir.ptr<!s32i> loc(#loc388)
          cir.scope {
            %13 = cir.get_global @gGoodLock : !cir.ptr<!cir.ptr<!ty__stdThreadLock>> loc(#loc324)
            %14 = cir.call @stdThreadLockCreate(%13) : (!cir.ptr<!cir.ptr<!ty__stdThreadLock>>) -> !s32i loc(#loc210)
            %15 = cir.cast(int_to_bool, %14 : !s32i), !cir.bool loc(#loc210)
            %16 = cir.unary(not, %15) : !cir.bool, !cir.bool loc(#loc210)
            cir.if %16 {
              cir.return loc(#loc212)
            } loc(#loc390)
          } loc(#loc389)
          cir.scope {
            %13 = cir.get_global @helperGood : !cir.ptr<!cir.func<(!cir.ptr<!void>)>> loc(#loc215)
            %14 = cir.cast(bitcast, %6 : !cir.ptr<!s32i>), !cir.ptr<!void> loc(#loc392)
            %15 = cir.call @stdThreadCreate(%13, %14, %4) : (!cir.ptr<!cir.func<(!cir.ptr<!void>)>>, !cir.ptr<!void>, !cir.ptr<!cir.ptr<!ty__stdThread>>) -> !s32i loc(#loc218)
            %16 = cir.cast(int_to_bool, %15 : !s32i), !cir.bool loc(#loc218)
            %17 = cir.unary(not, %16) : !cir.bool, !cir.bool loc(#loc218)
            cir.if %17 {
              %18 = cir.const #cir.ptr<null> : !cir.ptr<!ty__stdThread> loc(#loc220)
              cir.store %18, %4 : !cir.ptr<!ty__stdThread>, !cir.ptr<!cir.ptr<!ty__stdThread>> loc(#loc394)
            } loc(#loc393)
          } loc(#loc391)
          cir.scope {
            %13 = cir.get_global @helperGood : !cir.ptr<!cir.func<(!cir.ptr<!void>)>> loc(#loc224)
            %14 = cir.cast(bitcast, %6 : !cir.ptr<!s32i>), !cir.ptr<!void> loc(#loc396)
            %15 = cir.call @stdThreadCreate(%13, %14, %5) : (!cir.ptr<!cir.func<(!cir.ptr<!void>)>>, !cir.ptr<!void>, !cir.ptr<!cir.ptr<!ty__stdThread>>) -> !s32i loc(#loc227)
            %16 = cir.cast(int_to_bool, %15 : !s32i), !cir.bool loc(#loc227)
            %17 = cir.unary(not, %16) : !cir.bool, !cir.bool loc(#loc227)
            cir.if %17 {
              %18 = cir.const #cir.ptr<null> : !cir.ptr<!ty__stdThread> loc(#loc229)
              cir.store %18, %5 : !cir.ptr<!ty__stdThread>, !cir.ptr<!cir.ptr<!ty__stdThread>> loc(#loc398)
            } loc(#loc397)
          } loc(#loc395)
          cir.scope {
            %13 = cir.load %4 : !cir.ptr<!cir.ptr<!ty__stdThread>>, !cir.ptr<!ty__stdThread> loc(#loc233)
            %14 = cir.cast(ptr_to_bool, %13 : !cir.ptr<!ty__stdThread>), !cir.bool loc(#loc233)
            %15 = cir.ternary(%14, true {
              %16 = cir.load %4 : !cir.ptr<!cir.ptr<!ty__stdThread>>, !cir.ptr<!ty__stdThread> loc(#loc235)
              %17 = cir.call @stdThreadJoin(%16) : (!cir.ptr<!ty__stdThread>) -> !s32i loc(#loc236)
              %18 = cir.cast(int_to_bool, %17 : !s32i), !cir.bool loc(#loc236)
              %19 = cir.ternary(%18, true {
                %20 = cir.const #true loc(#loc234)
                cir.yield %20 : !cir.bool loc(#loc234)
              }, false {
                %20 = cir.const #false loc(#loc234)
                cir.yield %20 : !cir.bool loc(#loc234)
              }) : (!cir.bool) -> !cir.bool loc(#loc234)
              cir.yield %19 : !cir.bool loc(#loc234)
            }, false {
              %16 = cir.const #false loc(#loc234)
              cir.yield %16 : !cir.bool loc(#loc234)
            }) : (!cir.bool) -> !cir.bool loc(#loc234)
            cir.if %15 {
              %16 = cir.load %4 : !cir.ptr<!cir.ptr<!ty__stdThread>>, !cir.ptr<!ty__stdThread> loc(#loc238)
              %17 = cir.call @stdThreadDestroy(%16) : (!cir.ptr<!ty__stdThread>) -> !s32i loc(#loc239)
            } loc(#loc400)
          } loc(#loc399)
          cir.scope {
            %13 = cir.load %5 : !cir.ptr<!cir.ptr<!ty__stdThread>>, !cir.ptr<!ty__stdThread> loc(#loc242)
            %14 = cir.cast(ptr_to_bool, %13 : !cir.ptr<!ty__stdThread>), !cir.bool loc(#loc242)
            %15 = cir.ternary(%14, true {
              %16 = cir.load %5 : !cir.ptr<!cir.ptr<!ty__stdThread>>, !cir.ptr<!ty__stdThread> loc(#loc244)
              %17 = cir.call @stdThreadJoin(%16) : (!cir.ptr<!ty__stdThread>) -> !s32i loc(#loc245)
              %18 = cir.cast(int_to_bool, %17 : !s32i), !cir.bool loc(#loc245)
              %19 = cir.ternary(%18, true {
                %20 = cir.const #true loc(#loc243)
                cir.yield %20 : !cir.bool loc(#loc243)
              }, false {
                %20 = cir.const #false loc(#loc243)
                cir.yield %20 : !cir.bool loc(#loc243)
              }) : (!cir.bool) -> !cir.bool loc(#loc243)
              cir.yield %19 : !cir.bool loc(#loc243)
            }, false {
              %16 = cir.const #false loc(#loc243)
              cir.yield %16 : !cir.bool loc(#loc243)
            }) : (!cir.bool) -> !cir.bool loc(#loc243)
            cir.if %15 {
              %16 = cir.load %5 : !cir.ptr<!cir.ptr<!ty__stdThread>>, !cir.ptr<!ty__stdThread> loc(#loc247)
              %17 = cir.call @stdThreadDestroy(%16) : (!cir.ptr<!ty__stdThread>) -> !s32i loc(#loc248)
            } loc(#loc402)
          } loc(#loc401)
          %10 = cir.get_global @gGoodLock : !cir.ptr<!cir.ptr<!ty__stdThreadLock>> loc(#loc324)
          %11 = cir.load %10 : !cir.ptr<!cir.ptr<!ty__stdThreadLock>>, !cir.ptr<!ty__stdThreadLock> loc(#loc249)
          cir.call @stdThreadLockDestroy(%11) : (!cir.ptr<!ty__stdThreadLock>) -> () loc(#loc250)
          %12 = cir.load %6 : !cir.ptr<!s32i>, !s32i loc(#loc251)
          cir.call @printIntLine(%12) : (!s32i) -> () loc(#loc252)
        } loc(#loc384)
      } else {
        cir.scope {
          %4 = cir.alloca !cir.ptr<!ty__stdThread>, !cir.ptr<!cir.ptr<!ty__stdThread>>, ["threadA", init] {alignment = 8 : i64} loc(#loc404)
          %5 = cir.alloca !cir.ptr<!ty__stdThread>, !cir.ptr<!cir.ptr<!ty__stdThread>>, ["threadB", init] {alignment = 8 : i64} loc(#loc405)
          %6 = cir.alloca !s32i, !cir.ptr<!s32i>, ["valGoodSink"] {alignment = 4 : i64} loc(#loc406)
          %7 = cir.const #cir.ptr<null> : !cir.ptr<!ty__stdThread> loc(#loc256)
          cir.store %7, %4 : !cir.ptr<!ty__stdThread>, !cir.ptr<!cir.ptr<!ty__stdThread>> loc(#loc404)
          %8 = cir.const #cir.ptr<null> : !cir.ptr<!ty__stdThread> loc(#loc258)
          cir.store %8, %5 : !cir.ptr<!ty__stdThread>, !cir.ptr<!cir.ptr<!ty__stdThread>> loc(#loc405)
          %9 = cir.const #cir.int<0> : !s32i loc(#loc261)
          cir.store %9, %6 : !s32i, !cir.ptr<!s32i> loc(#loc407)
          cir.scope {
            %13 = cir.get_global @gGoodLock : !cir.ptr<!cir.ptr<!ty__stdThreadLock>> loc(#loc324)
            %14 = cir.call @stdThreadLockCreate(%13) : (!cir.ptr<!cir.ptr<!ty__stdThreadLock>>) -> !s32i loc(#loc265)
            %15 = cir.cast(int_to_bool, %14 : !s32i), !cir.bool loc(#loc265)
            %16 = cir.unary(not, %15) : !cir.bool, !cir.bool loc(#loc265)
            cir.if %16 {
              cir.return loc(#loc267)
            } loc(#loc409)
          } loc(#loc408)
          cir.scope {
            %13 = cir.get_global @helperGood : !cir.ptr<!cir.func<(!cir.ptr<!void>)>> loc(#loc270)
            %14 = cir.cast(bitcast, %6 : !cir.ptr<!s32i>), !cir.ptr<!void> loc(#loc411)
            %15 = cir.call @stdThreadCreate(%13, %14, %4) : (!cir.ptr<!cir.func<(!cir.ptr<!void>)>>, !cir.ptr<!void>, !cir.ptr<!cir.ptr<!ty__stdThread>>) -> !s32i loc(#loc273)
            %16 = cir.cast(int_to_bool, %15 : !s32i), !cir.bool loc(#loc273)
            %17 = cir.unary(not, %16) : !cir.bool, !cir.bool loc(#loc273)
            cir.if %17 {
              %18 = cir.const #cir.ptr<null> : !cir.ptr<!ty__stdThread> loc(#loc275)
              cir.store %18, %4 : !cir.ptr<!ty__stdThread>, !cir.ptr<!cir.ptr<!ty__stdThread>> loc(#loc413)
            } loc(#loc412)
          } loc(#loc410)
          cir.scope {
            %13 = cir.get_global @helperGood : !cir.ptr<!cir.func<(!cir.ptr<!void>)>> loc(#loc279)
            %14 = cir.cast(bitcast, %6 : !cir.ptr<!s32i>), !cir.ptr<!void> loc(#loc415)
            %15 = cir.call @stdThreadCreate(%13, %14, %5) : (!cir.ptr<!cir.func<(!cir.ptr<!void>)>>, !cir.ptr<!void>, !cir.ptr<!cir.ptr<!ty__stdThread>>) -> !s32i loc(#loc282)
            %16 = cir.cast(int_to_bool, %15 : !s32i), !cir.bool loc(#loc282)
            %17 = cir.unary(not, %16) : !cir.bool, !cir.bool loc(#loc282)
            cir.if %17 {
              %18 = cir.const #cir.ptr<null> : !cir.ptr<!ty__stdThread> loc(#loc284)
              cir.store %18, %5 : !cir.ptr<!ty__stdThread>, !cir.ptr<!cir.ptr<!ty__stdThread>> loc(#loc417)
            } loc(#loc416)
          } loc(#loc414)
          cir.scope {
            %13 = cir.load %4 : !cir.ptr<!cir.ptr<!ty__stdThread>>, !cir.ptr<!ty__stdThread> loc(#loc288)
            %14 = cir.cast(ptr_to_bool, %13 : !cir.ptr<!ty__stdThread>), !cir.bool loc(#loc288)
            %15 = cir.ternary(%14, true {
              %16 = cir.load %4 : !cir.ptr<!cir.ptr<!ty__stdThread>>, !cir.ptr<!ty__stdThread> loc(#loc290)
              %17 = cir.call @stdThreadJoin(%16) : (!cir.ptr<!ty__stdThread>) -> !s32i loc(#loc291)
              %18 = cir.cast(int_to_bool, %17 : !s32i), !cir.bool loc(#loc291)
              %19 = cir.ternary(%18, true {
                %20 = cir.const #true loc(#loc289)
                cir.yield %20 : !cir.bool loc(#loc289)
              }, false {
                %20 = cir.const #false loc(#loc289)
                cir.yield %20 : !cir.bool loc(#loc289)
              }) : (!cir.bool) -> !cir.bool loc(#loc289)
              cir.yield %19 : !cir.bool loc(#loc289)
            }, false {
              %16 = cir.const #false loc(#loc289)
              cir.yield %16 : !cir.bool loc(#loc289)
            }) : (!cir.bool) -> !cir.bool loc(#loc289)
            cir.if %15 {
              %16 = cir.load %4 : !cir.ptr<!cir.ptr<!ty__stdThread>>, !cir.ptr<!ty__stdThread> loc(#loc293)
              %17 = cir.call @stdThreadDestroy(%16) : (!cir.ptr<!ty__stdThread>) -> !s32i loc(#loc294)
            } loc(#loc419)
          } loc(#loc418)
          cir.scope {
            %13 = cir.load %5 : !cir.ptr<!cir.ptr<!ty__stdThread>>, !cir.ptr<!ty__stdThread> loc(#loc297)
            %14 = cir.cast(ptr_to_bool, %13 : !cir.ptr<!ty__stdThread>), !cir.bool loc(#loc297)
            %15 = cir.ternary(%14, true {
              %16 = cir.load %5 : !cir.ptr<!cir.ptr<!ty__stdThread>>, !cir.ptr<!ty__stdThread> loc(#loc299)
              %17 = cir.call @stdThreadJoin(%16) : (!cir.ptr<!ty__stdThread>) -> !s32i loc(#loc300)
              %18 = cir.cast(int_to_bool, %17 : !s32i), !cir.bool loc(#loc300)
              %19 = cir.ternary(%18, true {
                %20 = cir.const #true loc(#loc298)
                cir.yield %20 : !cir.bool loc(#loc298)
              }, false {
                %20 = cir.const #false loc(#loc298)
                cir.yield %20 : !cir.bool loc(#loc298)
              }) : (!cir.bool) -> !cir.bool loc(#loc298)
              cir.yield %19 : !cir.bool loc(#loc298)
            }, false {
              %16 = cir.const #false loc(#loc298)
              cir.yield %16 : !cir.bool loc(#loc298)
            }) : (!cir.bool) -> !cir.bool loc(#loc298)
            cir.if %15 {
              %16 = cir.load %5 : !cir.ptr<!cir.ptr<!ty__stdThread>>, !cir.ptr<!ty__stdThread> loc(#loc302)
              %17 = cir.call @stdThreadDestroy(%16) : (!cir.ptr<!ty__stdThread>) -> !s32i loc(#loc303)
            } loc(#loc421)
          } loc(#loc420)
          %10 = cir.get_global @gGoodLock : !cir.ptr<!cir.ptr<!ty__stdThreadLock>> loc(#loc324)
          %11 = cir.load %10 : !cir.ptr<!cir.ptr<!ty__stdThreadLock>>, !cir.ptr<!ty__stdThreadLock> loc(#loc304)
          cir.call @stdThreadLockDestroy(%11) : (!cir.ptr<!ty__stdThreadLock>) -> () loc(#loc305)
          %12 = cir.load %6 : !cir.ptr<!s32i>, !s32i loc(#loc306)
          cir.call @printIntLine(%12) : (!s32i) -> () loc(#loc307)
        } loc(#loc403)
      } loc(#loc383)
    } loc(#loc381)
    cir.return loc(#loc190)
  } loc(#loc380)
} loc(#loc)
#loc = loc("/workspaces/juliet-c/testcases/CWE366_Race_Condition_Within_Thread/CWE366_Race_Condition_Within_Thread__int_byref_12.c":0:0)
#loc1 = loc("../../testcasesupport/std_testcase_io.h":52:1)
#loc2 = loc("../../testcasesupport/std_testcase_io.h":52:30)
#loc3 = loc("../../testcasesupport/std_thread.h":14:1)
#loc4 = loc("../../testcasesupport/std_thread.h":14:74)
#loc5 = loc("CWE366_Race_Condition_Within_Thread__int_byref_12.c":24:1)
#loc6 = loc("CWE366_Race_Condition_Within_Thread__int_byref_12.c":36:1)
#loc9 = loc("CWE366_Race_Condition_Within_Thread__int_byref_12.c":26:5)
#loc10 = loc("CWE366_Race_Condition_Within_Thread__int_byref_12.c":26:27)
#loc11 = loc("CWE366_Race_Condition_Within_Thread__int_byref_12.c":27:5)
#loc12 = loc("CWE366_Race_Condition_Within_Thread__int_byref_12.c":27:9)
#loc13 = loc("CWE366_Race_Condition_Within_Thread__int_byref_12.c":25:1)
#loc14 = loc("CWE366_Race_Condition_Within_Thread__int_byref_12.c":32:5)
#loc15 = loc("CWE366_Race_Condition_Within_Thread__int_byref_12.c":35:5)
#loc16 = loc("CWE366_Race_Condition_Within_Thread__int_byref_12.c":32:14)
#loc17 = loc("CWE366_Race_Condition_Within_Thread__int_byref_12.c":32:10)
#loc18 = loc("CWE366_Race_Condition_Within_Thread__int_byref_12.c":32:17)
#loc19 = loc("CWE366_Race_Condition_Within_Thread__int_byref_12.c":32:21)
#loc20 = loc("CWE366_Race_Condition_Within_Thread__int_byref_12.c":32:19)
#loc21 = loc("CWE366_Race_Condition_Within_Thread__int_byref_12.c":33:5)
#loc22 = loc("CWE366_Race_Condition_Within_Thread__int_byref_12.c":34:22)
#loc23 = loc("CWE366_Race_Condition_Within_Thread__int_byref_12.c":34:21)
#loc24 = loc("CWE366_Race_Condition_Within_Thread__int_byref_12.c":34:33)
#loc25 = loc("CWE366_Race_Condition_Within_Thread__int_byref_12.c":34:10)
#loc26 = loc("CWE366_Race_Condition_Within_Thread__int_byref_12.c":34:9)
#loc27 = loc("CWE366_Race_Condition_Within_Thread__int_byref_12.c":32:31)
#loc28 = loc("CWE366_Race_Condition_Within_Thread__int_byref_12.c":32:30)
#loc29 = loc("../../testcasesupport/std_thread.h":15:1)
#loc30 = loc("../../testcasesupport/std_thread.h":15:35)
#loc31 = loc("../../testcasesupport/std_thread.h":16:1)
#loc32 = loc("../../testcasesupport/std_thread.h":16:38)
#loc33 = loc("../../testcasesupport/std_testcase_io.h":18:1)
#loc34 = loc("../../testcasesupport/std_testcase_io.h":18:33)
#loc35 = loc("../../testcasesupport/std_thread.h":18:1)
#loc36 = loc("../../testcasesupport/std_thread.h":18:44)
#loc37 = loc("CWE366_Race_Condition_Within_Thread__int_byref_12.c":22:1)
#loc38 = loc("CWE366_Race_Condition_Within_Thread__int_byref_12.c":22:34)
#loc39 = loc("../../testcasesupport/std_thread.h":19:1)
#loc40 = loc("../../testcasesupport/std_thread.h":19:45)
#loc41 = loc("../../testcasesupport/std_thread.h":20:1)
#loc42 = loc("../../testcasesupport/std_thread.h":20:45)
#loc43 = loc("CWE366_Race_Condition_Within_Thread__int_byref_12.c":38:1)
#loc44 = loc("CWE366_Race_Condition_Within_Thread__int_byref_12.c":51:1)
#loc47 = loc("CWE366_Race_Condition_Within_Thread__int_byref_12.c":40:5)
#loc48 = loc("CWE366_Race_Condition_Within_Thread__int_byref_12.c":40:28)
#loc49 = loc("CWE366_Race_Condition_Within_Thread__int_byref_12.c":41:5)
#loc50 = loc("CWE366_Race_Condition_Within_Thread__int_byref_12.c":41:9)
#loc51 = loc("CWE366_Race_Condition_Within_Thread__int_byref_12.c":39:1)
#loc52 = loc("CWE366_Race_Condition_Within_Thread__int_byref_12.c":45:26)
#loc53 = loc("CWE366_Race_Condition_Within_Thread__int_byref_12.c":45:5)
#loc54 = loc("CWE366_Race_Condition_Within_Thread__int_byref_12.c":46:5)
#loc55 = loc("CWE366_Race_Condition_Within_Thread__int_byref_12.c":49:5)
#loc56 = loc("CWE366_Race_Condition_Within_Thread__int_byref_12.c":46:14)
#loc57 = loc("CWE366_Race_Condition_Within_Thread__int_byref_12.c":46:10)
#loc58 = loc("CWE366_Race_Condition_Within_Thread__int_byref_12.c":46:17)
#loc59 = loc("CWE366_Race_Condition_Within_Thread__int_byref_12.c":46:21)
#loc60 = loc("CWE366_Race_Condition_Within_Thread__int_byref_12.c":46:19)
#loc61 = loc("CWE366_Race_Condition_Within_Thread__int_byref_12.c":47:5)
#loc62 = loc("CWE366_Race_Condition_Within_Thread__int_byref_12.c":48:22)
#loc63 = loc("CWE366_Race_Condition_Within_Thread__int_byref_12.c":48:21)
#loc64 = loc("CWE366_Race_Condition_Within_Thread__int_byref_12.c":48:33)
#loc65 = loc("CWE366_Race_Condition_Within_Thread__int_byref_12.c":48:10)
#loc66 = loc("CWE366_Race_Condition_Within_Thread__int_byref_12.c":48:9)
#loc67 = loc("CWE366_Race_Condition_Within_Thread__int_byref_12.c":46:31)
#loc68 = loc("CWE366_Race_Condition_Within_Thread__int_byref_12.c":46:30)
#loc69 = loc("CWE366_Race_Condition_Within_Thread__int_byref_12.c":50:26)
#loc70 = loc("CWE366_Race_Condition_Within_Thread__int_byref_12.c":50:5)
#loc71 = loc("../../testcasesupport/std_thread.h":21:1)
#loc72 = loc("../../testcasesupport/std_thread.h":21:45)
#loc73 = loc("CWE366_Race_Condition_Within_Thread__int_byref_12.c":55:1)
#loc74 = loc("CWE366_Race_Condition_Within_Thread__int_byref_12.c":114:1)
#loc75 = loc("CWE366_Race_Condition_Within_Thread__int_byref_12.c":57:5)
#loc76 = loc("CWE366_Race_Condition_Within_Thread__int_byref_12.c":113:5)
#loc77 = loc("CWE366_Race_Condition_Within_Thread__int_byref_12.c":57:8)
#loc78 = loc("CWE366_Race_Condition_Within_Thread__int_byref_12.c":57:33)
#loc79 = loc("CWE366_Race_Condition_Within_Thread__int_byref_12.c":58:5)
#loc80 = loc("CWE366_Race_Condition_Within_Thread__int_byref_12.c":82:5)
#loc81 = loc("CWE366_Race_Condition_Within_Thread__int_byref_12.c":84:5)
#loc82 = loc("CWE366_Race_Condition_Within_Thread__int_byref_12.c":59:9)
#loc83 = loc("CWE366_Race_Condition_Within_Thread__int_byref_12.c":81:9)
#loc84 = loc("CWE366_Race_Condition_Within_Thread__int_byref_12.c":60:13)
#loc85 = loc("CWE366_Race_Condition_Within_Thread__int_byref_12.c":60:33)
#loc86 = loc("CWE366_Race_Condition_Within_Thread__int_byref_12.c":61:13)
#loc87 = loc("CWE366_Race_Condition_Within_Thread__int_byref_12.c":61:33)
#loc88 = loc("CWE366_Race_Condition_Within_Thread__int_byref_12.c":62:13)
#loc89 = loc("CWE366_Race_Condition_Within_Thread__int_byref_12.c":62:17)
#loc90 = loc("CWE366_Race_Condition_Within_Thread__int_byref_12.c":63:26)
#loc91 = loc("CWE366_Race_Condition_Within_Thread__int_byref_12.c":63:13)
#loc92 = loc("CWE366_Race_Condition_Within_Thread__int_byref_12.c":64:13)
#loc93 = loc("CWE366_Race_Condition_Within_Thread__int_byref_12.c":67:13)
#loc94 = loc("CWE366_Race_Condition_Within_Thread__int_byref_12.c":64:34)
#loc95 = loc("CWE366_Race_Condition_Within_Thread__int_byref_12.c":64:52)
#loc96 = loc("CWE366_Race_Condition_Within_Thread__int_byref_12.c":64:53)
#loc97 = loc("CWE366_Race_Condition_Within_Thread__int_byref_12.c":64:18)
#loc98 = loc("CWE366_Race_Condition_Within_Thread__int_byref_12.c":65:13)
#loc99 = loc("CWE366_Race_Condition_Within_Thread__int_byref_12.c":66:27)
#loc100 = loc("CWE366_Race_Condition_Within_Thread__int_byref_12.c":66:17)
#loc101 = loc("CWE366_Race_Condition_Within_Thread__int_byref_12.c":68:13)
#loc102 = loc("CWE366_Race_Condition_Within_Thread__int_byref_12.c":71:13)
#loc103 = loc("CWE366_Race_Condition_Within_Thread__int_byref_12.c":68:34)
#loc104 = loc("CWE366_Race_Condition_Within_Thread__int_byref_12.c":68:52)
#loc105 = loc("CWE366_Race_Condition_Within_Thread__int_byref_12.c":68:53)
#loc106 = loc("CWE366_Race_Condition_Within_Thread__int_byref_12.c":68:18)
#loc107 = loc("CWE366_Race_Condition_Within_Thread__int_byref_12.c":69:13)
#loc108 = loc("CWE366_Race_Condition_Within_Thread__int_byref_12.c":70:27)
#loc109 = loc("CWE366_Race_Condition_Within_Thread__int_byref_12.c":70:17)
#loc110 = loc("CWE366_Race_Condition_Within_Thread__int_byref_12.c":72:13)
#loc111 = loc("CWE366_Race_Condition_Within_Thread__int_byref_12.c":75:13)
#loc112 = loc("CWE366_Race_Condition_Within_Thread__int_byref_12.c":72:17)
#loc113 = loc("CWE366_Race_Condition_Within_Thread__int_byref_12.c":72:25)
#loc114 = loc("CWE366_Race_Condition_Within_Thread__int_byref_12.c":72:42)
#loc115 = loc("CWE366_Race_Condition_Within_Thread__int_byref_12.c":72:28)
#loc116 = loc("CWE366_Race_Condition_Within_Thread__int_byref_12.c":73:13)
#loc117 = loc("CWE366_Race_Condition_Within_Thread__int_byref_12.c":74:34)
#loc118 = loc("CWE366_Race_Condition_Within_Thread__int_byref_12.c":74:17)
#loc119 = loc("CWE366_Race_Condition_Within_Thread__int_byref_12.c":76:13)
#loc120 = loc("CWE366_Race_Condition_Within_Thread__int_byref_12.c":79:13)
#loc121 = loc("CWE366_Race_Condition_Within_Thread__int_byref_12.c":76:17)
#loc122 = loc("CWE366_Race_Condition_Within_Thread__int_byref_12.c":76:25)
#loc123 = loc("CWE366_Race_Condition_Within_Thread__int_byref_12.c":76:42)
#loc124 = loc("CWE366_Race_Condition_Within_Thread__int_byref_12.c":76:28)
#loc125 = loc("CWE366_Race_Condition_Within_Thread__int_byref_12.c":77:13)
#loc126 = loc("CWE366_Race_Condition_Within_Thread__int_byref_12.c":78:34)
#loc127 = loc("CWE366_Race_Condition_Within_Thread__int_byref_12.c":78:17)
#loc128 = loc("CWE366_Race_Condition_Within_Thread__int_byref_12.c":80:26)
#loc129 = loc("CWE366_Race_Condition_Within_Thread__int_byref_12.c":80:13)
#loc130 = loc("CWE366_Race_Condition_Within_Thread__int_byref_12.c":85:9)
#loc131 = loc("CWE366_Race_Condition_Within_Thread__int_byref_12.c":112:9)
#loc132 = loc("CWE366_Race_Condition_Within_Thread__int_byref_12.c":86:13)
#loc133 = loc("CWE366_Race_Condition_Within_Thread__int_byref_12.c":86:33)
#loc134 = loc("CWE366_Race_Condition_Within_Thread__int_byref_12.c":87:13)
#loc135 = loc("CWE366_Race_Condition_Within_Thread__int_byref_12.c":87:33)
#loc136 = loc("CWE366_Race_Condition_Within_Thread__int_byref_12.c":88:13)
#loc137 = loc("CWE366_Race_Condition_Within_Thread__int_byref_12.c":88:17)
#loc138 = loc("CWE366_Race_Condition_Within_Thread__int_byref_12.c":89:27)
#loc139 = loc("CWE366_Race_Condition_Within_Thread__int_byref_12.c":89:13)
#loc140 = loc("CWE366_Race_Condition_Within_Thread__int_byref_12.c":90:13)
#loc141 = loc("CWE366_Race_Condition_Within_Thread__int_byref_12.c":93:13)
#loc142 = loc("CWE366_Race_Condition_Within_Thread__int_byref_12.c":90:18)
#loc143 = loc("CWE366_Race_Condition_Within_Thread__int_byref_12.c":91:13)
#loc144 = loc("CWE366_Race_Condition_Within_Thread__int_byref_12.c":92:17)
#loc145 = loc("CWE366_Race_Condition_Within_Thread__int_byref_12.c":94:13)
#loc146 = loc("CWE366_Race_Condition_Within_Thread__int_byref_12.c":97:13)
#loc147 = loc("CWE366_Race_Condition_Within_Thread__int_byref_12.c":94:34)
#loc148 = loc("CWE366_Race_Condition_Within_Thread__int_byref_12.c":94:53)
#loc149 = loc("CWE366_Race_Condition_Within_Thread__int_byref_12.c":94:54)
#loc150 = loc("CWE366_Race_Condition_Within_Thread__int_byref_12.c":94:18)
#loc151 = loc("CWE366_Race_Condition_Within_Thread__int_byref_12.c":95:13)
#loc152 = loc("CWE366_Race_Condition_Within_Thread__int_byref_12.c":96:27)
#loc153 = loc("CWE366_Race_Condition_Within_Thread__int_byref_12.c":96:17)
#loc154 = loc("CWE366_Race_Condition_Within_Thread__int_byref_12.c":98:13)
#loc155 = loc("CWE366_Race_Condition_Within_Thread__int_byref_12.c":101:13)
#loc156 = loc("CWE366_Race_Condition_Within_Thread__int_byref_12.c":98:34)
#loc157 = loc("CWE366_Race_Condition_Within_Thread__int_byref_12.c":98:53)
#loc158 = loc("CWE366_Race_Condition_Within_Thread__int_byref_12.c":98:54)
#loc159 = loc("CWE366_Race_Condition_Within_Thread__int_byref_12.c":98:18)
#loc160 = loc("CWE366_Race_Condition_Within_Thread__int_byref_12.c":99:13)
#loc161 = loc("CWE366_Race_Condition_Within_Thread__int_byref_12.c":100:27)
#loc162 = loc("CWE366_Race_Condition_Within_Thread__int_byref_12.c":100:17)
#loc163 = loc("CWE366_Race_Condition_Within_Thread__int_byref_12.c":102:13)
#loc164 = loc("CWE366_Race_Condition_Within_Thread__int_byref_12.c":105:13)
#loc165 = loc("CWE366_Race_Condition_Within_Thread__int_byref_12.c":102:17)
#loc166 = loc("CWE366_Race_Condition_Within_Thread__int_byref_12.c":102:25)
#loc167 = loc("CWE366_Race_Condition_Within_Thread__int_byref_12.c":102:42)
#loc168 = loc("CWE366_Race_Condition_Within_Thread__int_byref_12.c":102:28)
#loc169 = loc("CWE366_Race_Condition_Within_Thread__int_byref_12.c":103:13)
#loc170 = loc("CWE366_Race_Condition_Within_Thread__int_byref_12.c":104:34)
#loc171 = loc("CWE366_Race_Condition_Within_Thread__int_byref_12.c":104:17)
#loc172 = loc("CWE366_Race_Condition_Within_Thread__int_byref_12.c":106:13)
#loc173 = loc("CWE366_Race_Condition_Within_Thread__int_byref_12.c":109:13)
#loc174 = loc("CWE366_Race_Condition_Within_Thread__int_byref_12.c":106:17)
#loc175 = loc("CWE366_Race_Condition_Within_Thread__int_byref_12.c":106:25)
#loc176 = loc("CWE366_Race_Condition_Within_Thread__int_byref_12.c":106:42)
#loc177 = loc("CWE366_Race_Condition_Within_Thread__int_byref_12.c":106:28)
#loc178 = loc("CWE366_Race_Condition_Within_Thread__int_byref_12.c":107:13)
#loc179 = loc("CWE366_Race_Condition_Within_Thread__int_byref_12.c":108:34)
#loc180 = loc("CWE366_Race_Condition_Within_Thread__int_byref_12.c":108:17)
#loc181 = loc("CWE366_Race_Condition_Within_Thread__int_byref_12.c":110:34)
#loc182 = loc("CWE366_Race_Condition_Within_Thread__int_byref_12.c":110:13)
#loc183 = loc("CWE366_Race_Condition_Within_Thread__int_byref_12.c":111:26)
#loc184 = loc("CWE366_Race_Condition_Within_Thread__int_byref_12.c":111:13)
#loc185 = loc("CWE366_Race_Condition_Within_Thread__int_byref_12.c":187:1)
#loc186 = loc("CWE366_Race_Condition_Within_Thread__int_byref_12.c":190:1)
#loc187 = loc("CWE366_Race_Condition_Within_Thread__int_byref_12.c":189:5)
#loc188 = loc("CWE366_Race_Condition_Within_Thread__int_byref_12.c":189:11)
#loc189 = loc("CWE366_Race_Condition_Within_Thread__int_byref_12.c":121:1)
#loc190 = loc("CWE366_Race_Condition_Within_Thread__int_byref_12.c":185:1)
#loc191 = loc("CWE366_Race_Condition_Within_Thread__int_byref_12.c":123:5)
#loc192 = loc("CWE366_Race_Condition_Within_Thread__int_byref_12.c":184:5)
#loc193 = loc("CWE366_Race_Condition_Within_Thread__int_byref_12.c":123:8)
#loc194 = loc("CWE366_Race_Condition_Within_Thread__int_byref_12.c":123:33)
#loc195 = loc("CWE366_Race_Condition_Within_Thread__int_byref_12.c":124:5)
#loc196 = loc("CWE366_Race_Condition_Within_Thread__int_byref_12.c":153:5)
#loc197 = loc("CWE366_Race_Condition_Within_Thread__int_byref_12.c":155:5)
#loc198 = loc("CWE366_Race_Condition_Within_Thread__int_byref_12.c":125:9)
#loc199 = loc("CWE366_Race_Condition_Within_Thread__int_byref_12.c":152:9)
#loc200 = loc("CWE366_Race_Condition_Within_Thread__int_byref_12.c":126:13)
#loc201 = loc("CWE366_Race_Condition_Within_Thread__int_byref_12.c":126:33)
#loc202 = loc("CWE366_Race_Condition_Within_Thread__int_byref_12.c":127:13)
#loc203 = loc("CWE366_Race_Condition_Within_Thread__int_byref_12.c":127:33)
#loc204 = loc("CWE366_Race_Condition_Within_Thread__int_byref_12.c":128:13)
#loc205 = loc("CWE366_Race_Condition_Within_Thread__int_byref_12.c":128:17)
#loc206 = loc("CWE366_Race_Condition_Within_Thread__int_byref_12.c":129:27)
#loc207 = loc("CWE366_Race_Condition_Within_Thread__int_byref_12.c":129:13)
#loc208 = loc("CWE366_Race_Condition_Within_Thread__int_byref_12.c":130:13)
#loc209 = loc("CWE366_Race_Condition_Within_Thread__int_byref_12.c":133:13)
#loc210 = loc("CWE366_Race_Condition_Within_Thread__int_byref_12.c":130:18)
#loc211 = loc("CWE366_Race_Condition_Within_Thread__int_byref_12.c":131:13)
#loc212 = loc("CWE366_Race_Condition_Within_Thread__int_byref_12.c":132:17)
#loc213 = loc("CWE366_Race_Condition_Within_Thread__int_byref_12.c":134:13)
#loc214 = loc("CWE366_Race_Condition_Within_Thread__int_byref_12.c":137:13)
#loc215 = loc("CWE366_Race_Condition_Within_Thread__int_byref_12.c":134:34)
#loc216 = loc("CWE366_Race_Condition_Within_Thread__int_byref_12.c":134:53)
#loc217 = loc("CWE366_Race_Condition_Within_Thread__int_byref_12.c":134:54)
#loc218 = loc("CWE366_Race_Condition_Within_Thread__int_byref_12.c":134:18)
#loc219 = loc("CWE366_Race_Condition_Within_Thread__int_byref_12.c":135:13)
#loc220 = loc("CWE366_Race_Condition_Within_Thread__int_byref_12.c":136:27)
#loc221 = loc("CWE366_Race_Condition_Within_Thread__int_byref_12.c":136:17)
#loc222 = loc("CWE366_Race_Condition_Within_Thread__int_byref_12.c":138:13)
#loc223 = loc("CWE366_Race_Condition_Within_Thread__int_byref_12.c":141:13)
#loc224 = loc("CWE366_Race_Condition_Within_Thread__int_byref_12.c":138:34)
#loc225 = loc("CWE366_Race_Condition_Within_Thread__int_byref_12.c":138:53)
#loc226 = loc("CWE366_Race_Condition_Within_Thread__int_byref_12.c":138:54)
#loc227 = loc("CWE366_Race_Condition_Within_Thread__int_byref_12.c":138:18)
#loc228 = loc("CWE366_Race_Condition_Within_Thread__int_byref_12.c":139:13)
#loc229 = loc("CWE366_Race_Condition_Within_Thread__int_byref_12.c":140:27)
#loc230 = loc("CWE366_Race_Condition_Within_Thread__int_byref_12.c":140:17)
#loc231 = loc("CWE366_Race_Condition_Within_Thread__int_byref_12.c":142:13)
#loc232 = loc("CWE366_Race_Condition_Within_Thread__int_byref_12.c":145:13)
#loc233 = loc("CWE366_Race_Condition_Within_Thread__int_byref_12.c":142:17)
#loc234 = loc("CWE366_Race_Condition_Within_Thread__int_byref_12.c":142:25)
#loc235 = loc("CWE366_Race_Condition_Within_Thread__int_byref_12.c":142:42)
#loc236 = loc("CWE366_Race_Condition_Within_Thread__int_byref_12.c":142:28)
#loc237 = loc("CWE366_Race_Condition_Within_Thread__int_byref_12.c":143:13)
#loc238 = loc("CWE366_Race_Condition_Within_Thread__int_byref_12.c":144:34)
#loc239 = loc("CWE366_Race_Condition_Within_Thread__int_byref_12.c":144:17)
#loc240 = loc("CWE366_Race_Condition_Within_Thread__int_byref_12.c":146:13)
#loc241 = loc("CWE366_Race_Condition_Within_Thread__int_byref_12.c":149:13)
#loc242 = loc("CWE366_Race_Condition_Within_Thread__int_byref_12.c":146:17)
#loc243 = loc("CWE366_Race_Condition_Within_Thread__int_byref_12.c":146:25)
#loc244 = loc("CWE366_Race_Condition_Within_Thread__int_byref_12.c":146:42)
#loc245 = loc("CWE366_Race_Condition_Within_Thread__int_byref_12.c":146:28)
#loc246 = loc("CWE366_Race_Condition_Within_Thread__int_byref_12.c":147:13)
#loc247 = loc("CWE366_Race_Condition_Within_Thread__int_byref_12.c":148:34)
#loc248 = loc("CWE366_Race_Condition_Within_Thread__int_byref_12.c":148:17)
#loc249 = loc("CWE366_Race_Condition_Within_Thread__int_byref_12.c":150:34)
#loc250 = loc("CWE366_Race_Condition_Within_Thread__int_byref_12.c":150:13)
#loc251 = loc("CWE366_Race_Condition_Within_Thread__int_byref_12.c":151:26)
#loc252 = loc("CWE366_Race_Condition_Within_Thread__int_byref_12.c":151:13)
#loc253 = loc("CWE366_Race_Condition_Within_Thread__int_byref_12.c":156:9)
#loc254 = loc("CWE366_Race_Condition_Within_Thread__int_byref_12.c":183:9)
#loc255 = loc("CWE366_Race_Condition_Within_Thread__int_byref_12.c":157:13)
#loc256 = loc("CWE366_Race_Condition_Within_Thread__int_byref_12.c":157:33)
#loc257 = loc("CWE366_Race_Condition_Within_Thread__int_byref_12.c":158:13)
#loc258 = loc("CWE366_Race_Condition_Within_Thread__int_byref_12.c":158:33)
#loc259 = loc("CWE366_Race_Condition_Within_Thread__int_byref_12.c":159:13)
#loc260 = loc("CWE366_Race_Condition_Within_Thread__int_byref_12.c":159:17)
#loc261 = loc("CWE366_Race_Condition_Within_Thread__int_byref_12.c":160:27)
#loc262 = loc("CWE366_Race_Condition_Within_Thread__int_byref_12.c":160:13)
#loc263 = loc("CWE366_Race_Condition_Within_Thread__int_byref_12.c":161:13)
#loc264 = loc("CWE366_Race_Condition_Within_Thread__int_byref_12.c":164:13)
#loc265 = loc("CWE366_Race_Condition_Within_Thread__int_byref_12.c":161:18)
#loc266 = loc("CWE366_Race_Condition_Within_Thread__int_byref_12.c":162:13)
#loc267 = loc("CWE366_Race_Condition_Within_Thread__int_byref_12.c":163:17)
#loc268 = loc("CWE366_Race_Condition_Within_Thread__int_byref_12.c":165:13)
#loc269 = loc("CWE366_Race_Condition_Within_Thread__int_byref_12.c":168:13)
#loc270 = loc("CWE366_Race_Condition_Within_Thread__int_byref_12.c":165:34)
#loc271 = loc("CWE366_Race_Condition_Within_Thread__int_byref_12.c":165:53)
#loc272 = loc("CWE366_Race_Condition_Within_Thread__int_byref_12.c":165:54)
#loc273 = loc("CWE366_Race_Condition_Within_Thread__int_byref_12.c":165:18)
#loc274 = loc("CWE366_Race_Condition_Within_Thread__int_byref_12.c":166:13)
#loc275 = loc("CWE366_Race_Condition_Within_Thread__int_byref_12.c":167:27)
#loc276 = loc("CWE366_Race_Condition_Within_Thread__int_byref_12.c":167:17)
#loc277 = loc("CWE366_Race_Condition_Within_Thread__int_byref_12.c":169:13)
#loc278 = loc("CWE366_Race_Condition_Within_Thread__int_byref_12.c":172:13)
#loc279 = loc("CWE366_Race_Condition_Within_Thread__int_byref_12.c":169:34)
#loc280 = loc("CWE366_Race_Condition_Within_Thread__int_byref_12.c":169:53)
#loc281 = loc("CWE366_Race_Condition_Within_Thread__int_byref_12.c":169:54)
#loc282 = loc("CWE366_Race_Condition_Within_Thread__int_byref_12.c":169:18)
#loc283 = loc("CWE366_Race_Condition_Within_Thread__int_byref_12.c":170:13)
#loc284 = loc("CWE366_Race_Condition_Within_Thread__int_byref_12.c":171:27)
#loc285 = loc("CWE366_Race_Condition_Within_Thread__int_byref_12.c":171:17)
#loc286 = loc("CWE366_Race_Condition_Within_Thread__int_byref_12.c":173:13)
#loc287 = loc("CWE366_Race_Condition_Within_Thread__int_byref_12.c":176:13)
#loc288 = loc("CWE366_Race_Condition_Within_Thread__int_byref_12.c":173:17)
#loc289 = loc("CWE366_Race_Condition_Within_Thread__int_byref_12.c":173:25)
#loc290 = loc("CWE366_Race_Condition_Within_Thread__int_byref_12.c":173:42)
#loc291 = loc("CWE366_Race_Condition_Within_Thread__int_byref_12.c":173:28)
#loc292 = loc("CWE366_Race_Condition_Within_Thread__int_byref_12.c":174:13)
#loc293 = loc("CWE366_Race_Condition_Within_Thread__int_byref_12.c":175:34)
#loc294 = loc("CWE366_Race_Condition_Within_Thread__int_byref_12.c":175:17)
#loc295 = loc("CWE366_Race_Condition_Within_Thread__int_byref_12.c":177:13)
#loc296 = loc("CWE366_Race_Condition_Within_Thread__int_byref_12.c":180:13)
#loc297 = loc("CWE366_Race_Condition_Within_Thread__int_byref_12.c":177:17)
#loc298 = loc("CWE366_Race_Condition_Within_Thread__int_byref_12.c":177:25)
#loc299 = loc("CWE366_Race_Condition_Within_Thread__int_byref_12.c":177:42)
#loc300 = loc("CWE366_Race_Condition_Within_Thread__int_byref_12.c":177:28)
#loc301 = loc("CWE366_Race_Condition_Within_Thread__int_byref_12.c":178:13)
#loc302 = loc("CWE366_Race_Condition_Within_Thread__int_byref_12.c":179:34)
#loc303 = loc("CWE366_Race_Condition_Within_Thread__int_byref_12.c":179:17)
#loc304 = loc("CWE366_Race_Condition_Within_Thread__int_byref_12.c":181:34)
#loc305 = loc("CWE366_Race_Condition_Within_Thread__int_byref_12.c":181:13)
#loc306 = loc("CWE366_Race_Condition_Within_Thread__int_byref_12.c":182:26)
#loc307 = loc("CWE366_Race_Condition_Within_Thread__int_byref_12.c":182:13)
#loc308 = loc(fused[#loc1, #loc2])
#loc309 = loc(fused[#loc3, #loc4])
#loc310 = loc(fused[#loc5, #loc6])
#loc312 = loc(fused[#loc9, #loc10])
#loc313 = loc(fused[#loc11, #loc12])
#loc314 = loc(fused[#loc14, #loc15])
#loc315 = loc(fused[#loc17, #loc16])
#loc316 = loc(fused[#loc18, #loc19])
#loc317 = loc(fused[#loc21, #loc15])
#loc318 = loc(fused[#loc26, #loc24])
#loc319 = loc(fused[#loc28, #loc27])
#loc320 = loc(fused[#loc29, #loc30])
#loc321 = loc(fused[#loc31, #loc32])
#loc322 = loc(fused[#loc33, #loc34])
#loc323 = loc(fused[#loc35, #loc36])
#loc324 = loc(fused[#loc37, #loc38])
#loc325 = loc(fused[#loc39, #loc40])
#loc326 = loc(fused[#loc41, #loc42])
#loc327 = loc(fused[#loc43, #loc44])
#loc329 = loc(fused[#loc47, #loc48])
#loc330 = loc(fused[#loc49, #loc50])
#loc331 = loc(fused[#loc54, #loc55])
#loc332 = loc(fused[#loc57, #loc56])
#loc333 = loc(fused[#loc58, #loc59])
#loc334 = loc(fused[#loc61, #loc55])
#loc335 = loc(fused[#loc66, #loc64])
#loc336 = loc(fused[#loc68, #loc67])
#loc337 = loc(fused[#loc71, #loc72])
#loc338 = loc(fused[#loc73, #loc74])
#loc339 = loc(fused[#loc75, #loc76])
#loc340 = loc(fused[#loc77, #loc78])
#loc341 = loc(fused[#loc79, #loc80, #loc81, #loc76])
#loc342 = loc(fused[#loc82, #loc83])
#loc343 = loc(fused[#loc84, #loc85])
#loc344 = loc(fused[#loc86, #loc87])
#loc345 = loc(fused[#loc88, #loc89])
#loc346 = loc(fused[#loc91, #loc90])
#loc347 = loc(fused[#loc92, #loc93])
#loc348 = loc(fused[#loc95, #loc96])
#loc349 = loc(fused[#loc98, #loc93])
#loc350 = loc(fused[#loc100, #loc99])
#loc351 = loc(fused[#loc101, #loc102])
#loc352 = loc(fused[#loc104, #loc105])
#loc353 = loc(fused[#loc107, #loc102])
#loc354 = loc(fused[#loc109, #loc108])
#loc355 = loc(fused[#loc110, #loc111])
#loc356 = loc(fused[#loc116, #loc111])
#loc357 = loc(fused[#loc119, #loc120])
#loc358 = loc(fused[#loc125, #loc120])
#loc359 = loc(fused[#loc130, #loc131])
#loc360 = loc(fused[#loc132, #loc133])
#loc361 = loc(fused[#loc134, #loc135])
#loc362 = loc(fused[#loc136, #loc137])
#loc363 = loc(fused[#loc139, #loc138])
#loc364 = loc(fused[#loc140, #loc141])
#loc365 = loc(fused[#loc143, #loc141])
#loc366 = loc(fused[#loc145, #loc146])
#loc367 = loc(fused[#loc148, #loc149])
#loc368 = loc(fused[#loc151, #loc146])
#loc369 = loc(fused[#loc153, #loc152])
#loc370 = loc(fused[#loc154, #loc155])
#loc371 = loc(fused[#loc157, #loc158])
#loc372 = loc(fused[#loc160, #loc155])
#loc373 = loc(fused[#loc162, #loc161])
#loc374 = loc(fused[#loc163, #loc164])
#loc375 = loc(fused[#loc169, #loc164])
#loc376 = loc(fused[#loc172, #loc173])
#loc377 = loc(fused[#loc178, #loc173])
#loc378 = loc(fused[#loc185, #loc186])
#loc379 = loc(fused[#loc187, #loc188])
#loc380 = loc(fused[#loc189, #loc190])
#loc381 = loc(fused[#loc191, #loc192])
#loc382 = loc(fused[#loc193, #loc194])
#loc383 = loc(fused[#loc195, #loc196, #loc197, #loc192])
#loc384 = loc(fused[#loc198, #loc199])
#loc385 = loc(fused[#loc200, #loc201])
#loc386 = loc(fused[#loc202, #loc203])
#loc387 = loc(fused[#loc204, #loc205])
#loc388 = loc(fused[#loc207, #loc206])
#loc389 = loc(fused[#loc208, #loc209])
#loc390 = loc(fused[#loc211, #loc209])
#loc391 = loc(fused[#loc213, #loc214])
#loc392 = loc(fused[#loc216, #loc217])
#loc393 = loc(fused[#loc219, #loc214])
#loc394 = loc(fused[#loc221, #loc220])
#loc395 = loc(fused[#loc222, #loc223])
#loc396 = loc(fused[#loc225, #loc226])
#loc397 = loc(fused[#loc228, #loc223])
#loc398 = loc(fused[#loc230, #loc229])
#loc399 = loc(fused[#loc231, #loc232])
#loc400 = loc(fused[#loc237, #loc232])
#loc401 = loc(fused[#loc240, #loc241])
#loc402 = loc(fused[#loc246, #loc241])
#loc403 = loc(fused[#loc253, #loc254])
#loc404 = loc(fused[#loc255, #loc256])
#loc405 = loc(fused[#loc257, #loc258])
#loc406 = loc(fused[#loc259, #loc260])
#loc407 = loc(fused[#loc262, #loc261])
#loc408 = loc(fused[#loc263, #loc264])
#loc409 = loc(fused[#loc266, #loc264])
#loc410 = loc(fused[#loc268, #loc269])
#loc411 = loc(fused[#loc271, #loc272])
#loc412 = loc(fused[#loc274, #loc269])
#loc413 = loc(fused[#loc276, #loc275])
#loc414 = loc(fused[#loc277, #loc278])
#loc415 = loc(fused[#loc280, #loc281])
#loc416 = loc(fused[#loc283, #loc278])
#loc417 = loc(fused[#loc285, #loc284])
#loc418 = loc(fused[#loc286, #loc287])
#loc419 = loc(fused[#loc292, #loc287])
#loc420 = loc(fused[#loc295, #loc296])
#loc421 = loc(fused[#loc301, #loc296])
