!s32i = !cir.int<s, 32>
!s64i = !cir.int<s, 64>
!s8i = !cir.int<s, 8>
!ty__IO_codecvt = !cir.record<struct "_IO_codecvt" incomplete>
!ty__IO_marker = !cir.record<struct "_IO_marker" incomplete>
!ty__IO_wide_data = !cir.record<struct "_IO_wide_data" incomplete>
!u16i = !cir.int<u, 16>
!u32i = !cir.int<u, 32>
!u64i = !cir.int<u, 64>
!u8i = !cir.int<u, 8>
!void = !cir.void
#false = #cir.bool<false> : !cir.bool
#fn_attr = #cir<extra({nothrow = #cir.nothrow})>
#fn_attr1 = #cir<extra({inline = #cir.inline<no>, nothrow = #cir.nothrow, optnone = #cir.optnone, uwtable = #cir.uwtable<async>})>
#true = #cir.bool<true> : !cir.bool
!ty_in_addr = !cir.record<struct "in_addr" {!u32i} #cir.record.decl.ast>
!ty__IO_FILE = !cir.record<struct "_IO_FILE" {!s32i, !cir.ptr<!s8i>, !cir.ptr<!s8i>, !cir.ptr<!s8i>, !cir.ptr<!s8i>, !cir.ptr<!s8i>, !cir.ptr<!s8i>, !cir.ptr<!s8i>, !cir.ptr<!s8i>, !cir.ptr<!s8i>, !cir.ptr<!s8i>, !cir.ptr<!s8i>, !cir.ptr<!ty__IO_marker>, !cir.ptr<!cir.record<struct "_IO_FILE">>, !s32i, !s32i, !s64i, !u16i, !s8i, !cir.array<!s8i x 1>, !cir.ptr<!void>, !s64i, !cir.ptr<!ty__IO_codecvt>, !cir.ptr<!ty__IO_wide_data>, !cir.ptr<!cir.record<struct "_IO_FILE">>, !cir.ptr<!void>, !u64i, !s32i, !cir.array<!s8i x 20>} #cir.record.decl.ast>
!ty_sockaddr = !cir.record<struct "sockaddr" {!u16i, !cir.array<!s8i x 14>} #cir.record.decl.ast>
!ty_sockaddr_in = !cir.record<struct "sockaddr_in" {!u16i, !u16i, !ty_in_addr, !cir.array<!u8i x 8>}>
module @"/workspaces/juliet-c/testcases/CWE78_OS_Command_Injection/s01/CWE78_OS_Command_Injection__char_connect_socket_popen_12.c" attributes {cir.lang = #cir.lang<c>, cir.sob = #cir.signed_overflow_behavior<undefined>, cir.triple = "x86_64-unknown-linux-gnu", cir.type_size_info = #cir.type_size_info<char = 8, int = 32, size_t = 64>, cir.uwtable = #cir.uwtable<async>, dlti.dl_spec = #dlti.dl_spec<i1 = dense<8> : vector<2xi64>, !llvm.ptr = dense<64> : vector<4xi64>, !llvm.ptr<270> = dense<32> : vector<4xi64>, f80 = dense<128> : vector<2xi64>, i16 = dense<16> : vector<2xi64>, i32 = dense<32> : vector<2xi64>, i8 = dense<8> : vector<2xi64>, f128 = dense<128> : vector<2xi64>, !llvm.ptr<271> = dense<32> : vector<4xi64>, f64 = dense<64> : vector<2xi64>, f16 = dense<16> : vector<2xi64>, i128 = dense<128> : vector<2xi64>, !llvm.ptr<272> = dense<64> : vector<4xi64>, i64 = dense<64> : vector<2xi64>, "dlti.stack_alignment" = 128 : i64, "dlti.mangling_mode" = "e", "dlti.endianness" = "little">} {
  cir.global "private" constant cir_private @__const.goodG2B.data_buf = #cir.const_array<"ls " : !cir.array<!s8i x 3>, trailing_zeros> : !cir.array<!s8i x 100> loc(#loc226)
  cir.global "private" constant cir_private @__const.CWE78_OS_Command_Injection__char_connect_socket_popen_12_bad.data_buf = #cir.const_array<"ls " : !cir.array<!s8i x 3>, trailing_zeros> : !cir.array<!s8i x 100> loc(#loc227)
  cir.func no_proto private @globalReturnsTrueOrFalse(...) -> !s32i loc(#loc228)
  cir.func private @strlen(!cir.ptr<!s8i>) -> !u64i extra(#fn_attr) loc(#loc229)
  cir.func private @socket(!s32i, !s32i, !s32i) -> !s32i extra(#fn_attr) loc(#loc230)
  cir.func private @inet_addr(!cir.ptr<!s8i>) -> !u32i extra(#fn_attr) loc(#loc231)
  cir.global "private" constant cir_private dsolocal @".str" = #cir.const_array<"127.0.0.1\00" : !cir.array<!s8i x 10>> : !cir.array<!s8i x 10> {alignment = 1 : i64} loc(#loc13)
  cir.func private @htons(!u16i) -> !u16i extra(#fn_attr) loc(#loc232)
  cir.func private @connect(!s32i, !cir.ptr<!ty_sockaddr>, !u32i) -> !s32i loc(#loc233)
  cir.func private @recv(!s32i, !cir.ptr<!void>, !u64i, !s32i) -> !s64i loc(#loc234)
  cir.func private @strchr(!cir.ptr<!s8i>, !s32i) -> !cir.ptr<!s8i> extra(#fn_attr) loc(#loc235)
  cir.func private @close(!s32i) -> !s32i loc(#loc236)
  cir.func private @strcat(!cir.ptr<!s8i>, !cir.ptr<!s8i>) -> !cir.ptr<!s8i> extra(#fn_attr) loc(#loc237)
  cir.global "private" constant cir_private dsolocal @".str.1" = #cir.const_array<"*.*\00" : !cir.array<!s8i x 4>> : !cir.array<!s8i x 4> {alignment = 1 : i64} loc(#loc26)
  cir.func private @popen(!cir.ptr<!s8i>, !cir.ptr<!s8i>) -> !cir.ptr<!ty__IO_FILE> loc(#loc238)
  cir.global "private" constant cir_private dsolocal @".str.2" = #cir.const_array<"w\00" : !cir.array<!s8i x 2>> : !cir.array<!s8i x 2> {alignment = 1 : i64} loc(#loc29)
  cir.func private @pclose(!cir.ptr<!ty__IO_FILE>) -> !s32i loc(#loc239)
  cir.func no_proto @CWE78_OS_Command_Injection__char_connect_socket_popen_12_bad() extra(#fn_attr1) {
    %0 = cir.alloca !cir.ptr<!s8i>, !cir.ptr<!cir.ptr<!s8i>>, ["data"] {alignment = 8 : i64} loc(#loc241)
    %1 = cir.alloca !cir.array<!s8i x 100>, !cir.ptr<!cir.array<!s8i x 100>>, ["data_buf"] {alignment = 16 : i64} loc(#loc227)
    %2 = cir.get_global @__const.CWE78_OS_Command_Injection__char_connect_socket_popen_12_bad.data_buf : !cir.ptr<!cir.array<!s8i x 100>> loc(#loc227)
    cir.copy %2 to %1 : !cir.ptr<!cir.array<!s8i x 100>> loc(#loc227)
    %3 = cir.cast(array_to_ptrdecay, %1 : !cir.ptr<!cir.array<!s8i x 100>>), !cir.ptr<!s8i> loc(#loc36)
    cir.store %3, %0 : !cir.ptr<!s8i>, !cir.ptr<!cir.ptr<!s8i>> loc(#loc242)
    cir.scope {
      %4 = cir.get_global @globalReturnsTrueOrFalse : !cir.ptr<!cir.func<(...) -> !s32i>> loc(#loc244)
      %5 = cir.cast(bitcast, %4 : !cir.ptr<!cir.func<(...) -> !s32i>>), !cir.ptr<!cir.func<() -> !s32i>> loc(#loc244)
      %6 = cir.call %5() : (!cir.ptr<!cir.func<() -> !s32i>>) -> !s32i loc(#loc40)
      %7 = cir.cast(int_to_bool, %6 : !s32i), !cir.bool loc(#loc40)
      cir.if %7 {
        cir.scope {
          %8 = cir.alloca !s32i, !cir.ptr<!s32i>, ["recvResult"] {alignment = 4 : i64} loc(#loc247)
          %9 = cir.alloca !ty_sockaddr_in, !cir.ptr<!ty_sockaddr_in>, ["service"] {alignment = 4 : i64} loc(#loc248)
          %10 = cir.alloca !cir.ptr<!s8i>, !cir.ptr<!cir.ptr<!s8i>>, ["replace"] {alignment = 8 : i64} loc(#loc249)
          %11 = cir.alloca !s32i, !cir.ptr<!s32i>, ["connectSocket", init] {alignment = 4 : i64} loc(#loc250)
          %12 = cir.alloca !u64i, !cir.ptr<!u64i>, ["dataLen", init] {alignment = 8 : i64} loc(#loc251)
          %13 = cir.const #cir.int<1> : !s32i loc(#loc54)
          %14 = cir.unary(minus, %13) nsw : !s32i, !s32i loc(#loc54)
          cir.store %14, %11 : !s32i, !cir.ptr<!s32i> loc(#loc250)
          %15 = cir.get_global @strlen : !cir.ptr<!cir.func<(!cir.ptr<!s8i>) -> !u64i>> loc(#loc57)
          %16 = cir.load %0 : !cir.ptr<!cir.ptr<!s8i>>, !cir.ptr<!s8i> loc(#loc58)
          %17 = cir.call @strlen(%16) : (!cir.ptr<!s8i>) -> !u64i side_effect(pure) extra(#fn_attr) loc(#loc57)
          cir.store %17, %12 : !u64i, !cir.ptr<!u64i> loc(#loc251)
          cir.scope {
            cir.do {
              cir.scope {
                %18 = cir.const #cir.int<2> : !s32i loc(#loc63)
                %19 = cir.const #cir.int<1> : !s32i loc(#loc64)
                %20 = cir.const #cir.int<6> : !s32i loc(#loc65)
                %21 = cir.call @socket(%18, %19, %20) : (!s32i, !s32i, !s32i) -> !s32i extra(#fn_attr) loc(#loc66)
                cir.store %21, %11 : !s32i, !cir.ptr<!s32i> loc(#loc254)
                cir.scope {
                  %72 = cir.load %11 : !cir.ptr<!s32i>, !s32i loc(#loc71)
                  %73 = cir.const #cir.int<1> : !s32i loc(#loc72)
                  %74 = cir.unary(minus, %73) nsw : !s32i, !s32i loc(#loc72)
                  %75 = cir.cmp(eq, %72, %74) : !s32i, !cir.bool loc(#loc256)
                  cir.if %75 {
                    cir.break loc(#loc74)
                  } loc(#loc257)
                } loc(#loc255)
                %22 = cir.cast(bitcast, %9 : !cir.ptr<!ty_sockaddr_in>), !cir.ptr<!void> loc(#loc258)
                %23 = cir.const #cir.int<0> : !s32i loc(#loc77)
                %24 = cir.const #cir.int<16> : !u64i loc(#loc259)
                cir.libc.memset %24 bytes from %22 set to %23 : !cir.ptr<!void>, !s32i, !u64i loc(#loc260)
                %25 = cir.const #cir.int<2> : !s32i loc(#loc82)
                %26 = cir.cast(integral, %25 : !s32i), !u16i loc(#loc82)
                %27 = cir.get_member %9[0] {name = "sin_family"} : !cir.ptr<!ty_sockaddr_in> -> !cir.ptr<!u16i> loc(#loc83)
                cir.store %26, %27 : !u16i, !cir.ptr<!u16i> loc(#loc261)
                %28 = cir.get_global @".str" : !cir.ptr<!cir.array<!s8i x 10>> loc(#loc13)
                %29 = cir.cast(array_to_ptrdecay, %28 : !cir.ptr<!cir.array<!s8i x 10>>), !cir.ptr<!s8i> loc(#loc13)
                %30 = cir.call @inet_addr(%29) : (!cir.ptr<!s8i>) -> !u32i extra(#fn_attr) loc(#loc85)
                %31 = cir.get_member %9[2] {name = "sin_addr"} : !cir.ptr<!ty_sockaddr_in> -> !cir.ptr<!ty_in_addr> loc(#loc86)
                %32 = cir.get_member %31[0] {name = "s_addr"} : !cir.ptr<!ty_in_addr> -> !cir.ptr<!u32i> loc(#loc87)
                cir.store %30, %32 : !u32i, !cir.ptr<!u32i> loc(#loc262)
                %33 = cir.const #cir.int<27015> : !s32i loc(#loc90)
                %34 = cir.cast(integral, %33 : !s32i), !u16i loc(#loc90)
                %35 = cir.call @htons(%34) : (!u16i) -> !u16i side_effect(const) extra(#fn_attr) loc(#loc91)
                %36 = cir.get_member %9[1] {name = "sin_port"} : !cir.ptr<!ty_sockaddr_in> -> !cir.ptr<!u16i> loc(#loc92)
                cir.store %35, %36 : !u16i, !cir.ptr<!u16i> loc(#loc263)
                cir.scope {
                  %72 = cir.load %11 : !cir.ptr<!s32i>, !s32i loc(#loc97)
                  %73 = cir.cast(bitcast, %9 : !cir.ptr<!ty_sockaddr_in>), !cir.ptr<!ty_sockaddr> loc(#loc265)
                  %74 = cir.const #cir.int<16> : !u64i loc(#loc266)
                  %75 = cir.cast(integral, %74 : !u64i), !u32i loc(#loc266)
                  %76 = cir.call @connect(%72, %73, %75) : (!s32i, !cir.ptr<!ty_sockaddr>, !u32i) -> !s32i loc(#loc102)
                  %77 = cir.const #cir.int<1> : !s32i loc(#loc103)
                  %78 = cir.unary(minus, %77) nsw : !s32i, !s32i loc(#loc103)
                  %79 = cir.cmp(eq, %76, %78) : !s32i, !cir.bool loc(#loc267)
                  cir.if %79 {
                    cir.break loc(#loc105)
                  } loc(#loc268)
                } loc(#loc264)
                %37 = cir.load %11 : !cir.ptr<!s32i>, !s32i loc(#loc106)
                %38 = cir.load %0 : !cir.ptr<!cir.ptr<!s8i>>, !cir.ptr<!s8i> loc(#loc107)
                %39 = cir.load %12 : !cir.ptr<!u64i>, !u64i loc(#loc108)
                %40 = cir.ptr_stride(%38 : !cir.ptr<!s8i>, %39 : !u64i), !cir.ptr<!s8i> loc(#loc109)
                %41 = cir.cast(bitcast, %40 : !cir.ptr<!s8i>), !cir.ptr<!void> loc(#loc269)
                %42 = cir.const #cir.int<1> : !u64i loc(#loc270)
                %43 = cir.const #cir.int<100> : !s32i loc(#loc114)
                %44 = cir.cast(integral, %43 : !s32i), !u64i loc(#loc114)
                %45 = cir.load %12 : !cir.ptr<!u64i>, !u64i loc(#loc115)
                %46 = cir.binop(sub, %44, %45) : !u64i loc(#loc271)
                %47 = cir.const #cir.int<1> : !s32i loc(#loc116)
                %48 = cir.cast(integral, %47 : !s32i), !u64i loc(#loc116)
                %49 = cir.binop(sub, %46, %48) : !u64i loc(#loc272)
                %50 = cir.binop(mul, %42, %49) : !u64i loc(#loc273)
                %51 = cir.const #cir.int<0> : !s32i loc(#loc118)
                %52 = cir.call @recv(%37, %41, %50, %51) : (!s32i, !cir.ptr<!void>, !u64i, !s32i) -> !s64i loc(#loc119)
                %53 = cir.cast(integral, %52 : !s64i), !s32i loc(#loc119)
                cir.store %53, %8 : !s32i, !cir.ptr<!s32i> loc(#loc274)
                cir.scope {
                  %72 = cir.load %8 : !cir.ptr<!s32i>, !s32i loc(#loc124)
                  %73 = cir.const #cir.int<1> : !s32i loc(#loc125)
                  %74 = cir.unary(minus, %73) nsw : !s32i, !s32i loc(#loc125)
                  %75 = cir.cmp(eq, %72, %74) : !s32i, !cir.bool loc(#loc276)
                  %76 = cir.ternary(%75, true {
                    %77 = cir.const #true loc(#loc126)
                    cir.yield %77 : !cir.bool loc(#loc126)
                  }, false {
                    %77 = cir.load %8 : !cir.ptr<!s32i>, !s32i loc(#loc127)
                    %78 = cir.const #cir.int<0> : !s32i loc(#loc128)
                    %79 = cir.cmp(eq, %77, %78) : !s32i, !cir.bool loc(#loc277)
                    %80 = cir.ternary(%79, true {
                      %81 = cir.const #true loc(#loc126)
                      cir.yield %81 : !cir.bool loc(#loc126)
                    }, false {
                      %81 = cir.const #false loc(#loc126)
                      cir.yield %81 : !cir.bool loc(#loc126)
                    }) : (!cir.bool) -> !cir.bool loc(#loc126)
                    cir.yield %80 : !cir.bool loc(#loc126)
                  }) : (!cir.bool) -> !cir.bool loc(#loc126)
                  cir.if %76 {
                    cir.break loc(#loc130)
                  } loc(#loc278)
                } loc(#loc275)
                %54 = cir.const #cir.int<0> : !s32i loc(#loc131)
                %55 = cir.cast(integral, %54 : !s32i), !s8i loc(#loc131)
                %56 = cir.load %0 : !cir.ptr<!cir.ptr<!s8i>>, !cir.ptr<!s8i> loc(#loc132)
                %57 = cir.load %12 : !cir.ptr<!u64i>, !u64i loc(#loc133)
                %58 = cir.load %8 : !cir.ptr<!s32i>, !s32i loc(#loc134)
                %59 = cir.cast(integral, %58 : !s32i), !u64i loc(#loc134)
                %60 = cir.const #cir.int<1> : !u64i loc(#loc279)
                %61 = cir.binop(div, %59, %60) : !u64i loc(#loc280)
                %62 = cir.binop(add, %57, %61) : !u64i loc(#loc281)
                %63 = cir.ptr_stride(%56 : !cir.ptr<!s8i>, %62 : !u64i), !cir.ptr<!s8i> loc(#loc137)
                cir.store %55, %63 : !s8i, !cir.ptr<!s8i> loc(#loc282)
                %64 = cir.get_global @strchr : !cir.ptr<!cir.func<(!cir.ptr<!s8i>, !s32i) -> !cir.ptr<!s8i>>> loc(#loc138)
                %65 = cir.load %0 : !cir.ptr<!cir.ptr<!s8i>>, !cir.ptr<!s8i> loc(#loc139)
                %66 = cir.const #cir.int<13> : !s32i loc(#loc140)
                %67 = cir.call @strchr(%65, %66) : (!cir.ptr<!s8i>, !s32i) -> !cir.ptr<!s8i> side_effect(pure) extra(#fn_attr) loc(#loc138)
                cir.store %67, %10 : !cir.ptr<!s8i>, !cir.ptr<!cir.ptr<!s8i>> loc(#loc283)
                cir.scope {
                  %72 = cir.load %10 : !cir.ptr<!cir.ptr<!s8i>>, !cir.ptr<!s8i> loc(#loc145)
                  %73 = cir.cast(ptr_to_bool, %72 : !cir.ptr<!s8i>), !cir.bool loc(#loc145)
                  cir.if %73 {
                    %74 = cir.const #cir.int<0> : !s32i loc(#loc147)
                    %75 = cir.cast(integral, %74 : !s32i), !s8i loc(#loc147)
                    %76 = cir.load deref %10 : !cir.ptr<!cir.ptr<!s8i>>, !cir.ptr<!s8i> loc(#loc148)
                    cir.store %75, %76 : !s8i, !cir.ptr<!s8i> loc(#loc286)
                  } loc(#loc285)
                } loc(#loc284)
                %68 = cir.get_global @strchr : !cir.ptr<!cir.func<(!cir.ptr<!s8i>, !s32i) -> !cir.ptr<!s8i>>> loc(#loc150)
                %69 = cir.load %0 : !cir.ptr<!cir.ptr<!s8i>>, !cir.ptr<!s8i> loc(#loc151)
                %70 = cir.const #cir.int<10> : !s32i loc(#loc152)
                %71 = cir.call @strchr(%69, %70) : (!cir.ptr<!s8i>, !s32i) -> !cir.ptr<!s8i> side_effect(pure) extra(#fn_attr) loc(#loc150)
                cir.store %71, %10 : !cir.ptr<!s8i>, !cir.ptr<!cir.ptr<!s8i>> loc(#loc287)
                cir.scope {
                  %72 = cir.load %10 : !cir.ptr<!cir.ptr<!s8i>>, !cir.ptr<!s8i> loc(#loc157)
                  %73 = cir.cast(ptr_to_bool, %72 : !cir.ptr<!s8i>), !cir.bool loc(#loc157)
                  cir.if %73 {
                    %74 = cir.const #cir.int<0> : !s32i loc(#loc159)
                    %75 = cir.cast(integral, %74 : !s32i), !s8i loc(#loc159)
                    %76 = cir.load deref %10 : !cir.ptr<!cir.ptr<!s8i>>, !cir.ptr<!s8i> loc(#loc160)
                    cir.store %75, %76 : !s8i, !cir.ptr<!s8i> loc(#loc290)
                  } loc(#loc289)
                } loc(#loc288)
              } loc(#loc253)
              cir.yield loc(#loc60)
            } while {
              %18 = cir.const #cir.int<0> : !s32i loc(#loc162)
              %19 = cir.cast(int_to_bool, %18 : !s32i), !cir.bool loc(#loc162)
              cir.condition(%19) loc(#loc162)
            } loc(#loc252)
          } loc(#loc252)
          cir.scope {
            %18 = cir.load %11 : !cir.ptr<!s32i>, !s32i loc(#loc165)
            %19 = cir.const #cir.int<1> : !s32i loc(#loc166)
            %20 = cir.unary(minus, %19) nsw : !s32i, !s32i loc(#loc166)
            %21 = cir.cmp(ne, %18, %20) : !s32i, !cir.bool loc(#loc292)
            cir.if %21 {
              %22 = cir.load %11 : !cir.ptr<!s32i>, !s32i loc(#loc168)
              %23 = cir.call @close(%22) : (!s32i) -> !s32i loc(#loc169)
            } loc(#loc293)
          } loc(#loc291)
        } loc(#loc246)
      } else {
        %8 = cir.get_global @strcat : !cir.ptr<!cir.func<(!cir.ptr<!s8i>, !cir.ptr<!s8i>) -> !cir.ptr<!s8i>>> loc(#loc170)
        %9 = cir.load %0 : !cir.ptr<!cir.ptr<!s8i>>, !cir.ptr<!s8i> loc(#loc171)
        %10 = cir.get_global @".str.1" : !cir.ptr<!cir.array<!s8i x 4>> loc(#loc26)
        %11 = cir.cast(array_to_ptrdecay, %10 : !cir.ptr<!cir.array<!s8i x 4>>), !cir.ptr<!s8i> loc(#loc26)
        %12 = cir.call @strcat(%9, %11) : (!cir.ptr<!s8i>, !cir.ptr<!s8i>) -> !cir.ptr<!s8i> extra(#fn_attr) loc(#loc170)
      } loc(#loc245)
    } loc(#loc243)
    cir.scope {
      %4 = cir.alloca !cir.ptr<!ty__IO_FILE>, !cir.ptr<!cir.ptr<!ty__IO_FILE>>, ["pipe"] {alignment = 8 : i64} loc(#loc295)
      %5 = cir.load %0 : !cir.ptr<!cir.ptr<!s8i>>, !cir.ptr<!s8i> loc(#loc176)
      %6 = cir.get_global @".str.2" : !cir.ptr<!cir.array<!s8i x 2>> loc(#loc29)
      %7 = cir.cast(array_to_ptrdecay, %6 : !cir.ptr<!cir.array<!s8i x 2>>), !cir.ptr<!s8i> loc(#loc29)
      %8 = cir.call @popen(%5, %7) : (!cir.ptr<!s8i>, !cir.ptr<!s8i>) -> !cir.ptr<!ty__IO_FILE> loc(#loc177)
      cir.store %8, %4 : !cir.ptr<!ty__IO_FILE>, !cir.ptr<!cir.ptr<!ty__IO_FILE>> loc(#loc296)
      cir.scope {
        %9 = cir.load %4 : !cir.ptr<!cir.ptr<!ty__IO_FILE>>, !cir.ptr<!ty__IO_FILE> loc(#loc182)
        %10 = cir.const #cir.ptr<null> : !cir.ptr<!void> loc(#loc183)
        %11 = cir.cast(bitcast, %10 : !cir.ptr<!void>), !cir.ptr<!ty__IO_FILE> loc(#loc183)
        %12 = cir.cmp(ne, %9, %11) : !cir.ptr<!ty__IO_FILE>, !cir.bool loc(#loc298)
        cir.if %12 {
          %13 = cir.load %4 : !cir.ptr<!cir.ptr<!ty__IO_FILE>>, !cir.ptr<!ty__IO_FILE> loc(#loc185)
          %14 = cir.call @pclose(%13) : (!cir.ptr<!ty__IO_FILE>) -> !s32i loc(#loc186)
        } loc(#loc299)
      } loc(#loc297)
    } loc(#loc294)
    cir.return loc(#loc33)
  } loc(#loc240)
  cir.func no_proto @CWE78_OS_Command_Injection__char_connect_socket_popen_12_good() extra(#fn_attr1) {
    %0 = cir.get_global @goodG2B : !cir.ptr<!cir.func<()>> loc(#loc301)
    cir.call %0() : (!cir.ptr<!cir.func<()>>) -> () loc(#loc189)
    cir.return loc(#loc188)
  } loc(#loc300)
  cir.func no_proto internal private @goodG2B() extra(#fn_attr1) {
    %0 = cir.alloca !cir.ptr<!s8i>, !cir.ptr<!cir.ptr<!s8i>>, ["data"] {alignment = 8 : i64} loc(#loc303)
    %1 = cir.alloca !cir.array<!s8i x 100>, !cir.ptr<!cir.array<!s8i x 100>>, ["data_buf"] {alignment = 16 : i64} loc(#loc226)
    %2 = cir.get_global @__const.goodG2B.data_buf : !cir.ptr<!cir.array<!s8i x 100>> loc(#loc226)
    cir.copy %2 to %1 : !cir.ptr<!cir.array<!s8i x 100>> loc(#loc226)
    %3 = cir.cast(array_to_ptrdecay, %1 : !cir.ptr<!cir.array<!s8i x 100>>), !cir.ptr<!s8i> loc(#loc195)
    cir.store %3, %0 : !cir.ptr<!s8i>, !cir.ptr<!cir.ptr<!s8i>> loc(#loc304)
    cir.scope {
      %4 = cir.get_global @globalReturnsTrueOrFalse : !cir.ptr<!cir.func<(...) -> !s32i>> loc(#loc306)
      %5 = cir.cast(bitcast, %4 : !cir.ptr<!cir.func<(...) -> !s32i>>), !cir.ptr<!cir.func<() -> !s32i>> loc(#loc306)
      %6 = cir.call %5() : (!cir.ptr<!cir.func<() -> !s32i>>) -> !s32i loc(#loc199)
      %7 = cir.cast(int_to_bool, %6 : !s32i), !cir.bool loc(#loc199)
      cir.if %7 {
        %8 = cir.get_global @strcat : !cir.ptr<!cir.func<(!cir.ptr<!s8i>, !cir.ptr<!s8i>) -> !cir.ptr<!s8i>>> loc(#loc204)
        %9 = cir.load %0 : !cir.ptr<!cir.ptr<!s8i>>, !cir.ptr<!s8i> loc(#loc205)
        %10 = cir.get_global @".str.1" : !cir.ptr<!cir.array<!s8i x 4>> loc(#loc206)
        %11 = cir.cast(array_to_ptrdecay, %10 : !cir.ptr<!cir.array<!s8i x 4>>), !cir.ptr<!s8i> loc(#loc206)
        %12 = cir.call @strcat(%9, %11) : (!cir.ptr<!s8i>, !cir.ptr<!s8i>) -> !cir.ptr<!s8i> extra(#fn_attr) loc(#loc204)
      } else {
        %8 = cir.get_global @strcat : !cir.ptr<!cir.func<(!cir.ptr<!s8i>, !cir.ptr<!s8i>) -> !cir.ptr<!s8i>>> loc(#loc207)
        %9 = cir.load %0 : !cir.ptr<!cir.ptr<!s8i>>, !cir.ptr<!s8i> loc(#loc208)
        %10 = cir.get_global @".str.1" : !cir.ptr<!cir.array<!s8i x 4>> loc(#loc209)
        %11 = cir.cast(array_to_ptrdecay, %10 : !cir.ptr<!cir.array<!s8i x 4>>), !cir.ptr<!s8i> loc(#loc209)
        %12 = cir.call @strcat(%9, %11) : (!cir.ptr<!s8i>, !cir.ptr<!s8i>) -> !cir.ptr<!s8i> extra(#fn_attr) loc(#loc207)
      } loc(#loc307)
    } loc(#loc305)
    cir.scope {
      %4 = cir.alloca !cir.ptr<!ty__IO_FILE>, !cir.ptr<!cir.ptr<!ty__IO_FILE>>, ["pipe"] {alignment = 8 : i64} loc(#loc309)
      %5 = cir.load %0 : !cir.ptr<!cir.ptr<!s8i>>, !cir.ptr<!s8i> loc(#loc214)
      %6 = cir.get_global @".str.2" : !cir.ptr<!cir.array<!s8i x 2>> loc(#loc215)
      %7 = cir.cast(array_to_ptrdecay, %6 : !cir.ptr<!cir.array<!s8i x 2>>), !cir.ptr<!s8i> loc(#loc215)
      %8 = cir.call @popen(%5, %7) : (!cir.ptr<!s8i>, !cir.ptr<!s8i>) -> !cir.ptr<!ty__IO_FILE> loc(#loc216)
      cir.store %8, %4 : !cir.ptr<!ty__IO_FILE>, !cir.ptr<!cir.ptr<!ty__IO_FILE>> loc(#loc310)
      cir.scope {
        %9 = cir.load %4 : !cir.ptr<!cir.ptr<!ty__IO_FILE>>, !cir.ptr<!ty__IO_FILE> loc(#loc221)
        %10 = cir.const #cir.ptr<null> : !cir.ptr<!void> loc(#loc222)
        %11 = cir.cast(bitcast, %10 : !cir.ptr<!void>), !cir.ptr<!ty__IO_FILE> loc(#loc222)
        %12 = cir.cmp(ne, %9, %11) : !cir.ptr<!ty__IO_FILE>, !cir.bool loc(#loc312)
        cir.if %12 {
          %13 = cir.load %4 : !cir.ptr<!cir.ptr<!ty__IO_FILE>>, !cir.ptr<!ty__IO_FILE> loc(#loc224)
          %14 = cir.call @pclose(%13) : (!cir.ptr<!ty__IO_FILE>) -> !s32i loc(#loc225)
        } loc(#loc313)
      } loc(#loc311)
    } loc(#loc308)
    cir.return loc(#loc192)
  } loc(#loc302)
} loc(#loc)
#loc = loc("/workspaces/juliet-c/testcases/CWE78_OS_Command_Injection/s01/CWE78_OS_Command_Injection__char_connect_socket_popen_12.c":0:0)
#loc1 = loc("CWE78_OS_Command_Injection__char_connect_socket_popen_12.c":159:5)
#loc2 = loc("CWE78_OS_Command_Injection__char_connect_socket_popen_12.c":159:26)
#loc3 = loc("CWE78_OS_Command_Injection__char_connect_socket_popen_12.c":62:5)
#loc4 = loc("CWE78_OS_Command_Injection__char_connect_socket_popen_12.c":62:26)
#loc5 = loc("../../../testcasesupport/std_testcase_io.h":52:1)
#loc6 = loc("../../../testcasesupport/std_testcase_io.h":52:30)
#loc7 = loc("/usr/include/string.h":407:1)
#loc8 = loc("/usr/include/string.h":408:33)
#loc9 = loc("/usr/include/x86_64-linux-gnu/sys/socket.h":102:1)
#loc10 = loc("/usr/include/x86_64-linux-gnu/sys/socket.h":102:62)
#loc11 = loc("/usr/include/arpa/inet.h":34:1)
#loc12 = loc("/usr/include/arpa/inet.h":34:47)
#loc13 = loc("CWE78_OS_Command_Injection__char_connect_socket_popen_12.c":93:53)
#loc14 = loc("/usr/include/netinet/in.h":402:1)
#loc15 = loc("/usr/include/netinet/in.h":403:40)
#loc16 = loc("/usr/include/x86_64-linux-gnu/sys/socket.h":126:1)
#loc17 = loc("/usr/include/x86_64-linux-gnu/sys/socket.h":126:75)
#loc18 = loc("/usr/include/x86_64-linux-gnu/sys/socket.h":145:1)
#loc19 = loc("/usr/include/x86_64-linux-gnu/sys/socket.h":145:68)
#loc20 = loc("/usr/include/string.h":246:1)
#loc21 = loc("/usr/include/string.h":247:33)
#loc22 = loc("/usr/include/unistd.h":358:1)
#loc23 = loc("/usr/include/unistd.h":358:27)
#loc24 = loc("/usr/include/string.h":149:1)
#loc25 = loc("/usr/include/string.h":150:14)
#loc26 = loc("CWE78_OS_Command_Injection__char_connect_socket_popen_12.c":137:22)
#loc27 = loc("/usr/include/stdio.h":903:1)
#loc28 = loc("/usr/include/stdio.h":904:3)
#loc29 = loc("CWE78_OS_Command_Injection__char_connect_socket_popen_12.c":142:28)
#loc30 = loc("/usr/include/stdio.h":897:1)
#loc31 = loc("/usr/include/stdio.h":897:36)
#loc32 = loc("CWE78_OS_Command_Injection__char_connect_socket_popen_12.c":59:1)
#loc33 = loc("CWE78_OS_Command_Injection__char_connect_socket_popen_12.c":148:1)
#loc34 = loc("CWE78_OS_Command_Injection__char_connect_socket_popen_12.c":61:5)
#loc35 = loc("CWE78_OS_Command_Injection__char_connect_socket_popen_12.c":61:12)
#loc36 = loc("CWE78_OS_Command_Injection__char_connect_socket_popen_12.c":63:12)
#loc37 = loc("CWE78_OS_Command_Injection__char_connect_socket_popen_12.c":63:5)
#loc38 = loc("CWE78_OS_Command_Injection__char_connect_socket_popen_12.c":64:5)
#loc39 = loc("CWE78_OS_Command_Injection__char_connect_socket_popen_12.c":138:5)
#loc40 = loc("CWE78_OS_Command_Injection__char_connect_socket_popen_12.c":64:8)
#loc41 = loc("CWE78_OS_Command_Injection__char_connect_socket_popen_12.c":64:33)
#loc42 = loc("CWE78_OS_Command_Injection__char_connect_socket_popen_12.c":65:5)
#loc43 = loc("CWE78_OS_Command_Injection__char_connect_socket_popen_12.c":133:5)
#loc44 = loc("CWE78_OS_Command_Injection__char_connect_socket_popen_12.c":135:5)
#loc45 = loc("CWE78_OS_Command_Injection__char_connect_socket_popen_12.c":66:9)
#loc46 = loc("CWE78_OS_Command_Injection__char_connect_socket_popen_12.c":132:9)
#loc47 = loc("CWE78_OS_Command_Injection__char_connect_socket_popen_12.c":71:13)
#loc48 = loc("CWE78_OS_Command_Injection__char_connect_socket_popen_12.c":71:17)
#loc49 = loc("CWE78_OS_Command_Injection__char_connect_socket_popen_12.c":72:13)
#loc50 = loc("CWE78_OS_Command_Injection__char_connect_socket_popen_12.c":72:32)
#loc51 = loc("CWE78_OS_Command_Injection__char_connect_socket_popen_12.c":73:13)
#loc52 = loc("CWE78_OS_Command_Injection__char_connect_socket_popen_12.c":73:19)
#loc53 = loc("CWE78_OS_Command_Injection__char_connect_socket_popen_12.c":74:13)
#loc54 = loc("CWE78_OS_Command_Injection__char_connect_socket_popen_12.c":74:36)
#loc55 = loc("CWE78_OS_Command_Injection__char_connect_socket_popen_12.c":75:13)
#loc56 = loc("CWE78_OS_Command_Injection__char_connect_socket_popen_12.c":75:41)
#loc57 = loc("CWE78_OS_Command_Injection__char_connect_socket_popen_12.c":75:30)
#loc58 = loc("CWE78_OS_Command_Injection__char_connect_socket_popen_12.c":75:37)
#loc59 = loc("CWE78_OS_Command_Injection__char_connect_socket_popen_12.c":76:13)
#loc60 = loc("CWE78_OS_Command_Injection__char_connect_socket_popen_12.c":121:21)
#loc61 = loc("CWE78_OS_Command_Injection__char_connect_socket_popen_12.c":77:13)
#loc62 = loc("CWE78_OS_Command_Injection__char_connect_socket_popen_12.c":120:13)
#loc63 = loc("CWE78_OS_Command_Injection__char_connect_socket_popen_12.c":86:40)
#loc64 = loc("CWE78_OS_Command_Injection__char_connect_socket_popen_12.c":86:49)
#loc65 = loc("CWE78_OS_Command_Injection__char_connect_socket_popen_12.c":86:62)
#loc66 = loc("CWE78_OS_Command_Injection__char_connect_socket_popen_12.c":86:33)
#loc67 = loc("CWE78_OS_Command_Injection__char_connect_socket_popen_12.c":86:17)
#loc68 = loc("CWE78_OS_Command_Injection__char_connect_socket_popen_12.c":86:73)
#loc69 = loc("CWE78_OS_Command_Injection__char_connect_socket_popen_12.c":87:17)
#loc70 = loc("CWE78_OS_Command_Injection__char_connect_socket_popen_12.c":90:17)
#loc71 = loc("CWE78_OS_Command_Injection__char_connect_socket_popen_12.c":87:21)
#loc72 = loc("CWE78_OS_Command_Injection__char_connect_socket_popen_12.c":87:38)
#loc73 = loc("CWE78_OS_Command_Injection__char_connect_socket_popen_12.c":88:17)
#loc74 = loc("CWE78_OS_Command_Injection__char_connect_socket_popen_12.c":89:21)
#loc75 = loc("CWE78_OS_Command_Injection__char_connect_socket_popen_12.c":91:24)
#loc76 = loc("CWE78_OS_Command_Injection__char_connect_socket_popen_12.c":91:25)
#loc77 = loc("CWE78_OS_Command_Injection__char_connect_socket_popen_12.c":91:34)
#loc78 = loc("CWE78_OS_Command_Injection__char_connect_socket_popen_12.c":91:37)
#loc79 = loc("CWE78_OS_Command_Injection__char_connect_socket_popen_12.c":91:51)
#loc80 = loc("CWE78_OS_Command_Injection__char_connect_socket_popen_12.c":91:17)
#loc81 = loc("CWE78_OS_Command_Injection__char_connect_socket_popen_12.c":91:52)
#loc82 = loc("CWE78_OS_Command_Injection__char_connect_socket_popen_12.c":92:38)
#loc83 = loc("/usr/include/netinet/in.h":249:5)
#loc84 = loc("CWE78_OS_Command_Injection__char_connect_socket_popen_12.c":92:17)
#loc85 = loc("CWE78_OS_Command_Injection__char_connect_socket_popen_12.c":93:43)
#loc86 = loc("/usr/include/netinet/in.h":251:20)
#loc87 = loc("/usr/include/netinet/in.h":33:15)
#loc88 = loc("CWE78_OS_Command_Injection__char_connect_socket_popen_12.c":93:17)
#loc89 = loc("CWE78_OS_Command_Injection__char_connect_socket_popen_12.c":93:63)
#loc90 = loc("CWE78_OS_Command_Injection__char_connect_socket_popen_12.c":94:42)
#loc91 = loc("CWE78_OS_Command_Injection__char_connect_socket_popen_12.c":94:36)
#loc92 = loc("/usr/include/netinet/in.h":250:15)
#loc93 = loc("CWE78_OS_Command_Injection__char_connect_socket_popen_12.c":94:17)
#loc94 = loc("CWE78_OS_Command_Injection__char_connect_socket_popen_12.c":94:50)
#loc95 = loc("CWE78_OS_Command_Injection__char_connect_socket_popen_12.c":95:17)
#loc96 = loc("CWE78_OS_Command_Injection__char_connect_socket_popen_12.c":98:17)
#loc97 = loc("CWE78_OS_Command_Injection__char_connect_socket_popen_12.c":95:29)
#loc98 = loc("CWE78_OS_Command_Injection__char_connect_socket_popen_12.c":95:62)
#loc99 = loc("CWE78_OS_Command_Injection__char_connect_socket_popen_12.c":95:63)
#loc100 = loc("CWE78_OS_Command_Injection__char_connect_socket_popen_12.c":95:72)
#loc101 = loc("CWE78_OS_Command_Injection__char_connect_socket_popen_12.c":95:86)
#loc102 = loc("CWE78_OS_Command_Injection__char_connect_socket_popen_12.c":95:21)
#loc103 = loc("CWE78_OS_Command_Injection__char_connect_socket_popen_12.c":95:92)
#loc104 = loc("CWE78_OS_Command_Injection__char_connect_socket_popen_12.c":96:17)
#loc105 = loc("CWE78_OS_Command_Injection__char_connect_socket_popen_12.c":97:21)
#loc106 = loc("CWE78_OS_Command_Injection__char_connect_socket_popen_12.c":102:35)
#loc107 = loc("CWE78_OS_Command_Injection__char_connect_socket_popen_12.c":102:59)
#loc108 = loc("CWE78_OS_Command_Injection__char_connect_socket_popen_12.c":102:66)
#loc109 = loc("CWE78_OS_Command_Injection__char_connect_socket_popen_12.c":102:64)
#loc110 = loc("CWE78_OS_Command_Injection__char_connect_socket_popen_12.c":102:50)
#loc111 = loc("CWE78_OS_Command_Injection__char_connect_socket_popen_12.c":102:73)
#loc112 = loc("CWE78_OS_Command_Injection__char_connect_socket_popen_12.c":102:76)
#loc113 = loc("CWE78_OS_Command_Injection__char_connect_socket_popen_12.c":102:87)
#loc114 = loc("CWE78_OS_Command_Injection__char_connect_socket_popen_12.c":102:92)
#loc115 = loc("CWE78_OS_Command_Injection__char_connect_socket_popen_12.c":102:98)
#loc116 = loc("CWE78_OS_Command_Injection__char_connect_socket_popen_12.c":102:108)
#loc117 = loc("CWE78_OS_Command_Injection__char_connect_socket_popen_12.c":102:109)
#loc118 = loc("CWE78_OS_Command_Injection__char_connect_socket_popen_12.c":102:112)
#loc119 = loc("CWE78_OS_Command_Injection__char_connect_socket_popen_12.c":102:30)
#loc120 = loc("CWE78_OS_Command_Injection__char_connect_socket_popen_12.c":102:17)
#loc121 = loc("CWE78_OS_Command_Injection__char_connect_socket_popen_12.c":102:113)
#loc122 = loc("CWE78_OS_Command_Injection__char_connect_socket_popen_12.c":103:17)
#loc123 = loc("CWE78_OS_Command_Injection__char_connect_socket_popen_12.c":106:17)
#loc124 = loc("CWE78_OS_Command_Injection__char_connect_socket_popen_12.c":103:21)
#loc125 = loc("CWE78_OS_Command_Injection__char_connect_socket_popen_12.c":103:35)
#loc126 = loc("CWE78_OS_Command_Injection__char_connect_socket_popen_12.c":103:48)
#loc127 = loc("CWE78_OS_Command_Injection__char_connect_socket_popen_12.c":103:51)
#loc128 = loc("CWE78_OS_Command_Injection__char_connect_socket_popen_12.c":103:65)
#loc129 = loc("CWE78_OS_Command_Injection__char_connect_socket_popen_12.c":104:17)
#loc130 = loc("CWE78_OS_Command_Injection__char_connect_socket_popen_12.c":105:21)
#loc131 = loc("CWE78_OS_Command_Injection__char_connect_socket_popen_12.c":108:61)
#loc132 = loc("CWE78_OS_Command_Injection__char_connect_socket_popen_12.c":108:17)
#loc133 = loc("CWE78_OS_Command_Injection__char_connect_socket_popen_12.c":108:22)
#loc134 = loc("CWE78_OS_Command_Injection__char_connect_socket_popen_12.c":108:32)
#loc135 = loc("CWE78_OS_Command_Injection__char_connect_socket_popen_12.c":108:45)
#loc136 = loc("CWE78_OS_Command_Injection__char_connect_socket_popen_12.c":108:56)
#loc137 = loc("CWE78_OS_Command_Injection__char_connect_socket_popen_12.c":108:57)
#loc138 = loc("CWE78_OS_Command_Injection__char_connect_socket_popen_12.c":110:27)
#loc139 = loc("CWE78_OS_Command_Injection__char_connect_socket_popen_12.c":110:34)
#loc140 = loc("CWE78_OS_Command_Injection__char_connect_socket_popen_12.c":110:40)
#loc141 = loc("CWE78_OS_Command_Injection__char_connect_socket_popen_12.c":110:17)
#loc142 = loc("CWE78_OS_Command_Injection__char_connect_socket_popen_12.c":110:44)
#loc143 = loc("CWE78_OS_Command_Injection__char_connect_socket_popen_12.c":111:17)
#loc144 = loc("CWE78_OS_Command_Injection__char_connect_socket_popen_12.c":114:17)
#loc145 = loc("CWE78_OS_Command_Injection__char_connect_socket_popen_12.c":111:21)
#loc146 = loc("CWE78_OS_Command_Injection__char_connect_socket_popen_12.c":112:17)
#loc147 = loc("CWE78_OS_Command_Injection__char_connect_socket_popen_12.c":113:32)
#loc148 = loc("CWE78_OS_Command_Injection__char_connect_socket_popen_12.c":113:22)
#loc149 = loc("CWE78_OS_Command_Injection__char_connect_socket_popen_12.c":113:21)
#loc150 = loc("CWE78_OS_Command_Injection__char_connect_socket_popen_12.c":115:27)
#loc151 = loc("CWE78_OS_Command_Injection__char_connect_socket_popen_12.c":115:34)
#loc152 = loc("CWE78_OS_Command_Injection__char_connect_socket_popen_12.c":115:40)
#loc153 = loc("CWE78_OS_Command_Injection__char_connect_socket_popen_12.c":115:17)
#loc154 = loc("CWE78_OS_Command_Injection__char_connect_socket_popen_12.c":115:44)
#loc155 = loc("CWE78_OS_Command_Injection__char_connect_socket_popen_12.c":116:17)
#loc156 = loc("CWE78_OS_Command_Injection__char_connect_socket_popen_12.c":119:17)
#loc157 = loc("CWE78_OS_Command_Injection__char_connect_socket_popen_12.c":116:21)
#loc158 = loc("CWE78_OS_Command_Injection__char_connect_socket_popen_12.c":117:17)
#loc159 = loc("CWE78_OS_Command_Injection__char_connect_socket_popen_12.c":118:32)
#loc160 = loc("CWE78_OS_Command_Injection__char_connect_socket_popen_12.c":118:22)
#loc161 = loc("CWE78_OS_Command_Injection__char_connect_socket_popen_12.c":118:21)
#loc162 = loc("CWE78_OS_Command_Injection__char_connect_socket_popen_12.c":121:20)
#loc163 = loc("CWE78_OS_Command_Injection__char_connect_socket_popen_12.c":122:13)
#loc164 = loc("CWE78_OS_Command_Injection__char_connect_socket_popen_12.c":125:13)
#loc165 = loc("CWE78_OS_Command_Injection__char_connect_socket_popen_12.c":122:17)
#loc166 = loc("CWE78_OS_Command_Injection__char_connect_socket_popen_12.c":122:34)
#loc167 = loc("CWE78_OS_Command_Injection__char_connect_socket_popen_12.c":123:13)
#loc168 = loc("CWE78_OS_Command_Injection__char_connect_socket_popen_12.c":124:30)
#loc169 = loc("CWE78_OS_Command_Injection__char_connect_socket_popen_12.c":124:17)
#loc170 = loc("CWE78_OS_Command_Injection__char_connect_socket_popen_12.c":137:9)
#loc171 = loc("CWE78_OS_Command_Injection__char_connect_socket_popen_12.c":137:16)
#loc172 = loc("CWE78_OS_Command_Injection__char_connect_socket_popen_12.c":139:5)
#loc173 = loc("CWE78_OS_Command_Injection__char_connect_socket_popen_12.c":147:5)
#loc174 = loc("CWE78_OS_Command_Injection__char_connect_socket_popen_12.c":140:9)
#loc175 = loc("CWE78_OS_Command_Injection__char_connect_socket_popen_12.c":140:15)
#loc176 = loc("CWE78_OS_Command_Injection__char_connect_socket_popen_12.c":142:22)
#loc177 = loc("CWE78_OS_Command_Injection__char_connect_socket_popen_12.c":142:16)
#loc178 = loc("CWE78_OS_Command_Injection__char_connect_socket_popen_12.c":142:9)
#loc179 = loc("CWE78_OS_Command_Injection__char_connect_socket_popen_12.c":142:31)
#loc180 = loc("CWE78_OS_Command_Injection__char_connect_socket_popen_12.c":143:9)
#loc181 = loc("CWE78_OS_Command_Injection__char_connect_socket_popen_12.c":146:9)
#loc182 = loc("CWE78_OS_Command_Injection__char_connect_socket_popen_12.c":143:13)
#loc183 = loc("CWE78_OS_Command_Injection__char_connect_socket_popen_12.c":143:21)
#loc184 = loc("CWE78_OS_Command_Injection__char_connect_socket_popen_12.c":144:9)
#loc185 = loc("CWE78_OS_Command_Injection__char_connect_socket_popen_12.c":145:20)
#loc186 = loc("CWE78_OS_Command_Injection__char_connect_socket_popen_12.c":145:13)
#loc187 = loc("CWE78_OS_Command_Injection__char_connect_socket_popen_12.c":182:1)
#loc188 = loc("CWE78_OS_Command_Injection__char_connect_socket_popen_12.c":185:1)
#loc189 = loc("CWE78_OS_Command_Injection__char_connect_socket_popen_12.c":184:5)
#loc190 = loc("CWE78_OS_Command_Injection__char_connect_socket_popen_12.c":184:13)
#loc191 = loc("CWE78_OS_Command_Injection__char_connect_socket_popen_12.c":156:1)
#loc192 = loc("CWE78_OS_Command_Injection__char_connect_socket_popen_12.c":180:1)
#loc193 = loc("CWE78_OS_Command_Injection__char_connect_socket_popen_12.c":158:5)
#loc194 = loc("CWE78_OS_Command_Injection__char_connect_socket_popen_12.c":158:12)
#loc195 = loc("CWE78_OS_Command_Injection__char_connect_socket_popen_12.c":160:12)
#loc196 = loc("CWE78_OS_Command_Injection__char_connect_socket_popen_12.c":160:5)
#loc197 = loc("CWE78_OS_Command_Injection__char_connect_socket_popen_12.c":161:5)
#loc198 = loc("CWE78_OS_Command_Injection__char_connect_socket_popen_12.c":170:5)
#loc199 = loc("CWE78_OS_Command_Injection__char_connect_socket_popen_12.c":161:8)
#loc200 = loc("CWE78_OS_Command_Injection__char_connect_socket_popen_12.c":161:33)
#loc201 = loc("CWE78_OS_Command_Injection__char_connect_socket_popen_12.c":162:5)
#loc202 = loc("CWE78_OS_Command_Injection__char_connect_socket_popen_12.c":165:5)
#loc203 = loc("CWE78_OS_Command_Injection__char_connect_socket_popen_12.c":167:5)
#loc204 = loc("CWE78_OS_Command_Injection__char_connect_socket_popen_12.c":164:9)
#loc205 = loc("CWE78_OS_Command_Injection__char_connect_socket_popen_12.c":164:16)
#loc206 = loc("CWE78_OS_Command_Injection__char_connect_socket_popen_12.c":164:22)
#loc207 = loc("CWE78_OS_Command_Injection__char_connect_socket_popen_12.c":169:9)
#loc208 = loc("CWE78_OS_Command_Injection__char_connect_socket_popen_12.c":169:16)
#loc209 = loc("CWE78_OS_Command_Injection__char_connect_socket_popen_12.c":169:22)
#loc210 = loc("CWE78_OS_Command_Injection__char_connect_socket_popen_12.c":171:5)
#loc211 = loc("CWE78_OS_Command_Injection__char_connect_socket_popen_12.c":179:5)
#loc212 = loc("CWE78_OS_Command_Injection__char_connect_socket_popen_12.c":172:9)
#loc213 = loc("CWE78_OS_Command_Injection__char_connect_socket_popen_12.c":172:15)
#loc214 = loc("CWE78_OS_Command_Injection__char_connect_socket_popen_12.c":174:22)
#loc215 = loc("CWE78_OS_Command_Injection__char_connect_socket_popen_12.c":174:28)
#loc216 = loc("CWE78_OS_Command_Injection__char_connect_socket_popen_12.c":174:16)
#loc217 = loc("CWE78_OS_Command_Injection__char_connect_socket_popen_12.c":174:9)
#loc218 = loc("CWE78_OS_Command_Injection__char_connect_socket_popen_12.c":174:31)
#loc219 = loc("CWE78_OS_Command_Injection__char_connect_socket_popen_12.c":175:9)
#loc220 = loc("CWE78_OS_Command_Injection__char_connect_socket_popen_12.c":178:9)
#loc221 = loc("CWE78_OS_Command_Injection__char_connect_socket_popen_12.c":175:13)
#loc222 = loc("CWE78_OS_Command_Injection__char_connect_socket_popen_12.c":175:21)
#loc223 = loc("CWE78_OS_Command_Injection__char_connect_socket_popen_12.c":176:9)
#loc224 = loc("CWE78_OS_Command_Injection__char_connect_socket_popen_12.c":177:20)
#loc225 = loc("CWE78_OS_Command_Injection__char_connect_socket_popen_12.c":177:13)
#loc226 = loc(fused[#loc1, #loc2])
#loc227 = loc(fused[#loc3, #loc4])
#loc228 = loc(fused[#loc5, #loc6])
#loc229 = loc(fused[#loc7, #loc8])
#loc230 = loc(fused[#loc9, #loc10])
#loc231 = loc(fused[#loc11, #loc12])
#loc232 = loc(fused[#loc14, #loc15])
#loc233 = loc(fused[#loc16, #loc17])
#loc234 = loc(fused[#loc18, #loc19])
#loc235 = loc(fused[#loc20, #loc21])
#loc236 = loc(fused[#loc22, #loc23])
#loc237 = loc(fused[#loc24, #loc25])
#loc238 = loc(fused[#loc27, #loc28])
#loc239 = loc(fused[#loc30, #loc31])
#loc240 = loc(fused[#loc32, #loc33])
#loc241 = loc(fused[#loc34, #loc35])
#loc242 = loc(fused[#loc37, #loc36])
#loc243 = loc(fused[#loc38, #loc39])
#loc244 = loc(fused[#loc40, #loc41])
#loc245 = loc(fused[#loc42, #loc43, #loc44, #loc39])
#loc246 = loc(fused[#loc45, #loc46])
#loc247 = loc(fused[#loc47, #loc48])
#loc248 = loc(fused[#loc49, #loc50])
#loc249 = loc(fused[#loc51, #loc52])
#loc250 = loc(fused[#loc53, #loc54])
#loc251 = loc(fused[#loc55, #loc56])
#loc252 = loc(fused[#loc59, #loc60])
#loc253 = loc(fused[#loc61, #loc62])
#loc254 = loc(fused[#loc67, #loc68])
#loc255 = loc(fused[#loc69, #loc70])
#loc256 = loc(fused[#loc71, #loc72])
#loc257 = loc(fused[#loc73, #loc70])
#loc258 = loc(fused[#loc75, #loc76])
#loc259 = loc(fused[#loc78, #loc79])
#loc260 = loc(fused[#loc80, #loc81])
#loc261 = loc(fused[#loc84, #loc82])
#loc262 = loc(fused[#loc88, #loc89])
#loc263 = loc(fused[#loc93, #loc94])
#loc264 = loc(fused[#loc95, #loc96])
#loc265 = loc(fused[#loc98, #loc99])
#loc266 = loc(fused[#loc100, #loc101])
#loc267 = loc(fused[#loc102, #loc103])
#loc268 = loc(fused[#loc104, #loc96])
#loc269 = loc(fused[#loc110, #loc111])
#loc270 = loc(fused[#loc112, #loc113])
#loc271 = loc(fused[#loc114, #loc115])
#loc272 = loc(fused[#loc114, #loc116])
#loc273 = loc(fused[#loc112, #loc117])
#loc274 = loc(fused[#loc120, #loc121])
#loc275 = loc(fused[#loc122, #loc123])
#loc276 = loc(fused[#loc124, #loc125])
#loc277 = loc(fused[#loc127, #loc128])
#loc278 = loc(fused[#loc129, #loc123])
#loc279 = loc(fused[#loc135, #loc136])
#loc280 = loc(fused[#loc134, #loc136])
#loc281 = loc(fused[#loc133, #loc136])
#loc282 = loc(fused[#loc132, #loc131])
#loc283 = loc(fused[#loc141, #loc142])
#loc284 = loc(fused[#loc143, #loc144])
#loc285 = loc(fused[#loc146, #loc144])
#loc286 = loc(fused[#loc149, #loc147])
#loc287 = loc(fused[#loc153, #loc154])
#loc288 = loc(fused[#loc155, #loc156])
#loc289 = loc(fused[#loc158, #loc156])
#loc290 = loc(fused[#loc161, #loc159])
#loc291 = loc(fused[#loc163, #loc164])
#loc292 = loc(fused[#loc165, #loc166])
#loc293 = loc(fused[#loc167, #loc164])
#loc294 = loc(fused[#loc172, #loc173])
#loc295 = loc(fused[#loc174, #loc175])
#loc296 = loc(fused[#loc178, #loc179])
#loc297 = loc(fused[#loc180, #loc181])
#loc298 = loc(fused[#loc182, #loc183])
#loc299 = loc(fused[#loc184, #loc181])
#loc300 = loc(fused[#loc187, #loc188])
#loc301 = loc(fused[#loc189, #loc190])
#loc302 = loc(fused[#loc191, #loc192])
#loc303 = loc(fused[#loc193, #loc194])
#loc304 = loc(fused[#loc196, #loc195])
#loc305 = loc(fused[#loc197, #loc198])
#loc306 = loc(fused[#loc199, #loc200])
#loc307 = loc(fused[#loc201, #loc202, #loc203, #loc198])
#loc308 = loc(fused[#loc210, #loc211])
#loc309 = loc(fused[#loc212, #loc213])
#loc310 = loc(fused[#loc217, #loc218])
#loc311 = loc(fused[#loc219, #loc220])
#loc312 = loc(fused[#loc221, #loc222])
#loc313 = loc(fused[#loc223, #loc220])
