!s32i = !cir.int<s, 32>
!s8i = !cir.int<s, 8>
!u64i = !cir.int<u, 64>
!u8i = !cir.int<u, 8>
!void = !cir.void
#fn_attr = #cir<extra({nothrow = #cir.nothrow})>
#fn_attr1 = #cir<extra({inline = #cir.inline<no>, nothrow = #cir.nothrow, optnone = #cir.optnone, uwtable = #cir.uwtable<async>})>
module @"/workspaces/juliet-c/testcases/CWE121_Stack_Based_Buffer_Overflow/s01/CWE121_Stack_Based_Buffer_Overflow__CWE135_06.c" attributes {cir.lang = #cir.lang<c>, cir.sob = #cir.signed_overflow_behavior<undefined>, cir.triple = "x86_64-unknown-linux-gnu", cir.type_size_info = #cir.type_size_info<char = 8, int = 32, size_t = 64>, cir.uwtable = #cir.uwtable<async>, dlti.dl_spec = #dlti.dl_spec<f16 = dense<16> : vector<2xi64>, f64 = dense<64> : vector<2xi64>, i32 = dense<32> : vector<2xi64>, i16 = dense<16> : vector<2xi64>, !llvm.ptr<272> = dense<64> : vector<4xi64>, i64 = dense<64> : vector<2xi64>, !llvm.ptr<270> = dense<32> : vector<4xi64>, !llvm.ptr<271> = dense<32> : vector<4xi64>, f128 = dense<128> : vector<2xi64>, f80 = dense<128> : vector<2xi64>, i128 = dense<128> : vector<2xi64>, i8 = dense<8> : vector<2xi64>, i1 = dense<8> : vector<2xi64>, !llvm.ptr = dense<64> : vector<4xi64>, "dlti.mangling_mode" = "e", "dlti.endianness" = "little", "dlti.stack_alignment" = 128 : i64>} {
  cir.global "private" constant cir_private dsolocal @".str" = #cir.const_array<[#cir.int<65> : !s32i, #cir.int<65> : !s32i, #cir.int<65> : !s32i, #cir.int<65> : !s32i, #cir.int<65> : !s32i, #cir.int<65> : !s32i, #cir.int<65> : !s32i, #cir.int<65> : !s32i, #cir.int<65> : !s32i, #cir.int<65> : !s32i, #cir.int<65> : !s32i, #cir.int<65> : !s32i, #cir.int<65> : !s32i, #cir.int<65> : !s32i, #cir.int<65> : !s32i, #cir.int<65> : !s32i, #cir.int<65> : !s32i, #cir.int<65> : !s32i, #cir.int<65> : !s32i, #cir.int<65> : !s32i, #cir.int<65> : !s32i, #cir.int<65> : !s32i, #cir.int<65> : !s32i, #cir.int<65> : !s32i, #cir.int<65> : !s32i, #cir.int<65> : !s32i, #cir.int<65> : !s32i, #cir.int<65> : !s32i, #cir.int<65> : !s32i, #cir.int<65> : !s32i, #cir.int<65> : !s32i, #cir.int<65> : !s32i, #cir.int<65> : !s32i, #cir.int<65> : !s32i, #cir.int<65> : !s32i, #cir.int<65> : !s32i, #cir.int<65> : !s32i, #cir.int<65> : !s32i, #cir.int<65> : !s32i, #cir.int<65> : !s32i, #cir.int<65> : !s32i, #cir.int<65> : !s32i, #cir.int<0> : !s32i]> : !cir.array<!s32i x 43> {alignment = 4 : i64} loc(#loc1)
  cir.func private @strlen(!cir.ptr<!s8i>) -> !u64i extra(#fn_attr) loc(#loc186)
  cir.func private @wcscpy(!cir.ptr<!s32i>, !cir.ptr<!s32i>) -> !cir.ptr<!s32i> extra(#fn_attr) loc(#loc187)
  cir.func private @printLine(!cir.ptr<!s8i>) loc(#loc188)
  cir.func no_proto @CWE121_Stack_Based_Buffer_Overflow__CWE135_06_bad() extra(#fn_attr1) {
    %0 = cir.alloca !cir.ptr<!void>, !cir.ptr<!cir.ptr<!void>>, ["data"] {alignment = 8 : i64} loc(#loc190)
    %1 = cir.const #cir.ptr<null> : !cir.ptr<!void> loc(#loc12)
    cir.store %1, %0 : !cir.ptr<!void>, !cir.ptr<!cir.ptr<!void>> loc(#loc191)
    cir.scope {
      %2 = cir.const #cir.int<5> : !s32i loc(#loc16)
      %3 = cir.const #cir.int<5> : !s32i loc(#loc17)
      %4 = cir.cmp(eq, %2, %3) : !s32i, !cir.bool loc(#loc193)
      cir.if %4 {
        %5 = cir.get_global @".str" : !cir.ptr<!cir.array<!s32i x 43>> loc(#loc1)
        %6 = cir.cast(array_to_ptrdecay, %5 : !cir.ptr<!cir.array<!s32i x 43>>), !cir.ptr<!s32i> loc(#loc1)
        %7 = cir.cast(bitcast, %6 : !cir.ptr<!s32i>), !cir.ptr<!void> loc(#loc1)
        cir.store %7, %0 : !cir.ptr<!void>, !cir.ptr<!cir.ptr<!void>> loc(#loc195)
      } loc(#loc194)
    } loc(#loc192)
    cir.scope {
      %2 = cir.const #cir.int<5> : !s32i loc(#loc22)
      %3 = cir.const #cir.int<5> : !s32i loc(#loc23)
      %4 = cir.cmp(eq, %2, %3) : !s32i, !cir.bool loc(#loc197)
      cir.if %4 {
        cir.scope {
          %5 = cir.alloca !u64i, !cir.ptr<!u64i>, ["dataLen", init] {alignment = 8 : i64} loc(#loc200)
          %6 = cir.alloca !cir.ptr<!void>, !cir.ptr<!cir.ptr<!void>>, ["dest", init] {alignment = 8 : i64} loc(#loc201)
          %7 = cir.get_global @strlen : !cir.ptr<!cir.func<(!cir.ptr<!s8i>) -> !u64i>> loc(#loc31)
          %8 = cir.load %0 : !cir.ptr<!cir.ptr<!void>>, !cir.ptr<!void> loc(#loc32)
          %9 = cir.cast(bitcast, %8 : !cir.ptr<!void>), !cir.ptr<!s8i> loc(#loc32)
          %10 = cir.call @strlen(%9) : (!cir.ptr<!s8i>) -> !u64i side_effect(pure) extra(#fn_attr) loc(#loc31)
          cir.store %10, %5 : !u64i, !cir.ptr<!u64i> loc(#loc200)
          %11 = cir.load %5 : !cir.ptr<!u64i>, !u64i loc(#loc30)
          %12 = cir.const #cir.int<1> : !s32i loc(#loc30)
          %13 = cir.cast(integral, %12 : !s32i), !u64i loc(#loc30)
          %14 = cir.binop(add, %11, %13) : !u64i loc(#loc30)
          %15 = cir.const #cir.int<4> : !u64i loc(#loc30)
          %16 = cir.binop(mul, %14, %15) : !u64i loc(#loc30)
          %17 = cir.alloca !u8i, !cir.ptr<!u8i>, %16 : !u64i, ["bi_alloca"] {alignment = 16 : i64} loc(#loc30)
          %18 = cir.cast(bitcast, %17 : !cir.ptr<!u8i>), !cir.ptr<!void> loc(#loc30)
          cir.store %18, %6 : !cir.ptr<!void>, !cir.ptr<!cir.ptr<!void>> loc(#loc201)
          %19 = cir.load %6 : !cir.ptr<!cir.ptr<!void>>, !cir.ptr<!void> loc(#loc33)
          %20 = cir.cast(bitcast, %19 : !cir.ptr<!void>), !cir.ptr<!s32i> loc(#loc33)
          %21 = cir.load %0 : !cir.ptr<!cir.ptr<!void>>, !cir.ptr<!void> loc(#loc34)
          %22 = cir.cast(bitcast, %21 : !cir.ptr<!void>), !cir.ptr<!s32i> loc(#loc34)
          %23 = cir.call @wcscpy(%20, %22) : (!cir.ptr<!s32i>, !cir.ptr<!s32i>) -> !cir.ptr<!s32i> extra(#fn_attr) loc(#loc35)
          %24 = cir.load %6 : !cir.ptr<!cir.ptr<!void>>, !cir.ptr<!void> loc(#loc36)
          %25 = cir.cast(bitcast, %24 : !cir.ptr<!void>), !cir.ptr<!s8i> loc(#loc36)
          cir.call @printLine(%25) : (!cir.ptr<!s8i>) -> () loc(#loc37)
        } loc(#loc199)
      } loc(#loc198)
    } loc(#loc196)
    cir.return loc(#loc9)
  } loc(#loc189)
  cir.func no_proto @CWE121_Stack_Based_Buffer_Overflow__CWE135_06_good() extra(#fn_attr1) {
    %0 = cir.get_global @goodB2G1 : !cir.ptr<!cir.func<()>> loc(#loc203)
    cir.call %0() : (!cir.ptr<!cir.func<()>>) -> () loc(#loc40)
    %1 = cir.get_global @goodB2G2 : !cir.ptr<!cir.func<()>> loc(#loc204)
    cir.call %1() : (!cir.ptr<!cir.func<()>>) -> () loc(#loc42)
    %2 = cir.get_global @goodG2B1 : !cir.ptr<!cir.func<()>> loc(#loc205)
    cir.call %2() : (!cir.ptr<!cir.func<()>>) -> () loc(#loc44)
    %3 = cir.get_global @goodG2B2 : !cir.ptr<!cir.func<()>> loc(#loc206)
    cir.call %3() : (!cir.ptr<!cir.func<()>>) -> () loc(#loc46)
    cir.return loc(#loc39)
  } loc(#loc202)
  cir.global "private" constant cir_private dsolocal @".str.1" = #cir.const_array<"Benign, fixed string\00" : !cir.array<!s8i x 21>> : !cir.array<!s8i x 21> {alignment = 1 : i64} loc(#loc48)
  cir.func private @wcslen(!cir.ptr<!s32i>) -> !u64i extra(#fn_attr) loc(#loc207)
  cir.func private @printWLine(!cir.ptr<!s32i>) loc(#loc208)
  cir.func no_proto internal private @goodB2G1() extra(#fn_attr1) {
    %0 = cir.alloca !cir.ptr<!void>, !cir.ptr<!cir.ptr<!void>>, ["data"] {alignment = 8 : i64} loc(#loc210)
    %1 = cir.const #cir.ptr<null> : !cir.ptr<!void> loc(#loc57)
    cir.store %1, %0 : !cir.ptr<!void>, !cir.ptr<!cir.ptr<!void>> loc(#loc211)
    cir.scope {
      %2 = cir.const #cir.int<5> : !s32i loc(#loc61)
      %3 = cir.const #cir.int<5> : !s32i loc(#loc62)
      %4 = cir.cmp(eq, %2, %3) : !s32i, !cir.bool loc(#loc213)
      cir.if %4 {
        %5 = cir.get_global @".str" : !cir.ptr<!cir.array<!s32i x 43>> loc(#loc64)
        %6 = cir.cast(array_to_ptrdecay, %5 : !cir.ptr<!cir.array<!s32i x 43>>), !cir.ptr<!s32i> loc(#loc64)
        %7 = cir.cast(bitcast, %6 : !cir.ptr<!s32i>), !cir.ptr<!void> loc(#loc64)
        cir.store %7, %0 : !cir.ptr<!void>, !cir.ptr<!cir.ptr<!void>> loc(#loc215)
      } loc(#loc214)
    } loc(#loc212)
    cir.scope {
      %2 = cir.const #cir.int<5> : !s32i loc(#loc68)
      %3 = cir.const #cir.int<5> : !s32i loc(#loc69)
      %4 = cir.cmp(ne, %2, %3) : !s32i, !cir.bool loc(#loc217)
      cir.if %4 {
        %5 = cir.get_global @".str.1" : !cir.ptr<!cir.array<!s8i x 21>> loc(#loc48)
        %6 = cir.cast(array_to_ptrdecay, %5 : !cir.ptr<!cir.array<!s8i x 21>>), !cir.ptr<!s8i> loc(#loc48)
        cir.call @printLine(%6) : (!cir.ptr<!s8i>) -> () loc(#loc73)
      } else {
        cir.scope {
          %5 = cir.alloca !u64i, !cir.ptr<!u64i>, ["dataLen", init] {alignment = 8 : i64} loc(#loc220)
          %6 = cir.alloca !cir.ptr<!void>, !cir.ptr<!cir.ptr<!void>>, ["dest", init] {alignment = 8 : i64} loc(#loc221)
          %7 = cir.get_global @wcslen : !cir.ptr<!cir.func<(!cir.ptr<!s32i>) -> !u64i>> loc(#loc80)
          %8 = cir.load %0 : !cir.ptr<!cir.ptr<!void>>, !cir.ptr<!void> loc(#loc81)
          %9 = cir.cast(bitcast, %8 : !cir.ptr<!void>), !cir.ptr<!s32i> loc(#loc81)
          %10 = cir.call @wcslen(%9) : (!cir.ptr<!s32i>) -> !u64i side_effect(pure) extra(#fn_attr) loc(#loc80)
          cir.store %10, %5 : !u64i, !cir.ptr<!u64i> loc(#loc220)
          %11 = cir.load %5 : !cir.ptr<!u64i>, !u64i loc(#loc79)
          %12 = cir.const #cir.int<1> : !s32i loc(#loc79)
          %13 = cir.cast(integral, %12 : !s32i), !u64i loc(#loc79)
          %14 = cir.binop(add, %11, %13) : !u64i loc(#loc79)
          %15 = cir.const #cir.int<4> : !u64i loc(#loc79)
          %16 = cir.binop(mul, %14, %15) : !u64i loc(#loc79)
          %17 = cir.alloca !u8i, !cir.ptr<!u8i>, %16 : !u64i, ["bi_alloca"] {alignment = 16 : i64} loc(#loc79)
          %18 = cir.cast(bitcast, %17 : !cir.ptr<!u8i>), !cir.ptr<!void> loc(#loc79)
          cir.store %18, %6 : !cir.ptr<!void>, !cir.ptr<!cir.ptr<!void>> loc(#loc221)
          %19 = cir.load %6 : !cir.ptr<!cir.ptr<!void>>, !cir.ptr<!void> loc(#loc82)
          %20 = cir.cast(bitcast, %19 : !cir.ptr<!void>), !cir.ptr<!s32i> loc(#loc82)
          %21 = cir.load %0 : !cir.ptr<!cir.ptr<!void>>, !cir.ptr<!void> loc(#loc83)
          %22 = cir.cast(bitcast, %21 : !cir.ptr<!void>), !cir.ptr<!s32i> loc(#loc83)
          %23 = cir.call @wcscpy(%20, %22) : (!cir.ptr<!s32i>, !cir.ptr<!s32i>) -> !cir.ptr<!s32i> extra(#fn_attr) loc(#loc84)
          %24 = cir.load %6 : !cir.ptr<!cir.ptr<!void>>, !cir.ptr<!void> loc(#loc85)
          %25 = cir.cast(bitcast, %24 : !cir.ptr<!void>), !cir.ptr<!s32i> loc(#loc85)
          cir.call @printWLine(%25) : (!cir.ptr<!s32i>) -> () loc(#loc86)
        } loc(#loc219)
      } loc(#loc218)
    } loc(#loc216)
    cir.return loc(#loc54)
  } loc(#loc209)
  cir.func no_proto internal private @goodB2G2() extra(#fn_attr1) {
    %0 = cir.alloca !cir.ptr<!void>, !cir.ptr<!cir.ptr<!void>>, ["data"] {alignment = 8 : i64} loc(#loc223)
    %1 = cir.const #cir.ptr<null> : !cir.ptr<!void> loc(#loc91)
    cir.store %1, %0 : !cir.ptr<!void>, !cir.ptr<!cir.ptr<!void>> loc(#loc224)
    cir.scope {
      %2 = cir.const #cir.int<5> : !s32i loc(#loc95)
      %3 = cir.const #cir.int<5> : !s32i loc(#loc96)
      %4 = cir.cmp(eq, %2, %3) : !s32i, !cir.bool loc(#loc226)
      cir.if %4 {
        %5 = cir.get_global @".str" : !cir.ptr<!cir.array<!s32i x 43>> loc(#loc98)
        %6 = cir.cast(array_to_ptrdecay, %5 : !cir.ptr<!cir.array<!s32i x 43>>), !cir.ptr<!s32i> loc(#loc98)
        %7 = cir.cast(bitcast, %6 : !cir.ptr<!s32i>), !cir.ptr<!void> loc(#loc98)
        cir.store %7, %0 : !cir.ptr<!void>, !cir.ptr<!cir.ptr<!void>> loc(#loc228)
      } loc(#loc227)
    } loc(#loc225)
    cir.scope {
      %2 = cir.const #cir.int<5> : !s32i loc(#loc102)
      %3 = cir.const #cir.int<5> : !s32i loc(#loc103)
      %4 = cir.cmp(eq, %2, %3) : !s32i, !cir.bool loc(#loc230)
      cir.if %4 {
        cir.scope {
          %5 = cir.alloca !u64i, !cir.ptr<!u64i>, ["dataLen", init] {alignment = 8 : i64} loc(#loc233)
          %6 = cir.alloca !cir.ptr<!void>, !cir.ptr<!cir.ptr<!void>>, ["dest", init] {alignment = 8 : i64} loc(#loc234)
          %7 = cir.get_global @wcslen : !cir.ptr<!cir.func<(!cir.ptr<!s32i>) -> !u64i>> loc(#loc111)
          %8 = cir.load %0 : !cir.ptr<!cir.ptr<!void>>, !cir.ptr<!void> loc(#loc112)
          %9 = cir.cast(bitcast, %8 : !cir.ptr<!void>), !cir.ptr<!s32i> loc(#loc112)
          %10 = cir.call @wcslen(%9) : (!cir.ptr<!s32i>) -> !u64i side_effect(pure) extra(#fn_attr) loc(#loc111)
          cir.store %10, %5 : !u64i, !cir.ptr<!u64i> loc(#loc233)
          %11 = cir.load %5 : !cir.ptr<!u64i>, !u64i loc(#loc110)
          %12 = cir.const #cir.int<1> : !s32i loc(#loc110)
          %13 = cir.cast(integral, %12 : !s32i), !u64i loc(#loc110)
          %14 = cir.binop(add, %11, %13) : !u64i loc(#loc110)
          %15 = cir.const #cir.int<4> : !u64i loc(#loc110)
          %16 = cir.binop(mul, %14, %15) : !u64i loc(#loc110)
          %17 = cir.alloca !u8i, !cir.ptr<!u8i>, %16 : !u64i, ["bi_alloca"] {alignment = 16 : i64} loc(#loc110)
          %18 = cir.cast(bitcast, %17 : !cir.ptr<!u8i>), !cir.ptr<!void> loc(#loc110)
          cir.store %18, %6 : !cir.ptr<!void>, !cir.ptr<!cir.ptr<!void>> loc(#loc234)
          %19 = cir.load %6 : !cir.ptr<!cir.ptr<!void>>, !cir.ptr<!void> loc(#loc113)
          %20 = cir.cast(bitcast, %19 : !cir.ptr<!void>), !cir.ptr<!s32i> loc(#loc113)
          %21 = cir.load %0 : !cir.ptr<!cir.ptr<!void>>, !cir.ptr<!void> loc(#loc114)
          %22 = cir.cast(bitcast, %21 : !cir.ptr<!void>), !cir.ptr<!s32i> loc(#loc114)
          %23 = cir.call @wcscpy(%20, %22) : (!cir.ptr<!s32i>, !cir.ptr<!s32i>) -> !cir.ptr<!s32i> extra(#fn_attr) loc(#loc115)
          %24 = cir.load %6 : !cir.ptr<!cir.ptr<!void>>, !cir.ptr<!void> loc(#loc116)
          %25 = cir.cast(bitcast, %24 : !cir.ptr<!void>), !cir.ptr<!s32i> loc(#loc116)
          cir.call @printWLine(%25) : (!cir.ptr<!s32i>) -> () loc(#loc117)
        } loc(#loc232)
      } loc(#loc231)
    } loc(#loc229)
    cir.return loc(#loc88)
  } loc(#loc222)
  cir.global "private" constant cir_private dsolocal @".str.2" = #cir.const_array<"AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA\00" : !cir.array<!s8i x 43>> : !cir.array<!s8i x 43> {alignment = 1 : i64} loc(#loc118)
  cir.func private @strcpy(!cir.ptr<!s8i>, !cir.ptr<!s8i>) -> !cir.ptr<!s8i> extra(#fn_attr) loc(#loc235)
  cir.func no_proto internal private @goodG2B1() extra(#fn_attr1) {
    %0 = cir.alloca !cir.ptr<!void>, !cir.ptr<!cir.ptr<!void>>, ["data"] {alignment = 8 : i64} loc(#loc237)
    %1 = cir.const #cir.ptr<null> : !cir.ptr<!void> loc(#loc125)
    cir.store %1, %0 : !cir.ptr<!void>, !cir.ptr<!cir.ptr<!void>> loc(#loc238)
    cir.scope {
      %2 = cir.const #cir.int<5> : !s32i loc(#loc129)
      %3 = cir.const #cir.int<5> : !s32i loc(#loc130)
      %4 = cir.cmp(ne, %2, %3) : !s32i, !cir.bool loc(#loc240)
      cir.if %4 {
        %5 = cir.get_global @".str.1" : !cir.ptr<!cir.array<!s8i x 21>> loc(#loc134)
        %6 = cir.cast(array_to_ptrdecay, %5 : !cir.ptr<!cir.array<!s8i x 21>>), !cir.ptr<!s8i> loc(#loc134)
        cir.call @printLine(%6) : (!cir.ptr<!s8i>) -> () loc(#loc135)
      } else {
        %5 = cir.get_global @".str.2" : !cir.ptr<!cir.array<!s8i x 43>> loc(#loc118)
        %6 = cir.cast(array_to_ptrdecay, %5 : !cir.ptr<!cir.array<!s8i x 43>>), !cir.ptr<!s8i> loc(#loc118)
        %7 = cir.cast(bitcast, %6 : !cir.ptr<!s8i>), !cir.ptr<!void> loc(#loc118)
        cir.store %7, %0 : !cir.ptr<!void>, !cir.ptr<!cir.ptr<!void>> loc(#loc242)
      } loc(#loc241)
    } loc(#loc239)
    cir.scope {
      %2 = cir.const #cir.int<5> : !s32i loc(#loc139)
      %3 = cir.const #cir.int<5> : !s32i loc(#loc140)
      %4 = cir.cmp(eq, %2, %3) : !s32i, !cir.bool loc(#loc244)
      cir.if %4 {
        cir.scope {
          %5 = cir.alloca !u64i, !cir.ptr<!u64i>, ["dataLen", init] {alignment = 8 : i64} loc(#loc247)
          %6 = cir.alloca !cir.ptr<!void>, !cir.ptr<!cir.ptr<!void>>, ["dest", init] {alignment = 8 : i64} loc(#loc248)
          %7 = cir.get_global @strlen : !cir.ptr<!cir.func<(!cir.ptr<!s8i>) -> !u64i>> loc(#loc148)
          %8 = cir.load %0 : !cir.ptr<!cir.ptr<!void>>, !cir.ptr<!void> loc(#loc149)
          %9 = cir.cast(bitcast, %8 : !cir.ptr<!void>), !cir.ptr<!s8i> loc(#loc149)
          %10 = cir.call @strlen(%9) : (!cir.ptr<!s8i>) -> !u64i side_effect(pure) extra(#fn_attr) loc(#loc148)
          cir.store %10, %5 : !u64i, !cir.ptr<!u64i> loc(#loc247)
          %11 = cir.load %5 : !cir.ptr<!u64i>, !u64i loc(#loc147)
          %12 = cir.const #cir.int<1> : !s32i loc(#loc147)
          %13 = cir.cast(integral, %12 : !s32i), !u64i loc(#loc147)
          %14 = cir.binop(add, %11, %13) : !u64i loc(#loc147)
          %15 = cir.const #cir.int<1> : !s32i loc(#loc147)
          %16 = cir.cast(integral, %15 : !s32i), !u64i loc(#loc147)
          %17 = cir.binop(mul, %14, %16) : !u64i loc(#loc147)
          %18 = cir.alloca !u8i, !cir.ptr<!u8i>, %17 : !u64i, ["bi_alloca"] {alignment = 16 : i64} loc(#loc147)
          %19 = cir.cast(bitcast, %18 : !cir.ptr<!u8i>), !cir.ptr<!void> loc(#loc147)
          cir.store %19, %6 : !cir.ptr<!void>, !cir.ptr<!cir.ptr<!void>> loc(#loc248)
          %20 = cir.get_global @strcpy : !cir.ptr<!cir.func<(!cir.ptr<!s8i>, !cir.ptr<!s8i>) -> !cir.ptr<!s8i>>> loc(#loc150)
          %21 = cir.load %6 : !cir.ptr<!cir.ptr<!void>>, !cir.ptr<!void> loc(#loc151)
          %22 = cir.cast(bitcast, %21 : !cir.ptr<!void>), !cir.ptr<!s8i> loc(#loc151)
          %23 = cir.load %0 : !cir.ptr<!cir.ptr<!void>>, !cir.ptr<!void> loc(#loc152)
          %24 = cir.cast(bitcast, %23 : !cir.ptr<!void>), !cir.ptr<!s8i> loc(#loc152)
          %25 = cir.call @strcpy(%22, %24) : (!cir.ptr<!s8i>, !cir.ptr<!s8i>) -> !cir.ptr<!s8i> extra(#fn_attr) loc(#loc150)
          %26 = cir.load %6 : !cir.ptr<!cir.ptr<!void>>, !cir.ptr<!void> loc(#loc153)
          %27 = cir.cast(bitcast, %26 : !cir.ptr<!void>), !cir.ptr<!s8i> loc(#loc153)
          cir.call @printLine(%27) : (!cir.ptr<!s8i>) -> () loc(#loc154)
        } loc(#loc246)
      } loc(#loc245)
    } loc(#loc243)
    cir.return loc(#loc122)
  } loc(#loc236)
  cir.func no_proto internal private @goodG2B2() extra(#fn_attr1) {
    %0 = cir.alloca !cir.ptr<!void>, !cir.ptr<!cir.ptr<!void>>, ["data"] {alignment = 8 : i64} loc(#loc250)
    %1 = cir.const #cir.ptr<null> : !cir.ptr<!void> loc(#loc159)
    cir.store %1, %0 : !cir.ptr<!void>, !cir.ptr<!cir.ptr<!void>> loc(#loc251)
    cir.scope {
      %2 = cir.const #cir.int<5> : !s32i loc(#loc163)
      %3 = cir.const #cir.int<5> : !s32i loc(#loc164)
      %4 = cir.cmp(eq, %2, %3) : !s32i, !cir.bool loc(#loc253)
      cir.if %4 {
        %5 = cir.get_global @".str.2" : !cir.ptr<!cir.array<!s8i x 43>> loc(#loc166)
        %6 = cir.cast(array_to_ptrdecay, %5 : !cir.ptr<!cir.array<!s8i x 43>>), !cir.ptr<!s8i> loc(#loc166)
        %7 = cir.cast(bitcast, %6 : !cir.ptr<!s8i>), !cir.ptr<!void> loc(#loc166)
        cir.store %7, %0 : !cir.ptr<!void>, !cir.ptr<!cir.ptr<!void>> loc(#loc255)
      } loc(#loc254)
    } loc(#loc252)
    cir.scope {
      %2 = cir.const #cir.int<5> : !s32i loc(#loc170)
      %3 = cir.const #cir.int<5> : !s32i loc(#loc171)
      %4 = cir.cmp(eq, %2, %3) : !s32i, !cir.bool loc(#loc257)
      cir.if %4 {
        cir.scope {
          %5 = cir.alloca !u64i, !cir.ptr<!u64i>, ["dataLen", init] {alignment = 8 : i64} loc(#loc260)
          %6 = cir.alloca !cir.ptr<!void>, !cir.ptr<!cir.ptr<!void>>, ["dest", init] {alignment = 8 : i64} loc(#loc261)
          %7 = cir.get_global @strlen : !cir.ptr<!cir.func<(!cir.ptr<!s8i>) -> !u64i>> loc(#loc179)
          %8 = cir.load %0 : !cir.ptr<!cir.ptr<!void>>, !cir.ptr<!void> loc(#loc180)
          %9 = cir.cast(bitcast, %8 : !cir.ptr<!void>), !cir.ptr<!s8i> loc(#loc180)
          %10 = cir.call @strlen(%9) : (!cir.ptr<!s8i>) -> !u64i side_effect(pure) extra(#fn_attr) loc(#loc179)
          cir.store %10, %5 : !u64i, !cir.ptr<!u64i> loc(#loc260)
          %11 = cir.load %5 : !cir.ptr<!u64i>, !u64i loc(#loc178)
          %12 = cir.const #cir.int<1> : !s32i loc(#loc178)
          %13 = cir.cast(integral, %12 : !s32i), !u64i loc(#loc178)
          %14 = cir.binop(add, %11, %13) : !u64i loc(#loc178)
          %15 = cir.const #cir.int<1> : !s32i loc(#loc178)
          %16 = cir.cast(integral, %15 : !s32i), !u64i loc(#loc178)
          %17 = cir.binop(mul, %14, %16) : !u64i loc(#loc178)
          %18 = cir.alloca !u8i, !cir.ptr<!u8i>, %17 : !u64i, ["bi_alloca"] {alignment = 16 : i64} loc(#loc178)
          %19 = cir.cast(bitcast, %18 : !cir.ptr<!u8i>), !cir.ptr<!void> loc(#loc178)
          cir.store %19, %6 : !cir.ptr<!void>, !cir.ptr<!cir.ptr<!void>> loc(#loc261)
          %20 = cir.get_global @strcpy : !cir.ptr<!cir.func<(!cir.ptr<!s8i>, !cir.ptr<!s8i>) -> !cir.ptr<!s8i>>> loc(#loc181)
          %21 = cir.load %6 : !cir.ptr<!cir.ptr<!void>>, !cir.ptr<!void> loc(#loc182)
          %22 = cir.cast(bitcast, %21 : !cir.ptr<!void>), !cir.ptr<!s8i> loc(#loc182)
          %23 = cir.load %0 : !cir.ptr<!cir.ptr<!void>>, !cir.ptr<!void> loc(#loc183)
          %24 = cir.cast(bitcast, %23 : !cir.ptr<!void>), !cir.ptr<!s8i> loc(#loc183)
          %25 = cir.call @strcpy(%22, %24) : (!cir.ptr<!s8i>, !cir.ptr<!s8i>) -> !cir.ptr<!s8i> extra(#fn_attr) loc(#loc181)
          %26 = cir.load %6 : !cir.ptr<!cir.ptr<!void>>, !cir.ptr<!void> loc(#loc184)
          %27 = cir.cast(bitcast, %26 : !cir.ptr<!void>), !cir.ptr<!s8i> loc(#loc184)
          cir.call @printLine(%27) : (!cir.ptr<!s8i>) -> () loc(#loc185)
        } loc(#loc259)
      } loc(#loc258)
    } loc(#loc256)
    cir.return loc(#loc156)
  } loc(#loc249)
} loc(#loc)
#loc = loc("/workspaces/juliet-c/testcases/CWE121_Stack_Based_Buffer_Overflow/s01/CWE121_Stack_Based_Buffer_Overflow__CWE135_06.c":0:0)
#loc1 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE135_06.c":39:24)
#loc2 = loc("/usr/include/string.h":407:1)
#loc3 = loc("/usr/include/string.h":408:33)
#loc4 = loc("/usr/include/wchar.h":98:1)
#loc5 = loc("/usr/include/wchar.h":100:14)
#loc6 = loc("../../../testcasesupport/std_testcase_io.h":14:1)
#loc7 = loc("../../../testcasesupport/std_testcase_io.h":14:33)
#loc8 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE135_06.c":32:1)
#loc9 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE135_06.c":51:1)
#loc10 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE135_06.c":34:5)
#loc11 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE135_06.c":34:12)
#loc12 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE135_06.c":35:12)
#loc13 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE135_06.c":35:5)
#loc14 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE135_06.c":36:5)
#loc15 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE135_06.c":40:5)
#loc16 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE135_06.c":36:8)
#loc17 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE135_06.c":36:27)
#loc18 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE135_06.c":37:5)
#loc19 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE135_06.c":39:9)
#loc20 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE135_06.c":41:5)
#loc21 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE135_06.c":50:5)
#loc22 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE135_06.c":41:8)
#loc23 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE135_06.c":41:27)
#loc24 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE135_06.c":42:5)
#loc25 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE135_06.c":43:9)
#loc26 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE135_06.c":49:9)
#loc27 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE135_06.c":45:13)
#loc28 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE135_06.c":45:49)
#loc29 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE135_06.c":46:13)
#loc30 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE135_06.c":46:35)
#loc31 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE135_06.c":45:30)
#loc32 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE135_06.c":45:45)
#loc33 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE135_06.c":47:26)
#loc34 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE135_06.c":47:32)
#loc35 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE135_06.c":47:19)
#loc36 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE135_06.c":48:31)
#loc37 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE135_06.c":48:13)
#loc38 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE135_06.c":155:1)
#loc39 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE135_06.c":161:1)
#loc40 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE135_06.c":157:5)
#loc41 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE135_06.c":157:14)
#loc42 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE135_06.c":158:5)
#loc43 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE135_06.c":158:14)
#loc44 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE135_06.c":159:5)
#loc45 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE135_06.c":159:14)
#loc46 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE135_06.c":160:5)
#loc47 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE135_06.c":160:14)
#loc48 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE135_06.c":70:19)
#loc49 = loc("/usr/include/wchar.h":247:1)
#loc50 = loc("/usr/include/wchar.h":247:51)
#loc51 = loc("../../../testcasesupport/std_testcase_io.h":16:1)
#loc52 = loc("../../../testcasesupport/std_testcase_io.h":16:37)
#loc53 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE135_06.c":58:1)
#loc54 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE135_06.c":82:1)
#loc55 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE135_06.c":60:5)
#loc56 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE135_06.c":60:12)
#loc57 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE135_06.c":61:12)
#loc58 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE135_06.c":61:5)
#loc59 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE135_06.c":62:5)
#loc60 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE135_06.c":66:5)
#loc61 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE135_06.c":62:8)
#loc62 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE135_06.c":62:27)
#loc63 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE135_06.c":63:5)
#loc64 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE135_06.c":65:24)
#loc65 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE135_06.c":65:9)
#loc66 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE135_06.c":67:5)
#loc67 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE135_06.c":81:5)
#loc68 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE135_06.c":67:8)
#loc69 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE135_06.c":67:27)
#loc70 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE135_06.c":68:5)
#loc71 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE135_06.c":71:5)
#loc72 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE135_06.c":73:5)
#loc73 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE135_06.c":70:9)
#loc74 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE135_06.c":74:9)
#loc75 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE135_06.c":80:9)
#loc76 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE135_06.c":76:13)
#loc77 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE135_06.c":76:52)
#loc78 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE135_06.c":77:13)
#loc79 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE135_06.c":77:35)
#loc80 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE135_06.c":76:30)
#loc81 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE135_06.c":76:48)
#loc82 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE135_06.c":78:26)
#loc83 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE135_06.c":78:32)
#loc84 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE135_06.c":78:19)
#loc85 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE135_06.c":79:35)
#loc86 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE135_06.c":79:13)
#loc87 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE135_06.c":85:1)
#loc88 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE135_06.c":104:1)
#loc89 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE135_06.c":87:5)
#loc90 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE135_06.c":87:12)
#loc91 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE135_06.c":88:12)
#loc92 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE135_06.c":88:5)
#loc93 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE135_06.c":89:5)
#loc94 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE135_06.c":93:5)
#loc95 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE135_06.c":89:8)
#loc96 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE135_06.c":89:27)
#loc97 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE135_06.c":90:5)
#loc98 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE135_06.c":92:24)
#loc99 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE135_06.c":92:9)
#loc100 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE135_06.c":94:5)
#loc101 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE135_06.c":103:5)
#loc102 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE135_06.c":94:8)
#loc103 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE135_06.c":94:27)
#loc104 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE135_06.c":95:5)
#loc105 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE135_06.c":96:9)
#loc106 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE135_06.c":102:9)
#loc107 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE135_06.c":98:13)
#loc108 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE135_06.c":98:52)
#loc109 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE135_06.c":99:13)
#loc110 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE135_06.c":99:35)
#loc111 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE135_06.c":98:30)
#loc112 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE135_06.c":98:48)
#loc113 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE135_06.c":100:26)
#loc114 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE135_06.c":100:32)
#loc115 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE135_06.c":100:19)
#loc116 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE135_06.c":101:35)
#loc117 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE135_06.c":101:13)
#loc118 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE135_06.c":119:24)
#loc119 = loc("/usr/include/string.h":141:1)
#loc120 = loc("/usr/include/string.h":142:14)
#loc121 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE135_06.c":107:1)
#loc122 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE135_06.c":131:1)
#loc123 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE135_06.c":109:5)
#loc124 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE135_06.c":109:12)
#loc125 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE135_06.c":110:12)
#loc126 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE135_06.c":110:5)
#loc127 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE135_06.c":111:5)
#loc128 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE135_06.c":120:5)
#loc129 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE135_06.c":111:8)
#loc130 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE135_06.c":111:27)
#loc131 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE135_06.c":112:5)
#loc132 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE135_06.c":115:5)
#loc133 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE135_06.c":117:5)
#loc134 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE135_06.c":114:19)
#loc135 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE135_06.c":114:9)
#loc136 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE135_06.c":119:9)
#loc137 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE135_06.c":121:5)
#loc138 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE135_06.c":130:5)
#loc139 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE135_06.c":121:8)
#loc140 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE135_06.c":121:27)
#loc141 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE135_06.c":122:5)
#loc142 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE135_06.c":123:9)
#loc143 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE135_06.c":129:9)
#loc144 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE135_06.c":125:13)
#loc145 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE135_06.c":125:49)
#loc146 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE135_06.c":126:13)
#loc147 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE135_06.c":126:35)
#loc148 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE135_06.c":125:30)
#loc149 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE135_06.c":125:45)
#loc150 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE135_06.c":127:19)
#loc151 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE135_06.c":127:26)
#loc152 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE135_06.c":127:32)
#loc153 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE135_06.c":128:31)
#loc154 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE135_06.c":128:13)
#loc155 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE135_06.c":134:1)
#loc156 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE135_06.c":153:1)
#loc157 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE135_06.c":136:5)
#loc158 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE135_06.c":136:12)
#loc159 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE135_06.c":137:12)
#loc160 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE135_06.c":137:5)
#loc161 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE135_06.c":138:5)
#loc162 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE135_06.c":142:5)
#loc163 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE135_06.c":138:8)
#loc164 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE135_06.c":138:27)
#loc165 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE135_06.c":139:5)
#loc166 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE135_06.c":141:24)
#loc167 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE135_06.c":141:9)
#loc168 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE135_06.c":143:5)
#loc169 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE135_06.c":152:5)
#loc170 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE135_06.c":143:8)
#loc171 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE135_06.c":143:27)
#loc172 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE135_06.c":144:5)
#loc173 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE135_06.c":145:9)
#loc174 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE135_06.c":151:9)
#loc175 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE135_06.c":147:13)
#loc176 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE135_06.c":147:49)
#loc177 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE135_06.c":148:13)
#loc178 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE135_06.c":148:35)
#loc179 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE135_06.c":147:30)
#loc180 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE135_06.c":147:45)
#loc181 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE135_06.c":149:19)
#loc182 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE135_06.c":149:26)
#loc183 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE135_06.c":149:32)
#loc184 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE135_06.c":150:31)
#loc185 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE135_06.c":150:13)
#loc186 = loc(fused[#loc2, #loc3])
#loc187 = loc(fused[#loc4, #loc5])
#loc188 = loc(fused[#loc6, #loc7])
#loc189 = loc(fused[#loc8, #loc9])
#loc190 = loc(fused[#loc10, #loc11])
#loc191 = loc(fused[#loc13, #loc12])
#loc192 = loc(fused[#loc14, #loc15])
#loc193 = loc(fused[#loc16, #loc17])
#loc194 = loc(fused[#loc18, #loc15])
#loc195 = loc(fused[#loc19, #loc1])
#loc196 = loc(fused[#loc20, #loc21])
#loc197 = loc(fused[#loc22, #loc23])
#loc198 = loc(fused[#loc24, #loc21])
#loc199 = loc(fused[#loc25, #loc26])
#loc200 = loc(fused[#loc27, #loc28])
#loc201 = loc(fused[#loc29, #loc30])
#loc202 = loc(fused[#loc38, #loc39])
#loc203 = loc(fused[#loc40, #loc41])
#loc204 = loc(fused[#loc42, #loc43])
#loc205 = loc(fused[#loc44, #loc45])
#loc206 = loc(fused[#loc46, #loc47])
#loc207 = loc(fused[#loc49, #loc50])
#loc208 = loc(fused[#loc51, #loc52])
#loc209 = loc(fused[#loc53, #loc54])
#loc210 = loc(fused[#loc55, #loc56])
#loc211 = loc(fused[#loc58, #loc57])
#loc212 = loc(fused[#loc59, #loc60])
#loc213 = loc(fused[#loc61, #loc62])
#loc214 = loc(fused[#loc63, #loc60])
#loc215 = loc(fused[#loc65, #loc64])
#loc216 = loc(fused[#loc66, #loc67])
#loc217 = loc(fused[#loc68, #loc69])
#loc218 = loc(fused[#loc70, #loc71, #loc72, #loc67])
#loc219 = loc(fused[#loc74, #loc75])
#loc220 = loc(fused[#loc76, #loc77])
#loc221 = loc(fused[#loc78, #loc79])
#loc222 = loc(fused[#loc87, #loc88])
#loc223 = loc(fused[#loc89, #loc90])
#loc224 = loc(fused[#loc92, #loc91])
#loc225 = loc(fused[#loc93, #loc94])
#loc226 = loc(fused[#loc95, #loc96])
#loc227 = loc(fused[#loc97, #loc94])
#loc228 = loc(fused[#loc99, #loc98])
#loc229 = loc(fused[#loc100, #loc101])
#loc230 = loc(fused[#loc102, #loc103])
#loc231 = loc(fused[#loc104, #loc101])
#loc232 = loc(fused[#loc105, #loc106])
#loc233 = loc(fused[#loc107, #loc108])
#loc234 = loc(fused[#loc109, #loc110])
#loc235 = loc(fused[#loc119, #loc120])
#loc236 = loc(fused[#loc121, #loc122])
#loc237 = loc(fused[#loc123, #loc124])
#loc238 = loc(fused[#loc126, #loc125])
#loc239 = loc(fused[#loc127, #loc128])
#loc240 = loc(fused[#loc129, #loc130])
#loc241 = loc(fused[#loc131, #loc132, #loc133, #loc128])
#loc242 = loc(fused[#loc136, #loc118])
#loc243 = loc(fused[#loc137, #loc138])
#loc244 = loc(fused[#loc139, #loc140])
#loc245 = loc(fused[#loc141, #loc138])
#loc246 = loc(fused[#loc142, #loc143])
#loc247 = loc(fused[#loc144, #loc145])
#loc248 = loc(fused[#loc146, #loc147])
#loc249 = loc(fused[#loc155, #loc156])
#loc250 = loc(fused[#loc157, #loc158])
#loc251 = loc(fused[#loc160, #loc159])
#loc252 = loc(fused[#loc161, #loc162])
#loc253 = loc(fused[#loc163, #loc164])
#loc254 = loc(fused[#loc165, #loc162])
#loc255 = loc(fused[#loc167, #loc166])
#loc256 = loc(fused[#loc168, #loc169])
#loc257 = loc(fused[#loc170, #loc171])
#loc258 = loc(fused[#loc172, #loc169])
#loc259 = loc(fused[#loc173, #loc174])
#loc260 = loc(fused[#loc175, #loc176])
#loc261 = loc(fused[#loc177, #loc178])
