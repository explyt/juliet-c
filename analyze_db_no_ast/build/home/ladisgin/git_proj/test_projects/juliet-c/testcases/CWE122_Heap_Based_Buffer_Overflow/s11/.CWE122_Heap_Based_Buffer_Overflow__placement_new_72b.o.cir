!s32i = !cir.int<s, 32>
!s8i = !cir.int<s, 8>
!u64i = !cir.int<u, 64>
!void = !cir.void
#fn_attr = #cir<extra({inline = #cir.inline<no>, nothrow = #cir.nothrow, optnone = #cir.optnone})>
#fn_attr1 = #cir<extra({nothrow = #cir.nothrow})>
#fn_attr2 = #cir<extra({inline = #cir.inline<no>, optnone = #cir.optnone})>
#loc3 = loc("/usr/lib/gcc/x86_64-redhat-linux/14/../../../../include/c++/14/bits/stl_vector.h":1128:7)
#loc4 = loc("/usr/lib/gcc/x86_64-redhat-linux/14/../../../../include/c++/14/bits/stl_vector.h":1128:18)
#loc5 = loc("/usr/lib/gcc/x86_64-redhat-linux/14/../../../../include/c++/14/bits/stl_vector.h":1128:28)
#loc15 = loc("../../../testcasesupport/std_testcase.h":61:7)
#loc22 = loc("CWE122_Heap_Based_Buffer_Overflow__placement_new_72b.cpp":28:14)
#loc23 = loc("CWE122_Heap_Based_Buffer_Overflow__placement_new_72b.cpp":28:29)
#loc48 = loc("CWE122_Heap_Based_Buffer_Overflow__placement_new_72b.cpp":53:18)
#loc49 = loc("CWE122_Heap_Based_Buffer_Overflow__placement_new_72b.cpp":53:33)
#loc70 = loc("../../../testcasesupport/std_testcase.h":68:7)
#loc73 = loc("CWE122_Heap_Based_Buffer_Overflow__placement_new_72b.cpp":73:18)
#loc74 = loc("CWE122_Heap_Based_Buffer_Overflow__placement_new_72b.cpp":73:33)
!ty_OneIntClass = !cir.struct<class "OneIntClass" {!s32i} #cir.record.decl.ast>
!ty_TwoIntsClass = !cir.struct<class "TwoIntsClass" {!s32i, !s32i} #cir.record.decl.ast>
#loc95 = loc(fused[#loc4, #loc5])
#loc100 = loc(fused[#loc22, #loc23])
#loc108 = loc(fused[#loc48, #loc49])
#loc116 = loc(fused[#loc73, #loc74])
!ty_std3A3A_Vector_base3Cchar_2A2C_std3A3Aallocator3Cchar_2A3E3E3A3A_Vector_impl_data = !cir.struct<struct "std::_Vector_base<char *, std::allocator<char *>>::_Vector_impl_data" {!cir.ptr<!cir.ptr<!s8i>>, !cir.ptr<!cir.ptr<!s8i>>, !cir.ptr<!cir.ptr<!s8i>>} #cir.record.decl.ast>
!ty_std3A3A_Vector_base3Cchar_2A2C_std3A3Aallocator3Cchar_2A3E3E3A3A_Vector_impl = !cir.struct<struct "std::_Vector_base<char *, std::allocator<char *>>::_Vector_impl" {!ty_std3A3A_Vector_base3Cchar_2A2C_std3A3Aallocator3Cchar_2A3E3E3A3A_Vector_impl_data} #cir.record.decl.ast>
!ty_std3A3A_Vector_base3Cchar_2A2C_std3A3Aallocator3Cchar_2A3E3E = !cir.struct<struct "std::_Vector_base<char *, std::allocator<char *>>" {!ty_std3A3A_Vector_base3Cchar_2A2C_std3A3Aallocator3Cchar_2A3E3E3A3A_Vector_impl} #cir.record.decl.ast>
!ty_std3A3Avector3Cchar_2A2C_std3A3Aallocator3Cchar_2A3E3E = !cir.struct<class "std::vector<char *, std::allocator<char *>>" {!ty_std3A3A_Vector_base3Cchar_2A2C_std3A3Aallocator3Cchar_2A3E3E}>
module @"/home/ladisgin/git_proj/test_projects/juliet-c/testcases/CWE122_Heap_Based_Buffer_Overflow/s11/CWE122_Heap_Based_Buffer_Overflow__placement_new_72b.cpp" attributes {cir.lang = #cir.lang<cxx>, cir.sob = #cir.signed_overflow_behavior<undefined>, cir.triple = "x86_64-unknown-linux-gnu", dlti.dl_spec = #dlti.dl_spec<#dlti.dl_entry<f128, dense<128> : vector<2xi64>>, #dlti.dl_entry<!llvm.ptr<270>, dense<32> : vector<4xi64>>, #dlti.dl_entry<f64, dense<64> : vector<2xi64>>, #dlti.dl_entry<f16, dense<16> : vector<2xi64>>, #dlti.dl_entry<!llvm.ptr<272>, dense<64> : vector<4xi64>>, #dlti.dl_entry<!llvm.ptr<271>, dense<32> : vector<4xi64>>, #dlti.dl_entry<i64, dense<64> : vector<2xi64>>, #dlti.dl_entry<i128, dense<128> : vector<2xi64>>, #dlti.dl_entry<f80, dense<128> : vector<2xi64>>, #dlti.dl_entry<i1, dense<8> : vector<2xi64>>, #dlti.dl_entry<!llvm.ptr, dense<64> : vector<4xi64>>, #dlti.dl_entry<i16, dense<16> : vector<2xi64>>, #dlti.dl_entry<i8, dense<8> : vector<2xi64>>, #dlti.dl_entry<i32, dense<32> : vector<2xi64>>, #dlti.dl_entry<"dlti.stack_alignment", 128 : i64>, #dlti.dl_entry<"dlti.endianness", "little">>, llvm.data_layout = "e-m:e-p270:32:32-p271:32:32-p272:64:64-i64:64-i128:128-f80:128-n8:16:32:64-S128"} {
  cir.func linkonce_odr  @_ZNSt6vectorIPcSaIS0_EEixEm(%arg0: !cir.ptr<!ty_std3A3Avector3Cchar_2A2C_std3A3Aallocator3Cchar_2A3E3E> loc("/usr/lib/gcc/x86_64-redhat-linux/14/../../../../include/c++/14/bits/stl_vector.h":1128:7), %arg1: !u64i loc(fused[#loc4, #loc5])) -> !cir.ptr<!cir.ptr<!s8i>> extra(#fn_attr) {
    %0 = cir.alloca !cir.ptr<!ty_std3A3Avector3Cchar_2A2C_std3A3Aallocator3Cchar_2A3E3E>, !cir.ptr<!cir.ptr<!ty_std3A3Avector3Cchar_2A2C_std3A3Aallocator3Cchar_2A3E3E>>, ["this", init] {alignment = 8 : i64} loc(#loc3)
    %1 = cir.alloca !u64i, !cir.ptr<!u64i>, ["__n", init] {alignment = 8 : i64} loc(#loc95)
    %2 = cir.alloca !cir.ptr<!cir.ptr<!s8i>>, !cir.ptr<!cir.ptr<!cir.ptr<!s8i>>>, ["__retval"] {alignment = 8 : i64} loc(#loc2)
    cir.store %arg0, %0 : !cir.ptr<!ty_std3A3Avector3Cchar_2A2C_std3A3Aallocator3Cchar_2A3E3E>, !cir.ptr<!cir.ptr<!ty_std3A3Avector3Cchar_2A2C_std3A3Aallocator3Cchar_2A3E3E>> loc(#loc6)
    cir.store %arg1, %1 : !u64i, !cir.ptr<!u64i> loc(#loc6)
    %3 = cir.load %0 : !cir.ptr<!cir.ptr<!ty_std3A3Avector3Cchar_2A2C_std3A3Aallocator3Cchar_2A3E3E>>, !cir.ptr<!ty_std3A3Avector3Cchar_2A2C_std3A3Aallocator3Cchar_2A3E3E> loc(#loc3)
    %4 = cir.base_class_addr(%3 : !cir.ptr<!ty_std3A3Avector3Cchar_2A2C_std3A3Aallocator3Cchar_2A3E3E> nonnull) [0] -> !cir.ptr<!ty_std3A3A_Vector_base3Cchar_2A2C_std3A3Aallocator3Cchar_2A3E3E> loc(#loc7)
    %5 = cir.get_member %4[0] {name = "_M_impl"} : !cir.ptr<!ty_std3A3A_Vector_base3Cchar_2A2C_std3A3Aallocator3Cchar_2A3E3E> -> !cir.ptr<!ty_std3A3A_Vector_base3Cchar_2A2C_std3A3Aallocator3Cchar_2A3E3E3A3A_Vector_impl> loc(#loc8)
    %6 = cir.base_class_addr(%5 : !cir.ptr<!ty_std3A3A_Vector_base3Cchar_2A2C_std3A3Aallocator3Cchar_2A3E3E3A3A_Vector_impl> nonnull) [0] -> !cir.ptr<!ty_std3A3A_Vector_base3Cchar_2A2C_std3A3Aallocator3Cchar_2A3E3E3A3A_Vector_impl_data> loc(#loc7)
    %7 = cir.get_member %6[0] {name = "_M_start"} : !cir.ptr<!ty_std3A3A_Vector_base3Cchar_2A2C_std3A3Aallocator3Cchar_2A3E3E3A3A_Vector_impl_data> -> !cir.ptr<!cir.ptr<!cir.ptr<!s8i>>> loc(#loc9)
    %8 = cir.load %7 : !cir.ptr<!cir.ptr<!cir.ptr<!s8i>>>, !cir.ptr<!cir.ptr<!s8i>> loc(#loc10)
    %9 = cir.load %1 : !cir.ptr<!u64i>, !u64i loc(#loc11)
    %10 = cir.ptr_stride(%8 : !cir.ptr<!cir.ptr<!s8i>>, %9 : !u64i), !cir.ptr<!cir.ptr<!s8i>> loc(#loc12)
    cir.store %10, %2 : !cir.ptr<!cir.ptr<!s8i>>, !cir.ptr<!cir.ptr<!cir.ptr<!s8i>>> loc(#loc96)
    %11 = cir.load %2 : !cir.ptr<!cir.ptr<!cir.ptr<!s8i>>>, !cir.ptr<!cir.ptr<!s8i>> loc(#loc96)
    cir.return %11 : !cir.ptr<!cir.ptr<!s8i>> loc(#loc96)
  } loc(#loc94)
  cir.func linkonce_odr  @_ZN12TwoIntsClassC2Ev(%arg0: !cir.ptr<!ty_TwoIntsClass> loc("../../../testcasesupport/std_testcase.h":61:7)) extra(#fn_attr) {
    %0 = cir.alloca !cir.ptr<!ty_TwoIntsClass>, !cir.ptr<!cir.ptr<!ty_TwoIntsClass>>, ["this", init] {alignment = 8 : i64} loc(#loc15)
    cir.store %arg0, %0 : !cir.ptr<!ty_TwoIntsClass>, !cir.ptr<!cir.ptr<!ty_TwoIntsClass>> loc(#loc15)
    %1 = cir.load %0 : !cir.ptr<!cir.ptr<!ty_TwoIntsClass>>, !cir.ptr<!ty_TwoIntsClass> loc(#loc15)
    cir.return loc(#loc15)
  } loc(#loc15)
  cir.func private  @printIntLine(!s32i) loc(#loc97)
  cir.func private  @free(!cir.ptr<!void>) extra(#fn_attr1) loc(#loc98)
  cir.func  @_ZN51CWE122_Heap_Based_Buffer_Overflow__placement_new_727badSinkESt6vectorIPcSaIS1_EE(%arg0: !ty_std3A3Avector3Cchar_2A2C_std3A3Aallocator3Cchar_2A3E3E loc(fused[#loc22, #loc23])) extra(#fn_attr2) {
    %0 = cir.alloca !ty_std3A3Avector3Cchar_2A2C_std3A3Aallocator3Cchar_2A3E3E, !cir.ptr<!ty_std3A3Avector3Cchar_2A2C_std3A3Aallocator3Cchar_2A3E3E>, ["dataVector", init] {alignment = 8 : i64} loc(#loc100)
    %1 = cir.alloca !cir.ptr<!s8i>, !cir.ptr<!cir.ptr<!s8i>>, ["data", init] {alignment = 8 : i64} loc(#loc101)
    cir.store %arg0, %0 : !ty_std3A3Avector3Cchar_2A2C_std3A3Aallocator3Cchar_2A3E3E, !cir.ptr<!ty_std3A3Avector3Cchar_2A2C_std3A3Aallocator3Cchar_2A3E3E> loc(#loc26)
    %2 = cir.const #cir.int<2> : !s32i loc(#loc27)
    %3 = cir.cast(integral, %2 : !s32i), !u64i loc(#loc27)
    %4 = cir.call @_ZNSt6vectorIPcSaIS0_EEixEm(%0, %3) : (!cir.ptr<!ty_std3A3Avector3Cchar_2A2C_std3A3Aallocator3Cchar_2A3E3E>, !u64i) -> !cir.ptr<!cir.ptr<!s8i>> extra(#fn_attr1) loc(#loc28)
    %5 = cir.load %4 : !cir.ptr<!cir.ptr<!s8i>>, !cir.ptr<!s8i> loc(#loc28)
    cir.store %5, %1 : !cir.ptr<!s8i>, !cir.ptr<!cir.ptr<!s8i>> loc(#loc101)
    cir.scope {
      %6 = cir.alloca !cir.ptr<!ty_TwoIntsClass>, !cir.ptr<!cir.ptr<!ty_TwoIntsClass>>, ["classTwo", init] {alignment = 8 : i64} loc(#loc103)
      %7 = cir.const #cir.int<8> : !u64i loc(#loc104)
      %8 = cir.load %1 : !cir.ptr<!cir.ptr<!s8i>>, !cir.ptr<!s8i> loc(#loc34)
      %9 = cir.cast(bitcast, %8 : !cir.ptr<!s8i>), !cir.ptr<!void> loc(#loc34)
      %10 = cir.cast(bitcast, %9 : !cir.ptr<!void>), !cir.ptr<!ty_TwoIntsClass> loc(#loc104)
      cir.call @_ZN12TwoIntsClassC2Ev(%10) : (!cir.ptr<!ty_TwoIntsClass>) -> () extra(#fn_attr1) loc(#loc32)
      cir.store %10, %6 : !cir.ptr<!ty_TwoIntsClass>, !cir.ptr<!cir.ptr<!ty_TwoIntsClass>> loc(#loc103)
      %11 = cir.const #cir.int<5> : !s32i loc(#loc35)
      %12 = cir.load %6 : !cir.ptr<!cir.ptr<!ty_TwoIntsClass>>, !cir.ptr<!ty_TwoIntsClass> loc(#loc36)
      %13 = cir.get_member %12[0] {name = "intOne"} : !cir.ptr<!ty_TwoIntsClass> -> !cir.ptr<!s32i> loc(#loc37)
      cir.store %11, %13 : !s32i, !cir.ptr<!s32i> loc(#loc105)
      %14 = cir.const #cir.int<10> : !s32i loc(#loc38)
      %15 = cir.load %6 : !cir.ptr<!cir.ptr<!ty_TwoIntsClass>>, !cir.ptr<!ty_TwoIntsClass> loc(#loc39)
      %16 = cir.get_member %15[1] {name = "intTwo"} : !cir.ptr<!ty_TwoIntsClass> -> !cir.ptr<!s32i> loc(#loc40)
      cir.store %14, %16 : !s32i, !cir.ptr<!s32i> loc(#loc106)
      %17 = cir.load %6 : !cir.ptr<!cir.ptr<!ty_TwoIntsClass>>, !cir.ptr<!ty_TwoIntsClass> loc(#loc41)
      %18 = cir.get_member %17[0] {name = "intOne"} : !cir.ptr<!ty_TwoIntsClass> -> !cir.ptr<!s32i> loc(#loc37)
      %19 = cir.load %18 : !cir.ptr<!s32i>, !s32i loc(#loc42)
      cir.call @printIntLine(%19) : (!s32i) -> () loc(#loc43)
      %20 = cir.get_global @free : !cir.ptr<!cir.func<!void (!cir.ptr<!void>)>> loc(#loc44)
      %21 = cir.load %1 : !cir.ptr<!cir.ptr<!s8i>>, !cir.ptr<!s8i> loc(#loc45)
      %22 = cir.cast(bitcast, %21 : !cir.ptr<!s8i>), !cir.ptr<!void> loc(#loc45)
      cir.call @free(%22) : (!cir.ptr<!void>) -> () extra(#fn_attr1) loc(#loc44)
    } loc(#loc102)
    cir.return loc(#loc21)
  } loc(#loc99)
  cir.func  @_ZN51CWE122_Heap_Based_Buffer_Overflow__placement_new_7211goodG2BSinkESt6vectorIPcSaIS1_EE(%arg0: !ty_std3A3Avector3Cchar_2A2C_std3A3Aallocator3Cchar_2A3E3E loc(fused[#loc48, #loc49])) extra(#fn_attr2) {
    %0 = cir.alloca !ty_std3A3Avector3Cchar_2A2C_std3A3Aallocator3Cchar_2A3E3E, !cir.ptr<!ty_std3A3Avector3Cchar_2A2C_std3A3Aallocator3Cchar_2A3E3E>, ["dataVector", init] {alignment = 8 : i64} loc(#loc108)
    %1 = cir.alloca !cir.ptr<!s8i>, !cir.ptr<!cir.ptr<!s8i>>, ["data", init] {alignment = 8 : i64} loc(#loc109)
    cir.store %arg0, %0 : !ty_std3A3Avector3Cchar_2A2C_std3A3Aallocator3Cchar_2A3E3E, !cir.ptr<!ty_std3A3Avector3Cchar_2A2C_std3A3Aallocator3Cchar_2A3E3E> loc(#loc52)
    %2 = cir.const #cir.int<2> : !s32i loc(#loc53)
    %3 = cir.cast(integral, %2 : !s32i), !u64i loc(#loc53)
    %4 = cir.call @_ZNSt6vectorIPcSaIS0_EEixEm(%0, %3) : (!cir.ptr<!ty_std3A3Avector3Cchar_2A2C_std3A3Aallocator3Cchar_2A3E3E>, !u64i) -> !cir.ptr<!cir.ptr<!s8i>> extra(#fn_attr1) loc(#loc54)
    %5 = cir.load %4 : !cir.ptr<!cir.ptr<!s8i>>, !cir.ptr<!s8i> loc(#loc54)
    cir.store %5, %1 : !cir.ptr<!s8i>, !cir.ptr<!cir.ptr<!s8i>> loc(#loc109)
    cir.scope {
      %6 = cir.alloca !cir.ptr<!ty_TwoIntsClass>, !cir.ptr<!cir.ptr<!ty_TwoIntsClass>>, ["classTwo", init] {alignment = 8 : i64} loc(#loc111)
      %7 = cir.const #cir.int<8> : !u64i loc(#loc112)
      %8 = cir.load %1 : !cir.ptr<!cir.ptr<!s8i>>, !cir.ptr<!s8i> loc(#loc60)
      %9 = cir.cast(bitcast, %8 : !cir.ptr<!s8i>), !cir.ptr<!void> loc(#loc60)
      %10 = cir.cast(bitcast, %9 : !cir.ptr<!void>), !cir.ptr<!ty_TwoIntsClass> loc(#loc112)
      cir.call @_ZN12TwoIntsClassC2Ev(%10) : (!cir.ptr<!ty_TwoIntsClass>) -> () extra(#fn_attr1) loc(#loc58)
      cir.store %10, %6 : !cir.ptr<!ty_TwoIntsClass>, !cir.ptr<!cir.ptr<!ty_TwoIntsClass>> loc(#loc111)
      %11 = cir.const #cir.int<5> : !s32i loc(#loc61)
      %12 = cir.load %6 : !cir.ptr<!cir.ptr<!ty_TwoIntsClass>>, !cir.ptr<!ty_TwoIntsClass> loc(#loc62)
      %13 = cir.get_member %12[0] {name = "intOne"} : !cir.ptr<!ty_TwoIntsClass> -> !cir.ptr<!s32i> loc(#loc37)
      cir.store %11, %13 : !s32i, !cir.ptr<!s32i> loc(#loc113)
      %14 = cir.const #cir.int<10> : !s32i loc(#loc63)
      %15 = cir.load %6 : !cir.ptr<!cir.ptr<!ty_TwoIntsClass>>, !cir.ptr<!ty_TwoIntsClass> loc(#loc64)
      %16 = cir.get_member %15[1] {name = "intTwo"} : !cir.ptr<!ty_TwoIntsClass> -> !cir.ptr<!s32i> loc(#loc40)
      cir.store %14, %16 : !s32i, !cir.ptr<!s32i> loc(#loc114)
      %17 = cir.load %6 : !cir.ptr<!cir.ptr<!ty_TwoIntsClass>>, !cir.ptr<!ty_TwoIntsClass> loc(#loc65)
      %18 = cir.get_member %17[0] {name = "intOne"} : !cir.ptr<!ty_TwoIntsClass> -> !cir.ptr<!s32i> loc(#loc37)
      %19 = cir.load %18 : !cir.ptr<!s32i>, !s32i loc(#loc66)
      cir.call @printIntLine(%19) : (!s32i) -> () loc(#loc67)
      %20 = cir.get_global @free : !cir.ptr<!cir.func<!void (!cir.ptr<!void>)>> loc(#loc68)
      %21 = cir.load %1 : !cir.ptr<!cir.ptr<!s8i>>, !cir.ptr<!s8i> loc(#loc69)
      %22 = cir.cast(bitcast, %21 : !cir.ptr<!s8i>), !cir.ptr<!void> loc(#loc69)
      cir.call @free(%22) : (!cir.ptr<!void>) -> () extra(#fn_attr1) loc(#loc68)
    } loc(#loc110)
    cir.return loc(#loc47)
  } loc(#loc107)
  cir.func linkonce_odr  @_ZN11OneIntClassC2Ev(%arg0: !cir.ptr<!ty_OneIntClass> loc("../../../testcasesupport/std_testcase.h":68:7)) extra(#fn_attr) {
    %0 = cir.alloca !cir.ptr<!ty_OneIntClass>, !cir.ptr<!cir.ptr<!ty_OneIntClass>>, ["this", init] {alignment = 8 : i64} loc(#loc70)
    cir.store %arg0, %0 : !cir.ptr<!ty_OneIntClass>, !cir.ptr<!cir.ptr<!ty_OneIntClass>> loc(#loc70)
    %1 = cir.load %0 : !cir.ptr<!cir.ptr<!ty_OneIntClass>>, !cir.ptr<!ty_OneIntClass> loc(#loc70)
    cir.return loc(#loc70)
  } loc(#loc70)
  cir.func  @_ZN51CWE122_Heap_Based_Buffer_Overflow__placement_new_7211goodB2GSinkESt6vectorIPcSaIS1_EE(%arg0: !ty_std3A3Avector3Cchar_2A2C_std3A3Aallocator3Cchar_2A3E3E loc(fused[#loc73, #loc74])) extra(#fn_attr2) {
    %0 = cir.alloca !ty_std3A3Avector3Cchar_2A2C_std3A3Aallocator3Cchar_2A3E3E, !cir.ptr<!ty_std3A3Avector3Cchar_2A2C_std3A3Aallocator3Cchar_2A3E3E>, ["dataVector", init] {alignment = 8 : i64} loc(#loc116)
    %1 = cir.alloca !cir.ptr<!s8i>, !cir.ptr<!cir.ptr<!s8i>>, ["data", init] {alignment = 8 : i64} loc(#loc117)
    cir.store %arg0, %0 : !ty_std3A3Avector3Cchar_2A2C_std3A3Aallocator3Cchar_2A3E3E, !cir.ptr<!ty_std3A3Avector3Cchar_2A2C_std3A3Aallocator3Cchar_2A3E3E> loc(#loc77)
    %2 = cir.const #cir.int<2> : !s32i loc(#loc78)
    %3 = cir.cast(integral, %2 : !s32i), !u64i loc(#loc78)
    %4 = cir.call @_ZNSt6vectorIPcSaIS0_EEixEm(%0, %3) : (!cir.ptr<!ty_std3A3Avector3Cchar_2A2C_std3A3Aallocator3Cchar_2A3E3E>, !u64i) -> !cir.ptr<!cir.ptr<!s8i>> extra(#fn_attr1) loc(#loc79)
    %5 = cir.load %4 : !cir.ptr<!cir.ptr<!s8i>>, !cir.ptr<!s8i> loc(#loc79)
    cir.store %5, %1 : !cir.ptr<!s8i>, !cir.ptr<!cir.ptr<!s8i>> loc(#loc117)
    cir.scope {
      %6 = cir.alloca !cir.ptr<!ty_OneIntClass>, !cir.ptr<!cir.ptr<!ty_OneIntClass>>, ["classOne", init] {alignment = 8 : i64} loc(#loc119)
      %7 = cir.const #cir.int<4> : !u64i loc(#loc120)
      %8 = cir.load %1 : !cir.ptr<!cir.ptr<!s8i>>, !cir.ptr<!s8i> loc(#loc85)
      %9 = cir.cast(bitcast, %8 : !cir.ptr<!s8i>), !cir.ptr<!void> loc(#loc85)
      %10 = cir.cast(bitcast, %9 : !cir.ptr<!void>), !cir.ptr<!ty_OneIntClass> loc(#loc120)
      cir.call @_ZN11OneIntClassC2Ev(%10) : (!cir.ptr<!ty_OneIntClass>) -> () extra(#fn_attr1) loc(#loc83)
      cir.store %10, %6 : !cir.ptr<!ty_OneIntClass>, !cir.ptr<!cir.ptr<!ty_OneIntClass>> loc(#loc119)
      %11 = cir.const #cir.int<5> : !s32i loc(#loc86)
      %12 = cir.load %6 : !cir.ptr<!cir.ptr<!ty_OneIntClass>>, !cir.ptr<!ty_OneIntClass> loc(#loc87)
      %13 = cir.get_member %12[0] {name = "intOne"} : !cir.ptr<!ty_OneIntClass> -> !cir.ptr<!s32i> loc(#loc88)
      cir.store %11, %13 : !s32i, !cir.ptr<!s32i> loc(#loc121)
      %14 = cir.load %6 : !cir.ptr<!cir.ptr<!ty_OneIntClass>>, !cir.ptr<!ty_OneIntClass> loc(#loc89)
      %15 = cir.get_member %14[0] {name = "intOne"} : !cir.ptr<!ty_OneIntClass> -> !cir.ptr<!s32i> loc(#loc88)
      %16 = cir.load %15 : !cir.ptr<!s32i>, !s32i loc(#loc90)
      cir.call @printIntLine(%16) : (!s32i) -> () loc(#loc91)
      %17 = cir.get_global @free : !cir.ptr<!cir.func<!void (!cir.ptr<!void>)>> loc(#loc92)
      %18 = cir.load %1 : !cir.ptr<!cir.ptr<!s8i>>, !cir.ptr<!s8i> loc(#loc93)
      %19 = cir.cast(bitcast, %18 : !cir.ptr<!s8i>), !cir.ptr<!void> loc(#loc93)
      cir.call @free(%19) : (!cir.ptr<!void>) -> () extra(#fn_attr1) loc(#loc92)
    } loc(#loc118)
    cir.return loc(#loc72)
  } loc(#loc115)
} loc(#loc)
#loc = loc("/home/ladisgin/git_proj/test_projects/juliet-c/testcases/CWE122_Heap_Based_Buffer_Overflow/s11/CWE122_Heap_Based_Buffer_Overflow__placement_new_72b.cpp":0:0)
#loc1 = loc("/usr/lib/gcc/x86_64-redhat-linux/14/../../../../include/c++/14/bits/stl_vector.h":1127:7)
#loc2 = loc("/usr/lib/gcc/x86_64-redhat-linux/14/../../../../include/c++/14/bits/stl_vector.h":1132:7)
#loc6 = loc("/usr/lib/gcc/x86_64-redhat-linux/14/../../../../include/c++/14/bits/stl_vector.h":1129:7)
#loc7 = loc("/usr/lib/gcc/x86_64-redhat-linux/14/../../../../include/c++/14/bits/stl_vector.h":1131:11)
#loc8 = loc("/usr/lib/gcc/x86_64-redhat-linux/14/../../../../include/c++/14/bits/stl_vector.h":373:20)
#loc9 = loc("/usr/lib/gcc/x86_64-redhat-linux/14/../../../../include/c++/14/bits/stl_vector.h":93:10)
#loc10 = loc("/usr/lib/gcc/x86_64-redhat-linux/14/../../../../include/c++/14/bits/stl_vector.h":1131:25)
#loc11 = loc("/usr/lib/gcc/x86_64-redhat-linux/14/../../../../include/c++/14/bits/stl_vector.h":1131:36)
#loc12 = loc("/usr/lib/gcc/x86_64-redhat-linux/14/../../../../include/c++/14/bits/stl_vector.h":1131:34)
#loc13 = loc("/usr/lib/gcc/x86_64-redhat-linux/14/../../../../include/c++/14/bits/stl_vector.h":1131:2)
#loc14 = loc("/usr/lib/gcc/x86_64-redhat-linux/14/../../../../include/c++/14/bits/stl_vector.h":1131:39)
#loc16 = loc("../../../testcasesupport/std_testcase_io.h":18:1)
#loc17 = loc("../../../testcasesupport/std_testcase_io.h":18:33)
#loc18 = loc("/usr/include/stdlib.h":687:1)
#loc19 = loc("/usr/include/stdlib.h":687:32)
#loc20 = loc("CWE122_Heap_Based_Buffer_Overflow__placement_new_72b.cpp":28:1)
#loc21 = loc("CWE122_Heap_Based_Buffer_Overflow__placement_new_72b.cpp":46:1)
#loc24 = loc("CWE122_Heap_Based_Buffer_Overflow__placement_new_72b.cpp":31:5)
#loc25 = loc("CWE122_Heap_Based_Buffer_Overflow__placement_new_72b.cpp":31:31)
#loc26 = loc("CWE122_Heap_Based_Buffer_Overflow__placement_new_72b.cpp":29:1)
#loc27 = loc("CWE122_Heap_Based_Buffer_Overflow__placement_new_72b.cpp":31:30)
#loc28 = loc("CWE122_Heap_Based_Buffer_Overflow__placement_new_72b.cpp":31:19)
#loc29 = loc("CWE122_Heap_Based_Buffer_Overflow__placement_new_72b.cpp":32:5)
#loc30 = loc("CWE122_Heap_Based_Buffer_Overflow__placement_new_72b.cpp":45:5)
#loc31 = loc("CWE122_Heap_Based_Buffer_Overflow__placement_new_72b.cpp":38:9)
#loc32 = loc("CWE122_Heap_Based_Buffer_Overflow__placement_new_72b.cpp":38:45)
#loc33 = loc("CWE122_Heap_Based_Buffer_Overflow__placement_new_72b.cpp":38:35)
#loc34 = loc("CWE122_Heap_Based_Buffer_Overflow__placement_new_72b.cpp":38:39)
#loc35 = loc("CWE122_Heap_Based_Buffer_Overflow__placement_new_72b.cpp":40:28)
#loc36 = loc("CWE122_Heap_Based_Buffer_Overflow__placement_new_72b.cpp":40:9)
#loc37 = loc("../../../testcasesupport/std_testcase.h":64:13)
#loc38 = loc("CWE122_Heap_Based_Buffer_Overflow__placement_new_72b.cpp":41:28)
#loc39 = loc("CWE122_Heap_Based_Buffer_Overflow__placement_new_72b.cpp":41:9)
#loc40 = loc("../../../testcasesupport/std_testcase.h":65:13)
#loc41 = loc("CWE122_Heap_Based_Buffer_Overflow__placement_new_72b.cpp":42:22)
#loc42 = loc("CWE122_Heap_Based_Buffer_Overflow__placement_new_72b.cpp":42:32)
#loc43 = loc("CWE122_Heap_Based_Buffer_Overflow__placement_new_72b.cpp":42:9)
#loc44 = loc("CWE122_Heap_Based_Buffer_Overflow__placement_new_72b.cpp":44:9)
#loc45 = loc("CWE122_Heap_Based_Buffer_Overflow__placement_new_72b.cpp":44:14)
#loc46 = loc("CWE122_Heap_Based_Buffer_Overflow__placement_new_72b.cpp":53:1)
#loc47 = loc("CWE122_Heap_Based_Buffer_Overflow__placement_new_72b.cpp":70:1)
#loc50 = loc("CWE122_Heap_Based_Buffer_Overflow__placement_new_72b.cpp":55:5)
#loc51 = loc("CWE122_Heap_Based_Buffer_Overflow__placement_new_72b.cpp":55:31)
#loc52 = loc("CWE122_Heap_Based_Buffer_Overflow__placement_new_72b.cpp":54:1)
#loc53 = loc("CWE122_Heap_Based_Buffer_Overflow__placement_new_72b.cpp":55:30)
#loc54 = loc("CWE122_Heap_Based_Buffer_Overflow__placement_new_72b.cpp":55:19)
#loc55 = loc("CWE122_Heap_Based_Buffer_Overflow__placement_new_72b.cpp":56:5)
#loc56 = loc("CWE122_Heap_Based_Buffer_Overflow__placement_new_72b.cpp":69:5)
#loc57 = loc("CWE122_Heap_Based_Buffer_Overflow__placement_new_72b.cpp":62:9)
#loc58 = loc("CWE122_Heap_Based_Buffer_Overflow__placement_new_72b.cpp":62:45)
#loc59 = loc("CWE122_Heap_Based_Buffer_Overflow__placement_new_72b.cpp":62:35)
#loc60 = loc("CWE122_Heap_Based_Buffer_Overflow__placement_new_72b.cpp":62:39)
#loc61 = loc("CWE122_Heap_Based_Buffer_Overflow__placement_new_72b.cpp":64:28)
#loc62 = loc("CWE122_Heap_Based_Buffer_Overflow__placement_new_72b.cpp":64:9)
#loc63 = loc("CWE122_Heap_Based_Buffer_Overflow__placement_new_72b.cpp":65:28)
#loc64 = loc("CWE122_Heap_Based_Buffer_Overflow__placement_new_72b.cpp":65:9)
#loc65 = loc("CWE122_Heap_Based_Buffer_Overflow__placement_new_72b.cpp":66:22)
#loc66 = loc("CWE122_Heap_Based_Buffer_Overflow__placement_new_72b.cpp":66:32)
#loc67 = loc("CWE122_Heap_Based_Buffer_Overflow__placement_new_72b.cpp":66:9)
#loc68 = loc("CWE122_Heap_Based_Buffer_Overflow__placement_new_72b.cpp":68:9)
#loc69 = loc("CWE122_Heap_Based_Buffer_Overflow__placement_new_72b.cpp":68:14)
#loc71 = loc("CWE122_Heap_Based_Buffer_Overflow__placement_new_72b.cpp":73:1)
#loc72 = loc("CWE122_Heap_Based_Buffer_Overflow__placement_new_72b.cpp":88:1)
#loc75 = loc("CWE122_Heap_Based_Buffer_Overflow__placement_new_72b.cpp":75:5)
#loc76 = loc("CWE122_Heap_Based_Buffer_Overflow__placement_new_72b.cpp":75:31)
#loc77 = loc("CWE122_Heap_Based_Buffer_Overflow__placement_new_72b.cpp":74:1)
#loc78 = loc("CWE122_Heap_Based_Buffer_Overflow__placement_new_72b.cpp":75:30)
#loc79 = loc("CWE122_Heap_Based_Buffer_Overflow__placement_new_72b.cpp":75:19)
#loc80 = loc("CWE122_Heap_Based_Buffer_Overflow__placement_new_72b.cpp":76:5)
#loc81 = loc("CWE122_Heap_Based_Buffer_Overflow__placement_new_72b.cpp":87:5)
#loc82 = loc("CWE122_Heap_Based_Buffer_Overflow__placement_new_72b.cpp":82:9)
#loc83 = loc("CWE122_Heap_Based_Buffer_Overflow__placement_new_72b.cpp":82:44)
#loc84 = loc("CWE122_Heap_Based_Buffer_Overflow__placement_new_72b.cpp":82:34)
#loc85 = loc("CWE122_Heap_Based_Buffer_Overflow__placement_new_72b.cpp":82:38)
#loc86 = loc("CWE122_Heap_Based_Buffer_Overflow__placement_new_72b.cpp":84:28)
#loc87 = loc("CWE122_Heap_Based_Buffer_Overflow__placement_new_72b.cpp":84:9)
#loc88 = loc("../../../testcasesupport/std_testcase.h":71:13)
#loc89 = loc("CWE122_Heap_Based_Buffer_Overflow__placement_new_72b.cpp":85:22)
#loc90 = loc("CWE122_Heap_Based_Buffer_Overflow__placement_new_72b.cpp":85:32)
#loc91 = loc("CWE122_Heap_Based_Buffer_Overflow__placement_new_72b.cpp":85:9)
#loc92 = loc("CWE122_Heap_Based_Buffer_Overflow__placement_new_72b.cpp":86:9)
#loc93 = loc("CWE122_Heap_Based_Buffer_Overflow__placement_new_72b.cpp":86:14)
#loc94 = loc(fused[#loc1, #loc2])
#loc96 = loc(fused[#loc13, #loc14])
#loc97 = loc(fused[#loc16, #loc17])
#loc98 = loc(fused[#loc18, #loc19])
#loc99 = loc(fused[#loc20, #loc21])
#loc101 = loc(fused[#loc24, #loc25])
#loc102 = loc(fused[#loc29, #loc30])
#loc103 = loc(fused[#loc31, #loc32])
#loc104 = loc(fused[#loc33, #loc32])
#loc105 = loc(fused[#loc36, #loc35])
#loc106 = loc(fused[#loc39, #loc38])
#loc107 = loc(fused[#loc46, #loc47])
#loc109 = loc(fused[#loc50, #loc51])
#loc110 = loc(fused[#loc55, #loc56])
#loc111 = loc(fused[#loc57, #loc58])
#loc112 = loc(fused[#loc59, #loc58])
#loc113 = loc(fused[#loc62, #loc61])
#loc114 = loc(fused[#loc64, #loc63])
#loc115 = loc(fused[#loc71, #loc72])
#loc117 = loc(fused[#loc75, #loc76])
#loc118 = loc(fused[#loc80, #loc81])
#loc119 = loc(fused[#loc82, #loc83])
#loc120 = loc(fused[#loc84, #loc83])
#loc121 = loc(fused[#loc87, #loc86])
