!s16i = !cir.int<s, 16>
!s32i = !cir.int<s, 32>
!s8i = !cir.int<s, 8>
#fn_attr = #cir<extra({inline = #cir.inline<no>, nothrow = #cir.nothrow, optnone = #cir.optnone})>
#loc5 = loc("CWE191_Integer_Underflow__short_min_multiply_63b.c":22:63)
#loc6 = loc("CWE191_Integer_Underflow__short_min_multiply_63b.c":22:71)
#loc23 = loc("CWE191_Integer_Underflow__short_min_multiply_63b.c":38:67)
#loc24 = loc("CWE191_Integer_Underflow__short_min_multiply_63b.c":38:75)
#loc44 = loc("CWE191_Integer_Underflow__short_min_multiply_63b.c":50:67)
#loc45 = loc("CWE191_Integer_Underflow__short_min_multiply_63b.c":50:75)
#loc72 = loc(fused[#loc5, #loc6])
#loc79 = loc(fused[#loc23, #loc24])
#loc87 = loc(fused[#loc44, #loc45])
module @"/home/ladisgin/git_proj/juliet-c/testcases/CWE191_Integer_Underflow/s03/CWE191_Integer_Underflow__short_min_multiply_63b.c" attributes {cir.lang = #cir.lang<c>, cir.sob = #cir.signed_overflow_behavior<undefined>, cir.triple = "x86_64-unknown-linux-gnu", dlti.dl_spec = #dlti.dl_spec<f64 = dense<64> : vector<2xi64>, f16 = dense<16> : vector<2xi64>, f128 = dense<128> : vector<2xi64>, !llvm.ptr<270> = dense<32> : vector<4xi64>, !llvm.ptr<271> = dense<32> : vector<4xi64>, !llvm.ptr<272> = dense<64> : vector<4xi64>, i64 = dense<64> : vector<2xi64>, i128 = dense<128> : vector<2xi64>, f80 = dense<128> : vector<2xi64>, !llvm.ptr = dense<64> : vector<4xi64>, i1 = dense<8> : vector<2xi64>, i8 = dense<8> : vector<2xi64>, i16 = dense<16> : vector<2xi64>, i32 = dense<32> : vector<2xi64>, "dlti.endianness" = "little", "dlti.stack_alignment" = 128 : i64>} {
  cir.func private @printIntLine(!s32i) loc(#loc70)
  cir.func @CWE191_Integer_Underflow__short_min_multiply_63b_badSink(%arg0: !cir.ptr<!s16i> loc(fused[#loc5, #loc6])) extra(#fn_attr) {
    %0 = cir.alloca !s16i, !cir.ptr<!s16i>, ["result", init] {alignment = 2 : i64} loc(#loc73)
    %1 = cir.alloca !cir.ptr<!s16i>, !cir.ptr<!cir.ptr<!s16i>>, ["dataPtr", init] {alignment = 8 : i64} loc(#loc72)
    %2 = cir.alloca !s16i, !cir.ptr<!s16i>, ["data", init] {alignment = 2 : i64} loc(#loc74)
    cir.store %arg0, %1 : !cir.ptr<!s16i>, !cir.ptr<!cir.ptr<!s16i>> loc(#loc11)
    %3 = cir.load deref %1 : !cir.ptr<!cir.ptr<!s16i>>, !cir.ptr<!s16i> loc(#loc10)
    %4 = cir.load %3 : !cir.ptr<!s16i>, !s16i loc(#loc12)
    cir.store %4, %2 : !s16i, !cir.ptr<!s16i> loc(#loc74)
    cir.br ^bb1 loc(#loc75)
  ^bb1:  // pred: ^bb0
    %5 = cir.load %2 : !cir.ptr<!s16i>, !s16i loc(#loc15)
    %6 = cir.cast(integral, %5 : !s16i), !s32i loc(#loc15)
    %7 = cir.const #cir.int<0> : !s32i loc(#loc16)
    %8 = cir.cmp(lt, %6, %7) : !s32i, !cir.bool loc(#loc76)
    cir.brcond %8 ^bb2, ^bb3 loc(#loc77)
  ^bb2:  // pred: ^bb1
    %9 = cir.load %2 : !cir.ptr<!s16i>, !s16i loc(#loc18)
    %10 = cir.cast(integral, %9 : !s16i), !s32i loc(#loc18)
    %11 = cir.const #cir.int<2> : !s32i loc(#loc8)
    %12 = cir.binop(mul, %10, %11) nsw : !s32i loc(#loc18)
    %13 = cir.cast(integral, %12 : !s32i), !s16i loc(#loc18)
    cir.store %13, %0 : !s16i, !cir.ptr<!s16i> loc(#loc73)
    %14 = cir.load %0 : !cir.ptr<!s16i>, !s16i loc(#loc19)
    %15 = cir.cast(integral, %14 : !s16i), !s32i loc(#loc19)
    cir.call @printIntLine(%15) : (!s32i) -> () loc(#loc20)
    cir.br ^bb3 loc(#loc14)
  ^bb3:  // 2 preds: ^bb1, ^bb2
    cir.br ^bb4 loc(#loc14)
  ^bb4:  // pred: ^bb3
    cir.return loc(#loc4)
  } loc(#loc71)
  cir.func @CWE191_Integer_Underflow__short_min_multiply_63b_goodG2BSink(%arg0: !cir.ptr<!s16i> loc(fused[#loc23, #loc24])) extra(#fn_attr) {
    %0 = cir.alloca !s16i, !cir.ptr<!s16i>, ["result", init] {alignment = 2 : i64} loc(#loc80)
    %1 = cir.alloca !cir.ptr<!s16i>, !cir.ptr<!cir.ptr<!s16i>>, ["dataPtr", init] {alignment = 8 : i64} loc(#loc79)
    %2 = cir.alloca !s16i, !cir.ptr<!s16i>, ["data", init] {alignment = 2 : i64} loc(#loc81)
    cir.store %arg0, %1 : !cir.ptr<!s16i>, !cir.ptr<!cir.ptr<!s16i>> loc(#loc29)
    %3 = cir.load deref %1 : !cir.ptr<!cir.ptr<!s16i>>, !cir.ptr<!s16i> loc(#loc28)
    %4 = cir.load %3 : !cir.ptr<!s16i>, !s16i loc(#loc30)
    cir.store %4, %2 : !s16i, !cir.ptr<!s16i> loc(#loc81)
    cir.br ^bb1 loc(#loc82)
  ^bb1:  // pred: ^bb0
    %5 = cir.load %2 : !cir.ptr<!s16i>, !s16i loc(#loc33)
    %6 = cir.cast(integral, %5 : !s16i), !s32i loc(#loc33)
    %7 = cir.const #cir.int<0> : !s32i loc(#loc34)
    %8 = cir.cmp(lt, %6, %7) : !s32i, !cir.bool loc(#loc83)
    cir.brcond %8 ^bb2, ^bb3 loc(#loc84)
  ^bb2:  // pred: ^bb1
    %9 = cir.load %2 : !cir.ptr<!s16i>, !s16i loc(#loc36)
    %10 = cir.cast(integral, %9 : !s16i), !s32i loc(#loc36)
    %11 = cir.const #cir.int<2> : !s32i loc(#loc26)
    %12 = cir.binop(mul, %10, %11) nsw : !s32i loc(#loc36)
    %13 = cir.cast(integral, %12 : !s32i), !s16i loc(#loc36)
    cir.store %13, %0 : !s16i, !cir.ptr<!s16i> loc(#loc80)
    %14 = cir.load %0 : !cir.ptr<!s16i>, !s16i loc(#loc37)
    %15 = cir.cast(integral, %14 : !s16i), !s32i loc(#loc37)
    cir.call @printIntLine(%15) : (!s32i) -> () loc(#loc38)
    cir.br ^bb3 loc(#loc32)
  ^bb3:  // 2 preds: ^bb1, ^bb2
    cir.br ^bb4 loc(#loc32)
  ^bb4:  // pred: ^bb3
    cir.return loc(#loc22)
  } loc(#loc78)
  cir.func private @printLine(!cir.ptr<!s8i>) loc(#loc85)
  cir.global "private" constant cir_private dsolocal @".str" = #cir.const_array<"data value is too small to perform multiplication.\00" : !cir.array<!s8i x 51>> : !cir.array<!s8i x 51> {alignment = 1 : i64} loc(#loc41)
  cir.func @CWE191_Integer_Underflow__short_min_multiply_63b_goodB2GSink(%arg0: !cir.ptr<!s16i> loc(fused[#loc44, #loc45])) extra(#fn_attr) {
    %0 = cir.alloca !s16i, !cir.ptr<!s16i>, ["result", init] {alignment = 2 : i64} loc(#loc88)
    %1 = cir.alloca !cir.ptr<!s16i>, !cir.ptr<!cir.ptr<!s16i>>, ["dataPtr", init] {alignment = 8 : i64} loc(#loc87)
    %2 = cir.alloca !s16i, !cir.ptr<!s16i>, ["data", init] {alignment = 2 : i64} loc(#loc89)
    cir.store %arg0, %1 : !cir.ptr<!s16i>, !cir.ptr<!cir.ptr<!s16i>> loc(#loc50)
    %3 = cir.load deref %1 : !cir.ptr<!cir.ptr<!s16i>>, !cir.ptr<!s16i> loc(#loc49)
    %4 = cir.load %3 : !cir.ptr<!s16i>, !s16i loc(#loc51)
    cir.store %4, %2 : !s16i, !cir.ptr<!s16i> loc(#loc89)
    cir.br ^bb1 loc(#loc90)
  ^bb1:  // pred: ^bb0
    %5 = cir.load %2 : !cir.ptr<!s16i>, !s16i loc(#loc54)
    %6 = cir.cast(integral, %5 : !s16i), !s32i loc(#loc54)
    %7 = cir.const #cir.int<0> : !s32i loc(#loc55)
    %8 = cir.cmp(lt, %6, %7) : !s32i, !cir.bool loc(#loc91)
    cir.brcond %8 ^bb2, ^bb8 loc(#loc92)
  ^bb2:  // pred: ^bb1
    cir.br ^bb3 loc(#loc93)
  ^bb3:  // pred: ^bb2
    %9 = cir.load %2 : !cir.ptr<!s16i>, !s16i loc(#loc59)
    %10 = cir.cast(integral, %9 : !s16i), !s32i loc(#loc59)
    %11 = cir.const #cir.int<32767> : !s32i loc(#loc60)
    %12 = cir.unary(minus, %11) : !s32i, !s32i loc(#loc60)
    %13 = cir.const #cir.int<1> : !s32i loc(#loc60)
    %14 = cir.binop(sub, %12, %13) nsw : !s32i loc(#loc60)
    %15 = cir.const #cir.int<2> : !s32i loc(#loc61)
    %16 = cir.binop(div, %14, %15) : !s32i loc(#loc94)
    %17 = cir.cmp(gt, %10, %16) : !s32i, !cir.bool loc(#loc95)
    cir.brcond %17 ^bb4, ^bb5 loc(#loc96)
  ^bb4:  // pred: ^bb3
    %18 = cir.load %2 : !cir.ptr<!s16i>, !s16i loc(#loc66)
    %19 = cir.cast(integral, %18 : !s16i), !s32i loc(#loc66)
    %20 = cir.const #cir.int<2> : !s32i loc(#loc47)
    %21 = cir.binop(mul, %19, %20) nsw : !s32i loc(#loc66)
    %22 = cir.cast(integral, %21 : !s32i), !s16i loc(#loc66)
    cir.store %22, %0 : !s16i, !cir.ptr<!s16i> loc(#loc88)
    %23 = cir.load %0 : !cir.ptr<!s16i>, !s16i loc(#loc67)
    %24 = cir.cast(integral, %23 : !s16i), !s32i loc(#loc67)
    cir.call @printIntLine(%24) : (!s32i) -> () loc(#loc68)
    cir.br ^bb6 loc(#loc64)
  ^bb5:  // pred: ^bb3
    %25 = cir.get_global @".str" : !cir.ptr<!cir.array<!s8i x 51>> loc(#loc41)
    %26 = cir.cast(array_to_ptrdecay, %25 : !cir.ptr<!cir.array<!s8i x 51>>), !cir.ptr<!s8i> loc(#loc41)
    cir.call @printLine(%26) : (!cir.ptr<!s8i>) -> () loc(#loc69)
    cir.br ^bb6 loc(#loc58)
  ^bb6:  // 2 preds: ^bb4, ^bb5
    cir.br ^bb7 loc(#loc58)
  ^bb7:  // pred: ^bb6
    cir.br ^bb8 loc(#loc53)
  ^bb8:  // 2 preds: ^bb1, ^bb7
    cir.br ^bb9 loc(#loc53)
  ^bb9:  // pred: ^bb8
    cir.return loc(#loc43)
  } loc(#loc86)
} loc(#loc)
#loc = loc("/home/ladisgin/git_proj/juliet-c/testcases/CWE191_Integer_Underflow/s03/CWE191_Integer_Underflow__short_min_multiply_63b.c":0:0)
#loc1 = loc("../../../testcasesupport/std_testcase_io.h":18:1)
#loc2 = loc("../../../testcasesupport/std_testcase_io.h":18:33)
#loc3 = loc("CWE191_Integer_Underflow__short_min_multiply_63b.c":22:1)
#loc4 = loc("CWE191_Integer_Underflow__short_min_multiply_63b.c":31:1)
#loc7 = loc("CWE191_Integer_Underflow__short_min_multiply_63b.c":28:9)
#loc8 = loc("CWE191_Integer_Underflow__short_min_multiply_63b.c":28:31)
#loc9 = loc("CWE191_Integer_Underflow__short_min_multiply_63b.c":24:5)
#loc10 = loc("CWE191_Integer_Underflow__short_min_multiply_63b.c":24:19)
#loc11 = loc("CWE191_Integer_Underflow__short_min_multiply_63b.c":23:1)
#loc12 = loc("CWE191_Integer_Underflow__short_min_multiply_63b.c":24:18)
#loc13 = loc("CWE191_Integer_Underflow__short_min_multiply_63b.c":25:5)
#loc14 = loc("CWE191_Integer_Underflow__short_min_multiply_63b.c":30:5)
#loc15 = loc("CWE191_Integer_Underflow__short_min_multiply_63b.c":25:8)
#loc16 = loc("CWE191_Integer_Underflow__short_min_multiply_63b.c":25:15)
#loc17 = loc("CWE191_Integer_Underflow__short_min_multiply_63b.c":26:5)
#loc18 = loc("CWE191_Integer_Underflow__short_min_multiply_63b.c":28:24)
#loc19 = loc("CWE191_Integer_Underflow__short_min_multiply_63b.c":29:22)
#loc20 = loc("CWE191_Integer_Underflow__short_min_multiply_63b.c":29:9)
#loc21 = loc("CWE191_Integer_Underflow__short_min_multiply_63b.c":38:1)
#loc22 = loc("CWE191_Integer_Underflow__short_min_multiply_63b.c":47:1)
#loc25 = loc("CWE191_Integer_Underflow__short_min_multiply_63b.c":44:9)
#loc26 = loc("CWE191_Integer_Underflow__short_min_multiply_63b.c":44:31)
#loc27 = loc("CWE191_Integer_Underflow__short_min_multiply_63b.c":40:5)
#loc28 = loc("CWE191_Integer_Underflow__short_min_multiply_63b.c":40:19)
#loc29 = loc("CWE191_Integer_Underflow__short_min_multiply_63b.c":39:1)
#loc30 = loc("CWE191_Integer_Underflow__short_min_multiply_63b.c":40:18)
#loc31 = loc("CWE191_Integer_Underflow__short_min_multiply_63b.c":41:5)
#loc32 = loc("CWE191_Integer_Underflow__short_min_multiply_63b.c":46:5)
#loc33 = loc("CWE191_Integer_Underflow__short_min_multiply_63b.c":41:8)
#loc34 = loc("CWE191_Integer_Underflow__short_min_multiply_63b.c":41:15)
#loc35 = loc("CWE191_Integer_Underflow__short_min_multiply_63b.c":42:5)
#loc36 = loc("CWE191_Integer_Underflow__short_min_multiply_63b.c":44:24)
#loc37 = loc("CWE191_Integer_Underflow__short_min_multiply_63b.c":45:22)
#loc38 = loc("CWE191_Integer_Underflow__short_min_multiply_63b.c":45:9)
#loc39 = loc("../../../testcasesupport/std_testcase_io.h":14:1)
#loc40 = loc("../../../testcasesupport/std_testcase_io.h":14:33)
#loc41 = loc("CWE191_Integer_Underflow__short_min_multiply_63b.c":63:23)
#loc42 = loc("CWE191_Integer_Underflow__short_min_multiply_63b.c":50:1)
#loc43 = loc("CWE191_Integer_Underflow__short_min_multiply_63b.c":66:1)
#loc46 = loc("CWE191_Integer_Underflow__short_min_multiply_63b.c":58:13)
#loc47 = loc("CWE191_Integer_Underflow__short_min_multiply_63b.c":58:35)
#loc48 = loc("CWE191_Integer_Underflow__short_min_multiply_63b.c":52:5)
#loc49 = loc("CWE191_Integer_Underflow__short_min_multiply_63b.c":52:19)
#loc50 = loc("CWE191_Integer_Underflow__short_min_multiply_63b.c":51:1)
#loc51 = loc("CWE191_Integer_Underflow__short_min_multiply_63b.c":52:18)
#loc52 = loc("CWE191_Integer_Underflow__short_min_multiply_63b.c":53:5)
#loc53 = loc("CWE191_Integer_Underflow__short_min_multiply_63b.c":65:5)
#loc54 = loc("CWE191_Integer_Underflow__short_min_multiply_63b.c":53:8)
#loc55 = loc("CWE191_Integer_Underflow__short_min_multiply_63b.c":53:15)
#loc56 = loc("CWE191_Integer_Underflow__short_min_multiply_63b.c":54:5)
#loc57 = loc("CWE191_Integer_Underflow__short_min_multiply_63b.c":56:9)
#loc58 = loc("CWE191_Integer_Underflow__short_min_multiply_63b.c":64:9)
#loc59 = loc("CWE191_Integer_Underflow__short_min_multiply_63b.c":56:13)
#loc60 = loc("CWE191_Integer_Underflow__short_min_multiply_63b.c":56:21)
#loc61 = loc("CWE191_Integer_Underflow__short_min_multiply_63b.c":56:30)
#loc62 = loc("CWE191_Integer_Underflow__short_min_multiply_63b.c":56:31)
#loc63 = loc("CWE191_Integer_Underflow__short_min_multiply_63b.c":57:9)
#loc64 = loc("CWE191_Integer_Underflow__short_min_multiply_63b.c":60:9)
#loc65 = loc("CWE191_Integer_Underflow__short_min_multiply_63b.c":62:9)
#loc66 = loc("CWE191_Integer_Underflow__short_min_multiply_63b.c":58:28)
#loc67 = loc("CWE191_Integer_Underflow__short_min_multiply_63b.c":59:26)
#loc68 = loc("CWE191_Integer_Underflow__short_min_multiply_63b.c":59:13)
#loc69 = loc("CWE191_Integer_Underflow__short_min_multiply_63b.c":63:13)
#loc70 = loc(fused[#loc1, #loc2])
#loc71 = loc(fused[#loc3, #loc4])
#loc73 = loc(fused[#loc7, #loc8])
#loc74 = loc(fused[#loc9, #loc10])
#loc75 = loc(fused[#loc13, #loc14])
#loc76 = loc(fused[#loc15, #loc16])
#loc77 = loc(fused[#loc17, #loc14])
#loc78 = loc(fused[#loc21, #loc22])
#loc80 = loc(fused[#loc25, #loc26])
#loc81 = loc(fused[#loc27, #loc28])
#loc82 = loc(fused[#loc31, #loc32])
#loc83 = loc(fused[#loc33, #loc34])
#loc84 = loc(fused[#loc35, #loc32])
#loc85 = loc(fused[#loc39, #loc40])
#loc86 = loc(fused[#loc42, #loc43])
#loc88 = loc(fused[#loc46, #loc47])
#loc89 = loc(fused[#loc48, #loc49])
#loc90 = loc(fused[#loc52, #loc53])
#loc91 = loc(fused[#loc54, #loc55])
#loc92 = loc(fused[#loc56, #loc53])
#loc93 = loc(fused[#loc57, #loc58])
#loc94 = loc(fused[#loc60, #loc61])
#loc95 = loc(fused[#loc59, #loc62])
#loc96 = loc(fused[#loc63, #loc64, #loc65, #loc58])
