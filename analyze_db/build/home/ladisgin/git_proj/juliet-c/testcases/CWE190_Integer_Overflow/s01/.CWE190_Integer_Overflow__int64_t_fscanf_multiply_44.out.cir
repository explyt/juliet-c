!s32i = !cir.int<s, 32>
!s64i = !cir.int<s, 64>
!s8i = !cir.int<s, 8>
!ty__IO_codecvt = !cir.struct<struct "_IO_codecvt" incomplete>
!ty__IO_marker = !cir.struct<struct "_IO_marker" incomplete>
!ty__IO_wide_data = !cir.struct<struct "_IO_wide_data" incomplete>
!u16i = !cir.int<u, 16>
!u32i = !cir.int<u, 32>
!void = !cir.void
#fn_attr = #cir<extra({inline = #cir.inline<no>, nothrow = #cir.nothrow, optnone = #cir.optnone})>
#fn_attr1 = #cir<extra({nothrow = #cir.nothrow})>
#loc5 = loc("CWE190_Integer_Overflow__int64_t_fscanf_multiply_44.c":23:21)
#loc6 = loc("CWE190_Integer_Overflow__int64_t_fscanf_multiply_44.c":23:29)
#loc54 = loc("CWE190_Integer_Overflow__int64_t_fscanf_multiply_44.c":112:10)
#loc55 = loc("CWE190_Integer_Overflow__int64_t_fscanf_multiply_44.c":112:14)
#loc56 = loc("CWE190_Integer_Overflow__int64_t_fscanf_multiply_44.c":112:20)
#loc57 = loc("CWE190_Integer_Overflow__int64_t_fscanf_multiply_44.c":112:32)
#loc74 = loc("CWE190_Integer_Overflow__int64_t_fscanf_multiply_44.c":50:25)
#loc75 = loc("CWE190_Integer_Overflow__int64_t_fscanf_multiply_44.c":50:33)
#loc102 = loc("CWE190_Integer_Overflow__int64_t_fscanf_multiply_44.c":71:25)
#loc103 = loc("CWE190_Integer_Overflow__int64_t_fscanf_multiply_44.c":71:33)
#loc141 = loc(fused[#loc5, #loc6])
#loc160 = loc(fused[#loc54, #loc55])
#loc161 = loc(fused[#loc56, #loc57])
#loc166 = loc(fused[#loc74, #loc75])
#loc177 = loc(fused[#loc102, #loc103])
!ty__IO_FILE = !cir.struct<struct "_IO_FILE" {!s32i, !cir.ptr<!s8i>, !cir.ptr<!s8i>, !cir.ptr<!s8i>, !cir.ptr<!s8i>, !cir.ptr<!s8i>, !cir.ptr<!s8i>, !cir.ptr<!s8i>, !cir.ptr<!s8i>, !cir.ptr<!s8i>, !cir.ptr<!s8i>, !cir.ptr<!s8i>, !cir.ptr<!ty__IO_marker>, !cir.ptr<!cir.struct<struct "_IO_FILE">>, !s32i, !s32i, !s64i, !u16i, !s8i, !cir.array<!s8i x 1>, !cir.ptr<!void>, !s64i, !cir.ptr<!ty__IO_codecvt>, !cir.ptr<!ty__IO_wide_data>, !cir.ptr<!cir.struct<struct "_IO_FILE">>, !cir.ptr<!void>, !cir.ptr<!cir.ptr<!cir.struct<struct "_IO_FILE">>>, !s32i, !cir.array<!s8i x 20>} #cir.record.decl.ast>
module @"/home/ladisgin/git_proj/juliet-c/testcases/CWE190_Integer_Overflow/s01/CWE190_Integer_Overflow__int64_t_fscanf_multiply_44.c" attributes {cir.lang = #cir.lang<c>, cir.sob = #cir.signed_overflow_behavior<undefined>, cir.triple = "x86_64-unknown-linux-gnu", dlti.dl_spec = #dlti.dl_spec<!llvm.ptr<272> = dense<64> : vector<4xi64>, !llvm.ptr<271> = dense<32> : vector<4xi64>, i64 = dense<64> : vector<2xi64>, i128 = dense<128> : vector<2xi64>, f80 = dense<128> : vector<2xi64>, i1 = dense<8> : vector<2xi64>, !llvm.ptr = dense<64> : vector<4xi64>, i16 = dense<16> : vector<2xi64>, i8 = dense<8> : vector<2xi64>, i32 = dense<32> : vector<2xi64>, f128 = dense<128> : vector<2xi64>, f16 = dense<16> : vector<2xi64>, !llvm.ptr<270> = dense<32> : vector<4xi64>, f64 = dense<64> : vector<2xi64>, "dlti.stack_alignment" = 128 : i64, "dlti.endianness" = "little">} {
  cir.func private @printLongLongLine(!s64i) loc(#loc139)
  cir.func internal private @badSink(%arg0: !s64i loc(fused[#loc5, #loc6])) extra(#fn_attr) {
    %0 = cir.alloca !s64i, !cir.ptr<!s64i>, ["result", init] {alignment = 8 : i64} loc(#loc142)
    %1 = cir.alloca !s64i, !cir.ptr<!s64i>, ["data", init] {alignment = 8 : i64} loc(#loc141)
    cir.store %arg0, %1 : !s64i, !cir.ptr<!s64i> loc(#loc9)
    cir.br ^bb1 loc(#loc143)
  ^bb1:  // pred: ^bb0
    %2 = cir.load %1 : !cir.ptr<!s64i>, !s64i loc(#loc12)
    %3 = cir.const #cir.int<0> : !s32i loc(#loc13)
    %4 = cir.cast(integral, %3 : !s32i), !s64i loc(#loc13)
    %5 = cir.cmp(gt, %2, %4) : !s64i, !cir.bool loc(#loc144)
    cir.brcond %5 ^bb2, ^bb3 loc(#loc145)
  ^bb2:  // pred: ^bb1
    %6 = cir.load %1 : !cir.ptr<!s64i>, !s64i loc(#loc15)
    %7 = cir.const #cir.int<2> : !s32i loc(#loc8)
    %8 = cir.cast(integral, %7 : !s32i), !s64i loc(#loc8)
    %9 = cir.binop(mul, %6, %8) nsw : !s64i loc(#loc15)
    cir.store %9, %0 : !s64i, !cir.ptr<!s64i> loc(#loc142)
    %10 = cir.load %0 : !cir.ptr<!s64i>, !s64i loc(#loc16)
    cir.call @printLongLongLine(%10) : (!s64i) -> () loc(#loc17)
    cir.br ^bb3 loc(#loc11)
  ^bb3:  // 2 preds: ^bb1, ^bb2
    cir.br ^bb4 loc(#loc11)
  ^bb4:  // pred: ^bb3
    cir.return loc(#loc4)
  } loc(#loc140)
  cir.func private @__isoc99_fscanf(!cir.ptr<!ty__IO_FILE>, !cir.ptr<!s8i>, ...) -> !s32i loc(#loc146)
  cir.global "private" external @stdin : !cir.ptr<!ty__IO_FILE> {alignment = 8 : i64} loc(#loc147)
  cir.global "private" constant cir_private dsolocal @".str" = #cir.const_array<"%ld\00" : !cir.array<!s8i x 4>> : !cir.array<!s8i x 4> {alignment = 1 : i64} loc(#loc148)
  cir.func no_proto @CWE190_Integer_Overflow__int64_t_fscanf_multiply_44_bad() extra(#fn_attr) {
    %0 = cir.alloca !s64i, !cir.ptr<!s64i>, ["data"] {alignment = 8 : i64} loc(#loc150)
    %1 = cir.alloca !cir.ptr<!cir.func<!void (!s64i)>>, !cir.ptr<!cir.ptr<!cir.func<!void (!s64i)>>>, ["funcPtr", init] {alignment = 8 : i64} loc(#loc151)
    %2 = cir.get_global @badSink : !cir.ptr<!cir.func<!void (!s64i)>> loc(#loc29)
    cir.store %2, %1 : !cir.ptr<!cir.func<!void (!s64i)>>, !cir.ptr<!cir.ptr<!cir.func<!void (!s64i)>>> loc(#loc151)
    %3 = cir.const #cir.int<0> : !s64i loc(#loc30)
    cir.store %3, %0 : !s64i, !cir.ptr<!s64i> loc(#loc152)
    %4 = cir.get_global @__isoc99_fscanf : !cir.ptr<!cir.func<!s32i (!cir.ptr<!ty__IO_FILE>, !cir.ptr<!s8i>, ...)>> loc(#loc32)
    %5 = cir.get_global @stdin : !cir.ptr<!cir.ptr<!ty__IO_FILE>> loc(#loc147)
    %6 = cir.load %5 : !cir.ptr<!cir.ptr<!ty__IO_FILE>>, !cir.ptr<!ty__IO_FILE> loc(#loc33)
    %7 = cir.get_global @".str" : !cir.ptr<!cir.array<!s8i x 4>> loc(#loc148)
    %8 = cir.cast(array_to_ptrdecay, %7 : !cir.ptr<!cir.array<!s8i x 4>>), !cir.ptr<!s8i> loc(#loc148)
    %9 = cir.call @__isoc99_fscanf(%6, %8, %0) : (!cir.ptr<!ty__IO_FILE>, !cir.ptr<!s8i>, !cir.ptr<!s64i>) -> !s32i loc(#loc32)
    %10 = cir.load %1 : !cir.ptr<!cir.ptr<!cir.func<!void (!s64i)>>>, !cir.ptr<!cir.func<!void (!s64i)>> loc(#loc34)
    %11 = cir.load %0 : !cir.ptr<!s64i>, !s64i loc(#loc35)
    cir.call %10(%11) : (!cir.ptr<!cir.func<!void (!s64i)>>, !s64i) -> () loc(#loc34)
    cir.return loc(#loc25)
  } loc(#loc149)
  cir.func no_proto @CWE190_Integer_Overflow__int64_t_fscanf_multiply_44_good() extra(#fn_attr) {
    %0 = cir.get_global @goodG2B : !cir.ptr<!cir.func<!void ()>> loc(#loc154)
    cir.call %0() : (!cir.ptr<!cir.func<!void ()>>) -> () loc(#loc38)
    %1 = cir.get_global @goodB2G : !cir.ptr<!cir.func<!void ()>> loc(#loc155)
    cir.call %1() : (!cir.ptr<!cir.func<!void ()>>) -> () loc(#loc40)
    cir.return loc(#loc37)
  } loc(#loc153)
  cir.func private @srand(!u32i) extra(#fn_attr1) loc(#loc156)
  cir.func private @time(!cir.ptr<!s64i>) -> !s64i extra(#fn_attr1) loc(#loc157)
  cir.func private @printLine(!cir.ptr<!s8i>) loc(#loc158)
  cir.global "private" constant cir_private dsolocal @".str.1" = #cir.const_array<"Calling good()...\00" : !cir.array<!s8i x 18>> : !cir.array<!s8i x 18> {alignment = 1 : i64} loc(#loc48)
  cir.global "private" constant cir_private dsolocal @".str.2" = #cir.const_array<"Finished good()\00" : !cir.array<!s8i x 16>> : !cir.array<!s8i x 16> {alignment = 1 : i64} loc(#loc49)
  cir.global "private" constant cir_private dsolocal @".str.3" = #cir.const_array<"Calling bad()...\00" : !cir.array<!s8i x 17>> : !cir.array<!s8i x 17> {alignment = 1 : i64} loc(#loc50)
  cir.global "private" constant cir_private dsolocal @".str.4" = #cir.const_array<"Finished bad()\00" : !cir.array<!s8i x 15>> : !cir.array<!s8i x 15> {alignment = 1 : i64} loc(#loc51)
  cir.func @main(%arg0: !s32i loc(fused[#loc54, #loc55]), %arg1: !cir.ptr<!cir.ptr<!s8i>> loc(fused[#loc56, #loc57])) -> !s32i extra(#fn_attr) {
    %0 = cir.alloca !s32i, !cir.ptr<!s32i>, ["argc", init] {alignment = 4 : i64} loc(#loc160)
    %1 = cir.alloca !cir.ptr<!cir.ptr<!s8i>>, !cir.ptr<!cir.ptr<!cir.ptr<!s8i>>>, ["argv", init] {alignment = 8 : i64} loc(#loc161)
    %2 = cir.alloca !s32i, !cir.ptr<!s32i>, ["__retval"] {alignment = 4 : i64} loc(#loc53)
    cir.store %arg0, %0 : !s32i, !cir.ptr<!s32i> loc(#loc58)
    cir.store %arg1, %1 : !cir.ptr<!cir.ptr<!s8i>>, !cir.ptr<!cir.ptr<!cir.ptr<!s8i>>> loc(#loc58)
    %3 = cir.const #cir.ptr<null> : !cir.ptr<!s64i> loc(#loc59)
    %4 = cir.call @time(%3) : (!cir.ptr<!s64i>) -> !s64i extra(#fn_attr1) loc(#loc60)
    %5 = cir.cast(integral, %4 : !s64i), !u32i loc(#loc60)
    cir.call @srand(%5) : (!u32i) -> () extra(#fn_attr1) loc(#loc61)
    %6 = cir.get_global @".str.1" : !cir.ptr<!cir.array<!s8i x 18>> loc(#loc48)
    %7 = cir.cast(array_to_ptrdecay, %6 : !cir.ptr<!cir.array<!s8i x 18>>), !cir.ptr<!s8i> loc(#loc48)
    cir.call @printLine(%7) : (!cir.ptr<!s8i>) -> () loc(#loc62)
    %8 = cir.get_global @CWE190_Integer_Overflow__int64_t_fscanf_multiply_44_good : !cir.ptr<!cir.func<!void ()>> loc(#loc162)
    cir.call @CWE190_Integer_Overflow__int64_t_fscanf_multiply_44_good() : () -> () loc(#loc63)
    %9 = cir.get_global @".str.2" : !cir.ptr<!cir.array<!s8i x 16>> loc(#loc49)
    %10 = cir.cast(array_to_ptrdecay, %9 : !cir.ptr<!cir.array<!s8i x 16>>), !cir.ptr<!s8i> loc(#loc49)
    cir.call @printLine(%10) : (!cir.ptr<!s8i>) -> () loc(#loc65)
    %11 = cir.get_global @".str.3" : !cir.ptr<!cir.array<!s8i x 17>> loc(#loc50)
    %12 = cir.cast(array_to_ptrdecay, %11 : !cir.ptr<!cir.array<!s8i x 17>>), !cir.ptr<!s8i> loc(#loc50)
    cir.call @printLine(%12) : (!cir.ptr<!s8i>) -> () loc(#loc66)
    %13 = cir.get_global @CWE190_Integer_Overflow__int64_t_fscanf_multiply_44_bad : !cir.ptr<!cir.func<!void ()>> loc(#loc163)
    cir.call @CWE190_Integer_Overflow__int64_t_fscanf_multiply_44_bad() : () -> () loc(#loc67)
    %14 = cir.get_global @".str.4" : !cir.ptr<!cir.array<!s8i x 15>> loc(#loc51)
    %15 = cir.cast(array_to_ptrdecay, %14 : !cir.ptr<!cir.array<!s8i x 15>>), !cir.ptr<!s8i> loc(#loc51)
    cir.call @printLine(%15) : (!cir.ptr<!s8i>) -> () loc(#loc69)
    %16 = cir.const #cir.int<0> : !s32i loc(#loc70)
    cir.store %16, %2 : !s32i, !cir.ptr<!s32i> loc(#loc164)
    %17 = cir.load %2 : !cir.ptr<!s32i>, !s32i loc(#loc164)
    cir.return %17 : !s32i loc(#loc164)
  } loc(#loc159)
  cir.func internal private @goodG2BSink(%arg0: !s64i loc(fused[#loc74, #loc75])) extra(#fn_attr) {
    %0 = cir.alloca !s64i, !cir.ptr<!s64i>, ["result", init] {alignment = 8 : i64} loc(#loc167)
    %1 = cir.alloca !s64i, !cir.ptr<!s64i>, ["data", init] {alignment = 8 : i64} loc(#loc166)
    cir.store %arg0, %1 : !s64i, !cir.ptr<!s64i> loc(#loc78)
    cir.br ^bb1 loc(#loc168)
  ^bb1:  // pred: ^bb0
    %2 = cir.load %1 : !cir.ptr<!s64i>, !s64i loc(#loc81)
    %3 = cir.const #cir.int<0> : !s32i loc(#loc82)
    %4 = cir.cast(integral, %3 : !s32i), !s64i loc(#loc82)
    %5 = cir.cmp(gt, %2, %4) : !s64i, !cir.bool loc(#loc169)
    cir.brcond %5 ^bb2, ^bb3 loc(#loc170)
  ^bb2:  // pred: ^bb1
    %6 = cir.load %1 : !cir.ptr<!s64i>, !s64i loc(#loc84)
    %7 = cir.const #cir.int<2> : !s32i loc(#loc77)
    %8 = cir.cast(integral, %7 : !s32i), !s64i loc(#loc77)
    %9 = cir.binop(mul, %6, %8) nsw : !s64i loc(#loc84)
    cir.store %9, %0 : !s64i, !cir.ptr<!s64i> loc(#loc167)
    %10 = cir.load %0 : !cir.ptr<!s64i>, !s64i loc(#loc85)
    cir.call @printLongLongLine(%10) : (!s64i) -> () loc(#loc86)
    cir.br ^bb3 loc(#loc80)
  ^bb3:  // 2 preds: ^bb1, ^bb2
    cir.br ^bb4 loc(#loc80)
  ^bb4:  // pred: ^bb3
    cir.return loc(#loc73)
  } loc(#loc165)
  cir.func no_proto internal private @goodG2B() extra(#fn_attr) {
    %0 = cir.alloca !s64i, !cir.ptr<!s64i>, ["data"] {alignment = 8 : i64} loc(#loc172)
    %1 = cir.alloca !cir.ptr<!cir.func<!void (!s64i)>>, !cir.ptr<!cir.ptr<!cir.func<!void (!s64i)>>>, ["funcPtr", init] {alignment = 8 : i64} loc(#loc173)
    %2 = cir.get_global @goodG2BSink : !cir.ptr<!cir.func<!void (!s64i)>> loc(#loc92)
    cir.store %2, %1 : !cir.ptr<!cir.func<!void (!s64i)>>, !cir.ptr<!cir.ptr<!cir.func<!void (!s64i)>>> loc(#loc173)
    %3 = cir.const #cir.int<0> : !s64i loc(#loc93)
    cir.store %3, %0 : !s64i, !cir.ptr<!s64i> loc(#loc174)
    %4 = cir.const #cir.int<2> : !s32i loc(#loc95)
    %5 = cir.cast(integral, %4 : !s32i), !s64i loc(#loc95)
    cir.store %5, %0 : !s64i, !cir.ptr<!s64i> loc(#loc175)
    %6 = cir.load %1 : !cir.ptr<!cir.ptr<!cir.func<!void (!s64i)>>>, !cir.ptr<!cir.func<!void (!s64i)>> loc(#loc97)
    %7 = cir.load %0 : !cir.ptr<!s64i>, !s64i loc(#loc98)
    cir.call %6(%7) : (!cir.ptr<!cir.func<!void (!s64i)>>, !s64i) -> () loc(#loc97)
    cir.return loc(#loc88)
  } loc(#loc171)
  cir.global "private" constant cir_private dsolocal @".str.5" = #cir.const_array<"data value is too large to perform arithmetic safely.\00" : !cir.array<!s8i x 54>> : !cir.array<!s8i x 54> {alignment = 1 : i64} loc(#loc99)
  cir.func internal private @goodB2GSink(%arg0: !s64i loc(fused[#loc102, #loc103])) extra(#fn_attr) {
    %0 = cir.alloca !s64i, !cir.ptr<!s64i>, ["result", init] {alignment = 8 : i64} loc(#loc178)
    %1 = cir.alloca !s64i, !cir.ptr<!s64i>, ["data", init] {alignment = 8 : i64} loc(#loc177)
    cir.store %arg0, %1 : !s64i, !cir.ptr<!s64i> loc(#loc106)
    cir.br ^bb1 loc(#loc179)
  ^bb1:  // pred: ^bb0
    %2 = cir.load %1 : !cir.ptr<!s64i>, !s64i loc(#loc109)
    %3 = cir.const #cir.int<0> : !s32i loc(#loc110)
    %4 = cir.cast(integral, %3 : !s32i), !s64i loc(#loc110)
    %5 = cir.cmp(gt, %2, %4) : !s64i, !cir.bool loc(#loc180)
    cir.brcond %5 ^bb2, ^bb8 loc(#loc181)
  ^bb2:  // pred: ^bb1
    cir.br ^bb3 loc(#loc182)
  ^bb3:  // pred: ^bb2
    %6 = cir.load %1 : !cir.ptr<!s64i>, !s64i loc(#loc114)
    %7 = cir.const #cir.int<9223372036854775807> : !s64i loc(#loc115)
    %8 = cir.const #cir.int<2> : !s32i loc(#loc116)
    %9 = cir.cast(integral, %8 : !s32i), !s64i loc(#loc116)
    %10 = cir.binop(div, %7, %9) : !s64i loc(#loc183)
    %11 = cir.cmp(lt, %6, %10) : !s64i, !cir.bool loc(#loc184)
    cir.brcond %11 ^bb4, ^bb5 loc(#loc185)
  ^bb4:  // pred: ^bb3
    %12 = cir.load %1 : !cir.ptr<!s64i>, !s64i loc(#loc121)
    %13 = cir.const #cir.int<2> : !s32i loc(#loc105)
    %14 = cir.cast(integral, %13 : !s32i), !s64i loc(#loc105)
    %15 = cir.binop(mul, %12, %14) nsw : !s64i loc(#loc121)
    cir.store %15, %0 : !s64i, !cir.ptr<!s64i> loc(#loc178)
    %16 = cir.load %0 : !cir.ptr<!s64i>, !s64i loc(#loc122)
    cir.call @printLongLongLine(%16) : (!s64i) -> () loc(#loc123)
    cir.br ^bb6 loc(#loc119)
  ^bb5:  // pred: ^bb3
    %17 = cir.get_global @".str.5" : !cir.ptr<!cir.array<!s8i x 54>> loc(#loc99)
    %18 = cir.cast(array_to_ptrdecay, %17 : !cir.ptr<!cir.array<!s8i x 54>>), !cir.ptr<!s8i> loc(#loc99)
    cir.call @printLine(%18) : (!cir.ptr<!s8i>) -> () loc(#loc124)
    cir.br ^bb6 loc(#loc113)
  ^bb6:  // 2 preds: ^bb4, ^bb5
    cir.br ^bb7 loc(#loc113)
  ^bb7:  // pred: ^bb6
    cir.br ^bb8 loc(#loc108)
  ^bb8:  // 2 preds: ^bb1, ^bb7
    cir.br ^bb9 loc(#loc108)
  ^bb9:  // pred: ^bb8
    cir.return loc(#loc101)
  } loc(#loc176)
  cir.func no_proto internal private @goodB2G() extra(#fn_attr) {
    %0 = cir.alloca !s64i, !cir.ptr<!s64i>, ["data"] {alignment = 8 : i64} loc(#loc187)
    %1 = cir.alloca !cir.ptr<!cir.func<!void (!s64i)>>, !cir.ptr<!cir.ptr<!cir.func<!void (!s64i)>>>, ["funcPtr", init] {alignment = 8 : i64} loc(#loc188)
    %2 = cir.get_global @goodB2GSink : !cir.ptr<!cir.func<!void (!s64i)>> loc(#loc130)
    cir.store %2, %1 : !cir.ptr<!cir.func<!void (!s64i)>>, !cir.ptr<!cir.ptr<!cir.func<!void (!s64i)>>> loc(#loc188)
    %3 = cir.const #cir.int<0> : !s64i loc(#loc131)
    cir.store %3, %0 : !s64i, !cir.ptr<!s64i> loc(#loc189)
    %4 = cir.get_global @__isoc99_fscanf : !cir.ptr<!cir.func<!s32i (!cir.ptr<!ty__IO_FILE>, !cir.ptr<!s8i>, ...)>> loc(#loc133)
    %5 = cir.get_global @stdin : !cir.ptr<!cir.ptr<!ty__IO_FILE>> loc(#loc147)
    %6 = cir.load %5 : !cir.ptr<!cir.ptr<!ty__IO_FILE>>, !cir.ptr<!ty__IO_FILE> loc(#loc134)
    %7 = cir.get_global @".str" : !cir.ptr<!cir.array<!s8i x 4>> loc(#loc190)
    %8 = cir.cast(array_to_ptrdecay, %7 : !cir.ptr<!cir.array<!s8i x 4>>), !cir.ptr<!s8i> loc(#loc190)
    %9 = cir.call @__isoc99_fscanf(%6, %8, %0) : (!cir.ptr<!ty__IO_FILE>, !cir.ptr<!s8i>, !cir.ptr<!s64i>) -> !s32i loc(#loc133)
    %10 = cir.load %1 : !cir.ptr<!cir.ptr<!cir.func<!void (!s64i)>>>, !cir.ptr<!cir.func<!void (!s64i)>> loc(#loc137)
    %11 = cir.load %0 : !cir.ptr<!s64i>, !s64i loc(#loc138)
    cir.call %10(%11) : (!cir.ptr<!cir.func<!void (!s64i)>>, !s64i) -> () loc(#loc137)
    cir.return loc(#loc126)
  } loc(#loc186)
} loc(#loc)
#loc = loc("/home/ladisgin/git_proj/juliet-c/testcases/CWE190_Integer_Overflow/s01/CWE190_Integer_Overflow__int64_t_fscanf_multiply_44.c":0:0)
#loc1 = loc("../../../testcasesupport/std_testcase_io.h":26:1)
#loc2 = loc("../../../testcasesupport/std_testcase_io.h":26:49)
#loc3 = loc("CWE190_Integer_Overflow__int64_t_fscanf_multiply_44.c":23:1)
#loc4 = loc("CWE190_Integer_Overflow__int64_t_fscanf_multiply_44.c":31:1)
#loc7 = loc("CWE190_Integer_Overflow__int64_t_fscanf_multiply_44.c":28:9)
#loc8 = loc("CWE190_Integer_Overflow__int64_t_fscanf_multiply_44.c":28:33)
#loc9 = loc("CWE190_Integer_Overflow__int64_t_fscanf_multiply_44.c":24:1)
#loc10 = loc("CWE190_Integer_Overflow__int64_t_fscanf_multiply_44.c":25:5)
#loc11 = loc("CWE190_Integer_Overflow__int64_t_fscanf_multiply_44.c":30:5)
#loc12 = loc("CWE190_Integer_Overflow__int64_t_fscanf_multiply_44.c":25:8)
#loc13 = loc("CWE190_Integer_Overflow__int64_t_fscanf_multiply_44.c":25:15)
#loc14 = loc("CWE190_Integer_Overflow__int64_t_fscanf_multiply_44.c":26:5)
#loc15 = loc("CWE190_Integer_Overflow__int64_t_fscanf_multiply_44.c":28:26)
#loc16 = loc("CWE190_Integer_Overflow__int64_t_fscanf_multiply_44.c":29:27)
#loc17 = loc("CWE190_Integer_Overflow__int64_t_fscanf_multiply_44.c":29:9)
#loc18 = loc("/usr/include/stdio.h":463:1)
#loc19 = loc("/usr/include/stdio.h":465:33)
#loc20 = loc("/usr/include/stdio.h":149:1)
#loc21 = loc("/usr/include/stdio.h":149:14)
#loc22 = loc("CWE190_Integer_Overflow__int64_t_fscanf_multiply_44.c":40:20)
#loc23 = loc("CWE190_Integer_Overflow__int64_t_fscanf_multiply_44.c":40:24)
#loc24 = loc("CWE190_Integer_Overflow__int64_t_fscanf_multiply_44.c":33:1)
#loc25 = loc("CWE190_Integer_Overflow__int64_t_fscanf_multiply_44.c":43:1)
#loc26 = loc("CWE190_Integer_Overflow__int64_t_fscanf_multiply_44.c":35:5)
#loc27 = loc("CWE190_Integer_Overflow__int64_t_fscanf_multiply_44.c":35:13)
#loc28 = loc("CWE190_Integer_Overflow__int64_t_fscanf_multiply_44.c":37:5)
#loc29 = loc("CWE190_Integer_Overflow__int64_t_fscanf_multiply_44.c":37:33)
#loc30 = loc("CWE190_Integer_Overflow__int64_t_fscanf_multiply_44.c":38:12)
#loc31 = loc("CWE190_Integer_Overflow__int64_t_fscanf_multiply_44.c":38:5)
#loc32 = loc("CWE190_Integer_Overflow__int64_t_fscanf_multiply_44.c":40:5)
#loc33 = loc("CWE190_Integer_Overflow__int64_t_fscanf_multiply_44.c":40:13)
#loc34 = loc("CWE190_Integer_Overflow__int64_t_fscanf_multiply_44.c":42:5)
#loc35 = loc("CWE190_Integer_Overflow__int64_t_fscanf_multiply_44.c":42:13)
#loc36 = loc("CWE190_Integer_Overflow__int64_t_fscanf_multiply_44.c":98:1)
#loc37 = loc("CWE190_Integer_Overflow__int64_t_fscanf_multiply_44.c":102:1)
#loc38 = loc("CWE190_Integer_Overflow__int64_t_fscanf_multiply_44.c":100:5)
#loc39 = loc("CWE190_Integer_Overflow__int64_t_fscanf_multiply_44.c":100:13)
#loc40 = loc("CWE190_Integer_Overflow__int64_t_fscanf_multiply_44.c":101:5)
#loc41 = loc("CWE190_Integer_Overflow__int64_t_fscanf_multiply_44.c":101:13)
#loc42 = loc("/usr/include/stdlib.h":575:1)
#loc43 = loc("/usr/include/stdlib.h":575:41)
#loc44 = loc("/usr/include/time.h":76:1)
#loc45 = loc("/usr/include/time.h":76:38)
#loc46 = loc("../../../testcasesupport/std_testcase_io.h":14:1)
#loc47 = loc("../../../testcasesupport/std_testcase_io.h":14:33)
#loc48 = loc("CWE190_Integer_Overflow__int64_t_fscanf_multiply_44.c":117:15)
#loc49 = loc("CWE190_Integer_Overflow__int64_t_fscanf_multiply_44.c":119:15)
#loc50 = loc("CWE190_Integer_Overflow__int64_t_fscanf_multiply_44.c":122:15)
#loc51 = loc("CWE190_Integer_Overflow__int64_t_fscanf_multiply_44.c":124:15)
#loc52 = loc("CWE190_Integer_Overflow__int64_t_fscanf_multiply_44.c":112:1)
#loc53 = loc("CWE190_Integer_Overflow__int64_t_fscanf_multiply_44.c":127:1)
#loc58 = loc("CWE190_Integer_Overflow__int64_t_fscanf_multiply_44.c":113:1)
#loc59 = loc("CWE190_Integer_Overflow__int64_t_fscanf_multiply_44.c":115:27)
#loc60 = loc("CWE190_Integer_Overflow__int64_t_fscanf_multiply_44.c":115:22)
#loc61 = loc("CWE190_Integer_Overflow__int64_t_fscanf_multiply_44.c":115:5)
#loc62 = loc("CWE190_Integer_Overflow__int64_t_fscanf_multiply_44.c":117:5)
#loc63 = loc("CWE190_Integer_Overflow__int64_t_fscanf_multiply_44.c":118:5)
#loc64 = loc("CWE190_Integer_Overflow__int64_t_fscanf_multiply_44.c":118:62)
#loc65 = loc("CWE190_Integer_Overflow__int64_t_fscanf_multiply_44.c":119:5)
#loc66 = loc("CWE190_Integer_Overflow__int64_t_fscanf_multiply_44.c":122:5)
#loc67 = loc("CWE190_Integer_Overflow__int64_t_fscanf_multiply_44.c":123:5)
#loc68 = loc("CWE190_Integer_Overflow__int64_t_fscanf_multiply_44.c":123:61)
#loc69 = loc("CWE190_Integer_Overflow__int64_t_fscanf_multiply_44.c":124:5)
#loc70 = loc("CWE190_Integer_Overflow__int64_t_fscanf_multiply_44.c":126:12)
#loc71 = loc("CWE190_Integer_Overflow__int64_t_fscanf_multiply_44.c":126:5)
#loc72 = loc("CWE190_Integer_Overflow__int64_t_fscanf_multiply_44.c":50:1)
#loc73 = loc("CWE190_Integer_Overflow__int64_t_fscanf_multiply_44.c":58:1)
#loc76 = loc("CWE190_Integer_Overflow__int64_t_fscanf_multiply_44.c":55:9)
#loc77 = loc("CWE190_Integer_Overflow__int64_t_fscanf_multiply_44.c":55:33)
#loc78 = loc("CWE190_Integer_Overflow__int64_t_fscanf_multiply_44.c":51:1)
#loc79 = loc("CWE190_Integer_Overflow__int64_t_fscanf_multiply_44.c":52:5)
#loc80 = loc("CWE190_Integer_Overflow__int64_t_fscanf_multiply_44.c":57:5)
#loc81 = loc("CWE190_Integer_Overflow__int64_t_fscanf_multiply_44.c":52:8)
#loc82 = loc("CWE190_Integer_Overflow__int64_t_fscanf_multiply_44.c":52:15)
#loc83 = loc("CWE190_Integer_Overflow__int64_t_fscanf_multiply_44.c":53:5)
#loc84 = loc("CWE190_Integer_Overflow__int64_t_fscanf_multiply_44.c":55:26)
#loc85 = loc("CWE190_Integer_Overflow__int64_t_fscanf_multiply_44.c":56:27)
#loc86 = loc("CWE190_Integer_Overflow__int64_t_fscanf_multiply_44.c":56:9)
#loc87 = loc("CWE190_Integer_Overflow__int64_t_fscanf_multiply_44.c":60:1)
#loc88 = loc("CWE190_Integer_Overflow__int64_t_fscanf_multiply_44.c":68:1)
#loc89 = loc("CWE190_Integer_Overflow__int64_t_fscanf_multiply_44.c":62:5)
#loc90 = loc("CWE190_Integer_Overflow__int64_t_fscanf_multiply_44.c":62:13)
#loc91 = loc("CWE190_Integer_Overflow__int64_t_fscanf_multiply_44.c":63:5)
#loc92 = loc("CWE190_Integer_Overflow__int64_t_fscanf_multiply_44.c":63:33)
#loc93 = loc("CWE190_Integer_Overflow__int64_t_fscanf_multiply_44.c":64:12)
#loc94 = loc("CWE190_Integer_Overflow__int64_t_fscanf_multiply_44.c":64:5)
#loc95 = loc("CWE190_Integer_Overflow__int64_t_fscanf_multiply_44.c":66:12)
#loc96 = loc("CWE190_Integer_Overflow__int64_t_fscanf_multiply_44.c":66:5)
#loc97 = loc("CWE190_Integer_Overflow__int64_t_fscanf_multiply_44.c":67:5)
#loc98 = loc("CWE190_Integer_Overflow__int64_t_fscanf_multiply_44.c":67:13)
#loc99 = loc("CWE190_Integer_Overflow__int64_t_fscanf_multiply_44.c":83:23)
#loc100 = loc("CWE190_Integer_Overflow__int64_t_fscanf_multiply_44.c":71:1)
#loc101 = loc("CWE190_Integer_Overflow__int64_t_fscanf_multiply_44.c":86:1)
#loc104 = loc("CWE190_Integer_Overflow__int64_t_fscanf_multiply_44.c":78:13)
#loc105 = loc("CWE190_Integer_Overflow__int64_t_fscanf_multiply_44.c":78:37)
#loc106 = loc("CWE190_Integer_Overflow__int64_t_fscanf_multiply_44.c":72:1)
#loc107 = loc("CWE190_Integer_Overflow__int64_t_fscanf_multiply_44.c":73:5)
#loc108 = loc("CWE190_Integer_Overflow__int64_t_fscanf_multiply_44.c":85:5)
#loc109 = loc("CWE190_Integer_Overflow__int64_t_fscanf_multiply_44.c":73:8)
#loc110 = loc("CWE190_Integer_Overflow__int64_t_fscanf_multiply_44.c":73:15)
#loc111 = loc("CWE190_Integer_Overflow__int64_t_fscanf_multiply_44.c":74:5)
#loc112 = loc("CWE190_Integer_Overflow__int64_t_fscanf_multiply_44.c":76:9)
#loc113 = loc("CWE190_Integer_Overflow__int64_t_fscanf_multiply_44.c":84:9)
#loc114 = loc("CWE190_Integer_Overflow__int64_t_fscanf_multiply_44.c":76:13)
#loc115 = loc("CWE190_Integer_Overflow__int64_t_fscanf_multiply_44.c":76:21)
#loc116 = loc("CWE190_Integer_Overflow__int64_t_fscanf_multiply_44.c":76:31)
#loc117 = loc("CWE190_Integer_Overflow__int64_t_fscanf_multiply_44.c":76:32)
#loc118 = loc("CWE190_Integer_Overflow__int64_t_fscanf_multiply_44.c":77:9)
#loc119 = loc("CWE190_Integer_Overflow__int64_t_fscanf_multiply_44.c":80:9)
#loc120 = loc("CWE190_Integer_Overflow__int64_t_fscanf_multiply_44.c":82:9)
#loc121 = loc("CWE190_Integer_Overflow__int64_t_fscanf_multiply_44.c":78:30)
#loc122 = loc("CWE190_Integer_Overflow__int64_t_fscanf_multiply_44.c":79:31)
#loc123 = loc("CWE190_Integer_Overflow__int64_t_fscanf_multiply_44.c":79:13)
#loc124 = loc("CWE190_Integer_Overflow__int64_t_fscanf_multiply_44.c":83:13)
#loc125 = loc("CWE190_Integer_Overflow__int64_t_fscanf_multiply_44.c":88:1)
#loc126 = loc("CWE190_Integer_Overflow__int64_t_fscanf_multiply_44.c":96:1)
#loc127 = loc("CWE190_Integer_Overflow__int64_t_fscanf_multiply_44.c":90:5)
#loc128 = loc("CWE190_Integer_Overflow__int64_t_fscanf_multiply_44.c":90:13)
#loc129 = loc("CWE190_Integer_Overflow__int64_t_fscanf_multiply_44.c":91:5)
#loc130 = loc("CWE190_Integer_Overflow__int64_t_fscanf_multiply_44.c":91:33)
#loc131 = loc("CWE190_Integer_Overflow__int64_t_fscanf_multiply_44.c":92:12)
#loc132 = loc("CWE190_Integer_Overflow__int64_t_fscanf_multiply_44.c":92:5)
#loc133 = loc("CWE190_Integer_Overflow__int64_t_fscanf_multiply_44.c":94:5)
#loc134 = loc("CWE190_Integer_Overflow__int64_t_fscanf_multiply_44.c":94:13)
#loc135 = loc("CWE190_Integer_Overflow__int64_t_fscanf_multiply_44.c":94:20)
#loc136 = loc("CWE190_Integer_Overflow__int64_t_fscanf_multiply_44.c":94:24)
#loc137 = loc("CWE190_Integer_Overflow__int64_t_fscanf_multiply_44.c":95:5)
#loc138 = loc("CWE190_Integer_Overflow__int64_t_fscanf_multiply_44.c":95:13)
#loc139 = loc(fused[#loc1, #loc2])
#loc140 = loc(fused[#loc3, #loc4])
#loc142 = loc(fused[#loc7, #loc8])
#loc143 = loc(fused[#loc10, #loc11])
#loc144 = loc(fused[#loc12, #loc13])
#loc145 = loc(fused[#loc14, #loc11])
#loc146 = loc(fused[#loc18, #loc19])
#loc147 = loc(fused[#loc20, #loc21])
#loc148 = loc(fused[#loc22, #loc23])
#loc149 = loc(fused[#loc24, #loc25])
#loc150 = loc(fused[#loc26, #loc27])
#loc151 = loc(fused[#loc28, #loc29])
#loc152 = loc(fused[#loc31, #loc30])
#loc153 = loc(fused[#loc36, #loc37])
#loc154 = loc(fused[#loc38, #loc39])
#loc155 = loc(fused[#loc40, #loc41])
#loc156 = loc(fused[#loc42, #loc43])
#loc157 = loc(fused[#loc44, #loc45])
#loc158 = loc(fused[#loc46, #loc47])
#loc159 = loc(fused[#loc52, #loc53])
#loc162 = loc(fused[#loc63, #loc64])
#loc163 = loc(fused[#loc67, #loc68])
#loc164 = loc(fused[#loc71, #loc70])
#loc165 = loc(fused[#loc72, #loc73])
#loc167 = loc(fused[#loc76, #loc77])
#loc168 = loc(fused[#loc79, #loc80])
#loc169 = loc(fused[#loc81, #loc82])
#loc170 = loc(fused[#loc83, #loc80])
#loc171 = loc(fused[#loc87, #loc88])
#loc172 = loc(fused[#loc89, #loc90])
#loc173 = loc(fused[#loc91, #loc92])
#loc174 = loc(fused[#loc94, #loc93])
#loc175 = loc(fused[#loc96, #loc95])
#loc176 = loc(fused[#loc100, #loc101])
#loc178 = loc(fused[#loc104, #loc105])
#loc179 = loc(fused[#loc107, #loc108])
#loc180 = loc(fused[#loc109, #loc110])
#loc181 = loc(fused[#loc111, #loc108])
#loc182 = loc(fused[#loc112, #loc113])
#loc183 = loc(fused[#loc115, #loc116])
#loc184 = loc(fused[#loc114, #loc117])
#loc185 = loc(fused[#loc118, #loc119, #loc120, #loc113])
#loc186 = loc(fused[#loc125, #loc126])
#loc187 = loc(fused[#loc127, #loc128])
#loc188 = loc(fused[#loc129, #loc130])
#loc189 = loc(fused[#loc132, #loc131])
#loc190 = loc(fused[#loc135, #loc136])
