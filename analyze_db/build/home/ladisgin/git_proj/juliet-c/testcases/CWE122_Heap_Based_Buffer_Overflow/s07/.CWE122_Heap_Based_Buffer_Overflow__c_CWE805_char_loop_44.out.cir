!s32i = !cir.int<s, 32>
!s64i = !cir.int<s, 64>
!s8i = !cir.int<s, 8>
!u32i = !cir.int<u, 32>
!u64i = !cir.int<u, 64>
!void = !cir.void
#fn_attr = #cir<extra({nothrow = #cir.nothrow})>
#fn_attr1 = #cir<extra({inline = #cir.inline<no>, nothrow = #cir.nothrow, optnone = #cir.optnone})>
#loc5 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_char_loop_44.c":23:21)
#loc6 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_char_loop_44.c":23:28)
#loc97 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_char_loop_44.c":104:10)
#loc98 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_char_loop_44.c":104:14)
#loc99 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_char_loop_44.c":104:20)
#loc100 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_char_loop_44.c":104:32)
#loc117 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_char_loop_44.c":60:25)
#loc118 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_char_loop_44.c":60:32)
#loc191 = loc(fused[#loc5, #loc6])
#loc224 = loc(fused[#loc97, #loc98])
#loc225 = loc(fused[#loc99, #loc100])
#loc230 = loc(fused[#loc117, #loc118])
module @"/home/ladisgin/git_proj/juliet-c/testcases/CWE122_Heap_Based_Buffer_Overflow/s07/CWE122_Heap_Based_Buffer_Overflow__c_CWE805_char_loop_44.c" attributes {cir.lang = #cir.lang<c>, cir.sob = #cir.signed_overflow_behavior<undefined>, cir.triple = "x86_64-unknown-linux-gnu", dlti.dl_spec = #dlti.dl_spec<f16 = dense<16> : vector<2xi64>, f64 = dense<64> : vector<2xi64>, f128 = dense<128> : vector<2xi64>, !llvm.ptr<272> = dense<64> : vector<4xi64>, i8 = dense<8> : vector<2xi64>, !llvm.ptr<271> = dense<32> : vector<4xi64>, i16 = dense<16> : vector<2xi64>, !llvm.ptr<270> = dense<32> : vector<4xi64>, i32 = dense<32> : vector<2xi64>, f80 = dense<128> : vector<2xi64>, !llvm.ptr = dense<64> : vector<4xi64>, i1 = dense<8> : vector<2xi64>, i64 = dense<64> : vector<2xi64>, i128 = dense<128> : vector<2xi64>, "dlti.endianness" = "little", "dlti.stack_alignment" = 128 : i64>} {
  cir.func private @free(!cir.ptr<!void>) extra(#fn_attr) loc(#loc189)
  cir.func internal private @badSink(%arg0: !cir.ptr<!s8i> loc(fused[#loc5, #loc6])) extra(#fn_attr1) {
    %0 = cir.alloca !cir.ptr<!s8i>, !cir.ptr<!cir.ptr<!s8i>>, ["data", init] {alignment = 8 : i64} loc(#loc191)
    cir.store %arg0, %0 : !cir.ptr<!s8i>, !cir.ptr<!cir.ptr<!s8i>> loc(#loc7)
    cir.scope {
      %1 = cir.alloca !u64i, !cir.ptr<!u64i>, ["i"] {alignment = 8 : i64} loc(#loc193)
      %2 = cir.alloca !cir.array<!s8i x 100>, !cir.ptr<!cir.array<!s8i x 100>>, ["source"] {alignment = 16 : i64} loc(#loc194)
      %3 = cir.cast(array_to_ptrdecay, %2 : !cir.ptr<!cir.array<!s8i x 100>>), !cir.ptr<!s8i> loc(#loc14)
      %4 = cir.cast(bitcast, %3 : !cir.ptr<!s8i>), !cir.ptr<!void> loc(#loc14)
      %5 = cir.const #cir.int<67> : !s32i loc(#loc15)
      %6 = cir.const #cir.int<100> : !s32i loc(#loc16)
      %7 = cir.const #cir.int<1> : !s32i loc(#loc17)
      %8 = cir.binop(sub, %6, %7) nsw : !s32i loc(#loc16)
      %9 = cir.cast(integral, %8 : !s32i), !u64i loc(#loc16)
      cir.libc.memset %9 bytes from %4 set to %5 : !cir.ptr<!void>, !s32i, !u64i loc(#loc195)
      %10 = cir.const #cir.int<0> : !s32i loc(#loc20)
      %11 = cir.cast(integral, %10 : !s32i), !s8i loc(#loc20)
      %12 = cir.const #cir.int<100> : !s32i loc(#loc21)
      %13 = cir.const #cir.int<1> : !s32i loc(#loc22)
      %14 = cir.binop(sub, %12, %13) nsw : !s32i loc(#loc21)
      %15 = cir.cast(array_to_ptrdecay, %2 : !cir.ptr<!cir.array<!s8i x 100>>), !cir.ptr<!s8i> loc(#loc23)
      %16 = cir.ptr_stride(%15 : !cir.ptr<!s8i>, %14 : !s32i), !cir.ptr<!s8i> loc(#loc23)
      cir.store %11, %16 : !s8i, !cir.ptr<!s8i> loc(#loc196)
      cir.scope {
        %28 = cir.const #cir.int<0> : !s32i loc(#loc26)
        %29 = cir.cast(integral, %28 : !s32i), !u64i loc(#loc26)
        cir.store %29, %1 : !u64i, !cir.ptr<!u64i> loc(#loc198)
        cir.for : cond {
          %30 = cir.load %1 : !cir.ptr<!u64i>, !u64i loc(#loc28)
          %31 = cir.const #cir.int<100> : !s32i loc(#loc29)
          %32 = cir.cast(integral, %31 : !s32i), !u64i loc(#loc29)
          %33 = cir.cmp(lt, %30, %32) : !u64i, !cir.bool loc(#loc199)
          cir.condition(%33) loc(#loc30)
        } body {
          cir.scope {
            %30 = cir.load %1 : !cir.ptr<!u64i>, !u64i loc(#loc32)
            %31 = cir.cast(array_to_ptrdecay, %2 : !cir.ptr<!cir.array<!s8i x 100>>), !cir.ptr<!s8i> loc(#loc33)
            %32 = cir.ptr_stride(%31 : !cir.ptr<!s8i>, %30 : !u64i), !cir.ptr<!s8i> loc(#loc33)
            %33 = cir.load %32 : !cir.ptr<!s8i>, !s8i loc(#loc33)
            %34 = cir.load %0 : !cir.ptr<!cir.ptr<!s8i>>, !cir.ptr<!s8i> loc(#loc34)
            %35 = cir.load %1 : !cir.ptr<!u64i>, !u64i loc(#loc35)
            %36 = cir.ptr_stride(%34 : !cir.ptr<!s8i>, %35 : !u64i), !cir.ptr<!s8i> loc(#loc36)
            cir.store %33, %36 : !s8i, !cir.ptr<!s8i> loc(#loc201)
          } loc(#loc200)
          cir.yield loc(#loc25)
        } step {
          %30 = cir.load %1 : !cir.ptr<!u64i>, !u64i loc(#loc38)
          %31 = cir.unary(inc, %30) : !u64i, !u64i loc(#loc39)
          cir.store %31, %1 : !u64i, !cir.ptr<!u64i> loc(#loc202)
          cir.yield loc(#loc197)
        } loc(#loc197)
      } loc(#loc197)
      %17 = cir.const #cir.int<0> : !s32i loc(#loc40)
      %18 = cir.cast(integral, %17 : !s32i), !s8i loc(#loc40)
      %19 = cir.load %0 : !cir.ptr<!cir.ptr<!s8i>>, !cir.ptr<!s8i> loc(#loc41)
      %20 = cir.const #cir.int<100> : !s32i loc(#loc42)
      %21 = cir.const #cir.int<1> : !s32i loc(#loc43)
      %22 = cir.binop(sub, %20, %21) nsw : !s32i loc(#loc42)
      %23 = cir.ptr_stride(%19 : !cir.ptr<!s8i>, %22 : !s32i), !cir.ptr<!s8i> loc(#loc44)
      cir.store %18, %23 : !s8i, !cir.ptr<!s8i> loc(#loc203)
      %24 = cir.load %0 : !cir.ptr<!cir.ptr<!s8i>>, !cir.ptr<!s8i> loc(#loc45)
      cir.call @printLine(%24) : (!cir.ptr<!s8i>) -> () loc(#loc46)
      %25 = cir.get_global @free : !cir.ptr<!cir.func<!void (!cir.ptr<!void>)>> loc(#loc47)
      %26 = cir.load %0 : !cir.ptr<!cir.ptr<!s8i>>, !cir.ptr<!s8i> loc(#loc48)
      %27 = cir.cast(bitcast, %26 : !cir.ptr<!s8i>), !cir.ptr<!void> loc(#loc48)
      cir.call @free(%27) : (!cir.ptr<!void>) -> () extra(#fn_attr) loc(#loc47)
    } loc(#loc192)
    cir.return loc(#loc4)
  } loc(#loc190)
  cir.func private @malloc(!u64i) -> !cir.ptr<!void> extra(#fn_attr) loc(#loc204)
  cir.func private @exit(!s32i) extra(#fn_attr) loc(#loc205)
  cir.func no_proto @CWE122_Heap_Based_Buffer_Overflow__c_CWE805_char_loop_44_bad() extra(#fn_attr1) {
    %0 = cir.alloca !cir.ptr<!s8i>, !cir.ptr<!cir.ptr<!s8i>>, ["data"] {alignment = 8 : i64} loc(#loc207)
    %1 = cir.alloca !cir.ptr<!cir.func<!void (!cir.ptr<!s8i>)>>, !cir.ptr<!cir.ptr<!cir.func<!void (!cir.ptr<!s8i>)>>>, ["funcPtr", init] {alignment = 8 : i64} loc(#loc208)
    %2 = cir.get_global @badSink : !cir.ptr<!cir.func<!void (!cir.ptr<!s8i>)>> loc(#loc58)
    cir.store %2, %1 : !cir.ptr<!cir.func<!void (!cir.ptr<!s8i>)>>, !cir.ptr<!cir.ptr<!cir.func<!void (!cir.ptr<!s8i>)>>> loc(#loc208)
    %3 = cir.const #cir.ptr<null> : !cir.ptr<!s8i> loc(#loc59)
    cir.store %3, %0 : !cir.ptr<!s8i>, !cir.ptr<!cir.ptr<!s8i>> loc(#loc209)
    %4 = cir.get_global @malloc : !cir.ptr<!cir.func<!cir.ptr<!void> (!u64i)>> loc(#loc61)
    %5 = cir.const #cir.int<50> : !s32i loc(#loc62)
    %6 = cir.cast(integral, %5 : !s32i), !u64i loc(#loc62)
    %7 = cir.const #cir.int<1> : !u64i loc(#loc210)
    %8 = cir.binop(mul, %6, %7) : !u64i loc(#loc211)
    %9 = cir.call @malloc(%8) : (!u64i) -> !cir.ptr<!void> extra(#fn_attr) loc(#loc61)
    %10 = cir.cast(bitcast, %9 : !cir.ptr<!void>), !cir.ptr<!s8i> loc(#loc212)
    cir.store %10, %0 : !cir.ptr<!s8i>, !cir.ptr<!cir.ptr<!s8i>> loc(#loc213)
    cir.scope {
      %18 = cir.load %0 : !cir.ptr<!cir.ptr<!s8i>>, !cir.ptr<!s8i> loc(#loc69)
      %19 = cir.const #cir.ptr<null> : !cir.ptr<!void> loc(#loc70)
      %20 = cir.cast(bitcast, %19 : !cir.ptr<!void>), !cir.ptr<!s8i> loc(#loc70)
      %21 = cir.cmp(eq, %18, %20) : !cir.ptr<!s8i>, !cir.bool loc(#loc215)
      cir.if %21 {
        %22 = cir.get_global @exit : !cir.ptr<!cir.func<!void (!s32i)>> loc(#loc72)
        %23 = cir.const #cir.int<1> : !s32i loc(#loc73)
        %24 = cir.unary(minus, %23) : !s32i, !s32i loc(#loc74)
        cir.call @exit(%24) : (!s32i) -> () extra(#fn_attr) loc(#loc72)
      } loc(#loc216)
    } loc(#loc214)
    %11 = cir.const #cir.int<0> : !s32i loc(#loc75)
    %12 = cir.cast(integral, %11 : !s32i), !s8i loc(#loc75)
    %13 = cir.load %0 : !cir.ptr<!cir.ptr<!s8i>>, !cir.ptr<!s8i> loc(#loc76)
    %14 = cir.const #cir.int<0> : !s32i loc(#loc77)
    %15 = cir.ptr_stride(%13 : !cir.ptr<!s8i>, %14 : !s32i), !cir.ptr<!s8i> loc(#loc78)
    cir.store %12, %15 : !s8i, !cir.ptr<!s8i> loc(#loc217)
    %16 = cir.load %1 : !cir.ptr<!cir.ptr<!cir.func<!void (!cir.ptr<!s8i>)>>>, !cir.ptr<!cir.func<!void (!cir.ptr<!s8i>)>> loc(#loc79)
    %17 = cir.load %0 : !cir.ptr<!cir.ptr<!s8i>>, !cir.ptr<!s8i> loc(#loc80)
    cir.call %16(%17) : (!cir.ptr<!cir.func<!void (!cir.ptr<!s8i>)>>, !cir.ptr<!s8i>) -> () loc(#loc79)
    cir.return loc(#loc54)
  } loc(#loc206)
  cir.func no_proto @CWE122_Heap_Based_Buffer_Overflow__c_CWE805_char_loop_44_good() extra(#fn_attr1) {
    %0 = cir.get_global @goodG2B : !cir.ptr<!cir.func<!void ()>> loc(#loc219)
    cir.call %0() : (!cir.ptr<!cir.func<!void ()>>) -> () loc(#loc83)
    cir.return loc(#loc82)
  } loc(#loc218)
  cir.func private @srand(!u32i) extra(#fn_attr) loc(#loc220)
  cir.func private @time(!cir.ptr<!s64i>) -> !s64i extra(#fn_attr) loc(#loc221)
  cir.func private @printLine(!cir.ptr<!s8i>) loc(#loc222)
  cir.global "private" constant cir_private dsolocal @".str" = #cir.const_array<"Calling good()...\00" : !cir.array<!s8i x 18>> : !cir.array<!s8i x 18> {alignment = 1 : i64} loc(#loc91)
  cir.global "private" constant cir_private dsolocal @".str.1" = #cir.const_array<"Finished good()\00" : !cir.array<!s8i x 16>> : !cir.array<!s8i x 16> {alignment = 1 : i64} loc(#loc92)
  cir.global "private" constant cir_private dsolocal @".str.2" = #cir.const_array<"Calling bad()...\00" : !cir.array<!s8i x 17>> : !cir.array<!s8i x 17> {alignment = 1 : i64} loc(#loc93)
  cir.global "private" constant cir_private dsolocal @".str.3" = #cir.const_array<"Finished bad()\00" : !cir.array<!s8i x 15>> : !cir.array<!s8i x 15> {alignment = 1 : i64} loc(#loc94)
  cir.func @main(%arg0: !s32i loc(fused[#loc97, #loc98]), %arg1: !cir.ptr<!cir.ptr<!s8i>> loc(fused[#loc99, #loc100])) -> !s32i extra(#fn_attr1) {
    %0 = cir.alloca !s32i, !cir.ptr<!s32i>, ["argc", init] {alignment = 4 : i64} loc(#loc224)
    %1 = cir.alloca !cir.ptr<!cir.ptr<!s8i>>, !cir.ptr<!cir.ptr<!cir.ptr<!s8i>>>, ["argv", init] {alignment = 8 : i64} loc(#loc225)
    %2 = cir.alloca !s32i, !cir.ptr<!s32i>, ["__retval"] {alignment = 4 : i64} loc(#loc96)
    cir.store %arg0, %0 : !s32i, !cir.ptr<!s32i> loc(#loc101)
    cir.store %arg1, %1 : !cir.ptr<!cir.ptr<!s8i>>, !cir.ptr<!cir.ptr<!cir.ptr<!s8i>>> loc(#loc101)
    %3 = cir.const #cir.ptr<null> : !cir.ptr<!s64i> loc(#loc102)
    %4 = cir.call @time(%3) : (!cir.ptr<!s64i>) -> !s64i extra(#fn_attr) loc(#loc103)
    %5 = cir.cast(integral, %4 : !s64i), !u32i loc(#loc103)
    cir.call @srand(%5) : (!u32i) -> () extra(#fn_attr) loc(#loc104)
    %6 = cir.get_global @".str" : !cir.ptr<!cir.array<!s8i x 18>> loc(#loc91)
    %7 = cir.cast(array_to_ptrdecay, %6 : !cir.ptr<!cir.array<!s8i x 18>>), !cir.ptr<!s8i> loc(#loc91)
    cir.call @printLine(%7) : (!cir.ptr<!s8i>) -> () loc(#loc105)
    %8 = cir.get_global @CWE122_Heap_Based_Buffer_Overflow__c_CWE805_char_loop_44_good : !cir.ptr<!cir.func<!void ()>> loc(#loc226)
    cir.call @CWE122_Heap_Based_Buffer_Overflow__c_CWE805_char_loop_44_good() : () -> () loc(#loc106)
    %9 = cir.get_global @".str.1" : !cir.ptr<!cir.array<!s8i x 16>> loc(#loc92)
    %10 = cir.cast(array_to_ptrdecay, %9 : !cir.ptr<!cir.array<!s8i x 16>>), !cir.ptr<!s8i> loc(#loc92)
    cir.call @printLine(%10) : (!cir.ptr<!s8i>) -> () loc(#loc108)
    %11 = cir.get_global @".str.2" : !cir.ptr<!cir.array<!s8i x 17>> loc(#loc93)
    %12 = cir.cast(array_to_ptrdecay, %11 : !cir.ptr<!cir.array<!s8i x 17>>), !cir.ptr<!s8i> loc(#loc93)
    cir.call @printLine(%12) : (!cir.ptr<!s8i>) -> () loc(#loc109)
    %13 = cir.get_global @CWE122_Heap_Based_Buffer_Overflow__c_CWE805_char_loop_44_bad : !cir.ptr<!cir.func<!void ()>> loc(#loc227)
    cir.call @CWE122_Heap_Based_Buffer_Overflow__c_CWE805_char_loop_44_bad() : () -> () loc(#loc110)
    %14 = cir.get_global @".str.3" : !cir.ptr<!cir.array<!s8i x 15>> loc(#loc94)
    %15 = cir.cast(array_to_ptrdecay, %14 : !cir.ptr<!cir.array<!s8i x 15>>), !cir.ptr<!s8i> loc(#loc94)
    cir.call @printLine(%15) : (!cir.ptr<!s8i>) -> () loc(#loc112)
    %16 = cir.const #cir.int<0> : !s32i loc(#loc113)
    cir.store %16, %2 : !s32i, !cir.ptr<!s32i> loc(#loc228)
    %17 = cir.load %2 : !cir.ptr<!s32i>, !s32i loc(#loc228)
    cir.return %17 : !s32i loc(#loc228)
  } loc(#loc223)
  cir.func internal private @goodG2BSink(%arg0: !cir.ptr<!s8i> loc(fused[#loc117, #loc118])) extra(#fn_attr1) {
    %0 = cir.alloca !cir.ptr<!s8i>, !cir.ptr<!cir.ptr<!s8i>>, ["data", init] {alignment = 8 : i64} loc(#loc230)
    cir.store %arg0, %0 : !cir.ptr<!s8i>, !cir.ptr<!cir.ptr<!s8i>> loc(#loc119)
    cir.scope {
      %1 = cir.alloca !u64i, !cir.ptr<!u64i>, ["i"] {alignment = 8 : i64} loc(#loc232)
      %2 = cir.alloca !cir.array<!s8i x 100>, !cir.ptr<!cir.array<!s8i x 100>>, ["source"] {alignment = 16 : i64} loc(#loc233)
      %3 = cir.cast(array_to_ptrdecay, %2 : !cir.ptr<!cir.array<!s8i x 100>>), !cir.ptr<!s8i> loc(#loc126)
      %4 = cir.cast(bitcast, %3 : !cir.ptr<!s8i>), !cir.ptr<!void> loc(#loc126)
      %5 = cir.const #cir.int<67> : !s32i loc(#loc127)
      %6 = cir.const #cir.int<100> : !s32i loc(#loc128)
      %7 = cir.const #cir.int<1> : !s32i loc(#loc129)
      %8 = cir.binop(sub, %6, %7) nsw : !s32i loc(#loc128)
      %9 = cir.cast(integral, %8 : !s32i), !u64i loc(#loc128)
      cir.libc.memset %9 bytes from %4 set to %5 : !cir.ptr<!void>, !s32i, !u64i loc(#loc234)
      %10 = cir.const #cir.int<0> : !s32i loc(#loc132)
      %11 = cir.cast(integral, %10 : !s32i), !s8i loc(#loc132)
      %12 = cir.const #cir.int<100> : !s32i loc(#loc133)
      %13 = cir.const #cir.int<1> : !s32i loc(#loc134)
      %14 = cir.binop(sub, %12, %13) nsw : !s32i loc(#loc133)
      %15 = cir.cast(array_to_ptrdecay, %2 : !cir.ptr<!cir.array<!s8i x 100>>), !cir.ptr<!s8i> loc(#loc135)
      %16 = cir.ptr_stride(%15 : !cir.ptr<!s8i>, %14 : !s32i), !cir.ptr<!s8i> loc(#loc135)
      cir.store %11, %16 : !s8i, !cir.ptr<!s8i> loc(#loc235)
      cir.scope {
        %28 = cir.const #cir.int<0> : !s32i loc(#loc138)
        %29 = cir.cast(integral, %28 : !s32i), !u64i loc(#loc138)
        cir.store %29, %1 : !u64i, !cir.ptr<!u64i> loc(#loc237)
        cir.for : cond {
          %30 = cir.load %1 : !cir.ptr<!u64i>, !u64i loc(#loc140)
          %31 = cir.const #cir.int<100> : !s32i loc(#loc141)
          %32 = cir.cast(integral, %31 : !s32i), !u64i loc(#loc141)
          %33 = cir.cmp(lt, %30, %32) : !u64i, !cir.bool loc(#loc238)
          cir.condition(%33) loc(#loc142)
        } body {
          cir.scope {
            %30 = cir.load %1 : !cir.ptr<!u64i>, !u64i loc(#loc144)
            %31 = cir.cast(array_to_ptrdecay, %2 : !cir.ptr<!cir.array<!s8i x 100>>), !cir.ptr<!s8i> loc(#loc145)
            %32 = cir.ptr_stride(%31 : !cir.ptr<!s8i>, %30 : !u64i), !cir.ptr<!s8i> loc(#loc145)
            %33 = cir.load %32 : !cir.ptr<!s8i>, !s8i loc(#loc145)
            %34 = cir.load %0 : !cir.ptr<!cir.ptr<!s8i>>, !cir.ptr<!s8i> loc(#loc146)
            %35 = cir.load %1 : !cir.ptr<!u64i>, !u64i loc(#loc147)
            %36 = cir.ptr_stride(%34 : !cir.ptr<!s8i>, %35 : !u64i), !cir.ptr<!s8i> loc(#loc148)
            cir.store %33, %36 : !s8i, !cir.ptr<!s8i> loc(#loc240)
          } loc(#loc239)
          cir.yield loc(#loc137)
        } step {
          %30 = cir.load %1 : !cir.ptr<!u64i>, !u64i loc(#loc150)
          %31 = cir.unary(inc, %30) : !u64i, !u64i loc(#loc151)
          cir.store %31, %1 : !u64i, !cir.ptr<!u64i> loc(#loc241)
          cir.yield loc(#loc236)
        } loc(#loc236)
      } loc(#loc236)
      %17 = cir.const #cir.int<0> : !s32i loc(#loc152)
      %18 = cir.cast(integral, %17 : !s32i), !s8i loc(#loc152)
      %19 = cir.load %0 : !cir.ptr<!cir.ptr<!s8i>>, !cir.ptr<!s8i> loc(#loc153)
      %20 = cir.const #cir.int<100> : !s32i loc(#loc154)
      %21 = cir.const #cir.int<1> : !s32i loc(#loc155)
      %22 = cir.binop(sub, %20, %21) nsw : !s32i loc(#loc154)
      %23 = cir.ptr_stride(%19 : !cir.ptr<!s8i>, %22 : !s32i), !cir.ptr<!s8i> loc(#loc156)
      cir.store %18, %23 : !s8i, !cir.ptr<!s8i> loc(#loc242)
      %24 = cir.load %0 : !cir.ptr<!cir.ptr<!s8i>>, !cir.ptr<!s8i> loc(#loc157)
      cir.call @printLine(%24) : (!cir.ptr<!s8i>) -> () loc(#loc158)
      %25 = cir.get_global @free : !cir.ptr<!cir.func<!void (!cir.ptr<!void>)>> loc(#loc159)
      %26 = cir.load %0 : !cir.ptr<!cir.ptr<!s8i>>, !cir.ptr<!s8i> loc(#loc160)
      %27 = cir.cast(bitcast, %26 : !cir.ptr<!s8i>), !cir.ptr<!void> loc(#loc160)
      cir.call @free(%27) : (!cir.ptr<!void>) -> () extra(#fn_attr) loc(#loc159)
    } loc(#loc231)
    cir.return loc(#loc116)
  } loc(#loc229)
  cir.func no_proto internal private @goodG2B() extra(#fn_attr1) {
    %0 = cir.alloca !cir.ptr<!s8i>, !cir.ptr<!cir.ptr<!s8i>>, ["data"] {alignment = 8 : i64} loc(#loc244)
    %1 = cir.alloca !cir.ptr<!cir.func<!void (!cir.ptr<!s8i>)>>, !cir.ptr<!cir.ptr<!cir.func<!void (!cir.ptr<!s8i>)>>>, ["funcPtr", init] {alignment = 8 : i64} loc(#loc245)
    %2 = cir.get_global @goodG2BSink : !cir.ptr<!cir.func<!void (!cir.ptr<!s8i>)>> loc(#loc166)
    cir.store %2, %1 : !cir.ptr<!cir.func<!void (!cir.ptr<!s8i>)>>, !cir.ptr<!cir.ptr<!cir.func<!void (!cir.ptr<!s8i>)>>> loc(#loc245)
    %3 = cir.const #cir.ptr<null> : !cir.ptr<!s8i> loc(#loc167)
    cir.store %3, %0 : !cir.ptr<!s8i>, !cir.ptr<!cir.ptr<!s8i>> loc(#loc246)
    %4 = cir.get_global @malloc : !cir.ptr<!cir.func<!cir.ptr<!void> (!u64i)>> loc(#loc169)
    %5 = cir.const #cir.int<100> : !s32i loc(#loc170)
    %6 = cir.cast(integral, %5 : !s32i), !u64i loc(#loc170)
    %7 = cir.const #cir.int<1> : !u64i loc(#loc247)
    %8 = cir.binop(mul, %6, %7) : !u64i loc(#loc248)
    %9 = cir.call @malloc(%8) : (!u64i) -> !cir.ptr<!void> extra(#fn_attr) loc(#loc169)
    %10 = cir.cast(bitcast, %9 : !cir.ptr<!void>), !cir.ptr<!s8i> loc(#loc249)
    cir.store %10, %0 : !cir.ptr<!s8i>, !cir.ptr<!cir.ptr<!s8i>> loc(#loc250)
    cir.scope {
      %18 = cir.load %0 : !cir.ptr<!cir.ptr<!s8i>>, !cir.ptr<!s8i> loc(#loc177)
      %19 = cir.const #cir.ptr<null> : !cir.ptr<!void> loc(#loc178)
      %20 = cir.cast(bitcast, %19 : !cir.ptr<!void>), !cir.ptr<!s8i> loc(#loc178)
      %21 = cir.cmp(eq, %18, %20) : !cir.ptr<!s8i>, !cir.bool loc(#loc252)
      cir.if %21 {
        %22 = cir.get_global @exit : !cir.ptr<!cir.func<!void (!s32i)>> loc(#loc180)
        %23 = cir.const #cir.int<1> : !s32i loc(#loc181)
        %24 = cir.unary(minus, %23) : !s32i, !s32i loc(#loc182)
        cir.call @exit(%24) : (!s32i) -> () extra(#fn_attr) loc(#loc180)
      } loc(#loc253)
    } loc(#loc251)
    %11 = cir.const #cir.int<0> : !s32i loc(#loc183)
    %12 = cir.cast(integral, %11 : !s32i), !s8i loc(#loc183)
    %13 = cir.load %0 : !cir.ptr<!cir.ptr<!s8i>>, !cir.ptr<!s8i> loc(#loc184)
    %14 = cir.const #cir.int<0> : !s32i loc(#loc185)
    %15 = cir.ptr_stride(%13 : !cir.ptr<!s8i>, %14 : !s32i), !cir.ptr<!s8i> loc(#loc186)
    cir.store %12, %15 : !s8i, !cir.ptr<!s8i> loc(#loc254)
    %16 = cir.load %1 : !cir.ptr<!cir.ptr<!cir.func<!void (!cir.ptr<!s8i>)>>>, !cir.ptr<!cir.func<!void (!cir.ptr<!s8i>)>> loc(#loc187)
    %17 = cir.load %0 : !cir.ptr<!cir.ptr<!s8i>>, !cir.ptr<!s8i> loc(#loc188)
    cir.call %16(%17) : (!cir.ptr<!cir.func<!void (!cir.ptr<!s8i>)>>, !cir.ptr<!s8i>) -> () loc(#loc187)
    cir.return loc(#loc162)
  } loc(#loc243)
} loc(#loc)
#loc = loc("/home/ladisgin/git_proj/juliet-c/testcases/CWE122_Heap_Based_Buffer_Overflow/s07/CWE122_Heap_Based_Buffer_Overflow__c_CWE805_char_loop_44.c":0:0)
#loc1 = loc("/usr/include/stdlib.h":687:1)
#loc2 = loc("/usr/include/stdlib.h":687:32)
#loc3 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_char_loop_44.c":23:1)
#loc4 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_char_loop_44.c":39:1)
#loc7 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_char_loop_44.c":24:1)
#loc8 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_char_loop_44.c":25:5)
#loc9 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_char_loop_44.c":38:5)
#loc10 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_char_loop_44.c":26:9)
#loc11 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_char_loop_44.c":26:16)
#loc12 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_char_loop_44.c":27:9)
#loc13 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_char_loop_44.c":27:24)
#loc14 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_char_loop_44.c":28:16)
#loc15 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_char_loop_44.c":28:24)
#loc16 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_char_loop_44.c":28:29)
#loc17 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_char_loop_44.c":28:33)
#loc18 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_char_loop_44.c":28:9)
#loc19 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_char_loop_44.c":28:34)
#loc20 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_char_loop_44.c":29:25)
#loc21 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_char_loop_44.c":29:16)
#loc22 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_char_loop_44.c":29:20)
#loc23 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_char_loop_44.c":29:9)
#loc24 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_char_loop_44.c":31:9)
#loc25 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_char_loop_44.c":34:9)
#loc26 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_char_loop_44.c":31:18)
#loc27 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_char_loop_44.c":31:14)
#loc28 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_char_loop_44.c":31:21)
#loc29 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_char_loop_44.c":31:25)
#loc30 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_char_loop_44.c":31:23)
#loc31 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_char_loop_44.c":32:9)
#loc32 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_char_loop_44.c":33:30)
#loc33 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_char_loop_44.c":33:23)
#loc34 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_char_loop_44.c":33:13)
#loc35 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_char_loop_44.c":33:18)
#loc36 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_char_loop_44.c":33:19)
#loc37 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_char_loop_44.c":33:31)
#loc38 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_char_loop_44.c":31:31)
#loc39 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_char_loop_44.c":31:30)
#loc40 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_char_loop_44.c":35:23)
#loc41 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_char_loop_44.c":35:9)
#loc42 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_char_loop_44.c":35:14)
#loc43 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_char_loop_44.c":35:18)
#loc44 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_char_loop_44.c":35:19)
#loc45 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_char_loop_44.c":36:19)
#loc46 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_char_loop_44.c":36:9)
#loc47 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_char_loop_44.c":37:9)
#loc48 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_char_loop_44.c":37:14)
#loc49 = loc("/usr/include/stdlib.h":672:1)
#loc50 = loc("/usr/include/stdlib.h":672:45)
#loc51 = loc("/usr/include/stdlib.h":756:1)
#loc52 = loc("/usr/include/stdlib.h":756:70)
#loc53 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_char_loop_44.c":41:1)
#loc54 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_char_loop_44.c":53:1)
#loc55 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_char_loop_44.c":43:5)
#loc56 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_char_loop_44.c":43:12)
#loc57 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_char_loop_44.c":45:5)
#loc58 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_char_loop_44.c":45:32)
#loc59 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_char_loop_44.c":46:12)
#loc60 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_char_loop_44.c":46:5)
#loc61 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_char_loop_44.c":48:20)
#loc62 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_char_loop_44.c":48:27)
#loc63 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_char_loop_44.c":48:30)
#loc64 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_char_loop_44.c":48:41)
#loc65 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_char_loop_44.c":48:42)
#loc66 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_char_loop_44.c":48:5)
#loc67 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_char_loop_44.c":49:5)
#loc68 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_char_loop_44.c":49:33)
#loc69 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_char_loop_44.c":49:9)
#loc70 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_char_loop_44.c":49:17)
#loc71 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_char_loop_44.c":49:23)
#loc72 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_char_loop_44.c":49:24)
#loc73 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_char_loop_44.c":49:30)
#loc74 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_char_loop_44.c":49:29)
#loc75 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_char_loop_44.c":50:15)
#loc76 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_char_loop_44.c":50:5)
#loc77 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_char_loop_44.c":50:10)
#loc78 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_char_loop_44.c":50:11)
#loc79 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_char_loop_44.c":52:5)
#loc80 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_char_loop_44.c":52:13)
#loc81 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_char_loop_44.c":90:1)
#loc82 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_char_loop_44.c":93:1)
#loc83 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_char_loop_44.c":92:5)
#loc84 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_char_loop_44.c":92:13)
#loc85 = loc("/usr/include/stdlib.h":575:1)
#loc86 = loc("/usr/include/stdlib.h":575:41)
#loc87 = loc("/usr/include/time.h":76:1)
#loc88 = loc("/usr/include/time.h":76:38)
#loc89 = loc("../../../testcasesupport/std_testcase_io.h":14:1)
#loc90 = loc("../../../testcasesupport/std_testcase_io.h":14:33)
#loc91 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_char_loop_44.c":109:15)
#loc92 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_char_loop_44.c":111:15)
#loc93 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_char_loop_44.c":114:15)
#loc94 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_char_loop_44.c":116:15)
#loc95 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_char_loop_44.c":104:1)
#loc96 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_char_loop_44.c":119:1)
#loc101 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_char_loop_44.c":105:1)
#loc102 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_char_loop_44.c":107:27)
#loc103 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_char_loop_44.c":107:22)
#loc104 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_char_loop_44.c":107:5)
#loc105 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_char_loop_44.c":109:5)
#loc106 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_char_loop_44.c":110:5)
#loc107 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_char_loop_44.c":110:67)
#loc108 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_char_loop_44.c":111:5)
#loc109 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_char_loop_44.c":114:5)
#loc110 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_char_loop_44.c":115:5)
#loc111 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_char_loop_44.c":115:66)
#loc112 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_char_loop_44.c":116:5)
#loc113 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_char_loop_44.c":118:12)
#loc114 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_char_loop_44.c":118:5)
#loc115 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_char_loop_44.c":60:1)
#loc116 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_char_loop_44.c":76:1)
#loc119 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_char_loop_44.c":61:1)
#loc120 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_char_loop_44.c":62:5)
#loc121 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_char_loop_44.c":75:5)
#loc122 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_char_loop_44.c":63:9)
#loc123 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_char_loop_44.c":63:16)
#loc124 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_char_loop_44.c":64:9)
#loc125 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_char_loop_44.c":64:24)
#loc126 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_char_loop_44.c":65:16)
#loc127 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_char_loop_44.c":65:24)
#loc128 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_char_loop_44.c":65:29)
#loc129 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_char_loop_44.c":65:33)
#loc130 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_char_loop_44.c":65:9)
#loc131 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_char_loop_44.c":65:34)
#loc132 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_char_loop_44.c":66:25)
#loc133 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_char_loop_44.c":66:16)
#loc134 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_char_loop_44.c":66:20)
#loc135 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_char_loop_44.c":66:9)
#loc136 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_char_loop_44.c":68:9)
#loc137 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_char_loop_44.c":71:9)
#loc138 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_char_loop_44.c":68:18)
#loc139 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_char_loop_44.c":68:14)
#loc140 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_char_loop_44.c":68:21)
#loc141 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_char_loop_44.c":68:25)
#loc142 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_char_loop_44.c":68:23)
#loc143 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_char_loop_44.c":69:9)
#loc144 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_char_loop_44.c":70:30)
#loc145 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_char_loop_44.c":70:23)
#loc146 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_char_loop_44.c":70:13)
#loc147 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_char_loop_44.c":70:18)
#loc148 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_char_loop_44.c":70:19)
#loc149 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_char_loop_44.c":70:31)
#loc150 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_char_loop_44.c":68:31)
#loc151 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_char_loop_44.c":68:30)
#loc152 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_char_loop_44.c":72:23)
#loc153 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_char_loop_44.c":72:9)
#loc154 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_char_loop_44.c":72:14)
#loc155 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_char_loop_44.c":72:18)
#loc156 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_char_loop_44.c":72:19)
#loc157 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_char_loop_44.c":73:19)
#loc158 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_char_loop_44.c":73:9)
#loc159 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_char_loop_44.c":74:9)
#loc160 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_char_loop_44.c":74:14)
#loc161 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_char_loop_44.c":78:1)
#loc162 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_char_loop_44.c":88:1)
#loc163 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_char_loop_44.c":80:5)
#loc164 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_char_loop_44.c":80:12)
#loc165 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_char_loop_44.c":81:5)
#loc166 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_char_loop_44.c":81:32)
#loc167 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_char_loop_44.c":82:12)
#loc168 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_char_loop_44.c":82:5)
#loc169 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_char_loop_44.c":84:20)
#loc170 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_char_loop_44.c":84:27)
#loc171 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_char_loop_44.c":84:31)
#loc172 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_char_loop_44.c":84:42)
#loc173 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_char_loop_44.c":84:43)
#loc174 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_char_loop_44.c":84:5)
#loc175 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_char_loop_44.c":85:5)
#loc176 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_char_loop_44.c":85:33)
#loc177 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_char_loop_44.c":85:9)
#loc178 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_char_loop_44.c":85:17)
#loc179 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_char_loop_44.c":85:23)
#loc180 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_char_loop_44.c":85:24)
#loc181 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_char_loop_44.c":85:30)
#loc182 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_char_loop_44.c":85:29)
#loc183 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_char_loop_44.c":86:15)
#loc184 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_char_loop_44.c":86:5)
#loc185 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_char_loop_44.c":86:10)
#loc186 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_char_loop_44.c":86:11)
#loc187 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_char_loop_44.c":87:5)
#loc188 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_char_loop_44.c":87:13)
#loc189 = loc(fused[#loc1, #loc2])
#loc190 = loc(fused[#loc3, #loc4])
#loc192 = loc(fused[#loc8, #loc9])
#loc193 = loc(fused[#loc10, #loc11])
#loc194 = loc(fused[#loc12, #loc13])
#loc195 = loc(fused[#loc18, #loc19])
#loc196 = loc(fused[#loc23, #loc20])
#loc197 = loc(fused[#loc24, #loc25])
#loc198 = loc(fused[#loc27, #loc26])
#loc199 = loc(fused[#loc28, #loc29])
#loc200 = loc(fused[#loc31, #loc25])
#loc201 = loc(fused[#loc34, #loc37])
#loc202 = loc(fused[#loc39, #loc38])
#loc203 = loc(fused[#loc41, #loc40])
#loc204 = loc(fused[#loc49, #loc50])
#loc205 = loc(fused[#loc51, #loc52])
#loc206 = loc(fused[#loc53, #loc54])
#loc207 = loc(fused[#loc55, #loc56])
#loc208 = loc(fused[#loc57, #loc58])
#loc209 = loc(fused[#loc60, #loc59])
#loc210 = loc(fused[#loc63, #loc64])
#loc211 = loc(fused[#loc62, #loc64])
#loc212 = loc(fused[#loc61, #loc65])
#loc213 = loc(fused[#loc66, #loc65])
#loc214 = loc(fused[#loc67, #loc68])
#loc215 = loc(fused[#loc69, #loc70])
#loc216 = loc(fused[#loc71, #loc68])
#loc217 = loc(fused[#loc76, #loc75])
#loc218 = loc(fused[#loc81, #loc82])
#loc219 = loc(fused[#loc83, #loc84])
#loc220 = loc(fused[#loc85, #loc86])
#loc221 = loc(fused[#loc87, #loc88])
#loc222 = loc(fused[#loc89, #loc90])
#loc223 = loc(fused[#loc95, #loc96])
#loc226 = loc(fused[#loc106, #loc107])
#loc227 = loc(fused[#loc110, #loc111])
#loc228 = loc(fused[#loc114, #loc113])
#loc229 = loc(fused[#loc115, #loc116])
#loc231 = loc(fused[#loc120, #loc121])
#loc232 = loc(fused[#loc122, #loc123])
#loc233 = loc(fused[#loc124, #loc125])
#loc234 = loc(fused[#loc130, #loc131])
#loc235 = loc(fused[#loc135, #loc132])
#loc236 = loc(fused[#loc136, #loc137])
#loc237 = loc(fused[#loc139, #loc138])
#loc238 = loc(fused[#loc140, #loc141])
#loc239 = loc(fused[#loc143, #loc137])
#loc240 = loc(fused[#loc146, #loc149])
#loc241 = loc(fused[#loc151, #loc150])
#loc242 = loc(fused[#loc153, #loc152])
#loc243 = loc(fused[#loc161, #loc162])
#loc244 = loc(fused[#loc163, #loc164])
#loc245 = loc(fused[#loc165, #loc166])
#loc246 = loc(fused[#loc168, #loc167])
#loc247 = loc(fused[#loc171, #loc172])
#loc248 = loc(fused[#loc170, #loc172])
#loc249 = loc(fused[#loc169, #loc173])
#loc250 = loc(fused[#loc174, #loc173])
#loc251 = loc(fused[#loc175, #loc176])
#loc252 = loc(fused[#loc177, #loc178])
#loc253 = loc(fused[#loc179, #loc176])
#loc254 = loc(fused[#loc184, #loc183])
