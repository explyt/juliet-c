!s32i = !cir.int<s, 32>
!s8i = !cir.int<s, 8>
!u64i = !cir.int<u, 64>
#fn_attr = #cir<extra({nothrow = #cir.nothrow})>
#fn_attr1 = #cir<extra({inline = #cir.inline<no>, nothrow = #cir.nothrow, optnone = #cir.optnone, uwtable = #cir.uwtable<async>})>
module @"/workspaces/juliet-c/testcases/CWE253_Incorrect_Check_of_Function_Return_Value/CWE253_Incorrect_Check_of_Function_Return_Value__char_snprintf_05.c" attributes {cir.lang = #cir.lang<c>, cir.sob = #cir.signed_overflow_behavior<undefined>, cir.triple = "x86_64-unknown-linux-gnu", cir.type_size_info = #cir.type_size_info<char = 8, int = 32, size_t = 64>, cir.uwtable = #cir.uwtable<async>, dlti.dl_spec = #dlti.dl_spec<i16 = dense<16> : vector<2xi64>, i32 = dense<32> : vector<2xi64>, f16 = dense<16> : vector<2xi64>, !llvm.ptr = dense<64> : vector<4xi64>, i1 = dense<8> : vector<2xi64>, i8 = dense<8> : vector<2xi64>, i64 = dense<64> : vector<2xi64>, i128 = dense<128> : vector<2xi64>, f80 = dense<128> : vector<2xi64>, f128 = dense<128> : vector<2xi64>, !llvm.ptr<270> = dense<32> : vector<4xi64>, f64 = dense<64> : vector<2xi64>, !llvm.ptr<271> = dense<32> : vector<4xi64>, !llvm.ptr<272> = dense<64> : vector<4xi64>, "dlti.endianness" = "little", "dlti.mangling_mode" = "e", "dlti.stack_alignment" = 128 : i64>} {
  cir.global "private" internal dsolocal @staticTrue = #cir.int<1> : !s32i {alignment = 4 : i64} loc(#loc97)
  cir.func private @snprintf(!cir.ptr<!s8i>, !u64i, !cir.ptr<!s8i>, ...) -> !s32i extra(#fn_attr) loc(#loc98)
  cir.global "private" constant cir_private dsolocal @".str" = #cir.const_array<"%s\0A\00" : !cir.array<!s8i x 4>> : !cir.array<!s8i x 4> {alignment = 1 : i64} loc(#loc5)
  cir.global "private" constant cir_private dsolocal @".str.1" = #cir.const_array<"string\00" : !cir.array<!s8i x 7>> : !cir.array<!s8i x 7> {alignment = 1 : i64} loc(#loc6)
  cir.func private @printLine(!cir.ptr<!s8i>) loc(#loc99)
  cir.global "private" constant cir_private dsolocal @".str.2" = #cir.const_array<"snprintf failed!\00" : !cir.array<!s8i x 17>> : !cir.array<!s8i x 17> {alignment = 1 : i64} loc(#loc9)
  cir.func no_proto @CWE253_Incorrect_Check_of_Function_Return_Value__char_snprintf_05_bad() extra(#fn_attr1) {
    cir.scope {
      %0 = cir.get_global @staticTrue : !cir.ptr<!s32i> loc(#loc97)
      %1 = cir.load %0 : !cir.ptr<!s32i>, !s32i loc(#loc14)
      %2 = cir.cast(int_to_bool, %1 : !s32i), !cir.bool loc(#loc14)
      cir.if %2 {
        cir.scope {
          %3 = cir.alloca !cir.array<!s8i x 100>, !cir.ptr<!cir.array<!s8i x 100>>, ["dataBuffer"] {alignment = 16 : i64} loc(#loc104)
          %4 = cir.alloca !cir.ptr<!s8i>, !cir.ptr<!cir.ptr<!s8i>>, ["data", init] {alignment = 8 : i64} loc(#loc105)
          %5 = cir.const #cir.zero : !cir.array<!s8i x 100> loc(#loc104)
          cir.store %5, %3 : !cir.array<!s8i x 100>, !cir.ptr<!cir.array<!s8i x 100>> loc(#loc104)
          %6 = cir.cast(array_to_ptrdecay, %3 : !cir.ptr<!cir.array<!s8i x 100>>), !cir.ptr<!s8i> loc(#loc21)
          cir.store %6, %4 : !cir.ptr<!s8i>, !cir.ptr<!cir.ptr<!s8i>> loc(#loc105)
          cir.scope {
            %7 = cir.get_global @snprintf : !cir.ptr<!cir.func<(!cir.ptr<!s8i>, !u64i, !cir.ptr<!s8i>, ...) -> !s32i>> loc(#loc24)
            %8 = cir.load %4 : !cir.ptr<!cir.ptr<!s8i>>, !cir.ptr<!s8i> loc(#loc25)
            %9 = cir.const #cir.int<100> : !s32i loc(#loc26)
            %10 = cir.cast(integral, %9 : !s32i), !u64i loc(#loc26)
            %11 = cir.const #cir.int<6> : !u64i loc(#loc107)
            %12 = cir.binop(sub, %10, %11) : !u64i loc(#loc108)
            %13 = cir.const #cir.int<1> : !s32i loc(#loc29)
            %14 = cir.cast(integral, %13 : !s32i), !u64i loc(#loc29)
            %15 = cir.binop(sub, %12, %14) : !u64i loc(#loc109)
            %16 = cir.get_global @".str" : !cir.ptr<!cir.array<!s8i x 4>> loc(#loc5)
            %17 = cir.cast(array_to_ptrdecay, %16 : !cir.ptr<!cir.array<!s8i x 4>>), !cir.ptr<!s8i> loc(#loc5)
            %18 = cir.get_global @".str.1" : !cir.ptr<!cir.array<!s8i x 7>> loc(#loc6)
            %19 = cir.cast(array_to_ptrdecay, %18 : !cir.ptr<!cir.array<!s8i x 7>>), !cir.ptr<!s8i> loc(#loc6)
            %20 = cir.call @snprintf(%8, %15, %17, %19) : (!cir.ptr<!s8i>, !u64i, !cir.ptr<!s8i>, !cir.ptr<!s8i>) -> !s32i extra(#fn_attr) loc(#loc24)
            %21 = cir.const #cir.int<0> : !s32i loc(#loc30)
            %22 = cir.cmp(eq, %20, %21) : !s32i, !cir.bool loc(#loc110)
            cir.if %22 {
              %23 = cir.get_global @".str.2" : !cir.ptr<!cir.array<!s8i x 17>> loc(#loc9)
              %24 = cir.cast(array_to_ptrdecay, %23 : !cir.ptr<!cir.array<!s8i x 17>>), !cir.ptr<!s8i> loc(#loc9)
              cir.call @printLine(%24) : (!cir.ptr<!s8i>) -> () loc(#loc32)
            } loc(#loc111)
          } loc(#loc106)
        } loc(#loc103)
      } loc(#loc102)
    } loc(#loc101)
    cir.return loc(#loc11)
  } loc(#loc100)
  cir.func no_proto @CWE253_Incorrect_Check_of_Function_Return_Value__char_snprintf_05_good() extra(#fn_attr1) {
    %0 = cir.get_global @good1 : !cir.ptr<!cir.func<()>> loc(#loc113)
    cir.call %0() : (!cir.ptr<!cir.func<()>>) -> () loc(#loc35)
    %1 = cir.get_global @good2 : !cir.ptr<!cir.func<()>> loc(#loc114)
    cir.call %1() : (!cir.ptr<!cir.func<()>>) -> () loc(#loc37)
    cir.return loc(#loc34)
  } loc(#loc112)
  cir.global "private" internal dsolocal @staticFalse = #cir.int<0> : !s32i {alignment = 4 : i64} loc(#loc115)
  cir.global "private" constant cir_private dsolocal @".str.3" = #cir.const_array<"Benign, fixed string\00" : !cir.array<!s8i x 21>> : !cir.array<!s8i x 21> {alignment = 1 : i64} loc(#loc41)
  cir.func no_proto internal private @good1() extra(#fn_attr1) {
    cir.scope {
      %0 = cir.get_global @staticFalse : !cir.ptr<!s32i> loc(#loc115)
      %1 = cir.load %0 : !cir.ptr<!s32i>, !s32i loc(#loc46)
      %2 = cir.cast(int_to_bool, %1 : !s32i), !cir.bool loc(#loc46)
      cir.if %2 {
        %3 = cir.get_global @".str.3" : !cir.ptr<!cir.array<!s8i x 21>> loc(#loc41)
        %4 = cir.cast(array_to_ptrdecay, %3 : !cir.ptr<!cir.array<!s8i x 21>>), !cir.ptr<!s8i> loc(#loc41)
        cir.call @printLine(%4) : (!cir.ptr<!s8i>) -> () loc(#loc50)
      } else {
        cir.scope {
          %3 = cir.alloca !cir.array<!s8i x 100>, !cir.ptr<!cir.array<!s8i x 100>>, ["dataBuffer"] {alignment = 16 : i64} loc(#loc120)
          %4 = cir.alloca !cir.ptr<!s8i>, !cir.ptr<!cir.ptr<!s8i>>, ["data", init] {alignment = 8 : i64} loc(#loc121)
          %5 = cir.const #cir.zero : !cir.array<!s8i x 100> loc(#loc120)
          cir.store %5, %3 : !cir.array<!s8i x 100>, !cir.ptr<!cir.array<!s8i x 100>> loc(#loc120)
          %6 = cir.cast(array_to_ptrdecay, %3 : !cir.ptr<!cir.array<!s8i x 100>>), !cir.ptr<!s8i> loc(#loc56)
          cir.store %6, %4 : !cir.ptr<!s8i>, !cir.ptr<!cir.ptr<!s8i>> loc(#loc121)
          cir.scope {
            %7 = cir.get_global @snprintf : !cir.ptr<!cir.func<(!cir.ptr<!s8i>, !u64i, !cir.ptr<!s8i>, ...) -> !s32i>> loc(#loc59)
            %8 = cir.load %4 : !cir.ptr<!cir.ptr<!s8i>>, !cir.ptr<!s8i> loc(#loc60)
            %9 = cir.const #cir.int<100> : !s32i loc(#loc61)
            %10 = cir.cast(integral, %9 : !s32i), !u64i loc(#loc61)
            %11 = cir.const #cir.int<6> : !u64i loc(#loc123)
            %12 = cir.binop(sub, %10, %11) : !u64i loc(#loc124)
            %13 = cir.const #cir.int<1> : !s32i loc(#loc64)
            %14 = cir.cast(integral, %13 : !s32i), !u64i loc(#loc64)
            %15 = cir.binop(sub, %12, %14) : !u64i loc(#loc125)
            %16 = cir.get_global @".str" : !cir.ptr<!cir.array<!s8i x 4>> loc(#loc65)
            %17 = cir.cast(array_to_ptrdecay, %16 : !cir.ptr<!cir.array<!s8i x 4>>), !cir.ptr<!s8i> loc(#loc65)
            %18 = cir.get_global @".str.1" : !cir.ptr<!cir.array<!s8i x 7>> loc(#loc66)
            %19 = cir.cast(array_to_ptrdecay, %18 : !cir.ptr<!cir.array<!s8i x 7>>), !cir.ptr<!s8i> loc(#loc66)
            %20 = cir.call @snprintf(%8, %15, %17, %19) : (!cir.ptr<!s8i>, !u64i, !cir.ptr<!s8i>, !cir.ptr<!s8i>) -> !s32i extra(#fn_attr) loc(#loc59)
            %21 = cir.const #cir.int<0> : !s32i loc(#loc67)
            %22 = cir.cmp(lt, %20, %21) : !s32i, !cir.bool loc(#loc126)
            cir.if %22 {
              %23 = cir.get_global @".str.2" : !cir.ptr<!cir.array<!s8i x 17>> loc(#loc69)
              %24 = cir.cast(array_to_ptrdecay, %23 : !cir.ptr<!cir.array<!s8i x 17>>), !cir.ptr<!s8i> loc(#loc69)
              cir.call @printLine(%24) : (!cir.ptr<!s8i>) -> () loc(#loc70)
            } loc(#loc127)
          } loc(#loc122)
        } loc(#loc119)
      } loc(#loc118)
    } loc(#loc117)
    cir.return loc(#loc43)
  } loc(#loc116)
  cir.func no_proto internal private @good2() extra(#fn_attr1) {
    cir.scope {
      %0 = cir.get_global @staticTrue : !cir.ptr<!s32i> loc(#loc97)
      %1 = cir.load %0 : !cir.ptr<!s32i>, !s32i loc(#loc75)
      %2 = cir.cast(int_to_bool, %1 : !s32i), !cir.bool loc(#loc75)
      cir.if %2 {
        cir.scope {
          %3 = cir.alloca !cir.array<!s8i x 100>, !cir.ptr<!cir.array<!s8i x 100>>, ["dataBuffer"] {alignment = 16 : i64} loc(#loc132)
          %4 = cir.alloca !cir.ptr<!s8i>, !cir.ptr<!cir.ptr<!s8i>>, ["data", init] {alignment = 8 : i64} loc(#loc133)
          %5 = cir.const #cir.zero : !cir.array<!s8i x 100> loc(#loc132)
          cir.store %5, %3 : !cir.array<!s8i x 100>, !cir.ptr<!cir.array<!s8i x 100>> loc(#loc132)
          %6 = cir.cast(array_to_ptrdecay, %3 : !cir.ptr<!cir.array<!s8i x 100>>), !cir.ptr<!s8i> loc(#loc82)
          cir.store %6, %4 : !cir.ptr<!s8i>, !cir.ptr<!cir.ptr<!s8i>> loc(#loc133)
          cir.scope {
            %7 = cir.get_global @snprintf : !cir.ptr<!cir.func<(!cir.ptr<!s8i>, !u64i, !cir.ptr<!s8i>, ...) -> !s32i>> loc(#loc85)
            %8 = cir.load %4 : !cir.ptr<!cir.ptr<!s8i>>, !cir.ptr<!s8i> loc(#loc86)
            %9 = cir.const #cir.int<100> : !s32i loc(#loc87)
            %10 = cir.cast(integral, %9 : !s32i), !u64i loc(#loc87)
            %11 = cir.const #cir.int<6> : !u64i loc(#loc135)
            %12 = cir.binop(sub, %10, %11) : !u64i loc(#loc136)
            %13 = cir.const #cir.int<1> : !s32i loc(#loc90)
            %14 = cir.cast(integral, %13 : !s32i), !u64i loc(#loc90)
            %15 = cir.binop(sub, %12, %14) : !u64i loc(#loc137)
            %16 = cir.get_global @".str" : !cir.ptr<!cir.array<!s8i x 4>> loc(#loc91)
            %17 = cir.cast(array_to_ptrdecay, %16 : !cir.ptr<!cir.array<!s8i x 4>>), !cir.ptr<!s8i> loc(#loc91)
            %18 = cir.get_global @".str.1" : !cir.ptr<!cir.array<!s8i x 7>> loc(#loc92)
            %19 = cir.cast(array_to_ptrdecay, %18 : !cir.ptr<!cir.array<!s8i x 7>>), !cir.ptr<!s8i> loc(#loc92)
            %20 = cir.call @snprintf(%8, %15, %17, %19) : (!cir.ptr<!s8i>, !u64i, !cir.ptr<!s8i>, !cir.ptr<!s8i>) -> !s32i extra(#fn_attr) loc(#loc85)
            %21 = cir.const #cir.int<0> : !s32i loc(#loc93)
            %22 = cir.cmp(lt, %20, %21) : !s32i, !cir.bool loc(#loc138)
            cir.if %22 {
              %23 = cir.get_global @".str.2" : !cir.ptr<!cir.array<!s8i x 17>> loc(#loc95)
              %24 = cir.cast(array_to_ptrdecay, %23 : !cir.ptr<!cir.array<!s8i x 17>>), !cir.ptr<!s8i> loc(#loc95)
              cir.call @printLine(%24) : (!cir.ptr<!s8i>) -> () loc(#loc96)
            } loc(#loc139)
          } loc(#loc134)
        } loc(#loc131)
      } loc(#loc130)
    } loc(#loc129)
    cir.return loc(#loc72)
  } loc(#loc128)
} loc(#loc)
#loc = loc("/workspaces/juliet-c/testcases/CWE253_Incorrect_Check_of_Function_Return_Value/CWE253_Incorrect_Check_of_Function_Return_Value__char_snprintf_05.c":0:0)
#loc1 = loc("CWE253_Incorrect_Check_of_Function_Return_Value__char_snprintf_05.c":33:1)
#loc2 = loc("CWE253_Incorrect_Check_of_Function_Return_Value__char_snprintf_05.c":33:25)
#loc3 = loc("/usr/include/stdio.h":385:1)
#loc4 = loc("/usr/include/stdio.h":387:62)
#loc5 = loc("CWE253_Incorrect_Check_of_Function_Return_Value__char_snprintf_05.c":49:57)
#loc6 = loc("CWE253_Incorrect_Check_of_Function_Return_Value__char_snprintf_05.c":49:65)
#loc7 = loc("../../testcasesupport/std_testcase_io.h":14:1)
#loc8 = loc("../../testcasesupport/std_testcase_io.h":14:33)
#loc9 = loc("CWE253_Incorrect_Check_of_Function_Return_Value__char_snprintf_05.c":51:27)
#loc10 = loc("CWE253_Incorrect_Check_of_Function_Return_Value__char_snprintf_05.c":38:1)
#loc11 = loc("CWE253_Incorrect_Check_of_Function_Return_Value__char_snprintf_05.c":55:1)
#loc12 = loc("CWE253_Incorrect_Check_of_Function_Return_Value__char_snprintf_05.c":40:5)
#loc13 = loc("CWE253_Incorrect_Check_of_Function_Return_Value__char_snprintf_05.c":54:5)
#loc14 = loc("CWE253_Incorrect_Check_of_Function_Return_Value__char_snprintf_05.c":40:8)
#loc15 = loc("CWE253_Incorrect_Check_of_Function_Return_Value__char_snprintf_05.c":41:5)
#loc16 = loc("CWE253_Incorrect_Check_of_Function_Return_Value__char_snprintf_05.c":42:9)
#loc17 = loc("CWE253_Incorrect_Check_of_Function_Return_Value__char_snprintf_05.c":53:9)
#loc18 = loc("CWE253_Incorrect_Check_of_Function_Return_Value__char_snprintf_05.c":45:13)
#loc19 = loc("CWE253_Incorrect_Check_of_Function_Return_Value__char_snprintf_05.c":45:36)
#loc20 = loc("CWE253_Incorrect_Check_of_Function_Return_Value__char_snprintf_05.c":46:13)
#loc21 = loc("CWE253_Incorrect_Check_of_Function_Return_Value__char_snprintf_05.c":46:27)
#loc22 = loc("CWE253_Incorrect_Check_of_Function_Return_Value__char_snprintf_05.c":49:13)
#loc23 = loc("CWE253_Incorrect_Check_of_Function_Return_Value__char_snprintf_05.c":52:13)
#loc24 = loc("CWE253_Incorrect_Check_of_Function_Return_Value__char_snprintf_05.c":49:17)
#loc25 = loc("CWE253_Incorrect_Check_of_Function_Return_Value__char_snprintf_05.c":49:26)
#loc26 = loc("CWE253_Incorrect_Check_of_Function_Return_Value__char_snprintf_05.c":49:31)
#loc27 = loc("CWE253_Incorrect_Check_of_Function_Return_Value__char_snprintf_05.c":49:35)
#loc28 = loc("CWE253_Incorrect_Check_of_Function_Return_Value__char_snprintf_05.c":49:52)
#loc29 = loc("CWE253_Incorrect_Check_of_Function_Return_Value__char_snprintf_05.c":49:54)
#loc30 = loc("CWE253_Incorrect_Check_of_Function_Return_Value__char_snprintf_05.c":49:80)
#loc31 = loc("CWE253_Incorrect_Check_of_Function_Return_Value__char_snprintf_05.c":50:13)
#loc32 = loc("CWE253_Incorrect_Check_of_Function_Return_Value__char_snprintf_05.c":51:17)
#loc33 = loc("CWE253_Incorrect_Check_of_Function_Return_Value__char_snprintf_05.c":104:1)
#loc34 = loc("CWE253_Incorrect_Check_of_Function_Return_Value__char_snprintf_05.c":108:1)
#loc35 = loc("CWE253_Incorrect_Check_of_Function_Return_Value__char_snprintf_05.c":106:5)
#loc36 = loc("CWE253_Incorrect_Check_of_Function_Return_Value__char_snprintf_05.c":106:11)
#loc37 = loc("CWE253_Incorrect_Check_of_Function_Return_Value__char_snprintf_05.c":107:5)
#loc38 = loc("CWE253_Incorrect_Check_of_Function_Return_Value__char_snprintf_05.c":107:11)
#loc39 = loc("CWE253_Incorrect_Check_of_Function_Return_Value__char_snprintf_05.c":34:1)
#loc40 = loc("CWE253_Incorrect_Check_of_Function_Return_Value__char_snprintf_05.c":34:26)
#loc41 = loc("CWE253_Incorrect_Check_of_Function_Return_Value__char_snprintf_05.c":67:19)
#loc42 = loc("CWE253_Incorrect_Check_of_Function_Return_Value__char_snprintf_05.c":62:1)
#loc43 = loc("CWE253_Incorrect_Check_of_Function_Return_Value__char_snprintf_05.c":83:1)
#loc44 = loc("CWE253_Incorrect_Check_of_Function_Return_Value__char_snprintf_05.c":64:5)
#loc45 = loc("CWE253_Incorrect_Check_of_Function_Return_Value__char_snprintf_05.c":82:5)
#loc46 = loc("CWE253_Incorrect_Check_of_Function_Return_Value__char_snprintf_05.c":64:8)
#loc47 = loc("CWE253_Incorrect_Check_of_Function_Return_Value__char_snprintf_05.c":65:5)
#loc48 = loc("CWE253_Incorrect_Check_of_Function_Return_Value__char_snprintf_05.c":68:5)
#loc49 = loc("CWE253_Incorrect_Check_of_Function_Return_Value__char_snprintf_05.c":70:5)
#loc50 = loc("CWE253_Incorrect_Check_of_Function_Return_Value__char_snprintf_05.c":67:9)
#loc51 = loc("CWE253_Incorrect_Check_of_Function_Return_Value__char_snprintf_05.c":71:9)
#loc52 = loc("CWE253_Incorrect_Check_of_Function_Return_Value__char_snprintf_05.c":81:9)
#loc53 = loc("CWE253_Incorrect_Check_of_Function_Return_Value__char_snprintf_05.c":74:13)
#loc54 = loc("CWE253_Incorrect_Check_of_Function_Return_Value__char_snprintf_05.c":74:36)
#loc55 = loc("CWE253_Incorrect_Check_of_Function_Return_Value__char_snprintf_05.c":75:13)
#loc56 = loc("CWE253_Incorrect_Check_of_Function_Return_Value__char_snprintf_05.c":75:27)
#loc57 = loc("CWE253_Incorrect_Check_of_Function_Return_Value__char_snprintf_05.c":77:13)
#loc58 = loc("CWE253_Incorrect_Check_of_Function_Return_Value__char_snprintf_05.c":80:13)
#loc59 = loc("CWE253_Incorrect_Check_of_Function_Return_Value__char_snprintf_05.c":77:17)
#loc60 = loc("CWE253_Incorrect_Check_of_Function_Return_Value__char_snprintf_05.c":77:26)
#loc61 = loc("CWE253_Incorrect_Check_of_Function_Return_Value__char_snprintf_05.c":77:31)
#loc62 = loc("CWE253_Incorrect_Check_of_Function_Return_Value__char_snprintf_05.c":77:35)
#loc63 = loc("CWE253_Incorrect_Check_of_Function_Return_Value__char_snprintf_05.c":77:52)
#loc64 = loc("CWE253_Incorrect_Check_of_Function_Return_Value__char_snprintf_05.c":77:54)
#loc65 = loc("CWE253_Incorrect_Check_of_Function_Return_Value__char_snprintf_05.c":77:57)
#loc66 = loc("CWE253_Incorrect_Check_of_Function_Return_Value__char_snprintf_05.c":77:65)
#loc67 = loc("CWE253_Incorrect_Check_of_Function_Return_Value__char_snprintf_05.c":77:79)
#loc68 = loc("CWE253_Incorrect_Check_of_Function_Return_Value__char_snprintf_05.c":78:13)
#loc69 = loc("CWE253_Incorrect_Check_of_Function_Return_Value__char_snprintf_05.c":79:27)
#loc70 = loc("CWE253_Incorrect_Check_of_Function_Return_Value__char_snprintf_05.c":79:17)
#loc71 = loc("CWE253_Incorrect_Check_of_Function_Return_Value__char_snprintf_05.c":86:1)
#loc72 = loc("CWE253_Incorrect_Check_of_Function_Return_Value__char_snprintf_05.c":102:1)
#loc73 = loc("CWE253_Incorrect_Check_of_Function_Return_Value__char_snprintf_05.c":88:5)
#loc74 = loc("CWE253_Incorrect_Check_of_Function_Return_Value__char_snprintf_05.c":101:5)
#loc75 = loc("CWE253_Incorrect_Check_of_Function_Return_Value__char_snprintf_05.c":88:8)
#loc76 = loc("CWE253_Incorrect_Check_of_Function_Return_Value__char_snprintf_05.c":89:5)
#loc77 = loc("CWE253_Incorrect_Check_of_Function_Return_Value__char_snprintf_05.c":90:9)
#loc78 = loc("CWE253_Incorrect_Check_of_Function_Return_Value__char_snprintf_05.c":100:9)
#loc79 = loc("CWE253_Incorrect_Check_of_Function_Return_Value__char_snprintf_05.c":93:13)
#loc80 = loc("CWE253_Incorrect_Check_of_Function_Return_Value__char_snprintf_05.c":93:36)
#loc81 = loc("CWE253_Incorrect_Check_of_Function_Return_Value__char_snprintf_05.c":94:13)
#loc82 = loc("CWE253_Incorrect_Check_of_Function_Return_Value__char_snprintf_05.c":94:27)
#loc83 = loc("CWE253_Incorrect_Check_of_Function_Return_Value__char_snprintf_05.c":96:13)
#loc84 = loc("CWE253_Incorrect_Check_of_Function_Return_Value__char_snprintf_05.c":99:13)
#loc85 = loc("CWE253_Incorrect_Check_of_Function_Return_Value__char_snprintf_05.c":96:17)
#loc86 = loc("CWE253_Incorrect_Check_of_Function_Return_Value__char_snprintf_05.c":96:26)
#loc87 = loc("CWE253_Incorrect_Check_of_Function_Return_Value__char_snprintf_05.c":96:31)
#loc88 = loc("CWE253_Incorrect_Check_of_Function_Return_Value__char_snprintf_05.c":96:35)
#loc89 = loc("CWE253_Incorrect_Check_of_Function_Return_Value__char_snprintf_05.c":96:52)
#loc90 = loc("CWE253_Incorrect_Check_of_Function_Return_Value__char_snprintf_05.c":96:54)
#loc91 = loc("CWE253_Incorrect_Check_of_Function_Return_Value__char_snprintf_05.c":96:57)
#loc92 = loc("CWE253_Incorrect_Check_of_Function_Return_Value__char_snprintf_05.c":96:65)
#loc93 = loc("CWE253_Incorrect_Check_of_Function_Return_Value__char_snprintf_05.c":96:79)
#loc94 = loc("CWE253_Incorrect_Check_of_Function_Return_Value__char_snprintf_05.c":97:13)
#loc95 = loc("CWE253_Incorrect_Check_of_Function_Return_Value__char_snprintf_05.c":98:27)
#loc96 = loc("CWE253_Incorrect_Check_of_Function_Return_Value__char_snprintf_05.c":98:17)
#loc97 = loc(fused[#loc1, #loc2])
#loc98 = loc(fused[#loc3, #loc4])
#loc99 = loc(fused[#loc7, #loc8])
#loc100 = loc(fused[#loc10, #loc11])
#loc101 = loc(fused[#loc12, #loc13])
#loc102 = loc(fused[#loc15, #loc13])
#loc103 = loc(fused[#loc16, #loc17])
#loc104 = loc(fused[#loc18, #loc19])
#loc105 = loc(fused[#loc20, #loc21])
#loc106 = loc(fused[#loc22, #loc23])
#loc107 = loc(fused[#loc27, #loc28])
#loc108 = loc(fused[#loc26, #loc28])
#loc109 = loc(fused[#loc26, #loc29])
#loc110 = loc(fused[#loc24, #loc30])
#loc111 = loc(fused[#loc31, #loc23])
#loc112 = loc(fused[#loc33, #loc34])
#loc113 = loc(fused[#loc35, #loc36])
#loc114 = loc(fused[#loc37, #loc38])
#loc115 = loc(fused[#loc39, #loc40])
#loc116 = loc(fused[#loc42, #loc43])
#loc117 = loc(fused[#loc44, #loc45])
#loc118 = loc(fused[#loc47, #loc48, #loc49, #loc45])
#loc119 = loc(fused[#loc51, #loc52])
#loc120 = loc(fused[#loc53, #loc54])
#loc121 = loc(fused[#loc55, #loc56])
#loc122 = loc(fused[#loc57, #loc58])
#loc123 = loc(fused[#loc62, #loc63])
#loc124 = loc(fused[#loc61, #loc63])
#loc125 = loc(fused[#loc61, #loc64])
#loc126 = loc(fused[#loc59, #loc67])
#loc127 = loc(fused[#loc68, #loc58])
#loc128 = loc(fused[#loc71, #loc72])
#loc129 = loc(fused[#loc73, #loc74])
#loc130 = loc(fused[#loc76, #loc74])
#loc131 = loc(fused[#loc77, #loc78])
#loc132 = loc(fused[#loc79, #loc80])
#loc133 = loc(fused[#loc81, #loc82])
#loc134 = loc(fused[#loc83, #loc84])
#loc135 = loc(fused[#loc88, #loc89])
#loc136 = loc(fused[#loc87, #loc89])
#loc137 = loc(fused[#loc87, #loc90])
#loc138 = loc(fused[#loc85, #loc93])
#loc139 = loc(fused[#loc94, #loc84])
