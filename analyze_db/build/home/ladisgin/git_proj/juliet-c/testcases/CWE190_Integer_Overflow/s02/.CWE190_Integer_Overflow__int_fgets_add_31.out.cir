!s32i = !cir.int<s, 32>
!s64i = !cir.int<s, 64>
!s8i = !cir.int<s, 8>
!ty__IO_codecvt = !cir.struct<struct "_IO_codecvt" incomplete>
!ty__IO_marker = !cir.struct<struct "_IO_marker" incomplete>
!ty__IO_wide_data = !cir.struct<struct "_IO_wide_data" incomplete>
!u16i = !cir.int<u, 16>
!u32i = !cir.int<u, 32>
!u64i = !cir.int<u, 64>
!void = !cir.void
#fn_attr = #cir<extra({nothrow = #cir.nothrow})>
#fn_attr1 = #cir<extra({inline = #cir.inline<no>, nothrow = #cir.nothrow, optnone = #cir.optnone})>
#loc66 = loc("CWE190_Integer_Overflow__int_fgets_add_31.c":125:10)
#loc67 = loc("CWE190_Integer_Overflow__int_fgets_add_31.c":125:14)
#loc68 = loc("CWE190_Integer_Overflow__int_fgets_add_31.c":125:20)
#loc69 = loc("CWE190_Integer_Overflow__int_fgets_add_31.c":125:32)
#loc176 = loc(fused[#loc66, #loc67])
#loc177 = loc(fused[#loc68, #loc69])
!ty__IO_FILE = !cir.struct<struct "_IO_FILE" {!s32i, !cir.ptr<!s8i>, !cir.ptr<!s8i>, !cir.ptr<!s8i>, !cir.ptr<!s8i>, !cir.ptr<!s8i>, !cir.ptr<!s8i>, !cir.ptr<!s8i>, !cir.ptr<!s8i>, !cir.ptr<!s8i>, !cir.ptr<!s8i>, !cir.ptr<!s8i>, !cir.ptr<!ty__IO_marker>, !cir.ptr<!cir.struct<struct "_IO_FILE">>, !s32i, !s32i, !s64i, !u16i, !s8i, !cir.array<!s8i x 1>, !cir.ptr<!void>, !s64i, !cir.ptr<!ty__IO_codecvt>, !cir.ptr<!ty__IO_wide_data>, !cir.ptr<!cir.struct<struct "_IO_FILE">>, !cir.ptr<!void>, !cir.ptr<!cir.ptr<!cir.struct<struct "_IO_FILE">>>, !s32i, !cir.array<!s8i x 20>} #cir.record.decl.ast>
module @"/home/ladisgin/git_proj/juliet-c/testcases/CWE190_Integer_Overflow/s02/CWE190_Integer_Overflow__int_fgets_add_31.c" attributes {cir.lang = #cir.lang<c>, cir.sob = #cir.signed_overflow_behavior<undefined>, cir.triple = "x86_64-unknown-linux-gnu", dlti.dl_spec = #dlti.dl_spec<f128 = dense<128> : vector<2xi64>, !llvm.ptr<270> = dense<32> : vector<4xi64>, f64 = dense<64> : vector<2xi64>, !llvm.ptr<271> = dense<32> : vector<4xi64>, !llvm.ptr<272> = dense<64> : vector<4xi64>, i128 = dense<128> : vector<2xi64>, i64 = dense<64> : vector<2xi64>, f80 = dense<128> : vector<2xi64>, !llvm.ptr = dense<64> : vector<4xi64>, i8 = dense<8> : vector<2xi64>, i1 = dense<8> : vector<2xi64>, i32 = dense<32> : vector<2xi64>, i16 = dense<16> : vector<2xi64>, f16 = dense<16> : vector<2xi64>, "dlti.stack_alignment" = 128 : i64, "dlti.endianness" = "little">} {
  cir.func private @fgets(!cir.ptr<!s8i>, !s32i, !cir.ptr<!ty__IO_FILE>) -> !cir.ptr<!s8i> loc(#loc151)
  cir.global "private" external @stdin : !cir.ptr<!ty__IO_FILE> {alignment = 8 : i64} loc(#loc152)
  cir.func private @atoi(!cir.ptr<!s8i>) -> !s32i extra(#fn_attr) loc(#loc153)
  cir.func private @printLine(!cir.ptr<!s8i>) loc(#loc154)
  cir.global "private" constant cir_private dsolocal @".str" = #cir.const_array<"fgets() failed.\00" : !cir.array<!s8i x 16>> : !cir.array<!s8i x 16> {alignment = 1 : i64} loc(#loc9)
  cir.func private @printIntLine(!s32i) loc(#loc155)
  cir.func no_proto @CWE190_Integer_Overflow__int_fgets_add_31_bad() extra(#fn_attr1) {
    %0 = cir.alloca !cir.array<!s8i x 14>, !cir.ptr<!cir.array<!s8i x 14>>, ["inputBuffer"] {alignment = 1 : i64} loc(#loc157)
    %1 = cir.alloca !s32i, !cir.ptr<!s32i>, ["dataCopy", init] {alignment = 4 : i64} loc(#loc158)
    %2 = cir.alloca !s32i, !cir.ptr<!s32i>, ["data", init] {alignment = 4 : i64} loc(#loc159)
    %3 = cir.alloca !s32i, !cir.ptr<!s32i>, ["result", init] {alignment = 4 : i64} loc(#loc160)
    %4 = cir.alloca !s32i, !cir.ptr<!s32i>, ["data"] {alignment = 4 : i64} loc(#loc161)
    %5 = cir.const #cir.int<0> : !s32i loc(#loc24)
    cir.store %5, %4 : !s32i, !cir.ptr<!s32i> loc(#loc162)
    cir.br ^bb1 loc(#loc163)
  ^bb1:  // pred: ^bb0
    %6 = cir.const #cir.zero : !cir.array<!s8i x 14> loc(#loc157)
    cir.store %6, %0 : !cir.array<!s8i x 14>, !cir.ptr<!cir.array<!s8i x 14>> loc(#loc157)
    cir.br ^bb2 loc(#loc164)
  ^bb2:  // pred: ^bb1
    %7 = cir.cast(array_to_ptrdecay, %0 : !cir.ptr<!cir.array<!s8i x 14>>), !cir.ptr<!s8i> loc(#loc30)
    %8 = cir.const #cir.int<3> : !s32i loc(#loc31)
    %9 = cir.cast(integral, %8 : !s32i), !u64i loc(#loc31)
    %10 = cir.const #cir.int<4> : !u64i loc(#loc31)
    %11 = cir.binop(mul, %9, %10) : !u64i loc(#loc31)
    %12 = cir.const #cir.int<2> : !s32i loc(#loc31)
    %13 = cir.cast(integral, %12 : !s32i), !u64i loc(#loc31)
    %14 = cir.binop(add, %11, %13) : !u64i loc(#loc31)
    %15 = cir.cast(integral, %14 : !u64i), !s32i loc(#loc31)
    %16 = cir.get_global @stdin : !cir.ptr<!cir.ptr<!ty__IO_FILE>> loc(#loc152)
    %17 = cir.load %16 : !cir.ptr<!cir.ptr<!ty__IO_FILE>>, !cir.ptr<!ty__IO_FILE> loc(#loc32)
    %18 = cir.call @fgets(%7, %15, %17) : (!cir.ptr<!s8i>, !s32i, !cir.ptr<!ty__IO_FILE>) -> !cir.ptr<!s8i> loc(#loc33)
    %19 = cir.const #cir.ptr<null> : !cir.ptr<!void> loc(#loc34)
    %20 = cir.cast(bitcast, %19 : !cir.ptr<!void>), !cir.ptr<!s8i> loc(#loc34)
    %21 = cir.cmp(ne, %18, %20) : !cir.ptr<!s8i>, !cir.bool loc(#loc165)
    cir.brcond %21 ^bb3, ^bb4 loc(#loc166)
  ^bb3:  // pred: ^bb2
    %22 = cir.cast(array_to_ptrdecay, %0 : !cir.ptr<!cir.array<!s8i x 14>>), !cir.ptr<!s8i> loc(#loc38)
    %23 = cir.call @atoi(%22) : (!cir.ptr<!s8i>) -> !s32i extra(#fn_attr) loc(#loc39)
    cir.store %23, %4 : !s32i, !cir.ptr<!s32i> loc(#loc167)
    cir.br ^bb5 loc(#loc36)
  ^bb4:  // pred: ^bb2
    %24 = cir.get_global @".str" : !cir.ptr<!cir.array<!s8i x 16>> loc(#loc9)
    %25 = cir.cast(array_to_ptrdecay, %24 : !cir.ptr<!cir.array<!s8i x 16>>), !cir.ptr<!s8i> loc(#loc9)
    cir.call @printLine(%25) : (!cir.ptr<!s8i>) -> () loc(#loc42)
    cir.br ^bb5 loc(#loc29)
  ^bb5:  // 2 preds: ^bb3, ^bb4
    cir.br ^bb6 loc(#loc29)
  ^bb6:  // pred: ^bb5
    cir.br ^bb7 loc(#loc27)
  ^bb7:  // pred: ^bb6
    cir.br ^bb8 loc(#loc168)
  ^bb8:  // pred: ^bb7
    %26 = cir.load %4 : !cir.ptr<!s32i>, !s32i loc(#loc17)
    cir.store %26, %1 : !s32i, !cir.ptr<!s32i> loc(#loc158)
    %27 = cir.load %1 : !cir.ptr<!s32i>, !s32i loc(#loc19)
    cir.store %27, %2 : !s32i, !cir.ptr<!s32i> loc(#loc159)
    cir.br ^bb9 loc(#loc169)
  ^bb9:  // pred: ^bb8
    %28 = cir.load %2 : !cir.ptr<!s32i>, !s32i loc(#loc47)
    %29 = cir.const #cir.int<1> : !s32i loc(#loc21)
    %30 = cir.binop(add, %28, %29) nsw : !s32i loc(#loc47)
    cir.store %30, %3 : !s32i, !cir.ptr<!s32i> loc(#loc160)
    %31 = cir.load %3 : !cir.ptr<!s32i>, !s32i loc(#loc48)
    cir.call @printIntLine(%31) : (!s32i) -> () loc(#loc49)
    cir.br ^bb10 loc(#loc46)
  ^bb10:  // pred: ^bb9
    cir.br ^bb11 loc(#loc44)
  ^bb11:  // pred: ^bb10
    cir.return loc(#loc13)
  } loc(#loc156)
  cir.func no_proto @CWE190_Integer_Overflow__int_fgets_add_31_good() extra(#fn_attr1) {
    %0 = cir.get_global @goodG2B : !cir.ptr<!cir.func<!void ()>> loc(#loc171)
    cir.call %0() : (!cir.ptr<!cir.func<!void ()>>) -> () loc(#loc52)
    %1 = cir.get_global @goodB2G : !cir.ptr<!cir.func<!void ()>> loc(#loc172)
    cir.call %1() : (!cir.ptr<!cir.func<!void ()>>) -> () loc(#loc54)
    cir.return loc(#loc51)
  } loc(#loc170)
  cir.func private @srand(!u32i) extra(#fn_attr) loc(#loc173)
  cir.func private @time(!cir.ptr<!s64i>) -> !s64i extra(#fn_attr) loc(#loc174)
  cir.global "private" constant cir_private dsolocal @".str.1" = #cir.const_array<"Calling good()...\00" : !cir.array<!s8i x 18>> : !cir.array<!s8i x 18> {alignment = 1 : i64} loc(#loc60)
  cir.global "private" constant cir_private dsolocal @".str.2" = #cir.const_array<"Finished good()\00" : !cir.array<!s8i x 16>> : !cir.array<!s8i x 16> {alignment = 1 : i64} loc(#loc61)
  cir.global "private" constant cir_private dsolocal @".str.3" = #cir.const_array<"Calling bad()...\00" : !cir.array<!s8i x 17>> : !cir.array<!s8i x 17> {alignment = 1 : i64} loc(#loc62)
  cir.global "private" constant cir_private dsolocal @".str.4" = #cir.const_array<"Finished bad()\00" : !cir.array<!s8i x 15>> : !cir.array<!s8i x 15> {alignment = 1 : i64} loc(#loc63)
  cir.func @main(%arg0: !s32i loc(fused[#loc66, #loc67]), %arg1: !cir.ptr<!cir.ptr<!s8i>> loc(fused[#loc68, #loc69])) -> !s32i extra(#fn_attr1) {
    %0 = cir.alloca !s32i, !cir.ptr<!s32i>, ["argc", init] {alignment = 4 : i64} loc(#loc176)
    %1 = cir.alloca !cir.ptr<!cir.ptr<!s8i>>, !cir.ptr<!cir.ptr<!cir.ptr<!s8i>>>, ["argv", init] {alignment = 8 : i64} loc(#loc177)
    %2 = cir.alloca !s32i, !cir.ptr<!s32i>, ["__retval"] {alignment = 4 : i64} loc(#loc65)
    cir.store %arg0, %0 : !s32i, !cir.ptr<!s32i> loc(#loc70)
    cir.store %arg1, %1 : !cir.ptr<!cir.ptr<!s8i>>, !cir.ptr<!cir.ptr<!cir.ptr<!s8i>>> loc(#loc70)
    %3 = cir.const #cir.ptr<null> : !cir.ptr<!s64i> loc(#loc71)
    %4 = cir.call @time(%3) : (!cir.ptr<!s64i>) -> !s64i extra(#fn_attr) loc(#loc72)
    %5 = cir.cast(integral, %4 : !s64i), !u32i loc(#loc72)
    cir.call @srand(%5) : (!u32i) -> () extra(#fn_attr) loc(#loc73)
    %6 = cir.get_global @".str.1" : !cir.ptr<!cir.array<!s8i x 18>> loc(#loc60)
    %7 = cir.cast(array_to_ptrdecay, %6 : !cir.ptr<!cir.array<!s8i x 18>>), !cir.ptr<!s8i> loc(#loc60)
    cir.call @printLine(%7) : (!cir.ptr<!s8i>) -> () loc(#loc74)
    %8 = cir.get_global @CWE190_Integer_Overflow__int_fgets_add_31_good : !cir.ptr<!cir.func<!void ()>> loc(#loc178)
    cir.call @CWE190_Integer_Overflow__int_fgets_add_31_good() : () -> () loc(#loc75)
    %9 = cir.get_global @".str.2" : !cir.ptr<!cir.array<!s8i x 16>> loc(#loc61)
    %10 = cir.cast(array_to_ptrdecay, %9 : !cir.ptr<!cir.array<!s8i x 16>>), !cir.ptr<!s8i> loc(#loc61)
    cir.call @printLine(%10) : (!cir.ptr<!s8i>) -> () loc(#loc77)
    %11 = cir.get_global @".str.3" : !cir.ptr<!cir.array<!s8i x 17>> loc(#loc62)
    %12 = cir.cast(array_to_ptrdecay, %11 : !cir.ptr<!cir.array<!s8i x 17>>), !cir.ptr<!s8i> loc(#loc62)
    cir.call @printLine(%12) : (!cir.ptr<!s8i>) -> () loc(#loc78)
    %13 = cir.get_global @CWE190_Integer_Overflow__int_fgets_add_31_bad : !cir.ptr<!cir.func<!void ()>> loc(#loc179)
    cir.call @CWE190_Integer_Overflow__int_fgets_add_31_bad() : () -> () loc(#loc79)
    %14 = cir.get_global @".str.4" : !cir.ptr<!cir.array<!s8i x 15>> loc(#loc63)
    %15 = cir.cast(array_to_ptrdecay, %14 : !cir.ptr<!cir.array<!s8i x 15>>), !cir.ptr<!s8i> loc(#loc63)
    cir.call @printLine(%15) : (!cir.ptr<!s8i>) -> () loc(#loc81)
    %16 = cir.const #cir.int<0> : !s32i loc(#loc82)
    cir.store %16, %2 : !s32i, !cir.ptr<!s32i> loc(#loc180)
    %17 = cir.load %2 : !cir.ptr<!s32i>, !s32i loc(#loc180)
    cir.return %17 : !s32i loc(#loc180)
  } loc(#loc175)
  cir.func no_proto internal private @goodG2B() extra(#fn_attr1) {
    %0 = cir.alloca !s32i, !cir.ptr<!s32i>, ["dataCopy", init] {alignment = 4 : i64} loc(#loc182)
    %1 = cir.alloca !s32i, !cir.ptr<!s32i>, ["data", init] {alignment = 4 : i64} loc(#loc183)
    %2 = cir.alloca !s32i, !cir.ptr<!s32i>, ["result", init] {alignment = 4 : i64} loc(#loc184)
    %3 = cir.alloca !s32i, !cir.ptr<!s32i>, ["data"] {alignment = 4 : i64} loc(#loc185)
    %4 = cir.const #cir.int<0> : !s32i loc(#loc94)
    cir.store %4, %3 : !s32i, !cir.ptr<!s32i> loc(#loc186)
    %5 = cir.const #cir.int<2> : !s32i loc(#loc96)
    cir.store %5, %3 : !s32i, !cir.ptr<!s32i> loc(#loc187)
    cir.br ^bb1 loc(#loc188)
  ^bb1:  // pred: ^bb0
    %6 = cir.load %3 : !cir.ptr<!s32i>, !s32i loc(#loc87)
    cir.store %6, %0 : !s32i, !cir.ptr<!s32i> loc(#loc182)
    %7 = cir.load %0 : !cir.ptr<!s32i>, !s32i loc(#loc89)
    cir.store %7, %1 : !s32i, !cir.ptr<!s32i> loc(#loc183)
    cir.br ^bb2 loc(#loc189)
  ^bb2:  // pred: ^bb1
    %8 = cir.load %1 : !cir.ptr<!s32i>, !s32i loc(#loc102)
    %9 = cir.const #cir.int<1> : !s32i loc(#loc91)
    %10 = cir.binop(add, %8, %9) nsw : !s32i loc(#loc102)
    cir.store %10, %2 : !s32i, !cir.ptr<!s32i> loc(#loc184)
    %11 = cir.load %2 : !cir.ptr<!s32i>, !s32i loc(#loc103)
    cir.call @printIntLine(%11) : (!s32i) -> () loc(#loc104)
    cir.br ^bb3 loc(#loc101)
  ^bb3:  // pred: ^bb2
    cir.br ^bb4 loc(#loc99)
  ^bb4:  // pred: ^bb3
    cir.return loc(#loc85)
  } loc(#loc181)
  cir.global "private" constant cir_private dsolocal @".str.5" = #cir.const_array<"data value is too large to perform arithmetic safely.\00" : !cir.array<!s8i x 54>> : !cir.array<!s8i x 54> {alignment = 1 : i64} loc(#loc105)
  cir.func no_proto internal private @goodB2G() extra(#fn_attr1) {
    %0 = cir.alloca !cir.array<!s8i x 14>, !cir.ptr<!cir.array<!s8i x 14>>, ["inputBuffer"] {alignment = 1 : i64} loc(#loc191)
    %1 = cir.alloca !s32i, !cir.ptr<!s32i>, ["dataCopy", init] {alignment = 4 : i64} loc(#loc192)
    %2 = cir.alloca !s32i, !cir.ptr<!s32i>, ["data", init] {alignment = 4 : i64} loc(#loc193)
    %3 = cir.alloca !s32i, !cir.ptr<!s32i>, ["result", init] {alignment = 4 : i64} loc(#loc194)
    %4 = cir.alloca !s32i, !cir.ptr<!s32i>, ["data"] {alignment = 4 : i64} loc(#loc195)
    %5 = cir.const #cir.int<0> : !s32i loc(#loc118)
    cir.store %5, %4 : !s32i, !cir.ptr<!s32i> loc(#loc196)
    cir.br ^bb1 loc(#loc197)
  ^bb1:  // pred: ^bb0
    %6 = cir.const #cir.zero : !cir.array<!s8i x 14> loc(#loc191)
    cir.store %6, %0 : !cir.array<!s8i x 14>, !cir.ptr<!cir.array<!s8i x 14>> loc(#loc191)
    cir.br ^bb2 loc(#loc198)
  ^bb2:  // pred: ^bb1
    %7 = cir.cast(array_to_ptrdecay, %0 : !cir.ptr<!cir.array<!s8i x 14>>), !cir.ptr<!s8i> loc(#loc124)
    %8 = cir.const #cir.int<3> : !s32i loc(#loc125)
    %9 = cir.cast(integral, %8 : !s32i), !u64i loc(#loc125)
    %10 = cir.const #cir.int<4> : !u64i loc(#loc125)
    %11 = cir.binop(mul, %9, %10) : !u64i loc(#loc125)
    %12 = cir.const #cir.int<2> : !s32i loc(#loc125)
    %13 = cir.cast(integral, %12 : !s32i), !u64i loc(#loc125)
    %14 = cir.binop(add, %11, %13) : !u64i loc(#loc125)
    %15 = cir.cast(integral, %14 : !u64i), !s32i loc(#loc125)
    %16 = cir.get_global @stdin : !cir.ptr<!cir.ptr<!ty__IO_FILE>> loc(#loc152)
    %17 = cir.load %16 : !cir.ptr<!cir.ptr<!ty__IO_FILE>>, !cir.ptr<!ty__IO_FILE> loc(#loc126)
    %18 = cir.call @fgets(%7, %15, %17) : (!cir.ptr<!s8i>, !s32i, !cir.ptr<!ty__IO_FILE>) -> !cir.ptr<!s8i> loc(#loc127)
    %19 = cir.const #cir.ptr<null> : !cir.ptr<!void> loc(#loc128)
    %20 = cir.cast(bitcast, %19 : !cir.ptr<!void>), !cir.ptr<!s8i> loc(#loc128)
    %21 = cir.cmp(ne, %18, %20) : !cir.ptr<!s8i>, !cir.bool loc(#loc199)
    cir.brcond %21 ^bb3, ^bb4 loc(#loc200)
  ^bb3:  // pred: ^bb2
    %22 = cir.cast(array_to_ptrdecay, %0 : !cir.ptr<!cir.array<!s8i x 14>>), !cir.ptr<!s8i> loc(#loc132)
    %23 = cir.call @atoi(%22) : (!cir.ptr<!s8i>) -> !s32i extra(#fn_attr) loc(#loc133)
    cir.store %23, %4 : !s32i, !cir.ptr<!s32i> loc(#loc201)
    cir.br ^bb5 loc(#loc130)
  ^bb4:  // pred: ^bb2
    %24 = cir.get_global @".str" : !cir.ptr<!cir.array<!s8i x 16>> loc(#loc136)
    %25 = cir.cast(array_to_ptrdecay, %24 : !cir.ptr<!cir.array<!s8i x 16>>), !cir.ptr<!s8i> loc(#loc136)
    cir.call @printLine(%25) : (!cir.ptr<!s8i>) -> () loc(#loc137)
    cir.br ^bb5 loc(#loc123)
  ^bb5:  // 2 preds: ^bb3, ^bb4
    cir.br ^bb6 loc(#loc123)
  ^bb6:  // pred: ^bb5
    cir.br ^bb7 loc(#loc121)
  ^bb7:  // pred: ^bb6
    cir.br ^bb8 loc(#loc202)
  ^bb8:  // pred: ^bb7
    %26 = cir.load %4 : !cir.ptr<!s32i>, !s32i loc(#loc111)
    cir.store %26, %1 : !s32i, !cir.ptr<!s32i> loc(#loc192)
    %27 = cir.load %1 : !cir.ptr<!s32i>, !s32i loc(#loc113)
    cir.store %27, %2 : !s32i, !cir.ptr<!s32i> loc(#loc193)
    cir.br ^bb9 loc(#loc203)
  ^bb9:  // pred: ^bb8
    %28 = cir.load %2 : !cir.ptr<!s32i>, !s32i loc(#loc142)
    %29 = cir.const #cir.int<2147483647> : !s32i loc(#loc143)
    %30 = cir.cmp(lt, %28, %29) : !s32i, !cir.bool loc(#loc204)
    cir.brcond %30 ^bb10, ^bb11 loc(#loc205)
  ^bb10:  // pred: ^bb9
    %31 = cir.load %2 : !cir.ptr<!s32i>, !s32i loc(#loc147)
    %32 = cir.const #cir.int<1> : !s32i loc(#loc115)
    %33 = cir.binop(add, %31, %32) nsw : !s32i loc(#loc147)
    cir.store %33, %3 : !s32i, !cir.ptr<!s32i> loc(#loc194)
    %34 = cir.load %3 : !cir.ptr<!s32i>, !s32i loc(#loc148)
    cir.call @printIntLine(%34) : (!s32i) -> () loc(#loc149)
    cir.br ^bb12 loc(#loc145)
  ^bb11:  // pred: ^bb9
    %35 = cir.get_global @".str.5" : !cir.ptr<!cir.array<!s8i x 54>> loc(#loc105)
    %36 = cir.cast(array_to_ptrdecay, %35 : !cir.ptr<!cir.array<!s8i x 54>>), !cir.ptr<!s8i> loc(#loc105)
    cir.call @printLine(%36) : (!cir.ptr<!s8i>) -> () loc(#loc150)
    cir.br ^bb12 loc(#loc141)
  ^bb12:  // 2 preds: ^bb10, ^bb11
    cir.br ^bb13 loc(#loc141)
  ^bb13:  // pred: ^bb12
    cir.br ^bb14 loc(#loc139)
  ^bb14:  // pred: ^bb13
    cir.return loc(#loc107)
  } loc(#loc190)
} loc(#loc)
#loc = loc("/home/ladisgin/git_proj/juliet-c/testcases/CWE190_Integer_Overflow/s02/CWE190_Integer_Overflow__int_fgets_add_31.c":0:0)
#loc1 = loc("/usr/include/stdio.h":654:1)
#loc2 = loc("/usr/include/stdio.h":655:59)
#loc3 = loc("/usr/include/stdio.h":149:1)
#loc4 = loc("/usr/include/stdio.h":149:14)
#loc5 = loc("/usr/include/stdlib.h":105:1)
#loc6 = loc("/usr/include/stdlib.h":106:33)
#loc7 = loc("../../../testcasesupport/std_testcase_io.h":14:1)
#loc8 = loc("../../../testcasesupport/std_testcase_io.h":14:33)
#loc9 = loc("CWE190_Integer_Overflow__int_fgets_add_31.c":39:23)
#loc10 = loc("../../../testcasesupport/std_testcase_io.h":18:1)
#loc11 = loc("../../../testcasesupport/std_testcase_io.h":18:33)
#loc12 = loc("CWE190_Integer_Overflow__int_fgets_add_31.c":24:1)
#loc13 = loc("CWE190_Integer_Overflow__int_fgets_add_31.c":51:1)
#loc14 = loc("CWE190_Integer_Overflow__int_fgets_add_31.c":30:9)
#loc15 = loc("CWE190_Integer_Overflow__int_fgets_add_31.c":30:45)
#loc16 = loc("CWE190_Integer_Overflow__int_fgets_add_31.c":43:9)
#loc17 = loc("CWE190_Integer_Overflow__int_fgets_add_31.c":43:24)
#loc18 = loc("CWE190_Integer_Overflow__int_fgets_add_31.c":44:9)
#loc19 = loc("CWE190_Integer_Overflow__int_fgets_add_31.c":44:20)
#loc20 = loc("CWE190_Integer_Overflow__int_fgets_add_31.c":47:13)
#loc21 = loc("CWE190_Integer_Overflow__int_fgets_add_31.c":47:33)
#loc22 = loc("CWE190_Integer_Overflow__int_fgets_add_31.c":26:5)
#loc23 = loc("CWE190_Integer_Overflow__int_fgets_add_31.c":26:9)
#loc24 = loc("CWE190_Integer_Overflow__int_fgets_add_31.c":28:12)
#loc25 = loc("CWE190_Integer_Overflow__int_fgets_add_31.c":28:5)
#loc26 = loc("CWE190_Integer_Overflow__int_fgets_add_31.c":29:5)
#loc27 = loc("CWE190_Integer_Overflow__int_fgets_add_31.c":41:5)
#loc28 = loc("CWE190_Integer_Overflow__int_fgets_add_31.c":32:9)
#loc29 = loc("CWE190_Integer_Overflow__int_fgets_add_31.c":40:9)
#loc30 = loc("CWE190_Integer_Overflow__int_fgets_add_31.c":32:19)
#loc31 = loc("CWE190_Integer_Overflow__int_fgets_add_31.c":32:32)
#loc32 = loc("CWE190_Integer_Overflow__int_fgets_add_31.c":32:49)
#loc33 = loc("CWE190_Integer_Overflow__int_fgets_add_31.c":32:13)
#loc34 = loc("CWE190_Integer_Overflow__int_fgets_add_31.c":32:59)
#loc35 = loc("CWE190_Integer_Overflow__int_fgets_add_31.c":33:9)
#loc36 = loc("CWE190_Integer_Overflow__int_fgets_add_31.c":36:9)
#loc37 = loc("CWE190_Integer_Overflow__int_fgets_add_31.c":38:9)
#loc38 = loc("CWE190_Integer_Overflow__int_fgets_add_31.c":35:25)
#loc39 = loc("CWE190_Integer_Overflow__int_fgets_add_31.c":35:20)
#loc40 = loc("CWE190_Integer_Overflow__int_fgets_add_31.c":35:13)
#loc41 = loc("CWE190_Integer_Overflow__int_fgets_add_31.c":35:36)
#loc42 = loc("CWE190_Integer_Overflow__int_fgets_add_31.c":39:13)
#loc43 = loc("CWE190_Integer_Overflow__int_fgets_add_31.c":42:5)
#loc44 = loc("CWE190_Integer_Overflow__int_fgets_add_31.c":50:5)
#loc45 = loc("CWE190_Integer_Overflow__int_fgets_add_31.c":45:9)
#loc46 = loc("CWE190_Integer_Overflow__int_fgets_add_31.c":49:9)
#loc47 = loc("CWE190_Integer_Overflow__int_fgets_add_31.c":47:26)
#loc48 = loc("CWE190_Integer_Overflow__int_fgets_add_31.c":48:26)
#loc49 = loc("CWE190_Integer_Overflow__int_fgets_add_31.c":48:13)
#loc50 = loc("CWE190_Integer_Overflow__int_fgets_add_31.c":111:1)
#loc51 = loc("CWE190_Integer_Overflow__int_fgets_add_31.c":115:1)
#loc52 = loc("CWE190_Integer_Overflow__int_fgets_add_31.c":113:5)
#loc53 = loc("CWE190_Integer_Overflow__int_fgets_add_31.c":113:13)
#loc54 = loc("CWE190_Integer_Overflow__int_fgets_add_31.c":114:5)
#loc55 = loc("CWE190_Integer_Overflow__int_fgets_add_31.c":114:13)
#loc56 = loc("/usr/include/stdlib.h":575:1)
#loc57 = loc("/usr/include/stdlib.h":575:41)
#loc58 = loc("/usr/include/time.h":76:1)
#loc59 = loc("/usr/include/time.h":76:38)
#loc60 = loc("CWE190_Integer_Overflow__int_fgets_add_31.c":130:15)
#loc61 = loc("CWE190_Integer_Overflow__int_fgets_add_31.c":132:15)
#loc62 = loc("CWE190_Integer_Overflow__int_fgets_add_31.c":135:15)
#loc63 = loc("CWE190_Integer_Overflow__int_fgets_add_31.c":137:15)
#loc64 = loc("CWE190_Integer_Overflow__int_fgets_add_31.c":125:1)
#loc65 = loc("CWE190_Integer_Overflow__int_fgets_add_31.c":140:1)
#loc70 = loc("CWE190_Integer_Overflow__int_fgets_add_31.c":126:1)
#loc71 = loc("CWE190_Integer_Overflow__int_fgets_add_31.c":128:27)
#loc72 = loc("CWE190_Integer_Overflow__int_fgets_add_31.c":128:22)
#loc73 = loc("CWE190_Integer_Overflow__int_fgets_add_31.c":128:5)
#loc74 = loc("CWE190_Integer_Overflow__int_fgets_add_31.c":130:5)
#loc75 = loc("CWE190_Integer_Overflow__int_fgets_add_31.c":131:5)
#loc76 = loc("CWE190_Integer_Overflow__int_fgets_add_31.c":131:52)
#loc77 = loc("CWE190_Integer_Overflow__int_fgets_add_31.c":132:5)
#loc78 = loc("CWE190_Integer_Overflow__int_fgets_add_31.c":135:5)
#loc79 = loc("CWE190_Integer_Overflow__int_fgets_add_31.c":136:5)
#loc80 = loc("CWE190_Integer_Overflow__int_fgets_add_31.c":136:51)
#loc81 = loc("CWE190_Integer_Overflow__int_fgets_add_31.c":137:5)
#loc82 = loc("CWE190_Integer_Overflow__int_fgets_add_31.c":139:12)
#loc83 = loc("CWE190_Integer_Overflow__int_fgets_add_31.c":139:5)
#loc84 = loc("CWE190_Integer_Overflow__int_fgets_add_31.c":58:1)
#loc85 = loc("CWE190_Integer_Overflow__int_fgets_add_31.c":74:1)
#loc86 = loc("CWE190_Integer_Overflow__int_fgets_add_31.c":66:9)
#loc87 = loc("CWE190_Integer_Overflow__int_fgets_add_31.c":66:24)
#loc88 = loc("CWE190_Integer_Overflow__int_fgets_add_31.c":67:9)
#loc89 = loc("CWE190_Integer_Overflow__int_fgets_add_31.c":67:20)
#loc90 = loc("CWE190_Integer_Overflow__int_fgets_add_31.c":70:13)
#loc91 = loc("CWE190_Integer_Overflow__int_fgets_add_31.c":70:33)
#loc92 = loc("CWE190_Integer_Overflow__int_fgets_add_31.c":60:5)
#loc93 = loc("CWE190_Integer_Overflow__int_fgets_add_31.c":60:9)
#loc94 = loc("CWE190_Integer_Overflow__int_fgets_add_31.c":62:12)
#loc95 = loc("CWE190_Integer_Overflow__int_fgets_add_31.c":62:5)
#loc96 = loc("CWE190_Integer_Overflow__int_fgets_add_31.c":64:12)
#loc97 = loc("CWE190_Integer_Overflow__int_fgets_add_31.c":64:5)
#loc98 = loc("CWE190_Integer_Overflow__int_fgets_add_31.c":65:5)
#loc99 = loc("CWE190_Integer_Overflow__int_fgets_add_31.c":73:5)
#loc100 = loc("CWE190_Integer_Overflow__int_fgets_add_31.c":68:9)
#loc101 = loc("CWE190_Integer_Overflow__int_fgets_add_31.c":72:9)
#loc102 = loc("CWE190_Integer_Overflow__int_fgets_add_31.c":70:26)
#loc103 = loc("CWE190_Integer_Overflow__int_fgets_add_31.c":71:26)
#loc104 = loc("CWE190_Integer_Overflow__int_fgets_add_31.c":71:13)
#loc105 = loc("CWE190_Integer_Overflow__int_fgets_add_31.c":106:23)
#loc106 = loc("CWE190_Integer_Overflow__int_fgets_add_31.c":77:1)
#loc107 = loc("CWE190_Integer_Overflow__int_fgets_add_31.c":109:1)
#loc108 = loc("CWE190_Integer_Overflow__int_fgets_add_31.c":83:9)
#loc109 = loc("CWE190_Integer_Overflow__int_fgets_add_31.c":83:45)
#loc110 = loc("CWE190_Integer_Overflow__int_fgets_add_31.c":96:9)
#loc111 = loc("CWE190_Integer_Overflow__int_fgets_add_31.c":96:24)
#loc112 = loc("CWE190_Integer_Overflow__int_fgets_add_31.c":97:9)
#loc113 = loc("CWE190_Integer_Overflow__int_fgets_add_31.c":97:20)
#loc114 = loc("CWE190_Integer_Overflow__int_fgets_add_31.c":101:13)
#loc115 = loc("CWE190_Integer_Overflow__int_fgets_add_31.c":101:33)
#loc116 = loc("CWE190_Integer_Overflow__int_fgets_add_31.c":79:5)
#loc117 = loc("CWE190_Integer_Overflow__int_fgets_add_31.c":79:9)
#loc118 = loc("CWE190_Integer_Overflow__int_fgets_add_31.c":81:12)
#loc119 = loc("CWE190_Integer_Overflow__int_fgets_add_31.c":81:5)
#loc120 = loc("CWE190_Integer_Overflow__int_fgets_add_31.c":82:5)
#loc121 = loc("CWE190_Integer_Overflow__int_fgets_add_31.c":94:5)
#loc122 = loc("CWE190_Integer_Overflow__int_fgets_add_31.c":85:9)
#loc123 = loc("CWE190_Integer_Overflow__int_fgets_add_31.c":93:9)
#loc124 = loc("CWE190_Integer_Overflow__int_fgets_add_31.c":85:19)
#loc125 = loc("CWE190_Integer_Overflow__int_fgets_add_31.c":85:32)
#loc126 = loc("CWE190_Integer_Overflow__int_fgets_add_31.c":85:49)
#loc127 = loc("CWE190_Integer_Overflow__int_fgets_add_31.c":85:13)
#loc128 = loc("CWE190_Integer_Overflow__int_fgets_add_31.c":85:59)
#loc129 = loc("CWE190_Integer_Overflow__int_fgets_add_31.c":86:9)
#loc130 = loc("CWE190_Integer_Overflow__int_fgets_add_31.c":89:9)
#loc131 = loc("CWE190_Integer_Overflow__int_fgets_add_31.c":91:9)
#loc132 = loc("CWE190_Integer_Overflow__int_fgets_add_31.c":88:25)
#loc133 = loc("CWE190_Integer_Overflow__int_fgets_add_31.c":88:20)
#loc134 = loc("CWE190_Integer_Overflow__int_fgets_add_31.c":88:13)
#loc135 = loc("CWE190_Integer_Overflow__int_fgets_add_31.c":88:36)
#loc136 = loc("CWE190_Integer_Overflow__int_fgets_add_31.c":92:23)
#loc137 = loc("CWE190_Integer_Overflow__int_fgets_add_31.c":92:13)
#loc138 = loc("CWE190_Integer_Overflow__int_fgets_add_31.c":95:5)
#loc139 = loc("CWE190_Integer_Overflow__int_fgets_add_31.c":108:5)
#loc140 = loc("CWE190_Integer_Overflow__int_fgets_add_31.c":99:9)
#loc141 = loc("CWE190_Integer_Overflow__int_fgets_add_31.c":107:9)
#loc142 = loc("CWE190_Integer_Overflow__int_fgets_add_31.c":99:13)
#loc143 = loc("CWE190_Integer_Overflow__int_fgets_add_31.c":99:20)
#loc144 = loc("CWE190_Integer_Overflow__int_fgets_add_31.c":100:9)
#loc145 = loc("CWE190_Integer_Overflow__int_fgets_add_31.c":103:9)
#loc146 = loc("CWE190_Integer_Overflow__int_fgets_add_31.c":105:9)
#loc147 = loc("CWE190_Integer_Overflow__int_fgets_add_31.c":101:26)
#loc148 = loc("CWE190_Integer_Overflow__int_fgets_add_31.c":102:26)
#loc149 = loc("CWE190_Integer_Overflow__int_fgets_add_31.c":102:13)
#loc150 = loc("CWE190_Integer_Overflow__int_fgets_add_31.c":106:13)
#loc151 = loc(fused[#loc1, #loc2])
#loc152 = loc(fused[#loc3, #loc4])
#loc153 = loc(fused[#loc5, #loc6])
#loc154 = loc(fused[#loc7, #loc8])
#loc155 = loc(fused[#loc10, #loc11])
#loc156 = loc(fused[#loc12, #loc13])
#loc157 = loc(fused[#loc14, #loc15])
#loc158 = loc(fused[#loc16, #loc17])
#loc159 = loc(fused[#loc18, #loc19])
#loc160 = loc(fused[#loc20, #loc21])
#loc161 = loc(fused[#loc22, #loc23])
#loc162 = loc(fused[#loc25, #loc24])
#loc163 = loc(fused[#loc26, #loc27])
#loc164 = loc(fused[#loc28, #loc29])
#loc165 = loc(fused[#loc33, #loc34])
#loc166 = loc(fused[#loc35, #loc36, #loc37, #loc29])
#loc167 = loc(fused[#loc40, #loc41])
#loc168 = loc(fused[#loc43, #loc44])
#loc169 = loc(fused[#loc45, #loc46])
#loc170 = loc(fused[#loc50, #loc51])
#loc171 = loc(fused[#loc52, #loc53])
#loc172 = loc(fused[#loc54, #loc55])
#loc173 = loc(fused[#loc56, #loc57])
#loc174 = loc(fused[#loc58, #loc59])
#loc175 = loc(fused[#loc64, #loc65])
#loc178 = loc(fused[#loc75, #loc76])
#loc179 = loc(fused[#loc79, #loc80])
#loc180 = loc(fused[#loc83, #loc82])
#loc181 = loc(fused[#loc84, #loc85])
#loc182 = loc(fused[#loc86, #loc87])
#loc183 = loc(fused[#loc88, #loc89])
#loc184 = loc(fused[#loc90, #loc91])
#loc185 = loc(fused[#loc92, #loc93])
#loc186 = loc(fused[#loc95, #loc94])
#loc187 = loc(fused[#loc97, #loc96])
#loc188 = loc(fused[#loc98, #loc99])
#loc189 = loc(fused[#loc100, #loc101])
#loc190 = loc(fused[#loc106, #loc107])
#loc191 = loc(fused[#loc108, #loc109])
#loc192 = loc(fused[#loc110, #loc111])
#loc193 = loc(fused[#loc112, #loc113])
#loc194 = loc(fused[#loc114, #loc115])
#loc195 = loc(fused[#loc116, #loc117])
#loc196 = loc(fused[#loc119, #loc118])
#loc197 = loc(fused[#loc120, #loc121])
#loc198 = loc(fused[#loc122, #loc123])
#loc199 = loc(fused[#loc127, #loc128])
#loc200 = loc(fused[#loc129, #loc130, #loc131, #loc123])
#loc201 = loc(fused[#loc134, #loc135])
#loc202 = loc(fused[#loc138, #loc139])
#loc203 = loc(fused[#loc140, #loc141])
#loc204 = loc(fused[#loc142, #loc143])
#loc205 = loc(fused[#loc144, #loc145, #loc146, #loc141])
