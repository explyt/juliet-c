!s32i = !cir.int<s, 32>
!u64i = !cir.int<u, 64>
!u8i = !cir.int<u, 8>
!void = !cir.void
#fn_attr = #cir<extra({inline = #cir.inline<no>, nothrow = #cir.nothrow, optnone = #cir.optnone, uwtable = #cir.uwtable<async>})>
module @"/workspaces/juliet-c/testcases/CWE121_Stack_Based_Buffer_Overflow/s01/CWE121_Stack_Based_Buffer_Overflow__CWE131_memcpy_16.c" attributes {cir.lang = #cir.lang<c>, cir.sob = #cir.signed_overflow_behavior<undefined>, cir.triple = "x86_64-unknown-linux-gnu", cir.type_size_info = #cir.type_size_info<char = 8, int = 32, size_t = 64>, cir.uwtable = #cir.uwtable<async>, dlti.dl_spec = #dlti.dl_spec<i1 = dense<8> : vector<2xi64>, !llvm.ptr = dense<64> : vector<4xi64>, f80 = dense<128> : vector<2xi64>, i32 = dense<32> : vector<2xi64>, i16 = dense<16> : vector<2xi64>, i8 = dense<8> : vector<2xi64>, !llvm.ptr<272> = dense<64> : vector<4xi64>, !llvm.ptr<271> = dense<32> : vector<4xi64>, f128 = dense<128> : vector<2xi64>, f64 = dense<64> : vector<2xi64>, !llvm.ptr<270> = dense<32> : vector<4xi64>, f16 = dense<16> : vector<2xi64>, i128 = dense<128> : vector<2xi64>, i64 = dense<64> : vector<2xi64>, "dlti.stack_alignment" = 128 : i64, "dlti.mangling_mode" = "e", "dlti.endianness" = "little">} {
  cir.func private @printIntLine(!s32i) loc(#loc63)
  cir.func no_proto @CWE121_Stack_Based_Buffer_Overflow__CWE131_memcpy_16_bad() extra(#fn_attr) {
    %0 = cir.alloca !cir.ptr<!s32i>, !cir.ptr<!cir.ptr<!s32i>>, ["data"] {alignment = 8 : i64} loc(#loc65)
    %1 = cir.const #cir.ptr<null> : !cir.ptr<!s32i> loc(#loc7)
    cir.store %1, %0 : !cir.ptr<!s32i>, !cir.ptr<!cir.ptr<!s32i>> loc(#loc66)
    cir.scope {
      cir.while {
        %2 = cir.const #cir.int<1> : !s32i loc(#loc11)
        %3 = cir.cast(int_to_bool, %2 : !s32i), !cir.bool loc(#loc11)
        cir.condition(%3) loc(#loc11)
      } do {
        cir.scope {
          %2 = cir.const #cir.int<10> : !s32i loc(#loc13)
          %3 = cir.cast(integral, %2 : !s32i), !u64i loc(#loc13)
          %4 = cir.alloca !u8i, !cir.ptr<!u8i>, %3 : !u64i, ["bi_alloca"] {alignment = 16 : i64} loc(#loc13)
          %5 = cir.cast(bitcast, %4 : !cir.ptr<!u8i>), !cir.ptr<!void> loc(#loc13)
          %6 = cir.cast(bitcast, %5 : !cir.ptr<!void>), !cir.ptr<!s32i> loc(#loc13)
          cir.store %6, %0 : !cir.ptr<!s32i>, !cir.ptr<!cir.ptr<!s32i>> loc(#loc69)
          cir.break loc(#loc15)
        } loc(#loc68)
        cir.yield loc(#loc10)
      } loc(#loc67)
    } loc(#loc67)
    cir.scope {
      %2 = cir.alloca !cir.array<!s32i x 10>, !cir.ptr<!cir.array<!s32i x 10>>, ["source"] {alignment = 16 : i64} loc(#loc71)
      %3 = cir.const #cir.zero : !cir.array<!s32i x 10> loc(#loc71)
      cir.store %3, %2 : !cir.array<!s32i x 10>, !cir.ptr<!cir.array<!s32i x 10>> loc(#loc71)
      %4 = cir.load %0 : !cir.ptr<!cir.ptr<!s32i>>, !cir.ptr<!s32i> loc(#loc20)
      %5 = cir.cast(bitcast, %4 : !cir.ptr<!s32i>), !cir.ptr<!void> loc(#loc20)
      %6 = cir.cast(array_to_ptrdecay, %2 : !cir.ptr<!cir.array<!s32i x 10>>), !cir.ptr<!s32i> loc(#loc21)
      %7 = cir.cast(bitcast, %6 : !cir.ptr<!s32i>), !cir.ptr<!void> loc(#loc21)
      %8 = cir.const #cir.int<10> : !s32i loc(#loc22)
      %9 = cir.cast(integral, %8 : !s32i), !u64i loc(#loc22)
      %10 = cir.const #cir.int<4> : !u64i loc(#loc72)
      %11 = cir.binop(mul, %9, %10) : !u64i loc(#loc73)
      cir.libc.memcpy %11 bytes from %7 to %5 : !u64i, !cir.ptr<!void> -> !cir.ptr<!void> loc(#loc74)
      %12 = cir.load %0 : !cir.ptr<!cir.ptr<!s32i>>, !cir.ptr<!s32i> loc(#loc27)
      %13 = cir.const #cir.int<0> : !s32i loc(#loc28)
      %14 = cir.ptr_stride(%12 : !cir.ptr<!s32i>, %13 : !s32i), !cir.ptr<!s32i> loc(#loc29)
      %15 = cir.load %14 : !cir.ptr<!s32i>, !s32i loc(#loc27)
      cir.call @printIntLine(%15) : (!s32i) -> () loc(#loc30)
    } loc(#loc70)
    cir.return loc(#loc4)
  } loc(#loc64)
  cir.func no_proto @CWE121_Stack_Based_Buffer_Overflow__CWE131_memcpy_16_good() extra(#fn_attr) {
    %0 = cir.get_global @goodG2B : !cir.ptr<!cir.func<()>> loc(#loc76)
    cir.call %0() : (!cir.ptr<!cir.func<()>>) -> () loc(#loc33)
    cir.return loc(#loc32)
  } loc(#loc75)
  cir.func no_proto internal private @goodG2B() extra(#fn_attr) {
    %0 = cir.alloca !cir.ptr<!s32i>, !cir.ptr<!cir.ptr<!s32i>>, ["data"] {alignment = 8 : i64} loc(#loc78)
    %1 = cir.const #cir.ptr<null> : !cir.ptr<!s32i> loc(#loc39)
    cir.store %1, %0 : !cir.ptr<!s32i>, !cir.ptr<!cir.ptr<!s32i>> loc(#loc79)
    cir.scope {
      cir.while {
        %2 = cir.const #cir.int<1> : !s32i loc(#loc43)
        %3 = cir.cast(int_to_bool, %2 : !s32i), !cir.bool loc(#loc43)
        cir.condition(%3) loc(#loc43)
      } do {
        cir.scope {
          %2 = cir.const #cir.int<10> : !s32i loc(#loc45)
          %3 = cir.cast(integral, %2 : !s32i), !u64i loc(#loc45)
          %4 = cir.const #cir.int<4> : !u64i loc(#loc45)
          %5 = cir.binop(mul, %3, %4) : !u64i loc(#loc45)
          %6 = cir.alloca !u8i, !cir.ptr<!u8i>, %5 : !u64i, ["bi_alloca"] {alignment = 16 : i64} loc(#loc45)
          %7 = cir.cast(bitcast, %6 : !cir.ptr<!u8i>), !cir.ptr<!void> loc(#loc45)
          %8 = cir.cast(bitcast, %7 : !cir.ptr<!void>), !cir.ptr<!s32i> loc(#loc45)
          cir.store %8, %0 : !cir.ptr<!s32i>, !cir.ptr<!cir.ptr<!s32i>> loc(#loc82)
          cir.break loc(#loc47)
        } loc(#loc81)
        cir.yield loc(#loc42)
      } loc(#loc80)
    } loc(#loc80)
    cir.scope {
      %2 = cir.alloca !cir.array<!s32i x 10>, !cir.ptr<!cir.array<!s32i x 10>>, ["source"] {alignment = 16 : i64} loc(#loc84)
      %3 = cir.const #cir.zero : !cir.array<!s32i x 10> loc(#loc84)
      cir.store %3, %2 : !cir.array<!s32i x 10>, !cir.ptr<!cir.array<!s32i x 10>> loc(#loc84)
      %4 = cir.load %0 : !cir.ptr<!cir.ptr<!s32i>>, !cir.ptr<!s32i> loc(#loc52)
      %5 = cir.cast(bitcast, %4 : !cir.ptr<!s32i>), !cir.ptr<!void> loc(#loc52)
      %6 = cir.cast(array_to_ptrdecay, %2 : !cir.ptr<!cir.array<!s32i x 10>>), !cir.ptr<!s32i> loc(#loc53)
      %7 = cir.cast(bitcast, %6 : !cir.ptr<!s32i>), !cir.ptr<!void> loc(#loc53)
      %8 = cir.const #cir.int<10> : !s32i loc(#loc54)
      %9 = cir.cast(integral, %8 : !s32i), !u64i loc(#loc54)
      %10 = cir.const #cir.int<4> : !u64i loc(#loc85)
      %11 = cir.binop(mul, %9, %10) : !u64i loc(#loc86)
      cir.libc.memcpy %11 bytes from %7 to %5 : !u64i, !cir.ptr<!void> -> !cir.ptr<!void> loc(#loc87)
      %12 = cir.load %0 : !cir.ptr<!cir.ptr<!s32i>>, !cir.ptr<!s32i> loc(#loc59)
      %13 = cir.const #cir.int<0> : !s32i loc(#loc60)
      %14 = cir.ptr_stride(%12 : !cir.ptr<!s32i>, %13 : !s32i), !cir.ptr<!s32i> loc(#loc61)
      %15 = cir.load %14 : !cir.ptr<!s32i>, !s32i loc(#loc59)
      cir.call @printIntLine(%15) : (!s32i) -> () loc(#loc62)
    } loc(#loc83)
    cir.return loc(#loc36)
  } loc(#loc77)
} loc(#loc)
#loc = loc("/workspaces/juliet-c/testcases/CWE121_Stack_Based_Buffer_Overflow/s01/CWE121_Stack_Based_Buffer_Overflow__CWE131_memcpy_16.c":0:0)
#loc1 = loc("../../../testcasesupport/std_testcase_io.h":18:1)
#loc2 = loc("../../../testcasesupport/std_testcase_io.h":18:33)
#loc3 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE131_memcpy_16.c":21:1)
#loc4 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE131_memcpy_16.c":37:1)
#loc5 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE131_memcpy_16.c":23:5)
#loc6 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE131_memcpy_16.c":23:11)
#loc7 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE131_memcpy_16.c":24:12)
#loc8 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE131_memcpy_16.c":24:5)
#loc9 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE131_memcpy_16.c":25:5)
#loc10 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE131_memcpy_16.c":30:5)
#loc11 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE131_memcpy_16.c":25:11)
#loc12 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE131_memcpy_16.c":26:5)
#loc13 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE131_memcpy_16.c":28:23)
#loc14 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE131_memcpy_16.c":28:9)
#loc15 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE131_memcpy_16.c":29:9)
#loc16 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE131_memcpy_16.c":31:5)
#loc17 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE131_memcpy_16.c":36:5)
#loc18 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE131_memcpy_16.c":32:9)
#loc19 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE131_memcpy_16.c":32:28)
#loc20 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE131_memcpy_16.c":34:16)
#loc21 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE131_memcpy_16.c":34:22)
#loc22 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE131_memcpy_16.c":34:30)
#loc23 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE131_memcpy_16.c":34:33)
#loc24 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE131_memcpy_16.c":34:43)
#loc25 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE131_memcpy_16.c":34:9)
#loc26 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE131_memcpy_16.c":34:44)
#loc27 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE131_memcpy_16.c":35:22)
#loc28 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE131_memcpy_16.c":35:27)
#loc29 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE131_memcpy_16.c":35:28)
#loc30 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE131_memcpy_16.c":35:9)
#loc31 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE131_memcpy_16.c":62:1)
#loc32 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE131_memcpy_16.c":65:1)
#loc33 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE131_memcpy_16.c":64:5)
#loc34 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE131_memcpy_16.c":64:13)
#loc35 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE131_memcpy_16.c":44:1)
#loc36 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE131_memcpy_16.c":60:1)
#loc37 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE131_memcpy_16.c":46:5)
#loc38 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE131_memcpy_16.c":46:11)
#loc39 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE131_memcpy_16.c":47:12)
#loc40 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE131_memcpy_16.c":47:5)
#loc41 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE131_memcpy_16.c":48:5)
#loc42 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE131_memcpy_16.c":53:5)
#loc43 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE131_memcpy_16.c":48:11)
#loc44 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE131_memcpy_16.c":49:5)
#loc45 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE131_memcpy_16.c":51:23)
#loc46 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE131_memcpy_16.c":51:9)
#loc47 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE131_memcpy_16.c":52:9)
#loc48 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE131_memcpy_16.c":54:5)
#loc49 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE131_memcpy_16.c":59:5)
#loc50 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE131_memcpy_16.c":55:9)
#loc51 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE131_memcpy_16.c":55:28)
#loc52 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE131_memcpy_16.c":57:16)
#loc53 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE131_memcpy_16.c":57:22)
#loc54 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE131_memcpy_16.c":57:30)
#loc55 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE131_memcpy_16.c":57:33)
#loc56 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE131_memcpy_16.c":57:43)
#loc57 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE131_memcpy_16.c":57:9)
#loc58 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE131_memcpy_16.c":57:44)
#loc59 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE131_memcpy_16.c":58:22)
#loc60 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE131_memcpy_16.c":58:27)
#loc61 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE131_memcpy_16.c":58:28)
#loc62 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE131_memcpy_16.c":58:9)
#loc63 = loc(fused[#loc1, #loc2])
#loc64 = loc(fused[#loc3, #loc4])
#loc65 = loc(fused[#loc5, #loc6])
#loc66 = loc(fused[#loc8, #loc7])
#loc67 = loc(fused[#loc9, #loc10])
#loc68 = loc(fused[#loc12, #loc10])
#loc69 = loc(fused[#loc14, #loc13])
#loc70 = loc(fused[#loc16, #loc17])
#loc71 = loc(fused[#loc18, #loc19])
#loc72 = loc(fused[#loc23, #loc24])
#loc73 = loc(fused[#loc22, #loc24])
#loc74 = loc(fused[#loc25, #loc26])
#loc75 = loc(fused[#loc31, #loc32])
#loc76 = loc(fused[#loc33, #loc34])
#loc77 = loc(fused[#loc35, #loc36])
#loc78 = loc(fused[#loc37, #loc38])
#loc79 = loc(fused[#loc40, #loc39])
#loc80 = loc(fused[#loc41, #loc42])
#loc81 = loc(fused[#loc44, #loc42])
#loc82 = loc(fused[#loc46, #loc45])
#loc83 = loc(fused[#loc48, #loc49])
#loc84 = loc(fused[#loc50, #loc51])
#loc85 = loc(fused[#loc55, #loc56])
#loc86 = loc(fused[#loc54, #loc56])
#loc87 = loc(fused[#loc57, #loc58])
