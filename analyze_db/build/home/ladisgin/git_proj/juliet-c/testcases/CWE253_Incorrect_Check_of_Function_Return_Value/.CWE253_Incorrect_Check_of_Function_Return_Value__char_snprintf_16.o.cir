!s32i = !cir.int<s, 32>
!s8i = !cir.int<s, 8>
!u64i = !cir.int<u, 64>
!void = !cir.void
#fn_attr = #cir<extra({nothrow = #cir.nothrow})>
#fn_attr1 = #cir<extra({inline = #cir.inline<no>, nothrow = #cir.nothrow, optnone = #cir.optnone})>
module @"/home/ladisgin/git_proj/juliet-c/testcases/CWE253_Incorrect_Check_of_Function_Return_Value/CWE253_Incorrect_Check_of_Function_Return_Value__char_snprintf_16.c" attributes {cir.lang = #cir.lang<c>, cir.sob = #cir.signed_overflow_behavior<undefined>, cir.triple = "x86_64-unknown-linux-gnu", dlti.dl_spec = #dlti.dl_spec<!llvm.ptr<271> = dense<32> : vector<4xi64>, !llvm.ptr<272> = dense<64> : vector<4xi64>, f128 = dense<128> : vector<2xi64>, !llvm.ptr<270> = dense<32> : vector<4xi64>, f64 = dense<64> : vector<2xi64>, i32 = dense<32> : vector<2xi64>, f16 = dense<16> : vector<2xi64>, i16 = dense<16> : vector<2xi64>, i1 = dense<8> : vector<2xi64>, i8 = dense<8> : vector<2xi64>, !llvm.ptr = dense<64> : vector<4xi64>, f80 = dense<128> : vector<2xi64>, i64 = dense<64> : vector<2xi64>, i128 = dense<128> : vector<2xi64>, "dlti.endianness" = "little", "dlti.stack_alignment" = 128 : i64>} {
  cir.func private @snprintf(!cir.ptr<!s8i>, !u64i, !cir.ptr<!s8i>, ...) -> !s32i extra(#fn_attr) loc(#loc61)
  cir.global "private" constant cir_private dsolocal @".str" = #cir.const_array<"%s\0A\00" : !cir.array<!s8i x 4>> : !cir.array<!s8i x 4> {alignment = 1 : i64} loc(#loc3)
  cir.global "private" constant cir_private dsolocal @".str.1" = #cir.const_array<"string\00" : !cir.array<!s8i x 7>> : !cir.array<!s8i x 7> {alignment = 1 : i64} loc(#loc4)
  cir.func private @printLine(!cir.ptr<!s8i>) loc(#loc62)
  cir.global "private" constant cir_private dsolocal @".str.2" = #cir.const_array<"snprintf failed!\00" : !cir.array<!s8i x 17>> : !cir.array<!s8i x 17> {alignment = 1 : i64} loc(#loc7)
  cir.func no_proto @CWE253_Incorrect_Check_of_Function_Return_Value__char_snprintf_16_bad() extra(#fn_attr1) {
    %0 = cir.alloca !cir.array<!s8i x 100>, !cir.ptr<!cir.array<!s8i x 100>>, ["dataBuffer"] {alignment = 16 : i64} loc(#loc64)
    %1 = cir.alloca !cir.ptr<!s8i>, !cir.ptr<!cir.ptr<!s8i>>, ["data", init] {alignment = 8 : i64} loc(#loc65)
    cir.br ^bb1 loc(#loc66)
  ^bb1:  // pred: ^bb0
    cir.br ^bb2 loc(#loc66)
  ^bb2:  // pred: ^bb1
    %2 = cir.const #cir.int<1> : !s32i loc(#loc16)
    %3 = cir.cast(int_to_bool, %2 : !s32i), !cir.bool loc(#loc16)
    cir.brcond %3 ^bb3, ^bb10 loc(#loc16)
  ^bb3:  // pred: ^bb2
    cir.br ^bb4 loc(#loc67)
  ^bb4:  // pred: ^bb3
    %4 = cir.const #cir.zero : !cir.array<!s8i x 100> loc(#loc64)
    cir.store %4, %0 : !cir.array<!s8i x 100>, !cir.ptr<!cir.array<!s8i x 100>> loc(#loc64)
    %5 = cir.cast(array_to_ptrdecay, %0 : !cir.ptr<!cir.array<!s8i x 100>>), !cir.ptr<!s8i> loc(#loc13)
    cir.store %5, %1 : !cir.ptr<!s8i>, !cir.ptr<!cir.ptr<!s8i>> loc(#loc65)
    cir.br ^bb5 loc(#loc68)
  ^bb5:  // pred: ^bb4
    %6 = cir.get_global @snprintf : !cir.ptr<!cir.func<!s32i (!cir.ptr<!s8i>, !u64i, !cir.ptr<!s8i>, ...)>> loc(#loc21)
    %7 = cir.load %1 : !cir.ptr<!cir.ptr<!s8i>>, !cir.ptr<!s8i> loc(#loc22)
    %8 = cir.const #cir.int<100> : !s32i loc(#loc23)
    %9 = cir.cast(integral, %8 : !s32i), !u64i loc(#loc23)
    %10 = cir.const #cir.int<6> : !u64i loc(#loc69)
    %11 = cir.binop(sub, %9, %10) : !u64i loc(#loc70)
    %12 = cir.const #cir.int<1> : !s32i loc(#loc26)
    %13 = cir.cast(integral, %12 : !s32i), !u64i loc(#loc26)
    %14 = cir.binop(sub, %11, %13) : !u64i loc(#loc71)
    %15 = cir.get_global @".str" : !cir.ptr<!cir.array<!s8i x 4>> loc(#loc3)
    %16 = cir.cast(array_to_ptrdecay, %15 : !cir.ptr<!cir.array<!s8i x 4>>), !cir.ptr<!s8i> loc(#loc3)
    %17 = cir.get_global @".str.1" : !cir.ptr<!cir.array<!s8i x 7>> loc(#loc4)
    %18 = cir.cast(array_to_ptrdecay, %17 : !cir.ptr<!cir.array<!s8i x 7>>), !cir.ptr<!s8i> loc(#loc4)
    %19 = cir.call @snprintf(%7, %14, %16, %18) : (!cir.ptr<!s8i>, !u64i, !cir.ptr<!s8i>, !cir.ptr<!s8i>) -> !s32i extra(#fn_attr) loc(#loc21)
    %20 = cir.const #cir.int<0> : !s32i loc(#loc27)
    %21 = cir.cmp(eq, %19, %20) : !s32i, !cir.bool loc(#loc72)
    cir.brcond %21 ^bb6, ^bb7 loc(#loc73)
  ^bb6:  // pred: ^bb5
    %22 = cir.get_global @".str.2" : !cir.ptr<!cir.array<!s8i x 17>> loc(#loc7)
    %23 = cir.cast(array_to_ptrdecay, %22 : !cir.ptr<!cir.array<!s8i x 17>>), !cir.ptr<!s8i> loc(#loc7)
    cir.call @printLine(%23) : (!cir.ptr<!s8i>) -> () loc(#loc29)
    cir.br ^bb7 loc(#loc20)
  ^bb7:  // 2 preds: ^bb5, ^bb6
    cir.br ^bb8 loc(#loc20)
  ^bb8:  // pred: ^bb7
    cir.br ^bb9 loc(#loc18)
  ^bb9:  // pred: ^bb8
    cir.br ^bb10 loc(#loc30)
  ^bb10:  // 2 preds: ^bb2, ^bb9
    cir.br ^bb11 loc(#loc15)
  ^bb11:  // pred: ^bb10
    cir.return loc(#loc9)
  } loc(#loc63)
  cir.func no_proto @CWE253_Incorrect_Check_of_Function_Return_Value__char_snprintf_16_good() extra(#fn_attr1) {
    %0 = cir.get_global @good1 : !cir.ptr<!cir.func<!void ()>> loc(#loc75)
    cir.call %0() : (!cir.ptr<!cir.func<!void ()>>) -> () loc(#loc33)
    cir.return loc(#loc32)
  } loc(#loc74)
  cir.func no_proto internal private @good1() extra(#fn_attr1) {
    %0 = cir.alloca !cir.array<!s8i x 100>, !cir.ptr<!cir.array<!s8i x 100>>, ["dataBuffer"] {alignment = 16 : i64} loc(#loc77)
    %1 = cir.alloca !cir.ptr<!s8i>, !cir.ptr<!cir.ptr<!s8i>>, ["data", init] {alignment = 8 : i64} loc(#loc78)
    cir.br ^bb1 loc(#loc79)
  ^bb1:  // pred: ^bb0
    cir.br ^bb2 loc(#loc79)
  ^bb2:  // pred: ^bb1
    %2 = cir.const #cir.int<1> : !s32i loc(#loc43)
    %3 = cir.cast(int_to_bool, %2 : !s32i), !cir.bool loc(#loc43)
    cir.brcond %3 ^bb3, ^bb10 loc(#loc43)
  ^bb3:  // pred: ^bb2
    cir.br ^bb4 loc(#loc80)
  ^bb4:  // pred: ^bb3
    %4 = cir.const #cir.zero : !cir.array<!s8i x 100> loc(#loc77)
    cir.store %4, %0 : !cir.array<!s8i x 100>, !cir.ptr<!cir.array<!s8i x 100>> loc(#loc77)
    %5 = cir.cast(array_to_ptrdecay, %0 : !cir.ptr<!cir.array<!s8i x 100>>), !cir.ptr<!s8i> loc(#loc40)
    cir.store %5, %1 : !cir.ptr<!s8i>, !cir.ptr<!cir.ptr<!s8i>> loc(#loc78)
    cir.br ^bb5 loc(#loc81)
  ^bb5:  // pred: ^bb4
    %6 = cir.get_global @snprintf : !cir.ptr<!cir.func<!s32i (!cir.ptr<!s8i>, !u64i, !cir.ptr<!s8i>, ...)>> loc(#loc48)
    %7 = cir.load %1 : !cir.ptr<!cir.ptr<!s8i>>, !cir.ptr<!s8i> loc(#loc49)
    %8 = cir.const #cir.int<100> : !s32i loc(#loc50)
    %9 = cir.cast(integral, %8 : !s32i), !u64i loc(#loc50)
    %10 = cir.const #cir.int<6> : !u64i loc(#loc82)
    %11 = cir.binop(sub, %9, %10) : !u64i loc(#loc83)
    %12 = cir.const #cir.int<1> : !s32i loc(#loc53)
    %13 = cir.cast(integral, %12 : !s32i), !u64i loc(#loc53)
    %14 = cir.binop(sub, %11, %13) : !u64i loc(#loc84)
    %15 = cir.get_global @".str" : !cir.ptr<!cir.array<!s8i x 4>> loc(#loc54)
    %16 = cir.cast(array_to_ptrdecay, %15 : !cir.ptr<!cir.array<!s8i x 4>>), !cir.ptr<!s8i> loc(#loc54)
    %17 = cir.get_global @".str.1" : !cir.ptr<!cir.array<!s8i x 7>> loc(#loc55)
    %18 = cir.cast(array_to_ptrdecay, %17 : !cir.ptr<!cir.array<!s8i x 7>>), !cir.ptr<!s8i> loc(#loc55)
    %19 = cir.call @snprintf(%7, %14, %16, %18) : (!cir.ptr<!s8i>, !u64i, !cir.ptr<!s8i>, !cir.ptr<!s8i>) -> !s32i extra(#fn_attr) loc(#loc48)
    %20 = cir.const #cir.int<0> : !s32i loc(#loc56)
    %21 = cir.cmp(lt, %19, %20) : !s32i, !cir.bool loc(#loc85)
    cir.brcond %21 ^bb6, ^bb7 loc(#loc86)
  ^bb6:  // pred: ^bb5
    %22 = cir.get_global @".str.2" : !cir.ptr<!cir.array<!s8i x 17>> loc(#loc58)
    %23 = cir.cast(array_to_ptrdecay, %22 : !cir.ptr<!cir.array<!s8i x 17>>), !cir.ptr<!s8i> loc(#loc58)
    cir.call @printLine(%23) : (!cir.ptr<!s8i>) -> () loc(#loc59)
    cir.br ^bb7 loc(#loc47)
  ^bb7:  // 2 preds: ^bb5, ^bb6
    cir.br ^bb8 loc(#loc47)
  ^bb8:  // pred: ^bb7
    cir.br ^bb9 loc(#loc45)
  ^bb9:  // pred: ^bb8
    cir.br ^bb10 loc(#loc60)
  ^bb10:  // 2 preds: ^bb2, ^bb9
    cir.br ^bb11 loc(#loc42)
  ^bb11:  // pred: ^bb10
    cir.return loc(#loc36)
  } loc(#loc76)
} loc(#loc)
#loc = loc("/home/ladisgin/git_proj/juliet-c/testcases/CWE253_Incorrect_Check_of_Function_Return_Value/CWE253_Incorrect_Check_of_Function_Return_Value__char_snprintf_16.c":0:0)
#loc1 = loc("/usr/include/stdio.h":385:1)
#loc2 = loc("/usr/include/stdio.h":387:62)
#loc3 = loc("CWE253_Incorrect_Check_of_Function_Return_Value__char_snprintf_16.c":43:57)
#loc4 = loc("CWE253_Incorrect_Check_of_Function_Return_Value__char_snprintf_16.c":43:65)
#loc5 = loc("../../testcasesupport/std_testcase_io.h":14:1)
#loc6 = loc("../../testcasesupport/std_testcase_io.h":14:33)
#loc7 = loc("CWE253_Incorrect_Check_of_Function_Return_Value__char_snprintf_16.c":45:27)
#loc8 = loc("CWE253_Incorrect_Check_of_Function_Return_Value__char_snprintf_16.c":32:1)
#loc9 = loc("CWE253_Incorrect_Check_of_Function_Return_Value__char_snprintf_16.c":50:1)
#loc10 = loc("CWE253_Incorrect_Check_of_Function_Return_Value__char_snprintf_16.c":39:13)
#loc11 = loc("CWE253_Incorrect_Check_of_Function_Return_Value__char_snprintf_16.c":39:36)
#loc12 = loc("CWE253_Incorrect_Check_of_Function_Return_Value__char_snprintf_16.c":40:13)
#loc13 = loc("CWE253_Incorrect_Check_of_Function_Return_Value__char_snprintf_16.c":40:27)
#loc14 = loc("CWE253_Incorrect_Check_of_Function_Return_Value__char_snprintf_16.c":34:5)
#loc15 = loc("CWE253_Incorrect_Check_of_Function_Return_Value__char_snprintf_16.c":49:5)
#loc16 = loc("CWE253_Incorrect_Check_of_Function_Return_Value__char_snprintf_16.c":34:11)
#loc17 = loc("CWE253_Incorrect_Check_of_Function_Return_Value__char_snprintf_16.c":36:9)
#loc18 = loc("CWE253_Incorrect_Check_of_Function_Return_Value__char_snprintf_16.c":47:9)
#loc19 = loc("CWE253_Incorrect_Check_of_Function_Return_Value__char_snprintf_16.c":43:13)
#loc20 = loc("CWE253_Incorrect_Check_of_Function_Return_Value__char_snprintf_16.c":46:13)
#loc21 = loc("CWE253_Incorrect_Check_of_Function_Return_Value__char_snprintf_16.c":43:17)
#loc22 = loc("CWE253_Incorrect_Check_of_Function_Return_Value__char_snprintf_16.c":43:26)
#loc23 = loc("CWE253_Incorrect_Check_of_Function_Return_Value__char_snprintf_16.c":43:31)
#loc24 = loc("CWE253_Incorrect_Check_of_Function_Return_Value__char_snprintf_16.c":43:35)
#loc25 = loc("CWE253_Incorrect_Check_of_Function_Return_Value__char_snprintf_16.c":43:52)
#loc26 = loc("CWE253_Incorrect_Check_of_Function_Return_Value__char_snprintf_16.c":43:54)
#loc27 = loc("CWE253_Incorrect_Check_of_Function_Return_Value__char_snprintf_16.c":43:80)
#loc28 = loc("CWE253_Incorrect_Check_of_Function_Return_Value__char_snprintf_16.c":44:13)
#loc29 = loc("CWE253_Incorrect_Check_of_Function_Return_Value__char_snprintf_16.c":45:17)
#loc30 = loc("CWE253_Incorrect_Check_of_Function_Return_Value__char_snprintf_16.c":48:9)
#loc31 = loc("CWE253_Incorrect_Check_of_Function_Return_Value__char_snprintf_16.c":76:1)
#loc32 = loc("CWE253_Incorrect_Check_of_Function_Return_Value__char_snprintf_16.c":79:1)
#loc33 = loc("CWE253_Incorrect_Check_of_Function_Return_Value__char_snprintf_16.c":78:5)
#loc34 = loc("CWE253_Incorrect_Check_of_Function_Return_Value__char_snprintf_16.c":78:11)
#loc35 = loc("CWE253_Incorrect_Check_of_Function_Return_Value__char_snprintf_16.c":57:1)
#loc36 = loc("CWE253_Incorrect_Check_of_Function_Return_Value__char_snprintf_16.c":74:1)
#loc37 = loc("CWE253_Incorrect_Check_of_Function_Return_Value__char_snprintf_16.c":64:13)
#loc38 = loc("CWE253_Incorrect_Check_of_Function_Return_Value__char_snprintf_16.c":64:36)
#loc39 = loc("CWE253_Incorrect_Check_of_Function_Return_Value__char_snprintf_16.c":65:13)
#loc40 = loc("CWE253_Incorrect_Check_of_Function_Return_Value__char_snprintf_16.c":65:27)
#loc41 = loc("CWE253_Incorrect_Check_of_Function_Return_Value__char_snprintf_16.c":59:5)
#loc42 = loc("CWE253_Incorrect_Check_of_Function_Return_Value__char_snprintf_16.c":73:5)
#loc43 = loc("CWE253_Incorrect_Check_of_Function_Return_Value__char_snprintf_16.c":59:11)
#loc44 = loc("CWE253_Incorrect_Check_of_Function_Return_Value__char_snprintf_16.c":61:9)
#loc45 = loc("CWE253_Incorrect_Check_of_Function_Return_Value__char_snprintf_16.c":71:9)
#loc46 = loc("CWE253_Incorrect_Check_of_Function_Return_Value__char_snprintf_16.c":67:13)
#loc47 = loc("CWE253_Incorrect_Check_of_Function_Return_Value__char_snprintf_16.c":70:13)
#loc48 = loc("CWE253_Incorrect_Check_of_Function_Return_Value__char_snprintf_16.c":67:17)
#loc49 = loc("CWE253_Incorrect_Check_of_Function_Return_Value__char_snprintf_16.c":67:26)
#loc50 = loc("CWE253_Incorrect_Check_of_Function_Return_Value__char_snprintf_16.c":67:31)
#loc51 = loc("CWE253_Incorrect_Check_of_Function_Return_Value__char_snprintf_16.c":67:35)
#loc52 = loc("CWE253_Incorrect_Check_of_Function_Return_Value__char_snprintf_16.c":67:52)
#loc53 = loc("CWE253_Incorrect_Check_of_Function_Return_Value__char_snprintf_16.c":67:54)
#loc54 = loc("CWE253_Incorrect_Check_of_Function_Return_Value__char_snprintf_16.c":67:57)
#loc55 = loc("CWE253_Incorrect_Check_of_Function_Return_Value__char_snprintf_16.c":67:65)
#loc56 = loc("CWE253_Incorrect_Check_of_Function_Return_Value__char_snprintf_16.c":67:79)
#loc57 = loc("CWE253_Incorrect_Check_of_Function_Return_Value__char_snprintf_16.c":68:13)
#loc58 = loc("CWE253_Incorrect_Check_of_Function_Return_Value__char_snprintf_16.c":69:27)
#loc59 = loc("CWE253_Incorrect_Check_of_Function_Return_Value__char_snprintf_16.c":69:17)
#loc60 = loc("CWE253_Incorrect_Check_of_Function_Return_Value__char_snprintf_16.c":72:9)
#loc61 = loc(fused[#loc1, #loc2])
#loc62 = loc(fused[#loc5, #loc6])
#loc63 = loc(fused[#loc8, #loc9])
#loc64 = loc(fused[#loc10, #loc11])
#loc65 = loc(fused[#loc12, #loc13])
#loc66 = loc(fused[#loc14, #loc15])
#loc67 = loc(fused[#loc17, #loc18])
#loc68 = loc(fused[#loc19, #loc20])
#loc69 = loc(fused[#loc24, #loc25])
#loc70 = loc(fused[#loc23, #loc25])
#loc71 = loc(fused[#loc23, #loc26])
#loc72 = loc(fused[#loc21, #loc27])
#loc73 = loc(fused[#loc28, #loc20])
#loc74 = loc(fused[#loc31, #loc32])
#loc75 = loc(fused[#loc33, #loc34])
#loc76 = loc(fused[#loc35, #loc36])
#loc77 = loc(fused[#loc37, #loc38])
#loc78 = loc(fused[#loc39, #loc40])
#loc79 = loc(fused[#loc41, #loc42])
#loc80 = loc(fused[#loc44, #loc45])
#loc81 = loc(fused[#loc46, #loc47])
#loc82 = loc(fused[#loc51, #loc52])
#loc83 = loc(fused[#loc50, #loc52])
#loc84 = loc(fused[#loc50, #loc53])
#loc85 = loc(fused[#loc48, #loc56])
#loc86 = loc(fused[#loc57, #loc47])
