!s32i = !cir.int<s, 32>
!s64i = !cir.int<s, 64>
!s8i = !cir.int<s, 8>
!u32i = !cir.int<u, 32>
#false = #cir.bool<false> : !cir.bool
#fn_attr = #cir<extra({inline = #cir.inline<no>, optnone = #cir.optnone})>
#fn_attr1 = #cir<extra({nothrow = #cir.nothrow})>
#loc96 = loc("CWE190_Integer_Overflow__int_max_square_33.cpp":110:10)
#loc97 = loc("CWE190_Integer_Overflow__int_max_square_33.cpp":110:14)
#loc98 = loc("CWE190_Integer_Overflow__int_max_square_33.cpp":110:20)
#loc99 = loc("CWE190_Integer_Overflow__int_max_square_33.cpp":110:32)
#true = #cir.bool<true> : !cir.bool
#loc148 = loc(fused[#loc96, #loc97])
#loc149 = loc(fused[#loc98, #loc99])
module @"/home/ladisgin/git_proj/juliet-c/testcases/CWE190_Integer_Overflow/s03/CWE190_Integer_Overflow__int_max_square_33.cpp" attributes {cir.lang = #cir.lang<cxx>, cir.sob = #cir.signed_overflow_behavior<undefined>, cir.triple = "x86_64-unknown-linux-gnu", dlti.dl_spec = #dlti.dl_spec<!llvm.ptr<270> = dense<32> : vector<4xi64>, f128 = dense<128> : vector<2xi64>, f64 = dense<64> : vector<2xi64>, f16 = dense<16> : vector<2xi64>, i32 = dense<32> : vector<2xi64>, i64 = dense<64> : vector<2xi64>, !llvm.ptr<272> = dense<64> : vector<4xi64>, !llvm.ptr<271> = dense<32> : vector<4xi64>, f80 = dense<128> : vector<2xi64>, i128 = dense<128> : vector<2xi64>, i16 = dense<16> : vector<2xi64>, i8 = dense<8> : vector<2xi64>, i1 = dense<8> : vector<2xi64>, !llvm.ptr = dense<64> : vector<4xi64>, "dlti.endianness" = "little", "dlti.stack_alignment" = 128 : i64>} {
  cir.func private @printIntLine(!s32i) loc(#loc112)
  cir.func @_ZN42CWE190_Integer_Overflow__int_max_square_333badEv() extra(#fn_attr) {
    %0 = cir.alloca !s32i, !cir.ptr<!s32i>, ["data"] {alignment = 4 : i64} loc(#loc114)
    %1 = cir.alloca !cir.ptr<!s32i>, !cir.ptr<!cir.ptr<!s32i>>, ["dataRef", init, const] {alignment = 8 : i64} loc(#loc115)
    cir.store %0, %1 : !cir.ptr<!s32i>, !cir.ptr<!cir.ptr<!s32i>> loc(#loc8)
    %2 = cir.const #cir.int<0> : !s32i loc(#loc9)
    cir.store %2, %0 : !s32i, !cir.ptr<!s32i> loc(#loc116)
    %3 = cir.const #cir.int<2147483647> : !s32i loc(#loc11)
    cir.store %3, %0 : !s32i, !cir.ptr<!s32i> loc(#loc117)
    cir.scope {
      %4 = cir.alloca !s32i, !cir.ptr<!s32i>, ["data", init] {alignment = 4 : i64} loc(#loc119)
      %5 = cir.load %1 : !cir.ptr<!cir.ptr<!s32i>>, !cir.ptr<!s32i> loc(#loc16)
      %6 = cir.load %5 : !cir.ptr<!s32i>, !s32i loc(#loc16)
      cir.store %6, %4 : !s32i, !cir.ptr<!s32i> loc(#loc119)
      cir.scope {
        %7 = cir.alloca !s32i, !cir.ptr<!s32i>, ["result", init] {alignment = 4 : i64} loc(#loc121)
        %8 = cir.load %4 : !cir.ptr<!s32i>, !s32i loc(#loc21)
        %9 = cir.load %4 : !cir.ptr<!s32i>, !s32i loc(#loc20)
        %10 = cir.binop(mul, %8, %9) nsw : !s32i loc(#loc21)
        cir.store %10, %7 : !s32i, !cir.ptr<!s32i> loc(#loc121)
        %11 = cir.load %7 : !cir.ptr<!s32i>, !s32i loc(#loc22)
        cir.call @printIntLine(%11) : (!s32i) -> () loc(#loc23)
      } loc(#loc120)
    } loc(#loc118)
    cir.return loc(#loc4)
  } loc(#loc113)
  cir.func internal private @_ZN42CWE190_Integer_Overflow__int_max_square_33L7goodG2BEv() extra(#fn_attr) {
    %0 = cir.alloca !s32i, !cir.ptr<!s32i>, ["data"] {alignment = 4 : i64} loc(#loc123)
    %1 = cir.alloca !cir.ptr<!s32i>, !cir.ptr<!cir.ptr<!s32i>>, ["dataRef", init, const] {alignment = 8 : i64} loc(#loc124)
    cir.store %0, %1 : !cir.ptr<!s32i>, !cir.ptr<!cir.ptr<!s32i>> loc(#loc29)
    %2 = cir.const #cir.int<0> : !s32i loc(#loc30)
    cir.store %2, %0 : !s32i, !cir.ptr<!s32i> loc(#loc125)
    %3 = cir.const #cir.int<2> : !s32i loc(#loc32)
    cir.store %3, %0 : !s32i, !cir.ptr<!s32i> loc(#loc126)
    cir.scope {
      %4 = cir.alloca !s32i, !cir.ptr<!s32i>, ["data", init] {alignment = 4 : i64} loc(#loc128)
      %5 = cir.load %1 : !cir.ptr<!cir.ptr<!s32i>>, !cir.ptr<!s32i> loc(#loc37)
      %6 = cir.load %5 : !cir.ptr<!s32i>, !s32i loc(#loc37)
      cir.store %6, %4 : !s32i, !cir.ptr<!s32i> loc(#loc128)
      cir.scope {
        %7 = cir.alloca !s32i, !cir.ptr<!s32i>, ["result", init] {alignment = 4 : i64} loc(#loc130)
        %8 = cir.load %4 : !cir.ptr<!s32i>, !s32i loc(#loc42)
        %9 = cir.load %4 : !cir.ptr<!s32i>, !s32i loc(#loc41)
        %10 = cir.binop(mul, %8, %9) nsw : !s32i loc(#loc42)
        cir.store %10, %7 : !s32i, !cir.ptr<!s32i> loc(#loc130)
        %11 = cir.load %7 : !cir.ptr<!s32i>, !s32i loc(#loc43)
        cir.call @printIntLine(%11) : (!s32i) -> () loc(#loc44)
      } loc(#loc129)
    } loc(#loc127)
    cir.return loc(#loc25)
  } loc(#loc122)
  cir.func private @sqrt(!cir.double) -> !cir.double extra(#fn_attr1) loc(#loc45)
  cir.global "private" constant cir_private dsolocal @".str.4" = #cir.const_array<"data value is too large to perform arithmetic safely.\00" : !cir.array<!s8i x 54>> : !cir.array<!s8i x 54> {alignment = 1 : i64} loc(#loc46)
  cir.func internal private @_ZN42CWE190_Integer_Overflow__int_max_square_33L7goodB2GEv() extra(#fn_attr) {
    %0 = cir.alloca !s32i, !cir.ptr<!s32i>, ["data"] {alignment = 4 : i64} loc(#loc132)
    %1 = cir.alloca !cir.ptr<!s32i>, !cir.ptr<!cir.ptr<!s32i>>, ["dataRef", init, const] {alignment = 8 : i64} loc(#loc133)
    cir.store %0, %1 : !cir.ptr<!s32i>, !cir.ptr<!cir.ptr<!s32i>> loc(#loc52)
    %2 = cir.const #cir.int<0> : !s32i loc(#loc53)
    cir.store %2, %0 : !s32i, !cir.ptr<!s32i> loc(#loc134)
    %3 = cir.const #cir.int<2147483647> : !s32i loc(#loc55)
    cir.store %3, %0 : !s32i, !cir.ptr<!s32i> loc(#loc135)
    cir.scope {
      %4 = cir.alloca !s32i, !cir.ptr<!s32i>, ["data", init] {alignment = 4 : i64} loc(#loc137)
      %5 = cir.load %1 : !cir.ptr<!cir.ptr<!s32i>>, !cir.ptr<!s32i> loc(#loc60)
      %6 = cir.load %5 : !cir.ptr<!s32i>, !s32i loc(#loc60)
      cir.store %6, %4 : !s32i, !cir.ptr<!s32i> loc(#loc137)
      cir.scope {
        %7 = cir.load %4 : !cir.ptr<!s32i>, !s32i loc(#loc63)
        %8 = cir.const #cir.int<2147483647> : !s32i loc(#loc64)
        %9 = cir.unary(minus, %8) : !s32i, !s32i loc(#loc64)
        %10 = cir.const #cir.int<1> : !s32i loc(#loc64)
        %11 = cir.binop(sub, %9, %10) nsw : !s32i loc(#loc64)
        %12 = cir.cmp(gt, %7, %11) : !s32i, !cir.bool loc(#loc139)
        %13 = cir.ternary(%12, true {
          %14 = cir.load %4 : !cir.ptr<!s32i>, !s32i loc(#loc66)
          %15 = cir.abs %14 poison : !s32i loc(#loc67)
          %16 = cir.cast(integral, %15 : !s32i), !s64i loc(#loc67)
          %17 = cir.get_global @sqrt : !cir.ptr<!cir.func<!cir.double (!cir.double)>> loc(#loc68)
          %18 = cir.const #cir.int<2147483647> : !s32i loc(#loc69)
          %19 = cir.cast(int_to_float, %18 : !s32i), !cir.double loc(#loc69)
          %20 = cir.call @sqrt(%19) : (!cir.double) -> !cir.double extra(#fn_attr1) loc(#loc68)
          %21 = cir.cast(float_to_int, %20 : !cir.double), !s64i loc(#loc68)
          %22 = cir.cmp(lt, %16, %21) : !s64i, !cir.bool loc(#loc140)
          %23 = cir.ternary(%22, true {
            %24 = cir.const #true loc(#loc65)
            cir.yield %24 : !cir.bool loc(#loc65)
          }, false {
            %24 = cir.const #false loc(#loc65)
            cir.yield %24 : !cir.bool loc(#loc65)
          }) : (!cir.bool) -> !cir.bool loc(#loc65)
          cir.yield %23 : !cir.bool loc(#loc65)
        }, false {
          %14 = cir.const #false loc(#loc65)
          cir.yield %14 : !cir.bool loc(#loc65)
        }) : (!cir.bool) -> !cir.bool loc(#loc65)
        cir.if %13 {
          %14 = cir.alloca !s32i, !cir.ptr<!s32i>, ["result", init] {alignment = 4 : i64} loc(#loc142)
          %15 = cir.load %4 : !cir.ptr<!s32i>, !s32i loc(#loc76)
          %16 = cir.load %4 : !cir.ptr<!s32i>, !s32i loc(#loc75)
          %17 = cir.binop(mul, %15, %16) nsw : !s32i loc(#loc76)
          cir.store %17, %14 : !s32i, !cir.ptr<!s32i> loc(#loc142)
          %18 = cir.load %14 : !cir.ptr<!s32i>, !s32i loc(#loc77)
          cir.call @printIntLine(%18) : (!s32i) -> () loc(#loc78)
        } else {
          %14 = cir.get_global @".str.4" : !cir.ptr<!cir.array<!s8i x 54>> loc(#loc46)
          %15 = cir.cast(array_to_ptrdecay, %14 : !cir.ptr<!cir.array<!s8i x 54>>), !cir.ptr<!s8i> loc(#loc46)
          cir.call @printLine(%15) : (!cir.ptr<!s8i>) -> () loc(#loc79)
        } loc(#loc141)
      } loc(#loc138)
    } loc(#loc136)
    cir.return loc(#loc48)
  } loc(#loc131)
  cir.func @_ZN42CWE190_Integer_Overflow__int_max_square_334goodEv() extra(#fn_attr) {
    cir.call @_ZN42CWE190_Integer_Overflow__int_max_square_33L7goodG2BEv() : () -> () loc(#loc82)
    cir.call @_ZN42CWE190_Integer_Overflow__int_max_square_33L7goodB2GEv() : () -> () loc(#loc83)
    cir.return loc(#loc81)
  } loc(#loc143)
  cir.func private @srand(!u32i) extra(#fn_attr1) loc(#loc144)
  cir.func private @time(!cir.ptr<!s64i>) -> !s64i extra(#fn_attr1) loc(#loc145)
  cir.func private @printLine(!cir.ptr<!s8i>) loc(#loc146)
  cir.global "private" constant cir_private dsolocal @".str" = #cir.const_array<"Calling good()...\00" : !cir.array<!s8i x 18>> : !cir.array<!s8i x 18> {alignment = 1 : i64} loc(#loc90)
  cir.global "private" constant cir_private dsolocal @".str.1" = #cir.const_array<"Finished good()\00" : !cir.array<!s8i x 16>> : !cir.array<!s8i x 16> {alignment = 1 : i64} loc(#loc91)
  cir.global "private" constant cir_private dsolocal @".str.2" = #cir.const_array<"Calling bad()...\00" : !cir.array<!s8i x 17>> : !cir.array<!s8i x 17> {alignment = 1 : i64} loc(#loc92)
  cir.global "private" constant cir_private dsolocal @".str.3" = #cir.const_array<"Finished bad()\00" : !cir.array<!s8i x 15>> : !cir.array<!s8i x 15> {alignment = 1 : i64} loc(#loc93)
  cir.func @main(%arg0: !s32i loc(fused[#loc96, #loc97]), %arg1: !cir.ptr<!cir.ptr<!s8i>> loc(fused[#loc98, #loc99])) -> !s32i extra(#fn_attr) {
    %0 = cir.alloca !s32i, !cir.ptr<!s32i>, ["argc", init] {alignment = 4 : i64} loc(#loc148)
    %1 = cir.alloca !cir.ptr<!cir.ptr<!s8i>>, !cir.ptr<!cir.ptr<!cir.ptr<!s8i>>>, ["argv", init] {alignment = 8 : i64} loc(#loc149)
    %2 = cir.alloca !s32i, !cir.ptr<!s32i>, ["__retval"] {alignment = 4 : i64} loc(#loc95)
    cir.store %arg0, %0 : !s32i, !cir.ptr<!s32i> loc(#loc100)
    cir.store %arg1, %1 : !cir.ptr<!cir.ptr<!s8i>>, !cir.ptr<!cir.ptr<!cir.ptr<!s8i>>> loc(#loc100)
    %3 = cir.const #cir.ptr<null> : !cir.ptr<!s64i> loc(#loc101)
    %4 = cir.call @time(%3) : (!cir.ptr<!s64i>) -> !s64i extra(#fn_attr1) loc(#loc102)
    %5 = cir.cast(integral, %4 : !s64i), !u32i loc(#loc102)
    cir.call @srand(%5) : (!u32i) -> () extra(#fn_attr1) loc(#loc103)
    %6 = cir.get_global @".str" : !cir.ptr<!cir.array<!s8i x 18>> loc(#loc90)
    %7 = cir.cast(array_to_ptrdecay, %6 : !cir.ptr<!cir.array<!s8i x 18>>), !cir.ptr<!s8i> loc(#loc90)
    cir.call @printLine(%7) : (!cir.ptr<!s8i>) -> () loc(#loc104)
    cir.call @_ZN42CWE190_Integer_Overflow__int_max_square_334goodEv() : () -> () loc(#loc105)
    %8 = cir.get_global @".str.1" : !cir.ptr<!cir.array<!s8i x 16>> loc(#loc91)
    %9 = cir.cast(array_to_ptrdecay, %8 : !cir.ptr<!cir.array<!s8i x 16>>), !cir.ptr<!s8i> loc(#loc91)
    cir.call @printLine(%9) : (!cir.ptr<!s8i>) -> () loc(#loc106)
    %10 = cir.get_global @".str.2" : !cir.ptr<!cir.array<!s8i x 17>> loc(#loc92)
    %11 = cir.cast(array_to_ptrdecay, %10 : !cir.ptr<!cir.array<!s8i x 17>>), !cir.ptr<!s8i> loc(#loc92)
    cir.call @printLine(%11) : (!cir.ptr<!s8i>) -> () loc(#loc107)
    cir.call @_ZN42CWE190_Integer_Overflow__int_max_square_333badEv() : () -> () loc(#loc108)
    %12 = cir.get_global @".str.3" : !cir.ptr<!cir.array<!s8i x 15>> loc(#loc93)
    %13 = cir.cast(array_to_ptrdecay, %12 : !cir.ptr<!cir.array<!s8i x 15>>), !cir.ptr<!s8i> loc(#loc93)
    cir.call @printLine(%13) : (!cir.ptr<!s8i>) -> () loc(#loc109)
    %14 = cir.const #cir.int<0> : !s32i loc(#loc110)
    cir.store %14, %2 : !s32i, !cir.ptr<!s32i> loc(#loc150)
    %15 = cir.load %2 : !cir.ptr<!s32i>, !s32i loc(#loc150)
    cir.return %15 : !s32i loc(#loc150)
  } loc(#loc147)
} loc(#loc)
#loc = loc("/home/ladisgin/git_proj/juliet-c/testcases/CWE190_Integer_Overflow/s03/CWE190_Integer_Overflow__int_max_square_33.cpp":0:0)
#loc1 = loc("../../../testcasesupport/std_testcase_io.h":18:1)
#loc2 = loc("../../../testcasesupport/std_testcase_io.h":18:33)
#loc3 = loc("CWE190_Integer_Overflow__int_max_square_33.cpp":27:1)
#loc4 = loc("CWE190_Integer_Overflow__int_max_square_33.cpp":43:1)
#loc5 = loc("CWE190_Integer_Overflow__int_max_square_33.cpp":29:5)
#loc6 = loc("CWE190_Integer_Overflow__int_max_square_33.cpp":29:9)
#loc7 = loc("CWE190_Integer_Overflow__int_max_square_33.cpp":30:5)
#loc8 = loc("CWE190_Integer_Overflow__int_max_square_33.cpp":30:20)
#loc9 = loc("CWE190_Integer_Overflow__int_max_square_33.cpp":32:12)
#loc10 = loc("CWE190_Integer_Overflow__int_max_square_33.cpp":32:5)
#loc11 = loc("CWE190_Integer_Overflow__int_max_square_33.cpp":34:12)
#loc12 = loc("CWE190_Integer_Overflow__int_max_square_33.cpp":34:5)
#loc13 = loc("CWE190_Integer_Overflow__int_max_square_33.cpp":35:5)
#loc14 = loc("CWE190_Integer_Overflow__int_max_square_33.cpp":42:5)
#loc15 = loc("CWE190_Integer_Overflow__int_max_square_33.cpp":36:9)
#loc16 = loc("CWE190_Integer_Overflow__int_max_square_33.cpp":36:20)
#loc17 = loc("CWE190_Integer_Overflow__int_max_square_33.cpp":37:9)
#loc18 = loc("CWE190_Integer_Overflow__int_max_square_33.cpp":41:9)
#loc19 = loc("CWE190_Integer_Overflow__int_max_square_33.cpp":39:13)
#loc20 = loc("CWE190_Integer_Overflow__int_max_square_33.cpp":39:33)
#loc21 = loc("CWE190_Integer_Overflow__int_max_square_33.cpp":39:26)
#loc22 = loc("CWE190_Integer_Overflow__int_max_square_33.cpp":40:26)
#loc23 = loc("CWE190_Integer_Overflow__int_max_square_33.cpp":40:13)
#loc24 = loc("CWE190_Integer_Overflow__int_max_square_33.cpp":50:1)
#loc25 = loc("CWE190_Integer_Overflow__int_max_square_33.cpp":66:1)
#loc26 = loc("CWE190_Integer_Overflow__int_max_square_33.cpp":52:5)
#loc27 = loc("CWE190_Integer_Overflow__int_max_square_33.cpp":52:9)
#loc28 = loc("CWE190_Integer_Overflow__int_max_square_33.cpp":53:5)
#loc29 = loc("CWE190_Integer_Overflow__int_max_square_33.cpp":53:20)
#loc30 = loc("CWE190_Integer_Overflow__int_max_square_33.cpp":55:12)
#loc31 = loc("CWE190_Integer_Overflow__int_max_square_33.cpp":55:5)
#loc32 = loc("CWE190_Integer_Overflow__int_max_square_33.cpp":57:12)
#loc33 = loc("CWE190_Integer_Overflow__int_max_square_33.cpp":57:5)
#loc34 = loc("CWE190_Integer_Overflow__int_max_square_33.cpp":58:5)
#loc35 = loc("CWE190_Integer_Overflow__int_max_square_33.cpp":65:5)
#loc36 = loc("CWE190_Integer_Overflow__int_max_square_33.cpp":59:9)
#loc37 = loc("CWE190_Integer_Overflow__int_max_square_33.cpp":59:20)
#loc38 = loc("CWE190_Integer_Overflow__int_max_square_33.cpp":60:9)
#loc39 = loc("CWE190_Integer_Overflow__int_max_square_33.cpp":64:9)
#loc40 = loc("CWE190_Integer_Overflow__int_max_square_33.cpp":62:13)
#loc41 = loc("CWE190_Integer_Overflow__int_max_square_33.cpp":62:33)
#loc42 = loc("CWE190_Integer_Overflow__int_max_square_33.cpp":62:26)
#loc43 = loc("CWE190_Integer_Overflow__int_max_square_33.cpp":63:26)
#loc44 = loc("CWE190_Integer_Overflow__int_max_square_33.cpp":63:13)
#loc45 = loc("/usr/include/bits/mathcalls.h":158:1)
#loc46 = loc("CWE190_Integer_Overflow__int_max_square_33.cpp":87:23)
#loc47 = loc("CWE190_Integer_Overflow__int_max_square_33.cpp":69:1)
#loc48 = loc("CWE190_Integer_Overflow__int_max_square_33.cpp":90:1)
#loc49 = loc("CWE190_Integer_Overflow__int_max_square_33.cpp":71:5)
#loc50 = loc("CWE190_Integer_Overflow__int_max_square_33.cpp":71:9)
#loc51 = loc("CWE190_Integer_Overflow__int_max_square_33.cpp":72:5)
#loc52 = loc("CWE190_Integer_Overflow__int_max_square_33.cpp":72:20)
#loc53 = loc("CWE190_Integer_Overflow__int_max_square_33.cpp":74:12)
#loc54 = loc("CWE190_Integer_Overflow__int_max_square_33.cpp":74:5)
#loc55 = loc("CWE190_Integer_Overflow__int_max_square_33.cpp":76:12)
#loc56 = loc("CWE190_Integer_Overflow__int_max_square_33.cpp":76:5)
#loc57 = loc("CWE190_Integer_Overflow__int_max_square_33.cpp":77:5)
#loc58 = loc("CWE190_Integer_Overflow__int_max_square_33.cpp":89:5)
#loc59 = loc("CWE190_Integer_Overflow__int_max_square_33.cpp":78:9)
#loc60 = loc("CWE190_Integer_Overflow__int_max_square_33.cpp":78:20)
#loc61 = loc("CWE190_Integer_Overflow__int_max_square_33.cpp":80:9)
#loc62 = loc("CWE190_Integer_Overflow__int_max_square_33.cpp":88:9)
#loc63 = loc("CWE190_Integer_Overflow__int_max_square_33.cpp":80:13)
#loc64 = loc("CWE190_Integer_Overflow__int_max_square_33.cpp":80:20)
#loc65 = loc("CWE190_Integer_Overflow__int_max_square_33.cpp":80:28)
#loc66 = loc("CWE190_Integer_Overflow__int_max_square_33.cpp":80:35)
#loc67 = loc("CWE190_Integer_Overflow__int_max_square_33.cpp":80:31)
#loc68 = loc("CWE190_Integer_Overflow__int_max_square_33.cpp":80:49)
#loc69 = loc("CWE190_Integer_Overflow__int_max_square_33.cpp":80:62)
#loc70 = loc("CWE190_Integer_Overflow__int_max_square_33.cpp":80:69)
#loc71 = loc("CWE190_Integer_Overflow__int_max_square_33.cpp":81:9)
#loc72 = loc("CWE190_Integer_Overflow__int_max_square_33.cpp":84:9)
#loc73 = loc("CWE190_Integer_Overflow__int_max_square_33.cpp":86:9)
#loc74 = loc("CWE190_Integer_Overflow__int_max_square_33.cpp":82:13)
#loc75 = loc("CWE190_Integer_Overflow__int_max_square_33.cpp":82:33)
#loc76 = loc("CWE190_Integer_Overflow__int_max_square_33.cpp":82:26)
#loc77 = loc("CWE190_Integer_Overflow__int_max_square_33.cpp":83:26)
#loc78 = loc("CWE190_Integer_Overflow__int_max_square_33.cpp":83:13)
#loc79 = loc("CWE190_Integer_Overflow__int_max_square_33.cpp":87:13)
#loc80 = loc("CWE190_Integer_Overflow__int_max_square_33.cpp":92:1)
#loc81 = loc("CWE190_Integer_Overflow__int_max_square_33.cpp":96:1)
#loc82 = loc("CWE190_Integer_Overflow__int_max_square_33.cpp":94:5)
#loc83 = loc("CWE190_Integer_Overflow__int_max_square_33.cpp":95:5)
#loc84 = loc("/usr/include/stdlib.h":575:1)
#loc85 = loc("/usr/include/stdlib.h":575:41)
#loc86 = loc("/usr/include/time.h":76:1)
#loc87 = loc("/usr/include/time.h":76:38)
#loc88 = loc("../../../testcasesupport/std_testcase_io.h":14:1)
#loc89 = loc("../../../testcasesupport/std_testcase_io.h":14:33)
#loc90 = loc("CWE190_Integer_Overflow__int_max_square_33.cpp":115:15)
#loc91 = loc("CWE190_Integer_Overflow__int_max_square_33.cpp":117:15)
#loc92 = loc("CWE190_Integer_Overflow__int_max_square_33.cpp":120:15)
#loc93 = loc("CWE190_Integer_Overflow__int_max_square_33.cpp":122:15)
#loc94 = loc("CWE190_Integer_Overflow__int_max_square_33.cpp":110:1)
#loc95 = loc("CWE190_Integer_Overflow__int_max_square_33.cpp":125:1)
#loc100 = loc("CWE190_Integer_Overflow__int_max_square_33.cpp":111:1)
#loc101 = loc("CWE190_Integer_Overflow__int_max_square_33.cpp":113:27)
#loc102 = loc("CWE190_Integer_Overflow__int_max_square_33.cpp":113:22)
#loc103 = loc("CWE190_Integer_Overflow__int_max_square_33.cpp":113:5)
#loc104 = loc("CWE190_Integer_Overflow__int_max_square_33.cpp":115:5)
#loc105 = loc("CWE190_Integer_Overflow__int_max_square_33.cpp":116:5)
#loc106 = loc("CWE190_Integer_Overflow__int_max_square_33.cpp":117:5)
#loc107 = loc("CWE190_Integer_Overflow__int_max_square_33.cpp":120:5)
#loc108 = loc("CWE190_Integer_Overflow__int_max_square_33.cpp":121:5)
#loc109 = loc("CWE190_Integer_Overflow__int_max_square_33.cpp":122:5)
#loc110 = loc("CWE190_Integer_Overflow__int_max_square_33.cpp":124:12)
#loc111 = loc("CWE190_Integer_Overflow__int_max_square_33.cpp":124:5)
#loc112 = loc(fused[#loc1, #loc2])
#loc113 = loc(fused[#loc3, #loc4])
#loc114 = loc(fused[#loc5, #loc6])
#loc115 = loc(fused[#loc7, #loc8])
#loc116 = loc(fused[#loc10, #loc9])
#loc117 = loc(fused[#loc12, #loc11])
#loc118 = loc(fused[#loc13, #loc14])
#loc119 = loc(fused[#loc15, #loc16])
#loc120 = loc(fused[#loc17, #loc18])
#loc121 = loc(fused[#loc19, #loc20])
#loc122 = loc(fused[#loc24, #loc25])
#loc123 = loc(fused[#loc26, #loc27])
#loc124 = loc(fused[#loc28, #loc29])
#loc125 = loc(fused[#loc31, #loc30])
#loc126 = loc(fused[#loc33, #loc32])
#loc127 = loc(fused[#loc34, #loc35])
#loc128 = loc(fused[#loc36, #loc37])
#loc129 = loc(fused[#loc38, #loc39])
#loc130 = loc(fused[#loc40, #loc41])
#loc131 = loc(fused[#loc47, #loc48])
#loc132 = loc(fused[#loc49, #loc50])
#loc133 = loc(fused[#loc51, #loc52])
#loc134 = loc(fused[#loc54, #loc53])
#loc135 = loc(fused[#loc56, #loc55])
#loc136 = loc(fused[#loc57, #loc58])
#loc137 = loc(fused[#loc59, #loc60])
#loc138 = loc(fused[#loc61, #loc62])
#loc139 = loc(fused[#loc63, #loc64])
#loc140 = loc(fused[#loc67, #loc70])
#loc141 = loc(fused[#loc71, #loc72, #loc73, #loc62])
#loc142 = loc(fused[#loc74, #loc75])
#loc143 = loc(fused[#loc80, #loc81])
#loc144 = loc(fused[#loc84, #loc85])
#loc145 = loc(fused[#loc86, #loc87])
#loc146 = loc(fused[#loc88, #loc89])
#loc147 = loc(fused[#loc94, #loc95])
#loc150 = loc(fused[#loc111, #loc110])
