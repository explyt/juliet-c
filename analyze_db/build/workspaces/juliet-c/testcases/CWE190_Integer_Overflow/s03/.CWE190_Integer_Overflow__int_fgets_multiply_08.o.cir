!s32i = !cir.int<s, 32>
!s64i = !cir.int<s, 64>
!s8i = !cir.int<s, 8>
!ty__IO_codecvt = !cir.record<struct "_IO_codecvt" incomplete>
!ty__IO_marker = !cir.record<struct "_IO_marker" incomplete>
!ty__IO_wide_data = !cir.record<struct "_IO_wide_data" incomplete>
!u16i = !cir.int<u, 16>
!u64i = !cir.int<u, 64>
!void = !cir.void
#fn_attr = #cir<extra({nothrow = #cir.nothrow})>
#fn_attr1 = #cir<extra({inline = #cir.inline<no>, nothrow = #cir.nothrow, optnone = #cir.optnone, uwtable = #cir.uwtable<async>})>
!ty__IO_FILE = !cir.record<struct "_IO_FILE" {!s32i, !cir.ptr<!s8i>, !cir.ptr<!s8i>, !cir.ptr<!s8i>, !cir.ptr<!s8i>, !cir.ptr<!s8i>, !cir.ptr<!s8i>, !cir.ptr<!s8i>, !cir.ptr<!s8i>, !cir.ptr<!s8i>, !cir.ptr<!s8i>, !cir.ptr<!s8i>, !cir.ptr<!ty__IO_marker>, !cir.ptr<!cir.record<struct "_IO_FILE">>, !s32i, !s32i, !s64i, !u16i, !s8i, !cir.array<!s8i x 1>, !cir.ptr<!void>, !s64i, !cir.ptr<!ty__IO_codecvt>, !cir.ptr<!ty__IO_wide_data>, !cir.ptr<!cir.record<struct "_IO_FILE">>, !cir.ptr<!void>, !u64i, !s32i, !cir.array<!s8i x 20>} #cir.record.decl.ast>
module @"/workspaces/juliet-c/testcases/CWE190_Integer_Overflow/s03/CWE190_Integer_Overflow__int_fgets_multiply_08.c" attributes {cir.lang = #cir.lang<c>, cir.sob = #cir.signed_overflow_behavior<undefined>, cir.triple = "x86_64-unknown-linux-gnu", cir.type_size_info = #cir.type_size_info<char = 8, int = 32, size_t = 64>, cir.uwtable = #cir.uwtable<async>, dlti.dl_spec = #dlti.dl_spec<i8 = dense<8> : vector<2xi64>, i32 = dense<32> : vector<2xi64>, i16 = dense<16> : vector<2xi64>, f80 = dense<128> : vector<2xi64>, !llvm.ptr = dense<64> : vector<4xi64>, i1 = dense<8> : vector<2xi64>, i64 = dense<64> : vector<2xi64>, !llvm.ptr<270> = dense<32> : vector<4xi64>, !llvm.ptr<272> = dense<64> : vector<4xi64>, i128 = dense<128> : vector<2xi64>, f64 = dense<64> : vector<2xi64>, f16 = dense<16> : vector<2xi64>, !llvm.ptr<271> = dense<32> : vector<4xi64>, f128 = dense<128> : vector<2xi64>, "dlti.stack_alignment" = 128 : i64, "dlti.endianness" = "little", "dlti.mangling_mode" = "e">} {
  cir.func private @fgets(!cir.ptr<!s8i>, !s32i, !cir.ptr<!ty__IO_FILE>) -> !cir.ptr<!s8i> loc(#loc253)
  cir.global "private" external @stdin : !cir.ptr<!ty__IO_FILE> {alignment = 8 : i64} loc(#loc254)
  cir.func private @atoi(!cir.ptr<!s8i>) -> !s32i extra(#fn_attr) loc(#loc255)
  cir.func private @printLine(!cir.ptr<!s8i>) loc(#loc256)
  cir.global "private" constant cir_private dsolocal @".str" = #cir.const_array<"fgets() failed.\00" : !cir.array<!s8i x 16>> : !cir.array<!s8i x 16> {alignment = 1 : i64} loc(#loc9)
  cir.func private @printIntLine(!s32i) loc(#loc257)
  cir.func no_proto @CWE190_Integer_Overflow__int_fgets_multiply_08_bad() extra(#fn_attr1) {
    %0 = cir.alloca !cir.array<!s8i x 14>, !cir.ptr<!cir.array<!s8i x 14>>, ["inputBuffer"] {alignment = 1 : i64} loc(#loc259)
    %1 = cir.alloca !s32i, !cir.ptr<!s32i>, ["result", init] {alignment = 4 : i64} loc(#loc260)
    %2 = cir.alloca !s32i, !cir.ptr<!s32i>, ["data"] {alignment = 4 : i64} loc(#loc261)
    %3 = cir.const #cir.int<0> : !s32i loc(#loc20)
    cir.store %3, %2 : !s32i, !cir.ptr<!s32i> loc(#loc262)
    cir.br ^bb1 loc(#loc263)
  ^bb1:  // pred: ^bb0
    %4 = cir.get_global @staticReturnsTrue : !cir.ptr<!cir.func<() -> !s32i>> loc(#loc264)
    %5 = cir.call %4() : (!cir.ptr<!cir.func<() -> !s32i>>) -> !s32i loc(#loc24)
    %6 = cir.cast(int_to_bool, %5 : !s32i), !cir.bool loc(#loc24)
    cir.brcond %6 ^bb2, ^bb10 loc(#loc265)
  ^bb2:  // pred: ^bb1
    cir.br ^bb3 loc(#loc266)
  ^bb3:  // pred: ^bb2
    %7 = cir.const #cir.zero : !cir.array<!s8i x 14> loc(#loc259)
    cir.store %7, %0 : !cir.array<!s8i x 14>, !cir.ptr<!cir.array<!s8i x 14>> loc(#loc259)
    cir.br ^bb4 loc(#loc267)
  ^bb4:  // pred: ^bb3
    %8 = cir.cast(array_to_ptrdecay, %0 : !cir.ptr<!cir.array<!s8i x 14>>), !cir.ptr<!s8i> loc(#loc31)
    %9 = cir.const #cir.int<3> : !s32i loc(#loc32)
    %10 = cir.cast(integral, %9 : !s32i), !u64i loc(#loc32)
    %11 = cir.const #cir.int<4> : !u64i loc(#loc32)
    %12 = cir.binop(mul, %10, %11) : !u64i loc(#loc32)
    %13 = cir.const #cir.int<2> : !s32i loc(#loc32)
    %14 = cir.cast(integral, %13 : !s32i), !u64i loc(#loc32)
    %15 = cir.binop(add, %12, %14) : !u64i loc(#loc32)
    %16 = cir.cast(integral, %15 : !u64i), !s32i loc(#loc32)
    %17 = cir.get_global @stdin : !cir.ptr<!cir.ptr<!ty__IO_FILE>> loc(#loc254)
    %18 = cir.load %17 : !cir.ptr<!cir.ptr<!ty__IO_FILE>>, !cir.ptr<!ty__IO_FILE> loc(#loc33)
    %19 = cir.call @fgets(%8, %16, %18) : (!cir.ptr<!s8i>, !s32i, !cir.ptr<!ty__IO_FILE>) -> !cir.ptr<!s8i> loc(#loc34)
    %20 = cir.const #cir.ptr<null> : !cir.ptr<!void> loc(#loc35)
    %21 = cir.cast(bitcast, %20 : !cir.ptr<!void>), !cir.ptr<!s8i> loc(#loc35)
    %22 = cir.cmp(ne, %19, %21) : !cir.ptr<!s8i>, !cir.bool loc(#loc268)
    cir.brcond %22 ^bb5, ^bb6 loc(#loc269)
  ^bb5:  // pred: ^bb4
    %23 = cir.cast(array_to_ptrdecay, %0 : !cir.ptr<!cir.array<!s8i x 14>>), !cir.ptr<!s8i> loc(#loc39)
    %24 = cir.call @atoi(%23) : (!cir.ptr<!s8i>) -> !s32i side_effect(pure) extra(#fn_attr) loc(#loc40)
    cir.store %24, %2 : !s32i, !cir.ptr<!s32i> loc(#loc270)
    cir.br ^bb7 loc(#loc37)
  ^bb6:  // pred: ^bb4
    %25 = cir.get_global @".str" : !cir.ptr<!cir.array<!s8i x 16>> loc(#loc9)
    %26 = cir.cast(array_to_ptrdecay, %25 : !cir.ptr<!cir.array<!s8i x 16>>), !cir.ptr<!s8i> loc(#loc9)
    cir.call @printLine(%26) : (!cir.ptr<!s8i>) -> () loc(#loc43)
    cir.br ^bb7 loc(#loc30)
  ^bb7:  // 2 preds: ^bb5, ^bb6
    cir.br ^bb8 loc(#loc30)
  ^bb8:  // pred: ^bb7
    cir.br ^bb9 loc(#loc28)
  ^bb9:  // pred: ^bb8
    cir.br ^bb10 loc(#loc23)
  ^bb10:  // 2 preds: ^bb1, ^bb9
    cir.br ^bb11 loc(#loc23)
  ^bb11:  // pred: ^bb10
    cir.br ^bb12 loc(#loc271)
  ^bb12:  // pred: ^bb11
    %27 = cir.get_global @staticReturnsTrue : !cir.ptr<!cir.func<() -> !s32i>> loc(#loc272)
    %28 = cir.call %27() : (!cir.ptr<!cir.func<() -> !s32i>>) -> !s32i loc(#loc46)
    %29 = cir.cast(int_to_bool, %28 : !s32i), !cir.bool loc(#loc46)
    cir.brcond %29 ^bb13, ^bb18 loc(#loc273)
  ^bb13:  // pred: ^bb12
    cir.br ^bb14 loc(#loc274)
  ^bb14:  // pred: ^bb13
    %30 = cir.load %2 : !cir.ptr<!s32i>, !s32i loc(#loc51)
    %31 = cir.const #cir.int<0> : !s32i loc(#loc52)
    %32 = cir.cmp(gt, %30, %31) : !s32i, !cir.bool loc(#loc275)
    cir.brcond %32 ^bb15, ^bb16 loc(#loc276)
  ^bb15:  // pred: ^bb14
    %33 = cir.load %2 : !cir.ptr<!s32i>, !s32i loc(#loc54)
    %34 = cir.const #cir.int<2> : !s32i loc(#loc17)
    %35 = cir.binop(mul, %33, %34) nsw : !s32i loc(#loc54)
    cir.store %35, %1 : !s32i, !cir.ptr<!s32i> loc(#loc260)
    %36 = cir.load %1 : !cir.ptr<!s32i>, !s32i loc(#loc55)
    cir.call @printIntLine(%36) : (!s32i) -> () loc(#loc56)
    cir.br ^bb16 loc(#loc50)
  ^bb16:  // 2 preds: ^bb14, ^bb15
    cir.br ^bb17 loc(#loc50)
  ^bb17:  // pred: ^bb16
    cir.br ^bb18 loc(#loc45)
  ^bb18:  // 2 preds: ^bb12, ^bb17
    cir.br ^bb19 loc(#loc45)
  ^bb19:  // pred: ^bb18
    cir.return loc(#loc13)
  } loc(#loc258)
  cir.func no_proto @CWE190_Integer_Overflow__int_fgets_multiply_08_good() extra(#fn_attr1) {
    %0 = cir.get_global @goodB2G1 : !cir.ptr<!cir.func<()>> loc(#loc278)
    cir.call %0() : (!cir.ptr<!cir.func<()>>) -> () loc(#loc59)
    %1 = cir.get_global @goodB2G2 : !cir.ptr<!cir.func<()>> loc(#loc279)
    cir.call %1() : (!cir.ptr<!cir.func<()>>) -> () loc(#loc61)
    %2 = cir.get_global @goodG2B1 : !cir.ptr<!cir.func<()>> loc(#loc280)
    cir.call %2() : (!cir.ptr<!cir.func<()>>) -> () loc(#loc63)
    %3 = cir.get_global @goodG2B2 : !cir.ptr<!cir.func<()>> loc(#loc281)
    cir.call %3() : (!cir.ptr<!cir.func<()>>) -> () loc(#loc65)
    cir.return loc(#loc58)
  } loc(#loc277)
  cir.func no_proto internal private @staticReturnsTrue() -> !s32i extra(#fn_attr1) {
    %0 = cir.alloca !s32i, !cir.ptr<!s32i>, ["__retval"] {alignment = 4 : i64} loc(#loc68)
    %1 = cir.const #cir.int<1> : !s32i loc(#loc69)
    cir.store %1, %0 : !s32i, !cir.ptr<!s32i> loc(#loc283)
    %2 = cir.load %0 : !cir.ptr<!s32i>, !s32i loc(#loc283)
    cir.return %2 : !s32i loc(#loc283)
  } loc(#loc282)
  cir.global "private" constant cir_private dsolocal @".str.1" = #cir.const_array<"Benign, fixed string\00" : !cir.array<!s8i x 21>> : !cir.array<!s8i x 21> {alignment = 1 : i64} loc(#loc71)
  cir.global "private" constant cir_private dsolocal @".str.2" = #cir.const_array<"data value is too large to perform arithmetic safely.\00" : !cir.array<!s8i x 54>> : !cir.array<!s8i x 54> {alignment = 1 : i64} loc(#loc72)
  cir.func no_proto internal private @goodB2G1() extra(#fn_attr1) {
    %0 = cir.alloca !cir.array<!s8i x 14>, !cir.ptr<!cir.array<!s8i x 14>>, ["inputBuffer"] {alignment = 1 : i64} loc(#loc285)
    %1 = cir.alloca !s32i, !cir.ptr<!s32i>, ["result", init] {alignment = 4 : i64} loc(#loc286)
    %2 = cir.alloca !s32i, !cir.ptr<!s32i>, ["data"] {alignment = 4 : i64} loc(#loc287)
    %3 = cir.const #cir.int<0> : !s32i loc(#loc81)
    cir.store %3, %2 : !s32i, !cir.ptr<!s32i> loc(#loc288)
    cir.br ^bb1 loc(#loc289)
  ^bb1:  // pred: ^bb0
    %4 = cir.get_global @staticReturnsTrue : !cir.ptr<!cir.func<() -> !s32i>> loc(#loc290)
    %5 = cir.call @staticReturnsTrue() : () -> !s32i loc(#loc85)
    %6 = cir.cast(int_to_bool, %5 : !s32i), !cir.bool loc(#loc85)
    cir.brcond %6 ^bb2, ^bb10 loc(#loc291)
  ^bb2:  // pred: ^bb1
    cir.br ^bb3 loc(#loc292)
  ^bb3:  // pred: ^bb2
    %7 = cir.const #cir.zero : !cir.array<!s8i x 14> loc(#loc285)
    cir.store %7, %0 : !cir.array<!s8i x 14>, !cir.ptr<!cir.array<!s8i x 14>> loc(#loc285)
    cir.br ^bb4 loc(#loc293)
  ^bb4:  // pred: ^bb3
    %8 = cir.cast(array_to_ptrdecay, %0 : !cir.ptr<!cir.array<!s8i x 14>>), !cir.ptr<!s8i> loc(#loc92)
    %9 = cir.const #cir.int<3> : !s32i loc(#loc93)
    %10 = cir.cast(integral, %9 : !s32i), !u64i loc(#loc93)
    %11 = cir.const #cir.int<4> : !u64i loc(#loc93)
    %12 = cir.binop(mul, %10, %11) : !u64i loc(#loc93)
    %13 = cir.const #cir.int<2> : !s32i loc(#loc93)
    %14 = cir.cast(integral, %13 : !s32i), !u64i loc(#loc93)
    %15 = cir.binop(add, %12, %14) : !u64i loc(#loc93)
    %16 = cir.cast(integral, %15 : !u64i), !s32i loc(#loc93)
    %17 = cir.get_global @stdin : !cir.ptr<!cir.ptr<!ty__IO_FILE>> loc(#loc254)
    %18 = cir.load %17 : !cir.ptr<!cir.ptr<!ty__IO_FILE>>, !cir.ptr<!ty__IO_FILE> loc(#loc94)
    %19 = cir.call @fgets(%8, %16, %18) : (!cir.ptr<!s8i>, !s32i, !cir.ptr<!ty__IO_FILE>) -> !cir.ptr<!s8i> loc(#loc95)
    %20 = cir.const #cir.ptr<null> : !cir.ptr<!void> loc(#loc96)
    %21 = cir.cast(bitcast, %20 : !cir.ptr<!void>), !cir.ptr<!s8i> loc(#loc96)
    %22 = cir.cmp(ne, %19, %21) : !cir.ptr<!s8i>, !cir.bool loc(#loc294)
    cir.brcond %22 ^bb5, ^bb6 loc(#loc295)
  ^bb5:  // pred: ^bb4
    %23 = cir.cast(array_to_ptrdecay, %0 : !cir.ptr<!cir.array<!s8i x 14>>), !cir.ptr<!s8i> loc(#loc100)
    %24 = cir.call @atoi(%23) : (!cir.ptr<!s8i>) -> !s32i side_effect(pure) extra(#fn_attr) loc(#loc101)
    cir.store %24, %2 : !s32i, !cir.ptr<!s32i> loc(#loc296)
    cir.br ^bb7 loc(#loc98)
  ^bb6:  // pred: ^bb4
    %25 = cir.get_global @".str" : !cir.ptr<!cir.array<!s8i x 16>> loc(#loc104)
    %26 = cir.cast(array_to_ptrdecay, %25 : !cir.ptr<!cir.array<!s8i x 16>>), !cir.ptr<!s8i> loc(#loc104)
    cir.call @printLine(%26) : (!cir.ptr<!s8i>) -> () loc(#loc105)
    cir.br ^bb7 loc(#loc91)
  ^bb7:  // 2 preds: ^bb5, ^bb6
    cir.br ^bb8 loc(#loc91)
  ^bb8:  // pred: ^bb7
    cir.br ^bb9 loc(#loc89)
  ^bb9:  // pred: ^bb8
    cir.br ^bb10 loc(#loc84)
  ^bb10:  // 2 preds: ^bb1, ^bb9
    cir.br ^bb11 loc(#loc84)
  ^bb11:  // pred: ^bb10
    cir.br ^bb12 loc(#loc297)
  ^bb12:  // pred: ^bb11
    %27 = cir.get_global @staticReturnsFalse : !cir.ptr<!cir.func<() -> !s32i>> loc(#loc298)
    %28 = cir.call %27() : (!cir.ptr<!cir.func<() -> !s32i>>) -> !s32i loc(#loc108)
    %29 = cir.cast(int_to_bool, %28 : !s32i), !cir.bool loc(#loc108)
    cir.brcond %29 ^bb13, ^bb14 loc(#loc299)
  ^bb13:  // pred: ^bb12
    %30 = cir.get_global @".str.1" : !cir.ptr<!cir.array<!s8i x 21>> loc(#loc71)
    %31 = cir.cast(array_to_ptrdecay, %30 : !cir.ptr<!cir.array<!s8i x 21>>), !cir.ptr<!s8i> loc(#loc71)
    cir.call @printLine(%31) : (!cir.ptr<!s8i>) -> () loc(#loc113)
    cir.br ^bb24 loc(#loc111)
  ^bb14:  // pred: ^bb12
    cir.br ^bb15 loc(#loc300)
  ^bb15:  // pred: ^bb14
    %32 = cir.load %2 : !cir.ptr<!s32i>, !s32i loc(#loc116)
    %33 = cir.const #cir.int<0> : !s32i loc(#loc117)
    %34 = cir.cmp(gt, %32, %33) : !s32i, !cir.bool loc(#loc301)
    cir.brcond %34 ^bb16, ^bb22 loc(#loc302)
  ^bb16:  // pred: ^bb15
    cir.br ^bb17 loc(#loc303)
  ^bb17:  // pred: ^bb16
    %35 = cir.load %2 : !cir.ptr<!s32i>, !s32i loc(#loc121)
    %36 = cir.const #cir.int<2147483647> : !s32i loc(#loc122)
    %37 = cir.const #cir.int<2> : !s32i loc(#loc123)
    %38 = cir.binop(div, %36, %37) : !s32i loc(#loc304)
    %39 = cir.cmp(lt, %35, %38) : !s32i, !cir.bool loc(#loc305)
    cir.brcond %39 ^bb18, ^bb19 loc(#loc306)
  ^bb18:  // pred: ^bb17
    %40 = cir.load %2 : !cir.ptr<!s32i>, !s32i loc(#loc128)
    %41 = cir.const #cir.int<2> : !s32i loc(#loc78)
    %42 = cir.binop(mul, %40, %41) nsw : !s32i loc(#loc128)
    cir.store %42, %1 : !s32i, !cir.ptr<!s32i> loc(#loc286)
    %43 = cir.load %1 : !cir.ptr<!s32i>, !s32i loc(#loc129)
    cir.call @printIntLine(%43) : (!s32i) -> () loc(#loc130)
    cir.br ^bb20 loc(#loc126)
  ^bb19:  // pred: ^bb17
    %44 = cir.get_global @".str.2" : !cir.ptr<!cir.array<!s8i x 54>> loc(#loc72)
    %45 = cir.cast(array_to_ptrdecay, %44 : !cir.ptr<!cir.array<!s8i x 54>>), !cir.ptr<!s8i> loc(#loc72)
    cir.call @printLine(%45) : (!cir.ptr<!s8i>) -> () loc(#loc131)
    cir.br ^bb20 loc(#loc120)
  ^bb20:  // 2 preds: ^bb18, ^bb19
    cir.br ^bb21 loc(#loc120)
  ^bb21:  // pred: ^bb20
    cir.br ^bb22 loc(#loc115)
  ^bb22:  // 2 preds: ^bb15, ^bb21
    cir.br ^bb23 loc(#loc115)
  ^bb23:  // pred: ^bb22
    cir.br ^bb24 loc(#loc107)
  ^bb24:  // 2 preds: ^bb13, ^bb23
    cir.br ^bb25 loc(#loc107)
  ^bb25:  // pred: ^bb24
    cir.return loc(#loc74)
  } loc(#loc284)
  cir.func no_proto internal private @staticReturnsFalse() -> !s32i extra(#fn_attr1) {
    %0 = cir.alloca !s32i, !cir.ptr<!s32i>, ["__retval"] {alignment = 4 : i64} loc(#loc133)
    %1 = cir.const #cir.int<0> : !s32i loc(#loc134)
    cir.store %1, %0 : !s32i, !cir.ptr<!s32i> loc(#loc308)
    %2 = cir.load %0 : !cir.ptr<!s32i>, !s32i loc(#loc308)
    cir.return %2 : !s32i loc(#loc308)
  } loc(#loc307)
  cir.func no_proto internal private @goodB2G2() extra(#fn_attr1) {
    %0 = cir.alloca !cir.array<!s8i x 14>, !cir.ptr<!cir.array<!s8i x 14>>, ["inputBuffer"] {alignment = 1 : i64} loc(#loc310)
    %1 = cir.alloca !s32i, !cir.ptr<!s32i>, ["result", init] {alignment = 4 : i64} loc(#loc311)
    %2 = cir.alloca !s32i, !cir.ptr<!s32i>, ["data"] {alignment = 4 : i64} loc(#loc312)
    %3 = cir.const #cir.int<0> : !s32i loc(#loc144)
    cir.store %3, %2 : !s32i, !cir.ptr<!s32i> loc(#loc313)
    cir.br ^bb1 loc(#loc314)
  ^bb1:  // pred: ^bb0
    %4 = cir.get_global @staticReturnsTrue : !cir.ptr<!cir.func<() -> !s32i>> loc(#loc315)
    %5 = cir.call @staticReturnsTrue() : () -> !s32i loc(#loc148)
    %6 = cir.cast(int_to_bool, %5 : !s32i), !cir.bool loc(#loc148)
    cir.brcond %6 ^bb2, ^bb10 loc(#loc316)
  ^bb2:  // pred: ^bb1
    cir.br ^bb3 loc(#loc317)
  ^bb3:  // pred: ^bb2
    %7 = cir.const #cir.zero : !cir.array<!s8i x 14> loc(#loc310)
    cir.store %7, %0 : !cir.array<!s8i x 14>, !cir.ptr<!cir.array<!s8i x 14>> loc(#loc310)
    cir.br ^bb4 loc(#loc318)
  ^bb4:  // pred: ^bb3
    %8 = cir.cast(array_to_ptrdecay, %0 : !cir.ptr<!cir.array<!s8i x 14>>), !cir.ptr<!s8i> loc(#loc155)
    %9 = cir.const #cir.int<3> : !s32i loc(#loc156)
    %10 = cir.cast(integral, %9 : !s32i), !u64i loc(#loc156)
    %11 = cir.const #cir.int<4> : !u64i loc(#loc156)
    %12 = cir.binop(mul, %10, %11) : !u64i loc(#loc156)
    %13 = cir.const #cir.int<2> : !s32i loc(#loc156)
    %14 = cir.cast(integral, %13 : !s32i), !u64i loc(#loc156)
    %15 = cir.binop(add, %12, %14) : !u64i loc(#loc156)
    %16 = cir.cast(integral, %15 : !u64i), !s32i loc(#loc156)
    %17 = cir.get_global @stdin : !cir.ptr<!cir.ptr<!ty__IO_FILE>> loc(#loc254)
    %18 = cir.load %17 : !cir.ptr<!cir.ptr<!ty__IO_FILE>>, !cir.ptr<!ty__IO_FILE> loc(#loc157)
    %19 = cir.call @fgets(%8, %16, %18) : (!cir.ptr<!s8i>, !s32i, !cir.ptr<!ty__IO_FILE>) -> !cir.ptr<!s8i> loc(#loc158)
    %20 = cir.const #cir.ptr<null> : !cir.ptr<!void> loc(#loc159)
    %21 = cir.cast(bitcast, %20 : !cir.ptr<!void>), !cir.ptr<!s8i> loc(#loc159)
    %22 = cir.cmp(ne, %19, %21) : !cir.ptr<!s8i>, !cir.bool loc(#loc319)
    cir.brcond %22 ^bb5, ^bb6 loc(#loc320)
  ^bb5:  // pred: ^bb4
    %23 = cir.cast(array_to_ptrdecay, %0 : !cir.ptr<!cir.array<!s8i x 14>>), !cir.ptr<!s8i> loc(#loc163)
    %24 = cir.call @atoi(%23) : (!cir.ptr<!s8i>) -> !s32i side_effect(pure) extra(#fn_attr) loc(#loc164)
    cir.store %24, %2 : !s32i, !cir.ptr<!s32i> loc(#loc321)
    cir.br ^bb7 loc(#loc161)
  ^bb6:  // pred: ^bb4
    %25 = cir.get_global @".str" : !cir.ptr<!cir.array<!s8i x 16>> loc(#loc167)
    %26 = cir.cast(array_to_ptrdecay, %25 : !cir.ptr<!cir.array<!s8i x 16>>), !cir.ptr<!s8i> loc(#loc167)
    cir.call @printLine(%26) : (!cir.ptr<!s8i>) -> () loc(#loc168)
    cir.br ^bb7 loc(#loc154)
  ^bb7:  // 2 preds: ^bb5, ^bb6
    cir.br ^bb8 loc(#loc154)
  ^bb8:  // pred: ^bb7
    cir.br ^bb9 loc(#loc152)
  ^bb9:  // pred: ^bb8
    cir.br ^bb10 loc(#loc147)
  ^bb10:  // 2 preds: ^bb1, ^bb9
    cir.br ^bb11 loc(#loc147)
  ^bb11:  // pred: ^bb10
    cir.br ^bb12 loc(#loc322)
  ^bb12:  // pred: ^bb11
    %27 = cir.get_global @staticReturnsTrue : !cir.ptr<!cir.func<() -> !s32i>> loc(#loc323)
    %28 = cir.call @staticReturnsTrue() : () -> !s32i loc(#loc171)
    %29 = cir.cast(int_to_bool, %28 : !s32i), !cir.bool loc(#loc171)
    cir.brcond %29 ^bb13, ^bb23 loc(#loc324)
  ^bb13:  // pred: ^bb12
    cir.br ^bb14 loc(#loc325)
  ^bb14:  // pred: ^bb13
    %30 = cir.load %2 : !cir.ptr<!s32i>, !s32i loc(#loc176)
    %31 = cir.const #cir.int<0> : !s32i loc(#loc177)
    %32 = cir.cmp(gt, %30, %31) : !s32i, !cir.bool loc(#loc326)
    cir.brcond %32 ^bb15, ^bb21 loc(#loc327)
  ^bb15:  // pred: ^bb14
    cir.br ^bb16 loc(#loc328)
  ^bb16:  // pred: ^bb15
    %33 = cir.load %2 : !cir.ptr<!s32i>, !s32i loc(#loc181)
    %34 = cir.const #cir.int<2147483647> : !s32i loc(#loc182)
    %35 = cir.const #cir.int<2> : !s32i loc(#loc183)
    %36 = cir.binop(div, %34, %35) : !s32i loc(#loc329)
    %37 = cir.cmp(lt, %33, %36) : !s32i, !cir.bool loc(#loc330)
    cir.brcond %37 ^bb17, ^bb18 loc(#loc331)
  ^bb17:  // pred: ^bb16
    %38 = cir.load %2 : !cir.ptr<!s32i>, !s32i loc(#loc188)
    %39 = cir.const #cir.int<2> : !s32i loc(#loc141)
    %40 = cir.binop(mul, %38, %39) nsw : !s32i loc(#loc188)
    cir.store %40, %1 : !s32i, !cir.ptr<!s32i> loc(#loc311)
    %41 = cir.load %1 : !cir.ptr<!s32i>, !s32i loc(#loc189)
    cir.call @printIntLine(%41) : (!s32i) -> () loc(#loc190)
    cir.br ^bb19 loc(#loc186)
  ^bb18:  // pred: ^bb16
    %42 = cir.get_global @".str.2" : !cir.ptr<!cir.array<!s8i x 54>> loc(#loc191)
    %43 = cir.cast(array_to_ptrdecay, %42 : !cir.ptr<!cir.array<!s8i x 54>>), !cir.ptr<!s8i> loc(#loc191)
    cir.call @printLine(%43) : (!cir.ptr<!s8i>) -> () loc(#loc192)
    cir.br ^bb19 loc(#loc180)
  ^bb19:  // 2 preds: ^bb17, ^bb18
    cir.br ^bb20 loc(#loc180)
  ^bb20:  // pred: ^bb19
    cir.br ^bb21 loc(#loc175)
  ^bb21:  // 2 preds: ^bb14, ^bb20
    cir.br ^bb22 loc(#loc175)
  ^bb22:  // pred: ^bb21
    cir.br ^bb23 loc(#loc170)
  ^bb23:  // 2 preds: ^bb12, ^bb22
    cir.br ^bb24 loc(#loc170)
  ^bb24:  // pred: ^bb23
    cir.return loc(#loc137)
  } loc(#loc309)
  cir.func no_proto internal private @goodG2B1() extra(#fn_attr1) {
    %0 = cir.alloca !s32i, !cir.ptr<!s32i>, ["result", init] {alignment = 4 : i64} loc(#loc333)
    %1 = cir.alloca !s32i, !cir.ptr<!s32i>, ["data"] {alignment = 4 : i64} loc(#loc334)
    %2 = cir.const #cir.int<0> : !s32i loc(#loc199)
    cir.store %2, %1 : !s32i, !cir.ptr<!s32i> loc(#loc335)
    cir.br ^bb1 loc(#loc336)
  ^bb1:  // pred: ^bb0
    %3 = cir.get_global @staticReturnsFalse : !cir.ptr<!cir.func<() -> !s32i>> loc(#loc337)
    %4 = cir.call @staticReturnsFalse() : () -> !s32i loc(#loc203)
    %5 = cir.cast(int_to_bool, %4 : !s32i), !cir.bool loc(#loc203)
    cir.brcond %5 ^bb2, ^bb3 loc(#loc338)
  ^bb2:  // pred: ^bb1
    %6 = cir.get_global @".str.1" : !cir.ptr<!cir.array<!s8i x 21>> loc(#loc208)
    %7 = cir.cast(array_to_ptrdecay, %6 : !cir.ptr<!cir.array<!s8i x 21>>), !cir.ptr<!s8i> loc(#loc208)
    cir.call @printLine(%7) : (!cir.ptr<!s8i>) -> () loc(#loc209)
    cir.br ^bb4 loc(#loc206)
  ^bb3:  // pred: ^bb1
    %8 = cir.const #cir.int<2> : !s32i loc(#loc210)
    cir.store %8, %1 : !s32i, !cir.ptr<!s32i> loc(#loc339)
    cir.br ^bb4 loc(#loc202)
  ^bb4:  // 2 preds: ^bb2, ^bb3
    cir.br ^bb5 loc(#loc202)
  ^bb5:  // pred: ^bb4
    cir.br ^bb6 loc(#loc340)
  ^bb6:  // pred: ^bb5
    %9 = cir.get_global @staticReturnsTrue : !cir.ptr<!cir.func<() -> !s32i>> loc(#loc341)
    %10 = cir.call @staticReturnsTrue() : () -> !s32i loc(#loc214)
    %11 = cir.cast(int_to_bool, %10 : !s32i), !cir.bool loc(#loc214)
    cir.brcond %11 ^bb7, ^bb12 loc(#loc342)
  ^bb7:  // pred: ^bb6
    cir.br ^bb8 loc(#loc343)
  ^bb8:  // pred: ^bb7
    %12 = cir.load %1 : !cir.ptr<!s32i>, !s32i loc(#loc219)
    %13 = cir.const #cir.int<0> : !s32i loc(#loc220)
    %14 = cir.cmp(gt, %12, %13) : !s32i, !cir.bool loc(#loc344)
    cir.brcond %14 ^bb9, ^bb10 loc(#loc345)
  ^bb9:  // pred: ^bb8
    %15 = cir.load %1 : !cir.ptr<!s32i>, !s32i loc(#loc222)
    %16 = cir.const #cir.int<2> : !s32i loc(#loc196)
    %17 = cir.binop(mul, %15, %16) nsw : !s32i loc(#loc222)
    cir.store %17, %0 : !s32i, !cir.ptr<!s32i> loc(#loc333)
    %18 = cir.load %0 : !cir.ptr<!s32i>, !s32i loc(#loc223)
    cir.call @printIntLine(%18) : (!s32i) -> () loc(#loc224)
    cir.br ^bb10 loc(#loc218)
  ^bb10:  // 2 preds: ^bb8, ^bb9
    cir.br ^bb11 loc(#loc218)
  ^bb11:  // pred: ^bb10
    cir.br ^bb12 loc(#loc213)
  ^bb12:  // 2 preds: ^bb6, ^bb11
    cir.br ^bb13 loc(#loc213)
  ^bb13:  // pred: ^bb12
    cir.return loc(#loc194)
  } loc(#loc332)
  cir.func no_proto internal private @goodG2B2() extra(#fn_attr1) {
    %0 = cir.alloca !s32i, !cir.ptr<!s32i>, ["result", init] {alignment = 4 : i64} loc(#loc347)
    %1 = cir.alloca !s32i, !cir.ptr<!s32i>, ["data"] {alignment = 4 : i64} loc(#loc348)
    %2 = cir.const #cir.int<0> : !s32i loc(#loc231)
    cir.store %2, %1 : !s32i, !cir.ptr<!s32i> loc(#loc349)
    cir.br ^bb1 loc(#loc350)
  ^bb1:  // pred: ^bb0
    %3 = cir.get_global @staticReturnsTrue : !cir.ptr<!cir.func<() -> !s32i>> loc(#loc351)
    %4 = cir.call @staticReturnsTrue() : () -> !s32i loc(#loc235)
    %5 = cir.cast(int_to_bool, %4 : !s32i), !cir.bool loc(#loc235)
    cir.brcond %5 ^bb2, ^bb3 loc(#loc352)
  ^bb2:  // pred: ^bb1
    %6 = cir.const #cir.int<2> : !s32i loc(#loc238)
    cir.store %6, %1 : !s32i, !cir.ptr<!s32i> loc(#loc353)
    cir.br ^bb3 loc(#loc234)
  ^bb3:  // 2 preds: ^bb1, ^bb2
    cir.br ^bb4 loc(#loc234)
  ^bb4:  // pred: ^bb3
    cir.br ^bb5 loc(#loc354)
  ^bb5:  // pred: ^bb4
    %7 = cir.get_global @staticReturnsTrue : !cir.ptr<!cir.func<() -> !s32i>> loc(#loc355)
    %8 = cir.call @staticReturnsTrue() : () -> !s32i loc(#loc242)
    %9 = cir.cast(int_to_bool, %8 : !s32i), !cir.bool loc(#loc242)
    cir.brcond %9 ^bb6, ^bb11 loc(#loc356)
  ^bb6:  // pred: ^bb5
    cir.br ^bb7 loc(#loc357)
  ^bb7:  // pred: ^bb6
    %10 = cir.load %1 : !cir.ptr<!s32i>, !s32i loc(#loc247)
    %11 = cir.const #cir.int<0> : !s32i loc(#loc248)
    %12 = cir.cmp(gt, %10, %11) : !s32i, !cir.bool loc(#loc358)
    cir.brcond %12 ^bb8, ^bb9 loc(#loc359)
  ^bb8:  // pred: ^bb7
    %13 = cir.load %1 : !cir.ptr<!s32i>, !s32i loc(#loc250)
    %14 = cir.const #cir.int<2> : !s32i loc(#loc228)
    %15 = cir.binop(mul, %13, %14) nsw : !s32i loc(#loc250)
    cir.store %15, %0 : !s32i, !cir.ptr<!s32i> loc(#loc347)
    %16 = cir.load %0 : !cir.ptr<!s32i>, !s32i loc(#loc251)
    cir.call @printIntLine(%16) : (!s32i) -> () loc(#loc252)
    cir.br ^bb9 loc(#loc246)
  ^bb9:  // 2 preds: ^bb7, ^bb8
    cir.br ^bb10 loc(#loc246)
  ^bb10:  // pred: ^bb9
    cir.br ^bb11 loc(#loc241)
  ^bb11:  // 2 preds: ^bb5, ^bb10
    cir.br ^bb12 loc(#loc241)
  ^bb12:  // pred: ^bb11
    cir.return loc(#loc226)
  } loc(#loc346)
} loc(#loc)
#loc = loc("/workspaces/juliet-c/testcases/CWE190_Integer_Overflow/s03/CWE190_Integer_Overflow__int_fgets_multiply_08.c":0:0)
#loc1 = loc("/usr/include/stdio.h":654:1)
#loc2 = loc("/usr/include/stdio.h":655:59)
#loc3 = loc("/usr/include/stdio.h":149:1)
#loc4 = loc("/usr/include/stdio.h":149:14)
#loc5 = loc("/usr/include/stdlib.h":105:1)
#loc6 = loc("/usr/include/stdlib.h":106:33)
#loc7 = loc("../../../testcasesupport/std_testcase_io.h":14:1)
#loc8 = loc("../../../testcasesupport/std_testcase_io.h":14:33)
#loc9 = loc("CWE190_Integer_Overflow__int_fgets_multiply_08.c":54:27)
#loc10 = loc("../../../testcasesupport/std_testcase_io.h":18:1)
#loc11 = loc("../../../testcasesupport/std_testcase_io.h":18:33)
#loc12 = loc("CWE190_Integer_Overflow__int_fgets_multiply_08.c":37:1)
#loc13 = loc("CWE190_Integer_Overflow__int_fgets_multiply_08.c":67:1)
#loc14 = loc("CWE190_Integer_Overflow__int_fgets_multiply_08.c":45:13)
#loc15 = loc("CWE190_Integer_Overflow__int_fgets_multiply_08.c":45:49)
#loc16 = loc("CWE190_Integer_Overflow__int_fgets_multiply_08.c":63:13)
#loc17 = loc("CWE190_Integer_Overflow__int_fgets_multiply_08.c":63:33)
#loc18 = loc("CWE190_Integer_Overflow__int_fgets_multiply_08.c":39:5)
#loc19 = loc("CWE190_Integer_Overflow__int_fgets_multiply_08.c":39:9)
#loc20 = loc("CWE190_Integer_Overflow__int_fgets_multiply_08.c":41:12)
#loc21 = loc("CWE190_Integer_Overflow__int_fgets_multiply_08.c":41:5)
#loc22 = loc("CWE190_Integer_Overflow__int_fgets_multiply_08.c":42:5)
#loc23 = loc("CWE190_Integer_Overflow__int_fgets_multiply_08.c":57:5)
#loc24 = loc("CWE190_Integer_Overflow__int_fgets_multiply_08.c":42:8)
#loc25 = loc("CWE190_Integer_Overflow__int_fgets_multiply_08.c":42:26)
#loc26 = loc("CWE190_Integer_Overflow__int_fgets_multiply_08.c":43:5)
#loc27 = loc("CWE190_Integer_Overflow__int_fgets_multiply_08.c":44:9)
#loc28 = loc("CWE190_Integer_Overflow__int_fgets_multiply_08.c":56:9)
#loc29 = loc("CWE190_Integer_Overflow__int_fgets_multiply_08.c":47:13)
#loc30 = loc("CWE190_Integer_Overflow__int_fgets_multiply_08.c":55:13)
#loc31 = loc("CWE190_Integer_Overflow__int_fgets_multiply_08.c":47:23)
#loc32 = loc("CWE190_Integer_Overflow__int_fgets_multiply_08.c":47:36)
#loc33 = loc("CWE190_Integer_Overflow__int_fgets_multiply_08.c":47:53)
#loc34 = loc("CWE190_Integer_Overflow__int_fgets_multiply_08.c":47:17)
#loc35 = loc("CWE190_Integer_Overflow__int_fgets_multiply_08.c":47:63)
#loc36 = loc("CWE190_Integer_Overflow__int_fgets_multiply_08.c":48:13)
#loc37 = loc("CWE190_Integer_Overflow__int_fgets_multiply_08.c":51:13)
#loc38 = loc("CWE190_Integer_Overflow__int_fgets_multiply_08.c":53:13)
#loc39 = loc("CWE190_Integer_Overflow__int_fgets_multiply_08.c":50:29)
#loc40 = loc("CWE190_Integer_Overflow__int_fgets_multiply_08.c":50:24)
#loc41 = loc("CWE190_Integer_Overflow__int_fgets_multiply_08.c":50:17)
#loc42 = loc("CWE190_Integer_Overflow__int_fgets_multiply_08.c":50:40)
#loc43 = loc("CWE190_Integer_Overflow__int_fgets_multiply_08.c":54:17)
#loc44 = loc("CWE190_Integer_Overflow__int_fgets_multiply_08.c":58:5)
#loc45 = loc("CWE190_Integer_Overflow__int_fgets_multiply_08.c":66:5)
#loc46 = loc("CWE190_Integer_Overflow__int_fgets_multiply_08.c":58:8)
#loc47 = loc("CWE190_Integer_Overflow__int_fgets_multiply_08.c":58:26)
#loc48 = loc("CWE190_Integer_Overflow__int_fgets_multiply_08.c":59:5)
#loc49 = loc("CWE190_Integer_Overflow__int_fgets_multiply_08.c":60:9)
#loc50 = loc("CWE190_Integer_Overflow__int_fgets_multiply_08.c":65:9)
#loc51 = loc("CWE190_Integer_Overflow__int_fgets_multiply_08.c":60:12)
#loc52 = loc("CWE190_Integer_Overflow__int_fgets_multiply_08.c":60:19)
#loc53 = loc("CWE190_Integer_Overflow__int_fgets_multiply_08.c":61:9)
#loc54 = loc("CWE190_Integer_Overflow__int_fgets_multiply_08.c":63:26)
#loc55 = loc("CWE190_Integer_Overflow__int_fgets_multiply_08.c":64:26)
#loc56 = loc("CWE190_Integer_Overflow__int_fgets_multiply_08.c":64:13)
#loc57 = loc("CWE190_Integer_Overflow__int_fgets_multiply_08.c":207:1)
#loc58 = loc("CWE190_Integer_Overflow__int_fgets_multiply_08.c":213:1)
#loc59 = loc("CWE190_Integer_Overflow__int_fgets_multiply_08.c":209:5)
#loc60 = loc("CWE190_Integer_Overflow__int_fgets_multiply_08.c":209:14)
#loc61 = loc("CWE190_Integer_Overflow__int_fgets_multiply_08.c":210:5)
#loc62 = loc("CWE190_Integer_Overflow__int_fgets_multiply_08.c":210:14)
#loc63 = loc("CWE190_Integer_Overflow__int_fgets_multiply_08.c":211:5)
#loc64 = loc("CWE190_Integer_Overflow__int_fgets_multiply_08.c":211:14)
#loc65 = loc("CWE190_Integer_Overflow__int_fgets_multiply_08.c":212:5)
#loc66 = loc("CWE190_Integer_Overflow__int_fgets_multiply_08.c":212:14)
#loc67 = loc("CWE190_Integer_Overflow__int_fgets_multiply_08.c":25:1)
#loc68 = loc("CWE190_Integer_Overflow__int_fgets_multiply_08.c":28:1)
#loc69 = loc("CWE190_Integer_Overflow__int_fgets_multiply_08.c":27:12)
#loc70 = loc("CWE190_Integer_Overflow__int_fgets_multiply_08.c":27:5)
#loc71 = loc("CWE190_Integer_Overflow__int_fgets_multiply_08.c":98:19)
#loc72 = loc("CWE190_Integer_Overflow__int_fgets_multiply_08.c":112:27)
#loc73 = loc("CWE190_Integer_Overflow__int_fgets_multiply_08.c":74:1)
#loc74 = loc("CWE190_Integer_Overflow__int_fgets_multiply_08.c":116:1)
#loc75 = loc("CWE190_Integer_Overflow__int_fgets_multiply_08.c":82:13)
#loc76 = loc("CWE190_Integer_Overflow__int_fgets_multiply_08.c":82:49)
#loc77 = loc("CWE190_Integer_Overflow__int_fgets_multiply_08.c":107:17)
#loc78 = loc("CWE190_Integer_Overflow__int_fgets_multiply_08.c":107:37)
#loc79 = loc("CWE190_Integer_Overflow__int_fgets_multiply_08.c":76:5)
#loc80 = loc("CWE190_Integer_Overflow__int_fgets_multiply_08.c":76:9)
#loc81 = loc("CWE190_Integer_Overflow__int_fgets_multiply_08.c":78:12)
#loc82 = loc("CWE190_Integer_Overflow__int_fgets_multiply_08.c":78:5)
#loc83 = loc("CWE190_Integer_Overflow__int_fgets_multiply_08.c":79:5)
#loc84 = loc("CWE190_Integer_Overflow__int_fgets_multiply_08.c":94:5)
#loc85 = loc("CWE190_Integer_Overflow__int_fgets_multiply_08.c":79:8)
#loc86 = loc("CWE190_Integer_Overflow__int_fgets_multiply_08.c":79:26)
#loc87 = loc("CWE190_Integer_Overflow__int_fgets_multiply_08.c":80:5)
#loc88 = loc("CWE190_Integer_Overflow__int_fgets_multiply_08.c":81:9)
#loc89 = loc("CWE190_Integer_Overflow__int_fgets_multiply_08.c":93:9)
#loc90 = loc("CWE190_Integer_Overflow__int_fgets_multiply_08.c":84:13)
#loc91 = loc("CWE190_Integer_Overflow__int_fgets_multiply_08.c":92:13)
#loc92 = loc("CWE190_Integer_Overflow__int_fgets_multiply_08.c":84:23)
#loc93 = loc("CWE190_Integer_Overflow__int_fgets_multiply_08.c":84:36)
#loc94 = loc("CWE190_Integer_Overflow__int_fgets_multiply_08.c":84:53)
#loc95 = loc("CWE190_Integer_Overflow__int_fgets_multiply_08.c":84:17)
#loc96 = loc("CWE190_Integer_Overflow__int_fgets_multiply_08.c":84:63)
#loc97 = loc("CWE190_Integer_Overflow__int_fgets_multiply_08.c":85:13)
#loc98 = loc("CWE190_Integer_Overflow__int_fgets_multiply_08.c":88:13)
#loc99 = loc("CWE190_Integer_Overflow__int_fgets_multiply_08.c":90:13)
#loc100 = loc("CWE190_Integer_Overflow__int_fgets_multiply_08.c":87:29)
#loc101 = loc("CWE190_Integer_Overflow__int_fgets_multiply_08.c":87:24)
#loc102 = loc("CWE190_Integer_Overflow__int_fgets_multiply_08.c":87:17)
#loc103 = loc("CWE190_Integer_Overflow__int_fgets_multiply_08.c":87:40)
#loc104 = loc("CWE190_Integer_Overflow__int_fgets_multiply_08.c":91:27)
#loc105 = loc("CWE190_Integer_Overflow__int_fgets_multiply_08.c":91:17)
#loc106 = loc("CWE190_Integer_Overflow__int_fgets_multiply_08.c":95:5)
#loc107 = loc("CWE190_Integer_Overflow__int_fgets_multiply_08.c":115:5)
#loc108 = loc("CWE190_Integer_Overflow__int_fgets_multiply_08.c":95:8)
#loc109 = loc("CWE190_Integer_Overflow__int_fgets_multiply_08.c":95:27)
#loc110 = loc("CWE190_Integer_Overflow__int_fgets_multiply_08.c":96:5)
#loc111 = loc("CWE190_Integer_Overflow__int_fgets_multiply_08.c":99:5)
#loc112 = loc("CWE190_Integer_Overflow__int_fgets_multiply_08.c":101:5)
#loc113 = loc("CWE190_Integer_Overflow__int_fgets_multiply_08.c":98:9)
#loc114 = loc("CWE190_Integer_Overflow__int_fgets_multiply_08.c":102:9)
#loc115 = loc("CWE190_Integer_Overflow__int_fgets_multiply_08.c":114:9)
#loc116 = loc("CWE190_Integer_Overflow__int_fgets_multiply_08.c":102:12)
#loc117 = loc("CWE190_Integer_Overflow__int_fgets_multiply_08.c":102:19)
#loc118 = loc("CWE190_Integer_Overflow__int_fgets_multiply_08.c":103:9)
#loc119 = loc("CWE190_Integer_Overflow__int_fgets_multiply_08.c":105:13)
#loc120 = loc("CWE190_Integer_Overflow__int_fgets_multiply_08.c":113:13)
#loc121 = loc("CWE190_Integer_Overflow__int_fgets_multiply_08.c":105:17)
#loc122 = loc("CWE190_Integer_Overflow__int_fgets_multiply_08.c":105:25)
#loc123 = loc("CWE190_Integer_Overflow__int_fgets_multiply_08.c":105:33)
#loc124 = loc("CWE190_Integer_Overflow__int_fgets_multiply_08.c":105:34)
#loc125 = loc("CWE190_Integer_Overflow__int_fgets_multiply_08.c":106:13)
#loc126 = loc("CWE190_Integer_Overflow__int_fgets_multiply_08.c":109:13)
#loc127 = loc("CWE190_Integer_Overflow__int_fgets_multiply_08.c":111:13)
#loc128 = loc("CWE190_Integer_Overflow__int_fgets_multiply_08.c":107:30)
#loc129 = loc("CWE190_Integer_Overflow__int_fgets_multiply_08.c":108:30)
#loc130 = loc("CWE190_Integer_Overflow__int_fgets_multiply_08.c":108:17)
#loc131 = loc("CWE190_Integer_Overflow__int_fgets_multiply_08.c":112:17)
#loc132 = loc("CWE190_Integer_Overflow__int_fgets_multiply_08.c":30:1)
#loc133 = loc("CWE190_Integer_Overflow__int_fgets_multiply_08.c":33:1)
#loc134 = loc("CWE190_Integer_Overflow__int_fgets_multiply_08.c":32:12)
#loc135 = loc("CWE190_Integer_Overflow__int_fgets_multiply_08.c":32:5)
#loc136 = loc("CWE190_Integer_Overflow__int_fgets_multiply_08.c":119:1)
#loc137 = loc("CWE190_Integer_Overflow__int_fgets_multiply_08.c":156:1)
#loc138 = loc("CWE190_Integer_Overflow__int_fgets_multiply_08.c":127:13)
#loc139 = loc("CWE190_Integer_Overflow__int_fgets_multiply_08.c":127:49)
#loc140 = loc("CWE190_Integer_Overflow__int_fgets_multiply_08.c":147:17)
#loc141 = loc("CWE190_Integer_Overflow__int_fgets_multiply_08.c":147:37)
#loc142 = loc("CWE190_Integer_Overflow__int_fgets_multiply_08.c":121:5)
#loc143 = loc("CWE190_Integer_Overflow__int_fgets_multiply_08.c":121:9)
#loc144 = loc("CWE190_Integer_Overflow__int_fgets_multiply_08.c":123:12)
#loc145 = loc("CWE190_Integer_Overflow__int_fgets_multiply_08.c":123:5)
#loc146 = loc("CWE190_Integer_Overflow__int_fgets_multiply_08.c":124:5)
#loc147 = loc("CWE190_Integer_Overflow__int_fgets_multiply_08.c":139:5)
#loc148 = loc("CWE190_Integer_Overflow__int_fgets_multiply_08.c":124:8)
#loc149 = loc("CWE190_Integer_Overflow__int_fgets_multiply_08.c":124:26)
#loc150 = loc("CWE190_Integer_Overflow__int_fgets_multiply_08.c":125:5)
#loc151 = loc("CWE190_Integer_Overflow__int_fgets_multiply_08.c":126:9)
#loc152 = loc("CWE190_Integer_Overflow__int_fgets_multiply_08.c":138:9)
#loc153 = loc("CWE190_Integer_Overflow__int_fgets_multiply_08.c":129:13)
#loc154 = loc("CWE190_Integer_Overflow__int_fgets_multiply_08.c":137:13)
#loc155 = loc("CWE190_Integer_Overflow__int_fgets_multiply_08.c":129:23)
#loc156 = loc("CWE190_Integer_Overflow__int_fgets_multiply_08.c":129:36)
#loc157 = loc("CWE190_Integer_Overflow__int_fgets_multiply_08.c":129:53)
#loc158 = loc("CWE190_Integer_Overflow__int_fgets_multiply_08.c":129:17)
#loc159 = loc("CWE190_Integer_Overflow__int_fgets_multiply_08.c":129:63)
#loc160 = loc("CWE190_Integer_Overflow__int_fgets_multiply_08.c":130:13)
#loc161 = loc("CWE190_Integer_Overflow__int_fgets_multiply_08.c":133:13)
#loc162 = loc("CWE190_Integer_Overflow__int_fgets_multiply_08.c":135:13)
#loc163 = loc("CWE190_Integer_Overflow__int_fgets_multiply_08.c":132:29)
#loc164 = loc("CWE190_Integer_Overflow__int_fgets_multiply_08.c":132:24)
#loc165 = loc("CWE190_Integer_Overflow__int_fgets_multiply_08.c":132:17)
#loc166 = loc("CWE190_Integer_Overflow__int_fgets_multiply_08.c":132:40)
#loc167 = loc("CWE190_Integer_Overflow__int_fgets_multiply_08.c":136:27)
#loc168 = loc("CWE190_Integer_Overflow__int_fgets_multiply_08.c":136:17)
#loc169 = loc("CWE190_Integer_Overflow__int_fgets_multiply_08.c":140:5)
#loc170 = loc("CWE190_Integer_Overflow__int_fgets_multiply_08.c":155:5)
#loc171 = loc("CWE190_Integer_Overflow__int_fgets_multiply_08.c":140:8)
#loc172 = loc("CWE190_Integer_Overflow__int_fgets_multiply_08.c":140:26)
#loc173 = loc("CWE190_Integer_Overflow__int_fgets_multiply_08.c":141:5)
#loc174 = loc("CWE190_Integer_Overflow__int_fgets_multiply_08.c":142:9)
#loc175 = loc("CWE190_Integer_Overflow__int_fgets_multiply_08.c":154:9)
#loc176 = loc("CWE190_Integer_Overflow__int_fgets_multiply_08.c":142:12)
#loc177 = loc("CWE190_Integer_Overflow__int_fgets_multiply_08.c":142:19)
#loc178 = loc("CWE190_Integer_Overflow__int_fgets_multiply_08.c":143:9)
#loc179 = loc("CWE190_Integer_Overflow__int_fgets_multiply_08.c":145:13)
#loc180 = loc("CWE190_Integer_Overflow__int_fgets_multiply_08.c":153:13)
#loc181 = loc("CWE190_Integer_Overflow__int_fgets_multiply_08.c":145:17)
#loc182 = loc("CWE190_Integer_Overflow__int_fgets_multiply_08.c":145:25)
#loc183 = loc("CWE190_Integer_Overflow__int_fgets_multiply_08.c":145:33)
#loc184 = loc("CWE190_Integer_Overflow__int_fgets_multiply_08.c":145:34)
#loc185 = loc("CWE190_Integer_Overflow__int_fgets_multiply_08.c":146:13)
#loc186 = loc("CWE190_Integer_Overflow__int_fgets_multiply_08.c":149:13)
#loc187 = loc("CWE190_Integer_Overflow__int_fgets_multiply_08.c":151:13)
#loc188 = loc("CWE190_Integer_Overflow__int_fgets_multiply_08.c":147:30)
#loc189 = loc("CWE190_Integer_Overflow__int_fgets_multiply_08.c":148:30)
#loc190 = loc("CWE190_Integer_Overflow__int_fgets_multiply_08.c":148:17)
#loc191 = loc("CWE190_Integer_Overflow__int_fgets_multiply_08.c":152:27)
#loc192 = loc("CWE190_Integer_Overflow__int_fgets_multiply_08.c":152:17)
#loc193 = loc("CWE190_Integer_Overflow__int_fgets_multiply_08.c":159:1)
#loc194 = loc("CWE190_Integer_Overflow__int_fgets_multiply_08.c":183:1)
#loc195 = loc("CWE190_Integer_Overflow__int_fgets_multiply_08.c":179:13)
#loc196 = loc("CWE190_Integer_Overflow__int_fgets_multiply_08.c":179:33)
#loc197 = loc("CWE190_Integer_Overflow__int_fgets_multiply_08.c":161:5)
#loc198 = loc("CWE190_Integer_Overflow__int_fgets_multiply_08.c":161:9)
#loc199 = loc("CWE190_Integer_Overflow__int_fgets_multiply_08.c":163:12)
#loc200 = loc("CWE190_Integer_Overflow__int_fgets_multiply_08.c":163:5)
#loc201 = loc("CWE190_Integer_Overflow__int_fgets_multiply_08.c":164:5)
#loc202 = loc("CWE190_Integer_Overflow__int_fgets_multiply_08.c":173:5)
#loc203 = loc("CWE190_Integer_Overflow__int_fgets_multiply_08.c":164:8)
#loc204 = loc("CWE190_Integer_Overflow__int_fgets_multiply_08.c":164:27)
#loc205 = loc("CWE190_Integer_Overflow__int_fgets_multiply_08.c":165:5)
#loc206 = loc("CWE190_Integer_Overflow__int_fgets_multiply_08.c":168:5)
#loc207 = loc("CWE190_Integer_Overflow__int_fgets_multiply_08.c":170:5)
#loc208 = loc("CWE190_Integer_Overflow__int_fgets_multiply_08.c":167:19)
#loc209 = loc("CWE190_Integer_Overflow__int_fgets_multiply_08.c":167:9)
#loc210 = loc("CWE190_Integer_Overflow__int_fgets_multiply_08.c":172:16)
#loc211 = loc("CWE190_Integer_Overflow__int_fgets_multiply_08.c":172:9)
#loc212 = loc("CWE190_Integer_Overflow__int_fgets_multiply_08.c":174:5)
#loc213 = loc("CWE190_Integer_Overflow__int_fgets_multiply_08.c":182:5)
#loc214 = loc("CWE190_Integer_Overflow__int_fgets_multiply_08.c":174:8)
#loc215 = loc("CWE190_Integer_Overflow__int_fgets_multiply_08.c":174:26)
#loc216 = loc("CWE190_Integer_Overflow__int_fgets_multiply_08.c":175:5)
#loc217 = loc("CWE190_Integer_Overflow__int_fgets_multiply_08.c":176:9)
#loc218 = loc("CWE190_Integer_Overflow__int_fgets_multiply_08.c":181:9)
#loc219 = loc("CWE190_Integer_Overflow__int_fgets_multiply_08.c":176:12)
#loc220 = loc("CWE190_Integer_Overflow__int_fgets_multiply_08.c":176:19)
#loc221 = loc("CWE190_Integer_Overflow__int_fgets_multiply_08.c":177:9)
#loc222 = loc("CWE190_Integer_Overflow__int_fgets_multiply_08.c":179:26)
#loc223 = loc("CWE190_Integer_Overflow__int_fgets_multiply_08.c":180:26)
#loc224 = loc("CWE190_Integer_Overflow__int_fgets_multiply_08.c":180:13)
#loc225 = loc("CWE190_Integer_Overflow__int_fgets_multiply_08.c":186:1)
#loc226 = loc("CWE190_Integer_Overflow__int_fgets_multiply_08.c":205:1)
#loc227 = loc("CWE190_Integer_Overflow__int_fgets_multiply_08.c":201:13)
#loc228 = loc("CWE190_Integer_Overflow__int_fgets_multiply_08.c":201:33)
#loc229 = loc("CWE190_Integer_Overflow__int_fgets_multiply_08.c":188:5)
#loc230 = loc("CWE190_Integer_Overflow__int_fgets_multiply_08.c":188:9)
#loc231 = loc("CWE190_Integer_Overflow__int_fgets_multiply_08.c":190:12)
#loc232 = loc("CWE190_Integer_Overflow__int_fgets_multiply_08.c":190:5)
#loc233 = loc("CWE190_Integer_Overflow__int_fgets_multiply_08.c":191:5)
#loc234 = loc("CWE190_Integer_Overflow__int_fgets_multiply_08.c":195:5)
#loc235 = loc("CWE190_Integer_Overflow__int_fgets_multiply_08.c":191:8)
#loc236 = loc("CWE190_Integer_Overflow__int_fgets_multiply_08.c":191:26)
#loc237 = loc("CWE190_Integer_Overflow__int_fgets_multiply_08.c":192:5)
#loc238 = loc("CWE190_Integer_Overflow__int_fgets_multiply_08.c":194:16)
#loc239 = loc("CWE190_Integer_Overflow__int_fgets_multiply_08.c":194:9)
#loc240 = loc("CWE190_Integer_Overflow__int_fgets_multiply_08.c":196:5)
#loc241 = loc("CWE190_Integer_Overflow__int_fgets_multiply_08.c":204:5)
#loc242 = loc("CWE190_Integer_Overflow__int_fgets_multiply_08.c":196:8)
#loc243 = loc("CWE190_Integer_Overflow__int_fgets_multiply_08.c":196:26)
#loc244 = loc("CWE190_Integer_Overflow__int_fgets_multiply_08.c":197:5)
#loc245 = loc("CWE190_Integer_Overflow__int_fgets_multiply_08.c":198:9)
#loc246 = loc("CWE190_Integer_Overflow__int_fgets_multiply_08.c":203:9)
#loc247 = loc("CWE190_Integer_Overflow__int_fgets_multiply_08.c":198:12)
#loc248 = loc("CWE190_Integer_Overflow__int_fgets_multiply_08.c":198:19)
#loc249 = loc("CWE190_Integer_Overflow__int_fgets_multiply_08.c":199:9)
#loc250 = loc("CWE190_Integer_Overflow__int_fgets_multiply_08.c":201:26)
#loc251 = loc("CWE190_Integer_Overflow__int_fgets_multiply_08.c":202:26)
#loc252 = loc("CWE190_Integer_Overflow__int_fgets_multiply_08.c":202:13)
#loc253 = loc(fused[#loc1, #loc2])
#loc254 = loc(fused[#loc3, #loc4])
#loc255 = loc(fused[#loc5, #loc6])
#loc256 = loc(fused[#loc7, #loc8])
#loc257 = loc(fused[#loc10, #loc11])
#loc258 = loc(fused[#loc12, #loc13])
#loc259 = loc(fused[#loc14, #loc15])
#loc260 = loc(fused[#loc16, #loc17])
#loc261 = loc(fused[#loc18, #loc19])
#loc262 = loc(fused[#loc21, #loc20])
#loc263 = loc(fused[#loc22, #loc23])
#loc264 = loc(fused[#loc24, #loc25])
#loc265 = loc(fused[#loc26, #loc23])
#loc266 = loc(fused[#loc27, #loc28])
#loc267 = loc(fused[#loc29, #loc30])
#loc268 = loc(fused[#loc34, #loc35])
#loc269 = loc(fused[#loc36, #loc37, #loc38, #loc30])
#loc270 = loc(fused[#loc41, #loc42])
#loc271 = loc(fused[#loc44, #loc45])
#loc272 = loc(fused[#loc46, #loc47])
#loc273 = loc(fused[#loc48, #loc45])
#loc274 = loc(fused[#loc49, #loc50])
#loc275 = loc(fused[#loc51, #loc52])
#loc276 = loc(fused[#loc53, #loc50])
#loc277 = loc(fused[#loc57, #loc58])
#loc278 = loc(fused[#loc59, #loc60])
#loc279 = loc(fused[#loc61, #loc62])
#loc280 = loc(fused[#loc63, #loc64])
#loc281 = loc(fused[#loc65, #loc66])
#loc282 = loc(fused[#loc67, #loc68])
#loc283 = loc(fused[#loc70, #loc69])
#loc284 = loc(fused[#loc73, #loc74])
#loc285 = loc(fused[#loc75, #loc76])
#loc286 = loc(fused[#loc77, #loc78])
#loc287 = loc(fused[#loc79, #loc80])
#loc288 = loc(fused[#loc82, #loc81])
#loc289 = loc(fused[#loc83, #loc84])
#loc290 = loc(fused[#loc85, #loc86])
#loc291 = loc(fused[#loc87, #loc84])
#loc292 = loc(fused[#loc88, #loc89])
#loc293 = loc(fused[#loc90, #loc91])
#loc294 = loc(fused[#loc95, #loc96])
#loc295 = loc(fused[#loc97, #loc98, #loc99, #loc91])
#loc296 = loc(fused[#loc102, #loc103])
#loc297 = loc(fused[#loc106, #loc107])
#loc298 = loc(fused[#loc108, #loc109])
#loc299 = loc(fused[#loc110, #loc111, #loc112, #loc107])
#loc300 = loc(fused[#loc114, #loc115])
#loc301 = loc(fused[#loc116, #loc117])
#loc302 = loc(fused[#loc118, #loc115])
#loc303 = loc(fused[#loc119, #loc120])
#loc304 = loc(fused[#loc122, #loc123])
#loc305 = loc(fused[#loc121, #loc124])
#loc306 = loc(fused[#loc125, #loc126, #loc127, #loc120])
#loc307 = loc(fused[#loc132, #loc133])
#loc308 = loc(fused[#loc135, #loc134])
#loc309 = loc(fused[#loc136, #loc137])
#loc310 = loc(fused[#loc138, #loc139])
#loc311 = loc(fused[#loc140, #loc141])
#loc312 = loc(fused[#loc142, #loc143])
#loc313 = loc(fused[#loc145, #loc144])
#loc314 = loc(fused[#loc146, #loc147])
#loc315 = loc(fused[#loc148, #loc149])
#loc316 = loc(fused[#loc150, #loc147])
#loc317 = loc(fused[#loc151, #loc152])
#loc318 = loc(fused[#loc153, #loc154])
#loc319 = loc(fused[#loc158, #loc159])
#loc320 = loc(fused[#loc160, #loc161, #loc162, #loc154])
#loc321 = loc(fused[#loc165, #loc166])
#loc322 = loc(fused[#loc169, #loc170])
#loc323 = loc(fused[#loc171, #loc172])
#loc324 = loc(fused[#loc173, #loc170])
#loc325 = loc(fused[#loc174, #loc175])
#loc326 = loc(fused[#loc176, #loc177])
#loc327 = loc(fused[#loc178, #loc175])
#loc328 = loc(fused[#loc179, #loc180])
#loc329 = loc(fused[#loc182, #loc183])
#loc330 = loc(fused[#loc181, #loc184])
#loc331 = loc(fused[#loc185, #loc186, #loc187, #loc180])
#loc332 = loc(fused[#loc193, #loc194])
#loc333 = loc(fused[#loc195, #loc196])
#loc334 = loc(fused[#loc197, #loc198])
#loc335 = loc(fused[#loc200, #loc199])
#loc336 = loc(fused[#loc201, #loc202])
#loc337 = loc(fused[#loc203, #loc204])
#loc338 = loc(fused[#loc205, #loc206, #loc207, #loc202])
#loc339 = loc(fused[#loc211, #loc210])
#loc340 = loc(fused[#loc212, #loc213])
#loc341 = loc(fused[#loc214, #loc215])
#loc342 = loc(fused[#loc216, #loc213])
#loc343 = loc(fused[#loc217, #loc218])
#loc344 = loc(fused[#loc219, #loc220])
#loc345 = loc(fused[#loc221, #loc218])
#loc346 = loc(fused[#loc225, #loc226])
#loc347 = loc(fused[#loc227, #loc228])
#loc348 = loc(fused[#loc229, #loc230])
#loc349 = loc(fused[#loc232, #loc231])
#loc350 = loc(fused[#loc233, #loc234])
#loc351 = loc(fused[#loc235, #loc236])
#loc352 = loc(fused[#loc237, #loc234])
#loc353 = loc(fused[#loc239, #loc238])
#loc354 = loc(fused[#loc240, #loc241])
#loc355 = loc(fused[#loc242, #loc243])
#loc356 = loc(fused[#loc244, #loc241])
#loc357 = loc(fused[#loc245, #loc246])
#loc358 = loc(fused[#loc247, #loc248])
#loc359 = loc(fused[#loc249, #loc246])
