!s32i = !cir.int<s, 32>
!s64i = !cir.int<s, 64>
!s8i = !cir.int<s, 8>
!ty__IO_codecvt = !cir.struct<struct "_IO_codecvt" incomplete>
!ty__IO_marker = !cir.struct<struct "_IO_marker" incomplete>
!ty__IO_wide_data = !cir.struct<struct "_IO_wide_data" incomplete>
!u16i = !cir.int<u, 16>
!void = !cir.void
#fn_attr = #cir<extra({inline = #cir.inline<no>, nothrow = #cir.nothrow, optnone = #cir.optnone})>
!ty__IO_FILE = !cir.struct<struct "_IO_FILE" {!s32i, !cir.ptr<!s8i>, !cir.ptr<!s8i>, !cir.ptr<!s8i>, !cir.ptr<!s8i>, !cir.ptr<!s8i>, !cir.ptr<!s8i>, !cir.ptr<!s8i>, !cir.ptr<!s8i>, !cir.ptr<!s8i>, !cir.ptr<!s8i>, !cir.ptr<!s8i>, !cir.ptr<!ty__IO_marker>, !cir.ptr<!cir.struct<struct "_IO_FILE">>, !s32i, !s32i, !s64i, !u16i, !s8i, !cir.array<!s8i x 1>, !cir.ptr<!void>, !s64i, !cir.ptr<!ty__IO_codecvt>, !cir.ptr<!ty__IO_wide_data>, !cir.ptr<!cir.struct<struct "_IO_FILE">>, !cir.ptr<!void>, !cir.ptr<!cir.ptr<!cir.struct<struct "_IO_FILE">>>, !s32i, !cir.array<!s8i x 20>} #cir.record.decl.ast>
module @"/home/ladisgin/git_proj/juliet-c/testcases/CWE369_Divide_by_Zero/s01/CWE369_Divide_by_Zero__float_fscanf_08.c" attributes {cir.lang = #cir.lang<c>, cir.sob = #cir.signed_overflow_behavior<undefined>, cir.triple = "x86_64-unknown-linux-gnu", dlti.dl_spec = #dlti.dl_spec<i1 = dense<8> : vector<2xi64>, !llvm.ptr = dense<64> : vector<4xi64>, i16 = dense<16> : vector<2xi64>, i8 = dense<8> : vector<2xi64>, f16 = dense<16> : vector<2xi64>, i32 = dense<32> : vector<2xi64>, !llvm.ptr<270> = dense<32> : vector<4xi64>, f64 = dense<64> : vector<2xi64>, !llvm.ptr<272> = dense<64> : vector<4xi64>, f128 = dense<128> : vector<2xi64>, !llvm.ptr<271> = dense<32> : vector<4xi64>, i64 = dense<64> : vector<2xi64>, f80 = dense<128> : vector<2xi64>, i128 = dense<128> : vector<2xi64>, "dlti.stack_alignment" = 128 : i64, "dlti.endianness" = "little">} {
  cir.func private @__isoc99_fscanf(!cir.ptr<!ty__IO_FILE>, !cir.ptr<!s8i>, ...) -> !s32i loc(#loc184)
  cir.global "private" external @stdin : !cir.ptr<!ty__IO_FILE> {alignment = 8 : i64} loc(#loc185)
  cir.global "private" constant cir_private dsolocal @".str" = #cir.const_array<"%f\00" : !cir.array<!s8i x 3>> : !cir.array<!s8i x 3> {alignment = 1 : i64} loc(#loc5)
  cir.func private @printIntLine(!s32i) loc(#loc186)
  cir.func no_proto @CWE369_Divide_by_Zero__float_fscanf_08_bad() extra(#fn_attr) {
    %0 = cir.alloca !s32i, !cir.ptr<!s32i>, ["result", init] {alignment = 4 : i64} loc(#loc188)
    %1 = cir.alloca !cir.float, !cir.ptr<!cir.float>, ["data"] {alignment = 4 : i64} loc(#loc189)
    %2 = cir.const #cir.fp<0.000000e+00> : !cir.float loc(#loc14)
    cir.store %2, %1 : !cir.float, !cir.ptr<!cir.float> loc(#loc190)
    cir.br ^bb1 loc(#loc191)
  ^bb1:  // pred: ^bb0
    %3 = cir.get_global @staticReturnsTrue : !cir.ptr<!cir.func<!s32i ()>> loc(#loc192)
    %4 = cir.call %3() : (!cir.ptr<!cir.func<!s32i ()>>) -> !s32i loc(#loc18)
    %5 = cir.cast(int_to_bool, %4 : !s32i), !cir.bool loc(#loc18)
    cir.brcond %5 ^bb2, ^bb3 loc(#loc193)
  ^bb2:  // pred: ^bb1
    %6 = cir.get_global @__isoc99_fscanf : !cir.ptr<!cir.func<!s32i (!cir.ptr<!ty__IO_FILE>, !cir.ptr<!s8i>, ...)>> loc(#loc21)
    %7 = cir.get_global @stdin : !cir.ptr<!cir.ptr<!ty__IO_FILE>> loc(#loc185)
    %8 = cir.load %7 : !cir.ptr<!cir.ptr<!ty__IO_FILE>>, !cir.ptr<!ty__IO_FILE> loc(#loc22)
    %9 = cir.get_global @".str" : !cir.ptr<!cir.array<!s8i x 3>> loc(#loc5)
    %10 = cir.cast(array_to_ptrdecay, %9 : !cir.ptr<!cir.array<!s8i x 3>>), !cir.ptr<!s8i> loc(#loc5)
    %11 = cir.call @__isoc99_fscanf(%8, %10, %1) : (!cir.ptr<!ty__IO_FILE>, !cir.ptr<!s8i>, !cir.ptr<!cir.float>) -> !s32i loc(#loc21)
    cir.br ^bb3 loc(#loc17)
  ^bb3:  // 2 preds: ^bb1, ^bb2
    cir.br ^bb4 loc(#loc17)
  ^bb4:  // pred: ^bb3
    cir.br ^bb5 loc(#loc194)
  ^bb5:  // pred: ^bb4
    %12 = cir.get_global @staticReturnsTrue : !cir.ptr<!cir.func<!s32i ()>> loc(#loc195)
    %13 = cir.call %12() : (!cir.ptr<!cir.func<!s32i ()>>) -> !s32i loc(#loc25)
    %14 = cir.cast(int_to_bool, %13 : !s32i), !cir.bool loc(#loc25)
    cir.brcond %14 ^bb6, ^bb9 loc(#loc196)
  ^bb6:  // pred: ^bb5
    cir.br ^bb7 loc(#loc197)
  ^bb7:  // pred: ^bb6
    %15 = cir.const #cir.fp<1.000000e+02> : !cir.double loc(#loc30)
    %16 = cir.load %1 : !cir.ptr<!cir.float>, !cir.float loc(#loc31)
    %17 = cir.cast(floating, %16 : !cir.float), !cir.double loc(#loc31)
    %18 = cir.binop(div, %15, %17) : !cir.double loc(#loc198)
    %19 = cir.cast(float_to_int, %18 : !cir.double), !s32i loc(#loc198)
    cir.store %19, %0 : !s32i, !cir.ptr<!s32i> loc(#loc188)
    %20 = cir.load %0 : !cir.ptr<!s32i>, !s32i loc(#loc32)
    cir.call @printIntLine(%20) : (!s32i) -> () loc(#loc33)
    cir.br ^bb8 loc(#loc29)
  ^bb8:  // pred: ^bb7
    cir.br ^bb9 loc(#loc24)
  ^bb9:  // 2 preds: ^bb5, ^bb8
    cir.br ^bb10 loc(#loc24)
  ^bb10:  // pred: ^bb9
    cir.return loc(#loc9)
  } loc(#loc187)
  cir.func no_proto @CWE369_Divide_by_Zero__float_fscanf_08_good() extra(#fn_attr) {
    %0 = cir.get_global @goodB2G1 : !cir.ptr<!cir.func<!void ()>> loc(#loc200)
    cir.call %0() : (!cir.ptr<!cir.func<!void ()>>) -> () loc(#loc36)
    %1 = cir.get_global @goodB2G2 : !cir.ptr<!cir.func<!void ()>> loc(#loc201)
    cir.call %1() : (!cir.ptr<!cir.func<!void ()>>) -> () loc(#loc38)
    %2 = cir.get_global @goodG2B1 : !cir.ptr<!cir.func<!void ()>> loc(#loc202)
    cir.call %2() : (!cir.ptr<!cir.func<!void ()>>) -> () loc(#loc40)
    %3 = cir.get_global @goodG2B2 : !cir.ptr<!cir.func<!void ()>> loc(#loc203)
    cir.call %3() : (!cir.ptr<!cir.func<!void ()>>) -> () loc(#loc42)
    cir.return loc(#loc35)
  } loc(#loc199)
  cir.func no_proto internal private @staticReturnsTrue() -> !s32i extra(#fn_attr) {
    %0 = cir.alloca !s32i, !cir.ptr<!s32i>, ["__retval"] {alignment = 4 : i64} loc(#loc45)
    %1 = cir.const #cir.int<1> : !s32i loc(#loc46)
    cir.store %1, %0 : !s32i, !cir.ptr<!s32i> loc(#loc205)
    %2 = cir.load %0 : !cir.ptr<!s32i>, !s32i loc(#loc205)
    cir.return %2 : !s32i loc(#loc205)
  } loc(#loc204)
  cir.func private @printLine(!cir.ptr<!s8i>) loc(#loc206)
  cir.global "private" constant cir_private dsolocal @".str.1" = #cir.const_array<"Benign, fixed string\00" : !cir.array<!s8i x 21>> : !cir.array<!s8i x 21> {alignment = 1 : i64} loc(#loc50)
  cir.global "private" constant cir_private dsolocal @".str.2" = #cir.const_array<"This would result in a divide by zero\00" : !cir.array<!s8i x 38>> : !cir.array<!s8i x 38> {alignment = 1 : i64} loc(#loc51)
  cir.func no_proto internal private @goodB2G1() extra(#fn_attr) {
    %0 = cir.alloca !s32i, !cir.ptr<!s32i>, ["result", init] {alignment = 4 : i64} loc(#loc208)
    %1 = cir.alloca !cir.float, !cir.ptr<!cir.float>, ["data"] {alignment = 4 : i64} loc(#loc209)
    %2 = cir.const #cir.fp<0.000000e+00> : !cir.float loc(#loc58)
    cir.store %2, %1 : !cir.float, !cir.ptr<!cir.float> loc(#loc210)
    cir.br ^bb1 loc(#loc211)
  ^bb1:  // pred: ^bb0
    %3 = cir.get_global @staticReturnsTrue : !cir.ptr<!cir.func<!s32i ()>> loc(#loc212)
    %4 = cir.call @staticReturnsTrue() : () -> !s32i loc(#loc62)
    %5 = cir.cast(int_to_bool, %4 : !s32i), !cir.bool loc(#loc62)
    cir.brcond %5 ^bb2, ^bb3 loc(#loc213)
  ^bb2:  // pred: ^bb1
    %6 = cir.get_global @__isoc99_fscanf : !cir.ptr<!cir.func<!s32i (!cir.ptr<!ty__IO_FILE>, !cir.ptr<!s8i>, ...)>> loc(#loc65)
    %7 = cir.get_global @stdin : !cir.ptr<!cir.ptr<!ty__IO_FILE>> loc(#loc185)
    %8 = cir.load %7 : !cir.ptr<!cir.ptr<!ty__IO_FILE>>, !cir.ptr<!ty__IO_FILE> loc(#loc66)
    %9 = cir.get_global @".str" : !cir.ptr<!cir.array<!s8i x 3>> loc(#loc67)
    %10 = cir.cast(array_to_ptrdecay, %9 : !cir.ptr<!cir.array<!s8i x 3>>), !cir.ptr<!s8i> loc(#loc67)
    %11 = cir.call @__isoc99_fscanf(%8, %10, %1) : (!cir.ptr<!ty__IO_FILE>, !cir.ptr<!s8i>, !cir.ptr<!cir.float>) -> !s32i loc(#loc65)
    cir.br ^bb3 loc(#loc61)
  ^bb3:  // 2 preds: ^bb1, ^bb2
    cir.br ^bb4 loc(#loc61)
  ^bb4:  // pred: ^bb3
    cir.br ^bb5 loc(#loc214)
  ^bb5:  // pred: ^bb4
    %12 = cir.get_global @staticReturnsFalse : !cir.ptr<!cir.func<!s32i ()>> loc(#loc215)
    %13 = cir.call %12() : (!cir.ptr<!cir.func<!s32i ()>>) -> !s32i loc(#loc70)
    %14 = cir.cast(int_to_bool, %13 : !s32i), !cir.bool loc(#loc70)
    cir.brcond %14 ^bb6, ^bb7 loc(#loc216)
  ^bb6:  // pred: ^bb5
    %15 = cir.get_global @".str.1" : !cir.ptr<!cir.array<!s8i x 21>> loc(#loc50)
    %16 = cir.cast(array_to_ptrdecay, %15 : !cir.ptr<!cir.array<!s8i x 21>>), !cir.ptr<!s8i> loc(#loc50)
    cir.call @printLine(%16) : (!cir.ptr<!s8i>) -> () loc(#loc75)
    cir.br ^bb13 loc(#loc73)
  ^bb7:  // pred: ^bb5
    cir.br ^bb8 loc(#loc217)
  ^bb8:  // pred: ^bb7
    %17 = cir.load %1 : !cir.ptr<!cir.float>, !cir.float loc(#loc78)
    %18 = cir.cast(floating, %17 : !cir.float), !cir.double loc(#loc78)
    %19 = cir.fabs %18 : !cir.double loc(#loc78)
    %20 = cir.const #cir.fp<9.9999999999999995E-7> : !cir.double loc(#loc79)
    %21 = cir.cmp(gt, %19, %20) : !cir.double, !cir.bool loc(#loc218)
    cir.brcond %21 ^bb9, ^bb10 loc(#loc219)
  ^bb9:  // pred: ^bb8
    %22 = cir.const #cir.fp<1.000000e+02> : !cir.double loc(#loc84)
    %23 = cir.load %1 : !cir.ptr<!cir.float>, !cir.float loc(#loc85)
    %24 = cir.cast(floating, %23 : !cir.float), !cir.double loc(#loc85)
    %25 = cir.binop(div, %22, %24) : !cir.double loc(#loc220)
    %26 = cir.cast(float_to_int, %25 : !cir.double), !s32i loc(#loc220)
    cir.store %26, %0 : !s32i, !cir.ptr<!s32i> loc(#loc208)
    %27 = cir.load %0 : !cir.ptr<!s32i>, !s32i loc(#loc86)
    cir.call @printIntLine(%27) : (!s32i) -> () loc(#loc87)
    cir.br ^bb11 loc(#loc82)
  ^bb10:  // pred: ^bb8
    %28 = cir.get_global @".str.2" : !cir.ptr<!cir.array<!s8i x 38>> loc(#loc51)
    %29 = cir.cast(array_to_ptrdecay, %28 : !cir.ptr<!cir.array<!s8i x 38>>), !cir.ptr<!s8i> loc(#loc51)
    cir.call @printLine(%29) : (!cir.ptr<!s8i>) -> () loc(#loc88)
    cir.br ^bb11 loc(#loc77)
  ^bb11:  // 2 preds: ^bb9, ^bb10
    cir.br ^bb12 loc(#loc77)
  ^bb12:  // pred: ^bb11
    cir.br ^bb13 loc(#loc69)
  ^bb13:  // 2 preds: ^bb6, ^bb12
    cir.br ^bb14 loc(#loc69)
  ^bb14:  // pred: ^bb13
    cir.return loc(#loc53)
  } loc(#loc207)
  cir.func no_proto internal private @staticReturnsFalse() -> !s32i extra(#fn_attr) {
    %0 = cir.alloca !s32i, !cir.ptr<!s32i>, ["__retval"] {alignment = 4 : i64} loc(#loc90)
    %1 = cir.const #cir.int<0> : !s32i loc(#loc91)
    cir.store %1, %0 : !s32i, !cir.ptr<!s32i> loc(#loc222)
    %2 = cir.load %0 : !cir.ptr<!s32i>, !s32i loc(#loc222)
    cir.return %2 : !s32i loc(#loc222)
  } loc(#loc221)
  cir.func no_proto internal private @goodB2G2() extra(#fn_attr) {
    %0 = cir.alloca !s32i, !cir.ptr<!s32i>, ["result", init] {alignment = 4 : i64} loc(#loc224)
    %1 = cir.alloca !cir.float, !cir.ptr<!cir.float>, ["data"] {alignment = 4 : i64} loc(#loc225)
    %2 = cir.const #cir.fp<0.000000e+00> : !cir.float loc(#loc99)
    cir.store %2, %1 : !cir.float, !cir.ptr<!cir.float> loc(#loc226)
    cir.br ^bb1 loc(#loc227)
  ^bb1:  // pred: ^bb0
    %3 = cir.get_global @staticReturnsTrue : !cir.ptr<!cir.func<!s32i ()>> loc(#loc228)
    %4 = cir.call @staticReturnsTrue() : () -> !s32i loc(#loc103)
    %5 = cir.cast(int_to_bool, %4 : !s32i), !cir.bool loc(#loc103)
    cir.brcond %5 ^bb2, ^bb3 loc(#loc229)
  ^bb2:  // pred: ^bb1
    %6 = cir.get_global @__isoc99_fscanf : !cir.ptr<!cir.func<!s32i (!cir.ptr<!ty__IO_FILE>, !cir.ptr<!s8i>, ...)>> loc(#loc106)
    %7 = cir.get_global @stdin : !cir.ptr<!cir.ptr<!ty__IO_FILE>> loc(#loc185)
    %8 = cir.load %7 : !cir.ptr<!cir.ptr<!ty__IO_FILE>>, !cir.ptr<!ty__IO_FILE> loc(#loc107)
    %9 = cir.get_global @".str" : !cir.ptr<!cir.array<!s8i x 3>> loc(#loc108)
    %10 = cir.cast(array_to_ptrdecay, %9 : !cir.ptr<!cir.array<!s8i x 3>>), !cir.ptr<!s8i> loc(#loc108)
    %11 = cir.call @__isoc99_fscanf(%8, %10, %1) : (!cir.ptr<!ty__IO_FILE>, !cir.ptr<!s8i>, !cir.ptr<!cir.float>) -> !s32i loc(#loc106)
    cir.br ^bb3 loc(#loc102)
  ^bb3:  // 2 preds: ^bb1, ^bb2
    cir.br ^bb4 loc(#loc102)
  ^bb4:  // pred: ^bb3
    cir.br ^bb5 loc(#loc230)
  ^bb5:  // pred: ^bb4
    %12 = cir.get_global @staticReturnsTrue : !cir.ptr<!cir.func<!s32i ()>> loc(#loc231)
    %13 = cir.call @staticReturnsTrue() : () -> !s32i loc(#loc111)
    %14 = cir.cast(int_to_bool, %13 : !s32i), !cir.bool loc(#loc111)
    cir.brcond %14 ^bb6, ^bb12 loc(#loc232)
  ^bb6:  // pred: ^bb5
    cir.br ^bb7 loc(#loc233)
  ^bb7:  // pred: ^bb6
    %15 = cir.load %1 : !cir.ptr<!cir.float>, !cir.float loc(#loc116)
    %16 = cir.cast(floating, %15 : !cir.float), !cir.double loc(#loc116)
    %17 = cir.fabs %16 : !cir.double loc(#loc116)
    %18 = cir.const #cir.fp<9.9999999999999995E-7> : !cir.double loc(#loc117)
    %19 = cir.cmp(gt, %17, %18) : !cir.double, !cir.bool loc(#loc234)
    cir.brcond %19 ^bb8, ^bb9 loc(#loc235)
  ^bb8:  // pred: ^bb7
    %20 = cir.const #cir.fp<1.000000e+02> : !cir.double loc(#loc122)
    %21 = cir.load %1 : !cir.ptr<!cir.float>, !cir.float loc(#loc123)
    %22 = cir.cast(floating, %21 : !cir.float), !cir.double loc(#loc123)
    %23 = cir.binop(div, %20, %22) : !cir.double loc(#loc236)
    %24 = cir.cast(float_to_int, %23 : !cir.double), !s32i loc(#loc236)
    cir.store %24, %0 : !s32i, !cir.ptr<!s32i> loc(#loc224)
    %25 = cir.load %0 : !cir.ptr<!s32i>, !s32i loc(#loc124)
    cir.call @printIntLine(%25) : (!s32i) -> () loc(#loc125)
    cir.br ^bb10 loc(#loc120)
  ^bb9:  // pred: ^bb7
    %26 = cir.get_global @".str.2" : !cir.ptr<!cir.array<!s8i x 38>> loc(#loc126)
    %27 = cir.cast(array_to_ptrdecay, %26 : !cir.ptr<!cir.array<!s8i x 38>>), !cir.ptr<!s8i> loc(#loc126)
    cir.call @printLine(%27) : (!cir.ptr<!s8i>) -> () loc(#loc127)
    cir.br ^bb10 loc(#loc115)
  ^bb10:  // 2 preds: ^bb8, ^bb9
    cir.br ^bb11 loc(#loc115)
  ^bb11:  // pred: ^bb10
    cir.br ^bb12 loc(#loc110)
  ^bb12:  // 2 preds: ^bb5, ^bb11
    cir.br ^bb13 loc(#loc110)
  ^bb13:  // pred: ^bb12
    cir.return loc(#loc94)
  } loc(#loc223)
  cir.func no_proto internal private @goodG2B1() extra(#fn_attr) {
    %0 = cir.alloca !s32i, !cir.ptr<!s32i>, ["result", init] {alignment = 4 : i64} loc(#loc238)
    %1 = cir.alloca !cir.float, !cir.ptr<!cir.float>, ["data"] {alignment = 4 : i64} loc(#loc239)
    %2 = cir.const #cir.fp<0.000000e+00> : !cir.float loc(#loc134)
    cir.store %2, %1 : !cir.float, !cir.ptr<!cir.float> loc(#loc240)
    cir.br ^bb1 loc(#loc241)
  ^bb1:  // pred: ^bb0
    %3 = cir.get_global @staticReturnsFalse : !cir.ptr<!cir.func<!s32i ()>> loc(#loc242)
    %4 = cir.call @staticReturnsFalse() : () -> !s32i loc(#loc138)
    %5 = cir.cast(int_to_bool, %4 : !s32i), !cir.bool loc(#loc138)
    cir.brcond %5 ^bb2, ^bb3 loc(#loc243)
  ^bb2:  // pred: ^bb1
    %6 = cir.get_global @".str.1" : !cir.ptr<!cir.array<!s8i x 21>> loc(#loc143)
    %7 = cir.cast(array_to_ptrdecay, %6 : !cir.ptr<!cir.array<!s8i x 21>>), !cir.ptr<!s8i> loc(#loc143)
    cir.call @printLine(%7) : (!cir.ptr<!s8i>) -> () loc(#loc144)
    cir.br ^bb4 loc(#loc141)
  ^bb3:  // pred: ^bb1
    %8 = cir.const #cir.fp<2.000000e+00> : !cir.float loc(#loc145)
    cir.store %8, %1 : !cir.float, !cir.ptr<!cir.float> loc(#loc244)
    cir.br ^bb4 loc(#loc137)
  ^bb4:  // 2 preds: ^bb2, ^bb3
    cir.br ^bb5 loc(#loc137)
  ^bb5:  // pred: ^bb4
    cir.br ^bb6 loc(#loc245)
  ^bb6:  // pred: ^bb5
    %9 = cir.get_global @staticReturnsTrue : !cir.ptr<!cir.func<!s32i ()>> loc(#loc246)
    %10 = cir.call @staticReturnsTrue() : () -> !s32i loc(#loc149)
    %11 = cir.cast(int_to_bool, %10 : !s32i), !cir.bool loc(#loc149)
    cir.brcond %11 ^bb7, ^bb10 loc(#loc247)
  ^bb7:  // pred: ^bb6
    cir.br ^bb8 loc(#loc248)
  ^bb8:  // pred: ^bb7
    %12 = cir.const #cir.fp<1.000000e+02> : !cir.double loc(#loc154)
    %13 = cir.load %1 : !cir.ptr<!cir.float>, !cir.float loc(#loc155)
    %14 = cir.cast(floating, %13 : !cir.float), !cir.double loc(#loc155)
    %15 = cir.binop(div, %12, %14) : !cir.double loc(#loc249)
    %16 = cir.cast(float_to_int, %15 : !cir.double), !s32i loc(#loc249)
    cir.store %16, %0 : !s32i, !cir.ptr<!s32i> loc(#loc238)
    %17 = cir.load %0 : !cir.ptr<!s32i>, !s32i loc(#loc156)
    cir.call @printIntLine(%17) : (!s32i) -> () loc(#loc157)
    cir.br ^bb9 loc(#loc153)
  ^bb9:  // pred: ^bb8
    cir.br ^bb10 loc(#loc148)
  ^bb10:  // 2 preds: ^bb6, ^bb9
    cir.br ^bb11 loc(#loc148)
  ^bb11:  // pred: ^bb10
    cir.return loc(#loc129)
  } loc(#loc237)
  cir.func no_proto internal private @goodG2B2() extra(#fn_attr) {
    %0 = cir.alloca !s32i, !cir.ptr<!s32i>, ["result", init] {alignment = 4 : i64} loc(#loc251)
    %1 = cir.alloca !cir.float, !cir.ptr<!cir.float>, ["data"] {alignment = 4 : i64} loc(#loc252)
    %2 = cir.const #cir.fp<0.000000e+00> : !cir.float loc(#loc164)
    cir.store %2, %1 : !cir.float, !cir.ptr<!cir.float> loc(#loc253)
    cir.br ^bb1 loc(#loc254)
  ^bb1:  // pred: ^bb0
    %3 = cir.get_global @staticReturnsTrue : !cir.ptr<!cir.func<!s32i ()>> loc(#loc255)
    %4 = cir.call @staticReturnsTrue() : () -> !s32i loc(#loc168)
    %5 = cir.cast(int_to_bool, %4 : !s32i), !cir.bool loc(#loc168)
    cir.brcond %5 ^bb2, ^bb3 loc(#loc256)
  ^bb2:  // pred: ^bb1
    %6 = cir.const #cir.fp<2.000000e+00> : !cir.float loc(#loc171)
    cir.store %6, %1 : !cir.float, !cir.ptr<!cir.float> loc(#loc257)
    cir.br ^bb3 loc(#loc167)
  ^bb3:  // 2 preds: ^bb1, ^bb2
    cir.br ^bb4 loc(#loc167)
  ^bb4:  // pred: ^bb3
    cir.br ^bb5 loc(#loc258)
  ^bb5:  // pred: ^bb4
    %7 = cir.get_global @staticReturnsTrue : !cir.ptr<!cir.func<!s32i ()>> loc(#loc259)
    %8 = cir.call @staticReturnsTrue() : () -> !s32i loc(#loc175)
    %9 = cir.cast(int_to_bool, %8 : !s32i), !cir.bool loc(#loc175)
    cir.brcond %9 ^bb6, ^bb9 loc(#loc260)
  ^bb6:  // pred: ^bb5
    cir.br ^bb7 loc(#loc261)
  ^bb7:  // pred: ^bb6
    %10 = cir.const #cir.fp<1.000000e+02> : !cir.double loc(#loc180)
    %11 = cir.load %1 : !cir.ptr<!cir.float>, !cir.float loc(#loc181)
    %12 = cir.cast(floating, %11 : !cir.float), !cir.double loc(#loc181)
    %13 = cir.binop(div, %10, %12) : !cir.double loc(#loc262)
    %14 = cir.cast(float_to_int, %13 : !cir.double), !s32i loc(#loc262)
    cir.store %14, %0 : !s32i, !cir.ptr<!s32i> loc(#loc251)
    %15 = cir.load %0 : !cir.ptr<!s32i>, !s32i loc(#loc182)
    cir.call @printIntLine(%15) : (!s32i) -> () loc(#loc183)
    cir.br ^bb8 loc(#loc179)
  ^bb8:  // pred: ^bb7
    cir.br ^bb9 loc(#loc174)
  ^bb9:  // 2 preds: ^bb5, ^bb8
    cir.br ^bb10 loc(#loc174)
  ^bb10:  // pred: ^bb9
    cir.return loc(#loc159)
  } loc(#loc250)
} loc(#loc)
#loc = loc("/home/ladisgin/git_proj/juliet-c/testcases/CWE369_Divide_by_Zero/s01/CWE369_Divide_by_Zero__float_fscanf_08.c":0:0)
#loc1 = loc("/usr/include/stdio.h":463:1)
#loc2 = loc("/usr/include/stdio.h":465:33)
#loc3 = loc("/usr/include/stdio.h":149:1)
#loc4 = loc("/usr/include/stdio.h":149:14)
#loc5 = loc("CWE369_Divide_by_Zero__float_fscanf_08.c":45:24)
#loc6 = loc("../../../testcasesupport/std_testcase_io.h":18:1)
#loc7 = loc("../../../testcasesupport/std_testcase_io.h":18:33)
#loc8 = loc("CWE369_Divide_by_Zero__float_fscanf_08.c":37:1)
#loc9 = loc("CWE369_Divide_by_Zero__float_fscanf_08.c":55:1)
#loc10 = loc("CWE369_Divide_by_Zero__float_fscanf_08.c":51:13)
#loc11 = loc("CWE369_Divide_by_Zero__float_fscanf_08.c":51:44)
#loc12 = loc("CWE369_Divide_by_Zero__float_fscanf_08.c":39:5)
#loc13 = loc("CWE369_Divide_by_Zero__float_fscanf_08.c":39:11)
#loc14 = loc("CWE369_Divide_by_Zero__float_fscanf_08.c":41:12)
#loc15 = loc("CWE369_Divide_by_Zero__float_fscanf_08.c":41:5)
#loc16 = loc("CWE369_Divide_by_Zero__float_fscanf_08.c":42:5)
#loc17 = loc("CWE369_Divide_by_Zero__float_fscanf_08.c":46:5)
#loc18 = loc("CWE369_Divide_by_Zero__float_fscanf_08.c":42:8)
#loc19 = loc("CWE369_Divide_by_Zero__float_fscanf_08.c":42:26)
#loc20 = loc("CWE369_Divide_by_Zero__float_fscanf_08.c":43:5)
#loc21 = loc("CWE369_Divide_by_Zero__float_fscanf_08.c":45:9)
#loc22 = loc("CWE369_Divide_by_Zero__float_fscanf_08.c":45:17)
#loc23 = loc("CWE369_Divide_by_Zero__float_fscanf_08.c":47:5)
#loc24 = loc("CWE369_Divide_by_Zero__float_fscanf_08.c":54:5)
#loc25 = loc("CWE369_Divide_by_Zero__float_fscanf_08.c":47:8)
#loc26 = loc("CWE369_Divide_by_Zero__float_fscanf_08.c":47:26)
#loc27 = loc("CWE369_Divide_by_Zero__float_fscanf_08.c":48:5)
#loc28 = loc("CWE369_Divide_by_Zero__float_fscanf_08.c":49:9)
#loc29 = loc("CWE369_Divide_by_Zero__float_fscanf_08.c":53:9)
#loc30 = loc("CWE369_Divide_by_Zero__float_fscanf_08.c":51:32)
#loc31 = loc("CWE369_Divide_by_Zero__float_fscanf_08.c":51:40)
#loc32 = loc("CWE369_Divide_by_Zero__float_fscanf_08.c":52:26)
#loc33 = loc("CWE369_Divide_by_Zero__float_fscanf_08.c":52:13)
#loc34 = loc("CWE369_Divide_by_Zero__float_fscanf_08.c":165:1)
#loc35 = loc("CWE369_Divide_by_Zero__float_fscanf_08.c":171:1)
#loc36 = loc("CWE369_Divide_by_Zero__float_fscanf_08.c":167:5)
#loc37 = loc("CWE369_Divide_by_Zero__float_fscanf_08.c":167:14)
#loc38 = loc("CWE369_Divide_by_Zero__float_fscanf_08.c":168:5)
#loc39 = loc("CWE369_Divide_by_Zero__float_fscanf_08.c":168:14)
#loc40 = loc("CWE369_Divide_by_Zero__float_fscanf_08.c":169:5)
#loc41 = loc("CWE369_Divide_by_Zero__float_fscanf_08.c":169:14)
#loc42 = loc("CWE369_Divide_by_Zero__float_fscanf_08.c":170:5)
#loc43 = loc("CWE369_Divide_by_Zero__float_fscanf_08.c":170:14)
#loc44 = loc("CWE369_Divide_by_Zero__float_fscanf_08.c":25:1)
#loc45 = loc("CWE369_Divide_by_Zero__float_fscanf_08.c":28:1)
#loc46 = loc("CWE369_Divide_by_Zero__float_fscanf_08.c":27:12)
#loc47 = loc("CWE369_Divide_by_Zero__float_fscanf_08.c":27:5)
#loc48 = loc("../../../testcasesupport/std_testcase_io.h":14:1)
#loc49 = loc("../../../testcasesupport/std_testcase_io.h":14:33)
#loc50 = loc("CWE369_Divide_by_Zero__float_fscanf_08.c":75:19)
#loc51 = loc("CWE369_Divide_by_Zero__float_fscanf_08.c":87:23)
#loc52 = loc("CWE369_Divide_by_Zero__float_fscanf_08.c":62:1)
#loc53 = loc("CWE369_Divide_by_Zero__float_fscanf_08.c":90:1)
#loc54 = loc("CWE369_Divide_by_Zero__float_fscanf_08.c":82:13)
#loc55 = loc("CWE369_Divide_by_Zero__float_fscanf_08.c":82:44)
#loc56 = loc("CWE369_Divide_by_Zero__float_fscanf_08.c":64:5)
#loc57 = loc("CWE369_Divide_by_Zero__float_fscanf_08.c":64:11)
#loc58 = loc("CWE369_Divide_by_Zero__float_fscanf_08.c":66:12)
#loc59 = loc("CWE369_Divide_by_Zero__float_fscanf_08.c":66:5)
#loc60 = loc("CWE369_Divide_by_Zero__float_fscanf_08.c":67:5)
#loc61 = loc("CWE369_Divide_by_Zero__float_fscanf_08.c":71:5)
#loc62 = loc("CWE369_Divide_by_Zero__float_fscanf_08.c":67:8)
#loc63 = loc("CWE369_Divide_by_Zero__float_fscanf_08.c":67:26)
#loc64 = loc("CWE369_Divide_by_Zero__float_fscanf_08.c":68:5)
#loc65 = loc("CWE369_Divide_by_Zero__float_fscanf_08.c":70:9)
#loc66 = loc("CWE369_Divide_by_Zero__float_fscanf_08.c":70:17)
#loc67 = loc("CWE369_Divide_by_Zero__float_fscanf_08.c":70:24)
#loc68 = loc("CWE369_Divide_by_Zero__float_fscanf_08.c":72:5)
#loc69 = loc("CWE369_Divide_by_Zero__float_fscanf_08.c":89:5)
#loc70 = loc("CWE369_Divide_by_Zero__float_fscanf_08.c":72:8)
#loc71 = loc("CWE369_Divide_by_Zero__float_fscanf_08.c":72:27)
#loc72 = loc("CWE369_Divide_by_Zero__float_fscanf_08.c":73:5)
#loc73 = loc("CWE369_Divide_by_Zero__float_fscanf_08.c":76:5)
#loc74 = loc("CWE369_Divide_by_Zero__float_fscanf_08.c":78:5)
#loc75 = loc("CWE369_Divide_by_Zero__float_fscanf_08.c":75:9)
#loc76 = loc("CWE369_Divide_by_Zero__float_fscanf_08.c":80:9)
#loc77 = loc("CWE369_Divide_by_Zero__float_fscanf_08.c":88:9)
#loc78 = loc("CWE369_Divide_by_Zero__float_fscanf_08.c":80:17)
#loc79 = loc("CWE369_Divide_by_Zero__float_fscanf_08.c":80:25)
#loc80 = loc("CWE369_Divide_by_Zero__float_fscanf_08.c":80:12)
#loc81 = loc("CWE369_Divide_by_Zero__float_fscanf_08.c":81:9)
#loc82 = loc("CWE369_Divide_by_Zero__float_fscanf_08.c":84:9)
#loc83 = loc("CWE369_Divide_by_Zero__float_fscanf_08.c":86:9)
#loc84 = loc("CWE369_Divide_by_Zero__float_fscanf_08.c":82:32)
#loc85 = loc("CWE369_Divide_by_Zero__float_fscanf_08.c":82:40)
#loc86 = loc("CWE369_Divide_by_Zero__float_fscanf_08.c":83:26)
#loc87 = loc("CWE369_Divide_by_Zero__float_fscanf_08.c":83:13)
#loc88 = loc("CWE369_Divide_by_Zero__float_fscanf_08.c":87:13)
#loc89 = loc("CWE369_Divide_by_Zero__float_fscanf_08.c":30:1)
#loc90 = loc("CWE369_Divide_by_Zero__float_fscanf_08.c":33:1)
#loc91 = loc("CWE369_Divide_by_Zero__float_fscanf_08.c":32:12)
#loc92 = loc("CWE369_Divide_by_Zero__float_fscanf_08.c":32:5)
#loc93 = loc("CWE369_Divide_by_Zero__float_fscanf_08.c":93:1)
#loc94 = loc("CWE369_Divide_by_Zero__float_fscanf_08.c":116:1)
#loc95 = loc("CWE369_Divide_by_Zero__float_fscanf_08.c":108:13)
#loc96 = loc("CWE369_Divide_by_Zero__float_fscanf_08.c":108:44)
#loc97 = loc("CWE369_Divide_by_Zero__float_fscanf_08.c":95:5)
#loc98 = loc("CWE369_Divide_by_Zero__float_fscanf_08.c":95:11)
#loc99 = loc("CWE369_Divide_by_Zero__float_fscanf_08.c":97:12)
#loc100 = loc("CWE369_Divide_by_Zero__float_fscanf_08.c":97:5)
#loc101 = loc("CWE369_Divide_by_Zero__float_fscanf_08.c":98:5)
#loc102 = loc("CWE369_Divide_by_Zero__float_fscanf_08.c":102:5)
#loc103 = loc("CWE369_Divide_by_Zero__float_fscanf_08.c":98:8)
#loc104 = loc("CWE369_Divide_by_Zero__float_fscanf_08.c":98:26)
#loc105 = loc("CWE369_Divide_by_Zero__float_fscanf_08.c":99:5)
#loc106 = loc("CWE369_Divide_by_Zero__float_fscanf_08.c":101:9)
#loc107 = loc("CWE369_Divide_by_Zero__float_fscanf_08.c":101:17)
#loc108 = loc("CWE369_Divide_by_Zero__float_fscanf_08.c":101:24)
#loc109 = loc("CWE369_Divide_by_Zero__float_fscanf_08.c":103:5)
#loc110 = loc("CWE369_Divide_by_Zero__float_fscanf_08.c":115:5)
#loc111 = loc("CWE369_Divide_by_Zero__float_fscanf_08.c":103:8)
#loc112 = loc("CWE369_Divide_by_Zero__float_fscanf_08.c":103:26)
#loc113 = loc("CWE369_Divide_by_Zero__float_fscanf_08.c":104:5)
#loc114 = loc("CWE369_Divide_by_Zero__float_fscanf_08.c":106:9)
#loc115 = loc("CWE369_Divide_by_Zero__float_fscanf_08.c":114:9)
#loc116 = loc("CWE369_Divide_by_Zero__float_fscanf_08.c":106:17)
#loc117 = loc("CWE369_Divide_by_Zero__float_fscanf_08.c":106:25)
#loc118 = loc("CWE369_Divide_by_Zero__float_fscanf_08.c":106:12)
#loc119 = loc("CWE369_Divide_by_Zero__float_fscanf_08.c":107:9)
#loc120 = loc("CWE369_Divide_by_Zero__float_fscanf_08.c":110:9)
#loc121 = loc("CWE369_Divide_by_Zero__float_fscanf_08.c":112:9)
#loc122 = loc("CWE369_Divide_by_Zero__float_fscanf_08.c":108:32)
#loc123 = loc("CWE369_Divide_by_Zero__float_fscanf_08.c":108:40)
#loc124 = loc("CWE369_Divide_by_Zero__float_fscanf_08.c":109:26)
#loc125 = loc("CWE369_Divide_by_Zero__float_fscanf_08.c":109:13)
#loc126 = loc("CWE369_Divide_by_Zero__float_fscanf_08.c":113:23)
#loc127 = loc("CWE369_Divide_by_Zero__float_fscanf_08.c":113:13)
#loc128 = loc("CWE369_Divide_by_Zero__float_fscanf_08.c":119:1)
#loc129 = loc("CWE369_Divide_by_Zero__float_fscanf_08.c":142:1)
#loc130 = loc("CWE369_Divide_by_Zero__float_fscanf_08.c":138:13)
#loc131 = loc("CWE369_Divide_by_Zero__float_fscanf_08.c":138:44)
#loc132 = loc("CWE369_Divide_by_Zero__float_fscanf_08.c":121:5)
#loc133 = loc("CWE369_Divide_by_Zero__float_fscanf_08.c":121:11)
#loc134 = loc("CWE369_Divide_by_Zero__float_fscanf_08.c":123:12)
#loc135 = loc("CWE369_Divide_by_Zero__float_fscanf_08.c":123:5)
#loc136 = loc("CWE369_Divide_by_Zero__float_fscanf_08.c":124:5)
#loc137 = loc("CWE369_Divide_by_Zero__float_fscanf_08.c":133:5)
#loc138 = loc("CWE369_Divide_by_Zero__float_fscanf_08.c":124:8)
#loc139 = loc("CWE369_Divide_by_Zero__float_fscanf_08.c":124:27)
#loc140 = loc("CWE369_Divide_by_Zero__float_fscanf_08.c":125:5)
#loc141 = loc("CWE369_Divide_by_Zero__float_fscanf_08.c":128:5)
#loc142 = loc("CWE369_Divide_by_Zero__float_fscanf_08.c":130:5)
#loc143 = loc("CWE369_Divide_by_Zero__float_fscanf_08.c":127:19)
#loc144 = loc("CWE369_Divide_by_Zero__float_fscanf_08.c":127:9)
#loc145 = loc("CWE369_Divide_by_Zero__float_fscanf_08.c":132:16)
#loc146 = loc("CWE369_Divide_by_Zero__float_fscanf_08.c":132:9)
#loc147 = loc("CWE369_Divide_by_Zero__float_fscanf_08.c":134:5)
#loc148 = loc("CWE369_Divide_by_Zero__float_fscanf_08.c":141:5)
#loc149 = loc("CWE369_Divide_by_Zero__float_fscanf_08.c":134:8)
#loc150 = loc("CWE369_Divide_by_Zero__float_fscanf_08.c":134:26)
#loc151 = loc("CWE369_Divide_by_Zero__float_fscanf_08.c":135:5)
#loc152 = loc("CWE369_Divide_by_Zero__float_fscanf_08.c":136:9)
#loc153 = loc("CWE369_Divide_by_Zero__float_fscanf_08.c":140:9)
#loc154 = loc("CWE369_Divide_by_Zero__float_fscanf_08.c":138:32)
#loc155 = loc("CWE369_Divide_by_Zero__float_fscanf_08.c":138:40)
#loc156 = loc("CWE369_Divide_by_Zero__float_fscanf_08.c":139:26)
#loc157 = loc("CWE369_Divide_by_Zero__float_fscanf_08.c":139:13)
#loc158 = loc("CWE369_Divide_by_Zero__float_fscanf_08.c":145:1)
#loc159 = loc("CWE369_Divide_by_Zero__float_fscanf_08.c":163:1)
#loc160 = loc("CWE369_Divide_by_Zero__float_fscanf_08.c":159:13)
#loc161 = loc("CWE369_Divide_by_Zero__float_fscanf_08.c":159:44)
#loc162 = loc("CWE369_Divide_by_Zero__float_fscanf_08.c":147:5)
#loc163 = loc("CWE369_Divide_by_Zero__float_fscanf_08.c":147:11)
#loc164 = loc("CWE369_Divide_by_Zero__float_fscanf_08.c":149:12)
#loc165 = loc("CWE369_Divide_by_Zero__float_fscanf_08.c":149:5)
#loc166 = loc("CWE369_Divide_by_Zero__float_fscanf_08.c":150:5)
#loc167 = loc("CWE369_Divide_by_Zero__float_fscanf_08.c":154:5)
#loc168 = loc("CWE369_Divide_by_Zero__float_fscanf_08.c":150:8)
#loc169 = loc("CWE369_Divide_by_Zero__float_fscanf_08.c":150:26)
#loc170 = loc("CWE369_Divide_by_Zero__float_fscanf_08.c":151:5)
#loc171 = loc("CWE369_Divide_by_Zero__float_fscanf_08.c":153:16)
#loc172 = loc("CWE369_Divide_by_Zero__float_fscanf_08.c":153:9)
#loc173 = loc("CWE369_Divide_by_Zero__float_fscanf_08.c":155:5)
#loc174 = loc("CWE369_Divide_by_Zero__float_fscanf_08.c":162:5)
#loc175 = loc("CWE369_Divide_by_Zero__float_fscanf_08.c":155:8)
#loc176 = loc("CWE369_Divide_by_Zero__float_fscanf_08.c":155:26)
#loc177 = loc("CWE369_Divide_by_Zero__float_fscanf_08.c":156:5)
#loc178 = loc("CWE369_Divide_by_Zero__float_fscanf_08.c":157:9)
#loc179 = loc("CWE369_Divide_by_Zero__float_fscanf_08.c":161:9)
#loc180 = loc("CWE369_Divide_by_Zero__float_fscanf_08.c":159:32)
#loc181 = loc("CWE369_Divide_by_Zero__float_fscanf_08.c":159:40)
#loc182 = loc("CWE369_Divide_by_Zero__float_fscanf_08.c":160:26)
#loc183 = loc("CWE369_Divide_by_Zero__float_fscanf_08.c":160:13)
#loc184 = loc(fused[#loc1, #loc2])
#loc185 = loc(fused[#loc3, #loc4])
#loc186 = loc(fused[#loc6, #loc7])
#loc187 = loc(fused[#loc8, #loc9])
#loc188 = loc(fused[#loc10, #loc11])
#loc189 = loc(fused[#loc12, #loc13])
#loc190 = loc(fused[#loc15, #loc14])
#loc191 = loc(fused[#loc16, #loc17])
#loc192 = loc(fused[#loc18, #loc19])
#loc193 = loc(fused[#loc20, #loc17])
#loc194 = loc(fused[#loc23, #loc24])
#loc195 = loc(fused[#loc25, #loc26])
#loc196 = loc(fused[#loc27, #loc24])
#loc197 = loc(fused[#loc28, #loc29])
#loc198 = loc(fused[#loc30, #loc31])
#loc199 = loc(fused[#loc34, #loc35])
#loc200 = loc(fused[#loc36, #loc37])
#loc201 = loc(fused[#loc38, #loc39])
#loc202 = loc(fused[#loc40, #loc41])
#loc203 = loc(fused[#loc42, #loc43])
#loc204 = loc(fused[#loc44, #loc45])
#loc205 = loc(fused[#loc47, #loc46])
#loc206 = loc(fused[#loc48, #loc49])
#loc207 = loc(fused[#loc52, #loc53])
#loc208 = loc(fused[#loc54, #loc55])
#loc209 = loc(fused[#loc56, #loc57])
#loc210 = loc(fused[#loc59, #loc58])
#loc211 = loc(fused[#loc60, #loc61])
#loc212 = loc(fused[#loc62, #loc63])
#loc213 = loc(fused[#loc64, #loc61])
#loc214 = loc(fused[#loc68, #loc69])
#loc215 = loc(fused[#loc70, #loc71])
#loc216 = loc(fused[#loc72, #loc73, #loc74, #loc69])
#loc217 = loc(fused[#loc76, #loc77])
#loc218 = loc(fused[#loc80, #loc79])
#loc219 = loc(fused[#loc81, #loc82, #loc83, #loc77])
#loc220 = loc(fused[#loc84, #loc85])
#loc221 = loc(fused[#loc89, #loc90])
#loc222 = loc(fused[#loc92, #loc91])
#loc223 = loc(fused[#loc93, #loc94])
#loc224 = loc(fused[#loc95, #loc96])
#loc225 = loc(fused[#loc97, #loc98])
#loc226 = loc(fused[#loc100, #loc99])
#loc227 = loc(fused[#loc101, #loc102])
#loc228 = loc(fused[#loc103, #loc104])
#loc229 = loc(fused[#loc105, #loc102])
#loc230 = loc(fused[#loc109, #loc110])
#loc231 = loc(fused[#loc111, #loc112])
#loc232 = loc(fused[#loc113, #loc110])
#loc233 = loc(fused[#loc114, #loc115])
#loc234 = loc(fused[#loc118, #loc117])
#loc235 = loc(fused[#loc119, #loc120, #loc121, #loc115])
#loc236 = loc(fused[#loc122, #loc123])
#loc237 = loc(fused[#loc128, #loc129])
#loc238 = loc(fused[#loc130, #loc131])
#loc239 = loc(fused[#loc132, #loc133])
#loc240 = loc(fused[#loc135, #loc134])
#loc241 = loc(fused[#loc136, #loc137])
#loc242 = loc(fused[#loc138, #loc139])
#loc243 = loc(fused[#loc140, #loc141, #loc142, #loc137])
#loc244 = loc(fused[#loc146, #loc145])
#loc245 = loc(fused[#loc147, #loc148])
#loc246 = loc(fused[#loc149, #loc150])
#loc247 = loc(fused[#loc151, #loc148])
#loc248 = loc(fused[#loc152, #loc153])
#loc249 = loc(fused[#loc154, #loc155])
#loc250 = loc(fused[#loc158, #loc159])
#loc251 = loc(fused[#loc160, #loc161])
#loc252 = loc(fused[#loc162, #loc163])
#loc253 = loc(fused[#loc165, #loc164])
#loc254 = loc(fused[#loc166, #loc167])
#loc255 = loc(fused[#loc168, #loc169])
#loc256 = loc(fused[#loc170, #loc167])
#loc257 = loc(fused[#loc172, #loc171])
#loc258 = loc(fused[#loc173, #loc174])
#loc259 = loc(fused[#loc175, #loc176])
#loc260 = loc(fused[#loc177, #loc174])
#loc261 = loc(fused[#loc178, #loc179])
#loc262 = loc(fused[#loc180, #loc181])
