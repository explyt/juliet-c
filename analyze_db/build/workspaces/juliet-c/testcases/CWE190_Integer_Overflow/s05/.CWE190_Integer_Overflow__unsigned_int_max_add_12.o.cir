!s32i = !cir.int<s, 32>
!s8i = !cir.int<s, 8>
!u32i = !cir.int<u, 32>
#fn_attr = #cir<extra({inline = #cir.inline<no>, nothrow = #cir.nothrow, optnone = #cir.optnone, uwtable = #cir.uwtable<async>})>
module @"/workspaces/juliet-c/testcases/CWE190_Integer_Overflow/s05/CWE190_Integer_Overflow__unsigned_int_max_add_12.c" attributes {cir.lang = #cir.lang<c>, cir.sob = #cir.signed_overflow_behavior<undefined>, cir.triple = "x86_64-unknown-linux-gnu", cir.type_size_info = #cir.type_size_info<char = 8, int = 32, size_t = 64>, cir.uwtable = #cir.uwtable<async>, dlti.dl_spec = #dlti.dl_spec<i128 = dense<128> : vector<2xi64>, !llvm.ptr<270> = dense<32> : vector<4xi64>, f80 = dense<128> : vector<2xi64>, !llvm.ptr = dense<64> : vector<4xi64>, i1 = dense<8> : vector<2xi64>, i8 = dense<8> : vector<2xi64>, i32 = dense<32> : vector<2xi64>, i16 = dense<16> : vector<2xi64>, f64 = dense<64> : vector<2xi64>, f16 = dense<16> : vector<2xi64>, !llvm.ptr<271> = dense<32> : vector<4xi64>, f128 = dense<128> : vector<2xi64>, i64 = dense<64> : vector<2xi64>, !llvm.ptr<272> = dense<64> : vector<4xi64>, "dlti.stack_alignment" = 128 : i64, "dlti.endianness" = "little", "dlti.mangling_mode" = "e">} {
  cir.func no_proto private @globalReturnsTrueOrFalse(...) -> !s32i loc(#loc148)
  cir.func private @printUnsignedLine(!u32i) loc(#loc149)
  cir.func private @printLine(!cir.ptr<!s8i>) loc(#loc150)
  cir.global "private" constant cir_private dsolocal @".str" = #cir.const_array<"data value is too large to perform arithmetic safely.\00" : !cir.array<!s8i x 54>> : !cir.array<!s8i x 54> {alignment = 1 : i64} loc(#loc7)
  cir.func no_proto @CWE190_Integer_Overflow__unsigned_int_max_add_12_bad() extra(#fn_attr) {
    %0 = cir.alloca !u32i, !cir.ptr<!u32i>, ["data"] {alignment = 4 : i64} loc(#loc152)
    %1 = cir.const #cir.int<0> : !s32i loc(#loc12)
    %2 = cir.cast(integral, %1 : !s32i), !u32i loc(#loc12)
    cir.store %2, %0 : !u32i, !cir.ptr<!u32i> loc(#loc153)
    cir.scope {
      %3 = cir.get_global @globalReturnsTrueOrFalse : !cir.ptr<!cir.func<(...) -> !s32i>> loc(#loc155)
      %4 = cir.cast(bitcast, %3 : !cir.ptr<!cir.func<(...) -> !s32i>>), !cir.ptr<!cir.func<() -> !s32i>> loc(#loc155)
      %5 = cir.call %4() : (!cir.ptr<!cir.func<() -> !s32i>>) -> !s32i loc(#loc16)
      %6 = cir.cast(int_to_bool, %5 : !s32i), !cir.bool loc(#loc16)
      cir.if %6 {
        %7 = cir.const #cir.int<2147483647> : !s32i loc(#loc21)
        %8 = cir.cast(integral, %7 : !s32i), !u32i loc(#loc21)
        %9 = cir.const #cir.int<2> : !u32i loc(#loc21)
        %10 = cir.binop(mul, %8, %9) : !u32i loc(#loc21)
        %11 = cir.const #cir.int<1> : !u32i loc(#loc21)
        %12 = cir.binop(add, %10, %11) : !u32i loc(#loc21)
        cir.store %12, %0 : !u32i, !cir.ptr<!u32i> loc(#loc157)
      } else {
        %7 = cir.const #cir.int<2> : !s32i loc(#loc23)
        %8 = cir.cast(integral, %7 : !s32i), !u32i loc(#loc23)
        cir.store %8, %0 : !u32i, !cir.ptr<!u32i> loc(#loc158)
      } loc(#loc156)
    } loc(#loc154)
    cir.scope {
      %3 = cir.get_global @globalReturnsTrueOrFalse : !cir.ptr<!cir.func<(...) -> !s32i>> loc(#loc160)
      %4 = cir.cast(bitcast, %3 : !cir.ptr<!cir.func<(...) -> !s32i>>), !cir.ptr<!cir.func<() -> !s32i>> loc(#loc160)
      %5 = cir.call %4() : (!cir.ptr<!cir.func<() -> !s32i>>) -> !s32i loc(#loc27)
      %6 = cir.cast(int_to_bool, %5 : !s32i), !cir.bool loc(#loc27)
      cir.if %6 {
        cir.scope {
          %7 = cir.alloca !u32i, !cir.ptr<!u32i>, ["result", init] {alignment = 4 : i64} loc(#loc163)
          %8 = cir.load %0 : !cir.ptr<!u32i>, !u32i loc(#loc36)
          %9 = cir.const #cir.int<1> : !s32i loc(#loc35)
          %10 = cir.cast(integral, %9 : !s32i), !u32i loc(#loc35)
          %11 = cir.binop(add, %8, %10) : !u32i loc(#loc164)
          cir.store %11, %7 : !u32i, !cir.ptr<!u32i> loc(#loc163)
          %12 = cir.load %7 : !cir.ptr<!u32i>, !u32i loc(#loc37)
          cir.call @printUnsignedLine(%12) : (!u32i) -> () loc(#loc38)
        } loc(#loc162)
      } else {
        cir.scope {
          %7 = cir.load %0 : !cir.ptr<!u32i>, !u32i loc(#loc41)
          %8 = cir.const #cir.int<2147483647> : !s32i loc(#loc42)
          %9 = cir.cast(integral, %8 : !s32i), !u32i loc(#loc42)
          %10 = cir.const #cir.int<2> : !u32i loc(#loc42)
          %11 = cir.binop(mul, %9, %10) : !u32i loc(#loc42)
          %12 = cir.const #cir.int<1> : !u32i loc(#loc42)
          %13 = cir.binop(add, %11, %12) : !u32i loc(#loc42)
          %14 = cir.cmp(lt, %7, %13) : !u32i, !cir.bool loc(#loc166)
          cir.if %14 {
            %15 = cir.alloca !u32i, !cir.ptr<!u32i>, ["result", init] {alignment = 4 : i64} loc(#loc168)
            %16 = cir.load %0 : !cir.ptr<!u32i>, !u32i loc(#loc48)
            %17 = cir.const #cir.int<1> : !s32i loc(#loc47)
            %18 = cir.cast(integral, %17 : !s32i), !u32i loc(#loc47)
            %19 = cir.binop(add, %16, %18) : !u32i loc(#loc169)
            cir.store %19, %15 : !u32i, !cir.ptr<!u32i> loc(#loc168)
            %20 = cir.load %15 : !cir.ptr<!u32i>, !u32i loc(#loc49)
            cir.call @printUnsignedLine(%20) : (!u32i) -> () loc(#loc50)
          } else {
            %15 = cir.get_global @".str" : !cir.ptr<!cir.array<!s8i x 54>> loc(#loc7)
            %16 = cir.cast(array_to_ptrdecay, %15 : !cir.ptr<!cir.array<!s8i x 54>>), !cir.ptr<!s8i> loc(#loc7)
            cir.call @printLine(%16) : (!cir.ptr<!s8i>) -> () loc(#loc51)
          } loc(#loc167)
        } loc(#loc165)
      } loc(#loc161)
    } loc(#loc159)
    cir.return loc(#loc9)
  } loc(#loc151)
  cir.func no_proto @CWE190_Integer_Overflow__unsigned_int_max_add_12_good() extra(#fn_attr) {
    %0 = cir.get_global @goodB2G : !cir.ptr<!cir.func<()>> loc(#loc171)
    cir.call %0() : (!cir.ptr<!cir.func<()>>) -> () loc(#loc54)
    %1 = cir.get_global @goodG2B : !cir.ptr<!cir.func<()>> loc(#loc172)
    cir.call %1() : (!cir.ptr<!cir.func<()>>) -> () loc(#loc56)
    cir.return loc(#loc53)
  } loc(#loc170)
  cir.func no_proto internal private @goodB2G() extra(#fn_attr) {
    %0 = cir.alloca !u32i, !cir.ptr<!u32i>, ["data"] {alignment = 4 : i64} loc(#loc174)
    %1 = cir.const #cir.int<0> : !s32i loc(#loc62)
    %2 = cir.cast(integral, %1 : !s32i), !u32i loc(#loc62)
    cir.store %2, %0 : !u32i, !cir.ptr<!u32i> loc(#loc175)
    cir.scope {
      %3 = cir.get_global @globalReturnsTrueOrFalse : !cir.ptr<!cir.func<(...) -> !s32i>> loc(#loc177)
      %4 = cir.cast(bitcast, %3 : !cir.ptr<!cir.func<(...) -> !s32i>>), !cir.ptr<!cir.func<() -> !s32i>> loc(#loc177)
      %5 = cir.call %4() : (!cir.ptr<!cir.func<() -> !s32i>>) -> !s32i loc(#loc66)
      %6 = cir.cast(int_to_bool, %5 : !s32i), !cir.bool loc(#loc66)
      cir.if %6 {
        %7 = cir.const #cir.int<2147483647> : !s32i loc(#loc71)
        %8 = cir.cast(integral, %7 : !s32i), !u32i loc(#loc71)
        %9 = cir.const #cir.int<2> : !u32i loc(#loc71)
        %10 = cir.binop(mul, %8, %9) : !u32i loc(#loc71)
        %11 = cir.const #cir.int<1> : !u32i loc(#loc71)
        %12 = cir.binop(add, %10, %11) : !u32i loc(#loc71)
        cir.store %12, %0 : !u32i, !cir.ptr<!u32i> loc(#loc179)
      } else {
        %7 = cir.const #cir.int<2147483647> : !s32i loc(#loc73)
        %8 = cir.cast(integral, %7 : !s32i), !u32i loc(#loc73)
        %9 = cir.const #cir.int<2> : !u32i loc(#loc73)
        %10 = cir.binop(mul, %8, %9) : !u32i loc(#loc73)
        %11 = cir.const #cir.int<1> : !u32i loc(#loc73)
        %12 = cir.binop(add, %10, %11) : !u32i loc(#loc73)
        cir.store %12, %0 : !u32i, !cir.ptr<!u32i> loc(#loc180)
      } loc(#loc178)
    } loc(#loc176)
    cir.scope {
      %3 = cir.get_global @globalReturnsTrueOrFalse : !cir.ptr<!cir.func<(...) -> !s32i>> loc(#loc182)
      %4 = cir.cast(bitcast, %3 : !cir.ptr<!cir.func<(...) -> !s32i>>), !cir.ptr<!cir.func<() -> !s32i>> loc(#loc182)
      %5 = cir.call %4() : (!cir.ptr<!cir.func<() -> !s32i>>) -> !s32i loc(#loc77)
      %6 = cir.cast(int_to_bool, %5 : !s32i), !cir.bool loc(#loc77)
      cir.if %6 {
        cir.scope {
          %7 = cir.load %0 : !cir.ptr<!u32i>, !u32i loc(#loc84)
          %8 = cir.const #cir.int<2147483647> : !s32i loc(#loc85)
          %9 = cir.cast(integral, %8 : !s32i), !u32i loc(#loc85)
          %10 = cir.const #cir.int<2> : !u32i loc(#loc85)
          %11 = cir.binop(mul, %9, %10) : !u32i loc(#loc85)
          %12 = cir.const #cir.int<1> : !u32i loc(#loc85)
          %13 = cir.binop(add, %11, %12) : !u32i loc(#loc85)
          %14 = cir.cmp(lt, %7, %13) : !u32i, !cir.bool loc(#loc185)
          cir.if %14 {
            %15 = cir.alloca !u32i, !cir.ptr<!u32i>, ["result", init] {alignment = 4 : i64} loc(#loc187)
            %16 = cir.load %0 : !cir.ptr<!u32i>, !u32i loc(#loc91)
            %17 = cir.const #cir.int<1> : !s32i loc(#loc90)
            %18 = cir.cast(integral, %17 : !s32i), !u32i loc(#loc90)
            %19 = cir.binop(add, %16, %18) : !u32i loc(#loc188)
            cir.store %19, %15 : !u32i, !cir.ptr<!u32i> loc(#loc187)
            %20 = cir.load %15 : !cir.ptr<!u32i>, !u32i loc(#loc92)
            cir.call @printUnsignedLine(%20) : (!u32i) -> () loc(#loc93)
          } else {
            %15 = cir.get_global @".str" : !cir.ptr<!cir.array<!s8i x 54>> loc(#loc94)
            %16 = cir.cast(array_to_ptrdecay, %15 : !cir.ptr<!cir.array<!s8i x 54>>), !cir.ptr<!s8i> loc(#loc94)
            cir.call @printLine(%16) : (!cir.ptr<!s8i>) -> () loc(#loc95)
          } loc(#loc186)
        } loc(#loc184)
      } else {
        cir.scope {
          %7 = cir.load %0 : !cir.ptr<!u32i>, !u32i loc(#loc98)
          %8 = cir.const #cir.int<2147483647> : !s32i loc(#loc99)
          %9 = cir.cast(integral, %8 : !s32i), !u32i loc(#loc99)
          %10 = cir.const #cir.int<2> : !u32i loc(#loc99)
          %11 = cir.binop(mul, %9, %10) : !u32i loc(#loc99)
          %12 = cir.const #cir.int<1> : !u32i loc(#loc99)
          %13 = cir.binop(add, %11, %12) : !u32i loc(#loc99)
          %14 = cir.cmp(lt, %7, %13) : !u32i, !cir.bool loc(#loc190)
          cir.if %14 {
            %15 = cir.alloca !u32i, !cir.ptr<!u32i>, ["result", init] {alignment = 4 : i64} loc(#loc192)
            %16 = cir.load %0 : !cir.ptr<!u32i>, !u32i loc(#loc105)
            %17 = cir.const #cir.int<1> : !s32i loc(#loc104)
            %18 = cir.cast(integral, %17 : !s32i), !u32i loc(#loc104)
            %19 = cir.binop(add, %16, %18) : !u32i loc(#loc193)
            cir.store %19, %15 : !u32i, !cir.ptr<!u32i> loc(#loc192)
            %20 = cir.load %15 : !cir.ptr<!u32i>, !u32i loc(#loc106)
            cir.call @printUnsignedLine(%20) : (!u32i) -> () loc(#loc107)
          } else {
            %15 = cir.get_global @".str" : !cir.ptr<!cir.array<!s8i x 54>> loc(#loc108)
            %16 = cir.cast(array_to_ptrdecay, %15 : !cir.ptr<!cir.array<!s8i x 54>>), !cir.ptr<!s8i> loc(#loc108)
            cir.call @printLine(%16) : (!cir.ptr<!s8i>) -> () loc(#loc109)
          } loc(#loc191)
        } loc(#loc189)
      } loc(#loc183)
    } loc(#loc181)
    cir.return loc(#loc59)
  } loc(#loc173)
  cir.func no_proto internal private @goodG2B() extra(#fn_attr) {
    %0 = cir.alloca !u32i, !cir.ptr<!u32i>, ["data"] {alignment = 4 : i64} loc(#loc195)
    %1 = cir.const #cir.int<0> : !s32i loc(#loc114)
    %2 = cir.cast(integral, %1 : !s32i), !u32i loc(#loc114)
    cir.store %2, %0 : !u32i, !cir.ptr<!u32i> loc(#loc196)
    cir.scope {
      %3 = cir.get_global @globalReturnsTrueOrFalse : !cir.ptr<!cir.func<(...) -> !s32i>> loc(#loc198)
      %4 = cir.cast(bitcast, %3 : !cir.ptr<!cir.func<(...) -> !s32i>>), !cir.ptr<!cir.func<() -> !s32i>> loc(#loc198)
      %5 = cir.call %4() : (!cir.ptr<!cir.func<() -> !s32i>>) -> !s32i loc(#loc118)
      %6 = cir.cast(int_to_bool, %5 : !s32i), !cir.bool loc(#loc118)
      cir.if %6 {
        %7 = cir.const #cir.int<2> : !s32i loc(#loc123)
        %8 = cir.cast(integral, %7 : !s32i), !u32i loc(#loc123)
        cir.store %8, %0 : !u32i, !cir.ptr<!u32i> loc(#loc200)
      } else {
        %7 = cir.const #cir.int<2> : !s32i loc(#loc125)
        %8 = cir.cast(integral, %7 : !s32i), !u32i loc(#loc125)
        cir.store %8, %0 : !u32i, !cir.ptr<!u32i> loc(#loc201)
      } loc(#loc199)
    } loc(#loc197)
    cir.scope {
      %3 = cir.get_global @globalReturnsTrueOrFalse : !cir.ptr<!cir.func<(...) -> !s32i>> loc(#loc203)
      %4 = cir.cast(bitcast, %3 : !cir.ptr<!cir.func<(...) -> !s32i>>), !cir.ptr<!cir.func<() -> !s32i>> loc(#loc203)
      %5 = cir.call %4() : (!cir.ptr<!cir.func<() -> !s32i>>) -> !s32i loc(#loc129)
      %6 = cir.cast(int_to_bool, %5 : !s32i), !cir.bool loc(#loc129)
      cir.if %6 {
        cir.scope {
          %7 = cir.alloca !u32i, !cir.ptr<!u32i>, ["result", init] {alignment = 4 : i64} loc(#loc206)
          %8 = cir.load %0 : !cir.ptr<!u32i>, !u32i loc(#loc138)
          %9 = cir.const #cir.int<1> : !s32i loc(#loc137)
          %10 = cir.cast(integral, %9 : !s32i), !u32i loc(#loc137)
          %11 = cir.binop(add, %8, %10) : !u32i loc(#loc207)
          cir.store %11, %7 : !u32i, !cir.ptr<!u32i> loc(#loc206)
          %12 = cir.load %7 : !cir.ptr<!u32i>, !u32i loc(#loc139)
          cir.call @printUnsignedLine(%12) : (!u32i) -> () loc(#loc140)
        } loc(#loc205)
      } else {
        cir.scope {
          %7 = cir.alloca !u32i, !cir.ptr<!u32i>, ["result", init] {alignment = 4 : i64} loc(#loc209)
          %8 = cir.load %0 : !cir.ptr<!u32i>, !u32i loc(#loc145)
          %9 = cir.const #cir.int<1> : !s32i loc(#loc144)
          %10 = cir.cast(integral, %9 : !s32i), !u32i loc(#loc144)
          %11 = cir.binop(add, %8, %10) : !u32i loc(#loc210)
          cir.store %11, %7 : !u32i, !cir.ptr<!u32i> loc(#loc209)
          %12 = cir.load %7 : !cir.ptr<!u32i>, !u32i loc(#loc146)
          cir.call @printUnsignedLine(%12) : (!u32i) -> () loc(#loc147)
        } loc(#loc208)
      } loc(#loc204)
    } loc(#loc202)
    cir.return loc(#loc111)
  } loc(#loc194)
} loc(#loc)
#loc = loc("/workspaces/juliet-c/testcases/CWE190_Integer_Overflow/s05/CWE190_Integer_Overflow__unsigned_int_max_add_12.c":0:0)
#loc1 = loc("../../../testcasesupport/std_testcase_io.h":52:1)
#loc2 = loc("../../../testcasesupport/std_testcase_io.h":52:30)
#loc3 = loc("../../../testcasesupport/std_testcase_io.h":34:1)
#loc4 = loc("../../../testcasesupport/std_testcase_io.h":34:47)
#loc5 = loc("../../../testcasesupport/std_testcase_io.h":14:1)
#loc6 = loc("../../../testcasesupport/std_testcase_io.h":14:33)
#loc7 = loc("CWE190_Integer_Overflow__unsigned_int_max_add_12.c":54:23)
#loc8 = loc("CWE190_Integer_Overflow__unsigned_int_max_add_12.c":22:1)
#loc9 = loc("CWE190_Integer_Overflow__unsigned_int_max_add_12.c":57:1)
#loc10 = loc("CWE190_Integer_Overflow__unsigned_int_max_add_12.c":24:5)
#loc11 = loc("CWE190_Integer_Overflow__unsigned_int_max_add_12.c":24:18)
#loc12 = loc("CWE190_Integer_Overflow__unsigned_int_max_add_12.c":25:12)
#loc13 = loc("CWE190_Integer_Overflow__unsigned_int_max_add_12.c":25:5)
#loc14 = loc("CWE190_Integer_Overflow__unsigned_int_max_add_12.c":26:5)
#loc15 = loc("CWE190_Integer_Overflow__unsigned_int_max_add_12.c":35:5)
#loc16 = loc("CWE190_Integer_Overflow__unsigned_int_max_add_12.c":26:8)
#loc17 = loc("CWE190_Integer_Overflow__unsigned_int_max_add_12.c":26:33)
#loc18 = loc("CWE190_Integer_Overflow__unsigned_int_max_add_12.c":27:5)
#loc19 = loc("CWE190_Integer_Overflow__unsigned_int_max_add_12.c":30:5)
#loc20 = loc("CWE190_Integer_Overflow__unsigned_int_max_add_12.c":32:5)
#loc21 = loc("CWE190_Integer_Overflow__unsigned_int_max_add_12.c":29:16)
#loc22 = loc("CWE190_Integer_Overflow__unsigned_int_max_add_12.c":29:9)
#loc23 = loc("CWE190_Integer_Overflow__unsigned_int_max_add_12.c":34:16)
#loc24 = loc("CWE190_Integer_Overflow__unsigned_int_max_add_12.c":34:9)
#loc25 = loc("CWE190_Integer_Overflow__unsigned_int_max_add_12.c":36:5)
#loc26 = loc("CWE190_Integer_Overflow__unsigned_int_max_add_12.c":56:5)
#loc27 = loc("CWE190_Integer_Overflow__unsigned_int_max_add_12.c":36:8)
#loc28 = loc("CWE190_Integer_Overflow__unsigned_int_max_add_12.c":36:33)
#loc29 = loc("CWE190_Integer_Overflow__unsigned_int_max_add_12.c":37:5)
#loc30 = loc("CWE190_Integer_Overflow__unsigned_int_max_add_12.c":43:5)
#loc31 = loc("CWE190_Integer_Overflow__unsigned_int_max_add_12.c":45:5)
#loc32 = loc("CWE190_Integer_Overflow__unsigned_int_max_add_12.c":38:9)
#loc33 = loc("CWE190_Integer_Overflow__unsigned_int_max_add_12.c":42:9)
#loc34 = loc("CWE190_Integer_Overflow__unsigned_int_max_add_12.c":40:13)
#loc35 = loc("CWE190_Integer_Overflow__unsigned_int_max_add_12.c":40:42)
#loc36 = loc("CWE190_Integer_Overflow__unsigned_int_max_add_12.c":40:35)
#loc37 = loc("CWE190_Integer_Overflow__unsigned_int_max_add_12.c":41:31)
#loc38 = loc("CWE190_Integer_Overflow__unsigned_int_max_add_12.c":41:13)
#loc39 = loc("CWE190_Integer_Overflow__unsigned_int_max_add_12.c":47:9)
#loc40 = loc("CWE190_Integer_Overflow__unsigned_int_max_add_12.c":55:9)
#loc41 = loc("CWE190_Integer_Overflow__unsigned_int_max_add_12.c":47:13)
#loc42 = loc("CWE190_Integer_Overflow__unsigned_int_max_add_12.c":47:20)
#loc43 = loc("CWE190_Integer_Overflow__unsigned_int_max_add_12.c":48:9)
#loc44 = loc("CWE190_Integer_Overflow__unsigned_int_max_add_12.c":51:9)
#loc45 = loc("CWE190_Integer_Overflow__unsigned_int_max_add_12.c":53:9)
#loc46 = loc("CWE190_Integer_Overflow__unsigned_int_max_add_12.c":49:13)
#loc47 = loc("CWE190_Integer_Overflow__unsigned_int_max_add_12.c":49:42)
#loc48 = loc("CWE190_Integer_Overflow__unsigned_int_max_add_12.c":49:35)
#loc49 = loc("CWE190_Integer_Overflow__unsigned_int_max_add_12.c":50:31)
#loc50 = loc("CWE190_Integer_Overflow__unsigned_int_max_add_12.c":50:13)
#loc51 = loc("CWE190_Integer_Overflow__unsigned_int_max_add_12.c":54:13)
#loc52 = loc("CWE190_Integer_Overflow__unsigned_int_max_add_12.c":143:1)
#loc53 = loc("CWE190_Integer_Overflow__unsigned_int_max_add_12.c":147:1)
#loc54 = loc("CWE190_Integer_Overflow__unsigned_int_max_add_12.c":145:5)
#loc55 = loc("CWE190_Integer_Overflow__unsigned_int_max_add_12.c":145:13)
#loc56 = loc("CWE190_Integer_Overflow__unsigned_int_max_add_12.c":146:5)
#loc57 = loc("CWE190_Integer_Overflow__unsigned_int_max_add_12.c":146:13)
#loc58 = loc("CWE190_Integer_Overflow__unsigned_int_max_add_12.c":66:1)
#loc59 = loc("CWE190_Integer_Overflow__unsigned_int_max_add_12.c":106:1)
#loc60 = loc("CWE190_Integer_Overflow__unsigned_int_max_add_12.c":68:5)
#loc61 = loc("CWE190_Integer_Overflow__unsigned_int_max_add_12.c":68:18)
#loc62 = loc("CWE190_Integer_Overflow__unsigned_int_max_add_12.c":69:12)
#loc63 = loc("CWE190_Integer_Overflow__unsigned_int_max_add_12.c":69:5)
#loc64 = loc("CWE190_Integer_Overflow__unsigned_int_max_add_12.c":70:5)
#loc65 = loc("CWE190_Integer_Overflow__unsigned_int_max_add_12.c":79:5)
#loc66 = loc("CWE190_Integer_Overflow__unsigned_int_max_add_12.c":70:8)
#loc67 = loc("CWE190_Integer_Overflow__unsigned_int_max_add_12.c":70:33)
#loc68 = loc("CWE190_Integer_Overflow__unsigned_int_max_add_12.c":71:5)
#loc69 = loc("CWE190_Integer_Overflow__unsigned_int_max_add_12.c":74:5)
#loc70 = loc("CWE190_Integer_Overflow__unsigned_int_max_add_12.c":76:5)
#loc71 = loc("CWE190_Integer_Overflow__unsigned_int_max_add_12.c":73:16)
#loc72 = loc("CWE190_Integer_Overflow__unsigned_int_max_add_12.c":73:9)
#loc73 = loc("CWE190_Integer_Overflow__unsigned_int_max_add_12.c":78:16)
#loc74 = loc("CWE190_Integer_Overflow__unsigned_int_max_add_12.c":78:9)
#loc75 = loc("CWE190_Integer_Overflow__unsigned_int_max_add_12.c":80:5)
#loc76 = loc("CWE190_Integer_Overflow__unsigned_int_max_add_12.c":105:5)
#loc77 = loc("CWE190_Integer_Overflow__unsigned_int_max_add_12.c":80:8)
#loc78 = loc("CWE190_Integer_Overflow__unsigned_int_max_add_12.c":80:33)
#loc79 = loc("CWE190_Integer_Overflow__unsigned_int_max_add_12.c":81:5)
#loc80 = loc("CWE190_Integer_Overflow__unsigned_int_max_add_12.c":92:5)
#loc81 = loc("CWE190_Integer_Overflow__unsigned_int_max_add_12.c":94:5)
#loc82 = loc("CWE190_Integer_Overflow__unsigned_int_max_add_12.c":83:9)
#loc83 = loc("CWE190_Integer_Overflow__unsigned_int_max_add_12.c":91:9)
#loc84 = loc("CWE190_Integer_Overflow__unsigned_int_max_add_12.c":83:13)
#loc85 = loc("CWE190_Integer_Overflow__unsigned_int_max_add_12.c":83:20)
#loc86 = loc("CWE190_Integer_Overflow__unsigned_int_max_add_12.c":84:9)
#loc87 = loc("CWE190_Integer_Overflow__unsigned_int_max_add_12.c":87:9)
#loc88 = loc("CWE190_Integer_Overflow__unsigned_int_max_add_12.c":89:9)
#loc89 = loc("CWE190_Integer_Overflow__unsigned_int_max_add_12.c":85:13)
#loc90 = loc("CWE190_Integer_Overflow__unsigned_int_max_add_12.c":85:42)
#loc91 = loc("CWE190_Integer_Overflow__unsigned_int_max_add_12.c":85:35)
#loc92 = loc("CWE190_Integer_Overflow__unsigned_int_max_add_12.c":86:31)
#loc93 = loc("CWE190_Integer_Overflow__unsigned_int_max_add_12.c":86:13)
#loc94 = loc("CWE190_Integer_Overflow__unsigned_int_max_add_12.c":90:23)
#loc95 = loc("CWE190_Integer_Overflow__unsigned_int_max_add_12.c":90:13)
#loc96 = loc("CWE190_Integer_Overflow__unsigned_int_max_add_12.c":96:9)
#loc97 = loc("CWE190_Integer_Overflow__unsigned_int_max_add_12.c":104:9)
#loc98 = loc("CWE190_Integer_Overflow__unsigned_int_max_add_12.c":96:13)
#loc99 = loc("CWE190_Integer_Overflow__unsigned_int_max_add_12.c":96:20)
#loc100 = loc("CWE190_Integer_Overflow__unsigned_int_max_add_12.c":97:9)
#loc101 = loc("CWE190_Integer_Overflow__unsigned_int_max_add_12.c":100:9)
#loc102 = loc("CWE190_Integer_Overflow__unsigned_int_max_add_12.c":102:9)
#loc103 = loc("CWE190_Integer_Overflow__unsigned_int_max_add_12.c":98:13)
#loc104 = loc("CWE190_Integer_Overflow__unsigned_int_max_add_12.c":98:42)
#loc105 = loc("CWE190_Integer_Overflow__unsigned_int_max_add_12.c":98:35)
#loc106 = loc("CWE190_Integer_Overflow__unsigned_int_max_add_12.c":99:31)
#loc107 = loc("CWE190_Integer_Overflow__unsigned_int_max_add_12.c":99:13)
#loc108 = loc("CWE190_Integer_Overflow__unsigned_int_max_add_12.c":103:23)
#loc109 = loc("CWE190_Integer_Overflow__unsigned_int_max_add_12.c":103:13)
#loc110 = loc("CWE190_Integer_Overflow__unsigned_int_max_add_12.c":111:1)
#loc111 = loc("CWE190_Integer_Overflow__unsigned_int_max_add_12.c":141:1)
#loc112 = loc("CWE190_Integer_Overflow__unsigned_int_max_add_12.c":113:5)
#loc113 = loc("CWE190_Integer_Overflow__unsigned_int_max_add_12.c":113:18)
#loc114 = loc("CWE190_Integer_Overflow__unsigned_int_max_add_12.c":114:12)
#loc115 = loc("CWE190_Integer_Overflow__unsigned_int_max_add_12.c":114:5)
#loc116 = loc("CWE190_Integer_Overflow__unsigned_int_max_add_12.c":115:5)
#loc117 = loc("CWE190_Integer_Overflow__unsigned_int_max_add_12.c":124:5)
#loc118 = loc("CWE190_Integer_Overflow__unsigned_int_max_add_12.c":115:8)
#loc119 = loc("CWE190_Integer_Overflow__unsigned_int_max_add_12.c":115:33)
#loc120 = loc("CWE190_Integer_Overflow__unsigned_int_max_add_12.c":116:5)
#loc121 = loc("CWE190_Integer_Overflow__unsigned_int_max_add_12.c":119:5)
#loc122 = loc("CWE190_Integer_Overflow__unsigned_int_max_add_12.c":121:5)
#loc123 = loc("CWE190_Integer_Overflow__unsigned_int_max_add_12.c":118:16)
#loc124 = loc("CWE190_Integer_Overflow__unsigned_int_max_add_12.c":118:9)
#loc125 = loc("CWE190_Integer_Overflow__unsigned_int_max_add_12.c":123:16)
#loc126 = loc("CWE190_Integer_Overflow__unsigned_int_max_add_12.c":123:9)
#loc127 = loc("CWE190_Integer_Overflow__unsigned_int_max_add_12.c":125:5)
#loc128 = loc("CWE190_Integer_Overflow__unsigned_int_max_add_12.c":140:5)
#loc129 = loc("CWE190_Integer_Overflow__unsigned_int_max_add_12.c":125:8)
#loc130 = loc("CWE190_Integer_Overflow__unsigned_int_max_add_12.c":125:33)
#loc131 = loc("CWE190_Integer_Overflow__unsigned_int_max_add_12.c":126:5)
#loc132 = loc("CWE190_Integer_Overflow__unsigned_int_max_add_12.c":132:5)
#loc133 = loc("CWE190_Integer_Overflow__unsigned_int_max_add_12.c":134:5)
#loc134 = loc("CWE190_Integer_Overflow__unsigned_int_max_add_12.c":127:9)
#loc135 = loc("CWE190_Integer_Overflow__unsigned_int_max_add_12.c":131:9)
#loc136 = loc("CWE190_Integer_Overflow__unsigned_int_max_add_12.c":129:13)
#loc137 = loc("CWE190_Integer_Overflow__unsigned_int_max_add_12.c":129:42)
#loc138 = loc("CWE190_Integer_Overflow__unsigned_int_max_add_12.c":129:35)
#loc139 = loc("CWE190_Integer_Overflow__unsigned_int_max_add_12.c":130:31)
#loc140 = loc("CWE190_Integer_Overflow__unsigned_int_max_add_12.c":130:13)
#loc141 = loc("CWE190_Integer_Overflow__unsigned_int_max_add_12.c":135:9)
#loc142 = loc("CWE190_Integer_Overflow__unsigned_int_max_add_12.c":139:9)
#loc143 = loc("CWE190_Integer_Overflow__unsigned_int_max_add_12.c":137:13)
#loc144 = loc("CWE190_Integer_Overflow__unsigned_int_max_add_12.c":137:42)
#loc145 = loc("CWE190_Integer_Overflow__unsigned_int_max_add_12.c":137:35)
#loc146 = loc("CWE190_Integer_Overflow__unsigned_int_max_add_12.c":138:31)
#loc147 = loc("CWE190_Integer_Overflow__unsigned_int_max_add_12.c":138:13)
#loc148 = loc(fused[#loc1, #loc2])
#loc149 = loc(fused[#loc3, #loc4])
#loc150 = loc(fused[#loc5, #loc6])
#loc151 = loc(fused[#loc8, #loc9])
#loc152 = loc(fused[#loc10, #loc11])
#loc153 = loc(fused[#loc13, #loc12])
#loc154 = loc(fused[#loc14, #loc15])
#loc155 = loc(fused[#loc16, #loc17])
#loc156 = loc(fused[#loc18, #loc19, #loc20, #loc15])
#loc157 = loc(fused[#loc22, #loc21])
#loc158 = loc(fused[#loc24, #loc23])
#loc159 = loc(fused[#loc25, #loc26])
#loc160 = loc(fused[#loc27, #loc28])
#loc161 = loc(fused[#loc29, #loc30, #loc31, #loc26])
#loc162 = loc(fused[#loc32, #loc33])
#loc163 = loc(fused[#loc34, #loc35])
#loc164 = loc(fused[#loc36, #loc35])
#loc165 = loc(fused[#loc39, #loc40])
#loc166 = loc(fused[#loc41, #loc42])
#loc167 = loc(fused[#loc43, #loc44, #loc45, #loc40])
#loc168 = loc(fused[#loc46, #loc47])
#loc169 = loc(fused[#loc48, #loc47])
#loc170 = loc(fused[#loc52, #loc53])
#loc171 = loc(fused[#loc54, #loc55])
#loc172 = loc(fused[#loc56, #loc57])
#loc173 = loc(fused[#loc58, #loc59])
#loc174 = loc(fused[#loc60, #loc61])
#loc175 = loc(fused[#loc63, #loc62])
#loc176 = loc(fused[#loc64, #loc65])
#loc177 = loc(fused[#loc66, #loc67])
#loc178 = loc(fused[#loc68, #loc69, #loc70, #loc65])
#loc179 = loc(fused[#loc72, #loc71])
#loc180 = loc(fused[#loc74, #loc73])
#loc181 = loc(fused[#loc75, #loc76])
#loc182 = loc(fused[#loc77, #loc78])
#loc183 = loc(fused[#loc79, #loc80, #loc81, #loc76])
#loc184 = loc(fused[#loc82, #loc83])
#loc185 = loc(fused[#loc84, #loc85])
#loc186 = loc(fused[#loc86, #loc87, #loc88, #loc83])
#loc187 = loc(fused[#loc89, #loc90])
#loc188 = loc(fused[#loc91, #loc90])
#loc189 = loc(fused[#loc96, #loc97])
#loc190 = loc(fused[#loc98, #loc99])
#loc191 = loc(fused[#loc100, #loc101, #loc102, #loc97])
#loc192 = loc(fused[#loc103, #loc104])
#loc193 = loc(fused[#loc105, #loc104])
#loc194 = loc(fused[#loc110, #loc111])
#loc195 = loc(fused[#loc112, #loc113])
#loc196 = loc(fused[#loc115, #loc114])
#loc197 = loc(fused[#loc116, #loc117])
#loc198 = loc(fused[#loc118, #loc119])
#loc199 = loc(fused[#loc120, #loc121, #loc122, #loc117])
#loc200 = loc(fused[#loc124, #loc123])
#loc201 = loc(fused[#loc126, #loc125])
#loc202 = loc(fused[#loc127, #loc128])
#loc203 = loc(fused[#loc129, #loc130])
#loc204 = loc(fused[#loc131, #loc132, #loc133, #loc128])
#loc205 = loc(fused[#loc134, #loc135])
#loc206 = loc(fused[#loc136, #loc137])
#loc207 = loc(fused[#loc138, #loc137])
#loc208 = loc(fused[#loc141, #loc142])
#loc209 = loc(fused[#loc143, #loc144])
#loc210 = loc(fused[#loc145, #loc144])
