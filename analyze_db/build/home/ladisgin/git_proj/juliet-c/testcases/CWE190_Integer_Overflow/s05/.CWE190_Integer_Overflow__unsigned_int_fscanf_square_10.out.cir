!s32i = !cir.int<s, 32>
!s64i = !cir.int<s, 64>
!s8i = !cir.int<s, 8>
!ty__IO_codecvt = !cir.struct<struct "_IO_codecvt" incomplete>
!ty__IO_marker = !cir.struct<struct "_IO_marker" incomplete>
!ty__IO_wide_data = !cir.struct<struct "_IO_wide_data" incomplete>
!u16i = !cir.int<u, 16>
!u32i = !cir.int<u, 32>
!void = !cir.void
#fn_attr = #cir<extra({inline = #cir.inline<no>, nothrow = #cir.nothrow, optnone = #cir.optnone})>
#fn_attr1 = #cir<extra({nothrow = #cir.nothrow})>
#loc55 = loc("CWE190_Integer_Overflow__unsigned_int_fscanf_square_10.c":164:10)
#loc56 = loc("CWE190_Integer_Overflow__unsigned_int_fscanf_square_10.c":164:14)
#loc57 = loc("CWE190_Integer_Overflow__unsigned_int_fscanf_square_10.c":164:20)
#loc58 = loc("CWE190_Integer_Overflow__unsigned_int_fscanf_square_10.c":164:32)
#loc221 = loc(fused[#loc55, #loc56])
#loc222 = loc(fused[#loc57, #loc58])
!ty__IO_FILE = !cir.struct<struct "_IO_FILE" {!s32i, !cir.ptr<!s8i>, !cir.ptr<!s8i>, !cir.ptr<!s8i>, !cir.ptr<!s8i>, !cir.ptr<!s8i>, !cir.ptr<!s8i>, !cir.ptr<!s8i>, !cir.ptr<!s8i>, !cir.ptr<!s8i>, !cir.ptr<!s8i>, !cir.ptr<!s8i>, !cir.ptr<!ty__IO_marker>, !cir.ptr<!cir.struct<struct "_IO_FILE">>, !s32i, !s32i, !s64i, !u16i, !s8i, !cir.array<!s8i x 1>, !cir.ptr<!void>, !s64i, !cir.ptr<!ty__IO_codecvt>, !cir.ptr<!ty__IO_wide_data>, !cir.ptr<!cir.struct<struct "_IO_FILE">>, !cir.ptr<!void>, !cir.ptr<!cir.ptr<!cir.struct<struct "_IO_FILE">>>, !s32i, !cir.array<!s8i x 20>} #cir.record.decl.ast>
module @"/home/ladisgin/git_proj/juliet-c/testcases/CWE190_Integer_Overflow/s05/CWE190_Integer_Overflow__unsigned_int_fscanf_square_10.c" attributes {cir.lang = #cir.lang<c>, cir.sob = #cir.signed_overflow_behavior<undefined>, cir.triple = "x86_64-unknown-linux-gnu", dlti.dl_spec = #dlti.dl_spec<i32 = dense<32> : vector<2xi64>, f128 = dense<128> : vector<2xi64>, !llvm.ptr<270> = dense<32> : vector<4xi64>, f64 = dense<64> : vector<2xi64>, f16 = dense<16> : vector<2xi64>, i1 = dense<8> : vector<2xi64>, !llvm.ptr = dense<64> : vector<4xi64>, i16 = dense<16> : vector<2xi64>, i8 = dense<8> : vector<2xi64>, i128 = dense<128> : vector<2xi64>, f80 = dense<128> : vector<2xi64>, !llvm.ptr<272> = dense<64> : vector<4xi64>, !llvm.ptr<271> = dense<32> : vector<4xi64>, i64 = dense<64> : vector<2xi64>, "dlti.endianness" = "little", "dlti.stack_alignment" = 128 : i64>} {
  cir.global "private" external @globalTrue : !s32i {alignment = 4 : i64} loc(#loc198)
  cir.func private @__isoc99_fscanf(!cir.ptr<!ty__IO_FILE>, !cir.ptr<!s8i>, ...) -> !s32i loc(#loc199)
  cir.global "private" external @stdin : !cir.ptr<!ty__IO_FILE> {alignment = 8 : i64} loc(#loc200)
  cir.global "private" constant cir_private dsolocal @".str" = #cir.const_array<"%u\00" : !cir.array<!s8i x 3>> : !cir.array<!s8i x 3> {alignment = 1 : i64} loc(#loc7)
  cir.func private @printUnsignedLine(!u32i) loc(#loc201)
  cir.func no_proto @CWE190_Integer_Overflow__unsigned_int_fscanf_square_10_bad() extra(#fn_attr) {
    %0 = cir.alloca !u32i, !cir.ptr<!u32i>, ["result", init] {alignment = 4 : i64} loc(#loc203)
    %1 = cir.alloca !u32i, !cir.ptr<!u32i>, ["data"] {alignment = 4 : i64} loc(#loc204)
    %2 = cir.const #cir.int<0> : !s32i loc(#loc16)
    %3 = cir.cast(integral, %2 : !s32i), !u32i loc(#loc16)
    cir.store %3, %1 : !u32i, !cir.ptr<!u32i> loc(#loc205)
    cir.br ^bb1 loc(#loc206)
  ^bb1:  // pred: ^bb0
    %4 = cir.get_global @globalTrue : !cir.ptr<!s32i> loc(#loc198)
    %5 = cir.load %4 : !cir.ptr<!s32i>, !s32i loc(#loc20)
    %6 = cir.cast(int_to_bool, %5 : !s32i), !cir.bool loc(#loc20)
    cir.brcond %6 ^bb2, ^bb3 loc(#loc207)
  ^bb2:  // pred: ^bb1
    %7 = cir.get_global @__isoc99_fscanf : !cir.ptr<!cir.func<!s32i (!cir.ptr<!ty__IO_FILE>, !cir.ptr<!s8i>, ...)>> loc(#loc22)
    %8 = cir.get_global @stdin : !cir.ptr<!cir.ptr<!ty__IO_FILE>> loc(#loc200)
    %9 = cir.load %8 : !cir.ptr<!cir.ptr<!ty__IO_FILE>>, !cir.ptr<!ty__IO_FILE> loc(#loc23)
    %10 = cir.get_global @".str" : !cir.ptr<!cir.array<!s8i x 3>> loc(#loc7)
    %11 = cir.cast(array_to_ptrdecay, %10 : !cir.ptr<!cir.array<!s8i x 3>>), !cir.ptr<!s8i> loc(#loc7)
    %12 = cir.call @__isoc99_fscanf(%9, %11, %1) : (!cir.ptr<!ty__IO_FILE>, !cir.ptr<!s8i>, !cir.ptr<!u32i>) -> !s32i loc(#loc22)
    cir.br ^bb3 loc(#loc19)
  ^bb3:  // 2 preds: ^bb1, ^bb2
    cir.br ^bb4 loc(#loc19)
  ^bb4:  // pred: ^bb3
    cir.br ^bb5 loc(#loc208)
  ^bb5:  // pred: ^bb4
    %13 = cir.get_global @globalTrue : !cir.ptr<!s32i> loc(#loc198)
    %14 = cir.load %13 : !cir.ptr<!s32i>, !s32i loc(#loc26)
    %15 = cir.cast(int_to_bool, %14 : !s32i), !cir.bool loc(#loc26)
    cir.brcond %15 ^bb6, ^bb9 loc(#loc209)
  ^bb6:  // pred: ^bb5
    cir.br ^bb7 loc(#loc210)
  ^bb7:  // pred: ^bb6
    %16 = cir.load %1 : !cir.ptr<!u32i>, !u32i loc(#loc30)
    %17 = cir.load %1 : !cir.ptr<!u32i>, !u32i loc(#loc13)
    %18 = cir.binop(mul, %16, %17) : !u32i loc(#loc211)
    cir.store %18, %0 : !u32i, !cir.ptr<!u32i> loc(#loc203)
    %19 = cir.load %0 : !cir.ptr<!u32i>, !u32i loc(#loc31)
    cir.call @printUnsignedLine(%19) : (!u32i) -> () loc(#loc32)
    cir.br ^bb8 loc(#loc29)
  ^bb8:  // pred: ^bb7
    cir.br ^bb9 loc(#loc25)
  ^bb9:  // 2 preds: ^bb5, ^bb8
    cir.br ^bb10 loc(#loc25)
  ^bb10:  // pred: ^bb9
    cir.return loc(#loc11)
  } loc(#loc202)
  cir.func no_proto @CWE190_Integer_Overflow__unsigned_int_fscanf_square_10_good() extra(#fn_attr) {
    %0 = cir.get_global @goodB2G1 : !cir.ptr<!cir.func<!void ()>> loc(#loc213)
    cir.call %0() : (!cir.ptr<!cir.func<!void ()>>) -> () loc(#loc35)
    %1 = cir.get_global @goodB2G2 : !cir.ptr<!cir.func<!void ()>> loc(#loc214)
    cir.call %1() : (!cir.ptr<!cir.func<!void ()>>) -> () loc(#loc37)
    %2 = cir.get_global @goodG2B1 : !cir.ptr<!cir.func<!void ()>> loc(#loc215)
    cir.call %2() : (!cir.ptr<!cir.func<!void ()>>) -> () loc(#loc39)
    %3 = cir.get_global @goodG2B2 : !cir.ptr<!cir.func<!void ()>> loc(#loc216)
    cir.call %3() : (!cir.ptr<!cir.func<!void ()>>) -> () loc(#loc41)
    cir.return loc(#loc34)
  } loc(#loc212)
  cir.func private @srand(!u32i) extra(#fn_attr1) loc(#loc217)
  cir.func private @time(!cir.ptr<!s64i>) -> !s64i extra(#fn_attr1) loc(#loc218)
  cir.func private @printLine(!cir.ptr<!s8i>) loc(#loc219)
  cir.global "private" constant cir_private dsolocal @".str.1" = #cir.const_array<"Calling good()...\00" : !cir.array<!s8i x 18>> : !cir.array<!s8i x 18> {alignment = 1 : i64} loc(#loc49)
  cir.global "private" constant cir_private dsolocal @".str.2" = #cir.const_array<"Finished good()\00" : !cir.array<!s8i x 16>> : !cir.array<!s8i x 16> {alignment = 1 : i64} loc(#loc50)
  cir.global "private" constant cir_private dsolocal @".str.3" = #cir.const_array<"Calling bad()...\00" : !cir.array<!s8i x 17>> : !cir.array<!s8i x 17> {alignment = 1 : i64} loc(#loc51)
  cir.global "private" constant cir_private dsolocal @".str.4" = #cir.const_array<"Finished bad()\00" : !cir.array<!s8i x 15>> : !cir.array<!s8i x 15> {alignment = 1 : i64} loc(#loc52)
  cir.func @main(%arg0: !s32i loc(fused[#loc55, #loc56]), %arg1: !cir.ptr<!cir.ptr<!s8i>> loc(fused[#loc57, #loc58])) -> !s32i extra(#fn_attr) {
    %0 = cir.alloca !s32i, !cir.ptr<!s32i>, ["argc", init] {alignment = 4 : i64} loc(#loc221)
    %1 = cir.alloca !cir.ptr<!cir.ptr<!s8i>>, !cir.ptr<!cir.ptr<!cir.ptr<!s8i>>>, ["argv", init] {alignment = 8 : i64} loc(#loc222)
    %2 = cir.alloca !s32i, !cir.ptr<!s32i>, ["__retval"] {alignment = 4 : i64} loc(#loc54)
    cir.store %arg0, %0 : !s32i, !cir.ptr<!s32i> loc(#loc59)
    cir.store %arg1, %1 : !cir.ptr<!cir.ptr<!s8i>>, !cir.ptr<!cir.ptr<!cir.ptr<!s8i>>> loc(#loc59)
    %3 = cir.const #cir.ptr<null> : !cir.ptr<!s64i> loc(#loc60)
    %4 = cir.call @time(%3) : (!cir.ptr<!s64i>) -> !s64i extra(#fn_attr1) loc(#loc61)
    %5 = cir.cast(integral, %4 : !s64i), !u32i loc(#loc61)
    cir.call @srand(%5) : (!u32i) -> () extra(#fn_attr1) loc(#loc62)
    %6 = cir.get_global @".str.1" : !cir.ptr<!cir.array<!s8i x 18>> loc(#loc49)
    %7 = cir.cast(array_to_ptrdecay, %6 : !cir.ptr<!cir.array<!s8i x 18>>), !cir.ptr<!s8i> loc(#loc49)
    cir.call @printLine(%7) : (!cir.ptr<!s8i>) -> () loc(#loc63)
    %8 = cir.get_global @CWE190_Integer_Overflow__unsigned_int_fscanf_square_10_good : !cir.ptr<!cir.func<!void ()>> loc(#loc223)
    cir.call @CWE190_Integer_Overflow__unsigned_int_fscanf_square_10_good() : () -> () loc(#loc64)
    %9 = cir.get_global @".str.2" : !cir.ptr<!cir.array<!s8i x 16>> loc(#loc50)
    %10 = cir.cast(array_to_ptrdecay, %9 : !cir.ptr<!cir.array<!s8i x 16>>), !cir.ptr<!s8i> loc(#loc50)
    cir.call @printLine(%10) : (!cir.ptr<!s8i>) -> () loc(#loc66)
    %11 = cir.get_global @".str.3" : !cir.ptr<!cir.array<!s8i x 17>> loc(#loc51)
    %12 = cir.cast(array_to_ptrdecay, %11 : !cir.ptr<!cir.array<!s8i x 17>>), !cir.ptr<!s8i> loc(#loc51)
    cir.call @printLine(%12) : (!cir.ptr<!s8i>) -> () loc(#loc67)
    %13 = cir.get_global @CWE190_Integer_Overflow__unsigned_int_fscanf_square_10_bad : !cir.ptr<!cir.func<!void ()>> loc(#loc224)
    cir.call @CWE190_Integer_Overflow__unsigned_int_fscanf_square_10_bad() : () -> () loc(#loc68)
    %14 = cir.get_global @".str.4" : !cir.ptr<!cir.array<!s8i x 15>> loc(#loc52)
    %15 = cir.cast(array_to_ptrdecay, %14 : !cir.ptr<!cir.array<!s8i x 15>>), !cir.ptr<!s8i> loc(#loc52)
    cir.call @printLine(%15) : (!cir.ptr<!s8i>) -> () loc(#loc70)
    %16 = cir.const #cir.int<0> : !s32i loc(#loc71)
    cir.store %16, %2 : !s32i, !cir.ptr<!s32i> loc(#loc225)
    %17 = cir.load %2 : !cir.ptr<!s32i>, !s32i loc(#loc225)
    cir.return %17 : !s32i loc(#loc225)
  } loc(#loc220)
  cir.global "private" external @globalFalse : !s32i {alignment = 4 : i64} loc(#loc226)
  cir.global "private" constant cir_private dsolocal @".str.5" = #cir.const_array<"Benign, fixed string\00" : !cir.array<!s8i x 21>> : !cir.array<!s8i x 21> {alignment = 1 : i64} loc(#loc75)
  cir.func private @sqrt(!cir.double) -> !cir.double extra(#fn_attr1) loc(#loc76)
  cir.global "private" constant cir_private dsolocal @".str.6" = #cir.const_array<"data value is too large to perform arithmetic safely.\00" : !cir.array<!s8i x 54>> : !cir.array<!s8i x 54> {alignment = 1 : i64} loc(#loc77)
  cir.func no_proto internal private @goodB2G1() extra(#fn_attr) {
    %0 = cir.alloca !u32i, !cir.ptr<!u32i>, ["result", init] {alignment = 4 : i64} loc(#loc228)
    %1 = cir.alloca !u32i, !cir.ptr<!u32i>, ["data"] {alignment = 4 : i64} loc(#loc229)
    %2 = cir.const #cir.int<0> : !s32i loc(#loc84)
    %3 = cir.cast(integral, %2 : !s32i), !u32i loc(#loc84)
    cir.store %3, %1 : !u32i, !cir.ptr<!u32i> loc(#loc230)
    cir.br ^bb1 loc(#loc231)
  ^bb1:  // pred: ^bb0
    %4 = cir.get_global @globalTrue : !cir.ptr<!s32i> loc(#loc198)
    %5 = cir.load %4 : !cir.ptr<!s32i>, !s32i loc(#loc88)
    %6 = cir.cast(int_to_bool, %5 : !s32i), !cir.bool loc(#loc88)
    cir.brcond %6 ^bb2, ^bb3 loc(#loc232)
  ^bb2:  // pred: ^bb1
    %7 = cir.get_global @__isoc99_fscanf : !cir.ptr<!cir.func<!s32i (!cir.ptr<!ty__IO_FILE>, !cir.ptr<!s8i>, ...)>> loc(#loc90)
    %8 = cir.get_global @stdin : !cir.ptr<!cir.ptr<!ty__IO_FILE>> loc(#loc200)
    %9 = cir.load %8 : !cir.ptr<!cir.ptr<!ty__IO_FILE>>, !cir.ptr<!ty__IO_FILE> loc(#loc91)
    %10 = cir.get_global @".str" : !cir.ptr<!cir.array<!s8i x 3>> loc(#loc92)
    %11 = cir.cast(array_to_ptrdecay, %10 : !cir.ptr<!cir.array<!s8i x 3>>), !cir.ptr<!s8i> loc(#loc92)
    %12 = cir.call @__isoc99_fscanf(%9, %11, %1) : (!cir.ptr<!ty__IO_FILE>, !cir.ptr<!s8i>, !cir.ptr<!u32i>) -> !s32i loc(#loc90)
    cir.br ^bb3 loc(#loc87)
  ^bb3:  // 2 preds: ^bb1, ^bb2
    cir.br ^bb4 loc(#loc87)
  ^bb4:  // pred: ^bb3
    cir.br ^bb5 loc(#loc233)
  ^bb5:  // pred: ^bb4
    %13 = cir.get_global @globalFalse : !cir.ptr<!s32i> loc(#loc226)
    %14 = cir.load %13 : !cir.ptr<!s32i>, !s32i loc(#loc95)
    %15 = cir.cast(int_to_bool, %14 : !s32i), !cir.bool loc(#loc95)
    cir.brcond %15 ^bb6, ^bb7 loc(#loc234)
  ^bb6:  // pred: ^bb5
    %16 = cir.get_global @".str.5" : !cir.ptr<!cir.array<!s8i x 21>> loc(#loc75)
    %17 = cir.cast(array_to_ptrdecay, %16 : !cir.ptr<!cir.array<!s8i x 21>>), !cir.ptr<!s8i> loc(#loc75)
    cir.call @printLine(%17) : (!cir.ptr<!s8i>) -> () loc(#loc99)
    cir.br ^bb13 loc(#loc97)
  ^bb7:  // pred: ^bb5
    cir.br ^bb8 loc(#loc235)
  ^bb8:  // pred: ^bb7
    %18 = cir.load %1 : !cir.ptr<!u32i>, !u32i loc(#loc102)
    %19 = cir.cast(integral, %18 : !u32i), !s64i loc(#loc102)
    %20 = cir.cast(integral, %19 : !s64i), !s32i loc(#loc102)
    %21 = cir.abs %20 poison : !s32i loc(#loc103)
    %22 = cir.cast(integral, %21 : !s32i), !s64i loc(#loc103)
    %23 = cir.get_global @sqrt : !cir.ptr<!cir.func<!cir.double (!cir.double)>> loc(#loc104)
    %24 = cir.const #cir.int<2147483647> : !s32i loc(#loc105)
    %25 = cir.cast(integral, %24 : !s32i), !u32i loc(#loc105)
    %26 = cir.const #cir.int<2> : !u32i loc(#loc105)
    %27 = cir.binop(mul, %25, %26) : !u32i loc(#loc105)
    %28 = cir.const #cir.int<1> : !u32i loc(#loc105)
    %29 = cir.binop(add, %27, %28) : !u32i loc(#loc105)
    %30 = cir.cast(int_to_float, %29 : !u32i), !cir.double loc(#loc105)
    %31 = cir.call @sqrt(%30) : (!cir.double) -> !cir.double extra(#fn_attr1) loc(#loc104)
    %32 = cir.cast(float_to_int, %31 : !cir.double), !s64i loc(#loc104)
    %33 = cir.cmp(lt, %22, %32) : !s64i, !cir.bool loc(#loc236)
    cir.brcond %33 ^bb9, ^bb10 loc(#loc237)
  ^bb9:  // pred: ^bb8
    %34 = cir.load %1 : !cir.ptr<!u32i>, !u32i loc(#loc110)
    %35 = cir.load %1 : !cir.ptr<!u32i>, !u32i loc(#loc81)
    %36 = cir.binop(mul, %34, %35) : !u32i loc(#loc238)
    cir.store %36, %0 : !u32i, !cir.ptr<!u32i> loc(#loc228)
    %37 = cir.load %0 : !cir.ptr<!u32i>, !u32i loc(#loc111)
    cir.call @printUnsignedLine(%37) : (!u32i) -> () loc(#loc112)
    cir.br ^bb11 loc(#loc108)
  ^bb10:  // pred: ^bb8
    %38 = cir.get_global @".str.6" : !cir.ptr<!cir.array<!s8i x 54>> loc(#loc77)
    %39 = cir.cast(array_to_ptrdecay, %38 : !cir.ptr<!cir.array<!s8i x 54>>), !cir.ptr<!s8i> loc(#loc77)
    cir.call @printLine(%39) : (!cir.ptr<!s8i>) -> () loc(#loc113)
    cir.br ^bb11 loc(#loc101)
  ^bb11:  // 2 preds: ^bb9, ^bb10
    cir.br ^bb12 loc(#loc101)
  ^bb12:  // pred: ^bb11
    cir.br ^bb13 loc(#loc94)
  ^bb13:  // 2 preds: ^bb6, ^bb12
    cir.br ^bb14 loc(#loc94)
  ^bb14:  // pred: ^bb13
    cir.return loc(#loc79)
  } loc(#loc227)
  cir.func no_proto internal private @goodB2G2() extra(#fn_attr) {
    %0 = cir.alloca !u32i, !cir.ptr<!u32i>, ["result", init] {alignment = 4 : i64} loc(#loc240)
    %1 = cir.alloca !u32i, !cir.ptr<!u32i>, ["data"] {alignment = 4 : i64} loc(#loc241)
    %2 = cir.const #cir.int<0> : !s32i loc(#loc120)
    %3 = cir.cast(integral, %2 : !s32i), !u32i loc(#loc120)
    cir.store %3, %1 : !u32i, !cir.ptr<!u32i> loc(#loc242)
    cir.br ^bb1 loc(#loc243)
  ^bb1:  // pred: ^bb0
    %4 = cir.get_global @globalTrue : !cir.ptr<!s32i> loc(#loc198)
    %5 = cir.load %4 : !cir.ptr<!s32i>, !s32i loc(#loc124)
    %6 = cir.cast(int_to_bool, %5 : !s32i), !cir.bool loc(#loc124)
    cir.brcond %6 ^bb2, ^bb3 loc(#loc244)
  ^bb2:  // pred: ^bb1
    %7 = cir.get_global @__isoc99_fscanf : !cir.ptr<!cir.func<!s32i (!cir.ptr<!ty__IO_FILE>, !cir.ptr<!s8i>, ...)>> loc(#loc126)
    %8 = cir.get_global @stdin : !cir.ptr<!cir.ptr<!ty__IO_FILE>> loc(#loc200)
    %9 = cir.load %8 : !cir.ptr<!cir.ptr<!ty__IO_FILE>>, !cir.ptr<!ty__IO_FILE> loc(#loc127)
    %10 = cir.get_global @".str" : !cir.ptr<!cir.array<!s8i x 3>> loc(#loc128)
    %11 = cir.cast(array_to_ptrdecay, %10 : !cir.ptr<!cir.array<!s8i x 3>>), !cir.ptr<!s8i> loc(#loc128)
    %12 = cir.call @__isoc99_fscanf(%9, %11, %1) : (!cir.ptr<!ty__IO_FILE>, !cir.ptr<!s8i>, !cir.ptr<!u32i>) -> !s32i loc(#loc126)
    cir.br ^bb3 loc(#loc123)
  ^bb3:  // 2 preds: ^bb1, ^bb2
    cir.br ^bb4 loc(#loc123)
  ^bb4:  // pred: ^bb3
    cir.br ^bb5 loc(#loc245)
  ^bb5:  // pred: ^bb4
    %13 = cir.get_global @globalTrue : !cir.ptr<!s32i> loc(#loc198)
    %14 = cir.load %13 : !cir.ptr<!s32i>, !s32i loc(#loc131)
    %15 = cir.cast(int_to_bool, %14 : !s32i), !cir.bool loc(#loc131)
    cir.brcond %15 ^bb6, ^bb12 loc(#loc246)
  ^bb6:  // pred: ^bb5
    cir.br ^bb7 loc(#loc247)
  ^bb7:  // pred: ^bb6
    %16 = cir.load %1 : !cir.ptr<!u32i>, !u32i loc(#loc135)
    %17 = cir.cast(integral, %16 : !u32i), !s64i loc(#loc135)
    %18 = cir.cast(integral, %17 : !s64i), !s32i loc(#loc135)
    %19 = cir.abs %18 poison : !s32i loc(#loc136)
    %20 = cir.cast(integral, %19 : !s32i), !s64i loc(#loc136)
    %21 = cir.get_global @sqrt : !cir.ptr<!cir.func<!cir.double (!cir.double)>> loc(#loc137)
    %22 = cir.const #cir.int<2147483647> : !s32i loc(#loc138)
    %23 = cir.cast(integral, %22 : !s32i), !u32i loc(#loc138)
    %24 = cir.const #cir.int<2> : !u32i loc(#loc138)
    %25 = cir.binop(mul, %23, %24) : !u32i loc(#loc138)
    %26 = cir.const #cir.int<1> : !u32i loc(#loc138)
    %27 = cir.binop(add, %25, %26) : !u32i loc(#loc138)
    %28 = cir.cast(int_to_float, %27 : !u32i), !cir.double loc(#loc138)
    %29 = cir.call @sqrt(%28) : (!cir.double) -> !cir.double extra(#fn_attr1) loc(#loc137)
    %30 = cir.cast(float_to_int, %29 : !cir.double), !s64i loc(#loc137)
    %31 = cir.cmp(lt, %20, %30) : !s64i, !cir.bool loc(#loc248)
    cir.brcond %31 ^bb8, ^bb9 loc(#loc249)
  ^bb8:  // pred: ^bb7
    %32 = cir.load %1 : !cir.ptr<!u32i>, !u32i loc(#loc143)
    %33 = cir.load %1 : !cir.ptr<!u32i>, !u32i loc(#loc117)
    %34 = cir.binop(mul, %32, %33) : !u32i loc(#loc250)
    cir.store %34, %0 : !u32i, !cir.ptr<!u32i> loc(#loc240)
    %35 = cir.load %0 : !cir.ptr<!u32i>, !u32i loc(#loc144)
    cir.call @printUnsignedLine(%35) : (!u32i) -> () loc(#loc145)
    cir.br ^bb10 loc(#loc141)
  ^bb9:  // pred: ^bb7
    %36 = cir.get_global @".str.6" : !cir.ptr<!cir.array<!s8i x 54>> loc(#loc146)
    %37 = cir.cast(array_to_ptrdecay, %36 : !cir.ptr<!cir.array<!s8i x 54>>), !cir.ptr<!s8i> loc(#loc146)
    cir.call @printLine(%37) : (!cir.ptr<!s8i>) -> () loc(#loc147)
    cir.br ^bb10 loc(#loc134)
  ^bb10:  // 2 preds: ^bb8, ^bb9
    cir.br ^bb11 loc(#loc134)
  ^bb11:  // pred: ^bb10
    cir.br ^bb12 loc(#loc130)
  ^bb12:  // 2 preds: ^bb5, ^bb11
    cir.br ^bb13 loc(#loc130)
  ^bb13:  // pred: ^bb12
    cir.return loc(#loc115)
  } loc(#loc239)
  cir.func no_proto internal private @goodG2B1() extra(#fn_attr) {
    %0 = cir.alloca !u32i, !cir.ptr<!u32i>, ["result", init] {alignment = 4 : i64} loc(#loc252)
    %1 = cir.alloca !u32i, !cir.ptr<!u32i>, ["data"] {alignment = 4 : i64} loc(#loc253)
    %2 = cir.const #cir.int<0> : !s32i loc(#loc154)
    %3 = cir.cast(integral, %2 : !s32i), !u32i loc(#loc154)
    cir.store %3, %1 : !u32i, !cir.ptr<!u32i> loc(#loc254)
    cir.br ^bb1 loc(#loc255)
  ^bb1:  // pred: ^bb0
    %4 = cir.get_global @globalFalse : !cir.ptr<!s32i> loc(#loc226)
    %5 = cir.load %4 : !cir.ptr<!s32i>, !s32i loc(#loc158)
    %6 = cir.cast(int_to_bool, %5 : !s32i), !cir.bool loc(#loc158)
    cir.brcond %6 ^bb2, ^bb3 loc(#loc256)
  ^bb2:  // pred: ^bb1
    %7 = cir.get_global @".str.5" : !cir.ptr<!cir.array<!s8i x 21>> loc(#loc162)
    %8 = cir.cast(array_to_ptrdecay, %7 : !cir.ptr<!cir.array<!s8i x 21>>), !cir.ptr<!s8i> loc(#loc162)
    cir.call @printLine(%8) : (!cir.ptr<!s8i>) -> () loc(#loc163)
    cir.br ^bb4 loc(#loc160)
  ^bb3:  // pred: ^bb1
    %9 = cir.const #cir.int<2> : !s32i loc(#loc164)
    %10 = cir.cast(integral, %9 : !s32i), !u32i loc(#loc164)
    cir.store %10, %1 : !u32i, !cir.ptr<!u32i> loc(#loc257)
    cir.br ^bb4 loc(#loc157)
  ^bb4:  // 2 preds: ^bb2, ^bb3
    cir.br ^bb5 loc(#loc157)
  ^bb5:  // pred: ^bb4
    cir.br ^bb6 loc(#loc258)
  ^bb6:  // pred: ^bb5
    %11 = cir.get_global @globalTrue : !cir.ptr<!s32i> loc(#loc198)
    %12 = cir.load %11 : !cir.ptr<!s32i>, !s32i loc(#loc168)
    %13 = cir.cast(int_to_bool, %12 : !s32i), !cir.bool loc(#loc168)
    cir.brcond %13 ^bb7, ^bb10 loc(#loc259)
  ^bb7:  // pred: ^bb6
    cir.br ^bb8 loc(#loc260)
  ^bb8:  // pred: ^bb7
    %14 = cir.load %1 : !cir.ptr<!u32i>, !u32i loc(#loc172)
    %15 = cir.load %1 : !cir.ptr<!u32i>, !u32i loc(#loc151)
    %16 = cir.binop(mul, %14, %15) : !u32i loc(#loc261)
    cir.store %16, %0 : !u32i, !cir.ptr<!u32i> loc(#loc252)
    %17 = cir.load %0 : !cir.ptr<!u32i>, !u32i loc(#loc173)
    cir.call @printUnsignedLine(%17) : (!u32i) -> () loc(#loc174)
    cir.br ^bb9 loc(#loc171)
  ^bb9:  // pred: ^bb8
    cir.br ^bb10 loc(#loc167)
  ^bb10:  // 2 preds: ^bb6, ^bb9
    cir.br ^bb11 loc(#loc167)
  ^bb11:  // pred: ^bb10
    cir.return loc(#loc149)
  } loc(#loc251)
  cir.func no_proto internal private @goodG2B2() extra(#fn_attr) {
    %0 = cir.alloca !u32i, !cir.ptr<!u32i>, ["result", init] {alignment = 4 : i64} loc(#loc263)
    %1 = cir.alloca !u32i, !cir.ptr<!u32i>, ["data"] {alignment = 4 : i64} loc(#loc264)
    %2 = cir.const #cir.int<0> : !s32i loc(#loc181)
    %3 = cir.cast(integral, %2 : !s32i), !u32i loc(#loc181)
    cir.store %3, %1 : !u32i, !cir.ptr<!u32i> loc(#loc265)
    cir.br ^bb1 loc(#loc266)
  ^bb1:  // pred: ^bb0
    %4 = cir.get_global @globalTrue : !cir.ptr<!s32i> loc(#loc198)
    %5 = cir.load %4 : !cir.ptr<!s32i>, !s32i loc(#loc185)
    %6 = cir.cast(int_to_bool, %5 : !s32i), !cir.bool loc(#loc185)
    cir.brcond %6 ^bb2, ^bb3 loc(#loc267)
  ^bb2:  // pred: ^bb1
    %7 = cir.const #cir.int<2> : !s32i loc(#loc187)
    %8 = cir.cast(integral, %7 : !s32i), !u32i loc(#loc187)
    cir.store %8, %1 : !u32i, !cir.ptr<!u32i> loc(#loc268)
    cir.br ^bb3 loc(#loc184)
  ^bb3:  // 2 preds: ^bb1, ^bb2
    cir.br ^bb4 loc(#loc184)
  ^bb4:  // pred: ^bb3
    cir.br ^bb5 loc(#loc269)
  ^bb5:  // pred: ^bb4
    %9 = cir.get_global @globalTrue : !cir.ptr<!s32i> loc(#loc198)
    %10 = cir.load %9 : !cir.ptr<!s32i>, !s32i loc(#loc191)
    %11 = cir.cast(int_to_bool, %10 : !s32i), !cir.bool loc(#loc191)
    cir.brcond %11 ^bb6, ^bb9 loc(#loc270)
  ^bb6:  // pred: ^bb5
    cir.br ^bb7 loc(#loc271)
  ^bb7:  // pred: ^bb6
    %12 = cir.load %1 : !cir.ptr<!u32i>, !u32i loc(#loc195)
    %13 = cir.load %1 : !cir.ptr<!u32i>, !u32i loc(#loc178)
    %14 = cir.binop(mul, %12, %13) : !u32i loc(#loc272)
    cir.store %14, %0 : !u32i, !cir.ptr<!u32i> loc(#loc263)
    %15 = cir.load %0 : !cir.ptr<!u32i>, !u32i loc(#loc196)
    cir.call @printUnsignedLine(%15) : (!u32i) -> () loc(#loc197)
    cir.br ^bb8 loc(#loc194)
  ^bb8:  // pred: ^bb7
    cir.br ^bb9 loc(#loc190)
  ^bb9:  // 2 preds: ^bb5, ^bb8
    cir.br ^bb10 loc(#loc190)
  ^bb10:  // pred: ^bb9
    cir.return loc(#loc176)
  } loc(#loc262)
} loc(#loc)
#loc = loc("/home/ladisgin/git_proj/juliet-c/testcases/CWE190_Integer_Overflow/s05/CWE190_Integer_Overflow__unsigned_int_fscanf_square_10.c":0:0)
#loc1 = loc("../../../testcasesupport/std_testcase.h":116:1)
#loc2 = loc("../../../testcasesupport/std_testcase.h":116:12)
#loc3 = loc("/usr/include/stdio.h":463:1)
#loc4 = loc("/usr/include/stdio.h":465:33)
#loc5 = loc("/usr/include/stdio.h":149:1)
#loc6 = loc("/usr/include/stdio.h":149:14)
#loc7 = loc("CWE190_Integer_Overflow__unsigned_int_fscanf_square_10.c":31:24)
#loc8 = loc("../../../testcasesupport/std_testcase_io.h":34:1)
#loc9 = loc("../../../testcasesupport/std_testcase_io.h":34:47)
#loc10 = loc("CWE190_Integer_Overflow__unsigned_int_fscanf_square_10.c":24:1)
#loc11 = loc("CWE190_Integer_Overflow__unsigned_int_fscanf_square_10.c":41:1)
#loc12 = loc("CWE190_Integer_Overflow__unsigned_int_fscanf_square_10.c":37:13)
#loc13 = loc("CWE190_Integer_Overflow__unsigned_int_fscanf_square_10.c":37:42)
#loc14 = loc("CWE190_Integer_Overflow__unsigned_int_fscanf_square_10.c":26:5)
#loc15 = loc("CWE190_Integer_Overflow__unsigned_int_fscanf_square_10.c":26:18)
#loc16 = loc("CWE190_Integer_Overflow__unsigned_int_fscanf_square_10.c":27:12)
#loc17 = loc("CWE190_Integer_Overflow__unsigned_int_fscanf_square_10.c":27:5)
#loc18 = loc("CWE190_Integer_Overflow__unsigned_int_fscanf_square_10.c":28:5)
#loc19 = loc("CWE190_Integer_Overflow__unsigned_int_fscanf_square_10.c":32:5)
#loc20 = loc("CWE190_Integer_Overflow__unsigned_int_fscanf_square_10.c":28:8)
#loc21 = loc("CWE190_Integer_Overflow__unsigned_int_fscanf_square_10.c":29:5)
#loc22 = loc("CWE190_Integer_Overflow__unsigned_int_fscanf_square_10.c":31:9)
#loc23 = loc("CWE190_Integer_Overflow__unsigned_int_fscanf_square_10.c":31:17)
#loc24 = loc("CWE190_Integer_Overflow__unsigned_int_fscanf_square_10.c":33:5)
#loc25 = loc("CWE190_Integer_Overflow__unsigned_int_fscanf_square_10.c":40:5)
#loc26 = loc("CWE190_Integer_Overflow__unsigned_int_fscanf_square_10.c":33:8)
#loc27 = loc("CWE190_Integer_Overflow__unsigned_int_fscanf_square_10.c":34:5)
#loc28 = loc("CWE190_Integer_Overflow__unsigned_int_fscanf_square_10.c":35:9)
#loc29 = loc("CWE190_Integer_Overflow__unsigned_int_fscanf_square_10.c":39:9)
#loc30 = loc("CWE190_Integer_Overflow__unsigned_int_fscanf_square_10.c":37:35)
#loc31 = loc("CWE190_Integer_Overflow__unsigned_int_fscanf_square_10.c":38:31)
#loc32 = loc("CWE190_Integer_Overflow__unsigned_int_fscanf_square_10.c":38:13)
#loc33 = loc("CWE190_Integer_Overflow__unsigned_int_fscanf_square_10.c":147:1)
#loc34 = loc("CWE190_Integer_Overflow__unsigned_int_fscanf_square_10.c":153:1)
#loc35 = loc("CWE190_Integer_Overflow__unsigned_int_fscanf_square_10.c":149:5)
#loc36 = loc("CWE190_Integer_Overflow__unsigned_int_fscanf_square_10.c":149:14)
#loc37 = loc("CWE190_Integer_Overflow__unsigned_int_fscanf_square_10.c":150:5)
#loc38 = loc("CWE190_Integer_Overflow__unsigned_int_fscanf_square_10.c":150:14)
#loc39 = loc("CWE190_Integer_Overflow__unsigned_int_fscanf_square_10.c":151:5)
#loc40 = loc("CWE190_Integer_Overflow__unsigned_int_fscanf_square_10.c":151:14)
#loc41 = loc("CWE190_Integer_Overflow__unsigned_int_fscanf_square_10.c":152:5)
#loc42 = loc("CWE190_Integer_Overflow__unsigned_int_fscanf_square_10.c":152:14)
#loc43 = loc("/usr/include/stdlib.h":575:1)
#loc44 = loc("/usr/include/stdlib.h":575:41)
#loc45 = loc("/usr/include/time.h":76:1)
#loc46 = loc("/usr/include/time.h":76:38)
#loc47 = loc("../../../testcasesupport/std_testcase_io.h":14:1)
#loc48 = loc("../../../testcasesupport/std_testcase_io.h":14:33)
#loc49 = loc("CWE190_Integer_Overflow__unsigned_int_fscanf_square_10.c":169:15)
#loc50 = loc("CWE190_Integer_Overflow__unsigned_int_fscanf_square_10.c":171:15)
#loc51 = loc("CWE190_Integer_Overflow__unsigned_int_fscanf_square_10.c":174:15)
#loc52 = loc("CWE190_Integer_Overflow__unsigned_int_fscanf_square_10.c":176:15)
#loc53 = loc("CWE190_Integer_Overflow__unsigned_int_fscanf_square_10.c":164:1)
#loc54 = loc("CWE190_Integer_Overflow__unsigned_int_fscanf_square_10.c":179:1)
#loc59 = loc("CWE190_Integer_Overflow__unsigned_int_fscanf_square_10.c":165:1)
#loc60 = loc("CWE190_Integer_Overflow__unsigned_int_fscanf_square_10.c":167:27)
#loc61 = loc("CWE190_Integer_Overflow__unsigned_int_fscanf_square_10.c":167:22)
#loc62 = loc("CWE190_Integer_Overflow__unsigned_int_fscanf_square_10.c":167:5)
#loc63 = loc("CWE190_Integer_Overflow__unsigned_int_fscanf_square_10.c":169:5)
#loc64 = loc("CWE190_Integer_Overflow__unsigned_int_fscanf_square_10.c":170:5)
#loc65 = loc("CWE190_Integer_Overflow__unsigned_int_fscanf_square_10.c":170:65)
#loc66 = loc("CWE190_Integer_Overflow__unsigned_int_fscanf_square_10.c":171:5)
#loc67 = loc("CWE190_Integer_Overflow__unsigned_int_fscanf_square_10.c":174:5)
#loc68 = loc("CWE190_Integer_Overflow__unsigned_int_fscanf_square_10.c":175:5)
#loc69 = loc("CWE190_Integer_Overflow__unsigned_int_fscanf_square_10.c":175:64)
#loc70 = loc("CWE190_Integer_Overflow__unsigned_int_fscanf_square_10.c":176:5)
#loc71 = loc("CWE190_Integer_Overflow__unsigned_int_fscanf_square_10.c":178:12)
#loc72 = loc("CWE190_Integer_Overflow__unsigned_int_fscanf_square_10.c":178:5)
#loc73 = loc("../../../testcasesupport/std_testcase.h":117:1)
#loc74 = loc("../../../testcasesupport/std_testcase.h":117:12)
#loc75 = loc("CWE190_Integer_Overflow__unsigned_int_fscanf_square_10.c":60:19)
#loc76 = loc("/usr/include/bits/mathcalls.h":158:1)
#loc77 = loc("CWE190_Integer_Overflow__unsigned_int_fscanf_square_10.c":72:23)
#loc78 = loc("CWE190_Integer_Overflow__unsigned_int_fscanf_square_10.c":48:1)
#loc79 = loc("CWE190_Integer_Overflow__unsigned_int_fscanf_square_10.c":75:1)
#loc80 = loc("CWE190_Integer_Overflow__unsigned_int_fscanf_square_10.c":67:13)
#loc81 = loc("CWE190_Integer_Overflow__unsigned_int_fscanf_square_10.c":67:42)
#loc82 = loc("CWE190_Integer_Overflow__unsigned_int_fscanf_square_10.c":50:5)
#loc83 = loc("CWE190_Integer_Overflow__unsigned_int_fscanf_square_10.c":50:18)
#loc84 = loc("CWE190_Integer_Overflow__unsigned_int_fscanf_square_10.c":51:12)
#loc85 = loc("CWE190_Integer_Overflow__unsigned_int_fscanf_square_10.c":51:5)
#loc86 = loc("CWE190_Integer_Overflow__unsigned_int_fscanf_square_10.c":52:5)
#loc87 = loc("CWE190_Integer_Overflow__unsigned_int_fscanf_square_10.c":56:5)
#loc88 = loc("CWE190_Integer_Overflow__unsigned_int_fscanf_square_10.c":52:8)
#loc89 = loc("CWE190_Integer_Overflow__unsigned_int_fscanf_square_10.c":53:5)
#loc90 = loc("CWE190_Integer_Overflow__unsigned_int_fscanf_square_10.c":55:9)
#loc91 = loc("CWE190_Integer_Overflow__unsigned_int_fscanf_square_10.c":55:17)
#loc92 = loc("CWE190_Integer_Overflow__unsigned_int_fscanf_square_10.c":55:24)
#loc93 = loc("CWE190_Integer_Overflow__unsigned_int_fscanf_square_10.c":57:5)
#loc94 = loc("CWE190_Integer_Overflow__unsigned_int_fscanf_square_10.c":74:5)
#loc95 = loc("CWE190_Integer_Overflow__unsigned_int_fscanf_square_10.c":57:8)
#loc96 = loc("CWE190_Integer_Overflow__unsigned_int_fscanf_square_10.c":58:5)
#loc97 = loc("CWE190_Integer_Overflow__unsigned_int_fscanf_square_10.c":61:5)
#loc98 = loc("CWE190_Integer_Overflow__unsigned_int_fscanf_square_10.c":63:5)
#loc99 = loc("CWE190_Integer_Overflow__unsigned_int_fscanf_square_10.c":60:9)
#loc100 = loc("CWE190_Integer_Overflow__unsigned_int_fscanf_square_10.c":65:9)
#loc101 = loc("CWE190_Integer_Overflow__unsigned_int_fscanf_square_10.c":73:9)
#loc102 = loc("CWE190_Integer_Overflow__unsigned_int_fscanf_square_10.c":65:23)
#loc103 = loc("CWE190_Integer_Overflow__unsigned_int_fscanf_square_10.c":65:13)
#loc104 = loc("CWE190_Integer_Overflow__unsigned_int_fscanf_square_10.c":65:37)
#loc105 = loc("CWE190_Integer_Overflow__unsigned_int_fscanf_square_10.c":65:50)
#loc106 = loc("CWE190_Integer_Overflow__unsigned_int_fscanf_square_10.c":65:58)
#loc107 = loc("CWE190_Integer_Overflow__unsigned_int_fscanf_square_10.c":66:9)
#loc108 = loc("CWE190_Integer_Overflow__unsigned_int_fscanf_square_10.c":69:9)
#loc109 = loc("CWE190_Integer_Overflow__unsigned_int_fscanf_square_10.c":71:9)
#loc110 = loc("CWE190_Integer_Overflow__unsigned_int_fscanf_square_10.c":67:35)
#loc111 = loc("CWE190_Integer_Overflow__unsigned_int_fscanf_square_10.c":68:31)
#loc112 = loc("CWE190_Integer_Overflow__unsigned_int_fscanf_square_10.c":68:13)
#loc113 = loc("CWE190_Integer_Overflow__unsigned_int_fscanf_square_10.c":72:13)
#loc114 = loc("CWE190_Integer_Overflow__unsigned_int_fscanf_square_10.c":78:1)
#loc115 = loc("CWE190_Integer_Overflow__unsigned_int_fscanf_square_10.c":100:1)
#loc116 = loc("CWE190_Integer_Overflow__unsigned_int_fscanf_square_10.c":92:13)
#loc117 = loc("CWE190_Integer_Overflow__unsigned_int_fscanf_square_10.c":92:42)
#loc118 = loc("CWE190_Integer_Overflow__unsigned_int_fscanf_square_10.c":80:5)
#loc119 = loc("CWE190_Integer_Overflow__unsigned_int_fscanf_square_10.c":80:18)
#loc120 = loc("CWE190_Integer_Overflow__unsigned_int_fscanf_square_10.c":81:12)
#loc121 = loc("CWE190_Integer_Overflow__unsigned_int_fscanf_square_10.c":81:5)
#loc122 = loc("CWE190_Integer_Overflow__unsigned_int_fscanf_square_10.c":82:5)
#loc123 = loc("CWE190_Integer_Overflow__unsigned_int_fscanf_square_10.c":86:5)
#loc124 = loc("CWE190_Integer_Overflow__unsigned_int_fscanf_square_10.c":82:8)
#loc125 = loc("CWE190_Integer_Overflow__unsigned_int_fscanf_square_10.c":83:5)
#loc126 = loc("CWE190_Integer_Overflow__unsigned_int_fscanf_square_10.c":85:9)
#loc127 = loc("CWE190_Integer_Overflow__unsigned_int_fscanf_square_10.c":85:17)
#loc128 = loc("CWE190_Integer_Overflow__unsigned_int_fscanf_square_10.c":85:24)
#loc129 = loc("CWE190_Integer_Overflow__unsigned_int_fscanf_square_10.c":87:5)
#loc130 = loc("CWE190_Integer_Overflow__unsigned_int_fscanf_square_10.c":99:5)
#loc131 = loc("CWE190_Integer_Overflow__unsigned_int_fscanf_square_10.c":87:8)
#loc132 = loc("CWE190_Integer_Overflow__unsigned_int_fscanf_square_10.c":88:5)
#loc133 = loc("CWE190_Integer_Overflow__unsigned_int_fscanf_square_10.c":90:9)
#loc134 = loc("CWE190_Integer_Overflow__unsigned_int_fscanf_square_10.c":98:9)
#loc135 = loc("CWE190_Integer_Overflow__unsigned_int_fscanf_square_10.c":90:23)
#loc136 = loc("CWE190_Integer_Overflow__unsigned_int_fscanf_square_10.c":90:13)
#loc137 = loc("CWE190_Integer_Overflow__unsigned_int_fscanf_square_10.c":90:37)
#loc138 = loc("CWE190_Integer_Overflow__unsigned_int_fscanf_square_10.c":90:50)
#loc139 = loc("CWE190_Integer_Overflow__unsigned_int_fscanf_square_10.c":90:58)
#loc140 = loc("CWE190_Integer_Overflow__unsigned_int_fscanf_square_10.c":91:9)
#loc141 = loc("CWE190_Integer_Overflow__unsigned_int_fscanf_square_10.c":94:9)
#loc142 = loc("CWE190_Integer_Overflow__unsigned_int_fscanf_square_10.c":96:9)
#loc143 = loc("CWE190_Integer_Overflow__unsigned_int_fscanf_square_10.c":92:35)
#loc144 = loc("CWE190_Integer_Overflow__unsigned_int_fscanf_square_10.c":93:31)
#loc145 = loc("CWE190_Integer_Overflow__unsigned_int_fscanf_square_10.c":93:13)
#loc146 = loc("CWE190_Integer_Overflow__unsigned_int_fscanf_square_10.c":97:23)
#loc147 = loc("CWE190_Integer_Overflow__unsigned_int_fscanf_square_10.c":97:13)
#loc148 = loc("CWE190_Integer_Overflow__unsigned_int_fscanf_square_10.c":103:1)
#loc149 = loc("CWE190_Integer_Overflow__unsigned_int_fscanf_square_10.c":125:1)
#loc150 = loc("CWE190_Integer_Overflow__unsigned_int_fscanf_square_10.c":121:13)
#loc151 = loc("CWE190_Integer_Overflow__unsigned_int_fscanf_square_10.c":121:42)
#loc152 = loc("CWE190_Integer_Overflow__unsigned_int_fscanf_square_10.c":105:5)
#loc153 = loc("CWE190_Integer_Overflow__unsigned_int_fscanf_square_10.c":105:18)
#loc154 = loc("CWE190_Integer_Overflow__unsigned_int_fscanf_square_10.c":106:12)
#loc155 = loc("CWE190_Integer_Overflow__unsigned_int_fscanf_square_10.c":106:5)
#loc156 = loc("CWE190_Integer_Overflow__unsigned_int_fscanf_square_10.c":107:5)
#loc157 = loc("CWE190_Integer_Overflow__unsigned_int_fscanf_square_10.c":116:5)
#loc158 = loc("CWE190_Integer_Overflow__unsigned_int_fscanf_square_10.c":107:8)
#loc159 = loc("CWE190_Integer_Overflow__unsigned_int_fscanf_square_10.c":108:5)
#loc160 = loc("CWE190_Integer_Overflow__unsigned_int_fscanf_square_10.c":111:5)
#loc161 = loc("CWE190_Integer_Overflow__unsigned_int_fscanf_square_10.c":113:5)
#loc162 = loc("CWE190_Integer_Overflow__unsigned_int_fscanf_square_10.c":110:19)
#loc163 = loc("CWE190_Integer_Overflow__unsigned_int_fscanf_square_10.c":110:9)
#loc164 = loc("CWE190_Integer_Overflow__unsigned_int_fscanf_square_10.c":115:16)
#loc165 = loc("CWE190_Integer_Overflow__unsigned_int_fscanf_square_10.c":115:9)
#loc166 = loc("CWE190_Integer_Overflow__unsigned_int_fscanf_square_10.c":117:5)
#loc167 = loc("CWE190_Integer_Overflow__unsigned_int_fscanf_square_10.c":124:5)
#loc168 = loc("CWE190_Integer_Overflow__unsigned_int_fscanf_square_10.c":117:8)
#loc169 = loc("CWE190_Integer_Overflow__unsigned_int_fscanf_square_10.c":118:5)
#loc170 = loc("CWE190_Integer_Overflow__unsigned_int_fscanf_square_10.c":119:9)
#loc171 = loc("CWE190_Integer_Overflow__unsigned_int_fscanf_square_10.c":123:9)
#loc172 = loc("CWE190_Integer_Overflow__unsigned_int_fscanf_square_10.c":121:35)
#loc173 = loc("CWE190_Integer_Overflow__unsigned_int_fscanf_square_10.c":122:31)
#loc174 = loc("CWE190_Integer_Overflow__unsigned_int_fscanf_square_10.c":122:13)
#loc175 = loc("CWE190_Integer_Overflow__unsigned_int_fscanf_square_10.c":128:1)
#loc176 = loc("CWE190_Integer_Overflow__unsigned_int_fscanf_square_10.c":145:1)
#loc177 = loc("CWE190_Integer_Overflow__unsigned_int_fscanf_square_10.c":141:13)
#loc178 = loc("CWE190_Integer_Overflow__unsigned_int_fscanf_square_10.c":141:42)
#loc179 = loc("CWE190_Integer_Overflow__unsigned_int_fscanf_square_10.c":130:5)
#loc180 = loc("CWE190_Integer_Overflow__unsigned_int_fscanf_square_10.c":130:18)
#loc181 = loc("CWE190_Integer_Overflow__unsigned_int_fscanf_square_10.c":131:12)
#loc182 = loc("CWE190_Integer_Overflow__unsigned_int_fscanf_square_10.c":131:5)
#loc183 = loc("CWE190_Integer_Overflow__unsigned_int_fscanf_square_10.c":132:5)
#loc184 = loc("CWE190_Integer_Overflow__unsigned_int_fscanf_square_10.c":136:5)
#loc185 = loc("CWE190_Integer_Overflow__unsigned_int_fscanf_square_10.c":132:8)
#loc186 = loc("CWE190_Integer_Overflow__unsigned_int_fscanf_square_10.c":133:5)
#loc187 = loc("CWE190_Integer_Overflow__unsigned_int_fscanf_square_10.c":135:16)
#loc188 = loc("CWE190_Integer_Overflow__unsigned_int_fscanf_square_10.c":135:9)
#loc189 = loc("CWE190_Integer_Overflow__unsigned_int_fscanf_square_10.c":137:5)
#loc190 = loc("CWE190_Integer_Overflow__unsigned_int_fscanf_square_10.c":144:5)
#loc191 = loc("CWE190_Integer_Overflow__unsigned_int_fscanf_square_10.c":137:8)
#loc192 = loc("CWE190_Integer_Overflow__unsigned_int_fscanf_square_10.c":138:5)
#loc193 = loc("CWE190_Integer_Overflow__unsigned_int_fscanf_square_10.c":139:9)
#loc194 = loc("CWE190_Integer_Overflow__unsigned_int_fscanf_square_10.c":143:9)
#loc195 = loc("CWE190_Integer_Overflow__unsigned_int_fscanf_square_10.c":141:35)
#loc196 = loc("CWE190_Integer_Overflow__unsigned_int_fscanf_square_10.c":142:31)
#loc197 = loc("CWE190_Integer_Overflow__unsigned_int_fscanf_square_10.c":142:13)
#loc198 = loc(fused[#loc1, #loc2])
#loc199 = loc(fused[#loc3, #loc4])
#loc200 = loc(fused[#loc5, #loc6])
#loc201 = loc(fused[#loc8, #loc9])
#loc202 = loc(fused[#loc10, #loc11])
#loc203 = loc(fused[#loc12, #loc13])
#loc204 = loc(fused[#loc14, #loc15])
#loc205 = loc(fused[#loc17, #loc16])
#loc206 = loc(fused[#loc18, #loc19])
#loc207 = loc(fused[#loc21, #loc19])
#loc208 = loc(fused[#loc24, #loc25])
#loc209 = loc(fused[#loc27, #loc25])
#loc210 = loc(fused[#loc28, #loc29])
#loc211 = loc(fused[#loc30, #loc13])
#loc212 = loc(fused[#loc33, #loc34])
#loc213 = loc(fused[#loc35, #loc36])
#loc214 = loc(fused[#loc37, #loc38])
#loc215 = loc(fused[#loc39, #loc40])
#loc216 = loc(fused[#loc41, #loc42])
#loc217 = loc(fused[#loc43, #loc44])
#loc218 = loc(fused[#loc45, #loc46])
#loc219 = loc(fused[#loc47, #loc48])
#loc220 = loc(fused[#loc53, #loc54])
#loc223 = loc(fused[#loc64, #loc65])
#loc224 = loc(fused[#loc68, #loc69])
#loc225 = loc(fused[#loc72, #loc71])
#loc226 = loc(fused[#loc73, #loc74])
#loc227 = loc(fused[#loc78, #loc79])
#loc228 = loc(fused[#loc80, #loc81])
#loc229 = loc(fused[#loc82, #loc83])
#loc230 = loc(fused[#loc85, #loc84])
#loc231 = loc(fused[#loc86, #loc87])
#loc232 = loc(fused[#loc89, #loc87])
#loc233 = loc(fused[#loc93, #loc94])
#loc234 = loc(fused[#loc96, #loc97, #loc98, #loc94])
#loc235 = loc(fused[#loc100, #loc101])
#loc236 = loc(fused[#loc103, #loc106])
#loc237 = loc(fused[#loc107, #loc108, #loc109, #loc101])
#loc238 = loc(fused[#loc110, #loc81])
#loc239 = loc(fused[#loc114, #loc115])
#loc240 = loc(fused[#loc116, #loc117])
#loc241 = loc(fused[#loc118, #loc119])
#loc242 = loc(fused[#loc121, #loc120])
#loc243 = loc(fused[#loc122, #loc123])
#loc244 = loc(fused[#loc125, #loc123])
#loc245 = loc(fused[#loc129, #loc130])
#loc246 = loc(fused[#loc132, #loc130])
#loc247 = loc(fused[#loc133, #loc134])
#loc248 = loc(fused[#loc136, #loc139])
#loc249 = loc(fused[#loc140, #loc141, #loc142, #loc134])
#loc250 = loc(fused[#loc143, #loc117])
#loc251 = loc(fused[#loc148, #loc149])
#loc252 = loc(fused[#loc150, #loc151])
#loc253 = loc(fused[#loc152, #loc153])
#loc254 = loc(fused[#loc155, #loc154])
#loc255 = loc(fused[#loc156, #loc157])
#loc256 = loc(fused[#loc159, #loc160, #loc161, #loc157])
#loc257 = loc(fused[#loc165, #loc164])
#loc258 = loc(fused[#loc166, #loc167])
#loc259 = loc(fused[#loc169, #loc167])
#loc260 = loc(fused[#loc170, #loc171])
#loc261 = loc(fused[#loc172, #loc151])
#loc262 = loc(fused[#loc175, #loc176])
#loc263 = loc(fused[#loc177, #loc178])
#loc264 = loc(fused[#loc179, #loc180])
#loc265 = loc(fused[#loc182, #loc181])
#loc266 = loc(fused[#loc183, #loc184])
#loc267 = loc(fused[#loc186, #loc184])
#loc268 = loc(fused[#loc188, #loc187])
#loc269 = loc(fused[#loc189, #loc190])
#loc270 = loc(fused[#loc192, #loc190])
#loc271 = loc(fused[#loc193, #loc194])
#loc272 = loc(fused[#loc195, #loc178])
