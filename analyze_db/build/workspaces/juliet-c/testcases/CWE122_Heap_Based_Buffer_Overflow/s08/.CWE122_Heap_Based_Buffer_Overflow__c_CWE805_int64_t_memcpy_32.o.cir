!s32i = !cir.int<s, 32>
!s64i = !cir.int<s, 64>
!u64i = !cir.int<u, 64>
!void = !cir.void
#fn_attr = #cir<extra({nothrow = #cir.nothrow})>
#fn_attr1 = #cir<extra({inline = #cir.inline<no>, nothrow = #cir.nothrow, optnone = #cir.optnone, uwtable = #cir.uwtable<async>})>
module @"/workspaces/juliet-c/testcases/CWE122_Heap_Based_Buffer_Overflow/s08/CWE122_Heap_Based_Buffer_Overflow__c_CWE805_int64_t_memcpy_32.c" attributes {cir.lang = #cir.lang<c>, cir.sob = #cir.signed_overflow_behavior<undefined>, cir.triple = "x86_64-unknown-linux-gnu", cir.type_size_info = #cir.type_size_info<char = 8, int = 32, size_t = 64>, cir.uwtable = #cir.uwtable<async>, dlti.dl_spec = #dlti.dl_spec<f80 = dense<128> : vector<2xi64>, !llvm.ptr<270> = dense<32> : vector<4xi64>, i1 = dense<8> : vector<2xi64>, !llvm.ptr = dense<64> : vector<4xi64>, !llvm.ptr<272> = dense<64> : vector<4xi64>, i64 = dense<64> : vector<2xi64>, i128 = dense<128> : vector<2xi64>, f64 = dense<64> : vector<2xi64>, f16 = dense<16> : vector<2xi64>, f128 = dense<128> : vector<2xi64>, !llvm.ptr<271> = dense<32> : vector<4xi64>, i8 = dense<8> : vector<2xi64>, i16 = dense<16> : vector<2xi64>, i32 = dense<32> : vector<2xi64>, "dlti.mangling_mode" = "e", "dlti.stack_alignment" = 128 : i64, "dlti.endianness" = "little">} {
  cir.func private @malloc(!u64i) -> !cir.ptr<!void> extra(#fn_attr) loc(#loc121)
  cir.func private @exit(!s32i) extra(#fn_attr) loc(#loc122)
  cir.func private @printLongLongLine(!s64i) loc(#loc123)
  cir.func private @free(!cir.ptr<!void>) extra(#fn_attr) loc(#loc124)
  cir.func no_proto @CWE122_Heap_Based_Buffer_Overflow__c_CWE805_int64_t_memcpy_32_bad() extra(#fn_attr1) {
    %0 = cir.alloca !cir.ptr<!s64i>, !cir.ptr<!cir.ptr<!s64i>>, ["data"] {alignment = 8 : i64} loc(#loc126)
    %1 = cir.alloca !cir.ptr<!cir.ptr<!s64i>>, !cir.ptr<!cir.ptr<!cir.ptr<!s64i>>>, ["dataPtr1", init] {alignment = 8 : i64} loc(#loc127)
    %2 = cir.alloca !cir.ptr<!cir.ptr<!s64i>>, !cir.ptr<!cir.ptr<!cir.ptr<!s64i>>>, ["dataPtr2", init] {alignment = 8 : i64} loc(#loc128)
    cir.store %0, %1 : !cir.ptr<!cir.ptr<!s64i>>, !cir.ptr<!cir.ptr<!cir.ptr<!s64i>>> loc(#loc127)
    cir.store %0, %2 : !cir.ptr<!cir.ptr<!s64i>>, !cir.ptr<!cir.ptr<!cir.ptr<!s64i>>> loc(#loc128)
    %3 = cir.const #cir.ptr<null> : !cir.ptr<!s64i> loc(#loc17)
    cir.store %3, %0 : !cir.ptr<!s64i>, !cir.ptr<!cir.ptr<!s64i>> loc(#loc129)
    cir.scope {
      %4 = cir.alloca !cir.ptr<!s64i>, !cir.ptr<!cir.ptr<!s64i>>, ["data", init] {alignment = 8 : i64} loc(#loc131)
      %5 = cir.load deref %1 : !cir.ptr<!cir.ptr<!cir.ptr<!s64i>>>, !cir.ptr<!cir.ptr<!s64i>> loc(#loc22)
      %6 = cir.load %5 : !cir.ptr<!cir.ptr<!s64i>>, !cir.ptr<!s64i> loc(#loc23)
      cir.store %6, %4 : !cir.ptr<!s64i>, !cir.ptr<!cir.ptr<!s64i>> loc(#loc131)
      %7 = cir.get_global @malloc : !cir.ptr<!cir.func<(!u64i) -> !cir.ptr<!void>>> loc(#loc24)
      %8 = cir.const #cir.int<50> : !s32i loc(#loc25)
      %9 = cir.cast(integral, %8 : !s32i), !u64i loc(#loc25)
      %10 = cir.const #cir.int<8> : !u64i loc(#loc132)
      %11 = cir.binop(mul, %9, %10) : !u64i loc(#loc133)
      %12 = cir.call @malloc(%11) : (!u64i) -> !cir.ptr<!void> extra(#fn_attr) loc(#loc24)
      %13 = cir.cast(bitcast, %12 : !cir.ptr<!void>), !cir.ptr<!s64i> loc(#loc134)
      cir.store %13, %4 : !cir.ptr<!s64i>, !cir.ptr<!cir.ptr<!s64i>> loc(#loc135)
      cir.scope {
        %16 = cir.load %4 : !cir.ptr<!cir.ptr<!s64i>>, !cir.ptr<!s64i> loc(#loc32)
        %17 = cir.const #cir.ptr<null> : !cir.ptr<!void> loc(#loc33)
        %18 = cir.cast(bitcast, %17 : !cir.ptr<!void>), !cir.ptr<!s64i> loc(#loc33)
        %19 = cir.cmp(eq, %16, %18) : !cir.ptr<!s64i>, !cir.bool loc(#loc137)
        cir.if %19 {
          %20 = cir.get_global @exit : !cir.ptr<!cir.func<(!s32i)>> loc(#loc35)
          %21 = cir.const #cir.int<1> : !s32i loc(#loc36)
          %22 = cir.unary(minus, %21) nsw : !s32i, !s32i loc(#loc37)
          cir.call @exit(%22) : (!s32i) -> () extra(#fn_attr) loc(#loc35)
        } loc(#loc138)
      } loc(#loc136)
      %14 = cir.load %4 : !cir.ptr<!cir.ptr<!s64i>>, !cir.ptr<!s64i> loc(#loc38)
      %15 = cir.load deref %1 : !cir.ptr<!cir.ptr<!cir.ptr<!s64i>>>, !cir.ptr<!cir.ptr<!s64i>> loc(#loc39)
      cir.store %14, %15 : !cir.ptr<!s64i>, !cir.ptr<!cir.ptr<!s64i>> loc(#loc139)
    } loc(#loc130)
    cir.scope {
      %4 = cir.alloca !cir.ptr<!s64i>, !cir.ptr<!cir.ptr<!s64i>>, ["data", init] {alignment = 8 : i64} loc(#loc141)
      %5 = cir.load deref %2 : !cir.ptr<!cir.ptr<!cir.ptr<!s64i>>>, !cir.ptr<!cir.ptr<!s64i>> loc(#loc44)
      %6 = cir.load %5 : !cir.ptr<!cir.ptr<!s64i>>, !cir.ptr<!s64i> loc(#loc45)
      cir.store %6, %4 : !cir.ptr<!s64i>, !cir.ptr<!cir.ptr<!s64i>> loc(#loc141)
      cir.scope {
        %7 = cir.alloca !cir.array<!s64i x 100>, !cir.ptr<!cir.array<!s64i x 100>>, ["source"] {alignment = 16 : i64} loc(#loc143)
        %8 = cir.const #cir.zero : !cir.array<!s64i x 100> loc(#loc143)
        cir.store %8, %7 : !cir.array<!s64i x 100>, !cir.ptr<!cir.array<!s64i x 100>> loc(#loc143)
        %9 = cir.load %4 : !cir.ptr<!cir.ptr<!s64i>>, !cir.ptr<!s64i> loc(#loc50)
        %10 = cir.cast(bitcast, %9 : !cir.ptr<!s64i>), !cir.ptr<!void> loc(#loc50)
        %11 = cir.cast(array_to_ptrdecay, %7 : !cir.ptr<!cir.array<!s64i x 100>>), !cir.ptr<!s64i> loc(#loc51)
        %12 = cir.cast(bitcast, %11 : !cir.ptr<!s64i>), !cir.ptr<!void> loc(#loc51)
        %13 = cir.const #cir.int<100> : !s32i loc(#loc52)
        %14 = cir.cast(integral, %13 : !s32i), !u64i loc(#loc52)
        %15 = cir.const #cir.int<8> : !u64i loc(#loc144)
        %16 = cir.binop(mul, %14, %15) : !u64i loc(#loc145)
        cir.libc.memcpy %16 bytes from %12 to %10 : !u64i, !cir.ptr<!void> -> !cir.ptr<!void> loc(#loc146)
        %17 = cir.load %4 : !cir.ptr<!cir.ptr<!s64i>>, !cir.ptr<!s64i> loc(#loc57)
        %18 = cir.const #cir.int<0> : !s32i loc(#loc58)
        %19 = cir.ptr_stride(%17 : !cir.ptr<!s64i>, %18 : !s32i), !cir.ptr<!s64i> loc(#loc59)
        %20 = cir.load %19 : !cir.ptr<!s64i>, !s64i loc(#loc57)
        cir.call @printLongLongLine(%20) : (!s64i) -> () loc(#loc60)
        %21 = cir.get_global @free : !cir.ptr<!cir.func<(!cir.ptr<!void>)>> loc(#loc61)
        %22 = cir.load %4 : !cir.ptr<!cir.ptr<!s64i>>, !cir.ptr<!s64i> loc(#loc62)
        %23 = cir.cast(bitcast, %22 : !cir.ptr<!s64i>), !cir.ptr<!void> loc(#loc62)
        cir.call @free(%23) : (!cir.ptr<!void>) -> () extra(#fn_attr) loc(#loc61)
      } loc(#loc142)
    } loc(#loc140)
    cir.return loc(#loc10)
  } loc(#loc125)
  cir.func no_proto @CWE122_Heap_Based_Buffer_Overflow__c_CWE805_int64_t_memcpy_32_good() extra(#fn_attr1) {
    %0 = cir.get_global @goodG2B : !cir.ptr<!cir.func<()>> loc(#loc148)
    cir.call %0() : (!cir.ptr<!cir.func<()>>) -> () loc(#loc65)
    cir.return loc(#loc64)
  } loc(#loc147)
  cir.func no_proto internal private @goodG2B() extra(#fn_attr1) {
    %0 = cir.alloca !cir.ptr<!s64i>, !cir.ptr<!cir.ptr<!s64i>>, ["data"] {alignment = 8 : i64} loc(#loc150)
    %1 = cir.alloca !cir.ptr<!cir.ptr<!s64i>>, !cir.ptr<!cir.ptr<!cir.ptr<!s64i>>>, ["dataPtr1", init] {alignment = 8 : i64} loc(#loc151)
    %2 = cir.alloca !cir.ptr<!cir.ptr<!s64i>>, !cir.ptr<!cir.ptr<!cir.ptr<!s64i>>>, ["dataPtr2", init] {alignment = 8 : i64} loc(#loc152)
    cir.store %0, %1 : !cir.ptr<!cir.ptr<!s64i>>, !cir.ptr<!cir.ptr<!cir.ptr<!s64i>>> loc(#loc151)
    cir.store %0, %2 : !cir.ptr<!cir.ptr<!s64i>>, !cir.ptr<!cir.ptr<!cir.ptr<!s64i>>> loc(#loc152)
    %3 = cir.const #cir.ptr<null> : !cir.ptr<!s64i> loc(#loc75)
    cir.store %3, %0 : !cir.ptr<!s64i>, !cir.ptr<!cir.ptr<!s64i>> loc(#loc153)
    cir.scope {
      %4 = cir.alloca !cir.ptr<!s64i>, !cir.ptr<!cir.ptr<!s64i>>, ["data", init] {alignment = 8 : i64} loc(#loc155)
      %5 = cir.load deref %1 : !cir.ptr<!cir.ptr<!cir.ptr<!s64i>>>, !cir.ptr<!cir.ptr<!s64i>> loc(#loc80)
      %6 = cir.load %5 : !cir.ptr<!cir.ptr<!s64i>>, !cir.ptr<!s64i> loc(#loc81)
      cir.store %6, %4 : !cir.ptr<!s64i>, !cir.ptr<!cir.ptr<!s64i>> loc(#loc155)
      %7 = cir.get_global @malloc : !cir.ptr<!cir.func<(!u64i) -> !cir.ptr<!void>>> loc(#loc82)
      %8 = cir.const #cir.int<100> : !s32i loc(#loc83)
      %9 = cir.cast(integral, %8 : !s32i), !u64i loc(#loc83)
      %10 = cir.const #cir.int<8> : !u64i loc(#loc156)
      %11 = cir.binop(mul, %9, %10) : !u64i loc(#loc157)
      %12 = cir.call @malloc(%11) : (!u64i) -> !cir.ptr<!void> extra(#fn_attr) loc(#loc82)
      %13 = cir.cast(bitcast, %12 : !cir.ptr<!void>), !cir.ptr<!s64i> loc(#loc158)
      cir.store %13, %4 : !cir.ptr<!s64i>, !cir.ptr<!cir.ptr<!s64i>> loc(#loc159)
      cir.scope {
        %16 = cir.load %4 : !cir.ptr<!cir.ptr<!s64i>>, !cir.ptr<!s64i> loc(#loc90)
        %17 = cir.const #cir.ptr<null> : !cir.ptr<!void> loc(#loc91)
        %18 = cir.cast(bitcast, %17 : !cir.ptr<!void>), !cir.ptr<!s64i> loc(#loc91)
        %19 = cir.cmp(eq, %16, %18) : !cir.ptr<!s64i>, !cir.bool loc(#loc161)
        cir.if %19 {
          %20 = cir.get_global @exit : !cir.ptr<!cir.func<(!s32i)>> loc(#loc93)
          %21 = cir.const #cir.int<1> : !s32i loc(#loc94)
          %22 = cir.unary(minus, %21) nsw : !s32i, !s32i loc(#loc95)
          cir.call @exit(%22) : (!s32i) -> () extra(#fn_attr) loc(#loc93)
        } loc(#loc162)
      } loc(#loc160)
      %14 = cir.load %4 : !cir.ptr<!cir.ptr<!s64i>>, !cir.ptr<!s64i> loc(#loc96)
      %15 = cir.load deref %1 : !cir.ptr<!cir.ptr<!cir.ptr<!s64i>>>, !cir.ptr<!cir.ptr<!s64i>> loc(#loc97)
      cir.store %14, %15 : !cir.ptr<!s64i>, !cir.ptr<!cir.ptr<!s64i>> loc(#loc163)
    } loc(#loc154)
    cir.scope {
      %4 = cir.alloca !cir.ptr<!s64i>, !cir.ptr<!cir.ptr<!s64i>>, ["data", init] {alignment = 8 : i64} loc(#loc165)
      %5 = cir.load deref %2 : !cir.ptr<!cir.ptr<!cir.ptr<!s64i>>>, !cir.ptr<!cir.ptr<!s64i>> loc(#loc102)
      %6 = cir.load %5 : !cir.ptr<!cir.ptr<!s64i>>, !cir.ptr<!s64i> loc(#loc103)
      cir.store %6, %4 : !cir.ptr<!s64i>, !cir.ptr<!cir.ptr<!s64i>> loc(#loc165)
      cir.scope {
        %7 = cir.alloca !cir.array<!s64i x 100>, !cir.ptr<!cir.array<!s64i x 100>>, ["source"] {alignment = 16 : i64} loc(#loc167)
        %8 = cir.const #cir.zero : !cir.array<!s64i x 100> loc(#loc167)
        cir.store %8, %7 : !cir.array<!s64i x 100>, !cir.ptr<!cir.array<!s64i x 100>> loc(#loc167)
        %9 = cir.load %4 : !cir.ptr<!cir.ptr<!s64i>>, !cir.ptr<!s64i> loc(#loc108)
        %10 = cir.cast(bitcast, %9 : !cir.ptr<!s64i>), !cir.ptr<!void> loc(#loc108)
        %11 = cir.cast(array_to_ptrdecay, %7 : !cir.ptr<!cir.array<!s64i x 100>>), !cir.ptr<!s64i> loc(#loc109)
        %12 = cir.cast(bitcast, %11 : !cir.ptr<!s64i>), !cir.ptr<!void> loc(#loc109)
        %13 = cir.const #cir.int<100> : !s32i loc(#loc110)
        %14 = cir.cast(integral, %13 : !s32i), !u64i loc(#loc110)
        %15 = cir.const #cir.int<8> : !u64i loc(#loc168)
        %16 = cir.binop(mul, %14, %15) : !u64i loc(#loc169)
        cir.libc.memcpy %16 bytes from %12 to %10 : !u64i, !cir.ptr<!void> -> !cir.ptr<!void> loc(#loc170)
        %17 = cir.load %4 : !cir.ptr<!cir.ptr<!s64i>>, !cir.ptr<!s64i> loc(#loc115)
        %18 = cir.const #cir.int<0> : !s32i loc(#loc116)
        %19 = cir.ptr_stride(%17 : !cir.ptr<!s64i>, %18 : !s32i), !cir.ptr<!s64i> loc(#loc117)
        %20 = cir.load %19 : !cir.ptr<!s64i>, !s64i loc(#loc115)
        cir.call @printLongLongLine(%20) : (!s64i) -> () loc(#loc118)
        %21 = cir.get_global @free : !cir.ptr<!cir.func<(!cir.ptr<!void>)>> loc(#loc119)
        %22 = cir.load %4 : !cir.ptr<!cir.ptr<!s64i>>, !cir.ptr<!s64i> loc(#loc120)
        %23 = cir.cast(bitcast, %22 : !cir.ptr<!s64i>), !cir.ptr<!void> loc(#loc120)
        cir.call @free(%23) : (!cir.ptr<!void>) -> () extra(#fn_attr) loc(#loc119)
      } loc(#loc166)
    } loc(#loc164)
    cir.return loc(#loc68)
  } loc(#loc149)
} loc(#loc)
#loc = loc("/workspaces/juliet-c/testcases/CWE122_Heap_Based_Buffer_Overflow/s08/CWE122_Heap_Based_Buffer_Overflow__c_CWE805_int64_t_memcpy_32.c":0:0)
#loc1 = loc("/usr/include/stdlib.h":672:1)
#loc2 = loc("/usr/include/stdlib.h":672:45)
#loc3 = loc("/usr/include/stdlib.h":756:1)
#loc4 = loc("/usr/include/stdlib.h":756:70)
#loc5 = loc("../../../testcasesupport/std_testcase_io.h":26:1)
#loc6 = loc("../../../testcasesupport/std_testcase_io.h":26:49)
#loc7 = loc("/usr/include/stdlib.h":687:1)
#loc8 = loc("/usr/include/stdlib.h":687:32)
#loc9 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_int64_t_memcpy_32.c":21:1)
#loc10 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_int64_t_memcpy_32.c":44:1)
#loc11 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_int64_t_memcpy_32.c":23:5)
#loc12 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_int64_t_memcpy_32.c":23:15)
#loc13 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_int64_t_memcpy_32.c":24:5)
#loc14 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_int64_t_memcpy_32.c":24:28)
#loc15 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_int64_t_memcpy_32.c":25:5)
#loc16 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_int64_t_memcpy_32.c":25:28)
#loc17 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_int64_t_memcpy_32.c":26:12)
#loc18 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_int64_t_memcpy_32.c":26:5)
#loc19 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_int64_t_memcpy_32.c":27:5)
#loc20 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_int64_t_memcpy_32.c":33:5)
#loc21 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_int64_t_memcpy_32.c":28:9)
#loc22 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_int64_t_memcpy_32.c":28:27)
#loc23 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_int64_t_memcpy_32.c":28:26)
#loc24 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_int64_t_memcpy_32.c":30:27)
#loc25 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_int64_t_memcpy_32.c":30:34)
#loc26 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_int64_t_memcpy_32.c":30:37)
#loc27 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_int64_t_memcpy_32.c":30:51)
#loc28 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_int64_t_memcpy_32.c":30:52)
#loc29 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_int64_t_memcpy_32.c":30:9)
#loc30 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_int64_t_memcpy_32.c":31:9)
#loc31 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_int64_t_memcpy_32.c":31:37)
#loc32 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_int64_t_memcpy_32.c":31:13)
#loc33 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_int64_t_memcpy_32.c":31:21)
#loc34 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_int64_t_memcpy_32.c":31:27)
#loc35 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_int64_t_memcpy_32.c":31:28)
#loc36 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_int64_t_memcpy_32.c":31:34)
#loc37 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_int64_t_memcpy_32.c":31:33)
#loc38 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_int64_t_memcpy_32.c":32:21)
#loc39 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_int64_t_memcpy_32.c":32:10)
#loc40 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_int64_t_memcpy_32.c":32:9)
#loc41 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_int64_t_memcpy_32.c":34:5)
#loc42 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_int64_t_memcpy_32.c":43:5)
#loc43 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_int64_t_memcpy_32.c":35:9)
#loc44 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_int64_t_memcpy_32.c":35:27)
#loc45 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_int64_t_memcpy_32.c":35:26)
#loc46 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_int64_t_memcpy_32.c":36:9)
#loc47 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_int64_t_memcpy_32.c":42:9)
#loc48 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_int64_t_memcpy_32.c":37:13)
#loc49 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_int64_t_memcpy_32.c":37:37)
#loc50 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_int64_t_memcpy_32.c":39:20)
#loc51 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_int64_t_memcpy_32.c":39:26)
#loc52 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_int64_t_memcpy_32.c":39:34)
#loc53 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_int64_t_memcpy_32.c":39:38)
#loc54 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_int64_t_memcpy_32.c":39:52)
#loc55 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_int64_t_memcpy_32.c":39:13)
#loc56 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_int64_t_memcpy_32.c":39:53)
#loc57 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_int64_t_memcpy_32.c":40:31)
#loc58 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_int64_t_memcpy_32.c":40:36)
#loc59 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_int64_t_memcpy_32.c":40:37)
#loc60 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_int64_t_memcpy_32.c":40:13)
#loc61 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_int64_t_memcpy_32.c":41:13)
#loc62 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_int64_t_memcpy_32.c":41:18)
#loc63 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_int64_t_memcpy_32.c":76:1)
#loc64 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_int64_t_memcpy_32.c":79:1)
#loc65 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_int64_t_memcpy_32.c":78:5)
#loc66 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_int64_t_memcpy_32.c":78:13)
#loc67 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_int64_t_memcpy_32.c":51:1)
#loc68 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_int64_t_memcpy_32.c":74:1)
#loc69 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_int64_t_memcpy_32.c":53:5)
#loc70 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_int64_t_memcpy_32.c":53:15)
#loc71 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_int64_t_memcpy_32.c":54:5)
#loc72 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_int64_t_memcpy_32.c":54:28)
#loc73 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_int64_t_memcpy_32.c":55:5)
#loc74 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_int64_t_memcpy_32.c":55:28)
#loc75 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_int64_t_memcpy_32.c":56:12)
#loc76 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_int64_t_memcpy_32.c":56:5)
#loc77 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_int64_t_memcpy_32.c":57:5)
#loc78 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_int64_t_memcpy_32.c":63:5)
#loc79 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_int64_t_memcpy_32.c":58:9)
#loc80 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_int64_t_memcpy_32.c":58:27)
#loc81 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_int64_t_memcpy_32.c":58:26)
#loc82 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_int64_t_memcpy_32.c":60:27)
#loc83 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_int64_t_memcpy_32.c":60:34)
#loc84 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_int64_t_memcpy_32.c":60:38)
#loc85 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_int64_t_memcpy_32.c":60:52)
#loc86 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_int64_t_memcpy_32.c":60:53)
#loc87 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_int64_t_memcpy_32.c":60:9)
#loc88 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_int64_t_memcpy_32.c":61:9)
#loc89 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_int64_t_memcpy_32.c":61:37)
#loc90 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_int64_t_memcpy_32.c":61:13)
#loc91 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_int64_t_memcpy_32.c":61:21)
#loc92 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_int64_t_memcpy_32.c":61:27)
#loc93 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_int64_t_memcpy_32.c":61:28)
#loc94 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_int64_t_memcpy_32.c":61:34)
#loc95 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_int64_t_memcpy_32.c":61:33)
#loc96 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_int64_t_memcpy_32.c":62:21)
#loc97 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_int64_t_memcpy_32.c":62:10)
#loc98 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_int64_t_memcpy_32.c":62:9)
#loc99 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_int64_t_memcpy_32.c":64:5)
#loc100 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_int64_t_memcpy_32.c":73:5)
#loc101 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_int64_t_memcpy_32.c":65:9)
#loc102 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_int64_t_memcpy_32.c":65:27)
#loc103 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_int64_t_memcpy_32.c":65:26)
#loc104 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_int64_t_memcpy_32.c":66:9)
#loc105 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_int64_t_memcpy_32.c":72:9)
#loc106 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_int64_t_memcpy_32.c":67:13)
#loc107 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_int64_t_memcpy_32.c":67:37)
#loc108 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_int64_t_memcpy_32.c":69:20)
#loc109 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_int64_t_memcpy_32.c":69:26)
#loc110 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_int64_t_memcpy_32.c":69:34)
#loc111 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_int64_t_memcpy_32.c":69:38)
#loc112 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_int64_t_memcpy_32.c":69:52)
#loc113 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_int64_t_memcpy_32.c":69:13)
#loc114 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_int64_t_memcpy_32.c":69:53)
#loc115 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_int64_t_memcpy_32.c":70:31)
#loc116 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_int64_t_memcpy_32.c":70:36)
#loc117 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_int64_t_memcpy_32.c":70:37)
#loc118 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_int64_t_memcpy_32.c":70:13)
#loc119 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_int64_t_memcpy_32.c":71:13)
#loc120 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_int64_t_memcpy_32.c":71:18)
#loc121 = loc(fused[#loc1, #loc2])
#loc122 = loc(fused[#loc3, #loc4])
#loc123 = loc(fused[#loc5, #loc6])
#loc124 = loc(fused[#loc7, #loc8])
#loc125 = loc(fused[#loc9, #loc10])
#loc126 = loc(fused[#loc11, #loc12])
#loc127 = loc(fused[#loc13, #loc14])
#loc128 = loc(fused[#loc15, #loc16])
#loc129 = loc(fused[#loc18, #loc17])
#loc130 = loc(fused[#loc19, #loc20])
#loc131 = loc(fused[#loc21, #loc22])
#loc132 = loc(fused[#loc26, #loc27])
#loc133 = loc(fused[#loc25, #loc27])
#loc134 = loc(fused[#loc24, #loc28])
#loc135 = loc(fused[#loc29, #loc28])
#loc136 = loc(fused[#loc30, #loc31])
#loc137 = loc(fused[#loc32, #loc33])
#loc138 = loc(fused[#loc34, #loc31])
#loc139 = loc(fused[#loc40, #loc38])
#loc140 = loc(fused[#loc41, #loc42])
#loc141 = loc(fused[#loc43, #loc44])
#loc142 = loc(fused[#loc46, #loc47])
#loc143 = loc(fused[#loc48, #loc49])
#loc144 = loc(fused[#loc53, #loc54])
#loc145 = loc(fused[#loc52, #loc54])
#loc146 = loc(fused[#loc55, #loc56])
#loc147 = loc(fused[#loc63, #loc64])
#loc148 = loc(fused[#loc65, #loc66])
#loc149 = loc(fused[#loc67, #loc68])
#loc150 = loc(fused[#loc69, #loc70])
#loc151 = loc(fused[#loc71, #loc72])
#loc152 = loc(fused[#loc73, #loc74])
#loc153 = loc(fused[#loc76, #loc75])
#loc154 = loc(fused[#loc77, #loc78])
#loc155 = loc(fused[#loc79, #loc80])
#loc156 = loc(fused[#loc84, #loc85])
#loc157 = loc(fused[#loc83, #loc85])
#loc158 = loc(fused[#loc82, #loc86])
#loc159 = loc(fused[#loc87, #loc86])
#loc160 = loc(fused[#loc88, #loc89])
#loc161 = loc(fused[#loc90, #loc91])
#loc162 = loc(fused[#loc92, #loc89])
#loc163 = loc(fused[#loc98, #loc96])
#loc164 = loc(fused[#loc99, #loc100])
#loc165 = loc(fused[#loc101, #loc102])
#loc166 = loc(fused[#loc104, #loc105])
#loc167 = loc(fused[#loc106, #loc107])
#loc168 = loc(fused[#loc111, #loc112])
#loc169 = loc(fused[#loc110, #loc112])
#loc170 = loc(fused[#loc113, #loc114])
