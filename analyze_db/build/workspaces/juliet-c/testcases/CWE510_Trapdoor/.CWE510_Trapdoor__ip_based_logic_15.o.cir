!s32i = !cir.int<s, 32>
!s64i = !cir.int<s, 64>
!s8i = !cir.int<s, 8>
!u16i = !cir.int<u, 16>
!u32i = !cir.int<u, 32>
!u64i = !cir.int<u, 64>
!u8i = !cir.int<u, 8>
!void = !cir.void
#fn_attr = #cir<extra({nothrow = #cir.nothrow})>
#fn_attr1 = #cir<extra({inline = #cir.inline<no>, nothrow = #cir.nothrow, optnone = #cir.optnone, uwtable = #cir.uwtable<async>})>
!ty_in_addr = !cir.record<struct "in_addr" {!u32i} #cir.record.decl.ast>
!ty_sockaddr = !cir.record<struct "sockaddr" {!u16i, !cir.array<!s8i x 14>} #cir.record.decl.ast>
!ty_sockaddr_in = !cir.record<struct "sockaddr_in" {!u16i, !u16i, !ty_in_addr, !cir.array<!u8i x 8>}>
module @"/workspaces/juliet-c/testcases/CWE510_Trapdoor/CWE510_Trapdoor__ip_based_logic_15.c" attributes {cir.lang = #cir.lang<c>, cir.sob = #cir.signed_overflow_behavior<undefined>, cir.triple = "x86_64-unknown-linux-gnu", cir.type_size_info = #cir.type_size_info<char = 8, int = 32, size_t = 64>, cir.uwtable = #cir.uwtable<async>, dlti.dl_spec = #dlti.dl_spec<i32 = dense<32> : vector<2xi64>, f16 = dense<16> : vector<2xi64>, f128 = dense<128> : vector<2xi64>, f64 = dense<64> : vector<2xi64>, !llvm.ptr = dense<64> : vector<4xi64>, i1 = dense<8> : vector<2xi64>, i16 = dense<16> : vector<2xi64>, i8 = dense<8> : vector<2xi64>, i128 = dense<128> : vector<2xi64>, f80 = dense<128> : vector<2xi64>, !llvm.ptr<271> = dense<32> : vector<4xi64>, !llvm.ptr<270> = dense<32> : vector<4xi64>, !llvm.ptr<272> = dense<64> : vector<4xi64>, i64 = dense<64> : vector<2xi64>, "dlti.mangling_mode" = "e", "dlti.endianness" = "little", "dlti.stack_alignment" = 128 : i64>} {
  cir.func private @socket(!s32i, !s32i, !s32i) -> !s32i extra(#fn_attr) loc(#loc393)
  cir.func private @htons(!u16i) -> !u16i extra(#fn_attr) loc(#loc394)
  cir.func private @bind(!s32i, !cir.ptr<!ty_sockaddr>, !u32i) -> !s32i extra(#fn_attr) loc(#loc395)
  cir.func private @listen(!s32i, !s32i) -> !s32i extra(#fn_attr) loc(#loc396)
  cir.func private @accept(!s32i, !cir.ptr<!ty_sockaddr>, !cir.ptr<!u32i>) -> !s32i loc(#loc397)
  cir.func private @getsockname(!s32i, !cir.ptr<!ty_sockaddr>, !cir.ptr<!u32i>) -> !s32i extra(#fn_attr) loc(#loc398)
  cir.func private @strcmp(!cir.ptr<!s8i>, !cir.ptr<!s8i>) -> !s32i extra(#fn_attr) loc(#loc399)
  cir.global "private" constant cir_private dsolocal @".str" = #cir.const_array<"192.168.30.123\00" : !cir.array<!s8i x 15>> : !cir.array<!s8i x 15> {alignment = 1 : i64} loc(#loc15)
  cir.func private @inet_ntoa(!ty_in_addr) -> !cir.ptr<!s8i> extra(#fn_attr) loc(#loc400)
  cir.func private @send(!s32i, !cir.ptr<!void>, !u64i, !s32i) -> !s64i loc(#loc401)
  cir.global "private" constant cir_private dsolocal @".str.1" = #cir.const_array<"Welcome, admin!\00" : !cir.array<!s8i x 16>> : !cir.array<!s8i x 16> {alignment = 1 : i64} loc(#loc20)
  cir.global "private" constant cir_private dsolocal @".str.2" = #cir.const_array<"Welcome!\00" : !cir.array<!s8i x 9>> : !cir.array<!s8i x 9> {alignment = 1 : i64} loc(#loc21)
  cir.func private @printLine(!cir.ptr<!s8i>) loc(#loc402)
  cir.global "private" constant cir_private dsolocal @".str.3" = #cir.const_array<"Send failed!\00" : !cir.array<!s8i x 13>> : !cir.array<!s8i x 13> {alignment = 1 : i64} loc(#loc24)
  cir.func private @close(!s32i) -> !s32i loc(#loc403)
  cir.global "private" constant cir_private dsolocal @".str.4" = #cir.const_array<"Benign, fixed string\00" : !cir.array<!s8i x 21>> : !cir.array<!s8i x 21> {alignment = 1 : i64} loc(#loc27)
  cir.func no_proto @CWE510_Trapdoor__ip_based_logic_15_bad() extra(#fn_attr1) {
    cir.scope {
      %0 = cir.const #cir.int<6> : !s32i loc(#loc32)
      cir.switch (%0 : !s32i) {
        cir.case(equal, [#cir.int<6> : !s32i]) {
          cir.scope {
            %1 = cir.alloca !ty_sockaddr_in, !cir.ptr<!ty_sockaddr_in>, ["service"] {alignment = 4 : i64} loc(#loc407)
            %2 = cir.alloca !ty_sockaddr_in, !cir.ptr<!ty_sockaddr_in>, ["acceptService"] {alignment = 4 : i64} loc(#loc408)
            %3 = cir.alloca !s32i, !cir.ptr<!s32i>, ["acceptServiceLen", init] {alignment = 4 : i64} loc(#loc409)
            %4 = cir.alloca !s32i, !cir.ptr<!s32i>, ["listenSocket", init] {alignment = 4 : i64} loc(#loc410)
            %5 = cir.alloca !s32i, !cir.ptr<!s32i>, ["acceptSocket", init] {alignment = 4 : i64} loc(#loc411)
            %6 = cir.const #cir.int<16> : !u64i loc(#loc412)
            %7 = cir.cast(integral, %6 : !u64i), !s32i loc(#loc412)
            cir.store %7, %3 : !s32i, !cir.ptr<!s32i> loc(#loc409)
            %8 = cir.const #cir.int<1> : !s32i loc(#loc42)
            %9 = cir.unary(minus, %8) nsw : !s32i, !s32i loc(#loc42)
            cir.store %9, %4 : !s32i, !cir.ptr<!s32i> loc(#loc410)
            %10 = cir.const #cir.int<1> : !s32i loc(#loc44)
            %11 = cir.unary(minus, %10) nsw : !s32i, !s32i loc(#loc44)
            cir.store %11, %5 : !s32i, !cir.ptr<!s32i> loc(#loc411)
            cir.scope {
              cir.do {
                cir.scope {
                  %12 = cir.const #cir.int<2> : !s32i loc(#loc50)
                  %13 = cir.const #cir.int<1> : !s32i loc(#loc51)
                  %14 = cir.const #cir.int<6> : !s32i loc(#loc52)
                  %15 = cir.call @socket(%12, %13, %14) : (!s32i, !s32i, !s32i) -> !s32i extra(#fn_attr) loc(#loc53)
                  cir.store %15, %4 : !s32i, !cir.ptr<!s32i> loc(#loc415)
                  cir.scope {
                    %34 = cir.load %4 : !cir.ptr<!s32i>, !s32i loc(#loc58)
                    %35 = cir.const #cir.int<1> : !s32i loc(#loc59)
                    %36 = cir.unary(minus, %35) nsw : !s32i, !s32i loc(#loc59)
                    %37 = cir.cmp(eq, %34, %36) : !s32i, !cir.bool loc(#loc417)
                    cir.if %37 {
                      cir.break loc(#loc61)
                    } loc(#loc418)
                  } loc(#loc416)
                  %16 = cir.cast(bitcast, %1 : !cir.ptr<!ty_sockaddr_in>), !cir.ptr<!void> loc(#loc419)
                  %17 = cir.const #cir.int<0> : !s32i loc(#loc64)
                  %18 = cir.const #cir.int<16> : !u64i loc(#loc420)
                  cir.libc.memset %18 bytes from %16 set to %17 : !cir.ptr<!void>, !s32i, !u64i loc(#loc421)
                  %19 = cir.const #cir.int<2> : !s32i loc(#loc69)
                  %20 = cir.cast(integral, %19 : !s32i), !u16i loc(#loc69)
                  %21 = cir.get_member %1[0] {name = "sin_family"} : !cir.ptr<!ty_sockaddr_in> -> !cir.ptr<!u16i> loc(#loc70)
                  cir.store %20, %21 : !u16i, !cir.ptr<!u16i> loc(#loc422)
                  %22 = cir.const #cir.int<0> : !s32i loc(#loc72)
                  %23 = cir.cast(integral, %22 : !s32i), !u32i loc(#loc72)
                  %24 = cir.get_member %1[2] {name = "sin_addr"} : !cir.ptr<!ty_sockaddr_in> -> !cir.ptr<!ty_in_addr> loc(#loc73)
                  %25 = cir.get_member %24[0] {name = "s_addr"} : !cir.ptr<!ty_in_addr> -> !cir.ptr<!u32i> loc(#loc74)
                  cir.store %23, %25 : !u32i, !cir.ptr<!u32i> loc(#loc423)
                  %26 = cir.const #cir.int<20000> : !s32i loc(#loc76)
                  %27 = cir.cast(integral, %26 : !s32i), !u16i loc(#loc76)
                  %28 = cir.call @htons(%27) : (!u16i) -> !u16i side_effect(const) extra(#fn_attr) loc(#loc77)
                  %29 = cir.get_member %1[1] {name = "sin_port"} : !cir.ptr<!ty_sockaddr_in> -> !cir.ptr<!u16i> loc(#loc78)
                  cir.store %28, %29 : !u16i, !cir.ptr<!u16i> loc(#loc424)
                  cir.scope {
                    %34 = cir.load %4 : !cir.ptr<!s32i>, !s32i loc(#loc83)
                    %35 = cir.cast(bitcast, %1 : !cir.ptr<!ty_sockaddr_in>), !cir.ptr<!ty_sockaddr> loc(#loc426)
                    %36 = cir.const #cir.int<16> : !u64i loc(#loc427)
                    %37 = cir.cast(integral, %36 : !u64i), !u32i loc(#loc427)
                    %38 = cir.call @bind(%34, %35, %37) : (!s32i, !cir.ptr<!ty_sockaddr>, !u32i) -> !s32i extra(#fn_attr) loc(#loc88)
                    %39 = cir.const #cir.int<1> : !s32i loc(#loc89)
                    %40 = cir.unary(minus, %39) nsw : !s32i, !s32i loc(#loc89)
                    %41 = cir.cmp(eq, %38, %40) : !s32i, !cir.bool loc(#loc428)
                    cir.if %41 {
                      cir.break loc(#loc91)
                    } loc(#loc429)
                  } loc(#loc425)
                  cir.scope {
                    %34 = cir.load %4 : !cir.ptr<!s32i>, !s32i loc(#loc94)
                    %35 = cir.const #cir.int<5> : !s32i loc(#loc95)
                    %36 = cir.call @listen(%34, %35) : (!s32i, !s32i) -> !s32i extra(#fn_attr) loc(#loc96)
                    %37 = cir.const #cir.int<1> : !s32i loc(#loc97)
                    %38 = cir.unary(minus, %37) nsw : !s32i, !s32i loc(#loc97)
                    %39 = cir.cmp(eq, %36, %38) : !s32i, !cir.bool loc(#loc431)
                    cir.if %39 {
                      cir.break loc(#loc99)
                    } loc(#loc432)
                  } loc(#loc430)
                  %30 = cir.load %4 : !cir.ptr<!s32i>, !s32i loc(#loc100)
                  %31 = cir.const #cir.ptr<null> : !cir.ptr<!ty_sockaddr> loc(#loc101)
                  %32 = cir.const #cir.ptr<null> : !cir.ptr<!u32i> loc(#loc102)
                  %33 = cir.call @accept(%30, %31, %32) : (!s32i, !cir.ptr<!ty_sockaddr>, !cir.ptr<!u32i>) -> !s32i loc(#loc103)
                  cir.store %33, %5 : !s32i, !cir.ptr<!s32i> loc(#loc433)
                  cir.scope {
                    %34 = cir.load %5 : !cir.ptr<!s32i>, !s32i loc(#loc108)
                    %35 = cir.const #cir.int<1> : !s32i loc(#loc109)
                    %36 = cir.unary(minus, %35) nsw : !s32i, !s32i loc(#loc109)
                    %37 = cir.cmp(eq, %34, %36) : !s32i, !cir.bool loc(#loc435)
                    cir.if %37 {
                      cir.break loc(#loc111)
                    } loc(#loc436)
                  } loc(#loc434)
                  cir.scope {
                    %34 = cir.load %5 : !cir.ptr<!s32i>, !s32i loc(#loc114)
                    %35 = cir.cast(bitcast, %2 : !cir.ptr<!ty_sockaddr_in>), !cir.ptr<!ty_sockaddr> loc(#loc438)
                    %36 = cir.cast(bitcast, %3 : !cir.ptr<!s32i>), !cir.ptr<!u32i> loc(#loc439)
                    %37 = cir.call @getsockname(%34, %35, %36) : (!s32i, !cir.ptr<!ty_sockaddr>, !cir.ptr<!u32i>) -> !s32i extra(#fn_attr) loc(#loc119)
                    %38 = cir.const #cir.int<1> : !s32i loc(#loc120)
                    %39 = cir.unary(minus, %38) nsw : !s32i, !s32i loc(#loc121)
                    %40 = cir.cmp(eq, %37, %39) : !s32i, !cir.bool loc(#loc440)
                    cir.if %40 {
                      cir.break loc(#loc123)
                    } loc(#loc441)
                  } loc(#loc437)
                  cir.scope {
                    %34 = cir.get_global @strcmp : !cir.ptr<!cir.func<(!cir.ptr<!s8i>, !cir.ptr<!s8i>) -> !s32i>> loc(#loc126)
                    %35 = cir.get_global @".str" : !cir.ptr<!cir.array<!s8i x 15>> loc(#loc15)
                    %36 = cir.cast(array_to_ptrdecay, %35 : !cir.ptr<!cir.array<!s8i x 15>>), !cir.ptr<!s8i> loc(#loc15)
                    %37 = cir.get_member %2[2] {name = "sin_addr"} : !cir.ptr<!ty_sockaddr_in> -> !cir.ptr<!ty_in_addr> loc(#loc73)
                    %38 = cir.load %37 : !cir.ptr<!ty_in_addr>, !ty_in_addr loc(#loc127)
                    %39 = cir.call @inet_ntoa(%38) : (!ty_in_addr) -> !cir.ptr<!s8i> extra(#fn_attr) loc(#loc127)
                    %40 = cir.call @strcmp(%36, %39) : (!cir.ptr<!s8i>, !cir.ptr<!s8i>) -> !s32i side_effect(pure) extra(#fn_attr) loc(#loc126)
                    %41 = cir.const #cir.int<0> : !s32i loc(#loc128)
                    %42 = cir.cmp(eq, %40, %41) : !s32i, !cir.bool loc(#loc443)
                    cir.if %42 {
                      cir.scope {
                        %43 = cir.load %5 : !cir.ptr<!s32i>, !s32i loc(#loc134)
                        %44 = cir.get_global @".str.1" : !cir.ptr<!cir.array<!s8i x 16>> loc(#loc20)
                        %45 = cir.cast(array_to_ptrdecay, %44 : !cir.ptr<!cir.array<!s8i x 16>>), !cir.ptr<!s8i> loc(#loc20)
                        %46 = cir.cast(bitcast, %45 : !cir.ptr<!s8i>), !cir.ptr<!void> loc(#loc20)
                        %47 = cir.const #cir.int<15> : !u64i loc(#loc446)
                        %48 = cir.const #cir.int<0> : !s32i loc(#loc137)
                        %49 = cir.call @send(%43, %46, %47, %48) : (!s32i, !cir.ptr<!void>, !u64i, !s32i) -> !s64i loc(#loc138)
                        %50 = cir.const #cir.int<1> : !s32i loc(#loc139)
                        %51 = cir.unary(minus, %50) nsw : !s32i, !s32i loc(#loc139)
                        %52 = cir.cast(integral, %51 : !s32i), !s64i loc(#loc139)
                        %53 = cir.cmp(eq, %49, %52) : !s64i, !cir.bool loc(#loc447)
                        cir.if %53 {
                          cir.break loc(#loc141)
                        } loc(#loc448)
                      } loc(#loc445)
                    } else {
                      cir.scope {
                        %43 = cir.load %5 : !cir.ptr<!s32i>, !s32i loc(#loc144)
                        %44 = cir.get_global @".str.2" : !cir.ptr<!cir.array<!s8i x 9>> loc(#loc21)
                        %45 = cir.cast(array_to_ptrdecay, %44 : !cir.ptr<!cir.array<!s8i x 9>>), !cir.ptr<!s8i> loc(#loc21)
                        %46 = cir.cast(bitcast, %45 : !cir.ptr<!s8i>), !cir.ptr<!void> loc(#loc21)
                        %47 = cir.const #cir.int<8> : !u64i loc(#loc450)
                        %48 = cir.const #cir.int<0> : !s32i loc(#loc147)
                        %49 = cir.call @send(%43, %46, %47, %48) : (!s32i, !cir.ptr<!void>, !u64i, !s32i) -> !s64i loc(#loc148)
                        %50 = cir.const #cir.int<1> : !s32i loc(#loc149)
                        %51 = cir.unary(minus, %50) nsw : !s32i, !s32i loc(#loc149)
                        %52 = cir.cast(integral, %51 : !s32i), !s64i loc(#loc149)
                        %53 = cir.cmp(eq, %49, %52) : !s64i, !cir.bool loc(#loc451)
                        cir.if %53 {
                          %54 = cir.get_global @".str.3" : !cir.ptr<!cir.array<!s8i x 13>> loc(#loc24)
                          %55 = cir.cast(array_to_ptrdecay, %54 : !cir.ptr<!cir.array<!s8i x 13>>), !cir.ptr<!s8i> loc(#loc24)
                          cir.call @printLine(%55) : (!cir.ptr<!s8i>) -> () loc(#loc151)
                        } loc(#loc452)
                      } loc(#loc449)
                    } loc(#loc444)
                  } loc(#loc442)
                } loc(#loc414)
                cir.yield loc(#loc47)
              } while {
                %12 = cir.const #cir.int<0> : !s32i loc(#loc152)
                %13 = cir.cast(int_to_bool, %12 : !s32i), !cir.bool loc(#loc152)
                cir.condition(%13) loc(#loc152)
              } loc(#loc413)
            } loc(#loc413)
            cir.scope {
              %12 = cir.load %4 : !cir.ptr<!s32i>, !s32i loc(#loc155)
              %13 = cir.const #cir.int<1> : !s32i loc(#loc156)
              %14 = cir.unary(minus, %13) nsw : !s32i, !s32i loc(#loc156)
              %15 = cir.cmp(ne, %12, %14) : !s32i, !cir.bool loc(#loc454)
              cir.if %15 {
                %16 = cir.load %4 : !cir.ptr<!s32i>, !s32i loc(#loc158)
                %17 = cir.call @close(%16) : (!s32i) -> !s32i loc(#loc159)
              } loc(#loc455)
            } loc(#loc453)
            cir.scope {
              %12 = cir.load %5 : !cir.ptr<!s32i>, !s32i loc(#loc162)
              %13 = cir.const #cir.int<1> : !s32i loc(#loc163)
              %14 = cir.unary(minus, %13) nsw : !s32i, !s32i loc(#loc163)
              %15 = cir.cmp(ne, %12, %14) : !s32i, !cir.bool loc(#loc457)
              cir.if %15 {
                %16 = cir.load %5 : !cir.ptr<!s32i>, !s32i loc(#loc165)
                %17 = cir.call @close(%16) : (!s32i) -> !s32i loc(#loc166)
              } loc(#loc458)
            } loc(#loc456)
          } loc(#loc406)
          cir.break loc(#loc167)
        } loc(#loc33)
        cir.case(default, []) {
          %1 = cir.get_global @".str.4" : !cir.ptr<!cir.array<!s8i x 21>> loc(#loc27)
          %2 = cir.cast(array_to_ptrdecay, %1 : !cir.ptr<!cir.array<!s8i x 21>>), !cir.ptr<!s8i> loc(#loc27)
          cir.call @printLine(%2) : (!cir.ptr<!s8i>) -> () loc(#loc169)
          cir.break loc(#loc170)
        } loc(#loc168)
        cir.yield loc(#loc30)
      } loc(#loc30)
    } loc(#loc405)
    cir.return loc(#loc29)
  } loc(#loc404)
  cir.func no_proto @CWE510_Trapdoor__ip_based_logic_15_good() extra(#fn_attr1) {
    %0 = cir.get_global @good1 : !cir.ptr<!cir.func<()>> loc(#loc460)
    cir.call %0() : (!cir.ptr<!cir.func<()>>) -> () loc(#loc173)
    %1 = cir.get_global @good2 : !cir.ptr<!cir.func<()>> loc(#loc461)
    cir.call %1() : (!cir.ptr<!cir.func<()>>) -> () loc(#loc175)
    cir.return loc(#loc172)
  } loc(#loc459)
  cir.func no_proto internal private @good1() extra(#fn_attr1) {
    cir.scope {
      %0 = cir.const #cir.int<5> : !s32i loc(#loc181)
      cir.switch (%0 : !s32i) {
        cir.case(equal, [#cir.int<6> : !s32i]) {
          %1 = cir.get_global @".str.4" : !cir.ptr<!cir.array<!s8i x 21>> loc(#loc183)
          %2 = cir.cast(array_to_ptrdecay, %1 : !cir.ptr<!cir.array<!s8i x 21>>), !cir.ptr<!s8i> loc(#loc183)
          cir.call @printLine(%2) : (!cir.ptr<!s8i>) -> () loc(#loc184)
          cir.break loc(#loc185)
        } loc(#loc182)
        cir.case(default, []) {
          cir.scope {
            %1 = cir.alloca !ty_sockaddr_in, !cir.ptr<!ty_sockaddr_in>, ["service"] {alignment = 4 : i64} loc(#loc465)
            %2 = cir.alloca !s32i, !cir.ptr<!s32i>, ["listenSocket", init] {alignment = 4 : i64} loc(#loc466)
            %3 = cir.alloca !s32i, !cir.ptr<!s32i>, ["acceptSocket", init] {alignment = 4 : i64} loc(#loc467)
            %4 = cir.const #cir.int<1> : !s32i loc(#loc192)
            %5 = cir.unary(minus, %4) nsw : !s32i, !s32i loc(#loc192)
            cir.store %5, %2 : !s32i, !cir.ptr<!s32i> loc(#loc466)
            %6 = cir.const #cir.int<1> : !s32i loc(#loc194)
            %7 = cir.unary(minus, %6) nsw : !s32i, !s32i loc(#loc194)
            cir.store %7, %3 : !s32i, !cir.ptr<!s32i> loc(#loc467)
            cir.scope {
              cir.do {
                cir.scope {
                  %8 = cir.const #cir.int<2> : !s32i loc(#loc199)
                  %9 = cir.const #cir.int<1> : !s32i loc(#loc200)
                  %10 = cir.const #cir.int<6> : !s32i loc(#loc201)
                  %11 = cir.call @socket(%8, %9, %10) : (!s32i, !s32i, !s32i) -> !s32i extra(#fn_attr) loc(#loc202)
                  cir.store %11, %2 : !s32i, !cir.ptr<!s32i> loc(#loc470)
                  cir.scope {
                    %30 = cir.load %2 : !cir.ptr<!s32i>, !s32i loc(#loc207)
                    %31 = cir.const #cir.int<1> : !s32i loc(#loc208)
                    %32 = cir.unary(minus, %31) nsw : !s32i, !s32i loc(#loc208)
                    %33 = cir.cmp(eq, %30, %32) : !s32i, !cir.bool loc(#loc472)
                    cir.if %33 {
                      cir.break loc(#loc210)
                    } loc(#loc473)
                  } loc(#loc471)
                  %12 = cir.cast(bitcast, %1 : !cir.ptr<!ty_sockaddr_in>), !cir.ptr<!void> loc(#loc474)
                  %13 = cir.const #cir.int<0> : !s32i loc(#loc213)
                  %14 = cir.const #cir.int<16> : !u64i loc(#loc475)
                  cir.libc.memset %14 bytes from %12 set to %13 : !cir.ptr<!void>, !s32i, !u64i loc(#loc476)
                  %15 = cir.const #cir.int<2> : !s32i loc(#loc218)
                  %16 = cir.cast(integral, %15 : !s32i), !u16i loc(#loc218)
                  %17 = cir.get_member %1[0] {name = "sin_family"} : !cir.ptr<!ty_sockaddr_in> -> !cir.ptr<!u16i> loc(#loc70)
                  cir.store %16, %17 : !u16i, !cir.ptr<!u16i> loc(#loc477)
                  %18 = cir.const #cir.int<0> : !s32i loc(#loc220)
                  %19 = cir.cast(integral, %18 : !s32i), !u32i loc(#loc220)
                  %20 = cir.get_member %1[2] {name = "sin_addr"} : !cir.ptr<!ty_sockaddr_in> -> !cir.ptr<!ty_in_addr> loc(#loc73)
                  %21 = cir.get_member %20[0] {name = "s_addr"} : !cir.ptr<!ty_in_addr> -> !cir.ptr<!u32i> loc(#loc74)
                  cir.store %19, %21 : !u32i, !cir.ptr<!u32i> loc(#loc478)
                  %22 = cir.const #cir.int<20000> : !s32i loc(#loc222)
                  %23 = cir.cast(integral, %22 : !s32i), !u16i loc(#loc222)
                  %24 = cir.call @htons(%23) : (!u16i) -> !u16i side_effect(const) extra(#fn_attr) loc(#loc223)
                  %25 = cir.get_member %1[1] {name = "sin_port"} : !cir.ptr<!ty_sockaddr_in> -> !cir.ptr<!u16i> loc(#loc78)
                  cir.store %24, %25 : !u16i, !cir.ptr<!u16i> loc(#loc479)
                  cir.scope {
                    %30 = cir.load %2 : !cir.ptr<!s32i>, !s32i loc(#loc228)
                    %31 = cir.cast(bitcast, %1 : !cir.ptr<!ty_sockaddr_in>), !cir.ptr<!ty_sockaddr> loc(#loc481)
                    %32 = cir.const #cir.int<16> : !u64i loc(#loc482)
                    %33 = cir.cast(integral, %32 : !u64i), !u32i loc(#loc482)
                    %34 = cir.call @bind(%30, %31, %33) : (!s32i, !cir.ptr<!ty_sockaddr>, !u32i) -> !s32i extra(#fn_attr) loc(#loc233)
                    %35 = cir.const #cir.int<1> : !s32i loc(#loc234)
                    %36 = cir.unary(minus, %35) nsw : !s32i, !s32i loc(#loc234)
                    %37 = cir.cmp(eq, %34, %36) : !s32i, !cir.bool loc(#loc483)
                    cir.if %37 {
                      cir.break loc(#loc236)
                    } loc(#loc484)
                  } loc(#loc480)
                  cir.scope {
                    %30 = cir.load %2 : !cir.ptr<!s32i>, !s32i loc(#loc239)
                    %31 = cir.const #cir.int<5> : !s32i loc(#loc240)
                    %32 = cir.call @listen(%30, %31) : (!s32i, !s32i) -> !s32i extra(#fn_attr) loc(#loc241)
                    %33 = cir.const #cir.int<1> : !s32i loc(#loc242)
                    %34 = cir.unary(minus, %33) nsw : !s32i, !s32i loc(#loc242)
                    %35 = cir.cmp(eq, %32, %34) : !s32i, !cir.bool loc(#loc486)
                    cir.if %35 {
                      cir.break loc(#loc244)
                    } loc(#loc487)
                  } loc(#loc485)
                  %26 = cir.load %2 : !cir.ptr<!s32i>, !s32i loc(#loc245)
                  %27 = cir.const #cir.ptr<null> : !cir.ptr<!ty_sockaddr> loc(#loc246)
                  %28 = cir.const #cir.ptr<null> : !cir.ptr<!u32i> loc(#loc247)
                  %29 = cir.call @accept(%26, %27, %28) : (!s32i, !cir.ptr<!ty_sockaddr>, !cir.ptr<!u32i>) -> !s32i loc(#loc248)
                  cir.store %29, %3 : !s32i, !cir.ptr<!s32i> loc(#loc488)
                  cir.scope {
                    %30 = cir.load %3 : !cir.ptr<!s32i>, !s32i loc(#loc253)
                    %31 = cir.const #cir.int<1> : !s32i loc(#loc254)
                    %32 = cir.unary(minus, %31) nsw : !s32i, !s32i loc(#loc254)
                    %33 = cir.cmp(eq, %30, %32) : !s32i, !cir.bool loc(#loc490)
                    cir.if %33 {
                      cir.break loc(#loc256)
                    } loc(#loc491)
                  } loc(#loc489)
                  cir.scope {
                    %30 = cir.load %3 : !cir.ptr<!s32i>, !s32i loc(#loc259)
                    %31 = cir.get_global @".str.2" : !cir.ptr<!cir.array<!s8i x 9>> loc(#loc260)
                    %32 = cir.cast(array_to_ptrdecay, %31 : !cir.ptr<!cir.array<!s8i x 9>>), !cir.ptr<!s8i> loc(#loc260)
                    %33 = cir.cast(bitcast, %32 : !cir.ptr<!s8i>), !cir.ptr<!void> loc(#loc260)
                    %34 = cir.const #cir.int<8> : !u64i loc(#loc493)
                    %35 = cir.const #cir.int<0> : !s32i loc(#loc263)
                    %36 = cir.call @send(%30, %33, %34, %35) : (!s32i, !cir.ptr<!void>, !u64i, !s32i) -> !s64i loc(#loc264)
                    %37 = cir.const #cir.int<1> : !s32i loc(#loc265)
                    %38 = cir.unary(minus, %37) nsw : !s32i, !s32i loc(#loc265)
                    %39 = cir.cast(integral, %38 : !s32i), !s64i loc(#loc265)
                    %40 = cir.cmp(eq, %36, %39) : !s64i, !cir.bool loc(#loc494)
                    cir.if %40 {
                      %41 = cir.get_global @".str.3" : !cir.ptr<!cir.array<!s8i x 13>> loc(#loc267)
                      %42 = cir.cast(array_to_ptrdecay, %41 : !cir.ptr<!cir.array<!s8i x 13>>), !cir.ptr<!s8i> loc(#loc267)
                      cir.call @printLine(%42) : (!cir.ptr<!s8i>) -> () loc(#loc268)
                    } loc(#loc495)
                  } loc(#loc492)
                } loc(#loc469)
                cir.yield loc(#loc196)
              } while {
                %8 = cir.const #cir.int<0> : !s32i loc(#loc269)
                %9 = cir.cast(int_to_bool, %8 : !s32i), !cir.bool loc(#loc269)
                cir.condition(%9) loc(#loc269)
              } loc(#loc468)
            } loc(#loc468)
            cir.scope {
              %8 = cir.load %2 : !cir.ptr<!s32i>, !s32i loc(#loc272)
              %9 = cir.const #cir.int<1> : !s32i loc(#loc273)
              %10 = cir.unary(minus, %9) nsw : !s32i, !s32i loc(#loc273)
              %11 = cir.cmp(ne, %8, %10) : !s32i, !cir.bool loc(#loc497)
              cir.if %11 {
                %12 = cir.load %2 : !cir.ptr<!s32i>, !s32i loc(#loc275)
                %13 = cir.call @close(%12) : (!s32i) -> !s32i loc(#loc276)
              } loc(#loc498)
            } loc(#loc496)
            cir.scope {
              %8 = cir.load %3 : !cir.ptr<!s32i>, !s32i loc(#loc279)
              %9 = cir.const #cir.int<1> : !s32i loc(#loc280)
              %10 = cir.unary(minus, %9) nsw : !s32i, !s32i loc(#loc280)
              %11 = cir.cmp(ne, %8, %10) : !s32i, !cir.bool loc(#loc500)
              cir.if %11 {
                %12 = cir.load %3 : !cir.ptr<!s32i>, !s32i loc(#loc282)
                %13 = cir.call @close(%12) : (!s32i) -> !s32i loc(#loc283)
              } loc(#loc501)
            } loc(#loc499)
          } loc(#loc464)
          cir.break loc(#loc284)
        } loc(#loc186)
        cir.yield loc(#loc179)
      } loc(#loc179)
    } loc(#loc463)
    cir.return loc(#loc178)
  } loc(#loc462)
  cir.func no_proto internal private @good2() extra(#fn_attr1) {
    cir.scope {
      %0 = cir.const #cir.int<6> : !s32i loc(#loc289)
      cir.switch (%0 : !s32i) {
        cir.case(equal, [#cir.int<6> : !s32i]) {
          cir.scope {
            %1 = cir.alloca !ty_sockaddr_in, !cir.ptr<!ty_sockaddr_in>, ["service"] {alignment = 4 : i64} loc(#loc505)
            %2 = cir.alloca !s32i, !cir.ptr<!s32i>, ["listenSocket", init] {alignment = 4 : i64} loc(#loc506)
            %3 = cir.alloca !s32i, !cir.ptr<!s32i>, ["acceptSocket", init] {alignment = 4 : i64} loc(#loc507)
            %4 = cir.const #cir.int<1> : !s32i loc(#loc296)
            %5 = cir.unary(minus, %4) nsw : !s32i, !s32i loc(#loc296)
            cir.store %5, %2 : !s32i, !cir.ptr<!s32i> loc(#loc506)
            %6 = cir.const #cir.int<1> : !s32i loc(#loc298)
            %7 = cir.unary(minus, %6) nsw : !s32i, !s32i loc(#loc298)
            cir.store %7, %3 : !s32i, !cir.ptr<!s32i> loc(#loc507)
            cir.scope {
              cir.do {
                cir.scope {
                  %8 = cir.const #cir.int<2> : !s32i loc(#loc303)
                  %9 = cir.const #cir.int<1> : !s32i loc(#loc304)
                  %10 = cir.const #cir.int<6> : !s32i loc(#loc305)
                  %11 = cir.call @socket(%8, %9, %10) : (!s32i, !s32i, !s32i) -> !s32i extra(#fn_attr) loc(#loc306)
                  cir.store %11, %2 : !s32i, !cir.ptr<!s32i> loc(#loc510)
                  cir.scope {
                    %30 = cir.load %2 : !cir.ptr<!s32i>, !s32i loc(#loc311)
                    %31 = cir.const #cir.int<1> : !s32i loc(#loc312)
                    %32 = cir.unary(minus, %31) nsw : !s32i, !s32i loc(#loc312)
                    %33 = cir.cmp(eq, %30, %32) : !s32i, !cir.bool loc(#loc512)
                    cir.if %33 {
                      cir.break loc(#loc314)
                    } loc(#loc513)
                  } loc(#loc511)
                  %12 = cir.cast(bitcast, %1 : !cir.ptr<!ty_sockaddr_in>), !cir.ptr<!void> loc(#loc514)
                  %13 = cir.const #cir.int<0> : !s32i loc(#loc317)
                  %14 = cir.const #cir.int<16> : !u64i loc(#loc515)
                  cir.libc.memset %14 bytes from %12 set to %13 : !cir.ptr<!void>, !s32i, !u64i loc(#loc516)
                  %15 = cir.const #cir.int<2> : !s32i loc(#loc322)
                  %16 = cir.cast(integral, %15 : !s32i), !u16i loc(#loc322)
                  %17 = cir.get_member %1[0] {name = "sin_family"} : !cir.ptr<!ty_sockaddr_in> -> !cir.ptr<!u16i> loc(#loc70)
                  cir.store %16, %17 : !u16i, !cir.ptr<!u16i> loc(#loc517)
                  %18 = cir.const #cir.int<0> : !s32i loc(#loc324)
                  %19 = cir.cast(integral, %18 : !s32i), !u32i loc(#loc324)
                  %20 = cir.get_member %1[2] {name = "sin_addr"} : !cir.ptr<!ty_sockaddr_in> -> !cir.ptr<!ty_in_addr> loc(#loc73)
                  %21 = cir.get_member %20[0] {name = "s_addr"} : !cir.ptr<!ty_in_addr> -> !cir.ptr<!u32i> loc(#loc74)
                  cir.store %19, %21 : !u32i, !cir.ptr<!u32i> loc(#loc518)
                  %22 = cir.const #cir.int<20000> : !s32i loc(#loc326)
                  %23 = cir.cast(integral, %22 : !s32i), !u16i loc(#loc326)
                  %24 = cir.call @htons(%23) : (!u16i) -> !u16i side_effect(const) extra(#fn_attr) loc(#loc327)
                  %25 = cir.get_member %1[1] {name = "sin_port"} : !cir.ptr<!ty_sockaddr_in> -> !cir.ptr<!u16i> loc(#loc78)
                  cir.store %24, %25 : !u16i, !cir.ptr<!u16i> loc(#loc519)
                  cir.scope {
                    %30 = cir.load %2 : !cir.ptr<!s32i>, !s32i loc(#loc332)
                    %31 = cir.cast(bitcast, %1 : !cir.ptr<!ty_sockaddr_in>), !cir.ptr<!ty_sockaddr> loc(#loc521)
                    %32 = cir.const #cir.int<16> : !u64i loc(#loc522)
                    %33 = cir.cast(integral, %32 : !u64i), !u32i loc(#loc522)
                    %34 = cir.call @bind(%30, %31, %33) : (!s32i, !cir.ptr<!ty_sockaddr>, !u32i) -> !s32i extra(#fn_attr) loc(#loc337)
                    %35 = cir.const #cir.int<1> : !s32i loc(#loc338)
                    %36 = cir.unary(minus, %35) nsw : !s32i, !s32i loc(#loc338)
                    %37 = cir.cmp(eq, %34, %36) : !s32i, !cir.bool loc(#loc523)
                    cir.if %37 {
                      cir.break loc(#loc340)
                    } loc(#loc524)
                  } loc(#loc520)
                  cir.scope {
                    %30 = cir.load %2 : !cir.ptr<!s32i>, !s32i loc(#loc343)
                    %31 = cir.const #cir.int<5> : !s32i loc(#loc344)
                    %32 = cir.call @listen(%30, %31) : (!s32i, !s32i) -> !s32i extra(#fn_attr) loc(#loc345)
                    %33 = cir.const #cir.int<1> : !s32i loc(#loc346)
                    %34 = cir.unary(minus, %33) nsw : !s32i, !s32i loc(#loc346)
                    %35 = cir.cmp(eq, %32, %34) : !s32i, !cir.bool loc(#loc526)
                    cir.if %35 {
                      cir.break loc(#loc348)
                    } loc(#loc527)
                  } loc(#loc525)
                  %26 = cir.load %2 : !cir.ptr<!s32i>, !s32i loc(#loc349)
                  %27 = cir.const #cir.ptr<null> : !cir.ptr<!ty_sockaddr> loc(#loc350)
                  %28 = cir.const #cir.ptr<null> : !cir.ptr<!u32i> loc(#loc351)
                  %29 = cir.call @accept(%26, %27, %28) : (!s32i, !cir.ptr<!ty_sockaddr>, !cir.ptr<!u32i>) -> !s32i loc(#loc352)
                  cir.store %29, %3 : !s32i, !cir.ptr<!s32i> loc(#loc528)
                  cir.scope {
                    %30 = cir.load %3 : !cir.ptr<!s32i>, !s32i loc(#loc357)
                    %31 = cir.const #cir.int<1> : !s32i loc(#loc358)
                    %32 = cir.unary(minus, %31) nsw : !s32i, !s32i loc(#loc358)
                    %33 = cir.cmp(eq, %30, %32) : !s32i, !cir.bool loc(#loc530)
                    cir.if %33 {
                      cir.break loc(#loc360)
                    } loc(#loc531)
                  } loc(#loc529)
                  cir.scope {
                    %30 = cir.load %3 : !cir.ptr<!s32i>, !s32i loc(#loc363)
                    %31 = cir.get_global @".str.2" : !cir.ptr<!cir.array<!s8i x 9>> loc(#loc364)
                    %32 = cir.cast(array_to_ptrdecay, %31 : !cir.ptr<!cir.array<!s8i x 9>>), !cir.ptr<!s8i> loc(#loc364)
                    %33 = cir.cast(bitcast, %32 : !cir.ptr<!s8i>), !cir.ptr<!void> loc(#loc364)
                    %34 = cir.const #cir.int<8> : !u64i loc(#loc533)
                    %35 = cir.const #cir.int<0> : !s32i loc(#loc367)
                    %36 = cir.call @send(%30, %33, %34, %35) : (!s32i, !cir.ptr<!void>, !u64i, !s32i) -> !s64i loc(#loc368)
                    %37 = cir.const #cir.int<1> : !s32i loc(#loc369)
                    %38 = cir.unary(minus, %37) nsw : !s32i, !s32i loc(#loc369)
                    %39 = cir.cast(integral, %38 : !s32i), !s64i loc(#loc369)
                    %40 = cir.cmp(eq, %36, %39) : !s64i, !cir.bool loc(#loc534)
                    cir.if %40 {
                      %41 = cir.get_global @".str.3" : !cir.ptr<!cir.array<!s8i x 13>> loc(#loc371)
                      %42 = cir.cast(array_to_ptrdecay, %41 : !cir.ptr<!cir.array<!s8i x 13>>), !cir.ptr<!s8i> loc(#loc371)
                      cir.call @printLine(%42) : (!cir.ptr<!s8i>) -> () loc(#loc372)
                    } loc(#loc535)
                  } loc(#loc532)
                } loc(#loc509)
                cir.yield loc(#loc300)
              } while {
                %8 = cir.const #cir.int<0> : !s32i loc(#loc373)
                %9 = cir.cast(int_to_bool, %8 : !s32i), !cir.bool loc(#loc373)
                cir.condition(%9) loc(#loc373)
              } loc(#loc508)
            } loc(#loc508)
            cir.scope {
              %8 = cir.load %2 : !cir.ptr<!s32i>, !s32i loc(#loc376)
              %9 = cir.const #cir.int<1> : !s32i loc(#loc377)
              %10 = cir.unary(minus, %9) nsw : !s32i, !s32i loc(#loc377)
              %11 = cir.cmp(ne, %8, %10) : !s32i, !cir.bool loc(#loc537)
              cir.if %11 {
                %12 = cir.load %2 : !cir.ptr<!s32i>, !s32i loc(#loc379)
                %13 = cir.call @close(%12) : (!s32i) -> !s32i loc(#loc380)
              } loc(#loc538)
            } loc(#loc536)
            cir.scope {
              %8 = cir.load %3 : !cir.ptr<!s32i>, !s32i loc(#loc383)
              %9 = cir.const #cir.int<1> : !s32i loc(#loc384)
              %10 = cir.unary(minus, %9) nsw : !s32i, !s32i loc(#loc384)
              %11 = cir.cmp(ne, %8, %10) : !s32i, !cir.bool loc(#loc540)
              cir.if %11 {
                %12 = cir.load %3 : !cir.ptr<!s32i>, !s32i loc(#loc386)
                %13 = cir.call @close(%12) : (!s32i) -> !s32i loc(#loc387)
              } loc(#loc541)
            } loc(#loc539)
          } loc(#loc504)
          cir.break loc(#loc388)
        } loc(#loc290)
        cir.case(default, []) {
          %1 = cir.get_global @".str.4" : !cir.ptr<!cir.array<!s8i x 21>> loc(#loc390)
          %2 = cir.cast(array_to_ptrdecay, %1 : !cir.ptr<!cir.array<!s8i x 21>>), !cir.ptr<!s8i> loc(#loc390)
          cir.call @printLine(%2) : (!cir.ptr<!s8i>) -> () loc(#loc391)
          cir.break loc(#loc392)
        } loc(#loc389)
        cir.yield loc(#loc287)
      } loc(#loc287)
    } loc(#loc503)
    cir.return loc(#loc286)
  } loc(#loc502)
} loc(#loc)
#loc = loc("/workspaces/juliet-c/testcases/CWE510_Trapdoor/CWE510_Trapdoor__ip_based_logic_15.c":0:0)
#loc1 = loc("/usr/include/x86_64-linux-gnu/sys/socket.h":102:1)
#loc2 = loc("/usr/include/x86_64-linux-gnu/sys/socket.h":102:62)
#loc3 = loc("/usr/include/netinet/in.h":402:1)
#loc4 = loc("/usr/include/netinet/in.h":403:40)
#loc5 = loc("/usr/include/x86_64-linux-gnu/sys/socket.h":112:1)
#loc6 = loc("/usr/include/x86_64-linux-gnu/sys/socket.h":113:6)
#loc7 = loc("/usr/include/x86_64-linux-gnu/sys/socket.h":296:1)
#loc8 = loc("/usr/include/x86_64-linux-gnu/sys/socket.h":296:39)
#loc9 = loc("/usr/include/x86_64-linux-gnu/sys/socket.h":306:1)
#loc10 = loc("/usr/include/x86_64-linux-gnu/sys/socket.h":307:38)
#loc11 = loc("/usr/include/x86_64-linux-gnu/sys/socket.h":116:1)
#loc12 = loc("/usr/include/x86_64-linux-gnu/sys/socket.h":117:33)
#loc13 = loc("/usr/include/string.h":156:1)
#loc14 = loc("/usr/include/string.h":157:33)
#loc15 = loc("CWE510_Trapdoor__ip_based_logic_15.c":91:24)
#loc16 = loc("/usr/include/arpa/inet.h":53:1)
#loc17 = loc("/usr/include/arpa/inet.h":53:46)
#loc18 = loc("/usr/include/x86_64-linux-gnu/sys/socket.h":138:1)
#loc19 = loc("/usr/include/x86_64-linux-gnu/sys/socket.h":138:74)
#loc20 = loc("CWE510_Trapdoor__ip_based_logic_15.c":93:40)
#loc21 = loc("CWE510_Trapdoor__ip_based_logic_15.c":101:40)
#loc22 = loc("../../testcasesupport/std_testcase_io.h":14:1)
#loc23 = loc("../../testcasesupport/std_testcase_io.h":14:33)
#loc24 = loc("CWE510_Trapdoor__ip_based_logic_15.c":103:31)
#loc25 = loc("/usr/include/unistd.h":358:1)
#loc26 = loc("/usr/include/unistd.h":358:27)
#loc27 = loc("CWE510_Trapdoor__ip_based_logic_15.c":126:19)
#loc28 = loc("CWE510_Trapdoor__ip_based_logic_15.c":41:1)
#loc29 = loc("CWE510_Trapdoor__ip_based_logic_15.c":129:1)
#loc30 = loc("CWE510_Trapdoor__ip_based_logic_15.c":43:5)
#loc31 = loc("CWE510_Trapdoor__ip_based_logic_15.c":128:5)
#loc32 = loc("CWE510_Trapdoor__ip_based_logic_15.c":43:12)
#loc33 = loc("CWE510_Trapdoor__ip_based_logic_15.c":45:5)
#loc34 = loc("CWE510_Trapdoor__ip_based_logic_15.c":46:5)
#loc35 = loc("CWE510_Trapdoor__ip_based_logic_15.c":122:5)
#loc36 = loc("CWE510_Trapdoor__ip_based_logic_15.c":51:9)
#loc37 = loc("CWE510_Trapdoor__ip_based_logic_15.c":51:28)
#loc38 = loc("CWE510_Trapdoor__ip_based_logic_15.c":51:37)
#loc39 = loc("CWE510_Trapdoor__ip_based_logic_15.c":52:9)
#loc40 = loc("CWE510_Trapdoor__ip_based_logic_15.c":52:52)
#loc41 = loc("CWE510_Trapdoor__ip_based_logic_15.c":53:9)
#loc42 = loc("CWE510_Trapdoor__ip_based_logic_15.c":53:31)
#loc43 = loc("CWE510_Trapdoor__ip_based_logic_15.c":54:9)
#loc44 = loc("CWE510_Trapdoor__ip_based_logic_15.c":54:31)
#loc45 = loc("CWE510_Trapdoor__ip_based_logic_15.c":52:32)
#loc46 = loc("CWE510_Trapdoor__ip_based_logic_15.c":55:9)
#loc47 = loc("CWE510_Trapdoor__ip_based_logic_15.c":107:17)
#loc48 = loc("CWE510_Trapdoor__ip_based_logic_15.c":56:9)
#loc49 = loc("CWE510_Trapdoor__ip_based_logic_15.c":106:9)
#loc50 = loc("CWE510_Trapdoor__ip_based_logic_15.c":64:35)
#loc51 = loc("CWE510_Trapdoor__ip_based_logic_15.c":64:44)
#loc52 = loc("CWE510_Trapdoor__ip_based_logic_15.c":64:57)
#loc53 = loc("CWE510_Trapdoor__ip_based_logic_15.c":64:28)
#loc54 = loc("CWE510_Trapdoor__ip_based_logic_15.c":64:13)
#loc55 = loc("CWE510_Trapdoor__ip_based_logic_15.c":64:68)
#loc56 = loc("CWE510_Trapdoor__ip_based_logic_15.c":65:13)
#loc57 = loc("CWE510_Trapdoor__ip_based_logic_15.c":68:13)
#loc58 = loc("CWE510_Trapdoor__ip_based_logic_15.c":65:17)
#loc59 = loc("CWE510_Trapdoor__ip_based_logic_15.c":65:33)
#loc60 = loc("CWE510_Trapdoor__ip_based_logic_15.c":66:13)
#loc61 = loc("CWE510_Trapdoor__ip_based_logic_15.c":67:17)
#loc62 = loc("CWE510_Trapdoor__ip_based_logic_15.c":69:20)
#loc63 = loc("CWE510_Trapdoor__ip_based_logic_15.c":69:21)
#loc64 = loc("CWE510_Trapdoor__ip_based_logic_15.c":69:30)
#loc65 = loc("CWE510_Trapdoor__ip_based_logic_15.c":69:33)
#loc66 = loc("CWE510_Trapdoor__ip_based_logic_15.c":69:47)
#loc67 = loc("CWE510_Trapdoor__ip_based_logic_15.c":69:13)
#loc68 = loc("CWE510_Trapdoor__ip_based_logic_15.c":69:48)
#loc69 = loc("CWE510_Trapdoor__ip_based_logic_15.c":70:34)
#loc70 = loc("/usr/include/netinet/in.h":249:5)
#loc71 = loc("CWE510_Trapdoor__ip_based_logic_15.c":70:13)
#loc72 = loc("CWE510_Trapdoor__ip_based_logic_15.c":71:39)
#loc73 = loc("/usr/include/netinet/in.h":251:20)
#loc74 = loc("/usr/include/netinet/in.h":33:15)
#loc75 = loc("CWE510_Trapdoor__ip_based_logic_15.c":71:13)
#loc76 = loc("CWE510_Trapdoor__ip_based_logic_15.c":72:38)
#loc77 = loc("CWE510_Trapdoor__ip_based_logic_15.c":72:32)
#loc78 = loc("/usr/include/netinet/in.h":250:15)
#loc79 = loc("CWE510_Trapdoor__ip_based_logic_15.c":72:13)
#loc80 = loc("CWE510_Trapdoor__ip_based_logic_15.c":72:43)
#loc81 = loc("CWE510_Trapdoor__ip_based_logic_15.c":73:13)
#loc82 = loc("CWE510_Trapdoor__ip_based_logic_15.c":76:13)
#loc83 = loc("CWE510_Trapdoor__ip_based_logic_15.c":73:22)
#loc84 = loc("CWE510_Trapdoor__ip_based_logic_15.c":73:54)
#loc85 = loc("CWE510_Trapdoor__ip_based_logic_15.c":73:55)
#loc86 = loc("CWE510_Trapdoor__ip_based_logic_15.c":73:64)
#loc87 = loc("CWE510_Trapdoor__ip_based_logic_15.c":73:78)
#loc88 = loc("CWE510_Trapdoor__ip_based_logic_15.c":73:17)
#loc89 = loc("CWE510_Trapdoor__ip_based_logic_15.c":73:84)
#loc90 = loc("CWE510_Trapdoor__ip_based_logic_15.c":74:13)
#loc91 = loc("CWE510_Trapdoor__ip_based_logic_15.c":75:17)
#loc92 = loc("CWE510_Trapdoor__ip_based_logic_15.c":77:13)
#loc93 = loc("CWE510_Trapdoor__ip_based_logic_15.c":80:13)
#loc94 = loc("CWE510_Trapdoor__ip_based_logic_15.c":77:24)
#loc95 = loc("CWE510_Trapdoor__ip_based_logic_15.c":77:38)
#loc96 = loc("CWE510_Trapdoor__ip_based_logic_15.c":77:17)
#loc97 = loc("CWE510_Trapdoor__ip_based_logic_15.c":77:44)
#loc98 = loc("CWE510_Trapdoor__ip_based_logic_15.c":78:13)
#loc99 = loc("CWE510_Trapdoor__ip_based_logic_15.c":79:17)
#loc100 = loc("CWE510_Trapdoor__ip_based_logic_15.c":81:35)
#loc101 = loc("CWE510_Trapdoor__ip_based_logic_15.c":81:49)
#loc102 = loc("CWE510_Trapdoor__ip_based_logic_15.c":81:55)
#loc103 = loc("CWE510_Trapdoor__ip_based_logic_15.c":81:28)
#loc104 = loc("CWE510_Trapdoor__ip_based_logic_15.c":81:13)
#loc105 = loc("CWE510_Trapdoor__ip_based_logic_15.c":81:59)
#loc106 = loc("CWE510_Trapdoor__ip_based_logic_15.c":82:13)
#loc107 = loc("CWE510_Trapdoor__ip_based_logic_15.c":85:13)
#loc108 = loc("CWE510_Trapdoor__ip_based_logic_15.c":82:17)
#loc109 = loc("CWE510_Trapdoor__ip_based_logic_15.c":82:33)
#loc110 = loc("CWE510_Trapdoor__ip_based_logic_15.c":83:13)
#loc111 = loc("CWE510_Trapdoor__ip_based_logic_15.c":84:17)
#loc112 = loc("CWE510_Trapdoor__ip_based_logic_15.c":86:13)
#loc113 = loc("CWE510_Trapdoor__ip_based_logic_15.c":89:13)
#loc114 = loc("CWE510_Trapdoor__ip_based_logic_15.c":86:29)
#loc115 = loc("CWE510_Trapdoor__ip_based_logic_15.c":86:62)
#loc116 = loc("CWE510_Trapdoor__ip_based_logic_15.c":86:63)
#loc117 = loc("CWE510_Trapdoor__ip_based_logic_15.c":86:78)
#loc118 = loc("CWE510_Trapdoor__ip_based_logic_15.c":86:79)
#loc119 = loc("CWE510_Trapdoor__ip_based_logic_15.c":86:17)
#loc120 = loc("CWE510_Trapdoor__ip_based_logic_15.c":86:101)
#loc121 = loc("CWE510_Trapdoor__ip_based_logic_15.c":86:100)
#loc122 = loc("CWE510_Trapdoor__ip_based_logic_15.c":87:13)
#loc123 = loc("CWE510_Trapdoor__ip_based_logic_15.c":88:17)
#loc124 = loc("CWE510_Trapdoor__ip_based_logic_15.c":91:13)
#loc125 = loc("CWE510_Trapdoor__ip_based_logic_15.c":105:13)
#loc126 = loc("CWE510_Trapdoor__ip_based_logic_15.c":91:17)
#loc127 = loc("CWE510_Trapdoor__ip_based_logic_15.c":91:42)
#loc128 = loc("CWE510_Trapdoor__ip_based_logic_15.c":91:80)
#loc129 = loc("CWE510_Trapdoor__ip_based_logic_15.c":92:13)
#loc130 = loc("CWE510_Trapdoor__ip_based_logic_15.c":98:13)
#loc131 = loc("CWE510_Trapdoor__ip_based_logic_15.c":100:13)
#loc132 = loc("CWE510_Trapdoor__ip_based_logic_15.c":93:17)
#loc133 = loc("CWE510_Trapdoor__ip_based_logic_15.c":97:17)
#loc134 = loc("CWE510_Trapdoor__ip_based_logic_15.c":93:26)
#loc135 = loc("CWE510_Trapdoor__ip_based_logic_15.c":93:55)
#loc136 = loc("CWE510_Trapdoor__ip_based_logic_15.c":93:75)
#loc137 = loc("CWE510_Trapdoor__ip_based_logic_15.c":93:78)
#loc138 = loc("CWE510_Trapdoor__ip_based_logic_15.c":93:21)
#loc139 = loc("CWE510_Trapdoor__ip_based_logic_15.c":93:85)
#loc140 = loc("CWE510_Trapdoor__ip_based_logic_15.c":94:17)
#loc141 = loc("CWE510_Trapdoor__ip_based_logic_15.c":96:21)
#loc142 = loc("CWE510_Trapdoor__ip_based_logic_15.c":101:17)
#loc143 = loc("CWE510_Trapdoor__ip_based_logic_15.c":104:17)
#loc144 = loc("CWE510_Trapdoor__ip_based_logic_15.c":101:26)
#loc145 = loc("CWE510_Trapdoor__ip_based_logic_15.c":101:57)
#loc146 = loc("CWE510_Trapdoor__ip_based_logic_15.c":101:79)
#loc147 = loc("CWE510_Trapdoor__ip_based_logic_15.c":101:82)
#loc148 = loc("CWE510_Trapdoor__ip_based_logic_15.c":101:21)
#loc149 = loc("CWE510_Trapdoor__ip_based_logic_15.c":101:88)
#loc150 = loc("CWE510_Trapdoor__ip_based_logic_15.c":102:17)
#loc151 = loc("CWE510_Trapdoor__ip_based_logic_15.c":103:21)
#loc152 = loc("CWE510_Trapdoor__ip_based_logic_15.c":107:16)
#loc153 = loc("CWE510_Trapdoor__ip_based_logic_15.c":108:9)
#loc154 = loc("CWE510_Trapdoor__ip_based_logic_15.c":111:9)
#loc155 = loc("CWE510_Trapdoor__ip_based_logic_15.c":108:13)
#loc156 = loc("CWE510_Trapdoor__ip_based_logic_15.c":108:29)
#loc157 = loc("CWE510_Trapdoor__ip_based_logic_15.c":109:9)
#loc158 = loc("CWE510_Trapdoor__ip_based_logic_15.c":110:26)
#loc159 = loc("CWE510_Trapdoor__ip_based_logic_15.c":110:13)
#loc160 = loc("CWE510_Trapdoor__ip_based_logic_15.c":112:9)
#loc161 = loc("CWE510_Trapdoor__ip_based_logic_15.c":115:9)
#loc162 = loc("CWE510_Trapdoor__ip_based_logic_15.c":112:13)
#loc163 = loc("CWE510_Trapdoor__ip_based_logic_15.c":112:29)
#loc164 = loc("CWE510_Trapdoor__ip_based_logic_15.c":113:9)
#loc165 = loc("CWE510_Trapdoor__ip_based_logic_15.c":114:26)
#loc166 = loc("CWE510_Trapdoor__ip_based_logic_15.c":114:13)
#loc167 = loc("CWE510_Trapdoor__ip_based_logic_15.c":123:5)
#loc168 = loc("CWE510_Trapdoor__ip_based_logic_15.c":124:5)
#loc169 = loc("CWE510_Trapdoor__ip_based_logic_15.c":126:9)
#loc170 = loc("CWE510_Trapdoor__ip_based_logic_15.c":127:9)
#loc171 = loc("CWE510_Trapdoor__ip_based_logic_15.c":285:1)
#loc172 = loc("CWE510_Trapdoor__ip_based_logic_15.c":289:1)
#loc173 = loc("CWE510_Trapdoor__ip_based_logic_15.c":287:5)
#loc174 = loc("CWE510_Trapdoor__ip_based_logic_15.c":287:11)
#loc175 = loc("CWE510_Trapdoor__ip_based_logic_15.c":288:5)
#loc176 = loc("CWE510_Trapdoor__ip_based_logic_15.c":288:11)
#loc177 = loc("CWE510_Trapdoor__ip_based_logic_15.c":136:1)
#loc178 = loc("CWE510_Trapdoor__ip_based_logic_15.c":208:1)
#loc179 = loc("CWE510_Trapdoor__ip_based_logic_15.c":138:5)
#loc180 = loc("CWE510_Trapdoor__ip_based_logic_15.c":207:5)
#loc181 = loc("CWE510_Trapdoor__ip_based_logic_15.c":138:12)
#loc182 = loc("CWE510_Trapdoor__ip_based_logic_15.c":140:5)
#loc183 = loc("CWE510_Trapdoor__ip_based_logic_15.c":142:19)
#loc184 = loc("CWE510_Trapdoor__ip_based_logic_15.c":142:9)
#loc185 = loc("CWE510_Trapdoor__ip_based_logic_15.c":143:9)
#loc186 = loc("CWE510_Trapdoor__ip_based_logic_15.c":144:5)
#loc187 = loc("CWE510_Trapdoor__ip_based_logic_15.c":145:5)
#loc188 = loc("CWE510_Trapdoor__ip_based_logic_15.c":205:5)
#loc189 = loc("CWE510_Trapdoor__ip_based_logic_15.c":150:9)
#loc190 = loc("CWE510_Trapdoor__ip_based_logic_15.c":150:28)
#loc191 = loc("CWE510_Trapdoor__ip_based_logic_15.c":151:9)
#loc192 = loc("CWE510_Trapdoor__ip_based_logic_15.c":151:31)
#loc193 = loc("CWE510_Trapdoor__ip_based_logic_15.c":152:9)
#loc194 = loc("CWE510_Trapdoor__ip_based_logic_15.c":152:31)
#loc195 = loc("CWE510_Trapdoor__ip_based_logic_15.c":153:9)
#loc196 = loc("CWE510_Trapdoor__ip_based_logic_15.c":190:17)
#loc197 = loc("CWE510_Trapdoor__ip_based_logic_15.c":154:9)
#loc198 = loc("CWE510_Trapdoor__ip_based_logic_15.c":189:9)
#loc199 = loc("CWE510_Trapdoor__ip_based_logic_15.c":162:35)
#loc200 = loc("CWE510_Trapdoor__ip_based_logic_15.c":162:44)
#loc201 = loc("CWE510_Trapdoor__ip_based_logic_15.c":162:57)
#loc202 = loc("CWE510_Trapdoor__ip_based_logic_15.c":162:28)
#loc203 = loc("CWE510_Trapdoor__ip_based_logic_15.c":162:13)
#loc204 = loc("CWE510_Trapdoor__ip_based_logic_15.c":162:68)
#loc205 = loc("CWE510_Trapdoor__ip_based_logic_15.c":163:13)
#loc206 = loc("CWE510_Trapdoor__ip_based_logic_15.c":166:13)
#loc207 = loc("CWE510_Trapdoor__ip_based_logic_15.c":163:17)
#loc208 = loc("CWE510_Trapdoor__ip_based_logic_15.c":163:33)
#loc209 = loc("CWE510_Trapdoor__ip_based_logic_15.c":164:13)
#loc210 = loc("CWE510_Trapdoor__ip_based_logic_15.c":165:17)
#loc211 = loc("CWE510_Trapdoor__ip_based_logic_15.c":167:20)
#loc212 = loc("CWE510_Trapdoor__ip_based_logic_15.c":167:21)
#loc213 = loc("CWE510_Trapdoor__ip_based_logic_15.c":167:30)
#loc214 = loc("CWE510_Trapdoor__ip_based_logic_15.c":167:33)
#loc215 = loc("CWE510_Trapdoor__ip_based_logic_15.c":167:47)
#loc216 = loc("CWE510_Trapdoor__ip_based_logic_15.c":167:13)
#loc217 = loc("CWE510_Trapdoor__ip_based_logic_15.c":167:48)
#loc218 = loc("CWE510_Trapdoor__ip_based_logic_15.c":168:34)
#loc219 = loc("CWE510_Trapdoor__ip_based_logic_15.c":168:13)
#loc220 = loc("CWE510_Trapdoor__ip_based_logic_15.c":169:39)
#loc221 = loc("CWE510_Trapdoor__ip_based_logic_15.c":169:13)
#loc222 = loc("CWE510_Trapdoor__ip_based_logic_15.c":170:38)
#loc223 = loc("CWE510_Trapdoor__ip_based_logic_15.c":170:32)
#loc224 = loc("CWE510_Trapdoor__ip_based_logic_15.c":170:13)
#loc225 = loc("CWE510_Trapdoor__ip_based_logic_15.c":170:43)
#loc226 = loc("CWE510_Trapdoor__ip_based_logic_15.c":171:13)
#loc227 = loc("CWE510_Trapdoor__ip_based_logic_15.c":174:13)
#loc228 = loc("CWE510_Trapdoor__ip_based_logic_15.c":171:22)
#loc229 = loc("CWE510_Trapdoor__ip_based_logic_15.c":171:54)
#loc230 = loc("CWE510_Trapdoor__ip_based_logic_15.c":171:55)
#loc231 = loc("CWE510_Trapdoor__ip_based_logic_15.c":171:64)
#loc232 = loc("CWE510_Trapdoor__ip_based_logic_15.c":171:78)
#loc233 = loc("CWE510_Trapdoor__ip_based_logic_15.c":171:17)
#loc234 = loc("CWE510_Trapdoor__ip_based_logic_15.c":171:84)
#loc235 = loc("CWE510_Trapdoor__ip_based_logic_15.c":172:13)
#loc236 = loc("CWE510_Trapdoor__ip_based_logic_15.c":173:17)
#loc237 = loc("CWE510_Trapdoor__ip_based_logic_15.c":175:13)
#loc238 = loc("CWE510_Trapdoor__ip_based_logic_15.c":178:13)
#loc239 = loc("CWE510_Trapdoor__ip_based_logic_15.c":175:24)
#loc240 = loc("CWE510_Trapdoor__ip_based_logic_15.c":175:38)
#loc241 = loc("CWE510_Trapdoor__ip_based_logic_15.c":175:17)
#loc242 = loc("CWE510_Trapdoor__ip_based_logic_15.c":175:44)
#loc243 = loc("CWE510_Trapdoor__ip_based_logic_15.c":176:13)
#loc244 = loc("CWE510_Trapdoor__ip_based_logic_15.c":177:17)
#loc245 = loc("CWE510_Trapdoor__ip_based_logic_15.c":179:35)
#loc246 = loc("CWE510_Trapdoor__ip_based_logic_15.c":179:49)
#loc247 = loc("CWE510_Trapdoor__ip_based_logic_15.c":179:55)
#loc248 = loc("CWE510_Trapdoor__ip_based_logic_15.c":179:28)
#loc249 = loc("CWE510_Trapdoor__ip_based_logic_15.c":179:13)
#loc250 = loc("CWE510_Trapdoor__ip_based_logic_15.c":179:59)
#loc251 = loc("CWE510_Trapdoor__ip_based_logic_15.c":180:13)
#loc252 = loc("CWE510_Trapdoor__ip_based_logic_15.c":183:13)
#loc253 = loc("CWE510_Trapdoor__ip_based_logic_15.c":180:17)
#loc254 = loc("CWE510_Trapdoor__ip_based_logic_15.c":180:33)
#loc255 = loc("CWE510_Trapdoor__ip_based_logic_15.c":181:13)
#loc256 = loc("CWE510_Trapdoor__ip_based_logic_15.c":182:17)
#loc257 = loc("CWE510_Trapdoor__ip_based_logic_15.c":185:13)
#loc258 = loc("CWE510_Trapdoor__ip_based_logic_15.c":188:13)
#loc259 = loc("CWE510_Trapdoor__ip_based_logic_15.c":185:22)
#loc260 = loc("CWE510_Trapdoor__ip_based_logic_15.c":185:36)
#loc261 = loc("CWE510_Trapdoor__ip_based_logic_15.c":185:53)
#loc262 = loc("CWE510_Trapdoor__ip_based_logic_15.c":185:75)
#loc263 = loc("CWE510_Trapdoor__ip_based_logic_15.c":185:78)
#loc264 = loc("CWE510_Trapdoor__ip_based_logic_15.c":185:17)
#loc265 = loc("CWE510_Trapdoor__ip_based_logic_15.c":185:84)
#loc266 = loc("CWE510_Trapdoor__ip_based_logic_15.c":186:13)
#loc267 = loc("CWE510_Trapdoor__ip_based_logic_15.c":187:27)
#loc268 = loc("CWE510_Trapdoor__ip_based_logic_15.c":187:17)
#loc269 = loc("CWE510_Trapdoor__ip_based_logic_15.c":190:16)
#loc270 = loc("CWE510_Trapdoor__ip_based_logic_15.c":191:9)
#loc271 = loc("CWE510_Trapdoor__ip_based_logic_15.c":194:9)
#loc272 = loc("CWE510_Trapdoor__ip_based_logic_15.c":191:13)
#loc273 = loc("CWE510_Trapdoor__ip_based_logic_15.c":191:29)
#loc274 = loc("CWE510_Trapdoor__ip_based_logic_15.c":192:9)
#loc275 = loc("CWE510_Trapdoor__ip_based_logic_15.c":193:26)
#loc276 = loc("CWE510_Trapdoor__ip_based_logic_15.c":193:13)
#loc277 = loc("CWE510_Trapdoor__ip_based_logic_15.c":195:9)
#loc278 = loc("CWE510_Trapdoor__ip_based_logic_15.c":198:9)
#loc279 = loc("CWE510_Trapdoor__ip_based_logic_15.c":195:13)
#loc280 = loc("CWE510_Trapdoor__ip_based_logic_15.c":195:29)
#loc281 = loc("CWE510_Trapdoor__ip_based_logic_15.c":196:9)
#loc282 = loc("CWE510_Trapdoor__ip_based_logic_15.c":197:26)
#loc283 = loc("CWE510_Trapdoor__ip_based_logic_15.c":197:13)
#loc284 = loc("CWE510_Trapdoor__ip_based_logic_15.c":206:5)
#loc285 = loc("CWE510_Trapdoor__ip_based_logic_15.c":211:1)
#loc286 = loc("CWE510_Trapdoor__ip_based_logic_15.c":283:1)
#loc287 = loc("CWE510_Trapdoor__ip_based_logic_15.c":213:5)
#loc288 = loc("CWE510_Trapdoor__ip_based_logic_15.c":282:5)
#loc289 = loc("CWE510_Trapdoor__ip_based_logic_15.c":213:12)
#loc290 = loc("CWE510_Trapdoor__ip_based_logic_15.c":215:5)
#loc291 = loc("CWE510_Trapdoor__ip_based_logic_15.c":216:5)
#loc292 = loc("CWE510_Trapdoor__ip_based_logic_15.c":276:5)
#loc293 = loc("CWE510_Trapdoor__ip_based_logic_15.c":221:9)
#loc294 = loc("CWE510_Trapdoor__ip_based_logic_15.c":221:28)
#loc295 = loc("CWE510_Trapdoor__ip_based_logic_15.c":222:9)
#loc296 = loc("CWE510_Trapdoor__ip_based_logic_15.c":222:31)
#loc297 = loc("CWE510_Trapdoor__ip_based_logic_15.c":223:9)
#loc298 = loc("CWE510_Trapdoor__ip_based_logic_15.c":223:31)
#loc299 = loc("CWE510_Trapdoor__ip_based_logic_15.c":224:9)
#loc300 = loc("CWE510_Trapdoor__ip_based_logic_15.c":261:17)
#loc301 = loc("CWE510_Trapdoor__ip_based_logic_15.c":225:9)
#loc302 = loc("CWE510_Trapdoor__ip_based_logic_15.c":260:9)
#loc303 = loc("CWE510_Trapdoor__ip_based_logic_15.c":233:35)
#loc304 = loc("CWE510_Trapdoor__ip_based_logic_15.c":233:44)
#loc305 = loc("CWE510_Trapdoor__ip_based_logic_15.c":233:57)
#loc306 = loc("CWE510_Trapdoor__ip_based_logic_15.c":233:28)
#loc307 = loc("CWE510_Trapdoor__ip_based_logic_15.c":233:13)
#loc308 = loc("CWE510_Trapdoor__ip_based_logic_15.c":233:68)
#loc309 = loc("CWE510_Trapdoor__ip_based_logic_15.c":234:13)
#loc310 = loc("CWE510_Trapdoor__ip_based_logic_15.c":237:13)
#loc311 = loc("CWE510_Trapdoor__ip_based_logic_15.c":234:17)
#loc312 = loc("CWE510_Trapdoor__ip_based_logic_15.c":234:33)
#loc313 = loc("CWE510_Trapdoor__ip_based_logic_15.c":235:13)
#loc314 = loc("CWE510_Trapdoor__ip_based_logic_15.c":236:17)
#loc315 = loc("CWE510_Trapdoor__ip_based_logic_15.c":238:20)
#loc316 = loc("CWE510_Trapdoor__ip_based_logic_15.c":238:21)
#loc317 = loc("CWE510_Trapdoor__ip_based_logic_15.c":238:30)
#loc318 = loc("CWE510_Trapdoor__ip_based_logic_15.c":238:33)
#loc319 = loc("CWE510_Trapdoor__ip_based_logic_15.c":238:47)
#loc320 = loc("CWE510_Trapdoor__ip_based_logic_15.c":238:13)
#loc321 = loc("CWE510_Trapdoor__ip_based_logic_15.c":238:48)
#loc322 = loc("CWE510_Trapdoor__ip_based_logic_15.c":239:34)
#loc323 = loc("CWE510_Trapdoor__ip_based_logic_15.c":239:13)
#loc324 = loc("CWE510_Trapdoor__ip_based_logic_15.c":240:39)
#loc325 = loc("CWE510_Trapdoor__ip_based_logic_15.c":240:13)
#loc326 = loc("CWE510_Trapdoor__ip_based_logic_15.c":241:38)
#loc327 = loc("CWE510_Trapdoor__ip_based_logic_15.c":241:32)
#loc328 = loc("CWE510_Trapdoor__ip_based_logic_15.c":241:13)
#loc329 = loc("CWE510_Trapdoor__ip_based_logic_15.c":241:43)
#loc330 = loc("CWE510_Trapdoor__ip_based_logic_15.c":242:13)
#loc331 = loc("CWE510_Trapdoor__ip_based_logic_15.c":245:13)
#loc332 = loc("CWE510_Trapdoor__ip_based_logic_15.c":242:22)
#loc333 = loc("CWE510_Trapdoor__ip_based_logic_15.c":242:54)
#loc334 = loc("CWE510_Trapdoor__ip_based_logic_15.c":242:55)
#loc335 = loc("CWE510_Trapdoor__ip_based_logic_15.c":242:64)
#loc336 = loc("CWE510_Trapdoor__ip_based_logic_15.c":242:78)
#loc337 = loc("CWE510_Trapdoor__ip_based_logic_15.c":242:17)
#loc338 = loc("CWE510_Trapdoor__ip_based_logic_15.c":242:84)
#loc339 = loc("CWE510_Trapdoor__ip_based_logic_15.c":243:13)
#loc340 = loc("CWE510_Trapdoor__ip_based_logic_15.c":244:17)
#loc341 = loc("CWE510_Trapdoor__ip_based_logic_15.c":246:13)
#loc342 = loc("CWE510_Trapdoor__ip_based_logic_15.c":249:13)
#loc343 = loc("CWE510_Trapdoor__ip_based_logic_15.c":246:24)
#loc344 = loc("CWE510_Trapdoor__ip_based_logic_15.c":246:38)
#loc345 = loc("CWE510_Trapdoor__ip_based_logic_15.c":246:17)
#loc346 = loc("CWE510_Trapdoor__ip_based_logic_15.c":246:44)
#loc347 = loc("CWE510_Trapdoor__ip_based_logic_15.c":247:13)
#loc348 = loc("CWE510_Trapdoor__ip_based_logic_15.c":248:17)
#loc349 = loc("CWE510_Trapdoor__ip_based_logic_15.c":250:35)
#loc350 = loc("CWE510_Trapdoor__ip_based_logic_15.c":250:49)
#loc351 = loc("CWE510_Trapdoor__ip_based_logic_15.c":250:55)
#loc352 = loc("CWE510_Trapdoor__ip_based_logic_15.c":250:28)
#loc353 = loc("CWE510_Trapdoor__ip_based_logic_15.c":250:13)
#loc354 = loc("CWE510_Trapdoor__ip_based_logic_15.c":250:59)
#loc355 = loc("CWE510_Trapdoor__ip_based_logic_15.c":251:13)
#loc356 = loc("CWE510_Trapdoor__ip_based_logic_15.c":254:13)
#loc357 = loc("CWE510_Trapdoor__ip_based_logic_15.c":251:17)
#loc358 = loc("CWE510_Trapdoor__ip_based_logic_15.c":251:33)
#loc359 = loc("CWE510_Trapdoor__ip_based_logic_15.c":252:13)
#loc360 = loc("CWE510_Trapdoor__ip_based_logic_15.c":253:17)
#loc361 = loc("CWE510_Trapdoor__ip_based_logic_15.c":256:13)
#loc362 = loc("CWE510_Trapdoor__ip_based_logic_15.c":259:13)
#loc363 = loc("CWE510_Trapdoor__ip_based_logic_15.c":256:22)
#loc364 = loc("CWE510_Trapdoor__ip_based_logic_15.c":256:36)
#loc365 = loc("CWE510_Trapdoor__ip_based_logic_15.c":256:53)
#loc366 = loc("CWE510_Trapdoor__ip_based_logic_15.c":256:75)
#loc367 = loc("CWE510_Trapdoor__ip_based_logic_15.c":256:78)
#loc368 = loc("CWE510_Trapdoor__ip_based_logic_15.c":256:17)
#loc369 = loc("CWE510_Trapdoor__ip_based_logic_15.c":256:84)
#loc370 = loc("CWE510_Trapdoor__ip_based_logic_15.c":257:13)
#loc371 = loc("CWE510_Trapdoor__ip_based_logic_15.c":258:27)
#loc372 = loc("CWE510_Trapdoor__ip_based_logic_15.c":258:17)
#loc373 = loc("CWE510_Trapdoor__ip_based_logic_15.c":261:16)
#loc374 = loc("CWE510_Trapdoor__ip_based_logic_15.c":262:9)
#loc375 = loc("CWE510_Trapdoor__ip_based_logic_15.c":265:9)
#loc376 = loc("CWE510_Trapdoor__ip_based_logic_15.c":262:13)
#loc377 = loc("CWE510_Trapdoor__ip_based_logic_15.c":262:29)
#loc378 = loc("CWE510_Trapdoor__ip_based_logic_15.c":263:9)
#loc379 = loc("CWE510_Trapdoor__ip_based_logic_15.c":264:26)
#loc380 = loc("CWE510_Trapdoor__ip_based_logic_15.c":264:13)
#loc381 = loc("CWE510_Trapdoor__ip_based_logic_15.c":266:9)
#loc382 = loc("CWE510_Trapdoor__ip_based_logic_15.c":269:9)
#loc383 = loc("CWE510_Trapdoor__ip_based_logic_15.c":266:13)
#loc384 = loc("CWE510_Trapdoor__ip_based_logic_15.c":266:29)
#loc385 = loc("CWE510_Trapdoor__ip_based_logic_15.c":267:9)
#loc386 = loc("CWE510_Trapdoor__ip_based_logic_15.c":268:26)
#loc387 = loc("CWE510_Trapdoor__ip_based_logic_15.c":268:13)
#loc388 = loc("CWE510_Trapdoor__ip_based_logic_15.c":277:5)
#loc389 = loc("CWE510_Trapdoor__ip_based_logic_15.c":278:5)
#loc390 = loc("CWE510_Trapdoor__ip_based_logic_15.c":280:19)
#loc391 = loc("CWE510_Trapdoor__ip_based_logic_15.c":280:9)
#loc392 = loc("CWE510_Trapdoor__ip_based_logic_15.c":281:9)
#loc393 = loc(fused[#loc1, #loc2])
#loc394 = loc(fused[#loc3, #loc4])
#loc395 = loc(fused[#loc5, #loc6])
#loc396 = loc(fused[#loc7, #loc8])
#loc397 = loc(fused[#loc9, #loc10])
#loc398 = loc(fused[#loc11, #loc12])
#loc399 = loc(fused[#loc13, #loc14])
#loc400 = loc(fused[#loc16, #loc17])
#loc401 = loc(fused[#loc18, #loc19])
#loc402 = loc(fused[#loc22, #loc23])
#loc403 = loc(fused[#loc25, #loc26])
#loc404 = loc(fused[#loc28, #loc29])
#loc405 = loc(fused[#loc30, #loc31])
#loc406 = loc(fused[#loc34, #loc35])
#loc407 = loc(fused[#loc36, #loc37])
#loc408 = loc(fused[#loc36, #loc38])
#loc409 = loc(fused[#loc39, #loc40])
#loc410 = loc(fused[#loc41, #loc42])
#loc411 = loc(fused[#loc43, #loc44])
#loc412 = loc(fused[#loc45, #loc40])
#loc413 = loc(fused[#loc46, #loc47])
#loc414 = loc(fused[#loc48, #loc49])
#loc415 = loc(fused[#loc54, #loc55])
#loc416 = loc(fused[#loc56, #loc57])
#loc417 = loc(fused[#loc58, #loc59])
#loc418 = loc(fused[#loc60, #loc57])
#loc419 = loc(fused[#loc62, #loc63])
#loc420 = loc(fused[#loc65, #loc66])
#loc421 = loc(fused[#loc67, #loc68])
#loc422 = loc(fused[#loc71, #loc69])
#loc423 = loc(fused[#loc75, #loc72])
#loc424 = loc(fused[#loc79, #loc80])
#loc425 = loc(fused[#loc81, #loc82])
#loc426 = loc(fused[#loc84, #loc85])
#loc427 = loc(fused[#loc86, #loc87])
#loc428 = loc(fused[#loc88, #loc89])
#loc429 = loc(fused[#loc90, #loc82])
#loc430 = loc(fused[#loc92, #loc93])
#loc431 = loc(fused[#loc96, #loc97])
#loc432 = loc(fused[#loc98, #loc93])
#loc433 = loc(fused[#loc104, #loc105])
#loc434 = loc(fused[#loc106, #loc107])
#loc435 = loc(fused[#loc108, #loc109])
#loc436 = loc(fused[#loc110, #loc107])
#loc437 = loc(fused[#loc112, #loc113])
#loc438 = loc(fused[#loc115, #loc116])
#loc439 = loc(fused[#loc117, #loc118])
#loc440 = loc(fused[#loc119, #loc120])
#loc441 = loc(fused[#loc122, #loc113])
#loc442 = loc(fused[#loc124, #loc125])
#loc443 = loc(fused[#loc126, #loc128])
#loc444 = loc(fused[#loc129, #loc130, #loc131, #loc125])
#loc445 = loc(fused[#loc132, #loc133])
#loc446 = loc(fused[#loc135, #loc136])
#loc447 = loc(fused[#loc138, #loc139])
#loc448 = loc(fused[#loc140, #loc133])
#loc449 = loc(fused[#loc142, #loc143])
#loc450 = loc(fused[#loc145, #loc146])
#loc451 = loc(fused[#loc148, #loc149])
#loc452 = loc(fused[#loc150, #loc143])
#loc453 = loc(fused[#loc153, #loc154])
#loc454 = loc(fused[#loc155, #loc156])
#loc455 = loc(fused[#loc157, #loc154])
#loc456 = loc(fused[#loc160, #loc161])
#loc457 = loc(fused[#loc162, #loc163])
#loc458 = loc(fused[#loc164, #loc161])
#loc459 = loc(fused[#loc171, #loc172])
#loc460 = loc(fused[#loc173, #loc174])
#loc461 = loc(fused[#loc175, #loc176])
#loc462 = loc(fused[#loc177, #loc178])
#loc463 = loc(fused[#loc179, #loc180])
#loc464 = loc(fused[#loc187, #loc188])
#loc465 = loc(fused[#loc189, #loc190])
#loc466 = loc(fused[#loc191, #loc192])
#loc467 = loc(fused[#loc193, #loc194])
#loc468 = loc(fused[#loc195, #loc196])
#loc469 = loc(fused[#loc197, #loc198])
#loc470 = loc(fused[#loc203, #loc204])
#loc471 = loc(fused[#loc205, #loc206])
#loc472 = loc(fused[#loc207, #loc208])
#loc473 = loc(fused[#loc209, #loc206])
#loc474 = loc(fused[#loc211, #loc212])
#loc475 = loc(fused[#loc214, #loc215])
#loc476 = loc(fused[#loc216, #loc217])
#loc477 = loc(fused[#loc219, #loc218])
#loc478 = loc(fused[#loc221, #loc220])
#loc479 = loc(fused[#loc224, #loc225])
#loc480 = loc(fused[#loc226, #loc227])
#loc481 = loc(fused[#loc229, #loc230])
#loc482 = loc(fused[#loc231, #loc232])
#loc483 = loc(fused[#loc233, #loc234])
#loc484 = loc(fused[#loc235, #loc227])
#loc485 = loc(fused[#loc237, #loc238])
#loc486 = loc(fused[#loc241, #loc242])
#loc487 = loc(fused[#loc243, #loc238])
#loc488 = loc(fused[#loc249, #loc250])
#loc489 = loc(fused[#loc251, #loc252])
#loc490 = loc(fused[#loc253, #loc254])
#loc491 = loc(fused[#loc255, #loc252])
#loc492 = loc(fused[#loc257, #loc258])
#loc493 = loc(fused[#loc261, #loc262])
#loc494 = loc(fused[#loc264, #loc265])
#loc495 = loc(fused[#loc266, #loc258])
#loc496 = loc(fused[#loc270, #loc271])
#loc497 = loc(fused[#loc272, #loc273])
#loc498 = loc(fused[#loc274, #loc271])
#loc499 = loc(fused[#loc277, #loc278])
#loc500 = loc(fused[#loc279, #loc280])
#loc501 = loc(fused[#loc281, #loc278])
#loc502 = loc(fused[#loc285, #loc286])
#loc503 = loc(fused[#loc287, #loc288])
#loc504 = loc(fused[#loc291, #loc292])
#loc505 = loc(fused[#loc293, #loc294])
#loc506 = loc(fused[#loc295, #loc296])
#loc507 = loc(fused[#loc297, #loc298])
#loc508 = loc(fused[#loc299, #loc300])
#loc509 = loc(fused[#loc301, #loc302])
#loc510 = loc(fused[#loc307, #loc308])
#loc511 = loc(fused[#loc309, #loc310])
#loc512 = loc(fused[#loc311, #loc312])
#loc513 = loc(fused[#loc313, #loc310])
#loc514 = loc(fused[#loc315, #loc316])
#loc515 = loc(fused[#loc318, #loc319])
#loc516 = loc(fused[#loc320, #loc321])
#loc517 = loc(fused[#loc323, #loc322])
#loc518 = loc(fused[#loc325, #loc324])
#loc519 = loc(fused[#loc328, #loc329])
#loc520 = loc(fused[#loc330, #loc331])
#loc521 = loc(fused[#loc333, #loc334])
#loc522 = loc(fused[#loc335, #loc336])
#loc523 = loc(fused[#loc337, #loc338])
#loc524 = loc(fused[#loc339, #loc331])
#loc525 = loc(fused[#loc341, #loc342])
#loc526 = loc(fused[#loc345, #loc346])
#loc527 = loc(fused[#loc347, #loc342])
#loc528 = loc(fused[#loc353, #loc354])
#loc529 = loc(fused[#loc355, #loc356])
#loc530 = loc(fused[#loc357, #loc358])
#loc531 = loc(fused[#loc359, #loc356])
#loc532 = loc(fused[#loc361, #loc362])
#loc533 = loc(fused[#loc365, #loc366])
#loc534 = loc(fused[#loc368, #loc369])
#loc535 = loc(fused[#loc370, #loc362])
#loc536 = loc(fused[#loc374, #loc375])
#loc537 = loc(fused[#loc376, #loc377])
#loc538 = loc(fused[#loc378, #loc375])
#loc539 = loc(fused[#loc381, #loc382])
#loc540 = loc(fused[#loc383, #loc384])
#loc541 = loc(fused[#loc385, #loc382])
