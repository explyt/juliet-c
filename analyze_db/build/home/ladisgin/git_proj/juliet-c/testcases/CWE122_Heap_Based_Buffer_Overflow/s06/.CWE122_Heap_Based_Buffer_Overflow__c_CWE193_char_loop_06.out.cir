!s32i = !cir.int<s, 32>
!s64i = !cir.int<s, 64>
!s8i = !cir.int<s, 8>
!u32i = !cir.int<u, 32>
!u64i = !cir.int<u, 64>
!void = !cir.void
#fn_attr = #cir<extra({nothrow = #cir.nothrow})>
#fn_attr1 = #cir<extra({inline = #cir.inline<no>, nothrow = #cir.nothrow, optnone = #cir.optnone})>
#loc88 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE193_char_loop_06.c":134:10)
#loc89 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE193_char_loop_06.c":134:14)
#loc90 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE193_char_loop_06.c":134:20)
#loc91 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE193_char_loop_06.c":134:32)
#loc262 = loc(fused[#loc88, #loc89])
#loc263 = loc(fused[#loc90, #loc91])
module @"/home/ladisgin/git_proj/juliet-c/testcases/CWE122_Heap_Based_Buffer_Overflow/s06/CWE122_Heap_Based_Buffer_Overflow__c_CWE193_char_loop_06.c" attributes {cir.lang = #cir.lang<c>, cir.sob = #cir.signed_overflow_behavior<undefined>, cir.triple = "x86_64-unknown-linux-gnu", dlti.dl_spec = #dlti.dl_spec<!llvm.ptr<270> = dense<32> : vector<4xi64>, !llvm.ptr<272> = dense<64> : vector<4xi64>, !llvm.ptr<271> = dense<32> : vector<4xi64>, f16 = dense<16> : vector<2xi64>, f64 = dense<64> : vector<2xi64>, f128 = dense<128> : vector<2xi64>, i32 = dense<32> : vector<2xi64>, i8 = dense<8> : vector<2xi64>, i16 = dense<16> : vector<2xi64>, !llvm.ptr = dense<64> : vector<4xi64>, i1 = dense<8> : vector<2xi64>, f80 = dense<128> : vector<2xi64>, i128 = dense<128> : vector<2xi64>, i64 = dense<64> : vector<2xi64>, "dlti.endianness" = "little", "dlti.stack_alignment" = 128 : i64>} {
  cir.global "private" constant cir_private @__const.goodG2B2.source = #cir.const_array<"AAAAAAAAAA\00" : !cir.array<!s8i x 11>> : !cir.array<!s8i x 11> loc(#loc224)
  cir.global "private" constant cir_private @__const.goodG2B1.source = #cir.const_array<"AAAAAAAAAA\00" : !cir.array<!s8i x 11>> : !cir.array<!s8i x 11> loc(#loc225)
  cir.global "private" constant cir_private @__const.CWE122_Heap_Based_Buffer_Overflow__c_CWE193_char_loop_06_bad.source = #cir.const_array<"AAAAAAAAAA\00" : !cir.array<!s8i x 11>> : !cir.array<!s8i x 11> loc(#loc226)
  cir.func private @malloc(!u64i) -> !cir.ptr<!void> extra(#fn_attr) loc(#loc227)
  cir.func private @exit(!s32i) extra(#fn_attr) loc(#loc228)
  cir.func private @strlen(!cir.ptr<!s8i>) -> !u64i extra(#fn_attr) loc(#loc229)
  cir.func private @printLine(!cir.ptr<!s8i>) loc(#loc230)
  cir.func private @free(!cir.ptr<!void>) extra(#fn_attr) loc(#loc231)
  cir.func no_proto @CWE122_Heap_Based_Buffer_Overflow__c_CWE193_char_loop_06_bad() extra(#fn_attr1) {
    %0 = cir.alloca !cir.ptr<!s8i>, !cir.ptr<!cir.ptr<!s8i>>, ["data"] {alignment = 8 : i64} loc(#loc233)
    %1 = cir.const #cir.ptr<null> : !cir.ptr<!s8i> loc(#loc21)
    cir.store %1, %0 : !cir.ptr<!s8i>, !cir.ptr<!cir.ptr<!s8i>> loc(#loc234)
    cir.scope {
      %2 = cir.const #cir.int<5> : !s32i loc(#loc25)
      %3 = cir.const #cir.int<5> : !s32i loc(#loc26)
      %4 = cir.cmp(eq, %2, %3) : !s32i, !cir.bool loc(#loc236)
      cir.if %4 {
        %5 = cir.get_global @malloc : !cir.ptr<!cir.func<!cir.ptr<!void> (!u64i)>> loc(#loc28)
        %6 = cir.const #cir.int<10> : !s32i loc(#loc29)
        %7 = cir.cast(integral, %6 : !s32i), !u64i loc(#loc29)
        %8 = cir.const #cir.int<1> : !u64i loc(#loc238)
        %9 = cir.binop(mul, %7, %8) : !u64i loc(#loc239)
        %10 = cir.call @malloc(%9) : (!u64i) -> !cir.ptr<!void> extra(#fn_attr) loc(#loc28)
        %11 = cir.cast(bitcast, %10 : !cir.ptr<!void>), !cir.ptr<!s8i> loc(#loc240)
        cir.store %11, %0 : !cir.ptr<!s8i>, !cir.ptr<!cir.ptr<!s8i>> loc(#loc241)
        cir.scope {
          %12 = cir.load %0 : !cir.ptr<!cir.ptr<!s8i>>, !cir.ptr<!s8i> loc(#loc36)
          %13 = cir.const #cir.ptr<null> : !cir.ptr<!void> loc(#loc37)
          %14 = cir.cast(bitcast, %13 : !cir.ptr<!void>), !cir.ptr<!s8i> loc(#loc37)
          %15 = cir.cmp(eq, %12, %14) : !cir.ptr<!s8i>, !cir.bool loc(#loc243)
          cir.if %15 {
            %16 = cir.get_global @exit : !cir.ptr<!cir.func<!void (!s32i)>> loc(#loc39)
            %17 = cir.const #cir.int<1> : !s32i loc(#loc40)
            %18 = cir.unary(minus, %17) : !s32i, !s32i loc(#loc41)
            cir.call @exit(%18) : (!s32i) -> () extra(#fn_attr) loc(#loc39)
          } loc(#loc244)
        } loc(#loc242)
      } loc(#loc237)
    } loc(#loc235)
    cir.scope {
      %2 = cir.alloca !cir.array<!s8i x 11>, !cir.ptr<!cir.array<!s8i x 11>>, ["source"] {alignment = 1 : i64} loc(#loc226)
      %3 = cir.alloca !u64i, !cir.ptr<!u64i>, ["i"] {alignment = 8 : i64} loc(#loc246)
      %4 = cir.alloca !u64i, !cir.ptr<!u64i>, ["sourceLen"] {alignment = 8 : i64} loc(#loc247)
      %5 = cir.get_global @__const.CWE122_Heap_Based_Buffer_Overflow__c_CWE193_char_loop_06_bad.source : !cir.ptr<!cir.array<!s8i x 11>> loc(#loc226)
      cir.copy %5 to %2 : !cir.ptr<!cir.array<!s8i x 11>> loc(#loc226)
      %6 = cir.get_global @strlen : !cir.ptr<!cir.func<!u64i (!cir.ptr<!s8i>)>> loc(#loc47)
      %7 = cir.cast(array_to_ptrdecay, %2 : !cir.ptr<!cir.array<!s8i x 11>>), !cir.ptr<!s8i> loc(#loc48)
      %8 = cir.call @strlen(%7) : (!cir.ptr<!s8i>) -> !u64i extra(#fn_attr) loc(#loc47)
      cir.store %8, %4 : !u64i, !cir.ptr<!u64i> loc(#loc248)
      cir.scope {
        %13 = cir.const #cir.int<0> : !s32i loc(#loc53)
        %14 = cir.cast(integral, %13 : !s32i), !u64i loc(#loc53)
        cir.store %14, %3 : !u64i, !cir.ptr<!u64i> loc(#loc250)
        cir.for : cond {
          %15 = cir.load %3 : !cir.ptr<!u64i>, !u64i loc(#loc55)
          %16 = cir.load %4 : !cir.ptr<!u64i>, !u64i loc(#loc56)
          %17 = cir.const #cir.int<1> : !s32i loc(#loc57)
          %18 = cir.cast(integral, %17 : !s32i), !u64i loc(#loc57)
          %19 = cir.binop(add, %16, %18) : !u64i loc(#loc251)
          %20 = cir.cmp(lt, %15, %19) : !u64i, !cir.bool loc(#loc252)
          cir.condition(%20) loc(#loc58)
        } body {
          cir.scope {
            %15 = cir.load %3 : !cir.ptr<!u64i>, !u64i loc(#loc60)
            %16 = cir.cast(array_to_ptrdecay, %2 : !cir.ptr<!cir.array<!s8i x 11>>), !cir.ptr<!s8i> loc(#loc61)
            %17 = cir.ptr_stride(%16 : !cir.ptr<!s8i>, %15 : !u64i), !cir.ptr<!s8i> loc(#loc61)
            %18 = cir.load %17 : !cir.ptr<!s8i>, !s8i loc(#loc61)
            %19 = cir.load %0 : !cir.ptr<!cir.ptr<!s8i>>, !cir.ptr<!s8i> loc(#loc62)
            %20 = cir.load %3 : !cir.ptr<!u64i>, !u64i loc(#loc63)
            %21 = cir.ptr_stride(%19 : !cir.ptr<!s8i>, %20 : !u64i), !cir.ptr<!s8i> loc(#loc64)
            cir.store %18, %21 : !s8i, !cir.ptr<!s8i> loc(#loc254)
          } loc(#loc253)
          cir.yield loc(#loc52)
        } step {
          %15 = cir.load %3 : !cir.ptr<!u64i>, !u64i loc(#loc66)
          %16 = cir.unary(inc, %15) : !u64i, !u64i loc(#loc67)
          cir.store %16, %3 : !u64i, !cir.ptr<!u64i> loc(#loc255)
          cir.yield loc(#loc249)
        } loc(#loc249)
      } loc(#loc249)
      %9 = cir.load %0 : !cir.ptr<!cir.ptr<!s8i>>, !cir.ptr<!s8i> loc(#loc68)
      cir.call @printLine(%9) : (!cir.ptr<!s8i>) -> () loc(#loc69)
      %10 = cir.get_global @free : !cir.ptr<!cir.func<!void (!cir.ptr<!void>)>> loc(#loc70)
      %11 = cir.load %0 : !cir.ptr<!cir.ptr<!s8i>>, !cir.ptr<!s8i> loc(#loc71)
      %12 = cir.cast(bitcast, %11 : !cir.ptr<!s8i>), !cir.ptr<!void> loc(#loc71)
      cir.call @free(%12) : (!cir.ptr<!void>) -> () extra(#fn_attr) loc(#loc70)
    } loc(#loc245)
    cir.return loc(#loc18)
  } loc(#loc232)
  cir.func no_proto @CWE122_Heap_Based_Buffer_Overflow__c_CWE193_char_loop_06_good() extra(#fn_attr1) {
    %0 = cir.get_global @goodG2B1 : !cir.ptr<!cir.func<!void ()>> loc(#loc257)
    cir.call %0() : (!cir.ptr<!cir.func<!void ()>>) -> () loc(#loc74)
    %1 = cir.get_global @goodG2B2 : !cir.ptr<!cir.func<!void ()>> loc(#loc258)
    cir.call %1() : (!cir.ptr<!cir.func<!void ()>>) -> () loc(#loc76)
    cir.return loc(#loc73)
  } loc(#loc256)
  cir.func private @srand(!u32i) extra(#fn_attr) loc(#loc259)
  cir.func private @time(!cir.ptr<!s64i>) -> !s64i extra(#fn_attr) loc(#loc260)
  cir.global "private" constant cir_private dsolocal @".str" = #cir.const_array<"Calling good()...\00" : !cir.array<!s8i x 18>> : !cir.array<!s8i x 18> {alignment = 1 : i64} loc(#loc82)
  cir.global "private" constant cir_private dsolocal @".str.1" = #cir.const_array<"Finished good()\00" : !cir.array<!s8i x 16>> : !cir.array<!s8i x 16> {alignment = 1 : i64} loc(#loc83)
  cir.global "private" constant cir_private dsolocal @".str.2" = #cir.const_array<"Calling bad()...\00" : !cir.array<!s8i x 17>> : !cir.array<!s8i x 17> {alignment = 1 : i64} loc(#loc84)
  cir.global "private" constant cir_private dsolocal @".str.3" = #cir.const_array<"Finished bad()\00" : !cir.array<!s8i x 15>> : !cir.array<!s8i x 15> {alignment = 1 : i64} loc(#loc85)
  cir.func @main(%arg0: !s32i loc(fused[#loc88, #loc89]), %arg1: !cir.ptr<!cir.ptr<!s8i>> loc(fused[#loc90, #loc91])) -> !s32i extra(#fn_attr1) {
    %0 = cir.alloca !s32i, !cir.ptr<!s32i>, ["argc", init] {alignment = 4 : i64} loc(#loc262)
    %1 = cir.alloca !cir.ptr<!cir.ptr<!s8i>>, !cir.ptr<!cir.ptr<!cir.ptr<!s8i>>>, ["argv", init] {alignment = 8 : i64} loc(#loc263)
    %2 = cir.alloca !s32i, !cir.ptr<!s32i>, ["__retval"] {alignment = 4 : i64} loc(#loc87)
    cir.store %arg0, %0 : !s32i, !cir.ptr<!s32i> loc(#loc92)
    cir.store %arg1, %1 : !cir.ptr<!cir.ptr<!s8i>>, !cir.ptr<!cir.ptr<!cir.ptr<!s8i>>> loc(#loc92)
    %3 = cir.const #cir.ptr<null> : !cir.ptr<!s64i> loc(#loc93)
    %4 = cir.call @time(%3) : (!cir.ptr<!s64i>) -> !s64i extra(#fn_attr) loc(#loc94)
    %5 = cir.cast(integral, %4 : !s64i), !u32i loc(#loc94)
    cir.call @srand(%5) : (!u32i) -> () extra(#fn_attr) loc(#loc95)
    %6 = cir.get_global @".str" : !cir.ptr<!cir.array<!s8i x 18>> loc(#loc82)
    %7 = cir.cast(array_to_ptrdecay, %6 : !cir.ptr<!cir.array<!s8i x 18>>), !cir.ptr<!s8i> loc(#loc82)
    cir.call @printLine(%7) : (!cir.ptr<!s8i>) -> () loc(#loc96)
    %8 = cir.get_global @CWE122_Heap_Based_Buffer_Overflow__c_CWE193_char_loop_06_good : !cir.ptr<!cir.func<!void ()>> loc(#loc264)
    cir.call @CWE122_Heap_Based_Buffer_Overflow__c_CWE193_char_loop_06_good() : () -> () loc(#loc97)
    %9 = cir.get_global @".str.1" : !cir.ptr<!cir.array<!s8i x 16>> loc(#loc83)
    %10 = cir.cast(array_to_ptrdecay, %9 : !cir.ptr<!cir.array<!s8i x 16>>), !cir.ptr<!s8i> loc(#loc83)
    cir.call @printLine(%10) : (!cir.ptr<!s8i>) -> () loc(#loc99)
    %11 = cir.get_global @".str.2" : !cir.ptr<!cir.array<!s8i x 17>> loc(#loc84)
    %12 = cir.cast(array_to_ptrdecay, %11 : !cir.ptr<!cir.array<!s8i x 17>>), !cir.ptr<!s8i> loc(#loc84)
    cir.call @printLine(%12) : (!cir.ptr<!s8i>) -> () loc(#loc100)
    %13 = cir.get_global @CWE122_Heap_Based_Buffer_Overflow__c_CWE193_char_loop_06_bad : !cir.ptr<!cir.func<!void ()>> loc(#loc265)
    cir.call @CWE122_Heap_Based_Buffer_Overflow__c_CWE193_char_loop_06_bad() : () -> () loc(#loc101)
    %14 = cir.get_global @".str.3" : !cir.ptr<!cir.array<!s8i x 15>> loc(#loc85)
    %15 = cir.cast(array_to_ptrdecay, %14 : !cir.ptr<!cir.array<!s8i x 15>>), !cir.ptr<!s8i> loc(#loc85)
    cir.call @printLine(%15) : (!cir.ptr<!s8i>) -> () loc(#loc103)
    %16 = cir.const #cir.int<0> : !s32i loc(#loc104)
    cir.store %16, %2 : !s32i, !cir.ptr<!s32i> loc(#loc266)
    %17 = cir.load %2 : !cir.ptr<!s32i>, !s32i loc(#loc266)
    cir.return %17 : !s32i loc(#loc266)
  } loc(#loc261)
  cir.global "private" constant cir_private dsolocal @".str.4" = #cir.const_array<"Benign, fixed string\00" : !cir.array<!s8i x 21>> : !cir.array<!s8i x 21> {alignment = 1 : i64} loc(#loc106)
  cir.func no_proto internal private @goodG2B1() extra(#fn_attr1) {
    %0 = cir.alloca !cir.ptr<!s8i>, !cir.ptr<!cir.ptr<!s8i>>, ["data"] {alignment = 8 : i64} loc(#loc268)
    %1 = cir.const #cir.ptr<null> : !cir.ptr<!s8i> loc(#loc111)
    cir.store %1, %0 : !cir.ptr<!s8i>, !cir.ptr<!cir.ptr<!s8i>> loc(#loc269)
    cir.scope {
      %2 = cir.const #cir.int<5> : !s32i loc(#loc115)
      %3 = cir.const #cir.int<5> : !s32i loc(#loc116)
      %4 = cir.cmp(ne, %2, %3) : !s32i, !cir.bool loc(#loc271)
      cir.if %4 {
        %5 = cir.get_global @".str.4" : !cir.ptr<!cir.array<!s8i x 21>> loc(#loc106)
        %6 = cir.cast(array_to_ptrdecay, %5 : !cir.ptr<!cir.array<!s8i x 21>>), !cir.ptr<!s8i> loc(#loc106)
        cir.call @printLine(%6) : (!cir.ptr<!s8i>) -> () loc(#loc120)
      } else {
        %5 = cir.get_global @malloc : !cir.ptr<!cir.func<!cir.ptr<!void> (!u64i)>> loc(#loc121)
        %6 = cir.const #cir.int<10> : !s32i loc(#loc122)
        %7 = cir.const #cir.int<1> : !s32i loc(#loc123)
        %8 = cir.binop(add, %6, %7) nsw : !s32i loc(#loc122)
        %9 = cir.cast(integral, %8 : !s32i), !u64i loc(#loc122)
        %10 = cir.const #cir.int<1> : !u64i loc(#loc273)
        %11 = cir.binop(mul, %9, %10) : !u64i loc(#loc274)
        %12 = cir.call @malloc(%11) : (!u64i) -> !cir.ptr<!void> extra(#fn_attr) loc(#loc121)
        %13 = cir.cast(bitcast, %12 : !cir.ptr<!void>), !cir.ptr<!s8i> loc(#loc275)
        cir.store %13, %0 : !cir.ptr<!s8i>, !cir.ptr<!cir.ptr<!s8i>> loc(#loc276)
        cir.scope {
          %14 = cir.load %0 : !cir.ptr<!cir.ptr<!s8i>>, !cir.ptr<!s8i> loc(#loc131)
          %15 = cir.const #cir.ptr<null> : !cir.ptr<!void> loc(#loc132)
          %16 = cir.cast(bitcast, %15 : !cir.ptr<!void>), !cir.ptr<!s8i> loc(#loc132)
          %17 = cir.cmp(eq, %14, %16) : !cir.ptr<!s8i>, !cir.bool loc(#loc278)
          cir.if %17 {
            %18 = cir.get_global @exit : !cir.ptr<!cir.func<!void (!s32i)>> loc(#loc134)
            %19 = cir.const #cir.int<1> : !s32i loc(#loc135)
            %20 = cir.unary(minus, %19) : !s32i, !s32i loc(#loc136)
            cir.call @exit(%20) : (!s32i) -> () extra(#fn_attr) loc(#loc134)
          } loc(#loc279)
        } loc(#loc277)
      } loc(#loc272)
    } loc(#loc270)
    cir.scope {
      %2 = cir.alloca !cir.array<!s8i x 11>, !cir.ptr<!cir.array<!s8i x 11>>, ["source"] {alignment = 1 : i64} loc(#loc225)
      %3 = cir.alloca !u64i, !cir.ptr<!u64i>, ["i"] {alignment = 8 : i64} loc(#loc281)
      %4 = cir.alloca !u64i, !cir.ptr<!u64i>, ["sourceLen"] {alignment = 8 : i64} loc(#loc282)
      %5 = cir.get_global @__const.goodG2B1.source : !cir.ptr<!cir.array<!s8i x 11>> loc(#loc225)
      cir.copy %5 to %2 : !cir.ptr<!cir.array<!s8i x 11>> loc(#loc225)
      %6 = cir.get_global @strlen : !cir.ptr<!cir.func<!u64i (!cir.ptr<!s8i>)>> loc(#loc142)
      %7 = cir.cast(array_to_ptrdecay, %2 : !cir.ptr<!cir.array<!s8i x 11>>), !cir.ptr<!s8i> loc(#loc143)
      %8 = cir.call @strlen(%7) : (!cir.ptr<!s8i>) -> !u64i extra(#fn_attr) loc(#loc142)
      cir.store %8, %4 : !u64i, !cir.ptr<!u64i> loc(#loc283)
      cir.scope {
        %13 = cir.const #cir.int<0> : !s32i loc(#loc148)
        %14 = cir.cast(integral, %13 : !s32i), !u64i loc(#loc148)
        cir.store %14, %3 : !u64i, !cir.ptr<!u64i> loc(#loc285)
        cir.for : cond {
          %15 = cir.load %3 : !cir.ptr<!u64i>, !u64i loc(#loc150)
          %16 = cir.load %4 : !cir.ptr<!u64i>, !u64i loc(#loc151)
          %17 = cir.const #cir.int<1> : !s32i loc(#loc152)
          %18 = cir.cast(integral, %17 : !s32i), !u64i loc(#loc152)
          %19 = cir.binop(add, %16, %18) : !u64i loc(#loc286)
          %20 = cir.cmp(lt, %15, %19) : !u64i, !cir.bool loc(#loc287)
          cir.condition(%20) loc(#loc153)
        } body {
          cir.scope {
            %15 = cir.load %3 : !cir.ptr<!u64i>, !u64i loc(#loc155)
            %16 = cir.cast(array_to_ptrdecay, %2 : !cir.ptr<!cir.array<!s8i x 11>>), !cir.ptr<!s8i> loc(#loc156)
            %17 = cir.ptr_stride(%16 : !cir.ptr<!s8i>, %15 : !u64i), !cir.ptr<!s8i> loc(#loc156)
            %18 = cir.load %17 : !cir.ptr<!s8i>, !s8i loc(#loc156)
            %19 = cir.load %0 : !cir.ptr<!cir.ptr<!s8i>>, !cir.ptr<!s8i> loc(#loc157)
            %20 = cir.load %3 : !cir.ptr<!u64i>, !u64i loc(#loc158)
            %21 = cir.ptr_stride(%19 : !cir.ptr<!s8i>, %20 : !u64i), !cir.ptr<!s8i> loc(#loc159)
            cir.store %18, %21 : !s8i, !cir.ptr<!s8i> loc(#loc289)
          } loc(#loc288)
          cir.yield loc(#loc147)
        } step {
          %15 = cir.load %3 : !cir.ptr<!u64i>, !u64i loc(#loc161)
          %16 = cir.unary(inc, %15) : !u64i, !u64i loc(#loc162)
          cir.store %16, %3 : !u64i, !cir.ptr<!u64i> loc(#loc290)
          cir.yield loc(#loc284)
        } loc(#loc284)
      } loc(#loc284)
      %9 = cir.load %0 : !cir.ptr<!cir.ptr<!s8i>>, !cir.ptr<!s8i> loc(#loc163)
      cir.call @printLine(%9) : (!cir.ptr<!s8i>) -> () loc(#loc164)
      %10 = cir.get_global @free : !cir.ptr<!cir.func<!void (!cir.ptr<!void>)>> loc(#loc165)
      %11 = cir.load %0 : !cir.ptr<!cir.ptr<!s8i>>, !cir.ptr<!s8i> loc(#loc166)
      %12 = cir.cast(bitcast, %11 : !cir.ptr<!s8i>), !cir.ptr<!void> loc(#loc166)
      cir.call @free(%12) : (!cir.ptr<!void>) -> () extra(#fn_attr) loc(#loc165)
    } loc(#loc280)
    cir.return loc(#loc108)
  } loc(#loc267)
  cir.func no_proto internal private @goodG2B2() extra(#fn_attr1) {
    %0 = cir.alloca !cir.ptr<!s8i>, !cir.ptr<!cir.ptr<!s8i>>, ["data"] {alignment = 8 : i64} loc(#loc292)
    %1 = cir.const #cir.ptr<null> : !cir.ptr<!s8i> loc(#loc171)
    cir.store %1, %0 : !cir.ptr<!s8i>, !cir.ptr<!cir.ptr<!s8i>> loc(#loc293)
    cir.scope {
      %2 = cir.const #cir.int<5> : !s32i loc(#loc175)
      %3 = cir.const #cir.int<5> : !s32i loc(#loc176)
      %4 = cir.cmp(eq, %2, %3) : !s32i, !cir.bool loc(#loc295)
      cir.if %4 {
        %5 = cir.get_global @malloc : !cir.ptr<!cir.func<!cir.ptr<!void> (!u64i)>> loc(#loc178)
        %6 = cir.const #cir.int<10> : !s32i loc(#loc179)
        %7 = cir.const #cir.int<1> : !s32i loc(#loc180)
        %8 = cir.binop(add, %6, %7) nsw : !s32i loc(#loc179)
        %9 = cir.cast(integral, %8 : !s32i), !u64i loc(#loc179)
        %10 = cir.const #cir.int<1> : !u64i loc(#loc297)
        %11 = cir.binop(mul, %9, %10) : !u64i loc(#loc298)
        %12 = cir.call @malloc(%11) : (!u64i) -> !cir.ptr<!void> extra(#fn_attr) loc(#loc178)
        %13 = cir.cast(bitcast, %12 : !cir.ptr<!void>), !cir.ptr<!s8i> loc(#loc299)
        cir.store %13, %0 : !cir.ptr<!s8i>, !cir.ptr<!cir.ptr<!s8i>> loc(#loc300)
        cir.scope {
          %14 = cir.load %0 : !cir.ptr<!cir.ptr<!s8i>>, !cir.ptr<!s8i> loc(#loc188)
          %15 = cir.const #cir.ptr<null> : !cir.ptr<!void> loc(#loc189)
          %16 = cir.cast(bitcast, %15 : !cir.ptr<!void>), !cir.ptr<!s8i> loc(#loc189)
          %17 = cir.cmp(eq, %14, %16) : !cir.ptr<!s8i>, !cir.bool loc(#loc302)
          cir.if %17 {
            %18 = cir.get_global @exit : !cir.ptr<!cir.func<!void (!s32i)>> loc(#loc191)
            %19 = cir.const #cir.int<1> : !s32i loc(#loc192)
            %20 = cir.unary(minus, %19) : !s32i, !s32i loc(#loc193)
            cir.call @exit(%20) : (!s32i) -> () extra(#fn_attr) loc(#loc191)
          } loc(#loc303)
        } loc(#loc301)
      } loc(#loc296)
    } loc(#loc294)
    cir.scope {
      %2 = cir.alloca !cir.array<!s8i x 11>, !cir.ptr<!cir.array<!s8i x 11>>, ["source"] {alignment = 1 : i64} loc(#loc224)
      %3 = cir.alloca !u64i, !cir.ptr<!u64i>, ["i"] {alignment = 8 : i64} loc(#loc305)
      %4 = cir.alloca !u64i, !cir.ptr<!u64i>, ["sourceLen"] {alignment = 8 : i64} loc(#loc306)
      %5 = cir.get_global @__const.goodG2B2.source : !cir.ptr<!cir.array<!s8i x 11>> loc(#loc224)
      cir.copy %5 to %2 : !cir.ptr<!cir.array<!s8i x 11>> loc(#loc224)
      %6 = cir.get_global @strlen : !cir.ptr<!cir.func<!u64i (!cir.ptr<!s8i>)>> loc(#loc199)
      %7 = cir.cast(array_to_ptrdecay, %2 : !cir.ptr<!cir.array<!s8i x 11>>), !cir.ptr<!s8i> loc(#loc200)
      %8 = cir.call @strlen(%7) : (!cir.ptr<!s8i>) -> !u64i extra(#fn_attr) loc(#loc199)
      cir.store %8, %4 : !u64i, !cir.ptr<!u64i> loc(#loc307)
      cir.scope {
        %13 = cir.const #cir.int<0> : !s32i loc(#loc205)
        %14 = cir.cast(integral, %13 : !s32i), !u64i loc(#loc205)
        cir.store %14, %3 : !u64i, !cir.ptr<!u64i> loc(#loc309)
        cir.for : cond {
          %15 = cir.load %3 : !cir.ptr<!u64i>, !u64i loc(#loc207)
          %16 = cir.load %4 : !cir.ptr<!u64i>, !u64i loc(#loc208)
          %17 = cir.const #cir.int<1> : !s32i loc(#loc209)
          %18 = cir.cast(integral, %17 : !s32i), !u64i loc(#loc209)
          %19 = cir.binop(add, %16, %18) : !u64i loc(#loc310)
          %20 = cir.cmp(lt, %15, %19) : !u64i, !cir.bool loc(#loc311)
          cir.condition(%20) loc(#loc210)
        } body {
          cir.scope {
            %15 = cir.load %3 : !cir.ptr<!u64i>, !u64i loc(#loc212)
            %16 = cir.cast(array_to_ptrdecay, %2 : !cir.ptr<!cir.array<!s8i x 11>>), !cir.ptr<!s8i> loc(#loc213)
            %17 = cir.ptr_stride(%16 : !cir.ptr<!s8i>, %15 : !u64i), !cir.ptr<!s8i> loc(#loc213)
            %18 = cir.load %17 : !cir.ptr<!s8i>, !s8i loc(#loc213)
            %19 = cir.load %0 : !cir.ptr<!cir.ptr<!s8i>>, !cir.ptr<!s8i> loc(#loc214)
            %20 = cir.load %3 : !cir.ptr<!u64i>, !u64i loc(#loc215)
            %21 = cir.ptr_stride(%19 : !cir.ptr<!s8i>, %20 : !u64i), !cir.ptr<!s8i> loc(#loc216)
            cir.store %18, %21 : !s8i, !cir.ptr<!s8i> loc(#loc313)
          } loc(#loc312)
          cir.yield loc(#loc204)
        } step {
          %15 = cir.load %3 : !cir.ptr<!u64i>, !u64i loc(#loc218)
          %16 = cir.unary(inc, %15) : !u64i, !u64i loc(#loc219)
          cir.store %16, %3 : !u64i, !cir.ptr<!u64i> loc(#loc314)
          cir.yield loc(#loc308)
        } loc(#loc308)
      } loc(#loc308)
      %9 = cir.load %0 : !cir.ptr<!cir.ptr<!s8i>>, !cir.ptr<!s8i> loc(#loc220)
      cir.call @printLine(%9) : (!cir.ptr<!s8i>) -> () loc(#loc221)
      %10 = cir.get_global @free : !cir.ptr<!cir.func<!void (!cir.ptr<!void>)>> loc(#loc222)
      %11 = cir.load %0 : !cir.ptr<!cir.ptr<!s8i>>, !cir.ptr<!s8i> loc(#loc223)
      %12 = cir.cast(bitcast, %11 : !cir.ptr<!s8i>), !cir.ptr<!void> loc(#loc223)
      cir.call @free(%12) : (!cir.ptr<!void>) -> () extra(#fn_attr) loc(#loc222)
    } loc(#loc304)
    cir.return loc(#loc168)
  } loc(#loc291)
} loc(#loc)
#loc = loc("/home/ladisgin/git_proj/juliet-c/testcases/CWE122_Heap_Based_Buffer_Overflow/s06/CWE122_Heap_Based_Buffer_Overflow__c_CWE193_char_loop_06.c":0:0)
#loc1 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE193_char_loop_06.c":104:9)
#loc2 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE193_char_loop_06.c":104:29)
#loc3 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE193_char_loop_06.c":78:9)
#loc4 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE193_char_loop_06.c":78:29)
#loc5 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE193_char_loop_06.c":43:9)
#loc6 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE193_char_loop_06.c":43:29)
#loc7 = loc("/usr/include/stdlib.h":672:1)
#loc8 = loc("/usr/include/stdlib.h":672:45)
#loc9 = loc("/usr/include/stdlib.h":756:1)
#loc10 = loc("/usr/include/stdlib.h":756:70)
#loc11 = loc("/usr/include/string.h":407:1)
#loc12 = loc("/usr/include/string.h":408:33)
#loc13 = loc("../../../testcasesupport/std_testcase_io.h":14:1)
#loc14 = loc("../../../testcasesupport/std_testcase_io.h":14:33)
#loc15 = loc("/usr/include/stdlib.h":687:1)
#loc16 = loc("/usr/include/stdlib.h":687:32)
#loc17 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE193_char_loop_06.c":32:1)
#loc18 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE193_char_loop_06.c":55:1)
#loc19 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE193_char_loop_06.c":34:5)
#loc20 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE193_char_loop_06.c":34:12)
#loc21 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE193_char_loop_06.c":35:12)
#loc22 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE193_char_loop_06.c":35:5)
#loc23 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE193_char_loop_06.c":36:5)
#loc24 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE193_char_loop_06.c":41:5)
#loc25 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE193_char_loop_06.c":36:8)
#loc26 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE193_char_loop_06.c":36:27)
#loc27 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE193_char_loop_06.c":37:5)
#loc28 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE193_char_loop_06.c":39:24)
#loc29 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE193_char_loop_06.c":39:31)
#loc30 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE193_char_loop_06.c":39:34)
#loc31 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE193_char_loop_06.c":39:45)
#loc32 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE193_char_loop_06.c":39:46)
#loc33 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE193_char_loop_06.c":39:9)
#loc34 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE193_char_loop_06.c":40:9)
#loc35 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE193_char_loop_06.c":40:37)
#loc36 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE193_char_loop_06.c":40:13)
#loc37 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE193_char_loop_06.c":40:21)
#loc38 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE193_char_loop_06.c":40:27)
#loc39 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE193_char_loop_06.c":40:28)
#loc40 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE193_char_loop_06.c":40:34)
#loc41 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE193_char_loop_06.c":40:33)
#loc42 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE193_char_loop_06.c":42:5)
#loc43 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE193_char_loop_06.c":54:5)
#loc44 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE193_char_loop_06.c":44:9)
#loc45 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE193_char_loop_06.c":44:16)
#loc46 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE193_char_loop_06.c":44:19)
#loc47 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE193_char_loop_06.c":45:21)
#loc48 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE193_char_loop_06.c":45:28)
#loc49 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE193_char_loop_06.c":45:9)
#loc50 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE193_char_loop_06.c":45:34)
#loc51 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE193_char_loop_06.c":48:9)
#loc52 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE193_char_loop_06.c":51:9)
#loc53 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE193_char_loop_06.c":48:18)
#loc54 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE193_char_loop_06.c":48:14)
#loc55 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE193_char_loop_06.c":48:21)
#loc56 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE193_char_loop_06.c":48:25)
#loc57 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE193_char_loop_06.c":48:37)
#loc58 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE193_char_loop_06.c":48:23)
#loc59 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE193_char_loop_06.c":49:9)
#loc60 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE193_char_loop_06.c":50:30)
#loc61 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE193_char_loop_06.c":50:23)
#loc62 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE193_char_loop_06.c":50:13)
#loc63 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE193_char_loop_06.c":50:18)
#loc64 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE193_char_loop_06.c":50:19)
#loc65 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE193_char_loop_06.c":50:31)
#loc66 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE193_char_loop_06.c":48:41)
#loc67 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE193_char_loop_06.c":48:40)
#loc68 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE193_char_loop_06.c":52:19)
#loc69 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE193_char_loop_06.c":52:9)
#loc70 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE193_char_loop_06.c":53:9)
#loc71 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE193_char_loop_06.c":53:14)
#loc72 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE193_char_loop_06.c":118:1)
#loc73 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE193_char_loop_06.c":122:1)
#loc74 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE193_char_loop_06.c":120:5)
#loc75 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE193_char_loop_06.c":120:14)
#loc76 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE193_char_loop_06.c":121:5)
#loc77 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE193_char_loop_06.c":121:14)
#loc78 = loc("/usr/include/stdlib.h":575:1)
#loc79 = loc("/usr/include/stdlib.h":575:41)
#loc80 = loc("/usr/include/time.h":76:1)
#loc81 = loc("/usr/include/time.h":76:38)
#loc82 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE193_char_loop_06.c":139:15)
#loc83 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE193_char_loop_06.c":141:15)
#loc84 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE193_char_loop_06.c":144:15)
#loc85 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE193_char_loop_06.c":146:15)
#loc86 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE193_char_loop_06.c":134:1)
#loc87 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE193_char_loop_06.c":149:1)
#loc92 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE193_char_loop_06.c":135:1)
#loc93 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE193_char_loop_06.c":137:27)
#loc94 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE193_char_loop_06.c":137:22)
#loc95 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE193_char_loop_06.c":137:5)
#loc96 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE193_char_loop_06.c":139:5)
#loc97 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE193_char_loop_06.c":140:5)
#loc98 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE193_char_loop_06.c":140:67)
#loc99 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE193_char_loop_06.c":141:5)
#loc100 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE193_char_loop_06.c":144:5)
#loc101 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE193_char_loop_06.c":145:5)
#loc102 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE193_char_loop_06.c":145:66)
#loc103 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE193_char_loop_06.c":146:5)
#loc104 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE193_char_loop_06.c":148:12)
#loc105 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE193_char_loop_06.c":148:5)
#loc106 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE193_char_loop_06.c":69:19)
#loc107 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE193_char_loop_06.c":62:1)
#loc108 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE193_char_loop_06.c":90:1)
#loc109 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE193_char_loop_06.c":64:5)
#loc110 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE193_char_loop_06.c":64:12)
#loc111 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE193_char_loop_06.c":65:12)
#loc112 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE193_char_loop_06.c":65:5)
#loc113 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE193_char_loop_06.c":66:5)
#loc114 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE193_char_loop_06.c":76:5)
#loc115 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE193_char_loop_06.c":66:8)
#loc116 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE193_char_loop_06.c":66:27)
#loc117 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE193_char_loop_06.c":67:5)
#loc118 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE193_char_loop_06.c":70:5)
#loc119 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE193_char_loop_06.c":72:5)
#loc120 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE193_char_loop_06.c":69:9)
#loc121 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE193_char_loop_06.c":74:24)
#loc122 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE193_char_loop_06.c":74:32)
#loc123 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE193_char_loop_06.c":74:35)
#loc124 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE193_char_loop_06.c":74:38)
#loc125 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE193_char_loop_06.c":74:49)
#loc126 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE193_char_loop_06.c":74:31)
#loc127 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE193_char_loop_06.c":74:50)
#loc128 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE193_char_loop_06.c":74:9)
#loc129 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE193_char_loop_06.c":75:9)
#loc130 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE193_char_loop_06.c":75:37)
#loc131 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE193_char_loop_06.c":75:13)
#loc132 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE193_char_loop_06.c":75:21)
#loc133 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE193_char_loop_06.c":75:27)
#loc134 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE193_char_loop_06.c":75:28)
#loc135 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE193_char_loop_06.c":75:34)
#loc136 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE193_char_loop_06.c":75:33)
#loc137 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE193_char_loop_06.c":77:5)
#loc138 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE193_char_loop_06.c":89:5)
#loc139 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE193_char_loop_06.c":79:9)
#loc140 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE193_char_loop_06.c":79:16)
#loc141 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE193_char_loop_06.c":79:19)
#loc142 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE193_char_loop_06.c":80:21)
#loc143 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE193_char_loop_06.c":80:28)
#loc144 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE193_char_loop_06.c":80:9)
#loc145 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE193_char_loop_06.c":80:34)
#loc146 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE193_char_loop_06.c":83:9)
#loc147 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE193_char_loop_06.c":86:9)
#loc148 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE193_char_loop_06.c":83:18)
#loc149 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE193_char_loop_06.c":83:14)
#loc150 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE193_char_loop_06.c":83:21)
#loc151 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE193_char_loop_06.c":83:25)
#loc152 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE193_char_loop_06.c":83:37)
#loc153 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE193_char_loop_06.c":83:23)
#loc154 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE193_char_loop_06.c":84:9)
#loc155 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE193_char_loop_06.c":85:30)
#loc156 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE193_char_loop_06.c":85:23)
#loc157 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE193_char_loop_06.c":85:13)
#loc158 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE193_char_loop_06.c":85:18)
#loc159 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE193_char_loop_06.c":85:19)
#loc160 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE193_char_loop_06.c":85:31)
#loc161 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE193_char_loop_06.c":83:41)
#loc162 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE193_char_loop_06.c":83:40)
#loc163 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE193_char_loop_06.c":87:19)
#loc164 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE193_char_loop_06.c":87:9)
#loc165 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE193_char_loop_06.c":88:9)
#loc166 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE193_char_loop_06.c":88:14)
#loc167 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE193_char_loop_06.c":93:1)
#loc168 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE193_char_loop_06.c":116:1)
#loc169 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE193_char_loop_06.c":95:5)
#loc170 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE193_char_loop_06.c":95:12)
#loc171 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE193_char_loop_06.c":96:12)
#loc172 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE193_char_loop_06.c":96:5)
#loc173 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE193_char_loop_06.c":97:5)
#loc174 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE193_char_loop_06.c":102:5)
#loc175 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE193_char_loop_06.c":97:8)
#loc176 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE193_char_loop_06.c":97:27)
#loc177 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE193_char_loop_06.c":98:5)
#loc178 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE193_char_loop_06.c":100:24)
#loc179 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE193_char_loop_06.c":100:32)
#loc180 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE193_char_loop_06.c":100:35)
#loc181 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE193_char_loop_06.c":100:38)
#loc182 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE193_char_loop_06.c":100:49)
#loc183 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE193_char_loop_06.c":100:31)
#loc184 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE193_char_loop_06.c":100:50)
#loc185 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE193_char_loop_06.c":100:9)
#loc186 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE193_char_loop_06.c":101:9)
#loc187 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE193_char_loop_06.c":101:37)
#loc188 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE193_char_loop_06.c":101:13)
#loc189 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE193_char_loop_06.c":101:21)
#loc190 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE193_char_loop_06.c":101:27)
#loc191 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE193_char_loop_06.c":101:28)
#loc192 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE193_char_loop_06.c":101:34)
#loc193 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE193_char_loop_06.c":101:33)
#loc194 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE193_char_loop_06.c":103:5)
#loc195 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE193_char_loop_06.c":115:5)
#loc196 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE193_char_loop_06.c":105:9)
#loc197 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE193_char_loop_06.c":105:16)
#loc198 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE193_char_loop_06.c":105:19)
#loc199 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE193_char_loop_06.c":106:21)
#loc200 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE193_char_loop_06.c":106:28)
#loc201 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE193_char_loop_06.c":106:9)
#loc202 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE193_char_loop_06.c":106:34)
#loc203 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE193_char_loop_06.c":109:9)
#loc204 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE193_char_loop_06.c":112:9)
#loc205 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE193_char_loop_06.c":109:18)
#loc206 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE193_char_loop_06.c":109:14)
#loc207 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE193_char_loop_06.c":109:21)
#loc208 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE193_char_loop_06.c":109:25)
#loc209 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE193_char_loop_06.c":109:37)
#loc210 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE193_char_loop_06.c":109:23)
#loc211 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE193_char_loop_06.c":110:9)
#loc212 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE193_char_loop_06.c":111:30)
#loc213 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE193_char_loop_06.c":111:23)
#loc214 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE193_char_loop_06.c":111:13)
#loc215 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE193_char_loop_06.c":111:18)
#loc216 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE193_char_loop_06.c":111:19)
#loc217 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE193_char_loop_06.c":111:31)
#loc218 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE193_char_loop_06.c":109:41)
#loc219 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE193_char_loop_06.c":109:40)
#loc220 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE193_char_loop_06.c":113:19)
#loc221 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE193_char_loop_06.c":113:9)
#loc222 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE193_char_loop_06.c":114:9)
#loc223 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE193_char_loop_06.c":114:14)
#loc224 = loc(fused[#loc1, #loc2])
#loc225 = loc(fused[#loc3, #loc4])
#loc226 = loc(fused[#loc5, #loc6])
#loc227 = loc(fused[#loc7, #loc8])
#loc228 = loc(fused[#loc9, #loc10])
#loc229 = loc(fused[#loc11, #loc12])
#loc230 = loc(fused[#loc13, #loc14])
#loc231 = loc(fused[#loc15, #loc16])
#loc232 = loc(fused[#loc17, #loc18])
#loc233 = loc(fused[#loc19, #loc20])
#loc234 = loc(fused[#loc22, #loc21])
#loc235 = loc(fused[#loc23, #loc24])
#loc236 = loc(fused[#loc25, #loc26])
#loc237 = loc(fused[#loc27, #loc24])
#loc238 = loc(fused[#loc30, #loc31])
#loc239 = loc(fused[#loc29, #loc31])
#loc240 = loc(fused[#loc28, #loc32])
#loc241 = loc(fused[#loc33, #loc32])
#loc242 = loc(fused[#loc34, #loc35])
#loc243 = loc(fused[#loc36, #loc37])
#loc244 = loc(fused[#loc38, #loc35])
#loc245 = loc(fused[#loc42, #loc43])
#loc246 = loc(fused[#loc44, #loc45])
#loc247 = loc(fused[#loc44, #loc46])
#loc248 = loc(fused[#loc49, #loc50])
#loc249 = loc(fused[#loc51, #loc52])
#loc250 = loc(fused[#loc54, #loc53])
#loc251 = loc(fused[#loc56, #loc57])
#loc252 = loc(fused[#loc55, #loc57])
#loc253 = loc(fused[#loc59, #loc52])
#loc254 = loc(fused[#loc62, #loc65])
#loc255 = loc(fused[#loc67, #loc66])
#loc256 = loc(fused[#loc72, #loc73])
#loc257 = loc(fused[#loc74, #loc75])
#loc258 = loc(fused[#loc76, #loc77])
#loc259 = loc(fused[#loc78, #loc79])
#loc260 = loc(fused[#loc80, #loc81])
#loc261 = loc(fused[#loc86, #loc87])
#loc264 = loc(fused[#loc97, #loc98])
#loc265 = loc(fused[#loc101, #loc102])
#loc266 = loc(fused[#loc105, #loc104])
#loc267 = loc(fused[#loc107, #loc108])
#loc268 = loc(fused[#loc109, #loc110])
#loc269 = loc(fused[#loc112, #loc111])
#loc270 = loc(fused[#loc113, #loc114])
#loc271 = loc(fused[#loc115, #loc116])
#loc272 = loc(fused[#loc117, #loc118, #loc119, #loc114])
#loc273 = loc(fused[#loc124, #loc125])
#loc274 = loc(fused[#loc126, #loc125])
#loc275 = loc(fused[#loc121, #loc127])
#loc276 = loc(fused[#loc128, #loc127])
#loc277 = loc(fused[#loc129, #loc130])
#loc278 = loc(fused[#loc131, #loc132])
#loc279 = loc(fused[#loc133, #loc130])
#loc280 = loc(fused[#loc137, #loc138])
#loc281 = loc(fused[#loc139, #loc140])
#loc282 = loc(fused[#loc139, #loc141])
#loc283 = loc(fused[#loc144, #loc145])
#loc284 = loc(fused[#loc146, #loc147])
#loc285 = loc(fused[#loc149, #loc148])
#loc286 = loc(fused[#loc151, #loc152])
#loc287 = loc(fused[#loc150, #loc152])
#loc288 = loc(fused[#loc154, #loc147])
#loc289 = loc(fused[#loc157, #loc160])
#loc290 = loc(fused[#loc162, #loc161])
#loc291 = loc(fused[#loc167, #loc168])
#loc292 = loc(fused[#loc169, #loc170])
#loc293 = loc(fused[#loc172, #loc171])
#loc294 = loc(fused[#loc173, #loc174])
#loc295 = loc(fused[#loc175, #loc176])
#loc296 = loc(fused[#loc177, #loc174])
#loc297 = loc(fused[#loc181, #loc182])
#loc298 = loc(fused[#loc183, #loc182])
#loc299 = loc(fused[#loc178, #loc184])
#loc300 = loc(fused[#loc185, #loc184])
#loc301 = loc(fused[#loc186, #loc187])
#loc302 = loc(fused[#loc188, #loc189])
#loc303 = loc(fused[#loc190, #loc187])
#loc304 = loc(fused[#loc194, #loc195])
#loc305 = loc(fused[#loc196, #loc197])
#loc306 = loc(fused[#loc196, #loc198])
#loc307 = loc(fused[#loc201, #loc202])
#loc308 = loc(fused[#loc203, #loc204])
#loc309 = loc(fused[#loc206, #loc205])
#loc310 = loc(fused[#loc208, #loc209])
#loc311 = loc(fused[#loc207, #loc209])
#loc312 = loc(fused[#loc211, #loc204])
#loc313 = loc(fused[#loc214, #loc217])
#loc314 = loc(fused[#loc219, #loc218])
