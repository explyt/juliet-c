!s32i = !cir.int<s, 32>
!s64i = !cir.int<s, 64>
!s8i = !cir.int<s, 8>
!u32i = !cir.int<u, 32>
#fn_attr = #cir<extra({nothrow = #cir.nothrow})>
#fn_attr1 = #cir<extra({inline = #cir.inline<no>, optnone = #cir.optnone})>
#loc5 = loc("CWE190_Integer_Overflow__char_rand_square_43.cpp":27:23)
#loc6 = loc("CWE190_Integer_Overflow__char_rand_square_43.cpp":27:29)
#loc28 = loc("CWE190_Integer_Overflow__char_rand_square_43.cpp":50:27)
#loc29 = loc("CWE190_Integer_Overflow__char_rand_square_43.cpp":50:33)
#loc49 = loc("CWE190_Integer_Overflow__char_rand_square_43.cpp":69:27)
#loc50 = loc("CWE190_Integer_Overflow__char_rand_square_43.cpp":69:33)
#loc56 = loc("/usr/lib/gcc/x86_64-redhat-linux/14/../../../../include/c++/14/bits/std_abs.h":56:7)
#loc57 = loc("/usr/lib/gcc/x86_64-redhat-linux/14/../../../../include/c++/14/bits/std_abs.h":56:12)
#loc104 = loc("CWE190_Integer_Overflow__char_rand_square_43.cpp":111:10)
#loc105 = loc("CWE190_Integer_Overflow__char_rand_square_43.cpp":111:14)
#loc106 = loc("CWE190_Integer_Overflow__char_rand_square_43.cpp":111:20)
#loc107 = loc("CWE190_Integer_Overflow__char_rand_square_43.cpp":111:32)
#loc122 = loc(fused[#loc5, #loc6])
#loc131 = loc(fused[#loc28, #loc29])
#loc139 = loc(fused[#loc49, #loc50])
#loc142 = loc(fused[#loc56, #loc57])
#loc156 = loc(fused[#loc104, #loc105])
#loc157 = loc(fused[#loc106, #loc107])
module @"/home/ladisgin/git_proj/juliet-c/testcases/CWE190_Integer_Overflow/s01/CWE190_Integer_Overflow__char_rand_square_43.cpp" attributes {cir.lang = #cir.lang<cxx>, cir.sob = #cir.signed_overflow_behavior<undefined>, cir.triple = "x86_64-unknown-linux-gnu", dlti.dl_spec = #dlti.dl_spec<f80 = dense<128> : vector<2xi64>, i128 = dense<128> : vector<2xi64>, i8 = dense<8> : vector<2xi64>, i1 = dense<8> : vector<2xi64>, !llvm.ptr = dense<64> : vector<4xi64>, f64 = dense<64> : vector<2xi64>, f16 = dense<16> : vector<2xi64>, i32 = dense<32> : vector<2xi64>, i16 = dense<16> : vector<2xi64>, i64 = dense<64> : vector<2xi64>, !llvm.ptr<272> = dense<64> : vector<4xi64>, !llvm.ptr<271> = dense<32> : vector<4xi64>, !llvm.ptr<270> = dense<32> : vector<4xi64>, f128 = dense<128> : vector<2xi64>, "dlti.stack_alignment" = 128 : i64, "dlti.endianness" = "little">} {
  cir.func private @rand() -> !s32i extra(#fn_attr) loc(#loc120)
  cir.func internal private @_ZN44CWE190_Integer_Overflow__char_rand_square_43L9badSourceERc(%arg0: !cir.ptr<!s8i> loc(fused[#loc5, #loc6])) extra(#fn_attr1) {
    %0 = cir.alloca !cir.ptr<!s8i>, !cir.ptr<!cir.ptr<!s8i>>, ["data", init, const] {alignment = 8 : i64} loc(#loc122)
    cir.store %arg0, %0 : !cir.ptr<!s8i>, !cir.ptr<!cir.ptr<!s8i>> loc(#loc7)
    %1 = cir.call @rand() : () -> !s32i extra(#fn_attr) loc(#loc8)
    %2 = cir.const #cir.int<1> : !s32i loc(#loc8)
    %3 = cir.binop(and, %1, %2) : !s32i loc(#loc8)
    %4 = cir.cast(int_to_bool, %3 : !s32i), !cir.bool loc(#loc8)
    %5 = cir.ternary(%4, true {
      %9 = cir.call @rand() : () -> !s32i extra(#fn_attr) loc(#loc8)
      %10 = cir.cast(integral, %9 : !s32i), !u32i loc(#loc8)
      %11 = cir.const #cir.int<30> : !s32i loc(#loc8)
      %12 = cir.shift(left, %10 : !u32i, %11 : !s32i) -> !u32i loc(#loc8)
      %13 = cir.call @rand() : () -> !s32i extra(#fn_attr) loc(#loc8)
      %14 = cir.cast(integral, %13 : !s32i), !u32i loc(#loc8)
      %15 = cir.const #cir.int<15> : !s32i loc(#loc8)
      %16 = cir.shift(left, %14 : !u32i, %15 : !s32i) -> !u32i loc(#loc8)
      %17 = cir.binop(xor, %12, %16) : !u32i loc(#loc8)
      %18 = cir.call @rand() : () -> !s32i extra(#fn_attr) loc(#loc8)
      %19 = cir.cast(integral, %18 : !s32i), !u32i loc(#loc8)
      %20 = cir.binop(xor, %17, %19) : !u32i loc(#loc8)
      cir.yield %20 : !u32i loc(#loc8)
    }, false {
      %9 = cir.call @rand() : () -> !s32i extra(#fn_attr) loc(#loc8)
      %10 = cir.cast(integral, %9 : !s32i), !u32i loc(#loc8)
      %11 = cir.const #cir.int<30> : !s32i loc(#loc8)
      %12 = cir.shift(left, %10 : !u32i, %11 : !s32i) -> !u32i loc(#loc8)
      %13 = cir.call @rand() : () -> !s32i extra(#fn_attr) loc(#loc8)
      %14 = cir.cast(integral, %13 : !s32i), !u32i loc(#loc8)
      %15 = cir.const #cir.int<15> : !s32i loc(#loc8)
      %16 = cir.shift(left, %14 : !u32i, %15 : !s32i) -> !u32i loc(#loc8)
      %17 = cir.binop(xor, %12, %16) : !u32i loc(#loc8)
      %18 = cir.call @rand() : () -> !s32i extra(#fn_attr) loc(#loc8)
      %19 = cir.cast(integral, %18 : !s32i), !u32i loc(#loc8)
      %20 = cir.binop(xor, %17, %19) : !u32i loc(#loc8)
      %21 = cir.unary(minus, %20) : !u32i, !u32i loc(#loc8)
      %22 = cir.const #cir.int<1> : !s32i loc(#loc8)
      %23 = cir.cast(integral, %22 : !s32i), !u32i loc(#loc8)
      %24 = cir.binop(sub, %21, %23) : !u32i loc(#loc8)
      cir.yield %24 : !u32i loc(#loc8)
    }) : (!cir.bool) -> !u32i loc(#loc8)
    %6 = cir.cast(integral, %5 : !u32i), !s32i loc(#loc8)
    %7 = cir.cast(integral, %6 : !s32i), !s8i loc(#loc8)
    %8 = cir.load %0 : !cir.ptr<!cir.ptr<!s8i>>, !cir.ptr<!s8i> loc(#loc9)
    cir.store %7, %8 : !s8i, !cir.ptr<!s8i> loc(#loc123)
    cir.return loc(#loc4)
  } loc(#loc121)
  cir.func private @printHexCharLine(!s8i) loc(#loc124)
  cir.func @_ZN44CWE190_Integer_Overflow__char_rand_square_433badEv() extra(#fn_attr1) {
    %0 = cir.alloca !s8i, !cir.ptr<!s8i>, ["data"] {alignment = 1 : i64} loc(#loc126)
    %1 = cir.const #cir.int<32> : !s8i loc(#loc16)
    cir.store %1, %0 : !s8i, !cir.ptr<!s8i> loc(#loc127)
    cir.call @_ZN44CWE190_Integer_Overflow__char_rand_square_43L9badSourceERc(%0) : (!cir.ptr<!s8i>) -> () loc(#loc18)
    cir.scope {
      %2 = cir.alloca !s8i, !cir.ptr<!s8i>, ["result", init] {alignment = 1 : i64} loc(#loc129)
      %3 = cir.load %0 : !cir.ptr<!s8i>, !s8i loc(#loc23)
      %4 = cir.cast(integral, %3 : !s8i), !s32i loc(#loc23)
      %5 = cir.load %0 : !cir.ptr<!s8i>, !s8i loc(#loc22)
      %6 = cir.cast(integral, %5 : !s8i), !s32i loc(#loc22)
      %7 = cir.binop(mul, %4, %6) nsw : !s32i loc(#loc23)
      %8 = cir.cast(integral, %7 : !s32i), !s8i loc(#loc23)
      cir.store %8, %2 : !s8i, !cir.ptr<!s8i> loc(#loc129)
      %9 = cir.load %2 : !cir.ptr<!s8i>, !s8i loc(#loc24)
      cir.call @printHexCharLine(%9) : (!s8i) -> () loc(#loc25)
    } loc(#loc128)
    cir.return loc(#loc13)
  } loc(#loc125)
  cir.func internal private @_ZN44CWE190_Integer_Overflow__char_rand_square_43L13goodG2BSourceERc(%arg0: !cir.ptr<!s8i> loc(fused[#loc28, #loc29])) extra(#fn_attr1) {
    %0 = cir.alloca !cir.ptr<!s8i>, !cir.ptr<!cir.ptr<!s8i>>, ["data", init, const] {alignment = 8 : i64} loc(#loc131)
    cir.store %arg0, %0 : !cir.ptr<!s8i>, !cir.ptr<!cir.ptr<!s8i>> loc(#loc30)
    %1 = cir.const #cir.int<2> : !s32i loc(#loc31)
    %2 = cir.cast(integral, %1 : !s32i), !s8i loc(#loc31)
    %3 = cir.load %0 : !cir.ptr<!cir.ptr<!s8i>>, !cir.ptr<!s8i> loc(#loc32)
    cir.store %2, %3 : !s8i, !cir.ptr<!s8i> loc(#loc132)
    cir.return loc(#loc27)
  } loc(#loc130)
  cir.func internal private @_ZN44CWE190_Integer_Overflow__char_rand_square_43L7goodG2BEv() extra(#fn_attr1) {
    %0 = cir.alloca !s8i, !cir.ptr<!s8i>, ["data"] {alignment = 1 : i64} loc(#loc134)
    %1 = cir.const #cir.int<32> : !s8i loc(#loc37)
    cir.store %1, %0 : !s8i, !cir.ptr<!s8i> loc(#loc135)
    cir.call @_ZN44CWE190_Integer_Overflow__char_rand_square_43L13goodG2BSourceERc(%0) : (!cir.ptr<!s8i>) -> () loc(#loc39)
    cir.scope {
      %2 = cir.alloca !s8i, !cir.ptr<!s8i>, ["result", init] {alignment = 1 : i64} loc(#loc137)
      %3 = cir.load %0 : !cir.ptr<!s8i>, !s8i loc(#loc44)
      %4 = cir.cast(integral, %3 : !s8i), !s32i loc(#loc44)
      %5 = cir.load %0 : !cir.ptr<!s8i>, !s8i loc(#loc43)
      %6 = cir.cast(integral, %5 : !s8i), !s32i loc(#loc43)
      %7 = cir.binop(mul, %4, %6) nsw : !s32i loc(#loc44)
      %8 = cir.cast(integral, %7 : !s32i), !s8i loc(#loc44)
      cir.store %8, %2 : !s8i, !cir.ptr<!s8i> loc(#loc137)
      %9 = cir.load %2 : !cir.ptr<!s8i>, !s8i loc(#loc45)
      cir.call @printHexCharLine(%9) : (!s8i) -> () loc(#loc46)
    } loc(#loc136)
    cir.return loc(#loc34)
  } loc(#loc133)
  cir.func internal private @_ZN44CWE190_Integer_Overflow__char_rand_square_43L13goodB2GSourceERc(%arg0: !cir.ptr<!s8i> loc(fused[#loc49, #loc50])) extra(#fn_attr1) {
    %0 = cir.alloca !cir.ptr<!s8i>, !cir.ptr<!cir.ptr<!s8i>>, ["data", init, const] {alignment = 8 : i64} loc(#loc139)
    cir.store %arg0, %0 : !cir.ptr<!s8i>, !cir.ptr<!cir.ptr<!s8i>> loc(#loc51)
    %1 = cir.call @rand() : () -> !s32i extra(#fn_attr) loc(#loc52)
    %2 = cir.const #cir.int<1> : !s32i loc(#loc52)
    %3 = cir.binop(and, %1, %2) : !s32i loc(#loc52)
    %4 = cir.cast(int_to_bool, %3 : !s32i), !cir.bool loc(#loc52)
    %5 = cir.ternary(%4, true {
      %9 = cir.call @rand() : () -> !s32i extra(#fn_attr) loc(#loc52)
      %10 = cir.cast(integral, %9 : !s32i), !u32i loc(#loc52)
      %11 = cir.const #cir.int<30> : !s32i loc(#loc52)
      %12 = cir.shift(left, %10 : !u32i, %11 : !s32i) -> !u32i loc(#loc52)
      %13 = cir.call @rand() : () -> !s32i extra(#fn_attr) loc(#loc52)
      %14 = cir.cast(integral, %13 : !s32i), !u32i loc(#loc52)
      %15 = cir.const #cir.int<15> : !s32i loc(#loc52)
      %16 = cir.shift(left, %14 : !u32i, %15 : !s32i) -> !u32i loc(#loc52)
      %17 = cir.binop(xor, %12, %16) : !u32i loc(#loc52)
      %18 = cir.call @rand() : () -> !s32i extra(#fn_attr) loc(#loc52)
      %19 = cir.cast(integral, %18 : !s32i), !u32i loc(#loc52)
      %20 = cir.binop(xor, %17, %19) : !u32i loc(#loc52)
      cir.yield %20 : !u32i loc(#loc52)
    }, false {
      %9 = cir.call @rand() : () -> !s32i extra(#fn_attr) loc(#loc52)
      %10 = cir.cast(integral, %9 : !s32i), !u32i loc(#loc52)
      %11 = cir.const #cir.int<30> : !s32i loc(#loc52)
      %12 = cir.shift(left, %10 : !u32i, %11 : !s32i) -> !u32i loc(#loc52)
      %13 = cir.call @rand() : () -> !s32i extra(#fn_attr) loc(#loc52)
      %14 = cir.cast(integral, %13 : !s32i), !u32i loc(#loc52)
      %15 = cir.const #cir.int<15> : !s32i loc(#loc52)
      %16 = cir.shift(left, %14 : !u32i, %15 : !s32i) -> !u32i loc(#loc52)
      %17 = cir.binop(xor, %12, %16) : !u32i loc(#loc52)
      %18 = cir.call @rand() : () -> !s32i extra(#fn_attr) loc(#loc52)
      %19 = cir.cast(integral, %18 : !s32i), !u32i loc(#loc52)
      %20 = cir.binop(xor, %17, %19) : !u32i loc(#loc52)
      %21 = cir.unary(minus, %20) : !u32i, !u32i loc(#loc52)
      %22 = cir.const #cir.int<1> : !s32i loc(#loc52)
      %23 = cir.cast(integral, %22 : !s32i), !u32i loc(#loc52)
      %24 = cir.binop(sub, %21, %23) : !u32i loc(#loc52)
      cir.yield %24 : !u32i loc(#loc52)
    }) : (!cir.bool) -> !u32i loc(#loc52)
    %6 = cir.cast(integral, %5 : !u32i), !s32i loc(#loc52)
    %7 = cir.cast(integral, %6 : !s32i), !s8i loc(#loc52)
    %8 = cir.load %0 : !cir.ptr<!cir.ptr<!s8i>>, !cir.ptr<!s8i> loc(#loc53)
    cir.store %7, %8 : !s8i, !cir.ptr<!s8i> loc(#loc140)
    cir.return loc(#loc48)
  } loc(#loc138)
  cir.func linkonce_odr @_ZSt3absl(%arg0: !s64i loc(fused[#loc56, #loc57])) -> !s64i extra(#fn_attr1) {
    %0 = cir.alloca !s64i, !cir.ptr<!s64i>, ["__i", init] {alignment = 8 : i64} loc(#loc142)
    %1 = cir.alloca !s64i, !cir.ptr<!s64i>, ["__retval"] {alignment = 8 : i64} loc(#loc55)
    cir.store %arg0, %0 : !s64i, !cir.ptr<!s64i> loc(#loc58)
    %2 = cir.load %0 : !cir.ptr<!s64i>, !s64i loc(#loc59)
    %3 = cir.abs %2 poison : !s64i loc(#loc60)
    cir.store %3, %1 : !s64i, !cir.ptr<!s64i> loc(#loc143)
    %4 = cir.load %1 : !cir.ptr<!s64i>, !s64i loc(#loc143)
    cir.return %4 : !s64i loc(#loc143)
  } loc(#loc141)
  cir.func private @sqrt(!cir.double) -> !cir.double extra(#fn_attr) loc(#loc63)
  cir.global "private" constant cir_private dsolocal @".str.4" = #cir.const_array<"data value is too large to perform arithmetic safely.\00" : !cir.array<!s8i x 54>> : !cir.array<!s8i x 54> {alignment = 1 : i64} loc(#loc64)
  cir.func internal private @_ZN44CWE190_Integer_Overflow__char_rand_square_43L7goodB2GEv() extra(#fn_attr1) {
    %0 = cir.alloca !s8i, !cir.ptr<!s8i>, ["data"] {alignment = 1 : i64} loc(#loc145)
    %1 = cir.const #cir.int<32> : !s8i loc(#loc69)
    cir.store %1, %0 : !s8i, !cir.ptr<!s8i> loc(#loc146)
    cir.call @_ZN44CWE190_Integer_Overflow__char_rand_square_43L13goodB2GSourceERc(%0) : (!cir.ptr<!s8i>) -> () loc(#loc71)
    cir.scope {
      %2 = cir.load %0 : !cir.ptr<!s8i>, !s8i loc(#loc74)
      %3 = cir.cast(integral, %2 : !s8i), !s64i loc(#loc74)
      %4 = cir.call @_ZSt3absl(%3) : (!s64i) -> !s64i loc(#loc75)
      %5 = cir.get_global @sqrt : !cir.ptr<!cir.func<!cir.double (!cir.double)>> loc(#loc76)
      %6 = cir.const #cir.int<127> : !s32i loc(#loc77)
      %7 = cir.cast(int_to_float, %6 : !s32i), !cir.double loc(#loc77)
      %8 = cir.call @sqrt(%7) : (!cir.double) -> !cir.double extra(#fn_attr) loc(#loc76)
      %9 = cir.cast(float_to_int, %8 : !cir.double), !s64i loc(#loc76)
      %10 = cir.cmp(le, %4, %9) : !s64i, !cir.bool loc(#loc148)
      cir.if %10 {
        %11 = cir.alloca !s8i, !cir.ptr<!s8i>, ["result", init] {alignment = 1 : i64} loc(#loc150)
        %12 = cir.load %0 : !cir.ptr<!s8i>, !s8i loc(#loc84)
        %13 = cir.cast(integral, %12 : !s8i), !s32i loc(#loc84)
        %14 = cir.load %0 : !cir.ptr<!s8i>, !s8i loc(#loc83)
        %15 = cir.cast(integral, %14 : !s8i), !s32i loc(#loc83)
        %16 = cir.binop(mul, %13, %15) nsw : !s32i loc(#loc84)
        %17 = cir.cast(integral, %16 : !s32i), !s8i loc(#loc84)
        cir.store %17, %11 : !s8i, !cir.ptr<!s8i> loc(#loc150)
        %18 = cir.load %11 : !cir.ptr<!s8i>, !s8i loc(#loc85)
        cir.call @printHexCharLine(%18) : (!s8i) -> () loc(#loc86)
      } else {
        %11 = cir.get_global @".str.4" : !cir.ptr<!cir.array<!s8i x 54>> loc(#loc64)
        %12 = cir.cast(array_to_ptrdecay, %11 : !cir.ptr<!cir.array<!s8i x 54>>), !cir.ptr<!s8i> loc(#loc64)
        cir.call @printLine(%12) : (!cir.ptr<!s8i>) -> () loc(#loc87)
      } loc(#loc149)
    } loc(#loc147)
    cir.return loc(#loc66)
  } loc(#loc144)
  cir.func @_ZN44CWE190_Integer_Overflow__char_rand_square_434goodEv() extra(#fn_attr1) {
    cir.call @_ZN44CWE190_Integer_Overflow__char_rand_square_43L7goodG2BEv() : () -> () loc(#loc90)
    cir.call @_ZN44CWE190_Integer_Overflow__char_rand_square_43L7goodB2GEv() : () -> () loc(#loc91)
    cir.return loc(#loc89)
  } loc(#loc151)
  cir.func private @srand(!u32i) extra(#fn_attr) loc(#loc152)
  cir.func private @time(!cir.ptr<!s64i>) -> !s64i extra(#fn_attr) loc(#loc153)
  cir.func private @printLine(!cir.ptr<!s8i>) loc(#loc154)
  cir.global "private" constant cir_private dsolocal @".str" = #cir.const_array<"Calling good()...\00" : !cir.array<!s8i x 18>> : !cir.array<!s8i x 18> {alignment = 1 : i64} loc(#loc98)
  cir.global "private" constant cir_private dsolocal @".str.1" = #cir.const_array<"Finished good()\00" : !cir.array<!s8i x 16>> : !cir.array<!s8i x 16> {alignment = 1 : i64} loc(#loc99)
  cir.global "private" constant cir_private dsolocal @".str.2" = #cir.const_array<"Calling bad()...\00" : !cir.array<!s8i x 17>> : !cir.array<!s8i x 17> {alignment = 1 : i64} loc(#loc100)
  cir.global "private" constant cir_private dsolocal @".str.3" = #cir.const_array<"Finished bad()\00" : !cir.array<!s8i x 15>> : !cir.array<!s8i x 15> {alignment = 1 : i64} loc(#loc101)
  cir.func @main(%arg0: !s32i loc(fused[#loc104, #loc105]), %arg1: !cir.ptr<!cir.ptr<!s8i>> loc(fused[#loc106, #loc107])) -> !s32i extra(#fn_attr1) {
    %0 = cir.alloca !s32i, !cir.ptr<!s32i>, ["argc", init] {alignment = 4 : i64} loc(#loc156)
    %1 = cir.alloca !cir.ptr<!cir.ptr<!s8i>>, !cir.ptr<!cir.ptr<!cir.ptr<!s8i>>>, ["argv", init] {alignment = 8 : i64} loc(#loc157)
    %2 = cir.alloca !s32i, !cir.ptr<!s32i>, ["__retval"] {alignment = 4 : i64} loc(#loc103)
    cir.store %arg0, %0 : !s32i, !cir.ptr<!s32i> loc(#loc108)
    cir.store %arg1, %1 : !cir.ptr<!cir.ptr<!s8i>>, !cir.ptr<!cir.ptr<!cir.ptr<!s8i>>> loc(#loc108)
    %3 = cir.const #cir.ptr<null> : !cir.ptr<!s64i> loc(#loc109)
    %4 = cir.call @time(%3) : (!cir.ptr<!s64i>) -> !s64i extra(#fn_attr) loc(#loc110)
    %5 = cir.cast(integral, %4 : !s64i), !u32i loc(#loc110)
    cir.call @srand(%5) : (!u32i) -> () extra(#fn_attr) loc(#loc111)
    %6 = cir.get_global @".str" : !cir.ptr<!cir.array<!s8i x 18>> loc(#loc98)
    %7 = cir.cast(array_to_ptrdecay, %6 : !cir.ptr<!cir.array<!s8i x 18>>), !cir.ptr<!s8i> loc(#loc98)
    cir.call @printLine(%7) : (!cir.ptr<!s8i>) -> () loc(#loc112)
    cir.call @_ZN44CWE190_Integer_Overflow__char_rand_square_434goodEv() : () -> () loc(#loc113)
    %8 = cir.get_global @".str.1" : !cir.ptr<!cir.array<!s8i x 16>> loc(#loc99)
    %9 = cir.cast(array_to_ptrdecay, %8 : !cir.ptr<!cir.array<!s8i x 16>>), !cir.ptr<!s8i> loc(#loc99)
    cir.call @printLine(%9) : (!cir.ptr<!s8i>) -> () loc(#loc114)
    %10 = cir.get_global @".str.2" : !cir.ptr<!cir.array<!s8i x 17>> loc(#loc100)
    %11 = cir.cast(array_to_ptrdecay, %10 : !cir.ptr<!cir.array<!s8i x 17>>), !cir.ptr<!s8i> loc(#loc100)
    cir.call @printLine(%11) : (!cir.ptr<!s8i>) -> () loc(#loc115)
    cir.call @_ZN44CWE190_Integer_Overflow__char_rand_square_433badEv() : () -> () loc(#loc116)
    %12 = cir.get_global @".str.3" : !cir.ptr<!cir.array<!s8i x 15>> loc(#loc101)
    %13 = cir.cast(array_to_ptrdecay, %12 : !cir.ptr<!cir.array<!s8i x 15>>), !cir.ptr<!s8i> loc(#loc101)
    cir.call @printLine(%13) : (!cir.ptr<!s8i>) -> () loc(#loc117)
    %14 = cir.const #cir.int<0> : !s32i loc(#loc118)
    cir.store %14, %2 : !s32i, !cir.ptr<!s32i> loc(#loc158)
    %15 = cir.load %2 : !cir.ptr<!s32i>, !s32i loc(#loc158)
    cir.return %15 : !s32i loc(#loc158)
  } loc(#loc155)
} loc(#loc)
#loc = loc("/home/ladisgin/git_proj/juliet-c/testcases/CWE190_Integer_Overflow/s01/CWE190_Integer_Overflow__char_rand_square_43.cpp":0:0)
#loc1 = loc("/usr/include/stdlib.h":573:1)
#loc2 = loc("/usr/include/stdlib.h":573:24)
#loc3 = loc("CWE190_Integer_Overflow__char_rand_square_43.cpp":27:1)
#loc4 = loc("CWE190_Integer_Overflow__char_rand_square_43.cpp":31:1)
#loc7 = loc("CWE190_Integer_Overflow__char_rand_square_43.cpp":28:1)
#loc8 = loc("CWE190_Integer_Overflow__char_rand_square_43.cpp":30:18)
#loc9 = loc("CWE190_Integer_Overflow__char_rand_square_43.cpp":30:5)
#loc10 = loc("../../../testcasesupport/std_testcase_io.h":30:1)
#loc11 = loc("../../../testcasesupport/std_testcase_io.h":30:35)
#loc12 = loc("CWE190_Integer_Overflow__char_rand_square_43.cpp":33:1)
#loc13 = loc("CWE190_Integer_Overflow__char_rand_square_43.cpp":43:1)
#loc14 = loc("CWE190_Integer_Overflow__char_rand_square_43.cpp":35:5)
#loc15 = loc("CWE190_Integer_Overflow__char_rand_square_43.cpp":35:10)
#loc16 = loc("CWE190_Integer_Overflow__char_rand_square_43.cpp":36:12)
#loc17 = loc("CWE190_Integer_Overflow__char_rand_square_43.cpp":36:5)
#loc18 = loc("CWE190_Integer_Overflow__char_rand_square_43.cpp":37:5)
#loc19 = loc("CWE190_Integer_Overflow__char_rand_square_43.cpp":38:5)
#loc20 = loc("CWE190_Integer_Overflow__char_rand_square_43.cpp":42:5)
#loc21 = loc("CWE190_Integer_Overflow__char_rand_square_43.cpp":40:9)
#loc22 = loc("CWE190_Integer_Overflow__char_rand_square_43.cpp":40:30)
#loc23 = loc("CWE190_Integer_Overflow__char_rand_square_43.cpp":40:23)
#loc24 = loc("CWE190_Integer_Overflow__char_rand_square_43.cpp":41:26)
#loc25 = loc("CWE190_Integer_Overflow__char_rand_square_43.cpp":41:9)
#loc26 = loc("CWE190_Integer_Overflow__char_rand_square_43.cpp":50:1)
#loc27 = loc("CWE190_Integer_Overflow__char_rand_square_43.cpp":54:1)
#loc30 = loc("CWE190_Integer_Overflow__char_rand_square_43.cpp":51:1)
#loc31 = loc("CWE190_Integer_Overflow__char_rand_square_43.cpp":53:12)
#loc32 = loc("CWE190_Integer_Overflow__char_rand_square_43.cpp":53:5)
#loc33 = loc("CWE190_Integer_Overflow__char_rand_square_43.cpp":56:1)
#loc34 = loc("CWE190_Integer_Overflow__char_rand_square_43.cpp":66:1)
#loc35 = loc("CWE190_Integer_Overflow__char_rand_square_43.cpp":58:5)
#loc36 = loc("CWE190_Integer_Overflow__char_rand_square_43.cpp":58:10)
#loc37 = loc("CWE190_Integer_Overflow__char_rand_square_43.cpp":59:12)
#loc38 = loc("CWE190_Integer_Overflow__char_rand_square_43.cpp":59:5)
#loc39 = loc("CWE190_Integer_Overflow__char_rand_square_43.cpp":60:5)
#loc40 = loc("CWE190_Integer_Overflow__char_rand_square_43.cpp":61:5)
#loc41 = loc("CWE190_Integer_Overflow__char_rand_square_43.cpp":65:5)
#loc42 = loc("CWE190_Integer_Overflow__char_rand_square_43.cpp":63:9)
#loc43 = loc("CWE190_Integer_Overflow__char_rand_square_43.cpp":63:30)
#loc44 = loc("CWE190_Integer_Overflow__char_rand_square_43.cpp":63:23)
#loc45 = loc("CWE190_Integer_Overflow__char_rand_square_43.cpp":64:26)
#loc46 = loc("CWE190_Integer_Overflow__char_rand_square_43.cpp":64:9)
#loc47 = loc("CWE190_Integer_Overflow__char_rand_square_43.cpp":69:1)
#loc48 = loc("CWE190_Integer_Overflow__char_rand_square_43.cpp":73:1)
#loc51 = loc("CWE190_Integer_Overflow__char_rand_square_43.cpp":70:1)
#loc52 = loc("CWE190_Integer_Overflow__char_rand_square_43.cpp":72:18)
#loc53 = loc("CWE190_Integer_Overflow__char_rand_square_43.cpp":72:5)
#loc54 = loc("/usr/lib/gcc/x86_64-redhat-linux/14/../../../../include/c++/14/bits/std_abs.h":55:3)
#loc55 = loc("/usr/lib/gcc/x86_64-redhat-linux/14/../../../../include/c++/14/bits/std_abs.h":56:47)
#loc58 = loc("/usr/lib/gcc/x86_64-redhat-linux/14/../../../../include/c++/14/bits/std_abs.h":56:17)
#loc59 = loc("/usr/lib/gcc/x86_64-redhat-linux/14/../../../../include/c++/14/bits/std_abs.h":56:41)
#loc60 = loc("/usr/lib/gcc/x86_64-redhat-linux/14/../../../../include/c++/14/bits/std_abs.h":56:26)
#loc61 = loc("/usr/lib/gcc/x86_64-redhat-linux/14/../../../../include/c++/14/bits/std_abs.h":56:19)
#loc62 = loc("/usr/lib/gcc/x86_64-redhat-linux/14/../../../../include/c++/14/bits/std_abs.h":56:44)
#loc63 = loc("/usr/include/bits/mathcalls.h":158:1)
#loc64 = loc("CWE190_Integer_Overflow__char_rand_square_43.cpp":88:19)
#loc65 = loc("CWE190_Integer_Overflow__char_rand_square_43.cpp":75:1)
#loc66 = loc("CWE190_Integer_Overflow__char_rand_square_43.cpp":90:1)
#loc67 = loc("CWE190_Integer_Overflow__char_rand_square_43.cpp":77:5)
#loc68 = loc("CWE190_Integer_Overflow__char_rand_square_43.cpp":77:10)
#loc69 = loc("CWE190_Integer_Overflow__char_rand_square_43.cpp":78:12)
#loc70 = loc("CWE190_Integer_Overflow__char_rand_square_43.cpp":78:5)
#loc71 = loc("CWE190_Integer_Overflow__char_rand_square_43.cpp":79:5)
#loc72 = loc("CWE190_Integer_Overflow__char_rand_square_43.cpp":81:5)
#loc73 = loc("CWE190_Integer_Overflow__char_rand_square_43.cpp":89:5)
#loc74 = loc("CWE190_Integer_Overflow__char_rand_square_43.cpp":81:19)
#loc75 = loc("CWE190_Integer_Overflow__char_rand_square_43.cpp":81:9)
#loc76 = loc("CWE190_Integer_Overflow__char_rand_square_43.cpp":81:34)
#loc77 = loc("CWE190_Integer_Overflow__char_rand_square_43.cpp":81:47)
#loc78 = loc("CWE190_Integer_Overflow__char_rand_square_43.cpp":81:55)
#loc79 = loc("CWE190_Integer_Overflow__char_rand_square_43.cpp":82:5)
#loc80 = loc("CWE190_Integer_Overflow__char_rand_square_43.cpp":85:5)
#loc81 = loc("CWE190_Integer_Overflow__char_rand_square_43.cpp":87:5)
#loc82 = loc("CWE190_Integer_Overflow__char_rand_square_43.cpp":83:9)
#loc83 = loc("CWE190_Integer_Overflow__char_rand_square_43.cpp":83:30)
#loc84 = loc("CWE190_Integer_Overflow__char_rand_square_43.cpp":83:23)
#loc85 = loc("CWE190_Integer_Overflow__char_rand_square_43.cpp":84:26)
#loc86 = loc("CWE190_Integer_Overflow__char_rand_square_43.cpp":84:9)
#loc87 = loc("CWE190_Integer_Overflow__char_rand_square_43.cpp":88:9)
#loc88 = loc("CWE190_Integer_Overflow__char_rand_square_43.cpp":92:1)
#loc89 = loc("CWE190_Integer_Overflow__char_rand_square_43.cpp":96:1)
#loc90 = loc("CWE190_Integer_Overflow__char_rand_square_43.cpp":94:5)
#loc91 = loc("CWE190_Integer_Overflow__char_rand_square_43.cpp":95:5)
#loc92 = loc("/usr/include/stdlib.h":575:1)
#loc93 = loc("/usr/include/stdlib.h":575:41)
#loc94 = loc("/usr/include/time.h":76:1)
#loc95 = loc("/usr/include/time.h":76:38)
#loc96 = loc("../../../testcasesupport/std_testcase_io.h":14:1)
#loc97 = loc("../../../testcasesupport/std_testcase_io.h":14:33)
#loc98 = loc("CWE190_Integer_Overflow__char_rand_square_43.cpp":116:15)
#loc99 = loc("CWE190_Integer_Overflow__char_rand_square_43.cpp":118:15)
#loc100 = loc("CWE190_Integer_Overflow__char_rand_square_43.cpp":121:15)
#loc101 = loc("CWE190_Integer_Overflow__char_rand_square_43.cpp":123:15)
#loc102 = loc("CWE190_Integer_Overflow__char_rand_square_43.cpp":111:1)
#loc103 = loc("CWE190_Integer_Overflow__char_rand_square_43.cpp":126:1)
#loc108 = loc("CWE190_Integer_Overflow__char_rand_square_43.cpp":112:1)
#loc109 = loc("CWE190_Integer_Overflow__char_rand_square_43.cpp":114:27)
#loc110 = loc("CWE190_Integer_Overflow__char_rand_square_43.cpp":114:22)
#loc111 = loc("CWE190_Integer_Overflow__char_rand_square_43.cpp":114:5)
#loc112 = loc("CWE190_Integer_Overflow__char_rand_square_43.cpp":116:5)
#loc113 = loc("CWE190_Integer_Overflow__char_rand_square_43.cpp":117:5)
#loc114 = loc("CWE190_Integer_Overflow__char_rand_square_43.cpp":118:5)
#loc115 = loc("CWE190_Integer_Overflow__char_rand_square_43.cpp":121:5)
#loc116 = loc("CWE190_Integer_Overflow__char_rand_square_43.cpp":122:5)
#loc117 = loc("CWE190_Integer_Overflow__char_rand_square_43.cpp":123:5)
#loc118 = loc("CWE190_Integer_Overflow__char_rand_square_43.cpp":125:12)
#loc119 = loc("CWE190_Integer_Overflow__char_rand_square_43.cpp":125:5)
#loc120 = loc(fused[#loc1, #loc2])
#loc121 = loc(fused[#loc3, #loc4])
#loc123 = loc(fused[#loc9, #loc8])
#loc124 = loc(fused[#loc10, #loc11])
#loc125 = loc(fused[#loc12, #loc13])
#loc126 = loc(fused[#loc14, #loc15])
#loc127 = loc(fused[#loc17, #loc16])
#loc128 = loc(fused[#loc19, #loc20])
#loc129 = loc(fused[#loc21, #loc22])
#loc130 = loc(fused[#loc26, #loc27])
#loc132 = loc(fused[#loc32, #loc31])
#loc133 = loc(fused[#loc33, #loc34])
#loc134 = loc(fused[#loc35, #loc36])
#loc135 = loc(fused[#loc38, #loc37])
#loc136 = loc(fused[#loc40, #loc41])
#loc137 = loc(fused[#loc42, #loc43])
#loc138 = loc(fused[#loc47, #loc48])
#loc140 = loc(fused[#loc53, #loc52])
#loc141 = loc(fused[#loc54, #loc55])
#loc143 = loc(fused[#loc61, #loc62])
#loc144 = loc(fused[#loc65, #loc66])
#loc145 = loc(fused[#loc67, #loc68])
#loc146 = loc(fused[#loc70, #loc69])
#loc147 = loc(fused[#loc72, #loc73])
#loc148 = loc(fused[#loc75, #loc78])
#loc149 = loc(fused[#loc79, #loc80, #loc81, #loc73])
#loc150 = loc(fused[#loc82, #loc83])
#loc151 = loc(fused[#loc88, #loc89])
#loc152 = loc(fused[#loc92, #loc93])
#loc153 = loc(fused[#loc94, #loc95])
#loc154 = loc(fused[#loc96, #loc97])
#loc155 = loc(fused[#loc102, #loc103])
#loc158 = loc(fused[#loc119, #loc118])
