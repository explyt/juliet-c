!s32i = !cir.int<s, 32>
!s64i = !cir.int<s, 64>
!s8i = !cir.int<s, 8>
!u32i = !cir.int<u, 32>
!void = !cir.void
#false = #cir.bool<false> : !cir.bool
#fn_attr = #cir<extra({inline = #cir.inline<no>, nothrow = #cir.nothrow, optnone = #cir.optnone})>
#fn_attr1 = #cir<extra({nothrow = #cir.nothrow})>
#loc8 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE129_large_21.c":25:21)
#loc9 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE129_large_21.c":25:25)
#loc78 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE129_large_21.c":205:10)
#loc79 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE129_large_21.c":205:14)
#loc80 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE129_large_21.c":205:20)
#loc81 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE129_large_21.c":205:32)
#loc102 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE129_large_21.c":72:26)
#loc103 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE129_large_21.c":72:30)
#loc163 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE129_large_21.c":114:26)
#loc164 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE129_large_21.c":114:30)
#loc222 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE129_large_21.c":151:25)
#loc223 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE129_large_21.c":151:29)
#true = #cir.bool<true> : !cir.bool
#loc276 = loc(fused[#loc8, #loc9])
#loc304 = loc(fused[#loc78, #loc79])
#loc305 = loc(fused[#loc80, #loc81])
#loc311 = loc(fused[#loc102, #loc103])
#loc334 = loc(fused[#loc163, #loc164])
#loc357 = loc(fused[#loc222, #loc223])
module @"/home/ladisgin/git_proj/juliet-c/testcases/CWE121_Stack_Based_Buffer_Overflow/s01/CWE121_Stack_Based_Buffer_Overflow__CWE129_large_21.c" attributes {cir.lang = #cir.lang<c>, cir.sob = #cir.signed_overflow_behavior<undefined>, cir.triple = "x86_64-unknown-linux-gnu", dlti.dl_spec = #dlti.dl_spec<!llvm.ptr = dense<64> : vector<4xi64>, f80 = dense<128> : vector<2xi64>, i128 = dense<128> : vector<2xi64>, !llvm.ptr<272> = dense<64> : vector<4xi64>, i64 = dense<64> : vector<2xi64>, !llvm.ptr<270> = dense<32> : vector<4xi64>, f128 = dense<128> : vector<2xi64>, !llvm.ptr<271> = dense<32> : vector<4xi64>, f64 = dense<64> : vector<2xi64>, f16 = dense<16> : vector<2xi64>, i16 = dense<16> : vector<2xi64>, i32 = dense<32> : vector<2xi64>, i1 = dense<8> : vector<2xi64>, i8 = dense<8> : vector<2xi64>, "dlti.stack_alignment" = 128 : i64, "dlti.endianness" = "little">} {
  cir.global "private" internal dsolocal @badStatic = #cir.int<0> : !s32i {alignment = 4 : i64} loc(#loc273)
  cir.func private @printIntLine(!s32i) loc(#loc274)
  cir.global "private" constant cir_private dsolocal @".str.4" = #cir.const_array<"ERROR: Array index is negative.\00" : !cir.array<!s8i x 32>> : !cir.array<!s8i x 32> {alignment = 1 : i64} loc(#loc5)
  cir.func internal private @badSink(%arg0: !s32i loc(fused[#loc8, #loc9])) extra(#fn_attr) {
    %0 = cir.alloca !s32i, !cir.ptr<!s32i>, ["data", init] {alignment = 4 : i64} loc(#loc276)
    cir.store %arg0, %0 : !s32i, !cir.ptr<!s32i> loc(#loc10)
    cir.scope {
      %1 = cir.get_global @badStatic : !cir.ptr<!s32i> loc(#loc273)
      %2 = cir.load %1 : !cir.ptr<!s32i>, !s32i loc(#loc13)
      %3 = cir.cast(int_to_bool, %2 : !s32i), !cir.bool loc(#loc13)
      cir.if %3 {
        cir.scope {
          %4 = cir.alloca !s32i, !cir.ptr<!s32i>, ["i"] {alignment = 4 : i64} loc(#loc280)
          %5 = cir.alloca !cir.array<!s32i x 10>, !cir.ptr<!cir.array<!s32i x 10>>, ["buffer"] {alignment = 16 : i64} loc(#loc281)
          %6 = cir.const #cir.zero : !cir.array<!s32i x 10> loc(#loc281)
          cir.store %6, %5 : !cir.array<!s32i x 10>, !cir.ptr<!cir.array<!s32i x 10>> loc(#loc281)
          cir.scope {
            %7 = cir.load %0 : !cir.ptr<!s32i>, !s32i loc(#loc23)
            %8 = cir.const #cir.int<0> : !s32i loc(#loc24)
            %9 = cir.cmp(ge, %7, %8) : !s32i, !cir.bool loc(#loc283)
            cir.if %9 {
              %10 = cir.const #cir.int<1> : !s32i loc(#loc28)
              %11 = cir.load %0 : !cir.ptr<!s32i>, !s32i loc(#loc29)
              %12 = cir.cast(array_to_ptrdecay, %5 : !cir.ptr<!cir.array<!s32i x 10>>), !cir.ptr<!s32i> loc(#loc30)
              %13 = cir.ptr_stride(%12 : !cir.ptr<!s32i>, %11 : !s32i), !cir.ptr<!s32i> loc(#loc30)
              cir.store %10, %13 : !s32i, !cir.ptr<!s32i> loc(#loc285)
              cir.scope {
                %14 = cir.const #cir.int<0> : !s32i loc(#loc33)
                cir.store %14, %4 : !s32i, !cir.ptr<!s32i> loc(#loc287)
                cir.for : cond {
                  %15 = cir.load %4 : !cir.ptr<!s32i>, !s32i loc(#loc35)
                  %16 = cir.const #cir.int<10> : !s32i loc(#loc36)
                  %17 = cir.cmp(lt, %15, %16) : !s32i, !cir.bool loc(#loc288)
                  cir.condition(%17) loc(#loc37)
                } body {
                  cir.scope {
                    %15 = cir.load %4 : !cir.ptr<!s32i>, !s32i loc(#loc39)
                    %16 = cir.cast(array_to_ptrdecay, %5 : !cir.ptr<!cir.array<!s32i x 10>>), !cir.ptr<!s32i> loc(#loc40)
                    %17 = cir.ptr_stride(%16 : !cir.ptr<!s32i>, %15 : !s32i), !cir.ptr<!s32i> loc(#loc40)
                    %18 = cir.load %17 : !cir.ptr<!s32i>, !s32i loc(#loc40)
                    cir.call @printIntLine(%18) : (!s32i) -> () loc(#loc41)
                  } loc(#loc289)
                  cir.yield loc(#loc32)
                } step {
                  %15 = cir.load %4 : !cir.ptr<!s32i>, !s32i loc(#loc42)
                  %16 = cir.unary(inc, %15) : !s32i, !s32i loc(#loc43)
                  cir.store %16, %4 : !s32i, !cir.ptr<!s32i> loc(#loc290)
                  cir.yield loc(#loc286)
                } loc(#loc286)
              } loc(#loc286)
            } else {
              %10 = cir.get_global @".str.4" : !cir.ptr<!cir.array<!s8i x 32>> loc(#loc5)
              %11 = cir.cast(array_to_ptrdecay, %10 : !cir.ptr<!cir.array<!s8i x 32>>), !cir.ptr<!s8i> loc(#loc5)
              cir.call @printLine(%11) : (!cir.ptr<!s8i>) -> () loc(#loc44)
            } loc(#loc284)
          } loc(#loc282)
        } loc(#loc279)
      } loc(#loc278)
    } loc(#loc277)
    cir.return loc(#loc7)
  } loc(#loc275)
  cir.func no_proto @CWE121_Stack_Based_Buffer_Overflow__CWE129_large_21_bad() extra(#fn_attr) {
    %0 = cir.alloca !s32i, !cir.ptr<!s32i>, ["data"] {alignment = 4 : i64} loc(#loc292)
    %1 = cir.const #cir.int<1> : !s32i loc(#loc49)
    %2 = cir.unary(minus, %1) : !s32i, !s32i loc(#loc50)
    cir.store %2, %0 : !s32i, !cir.ptr<!s32i> loc(#loc293)
    %3 = cir.const #cir.int<10> : !s32i loc(#loc52)
    cir.store %3, %0 : !s32i, !cir.ptr<!s32i> loc(#loc294)
    %4 = cir.const #cir.int<1> : !s32i loc(#loc54)
    %5 = cir.get_global @badStatic : !cir.ptr<!s32i> loc(#loc273)
    cir.store %4, %5 : !s32i, !cir.ptr<!s32i> loc(#loc295)
    %6 = cir.load %0 : !cir.ptr<!s32i>, !s32i loc(#loc56)
    cir.call @badSink(%6) : (!s32i) -> () loc(#loc57)
    cir.return loc(#loc46)
  } loc(#loc291)
  cir.func no_proto @CWE121_Stack_Based_Buffer_Overflow__CWE129_large_21_good() extra(#fn_attr) {
    %0 = cir.get_global @goodB2G1 : !cir.ptr<!cir.func<!void ()>> loc(#loc297)
    cir.call %0() : (!cir.ptr<!cir.func<!void ()>>) -> () loc(#loc60)
    %1 = cir.get_global @goodB2G2 : !cir.ptr<!cir.func<!void ()>> loc(#loc298)
    cir.call %1() : (!cir.ptr<!cir.func<!void ()>>) -> () loc(#loc62)
    %2 = cir.get_global @goodG2B : !cir.ptr<!cir.func<!void ()>> loc(#loc299)
    cir.call %2() : (!cir.ptr<!cir.func<!void ()>>) -> () loc(#loc64)
    cir.return loc(#loc59)
  } loc(#loc296)
  cir.func private @srand(!u32i) extra(#fn_attr1) loc(#loc300)
  cir.func private @time(!cir.ptr<!s64i>) -> !s64i extra(#fn_attr1) loc(#loc301)
  cir.func private @printLine(!cir.ptr<!s8i>) loc(#loc302)
  cir.global "private" constant cir_private dsolocal @".str" = #cir.const_array<"Calling good()...\00" : !cir.array<!s8i x 18>> : !cir.array<!s8i x 18> {alignment = 1 : i64} loc(#loc72)
  cir.global "private" constant cir_private dsolocal @".str.1" = #cir.const_array<"Finished good()\00" : !cir.array<!s8i x 16>> : !cir.array<!s8i x 16> {alignment = 1 : i64} loc(#loc73)
  cir.global "private" constant cir_private dsolocal @".str.2" = #cir.const_array<"Calling bad()...\00" : !cir.array<!s8i x 17>> : !cir.array<!s8i x 17> {alignment = 1 : i64} loc(#loc74)
  cir.global "private" constant cir_private dsolocal @".str.3" = #cir.const_array<"Finished bad()\00" : !cir.array<!s8i x 15>> : !cir.array<!s8i x 15> {alignment = 1 : i64} loc(#loc75)
  cir.func @main(%arg0: !s32i loc(fused[#loc78, #loc79]), %arg1: !cir.ptr<!cir.ptr<!s8i>> loc(fused[#loc80, #loc81])) -> !s32i extra(#fn_attr) {
    %0 = cir.alloca !s32i, !cir.ptr<!s32i>, ["argc", init] {alignment = 4 : i64} loc(#loc304)
    %1 = cir.alloca !cir.ptr<!cir.ptr<!s8i>>, !cir.ptr<!cir.ptr<!cir.ptr<!s8i>>>, ["argv", init] {alignment = 8 : i64} loc(#loc305)
    %2 = cir.alloca !s32i, !cir.ptr<!s32i>, ["__retval"] {alignment = 4 : i64} loc(#loc77)
    cir.store %arg0, %0 : !s32i, !cir.ptr<!s32i> loc(#loc82)
    cir.store %arg1, %1 : !cir.ptr<!cir.ptr<!s8i>>, !cir.ptr<!cir.ptr<!cir.ptr<!s8i>>> loc(#loc82)
    %3 = cir.const #cir.ptr<null> : !cir.ptr<!s64i> loc(#loc83)
    %4 = cir.call @time(%3) : (!cir.ptr<!s64i>) -> !s64i extra(#fn_attr1) loc(#loc84)
    %5 = cir.cast(integral, %4 : !s64i), !u32i loc(#loc84)
    cir.call @srand(%5) : (!u32i) -> () extra(#fn_attr1) loc(#loc85)
    %6 = cir.get_global @".str" : !cir.ptr<!cir.array<!s8i x 18>> loc(#loc72)
    %7 = cir.cast(array_to_ptrdecay, %6 : !cir.ptr<!cir.array<!s8i x 18>>), !cir.ptr<!s8i> loc(#loc72)
    cir.call @printLine(%7) : (!cir.ptr<!s8i>) -> () loc(#loc86)
    %8 = cir.get_global @CWE121_Stack_Based_Buffer_Overflow__CWE129_large_21_good : !cir.ptr<!cir.func<!void ()>> loc(#loc306)
    cir.call @CWE121_Stack_Based_Buffer_Overflow__CWE129_large_21_good() : () -> () loc(#loc87)
    %9 = cir.get_global @".str.1" : !cir.ptr<!cir.array<!s8i x 16>> loc(#loc73)
    %10 = cir.cast(array_to_ptrdecay, %9 : !cir.ptr<!cir.array<!s8i x 16>>), !cir.ptr<!s8i> loc(#loc73)
    cir.call @printLine(%10) : (!cir.ptr<!s8i>) -> () loc(#loc89)
    %11 = cir.get_global @".str.2" : !cir.ptr<!cir.array<!s8i x 17>> loc(#loc74)
    %12 = cir.cast(array_to_ptrdecay, %11 : !cir.ptr<!cir.array<!s8i x 17>>), !cir.ptr<!s8i> loc(#loc74)
    cir.call @printLine(%12) : (!cir.ptr<!s8i>) -> () loc(#loc90)
    %13 = cir.get_global @CWE121_Stack_Based_Buffer_Overflow__CWE129_large_21_bad : !cir.ptr<!cir.func<!void ()>> loc(#loc307)
    cir.call @CWE121_Stack_Based_Buffer_Overflow__CWE129_large_21_bad() : () -> () loc(#loc91)
    %14 = cir.get_global @".str.3" : !cir.ptr<!cir.array<!s8i x 15>> loc(#loc75)
    %15 = cir.cast(array_to_ptrdecay, %14 : !cir.ptr<!cir.array<!s8i x 15>>), !cir.ptr<!s8i> loc(#loc75)
    cir.call @printLine(%15) : (!cir.ptr<!s8i>) -> () loc(#loc93)
    %16 = cir.const #cir.int<0> : !s32i loc(#loc94)
    cir.store %16, %2 : !s32i, !cir.ptr<!s32i> loc(#loc308)
    %17 = cir.load %2 : !cir.ptr<!s32i>, !s32i loc(#loc308)
    cir.return %17 : !s32i loc(#loc308)
  } loc(#loc303)
  cir.global "private" internal dsolocal @goodB2G1Static = #cir.int<0> : !s32i {alignment = 4 : i64} loc(#loc309)
  cir.global "private" constant cir_private dsolocal @".str.5" = #cir.const_array<"Benign, fixed string\00" : !cir.array<!s8i x 21>> : !cir.array<!s8i x 21> {alignment = 1 : i64} loc(#loc98)
  cir.global "private" constant cir_private dsolocal @".str.6" = #cir.const_array<"ERROR: Array index is out-of-bounds\00" : !cir.array<!s8i x 36>> : !cir.array<!s8i x 36> {alignment = 1 : i64} loc(#loc99)
  cir.func internal private @goodB2G1Sink(%arg0: !s32i loc(fused[#loc102, #loc103])) extra(#fn_attr) {
    %0 = cir.alloca !s32i, !cir.ptr<!s32i>, ["data", init] {alignment = 4 : i64} loc(#loc311)
    cir.store %arg0, %0 : !s32i, !cir.ptr<!s32i> loc(#loc104)
    cir.scope {
      %1 = cir.get_global @goodB2G1Static : !cir.ptr<!s32i> loc(#loc309)
      %2 = cir.load %1 : !cir.ptr<!s32i>, !s32i loc(#loc107)
      %3 = cir.cast(int_to_bool, %2 : !s32i), !cir.bool loc(#loc107)
      cir.if %3 {
        %4 = cir.get_global @".str.5" : !cir.ptr<!cir.array<!s8i x 21>> loc(#loc98)
        %5 = cir.cast(array_to_ptrdecay, %4 : !cir.ptr<!cir.array<!s8i x 21>>), !cir.ptr<!s8i> loc(#loc98)
        cir.call @printLine(%5) : (!cir.ptr<!s8i>) -> () loc(#loc111)
      } else {
        cir.scope {
          %4 = cir.alloca !s32i, !cir.ptr<!s32i>, ["i"] {alignment = 4 : i64} loc(#loc315)
          %5 = cir.alloca !cir.array<!s32i x 10>, !cir.ptr<!cir.array<!s32i x 10>>, ["buffer"] {alignment = 16 : i64} loc(#loc316)
          %6 = cir.const #cir.zero : !cir.array<!s32i x 10> loc(#loc316)
          cir.store %6, %5 : !cir.array<!s32i x 10>, !cir.ptr<!cir.array<!s32i x 10>> loc(#loc316)
          cir.scope {
            %7 = cir.load %0 : !cir.ptr<!s32i>, !s32i loc(#loc120)
            %8 = cir.const #cir.int<0> : !s32i loc(#loc121)
            %9 = cir.cmp(ge, %7, %8) : !s32i, !cir.bool loc(#loc318)
            %10 = cir.ternary(%9, true {
              %11 = cir.load %0 : !cir.ptr<!s32i>, !s32i loc(#loc123)
              %12 = cir.const #cir.int<10> : !s32i loc(#loc124)
              %13 = cir.cmp(lt, %11, %12) : !s32i, !cir.bool loc(#loc319)
              %14 = cir.ternary(%13, true {
                %15 = cir.const #true loc(#loc122)
                cir.yield %15 : !cir.bool loc(#loc122)
              }, false {
                %15 = cir.const #false loc(#loc122)
                cir.yield %15 : !cir.bool loc(#loc122)
              }) : (!cir.bool) -> !cir.bool loc(#loc122)
              cir.yield %14 : !cir.bool loc(#loc122)
            }, false {
              %11 = cir.const #false loc(#loc122)
              cir.yield %11 : !cir.bool loc(#loc122)
            }) : (!cir.bool) -> !cir.bool loc(#loc122)
            cir.if %10 {
              %11 = cir.const #cir.int<1> : !s32i loc(#loc129)
              %12 = cir.load %0 : !cir.ptr<!s32i>, !s32i loc(#loc130)
              %13 = cir.cast(array_to_ptrdecay, %5 : !cir.ptr<!cir.array<!s32i x 10>>), !cir.ptr<!s32i> loc(#loc131)
              %14 = cir.ptr_stride(%13 : !cir.ptr<!s32i>, %12 : !s32i), !cir.ptr<!s32i> loc(#loc131)
              cir.store %11, %14 : !s32i, !cir.ptr<!s32i> loc(#loc321)
              cir.scope {
                %15 = cir.const #cir.int<0> : !s32i loc(#loc134)
                cir.store %15, %4 : !s32i, !cir.ptr<!s32i> loc(#loc323)
                cir.for : cond {
                  %16 = cir.load %4 : !cir.ptr<!s32i>, !s32i loc(#loc136)
                  %17 = cir.const #cir.int<10> : !s32i loc(#loc137)
                  %18 = cir.cmp(lt, %16, %17) : !s32i, !cir.bool loc(#loc324)
                  cir.condition(%18) loc(#loc138)
                } body {
                  cir.scope {
                    %16 = cir.load %4 : !cir.ptr<!s32i>, !s32i loc(#loc140)
                    %17 = cir.cast(array_to_ptrdecay, %5 : !cir.ptr<!cir.array<!s32i x 10>>), !cir.ptr<!s32i> loc(#loc141)
                    %18 = cir.ptr_stride(%17 : !cir.ptr<!s32i>, %16 : !s32i), !cir.ptr<!s32i> loc(#loc141)
                    %19 = cir.load %18 : !cir.ptr<!s32i>, !s32i loc(#loc141)
                    cir.call @printIntLine(%19) : (!s32i) -> () loc(#loc142)
                  } loc(#loc325)
                  cir.yield loc(#loc133)
                } step {
                  %16 = cir.load %4 : !cir.ptr<!s32i>, !s32i loc(#loc143)
                  %17 = cir.unary(inc, %16) : !s32i, !s32i loc(#loc144)
                  cir.store %17, %4 : !s32i, !cir.ptr<!s32i> loc(#loc326)
                  cir.yield loc(#loc322)
                } loc(#loc322)
              } loc(#loc322)
            } else {
              %11 = cir.get_global @".str.6" : !cir.ptr<!cir.array<!s8i x 36>> loc(#loc99)
              %12 = cir.cast(array_to_ptrdecay, %11 : !cir.ptr<!cir.array<!s8i x 36>>), !cir.ptr<!s8i> loc(#loc99)
              cir.call @printLine(%12) : (!cir.ptr<!s8i>) -> () loc(#loc145)
            } loc(#loc320)
          } loc(#loc317)
        } loc(#loc314)
      } loc(#loc313)
    } loc(#loc312)
    cir.return loc(#loc101)
  } loc(#loc310)
  cir.func no_proto internal private @goodB2G1() extra(#fn_attr) {
    %0 = cir.alloca !s32i, !cir.ptr<!s32i>, ["data"] {alignment = 4 : i64} loc(#loc328)
    %1 = cir.const #cir.int<1> : !s32i loc(#loc150)
    %2 = cir.unary(minus, %1) : !s32i, !s32i loc(#loc151)
    cir.store %2, %0 : !s32i, !cir.ptr<!s32i> loc(#loc329)
    %3 = cir.const #cir.int<10> : !s32i loc(#loc153)
    cir.store %3, %0 : !s32i, !cir.ptr<!s32i> loc(#loc330)
    %4 = cir.const #cir.int<0> : !s32i loc(#loc155)
    %5 = cir.get_global @goodB2G1Static : !cir.ptr<!s32i> loc(#loc309)
    cir.store %4, %5 : !s32i, !cir.ptr<!s32i> loc(#loc331)
    %6 = cir.load %0 : !cir.ptr<!s32i>, !s32i loc(#loc157)
    cir.call @goodB2G1Sink(%6) : (!s32i) -> () loc(#loc158)
    cir.return loc(#loc147)
  } loc(#loc327)
  cir.global "private" internal dsolocal @goodB2G2Static = #cir.int<0> : !s32i {alignment = 4 : i64} loc(#loc332)
  cir.func internal private @goodB2G2Sink(%arg0: !s32i loc(fused[#loc163, #loc164])) extra(#fn_attr) {
    %0 = cir.alloca !s32i, !cir.ptr<!s32i>, ["data", init] {alignment = 4 : i64} loc(#loc334)
    cir.store %arg0, %0 : !s32i, !cir.ptr<!s32i> loc(#loc165)
    cir.scope {
      %1 = cir.get_global @goodB2G2Static : !cir.ptr<!s32i> loc(#loc332)
      %2 = cir.load %1 : !cir.ptr<!s32i>, !s32i loc(#loc168)
      %3 = cir.cast(int_to_bool, %2 : !s32i), !cir.bool loc(#loc168)
      cir.if %3 {
        cir.scope {
          %4 = cir.alloca !s32i, !cir.ptr<!s32i>, ["i"] {alignment = 4 : i64} loc(#loc338)
          %5 = cir.alloca !cir.array<!s32i x 10>, !cir.ptr<!cir.array<!s32i x 10>>, ["buffer"] {alignment = 16 : i64} loc(#loc339)
          %6 = cir.const #cir.zero : !cir.array<!s32i x 10> loc(#loc339)
          cir.store %6, %5 : !cir.array<!s32i x 10>, !cir.ptr<!cir.array<!s32i x 10>> loc(#loc339)
          cir.scope {
            %7 = cir.load %0 : !cir.ptr<!s32i>, !s32i loc(#loc178)
            %8 = cir.const #cir.int<0> : !s32i loc(#loc179)
            %9 = cir.cmp(ge, %7, %8) : !s32i, !cir.bool loc(#loc341)
            %10 = cir.ternary(%9, true {
              %11 = cir.load %0 : !cir.ptr<!s32i>, !s32i loc(#loc181)
              %12 = cir.const #cir.int<10> : !s32i loc(#loc182)
              %13 = cir.cmp(lt, %11, %12) : !s32i, !cir.bool loc(#loc342)
              %14 = cir.ternary(%13, true {
                %15 = cir.const #true loc(#loc180)
                cir.yield %15 : !cir.bool loc(#loc180)
              }, false {
                %15 = cir.const #false loc(#loc180)
                cir.yield %15 : !cir.bool loc(#loc180)
              }) : (!cir.bool) -> !cir.bool loc(#loc180)
              cir.yield %14 : !cir.bool loc(#loc180)
            }, false {
              %11 = cir.const #false loc(#loc180)
              cir.yield %11 : !cir.bool loc(#loc180)
            }) : (!cir.bool) -> !cir.bool loc(#loc180)
            cir.if %10 {
              %11 = cir.const #cir.int<1> : !s32i loc(#loc187)
              %12 = cir.load %0 : !cir.ptr<!s32i>, !s32i loc(#loc188)
              %13 = cir.cast(array_to_ptrdecay, %5 : !cir.ptr<!cir.array<!s32i x 10>>), !cir.ptr<!s32i> loc(#loc189)
              %14 = cir.ptr_stride(%13 : !cir.ptr<!s32i>, %12 : !s32i), !cir.ptr<!s32i> loc(#loc189)
              cir.store %11, %14 : !s32i, !cir.ptr<!s32i> loc(#loc344)
              cir.scope {
                %15 = cir.const #cir.int<0> : !s32i loc(#loc192)
                cir.store %15, %4 : !s32i, !cir.ptr<!s32i> loc(#loc346)
                cir.for : cond {
                  %16 = cir.load %4 : !cir.ptr<!s32i>, !s32i loc(#loc194)
                  %17 = cir.const #cir.int<10> : !s32i loc(#loc195)
                  %18 = cir.cmp(lt, %16, %17) : !s32i, !cir.bool loc(#loc347)
                  cir.condition(%18) loc(#loc196)
                } body {
                  cir.scope {
                    %16 = cir.load %4 : !cir.ptr<!s32i>, !s32i loc(#loc198)
                    %17 = cir.cast(array_to_ptrdecay, %5 : !cir.ptr<!cir.array<!s32i x 10>>), !cir.ptr<!s32i> loc(#loc199)
                    %18 = cir.ptr_stride(%17 : !cir.ptr<!s32i>, %16 : !s32i), !cir.ptr<!s32i> loc(#loc199)
                    %19 = cir.load %18 : !cir.ptr<!s32i>, !s32i loc(#loc199)
                    cir.call @printIntLine(%19) : (!s32i) -> () loc(#loc200)
                  } loc(#loc348)
                  cir.yield loc(#loc191)
                } step {
                  %16 = cir.load %4 : !cir.ptr<!s32i>, !s32i loc(#loc201)
                  %17 = cir.unary(inc, %16) : !s32i, !s32i loc(#loc202)
                  cir.store %17, %4 : !s32i, !cir.ptr<!s32i> loc(#loc349)
                  cir.yield loc(#loc345)
                } loc(#loc345)
              } loc(#loc345)
            } else {
              %11 = cir.get_global @".str.6" : !cir.ptr<!cir.array<!s8i x 36>> loc(#loc203)
              %12 = cir.cast(array_to_ptrdecay, %11 : !cir.ptr<!cir.array<!s8i x 36>>), !cir.ptr<!s8i> loc(#loc203)
              cir.call @printLine(%12) : (!cir.ptr<!s8i>) -> () loc(#loc204)
            } loc(#loc343)
          } loc(#loc340)
        } loc(#loc337)
      } loc(#loc336)
    } loc(#loc335)
    cir.return loc(#loc162)
  } loc(#loc333)
  cir.func no_proto internal private @goodB2G2() extra(#fn_attr) {
    %0 = cir.alloca !s32i, !cir.ptr<!s32i>, ["data"] {alignment = 4 : i64} loc(#loc351)
    %1 = cir.const #cir.int<1> : !s32i loc(#loc209)
    %2 = cir.unary(minus, %1) : !s32i, !s32i loc(#loc210)
    cir.store %2, %0 : !s32i, !cir.ptr<!s32i> loc(#loc352)
    %3 = cir.const #cir.int<10> : !s32i loc(#loc212)
    cir.store %3, %0 : !s32i, !cir.ptr<!s32i> loc(#loc353)
    %4 = cir.const #cir.int<1> : !s32i loc(#loc214)
    %5 = cir.get_global @goodB2G2Static : !cir.ptr<!s32i> loc(#loc332)
    cir.store %4, %5 : !s32i, !cir.ptr<!s32i> loc(#loc354)
    %6 = cir.load %0 : !cir.ptr<!s32i>, !s32i loc(#loc216)
    cir.call @goodB2G2Sink(%6) : (!s32i) -> () loc(#loc217)
    cir.return loc(#loc206)
  } loc(#loc350)
  cir.global "private" internal dsolocal @goodG2BStatic = #cir.int<0> : !s32i {alignment = 4 : i64} loc(#loc355)
  cir.func internal private @goodG2BSink(%arg0: !s32i loc(fused[#loc222, #loc223])) extra(#fn_attr) {
    %0 = cir.alloca !s32i, !cir.ptr<!s32i>, ["data", init] {alignment = 4 : i64} loc(#loc357)
    cir.store %arg0, %0 : !s32i, !cir.ptr<!s32i> loc(#loc224)
    cir.scope {
      %1 = cir.get_global @goodG2BStatic : !cir.ptr<!s32i> loc(#loc355)
      %2 = cir.load %1 : !cir.ptr<!s32i>, !s32i loc(#loc227)
      %3 = cir.cast(int_to_bool, %2 : !s32i), !cir.bool loc(#loc227)
      cir.if %3 {
        cir.scope {
          %4 = cir.alloca !s32i, !cir.ptr<!s32i>, ["i"] {alignment = 4 : i64} loc(#loc361)
          %5 = cir.alloca !cir.array<!s32i x 10>, !cir.ptr<!cir.array<!s32i x 10>>, ["buffer"] {alignment = 16 : i64} loc(#loc362)
          %6 = cir.const #cir.zero : !cir.array<!s32i x 10> loc(#loc362)
          cir.store %6, %5 : !cir.array<!s32i x 10>, !cir.ptr<!cir.array<!s32i x 10>> loc(#loc362)
          cir.scope {
            %7 = cir.load %0 : !cir.ptr<!s32i>, !s32i loc(#loc237)
            %8 = cir.const #cir.int<0> : !s32i loc(#loc238)
            %9 = cir.cmp(ge, %7, %8) : !s32i, !cir.bool loc(#loc364)
            cir.if %9 {
              %10 = cir.const #cir.int<1> : !s32i loc(#loc242)
              %11 = cir.load %0 : !cir.ptr<!s32i>, !s32i loc(#loc243)
              %12 = cir.cast(array_to_ptrdecay, %5 : !cir.ptr<!cir.array<!s32i x 10>>), !cir.ptr<!s32i> loc(#loc244)
              %13 = cir.ptr_stride(%12 : !cir.ptr<!s32i>, %11 : !s32i), !cir.ptr<!s32i> loc(#loc244)
              cir.store %10, %13 : !s32i, !cir.ptr<!s32i> loc(#loc366)
              cir.scope {
                %14 = cir.const #cir.int<0> : !s32i loc(#loc247)
                cir.store %14, %4 : !s32i, !cir.ptr<!s32i> loc(#loc368)
                cir.for : cond {
                  %15 = cir.load %4 : !cir.ptr<!s32i>, !s32i loc(#loc249)
                  %16 = cir.const #cir.int<10> : !s32i loc(#loc250)
                  %17 = cir.cmp(lt, %15, %16) : !s32i, !cir.bool loc(#loc369)
                  cir.condition(%17) loc(#loc251)
                } body {
                  cir.scope {
                    %15 = cir.load %4 : !cir.ptr<!s32i>, !s32i loc(#loc253)
                    %16 = cir.cast(array_to_ptrdecay, %5 : !cir.ptr<!cir.array<!s32i x 10>>), !cir.ptr<!s32i> loc(#loc254)
                    %17 = cir.ptr_stride(%16 : !cir.ptr<!s32i>, %15 : !s32i), !cir.ptr<!s32i> loc(#loc254)
                    %18 = cir.load %17 : !cir.ptr<!s32i>, !s32i loc(#loc254)
                    cir.call @printIntLine(%18) : (!s32i) -> () loc(#loc255)
                  } loc(#loc370)
                  cir.yield loc(#loc246)
                } step {
                  %15 = cir.load %4 : !cir.ptr<!s32i>, !s32i loc(#loc256)
                  %16 = cir.unary(inc, %15) : !s32i, !s32i loc(#loc257)
                  cir.store %16, %4 : !s32i, !cir.ptr<!s32i> loc(#loc371)
                  cir.yield loc(#loc367)
                } loc(#loc367)
              } loc(#loc367)
            } else {
              %10 = cir.get_global @".str.4" : !cir.ptr<!cir.array<!s8i x 32>> loc(#loc258)
              %11 = cir.cast(array_to_ptrdecay, %10 : !cir.ptr<!cir.array<!s8i x 32>>), !cir.ptr<!s8i> loc(#loc258)
              cir.call @printLine(%11) : (!cir.ptr<!s8i>) -> () loc(#loc259)
            } loc(#loc365)
          } loc(#loc363)
        } loc(#loc360)
      } loc(#loc359)
    } loc(#loc358)
    cir.return loc(#loc221)
  } loc(#loc356)
  cir.func no_proto internal private @goodG2B() extra(#fn_attr) {
    %0 = cir.alloca !s32i, !cir.ptr<!s32i>, ["data"] {alignment = 4 : i64} loc(#loc373)
    %1 = cir.const #cir.int<1> : !s32i loc(#loc264)
    %2 = cir.unary(minus, %1) : !s32i, !s32i loc(#loc265)
    cir.store %2, %0 : !s32i, !cir.ptr<!s32i> loc(#loc374)
    %3 = cir.const #cir.int<7> : !s32i loc(#loc267)
    cir.store %3, %0 : !s32i, !cir.ptr<!s32i> loc(#loc375)
    %4 = cir.const #cir.int<1> : !s32i loc(#loc269)
    %5 = cir.get_global @goodG2BStatic : !cir.ptr<!s32i> loc(#loc355)
    cir.store %4, %5 : !s32i, !cir.ptr<!s32i> loc(#loc376)
    %6 = cir.load %0 : !cir.ptr<!s32i>, !s32i loc(#loc271)
    cir.call @goodG2BSink(%6) : (!s32i) -> () loc(#loc272)
    cir.return loc(#loc261)
  } loc(#loc372)
} loc(#loc)
#loc = loc("/home/ladisgin/git_proj/juliet-c/testcases/CWE121_Stack_Based_Buffer_Overflow/s01/CWE121_Stack_Based_Buffer_Overflow__CWE129_large_21.c":0:0)
#loc1 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE129_large_21.c":23:1)
#loc2 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE129_large_21.c":23:24)
#loc3 = loc("../../../testcasesupport/std_testcase_io.h":18:1)
#loc4 = loc("../../../testcasesupport/std_testcase_io.h":18:33)
#loc5 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE129_large_21.c":45:27)
#loc6 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE129_large_21.c":25:1)
#loc7 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE129_large_21.c":49:1)
#loc10 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE129_large_21.c":26:1)
#loc11 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE129_large_21.c":27:5)
#loc12 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE129_large_21.c":48:5)
#loc13 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE129_large_21.c":27:8)
#loc14 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE129_large_21.c":28:5)
#loc15 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE129_large_21.c":29:9)
#loc16 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE129_large_21.c":47:9)
#loc17 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE129_large_21.c":30:13)
#loc18 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE129_large_21.c":30:17)
#loc19 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE129_large_21.c":31:13)
#loc20 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE129_large_21.c":31:34)
#loc21 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE129_large_21.c":34:13)
#loc22 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE129_large_21.c":46:13)
#loc23 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE129_large_21.c":34:17)
#loc24 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE129_large_21.c":34:25)
#loc25 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE129_large_21.c":35:13)
#loc26 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE129_large_21.c":42:13)
#loc27 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE129_large_21.c":44:13)
#loc28 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE129_large_21.c":36:32)
#loc29 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE129_large_21.c":36:24)
#loc30 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE129_large_21.c":36:17)
#loc31 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE129_large_21.c":38:17)
#loc32 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE129_large_21.c":41:17)
#loc33 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE129_large_21.c":38:25)
#loc34 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE129_large_21.c":38:21)
#loc35 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE129_large_21.c":38:28)
#loc36 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE129_large_21.c":38:32)
#loc37 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE129_large_21.c":38:30)
#loc38 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE129_large_21.c":39:17)
#loc39 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE129_large_21.c":40:41)
#loc40 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE129_large_21.c":40:34)
#loc41 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE129_large_21.c":40:21)
#loc42 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE129_large_21.c":38:37)
#loc43 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE129_large_21.c":38:36)
#loc44 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE129_large_21.c":45:17)
#loc45 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE129_large_21.c":51:1)
#loc46 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE129_large_21.c":60:1)
#loc47 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE129_large_21.c":53:5)
#loc48 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE129_large_21.c":53:9)
#loc49 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE129_large_21.c":55:13)
#loc50 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE129_large_21.c":55:12)
#loc51 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE129_large_21.c":55:5)
#loc52 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE129_large_21.c":57:12)
#loc53 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE129_large_21.c":57:5)
#loc54 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE129_large_21.c":58:17)
#loc55 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE129_large_21.c":58:5)
#loc56 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE129_large_21.c":59:13)
#loc57 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE129_large_21.c":59:5)
#loc58 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE129_large_21.c":189:1)
#loc59 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE129_large_21.c":194:1)
#loc60 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE129_large_21.c":191:5)
#loc61 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE129_large_21.c":191:14)
#loc62 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE129_large_21.c":192:5)
#loc63 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE129_large_21.c":192:14)
#loc64 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE129_large_21.c":193:5)
#loc65 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE129_large_21.c":193:13)
#loc66 = loc("/usr/include/stdlib.h":575:1)
#loc67 = loc("/usr/include/stdlib.h":575:41)
#loc68 = loc("/usr/include/time.h":76:1)
#loc69 = loc("/usr/include/time.h":76:38)
#loc70 = loc("../../../testcasesupport/std_testcase_io.h":14:1)
#loc71 = loc("../../../testcasesupport/std_testcase_io.h":14:33)
#loc72 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE129_large_21.c":210:15)
#loc73 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE129_large_21.c":212:15)
#loc74 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE129_large_21.c":215:15)
#loc75 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE129_large_21.c":217:15)
#loc76 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE129_large_21.c":205:1)
#loc77 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE129_large_21.c":220:1)
#loc82 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE129_large_21.c":206:1)
#loc83 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE129_large_21.c":208:27)
#loc84 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE129_large_21.c":208:22)
#loc85 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE129_large_21.c":208:5)
#loc86 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE129_large_21.c":210:5)
#loc87 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE129_large_21.c":211:5)
#loc88 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE129_large_21.c":211:62)
#loc89 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE129_large_21.c":212:5)
#loc90 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE129_large_21.c":215:5)
#loc91 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE129_large_21.c":216:5)
#loc92 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE129_large_21.c":216:61)
#loc93 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE129_large_21.c":217:5)
#loc94 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE129_large_21.c":219:12)
#loc95 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE129_large_21.c":219:5)
#loc96 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE129_large_21.c":67:1)
#loc97 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE129_large_21.c":67:29)
#loc98 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE129_large_21.c":77:19)
#loc99 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE129_large_21.c":96:27)
#loc100 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE129_large_21.c":72:1)
#loc101 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE129_large_21.c":100:1)
#loc104 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE129_large_21.c":73:1)
#loc105 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE129_large_21.c":74:5)
#loc106 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE129_large_21.c":99:5)
#loc107 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE129_large_21.c":74:8)
#loc108 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE129_large_21.c":75:5)
#loc109 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE129_large_21.c":78:5)
#loc110 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE129_large_21.c":80:5)
#loc111 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE129_large_21.c":77:9)
#loc112 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE129_large_21.c":81:9)
#loc113 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE129_large_21.c":98:9)
#loc114 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE129_large_21.c":82:13)
#loc115 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE129_large_21.c":82:17)
#loc116 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE129_large_21.c":83:13)
#loc117 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE129_large_21.c":83:34)
#loc118 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE129_large_21.c":85:13)
#loc119 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE129_large_21.c":97:13)
#loc120 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE129_large_21.c":85:17)
#loc121 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE129_large_21.c":85:25)
#loc122 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE129_large_21.c":85:27)
#loc123 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE129_large_21.c":85:30)
#loc124 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE129_large_21.c":85:38)
#loc125 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE129_large_21.c":85:40)
#loc126 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE129_large_21.c":86:13)
#loc127 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE129_large_21.c":93:13)
#loc128 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE129_large_21.c":95:13)
#loc129 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE129_large_21.c":87:32)
#loc130 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE129_large_21.c":87:24)
#loc131 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE129_large_21.c":87:17)
#loc132 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE129_large_21.c":89:17)
#loc133 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE129_large_21.c":92:17)
#loc134 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE129_large_21.c":89:25)
#loc135 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE129_large_21.c":89:21)
#loc136 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE129_large_21.c":89:28)
#loc137 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE129_large_21.c":89:32)
#loc138 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE129_large_21.c":89:30)
#loc139 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE129_large_21.c":90:17)
#loc140 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE129_large_21.c":91:41)
#loc141 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE129_large_21.c":91:34)
#loc142 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE129_large_21.c":91:21)
#loc143 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE129_large_21.c":89:37)
#loc144 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE129_large_21.c":89:36)
#loc145 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE129_large_21.c":96:17)
#loc146 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE129_large_21.c":102:1)
#loc147 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE129_large_21.c":111:1)
#loc148 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE129_large_21.c":104:5)
#loc149 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE129_large_21.c":104:9)
#loc150 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE129_large_21.c":106:13)
#loc151 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE129_large_21.c":106:12)
#loc152 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE129_large_21.c":106:5)
#loc153 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE129_large_21.c":108:12)
#loc154 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE129_large_21.c":108:5)
#loc155 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE129_large_21.c":109:22)
#loc156 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE129_large_21.c":109:5)
#loc157 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE129_large_21.c":110:18)
#loc158 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE129_large_21.c":110:5)
#loc159 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE129_large_21.c":68:1)
#loc160 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE129_large_21.c":68:29)
#loc161 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE129_large_21.c":114:1)
#loc162 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE129_large_21.c":137:1)
#loc165 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE129_large_21.c":115:1)
#loc166 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE129_large_21.c":116:5)
#loc167 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE129_large_21.c":136:5)
#loc168 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE129_large_21.c":116:8)
#loc169 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE129_large_21.c":117:5)
#loc170 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE129_large_21.c":118:9)
#loc171 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE129_large_21.c":135:9)
#loc172 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE129_large_21.c":119:13)
#loc173 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE129_large_21.c":119:17)
#loc174 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE129_large_21.c":120:13)
#loc175 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE129_large_21.c":120:34)
#loc176 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE129_large_21.c":122:13)
#loc177 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE129_large_21.c":134:13)
#loc178 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE129_large_21.c":122:17)
#loc179 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE129_large_21.c":122:25)
#loc180 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE129_large_21.c":122:27)
#loc181 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE129_large_21.c":122:30)
#loc182 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE129_large_21.c":122:38)
#loc183 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE129_large_21.c":122:40)
#loc184 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE129_large_21.c":123:13)
#loc185 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE129_large_21.c":130:13)
#loc186 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE129_large_21.c":132:13)
#loc187 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE129_large_21.c":124:32)
#loc188 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE129_large_21.c":124:24)
#loc189 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE129_large_21.c":124:17)
#loc190 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE129_large_21.c":126:17)
#loc191 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE129_large_21.c":129:17)
#loc192 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE129_large_21.c":126:25)
#loc193 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE129_large_21.c":126:21)
#loc194 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE129_large_21.c":126:28)
#loc195 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE129_large_21.c":126:32)
#loc196 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE129_large_21.c":126:30)
#loc197 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE129_large_21.c":127:17)
#loc198 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE129_large_21.c":128:41)
#loc199 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE129_large_21.c":128:34)
#loc200 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE129_large_21.c":128:21)
#loc201 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE129_large_21.c":126:37)
#loc202 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE129_large_21.c":126:36)
#loc203 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE129_large_21.c":133:27)
#loc204 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE129_large_21.c":133:17)
#loc205 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE129_large_21.c":139:1)
#loc206 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE129_large_21.c":148:1)
#loc207 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE129_large_21.c":141:5)
#loc208 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE129_large_21.c":141:9)
#loc209 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE129_large_21.c":143:13)
#loc210 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE129_large_21.c":143:12)
#loc211 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE129_large_21.c":143:5)
#loc212 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE129_large_21.c":145:12)
#loc213 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE129_large_21.c":145:5)
#loc214 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE129_large_21.c":146:22)
#loc215 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE129_large_21.c":146:5)
#loc216 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE129_large_21.c":147:18)
#loc217 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE129_large_21.c":147:5)
#loc218 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE129_large_21.c":69:1)
#loc219 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE129_large_21.c":69:28)
#loc220 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE129_large_21.c":151:1)
#loc221 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE129_large_21.c":175:1)
#loc224 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE129_large_21.c":152:1)
#loc225 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE129_large_21.c":153:5)
#loc226 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE129_large_21.c":174:5)
#loc227 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE129_large_21.c":153:8)
#loc228 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE129_large_21.c":154:5)
#loc229 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE129_large_21.c":155:9)
#loc230 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE129_large_21.c":173:9)
#loc231 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE129_large_21.c":156:13)
#loc232 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE129_large_21.c":156:17)
#loc233 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE129_large_21.c":157:13)
#loc234 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE129_large_21.c":157:34)
#loc235 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE129_large_21.c":160:13)
#loc236 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE129_large_21.c":172:13)
#loc237 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE129_large_21.c":160:17)
#loc238 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE129_large_21.c":160:25)
#loc239 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE129_large_21.c":161:13)
#loc240 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE129_large_21.c":168:13)
#loc241 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE129_large_21.c":170:13)
#loc242 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE129_large_21.c":162:32)
#loc243 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE129_large_21.c":162:24)
#loc244 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE129_large_21.c":162:17)
#loc245 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE129_large_21.c":164:17)
#loc246 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE129_large_21.c":167:17)
#loc247 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE129_large_21.c":164:25)
#loc248 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE129_large_21.c":164:21)
#loc249 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE129_large_21.c":164:28)
#loc250 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE129_large_21.c":164:32)
#loc251 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE129_large_21.c":164:30)
#loc252 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE129_large_21.c":165:17)
#loc253 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE129_large_21.c":166:41)
#loc254 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE129_large_21.c":166:34)
#loc255 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE129_large_21.c":166:21)
#loc256 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE129_large_21.c":164:37)
#loc257 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE129_large_21.c":164:36)
#loc258 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE129_large_21.c":171:27)
#loc259 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE129_large_21.c":171:17)
#loc260 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE129_large_21.c":177:1)
#loc261 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE129_large_21.c":187:1)
#loc262 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE129_large_21.c":179:5)
#loc263 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE129_large_21.c":179:9)
#loc264 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE129_large_21.c":181:13)
#loc265 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE129_large_21.c":181:12)
#loc266 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE129_large_21.c":181:5)
#loc267 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE129_large_21.c":184:12)
#loc268 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE129_large_21.c":184:5)
#loc269 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE129_large_21.c":185:21)
#loc270 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE129_large_21.c":185:5)
#loc271 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE129_large_21.c":186:17)
#loc272 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE129_large_21.c":186:5)
#loc273 = loc(fused[#loc1, #loc2])
#loc274 = loc(fused[#loc3, #loc4])
#loc275 = loc(fused[#loc6, #loc7])
#loc277 = loc(fused[#loc11, #loc12])
#loc278 = loc(fused[#loc14, #loc12])
#loc279 = loc(fused[#loc15, #loc16])
#loc280 = loc(fused[#loc17, #loc18])
#loc281 = loc(fused[#loc19, #loc20])
#loc282 = loc(fused[#loc21, #loc22])
#loc283 = loc(fused[#loc23, #loc24])
#loc284 = loc(fused[#loc25, #loc26, #loc27, #loc22])
#loc285 = loc(fused[#loc30, #loc28])
#loc286 = loc(fused[#loc31, #loc32])
#loc287 = loc(fused[#loc34, #loc33])
#loc288 = loc(fused[#loc35, #loc36])
#loc289 = loc(fused[#loc38, #loc32])
#loc290 = loc(fused[#loc43, #loc42])
#loc291 = loc(fused[#loc45, #loc46])
#loc292 = loc(fused[#loc47, #loc48])
#loc293 = loc(fused[#loc51, #loc49])
#loc294 = loc(fused[#loc53, #loc52])
#loc295 = loc(fused[#loc55, #loc54])
#loc296 = loc(fused[#loc58, #loc59])
#loc297 = loc(fused[#loc60, #loc61])
#loc298 = loc(fused[#loc62, #loc63])
#loc299 = loc(fused[#loc64, #loc65])
#loc300 = loc(fused[#loc66, #loc67])
#loc301 = loc(fused[#loc68, #loc69])
#loc302 = loc(fused[#loc70, #loc71])
#loc303 = loc(fused[#loc76, #loc77])
#loc306 = loc(fused[#loc87, #loc88])
#loc307 = loc(fused[#loc91, #loc92])
#loc308 = loc(fused[#loc95, #loc94])
#loc309 = loc(fused[#loc96, #loc97])
#loc310 = loc(fused[#loc100, #loc101])
#loc312 = loc(fused[#loc105, #loc106])
#loc313 = loc(fused[#loc108, #loc109, #loc110, #loc106])
#loc314 = loc(fused[#loc112, #loc113])
#loc315 = loc(fused[#loc114, #loc115])
#loc316 = loc(fused[#loc116, #loc117])
#loc317 = loc(fused[#loc118, #loc119])
#loc318 = loc(fused[#loc120, #loc121])
#loc319 = loc(fused[#loc123, #loc125])
#loc320 = loc(fused[#loc126, #loc127, #loc128, #loc119])
#loc321 = loc(fused[#loc131, #loc129])
#loc322 = loc(fused[#loc132, #loc133])
#loc323 = loc(fused[#loc135, #loc134])
#loc324 = loc(fused[#loc136, #loc137])
#loc325 = loc(fused[#loc139, #loc133])
#loc326 = loc(fused[#loc144, #loc143])
#loc327 = loc(fused[#loc146, #loc147])
#loc328 = loc(fused[#loc148, #loc149])
#loc329 = loc(fused[#loc152, #loc150])
#loc330 = loc(fused[#loc154, #loc153])
#loc331 = loc(fused[#loc156, #loc155])
#loc332 = loc(fused[#loc159, #loc160])
#loc333 = loc(fused[#loc161, #loc162])
#loc335 = loc(fused[#loc166, #loc167])
#loc336 = loc(fused[#loc169, #loc167])
#loc337 = loc(fused[#loc170, #loc171])
#loc338 = loc(fused[#loc172, #loc173])
#loc339 = loc(fused[#loc174, #loc175])
#loc340 = loc(fused[#loc176, #loc177])
#loc341 = loc(fused[#loc178, #loc179])
#loc342 = loc(fused[#loc181, #loc183])
#loc343 = loc(fused[#loc184, #loc185, #loc186, #loc177])
#loc344 = loc(fused[#loc189, #loc187])
#loc345 = loc(fused[#loc190, #loc191])
#loc346 = loc(fused[#loc193, #loc192])
#loc347 = loc(fused[#loc194, #loc195])
#loc348 = loc(fused[#loc197, #loc191])
#loc349 = loc(fused[#loc202, #loc201])
#loc350 = loc(fused[#loc205, #loc206])
#loc351 = loc(fused[#loc207, #loc208])
#loc352 = loc(fused[#loc211, #loc209])
#loc353 = loc(fused[#loc213, #loc212])
#loc354 = loc(fused[#loc215, #loc214])
#loc355 = loc(fused[#loc218, #loc219])
#loc356 = loc(fused[#loc220, #loc221])
#loc358 = loc(fused[#loc225, #loc226])
#loc359 = loc(fused[#loc228, #loc226])
#loc360 = loc(fused[#loc229, #loc230])
#loc361 = loc(fused[#loc231, #loc232])
#loc362 = loc(fused[#loc233, #loc234])
#loc363 = loc(fused[#loc235, #loc236])
#loc364 = loc(fused[#loc237, #loc238])
#loc365 = loc(fused[#loc239, #loc240, #loc241, #loc236])
#loc366 = loc(fused[#loc244, #loc242])
#loc367 = loc(fused[#loc245, #loc246])
#loc368 = loc(fused[#loc248, #loc247])
#loc369 = loc(fused[#loc249, #loc250])
#loc370 = loc(fused[#loc252, #loc246])
#loc371 = loc(fused[#loc257, #loc256])
#loc372 = loc(fused[#loc260, #loc261])
#loc373 = loc(fused[#loc262, #loc263])
#loc374 = loc(fused[#loc266, #loc264])
#loc375 = loc(fused[#loc268, #loc267])
#loc376 = loc(fused[#loc270, #loc269])
