!s32i = !cir.int<s, 32>
!s8i = !cir.int<s, 8>
!u32i = !cir.int<u, 32>
!u64i = !cir.int<u, 64>
#fn_attr = #cir<extra({nothrow = #cir.nothrow})>
#fn_attr1 = #cir<extra({inline = #cir.inline<no>, nothrow = #cir.nothrow, optnone = #cir.optnone})>
#loc6 = loc("CWE617_Reachable_Assertion__connect_socket_52c.c":49:61)
#loc7 = loc("CWE617_Reachable_Assertion__connect_socket_52c.c":49:65)
#loc12 = loc("CWE617_Reachable_Assertion__connect_socket_52c.c":60:65)
#loc13 = loc("CWE617_Reachable_Assertion__connect_socket_52c.c":60:69)
#loc17 = loc(fused[#loc6, #loc7])
#loc19 = loc(fused[#loc12, #loc13])
module @"/home/ladisgin/git_proj/juliet-c/testcases/CWE617_Reachable_Assertion/CWE617_Reachable_Assertion__connect_socket_52c.c" attributes {cir.lang = #cir.lang<c>, cir.sob = #cir.signed_overflow_behavior<undefined>, cir.triple = "x86_64-unknown-linux-gnu", dlti.dl_spec = #dlti.dl_spec<!llvm.ptr<271> = dense<32> : vector<4xi64>, !llvm.ptr<270> = dense<32> : vector<4xi64>, i64 = dense<64> : vector<2xi64>, f128 = dense<128> : vector<2xi64>, !llvm.ptr<272> = dense<64> : vector<4xi64>, f16 = dense<16> : vector<2xi64>, f64 = dense<64> : vector<2xi64>, i32 = dense<32> : vector<2xi64>, i1 = dense<8> : vector<2xi64>, !llvm.ptr = dense<64> : vector<4xi64>, i16 = dense<16> : vector<2xi64>, i8 = dense<8> : vector<2xi64>, i128 = dense<128> : vector<2xi64>, f80 = dense<128> : vector<2xi64>, "dlti.endianness" = "little", "dlti.stack_alignment" = 128 : i64>} {
  cir.func private @__assert_fail(!cir.ptr<!s8i>, !cir.ptr<!s8i>, !u32i, !cir.ptr<!s8i>) extra(#fn_attr) loc(#loc15)
  cir.global "private" constant cir_private dsolocal @".str" = #cir.const_array<"data > ASSERT_VALUE\00" : !cir.array<!s8i x 20>> : !cir.array<!s8i x 20> {alignment = 1 : i64} loc(#loc3)
  cir.global "private" constant cir_private dsolocal @".str.1" = #cir.const_array<"CWE617_Reachable_Assertion__connect_socket_52c.c\00" : !cir.array<!s8i x 49>> : !cir.array<!s8i x 49> {alignment = 1 : i64} loc(#loc3)
  cir.global "private" constant cir_private dsolocal @".str.2" = #cir.const_array<"void CWE617_Reachable_Assertion__connect_socket_52c_badSink(int)\00" : !cir.array<!s8i x 65>> : !cir.array<!s8i x 65> {alignment = 1 : i64} loc(#loc3)
  cir.func @CWE617_Reachable_Assertion__connect_socket_52c_badSink(%arg0: !s32i loc(fused[#loc6, #loc7])) extra(#fn_attr1) {
    %0 = cir.alloca !s32i, !cir.ptr<!s32i>, ["data", init] {alignment = 4 : i64} loc(#loc17)
    cir.store %arg0, %0 : !s32i, !cir.ptr<!s32i> loc(#loc8)
    %1 = cir.const #cir.int<4> : !u64i loc(#loc3)
    cir.br ^bb1 loc(#loc3)
  ^bb1:  // pred: ^bb0
    cir.br ^bb2 loc(#loc3)
  ^bb2:  // pred: ^bb1
    %2 = cir.load %0 : !cir.ptr<!s32i>, !s32i loc(#loc3)
    %3 = cir.const #cir.int<5> : !s32i loc(#loc3)
    %4 = cir.cmp(gt, %2, %3) : !s32i, !cir.bool loc(#loc3)
    cir.brcond %4 ^bb3, ^bb4 loc(#loc3)
  ^bb3:  // pred: ^bb2
    cir.br ^bb5 loc(#loc3)
  ^bb4:  // pred: ^bb2
    %5 = cir.get_global @".str" : !cir.ptr<!cir.array<!s8i x 20>> loc(#loc3)
    %6 = cir.cast(array_to_ptrdecay, %5 : !cir.ptr<!cir.array<!s8i x 20>>), !cir.ptr<!s8i> loc(#loc3)
    %7 = cir.get_global @".str.1" : !cir.ptr<!cir.array<!s8i x 49>> loc(#loc3)
    %8 = cir.cast(array_to_ptrdecay, %7 : !cir.ptr<!cir.array<!s8i x 49>>), !cir.ptr<!s8i> loc(#loc3)
    %9 = cir.const #cir.int<52> : !s32i loc(#loc3)
    %10 = cir.cast(integral, %9 : !s32i), !u32i loc(#loc3)
    %11 = cir.get_global @".str.2" : !cir.ptr<!cir.array<!s8i x 65>> loc(#loc3)
    %12 = cir.cast(array_to_ptrdecay, %11 : !cir.ptr<!cir.array<!s8i x 65>>), !cir.ptr<!s8i> loc(#loc3)
    cir.call @__assert_fail(%6, %8, %10, %12) : (!cir.ptr<!s8i>, !cir.ptr<!s8i>, !u32i, !cir.ptr<!s8i>) -> () extra(#fn_attr) loc(#loc3)
    cir.br ^bb5 loc(#loc3)
  ^bb5:  // 2 preds: ^bb3, ^bb4
    cir.br ^bb6 loc(#loc3)
  ^bb6:  // pred: ^bb5
    cir.br ^bb7 loc(#loc3)
  ^bb7:  // pred: ^bb6
    cir.return loc(#loc5)
  } loc(#loc16)
  cir.global "private" constant cir_private dsolocal @".str.3" = #cir.const_array<"void CWE617_Reachable_Assertion__connect_socket_52c_goodG2BSink(int)\00" : !cir.array<!s8i x 69>> : !cir.array<!s8i x 69> {alignment = 1 : i64} loc(#loc9)
  cir.func @CWE617_Reachable_Assertion__connect_socket_52c_goodG2BSink(%arg0: !s32i loc(fused[#loc12, #loc13])) extra(#fn_attr1) {
    %0 = cir.alloca !s32i, !cir.ptr<!s32i>, ["data", init] {alignment = 4 : i64} loc(#loc19)
    cir.store %arg0, %0 : !s32i, !cir.ptr<!s32i> loc(#loc14)
    %1 = cir.const #cir.int<4> : !u64i loc(#loc9)
    cir.br ^bb1 loc(#loc9)
  ^bb1:  // pred: ^bb0
    cir.br ^bb2 loc(#loc9)
  ^bb2:  // pred: ^bb1
    %2 = cir.load %0 : !cir.ptr<!s32i>, !s32i loc(#loc9)
    %3 = cir.const #cir.int<5> : !s32i loc(#loc9)
    %4 = cir.cmp(gt, %2, %3) : !s32i, !cir.bool loc(#loc9)
    cir.brcond %4 ^bb3, ^bb4 loc(#loc9)
  ^bb3:  // pred: ^bb2
    cir.br ^bb5 loc(#loc9)
  ^bb4:  // pred: ^bb2
    %5 = cir.get_global @".str" : !cir.ptr<!cir.array<!s8i x 20>> loc(#loc9)
    %6 = cir.cast(array_to_ptrdecay, %5 : !cir.ptr<!cir.array<!s8i x 20>>), !cir.ptr<!s8i> loc(#loc9)
    %7 = cir.get_global @".str.1" : !cir.ptr<!cir.array<!s8i x 49>> loc(#loc9)
    %8 = cir.cast(array_to_ptrdecay, %7 : !cir.ptr<!cir.array<!s8i x 49>>), !cir.ptr<!s8i> loc(#loc9)
    %9 = cir.const #cir.int<63> : !s32i loc(#loc9)
    %10 = cir.cast(integral, %9 : !s32i), !u32i loc(#loc9)
    %11 = cir.get_global @".str.3" : !cir.ptr<!cir.array<!s8i x 69>> loc(#loc9)
    %12 = cir.cast(array_to_ptrdecay, %11 : !cir.ptr<!cir.array<!s8i x 69>>), !cir.ptr<!s8i> loc(#loc9)
    cir.call @__assert_fail(%6, %8, %10, %12) : (!cir.ptr<!s8i>, !cir.ptr<!s8i>, !u32i, !cir.ptr<!s8i>) -> () extra(#fn_attr) loc(#loc9)
    cir.br ^bb5 loc(#loc9)
  ^bb5:  // 2 preds: ^bb3, ^bb4
    cir.br ^bb6 loc(#loc9)
  ^bb6:  // pred: ^bb5
    cir.br ^bb7 loc(#loc9)
  ^bb7:  // pred: ^bb6
    cir.return loc(#loc11)
  } loc(#loc18)
} loc(#loc)
#loc = loc("/home/ladisgin/git_proj/juliet-c/testcases/CWE617_Reachable_Assertion/CWE617_Reachable_Assertion__connect_socket_52c.c":0:0)
#loc1 = loc("/usr/include/assert.h":67:1)
#loc2 = loc("/usr/include/assert.h":69:43)
#loc3 = loc("CWE617_Reachable_Assertion__connect_socket_52c.c":52:5)
#loc4 = loc("CWE617_Reachable_Assertion__connect_socket_52c.c":49:1)
#loc5 = loc("CWE617_Reachable_Assertion__connect_socket_52c.c":53:1)
#loc8 = loc("CWE617_Reachable_Assertion__connect_socket_52c.c":50:1)
#loc9 = loc("CWE617_Reachable_Assertion__connect_socket_52c.c":63:5)
#loc10 = loc("CWE617_Reachable_Assertion__connect_socket_52c.c":60:1)
#loc11 = loc("CWE617_Reachable_Assertion__connect_socket_52c.c":64:1)
#loc14 = loc("CWE617_Reachable_Assertion__connect_socket_52c.c":61:1)
#loc15 = loc(fused[#loc1, #loc2])
#loc16 = loc(fused[#loc4, #loc5])
#loc18 = loc(fused[#loc10, #loc11])
