!s32i = !cir.int<s, 32>
!s8i = !cir.int<s, 8>
#fn_attr = #cir<extra({inline = #cir.inline<no>, nothrow = #cir.nothrow, optnone = #cir.optnone, uwtable = #cir.uwtable<async>})>
module @"/workspaces/juliet-c/testcases/CWE398_Poor_Code_Quality/CWE398_Poor_Code_Quality__addition_06.c" attributes {cir.lang = #cir.lang<c>, cir.sob = #cir.signed_overflow_behavior<undefined>, cir.triple = "x86_64-unknown-linux-gnu", cir.type_size_info = #cir.type_size_info<char = 8, int = 32, size_t = 64>, cir.uwtable = #cir.uwtable<async>, dlti.dl_spec = #dlti.dl_spec<!llvm.ptr = dense<64> : vector<4xi64>, i8 = dense<8> : vector<2xi64>, i1 = dense<8> : vector<2xi64>, i32 = dense<32> : vector<2xi64>, i16 = dense<16> : vector<2xi64>, f16 = dense<16> : vector<2xi64>, f64 = dense<64> : vector<2xi64>, !llvm.ptr<270> = dense<32> : vector<4xi64>, !llvm.ptr<271> = dense<32> : vector<4xi64>, f128 = dense<128> : vector<2xi64>, !llvm.ptr<272> = dense<64> : vector<4xi64>, i64 = dense<64> : vector<2xi64>, i128 = dense<128> : vector<2xi64>, f80 = dense<128> : vector<2xi64>, "dlti.mangling_mode" = "e", "dlti.endianness" = "little", "dlti.stack_alignment" = 128 : i64>} {
  cir.func private @printIntLine(!s32i) loc(#loc74)
  cir.func no_proto @CWE398_Poor_Code_Quality__addition_06_bad() extra(#fn_attr) {
    cir.scope {
      %0 = cir.const #cir.int<5> : !s32i loc(#loc7)
      %1 = cir.const #cir.int<5> : !s32i loc(#loc8)
      %2 = cir.cmp(eq, %0, %1) : !s32i, !cir.bool loc(#loc77)
      cir.if %2 {
        cir.scope {
          %3 = cir.alloca !s32i, !cir.ptr<!s32i>, ["intOne", init] {alignment = 4 : i64} loc(#loc80)
          %4 = cir.alloca !s32i, !cir.ptr<!s32i>, ["intTwo", init] {alignment = 4 : i64} loc(#loc81)
          %5 = cir.alloca !s32i, !cir.ptr<!s32i>, ["intSum", init] {alignment = 4 : i64} loc(#loc82)
          %6 = cir.const #cir.int<1> : !s32i loc(#loc13)
          cir.store %6, %3 : !s32i, !cir.ptr<!s32i> loc(#loc80)
          %7 = cir.const #cir.int<1> : !s32i loc(#loc14)
          cir.store %7, %4 : !s32i, !cir.ptr<!s32i> loc(#loc81)
          %8 = cir.const #cir.int<0> : !s32i loc(#loc15)
          cir.store %8, %5 : !s32i, !cir.ptr<!s32i> loc(#loc82)
          %9 = cir.load %5 : !cir.ptr<!s32i>, !s32i loc(#loc16)
          cir.call @printIntLine(%9) : (!s32i) -> () loc(#loc17)
          %10 = cir.load %3 : !cir.ptr<!s32i>, !s32i loc(#loc18)
          %11 = cir.load %4 : !cir.ptr<!s32i>, !s32i loc(#loc19)
          %12 = cir.binop(add, %10, %11) nsw : !s32i loc(#loc18)
          %13 = cir.load %5 : !cir.ptr<!s32i>, !s32i loc(#loc20)
          cir.call @printIntLine(%13) : (!s32i) -> () loc(#loc21)
        } loc(#loc79)
      } loc(#loc78)
    } loc(#loc76)
    cir.return loc(#loc4)
  } loc(#loc75)
  cir.func no_proto @CWE398_Poor_Code_Quality__addition_06_good() extra(#fn_attr) {
    %0 = cir.get_global @good1 : !cir.ptr<!cir.func<()>> loc(#loc84)
    cir.call %0() : (!cir.ptr<!cir.func<()>>) -> () loc(#loc24)
    %1 = cir.get_global @good2 : !cir.ptr<!cir.func<()>> loc(#loc85)
    cir.call %1() : (!cir.ptr<!cir.func<()>>) -> () loc(#loc26)
    cir.return loc(#loc23)
  } loc(#loc83)
  cir.func private @printLine(!cir.ptr<!s8i>) loc(#loc86)
  cir.global "private" constant cir_private dsolocal @".str" = #cir.const_array<"Benign, fixed string\00" : !cir.array<!s8i x 21>> : !cir.array<!s8i x 21> {alignment = 1 : i64} loc(#loc30)
  cir.func no_proto internal private @good1() extra(#fn_attr) {
    cir.scope {
      %0 = cir.const #cir.int<5> : !s32i loc(#loc35)
      %1 = cir.const #cir.int<5> : !s32i loc(#loc36)
      %2 = cir.cmp(ne, %0, %1) : !s32i, !cir.bool loc(#loc89)
      cir.if %2 {
        %3 = cir.get_global @".str" : !cir.ptr<!cir.array<!s8i x 21>> loc(#loc30)
        %4 = cir.cast(array_to_ptrdecay, %3 : !cir.ptr<!cir.array<!s8i x 21>>), !cir.ptr<!s8i> loc(#loc30)
        cir.call @printLine(%4) : (!cir.ptr<!s8i>) -> () loc(#loc40)
      } else {
        cir.scope {
          %3 = cir.alloca !s32i, !cir.ptr<!s32i>, ["intOne", init] {alignment = 4 : i64} loc(#loc92)
          %4 = cir.alloca !s32i, !cir.ptr<!s32i>, ["intTwo", init] {alignment = 4 : i64} loc(#loc93)
          %5 = cir.alloca !s32i, !cir.ptr<!s32i>, ["intSum", init] {alignment = 4 : i64} loc(#loc94)
          %6 = cir.const #cir.int<1> : !s32i loc(#loc44)
          cir.store %6, %3 : !s32i, !cir.ptr<!s32i> loc(#loc92)
          %7 = cir.const #cir.int<1> : !s32i loc(#loc45)
          cir.store %7, %4 : !s32i, !cir.ptr<!s32i> loc(#loc93)
          %8 = cir.const #cir.int<0> : !s32i loc(#loc46)
          cir.store %8, %5 : !s32i, !cir.ptr<!s32i> loc(#loc94)
          %9 = cir.load %5 : !cir.ptr<!s32i>, !s32i loc(#loc47)
          cir.call @printIntLine(%9) : (!s32i) -> () loc(#loc48)
          %10 = cir.load %3 : !cir.ptr<!s32i>, !s32i loc(#loc49)
          %11 = cir.load %4 : !cir.ptr<!s32i>, !s32i loc(#loc50)
          %12 = cir.binop(add, %10, %11) nsw : !s32i loc(#loc49)
          cir.store %12, %5 : !s32i, !cir.ptr<!s32i> loc(#loc95)
          %13 = cir.load %5 : !cir.ptr<!s32i>, !s32i loc(#loc52)
          cir.call @printIntLine(%13) : (!s32i) -> () loc(#loc53)
        } loc(#loc91)
      } loc(#loc90)
    } loc(#loc88)
    cir.return loc(#loc32)
  } loc(#loc87)
  cir.func no_proto internal private @good2() extra(#fn_attr) {
    cir.scope {
      %0 = cir.const #cir.int<5> : !s32i loc(#loc58)
      %1 = cir.const #cir.int<5> : !s32i loc(#loc59)
      %2 = cir.cmp(eq, %0, %1) : !s32i, !cir.bool loc(#loc98)
      cir.if %2 {
        cir.scope {
          %3 = cir.alloca !s32i, !cir.ptr<!s32i>, ["intOne", init] {alignment = 4 : i64} loc(#loc101)
          %4 = cir.alloca !s32i, !cir.ptr<!s32i>, ["intTwo", init] {alignment = 4 : i64} loc(#loc102)
          %5 = cir.alloca !s32i, !cir.ptr<!s32i>, ["intSum", init] {alignment = 4 : i64} loc(#loc103)
          %6 = cir.const #cir.int<1> : !s32i loc(#loc64)
          cir.store %6, %3 : !s32i, !cir.ptr<!s32i> loc(#loc101)
          %7 = cir.const #cir.int<1> : !s32i loc(#loc65)
          cir.store %7, %4 : !s32i, !cir.ptr<!s32i> loc(#loc102)
          %8 = cir.const #cir.int<0> : !s32i loc(#loc66)
          cir.store %8, %5 : !s32i, !cir.ptr<!s32i> loc(#loc103)
          %9 = cir.load %5 : !cir.ptr<!s32i>, !s32i loc(#loc67)
          cir.call @printIntLine(%9) : (!s32i) -> () loc(#loc68)
          %10 = cir.load %3 : !cir.ptr<!s32i>, !s32i loc(#loc69)
          %11 = cir.load %4 : !cir.ptr<!s32i>, !s32i loc(#loc70)
          %12 = cir.binop(add, %10, %11) nsw : !s32i loc(#loc69)
          cir.store %12, %5 : !s32i, !cir.ptr<!s32i> loc(#loc104)
          %13 = cir.load %5 : !cir.ptr<!s32i>, !s32i loc(#loc72)
          cir.call @printIntLine(%13) : (!s32i) -> () loc(#loc73)
        } loc(#loc100)
      } loc(#loc99)
    } loc(#loc97)
    cir.return loc(#loc55)
  } loc(#loc96)
} loc(#loc)
#loc = loc("/workspaces/juliet-c/testcases/CWE398_Poor_Code_Quality/CWE398_Poor_Code_Quality__addition_06.c":0:0)
#loc1 = loc("../../testcasesupport/std_testcase_io.h":18:1)
#loc2 = loc("../../testcasesupport/std_testcase_io.h":18:33)
#loc3 = loc("CWE398_Poor_Code_Quality__addition_06.c":25:1)
#loc4 = loc("CWE398_Poor_Code_Quality__addition_06.c":37:1)
#loc5 = loc("CWE398_Poor_Code_Quality__addition_06.c":27:5)
#loc6 = loc("CWE398_Poor_Code_Quality__addition_06.c":36:5)
#loc7 = loc("CWE398_Poor_Code_Quality__addition_06.c":27:8)
#loc8 = loc("CWE398_Poor_Code_Quality__addition_06.c":27:27)
#loc9 = loc("CWE398_Poor_Code_Quality__addition_06.c":28:5)
#loc10 = loc("CWE398_Poor_Code_Quality__addition_06.c":29:9)
#loc11 = loc("CWE398_Poor_Code_Quality__addition_06.c":35:9)
#loc12 = loc("CWE398_Poor_Code_Quality__addition_06.c":30:13)
#loc13 = loc("CWE398_Poor_Code_Quality__addition_06.c":30:26)
#loc14 = loc("CWE398_Poor_Code_Quality__addition_06.c":30:38)
#loc15 = loc("CWE398_Poor_Code_Quality__addition_06.c":30:50)
#loc16 = loc("CWE398_Poor_Code_Quality__addition_06.c":31:26)
#loc17 = loc("CWE398_Poor_Code_Quality__addition_06.c":31:13)
#loc18 = loc("CWE398_Poor_Code_Quality__addition_06.c":33:13)
#loc19 = loc("CWE398_Poor_Code_Quality__addition_06.c":33:22)
#loc20 = loc("CWE398_Poor_Code_Quality__addition_06.c":34:26)
#loc21 = loc("CWE398_Poor_Code_Quality__addition_06.c":34:13)
#loc22 = loc("CWE398_Poor_Code_Quality__addition_06.c":78:1)
#loc23 = loc("CWE398_Poor_Code_Quality__addition_06.c":82:1)
#loc24 = loc("CWE398_Poor_Code_Quality__addition_06.c":80:5)
#loc25 = loc("CWE398_Poor_Code_Quality__addition_06.c":80:11)
#loc26 = loc("CWE398_Poor_Code_Quality__addition_06.c":81:5)
#loc27 = loc("CWE398_Poor_Code_Quality__addition_06.c":81:11)
#loc28 = loc("../../testcasesupport/std_testcase_io.h":14:1)
#loc29 = loc("../../testcasesupport/std_testcase_io.h":14:33)
#loc30 = loc("CWE398_Poor_Code_Quality__addition_06.c":49:19)
#loc31 = loc("CWE398_Poor_Code_Quality__addition_06.c":44:1)
#loc32 = loc("CWE398_Poor_Code_Quality__addition_06.c":61:1)
#loc33 = loc("CWE398_Poor_Code_Quality__addition_06.c":46:5)
#loc34 = loc("CWE398_Poor_Code_Quality__addition_06.c":60:5)
#loc35 = loc("CWE398_Poor_Code_Quality__addition_06.c":46:8)
#loc36 = loc("CWE398_Poor_Code_Quality__addition_06.c":46:27)
#loc37 = loc("CWE398_Poor_Code_Quality__addition_06.c":47:5)
#loc38 = loc("CWE398_Poor_Code_Quality__addition_06.c":50:5)
#loc39 = loc("CWE398_Poor_Code_Quality__addition_06.c":52:5)
#loc40 = loc("CWE398_Poor_Code_Quality__addition_06.c":49:9)
#loc41 = loc("CWE398_Poor_Code_Quality__addition_06.c":53:9)
#loc42 = loc("CWE398_Poor_Code_Quality__addition_06.c":59:9)
#loc43 = loc("CWE398_Poor_Code_Quality__addition_06.c":54:13)
#loc44 = loc("CWE398_Poor_Code_Quality__addition_06.c":54:26)
#loc45 = loc("CWE398_Poor_Code_Quality__addition_06.c":54:38)
#loc46 = loc("CWE398_Poor_Code_Quality__addition_06.c":54:50)
#loc47 = loc("CWE398_Poor_Code_Quality__addition_06.c":55:26)
#loc48 = loc("CWE398_Poor_Code_Quality__addition_06.c":55:13)
#loc49 = loc("CWE398_Poor_Code_Quality__addition_06.c":57:22)
#loc50 = loc("CWE398_Poor_Code_Quality__addition_06.c":57:31)
#loc51 = loc("CWE398_Poor_Code_Quality__addition_06.c":57:13)
#loc52 = loc("CWE398_Poor_Code_Quality__addition_06.c":58:26)
#loc53 = loc("CWE398_Poor_Code_Quality__addition_06.c":58:13)
#loc54 = loc("CWE398_Poor_Code_Quality__addition_06.c":64:1)
#loc55 = loc("CWE398_Poor_Code_Quality__addition_06.c":76:1)
#loc56 = loc("CWE398_Poor_Code_Quality__addition_06.c":66:5)
#loc57 = loc("CWE398_Poor_Code_Quality__addition_06.c":75:5)
#loc58 = loc("CWE398_Poor_Code_Quality__addition_06.c":66:8)
#loc59 = loc("CWE398_Poor_Code_Quality__addition_06.c":66:27)
#loc60 = loc("CWE398_Poor_Code_Quality__addition_06.c":67:5)
#loc61 = loc("CWE398_Poor_Code_Quality__addition_06.c":68:9)
#loc62 = loc("CWE398_Poor_Code_Quality__addition_06.c":74:9)
#loc63 = loc("CWE398_Poor_Code_Quality__addition_06.c":69:13)
#loc64 = loc("CWE398_Poor_Code_Quality__addition_06.c":69:26)
#loc65 = loc("CWE398_Poor_Code_Quality__addition_06.c":69:38)
#loc66 = loc("CWE398_Poor_Code_Quality__addition_06.c":69:50)
#loc67 = loc("CWE398_Poor_Code_Quality__addition_06.c":70:26)
#loc68 = loc("CWE398_Poor_Code_Quality__addition_06.c":70:13)
#loc69 = loc("CWE398_Poor_Code_Quality__addition_06.c":72:22)
#loc70 = loc("CWE398_Poor_Code_Quality__addition_06.c":72:31)
#loc71 = loc("CWE398_Poor_Code_Quality__addition_06.c":72:13)
#loc72 = loc("CWE398_Poor_Code_Quality__addition_06.c":73:26)
#loc73 = loc("CWE398_Poor_Code_Quality__addition_06.c":73:13)
#loc74 = loc(fused[#loc1, #loc2])
#loc75 = loc(fused[#loc3, #loc4])
#loc76 = loc(fused[#loc5, #loc6])
#loc77 = loc(fused[#loc7, #loc8])
#loc78 = loc(fused[#loc9, #loc6])
#loc79 = loc(fused[#loc10, #loc11])
#loc80 = loc(fused[#loc12, #loc13])
#loc81 = loc(fused[#loc12, #loc14])
#loc82 = loc(fused[#loc12, #loc15])
#loc83 = loc(fused[#loc22, #loc23])
#loc84 = loc(fused[#loc24, #loc25])
#loc85 = loc(fused[#loc26, #loc27])
#loc86 = loc(fused[#loc28, #loc29])
#loc87 = loc(fused[#loc31, #loc32])
#loc88 = loc(fused[#loc33, #loc34])
#loc89 = loc(fused[#loc35, #loc36])
#loc90 = loc(fused[#loc37, #loc38, #loc39, #loc34])
#loc91 = loc(fused[#loc41, #loc42])
#loc92 = loc(fused[#loc43, #loc44])
#loc93 = loc(fused[#loc43, #loc45])
#loc94 = loc(fused[#loc43, #loc46])
#loc95 = loc(fused[#loc51, #loc50])
#loc96 = loc(fused[#loc54, #loc55])
#loc97 = loc(fused[#loc56, #loc57])
#loc98 = loc(fused[#loc58, #loc59])
#loc99 = loc(fused[#loc60, #loc57])
#loc100 = loc(fused[#loc61, #loc62])
#loc101 = loc(fused[#loc63, #loc64])
#loc102 = loc(fused[#loc63, #loc65])
#loc103 = loc(fused[#loc63, #loc66])
#loc104 = loc(fused[#loc71, #loc70])
