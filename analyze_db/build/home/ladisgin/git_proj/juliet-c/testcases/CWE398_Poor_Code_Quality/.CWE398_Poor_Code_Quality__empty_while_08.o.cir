!s32i = !cir.int<s, 32>
!s8i = !cir.int<s, 8>
!void = !cir.void
#fn_attr = #cir<extra({inline = #cir.inline<no>, nothrow = #cir.nothrow, optnone = #cir.optnone})>
module @"/home/ladisgin/git_proj/juliet-c/testcases/CWE398_Poor_Code_Quality/CWE398_Poor_Code_Quality__empty_while_08.c" attributes {cir.lang = #cir.lang<c>, cir.sob = #cir.signed_overflow_behavior<undefined>, cir.triple = "x86_64-unknown-linux-gnu", dlti.dl_spec = #dlti.dl_spec<f128 = dense<128> : vector<2xi64>, !llvm.ptr<270> = dense<32> : vector<4xi64>, f64 = dense<64> : vector<2xi64>, f16 = dense<16> : vector<2xi64>, i32 = dense<32> : vector<2xi64>, i16 = dense<16> : vector<2xi64>, i8 = dense<8> : vector<2xi64>, i1 = dense<8> : vector<2xi64>, !llvm.ptr = dense<64> : vector<4xi64>, f80 = dense<128> : vector<2xi64>, i128 = dense<128> : vector<2xi64>, i64 = dense<64> : vector<2xi64>, !llvm.ptr<272> = dense<64> : vector<4xi64>, !llvm.ptr<271> = dense<32> : vector<4xi64>, "dlti.endianness" = "little", "dlti.stack_alignment" = 128 : i64>} {
  cir.func private @printLine(!cir.ptr<!s8i>) loc(#loc82)
  cir.global "private" constant cir_private dsolocal @".str" = #cir.const_array<"Hello from bad()\00" : !cir.array<!s8i x 17>> : !cir.array<!s8i x 17> {alignment = 1 : i64} loc(#loc3)
  cir.func no_proto @CWE398_Poor_Code_Quality__empty_while_08_bad() extra(#fn_attr) {
    %0 = cir.alloca !s32i, !cir.ptr<!s32i>, ["i", init] {alignment = 4 : i64} loc(#loc84)
    cir.br ^bb1 loc(#loc85)
  ^bb1:  // pred: ^bb0
    %1 = cir.get_global @staticReturnsTrue : !cir.ptr<!cir.func<!s32i ()>> loc(#loc86)
    %2 = cir.call %1() : (!cir.ptr<!cir.func<!s32i ()>>) -> !s32i loc(#loc10)
    %3 = cir.cast(int_to_bool, %2 : !s32i), !cir.bool loc(#loc10)
    cir.brcond %3 ^bb2, ^bb10 loc(#loc87)
  ^bb2:  // pred: ^bb1
    cir.br ^bb3 loc(#loc88)
  ^bb3:  // pred: ^bb2
    %4 = cir.const #cir.int<0> : !s32i loc(#loc7)
    cir.store %4, %0 : !s32i, !cir.ptr<!s32i> loc(#loc84)
    cir.br ^bb4 loc(#loc89)
  ^bb4:  // pred: ^bb3
    cir.br ^bb5 loc(#loc89)
  ^bb5:  // 2 preds: ^bb4, ^bb6
    %5 = cir.load %0 : !cir.ptr<!s32i>, !s32i loc(#loc17)
    %6 = cir.unary(inc, %5) : !s32i, !s32i loc(#loc18)
    cir.store %6, %0 : !s32i, !cir.ptr<!s32i> loc(#loc90)
    %7 = cir.const #cir.int<10> : !s32i loc(#loc19)
    %8 = cir.cmp(lt, %5, %7) : !s32i, !cir.bool loc(#loc91)
    cir.brcond %8 ^bb6, ^bb7 loc(#loc20)
  ^bb6:  // pred: ^bb5
    cir.br ^bb5 loc(#loc16)
  ^bb7:  // pred: ^bb5
    cir.br ^bb8 loc(#loc16)
  ^bb8:  // pred: ^bb7
    cir.br ^bb9 loc(#loc14)
  ^bb9:  // pred: ^bb8
    %9 = cir.get_global @".str" : !cir.ptr<!cir.array<!s8i x 17>> loc(#loc3)
    %10 = cir.cast(array_to_ptrdecay, %9 : !cir.ptr<!cir.array<!s8i x 17>>), !cir.ptr<!s8i> loc(#loc3)
    cir.call @printLine(%10) : (!cir.ptr<!s8i>) -> () loc(#loc21)
    cir.br ^bb10 loc(#loc9)
  ^bb10:  // 2 preds: ^bb1, ^bb9
    cir.br ^bb11 loc(#loc9)
  ^bb11:  // pred: ^bb10
    cir.return loc(#loc5)
  } loc(#loc83)
  cir.func no_proto @CWE398_Poor_Code_Quality__empty_while_08_good() extra(#fn_attr) {
    %0 = cir.get_global @good1 : !cir.ptr<!cir.func<!void ()>> loc(#loc93)
    cir.call %0() : (!cir.ptr<!cir.func<!void ()>>) -> () loc(#loc24)
    %1 = cir.get_global @good2 : !cir.ptr<!cir.func<!void ()>> loc(#loc94)
    cir.call %1() : (!cir.ptr<!cir.func<!void ()>>) -> () loc(#loc26)
    cir.return loc(#loc23)
  } loc(#loc92)
  cir.func no_proto internal private @staticReturnsTrue() -> !s32i extra(#fn_attr) {
    %0 = cir.alloca !s32i, !cir.ptr<!s32i>, ["__retval"] {alignment = 4 : i64} loc(#loc29)
    %1 = cir.const #cir.int<1> : !s32i loc(#loc30)
    cir.store %1, %0 : !s32i, !cir.ptr<!s32i> loc(#loc96)
    %2 = cir.load %0 : !cir.ptr<!s32i>, !s32i loc(#loc96)
    cir.return %2 : !s32i loc(#loc96)
  } loc(#loc95)
  cir.global "private" constant cir_private dsolocal @".str.1" = #cir.const_array<"Benign, fixed string\00" : !cir.array<!s8i x 21>> : !cir.array<!s8i x 21> {alignment = 1 : i64} loc(#loc32)
  cir.global "private" constant cir_private dsolocal @".str.2" = #cir.const_array<"Inside the while statement\00" : !cir.array<!s8i x 27>> : !cir.array<!s8i x 27> {alignment = 1 : i64} loc(#loc33)
  cir.global "private" constant cir_private dsolocal @".str.3" = #cir.const_array<"Hello from good()\00" : !cir.array<!s8i x 18>> : !cir.array<!s8i x 18> {alignment = 1 : i64} loc(#loc34)
  cir.func no_proto internal private @good1() extra(#fn_attr) {
    %0 = cir.alloca !s32i, !cir.ptr<!s32i>, ["i", init] {alignment = 4 : i64} loc(#loc98)
    cir.br ^bb1 loc(#loc99)
  ^bb1:  // pred: ^bb0
    %1 = cir.get_global @staticReturnsFalse : !cir.ptr<!cir.func<!s32i ()>> loc(#loc100)
    %2 = cir.call %1() : (!cir.ptr<!cir.func<!s32i ()>>) -> !s32i loc(#loc41)
    %3 = cir.cast(int_to_bool, %2 : !s32i), !cir.bool loc(#loc41)
    cir.brcond %3 ^bb2, ^bb3 loc(#loc101)
  ^bb2:  // pred: ^bb1
    %4 = cir.get_global @".str.1" : !cir.ptr<!cir.array<!s8i x 21>> loc(#loc32)
    %5 = cir.cast(array_to_ptrdecay, %4 : !cir.ptr<!cir.array<!s8i x 21>>), !cir.ptr<!s8i> loc(#loc32)
    cir.call @printLine(%5) : (!cir.ptr<!s8i>) -> () loc(#loc46)
    cir.br ^bb11 loc(#loc44)
  ^bb3:  // pred: ^bb1
    cir.br ^bb4 loc(#loc102)
  ^bb4:  // pred: ^bb3
    %6 = cir.const #cir.int<0> : !s32i loc(#loc38)
    cir.store %6, %0 : !s32i, !cir.ptr<!s32i> loc(#loc98)
    cir.br ^bb5 loc(#loc103)
  ^bb5:  // pred: ^bb4
    cir.br ^bb6 loc(#loc103)
  ^bb6:  // 2 preds: ^bb5, ^bb7
    %7 = cir.load %0 : !cir.ptr<!s32i>, !s32i loc(#loc51)
    %8 = cir.unary(inc, %7) : !s32i, !s32i loc(#loc52)
    cir.store %8, %0 : !s32i, !cir.ptr<!s32i> loc(#loc104)
    %9 = cir.const #cir.int<10> : !s32i loc(#loc53)
    %10 = cir.cmp(lt, %7, %9) : !s32i, !cir.bool loc(#loc105)
    cir.brcond %10 ^bb7, ^bb8 loc(#loc54)
  ^bb7:  // pred: ^bb6
    %11 = cir.get_global @".str.2" : !cir.ptr<!cir.array<!s8i x 27>> loc(#loc33)
    %12 = cir.cast(array_to_ptrdecay, %11 : !cir.ptr<!cir.array<!s8i x 27>>), !cir.ptr<!s8i> loc(#loc33)
    cir.call @printLine(%12) : (!cir.ptr<!s8i>) -> () loc(#loc55)
    cir.br ^bb6 loc(#loc50)
  ^bb8:  // pred: ^bb6
    cir.br ^bb9 loc(#loc50)
  ^bb9:  // pred: ^bb8
    cir.br ^bb10 loc(#loc48)
  ^bb10:  // pred: ^bb9
    %13 = cir.get_global @".str.3" : !cir.ptr<!cir.array<!s8i x 18>> loc(#loc34)
    %14 = cir.cast(array_to_ptrdecay, %13 : !cir.ptr<!cir.array<!s8i x 18>>), !cir.ptr<!s8i> loc(#loc34)
    cir.call @printLine(%14) : (!cir.ptr<!s8i>) -> () loc(#loc56)
    cir.br ^bb11 loc(#loc40)
  ^bb11:  // 2 preds: ^bb2, ^bb10
    cir.br ^bb12 loc(#loc40)
  ^bb12:  // pred: ^bb11
    cir.return loc(#loc36)
  } loc(#loc97)
  cir.func no_proto internal private @staticReturnsFalse() -> !s32i extra(#fn_attr) {
    %0 = cir.alloca !s32i, !cir.ptr<!s32i>, ["__retval"] {alignment = 4 : i64} loc(#loc58)
    %1 = cir.const #cir.int<0> : !s32i loc(#loc59)
    cir.store %1, %0 : !s32i, !cir.ptr<!s32i> loc(#loc107)
    %2 = cir.load %0 : !cir.ptr<!s32i>, !s32i loc(#loc107)
    cir.return %2 : !s32i loc(#loc107)
  } loc(#loc106)
  cir.func no_proto internal private @good2() extra(#fn_attr) {
    %0 = cir.alloca !s32i, !cir.ptr<!s32i>, ["i", init] {alignment = 4 : i64} loc(#loc109)
    cir.br ^bb1 loc(#loc110)
  ^bb1:  // pred: ^bb0
    %1 = cir.get_global @staticReturnsTrue : !cir.ptr<!cir.func<!s32i ()>> loc(#loc111)
    %2 = cir.call @staticReturnsTrue() : () -> !s32i loc(#loc67)
    %3 = cir.cast(int_to_bool, %2 : !s32i), !cir.bool loc(#loc67)
    cir.brcond %3 ^bb2, ^bb10 loc(#loc112)
  ^bb2:  // pred: ^bb1
    cir.br ^bb3 loc(#loc113)
  ^bb3:  // pred: ^bb2
    %4 = cir.const #cir.int<0> : !s32i loc(#loc64)
    cir.store %4, %0 : !s32i, !cir.ptr<!s32i> loc(#loc109)
    cir.br ^bb4 loc(#loc114)
  ^bb4:  // pred: ^bb3
    cir.br ^bb5 loc(#loc114)
  ^bb5:  // 2 preds: ^bb4, ^bb6
    %5 = cir.load %0 : !cir.ptr<!s32i>, !s32i loc(#loc74)
    %6 = cir.unary(inc, %5) : !s32i, !s32i loc(#loc75)
    cir.store %6, %0 : !s32i, !cir.ptr<!s32i> loc(#loc115)
    %7 = cir.const #cir.int<10> : !s32i loc(#loc76)
    %8 = cir.cmp(lt, %5, %7) : !s32i, !cir.bool loc(#loc116)
    cir.brcond %8 ^bb6, ^bb7 loc(#loc77)
  ^bb6:  // pred: ^bb5
    %9 = cir.get_global @".str.2" : !cir.ptr<!cir.array<!s8i x 27>> loc(#loc78)
    %10 = cir.cast(array_to_ptrdecay, %9 : !cir.ptr<!cir.array<!s8i x 27>>), !cir.ptr<!s8i> loc(#loc78)
    cir.call @printLine(%10) : (!cir.ptr<!s8i>) -> () loc(#loc79)
    cir.br ^bb5 loc(#loc73)
  ^bb7:  // pred: ^bb5
    cir.br ^bb8 loc(#loc73)
  ^bb8:  // pred: ^bb7
    cir.br ^bb9 loc(#loc71)
  ^bb9:  // pred: ^bb8
    %11 = cir.get_global @".str.3" : !cir.ptr<!cir.array<!s8i x 18>> loc(#loc80)
    %12 = cir.cast(array_to_ptrdecay, %11 : !cir.ptr<!cir.array<!s8i x 18>>), !cir.ptr<!s8i> loc(#loc80)
    cir.call @printLine(%12) : (!cir.ptr<!s8i>) -> () loc(#loc81)
    cir.br ^bb10 loc(#loc66)
  ^bb10:  // 2 preds: ^bb1, ^bb9
    cir.br ^bb11 loc(#loc66)
  ^bb11:  // pred: ^bb10
    cir.return loc(#loc62)
  } loc(#loc108)
} loc(#loc)
#loc = loc("/home/ladisgin/git_proj/juliet-c/testcases/CWE398_Poor_Code_Quality/CWE398_Poor_Code_Quality__empty_while_08.c":0:0)
#loc1 = loc("../../testcasesupport/std_testcase_io.h":14:1)
#loc2 = loc("../../testcasesupport/std_testcase_io.h":14:33)
#loc3 = loc("CWE398_Poor_Code_Quality__empty_while_08.c":44:19)
#loc4 = loc("CWE398_Poor_Code_Quality__empty_while_08.c":33:1)
#loc5 = loc("CWE398_Poor_Code_Quality__empty_while_08.c":46:1)
#loc6 = loc("CWE398_Poor_Code_Quality__empty_while_08.c":39:13)
#loc7 = loc("CWE398_Poor_Code_Quality__empty_while_08.c":39:21)
#loc8 = loc("CWE398_Poor_Code_Quality__empty_while_08.c":35:5)
#loc9 = loc("CWE398_Poor_Code_Quality__empty_while_08.c":45:5)
#loc10 = loc("CWE398_Poor_Code_Quality__empty_while_08.c":35:8)
#loc11 = loc("CWE398_Poor_Code_Quality__empty_while_08.c":35:26)
#loc12 = loc("CWE398_Poor_Code_Quality__empty_while_08.c":36:5)
#loc13 = loc("CWE398_Poor_Code_Quality__empty_while_08.c":38:9)
#loc14 = loc("CWE398_Poor_Code_Quality__empty_while_08.c":43:9)
#loc15 = loc("CWE398_Poor_Code_Quality__empty_while_08.c":40:13)
#loc16 = loc("CWE398_Poor_Code_Quality__empty_while_08.c":42:13)
#loc17 = loc("CWE398_Poor_Code_Quality__empty_while_08.c":40:20)
#loc18 = loc("CWE398_Poor_Code_Quality__empty_while_08.c":40:19)
#loc19 = loc("CWE398_Poor_Code_Quality__empty_while_08.c":40:25)
#loc20 = loc("CWE398_Poor_Code_Quality__empty_while_08.c":40:23)
#loc21 = loc("CWE398_Poor_Code_Quality__empty_while_08.c":44:9)
#loc22 = loc("CWE398_Poor_Code_Quality__empty_while_08.c":91:1)
#loc23 = loc("CWE398_Poor_Code_Quality__empty_while_08.c":95:1)
#loc24 = loc("CWE398_Poor_Code_Quality__empty_while_08.c":93:5)
#loc25 = loc("CWE398_Poor_Code_Quality__empty_while_08.c":93:11)
#loc26 = loc("CWE398_Poor_Code_Quality__empty_while_08.c":94:5)
#loc27 = loc("CWE398_Poor_Code_Quality__empty_while_08.c":94:11)
#loc28 = loc("CWE398_Poor_Code_Quality__empty_while_08.c":21:1)
#loc29 = loc("CWE398_Poor_Code_Quality__empty_while_08.c":24:1)
#loc30 = loc("CWE398_Poor_Code_Quality__empty_while_08.c":23:12)
#loc31 = loc("CWE398_Poor_Code_Quality__empty_while_08.c":23:5)
#loc32 = loc("CWE398_Poor_Code_Quality__empty_while_08.c":58:19)
#loc33 = loc("CWE398_Poor_Code_Quality__empty_while_08.c":67:27)
#loc34 = loc("CWE398_Poor_Code_Quality__empty_while_08.c":70:19)
#loc35 = loc("CWE398_Poor_Code_Quality__empty_while_08.c":53:1)
#loc36 = loc("CWE398_Poor_Code_Quality__empty_while_08.c":72:1)
#loc37 = loc("CWE398_Poor_Code_Quality__empty_while_08.c":64:13)
#loc38 = loc("CWE398_Poor_Code_Quality__empty_while_08.c":64:21)
#loc39 = loc("CWE398_Poor_Code_Quality__empty_while_08.c":55:5)
#loc40 = loc("CWE398_Poor_Code_Quality__empty_while_08.c":71:5)
#loc41 = loc("CWE398_Poor_Code_Quality__empty_while_08.c":55:8)
#loc42 = loc("CWE398_Poor_Code_Quality__empty_while_08.c":55:27)
#loc43 = loc("CWE398_Poor_Code_Quality__empty_while_08.c":56:5)
#loc44 = loc("CWE398_Poor_Code_Quality__empty_while_08.c":59:5)
#loc45 = loc("CWE398_Poor_Code_Quality__empty_while_08.c":61:5)
#loc46 = loc("CWE398_Poor_Code_Quality__empty_while_08.c":58:9)
#loc47 = loc("CWE398_Poor_Code_Quality__empty_while_08.c":63:9)
#loc48 = loc("CWE398_Poor_Code_Quality__empty_while_08.c":69:9)
#loc49 = loc("CWE398_Poor_Code_Quality__empty_while_08.c":65:13)
#loc50 = loc("CWE398_Poor_Code_Quality__empty_while_08.c":68:13)
#loc51 = loc("CWE398_Poor_Code_Quality__empty_while_08.c":65:20)
#loc52 = loc("CWE398_Poor_Code_Quality__empty_while_08.c":65:19)
#loc53 = loc("CWE398_Poor_Code_Quality__empty_while_08.c":65:25)
#loc54 = loc("CWE398_Poor_Code_Quality__empty_while_08.c":65:23)
#loc55 = loc("CWE398_Poor_Code_Quality__empty_while_08.c":67:17)
#loc56 = loc("CWE398_Poor_Code_Quality__empty_while_08.c":70:9)
#loc57 = loc("CWE398_Poor_Code_Quality__empty_while_08.c":26:1)
#loc58 = loc("CWE398_Poor_Code_Quality__empty_while_08.c":29:1)
#loc59 = loc("CWE398_Poor_Code_Quality__empty_while_08.c":28:12)
#loc60 = loc("CWE398_Poor_Code_Quality__empty_while_08.c":28:5)
#loc61 = loc("CWE398_Poor_Code_Quality__empty_while_08.c":75:1)
#loc62 = loc("CWE398_Poor_Code_Quality__empty_while_08.c":89:1)
#loc63 = loc("CWE398_Poor_Code_Quality__empty_while_08.c":81:13)
#loc64 = loc("CWE398_Poor_Code_Quality__empty_while_08.c":81:21)
#loc65 = loc("CWE398_Poor_Code_Quality__empty_while_08.c":77:5)
#loc66 = loc("CWE398_Poor_Code_Quality__empty_while_08.c":88:5)
#loc67 = loc("CWE398_Poor_Code_Quality__empty_while_08.c":77:8)
#loc68 = loc("CWE398_Poor_Code_Quality__empty_while_08.c":77:26)
#loc69 = loc("CWE398_Poor_Code_Quality__empty_while_08.c":78:5)
#loc70 = loc("CWE398_Poor_Code_Quality__empty_while_08.c":80:9)
#loc71 = loc("CWE398_Poor_Code_Quality__empty_while_08.c":86:9)
#loc72 = loc("CWE398_Poor_Code_Quality__empty_while_08.c":82:13)
#loc73 = loc("CWE398_Poor_Code_Quality__empty_while_08.c":85:13)
#loc74 = loc("CWE398_Poor_Code_Quality__empty_while_08.c":82:20)
#loc75 = loc("CWE398_Poor_Code_Quality__empty_while_08.c":82:19)
#loc76 = loc("CWE398_Poor_Code_Quality__empty_while_08.c":82:25)
#loc77 = loc("CWE398_Poor_Code_Quality__empty_while_08.c":82:23)
#loc78 = loc("CWE398_Poor_Code_Quality__empty_while_08.c":84:27)
#loc79 = loc("CWE398_Poor_Code_Quality__empty_while_08.c":84:17)
#loc80 = loc("CWE398_Poor_Code_Quality__empty_while_08.c":87:19)
#loc81 = loc("CWE398_Poor_Code_Quality__empty_while_08.c":87:9)
#loc82 = loc(fused[#loc1, #loc2])
#loc83 = loc(fused[#loc4, #loc5])
#loc84 = loc(fused[#loc6, #loc7])
#loc85 = loc(fused[#loc8, #loc9])
#loc86 = loc(fused[#loc10, #loc11])
#loc87 = loc(fused[#loc12, #loc9])
#loc88 = loc(fused[#loc13, #loc14])
#loc89 = loc(fused[#loc15, #loc16])
#loc90 = loc(fused[#loc18, #loc17])
#loc91 = loc(fused[#loc18, #loc19])
#loc92 = loc(fused[#loc22, #loc23])
#loc93 = loc(fused[#loc24, #loc25])
#loc94 = loc(fused[#loc26, #loc27])
#loc95 = loc(fused[#loc28, #loc29])
#loc96 = loc(fused[#loc31, #loc30])
#loc97 = loc(fused[#loc35, #loc36])
#loc98 = loc(fused[#loc37, #loc38])
#loc99 = loc(fused[#loc39, #loc40])
#loc100 = loc(fused[#loc41, #loc42])
#loc101 = loc(fused[#loc43, #loc44, #loc45, #loc40])
#loc102 = loc(fused[#loc47, #loc48])
#loc103 = loc(fused[#loc49, #loc50])
#loc104 = loc(fused[#loc52, #loc51])
#loc105 = loc(fused[#loc52, #loc53])
#loc106 = loc(fused[#loc57, #loc58])
#loc107 = loc(fused[#loc60, #loc59])
#loc108 = loc(fused[#loc61, #loc62])
#loc109 = loc(fused[#loc63, #loc64])
#loc110 = loc(fused[#loc65, #loc66])
#loc111 = loc(fused[#loc67, #loc68])
#loc112 = loc(fused[#loc69, #loc66])
#loc113 = loc(fused[#loc70, #loc71])
#loc114 = loc(fused[#loc72, #loc73])
#loc115 = loc(fused[#loc75, #loc74])
#loc116 = loc(fused[#loc75, #loc76])
