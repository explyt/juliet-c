!s32i = !cir.int<s, 32>
!s8i = !cir.int<s, 8>
!u32i = !cir.int<u, 32>
!u64i = !cir.int<u, 64>
!void = !cir.void
#false = #cir.bool<false> : !cir.bool
#fn_attr = #cir<extra({nothrow = #cir.nothrow})>
#fn_attr1 = #cir<extra({inline = #cir.inline<no>, nothrow = #cir.nothrow, optnone = #cir.optnone, uwtable = #cir.uwtable<async>})>
#true = #cir.bool<true> : !cir.bool
module @"/workspaces/juliet-c/testcases/CWE122_Heap_Based_Buffer_Overflow/s06/CWE122_Heap_Based_Buffer_Overflow__c_CWE129_rand_32.c" attributes {cir.lang = #cir.lang<c>, cir.sob = #cir.signed_overflow_behavior<undefined>, cir.triple = "x86_64-unknown-linux-gnu", cir.type_size_info = #cir.type_size_info<char = 8, int = 32, size_t = 64>, cir.uwtable = #cir.uwtable<async>, dlti.dl_spec = #dlti.dl_spec<f80 = dense<128> : vector<2xi64>, i128 = dense<128> : vector<2xi64>, i8 = dense<8> : vector<2xi64>, !llvm.ptr = dense<64> : vector<4xi64>, i1 = dense<8> : vector<2xi64>, f64 = dense<64> : vector<2xi64>, f16 = dense<16> : vector<2xi64>, i16 = dense<16> : vector<2xi64>, i32 = dense<32> : vector<2xi64>, !llvm.ptr<270> = dense<32> : vector<4xi64>, !llvm.ptr<272> = dense<64> : vector<4xi64>, i64 = dense<64> : vector<2xi64>, f128 = dense<128> : vector<2xi64>, !llvm.ptr<271> = dense<32> : vector<4xi64>, "dlti.stack_alignment" = 128 : i64, "dlti.endianness" = "little", "dlti.mangling_mode" = "e">} {
  cir.func private @rand() -> !s32i extra(#fn_attr) loc(#loc284)
  cir.func private @malloc(!u64i) -> !cir.ptr<!void> extra(#fn_attr) loc(#loc285)
  cir.func private @exit(!s32i) extra(#fn_attr) loc(#loc286)
  cir.func private @printIntLine(!s32i) loc(#loc287)
  cir.func private @printLine(!cir.ptr<!s8i>) loc(#loc288)
  cir.global "private" constant cir_private dsolocal @".str" = #cir.const_array<"ERROR: Array index is negative.\00" : !cir.array<!s8i x 32>> : !cir.array<!s8i x 32> {alignment = 1 : i64} loc(#loc11)
  cir.func private @free(!cir.ptr<!void>) extra(#fn_attr) loc(#loc289)
  cir.func no_proto @CWE122_Heap_Based_Buffer_Overflow__c_CWE129_rand_32_bad() extra(#fn_attr1) {
    %0 = cir.alloca !s32i, !cir.ptr<!s32i>, ["data"] {alignment = 4 : i64} loc(#loc291)
    %1 = cir.alloca !cir.ptr<!s32i>, !cir.ptr<!cir.ptr<!s32i>>, ["dataPtr1", init] {alignment = 8 : i64} loc(#loc292)
    %2 = cir.alloca !cir.ptr<!s32i>, !cir.ptr<!cir.ptr<!s32i>>, ["dataPtr2", init] {alignment = 8 : i64} loc(#loc293)
    cir.store %0, %1 : !cir.ptr<!s32i>, !cir.ptr<!cir.ptr<!s32i>> loc(#loc292)
    cir.store %0, %2 : !cir.ptr<!s32i>, !cir.ptr<!cir.ptr<!s32i>> loc(#loc293)
    %3 = cir.const #cir.int<1> : !s32i loc(#loc22)
    %4 = cir.unary(minus, %3) nsw : !s32i, !s32i loc(#loc23)
    cir.store %4, %0 : !s32i, !cir.ptr<!s32i> loc(#loc294)
    cir.scope {
      %5 = cir.alloca !s32i, !cir.ptr<!s32i>, ["data", init] {alignment = 4 : i64} loc(#loc296)
      %6 = cir.load deref %1 : !cir.ptr<!cir.ptr<!s32i>>, !cir.ptr<!s32i> loc(#loc28)
      %7 = cir.load %6 : !cir.ptr<!s32i>, !s32i loc(#loc29)
      cir.store %7, %5 : !s32i, !cir.ptr<!s32i> loc(#loc296)
      %8 = cir.call @rand() : () -> !s32i extra(#fn_attr) loc(#loc30)
      %9 = cir.const #cir.int<1> : !s32i loc(#loc30)
      %10 = cir.binop(and, %8, %9) : !s32i loc(#loc30)
      %11 = cir.cast(int_to_bool, %10 : !s32i), !cir.bool loc(#loc30)
      %12 = cir.ternary(%11, true {
        %16 = cir.call @rand() : () -> !s32i extra(#fn_attr) loc(#loc30)
        %17 = cir.cast(integral, %16 : !s32i), !u32i loc(#loc30)
        %18 = cir.const #cir.int<30> : !s32i loc(#loc30)
        %19 = cir.shift(left, %17 : !u32i, %18 : !s32i) -> !u32i loc(#loc30)
        %20 = cir.call @rand() : () -> !s32i extra(#fn_attr) loc(#loc30)
        %21 = cir.cast(integral, %20 : !s32i), !u32i loc(#loc30)
        %22 = cir.const #cir.int<15> : !s32i loc(#loc30)
        %23 = cir.shift(left, %21 : !u32i, %22 : !s32i) -> !u32i loc(#loc30)
        %24 = cir.binop(xor, %19, %23) : !u32i loc(#loc30)
        %25 = cir.call @rand() : () -> !s32i extra(#fn_attr) loc(#loc30)
        %26 = cir.cast(integral, %25 : !s32i), !u32i loc(#loc30)
        %27 = cir.binop(xor, %24, %26) : !u32i loc(#loc30)
        cir.yield %27 : !u32i loc(#loc30)
      }, false {
        %16 = cir.call @rand() : () -> !s32i extra(#fn_attr) loc(#loc30)
        %17 = cir.cast(integral, %16 : !s32i), !u32i loc(#loc30)
        %18 = cir.const #cir.int<30> : !s32i loc(#loc30)
        %19 = cir.shift(left, %17 : !u32i, %18 : !s32i) -> !u32i loc(#loc30)
        %20 = cir.call @rand() : () -> !s32i extra(#fn_attr) loc(#loc30)
        %21 = cir.cast(integral, %20 : !s32i), !u32i loc(#loc30)
        %22 = cir.const #cir.int<15> : !s32i loc(#loc30)
        %23 = cir.shift(left, %21 : !u32i, %22 : !s32i) -> !u32i loc(#loc30)
        %24 = cir.binop(xor, %19, %23) : !u32i loc(#loc30)
        %25 = cir.call @rand() : () -> !s32i extra(#fn_attr) loc(#loc30)
        %26 = cir.cast(integral, %25 : !s32i), !u32i loc(#loc30)
        %27 = cir.binop(xor, %24, %26) : !u32i loc(#loc30)
        %28 = cir.unary(minus, %27) : !u32i, !u32i loc(#loc30)
        %29 = cir.const #cir.int<1> : !s32i loc(#loc30)
        %30 = cir.cast(integral, %29 : !s32i), !u32i loc(#loc30)
        %31 = cir.binop(sub, %28, %30) : !u32i loc(#loc30)
        cir.yield %31 : !u32i loc(#loc30)
      }) : (!cir.bool) -> !u32i loc(#loc30)
      %13 = cir.cast(integral, %12 : !u32i), !s32i loc(#loc30)
      cir.store %13, %5 : !s32i, !cir.ptr<!s32i> loc(#loc297)
      %14 = cir.load %5 : !cir.ptr<!s32i>, !s32i loc(#loc32)
      %15 = cir.load deref %1 : !cir.ptr<!cir.ptr<!s32i>>, !cir.ptr<!s32i> loc(#loc33)
      cir.store %14, %15 : !s32i, !cir.ptr<!s32i> loc(#loc298)
    } loc(#loc295)
    cir.scope {
      %5 = cir.alloca !s32i, !cir.ptr<!s32i>, ["data", init] {alignment = 4 : i64} loc(#loc300)
      %6 = cir.load deref %2 : !cir.ptr<!cir.ptr<!s32i>>, !cir.ptr<!s32i> loc(#loc38)
      %7 = cir.load %6 : !cir.ptr<!s32i>, !s32i loc(#loc39)
      cir.store %7, %5 : !s32i, !cir.ptr<!s32i> loc(#loc300)
      cir.scope {
        %8 = cir.alloca !s32i, !cir.ptr<!s32i>, ["i"] {alignment = 4 : i64} loc(#loc302)
        %9 = cir.alloca !cir.ptr<!s32i>, !cir.ptr<!cir.ptr<!s32i>>, ["buffer", init] {alignment = 8 : i64} loc(#loc303)
        %10 = cir.get_global @malloc : !cir.ptr<!cir.func<(!u64i) -> !cir.ptr<!void>>> loc(#loc46)
        %11 = cir.const #cir.int<10> : !s32i loc(#loc47)
        %12 = cir.cast(integral, %11 : !s32i), !u64i loc(#loc47)
        %13 = cir.const #cir.int<4> : !u64i loc(#loc304)
        %14 = cir.binop(mul, %12, %13) : !u64i loc(#loc305)
        %15 = cir.call @malloc(%14) : (!u64i) -> !cir.ptr<!void> extra(#fn_attr) loc(#loc46)
        %16 = cir.cast(bitcast, %15 : !cir.ptr<!void>), !cir.ptr<!s32i> loc(#loc306)
        cir.store %16, %9 : !cir.ptr<!s32i>, !cir.ptr<!cir.ptr<!s32i>> loc(#loc303)
        cir.scope {
          %20 = cir.load %9 : !cir.ptr<!cir.ptr<!s32i>>, !cir.ptr<!s32i> loc(#loc52)
          %21 = cir.const #cir.ptr<null> : !cir.ptr<!void> loc(#loc53)
          %22 = cir.cast(bitcast, %21 : !cir.ptr<!void>), !cir.ptr<!s32i> loc(#loc53)
          %23 = cir.cmp(eq, %20, %22) : !cir.ptr<!s32i>, !cir.bool loc(#loc308)
          cir.if %23 {
            %24 = cir.get_global @exit : !cir.ptr<!cir.func<(!s32i)>> loc(#loc55)
            %25 = cir.const #cir.int<1> : !s32i loc(#loc56)
            %26 = cir.unary(minus, %25) nsw : !s32i, !s32i loc(#loc57)
            cir.call @exit(%26) : (!s32i) -> () extra(#fn_attr) loc(#loc55)
          } loc(#loc309)
        } loc(#loc307)
        cir.scope {
          %20 = cir.const #cir.int<0> : !s32i loc(#loc60)
          cir.store %20, %8 : !s32i, !cir.ptr<!s32i> loc(#loc311)
          cir.for : cond {
            %21 = cir.load %8 : !cir.ptr<!s32i>, !s32i loc(#loc62)
            %22 = cir.const #cir.int<10> : !s32i loc(#loc63)
            %23 = cir.cmp(lt, %21, %22) : !s32i, !cir.bool loc(#loc312)
            cir.condition(%23) loc(#loc64)
          } body {
            cir.scope {
              %21 = cir.const #cir.int<0> : !s32i loc(#loc66)
              %22 = cir.load %9 : !cir.ptr<!cir.ptr<!s32i>>, !cir.ptr<!s32i> loc(#loc67)
              %23 = cir.load %8 : !cir.ptr<!s32i>, !s32i loc(#loc68)
              %24 = cir.ptr_stride(%22 : !cir.ptr<!s32i>, %23 : !s32i), !cir.ptr<!s32i> loc(#loc69)
              cir.store %21, %24 : !s32i, !cir.ptr<!s32i> loc(#loc314)
            } loc(#loc313)
            cir.yield loc(#loc59)
          } step {
            %21 = cir.load %8 : !cir.ptr<!s32i>, !s32i loc(#loc70)
            %22 = cir.unary(inc, %21) nsw : !s32i, !s32i loc(#loc71)
            cir.store %22, %8 : !s32i, !cir.ptr<!s32i> loc(#loc315)
            cir.yield loc(#loc310)
          } loc(#loc310)
        } loc(#loc310)
        cir.scope {
          %20 = cir.load %5 : !cir.ptr<!s32i>, !s32i loc(#loc74)
          %21 = cir.const #cir.int<0> : !s32i loc(#loc75)
          %22 = cir.cmp(ge, %20, %21) : !s32i, !cir.bool loc(#loc317)
          cir.if %22 {
            %23 = cir.const #cir.int<1> : !s32i loc(#loc79)
            %24 = cir.load %9 : !cir.ptr<!cir.ptr<!s32i>>, !cir.ptr<!s32i> loc(#loc80)
            %25 = cir.load %5 : !cir.ptr<!s32i>, !s32i loc(#loc81)
            %26 = cir.ptr_stride(%24 : !cir.ptr<!s32i>, %25 : !s32i), !cir.ptr<!s32i> loc(#loc82)
            cir.store %23, %26 : !s32i, !cir.ptr<!s32i> loc(#loc319)
            cir.scope {
              %27 = cir.const #cir.int<0> : !s32i loc(#loc85)
              cir.store %27, %8 : !s32i, !cir.ptr<!s32i> loc(#loc321)
              cir.for : cond {
                %28 = cir.load %8 : !cir.ptr<!s32i>, !s32i loc(#loc87)
                %29 = cir.const #cir.int<10> : !s32i loc(#loc88)
                %30 = cir.cmp(lt, %28, %29) : !s32i, !cir.bool loc(#loc322)
                cir.condition(%30) loc(#loc89)
              } body {
                cir.scope {
                  %28 = cir.load %9 : !cir.ptr<!cir.ptr<!s32i>>, !cir.ptr<!s32i> loc(#loc91)
                  %29 = cir.load %8 : !cir.ptr<!s32i>, !s32i loc(#loc92)
                  %30 = cir.ptr_stride(%28 : !cir.ptr<!s32i>, %29 : !s32i), !cir.ptr<!s32i> loc(#loc93)
                  %31 = cir.load %30 : !cir.ptr<!s32i>, !s32i loc(#loc91)
                  cir.call @printIntLine(%31) : (!s32i) -> () loc(#loc94)
                } loc(#loc323)
                cir.yield loc(#loc84)
              } step {
                %28 = cir.load %8 : !cir.ptr<!s32i>, !s32i loc(#loc95)
                %29 = cir.unary(inc, %28) nsw : !s32i, !s32i loc(#loc96)
                cir.store %29, %8 : !s32i, !cir.ptr<!s32i> loc(#loc324)
                cir.yield loc(#loc320)
              } loc(#loc320)
            } loc(#loc320)
          } else {
            %23 = cir.get_global @".str" : !cir.ptr<!cir.array<!s8i x 32>> loc(#loc11)
            %24 = cir.cast(array_to_ptrdecay, %23 : !cir.ptr<!cir.array<!s8i x 32>>), !cir.ptr<!s8i> loc(#loc11)
            cir.call @printLine(%24) : (!cir.ptr<!s8i>) -> () loc(#loc97)
          } loc(#loc318)
        } loc(#loc316)
        %17 = cir.get_global @free : !cir.ptr<!cir.func<(!cir.ptr<!void>)>> loc(#loc98)
        %18 = cir.load %9 : !cir.ptr<!cir.ptr<!s32i>>, !cir.ptr<!s32i> loc(#loc99)
        %19 = cir.cast(bitcast, %18 : !cir.ptr<!s32i>), !cir.ptr<!void> loc(#loc99)
        cir.call @free(%19) : (!cir.ptr<!void>) -> () extra(#fn_attr) loc(#loc98)
      } loc(#loc301)
    } loc(#loc299)
    cir.return loc(#loc15)
  } loc(#loc290)
  cir.func no_proto @CWE122_Heap_Based_Buffer_Overflow__c_CWE129_rand_32_good() extra(#fn_attr1) {
    %0 = cir.get_global @goodG2B : !cir.ptr<!cir.func<()>> loc(#loc326)
    cir.call %0() : (!cir.ptr<!cir.func<()>>) -> () loc(#loc102)
    %1 = cir.get_global @goodB2G : !cir.ptr<!cir.func<()>> loc(#loc327)
    cir.call %1() : (!cir.ptr<!cir.func<()>>) -> () loc(#loc104)
    cir.return loc(#loc101)
  } loc(#loc325)
  cir.func no_proto internal private @goodG2B() extra(#fn_attr1) {
    %0 = cir.alloca !s32i, !cir.ptr<!s32i>, ["data"] {alignment = 4 : i64} loc(#loc329)
    %1 = cir.alloca !cir.ptr<!s32i>, !cir.ptr<!cir.ptr<!s32i>>, ["dataPtr1", init] {alignment = 8 : i64} loc(#loc330)
    %2 = cir.alloca !cir.ptr<!s32i>, !cir.ptr<!cir.ptr<!s32i>>, ["dataPtr2", init] {alignment = 8 : i64} loc(#loc331)
    cir.store %0, %1 : !cir.ptr<!s32i>, !cir.ptr<!cir.ptr<!s32i>> loc(#loc330)
    cir.store %0, %2 : !cir.ptr<!s32i>, !cir.ptr<!cir.ptr<!s32i>> loc(#loc331)
    %3 = cir.const #cir.int<1> : !s32i loc(#loc114)
    %4 = cir.unary(minus, %3) nsw : !s32i, !s32i loc(#loc115)
    cir.store %4, %0 : !s32i, !cir.ptr<!s32i> loc(#loc332)
    cir.scope {
      %5 = cir.alloca !s32i, !cir.ptr<!s32i>, ["data", init] {alignment = 4 : i64} loc(#loc334)
      %6 = cir.load deref %1 : !cir.ptr<!cir.ptr<!s32i>>, !cir.ptr<!s32i> loc(#loc120)
      %7 = cir.load %6 : !cir.ptr<!s32i>, !s32i loc(#loc121)
      cir.store %7, %5 : !s32i, !cir.ptr<!s32i> loc(#loc334)
      %8 = cir.const #cir.int<7> : !s32i loc(#loc122)
      cir.store %8, %5 : !s32i, !cir.ptr<!s32i> loc(#loc335)
      %9 = cir.load %5 : !cir.ptr<!s32i>, !s32i loc(#loc124)
      %10 = cir.load deref %1 : !cir.ptr<!cir.ptr<!s32i>>, !cir.ptr<!s32i> loc(#loc125)
      cir.store %9, %10 : !s32i, !cir.ptr<!s32i> loc(#loc336)
    } loc(#loc333)
    cir.scope {
      %5 = cir.alloca !s32i, !cir.ptr<!s32i>, ["data", init] {alignment = 4 : i64} loc(#loc338)
      %6 = cir.load deref %2 : !cir.ptr<!cir.ptr<!s32i>>, !cir.ptr<!s32i> loc(#loc130)
      %7 = cir.load %6 : !cir.ptr<!s32i>, !s32i loc(#loc131)
      cir.store %7, %5 : !s32i, !cir.ptr<!s32i> loc(#loc338)
      cir.scope {
        %8 = cir.alloca !s32i, !cir.ptr<!s32i>, ["i"] {alignment = 4 : i64} loc(#loc340)
        %9 = cir.alloca !cir.ptr<!s32i>, !cir.ptr<!cir.ptr<!s32i>>, ["buffer", init] {alignment = 8 : i64} loc(#loc341)
        %10 = cir.get_global @malloc : !cir.ptr<!cir.func<(!u64i) -> !cir.ptr<!void>>> loc(#loc138)
        %11 = cir.const #cir.int<10> : !s32i loc(#loc139)
        %12 = cir.cast(integral, %11 : !s32i), !u64i loc(#loc139)
        %13 = cir.const #cir.int<4> : !u64i loc(#loc342)
        %14 = cir.binop(mul, %12, %13) : !u64i loc(#loc343)
        %15 = cir.call @malloc(%14) : (!u64i) -> !cir.ptr<!void> extra(#fn_attr) loc(#loc138)
        %16 = cir.cast(bitcast, %15 : !cir.ptr<!void>), !cir.ptr<!s32i> loc(#loc344)
        cir.store %16, %9 : !cir.ptr<!s32i>, !cir.ptr<!cir.ptr<!s32i>> loc(#loc341)
        cir.scope {
          %20 = cir.load %9 : !cir.ptr<!cir.ptr<!s32i>>, !cir.ptr<!s32i> loc(#loc144)
          %21 = cir.const #cir.ptr<null> : !cir.ptr<!void> loc(#loc145)
          %22 = cir.cast(bitcast, %21 : !cir.ptr<!void>), !cir.ptr<!s32i> loc(#loc145)
          %23 = cir.cmp(eq, %20, %22) : !cir.ptr<!s32i>, !cir.bool loc(#loc346)
          cir.if %23 {
            %24 = cir.get_global @exit : !cir.ptr<!cir.func<(!s32i)>> loc(#loc147)
            %25 = cir.const #cir.int<1> : !s32i loc(#loc148)
            %26 = cir.unary(minus, %25) nsw : !s32i, !s32i loc(#loc149)
            cir.call @exit(%26) : (!s32i) -> () extra(#fn_attr) loc(#loc147)
          } loc(#loc347)
        } loc(#loc345)
        cir.scope {
          %20 = cir.const #cir.int<0> : !s32i loc(#loc152)
          cir.store %20, %8 : !s32i, !cir.ptr<!s32i> loc(#loc349)
          cir.for : cond {
            %21 = cir.load %8 : !cir.ptr<!s32i>, !s32i loc(#loc154)
            %22 = cir.const #cir.int<10> : !s32i loc(#loc155)
            %23 = cir.cmp(lt, %21, %22) : !s32i, !cir.bool loc(#loc350)
            cir.condition(%23) loc(#loc156)
          } body {
            cir.scope {
              %21 = cir.const #cir.int<0> : !s32i loc(#loc158)
              %22 = cir.load %9 : !cir.ptr<!cir.ptr<!s32i>>, !cir.ptr<!s32i> loc(#loc159)
              %23 = cir.load %8 : !cir.ptr<!s32i>, !s32i loc(#loc160)
              %24 = cir.ptr_stride(%22 : !cir.ptr<!s32i>, %23 : !s32i), !cir.ptr<!s32i> loc(#loc161)
              cir.store %21, %24 : !s32i, !cir.ptr<!s32i> loc(#loc352)
            } loc(#loc351)
            cir.yield loc(#loc151)
          } step {
            %21 = cir.load %8 : !cir.ptr<!s32i>, !s32i loc(#loc162)
            %22 = cir.unary(inc, %21) nsw : !s32i, !s32i loc(#loc163)
            cir.store %22, %8 : !s32i, !cir.ptr<!s32i> loc(#loc353)
            cir.yield loc(#loc348)
          } loc(#loc348)
        } loc(#loc348)
        cir.scope {
          %20 = cir.load %5 : !cir.ptr<!s32i>, !s32i loc(#loc166)
          %21 = cir.const #cir.int<0> : !s32i loc(#loc167)
          %22 = cir.cmp(ge, %20, %21) : !s32i, !cir.bool loc(#loc355)
          cir.if %22 {
            %23 = cir.const #cir.int<1> : !s32i loc(#loc171)
            %24 = cir.load %9 : !cir.ptr<!cir.ptr<!s32i>>, !cir.ptr<!s32i> loc(#loc172)
            %25 = cir.load %5 : !cir.ptr<!s32i>, !s32i loc(#loc173)
            %26 = cir.ptr_stride(%24 : !cir.ptr<!s32i>, %25 : !s32i), !cir.ptr<!s32i> loc(#loc174)
            cir.store %23, %26 : !s32i, !cir.ptr<!s32i> loc(#loc357)
            cir.scope {
              %27 = cir.const #cir.int<0> : !s32i loc(#loc177)
              cir.store %27, %8 : !s32i, !cir.ptr<!s32i> loc(#loc359)
              cir.for : cond {
                %28 = cir.load %8 : !cir.ptr<!s32i>, !s32i loc(#loc179)
                %29 = cir.const #cir.int<10> : !s32i loc(#loc180)
                %30 = cir.cmp(lt, %28, %29) : !s32i, !cir.bool loc(#loc360)
                cir.condition(%30) loc(#loc181)
              } body {
                cir.scope {
                  %28 = cir.load %9 : !cir.ptr<!cir.ptr<!s32i>>, !cir.ptr<!s32i> loc(#loc183)
                  %29 = cir.load %8 : !cir.ptr<!s32i>, !s32i loc(#loc184)
                  %30 = cir.ptr_stride(%28 : !cir.ptr<!s32i>, %29 : !s32i), !cir.ptr<!s32i> loc(#loc185)
                  %31 = cir.load %30 : !cir.ptr<!s32i>, !s32i loc(#loc183)
                  cir.call @printIntLine(%31) : (!s32i) -> () loc(#loc186)
                } loc(#loc361)
                cir.yield loc(#loc176)
              } step {
                %28 = cir.load %8 : !cir.ptr<!s32i>, !s32i loc(#loc187)
                %29 = cir.unary(inc, %28) nsw : !s32i, !s32i loc(#loc188)
                cir.store %29, %8 : !s32i, !cir.ptr<!s32i> loc(#loc362)
                cir.yield loc(#loc358)
              } loc(#loc358)
            } loc(#loc358)
          } else {
            %23 = cir.get_global @".str" : !cir.ptr<!cir.array<!s8i x 32>> loc(#loc189)
            %24 = cir.cast(array_to_ptrdecay, %23 : !cir.ptr<!cir.array<!s8i x 32>>), !cir.ptr<!s8i> loc(#loc189)
            cir.call @printLine(%24) : (!cir.ptr<!s8i>) -> () loc(#loc190)
          } loc(#loc356)
        } loc(#loc354)
        %17 = cir.get_global @free : !cir.ptr<!cir.func<(!cir.ptr<!void>)>> loc(#loc191)
        %18 = cir.load %9 : !cir.ptr<!cir.ptr<!s32i>>, !cir.ptr<!s32i> loc(#loc192)
        %19 = cir.cast(bitcast, %18 : !cir.ptr<!s32i>), !cir.ptr<!void> loc(#loc192)
        cir.call @free(%19) : (!cir.ptr<!void>) -> () extra(#fn_attr) loc(#loc191)
      } loc(#loc339)
    } loc(#loc337)
    cir.return loc(#loc107)
  } loc(#loc328)
  cir.global "private" constant cir_private dsolocal @".str.1" = #cir.const_array<"ERROR: Array index is out-of-bounds\00" : !cir.array<!s8i x 36>> : !cir.array<!s8i x 36> {alignment = 1 : i64} loc(#loc193)
  cir.func no_proto internal private @goodB2G() extra(#fn_attr1) {
    %0 = cir.alloca !s32i, !cir.ptr<!s32i>, ["data"] {alignment = 4 : i64} loc(#loc364)
    %1 = cir.alloca !cir.ptr<!s32i>, !cir.ptr<!cir.ptr<!s32i>>, ["dataPtr1", init] {alignment = 8 : i64} loc(#loc365)
    %2 = cir.alloca !cir.ptr<!s32i>, !cir.ptr<!cir.ptr<!s32i>>, ["dataPtr2", init] {alignment = 8 : i64} loc(#loc366)
    cir.store %0, %1 : !cir.ptr<!s32i>, !cir.ptr<!cir.ptr<!s32i>> loc(#loc365)
    cir.store %0, %2 : !cir.ptr<!s32i>, !cir.ptr<!cir.ptr<!s32i>> loc(#loc366)
    %3 = cir.const #cir.int<1> : !s32i loc(#loc202)
    %4 = cir.unary(minus, %3) nsw : !s32i, !s32i loc(#loc203)
    cir.store %4, %0 : !s32i, !cir.ptr<!s32i> loc(#loc367)
    cir.scope {
      %5 = cir.alloca !s32i, !cir.ptr<!s32i>, ["data", init] {alignment = 4 : i64} loc(#loc369)
      %6 = cir.load deref %1 : !cir.ptr<!cir.ptr<!s32i>>, !cir.ptr<!s32i> loc(#loc208)
      %7 = cir.load %6 : !cir.ptr<!s32i>, !s32i loc(#loc209)
      cir.store %7, %5 : !s32i, !cir.ptr<!s32i> loc(#loc369)
      %8 = cir.call @rand() : () -> !s32i extra(#fn_attr) loc(#loc210)
      %9 = cir.const #cir.int<1> : !s32i loc(#loc210)
      %10 = cir.binop(and, %8, %9) : !s32i loc(#loc210)
      %11 = cir.cast(int_to_bool, %10 : !s32i), !cir.bool loc(#loc210)
      %12 = cir.ternary(%11, true {
        %16 = cir.call @rand() : () -> !s32i extra(#fn_attr) loc(#loc210)
        %17 = cir.cast(integral, %16 : !s32i), !u32i loc(#loc210)
        %18 = cir.const #cir.int<30> : !s32i loc(#loc210)
        %19 = cir.shift(left, %17 : !u32i, %18 : !s32i) -> !u32i loc(#loc210)
        %20 = cir.call @rand() : () -> !s32i extra(#fn_attr) loc(#loc210)
        %21 = cir.cast(integral, %20 : !s32i), !u32i loc(#loc210)
        %22 = cir.const #cir.int<15> : !s32i loc(#loc210)
        %23 = cir.shift(left, %21 : !u32i, %22 : !s32i) -> !u32i loc(#loc210)
        %24 = cir.binop(xor, %19, %23) : !u32i loc(#loc210)
        %25 = cir.call @rand() : () -> !s32i extra(#fn_attr) loc(#loc210)
        %26 = cir.cast(integral, %25 : !s32i), !u32i loc(#loc210)
        %27 = cir.binop(xor, %24, %26) : !u32i loc(#loc210)
        cir.yield %27 : !u32i loc(#loc210)
      }, false {
        %16 = cir.call @rand() : () -> !s32i extra(#fn_attr) loc(#loc210)
        %17 = cir.cast(integral, %16 : !s32i), !u32i loc(#loc210)
        %18 = cir.const #cir.int<30> : !s32i loc(#loc210)
        %19 = cir.shift(left, %17 : !u32i, %18 : !s32i) -> !u32i loc(#loc210)
        %20 = cir.call @rand() : () -> !s32i extra(#fn_attr) loc(#loc210)
        %21 = cir.cast(integral, %20 : !s32i), !u32i loc(#loc210)
        %22 = cir.const #cir.int<15> : !s32i loc(#loc210)
        %23 = cir.shift(left, %21 : !u32i, %22 : !s32i) -> !u32i loc(#loc210)
        %24 = cir.binop(xor, %19, %23) : !u32i loc(#loc210)
        %25 = cir.call @rand() : () -> !s32i extra(#fn_attr) loc(#loc210)
        %26 = cir.cast(integral, %25 : !s32i), !u32i loc(#loc210)
        %27 = cir.binop(xor, %24, %26) : !u32i loc(#loc210)
        %28 = cir.unary(minus, %27) : !u32i, !u32i loc(#loc210)
        %29 = cir.const #cir.int<1> : !s32i loc(#loc210)
        %30 = cir.cast(integral, %29 : !s32i), !u32i loc(#loc210)
        %31 = cir.binop(sub, %28, %30) : !u32i loc(#loc210)
        cir.yield %31 : !u32i loc(#loc210)
      }) : (!cir.bool) -> !u32i loc(#loc210)
      %13 = cir.cast(integral, %12 : !u32i), !s32i loc(#loc210)
      cir.store %13, %5 : !s32i, !cir.ptr<!s32i> loc(#loc370)
      %14 = cir.load %5 : !cir.ptr<!s32i>, !s32i loc(#loc212)
      %15 = cir.load deref %1 : !cir.ptr<!cir.ptr<!s32i>>, !cir.ptr<!s32i> loc(#loc213)
      cir.store %14, %15 : !s32i, !cir.ptr<!s32i> loc(#loc371)
    } loc(#loc368)
    cir.scope {
      %5 = cir.alloca !s32i, !cir.ptr<!s32i>, ["data", init] {alignment = 4 : i64} loc(#loc373)
      %6 = cir.load deref %2 : !cir.ptr<!cir.ptr<!s32i>>, !cir.ptr<!s32i> loc(#loc218)
      %7 = cir.load %6 : !cir.ptr<!s32i>, !s32i loc(#loc219)
      cir.store %7, %5 : !s32i, !cir.ptr<!s32i> loc(#loc373)
      cir.scope {
        %8 = cir.alloca !s32i, !cir.ptr<!s32i>, ["i"] {alignment = 4 : i64} loc(#loc375)
        %9 = cir.alloca !cir.ptr<!s32i>, !cir.ptr<!cir.ptr<!s32i>>, ["buffer", init] {alignment = 8 : i64} loc(#loc376)
        %10 = cir.get_global @malloc : !cir.ptr<!cir.func<(!u64i) -> !cir.ptr<!void>>> loc(#loc226)
        %11 = cir.const #cir.int<10> : !s32i loc(#loc227)
        %12 = cir.cast(integral, %11 : !s32i), !u64i loc(#loc227)
        %13 = cir.const #cir.int<4> : !u64i loc(#loc377)
        %14 = cir.binop(mul, %12, %13) : !u64i loc(#loc378)
        %15 = cir.call @malloc(%14) : (!u64i) -> !cir.ptr<!void> extra(#fn_attr) loc(#loc226)
        %16 = cir.cast(bitcast, %15 : !cir.ptr<!void>), !cir.ptr<!s32i> loc(#loc379)
        cir.store %16, %9 : !cir.ptr<!s32i>, !cir.ptr<!cir.ptr<!s32i>> loc(#loc376)
        cir.scope {
          %20 = cir.load %9 : !cir.ptr<!cir.ptr<!s32i>>, !cir.ptr<!s32i> loc(#loc232)
          %21 = cir.const #cir.ptr<null> : !cir.ptr<!void> loc(#loc233)
          %22 = cir.cast(bitcast, %21 : !cir.ptr<!void>), !cir.ptr<!s32i> loc(#loc233)
          %23 = cir.cmp(eq, %20, %22) : !cir.ptr<!s32i>, !cir.bool loc(#loc381)
          cir.if %23 {
            %24 = cir.get_global @exit : !cir.ptr<!cir.func<(!s32i)>> loc(#loc235)
            %25 = cir.const #cir.int<1> : !s32i loc(#loc236)
            %26 = cir.unary(minus, %25) nsw : !s32i, !s32i loc(#loc237)
            cir.call @exit(%26) : (!s32i) -> () extra(#fn_attr) loc(#loc235)
          } loc(#loc382)
        } loc(#loc380)
        cir.scope {
          %20 = cir.const #cir.int<0> : !s32i loc(#loc240)
          cir.store %20, %8 : !s32i, !cir.ptr<!s32i> loc(#loc384)
          cir.for : cond {
            %21 = cir.load %8 : !cir.ptr<!s32i>, !s32i loc(#loc242)
            %22 = cir.const #cir.int<10> : !s32i loc(#loc243)
            %23 = cir.cmp(lt, %21, %22) : !s32i, !cir.bool loc(#loc385)
            cir.condition(%23) loc(#loc244)
          } body {
            cir.scope {
              %21 = cir.const #cir.int<0> : !s32i loc(#loc246)
              %22 = cir.load %9 : !cir.ptr<!cir.ptr<!s32i>>, !cir.ptr<!s32i> loc(#loc247)
              %23 = cir.load %8 : !cir.ptr<!s32i>, !s32i loc(#loc248)
              %24 = cir.ptr_stride(%22 : !cir.ptr<!s32i>, %23 : !s32i), !cir.ptr<!s32i> loc(#loc249)
              cir.store %21, %24 : !s32i, !cir.ptr<!s32i> loc(#loc387)
            } loc(#loc386)
            cir.yield loc(#loc239)
          } step {
            %21 = cir.load %8 : !cir.ptr<!s32i>, !s32i loc(#loc250)
            %22 = cir.unary(inc, %21) nsw : !s32i, !s32i loc(#loc251)
            cir.store %22, %8 : !s32i, !cir.ptr<!s32i> loc(#loc388)
            cir.yield loc(#loc383)
          } loc(#loc383)
        } loc(#loc383)
        cir.scope {
          %20 = cir.load %5 : !cir.ptr<!s32i>, !s32i loc(#loc254)
          %21 = cir.const #cir.int<0> : !s32i loc(#loc255)
          %22 = cir.cmp(ge, %20, %21) : !s32i, !cir.bool loc(#loc390)
          %23 = cir.ternary(%22, true {
            %24 = cir.load %5 : !cir.ptr<!s32i>, !s32i loc(#loc257)
            %25 = cir.const #cir.int<10> : !s32i loc(#loc258)
            %26 = cir.cmp(lt, %24, %25) : !s32i, !cir.bool loc(#loc391)
            %27 = cir.ternary(%26, true {
              %28 = cir.const #true loc(#loc256)
              cir.yield %28 : !cir.bool loc(#loc256)
            }, false {
              %28 = cir.const #false loc(#loc256)
              cir.yield %28 : !cir.bool loc(#loc256)
            }) : (!cir.bool) -> !cir.bool loc(#loc256)
            cir.yield %27 : !cir.bool loc(#loc256)
          }, false {
            %24 = cir.const #false loc(#loc256)
            cir.yield %24 : !cir.bool loc(#loc256)
          }) : (!cir.bool) -> !cir.bool loc(#loc256)
          cir.if %23 {
            %24 = cir.const #cir.int<1> : !s32i loc(#loc263)
            %25 = cir.load %9 : !cir.ptr<!cir.ptr<!s32i>>, !cir.ptr<!s32i> loc(#loc264)
            %26 = cir.load %5 : !cir.ptr<!s32i>, !s32i loc(#loc265)
            %27 = cir.ptr_stride(%25 : !cir.ptr<!s32i>, %26 : !s32i), !cir.ptr<!s32i> loc(#loc266)
            cir.store %24, %27 : !s32i, !cir.ptr<!s32i> loc(#loc393)
            cir.scope {
              %28 = cir.const #cir.int<0> : !s32i loc(#loc269)
              cir.store %28, %8 : !s32i, !cir.ptr<!s32i> loc(#loc395)
              cir.for : cond {
                %29 = cir.load %8 : !cir.ptr<!s32i>, !s32i loc(#loc271)
                %30 = cir.const #cir.int<10> : !s32i loc(#loc272)
                %31 = cir.cmp(lt, %29, %30) : !s32i, !cir.bool loc(#loc396)
                cir.condition(%31) loc(#loc273)
              } body {
                cir.scope {
                  %29 = cir.load %9 : !cir.ptr<!cir.ptr<!s32i>>, !cir.ptr<!s32i> loc(#loc275)
                  %30 = cir.load %8 : !cir.ptr<!s32i>, !s32i loc(#loc276)
                  %31 = cir.ptr_stride(%29 : !cir.ptr<!s32i>, %30 : !s32i), !cir.ptr<!s32i> loc(#loc277)
                  %32 = cir.load %31 : !cir.ptr<!s32i>, !s32i loc(#loc275)
                  cir.call @printIntLine(%32) : (!s32i) -> () loc(#loc278)
                } loc(#loc397)
                cir.yield loc(#loc268)
              } step {
                %29 = cir.load %8 : !cir.ptr<!s32i>, !s32i loc(#loc279)
                %30 = cir.unary(inc, %29) nsw : !s32i, !s32i loc(#loc280)
                cir.store %30, %8 : !s32i, !cir.ptr<!s32i> loc(#loc398)
                cir.yield loc(#loc394)
              } loc(#loc394)
            } loc(#loc394)
          } else {
            %24 = cir.get_global @".str.1" : !cir.ptr<!cir.array<!s8i x 36>> loc(#loc193)
            %25 = cir.cast(array_to_ptrdecay, %24 : !cir.ptr<!cir.array<!s8i x 36>>), !cir.ptr<!s8i> loc(#loc193)
            cir.call @printLine(%25) : (!cir.ptr<!s8i>) -> () loc(#loc281)
          } loc(#loc392)
        } loc(#loc389)
        %17 = cir.get_global @free : !cir.ptr<!cir.func<(!cir.ptr<!void>)>> loc(#loc282)
        %18 = cir.load %9 : !cir.ptr<!cir.ptr<!s32i>>, !cir.ptr<!s32i> loc(#loc283)
        %19 = cir.cast(bitcast, %18 : !cir.ptr<!s32i>), !cir.ptr<!void> loc(#loc283)
        cir.call @free(%19) : (!cir.ptr<!void>) -> () extra(#fn_attr) loc(#loc282)
      } loc(#loc374)
    } loc(#loc372)
    cir.return loc(#loc195)
  } loc(#loc363)
} loc(#loc)
#loc = loc("/workspaces/juliet-c/testcases/CWE122_Heap_Based_Buffer_Overflow/s06/CWE122_Heap_Based_Buffer_Overflow__c_CWE129_rand_32.c":0:0)
#loc1 = loc("/usr/include/stdlib.h":573:1)
#loc2 = loc("/usr/include/stdlib.h":573:24)
#loc3 = loc("/usr/include/stdlib.h":672:1)
#loc4 = loc("/usr/include/stdlib.h":672:45)
#loc5 = loc("/usr/include/stdlib.h":756:1)
#loc6 = loc("/usr/include/stdlib.h":756:70)
#loc7 = loc("../../../testcasesupport/std_testcase_io.h":18:1)
#loc8 = loc("../../../testcasesupport/std_testcase_io.h":18:33)
#loc9 = loc("../../../testcasesupport/std_testcase_io.h":14:1)
#loc10 = loc("../../../testcasesupport/std_testcase_io.h":14:33)
#loc11 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_rand_32.c":59:27)
#loc12 = loc("/usr/include/stdlib.h":687:1)
#loc13 = loc("/usr/include/stdlib.h":687:32)
#loc14 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_rand_32.c":22:1)
#loc15 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_rand_32.c":64:1)
#loc16 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_rand_32.c":24:5)
#loc17 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_rand_32.c":24:9)
#loc18 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_rand_32.c":25:5)
#loc19 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_rand_32.c":25:22)
#loc20 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_rand_32.c":26:5)
#loc21 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_rand_32.c":26:22)
#loc22 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_rand_32.c":28:13)
#loc23 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_rand_32.c":28:12)
#loc24 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_rand_32.c":28:5)
#loc25 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_rand_32.c":29:5)
#loc26 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_rand_32.c":34:5)
#loc27 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_rand_32.c":30:9)
#loc28 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_rand_32.c":30:21)
#loc29 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_rand_32.c":30:20)
#loc30 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_rand_32.c":32:16)
#loc31 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_rand_32.c":32:9)
#loc32 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_rand_32.c":33:21)
#loc33 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_rand_32.c":33:10)
#loc34 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_rand_32.c":33:9)
#loc35 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_rand_32.c":35:5)
#loc36 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_rand_32.c":63:5)
#loc37 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_rand_32.c":36:9)
#loc38 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_rand_32.c":36:21)
#loc39 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_rand_32.c":36:20)
#loc40 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_rand_32.c":37:9)
#loc41 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_rand_32.c":62:9)
#loc42 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_rand_32.c":38:13)
#loc43 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_rand_32.c":38:17)
#loc44 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_rand_32.c":39:13)
#loc45 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_rand_32.c":39:58)
#loc46 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_rand_32.c":39:35)
#loc47 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_rand_32.c":39:42)
#loc48 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_rand_32.c":39:47)
#loc49 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_rand_32.c":39:57)
#loc50 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_rand_32.c":40:13)
#loc51 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_rand_32.c":40:43)
#loc52 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_rand_32.c":40:17)
#loc53 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_rand_32.c":40:27)
#loc54 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_rand_32.c":40:33)
#loc55 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_rand_32.c":40:34)
#loc56 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_rand_32.c":40:40)
#loc57 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_rand_32.c":40:39)
#loc58 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_rand_32.c":42:13)
#loc59 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_rand_32.c":45:13)
#loc60 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_rand_32.c":42:22)
#loc61 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_rand_32.c":42:18)
#loc62 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_rand_32.c":42:25)
#loc63 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_rand_32.c":42:29)
#loc64 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_rand_32.c":42:27)
#loc65 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_rand_32.c":43:13)
#loc66 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_rand_32.c":44:29)
#loc67 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_rand_32.c":44:17)
#loc68 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_rand_32.c":44:24)
#loc69 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_rand_32.c":44:25)
#loc70 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_rand_32.c":42:34)
#loc71 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_rand_32.c":42:33)
#loc72 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_rand_32.c":48:13)
#loc73 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_rand_32.c":60:13)
#loc74 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_rand_32.c":48:17)
#loc75 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_rand_32.c":48:25)
#loc76 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_rand_32.c":49:13)
#loc77 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_rand_32.c":56:13)
#loc78 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_rand_32.c":58:13)
#loc79 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_rand_32.c":50:32)
#loc80 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_rand_32.c":50:17)
#loc81 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_rand_32.c":50:24)
#loc82 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_rand_32.c":50:28)
#loc83 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_rand_32.c":52:17)
#loc84 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_rand_32.c":55:17)
#loc85 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_rand_32.c":52:25)
#loc86 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_rand_32.c":52:21)
#loc87 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_rand_32.c":52:28)
#loc88 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_rand_32.c":52:32)
#loc89 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_rand_32.c":52:30)
#loc90 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_rand_32.c":53:17)
#loc91 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_rand_32.c":54:34)
#loc92 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_rand_32.c":54:41)
#loc93 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_rand_32.c":54:42)
#loc94 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_rand_32.c":54:21)
#loc95 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_rand_32.c":52:37)
#loc96 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_rand_32.c":52:36)
#loc97 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_rand_32.c":59:17)
#loc98 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_rand_32.c":61:13)
#loc99 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_rand_32.c":61:18)
#loc100 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_rand_32.c":160:1)
#loc101 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_rand_32.c":164:1)
#loc102 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_rand_32.c":162:5)
#loc103 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_rand_32.c":162:13)
#loc104 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_rand_32.c":163:5)
#loc105 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_rand_32.c":163:13)
#loc106 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_rand_32.c":71:1)
#loc107 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_rand_32.c":114:1)
#loc108 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_rand_32.c":73:5)
#loc109 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_rand_32.c":73:9)
#loc110 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_rand_32.c":74:5)
#loc111 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_rand_32.c":74:22)
#loc112 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_rand_32.c":75:5)
#loc113 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_rand_32.c":75:22)
#loc114 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_rand_32.c":77:13)
#loc115 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_rand_32.c":77:12)
#loc116 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_rand_32.c":77:5)
#loc117 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_rand_32.c":78:5)
#loc118 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_rand_32.c":84:5)
#loc119 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_rand_32.c":79:9)
#loc120 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_rand_32.c":79:21)
#loc121 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_rand_32.c":79:20)
#loc122 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_rand_32.c":82:16)
#loc123 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_rand_32.c":82:9)
#loc124 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_rand_32.c":83:21)
#loc125 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_rand_32.c":83:10)
#loc126 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_rand_32.c":83:9)
#loc127 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_rand_32.c":85:5)
#loc128 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_rand_32.c":113:5)
#loc129 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_rand_32.c":86:9)
#loc130 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_rand_32.c":86:21)
#loc131 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_rand_32.c":86:20)
#loc132 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_rand_32.c":87:9)
#loc133 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_rand_32.c":112:9)
#loc134 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_rand_32.c":88:13)
#loc135 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_rand_32.c":88:17)
#loc136 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_rand_32.c":89:13)
#loc137 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_rand_32.c":89:58)
#loc138 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_rand_32.c":89:35)
#loc139 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_rand_32.c":89:42)
#loc140 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_rand_32.c":89:47)
#loc141 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_rand_32.c":89:57)
#loc142 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_rand_32.c":90:13)
#loc143 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_rand_32.c":90:43)
#loc144 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_rand_32.c":90:17)
#loc145 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_rand_32.c":90:27)
#loc146 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_rand_32.c":90:33)
#loc147 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_rand_32.c":90:34)
#loc148 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_rand_32.c":90:40)
#loc149 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_rand_32.c":90:39)
#loc150 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_rand_32.c":92:13)
#loc151 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_rand_32.c":95:13)
#loc152 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_rand_32.c":92:22)
#loc153 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_rand_32.c":92:18)
#loc154 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_rand_32.c":92:25)
#loc155 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_rand_32.c":92:29)
#loc156 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_rand_32.c":92:27)
#loc157 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_rand_32.c":93:13)
#loc158 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_rand_32.c":94:29)
#loc159 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_rand_32.c":94:17)
#loc160 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_rand_32.c":94:24)
#loc161 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_rand_32.c":94:25)
#loc162 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_rand_32.c":92:34)
#loc163 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_rand_32.c":92:33)
#loc164 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_rand_32.c":98:13)
#loc165 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_rand_32.c":110:13)
#loc166 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_rand_32.c":98:17)
#loc167 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_rand_32.c":98:25)
#loc168 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_rand_32.c":99:13)
#loc169 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_rand_32.c":106:13)
#loc170 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_rand_32.c":108:13)
#loc171 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_rand_32.c":100:32)
#loc172 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_rand_32.c":100:17)
#loc173 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_rand_32.c":100:24)
#loc174 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_rand_32.c":100:28)
#loc175 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_rand_32.c":102:17)
#loc176 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_rand_32.c":105:17)
#loc177 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_rand_32.c":102:25)
#loc178 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_rand_32.c":102:21)
#loc179 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_rand_32.c":102:28)
#loc180 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_rand_32.c":102:32)
#loc181 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_rand_32.c":102:30)
#loc182 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_rand_32.c":103:17)
#loc183 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_rand_32.c":104:34)
#loc184 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_rand_32.c":104:41)
#loc185 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_rand_32.c":104:42)
#loc186 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_rand_32.c":104:21)
#loc187 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_rand_32.c":102:37)
#loc188 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_rand_32.c":102:36)
#loc189 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_rand_32.c":109:27)
#loc190 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_rand_32.c":109:17)
#loc191 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_rand_32.c":111:13)
#loc192 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_rand_32.c":111:18)
#loc193 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_rand_32.c":153:27)
#loc194 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_rand_32.c":117:1)
#loc195 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_rand_32.c":158:1)
#loc196 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_rand_32.c":119:5)
#loc197 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_rand_32.c":119:9)
#loc198 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_rand_32.c":120:5)
#loc199 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_rand_32.c":120:22)
#loc200 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_rand_32.c":121:5)
#loc201 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_rand_32.c":121:22)
#loc202 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_rand_32.c":123:13)
#loc203 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_rand_32.c":123:12)
#loc204 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_rand_32.c":123:5)
#loc205 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_rand_32.c":124:5)
#loc206 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_rand_32.c":129:5)
#loc207 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_rand_32.c":125:9)
#loc208 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_rand_32.c":125:21)
#loc209 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_rand_32.c":125:20)
#loc210 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_rand_32.c":127:16)
#loc211 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_rand_32.c":127:9)
#loc212 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_rand_32.c":128:21)
#loc213 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_rand_32.c":128:10)
#loc214 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_rand_32.c":128:9)
#loc215 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_rand_32.c":130:5)
#loc216 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_rand_32.c":157:5)
#loc217 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_rand_32.c":131:9)
#loc218 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_rand_32.c":131:21)
#loc219 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_rand_32.c":131:20)
#loc220 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_rand_32.c":132:9)
#loc221 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_rand_32.c":156:9)
#loc222 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_rand_32.c":133:13)
#loc223 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_rand_32.c":133:17)
#loc224 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_rand_32.c":134:13)
#loc225 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_rand_32.c":134:58)
#loc226 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_rand_32.c":134:35)
#loc227 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_rand_32.c":134:42)
#loc228 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_rand_32.c":134:47)
#loc229 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_rand_32.c":134:57)
#loc230 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_rand_32.c":135:13)
#loc231 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_rand_32.c":135:43)
#loc232 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_rand_32.c":135:17)
#loc233 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_rand_32.c":135:27)
#loc234 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_rand_32.c":135:33)
#loc235 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_rand_32.c":135:34)
#loc236 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_rand_32.c":135:40)
#loc237 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_rand_32.c":135:39)
#loc238 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_rand_32.c":137:13)
#loc239 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_rand_32.c":140:13)
#loc240 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_rand_32.c":137:22)
#loc241 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_rand_32.c":137:18)
#loc242 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_rand_32.c":137:25)
#loc243 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_rand_32.c":137:29)
#loc244 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_rand_32.c":137:27)
#loc245 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_rand_32.c":138:13)
#loc246 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_rand_32.c":139:29)
#loc247 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_rand_32.c":139:17)
#loc248 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_rand_32.c":139:24)
#loc249 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_rand_32.c":139:25)
#loc250 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_rand_32.c":137:34)
#loc251 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_rand_32.c":137:33)
#loc252 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_rand_32.c":142:13)
#loc253 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_rand_32.c":154:13)
#loc254 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_rand_32.c":142:17)
#loc255 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_rand_32.c":142:25)
#loc256 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_rand_32.c":142:27)
#loc257 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_rand_32.c":142:30)
#loc258 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_rand_32.c":142:38)
#loc259 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_rand_32.c":142:40)
#loc260 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_rand_32.c":143:13)
#loc261 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_rand_32.c":150:13)
#loc262 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_rand_32.c":152:13)
#loc263 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_rand_32.c":144:32)
#loc264 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_rand_32.c":144:17)
#loc265 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_rand_32.c":144:24)
#loc266 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_rand_32.c":144:28)
#loc267 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_rand_32.c":146:17)
#loc268 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_rand_32.c":149:17)
#loc269 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_rand_32.c":146:25)
#loc270 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_rand_32.c":146:21)
#loc271 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_rand_32.c":146:28)
#loc272 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_rand_32.c":146:32)
#loc273 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_rand_32.c":146:30)
#loc274 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_rand_32.c":147:17)
#loc275 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_rand_32.c":148:34)
#loc276 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_rand_32.c":148:41)
#loc277 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_rand_32.c":148:42)
#loc278 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_rand_32.c":148:21)
#loc279 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_rand_32.c":146:37)
#loc280 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_rand_32.c":146:36)
#loc281 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_rand_32.c":153:17)
#loc282 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_rand_32.c":155:13)
#loc283 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_rand_32.c":155:18)
#loc284 = loc(fused[#loc1, #loc2])
#loc285 = loc(fused[#loc3, #loc4])
#loc286 = loc(fused[#loc5, #loc6])
#loc287 = loc(fused[#loc7, #loc8])
#loc288 = loc(fused[#loc9, #loc10])
#loc289 = loc(fused[#loc12, #loc13])
#loc290 = loc(fused[#loc14, #loc15])
#loc291 = loc(fused[#loc16, #loc17])
#loc292 = loc(fused[#loc18, #loc19])
#loc293 = loc(fused[#loc20, #loc21])
#loc294 = loc(fused[#loc24, #loc22])
#loc295 = loc(fused[#loc25, #loc26])
#loc296 = loc(fused[#loc27, #loc28])
#loc297 = loc(fused[#loc31, #loc30])
#loc298 = loc(fused[#loc34, #loc32])
#loc299 = loc(fused[#loc35, #loc36])
#loc300 = loc(fused[#loc37, #loc38])
#loc301 = loc(fused[#loc40, #loc41])
#loc302 = loc(fused[#loc42, #loc43])
#loc303 = loc(fused[#loc44, #loc45])
#loc304 = loc(fused[#loc48, #loc49])
#loc305 = loc(fused[#loc47, #loc49])
#loc306 = loc(fused[#loc46, #loc45])
#loc307 = loc(fused[#loc50, #loc51])
#loc308 = loc(fused[#loc52, #loc53])
#loc309 = loc(fused[#loc54, #loc51])
#loc310 = loc(fused[#loc58, #loc59])
#loc311 = loc(fused[#loc61, #loc60])
#loc312 = loc(fused[#loc62, #loc63])
#loc313 = loc(fused[#loc65, #loc59])
#loc314 = loc(fused[#loc67, #loc66])
#loc315 = loc(fused[#loc71, #loc70])
#loc316 = loc(fused[#loc72, #loc73])
#loc317 = loc(fused[#loc74, #loc75])
#loc318 = loc(fused[#loc76, #loc77, #loc78, #loc73])
#loc319 = loc(fused[#loc80, #loc79])
#loc320 = loc(fused[#loc83, #loc84])
#loc321 = loc(fused[#loc86, #loc85])
#loc322 = loc(fused[#loc87, #loc88])
#loc323 = loc(fused[#loc90, #loc84])
#loc324 = loc(fused[#loc96, #loc95])
#loc325 = loc(fused[#loc100, #loc101])
#loc326 = loc(fused[#loc102, #loc103])
#loc327 = loc(fused[#loc104, #loc105])
#loc328 = loc(fused[#loc106, #loc107])
#loc329 = loc(fused[#loc108, #loc109])
#loc330 = loc(fused[#loc110, #loc111])
#loc331 = loc(fused[#loc112, #loc113])
#loc332 = loc(fused[#loc116, #loc114])
#loc333 = loc(fused[#loc117, #loc118])
#loc334 = loc(fused[#loc119, #loc120])
#loc335 = loc(fused[#loc123, #loc122])
#loc336 = loc(fused[#loc126, #loc124])
#loc337 = loc(fused[#loc127, #loc128])
#loc338 = loc(fused[#loc129, #loc130])
#loc339 = loc(fused[#loc132, #loc133])
#loc340 = loc(fused[#loc134, #loc135])
#loc341 = loc(fused[#loc136, #loc137])
#loc342 = loc(fused[#loc140, #loc141])
#loc343 = loc(fused[#loc139, #loc141])
#loc344 = loc(fused[#loc138, #loc137])
#loc345 = loc(fused[#loc142, #loc143])
#loc346 = loc(fused[#loc144, #loc145])
#loc347 = loc(fused[#loc146, #loc143])
#loc348 = loc(fused[#loc150, #loc151])
#loc349 = loc(fused[#loc153, #loc152])
#loc350 = loc(fused[#loc154, #loc155])
#loc351 = loc(fused[#loc157, #loc151])
#loc352 = loc(fused[#loc159, #loc158])
#loc353 = loc(fused[#loc163, #loc162])
#loc354 = loc(fused[#loc164, #loc165])
#loc355 = loc(fused[#loc166, #loc167])
#loc356 = loc(fused[#loc168, #loc169, #loc170, #loc165])
#loc357 = loc(fused[#loc172, #loc171])
#loc358 = loc(fused[#loc175, #loc176])
#loc359 = loc(fused[#loc178, #loc177])
#loc360 = loc(fused[#loc179, #loc180])
#loc361 = loc(fused[#loc182, #loc176])
#loc362 = loc(fused[#loc188, #loc187])
#loc363 = loc(fused[#loc194, #loc195])
#loc364 = loc(fused[#loc196, #loc197])
#loc365 = loc(fused[#loc198, #loc199])
#loc366 = loc(fused[#loc200, #loc201])
#loc367 = loc(fused[#loc204, #loc202])
#loc368 = loc(fused[#loc205, #loc206])
#loc369 = loc(fused[#loc207, #loc208])
#loc370 = loc(fused[#loc211, #loc210])
#loc371 = loc(fused[#loc214, #loc212])
#loc372 = loc(fused[#loc215, #loc216])
#loc373 = loc(fused[#loc217, #loc218])
#loc374 = loc(fused[#loc220, #loc221])
#loc375 = loc(fused[#loc222, #loc223])
#loc376 = loc(fused[#loc224, #loc225])
#loc377 = loc(fused[#loc228, #loc229])
#loc378 = loc(fused[#loc227, #loc229])
#loc379 = loc(fused[#loc226, #loc225])
#loc380 = loc(fused[#loc230, #loc231])
#loc381 = loc(fused[#loc232, #loc233])
#loc382 = loc(fused[#loc234, #loc231])
#loc383 = loc(fused[#loc238, #loc239])
#loc384 = loc(fused[#loc241, #loc240])
#loc385 = loc(fused[#loc242, #loc243])
#loc386 = loc(fused[#loc245, #loc239])
#loc387 = loc(fused[#loc247, #loc246])
#loc388 = loc(fused[#loc251, #loc250])
#loc389 = loc(fused[#loc252, #loc253])
#loc390 = loc(fused[#loc254, #loc255])
#loc391 = loc(fused[#loc257, #loc259])
#loc392 = loc(fused[#loc260, #loc261, #loc262, #loc253])
#loc393 = loc(fused[#loc264, #loc263])
#loc394 = loc(fused[#loc267, #loc268])
#loc395 = loc(fused[#loc270, #loc269])
#loc396 = loc(fused[#loc271, #loc272])
#loc397 = loc(fused[#loc274, #loc268])
#loc398 = loc(fused[#loc280, #loc279])
