!s32i = !cir.int<s, 32>
!s64i = !cir.int<s, 64>
!s8i = !cir.int<s, 8>
#fn_attr = #cir<extra({inline = #cir.inline<no>, nothrow = #cir.nothrow, optnone = #cir.optnone})>
#fn_attr1 = #cir<extra({nothrow = #cir.nothrow})>
#loc5 = loc("CWE190_Integer_Overflow__int64_t_fscanf_square_63b.c":25:65)
#loc6 = loc("CWE190_Integer_Overflow__int64_t_fscanf_square_63b.c":25:75)
#loc20 = loc("CWE190_Integer_Overflow__int64_t_fscanf_square_63b.c":40:69)
#loc21 = loc("CWE190_Integer_Overflow__int64_t_fscanf_square_63b.c":40:79)
#loc41 = loc("CWE190_Integer_Overflow__int64_t_fscanf_square_63b.c":51:69)
#loc42 = loc("CWE190_Integer_Overflow__int64_t_fscanf_square_63b.c":51:79)
#loc66 = loc(fused[#loc5, #loc6])
#loc71 = loc(fused[#loc20, #loc21])
#loc78 = loc(fused[#loc41, #loc42])
module @"/home/ladisgin/git_proj/test_projects/juliet-c/testcases/CWE190_Integer_Overflow/s02/CWE190_Integer_Overflow__int64_t_fscanf_square_63b.c" attributes {cir.lang = #cir.lang<c>, cir.sob = #cir.signed_overflow_behavior<undefined>, cir.triple = "x86_64-unknown-linux-gnu", dlti.dl_spec = #dlti.dl_spec<#dlti.dl_entry<!llvm.ptr, dense<64> : vector<4xi64>>, #dlti.dl_entry<i1, dense<8> : vector<2xi64>>, #dlti.dl_entry<i8, dense<8> : vector<2xi64>>, #dlti.dl_entry<i16, dense<16> : vector<2xi64>>, #dlti.dl_entry<i128, dense<128> : vector<2xi64>>, #dlti.dl_entry<f80, dense<128> : vector<2xi64>>, #dlti.dl_entry<!llvm.ptr<271>, dense<32> : vector<4xi64>>, #dlti.dl_entry<!llvm.ptr<272>, dense<64> : vector<4xi64>>, #dlti.dl_entry<i64, dense<64> : vector<2xi64>>, #dlti.dl_entry<i32, dense<32> : vector<2xi64>>, #dlti.dl_entry<f16, dense<16> : vector<2xi64>>, #dlti.dl_entry<f128, dense<128> : vector<2xi64>>, #dlti.dl_entry<!llvm.ptr<270>, dense<32> : vector<4xi64>>, #dlti.dl_entry<f64, dense<64> : vector<2xi64>>, #dlti.dl_entry<"dlti.stack_alignment", 128 : i64>, #dlti.dl_entry<"dlti.endianness", "little">>, llvm.data_layout = "e-m:e-p270:32:32-p271:32:32-p272:64:64-i64:64-i128:128-f80:128-n8:16:32:64-S128"} {
  cir.func private  @printLongLongLine(!s64i) loc(#loc64)
  cir.func  @CWE190_Integer_Overflow__int64_t_fscanf_square_63b_badSink(%arg0: !cir.ptr<!s64i> loc(fused[#loc5, #loc6])) extra(#fn_attr) {
    %0 = cir.alloca !cir.ptr<!s64i>, !cir.ptr<!cir.ptr<!s64i>>, ["dataPtr", init] {alignment = 8 : i64} loc(#loc66)
    %1 = cir.alloca !s64i, !cir.ptr<!s64i>, ["data", init] {alignment = 8 : i64} loc(#loc67)
    cir.store %arg0, %0 : !cir.ptr<!s64i>, !cir.ptr<!cir.ptr<!s64i>> loc(#loc9)
    %2 = cir.load deref %0 : !cir.ptr<!cir.ptr<!s64i>>, !cir.ptr<!s64i> loc(#loc8)
    %3 = cir.load %2 : !cir.ptr<!s64i>, !s64i loc(#loc10)
    cir.store %3, %1 : !s64i, !cir.ptr<!s64i> loc(#loc67)
    cir.scope {
      %4 = cir.alloca !s64i, !cir.ptr<!s64i>, ["result", init] {alignment = 8 : i64} loc(#loc69)
      %5 = cir.load %1 : !cir.ptr<!s64i>, !s64i loc(#loc15)
      %6 = cir.load %1 : !cir.ptr<!s64i>, !s64i loc(#loc14)
      %7 = cir.binop(mul, %5, %6) nsw : !s64i loc(#loc15)
      cir.store %7, %4 : !s64i, !cir.ptr<!s64i> loc(#loc69)
      %8 = cir.load %4 : !cir.ptr<!s64i>, !s64i loc(#loc16)
      cir.call @printLongLongLine(%8) : (!s64i) -> () loc(#loc17)
    } loc(#loc68)
    cir.return loc(#loc4)
  } loc(#loc65)
  cir.func  @CWE190_Integer_Overflow__int64_t_fscanf_square_63b_goodG2BSink(%arg0: !cir.ptr<!s64i> loc(fused[#loc20, #loc21])) extra(#fn_attr) {
    %0 = cir.alloca !cir.ptr<!s64i>, !cir.ptr<!cir.ptr<!s64i>>, ["dataPtr", init] {alignment = 8 : i64} loc(#loc71)
    %1 = cir.alloca !s64i, !cir.ptr<!s64i>, ["data", init] {alignment = 8 : i64} loc(#loc72)
    cir.store %arg0, %0 : !cir.ptr<!s64i>, !cir.ptr<!cir.ptr<!s64i>> loc(#loc24)
    %2 = cir.load deref %0 : !cir.ptr<!cir.ptr<!s64i>>, !cir.ptr<!s64i> loc(#loc23)
    %3 = cir.load %2 : !cir.ptr<!s64i>, !s64i loc(#loc25)
    cir.store %3, %1 : !s64i, !cir.ptr<!s64i> loc(#loc72)
    cir.scope {
      %4 = cir.alloca !s64i, !cir.ptr<!s64i>, ["result", init] {alignment = 8 : i64} loc(#loc74)
      %5 = cir.load %1 : !cir.ptr<!s64i>, !s64i loc(#loc30)
      %6 = cir.load %1 : !cir.ptr<!s64i>, !s64i loc(#loc29)
      %7 = cir.binop(mul, %5, %6) nsw : !s64i loc(#loc30)
      cir.store %7, %4 : !s64i, !cir.ptr<!s64i> loc(#loc74)
      %8 = cir.load %4 : !cir.ptr<!s64i>, !s64i loc(#loc31)
      cir.call @printLongLongLine(%8) : (!s64i) -> () loc(#loc32)
    } loc(#loc73)
    cir.return loc(#loc19)
  } loc(#loc70)
  cir.func private  @imaxabs(!s64i) -> !s64i extra(#fn_attr1) loc(#loc75)
  cir.func private  @sqrtl(!cir.long_double<!cir.f80>) -> !cir.long_double<!cir.f80> extra(#fn_attr1) loc(#loc35)
  cir.func private  @printLine(!cir.ptr<!s8i>) loc(#loc76)
  cir.global "private"  constant internal dsolocal @".str" = #cir.const_array<"data value is too large to perform arithmetic safely.\00" : !cir.array<!s8i x 54>> : !cir.array<!s8i x 54> {alignment = 1 : i64} loc(#loc38)
  cir.func  @CWE190_Integer_Overflow__int64_t_fscanf_square_63b_goodB2GSink(%arg0: !cir.ptr<!s64i> loc(fused[#loc41, #loc42])) extra(#fn_attr) {
    %0 = cir.alloca !cir.ptr<!s64i>, !cir.ptr<!cir.ptr<!s64i>>, ["dataPtr", init] {alignment = 8 : i64} loc(#loc78)
    %1 = cir.alloca !s64i, !cir.ptr<!s64i>, ["data", init] {alignment = 8 : i64} loc(#loc79)
    cir.store %arg0, %0 : !cir.ptr<!s64i>, !cir.ptr<!cir.ptr<!s64i>> loc(#loc45)
    %2 = cir.load deref %0 : !cir.ptr<!cir.ptr<!s64i>>, !cir.ptr<!s64i> loc(#loc44)
    %3 = cir.load %2 : !cir.ptr<!s64i>, !s64i loc(#loc46)
    cir.store %3, %1 : !s64i, !cir.ptr<!s64i> loc(#loc79)
    cir.scope {
      %4 = cir.load %1 : !cir.ptr<!s64i>, !s64i loc(#loc49)
      %5 = cir.call @imaxabs(%4) : (!s64i) -> !s64i extra(#fn_attr1) loc(#loc50)
      %6 = cir.cast(int_to_float, %5 : !s64i), !cir.long_double<!cir.f80> loc(#loc50)
      %7 = cir.get_global @sqrtl : !cir.ptr<!cir.func<!cir.long_double<!cir.f80> (!cir.long_double<!cir.f80>)>> loc(#loc51)
      %8 = cir.const #cir.int<9223372036854775807> : !s64i loc(#loc52)
      %9 = cir.cast(int_to_float, %8 : !s64i), !cir.long_double<!cir.f80> loc(#loc52)
      %10 = cir.call @sqrtl(%9) : (!cir.long_double<!cir.f80>) -> !cir.long_double<!cir.f80> extra(#fn_attr1) loc(#loc51)
      %11 = cir.cmp(le, %6, %10) : !cir.long_double<!cir.f80>, !s32i loc(#loc81)
      %12 = cir.cast(int_to_bool, %11 : !s32i), !cir.bool loc(#loc54)
      cir.if %12 {
        %13 = cir.alloca !s64i, !cir.ptr<!s64i>, ["result", init] {alignment = 8 : i64} loc(#loc83)
        %14 = cir.load %1 : !cir.ptr<!s64i>, !s64i loc(#loc60)
        %15 = cir.load %1 : !cir.ptr<!s64i>, !s64i loc(#loc59)
        %16 = cir.binop(mul, %14, %15) nsw : !s64i loc(#loc60)
        cir.store %16, %13 : !s64i, !cir.ptr<!s64i> loc(#loc83)
        %17 = cir.load %13 : !cir.ptr<!s64i>, !s64i loc(#loc61)
        cir.call @printLongLongLine(%17) : (!s64i) -> () loc(#loc62)
      } else {
        %13 = cir.get_global @".str" : !cir.ptr<!cir.array<!s8i x 54>> loc(#loc38)
        %14 = cir.cast(array_to_ptrdecay, %13 : !cir.ptr<!cir.array<!s8i x 54>>), !cir.ptr<!s8i> loc(#loc38)
        cir.call @printLine(%14) : (!cir.ptr<!s8i>) -> () loc(#loc63)
      } loc(#loc82)
    } loc(#loc80)
    cir.return loc(#loc40)
  } loc(#loc77)
} loc(#loc)
#loc = loc("/home/ladisgin/git_proj/test_projects/juliet-c/testcases/CWE190_Integer_Overflow/s02/CWE190_Integer_Overflow__int64_t_fscanf_square_63b.c":0:0)
#loc1 = loc("../../../testcasesupport/std_testcase_io.h":26:1)
#loc2 = loc("../../../testcasesupport/std_testcase_io.h":26:49)
#loc3 = loc("CWE190_Integer_Overflow__int64_t_fscanf_square_63b.c":25:1)
#loc4 = loc("CWE190_Integer_Overflow__int64_t_fscanf_square_63b.c":33:1)
#loc7 = loc("CWE190_Integer_Overflow__int64_t_fscanf_square_63b.c":27:5)
#loc8 = loc("CWE190_Integer_Overflow__int64_t_fscanf_square_63b.c":27:21)
#loc9 = loc("CWE190_Integer_Overflow__int64_t_fscanf_square_63b.c":26:1)
#loc10 = loc("CWE190_Integer_Overflow__int64_t_fscanf_square_63b.c":27:20)
#loc11 = loc("CWE190_Integer_Overflow__int64_t_fscanf_square_63b.c":28:5)
#loc12 = loc("CWE190_Integer_Overflow__int64_t_fscanf_square_63b.c":32:5)
#loc13 = loc("CWE190_Integer_Overflow__int64_t_fscanf_square_63b.c":30:9)
#loc14 = loc("CWE190_Integer_Overflow__int64_t_fscanf_square_63b.c":30:33)
#loc15 = loc("CWE190_Integer_Overflow__int64_t_fscanf_square_63b.c":30:26)
#loc16 = loc("CWE190_Integer_Overflow__int64_t_fscanf_square_63b.c":31:27)
#loc17 = loc("CWE190_Integer_Overflow__int64_t_fscanf_square_63b.c":31:9)
#loc18 = loc("CWE190_Integer_Overflow__int64_t_fscanf_square_63b.c":40:1)
#loc19 = loc("CWE190_Integer_Overflow__int64_t_fscanf_square_63b.c":48:1)
#loc22 = loc("CWE190_Integer_Overflow__int64_t_fscanf_square_63b.c":42:5)
#loc23 = loc("CWE190_Integer_Overflow__int64_t_fscanf_square_63b.c":42:21)
#loc24 = loc("CWE190_Integer_Overflow__int64_t_fscanf_square_63b.c":41:1)
#loc25 = loc("CWE190_Integer_Overflow__int64_t_fscanf_square_63b.c":42:20)
#loc26 = loc("CWE190_Integer_Overflow__int64_t_fscanf_square_63b.c":43:5)
#loc27 = loc("CWE190_Integer_Overflow__int64_t_fscanf_square_63b.c":47:5)
#loc28 = loc("CWE190_Integer_Overflow__int64_t_fscanf_square_63b.c":45:9)
#loc29 = loc("CWE190_Integer_Overflow__int64_t_fscanf_square_63b.c":45:33)
#loc30 = loc("CWE190_Integer_Overflow__int64_t_fscanf_square_63b.c":45:26)
#loc31 = loc("CWE190_Integer_Overflow__int64_t_fscanf_square_63b.c":46:27)
#loc32 = loc("CWE190_Integer_Overflow__int64_t_fscanf_square_63b.c":46:9)
#loc33 = loc("/usr/include/inttypes.h":351:1)
#loc34 = loc("/usr/include/inttypes.h":351:74)
#loc35 = loc("/usr/include/bits/mathcalls.h":143:1)
#loc36 = loc("../../../testcasesupport/std_testcase_io.h":14:1)
#loc37 = loc("../../../testcasesupport/std_testcase_io.h":14:33)
#loc38 = loc("CWE190_Integer_Overflow__int64_t_fscanf_square_63b.c":62:19)
#loc39 = loc("CWE190_Integer_Overflow__int64_t_fscanf_square_63b.c":51:1)
#loc40 = loc("CWE190_Integer_Overflow__int64_t_fscanf_square_63b.c":64:1)
#loc43 = loc("CWE190_Integer_Overflow__int64_t_fscanf_square_63b.c":53:5)
#loc44 = loc("CWE190_Integer_Overflow__int64_t_fscanf_square_63b.c":53:21)
#loc45 = loc("CWE190_Integer_Overflow__int64_t_fscanf_square_63b.c":52:1)
#loc46 = loc("CWE190_Integer_Overflow__int64_t_fscanf_square_63b.c":53:20)
#loc47 = loc("CWE190_Integer_Overflow__int64_t_fscanf_square_63b.c":55:5)
#loc48 = loc("CWE190_Integer_Overflow__int64_t_fscanf_square_63b.c":63:5)
#loc49 = loc("CWE190_Integer_Overflow__int64_t_fscanf_square_63b.c":55:27)
#loc50 = loc("CWE190_Integer_Overflow__int64_t_fscanf_square_63b.c":55:9)
#loc51 = loc("CWE190_Integer_Overflow__int64_t_fscanf_square_63b.c":55:36)
#loc52 = loc("CWE190_Integer_Overflow__int64_t_fscanf_square_63b.c":55:42)
#loc53 = loc("CWE190_Integer_Overflow__int64_t_fscanf_square_63b.c":55:51)
#loc54 = loc("CWE190_Integer_Overflow__int64_t_fscanf_square_63b.c":55:33)
#loc55 = loc("CWE190_Integer_Overflow__int64_t_fscanf_square_63b.c":56:5)
#loc56 = loc("CWE190_Integer_Overflow__int64_t_fscanf_square_63b.c":59:5)
#loc57 = loc("CWE190_Integer_Overflow__int64_t_fscanf_square_63b.c":61:5)
#loc58 = loc("CWE190_Integer_Overflow__int64_t_fscanf_square_63b.c":57:9)
#loc59 = loc("CWE190_Integer_Overflow__int64_t_fscanf_square_63b.c":57:33)
#loc60 = loc("CWE190_Integer_Overflow__int64_t_fscanf_square_63b.c":57:26)
#loc61 = loc("CWE190_Integer_Overflow__int64_t_fscanf_square_63b.c":58:27)
#loc62 = loc("CWE190_Integer_Overflow__int64_t_fscanf_square_63b.c":58:9)
#loc63 = loc("CWE190_Integer_Overflow__int64_t_fscanf_square_63b.c":62:9)
#loc64 = loc(fused[#loc1, #loc2])
#loc65 = loc(fused[#loc3, #loc4])
#loc67 = loc(fused[#loc7, #loc8])
#loc68 = loc(fused[#loc11, #loc12])
#loc69 = loc(fused[#loc13, #loc14])
#loc70 = loc(fused[#loc18, #loc19])
#loc72 = loc(fused[#loc22, #loc23])
#loc73 = loc(fused[#loc26, #loc27])
#loc74 = loc(fused[#loc28, #loc29])
#loc75 = loc(fused[#loc33, #loc34])
#loc76 = loc(fused[#loc36, #loc37])
#loc77 = loc(fused[#loc39, #loc40])
#loc79 = loc(fused[#loc43, #loc44])
#loc80 = loc(fused[#loc47, #loc48])
#loc81 = loc(fused[#loc50, #loc53])
#loc82 = loc(fused[#loc55, #loc56, #loc57, #loc48])
#loc83 = loc(fused[#loc58, #loc59])
