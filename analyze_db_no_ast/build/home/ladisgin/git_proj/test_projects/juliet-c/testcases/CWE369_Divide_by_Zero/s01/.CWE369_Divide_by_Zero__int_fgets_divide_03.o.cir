!s32i = !cir.int<s, 32>
!s64i = !cir.int<s, 64>
!s8i = !cir.int<s, 8>
!ty__IO_codecvt = !cir.struct<struct "_IO_codecvt" incomplete>
!ty__IO_marker = !cir.struct<struct "_IO_marker" incomplete>
!ty__IO_wide_data = !cir.struct<struct "_IO_wide_data" incomplete>
!u16i = !cir.int<u, 16>
!u64i = !cir.int<u, 64>
!void = !cir.void
#fn_attr = #cir<extra({nothrow = #cir.nothrow})>
#fn_attr1 = #cir<extra({inline = #cir.inline<no>, nothrow = #cir.nothrow, optnone = #cir.optnone})>
!ty__IO_FILE = !cir.struct<struct "_IO_FILE" {!s32i, !cir.ptr<!s8i>, !cir.ptr<!s8i>, !cir.ptr<!s8i>, !cir.ptr<!s8i>, !cir.ptr<!s8i>, !cir.ptr<!s8i>, !cir.ptr<!s8i>, !cir.ptr<!s8i>, !cir.ptr<!s8i>, !cir.ptr<!s8i>, !cir.ptr<!s8i>, !cir.ptr<!ty__IO_marker>, !cir.ptr<!cir.struct<struct "_IO_FILE">>, !s32i, !s32i, !s64i, !u16i, !s8i, !cir.array<!s8i x 1>, !cir.ptr<!void>, !s64i, !cir.ptr<!ty__IO_codecvt>, !cir.ptr<!ty__IO_wide_data>, !cir.ptr<!cir.struct<struct "_IO_FILE">>, !cir.ptr<!void>, !u64i, !s32i, !cir.array<!s8i x 20>} #cir.record.decl.ast>
module @"/home/ladisgin/git_proj/test_projects/juliet-c/testcases/CWE369_Divide_by_Zero/s01/CWE369_Divide_by_Zero__int_fgets_divide_03.c" attributes {cir.lang = #cir.lang<c>, cir.sob = #cir.signed_overflow_behavior<undefined>, cir.triple = "x86_64-unknown-linux-gnu", dlti.dl_spec = #dlti.dl_spec<#dlti.dl_entry<!llvm.ptr<270>, dense<32> : vector<4xi64>>, #dlti.dl_entry<f64, dense<64> : vector<2xi64>>, #dlti.dl_entry<f128, dense<128> : vector<2xi64>>, #dlti.dl_entry<!llvm.ptr<272>, dense<64> : vector<4xi64>>, #dlti.dl_entry<!llvm.ptr<271>, dense<32> : vector<4xi64>>, #dlti.dl_entry<i64, dense<64> : vector<2xi64>>, #dlti.dl_entry<i128, dense<128> : vector<2xi64>>, #dlti.dl_entry<f80, dense<128> : vector<2xi64>>, #dlti.dl_entry<!llvm.ptr, dense<64> : vector<4xi64>>, #dlti.dl_entry<i1, dense<8> : vector<2xi64>>, #dlti.dl_entry<i8, dense<8> : vector<2xi64>>, #dlti.dl_entry<i16, dense<16> : vector<2xi64>>, #dlti.dl_entry<f16, dense<16> : vector<2xi64>>, #dlti.dl_entry<i32, dense<32> : vector<2xi64>>, #dlti.dl_entry<"dlti.stack_alignment", 128 : i64>, #dlti.dl_entry<"dlti.endianness", "little">>, llvm.data_layout = "e-m:e-p270:32:32-p271:32:32-p272:64:64-i64:64-i128:128-f80:128-n8:16:32:64-S128"} {
  cir.func private  @fgets(!cir.ptr<!s8i>, !s32i, !cir.ptr<!ty__IO_FILE>) -> !cir.ptr<!s8i> loc(#loc226)
  cir.global "private"  external @stdin : !cir.ptr<!ty__IO_FILE> {alignment = 8 : i64} loc(#loc227)
  cir.func private  @atoi(!cir.ptr<!s8i>) -> !s32i extra(#fn_attr) loc(#loc228)
  cir.func private  @printLine(!cir.ptr<!s8i>) loc(#loc229)
  cir.global "private"  constant internal dsolocal @".str" = #cir.const_array<"fgets() failed.\00" : !cir.array<!s8i x 16>> : !cir.array<!s8i x 16> {alignment = 1 : i64} loc(#loc9)
  cir.func private  @printIntLine(!s32i) loc(#loc230)
  cir.func no_proto  @CWE369_Divide_by_Zero__int_fgets_divide_03_bad() extra(#fn_attr1) {
    %0 = cir.alloca !s32i, !cir.ptr<!s32i>, ["data"] {alignment = 4 : i64} loc(#loc232)
    %1 = cir.const #cir.int<1> : !s32i loc(#loc16)
    %2 = cir.unary(minus, %1) : !s32i, !s32i loc(#loc17)
    cir.store %2, %0 : !s32i, !cir.ptr<!s32i> loc(#loc233)
    cir.scope {
      %3 = cir.const #cir.int<5> : !s32i loc(#loc21)
      %4 = cir.const #cir.int<5> : !s32i loc(#loc22)
      %5 = cir.cmp(eq, %3, %4) : !s32i, !s32i loc(#loc235)
      %6 = cir.cast(int_to_bool, %5 : !s32i), !cir.bool loc(#loc23)
      cir.if %6 {
        cir.scope {
          %7 = cir.alloca !cir.array<!s8i x 14>, !cir.ptr<!cir.array<!s8i x 14>>, ["inputBuffer"] {alignment = 1 : i64} loc(#loc238)
          %8 = cir.const #cir.zero : !cir.array<!s8i x 14> loc(#loc238)
          cir.store %8, %7 : !cir.array<!s8i x 14>, !cir.ptr<!cir.array<!s8i x 14>> loc(#loc238)
          cir.scope {
            %9 = cir.cast(array_to_ptrdecay, %7 : !cir.ptr<!cir.array<!s8i x 14>>), !cir.ptr<!s8i> loc(#loc31)
            %10 = cir.const #cir.int<3> : !s32i loc(#loc32)
            %11 = cir.cast(integral, %10 : !s32i), !u64i loc(#loc32)
            %12 = cir.const #cir.int<4> : !u64i loc(#loc32)
            %13 = cir.binop(mul, %11, %12) : !u64i loc(#loc32)
            %14 = cir.const #cir.int<2> : !s32i loc(#loc32)
            %15 = cir.cast(integral, %14 : !s32i), !u64i loc(#loc32)
            %16 = cir.binop(add, %13, %15) : !u64i loc(#loc32)
            %17 = cir.cast(integral, %16 : !u64i), !s32i loc(#loc32)
            %18 = cir.get_global @stdin : !cir.ptr<!cir.ptr<!ty__IO_FILE>> loc(#loc227)
            %19 = cir.load %18 : !cir.ptr<!cir.ptr<!ty__IO_FILE>>, !cir.ptr<!ty__IO_FILE> loc(#loc33)
            %20 = cir.call @fgets(%9, %17, %19) : (!cir.ptr<!s8i>, !s32i, !cir.ptr<!ty__IO_FILE>) -> !cir.ptr<!s8i> loc(#loc34)
            %21 = cir.const #cir.ptr<null> : !cir.ptr<!void> loc(#loc35)
            %22 = cir.cast(bitcast, %21 : !cir.ptr<!void>), !cir.ptr<!s8i> loc(#loc35)
            %23 = cir.cmp(ne, %20, %22) : !cir.ptr<!s8i>, !s32i loc(#loc240)
            %24 = cir.cast(int_to_bool, %23 : !s32i), !cir.bool loc(#loc36)
            cir.if %24 {
              %25 = cir.cast(array_to_ptrdecay, %7 : !cir.ptr<!cir.array<!s8i x 14>>), !cir.ptr<!s8i> loc(#loc40)
              %26 = cir.call @atoi(%25) : (!cir.ptr<!s8i>) -> !s32i extra(#fn_attr) loc(#loc41)
              cir.store %26, %0 : !s32i, !cir.ptr<!s32i> loc(#loc242)
            } else {
              %25 = cir.get_global @".str" : !cir.ptr<!cir.array<!s8i x 16>> loc(#loc9)
              %26 = cir.cast(array_to_ptrdecay, %25 : !cir.ptr<!cir.array<!s8i x 16>>), !cir.ptr<!s8i> loc(#loc9)
              cir.call @printLine(%26) : (!cir.ptr<!s8i>) -> () loc(#loc44)
            } loc(#loc241)
          } loc(#loc239)
        } loc(#loc237)
      } loc(#loc236)
    } loc(#loc234)
    cir.scope {
      %3 = cir.const #cir.int<5> : !s32i loc(#loc47)
      %4 = cir.const #cir.int<5> : !s32i loc(#loc48)
      %5 = cir.cmp(eq, %3, %4) : !s32i, !s32i loc(#loc244)
      %6 = cir.cast(int_to_bool, %5 : !s32i), !cir.bool loc(#loc49)
      cir.if %6 {
        %7 = cir.const #cir.int<100> : !s32i loc(#loc51)
        %8 = cir.load %0 : !cir.ptr<!s32i>, !s32i loc(#loc52)
        %9 = cir.binop(div, %7, %8) : !s32i loc(#loc246)
        cir.call @printIntLine(%9) : (!s32i) -> () loc(#loc53)
      } loc(#loc245)
    } loc(#loc243)
    cir.return loc(#loc13)
  } loc(#loc231)
  cir.func no_proto  @CWE369_Divide_by_Zero__int_fgets_divide_03_good() extra(#fn_attr1) {
    %0 = cir.get_global @goodB2G1 : !cir.ptr<!cir.func<!void ()>> loc(#loc248)
    cir.call %0() : (!cir.ptr<!cir.func<!void ()>>) -> () loc(#loc56)
    %1 = cir.get_global @goodB2G2 : !cir.ptr<!cir.func<!void ()>> loc(#loc249)
    cir.call %1() : (!cir.ptr<!cir.func<!void ()>>) -> () loc(#loc58)
    %2 = cir.get_global @goodG2B1 : !cir.ptr<!cir.func<!void ()>> loc(#loc250)
    cir.call %2() : (!cir.ptr<!cir.func<!void ()>>) -> () loc(#loc60)
    %3 = cir.get_global @goodG2B2 : !cir.ptr<!cir.func<!void ()>> loc(#loc251)
    cir.call %3() : (!cir.ptr<!cir.func<!void ()>>) -> () loc(#loc62)
    cir.return loc(#loc55)
  } loc(#loc247)
  cir.global "private"  constant internal dsolocal @".str1" = #cir.const_array<"Benign, fixed string\00" : !cir.array<!s8i x 21>> : !cir.array<!s8i x 21> {alignment = 1 : i64} loc(#loc64)
  cir.global "private"  constant internal dsolocal @".str2" = #cir.const_array<"This would result in a divide by zero\00" : !cir.array<!s8i x 38>> : !cir.array<!s8i x 38> {alignment = 1 : i64} loc(#loc65)
  cir.func no_proto internal private  @goodB2G1() extra(#fn_attr1) {
    %0 = cir.alloca !s32i, !cir.ptr<!s32i>, ["data"] {alignment = 4 : i64} loc(#loc253)
    %1 = cir.const #cir.int<1> : !s32i loc(#loc70)
    %2 = cir.unary(minus, %1) : !s32i, !s32i loc(#loc71)
    cir.store %2, %0 : !s32i, !cir.ptr<!s32i> loc(#loc254)
    cir.scope {
      %3 = cir.const #cir.int<5> : !s32i loc(#loc75)
      %4 = cir.const #cir.int<5> : !s32i loc(#loc76)
      %5 = cir.cmp(eq, %3, %4) : !s32i, !s32i loc(#loc256)
      %6 = cir.cast(int_to_bool, %5 : !s32i), !cir.bool loc(#loc77)
      cir.if %6 {
        cir.scope {
          %7 = cir.alloca !cir.array<!s8i x 14>, !cir.ptr<!cir.array<!s8i x 14>>, ["inputBuffer"] {alignment = 1 : i64} loc(#loc259)
          %8 = cir.const #cir.zero : !cir.array<!s8i x 14> loc(#loc259)
          cir.store %8, %7 : !cir.array<!s8i x 14>, !cir.ptr<!cir.array<!s8i x 14>> loc(#loc259)
          cir.scope {
            %9 = cir.cast(array_to_ptrdecay, %7 : !cir.ptr<!cir.array<!s8i x 14>>), !cir.ptr<!s8i> loc(#loc85)
            %10 = cir.const #cir.int<3> : !s32i loc(#loc86)
            %11 = cir.cast(integral, %10 : !s32i), !u64i loc(#loc86)
            %12 = cir.const #cir.int<4> : !u64i loc(#loc86)
            %13 = cir.binop(mul, %11, %12) : !u64i loc(#loc86)
            %14 = cir.const #cir.int<2> : !s32i loc(#loc86)
            %15 = cir.cast(integral, %14 : !s32i), !u64i loc(#loc86)
            %16 = cir.binop(add, %13, %15) : !u64i loc(#loc86)
            %17 = cir.cast(integral, %16 : !u64i), !s32i loc(#loc86)
            %18 = cir.get_global @stdin : !cir.ptr<!cir.ptr<!ty__IO_FILE>> loc(#loc227)
            %19 = cir.load %18 : !cir.ptr<!cir.ptr<!ty__IO_FILE>>, !cir.ptr<!ty__IO_FILE> loc(#loc87)
            %20 = cir.call @fgets(%9, %17, %19) : (!cir.ptr<!s8i>, !s32i, !cir.ptr<!ty__IO_FILE>) -> !cir.ptr<!s8i> loc(#loc88)
            %21 = cir.const #cir.ptr<null> : !cir.ptr<!void> loc(#loc89)
            %22 = cir.cast(bitcast, %21 : !cir.ptr<!void>), !cir.ptr<!s8i> loc(#loc89)
            %23 = cir.cmp(ne, %20, %22) : !cir.ptr<!s8i>, !s32i loc(#loc261)
            %24 = cir.cast(int_to_bool, %23 : !s32i), !cir.bool loc(#loc90)
            cir.if %24 {
              %25 = cir.cast(array_to_ptrdecay, %7 : !cir.ptr<!cir.array<!s8i x 14>>), !cir.ptr<!s8i> loc(#loc94)
              %26 = cir.call @atoi(%25) : (!cir.ptr<!s8i>) -> !s32i extra(#fn_attr) loc(#loc95)
              cir.store %26, %0 : !s32i, !cir.ptr<!s32i> loc(#loc263)
            } else {
              %25 = cir.get_global @".str" : !cir.ptr<!cir.array<!s8i x 16>> loc(#loc98)
              %26 = cir.cast(array_to_ptrdecay, %25 : !cir.ptr<!cir.array<!s8i x 16>>), !cir.ptr<!s8i> loc(#loc98)
              cir.call @printLine(%26) : (!cir.ptr<!s8i>) -> () loc(#loc99)
            } loc(#loc262)
          } loc(#loc260)
        } loc(#loc258)
      } loc(#loc257)
    } loc(#loc255)
    cir.scope {
      %3 = cir.const #cir.int<5> : !s32i loc(#loc102)
      %4 = cir.const #cir.int<5> : !s32i loc(#loc103)
      %5 = cir.cmp(ne, %3, %4) : !s32i, !s32i loc(#loc265)
      %6 = cir.cast(int_to_bool, %5 : !s32i), !cir.bool loc(#loc104)
      cir.if %6 {
        %7 = cir.get_global @".str1" : !cir.ptr<!cir.array<!s8i x 21>> loc(#loc64)
        %8 = cir.cast(array_to_ptrdecay, %7 : !cir.ptr<!cir.array<!s8i x 21>>), !cir.ptr<!s8i> loc(#loc64)
        cir.call @printLine(%8) : (!cir.ptr<!s8i>) -> () loc(#loc108)
      } else {
        cir.scope {
          %7 = cir.load %0 : !cir.ptr<!s32i>, !s32i loc(#loc111)
          %8 = cir.const #cir.int<0> : !s32i loc(#loc112)
          %9 = cir.cmp(ne, %7, %8) : !s32i, !s32i loc(#loc268)
          %10 = cir.cast(int_to_bool, %9 : !s32i), !cir.bool loc(#loc113)
          cir.if %10 {
            %11 = cir.const #cir.int<100> : !s32i loc(#loc117)
            %12 = cir.load %0 : !cir.ptr<!s32i>, !s32i loc(#loc118)
            %13 = cir.binop(div, %11, %12) : !s32i loc(#loc270)
            cir.call @printIntLine(%13) : (!s32i) -> () loc(#loc119)
          } else {
            %11 = cir.get_global @".str2" : !cir.ptr<!cir.array<!s8i x 38>> loc(#loc65)
            %12 = cir.cast(array_to_ptrdecay, %11 : !cir.ptr<!cir.array<!s8i x 38>>), !cir.ptr<!s8i> loc(#loc65)
            cir.call @printLine(%12) : (!cir.ptr<!s8i>) -> () loc(#loc120)
          } loc(#loc269)
        } loc(#loc267)
      } loc(#loc266)
    } loc(#loc264)
    cir.return loc(#loc67)
  } loc(#loc252)
  cir.func no_proto internal private  @goodB2G2() extra(#fn_attr1) {
    %0 = cir.alloca !s32i, !cir.ptr<!s32i>, ["data"] {alignment = 4 : i64} loc(#loc272)
    %1 = cir.const #cir.int<1> : !s32i loc(#loc125)
    %2 = cir.unary(minus, %1) : !s32i, !s32i loc(#loc126)
    cir.store %2, %0 : !s32i, !cir.ptr<!s32i> loc(#loc273)
    cir.scope {
      %3 = cir.const #cir.int<5> : !s32i loc(#loc130)
      %4 = cir.const #cir.int<5> : !s32i loc(#loc131)
      %5 = cir.cmp(eq, %3, %4) : !s32i, !s32i loc(#loc275)
      %6 = cir.cast(int_to_bool, %5 : !s32i), !cir.bool loc(#loc132)
      cir.if %6 {
        cir.scope {
          %7 = cir.alloca !cir.array<!s8i x 14>, !cir.ptr<!cir.array<!s8i x 14>>, ["inputBuffer"] {alignment = 1 : i64} loc(#loc278)
          %8 = cir.const #cir.zero : !cir.array<!s8i x 14> loc(#loc278)
          cir.store %8, %7 : !cir.array<!s8i x 14>, !cir.ptr<!cir.array<!s8i x 14>> loc(#loc278)
          cir.scope {
            %9 = cir.cast(array_to_ptrdecay, %7 : !cir.ptr<!cir.array<!s8i x 14>>), !cir.ptr<!s8i> loc(#loc140)
            %10 = cir.const #cir.int<3> : !s32i loc(#loc141)
            %11 = cir.cast(integral, %10 : !s32i), !u64i loc(#loc141)
            %12 = cir.const #cir.int<4> : !u64i loc(#loc141)
            %13 = cir.binop(mul, %11, %12) : !u64i loc(#loc141)
            %14 = cir.const #cir.int<2> : !s32i loc(#loc141)
            %15 = cir.cast(integral, %14 : !s32i), !u64i loc(#loc141)
            %16 = cir.binop(add, %13, %15) : !u64i loc(#loc141)
            %17 = cir.cast(integral, %16 : !u64i), !s32i loc(#loc141)
            %18 = cir.get_global @stdin : !cir.ptr<!cir.ptr<!ty__IO_FILE>> loc(#loc227)
            %19 = cir.load %18 : !cir.ptr<!cir.ptr<!ty__IO_FILE>>, !cir.ptr<!ty__IO_FILE> loc(#loc142)
            %20 = cir.call @fgets(%9, %17, %19) : (!cir.ptr<!s8i>, !s32i, !cir.ptr<!ty__IO_FILE>) -> !cir.ptr<!s8i> loc(#loc143)
            %21 = cir.const #cir.ptr<null> : !cir.ptr<!void> loc(#loc144)
            %22 = cir.cast(bitcast, %21 : !cir.ptr<!void>), !cir.ptr<!s8i> loc(#loc144)
            %23 = cir.cmp(ne, %20, %22) : !cir.ptr<!s8i>, !s32i loc(#loc280)
            %24 = cir.cast(int_to_bool, %23 : !s32i), !cir.bool loc(#loc145)
            cir.if %24 {
              %25 = cir.cast(array_to_ptrdecay, %7 : !cir.ptr<!cir.array<!s8i x 14>>), !cir.ptr<!s8i> loc(#loc149)
              %26 = cir.call @atoi(%25) : (!cir.ptr<!s8i>) -> !s32i extra(#fn_attr) loc(#loc150)
              cir.store %26, %0 : !s32i, !cir.ptr<!s32i> loc(#loc282)
            } else {
              %25 = cir.get_global @".str" : !cir.ptr<!cir.array<!s8i x 16>> loc(#loc153)
              %26 = cir.cast(array_to_ptrdecay, %25 : !cir.ptr<!cir.array<!s8i x 16>>), !cir.ptr<!s8i> loc(#loc153)
              cir.call @printLine(%26) : (!cir.ptr<!s8i>) -> () loc(#loc154)
            } loc(#loc281)
          } loc(#loc279)
        } loc(#loc277)
      } loc(#loc276)
    } loc(#loc274)
    cir.scope {
      %3 = cir.const #cir.int<5> : !s32i loc(#loc157)
      %4 = cir.const #cir.int<5> : !s32i loc(#loc158)
      %5 = cir.cmp(eq, %3, %4) : !s32i, !s32i loc(#loc284)
      %6 = cir.cast(int_to_bool, %5 : !s32i), !cir.bool loc(#loc159)
      cir.if %6 {
        cir.scope {
          %7 = cir.load %0 : !cir.ptr<!s32i>, !s32i loc(#loc163)
          %8 = cir.const #cir.int<0> : !s32i loc(#loc164)
          %9 = cir.cmp(ne, %7, %8) : !s32i, !s32i loc(#loc287)
          %10 = cir.cast(int_to_bool, %9 : !s32i), !cir.bool loc(#loc165)
          cir.if %10 {
            %11 = cir.const #cir.int<100> : !s32i loc(#loc169)
            %12 = cir.load %0 : !cir.ptr<!s32i>, !s32i loc(#loc170)
            %13 = cir.binop(div, %11, %12) : !s32i loc(#loc289)
            cir.call @printIntLine(%13) : (!s32i) -> () loc(#loc171)
          } else {
            %11 = cir.get_global @".str2" : !cir.ptr<!cir.array<!s8i x 38>> loc(#loc172)
            %12 = cir.cast(array_to_ptrdecay, %11 : !cir.ptr<!cir.array<!s8i x 38>>), !cir.ptr<!s8i> loc(#loc172)
            cir.call @printLine(%12) : (!cir.ptr<!s8i>) -> () loc(#loc173)
          } loc(#loc288)
        } loc(#loc286)
      } loc(#loc285)
    } loc(#loc283)
    cir.return loc(#loc122)
  } loc(#loc271)
  cir.func no_proto internal private  @goodG2B1() extra(#fn_attr1) {
    %0 = cir.alloca !s32i, !cir.ptr<!s32i>, ["data"] {alignment = 4 : i64} loc(#loc291)
    %1 = cir.const #cir.int<1> : !s32i loc(#loc178)
    %2 = cir.unary(minus, %1) : !s32i, !s32i loc(#loc179)
    cir.store %2, %0 : !s32i, !cir.ptr<!s32i> loc(#loc292)
    cir.scope {
      %3 = cir.const #cir.int<5> : !s32i loc(#loc183)
      %4 = cir.const #cir.int<5> : !s32i loc(#loc184)
      %5 = cir.cmp(ne, %3, %4) : !s32i, !s32i loc(#loc294)
      %6 = cir.cast(int_to_bool, %5 : !s32i), !cir.bool loc(#loc185)
      cir.if %6 {
        %7 = cir.get_global @".str1" : !cir.ptr<!cir.array<!s8i x 21>> loc(#loc189)
        %8 = cir.cast(array_to_ptrdecay, %7 : !cir.ptr<!cir.array<!s8i x 21>>), !cir.ptr<!s8i> loc(#loc189)
        cir.call @printLine(%8) : (!cir.ptr<!s8i>) -> () loc(#loc190)
      } else {
        %7 = cir.const #cir.int<7> : !s32i loc(#loc191)
        cir.store %7, %0 : !s32i, !cir.ptr<!s32i> loc(#loc296)
      } loc(#loc295)
    } loc(#loc293)
    cir.scope {
      %3 = cir.const #cir.int<5> : !s32i loc(#loc195)
      %4 = cir.const #cir.int<5> : !s32i loc(#loc196)
      %5 = cir.cmp(eq, %3, %4) : !s32i, !s32i loc(#loc298)
      %6 = cir.cast(int_to_bool, %5 : !s32i), !cir.bool loc(#loc197)
      cir.if %6 {
        %7 = cir.const #cir.int<100> : !s32i loc(#loc199)
        %8 = cir.load %0 : !cir.ptr<!s32i>, !s32i loc(#loc200)
        %9 = cir.binop(div, %7, %8) : !s32i loc(#loc300)
        cir.call @printIntLine(%9) : (!s32i) -> () loc(#loc201)
      } loc(#loc299)
    } loc(#loc297)
    cir.return loc(#loc175)
  } loc(#loc290)
  cir.func no_proto internal private  @goodG2B2() extra(#fn_attr1) {
    %0 = cir.alloca !s32i, !cir.ptr<!s32i>, ["data"] {alignment = 4 : i64} loc(#loc302)
    %1 = cir.const #cir.int<1> : !s32i loc(#loc206)
    %2 = cir.unary(minus, %1) : !s32i, !s32i loc(#loc207)
    cir.store %2, %0 : !s32i, !cir.ptr<!s32i> loc(#loc303)
    cir.scope {
      %3 = cir.const #cir.int<5> : !s32i loc(#loc211)
      %4 = cir.const #cir.int<5> : !s32i loc(#loc212)
      %5 = cir.cmp(eq, %3, %4) : !s32i, !s32i loc(#loc305)
      %6 = cir.cast(int_to_bool, %5 : !s32i), !cir.bool loc(#loc213)
      cir.if %6 {
        %7 = cir.const #cir.int<7> : !s32i loc(#loc215)
        cir.store %7, %0 : !s32i, !cir.ptr<!s32i> loc(#loc307)
      } loc(#loc306)
    } loc(#loc304)
    cir.scope {
      %3 = cir.const #cir.int<5> : !s32i loc(#loc219)
      %4 = cir.const #cir.int<5> : !s32i loc(#loc220)
      %5 = cir.cmp(eq, %3, %4) : !s32i, !s32i loc(#loc309)
      %6 = cir.cast(int_to_bool, %5 : !s32i), !cir.bool loc(#loc221)
      cir.if %6 {
        %7 = cir.const #cir.int<100> : !s32i loc(#loc223)
        %8 = cir.load %0 : !cir.ptr<!s32i>, !s32i loc(#loc224)
        %9 = cir.binop(div, %7, %8) : !s32i loc(#loc311)
        cir.call @printIntLine(%9) : (!s32i) -> () loc(#loc225)
      } loc(#loc310)
    } loc(#loc308)
    cir.return loc(#loc203)
  } loc(#loc301)
} loc(#loc)
#loc = loc("/home/ladisgin/git_proj/test_projects/juliet-c/testcases/CWE369_Divide_by_Zero/s01/CWE369_Divide_by_Zero__int_fgets_divide_03.c":0:0)
#loc1 = loc("/usr/include/stdio.h":654:1)
#loc2 = loc("/usr/include/stdio.h":655:59)
#loc3 = loc("/usr/include/stdio.h":149:1)
#loc4 = loc("/usr/include/stdio.h":149:14)
#loc5 = loc("/usr/include/stdlib.h":105:1)
#loc6 = loc("/usr/include/stdlib.h":106:33)
#loc7 = loc("../../../testcasesupport/std_testcase_io.h":14:1)
#loc8 = loc("../../../testcasesupport/std_testcase_io.h":14:33)
#loc9 = loc("CWE369_Divide_by_Zero__int_fgets_divide_03.c":41:27)
#loc10 = loc("../../../testcasesupport/std_testcase_io.h":18:1)
#loc11 = loc("../../../testcasesupport/std_testcase_io.h":18:33)
#loc12 = loc("CWE369_Divide_by_Zero__int_fgets_divide_03.c":24:1)
#loc13 = loc("CWE369_Divide_by_Zero__int_fgets_divide_03.c":50:1)
#loc14 = loc("CWE369_Divide_by_Zero__int_fgets_divide_03.c":26:5)
#loc15 = loc("CWE369_Divide_by_Zero__int_fgets_divide_03.c":26:9)
#loc16 = loc("CWE369_Divide_by_Zero__int_fgets_divide_03.c":28:13)
#loc17 = loc("CWE369_Divide_by_Zero__int_fgets_divide_03.c":28:12)
#loc18 = loc("CWE369_Divide_by_Zero__int_fgets_divide_03.c":28:5)
#loc19 = loc("CWE369_Divide_by_Zero__int_fgets_divide_03.c":29:5)
#loc20 = loc("CWE369_Divide_by_Zero__int_fgets_divide_03.c":44:5)
#loc21 = loc("CWE369_Divide_by_Zero__int_fgets_divide_03.c":29:8)
#loc22 = loc("CWE369_Divide_by_Zero__int_fgets_divide_03.c":29:11)
#loc23 = loc("CWE369_Divide_by_Zero__int_fgets_divide_03.c":29:9)
#loc24 = loc("CWE369_Divide_by_Zero__int_fgets_divide_03.c":30:5)
#loc25 = loc("CWE369_Divide_by_Zero__int_fgets_divide_03.c":31:9)
#loc26 = loc("CWE369_Divide_by_Zero__int_fgets_divide_03.c":43:9)
#loc27 = loc("CWE369_Divide_by_Zero__int_fgets_divide_03.c":32:13)
#loc28 = loc("CWE369_Divide_by_Zero__int_fgets_divide_03.c":32:49)
#loc29 = loc("CWE369_Divide_by_Zero__int_fgets_divide_03.c":34:13)
#loc30 = loc("CWE369_Divide_by_Zero__int_fgets_divide_03.c":42:13)
#loc31 = loc("CWE369_Divide_by_Zero__int_fgets_divide_03.c":34:23)
#loc32 = loc("CWE369_Divide_by_Zero__int_fgets_divide_03.c":34:36)
#loc33 = loc("CWE369_Divide_by_Zero__int_fgets_divide_03.c":34:53)
#loc34 = loc("CWE369_Divide_by_Zero__int_fgets_divide_03.c":34:17)
#loc35 = loc("CWE369_Divide_by_Zero__int_fgets_divide_03.c":34:63)
#loc36 = loc("CWE369_Divide_by_Zero__int_fgets_divide_03.c":34:60)
#loc37 = loc("CWE369_Divide_by_Zero__int_fgets_divide_03.c":35:13)
#loc38 = loc("CWE369_Divide_by_Zero__int_fgets_divide_03.c":38:13)
#loc39 = loc("CWE369_Divide_by_Zero__int_fgets_divide_03.c":40:13)
#loc40 = loc("CWE369_Divide_by_Zero__int_fgets_divide_03.c":37:29)
#loc41 = loc("CWE369_Divide_by_Zero__int_fgets_divide_03.c":37:24)
#loc42 = loc("CWE369_Divide_by_Zero__int_fgets_divide_03.c":37:17)
#loc43 = loc("CWE369_Divide_by_Zero__int_fgets_divide_03.c":37:40)
#loc44 = loc("CWE369_Divide_by_Zero__int_fgets_divide_03.c":41:17)
#loc45 = loc("CWE369_Divide_by_Zero__int_fgets_divide_03.c":45:5)
#loc46 = loc("CWE369_Divide_by_Zero__int_fgets_divide_03.c":49:5)
#loc47 = loc("CWE369_Divide_by_Zero__int_fgets_divide_03.c":45:8)
#loc48 = loc("CWE369_Divide_by_Zero__int_fgets_divide_03.c":45:11)
#loc49 = loc("CWE369_Divide_by_Zero__int_fgets_divide_03.c":45:9)
#loc50 = loc("CWE369_Divide_by_Zero__int_fgets_divide_03.c":46:5)
#loc51 = loc("CWE369_Divide_by_Zero__int_fgets_divide_03.c":48:22)
#loc52 = loc("CWE369_Divide_by_Zero__int_fgets_divide_03.c":48:28)
#loc53 = loc("CWE369_Divide_by_Zero__int_fgets_divide_03.c":48:9)
#loc54 = loc("CWE369_Divide_by_Zero__int_fgets_divide_03.c":174:1)
#loc55 = loc("CWE369_Divide_by_Zero__int_fgets_divide_03.c":180:1)
#loc56 = loc("CWE369_Divide_by_Zero__int_fgets_divide_03.c":176:5)
#loc57 = loc("CWE369_Divide_by_Zero__int_fgets_divide_03.c":176:14)
#loc58 = loc("CWE369_Divide_by_Zero__int_fgets_divide_03.c":177:5)
#loc59 = loc("CWE369_Divide_by_Zero__int_fgets_divide_03.c":177:14)
#loc60 = loc("CWE369_Divide_by_Zero__int_fgets_divide_03.c":178:5)
#loc61 = loc("CWE369_Divide_by_Zero__int_fgets_divide_03.c":178:14)
#loc62 = loc("CWE369_Divide_by_Zero__int_fgets_divide_03.c":179:5)
#loc63 = loc("CWE369_Divide_by_Zero__int_fgets_divide_03.c":179:14)
#loc64 = loc("CWE369_Divide_by_Zero__int_fgets_divide_03.c":81:19)
#loc65 = loc("CWE369_Divide_by_Zero__int_fgets_divide_03.c":92:23)
#loc66 = loc("CWE369_Divide_by_Zero__int_fgets_divide_03.c":57:1)
#loc67 = loc("CWE369_Divide_by_Zero__int_fgets_divide_03.c":95:1)
#loc68 = loc("CWE369_Divide_by_Zero__int_fgets_divide_03.c":59:5)
#loc69 = loc("CWE369_Divide_by_Zero__int_fgets_divide_03.c":59:9)
#loc70 = loc("CWE369_Divide_by_Zero__int_fgets_divide_03.c":61:13)
#loc71 = loc("CWE369_Divide_by_Zero__int_fgets_divide_03.c":61:12)
#loc72 = loc("CWE369_Divide_by_Zero__int_fgets_divide_03.c":61:5)
#loc73 = loc("CWE369_Divide_by_Zero__int_fgets_divide_03.c":62:5)
#loc74 = loc("CWE369_Divide_by_Zero__int_fgets_divide_03.c":77:5)
#loc75 = loc("CWE369_Divide_by_Zero__int_fgets_divide_03.c":62:8)
#loc76 = loc("CWE369_Divide_by_Zero__int_fgets_divide_03.c":62:11)
#loc77 = loc("CWE369_Divide_by_Zero__int_fgets_divide_03.c":62:9)
#loc78 = loc("CWE369_Divide_by_Zero__int_fgets_divide_03.c":63:5)
#loc79 = loc("CWE369_Divide_by_Zero__int_fgets_divide_03.c":64:9)
#loc80 = loc("CWE369_Divide_by_Zero__int_fgets_divide_03.c":76:9)
#loc81 = loc("CWE369_Divide_by_Zero__int_fgets_divide_03.c":65:13)
#loc82 = loc("CWE369_Divide_by_Zero__int_fgets_divide_03.c":65:49)
#loc83 = loc("CWE369_Divide_by_Zero__int_fgets_divide_03.c":67:13)
#loc84 = loc("CWE369_Divide_by_Zero__int_fgets_divide_03.c":75:13)
#loc85 = loc("CWE369_Divide_by_Zero__int_fgets_divide_03.c":67:23)
#loc86 = loc("CWE369_Divide_by_Zero__int_fgets_divide_03.c":67:36)
#loc87 = loc("CWE369_Divide_by_Zero__int_fgets_divide_03.c":67:53)
#loc88 = loc("CWE369_Divide_by_Zero__int_fgets_divide_03.c":67:17)
#loc89 = loc("CWE369_Divide_by_Zero__int_fgets_divide_03.c":67:63)
#loc90 = loc("CWE369_Divide_by_Zero__int_fgets_divide_03.c":67:60)
#loc91 = loc("CWE369_Divide_by_Zero__int_fgets_divide_03.c":68:13)
#loc92 = loc("CWE369_Divide_by_Zero__int_fgets_divide_03.c":71:13)
#loc93 = loc("CWE369_Divide_by_Zero__int_fgets_divide_03.c":73:13)
#loc94 = loc("CWE369_Divide_by_Zero__int_fgets_divide_03.c":70:29)
#loc95 = loc("CWE369_Divide_by_Zero__int_fgets_divide_03.c":70:24)
#loc96 = loc("CWE369_Divide_by_Zero__int_fgets_divide_03.c":70:17)
#loc97 = loc("CWE369_Divide_by_Zero__int_fgets_divide_03.c":70:40)
#loc98 = loc("CWE369_Divide_by_Zero__int_fgets_divide_03.c":74:27)
#loc99 = loc("CWE369_Divide_by_Zero__int_fgets_divide_03.c":74:17)
#loc100 = loc("CWE369_Divide_by_Zero__int_fgets_divide_03.c":78:5)
#loc101 = loc("CWE369_Divide_by_Zero__int_fgets_divide_03.c":94:5)
#loc102 = loc("CWE369_Divide_by_Zero__int_fgets_divide_03.c":78:8)
#loc103 = loc("CWE369_Divide_by_Zero__int_fgets_divide_03.c":78:11)
#loc104 = loc("CWE369_Divide_by_Zero__int_fgets_divide_03.c":78:9)
#loc105 = loc("CWE369_Divide_by_Zero__int_fgets_divide_03.c":79:5)
#loc106 = loc("CWE369_Divide_by_Zero__int_fgets_divide_03.c":82:5)
#loc107 = loc("CWE369_Divide_by_Zero__int_fgets_divide_03.c":84:5)
#loc108 = loc("CWE369_Divide_by_Zero__int_fgets_divide_03.c":81:9)
#loc109 = loc("CWE369_Divide_by_Zero__int_fgets_divide_03.c":86:9)
#loc110 = loc("CWE369_Divide_by_Zero__int_fgets_divide_03.c":93:9)
#loc111 = loc("CWE369_Divide_by_Zero__int_fgets_divide_03.c":86:13)
#loc112 = loc("CWE369_Divide_by_Zero__int_fgets_divide_03.c":86:21)
#loc113 = loc("CWE369_Divide_by_Zero__int_fgets_divide_03.c":86:18)
#loc114 = loc("CWE369_Divide_by_Zero__int_fgets_divide_03.c":87:9)
#loc115 = loc("CWE369_Divide_by_Zero__int_fgets_divide_03.c":89:9)
#loc116 = loc("CWE369_Divide_by_Zero__int_fgets_divide_03.c":91:9)
#loc117 = loc("CWE369_Divide_by_Zero__int_fgets_divide_03.c":88:26)
#loc118 = loc("CWE369_Divide_by_Zero__int_fgets_divide_03.c":88:32)
#loc119 = loc("CWE369_Divide_by_Zero__int_fgets_divide_03.c":88:13)
#loc120 = loc("CWE369_Divide_by_Zero__int_fgets_divide_03.c":92:13)
#loc121 = loc("CWE369_Divide_by_Zero__int_fgets_divide_03.c":98:1)
#loc122 = loc("CWE369_Divide_by_Zero__int_fgets_divide_03.c":131:1)
#loc123 = loc("CWE369_Divide_by_Zero__int_fgets_divide_03.c":100:5)
#loc124 = loc("CWE369_Divide_by_Zero__int_fgets_divide_03.c":100:9)
#loc125 = loc("CWE369_Divide_by_Zero__int_fgets_divide_03.c":102:13)
#loc126 = loc("CWE369_Divide_by_Zero__int_fgets_divide_03.c":102:12)
#loc127 = loc("CWE369_Divide_by_Zero__int_fgets_divide_03.c":102:5)
#loc128 = loc("CWE369_Divide_by_Zero__int_fgets_divide_03.c":103:5)
#loc129 = loc("CWE369_Divide_by_Zero__int_fgets_divide_03.c":118:5)
#loc130 = loc("CWE369_Divide_by_Zero__int_fgets_divide_03.c":103:8)
#loc131 = loc("CWE369_Divide_by_Zero__int_fgets_divide_03.c":103:11)
#loc132 = loc("CWE369_Divide_by_Zero__int_fgets_divide_03.c":103:9)
#loc133 = loc("CWE369_Divide_by_Zero__int_fgets_divide_03.c":104:5)
#loc134 = loc("CWE369_Divide_by_Zero__int_fgets_divide_03.c":105:9)
#loc135 = loc("CWE369_Divide_by_Zero__int_fgets_divide_03.c":117:9)
#loc136 = loc("CWE369_Divide_by_Zero__int_fgets_divide_03.c":106:13)
#loc137 = loc("CWE369_Divide_by_Zero__int_fgets_divide_03.c":106:49)
#loc138 = loc("CWE369_Divide_by_Zero__int_fgets_divide_03.c":108:13)
#loc139 = loc("CWE369_Divide_by_Zero__int_fgets_divide_03.c":116:13)
#loc140 = loc("CWE369_Divide_by_Zero__int_fgets_divide_03.c":108:23)
#loc141 = loc("CWE369_Divide_by_Zero__int_fgets_divide_03.c":108:36)
#loc142 = loc("CWE369_Divide_by_Zero__int_fgets_divide_03.c":108:53)
#loc143 = loc("CWE369_Divide_by_Zero__int_fgets_divide_03.c":108:17)
#loc144 = loc("CWE369_Divide_by_Zero__int_fgets_divide_03.c":108:63)
#loc145 = loc("CWE369_Divide_by_Zero__int_fgets_divide_03.c":108:60)
#loc146 = loc("CWE369_Divide_by_Zero__int_fgets_divide_03.c":109:13)
#loc147 = loc("CWE369_Divide_by_Zero__int_fgets_divide_03.c":112:13)
#loc148 = loc("CWE369_Divide_by_Zero__int_fgets_divide_03.c":114:13)
#loc149 = loc("CWE369_Divide_by_Zero__int_fgets_divide_03.c":111:29)
#loc150 = loc("CWE369_Divide_by_Zero__int_fgets_divide_03.c":111:24)
#loc151 = loc("CWE369_Divide_by_Zero__int_fgets_divide_03.c":111:17)
#loc152 = loc("CWE369_Divide_by_Zero__int_fgets_divide_03.c":111:40)
#loc153 = loc("CWE369_Divide_by_Zero__int_fgets_divide_03.c":115:27)
#loc154 = loc("CWE369_Divide_by_Zero__int_fgets_divide_03.c":115:17)
#loc155 = loc("CWE369_Divide_by_Zero__int_fgets_divide_03.c":119:5)
#loc156 = loc("CWE369_Divide_by_Zero__int_fgets_divide_03.c":130:5)
#loc157 = loc("CWE369_Divide_by_Zero__int_fgets_divide_03.c":119:8)
#loc158 = loc("CWE369_Divide_by_Zero__int_fgets_divide_03.c":119:11)
#loc159 = loc("CWE369_Divide_by_Zero__int_fgets_divide_03.c":119:9)
#loc160 = loc("CWE369_Divide_by_Zero__int_fgets_divide_03.c":120:5)
#loc161 = loc("CWE369_Divide_by_Zero__int_fgets_divide_03.c":122:9)
#loc162 = loc("CWE369_Divide_by_Zero__int_fgets_divide_03.c":129:9)
#loc163 = loc("CWE369_Divide_by_Zero__int_fgets_divide_03.c":122:13)
#loc164 = loc("CWE369_Divide_by_Zero__int_fgets_divide_03.c":122:21)
#loc165 = loc("CWE369_Divide_by_Zero__int_fgets_divide_03.c":122:18)
#loc166 = loc("CWE369_Divide_by_Zero__int_fgets_divide_03.c":123:9)
#loc167 = loc("CWE369_Divide_by_Zero__int_fgets_divide_03.c":125:9)
#loc168 = loc("CWE369_Divide_by_Zero__int_fgets_divide_03.c":127:9)
#loc169 = loc("CWE369_Divide_by_Zero__int_fgets_divide_03.c":124:26)
#loc170 = loc("CWE369_Divide_by_Zero__int_fgets_divide_03.c":124:32)
#loc171 = loc("CWE369_Divide_by_Zero__int_fgets_divide_03.c":124:13)
#loc172 = loc("CWE369_Divide_by_Zero__int_fgets_divide_03.c":128:23)
#loc173 = loc("CWE369_Divide_by_Zero__int_fgets_divide_03.c":128:13)
#loc174 = loc("CWE369_Divide_by_Zero__int_fgets_divide_03.c":134:1)
#loc175 = loc("CWE369_Divide_by_Zero__int_fgets_divide_03.c":154:1)
#loc176 = loc("CWE369_Divide_by_Zero__int_fgets_divide_03.c":136:5)
#loc177 = loc("CWE369_Divide_by_Zero__int_fgets_divide_03.c":136:9)
#loc178 = loc("CWE369_Divide_by_Zero__int_fgets_divide_03.c":138:13)
#loc179 = loc("CWE369_Divide_by_Zero__int_fgets_divide_03.c":138:12)
#loc180 = loc("CWE369_Divide_by_Zero__int_fgets_divide_03.c":138:5)
#loc181 = loc("CWE369_Divide_by_Zero__int_fgets_divide_03.c":139:5)
#loc182 = loc("CWE369_Divide_by_Zero__int_fgets_divide_03.c":148:5)
#loc183 = loc("CWE369_Divide_by_Zero__int_fgets_divide_03.c":139:8)
#loc184 = loc("CWE369_Divide_by_Zero__int_fgets_divide_03.c":139:11)
#loc185 = loc("CWE369_Divide_by_Zero__int_fgets_divide_03.c":139:9)
#loc186 = loc("CWE369_Divide_by_Zero__int_fgets_divide_03.c":140:5)
#loc187 = loc("CWE369_Divide_by_Zero__int_fgets_divide_03.c":143:5)
#loc188 = loc("CWE369_Divide_by_Zero__int_fgets_divide_03.c":145:5)
#loc189 = loc("CWE369_Divide_by_Zero__int_fgets_divide_03.c":142:19)
#loc190 = loc("CWE369_Divide_by_Zero__int_fgets_divide_03.c":142:9)
#loc191 = loc("CWE369_Divide_by_Zero__int_fgets_divide_03.c":147:16)
#loc192 = loc("CWE369_Divide_by_Zero__int_fgets_divide_03.c":147:9)
#loc193 = loc("CWE369_Divide_by_Zero__int_fgets_divide_03.c":149:5)
#loc194 = loc("CWE369_Divide_by_Zero__int_fgets_divide_03.c":153:5)
#loc195 = loc("CWE369_Divide_by_Zero__int_fgets_divide_03.c":149:8)
#loc196 = loc("CWE369_Divide_by_Zero__int_fgets_divide_03.c":149:11)
#loc197 = loc("CWE369_Divide_by_Zero__int_fgets_divide_03.c":149:9)
#loc198 = loc("CWE369_Divide_by_Zero__int_fgets_divide_03.c":150:5)
#loc199 = loc("CWE369_Divide_by_Zero__int_fgets_divide_03.c":152:22)
#loc200 = loc("CWE369_Divide_by_Zero__int_fgets_divide_03.c":152:28)
#loc201 = loc("CWE369_Divide_by_Zero__int_fgets_divide_03.c":152:9)
#loc202 = loc("CWE369_Divide_by_Zero__int_fgets_divide_03.c":157:1)
#loc203 = loc("CWE369_Divide_by_Zero__int_fgets_divide_03.c":172:1)
#loc204 = loc("CWE369_Divide_by_Zero__int_fgets_divide_03.c":159:5)
#loc205 = loc("CWE369_Divide_by_Zero__int_fgets_divide_03.c":159:9)
#loc206 = loc("CWE369_Divide_by_Zero__int_fgets_divide_03.c":161:13)
#loc207 = loc("CWE369_Divide_by_Zero__int_fgets_divide_03.c":161:12)
#loc208 = loc("CWE369_Divide_by_Zero__int_fgets_divide_03.c":161:5)
#loc209 = loc("CWE369_Divide_by_Zero__int_fgets_divide_03.c":162:5)
#loc210 = loc("CWE369_Divide_by_Zero__int_fgets_divide_03.c":166:5)
#loc211 = loc("CWE369_Divide_by_Zero__int_fgets_divide_03.c":162:8)
#loc212 = loc("CWE369_Divide_by_Zero__int_fgets_divide_03.c":162:11)
#loc213 = loc("CWE369_Divide_by_Zero__int_fgets_divide_03.c":162:9)
#loc214 = loc("CWE369_Divide_by_Zero__int_fgets_divide_03.c":163:5)
#loc215 = loc("CWE369_Divide_by_Zero__int_fgets_divide_03.c":165:16)
#loc216 = loc("CWE369_Divide_by_Zero__int_fgets_divide_03.c":165:9)
#loc217 = loc("CWE369_Divide_by_Zero__int_fgets_divide_03.c":167:5)
#loc218 = loc("CWE369_Divide_by_Zero__int_fgets_divide_03.c":171:5)
#loc219 = loc("CWE369_Divide_by_Zero__int_fgets_divide_03.c":167:8)
#loc220 = loc("CWE369_Divide_by_Zero__int_fgets_divide_03.c":167:11)
#loc221 = loc("CWE369_Divide_by_Zero__int_fgets_divide_03.c":167:9)
#loc222 = loc("CWE369_Divide_by_Zero__int_fgets_divide_03.c":168:5)
#loc223 = loc("CWE369_Divide_by_Zero__int_fgets_divide_03.c":170:22)
#loc224 = loc("CWE369_Divide_by_Zero__int_fgets_divide_03.c":170:28)
#loc225 = loc("CWE369_Divide_by_Zero__int_fgets_divide_03.c":170:9)
#loc226 = loc(fused[#loc1, #loc2])
#loc227 = loc(fused[#loc3, #loc4])
#loc228 = loc(fused[#loc5, #loc6])
#loc229 = loc(fused[#loc7, #loc8])
#loc230 = loc(fused[#loc10, #loc11])
#loc231 = loc(fused[#loc12, #loc13])
#loc232 = loc(fused[#loc14, #loc15])
#loc233 = loc(fused[#loc18, #loc16])
#loc234 = loc(fused[#loc19, #loc20])
#loc235 = loc(fused[#loc21, #loc22])
#loc236 = loc(fused[#loc24, #loc20])
#loc237 = loc(fused[#loc25, #loc26])
#loc238 = loc(fused[#loc27, #loc28])
#loc239 = loc(fused[#loc29, #loc30])
#loc240 = loc(fused[#loc34, #loc35])
#loc241 = loc(fused[#loc37, #loc38, #loc39, #loc30])
#loc242 = loc(fused[#loc42, #loc43])
#loc243 = loc(fused[#loc45, #loc46])
#loc244 = loc(fused[#loc47, #loc48])
#loc245 = loc(fused[#loc50, #loc46])
#loc246 = loc(fused[#loc51, #loc52])
#loc247 = loc(fused[#loc54, #loc55])
#loc248 = loc(fused[#loc56, #loc57])
#loc249 = loc(fused[#loc58, #loc59])
#loc250 = loc(fused[#loc60, #loc61])
#loc251 = loc(fused[#loc62, #loc63])
#loc252 = loc(fused[#loc66, #loc67])
#loc253 = loc(fused[#loc68, #loc69])
#loc254 = loc(fused[#loc72, #loc70])
#loc255 = loc(fused[#loc73, #loc74])
#loc256 = loc(fused[#loc75, #loc76])
#loc257 = loc(fused[#loc78, #loc74])
#loc258 = loc(fused[#loc79, #loc80])
#loc259 = loc(fused[#loc81, #loc82])
#loc260 = loc(fused[#loc83, #loc84])
#loc261 = loc(fused[#loc88, #loc89])
#loc262 = loc(fused[#loc91, #loc92, #loc93, #loc84])
#loc263 = loc(fused[#loc96, #loc97])
#loc264 = loc(fused[#loc100, #loc101])
#loc265 = loc(fused[#loc102, #loc103])
#loc266 = loc(fused[#loc105, #loc106, #loc107, #loc101])
#loc267 = loc(fused[#loc109, #loc110])
#loc268 = loc(fused[#loc111, #loc112])
#loc269 = loc(fused[#loc114, #loc115, #loc116, #loc110])
#loc270 = loc(fused[#loc117, #loc118])
#loc271 = loc(fused[#loc121, #loc122])
#loc272 = loc(fused[#loc123, #loc124])
#loc273 = loc(fused[#loc127, #loc125])
#loc274 = loc(fused[#loc128, #loc129])
#loc275 = loc(fused[#loc130, #loc131])
#loc276 = loc(fused[#loc133, #loc129])
#loc277 = loc(fused[#loc134, #loc135])
#loc278 = loc(fused[#loc136, #loc137])
#loc279 = loc(fused[#loc138, #loc139])
#loc280 = loc(fused[#loc143, #loc144])
#loc281 = loc(fused[#loc146, #loc147, #loc148, #loc139])
#loc282 = loc(fused[#loc151, #loc152])
#loc283 = loc(fused[#loc155, #loc156])
#loc284 = loc(fused[#loc157, #loc158])
#loc285 = loc(fused[#loc160, #loc156])
#loc286 = loc(fused[#loc161, #loc162])
#loc287 = loc(fused[#loc163, #loc164])
#loc288 = loc(fused[#loc166, #loc167, #loc168, #loc162])
#loc289 = loc(fused[#loc169, #loc170])
#loc290 = loc(fused[#loc174, #loc175])
#loc291 = loc(fused[#loc176, #loc177])
#loc292 = loc(fused[#loc180, #loc178])
#loc293 = loc(fused[#loc181, #loc182])
#loc294 = loc(fused[#loc183, #loc184])
#loc295 = loc(fused[#loc186, #loc187, #loc188, #loc182])
#loc296 = loc(fused[#loc192, #loc191])
#loc297 = loc(fused[#loc193, #loc194])
#loc298 = loc(fused[#loc195, #loc196])
#loc299 = loc(fused[#loc198, #loc194])
#loc300 = loc(fused[#loc199, #loc200])
#loc301 = loc(fused[#loc202, #loc203])
#loc302 = loc(fused[#loc204, #loc205])
#loc303 = loc(fused[#loc208, #loc206])
#loc304 = loc(fused[#loc209, #loc210])
#loc305 = loc(fused[#loc211, #loc212])
#loc306 = loc(fused[#loc214, #loc210])
#loc307 = loc(fused[#loc216, #loc215])
#loc308 = loc(fused[#loc217, #loc218])
#loc309 = loc(fused[#loc219, #loc220])
#loc310 = loc(fused[#loc222, #loc218])
#loc311 = loc(fused[#loc223, #loc224])
