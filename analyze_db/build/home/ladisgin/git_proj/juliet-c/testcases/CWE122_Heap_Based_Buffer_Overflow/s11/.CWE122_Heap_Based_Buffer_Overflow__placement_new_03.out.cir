!s32i = !cir.int<s, 32>
!s64i = !cir.int<s, 64>
!s8i = !cir.int<s, 8>
!u32i = !cir.int<u, 32>
!u64i = !cir.int<u, 64>
!void = !cir.void
#fn_attr = #cir<extra({nothrow = #cir.nothrow})>
#fn_attr1 = #cir<extra({inline = #cir.inline<no>, nothrow = #cir.nothrow, optnone = #cir.optnone})>
#fn_attr2 = #cir<extra({inline = #cir.inline<no>, optnone = #cir.optnone})>
#loc5 = loc("../../../testcasesupport/std_testcase.h":61:7)
#loc70 = loc("../../../testcasesupport/std_testcase.h":68:7)
#loc321 = loc("CWE122_Heap_Based_Buffer_Overflow__placement_new_03.cpp":215:10)
#loc322 = loc("CWE122_Heap_Based_Buffer_Overflow__placement_new_03.cpp":215:14)
#loc323 = loc("CWE122_Heap_Based_Buffer_Overflow__placement_new_03.cpp":215:20)
#loc324 = loc("CWE122_Heap_Based_Buffer_Overflow__placement_new_03.cpp":215:32)
!ty_OneIntClass = !cir.struct<class "OneIntClass" {!s32i} #cir.record.decl.ast>
!ty_TwoIntsClass = !cir.struct<class "TwoIntsClass" {!s32i, !s32i} #cir.record.decl.ast>
#loc474 = loc(fused[#loc321, #loc322])
#loc475 = loc(fused[#loc323, #loc324])
module @"/home/ladisgin/git_proj/juliet-c/testcases/CWE122_Heap_Based_Buffer_Overflow/s11/CWE122_Heap_Based_Buffer_Overflow__placement_new_03.cpp" attributes {cir.lang = #cir.lang<cxx>, cir.sob = #cir.signed_overflow_behavior<undefined>, cir.triple = "x86_64-unknown-linux-gnu", dlti.dl_spec = #dlti.dl_spec<f16 = dense<16> : vector<2xi64>, f64 = dense<64> : vector<2xi64>, i32 = dense<32> : vector<2xi64>, i16 = dense<16> : vector<2xi64>, !llvm.ptr<272> = dense<64> : vector<4xi64>, i64 = dense<64> : vector<2xi64>, !llvm.ptr<270> = dense<32> : vector<4xi64>, f128 = dense<128> : vector<2xi64>, !llvm.ptr<271> = dense<32> : vector<4xi64>, f80 = dense<128> : vector<2xi64>, i128 = dense<128> : vector<2xi64>, i8 = dense<8> : vector<2xi64>, !llvm.ptr = dense<64> : vector<4xi64>, i1 = dense<8> : vector<2xi64>, "dlti.endianness" = "little", "dlti.stack_alignment" = 128 : i64>} {
  cir.func private @malloc(!u64i) -> !cir.ptr<!void> extra(#fn_attr) loc(#loc337)
  cir.func private @exit(!s32i) extra(#fn_attr) loc(#loc338)
  cir.func linkonce_odr @_ZN12TwoIntsClassC2Ev(%arg0: !cir.ptr<!ty_TwoIntsClass> loc("../../../testcasesupport/std_testcase.h":61:7)) extra(#fn_attr1) {
    %0 = cir.alloca !cir.ptr<!ty_TwoIntsClass>, !cir.ptr<!cir.ptr<!ty_TwoIntsClass>>, ["this", init] {alignment = 8 : i64} loc(#loc5)
    cir.store %arg0, %0 : !cir.ptr<!ty_TwoIntsClass>, !cir.ptr<!cir.ptr<!ty_TwoIntsClass>> loc(#loc5)
    %1 = cir.load %0 : !cir.ptr<!cir.ptr<!ty_TwoIntsClass>>, !cir.ptr<!ty_TwoIntsClass> loc(#loc5)
    cir.return loc(#loc5)
  } loc(#loc5)
  cir.func private @printIntLine(!s32i) loc(#loc339)
  cir.func private @free(!cir.ptr<!void>) extra(#fn_attr) loc(#loc340)
  cir.func @_ZN51CWE122_Heap_Based_Buffer_Overflow__placement_new_033badEv() extra(#fn_attr2) {
    %0 = cir.alloca !cir.ptr<!s8i>, !cir.ptr<!cir.ptr<!s8i>>, ["data"] {alignment = 8 : i64} loc(#loc342)
    %1 = cir.alloca !cir.ptr<!s8i>, !cir.ptr<!cir.ptr<!s8i>>, ["dataBadBuffer", init] {alignment = 8 : i64} loc(#loc343)
    %2 = cir.alloca !cir.ptr<!s8i>, !cir.ptr<!cir.ptr<!s8i>>, ["dataGoodBuffer", init] {alignment = 8 : i64} loc(#loc344)
    %3 = cir.get_global @malloc : !cir.ptr<!cir.func<!cir.ptr<!void> (!u64i)>> loc(#loc18)
    %4 = cir.const #cir.int<4> : !u64i loc(#loc345)
    %5 = cir.call @malloc(%4) : (!u64i) -> !cir.ptr<!void> extra(#fn_attr) loc(#loc18)
    %6 = cir.cast(bitcast, %5 : !cir.ptr<!void>), !cir.ptr<!s8i> loc(#loc346)
    cir.store %6, %1 : !cir.ptr<!s8i>, !cir.ptr<!cir.ptr<!s8i>> loc(#loc343)
    cir.scope {
      %11 = cir.load %1 : !cir.ptr<!cir.ptr<!s8i>>, !cir.ptr<!s8i> loc(#loc23)
      %12 = cir.const #cir.ptr<null> : !cir.ptr<!s8i> loc(#loc24)
      %13 = cir.cmp(eq, %11, %12) : !cir.ptr<!s8i>, !cir.bool loc(#loc348)
      cir.if %13 {
        %14 = cir.get_global @exit : !cir.ptr<!cir.func<!void (!s32i)>> loc(#loc26)
        %15 = cir.const #cir.int<1> : !s32i loc(#loc27)
        %16 = cir.unary(minus, %15) : !s32i, !s32i loc(#loc28)
        cir.call @exit(%16) : (!s32i) -> () extra(#fn_attr) loc(#loc26)
      } loc(#loc349)
    } loc(#loc347)
    %7 = cir.get_global @malloc : !cir.ptr<!cir.func<!cir.ptr<!void> (!u64i)>> loc(#loc29)
    %8 = cir.const #cir.int<8> : !u64i loc(#loc350)
    %9 = cir.call @malloc(%8) : (!u64i) -> !cir.ptr<!void> extra(#fn_attr) loc(#loc29)
    %10 = cir.cast(bitcast, %9 : !cir.ptr<!void>), !cir.ptr<!s8i> loc(#loc351)
    cir.store %10, %2 : !cir.ptr<!s8i>, !cir.ptr<!cir.ptr<!s8i>> loc(#loc344)
    cir.scope {
      %11 = cir.load %2 : !cir.ptr<!cir.ptr<!s8i>>, !cir.ptr<!s8i> loc(#loc34)
      %12 = cir.const #cir.ptr<null> : !cir.ptr<!s8i> loc(#loc35)
      %13 = cir.cmp(eq, %11, %12) : !cir.ptr<!s8i>, !cir.bool loc(#loc353)
      cir.if %13 {
        %14 = cir.get_global @exit : !cir.ptr<!cir.func<!void (!s32i)>> loc(#loc37)
        %15 = cir.const #cir.int<1> : !s32i loc(#loc38)
        %16 = cir.unary(minus, %15) : !s32i, !s32i loc(#loc39)
        cir.call @exit(%16) : (!s32i) -> () extra(#fn_attr) loc(#loc37)
      } loc(#loc354)
    } loc(#loc352)
    cir.scope {
      %11 = cir.const #cir.int<5> : !s32i loc(#loc42)
      %12 = cir.const #cir.int<5> : !s32i loc(#loc43)
      %13 = cir.cmp(eq, %11, %12) : !s32i, !cir.bool loc(#loc356)
      cir.if %13 {
        %14 = cir.load %1 : !cir.ptr<!cir.ptr<!s8i>>, !cir.ptr<!s8i> loc(#loc45)
        cir.store %14, %0 : !cir.ptr<!s8i>, !cir.ptr<!cir.ptr<!s8i>> loc(#loc358)
      } loc(#loc357)
    } loc(#loc355)
    cir.scope {
      %11 = cir.const #cir.int<5> : !s32i loc(#loc49)
      %12 = cir.const #cir.int<5> : !s32i loc(#loc50)
      %13 = cir.cmp(eq, %11, %12) : !s32i, !cir.bool loc(#loc360)
      cir.if %13 {
        cir.scope {
          %14 = cir.alloca !cir.ptr<!ty_TwoIntsClass>, !cir.ptr<!cir.ptr<!ty_TwoIntsClass>>, ["classTwo", init] {alignment = 8 : i64} loc(#loc363)
          %15 = cir.const #cir.int<8> : !u64i loc(#loc364)
          %16 = cir.load %0 : !cir.ptr<!cir.ptr<!s8i>>, !cir.ptr<!s8i> loc(#loc57)
          %17 = cir.cast(bitcast, %16 : !cir.ptr<!s8i>), !cir.ptr<!void> loc(#loc57)
          %18 = cir.cast(bitcast, %17 : !cir.ptr<!void>), !cir.ptr<!ty_TwoIntsClass> loc(#loc364)
          cir.call @_ZN12TwoIntsClassC2Ev(%18) : (!cir.ptr<!ty_TwoIntsClass>) -> () extra(#fn_attr) loc(#loc55)
          cir.store %18, %14 : !cir.ptr<!ty_TwoIntsClass>, !cir.ptr<!cir.ptr<!ty_TwoIntsClass>> loc(#loc363)
          %19 = cir.const #cir.int<5> : !s32i loc(#loc58)
          %20 = cir.load %14 : !cir.ptr<!cir.ptr<!ty_TwoIntsClass>>, !cir.ptr<!ty_TwoIntsClass> loc(#loc59)
          %21 = cir.get_member %20[0] {name = "intOne"} : !cir.ptr<!ty_TwoIntsClass> -> !cir.ptr<!s32i> loc(#loc60)
          cir.store %19, %21 : !s32i, !cir.ptr<!s32i> loc(#loc365)
          %22 = cir.const #cir.int<10> : !s32i loc(#loc61)
          %23 = cir.load %14 : !cir.ptr<!cir.ptr<!ty_TwoIntsClass>>, !cir.ptr<!ty_TwoIntsClass> loc(#loc62)
          %24 = cir.get_member %23[1] {name = "intTwo"} : !cir.ptr<!ty_TwoIntsClass> -> !cir.ptr<!s32i> loc(#loc63)
          cir.store %22, %24 : !s32i, !cir.ptr<!s32i> loc(#loc366)
          %25 = cir.load %14 : !cir.ptr<!cir.ptr<!ty_TwoIntsClass>>, !cir.ptr<!ty_TwoIntsClass> loc(#loc64)
          %26 = cir.get_member %25[0] {name = "intOne"} : !cir.ptr<!ty_TwoIntsClass> -> !cir.ptr<!s32i> loc(#loc60)
          %27 = cir.load %26 : !cir.ptr<!s32i>, !s32i loc(#loc65)
          cir.call @printIntLine(%27) : (!s32i) -> () loc(#loc66)
          %28 = cir.get_global @free : !cir.ptr<!cir.func<!void (!cir.ptr<!void>)>> loc(#loc67)
          %29 = cir.load %0 : !cir.ptr<!cir.ptr<!s8i>>, !cir.ptr<!s8i> loc(#loc68)
          %30 = cir.cast(bitcast, %29 : !cir.ptr<!s8i>), !cir.ptr<!void> loc(#loc68)
          cir.call @free(%30) : (!cir.ptr<!void>) -> () extra(#fn_attr) loc(#loc67)
        } loc(#loc362)
      } loc(#loc361)
    } loc(#loc359)
    cir.return loc(#loc11)
  } loc(#loc341)
  cir.global "private" constant cir_private dsolocal @".str.4" = #cir.const_array<"Benign, fixed string\00" : !cir.array<!s8i x 21>> : !cir.array<!s8i x 21> {alignment = 1 : i64} loc(#loc69)
  cir.func linkonce_odr @_ZN11OneIntClassC2Ev(%arg0: !cir.ptr<!ty_OneIntClass> loc("../../../testcasesupport/std_testcase.h":68:7)) extra(#fn_attr1) {
    %0 = cir.alloca !cir.ptr<!ty_OneIntClass>, !cir.ptr<!cir.ptr<!ty_OneIntClass>>, ["this", init] {alignment = 8 : i64} loc(#loc70)
    cir.store %arg0, %0 : !cir.ptr<!ty_OneIntClass>, !cir.ptr<!cir.ptr<!ty_OneIntClass>> loc(#loc70)
    %1 = cir.load %0 : !cir.ptr<!cir.ptr<!ty_OneIntClass>>, !cir.ptr<!ty_OneIntClass> loc(#loc70)
    cir.return loc(#loc70)
  } loc(#loc70)
  cir.func internal private @_ZN51CWE122_Heap_Based_Buffer_Overflow__placement_new_03L8goodB2G1Ev() extra(#fn_attr2) {
    %0 = cir.alloca !cir.ptr<!s8i>, !cir.ptr<!cir.ptr<!s8i>>, ["data"] {alignment = 8 : i64} loc(#loc368)
    %1 = cir.alloca !cir.ptr<!s8i>, !cir.ptr<!cir.ptr<!s8i>>, ["dataBadBuffer", init] {alignment = 8 : i64} loc(#loc369)
    %2 = cir.alloca !cir.ptr<!s8i>, !cir.ptr<!cir.ptr<!s8i>>, ["dataGoodBuffer", init] {alignment = 8 : i64} loc(#loc370)
    %3 = cir.get_global @malloc : !cir.ptr<!cir.func<!cir.ptr<!void> (!u64i)>> loc(#loc79)
    %4 = cir.const #cir.int<4> : !u64i loc(#loc371)
    %5 = cir.call @malloc(%4) : (!u64i) -> !cir.ptr<!void> extra(#fn_attr) loc(#loc79)
    %6 = cir.cast(bitcast, %5 : !cir.ptr<!void>), !cir.ptr<!s8i> loc(#loc372)
    cir.store %6, %1 : !cir.ptr<!s8i>, !cir.ptr<!cir.ptr<!s8i>> loc(#loc369)
    cir.scope {
      %11 = cir.load %1 : !cir.ptr<!cir.ptr<!s8i>>, !cir.ptr<!s8i> loc(#loc84)
      %12 = cir.const #cir.ptr<null> : !cir.ptr<!s8i> loc(#loc85)
      %13 = cir.cmp(eq, %11, %12) : !cir.ptr<!s8i>, !cir.bool loc(#loc374)
      cir.if %13 {
        %14 = cir.get_global @exit : !cir.ptr<!cir.func<!void (!s32i)>> loc(#loc87)
        %15 = cir.const #cir.int<1> : !s32i loc(#loc88)
        %16 = cir.unary(minus, %15) : !s32i, !s32i loc(#loc89)
        cir.call @exit(%16) : (!s32i) -> () extra(#fn_attr) loc(#loc87)
      } loc(#loc375)
    } loc(#loc373)
    %7 = cir.get_global @malloc : !cir.ptr<!cir.func<!cir.ptr<!void> (!u64i)>> loc(#loc90)
    %8 = cir.const #cir.int<8> : !u64i loc(#loc376)
    %9 = cir.call @malloc(%8) : (!u64i) -> !cir.ptr<!void> extra(#fn_attr) loc(#loc90)
    %10 = cir.cast(bitcast, %9 : !cir.ptr<!void>), !cir.ptr<!s8i> loc(#loc377)
    cir.store %10, %2 : !cir.ptr<!s8i>, !cir.ptr<!cir.ptr<!s8i>> loc(#loc370)
    cir.scope {
      %11 = cir.load %2 : !cir.ptr<!cir.ptr<!s8i>>, !cir.ptr<!s8i> loc(#loc95)
      %12 = cir.const #cir.ptr<null> : !cir.ptr<!s8i> loc(#loc96)
      %13 = cir.cmp(eq, %11, %12) : !cir.ptr<!s8i>, !cir.bool loc(#loc379)
      cir.if %13 {
        %14 = cir.get_global @exit : !cir.ptr<!cir.func<!void (!s32i)>> loc(#loc98)
        %15 = cir.const #cir.int<1> : !s32i loc(#loc99)
        %16 = cir.unary(minus, %15) : !s32i, !s32i loc(#loc100)
        cir.call @exit(%16) : (!s32i) -> () extra(#fn_attr) loc(#loc98)
      } loc(#loc380)
    } loc(#loc378)
    cir.scope {
      %11 = cir.const #cir.int<5> : !s32i loc(#loc103)
      %12 = cir.const #cir.int<5> : !s32i loc(#loc104)
      %13 = cir.cmp(eq, %11, %12) : !s32i, !cir.bool loc(#loc382)
      cir.if %13 {
        %14 = cir.load %1 : !cir.ptr<!cir.ptr<!s8i>>, !cir.ptr<!s8i> loc(#loc106)
        cir.store %14, %0 : !cir.ptr<!s8i>, !cir.ptr<!cir.ptr<!s8i>> loc(#loc384)
      } loc(#loc383)
    } loc(#loc381)
    cir.scope {
      %11 = cir.const #cir.int<5> : !s32i loc(#loc110)
      %12 = cir.const #cir.int<5> : !s32i loc(#loc111)
      %13 = cir.cmp(ne, %11, %12) : !s32i, !cir.bool loc(#loc386)
      cir.if %13 {
        %14 = cir.get_global @".str.4" : !cir.ptr<!cir.array<!s8i x 21>> loc(#loc69)
        %15 = cir.cast(array_to_ptrdecay, %14 : !cir.ptr<!cir.array<!s8i x 21>>), !cir.ptr<!s8i> loc(#loc69)
        cir.call @printLine(%15) : (!cir.ptr<!s8i>) -> () loc(#loc115)
      } else {
        cir.scope {
          %14 = cir.alloca !cir.ptr<!ty_OneIntClass>, !cir.ptr<!cir.ptr<!ty_OneIntClass>>, ["classOne", init] {alignment = 8 : i64} loc(#loc389)
          %15 = cir.const #cir.int<4> : !u64i loc(#loc390)
          %16 = cir.load %0 : !cir.ptr<!cir.ptr<!s8i>>, !cir.ptr<!s8i> loc(#loc121)
          %17 = cir.cast(bitcast, %16 : !cir.ptr<!s8i>), !cir.ptr<!void> loc(#loc121)
          %18 = cir.cast(bitcast, %17 : !cir.ptr<!void>), !cir.ptr<!ty_OneIntClass> loc(#loc390)
          cir.call @_ZN11OneIntClassC2Ev(%18) : (!cir.ptr<!ty_OneIntClass>) -> () extra(#fn_attr) loc(#loc119)
          cir.store %18, %14 : !cir.ptr<!ty_OneIntClass>, !cir.ptr<!cir.ptr<!ty_OneIntClass>> loc(#loc389)
          %19 = cir.const #cir.int<5> : !s32i loc(#loc122)
          %20 = cir.load %14 : !cir.ptr<!cir.ptr<!ty_OneIntClass>>, !cir.ptr<!ty_OneIntClass> loc(#loc123)
          %21 = cir.get_member %20[0] {name = "intOne"} : !cir.ptr<!ty_OneIntClass> -> !cir.ptr<!s32i> loc(#loc124)
          cir.store %19, %21 : !s32i, !cir.ptr<!s32i> loc(#loc391)
          %22 = cir.load %14 : !cir.ptr<!cir.ptr<!ty_OneIntClass>>, !cir.ptr<!ty_OneIntClass> loc(#loc125)
          %23 = cir.get_member %22[0] {name = "intOne"} : !cir.ptr<!ty_OneIntClass> -> !cir.ptr<!s32i> loc(#loc124)
          %24 = cir.load %23 : !cir.ptr<!s32i>, !s32i loc(#loc126)
          cir.call @printIntLine(%24) : (!s32i) -> () loc(#loc127)
          %25 = cir.get_global @free : !cir.ptr<!cir.func<!void (!cir.ptr<!void>)>> loc(#loc128)
          %26 = cir.load %0 : !cir.ptr<!cir.ptr<!s8i>>, !cir.ptr<!s8i> loc(#loc129)
          %27 = cir.cast(bitcast, %26 : !cir.ptr<!s8i>), !cir.ptr<!void> loc(#loc129)
          cir.call @free(%27) : (!cir.ptr<!void>) -> () extra(#fn_attr) loc(#loc128)
        } loc(#loc388)
      } loc(#loc387)
    } loc(#loc385)
    cir.return loc(#loc72)
  } loc(#loc367)
  cir.func internal private @_ZN51CWE122_Heap_Based_Buffer_Overflow__placement_new_03L8goodB2G2Ev() extra(#fn_attr2) {
    %0 = cir.alloca !cir.ptr<!s8i>, !cir.ptr<!cir.ptr<!s8i>>, ["data"] {alignment = 8 : i64} loc(#loc393)
    %1 = cir.alloca !cir.ptr<!s8i>, !cir.ptr<!cir.ptr<!s8i>>, ["dataBadBuffer", init] {alignment = 8 : i64} loc(#loc394)
    %2 = cir.alloca !cir.ptr<!s8i>, !cir.ptr<!cir.ptr<!s8i>>, ["dataGoodBuffer", init] {alignment = 8 : i64} loc(#loc395)
    %3 = cir.get_global @malloc : !cir.ptr<!cir.func<!cir.ptr<!void> (!u64i)>> loc(#loc138)
    %4 = cir.const #cir.int<4> : !u64i loc(#loc396)
    %5 = cir.call @malloc(%4) : (!u64i) -> !cir.ptr<!void> extra(#fn_attr) loc(#loc138)
    %6 = cir.cast(bitcast, %5 : !cir.ptr<!void>), !cir.ptr<!s8i> loc(#loc397)
    cir.store %6, %1 : !cir.ptr<!s8i>, !cir.ptr<!cir.ptr<!s8i>> loc(#loc394)
    cir.scope {
      %11 = cir.load %1 : !cir.ptr<!cir.ptr<!s8i>>, !cir.ptr<!s8i> loc(#loc143)
      %12 = cir.const #cir.ptr<null> : !cir.ptr<!s8i> loc(#loc144)
      %13 = cir.cmp(eq, %11, %12) : !cir.ptr<!s8i>, !cir.bool loc(#loc399)
      cir.if %13 {
        %14 = cir.get_global @exit : !cir.ptr<!cir.func<!void (!s32i)>> loc(#loc146)
        %15 = cir.const #cir.int<1> : !s32i loc(#loc147)
        %16 = cir.unary(minus, %15) : !s32i, !s32i loc(#loc148)
        cir.call @exit(%16) : (!s32i) -> () extra(#fn_attr) loc(#loc146)
      } loc(#loc400)
    } loc(#loc398)
    %7 = cir.get_global @malloc : !cir.ptr<!cir.func<!cir.ptr<!void> (!u64i)>> loc(#loc149)
    %8 = cir.const #cir.int<8> : !u64i loc(#loc401)
    %9 = cir.call @malloc(%8) : (!u64i) -> !cir.ptr<!void> extra(#fn_attr) loc(#loc149)
    %10 = cir.cast(bitcast, %9 : !cir.ptr<!void>), !cir.ptr<!s8i> loc(#loc402)
    cir.store %10, %2 : !cir.ptr<!s8i>, !cir.ptr<!cir.ptr<!s8i>> loc(#loc395)
    cir.scope {
      %11 = cir.load %2 : !cir.ptr<!cir.ptr<!s8i>>, !cir.ptr<!s8i> loc(#loc154)
      %12 = cir.const #cir.ptr<null> : !cir.ptr<!s8i> loc(#loc155)
      %13 = cir.cmp(eq, %11, %12) : !cir.ptr<!s8i>, !cir.bool loc(#loc404)
      cir.if %13 {
        %14 = cir.get_global @exit : !cir.ptr<!cir.func<!void (!s32i)>> loc(#loc157)
        %15 = cir.const #cir.int<1> : !s32i loc(#loc158)
        %16 = cir.unary(minus, %15) : !s32i, !s32i loc(#loc159)
        cir.call @exit(%16) : (!s32i) -> () extra(#fn_attr) loc(#loc157)
      } loc(#loc405)
    } loc(#loc403)
    cir.scope {
      %11 = cir.const #cir.int<5> : !s32i loc(#loc162)
      %12 = cir.const #cir.int<5> : !s32i loc(#loc163)
      %13 = cir.cmp(eq, %11, %12) : !s32i, !cir.bool loc(#loc407)
      cir.if %13 {
        %14 = cir.load %1 : !cir.ptr<!cir.ptr<!s8i>>, !cir.ptr<!s8i> loc(#loc165)
        cir.store %14, %0 : !cir.ptr<!s8i>, !cir.ptr<!cir.ptr<!s8i>> loc(#loc409)
      } loc(#loc408)
    } loc(#loc406)
    cir.scope {
      %11 = cir.const #cir.int<5> : !s32i loc(#loc169)
      %12 = cir.const #cir.int<5> : !s32i loc(#loc170)
      %13 = cir.cmp(eq, %11, %12) : !s32i, !cir.bool loc(#loc411)
      cir.if %13 {
        cir.scope {
          %14 = cir.alloca !cir.ptr<!ty_OneIntClass>, !cir.ptr<!cir.ptr<!ty_OneIntClass>>, ["classOne", init] {alignment = 8 : i64} loc(#loc414)
          %15 = cir.const #cir.int<4> : !u64i loc(#loc415)
          %16 = cir.load %0 : !cir.ptr<!cir.ptr<!s8i>>, !cir.ptr<!s8i> loc(#loc177)
          %17 = cir.cast(bitcast, %16 : !cir.ptr<!s8i>), !cir.ptr<!void> loc(#loc177)
          %18 = cir.cast(bitcast, %17 : !cir.ptr<!void>), !cir.ptr<!ty_OneIntClass> loc(#loc415)
          cir.call @_ZN11OneIntClassC2Ev(%18) : (!cir.ptr<!ty_OneIntClass>) -> () extra(#fn_attr) loc(#loc175)
          cir.store %18, %14 : !cir.ptr<!ty_OneIntClass>, !cir.ptr<!cir.ptr<!ty_OneIntClass>> loc(#loc414)
          %19 = cir.const #cir.int<5> : !s32i loc(#loc178)
          %20 = cir.load %14 : !cir.ptr<!cir.ptr<!ty_OneIntClass>>, !cir.ptr<!ty_OneIntClass> loc(#loc179)
          %21 = cir.get_member %20[0] {name = "intOne"} : !cir.ptr<!ty_OneIntClass> -> !cir.ptr<!s32i> loc(#loc124)
          cir.store %19, %21 : !s32i, !cir.ptr<!s32i> loc(#loc416)
          %22 = cir.load %14 : !cir.ptr<!cir.ptr<!ty_OneIntClass>>, !cir.ptr<!ty_OneIntClass> loc(#loc180)
          %23 = cir.get_member %22[0] {name = "intOne"} : !cir.ptr<!ty_OneIntClass> -> !cir.ptr<!s32i> loc(#loc124)
          %24 = cir.load %23 : !cir.ptr<!s32i>, !s32i loc(#loc181)
          cir.call @printIntLine(%24) : (!s32i) -> () loc(#loc182)
          %25 = cir.get_global @free : !cir.ptr<!cir.func<!void (!cir.ptr<!void>)>> loc(#loc183)
          %26 = cir.load %0 : !cir.ptr<!cir.ptr<!s8i>>, !cir.ptr<!s8i> loc(#loc184)
          %27 = cir.cast(bitcast, %26 : !cir.ptr<!s8i>), !cir.ptr<!void> loc(#loc184)
          cir.call @free(%27) : (!cir.ptr<!void>) -> () extra(#fn_attr) loc(#loc183)
        } loc(#loc413)
      } loc(#loc412)
    } loc(#loc410)
    cir.return loc(#loc131)
  } loc(#loc392)
  cir.func internal private @_ZN51CWE122_Heap_Based_Buffer_Overflow__placement_new_03L8goodG2B1Ev() extra(#fn_attr2) {
    %0 = cir.alloca !cir.ptr<!s8i>, !cir.ptr<!cir.ptr<!s8i>>, ["data"] {alignment = 8 : i64} loc(#loc418)
    %1 = cir.alloca !cir.ptr<!s8i>, !cir.ptr<!cir.ptr<!s8i>>, ["dataBadBuffer", init] {alignment = 8 : i64} loc(#loc419)
    %2 = cir.alloca !cir.ptr<!s8i>, !cir.ptr<!cir.ptr<!s8i>>, ["dataGoodBuffer", init] {alignment = 8 : i64} loc(#loc420)
    %3 = cir.get_global @malloc : !cir.ptr<!cir.func<!cir.ptr<!void> (!u64i)>> loc(#loc193)
    %4 = cir.const #cir.int<4> : !u64i loc(#loc421)
    %5 = cir.call @malloc(%4) : (!u64i) -> !cir.ptr<!void> extra(#fn_attr) loc(#loc193)
    %6 = cir.cast(bitcast, %5 : !cir.ptr<!void>), !cir.ptr<!s8i> loc(#loc422)
    cir.store %6, %1 : !cir.ptr<!s8i>, !cir.ptr<!cir.ptr<!s8i>> loc(#loc419)
    cir.scope {
      %11 = cir.load %1 : !cir.ptr<!cir.ptr<!s8i>>, !cir.ptr<!s8i> loc(#loc198)
      %12 = cir.const #cir.ptr<null> : !cir.ptr<!s8i> loc(#loc199)
      %13 = cir.cmp(eq, %11, %12) : !cir.ptr<!s8i>, !cir.bool loc(#loc424)
      cir.if %13 {
        %14 = cir.get_global @exit : !cir.ptr<!cir.func<!void (!s32i)>> loc(#loc201)
        %15 = cir.const #cir.int<1> : !s32i loc(#loc202)
        %16 = cir.unary(minus, %15) : !s32i, !s32i loc(#loc203)
        cir.call @exit(%16) : (!s32i) -> () extra(#fn_attr) loc(#loc201)
      } loc(#loc425)
    } loc(#loc423)
    %7 = cir.get_global @malloc : !cir.ptr<!cir.func<!cir.ptr<!void> (!u64i)>> loc(#loc204)
    %8 = cir.const #cir.int<8> : !u64i loc(#loc426)
    %9 = cir.call @malloc(%8) : (!u64i) -> !cir.ptr<!void> extra(#fn_attr) loc(#loc204)
    %10 = cir.cast(bitcast, %9 : !cir.ptr<!void>), !cir.ptr<!s8i> loc(#loc427)
    cir.store %10, %2 : !cir.ptr<!s8i>, !cir.ptr<!cir.ptr<!s8i>> loc(#loc420)
    cir.scope {
      %11 = cir.load %2 : !cir.ptr<!cir.ptr<!s8i>>, !cir.ptr<!s8i> loc(#loc209)
      %12 = cir.const #cir.ptr<null> : !cir.ptr<!s8i> loc(#loc210)
      %13 = cir.cmp(eq, %11, %12) : !cir.ptr<!s8i>, !cir.bool loc(#loc429)
      cir.if %13 {
        %14 = cir.get_global @exit : !cir.ptr<!cir.func<!void (!s32i)>> loc(#loc212)
        %15 = cir.const #cir.int<1> : !s32i loc(#loc213)
        %16 = cir.unary(minus, %15) : !s32i, !s32i loc(#loc214)
        cir.call @exit(%16) : (!s32i) -> () extra(#fn_attr) loc(#loc212)
      } loc(#loc430)
    } loc(#loc428)
    cir.scope {
      %11 = cir.const #cir.int<5> : !s32i loc(#loc217)
      %12 = cir.const #cir.int<5> : !s32i loc(#loc218)
      %13 = cir.cmp(ne, %11, %12) : !s32i, !cir.bool loc(#loc432)
      cir.if %13 {
        %14 = cir.get_global @".str.4" : !cir.ptr<!cir.array<!s8i x 21>> loc(#loc222)
        %15 = cir.cast(array_to_ptrdecay, %14 : !cir.ptr<!cir.array<!s8i x 21>>), !cir.ptr<!s8i> loc(#loc222)
        cir.call @printLine(%15) : (!cir.ptr<!s8i>) -> () loc(#loc223)
      } else {
        %14 = cir.load %2 : !cir.ptr<!cir.ptr<!s8i>>, !cir.ptr<!s8i> loc(#loc224)
        cir.store %14, %0 : !cir.ptr<!s8i>, !cir.ptr<!cir.ptr<!s8i>> loc(#loc434)
      } loc(#loc433)
    } loc(#loc431)
    cir.scope {
      %11 = cir.const #cir.int<5> : !s32i loc(#loc228)
      %12 = cir.const #cir.int<5> : !s32i loc(#loc229)
      %13 = cir.cmp(eq, %11, %12) : !s32i, !cir.bool loc(#loc436)
      cir.if %13 {
        cir.scope {
          %14 = cir.alloca !cir.ptr<!ty_TwoIntsClass>, !cir.ptr<!cir.ptr<!ty_TwoIntsClass>>, ["classTwo", init] {alignment = 8 : i64} loc(#loc439)
          %15 = cir.const #cir.int<8> : !u64i loc(#loc440)
          %16 = cir.load %0 : !cir.ptr<!cir.ptr<!s8i>>, !cir.ptr<!s8i> loc(#loc236)
          %17 = cir.cast(bitcast, %16 : !cir.ptr<!s8i>), !cir.ptr<!void> loc(#loc236)
          %18 = cir.cast(bitcast, %17 : !cir.ptr<!void>), !cir.ptr<!ty_TwoIntsClass> loc(#loc440)
          cir.call @_ZN12TwoIntsClassC2Ev(%18) : (!cir.ptr<!ty_TwoIntsClass>) -> () extra(#fn_attr) loc(#loc234)
          cir.store %18, %14 : !cir.ptr<!ty_TwoIntsClass>, !cir.ptr<!cir.ptr<!ty_TwoIntsClass>> loc(#loc439)
          %19 = cir.const #cir.int<5> : !s32i loc(#loc237)
          %20 = cir.load %14 : !cir.ptr<!cir.ptr<!ty_TwoIntsClass>>, !cir.ptr<!ty_TwoIntsClass> loc(#loc238)
          %21 = cir.get_member %20[0] {name = "intOne"} : !cir.ptr<!ty_TwoIntsClass> -> !cir.ptr<!s32i> loc(#loc60)
          cir.store %19, %21 : !s32i, !cir.ptr<!s32i> loc(#loc441)
          %22 = cir.const #cir.int<10> : !s32i loc(#loc239)
          %23 = cir.load %14 : !cir.ptr<!cir.ptr<!ty_TwoIntsClass>>, !cir.ptr<!ty_TwoIntsClass> loc(#loc240)
          %24 = cir.get_member %23[1] {name = "intTwo"} : !cir.ptr<!ty_TwoIntsClass> -> !cir.ptr<!s32i> loc(#loc63)
          cir.store %22, %24 : !s32i, !cir.ptr<!s32i> loc(#loc442)
          %25 = cir.load %14 : !cir.ptr<!cir.ptr<!ty_TwoIntsClass>>, !cir.ptr<!ty_TwoIntsClass> loc(#loc241)
          %26 = cir.get_member %25[0] {name = "intOne"} : !cir.ptr<!ty_TwoIntsClass> -> !cir.ptr<!s32i> loc(#loc60)
          %27 = cir.load %26 : !cir.ptr<!s32i>, !s32i loc(#loc242)
          cir.call @printIntLine(%27) : (!s32i) -> () loc(#loc243)
          %28 = cir.get_global @free : !cir.ptr<!cir.func<!void (!cir.ptr<!void>)>> loc(#loc244)
          %29 = cir.load %0 : !cir.ptr<!cir.ptr<!s8i>>, !cir.ptr<!s8i> loc(#loc245)
          %30 = cir.cast(bitcast, %29 : !cir.ptr<!s8i>), !cir.ptr<!void> loc(#loc245)
          cir.call @free(%30) : (!cir.ptr<!void>) -> () extra(#fn_attr) loc(#loc244)
        } loc(#loc438)
      } loc(#loc437)
    } loc(#loc435)
    cir.return loc(#loc186)
  } loc(#loc417)
  cir.func internal private @_ZN51CWE122_Heap_Based_Buffer_Overflow__placement_new_03L8goodG2B2Ev() extra(#fn_attr2) {
    %0 = cir.alloca !cir.ptr<!s8i>, !cir.ptr<!cir.ptr<!s8i>>, ["data"] {alignment = 8 : i64} loc(#loc444)
    %1 = cir.alloca !cir.ptr<!s8i>, !cir.ptr<!cir.ptr<!s8i>>, ["dataBadBuffer", init] {alignment = 8 : i64} loc(#loc445)
    %2 = cir.alloca !cir.ptr<!s8i>, !cir.ptr<!cir.ptr<!s8i>>, ["dataGoodBuffer", init] {alignment = 8 : i64} loc(#loc446)
    %3 = cir.get_global @malloc : !cir.ptr<!cir.func<!cir.ptr<!void> (!u64i)>> loc(#loc254)
    %4 = cir.const #cir.int<4> : !u64i loc(#loc447)
    %5 = cir.call @malloc(%4) : (!u64i) -> !cir.ptr<!void> extra(#fn_attr) loc(#loc254)
    %6 = cir.cast(bitcast, %5 : !cir.ptr<!void>), !cir.ptr<!s8i> loc(#loc448)
    cir.store %6, %1 : !cir.ptr<!s8i>, !cir.ptr<!cir.ptr<!s8i>> loc(#loc445)
    cir.scope {
      %11 = cir.load %1 : !cir.ptr<!cir.ptr<!s8i>>, !cir.ptr<!s8i> loc(#loc259)
      %12 = cir.const #cir.ptr<null> : !cir.ptr<!s8i> loc(#loc260)
      %13 = cir.cmp(eq, %11, %12) : !cir.ptr<!s8i>, !cir.bool loc(#loc450)
      cir.if %13 {
        %14 = cir.get_global @exit : !cir.ptr<!cir.func<!void (!s32i)>> loc(#loc262)
        %15 = cir.const #cir.int<1> : !s32i loc(#loc263)
        %16 = cir.unary(minus, %15) : !s32i, !s32i loc(#loc264)
        cir.call @exit(%16) : (!s32i) -> () extra(#fn_attr) loc(#loc262)
      } loc(#loc451)
    } loc(#loc449)
    %7 = cir.get_global @malloc : !cir.ptr<!cir.func<!cir.ptr<!void> (!u64i)>> loc(#loc265)
    %8 = cir.const #cir.int<8> : !u64i loc(#loc452)
    %9 = cir.call @malloc(%8) : (!u64i) -> !cir.ptr<!void> extra(#fn_attr) loc(#loc265)
    %10 = cir.cast(bitcast, %9 : !cir.ptr<!void>), !cir.ptr<!s8i> loc(#loc453)
    cir.store %10, %2 : !cir.ptr<!s8i>, !cir.ptr<!cir.ptr<!s8i>> loc(#loc446)
    cir.scope {
      %11 = cir.load %2 : !cir.ptr<!cir.ptr<!s8i>>, !cir.ptr<!s8i> loc(#loc270)
      %12 = cir.const #cir.ptr<null> : !cir.ptr<!s8i> loc(#loc271)
      %13 = cir.cmp(eq, %11, %12) : !cir.ptr<!s8i>, !cir.bool loc(#loc455)
      cir.if %13 {
        %14 = cir.get_global @exit : !cir.ptr<!cir.func<!void (!s32i)>> loc(#loc273)
        %15 = cir.const #cir.int<1> : !s32i loc(#loc274)
        %16 = cir.unary(minus, %15) : !s32i, !s32i loc(#loc275)
        cir.call @exit(%16) : (!s32i) -> () extra(#fn_attr) loc(#loc273)
      } loc(#loc456)
    } loc(#loc454)
    cir.scope {
      %11 = cir.const #cir.int<5> : !s32i loc(#loc278)
      %12 = cir.const #cir.int<5> : !s32i loc(#loc279)
      %13 = cir.cmp(eq, %11, %12) : !s32i, !cir.bool loc(#loc458)
      cir.if %13 {
        %14 = cir.load %2 : !cir.ptr<!cir.ptr<!s8i>>, !cir.ptr<!s8i> loc(#loc281)
        cir.store %14, %0 : !cir.ptr<!s8i>, !cir.ptr<!cir.ptr<!s8i>> loc(#loc460)
      } loc(#loc459)
    } loc(#loc457)
    cir.scope {
      %11 = cir.const #cir.int<5> : !s32i loc(#loc285)
      %12 = cir.const #cir.int<5> : !s32i loc(#loc286)
      %13 = cir.cmp(eq, %11, %12) : !s32i, !cir.bool loc(#loc462)
      cir.if %13 {
        cir.scope {
          %14 = cir.alloca !cir.ptr<!ty_TwoIntsClass>, !cir.ptr<!cir.ptr<!ty_TwoIntsClass>>, ["classTwo", init] {alignment = 8 : i64} loc(#loc465)
          %15 = cir.const #cir.int<8> : !u64i loc(#loc466)
          %16 = cir.load %0 : !cir.ptr<!cir.ptr<!s8i>>, !cir.ptr<!s8i> loc(#loc293)
          %17 = cir.cast(bitcast, %16 : !cir.ptr<!s8i>), !cir.ptr<!void> loc(#loc293)
          %18 = cir.cast(bitcast, %17 : !cir.ptr<!void>), !cir.ptr<!ty_TwoIntsClass> loc(#loc466)
          cir.call @_ZN12TwoIntsClassC2Ev(%18) : (!cir.ptr<!ty_TwoIntsClass>) -> () extra(#fn_attr) loc(#loc291)
          cir.store %18, %14 : !cir.ptr<!ty_TwoIntsClass>, !cir.ptr<!cir.ptr<!ty_TwoIntsClass>> loc(#loc465)
          %19 = cir.const #cir.int<5> : !s32i loc(#loc294)
          %20 = cir.load %14 : !cir.ptr<!cir.ptr<!ty_TwoIntsClass>>, !cir.ptr<!ty_TwoIntsClass> loc(#loc295)
          %21 = cir.get_member %20[0] {name = "intOne"} : !cir.ptr<!ty_TwoIntsClass> -> !cir.ptr<!s32i> loc(#loc60)
          cir.store %19, %21 : !s32i, !cir.ptr<!s32i> loc(#loc467)
          %22 = cir.const #cir.int<10> : !s32i loc(#loc296)
          %23 = cir.load %14 : !cir.ptr<!cir.ptr<!ty_TwoIntsClass>>, !cir.ptr<!ty_TwoIntsClass> loc(#loc297)
          %24 = cir.get_member %23[1] {name = "intTwo"} : !cir.ptr<!ty_TwoIntsClass> -> !cir.ptr<!s32i> loc(#loc63)
          cir.store %22, %24 : !s32i, !cir.ptr<!s32i> loc(#loc468)
          %25 = cir.load %14 : !cir.ptr<!cir.ptr<!ty_TwoIntsClass>>, !cir.ptr<!ty_TwoIntsClass> loc(#loc298)
          %26 = cir.get_member %25[0] {name = "intOne"} : !cir.ptr<!ty_TwoIntsClass> -> !cir.ptr<!s32i> loc(#loc60)
          %27 = cir.load %26 : !cir.ptr<!s32i>, !s32i loc(#loc299)
          cir.call @printIntLine(%27) : (!s32i) -> () loc(#loc300)
          %28 = cir.get_global @free : !cir.ptr<!cir.func<!void (!cir.ptr<!void>)>> loc(#loc301)
          %29 = cir.load %0 : !cir.ptr<!cir.ptr<!s8i>>, !cir.ptr<!s8i> loc(#loc302)
          %30 = cir.cast(bitcast, %29 : !cir.ptr<!s8i>), !cir.ptr<!void> loc(#loc302)
          cir.call @free(%30) : (!cir.ptr<!void>) -> () extra(#fn_attr) loc(#loc301)
        } loc(#loc464)
      } loc(#loc463)
    } loc(#loc461)
    cir.return loc(#loc247)
  } loc(#loc443)
  cir.func @_ZN51CWE122_Heap_Based_Buffer_Overflow__placement_new_034goodEv() extra(#fn_attr2) {
    cir.call @_ZN51CWE122_Heap_Based_Buffer_Overflow__placement_new_03L8goodB2G1Ev() : () -> () loc(#loc305)
    cir.call @_ZN51CWE122_Heap_Based_Buffer_Overflow__placement_new_03L8goodB2G2Ev() : () -> () loc(#loc306)
    cir.call @_ZN51CWE122_Heap_Based_Buffer_Overflow__placement_new_03L8goodG2B1Ev() : () -> () loc(#loc307)
    cir.call @_ZN51CWE122_Heap_Based_Buffer_Overflow__placement_new_03L8goodG2B2Ev() : () -> () loc(#loc308)
    cir.return loc(#loc304)
  } loc(#loc469)
  cir.func private @srand(!u32i) extra(#fn_attr) loc(#loc470)
  cir.func private @time(!cir.ptr<!s64i>) -> !s64i extra(#fn_attr) loc(#loc471)
  cir.func private @printLine(!cir.ptr<!s8i>) loc(#loc472)
  cir.global "private" constant cir_private dsolocal @".str" = #cir.const_array<"Calling good()...\00" : !cir.array<!s8i x 18>> : !cir.array<!s8i x 18> {alignment = 1 : i64} loc(#loc315)
  cir.global "private" constant cir_private dsolocal @".str.1" = #cir.const_array<"Finished good()\00" : !cir.array<!s8i x 16>> : !cir.array<!s8i x 16> {alignment = 1 : i64} loc(#loc316)
  cir.global "private" constant cir_private dsolocal @".str.2" = #cir.const_array<"Calling bad()...\00" : !cir.array<!s8i x 17>> : !cir.array<!s8i x 17> {alignment = 1 : i64} loc(#loc317)
  cir.global "private" constant cir_private dsolocal @".str.3" = #cir.const_array<"Finished bad()\00" : !cir.array<!s8i x 15>> : !cir.array<!s8i x 15> {alignment = 1 : i64} loc(#loc318)
  cir.func @main(%arg0: !s32i loc(fused[#loc321, #loc322]), %arg1: !cir.ptr<!cir.ptr<!s8i>> loc(fused[#loc323, #loc324])) -> !s32i extra(#fn_attr2) {
    %0 = cir.alloca !s32i, !cir.ptr<!s32i>, ["argc", init] {alignment = 4 : i64} loc(#loc474)
    %1 = cir.alloca !cir.ptr<!cir.ptr<!s8i>>, !cir.ptr<!cir.ptr<!cir.ptr<!s8i>>>, ["argv", init] {alignment = 8 : i64} loc(#loc475)
    %2 = cir.alloca !s32i, !cir.ptr<!s32i>, ["__retval"] {alignment = 4 : i64} loc(#loc320)
    cir.store %arg0, %0 : !s32i, !cir.ptr<!s32i> loc(#loc325)
    cir.store %arg1, %1 : !cir.ptr<!cir.ptr<!s8i>>, !cir.ptr<!cir.ptr<!cir.ptr<!s8i>>> loc(#loc325)
    %3 = cir.const #cir.ptr<null> : !cir.ptr<!s64i> loc(#loc326)
    %4 = cir.call @time(%3) : (!cir.ptr<!s64i>) -> !s64i extra(#fn_attr) loc(#loc327)
    %5 = cir.cast(integral, %4 : !s64i), !u32i loc(#loc327)
    cir.call @srand(%5) : (!u32i) -> () extra(#fn_attr) loc(#loc328)
    %6 = cir.get_global @".str" : !cir.ptr<!cir.array<!s8i x 18>> loc(#loc315)
    %7 = cir.cast(array_to_ptrdecay, %6 : !cir.ptr<!cir.array<!s8i x 18>>), !cir.ptr<!s8i> loc(#loc315)
    cir.call @printLine(%7) : (!cir.ptr<!s8i>) -> () loc(#loc329)
    cir.call @_ZN51CWE122_Heap_Based_Buffer_Overflow__placement_new_034goodEv() : () -> () loc(#loc330)
    %8 = cir.get_global @".str.1" : !cir.ptr<!cir.array<!s8i x 16>> loc(#loc316)
    %9 = cir.cast(array_to_ptrdecay, %8 : !cir.ptr<!cir.array<!s8i x 16>>), !cir.ptr<!s8i> loc(#loc316)
    cir.call @printLine(%9) : (!cir.ptr<!s8i>) -> () loc(#loc331)
    %10 = cir.get_global @".str.2" : !cir.ptr<!cir.array<!s8i x 17>> loc(#loc317)
    %11 = cir.cast(array_to_ptrdecay, %10 : !cir.ptr<!cir.array<!s8i x 17>>), !cir.ptr<!s8i> loc(#loc317)
    cir.call @printLine(%11) : (!cir.ptr<!s8i>) -> () loc(#loc332)
    cir.call @_ZN51CWE122_Heap_Based_Buffer_Overflow__placement_new_033badEv() : () -> () loc(#loc333)
    %12 = cir.get_global @".str.3" : !cir.ptr<!cir.array<!s8i x 15>> loc(#loc318)
    %13 = cir.cast(array_to_ptrdecay, %12 : !cir.ptr<!cir.array<!s8i x 15>>), !cir.ptr<!s8i> loc(#loc318)
    cir.call @printLine(%13) : (!cir.ptr<!s8i>) -> () loc(#loc334)
    %14 = cir.const #cir.int<0> : !s32i loc(#loc335)
    cir.store %14, %2 : !s32i, !cir.ptr<!s32i> loc(#loc476)
    %15 = cir.load %2 : !cir.ptr<!s32i>, !s32i loc(#loc476)
    cir.return %15 : !s32i loc(#loc476)
  } loc(#loc473)
} loc(#loc)
#loc = loc("/home/ladisgin/git_proj/juliet-c/testcases/CWE122_Heap_Based_Buffer_Overflow/s11/CWE122_Heap_Based_Buffer_Overflow__placement_new_03.cpp":0:0)
#loc1 = loc("/usr/include/stdlib.h":672:1)
#loc2 = loc("/usr/include/stdlib.h":672:45)
#loc3 = loc("/usr/include/stdlib.h":756:1)
#loc4 = loc("/usr/include/stdlib.h":756:70)
#loc6 = loc("../../../testcasesupport/std_testcase_io.h":18:1)
#loc7 = loc("../../../testcasesupport/std_testcase_io.h":18:33)
#loc8 = loc("/usr/include/stdlib.h":687:1)
#loc9 = loc("/usr/include/stdlib.h":687:32)
#loc10 = loc("CWE122_Heap_Based_Buffer_Overflow__placement_new_03.cpp":25:1)
#loc11 = loc("CWE122_Heap_Based_Buffer_Overflow__placement_new_03.cpp":54:1)
#loc12 = loc("CWE122_Heap_Based_Buffer_Overflow__placement_new_03.cpp":27:5)
#loc13 = loc("CWE122_Heap_Based_Buffer_Overflow__placement_new_03.cpp":27:12)
#loc14 = loc("CWE122_Heap_Based_Buffer_Overflow__placement_new_03.cpp":28:5)
#loc15 = loc("CWE122_Heap_Based_Buffer_Overflow__placement_new_03.cpp":28:62)
#loc16 = loc("CWE122_Heap_Based_Buffer_Overflow__placement_new_03.cpp":30:5)
#loc17 = loc("CWE122_Heap_Based_Buffer_Overflow__placement_new_03.cpp":30:64)
#loc18 = loc("CWE122_Heap_Based_Buffer_Overflow__placement_new_03.cpp":28:36)
#loc19 = loc("CWE122_Heap_Based_Buffer_Overflow__placement_new_03.cpp":28:43)
#loc20 = loc("CWE122_Heap_Based_Buffer_Overflow__placement_new_03.cpp":28:61)
#loc21 = loc("CWE122_Heap_Based_Buffer_Overflow__placement_new_03.cpp":29:5)
#loc22 = loc("CWE122_Heap_Based_Buffer_Overflow__placement_new_03.cpp":29:42)
#loc23 = loc("CWE122_Heap_Based_Buffer_Overflow__placement_new_03.cpp":29:9)
#loc24 = loc("CWE122_Heap_Based_Buffer_Overflow__placement_new_03.cpp":29:26)
#loc25 = loc("CWE122_Heap_Based_Buffer_Overflow__placement_new_03.cpp":29:32)
#loc26 = loc("CWE122_Heap_Based_Buffer_Overflow__placement_new_03.cpp":29:33)
#loc27 = loc("CWE122_Heap_Based_Buffer_Overflow__placement_new_03.cpp":29:39)
#loc28 = loc("CWE122_Heap_Based_Buffer_Overflow__placement_new_03.cpp":29:38)
#loc29 = loc("CWE122_Heap_Based_Buffer_Overflow__placement_new_03.cpp":30:37)
#loc30 = loc("CWE122_Heap_Based_Buffer_Overflow__placement_new_03.cpp":30:44)
#loc31 = loc("CWE122_Heap_Based_Buffer_Overflow__placement_new_03.cpp":30:63)
#loc32 = loc("CWE122_Heap_Based_Buffer_Overflow__placement_new_03.cpp":31:5)
#loc33 = loc("CWE122_Heap_Based_Buffer_Overflow__placement_new_03.cpp":31:43)
#loc34 = loc("CWE122_Heap_Based_Buffer_Overflow__placement_new_03.cpp":31:9)
#loc35 = loc("CWE122_Heap_Based_Buffer_Overflow__placement_new_03.cpp":31:27)
#loc36 = loc("CWE122_Heap_Based_Buffer_Overflow__placement_new_03.cpp":31:33)
#loc37 = loc("CWE122_Heap_Based_Buffer_Overflow__placement_new_03.cpp":31:34)
#loc38 = loc("CWE122_Heap_Based_Buffer_Overflow__placement_new_03.cpp":31:40)
#loc39 = loc("CWE122_Heap_Based_Buffer_Overflow__placement_new_03.cpp":31:39)
#loc40 = loc("CWE122_Heap_Based_Buffer_Overflow__placement_new_03.cpp":32:5)
#loc41 = loc("CWE122_Heap_Based_Buffer_Overflow__placement_new_03.cpp":36:5)
#loc42 = loc("CWE122_Heap_Based_Buffer_Overflow__placement_new_03.cpp":32:8)
#loc43 = loc("CWE122_Heap_Based_Buffer_Overflow__placement_new_03.cpp":32:11)
#loc44 = loc("CWE122_Heap_Based_Buffer_Overflow__placement_new_03.cpp":33:5)
#loc45 = loc("CWE122_Heap_Based_Buffer_Overflow__placement_new_03.cpp":35:16)
#loc46 = loc("CWE122_Heap_Based_Buffer_Overflow__placement_new_03.cpp":35:9)
#loc47 = loc("CWE122_Heap_Based_Buffer_Overflow__placement_new_03.cpp":37:5)
#loc48 = loc("CWE122_Heap_Based_Buffer_Overflow__placement_new_03.cpp":53:5)
#loc49 = loc("CWE122_Heap_Based_Buffer_Overflow__placement_new_03.cpp":37:8)
#loc50 = loc("CWE122_Heap_Based_Buffer_Overflow__placement_new_03.cpp":37:11)
#loc51 = loc("CWE122_Heap_Based_Buffer_Overflow__placement_new_03.cpp":38:5)
#loc52 = loc("CWE122_Heap_Based_Buffer_Overflow__placement_new_03.cpp":39:9)
#loc53 = loc("CWE122_Heap_Based_Buffer_Overflow__placement_new_03.cpp":52:9)
#loc54 = loc("CWE122_Heap_Based_Buffer_Overflow__placement_new_03.cpp":45:13)
#loc55 = loc("CWE122_Heap_Based_Buffer_Overflow__placement_new_03.cpp":45:49)
#loc56 = loc("CWE122_Heap_Based_Buffer_Overflow__placement_new_03.cpp":45:39)
#loc57 = loc("CWE122_Heap_Based_Buffer_Overflow__placement_new_03.cpp":45:43)
#loc58 = loc("CWE122_Heap_Based_Buffer_Overflow__placement_new_03.cpp":47:32)
#loc59 = loc("CWE122_Heap_Based_Buffer_Overflow__placement_new_03.cpp":47:13)
#loc60 = loc("../../../testcasesupport/std_testcase.h":64:13)
#loc61 = loc("CWE122_Heap_Based_Buffer_Overflow__placement_new_03.cpp":48:32)
#loc62 = loc("CWE122_Heap_Based_Buffer_Overflow__placement_new_03.cpp":48:13)
#loc63 = loc("../../../testcasesupport/std_testcase.h":65:13)
#loc64 = loc("CWE122_Heap_Based_Buffer_Overflow__placement_new_03.cpp":49:26)
#loc65 = loc("CWE122_Heap_Based_Buffer_Overflow__placement_new_03.cpp":49:36)
#loc66 = loc("CWE122_Heap_Based_Buffer_Overflow__placement_new_03.cpp":49:13)
#loc67 = loc("CWE122_Heap_Based_Buffer_Overflow__placement_new_03.cpp":51:13)
#loc68 = loc("CWE122_Heap_Based_Buffer_Overflow__placement_new_03.cpp":51:18)
#loc69 = loc("CWE122_Heap_Based_Buffer_Overflow__placement_new_03.cpp":76:19)
#loc71 = loc("CWE122_Heap_Based_Buffer_Overflow__placement_new_03.cpp":61:1)
#loc72 = loc("CWE122_Heap_Based_Buffer_Overflow__placement_new_03.cpp":93:1)
#loc73 = loc("CWE122_Heap_Based_Buffer_Overflow__placement_new_03.cpp":63:5)
#loc74 = loc("CWE122_Heap_Based_Buffer_Overflow__placement_new_03.cpp":63:12)
#loc75 = loc("CWE122_Heap_Based_Buffer_Overflow__placement_new_03.cpp":64:5)
#loc76 = loc("CWE122_Heap_Based_Buffer_Overflow__placement_new_03.cpp":64:62)
#loc77 = loc("CWE122_Heap_Based_Buffer_Overflow__placement_new_03.cpp":66:5)
#loc78 = loc("CWE122_Heap_Based_Buffer_Overflow__placement_new_03.cpp":66:64)
#loc79 = loc("CWE122_Heap_Based_Buffer_Overflow__placement_new_03.cpp":64:36)
#loc80 = loc("CWE122_Heap_Based_Buffer_Overflow__placement_new_03.cpp":64:43)
#loc81 = loc("CWE122_Heap_Based_Buffer_Overflow__placement_new_03.cpp":64:61)
#loc82 = loc("CWE122_Heap_Based_Buffer_Overflow__placement_new_03.cpp":65:5)
#loc83 = loc("CWE122_Heap_Based_Buffer_Overflow__placement_new_03.cpp":65:42)
#loc84 = loc("CWE122_Heap_Based_Buffer_Overflow__placement_new_03.cpp":65:9)
#loc85 = loc("CWE122_Heap_Based_Buffer_Overflow__placement_new_03.cpp":65:26)
#loc86 = loc("CWE122_Heap_Based_Buffer_Overflow__placement_new_03.cpp":65:32)
#loc87 = loc("CWE122_Heap_Based_Buffer_Overflow__placement_new_03.cpp":65:33)
#loc88 = loc("CWE122_Heap_Based_Buffer_Overflow__placement_new_03.cpp":65:39)
#loc89 = loc("CWE122_Heap_Based_Buffer_Overflow__placement_new_03.cpp":65:38)
#loc90 = loc("CWE122_Heap_Based_Buffer_Overflow__placement_new_03.cpp":66:37)
#loc91 = loc("CWE122_Heap_Based_Buffer_Overflow__placement_new_03.cpp":66:44)
#loc92 = loc("CWE122_Heap_Based_Buffer_Overflow__placement_new_03.cpp":66:63)
#loc93 = loc("CWE122_Heap_Based_Buffer_Overflow__placement_new_03.cpp":67:5)
#loc94 = loc("CWE122_Heap_Based_Buffer_Overflow__placement_new_03.cpp":67:43)
#loc95 = loc("CWE122_Heap_Based_Buffer_Overflow__placement_new_03.cpp":67:9)
#loc96 = loc("CWE122_Heap_Based_Buffer_Overflow__placement_new_03.cpp":67:27)
#loc97 = loc("CWE122_Heap_Based_Buffer_Overflow__placement_new_03.cpp":67:33)
#loc98 = loc("CWE122_Heap_Based_Buffer_Overflow__placement_new_03.cpp":67:34)
#loc99 = loc("CWE122_Heap_Based_Buffer_Overflow__placement_new_03.cpp":67:40)
#loc100 = loc("CWE122_Heap_Based_Buffer_Overflow__placement_new_03.cpp":67:39)
#loc101 = loc("CWE122_Heap_Based_Buffer_Overflow__placement_new_03.cpp":68:5)
#loc102 = loc("CWE122_Heap_Based_Buffer_Overflow__placement_new_03.cpp":72:5)
#loc103 = loc("CWE122_Heap_Based_Buffer_Overflow__placement_new_03.cpp":68:8)
#loc104 = loc("CWE122_Heap_Based_Buffer_Overflow__placement_new_03.cpp":68:11)
#loc105 = loc("CWE122_Heap_Based_Buffer_Overflow__placement_new_03.cpp":69:5)
#loc106 = loc("CWE122_Heap_Based_Buffer_Overflow__placement_new_03.cpp":71:16)
#loc107 = loc("CWE122_Heap_Based_Buffer_Overflow__placement_new_03.cpp":71:9)
#loc108 = loc("CWE122_Heap_Based_Buffer_Overflow__placement_new_03.cpp":73:5)
#loc109 = loc("CWE122_Heap_Based_Buffer_Overflow__placement_new_03.cpp":92:5)
#loc110 = loc("CWE122_Heap_Based_Buffer_Overflow__placement_new_03.cpp":73:8)
#loc111 = loc("CWE122_Heap_Based_Buffer_Overflow__placement_new_03.cpp":73:11)
#loc112 = loc("CWE122_Heap_Based_Buffer_Overflow__placement_new_03.cpp":74:5)
#loc113 = loc("CWE122_Heap_Based_Buffer_Overflow__placement_new_03.cpp":77:5)
#loc114 = loc("CWE122_Heap_Based_Buffer_Overflow__placement_new_03.cpp":79:5)
#loc115 = loc("CWE122_Heap_Based_Buffer_Overflow__placement_new_03.cpp":76:9)
#loc116 = loc("CWE122_Heap_Based_Buffer_Overflow__placement_new_03.cpp":80:9)
#loc117 = loc("CWE122_Heap_Based_Buffer_Overflow__placement_new_03.cpp":91:9)
#loc118 = loc("CWE122_Heap_Based_Buffer_Overflow__placement_new_03.cpp":86:13)
#loc119 = loc("CWE122_Heap_Based_Buffer_Overflow__placement_new_03.cpp":86:48)
#loc120 = loc("CWE122_Heap_Based_Buffer_Overflow__placement_new_03.cpp":86:38)
#loc121 = loc("CWE122_Heap_Based_Buffer_Overflow__placement_new_03.cpp":86:42)
#loc122 = loc("CWE122_Heap_Based_Buffer_Overflow__placement_new_03.cpp":88:32)
#loc123 = loc("CWE122_Heap_Based_Buffer_Overflow__placement_new_03.cpp":88:13)
#loc124 = loc("../../../testcasesupport/std_testcase.h":71:13)
#loc125 = loc("CWE122_Heap_Based_Buffer_Overflow__placement_new_03.cpp":89:26)
#loc126 = loc("CWE122_Heap_Based_Buffer_Overflow__placement_new_03.cpp":89:36)
#loc127 = loc("CWE122_Heap_Based_Buffer_Overflow__placement_new_03.cpp":89:13)
#loc128 = loc("CWE122_Heap_Based_Buffer_Overflow__placement_new_03.cpp":90:13)
#loc129 = loc("CWE122_Heap_Based_Buffer_Overflow__placement_new_03.cpp":90:18)
#loc130 = loc("CWE122_Heap_Based_Buffer_Overflow__placement_new_03.cpp":96:1)
#loc131 = loc("CWE122_Heap_Based_Buffer_Overflow__placement_new_03.cpp":123:1)
#loc132 = loc("CWE122_Heap_Based_Buffer_Overflow__placement_new_03.cpp":98:5)
#loc133 = loc("CWE122_Heap_Based_Buffer_Overflow__placement_new_03.cpp":98:12)
#loc134 = loc("CWE122_Heap_Based_Buffer_Overflow__placement_new_03.cpp":99:5)
#loc135 = loc("CWE122_Heap_Based_Buffer_Overflow__placement_new_03.cpp":99:62)
#loc136 = loc("CWE122_Heap_Based_Buffer_Overflow__placement_new_03.cpp":101:5)
#loc137 = loc("CWE122_Heap_Based_Buffer_Overflow__placement_new_03.cpp":101:64)
#loc138 = loc("CWE122_Heap_Based_Buffer_Overflow__placement_new_03.cpp":99:36)
#loc139 = loc("CWE122_Heap_Based_Buffer_Overflow__placement_new_03.cpp":99:43)
#loc140 = loc("CWE122_Heap_Based_Buffer_Overflow__placement_new_03.cpp":99:61)
#loc141 = loc("CWE122_Heap_Based_Buffer_Overflow__placement_new_03.cpp":100:5)
#loc142 = loc("CWE122_Heap_Based_Buffer_Overflow__placement_new_03.cpp":100:42)
#loc143 = loc("CWE122_Heap_Based_Buffer_Overflow__placement_new_03.cpp":100:9)
#loc144 = loc("CWE122_Heap_Based_Buffer_Overflow__placement_new_03.cpp":100:26)
#loc145 = loc("CWE122_Heap_Based_Buffer_Overflow__placement_new_03.cpp":100:32)
#loc146 = loc("CWE122_Heap_Based_Buffer_Overflow__placement_new_03.cpp":100:33)
#loc147 = loc("CWE122_Heap_Based_Buffer_Overflow__placement_new_03.cpp":100:39)
#loc148 = loc("CWE122_Heap_Based_Buffer_Overflow__placement_new_03.cpp":100:38)
#loc149 = loc("CWE122_Heap_Based_Buffer_Overflow__placement_new_03.cpp":101:37)
#loc150 = loc("CWE122_Heap_Based_Buffer_Overflow__placement_new_03.cpp":101:44)
#loc151 = loc("CWE122_Heap_Based_Buffer_Overflow__placement_new_03.cpp":101:63)
#loc152 = loc("CWE122_Heap_Based_Buffer_Overflow__placement_new_03.cpp":102:5)
#loc153 = loc("CWE122_Heap_Based_Buffer_Overflow__placement_new_03.cpp":102:43)
#loc154 = loc("CWE122_Heap_Based_Buffer_Overflow__placement_new_03.cpp":102:9)
#loc155 = loc("CWE122_Heap_Based_Buffer_Overflow__placement_new_03.cpp":102:27)
#loc156 = loc("CWE122_Heap_Based_Buffer_Overflow__placement_new_03.cpp":102:33)
#loc157 = loc("CWE122_Heap_Based_Buffer_Overflow__placement_new_03.cpp":102:34)
#loc158 = loc("CWE122_Heap_Based_Buffer_Overflow__placement_new_03.cpp":102:40)
#loc159 = loc("CWE122_Heap_Based_Buffer_Overflow__placement_new_03.cpp":102:39)
#loc160 = loc("CWE122_Heap_Based_Buffer_Overflow__placement_new_03.cpp":103:5)
#loc161 = loc("CWE122_Heap_Based_Buffer_Overflow__placement_new_03.cpp":107:5)
#loc162 = loc("CWE122_Heap_Based_Buffer_Overflow__placement_new_03.cpp":103:8)
#loc163 = loc("CWE122_Heap_Based_Buffer_Overflow__placement_new_03.cpp":103:11)
#loc164 = loc("CWE122_Heap_Based_Buffer_Overflow__placement_new_03.cpp":104:5)
#loc165 = loc("CWE122_Heap_Based_Buffer_Overflow__placement_new_03.cpp":106:16)
#loc166 = loc("CWE122_Heap_Based_Buffer_Overflow__placement_new_03.cpp":106:9)
#loc167 = loc("CWE122_Heap_Based_Buffer_Overflow__placement_new_03.cpp":108:5)
#loc168 = loc("CWE122_Heap_Based_Buffer_Overflow__placement_new_03.cpp":122:5)
#loc169 = loc("CWE122_Heap_Based_Buffer_Overflow__placement_new_03.cpp":108:8)
#loc170 = loc("CWE122_Heap_Based_Buffer_Overflow__placement_new_03.cpp":108:11)
#loc171 = loc("CWE122_Heap_Based_Buffer_Overflow__placement_new_03.cpp":109:5)
#loc172 = loc("CWE122_Heap_Based_Buffer_Overflow__placement_new_03.cpp":110:9)
#loc173 = loc("CWE122_Heap_Based_Buffer_Overflow__placement_new_03.cpp":121:9)
#loc174 = loc("CWE122_Heap_Based_Buffer_Overflow__placement_new_03.cpp":116:13)
#loc175 = loc("CWE122_Heap_Based_Buffer_Overflow__placement_new_03.cpp":116:48)
#loc176 = loc("CWE122_Heap_Based_Buffer_Overflow__placement_new_03.cpp":116:38)
#loc177 = loc("CWE122_Heap_Based_Buffer_Overflow__placement_new_03.cpp":116:42)
#loc178 = loc("CWE122_Heap_Based_Buffer_Overflow__placement_new_03.cpp":118:32)
#loc179 = loc("CWE122_Heap_Based_Buffer_Overflow__placement_new_03.cpp":118:13)
#loc180 = loc("CWE122_Heap_Based_Buffer_Overflow__placement_new_03.cpp":119:26)
#loc181 = loc("CWE122_Heap_Based_Buffer_Overflow__placement_new_03.cpp":119:36)
#loc182 = loc("CWE122_Heap_Based_Buffer_Overflow__placement_new_03.cpp":119:13)
#loc183 = loc("CWE122_Heap_Based_Buffer_Overflow__placement_new_03.cpp":120:13)
#loc184 = loc("CWE122_Heap_Based_Buffer_Overflow__placement_new_03.cpp":120:18)
#loc185 = loc("CWE122_Heap_Based_Buffer_Overflow__placement_new_03.cpp":126:1)
#loc186 = loc("CWE122_Heap_Based_Buffer_Overflow__placement_new_03.cpp":160:1)
#loc187 = loc("CWE122_Heap_Based_Buffer_Overflow__placement_new_03.cpp":128:5)
#loc188 = loc("CWE122_Heap_Based_Buffer_Overflow__placement_new_03.cpp":128:12)
#loc189 = loc("CWE122_Heap_Based_Buffer_Overflow__placement_new_03.cpp":129:5)
#loc190 = loc("CWE122_Heap_Based_Buffer_Overflow__placement_new_03.cpp":129:62)
#loc191 = loc("CWE122_Heap_Based_Buffer_Overflow__placement_new_03.cpp":131:5)
#loc192 = loc("CWE122_Heap_Based_Buffer_Overflow__placement_new_03.cpp":131:64)
#loc193 = loc("CWE122_Heap_Based_Buffer_Overflow__placement_new_03.cpp":129:36)
#loc194 = loc("CWE122_Heap_Based_Buffer_Overflow__placement_new_03.cpp":129:43)
#loc195 = loc("CWE122_Heap_Based_Buffer_Overflow__placement_new_03.cpp":129:61)
#loc196 = loc("CWE122_Heap_Based_Buffer_Overflow__placement_new_03.cpp":130:5)
#loc197 = loc("CWE122_Heap_Based_Buffer_Overflow__placement_new_03.cpp":130:42)
#loc198 = loc("CWE122_Heap_Based_Buffer_Overflow__placement_new_03.cpp":130:9)
#loc199 = loc("CWE122_Heap_Based_Buffer_Overflow__placement_new_03.cpp":130:26)
#loc200 = loc("CWE122_Heap_Based_Buffer_Overflow__placement_new_03.cpp":130:32)
#loc201 = loc("CWE122_Heap_Based_Buffer_Overflow__placement_new_03.cpp":130:33)
#loc202 = loc("CWE122_Heap_Based_Buffer_Overflow__placement_new_03.cpp":130:39)
#loc203 = loc("CWE122_Heap_Based_Buffer_Overflow__placement_new_03.cpp":130:38)
#loc204 = loc("CWE122_Heap_Based_Buffer_Overflow__placement_new_03.cpp":131:37)
#loc205 = loc("CWE122_Heap_Based_Buffer_Overflow__placement_new_03.cpp":131:44)
#loc206 = loc("CWE122_Heap_Based_Buffer_Overflow__placement_new_03.cpp":131:63)
#loc207 = loc("CWE122_Heap_Based_Buffer_Overflow__placement_new_03.cpp":132:5)
#loc208 = loc("CWE122_Heap_Based_Buffer_Overflow__placement_new_03.cpp":132:43)
#loc209 = loc("CWE122_Heap_Based_Buffer_Overflow__placement_new_03.cpp":132:9)
#loc210 = loc("CWE122_Heap_Based_Buffer_Overflow__placement_new_03.cpp":132:27)
#loc211 = loc("CWE122_Heap_Based_Buffer_Overflow__placement_new_03.cpp":132:33)
#loc212 = loc("CWE122_Heap_Based_Buffer_Overflow__placement_new_03.cpp":132:34)
#loc213 = loc("CWE122_Heap_Based_Buffer_Overflow__placement_new_03.cpp":132:40)
#loc214 = loc("CWE122_Heap_Based_Buffer_Overflow__placement_new_03.cpp":132:39)
#loc215 = loc("CWE122_Heap_Based_Buffer_Overflow__placement_new_03.cpp":133:5)
#loc216 = loc("CWE122_Heap_Based_Buffer_Overflow__placement_new_03.cpp":142:5)
#loc217 = loc("CWE122_Heap_Based_Buffer_Overflow__placement_new_03.cpp":133:8)
#loc218 = loc("CWE122_Heap_Based_Buffer_Overflow__placement_new_03.cpp":133:11)
#loc219 = loc("CWE122_Heap_Based_Buffer_Overflow__placement_new_03.cpp":134:5)
#loc220 = loc("CWE122_Heap_Based_Buffer_Overflow__placement_new_03.cpp":137:5)
#loc221 = loc("CWE122_Heap_Based_Buffer_Overflow__placement_new_03.cpp":139:5)
#loc222 = loc("CWE122_Heap_Based_Buffer_Overflow__placement_new_03.cpp":136:19)
#loc223 = loc("CWE122_Heap_Based_Buffer_Overflow__placement_new_03.cpp":136:9)
#loc224 = loc("CWE122_Heap_Based_Buffer_Overflow__placement_new_03.cpp":141:16)
#loc225 = loc("CWE122_Heap_Based_Buffer_Overflow__placement_new_03.cpp":141:9)
#loc226 = loc("CWE122_Heap_Based_Buffer_Overflow__placement_new_03.cpp":143:5)
#loc227 = loc("CWE122_Heap_Based_Buffer_Overflow__placement_new_03.cpp":159:5)
#loc228 = loc("CWE122_Heap_Based_Buffer_Overflow__placement_new_03.cpp":143:8)
#loc229 = loc("CWE122_Heap_Based_Buffer_Overflow__placement_new_03.cpp":143:11)
#loc230 = loc("CWE122_Heap_Based_Buffer_Overflow__placement_new_03.cpp":144:5)
#loc231 = loc("CWE122_Heap_Based_Buffer_Overflow__placement_new_03.cpp":145:9)
#loc232 = loc("CWE122_Heap_Based_Buffer_Overflow__placement_new_03.cpp":158:9)
#loc233 = loc("CWE122_Heap_Based_Buffer_Overflow__placement_new_03.cpp":151:13)
#loc234 = loc("CWE122_Heap_Based_Buffer_Overflow__placement_new_03.cpp":151:49)
#loc235 = loc("CWE122_Heap_Based_Buffer_Overflow__placement_new_03.cpp":151:39)
#loc236 = loc("CWE122_Heap_Based_Buffer_Overflow__placement_new_03.cpp":151:43)
#loc237 = loc("CWE122_Heap_Based_Buffer_Overflow__placement_new_03.cpp":153:32)
#loc238 = loc("CWE122_Heap_Based_Buffer_Overflow__placement_new_03.cpp":153:13)
#loc239 = loc("CWE122_Heap_Based_Buffer_Overflow__placement_new_03.cpp":154:32)
#loc240 = loc("CWE122_Heap_Based_Buffer_Overflow__placement_new_03.cpp":154:13)
#loc241 = loc("CWE122_Heap_Based_Buffer_Overflow__placement_new_03.cpp":155:26)
#loc242 = loc("CWE122_Heap_Based_Buffer_Overflow__placement_new_03.cpp":155:36)
#loc243 = loc("CWE122_Heap_Based_Buffer_Overflow__placement_new_03.cpp":155:13)
#loc244 = loc("CWE122_Heap_Based_Buffer_Overflow__placement_new_03.cpp":157:13)
#loc245 = loc("CWE122_Heap_Based_Buffer_Overflow__placement_new_03.cpp":157:18)
#loc246 = loc("CWE122_Heap_Based_Buffer_Overflow__placement_new_03.cpp":163:1)
#loc247 = loc("CWE122_Heap_Based_Buffer_Overflow__placement_new_03.cpp":192:1)
#loc248 = loc("CWE122_Heap_Based_Buffer_Overflow__placement_new_03.cpp":165:5)
#loc249 = loc("CWE122_Heap_Based_Buffer_Overflow__placement_new_03.cpp":165:12)
#loc250 = loc("CWE122_Heap_Based_Buffer_Overflow__placement_new_03.cpp":166:5)
#loc251 = loc("CWE122_Heap_Based_Buffer_Overflow__placement_new_03.cpp":166:62)
#loc252 = loc("CWE122_Heap_Based_Buffer_Overflow__placement_new_03.cpp":168:5)
#loc253 = loc("CWE122_Heap_Based_Buffer_Overflow__placement_new_03.cpp":168:64)
#loc254 = loc("CWE122_Heap_Based_Buffer_Overflow__placement_new_03.cpp":166:36)
#loc255 = loc("CWE122_Heap_Based_Buffer_Overflow__placement_new_03.cpp":166:43)
#loc256 = loc("CWE122_Heap_Based_Buffer_Overflow__placement_new_03.cpp":166:61)
#loc257 = loc("CWE122_Heap_Based_Buffer_Overflow__placement_new_03.cpp":167:5)
#loc258 = loc("CWE122_Heap_Based_Buffer_Overflow__placement_new_03.cpp":167:42)
#loc259 = loc("CWE122_Heap_Based_Buffer_Overflow__placement_new_03.cpp":167:9)
#loc260 = loc("CWE122_Heap_Based_Buffer_Overflow__placement_new_03.cpp":167:26)
#loc261 = loc("CWE122_Heap_Based_Buffer_Overflow__placement_new_03.cpp":167:32)
#loc262 = loc("CWE122_Heap_Based_Buffer_Overflow__placement_new_03.cpp":167:33)
#loc263 = loc("CWE122_Heap_Based_Buffer_Overflow__placement_new_03.cpp":167:39)
#loc264 = loc("CWE122_Heap_Based_Buffer_Overflow__placement_new_03.cpp":167:38)
#loc265 = loc("CWE122_Heap_Based_Buffer_Overflow__placement_new_03.cpp":168:37)
#loc266 = loc("CWE122_Heap_Based_Buffer_Overflow__placement_new_03.cpp":168:44)
#loc267 = loc("CWE122_Heap_Based_Buffer_Overflow__placement_new_03.cpp":168:63)
#loc268 = loc("CWE122_Heap_Based_Buffer_Overflow__placement_new_03.cpp":169:5)
#loc269 = loc("CWE122_Heap_Based_Buffer_Overflow__placement_new_03.cpp":169:43)
#loc270 = loc("CWE122_Heap_Based_Buffer_Overflow__placement_new_03.cpp":169:9)
#loc271 = loc("CWE122_Heap_Based_Buffer_Overflow__placement_new_03.cpp":169:27)
#loc272 = loc("CWE122_Heap_Based_Buffer_Overflow__placement_new_03.cpp":169:33)
#loc273 = loc("CWE122_Heap_Based_Buffer_Overflow__placement_new_03.cpp":169:34)
#loc274 = loc("CWE122_Heap_Based_Buffer_Overflow__placement_new_03.cpp":169:40)
#loc275 = loc("CWE122_Heap_Based_Buffer_Overflow__placement_new_03.cpp":169:39)
#loc276 = loc("CWE122_Heap_Based_Buffer_Overflow__placement_new_03.cpp":170:5)
#loc277 = loc("CWE122_Heap_Based_Buffer_Overflow__placement_new_03.cpp":174:5)
#loc278 = loc("CWE122_Heap_Based_Buffer_Overflow__placement_new_03.cpp":170:8)
#loc279 = loc("CWE122_Heap_Based_Buffer_Overflow__placement_new_03.cpp":170:11)
#loc280 = loc("CWE122_Heap_Based_Buffer_Overflow__placement_new_03.cpp":171:5)
#loc281 = loc("CWE122_Heap_Based_Buffer_Overflow__placement_new_03.cpp":173:16)
#loc282 = loc("CWE122_Heap_Based_Buffer_Overflow__placement_new_03.cpp":173:9)
#loc283 = loc("CWE122_Heap_Based_Buffer_Overflow__placement_new_03.cpp":175:5)
#loc284 = loc("CWE122_Heap_Based_Buffer_Overflow__placement_new_03.cpp":191:5)
#loc285 = loc("CWE122_Heap_Based_Buffer_Overflow__placement_new_03.cpp":175:8)
#loc286 = loc("CWE122_Heap_Based_Buffer_Overflow__placement_new_03.cpp":175:11)
#loc287 = loc("CWE122_Heap_Based_Buffer_Overflow__placement_new_03.cpp":176:5)
#loc288 = loc("CWE122_Heap_Based_Buffer_Overflow__placement_new_03.cpp":177:9)
#loc289 = loc("CWE122_Heap_Based_Buffer_Overflow__placement_new_03.cpp":190:9)
#loc290 = loc("CWE122_Heap_Based_Buffer_Overflow__placement_new_03.cpp":183:13)
#loc291 = loc("CWE122_Heap_Based_Buffer_Overflow__placement_new_03.cpp":183:49)
#loc292 = loc("CWE122_Heap_Based_Buffer_Overflow__placement_new_03.cpp":183:39)
#loc293 = loc("CWE122_Heap_Based_Buffer_Overflow__placement_new_03.cpp":183:43)
#loc294 = loc("CWE122_Heap_Based_Buffer_Overflow__placement_new_03.cpp":185:32)
#loc295 = loc("CWE122_Heap_Based_Buffer_Overflow__placement_new_03.cpp":185:13)
#loc296 = loc("CWE122_Heap_Based_Buffer_Overflow__placement_new_03.cpp":186:32)
#loc297 = loc("CWE122_Heap_Based_Buffer_Overflow__placement_new_03.cpp":186:13)
#loc298 = loc("CWE122_Heap_Based_Buffer_Overflow__placement_new_03.cpp":187:26)
#loc299 = loc("CWE122_Heap_Based_Buffer_Overflow__placement_new_03.cpp":187:36)
#loc300 = loc("CWE122_Heap_Based_Buffer_Overflow__placement_new_03.cpp":187:13)
#loc301 = loc("CWE122_Heap_Based_Buffer_Overflow__placement_new_03.cpp":189:13)
#loc302 = loc("CWE122_Heap_Based_Buffer_Overflow__placement_new_03.cpp":189:18)
#loc303 = loc("CWE122_Heap_Based_Buffer_Overflow__placement_new_03.cpp":194:1)
#loc304 = loc("CWE122_Heap_Based_Buffer_Overflow__placement_new_03.cpp":200:1)
#loc305 = loc("CWE122_Heap_Based_Buffer_Overflow__placement_new_03.cpp":196:5)
#loc306 = loc("CWE122_Heap_Based_Buffer_Overflow__placement_new_03.cpp":197:5)
#loc307 = loc("CWE122_Heap_Based_Buffer_Overflow__placement_new_03.cpp":198:5)
#loc308 = loc("CWE122_Heap_Based_Buffer_Overflow__placement_new_03.cpp":199:5)
#loc309 = loc("/usr/include/stdlib.h":575:1)
#loc310 = loc("/usr/include/stdlib.h":575:41)
#loc311 = loc("/usr/include/time.h":76:1)
#loc312 = loc("/usr/include/time.h":76:38)
#loc313 = loc("../../../testcasesupport/std_testcase_io.h":14:1)
#loc314 = loc("../../../testcasesupport/std_testcase_io.h":14:33)
#loc315 = loc("CWE122_Heap_Based_Buffer_Overflow__placement_new_03.cpp":220:15)
#loc316 = loc("CWE122_Heap_Based_Buffer_Overflow__placement_new_03.cpp":222:15)
#loc317 = loc("CWE122_Heap_Based_Buffer_Overflow__placement_new_03.cpp":225:15)
#loc318 = loc("CWE122_Heap_Based_Buffer_Overflow__placement_new_03.cpp":227:15)
#loc319 = loc("CWE122_Heap_Based_Buffer_Overflow__placement_new_03.cpp":215:1)
#loc320 = loc("CWE122_Heap_Based_Buffer_Overflow__placement_new_03.cpp":230:1)
#loc325 = loc("CWE122_Heap_Based_Buffer_Overflow__placement_new_03.cpp":216:1)
#loc326 = loc("CWE122_Heap_Based_Buffer_Overflow__placement_new_03.cpp":218:27)
#loc327 = loc("CWE122_Heap_Based_Buffer_Overflow__placement_new_03.cpp":218:22)
#loc328 = loc("CWE122_Heap_Based_Buffer_Overflow__placement_new_03.cpp":218:5)
#loc329 = loc("CWE122_Heap_Based_Buffer_Overflow__placement_new_03.cpp":220:5)
#loc330 = loc("CWE122_Heap_Based_Buffer_Overflow__placement_new_03.cpp":221:5)
#loc331 = loc("CWE122_Heap_Based_Buffer_Overflow__placement_new_03.cpp":222:5)
#loc332 = loc("CWE122_Heap_Based_Buffer_Overflow__placement_new_03.cpp":225:5)
#loc333 = loc("CWE122_Heap_Based_Buffer_Overflow__placement_new_03.cpp":226:5)
#loc334 = loc("CWE122_Heap_Based_Buffer_Overflow__placement_new_03.cpp":227:5)
#loc335 = loc("CWE122_Heap_Based_Buffer_Overflow__placement_new_03.cpp":229:12)
#loc336 = loc("CWE122_Heap_Based_Buffer_Overflow__placement_new_03.cpp":229:5)
#loc337 = loc(fused[#loc1, #loc2])
#loc338 = loc(fused[#loc3, #loc4])
#loc339 = loc(fused[#loc6, #loc7])
#loc340 = loc(fused[#loc8, #loc9])
#loc341 = loc(fused[#loc10, #loc11])
#loc342 = loc(fused[#loc12, #loc13])
#loc343 = loc(fused[#loc14, #loc15])
#loc344 = loc(fused[#loc16, #loc17])
#loc345 = loc(fused[#loc19, #loc20])
#loc346 = loc(fused[#loc18, #loc15])
#loc347 = loc(fused[#loc21, #loc22])
#loc348 = loc(fused[#loc23, #loc24])
#loc349 = loc(fused[#loc25, #loc22])
#loc350 = loc(fused[#loc30, #loc31])
#loc351 = loc(fused[#loc29, #loc17])
#loc352 = loc(fused[#loc32, #loc33])
#loc353 = loc(fused[#loc34, #loc35])
#loc354 = loc(fused[#loc36, #loc33])
#loc355 = loc(fused[#loc40, #loc41])
#loc356 = loc(fused[#loc42, #loc43])
#loc357 = loc(fused[#loc44, #loc41])
#loc358 = loc(fused[#loc46, #loc45])
#loc359 = loc(fused[#loc47, #loc48])
#loc360 = loc(fused[#loc49, #loc50])
#loc361 = loc(fused[#loc51, #loc48])
#loc362 = loc(fused[#loc52, #loc53])
#loc363 = loc(fused[#loc54, #loc55])
#loc364 = loc(fused[#loc56, #loc55])
#loc365 = loc(fused[#loc59, #loc58])
#loc366 = loc(fused[#loc62, #loc61])
#loc367 = loc(fused[#loc71, #loc72])
#loc368 = loc(fused[#loc73, #loc74])
#loc369 = loc(fused[#loc75, #loc76])
#loc370 = loc(fused[#loc77, #loc78])
#loc371 = loc(fused[#loc80, #loc81])
#loc372 = loc(fused[#loc79, #loc76])
#loc373 = loc(fused[#loc82, #loc83])
#loc374 = loc(fused[#loc84, #loc85])
#loc375 = loc(fused[#loc86, #loc83])
#loc376 = loc(fused[#loc91, #loc92])
#loc377 = loc(fused[#loc90, #loc78])
#loc378 = loc(fused[#loc93, #loc94])
#loc379 = loc(fused[#loc95, #loc96])
#loc380 = loc(fused[#loc97, #loc94])
#loc381 = loc(fused[#loc101, #loc102])
#loc382 = loc(fused[#loc103, #loc104])
#loc383 = loc(fused[#loc105, #loc102])
#loc384 = loc(fused[#loc107, #loc106])
#loc385 = loc(fused[#loc108, #loc109])
#loc386 = loc(fused[#loc110, #loc111])
#loc387 = loc(fused[#loc112, #loc113, #loc114, #loc109])
#loc388 = loc(fused[#loc116, #loc117])
#loc389 = loc(fused[#loc118, #loc119])
#loc390 = loc(fused[#loc120, #loc119])
#loc391 = loc(fused[#loc123, #loc122])
#loc392 = loc(fused[#loc130, #loc131])
#loc393 = loc(fused[#loc132, #loc133])
#loc394 = loc(fused[#loc134, #loc135])
#loc395 = loc(fused[#loc136, #loc137])
#loc396 = loc(fused[#loc139, #loc140])
#loc397 = loc(fused[#loc138, #loc135])
#loc398 = loc(fused[#loc141, #loc142])
#loc399 = loc(fused[#loc143, #loc144])
#loc400 = loc(fused[#loc145, #loc142])
#loc401 = loc(fused[#loc150, #loc151])
#loc402 = loc(fused[#loc149, #loc137])
#loc403 = loc(fused[#loc152, #loc153])
#loc404 = loc(fused[#loc154, #loc155])
#loc405 = loc(fused[#loc156, #loc153])
#loc406 = loc(fused[#loc160, #loc161])
#loc407 = loc(fused[#loc162, #loc163])
#loc408 = loc(fused[#loc164, #loc161])
#loc409 = loc(fused[#loc166, #loc165])
#loc410 = loc(fused[#loc167, #loc168])
#loc411 = loc(fused[#loc169, #loc170])
#loc412 = loc(fused[#loc171, #loc168])
#loc413 = loc(fused[#loc172, #loc173])
#loc414 = loc(fused[#loc174, #loc175])
#loc415 = loc(fused[#loc176, #loc175])
#loc416 = loc(fused[#loc179, #loc178])
#loc417 = loc(fused[#loc185, #loc186])
#loc418 = loc(fused[#loc187, #loc188])
#loc419 = loc(fused[#loc189, #loc190])
#loc420 = loc(fused[#loc191, #loc192])
#loc421 = loc(fused[#loc194, #loc195])
#loc422 = loc(fused[#loc193, #loc190])
#loc423 = loc(fused[#loc196, #loc197])
#loc424 = loc(fused[#loc198, #loc199])
#loc425 = loc(fused[#loc200, #loc197])
#loc426 = loc(fused[#loc205, #loc206])
#loc427 = loc(fused[#loc204, #loc192])
#loc428 = loc(fused[#loc207, #loc208])
#loc429 = loc(fused[#loc209, #loc210])
#loc430 = loc(fused[#loc211, #loc208])
#loc431 = loc(fused[#loc215, #loc216])
#loc432 = loc(fused[#loc217, #loc218])
#loc433 = loc(fused[#loc219, #loc220, #loc221, #loc216])
#loc434 = loc(fused[#loc225, #loc224])
#loc435 = loc(fused[#loc226, #loc227])
#loc436 = loc(fused[#loc228, #loc229])
#loc437 = loc(fused[#loc230, #loc227])
#loc438 = loc(fused[#loc231, #loc232])
#loc439 = loc(fused[#loc233, #loc234])
#loc440 = loc(fused[#loc235, #loc234])
#loc441 = loc(fused[#loc238, #loc237])
#loc442 = loc(fused[#loc240, #loc239])
#loc443 = loc(fused[#loc246, #loc247])
#loc444 = loc(fused[#loc248, #loc249])
#loc445 = loc(fused[#loc250, #loc251])
#loc446 = loc(fused[#loc252, #loc253])
#loc447 = loc(fused[#loc255, #loc256])
#loc448 = loc(fused[#loc254, #loc251])
#loc449 = loc(fused[#loc257, #loc258])
#loc450 = loc(fused[#loc259, #loc260])
#loc451 = loc(fused[#loc261, #loc258])
#loc452 = loc(fused[#loc266, #loc267])
#loc453 = loc(fused[#loc265, #loc253])
#loc454 = loc(fused[#loc268, #loc269])
#loc455 = loc(fused[#loc270, #loc271])
#loc456 = loc(fused[#loc272, #loc269])
#loc457 = loc(fused[#loc276, #loc277])
#loc458 = loc(fused[#loc278, #loc279])
#loc459 = loc(fused[#loc280, #loc277])
#loc460 = loc(fused[#loc282, #loc281])
#loc461 = loc(fused[#loc283, #loc284])
#loc462 = loc(fused[#loc285, #loc286])
#loc463 = loc(fused[#loc287, #loc284])
#loc464 = loc(fused[#loc288, #loc289])
#loc465 = loc(fused[#loc290, #loc291])
#loc466 = loc(fused[#loc292, #loc291])
#loc467 = loc(fused[#loc295, #loc294])
#loc468 = loc(fused[#loc297, #loc296])
#loc469 = loc(fused[#loc303, #loc304])
#loc470 = loc(fused[#loc309, #loc310])
#loc471 = loc(fused[#loc311, #loc312])
#loc472 = loc(fused[#loc313, #loc314])
#loc473 = loc(fused[#loc319, #loc320])
#loc476 = loc(fused[#loc336, #loc335])
