!s32i = !cir.int<s, 32>
!s8i = !cir.int<s, 8>
#fn_attr = #cir<extra({inline = #cir.inline<no>, nothrow = #cir.nothrow, optnone = #cir.optnone})>
#loc5 = loc("CWE191_Integer_Underflow__int_fscanf_multiply_53d.c":22:64)
#loc6 = loc("CWE191_Integer_Underflow__int_fscanf_multiply_53d.c":22:68)
#loc20 = loc("CWE191_Integer_Underflow__int_fscanf_multiply_53d.c":37:68)
#loc21 = loc("CWE191_Integer_Underflow__int_fscanf_multiply_53d.c":37:72)
#loc38 = loc("CWE191_Integer_Underflow__int_fscanf_multiply_53d.c":48:68)
#loc39 = loc("CWE191_Integer_Underflow__int_fscanf_multiply_53d.c":48:72)
#loc63 = loc(fused[#loc5, #loc6])
#loc69 = loc(fused[#loc20, #loc21])
#loc76 = loc(fused[#loc38, #loc39])
module @"/home/ladisgin/git_proj/juliet-c/testcases/CWE191_Integer_Underflow/s02/CWE191_Integer_Underflow__int_fscanf_multiply_53d.c" attributes {cir.lang = #cir.lang<c>, cir.sob = #cir.signed_overflow_behavior<undefined>, cir.triple = "x86_64-unknown-linux-gnu", dlti.dl_spec = #dlti.dl_spec<!llvm.ptr<271> = dense<32> : vector<4xi64>, !llvm.ptr<272> = dense<64> : vector<4xi64>, !llvm.ptr<270> = dense<32> : vector<4xi64>, f128 = dense<128> : vector<2xi64>, f64 = dense<64> : vector<2xi64>, f16 = dense<16> : vector<2xi64>, i32 = dense<32> : vector<2xi64>, i8 = dense<8> : vector<2xi64>, i16 = dense<16> : vector<2xi64>, !llvm.ptr = dense<64> : vector<4xi64>, i1 = dense<8> : vector<2xi64>, f80 = dense<128> : vector<2xi64>, i128 = dense<128> : vector<2xi64>, i64 = dense<64> : vector<2xi64>, "dlti.endianness" = "little", "dlti.stack_alignment" = 128 : i64>} {
  cir.func private @printIntLine(!s32i) loc(#loc61)
  cir.func @CWE191_Integer_Underflow__int_fscanf_multiply_53d_badSink(%arg0: !s32i loc(fused[#loc5, #loc6])) extra(#fn_attr) {
    %0 = cir.alloca !s32i, !cir.ptr<!s32i>, ["data", init] {alignment = 4 : i64} loc(#loc63)
    cir.store %arg0, %0 : !s32i, !cir.ptr<!s32i> loc(#loc7)
    cir.scope {
      %1 = cir.load %0 : !cir.ptr<!s32i>, !s32i loc(#loc10)
      %2 = cir.const #cir.int<0> : !s32i loc(#loc11)
      %3 = cir.cmp(lt, %1, %2) : !s32i, !cir.bool loc(#loc65)
      cir.if %3 {
        %4 = cir.alloca !s32i, !cir.ptr<!s32i>, ["result", init] {alignment = 4 : i64} loc(#loc67)
        %5 = cir.load %0 : !cir.ptr<!s32i>, !s32i loc(#loc15)
        %6 = cir.const #cir.int<2> : !s32i loc(#loc14)
        %7 = cir.binop(mul, %5, %6) nsw : !s32i loc(#loc15)
        cir.store %7, %4 : !s32i, !cir.ptr<!s32i> loc(#loc67)
        %8 = cir.load %4 : !cir.ptr<!s32i>, !s32i loc(#loc16)
        cir.call @printIntLine(%8) : (!s32i) -> () loc(#loc17)
      } loc(#loc66)
    } loc(#loc64)
    cir.return loc(#loc4)
  } loc(#loc62)
  cir.func @CWE191_Integer_Underflow__int_fscanf_multiply_53d_goodG2BSink(%arg0: !s32i loc(fused[#loc20, #loc21])) extra(#fn_attr) {
    %0 = cir.alloca !s32i, !cir.ptr<!s32i>, ["data", init] {alignment = 4 : i64} loc(#loc69)
    cir.store %arg0, %0 : !s32i, !cir.ptr<!s32i> loc(#loc22)
    cir.scope {
      %1 = cir.load %0 : !cir.ptr<!s32i>, !s32i loc(#loc25)
      %2 = cir.const #cir.int<0> : !s32i loc(#loc26)
      %3 = cir.cmp(lt, %1, %2) : !s32i, !cir.bool loc(#loc71)
      cir.if %3 {
        %4 = cir.alloca !s32i, !cir.ptr<!s32i>, ["result", init] {alignment = 4 : i64} loc(#loc73)
        %5 = cir.load %0 : !cir.ptr<!s32i>, !s32i loc(#loc30)
        %6 = cir.const #cir.int<2> : !s32i loc(#loc29)
        %7 = cir.binop(mul, %5, %6) nsw : !s32i loc(#loc30)
        cir.store %7, %4 : !s32i, !cir.ptr<!s32i> loc(#loc73)
        %8 = cir.load %4 : !cir.ptr<!s32i>, !s32i loc(#loc31)
        cir.call @printIntLine(%8) : (!s32i) -> () loc(#loc32)
      } loc(#loc72)
    } loc(#loc70)
    cir.return loc(#loc19)
  } loc(#loc68)
  cir.func private @printLine(!cir.ptr<!s8i>) loc(#loc74)
  cir.global "private" constant cir_private dsolocal @".str" = #cir.const_array<"data value is too small to perform multiplication.\00" : !cir.array<!s8i x 51>> : !cir.array<!s8i x 51> {alignment = 1 : i64} loc(#loc35)
  cir.func @CWE191_Integer_Underflow__int_fscanf_multiply_53d_goodB2GSink(%arg0: !s32i loc(fused[#loc38, #loc39])) extra(#fn_attr) {
    %0 = cir.alloca !s32i, !cir.ptr<!s32i>, ["data", init] {alignment = 4 : i64} loc(#loc76)
    cir.store %arg0, %0 : !s32i, !cir.ptr<!s32i> loc(#loc40)
    cir.scope {
      %1 = cir.load %0 : !cir.ptr<!s32i>, !s32i loc(#loc43)
      %2 = cir.const #cir.int<0> : !s32i loc(#loc44)
      %3 = cir.cmp(lt, %1, %2) : !s32i, !cir.bool loc(#loc78)
      cir.if %3 {
        cir.scope {
          %4 = cir.load %0 : !cir.ptr<!s32i>, !s32i loc(#loc48)
          %5 = cir.const #cir.int<2147483647> : !s32i loc(#loc49)
          %6 = cir.unary(minus, %5) : !s32i, !s32i loc(#loc49)
          %7 = cir.const #cir.int<1> : !s32i loc(#loc49)
          %8 = cir.binop(sub, %6, %7) nsw : !s32i loc(#loc49)
          %9 = cir.const #cir.int<2> : !s32i loc(#loc50)
          %10 = cir.binop(div, %8, %9) : !s32i loc(#loc81)
          %11 = cir.cmp(gt, %4, %10) : !s32i, !cir.bool loc(#loc82)
          cir.if %11 {
            %12 = cir.alloca !s32i, !cir.ptr<!s32i>, ["result", init] {alignment = 4 : i64} loc(#loc84)
            %13 = cir.load %0 : !cir.ptr<!s32i>, !s32i loc(#loc57)
            %14 = cir.const #cir.int<2> : !s32i loc(#loc56)
            %15 = cir.binop(mul, %13, %14) nsw : !s32i loc(#loc57)
            cir.store %15, %12 : !s32i, !cir.ptr<!s32i> loc(#loc84)
            %16 = cir.load %12 : !cir.ptr<!s32i>, !s32i loc(#loc58)
            cir.call @printIntLine(%16) : (!s32i) -> () loc(#loc59)
          } else {
            %12 = cir.get_global @".str" : !cir.ptr<!cir.array<!s8i x 51>> loc(#loc35)
            %13 = cir.cast(array_to_ptrdecay, %12 : !cir.ptr<!cir.array<!s8i x 51>>), !cir.ptr<!s8i> loc(#loc35)
            cir.call @printLine(%13) : (!cir.ptr<!s8i>) -> () loc(#loc60)
          } loc(#loc83)
        } loc(#loc80)
      } loc(#loc79)
    } loc(#loc77)
    cir.return loc(#loc37)
  } loc(#loc75)
} loc(#loc)
#loc = loc("/home/ladisgin/git_proj/juliet-c/testcases/CWE191_Integer_Underflow/s02/CWE191_Integer_Underflow__int_fscanf_multiply_53d.c":0:0)
#loc1 = loc("../../../testcasesupport/std_testcase_io.h":18:1)
#loc2 = loc("../../../testcasesupport/std_testcase_io.h":18:33)
#loc3 = loc("CWE191_Integer_Underflow__int_fscanf_multiply_53d.c":22:1)
#loc4 = loc("CWE191_Integer_Underflow__int_fscanf_multiply_53d.c":30:1)
#loc7 = loc("CWE191_Integer_Underflow__int_fscanf_multiply_53d.c":23:1)
#loc8 = loc("CWE191_Integer_Underflow__int_fscanf_multiply_53d.c":24:5)
#loc9 = loc("CWE191_Integer_Underflow__int_fscanf_multiply_53d.c":29:5)
#loc10 = loc("CWE191_Integer_Underflow__int_fscanf_multiply_53d.c":24:8)
#loc11 = loc("CWE191_Integer_Underflow__int_fscanf_multiply_53d.c":24:15)
#loc12 = loc("CWE191_Integer_Underflow__int_fscanf_multiply_53d.c":25:5)
#loc13 = loc("CWE191_Integer_Underflow__int_fscanf_multiply_53d.c":27:9)
#loc14 = loc("CWE191_Integer_Underflow__int_fscanf_multiply_53d.c":27:29)
#loc15 = loc("CWE191_Integer_Underflow__int_fscanf_multiply_53d.c":27:22)
#loc16 = loc("CWE191_Integer_Underflow__int_fscanf_multiply_53d.c":28:22)
#loc17 = loc("CWE191_Integer_Underflow__int_fscanf_multiply_53d.c":28:9)
#loc18 = loc("CWE191_Integer_Underflow__int_fscanf_multiply_53d.c":37:1)
#loc19 = loc("CWE191_Integer_Underflow__int_fscanf_multiply_53d.c":45:1)
#loc22 = loc("CWE191_Integer_Underflow__int_fscanf_multiply_53d.c":38:1)
#loc23 = loc("CWE191_Integer_Underflow__int_fscanf_multiply_53d.c":39:5)
#loc24 = loc("CWE191_Integer_Underflow__int_fscanf_multiply_53d.c":44:5)
#loc25 = loc("CWE191_Integer_Underflow__int_fscanf_multiply_53d.c":39:8)
#loc26 = loc("CWE191_Integer_Underflow__int_fscanf_multiply_53d.c":39:15)
#loc27 = loc("CWE191_Integer_Underflow__int_fscanf_multiply_53d.c":40:5)
#loc28 = loc("CWE191_Integer_Underflow__int_fscanf_multiply_53d.c":42:9)
#loc29 = loc("CWE191_Integer_Underflow__int_fscanf_multiply_53d.c":42:29)
#loc30 = loc("CWE191_Integer_Underflow__int_fscanf_multiply_53d.c":42:22)
#loc31 = loc("CWE191_Integer_Underflow__int_fscanf_multiply_53d.c":43:22)
#loc32 = loc("CWE191_Integer_Underflow__int_fscanf_multiply_53d.c":43:9)
#loc33 = loc("../../../testcasesupport/std_testcase_io.h":14:1)
#loc34 = loc("../../../testcasesupport/std_testcase_io.h":14:33)
#loc35 = loc("CWE191_Integer_Underflow__int_fscanf_multiply_53d.c":60:23)
#loc36 = loc("CWE191_Integer_Underflow__int_fscanf_multiply_53d.c":48:1)
#loc37 = loc("CWE191_Integer_Underflow__int_fscanf_multiply_53d.c":63:1)
#loc40 = loc("CWE191_Integer_Underflow__int_fscanf_multiply_53d.c":49:1)
#loc41 = loc("CWE191_Integer_Underflow__int_fscanf_multiply_53d.c":50:5)
#loc42 = loc("CWE191_Integer_Underflow__int_fscanf_multiply_53d.c":62:5)
#loc43 = loc("CWE191_Integer_Underflow__int_fscanf_multiply_53d.c":50:8)
#loc44 = loc("CWE191_Integer_Underflow__int_fscanf_multiply_53d.c":50:15)
#loc45 = loc("CWE191_Integer_Underflow__int_fscanf_multiply_53d.c":51:5)
#loc46 = loc("CWE191_Integer_Underflow__int_fscanf_multiply_53d.c":53:9)
#loc47 = loc("CWE191_Integer_Underflow__int_fscanf_multiply_53d.c":61:9)
#loc48 = loc("CWE191_Integer_Underflow__int_fscanf_multiply_53d.c":53:13)
#loc49 = loc("CWE191_Integer_Underflow__int_fscanf_multiply_53d.c":53:21)
#loc50 = loc("CWE191_Integer_Underflow__int_fscanf_multiply_53d.c":53:29)
#loc51 = loc("CWE191_Integer_Underflow__int_fscanf_multiply_53d.c":53:30)
#loc52 = loc("CWE191_Integer_Underflow__int_fscanf_multiply_53d.c":54:9)
#loc53 = loc("CWE191_Integer_Underflow__int_fscanf_multiply_53d.c":57:9)
#loc54 = loc("CWE191_Integer_Underflow__int_fscanf_multiply_53d.c":59:9)
#loc55 = loc("CWE191_Integer_Underflow__int_fscanf_multiply_53d.c":55:13)
#loc56 = loc("CWE191_Integer_Underflow__int_fscanf_multiply_53d.c":55:33)
#loc57 = loc("CWE191_Integer_Underflow__int_fscanf_multiply_53d.c":55:26)
#loc58 = loc("CWE191_Integer_Underflow__int_fscanf_multiply_53d.c":56:26)
#loc59 = loc("CWE191_Integer_Underflow__int_fscanf_multiply_53d.c":56:13)
#loc60 = loc("CWE191_Integer_Underflow__int_fscanf_multiply_53d.c":60:13)
#loc61 = loc(fused[#loc1, #loc2])
#loc62 = loc(fused[#loc3, #loc4])
#loc64 = loc(fused[#loc8, #loc9])
#loc65 = loc(fused[#loc10, #loc11])
#loc66 = loc(fused[#loc12, #loc9])
#loc67 = loc(fused[#loc13, #loc14])
#loc68 = loc(fused[#loc18, #loc19])
#loc70 = loc(fused[#loc23, #loc24])
#loc71 = loc(fused[#loc25, #loc26])
#loc72 = loc(fused[#loc27, #loc24])
#loc73 = loc(fused[#loc28, #loc29])
#loc74 = loc(fused[#loc33, #loc34])
#loc75 = loc(fused[#loc36, #loc37])
#loc77 = loc(fused[#loc41, #loc42])
#loc78 = loc(fused[#loc43, #loc44])
#loc79 = loc(fused[#loc45, #loc42])
#loc80 = loc(fused[#loc46, #loc47])
#loc81 = loc(fused[#loc49, #loc50])
#loc82 = loc(fused[#loc48, #loc51])
#loc83 = loc(fused[#loc52, #loc53, #loc54, #loc47])
#loc84 = loc(fused[#loc55, #loc56])
