!s32i = !cir.int<s, 32>
!s64i = !cir.int<s, 64>
!s8i = !cir.int<s, 8>
!u32i = !cir.int<u, 32>
!u64i = !cir.int<u, 64>
!void = !cir.void
#fn_attr = #cir<extra({nothrow = #cir.nothrow})>
#fn_attr1 = #cir<extra({inline = #cir.inline<no>, nothrow = #cir.nothrow, optnone = #cir.optnone})>
#loc67 = loc("CWE121_Stack_Based_Buffer_Overflow__src_char_declare_cpy_12.c":94:10)
#loc68 = loc("CWE121_Stack_Based_Buffer_Overflow__src_char_declare_cpy_12.c":94:14)
#loc69 = loc("CWE121_Stack_Based_Buffer_Overflow__src_char_declare_cpy_12.c":94:20)
#loc70 = loc("CWE121_Stack_Based_Buffer_Overflow__src_char_declare_cpy_12.c":94:32)
#loc152 = loc(fused[#loc67, #loc68])
#loc153 = loc(fused[#loc69, #loc70])
module @"/home/ladisgin/git_proj/juliet-c/testcases/CWE121_Stack_Based_Buffer_Overflow/s09/CWE121_Stack_Based_Buffer_Overflow__src_char_declare_cpy_12.c" attributes {cir.lang = #cir.lang<c>, cir.sob = #cir.signed_overflow_behavior<undefined>, cir.triple = "x86_64-unknown-linux-gnu", dlti.dl_spec = #dlti.dl_spec<i64 = dense<64> : vector<2xi64>, !llvm.ptr<271> = dense<32> : vector<4xi64>, !llvm.ptr<272> = dense<64> : vector<4xi64>, i128 = dense<128> : vector<2xi64>, f80 = dense<128> : vector<2xi64>, i16 = dense<16> : vector<2xi64>, i8 = dense<8> : vector<2xi64>, i1 = dense<8> : vector<2xi64>, !llvm.ptr = dense<64> : vector<4xi64>, !llvm.ptr<270> = dense<32> : vector<4xi64>, f64 = dense<64> : vector<2xi64>, f128 = dense<128> : vector<2xi64>, i32 = dense<32> : vector<2xi64>, f16 = dense<16> : vector<2xi64>, "dlti.stack_alignment" = 128 : i64, "dlti.endianness" = "little">} {
  cir.func no_proto private @globalReturnsTrueOrFalse(...) -> !s32i loc(#loc131)
  cir.func private @strcpy(!cir.ptr<!s8i>, !cir.ptr<!s8i>) -> !cir.ptr<!s8i> extra(#fn_attr) loc(#loc132)
  cir.func private @printLine(!cir.ptr<!s8i>) loc(#loc133)
  cir.func no_proto @CWE121_Stack_Based_Buffer_Overflow__src_char_declare_cpy_12_bad() extra(#fn_attr1) {
    %0 = cir.alloca !cir.ptr<!s8i>, !cir.ptr<!cir.ptr<!s8i>>, ["data"] {alignment = 8 : i64} loc(#loc135)
    %1 = cir.alloca !cir.array<!s8i x 100>, !cir.ptr<!cir.array<!s8i x 100>>, ["dataBuffer"] {alignment = 16 : i64} loc(#loc136)
    %2 = cir.cast(array_to_ptrdecay, %1 : !cir.ptr<!cir.array<!s8i x 100>>), !cir.ptr<!s8i> loc(#loc13)
    cir.store %2, %0 : !cir.ptr<!s8i>, !cir.ptr<!cir.ptr<!s8i>> loc(#loc137)
    cir.scope {
      %3 = cir.get_global @globalReturnsTrueOrFalse : !cir.ptr<!cir.func<!s32i (...)>> loc(#loc139)
      %4 = cir.cast(bitcast, %3 : !cir.ptr<!cir.func<!s32i (...)>>), !cir.ptr<!cir.func<!s32i ()>> loc(#loc139)
      %5 = cir.call %4() : (!cir.ptr<!cir.func<!s32i ()>>) -> !s32i loc(#loc17)
      %6 = cir.cast(int_to_bool, %5 : !s32i), !cir.bool loc(#loc17)
      cir.if %6 {
        %7 = cir.load %0 : !cir.ptr<!cir.ptr<!s8i>>, !cir.ptr<!s8i> loc(#loc22)
        %8 = cir.cast(bitcast, %7 : !cir.ptr<!s8i>), !cir.ptr<!void> loc(#loc22)
        %9 = cir.const #cir.int<65> : !s32i loc(#loc23)
        %10 = cir.const #cir.int<100> : !s32i loc(#loc24)
        %11 = cir.const #cir.int<1> : !s32i loc(#loc25)
        %12 = cir.binop(sub, %10, %11) nsw : !s32i loc(#loc24)
        %13 = cir.cast(integral, %12 : !s32i), !u64i loc(#loc24)
        cir.libc.memset %13 bytes from %8 set to %9 : !cir.ptr<!void>, !s32i, !u64i loc(#loc141)
        %14 = cir.const #cir.int<0> : !s32i loc(#loc28)
        %15 = cir.cast(integral, %14 : !s32i), !s8i loc(#loc28)
        %16 = cir.load %0 : !cir.ptr<!cir.ptr<!s8i>>, !cir.ptr<!s8i> loc(#loc29)
        %17 = cir.const #cir.int<100> : !s32i loc(#loc30)
        %18 = cir.const #cir.int<1> : !s32i loc(#loc31)
        %19 = cir.binop(sub, %17, %18) nsw : !s32i loc(#loc30)
        %20 = cir.ptr_stride(%16 : !cir.ptr<!s8i>, %19 : !s32i), !cir.ptr<!s8i> loc(#loc32)
        cir.store %15, %20 : !s8i, !cir.ptr<!s8i> loc(#loc142)
      } else {
        %7 = cir.load %0 : !cir.ptr<!cir.ptr<!s8i>>, !cir.ptr<!s8i> loc(#loc33)
        %8 = cir.cast(bitcast, %7 : !cir.ptr<!s8i>), !cir.ptr<!void> loc(#loc33)
        %9 = cir.const #cir.int<65> : !s32i loc(#loc34)
        %10 = cir.const #cir.int<50> : !s32i loc(#loc35)
        %11 = cir.const #cir.int<1> : !s32i loc(#loc36)
        %12 = cir.binop(sub, %10, %11) nsw : !s32i loc(#loc35)
        %13 = cir.cast(integral, %12 : !s32i), !u64i loc(#loc35)
        cir.libc.memset %13 bytes from %8 set to %9 : !cir.ptr<!void>, !s32i, !u64i loc(#loc143)
        %14 = cir.const #cir.int<0> : !s32i loc(#loc39)
        %15 = cir.cast(integral, %14 : !s32i), !s8i loc(#loc39)
        %16 = cir.load %0 : !cir.ptr<!cir.ptr<!s8i>>, !cir.ptr<!s8i> loc(#loc40)
        %17 = cir.const #cir.int<50> : !s32i loc(#loc41)
        %18 = cir.const #cir.int<1> : !s32i loc(#loc42)
        %19 = cir.binop(sub, %17, %18) nsw : !s32i loc(#loc41)
        %20 = cir.ptr_stride(%16 : !cir.ptr<!s8i>, %19 : !s32i), !cir.ptr<!s8i> loc(#loc43)
        cir.store %15, %20 : !s8i, !cir.ptr<!s8i> loc(#loc144)
      } loc(#loc140)
    } loc(#loc138)
    cir.scope {
      %3 = cir.alloca !cir.array<!s8i x 50>, !cir.ptr<!cir.array<!s8i x 50>>, ["dest"] {alignment = 16 : i64} loc(#loc146)
      %4 = cir.const #cir.zero : !cir.array<!s8i x 50> loc(#loc146)
      cir.store %4, %3 : !cir.array<!s8i x 50>, !cir.ptr<!cir.array<!s8i x 50>> loc(#loc146)
      %5 = cir.get_global @strcpy : !cir.ptr<!cir.func<!cir.ptr<!s8i> (!cir.ptr<!s8i>, !cir.ptr<!s8i>)>> loc(#loc48)
      %6 = cir.cast(array_to_ptrdecay, %3 : !cir.ptr<!cir.array<!s8i x 50>>), !cir.ptr<!s8i> loc(#loc49)
      %7 = cir.load %0 : !cir.ptr<!cir.ptr<!s8i>>, !cir.ptr<!s8i> loc(#loc50)
      %8 = cir.call @strcpy(%6, %7) : (!cir.ptr<!s8i>, !cir.ptr<!s8i>) -> !cir.ptr<!s8i> extra(#fn_attr) loc(#loc48)
      %9 = cir.load %0 : !cir.ptr<!cir.ptr<!s8i>>, !cir.ptr<!s8i> loc(#loc51)
      cir.call @printLine(%9) : (!cir.ptr<!s8i>) -> () loc(#loc52)
    } loc(#loc145)
    cir.return loc(#loc8)
  } loc(#loc134)
  cir.func no_proto @CWE121_Stack_Based_Buffer_Overflow__src_char_declare_cpy_12_good() extra(#fn_attr1) {
    %0 = cir.get_global @goodG2B : !cir.ptr<!cir.func<!void ()>> loc(#loc148)
    cir.call %0() : (!cir.ptr<!cir.func<!void ()>>) -> () loc(#loc55)
    cir.return loc(#loc54)
  } loc(#loc147)
  cir.func private @srand(!u32i) extra(#fn_attr) loc(#loc149)
  cir.func private @time(!cir.ptr<!s64i>) -> !s64i extra(#fn_attr) loc(#loc150)
  cir.global "private" constant cir_private dsolocal @".str" = #cir.const_array<"Calling good()...\00" : !cir.array<!s8i x 18>> : !cir.array<!s8i x 18> {alignment = 1 : i64} loc(#loc61)
  cir.global "private" constant cir_private dsolocal @".str.1" = #cir.const_array<"Finished good()\00" : !cir.array<!s8i x 16>> : !cir.array<!s8i x 16> {alignment = 1 : i64} loc(#loc62)
  cir.global "private" constant cir_private dsolocal @".str.2" = #cir.const_array<"Calling bad()...\00" : !cir.array<!s8i x 17>> : !cir.array<!s8i x 17> {alignment = 1 : i64} loc(#loc63)
  cir.global "private" constant cir_private dsolocal @".str.3" = #cir.const_array<"Finished bad()\00" : !cir.array<!s8i x 15>> : !cir.array<!s8i x 15> {alignment = 1 : i64} loc(#loc64)
  cir.func @main(%arg0: !s32i loc(fused[#loc67, #loc68]), %arg1: !cir.ptr<!cir.ptr<!s8i>> loc(fused[#loc69, #loc70])) -> !s32i extra(#fn_attr1) {
    %0 = cir.alloca !s32i, !cir.ptr<!s32i>, ["argc", init] {alignment = 4 : i64} loc(#loc152)
    %1 = cir.alloca !cir.ptr<!cir.ptr<!s8i>>, !cir.ptr<!cir.ptr<!cir.ptr<!s8i>>>, ["argv", init] {alignment = 8 : i64} loc(#loc153)
    %2 = cir.alloca !s32i, !cir.ptr<!s32i>, ["__retval"] {alignment = 4 : i64} loc(#loc66)
    cir.store %arg0, %0 : !s32i, !cir.ptr<!s32i> loc(#loc71)
    cir.store %arg1, %1 : !cir.ptr<!cir.ptr<!s8i>>, !cir.ptr<!cir.ptr<!cir.ptr<!s8i>>> loc(#loc71)
    %3 = cir.const #cir.ptr<null> : !cir.ptr<!s64i> loc(#loc72)
    %4 = cir.call @time(%3) : (!cir.ptr<!s64i>) -> !s64i extra(#fn_attr) loc(#loc73)
    %5 = cir.cast(integral, %4 : !s64i), !u32i loc(#loc73)
    cir.call @srand(%5) : (!u32i) -> () extra(#fn_attr) loc(#loc74)
    %6 = cir.get_global @".str" : !cir.ptr<!cir.array<!s8i x 18>> loc(#loc61)
    %7 = cir.cast(array_to_ptrdecay, %6 : !cir.ptr<!cir.array<!s8i x 18>>), !cir.ptr<!s8i> loc(#loc61)
    cir.call @printLine(%7) : (!cir.ptr<!s8i>) -> () loc(#loc75)
    %8 = cir.get_global @CWE121_Stack_Based_Buffer_Overflow__src_char_declare_cpy_12_good : !cir.ptr<!cir.func<!void ()>> loc(#loc154)
    cir.call @CWE121_Stack_Based_Buffer_Overflow__src_char_declare_cpy_12_good() : () -> () loc(#loc76)
    %9 = cir.get_global @".str.1" : !cir.ptr<!cir.array<!s8i x 16>> loc(#loc62)
    %10 = cir.cast(array_to_ptrdecay, %9 : !cir.ptr<!cir.array<!s8i x 16>>), !cir.ptr<!s8i> loc(#loc62)
    cir.call @printLine(%10) : (!cir.ptr<!s8i>) -> () loc(#loc78)
    %11 = cir.get_global @".str.2" : !cir.ptr<!cir.array<!s8i x 17>> loc(#loc63)
    %12 = cir.cast(array_to_ptrdecay, %11 : !cir.ptr<!cir.array<!s8i x 17>>), !cir.ptr<!s8i> loc(#loc63)
    cir.call @printLine(%12) : (!cir.ptr<!s8i>) -> () loc(#loc79)
    %13 = cir.get_global @CWE121_Stack_Based_Buffer_Overflow__src_char_declare_cpy_12_bad : !cir.ptr<!cir.func<!void ()>> loc(#loc155)
    cir.call @CWE121_Stack_Based_Buffer_Overflow__src_char_declare_cpy_12_bad() : () -> () loc(#loc80)
    %14 = cir.get_global @".str.3" : !cir.ptr<!cir.array<!s8i x 15>> loc(#loc64)
    %15 = cir.cast(array_to_ptrdecay, %14 : !cir.ptr<!cir.array<!s8i x 15>>), !cir.ptr<!s8i> loc(#loc64)
    cir.call @printLine(%15) : (!cir.ptr<!s8i>) -> () loc(#loc82)
    %16 = cir.const #cir.int<0> : !s32i loc(#loc83)
    cir.store %16, %2 : !s32i, !cir.ptr<!s32i> loc(#loc156)
    %17 = cir.load %2 : !cir.ptr<!s32i>, !s32i loc(#loc156)
    cir.return %17 : !s32i loc(#loc156)
  } loc(#loc151)
  cir.func no_proto internal private @goodG2B() extra(#fn_attr1) {
    %0 = cir.alloca !cir.ptr<!s8i>, !cir.ptr<!cir.ptr<!s8i>>, ["data"] {alignment = 8 : i64} loc(#loc158)
    %1 = cir.alloca !cir.array<!s8i x 100>, !cir.ptr<!cir.array<!s8i x 100>>, ["dataBuffer"] {alignment = 16 : i64} loc(#loc159)
    %2 = cir.cast(array_to_ptrdecay, %1 : !cir.ptr<!cir.array<!s8i x 100>>), !cir.ptr<!s8i> loc(#loc91)
    cir.store %2, %0 : !cir.ptr<!s8i>, !cir.ptr<!cir.ptr<!s8i>> loc(#loc160)
    cir.scope {
      %3 = cir.get_global @globalReturnsTrueOrFalse : !cir.ptr<!cir.func<!s32i (...)>> loc(#loc162)
      %4 = cir.cast(bitcast, %3 : !cir.ptr<!cir.func<!s32i (...)>>), !cir.ptr<!cir.func<!s32i ()>> loc(#loc162)
      %5 = cir.call %4() : (!cir.ptr<!cir.func<!s32i ()>>) -> !s32i loc(#loc95)
      %6 = cir.cast(int_to_bool, %5 : !s32i), !cir.bool loc(#loc95)
      cir.if %6 {
        %7 = cir.load %0 : !cir.ptr<!cir.ptr<!s8i>>, !cir.ptr<!s8i> loc(#loc100)
        %8 = cir.cast(bitcast, %7 : !cir.ptr<!s8i>), !cir.ptr<!void> loc(#loc100)
        %9 = cir.const #cir.int<65> : !s32i loc(#loc101)
        %10 = cir.const #cir.int<50> : !s32i loc(#loc102)
        %11 = cir.const #cir.int<1> : !s32i loc(#loc103)
        %12 = cir.binop(sub, %10, %11) nsw : !s32i loc(#loc102)
        %13 = cir.cast(integral, %12 : !s32i), !u64i loc(#loc102)
        cir.libc.memset %13 bytes from %8 set to %9 : !cir.ptr<!void>, !s32i, !u64i loc(#loc164)
        %14 = cir.const #cir.int<0> : !s32i loc(#loc106)
        %15 = cir.cast(integral, %14 : !s32i), !s8i loc(#loc106)
        %16 = cir.load %0 : !cir.ptr<!cir.ptr<!s8i>>, !cir.ptr<!s8i> loc(#loc107)
        %17 = cir.const #cir.int<50> : !s32i loc(#loc108)
        %18 = cir.const #cir.int<1> : !s32i loc(#loc109)
        %19 = cir.binop(sub, %17, %18) nsw : !s32i loc(#loc108)
        %20 = cir.ptr_stride(%16 : !cir.ptr<!s8i>, %19 : !s32i), !cir.ptr<!s8i> loc(#loc110)
        cir.store %15, %20 : !s8i, !cir.ptr<!s8i> loc(#loc165)
      } else {
        %7 = cir.load %0 : !cir.ptr<!cir.ptr<!s8i>>, !cir.ptr<!s8i> loc(#loc111)
        %8 = cir.cast(bitcast, %7 : !cir.ptr<!s8i>), !cir.ptr<!void> loc(#loc111)
        %9 = cir.const #cir.int<65> : !s32i loc(#loc112)
        %10 = cir.const #cir.int<50> : !s32i loc(#loc113)
        %11 = cir.const #cir.int<1> : !s32i loc(#loc114)
        %12 = cir.binop(sub, %10, %11) nsw : !s32i loc(#loc113)
        %13 = cir.cast(integral, %12 : !s32i), !u64i loc(#loc113)
        cir.libc.memset %13 bytes from %8 set to %9 : !cir.ptr<!void>, !s32i, !u64i loc(#loc166)
        %14 = cir.const #cir.int<0> : !s32i loc(#loc117)
        %15 = cir.cast(integral, %14 : !s32i), !s8i loc(#loc117)
        %16 = cir.load %0 : !cir.ptr<!cir.ptr<!s8i>>, !cir.ptr<!s8i> loc(#loc118)
        %17 = cir.const #cir.int<50> : !s32i loc(#loc119)
        %18 = cir.const #cir.int<1> : !s32i loc(#loc120)
        %19 = cir.binop(sub, %17, %18) nsw : !s32i loc(#loc119)
        %20 = cir.ptr_stride(%16 : !cir.ptr<!s8i>, %19 : !s32i), !cir.ptr<!s8i> loc(#loc121)
        cir.store %15, %20 : !s8i, !cir.ptr<!s8i> loc(#loc167)
      } loc(#loc163)
    } loc(#loc161)
    cir.scope {
      %3 = cir.alloca !cir.array<!s8i x 50>, !cir.ptr<!cir.array<!s8i x 50>>, ["dest"] {alignment = 16 : i64} loc(#loc169)
      %4 = cir.const #cir.zero : !cir.array<!s8i x 50> loc(#loc169)
      cir.store %4, %3 : !cir.array<!s8i x 50>, !cir.ptr<!cir.array<!s8i x 50>> loc(#loc169)
      %5 = cir.get_global @strcpy : !cir.ptr<!cir.func<!cir.ptr<!s8i> (!cir.ptr<!s8i>, !cir.ptr<!s8i>)>> loc(#loc126)
      %6 = cir.cast(array_to_ptrdecay, %3 : !cir.ptr<!cir.array<!s8i x 50>>), !cir.ptr<!s8i> loc(#loc127)
      %7 = cir.load %0 : !cir.ptr<!cir.ptr<!s8i>>, !cir.ptr<!s8i> loc(#loc128)
      %8 = cir.call @strcpy(%6, %7) : (!cir.ptr<!s8i>, !cir.ptr<!s8i>) -> !cir.ptr<!s8i> extra(#fn_attr) loc(#loc126)
      %9 = cir.load %0 : !cir.ptr<!cir.ptr<!s8i>>, !cir.ptr<!s8i> loc(#loc129)
      cir.call @printLine(%9) : (!cir.ptr<!s8i>) -> () loc(#loc130)
    } loc(#loc168)
    cir.return loc(#loc86)
  } loc(#loc157)
} loc(#loc)
#loc = loc("/home/ladisgin/git_proj/juliet-c/testcases/CWE121_Stack_Based_Buffer_Overflow/s09/CWE121_Stack_Based_Buffer_Overflow__src_char_declare_cpy_12.c":0:0)
#loc1 = loc("../../../testcasesupport/std_testcase_io.h":52:1)
#loc2 = loc("../../../testcasesupport/std_testcase_io.h":52:30)
#loc3 = loc("/usr/include/string.h":141:1)
#loc4 = loc("/usr/include/string.h":142:14)
#loc5 = loc("../../../testcasesupport/std_testcase_io.h":14:1)
#loc6 = loc("../../../testcasesupport/std_testcase_io.h":14:33)
#loc7 = loc("CWE121_Stack_Based_Buffer_Overflow__src_char_declare_cpy_12.c":23:1)
#loc8 = loc("CWE121_Stack_Based_Buffer_Overflow__src_char_declare_cpy_12.c":46:1)
#loc9 = loc("CWE121_Stack_Based_Buffer_Overflow__src_char_declare_cpy_12.c":25:5)
#loc10 = loc("CWE121_Stack_Based_Buffer_Overflow__src_char_declare_cpy_12.c":25:12)
#loc11 = loc("CWE121_Stack_Based_Buffer_Overflow__src_char_declare_cpy_12.c":26:5)
#loc12 = loc("CWE121_Stack_Based_Buffer_Overflow__src_char_declare_cpy_12.c":26:24)
#loc13 = loc("CWE121_Stack_Based_Buffer_Overflow__src_char_declare_cpy_12.c":27:12)
#loc14 = loc("CWE121_Stack_Based_Buffer_Overflow__src_char_declare_cpy_12.c":27:5)
#loc15 = loc("CWE121_Stack_Based_Buffer_Overflow__src_char_declare_cpy_12.c":28:5)
#loc16 = loc("CWE121_Stack_Based_Buffer_Overflow__src_char_declare_cpy_12.c":39:5)
#loc17 = loc("CWE121_Stack_Based_Buffer_Overflow__src_char_declare_cpy_12.c":28:8)
#loc18 = loc("CWE121_Stack_Based_Buffer_Overflow__src_char_declare_cpy_12.c":28:33)
#loc19 = loc("CWE121_Stack_Based_Buffer_Overflow__src_char_declare_cpy_12.c":29:5)
#loc20 = loc("CWE121_Stack_Based_Buffer_Overflow__src_char_declare_cpy_12.c":33:5)
#loc21 = loc("CWE121_Stack_Based_Buffer_Overflow__src_char_declare_cpy_12.c":35:5)
#loc22 = loc("CWE121_Stack_Based_Buffer_Overflow__src_char_declare_cpy_12.c":31:16)
#loc23 = loc("CWE121_Stack_Based_Buffer_Overflow__src_char_declare_cpy_12.c":31:22)
#loc24 = loc("CWE121_Stack_Based_Buffer_Overflow__src_char_declare_cpy_12.c":31:27)
#loc25 = loc("CWE121_Stack_Based_Buffer_Overflow__src_char_declare_cpy_12.c":31:31)
#loc26 = loc("CWE121_Stack_Based_Buffer_Overflow__src_char_declare_cpy_12.c":31:9)
#loc27 = loc("CWE121_Stack_Based_Buffer_Overflow__src_char_declare_cpy_12.c":31:32)
#loc28 = loc("CWE121_Stack_Based_Buffer_Overflow__src_char_declare_cpy_12.c":32:23)
#loc29 = loc("CWE121_Stack_Based_Buffer_Overflow__src_char_declare_cpy_12.c":32:9)
#loc30 = loc("CWE121_Stack_Based_Buffer_Overflow__src_char_declare_cpy_12.c":32:14)
#loc31 = loc("CWE121_Stack_Based_Buffer_Overflow__src_char_declare_cpy_12.c":32:18)
#loc32 = loc("CWE121_Stack_Based_Buffer_Overflow__src_char_declare_cpy_12.c":32:19)
#loc33 = loc("CWE121_Stack_Based_Buffer_Overflow__src_char_declare_cpy_12.c":37:16)
#loc34 = loc("CWE121_Stack_Based_Buffer_Overflow__src_char_declare_cpy_12.c":37:22)
#loc35 = loc("CWE121_Stack_Based_Buffer_Overflow__src_char_declare_cpy_12.c":37:27)
#loc36 = loc("CWE121_Stack_Based_Buffer_Overflow__src_char_declare_cpy_12.c":37:30)
#loc37 = loc("CWE121_Stack_Based_Buffer_Overflow__src_char_declare_cpy_12.c":37:9)
#loc38 = loc("CWE121_Stack_Based_Buffer_Overflow__src_char_declare_cpy_12.c":37:31)
#loc39 = loc("CWE121_Stack_Based_Buffer_Overflow__src_char_declare_cpy_12.c":38:22)
#loc40 = loc("CWE121_Stack_Based_Buffer_Overflow__src_char_declare_cpy_12.c":38:9)
#loc41 = loc("CWE121_Stack_Based_Buffer_Overflow__src_char_declare_cpy_12.c":38:14)
#loc42 = loc("CWE121_Stack_Based_Buffer_Overflow__src_char_declare_cpy_12.c":38:17)
#loc43 = loc("CWE121_Stack_Based_Buffer_Overflow__src_char_declare_cpy_12.c":38:18)
#loc44 = loc("CWE121_Stack_Based_Buffer_Overflow__src_char_declare_cpy_12.c":40:5)
#loc45 = loc("CWE121_Stack_Based_Buffer_Overflow__src_char_declare_cpy_12.c":45:5)
#loc46 = loc("CWE121_Stack_Based_Buffer_Overflow__src_char_declare_cpy_12.c":41:9)
#loc47 = loc("CWE121_Stack_Based_Buffer_Overflow__src_char_declare_cpy_12.c":41:25)
#loc48 = loc("CWE121_Stack_Based_Buffer_Overflow__src_char_declare_cpy_12.c":43:9)
#loc49 = loc("CWE121_Stack_Based_Buffer_Overflow__src_char_declare_cpy_12.c":43:16)
#loc50 = loc("CWE121_Stack_Based_Buffer_Overflow__src_char_declare_cpy_12.c":43:22)
#loc51 = loc("CWE121_Stack_Based_Buffer_Overflow__src_char_declare_cpy_12.c":44:19)
#loc52 = loc("CWE121_Stack_Based_Buffer_Overflow__src_char_declare_cpy_12.c":44:9)
#loc53 = loc("CWE121_Stack_Based_Buffer_Overflow__src_char_declare_cpy_12.c":79:1)
#loc54 = loc("CWE121_Stack_Based_Buffer_Overflow__src_char_declare_cpy_12.c":82:1)
#loc55 = loc("CWE121_Stack_Based_Buffer_Overflow__src_char_declare_cpy_12.c":81:5)
#loc56 = loc("CWE121_Stack_Based_Buffer_Overflow__src_char_declare_cpy_12.c":81:13)
#loc57 = loc("/usr/include/stdlib.h":575:1)
#loc58 = loc("/usr/include/stdlib.h":575:41)
#loc59 = loc("/usr/include/time.h":76:1)
#loc60 = loc("/usr/include/time.h":76:38)
#loc61 = loc("CWE121_Stack_Based_Buffer_Overflow__src_char_declare_cpy_12.c":99:15)
#loc62 = loc("CWE121_Stack_Based_Buffer_Overflow__src_char_declare_cpy_12.c":101:15)
#loc63 = loc("CWE121_Stack_Based_Buffer_Overflow__src_char_declare_cpy_12.c":104:15)
#loc64 = loc("CWE121_Stack_Based_Buffer_Overflow__src_char_declare_cpy_12.c":106:15)
#loc65 = loc("CWE121_Stack_Based_Buffer_Overflow__src_char_declare_cpy_12.c":94:1)
#loc66 = loc("CWE121_Stack_Based_Buffer_Overflow__src_char_declare_cpy_12.c":109:1)
#loc71 = loc("CWE121_Stack_Based_Buffer_Overflow__src_char_declare_cpy_12.c":95:1)
#loc72 = loc("CWE121_Stack_Based_Buffer_Overflow__src_char_declare_cpy_12.c":97:27)
#loc73 = loc("CWE121_Stack_Based_Buffer_Overflow__src_char_declare_cpy_12.c":97:22)
#loc74 = loc("CWE121_Stack_Based_Buffer_Overflow__src_char_declare_cpy_12.c":97:5)
#loc75 = loc("CWE121_Stack_Based_Buffer_Overflow__src_char_declare_cpy_12.c":99:5)
#loc76 = loc("CWE121_Stack_Based_Buffer_Overflow__src_char_declare_cpy_12.c":100:5)
#loc77 = loc("CWE121_Stack_Based_Buffer_Overflow__src_char_declare_cpy_12.c":100:70)
#loc78 = loc("CWE121_Stack_Based_Buffer_Overflow__src_char_declare_cpy_12.c":101:5)
#loc79 = loc("CWE121_Stack_Based_Buffer_Overflow__src_char_declare_cpy_12.c":104:5)
#loc80 = loc("CWE121_Stack_Based_Buffer_Overflow__src_char_declare_cpy_12.c":105:5)
#loc81 = loc("CWE121_Stack_Based_Buffer_Overflow__src_char_declare_cpy_12.c":105:69)
#loc82 = loc("CWE121_Stack_Based_Buffer_Overflow__src_char_declare_cpy_12.c":106:5)
#loc83 = loc("CWE121_Stack_Based_Buffer_Overflow__src_char_declare_cpy_12.c":108:12)
#loc84 = loc("CWE121_Stack_Based_Buffer_Overflow__src_char_declare_cpy_12.c":108:5)
#loc85 = loc("CWE121_Stack_Based_Buffer_Overflow__src_char_declare_cpy_12.c":54:1)
#loc86 = loc("CWE121_Stack_Based_Buffer_Overflow__src_char_declare_cpy_12.c":77:1)
#loc87 = loc("CWE121_Stack_Based_Buffer_Overflow__src_char_declare_cpy_12.c":56:5)
#loc88 = loc("CWE121_Stack_Based_Buffer_Overflow__src_char_declare_cpy_12.c":56:12)
#loc89 = loc("CWE121_Stack_Based_Buffer_Overflow__src_char_declare_cpy_12.c":57:5)
#loc90 = loc("CWE121_Stack_Based_Buffer_Overflow__src_char_declare_cpy_12.c":57:24)
#loc91 = loc("CWE121_Stack_Based_Buffer_Overflow__src_char_declare_cpy_12.c":58:12)
#loc92 = loc("CWE121_Stack_Based_Buffer_Overflow__src_char_declare_cpy_12.c":58:5)
#loc93 = loc("CWE121_Stack_Based_Buffer_Overflow__src_char_declare_cpy_12.c":59:5)
#loc94 = loc("CWE121_Stack_Based_Buffer_Overflow__src_char_declare_cpy_12.c":70:5)
#loc95 = loc("CWE121_Stack_Based_Buffer_Overflow__src_char_declare_cpy_12.c":59:8)
#loc96 = loc("CWE121_Stack_Based_Buffer_Overflow__src_char_declare_cpy_12.c":59:33)
#loc97 = loc("CWE121_Stack_Based_Buffer_Overflow__src_char_declare_cpy_12.c":60:5)
#loc98 = loc("CWE121_Stack_Based_Buffer_Overflow__src_char_declare_cpy_12.c":64:5)
#loc99 = loc("CWE121_Stack_Based_Buffer_Overflow__src_char_declare_cpy_12.c":66:5)
#loc100 = loc("CWE121_Stack_Based_Buffer_Overflow__src_char_declare_cpy_12.c":62:16)
#loc101 = loc("CWE121_Stack_Based_Buffer_Overflow__src_char_declare_cpy_12.c":62:22)
#loc102 = loc("CWE121_Stack_Based_Buffer_Overflow__src_char_declare_cpy_12.c":62:27)
#loc103 = loc("CWE121_Stack_Based_Buffer_Overflow__src_char_declare_cpy_12.c":62:30)
#loc104 = loc("CWE121_Stack_Based_Buffer_Overflow__src_char_declare_cpy_12.c":62:9)
#loc105 = loc("CWE121_Stack_Based_Buffer_Overflow__src_char_declare_cpy_12.c":62:31)
#loc106 = loc("CWE121_Stack_Based_Buffer_Overflow__src_char_declare_cpy_12.c":63:22)
#loc107 = loc("CWE121_Stack_Based_Buffer_Overflow__src_char_declare_cpy_12.c":63:9)
#loc108 = loc("CWE121_Stack_Based_Buffer_Overflow__src_char_declare_cpy_12.c":63:14)
#loc109 = loc("CWE121_Stack_Based_Buffer_Overflow__src_char_declare_cpy_12.c":63:17)
#loc110 = loc("CWE121_Stack_Based_Buffer_Overflow__src_char_declare_cpy_12.c":63:18)
#loc111 = loc("CWE121_Stack_Based_Buffer_Overflow__src_char_declare_cpy_12.c":68:16)
#loc112 = loc("CWE121_Stack_Based_Buffer_Overflow__src_char_declare_cpy_12.c":68:22)
#loc113 = loc("CWE121_Stack_Based_Buffer_Overflow__src_char_declare_cpy_12.c":68:27)
#loc114 = loc("CWE121_Stack_Based_Buffer_Overflow__src_char_declare_cpy_12.c":68:30)
#loc115 = loc("CWE121_Stack_Based_Buffer_Overflow__src_char_declare_cpy_12.c":68:9)
#loc116 = loc("CWE121_Stack_Based_Buffer_Overflow__src_char_declare_cpy_12.c":68:31)
#loc117 = loc("CWE121_Stack_Based_Buffer_Overflow__src_char_declare_cpy_12.c":69:22)
#loc118 = loc("CWE121_Stack_Based_Buffer_Overflow__src_char_declare_cpy_12.c":69:9)
#loc119 = loc("CWE121_Stack_Based_Buffer_Overflow__src_char_declare_cpy_12.c":69:14)
#loc120 = loc("CWE121_Stack_Based_Buffer_Overflow__src_char_declare_cpy_12.c":69:17)
#loc121 = loc("CWE121_Stack_Based_Buffer_Overflow__src_char_declare_cpy_12.c":69:18)
#loc122 = loc("CWE121_Stack_Based_Buffer_Overflow__src_char_declare_cpy_12.c":71:5)
#loc123 = loc("CWE121_Stack_Based_Buffer_Overflow__src_char_declare_cpy_12.c":76:5)
#loc124 = loc("CWE121_Stack_Based_Buffer_Overflow__src_char_declare_cpy_12.c":72:9)
#loc125 = loc("CWE121_Stack_Based_Buffer_Overflow__src_char_declare_cpy_12.c":72:25)
#loc126 = loc("CWE121_Stack_Based_Buffer_Overflow__src_char_declare_cpy_12.c":74:9)
#loc127 = loc("CWE121_Stack_Based_Buffer_Overflow__src_char_declare_cpy_12.c":74:16)
#loc128 = loc("CWE121_Stack_Based_Buffer_Overflow__src_char_declare_cpy_12.c":74:22)
#loc129 = loc("CWE121_Stack_Based_Buffer_Overflow__src_char_declare_cpy_12.c":75:19)
#loc130 = loc("CWE121_Stack_Based_Buffer_Overflow__src_char_declare_cpy_12.c":75:9)
#loc131 = loc(fused[#loc1, #loc2])
#loc132 = loc(fused[#loc3, #loc4])
#loc133 = loc(fused[#loc5, #loc6])
#loc134 = loc(fused[#loc7, #loc8])
#loc135 = loc(fused[#loc9, #loc10])
#loc136 = loc(fused[#loc11, #loc12])
#loc137 = loc(fused[#loc14, #loc13])
#loc138 = loc(fused[#loc15, #loc16])
#loc139 = loc(fused[#loc17, #loc18])
#loc140 = loc(fused[#loc19, #loc20, #loc21, #loc16])
#loc141 = loc(fused[#loc26, #loc27])
#loc142 = loc(fused[#loc29, #loc28])
#loc143 = loc(fused[#loc37, #loc38])
#loc144 = loc(fused[#loc40, #loc39])
#loc145 = loc(fused[#loc44, #loc45])
#loc146 = loc(fused[#loc46, #loc47])
#loc147 = loc(fused[#loc53, #loc54])
#loc148 = loc(fused[#loc55, #loc56])
#loc149 = loc(fused[#loc57, #loc58])
#loc150 = loc(fused[#loc59, #loc60])
#loc151 = loc(fused[#loc65, #loc66])
#loc154 = loc(fused[#loc76, #loc77])
#loc155 = loc(fused[#loc80, #loc81])
#loc156 = loc(fused[#loc84, #loc83])
#loc157 = loc(fused[#loc85, #loc86])
#loc158 = loc(fused[#loc87, #loc88])
#loc159 = loc(fused[#loc89, #loc90])
#loc160 = loc(fused[#loc92, #loc91])
#loc161 = loc(fused[#loc93, #loc94])
#loc162 = loc(fused[#loc95, #loc96])
#loc163 = loc(fused[#loc97, #loc98, #loc99, #loc94])
#loc164 = loc(fused[#loc104, #loc105])
#loc165 = loc(fused[#loc107, #loc106])
#loc166 = loc(fused[#loc115, #loc116])
#loc167 = loc(fused[#loc118, #loc117])
#loc168 = loc(fused[#loc122, #loc123])
#loc169 = loc(fused[#loc124, #loc125])
