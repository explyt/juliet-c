!s32i = !cir.int<s, 32>
!u64i = !cir.int<u, 64>
!void = !cir.void
#fn_attr = #cir<extra({nothrow = #cir.nothrow})>
#fn_attr1 = #cir<extra({inline = #cir.inline<no>, nothrow = #cir.nothrow, optnone = #cir.optnone})>
#loc7 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_struct_memcpy_64b.c":21:76)
#loc8 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_struct_memcpy_64b.c":21:83)
#loc57 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_struct_memcpy_64b.c":50:80)
#loc58 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_struct_memcpy_64b.c":50:87)
!ty__twoIntsStruct = !cir.struct<struct "_twoIntsStruct" {!s32i, !s32i} #cir.record.decl.ast>
#loc106 = loc(fused[#loc7, #loc8])
#loc124 = loc(fused[#loc57, #loc58])
module @"/home/ladisgin/git_proj/juliet-c/testcases/CWE122_Heap_Based_Buffer_Overflow/s08/CWE122_Heap_Based_Buffer_Overflow__c_CWE805_struct_memcpy_64b.c" attributes {cir.lang = #cir.lang<c>, cir.sob = #cir.signed_overflow_behavior<undefined>, cir.triple = "x86_64-unknown-linux-gnu", dlti.dl_spec = #dlti.dl_spec<i128 = dense<128> : vector<2xi64>, f80 = dense<128> : vector<2xi64>, i64 = dense<64> : vector<2xi64>, !llvm.ptr<271> = dense<32> : vector<4xi64>, !llvm.ptr<272> = dense<64> : vector<4xi64>, f64 = dense<64> : vector<2xi64>, !llvm.ptr<270> = dense<32> : vector<4xi64>, f128 = dense<128> : vector<2xi64>, i32 = dense<32> : vector<2xi64>, f16 = dense<16> : vector<2xi64>, i16 = dense<16> : vector<2xi64>, i8 = dense<8> : vector<2xi64>, i1 = dense<8> : vector<2xi64>, !llvm.ptr = dense<64> : vector<4xi64>, "dlti.stack_alignment" = 128 : i64, "dlti.endianness" = "little">} {
  cir.func private @printStructLine(!cir.ptr<!ty__twoIntsStruct>) loc(#loc103)
  cir.func private @free(!cir.ptr<!void>) extra(#fn_attr) loc(#loc104)
  cir.func @CWE122_Heap_Based_Buffer_Overflow__c_CWE805_struct_memcpy_64b_badSink(%arg0: !cir.ptr<!void> loc(fused[#loc7, #loc8])) extra(#fn_attr1) {
    %0 = cir.alloca !cir.ptr<!void>, !cir.ptr<!cir.ptr<!void>>, ["dataVoidPtr", init] {alignment = 8 : i64} loc(#loc106)
    %1 = cir.alloca !cir.ptr<!cir.ptr<!ty__twoIntsStruct>>, !cir.ptr<!cir.ptr<!cir.ptr<!ty__twoIntsStruct>>>, ["dataPtr", init] {alignment = 8 : i64} loc(#loc107)
    %2 = cir.alloca !cir.ptr<!ty__twoIntsStruct>, !cir.ptr<!cir.ptr<!ty__twoIntsStruct>>, ["data", init] {alignment = 8 : i64} loc(#loc108)
    cir.store %arg0, %0 : !cir.ptr<!void>, !cir.ptr<!cir.ptr<!void>> loc(#loc13)
    %3 = cir.load %0 : !cir.ptr<!cir.ptr<!void>>, !cir.ptr<!void> loc(#loc10)
    %4 = cir.cast(bitcast, %3 : !cir.ptr<!void>), !cir.ptr<!cir.ptr<!ty__twoIntsStruct>> loc(#loc10)
    cir.store %4, %1 : !cir.ptr<!cir.ptr<!ty__twoIntsStruct>>, !cir.ptr<!cir.ptr<!cir.ptr<!ty__twoIntsStruct>>> loc(#loc107)
    %5 = cir.load deref %1 : !cir.ptr<!cir.ptr<!cir.ptr<!ty__twoIntsStruct>>>, !cir.ptr<!cir.ptr<!ty__twoIntsStruct>> loc(#loc14)
    %6 = cir.load %5 : !cir.ptr<!cir.ptr<!ty__twoIntsStruct>>, !cir.ptr<!ty__twoIntsStruct> loc(#loc15)
    cir.store %6, %2 : !cir.ptr<!ty__twoIntsStruct>, !cir.ptr<!cir.ptr<!ty__twoIntsStruct>> loc(#loc108)
    cir.scope {
      %7 = cir.alloca !cir.array<!ty__twoIntsStruct x 100>, !cir.ptr<!cir.array<!ty__twoIntsStruct x 100>>, ["source"] {alignment = 16 : i64} loc(#loc110)
      cir.scope {
        %22 = cir.alloca !u64i, !cir.ptr<!u64i>, ["i"] {alignment = 8 : i64} loc(#loc112)
        cir.scope {
          %23 = cir.const #cir.int<0> : !s32i loc(#loc26)
          %24 = cir.cast(integral, %23 : !s32i), !u64i loc(#loc26)
          cir.store %24, %22 : !u64i, !cir.ptr<!u64i> loc(#loc114)
          cir.for : cond {
            %25 = cir.load %22 : !cir.ptr<!u64i>, !u64i loc(#loc28)
            %26 = cir.const #cir.int<100> : !s32i loc(#loc29)
            %27 = cir.cast(integral, %26 : !s32i), !u64i loc(#loc29)
            %28 = cir.cmp(lt, %25, %27) : !u64i, !cir.bool loc(#loc115)
            cir.condition(%28) loc(#loc30)
          } body {
            cir.scope {
              %25 = cir.const #cir.int<0> : !s32i loc(#loc32)
              %26 = cir.load %22 : !cir.ptr<!u64i>, !u64i loc(#loc33)
              %27 = cir.cast(array_to_ptrdecay, %7 : !cir.ptr<!cir.array<!ty__twoIntsStruct x 100>>), !cir.ptr<!ty__twoIntsStruct> loc(#loc34)
              %28 = cir.ptr_stride(%27 : !cir.ptr<!ty__twoIntsStruct>, %26 : !u64i), !cir.ptr<!ty__twoIntsStruct> loc(#loc34)
              %29 = cir.get_member %28[0] {name = "intOne"} : !cir.ptr<!ty__twoIntsStruct> -> !cir.ptr<!s32i> loc(#loc35)
              cir.store %25, %29 : !s32i, !cir.ptr<!s32i> loc(#loc117)
              %30 = cir.const #cir.int<0> : !s32i loc(#loc36)
              %31 = cir.load %22 : !cir.ptr<!u64i>, !u64i loc(#loc37)
              %32 = cir.cast(array_to_ptrdecay, %7 : !cir.ptr<!cir.array<!ty__twoIntsStruct x 100>>), !cir.ptr<!ty__twoIntsStruct> loc(#loc38)
              %33 = cir.ptr_stride(%32 : !cir.ptr<!ty__twoIntsStruct>, %31 : !u64i), !cir.ptr<!ty__twoIntsStruct> loc(#loc38)
              %34 = cir.get_member %33[1] {name = "intTwo"} : !cir.ptr<!ty__twoIntsStruct> -> !cir.ptr<!s32i> loc(#loc39)
              cir.store %30, %34 : !s32i, !cir.ptr<!s32i> loc(#loc118)
            } loc(#loc116)
            cir.yield loc(#loc25)
          } step {
            %25 = cir.load %22 : !cir.ptr<!u64i>, !u64i loc(#loc40)
            %26 = cir.unary(inc, %25) : !u64i, !u64i loc(#loc41)
            cir.store %26, %22 : !u64i, !cir.ptr<!u64i> loc(#loc119)
            cir.yield loc(#loc113)
          } loc(#loc113)
        } loc(#loc113)
      } loc(#loc111)
      %8 = cir.load %2 : !cir.ptr<!cir.ptr<!ty__twoIntsStruct>>, !cir.ptr<!ty__twoIntsStruct> loc(#loc42)
      %9 = cir.cast(bitcast, %8 : !cir.ptr<!ty__twoIntsStruct>), !cir.ptr<!void> loc(#loc42)
      %10 = cir.cast(array_to_ptrdecay, %7 : !cir.ptr<!cir.array<!ty__twoIntsStruct x 100>>), !cir.ptr<!ty__twoIntsStruct> loc(#loc43)
      %11 = cir.cast(bitcast, %10 : !cir.ptr<!ty__twoIntsStruct>), !cir.ptr<!void> loc(#loc43)
      %12 = cir.const #cir.int<100> : !s32i loc(#loc44)
      %13 = cir.cast(integral, %12 : !s32i), !u64i loc(#loc44)
      %14 = cir.const #cir.int<8> : !u64i loc(#loc120)
      %15 = cir.binop(mul, %13, %14) : !u64i loc(#loc121)
      cir.libc.memcpy %15 bytes from %11 to %9 : !u64i, !cir.ptr<!void> -> !cir.ptr<!void> loc(#loc122)
      %16 = cir.load %2 : !cir.ptr<!cir.ptr<!ty__twoIntsStruct>>, !cir.ptr<!ty__twoIntsStruct> loc(#loc49)
      %17 = cir.const #cir.int<0> : !s32i loc(#loc50)
      %18 = cir.ptr_stride(%16 : !cir.ptr<!ty__twoIntsStruct>, %17 : !s32i), !cir.ptr<!ty__twoIntsStruct> loc(#loc51)
      cir.call @printStructLine(%18) : (!cir.ptr<!ty__twoIntsStruct>) -> () loc(#loc52)
      %19 = cir.get_global @free : !cir.ptr<!cir.func<!void (!cir.ptr<!void>)>> loc(#loc53)
      %20 = cir.load %2 : !cir.ptr<!cir.ptr<!ty__twoIntsStruct>>, !cir.ptr<!ty__twoIntsStruct> loc(#loc54)
      %21 = cir.cast(bitcast, %20 : !cir.ptr<!ty__twoIntsStruct>), !cir.ptr<!void> loc(#loc54)
      cir.call @free(%21) : (!cir.ptr<!void>) -> () extra(#fn_attr) loc(#loc53)
    } loc(#loc109)
    cir.return loc(#loc6)
  } loc(#loc105)
  cir.func @CWE122_Heap_Based_Buffer_Overflow__c_CWE805_struct_memcpy_64b_goodG2BSink(%arg0: !cir.ptr<!void> loc(fused[#loc57, #loc58])) extra(#fn_attr1) {
    %0 = cir.alloca !cir.ptr<!void>, !cir.ptr<!cir.ptr<!void>>, ["dataVoidPtr", init] {alignment = 8 : i64} loc(#loc124)
    %1 = cir.alloca !cir.ptr<!cir.ptr<!ty__twoIntsStruct>>, !cir.ptr<!cir.ptr<!cir.ptr<!ty__twoIntsStruct>>>, ["dataPtr", init] {alignment = 8 : i64} loc(#loc125)
    %2 = cir.alloca !cir.ptr<!ty__twoIntsStruct>, !cir.ptr<!cir.ptr<!ty__twoIntsStruct>>, ["data", init] {alignment = 8 : i64} loc(#loc126)
    cir.store %arg0, %0 : !cir.ptr<!void>, !cir.ptr<!cir.ptr<!void>> loc(#loc63)
    %3 = cir.load %0 : !cir.ptr<!cir.ptr<!void>>, !cir.ptr<!void> loc(#loc60)
    %4 = cir.cast(bitcast, %3 : !cir.ptr<!void>), !cir.ptr<!cir.ptr<!ty__twoIntsStruct>> loc(#loc60)
    cir.store %4, %1 : !cir.ptr<!cir.ptr<!ty__twoIntsStruct>>, !cir.ptr<!cir.ptr<!cir.ptr<!ty__twoIntsStruct>>> loc(#loc125)
    %5 = cir.load deref %1 : !cir.ptr<!cir.ptr<!cir.ptr<!ty__twoIntsStruct>>>, !cir.ptr<!cir.ptr<!ty__twoIntsStruct>> loc(#loc64)
    %6 = cir.load %5 : !cir.ptr<!cir.ptr<!ty__twoIntsStruct>>, !cir.ptr<!ty__twoIntsStruct> loc(#loc65)
    cir.store %6, %2 : !cir.ptr<!ty__twoIntsStruct>, !cir.ptr<!cir.ptr<!ty__twoIntsStruct>> loc(#loc126)
    cir.scope {
      %7 = cir.alloca !cir.array<!ty__twoIntsStruct x 100>, !cir.ptr<!cir.array<!ty__twoIntsStruct x 100>>, ["source"] {alignment = 16 : i64} loc(#loc128)
      cir.scope {
        %22 = cir.alloca !u64i, !cir.ptr<!u64i>, ["i"] {alignment = 8 : i64} loc(#loc130)
        cir.scope {
          %23 = cir.const #cir.int<0> : !s32i loc(#loc76)
          %24 = cir.cast(integral, %23 : !s32i), !u64i loc(#loc76)
          cir.store %24, %22 : !u64i, !cir.ptr<!u64i> loc(#loc132)
          cir.for : cond {
            %25 = cir.load %22 : !cir.ptr<!u64i>, !u64i loc(#loc78)
            %26 = cir.const #cir.int<100> : !s32i loc(#loc79)
            %27 = cir.cast(integral, %26 : !s32i), !u64i loc(#loc79)
            %28 = cir.cmp(lt, %25, %27) : !u64i, !cir.bool loc(#loc133)
            cir.condition(%28) loc(#loc80)
          } body {
            cir.scope {
              %25 = cir.const #cir.int<0> : !s32i loc(#loc82)
              %26 = cir.load %22 : !cir.ptr<!u64i>, !u64i loc(#loc83)
              %27 = cir.cast(array_to_ptrdecay, %7 : !cir.ptr<!cir.array<!ty__twoIntsStruct x 100>>), !cir.ptr<!ty__twoIntsStruct> loc(#loc84)
              %28 = cir.ptr_stride(%27 : !cir.ptr<!ty__twoIntsStruct>, %26 : !u64i), !cir.ptr<!ty__twoIntsStruct> loc(#loc84)
              %29 = cir.get_member %28[0] {name = "intOne"} : !cir.ptr<!ty__twoIntsStruct> -> !cir.ptr<!s32i> loc(#loc35)
              cir.store %25, %29 : !s32i, !cir.ptr<!s32i> loc(#loc135)
              %30 = cir.const #cir.int<0> : !s32i loc(#loc85)
              %31 = cir.load %22 : !cir.ptr<!u64i>, !u64i loc(#loc86)
              %32 = cir.cast(array_to_ptrdecay, %7 : !cir.ptr<!cir.array<!ty__twoIntsStruct x 100>>), !cir.ptr<!ty__twoIntsStruct> loc(#loc87)
              %33 = cir.ptr_stride(%32 : !cir.ptr<!ty__twoIntsStruct>, %31 : !u64i), !cir.ptr<!ty__twoIntsStruct> loc(#loc87)
              %34 = cir.get_member %33[1] {name = "intTwo"} : !cir.ptr<!ty__twoIntsStruct> -> !cir.ptr<!s32i> loc(#loc39)
              cir.store %30, %34 : !s32i, !cir.ptr<!s32i> loc(#loc136)
            } loc(#loc134)
            cir.yield loc(#loc75)
          } step {
            %25 = cir.load %22 : !cir.ptr<!u64i>, !u64i loc(#loc88)
            %26 = cir.unary(inc, %25) : !u64i, !u64i loc(#loc89)
            cir.store %26, %22 : !u64i, !cir.ptr<!u64i> loc(#loc137)
            cir.yield loc(#loc131)
          } loc(#loc131)
        } loc(#loc131)
      } loc(#loc129)
      %8 = cir.load %2 : !cir.ptr<!cir.ptr<!ty__twoIntsStruct>>, !cir.ptr<!ty__twoIntsStruct> loc(#loc90)
      %9 = cir.cast(bitcast, %8 : !cir.ptr<!ty__twoIntsStruct>), !cir.ptr<!void> loc(#loc90)
      %10 = cir.cast(array_to_ptrdecay, %7 : !cir.ptr<!cir.array<!ty__twoIntsStruct x 100>>), !cir.ptr<!ty__twoIntsStruct> loc(#loc91)
      %11 = cir.cast(bitcast, %10 : !cir.ptr<!ty__twoIntsStruct>), !cir.ptr<!void> loc(#loc91)
      %12 = cir.const #cir.int<100> : !s32i loc(#loc92)
      %13 = cir.cast(integral, %12 : !s32i), !u64i loc(#loc92)
      %14 = cir.const #cir.int<8> : !u64i loc(#loc138)
      %15 = cir.binop(mul, %13, %14) : !u64i loc(#loc139)
      cir.libc.memcpy %15 bytes from %11 to %9 : !u64i, !cir.ptr<!void> -> !cir.ptr<!void> loc(#loc140)
      %16 = cir.load %2 : !cir.ptr<!cir.ptr<!ty__twoIntsStruct>>, !cir.ptr<!ty__twoIntsStruct> loc(#loc97)
      %17 = cir.const #cir.int<0> : !s32i loc(#loc98)
      %18 = cir.ptr_stride(%16 : !cir.ptr<!ty__twoIntsStruct>, %17 : !s32i), !cir.ptr<!ty__twoIntsStruct> loc(#loc99)
      cir.call @printStructLine(%18) : (!cir.ptr<!ty__twoIntsStruct>) -> () loc(#loc100)
      %19 = cir.get_global @free : !cir.ptr<!cir.func<!void (!cir.ptr<!void>)>> loc(#loc101)
      %20 = cir.load %2 : !cir.ptr<!cir.ptr<!ty__twoIntsStruct>>, !cir.ptr<!ty__twoIntsStruct> loc(#loc102)
      %21 = cir.cast(bitcast, %20 : !cir.ptr<!ty__twoIntsStruct>), !cir.ptr<!void> loc(#loc102)
      cir.call @free(%21) : (!cir.ptr<!void>) -> () extra(#fn_attr) loc(#loc101)
    } loc(#loc127)
    cir.return loc(#loc56)
  } loc(#loc123)
} loc(#loc)
#loc = loc("/home/ladisgin/git_proj/juliet-c/testcases/CWE122_Heap_Based_Buffer_Overflow/s08/CWE122_Heap_Based_Buffer_Overflow__c_CWE805_struct_memcpy_64b.c":0:0)
#loc1 = loc("../../../testcasesupport/std_testcase_io.h":40:1)
#loc2 = loc("../../../testcasesupport/std_testcase_io.h":40:63)
#loc3 = loc("/usr/include/stdlib.h":687:1)
#loc4 = loc("/usr/include/stdlib.h":687:32)
#loc5 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_struct_memcpy_64b.c":21:1)
#loc6 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_struct_memcpy_64b.c":43:1)
#loc9 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_struct_memcpy_64b.c":24:5)
#loc10 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_struct_memcpy_64b.c":24:52)
#loc11 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_struct_memcpy_64b.c":26:5)
#loc12 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_struct_memcpy_64b.c":26:37)
#loc13 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_struct_memcpy_64b.c":22:1)
#loc14 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_struct_memcpy_64b.c":26:30)
#loc15 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_struct_memcpy_64b.c":26:29)
#loc16 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_struct_memcpy_64b.c":27:5)
#loc17 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_struct_memcpy_64b.c":42:5)
#loc18 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_struct_memcpy_64b.c":28:9)
#loc19 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_struct_memcpy_64b.c":28:33)
#loc20 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_struct_memcpy_64b.c":29:9)
#loc21 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_struct_memcpy_64b.c":37:9)
#loc22 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_struct_memcpy_64b.c":30:13)
#loc23 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_struct_memcpy_64b.c":30:20)
#loc24 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_struct_memcpy_64b.c":32:13)
#loc25 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_struct_memcpy_64b.c":36:13)
#loc26 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_struct_memcpy_64b.c":32:22)
#loc27 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_struct_memcpy_64b.c":32:18)
#loc28 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_struct_memcpy_64b.c":32:25)
#loc29 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_struct_memcpy_64b.c":32:29)
#loc30 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_struct_memcpy_64b.c":32:27)
#loc31 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_struct_memcpy_64b.c":33:13)
#loc32 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_struct_memcpy_64b.c":34:36)
#loc33 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_struct_memcpy_64b.c":34:24)
#loc34 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_struct_memcpy_64b.c":34:17)
#loc35 = loc("../../../testcasesupport/std_testcase.h":98:9)
#loc36 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_struct_memcpy_64b.c":35:36)
#loc37 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_struct_memcpy_64b.c":35:24)
#loc38 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_struct_memcpy_64b.c":35:17)
#loc39 = loc("../../../testcasesupport/std_testcase.h":99:9)
#loc40 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_struct_memcpy_64b.c":32:35)
#loc41 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_struct_memcpy_64b.c":32:34)
#loc42 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_struct_memcpy_64b.c":39:16)
#loc43 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_struct_memcpy_64b.c":39:22)
#loc44 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_struct_memcpy_64b.c":39:30)
#loc45 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_struct_memcpy_64b.c":39:34)
#loc46 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_struct_memcpy_64b.c":39:54)
#loc47 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_struct_memcpy_64b.c":39:9)
#loc48 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_struct_memcpy_64b.c":39:55)
#loc49 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_struct_memcpy_64b.c":40:26)
#loc50 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_struct_memcpy_64b.c":40:31)
#loc51 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_struct_memcpy_64b.c":40:32)
#loc52 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_struct_memcpy_64b.c":40:9)
#loc53 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_struct_memcpy_64b.c":41:9)
#loc54 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_struct_memcpy_64b.c":41:14)
#loc55 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_struct_memcpy_64b.c":50:1)
#loc56 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_struct_memcpy_64b.c":72:1)
#loc59 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_struct_memcpy_64b.c":53:5)
#loc60 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_struct_memcpy_64b.c":53:52)
#loc61 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_struct_memcpy_64b.c":55:5)
#loc62 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_struct_memcpy_64b.c":55:37)
#loc63 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_struct_memcpy_64b.c":51:1)
#loc64 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_struct_memcpy_64b.c":55:30)
#loc65 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_struct_memcpy_64b.c":55:29)
#loc66 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_struct_memcpy_64b.c":56:5)
#loc67 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_struct_memcpy_64b.c":71:5)
#loc68 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_struct_memcpy_64b.c":57:9)
#loc69 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_struct_memcpy_64b.c":57:33)
#loc70 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_struct_memcpy_64b.c":58:9)
#loc71 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_struct_memcpy_64b.c":66:9)
#loc72 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_struct_memcpy_64b.c":59:13)
#loc73 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_struct_memcpy_64b.c":59:20)
#loc74 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_struct_memcpy_64b.c":61:13)
#loc75 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_struct_memcpy_64b.c":65:13)
#loc76 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_struct_memcpy_64b.c":61:22)
#loc77 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_struct_memcpy_64b.c":61:18)
#loc78 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_struct_memcpy_64b.c":61:25)
#loc79 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_struct_memcpy_64b.c":61:29)
#loc80 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_struct_memcpy_64b.c":61:27)
#loc81 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_struct_memcpy_64b.c":62:13)
#loc82 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_struct_memcpy_64b.c":63:36)
#loc83 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_struct_memcpy_64b.c":63:24)
#loc84 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_struct_memcpy_64b.c":63:17)
#loc85 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_struct_memcpy_64b.c":64:36)
#loc86 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_struct_memcpy_64b.c":64:24)
#loc87 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_struct_memcpy_64b.c":64:17)
#loc88 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_struct_memcpy_64b.c":61:35)
#loc89 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_struct_memcpy_64b.c":61:34)
#loc90 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_struct_memcpy_64b.c":68:16)
#loc91 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_struct_memcpy_64b.c":68:22)
#loc92 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_struct_memcpy_64b.c":68:30)
#loc93 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_struct_memcpy_64b.c":68:34)
#loc94 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_struct_memcpy_64b.c":68:54)
#loc95 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_struct_memcpy_64b.c":68:9)
#loc96 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_struct_memcpy_64b.c":68:55)
#loc97 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_struct_memcpy_64b.c":69:26)
#loc98 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_struct_memcpy_64b.c":69:31)
#loc99 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_struct_memcpy_64b.c":69:32)
#loc100 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_struct_memcpy_64b.c":69:9)
#loc101 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_struct_memcpy_64b.c":70:9)
#loc102 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_struct_memcpy_64b.c":70:14)
#loc103 = loc(fused[#loc1, #loc2])
#loc104 = loc(fused[#loc3, #loc4])
#loc105 = loc(fused[#loc5, #loc6])
#loc107 = loc(fused[#loc9, #loc10])
#loc108 = loc(fused[#loc11, #loc12])
#loc109 = loc(fused[#loc16, #loc17])
#loc110 = loc(fused[#loc18, #loc19])
#loc111 = loc(fused[#loc20, #loc21])
#loc112 = loc(fused[#loc22, #loc23])
#loc113 = loc(fused[#loc24, #loc25])
#loc114 = loc(fused[#loc27, #loc26])
#loc115 = loc(fused[#loc28, #loc29])
#loc116 = loc(fused[#loc31, #loc25])
#loc117 = loc(fused[#loc34, #loc32])
#loc118 = loc(fused[#loc38, #loc36])
#loc119 = loc(fused[#loc41, #loc40])
#loc120 = loc(fused[#loc45, #loc46])
#loc121 = loc(fused[#loc44, #loc46])
#loc122 = loc(fused[#loc47, #loc48])
#loc123 = loc(fused[#loc55, #loc56])
#loc125 = loc(fused[#loc59, #loc60])
#loc126 = loc(fused[#loc61, #loc62])
#loc127 = loc(fused[#loc66, #loc67])
#loc128 = loc(fused[#loc68, #loc69])
#loc129 = loc(fused[#loc70, #loc71])
#loc130 = loc(fused[#loc72, #loc73])
#loc131 = loc(fused[#loc74, #loc75])
#loc132 = loc(fused[#loc77, #loc76])
#loc133 = loc(fused[#loc78, #loc79])
#loc134 = loc(fused[#loc81, #loc75])
#loc135 = loc(fused[#loc84, #loc82])
#loc136 = loc(fused[#loc87, #loc85])
#loc137 = loc(fused[#loc89, #loc88])
#loc138 = loc(fused[#loc93, #loc94])
#loc139 = loc(fused[#loc92, #loc94])
#loc140 = loc(fused[#loc95, #loc96])
