!s32i = !cir.int<s, 32>
!u64i = !cir.int<u, 64>
!void = !cir.void
#fn_attr = #cir<extra({inline = #cir.inline<no>, optnone = #cir.optnone, uwtable = #cir.uwtable<async>})>
!ty_TwoIntsClass = !cir.record<class "TwoIntsClass" {!s32i, !s32i} #cir.record.decl.ast>
module @"/workspaces/juliet-c/testcases/CWE122_Heap_Based_Buffer_Overflow/s03/CWE122_Heap_Based_Buffer_Overflow__cpp_CWE805_class_memmove_61a.cpp" attributes {cir.lang = #cir.lang<cxx>, cir.sob = #cir.signed_overflow_behavior<undefined>, cir.triple = "x86_64-unknown-linux-gnu", cir.type_size_info = #cir.type_size_info<char = 8, int = 32, size_t = 64>, cir.uwtable = #cir.uwtable<async>, dlti.dl_spec = #dlti.dl_spec<!llvm.ptr = dense<64> : vector<4xi64>, i1 = dense<8> : vector<2xi64>, f80 = dense<128> : vector<2xi64>, i128 = dense<128> : vector<2xi64>, !llvm.ptr<272> = dense<64> : vector<4xi64>, i64 = dense<64> : vector<2xi64>, f128 = dense<128> : vector<2xi64>, !llvm.ptr<270> = dense<32> : vector<4xi64>, !llvm.ptr<271> = dense<32> : vector<4xi64>, f16 = dense<16> : vector<2xi64>, f64 = dense<64> : vector<2xi64>, i32 = dense<32> : vector<2xi64>, i8 = dense<8> : vector<2xi64>, i16 = dense<16> : vector<2xi64>, "dlti.stack_alignment" = 128 : i64, "dlti.endianness" = "little", "dlti.mangling_mode" = "e">} {
  cir.func private @_ZN62CWE122_Heap_Based_Buffer_Overflow__cpp_CWE805_class_memmove_619badSourceEP12TwoIntsClass(!cir.ptr<!ty_TwoIntsClass>) -> !cir.ptr<!ty_TwoIntsClass> loc(#loc104)
  cir.func private @printIntLine(!s32i) loc(#loc105)
  cir.func @_ZN62CWE122_Heap_Based_Buffer_Overflow__cpp_CWE805_class_memmove_613badEv() extra(#fn_attr) {
    %0 = cir.alloca !cir.ptr<!ty_TwoIntsClass>, !cir.ptr<!cir.ptr<!ty_TwoIntsClass>>, ["data"] {alignment = 8 : i64} loc(#loc107)
    %1 = cir.const #cir.ptr<null> : !cir.ptr<!ty_TwoIntsClass> loc(#loc9)
    cir.store %1, %0 : !cir.ptr<!ty_TwoIntsClass>, !cir.ptr<!cir.ptr<!ty_TwoIntsClass>> loc(#loc108)
    %2 = cir.load %0 : !cir.ptr<!cir.ptr<!ty_TwoIntsClass>>, !cir.ptr<!ty_TwoIntsClass> loc(#loc11)
    %3 = cir.call @_ZN62CWE122_Heap_Based_Buffer_Overflow__cpp_CWE805_class_memmove_619badSourceEP12TwoIntsClass(%2) : (!cir.ptr<!ty_TwoIntsClass>) -> !cir.ptr<!ty_TwoIntsClass> loc(#loc12)
    cir.store %3, %0 : !cir.ptr<!ty_TwoIntsClass>, !cir.ptr<!cir.ptr<!ty_TwoIntsClass>> loc(#loc109)
    cir.scope {
      %4 = cir.alloca !cir.array<!ty_TwoIntsClass x 100>, !cir.ptr<!cir.array<!ty_TwoIntsClass x 100>>, ["source"] {alignment = 16 : i64} loc(#loc111)
      cir.scope {
        %19 = cir.alloca !u64i, !cir.ptr<!u64i>, ["i"] {alignment = 8 : i64} loc(#loc113)
        cir.scope {
          %20 = cir.const #cir.int<0> : !s32i loc(#loc25)
          %21 = cir.cast(integral, %20 : !s32i), !u64i loc(#loc25)
          cir.store %21, %19 : !u64i, !cir.ptr<!u64i> loc(#loc115)
          cir.for : cond {
            %22 = cir.load %19 : !cir.ptr<!u64i>, !u64i loc(#loc27)
            %23 = cir.const #cir.int<100> : !s32i loc(#loc28)
            %24 = cir.cast(integral, %23 : !s32i), !u64i loc(#loc28)
            %25 = cir.cmp(lt, %22, %24) : !u64i, !cir.bool loc(#loc116)
            cir.condition(%25) loc(#loc116)
          } body {
            cir.scope {
              %22 = cir.const #cir.int<0> : !s32i loc(#loc30)
              %23 = cir.load %19 : !cir.ptr<!u64i>, !u64i loc(#loc31)
              %24 = cir.cast(array_to_ptrdecay, %4 : !cir.ptr<!cir.array<!ty_TwoIntsClass x 100>>), !cir.ptr<!ty_TwoIntsClass> loc(#loc32)
              %25 = cir.ptr_stride(%24 : !cir.ptr<!ty_TwoIntsClass>, %23 : !u64i), !cir.ptr<!ty_TwoIntsClass> loc(#loc32)
              %26 = cir.get_member %25[0] {name = "intOne"} : !cir.ptr<!ty_TwoIntsClass> -> !cir.ptr<!s32i> loc(#loc33)
              cir.store %22, %26 : !s32i, !cir.ptr<!s32i> loc(#loc118)
              %27 = cir.const #cir.int<0> : !s32i loc(#loc34)
              %28 = cir.load %19 : !cir.ptr<!u64i>, !u64i loc(#loc35)
              %29 = cir.cast(array_to_ptrdecay, %4 : !cir.ptr<!cir.array<!ty_TwoIntsClass x 100>>), !cir.ptr<!ty_TwoIntsClass> loc(#loc36)
              %30 = cir.ptr_stride(%29 : !cir.ptr<!ty_TwoIntsClass>, %28 : !u64i), !cir.ptr<!ty_TwoIntsClass> loc(#loc36)
              %31 = cir.get_member %30[1] {name = "intTwo"} : !cir.ptr<!ty_TwoIntsClass> -> !cir.ptr<!s32i> loc(#loc37)
              cir.store %27, %31 : !s32i, !cir.ptr<!s32i> loc(#loc119)
            } loc(#loc117)
            cir.yield loc(#loc24)
          } step {
            %22 = cir.load %19 : !cir.ptr<!u64i>, !u64i loc(#loc38)
            %23 = cir.unary(inc, %22) : !u64i, !u64i loc(#loc39)
            cir.store %23, %19 : !u64i, !cir.ptr<!u64i> loc(#loc120)
            cir.yield loc(#loc114)
          } loc(#loc114)
        } loc(#loc114)
      } loc(#loc112)
      %5 = cir.load %0 : !cir.ptr<!cir.ptr<!ty_TwoIntsClass>>, !cir.ptr<!ty_TwoIntsClass> loc(#loc40)
      %6 = cir.cast(bitcast, %5 : !cir.ptr<!ty_TwoIntsClass>), !cir.ptr<!void> loc(#loc40)
      %7 = cir.cast(array_to_ptrdecay, %4 : !cir.ptr<!cir.array<!ty_TwoIntsClass x 100>>), !cir.ptr<!ty_TwoIntsClass> loc(#loc41)
      %8 = cir.cast(bitcast, %7 : !cir.ptr<!ty_TwoIntsClass>), !cir.ptr<!void> loc(#loc41)
      %9 = cir.const #cir.int<100> : !s32i loc(#loc42)
      %10 = cir.cast(integral, %9 : !s32i), !u64i loc(#loc42)
      %11 = cir.const #cir.int<8> : !u64i loc(#loc121)
      %12 = cir.binop(mul, %10, %11) : !u64i loc(#loc122)
      cir.libc.memmove %12 bytes from %8 to %6 : !cir.ptr<!void>, !u64i loc(#loc123)
      %13 = cir.load %0 : !cir.ptr<!cir.ptr<!ty_TwoIntsClass>>, !cir.ptr<!ty_TwoIntsClass> loc(#loc47)
      %14 = cir.const #cir.int<0> : !s32i loc(#loc48)
      %15 = cir.ptr_stride(%13 : !cir.ptr<!ty_TwoIntsClass>, %14 : !s32i), !cir.ptr<!ty_TwoIntsClass> loc(#loc49)
      %16 = cir.get_member %15[0] {name = "intOne"} : !cir.ptr<!ty_TwoIntsClass> -> !cir.ptr<!s32i> loc(#loc33)
      %17 = cir.load %16 : !cir.ptr<!s32i>, !s32i loc(#loc50)
      cir.call @printIntLine(%17) : (!s32i) -> () loc(#loc51)
      %18 = cir.load %0 : !cir.ptr<!cir.ptr<!ty_TwoIntsClass>>, !cir.ptr<!ty_TwoIntsClass> loc(#loc52)
      cir.delete.array %18 : <!ty_TwoIntsClass> loc(#loc52)
    } loc(#loc110)
    cir.return loc(#loc6)
  } loc(#loc106)
  cir.func private @_ZN62CWE122_Heap_Based_Buffer_Overflow__cpp_CWE805_class_memmove_6113goodG2BSourceEP12TwoIntsClass(!cir.ptr<!ty_TwoIntsClass>) -> !cir.ptr<!ty_TwoIntsClass> loc(#loc124)
  cir.func internal private @_ZN62CWE122_Heap_Based_Buffer_Overflow__cpp_CWE805_class_memmove_61L7goodG2BEv() extra(#fn_attr) {
    %0 = cir.alloca !cir.ptr<!ty_TwoIntsClass>, !cir.ptr<!cir.ptr<!ty_TwoIntsClass>>, ["data"] {alignment = 8 : i64} loc(#loc126)
    %1 = cir.const #cir.ptr<null> : !cir.ptr<!ty_TwoIntsClass> loc(#loc59)
    cir.store %1, %0 : !cir.ptr<!ty_TwoIntsClass>, !cir.ptr<!cir.ptr<!ty_TwoIntsClass>> loc(#loc127)
    %2 = cir.load %0 : !cir.ptr<!cir.ptr<!ty_TwoIntsClass>>, !cir.ptr<!ty_TwoIntsClass> loc(#loc61)
    %3 = cir.call @_ZN62CWE122_Heap_Based_Buffer_Overflow__cpp_CWE805_class_memmove_6113goodG2BSourceEP12TwoIntsClass(%2) : (!cir.ptr<!ty_TwoIntsClass>) -> !cir.ptr<!ty_TwoIntsClass> loc(#loc62)
    cir.store %3, %0 : !cir.ptr<!ty_TwoIntsClass>, !cir.ptr<!cir.ptr<!ty_TwoIntsClass>> loc(#loc128)
    cir.scope {
      %4 = cir.alloca !cir.array<!ty_TwoIntsClass x 100>, !cir.ptr<!cir.array<!ty_TwoIntsClass x 100>>, ["source"] {alignment = 16 : i64} loc(#loc130)
      cir.scope {
        %19 = cir.alloca !u64i, !cir.ptr<!u64i>, ["i"] {alignment = 8 : i64} loc(#loc132)
        cir.scope {
          %20 = cir.const #cir.int<0> : !s32i loc(#loc75)
          %21 = cir.cast(integral, %20 : !s32i), !u64i loc(#loc75)
          cir.store %21, %19 : !u64i, !cir.ptr<!u64i> loc(#loc134)
          cir.for : cond {
            %22 = cir.load %19 : !cir.ptr<!u64i>, !u64i loc(#loc77)
            %23 = cir.const #cir.int<100> : !s32i loc(#loc78)
            %24 = cir.cast(integral, %23 : !s32i), !u64i loc(#loc78)
            %25 = cir.cmp(lt, %22, %24) : !u64i, !cir.bool loc(#loc135)
            cir.condition(%25) loc(#loc135)
          } body {
            cir.scope {
              %22 = cir.const #cir.int<0> : !s32i loc(#loc80)
              %23 = cir.load %19 : !cir.ptr<!u64i>, !u64i loc(#loc81)
              %24 = cir.cast(array_to_ptrdecay, %4 : !cir.ptr<!cir.array<!ty_TwoIntsClass x 100>>), !cir.ptr<!ty_TwoIntsClass> loc(#loc82)
              %25 = cir.ptr_stride(%24 : !cir.ptr<!ty_TwoIntsClass>, %23 : !u64i), !cir.ptr<!ty_TwoIntsClass> loc(#loc82)
              %26 = cir.get_member %25[0] {name = "intOne"} : !cir.ptr<!ty_TwoIntsClass> -> !cir.ptr<!s32i> loc(#loc33)
              cir.store %22, %26 : !s32i, !cir.ptr<!s32i> loc(#loc137)
              %27 = cir.const #cir.int<0> : !s32i loc(#loc83)
              %28 = cir.load %19 : !cir.ptr<!u64i>, !u64i loc(#loc84)
              %29 = cir.cast(array_to_ptrdecay, %4 : !cir.ptr<!cir.array<!ty_TwoIntsClass x 100>>), !cir.ptr<!ty_TwoIntsClass> loc(#loc85)
              %30 = cir.ptr_stride(%29 : !cir.ptr<!ty_TwoIntsClass>, %28 : !u64i), !cir.ptr<!ty_TwoIntsClass> loc(#loc85)
              %31 = cir.get_member %30[1] {name = "intTwo"} : !cir.ptr<!ty_TwoIntsClass> -> !cir.ptr<!s32i> loc(#loc37)
              cir.store %27, %31 : !s32i, !cir.ptr<!s32i> loc(#loc138)
            } loc(#loc136)
            cir.yield loc(#loc74)
          } step {
            %22 = cir.load %19 : !cir.ptr<!u64i>, !u64i loc(#loc86)
            %23 = cir.unary(inc, %22) : !u64i, !u64i loc(#loc87)
            cir.store %23, %19 : !u64i, !cir.ptr<!u64i> loc(#loc139)
            cir.yield loc(#loc133)
          } loc(#loc133)
        } loc(#loc133)
      } loc(#loc131)
      %5 = cir.load %0 : !cir.ptr<!cir.ptr<!ty_TwoIntsClass>>, !cir.ptr<!ty_TwoIntsClass> loc(#loc88)
      %6 = cir.cast(bitcast, %5 : !cir.ptr<!ty_TwoIntsClass>), !cir.ptr<!void> loc(#loc88)
      %7 = cir.cast(array_to_ptrdecay, %4 : !cir.ptr<!cir.array<!ty_TwoIntsClass x 100>>), !cir.ptr<!ty_TwoIntsClass> loc(#loc89)
      %8 = cir.cast(bitcast, %7 : !cir.ptr<!ty_TwoIntsClass>), !cir.ptr<!void> loc(#loc89)
      %9 = cir.const #cir.int<100> : !s32i loc(#loc90)
      %10 = cir.cast(integral, %9 : !s32i), !u64i loc(#loc90)
      %11 = cir.const #cir.int<8> : !u64i loc(#loc140)
      %12 = cir.binop(mul, %10, %11) : !u64i loc(#loc141)
      cir.libc.memmove %12 bytes from %8 to %6 : !cir.ptr<!void>, !u64i loc(#loc142)
      %13 = cir.load %0 : !cir.ptr<!cir.ptr<!ty_TwoIntsClass>>, !cir.ptr<!ty_TwoIntsClass> loc(#loc95)
      %14 = cir.const #cir.int<0> : !s32i loc(#loc96)
      %15 = cir.ptr_stride(%13 : !cir.ptr<!ty_TwoIntsClass>, %14 : !s32i), !cir.ptr<!ty_TwoIntsClass> loc(#loc97)
      %16 = cir.get_member %15[0] {name = "intOne"} : !cir.ptr<!ty_TwoIntsClass> -> !cir.ptr<!s32i> loc(#loc33)
      %17 = cir.load %16 : !cir.ptr<!s32i>, !s32i loc(#loc98)
      cir.call @printIntLine(%17) : (!s32i) -> () loc(#loc99)
      %18 = cir.load %0 : !cir.ptr<!cir.ptr<!ty_TwoIntsClass>>, !cir.ptr<!ty_TwoIntsClass> loc(#loc100)
      cir.delete.array %18 : <!ty_TwoIntsClass> loc(#loc100)
    } loc(#loc129)
    cir.return loc(#loc56)
  } loc(#loc125)
  cir.func @_ZN62CWE122_Heap_Based_Buffer_Overflow__cpp_CWE805_class_memmove_614goodEv() extra(#fn_attr) {
    cir.call @_ZN62CWE122_Heap_Based_Buffer_Overflow__cpp_CWE805_class_memmove_61L7goodG2BEv() : () -> () loc(#loc103)
    cir.return loc(#loc102)
  } loc(#loc143)
} loc(#loc)
#loc = loc("/workspaces/juliet-c/testcases/CWE122_Heap_Based_Buffer_Overflow/s03/CWE122_Heap_Based_Buffer_Overflow__cpp_CWE805_class_memmove_61a.cpp":0:0)
#loc1 = loc("CWE122_Heap_Based_Buffer_Overflow__cpp_CWE805_class_memmove_61a.cpp":25:1)
#loc2 = loc("CWE122_Heap_Based_Buffer_Overflow__cpp_CWE805_class_memmove_61a.cpp":25:45)
#loc3 = loc("../../../testcasesupport/std_testcase_io.h":18:1)
#loc4 = loc("../../../testcasesupport/std_testcase_io.h":18:33)
#loc5 = loc("CWE122_Heap_Based_Buffer_Overflow__cpp_CWE805_class_memmove_61a.cpp":27:1)
#loc6 = loc("CWE122_Heap_Based_Buffer_Overflow__cpp_CWE805_class_memmove_61a.cpp":48:1)
#loc7 = loc("CWE122_Heap_Based_Buffer_Overflow__cpp_CWE805_class_memmove_61a.cpp":29:5)
#loc8 = loc("CWE122_Heap_Based_Buffer_Overflow__cpp_CWE805_class_memmove_61a.cpp":29:20)
#loc9 = loc("CWE122_Heap_Based_Buffer_Overflow__cpp_CWE805_class_memmove_61a.cpp":30:12)
#loc10 = loc("CWE122_Heap_Based_Buffer_Overflow__cpp_CWE805_class_memmove_61a.cpp":30:5)
#loc11 = loc("CWE122_Heap_Based_Buffer_Overflow__cpp_CWE805_class_memmove_61a.cpp":31:22)
#loc12 = loc("CWE122_Heap_Based_Buffer_Overflow__cpp_CWE805_class_memmove_61a.cpp":31:12)
#loc13 = loc("CWE122_Heap_Based_Buffer_Overflow__cpp_CWE805_class_memmove_61a.cpp":31:5)
#loc14 = loc("CWE122_Heap_Based_Buffer_Overflow__cpp_CWE805_class_memmove_61a.cpp":31:26)
#loc15 = loc("CWE122_Heap_Based_Buffer_Overflow__cpp_CWE805_class_memmove_61a.cpp":32:5)
#loc16 = loc("CWE122_Heap_Based_Buffer_Overflow__cpp_CWE805_class_memmove_61a.cpp":47:5)
#loc17 = loc("CWE122_Heap_Based_Buffer_Overflow__cpp_CWE805_class_memmove_61a.cpp":33:9)
#loc18 = loc("CWE122_Heap_Based_Buffer_Overflow__cpp_CWE805_class_memmove_61a.cpp":33:32)
#loc19 = loc("CWE122_Heap_Based_Buffer_Overflow__cpp_CWE805_class_memmove_61a.cpp":34:9)
#loc20 = loc("CWE122_Heap_Based_Buffer_Overflow__cpp_CWE805_class_memmove_61a.cpp":42:9)
#loc21 = loc("CWE122_Heap_Based_Buffer_Overflow__cpp_CWE805_class_memmove_61a.cpp":35:13)
#loc22 = loc("CWE122_Heap_Based_Buffer_Overflow__cpp_CWE805_class_memmove_61a.cpp":35:20)
#loc23 = loc("CWE122_Heap_Based_Buffer_Overflow__cpp_CWE805_class_memmove_61a.cpp":37:13)
#loc24 = loc("CWE122_Heap_Based_Buffer_Overflow__cpp_CWE805_class_memmove_61a.cpp":41:13)
#loc25 = loc("CWE122_Heap_Based_Buffer_Overflow__cpp_CWE805_class_memmove_61a.cpp":37:22)
#loc26 = loc("CWE122_Heap_Based_Buffer_Overflow__cpp_CWE805_class_memmove_61a.cpp":37:18)
#loc27 = loc("CWE122_Heap_Based_Buffer_Overflow__cpp_CWE805_class_memmove_61a.cpp":37:25)
#loc28 = loc("CWE122_Heap_Based_Buffer_Overflow__cpp_CWE805_class_memmove_61a.cpp":37:29)
#loc29 = loc("CWE122_Heap_Based_Buffer_Overflow__cpp_CWE805_class_memmove_61a.cpp":38:13)
#loc30 = loc("CWE122_Heap_Based_Buffer_Overflow__cpp_CWE805_class_memmove_61a.cpp":39:36)
#loc31 = loc("CWE122_Heap_Based_Buffer_Overflow__cpp_CWE805_class_memmove_61a.cpp":39:24)
#loc32 = loc("CWE122_Heap_Based_Buffer_Overflow__cpp_CWE805_class_memmove_61a.cpp":39:17)
#loc33 = loc("../../../testcasesupport/std_testcase.h":64:13)
#loc34 = loc("CWE122_Heap_Based_Buffer_Overflow__cpp_CWE805_class_memmove_61a.cpp":40:36)
#loc35 = loc("CWE122_Heap_Based_Buffer_Overflow__cpp_CWE805_class_memmove_61a.cpp":40:24)
#loc36 = loc("CWE122_Heap_Based_Buffer_Overflow__cpp_CWE805_class_memmove_61a.cpp":40:17)
#loc37 = loc("../../../testcasesupport/std_testcase.h":65:13)
#loc38 = loc("CWE122_Heap_Based_Buffer_Overflow__cpp_CWE805_class_memmove_61a.cpp":37:35)
#loc39 = loc("CWE122_Heap_Based_Buffer_Overflow__cpp_CWE805_class_memmove_61a.cpp":37:34)
#loc40 = loc("CWE122_Heap_Based_Buffer_Overflow__cpp_CWE805_class_memmove_61a.cpp":44:17)
#loc41 = loc("CWE122_Heap_Based_Buffer_Overflow__cpp_CWE805_class_memmove_61a.cpp":44:23)
#loc42 = loc("CWE122_Heap_Based_Buffer_Overflow__cpp_CWE805_class_memmove_61a.cpp":44:31)
#loc43 = loc("CWE122_Heap_Based_Buffer_Overflow__cpp_CWE805_class_memmove_61a.cpp":44:35)
#loc44 = loc("CWE122_Heap_Based_Buffer_Overflow__cpp_CWE805_class_memmove_61a.cpp":44:54)
#loc45 = loc("CWE122_Heap_Based_Buffer_Overflow__cpp_CWE805_class_memmove_61a.cpp":44:9)
#loc46 = loc("CWE122_Heap_Based_Buffer_Overflow__cpp_CWE805_class_memmove_61a.cpp":44:55)
#loc47 = loc("CWE122_Heap_Based_Buffer_Overflow__cpp_CWE805_class_memmove_61a.cpp":45:22)
#loc48 = loc("CWE122_Heap_Based_Buffer_Overflow__cpp_CWE805_class_memmove_61a.cpp":45:27)
#loc49 = loc("CWE122_Heap_Based_Buffer_Overflow__cpp_CWE805_class_memmove_61a.cpp":45:28)
#loc50 = loc("CWE122_Heap_Based_Buffer_Overflow__cpp_CWE805_class_memmove_61a.cpp":45:30)
#loc51 = loc("CWE122_Heap_Based_Buffer_Overflow__cpp_CWE805_class_memmove_61a.cpp":45:9)
#loc52 = loc("CWE122_Heap_Based_Buffer_Overflow__cpp_CWE805_class_memmove_61a.cpp":46:19)
#loc53 = loc("CWE122_Heap_Based_Buffer_Overflow__cpp_CWE805_class_memmove_61a.cpp":55:1)
#loc54 = loc("CWE122_Heap_Based_Buffer_Overflow__cpp_CWE805_class_memmove_61a.cpp":55:49)
#loc55 = loc("CWE122_Heap_Based_Buffer_Overflow__cpp_CWE805_class_memmove_61a.cpp":57:1)
#loc56 = loc("CWE122_Heap_Based_Buffer_Overflow__cpp_CWE805_class_memmove_61a.cpp":78:1)
#loc57 = loc("CWE122_Heap_Based_Buffer_Overflow__cpp_CWE805_class_memmove_61a.cpp":59:5)
#loc58 = loc("CWE122_Heap_Based_Buffer_Overflow__cpp_CWE805_class_memmove_61a.cpp":59:20)
#loc59 = loc("CWE122_Heap_Based_Buffer_Overflow__cpp_CWE805_class_memmove_61a.cpp":60:12)
#loc60 = loc("CWE122_Heap_Based_Buffer_Overflow__cpp_CWE805_class_memmove_61a.cpp":60:5)
#loc61 = loc("CWE122_Heap_Based_Buffer_Overflow__cpp_CWE805_class_memmove_61a.cpp":61:26)
#loc62 = loc("CWE122_Heap_Based_Buffer_Overflow__cpp_CWE805_class_memmove_61a.cpp":61:12)
#loc63 = loc("CWE122_Heap_Based_Buffer_Overflow__cpp_CWE805_class_memmove_61a.cpp":61:5)
#loc64 = loc("CWE122_Heap_Based_Buffer_Overflow__cpp_CWE805_class_memmove_61a.cpp":61:30)
#loc65 = loc("CWE122_Heap_Based_Buffer_Overflow__cpp_CWE805_class_memmove_61a.cpp":62:5)
#loc66 = loc("CWE122_Heap_Based_Buffer_Overflow__cpp_CWE805_class_memmove_61a.cpp":77:5)
#loc67 = loc("CWE122_Heap_Based_Buffer_Overflow__cpp_CWE805_class_memmove_61a.cpp":63:9)
#loc68 = loc("CWE122_Heap_Based_Buffer_Overflow__cpp_CWE805_class_memmove_61a.cpp":63:32)
#loc69 = loc("CWE122_Heap_Based_Buffer_Overflow__cpp_CWE805_class_memmove_61a.cpp":64:9)
#loc70 = loc("CWE122_Heap_Based_Buffer_Overflow__cpp_CWE805_class_memmove_61a.cpp":72:9)
#loc71 = loc("CWE122_Heap_Based_Buffer_Overflow__cpp_CWE805_class_memmove_61a.cpp":65:13)
#loc72 = loc("CWE122_Heap_Based_Buffer_Overflow__cpp_CWE805_class_memmove_61a.cpp":65:20)
#loc73 = loc("CWE122_Heap_Based_Buffer_Overflow__cpp_CWE805_class_memmove_61a.cpp":67:13)
#loc74 = loc("CWE122_Heap_Based_Buffer_Overflow__cpp_CWE805_class_memmove_61a.cpp":71:13)
#loc75 = loc("CWE122_Heap_Based_Buffer_Overflow__cpp_CWE805_class_memmove_61a.cpp":67:22)
#loc76 = loc("CWE122_Heap_Based_Buffer_Overflow__cpp_CWE805_class_memmove_61a.cpp":67:18)
#loc77 = loc("CWE122_Heap_Based_Buffer_Overflow__cpp_CWE805_class_memmove_61a.cpp":67:25)
#loc78 = loc("CWE122_Heap_Based_Buffer_Overflow__cpp_CWE805_class_memmove_61a.cpp":67:29)
#loc79 = loc("CWE122_Heap_Based_Buffer_Overflow__cpp_CWE805_class_memmove_61a.cpp":68:13)
#loc80 = loc("CWE122_Heap_Based_Buffer_Overflow__cpp_CWE805_class_memmove_61a.cpp":69:36)
#loc81 = loc("CWE122_Heap_Based_Buffer_Overflow__cpp_CWE805_class_memmove_61a.cpp":69:24)
#loc82 = loc("CWE122_Heap_Based_Buffer_Overflow__cpp_CWE805_class_memmove_61a.cpp":69:17)
#loc83 = loc("CWE122_Heap_Based_Buffer_Overflow__cpp_CWE805_class_memmove_61a.cpp":70:36)
#loc84 = loc("CWE122_Heap_Based_Buffer_Overflow__cpp_CWE805_class_memmove_61a.cpp":70:24)
#loc85 = loc("CWE122_Heap_Based_Buffer_Overflow__cpp_CWE805_class_memmove_61a.cpp":70:17)
#loc86 = loc("CWE122_Heap_Based_Buffer_Overflow__cpp_CWE805_class_memmove_61a.cpp":67:35)
#loc87 = loc("CWE122_Heap_Based_Buffer_Overflow__cpp_CWE805_class_memmove_61a.cpp":67:34)
#loc88 = loc("CWE122_Heap_Based_Buffer_Overflow__cpp_CWE805_class_memmove_61a.cpp":74:17)
#loc89 = loc("CWE122_Heap_Based_Buffer_Overflow__cpp_CWE805_class_memmove_61a.cpp":74:23)
#loc90 = loc("CWE122_Heap_Based_Buffer_Overflow__cpp_CWE805_class_memmove_61a.cpp":74:31)
#loc91 = loc("CWE122_Heap_Based_Buffer_Overflow__cpp_CWE805_class_memmove_61a.cpp":74:35)
#loc92 = loc("CWE122_Heap_Based_Buffer_Overflow__cpp_CWE805_class_memmove_61a.cpp":74:54)
#loc93 = loc("CWE122_Heap_Based_Buffer_Overflow__cpp_CWE805_class_memmove_61a.cpp":74:9)
#loc94 = loc("CWE122_Heap_Based_Buffer_Overflow__cpp_CWE805_class_memmove_61a.cpp":74:55)
#loc95 = loc("CWE122_Heap_Based_Buffer_Overflow__cpp_CWE805_class_memmove_61a.cpp":75:22)
#loc96 = loc("CWE122_Heap_Based_Buffer_Overflow__cpp_CWE805_class_memmove_61a.cpp":75:27)
#loc97 = loc("CWE122_Heap_Based_Buffer_Overflow__cpp_CWE805_class_memmove_61a.cpp":75:28)
#loc98 = loc("CWE122_Heap_Based_Buffer_Overflow__cpp_CWE805_class_memmove_61a.cpp":75:30)
#loc99 = loc("CWE122_Heap_Based_Buffer_Overflow__cpp_CWE805_class_memmove_61a.cpp":75:9)
#loc100 = loc("CWE122_Heap_Based_Buffer_Overflow__cpp_CWE805_class_memmove_61a.cpp":76:19)
#loc101 = loc("CWE122_Heap_Based_Buffer_Overflow__cpp_CWE805_class_memmove_61a.cpp":80:1)
#loc102 = loc("CWE122_Heap_Based_Buffer_Overflow__cpp_CWE805_class_memmove_61a.cpp":83:1)
#loc103 = loc("CWE122_Heap_Based_Buffer_Overflow__cpp_CWE805_class_memmove_61a.cpp":82:5)
#loc104 = loc(fused[#loc1, #loc2])
#loc105 = loc(fused[#loc3, #loc4])
#loc106 = loc(fused[#loc5, #loc6])
#loc107 = loc(fused[#loc7, #loc8])
#loc108 = loc(fused[#loc10, #loc9])
#loc109 = loc(fused[#loc13, #loc14])
#loc110 = loc(fused[#loc15, #loc16])
#loc111 = loc(fused[#loc17, #loc18])
#loc112 = loc(fused[#loc19, #loc20])
#loc113 = loc(fused[#loc21, #loc22])
#loc114 = loc(fused[#loc23, #loc24])
#loc115 = loc(fused[#loc26, #loc25])
#loc116 = loc(fused[#loc27, #loc28])
#loc117 = loc(fused[#loc29, #loc24])
#loc118 = loc(fused[#loc32, #loc30])
#loc119 = loc(fused[#loc36, #loc34])
#loc120 = loc(fused[#loc39, #loc38])
#loc121 = loc(fused[#loc43, #loc44])
#loc122 = loc(fused[#loc42, #loc44])
#loc123 = loc(fused[#loc45, #loc46])
#loc124 = loc(fused[#loc53, #loc54])
#loc125 = loc(fused[#loc55, #loc56])
#loc126 = loc(fused[#loc57, #loc58])
#loc127 = loc(fused[#loc60, #loc59])
#loc128 = loc(fused[#loc63, #loc64])
#loc129 = loc(fused[#loc65, #loc66])
#loc130 = loc(fused[#loc67, #loc68])
#loc131 = loc(fused[#loc69, #loc70])
#loc132 = loc(fused[#loc71, #loc72])
#loc133 = loc(fused[#loc73, #loc74])
#loc134 = loc(fused[#loc76, #loc75])
#loc135 = loc(fused[#loc77, #loc78])
#loc136 = loc(fused[#loc79, #loc74])
#loc137 = loc(fused[#loc82, #loc80])
#loc138 = loc(fused[#loc85, #loc83])
#loc139 = loc(fused[#loc87, #loc86])
#loc140 = loc(fused[#loc91, #loc92])
#loc141 = loc(fused[#loc90, #loc92])
#loc142 = loc(fused[#loc93, #loc94])
#loc143 = loc(fused[#loc101, #loc102])
