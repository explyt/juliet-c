!s32i = !cir.int<s, 32>
!s8i = !cir.int<s, 8>
#fn_attr = #cir<extra({nothrow = #cir.nothrow})>
#fn_attr1 = #cir<extra({inline = #cir.inline<no>, nothrow = #cir.nothrow, optnone = #cir.optnone, uwtable = #cir.uwtable<async>})>
module @"/workspaces/juliet-c/testcases/CWE511_Logic_Time_Bomb/CWE511_Logic_Time_Bomb__counter_17.c" attributes {cir.lang = #cir.lang<c>, cir.sob = #cir.signed_overflow_behavior<undefined>, cir.triple = "x86_64-unknown-linux-gnu", cir.type_size_info = #cir.type_size_info<char = 8, int = 32, size_t = 64>, cir.uwtable = #cir.uwtable<async>, dlti.dl_spec = #dlti.dl_spec<i64 = dense<64> : vector<2xi64>, i32 = dense<32> : vector<2xi64>, !llvm.ptr<272> = dense<64> : vector<4xi64>, !llvm.ptr<271> = dense<32> : vector<4xi64>, f16 = dense<16> : vector<2xi64>, f64 = dense<64> : vector<2xi64>, f128 = dense<128> : vector<2xi64>, !llvm.ptr = dense<64> : vector<4xi64>, i1 = dense<8> : vector<2xi64>, !llvm.ptr<270> = dense<32> : vector<4xi64>, i8 = dense<8> : vector<2xi64>, i16 = dense<16> : vector<2xi64>, i128 = dense<128> : vector<2xi64>, f80 = dense<128> : vector<2xi64>, "dlti.mangling_mode" = "e", "dlti.endianness" = "little", "dlti.stack_alignment" = 128 : i64>} {
  cir.func private @unlink(!cir.ptr<!s8i>) -> !s32i extra(#fn_attr) loc(#loc77)
  cir.global "private" constant cir_private dsolocal @".str" = #cir.const_array<"important_file.txt\00" : !cir.array<!s8i x 19>> : !cir.array<!s8i x 19> {alignment = 1 : i64} loc(#loc3)
  cir.func no_proto @CWE511_Logic_Time_Bomb__counter_17_bad() extra(#fn_attr1) {
    %0 = cir.alloca !s32i, !cir.ptr<!s32i>, ["j"] {alignment = 4 : i64} loc(#loc79)
    cir.scope {
      %1 = cir.const #cir.int<0> : !s32i loc(#loc10)
      cir.store %1, %0 : !s32i, !cir.ptr<!s32i> loc(#loc81)
      cir.for : cond {
        %2 = cir.load %0 : !cir.ptr<!s32i>, !s32i loc(#loc12)
        %3 = cir.const #cir.int<1> : !s32i loc(#loc13)
        %4 = cir.cmp(lt, %2, %3) : !s32i, !cir.bool loc(#loc82)
        cir.condition(%4) loc(#loc14)
      } body {
        cir.scope {
          cir.scope {
            %2 = cir.alloca !s32i, !cir.ptr<!s32i>, ["count", init] {alignment = 4 : i64} loc(#loc85)
            %3 = cir.const #cir.int<0> : !s32i loc(#loc19)
            cir.store %3, %2 : !s32i, !cir.ptr<!s32i> loc(#loc85)
            cir.scope {
              cir.do {
                cir.scope {
                  cir.scope {
                    %6 = cir.load %2 : !cir.ptr<!s32i>, !s32i loc(#loc26)
                    %7 = cir.const #cir.int<20000> : !s32i loc(#loc27)
                    %8 = cir.cmp(eq, %6, %7) : !s32i, !cir.bool loc(#loc89)
                    cir.if %8 {
                      %9 = cir.get_global @".str" : !cir.ptr<!cir.array<!s8i x 19>> loc(#loc3)
                      %10 = cir.cast(array_to_ptrdecay, %9 : !cir.ptr<!cir.array<!s8i x 19>>), !cir.ptr<!s8i> loc(#loc3)
                      %11 = cir.call @unlink(%10) : (!cir.ptr<!s8i>) -> !s32i extra(#fn_attr) loc(#loc29)
                    } loc(#loc90)
                  } loc(#loc88)
                  %4 = cir.load %2 : !cir.ptr<!s32i>, !s32i loc(#loc30)
                  %5 = cir.unary(inc, %4) nsw : !s32i, !s32i loc(#loc31)
                  cir.store %5, %2 : !s32i, !cir.ptr<!s32i> loc(#loc91)
                } loc(#loc87)
                cir.yield loc(#loc21)
              } while {
                %4 = cir.const #cir.int<1> : !s32i loc(#loc32)
                %5 = cir.const #cir.int<1> : !s32i loc(#loc33)
                %6 = cir.cmp(eq, %4, %5) : !s32i, !cir.bool loc(#loc92)
                cir.condition(%6) loc(#loc34)
              } loc(#loc86)
            } loc(#loc86)
          } loc(#loc84)
        } loc(#loc83)
        cir.yield loc(#loc9)
      } step {
        %2 = cir.load %0 : !cir.ptr<!s32i>, !s32i loc(#loc35)
        %3 = cir.unary(inc, %2) nsw : !s32i, !s32i loc(#loc36)
        cir.store %3, %0 : !s32i, !cir.ptr<!s32i> loc(#loc93)
        cir.yield loc(#loc80)
      } loc(#loc80)
    } loc(#loc80)
    cir.return loc(#loc5)
  } loc(#loc78)
  cir.func no_proto @CWE511_Logic_Time_Bomb__counter_17_good() extra(#fn_attr1) {
    %0 = cir.get_global @good1 : !cir.ptr<!cir.func<()>> loc(#loc95)
    cir.call %0() : (!cir.ptr<!cir.func<()>>) -> () loc(#loc39)
    cir.return loc(#loc38)
  } loc(#loc94)
  cir.func private @printLine(!cir.ptr<!s8i>) loc(#loc96)
  cir.global "private" constant cir_private dsolocal @".str.1" = #cir.const_array<"Happy New Year!\00" : !cir.array<!s8i x 16>> : !cir.array<!s8i x 16> {alignment = 1 : i64} loc(#loc43)
  cir.func no_proto internal private @good1() extra(#fn_attr1) {
    %0 = cir.alloca !s32i, !cir.ptr<!s32i>, ["k"] {alignment = 4 : i64} loc(#loc98)
    cir.scope {
      %1 = cir.const #cir.int<0> : !s32i loc(#loc50)
      cir.store %1, %0 : !s32i, !cir.ptr<!s32i> loc(#loc100)
      cir.for : cond {
        %2 = cir.load %0 : !cir.ptr<!s32i>, !s32i loc(#loc52)
        %3 = cir.const #cir.int<1> : !s32i loc(#loc53)
        %4 = cir.cmp(lt, %2, %3) : !s32i, !cir.bool loc(#loc101)
        cir.condition(%4) loc(#loc54)
      } body {
        cir.scope {
          cir.scope {
            %2 = cir.alloca !s32i, !cir.ptr<!s32i>, ["count", init] {alignment = 4 : i64} loc(#loc104)
            %3 = cir.const #cir.int<0> : !s32i loc(#loc59)
            cir.store %3, %2 : !s32i, !cir.ptr<!s32i> loc(#loc104)
            cir.scope {
              cir.do {
                cir.scope {
                  cir.scope {
                    %6 = cir.load %2 : !cir.ptr<!s32i>, !s32i loc(#loc66)
                    %7 = cir.const #cir.int<20000> : !s32i loc(#loc67)
                    %8 = cir.cmp(eq, %6, %7) : !s32i, !cir.bool loc(#loc108)
                    cir.if %8 {
                      %9 = cir.get_global @".str.1" : !cir.ptr<!cir.array<!s8i x 16>> loc(#loc43)
                      %10 = cir.cast(array_to_ptrdecay, %9 : !cir.ptr<!cir.array<!s8i x 16>>), !cir.ptr<!s8i> loc(#loc43)
                      cir.call @printLine(%10) : (!cir.ptr<!s8i>) -> () loc(#loc69)
                    } loc(#loc109)
                  } loc(#loc107)
                  %4 = cir.load %2 : !cir.ptr<!s32i>, !s32i loc(#loc70)
                  %5 = cir.unary(inc, %4) nsw : !s32i, !s32i loc(#loc71)
                  cir.store %5, %2 : !s32i, !cir.ptr<!s32i> loc(#loc110)
                } loc(#loc106)
                cir.yield loc(#loc61)
              } while {
                %4 = cir.const #cir.int<1> : !s32i loc(#loc72)
                %5 = cir.const #cir.int<1> : !s32i loc(#loc73)
                %6 = cir.cmp(eq, %4, %5) : !s32i, !cir.bool loc(#loc111)
                cir.condition(%6) loc(#loc74)
              } loc(#loc105)
            } loc(#loc105)
          } loc(#loc103)
        } loc(#loc102)
        cir.yield loc(#loc49)
      } step {
        %2 = cir.load %0 : !cir.ptr<!s32i>, !s32i loc(#loc75)
        %3 = cir.unary(inc, %2) nsw : !s32i, !s32i loc(#loc76)
        cir.store %3, %0 : !s32i, !cir.ptr<!s32i> loc(#loc112)
        cir.yield loc(#loc99)
      } loc(#loc99)
    } loc(#loc99)
    cir.return loc(#loc45)
  } loc(#loc97)
} loc(#loc)
#loc = loc("/workspaces/juliet-c/testcases/CWE511_Logic_Time_Bomb/CWE511_Logic_Time_Bomb__counter_17.c":0:0)
#loc1 = loc("/usr/include/unistd.h":858:1)
#loc2 = loc("/usr/include/unistd.h":858:48)
#loc3 = loc("CWE511_Logic_Time_Bomb__counter_17.c":41:28)
#loc4 = loc("CWE511_Logic_Time_Bomb__counter_17.c":29:1)
#loc5 = loc("CWE511_Logic_Time_Bomb__counter_17.c":48:1)
#loc6 = loc("CWE511_Logic_Time_Bomb__counter_17.c":31:5)
#loc7 = loc("CWE511_Logic_Time_Bomb__counter_17.c":31:9)
#loc8 = loc("CWE511_Logic_Time_Bomb__counter_17.c":32:5)
#loc9 = loc("CWE511_Logic_Time_Bomb__counter_17.c":47:5)
#loc10 = loc("CWE511_Logic_Time_Bomb__counter_17.c":32:13)
#loc11 = loc("CWE511_Logic_Time_Bomb__counter_17.c":32:9)
#loc12 = loc("CWE511_Logic_Time_Bomb__counter_17.c":32:16)
#loc13 = loc("CWE511_Logic_Time_Bomb__counter_17.c":32:20)
#loc14 = loc("CWE511_Logic_Time_Bomb__counter_17.c":32:18)
#loc15 = loc("CWE511_Logic_Time_Bomb__counter_17.c":33:5)
#loc16 = loc("CWE511_Logic_Time_Bomb__counter_17.c":34:9)
#loc17 = loc("CWE511_Logic_Time_Bomb__counter_17.c":46:9)
#loc18 = loc("CWE511_Logic_Time_Bomb__counter_17.c":35:13)
#loc19 = loc("CWE511_Logic_Time_Bomb__counter_17.c":35:25)
#loc20 = loc("CWE511_Logic_Time_Bomb__counter_17.c":36:13)
#loc21 = loc("CWE511_Logic_Time_Bomb__counter_17.c":45:25)
#loc22 = loc("CWE511_Logic_Time_Bomb__counter_17.c":37:13)
#loc23 = loc("CWE511_Logic_Time_Bomb__counter_17.c":44:13)
#loc24 = loc("CWE511_Logic_Time_Bomb__counter_17.c":39:17)
#loc25 = loc("CWE511_Logic_Time_Bomb__counter_17.c":42:17)
#loc26 = loc("CWE511_Logic_Time_Bomb__counter_17.c":39:21)
#loc27 = loc("CWE511_Logic_Time_Bomb__counter_17.c":39:30)
#loc28 = loc("CWE511_Logic_Time_Bomb__counter_17.c":40:17)
#loc29 = loc("CWE511_Logic_Time_Bomb__counter_17.c":41:21)
#loc30 = loc("CWE511_Logic_Time_Bomb__counter_17.c":43:22)
#loc31 = loc("CWE511_Logic_Time_Bomb__counter_17.c":43:17)
#loc32 = loc("CWE511_Logic_Time_Bomb__counter_17.c":45:19)
#loc33 = loc("CWE511_Logic_Time_Bomb__counter_17.c":45:24)
#loc34 = loc("CWE511_Logic_Time_Bomb__counter_17.c":45:21)
#loc35 = loc("CWE511_Logic_Time_Bomb__counter_17.c":32:24)
#loc36 = loc("CWE511_Logic_Time_Bomb__counter_17.c":32:23)
#loc37 = loc("CWE511_Logic_Time_Bomb__counter_17.c":76:1)
#loc38 = loc("CWE511_Logic_Time_Bomb__counter_17.c":79:1)
#loc39 = loc("CWE511_Logic_Time_Bomb__counter_17.c":78:5)
#loc40 = loc("CWE511_Logic_Time_Bomb__counter_17.c":78:11)
#loc41 = loc("../../testcasesupport/std_testcase_io.h":14:1)
#loc42 = loc("../../testcasesupport/std_testcase_io.h":14:33)
#loc43 = loc("CWE511_Logic_Time_Bomb__counter_17.c":67:31)
#loc44 = loc("CWE511_Logic_Time_Bomb__counter_17.c":55:1)
#loc45 = loc("CWE511_Logic_Time_Bomb__counter_17.c":74:1)
#loc46 = loc("CWE511_Logic_Time_Bomb__counter_17.c":57:5)
#loc47 = loc("CWE511_Logic_Time_Bomb__counter_17.c":57:9)
#loc48 = loc("CWE511_Logic_Time_Bomb__counter_17.c":58:5)
#loc49 = loc("CWE511_Logic_Time_Bomb__counter_17.c":73:5)
#loc50 = loc("CWE511_Logic_Time_Bomb__counter_17.c":58:13)
#loc51 = loc("CWE511_Logic_Time_Bomb__counter_17.c":58:9)
#loc52 = loc("CWE511_Logic_Time_Bomb__counter_17.c":58:16)
#loc53 = loc("CWE511_Logic_Time_Bomb__counter_17.c":58:20)
#loc54 = loc("CWE511_Logic_Time_Bomb__counter_17.c":58:18)
#loc55 = loc("CWE511_Logic_Time_Bomb__counter_17.c":59:5)
#loc56 = loc("CWE511_Logic_Time_Bomb__counter_17.c":60:9)
#loc57 = loc("CWE511_Logic_Time_Bomb__counter_17.c":72:9)
#loc58 = loc("CWE511_Logic_Time_Bomb__counter_17.c":61:13)
#loc59 = loc("CWE511_Logic_Time_Bomb__counter_17.c":61:25)
#loc60 = loc("CWE511_Logic_Time_Bomb__counter_17.c":62:13)
#loc61 = loc("CWE511_Logic_Time_Bomb__counter_17.c":71:25)
#loc62 = loc("CWE511_Logic_Time_Bomb__counter_17.c":63:13)
#loc63 = loc("CWE511_Logic_Time_Bomb__counter_17.c":70:13)
#loc64 = loc("CWE511_Logic_Time_Bomb__counter_17.c":65:17)
#loc65 = loc("CWE511_Logic_Time_Bomb__counter_17.c":68:17)
#loc66 = loc("CWE511_Logic_Time_Bomb__counter_17.c":65:21)
#loc67 = loc("CWE511_Logic_Time_Bomb__counter_17.c":65:30)
#loc68 = loc("CWE511_Logic_Time_Bomb__counter_17.c":66:17)
#loc69 = loc("CWE511_Logic_Time_Bomb__counter_17.c":67:21)
#loc70 = loc("CWE511_Logic_Time_Bomb__counter_17.c":69:22)
#loc71 = loc("CWE511_Logic_Time_Bomb__counter_17.c":69:17)
#loc72 = loc("CWE511_Logic_Time_Bomb__counter_17.c":71:19)
#loc73 = loc("CWE511_Logic_Time_Bomb__counter_17.c":71:24)
#loc74 = loc("CWE511_Logic_Time_Bomb__counter_17.c":71:21)
#loc75 = loc("CWE511_Logic_Time_Bomb__counter_17.c":58:24)
#loc76 = loc("CWE511_Logic_Time_Bomb__counter_17.c":58:23)
#loc77 = loc(fused[#loc1, #loc2])
#loc78 = loc(fused[#loc4, #loc5])
#loc79 = loc(fused[#loc6, #loc7])
#loc80 = loc(fused[#loc8, #loc9])
#loc81 = loc(fused[#loc11, #loc10])
#loc82 = loc(fused[#loc12, #loc13])
#loc83 = loc(fused[#loc15, #loc9])
#loc84 = loc(fused[#loc16, #loc17])
#loc85 = loc(fused[#loc18, #loc19])
#loc86 = loc(fused[#loc20, #loc21])
#loc87 = loc(fused[#loc22, #loc23])
#loc88 = loc(fused[#loc24, #loc25])
#loc89 = loc(fused[#loc26, #loc27])
#loc90 = loc(fused[#loc28, #loc25])
#loc91 = loc(fused[#loc31, #loc30])
#loc92 = loc(fused[#loc32, #loc33])
#loc93 = loc(fused[#loc36, #loc35])
#loc94 = loc(fused[#loc37, #loc38])
#loc95 = loc(fused[#loc39, #loc40])
#loc96 = loc(fused[#loc41, #loc42])
#loc97 = loc(fused[#loc44, #loc45])
#loc98 = loc(fused[#loc46, #loc47])
#loc99 = loc(fused[#loc48, #loc49])
#loc100 = loc(fused[#loc51, #loc50])
#loc101 = loc(fused[#loc52, #loc53])
#loc102 = loc(fused[#loc55, #loc49])
#loc103 = loc(fused[#loc56, #loc57])
#loc104 = loc(fused[#loc58, #loc59])
#loc105 = loc(fused[#loc60, #loc61])
#loc106 = loc(fused[#loc62, #loc63])
#loc107 = loc(fused[#loc64, #loc65])
#loc108 = loc(fused[#loc66, #loc67])
#loc109 = loc(fused[#loc68, #loc65])
#loc110 = loc(fused[#loc71, #loc70])
#loc111 = loc(fused[#loc72, #loc73])
#loc112 = loc(fused[#loc76, #loc75])
