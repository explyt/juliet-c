!s32i = !cir.int<s, 32>
!s8i = !cir.int<s, 8>
!u64i = !cir.int<u, 64>
!void = !cir.void
#fn_attr = #cir<extra({nothrow = #cir.nothrow})>
#fn_attr1 = #cir<extra({inline = #cir.inline<no>, nothrow = #cir.nothrow, optnone = #cir.optnone, uwtable = #cir.uwtable<async>})>
module @"/workspaces/juliet-c/testcases/CWE122_Heap_Based_Buffer_Overflow/s09/CWE122_Heap_Based_Buffer_Overflow__c_CWE806_char_memmove_16.c" attributes {cir.lang = #cir.lang<c>, cir.sob = #cir.signed_overflow_behavior<undefined>, cir.triple = "x86_64-unknown-linux-gnu", cir.type_size_info = #cir.type_size_info<char = 8, int = 32, size_t = 64>, cir.uwtable = #cir.uwtable<async>, dlti.dl_spec = #dlti.dl_spec<i32 = dense<32> : vector<2xi64>, i16 = dense<16> : vector<2xi64>, f16 = dense<16> : vector<2xi64>, f64 = dense<64> : vector<2xi64>, !llvm.ptr<270> = dense<32> : vector<4xi64>, !llvm.ptr<271> = dense<32> : vector<4xi64>, f128 = dense<128> : vector<2xi64>, !llvm.ptr<272> = dense<64> : vector<4xi64>, i128 = dense<128> : vector<2xi64>, i64 = dense<64> : vector<2xi64>, f80 = dense<128> : vector<2xi64>, !llvm.ptr = dense<64> : vector<4xi64>, i8 = dense<8> : vector<2xi64>, i1 = dense<8> : vector<2xi64>, "dlti.mangling_mode" = "e", "dlti.endianness" = "little", "dlti.stack_alignment" = 128 : i64>} {
  cir.func private @malloc(!u64i) -> !cir.ptr<!void> extra(#fn_attr) loc(#loc123)
  cir.func private @exit(!s32i) extra(#fn_attr) loc(#loc124)
  cir.func private @strlen(!cir.ptr<!s8i>) -> !u64i extra(#fn_attr) loc(#loc125)
  cir.func private @printLine(!cir.ptr<!s8i>) loc(#loc126)
  cir.func private @free(!cir.ptr<!void>) extra(#fn_attr) loc(#loc127)
  cir.func no_proto @CWE122_Heap_Based_Buffer_Overflow__c_CWE806_char_memmove_16_bad() extra(#fn_attr1) {
    %0 = cir.alloca !cir.ptr<!s8i>, !cir.ptr<!cir.ptr<!s8i>>, ["data"] {alignment = 8 : i64} loc(#loc129)
    %1 = cir.get_global @malloc : !cir.ptr<!cir.func<(!u64i) -> !cir.ptr<!void>>> loc(#loc15)
    %2 = cir.const #cir.int<100> : !s32i loc(#loc16)
    %3 = cir.cast(integral, %2 : !s32i), !u64i loc(#loc16)
    %4 = cir.const #cir.int<1> : !u64i loc(#loc130)
    %5 = cir.binop(mul, %3, %4) : !u64i loc(#loc131)
    %6 = cir.call @malloc(%5) : (!u64i) -> !cir.ptr<!void> extra(#fn_attr) loc(#loc15)
    %7 = cir.cast(bitcast, %6 : !cir.ptr<!void>), !cir.ptr<!s8i> loc(#loc132)
    cir.store %7, %0 : !cir.ptr<!s8i>, !cir.ptr<!cir.ptr<!s8i>> loc(#loc133)
    cir.scope {
      %8 = cir.load %0 : !cir.ptr<!cir.ptr<!s8i>>, !cir.ptr<!s8i> loc(#loc23)
      %9 = cir.const #cir.ptr<null> : !cir.ptr<!void> loc(#loc24)
      %10 = cir.cast(bitcast, %9 : !cir.ptr<!void>), !cir.ptr<!s8i> loc(#loc24)
      %11 = cir.cmp(eq, %8, %10) : !cir.ptr<!s8i>, !cir.bool loc(#loc135)
      cir.if %11 {
        %12 = cir.get_global @exit : !cir.ptr<!cir.func<(!s32i)>> loc(#loc26)
        %13 = cir.const #cir.int<1> : !s32i loc(#loc27)
        %14 = cir.unary(minus, %13) nsw : !s32i, !s32i loc(#loc28)
        cir.call @exit(%14) : (!s32i) -> () extra(#fn_attr) loc(#loc26)
      } loc(#loc136)
    } loc(#loc134)
    cir.scope {
      cir.while {
        %8 = cir.const #cir.int<1> : !s32i loc(#loc31)
        %9 = cir.cast(int_to_bool, %8 : !s32i), !cir.bool loc(#loc31)
        cir.condition(%9) loc(#loc31)
      } do {
        cir.scope {
          %8 = cir.load %0 : !cir.ptr<!cir.ptr<!s8i>>, !cir.ptr<!s8i> loc(#loc33)
          %9 = cir.cast(bitcast, %8 : !cir.ptr<!s8i>), !cir.ptr<!void> loc(#loc33)
          %10 = cir.const #cir.int<65> : !s32i loc(#loc34)
          %11 = cir.const #cir.int<100> : !s32i loc(#loc35)
          %12 = cir.const #cir.int<1> : !s32i loc(#loc36)
          %13 = cir.binop(sub, %11, %12) nsw : !s32i loc(#loc35)
          %14 = cir.cast(integral, %13 : !s32i), !u64i loc(#loc35)
          cir.libc.memset %14 bytes from %9 set to %10 : !cir.ptr<!void>, !s32i, !u64i loc(#loc139)
          %15 = cir.const #cir.int<0> : !s32i loc(#loc39)
          %16 = cir.cast(integral, %15 : !s32i), !s8i loc(#loc39)
          %17 = cir.load %0 : !cir.ptr<!cir.ptr<!s8i>>, !cir.ptr<!s8i> loc(#loc40)
          %18 = cir.const #cir.int<100> : !s32i loc(#loc41)
          %19 = cir.const #cir.int<1> : !s32i loc(#loc42)
          %20 = cir.binop(sub, %18, %19) nsw : !s32i loc(#loc41)
          %21 = cir.ptr_stride(%17 : !cir.ptr<!s8i>, %20 : !s32i), !cir.ptr<!s8i> loc(#loc43)
          cir.store %16, %21 : !s8i, !cir.ptr<!s8i> loc(#loc140)
          cir.break loc(#loc44)
        } loc(#loc138)
        cir.yield loc(#loc30)
      } loc(#loc137)
    } loc(#loc137)
    cir.scope {
      %8 = cir.alloca !cir.array<!s8i x 50>, !cir.ptr<!cir.array<!s8i x 50>>, ["dest"] {alignment = 16 : i64} loc(#loc142)
      %9 = cir.const #cir.zero : !cir.array<!s8i x 50> loc(#loc142)
      cir.store %9, %8 : !cir.array<!s8i x 50>, !cir.ptr<!cir.array<!s8i x 50>> loc(#loc142)
      %10 = cir.cast(array_to_ptrdecay, %8 : !cir.ptr<!cir.array<!s8i x 50>>), !cir.ptr<!s8i> loc(#loc49)
      %11 = cir.cast(bitcast, %10 : !cir.ptr<!s8i>), !cir.ptr<!void> loc(#loc49)
      %12 = cir.load %0 : !cir.ptr<!cir.ptr<!s8i>>, !cir.ptr<!s8i> loc(#loc50)
      %13 = cir.cast(bitcast, %12 : !cir.ptr<!s8i>), !cir.ptr<!void> loc(#loc50)
      %14 = cir.get_global @strlen : !cir.ptr<!cir.func<(!cir.ptr<!s8i>) -> !u64i>> loc(#loc51)
      %15 = cir.load %0 : !cir.ptr<!cir.ptr<!s8i>>, !cir.ptr<!s8i> loc(#loc52)
      %16 = cir.call @strlen(%15) : (!cir.ptr<!s8i>) -> !u64i side_effect(pure) extra(#fn_attr) loc(#loc51)
      %17 = cir.const #cir.int<1> : !u64i loc(#loc143)
      %18 = cir.binop(mul, %16, %17) : !u64i loc(#loc144)
      cir.libc.memmove %18 bytes from %13 to %11 : !cir.ptr<!void>, !u64i loc(#loc145)
      %19 = cir.const #cir.int<0> : !s32i loc(#loc57)
      %20 = cir.cast(integral, %19 : !s32i), !s8i loc(#loc57)
      %21 = cir.const #cir.int<50> : !s32i loc(#loc58)
      %22 = cir.const #cir.int<1> : !s32i loc(#loc59)
      %23 = cir.binop(sub, %21, %22) nsw : !s32i loc(#loc58)
      %24 = cir.cast(array_to_ptrdecay, %8 : !cir.ptr<!cir.array<!s8i x 50>>), !cir.ptr<!s8i> loc(#loc60)
      %25 = cir.ptr_stride(%24 : !cir.ptr<!s8i>, %23 : !s32i), !cir.ptr<!s8i> loc(#loc60)
      cir.store %20, %25 : !s8i, !cir.ptr<!s8i> loc(#loc146)
      %26 = cir.load %0 : !cir.ptr<!cir.ptr<!s8i>>, !cir.ptr<!s8i> loc(#loc61)
      cir.call @printLine(%26) : (!cir.ptr<!s8i>) -> () loc(#loc62)
      %27 = cir.get_global @free : !cir.ptr<!cir.func<(!cir.ptr<!void>)>> loc(#loc63)
      %28 = cir.load %0 : !cir.ptr<!cir.ptr<!s8i>>, !cir.ptr<!s8i> loc(#loc64)
      %29 = cir.cast(bitcast, %28 : !cir.ptr<!s8i>), !cir.ptr<!void> loc(#loc64)
      cir.call @free(%29) : (!cir.ptr<!void>) -> () extra(#fn_attr) loc(#loc63)
    } loc(#loc141)
    cir.return loc(#loc12)
  } loc(#loc128)
  cir.func no_proto @CWE122_Heap_Based_Buffer_Overflow__c_CWE806_char_memmove_16_good() extra(#fn_attr1) {
    %0 = cir.get_global @goodG2B : !cir.ptr<!cir.func<()>> loc(#loc148)
    cir.call %0() : (!cir.ptr<!cir.func<()>>) -> () loc(#loc67)
    cir.return loc(#loc66)
  } loc(#loc147)
  cir.func no_proto internal private @goodG2B() extra(#fn_attr1) {
    %0 = cir.alloca !cir.ptr<!s8i>, !cir.ptr<!cir.ptr<!s8i>>, ["data"] {alignment = 8 : i64} loc(#loc150)
    %1 = cir.get_global @malloc : !cir.ptr<!cir.func<(!u64i) -> !cir.ptr<!void>>> loc(#loc73)
    %2 = cir.const #cir.int<100> : !s32i loc(#loc74)
    %3 = cir.cast(integral, %2 : !s32i), !u64i loc(#loc74)
    %4 = cir.const #cir.int<1> : !u64i loc(#loc151)
    %5 = cir.binop(mul, %3, %4) : !u64i loc(#loc152)
    %6 = cir.call @malloc(%5) : (!u64i) -> !cir.ptr<!void> extra(#fn_attr) loc(#loc73)
    %7 = cir.cast(bitcast, %6 : !cir.ptr<!void>), !cir.ptr<!s8i> loc(#loc153)
    cir.store %7, %0 : !cir.ptr<!s8i>, !cir.ptr<!cir.ptr<!s8i>> loc(#loc154)
    cir.scope {
      %8 = cir.load %0 : !cir.ptr<!cir.ptr<!s8i>>, !cir.ptr<!s8i> loc(#loc81)
      %9 = cir.const #cir.ptr<null> : !cir.ptr<!void> loc(#loc82)
      %10 = cir.cast(bitcast, %9 : !cir.ptr<!void>), !cir.ptr<!s8i> loc(#loc82)
      %11 = cir.cmp(eq, %8, %10) : !cir.ptr<!s8i>, !cir.bool loc(#loc156)
      cir.if %11 {
        %12 = cir.get_global @exit : !cir.ptr<!cir.func<(!s32i)>> loc(#loc84)
        %13 = cir.const #cir.int<1> : !s32i loc(#loc85)
        %14 = cir.unary(minus, %13) nsw : !s32i, !s32i loc(#loc86)
        cir.call @exit(%14) : (!s32i) -> () extra(#fn_attr) loc(#loc84)
      } loc(#loc157)
    } loc(#loc155)
    cir.scope {
      cir.while {
        %8 = cir.const #cir.int<1> : !s32i loc(#loc89)
        %9 = cir.cast(int_to_bool, %8 : !s32i), !cir.bool loc(#loc89)
        cir.condition(%9) loc(#loc89)
      } do {
        cir.scope {
          %8 = cir.load %0 : !cir.ptr<!cir.ptr<!s8i>>, !cir.ptr<!s8i> loc(#loc91)
          %9 = cir.cast(bitcast, %8 : !cir.ptr<!s8i>), !cir.ptr<!void> loc(#loc91)
          %10 = cir.const #cir.int<65> : !s32i loc(#loc92)
          %11 = cir.const #cir.int<50> : !s32i loc(#loc93)
          %12 = cir.const #cir.int<1> : !s32i loc(#loc94)
          %13 = cir.binop(sub, %11, %12) nsw : !s32i loc(#loc93)
          %14 = cir.cast(integral, %13 : !s32i), !u64i loc(#loc93)
          cir.libc.memset %14 bytes from %9 set to %10 : !cir.ptr<!void>, !s32i, !u64i loc(#loc160)
          %15 = cir.const #cir.int<0> : !s32i loc(#loc97)
          %16 = cir.cast(integral, %15 : !s32i), !s8i loc(#loc97)
          %17 = cir.load %0 : !cir.ptr<!cir.ptr<!s8i>>, !cir.ptr<!s8i> loc(#loc98)
          %18 = cir.const #cir.int<50> : !s32i loc(#loc99)
          %19 = cir.const #cir.int<1> : !s32i loc(#loc100)
          %20 = cir.binop(sub, %18, %19) nsw : !s32i loc(#loc99)
          %21 = cir.ptr_stride(%17 : !cir.ptr<!s8i>, %20 : !s32i), !cir.ptr<!s8i> loc(#loc101)
          cir.store %16, %21 : !s8i, !cir.ptr<!s8i> loc(#loc161)
          cir.break loc(#loc102)
        } loc(#loc159)
        cir.yield loc(#loc88)
      } loc(#loc158)
    } loc(#loc158)
    cir.scope {
      %8 = cir.alloca !cir.array<!s8i x 50>, !cir.ptr<!cir.array<!s8i x 50>>, ["dest"] {alignment = 16 : i64} loc(#loc163)
      %9 = cir.const #cir.zero : !cir.array<!s8i x 50> loc(#loc163)
      cir.store %9, %8 : !cir.array<!s8i x 50>, !cir.ptr<!cir.array<!s8i x 50>> loc(#loc163)
      %10 = cir.cast(array_to_ptrdecay, %8 : !cir.ptr<!cir.array<!s8i x 50>>), !cir.ptr<!s8i> loc(#loc107)
      %11 = cir.cast(bitcast, %10 : !cir.ptr<!s8i>), !cir.ptr<!void> loc(#loc107)
      %12 = cir.load %0 : !cir.ptr<!cir.ptr<!s8i>>, !cir.ptr<!s8i> loc(#loc108)
      %13 = cir.cast(bitcast, %12 : !cir.ptr<!s8i>), !cir.ptr<!void> loc(#loc108)
      %14 = cir.get_global @strlen : !cir.ptr<!cir.func<(!cir.ptr<!s8i>) -> !u64i>> loc(#loc109)
      %15 = cir.load %0 : !cir.ptr<!cir.ptr<!s8i>>, !cir.ptr<!s8i> loc(#loc110)
      %16 = cir.call @strlen(%15) : (!cir.ptr<!s8i>) -> !u64i side_effect(pure) extra(#fn_attr) loc(#loc109)
      %17 = cir.const #cir.int<1> : !u64i loc(#loc164)
      %18 = cir.binop(mul, %16, %17) : !u64i loc(#loc165)
      cir.libc.memmove %18 bytes from %13 to %11 : !cir.ptr<!void>, !u64i loc(#loc166)
      %19 = cir.const #cir.int<0> : !s32i loc(#loc115)
      %20 = cir.cast(integral, %19 : !s32i), !s8i loc(#loc115)
      %21 = cir.const #cir.int<50> : !s32i loc(#loc116)
      %22 = cir.const #cir.int<1> : !s32i loc(#loc117)
      %23 = cir.binop(sub, %21, %22) nsw : !s32i loc(#loc116)
      %24 = cir.cast(array_to_ptrdecay, %8 : !cir.ptr<!cir.array<!s8i x 50>>), !cir.ptr<!s8i> loc(#loc118)
      %25 = cir.ptr_stride(%24 : !cir.ptr<!s8i>, %23 : !s32i), !cir.ptr<!s8i> loc(#loc118)
      cir.store %20, %25 : !s8i, !cir.ptr<!s8i> loc(#loc167)
      %26 = cir.load %0 : !cir.ptr<!cir.ptr<!s8i>>, !cir.ptr<!s8i> loc(#loc119)
      cir.call @printLine(%26) : (!cir.ptr<!s8i>) -> () loc(#loc120)
      %27 = cir.get_global @free : !cir.ptr<!cir.func<(!cir.ptr<!void>)>> loc(#loc121)
      %28 = cir.load %0 : !cir.ptr<!cir.ptr<!s8i>>, !cir.ptr<!s8i> loc(#loc122)
      %29 = cir.cast(bitcast, %28 : !cir.ptr<!s8i>), !cir.ptr<!void> loc(#loc122)
      cir.call @free(%29) : (!cir.ptr<!void>) -> () extra(#fn_attr) loc(#loc121)
    } loc(#loc162)
    cir.return loc(#loc70)
  } loc(#loc149)
} loc(#loc)
#loc = loc("/workspaces/juliet-c/testcases/CWE122_Heap_Based_Buffer_Overflow/s09/CWE122_Heap_Based_Buffer_Overflow__c_CWE806_char_memmove_16.c":0:0)
#loc1 = loc("/usr/include/stdlib.h":672:1)
#loc2 = loc("/usr/include/stdlib.h":672:45)
#loc3 = loc("/usr/include/stdlib.h":756:1)
#loc4 = loc("/usr/include/stdlib.h":756:70)
#loc5 = loc("/usr/include/string.h":407:1)
#loc6 = loc("/usr/include/string.h":408:33)
#loc7 = loc("../../../testcasesupport/std_testcase_io.h":14:1)
#loc8 = loc("../../../testcasesupport/std_testcase_io.h":14:33)
#loc9 = loc("/usr/include/stdlib.h":687:1)
#loc10 = loc("/usr/include/stdlib.h":687:32)
#loc11 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE806_char_memmove_16.c":23:1)
#loc12 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE806_char_memmove_16.c":43:1)
#loc13 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE806_char_memmove_16.c":25:5)
#loc14 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE806_char_memmove_16.c":25:12)
#loc15 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE806_char_memmove_16.c":26:20)
#loc16 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE806_char_memmove_16.c":26:27)
#loc17 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE806_char_memmove_16.c":26:31)
#loc18 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE806_char_memmove_16.c":26:42)
#loc19 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE806_char_memmove_16.c":26:43)
#loc20 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE806_char_memmove_16.c":26:5)
#loc21 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE806_char_memmove_16.c":27:5)
#loc22 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE806_char_memmove_16.c":27:33)
#loc23 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE806_char_memmove_16.c":27:9)
#loc24 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE806_char_memmove_16.c":27:17)
#loc25 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE806_char_memmove_16.c":27:23)
#loc26 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE806_char_memmove_16.c":27:24)
#loc27 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE806_char_memmove_16.c":27:30)
#loc28 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE806_char_memmove_16.c":27:29)
#loc29 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE806_char_memmove_16.c":28:5)
#loc30 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE806_char_memmove_16.c":34:5)
#loc31 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE806_char_memmove_16.c":28:11)
#loc32 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE806_char_memmove_16.c":29:5)
#loc33 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE806_char_memmove_16.c":31:16)
#loc34 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE806_char_memmove_16.c":31:22)
#loc35 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE806_char_memmove_16.c":31:27)
#loc36 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE806_char_memmove_16.c":31:31)
#loc37 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE806_char_memmove_16.c":31:9)
#loc38 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE806_char_memmove_16.c":31:32)
#loc39 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE806_char_memmove_16.c":32:23)
#loc40 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE806_char_memmove_16.c":32:9)
#loc41 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE806_char_memmove_16.c":32:14)
#loc42 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE806_char_memmove_16.c":32:18)
#loc43 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE806_char_memmove_16.c":32:19)
#loc44 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE806_char_memmove_16.c":33:9)
#loc45 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE806_char_memmove_16.c":35:5)
#loc46 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE806_char_memmove_16.c":42:5)
#loc47 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE806_char_memmove_16.c":36:9)
#loc48 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE806_char_memmove_16.c":36:25)
#loc49 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE806_char_memmove_16.c":38:17)
#loc50 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE806_char_memmove_16.c":38:23)
#loc51 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE806_char_memmove_16.c":38:29)
#loc52 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE806_char_memmove_16.c":38:36)
#loc53 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE806_char_memmove_16.c":38:42)
#loc54 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE806_char_memmove_16.c":38:53)
#loc55 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE806_char_memmove_16.c":38:9)
#loc56 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE806_char_memmove_16.c":38:54)
#loc57 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE806_char_memmove_16.c":39:22)
#loc58 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE806_char_memmove_16.c":39:14)
#loc59 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE806_char_memmove_16.c":39:17)
#loc60 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE806_char_memmove_16.c":39:9)
#loc61 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE806_char_memmove_16.c":40:19)
#loc62 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE806_char_memmove_16.c":40:9)
#loc63 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE806_char_memmove_16.c":41:9)
#loc64 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE806_char_memmove_16.c":41:14)
#loc65 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE806_char_memmove_16.c":72:1)
#loc66 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE806_char_memmove_16.c":75:1)
#loc67 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE806_char_memmove_16.c":74:5)
#loc68 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE806_char_memmove_16.c":74:13)
#loc69 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE806_char_memmove_16.c":50:1)
#loc70 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE806_char_memmove_16.c":70:1)
#loc71 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE806_char_memmove_16.c":52:5)
#loc72 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE806_char_memmove_16.c":52:12)
#loc73 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE806_char_memmove_16.c":53:20)
#loc74 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE806_char_memmove_16.c":53:27)
#loc75 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE806_char_memmove_16.c":53:31)
#loc76 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE806_char_memmove_16.c":53:42)
#loc77 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE806_char_memmove_16.c":53:43)
#loc78 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE806_char_memmove_16.c":53:5)
#loc79 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE806_char_memmove_16.c":54:5)
#loc80 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE806_char_memmove_16.c":54:33)
#loc81 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE806_char_memmove_16.c":54:9)
#loc82 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE806_char_memmove_16.c":54:17)
#loc83 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE806_char_memmove_16.c":54:23)
#loc84 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE806_char_memmove_16.c":54:24)
#loc85 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE806_char_memmove_16.c":54:30)
#loc86 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE806_char_memmove_16.c":54:29)
#loc87 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE806_char_memmove_16.c":55:5)
#loc88 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE806_char_memmove_16.c":61:5)
#loc89 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE806_char_memmove_16.c":55:11)
#loc90 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE806_char_memmove_16.c":56:5)
#loc91 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE806_char_memmove_16.c":58:16)
#loc92 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE806_char_memmove_16.c":58:22)
#loc93 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE806_char_memmove_16.c":58:27)
#loc94 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE806_char_memmove_16.c":58:30)
#loc95 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE806_char_memmove_16.c":58:9)
#loc96 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE806_char_memmove_16.c":58:31)
#loc97 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE806_char_memmove_16.c":59:22)
#loc98 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE806_char_memmove_16.c":59:9)
#loc99 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE806_char_memmove_16.c":59:14)
#loc100 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE806_char_memmove_16.c":59:17)
#loc101 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE806_char_memmove_16.c":59:18)
#loc102 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE806_char_memmove_16.c":60:9)
#loc103 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE806_char_memmove_16.c":62:5)
#loc104 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE806_char_memmove_16.c":69:5)
#loc105 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE806_char_memmove_16.c":63:9)
#loc106 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE806_char_memmove_16.c":63:25)
#loc107 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE806_char_memmove_16.c":65:17)
#loc108 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE806_char_memmove_16.c":65:23)
#loc109 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE806_char_memmove_16.c":65:29)
#loc110 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE806_char_memmove_16.c":65:36)
#loc111 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE806_char_memmove_16.c":65:42)
#loc112 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE806_char_memmove_16.c":65:53)
#loc113 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE806_char_memmove_16.c":65:9)
#loc114 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE806_char_memmove_16.c":65:54)
#loc115 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE806_char_memmove_16.c":66:22)
#loc116 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE806_char_memmove_16.c":66:14)
#loc117 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE806_char_memmove_16.c":66:17)
#loc118 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE806_char_memmove_16.c":66:9)
#loc119 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE806_char_memmove_16.c":67:19)
#loc120 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE806_char_memmove_16.c":67:9)
#loc121 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE806_char_memmove_16.c":68:9)
#loc122 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE806_char_memmove_16.c":68:14)
#loc123 = loc(fused[#loc1, #loc2])
#loc124 = loc(fused[#loc3, #loc4])
#loc125 = loc(fused[#loc5, #loc6])
#loc126 = loc(fused[#loc7, #loc8])
#loc127 = loc(fused[#loc9, #loc10])
#loc128 = loc(fused[#loc11, #loc12])
#loc129 = loc(fused[#loc13, #loc14])
#loc130 = loc(fused[#loc17, #loc18])
#loc131 = loc(fused[#loc16, #loc18])
#loc132 = loc(fused[#loc15, #loc19])
#loc133 = loc(fused[#loc20, #loc19])
#loc134 = loc(fused[#loc21, #loc22])
#loc135 = loc(fused[#loc23, #loc24])
#loc136 = loc(fused[#loc25, #loc22])
#loc137 = loc(fused[#loc29, #loc30])
#loc138 = loc(fused[#loc32, #loc30])
#loc139 = loc(fused[#loc37, #loc38])
#loc140 = loc(fused[#loc40, #loc39])
#loc141 = loc(fused[#loc45, #loc46])
#loc142 = loc(fused[#loc47, #loc48])
#loc143 = loc(fused[#loc53, #loc54])
#loc144 = loc(fused[#loc51, #loc54])
#loc145 = loc(fused[#loc55, #loc56])
#loc146 = loc(fused[#loc60, #loc57])
#loc147 = loc(fused[#loc65, #loc66])
#loc148 = loc(fused[#loc67, #loc68])
#loc149 = loc(fused[#loc69, #loc70])
#loc150 = loc(fused[#loc71, #loc72])
#loc151 = loc(fused[#loc75, #loc76])
#loc152 = loc(fused[#loc74, #loc76])
#loc153 = loc(fused[#loc73, #loc77])
#loc154 = loc(fused[#loc78, #loc77])
#loc155 = loc(fused[#loc79, #loc80])
#loc156 = loc(fused[#loc81, #loc82])
#loc157 = loc(fused[#loc83, #loc80])
#loc158 = loc(fused[#loc87, #loc88])
#loc159 = loc(fused[#loc90, #loc88])
#loc160 = loc(fused[#loc95, #loc96])
#loc161 = loc(fused[#loc98, #loc97])
#loc162 = loc(fused[#loc103, #loc104])
#loc163 = loc(fused[#loc105, #loc106])
#loc164 = loc(fused[#loc111, #loc112])
#loc165 = loc(fused[#loc109, #loc112])
#loc166 = loc(fused[#loc113, #loc114])
#loc167 = loc(fused[#loc118, #loc115])
