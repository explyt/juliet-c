!s32i = !cir.int<s, 32>
!s64i = !cir.int<s, 64>
!s8i = !cir.int<s, 8>
!ty__IO_codecvt = !cir.record<struct "_IO_codecvt" incomplete>
!ty__IO_marker = !cir.record<struct "_IO_marker" incomplete>
!ty__IO_wide_data = !cir.record<struct "_IO_wide_data" incomplete>
!u16i = !cir.int<u, 16>
!u32i = !cir.int<u, 32>
!u64i = !cir.int<u, 64>
!void = !cir.void
#fn_attr = #cir<extra({nothrow = #cir.nothrow})>
#fn_attr1 = #cir<extra({inline = #cir.inline<no>, nothrow = #cir.nothrow, optnone = #cir.optnone, uwtable = #cir.uwtable<async>})>
!ty__IO_FILE = !cir.record<struct "_IO_FILE" {!s32i, !cir.ptr<!s8i>, !cir.ptr<!s8i>, !cir.ptr<!s8i>, !cir.ptr<!s8i>, !cir.ptr<!s8i>, !cir.ptr<!s8i>, !cir.ptr<!s8i>, !cir.ptr<!s8i>, !cir.ptr<!s8i>, !cir.ptr<!s8i>, !cir.ptr<!s8i>, !cir.ptr<!ty__IO_marker>, !cir.ptr<!cir.record<struct "_IO_FILE">>, !s32i, !s32i, !s64i, !u16i, !s8i, !cir.array<!s8i x 1>, !cir.ptr<!void>, !s64i, !cir.ptr<!ty__IO_codecvt>, !cir.ptr<!ty__IO_wide_data>, !cir.ptr<!cir.record<struct "_IO_FILE">>, !cir.ptr<!void>, !u64i, !s32i, !cir.array<!s8i x 20>} #cir.record.decl.ast>
module @"/workspaces/juliet-c/testcases/CWE617_Reachable_Assertion/CWE617_Reachable_Assertion__fscanf_06.c" attributes {cir.lang = #cir.lang<c>, cir.sob = #cir.signed_overflow_behavior<undefined>, cir.triple = "x86_64-unknown-linux-gnu", cir.type_size_info = #cir.type_size_info<char = 8, int = 32, size_t = 64>, cir.uwtable = #cir.uwtable<async>, dlti.dl_spec = #dlti.dl_spec<!llvm.ptr<271> = dense<32> : vector<4xi64>, !llvm.ptr<272> = dense<64> : vector<4xi64>, i128 = dense<128> : vector<2xi64>, !llvm.ptr<270> = dense<32> : vector<4xi64>, i64 = dense<64> : vector<2xi64>, f80 = dense<128> : vector<2xi64>, !llvm.ptr = dense<64> : vector<4xi64>, i8 = dense<8> : vector<2xi64>, i1 = dense<8> : vector<2xi64>, i32 = dense<32> : vector<2xi64>, i16 = dense<16> : vector<2xi64>, f16 = dense<16> : vector<2xi64>, f128 = dense<128> : vector<2xi64>, f64 = dense<64> : vector<2xi64>, "dlti.stack_alignment" = 128 : i64, "dlti.mangling_mode" = "e", "dlti.endianness" = "little">} {
  cir.func private @__isoc99_fscanf(!cir.ptr<!ty__IO_FILE>, !cir.ptr<!s8i>, ...) -> !s32i loc(#loc67)
  cir.global "private" external @stdin : !cir.ptr<!ty__IO_FILE> {alignment = 8 : i64} loc(#loc68)
  cir.global "private" constant cir_private dsolocal @".str" = #cir.const_array<"%d\00" : !cir.array<!s8i x 3>> : !cir.array<!s8i x 3> {alignment = 1 : i64} loc(#loc5)
  cir.func private @__assert_fail(!cir.ptr<!s8i>, !cir.ptr<!s8i>, !u32i, !cir.ptr<!s8i>) extra(#fn_attr) loc(#loc69)
  cir.global "private" constant cir_private dsolocal @".str.1" = #cir.const_array<"data > ASSERT_VALUE\00" : !cir.array<!s8i x 20>> : !cir.array<!s8i x 20> {alignment = 1 : i64} loc(#loc8)
  cir.global "private" constant cir_private dsolocal @".str.2" = #cir.const_array<"CWE617_Reachable_Assertion__fscanf_06.c\00" : !cir.array<!s8i x 40>> : !cir.array<!s8i x 40> {alignment = 1 : i64} loc(#loc8)
  cir.global "private" constant cir_private dsolocal @".str.3" = #cir.const_array<"void CWE617_Reachable_Assertion__fscanf_06_bad()\00" : !cir.array<!s8i x 49>> : !cir.array<!s8i x 49> {alignment = 1 : i64} loc(#loc8)
  cir.func no_proto @CWE617_Reachable_Assertion__fscanf_06_bad() extra(#fn_attr1) {
    %0 = cir.alloca !s32i, !cir.ptr<!s32i>, ["data"] {alignment = 4 : i64} loc(#loc71)
    %1 = cir.const #cir.int<1> : !s32i loc(#loc13)
    %2 = cir.unary(minus, %1) nsw : !s32i, !s32i loc(#loc14)
    cir.store %2, %0 : !s32i, !cir.ptr<!s32i> loc(#loc72)
    cir.scope {
      %4 = cir.const #cir.int<5> : !s32i loc(#loc18)
      %5 = cir.const #cir.int<5> : !s32i loc(#loc19)
      %6 = cir.cmp(eq, %4, %5) : !s32i, !cir.bool loc(#loc74)
      cir.if %6 {
        %7 = cir.get_global @__isoc99_fscanf : !cir.ptr<!cir.func<(!cir.ptr<!ty__IO_FILE>, !cir.ptr<!s8i>, ...) -> !s32i>> loc(#loc21)
        %8 = cir.get_global @stdin : !cir.ptr<!cir.ptr<!ty__IO_FILE>> loc(#loc68)
        %9 = cir.load %8 : !cir.ptr<!cir.ptr<!ty__IO_FILE>>, !cir.ptr<!ty__IO_FILE> loc(#loc22)
        %10 = cir.get_global @".str" : !cir.ptr<!cir.array<!s8i x 3>> loc(#loc5)
        %11 = cir.cast(array_to_ptrdecay, %10 : !cir.ptr<!cir.array<!s8i x 3>>), !cir.ptr<!s8i> loc(#loc5)
        %12 = cir.call @__isoc99_fscanf(%9, %11, %0) : (!cir.ptr<!ty__IO_FILE>, !cir.ptr<!s8i>, !cir.ptr<!s32i>) -> !s32i loc(#loc21)
      } loc(#loc75)
    } loc(#loc73)
    %3 = cir.const #cir.int<4> : !u64i loc(#loc8)
    cir.scope {
      cir.scope {
        %4 = cir.load %0 : !cir.ptr<!s32i>, !s32i loc(#loc8)
        %5 = cir.const #cir.int<5> : !s32i loc(#loc8)
        %6 = cir.cmp(gt, %4, %5) : !s32i, !cir.bool loc(#loc8)
        cir.if %6 {
        } else {
          %7 = cir.get_global @".str.1" : !cir.ptr<!cir.array<!s8i x 20>> loc(#loc8)
          %8 = cir.cast(array_to_ptrdecay, %7 : !cir.ptr<!cir.array<!s8i x 20>>), !cir.ptr<!s8i> loc(#loc8)
          %9 = cir.get_global @".str.2" : !cir.ptr<!cir.array<!s8i x 40>> loc(#loc8)
          %10 = cir.cast(array_to_ptrdecay, %9 : !cir.ptr<!cir.array<!s8i x 40>>), !cir.ptr<!s8i> loc(#loc8)
          %11 = cir.const #cir.int<40> : !s32i loc(#loc8)
          %12 = cir.cast(integral, %11 : !s32i), !u32i loc(#loc8)
          %13 = cir.get_global @".str.3" : !cir.ptr<!cir.array<!s8i x 49>> loc(#loc8)
          %14 = cir.cast(array_to_ptrdecay, %13 : !cir.ptr<!cir.array<!s8i x 49>>), !cir.ptr<!s8i> loc(#loc8)
          cir.call @__assert_fail(%8, %10, %12, %14) : (!cir.ptr<!s8i>, !cir.ptr<!s8i>, !u32i, !cir.ptr<!s8i>) -> () extra(#fn_attr) loc(#loc8)
        } loc(#loc8)
      } loc(#loc8)
    } loc(#loc8)
    cir.return loc(#loc10)
  } loc(#loc70)
  cir.func no_proto @CWE617_Reachable_Assertion__fscanf_06_good() extra(#fn_attr1) {
    %0 = cir.get_global @goodG2B1 : !cir.ptr<!cir.func<()>> loc(#loc77)
    cir.call %0() : (!cir.ptr<!cir.func<()>>) -> () loc(#loc25)
    %1 = cir.get_global @goodG2B2 : !cir.ptr<!cir.func<()>> loc(#loc78)
    cir.call %1() : (!cir.ptr<!cir.func<()>>) -> () loc(#loc27)
    cir.return loc(#loc24)
  } loc(#loc76)
  cir.func private @printLine(!cir.ptr<!s8i>) loc(#loc79)
  cir.global "private" constant cir_private dsolocal @".str.4" = #cir.const_array<"Benign, fixed string\00" : !cir.array<!s8i x 21>> : !cir.array<!s8i x 21> {alignment = 1 : i64} loc(#loc31)
  cir.global "private" constant cir_private dsolocal @".str.5" = #cir.const_array<"void goodG2B1()\00" : !cir.array<!s8i x 16>> : !cir.array<!s8i x 16> {alignment = 1 : i64} loc(#loc32)
  cir.func no_proto internal private @goodG2B1() extra(#fn_attr1) {
    %0 = cir.alloca !s32i, !cir.ptr<!s32i>, ["data"] {alignment = 4 : i64} loc(#loc81)
    %1 = cir.const #cir.int<1> : !s32i loc(#loc37)
    %2 = cir.unary(minus, %1) nsw : !s32i, !s32i loc(#loc38)
    cir.store %2, %0 : !s32i, !cir.ptr<!s32i> loc(#loc82)
    cir.scope {
      %4 = cir.const #cir.int<5> : !s32i loc(#loc42)
      %5 = cir.const #cir.int<5> : !s32i loc(#loc43)
      %6 = cir.cmp(ne, %4, %5) : !s32i, !cir.bool loc(#loc84)
      cir.if %6 {
        %7 = cir.get_global @".str.4" : !cir.ptr<!cir.array<!s8i x 21>> loc(#loc31)
        %8 = cir.cast(array_to_ptrdecay, %7 : !cir.ptr<!cir.array<!s8i x 21>>), !cir.ptr<!s8i> loc(#loc31)
        cir.call @printLine(%8) : (!cir.ptr<!s8i>) -> () loc(#loc47)
      } else {
        %7 = cir.const #cir.int<5> : !s32i loc(#loc48)
        %8 = cir.const #cir.int<1> : !s32i loc(#loc49)
        %9 = cir.binop(add, %7, %8) nsw : !s32i loc(#loc48)
        cir.store %9, %0 : !s32i, !cir.ptr<!s32i> loc(#loc86)
      } loc(#loc85)
    } loc(#loc83)
    %3 = cir.const #cir.int<4> : !u64i loc(#loc32)
    cir.scope {
      cir.scope {
        %4 = cir.load %0 : !cir.ptr<!s32i>, !s32i loc(#loc32)
        %5 = cir.const #cir.int<5> : !s32i loc(#loc32)
        %6 = cir.cmp(gt, %4, %5) : !s32i, !cir.bool loc(#loc32)
        cir.if %6 {
        } else {
          %7 = cir.get_global @".str.1" : !cir.ptr<!cir.array<!s8i x 20>> loc(#loc32)
          %8 = cir.cast(array_to_ptrdecay, %7 : !cir.ptr<!cir.array<!s8i x 20>>), !cir.ptr<!s8i> loc(#loc32)
          %9 = cir.get_global @".str.2" : !cir.ptr<!cir.array<!s8i x 40>> loc(#loc32)
          %10 = cir.cast(array_to_ptrdecay, %9 : !cir.ptr<!cir.array<!s8i x 40>>), !cir.ptr<!s8i> loc(#loc32)
          %11 = cir.const #cir.int<64> : !s32i loc(#loc32)
          %12 = cir.cast(integral, %11 : !s32i), !u32i loc(#loc32)
          %13 = cir.get_global @".str.5" : !cir.ptr<!cir.array<!s8i x 16>> loc(#loc32)
          %14 = cir.cast(array_to_ptrdecay, %13 : !cir.ptr<!cir.array<!s8i x 16>>), !cir.ptr<!s8i> loc(#loc32)
          cir.call @__assert_fail(%8, %10, %12, %14) : (!cir.ptr<!s8i>, !cir.ptr<!s8i>, !u32i, !cir.ptr<!s8i>) -> () extra(#fn_attr) loc(#loc32)
        } loc(#loc32)
      } loc(#loc32)
    } loc(#loc32)
    cir.return loc(#loc34)
  } loc(#loc80)
  cir.global "private" constant cir_private dsolocal @".str.6" = #cir.const_array<"void goodG2B2()\00" : !cir.array<!s8i x 16>> : !cir.array<!s8i x 16> {alignment = 1 : i64} loc(#loc51)
  cir.func no_proto internal private @goodG2B2() extra(#fn_attr1) {
    %0 = cir.alloca !s32i, !cir.ptr<!s32i>, ["data"] {alignment = 4 : i64} loc(#loc88)
    %1 = cir.const #cir.int<1> : !s32i loc(#loc56)
    %2 = cir.unary(minus, %1) nsw : !s32i, !s32i loc(#loc57)
    cir.store %2, %0 : !s32i, !cir.ptr<!s32i> loc(#loc89)
    cir.scope {
      %4 = cir.const #cir.int<5> : !s32i loc(#loc61)
      %5 = cir.const #cir.int<5> : !s32i loc(#loc62)
      %6 = cir.cmp(eq, %4, %5) : !s32i, !cir.bool loc(#loc91)
      cir.if %6 {
        %7 = cir.const #cir.int<5> : !s32i loc(#loc64)
        %8 = cir.const #cir.int<1> : !s32i loc(#loc65)
        %9 = cir.binop(add, %7, %8) nsw : !s32i loc(#loc64)
        cir.store %9, %0 : !s32i, !cir.ptr<!s32i> loc(#loc93)
      } loc(#loc92)
    } loc(#loc90)
    %3 = cir.const #cir.int<4> : !u64i loc(#loc51)
    cir.scope {
      cir.scope {
        %4 = cir.load %0 : !cir.ptr<!s32i>, !s32i loc(#loc51)
        %5 = cir.const #cir.int<5> : !s32i loc(#loc51)
        %6 = cir.cmp(gt, %4, %5) : !s32i, !cir.bool loc(#loc51)
        cir.if %6 {
        } else {
          %7 = cir.get_global @".str.1" : !cir.ptr<!cir.array<!s8i x 20>> loc(#loc51)
          %8 = cir.cast(array_to_ptrdecay, %7 : !cir.ptr<!cir.array<!s8i x 20>>), !cir.ptr<!s8i> loc(#loc51)
          %9 = cir.get_global @".str.2" : !cir.ptr<!cir.array<!s8i x 40>> loc(#loc51)
          %10 = cir.cast(array_to_ptrdecay, %9 : !cir.ptr<!cir.array<!s8i x 40>>), !cir.ptr<!s8i> loc(#loc51)
          %11 = cir.const #cir.int<79> : !s32i loc(#loc51)
          %12 = cir.cast(integral, %11 : !s32i), !u32i loc(#loc51)
          %13 = cir.get_global @".str.6" : !cir.ptr<!cir.array<!s8i x 16>> loc(#loc51)
          %14 = cir.cast(array_to_ptrdecay, %13 : !cir.ptr<!cir.array<!s8i x 16>>), !cir.ptr<!s8i> loc(#loc51)
          cir.call @__assert_fail(%8, %10, %12, %14) : (!cir.ptr<!s8i>, !cir.ptr<!s8i>, !u32i, !cir.ptr<!s8i>) -> () extra(#fn_attr) loc(#loc51)
        } loc(#loc51)
      } loc(#loc51)
    } loc(#loc51)
    cir.return loc(#loc53)
  } loc(#loc87)
} loc(#loc)
#loc = loc("/workspaces/juliet-c/testcases/CWE617_Reachable_Assertion/CWE617_Reachable_Assertion__fscanf_06.c":0:0)
#loc1 = loc("/usr/include/stdio.h":463:1)
#loc2 = loc("/usr/include/stdio.h":465:33)
#loc3 = loc("/usr/include/stdio.h":149:1)
#loc4 = loc("/usr/include/stdio.h":149:14)
#loc5 = loc("CWE617_Reachable_Assertion__fscanf_06.c":37:23)
#loc6 = loc("/usr/include/assert.h":69:1)
#loc7 = loc("/usr/include/assert.h":71:43)
#loc8 = loc("CWE617_Reachable_Assertion__fscanf_06.c":40:5)
#loc9 = loc("CWE617_Reachable_Assertion__fscanf_06.c":29:1)
#loc10 = loc("CWE617_Reachable_Assertion__fscanf_06.c":41:1)
#loc11 = loc("CWE617_Reachable_Assertion__fscanf_06.c":31:5)
#loc12 = loc("CWE617_Reachable_Assertion__fscanf_06.c":31:9)
#loc13 = loc("CWE617_Reachable_Assertion__fscanf_06.c":33:13)
#loc14 = loc("CWE617_Reachable_Assertion__fscanf_06.c":33:12)
#loc15 = loc("CWE617_Reachable_Assertion__fscanf_06.c":33:5)
#loc16 = loc("CWE617_Reachable_Assertion__fscanf_06.c":34:5)
#loc17 = loc("CWE617_Reachable_Assertion__fscanf_06.c":38:5)
#loc18 = loc("CWE617_Reachable_Assertion__fscanf_06.c":34:8)
#loc19 = loc("CWE617_Reachable_Assertion__fscanf_06.c":34:27)
#loc20 = loc("CWE617_Reachable_Assertion__fscanf_06.c":35:5)
#loc21 = loc("CWE617_Reachable_Assertion__fscanf_06.c":37:9)
#loc22 = loc("CWE617_Reachable_Assertion__fscanf_06.c":37:16)
#loc23 = loc("CWE617_Reachable_Assertion__fscanf_06.c":82:1)
#loc24 = loc("CWE617_Reachable_Assertion__fscanf_06.c":86:1)
#loc25 = loc("CWE617_Reachable_Assertion__fscanf_06.c":84:5)
#loc26 = loc("CWE617_Reachable_Assertion__fscanf_06.c":84:14)
#loc27 = loc("CWE617_Reachable_Assertion__fscanf_06.c":85:5)
#loc28 = loc("CWE617_Reachable_Assertion__fscanf_06.c":85:14)
#loc29 = loc("../../testcasesupport/std_testcase_io.h":14:1)
#loc30 = loc("../../testcasesupport/std_testcase_io.h":14:33)
#loc31 = loc("CWE617_Reachable_Assertion__fscanf_06.c":56:19)
#loc32 = loc("CWE617_Reachable_Assertion__fscanf_06.c":64:5)
#loc33 = loc("CWE617_Reachable_Assertion__fscanf_06.c":48:1)
#loc34 = loc("CWE617_Reachable_Assertion__fscanf_06.c":65:1)
#loc35 = loc("CWE617_Reachable_Assertion__fscanf_06.c":50:5)
#loc36 = loc("CWE617_Reachable_Assertion__fscanf_06.c":50:9)
#loc37 = loc("CWE617_Reachable_Assertion__fscanf_06.c":52:13)
#loc38 = loc("CWE617_Reachable_Assertion__fscanf_06.c":52:12)
#loc39 = loc("CWE617_Reachable_Assertion__fscanf_06.c":52:5)
#loc40 = loc("CWE617_Reachable_Assertion__fscanf_06.c":53:5)
#loc41 = loc("CWE617_Reachable_Assertion__fscanf_06.c":62:5)
#loc42 = loc("CWE617_Reachable_Assertion__fscanf_06.c":53:8)
#loc43 = loc("CWE617_Reachable_Assertion__fscanf_06.c":53:27)
#loc44 = loc("CWE617_Reachable_Assertion__fscanf_06.c":54:5)
#loc45 = loc("CWE617_Reachable_Assertion__fscanf_06.c":57:5)
#loc46 = loc("CWE617_Reachable_Assertion__fscanf_06.c":59:5)
#loc47 = loc("CWE617_Reachable_Assertion__fscanf_06.c":56:9)
#loc48 = loc("CWE617_Reachable_Assertion__fscanf_06.c":61:16)
#loc49 = loc("CWE617_Reachable_Assertion__fscanf_06.c":61:29)
#loc50 = loc("CWE617_Reachable_Assertion__fscanf_06.c":61:9)
#loc51 = loc("CWE617_Reachable_Assertion__fscanf_06.c":79:5)
#loc52 = loc("CWE617_Reachable_Assertion__fscanf_06.c":68:1)
#loc53 = loc("CWE617_Reachable_Assertion__fscanf_06.c":80:1)
#loc54 = loc("CWE617_Reachable_Assertion__fscanf_06.c":70:5)
#loc55 = loc("CWE617_Reachable_Assertion__fscanf_06.c":70:9)
#loc56 = loc("CWE617_Reachable_Assertion__fscanf_06.c":72:13)
#loc57 = loc("CWE617_Reachable_Assertion__fscanf_06.c":72:12)
#loc58 = loc("CWE617_Reachable_Assertion__fscanf_06.c":72:5)
#loc59 = loc("CWE617_Reachable_Assertion__fscanf_06.c":73:5)
#loc60 = loc("CWE617_Reachable_Assertion__fscanf_06.c":77:5)
#loc61 = loc("CWE617_Reachable_Assertion__fscanf_06.c":73:8)
#loc62 = loc("CWE617_Reachable_Assertion__fscanf_06.c":73:27)
#loc63 = loc("CWE617_Reachable_Assertion__fscanf_06.c":74:5)
#loc64 = loc("CWE617_Reachable_Assertion__fscanf_06.c":76:16)
#loc65 = loc("CWE617_Reachable_Assertion__fscanf_06.c":76:29)
#loc66 = loc("CWE617_Reachable_Assertion__fscanf_06.c":76:9)
#loc67 = loc(fused[#loc1, #loc2])
#loc68 = loc(fused[#loc3, #loc4])
#loc69 = loc(fused[#loc6, #loc7])
#loc70 = loc(fused[#loc9, #loc10])
#loc71 = loc(fused[#loc11, #loc12])
#loc72 = loc(fused[#loc15, #loc13])
#loc73 = loc(fused[#loc16, #loc17])
#loc74 = loc(fused[#loc18, #loc19])
#loc75 = loc(fused[#loc20, #loc17])
#loc76 = loc(fused[#loc23, #loc24])
#loc77 = loc(fused[#loc25, #loc26])
#loc78 = loc(fused[#loc27, #loc28])
#loc79 = loc(fused[#loc29, #loc30])
#loc80 = loc(fused[#loc33, #loc34])
#loc81 = loc(fused[#loc35, #loc36])
#loc82 = loc(fused[#loc39, #loc37])
#loc83 = loc(fused[#loc40, #loc41])
#loc84 = loc(fused[#loc42, #loc43])
#loc85 = loc(fused[#loc44, #loc45, #loc46, #loc41])
#loc86 = loc(fused[#loc50, #loc49])
#loc87 = loc(fused[#loc52, #loc53])
#loc88 = loc(fused[#loc54, #loc55])
#loc89 = loc(fused[#loc58, #loc56])
#loc90 = loc(fused[#loc59, #loc60])
#loc91 = loc(fused[#loc61, #loc62])
#loc92 = loc(fused[#loc63, #loc60])
#loc93 = loc(fused[#loc66, #loc65])
