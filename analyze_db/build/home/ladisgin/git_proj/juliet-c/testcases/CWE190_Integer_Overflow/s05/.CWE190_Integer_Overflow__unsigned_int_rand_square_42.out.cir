!s32i = !cir.int<s, 32>
!s64i = !cir.int<s, 64>
!s8i = !cir.int<s, 8>
!u32i = !cir.int<u, 32>
!void = !cir.void
#fn_attr = #cir<extra({nothrow = #cir.nothrow})>
#fn_attr1 = #cir<extra({inline = #cir.inline<no>, nothrow = #cir.nothrow, optnone = #cir.optnone})>
#loc5 = loc("CWE190_Integer_Overflow__unsigned_int_rand_square_42.c":24:31)
#loc6 = loc("CWE190_Integer_Overflow__unsigned_int_rand_square_42.c":24:44)
#loc49 = loc("CWE190_Integer_Overflow__unsigned_int_rand_square_42.c":107:10)
#loc50 = loc("CWE190_Integer_Overflow__unsigned_int_rand_square_42.c":107:14)
#loc51 = loc("CWE190_Integer_Overflow__unsigned_int_rand_square_42.c":107:20)
#loc52 = loc("CWE190_Integer_Overflow__unsigned_int_rand_square_42.c":107:32)
#loc69 = loc("CWE190_Integer_Overflow__unsigned_int_rand_square_42.c":68:35)
#loc70 = loc("CWE190_Integer_Overflow__unsigned_int_rand_square_42.c":68:48)
#loc106 = loc("CWE190_Integer_Overflow__unsigned_int_rand_square_42.c":48:35)
#loc107 = loc("CWE190_Integer_Overflow__unsigned_int_rand_square_42.c":48:48)
#loc132 = loc(fused[#loc5, #loc6])
#loc150 = loc(fused[#loc49, #loc50])
#loc151 = loc(fused[#loc51, #loc52])
#loc156 = loc(fused[#loc69, #loc70])
#loc169 = loc(fused[#loc106, #loc107])
module @"/home/ladisgin/git_proj/juliet-c/testcases/CWE190_Integer_Overflow/s05/CWE190_Integer_Overflow__unsigned_int_rand_square_42.c" attributes {cir.lang = #cir.lang<c>, cir.sob = #cir.signed_overflow_behavior<undefined>, cir.triple = "x86_64-unknown-linux-gnu", dlti.dl_spec = #dlti.dl_spec<i32 = dense<32> : vector<2xi64>, i16 = dense<16> : vector<2xi64>, f64 = dense<64> : vector<2xi64>, f16 = dense<16> : vector<2xi64>, !llvm.ptr = dense<64> : vector<4xi64>, i8 = dense<8> : vector<2xi64>, i1 = dense<8> : vector<2xi64>, i128 = dense<128> : vector<2xi64>, i64 = dense<64> : vector<2xi64>, f80 = dense<128> : vector<2xi64>, !llvm.ptr<271> = dense<32> : vector<4xi64>, !llvm.ptr<270> = dense<32> : vector<4xi64>, f128 = dense<128> : vector<2xi64>, !llvm.ptr<272> = dense<64> : vector<4xi64>, "dlti.endianness" = "little", "dlti.stack_alignment" = 128 : i64>} {
  cir.func private @rand() -> !s32i extra(#fn_attr) loc(#loc130)
  cir.func internal private @badSource(%arg0: !u32i loc(fused[#loc5, #loc6])) -> !u32i extra(#fn_attr1) {
    %0 = cir.alloca !u32i, !cir.ptr<!u32i>, ["data", init] {alignment = 4 : i64} loc(#loc132)
    %1 = cir.alloca !u32i, !cir.ptr<!u32i>, ["__retval"] {alignment = 4 : i64} loc(#loc4)
    cir.store %arg0, %0 : !u32i, !cir.ptr<!u32i> loc(#loc7)
    %2 = cir.call @rand() : () -> !s32i extra(#fn_attr) loc(#loc8)
    %3 = cir.const #cir.int<1> : !s32i loc(#loc8)
    %4 = cir.binop(and, %2, %3) : !s32i loc(#loc8)
    %5 = cir.cast(int_to_bool, %4 : !s32i), !cir.bool loc(#loc8)
    %6 = cir.ternary(%5, true {
      %11 = cir.call @rand() : () -> !s32i extra(#fn_attr) loc(#loc8)
      %12 = cir.cast(integral, %11 : !s32i), !u32i loc(#loc8)
      %13 = cir.const #cir.int<30> : !s32i loc(#loc8)
      %14 = cir.shift(left, %12 : !u32i, %13 : !s32i) -> !u32i loc(#loc8)
      %15 = cir.call @rand() : () -> !s32i extra(#fn_attr) loc(#loc8)
      %16 = cir.cast(integral, %15 : !s32i), !u32i loc(#loc8)
      %17 = cir.const #cir.int<15> : !s32i loc(#loc8)
      %18 = cir.shift(left, %16 : !u32i, %17 : !s32i) -> !u32i loc(#loc8)
      %19 = cir.binop(xor, %14, %18) : !u32i loc(#loc8)
      %20 = cir.call @rand() : () -> !s32i extra(#fn_attr) loc(#loc8)
      %21 = cir.cast(integral, %20 : !s32i), !u32i loc(#loc8)
      %22 = cir.binop(xor, %19, %21) : !u32i loc(#loc8)
      cir.yield %22 : !u32i loc(#loc8)
    }, false {
      %11 = cir.call @rand() : () -> !s32i extra(#fn_attr) loc(#loc8)
      %12 = cir.cast(integral, %11 : !s32i), !u32i loc(#loc8)
      %13 = cir.const #cir.int<30> : !s32i loc(#loc8)
      %14 = cir.shift(left, %12 : !u32i, %13 : !s32i) -> !u32i loc(#loc8)
      %15 = cir.call @rand() : () -> !s32i extra(#fn_attr) loc(#loc8)
      %16 = cir.cast(integral, %15 : !s32i), !u32i loc(#loc8)
      %17 = cir.const #cir.int<15> : !s32i loc(#loc8)
      %18 = cir.shift(left, %16 : !u32i, %17 : !s32i) -> !u32i loc(#loc8)
      %19 = cir.binop(xor, %14, %18) : !u32i loc(#loc8)
      %20 = cir.call @rand() : () -> !s32i extra(#fn_attr) loc(#loc8)
      %21 = cir.cast(integral, %20 : !s32i), !u32i loc(#loc8)
      %22 = cir.binop(xor, %19, %21) : !u32i loc(#loc8)
      %23 = cir.unary(minus, %22) : !u32i, !u32i loc(#loc8)
      %24 = cir.const #cir.int<1> : !s32i loc(#loc8)
      %25 = cir.cast(integral, %24 : !s32i), !u32i loc(#loc8)
      %26 = cir.binop(sub, %23, %25) : !u32i loc(#loc8)
      cir.yield %26 : !u32i loc(#loc8)
    }) : (!cir.bool) -> !u32i loc(#loc8)
    %7 = cir.cast(integral, %6 : !u32i), !s32i loc(#loc8)
    %8 = cir.cast(integral, %7 : !s32i), !u32i loc(#loc8)
    cir.store %8, %0 : !u32i, !cir.ptr<!u32i> loc(#loc133)
    %9 = cir.load %0 : !cir.ptr<!u32i>, !u32i loc(#loc10)
    cir.store %9, %1 : !u32i, !cir.ptr<!u32i> loc(#loc134)
    %10 = cir.load %1 : !cir.ptr<!u32i>, !u32i loc(#loc134)
    cir.return %10 : !u32i loc(#loc134)
  } loc(#loc131)
  cir.func private @printUnsignedLine(!u32i) loc(#loc135)
  cir.func no_proto @CWE190_Integer_Overflow__unsigned_int_rand_square_42_bad() extra(#fn_attr1) {
    %0 = cir.alloca !u32i, !cir.ptr<!u32i>, ["data"] {alignment = 4 : i64} loc(#loc137)
    %1 = cir.const #cir.int<0> : !s32i loc(#loc18)
    %2 = cir.cast(integral, %1 : !s32i), !u32i loc(#loc18)
    cir.store %2, %0 : !u32i, !cir.ptr<!u32i> loc(#loc138)
    %3 = cir.load %0 : !cir.ptr<!u32i>, !u32i loc(#loc20)
    %4 = cir.call @badSource(%3) : (!u32i) -> !u32i loc(#loc21)
    cir.store %4, %0 : !u32i, !cir.ptr<!u32i> loc(#loc139)
    cir.scope {
      %5 = cir.alloca !u32i, !cir.ptr<!u32i>, ["result", init] {alignment = 4 : i64} loc(#loc141)
      %6 = cir.load %0 : !cir.ptr<!u32i>, !u32i loc(#loc28)
      %7 = cir.load %0 : !cir.ptr<!u32i>, !u32i loc(#loc27)
      %8 = cir.binop(mul, %6, %7) : !u32i loc(#loc142)
      cir.store %8, %5 : !u32i, !cir.ptr<!u32i> loc(#loc141)
      %9 = cir.load %5 : !cir.ptr<!u32i>, !u32i loc(#loc29)
      cir.call @printUnsignedLine(%9) : (!u32i) -> () loc(#loc30)
    } loc(#loc140)
    cir.return loc(#loc15)
  } loc(#loc136)
  cir.func no_proto @CWE190_Integer_Overflow__unsigned_int_rand_square_42_good() extra(#fn_attr1) {
    %0 = cir.get_global @goodB2G : !cir.ptr<!cir.func<!void ()>> loc(#loc144)
    cir.call %0() : (!cir.ptr<!cir.func<!void ()>>) -> () loc(#loc33)
    %1 = cir.get_global @goodG2B : !cir.ptr<!cir.func<!void ()>> loc(#loc145)
    cir.call %1() : (!cir.ptr<!cir.func<!void ()>>) -> () loc(#loc35)
    cir.return loc(#loc32)
  } loc(#loc143)
  cir.func private @srand(!u32i) extra(#fn_attr) loc(#loc146)
  cir.func private @time(!cir.ptr<!s64i>) -> !s64i extra(#fn_attr) loc(#loc147)
  cir.func private @printLine(!cir.ptr<!s8i>) loc(#loc148)
  cir.global "private" constant cir_private dsolocal @".str" = #cir.const_array<"Calling good()...\00" : !cir.array<!s8i x 18>> : !cir.array<!s8i x 18> {alignment = 1 : i64} loc(#loc43)
  cir.global "private" constant cir_private dsolocal @".str.1" = #cir.const_array<"Finished good()\00" : !cir.array<!s8i x 16>> : !cir.array<!s8i x 16> {alignment = 1 : i64} loc(#loc44)
  cir.global "private" constant cir_private dsolocal @".str.2" = #cir.const_array<"Calling bad()...\00" : !cir.array<!s8i x 17>> : !cir.array<!s8i x 17> {alignment = 1 : i64} loc(#loc45)
  cir.global "private" constant cir_private dsolocal @".str.3" = #cir.const_array<"Finished bad()\00" : !cir.array<!s8i x 15>> : !cir.array<!s8i x 15> {alignment = 1 : i64} loc(#loc46)
  cir.func @main(%arg0: !s32i loc(fused[#loc49, #loc50]), %arg1: !cir.ptr<!cir.ptr<!s8i>> loc(fused[#loc51, #loc52])) -> !s32i extra(#fn_attr1) {
    %0 = cir.alloca !s32i, !cir.ptr<!s32i>, ["argc", init] {alignment = 4 : i64} loc(#loc150)
    %1 = cir.alloca !cir.ptr<!cir.ptr<!s8i>>, !cir.ptr<!cir.ptr<!cir.ptr<!s8i>>>, ["argv", init] {alignment = 8 : i64} loc(#loc151)
    %2 = cir.alloca !s32i, !cir.ptr<!s32i>, ["__retval"] {alignment = 4 : i64} loc(#loc48)
    cir.store %arg0, %0 : !s32i, !cir.ptr<!s32i> loc(#loc53)
    cir.store %arg1, %1 : !cir.ptr<!cir.ptr<!s8i>>, !cir.ptr<!cir.ptr<!cir.ptr<!s8i>>> loc(#loc53)
    %3 = cir.const #cir.ptr<null> : !cir.ptr<!s64i> loc(#loc54)
    %4 = cir.call @time(%3) : (!cir.ptr<!s64i>) -> !s64i extra(#fn_attr) loc(#loc55)
    %5 = cir.cast(integral, %4 : !s64i), !u32i loc(#loc55)
    cir.call @srand(%5) : (!u32i) -> () extra(#fn_attr) loc(#loc56)
    %6 = cir.get_global @".str" : !cir.ptr<!cir.array<!s8i x 18>> loc(#loc43)
    %7 = cir.cast(array_to_ptrdecay, %6 : !cir.ptr<!cir.array<!s8i x 18>>), !cir.ptr<!s8i> loc(#loc43)
    cir.call @printLine(%7) : (!cir.ptr<!s8i>) -> () loc(#loc57)
    %8 = cir.get_global @CWE190_Integer_Overflow__unsigned_int_rand_square_42_good : !cir.ptr<!cir.func<!void ()>> loc(#loc152)
    cir.call @CWE190_Integer_Overflow__unsigned_int_rand_square_42_good() : () -> () loc(#loc58)
    %9 = cir.get_global @".str.1" : !cir.ptr<!cir.array<!s8i x 16>> loc(#loc44)
    %10 = cir.cast(array_to_ptrdecay, %9 : !cir.ptr<!cir.array<!s8i x 16>>), !cir.ptr<!s8i> loc(#loc44)
    cir.call @printLine(%10) : (!cir.ptr<!s8i>) -> () loc(#loc60)
    %11 = cir.get_global @".str.2" : !cir.ptr<!cir.array<!s8i x 17>> loc(#loc45)
    %12 = cir.cast(array_to_ptrdecay, %11 : !cir.ptr<!cir.array<!s8i x 17>>), !cir.ptr<!s8i> loc(#loc45)
    cir.call @printLine(%12) : (!cir.ptr<!s8i>) -> () loc(#loc61)
    %13 = cir.get_global @CWE190_Integer_Overflow__unsigned_int_rand_square_42_bad : !cir.ptr<!cir.func<!void ()>> loc(#loc153)
    cir.call @CWE190_Integer_Overflow__unsigned_int_rand_square_42_bad() : () -> () loc(#loc62)
    %14 = cir.get_global @".str.3" : !cir.ptr<!cir.array<!s8i x 15>> loc(#loc46)
    %15 = cir.cast(array_to_ptrdecay, %14 : !cir.ptr<!cir.array<!s8i x 15>>), !cir.ptr<!s8i> loc(#loc46)
    cir.call @printLine(%15) : (!cir.ptr<!s8i>) -> () loc(#loc64)
    %16 = cir.const #cir.int<0> : !s32i loc(#loc65)
    cir.store %16, %2 : !s32i, !cir.ptr<!s32i> loc(#loc154)
    %17 = cir.load %2 : !cir.ptr<!s32i>, !s32i loc(#loc154)
    cir.return %17 : !s32i loc(#loc154)
  } loc(#loc149)
  cir.func internal private @goodB2GSource(%arg0: !u32i loc(fused[#loc69, #loc70])) -> !u32i extra(#fn_attr1) {
    %0 = cir.alloca !u32i, !cir.ptr<!u32i>, ["data", init] {alignment = 4 : i64} loc(#loc156)
    %1 = cir.alloca !u32i, !cir.ptr<!u32i>, ["__retval"] {alignment = 4 : i64} loc(#loc68)
    cir.store %arg0, %0 : !u32i, !cir.ptr<!u32i> loc(#loc71)
    %2 = cir.call @rand() : () -> !s32i extra(#fn_attr) loc(#loc72)
    %3 = cir.const #cir.int<1> : !s32i loc(#loc72)
    %4 = cir.binop(and, %2, %3) : !s32i loc(#loc72)
    %5 = cir.cast(int_to_bool, %4 : !s32i), !cir.bool loc(#loc72)
    %6 = cir.ternary(%5, true {
      %11 = cir.call @rand() : () -> !s32i extra(#fn_attr) loc(#loc72)
      %12 = cir.cast(integral, %11 : !s32i), !u32i loc(#loc72)
      %13 = cir.const #cir.int<30> : !s32i loc(#loc72)
      %14 = cir.shift(left, %12 : !u32i, %13 : !s32i) -> !u32i loc(#loc72)
      %15 = cir.call @rand() : () -> !s32i extra(#fn_attr) loc(#loc72)
      %16 = cir.cast(integral, %15 : !s32i), !u32i loc(#loc72)
      %17 = cir.const #cir.int<15> : !s32i loc(#loc72)
      %18 = cir.shift(left, %16 : !u32i, %17 : !s32i) -> !u32i loc(#loc72)
      %19 = cir.binop(xor, %14, %18) : !u32i loc(#loc72)
      %20 = cir.call @rand() : () -> !s32i extra(#fn_attr) loc(#loc72)
      %21 = cir.cast(integral, %20 : !s32i), !u32i loc(#loc72)
      %22 = cir.binop(xor, %19, %21) : !u32i loc(#loc72)
      cir.yield %22 : !u32i loc(#loc72)
    }, false {
      %11 = cir.call @rand() : () -> !s32i extra(#fn_attr) loc(#loc72)
      %12 = cir.cast(integral, %11 : !s32i), !u32i loc(#loc72)
      %13 = cir.const #cir.int<30> : !s32i loc(#loc72)
      %14 = cir.shift(left, %12 : !u32i, %13 : !s32i) -> !u32i loc(#loc72)
      %15 = cir.call @rand() : () -> !s32i extra(#fn_attr) loc(#loc72)
      %16 = cir.cast(integral, %15 : !s32i), !u32i loc(#loc72)
      %17 = cir.const #cir.int<15> : !s32i loc(#loc72)
      %18 = cir.shift(left, %16 : !u32i, %17 : !s32i) -> !u32i loc(#loc72)
      %19 = cir.binop(xor, %14, %18) : !u32i loc(#loc72)
      %20 = cir.call @rand() : () -> !s32i extra(#fn_attr) loc(#loc72)
      %21 = cir.cast(integral, %20 : !s32i), !u32i loc(#loc72)
      %22 = cir.binop(xor, %19, %21) : !u32i loc(#loc72)
      %23 = cir.unary(minus, %22) : !u32i, !u32i loc(#loc72)
      %24 = cir.const #cir.int<1> : !s32i loc(#loc72)
      %25 = cir.cast(integral, %24 : !s32i), !u32i loc(#loc72)
      %26 = cir.binop(sub, %23, %25) : !u32i loc(#loc72)
      cir.yield %26 : !u32i loc(#loc72)
    }) : (!cir.bool) -> !u32i loc(#loc72)
    %7 = cir.cast(integral, %6 : !u32i), !s32i loc(#loc72)
    %8 = cir.cast(integral, %7 : !s32i), !u32i loc(#loc72)
    cir.store %8, %0 : !u32i, !cir.ptr<!u32i> loc(#loc157)
    %9 = cir.load %0 : !cir.ptr<!u32i>, !u32i loc(#loc74)
    cir.store %9, %1 : !u32i, !cir.ptr<!u32i> loc(#loc158)
    %10 = cir.load %1 : !cir.ptr<!u32i>, !u32i loc(#loc158)
    cir.return %10 : !u32i loc(#loc158)
  } loc(#loc155)
  cir.func private @sqrt(!cir.double) -> !cir.double extra(#fn_attr) loc(#loc76)
  cir.global "private" constant cir_private dsolocal @".str.4" = #cir.const_array<"data value is too large to perform arithmetic safely.\00" : !cir.array<!s8i x 54>> : !cir.array<!s8i x 54> {alignment = 1 : i64} loc(#loc77)
  cir.func no_proto internal private @goodB2G() extra(#fn_attr1) {
    %0 = cir.alloca !u32i, !cir.ptr<!u32i>, ["data"] {alignment = 4 : i64} loc(#loc160)
    %1 = cir.const #cir.int<0> : !s32i loc(#loc82)
    %2 = cir.cast(integral, %1 : !s32i), !u32i loc(#loc82)
    cir.store %2, %0 : !u32i, !cir.ptr<!u32i> loc(#loc161)
    %3 = cir.load %0 : !cir.ptr<!u32i>, !u32i loc(#loc84)
    %4 = cir.call @goodB2GSource(%3) : (!u32i) -> !u32i loc(#loc85)
    cir.store %4, %0 : !u32i, !cir.ptr<!u32i> loc(#loc162)
    cir.scope {
      %5 = cir.load %0 : !cir.ptr<!u32i>, !u32i loc(#loc90)
      %6 = cir.cast(integral, %5 : !u32i), !s64i loc(#loc90)
      %7 = cir.cast(integral, %6 : !s64i), !s32i loc(#loc90)
      %8 = cir.abs %7 poison : !s32i loc(#loc91)
      %9 = cir.cast(integral, %8 : !s32i), !s64i loc(#loc91)
      %10 = cir.get_global @sqrt : !cir.ptr<!cir.func<!cir.double (!cir.double)>> loc(#loc92)
      %11 = cir.const #cir.int<2147483647> : !s32i loc(#loc93)
      %12 = cir.cast(integral, %11 : !s32i), !u32i loc(#loc93)
      %13 = cir.const #cir.int<2> : !u32i loc(#loc93)
      %14 = cir.binop(mul, %12, %13) : !u32i loc(#loc93)
      %15 = cir.const #cir.int<1> : !u32i loc(#loc93)
      %16 = cir.binop(add, %14, %15) : !u32i loc(#loc93)
      %17 = cir.cast(int_to_float, %16 : !u32i), !cir.double loc(#loc93)
      %18 = cir.call @sqrt(%17) : (!cir.double) -> !cir.double extra(#fn_attr) loc(#loc92)
      %19 = cir.cast(float_to_int, %18 : !cir.double), !s64i loc(#loc92)
      %20 = cir.cmp(lt, %9, %19) : !s64i, !cir.bool loc(#loc164)
      cir.if %20 {
        %21 = cir.alloca !u32i, !cir.ptr<!u32i>, ["result", init] {alignment = 4 : i64} loc(#loc166)
        %22 = cir.load %0 : !cir.ptr<!u32i>, !u32i loc(#loc100)
        %23 = cir.load %0 : !cir.ptr<!u32i>, !u32i loc(#loc99)
        %24 = cir.binop(mul, %22, %23) : !u32i loc(#loc167)
        cir.store %24, %21 : !u32i, !cir.ptr<!u32i> loc(#loc166)
        %25 = cir.load %21 : !cir.ptr<!u32i>, !u32i loc(#loc101)
        cir.call @printUnsignedLine(%25) : (!u32i) -> () loc(#loc102)
      } else {
        %21 = cir.get_global @".str.4" : !cir.ptr<!cir.array<!s8i x 54>> loc(#loc77)
        %22 = cir.cast(array_to_ptrdecay, %21 : !cir.ptr<!cir.array<!s8i x 54>>), !cir.ptr<!s8i> loc(#loc77)
        cir.call @printLine(%22) : (!cir.ptr<!s8i>) -> () loc(#loc103)
      } loc(#loc165)
    } loc(#loc163)
    cir.return loc(#loc79)
  } loc(#loc159)
  cir.func internal private @goodG2BSource(%arg0: !u32i loc(fused[#loc106, #loc107])) -> !u32i extra(#fn_attr1) {
    %0 = cir.alloca !u32i, !cir.ptr<!u32i>, ["data", init] {alignment = 4 : i64} loc(#loc169)
    %1 = cir.alloca !u32i, !cir.ptr<!u32i>, ["__retval"] {alignment = 4 : i64} loc(#loc105)
    cir.store %arg0, %0 : !u32i, !cir.ptr<!u32i> loc(#loc108)
    %2 = cir.const #cir.int<2> : !s32i loc(#loc109)
    %3 = cir.cast(integral, %2 : !s32i), !u32i loc(#loc109)
    cir.store %3, %0 : !u32i, !cir.ptr<!u32i> loc(#loc170)
    %4 = cir.load %0 : !cir.ptr<!u32i>, !u32i loc(#loc111)
    cir.store %4, %1 : !u32i, !cir.ptr<!u32i> loc(#loc171)
    %5 = cir.load %1 : !cir.ptr<!u32i>, !u32i loc(#loc171)
    cir.return %5 : !u32i loc(#loc171)
  } loc(#loc168)
  cir.func no_proto internal private @goodG2B() extra(#fn_attr1) {
    %0 = cir.alloca !u32i, !cir.ptr<!u32i>, ["data"] {alignment = 4 : i64} loc(#loc173)
    %1 = cir.const #cir.int<0> : !s32i loc(#loc117)
    %2 = cir.cast(integral, %1 : !s32i), !u32i loc(#loc117)
    cir.store %2, %0 : !u32i, !cir.ptr<!u32i> loc(#loc174)
    %3 = cir.load %0 : !cir.ptr<!u32i>, !u32i loc(#loc119)
    %4 = cir.call @goodG2BSource(%3) : (!u32i) -> !u32i loc(#loc120)
    cir.store %4, %0 : !u32i, !cir.ptr<!u32i> loc(#loc175)
    cir.scope {
      %5 = cir.alloca !u32i, !cir.ptr<!u32i>, ["result", init] {alignment = 4 : i64} loc(#loc177)
      %6 = cir.load %0 : !cir.ptr<!u32i>, !u32i loc(#loc127)
      %7 = cir.load %0 : !cir.ptr<!u32i>, !u32i loc(#loc126)
      %8 = cir.binop(mul, %6, %7) : !u32i loc(#loc178)
      cir.store %8, %5 : !u32i, !cir.ptr<!u32i> loc(#loc177)
      %9 = cir.load %5 : !cir.ptr<!u32i>, !u32i loc(#loc128)
      cir.call @printUnsignedLine(%9) : (!u32i) -> () loc(#loc129)
    } loc(#loc176)
    cir.return loc(#loc114)
  } loc(#loc172)
} loc(#loc)
#loc = loc("/home/ladisgin/git_proj/juliet-c/testcases/CWE190_Integer_Overflow/s05/CWE190_Integer_Overflow__unsigned_int_rand_square_42.c":0:0)
#loc1 = loc("/usr/include/stdlib.h":573:1)
#loc2 = loc("/usr/include/stdlib.h":573:24)
#loc3 = loc("CWE190_Integer_Overflow__unsigned_int_rand_square_42.c":24:1)
#loc4 = loc("CWE190_Integer_Overflow__unsigned_int_rand_square_42.c":29:1)
#loc7 = loc("CWE190_Integer_Overflow__unsigned_int_rand_square_42.c":25:1)
#loc8 = loc("CWE190_Integer_Overflow__unsigned_int_rand_square_42.c":27:26)
#loc9 = loc("CWE190_Integer_Overflow__unsigned_int_rand_square_42.c":27:5)
#loc10 = loc("CWE190_Integer_Overflow__unsigned_int_rand_square_42.c":28:12)
#loc11 = loc("CWE190_Integer_Overflow__unsigned_int_rand_square_42.c":28:5)
#loc12 = loc("../../../testcasesupport/std_testcase_io.h":34:1)
#loc13 = loc("../../../testcasesupport/std_testcase_io.h":34:47)
#loc14 = loc("CWE190_Integer_Overflow__unsigned_int_rand_square_42.c":31:1)
#loc15 = loc("CWE190_Integer_Overflow__unsigned_int_rand_square_42.c":41:1)
#loc16 = loc("CWE190_Integer_Overflow__unsigned_int_rand_square_42.c":33:5)
#loc17 = loc("CWE190_Integer_Overflow__unsigned_int_rand_square_42.c":33:18)
#loc18 = loc("CWE190_Integer_Overflow__unsigned_int_rand_square_42.c":34:12)
#loc19 = loc("CWE190_Integer_Overflow__unsigned_int_rand_square_42.c":34:5)
#loc20 = loc("CWE190_Integer_Overflow__unsigned_int_rand_square_42.c":35:22)
#loc21 = loc("CWE190_Integer_Overflow__unsigned_int_rand_square_42.c":35:12)
#loc22 = loc("CWE190_Integer_Overflow__unsigned_int_rand_square_42.c":35:5)
#loc23 = loc("CWE190_Integer_Overflow__unsigned_int_rand_square_42.c":35:26)
#loc24 = loc("CWE190_Integer_Overflow__unsigned_int_rand_square_42.c":36:5)
#loc25 = loc("CWE190_Integer_Overflow__unsigned_int_rand_square_42.c":40:5)
#loc26 = loc("CWE190_Integer_Overflow__unsigned_int_rand_square_42.c":38:9)
#loc27 = loc("CWE190_Integer_Overflow__unsigned_int_rand_square_42.c":38:38)
#loc28 = loc("CWE190_Integer_Overflow__unsigned_int_rand_square_42.c":38:31)
#loc29 = loc("CWE190_Integer_Overflow__unsigned_int_rand_square_42.c":39:27)
#loc30 = loc("CWE190_Integer_Overflow__unsigned_int_rand_square_42.c":39:9)
#loc31 = loc("CWE190_Integer_Overflow__unsigned_int_rand_square_42.c":92:1)
#loc32 = loc("CWE190_Integer_Overflow__unsigned_int_rand_square_42.c":96:1)
#loc33 = loc("CWE190_Integer_Overflow__unsigned_int_rand_square_42.c":94:5)
#loc34 = loc("CWE190_Integer_Overflow__unsigned_int_rand_square_42.c":94:13)
#loc35 = loc("CWE190_Integer_Overflow__unsigned_int_rand_square_42.c":95:5)
#loc36 = loc("CWE190_Integer_Overflow__unsigned_int_rand_square_42.c":95:13)
#loc37 = loc("/usr/include/stdlib.h":575:1)
#loc38 = loc("/usr/include/stdlib.h":575:41)
#loc39 = loc("/usr/include/time.h":76:1)
#loc40 = loc("/usr/include/time.h":76:38)
#loc41 = loc("../../../testcasesupport/std_testcase_io.h":14:1)
#loc42 = loc("../../../testcasesupport/std_testcase_io.h":14:33)
#loc43 = loc("CWE190_Integer_Overflow__unsigned_int_rand_square_42.c":112:15)
#loc44 = loc("CWE190_Integer_Overflow__unsigned_int_rand_square_42.c":114:15)
#loc45 = loc("CWE190_Integer_Overflow__unsigned_int_rand_square_42.c":117:15)
#loc46 = loc("CWE190_Integer_Overflow__unsigned_int_rand_square_42.c":119:15)
#loc47 = loc("CWE190_Integer_Overflow__unsigned_int_rand_square_42.c":107:1)
#loc48 = loc("CWE190_Integer_Overflow__unsigned_int_rand_square_42.c":122:1)
#loc53 = loc("CWE190_Integer_Overflow__unsigned_int_rand_square_42.c":108:1)
#loc54 = loc("CWE190_Integer_Overflow__unsigned_int_rand_square_42.c":110:27)
#loc55 = loc("CWE190_Integer_Overflow__unsigned_int_rand_square_42.c":110:22)
#loc56 = loc("CWE190_Integer_Overflow__unsigned_int_rand_square_42.c":110:5)
#loc57 = loc("CWE190_Integer_Overflow__unsigned_int_rand_square_42.c":112:5)
#loc58 = loc("CWE190_Integer_Overflow__unsigned_int_rand_square_42.c":113:5)
#loc59 = loc("CWE190_Integer_Overflow__unsigned_int_rand_square_42.c":113:63)
#loc60 = loc("CWE190_Integer_Overflow__unsigned_int_rand_square_42.c":114:5)
#loc61 = loc("CWE190_Integer_Overflow__unsigned_int_rand_square_42.c":117:5)
#loc62 = loc("CWE190_Integer_Overflow__unsigned_int_rand_square_42.c":118:5)
#loc63 = loc("CWE190_Integer_Overflow__unsigned_int_rand_square_42.c":118:62)
#loc64 = loc("CWE190_Integer_Overflow__unsigned_int_rand_square_42.c":119:5)
#loc65 = loc("CWE190_Integer_Overflow__unsigned_int_rand_square_42.c":121:12)
#loc66 = loc("CWE190_Integer_Overflow__unsigned_int_rand_square_42.c":121:5)
#loc67 = loc("CWE190_Integer_Overflow__unsigned_int_rand_square_42.c":68:1)
#loc68 = loc("CWE190_Integer_Overflow__unsigned_int_rand_square_42.c":73:1)
#loc71 = loc("CWE190_Integer_Overflow__unsigned_int_rand_square_42.c":69:1)
#loc72 = loc("CWE190_Integer_Overflow__unsigned_int_rand_square_42.c":71:26)
#loc73 = loc("CWE190_Integer_Overflow__unsigned_int_rand_square_42.c":71:5)
#loc74 = loc("CWE190_Integer_Overflow__unsigned_int_rand_square_42.c":72:12)
#loc75 = loc("CWE190_Integer_Overflow__unsigned_int_rand_square_42.c":72:5)
#loc76 = loc("/usr/include/bits/mathcalls.h":158:1)
#loc77 = loc("CWE190_Integer_Overflow__unsigned_int_rand_square_42.c":88:19)
#loc78 = loc("CWE190_Integer_Overflow__unsigned_int_rand_square_42.c":75:1)
#loc79 = loc("CWE190_Integer_Overflow__unsigned_int_rand_square_42.c":90:1)
#loc80 = loc("CWE190_Integer_Overflow__unsigned_int_rand_square_42.c":77:5)
#loc81 = loc("CWE190_Integer_Overflow__unsigned_int_rand_square_42.c":77:18)
#loc82 = loc("CWE190_Integer_Overflow__unsigned_int_rand_square_42.c":78:12)
#loc83 = loc("CWE190_Integer_Overflow__unsigned_int_rand_square_42.c":78:5)
#loc84 = loc("CWE190_Integer_Overflow__unsigned_int_rand_square_42.c":79:26)
#loc85 = loc("CWE190_Integer_Overflow__unsigned_int_rand_square_42.c":79:12)
#loc86 = loc("CWE190_Integer_Overflow__unsigned_int_rand_square_42.c":79:5)
#loc87 = loc("CWE190_Integer_Overflow__unsigned_int_rand_square_42.c":79:30)
#loc88 = loc("CWE190_Integer_Overflow__unsigned_int_rand_square_42.c":81:5)
#loc89 = loc("CWE190_Integer_Overflow__unsigned_int_rand_square_42.c":89:5)
#loc90 = loc("CWE190_Integer_Overflow__unsigned_int_rand_square_42.c":81:19)
#loc91 = loc("CWE190_Integer_Overflow__unsigned_int_rand_square_42.c":81:9)
#loc92 = loc("CWE190_Integer_Overflow__unsigned_int_rand_square_42.c":81:33)
#loc93 = loc("CWE190_Integer_Overflow__unsigned_int_rand_square_42.c":81:46)
#loc94 = loc("CWE190_Integer_Overflow__unsigned_int_rand_square_42.c":81:54)
#loc95 = loc("CWE190_Integer_Overflow__unsigned_int_rand_square_42.c":82:5)
#loc96 = loc("CWE190_Integer_Overflow__unsigned_int_rand_square_42.c":85:5)
#loc97 = loc("CWE190_Integer_Overflow__unsigned_int_rand_square_42.c":87:5)
#loc98 = loc("CWE190_Integer_Overflow__unsigned_int_rand_square_42.c":83:9)
#loc99 = loc("CWE190_Integer_Overflow__unsigned_int_rand_square_42.c":83:38)
#loc100 = loc("CWE190_Integer_Overflow__unsigned_int_rand_square_42.c":83:31)
#loc101 = loc("CWE190_Integer_Overflow__unsigned_int_rand_square_42.c":84:27)
#loc102 = loc("CWE190_Integer_Overflow__unsigned_int_rand_square_42.c":84:9)
#loc103 = loc("CWE190_Integer_Overflow__unsigned_int_rand_square_42.c":88:9)
#loc104 = loc("CWE190_Integer_Overflow__unsigned_int_rand_square_42.c":48:1)
#loc105 = loc("CWE190_Integer_Overflow__unsigned_int_rand_square_42.c":53:1)
#loc108 = loc("CWE190_Integer_Overflow__unsigned_int_rand_square_42.c":49:1)
#loc109 = loc("CWE190_Integer_Overflow__unsigned_int_rand_square_42.c":51:12)
#loc110 = loc("CWE190_Integer_Overflow__unsigned_int_rand_square_42.c":51:5)
#loc111 = loc("CWE190_Integer_Overflow__unsigned_int_rand_square_42.c":52:12)
#loc112 = loc("CWE190_Integer_Overflow__unsigned_int_rand_square_42.c":52:5)
#loc113 = loc("CWE190_Integer_Overflow__unsigned_int_rand_square_42.c":55:1)
#loc114 = loc("CWE190_Integer_Overflow__unsigned_int_rand_square_42.c":65:1)
#loc115 = loc("CWE190_Integer_Overflow__unsigned_int_rand_square_42.c":57:5)
#loc116 = loc("CWE190_Integer_Overflow__unsigned_int_rand_square_42.c":57:18)
#loc117 = loc("CWE190_Integer_Overflow__unsigned_int_rand_square_42.c":58:12)
#loc118 = loc("CWE190_Integer_Overflow__unsigned_int_rand_square_42.c":58:5)
#loc119 = loc("CWE190_Integer_Overflow__unsigned_int_rand_square_42.c":59:26)
#loc120 = loc("CWE190_Integer_Overflow__unsigned_int_rand_square_42.c":59:12)
#loc121 = loc("CWE190_Integer_Overflow__unsigned_int_rand_square_42.c":59:5)
#loc122 = loc("CWE190_Integer_Overflow__unsigned_int_rand_square_42.c":59:30)
#loc123 = loc("CWE190_Integer_Overflow__unsigned_int_rand_square_42.c":60:5)
#loc124 = loc("CWE190_Integer_Overflow__unsigned_int_rand_square_42.c":64:5)
#loc125 = loc("CWE190_Integer_Overflow__unsigned_int_rand_square_42.c":62:9)
#loc126 = loc("CWE190_Integer_Overflow__unsigned_int_rand_square_42.c":62:38)
#loc127 = loc("CWE190_Integer_Overflow__unsigned_int_rand_square_42.c":62:31)
#loc128 = loc("CWE190_Integer_Overflow__unsigned_int_rand_square_42.c":63:27)
#loc129 = loc("CWE190_Integer_Overflow__unsigned_int_rand_square_42.c":63:9)
#loc130 = loc(fused[#loc1, #loc2])
#loc131 = loc(fused[#loc3, #loc4])
#loc133 = loc(fused[#loc9, #loc8])
#loc134 = loc(fused[#loc11, #loc10])
#loc135 = loc(fused[#loc12, #loc13])
#loc136 = loc(fused[#loc14, #loc15])
#loc137 = loc(fused[#loc16, #loc17])
#loc138 = loc(fused[#loc19, #loc18])
#loc139 = loc(fused[#loc22, #loc23])
#loc140 = loc(fused[#loc24, #loc25])
#loc141 = loc(fused[#loc26, #loc27])
#loc142 = loc(fused[#loc28, #loc27])
#loc143 = loc(fused[#loc31, #loc32])
#loc144 = loc(fused[#loc33, #loc34])
#loc145 = loc(fused[#loc35, #loc36])
#loc146 = loc(fused[#loc37, #loc38])
#loc147 = loc(fused[#loc39, #loc40])
#loc148 = loc(fused[#loc41, #loc42])
#loc149 = loc(fused[#loc47, #loc48])
#loc152 = loc(fused[#loc58, #loc59])
#loc153 = loc(fused[#loc62, #loc63])
#loc154 = loc(fused[#loc66, #loc65])
#loc155 = loc(fused[#loc67, #loc68])
#loc157 = loc(fused[#loc73, #loc72])
#loc158 = loc(fused[#loc75, #loc74])
#loc159 = loc(fused[#loc78, #loc79])
#loc160 = loc(fused[#loc80, #loc81])
#loc161 = loc(fused[#loc83, #loc82])
#loc162 = loc(fused[#loc86, #loc87])
#loc163 = loc(fused[#loc88, #loc89])
#loc164 = loc(fused[#loc91, #loc94])
#loc165 = loc(fused[#loc95, #loc96, #loc97, #loc89])
#loc166 = loc(fused[#loc98, #loc99])
#loc167 = loc(fused[#loc100, #loc99])
#loc168 = loc(fused[#loc104, #loc105])
#loc170 = loc(fused[#loc110, #loc109])
#loc171 = loc(fused[#loc112, #loc111])
#loc172 = loc(fused[#loc113, #loc114])
#loc173 = loc(fused[#loc115, #loc116])
#loc174 = loc(fused[#loc118, #loc117])
#loc175 = loc(fused[#loc121, #loc122])
#loc176 = loc(fused[#loc123, #loc124])
#loc177 = loc(fused[#loc125, #loc126])
#loc178 = loc(fused[#loc127, #loc126])
