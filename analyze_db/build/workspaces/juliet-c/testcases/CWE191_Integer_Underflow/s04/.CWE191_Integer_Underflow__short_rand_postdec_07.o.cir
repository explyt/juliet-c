!s16i = !cir.int<s, 16>
!s32i = !cir.int<s, 32>
!s8i = !cir.int<s, 8>
!u32i = !cir.int<u, 32>
#fn_attr = #cir<extra({nothrow = #cir.nothrow})>
#fn_attr1 = #cir<extra({inline = #cir.inline<no>, nothrow = #cir.nothrow, optnone = #cir.optnone, uwtable = #cir.uwtable<async>})>
#loc20 = loc("CWE191_Integer_Underflow__short_rand_postdec_07.c":34:23)
#loc60 = loc("CWE191_Integer_Underflow__short_rand_postdec_07.c":59:23)
#loc95 = loc("CWE191_Integer_Underflow__short_rand_postdec_07.c":90:23)
module @"/workspaces/juliet-c/testcases/CWE191_Integer_Underflow/s04/CWE191_Integer_Underflow__short_rand_postdec_07.c" attributes {cir.lang = #cir.lang<c>, cir.sob = #cir.signed_overflow_behavior<undefined>, cir.triple = "x86_64-unknown-linux-gnu", cir.type_size_info = #cir.type_size_info<char = 8, int = 32, size_t = 64>, cir.uwtable = #cir.uwtable<async>, dlti.dl_spec = #dlti.dl_spec<i128 = dense<128> : vector<2xi64>, f80 = dense<128> : vector<2xi64>, !llvm.ptr<271> = dense<32> : vector<4xi64>, !llvm.ptr<272> = dense<64> : vector<4xi64>, i64 = dense<64> : vector<2xi64>, i32 = dense<32> : vector<2xi64>, !llvm.ptr<270> = dense<32> : vector<4xi64>, f64 = dense<64> : vector<2xi64>, f16 = dense<16> : vector<2xi64>, f128 = dense<128> : vector<2xi64>, i1 = dense<8> : vector<2xi64>, !llvm.ptr = dense<64> : vector<4xi64>, i8 = dense<8> : vector<2xi64>, i16 = dense<16> : vector<2xi64>, "dlti.stack_alignment" = 128 : i64, "dlti.endianness" = "little", "dlti.mangling_mode" = "e">} {
  cir.global "private" internal dsolocal @staticFive = #cir.int<5> : !s32i {alignment = 4 : i64} loc(#loc173)
  cir.func private @rand() -> !s32i extra(#fn_attr) loc(#loc174)
  cir.func private @printIntLine(!s32i) loc(#loc175)
  cir.func no_proto @CWE191_Integer_Underflow__short_rand_postdec_07_bad() extra(#fn_attr1) {
    %0 = cir.alloca !s16i, !cir.ptr<!s16i>, ["result", init] {alignment = 2 : i64} loc(#loc177)
    %1 = cir.alloca !s16i, !cir.ptr<!s16i>, ["data"] {alignment = 2 : i64} loc(#loc178)
    %2 = cir.const #cir.int<0> : !s32i loc(#loc13)
    %3 = cir.cast(integral, %2 : !s32i), !s16i loc(#loc13)
    cir.store %3, %1 : !s16i, !cir.ptr<!s16i> loc(#loc179)
    cir.br ^bb1 loc(#loc180)
  ^bb1:  // pred: ^bb0
    %4 = cir.get_global @staticFive : !cir.ptr<!s32i> loc(#loc173)
    %5 = cir.load %4 : !cir.ptr<!s32i>, !s32i loc(#loc17)
    %6 = cir.const #cir.int<5> : !s32i loc(#loc18)
    %7 = cir.cmp(eq, %5, %6) : !s32i, !cir.bool loc(#loc181)
    cir.brcond %7 ^bb2, ^bb7 loc(#loc182)
  ^bb2:  // pred: ^bb1
    %8 = cir.call @rand() : () -> !s32i extra(#fn_attr) loc(#loc20)
    %9 = cir.const #cir.int<1> : !s32i loc(#loc20)
    %10 = cir.binop(and, %8, %9) : !s32i loc(#loc20)
    %11 = cir.cast(int_to_bool, %10 : !s32i), !cir.bool loc(#loc20)
    cir.brcond %11 ^bb3, ^bb4 loc(#loc20)
  ^bb3:  // pred: ^bb2
    %12 = cir.call @rand() : () -> !s32i extra(#fn_attr) loc(#loc20)
    %13 = cir.cast(integral, %12 : !s32i), !u32i loc(#loc20)
    %14 = cir.const #cir.int<30> : !s32i loc(#loc20)
    %15 = cir.shift(left, %13 : !u32i, %14 : !s32i) -> !u32i loc(#loc20)
    %16 = cir.call @rand() : () -> !s32i extra(#fn_attr) loc(#loc20)
    %17 = cir.cast(integral, %16 : !s32i), !u32i loc(#loc20)
    %18 = cir.const #cir.int<15> : !s32i loc(#loc20)
    %19 = cir.shift(left, %17 : !u32i, %18 : !s32i) -> !u32i loc(#loc20)
    %20 = cir.binop(xor, %15, %19) : !u32i loc(#loc20)
    %21 = cir.call @rand() : () -> !s32i extra(#fn_attr) loc(#loc20)
    %22 = cir.cast(integral, %21 : !s32i), !u32i loc(#loc20)
    %23 = cir.binop(xor, %20, %22) : !u32i loc(#loc20)
    cir.br ^bb5(%23 : !u32i) loc(#loc20)
  ^bb4:  // pred: ^bb2
    %24 = cir.call @rand() : () -> !s32i extra(#fn_attr) loc(#loc20)
    %25 = cir.cast(integral, %24 : !s32i), !u32i loc(#loc20)
    %26 = cir.const #cir.int<30> : !s32i loc(#loc20)
    %27 = cir.shift(left, %25 : !u32i, %26 : !s32i) -> !u32i loc(#loc20)
    %28 = cir.call @rand() : () -> !s32i extra(#fn_attr) loc(#loc20)
    %29 = cir.cast(integral, %28 : !s32i), !u32i loc(#loc20)
    %30 = cir.const #cir.int<15> : !s32i loc(#loc20)
    %31 = cir.shift(left, %29 : !u32i, %30 : !s32i) -> !u32i loc(#loc20)
    %32 = cir.binop(xor, %27, %31) : !u32i loc(#loc20)
    %33 = cir.call @rand() : () -> !s32i extra(#fn_attr) loc(#loc20)
    %34 = cir.cast(integral, %33 : !s32i), !u32i loc(#loc20)
    %35 = cir.binop(xor, %32, %34) : !u32i loc(#loc20)
    %36 = cir.unary(minus, %35) : !u32i, !u32i loc(#loc20)
    %37 = cir.const #cir.int<1> : !s32i loc(#loc20)
    %38 = cir.cast(integral, %37 : !s32i), !u32i loc(#loc20)
    %39 = cir.binop(sub, %36, %38) : !u32i loc(#loc20)
    cir.br ^bb5(%39 : !u32i) loc(#loc20)
  ^bb5(%40: !u32i loc("CWE191_Integer_Underflow__short_rand_postdec_07.c":34:23)):  // 2 preds: ^bb3, ^bb4
    cir.br ^bb6 loc(#loc20)
  ^bb6:  // pred: ^bb5
    %41 = cir.cast(integral, %40 : !u32i), !s32i loc(#loc20)
    %42 = cir.cast(integral, %41 : !s32i), !s16i loc(#loc20)
    cir.store %42, %1 : !s16i, !cir.ptr<!s16i> loc(#loc183)
    cir.br ^bb7 loc(#loc16)
  ^bb7:  // 2 preds: ^bb1, ^bb6
    cir.br ^bb8 loc(#loc16)
  ^bb8:  // pred: ^bb7
    cir.br ^bb9 loc(#loc184)
  ^bb9:  // pred: ^bb8
    %43 = cir.get_global @staticFive : !cir.ptr<!s32i> loc(#loc173)
    %44 = cir.load %43 : !cir.ptr<!s32i>, !s32i loc(#loc24)
    %45 = cir.const #cir.int<5> : !s32i loc(#loc25)
    %46 = cir.cmp(eq, %44, %45) : !s32i, !cir.bool loc(#loc185)
    cir.brcond %46 ^bb10, ^bb13 loc(#loc186)
  ^bb10:  // pred: ^bb9
    cir.br ^bb11 loc(#loc187)
  ^bb11:  // pred: ^bb10
    %47 = cir.load %1 : !cir.ptr<!s16i>, !s16i loc(#loc29)
    %48 = cir.unary(dec, %47) : !s16i, !s16i loc(#loc30)
    cir.store %48, %1 : !s16i, !cir.ptr<!s16i> loc(#loc188)
    %49 = cir.load %1 : !cir.ptr<!s16i>, !s16i loc(#loc10)
    cir.store %49, %0 : !s16i, !cir.ptr<!s16i> loc(#loc177)
    %50 = cir.load %0 : !cir.ptr<!s16i>, !s16i loc(#loc31)
    %51 = cir.cast(integral, %50 : !s16i), !s32i loc(#loc31)
    cir.call @printIntLine(%51) : (!s32i) -> () loc(#loc32)
    cir.br ^bb12 loc(#loc28)
  ^bb12:  // pred: ^bb11
    cir.br ^bb13 loc(#loc23)
  ^bb13:  // 2 preds: ^bb9, ^bb12
    cir.br ^bb14 loc(#loc23)
  ^bb14:  // pred: ^bb13
    cir.return loc(#loc8)
  } loc(#loc176)
  cir.func no_proto @CWE191_Integer_Underflow__short_rand_postdec_07_good() extra(#fn_attr1) {
    %0 = cir.get_global @goodB2G1 : !cir.ptr<!cir.func<()>> loc(#loc190)
    cir.call %0() : (!cir.ptr<!cir.func<()>>) -> () loc(#loc35)
    %1 = cir.get_global @goodB2G2 : !cir.ptr<!cir.func<()>> loc(#loc191)
    cir.call %1() : (!cir.ptr<!cir.func<()>>) -> () loc(#loc37)
    %2 = cir.get_global @goodG2B1 : !cir.ptr<!cir.func<()>> loc(#loc192)
    cir.call %2() : (!cir.ptr<!cir.func<()>>) -> () loc(#loc39)
    %3 = cir.get_global @goodG2B2 : !cir.ptr<!cir.func<()>> loc(#loc193)
    cir.call %3() : (!cir.ptr<!cir.func<()>>) -> () loc(#loc41)
    cir.return loc(#loc34)
  } loc(#loc189)
  cir.func private @printLine(!cir.ptr<!s8i>) loc(#loc194)
  cir.global "private" constant cir_private dsolocal @".str" = #cir.const_array<"Benign, fixed string\00" : !cir.array<!s8i x 21>> : !cir.array<!s8i x 21> {alignment = 1 : i64} loc(#loc45)
  cir.global "private" constant cir_private dsolocal @".str.1" = #cir.const_array<"data value is too large to perform arithmetic safely.\00" : !cir.array<!s8i x 54>> : !cir.array<!s8i x 54> {alignment = 1 : i64} loc(#loc46)
  cir.func no_proto internal private @goodB2G1() extra(#fn_attr1) {
    %0 = cir.alloca !s16i, !cir.ptr<!s16i>, ["result", init] {alignment = 2 : i64} loc(#loc196)
    %1 = cir.alloca !s16i, !cir.ptr<!s16i>, ["data"] {alignment = 2 : i64} loc(#loc197)
    %2 = cir.const #cir.int<0> : !s32i loc(#loc53)
    %3 = cir.cast(integral, %2 : !s32i), !s16i loc(#loc53)
    cir.store %3, %1 : !s16i, !cir.ptr<!s16i> loc(#loc198)
    cir.br ^bb1 loc(#loc199)
  ^bb1:  // pred: ^bb0
    %4 = cir.get_global @staticFive : !cir.ptr<!s32i> loc(#loc173)
    %5 = cir.load %4 : !cir.ptr<!s32i>, !s32i loc(#loc57)
    %6 = cir.const #cir.int<5> : !s32i loc(#loc58)
    %7 = cir.cmp(eq, %5, %6) : !s32i, !cir.bool loc(#loc200)
    cir.brcond %7 ^bb2, ^bb7 loc(#loc201)
  ^bb2:  // pred: ^bb1
    %8 = cir.call @rand() : () -> !s32i extra(#fn_attr) loc(#loc60)
    %9 = cir.const #cir.int<1> : !s32i loc(#loc60)
    %10 = cir.binop(and, %8, %9) : !s32i loc(#loc60)
    %11 = cir.cast(int_to_bool, %10 : !s32i), !cir.bool loc(#loc60)
    cir.brcond %11 ^bb3, ^bb4 loc(#loc60)
  ^bb3:  // pred: ^bb2
    %12 = cir.call @rand() : () -> !s32i extra(#fn_attr) loc(#loc60)
    %13 = cir.cast(integral, %12 : !s32i), !u32i loc(#loc60)
    %14 = cir.const #cir.int<30> : !s32i loc(#loc60)
    %15 = cir.shift(left, %13 : !u32i, %14 : !s32i) -> !u32i loc(#loc60)
    %16 = cir.call @rand() : () -> !s32i extra(#fn_attr) loc(#loc60)
    %17 = cir.cast(integral, %16 : !s32i), !u32i loc(#loc60)
    %18 = cir.const #cir.int<15> : !s32i loc(#loc60)
    %19 = cir.shift(left, %17 : !u32i, %18 : !s32i) -> !u32i loc(#loc60)
    %20 = cir.binop(xor, %15, %19) : !u32i loc(#loc60)
    %21 = cir.call @rand() : () -> !s32i extra(#fn_attr) loc(#loc60)
    %22 = cir.cast(integral, %21 : !s32i), !u32i loc(#loc60)
    %23 = cir.binop(xor, %20, %22) : !u32i loc(#loc60)
    cir.br ^bb5(%23 : !u32i) loc(#loc60)
  ^bb4:  // pred: ^bb2
    %24 = cir.call @rand() : () -> !s32i extra(#fn_attr) loc(#loc60)
    %25 = cir.cast(integral, %24 : !s32i), !u32i loc(#loc60)
    %26 = cir.const #cir.int<30> : !s32i loc(#loc60)
    %27 = cir.shift(left, %25 : !u32i, %26 : !s32i) -> !u32i loc(#loc60)
    %28 = cir.call @rand() : () -> !s32i extra(#fn_attr) loc(#loc60)
    %29 = cir.cast(integral, %28 : !s32i), !u32i loc(#loc60)
    %30 = cir.const #cir.int<15> : !s32i loc(#loc60)
    %31 = cir.shift(left, %29 : !u32i, %30 : !s32i) -> !u32i loc(#loc60)
    %32 = cir.binop(xor, %27, %31) : !u32i loc(#loc60)
    %33 = cir.call @rand() : () -> !s32i extra(#fn_attr) loc(#loc60)
    %34 = cir.cast(integral, %33 : !s32i), !u32i loc(#loc60)
    %35 = cir.binop(xor, %32, %34) : !u32i loc(#loc60)
    %36 = cir.unary(minus, %35) : !u32i, !u32i loc(#loc60)
    %37 = cir.const #cir.int<1> : !s32i loc(#loc60)
    %38 = cir.cast(integral, %37 : !s32i), !u32i loc(#loc60)
    %39 = cir.binop(sub, %36, %38) : !u32i loc(#loc60)
    cir.br ^bb5(%39 : !u32i) loc(#loc60)
  ^bb5(%40: !u32i loc("CWE191_Integer_Underflow__short_rand_postdec_07.c":59:23)):  // 2 preds: ^bb3, ^bb4
    cir.br ^bb6 loc(#loc60)
  ^bb6:  // pred: ^bb5
    %41 = cir.cast(integral, %40 : !u32i), !s32i loc(#loc60)
    %42 = cir.cast(integral, %41 : !s32i), !s16i loc(#loc60)
    cir.store %42, %1 : !s16i, !cir.ptr<!s16i> loc(#loc202)
    cir.br ^bb7 loc(#loc56)
  ^bb7:  // 2 preds: ^bb1, ^bb6
    cir.br ^bb8 loc(#loc56)
  ^bb8:  // pred: ^bb7
    cir.br ^bb9 loc(#loc203)
  ^bb9:  // pred: ^bb8
    %43 = cir.get_global @staticFive : !cir.ptr<!s32i> loc(#loc173)
    %44 = cir.load %43 : !cir.ptr<!s32i>, !s32i loc(#loc64)
    %45 = cir.const #cir.int<5> : !s32i loc(#loc65)
    %46 = cir.cmp(ne, %44, %45) : !s32i, !cir.bool loc(#loc204)
    cir.brcond %46 ^bb10, ^bb11 loc(#loc205)
  ^bb10:  // pred: ^bb9
    %47 = cir.get_global @".str" : !cir.ptr<!cir.array<!s8i x 21>> loc(#loc45)
    %48 = cir.cast(array_to_ptrdecay, %47 : !cir.ptr<!cir.array<!s8i x 21>>), !cir.ptr<!s8i> loc(#loc45)
    cir.call @printLine(%48) : (!cir.ptr<!s8i>) -> () loc(#loc69)
    cir.br ^bb17 loc(#loc67)
  ^bb11:  // pred: ^bb9
    cir.br ^bb12 loc(#loc206)
  ^bb12:  // pred: ^bb11
    %49 = cir.load %1 : !cir.ptr<!s16i>, !s16i loc(#loc72)
    %50 = cir.cast(integral, %49 : !s16i), !s32i loc(#loc72)
    %51 = cir.const #cir.int<32767> : !s32i loc(#loc73)
    %52 = cir.unary(minus, %51) nsw : !s32i, !s32i loc(#loc73)
    %53 = cir.const #cir.int<1> : !s32i loc(#loc73)
    %54 = cir.binop(sub, %52, %53) nsw : !s32i loc(#loc73)
    %55 = cir.cmp(gt, %50, %54) : !s32i, !cir.bool loc(#loc207)
    cir.brcond %55 ^bb13, ^bb14 loc(#loc208)
  ^bb13:  // pred: ^bb12
    %56 = cir.load %1 : !cir.ptr<!s16i>, !s16i loc(#loc77)
    %57 = cir.unary(dec, %56) : !s16i, !s16i loc(#loc78)
    cir.store %57, %1 : !s16i, !cir.ptr<!s16i> loc(#loc209)
    %58 = cir.load %1 : !cir.ptr<!s16i>, !s16i loc(#loc50)
    cir.store %58, %0 : !s16i, !cir.ptr<!s16i> loc(#loc196)
    %59 = cir.load %0 : !cir.ptr<!s16i>, !s16i loc(#loc79)
    %60 = cir.cast(integral, %59 : !s16i), !s32i loc(#loc79)
    cir.call @printIntLine(%60) : (!s32i) -> () loc(#loc80)
    cir.br ^bb15 loc(#loc75)
  ^bb14:  // pred: ^bb12
    %61 = cir.get_global @".str.1" : !cir.ptr<!cir.array<!s8i x 54>> loc(#loc46)
    %62 = cir.cast(array_to_ptrdecay, %61 : !cir.ptr<!cir.array<!s8i x 54>>), !cir.ptr<!s8i> loc(#loc46)
    cir.call @printLine(%62) : (!cir.ptr<!s8i>) -> () loc(#loc81)
    cir.br ^bb15 loc(#loc71)
  ^bb15:  // 2 preds: ^bb13, ^bb14
    cir.br ^bb16 loc(#loc71)
  ^bb16:  // pred: ^bb15
    cir.br ^bb17 loc(#loc63)
  ^bb17:  // 2 preds: ^bb10, ^bb16
    cir.br ^bb18 loc(#loc63)
  ^bb18:  // pred: ^bb17
    cir.return loc(#loc48)
  } loc(#loc195)
  cir.func no_proto internal private @goodB2G2() extra(#fn_attr1) {
    %0 = cir.alloca !s16i, !cir.ptr<!s16i>, ["result", init] {alignment = 2 : i64} loc(#loc211)
    %1 = cir.alloca !s16i, !cir.ptr<!s16i>, ["data"] {alignment = 2 : i64} loc(#loc212)
    %2 = cir.const #cir.int<0> : !s32i loc(#loc88)
    %3 = cir.cast(integral, %2 : !s32i), !s16i loc(#loc88)
    cir.store %3, %1 : !s16i, !cir.ptr<!s16i> loc(#loc213)
    cir.br ^bb1 loc(#loc214)
  ^bb1:  // pred: ^bb0
    %4 = cir.get_global @staticFive : !cir.ptr<!s32i> loc(#loc173)
    %5 = cir.load %4 : !cir.ptr<!s32i>, !s32i loc(#loc92)
    %6 = cir.const #cir.int<5> : !s32i loc(#loc93)
    %7 = cir.cmp(eq, %5, %6) : !s32i, !cir.bool loc(#loc215)
    cir.brcond %7 ^bb2, ^bb7 loc(#loc216)
  ^bb2:  // pred: ^bb1
    %8 = cir.call @rand() : () -> !s32i extra(#fn_attr) loc(#loc95)
    %9 = cir.const #cir.int<1> : !s32i loc(#loc95)
    %10 = cir.binop(and, %8, %9) : !s32i loc(#loc95)
    %11 = cir.cast(int_to_bool, %10 : !s32i), !cir.bool loc(#loc95)
    cir.brcond %11 ^bb3, ^bb4 loc(#loc95)
  ^bb3:  // pred: ^bb2
    %12 = cir.call @rand() : () -> !s32i extra(#fn_attr) loc(#loc95)
    %13 = cir.cast(integral, %12 : !s32i), !u32i loc(#loc95)
    %14 = cir.const #cir.int<30> : !s32i loc(#loc95)
    %15 = cir.shift(left, %13 : !u32i, %14 : !s32i) -> !u32i loc(#loc95)
    %16 = cir.call @rand() : () -> !s32i extra(#fn_attr) loc(#loc95)
    %17 = cir.cast(integral, %16 : !s32i), !u32i loc(#loc95)
    %18 = cir.const #cir.int<15> : !s32i loc(#loc95)
    %19 = cir.shift(left, %17 : !u32i, %18 : !s32i) -> !u32i loc(#loc95)
    %20 = cir.binop(xor, %15, %19) : !u32i loc(#loc95)
    %21 = cir.call @rand() : () -> !s32i extra(#fn_attr) loc(#loc95)
    %22 = cir.cast(integral, %21 : !s32i), !u32i loc(#loc95)
    %23 = cir.binop(xor, %20, %22) : !u32i loc(#loc95)
    cir.br ^bb5(%23 : !u32i) loc(#loc95)
  ^bb4:  // pred: ^bb2
    %24 = cir.call @rand() : () -> !s32i extra(#fn_attr) loc(#loc95)
    %25 = cir.cast(integral, %24 : !s32i), !u32i loc(#loc95)
    %26 = cir.const #cir.int<30> : !s32i loc(#loc95)
    %27 = cir.shift(left, %25 : !u32i, %26 : !s32i) -> !u32i loc(#loc95)
    %28 = cir.call @rand() : () -> !s32i extra(#fn_attr) loc(#loc95)
    %29 = cir.cast(integral, %28 : !s32i), !u32i loc(#loc95)
    %30 = cir.const #cir.int<15> : !s32i loc(#loc95)
    %31 = cir.shift(left, %29 : !u32i, %30 : !s32i) -> !u32i loc(#loc95)
    %32 = cir.binop(xor, %27, %31) : !u32i loc(#loc95)
    %33 = cir.call @rand() : () -> !s32i extra(#fn_attr) loc(#loc95)
    %34 = cir.cast(integral, %33 : !s32i), !u32i loc(#loc95)
    %35 = cir.binop(xor, %32, %34) : !u32i loc(#loc95)
    %36 = cir.unary(minus, %35) : !u32i, !u32i loc(#loc95)
    %37 = cir.const #cir.int<1> : !s32i loc(#loc95)
    %38 = cir.cast(integral, %37 : !s32i), !u32i loc(#loc95)
    %39 = cir.binop(sub, %36, %38) : !u32i loc(#loc95)
    cir.br ^bb5(%39 : !u32i) loc(#loc95)
  ^bb5(%40: !u32i loc("CWE191_Integer_Underflow__short_rand_postdec_07.c":90:23)):  // 2 preds: ^bb3, ^bb4
    cir.br ^bb6 loc(#loc95)
  ^bb6:  // pred: ^bb5
    %41 = cir.cast(integral, %40 : !u32i), !s32i loc(#loc95)
    %42 = cir.cast(integral, %41 : !s32i), !s16i loc(#loc95)
    cir.store %42, %1 : !s16i, !cir.ptr<!s16i> loc(#loc217)
    cir.br ^bb7 loc(#loc91)
  ^bb7:  // 2 preds: ^bb1, ^bb6
    cir.br ^bb8 loc(#loc91)
  ^bb8:  // pred: ^bb7
    cir.br ^bb9 loc(#loc218)
  ^bb9:  // pred: ^bb8
    %43 = cir.get_global @staticFive : !cir.ptr<!s32i> loc(#loc173)
    %44 = cir.load %43 : !cir.ptr<!s32i>, !s32i loc(#loc99)
    %45 = cir.const #cir.int<5> : !s32i loc(#loc100)
    %46 = cir.cmp(eq, %44, %45) : !s32i, !cir.bool loc(#loc219)
    cir.brcond %46 ^bb10, ^bb16 loc(#loc220)
  ^bb10:  // pred: ^bb9
    cir.br ^bb11 loc(#loc221)
  ^bb11:  // pred: ^bb10
    %47 = cir.load %1 : !cir.ptr<!s16i>, !s16i loc(#loc104)
    %48 = cir.cast(integral, %47 : !s16i), !s32i loc(#loc104)
    %49 = cir.const #cir.int<32767> : !s32i loc(#loc105)
    %50 = cir.unary(minus, %49) nsw : !s32i, !s32i loc(#loc105)
    %51 = cir.const #cir.int<1> : !s32i loc(#loc105)
    %52 = cir.binop(sub, %50, %51) nsw : !s32i loc(#loc105)
    %53 = cir.cmp(gt, %48, %52) : !s32i, !cir.bool loc(#loc222)
    cir.brcond %53 ^bb12, ^bb13 loc(#loc223)
  ^bb12:  // pred: ^bb11
    %54 = cir.load %1 : !cir.ptr<!s16i>, !s16i loc(#loc109)
    %55 = cir.unary(dec, %54) : !s16i, !s16i loc(#loc110)
    cir.store %55, %1 : !s16i, !cir.ptr<!s16i> loc(#loc224)
    %56 = cir.load %1 : !cir.ptr<!s16i>, !s16i loc(#loc85)
    cir.store %56, %0 : !s16i, !cir.ptr<!s16i> loc(#loc211)
    %57 = cir.load %0 : !cir.ptr<!s16i>, !s16i loc(#loc111)
    %58 = cir.cast(integral, %57 : !s16i), !s32i loc(#loc111)
    cir.call @printIntLine(%58) : (!s32i) -> () loc(#loc112)
    cir.br ^bb14 loc(#loc107)
  ^bb13:  // pred: ^bb11
    %59 = cir.get_global @".str.1" : !cir.ptr<!cir.array<!s8i x 54>> loc(#loc113)
    %60 = cir.cast(array_to_ptrdecay, %59 : !cir.ptr<!cir.array<!s8i x 54>>), !cir.ptr<!s8i> loc(#loc113)
    cir.call @printLine(%60) : (!cir.ptr<!s8i>) -> () loc(#loc114)
    cir.br ^bb14 loc(#loc103)
  ^bb14:  // 2 preds: ^bb12, ^bb13
    cir.br ^bb15 loc(#loc103)
  ^bb15:  // pred: ^bb14
    cir.br ^bb16 loc(#loc98)
  ^bb16:  // 2 preds: ^bb9, ^bb15
    cir.br ^bb17 loc(#loc98)
  ^bb17:  // pred: ^bb16
    cir.return loc(#loc83)
  } loc(#loc210)
  cir.func no_proto internal private @goodG2B1() extra(#fn_attr1) {
    %0 = cir.alloca !s16i, !cir.ptr<!s16i>, ["result", init] {alignment = 2 : i64} loc(#loc226)
    %1 = cir.alloca !s16i, !cir.ptr<!s16i>, ["data"] {alignment = 2 : i64} loc(#loc227)
    %2 = cir.const #cir.int<0> : !s32i loc(#loc121)
    %3 = cir.cast(integral, %2 : !s32i), !s16i loc(#loc121)
    cir.store %3, %1 : !s16i, !cir.ptr<!s16i> loc(#loc228)
    cir.br ^bb1 loc(#loc229)
  ^bb1:  // pred: ^bb0
    %4 = cir.get_global @staticFive : !cir.ptr<!s32i> loc(#loc173)
    %5 = cir.load %4 : !cir.ptr<!s32i>, !s32i loc(#loc125)
    %6 = cir.const #cir.int<5> : !s32i loc(#loc126)
    %7 = cir.cmp(ne, %5, %6) : !s32i, !cir.bool loc(#loc230)
    cir.brcond %7 ^bb2, ^bb3 loc(#loc231)
  ^bb2:  // pred: ^bb1
    %8 = cir.get_global @".str" : !cir.ptr<!cir.array<!s8i x 21>> loc(#loc130)
    %9 = cir.cast(array_to_ptrdecay, %8 : !cir.ptr<!cir.array<!s8i x 21>>), !cir.ptr<!s8i> loc(#loc130)
    cir.call @printLine(%9) : (!cir.ptr<!s8i>) -> () loc(#loc131)
    cir.br ^bb4 loc(#loc128)
  ^bb3:  // pred: ^bb1
    %10 = cir.const #cir.int<2> : !s32i loc(#loc132)
    %11 = cir.unary(minus, %10) nsw : !s32i, !s32i loc(#loc133)
    %12 = cir.cast(integral, %11 : !s32i), !s16i loc(#loc133)
    cir.store %12, %1 : !s16i, !cir.ptr<!s16i> loc(#loc232)
    cir.br ^bb4 loc(#loc124)
  ^bb4:  // 2 preds: ^bb2, ^bb3
    cir.br ^bb5 loc(#loc124)
  ^bb5:  // pred: ^bb4
    cir.br ^bb6 loc(#loc233)
  ^bb6:  // pred: ^bb5
    %13 = cir.get_global @staticFive : !cir.ptr<!s32i> loc(#loc173)
    %14 = cir.load %13 : !cir.ptr<!s32i>, !s32i loc(#loc137)
    %15 = cir.const #cir.int<5> : !s32i loc(#loc138)
    %16 = cir.cmp(eq, %14, %15) : !s32i, !cir.bool loc(#loc234)
    cir.brcond %16 ^bb7, ^bb10 loc(#loc235)
  ^bb7:  // pred: ^bb6
    cir.br ^bb8 loc(#loc236)
  ^bb8:  // pred: ^bb7
    %17 = cir.load %1 : !cir.ptr<!s16i>, !s16i loc(#loc142)
    %18 = cir.unary(dec, %17) : !s16i, !s16i loc(#loc143)
    cir.store %18, %1 : !s16i, !cir.ptr<!s16i> loc(#loc237)
    %19 = cir.load %1 : !cir.ptr<!s16i>, !s16i loc(#loc118)
    cir.store %19, %0 : !s16i, !cir.ptr<!s16i> loc(#loc226)
    %20 = cir.load %0 : !cir.ptr<!s16i>, !s16i loc(#loc144)
    %21 = cir.cast(integral, %20 : !s16i), !s32i loc(#loc144)
    cir.call @printIntLine(%21) : (!s32i) -> () loc(#loc145)
    cir.br ^bb9 loc(#loc141)
  ^bb9:  // pred: ^bb8
    cir.br ^bb10 loc(#loc136)
  ^bb10:  // 2 preds: ^bb6, ^bb9
    cir.br ^bb11 loc(#loc136)
  ^bb11:  // pred: ^bb10
    cir.return loc(#loc116)
  } loc(#loc225)
  cir.func no_proto internal private @goodG2B2() extra(#fn_attr1) {
    %0 = cir.alloca !s16i, !cir.ptr<!s16i>, ["result", init] {alignment = 2 : i64} loc(#loc239)
    %1 = cir.alloca !s16i, !cir.ptr<!s16i>, ["data"] {alignment = 2 : i64} loc(#loc240)
    %2 = cir.const #cir.int<0> : !s32i loc(#loc152)
    %3 = cir.cast(integral, %2 : !s32i), !s16i loc(#loc152)
    cir.store %3, %1 : !s16i, !cir.ptr<!s16i> loc(#loc241)
    cir.br ^bb1 loc(#loc242)
  ^bb1:  // pred: ^bb0
    %4 = cir.get_global @staticFive : !cir.ptr<!s32i> loc(#loc173)
    %5 = cir.load %4 : !cir.ptr<!s32i>, !s32i loc(#loc156)
    %6 = cir.const #cir.int<5> : !s32i loc(#loc157)
    %7 = cir.cmp(eq, %5, %6) : !s32i, !cir.bool loc(#loc243)
    cir.brcond %7 ^bb2, ^bb3 loc(#loc244)
  ^bb2:  // pred: ^bb1
    %8 = cir.const #cir.int<2> : !s32i loc(#loc159)
    %9 = cir.unary(minus, %8) nsw : !s32i, !s32i loc(#loc160)
    %10 = cir.cast(integral, %9 : !s32i), !s16i loc(#loc160)
    cir.store %10, %1 : !s16i, !cir.ptr<!s16i> loc(#loc245)
    cir.br ^bb3 loc(#loc155)
  ^bb3:  // 2 preds: ^bb1, ^bb2
    cir.br ^bb4 loc(#loc155)
  ^bb4:  // pred: ^bb3
    cir.br ^bb5 loc(#loc246)
  ^bb5:  // pred: ^bb4
    %11 = cir.get_global @staticFive : !cir.ptr<!s32i> loc(#loc173)
    %12 = cir.load %11 : !cir.ptr<!s32i>, !s32i loc(#loc164)
    %13 = cir.const #cir.int<5> : !s32i loc(#loc165)
    %14 = cir.cmp(eq, %12, %13) : !s32i, !cir.bool loc(#loc247)
    cir.brcond %14 ^bb6, ^bb9 loc(#loc248)
  ^bb6:  // pred: ^bb5
    cir.br ^bb7 loc(#loc249)
  ^bb7:  // pred: ^bb6
    %15 = cir.load %1 : !cir.ptr<!s16i>, !s16i loc(#loc169)
    %16 = cir.unary(dec, %15) : !s16i, !s16i loc(#loc170)
    cir.store %16, %1 : !s16i, !cir.ptr<!s16i> loc(#loc250)
    %17 = cir.load %1 : !cir.ptr<!s16i>, !s16i loc(#loc149)
    cir.store %17, %0 : !s16i, !cir.ptr<!s16i> loc(#loc239)
    %18 = cir.load %0 : !cir.ptr<!s16i>, !s16i loc(#loc171)
    %19 = cir.cast(integral, %18 : !s16i), !s32i loc(#loc171)
    cir.call @printIntLine(%19) : (!s32i) -> () loc(#loc172)
    cir.br ^bb8 loc(#loc168)
  ^bb8:  // pred: ^bb7
    cir.br ^bb9 loc(#loc163)
  ^bb9:  // 2 preds: ^bb5, ^bb8
    cir.br ^bb10 loc(#loc163)
  ^bb10:  // pred: ^bb9
    cir.return loc(#loc147)
  } loc(#loc238)
} loc(#loc)
#loc = loc("/workspaces/juliet-c/testcases/CWE191_Integer_Underflow/s04/CWE191_Integer_Underflow__short_rand_postdec_07.c":0:0)
#loc1 = loc("CWE191_Integer_Underflow__short_rand_postdec_07.c":23:1)
#loc2 = loc("CWE191_Integer_Underflow__short_rand_postdec_07.c":23:25)
#loc3 = loc("/usr/include/stdlib.h":573:1)
#loc4 = loc("/usr/include/stdlib.h":573:24)
#loc5 = loc("../../../testcasesupport/std_testcase_io.h":18:1)
#loc6 = loc("../../../testcasesupport/std_testcase_io.h":18:33)
#loc7 = loc("CWE191_Integer_Underflow__short_rand_postdec_07.c":27:1)
#loc8 = loc("CWE191_Integer_Underflow__short_rand_postdec_07.c":45:1)
#loc9 = loc("CWE191_Integer_Underflow__short_rand_postdec_07.c":41:13)
#loc10 = loc("CWE191_Integer_Underflow__short_rand_postdec_07.c":41:28)
#loc11 = loc("CWE191_Integer_Underflow__short_rand_postdec_07.c":29:5)
#loc12 = loc("CWE191_Integer_Underflow__short_rand_postdec_07.c":29:11)
#loc13 = loc("CWE191_Integer_Underflow__short_rand_postdec_07.c":30:12)
#loc14 = loc("CWE191_Integer_Underflow__short_rand_postdec_07.c":30:5)
#loc15 = loc("CWE191_Integer_Underflow__short_rand_postdec_07.c":31:5)
#loc16 = loc("CWE191_Integer_Underflow__short_rand_postdec_07.c":35:5)
#loc17 = loc("CWE191_Integer_Underflow__short_rand_postdec_07.c":31:8)
#loc18 = loc("CWE191_Integer_Underflow__short_rand_postdec_07.c":31:20)
#loc19 = loc("CWE191_Integer_Underflow__short_rand_postdec_07.c":32:5)
#loc21 = loc("CWE191_Integer_Underflow__short_rand_postdec_07.c":34:9)
#loc22 = loc("CWE191_Integer_Underflow__short_rand_postdec_07.c":36:5)
#loc23 = loc("CWE191_Integer_Underflow__short_rand_postdec_07.c":44:5)
#loc24 = loc("CWE191_Integer_Underflow__short_rand_postdec_07.c":36:8)
#loc25 = loc("CWE191_Integer_Underflow__short_rand_postdec_07.c":36:20)
#loc26 = loc("CWE191_Integer_Underflow__short_rand_postdec_07.c":37:5)
#loc27 = loc("CWE191_Integer_Underflow__short_rand_postdec_07.c":38:9)
#loc28 = loc("CWE191_Integer_Underflow__short_rand_postdec_07.c":43:9)
#loc29 = loc("CWE191_Integer_Underflow__short_rand_postdec_07.c":40:17)
#loc30 = loc("CWE191_Integer_Underflow__short_rand_postdec_07.c":40:13)
#loc31 = loc("CWE191_Integer_Underflow__short_rand_postdec_07.c":42:26)
#loc32 = loc("CWE191_Integer_Underflow__short_rand_postdec_07.c":42:13)
#loc33 = loc("CWE191_Integer_Underflow__short_rand_postdec_07.c":155:1)
#loc34 = loc("CWE191_Integer_Underflow__short_rand_postdec_07.c":161:1)
#loc35 = loc("CWE191_Integer_Underflow__short_rand_postdec_07.c":157:5)
#loc36 = loc("CWE191_Integer_Underflow__short_rand_postdec_07.c":157:14)
#loc37 = loc("CWE191_Integer_Underflow__short_rand_postdec_07.c":158:5)
#loc38 = loc("CWE191_Integer_Underflow__short_rand_postdec_07.c":158:14)
#loc39 = loc("CWE191_Integer_Underflow__short_rand_postdec_07.c":159:5)
#loc40 = loc("CWE191_Integer_Underflow__short_rand_postdec_07.c":159:14)
#loc41 = loc("CWE191_Integer_Underflow__short_rand_postdec_07.c":160:5)
#loc42 = loc("CWE191_Integer_Underflow__short_rand_postdec_07.c":160:14)
#loc43 = loc("../../../testcasesupport/std_testcase_io.h":14:1)
#loc44 = loc("../../../testcasesupport/std_testcase_io.h":14:33)
#loc45 = loc("CWE191_Integer_Underflow__short_rand_postdec_07.c":64:19)
#loc46 = loc("CWE191_Integer_Underflow__short_rand_postdec_07.c":77:23)
#loc47 = loc("CWE191_Integer_Underflow__short_rand_postdec_07.c":52:1)
#loc48 = loc("CWE191_Integer_Underflow__short_rand_postdec_07.c":80:1)
#loc49 = loc("CWE191_Integer_Underflow__short_rand_postdec_07.c":72:13)
#loc50 = loc("CWE191_Integer_Underflow__short_rand_postdec_07.c":72:28)
#loc51 = loc("CWE191_Integer_Underflow__short_rand_postdec_07.c":54:5)
#loc52 = loc("CWE191_Integer_Underflow__short_rand_postdec_07.c":54:11)
#loc53 = loc("CWE191_Integer_Underflow__short_rand_postdec_07.c":55:12)
#loc54 = loc("CWE191_Integer_Underflow__short_rand_postdec_07.c":55:5)
#loc55 = loc("CWE191_Integer_Underflow__short_rand_postdec_07.c":56:5)
#loc56 = loc("CWE191_Integer_Underflow__short_rand_postdec_07.c":60:5)
#loc57 = loc("CWE191_Integer_Underflow__short_rand_postdec_07.c":56:8)
#loc58 = loc("CWE191_Integer_Underflow__short_rand_postdec_07.c":56:20)
#loc59 = loc("CWE191_Integer_Underflow__short_rand_postdec_07.c":57:5)
#loc61 = loc("CWE191_Integer_Underflow__short_rand_postdec_07.c":59:9)
#loc62 = loc("CWE191_Integer_Underflow__short_rand_postdec_07.c":61:5)
#loc63 = loc("CWE191_Integer_Underflow__short_rand_postdec_07.c":79:5)
#loc64 = loc("CWE191_Integer_Underflow__short_rand_postdec_07.c":61:8)
#loc65 = loc("CWE191_Integer_Underflow__short_rand_postdec_07.c":61:20)
#loc66 = loc("CWE191_Integer_Underflow__short_rand_postdec_07.c":62:5)
#loc67 = loc("CWE191_Integer_Underflow__short_rand_postdec_07.c":65:5)
#loc68 = loc("CWE191_Integer_Underflow__short_rand_postdec_07.c":67:5)
#loc69 = loc("CWE191_Integer_Underflow__short_rand_postdec_07.c":64:9)
#loc70 = loc("CWE191_Integer_Underflow__short_rand_postdec_07.c":69:9)
#loc71 = loc("CWE191_Integer_Underflow__short_rand_postdec_07.c":78:9)
#loc72 = loc("CWE191_Integer_Underflow__short_rand_postdec_07.c":69:13)
#loc73 = loc("CWE191_Integer_Underflow__short_rand_postdec_07.c":69:20)
#loc74 = loc("CWE191_Integer_Underflow__short_rand_postdec_07.c":70:9)
#loc75 = loc("CWE191_Integer_Underflow__short_rand_postdec_07.c":74:9)
#loc76 = loc("CWE191_Integer_Underflow__short_rand_postdec_07.c":76:9)
#loc77 = loc("CWE191_Integer_Underflow__short_rand_postdec_07.c":71:17)
#loc78 = loc("CWE191_Integer_Underflow__short_rand_postdec_07.c":71:13)
#loc79 = loc("CWE191_Integer_Underflow__short_rand_postdec_07.c":73:26)
#loc80 = loc("CWE191_Integer_Underflow__short_rand_postdec_07.c":73:13)
#loc81 = loc("CWE191_Integer_Underflow__short_rand_postdec_07.c":77:13)
#loc82 = loc("CWE191_Integer_Underflow__short_rand_postdec_07.c":83:1)
#loc83 = loc("CWE191_Integer_Underflow__short_rand_postdec_07.c":106:1)
#loc84 = loc("CWE191_Integer_Underflow__short_rand_postdec_07.c":98:13)
#loc85 = loc("CWE191_Integer_Underflow__short_rand_postdec_07.c":98:28)
#loc86 = loc("CWE191_Integer_Underflow__short_rand_postdec_07.c":85:5)
#loc87 = loc("CWE191_Integer_Underflow__short_rand_postdec_07.c":85:11)
#loc88 = loc("CWE191_Integer_Underflow__short_rand_postdec_07.c":86:12)
#loc89 = loc("CWE191_Integer_Underflow__short_rand_postdec_07.c":86:5)
#loc90 = loc("CWE191_Integer_Underflow__short_rand_postdec_07.c":87:5)
#loc91 = loc("CWE191_Integer_Underflow__short_rand_postdec_07.c":91:5)
#loc92 = loc("CWE191_Integer_Underflow__short_rand_postdec_07.c":87:8)
#loc93 = loc("CWE191_Integer_Underflow__short_rand_postdec_07.c":87:20)
#loc94 = loc("CWE191_Integer_Underflow__short_rand_postdec_07.c":88:5)
#loc96 = loc("CWE191_Integer_Underflow__short_rand_postdec_07.c":90:9)
#loc97 = loc("CWE191_Integer_Underflow__short_rand_postdec_07.c":92:5)
#loc98 = loc("CWE191_Integer_Underflow__short_rand_postdec_07.c":105:5)
#loc99 = loc("CWE191_Integer_Underflow__short_rand_postdec_07.c":92:8)
#loc100 = loc("CWE191_Integer_Underflow__short_rand_postdec_07.c":92:20)
#loc101 = loc("CWE191_Integer_Underflow__short_rand_postdec_07.c":93:5)
#loc102 = loc("CWE191_Integer_Underflow__short_rand_postdec_07.c":95:9)
#loc103 = loc("CWE191_Integer_Underflow__short_rand_postdec_07.c":104:9)
#loc104 = loc("CWE191_Integer_Underflow__short_rand_postdec_07.c":95:13)
#loc105 = loc("CWE191_Integer_Underflow__short_rand_postdec_07.c":95:20)
#loc106 = loc("CWE191_Integer_Underflow__short_rand_postdec_07.c":96:9)
#loc107 = loc("CWE191_Integer_Underflow__short_rand_postdec_07.c":100:9)
#loc108 = loc("CWE191_Integer_Underflow__short_rand_postdec_07.c":102:9)
#loc109 = loc("CWE191_Integer_Underflow__short_rand_postdec_07.c":97:17)
#loc110 = loc("CWE191_Integer_Underflow__short_rand_postdec_07.c":97:13)
#loc111 = loc("CWE191_Integer_Underflow__short_rand_postdec_07.c":99:26)
#loc112 = loc("CWE191_Integer_Underflow__short_rand_postdec_07.c":99:13)
#loc113 = loc("CWE191_Integer_Underflow__short_rand_postdec_07.c":103:23)
#loc114 = loc("CWE191_Integer_Underflow__short_rand_postdec_07.c":103:13)
#loc115 = loc("CWE191_Integer_Underflow__short_rand_postdec_07.c":109:1)
#loc116 = loc("CWE191_Integer_Underflow__short_rand_postdec_07.c":132:1)
#loc117 = loc("CWE191_Integer_Underflow__short_rand_postdec_07.c":128:13)
#loc118 = loc("CWE191_Integer_Underflow__short_rand_postdec_07.c":128:28)
#loc119 = loc("CWE191_Integer_Underflow__short_rand_postdec_07.c":111:5)
#loc120 = loc("CWE191_Integer_Underflow__short_rand_postdec_07.c":111:11)
#loc121 = loc("CWE191_Integer_Underflow__short_rand_postdec_07.c":112:12)
#loc122 = loc("CWE191_Integer_Underflow__short_rand_postdec_07.c":112:5)
#loc123 = loc("CWE191_Integer_Underflow__short_rand_postdec_07.c":113:5)
#loc124 = loc("CWE191_Integer_Underflow__short_rand_postdec_07.c":122:5)
#loc125 = loc("CWE191_Integer_Underflow__short_rand_postdec_07.c":113:8)
#loc126 = loc("CWE191_Integer_Underflow__short_rand_postdec_07.c":113:20)
#loc127 = loc("CWE191_Integer_Underflow__short_rand_postdec_07.c":114:5)
#loc128 = loc("CWE191_Integer_Underflow__short_rand_postdec_07.c":117:5)
#loc129 = loc("CWE191_Integer_Underflow__short_rand_postdec_07.c":119:5)
#loc130 = loc("CWE191_Integer_Underflow__short_rand_postdec_07.c":116:19)
#loc131 = loc("CWE191_Integer_Underflow__short_rand_postdec_07.c":116:9)
#loc132 = loc("CWE191_Integer_Underflow__short_rand_postdec_07.c":121:17)
#loc133 = loc("CWE191_Integer_Underflow__short_rand_postdec_07.c":121:16)
#loc134 = loc("CWE191_Integer_Underflow__short_rand_postdec_07.c":121:9)
#loc135 = loc("CWE191_Integer_Underflow__short_rand_postdec_07.c":123:5)
#loc136 = loc("CWE191_Integer_Underflow__short_rand_postdec_07.c":131:5)
#loc137 = loc("CWE191_Integer_Underflow__short_rand_postdec_07.c":123:8)
#loc138 = loc("CWE191_Integer_Underflow__short_rand_postdec_07.c":123:20)
#loc139 = loc("CWE191_Integer_Underflow__short_rand_postdec_07.c":124:5)
#loc140 = loc("CWE191_Integer_Underflow__short_rand_postdec_07.c":125:9)
#loc141 = loc("CWE191_Integer_Underflow__short_rand_postdec_07.c":130:9)
#loc142 = loc("CWE191_Integer_Underflow__short_rand_postdec_07.c":127:17)
#loc143 = loc("CWE191_Integer_Underflow__short_rand_postdec_07.c":127:13)
#loc144 = loc("CWE191_Integer_Underflow__short_rand_postdec_07.c":129:26)
#loc145 = loc("CWE191_Integer_Underflow__short_rand_postdec_07.c":129:13)
#loc146 = loc("CWE191_Integer_Underflow__short_rand_postdec_07.c":135:1)
#loc147 = loc("CWE191_Integer_Underflow__short_rand_postdec_07.c":153:1)
#loc148 = loc("CWE191_Integer_Underflow__short_rand_postdec_07.c":149:13)
#loc149 = loc("CWE191_Integer_Underflow__short_rand_postdec_07.c":149:28)
#loc150 = loc("CWE191_Integer_Underflow__short_rand_postdec_07.c":137:5)
#loc151 = loc("CWE191_Integer_Underflow__short_rand_postdec_07.c":137:11)
#loc152 = loc("CWE191_Integer_Underflow__short_rand_postdec_07.c":138:12)
#loc153 = loc("CWE191_Integer_Underflow__short_rand_postdec_07.c":138:5)
#loc154 = loc("CWE191_Integer_Underflow__short_rand_postdec_07.c":139:5)
#loc155 = loc("CWE191_Integer_Underflow__short_rand_postdec_07.c":143:5)
#loc156 = loc("CWE191_Integer_Underflow__short_rand_postdec_07.c":139:8)
#loc157 = loc("CWE191_Integer_Underflow__short_rand_postdec_07.c":139:20)
#loc158 = loc("CWE191_Integer_Underflow__short_rand_postdec_07.c":140:5)
#loc159 = loc("CWE191_Integer_Underflow__short_rand_postdec_07.c":142:17)
#loc160 = loc("CWE191_Integer_Underflow__short_rand_postdec_07.c":142:16)
#loc161 = loc("CWE191_Integer_Underflow__short_rand_postdec_07.c":142:9)
#loc162 = loc("CWE191_Integer_Underflow__short_rand_postdec_07.c":144:5)
#loc163 = loc("CWE191_Integer_Underflow__short_rand_postdec_07.c":152:5)
#loc164 = loc("CWE191_Integer_Underflow__short_rand_postdec_07.c":144:8)
#loc165 = loc("CWE191_Integer_Underflow__short_rand_postdec_07.c":144:20)
#loc166 = loc("CWE191_Integer_Underflow__short_rand_postdec_07.c":145:5)
#loc167 = loc("CWE191_Integer_Underflow__short_rand_postdec_07.c":146:9)
#loc168 = loc("CWE191_Integer_Underflow__short_rand_postdec_07.c":151:9)
#loc169 = loc("CWE191_Integer_Underflow__short_rand_postdec_07.c":148:17)
#loc170 = loc("CWE191_Integer_Underflow__short_rand_postdec_07.c":148:13)
#loc171 = loc("CWE191_Integer_Underflow__short_rand_postdec_07.c":150:26)
#loc172 = loc("CWE191_Integer_Underflow__short_rand_postdec_07.c":150:13)
#loc173 = loc(fused[#loc1, #loc2])
#loc174 = loc(fused[#loc3, #loc4])
#loc175 = loc(fused[#loc5, #loc6])
#loc176 = loc(fused[#loc7, #loc8])
#loc177 = loc(fused[#loc9, #loc10])
#loc178 = loc(fused[#loc11, #loc12])
#loc179 = loc(fused[#loc14, #loc13])
#loc180 = loc(fused[#loc15, #loc16])
#loc181 = loc(fused[#loc17, #loc18])
#loc182 = loc(fused[#loc19, #loc16])
#loc183 = loc(fused[#loc21, #loc20])
#loc184 = loc(fused[#loc22, #loc23])
#loc185 = loc(fused[#loc24, #loc25])
#loc186 = loc(fused[#loc26, #loc23])
#loc187 = loc(fused[#loc27, #loc28])
#loc188 = loc(fused[#loc30, #loc29])
#loc189 = loc(fused[#loc33, #loc34])
#loc190 = loc(fused[#loc35, #loc36])
#loc191 = loc(fused[#loc37, #loc38])
#loc192 = loc(fused[#loc39, #loc40])
#loc193 = loc(fused[#loc41, #loc42])
#loc194 = loc(fused[#loc43, #loc44])
#loc195 = loc(fused[#loc47, #loc48])
#loc196 = loc(fused[#loc49, #loc50])
#loc197 = loc(fused[#loc51, #loc52])
#loc198 = loc(fused[#loc54, #loc53])
#loc199 = loc(fused[#loc55, #loc56])
#loc200 = loc(fused[#loc57, #loc58])
#loc201 = loc(fused[#loc59, #loc56])
#loc202 = loc(fused[#loc61, #loc60])
#loc203 = loc(fused[#loc62, #loc63])
#loc204 = loc(fused[#loc64, #loc65])
#loc205 = loc(fused[#loc66, #loc67, #loc68, #loc63])
#loc206 = loc(fused[#loc70, #loc71])
#loc207 = loc(fused[#loc72, #loc73])
#loc208 = loc(fused[#loc74, #loc75, #loc76, #loc71])
#loc209 = loc(fused[#loc78, #loc77])
#loc210 = loc(fused[#loc82, #loc83])
#loc211 = loc(fused[#loc84, #loc85])
#loc212 = loc(fused[#loc86, #loc87])
#loc213 = loc(fused[#loc89, #loc88])
#loc214 = loc(fused[#loc90, #loc91])
#loc215 = loc(fused[#loc92, #loc93])
#loc216 = loc(fused[#loc94, #loc91])
#loc217 = loc(fused[#loc96, #loc95])
#loc218 = loc(fused[#loc97, #loc98])
#loc219 = loc(fused[#loc99, #loc100])
#loc220 = loc(fused[#loc101, #loc98])
#loc221 = loc(fused[#loc102, #loc103])
#loc222 = loc(fused[#loc104, #loc105])
#loc223 = loc(fused[#loc106, #loc107, #loc108, #loc103])
#loc224 = loc(fused[#loc110, #loc109])
#loc225 = loc(fused[#loc115, #loc116])
#loc226 = loc(fused[#loc117, #loc118])
#loc227 = loc(fused[#loc119, #loc120])
#loc228 = loc(fused[#loc122, #loc121])
#loc229 = loc(fused[#loc123, #loc124])
#loc230 = loc(fused[#loc125, #loc126])
#loc231 = loc(fused[#loc127, #loc128, #loc129, #loc124])
#loc232 = loc(fused[#loc134, #loc132])
#loc233 = loc(fused[#loc135, #loc136])
#loc234 = loc(fused[#loc137, #loc138])
#loc235 = loc(fused[#loc139, #loc136])
#loc236 = loc(fused[#loc140, #loc141])
#loc237 = loc(fused[#loc143, #loc142])
#loc238 = loc(fused[#loc146, #loc147])
#loc239 = loc(fused[#loc148, #loc149])
#loc240 = loc(fused[#loc150, #loc151])
#loc241 = loc(fused[#loc153, #loc152])
#loc242 = loc(fused[#loc154, #loc155])
#loc243 = loc(fused[#loc156, #loc157])
#loc244 = loc(fused[#loc158, #loc155])
#loc245 = loc(fused[#loc161, #loc159])
#loc246 = loc(fused[#loc162, #loc163])
#loc247 = loc(fused[#loc164, #loc165])
#loc248 = loc(fused[#loc166, #loc163])
#loc249 = loc(fused[#loc167, #loc168])
#loc250 = loc(fused[#loc170, #loc169])
