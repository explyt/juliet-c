!s32i = !cir.int<s, 32>
!s64i = !cir.int<s, 64>
!s8i = !cir.int<s, 8>
!ty__IO_codecvt = !cir.record<struct "_IO_codecvt" incomplete>
!ty__IO_marker = !cir.record<struct "_IO_marker" incomplete>
!ty__IO_wide_data = !cir.record<struct "_IO_wide_data" incomplete>
!u16i = !cir.int<u, 16>
!u64i = !cir.int<u, 64>
!void = !cir.void
#fn_attr = #cir<extra({nothrow = #cir.nothrow})>
#fn_attr1 = #cir<extra({inline = #cir.inline<no>, nothrow = #cir.nothrow, optnone = #cir.optnone, uwtable = #cir.uwtable<async>})>
!ty__IO_FILE = !cir.record<struct "_IO_FILE" {!s32i, !cir.ptr<!s8i>, !cir.ptr<!s8i>, !cir.ptr<!s8i>, !cir.ptr<!s8i>, !cir.ptr<!s8i>, !cir.ptr<!s8i>, !cir.ptr<!s8i>, !cir.ptr<!s8i>, !cir.ptr<!s8i>, !cir.ptr<!s8i>, !cir.ptr<!s8i>, !cir.ptr<!ty__IO_marker>, !cir.ptr<!cir.record<struct "_IO_FILE">>, !s32i, !s32i, !s64i, !u16i, !s8i, !cir.array<!s8i x 1>, !cir.ptr<!void>, !s64i, !cir.ptr<!ty__IO_codecvt>, !cir.ptr<!ty__IO_wide_data>, !cir.ptr<!cir.record<struct "_IO_FILE">>, !cir.ptr<!void>, !u64i, !s32i, !cir.array<!s8i x 20>} #cir.record.decl.ast>
module @"/workspaces/juliet-c/testcases/CWE369_Divide_by_Zero/s01/CWE369_Divide_by_Zero__int_fgets_divide_13.c" attributes {cir.lang = #cir.lang<c>, cir.sob = #cir.signed_overflow_behavior<undefined>, cir.triple = "x86_64-unknown-linux-gnu", cir.type_size_info = #cir.type_size_info<char = 8, int = 32, size_t = 64>, cir.uwtable = #cir.uwtable<async>, dlti.dl_spec = #dlti.dl_spec<f16 = dense<16> : vector<2xi64>, i32 = dense<32> : vector<2xi64>, f128 = dense<128> : vector<2xi64>, f64 = dense<64> : vector<2xi64>, i1 = dense<8> : vector<2xi64>, !llvm.ptr = dense<64> : vector<4xi64>, i16 = dense<16> : vector<2xi64>, i8 = dense<8> : vector<2xi64>, f80 = dense<128> : vector<2xi64>, i128 = dense<128> : vector<2xi64>, !llvm.ptr<272> = dense<64> : vector<4xi64>, !llvm.ptr<271> = dense<32> : vector<4xi64>, !llvm.ptr<270> = dense<32> : vector<4xi64>, i64 = dense<64> : vector<2xi64>, "dlti.mangling_mode" = "e", "dlti.endianness" = "little", "dlti.stack_alignment" = 128 : i64>} {
  cir.global "private" constant external @GLOBAL_CONST_FIVE : !s32i {alignment = 4 : i64} loc(#loc213)
  cir.func private @fgets(!cir.ptr<!s8i>, !s32i, !cir.ptr<!ty__IO_FILE>) -> !cir.ptr<!s8i> loc(#loc214)
  cir.global "private" external @stdin : !cir.ptr<!ty__IO_FILE> {alignment = 8 : i64} loc(#loc215)
  cir.func private @atoi(!cir.ptr<!s8i>) -> !s32i extra(#fn_attr) loc(#loc216)
  cir.func private @printLine(!cir.ptr<!s8i>) loc(#loc217)
  cir.global "private" constant cir_private dsolocal @".str" = #cir.const_array<"fgets() failed.\00" : !cir.array<!s8i x 16>> : !cir.array<!s8i x 16> {alignment = 1 : i64} loc(#loc11)
  cir.func private @printIntLine(!s32i) loc(#loc218)
  cir.func no_proto @CWE369_Divide_by_Zero__int_fgets_divide_13_bad() extra(#fn_attr1) {
    %0 = cir.alloca !s32i, !cir.ptr<!s32i>, ["data"] {alignment = 4 : i64} loc(#loc220)
    %1 = cir.const #cir.int<1> : !s32i loc(#loc18)
    %2 = cir.unary(minus, %1) nsw : !s32i, !s32i loc(#loc19)
    cir.store %2, %0 : !s32i, !cir.ptr<!s32i> loc(#loc221)
    cir.scope {
      %3 = cir.get_global @GLOBAL_CONST_FIVE : !cir.ptr<!s32i> loc(#loc213)
      %4 = cir.load %3 : !cir.ptr<!s32i>, !s32i loc(#loc23)
      %5 = cir.const #cir.int<5> : !s32i loc(#loc24)
      %6 = cir.cmp(eq, %4, %5) : !s32i, !cir.bool loc(#loc223)
      cir.if %6 {
        cir.scope {
          %7 = cir.alloca !cir.array<!s8i x 14>, !cir.ptr<!cir.array<!s8i x 14>>, ["inputBuffer"] {alignment = 1 : i64} loc(#loc226)
          %8 = cir.const #cir.zero : !cir.array<!s8i x 14> loc(#loc226)
          cir.store %8, %7 : !cir.array<!s8i x 14>, !cir.ptr<!cir.array<!s8i x 14>> loc(#loc226)
          cir.scope {
            %9 = cir.cast(array_to_ptrdecay, %7 : !cir.ptr<!cir.array<!s8i x 14>>), !cir.ptr<!s8i> loc(#loc32)
            %10 = cir.const #cir.int<3> : !s32i loc(#loc33)
            %11 = cir.cast(integral, %10 : !s32i), !u64i loc(#loc33)
            %12 = cir.const #cir.int<4> : !u64i loc(#loc33)
            %13 = cir.binop(mul, %11, %12) : !u64i loc(#loc33)
            %14 = cir.const #cir.int<2> : !s32i loc(#loc33)
            %15 = cir.cast(integral, %14 : !s32i), !u64i loc(#loc33)
            %16 = cir.binop(add, %13, %15) : !u64i loc(#loc33)
            %17 = cir.cast(integral, %16 : !u64i), !s32i loc(#loc33)
            %18 = cir.get_global @stdin : !cir.ptr<!cir.ptr<!ty__IO_FILE>> loc(#loc215)
            %19 = cir.load %18 : !cir.ptr<!cir.ptr<!ty__IO_FILE>>, !cir.ptr<!ty__IO_FILE> loc(#loc34)
            %20 = cir.call @fgets(%9, %17, %19) : (!cir.ptr<!s8i>, !s32i, !cir.ptr<!ty__IO_FILE>) -> !cir.ptr<!s8i> loc(#loc35)
            %21 = cir.const #cir.ptr<null> : !cir.ptr<!void> loc(#loc36)
            %22 = cir.cast(bitcast, %21 : !cir.ptr<!void>), !cir.ptr<!s8i> loc(#loc36)
            %23 = cir.cmp(ne, %20, %22) : !cir.ptr<!s8i>, !cir.bool loc(#loc228)
            cir.if %23 {
              %24 = cir.cast(array_to_ptrdecay, %7 : !cir.ptr<!cir.array<!s8i x 14>>), !cir.ptr<!s8i> loc(#loc40)
              %25 = cir.call @atoi(%24) : (!cir.ptr<!s8i>) -> !s32i side_effect(pure) extra(#fn_attr) loc(#loc41)
              cir.store %25, %0 : !s32i, !cir.ptr<!s32i> loc(#loc230)
            } else {
              %24 = cir.get_global @".str" : !cir.ptr<!cir.array<!s8i x 16>> loc(#loc11)
              %25 = cir.cast(array_to_ptrdecay, %24 : !cir.ptr<!cir.array<!s8i x 16>>), !cir.ptr<!s8i> loc(#loc11)
              cir.call @printLine(%25) : (!cir.ptr<!s8i>) -> () loc(#loc44)
            } loc(#loc229)
          } loc(#loc227)
        } loc(#loc225)
      } loc(#loc224)
    } loc(#loc222)
    cir.scope {
      %3 = cir.get_global @GLOBAL_CONST_FIVE : !cir.ptr<!s32i> loc(#loc213)
      %4 = cir.load %3 : !cir.ptr<!s32i>, !s32i loc(#loc47)
      %5 = cir.const #cir.int<5> : !s32i loc(#loc48)
      %6 = cir.cmp(eq, %4, %5) : !s32i, !cir.bool loc(#loc232)
      cir.if %6 {
        %7 = cir.const #cir.int<100> : !s32i loc(#loc50)
        %8 = cir.load %0 : !cir.ptr<!s32i>, !s32i loc(#loc51)
        %9 = cir.binop(div, %7, %8) : !s32i loc(#loc234)
        cir.call @printIntLine(%9) : (!s32i) -> () loc(#loc52)
      } loc(#loc233)
    } loc(#loc231)
    cir.return loc(#loc15)
  } loc(#loc219)
  cir.func no_proto @CWE369_Divide_by_Zero__int_fgets_divide_13_good() extra(#fn_attr1) {
    %0 = cir.get_global @goodB2G1 : !cir.ptr<!cir.func<()>> loc(#loc236)
    cir.call %0() : (!cir.ptr<!cir.func<()>>) -> () loc(#loc55)
    %1 = cir.get_global @goodB2G2 : !cir.ptr<!cir.func<()>> loc(#loc237)
    cir.call %1() : (!cir.ptr<!cir.func<()>>) -> () loc(#loc57)
    %2 = cir.get_global @goodG2B1 : !cir.ptr<!cir.func<()>> loc(#loc238)
    cir.call %2() : (!cir.ptr<!cir.func<()>>) -> () loc(#loc59)
    %3 = cir.get_global @goodG2B2 : !cir.ptr<!cir.func<()>> loc(#loc239)
    cir.call %3() : (!cir.ptr<!cir.func<()>>) -> () loc(#loc61)
    cir.return loc(#loc54)
  } loc(#loc235)
  cir.global "private" constant cir_private dsolocal @".str.1" = #cir.const_array<"Benign, fixed string\00" : !cir.array<!s8i x 21>> : !cir.array<!s8i x 21> {alignment = 1 : i64} loc(#loc63)
  cir.global "private" constant cir_private dsolocal @".str.2" = #cir.const_array<"This would result in a divide by zero\00" : !cir.array<!s8i x 38>> : !cir.array<!s8i x 38> {alignment = 1 : i64} loc(#loc64)
  cir.func no_proto internal private @goodB2G1() extra(#fn_attr1) {
    %0 = cir.alloca !s32i, !cir.ptr<!s32i>, ["data"] {alignment = 4 : i64} loc(#loc241)
    %1 = cir.const #cir.int<1> : !s32i loc(#loc69)
    %2 = cir.unary(minus, %1) nsw : !s32i, !s32i loc(#loc70)
    cir.store %2, %0 : !s32i, !cir.ptr<!s32i> loc(#loc242)
    cir.scope {
      %3 = cir.get_global @GLOBAL_CONST_FIVE : !cir.ptr<!s32i> loc(#loc213)
      %4 = cir.load %3 : !cir.ptr<!s32i>, !s32i loc(#loc74)
      %5 = cir.const #cir.int<5> : !s32i loc(#loc75)
      %6 = cir.cmp(eq, %4, %5) : !s32i, !cir.bool loc(#loc244)
      cir.if %6 {
        cir.scope {
          %7 = cir.alloca !cir.array<!s8i x 14>, !cir.ptr<!cir.array<!s8i x 14>>, ["inputBuffer"] {alignment = 1 : i64} loc(#loc247)
          %8 = cir.const #cir.zero : !cir.array<!s8i x 14> loc(#loc247)
          cir.store %8, %7 : !cir.array<!s8i x 14>, !cir.ptr<!cir.array<!s8i x 14>> loc(#loc247)
          cir.scope {
            %9 = cir.cast(array_to_ptrdecay, %7 : !cir.ptr<!cir.array<!s8i x 14>>), !cir.ptr<!s8i> loc(#loc83)
            %10 = cir.const #cir.int<3> : !s32i loc(#loc84)
            %11 = cir.cast(integral, %10 : !s32i), !u64i loc(#loc84)
            %12 = cir.const #cir.int<4> : !u64i loc(#loc84)
            %13 = cir.binop(mul, %11, %12) : !u64i loc(#loc84)
            %14 = cir.const #cir.int<2> : !s32i loc(#loc84)
            %15 = cir.cast(integral, %14 : !s32i), !u64i loc(#loc84)
            %16 = cir.binop(add, %13, %15) : !u64i loc(#loc84)
            %17 = cir.cast(integral, %16 : !u64i), !s32i loc(#loc84)
            %18 = cir.get_global @stdin : !cir.ptr<!cir.ptr<!ty__IO_FILE>> loc(#loc215)
            %19 = cir.load %18 : !cir.ptr<!cir.ptr<!ty__IO_FILE>>, !cir.ptr<!ty__IO_FILE> loc(#loc85)
            %20 = cir.call @fgets(%9, %17, %19) : (!cir.ptr<!s8i>, !s32i, !cir.ptr<!ty__IO_FILE>) -> !cir.ptr<!s8i> loc(#loc86)
            %21 = cir.const #cir.ptr<null> : !cir.ptr<!void> loc(#loc87)
            %22 = cir.cast(bitcast, %21 : !cir.ptr<!void>), !cir.ptr<!s8i> loc(#loc87)
            %23 = cir.cmp(ne, %20, %22) : !cir.ptr<!s8i>, !cir.bool loc(#loc249)
            cir.if %23 {
              %24 = cir.cast(array_to_ptrdecay, %7 : !cir.ptr<!cir.array<!s8i x 14>>), !cir.ptr<!s8i> loc(#loc91)
              %25 = cir.call @atoi(%24) : (!cir.ptr<!s8i>) -> !s32i side_effect(pure) extra(#fn_attr) loc(#loc92)
              cir.store %25, %0 : !s32i, !cir.ptr<!s32i> loc(#loc251)
            } else {
              %24 = cir.get_global @".str" : !cir.ptr<!cir.array<!s8i x 16>> loc(#loc95)
              %25 = cir.cast(array_to_ptrdecay, %24 : !cir.ptr<!cir.array<!s8i x 16>>), !cir.ptr<!s8i> loc(#loc95)
              cir.call @printLine(%25) : (!cir.ptr<!s8i>) -> () loc(#loc96)
            } loc(#loc250)
          } loc(#loc248)
        } loc(#loc246)
      } loc(#loc245)
    } loc(#loc243)
    cir.scope {
      %3 = cir.get_global @GLOBAL_CONST_FIVE : !cir.ptr<!s32i> loc(#loc213)
      %4 = cir.load %3 : !cir.ptr<!s32i>, !s32i loc(#loc99)
      %5 = cir.const #cir.int<5> : !s32i loc(#loc100)
      %6 = cir.cmp(ne, %4, %5) : !s32i, !cir.bool loc(#loc253)
      cir.if %6 {
        %7 = cir.get_global @".str.1" : !cir.ptr<!cir.array<!s8i x 21>> loc(#loc63)
        %8 = cir.cast(array_to_ptrdecay, %7 : !cir.ptr<!cir.array<!s8i x 21>>), !cir.ptr<!s8i> loc(#loc63)
        cir.call @printLine(%8) : (!cir.ptr<!s8i>) -> () loc(#loc104)
      } else {
        cir.scope {
          %7 = cir.load %0 : !cir.ptr<!s32i>, !s32i loc(#loc107)
          %8 = cir.const #cir.int<0> : !s32i loc(#loc108)
          %9 = cir.cmp(ne, %7, %8) : !s32i, !cir.bool loc(#loc256)
          cir.if %9 {
            %10 = cir.const #cir.int<100> : !s32i loc(#loc112)
            %11 = cir.load %0 : !cir.ptr<!s32i>, !s32i loc(#loc113)
            %12 = cir.binop(div, %10, %11) : !s32i loc(#loc258)
            cir.call @printIntLine(%12) : (!s32i) -> () loc(#loc114)
          } else {
            %10 = cir.get_global @".str.2" : !cir.ptr<!cir.array<!s8i x 38>> loc(#loc64)
            %11 = cir.cast(array_to_ptrdecay, %10 : !cir.ptr<!cir.array<!s8i x 38>>), !cir.ptr<!s8i> loc(#loc64)
            cir.call @printLine(%11) : (!cir.ptr<!s8i>) -> () loc(#loc115)
          } loc(#loc257)
        } loc(#loc255)
      } loc(#loc254)
    } loc(#loc252)
    cir.return loc(#loc66)
  } loc(#loc240)
  cir.func no_proto internal private @goodB2G2() extra(#fn_attr1) {
    %0 = cir.alloca !s32i, !cir.ptr<!s32i>, ["data"] {alignment = 4 : i64} loc(#loc260)
    %1 = cir.const #cir.int<1> : !s32i loc(#loc120)
    %2 = cir.unary(minus, %1) nsw : !s32i, !s32i loc(#loc121)
    cir.store %2, %0 : !s32i, !cir.ptr<!s32i> loc(#loc261)
    cir.scope {
      %3 = cir.get_global @GLOBAL_CONST_FIVE : !cir.ptr<!s32i> loc(#loc213)
      %4 = cir.load %3 : !cir.ptr<!s32i>, !s32i loc(#loc125)
      %5 = cir.const #cir.int<5> : !s32i loc(#loc126)
      %6 = cir.cmp(eq, %4, %5) : !s32i, !cir.bool loc(#loc263)
      cir.if %6 {
        cir.scope {
          %7 = cir.alloca !cir.array<!s8i x 14>, !cir.ptr<!cir.array<!s8i x 14>>, ["inputBuffer"] {alignment = 1 : i64} loc(#loc266)
          %8 = cir.const #cir.zero : !cir.array<!s8i x 14> loc(#loc266)
          cir.store %8, %7 : !cir.array<!s8i x 14>, !cir.ptr<!cir.array<!s8i x 14>> loc(#loc266)
          cir.scope {
            %9 = cir.cast(array_to_ptrdecay, %7 : !cir.ptr<!cir.array<!s8i x 14>>), !cir.ptr<!s8i> loc(#loc134)
            %10 = cir.const #cir.int<3> : !s32i loc(#loc135)
            %11 = cir.cast(integral, %10 : !s32i), !u64i loc(#loc135)
            %12 = cir.const #cir.int<4> : !u64i loc(#loc135)
            %13 = cir.binop(mul, %11, %12) : !u64i loc(#loc135)
            %14 = cir.const #cir.int<2> : !s32i loc(#loc135)
            %15 = cir.cast(integral, %14 : !s32i), !u64i loc(#loc135)
            %16 = cir.binop(add, %13, %15) : !u64i loc(#loc135)
            %17 = cir.cast(integral, %16 : !u64i), !s32i loc(#loc135)
            %18 = cir.get_global @stdin : !cir.ptr<!cir.ptr<!ty__IO_FILE>> loc(#loc215)
            %19 = cir.load %18 : !cir.ptr<!cir.ptr<!ty__IO_FILE>>, !cir.ptr<!ty__IO_FILE> loc(#loc136)
            %20 = cir.call @fgets(%9, %17, %19) : (!cir.ptr<!s8i>, !s32i, !cir.ptr<!ty__IO_FILE>) -> !cir.ptr<!s8i> loc(#loc137)
            %21 = cir.const #cir.ptr<null> : !cir.ptr<!void> loc(#loc138)
            %22 = cir.cast(bitcast, %21 : !cir.ptr<!void>), !cir.ptr<!s8i> loc(#loc138)
            %23 = cir.cmp(ne, %20, %22) : !cir.ptr<!s8i>, !cir.bool loc(#loc268)
            cir.if %23 {
              %24 = cir.cast(array_to_ptrdecay, %7 : !cir.ptr<!cir.array<!s8i x 14>>), !cir.ptr<!s8i> loc(#loc142)
              %25 = cir.call @atoi(%24) : (!cir.ptr<!s8i>) -> !s32i side_effect(pure) extra(#fn_attr) loc(#loc143)
              cir.store %25, %0 : !s32i, !cir.ptr<!s32i> loc(#loc270)
            } else {
              %24 = cir.get_global @".str" : !cir.ptr<!cir.array<!s8i x 16>> loc(#loc146)
              %25 = cir.cast(array_to_ptrdecay, %24 : !cir.ptr<!cir.array<!s8i x 16>>), !cir.ptr<!s8i> loc(#loc146)
              cir.call @printLine(%25) : (!cir.ptr<!s8i>) -> () loc(#loc147)
            } loc(#loc269)
          } loc(#loc267)
        } loc(#loc265)
      } loc(#loc264)
    } loc(#loc262)
    cir.scope {
      %3 = cir.get_global @GLOBAL_CONST_FIVE : !cir.ptr<!s32i> loc(#loc213)
      %4 = cir.load %3 : !cir.ptr<!s32i>, !s32i loc(#loc150)
      %5 = cir.const #cir.int<5> : !s32i loc(#loc151)
      %6 = cir.cmp(eq, %4, %5) : !s32i, !cir.bool loc(#loc272)
      cir.if %6 {
        cir.scope {
          %7 = cir.load %0 : !cir.ptr<!s32i>, !s32i loc(#loc155)
          %8 = cir.const #cir.int<0> : !s32i loc(#loc156)
          %9 = cir.cmp(ne, %7, %8) : !s32i, !cir.bool loc(#loc275)
          cir.if %9 {
            %10 = cir.const #cir.int<100> : !s32i loc(#loc160)
            %11 = cir.load %0 : !cir.ptr<!s32i>, !s32i loc(#loc161)
            %12 = cir.binop(div, %10, %11) : !s32i loc(#loc277)
            cir.call @printIntLine(%12) : (!s32i) -> () loc(#loc162)
          } else {
            %10 = cir.get_global @".str.2" : !cir.ptr<!cir.array<!s8i x 38>> loc(#loc163)
            %11 = cir.cast(array_to_ptrdecay, %10 : !cir.ptr<!cir.array<!s8i x 38>>), !cir.ptr<!s8i> loc(#loc163)
            cir.call @printLine(%11) : (!cir.ptr<!s8i>) -> () loc(#loc164)
          } loc(#loc276)
        } loc(#loc274)
      } loc(#loc273)
    } loc(#loc271)
    cir.return loc(#loc117)
  } loc(#loc259)
  cir.func no_proto internal private @goodG2B1() extra(#fn_attr1) {
    %0 = cir.alloca !s32i, !cir.ptr<!s32i>, ["data"] {alignment = 4 : i64} loc(#loc279)
    %1 = cir.const #cir.int<1> : !s32i loc(#loc169)
    %2 = cir.unary(minus, %1) nsw : !s32i, !s32i loc(#loc170)
    cir.store %2, %0 : !s32i, !cir.ptr<!s32i> loc(#loc280)
    cir.scope {
      %3 = cir.get_global @GLOBAL_CONST_FIVE : !cir.ptr<!s32i> loc(#loc213)
      %4 = cir.load %3 : !cir.ptr<!s32i>, !s32i loc(#loc174)
      %5 = cir.const #cir.int<5> : !s32i loc(#loc175)
      %6 = cir.cmp(ne, %4, %5) : !s32i, !cir.bool loc(#loc282)
      cir.if %6 {
        %7 = cir.get_global @".str.1" : !cir.ptr<!cir.array<!s8i x 21>> loc(#loc179)
        %8 = cir.cast(array_to_ptrdecay, %7 : !cir.ptr<!cir.array<!s8i x 21>>), !cir.ptr<!s8i> loc(#loc179)
        cir.call @printLine(%8) : (!cir.ptr<!s8i>) -> () loc(#loc180)
      } else {
        %7 = cir.const #cir.int<7> : !s32i loc(#loc181)
        cir.store %7, %0 : !s32i, !cir.ptr<!s32i> loc(#loc284)
      } loc(#loc283)
    } loc(#loc281)
    cir.scope {
      %3 = cir.get_global @GLOBAL_CONST_FIVE : !cir.ptr<!s32i> loc(#loc213)
      %4 = cir.load %3 : !cir.ptr<!s32i>, !s32i loc(#loc185)
      %5 = cir.const #cir.int<5> : !s32i loc(#loc186)
      %6 = cir.cmp(eq, %4, %5) : !s32i, !cir.bool loc(#loc286)
      cir.if %6 {
        %7 = cir.const #cir.int<100> : !s32i loc(#loc188)
        %8 = cir.load %0 : !cir.ptr<!s32i>, !s32i loc(#loc189)
        %9 = cir.binop(div, %7, %8) : !s32i loc(#loc288)
        cir.call @printIntLine(%9) : (!s32i) -> () loc(#loc190)
      } loc(#loc287)
    } loc(#loc285)
    cir.return loc(#loc166)
  } loc(#loc278)
  cir.func no_proto internal private @goodG2B2() extra(#fn_attr1) {
    %0 = cir.alloca !s32i, !cir.ptr<!s32i>, ["data"] {alignment = 4 : i64} loc(#loc290)
    %1 = cir.const #cir.int<1> : !s32i loc(#loc195)
    %2 = cir.unary(minus, %1) nsw : !s32i, !s32i loc(#loc196)
    cir.store %2, %0 : !s32i, !cir.ptr<!s32i> loc(#loc291)
    cir.scope {
      %3 = cir.get_global @GLOBAL_CONST_FIVE : !cir.ptr<!s32i> loc(#loc213)
      %4 = cir.load %3 : !cir.ptr<!s32i>, !s32i loc(#loc200)
      %5 = cir.const #cir.int<5> : !s32i loc(#loc201)
      %6 = cir.cmp(eq, %4, %5) : !s32i, !cir.bool loc(#loc293)
      cir.if %6 {
        %7 = cir.const #cir.int<7> : !s32i loc(#loc203)
        cir.store %7, %0 : !s32i, !cir.ptr<!s32i> loc(#loc295)
      } loc(#loc294)
    } loc(#loc292)
    cir.scope {
      %3 = cir.get_global @GLOBAL_CONST_FIVE : !cir.ptr<!s32i> loc(#loc213)
      %4 = cir.load %3 : !cir.ptr<!s32i>, !s32i loc(#loc207)
      %5 = cir.const #cir.int<5> : !s32i loc(#loc208)
      %6 = cir.cmp(eq, %4, %5) : !s32i, !cir.bool loc(#loc297)
      cir.if %6 {
        %7 = cir.const #cir.int<100> : !s32i loc(#loc210)
        %8 = cir.load %0 : !cir.ptr<!s32i>, !s32i loc(#loc211)
        %9 = cir.binop(div, %7, %8) : !s32i loc(#loc299)
        cir.call @printIntLine(%9) : (!s32i) -> () loc(#loc212)
      } loc(#loc298)
    } loc(#loc296)
    cir.return loc(#loc192)
  } loc(#loc289)
} loc(#loc)
#loc = loc("/workspaces/juliet-c/testcases/CWE369_Divide_by_Zero/s01/CWE369_Divide_by_Zero__int_fgets_divide_13.c":0:0)
#loc1 = loc("../../../testcasesupport/std_testcase.h":111:1)
#loc2 = loc("../../../testcasesupport/std_testcase.h":111:18)
#loc3 = loc("/usr/include/stdio.h":654:1)
#loc4 = loc("/usr/include/stdio.h":655:59)
#loc5 = loc("/usr/include/stdio.h":149:1)
#loc6 = loc("/usr/include/stdio.h":149:14)
#loc7 = loc("/usr/include/stdlib.h":105:1)
#loc8 = loc("/usr/include/stdlib.h":106:33)
#loc9 = loc("../../../testcasesupport/std_testcase_io.h":14:1)
#loc10 = loc("../../../testcasesupport/std_testcase_io.h":14:33)
#loc11 = loc("CWE369_Divide_by_Zero__int_fgets_divide_13.c":41:27)
#loc12 = loc("../../../testcasesupport/std_testcase_io.h":18:1)
#loc13 = loc("../../../testcasesupport/std_testcase_io.h":18:33)
#loc14 = loc("CWE369_Divide_by_Zero__int_fgets_divide_13.c":24:1)
#loc15 = loc("CWE369_Divide_by_Zero__int_fgets_divide_13.c":50:1)
#loc16 = loc("CWE369_Divide_by_Zero__int_fgets_divide_13.c":26:5)
#loc17 = loc("CWE369_Divide_by_Zero__int_fgets_divide_13.c":26:9)
#loc18 = loc("CWE369_Divide_by_Zero__int_fgets_divide_13.c":28:13)
#loc19 = loc("CWE369_Divide_by_Zero__int_fgets_divide_13.c":28:12)
#loc20 = loc("CWE369_Divide_by_Zero__int_fgets_divide_13.c":28:5)
#loc21 = loc("CWE369_Divide_by_Zero__int_fgets_divide_13.c":29:5)
#loc22 = loc("CWE369_Divide_by_Zero__int_fgets_divide_13.c":44:5)
#loc23 = loc("CWE369_Divide_by_Zero__int_fgets_divide_13.c":29:8)
#loc24 = loc("CWE369_Divide_by_Zero__int_fgets_divide_13.c":29:27)
#loc25 = loc("CWE369_Divide_by_Zero__int_fgets_divide_13.c":30:5)
#loc26 = loc("CWE369_Divide_by_Zero__int_fgets_divide_13.c":31:9)
#loc27 = loc("CWE369_Divide_by_Zero__int_fgets_divide_13.c":43:9)
#loc28 = loc("CWE369_Divide_by_Zero__int_fgets_divide_13.c":32:13)
#loc29 = loc("CWE369_Divide_by_Zero__int_fgets_divide_13.c":32:49)
#loc30 = loc("CWE369_Divide_by_Zero__int_fgets_divide_13.c":34:13)
#loc31 = loc("CWE369_Divide_by_Zero__int_fgets_divide_13.c":42:13)
#loc32 = loc("CWE369_Divide_by_Zero__int_fgets_divide_13.c":34:23)
#loc33 = loc("CWE369_Divide_by_Zero__int_fgets_divide_13.c":34:36)
#loc34 = loc("CWE369_Divide_by_Zero__int_fgets_divide_13.c":34:53)
#loc35 = loc("CWE369_Divide_by_Zero__int_fgets_divide_13.c":34:17)
#loc36 = loc("CWE369_Divide_by_Zero__int_fgets_divide_13.c":34:63)
#loc37 = loc("CWE369_Divide_by_Zero__int_fgets_divide_13.c":35:13)
#loc38 = loc("CWE369_Divide_by_Zero__int_fgets_divide_13.c":38:13)
#loc39 = loc("CWE369_Divide_by_Zero__int_fgets_divide_13.c":40:13)
#loc40 = loc("CWE369_Divide_by_Zero__int_fgets_divide_13.c":37:29)
#loc41 = loc("CWE369_Divide_by_Zero__int_fgets_divide_13.c":37:24)
#loc42 = loc("CWE369_Divide_by_Zero__int_fgets_divide_13.c":37:17)
#loc43 = loc("CWE369_Divide_by_Zero__int_fgets_divide_13.c":37:40)
#loc44 = loc("CWE369_Divide_by_Zero__int_fgets_divide_13.c":41:17)
#loc45 = loc("CWE369_Divide_by_Zero__int_fgets_divide_13.c":45:5)
#loc46 = loc("CWE369_Divide_by_Zero__int_fgets_divide_13.c":49:5)
#loc47 = loc("CWE369_Divide_by_Zero__int_fgets_divide_13.c":45:8)
#loc48 = loc("CWE369_Divide_by_Zero__int_fgets_divide_13.c":45:27)
#loc49 = loc("CWE369_Divide_by_Zero__int_fgets_divide_13.c":46:5)
#loc50 = loc("CWE369_Divide_by_Zero__int_fgets_divide_13.c":48:22)
#loc51 = loc("CWE369_Divide_by_Zero__int_fgets_divide_13.c":48:28)
#loc52 = loc("CWE369_Divide_by_Zero__int_fgets_divide_13.c":48:9)
#loc53 = loc("CWE369_Divide_by_Zero__int_fgets_divide_13.c":174:1)
#loc54 = loc("CWE369_Divide_by_Zero__int_fgets_divide_13.c":180:1)
#loc55 = loc("CWE369_Divide_by_Zero__int_fgets_divide_13.c":176:5)
#loc56 = loc("CWE369_Divide_by_Zero__int_fgets_divide_13.c":176:14)
#loc57 = loc("CWE369_Divide_by_Zero__int_fgets_divide_13.c":177:5)
#loc58 = loc("CWE369_Divide_by_Zero__int_fgets_divide_13.c":177:14)
#loc59 = loc("CWE369_Divide_by_Zero__int_fgets_divide_13.c":178:5)
#loc60 = loc("CWE369_Divide_by_Zero__int_fgets_divide_13.c":178:14)
#loc61 = loc("CWE369_Divide_by_Zero__int_fgets_divide_13.c":179:5)
#loc62 = loc("CWE369_Divide_by_Zero__int_fgets_divide_13.c":179:14)
#loc63 = loc("CWE369_Divide_by_Zero__int_fgets_divide_13.c":81:19)
#loc64 = loc("CWE369_Divide_by_Zero__int_fgets_divide_13.c":92:23)
#loc65 = loc("CWE369_Divide_by_Zero__int_fgets_divide_13.c":57:1)
#loc66 = loc("CWE369_Divide_by_Zero__int_fgets_divide_13.c":95:1)
#loc67 = loc("CWE369_Divide_by_Zero__int_fgets_divide_13.c":59:5)
#loc68 = loc("CWE369_Divide_by_Zero__int_fgets_divide_13.c":59:9)
#loc69 = loc("CWE369_Divide_by_Zero__int_fgets_divide_13.c":61:13)
#loc70 = loc("CWE369_Divide_by_Zero__int_fgets_divide_13.c":61:12)
#loc71 = loc("CWE369_Divide_by_Zero__int_fgets_divide_13.c":61:5)
#loc72 = loc("CWE369_Divide_by_Zero__int_fgets_divide_13.c":62:5)
#loc73 = loc("CWE369_Divide_by_Zero__int_fgets_divide_13.c":77:5)
#loc74 = loc("CWE369_Divide_by_Zero__int_fgets_divide_13.c":62:8)
#loc75 = loc("CWE369_Divide_by_Zero__int_fgets_divide_13.c":62:27)
#loc76 = loc("CWE369_Divide_by_Zero__int_fgets_divide_13.c":63:5)
#loc77 = loc("CWE369_Divide_by_Zero__int_fgets_divide_13.c":64:9)
#loc78 = loc("CWE369_Divide_by_Zero__int_fgets_divide_13.c":76:9)
#loc79 = loc("CWE369_Divide_by_Zero__int_fgets_divide_13.c":65:13)
#loc80 = loc("CWE369_Divide_by_Zero__int_fgets_divide_13.c":65:49)
#loc81 = loc("CWE369_Divide_by_Zero__int_fgets_divide_13.c":67:13)
#loc82 = loc("CWE369_Divide_by_Zero__int_fgets_divide_13.c":75:13)
#loc83 = loc("CWE369_Divide_by_Zero__int_fgets_divide_13.c":67:23)
#loc84 = loc("CWE369_Divide_by_Zero__int_fgets_divide_13.c":67:36)
#loc85 = loc("CWE369_Divide_by_Zero__int_fgets_divide_13.c":67:53)
#loc86 = loc("CWE369_Divide_by_Zero__int_fgets_divide_13.c":67:17)
#loc87 = loc("CWE369_Divide_by_Zero__int_fgets_divide_13.c":67:63)
#loc88 = loc("CWE369_Divide_by_Zero__int_fgets_divide_13.c":68:13)
#loc89 = loc("CWE369_Divide_by_Zero__int_fgets_divide_13.c":71:13)
#loc90 = loc("CWE369_Divide_by_Zero__int_fgets_divide_13.c":73:13)
#loc91 = loc("CWE369_Divide_by_Zero__int_fgets_divide_13.c":70:29)
#loc92 = loc("CWE369_Divide_by_Zero__int_fgets_divide_13.c":70:24)
#loc93 = loc("CWE369_Divide_by_Zero__int_fgets_divide_13.c":70:17)
#loc94 = loc("CWE369_Divide_by_Zero__int_fgets_divide_13.c":70:40)
#loc95 = loc("CWE369_Divide_by_Zero__int_fgets_divide_13.c":74:27)
#loc96 = loc("CWE369_Divide_by_Zero__int_fgets_divide_13.c":74:17)
#loc97 = loc("CWE369_Divide_by_Zero__int_fgets_divide_13.c":78:5)
#loc98 = loc("CWE369_Divide_by_Zero__int_fgets_divide_13.c":94:5)
#loc99 = loc("CWE369_Divide_by_Zero__int_fgets_divide_13.c":78:8)
#loc100 = loc("CWE369_Divide_by_Zero__int_fgets_divide_13.c":78:27)
#loc101 = loc("CWE369_Divide_by_Zero__int_fgets_divide_13.c":79:5)
#loc102 = loc("CWE369_Divide_by_Zero__int_fgets_divide_13.c":82:5)
#loc103 = loc("CWE369_Divide_by_Zero__int_fgets_divide_13.c":84:5)
#loc104 = loc("CWE369_Divide_by_Zero__int_fgets_divide_13.c":81:9)
#loc105 = loc("CWE369_Divide_by_Zero__int_fgets_divide_13.c":86:9)
#loc106 = loc("CWE369_Divide_by_Zero__int_fgets_divide_13.c":93:9)
#loc107 = loc("CWE369_Divide_by_Zero__int_fgets_divide_13.c":86:13)
#loc108 = loc("CWE369_Divide_by_Zero__int_fgets_divide_13.c":86:21)
#loc109 = loc("CWE369_Divide_by_Zero__int_fgets_divide_13.c":87:9)
#loc110 = loc("CWE369_Divide_by_Zero__int_fgets_divide_13.c":89:9)
#loc111 = loc("CWE369_Divide_by_Zero__int_fgets_divide_13.c":91:9)
#loc112 = loc("CWE369_Divide_by_Zero__int_fgets_divide_13.c":88:26)
#loc113 = loc("CWE369_Divide_by_Zero__int_fgets_divide_13.c":88:32)
#loc114 = loc("CWE369_Divide_by_Zero__int_fgets_divide_13.c":88:13)
#loc115 = loc("CWE369_Divide_by_Zero__int_fgets_divide_13.c":92:13)
#loc116 = loc("CWE369_Divide_by_Zero__int_fgets_divide_13.c":98:1)
#loc117 = loc("CWE369_Divide_by_Zero__int_fgets_divide_13.c":131:1)
#loc118 = loc("CWE369_Divide_by_Zero__int_fgets_divide_13.c":100:5)
#loc119 = loc("CWE369_Divide_by_Zero__int_fgets_divide_13.c":100:9)
#loc120 = loc("CWE369_Divide_by_Zero__int_fgets_divide_13.c":102:13)
#loc121 = loc("CWE369_Divide_by_Zero__int_fgets_divide_13.c":102:12)
#loc122 = loc("CWE369_Divide_by_Zero__int_fgets_divide_13.c":102:5)
#loc123 = loc("CWE369_Divide_by_Zero__int_fgets_divide_13.c":103:5)
#loc124 = loc("CWE369_Divide_by_Zero__int_fgets_divide_13.c":118:5)
#loc125 = loc("CWE369_Divide_by_Zero__int_fgets_divide_13.c":103:8)
#loc126 = loc("CWE369_Divide_by_Zero__int_fgets_divide_13.c":103:27)
#loc127 = loc("CWE369_Divide_by_Zero__int_fgets_divide_13.c":104:5)
#loc128 = loc("CWE369_Divide_by_Zero__int_fgets_divide_13.c":105:9)
#loc129 = loc("CWE369_Divide_by_Zero__int_fgets_divide_13.c":117:9)
#loc130 = loc("CWE369_Divide_by_Zero__int_fgets_divide_13.c":106:13)
#loc131 = loc("CWE369_Divide_by_Zero__int_fgets_divide_13.c":106:49)
#loc132 = loc("CWE369_Divide_by_Zero__int_fgets_divide_13.c":108:13)
#loc133 = loc("CWE369_Divide_by_Zero__int_fgets_divide_13.c":116:13)
#loc134 = loc("CWE369_Divide_by_Zero__int_fgets_divide_13.c":108:23)
#loc135 = loc("CWE369_Divide_by_Zero__int_fgets_divide_13.c":108:36)
#loc136 = loc("CWE369_Divide_by_Zero__int_fgets_divide_13.c":108:53)
#loc137 = loc("CWE369_Divide_by_Zero__int_fgets_divide_13.c":108:17)
#loc138 = loc("CWE369_Divide_by_Zero__int_fgets_divide_13.c":108:63)
#loc139 = loc("CWE369_Divide_by_Zero__int_fgets_divide_13.c":109:13)
#loc140 = loc("CWE369_Divide_by_Zero__int_fgets_divide_13.c":112:13)
#loc141 = loc("CWE369_Divide_by_Zero__int_fgets_divide_13.c":114:13)
#loc142 = loc("CWE369_Divide_by_Zero__int_fgets_divide_13.c":111:29)
#loc143 = loc("CWE369_Divide_by_Zero__int_fgets_divide_13.c":111:24)
#loc144 = loc("CWE369_Divide_by_Zero__int_fgets_divide_13.c":111:17)
#loc145 = loc("CWE369_Divide_by_Zero__int_fgets_divide_13.c":111:40)
#loc146 = loc("CWE369_Divide_by_Zero__int_fgets_divide_13.c":115:27)
#loc147 = loc("CWE369_Divide_by_Zero__int_fgets_divide_13.c":115:17)
#loc148 = loc("CWE369_Divide_by_Zero__int_fgets_divide_13.c":119:5)
#loc149 = loc("CWE369_Divide_by_Zero__int_fgets_divide_13.c":130:5)
#loc150 = loc("CWE369_Divide_by_Zero__int_fgets_divide_13.c":119:8)
#loc151 = loc("CWE369_Divide_by_Zero__int_fgets_divide_13.c":119:27)
#loc152 = loc("CWE369_Divide_by_Zero__int_fgets_divide_13.c":120:5)
#loc153 = loc("CWE369_Divide_by_Zero__int_fgets_divide_13.c":122:9)
#loc154 = loc("CWE369_Divide_by_Zero__int_fgets_divide_13.c":129:9)
#loc155 = loc("CWE369_Divide_by_Zero__int_fgets_divide_13.c":122:13)
#loc156 = loc("CWE369_Divide_by_Zero__int_fgets_divide_13.c":122:21)
#loc157 = loc("CWE369_Divide_by_Zero__int_fgets_divide_13.c":123:9)
#loc158 = loc("CWE369_Divide_by_Zero__int_fgets_divide_13.c":125:9)
#loc159 = loc("CWE369_Divide_by_Zero__int_fgets_divide_13.c":127:9)
#loc160 = loc("CWE369_Divide_by_Zero__int_fgets_divide_13.c":124:26)
#loc161 = loc("CWE369_Divide_by_Zero__int_fgets_divide_13.c":124:32)
#loc162 = loc("CWE369_Divide_by_Zero__int_fgets_divide_13.c":124:13)
#loc163 = loc("CWE369_Divide_by_Zero__int_fgets_divide_13.c":128:23)
#loc164 = loc("CWE369_Divide_by_Zero__int_fgets_divide_13.c":128:13)
#loc165 = loc("CWE369_Divide_by_Zero__int_fgets_divide_13.c":134:1)
#loc166 = loc("CWE369_Divide_by_Zero__int_fgets_divide_13.c":154:1)
#loc167 = loc("CWE369_Divide_by_Zero__int_fgets_divide_13.c":136:5)
#loc168 = loc("CWE369_Divide_by_Zero__int_fgets_divide_13.c":136:9)
#loc169 = loc("CWE369_Divide_by_Zero__int_fgets_divide_13.c":138:13)
#loc170 = loc("CWE369_Divide_by_Zero__int_fgets_divide_13.c":138:12)
#loc171 = loc("CWE369_Divide_by_Zero__int_fgets_divide_13.c":138:5)
#loc172 = loc("CWE369_Divide_by_Zero__int_fgets_divide_13.c":139:5)
#loc173 = loc("CWE369_Divide_by_Zero__int_fgets_divide_13.c":148:5)
#loc174 = loc("CWE369_Divide_by_Zero__int_fgets_divide_13.c":139:8)
#loc175 = loc("CWE369_Divide_by_Zero__int_fgets_divide_13.c":139:27)
#loc176 = loc("CWE369_Divide_by_Zero__int_fgets_divide_13.c":140:5)
#loc177 = loc("CWE369_Divide_by_Zero__int_fgets_divide_13.c":143:5)
#loc178 = loc("CWE369_Divide_by_Zero__int_fgets_divide_13.c":145:5)
#loc179 = loc("CWE369_Divide_by_Zero__int_fgets_divide_13.c":142:19)
#loc180 = loc("CWE369_Divide_by_Zero__int_fgets_divide_13.c":142:9)
#loc181 = loc("CWE369_Divide_by_Zero__int_fgets_divide_13.c":147:16)
#loc182 = loc("CWE369_Divide_by_Zero__int_fgets_divide_13.c":147:9)
#loc183 = loc("CWE369_Divide_by_Zero__int_fgets_divide_13.c":149:5)
#loc184 = loc("CWE369_Divide_by_Zero__int_fgets_divide_13.c":153:5)
#loc185 = loc("CWE369_Divide_by_Zero__int_fgets_divide_13.c":149:8)
#loc186 = loc("CWE369_Divide_by_Zero__int_fgets_divide_13.c":149:27)
#loc187 = loc("CWE369_Divide_by_Zero__int_fgets_divide_13.c":150:5)
#loc188 = loc("CWE369_Divide_by_Zero__int_fgets_divide_13.c":152:22)
#loc189 = loc("CWE369_Divide_by_Zero__int_fgets_divide_13.c":152:28)
#loc190 = loc("CWE369_Divide_by_Zero__int_fgets_divide_13.c":152:9)
#loc191 = loc("CWE369_Divide_by_Zero__int_fgets_divide_13.c":157:1)
#loc192 = loc("CWE369_Divide_by_Zero__int_fgets_divide_13.c":172:1)
#loc193 = loc("CWE369_Divide_by_Zero__int_fgets_divide_13.c":159:5)
#loc194 = loc("CWE369_Divide_by_Zero__int_fgets_divide_13.c":159:9)
#loc195 = loc("CWE369_Divide_by_Zero__int_fgets_divide_13.c":161:13)
#loc196 = loc("CWE369_Divide_by_Zero__int_fgets_divide_13.c":161:12)
#loc197 = loc("CWE369_Divide_by_Zero__int_fgets_divide_13.c":161:5)
#loc198 = loc("CWE369_Divide_by_Zero__int_fgets_divide_13.c":162:5)
#loc199 = loc("CWE369_Divide_by_Zero__int_fgets_divide_13.c":166:5)
#loc200 = loc("CWE369_Divide_by_Zero__int_fgets_divide_13.c":162:8)
#loc201 = loc("CWE369_Divide_by_Zero__int_fgets_divide_13.c":162:27)
#loc202 = loc("CWE369_Divide_by_Zero__int_fgets_divide_13.c":163:5)
#loc203 = loc("CWE369_Divide_by_Zero__int_fgets_divide_13.c":165:16)
#loc204 = loc("CWE369_Divide_by_Zero__int_fgets_divide_13.c":165:9)
#loc205 = loc("CWE369_Divide_by_Zero__int_fgets_divide_13.c":167:5)
#loc206 = loc("CWE369_Divide_by_Zero__int_fgets_divide_13.c":171:5)
#loc207 = loc("CWE369_Divide_by_Zero__int_fgets_divide_13.c":167:8)
#loc208 = loc("CWE369_Divide_by_Zero__int_fgets_divide_13.c":167:27)
#loc209 = loc("CWE369_Divide_by_Zero__int_fgets_divide_13.c":168:5)
#loc210 = loc("CWE369_Divide_by_Zero__int_fgets_divide_13.c":170:22)
#loc211 = loc("CWE369_Divide_by_Zero__int_fgets_divide_13.c":170:28)
#loc212 = loc("CWE369_Divide_by_Zero__int_fgets_divide_13.c":170:9)
#loc213 = loc(fused[#loc1, #loc2])
#loc214 = loc(fused[#loc3, #loc4])
#loc215 = loc(fused[#loc5, #loc6])
#loc216 = loc(fused[#loc7, #loc8])
#loc217 = loc(fused[#loc9, #loc10])
#loc218 = loc(fused[#loc12, #loc13])
#loc219 = loc(fused[#loc14, #loc15])
#loc220 = loc(fused[#loc16, #loc17])
#loc221 = loc(fused[#loc20, #loc18])
#loc222 = loc(fused[#loc21, #loc22])
#loc223 = loc(fused[#loc23, #loc24])
#loc224 = loc(fused[#loc25, #loc22])
#loc225 = loc(fused[#loc26, #loc27])
#loc226 = loc(fused[#loc28, #loc29])
#loc227 = loc(fused[#loc30, #loc31])
#loc228 = loc(fused[#loc35, #loc36])
#loc229 = loc(fused[#loc37, #loc38, #loc39, #loc31])
#loc230 = loc(fused[#loc42, #loc43])
#loc231 = loc(fused[#loc45, #loc46])
#loc232 = loc(fused[#loc47, #loc48])
#loc233 = loc(fused[#loc49, #loc46])
#loc234 = loc(fused[#loc50, #loc51])
#loc235 = loc(fused[#loc53, #loc54])
#loc236 = loc(fused[#loc55, #loc56])
#loc237 = loc(fused[#loc57, #loc58])
#loc238 = loc(fused[#loc59, #loc60])
#loc239 = loc(fused[#loc61, #loc62])
#loc240 = loc(fused[#loc65, #loc66])
#loc241 = loc(fused[#loc67, #loc68])
#loc242 = loc(fused[#loc71, #loc69])
#loc243 = loc(fused[#loc72, #loc73])
#loc244 = loc(fused[#loc74, #loc75])
#loc245 = loc(fused[#loc76, #loc73])
#loc246 = loc(fused[#loc77, #loc78])
#loc247 = loc(fused[#loc79, #loc80])
#loc248 = loc(fused[#loc81, #loc82])
#loc249 = loc(fused[#loc86, #loc87])
#loc250 = loc(fused[#loc88, #loc89, #loc90, #loc82])
#loc251 = loc(fused[#loc93, #loc94])
#loc252 = loc(fused[#loc97, #loc98])
#loc253 = loc(fused[#loc99, #loc100])
#loc254 = loc(fused[#loc101, #loc102, #loc103, #loc98])
#loc255 = loc(fused[#loc105, #loc106])
#loc256 = loc(fused[#loc107, #loc108])
#loc257 = loc(fused[#loc109, #loc110, #loc111, #loc106])
#loc258 = loc(fused[#loc112, #loc113])
#loc259 = loc(fused[#loc116, #loc117])
#loc260 = loc(fused[#loc118, #loc119])
#loc261 = loc(fused[#loc122, #loc120])
#loc262 = loc(fused[#loc123, #loc124])
#loc263 = loc(fused[#loc125, #loc126])
#loc264 = loc(fused[#loc127, #loc124])
#loc265 = loc(fused[#loc128, #loc129])
#loc266 = loc(fused[#loc130, #loc131])
#loc267 = loc(fused[#loc132, #loc133])
#loc268 = loc(fused[#loc137, #loc138])
#loc269 = loc(fused[#loc139, #loc140, #loc141, #loc133])
#loc270 = loc(fused[#loc144, #loc145])
#loc271 = loc(fused[#loc148, #loc149])
#loc272 = loc(fused[#loc150, #loc151])
#loc273 = loc(fused[#loc152, #loc149])
#loc274 = loc(fused[#loc153, #loc154])
#loc275 = loc(fused[#loc155, #loc156])
#loc276 = loc(fused[#loc157, #loc158, #loc159, #loc154])
#loc277 = loc(fused[#loc160, #loc161])
#loc278 = loc(fused[#loc165, #loc166])
#loc279 = loc(fused[#loc167, #loc168])
#loc280 = loc(fused[#loc171, #loc169])
#loc281 = loc(fused[#loc172, #loc173])
#loc282 = loc(fused[#loc174, #loc175])
#loc283 = loc(fused[#loc176, #loc177, #loc178, #loc173])
#loc284 = loc(fused[#loc182, #loc181])
#loc285 = loc(fused[#loc183, #loc184])
#loc286 = loc(fused[#loc185, #loc186])
#loc287 = loc(fused[#loc187, #loc184])
#loc288 = loc(fused[#loc188, #loc189])
#loc289 = loc(fused[#loc191, #loc192])
#loc290 = loc(fused[#loc193, #loc194])
#loc291 = loc(fused[#loc197, #loc195])
#loc292 = loc(fused[#loc198, #loc199])
#loc293 = loc(fused[#loc200, #loc201])
#loc294 = loc(fused[#loc202, #loc199])
#loc295 = loc(fused[#loc204, #loc203])
#loc296 = loc(fused[#loc205, #loc206])
#loc297 = loc(fused[#loc207, #loc208])
#loc298 = loc(fused[#loc209, #loc206])
#loc299 = loc(fused[#loc210, #loc211])
