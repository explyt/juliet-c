!s32i = !cir.int<s, 32>
!s64i = !cir.int<s, 64>
!s8i = !cir.int<s, 8>
!u32i = !cir.int<u, 32>
!void = !cir.void
#false = #cir.bool<false> : !cir.bool
#fn_attr = #cir<extra({nothrow = #cir.nothrow})>
#fn_attr1 = #cir<extra({inline = #cir.inline<no>, nothrow = #cir.nothrow, optnone = #cir.optnone})>
#loc5 = loc("CWE126_Buffer_Overread__CWE129_rand_42.c":22:22)
#loc6 = loc("CWE126_Buffer_Overread__CWE129_rand_42.c":22:26)
#loc8 = loc("CWE126_Buffer_Overread__CWE129_rand_42.c":25:12)
#loc59 = loc("CWE126_Buffer_Overread__CWE129_rand_42.c":127:10)
#loc60 = loc("CWE126_Buffer_Overread__CWE129_rand_42.c":127:14)
#loc61 = loc("CWE126_Buffer_Overread__CWE129_rand_42.c":127:20)
#loc62 = loc("CWE126_Buffer_Overread__CWE129_rand_42.c":127:32)
#loc79 = loc("CWE126_Buffer_Overread__CWE129_rand_42.c":85:26)
#loc80 = loc("CWE126_Buffer_Overread__CWE129_rand_42.c":85:30)
#loc82 = loc("CWE126_Buffer_Overread__CWE129_rand_42.c":88:12)
#loc106 = loc("CWE126_Buffer_Overread__CWE129_rand_42.c":101:23)
#loc119 = loc("CWE126_Buffer_Overread__CWE129_rand_42.c":55:26)
#loc120 = loc("CWE126_Buffer_Overread__CWE129_rand_42.c":55:30)
#true = #cir.bool<true> : !cir.bool
#loc155 = loc(fused[#loc5, #loc6])
#loc175 = loc(fused[#loc59, #loc60])
#loc176 = loc(fused[#loc61, #loc62])
#loc181 = loc(fused[#loc79, #loc80])
#loc195 = loc(fused[#loc119, #loc120])
module @"/home/ladisgin/git_proj/juliet-c/testcases/CWE126_Buffer_Overread/s01/CWE126_Buffer_Overread__CWE129_rand_42.c" attributes {cir.lang = #cir.lang<c>, cir.sob = #cir.signed_overflow_behavior<undefined>, cir.triple = "x86_64-unknown-linux-gnu", dlti.dl_spec = #dlti.dl_spec<!llvm.ptr<271> = dense<32> : vector<4xi64>, !llvm.ptr<272> = dense<64> : vector<4xi64>, f128 = dense<128> : vector<2xi64>, !llvm.ptr<270> = dense<32> : vector<4xi64>, f64 = dense<64> : vector<2xi64>, f16 = dense<16> : vector<2xi64>, i32 = dense<32> : vector<2xi64>, i16 = dense<16> : vector<2xi64>, i8 = dense<8> : vector<2xi64>, i1 = dense<8> : vector<2xi64>, !llvm.ptr = dense<64> : vector<4xi64>, f80 = dense<128> : vector<2xi64>, i128 = dense<128> : vector<2xi64>, i64 = dense<64> : vector<2xi64>, "dlti.endianness" = "little", "dlti.stack_alignment" = 128 : i64>} {
  cir.func private @rand() -> !s32i extra(#fn_attr) loc(#loc153)
  cir.func internal private @badSource(%arg0: !s32i loc(fused[#loc5, #loc6])) -> !s32i extra(#fn_attr1) {
    %0 = cir.alloca !s32i, !cir.ptr<!s32i>, ["data", init] {alignment = 4 : i64} loc(#loc155)
    %1 = cir.alloca !s32i, !cir.ptr<!s32i>, ["__retval"] {alignment = 4 : i64} loc(#loc4)
    cir.store %arg0, %0 : !s32i, !cir.ptr<!s32i> loc(#loc7)
    %2 = cir.call @rand() : () -> !s32i extra(#fn_attr) loc(#loc8)
    %3 = cir.const #cir.int<1> : !s32i loc(#loc8)
    %4 = cir.binop(and, %2, %3) : !s32i loc(#loc8)
    %5 = cir.cast(int_to_bool, %4 : !s32i), !cir.bool loc(#loc8)
    cir.brcond %5 ^bb1, ^bb2 loc(#loc8)
  ^bb1:  // pred: ^bb0
    %6 = cir.call @rand() : () -> !s32i extra(#fn_attr) loc(#loc8)
    %7 = cir.cast(integral, %6 : !s32i), !u32i loc(#loc8)
    %8 = cir.const #cir.int<30> : !s32i loc(#loc8)
    %9 = cir.shift(left, %7 : !u32i, %8 : !s32i) -> !u32i loc(#loc8)
    %10 = cir.call @rand() : () -> !s32i extra(#fn_attr) loc(#loc8)
    %11 = cir.cast(integral, %10 : !s32i), !u32i loc(#loc8)
    %12 = cir.const #cir.int<15> : !s32i loc(#loc8)
    %13 = cir.shift(left, %11 : !u32i, %12 : !s32i) -> !u32i loc(#loc8)
    %14 = cir.binop(xor, %9, %13) : !u32i loc(#loc8)
    %15 = cir.call @rand() : () -> !s32i extra(#fn_attr) loc(#loc8)
    %16 = cir.cast(integral, %15 : !s32i), !u32i loc(#loc8)
    %17 = cir.binop(xor, %14, %16) : !u32i loc(#loc8)
    cir.br ^bb3(%17 : !u32i) loc(#loc8)
  ^bb2:  // pred: ^bb0
    %18 = cir.call @rand() : () -> !s32i extra(#fn_attr) loc(#loc8)
    %19 = cir.cast(integral, %18 : !s32i), !u32i loc(#loc8)
    %20 = cir.const #cir.int<30> : !s32i loc(#loc8)
    %21 = cir.shift(left, %19 : !u32i, %20 : !s32i) -> !u32i loc(#loc8)
    %22 = cir.call @rand() : () -> !s32i extra(#fn_attr) loc(#loc8)
    %23 = cir.cast(integral, %22 : !s32i), !u32i loc(#loc8)
    %24 = cir.const #cir.int<15> : !s32i loc(#loc8)
    %25 = cir.shift(left, %23 : !u32i, %24 : !s32i) -> !u32i loc(#loc8)
    %26 = cir.binop(xor, %21, %25) : !u32i loc(#loc8)
    %27 = cir.call @rand() : () -> !s32i extra(#fn_attr) loc(#loc8)
    %28 = cir.cast(integral, %27 : !s32i), !u32i loc(#loc8)
    %29 = cir.binop(xor, %26, %28) : !u32i loc(#loc8)
    %30 = cir.unary(minus, %29) : !u32i, !u32i loc(#loc8)
    %31 = cir.const #cir.int<1> : !s32i loc(#loc8)
    %32 = cir.cast(integral, %31 : !s32i), !u32i loc(#loc8)
    %33 = cir.binop(sub, %30, %32) : !u32i loc(#loc8)
    cir.br ^bb3(%33 : !u32i) loc(#loc8)
  ^bb3(%34: !u32i loc("CWE126_Buffer_Overread__CWE129_rand_42.c":25:12)):  // 2 preds: ^bb1, ^bb2
    cir.br ^bb4 loc(#loc8)
  ^bb4:  // pred: ^bb3
    %35 = cir.cast(integral, %34 : !u32i), !s32i loc(#loc8)
    cir.store %35, %0 : !s32i, !cir.ptr<!s32i> loc(#loc156)
    %36 = cir.load %0 : !cir.ptr<!s32i>, !s32i loc(#loc10)
    cir.store %36, %1 : !s32i, !cir.ptr<!s32i> loc(#loc157)
    %37 = cir.load %1 : !cir.ptr<!s32i>, !s32i loc(#loc157)
    cir.return %37 : !s32i loc(#loc157)
  } loc(#loc154)
  cir.func private @printIntLine(!s32i) loc(#loc158)
  cir.func private @printLine(!cir.ptr<!s8i>) loc(#loc159)
  cir.global "private" constant cir_private dsolocal @".str" = #cir.const_array<"ERROR: Array index is negative\00" : !cir.array<!s8i x 31>> : !cir.array<!s8i x 31> {alignment = 1 : i64} loc(#loc16)
  cir.func no_proto @CWE126_Buffer_Overread__CWE129_rand_42_bad() extra(#fn_attr1) {
    %0 = cir.alloca !cir.array<!s32i x 10>, !cir.ptr<!cir.array<!s32i x 10>>, ["buffer"] {alignment = 16 : i64} loc(#loc161)
    %1 = cir.alloca !s32i, !cir.ptr<!s32i>, ["data"] {alignment = 4 : i64} loc(#loc162)
    %2 = cir.const #cir.int<1> : !s32i loc(#loc23)
    %3 = cir.unary(minus, %2) : !s32i, !s32i loc(#loc24)
    cir.store %3, %1 : !s32i, !cir.ptr<!s32i> loc(#loc163)
    %4 = cir.load %1 : !cir.ptr<!s32i>, !s32i loc(#loc26)
    %5 = cir.call @badSource(%4) : (!s32i) -> !s32i loc(#loc27)
    cir.store %5, %1 : !s32i, !cir.ptr<!s32i> loc(#loc164)
    cir.br ^bb1 loc(#loc165)
  ^bb1:  // pred: ^bb0
    %6 = cir.const #cir.zero : !cir.array<!s32i x 10> loc(#loc161)
    cir.store %6, %0 : !cir.array<!s32i x 10>, !cir.ptr<!cir.array<!s32i x 10>> loc(#loc161)
    cir.br ^bb2 loc(#loc166)
  ^bb2:  // pred: ^bb1
    %7 = cir.load %1 : !cir.ptr<!s32i>, !s32i loc(#loc34)
    %8 = cir.const #cir.int<0> : !s32i loc(#loc35)
    %9 = cir.cmp(ge, %7, %8) : !s32i, !cir.bool loc(#loc167)
    cir.brcond %9 ^bb3, ^bb4 loc(#loc168)
  ^bb3:  // pred: ^bb2
    %10 = cir.load %1 : !cir.ptr<!s32i>, !s32i loc(#loc39)
    %11 = cir.cast(array_to_ptrdecay, %0 : !cir.ptr<!cir.array<!s32i x 10>>), !cir.ptr<!s32i> loc(#loc40)
    %12 = cir.ptr_stride(%11 : !cir.ptr<!s32i>, %10 : !s32i), !cir.ptr<!s32i> loc(#loc40)
    %13 = cir.load %12 : !cir.ptr<!s32i>, !s32i loc(#loc40)
    cir.call @printIntLine(%13) : (!s32i) -> () loc(#loc41)
    cir.br ^bb5 loc(#loc37)
  ^bb4:  // pred: ^bb2
    %14 = cir.get_global @".str" : !cir.ptr<!cir.array<!s8i x 31>> loc(#loc16)
    %15 = cir.cast(array_to_ptrdecay, %14 : !cir.ptr<!cir.array<!s8i x 31>>), !cir.ptr<!s8i> loc(#loc16)
    cir.call @printLine(%15) : (!cir.ptr<!s8i>) -> () loc(#loc42)
    cir.br ^bb5 loc(#loc33)
  ^bb5:  // 2 preds: ^bb3, ^bb4
    cir.br ^bb6 loc(#loc33)
  ^bb6:  // pred: ^bb5
    cir.br ^bb7 loc(#loc31)
  ^bb7:  // pred: ^bb6
    cir.return loc(#loc18)
  } loc(#loc160)
  cir.func no_proto @CWE126_Buffer_Overread__CWE129_rand_42_good() extra(#fn_attr1) {
    %0 = cir.get_global @goodB2G : !cir.ptr<!cir.func<!void ()>> loc(#loc170)
    cir.call %0() : (!cir.ptr<!cir.func<!void ()>>) -> () loc(#loc45)
    %1 = cir.get_global @goodG2B : !cir.ptr<!cir.func<!void ()>> loc(#loc171)
    cir.call %1() : (!cir.ptr<!cir.func<!void ()>>) -> () loc(#loc47)
    cir.return loc(#loc44)
  } loc(#loc169)
  cir.func private @srand(!u32i) extra(#fn_attr) loc(#loc172)
  cir.func private @time(!cir.ptr<!s64i>) -> !s64i extra(#fn_attr) loc(#loc173)
  cir.global "private" constant cir_private dsolocal @".str.1" = #cir.const_array<"Calling good()...\00" : !cir.array<!s8i x 18>> : !cir.array<!s8i x 18> {alignment = 1 : i64} loc(#loc53)
  cir.global "private" constant cir_private dsolocal @".str.2" = #cir.const_array<"Finished good()\00" : !cir.array<!s8i x 16>> : !cir.array<!s8i x 16> {alignment = 1 : i64} loc(#loc54)
  cir.global "private" constant cir_private dsolocal @".str.3" = #cir.const_array<"Calling bad()...\00" : !cir.array<!s8i x 17>> : !cir.array<!s8i x 17> {alignment = 1 : i64} loc(#loc55)
  cir.global "private" constant cir_private dsolocal @".str.4" = #cir.const_array<"Finished bad()\00" : !cir.array<!s8i x 15>> : !cir.array<!s8i x 15> {alignment = 1 : i64} loc(#loc56)
  cir.func @main(%arg0: !s32i loc(fused[#loc59, #loc60]), %arg1: !cir.ptr<!cir.ptr<!s8i>> loc(fused[#loc61, #loc62])) -> !s32i extra(#fn_attr1) {
    %0 = cir.alloca !s32i, !cir.ptr<!s32i>, ["argc", init] {alignment = 4 : i64} loc(#loc175)
    %1 = cir.alloca !cir.ptr<!cir.ptr<!s8i>>, !cir.ptr<!cir.ptr<!cir.ptr<!s8i>>>, ["argv", init] {alignment = 8 : i64} loc(#loc176)
    %2 = cir.alloca !s32i, !cir.ptr<!s32i>, ["__retval"] {alignment = 4 : i64} loc(#loc58)
    cir.store %arg0, %0 : !s32i, !cir.ptr<!s32i> loc(#loc63)
    cir.store %arg1, %1 : !cir.ptr<!cir.ptr<!s8i>>, !cir.ptr<!cir.ptr<!cir.ptr<!s8i>>> loc(#loc63)
    %3 = cir.const #cir.ptr<null> : !cir.ptr<!s64i> loc(#loc64)
    %4 = cir.call @time(%3) : (!cir.ptr<!s64i>) -> !s64i extra(#fn_attr) loc(#loc65)
    %5 = cir.cast(integral, %4 : !s64i), !u32i loc(#loc65)
    cir.call @srand(%5) : (!u32i) -> () extra(#fn_attr) loc(#loc66)
    %6 = cir.get_global @".str.1" : !cir.ptr<!cir.array<!s8i x 18>> loc(#loc53)
    %7 = cir.cast(array_to_ptrdecay, %6 : !cir.ptr<!cir.array<!s8i x 18>>), !cir.ptr<!s8i> loc(#loc53)
    cir.call @printLine(%7) : (!cir.ptr<!s8i>) -> () loc(#loc67)
    %8 = cir.get_global @CWE126_Buffer_Overread__CWE129_rand_42_good : !cir.ptr<!cir.func<!void ()>> loc(#loc177)
    cir.call @CWE126_Buffer_Overread__CWE129_rand_42_good() : () -> () loc(#loc68)
    %9 = cir.get_global @".str.2" : !cir.ptr<!cir.array<!s8i x 16>> loc(#loc54)
    %10 = cir.cast(array_to_ptrdecay, %9 : !cir.ptr<!cir.array<!s8i x 16>>), !cir.ptr<!s8i> loc(#loc54)
    cir.call @printLine(%10) : (!cir.ptr<!s8i>) -> () loc(#loc70)
    %11 = cir.get_global @".str.3" : !cir.ptr<!cir.array<!s8i x 17>> loc(#loc55)
    %12 = cir.cast(array_to_ptrdecay, %11 : !cir.ptr<!cir.array<!s8i x 17>>), !cir.ptr<!s8i> loc(#loc55)
    cir.call @printLine(%12) : (!cir.ptr<!s8i>) -> () loc(#loc71)
    %13 = cir.get_global @CWE126_Buffer_Overread__CWE129_rand_42_bad : !cir.ptr<!cir.func<!void ()>> loc(#loc178)
    cir.call @CWE126_Buffer_Overread__CWE129_rand_42_bad() : () -> () loc(#loc72)
    %14 = cir.get_global @".str.4" : !cir.ptr<!cir.array<!s8i x 15>> loc(#loc56)
    %15 = cir.cast(array_to_ptrdecay, %14 : !cir.ptr<!cir.array<!s8i x 15>>), !cir.ptr<!s8i> loc(#loc56)
    cir.call @printLine(%15) : (!cir.ptr<!s8i>) -> () loc(#loc74)
    %16 = cir.const #cir.int<0> : !s32i loc(#loc75)
    cir.store %16, %2 : !s32i, !cir.ptr<!s32i> loc(#loc179)
    %17 = cir.load %2 : !cir.ptr<!s32i>, !s32i loc(#loc179)
    cir.return %17 : !s32i loc(#loc179)
  } loc(#loc174)
  cir.func internal private @goodB2GSource(%arg0: !s32i loc(fused[#loc79, #loc80])) -> !s32i extra(#fn_attr1) {
    %0 = cir.alloca !s32i, !cir.ptr<!s32i>, ["data", init] {alignment = 4 : i64} loc(#loc181)
    %1 = cir.alloca !s32i, !cir.ptr<!s32i>, ["__retval"] {alignment = 4 : i64} loc(#loc78)
    cir.store %arg0, %0 : !s32i, !cir.ptr<!s32i> loc(#loc81)
    %2 = cir.call @rand() : () -> !s32i extra(#fn_attr) loc(#loc82)
    %3 = cir.const #cir.int<1> : !s32i loc(#loc82)
    %4 = cir.binop(and, %2, %3) : !s32i loc(#loc82)
    %5 = cir.cast(int_to_bool, %4 : !s32i), !cir.bool loc(#loc82)
    cir.brcond %5 ^bb1, ^bb2 loc(#loc82)
  ^bb1:  // pred: ^bb0
    %6 = cir.call @rand() : () -> !s32i extra(#fn_attr) loc(#loc82)
    %7 = cir.cast(integral, %6 : !s32i), !u32i loc(#loc82)
    %8 = cir.const #cir.int<30> : !s32i loc(#loc82)
    %9 = cir.shift(left, %7 : !u32i, %8 : !s32i) -> !u32i loc(#loc82)
    %10 = cir.call @rand() : () -> !s32i extra(#fn_attr) loc(#loc82)
    %11 = cir.cast(integral, %10 : !s32i), !u32i loc(#loc82)
    %12 = cir.const #cir.int<15> : !s32i loc(#loc82)
    %13 = cir.shift(left, %11 : !u32i, %12 : !s32i) -> !u32i loc(#loc82)
    %14 = cir.binop(xor, %9, %13) : !u32i loc(#loc82)
    %15 = cir.call @rand() : () -> !s32i extra(#fn_attr) loc(#loc82)
    %16 = cir.cast(integral, %15 : !s32i), !u32i loc(#loc82)
    %17 = cir.binop(xor, %14, %16) : !u32i loc(#loc82)
    cir.br ^bb3(%17 : !u32i) loc(#loc82)
  ^bb2:  // pred: ^bb0
    %18 = cir.call @rand() : () -> !s32i extra(#fn_attr) loc(#loc82)
    %19 = cir.cast(integral, %18 : !s32i), !u32i loc(#loc82)
    %20 = cir.const #cir.int<30> : !s32i loc(#loc82)
    %21 = cir.shift(left, %19 : !u32i, %20 : !s32i) -> !u32i loc(#loc82)
    %22 = cir.call @rand() : () -> !s32i extra(#fn_attr) loc(#loc82)
    %23 = cir.cast(integral, %22 : !s32i), !u32i loc(#loc82)
    %24 = cir.const #cir.int<15> : !s32i loc(#loc82)
    %25 = cir.shift(left, %23 : !u32i, %24 : !s32i) -> !u32i loc(#loc82)
    %26 = cir.binop(xor, %21, %25) : !u32i loc(#loc82)
    %27 = cir.call @rand() : () -> !s32i extra(#fn_attr) loc(#loc82)
    %28 = cir.cast(integral, %27 : !s32i), !u32i loc(#loc82)
    %29 = cir.binop(xor, %26, %28) : !u32i loc(#loc82)
    %30 = cir.unary(minus, %29) : !u32i, !u32i loc(#loc82)
    %31 = cir.const #cir.int<1> : !s32i loc(#loc82)
    %32 = cir.cast(integral, %31 : !s32i), !u32i loc(#loc82)
    %33 = cir.binop(sub, %30, %32) : !u32i loc(#loc82)
    cir.br ^bb3(%33 : !u32i) loc(#loc82)
  ^bb3(%34: !u32i loc("CWE126_Buffer_Overread__CWE129_rand_42.c":88:12)):  // 2 preds: ^bb1, ^bb2
    cir.br ^bb4 loc(#loc82)
  ^bb4:  // pred: ^bb3
    %35 = cir.cast(integral, %34 : !u32i), !s32i loc(#loc82)
    cir.store %35, %0 : !s32i, !cir.ptr<!s32i> loc(#loc182)
    %36 = cir.load %0 : !cir.ptr<!s32i>, !s32i loc(#loc84)
    cir.store %36, %1 : !s32i, !cir.ptr<!s32i> loc(#loc183)
    %37 = cir.load %1 : !cir.ptr<!s32i>, !s32i loc(#loc183)
    cir.return %37 : !s32i loc(#loc183)
  } loc(#loc180)
  cir.global "private" constant cir_private dsolocal @".str.5" = #cir.const_array<"ERROR: Array index is out-of-bounds\00" : !cir.array<!s8i x 36>> : !cir.array<!s8i x 36> {alignment = 1 : i64} loc(#loc86)
  cir.func no_proto internal private @goodB2G() extra(#fn_attr1) {
    %0 = cir.alloca !cir.array<!s32i x 10>, !cir.ptr<!cir.array<!s32i x 10>>, ["buffer"] {alignment = 16 : i64} loc(#loc185)
    %1 = cir.alloca !s32i, !cir.ptr<!s32i>, ["data"] {alignment = 4 : i64} loc(#loc186)
    %2 = cir.const #cir.int<1> : !s32i loc(#loc93)
    %3 = cir.unary(minus, %2) : !s32i, !s32i loc(#loc94)
    cir.store %3, %1 : !s32i, !cir.ptr<!s32i> loc(#loc187)
    %4 = cir.load %1 : !cir.ptr<!s32i>, !s32i loc(#loc96)
    %5 = cir.call @goodB2GSource(%4) : (!s32i) -> !s32i loc(#loc97)
    cir.store %5, %1 : !s32i, !cir.ptr<!s32i> loc(#loc188)
    cir.br ^bb1 loc(#loc189)
  ^bb1:  // pred: ^bb0
    %6 = cir.const #cir.zero : !cir.array<!s32i x 10> loc(#loc185)
    cir.store %6, %0 : !cir.array<!s32i x 10>, !cir.ptr<!cir.array<!s32i x 10>> loc(#loc185)
    cir.br ^bb2 loc(#loc190)
  ^bb2:  // pred: ^bb1
    %7 = cir.load %1 : !cir.ptr<!s32i>, !s32i loc(#loc104)
    %8 = cir.const #cir.int<0> : !s32i loc(#loc105)
    %9 = cir.cmp(ge, %7, %8) : !s32i, !cir.bool loc(#loc191)
    cir.brcond %9 ^bb3, ^bb8 loc(#loc106)
  ^bb3:  // pred: ^bb2
    %10 = cir.load %1 : !cir.ptr<!s32i>, !s32i loc(#loc107)
    %11 = cir.const #cir.int<10> : !s32i loc(#loc108)
    %12 = cir.cmp(lt, %10, %11) : !s32i, !cir.bool loc(#loc192)
    cir.brcond %12 ^bb4, ^bb5 loc(#loc106)
  ^bb4:  // pred: ^bb3
    %13 = cir.const #true loc(#loc106)
    cir.br ^bb6(%13 : !cir.bool) loc(#loc106)
  ^bb5:  // pred: ^bb3
    %14 = cir.const #false loc(#loc106)
    cir.br ^bb6(%14 : !cir.bool) loc(#loc106)
  ^bb6(%15: !cir.bool loc("CWE126_Buffer_Overread__CWE129_rand_42.c":101:23)):  // 2 preds: ^bb4, ^bb5
    cir.br ^bb7 loc(#loc106)
  ^bb7:  // pred: ^bb6
    cir.br ^bb9(%15 : !cir.bool) loc(#loc106)
  ^bb8:  // pred: ^bb2
    %16 = cir.const #false loc(#loc106)
    cir.br ^bb9(%16 : !cir.bool) loc(#loc106)
  ^bb9(%17: !cir.bool loc("CWE126_Buffer_Overread__CWE129_rand_42.c":101:23)):  // 2 preds: ^bb7, ^bb8
    cir.br ^bb10 loc(#loc106)
  ^bb10:  // pred: ^bb9
    cir.brcond %17 ^bb11, ^bb12 loc(#loc193)
  ^bb11:  // pred: ^bb10
    %18 = cir.load %1 : !cir.ptr<!s32i>, !s32i loc(#loc113)
    %19 = cir.cast(array_to_ptrdecay, %0 : !cir.ptr<!cir.array<!s32i x 10>>), !cir.ptr<!s32i> loc(#loc114)
    %20 = cir.ptr_stride(%19 : !cir.ptr<!s32i>, %18 : !s32i), !cir.ptr<!s32i> loc(#loc114)
    %21 = cir.load %20 : !cir.ptr<!s32i>, !s32i loc(#loc114)
    cir.call @printIntLine(%21) : (!s32i) -> () loc(#loc115)
    cir.br ^bb13 loc(#loc111)
  ^bb12:  // pred: ^bb10
    %22 = cir.get_global @".str.5" : !cir.ptr<!cir.array<!s8i x 36>> loc(#loc86)
    %23 = cir.cast(array_to_ptrdecay, %22 : !cir.ptr<!cir.array<!s8i x 36>>), !cir.ptr<!s8i> loc(#loc86)
    cir.call @printLine(%23) : (!cir.ptr<!s8i>) -> () loc(#loc116)
    cir.br ^bb13 loc(#loc103)
  ^bb13:  // 2 preds: ^bb11, ^bb12
    cir.br ^bb14 loc(#loc103)
  ^bb14:  // pred: ^bb13
    cir.br ^bb15 loc(#loc101)
  ^bb15:  // pred: ^bb14
    cir.return loc(#loc88)
  } loc(#loc184)
  cir.func internal private @goodG2BSource(%arg0: !s32i loc(fused[#loc119, #loc120])) -> !s32i extra(#fn_attr1) {
    %0 = cir.alloca !s32i, !cir.ptr<!s32i>, ["data", init] {alignment = 4 : i64} loc(#loc195)
    %1 = cir.alloca !s32i, !cir.ptr<!s32i>, ["__retval"] {alignment = 4 : i64} loc(#loc118)
    cir.store %arg0, %0 : !s32i, !cir.ptr<!s32i> loc(#loc121)
    %2 = cir.const #cir.int<7> : !s32i loc(#loc122)
    cir.store %2, %0 : !s32i, !cir.ptr<!s32i> loc(#loc196)
    %3 = cir.load %0 : !cir.ptr<!s32i>, !s32i loc(#loc124)
    cir.store %3, %1 : !s32i, !cir.ptr<!s32i> loc(#loc197)
    %4 = cir.load %1 : !cir.ptr<!s32i>, !s32i loc(#loc197)
    cir.return %4 : !s32i loc(#loc197)
  } loc(#loc194)
  cir.func no_proto internal private @goodG2B() extra(#fn_attr1) {
    %0 = cir.alloca !cir.array<!s32i x 10>, !cir.ptr<!cir.array<!s32i x 10>>, ["buffer"] {alignment = 16 : i64} loc(#loc199)
    %1 = cir.alloca !s32i, !cir.ptr<!s32i>, ["data"] {alignment = 4 : i64} loc(#loc200)
    %2 = cir.const #cir.int<1> : !s32i loc(#loc132)
    %3 = cir.unary(minus, %2) : !s32i, !s32i loc(#loc133)
    cir.store %3, %1 : !s32i, !cir.ptr<!s32i> loc(#loc201)
    %4 = cir.load %1 : !cir.ptr<!s32i>, !s32i loc(#loc135)
    %5 = cir.call @goodG2BSource(%4) : (!s32i) -> !s32i loc(#loc136)
    cir.store %5, %1 : !s32i, !cir.ptr<!s32i> loc(#loc202)
    cir.br ^bb1 loc(#loc203)
  ^bb1:  // pred: ^bb0
    %6 = cir.const #cir.zero : !cir.array<!s32i x 10> loc(#loc199)
    cir.store %6, %0 : !cir.array<!s32i x 10>, !cir.ptr<!cir.array<!s32i x 10>> loc(#loc199)
    cir.br ^bb2 loc(#loc204)
  ^bb2:  // pred: ^bb1
    %7 = cir.load %1 : !cir.ptr<!s32i>, !s32i loc(#loc143)
    %8 = cir.const #cir.int<0> : !s32i loc(#loc144)
    %9 = cir.cmp(ge, %7, %8) : !s32i, !cir.bool loc(#loc205)
    cir.brcond %9 ^bb3, ^bb4 loc(#loc206)
  ^bb3:  // pred: ^bb2
    %10 = cir.load %1 : !cir.ptr<!s32i>, !s32i loc(#loc148)
    %11 = cir.cast(array_to_ptrdecay, %0 : !cir.ptr<!cir.array<!s32i x 10>>), !cir.ptr<!s32i> loc(#loc149)
    %12 = cir.ptr_stride(%11 : !cir.ptr<!s32i>, %10 : !s32i), !cir.ptr<!s32i> loc(#loc149)
    %13 = cir.load %12 : !cir.ptr<!s32i>, !s32i loc(#loc149)
    cir.call @printIntLine(%13) : (!s32i) -> () loc(#loc150)
    cir.br ^bb5 loc(#loc146)
  ^bb4:  // pred: ^bb2
    %14 = cir.get_global @".str" : !cir.ptr<!cir.array<!s8i x 31>> loc(#loc151)
    %15 = cir.cast(array_to_ptrdecay, %14 : !cir.ptr<!cir.array<!s8i x 31>>), !cir.ptr<!s8i> loc(#loc151)
    cir.call @printLine(%15) : (!cir.ptr<!s8i>) -> () loc(#loc152)
    cir.br ^bb5 loc(#loc142)
  ^bb5:  // 2 preds: ^bb3, ^bb4
    cir.br ^bb6 loc(#loc142)
  ^bb6:  // pred: ^bb5
    cir.br ^bb7 loc(#loc140)
  ^bb7:  // pred: ^bb6
    cir.return loc(#loc127)
  } loc(#loc198)
} loc(#loc)
#loc = loc("/home/ladisgin/git_proj/juliet-c/testcases/CWE126_Buffer_Overread/s01/CWE126_Buffer_Overread__CWE129_rand_42.c":0:0)
#loc1 = loc("/usr/include/stdlib.h":573:1)
#loc2 = loc("/usr/include/stdlib.h":573:24)
#loc3 = loc("CWE126_Buffer_Overread__CWE129_rand_42.c":22:1)
#loc4 = loc("CWE126_Buffer_Overread__CWE129_rand_42.c":27:1)
#loc7 = loc("CWE126_Buffer_Overread__CWE129_rand_42.c":23:1)
#loc9 = loc("CWE126_Buffer_Overread__CWE129_rand_42.c":25:5)
#loc10 = loc("CWE126_Buffer_Overread__CWE129_rand_42.c":26:12)
#loc11 = loc("CWE126_Buffer_Overread__CWE129_rand_42.c":26:5)
#loc12 = loc("../../../testcasesupport/std_testcase_io.h":18:1)
#loc13 = loc("../../../testcasesupport/std_testcase_io.h":18:33)
#loc14 = loc("../../../testcasesupport/std_testcase_io.h":14:1)
#loc15 = loc("../../../testcasesupport/std_testcase_io.h":14:33)
#loc16 = loc("CWE126_Buffer_Overread__CWE129_rand_42.c":45:23)
#loc17 = loc("CWE126_Buffer_Overread__CWE129_rand_42.c":29:1)
#loc18 = loc("CWE126_Buffer_Overread__CWE129_rand_42.c":48:1)
#loc19 = loc("CWE126_Buffer_Overread__CWE129_rand_42.c":36:9)
#loc20 = loc("CWE126_Buffer_Overread__CWE129_rand_42.c":36:30)
#loc21 = loc("CWE126_Buffer_Overread__CWE129_rand_42.c":31:5)
#loc22 = loc("CWE126_Buffer_Overread__CWE129_rand_42.c":31:9)
#loc23 = loc("CWE126_Buffer_Overread__CWE129_rand_42.c":33:13)
#loc24 = loc("CWE126_Buffer_Overread__CWE129_rand_42.c":33:12)
#loc25 = loc("CWE126_Buffer_Overread__CWE129_rand_42.c":33:5)
#loc26 = loc("CWE126_Buffer_Overread__CWE129_rand_42.c":34:22)
#loc27 = loc("CWE126_Buffer_Overread__CWE129_rand_42.c":34:12)
#loc28 = loc("CWE126_Buffer_Overread__CWE129_rand_42.c":34:5)
#loc29 = loc("CWE126_Buffer_Overread__CWE129_rand_42.c":34:26)
#loc30 = loc("CWE126_Buffer_Overread__CWE129_rand_42.c":35:5)
#loc31 = loc("CWE126_Buffer_Overread__CWE129_rand_42.c":47:5)
#loc32 = loc("CWE126_Buffer_Overread__CWE129_rand_42.c":39:9)
#loc33 = loc("CWE126_Buffer_Overread__CWE129_rand_42.c":46:9)
#loc34 = loc("CWE126_Buffer_Overread__CWE129_rand_42.c":39:13)
#loc35 = loc("CWE126_Buffer_Overread__CWE129_rand_42.c":39:21)
#loc36 = loc("CWE126_Buffer_Overread__CWE129_rand_42.c":40:9)
#loc37 = loc("CWE126_Buffer_Overread__CWE129_rand_42.c":42:9)
#loc38 = loc("CWE126_Buffer_Overread__CWE129_rand_42.c":44:9)
#loc39 = loc("CWE126_Buffer_Overread__CWE129_rand_42.c":41:33)
#loc40 = loc("CWE126_Buffer_Overread__CWE129_rand_42.c":41:26)
#loc41 = loc("CWE126_Buffer_Overread__CWE129_rand_42.c":41:13)
#loc42 = loc("CWE126_Buffer_Overread__CWE129_rand_42.c":45:13)
#loc43 = loc("CWE126_Buffer_Overread__CWE129_rand_42.c":112:1)
#loc44 = loc("CWE126_Buffer_Overread__CWE129_rand_42.c":116:1)
#loc45 = loc("CWE126_Buffer_Overread__CWE129_rand_42.c":114:5)
#loc46 = loc("CWE126_Buffer_Overread__CWE129_rand_42.c":114:13)
#loc47 = loc("CWE126_Buffer_Overread__CWE129_rand_42.c":115:5)
#loc48 = loc("CWE126_Buffer_Overread__CWE129_rand_42.c":115:13)
#loc49 = loc("/usr/include/stdlib.h":575:1)
#loc50 = loc("/usr/include/stdlib.h":575:41)
#loc51 = loc("/usr/include/time.h":76:1)
#loc52 = loc("/usr/include/time.h":76:38)
#loc53 = loc("CWE126_Buffer_Overread__CWE129_rand_42.c":132:15)
#loc54 = loc("CWE126_Buffer_Overread__CWE129_rand_42.c":134:15)
#loc55 = loc("CWE126_Buffer_Overread__CWE129_rand_42.c":137:15)
#loc56 = loc("CWE126_Buffer_Overread__CWE129_rand_42.c":139:15)
#loc57 = loc("CWE126_Buffer_Overread__CWE129_rand_42.c":127:1)
#loc58 = loc("CWE126_Buffer_Overread__CWE129_rand_42.c":142:1)
#loc63 = loc("CWE126_Buffer_Overread__CWE129_rand_42.c":128:1)
#loc64 = loc("CWE126_Buffer_Overread__CWE129_rand_42.c":130:27)
#loc65 = loc("CWE126_Buffer_Overread__CWE129_rand_42.c":130:22)
#loc66 = loc("CWE126_Buffer_Overread__CWE129_rand_42.c":130:5)
#loc67 = loc("CWE126_Buffer_Overread__CWE129_rand_42.c":132:5)
#loc68 = loc("CWE126_Buffer_Overread__CWE129_rand_42.c":133:5)
#loc69 = loc("CWE126_Buffer_Overread__CWE129_rand_42.c":133:49)
#loc70 = loc("CWE126_Buffer_Overread__CWE129_rand_42.c":134:5)
#loc71 = loc("CWE126_Buffer_Overread__CWE129_rand_42.c":137:5)
#loc72 = loc("CWE126_Buffer_Overread__CWE129_rand_42.c":138:5)
#loc73 = loc("CWE126_Buffer_Overread__CWE129_rand_42.c":138:48)
#loc74 = loc("CWE126_Buffer_Overread__CWE129_rand_42.c":139:5)
#loc75 = loc("CWE126_Buffer_Overread__CWE129_rand_42.c":141:12)
#loc76 = loc("CWE126_Buffer_Overread__CWE129_rand_42.c":141:5)
#loc77 = loc("CWE126_Buffer_Overread__CWE129_rand_42.c":85:1)
#loc78 = loc("CWE126_Buffer_Overread__CWE129_rand_42.c":90:1)
#loc81 = loc("CWE126_Buffer_Overread__CWE129_rand_42.c":86:1)
#loc83 = loc("CWE126_Buffer_Overread__CWE129_rand_42.c":88:5)
#loc84 = loc("CWE126_Buffer_Overread__CWE129_rand_42.c":89:12)
#loc85 = loc("CWE126_Buffer_Overread__CWE129_rand_42.c":89:5)
#loc86 = loc("CWE126_Buffer_Overread__CWE129_rand_42.c":107:23)
#loc87 = loc("CWE126_Buffer_Overread__CWE129_rand_42.c":92:1)
#loc88 = loc("CWE126_Buffer_Overread__CWE129_rand_42.c":110:1)
#loc89 = loc("CWE126_Buffer_Overread__CWE129_rand_42.c":99:9)
#loc90 = loc("CWE126_Buffer_Overread__CWE129_rand_42.c":99:30)
#loc91 = loc("CWE126_Buffer_Overread__CWE129_rand_42.c":94:5)
#loc92 = loc("CWE126_Buffer_Overread__CWE129_rand_42.c":94:9)
#loc93 = loc("CWE126_Buffer_Overread__CWE129_rand_42.c":96:13)
#loc94 = loc("CWE126_Buffer_Overread__CWE129_rand_42.c":96:12)
#loc95 = loc("CWE126_Buffer_Overread__CWE129_rand_42.c":96:5)
#loc96 = loc("CWE126_Buffer_Overread__CWE129_rand_42.c":97:26)
#loc97 = loc("CWE126_Buffer_Overread__CWE129_rand_42.c":97:12)
#loc98 = loc("CWE126_Buffer_Overread__CWE129_rand_42.c":97:5)
#loc99 = loc("CWE126_Buffer_Overread__CWE129_rand_42.c":97:30)
#loc100 = loc("CWE126_Buffer_Overread__CWE129_rand_42.c":98:5)
#loc101 = loc("CWE126_Buffer_Overread__CWE129_rand_42.c":109:5)
#loc102 = loc("CWE126_Buffer_Overread__CWE129_rand_42.c":101:9)
#loc103 = loc("CWE126_Buffer_Overread__CWE129_rand_42.c":108:9)
#loc104 = loc("CWE126_Buffer_Overread__CWE129_rand_42.c":101:13)
#loc105 = loc("CWE126_Buffer_Overread__CWE129_rand_42.c":101:21)
#loc107 = loc("CWE126_Buffer_Overread__CWE129_rand_42.c":101:26)
#loc108 = loc("CWE126_Buffer_Overread__CWE129_rand_42.c":101:34)
#loc109 = loc("CWE126_Buffer_Overread__CWE129_rand_42.c":101:36)
#loc110 = loc("CWE126_Buffer_Overread__CWE129_rand_42.c":102:9)
#loc111 = loc("CWE126_Buffer_Overread__CWE129_rand_42.c":104:9)
#loc112 = loc("CWE126_Buffer_Overread__CWE129_rand_42.c":106:9)
#loc113 = loc("CWE126_Buffer_Overread__CWE129_rand_42.c":103:33)
#loc114 = loc("CWE126_Buffer_Overread__CWE129_rand_42.c":103:26)
#loc115 = loc("CWE126_Buffer_Overread__CWE129_rand_42.c":103:13)
#loc116 = loc("CWE126_Buffer_Overread__CWE129_rand_42.c":107:13)
#loc117 = loc("CWE126_Buffer_Overread__CWE129_rand_42.c":55:1)
#loc118 = loc("CWE126_Buffer_Overread__CWE129_rand_42.c":61:1)
#loc121 = loc("CWE126_Buffer_Overread__CWE129_rand_42.c":56:1)
#loc122 = loc("CWE126_Buffer_Overread__CWE129_rand_42.c":59:12)
#loc123 = loc("CWE126_Buffer_Overread__CWE129_rand_42.c":59:5)
#loc124 = loc("CWE126_Buffer_Overread__CWE129_rand_42.c":60:12)
#loc125 = loc("CWE126_Buffer_Overread__CWE129_rand_42.c":60:5)
#loc126 = loc("CWE126_Buffer_Overread__CWE129_rand_42.c":63:1)
#loc127 = loc("CWE126_Buffer_Overread__CWE129_rand_42.c":82:1)
#loc128 = loc("CWE126_Buffer_Overread__CWE129_rand_42.c":70:9)
#loc129 = loc("CWE126_Buffer_Overread__CWE129_rand_42.c":70:30)
#loc130 = loc("CWE126_Buffer_Overread__CWE129_rand_42.c":65:5)
#loc131 = loc("CWE126_Buffer_Overread__CWE129_rand_42.c":65:9)
#loc132 = loc("CWE126_Buffer_Overread__CWE129_rand_42.c":67:13)
#loc133 = loc("CWE126_Buffer_Overread__CWE129_rand_42.c":67:12)
#loc134 = loc("CWE126_Buffer_Overread__CWE129_rand_42.c":67:5)
#loc135 = loc("CWE126_Buffer_Overread__CWE129_rand_42.c":68:26)
#loc136 = loc("CWE126_Buffer_Overread__CWE129_rand_42.c":68:12)
#loc137 = loc("CWE126_Buffer_Overread__CWE129_rand_42.c":68:5)
#loc138 = loc("CWE126_Buffer_Overread__CWE129_rand_42.c":68:30)
#loc139 = loc("CWE126_Buffer_Overread__CWE129_rand_42.c":69:5)
#loc140 = loc("CWE126_Buffer_Overread__CWE129_rand_42.c":81:5)
#loc141 = loc("CWE126_Buffer_Overread__CWE129_rand_42.c":73:9)
#loc142 = loc("CWE126_Buffer_Overread__CWE129_rand_42.c":80:9)
#loc143 = loc("CWE126_Buffer_Overread__CWE129_rand_42.c":73:13)
#loc144 = loc("CWE126_Buffer_Overread__CWE129_rand_42.c":73:21)
#loc145 = loc("CWE126_Buffer_Overread__CWE129_rand_42.c":74:9)
#loc146 = loc("CWE126_Buffer_Overread__CWE129_rand_42.c":76:9)
#loc147 = loc("CWE126_Buffer_Overread__CWE129_rand_42.c":78:9)
#loc148 = loc("CWE126_Buffer_Overread__CWE129_rand_42.c":75:33)
#loc149 = loc("CWE126_Buffer_Overread__CWE129_rand_42.c":75:26)
#loc150 = loc("CWE126_Buffer_Overread__CWE129_rand_42.c":75:13)
#loc151 = loc("CWE126_Buffer_Overread__CWE129_rand_42.c":79:23)
#loc152 = loc("CWE126_Buffer_Overread__CWE129_rand_42.c":79:13)
#loc153 = loc(fused[#loc1, #loc2])
#loc154 = loc(fused[#loc3, #loc4])
#loc156 = loc(fused[#loc9, #loc8])
#loc157 = loc(fused[#loc11, #loc10])
#loc158 = loc(fused[#loc12, #loc13])
#loc159 = loc(fused[#loc14, #loc15])
#loc160 = loc(fused[#loc17, #loc18])
#loc161 = loc(fused[#loc19, #loc20])
#loc162 = loc(fused[#loc21, #loc22])
#loc163 = loc(fused[#loc25, #loc23])
#loc164 = loc(fused[#loc28, #loc29])
#loc165 = loc(fused[#loc30, #loc31])
#loc166 = loc(fused[#loc32, #loc33])
#loc167 = loc(fused[#loc34, #loc35])
#loc168 = loc(fused[#loc36, #loc37, #loc38, #loc33])
#loc169 = loc(fused[#loc43, #loc44])
#loc170 = loc(fused[#loc45, #loc46])
#loc171 = loc(fused[#loc47, #loc48])
#loc172 = loc(fused[#loc49, #loc50])
#loc173 = loc(fused[#loc51, #loc52])
#loc174 = loc(fused[#loc57, #loc58])
#loc177 = loc(fused[#loc68, #loc69])
#loc178 = loc(fused[#loc72, #loc73])
#loc179 = loc(fused[#loc76, #loc75])
#loc180 = loc(fused[#loc77, #loc78])
#loc182 = loc(fused[#loc83, #loc82])
#loc183 = loc(fused[#loc85, #loc84])
#loc184 = loc(fused[#loc87, #loc88])
#loc185 = loc(fused[#loc89, #loc90])
#loc186 = loc(fused[#loc91, #loc92])
#loc187 = loc(fused[#loc95, #loc93])
#loc188 = loc(fused[#loc98, #loc99])
#loc189 = loc(fused[#loc100, #loc101])
#loc190 = loc(fused[#loc102, #loc103])
#loc191 = loc(fused[#loc104, #loc105])
#loc192 = loc(fused[#loc107, #loc109])
#loc193 = loc(fused[#loc110, #loc111, #loc112, #loc103])
#loc194 = loc(fused[#loc117, #loc118])
#loc196 = loc(fused[#loc123, #loc122])
#loc197 = loc(fused[#loc125, #loc124])
#loc198 = loc(fused[#loc126, #loc127])
#loc199 = loc(fused[#loc128, #loc129])
#loc200 = loc(fused[#loc130, #loc131])
#loc201 = loc(fused[#loc134, #loc132])
#loc202 = loc(fused[#loc137, #loc138])
#loc203 = loc(fused[#loc139, #loc140])
#loc204 = loc(fused[#loc141, #loc142])
#loc205 = loc(fused[#loc143, #loc144])
#loc206 = loc(fused[#loc145, #loc146, #loc147, #loc142])
