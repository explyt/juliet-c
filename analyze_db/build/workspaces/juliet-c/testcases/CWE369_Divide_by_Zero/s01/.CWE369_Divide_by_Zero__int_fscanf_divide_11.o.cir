!s32i = !cir.int<s, 32>
!s64i = !cir.int<s, 64>
!s8i = !cir.int<s, 8>
!ty__IO_codecvt = !cir.record<struct "_IO_codecvt" incomplete>
!ty__IO_marker = !cir.record<struct "_IO_marker" incomplete>
!ty__IO_wide_data = !cir.record<struct "_IO_wide_data" incomplete>
!u16i = !cir.int<u, 16>
!u64i = !cir.int<u, 64>
!void = !cir.void
#fn_attr = #cir<extra({inline = #cir.inline<no>, nothrow = #cir.nothrow, optnone = #cir.optnone, uwtable = #cir.uwtable<async>})>
!ty__IO_FILE = !cir.record<struct "_IO_FILE" {!s32i, !cir.ptr<!s8i>, !cir.ptr<!s8i>, !cir.ptr<!s8i>, !cir.ptr<!s8i>, !cir.ptr<!s8i>, !cir.ptr<!s8i>, !cir.ptr<!s8i>, !cir.ptr<!s8i>, !cir.ptr<!s8i>, !cir.ptr<!s8i>, !cir.ptr<!s8i>, !cir.ptr<!ty__IO_marker>, !cir.ptr<!cir.record<struct "_IO_FILE">>, !s32i, !s32i, !s64i, !u16i, !s8i, !cir.array<!s8i x 1>, !cir.ptr<!void>, !s64i, !cir.ptr<!ty__IO_codecvt>, !cir.ptr<!ty__IO_wide_data>, !cir.ptr<!cir.record<struct "_IO_FILE">>, !cir.ptr<!void>, !u64i, !s32i, !cir.array<!s8i x 20>} #cir.record.decl.ast>
module @"/workspaces/juliet-c/testcases/CWE369_Divide_by_Zero/s01/CWE369_Divide_by_Zero__int_fscanf_divide_11.c" attributes {cir.lang = #cir.lang<c>, cir.sob = #cir.signed_overflow_behavior<undefined>, cir.triple = "x86_64-unknown-linux-gnu", cir.type_size_info = #cir.type_size_info<char = 8, int = 32, size_t = 64>, cir.uwtable = #cir.uwtable<async>, dlti.dl_spec = #dlti.dl_spec<f64 = dense<64> : vector<2xi64>, f128 = dense<128> : vector<2xi64>, f16 = dense<16> : vector<2xi64>, i32 = dense<32> : vector<2xi64>, i16 = dense<16> : vector<2xi64>, i8 = dense<8> : vector<2xi64>, i1 = dense<8> : vector<2xi64>, !llvm.ptr = dense<64> : vector<4xi64>, !llvm.ptr<270> = dense<32> : vector<4xi64>, f80 = dense<128> : vector<2xi64>, i128 = dense<128> : vector<2xi64>, i64 = dense<64> : vector<2xi64>, !llvm.ptr<272> = dense<64> : vector<4xi64>, !llvm.ptr<271> = dense<32> : vector<4xi64>, "dlti.endianness" = "little", "dlti.stack_alignment" = 128 : i64, "dlti.mangling_mode" = "e">} {
  cir.func no_proto private @globalReturnsTrue(...) -> !s32i loc(#loc162)
  cir.func private @__isoc99_fscanf(!cir.ptr<!ty__IO_FILE>, !cir.ptr<!s8i>, ...) -> !s32i loc(#loc163)
  cir.global "private" external @stdin : !cir.ptr<!ty__IO_FILE> {alignment = 8 : i64} loc(#loc164)
  cir.global "private" constant cir_private dsolocal @".str" = #cir.const_array<"%d\00" : !cir.array<!s8i x 3>> : !cir.array<!s8i x 3> {alignment = 1 : i64} loc(#loc7)
  cir.func private @printIntLine(!s32i) loc(#loc165)
  cir.func no_proto @CWE369_Divide_by_Zero__int_fscanf_divide_11_bad() extra(#fn_attr) {
    %0 = cir.alloca !s32i, !cir.ptr<!s32i>, ["data"] {alignment = 4 : i64} loc(#loc167)
    %1 = cir.const #cir.int<1> : !s32i loc(#loc14)
    %2 = cir.unary(minus, %1) nsw : !s32i, !s32i loc(#loc15)
    cir.store %2, %0 : !s32i, !cir.ptr<!s32i> loc(#loc168)
    cir.scope {
      %3 = cir.get_global @globalReturnsTrue : !cir.ptr<!cir.func<(...) -> !s32i>> loc(#loc170)
      %4 = cir.cast(bitcast, %3 : !cir.ptr<!cir.func<(...) -> !s32i>>), !cir.ptr<!cir.func<() -> !s32i>> loc(#loc170)
      %5 = cir.call %4() : (!cir.ptr<!cir.func<() -> !s32i>>) -> !s32i loc(#loc19)
      %6 = cir.cast(int_to_bool, %5 : !s32i), !cir.bool loc(#loc19)
      cir.if %6 {
        %7 = cir.get_global @__isoc99_fscanf : !cir.ptr<!cir.func<(!cir.ptr<!ty__IO_FILE>, !cir.ptr<!s8i>, ...) -> !s32i>> loc(#loc22)
        %8 = cir.get_global @stdin : !cir.ptr<!cir.ptr<!ty__IO_FILE>> loc(#loc164)
        %9 = cir.load %8 : !cir.ptr<!cir.ptr<!ty__IO_FILE>>, !cir.ptr<!ty__IO_FILE> loc(#loc23)
        %10 = cir.get_global @".str" : !cir.ptr<!cir.array<!s8i x 3>> loc(#loc7)
        %11 = cir.cast(array_to_ptrdecay, %10 : !cir.ptr<!cir.array<!s8i x 3>>), !cir.ptr<!s8i> loc(#loc7)
        %12 = cir.call @__isoc99_fscanf(%9, %11, %0) : (!cir.ptr<!ty__IO_FILE>, !cir.ptr<!s8i>, !cir.ptr<!s32i>) -> !s32i loc(#loc22)
      } loc(#loc171)
    } loc(#loc169)
    cir.scope {
      %3 = cir.get_global @globalReturnsTrue : !cir.ptr<!cir.func<(...) -> !s32i>> loc(#loc173)
      %4 = cir.cast(bitcast, %3 : !cir.ptr<!cir.func<(...) -> !s32i>>), !cir.ptr<!cir.func<() -> !s32i>> loc(#loc173)
      %5 = cir.call %4() : (!cir.ptr<!cir.func<() -> !s32i>>) -> !s32i loc(#loc26)
      %6 = cir.cast(int_to_bool, %5 : !s32i), !cir.bool loc(#loc26)
      cir.if %6 {
        %7 = cir.const #cir.int<100> : !s32i loc(#loc29)
        %8 = cir.load %0 : !cir.ptr<!s32i>, !s32i loc(#loc30)
        %9 = cir.binop(div, %7, %8) : !s32i loc(#loc175)
        cir.call @printIntLine(%9) : (!s32i) -> () loc(#loc31)
      } loc(#loc174)
    } loc(#loc172)
    cir.return loc(#loc11)
  } loc(#loc166)
  cir.func no_proto @CWE369_Divide_by_Zero__int_fscanf_divide_11_good() extra(#fn_attr) {
    %0 = cir.get_global @goodB2G1 : !cir.ptr<!cir.func<()>> loc(#loc177)
    cir.call %0() : (!cir.ptr<!cir.func<()>>) -> () loc(#loc34)
    %1 = cir.get_global @goodB2G2 : !cir.ptr<!cir.func<()>> loc(#loc178)
    cir.call %1() : (!cir.ptr<!cir.func<()>>) -> () loc(#loc36)
    %2 = cir.get_global @goodG2B1 : !cir.ptr<!cir.func<()>> loc(#loc179)
    cir.call %2() : (!cir.ptr<!cir.func<()>>) -> () loc(#loc38)
    %3 = cir.get_global @goodG2B2 : !cir.ptr<!cir.func<()>> loc(#loc180)
    cir.call %3() : (!cir.ptr<!cir.func<()>>) -> () loc(#loc40)
    cir.return loc(#loc33)
  } loc(#loc176)
  cir.func no_proto private @globalReturnsFalse(...) -> !s32i loc(#loc181)
  cir.func private @printLine(!cir.ptr<!s8i>) loc(#loc182)
  cir.global "private" constant cir_private dsolocal @".str.1" = #cir.const_array<"Benign, fixed string\00" : !cir.array<!s8i x 21>> : !cir.array<!s8i x 21> {alignment = 1 : i64} loc(#loc46)
  cir.global "private" constant cir_private dsolocal @".str.2" = #cir.const_array<"This would result in a divide by zero\00" : !cir.array<!s8i x 38>> : !cir.array<!s8i x 38> {alignment = 1 : i64} loc(#loc47)
  cir.func no_proto internal private @goodB2G1() extra(#fn_attr) {
    %0 = cir.alloca !s32i, !cir.ptr<!s32i>, ["data"] {alignment = 4 : i64} loc(#loc184)
    %1 = cir.const #cir.int<1> : !s32i loc(#loc52)
    %2 = cir.unary(minus, %1) nsw : !s32i, !s32i loc(#loc53)
    cir.store %2, %0 : !s32i, !cir.ptr<!s32i> loc(#loc185)
    cir.scope {
      %3 = cir.get_global @globalReturnsTrue : !cir.ptr<!cir.func<(...) -> !s32i>> loc(#loc187)
      %4 = cir.cast(bitcast, %3 : !cir.ptr<!cir.func<(...) -> !s32i>>), !cir.ptr<!cir.func<() -> !s32i>> loc(#loc187)
      %5 = cir.call %4() : (!cir.ptr<!cir.func<() -> !s32i>>) -> !s32i loc(#loc57)
      %6 = cir.cast(int_to_bool, %5 : !s32i), !cir.bool loc(#loc57)
      cir.if %6 {
        %7 = cir.get_global @__isoc99_fscanf : !cir.ptr<!cir.func<(!cir.ptr<!ty__IO_FILE>, !cir.ptr<!s8i>, ...) -> !s32i>> loc(#loc60)
        %8 = cir.get_global @stdin : !cir.ptr<!cir.ptr<!ty__IO_FILE>> loc(#loc164)
        %9 = cir.load %8 : !cir.ptr<!cir.ptr<!ty__IO_FILE>>, !cir.ptr<!ty__IO_FILE> loc(#loc61)
        %10 = cir.get_global @".str" : !cir.ptr<!cir.array<!s8i x 3>> loc(#loc62)
        %11 = cir.cast(array_to_ptrdecay, %10 : !cir.ptr<!cir.array<!s8i x 3>>), !cir.ptr<!s8i> loc(#loc62)
        %12 = cir.call @__isoc99_fscanf(%9, %11, %0) : (!cir.ptr<!ty__IO_FILE>, !cir.ptr<!s8i>, !cir.ptr<!s32i>) -> !s32i loc(#loc60)
      } loc(#loc188)
    } loc(#loc186)
    cir.scope {
      %3 = cir.get_global @globalReturnsFalse : !cir.ptr<!cir.func<(...) -> !s32i>> loc(#loc190)
      %4 = cir.cast(bitcast, %3 : !cir.ptr<!cir.func<(...) -> !s32i>>), !cir.ptr<!cir.func<() -> !s32i>> loc(#loc190)
      %5 = cir.call %4() : (!cir.ptr<!cir.func<() -> !s32i>>) -> !s32i loc(#loc65)
      %6 = cir.cast(int_to_bool, %5 : !s32i), !cir.bool loc(#loc65)
      cir.if %6 {
        %7 = cir.get_global @".str.1" : !cir.ptr<!cir.array<!s8i x 21>> loc(#loc46)
        %8 = cir.cast(array_to_ptrdecay, %7 : !cir.ptr<!cir.array<!s8i x 21>>), !cir.ptr<!s8i> loc(#loc46)
        cir.call @printLine(%8) : (!cir.ptr<!s8i>) -> () loc(#loc70)
      } else {
        cir.scope {
          %7 = cir.load %0 : !cir.ptr<!s32i>, !s32i loc(#loc73)
          %8 = cir.const #cir.int<0> : !s32i loc(#loc74)
          %9 = cir.cmp(ne, %7, %8) : !s32i, !cir.bool loc(#loc193)
          cir.if %9 {
            %10 = cir.const #cir.int<100> : !s32i loc(#loc78)
            %11 = cir.load %0 : !cir.ptr<!s32i>, !s32i loc(#loc79)
            %12 = cir.binop(div, %10, %11) : !s32i loc(#loc195)
            cir.call @printIntLine(%12) : (!s32i) -> () loc(#loc80)
          } else {
            %10 = cir.get_global @".str.2" : !cir.ptr<!cir.array<!s8i x 38>> loc(#loc47)
            %11 = cir.cast(array_to_ptrdecay, %10 : !cir.ptr<!cir.array<!s8i x 38>>), !cir.ptr<!s8i> loc(#loc47)
            cir.call @printLine(%11) : (!cir.ptr<!s8i>) -> () loc(#loc81)
          } loc(#loc194)
        } loc(#loc192)
      } loc(#loc191)
    } loc(#loc189)
    cir.return loc(#loc49)
  } loc(#loc183)
  cir.func no_proto internal private @goodB2G2() extra(#fn_attr) {
    %0 = cir.alloca !s32i, !cir.ptr<!s32i>, ["data"] {alignment = 4 : i64} loc(#loc197)
    %1 = cir.const #cir.int<1> : !s32i loc(#loc86)
    %2 = cir.unary(minus, %1) nsw : !s32i, !s32i loc(#loc87)
    cir.store %2, %0 : !s32i, !cir.ptr<!s32i> loc(#loc198)
    cir.scope {
      %3 = cir.get_global @globalReturnsTrue : !cir.ptr<!cir.func<(...) -> !s32i>> loc(#loc200)
      %4 = cir.cast(bitcast, %3 : !cir.ptr<!cir.func<(...) -> !s32i>>), !cir.ptr<!cir.func<() -> !s32i>> loc(#loc200)
      %5 = cir.call %4() : (!cir.ptr<!cir.func<() -> !s32i>>) -> !s32i loc(#loc91)
      %6 = cir.cast(int_to_bool, %5 : !s32i), !cir.bool loc(#loc91)
      cir.if %6 {
        %7 = cir.get_global @__isoc99_fscanf : !cir.ptr<!cir.func<(!cir.ptr<!ty__IO_FILE>, !cir.ptr<!s8i>, ...) -> !s32i>> loc(#loc94)
        %8 = cir.get_global @stdin : !cir.ptr<!cir.ptr<!ty__IO_FILE>> loc(#loc164)
        %9 = cir.load %8 : !cir.ptr<!cir.ptr<!ty__IO_FILE>>, !cir.ptr<!ty__IO_FILE> loc(#loc95)
        %10 = cir.get_global @".str" : !cir.ptr<!cir.array<!s8i x 3>> loc(#loc96)
        %11 = cir.cast(array_to_ptrdecay, %10 : !cir.ptr<!cir.array<!s8i x 3>>), !cir.ptr<!s8i> loc(#loc96)
        %12 = cir.call @__isoc99_fscanf(%9, %11, %0) : (!cir.ptr<!ty__IO_FILE>, !cir.ptr<!s8i>, !cir.ptr<!s32i>) -> !s32i loc(#loc94)
      } loc(#loc201)
    } loc(#loc199)
    cir.scope {
      %3 = cir.get_global @globalReturnsTrue : !cir.ptr<!cir.func<(...) -> !s32i>> loc(#loc203)
      %4 = cir.cast(bitcast, %3 : !cir.ptr<!cir.func<(...) -> !s32i>>), !cir.ptr<!cir.func<() -> !s32i>> loc(#loc203)
      %5 = cir.call %4() : (!cir.ptr<!cir.func<() -> !s32i>>) -> !s32i loc(#loc99)
      %6 = cir.cast(int_to_bool, %5 : !s32i), !cir.bool loc(#loc99)
      cir.if %6 {
        cir.scope {
          %7 = cir.load %0 : !cir.ptr<!s32i>, !s32i loc(#loc104)
          %8 = cir.const #cir.int<0> : !s32i loc(#loc105)
          %9 = cir.cmp(ne, %7, %8) : !s32i, !cir.bool loc(#loc206)
          cir.if %9 {
            %10 = cir.const #cir.int<100> : !s32i loc(#loc109)
            %11 = cir.load %0 : !cir.ptr<!s32i>, !s32i loc(#loc110)
            %12 = cir.binop(div, %10, %11) : !s32i loc(#loc208)
            cir.call @printIntLine(%12) : (!s32i) -> () loc(#loc111)
          } else {
            %10 = cir.get_global @".str.2" : !cir.ptr<!cir.array<!s8i x 38>> loc(#loc112)
            %11 = cir.cast(array_to_ptrdecay, %10 : !cir.ptr<!cir.array<!s8i x 38>>), !cir.ptr<!s8i> loc(#loc112)
            cir.call @printLine(%11) : (!cir.ptr<!s8i>) -> () loc(#loc113)
          } loc(#loc207)
        } loc(#loc205)
      } loc(#loc204)
    } loc(#loc202)
    cir.return loc(#loc83)
  } loc(#loc196)
  cir.func no_proto internal private @goodG2B1() extra(#fn_attr) {
    %0 = cir.alloca !s32i, !cir.ptr<!s32i>, ["data"] {alignment = 4 : i64} loc(#loc210)
    %1 = cir.const #cir.int<1> : !s32i loc(#loc118)
    %2 = cir.unary(minus, %1) nsw : !s32i, !s32i loc(#loc119)
    cir.store %2, %0 : !s32i, !cir.ptr<!s32i> loc(#loc211)
    cir.scope {
      %3 = cir.get_global @globalReturnsFalse : !cir.ptr<!cir.func<(...) -> !s32i>> loc(#loc213)
      %4 = cir.cast(bitcast, %3 : !cir.ptr<!cir.func<(...) -> !s32i>>), !cir.ptr<!cir.func<() -> !s32i>> loc(#loc213)
      %5 = cir.call %4() : (!cir.ptr<!cir.func<() -> !s32i>>) -> !s32i loc(#loc123)
      %6 = cir.cast(int_to_bool, %5 : !s32i), !cir.bool loc(#loc123)
      cir.if %6 {
        %7 = cir.get_global @".str.1" : !cir.ptr<!cir.array<!s8i x 21>> loc(#loc128)
        %8 = cir.cast(array_to_ptrdecay, %7 : !cir.ptr<!cir.array<!s8i x 21>>), !cir.ptr<!s8i> loc(#loc128)
        cir.call @printLine(%8) : (!cir.ptr<!s8i>) -> () loc(#loc129)
      } else {
        %7 = cir.const #cir.int<7> : !s32i loc(#loc130)
        cir.store %7, %0 : !s32i, !cir.ptr<!s32i> loc(#loc215)
      } loc(#loc214)
    } loc(#loc212)
    cir.scope {
      %3 = cir.get_global @globalReturnsTrue : !cir.ptr<!cir.func<(...) -> !s32i>> loc(#loc217)
      %4 = cir.cast(bitcast, %3 : !cir.ptr<!cir.func<(...) -> !s32i>>), !cir.ptr<!cir.func<() -> !s32i>> loc(#loc217)
      %5 = cir.call %4() : (!cir.ptr<!cir.func<() -> !s32i>>) -> !s32i loc(#loc134)
      %6 = cir.cast(int_to_bool, %5 : !s32i), !cir.bool loc(#loc134)
      cir.if %6 {
        %7 = cir.const #cir.int<100> : !s32i loc(#loc137)
        %8 = cir.load %0 : !cir.ptr<!s32i>, !s32i loc(#loc138)
        %9 = cir.binop(div, %7, %8) : !s32i loc(#loc219)
        cir.call @printIntLine(%9) : (!s32i) -> () loc(#loc139)
      } loc(#loc218)
    } loc(#loc216)
    cir.return loc(#loc115)
  } loc(#loc209)
  cir.func no_proto internal private @goodG2B2() extra(#fn_attr) {
    %0 = cir.alloca !s32i, !cir.ptr<!s32i>, ["data"] {alignment = 4 : i64} loc(#loc221)
    %1 = cir.const #cir.int<1> : !s32i loc(#loc144)
    %2 = cir.unary(minus, %1) nsw : !s32i, !s32i loc(#loc145)
    cir.store %2, %0 : !s32i, !cir.ptr<!s32i> loc(#loc222)
    cir.scope {
      %3 = cir.get_global @globalReturnsTrue : !cir.ptr<!cir.func<(...) -> !s32i>> loc(#loc224)
      %4 = cir.cast(bitcast, %3 : !cir.ptr<!cir.func<(...) -> !s32i>>), !cir.ptr<!cir.func<() -> !s32i>> loc(#loc224)
      %5 = cir.call %4() : (!cir.ptr<!cir.func<() -> !s32i>>) -> !s32i loc(#loc149)
      %6 = cir.cast(int_to_bool, %5 : !s32i), !cir.bool loc(#loc149)
      cir.if %6 {
        %7 = cir.const #cir.int<7> : !s32i loc(#loc152)
        cir.store %7, %0 : !s32i, !cir.ptr<!s32i> loc(#loc226)
      } loc(#loc225)
    } loc(#loc223)
    cir.scope {
      %3 = cir.get_global @globalReturnsTrue : !cir.ptr<!cir.func<(...) -> !s32i>> loc(#loc228)
      %4 = cir.cast(bitcast, %3 : !cir.ptr<!cir.func<(...) -> !s32i>>), !cir.ptr<!cir.func<() -> !s32i>> loc(#loc228)
      %5 = cir.call %4() : (!cir.ptr<!cir.func<() -> !s32i>>) -> !s32i loc(#loc156)
      %6 = cir.cast(int_to_bool, %5 : !s32i), !cir.bool loc(#loc156)
      cir.if %6 {
        %7 = cir.const #cir.int<100> : !s32i loc(#loc159)
        %8 = cir.load %0 : !cir.ptr<!s32i>, !s32i loc(#loc160)
        %9 = cir.binop(div, %7, %8) : !s32i loc(#loc230)
        cir.call @printIntLine(%9) : (!s32i) -> () loc(#loc161)
      } loc(#loc229)
    } loc(#loc227)
    cir.return loc(#loc141)
  } loc(#loc220)
} loc(#loc)
#loc = loc("/workspaces/juliet-c/testcases/CWE369_Divide_by_Zero/s01/CWE369_Divide_by_Zero__int_fscanf_divide_11.c":0:0)
#loc1 = loc("../../../testcasesupport/std_testcase_io.h":48:1)
#loc2 = loc("../../../testcasesupport/std_testcase_io.h":48:23)
#loc3 = loc("/usr/include/stdio.h":463:1)
#loc4 = loc("/usr/include/stdio.h":465:33)
#loc5 = loc("/usr/include/stdio.h":149:1)
#loc6 = loc("/usr/include/stdio.h":149:14)
#loc7 = loc("CWE369_Divide_by_Zero__int_fscanf_divide_11.c":30:23)
#loc8 = loc("../../../testcasesupport/std_testcase_io.h":18:1)
#loc9 = loc("../../../testcasesupport/std_testcase_io.h":18:33)
#loc10 = loc("CWE369_Divide_by_Zero__int_fscanf_divide_11.c":22:1)
#loc11 = loc("CWE369_Divide_by_Zero__int_fscanf_divide_11.c":37:1)
#loc12 = loc("CWE369_Divide_by_Zero__int_fscanf_divide_11.c":24:5)
#loc13 = loc("CWE369_Divide_by_Zero__int_fscanf_divide_11.c":24:9)
#loc14 = loc("CWE369_Divide_by_Zero__int_fscanf_divide_11.c":26:13)
#loc15 = loc("CWE369_Divide_by_Zero__int_fscanf_divide_11.c":26:12)
#loc16 = loc("CWE369_Divide_by_Zero__int_fscanf_divide_11.c":26:5)
#loc17 = loc("CWE369_Divide_by_Zero__int_fscanf_divide_11.c":27:5)
#loc18 = loc("CWE369_Divide_by_Zero__int_fscanf_divide_11.c":31:5)
#loc19 = loc("CWE369_Divide_by_Zero__int_fscanf_divide_11.c":27:8)
#loc20 = loc("CWE369_Divide_by_Zero__int_fscanf_divide_11.c":27:26)
#loc21 = loc("CWE369_Divide_by_Zero__int_fscanf_divide_11.c":28:5)
#loc22 = loc("CWE369_Divide_by_Zero__int_fscanf_divide_11.c":30:9)
#loc23 = loc("CWE369_Divide_by_Zero__int_fscanf_divide_11.c":30:16)
#loc24 = loc("CWE369_Divide_by_Zero__int_fscanf_divide_11.c":32:5)
#loc25 = loc("CWE369_Divide_by_Zero__int_fscanf_divide_11.c":36:5)
#loc26 = loc("CWE369_Divide_by_Zero__int_fscanf_divide_11.c":32:8)
#loc27 = loc("CWE369_Divide_by_Zero__int_fscanf_divide_11.c":32:26)
#loc28 = loc("CWE369_Divide_by_Zero__int_fscanf_divide_11.c":33:5)
#loc29 = loc("CWE369_Divide_by_Zero__int_fscanf_divide_11.c":35:22)
#loc30 = loc("CWE369_Divide_by_Zero__int_fscanf_divide_11.c":35:28)
#loc31 = loc("CWE369_Divide_by_Zero__int_fscanf_divide_11.c":35:9)
#loc32 = loc("CWE369_Divide_by_Zero__int_fscanf_divide_11.c":139:1)
#loc33 = loc("CWE369_Divide_by_Zero__int_fscanf_divide_11.c":145:1)
#loc34 = loc("CWE369_Divide_by_Zero__int_fscanf_divide_11.c":141:5)
#loc35 = loc("CWE369_Divide_by_Zero__int_fscanf_divide_11.c":141:14)
#loc36 = loc("CWE369_Divide_by_Zero__int_fscanf_divide_11.c":142:5)
#loc37 = loc("CWE369_Divide_by_Zero__int_fscanf_divide_11.c":142:14)
#loc38 = loc("CWE369_Divide_by_Zero__int_fscanf_divide_11.c":143:5)
#loc39 = loc("CWE369_Divide_by_Zero__int_fscanf_divide_11.c":143:14)
#loc40 = loc("CWE369_Divide_by_Zero__int_fscanf_divide_11.c":144:5)
#loc41 = loc("CWE369_Divide_by_Zero__int_fscanf_divide_11.c":144:14)
#loc42 = loc("../../../testcasesupport/std_testcase_io.h":50:1)
#loc43 = loc("../../../testcasesupport/std_testcase_io.h":50:24)
#loc44 = loc("../../../testcasesupport/std_testcase_io.h":14:1)
#loc45 = loc("../../../testcasesupport/std_testcase_io.h":14:33)
#loc46 = loc("CWE369_Divide_by_Zero__int_fscanf_divide_11.c":57:19)
#loc47 = loc("CWE369_Divide_by_Zero__int_fscanf_divide_11.c":68:23)
#loc48 = loc("CWE369_Divide_by_Zero__int_fscanf_divide_11.c":44:1)
#loc49 = loc("CWE369_Divide_by_Zero__int_fscanf_divide_11.c":71:1)
#loc50 = loc("CWE369_Divide_by_Zero__int_fscanf_divide_11.c":46:5)
#loc51 = loc("CWE369_Divide_by_Zero__int_fscanf_divide_11.c":46:9)
#loc52 = loc("CWE369_Divide_by_Zero__int_fscanf_divide_11.c":48:13)
#loc53 = loc("CWE369_Divide_by_Zero__int_fscanf_divide_11.c":48:12)
#loc54 = loc("CWE369_Divide_by_Zero__int_fscanf_divide_11.c":48:5)
#loc55 = loc("CWE369_Divide_by_Zero__int_fscanf_divide_11.c":49:5)
#loc56 = loc("CWE369_Divide_by_Zero__int_fscanf_divide_11.c":53:5)
#loc57 = loc("CWE369_Divide_by_Zero__int_fscanf_divide_11.c":49:8)
#loc58 = loc("CWE369_Divide_by_Zero__int_fscanf_divide_11.c":49:26)
#loc59 = loc("CWE369_Divide_by_Zero__int_fscanf_divide_11.c":50:5)
#loc60 = loc("CWE369_Divide_by_Zero__int_fscanf_divide_11.c":52:9)
#loc61 = loc("CWE369_Divide_by_Zero__int_fscanf_divide_11.c":52:16)
#loc62 = loc("CWE369_Divide_by_Zero__int_fscanf_divide_11.c":52:23)
#loc63 = loc("CWE369_Divide_by_Zero__int_fscanf_divide_11.c":54:5)
#loc64 = loc("CWE369_Divide_by_Zero__int_fscanf_divide_11.c":70:5)
#loc65 = loc("CWE369_Divide_by_Zero__int_fscanf_divide_11.c":54:8)
#loc66 = loc("CWE369_Divide_by_Zero__int_fscanf_divide_11.c":54:27)
#loc67 = loc("CWE369_Divide_by_Zero__int_fscanf_divide_11.c":55:5)
#loc68 = loc("CWE369_Divide_by_Zero__int_fscanf_divide_11.c":58:5)
#loc69 = loc("CWE369_Divide_by_Zero__int_fscanf_divide_11.c":60:5)
#loc70 = loc("CWE369_Divide_by_Zero__int_fscanf_divide_11.c":57:9)
#loc71 = loc("CWE369_Divide_by_Zero__int_fscanf_divide_11.c":62:9)
#loc72 = loc("CWE369_Divide_by_Zero__int_fscanf_divide_11.c":69:9)
#loc73 = loc("CWE369_Divide_by_Zero__int_fscanf_divide_11.c":62:13)
#loc74 = loc("CWE369_Divide_by_Zero__int_fscanf_divide_11.c":62:21)
#loc75 = loc("CWE369_Divide_by_Zero__int_fscanf_divide_11.c":63:9)
#loc76 = loc("CWE369_Divide_by_Zero__int_fscanf_divide_11.c":65:9)
#loc77 = loc("CWE369_Divide_by_Zero__int_fscanf_divide_11.c":67:9)
#loc78 = loc("CWE369_Divide_by_Zero__int_fscanf_divide_11.c":64:26)
#loc79 = loc("CWE369_Divide_by_Zero__int_fscanf_divide_11.c":64:32)
#loc80 = loc("CWE369_Divide_by_Zero__int_fscanf_divide_11.c":64:13)
#loc81 = loc("CWE369_Divide_by_Zero__int_fscanf_divide_11.c":68:13)
#loc82 = loc("CWE369_Divide_by_Zero__int_fscanf_divide_11.c":74:1)
#loc83 = loc("CWE369_Divide_by_Zero__int_fscanf_divide_11.c":96:1)
#loc84 = loc("CWE369_Divide_by_Zero__int_fscanf_divide_11.c":76:5)
#loc85 = loc("CWE369_Divide_by_Zero__int_fscanf_divide_11.c":76:9)
#loc86 = loc("CWE369_Divide_by_Zero__int_fscanf_divide_11.c":78:13)
#loc87 = loc("CWE369_Divide_by_Zero__int_fscanf_divide_11.c":78:12)
#loc88 = loc("CWE369_Divide_by_Zero__int_fscanf_divide_11.c":78:5)
#loc89 = loc("CWE369_Divide_by_Zero__int_fscanf_divide_11.c":79:5)
#loc90 = loc("CWE369_Divide_by_Zero__int_fscanf_divide_11.c":83:5)
#loc91 = loc("CWE369_Divide_by_Zero__int_fscanf_divide_11.c":79:8)
#loc92 = loc("CWE369_Divide_by_Zero__int_fscanf_divide_11.c":79:26)
#loc93 = loc("CWE369_Divide_by_Zero__int_fscanf_divide_11.c":80:5)
#loc94 = loc("CWE369_Divide_by_Zero__int_fscanf_divide_11.c":82:9)
#loc95 = loc("CWE369_Divide_by_Zero__int_fscanf_divide_11.c":82:16)
#loc96 = loc("CWE369_Divide_by_Zero__int_fscanf_divide_11.c":82:23)
#loc97 = loc("CWE369_Divide_by_Zero__int_fscanf_divide_11.c":84:5)
#loc98 = loc("CWE369_Divide_by_Zero__int_fscanf_divide_11.c":95:5)
#loc99 = loc("CWE369_Divide_by_Zero__int_fscanf_divide_11.c":84:8)
#loc100 = loc("CWE369_Divide_by_Zero__int_fscanf_divide_11.c":84:26)
#loc101 = loc("CWE369_Divide_by_Zero__int_fscanf_divide_11.c":85:5)
#loc102 = loc("CWE369_Divide_by_Zero__int_fscanf_divide_11.c":87:9)
#loc103 = loc("CWE369_Divide_by_Zero__int_fscanf_divide_11.c":94:9)
#loc104 = loc("CWE369_Divide_by_Zero__int_fscanf_divide_11.c":87:13)
#loc105 = loc("CWE369_Divide_by_Zero__int_fscanf_divide_11.c":87:21)
#loc106 = loc("CWE369_Divide_by_Zero__int_fscanf_divide_11.c":88:9)
#loc107 = loc("CWE369_Divide_by_Zero__int_fscanf_divide_11.c":90:9)
#loc108 = loc("CWE369_Divide_by_Zero__int_fscanf_divide_11.c":92:9)
#loc109 = loc("CWE369_Divide_by_Zero__int_fscanf_divide_11.c":89:26)
#loc110 = loc("CWE369_Divide_by_Zero__int_fscanf_divide_11.c":89:32)
#loc111 = loc("CWE369_Divide_by_Zero__int_fscanf_divide_11.c":89:13)
#loc112 = loc("CWE369_Divide_by_Zero__int_fscanf_divide_11.c":93:23)
#loc113 = loc("CWE369_Divide_by_Zero__int_fscanf_divide_11.c":93:13)
#loc114 = loc("CWE369_Divide_by_Zero__int_fscanf_divide_11.c":99:1)
#loc115 = loc("CWE369_Divide_by_Zero__int_fscanf_divide_11.c":119:1)
#loc116 = loc("CWE369_Divide_by_Zero__int_fscanf_divide_11.c":101:5)
#loc117 = loc("CWE369_Divide_by_Zero__int_fscanf_divide_11.c":101:9)
#loc118 = loc("CWE369_Divide_by_Zero__int_fscanf_divide_11.c":103:13)
#loc119 = loc("CWE369_Divide_by_Zero__int_fscanf_divide_11.c":103:12)
#loc120 = loc("CWE369_Divide_by_Zero__int_fscanf_divide_11.c":103:5)
#loc121 = loc("CWE369_Divide_by_Zero__int_fscanf_divide_11.c":104:5)
#loc122 = loc("CWE369_Divide_by_Zero__int_fscanf_divide_11.c":113:5)
#loc123 = loc("CWE369_Divide_by_Zero__int_fscanf_divide_11.c":104:8)
#loc124 = loc("CWE369_Divide_by_Zero__int_fscanf_divide_11.c":104:27)
#loc125 = loc("CWE369_Divide_by_Zero__int_fscanf_divide_11.c":105:5)
#loc126 = loc("CWE369_Divide_by_Zero__int_fscanf_divide_11.c":108:5)
#loc127 = loc("CWE369_Divide_by_Zero__int_fscanf_divide_11.c":110:5)
#loc128 = loc("CWE369_Divide_by_Zero__int_fscanf_divide_11.c":107:19)
#loc129 = loc("CWE369_Divide_by_Zero__int_fscanf_divide_11.c":107:9)
#loc130 = loc("CWE369_Divide_by_Zero__int_fscanf_divide_11.c":112:16)
#loc131 = loc("CWE369_Divide_by_Zero__int_fscanf_divide_11.c":112:9)
#loc132 = loc("CWE369_Divide_by_Zero__int_fscanf_divide_11.c":114:5)
#loc133 = loc("CWE369_Divide_by_Zero__int_fscanf_divide_11.c":118:5)
#loc134 = loc("CWE369_Divide_by_Zero__int_fscanf_divide_11.c":114:8)
#loc135 = loc("CWE369_Divide_by_Zero__int_fscanf_divide_11.c":114:26)
#loc136 = loc("CWE369_Divide_by_Zero__int_fscanf_divide_11.c":115:5)
#loc137 = loc("CWE369_Divide_by_Zero__int_fscanf_divide_11.c":117:22)
#loc138 = loc("CWE369_Divide_by_Zero__int_fscanf_divide_11.c":117:28)
#loc139 = loc("CWE369_Divide_by_Zero__int_fscanf_divide_11.c":117:9)
#loc140 = loc("CWE369_Divide_by_Zero__int_fscanf_divide_11.c":122:1)
#loc141 = loc("CWE369_Divide_by_Zero__int_fscanf_divide_11.c":137:1)
#loc142 = loc("CWE369_Divide_by_Zero__int_fscanf_divide_11.c":124:5)
#loc143 = loc("CWE369_Divide_by_Zero__int_fscanf_divide_11.c":124:9)
#loc144 = loc("CWE369_Divide_by_Zero__int_fscanf_divide_11.c":126:13)
#loc145 = loc("CWE369_Divide_by_Zero__int_fscanf_divide_11.c":126:12)
#loc146 = loc("CWE369_Divide_by_Zero__int_fscanf_divide_11.c":126:5)
#loc147 = loc("CWE369_Divide_by_Zero__int_fscanf_divide_11.c":127:5)
#loc148 = loc("CWE369_Divide_by_Zero__int_fscanf_divide_11.c":131:5)
#loc149 = loc("CWE369_Divide_by_Zero__int_fscanf_divide_11.c":127:8)
#loc150 = loc("CWE369_Divide_by_Zero__int_fscanf_divide_11.c":127:26)
#loc151 = loc("CWE369_Divide_by_Zero__int_fscanf_divide_11.c":128:5)
#loc152 = loc("CWE369_Divide_by_Zero__int_fscanf_divide_11.c":130:16)
#loc153 = loc("CWE369_Divide_by_Zero__int_fscanf_divide_11.c":130:9)
#loc154 = loc("CWE369_Divide_by_Zero__int_fscanf_divide_11.c":132:5)
#loc155 = loc("CWE369_Divide_by_Zero__int_fscanf_divide_11.c":136:5)
#loc156 = loc("CWE369_Divide_by_Zero__int_fscanf_divide_11.c":132:8)
#loc157 = loc("CWE369_Divide_by_Zero__int_fscanf_divide_11.c":132:26)
#loc158 = loc("CWE369_Divide_by_Zero__int_fscanf_divide_11.c":133:5)
#loc159 = loc("CWE369_Divide_by_Zero__int_fscanf_divide_11.c":135:22)
#loc160 = loc("CWE369_Divide_by_Zero__int_fscanf_divide_11.c":135:28)
#loc161 = loc("CWE369_Divide_by_Zero__int_fscanf_divide_11.c":135:9)
#loc162 = loc(fused[#loc1, #loc2])
#loc163 = loc(fused[#loc3, #loc4])
#loc164 = loc(fused[#loc5, #loc6])
#loc165 = loc(fused[#loc8, #loc9])
#loc166 = loc(fused[#loc10, #loc11])
#loc167 = loc(fused[#loc12, #loc13])
#loc168 = loc(fused[#loc16, #loc14])
#loc169 = loc(fused[#loc17, #loc18])
#loc170 = loc(fused[#loc19, #loc20])
#loc171 = loc(fused[#loc21, #loc18])
#loc172 = loc(fused[#loc24, #loc25])
#loc173 = loc(fused[#loc26, #loc27])
#loc174 = loc(fused[#loc28, #loc25])
#loc175 = loc(fused[#loc29, #loc30])
#loc176 = loc(fused[#loc32, #loc33])
#loc177 = loc(fused[#loc34, #loc35])
#loc178 = loc(fused[#loc36, #loc37])
#loc179 = loc(fused[#loc38, #loc39])
#loc180 = loc(fused[#loc40, #loc41])
#loc181 = loc(fused[#loc42, #loc43])
#loc182 = loc(fused[#loc44, #loc45])
#loc183 = loc(fused[#loc48, #loc49])
#loc184 = loc(fused[#loc50, #loc51])
#loc185 = loc(fused[#loc54, #loc52])
#loc186 = loc(fused[#loc55, #loc56])
#loc187 = loc(fused[#loc57, #loc58])
#loc188 = loc(fused[#loc59, #loc56])
#loc189 = loc(fused[#loc63, #loc64])
#loc190 = loc(fused[#loc65, #loc66])
#loc191 = loc(fused[#loc67, #loc68, #loc69, #loc64])
#loc192 = loc(fused[#loc71, #loc72])
#loc193 = loc(fused[#loc73, #loc74])
#loc194 = loc(fused[#loc75, #loc76, #loc77, #loc72])
#loc195 = loc(fused[#loc78, #loc79])
#loc196 = loc(fused[#loc82, #loc83])
#loc197 = loc(fused[#loc84, #loc85])
#loc198 = loc(fused[#loc88, #loc86])
#loc199 = loc(fused[#loc89, #loc90])
#loc200 = loc(fused[#loc91, #loc92])
#loc201 = loc(fused[#loc93, #loc90])
#loc202 = loc(fused[#loc97, #loc98])
#loc203 = loc(fused[#loc99, #loc100])
#loc204 = loc(fused[#loc101, #loc98])
#loc205 = loc(fused[#loc102, #loc103])
#loc206 = loc(fused[#loc104, #loc105])
#loc207 = loc(fused[#loc106, #loc107, #loc108, #loc103])
#loc208 = loc(fused[#loc109, #loc110])
#loc209 = loc(fused[#loc114, #loc115])
#loc210 = loc(fused[#loc116, #loc117])
#loc211 = loc(fused[#loc120, #loc118])
#loc212 = loc(fused[#loc121, #loc122])
#loc213 = loc(fused[#loc123, #loc124])
#loc214 = loc(fused[#loc125, #loc126, #loc127, #loc122])
#loc215 = loc(fused[#loc131, #loc130])
#loc216 = loc(fused[#loc132, #loc133])
#loc217 = loc(fused[#loc134, #loc135])
#loc218 = loc(fused[#loc136, #loc133])
#loc219 = loc(fused[#loc137, #loc138])
#loc220 = loc(fused[#loc140, #loc141])
#loc221 = loc(fused[#loc142, #loc143])
#loc222 = loc(fused[#loc146, #loc144])
#loc223 = loc(fused[#loc147, #loc148])
#loc224 = loc(fused[#loc149, #loc150])
#loc225 = loc(fused[#loc151, #loc148])
#loc226 = loc(fused[#loc153, #loc152])
#loc227 = loc(fused[#loc154, #loc155])
#loc228 = loc(fused[#loc156, #loc157])
#loc229 = loc(fused[#loc158, #loc155])
#loc230 = loc(fused[#loc159, #loc160])
