!s32i = !cir.int<s, 32>
!s8i = !cir.int<s, 8>
#fn_attr = #cir<extra({inline = #cir.inline<no>, nothrow = #cir.nothrow, optnone = #cir.optnone, uwtable = #cir.uwtable<async>})>
module @"/workspaces/juliet-c/testcases/CWE398_Poor_Code_Quality/CWE398_Poor_Code_Quality__empty_while_15.c" attributes {cir.lang = #cir.lang<c>, cir.sob = #cir.signed_overflow_behavior<undefined>, cir.triple = "x86_64-unknown-linux-gnu", cir.type_size_info = #cir.type_size_info<char = 8, int = 32, size_t = 64>, cir.uwtable = #cir.uwtable<async>, dlti.dl_spec = #dlti.dl_spec<!llvm.ptr = dense<64> : vector<4xi64>, !llvm.ptr<270> = dense<32> : vector<4xi64>, f80 = dense<128> : vector<2xi64>, i64 = dense<64> : vector<2xi64>, i128 = dense<128> : vector<2xi64>, !llvm.ptr<271> = dense<32> : vector<4xi64>, !llvm.ptr<272> = dense<64> : vector<4xi64>, f128 = dense<128> : vector<2xi64>, f64 = dense<64> : vector<2xi64>, f16 = dense<16> : vector<2xi64>, i16 = dense<16> : vector<2xi64>, i32 = dense<32> : vector<2xi64>, i1 = dense<8> : vector<2xi64>, i8 = dense<8> : vector<2xi64>, "dlti.mangling_mode" = "e", "dlti.stack_alignment" = 128 : i64, "dlti.endianness" = "little">} {
  cir.func private @printLine(!cir.ptr<!s8i>) loc(#loc84)
  cir.global "private" constant cir_private dsolocal @".str" = #cir.const_array<"Hello from bad()\00" : !cir.array<!s8i x 17>> : !cir.array<!s8i x 17> {alignment = 1 : i64} loc(#loc3)
  cir.global "private" constant cir_private dsolocal @".str.1" = #cir.const_array<"Benign, fixed string\00" : !cir.array<!s8i x 21>> : !cir.array<!s8i x 21> {alignment = 1 : i64} loc(#loc4)
  cir.func no_proto @CWE398_Poor_Code_Quality__empty_while_15_bad() extra(#fn_attr) {
    cir.scope {
      %0 = cir.const #cir.int<6> : !s32i loc(#loc9)
      cir.switch (%0 : !s32i) {
        cir.case(equal, [#cir.int<6> : !s32i]) {
          cir.scope {
            %3 = cir.alloca !s32i, !cir.ptr<!s32i>, ["i", init] {alignment = 4 : i64} loc(#loc88)
            %4 = cir.const #cir.int<0> : !s32i loc(#loc14)
            cir.store %4, %3 : !s32i, !cir.ptr<!s32i> loc(#loc88)
            cir.scope {
              cir.while {
                %5 = cir.load %3 : !cir.ptr<!s32i>, !s32i loc(#loc17)
                %6 = cir.unary(inc, %5) nsw : !s32i, !s32i loc(#loc18)
                cir.store %6, %3 : !s32i, !cir.ptr<!s32i> loc(#loc90)
                %7 = cir.const #cir.int<10> : !s32i loc(#loc19)
                %8 = cir.cmp(lt, %5, %7) : !s32i, !cir.bool loc(#loc91)
                cir.condition(%8) loc(#loc20)
              } do {
                cir.yield loc(#loc16)
              } loc(#loc89)
            } loc(#loc89)
          } loc(#loc87)
          %1 = cir.get_global @".str" : !cir.ptr<!cir.array<!s8i x 17>> loc(#loc3)
          %2 = cir.cast(array_to_ptrdecay, %1 : !cir.ptr<!cir.array<!s8i x 17>>), !cir.ptr<!s8i> loc(#loc3)
          cir.call @printLine(%2) : (!cir.ptr<!s8i>) -> () loc(#loc21)
          cir.break loc(#loc22)
        } loc(#loc10)
        cir.case(default, []) {
          %1 = cir.get_global @".str.1" : !cir.ptr<!cir.array<!s8i x 21>> loc(#loc4)
          %2 = cir.cast(array_to_ptrdecay, %1 : !cir.ptr<!cir.array<!s8i x 21>>), !cir.ptr<!s8i> loc(#loc4)
          cir.call @printLine(%2) : (!cir.ptr<!s8i>) -> () loc(#loc24)
          cir.break loc(#loc25)
        } loc(#loc23)
        cir.yield loc(#loc7)
      } loc(#loc7)
    } loc(#loc86)
    cir.return loc(#loc6)
  } loc(#loc85)
  cir.func no_proto @CWE398_Poor_Code_Quality__empty_while_15_good() extra(#fn_attr) {
    %0 = cir.get_global @good1 : !cir.ptr<!cir.func<()>> loc(#loc93)
    cir.call %0() : (!cir.ptr<!cir.func<()>>) -> () loc(#loc28)
    %1 = cir.get_global @good2 : !cir.ptr<!cir.func<()>> loc(#loc94)
    cir.call %1() : (!cir.ptr<!cir.func<()>>) -> () loc(#loc30)
    cir.return loc(#loc27)
  } loc(#loc92)
  cir.global "private" constant cir_private dsolocal @".str.2" = #cir.const_array<"Inside the while statement\00" : !cir.array<!s8i x 27>> : !cir.array<!s8i x 27> {alignment = 1 : i64} loc(#loc32)
  cir.global "private" constant cir_private dsolocal @".str.3" = #cir.const_array<"Hello from good()\00" : !cir.array<!s8i x 18>> : !cir.array<!s8i x 18> {alignment = 1 : i64} loc(#loc33)
  cir.func no_proto internal private @good1() extra(#fn_attr) {
    cir.scope {
      %0 = cir.const #cir.int<5> : !s32i loc(#loc38)
      cir.switch (%0 : !s32i) {
        cir.case(equal, [#cir.int<6> : !s32i]) {
          %1 = cir.get_global @".str.1" : !cir.ptr<!cir.array<!s8i x 21>> loc(#loc40)
          %2 = cir.cast(array_to_ptrdecay, %1 : !cir.ptr<!cir.array<!s8i x 21>>), !cir.ptr<!s8i> loc(#loc40)
          cir.call @printLine(%2) : (!cir.ptr<!s8i>) -> () loc(#loc41)
          cir.break loc(#loc42)
        } loc(#loc39)
        cir.case(default, []) {
          cir.scope {
            %3 = cir.alloca !s32i, !cir.ptr<!s32i>, ["i", init] {alignment = 4 : i64} loc(#loc98)
            %4 = cir.const #cir.int<0> : !s32i loc(#loc47)
            cir.store %4, %3 : !s32i, !cir.ptr<!s32i> loc(#loc98)
            cir.scope {
              cir.while {
                %5 = cir.load %3 : !cir.ptr<!s32i>, !s32i loc(#loc50)
                %6 = cir.unary(inc, %5) nsw : !s32i, !s32i loc(#loc51)
                cir.store %6, %3 : !s32i, !cir.ptr<!s32i> loc(#loc100)
                %7 = cir.const #cir.int<10> : !s32i loc(#loc52)
                %8 = cir.cmp(lt, %5, %7) : !s32i, !cir.bool loc(#loc101)
                cir.condition(%8) loc(#loc53)
              } do {
                cir.scope {
                  %5 = cir.get_global @".str.2" : !cir.ptr<!cir.array<!s8i x 27>> loc(#loc32)
                  %6 = cir.cast(array_to_ptrdecay, %5 : !cir.ptr<!cir.array<!s8i x 27>>), !cir.ptr<!s8i> loc(#loc32)
                  cir.call @printLine(%6) : (!cir.ptr<!s8i>) -> () loc(#loc55)
                } loc(#loc102)
                cir.yield loc(#loc49)
              } loc(#loc99)
            } loc(#loc99)
          } loc(#loc97)
          %1 = cir.get_global @".str.3" : !cir.ptr<!cir.array<!s8i x 18>> loc(#loc33)
          %2 = cir.cast(array_to_ptrdecay, %1 : !cir.ptr<!cir.array<!s8i x 18>>), !cir.ptr<!s8i> loc(#loc33)
          cir.call @printLine(%2) : (!cir.ptr<!s8i>) -> () loc(#loc56)
          cir.break loc(#loc57)
        } loc(#loc43)
        cir.yield loc(#loc36)
      } loc(#loc36)
    } loc(#loc96)
    cir.return loc(#loc35)
  } loc(#loc95)
  cir.func no_proto internal private @good2() extra(#fn_attr) {
    cir.scope {
      %0 = cir.const #cir.int<6> : !s32i loc(#loc62)
      cir.switch (%0 : !s32i) {
        cir.case(equal, [#cir.int<6> : !s32i]) {
          cir.scope {
            %3 = cir.alloca !s32i, !cir.ptr<!s32i>, ["i", init] {alignment = 4 : i64} loc(#loc106)
            %4 = cir.const #cir.int<0> : !s32i loc(#loc67)
            cir.store %4, %3 : !s32i, !cir.ptr<!s32i> loc(#loc106)
            cir.scope {
              cir.while {
                %5 = cir.load %3 : !cir.ptr<!s32i>, !s32i loc(#loc70)
                %6 = cir.unary(inc, %5) nsw : !s32i, !s32i loc(#loc71)
                cir.store %6, %3 : !s32i, !cir.ptr<!s32i> loc(#loc108)
                %7 = cir.const #cir.int<10> : !s32i loc(#loc72)
                %8 = cir.cmp(lt, %5, %7) : !s32i, !cir.bool loc(#loc109)
                cir.condition(%8) loc(#loc73)
              } do {
                cir.scope {
                  %5 = cir.get_global @".str.2" : !cir.ptr<!cir.array<!s8i x 27>> loc(#loc75)
                  %6 = cir.cast(array_to_ptrdecay, %5 : !cir.ptr<!cir.array<!s8i x 27>>), !cir.ptr<!s8i> loc(#loc75)
                  cir.call @printLine(%6) : (!cir.ptr<!s8i>) -> () loc(#loc76)
                } loc(#loc110)
                cir.yield loc(#loc69)
              } loc(#loc107)
            } loc(#loc107)
          } loc(#loc105)
          %1 = cir.get_global @".str.3" : !cir.ptr<!cir.array<!s8i x 18>> loc(#loc77)
          %2 = cir.cast(array_to_ptrdecay, %1 : !cir.ptr<!cir.array<!s8i x 18>>), !cir.ptr<!s8i> loc(#loc77)
          cir.call @printLine(%2) : (!cir.ptr<!s8i>) -> () loc(#loc78)
          cir.break loc(#loc79)
        } loc(#loc63)
        cir.case(default, []) {
          %1 = cir.get_global @".str.1" : !cir.ptr<!cir.array<!s8i x 21>> loc(#loc81)
          %2 = cir.cast(array_to_ptrdecay, %1 : !cir.ptr<!cir.array<!s8i x 21>>), !cir.ptr<!s8i> loc(#loc81)
          cir.call @printLine(%2) : (!cir.ptr<!s8i>) -> () loc(#loc82)
          cir.break loc(#loc83)
        } loc(#loc80)
        cir.yield loc(#loc60)
      } loc(#loc60)
    } loc(#loc104)
    cir.return loc(#loc59)
  } loc(#loc103)
} loc(#loc)
#loc = loc("/workspaces/juliet-c/testcases/CWE398_Poor_Code_Quality/CWE398_Poor_Code_Quality__empty_while_15.c":0:0)
#loc1 = loc("../../testcasesupport/std_testcase_io.h":14:1)
#loc2 = loc("../../testcasesupport/std_testcase_io.h":14:33)
#loc3 = loc("CWE398_Poor_Code_Quality__empty_while_15.c":32:15)
#loc4 = loc("CWE398_Poor_Code_Quality__empty_while_15.c":36:19)
#loc5 = loc("CWE398_Poor_Code_Quality__empty_while_15.c":20:1)
#loc6 = loc("CWE398_Poor_Code_Quality__empty_while_15.c":39:1)
#loc7 = loc("CWE398_Poor_Code_Quality__empty_while_15.c":22:5)
#loc8 = loc("CWE398_Poor_Code_Quality__empty_while_15.c":38:5)
#loc9 = loc("CWE398_Poor_Code_Quality__empty_while_15.c":22:12)
#loc10 = loc("CWE398_Poor_Code_Quality__empty_while_15.c":24:5)
#loc11 = loc("CWE398_Poor_Code_Quality__empty_while_15.c":26:5)
#loc12 = loc("CWE398_Poor_Code_Quality__empty_while_15.c":31:5)
#loc13 = loc("CWE398_Poor_Code_Quality__empty_while_15.c":27:9)
#loc14 = loc("CWE398_Poor_Code_Quality__empty_while_15.c":27:17)
#loc15 = loc("CWE398_Poor_Code_Quality__empty_while_15.c":28:9)
#loc16 = loc("CWE398_Poor_Code_Quality__empty_while_15.c":30:9)
#loc17 = loc("CWE398_Poor_Code_Quality__empty_while_15.c":28:16)
#loc18 = loc("CWE398_Poor_Code_Quality__empty_while_15.c":28:15)
#loc19 = loc("CWE398_Poor_Code_Quality__empty_while_15.c":28:21)
#loc20 = loc("CWE398_Poor_Code_Quality__empty_while_15.c":28:19)
#loc21 = loc("CWE398_Poor_Code_Quality__empty_while_15.c":32:5)
#loc22 = loc("CWE398_Poor_Code_Quality__empty_while_15.c":33:5)
#loc23 = loc("CWE398_Poor_Code_Quality__empty_while_15.c":34:5)
#loc24 = loc("CWE398_Poor_Code_Quality__empty_while_15.c":36:9)
#loc25 = loc("CWE398_Poor_Code_Quality__empty_while_15.c":37:9)
#loc26 = loc("CWE398_Poor_Code_Quality__empty_while_15.c":91:1)
#loc27 = loc("CWE398_Poor_Code_Quality__empty_while_15.c":95:1)
#loc28 = loc("CWE398_Poor_Code_Quality__empty_while_15.c":93:5)
#loc29 = loc("CWE398_Poor_Code_Quality__empty_while_15.c":93:11)
#loc30 = loc("CWE398_Poor_Code_Quality__empty_while_15.c":94:5)
#loc31 = loc("CWE398_Poor_Code_Quality__empty_while_15.c":94:11)
#loc32 = loc("CWE398_Poor_Code_Quality__empty_while_15.c":60:23)
#loc33 = loc("CWE398_Poor_Code_Quality__empty_while_15.c":63:15)
#loc34 = loc("CWE398_Poor_Code_Quality__empty_while_15.c":46:1)
#loc35 = loc("CWE398_Poor_Code_Quality__empty_while_15.c":66:1)
#loc36 = loc("CWE398_Poor_Code_Quality__empty_while_15.c":48:5)
#loc37 = loc("CWE398_Poor_Code_Quality__empty_while_15.c":65:5)
#loc38 = loc("CWE398_Poor_Code_Quality__empty_while_15.c":48:12)
#loc39 = loc("CWE398_Poor_Code_Quality__empty_while_15.c":50:5)
#loc40 = loc("CWE398_Poor_Code_Quality__empty_while_15.c":52:19)
#loc41 = loc("CWE398_Poor_Code_Quality__empty_while_15.c":52:9)
#loc42 = loc("CWE398_Poor_Code_Quality__empty_while_15.c":53:9)
#loc43 = loc("CWE398_Poor_Code_Quality__empty_while_15.c":54:5)
#loc44 = loc("CWE398_Poor_Code_Quality__empty_while_15.c":56:5)
#loc45 = loc("CWE398_Poor_Code_Quality__empty_while_15.c":62:5)
#loc46 = loc("CWE398_Poor_Code_Quality__empty_while_15.c":57:9)
#loc47 = loc("CWE398_Poor_Code_Quality__empty_while_15.c":57:17)
#loc48 = loc("CWE398_Poor_Code_Quality__empty_while_15.c":58:9)
#loc49 = loc("CWE398_Poor_Code_Quality__empty_while_15.c":61:9)
#loc50 = loc("CWE398_Poor_Code_Quality__empty_while_15.c":58:16)
#loc51 = loc("CWE398_Poor_Code_Quality__empty_while_15.c":58:15)
#loc52 = loc("CWE398_Poor_Code_Quality__empty_while_15.c":58:21)
#loc53 = loc("CWE398_Poor_Code_Quality__empty_while_15.c":58:19)
#loc54 = loc("CWE398_Poor_Code_Quality__empty_while_15.c":59:9)
#loc55 = loc("CWE398_Poor_Code_Quality__empty_while_15.c":60:13)
#loc56 = loc("CWE398_Poor_Code_Quality__empty_while_15.c":63:5)
#loc57 = loc("CWE398_Poor_Code_Quality__empty_while_15.c":64:5)
#loc58 = loc("CWE398_Poor_Code_Quality__empty_while_15.c":69:1)
#loc59 = loc("CWE398_Poor_Code_Quality__empty_while_15.c":89:1)
#loc60 = loc("CWE398_Poor_Code_Quality__empty_while_15.c":71:5)
#loc61 = loc("CWE398_Poor_Code_Quality__empty_while_15.c":88:5)
#loc62 = loc("CWE398_Poor_Code_Quality__empty_while_15.c":71:12)
#loc63 = loc("CWE398_Poor_Code_Quality__empty_while_15.c":73:5)
#loc64 = loc("CWE398_Poor_Code_Quality__empty_while_15.c":75:5)
#loc65 = loc("CWE398_Poor_Code_Quality__empty_while_15.c":81:5)
#loc66 = loc("CWE398_Poor_Code_Quality__empty_while_15.c":76:9)
#loc67 = loc("CWE398_Poor_Code_Quality__empty_while_15.c":76:17)
#loc68 = loc("CWE398_Poor_Code_Quality__empty_while_15.c":77:9)
#loc69 = loc("CWE398_Poor_Code_Quality__empty_while_15.c":80:9)
#loc70 = loc("CWE398_Poor_Code_Quality__empty_while_15.c":77:16)
#loc71 = loc("CWE398_Poor_Code_Quality__empty_while_15.c":77:15)
#loc72 = loc("CWE398_Poor_Code_Quality__empty_while_15.c":77:21)
#loc73 = loc("CWE398_Poor_Code_Quality__empty_while_15.c":77:19)
#loc74 = loc("CWE398_Poor_Code_Quality__empty_while_15.c":78:9)
#loc75 = loc("CWE398_Poor_Code_Quality__empty_while_15.c":79:23)
#loc76 = loc("CWE398_Poor_Code_Quality__empty_while_15.c":79:13)
#loc77 = loc("CWE398_Poor_Code_Quality__empty_while_15.c":82:15)
#loc78 = loc("CWE398_Poor_Code_Quality__empty_while_15.c":82:5)
#loc79 = loc("CWE398_Poor_Code_Quality__empty_while_15.c":83:5)
#loc80 = loc("CWE398_Poor_Code_Quality__empty_while_15.c":84:5)
#loc81 = loc("CWE398_Poor_Code_Quality__empty_while_15.c":86:19)
#loc82 = loc("CWE398_Poor_Code_Quality__empty_while_15.c":86:9)
#loc83 = loc("CWE398_Poor_Code_Quality__empty_while_15.c":87:9)
#loc84 = loc(fused[#loc1, #loc2])
#loc85 = loc(fused[#loc5, #loc6])
#loc86 = loc(fused[#loc7, #loc8])
#loc87 = loc(fused[#loc11, #loc12])
#loc88 = loc(fused[#loc13, #loc14])
#loc89 = loc(fused[#loc15, #loc16])
#loc90 = loc(fused[#loc18, #loc17])
#loc91 = loc(fused[#loc18, #loc19])
#loc92 = loc(fused[#loc26, #loc27])
#loc93 = loc(fused[#loc28, #loc29])
#loc94 = loc(fused[#loc30, #loc31])
#loc95 = loc(fused[#loc34, #loc35])
#loc96 = loc(fused[#loc36, #loc37])
#loc97 = loc(fused[#loc44, #loc45])
#loc98 = loc(fused[#loc46, #loc47])
#loc99 = loc(fused[#loc48, #loc49])
#loc100 = loc(fused[#loc51, #loc50])
#loc101 = loc(fused[#loc51, #loc52])
#loc102 = loc(fused[#loc54, #loc49])
#loc103 = loc(fused[#loc58, #loc59])
#loc104 = loc(fused[#loc60, #loc61])
#loc105 = loc(fused[#loc64, #loc65])
#loc106 = loc(fused[#loc66, #loc67])
#loc107 = loc(fused[#loc68, #loc69])
#loc108 = loc(fused[#loc71, #loc70])
#loc109 = loc(fused[#loc71, #loc72])
#loc110 = loc(fused[#loc74, #loc69])
