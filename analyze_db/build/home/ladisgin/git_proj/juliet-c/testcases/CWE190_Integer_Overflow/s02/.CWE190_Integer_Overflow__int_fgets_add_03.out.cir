!s32i = !cir.int<s, 32>
!s64i = !cir.int<s, 64>
!s8i = !cir.int<s, 8>
!ty__IO_codecvt = !cir.struct<struct "_IO_codecvt" incomplete>
!ty__IO_marker = !cir.struct<struct "_IO_marker" incomplete>
!ty__IO_wide_data = !cir.struct<struct "_IO_wide_data" incomplete>
!u16i = !cir.int<u, 16>
!u32i = !cir.int<u, 32>
!u64i = !cir.int<u, 64>
!void = !cir.void
#fn_attr = #cir<extra({nothrow = #cir.nothrow})>
#fn_attr1 = #cir<extra({inline = #cir.inline<no>, nothrow = #cir.nothrow, optnone = #cir.optnone})>
#loc74 = loc("CWE190_Integer_Overflow__int_fgets_add_03.c":202:10)
#loc75 = loc("CWE190_Integer_Overflow__int_fgets_add_03.c":202:14)
#loc76 = loc("CWE190_Integer_Overflow__int_fgets_add_03.c":202:20)
#loc77 = loc("CWE190_Integer_Overflow__int_fgets_add_03.c":202:32)
#loc280 = loc(fused[#loc74, #loc75])
#loc281 = loc(fused[#loc76, #loc77])
!ty__IO_FILE = !cir.struct<struct "_IO_FILE" {!s32i, !cir.ptr<!s8i>, !cir.ptr<!s8i>, !cir.ptr<!s8i>, !cir.ptr<!s8i>, !cir.ptr<!s8i>, !cir.ptr<!s8i>, !cir.ptr<!s8i>, !cir.ptr<!s8i>, !cir.ptr<!s8i>, !cir.ptr<!s8i>, !cir.ptr<!s8i>, !cir.ptr<!ty__IO_marker>, !cir.ptr<!cir.struct<struct "_IO_FILE">>, !s32i, !s32i, !s64i, !u16i, !s8i, !cir.array<!s8i x 1>, !cir.ptr<!void>, !s64i, !cir.ptr<!ty__IO_codecvt>, !cir.ptr<!ty__IO_wide_data>, !cir.ptr<!cir.struct<struct "_IO_FILE">>, !cir.ptr<!void>, !cir.ptr<!cir.ptr<!cir.struct<struct "_IO_FILE">>>, !s32i, !cir.array<!s8i x 20>} #cir.record.decl.ast>
module @"/home/ladisgin/git_proj/juliet-c/testcases/CWE190_Integer_Overflow/s02/CWE190_Integer_Overflow__int_fgets_add_03.c" attributes {cir.lang = #cir.lang<c>, cir.sob = #cir.signed_overflow_behavior<undefined>, cir.triple = "x86_64-unknown-linux-gnu", dlti.dl_spec = #dlti.dl_spec<i32 = dense<32> : vector<2xi64>, i16 = dense<16> : vector<2xi64>, f16 = dense<16> : vector<2xi64>, !llvm.ptr = dense<64> : vector<4xi64>, i8 = dense<8> : vector<2xi64>, i1 = dense<8> : vector<2xi64>, i128 = dense<128> : vector<2xi64>, i64 = dense<64> : vector<2xi64>, f80 = dense<128> : vector<2xi64>, f128 = dense<128> : vector<2xi64>, !llvm.ptr<270> = dense<32> : vector<4xi64>, f64 = dense<64> : vector<2xi64>, !llvm.ptr<271> = dense<32> : vector<4xi64>, !llvm.ptr<272> = dense<64> : vector<4xi64>, "dlti.endianness" = "little", "dlti.stack_alignment" = 128 : i64>} {
  cir.func private @fgets(!cir.ptr<!s8i>, !s32i, !cir.ptr<!ty__IO_FILE>) -> !cir.ptr<!s8i> loc(#loc250)
  cir.global "private" external @stdin : !cir.ptr<!ty__IO_FILE> {alignment = 8 : i64} loc(#loc251)
  cir.func private @atoi(!cir.ptr<!s8i>) -> !s32i extra(#fn_attr) loc(#loc252)
  cir.func private @printLine(!cir.ptr<!s8i>) loc(#loc253)
  cir.global "private" constant cir_private dsolocal @".str" = #cir.const_array<"fgets() failed.\00" : !cir.array<!s8i x 16>> : !cir.array<!s8i x 16> {alignment = 1 : i64} loc(#loc9)
  cir.func private @printIntLine(!s32i) loc(#loc254)
  cir.func no_proto @CWE190_Integer_Overflow__int_fgets_add_03_bad() extra(#fn_attr1) {
    %0 = cir.alloca !cir.array<!s8i x 14>, !cir.ptr<!cir.array<!s8i x 14>>, ["inputBuffer"] {alignment = 1 : i64} loc(#loc256)
    %1 = cir.alloca !s32i, !cir.ptr<!s32i>, ["result", init] {alignment = 4 : i64} loc(#loc257)
    %2 = cir.alloca !s32i, !cir.ptr<!s32i>, ["data"] {alignment = 4 : i64} loc(#loc258)
    %3 = cir.const #cir.int<0> : !s32i loc(#loc20)
    cir.store %3, %2 : !s32i, !cir.ptr<!s32i> loc(#loc259)
    cir.br ^bb1 loc(#loc260)
  ^bb1:  // pred: ^bb0
    %4 = cir.const #cir.int<5> : !s32i loc(#loc24)
    %5 = cir.const #cir.int<5> : !s32i loc(#loc25)
    %6 = cir.cmp(eq, %4, %5) : !s32i, !cir.bool loc(#loc261)
    cir.brcond %6 ^bb2, ^bb10 loc(#loc262)
  ^bb2:  // pred: ^bb1
    cir.br ^bb3 loc(#loc263)
  ^bb3:  // pred: ^bb2
    %7 = cir.const #cir.zero : !cir.array<!s8i x 14> loc(#loc256)
    cir.store %7, %0 : !cir.array<!s8i x 14>, !cir.ptr<!cir.array<!s8i x 14>> loc(#loc256)
    cir.br ^bb4 loc(#loc264)
  ^bb4:  // pred: ^bb3
    %8 = cir.cast(array_to_ptrdecay, %0 : !cir.ptr<!cir.array<!s8i x 14>>), !cir.ptr<!s8i> loc(#loc31)
    %9 = cir.const #cir.int<3> : !s32i loc(#loc32)
    %10 = cir.cast(integral, %9 : !s32i), !u64i loc(#loc32)
    %11 = cir.const #cir.int<4> : !u64i loc(#loc32)
    %12 = cir.binop(mul, %10, %11) : !u64i loc(#loc32)
    %13 = cir.const #cir.int<2> : !s32i loc(#loc32)
    %14 = cir.cast(integral, %13 : !s32i), !u64i loc(#loc32)
    %15 = cir.binop(add, %12, %14) : !u64i loc(#loc32)
    %16 = cir.cast(integral, %15 : !u64i), !s32i loc(#loc32)
    %17 = cir.get_global @stdin : !cir.ptr<!cir.ptr<!ty__IO_FILE>> loc(#loc251)
    %18 = cir.load %17 : !cir.ptr<!cir.ptr<!ty__IO_FILE>>, !cir.ptr<!ty__IO_FILE> loc(#loc33)
    %19 = cir.call @fgets(%8, %16, %18) : (!cir.ptr<!s8i>, !s32i, !cir.ptr<!ty__IO_FILE>) -> !cir.ptr<!s8i> loc(#loc34)
    %20 = cir.const #cir.ptr<null> : !cir.ptr<!void> loc(#loc35)
    %21 = cir.cast(bitcast, %20 : !cir.ptr<!void>), !cir.ptr<!s8i> loc(#loc35)
    %22 = cir.cmp(ne, %19, %21) : !cir.ptr<!s8i>, !cir.bool loc(#loc265)
    cir.brcond %22 ^bb5, ^bb6 loc(#loc266)
  ^bb5:  // pred: ^bb4
    %23 = cir.cast(array_to_ptrdecay, %0 : !cir.ptr<!cir.array<!s8i x 14>>), !cir.ptr<!s8i> loc(#loc39)
    %24 = cir.call @atoi(%23) : (!cir.ptr<!s8i>) -> !s32i extra(#fn_attr) loc(#loc40)
    cir.store %24, %2 : !s32i, !cir.ptr<!s32i> loc(#loc267)
    cir.br ^bb7 loc(#loc37)
  ^bb6:  // pred: ^bb4
    %25 = cir.get_global @".str" : !cir.ptr<!cir.array<!s8i x 16>> loc(#loc9)
    %26 = cir.cast(array_to_ptrdecay, %25 : !cir.ptr<!cir.array<!s8i x 16>>), !cir.ptr<!s8i> loc(#loc9)
    cir.call @printLine(%26) : (!cir.ptr<!s8i>) -> () loc(#loc43)
    cir.br ^bb7 loc(#loc30)
  ^bb7:  // 2 preds: ^bb5, ^bb6
    cir.br ^bb8 loc(#loc30)
  ^bb8:  // pred: ^bb7
    cir.br ^bb9 loc(#loc28)
  ^bb9:  // pred: ^bb8
    cir.br ^bb10 loc(#loc23)
  ^bb10:  // 2 preds: ^bb1, ^bb9
    cir.br ^bb11 loc(#loc23)
  ^bb11:  // pred: ^bb10
    cir.br ^bb12 loc(#loc268)
  ^bb12:  // pred: ^bb11
    %27 = cir.const #cir.int<5> : !s32i loc(#loc46)
    %28 = cir.const #cir.int<5> : !s32i loc(#loc47)
    %29 = cir.cmp(eq, %27, %28) : !s32i, !cir.bool loc(#loc269)
    cir.brcond %29 ^bb13, ^bb16 loc(#loc270)
  ^bb13:  // pred: ^bb12
    cir.br ^bb14 loc(#loc271)
  ^bb14:  // pred: ^bb13
    %30 = cir.load %2 : !cir.ptr<!s32i>, !s32i loc(#loc51)
    %31 = cir.const #cir.int<1> : !s32i loc(#loc17)
    %32 = cir.binop(add, %30, %31) nsw : !s32i loc(#loc51)
    cir.store %32, %1 : !s32i, !cir.ptr<!s32i> loc(#loc257)
    %33 = cir.load %1 : !cir.ptr<!s32i>, !s32i loc(#loc52)
    cir.call @printIntLine(%33) : (!s32i) -> () loc(#loc53)
    cir.br ^bb15 loc(#loc50)
  ^bb15:  // pred: ^bb14
    cir.br ^bb16 loc(#loc45)
  ^bb16:  // 2 preds: ^bb12, ^bb15
    cir.br ^bb17 loc(#loc45)
  ^bb17:  // pred: ^bb16
    cir.return loc(#loc13)
  } loc(#loc255)
  cir.func no_proto @CWE190_Integer_Overflow__int_fgets_add_03_good() extra(#fn_attr1) {
    %0 = cir.get_global @goodB2G1 : !cir.ptr<!cir.func<!void ()>> loc(#loc273)
    cir.call %0() : (!cir.ptr<!cir.func<!void ()>>) -> () loc(#loc56)
    %1 = cir.get_global @goodB2G2 : !cir.ptr<!cir.func<!void ()>> loc(#loc274)
    cir.call %1() : (!cir.ptr<!cir.func<!void ()>>) -> () loc(#loc58)
    %2 = cir.get_global @goodG2B1 : !cir.ptr<!cir.func<!void ()>> loc(#loc275)
    cir.call %2() : (!cir.ptr<!cir.func<!void ()>>) -> () loc(#loc60)
    %3 = cir.get_global @goodG2B2 : !cir.ptr<!cir.func<!void ()>> loc(#loc276)
    cir.call %3() : (!cir.ptr<!cir.func<!void ()>>) -> () loc(#loc62)
    cir.return loc(#loc55)
  } loc(#loc272)
  cir.func private @srand(!u32i) extra(#fn_attr) loc(#loc277)
  cir.func private @time(!cir.ptr<!s64i>) -> !s64i extra(#fn_attr) loc(#loc278)
  cir.global "private" constant cir_private dsolocal @".str.1" = #cir.const_array<"Calling good()...\00" : !cir.array<!s8i x 18>> : !cir.array<!s8i x 18> {alignment = 1 : i64} loc(#loc68)
  cir.global "private" constant cir_private dsolocal @".str.2" = #cir.const_array<"Finished good()\00" : !cir.array<!s8i x 16>> : !cir.array<!s8i x 16> {alignment = 1 : i64} loc(#loc69)
  cir.global "private" constant cir_private dsolocal @".str.3" = #cir.const_array<"Calling bad()...\00" : !cir.array<!s8i x 17>> : !cir.array<!s8i x 17> {alignment = 1 : i64} loc(#loc70)
  cir.global "private" constant cir_private dsolocal @".str.4" = #cir.const_array<"Finished bad()\00" : !cir.array<!s8i x 15>> : !cir.array<!s8i x 15> {alignment = 1 : i64} loc(#loc71)
  cir.func @main(%arg0: !s32i loc(fused[#loc74, #loc75]), %arg1: !cir.ptr<!cir.ptr<!s8i>> loc(fused[#loc76, #loc77])) -> !s32i extra(#fn_attr1) {
    %0 = cir.alloca !s32i, !cir.ptr<!s32i>, ["argc", init] {alignment = 4 : i64} loc(#loc280)
    %1 = cir.alloca !cir.ptr<!cir.ptr<!s8i>>, !cir.ptr<!cir.ptr<!cir.ptr<!s8i>>>, ["argv", init] {alignment = 8 : i64} loc(#loc281)
    %2 = cir.alloca !s32i, !cir.ptr<!s32i>, ["__retval"] {alignment = 4 : i64} loc(#loc73)
    cir.store %arg0, %0 : !s32i, !cir.ptr<!s32i> loc(#loc78)
    cir.store %arg1, %1 : !cir.ptr<!cir.ptr<!s8i>>, !cir.ptr<!cir.ptr<!cir.ptr<!s8i>>> loc(#loc78)
    %3 = cir.const #cir.ptr<null> : !cir.ptr<!s64i> loc(#loc79)
    %4 = cir.call @time(%3) : (!cir.ptr<!s64i>) -> !s64i extra(#fn_attr) loc(#loc80)
    %5 = cir.cast(integral, %4 : !s64i), !u32i loc(#loc80)
    cir.call @srand(%5) : (!u32i) -> () extra(#fn_attr) loc(#loc81)
    %6 = cir.get_global @".str.1" : !cir.ptr<!cir.array<!s8i x 18>> loc(#loc68)
    %7 = cir.cast(array_to_ptrdecay, %6 : !cir.ptr<!cir.array<!s8i x 18>>), !cir.ptr<!s8i> loc(#loc68)
    cir.call @printLine(%7) : (!cir.ptr<!s8i>) -> () loc(#loc82)
    %8 = cir.get_global @CWE190_Integer_Overflow__int_fgets_add_03_good : !cir.ptr<!cir.func<!void ()>> loc(#loc282)
    cir.call @CWE190_Integer_Overflow__int_fgets_add_03_good() : () -> () loc(#loc83)
    %9 = cir.get_global @".str.2" : !cir.ptr<!cir.array<!s8i x 16>> loc(#loc69)
    %10 = cir.cast(array_to_ptrdecay, %9 : !cir.ptr<!cir.array<!s8i x 16>>), !cir.ptr<!s8i> loc(#loc69)
    cir.call @printLine(%10) : (!cir.ptr<!s8i>) -> () loc(#loc85)
    %11 = cir.get_global @".str.3" : !cir.ptr<!cir.array<!s8i x 17>> loc(#loc70)
    %12 = cir.cast(array_to_ptrdecay, %11 : !cir.ptr<!cir.array<!s8i x 17>>), !cir.ptr<!s8i> loc(#loc70)
    cir.call @printLine(%12) : (!cir.ptr<!s8i>) -> () loc(#loc86)
    %13 = cir.get_global @CWE190_Integer_Overflow__int_fgets_add_03_bad : !cir.ptr<!cir.func<!void ()>> loc(#loc283)
    cir.call @CWE190_Integer_Overflow__int_fgets_add_03_bad() : () -> () loc(#loc87)
    %14 = cir.get_global @".str.4" : !cir.ptr<!cir.array<!s8i x 15>> loc(#loc71)
    %15 = cir.cast(array_to_ptrdecay, %14 : !cir.ptr<!cir.array<!s8i x 15>>), !cir.ptr<!s8i> loc(#loc71)
    cir.call @printLine(%15) : (!cir.ptr<!s8i>) -> () loc(#loc89)
    %16 = cir.const #cir.int<0> : !s32i loc(#loc90)
    cir.store %16, %2 : !s32i, !cir.ptr<!s32i> loc(#loc284)
    %17 = cir.load %2 : !cir.ptr<!s32i>, !s32i loc(#loc284)
    cir.return %17 : !s32i loc(#loc284)
  } loc(#loc279)
  cir.global "private" constant cir_private dsolocal @".str.5" = #cir.const_array<"Benign, fixed string\00" : !cir.array<!s8i x 21>> : !cir.array<!s8i x 21> {alignment = 1 : i64} loc(#loc92)
  cir.global "private" constant cir_private dsolocal @".str.6" = #cir.const_array<"data value is too large to perform arithmetic safely.\00" : !cir.array<!s8i x 54>> : !cir.array<!s8i x 54> {alignment = 1 : i64} loc(#loc93)
  cir.func no_proto internal private @goodB2G1() extra(#fn_attr1) {
    %0 = cir.alloca !cir.array<!s8i x 14>, !cir.ptr<!cir.array<!s8i x 14>>, ["inputBuffer"] {alignment = 1 : i64} loc(#loc286)
    %1 = cir.alloca !s32i, !cir.ptr<!s32i>, ["result", init] {alignment = 4 : i64} loc(#loc287)
    %2 = cir.alloca !s32i, !cir.ptr<!s32i>, ["data"] {alignment = 4 : i64} loc(#loc288)
    %3 = cir.const #cir.int<0> : !s32i loc(#loc102)
    cir.store %3, %2 : !s32i, !cir.ptr<!s32i> loc(#loc289)
    cir.br ^bb1 loc(#loc290)
  ^bb1:  // pred: ^bb0
    %4 = cir.const #cir.int<5> : !s32i loc(#loc106)
    %5 = cir.const #cir.int<5> : !s32i loc(#loc107)
    %6 = cir.cmp(eq, %4, %5) : !s32i, !cir.bool loc(#loc291)
    cir.brcond %6 ^bb2, ^bb10 loc(#loc292)
  ^bb2:  // pred: ^bb1
    cir.br ^bb3 loc(#loc293)
  ^bb3:  // pred: ^bb2
    %7 = cir.const #cir.zero : !cir.array<!s8i x 14> loc(#loc286)
    cir.store %7, %0 : !cir.array<!s8i x 14>, !cir.ptr<!cir.array<!s8i x 14>> loc(#loc286)
    cir.br ^bb4 loc(#loc294)
  ^bb4:  // pred: ^bb3
    %8 = cir.cast(array_to_ptrdecay, %0 : !cir.ptr<!cir.array<!s8i x 14>>), !cir.ptr<!s8i> loc(#loc113)
    %9 = cir.const #cir.int<3> : !s32i loc(#loc114)
    %10 = cir.cast(integral, %9 : !s32i), !u64i loc(#loc114)
    %11 = cir.const #cir.int<4> : !u64i loc(#loc114)
    %12 = cir.binop(mul, %10, %11) : !u64i loc(#loc114)
    %13 = cir.const #cir.int<2> : !s32i loc(#loc114)
    %14 = cir.cast(integral, %13 : !s32i), !u64i loc(#loc114)
    %15 = cir.binop(add, %12, %14) : !u64i loc(#loc114)
    %16 = cir.cast(integral, %15 : !u64i), !s32i loc(#loc114)
    %17 = cir.get_global @stdin : !cir.ptr<!cir.ptr<!ty__IO_FILE>> loc(#loc251)
    %18 = cir.load %17 : !cir.ptr<!cir.ptr<!ty__IO_FILE>>, !cir.ptr<!ty__IO_FILE> loc(#loc115)
    %19 = cir.call @fgets(%8, %16, %18) : (!cir.ptr<!s8i>, !s32i, !cir.ptr<!ty__IO_FILE>) -> !cir.ptr<!s8i> loc(#loc116)
    %20 = cir.const #cir.ptr<null> : !cir.ptr<!void> loc(#loc117)
    %21 = cir.cast(bitcast, %20 : !cir.ptr<!void>), !cir.ptr<!s8i> loc(#loc117)
    %22 = cir.cmp(ne, %19, %21) : !cir.ptr<!s8i>, !cir.bool loc(#loc295)
    cir.brcond %22 ^bb5, ^bb6 loc(#loc296)
  ^bb5:  // pred: ^bb4
    %23 = cir.cast(array_to_ptrdecay, %0 : !cir.ptr<!cir.array<!s8i x 14>>), !cir.ptr<!s8i> loc(#loc121)
    %24 = cir.call @atoi(%23) : (!cir.ptr<!s8i>) -> !s32i extra(#fn_attr) loc(#loc122)
    cir.store %24, %2 : !s32i, !cir.ptr<!s32i> loc(#loc297)
    cir.br ^bb7 loc(#loc119)
  ^bb6:  // pred: ^bb4
    %25 = cir.get_global @".str" : !cir.ptr<!cir.array<!s8i x 16>> loc(#loc125)
    %26 = cir.cast(array_to_ptrdecay, %25 : !cir.ptr<!cir.array<!s8i x 16>>), !cir.ptr<!s8i> loc(#loc125)
    cir.call @printLine(%26) : (!cir.ptr<!s8i>) -> () loc(#loc126)
    cir.br ^bb7 loc(#loc112)
  ^bb7:  // 2 preds: ^bb5, ^bb6
    cir.br ^bb8 loc(#loc112)
  ^bb8:  // pred: ^bb7
    cir.br ^bb9 loc(#loc110)
  ^bb9:  // pred: ^bb8
    cir.br ^bb10 loc(#loc105)
  ^bb10:  // 2 preds: ^bb1, ^bb9
    cir.br ^bb11 loc(#loc105)
  ^bb11:  // pred: ^bb10
    cir.br ^bb12 loc(#loc298)
  ^bb12:  // pred: ^bb11
    %27 = cir.const #cir.int<5> : !s32i loc(#loc129)
    %28 = cir.const #cir.int<5> : !s32i loc(#loc130)
    %29 = cir.cmp(ne, %27, %28) : !s32i, !cir.bool loc(#loc299)
    cir.brcond %29 ^bb13, ^bb14 loc(#loc300)
  ^bb13:  // pred: ^bb12
    %30 = cir.get_global @".str.5" : !cir.ptr<!cir.array<!s8i x 21>> loc(#loc92)
    %31 = cir.cast(array_to_ptrdecay, %30 : !cir.ptr<!cir.array<!s8i x 21>>), !cir.ptr<!s8i> loc(#loc92)
    cir.call @printLine(%31) : (!cir.ptr<!s8i>) -> () loc(#loc134)
    cir.br ^bb20 loc(#loc132)
  ^bb14:  // pred: ^bb12
    cir.br ^bb15 loc(#loc301)
  ^bb15:  // pred: ^bb14
    %32 = cir.load %2 : !cir.ptr<!s32i>, !s32i loc(#loc137)
    %33 = cir.const #cir.int<2147483647> : !s32i loc(#loc138)
    %34 = cir.cmp(lt, %32, %33) : !s32i, !cir.bool loc(#loc302)
    cir.brcond %34 ^bb16, ^bb17 loc(#loc303)
  ^bb16:  // pred: ^bb15
    %35 = cir.load %2 : !cir.ptr<!s32i>, !s32i loc(#loc142)
    %36 = cir.const #cir.int<1> : !s32i loc(#loc99)
    %37 = cir.binop(add, %35, %36) nsw : !s32i loc(#loc142)
    cir.store %37, %1 : !s32i, !cir.ptr<!s32i> loc(#loc287)
    %38 = cir.load %1 : !cir.ptr<!s32i>, !s32i loc(#loc143)
    cir.call @printIntLine(%38) : (!s32i) -> () loc(#loc144)
    cir.br ^bb18 loc(#loc140)
  ^bb17:  // pred: ^bb15
    %39 = cir.get_global @".str.6" : !cir.ptr<!cir.array<!s8i x 54>> loc(#loc93)
    %40 = cir.cast(array_to_ptrdecay, %39 : !cir.ptr<!cir.array<!s8i x 54>>), !cir.ptr<!s8i> loc(#loc93)
    cir.call @printLine(%40) : (!cir.ptr<!s8i>) -> () loc(#loc145)
    cir.br ^bb18 loc(#loc136)
  ^bb18:  // 2 preds: ^bb16, ^bb17
    cir.br ^bb19 loc(#loc136)
  ^bb19:  // pred: ^bb18
    cir.br ^bb20 loc(#loc128)
  ^bb20:  // 2 preds: ^bb13, ^bb19
    cir.br ^bb21 loc(#loc128)
  ^bb21:  // pred: ^bb20
    cir.return loc(#loc95)
  } loc(#loc285)
  cir.func no_proto internal private @goodB2G2() extra(#fn_attr1) {
    %0 = cir.alloca !cir.array<!s8i x 14>, !cir.ptr<!cir.array<!s8i x 14>>, ["inputBuffer"] {alignment = 1 : i64} loc(#loc305)
    %1 = cir.alloca !s32i, !cir.ptr<!s32i>, ["result", init] {alignment = 4 : i64} loc(#loc306)
    %2 = cir.alloca !s32i, !cir.ptr<!s32i>, ["data"] {alignment = 4 : i64} loc(#loc307)
    %3 = cir.const #cir.int<0> : !s32i loc(#loc154)
    cir.store %3, %2 : !s32i, !cir.ptr<!s32i> loc(#loc308)
    cir.br ^bb1 loc(#loc309)
  ^bb1:  // pred: ^bb0
    %4 = cir.const #cir.int<5> : !s32i loc(#loc158)
    %5 = cir.const #cir.int<5> : !s32i loc(#loc159)
    %6 = cir.cmp(eq, %4, %5) : !s32i, !cir.bool loc(#loc310)
    cir.brcond %6 ^bb2, ^bb10 loc(#loc311)
  ^bb2:  // pred: ^bb1
    cir.br ^bb3 loc(#loc312)
  ^bb3:  // pred: ^bb2
    %7 = cir.const #cir.zero : !cir.array<!s8i x 14> loc(#loc305)
    cir.store %7, %0 : !cir.array<!s8i x 14>, !cir.ptr<!cir.array<!s8i x 14>> loc(#loc305)
    cir.br ^bb4 loc(#loc313)
  ^bb4:  // pred: ^bb3
    %8 = cir.cast(array_to_ptrdecay, %0 : !cir.ptr<!cir.array<!s8i x 14>>), !cir.ptr<!s8i> loc(#loc165)
    %9 = cir.const #cir.int<3> : !s32i loc(#loc166)
    %10 = cir.cast(integral, %9 : !s32i), !u64i loc(#loc166)
    %11 = cir.const #cir.int<4> : !u64i loc(#loc166)
    %12 = cir.binop(mul, %10, %11) : !u64i loc(#loc166)
    %13 = cir.const #cir.int<2> : !s32i loc(#loc166)
    %14 = cir.cast(integral, %13 : !s32i), !u64i loc(#loc166)
    %15 = cir.binop(add, %12, %14) : !u64i loc(#loc166)
    %16 = cir.cast(integral, %15 : !u64i), !s32i loc(#loc166)
    %17 = cir.get_global @stdin : !cir.ptr<!cir.ptr<!ty__IO_FILE>> loc(#loc251)
    %18 = cir.load %17 : !cir.ptr<!cir.ptr<!ty__IO_FILE>>, !cir.ptr<!ty__IO_FILE> loc(#loc167)
    %19 = cir.call @fgets(%8, %16, %18) : (!cir.ptr<!s8i>, !s32i, !cir.ptr<!ty__IO_FILE>) -> !cir.ptr<!s8i> loc(#loc168)
    %20 = cir.const #cir.ptr<null> : !cir.ptr<!void> loc(#loc169)
    %21 = cir.cast(bitcast, %20 : !cir.ptr<!void>), !cir.ptr<!s8i> loc(#loc169)
    %22 = cir.cmp(ne, %19, %21) : !cir.ptr<!s8i>, !cir.bool loc(#loc314)
    cir.brcond %22 ^bb5, ^bb6 loc(#loc315)
  ^bb5:  // pred: ^bb4
    %23 = cir.cast(array_to_ptrdecay, %0 : !cir.ptr<!cir.array<!s8i x 14>>), !cir.ptr<!s8i> loc(#loc173)
    %24 = cir.call @atoi(%23) : (!cir.ptr<!s8i>) -> !s32i extra(#fn_attr) loc(#loc174)
    cir.store %24, %2 : !s32i, !cir.ptr<!s32i> loc(#loc316)
    cir.br ^bb7 loc(#loc171)
  ^bb6:  // pred: ^bb4
    %25 = cir.get_global @".str" : !cir.ptr<!cir.array<!s8i x 16>> loc(#loc177)
    %26 = cir.cast(array_to_ptrdecay, %25 : !cir.ptr<!cir.array<!s8i x 16>>), !cir.ptr<!s8i> loc(#loc177)
    cir.call @printLine(%26) : (!cir.ptr<!s8i>) -> () loc(#loc178)
    cir.br ^bb7 loc(#loc164)
  ^bb7:  // 2 preds: ^bb5, ^bb6
    cir.br ^bb8 loc(#loc164)
  ^bb8:  // pred: ^bb7
    cir.br ^bb9 loc(#loc162)
  ^bb9:  // pred: ^bb8
    cir.br ^bb10 loc(#loc157)
  ^bb10:  // 2 preds: ^bb1, ^bb9
    cir.br ^bb11 loc(#loc157)
  ^bb11:  // pred: ^bb10
    cir.br ^bb12 loc(#loc317)
  ^bb12:  // pred: ^bb11
    %27 = cir.const #cir.int<5> : !s32i loc(#loc181)
    %28 = cir.const #cir.int<5> : !s32i loc(#loc182)
    %29 = cir.cmp(eq, %27, %28) : !s32i, !cir.bool loc(#loc318)
    cir.brcond %29 ^bb13, ^bb19 loc(#loc319)
  ^bb13:  // pred: ^bb12
    cir.br ^bb14 loc(#loc320)
  ^bb14:  // pred: ^bb13
    %30 = cir.load %2 : !cir.ptr<!s32i>, !s32i loc(#loc186)
    %31 = cir.const #cir.int<2147483647> : !s32i loc(#loc187)
    %32 = cir.cmp(lt, %30, %31) : !s32i, !cir.bool loc(#loc321)
    cir.brcond %32 ^bb15, ^bb16 loc(#loc322)
  ^bb15:  // pred: ^bb14
    %33 = cir.load %2 : !cir.ptr<!s32i>, !s32i loc(#loc191)
    %34 = cir.const #cir.int<1> : !s32i loc(#loc151)
    %35 = cir.binop(add, %33, %34) nsw : !s32i loc(#loc191)
    cir.store %35, %1 : !s32i, !cir.ptr<!s32i> loc(#loc306)
    %36 = cir.load %1 : !cir.ptr<!s32i>, !s32i loc(#loc192)
    cir.call @printIntLine(%36) : (!s32i) -> () loc(#loc193)
    cir.br ^bb17 loc(#loc189)
  ^bb16:  // pred: ^bb14
    %37 = cir.get_global @".str.6" : !cir.ptr<!cir.array<!s8i x 54>> loc(#loc194)
    %38 = cir.cast(array_to_ptrdecay, %37 : !cir.ptr<!cir.array<!s8i x 54>>), !cir.ptr<!s8i> loc(#loc194)
    cir.call @printLine(%38) : (!cir.ptr<!s8i>) -> () loc(#loc195)
    cir.br ^bb17 loc(#loc185)
  ^bb17:  // 2 preds: ^bb15, ^bb16
    cir.br ^bb18 loc(#loc185)
  ^bb18:  // pred: ^bb17
    cir.br ^bb19 loc(#loc180)
  ^bb19:  // 2 preds: ^bb12, ^bb18
    cir.br ^bb20 loc(#loc180)
  ^bb20:  // pred: ^bb19
    cir.return loc(#loc147)
  } loc(#loc304)
  cir.func no_proto internal private @goodG2B1() extra(#fn_attr1) {
    %0 = cir.alloca !s32i, !cir.ptr<!s32i>, ["result", init] {alignment = 4 : i64} loc(#loc324)
    %1 = cir.alloca !s32i, !cir.ptr<!s32i>, ["data"] {alignment = 4 : i64} loc(#loc325)
    %2 = cir.const #cir.int<0> : !s32i loc(#loc202)
    cir.store %2, %1 : !s32i, !cir.ptr<!s32i> loc(#loc326)
    cir.br ^bb1 loc(#loc327)
  ^bb1:  // pred: ^bb0
    %3 = cir.const #cir.int<5> : !s32i loc(#loc206)
    %4 = cir.const #cir.int<5> : !s32i loc(#loc207)
    %5 = cir.cmp(ne, %3, %4) : !s32i, !cir.bool loc(#loc328)
    cir.brcond %5 ^bb2, ^bb3 loc(#loc329)
  ^bb2:  // pred: ^bb1
    %6 = cir.get_global @".str.5" : !cir.ptr<!cir.array<!s8i x 21>> loc(#loc211)
    %7 = cir.cast(array_to_ptrdecay, %6 : !cir.ptr<!cir.array<!s8i x 21>>), !cir.ptr<!s8i> loc(#loc211)
    cir.call @printLine(%7) : (!cir.ptr<!s8i>) -> () loc(#loc212)
    cir.br ^bb4 loc(#loc209)
  ^bb3:  // pred: ^bb1
    %8 = cir.const #cir.int<2> : !s32i loc(#loc213)
    cir.store %8, %1 : !s32i, !cir.ptr<!s32i> loc(#loc330)
    cir.br ^bb4 loc(#loc205)
  ^bb4:  // 2 preds: ^bb2, ^bb3
    cir.br ^bb5 loc(#loc205)
  ^bb5:  // pred: ^bb4
    cir.br ^bb6 loc(#loc331)
  ^bb6:  // pred: ^bb5
    %9 = cir.const #cir.int<5> : !s32i loc(#loc217)
    %10 = cir.const #cir.int<5> : !s32i loc(#loc218)
    %11 = cir.cmp(eq, %9, %10) : !s32i, !cir.bool loc(#loc332)
    cir.brcond %11 ^bb7, ^bb10 loc(#loc333)
  ^bb7:  // pred: ^bb6
    cir.br ^bb8 loc(#loc334)
  ^bb8:  // pred: ^bb7
    %12 = cir.load %1 : !cir.ptr<!s32i>, !s32i loc(#loc222)
    %13 = cir.const #cir.int<1> : !s32i loc(#loc199)
    %14 = cir.binop(add, %12, %13) nsw : !s32i loc(#loc222)
    cir.store %14, %0 : !s32i, !cir.ptr<!s32i> loc(#loc324)
    %15 = cir.load %0 : !cir.ptr<!s32i>, !s32i loc(#loc223)
    cir.call @printIntLine(%15) : (!s32i) -> () loc(#loc224)
    cir.br ^bb9 loc(#loc221)
  ^bb9:  // pred: ^bb8
    cir.br ^bb10 loc(#loc216)
  ^bb10:  // 2 preds: ^bb6, ^bb9
    cir.br ^bb11 loc(#loc216)
  ^bb11:  // pred: ^bb10
    cir.return loc(#loc197)
  } loc(#loc323)
  cir.func no_proto internal private @goodG2B2() extra(#fn_attr1) {
    %0 = cir.alloca !s32i, !cir.ptr<!s32i>, ["result", init] {alignment = 4 : i64} loc(#loc336)
    %1 = cir.alloca !s32i, !cir.ptr<!s32i>, ["data"] {alignment = 4 : i64} loc(#loc337)
    %2 = cir.const #cir.int<0> : !s32i loc(#loc231)
    cir.store %2, %1 : !s32i, !cir.ptr<!s32i> loc(#loc338)
    cir.br ^bb1 loc(#loc339)
  ^bb1:  // pred: ^bb0
    %3 = cir.const #cir.int<5> : !s32i loc(#loc235)
    %4 = cir.const #cir.int<5> : !s32i loc(#loc236)
    %5 = cir.cmp(eq, %3, %4) : !s32i, !cir.bool loc(#loc340)
    cir.brcond %5 ^bb2, ^bb3 loc(#loc341)
  ^bb2:  // pred: ^bb1
    %6 = cir.const #cir.int<2> : !s32i loc(#loc238)
    cir.store %6, %1 : !s32i, !cir.ptr<!s32i> loc(#loc342)
    cir.br ^bb3 loc(#loc234)
  ^bb3:  // 2 preds: ^bb1, ^bb2
    cir.br ^bb4 loc(#loc234)
  ^bb4:  // pred: ^bb3
    cir.br ^bb5 loc(#loc343)
  ^bb5:  // pred: ^bb4
    %7 = cir.const #cir.int<5> : !s32i loc(#loc242)
    %8 = cir.const #cir.int<5> : !s32i loc(#loc243)
    %9 = cir.cmp(eq, %7, %8) : !s32i, !cir.bool loc(#loc344)
    cir.brcond %9 ^bb6, ^bb9 loc(#loc345)
  ^bb6:  // pred: ^bb5
    cir.br ^bb7 loc(#loc346)
  ^bb7:  // pred: ^bb6
    %10 = cir.load %1 : !cir.ptr<!s32i>, !s32i loc(#loc247)
    %11 = cir.const #cir.int<1> : !s32i loc(#loc228)
    %12 = cir.binop(add, %10, %11) nsw : !s32i loc(#loc247)
    cir.store %12, %0 : !s32i, !cir.ptr<!s32i> loc(#loc336)
    %13 = cir.load %0 : !cir.ptr<!s32i>, !s32i loc(#loc248)
    cir.call @printIntLine(%13) : (!s32i) -> () loc(#loc249)
    cir.br ^bb8 loc(#loc246)
  ^bb8:  // pred: ^bb7
    cir.br ^bb9 loc(#loc241)
  ^bb9:  // 2 preds: ^bb5, ^bb8
    cir.br ^bb10 loc(#loc241)
  ^bb10:  // pred: ^bb9
    cir.return loc(#loc226)
  } loc(#loc335)
} loc(#loc)
#loc = loc("/home/ladisgin/git_proj/juliet-c/testcases/CWE190_Integer_Overflow/s02/CWE190_Integer_Overflow__int_fgets_add_03.c":0:0)
#loc1 = loc("/usr/include/stdio.h":654:1)
#loc2 = loc("/usr/include/stdio.h":655:59)
#loc3 = loc("/usr/include/stdio.h":149:1)
#loc4 = loc("/usr/include/stdio.h":149:14)
#loc5 = loc("/usr/include/stdlib.h":105:1)
#loc6 = loc("/usr/include/stdlib.h":106:33)
#loc7 = loc("../../../testcasesupport/std_testcase_io.h":14:1)
#loc8 = loc("../../../testcasesupport/std_testcase_io.h":14:33)
#loc9 = loc("CWE190_Integer_Overflow__int_fgets_add_03.c":41:27)
#loc10 = loc("../../../testcasesupport/std_testcase_io.h":18:1)
#loc11 = loc("../../../testcasesupport/std_testcase_io.h":18:33)
#loc12 = loc("CWE190_Integer_Overflow__int_fgets_add_03.c":24:1)
#loc13 = loc("CWE190_Integer_Overflow__int_fgets_add_03.c":53:1)
#loc14 = loc("CWE190_Integer_Overflow__int_fgets_add_03.c":32:13)
#loc15 = loc("CWE190_Integer_Overflow__int_fgets_add_03.c":32:49)
#loc16 = loc("CWE190_Integer_Overflow__int_fgets_add_03.c":49:13)
#loc17 = loc("CWE190_Integer_Overflow__int_fgets_add_03.c":49:33)
#loc18 = loc("CWE190_Integer_Overflow__int_fgets_add_03.c":26:5)
#loc19 = loc("CWE190_Integer_Overflow__int_fgets_add_03.c":26:9)
#loc20 = loc("CWE190_Integer_Overflow__int_fgets_add_03.c":28:12)
#loc21 = loc("CWE190_Integer_Overflow__int_fgets_add_03.c":28:5)
#loc22 = loc("CWE190_Integer_Overflow__int_fgets_add_03.c":29:5)
#loc23 = loc("CWE190_Integer_Overflow__int_fgets_add_03.c":44:5)
#loc24 = loc("CWE190_Integer_Overflow__int_fgets_add_03.c":29:8)
#loc25 = loc("CWE190_Integer_Overflow__int_fgets_add_03.c":29:11)
#loc26 = loc("CWE190_Integer_Overflow__int_fgets_add_03.c":30:5)
#loc27 = loc("CWE190_Integer_Overflow__int_fgets_add_03.c":31:9)
#loc28 = loc("CWE190_Integer_Overflow__int_fgets_add_03.c":43:9)
#loc29 = loc("CWE190_Integer_Overflow__int_fgets_add_03.c":34:13)
#loc30 = loc("CWE190_Integer_Overflow__int_fgets_add_03.c":42:13)
#loc31 = loc("CWE190_Integer_Overflow__int_fgets_add_03.c":34:23)
#loc32 = loc("CWE190_Integer_Overflow__int_fgets_add_03.c":34:36)
#loc33 = loc("CWE190_Integer_Overflow__int_fgets_add_03.c":34:53)
#loc34 = loc("CWE190_Integer_Overflow__int_fgets_add_03.c":34:17)
#loc35 = loc("CWE190_Integer_Overflow__int_fgets_add_03.c":34:63)
#loc36 = loc("CWE190_Integer_Overflow__int_fgets_add_03.c":35:13)
#loc37 = loc("CWE190_Integer_Overflow__int_fgets_add_03.c":38:13)
#loc38 = loc("CWE190_Integer_Overflow__int_fgets_add_03.c":40:13)
#loc39 = loc("CWE190_Integer_Overflow__int_fgets_add_03.c":37:29)
#loc40 = loc("CWE190_Integer_Overflow__int_fgets_add_03.c":37:24)
#loc41 = loc("CWE190_Integer_Overflow__int_fgets_add_03.c":37:17)
#loc42 = loc("CWE190_Integer_Overflow__int_fgets_add_03.c":37:40)
#loc43 = loc("CWE190_Integer_Overflow__int_fgets_add_03.c":41:17)
#loc44 = loc("CWE190_Integer_Overflow__int_fgets_add_03.c":45:5)
#loc45 = loc("CWE190_Integer_Overflow__int_fgets_add_03.c":52:5)
#loc46 = loc("CWE190_Integer_Overflow__int_fgets_add_03.c":45:8)
#loc47 = loc("CWE190_Integer_Overflow__int_fgets_add_03.c":45:11)
#loc48 = loc("CWE190_Integer_Overflow__int_fgets_add_03.c":46:5)
#loc49 = loc("CWE190_Integer_Overflow__int_fgets_add_03.c":47:9)
#loc50 = loc("CWE190_Integer_Overflow__int_fgets_add_03.c":51:9)
#loc51 = loc("CWE190_Integer_Overflow__int_fgets_add_03.c":49:26)
#loc52 = loc("CWE190_Integer_Overflow__int_fgets_add_03.c":50:26)
#loc53 = loc("CWE190_Integer_Overflow__int_fgets_add_03.c":50:13)
#loc54 = loc("CWE190_Integer_Overflow__int_fgets_add_03.c":185:1)
#loc55 = loc("CWE190_Integer_Overflow__int_fgets_add_03.c":191:1)
#loc56 = loc("CWE190_Integer_Overflow__int_fgets_add_03.c":187:5)
#loc57 = loc("CWE190_Integer_Overflow__int_fgets_add_03.c":187:14)
#loc58 = loc("CWE190_Integer_Overflow__int_fgets_add_03.c":188:5)
#loc59 = loc("CWE190_Integer_Overflow__int_fgets_add_03.c":188:14)
#loc60 = loc("CWE190_Integer_Overflow__int_fgets_add_03.c":189:5)
#loc61 = loc("CWE190_Integer_Overflow__int_fgets_add_03.c":189:14)
#loc62 = loc("CWE190_Integer_Overflow__int_fgets_add_03.c":190:5)
#loc63 = loc("CWE190_Integer_Overflow__int_fgets_add_03.c":190:14)
#loc64 = loc("/usr/include/stdlib.h":575:1)
#loc65 = loc("/usr/include/stdlib.h":575:41)
#loc66 = loc("/usr/include/time.h":76:1)
#loc67 = loc("/usr/include/time.h":76:38)
#loc68 = loc("CWE190_Integer_Overflow__int_fgets_add_03.c":207:15)
#loc69 = loc("CWE190_Integer_Overflow__int_fgets_add_03.c":209:15)
#loc70 = loc("CWE190_Integer_Overflow__int_fgets_add_03.c":212:15)
#loc71 = loc("CWE190_Integer_Overflow__int_fgets_add_03.c":214:15)
#loc72 = loc("CWE190_Integer_Overflow__int_fgets_add_03.c":202:1)
#loc73 = loc("CWE190_Integer_Overflow__int_fgets_add_03.c":217:1)
#loc78 = loc("CWE190_Integer_Overflow__int_fgets_add_03.c":203:1)
#loc79 = loc("CWE190_Integer_Overflow__int_fgets_add_03.c":205:27)
#loc80 = loc("CWE190_Integer_Overflow__int_fgets_add_03.c":205:22)
#loc81 = loc("CWE190_Integer_Overflow__int_fgets_add_03.c":205:5)
#loc82 = loc("CWE190_Integer_Overflow__int_fgets_add_03.c":207:5)
#loc83 = loc("CWE190_Integer_Overflow__int_fgets_add_03.c":208:5)
#loc84 = loc("CWE190_Integer_Overflow__int_fgets_add_03.c":208:52)
#loc85 = loc("CWE190_Integer_Overflow__int_fgets_add_03.c":209:5)
#loc86 = loc("CWE190_Integer_Overflow__int_fgets_add_03.c":212:5)
#loc87 = loc("CWE190_Integer_Overflow__int_fgets_add_03.c":213:5)
#loc88 = loc("CWE190_Integer_Overflow__int_fgets_add_03.c":213:51)
#loc89 = loc("CWE190_Integer_Overflow__int_fgets_add_03.c":214:5)
#loc90 = loc("CWE190_Integer_Overflow__int_fgets_add_03.c":216:12)
#loc91 = loc("CWE190_Integer_Overflow__int_fgets_add_03.c":216:5)
#loc92 = loc("CWE190_Integer_Overflow__int_fgets_add_03.c":84:19)
#loc93 = loc("CWE190_Integer_Overflow__int_fgets_add_03.c":96:23)
#loc94 = loc("CWE190_Integer_Overflow__int_fgets_add_03.c":60:1)
#loc95 = loc("CWE190_Integer_Overflow__int_fgets_add_03.c":99:1)
#loc96 = loc("CWE190_Integer_Overflow__int_fgets_add_03.c":68:13)
#loc97 = loc("CWE190_Integer_Overflow__int_fgets_add_03.c":68:49)
#loc98 = loc("CWE190_Integer_Overflow__int_fgets_add_03.c":91:13)
#loc99 = loc("CWE190_Integer_Overflow__int_fgets_add_03.c":91:33)
#loc100 = loc("CWE190_Integer_Overflow__int_fgets_add_03.c":62:5)
#loc101 = loc("CWE190_Integer_Overflow__int_fgets_add_03.c":62:9)
#loc102 = loc("CWE190_Integer_Overflow__int_fgets_add_03.c":64:12)
#loc103 = loc("CWE190_Integer_Overflow__int_fgets_add_03.c":64:5)
#loc104 = loc("CWE190_Integer_Overflow__int_fgets_add_03.c":65:5)
#loc105 = loc("CWE190_Integer_Overflow__int_fgets_add_03.c":80:5)
#loc106 = loc("CWE190_Integer_Overflow__int_fgets_add_03.c":65:8)
#loc107 = loc("CWE190_Integer_Overflow__int_fgets_add_03.c":65:11)
#loc108 = loc("CWE190_Integer_Overflow__int_fgets_add_03.c":66:5)
#loc109 = loc("CWE190_Integer_Overflow__int_fgets_add_03.c":67:9)
#loc110 = loc("CWE190_Integer_Overflow__int_fgets_add_03.c":79:9)
#loc111 = loc("CWE190_Integer_Overflow__int_fgets_add_03.c":70:13)
#loc112 = loc("CWE190_Integer_Overflow__int_fgets_add_03.c":78:13)
#loc113 = loc("CWE190_Integer_Overflow__int_fgets_add_03.c":70:23)
#loc114 = loc("CWE190_Integer_Overflow__int_fgets_add_03.c":70:36)
#loc115 = loc("CWE190_Integer_Overflow__int_fgets_add_03.c":70:53)
#loc116 = loc("CWE190_Integer_Overflow__int_fgets_add_03.c":70:17)
#loc117 = loc("CWE190_Integer_Overflow__int_fgets_add_03.c":70:63)
#loc118 = loc("CWE190_Integer_Overflow__int_fgets_add_03.c":71:13)
#loc119 = loc("CWE190_Integer_Overflow__int_fgets_add_03.c":74:13)
#loc120 = loc("CWE190_Integer_Overflow__int_fgets_add_03.c":76:13)
#loc121 = loc("CWE190_Integer_Overflow__int_fgets_add_03.c":73:29)
#loc122 = loc("CWE190_Integer_Overflow__int_fgets_add_03.c":73:24)
#loc123 = loc("CWE190_Integer_Overflow__int_fgets_add_03.c":73:17)
#loc124 = loc("CWE190_Integer_Overflow__int_fgets_add_03.c":73:40)
#loc125 = loc("CWE190_Integer_Overflow__int_fgets_add_03.c":77:27)
#loc126 = loc("CWE190_Integer_Overflow__int_fgets_add_03.c":77:17)
#loc127 = loc("CWE190_Integer_Overflow__int_fgets_add_03.c":81:5)
#loc128 = loc("CWE190_Integer_Overflow__int_fgets_add_03.c":98:5)
#loc129 = loc("CWE190_Integer_Overflow__int_fgets_add_03.c":81:8)
#loc130 = loc("CWE190_Integer_Overflow__int_fgets_add_03.c":81:11)
#loc131 = loc("CWE190_Integer_Overflow__int_fgets_add_03.c":82:5)
#loc132 = loc("CWE190_Integer_Overflow__int_fgets_add_03.c":85:5)
#loc133 = loc("CWE190_Integer_Overflow__int_fgets_add_03.c":87:5)
#loc134 = loc("CWE190_Integer_Overflow__int_fgets_add_03.c":84:9)
#loc135 = loc("CWE190_Integer_Overflow__int_fgets_add_03.c":89:9)
#loc136 = loc("CWE190_Integer_Overflow__int_fgets_add_03.c":97:9)
#loc137 = loc("CWE190_Integer_Overflow__int_fgets_add_03.c":89:13)
#loc138 = loc("CWE190_Integer_Overflow__int_fgets_add_03.c":89:20)
#loc139 = loc("CWE190_Integer_Overflow__int_fgets_add_03.c":90:9)
#loc140 = loc("CWE190_Integer_Overflow__int_fgets_add_03.c":93:9)
#loc141 = loc("CWE190_Integer_Overflow__int_fgets_add_03.c":95:9)
#loc142 = loc("CWE190_Integer_Overflow__int_fgets_add_03.c":91:26)
#loc143 = loc("CWE190_Integer_Overflow__int_fgets_add_03.c":92:26)
#loc144 = loc("CWE190_Integer_Overflow__int_fgets_add_03.c":92:13)
#loc145 = loc("CWE190_Integer_Overflow__int_fgets_add_03.c":96:13)
#loc146 = loc("CWE190_Integer_Overflow__int_fgets_add_03.c":102:1)
#loc147 = loc("CWE190_Integer_Overflow__int_fgets_add_03.c":136:1)
#loc148 = loc("CWE190_Integer_Overflow__int_fgets_add_03.c":110:13)
#loc149 = loc("CWE190_Integer_Overflow__int_fgets_add_03.c":110:49)
#loc150 = loc("CWE190_Integer_Overflow__int_fgets_add_03.c":128:13)
#loc151 = loc("CWE190_Integer_Overflow__int_fgets_add_03.c":128:33)
#loc152 = loc("CWE190_Integer_Overflow__int_fgets_add_03.c":104:5)
#loc153 = loc("CWE190_Integer_Overflow__int_fgets_add_03.c":104:9)
#loc154 = loc("CWE190_Integer_Overflow__int_fgets_add_03.c":106:12)
#loc155 = loc("CWE190_Integer_Overflow__int_fgets_add_03.c":106:5)
#loc156 = loc("CWE190_Integer_Overflow__int_fgets_add_03.c":107:5)
#loc157 = loc("CWE190_Integer_Overflow__int_fgets_add_03.c":122:5)
#loc158 = loc("CWE190_Integer_Overflow__int_fgets_add_03.c":107:8)
#loc159 = loc("CWE190_Integer_Overflow__int_fgets_add_03.c":107:11)
#loc160 = loc("CWE190_Integer_Overflow__int_fgets_add_03.c":108:5)
#loc161 = loc("CWE190_Integer_Overflow__int_fgets_add_03.c":109:9)
#loc162 = loc("CWE190_Integer_Overflow__int_fgets_add_03.c":121:9)
#loc163 = loc("CWE190_Integer_Overflow__int_fgets_add_03.c":112:13)
#loc164 = loc("CWE190_Integer_Overflow__int_fgets_add_03.c":120:13)
#loc165 = loc("CWE190_Integer_Overflow__int_fgets_add_03.c":112:23)
#loc166 = loc("CWE190_Integer_Overflow__int_fgets_add_03.c":112:36)
#loc167 = loc("CWE190_Integer_Overflow__int_fgets_add_03.c":112:53)
#loc168 = loc("CWE190_Integer_Overflow__int_fgets_add_03.c":112:17)
#loc169 = loc("CWE190_Integer_Overflow__int_fgets_add_03.c":112:63)
#loc170 = loc("CWE190_Integer_Overflow__int_fgets_add_03.c":113:13)
#loc171 = loc("CWE190_Integer_Overflow__int_fgets_add_03.c":116:13)
#loc172 = loc("CWE190_Integer_Overflow__int_fgets_add_03.c":118:13)
#loc173 = loc("CWE190_Integer_Overflow__int_fgets_add_03.c":115:29)
#loc174 = loc("CWE190_Integer_Overflow__int_fgets_add_03.c":115:24)
#loc175 = loc("CWE190_Integer_Overflow__int_fgets_add_03.c":115:17)
#loc176 = loc("CWE190_Integer_Overflow__int_fgets_add_03.c":115:40)
#loc177 = loc("CWE190_Integer_Overflow__int_fgets_add_03.c":119:27)
#loc178 = loc("CWE190_Integer_Overflow__int_fgets_add_03.c":119:17)
#loc179 = loc("CWE190_Integer_Overflow__int_fgets_add_03.c":123:5)
#loc180 = loc("CWE190_Integer_Overflow__int_fgets_add_03.c":135:5)
#loc181 = loc("CWE190_Integer_Overflow__int_fgets_add_03.c":123:8)
#loc182 = loc("CWE190_Integer_Overflow__int_fgets_add_03.c":123:11)
#loc183 = loc("CWE190_Integer_Overflow__int_fgets_add_03.c":124:5)
#loc184 = loc("CWE190_Integer_Overflow__int_fgets_add_03.c":126:9)
#loc185 = loc("CWE190_Integer_Overflow__int_fgets_add_03.c":134:9)
#loc186 = loc("CWE190_Integer_Overflow__int_fgets_add_03.c":126:13)
#loc187 = loc("CWE190_Integer_Overflow__int_fgets_add_03.c":126:20)
#loc188 = loc("CWE190_Integer_Overflow__int_fgets_add_03.c":127:9)
#loc189 = loc("CWE190_Integer_Overflow__int_fgets_add_03.c":130:9)
#loc190 = loc("CWE190_Integer_Overflow__int_fgets_add_03.c":132:9)
#loc191 = loc("CWE190_Integer_Overflow__int_fgets_add_03.c":128:26)
#loc192 = loc("CWE190_Integer_Overflow__int_fgets_add_03.c":129:26)
#loc193 = loc("CWE190_Integer_Overflow__int_fgets_add_03.c":129:13)
#loc194 = loc("CWE190_Integer_Overflow__int_fgets_add_03.c":133:23)
#loc195 = loc("CWE190_Integer_Overflow__int_fgets_add_03.c":133:13)
#loc196 = loc("CWE190_Integer_Overflow__int_fgets_add_03.c":139:1)
#loc197 = loc("CWE190_Integer_Overflow__int_fgets_add_03.c":162:1)
#loc198 = loc("CWE190_Integer_Overflow__int_fgets_add_03.c":158:13)
#loc199 = loc("CWE190_Integer_Overflow__int_fgets_add_03.c":158:33)
#loc200 = loc("CWE190_Integer_Overflow__int_fgets_add_03.c":141:5)
#loc201 = loc("CWE190_Integer_Overflow__int_fgets_add_03.c":141:9)
#loc202 = loc("CWE190_Integer_Overflow__int_fgets_add_03.c":143:12)
#loc203 = loc("CWE190_Integer_Overflow__int_fgets_add_03.c":143:5)
#loc204 = loc("CWE190_Integer_Overflow__int_fgets_add_03.c":144:5)
#loc205 = loc("CWE190_Integer_Overflow__int_fgets_add_03.c":153:5)
#loc206 = loc("CWE190_Integer_Overflow__int_fgets_add_03.c":144:8)
#loc207 = loc("CWE190_Integer_Overflow__int_fgets_add_03.c":144:11)
#loc208 = loc("CWE190_Integer_Overflow__int_fgets_add_03.c":145:5)
#loc209 = loc("CWE190_Integer_Overflow__int_fgets_add_03.c":148:5)
#loc210 = loc("CWE190_Integer_Overflow__int_fgets_add_03.c":150:5)
#loc211 = loc("CWE190_Integer_Overflow__int_fgets_add_03.c":147:19)
#loc212 = loc("CWE190_Integer_Overflow__int_fgets_add_03.c":147:9)
#loc213 = loc("CWE190_Integer_Overflow__int_fgets_add_03.c":152:16)
#loc214 = loc("CWE190_Integer_Overflow__int_fgets_add_03.c":152:9)
#loc215 = loc("CWE190_Integer_Overflow__int_fgets_add_03.c":154:5)
#loc216 = loc("CWE190_Integer_Overflow__int_fgets_add_03.c":161:5)
#loc217 = loc("CWE190_Integer_Overflow__int_fgets_add_03.c":154:8)
#loc218 = loc("CWE190_Integer_Overflow__int_fgets_add_03.c":154:11)
#loc219 = loc("CWE190_Integer_Overflow__int_fgets_add_03.c":155:5)
#loc220 = loc("CWE190_Integer_Overflow__int_fgets_add_03.c":156:9)
#loc221 = loc("CWE190_Integer_Overflow__int_fgets_add_03.c":160:9)
#loc222 = loc("CWE190_Integer_Overflow__int_fgets_add_03.c":158:26)
#loc223 = loc("CWE190_Integer_Overflow__int_fgets_add_03.c":159:26)
#loc224 = loc("CWE190_Integer_Overflow__int_fgets_add_03.c":159:13)
#loc225 = loc("CWE190_Integer_Overflow__int_fgets_add_03.c":165:1)
#loc226 = loc("CWE190_Integer_Overflow__int_fgets_add_03.c":183:1)
#loc227 = loc("CWE190_Integer_Overflow__int_fgets_add_03.c":179:13)
#loc228 = loc("CWE190_Integer_Overflow__int_fgets_add_03.c":179:33)
#loc229 = loc("CWE190_Integer_Overflow__int_fgets_add_03.c":167:5)
#loc230 = loc("CWE190_Integer_Overflow__int_fgets_add_03.c":167:9)
#loc231 = loc("CWE190_Integer_Overflow__int_fgets_add_03.c":169:12)
#loc232 = loc("CWE190_Integer_Overflow__int_fgets_add_03.c":169:5)
#loc233 = loc("CWE190_Integer_Overflow__int_fgets_add_03.c":170:5)
#loc234 = loc("CWE190_Integer_Overflow__int_fgets_add_03.c":174:5)
#loc235 = loc("CWE190_Integer_Overflow__int_fgets_add_03.c":170:8)
#loc236 = loc("CWE190_Integer_Overflow__int_fgets_add_03.c":170:11)
#loc237 = loc("CWE190_Integer_Overflow__int_fgets_add_03.c":171:5)
#loc238 = loc("CWE190_Integer_Overflow__int_fgets_add_03.c":173:16)
#loc239 = loc("CWE190_Integer_Overflow__int_fgets_add_03.c":173:9)
#loc240 = loc("CWE190_Integer_Overflow__int_fgets_add_03.c":175:5)
#loc241 = loc("CWE190_Integer_Overflow__int_fgets_add_03.c":182:5)
#loc242 = loc("CWE190_Integer_Overflow__int_fgets_add_03.c":175:8)
#loc243 = loc("CWE190_Integer_Overflow__int_fgets_add_03.c":175:11)
#loc244 = loc("CWE190_Integer_Overflow__int_fgets_add_03.c":176:5)
#loc245 = loc("CWE190_Integer_Overflow__int_fgets_add_03.c":177:9)
#loc246 = loc("CWE190_Integer_Overflow__int_fgets_add_03.c":181:9)
#loc247 = loc("CWE190_Integer_Overflow__int_fgets_add_03.c":179:26)
#loc248 = loc("CWE190_Integer_Overflow__int_fgets_add_03.c":180:26)
#loc249 = loc("CWE190_Integer_Overflow__int_fgets_add_03.c":180:13)
#loc250 = loc(fused[#loc1, #loc2])
#loc251 = loc(fused[#loc3, #loc4])
#loc252 = loc(fused[#loc5, #loc6])
#loc253 = loc(fused[#loc7, #loc8])
#loc254 = loc(fused[#loc10, #loc11])
#loc255 = loc(fused[#loc12, #loc13])
#loc256 = loc(fused[#loc14, #loc15])
#loc257 = loc(fused[#loc16, #loc17])
#loc258 = loc(fused[#loc18, #loc19])
#loc259 = loc(fused[#loc21, #loc20])
#loc260 = loc(fused[#loc22, #loc23])
#loc261 = loc(fused[#loc24, #loc25])
#loc262 = loc(fused[#loc26, #loc23])
#loc263 = loc(fused[#loc27, #loc28])
#loc264 = loc(fused[#loc29, #loc30])
#loc265 = loc(fused[#loc34, #loc35])
#loc266 = loc(fused[#loc36, #loc37, #loc38, #loc30])
#loc267 = loc(fused[#loc41, #loc42])
#loc268 = loc(fused[#loc44, #loc45])
#loc269 = loc(fused[#loc46, #loc47])
#loc270 = loc(fused[#loc48, #loc45])
#loc271 = loc(fused[#loc49, #loc50])
#loc272 = loc(fused[#loc54, #loc55])
#loc273 = loc(fused[#loc56, #loc57])
#loc274 = loc(fused[#loc58, #loc59])
#loc275 = loc(fused[#loc60, #loc61])
#loc276 = loc(fused[#loc62, #loc63])
#loc277 = loc(fused[#loc64, #loc65])
#loc278 = loc(fused[#loc66, #loc67])
#loc279 = loc(fused[#loc72, #loc73])
#loc282 = loc(fused[#loc83, #loc84])
#loc283 = loc(fused[#loc87, #loc88])
#loc284 = loc(fused[#loc91, #loc90])
#loc285 = loc(fused[#loc94, #loc95])
#loc286 = loc(fused[#loc96, #loc97])
#loc287 = loc(fused[#loc98, #loc99])
#loc288 = loc(fused[#loc100, #loc101])
#loc289 = loc(fused[#loc103, #loc102])
#loc290 = loc(fused[#loc104, #loc105])
#loc291 = loc(fused[#loc106, #loc107])
#loc292 = loc(fused[#loc108, #loc105])
#loc293 = loc(fused[#loc109, #loc110])
#loc294 = loc(fused[#loc111, #loc112])
#loc295 = loc(fused[#loc116, #loc117])
#loc296 = loc(fused[#loc118, #loc119, #loc120, #loc112])
#loc297 = loc(fused[#loc123, #loc124])
#loc298 = loc(fused[#loc127, #loc128])
#loc299 = loc(fused[#loc129, #loc130])
#loc300 = loc(fused[#loc131, #loc132, #loc133, #loc128])
#loc301 = loc(fused[#loc135, #loc136])
#loc302 = loc(fused[#loc137, #loc138])
#loc303 = loc(fused[#loc139, #loc140, #loc141, #loc136])
#loc304 = loc(fused[#loc146, #loc147])
#loc305 = loc(fused[#loc148, #loc149])
#loc306 = loc(fused[#loc150, #loc151])
#loc307 = loc(fused[#loc152, #loc153])
#loc308 = loc(fused[#loc155, #loc154])
#loc309 = loc(fused[#loc156, #loc157])
#loc310 = loc(fused[#loc158, #loc159])
#loc311 = loc(fused[#loc160, #loc157])
#loc312 = loc(fused[#loc161, #loc162])
#loc313 = loc(fused[#loc163, #loc164])
#loc314 = loc(fused[#loc168, #loc169])
#loc315 = loc(fused[#loc170, #loc171, #loc172, #loc164])
#loc316 = loc(fused[#loc175, #loc176])
#loc317 = loc(fused[#loc179, #loc180])
#loc318 = loc(fused[#loc181, #loc182])
#loc319 = loc(fused[#loc183, #loc180])
#loc320 = loc(fused[#loc184, #loc185])
#loc321 = loc(fused[#loc186, #loc187])
#loc322 = loc(fused[#loc188, #loc189, #loc190, #loc185])
#loc323 = loc(fused[#loc196, #loc197])
#loc324 = loc(fused[#loc198, #loc199])
#loc325 = loc(fused[#loc200, #loc201])
#loc326 = loc(fused[#loc203, #loc202])
#loc327 = loc(fused[#loc204, #loc205])
#loc328 = loc(fused[#loc206, #loc207])
#loc329 = loc(fused[#loc208, #loc209, #loc210, #loc205])
#loc330 = loc(fused[#loc214, #loc213])
#loc331 = loc(fused[#loc215, #loc216])
#loc332 = loc(fused[#loc217, #loc218])
#loc333 = loc(fused[#loc219, #loc216])
#loc334 = loc(fused[#loc220, #loc221])
#loc335 = loc(fused[#loc225, #loc226])
#loc336 = loc(fused[#loc227, #loc228])
#loc337 = loc(fused[#loc229, #loc230])
#loc338 = loc(fused[#loc232, #loc231])
#loc339 = loc(fused[#loc233, #loc234])
#loc340 = loc(fused[#loc235, #loc236])
#loc341 = loc(fused[#loc237, #loc234])
#loc342 = loc(fused[#loc239, #loc238])
#loc343 = loc(fused[#loc240, #loc241])
#loc344 = loc(fused[#loc242, #loc243])
#loc345 = loc(fused[#loc244, #loc241])
#loc346 = loc(fused[#loc245, #loc246])
