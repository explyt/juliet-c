!s32i = !cir.int<s, 32>
!s8i = !cir.int<s, 8>
!u64i = !cir.int<u, 64>
!u8i = !cir.int<u, 8>
!void = !cir.void
#fn_attr = #cir<extra({nothrow = #cir.nothrow})>
#fn_attr1 = #cir<extra({inline = #cir.inline<no>, nothrow = #cir.nothrow, optnone = #cir.optnone, uwtable = #cir.uwtable<async>})>
module @"/workspaces/juliet-c/testcases/CWE121_Stack_Based_Buffer_Overflow/s06/CWE121_Stack_Based_Buffer_Overflow__CWE806_char_alloca_loop_10.c" attributes {cir.lang = #cir.lang<c>, cir.sob = #cir.signed_overflow_behavior<undefined>, cir.triple = "x86_64-unknown-linux-gnu", cir.type_size_info = #cir.type_size_info<char = 8, int = 32, size_t = 64>, cir.uwtable = #cir.uwtable<async>, dlti.dl_spec = #dlti.dl_spec<f80 = dense<128> : vector<2xi64>, i128 = dense<128> : vector<2xi64>, !llvm.ptr<270> = dense<32> : vector<4xi64>, i64 = dense<64> : vector<2xi64>, !llvm.ptr = dense<64> : vector<4xi64>, i1 = dense<8> : vector<2xi64>, !llvm.ptr<272> = dense<64> : vector<4xi64>, !llvm.ptr<271> = dense<32> : vector<4xi64>, i8 = dense<8> : vector<2xi64>, i16 = dense<16> : vector<2xi64>, i32 = dense<32> : vector<2xi64>, f16 = dense<16> : vector<2xi64>, f64 = dense<64> : vector<2xi64>, f128 = dense<128> : vector<2xi64>, "dlti.stack_alignment" = 128 : i64, "dlti.mangling_mode" = "e", "dlti.endianness" = "little">} {
  cir.global "private" external @globalTrue : !s32i {alignment = 4 : i64} loc(#loc184)
  cir.func private @strlen(!cir.ptr<!s8i>) -> !u64i extra(#fn_attr) loc(#loc185)
  cir.func private @printLine(!cir.ptr<!s8i>) loc(#loc186)
  cir.func no_proto @CWE121_Stack_Based_Buffer_Overflow__CWE806_char_alloca_loop_10_bad() extra(#fn_attr1) {
    %0 = cir.alloca !cir.ptr<!s8i>, !cir.ptr<!cir.ptr<!s8i>>, ["data"] {alignment = 8 : i64} loc(#loc188)
    %1 = cir.alloca !cir.ptr<!s8i>, !cir.ptr<!cir.ptr<!s8i>>, ["dataBuffer", init] {alignment = 8 : i64} loc(#loc189)
    %2 = cir.const #cir.int<100> : !s32i loc(#loc12)
    %3 = cir.cast(integral, %2 : !s32i), !u64i loc(#loc12)
    %4 = cir.const #cir.int<1> : !u64i loc(#loc12)
    %5 = cir.binop(mul, %3, %4) : !u64i loc(#loc12)
    %6 = cir.alloca !u8i, !cir.ptr<!u8i>, %5 : !u64i, ["bi_alloca"] {alignment = 16 : i64} loc(#loc12)
    %7 = cir.cast(bitcast, %6 : !cir.ptr<!u8i>), !cir.ptr<!void> loc(#loc12)
    %8 = cir.cast(bitcast, %7 : !cir.ptr<!void>), !cir.ptr<!s8i> loc(#loc12)
    cir.store %8, %1 : !cir.ptr<!s8i>, !cir.ptr<!cir.ptr<!s8i>> loc(#loc189)
    %9 = cir.load %1 : !cir.ptr<!cir.ptr<!s8i>>, !cir.ptr<!s8i> loc(#loc13)
    cir.store %9, %0 : !cir.ptr<!s8i>, !cir.ptr<!cir.ptr<!s8i>> loc(#loc190)
    cir.scope {
      %10 = cir.get_global @globalTrue : !cir.ptr<!s32i> loc(#loc184)
      %11 = cir.load %10 : !cir.ptr<!s32i>, !s32i loc(#loc17)
      %12 = cir.cast(int_to_bool, %11 : !s32i), !cir.bool loc(#loc17)
      cir.if %12 {
        %13 = cir.load %0 : !cir.ptr<!cir.ptr<!s8i>>, !cir.ptr<!s8i> loc(#loc19)
        %14 = cir.cast(bitcast, %13 : !cir.ptr<!s8i>), !cir.ptr<!void> loc(#loc19)
        %15 = cir.const #cir.int<65> : !s32i loc(#loc20)
        %16 = cir.const #cir.int<100> : !s32i loc(#loc21)
        %17 = cir.const #cir.int<1> : !s32i loc(#loc22)
        %18 = cir.binop(sub, %16, %17) nsw : !s32i loc(#loc21)
        %19 = cir.cast(integral, %18 : !s32i), !u64i loc(#loc21)
        cir.libc.memset %19 bytes from %14 set to %15 : !cir.ptr<!void>, !s32i, !u64i loc(#loc193)
        %20 = cir.const #cir.int<0> : !s32i loc(#loc25)
        %21 = cir.cast(integral, %20 : !s32i), !s8i loc(#loc25)
        %22 = cir.load %0 : !cir.ptr<!cir.ptr<!s8i>>, !cir.ptr<!s8i> loc(#loc26)
        %23 = cir.const #cir.int<100> : !s32i loc(#loc27)
        %24 = cir.const #cir.int<1> : !s32i loc(#loc28)
        %25 = cir.binop(sub, %23, %24) nsw : !s32i loc(#loc27)
        %26 = cir.ptr_stride(%22 : !cir.ptr<!s8i>, %25 : !s32i), !cir.ptr<!s8i> loc(#loc29)
        cir.store %21, %26 : !s8i, !cir.ptr<!s8i> loc(#loc194)
      } loc(#loc192)
    } loc(#loc191)
    cir.scope {
      %10 = cir.alloca !cir.array<!s8i x 50>, !cir.ptr<!cir.array<!s8i x 50>>, ["dest"] {alignment = 16 : i64} loc(#loc196)
      %11 = cir.alloca !u64i, !cir.ptr<!u64i>, ["i"] {alignment = 8 : i64} loc(#loc197)
      %12 = cir.alloca !u64i, !cir.ptr<!u64i>, ["dataLen"] {alignment = 8 : i64} loc(#loc198)
      %13 = cir.const #cir.zero : !cir.array<!s8i x 50> loc(#loc196)
      cir.store %13, %10 : !cir.array<!s8i x 50>, !cir.ptr<!cir.array<!s8i x 50>> loc(#loc196)
      %14 = cir.get_global @strlen : !cir.ptr<!cir.func<(!cir.ptr<!s8i>) -> !u64i>> loc(#loc37)
      %15 = cir.load %0 : !cir.ptr<!cir.ptr<!s8i>>, !cir.ptr<!s8i> loc(#loc38)
      %16 = cir.call @strlen(%15) : (!cir.ptr<!s8i>) -> !u64i side_effect(pure) extra(#fn_attr) loc(#loc37)
      cir.store %16, %12 : !u64i, !cir.ptr<!u64i> loc(#loc199)
      cir.scope {
        %25 = cir.const #cir.int<0> : !s32i loc(#loc43)
        %26 = cir.cast(integral, %25 : !s32i), !u64i loc(#loc43)
        cir.store %26, %11 : !u64i, !cir.ptr<!u64i> loc(#loc201)
        cir.for : cond {
          %27 = cir.load %11 : !cir.ptr<!u64i>, !u64i loc(#loc45)
          %28 = cir.load %12 : !cir.ptr<!u64i>, !u64i loc(#loc46)
          %29 = cir.cmp(lt, %27, %28) : !u64i, !cir.bool loc(#loc202)
          cir.condition(%29) loc(#loc47)
        } body {
          cir.scope {
            %27 = cir.load %0 : !cir.ptr<!cir.ptr<!s8i>>, !cir.ptr<!s8i> loc(#loc49)
            %28 = cir.load %11 : !cir.ptr<!u64i>, !u64i loc(#loc50)
            %29 = cir.ptr_stride(%27 : !cir.ptr<!s8i>, %28 : !u64i), !cir.ptr<!s8i> loc(#loc51)
            %30 = cir.load %29 : !cir.ptr<!s8i>, !s8i loc(#loc49)
            %31 = cir.load %11 : !cir.ptr<!u64i>, !u64i loc(#loc52)
            %32 = cir.cast(array_to_ptrdecay, %10 : !cir.ptr<!cir.array<!s8i x 50>>), !cir.ptr<!s8i> loc(#loc53)
            %33 = cir.ptr_stride(%32 : !cir.ptr<!s8i>, %31 : !u64i), !cir.ptr<!s8i> loc(#loc53)
            cir.store %30, %33 : !s8i, !cir.ptr<!s8i> loc(#loc204)
          } loc(#loc203)
          cir.yield loc(#loc42)
        } step {
          %27 = cir.load %11 : !cir.ptr<!u64i>, !u64i loc(#loc54)
          %28 = cir.unary(inc, %27) : !u64i, !u64i loc(#loc55)
          cir.store %28, %11 : !u64i, !cir.ptr<!u64i> loc(#loc205)
          cir.yield loc(#loc200)
        } loc(#loc200)
      } loc(#loc200)
      %17 = cir.const #cir.int<0> : !s32i loc(#loc56)
      %18 = cir.cast(integral, %17 : !s32i), !s8i loc(#loc56)
      %19 = cir.const #cir.int<50> : !s32i loc(#loc57)
      %20 = cir.const #cir.int<1> : !s32i loc(#loc58)
      %21 = cir.binop(sub, %19, %20) nsw : !s32i loc(#loc57)
      %22 = cir.cast(array_to_ptrdecay, %10 : !cir.ptr<!cir.array<!s8i x 50>>), !cir.ptr<!s8i> loc(#loc59)
      %23 = cir.ptr_stride(%22 : !cir.ptr<!s8i>, %21 : !s32i), !cir.ptr<!s8i> loc(#loc59)
      cir.store %18, %23 : !s8i, !cir.ptr<!s8i> loc(#loc206)
      %24 = cir.load %0 : !cir.ptr<!cir.ptr<!s8i>>, !cir.ptr<!s8i> loc(#loc60)
      cir.call @printLine(%24) : (!cir.ptr<!s8i>) -> () loc(#loc61)
    } loc(#loc195)
    cir.return loc(#loc8)
  } loc(#loc187)
  cir.func no_proto @CWE121_Stack_Based_Buffer_Overflow__CWE806_char_alloca_loop_10_good() extra(#fn_attr1) {
    %0 = cir.get_global @goodG2B1 : !cir.ptr<!cir.func<()>> loc(#loc208)
    cir.call %0() : (!cir.ptr<!cir.func<()>>) -> () loc(#loc64)
    %1 = cir.get_global @goodG2B2 : !cir.ptr<!cir.func<()>> loc(#loc209)
    cir.call %1() : (!cir.ptr<!cir.func<()>>) -> () loc(#loc66)
    cir.return loc(#loc63)
  } loc(#loc207)
  cir.global "private" external @globalFalse : !s32i {alignment = 4 : i64} loc(#loc210)
  cir.global "private" constant cir_private dsolocal @".str" = #cir.const_array<"Benign, fixed string\00" : !cir.array<!s8i x 21>> : !cir.array<!s8i x 21> {alignment = 1 : i64} loc(#loc70)
  cir.func no_proto internal private @goodG2B1() extra(#fn_attr1) {
    %0 = cir.alloca !cir.ptr<!s8i>, !cir.ptr<!cir.ptr<!s8i>>, ["data"] {alignment = 8 : i64} loc(#loc212)
    %1 = cir.alloca !cir.ptr<!s8i>, !cir.ptr<!cir.ptr<!s8i>>, ["dataBuffer", init] {alignment = 8 : i64} loc(#loc213)
    %2 = cir.const #cir.int<100> : !s32i loc(#loc76)
    %3 = cir.cast(integral, %2 : !s32i), !u64i loc(#loc76)
    %4 = cir.const #cir.int<1> : !u64i loc(#loc76)
    %5 = cir.binop(mul, %3, %4) : !u64i loc(#loc76)
    %6 = cir.alloca !u8i, !cir.ptr<!u8i>, %5 : !u64i, ["bi_alloca"] {alignment = 16 : i64} loc(#loc76)
    %7 = cir.cast(bitcast, %6 : !cir.ptr<!u8i>), !cir.ptr<!void> loc(#loc76)
    %8 = cir.cast(bitcast, %7 : !cir.ptr<!void>), !cir.ptr<!s8i> loc(#loc76)
    cir.store %8, %1 : !cir.ptr<!s8i>, !cir.ptr<!cir.ptr<!s8i>> loc(#loc213)
    %9 = cir.load %1 : !cir.ptr<!cir.ptr<!s8i>>, !cir.ptr<!s8i> loc(#loc77)
    cir.store %9, %0 : !cir.ptr<!s8i>, !cir.ptr<!cir.ptr<!s8i>> loc(#loc214)
    cir.scope {
      %10 = cir.get_global @globalFalse : !cir.ptr<!s32i> loc(#loc210)
      %11 = cir.load %10 : !cir.ptr<!s32i>, !s32i loc(#loc81)
      %12 = cir.cast(int_to_bool, %11 : !s32i), !cir.bool loc(#loc81)
      cir.if %12 {
        %13 = cir.get_global @".str" : !cir.ptr<!cir.array<!s8i x 21>> loc(#loc70)
        %14 = cir.cast(array_to_ptrdecay, %13 : !cir.ptr<!cir.array<!s8i x 21>>), !cir.ptr<!s8i> loc(#loc70)
        cir.call @printLine(%14) : (!cir.ptr<!s8i>) -> () loc(#loc85)
      } else {
        %13 = cir.load %0 : !cir.ptr<!cir.ptr<!s8i>>, !cir.ptr<!s8i> loc(#loc86)
        %14 = cir.cast(bitcast, %13 : !cir.ptr<!s8i>), !cir.ptr<!void> loc(#loc86)
        %15 = cir.const #cir.int<65> : !s32i loc(#loc87)
        %16 = cir.const #cir.int<50> : !s32i loc(#loc88)
        %17 = cir.const #cir.int<1> : !s32i loc(#loc89)
        %18 = cir.binop(sub, %16, %17) nsw : !s32i loc(#loc88)
        %19 = cir.cast(integral, %18 : !s32i), !u64i loc(#loc88)
        cir.libc.memset %19 bytes from %14 set to %15 : !cir.ptr<!void>, !s32i, !u64i loc(#loc217)
        %20 = cir.const #cir.int<0> : !s32i loc(#loc92)
        %21 = cir.cast(integral, %20 : !s32i), !s8i loc(#loc92)
        %22 = cir.load %0 : !cir.ptr<!cir.ptr<!s8i>>, !cir.ptr<!s8i> loc(#loc93)
        %23 = cir.const #cir.int<50> : !s32i loc(#loc94)
        %24 = cir.const #cir.int<1> : !s32i loc(#loc95)
        %25 = cir.binop(sub, %23, %24) nsw : !s32i loc(#loc94)
        %26 = cir.ptr_stride(%22 : !cir.ptr<!s8i>, %25 : !s32i), !cir.ptr<!s8i> loc(#loc96)
        cir.store %21, %26 : !s8i, !cir.ptr<!s8i> loc(#loc218)
      } loc(#loc216)
    } loc(#loc215)
    cir.scope {
      %10 = cir.alloca !cir.array<!s8i x 50>, !cir.ptr<!cir.array<!s8i x 50>>, ["dest"] {alignment = 16 : i64} loc(#loc220)
      %11 = cir.alloca !u64i, !cir.ptr<!u64i>, ["i"] {alignment = 8 : i64} loc(#loc221)
      %12 = cir.alloca !u64i, !cir.ptr<!u64i>, ["dataLen"] {alignment = 8 : i64} loc(#loc222)
      %13 = cir.const #cir.zero : !cir.array<!s8i x 50> loc(#loc220)
      cir.store %13, %10 : !cir.array<!s8i x 50>, !cir.ptr<!cir.array<!s8i x 50>> loc(#loc220)
      %14 = cir.get_global @strlen : !cir.ptr<!cir.func<(!cir.ptr<!s8i>) -> !u64i>> loc(#loc104)
      %15 = cir.load %0 : !cir.ptr<!cir.ptr<!s8i>>, !cir.ptr<!s8i> loc(#loc105)
      %16 = cir.call @strlen(%15) : (!cir.ptr<!s8i>) -> !u64i side_effect(pure) extra(#fn_attr) loc(#loc104)
      cir.store %16, %12 : !u64i, !cir.ptr<!u64i> loc(#loc223)
      cir.scope {
        %25 = cir.const #cir.int<0> : !s32i loc(#loc110)
        %26 = cir.cast(integral, %25 : !s32i), !u64i loc(#loc110)
        cir.store %26, %11 : !u64i, !cir.ptr<!u64i> loc(#loc225)
        cir.for : cond {
          %27 = cir.load %11 : !cir.ptr<!u64i>, !u64i loc(#loc112)
          %28 = cir.load %12 : !cir.ptr<!u64i>, !u64i loc(#loc113)
          %29 = cir.cmp(lt, %27, %28) : !u64i, !cir.bool loc(#loc226)
          cir.condition(%29) loc(#loc114)
        } body {
          cir.scope {
            %27 = cir.load %0 : !cir.ptr<!cir.ptr<!s8i>>, !cir.ptr<!s8i> loc(#loc116)
            %28 = cir.load %11 : !cir.ptr<!u64i>, !u64i loc(#loc117)
            %29 = cir.ptr_stride(%27 : !cir.ptr<!s8i>, %28 : !u64i), !cir.ptr<!s8i> loc(#loc118)
            %30 = cir.load %29 : !cir.ptr<!s8i>, !s8i loc(#loc116)
            %31 = cir.load %11 : !cir.ptr<!u64i>, !u64i loc(#loc119)
            %32 = cir.cast(array_to_ptrdecay, %10 : !cir.ptr<!cir.array<!s8i x 50>>), !cir.ptr<!s8i> loc(#loc120)
            %33 = cir.ptr_stride(%32 : !cir.ptr<!s8i>, %31 : !u64i), !cir.ptr<!s8i> loc(#loc120)
            cir.store %30, %33 : !s8i, !cir.ptr<!s8i> loc(#loc228)
          } loc(#loc227)
          cir.yield loc(#loc109)
        } step {
          %27 = cir.load %11 : !cir.ptr<!u64i>, !u64i loc(#loc121)
          %28 = cir.unary(inc, %27) : !u64i, !u64i loc(#loc122)
          cir.store %28, %11 : !u64i, !cir.ptr<!u64i> loc(#loc229)
          cir.yield loc(#loc224)
        } loc(#loc224)
      } loc(#loc224)
      %17 = cir.const #cir.int<0> : !s32i loc(#loc123)
      %18 = cir.cast(integral, %17 : !s32i), !s8i loc(#loc123)
      %19 = cir.const #cir.int<50> : !s32i loc(#loc124)
      %20 = cir.const #cir.int<1> : !s32i loc(#loc125)
      %21 = cir.binop(sub, %19, %20) nsw : !s32i loc(#loc124)
      %22 = cir.cast(array_to_ptrdecay, %10 : !cir.ptr<!cir.array<!s8i x 50>>), !cir.ptr<!s8i> loc(#loc126)
      %23 = cir.ptr_stride(%22 : !cir.ptr<!s8i>, %21 : !s32i), !cir.ptr<!s8i> loc(#loc126)
      cir.store %18, %23 : !s8i, !cir.ptr<!s8i> loc(#loc230)
      %24 = cir.load %0 : !cir.ptr<!cir.ptr<!s8i>>, !cir.ptr<!s8i> loc(#loc127)
      cir.call @printLine(%24) : (!cir.ptr<!s8i>) -> () loc(#loc128)
    } loc(#loc219)
    cir.return loc(#loc72)
  } loc(#loc211)
  cir.func no_proto internal private @goodG2B2() extra(#fn_attr1) {
    %0 = cir.alloca !cir.ptr<!s8i>, !cir.ptr<!cir.ptr<!s8i>>, ["data"] {alignment = 8 : i64} loc(#loc232)
    %1 = cir.alloca !cir.ptr<!s8i>, !cir.ptr<!cir.ptr<!s8i>>, ["dataBuffer", init] {alignment = 8 : i64} loc(#loc233)
    %2 = cir.const #cir.int<100> : !s32i loc(#loc134)
    %3 = cir.cast(integral, %2 : !s32i), !u64i loc(#loc134)
    %4 = cir.const #cir.int<1> : !u64i loc(#loc134)
    %5 = cir.binop(mul, %3, %4) : !u64i loc(#loc134)
    %6 = cir.alloca !u8i, !cir.ptr<!u8i>, %5 : !u64i, ["bi_alloca"] {alignment = 16 : i64} loc(#loc134)
    %7 = cir.cast(bitcast, %6 : !cir.ptr<!u8i>), !cir.ptr<!void> loc(#loc134)
    %8 = cir.cast(bitcast, %7 : !cir.ptr<!void>), !cir.ptr<!s8i> loc(#loc134)
    cir.store %8, %1 : !cir.ptr<!s8i>, !cir.ptr<!cir.ptr<!s8i>> loc(#loc233)
    %9 = cir.load %1 : !cir.ptr<!cir.ptr<!s8i>>, !cir.ptr<!s8i> loc(#loc135)
    cir.store %9, %0 : !cir.ptr<!s8i>, !cir.ptr<!cir.ptr<!s8i>> loc(#loc234)
    cir.scope {
      %10 = cir.get_global @globalTrue : !cir.ptr<!s32i> loc(#loc184)
      %11 = cir.load %10 : !cir.ptr<!s32i>, !s32i loc(#loc139)
      %12 = cir.cast(int_to_bool, %11 : !s32i), !cir.bool loc(#loc139)
      cir.if %12 {
        %13 = cir.load %0 : !cir.ptr<!cir.ptr<!s8i>>, !cir.ptr<!s8i> loc(#loc141)
        %14 = cir.cast(bitcast, %13 : !cir.ptr<!s8i>), !cir.ptr<!void> loc(#loc141)
        %15 = cir.const #cir.int<65> : !s32i loc(#loc142)
        %16 = cir.const #cir.int<50> : !s32i loc(#loc143)
        %17 = cir.const #cir.int<1> : !s32i loc(#loc144)
        %18 = cir.binop(sub, %16, %17) nsw : !s32i loc(#loc143)
        %19 = cir.cast(integral, %18 : !s32i), !u64i loc(#loc143)
        cir.libc.memset %19 bytes from %14 set to %15 : !cir.ptr<!void>, !s32i, !u64i loc(#loc237)
        %20 = cir.const #cir.int<0> : !s32i loc(#loc147)
        %21 = cir.cast(integral, %20 : !s32i), !s8i loc(#loc147)
        %22 = cir.load %0 : !cir.ptr<!cir.ptr<!s8i>>, !cir.ptr<!s8i> loc(#loc148)
        %23 = cir.const #cir.int<50> : !s32i loc(#loc149)
        %24 = cir.const #cir.int<1> : !s32i loc(#loc150)
        %25 = cir.binop(sub, %23, %24) nsw : !s32i loc(#loc149)
        %26 = cir.ptr_stride(%22 : !cir.ptr<!s8i>, %25 : !s32i), !cir.ptr<!s8i> loc(#loc151)
        cir.store %21, %26 : !s8i, !cir.ptr<!s8i> loc(#loc238)
      } loc(#loc236)
    } loc(#loc235)
    cir.scope {
      %10 = cir.alloca !cir.array<!s8i x 50>, !cir.ptr<!cir.array<!s8i x 50>>, ["dest"] {alignment = 16 : i64} loc(#loc240)
      %11 = cir.alloca !u64i, !cir.ptr<!u64i>, ["i"] {alignment = 8 : i64} loc(#loc241)
      %12 = cir.alloca !u64i, !cir.ptr<!u64i>, ["dataLen"] {alignment = 8 : i64} loc(#loc242)
      %13 = cir.const #cir.zero : !cir.array<!s8i x 50> loc(#loc240)
      cir.store %13, %10 : !cir.array<!s8i x 50>, !cir.ptr<!cir.array<!s8i x 50>> loc(#loc240)
      %14 = cir.get_global @strlen : !cir.ptr<!cir.func<(!cir.ptr<!s8i>) -> !u64i>> loc(#loc159)
      %15 = cir.load %0 : !cir.ptr<!cir.ptr<!s8i>>, !cir.ptr<!s8i> loc(#loc160)
      %16 = cir.call @strlen(%15) : (!cir.ptr<!s8i>) -> !u64i side_effect(pure) extra(#fn_attr) loc(#loc159)
      cir.store %16, %12 : !u64i, !cir.ptr<!u64i> loc(#loc243)
      cir.scope {
        %25 = cir.const #cir.int<0> : !s32i loc(#loc165)
        %26 = cir.cast(integral, %25 : !s32i), !u64i loc(#loc165)
        cir.store %26, %11 : !u64i, !cir.ptr<!u64i> loc(#loc245)
        cir.for : cond {
          %27 = cir.load %11 : !cir.ptr<!u64i>, !u64i loc(#loc167)
          %28 = cir.load %12 : !cir.ptr<!u64i>, !u64i loc(#loc168)
          %29 = cir.cmp(lt, %27, %28) : !u64i, !cir.bool loc(#loc246)
          cir.condition(%29) loc(#loc169)
        } body {
          cir.scope {
            %27 = cir.load %0 : !cir.ptr<!cir.ptr<!s8i>>, !cir.ptr<!s8i> loc(#loc171)
            %28 = cir.load %11 : !cir.ptr<!u64i>, !u64i loc(#loc172)
            %29 = cir.ptr_stride(%27 : !cir.ptr<!s8i>, %28 : !u64i), !cir.ptr<!s8i> loc(#loc173)
            %30 = cir.load %29 : !cir.ptr<!s8i>, !s8i loc(#loc171)
            %31 = cir.load %11 : !cir.ptr<!u64i>, !u64i loc(#loc174)
            %32 = cir.cast(array_to_ptrdecay, %10 : !cir.ptr<!cir.array<!s8i x 50>>), !cir.ptr<!s8i> loc(#loc175)
            %33 = cir.ptr_stride(%32 : !cir.ptr<!s8i>, %31 : !u64i), !cir.ptr<!s8i> loc(#loc175)
            cir.store %30, %33 : !s8i, !cir.ptr<!s8i> loc(#loc248)
          } loc(#loc247)
          cir.yield loc(#loc164)
        } step {
          %27 = cir.load %11 : !cir.ptr<!u64i>, !u64i loc(#loc176)
          %28 = cir.unary(inc, %27) : !u64i, !u64i loc(#loc177)
          cir.store %28, %11 : !u64i, !cir.ptr<!u64i> loc(#loc249)
          cir.yield loc(#loc244)
        } loc(#loc244)
      } loc(#loc244)
      %17 = cir.const #cir.int<0> : !s32i loc(#loc178)
      %18 = cir.cast(integral, %17 : !s32i), !s8i loc(#loc178)
      %19 = cir.const #cir.int<50> : !s32i loc(#loc179)
      %20 = cir.const #cir.int<1> : !s32i loc(#loc180)
      %21 = cir.binop(sub, %19, %20) nsw : !s32i loc(#loc179)
      %22 = cir.cast(array_to_ptrdecay, %10 : !cir.ptr<!cir.array<!s8i x 50>>), !cir.ptr<!s8i> loc(#loc181)
      %23 = cir.ptr_stride(%22 : !cir.ptr<!s8i>, %21 : !s32i), !cir.ptr<!s8i> loc(#loc181)
      cir.store %18, %23 : !s8i, !cir.ptr<!s8i> loc(#loc250)
      %24 = cir.load %0 : !cir.ptr<!cir.ptr<!s8i>>, !cir.ptr<!s8i> loc(#loc182)
      cir.call @printLine(%24) : (!cir.ptr<!s8i>) -> () loc(#loc183)
    } loc(#loc239)
    cir.return loc(#loc130)
  } loc(#loc231)
} loc(#loc)
#loc = loc("/workspaces/juliet-c/testcases/CWE121_Stack_Based_Buffer_Overflow/s06/CWE121_Stack_Based_Buffer_Overflow__CWE806_char_alloca_loop_10.c":0:0)
#loc1 = loc("../../../testcasesupport/std_testcase.h":116:1)
#loc2 = loc("../../../testcasesupport/std_testcase.h":116:12)
#loc3 = loc("/usr/include/string.h":407:1)
#loc4 = loc("/usr/include/string.h":408:33)
#loc5 = loc("../../../testcasesupport/std_testcase_io.h":14:1)
#loc6 = loc("../../../testcasesupport/std_testcase_io.h":14:33)
#loc7 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE806_char_alloca_loop_10.c":23:1)
#loc8 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE806_char_alloca_loop_10.c":46:1)
#loc9 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE806_char_alloca_loop_10.c":25:5)
#loc10 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE806_char_alloca_loop_10.c":25:12)
#loc11 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE806_char_alloca_loop_10.c":26:5)
#loc12 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE806_char_alloca_loop_10.c":26:33)
#loc13 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE806_char_alloca_loop_10.c":27:12)
#loc14 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE806_char_alloca_loop_10.c":27:5)
#loc15 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE806_char_alloca_loop_10.c":28:5)
#loc16 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE806_char_alloca_loop_10.c":33:5)
#loc17 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE806_char_alloca_loop_10.c":28:8)
#loc18 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE806_char_alloca_loop_10.c":29:5)
#loc19 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE806_char_alloca_loop_10.c":31:16)
#loc20 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE806_char_alloca_loop_10.c":31:22)
#loc21 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE806_char_alloca_loop_10.c":31:27)
#loc22 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE806_char_alloca_loop_10.c":31:31)
#loc23 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE806_char_alloca_loop_10.c":31:9)
#loc24 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE806_char_alloca_loop_10.c":31:32)
#loc25 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE806_char_alloca_loop_10.c":32:23)
#loc26 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE806_char_alloca_loop_10.c":32:9)
#loc27 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE806_char_alloca_loop_10.c":32:14)
#loc28 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE806_char_alloca_loop_10.c":32:18)
#loc29 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE806_char_alloca_loop_10.c":32:19)
#loc30 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE806_char_alloca_loop_10.c":34:5)
#loc31 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE806_char_alloca_loop_10.c":45:5)
#loc32 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE806_char_alloca_loop_10.c":35:9)
#loc33 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE806_char_alloca_loop_10.c":35:25)
#loc34 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE806_char_alloca_loop_10.c":36:9)
#loc35 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE806_char_alloca_loop_10.c":36:16)
#loc36 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE806_char_alloca_loop_10.c":36:19)
#loc37 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE806_char_alloca_loop_10.c":37:19)
#loc38 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE806_char_alloca_loop_10.c":37:26)
#loc39 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE806_char_alloca_loop_10.c":37:9)
#loc40 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE806_char_alloca_loop_10.c":37:30)
#loc41 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE806_char_alloca_loop_10.c":39:9)
#loc42 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE806_char_alloca_loop_10.c":42:9)
#loc43 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE806_char_alloca_loop_10.c":39:18)
#loc44 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE806_char_alloca_loop_10.c":39:14)
#loc45 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE806_char_alloca_loop_10.c":39:21)
#loc46 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE806_char_alloca_loop_10.c":39:25)
#loc47 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE806_char_alloca_loop_10.c":39:23)
#loc48 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE806_char_alloca_loop_10.c":40:9)
#loc49 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE806_char_alloca_loop_10.c":41:23)
#loc50 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE806_char_alloca_loop_10.c":41:28)
#loc51 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE806_char_alloca_loop_10.c":41:29)
#loc52 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE806_char_alloca_loop_10.c":41:18)
#loc53 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE806_char_alloca_loop_10.c":41:13)
#loc54 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE806_char_alloca_loop_10.c":39:35)
#loc55 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE806_char_alloca_loop_10.c":39:34)
#loc56 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE806_char_alloca_loop_10.c":43:22)
#loc57 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE806_char_alloca_loop_10.c":43:14)
#loc58 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE806_char_alloca_loop_10.c":43:17)
#loc59 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE806_char_alloca_loop_10.c":43:9)
#loc60 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE806_char_alloca_loop_10.c":44:19)
#loc61 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE806_char_alloca_loop_10.c":44:9)
#loc62 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE806_char_alloca_loop_10.c":109:1)
#loc63 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE806_char_alloca_loop_10.c":113:1)
#loc64 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE806_char_alloca_loop_10.c":111:5)
#loc65 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE806_char_alloca_loop_10.c":111:14)
#loc66 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE806_char_alloca_loop_10.c":112:5)
#loc67 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE806_char_alloca_loop_10.c":112:14)
#loc68 = loc("../../../testcasesupport/std_testcase.h":117:1)
#loc69 = loc("../../../testcasesupport/std_testcase.h":117:12)
#loc70 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE806_char_alloca_loop_10.c":61:19)
#loc71 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE806_char_alloca_loop_10.c":53:1)
#loc72 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE806_char_alloca_loop_10.c":81:1)
#loc73 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE806_char_alloca_loop_10.c":55:5)
#loc74 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE806_char_alloca_loop_10.c":55:12)
#loc75 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE806_char_alloca_loop_10.c":56:5)
#loc76 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE806_char_alloca_loop_10.c":56:33)
#loc77 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE806_char_alloca_loop_10.c":57:12)
#loc78 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE806_char_alloca_loop_10.c":57:5)
#loc79 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE806_char_alloca_loop_10.c":58:5)
#loc80 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE806_char_alloca_loop_10.c":68:5)
#loc81 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE806_char_alloca_loop_10.c":58:8)
#loc82 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE806_char_alloca_loop_10.c":59:5)
#loc83 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE806_char_alloca_loop_10.c":62:5)
#loc84 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE806_char_alloca_loop_10.c":64:5)
#loc85 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE806_char_alloca_loop_10.c":61:9)
#loc86 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE806_char_alloca_loop_10.c":66:16)
#loc87 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE806_char_alloca_loop_10.c":66:22)
#loc88 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE806_char_alloca_loop_10.c":66:27)
#loc89 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE806_char_alloca_loop_10.c":66:30)
#loc90 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE806_char_alloca_loop_10.c":66:9)
#loc91 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE806_char_alloca_loop_10.c":66:31)
#loc92 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE806_char_alloca_loop_10.c":67:22)
#loc93 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE806_char_alloca_loop_10.c":67:9)
#loc94 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE806_char_alloca_loop_10.c":67:14)
#loc95 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE806_char_alloca_loop_10.c":67:17)
#loc96 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE806_char_alloca_loop_10.c":67:18)
#loc97 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE806_char_alloca_loop_10.c":69:5)
#loc98 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE806_char_alloca_loop_10.c":80:5)
#loc99 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE806_char_alloca_loop_10.c":70:9)
#loc100 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE806_char_alloca_loop_10.c":70:25)
#loc101 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE806_char_alloca_loop_10.c":71:9)
#loc102 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE806_char_alloca_loop_10.c":71:16)
#loc103 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE806_char_alloca_loop_10.c":71:19)
#loc104 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE806_char_alloca_loop_10.c":72:19)
#loc105 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE806_char_alloca_loop_10.c":72:26)
#loc106 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE806_char_alloca_loop_10.c":72:9)
#loc107 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE806_char_alloca_loop_10.c":72:30)
#loc108 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE806_char_alloca_loop_10.c":74:9)
#loc109 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE806_char_alloca_loop_10.c":77:9)
#loc110 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE806_char_alloca_loop_10.c":74:18)
#loc111 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE806_char_alloca_loop_10.c":74:14)
#loc112 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE806_char_alloca_loop_10.c":74:21)
#loc113 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE806_char_alloca_loop_10.c":74:25)
#loc114 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE806_char_alloca_loop_10.c":74:23)
#loc115 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE806_char_alloca_loop_10.c":75:9)
#loc116 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE806_char_alloca_loop_10.c":76:23)
#loc117 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE806_char_alloca_loop_10.c":76:28)
#loc118 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE806_char_alloca_loop_10.c":76:29)
#loc119 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE806_char_alloca_loop_10.c":76:18)
#loc120 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE806_char_alloca_loop_10.c":76:13)
#loc121 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE806_char_alloca_loop_10.c":74:35)
#loc122 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE806_char_alloca_loop_10.c":74:34)
#loc123 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE806_char_alloca_loop_10.c":78:22)
#loc124 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE806_char_alloca_loop_10.c":78:14)
#loc125 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE806_char_alloca_loop_10.c":78:17)
#loc126 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE806_char_alloca_loop_10.c":78:9)
#loc127 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE806_char_alloca_loop_10.c":79:19)
#loc128 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE806_char_alloca_loop_10.c":79:9)
#loc129 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE806_char_alloca_loop_10.c":84:1)
#loc130 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE806_char_alloca_loop_10.c":107:1)
#loc131 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE806_char_alloca_loop_10.c":86:5)
#loc132 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE806_char_alloca_loop_10.c":86:12)
#loc133 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE806_char_alloca_loop_10.c":87:5)
#loc134 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE806_char_alloca_loop_10.c":87:33)
#loc135 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE806_char_alloca_loop_10.c":88:12)
#loc136 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE806_char_alloca_loop_10.c":88:5)
#loc137 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE806_char_alloca_loop_10.c":89:5)
#loc138 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE806_char_alloca_loop_10.c":94:5)
#loc139 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE806_char_alloca_loop_10.c":89:8)
#loc140 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE806_char_alloca_loop_10.c":90:5)
#loc141 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE806_char_alloca_loop_10.c":92:16)
#loc142 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE806_char_alloca_loop_10.c":92:22)
#loc143 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE806_char_alloca_loop_10.c":92:27)
#loc144 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE806_char_alloca_loop_10.c":92:30)
#loc145 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE806_char_alloca_loop_10.c":92:9)
#loc146 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE806_char_alloca_loop_10.c":92:31)
#loc147 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE806_char_alloca_loop_10.c":93:22)
#loc148 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE806_char_alloca_loop_10.c":93:9)
#loc149 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE806_char_alloca_loop_10.c":93:14)
#loc150 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE806_char_alloca_loop_10.c":93:17)
#loc151 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE806_char_alloca_loop_10.c":93:18)
#loc152 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE806_char_alloca_loop_10.c":95:5)
#loc153 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE806_char_alloca_loop_10.c":106:5)
#loc154 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE806_char_alloca_loop_10.c":96:9)
#loc155 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE806_char_alloca_loop_10.c":96:25)
#loc156 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE806_char_alloca_loop_10.c":97:9)
#loc157 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE806_char_alloca_loop_10.c":97:16)
#loc158 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE806_char_alloca_loop_10.c":97:19)
#loc159 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE806_char_alloca_loop_10.c":98:19)
#loc160 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE806_char_alloca_loop_10.c":98:26)
#loc161 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE806_char_alloca_loop_10.c":98:9)
#loc162 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE806_char_alloca_loop_10.c":98:30)
#loc163 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE806_char_alloca_loop_10.c":100:9)
#loc164 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE806_char_alloca_loop_10.c":103:9)
#loc165 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE806_char_alloca_loop_10.c":100:18)
#loc166 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE806_char_alloca_loop_10.c":100:14)
#loc167 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE806_char_alloca_loop_10.c":100:21)
#loc168 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE806_char_alloca_loop_10.c":100:25)
#loc169 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE806_char_alloca_loop_10.c":100:23)
#loc170 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE806_char_alloca_loop_10.c":101:9)
#loc171 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE806_char_alloca_loop_10.c":102:23)
#loc172 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE806_char_alloca_loop_10.c":102:28)
#loc173 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE806_char_alloca_loop_10.c":102:29)
#loc174 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE806_char_alloca_loop_10.c":102:18)
#loc175 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE806_char_alloca_loop_10.c":102:13)
#loc176 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE806_char_alloca_loop_10.c":100:35)
#loc177 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE806_char_alloca_loop_10.c":100:34)
#loc178 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE806_char_alloca_loop_10.c":104:22)
#loc179 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE806_char_alloca_loop_10.c":104:14)
#loc180 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE806_char_alloca_loop_10.c":104:17)
#loc181 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE806_char_alloca_loop_10.c":104:9)
#loc182 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE806_char_alloca_loop_10.c":105:19)
#loc183 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE806_char_alloca_loop_10.c":105:9)
#loc184 = loc(fused[#loc1, #loc2])
#loc185 = loc(fused[#loc3, #loc4])
#loc186 = loc(fused[#loc5, #loc6])
#loc187 = loc(fused[#loc7, #loc8])
#loc188 = loc(fused[#loc9, #loc10])
#loc189 = loc(fused[#loc11, #loc12])
#loc190 = loc(fused[#loc14, #loc13])
#loc191 = loc(fused[#loc15, #loc16])
#loc192 = loc(fused[#loc18, #loc16])
#loc193 = loc(fused[#loc23, #loc24])
#loc194 = loc(fused[#loc26, #loc25])
#loc195 = loc(fused[#loc30, #loc31])
#loc196 = loc(fused[#loc32, #loc33])
#loc197 = loc(fused[#loc34, #loc35])
#loc198 = loc(fused[#loc34, #loc36])
#loc199 = loc(fused[#loc39, #loc40])
#loc200 = loc(fused[#loc41, #loc42])
#loc201 = loc(fused[#loc44, #loc43])
#loc202 = loc(fused[#loc45, #loc46])
#loc203 = loc(fused[#loc48, #loc42])
#loc204 = loc(fused[#loc53, #loc51])
#loc205 = loc(fused[#loc55, #loc54])
#loc206 = loc(fused[#loc59, #loc56])
#loc207 = loc(fused[#loc62, #loc63])
#loc208 = loc(fused[#loc64, #loc65])
#loc209 = loc(fused[#loc66, #loc67])
#loc210 = loc(fused[#loc68, #loc69])
#loc211 = loc(fused[#loc71, #loc72])
#loc212 = loc(fused[#loc73, #loc74])
#loc213 = loc(fused[#loc75, #loc76])
#loc214 = loc(fused[#loc78, #loc77])
#loc215 = loc(fused[#loc79, #loc80])
#loc216 = loc(fused[#loc82, #loc83, #loc84, #loc80])
#loc217 = loc(fused[#loc90, #loc91])
#loc218 = loc(fused[#loc93, #loc92])
#loc219 = loc(fused[#loc97, #loc98])
#loc220 = loc(fused[#loc99, #loc100])
#loc221 = loc(fused[#loc101, #loc102])
#loc222 = loc(fused[#loc101, #loc103])
#loc223 = loc(fused[#loc106, #loc107])
#loc224 = loc(fused[#loc108, #loc109])
#loc225 = loc(fused[#loc111, #loc110])
#loc226 = loc(fused[#loc112, #loc113])
#loc227 = loc(fused[#loc115, #loc109])
#loc228 = loc(fused[#loc120, #loc118])
#loc229 = loc(fused[#loc122, #loc121])
#loc230 = loc(fused[#loc126, #loc123])
#loc231 = loc(fused[#loc129, #loc130])
#loc232 = loc(fused[#loc131, #loc132])
#loc233 = loc(fused[#loc133, #loc134])
#loc234 = loc(fused[#loc136, #loc135])
#loc235 = loc(fused[#loc137, #loc138])
#loc236 = loc(fused[#loc140, #loc138])
#loc237 = loc(fused[#loc145, #loc146])
#loc238 = loc(fused[#loc148, #loc147])
#loc239 = loc(fused[#loc152, #loc153])
#loc240 = loc(fused[#loc154, #loc155])
#loc241 = loc(fused[#loc156, #loc157])
#loc242 = loc(fused[#loc156, #loc158])
#loc243 = loc(fused[#loc161, #loc162])
#loc244 = loc(fused[#loc163, #loc164])
#loc245 = loc(fused[#loc166, #loc165])
#loc246 = loc(fused[#loc167, #loc168])
#loc247 = loc(fused[#loc170, #loc164])
#loc248 = loc(fused[#loc175, #loc173])
#loc249 = loc(fused[#loc177, #loc176])
#loc250 = loc(fused[#loc181, #loc178])
