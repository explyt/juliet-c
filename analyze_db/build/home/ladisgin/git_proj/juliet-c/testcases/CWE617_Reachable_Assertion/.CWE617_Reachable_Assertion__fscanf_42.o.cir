!s32i = !cir.int<s, 32>
!s64i = !cir.int<s, 64>
!s8i = !cir.int<s, 8>
!ty__IO_codecvt = !cir.struct<struct "_IO_codecvt" incomplete>
!ty__IO_marker = !cir.struct<struct "_IO_marker" incomplete>
!ty__IO_wide_data = !cir.struct<struct "_IO_wide_data" incomplete>
!u16i = !cir.int<u, 16>
!u32i = !cir.int<u, 32>
!u64i = !cir.int<u, 64>
!void = !cir.void
#fn_attr = #cir<extra({inline = #cir.inline<no>, nothrow = #cir.nothrow, optnone = #cir.optnone})>
#fn_attr1 = #cir<extra({nothrow = #cir.nothrow})>
#loc8 = loc("CWE617_Reachable_Assertion__fscanf_42.c":25:22)
#loc9 = loc("CWE617_Reachable_Assertion__fscanf_42.c":25:26)
#loc35 = loc("CWE617_Reachable_Assertion__fscanf_42.c":46:26)
#loc36 = loc("CWE617_Reachable_Assertion__fscanf_42.c":46:30)
#loc58 = loc(fused[#loc8, #loc9])
#loc68 = loc(fused[#loc35, #loc36])
!ty__IO_FILE = !cir.struct<struct "_IO_FILE" {!s32i, !cir.ptr<!s8i>, !cir.ptr<!s8i>, !cir.ptr<!s8i>, !cir.ptr<!s8i>, !cir.ptr<!s8i>, !cir.ptr<!s8i>, !cir.ptr<!s8i>, !cir.ptr<!s8i>, !cir.ptr<!s8i>, !cir.ptr<!s8i>, !cir.ptr<!s8i>, !cir.ptr<!ty__IO_marker>, !cir.ptr<!cir.struct<struct "_IO_FILE">>, !s32i, !s32i, !s64i, !u16i, !s8i, !cir.array<!s8i x 1>, !cir.ptr<!void>, !s64i, !cir.ptr<!ty__IO_codecvt>, !cir.ptr<!ty__IO_wide_data>, !cir.ptr<!cir.struct<struct "_IO_FILE">>, !cir.ptr<!void>, !cir.ptr<!cir.ptr<!cir.struct<struct "_IO_FILE">>>, !s32i, !cir.array<!s8i x 20>} #cir.record.decl.ast>
module @"/home/ladisgin/git_proj/juliet-c/testcases/CWE617_Reachable_Assertion/CWE617_Reachable_Assertion__fscanf_42.c" attributes {cir.lang = #cir.lang<c>, cir.sob = #cir.signed_overflow_behavior<undefined>, cir.triple = "x86_64-unknown-linux-gnu", dlti.dl_spec = #dlti.dl_spec<f80 = dense<128> : vector<2xi64>, !llvm.ptr = dense<64> : vector<4xi64>, i1 = dense<8> : vector<2xi64>, i8 = dense<8> : vector<2xi64>, i32 = dense<32> : vector<2xi64>, i16 = dense<16> : vector<2xi64>, f16 = dense<16> : vector<2xi64>, f64 = dense<64> : vector<2xi64>, !llvm.ptr<270> = dense<32> : vector<4xi64>, f128 = dense<128> : vector<2xi64>, !llvm.ptr<271> = dense<32> : vector<4xi64>, !llvm.ptr<272> = dense<64> : vector<4xi64>, i64 = dense<64> : vector<2xi64>, i128 = dense<128> : vector<2xi64>, "dlti.stack_alignment" = 128 : i64, "dlti.endianness" = "little">} {
  cir.func private @__isoc99_fscanf(!cir.ptr<!ty__IO_FILE>, !cir.ptr<!s8i>, ...) -> !s32i loc(#loc55)
  cir.global "private" external @stdin : !cir.ptr<!ty__IO_FILE> {alignment = 8 : i64} loc(#loc56)
  cir.global "private" constant cir_private dsolocal @".str.3" = #cir.const_array<"%d\00" : !cir.array<!s8i x 3>> : !cir.array<!s8i x 3> {alignment = 1 : i64} loc(#loc5)
  cir.func internal private @badSource(%arg0: !s32i loc(fused[#loc8, #loc9])) -> !s32i extra(#fn_attr) {
    %0 = cir.alloca !s32i, !cir.ptr<!s32i>, ["data", init] {alignment = 4 : i64} loc(#loc58)
    %1 = cir.alloca !s32i, !cir.ptr<!s32i>, ["__retval"] {alignment = 4 : i64} loc(#loc7)
    cir.store %arg0, %0 : !s32i, !cir.ptr<!s32i> loc(#loc10)
    %2 = cir.get_global @__isoc99_fscanf : !cir.ptr<!cir.func<!s32i (!cir.ptr<!ty__IO_FILE>, !cir.ptr<!s8i>, ...)>> loc(#loc11)
    %3 = cir.get_global @stdin : !cir.ptr<!cir.ptr<!ty__IO_FILE>> loc(#loc56)
    %4 = cir.load %3 : !cir.ptr<!cir.ptr<!ty__IO_FILE>>, !cir.ptr<!ty__IO_FILE> loc(#loc12)
    %5 = cir.get_global @".str.3" : !cir.ptr<!cir.array<!s8i x 3>> loc(#loc5)
    %6 = cir.cast(array_to_ptrdecay, %5 : !cir.ptr<!cir.array<!s8i x 3>>), !cir.ptr<!s8i> loc(#loc5)
    %7 = cir.call @__isoc99_fscanf(%4, %6, %0) : (!cir.ptr<!ty__IO_FILE>, !cir.ptr<!s8i>, !cir.ptr<!s32i>) -> !s32i loc(#loc11)
    %8 = cir.load %0 : !cir.ptr<!s32i>, !s32i loc(#loc13)
    cir.store %8, %1 : !s32i, !cir.ptr<!s32i> loc(#loc59)
    %9 = cir.load %1 : !cir.ptr<!s32i>, !s32i loc(#loc59)
    cir.return %9 : !s32i loc(#loc59)
  } loc(#loc57)
  cir.func private @__assert_fail(!cir.ptr<!s8i>, !cir.ptr<!s8i>, !u32i, !cir.ptr<!s8i>) extra(#fn_attr1) loc(#loc60)
  cir.global "private" constant cir_private dsolocal @".str" = #cir.const_array<"data > ASSERT_VALUE\00" : !cir.array<!s8i x 20>> : !cir.array<!s8i x 20> {alignment = 1 : i64} loc(#loc17)
  cir.global "private" constant cir_private dsolocal @".str.1" = #cir.const_array<"CWE617_Reachable_Assertion__fscanf_42.c\00" : !cir.array<!s8i x 40>> : !cir.array<!s8i x 40> {alignment = 1 : i64} loc(#loc17)
  cir.global "private" constant cir_private dsolocal @".str.2" = #cir.const_array<"void CWE617_Reachable_Assertion__fscanf_42_bad()\00" : !cir.array<!s8i x 49>> : !cir.array<!s8i x 49> {alignment = 1 : i64} loc(#loc17)
  cir.func no_proto @CWE617_Reachable_Assertion__fscanf_42_bad() extra(#fn_attr) {
    %0 = cir.alloca !s32i, !cir.ptr<!s32i>, ["data"] {alignment = 4 : i64} loc(#loc62)
    %1 = cir.const #cir.int<1> : !s32i loc(#loc22)
    %2 = cir.unary(minus, %1) : !s32i, !s32i loc(#loc23)
    cir.store %2, %0 : !s32i, !cir.ptr<!s32i> loc(#loc63)
    %3 = cir.load %0 : !cir.ptr<!s32i>, !s32i loc(#loc25)
    %4 = cir.call @badSource(%3) : (!s32i) -> !s32i loc(#loc26)
    cir.store %4, %0 : !s32i, !cir.ptr<!s32i> loc(#loc64)
    %5 = cir.const #cir.int<4> : !u64i loc(#loc17)
    cir.br ^bb1 loc(#loc17)
  ^bb1:  // pred: ^bb0
    cir.br ^bb2 loc(#loc17)
  ^bb2:  // pred: ^bb1
    %6 = cir.load %0 : !cir.ptr<!s32i>, !s32i loc(#loc17)
    %7 = cir.const #cir.int<5> : !s32i loc(#loc17)
    %8 = cir.cmp(gt, %6, %7) : !s32i, !cir.bool loc(#loc17)
    cir.brcond %8 ^bb3, ^bb4 loc(#loc17)
  ^bb3:  // pred: ^bb2
    cir.br ^bb5 loc(#loc17)
  ^bb4:  // pred: ^bb2
    %9 = cir.get_global @".str" : !cir.ptr<!cir.array<!s8i x 20>> loc(#loc17)
    %10 = cir.cast(array_to_ptrdecay, %9 : !cir.ptr<!cir.array<!s8i x 20>>), !cir.ptr<!s8i> loc(#loc17)
    %11 = cir.get_global @".str.1" : !cir.ptr<!cir.array<!s8i x 40>> loc(#loc17)
    %12 = cir.cast(array_to_ptrdecay, %11 : !cir.ptr<!cir.array<!s8i x 40>>), !cir.ptr<!s8i> loc(#loc17)
    %13 = cir.const #cir.int<39> : !s32i loc(#loc17)
    %14 = cir.cast(integral, %13 : !s32i), !u32i loc(#loc17)
    %15 = cir.get_global @".str.2" : !cir.ptr<!cir.array<!s8i x 49>> loc(#loc17)
    %16 = cir.cast(array_to_ptrdecay, %15 : !cir.ptr<!cir.array<!s8i x 49>>), !cir.ptr<!s8i> loc(#loc17)
    cir.call @__assert_fail(%10, %12, %14, %16) : (!cir.ptr<!s8i>, !cir.ptr<!s8i>, !u32i, !cir.ptr<!s8i>) -> () extra(#fn_attr1) loc(#loc17)
    cir.br ^bb5 loc(#loc17)
  ^bb5:  // 2 preds: ^bb3, ^bb4
    cir.br ^bb6 loc(#loc17)
  ^bb6:  // pred: ^bb5
    cir.br ^bb7 loc(#loc17)
  ^bb7:  // pred: ^bb6
    cir.return loc(#loc19)
  } loc(#loc61)
  cir.func no_proto @CWE617_Reachable_Assertion__fscanf_42_good() extra(#fn_attr) {
    %0 = cir.get_global @goodG2B : !cir.ptr<!cir.func<!void ()>> loc(#loc66)
    cir.call %0() : (!cir.ptr<!cir.func<!void ()>>) -> () loc(#loc31)
    cir.return loc(#loc30)
  } loc(#loc65)
  cir.func internal private @goodG2BSource(%arg0: !s32i loc(fused[#loc35, #loc36])) -> !s32i extra(#fn_attr) {
    %0 = cir.alloca !s32i, !cir.ptr<!s32i>, ["data", init] {alignment = 4 : i64} loc(#loc68)
    %1 = cir.alloca !s32i, !cir.ptr<!s32i>, ["__retval"] {alignment = 4 : i64} loc(#loc34)
    cir.store %arg0, %0 : !s32i, !cir.ptr<!s32i> loc(#loc37)
    %2 = cir.const #cir.int<5> : !s32i loc(#loc38)
    %3 = cir.const #cir.int<1> : !s32i loc(#loc39)
    %4 = cir.binop(add, %2, %3) nsw : !s32i loc(#loc38)
    cir.store %4, %0 : !s32i, !cir.ptr<!s32i> loc(#loc69)
    %5 = cir.load %0 : !cir.ptr<!s32i>, !s32i loc(#loc41)
    cir.store %5, %1 : !s32i, !cir.ptr<!s32i> loc(#loc70)
    %6 = cir.load %1 : !cir.ptr<!s32i>, !s32i loc(#loc70)
    cir.return %6 : !s32i loc(#loc70)
  } loc(#loc67)
  cir.global "private" constant cir_private dsolocal @".str.4" = #cir.const_array<"void goodG2B()\00" : !cir.array<!s8i x 15>> : !cir.array<!s8i x 15> {alignment = 1 : i64} loc(#loc43)
  cir.func no_proto internal private @goodG2B() extra(#fn_attr) {
    %0 = cir.alloca !s32i, !cir.ptr<!s32i>, ["data"] {alignment = 4 : i64} loc(#loc72)
    %1 = cir.const #cir.int<1> : !s32i loc(#loc48)
    %2 = cir.unary(minus, %1) : !s32i, !s32i loc(#loc49)
    cir.store %2, %0 : !s32i, !cir.ptr<!s32i> loc(#loc73)
    %3 = cir.load %0 : !cir.ptr<!s32i>, !s32i loc(#loc51)
    %4 = cir.call @goodG2BSource(%3) : (!s32i) -> !s32i loc(#loc52)
    cir.store %4, %0 : !s32i, !cir.ptr<!s32i> loc(#loc74)
    %5 = cir.const #cir.int<4> : !u64i loc(#loc43)
    cir.br ^bb1 loc(#loc43)
  ^bb1:  // pred: ^bb0
    cir.br ^bb2 loc(#loc43)
  ^bb2:  // pred: ^bb1
    %6 = cir.load %0 : !cir.ptr<!s32i>, !s32i loc(#loc43)
    %7 = cir.const #cir.int<5> : !s32i loc(#loc43)
    %8 = cir.cmp(gt, %6, %7) : !s32i, !cir.bool loc(#loc43)
    cir.brcond %8 ^bb3, ^bb4 loc(#loc43)
  ^bb3:  // pred: ^bb2
    cir.br ^bb5 loc(#loc43)
  ^bb4:  // pred: ^bb2
    %9 = cir.get_global @".str" : !cir.ptr<!cir.array<!s8i x 20>> loc(#loc43)
    %10 = cir.cast(array_to_ptrdecay, %9 : !cir.ptr<!cir.array<!s8i x 20>>), !cir.ptr<!s8i> loc(#loc43)
    %11 = cir.get_global @".str.1" : !cir.ptr<!cir.array<!s8i x 40>> loc(#loc43)
    %12 = cir.cast(array_to_ptrdecay, %11 : !cir.ptr<!cir.array<!s8i x 40>>), !cir.ptr<!s8i> loc(#loc43)
    %13 = cir.const #cir.int<61> : !s32i loc(#loc43)
    %14 = cir.cast(integral, %13 : !s32i), !u32i loc(#loc43)
    %15 = cir.get_global @".str.4" : !cir.ptr<!cir.array<!s8i x 15>> loc(#loc43)
    %16 = cir.cast(array_to_ptrdecay, %15 : !cir.ptr<!cir.array<!s8i x 15>>), !cir.ptr<!s8i> loc(#loc43)
    cir.call @__assert_fail(%10, %12, %14, %16) : (!cir.ptr<!s8i>, !cir.ptr<!s8i>, !u32i, !cir.ptr<!s8i>) -> () extra(#fn_attr1) loc(#loc43)
    cir.br ^bb5 loc(#loc43)
  ^bb5:  // 2 preds: ^bb3, ^bb4
    cir.br ^bb6 loc(#loc43)
  ^bb6:  // pred: ^bb5
    cir.br ^bb7 loc(#loc43)
  ^bb7:  // pred: ^bb6
    cir.return loc(#loc45)
  } loc(#loc71)
} loc(#loc)
#loc = loc("/home/ladisgin/git_proj/juliet-c/testcases/CWE617_Reachable_Assertion/CWE617_Reachable_Assertion__fscanf_42.c":0:0)
#loc1 = loc("/usr/include/stdio.h":463:1)
#loc2 = loc("/usr/include/stdio.h":465:33)
#loc3 = loc("/usr/include/stdio.h":149:1)
#loc4 = loc("/usr/include/stdio.h":149:14)
#loc5 = loc("CWE617_Reachable_Assertion__fscanf_42.c":28:19)
#loc6 = loc("CWE617_Reachable_Assertion__fscanf_42.c":25:1)
#loc7 = loc("CWE617_Reachable_Assertion__fscanf_42.c":30:1)
#loc10 = loc("CWE617_Reachable_Assertion__fscanf_42.c":26:1)
#loc11 = loc("CWE617_Reachable_Assertion__fscanf_42.c":28:5)
#loc12 = loc("CWE617_Reachable_Assertion__fscanf_42.c":28:12)
#loc13 = loc("CWE617_Reachable_Assertion__fscanf_42.c":29:12)
#loc14 = loc("CWE617_Reachable_Assertion__fscanf_42.c":29:5)
#loc15 = loc("/usr/include/assert.h":67:1)
#loc16 = loc("/usr/include/assert.h":69:43)
#loc17 = loc("CWE617_Reachable_Assertion__fscanf_42.c":39:5)
#loc18 = loc("CWE617_Reachable_Assertion__fscanf_42.c":32:1)
#loc19 = loc("CWE617_Reachable_Assertion__fscanf_42.c":40:1)
#loc20 = loc("CWE617_Reachable_Assertion__fscanf_42.c":34:5)
#loc21 = loc("CWE617_Reachable_Assertion__fscanf_42.c":34:9)
#loc22 = loc("CWE617_Reachable_Assertion__fscanf_42.c":36:13)
#loc23 = loc("CWE617_Reachable_Assertion__fscanf_42.c":36:12)
#loc24 = loc("CWE617_Reachable_Assertion__fscanf_42.c":36:5)
#loc25 = loc("CWE617_Reachable_Assertion__fscanf_42.c":37:22)
#loc26 = loc("CWE617_Reachable_Assertion__fscanf_42.c":37:12)
#loc27 = loc("CWE617_Reachable_Assertion__fscanf_42.c":37:5)
#loc28 = loc("CWE617_Reachable_Assertion__fscanf_42.c":37:26)
#loc29 = loc("CWE617_Reachable_Assertion__fscanf_42.c":64:1)
#loc30 = loc("CWE617_Reachable_Assertion__fscanf_42.c":67:1)
#loc31 = loc("CWE617_Reachable_Assertion__fscanf_42.c":66:5)
#loc32 = loc("CWE617_Reachable_Assertion__fscanf_42.c":66:13)
#loc33 = loc("CWE617_Reachable_Assertion__fscanf_42.c":46:1)
#loc34 = loc("CWE617_Reachable_Assertion__fscanf_42.c":51:1)
#loc37 = loc("CWE617_Reachable_Assertion__fscanf_42.c":47:1)
#loc38 = loc("CWE617_Reachable_Assertion__fscanf_42.c":49:12)
#loc39 = loc("CWE617_Reachable_Assertion__fscanf_42.c":49:25)
#loc40 = loc("CWE617_Reachable_Assertion__fscanf_42.c":49:5)
#loc41 = loc("CWE617_Reachable_Assertion__fscanf_42.c":50:12)
#loc42 = loc("CWE617_Reachable_Assertion__fscanf_42.c":50:5)
#loc43 = loc("CWE617_Reachable_Assertion__fscanf_42.c":61:5)
#loc44 = loc("CWE617_Reachable_Assertion__fscanf_42.c":54:1)
#loc45 = loc("CWE617_Reachable_Assertion__fscanf_42.c":62:1)
#loc46 = loc("CWE617_Reachable_Assertion__fscanf_42.c":56:5)
#loc47 = loc("CWE617_Reachable_Assertion__fscanf_42.c":56:9)
#loc48 = loc("CWE617_Reachable_Assertion__fscanf_42.c":58:13)
#loc49 = loc("CWE617_Reachable_Assertion__fscanf_42.c":58:12)
#loc50 = loc("CWE617_Reachable_Assertion__fscanf_42.c":58:5)
#loc51 = loc("CWE617_Reachable_Assertion__fscanf_42.c":59:26)
#loc52 = loc("CWE617_Reachable_Assertion__fscanf_42.c":59:12)
#loc53 = loc("CWE617_Reachable_Assertion__fscanf_42.c":59:5)
#loc54 = loc("CWE617_Reachable_Assertion__fscanf_42.c":59:30)
#loc55 = loc(fused[#loc1, #loc2])
#loc56 = loc(fused[#loc3, #loc4])
#loc57 = loc(fused[#loc6, #loc7])
#loc59 = loc(fused[#loc14, #loc13])
#loc60 = loc(fused[#loc15, #loc16])
#loc61 = loc(fused[#loc18, #loc19])
#loc62 = loc(fused[#loc20, #loc21])
#loc63 = loc(fused[#loc24, #loc22])
#loc64 = loc(fused[#loc27, #loc28])
#loc65 = loc(fused[#loc29, #loc30])
#loc66 = loc(fused[#loc31, #loc32])
#loc67 = loc(fused[#loc33, #loc34])
#loc69 = loc(fused[#loc40, #loc39])
#loc70 = loc(fused[#loc42, #loc41])
#loc71 = loc(fused[#loc44, #loc45])
#loc72 = loc(fused[#loc46, #loc47])
#loc73 = loc(fused[#loc50, #loc48])
#loc74 = loc(fused[#loc53, #loc54])
