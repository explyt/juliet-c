!s32i = !cir.int<s, 32>
!s64i = !cir.int<s, 64>
!s8i = !cir.int<s, 8>
!ty__IO_codecvt = !cir.struct<struct "_IO_codecvt" incomplete>
!ty__IO_marker = !cir.struct<struct "_IO_marker" incomplete>
!ty__IO_wide_data = !cir.struct<struct "_IO_wide_data" incomplete>
!u16i = !cir.int<u, 16>
!u64i = !cir.int<u, 64>
!void = !cir.void
#fn_attr = #cir<extra({inline = #cir.inline<no>, nothrow = #cir.nothrow, optnone = #cir.optnone})>
#fn_attr1 = #cir<extra({nothrow = #cir.nothrow})>
!ty__IO_FILE = !cir.struct<struct "_IO_FILE" {!s32i, !cir.ptr<!s8i>, !cir.ptr<!s8i>, !cir.ptr<!s8i>, !cir.ptr<!s8i>, !cir.ptr<!s8i>, !cir.ptr<!s8i>, !cir.ptr<!s8i>, !cir.ptr<!s8i>, !cir.ptr<!s8i>, !cir.ptr<!s8i>, !cir.ptr<!s8i>, !cir.ptr<!ty__IO_marker>, !cir.ptr<!cir.struct<struct "_IO_FILE">>, !s32i, !s32i, !s64i, !u16i, !s8i, !cir.array<!s8i x 1>, !cir.ptr<!void>, !s64i, !cir.ptr<!ty__IO_codecvt>, !cir.ptr<!ty__IO_wide_data>, !cir.ptr<!cir.struct<struct "_IO_FILE">>, !cir.ptr<!void>, !u64i, !s32i, !cir.array<!s8i x 20>} #cir.record.decl.ast>
module @"/home/ladisgin/git_proj/test_projects/juliet-c/testcases/CWE190_Integer_Overflow/s02/CWE190_Integer_Overflow__int64_t_fscanf_square_14.c" attributes {cir.lang = #cir.lang<c>, cir.sob = #cir.signed_overflow_behavior<undefined>, cir.triple = "x86_64-unknown-linux-gnu", dlti.dl_spec = #dlti.dl_spec<#dlti.dl_entry<i32, dense<32> : vector<2xi64>>, #dlti.dl_entry<i16, dense<16> : vector<2xi64>>, #dlti.dl_entry<i8, dense<8> : vector<2xi64>>, #dlti.dl_entry<i1, dense<8> : vector<2xi64>>, #dlti.dl_entry<!llvm.ptr, dense<64> : vector<4xi64>>, #dlti.dl_entry<f80, dense<128> : vector<2xi64>>, #dlti.dl_entry<i128, dense<128> : vector<2xi64>>, #dlti.dl_entry<!llvm.ptr<272>, dense<64> : vector<4xi64>>, #dlti.dl_entry<i64, dense<64> : vector<2xi64>>, #dlti.dl_entry<f128, dense<128> : vector<2xi64>>, #dlti.dl_entry<!llvm.ptr<271>, dense<32> : vector<4xi64>>, #dlti.dl_entry<f16, dense<16> : vector<2xi64>>, #dlti.dl_entry<!llvm.ptr<270>, dense<32> : vector<4xi64>>, #dlti.dl_entry<f64, dense<64> : vector<2xi64>>, #dlti.dl_entry<"dlti.endianness", "little">, #dlti.dl_entry<"dlti.stack_alignment", 128 : i64>>, llvm.data_layout = "e-m:e-p270:32:32-p271:32:32-p272:64:64-i64:64-i128:128-f80:128-n8:16:32:64-S128"} {
  cir.global "private"  external @globalFive : !s32i {alignment = 4 : i64} loc(#loc195)
  cir.func private  @__isoc99_fscanf(!cir.ptr<!ty__IO_FILE>, !cir.ptr<!s8i>, ...) -> !s32i loc(#loc196)
  cir.global "private"  external @stdin : !cir.ptr<!ty__IO_FILE> {alignment = 8 : i64} loc(#loc197)
  cir.global "private"  constant internal dsolocal @".str" = #cir.const_array<"%ld\00" : !cir.array<!s8i x 4>> : !cir.array<!s8i x 4> {alignment = 1 : i64} loc(#loc198)
  cir.func private  @printLongLongLine(!s64i) loc(#loc199)
  cir.func no_proto  @CWE190_Integer_Overflow__int64_t_fscanf_square_14_bad() extra(#fn_attr) {
    %0 = cir.alloca !s64i, !cir.ptr<!s64i>, ["data"] {alignment = 8 : i64} loc(#loc201)
    %1 = cir.const #cir.int<0> : !s64i loc(#loc15)
    cir.store %1, %0 : !s64i, !cir.ptr<!s64i> loc(#loc202)
    cir.scope {
      %2 = cir.get_global @globalFive : !cir.ptr<!s32i> loc(#loc195)
      %3 = cir.load %2 : !cir.ptr<!s32i>, !s32i loc(#loc19)
      %4 = cir.const #cir.int<5> : !s32i loc(#loc20)
      %5 = cir.cmp(eq, %3, %4) : !s32i, !s32i loc(#loc204)
      %6 = cir.cast(int_to_bool, %5 : !s32i), !cir.bool loc(#loc21)
      cir.if %6 {
        %7 = cir.get_global @__isoc99_fscanf : !cir.ptr<!cir.func<!s32i (!cir.ptr<!ty__IO_FILE>, !cir.ptr<!s8i>, ...)>> loc(#loc23)
        %8 = cir.get_global @stdin : !cir.ptr<!cir.ptr<!ty__IO_FILE>> loc(#loc197)
        %9 = cir.load %8 : !cir.ptr<!cir.ptr<!ty__IO_FILE>>, !cir.ptr<!ty__IO_FILE> loc(#loc24)
        %10 = cir.get_global @".str" : !cir.ptr<!cir.array<!s8i x 4>> loc(#loc198)
        %11 = cir.cast(array_to_ptrdecay, %10 : !cir.ptr<!cir.array<!s8i x 4>>), !cir.ptr<!s8i> loc(#loc198)
        %12 = cir.call @__isoc99_fscanf(%9, %11, %0) : (!cir.ptr<!ty__IO_FILE>, !cir.ptr<!s8i>, !cir.ptr<!s64i>) -> !s32i loc(#loc23)
      } loc(#loc205)
    } loc(#loc203)
    cir.scope {
      %2 = cir.get_global @globalFive : !cir.ptr<!s32i> loc(#loc195)
      %3 = cir.load %2 : !cir.ptr<!s32i>, !s32i loc(#loc27)
      %4 = cir.const #cir.int<5> : !s32i loc(#loc28)
      %5 = cir.cmp(eq, %3, %4) : !s32i, !s32i loc(#loc207)
      %6 = cir.cast(int_to_bool, %5 : !s32i), !cir.bool loc(#loc29)
      cir.if %6 {
        cir.scope {
          %7 = cir.alloca !s64i, !cir.ptr<!s64i>, ["result", init] {alignment = 8 : i64} loc(#loc210)
          %8 = cir.load %0 : !cir.ptr<!s64i>, !s64i loc(#loc35)
          %9 = cir.load %0 : !cir.ptr<!s64i>, !s64i loc(#loc34)
          %10 = cir.binop(mul, %8, %9) nsw : !s64i loc(#loc35)
          cir.store %10, %7 : !s64i, !cir.ptr<!s64i> loc(#loc210)
          %11 = cir.load %7 : !cir.ptr<!s64i>, !s64i loc(#loc36)
          cir.call @printLongLongLine(%11) : (!s64i) -> () loc(#loc37)
        } loc(#loc209)
      } loc(#loc208)
    } loc(#loc206)
    cir.return loc(#loc12)
  } loc(#loc200)
  cir.func no_proto  @CWE190_Integer_Overflow__int64_t_fscanf_square_14_good() extra(#fn_attr) {
    %0 = cir.get_global @goodB2G1 : !cir.ptr<!cir.func<!void ()>> loc(#loc212)
    cir.call %0() : (!cir.ptr<!cir.func<!void ()>>) -> () loc(#loc40)
    %1 = cir.get_global @goodB2G2 : !cir.ptr<!cir.func<!void ()>> loc(#loc213)
    cir.call %1() : (!cir.ptr<!cir.func<!void ()>>) -> () loc(#loc42)
    %2 = cir.get_global @goodG2B1 : !cir.ptr<!cir.func<!void ()>> loc(#loc214)
    cir.call %2() : (!cir.ptr<!cir.func<!void ()>>) -> () loc(#loc44)
    %3 = cir.get_global @goodG2B2 : !cir.ptr<!cir.func<!void ()>> loc(#loc215)
    cir.call %3() : (!cir.ptr<!cir.func<!void ()>>) -> () loc(#loc46)
    cir.return loc(#loc39)
  } loc(#loc211)
  cir.func private  @printLine(!cir.ptr<!s8i>) loc(#loc216)
  cir.global "private"  constant internal dsolocal @".str1" = #cir.const_array<"Benign, fixed string\00" : !cir.array<!s8i x 21>> : !cir.array<!s8i x 21> {alignment = 1 : i64} loc(#loc50)
  cir.func private  @imaxabs(!s64i) -> !s64i extra(#fn_attr1) loc(#loc217)
  cir.func private  @sqrtl(!cir.long_double<!cir.f80>) -> !cir.long_double<!cir.f80> extra(#fn_attr1) loc(#loc53)
  cir.global "private"  constant internal dsolocal @".str2" = #cir.const_array<"data value is too large to perform arithmetic safely.\00" : !cir.array<!s8i x 54>> : !cir.array<!s8i x 54> {alignment = 1 : i64} loc(#loc54)
  cir.func no_proto internal private  @goodB2G1() extra(#fn_attr) {
    %0 = cir.alloca !s64i, !cir.ptr<!s64i>, ["data"] {alignment = 8 : i64} loc(#loc219)
    %1 = cir.const #cir.int<0> : !s64i loc(#loc59)
    cir.store %1, %0 : !s64i, !cir.ptr<!s64i> loc(#loc220)
    cir.scope {
      %2 = cir.get_global @globalFive : !cir.ptr<!s32i> loc(#loc195)
      %3 = cir.load %2 : !cir.ptr<!s32i>, !s32i loc(#loc63)
      %4 = cir.const #cir.int<5> : !s32i loc(#loc64)
      %5 = cir.cmp(eq, %3, %4) : !s32i, !s32i loc(#loc222)
      %6 = cir.cast(int_to_bool, %5 : !s32i), !cir.bool loc(#loc65)
      cir.if %6 {
        %7 = cir.get_global @__isoc99_fscanf : !cir.ptr<!cir.func<!s32i (!cir.ptr<!ty__IO_FILE>, !cir.ptr<!s8i>, ...)>> loc(#loc67)
        %8 = cir.get_global @stdin : !cir.ptr<!cir.ptr<!ty__IO_FILE>> loc(#loc197)
        %9 = cir.load %8 : !cir.ptr<!cir.ptr<!ty__IO_FILE>>, !cir.ptr<!ty__IO_FILE> loc(#loc68)
        %10 = cir.get_global @".str" : !cir.ptr<!cir.array<!s8i x 4>> loc(#loc224)
        %11 = cir.cast(array_to_ptrdecay, %10 : !cir.ptr<!cir.array<!s8i x 4>>), !cir.ptr<!s8i> loc(#loc224)
        %12 = cir.call @__isoc99_fscanf(%9, %11, %0) : (!cir.ptr<!ty__IO_FILE>, !cir.ptr<!s8i>, !cir.ptr<!s64i>) -> !s32i loc(#loc67)
      } loc(#loc223)
    } loc(#loc221)
    cir.scope {
      %2 = cir.get_global @globalFive : !cir.ptr<!s32i> loc(#loc195)
      %3 = cir.load %2 : !cir.ptr<!s32i>, !s32i loc(#loc73)
      %4 = cir.const #cir.int<5> : !s32i loc(#loc74)
      %5 = cir.cmp(ne, %3, %4) : !s32i, !s32i loc(#loc226)
      %6 = cir.cast(int_to_bool, %5 : !s32i), !cir.bool loc(#loc75)
      cir.if %6 {
        %7 = cir.get_global @".str1" : !cir.ptr<!cir.array<!s8i x 21>> loc(#loc50)
        %8 = cir.cast(array_to_ptrdecay, %7 : !cir.ptr<!cir.array<!s8i x 21>>), !cir.ptr<!s8i> loc(#loc50)
        cir.call @printLine(%8) : (!cir.ptr<!s8i>) -> () loc(#loc79)
      } else {
        cir.scope {
          %7 = cir.load %0 : !cir.ptr<!s64i>, !s64i loc(#loc82)
          %8 = cir.call @imaxabs(%7) : (!s64i) -> !s64i extra(#fn_attr1) loc(#loc83)
          %9 = cir.cast(int_to_float, %8 : !s64i), !cir.long_double<!cir.f80> loc(#loc83)
          %10 = cir.get_global @sqrtl : !cir.ptr<!cir.func<!cir.long_double<!cir.f80> (!cir.long_double<!cir.f80>)>> loc(#loc84)
          %11 = cir.const #cir.int<9223372036854775807> : !s64i loc(#loc85)
          %12 = cir.cast(int_to_float, %11 : !s64i), !cir.long_double<!cir.f80> loc(#loc85)
          %13 = cir.call @sqrtl(%12) : (!cir.long_double<!cir.f80>) -> !cir.long_double<!cir.f80> extra(#fn_attr1) loc(#loc84)
          %14 = cir.cmp(le, %9, %13) : !cir.long_double<!cir.f80>, !s32i loc(#loc229)
          %15 = cir.cast(int_to_bool, %14 : !s32i), !cir.bool loc(#loc87)
          cir.if %15 {
            %16 = cir.alloca !s64i, !cir.ptr<!s64i>, ["result", init] {alignment = 8 : i64} loc(#loc231)
            %17 = cir.load %0 : !cir.ptr<!s64i>, !s64i loc(#loc93)
            %18 = cir.load %0 : !cir.ptr<!s64i>, !s64i loc(#loc92)
            %19 = cir.binop(mul, %17, %18) nsw : !s64i loc(#loc93)
            cir.store %19, %16 : !s64i, !cir.ptr<!s64i> loc(#loc231)
            %20 = cir.load %16 : !cir.ptr<!s64i>, !s64i loc(#loc94)
            cir.call @printLongLongLine(%20) : (!s64i) -> () loc(#loc95)
          } else {
            %16 = cir.get_global @".str2" : !cir.ptr<!cir.array<!s8i x 54>> loc(#loc54)
            %17 = cir.cast(array_to_ptrdecay, %16 : !cir.ptr<!cir.array<!s8i x 54>>), !cir.ptr<!s8i> loc(#loc54)
            cir.call @printLine(%17) : (!cir.ptr<!s8i>) -> () loc(#loc96)
          } loc(#loc230)
        } loc(#loc228)
      } loc(#loc227)
    } loc(#loc225)
    cir.return loc(#loc56)
  } loc(#loc218)
  cir.func no_proto internal private  @goodB2G2() extra(#fn_attr) {
    %0 = cir.alloca !s64i, !cir.ptr<!s64i>, ["data"] {alignment = 8 : i64} loc(#loc233)
    %1 = cir.const #cir.int<0> : !s64i loc(#loc101)
    cir.store %1, %0 : !s64i, !cir.ptr<!s64i> loc(#loc234)
    cir.scope {
      %2 = cir.get_global @globalFive : !cir.ptr<!s32i> loc(#loc195)
      %3 = cir.load %2 : !cir.ptr<!s32i>, !s32i loc(#loc105)
      %4 = cir.const #cir.int<5> : !s32i loc(#loc106)
      %5 = cir.cmp(eq, %3, %4) : !s32i, !s32i loc(#loc236)
      %6 = cir.cast(int_to_bool, %5 : !s32i), !cir.bool loc(#loc107)
      cir.if %6 {
        %7 = cir.get_global @__isoc99_fscanf : !cir.ptr<!cir.func<!s32i (!cir.ptr<!ty__IO_FILE>, !cir.ptr<!s8i>, ...)>> loc(#loc109)
        %8 = cir.get_global @stdin : !cir.ptr<!cir.ptr<!ty__IO_FILE>> loc(#loc197)
        %9 = cir.load %8 : !cir.ptr<!cir.ptr<!ty__IO_FILE>>, !cir.ptr<!ty__IO_FILE> loc(#loc110)
        %10 = cir.get_global @".str" : !cir.ptr<!cir.array<!s8i x 4>> loc(#loc238)
        %11 = cir.cast(array_to_ptrdecay, %10 : !cir.ptr<!cir.array<!s8i x 4>>), !cir.ptr<!s8i> loc(#loc238)
        %12 = cir.call @__isoc99_fscanf(%9, %11, %0) : (!cir.ptr<!ty__IO_FILE>, !cir.ptr<!s8i>, !cir.ptr<!s64i>) -> !s32i loc(#loc109)
      } loc(#loc237)
    } loc(#loc235)
    cir.scope {
      %2 = cir.get_global @globalFive : !cir.ptr<!s32i> loc(#loc195)
      %3 = cir.load %2 : !cir.ptr<!s32i>, !s32i loc(#loc115)
      %4 = cir.const #cir.int<5> : !s32i loc(#loc116)
      %5 = cir.cmp(eq, %3, %4) : !s32i, !s32i loc(#loc240)
      %6 = cir.cast(int_to_bool, %5 : !s32i), !cir.bool loc(#loc117)
      cir.if %6 {
        cir.scope {
          %7 = cir.load %0 : !cir.ptr<!s64i>, !s64i loc(#loc121)
          %8 = cir.call @imaxabs(%7) : (!s64i) -> !s64i extra(#fn_attr1) loc(#loc122)
          %9 = cir.cast(int_to_float, %8 : !s64i), !cir.long_double<!cir.f80> loc(#loc122)
          %10 = cir.get_global @sqrtl : !cir.ptr<!cir.func<!cir.long_double<!cir.f80> (!cir.long_double<!cir.f80>)>> loc(#loc123)
          %11 = cir.const #cir.int<9223372036854775807> : !s64i loc(#loc124)
          %12 = cir.cast(int_to_float, %11 : !s64i), !cir.long_double<!cir.f80> loc(#loc124)
          %13 = cir.call @sqrtl(%12) : (!cir.long_double<!cir.f80>) -> !cir.long_double<!cir.f80> extra(#fn_attr1) loc(#loc123)
          %14 = cir.cmp(le, %9, %13) : !cir.long_double<!cir.f80>, !s32i loc(#loc243)
          %15 = cir.cast(int_to_bool, %14 : !s32i), !cir.bool loc(#loc126)
          cir.if %15 {
            %16 = cir.alloca !s64i, !cir.ptr<!s64i>, ["result", init] {alignment = 8 : i64} loc(#loc245)
            %17 = cir.load %0 : !cir.ptr<!s64i>, !s64i loc(#loc132)
            %18 = cir.load %0 : !cir.ptr<!s64i>, !s64i loc(#loc131)
            %19 = cir.binop(mul, %17, %18) nsw : !s64i loc(#loc132)
            cir.store %19, %16 : !s64i, !cir.ptr<!s64i> loc(#loc245)
            %20 = cir.load %16 : !cir.ptr<!s64i>, !s64i loc(#loc133)
            cir.call @printLongLongLine(%20) : (!s64i) -> () loc(#loc134)
          } else {
            %16 = cir.get_global @".str2" : !cir.ptr<!cir.array<!s8i x 54>> loc(#loc135)
            %17 = cir.cast(array_to_ptrdecay, %16 : !cir.ptr<!cir.array<!s8i x 54>>), !cir.ptr<!s8i> loc(#loc135)
            cir.call @printLine(%17) : (!cir.ptr<!s8i>) -> () loc(#loc136)
          } loc(#loc244)
        } loc(#loc242)
      } loc(#loc241)
    } loc(#loc239)
    cir.return loc(#loc98)
  } loc(#loc232)
  cir.func no_proto internal private  @goodG2B1() extra(#fn_attr) {
    %0 = cir.alloca !s64i, !cir.ptr<!s64i>, ["data"] {alignment = 8 : i64} loc(#loc247)
    %1 = cir.const #cir.int<0> : !s64i loc(#loc141)
    cir.store %1, %0 : !s64i, !cir.ptr<!s64i> loc(#loc248)
    cir.scope {
      %2 = cir.get_global @globalFive : !cir.ptr<!s32i> loc(#loc195)
      %3 = cir.load %2 : !cir.ptr<!s32i>, !s32i loc(#loc145)
      %4 = cir.const #cir.int<5> : !s32i loc(#loc146)
      %5 = cir.cmp(ne, %3, %4) : !s32i, !s32i loc(#loc250)
      %6 = cir.cast(int_to_bool, %5 : !s32i), !cir.bool loc(#loc147)
      cir.if %6 {
        %7 = cir.get_global @".str1" : !cir.ptr<!cir.array<!s8i x 21>> loc(#loc151)
        %8 = cir.cast(array_to_ptrdecay, %7 : !cir.ptr<!cir.array<!s8i x 21>>), !cir.ptr<!s8i> loc(#loc151)
        cir.call @printLine(%8) : (!cir.ptr<!s8i>) -> () loc(#loc152)
      } else {
        %7 = cir.const #cir.int<2> : !s32i loc(#loc153)
        %8 = cir.cast(integral, %7 : !s32i), !s64i loc(#loc153)
        cir.store %8, %0 : !s64i, !cir.ptr<!s64i> loc(#loc252)
      } loc(#loc251)
    } loc(#loc249)
    cir.scope {
      %2 = cir.get_global @globalFive : !cir.ptr<!s32i> loc(#loc195)
      %3 = cir.load %2 : !cir.ptr<!s32i>, !s32i loc(#loc157)
      %4 = cir.const #cir.int<5> : !s32i loc(#loc158)
      %5 = cir.cmp(eq, %3, %4) : !s32i, !s32i loc(#loc254)
      %6 = cir.cast(int_to_bool, %5 : !s32i), !cir.bool loc(#loc159)
      cir.if %6 {
        cir.scope {
          %7 = cir.alloca !s64i, !cir.ptr<!s64i>, ["result", init] {alignment = 8 : i64} loc(#loc257)
          %8 = cir.load %0 : !cir.ptr<!s64i>, !s64i loc(#loc165)
          %9 = cir.load %0 : !cir.ptr<!s64i>, !s64i loc(#loc164)
          %10 = cir.binop(mul, %8, %9) nsw : !s64i loc(#loc165)
          cir.store %10, %7 : !s64i, !cir.ptr<!s64i> loc(#loc257)
          %11 = cir.load %7 : !cir.ptr<!s64i>, !s64i loc(#loc166)
          cir.call @printLongLongLine(%11) : (!s64i) -> () loc(#loc167)
        } loc(#loc256)
      } loc(#loc255)
    } loc(#loc253)
    cir.return loc(#loc138)
  } loc(#loc246)
  cir.func no_proto internal private  @goodG2B2() extra(#fn_attr) {
    %0 = cir.alloca !s64i, !cir.ptr<!s64i>, ["data"] {alignment = 8 : i64} loc(#loc259)
    %1 = cir.const #cir.int<0> : !s64i loc(#loc172)
    cir.store %1, %0 : !s64i, !cir.ptr<!s64i> loc(#loc260)
    cir.scope {
      %2 = cir.get_global @globalFive : !cir.ptr<!s32i> loc(#loc195)
      %3 = cir.load %2 : !cir.ptr<!s32i>, !s32i loc(#loc176)
      %4 = cir.const #cir.int<5> : !s32i loc(#loc177)
      %5 = cir.cmp(eq, %3, %4) : !s32i, !s32i loc(#loc262)
      %6 = cir.cast(int_to_bool, %5 : !s32i), !cir.bool loc(#loc178)
      cir.if %6 {
        %7 = cir.const #cir.int<2> : !s32i loc(#loc180)
        %8 = cir.cast(integral, %7 : !s32i), !s64i loc(#loc180)
        cir.store %8, %0 : !s64i, !cir.ptr<!s64i> loc(#loc264)
      } loc(#loc263)
    } loc(#loc261)
    cir.scope {
      %2 = cir.get_global @globalFive : !cir.ptr<!s32i> loc(#loc195)
      %3 = cir.load %2 : !cir.ptr<!s32i>, !s32i loc(#loc184)
      %4 = cir.const #cir.int<5> : !s32i loc(#loc185)
      %5 = cir.cmp(eq, %3, %4) : !s32i, !s32i loc(#loc266)
      %6 = cir.cast(int_to_bool, %5 : !s32i), !cir.bool loc(#loc186)
      cir.if %6 {
        cir.scope {
          %7 = cir.alloca !s64i, !cir.ptr<!s64i>, ["result", init] {alignment = 8 : i64} loc(#loc269)
          %8 = cir.load %0 : !cir.ptr<!s64i>, !s64i loc(#loc192)
          %9 = cir.load %0 : !cir.ptr<!s64i>, !s64i loc(#loc191)
          %10 = cir.binop(mul, %8, %9) nsw : !s64i loc(#loc192)
          cir.store %10, %7 : !s64i, !cir.ptr<!s64i> loc(#loc269)
          %11 = cir.load %7 : !cir.ptr<!s64i>, !s64i loc(#loc193)
          cir.call @printLongLongLine(%11) : (!s64i) -> () loc(#loc194)
        } loc(#loc268)
      } loc(#loc267)
    } loc(#loc265)
    cir.return loc(#loc169)
  } loc(#loc258)
} loc(#loc)
#loc = loc("/home/ladisgin/git_proj/test_projects/juliet-c/testcases/CWE190_Integer_Overflow/s02/CWE190_Integer_Overflow__int64_t_fscanf_square_14.c":0:0)
#loc1 = loc("../../../testcasesupport/std_testcase.h":118:1)
#loc2 = loc("../../../testcasesupport/std_testcase.h":118:12)
#loc3 = loc("/usr/include/stdio.h":463:1)
#loc4 = loc("/usr/include/stdio.h":465:33)
#loc5 = loc("/usr/include/stdio.h":149:1)
#loc6 = loc("/usr/include/stdio.h":149:14)
#loc7 = loc("CWE190_Integer_Overflow__int64_t_fscanf_square_14.c":32:24)
#loc8 = loc("CWE190_Integer_Overflow__int64_t_fscanf_square_14.c":32:28)
#loc9 = loc("../../../testcasesupport/std_testcase_io.h":26:1)
#loc10 = loc("../../../testcasesupport/std_testcase_io.h":26:49)
#loc11 = loc("CWE190_Integer_Overflow__int64_t_fscanf_square_14.c":25:1)
#loc12 = loc("CWE190_Integer_Overflow__int64_t_fscanf_square_14.c":42:1)
#loc13 = loc("CWE190_Integer_Overflow__int64_t_fscanf_square_14.c":27:5)
#loc14 = loc("CWE190_Integer_Overflow__int64_t_fscanf_square_14.c":27:13)
#loc15 = loc("CWE190_Integer_Overflow__int64_t_fscanf_square_14.c":28:12)
#loc16 = loc("CWE190_Integer_Overflow__int64_t_fscanf_square_14.c":28:5)
#loc17 = loc("CWE190_Integer_Overflow__int64_t_fscanf_square_14.c":29:5)
#loc18 = loc("CWE190_Integer_Overflow__int64_t_fscanf_square_14.c":33:5)
#loc19 = loc("CWE190_Integer_Overflow__int64_t_fscanf_square_14.c":29:8)
#loc20 = loc("CWE190_Integer_Overflow__int64_t_fscanf_square_14.c":29:20)
#loc21 = loc("CWE190_Integer_Overflow__int64_t_fscanf_square_14.c":29:18)
#loc22 = loc("CWE190_Integer_Overflow__int64_t_fscanf_square_14.c":30:5)
#loc23 = loc("CWE190_Integer_Overflow__int64_t_fscanf_square_14.c":32:9)
#loc24 = loc("CWE190_Integer_Overflow__int64_t_fscanf_square_14.c":32:17)
#loc25 = loc("CWE190_Integer_Overflow__int64_t_fscanf_square_14.c":34:5)
#loc26 = loc("CWE190_Integer_Overflow__int64_t_fscanf_square_14.c":41:5)
#loc27 = loc("CWE190_Integer_Overflow__int64_t_fscanf_square_14.c":34:8)
#loc28 = loc("CWE190_Integer_Overflow__int64_t_fscanf_square_14.c":34:20)
#loc29 = loc("CWE190_Integer_Overflow__int64_t_fscanf_square_14.c":34:18)
#loc30 = loc("CWE190_Integer_Overflow__int64_t_fscanf_square_14.c":35:5)
#loc31 = loc("CWE190_Integer_Overflow__int64_t_fscanf_square_14.c":36:9)
#loc32 = loc("CWE190_Integer_Overflow__int64_t_fscanf_square_14.c":40:9)
#loc33 = loc("CWE190_Integer_Overflow__int64_t_fscanf_square_14.c":38:13)
#loc34 = loc("CWE190_Integer_Overflow__int64_t_fscanf_square_14.c":38:37)
#loc35 = loc("CWE190_Integer_Overflow__int64_t_fscanf_square_14.c":38:30)
#loc36 = loc("CWE190_Integer_Overflow__int64_t_fscanf_square_14.c":39:31)
#loc37 = loc("CWE190_Integer_Overflow__int64_t_fscanf_square_14.c":39:13)
#loc38 = loc("CWE190_Integer_Overflow__int64_t_fscanf_square_14.c":148:1)
#loc39 = loc("CWE190_Integer_Overflow__int64_t_fscanf_square_14.c":154:1)
#loc40 = loc("CWE190_Integer_Overflow__int64_t_fscanf_square_14.c":150:5)
#loc41 = loc("CWE190_Integer_Overflow__int64_t_fscanf_square_14.c":150:14)
#loc42 = loc("CWE190_Integer_Overflow__int64_t_fscanf_square_14.c":151:5)
#loc43 = loc("CWE190_Integer_Overflow__int64_t_fscanf_square_14.c":151:14)
#loc44 = loc("CWE190_Integer_Overflow__int64_t_fscanf_square_14.c":152:5)
#loc45 = loc("CWE190_Integer_Overflow__int64_t_fscanf_square_14.c":152:14)
#loc46 = loc("CWE190_Integer_Overflow__int64_t_fscanf_square_14.c":153:5)
#loc47 = loc("CWE190_Integer_Overflow__int64_t_fscanf_square_14.c":153:14)
#loc48 = loc("../../../testcasesupport/std_testcase_io.h":14:1)
#loc49 = loc("../../../testcasesupport/std_testcase_io.h":14:33)
#loc50 = loc("CWE190_Integer_Overflow__int64_t_fscanf_square_14.c":61:19)
#loc51 = loc("/usr/include/inttypes.h":351:1)
#loc52 = loc("/usr/include/inttypes.h":351:74)
#loc53 = loc("/usr/include/bits/mathcalls.h":143:1)
#loc54 = loc("CWE190_Integer_Overflow__int64_t_fscanf_square_14.c":73:23)
#loc55 = loc("CWE190_Integer_Overflow__int64_t_fscanf_square_14.c":49:1)
#loc56 = loc("CWE190_Integer_Overflow__int64_t_fscanf_square_14.c":76:1)
#loc57 = loc("CWE190_Integer_Overflow__int64_t_fscanf_square_14.c":51:5)
#loc58 = loc("CWE190_Integer_Overflow__int64_t_fscanf_square_14.c":51:13)
#loc59 = loc("CWE190_Integer_Overflow__int64_t_fscanf_square_14.c":52:12)
#loc60 = loc("CWE190_Integer_Overflow__int64_t_fscanf_square_14.c":52:5)
#loc61 = loc("CWE190_Integer_Overflow__int64_t_fscanf_square_14.c":53:5)
#loc62 = loc("CWE190_Integer_Overflow__int64_t_fscanf_square_14.c":57:5)
#loc63 = loc("CWE190_Integer_Overflow__int64_t_fscanf_square_14.c":53:8)
#loc64 = loc("CWE190_Integer_Overflow__int64_t_fscanf_square_14.c":53:20)
#loc65 = loc("CWE190_Integer_Overflow__int64_t_fscanf_square_14.c":53:18)
#loc66 = loc("CWE190_Integer_Overflow__int64_t_fscanf_square_14.c":54:5)
#loc67 = loc("CWE190_Integer_Overflow__int64_t_fscanf_square_14.c":56:9)
#loc68 = loc("CWE190_Integer_Overflow__int64_t_fscanf_square_14.c":56:17)
#loc69 = loc("CWE190_Integer_Overflow__int64_t_fscanf_square_14.c":56:24)
#loc70 = loc("CWE190_Integer_Overflow__int64_t_fscanf_square_14.c":56:28)
#loc71 = loc("CWE190_Integer_Overflow__int64_t_fscanf_square_14.c":58:5)
#loc72 = loc("CWE190_Integer_Overflow__int64_t_fscanf_square_14.c":75:5)
#loc73 = loc("CWE190_Integer_Overflow__int64_t_fscanf_square_14.c":58:8)
#loc74 = loc("CWE190_Integer_Overflow__int64_t_fscanf_square_14.c":58:20)
#loc75 = loc("CWE190_Integer_Overflow__int64_t_fscanf_square_14.c":58:18)
#loc76 = loc("CWE190_Integer_Overflow__int64_t_fscanf_square_14.c":59:5)
#loc77 = loc("CWE190_Integer_Overflow__int64_t_fscanf_square_14.c":62:5)
#loc78 = loc("CWE190_Integer_Overflow__int64_t_fscanf_square_14.c":64:5)
#loc79 = loc("CWE190_Integer_Overflow__int64_t_fscanf_square_14.c":61:9)
#loc80 = loc("CWE190_Integer_Overflow__int64_t_fscanf_square_14.c":66:9)
#loc81 = loc("CWE190_Integer_Overflow__int64_t_fscanf_square_14.c":74:9)
#loc82 = loc("CWE190_Integer_Overflow__int64_t_fscanf_square_14.c":66:31)
#loc83 = loc("CWE190_Integer_Overflow__int64_t_fscanf_square_14.c":66:13)
#loc84 = loc("CWE190_Integer_Overflow__int64_t_fscanf_square_14.c":66:40)
#loc85 = loc("CWE190_Integer_Overflow__int64_t_fscanf_square_14.c":66:46)
#loc86 = loc("CWE190_Integer_Overflow__int64_t_fscanf_square_14.c":66:55)
#loc87 = loc("CWE190_Integer_Overflow__int64_t_fscanf_square_14.c":66:37)
#loc88 = loc("CWE190_Integer_Overflow__int64_t_fscanf_square_14.c":67:9)
#loc89 = loc("CWE190_Integer_Overflow__int64_t_fscanf_square_14.c":70:9)
#loc90 = loc("CWE190_Integer_Overflow__int64_t_fscanf_square_14.c":72:9)
#loc91 = loc("CWE190_Integer_Overflow__int64_t_fscanf_square_14.c":68:13)
#loc92 = loc("CWE190_Integer_Overflow__int64_t_fscanf_square_14.c":68:37)
#loc93 = loc("CWE190_Integer_Overflow__int64_t_fscanf_square_14.c":68:30)
#loc94 = loc("CWE190_Integer_Overflow__int64_t_fscanf_square_14.c":69:31)
#loc95 = loc("CWE190_Integer_Overflow__int64_t_fscanf_square_14.c":69:13)
#loc96 = loc("CWE190_Integer_Overflow__int64_t_fscanf_square_14.c":73:13)
#loc97 = loc("CWE190_Integer_Overflow__int64_t_fscanf_square_14.c":79:1)
#loc98 = loc("CWE190_Integer_Overflow__int64_t_fscanf_square_14.c":101:1)
#loc99 = loc("CWE190_Integer_Overflow__int64_t_fscanf_square_14.c":81:5)
#loc100 = loc("CWE190_Integer_Overflow__int64_t_fscanf_square_14.c":81:13)
#loc101 = loc("CWE190_Integer_Overflow__int64_t_fscanf_square_14.c":82:12)
#loc102 = loc("CWE190_Integer_Overflow__int64_t_fscanf_square_14.c":82:5)
#loc103 = loc("CWE190_Integer_Overflow__int64_t_fscanf_square_14.c":83:5)
#loc104 = loc("CWE190_Integer_Overflow__int64_t_fscanf_square_14.c":87:5)
#loc105 = loc("CWE190_Integer_Overflow__int64_t_fscanf_square_14.c":83:8)
#loc106 = loc("CWE190_Integer_Overflow__int64_t_fscanf_square_14.c":83:20)
#loc107 = loc("CWE190_Integer_Overflow__int64_t_fscanf_square_14.c":83:18)
#loc108 = loc("CWE190_Integer_Overflow__int64_t_fscanf_square_14.c":84:5)
#loc109 = loc("CWE190_Integer_Overflow__int64_t_fscanf_square_14.c":86:9)
#loc110 = loc("CWE190_Integer_Overflow__int64_t_fscanf_square_14.c":86:17)
#loc111 = loc("CWE190_Integer_Overflow__int64_t_fscanf_square_14.c":86:24)
#loc112 = loc("CWE190_Integer_Overflow__int64_t_fscanf_square_14.c":86:28)
#loc113 = loc("CWE190_Integer_Overflow__int64_t_fscanf_square_14.c":88:5)
#loc114 = loc("CWE190_Integer_Overflow__int64_t_fscanf_square_14.c":100:5)
#loc115 = loc("CWE190_Integer_Overflow__int64_t_fscanf_square_14.c":88:8)
#loc116 = loc("CWE190_Integer_Overflow__int64_t_fscanf_square_14.c":88:20)
#loc117 = loc("CWE190_Integer_Overflow__int64_t_fscanf_square_14.c":88:18)
#loc118 = loc("CWE190_Integer_Overflow__int64_t_fscanf_square_14.c":89:5)
#loc119 = loc("CWE190_Integer_Overflow__int64_t_fscanf_square_14.c":91:9)
#loc120 = loc("CWE190_Integer_Overflow__int64_t_fscanf_square_14.c":99:9)
#loc121 = loc("CWE190_Integer_Overflow__int64_t_fscanf_square_14.c":91:31)
#loc122 = loc("CWE190_Integer_Overflow__int64_t_fscanf_square_14.c":91:13)
#loc123 = loc("CWE190_Integer_Overflow__int64_t_fscanf_square_14.c":91:40)
#loc124 = loc("CWE190_Integer_Overflow__int64_t_fscanf_square_14.c":91:46)
#loc125 = loc("CWE190_Integer_Overflow__int64_t_fscanf_square_14.c":91:55)
#loc126 = loc("CWE190_Integer_Overflow__int64_t_fscanf_square_14.c":91:37)
#loc127 = loc("CWE190_Integer_Overflow__int64_t_fscanf_square_14.c":92:9)
#loc128 = loc("CWE190_Integer_Overflow__int64_t_fscanf_square_14.c":95:9)
#loc129 = loc("CWE190_Integer_Overflow__int64_t_fscanf_square_14.c":97:9)
#loc130 = loc("CWE190_Integer_Overflow__int64_t_fscanf_square_14.c":93:13)
#loc131 = loc("CWE190_Integer_Overflow__int64_t_fscanf_square_14.c":93:37)
#loc132 = loc("CWE190_Integer_Overflow__int64_t_fscanf_square_14.c":93:30)
#loc133 = loc("CWE190_Integer_Overflow__int64_t_fscanf_square_14.c":94:31)
#loc134 = loc("CWE190_Integer_Overflow__int64_t_fscanf_square_14.c":94:13)
#loc135 = loc("CWE190_Integer_Overflow__int64_t_fscanf_square_14.c":98:23)
#loc136 = loc("CWE190_Integer_Overflow__int64_t_fscanf_square_14.c":98:13)
#loc137 = loc("CWE190_Integer_Overflow__int64_t_fscanf_square_14.c":104:1)
#loc138 = loc("CWE190_Integer_Overflow__int64_t_fscanf_square_14.c":126:1)
#loc139 = loc("CWE190_Integer_Overflow__int64_t_fscanf_square_14.c":106:5)
#loc140 = loc("CWE190_Integer_Overflow__int64_t_fscanf_square_14.c":106:13)
#loc141 = loc("CWE190_Integer_Overflow__int64_t_fscanf_square_14.c":107:12)
#loc142 = loc("CWE190_Integer_Overflow__int64_t_fscanf_square_14.c":107:5)
#loc143 = loc("CWE190_Integer_Overflow__int64_t_fscanf_square_14.c":108:5)
#loc144 = loc("CWE190_Integer_Overflow__int64_t_fscanf_square_14.c":117:5)
#loc145 = loc("CWE190_Integer_Overflow__int64_t_fscanf_square_14.c":108:8)
#loc146 = loc("CWE190_Integer_Overflow__int64_t_fscanf_square_14.c":108:20)
#loc147 = loc("CWE190_Integer_Overflow__int64_t_fscanf_square_14.c":108:18)
#loc148 = loc("CWE190_Integer_Overflow__int64_t_fscanf_square_14.c":109:5)
#loc149 = loc("CWE190_Integer_Overflow__int64_t_fscanf_square_14.c":112:5)
#loc150 = loc("CWE190_Integer_Overflow__int64_t_fscanf_square_14.c":114:5)
#loc151 = loc("CWE190_Integer_Overflow__int64_t_fscanf_square_14.c":111:19)
#loc152 = loc("CWE190_Integer_Overflow__int64_t_fscanf_square_14.c":111:9)
#loc153 = loc("CWE190_Integer_Overflow__int64_t_fscanf_square_14.c":116:16)
#loc154 = loc("CWE190_Integer_Overflow__int64_t_fscanf_square_14.c":116:9)
#loc155 = loc("CWE190_Integer_Overflow__int64_t_fscanf_square_14.c":118:5)
#loc156 = loc("CWE190_Integer_Overflow__int64_t_fscanf_square_14.c":125:5)
#loc157 = loc("CWE190_Integer_Overflow__int64_t_fscanf_square_14.c":118:8)
#loc158 = loc("CWE190_Integer_Overflow__int64_t_fscanf_square_14.c":118:20)
#loc159 = loc("CWE190_Integer_Overflow__int64_t_fscanf_square_14.c":118:18)
#loc160 = loc("CWE190_Integer_Overflow__int64_t_fscanf_square_14.c":119:5)
#loc161 = loc("CWE190_Integer_Overflow__int64_t_fscanf_square_14.c":120:9)
#loc162 = loc("CWE190_Integer_Overflow__int64_t_fscanf_square_14.c":124:9)
#loc163 = loc("CWE190_Integer_Overflow__int64_t_fscanf_square_14.c":122:13)
#loc164 = loc("CWE190_Integer_Overflow__int64_t_fscanf_square_14.c":122:37)
#loc165 = loc("CWE190_Integer_Overflow__int64_t_fscanf_square_14.c":122:30)
#loc166 = loc("CWE190_Integer_Overflow__int64_t_fscanf_square_14.c":123:31)
#loc167 = loc("CWE190_Integer_Overflow__int64_t_fscanf_square_14.c":123:13)
#loc168 = loc("CWE190_Integer_Overflow__int64_t_fscanf_square_14.c":129:1)
#loc169 = loc("CWE190_Integer_Overflow__int64_t_fscanf_square_14.c":146:1)
#loc170 = loc("CWE190_Integer_Overflow__int64_t_fscanf_square_14.c":131:5)
#loc171 = loc("CWE190_Integer_Overflow__int64_t_fscanf_square_14.c":131:13)
#loc172 = loc("CWE190_Integer_Overflow__int64_t_fscanf_square_14.c":132:12)
#loc173 = loc("CWE190_Integer_Overflow__int64_t_fscanf_square_14.c":132:5)
#loc174 = loc("CWE190_Integer_Overflow__int64_t_fscanf_square_14.c":133:5)
#loc175 = loc("CWE190_Integer_Overflow__int64_t_fscanf_square_14.c":137:5)
#loc176 = loc("CWE190_Integer_Overflow__int64_t_fscanf_square_14.c":133:8)
#loc177 = loc("CWE190_Integer_Overflow__int64_t_fscanf_square_14.c":133:20)
#loc178 = loc("CWE190_Integer_Overflow__int64_t_fscanf_square_14.c":133:18)
#loc179 = loc("CWE190_Integer_Overflow__int64_t_fscanf_square_14.c":134:5)
#loc180 = loc("CWE190_Integer_Overflow__int64_t_fscanf_square_14.c":136:16)
#loc181 = loc("CWE190_Integer_Overflow__int64_t_fscanf_square_14.c":136:9)
#loc182 = loc("CWE190_Integer_Overflow__int64_t_fscanf_square_14.c":138:5)
#loc183 = loc("CWE190_Integer_Overflow__int64_t_fscanf_square_14.c":145:5)
#loc184 = loc("CWE190_Integer_Overflow__int64_t_fscanf_square_14.c":138:8)
#loc185 = loc("CWE190_Integer_Overflow__int64_t_fscanf_square_14.c":138:20)
#loc186 = loc("CWE190_Integer_Overflow__int64_t_fscanf_square_14.c":138:18)
#loc187 = loc("CWE190_Integer_Overflow__int64_t_fscanf_square_14.c":139:5)
#loc188 = loc("CWE190_Integer_Overflow__int64_t_fscanf_square_14.c":140:9)
#loc189 = loc("CWE190_Integer_Overflow__int64_t_fscanf_square_14.c":144:9)
#loc190 = loc("CWE190_Integer_Overflow__int64_t_fscanf_square_14.c":142:13)
#loc191 = loc("CWE190_Integer_Overflow__int64_t_fscanf_square_14.c":142:37)
#loc192 = loc("CWE190_Integer_Overflow__int64_t_fscanf_square_14.c":142:30)
#loc193 = loc("CWE190_Integer_Overflow__int64_t_fscanf_square_14.c":143:31)
#loc194 = loc("CWE190_Integer_Overflow__int64_t_fscanf_square_14.c":143:13)
#loc195 = loc(fused[#loc1, #loc2])
#loc196 = loc(fused[#loc3, #loc4])
#loc197 = loc(fused[#loc5, #loc6])
#loc198 = loc(fused[#loc7, #loc8])
#loc199 = loc(fused[#loc9, #loc10])
#loc200 = loc(fused[#loc11, #loc12])
#loc201 = loc(fused[#loc13, #loc14])
#loc202 = loc(fused[#loc16, #loc15])
#loc203 = loc(fused[#loc17, #loc18])
#loc204 = loc(fused[#loc19, #loc20])
#loc205 = loc(fused[#loc22, #loc18])
#loc206 = loc(fused[#loc25, #loc26])
#loc207 = loc(fused[#loc27, #loc28])
#loc208 = loc(fused[#loc30, #loc26])
#loc209 = loc(fused[#loc31, #loc32])
#loc210 = loc(fused[#loc33, #loc34])
#loc211 = loc(fused[#loc38, #loc39])
#loc212 = loc(fused[#loc40, #loc41])
#loc213 = loc(fused[#loc42, #loc43])
#loc214 = loc(fused[#loc44, #loc45])
#loc215 = loc(fused[#loc46, #loc47])
#loc216 = loc(fused[#loc48, #loc49])
#loc217 = loc(fused[#loc51, #loc52])
#loc218 = loc(fused[#loc55, #loc56])
#loc219 = loc(fused[#loc57, #loc58])
#loc220 = loc(fused[#loc60, #loc59])
#loc221 = loc(fused[#loc61, #loc62])
#loc222 = loc(fused[#loc63, #loc64])
#loc223 = loc(fused[#loc66, #loc62])
#loc224 = loc(fused[#loc69, #loc70])
#loc225 = loc(fused[#loc71, #loc72])
#loc226 = loc(fused[#loc73, #loc74])
#loc227 = loc(fused[#loc76, #loc77, #loc78, #loc72])
#loc228 = loc(fused[#loc80, #loc81])
#loc229 = loc(fused[#loc83, #loc86])
#loc230 = loc(fused[#loc88, #loc89, #loc90, #loc81])
#loc231 = loc(fused[#loc91, #loc92])
#loc232 = loc(fused[#loc97, #loc98])
#loc233 = loc(fused[#loc99, #loc100])
#loc234 = loc(fused[#loc102, #loc101])
#loc235 = loc(fused[#loc103, #loc104])
#loc236 = loc(fused[#loc105, #loc106])
#loc237 = loc(fused[#loc108, #loc104])
#loc238 = loc(fused[#loc111, #loc112])
#loc239 = loc(fused[#loc113, #loc114])
#loc240 = loc(fused[#loc115, #loc116])
#loc241 = loc(fused[#loc118, #loc114])
#loc242 = loc(fused[#loc119, #loc120])
#loc243 = loc(fused[#loc122, #loc125])
#loc244 = loc(fused[#loc127, #loc128, #loc129, #loc120])
#loc245 = loc(fused[#loc130, #loc131])
#loc246 = loc(fused[#loc137, #loc138])
#loc247 = loc(fused[#loc139, #loc140])
#loc248 = loc(fused[#loc142, #loc141])
#loc249 = loc(fused[#loc143, #loc144])
#loc250 = loc(fused[#loc145, #loc146])
#loc251 = loc(fused[#loc148, #loc149, #loc150, #loc144])
#loc252 = loc(fused[#loc154, #loc153])
#loc253 = loc(fused[#loc155, #loc156])
#loc254 = loc(fused[#loc157, #loc158])
#loc255 = loc(fused[#loc160, #loc156])
#loc256 = loc(fused[#loc161, #loc162])
#loc257 = loc(fused[#loc163, #loc164])
#loc258 = loc(fused[#loc168, #loc169])
#loc259 = loc(fused[#loc170, #loc171])
#loc260 = loc(fused[#loc173, #loc172])
#loc261 = loc(fused[#loc174, #loc175])
#loc262 = loc(fused[#loc176, #loc177])
#loc263 = loc(fused[#loc179, #loc175])
#loc264 = loc(fused[#loc181, #loc180])
#loc265 = loc(fused[#loc182, #loc183])
#loc266 = loc(fused[#loc184, #loc185])
#loc267 = loc(fused[#loc187, #loc183])
#loc268 = loc(fused[#loc188, #loc189])
#loc269 = loc(fused[#loc190, #loc191])
