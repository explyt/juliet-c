!s32i = !cir.int<s, 32>
!s64i = !cir.int<s, 64>
!s8i = !cir.int<s, 8>
!u32i = !cir.int<u, 32>
#fn_attr = #cir<extra({nothrow = #cir.nothrow})>
#fn_attr1 = #cir<extra({inline = #cir.inline<no>, nothrow = #cir.nothrow, optnone = #cir.optnone, uwtable = #cir.uwtable<async>})>
module @"/workspaces/juliet-c/testcases/CWE511_Logic_Time_Bomb/CWE511_Logic_Time_Bomb__rand_05.c" attributes {cir.lang = #cir.lang<c>, cir.sob = #cir.signed_overflow_behavior<undefined>, cir.triple = "x86_64-unknown-linux-gnu", cir.type_size_info = #cir.type_size_info<char = 8, int = 32, size_t = 64>, cir.uwtable = #cir.uwtable<async>, dlti.dl_spec = #dlti.dl_spec<f64 = dense<64> : vector<2xi64>, f128 = dense<128> : vector<2xi64>, !llvm.ptr<272> = dense<64> : vector<4xi64>, i8 = dense<8> : vector<2xi64>, i16 = dense<16> : vector<2xi64>, f16 = dense<16> : vector<2xi64>, i32 = dense<32> : vector<2xi64>, !llvm.ptr = dense<64> : vector<4xi64>, !llvm.ptr<270> = dense<32> : vector<4xi64>, i1 = dense<8> : vector<2xi64>, !llvm.ptr<271> = dense<32> : vector<4xi64>, i128 = dense<128> : vector<2xi64>, i64 = dense<64> : vector<2xi64>, f80 = dense<128> : vector<2xi64>, "dlti.endianness" = "little", "dlti.stack_alignment" = 128 : i64, "dlti.mangling_mode" = "e">} {
  cir.global "private" internal dsolocal @staticTrue = #cir.int<1> : !s32i {alignment = 4 : i64} loc(#loc73)
  cir.func private @srand(!u32i) extra(#fn_attr) loc(#loc74)
  cir.func private @time(!cir.ptr<!s64i>) -> !s64i extra(#fn_attr) loc(#loc75)
  cir.func private @rand() -> !s32i extra(#fn_attr) loc(#loc76)
  cir.func private @unlink(!cir.ptr<!s8i>) -> !s32i extra(#fn_attr) loc(#loc77)
  cir.global "private" constant cir_private dsolocal @".str" = #cir.const_array<"important_file.txt\00" : !cir.array<!s8i x 19>> : !cir.array<!s8i x 19> {alignment = 1 : i64} loc(#loc11)
  cir.func no_proto @CWE511_Logic_Time_Bomb__rand_05_bad() extra(#fn_attr1) {
    cir.br ^bb1 loc(#loc79)
  ^bb1:  // pred: ^bb0
    %0 = cir.get_global @staticTrue : !cir.ptr<!s32i> loc(#loc73)
    %1 = cir.load %0 : !cir.ptr<!s32i>, !s32i loc(#loc16)
    %2 = cir.cast(int_to_bool, %1 : !s32i), !cir.bool loc(#loc16)
    cir.brcond %2 ^bb2, ^bb7 loc(#loc80)
  ^bb2:  // pred: ^bb1
    %3 = cir.const #cir.ptr<null> : !cir.ptr<!s64i> loc(#loc18)
    %4 = cir.call @time(%3) : (!cir.ptr<!s64i>) -> !s64i extra(#fn_attr) loc(#loc19)
    %5 = cir.cast(integral, %4 : !s64i), !u32i loc(#loc19)
    cir.call @srand(%5) : (!u32i) -> () extra(#fn_attr) loc(#loc20)
    cir.br ^bb3 loc(#loc81)
  ^bb3:  // pred: ^bb2
    %6 = cir.call @rand() : () -> !s32i extra(#fn_attr) loc(#loc23)
    %7 = cir.const #cir.int<20000> : !s32i loc(#loc24)
    %8 = cir.cmp(eq, %6, %7) : !s32i, !cir.bool loc(#loc82)
    cir.brcond %8 ^bb4, ^bb5 loc(#loc83)
  ^bb4:  // pred: ^bb3
    %9 = cir.get_global @".str" : !cir.ptr<!cir.array<!s8i x 19>> loc(#loc11)
    %10 = cir.cast(array_to_ptrdecay, %9 : !cir.ptr<!cir.array<!s8i x 19>>), !cir.ptr<!s8i> loc(#loc11)
    %11 = cir.call @unlink(%10) : (!cir.ptr<!s8i>) -> !s32i extra(#fn_attr) loc(#loc26)
    cir.br ^bb5 loc(#loc22)
  ^bb5:  // 2 preds: ^bb3, ^bb4
    cir.br ^bb6 loc(#loc22)
  ^bb6:  // pred: ^bb5
    cir.br ^bb7 loc(#loc15)
  ^bb7:  // 2 preds: ^bb1, ^bb6
    cir.br ^bb8 loc(#loc15)
  ^bb8:  // pred: ^bb7
    cir.return loc(#loc13)
  } loc(#loc78)
  cir.func no_proto @CWE511_Logic_Time_Bomb__rand_05_good() extra(#fn_attr1) {
    %0 = cir.get_global @good1 : !cir.ptr<!cir.func<()>> loc(#loc85)
    cir.call %0() : (!cir.ptr<!cir.func<()>>) -> () loc(#loc29)
    %1 = cir.get_global @good2 : !cir.ptr<!cir.func<()>> loc(#loc86)
    cir.call %1() : (!cir.ptr<!cir.func<()>>) -> () loc(#loc31)
    cir.return loc(#loc28)
  } loc(#loc84)
  cir.global "private" internal dsolocal @staticFalse = #cir.int<0> : !s32i {alignment = 4 : i64} loc(#loc87)
  cir.func private @printLine(!cir.ptr<!s8i>) loc(#loc88)
  cir.global "private" constant cir_private dsolocal @".str.1" = #cir.const_array<"Benign, fixed string\00" : !cir.array<!s8i x 21>> : !cir.array<!s8i x 21> {alignment = 1 : i64} loc(#loc37)
  cir.global "private" constant cir_private dsolocal @".str.2" = #cir.const_array<"Happy New Year!\00" : !cir.array<!s8i x 16>> : !cir.array<!s8i x 16> {alignment = 1 : i64} loc(#loc38)
  cir.func no_proto internal private @good1() extra(#fn_attr1) {
    cir.br ^bb1 loc(#loc90)
  ^bb1:  // pred: ^bb0
    %0 = cir.get_global @staticFalse : !cir.ptr<!s32i> loc(#loc87)
    %1 = cir.load %0 : !cir.ptr<!s32i>, !s32i loc(#loc43)
    %2 = cir.cast(int_to_bool, %1 : !s32i), !cir.bool loc(#loc43)
    cir.brcond %2 ^bb2, ^bb3 loc(#loc91)
  ^bb2:  // pred: ^bb1
    %3 = cir.get_global @".str.1" : !cir.ptr<!cir.array<!s8i x 21>> loc(#loc37)
    %4 = cir.cast(array_to_ptrdecay, %3 : !cir.ptr<!cir.array<!s8i x 21>>), !cir.ptr<!s8i> loc(#loc37)
    cir.call @printLine(%4) : (!cir.ptr<!s8i>) -> () loc(#loc47)
    cir.br ^bb8 loc(#loc45)
  ^bb3:  // pred: ^bb1
    %5 = cir.const #cir.ptr<null> : !cir.ptr<!s64i> loc(#loc48)
    %6 = cir.call @time(%5) : (!cir.ptr<!s64i>) -> !s64i extra(#fn_attr) loc(#loc49)
    %7 = cir.cast(integral, %6 : !s64i), !u32i loc(#loc49)
    cir.call @srand(%7) : (!u32i) -> () extra(#fn_attr) loc(#loc50)
    cir.br ^bb4 loc(#loc92)
  ^bb4:  // pred: ^bb3
    %8 = cir.call @rand() : () -> !s32i extra(#fn_attr) loc(#loc53)
    %9 = cir.const #cir.int<20000> : !s32i loc(#loc54)
    %10 = cir.cmp(eq, %8, %9) : !s32i, !cir.bool loc(#loc93)
    cir.brcond %10 ^bb5, ^bb6 loc(#loc94)
  ^bb5:  // pred: ^bb4
    %11 = cir.get_global @".str.2" : !cir.ptr<!cir.array<!s8i x 16>> loc(#loc38)
    %12 = cir.cast(array_to_ptrdecay, %11 : !cir.ptr<!cir.array<!s8i x 16>>), !cir.ptr<!s8i> loc(#loc38)
    cir.call @printLine(%12) : (!cir.ptr<!s8i>) -> () loc(#loc56)
    cir.br ^bb6 loc(#loc52)
  ^bb6:  // 2 preds: ^bb4, ^bb5
    cir.br ^bb7 loc(#loc52)
  ^bb7:  // pred: ^bb6
    cir.br ^bb8 loc(#loc42)
  ^bb8:  // 2 preds: ^bb2, ^bb7
    cir.br ^bb9 loc(#loc42)
  ^bb9:  // pred: ^bb8
    cir.return loc(#loc40)
  } loc(#loc89)
  cir.func no_proto internal private @good2() extra(#fn_attr1) {
    cir.br ^bb1 loc(#loc96)
  ^bb1:  // pred: ^bb0
    %0 = cir.get_global @staticTrue : !cir.ptr<!s32i> loc(#loc73)
    %1 = cir.load %0 : !cir.ptr<!s32i>, !s32i loc(#loc61)
    %2 = cir.cast(int_to_bool, %1 : !s32i), !cir.bool loc(#loc61)
    cir.brcond %2 ^bb2, ^bb7 loc(#loc97)
  ^bb2:  // pred: ^bb1
    %3 = cir.const #cir.ptr<null> : !cir.ptr<!s64i> loc(#loc63)
    %4 = cir.call @time(%3) : (!cir.ptr<!s64i>) -> !s64i extra(#fn_attr) loc(#loc64)
    %5 = cir.cast(integral, %4 : !s64i), !u32i loc(#loc64)
    cir.call @srand(%5) : (!u32i) -> () extra(#fn_attr) loc(#loc65)
    cir.br ^bb3 loc(#loc98)
  ^bb3:  // pred: ^bb2
    %6 = cir.call @rand() : () -> !s32i extra(#fn_attr) loc(#loc68)
    %7 = cir.const #cir.int<20000> : !s32i loc(#loc69)
    %8 = cir.cmp(eq, %6, %7) : !s32i, !cir.bool loc(#loc99)
    cir.brcond %8 ^bb4, ^bb5 loc(#loc100)
  ^bb4:  // pred: ^bb3
    %9 = cir.get_global @".str.2" : !cir.ptr<!cir.array<!s8i x 16>> loc(#loc71)
    %10 = cir.cast(array_to_ptrdecay, %9 : !cir.ptr<!cir.array<!s8i x 16>>), !cir.ptr<!s8i> loc(#loc71)
    cir.call @printLine(%10) : (!cir.ptr<!s8i>) -> () loc(#loc72)
    cir.br ^bb5 loc(#loc67)
  ^bb5:  // 2 preds: ^bb3, ^bb4
    cir.br ^bb6 loc(#loc67)
  ^bb6:  // pred: ^bb5
    cir.br ^bb7 loc(#loc60)
  ^bb7:  // 2 preds: ^bb1, ^bb6
    cir.br ^bb8 loc(#loc60)
  ^bb8:  // pred: ^bb7
    cir.return loc(#loc58)
  } loc(#loc95)
} loc(#loc)
#loc = loc("/workspaces/juliet-c/testcases/CWE511_Logic_Time_Bomb/CWE511_Logic_Time_Bomb__rand_05.c":0:0)
#loc1 = loc("CWE511_Logic_Time_Bomb__rand_05.c":30:1)
#loc2 = loc("CWE511_Logic_Time_Bomb__rand_05.c":30:25)
#loc3 = loc("/usr/include/stdlib.h":575:1)
#loc4 = loc("/usr/include/stdlib.h":575:41)
#loc5 = loc("/usr/include/time.h":76:1)
#loc6 = loc("/usr/include/time.h":76:38)
#loc7 = loc("/usr/include/stdlib.h":573:1)
#loc8 = loc("/usr/include/stdlib.h":573:24)
#loc9 = loc("/usr/include/unistd.h":858:1)
#loc10 = loc("/usr/include/unistd.h":858:48)
#loc11 = loc("CWE511_Logic_Time_Bomb__rand_05.c":43:20)
#loc12 = loc("CWE511_Logic_Time_Bomb__rand_05.c":35:1)
#loc13 = loc("CWE511_Logic_Time_Bomb__rand_05.c":46:1)
#loc14 = loc("CWE511_Logic_Time_Bomb__rand_05.c":37:5)
#loc15 = loc("CWE511_Logic_Time_Bomb__rand_05.c":45:5)
#loc16 = loc("CWE511_Logic_Time_Bomb__rand_05.c":37:8)
#loc17 = loc("CWE511_Logic_Time_Bomb__rand_05.c":38:5)
#loc18 = loc("CWE511_Logic_Time_Bomb__rand_05.c":39:30)
#loc19 = loc("CWE511_Logic_Time_Bomb__rand_05.c":39:25)
#loc20 = loc("CWE511_Logic_Time_Bomb__rand_05.c":39:9)
#loc21 = loc("CWE511_Logic_Time_Bomb__rand_05.c":41:9)
#loc22 = loc("CWE511_Logic_Time_Bomb__rand_05.c":44:9)
#loc23 = loc("CWE511_Logic_Time_Bomb__rand_05.c":41:13)
#loc24 = loc("CWE511_Logic_Time_Bomb__rand_05.c":41:23)
#loc25 = loc("CWE511_Logic_Time_Bomb__rand_05.c":42:9)
#loc26 = loc("CWE511_Logic_Time_Bomb__rand_05.c":43:13)
#loc27 = loc("CWE511_Logic_Time_Bomb__rand_05.c":85:1)
#loc28 = loc("CWE511_Logic_Time_Bomb__rand_05.c":89:1)
#loc29 = loc("CWE511_Logic_Time_Bomb__rand_05.c":87:5)
#loc30 = loc("CWE511_Logic_Time_Bomb__rand_05.c":87:11)
#loc31 = loc("CWE511_Logic_Time_Bomb__rand_05.c":88:5)
#loc32 = loc("CWE511_Logic_Time_Bomb__rand_05.c":88:11)
#loc33 = loc("CWE511_Logic_Time_Bomb__rand_05.c":31:1)
#loc34 = loc("CWE511_Logic_Time_Bomb__rand_05.c":31:26)
#loc35 = loc("../../testcasesupport/std_testcase_io.h":14:1)
#loc36 = loc("../../testcasesupport/std_testcase_io.h":14:33)
#loc37 = loc("CWE511_Logic_Time_Bomb__rand_05.c":58:19)
#loc38 = loc("CWE511_Logic_Time_Bomb__rand_05.c":66:23)
#loc39 = loc("CWE511_Logic_Time_Bomb__rand_05.c":53:1)
#loc40 = loc("CWE511_Logic_Time_Bomb__rand_05.c":69:1)
#loc41 = loc("CWE511_Logic_Time_Bomb__rand_05.c":55:5)
#loc42 = loc("CWE511_Logic_Time_Bomb__rand_05.c":68:5)
#loc43 = loc("CWE511_Logic_Time_Bomb__rand_05.c":55:8)
#loc44 = loc("CWE511_Logic_Time_Bomb__rand_05.c":56:5)
#loc45 = loc("CWE511_Logic_Time_Bomb__rand_05.c":59:5)
#loc46 = loc("CWE511_Logic_Time_Bomb__rand_05.c":61:5)
#loc47 = loc("CWE511_Logic_Time_Bomb__rand_05.c":58:9)
#loc48 = loc("CWE511_Logic_Time_Bomb__rand_05.c":62:30)
#loc49 = loc("CWE511_Logic_Time_Bomb__rand_05.c":62:25)
#loc50 = loc("CWE511_Logic_Time_Bomb__rand_05.c":62:9)
#loc51 = loc("CWE511_Logic_Time_Bomb__rand_05.c":64:9)
#loc52 = loc("CWE511_Logic_Time_Bomb__rand_05.c":67:9)
#loc53 = loc("CWE511_Logic_Time_Bomb__rand_05.c":64:13)
#loc54 = loc("CWE511_Logic_Time_Bomb__rand_05.c":64:23)
#loc55 = loc("CWE511_Logic_Time_Bomb__rand_05.c":65:9)
#loc56 = loc("CWE511_Logic_Time_Bomb__rand_05.c":66:13)
#loc57 = loc("CWE511_Logic_Time_Bomb__rand_05.c":72:1)
#loc58 = loc("CWE511_Logic_Time_Bomb__rand_05.c":83:1)
#loc59 = loc("CWE511_Logic_Time_Bomb__rand_05.c":74:5)
#loc60 = loc("CWE511_Logic_Time_Bomb__rand_05.c":82:5)
#loc61 = loc("CWE511_Logic_Time_Bomb__rand_05.c":74:8)
#loc62 = loc("CWE511_Logic_Time_Bomb__rand_05.c":75:5)
#loc63 = loc("CWE511_Logic_Time_Bomb__rand_05.c":76:30)
#loc64 = loc("CWE511_Logic_Time_Bomb__rand_05.c":76:25)
#loc65 = loc("CWE511_Logic_Time_Bomb__rand_05.c":76:9)
#loc66 = loc("CWE511_Logic_Time_Bomb__rand_05.c":78:9)
#loc67 = loc("CWE511_Logic_Time_Bomb__rand_05.c":81:9)
#loc68 = loc("CWE511_Logic_Time_Bomb__rand_05.c":78:13)
#loc69 = loc("CWE511_Logic_Time_Bomb__rand_05.c":78:23)
#loc70 = loc("CWE511_Logic_Time_Bomb__rand_05.c":79:9)
#loc71 = loc("CWE511_Logic_Time_Bomb__rand_05.c":80:23)
#loc72 = loc("CWE511_Logic_Time_Bomb__rand_05.c":80:13)
#loc73 = loc(fused[#loc1, #loc2])
#loc74 = loc(fused[#loc3, #loc4])
#loc75 = loc(fused[#loc5, #loc6])
#loc76 = loc(fused[#loc7, #loc8])
#loc77 = loc(fused[#loc9, #loc10])
#loc78 = loc(fused[#loc12, #loc13])
#loc79 = loc(fused[#loc14, #loc15])
#loc80 = loc(fused[#loc17, #loc15])
#loc81 = loc(fused[#loc21, #loc22])
#loc82 = loc(fused[#loc23, #loc24])
#loc83 = loc(fused[#loc25, #loc22])
#loc84 = loc(fused[#loc27, #loc28])
#loc85 = loc(fused[#loc29, #loc30])
#loc86 = loc(fused[#loc31, #loc32])
#loc87 = loc(fused[#loc33, #loc34])
#loc88 = loc(fused[#loc35, #loc36])
#loc89 = loc(fused[#loc39, #loc40])
#loc90 = loc(fused[#loc41, #loc42])
#loc91 = loc(fused[#loc44, #loc45, #loc46, #loc42])
#loc92 = loc(fused[#loc51, #loc52])
#loc93 = loc(fused[#loc53, #loc54])
#loc94 = loc(fused[#loc55, #loc52])
#loc95 = loc(fused[#loc57, #loc58])
#loc96 = loc(fused[#loc59, #loc60])
#loc97 = loc(fused[#loc62, #loc60])
#loc98 = loc(fused[#loc66, #loc67])
#loc99 = loc(fused[#loc68, #loc69])
#loc100 = loc(fused[#loc70, #loc67])
