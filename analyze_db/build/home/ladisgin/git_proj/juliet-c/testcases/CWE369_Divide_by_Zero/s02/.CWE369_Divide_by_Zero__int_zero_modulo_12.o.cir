!s32i = !cir.int<s, 32>
!s8i = !cir.int<s, 8>
!void = !cir.void
#fn_attr = #cir<extra({inline = #cir.inline<no>, nothrow = #cir.nothrow, optnone = #cir.optnone})>
module @"/home/ladisgin/git_proj/juliet-c/testcases/CWE369_Divide_by_Zero/s02/CWE369_Divide_by_Zero__int_zero_modulo_12.c" attributes {cir.lang = #cir.lang<c>, cir.sob = #cir.signed_overflow_behavior<undefined>, cir.triple = "x86_64-unknown-linux-gnu", dlti.dl_spec = #dlti.dl_spec<i64 = dense<64> : vector<2xi64>, f80 = dense<128> : vector<2xi64>, i128 = dense<128> : vector<2xi64>, i1 = dense<8> : vector<2xi64>, !llvm.ptr = dense<64> : vector<4xi64>, i16 = dense<16> : vector<2xi64>, i8 = dense<8> : vector<2xi64>, i32 = dense<32> : vector<2xi64>, !llvm.ptr<270> = dense<32> : vector<4xi64>, f128 = dense<128> : vector<2xi64>, f64 = dense<64> : vector<2xi64>, f16 = dense<16> : vector<2xi64>, !llvm.ptr<272> = dense<64> : vector<4xi64>, !llvm.ptr<271> = dense<32> : vector<4xi64>, "dlti.stack_alignment" = 128 : i64, "dlti.endianness" = "little">} {
  cir.func no_proto private @globalReturnsTrueOrFalse(...) -> !s32i loc(#loc133)
  cir.func private @printIntLine(!s32i) loc(#loc134)
  cir.func private @printLine(!cir.ptr<!s8i>) loc(#loc135)
  cir.global "private" constant cir_private dsolocal @".str" = #cir.const_array<"This would result in a divide by zero\00" : !cir.array<!s8i x 38>> : !cir.array<!s8i x 38> {alignment = 1 : i64} loc(#loc7)
  cir.func no_proto @CWE369_Divide_by_Zero__int_zero_modulo_12_bad() extra(#fn_attr) {
    %0 = cir.alloca !s32i, !cir.ptr<!s32i>, ["data"] {alignment = 4 : i64} loc(#loc137)
    %1 = cir.const #cir.int<1> : !s32i loc(#loc12)
    %2 = cir.unary(minus, %1) : !s32i, !s32i loc(#loc13)
    cir.store %2, %0 : !s32i, !cir.ptr<!s32i> loc(#loc138)
    cir.br ^bb1 loc(#loc139)
  ^bb1:  // pred: ^bb0
    %3 = cir.get_global @globalReturnsTrueOrFalse : !cir.ptr<!cir.func<!s32i (...)>> loc(#loc140)
    %4 = cir.cast(bitcast, %3 : !cir.ptr<!cir.func<!s32i (...)>>), !cir.ptr<!cir.func<!s32i ()>> loc(#loc140)
    %5 = cir.call %4() : (!cir.ptr<!cir.func<!s32i ()>>) -> !s32i loc(#loc17)
    %6 = cir.cast(int_to_bool, %5 : !s32i), !cir.bool loc(#loc17)
    cir.brcond %6 ^bb2, ^bb3 loc(#loc141)
  ^bb2:  // pred: ^bb1
    %7 = cir.const #cir.int<0> : !s32i loc(#loc22)
    cir.store %7, %0 : !s32i, !cir.ptr<!s32i> loc(#loc142)
    cir.br ^bb4 loc(#loc20)
  ^bb3:  // pred: ^bb1
    %8 = cir.const #cir.int<7> : !s32i loc(#loc24)
    cir.store %8, %0 : !s32i, !cir.ptr<!s32i> loc(#loc143)
    cir.br ^bb4 loc(#loc16)
  ^bb4:  // 2 preds: ^bb2, ^bb3
    cir.br ^bb5 loc(#loc16)
  ^bb5:  // pred: ^bb4
    cir.br ^bb6 loc(#loc144)
  ^bb6:  // pred: ^bb5
    %9 = cir.get_global @globalReturnsTrueOrFalse : !cir.ptr<!cir.func<!s32i (...)>> loc(#loc145)
    %10 = cir.cast(bitcast, %9 : !cir.ptr<!cir.func<!s32i (...)>>), !cir.ptr<!cir.func<!s32i ()>> loc(#loc145)
    %11 = cir.call %10() : (!cir.ptr<!cir.func<!s32i ()>>) -> !s32i loc(#loc28)
    %12 = cir.cast(int_to_bool, %11 : !s32i), !cir.bool loc(#loc28)
    cir.brcond %12 ^bb7, ^bb8 loc(#loc146)
  ^bb7:  // pred: ^bb6
    %13 = cir.const #cir.int<100> : !s32i loc(#loc33)
    %14 = cir.load %0 : !cir.ptr<!s32i>, !s32i loc(#loc34)
    %15 = cir.binop(rem, %13, %14) : !s32i loc(#loc147)
    cir.call @printIntLine(%15) : (!s32i) -> () loc(#loc35)
    cir.br ^bb14 loc(#loc31)
  ^bb8:  // pred: ^bb6
    cir.br ^bb9 loc(#loc148)
  ^bb9:  // pred: ^bb8
    %16 = cir.load %0 : !cir.ptr<!s32i>, !s32i loc(#loc38)
    %17 = cir.const #cir.int<0> : !s32i loc(#loc39)
    %18 = cir.cmp(ne, %16, %17) : !s32i, !cir.bool loc(#loc149)
    cir.brcond %18 ^bb10, ^bb11 loc(#loc150)
  ^bb10:  // pred: ^bb9
    %19 = cir.const #cir.int<100> : !s32i loc(#loc43)
    %20 = cir.load %0 : !cir.ptr<!s32i>, !s32i loc(#loc44)
    %21 = cir.binop(rem, %19, %20) : !s32i loc(#loc151)
    cir.call @printIntLine(%21) : (!s32i) -> () loc(#loc45)
    cir.br ^bb12 loc(#loc41)
  ^bb11:  // pred: ^bb9
    %22 = cir.get_global @".str" : !cir.ptr<!cir.array<!s8i x 38>> loc(#loc7)
    %23 = cir.cast(array_to_ptrdecay, %22 : !cir.ptr<!cir.array<!s8i x 38>>), !cir.ptr<!s8i> loc(#loc7)
    cir.call @printLine(%23) : (!cir.ptr<!s8i>) -> () loc(#loc46)
    cir.br ^bb12 loc(#loc37)
  ^bb12:  // 2 preds: ^bb10, ^bb11
    cir.br ^bb13 loc(#loc37)
  ^bb13:  // pred: ^bb12
    cir.br ^bb14 loc(#loc27)
  ^bb14:  // 2 preds: ^bb7, ^bb13
    cir.br ^bb15 loc(#loc27)
  ^bb15:  // pred: ^bb14
    cir.return loc(#loc9)
  } loc(#loc136)
  cir.func no_proto @CWE369_Divide_by_Zero__int_zero_modulo_12_good() extra(#fn_attr) {
    %0 = cir.get_global @goodB2G : !cir.ptr<!cir.func<!void ()>> loc(#loc153)
    cir.call %0() : (!cir.ptr<!cir.func<!void ()>>) -> () loc(#loc49)
    %1 = cir.get_global @goodG2B : !cir.ptr<!cir.func<!void ()>> loc(#loc154)
    cir.call %1() : (!cir.ptr<!cir.func<!void ()>>) -> () loc(#loc51)
    cir.return loc(#loc48)
  } loc(#loc152)
  cir.func no_proto internal private @goodB2G() extra(#fn_attr) {
    %0 = cir.alloca !s32i, !cir.ptr<!s32i>, ["data"] {alignment = 4 : i64} loc(#loc156)
    %1 = cir.const #cir.int<1> : !s32i loc(#loc57)
    %2 = cir.unary(minus, %1) : !s32i, !s32i loc(#loc58)
    cir.store %2, %0 : !s32i, !cir.ptr<!s32i> loc(#loc157)
    cir.br ^bb1 loc(#loc158)
  ^bb1:  // pred: ^bb0
    %3 = cir.get_global @globalReturnsTrueOrFalse : !cir.ptr<!cir.func<!s32i (...)>> loc(#loc159)
    %4 = cir.cast(bitcast, %3 : !cir.ptr<!cir.func<!s32i (...)>>), !cir.ptr<!cir.func<!s32i ()>> loc(#loc159)
    %5 = cir.call %4() : (!cir.ptr<!cir.func<!s32i ()>>) -> !s32i loc(#loc62)
    %6 = cir.cast(int_to_bool, %5 : !s32i), !cir.bool loc(#loc62)
    cir.brcond %6 ^bb2, ^bb3 loc(#loc160)
  ^bb2:  // pred: ^bb1
    %7 = cir.const #cir.int<0> : !s32i loc(#loc67)
    cir.store %7, %0 : !s32i, !cir.ptr<!s32i> loc(#loc161)
    cir.br ^bb4 loc(#loc65)
  ^bb3:  // pred: ^bb1
    %8 = cir.const #cir.int<0> : !s32i loc(#loc69)
    cir.store %8, %0 : !s32i, !cir.ptr<!s32i> loc(#loc162)
    cir.br ^bb4 loc(#loc61)
  ^bb4:  // 2 preds: ^bb2, ^bb3
    cir.br ^bb5 loc(#loc61)
  ^bb5:  // pred: ^bb4
    cir.br ^bb6 loc(#loc163)
  ^bb6:  // pred: ^bb5
    %9 = cir.get_global @globalReturnsTrueOrFalse : !cir.ptr<!cir.func<!s32i (...)>> loc(#loc164)
    %10 = cir.cast(bitcast, %9 : !cir.ptr<!cir.func<!s32i (...)>>), !cir.ptr<!cir.func<!s32i ()>> loc(#loc164)
    %11 = cir.call %10() : (!cir.ptr<!cir.func<!s32i ()>>) -> !s32i loc(#loc73)
    %12 = cir.cast(int_to_bool, %11 : !s32i), !cir.bool loc(#loc73)
    cir.brcond %12 ^bb7, ^bb13 loc(#loc165)
  ^bb7:  // pred: ^bb6
    cir.br ^bb8 loc(#loc166)
  ^bb8:  // pred: ^bb7
    %13 = cir.load %0 : !cir.ptr<!s32i>, !s32i loc(#loc80)
    %14 = cir.const #cir.int<0> : !s32i loc(#loc81)
    %15 = cir.cmp(ne, %13, %14) : !s32i, !cir.bool loc(#loc167)
    cir.brcond %15 ^bb9, ^bb10 loc(#loc168)
  ^bb9:  // pred: ^bb8
    %16 = cir.const #cir.int<100> : !s32i loc(#loc85)
    %17 = cir.load %0 : !cir.ptr<!s32i>, !s32i loc(#loc86)
    %18 = cir.binop(rem, %16, %17) : !s32i loc(#loc169)
    cir.call @printIntLine(%18) : (!s32i) -> () loc(#loc87)
    cir.br ^bb11 loc(#loc83)
  ^bb10:  // pred: ^bb8
    %19 = cir.get_global @".str" : !cir.ptr<!cir.array<!s8i x 38>> loc(#loc88)
    %20 = cir.cast(array_to_ptrdecay, %19 : !cir.ptr<!cir.array<!s8i x 38>>), !cir.ptr<!s8i> loc(#loc88)
    cir.call @printLine(%20) : (!cir.ptr<!s8i>) -> () loc(#loc89)
    cir.br ^bb11 loc(#loc79)
  ^bb11:  // 2 preds: ^bb9, ^bb10
    cir.br ^bb12 loc(#loc79)
  ^bb12:  // pred: ^bb11
    cir.br ^bb19 loc(#loc76)
  ^bb13:  // pred: ^bb6
    cir.br ^bb14 loc(#loc170)
  ^bb14:  // pred: ^bb13
    %21 = cir.load %0 : !cir.ptr<!s32i>, !s32i loc(#loc92)
    %22 = cir.const #cir.int<0> : !s32i loc(#loc93)
    %23 = cir.cmp(ne, %21, %22) : !s32i, !cir.bool loc(#loc171)
    cir.brcond %23 ^bb15, ^bb16 loc(#loc172)
  ^bb15:  // pred: ^bb14
    %24 = cir.const #cir.int<100> : !s32i loc(#loc97)
    %25 = cir.load %0 : !cir.ptr<!s32i>, !s32i loc(#loc98)
    %26 = cir.binop(rem, %24, %25) : !s32i loc(#loc173)
    cir.call @printIntLine(%26) : (!s32i) -> () loc(#loc99)
    cir.br ^bb17 loc(#loc95)
  ^bb16:  // pred: ^bb14
    %27 = cir.get_global @".str" : !cir.ptr<!cir.array<!s8i x 38>> loc(#loc100)
    %28 = cir.cast(array_to_ptrdecay, %27 : !cir.ptr<!cir.array<!s8i x 38>>), !cir.ptr<!s8i> loc(#loc100)
    cir.call @printLine(%28) : (!cir.ptr<!s8i>) -> () loc(#loc101)
    cir.br ^bb17 loc(#loc91)
  ^bb17:  // 2 preds: ^bb15, ^bb16
    cir.br ^bb18 loc(#loc91)
  ^bb18:  // pred: ^bb17
    cir.br ^bb19 loc(#loc72)
  ^bb19:  // 2 preds: ^bb12, ^bb18
    cir.br ^bb20 loc(#loc72)
  ^bb20:  // pred: ^bb19
    cir.return loc(#loc54)
  } loc(#loc155)
  cir.func no_proto internal private @goodG2B() extra(#fn_attr) {
    %0 = cir.alloca !s32i, !cir.ptr<!s32i>, ["data"] {alignment = 4 : i64} loc(#loc175)
    %1 = cir.const #cir.int<1> : !s32i loc(#loc106)
    %2 = cir.unary(minus, %1) : !s32i, !s32i loc(#loc107)
    cir.store %2, %0 : !s32i, !cir.ptr<!s32i> loc(#loc176)
    cir.br ^bb1 loc(#loc177)
  ^bb1:  // pred: ^bb0
    %3 = cir.get_global @globalReturnsTrueOrFalse : !cir.ptr<!cir.func<!s32i (...)>> loc(#loc178)
    %4 = cir.cast(bitcast, %3 : !cir.ptr<!cir.func<!s32i (...)>>), !cir.ptr<!cir.func<!s32i ()>> loc(#loc178)
    %5 = cir.call %4() : (!cir.ptr<!cir.func<!s32i ()>>) -> !s32i loc(#loc111)
    %6 = cir.cast(int_to_bool, %5 : !s32i), !cir.bool loc(#loc111)
    cir.brcond %6 ^bb2, ^bb3 loc(#loc179)
  ^bb2:  // pred: ^bb1
    %7 = cir.const #cir.int<7> : !s32i loc(#loc116)
    cir.store %7, %0 : !s32i, !cir.ptr<!s32i> loc(#loc180)
    cir.br ^bb4 loc(#loc114)
  ^bb3:  // pred: ^bb1
    %8 = cir.const #cir.int<7> : !s32i loc(#loc118)
    cir.store %8, %0 : !s32i, !cir.ptr<!s32i> loc(#loc181)
    cir.br ^bb4 loc(#loc110)
  ^bb4:  // 2 preds: ^bb2, ^bb3
    cir.br ^bb5 loc(#loc110)
  ^bb5:  // pred: ^bb4
    cir.br ^bb6 loc(#loc182)
  ^bb6:  // pred: ^bb5
    %9 = cir.get_global @globalReturnsTrueOrFalse : !cir.ptr<!cir.func<!s32i (...)>> loc(#loc183)
    %10 = cir.cast(bitcast, %9 : !cir.ptr<!cir.func<!s32i (...)>>), !cir.ptr<!cir.func<!s32i ()>> loc(#loc183)
    %11 = cir.call %10() : (!cir.ptr<!cir.func<!s32i ()>>) -> !s32i loc(#loc122)
    %12 = cir.cast(int_to_bool, %11 : !s32i), !cir.bool loc(#loc122)
    cir.brcond %12 ^bb7, ^bb8 loc(#loc184)
  ^bb7:  // pred: ^bb6
    %13 = cir.const #cir.int<100> : !s32i loc(#loc127)
    %14 = cir.load %0 : !cir.ptr<!s32i>, !s32i loc(#loc128)
    %15 = cir.binop(rem, %13, %14) : !s32i loc(#loc185)
    cir.call @printIntLine(%15) : (!s32i) -> () loc(#loc129)
    cir.br ^bb9 loc(#loc125)
  ^bb8:  // pred: ^bb6
    %16 = cir.const #cir.int<100> : !s32i loc(#loc130)
    %17 = cir.load %0 : !cir.ptr<!s32i>, !s32i loc(#loc131)
    %18 = cir.binop(rem, %16, %17) : !s32i loc(#loc186)
    cir.call @printIntLine(%18) : (!s32i) -> () loc(#loc132)
    cir.br ^bb9 loc(#loc121)
  ^bb9:  // 2 preds: ^bb7, ^bb8
    cir.br ^bb10 loc(#loc121)
  ^bb10:  // pred: ^bb9
    cir.return loc(#loc103)
  } loc(#loc174)
} loc(#loc)
#loc = loc("/home/ladisgin/git_proj/juliet-c/testcases/CWE369_Divide_by_Zero/s02/CWE369_Divide_by_Zero__int_zero_modulo_12.c":0:0)
#loc1 = loc("../../../testcasesupport/std_testcase_io.h":52:1)
#loc2 = loc("../../../testcasesupport/std_testcase_io.h":52:30)
#loc3 = loc("../../../testcasesupport/std_testcase_io.h":18:1)
#loc4 = loc("../../../testcasesupport/std_testcase_io.h":18:33)
#loc5 = loc("../../../testcasesupport/std_testcase_io.h":14:1)
#loc6 = loc("../../../testcasesupport/std_testcase_io.h":14:33)
#loc7 = loc("CWE369_Divide_by_Zero__int_zero_modulo_12.c":51:23)
#loc8 = loc("CWE369_Divide_by_Zero__int_zero_modulo_12.c":22:1)
#loc9 = loc("CWE369_Divide_by_Zero__int_zero_modulo_12.c":54:1)
#loc10 = loc("CWE369_Divide_by_Zero__int_zero_modulo_12.c":24:5)
#loc11 = loc("CWE369_Divide_by_Zero__int_zero_modulo_12.c":24:9)
#loc12 = loc("CWE369_Divide_by_Zero__int_zero_modulo_12.c":26:13)
#loc13 = loc("CWE369_Divide_by_Zero__int_zero_modulo_12.c":26:12)
#loc14 = loc("CWE369_Divide_by_Zero__int_zero_modulo_12.c":26:5)
#loc15 = loc("CWE369_Divide_by_Zero__int_zero_modulo_12.c":27:5)
#loc16 = loc("CWE369_Divide_by_Zero__int_zero_modulo_12.c":36:5)
#loc17 = loc("CWE369_Divide_by_Zero__int_zero_modulo_12.c":27:8)
#loc18 = loc("CWE369_Divide_by_Zero__int_zero_modulo_12.c":27:33)
#loc19 = loc("CWE369_Divide_by_Zero__int_zero_modulo_12.c":28:5)
#loc20 = loc("CWE369_Divide_by_Zero__int_zero_modulo_12.c":31:5)
#loc21 = loc("CWE369_Divide_by_Zero__int_zero_modulo_12.c":33:5)
#loc22 = loc("CWE369_Divide_by_Zero__int_zero_modulo_12.c":30:16)
#loc23 = loc("CWE369_Divide_by_Zero__int_zero_modulo_12.c":30:9)
#loc24 = loc("CWE369_Divide_by_Zero__int_zero_modulo_12.c":35:16)
#loc25 = loc("CWE369_Divide_by_Zero__int_zero_modulo_12.c":35:9)
#loc26 = loc("CWE369_Divide_by_Zero__int_zero_modulo_12.c":37:5)
#loc27 = loc("CWE369_Divide_by_Zero__int_zero_modulo_12.c":53:5)
#loc28 = loc("CWE369_Divide_by_Zero__int_zero_modulo_12.c":37:8)
#loc29 = loc("CWE369_Divide_by_Zero__int_zero_modulo_12.c":37:33)
#loc30 = loc("CWE369_Divide_by_Zero__int_zero_modulo_12.c":38:5)
#loc31 = loc("CWE369_Divide_by_Zero__int_zero_modulo_12.c":41:5)
#loc32 = loc("CWE369_Divide_by_Zero__int_zero_modulo_12.c":43:5)
#loc33 = loc("CWE369_Divide_by_Zero__int_zero_modulo_12.c":40:22)
#loc34 = loc("CWE369_Divide_by_Zero__int_zero_modulo_12.c":40:28)
#loc35 = loc("CWE369_Divide_by_Zero__int_zero_modulo_12.c":40:9)
#loc36 = loc("CWE369_Divide_by_Zero__int_zero_modulo_12.c":45:9)
#loc37 = loc("CWE369_Divide_by_Zero__int_zero_modulo_12.c":52:9)
#loc38 = loc("CWE369_Divide_by_Zero__int_zero_modulo_12.c":45:13)
#loc39 = loc("CWE369_Divide_by_Zero__int_zero_modulo_12.c":45:21)
#loc40 = loc("CWE369_Divide_by_Zero__int_zero_modulo_12.c":46:9)
#loc41 = loc("CWE369_Divide_by_Zero__int_zero_modulo_12.c":48:9)
#loc42 = loc("CWE369_Divide_by_Zero__int_zero_modulo_12.c":50:9)
#loc43 = loc("CWE369_Divide_by_Zero__int_zero_modulo_12.c":47:26)
#loc44 = loc("CWE369_Divide_by_Zero__int_zero_modulo_12.c":47:32)
#loc45 = loc("CWE369_Divide_by_Zero__int_zero_modulo_12.c":47:13)
#loc46 = loc("CWE369_Divide_by_Zero__int_zero_modulo_12.c":51:13)
#loc47 = loc("CWE369_Divide_by_Zero__int_zero_modulo_12.c":134:1)
#loc48 = loc("CWE369_Divide_by_Zero__int_zero_modulo_12.c":138:1)
#loc49 = loc("CWE369_Divide_by_Zero__int_zero_modulo_12.c":136:5)
#loc50 = loc("CWE369_Divide_by_Zero__int_zero_modulo_12.c":136:13)
#loc51 = loc("CWE369_Divide_by_Zero__int_zero_modulo_12.c":137:5)
#loc52 = loc("CWE369_Divide_by_Zero__int_zero_modulo_12.c":137:13)
#loc53 = loc("CWE369_Divide_by_Zero__int_zero_modulo_12.c":63:1)
#loc54 = loc("CWE369_Divide_by_Zero__int_zero_modulo_12.c":102:1)
#loc55 = loc("CWE369_Divide_by_Zero__int_zero_modulo_12.c":65:5)
#loc56 = loc("CWE369_Divide_by_Zero__int_zero_modulo_12.c":65:9)
#loc57 = loc("CWE369_Divide_by_Zero__int_zero_modulo_12.c":67:13)
#loc58 = loc("CWE369_Divide_by_Zero__int_zero_modulo_12.c":67:12)
#loc59 = loc("CWE369_Divide_by_Zero__int_zero_modulo_12.c":67:5)
#loc60 = loc("CWE369_Divide_by_Zero__int_zero_modulo_12.c":68:5)
#loc61 = loc("CWE369_Divide_by_Zero__int_zero_modulo_12.c":77:5)
#loc62 = loc("CWE369_Divide_by_Zero__int_zero_modulo_12.c":68:8)
#loc63 = loc("CWE369_Divide_by_Zero__int_zero_modulo_12.c":68:33)
#loc64 = loc("CWE369_Divide_by_Zero__int_zero_modulo_12.c":69:5)
#loc65 = loc("CWE369_Divide_by_Zero__int_zero_modulo_12.c":72:5)
#loc66 = loc("CWE369_Divide_by_Zero__int_zero_modulo_12.c":74:5)
#loc67 = loc("CWE369_Divide_by_Zero__int_zero_modulo_12.c":71:16)
#loc68 = loc("CWE369_Divide_by_Zero__int_zero_modulo_12.c":71:9)
#loc69 = loc("CWE369_Divide_by_Zero__int_zero_modulo_12.c":76:16)
#loc70 = loc("CWE369_Divide_by_Zero__int_zero_modulo_12.c":76:9)
#loc71 = loc("CWE369_Divide_by_Zero__int_zero_modulo_12.c":78:5)
#loc72 = loc("CWE369_Divide_by_Zero__int_zero_modulo_12.c":101:5)
#loc73 = loc("CWE369_Divide_by_Zero__int_zero_modulo_12.c":78:8)
#loc74 = loc("CWE369_Divide_by_Zero__int_zero_modulo_12.c":78:33)
#loc75 = loc("CWE369_Divide_by_Zero__int_zero_modulo_12.c":79:5)
#loc76 = loc("CWE369_Divide_by_Zero__int_zero_modulo_12.c":89:5)
#loc77 = loc("CWE369_Divide_by_Zero__int_zero_modulo_12.c":91:5)
#loc78 = loc("CWE369_Divide_by_Zero__int_zero_modulo_12.c":81:9)
#loc79 = loc("CWE369_Divide_by_Zero__int_zero_modulo_12.c":88:9)
#loc80 = loc("CWE369_Divide_by_Zero__int_zero_modulo_12.c":81:13)
#loc81 = loc("CWE369_Divide_by_Zero__int_zero_modulo_12.c":81:21)
#loc82 = loc("CWE369_Divide_by_Zero__int_zero_modulo_12.c":82:9)
#loc83 = loc("CWE369_Divide_by_Zero__int_zero_modulo_12.c":84:9)
#loc84 = loc("CWE369_Divide_by_Zero__int_zero_modulo_12.c":86:9)
#loc85 = loc("CWE369_Divide_by_Zero__int_zero_modulo_12.c":83:26)
#loc86 = loc("CWE369_Divide_by_Zero__int_zero_modulo_12.c":83:32)
#loc87 = loc("CWE369_Divide_by_Zero__int_zero_modulo_12.c":83:13)
#loc88 = loc("CWE369_Divide_by_Zero__int_zero_modulo_12.c":87:23)
#loc89 = loc("CWE369_Divide_by_Zero__int_zero_modulo_12.c":87:13)
#loc90 = loc("CWE369_Divide_by_Zero__int_zero_modulo_12.c":93:9)
#loc91 = loc("CWE369_Divide_by_Zero__int_zero_modulo_12.c":100:9)
#loc92 = loc("CWE369_Divide_by_Zero__int_zero_modulo_12.c":93:13)
#loc93 = loc("CWE369_Divide_by_Zero__int_zero_modulo_12.c":93:21)
#loc94 = loc("CWE369_Divide_by_Zero__int_zero_modulo_12.c":94:9)
#loc95 = loc("CWE369_Divide_by_Zero__int_zero_modulo_12.c":96:9)
#loc96 = loc("CWE369_Divide_by_Zero__int_zero_modulo_12.c":98:9)
#loc97 = loc("CWE369_Divide_by_Zero__int_zero_modulo_12.c":95:26)
#loc98 = loc("CWE369_Divide_by_Zero__int_zero_modulo_12.c":95:32)
#loc99 = loc("CWE369_Divide_by_Zero__int_zero_modulo_12.c":95:13)
#loc100 = loc("CWE369_Divide_by_Zero__int_zero_modulo_12.c":99:23)
#loc101 = loc("CWE369_Divide_by_Zero__int_zero_modulo_12.c":99:13)
#loc102 = loc("CWE369_Divide_by_Zero__int_zero_modulo_12.c":107:1)
#loc103 = loc("CWE369_Divide_by_Zero__int_zero_modulo_12.c":132:1)
#loc104 = loc("CWE369_Divide_by_Zero__int_zero_modulo_12.c":109:5)
#loc105 = loc("CWE369_Divide_by_Zero__int_zero_modulo_12.c":109:9)
#loc106 = loc("CWE369_Divide_by_Zero__int_zero_modulo_12.c":111:13)
#loc107 = loc("CWE369_Divide_by_Zero__int_zero_modulo_12.c":111:12)
#loc108 = loc("CWE369_Divide_by_Zero__int_zero_modulo_12.c":111:5)
#loc109 = loc("CWE369_Divide_by_Zero__int_zero_modulo_12.c":112:5)
#loc110 = loc("CWE369_Divide_by_Zero__int_zero_modulo_12.c":121:5)
#loc111 = loc("CWE369_Divide_by_Zero__int_zero_modulo_12.c":112:8)
#loc112 = loc("CWE369_Divide_by_Zero__int_zero_modulo_12.c":112:33)
#loc113 = loc("CWE369_Divide_by_Zero__int_zero_modulo_12.c":113:5)
#loc114 = loc("CWE369_Divide_by_Zero__int_zero_modulo_12.c":116:5)
#loc115 = loc("CWE369_Divide_by_Zero__int_zero_modulo_12.c":118:5)
#loc116 = loc("CWE369_Divide_by_Zero__int_zero_modulo_12.c":115:16)
#loc117 = loc("CWE369_Divide_by_Zero__int_zero_modulo_12.c":115:9)
#loc118 = loc("CWE369_Divide_by_Zero__int_zero_modulo_12.c":120:16)
#loc119 = loc("CWE369_Divide_by_Zero__int_zero_modulo_12.c":120:9)
#loc120 = loc("CWE369_Divide_by_Zero__int_zero_modulo_12.c":122:5)
#loc121 = loc("CWE369_Divide_by_Zero__int_zero_modulo_12.c":131:5)
#loc122 = loc("CWE369_Divide_by_Zero__int_zero_modulo_12.c":122:8)
#loc123 = loc("CWE369_Divide_by_Zero__int_zero_modulo_12.c":122:33)
#loc124 = loc("CWE369_Divide_by_Zero__int_zero_modulo_12.c":123:5)
#loc125 = loc("CWE369_Divide_by_Zero__int_zero_modulo_12.c":126:5)
#loc126 = loc("CWE369_Divide_by_Zero__int_zero_modulo_12.c":128:5)
#loc127 = loc("CWE369_Divide_by_Zero__int_zero_modulo_12.c":125:22)
#loc128 = loc("CWE369_Divide_by_Zero__int_zero_modulo_12.c":125:28)
#loc129 = loc("CWE369_Divide_by_Zero__int_zero_modulo_12.c":125:9)
#loc130 = loc("CWE369_Divide_by_Zero__int_zero_modulo_12.c":130:22)
#loc131 = loc("CWE369_Divide_by_Zero__int_zero_modulo_12.c":130:28)
#loc132 = loc("CWE369_Divide_by_Zero__int_zero_modulo_12.c":130:9)
#loc133 = loc(fused[#loc1, #loc2])
#loc134 = loc(fused[#loc3, #loc4])
#loc135 = loc(fused[#loc5, #loc6])
#loc136 = loc(fused[#loc8, #loc9])
#loc137 = loc(fused[#loc10, #loc11])
#loc138 = loc(fused[#loc14, #loc12])
#loc139 = loc(fused[#loc15, #loc16])
#loc140 = loc(fused[#loc17, #loc18])
#loc141 = loc(fused[#loc19, #loc20, #loc21, #loc16])
#loc142 = loc(fused[#loc23, #loc22])
#loc143 = loc(fused[#loc25, #loc24])
#loc144 = loc(fused[#loc26, #loc27])
#loc145 = loc(fused[#loc28, #loc29])
#loc146 = loc(fused[#loc30, #loc31, #loc32, #loc27])
#loc147 = loc(fused[#loc33, #loc34])
#loc148 = loc(fused[#loc36, #loc37])
#loc149 = loc(fused[#loc38, #loc39])
#loc150 = loc(fused[#loc40, #loc41, #loc42, #loc37])
#loc151 = loc(fused[#loc43, #loc44])
#loc152 = loc(fused[#loc47, #loc48])
#loc153 = loc(fused[#loc49, #loc50])
#loc154 = loc(fused[#loc51, #loc52])
#loc155 = loc(fused[#loc53, #loc54])
#loc156 = loc(fused[#loc55, #loc56])
#loc157 = loc(fused[#loc59, #loc57])
#loc158 = loc(fused[#loc60, #loc61])
#loc159 = loc(fused[#loc62, #loc63])
#loc160 = loc(fused[#loc64, #loc65, #loc66, #loc61])
#loc161 = loc(fused[#loc68, #loc67])
#loc162 = loc(fused[#loc70, #loc69])
#loc163 = loc(fused[#loc71, #loc72])
#loc164 = loc(fused[#loc73, #loc74])
#loc165 = loc(fused[#loc75, #loc76, #loc77, #loc72])
#loc166 = loc(fused[#loc78, #loc79])
#loc167 = loc(fused[#loc80, #loc81])
#loc168 = loc(fused[#loc82, #loc83, #loc84, #loc79])
#loc169 = loc(fused[#loc85, #loc86])
#loc170 = loc(fused[#loc90, #loc91])
#loc171 = loc(fused[#loc92, #loc93])
#loc172 = loc(fused[#loc94, #loc95, #loc96, #loc91])
#loc173 = loc(fused[#loc97, #loc98])
#loc174 = loc(fused[#loc102, #loc103])
#loc175 = loc(fused[#loc104, #loc105])
#loc176 = loc(fused[#loc108, #loc106])
#loc177 = loc(fused[#loc109, #loc110])
#loc178 = loc(fused[#loc111, #loc112])
#loc179 = loc(fused[#loc113, #loc114, #loc115, #loc110])
#loc180 = loc(fused[#loc117, #loc116])
#loc181 = loc(fused[#loc119, #loc118])
#loc182 = loc(fused[#loc120, #loc121])
#loc183 = loc(fused[#loc122, #loc123])
#loc184 = loc(fused[#loc124, #loc125, #loc126, #loc121])
#loc185 = loc(fused[#loc127, #loc128])
#loc186 = loc(fused[#loc130, #loc131])
