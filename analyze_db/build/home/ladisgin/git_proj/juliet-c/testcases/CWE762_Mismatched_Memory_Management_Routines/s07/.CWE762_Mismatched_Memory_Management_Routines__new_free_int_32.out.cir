!s32i = !cir.int<s, 32>
!s64i = !cir.int<s, 64>
!s8i = !cir.int<s, 8>
!u32i = !cir.int<u, 32>
!u64i = !cir.int<u, 64>
!void = !cir.void
#fn_attr = #cir<extra({nothrow = #cir.nothrow})>
#fn_attr1 = #cir<extra({inline = #cir.inline<no>, optnone = #cir.optnone})>
#loc123 = loc("CWE762_Mismatched_Memory_Management_Routines__new_free_int_32.cpp":112:10)
#loc124 = loc("CWE762_Mismatched_Memory_Management_Routines__new_free_int_32.cpp":112:14)
#loc125 = loc("CWE762_Mismatched_Memory_Management_Routines__new_free_int_32.cpp":112:20)
#loc126 = loc("CWE762_Mismatched_Memory_Management_Routines__new_free_int_32.cpp":112:32)
#loc190 = loc(fused[#loc123, #loc124])
#loc191 = loc(fused[#loc125, #loc126])
module @"/home/ladisgin/git_proj/juliet-c/testcases/CWE762_Mismatched_Memory_Management_Routines/s07/CWE762_Mismatched_Memory_Management_Routines__new_free_int_32.cpp" attributes {cir.lang = #cir.lang<cxx>, cir.sob = #cir.signed_overflow_behavior<undefined>, cir.triple = "x86_64-unknown-linux-gnu", dlti.dl_spec = #dlti.dl_spec<i1 = dense<8> : vector<2xi64>, !llvm.ptr = dense<64> : vector<4xi64>, f80 = dense<128> : vector<2xi64>, i32 = dense<32> : vector<2xi64>, i16 = dense<16> : vector<2xi64>, i8 = dense<8> : vector<2xi64>, f128 = dense<128> : vector<2xi64>, !llvm.ptr<271> = dense<32> : vector<4xi64>, f16 = dense<16> : vector<2xi64>, !llvm.ptr<270> = dense<32> : vector<4xi64>, f64 = dense<64> : vector<2xi64>, i128 = dense<128> : vector<2xi64>, !llvm.ptr<272> = dense<64> : vector<4xi64>, i64 = dense<64> : vector<2xi64>, "dlti.stack_alignment" = 128 : i64, "dlti.endianness" = "little">} {
  cir.func private @_Znwm(!u64i) -> !cir.ptr<!void> loc(#loc139)
  cir.func private @free(!cir.ptr<!void>) extra(#fn_attr) loc(#loc140)
  cir.func @_ZN61CWE762_Mismatched_Memory_Management_Routines__new_free_int_323badEv() extra(#fn_attr1) {
    %0 = cir.alloca !cir.ptr<!s32i>, !cir.ptr<!cir.ptr<!s32i>>, ["data"] {alignment = 8 : i64} loc(#loc142)
    %1 = cir.alloca !cir.ptr<!cir.ptr<!s32i>>, !cir.ptr<!cir.ptr<!cir.ptr<!s32i>>>, ["dataPtr1", init] {alignment = 8 : i64} loc(#loc143)
    %2 = cir.alloca !cir.ptr<!cir.ptr<!s32i>>, !cir.ptr<!cir.ptr<!cir.ptr<!s32i>>>, ["dataPtr2", init] {alignment = 8 : i64} loc(#loc144)
    cir.store %0, %1 : !cir.ptr<!cir.ptr<!s32i>>, !cir.ptr<!cir.ptr<!cir.ptr<!s32i>>> loc(#loc143)
    cir.store %0, %2 : !cir.ptr<!cir.ptr<!s32i>>, !cir.ptr<!cir.ptr<!cir.ptr<!s32i>>> loc(#loc144)
    %3 = cir.const #cir.ptr<null> : !cir.ptr<!s32i> loc(#loc13)
    cir.store %3, %0 : !cir.ptr<!s32i>, !cir.ptr<!cir.ptr<!s32i>> loc(#loc145)
    cir.scope {
      %4 = cir.alloca !cir.ptr<!s32i>, !cir.ptr<!cir.ptr<!s32i>>, ["data", init] {alignment = 8 : i64} loc(#loc147)
      %5 = cir.load deref %1 : !cir.ptr<!cir.ptr<!cir.ptr<!s32i>>>, !cir.ptr<!cir.ptr<!s32i>> loc(#loc18)
      %6 = cir.load %5 : !cir.ptr<!cir.ptr<!s32i>>, !cir.ptr<!s32i> loc(#loc19)
      cir.store %6, %4 : !cir.ptr<!s32i>, !cir.ptr<!cir.ptr<!s32i>> loc(#loc147)
      %7 = cir.const #cir.int<4> : !u64i loc(#loc148)
      %8 = cir.call @_Znwm(%7) : (!u64i) -> !cir.ptr<!void> loc(#loc22)
      %9 = cir.cast(bitcast, %8 : !cir.ptr<!void>), !cir.ptr<!s32i> loc(#loc148)
      cir.store %9, %4 : !cir.ptr<!s32i>, !cir.ptr<!cir.ptr<!s32i>> loc(#loc149)
      %10 = cir.load %4 : !cir.ptr<!cir.ptr<!s32i>>, !cir.ptr<!s32i> loc(#loc24)
      %11 = cir.load deref %1 : !cir.ptr<!cir.ptr<!cir.ptr<!s32i>>>, !cir.ptr<!cir.ptr<!s32i>> loc(#loc25)
      cir.store %10, %11 : !cir.ptr<!s32i>, !cir.ptr<!cir.ptr<!s32i>> loc(#loc150)
    } loc(#loc146)
    cir.scope {
      %4 = cir.alloca !cir.ptr<!s32i>, !cir.ptr<!cir.ptr<!s32i>>, ["data", init] {alignment = 8 : i64} loc(#loc152)
      %5 = cir.load deref %2 : !cir.ptr<!cir.ptr<!cir.ptr<!s32i>>>, !cir.ptr<!cir.ptr<!s32i>> loc(#loc30)
      %6 = cir.load %5 : !cir.ptr<!cir.ptr<!s32i>>, !cir.ptr<!s32i> loc(#loc31)
      cir.store %6, %4 : !cir.ptr<!s32i>, !cir.ptr<!cir.ptr<!s32i>> loc(#loc152)
      %7 = cir.get_global @free : !cir.ptr<!cir.func<!void (!cir.ptr<!void>)>> loc(#loc32)
      %8 = cir.load %4 : !cir.ptr<!cir.ptr<!s32i>>, !cir.ptr<!s32i> loc(#loc33)
      %9 = cir.cast(bitcast, %8 : !cir.ptr<!s32i>), !cir.ptr<!void> loc(#loc33)
      cir.call @free(%9) : (!cir.ptr<!void>) -> () extra(#fn_attr) loc(#loc32)
    } loc(#loc151)
    cir.return loc(#loc6)
  } loc(#loc141)
  cir.func private @malloc(!u64i) -> !cir.ptr<!void> extra(#fn_attr) loc(#loc153)
  cir.func private @exit(!s32i) extra(#fn_attr) loc(#loc154)
  cir.func internal private @_ZN61CWE762_Mismatched_Memory_Management_Routines__new_free_int_32L7goodG2BEv() extra(#fn_attr1) {
    %0 = cir.alloca !cir.ptr<!s32i>, !cir.ptr<!cir.ptr<!s32i>>, ["data"] {alignment = 8 : i64} loc(#loc156)
    %1 = cir.alloca !cir.ptr<!cir.ptr<!s32i>>, !cir.ptr<!cir.ptr<!cir.ptr<!s32i>>>, ["dataPtr1", init] {alignment = 8 : i64} loc(#loc157)
    %2 = cir.alloca !cir.ptr<!cir.ptr<!s32i>>, !cir.ptr<!cir.ptr<!cir.ptr<!s32i>>>, ["dataPtr2", init] {alignment = 8 : i64} loc(#loc158)
    cir.store %0, %1 : !cir.ptr<!cir.ptr<!s32i>>, !cir.ptr<!cir.ptr<!cir.ptr<!s32i>>> loc(#loc157)
    cir.store %0, %2 : !cir.ptr<!cir.ptr<!s32i>>, !cir.ptr<!cir.ptr<!cir.ptr<!s32i>>> loc(#loc158)
    %3 = cir.const #cir.ptr<null> : !cir.ptr<!s32i> loc(#loc46)
    cir.store %3, %0 : !cir.ptr<!s32i>, !cir.ptr<!cir.ptr<!s32i>> loc(#loc159)
    cir.scope {
      %4 = cir.alloca !cir.ptr<!s32i>, !cir.ptr<!cir.ptr<!s32i>>, ["data", init] {alignment = 8 : i64} loc(#loc161)
      %5 = cir.load deref %1 : !cir.ptr<!cir.ptr<!cir.ptr<!s32i>>>, !cir.ptr<!cir.ptr<!s32i>> loc(#loc51)
      %6 = cir.load %5 : !cir.ptr<!cir.ptr<!s32i>>, !cir.ptr<!s32i> loc(#loc52)
      cir.store %6, %4 : !cir.ptr<!s32i>, !cir.ptr<!cir.ptr<!s32i>> loc(#loc161)
      %7 = cir.get_global @malloc : !cir.ptr<!cir.func<!cir.ptr<!void> (!u64i)>> loc(#loc53)
      %8 = cir.const #cir.int<100> : !s32i loc(#loc54)
      %9 = cir.cast(integral, %8 : !s32i), !u64i loc(#loc54)
      %10 = cir.const #cir.int<4> : !u64i loc(#loc162)
      %11 = cir.binop(mul, %9, %10) : !u64i loc(#loc163)
      %12 = cir.call @malloc(%11) : (!u64i) -> !cir.ptr<!void> extra(#fn_attr) loc(#loc53)
      %13 = cir.cast(bitcast, %12 : !cir.ptr<!void>), !cir.ptr<!s32i> loc(#loc164)
      cir.store %13, %4 : !cir.ptr<!s32i>, !cir.ptr<!cir.ptr<!s32i>> loc(#loc165)
      cir.scope {
        %16 = cir.load %4 : !cir.ptr<!cir.ptr<!s32i>>, !cir.ptr<!s32i> loc(#loc61)
        %17 = cir.const #cir.ptr<null> : !cir.ptr<!s32i> loc(#loc62)
        %18 = cir.cmp(eq, %16, %17) : !cir.ptr<!s32i>, !cir.bool loc(#loc167)
        cir.if %18 {
          %19 = cir.get_global @exit : !cir.ptr<!cir.func<!void (!s32i)>> loc(#loc64)
          %20 = cir.const #cir.int<1> : !s32i loc(#loc65)
          %21 = cir.unary(minus, %20) : !s32i, !s32i loc(#loc66)
          cir.call @exit(%21) : (!s32i) -> () extra(#fn_attr) loc(#loc64)
        } loc(#loc168)
      } loc(#loc166)
      %14 = cir.load %4 : !cir.ptr<!cir.ptr<!s32i>>, !cir.ptr<!s32i> loc(#loc67)
      %15 = cir.load deref %1 : !cir.ptr<!cir.ptr<!cir.ptr<!s32i>>>, !cir.ptr<!cir.ptr<!s32i>> loc(#loc68)
      cir.store %14, %15 : !cir.ptr<!s32i>, !cir.ptr<!cir.ptr<!s32i>> loc(#loc169)
    } loc(#loc160)
    cir.scope {
      %4 = cir.alloca !cir.ptr<!s32i>, !cir.ptr<!cir.ptr<!s32i>>, ["data", init] {alignment = 8 : i64} loc(#loc171)
      %5 = cir.load deref %2 : !cir.ptr<!cir.ptr<!cir.ptr<!s32i>>>, !cir.ptr<!cir.ptr<!s32i>> loc(#loc73)
      %6 = cir.load %5 : !cir.ptr<!cir.ptr<!s32i>>, !cir.ptr<!s32i> loc(#loc74)
      cir.store %6, %4 : !cir.ptr<!s32i>, !cir.ptr<!cir.ptr<!s32i>> loc(#loc171)
      %7 = cir.get_global @free : !cir.ptr<!cir.func<!void (!cir.ptr<!void>)>> loc(#loc75)
      %8 = cir.load %4 : !cir.ptr<!cir.ptr<!s32i>>, !cir.ptr<!s32i> loc(#loc76)
      %9 = cir.cast(bitcast, %8 : !cir.ptr<!s32i>), !cir.ptr<!void> loc(#loc76)
      cir.call @free(%9) : (!cir.ptr<!void>) -> () extra(#fn_attr) loc(#loc75)
    } loc(#loc170)
    cir.return loc(#loc39)
  } loc(#loc155)
  cir.func private @_ZdlPv(!cir.ptr<!void>) extra(#fn_attr) loc(#loc172)
  cir.func internal private @_ZN61CWE762_Mismatched_Memory_Management_Routines__new_free_int_32L7goodB2GEv() extra(#fn_attr1) {
    %0 = cir.alloca !cir.ptr<!s32i>, !cir.ptr<!cir.ptr<!s32i>>, ["data"] {alignment = 8 : i64} loc(#loc174)
    %1 = cir.alloca !cir.ptr<!cir.ptr<!s32i>>, !cir.ptr<!cir.ptr<!cir.ptr<!s32i>>>, ["dataPtr1", init] {alignment = 8 : i64} loc(#loc175)
    %2 = cir.alloca !cir.ptr<!cir.ptr<!s32i>>, !cir.ptr<!cir.ptr<!cir.ptr<!s32i>>>, ["dataPtr2", init] {alignment = 8 : i64} loc(#loc176)
    cir.store %0, %1 : !cir.ptr<!cir.ptr<!s32i>>, !cir.ptr<!cir.ptr<!cir.ptr<!s32i>>> loc(#loc175)
    cir.store %0, %2 : !cir.ptr<!cir.ptr<!s32i>>, !cir.ptr<!cir.ptr<!cir.ptr<!s32i>>> loc(#loc176)
    %3 = cir.const #cir.ptr<null> : !cir.ptr<!s32i> loc(#loc87)
    cir.store %3, %0 : !cir.ptr<!s32i>, !cir.ptr<!cir.ptr<!s32i>> loc(#loc177)
    cir.scope {
      %4 = cir.alloca !cir.ptr<!s32i>, !cir.ptr<!cir.ptr<!s32i>>, ["data", init] {alignment = 8 : i64} loc(#loc179)
      %5 = cir.load deref %1 : !cir.ptr<!cir.ptr<!cir.ptr<!s32i>>>, !cir.ptr<!cir.ptr<!s32i>> loc(#loc92)
      %6 = cir.load %5 : !cir.ptr<!cir.ptr<!s32i>>, !cir.ptr<!s32i> loc(#loc93)
      cir.store %6, %4 : !cir.ptr<!s32i>, !cir.ptr<!cir.ptr<!s32i>> loc(#loc179)
      %7 = cir.const #cir.int<4> : !u64i loc(#loc180)
      %8 = cir.call @_Znwm(%7) : (!u64i) -> !cir.ptr<!void> loc(#loc96)
      %9 = cir.cast(bitcast, %8 : !cir.ptr<!void>), !cir.ptr<!s32i> loc(#loc180)
      cir.store %9, %4 : !cir.ptr<!s32i>, !cir.ptr<!cir.ptr<!s32i>> loc(#loc181)
      %10 = cir.load %4 : !cir.ptr<!cir.ptr<!s32i>>, !cir.ptr<!s32i> loc(#loc98)
      %11 = cir.load deref %1 : !cir.ptr<!cir.ptr<!cir.ptr<!s32i>>>, !cir.ptr<!cir.ptr<!s32i>> loc(#loc99)
      cir.store %10, %11 : !cir.ptr<!s32i>, !cir.ptr<!cir.ptr<!s32i>> loc(#loc182)
    } loc(#loc178)
    cir.scope {
      %4 = cir.alloca !cir.ptr<!s32i>, !cir.ptr<!cir.ptr<!s32i>>, ["data", init] {alignment = 8 : i64} loc(#loc184)
      %5 = cir.load deref %2 : !cir.ptr<!cir.ptr<!cir.ptr<!s32i>>>, !cir.ptr<!cir.ptr<!s32i>> loc(#loc104)
      %6 = cir.load %5 : !cir.ptr<!cir.ptr<!s32i>>, !cir.ptr<!s32i> loc(#loc105)
      cir.store %6, %4 : !cir.ptr<!s32i>, !cir.ptr<!cir.ptr<!s32i>> loc(#loc184)
      %7 = cir.load %4 : !cir.ptr<!cir.ptr<!s32i>>, !cir.ptr<!s32i> loc(#loc106)
      %8 = cir.cast(bitcast, %7 : !cir.ptr<!s32i>), !cir.ptr<!void> loc(#loc106)
      cir.call @_ZdlPv(%8) : (!cir.ptr<!void>) -> () extra(#fn_attr) loc(#loc96)
    } loc(#loc183)
    cir.return loc(#loc80)
  } loc(#loc173)
  cir.func @_ZN61CWE762_Mismatched_Memory_Management_Routines__new_free_int_324goodEv() extra(#fn_attr1) {
    cir.call @_ZN61CWE762_Mismatched_Memory_Management_Routines__new_free_int_32L7goodG2BEv() : () -> () loc(#loc109)
    cir.call @_ZN61CWE762_Mismatched_Memory_Management_Routines__new_free_int_32L7goodB2GEv() : () -> () loc(#loc110)
    cir.return loc(#loc108)
  } loc(#loc185)
  cir.func private @srand(!u32i) extra(#fn_attr) loc(#loc186)
  cir.func private @time(!cir.ptr<!s64i>) -> !s64i extra(#fn_attr) loc(#loc187)
  cir.func private @printLine(!cir.ptr<!s8i>) loc(#loc188)
  cir.global "private" constant cir_private dsolocal @".str" = #cir.const_array<"Calling good()...\00" : !cir.array<!s8i x 18>> : !cir.array<!s8i x 18> {alignment = 1 : i64} loc(#loc117)
  cir.global "private" constant cir_private dsolocal @".str.1" = #cir.const_array<"Finished good()\00" : !cir.array<!s8i x 16>> : !cir.array<!s8i x 16> {alignment = 1 : i64} loc(#loc118)
  cir.global "private" constant cir_private dsolocal @".str.2" = #cir.const_array<"Calling bad()...\00" : !cir.array<!s8i x 17>> : !cir.array<!s8i x 17> {alignment = 1 : i64} loc(#loc119)
  cir.global "private" constant cir_private dsolocal @".str.3" = #cir.const_array<"Finished bad()\00" : !cir.array<!s8i x 15>> : !cir.array<!s8i x 15> {alignment = 1 : i64} loc(#loc120)
  cir.func @main(%arg0: !s32i loc(fused[#loc123, #loc124]), %arg1: !cir.ptr<!cir.ptr<!s8i>> loc(fused[#loc125, #loc126])) -> !s32i extra(#fn_attr1) {
    %0 = cir.alloca !s32i, !cir.ptr<!s32i>, ["argc", init] {alignment = 4 : i64} loc(#loc190)
    %1 = cir.alloca !cir.ptr<!cir.ptr<!s8i>>, !cir.ptr<!cir.ptr<!cir.ptr<!s8i>>>, ["argv", init] {alignment = 8 : i64} loc(#loc191)
    %2 = cir.alloca !s32i, !cir.ptr<!s32i>, ["__retval"] {alignment = 4 : i64} loc(#loc122)
    cir.store %arg0, %0 : !s32i, !cir.ptr<!s32i> loc(#loc127)
    cir.store %arg1, %1 : !cir.ptr<!cir.ptr<!s8i>>, !cir.ptr<!cir.ptr<!cir.ptr<!s8i>>> loc(#loc127)
    %3 = cir.const #cir.ptr<null> : !cir.ptr<!s64i> loc(#loc128)
    %4 = cir.call @time(%3) : (!cir.ptr<!s64i>) -> !s64i extra(#fn_attr) loc(#loc129)
    %5 = cir.cast(integral, %4 : !s64i), !u32i loc(#loc129)
    cir.call @srand(%5) : (!u32i) -> () extra(#fn_attr) loc(#loc130)
    %6 = cir.get_global @".str" : !cir.ptr<!cir.array<!s8i x 18>> loc(#loc117)
    %7 = cir.cast(array_to_ptrdecay, %6 : !cir.ptr<!cir.array<!s8i x 18>>), !cir.ptr<!s8i> loc(#loc117)
    cir.call @printLine(%7) : (!cir.ptr<!s8i>) -> () loc(#loc131)
    cir.call @_ZN61CWE762_Mismatched_Memory_Management_Routines__new_free_int_324goodEv() : () -> () loc(#loc132)
    %8 = cir.get_global @".str.1" : !cir.ptr<!cir.array<!s8i x 16>> loc(#loc118)
    %9 = cir.cast(array_to_ptrdecay, %8 : !cir.ptr<!cir.array<!s8i x 16>>), !cir.ptr<!s8i> loc(#loc118)
    cir.call @printLine(%9) : (!cir.ptr<!s8i>) -> () loc(#loc133)
    %10 = cir.get_global @".str.2" : !cir.ptr<!cir.array<!s8i x 17>> loc(#loc119)
    %11 = cir.cast(array_to_ptrdecay, %10 : !cir.ptr<!cir.array<!s8i x 17>>), !cir.ptr<!s8i> loc(#loc119)
    cir.call @printLine(%11) : (!cir.ptr<!s8i>) -> () loc(#loc134)
    cir.call @_ZN61CWE762_Mismatched_Memory_Management_Routines__new_free_int_323badEv() : () -> () loc(#loc135)
    %12 = cir.get_global @".str.3" : !cir.ptr<!cir.array<!s8i x 15>> loc(#loc120)
    %13 = cir.cast(array_to_ptrdecay, %12 : !cir.ptr<!cir.array<!s8i x 15>>), !cir.ptr<!s8i> loc(#loc120)
    cir.call @printLine(%13) : (!cir.ptr<!s8i>) -> () loc(#loc136)
    %14 = cir.const #cir.int<0> : !s32i loc(#loc137)
    cir.store %14, %2 : !s32i, !cir.ptr<!s32i> loc(#loc192)
    %15 = cir.load %2 : !cir.ptr<!s32i>, !s32i loc(#loc192)
    cir.return %15 : !s32i loc(#loc192)
  } loc(#loc189)
} loc(#loc)
#loc = loc("/home/ladisgin/git_proj/juliet-c/testcases/CWE762_Mismatched_Memory_Management_Routines/s07/CWE762_Mismatched_Memory_Management_Routines__new_free_int_32.cpp":0:0)
#loc1 = loc("/usr/lib/gcc/x86_64-redhat-linux/14/../../../../include/c++/14/new":131:20)
#loc2 = loc("/usr/lib/gcc/x86_64-redhat-linux/14/../../../../include/c++/14/new":132:41)
#loc3 = loc("/usr/include/stdlib.h":687:1)
#loc4 = loc("/usr/include/stdlib.h":687:32)
#loc5 = loc("CWE762_Mismatched_Memory_Management_Routines__new_free_int_32.cpp":25:1)
#loc6 = loc("CWE762_Mismatched_Memory_Management_Routines__new_free_int_32.cpp":44:1)
#loc7 = loc("CWE762_Mismatched_Memory_Management_Routines__new_free_int_32.cpp":27:5)
#loc8 = loc("CWE762_Mismatched_Memory_Management_Routines__new_free_int_32.cpp":27:11)
#loc9 = loc("CWE762_Mismatched_Memory_Management_Routines__new_free_int_32.cpp":28:5)
#loc10 = loc("CWE762_Mismatched_Memory_Management_Routines__new_free_int_32.cpp":28:24)
#loc11 = loc("CWE762_Mismatched_Memory_Management_Routines__new_free_int_32.cpp":29:5)
#loc12 = loc("CWE762_Mismatched_Memory_Management_Routines__new_free_int_32.cpp":29:24)
#loc13 = loc("CWE762_Mismatched_Memory_Management_Routines__new_free_int_32.cpp":31:12)
#loc14 = loc("CWE762_Mismatched_Memory_Management_Routines__new_free_int_32.cpp":31:5)
#loc15 = loc("CWE762_Mismatched_Memory_Management_Routines__new_free_int_32.cpp":32:5)
#loc16 = loc("CWE762_Mismatched_Memory_Management_Routines__new_free_int_32.cpp":37:5)
#loc17 = loc("CWE762_Mismatched_Memory_Management_Routines__new_free_int_32.cpp":33:9)
#loc18 = loc("CWE762_Mismatched_Memory_Management_Routines__new_free_int_32.cpp":33:23)
#loc19 = loc("CWE762_Mismatched_Memory_Management_Routines__new_free_int_32.cpp":33:22)
#loc20 = loc("CWE762_Mismatched_Memory_Management_Routines__new_free_int_32.cpp":35:16)
#loc21 = loc("CWE762_Mismatched_Memory_Management_Routines__new_free_int_32.cpp":35:20)
#loc22 = loc("CWE762_Mismatched_Memory_Management_Routines__new_free_int_32.cpp":25:6)
#loc23 = loc("CWE762_Mismatched_Memory_Management_Routines__new_free_int_32.cpp":35:9)
#loc24 = loc("CWE762_Mismatched_Memory_Management_Routines__new_free_int_32.cpp":36:21)
#loc25 = loc("CWE762_Mismatched_Memory_Management_Routines__new_free_int_32.cpp":36:10)
#loc26 = loc("CWE762_Mismatched_Memory_Management_Routines__new_free_int_32.cpp":36:9)
#loc27 = loc("CWE762_Mismatched_Memory_Management_Routines__new_free_int_32.cpp":38:5)
#loc28 = loc("CWE762_Mismatched_Memory_Management_Routines__new_free_int_32.cpp":43:5)
#loc29 = loc("CWE762_Mismatched_Memory_Management_Routines__new_free_int_32.cpp":39:9)
#loc30 = loc("CWE762_Mismatched_Memory_Management_Routines__new_free_int_32.cpp":39:23)
#loc31 = loc("CWE762_Mismatched_Memory_Management_Routines__new_free_int_32.cpp":39:22)
#loc32 = loc("CWE762_Mismatched_Memory_Management_Routines__new_free_int_32.cpp":42:9)
#loc33 = loc("CWE762_Mismatched_Memory_Management_Routines__new_free_int_32.cpp":42:14)
#loc34 = loc("/usr/include/stdlib.h":672:1)
#loc35 = loc("/usr/include/stdlib.h":672:45)
#loc36 = loc("/usr/include/stdlib.h":756:1)
#loc37 = loc("/usr/include/stdlib.h":756:70)
#loc38 = loc("CWE762_Mismatched_Memory_Management_Routines__new_free_int_32.cpp":51:1)
#loc39 = loc("CWE762_Mismatched_Memory_Management_Routines__new_free_int_32.cpp":71:1)
#loc40 = loc("CWE762_Mismatched_Memory_Management_Routines__new_free_int_32.cpp":53:5)
#loc41 = loc("CWE762_Mismatched_Memory_Management_Routines__new_free_int_32.cpp":53:11)
#loc42 = loc("CWE762_Mismatched_Memory_Management_Routines__new_free_int_32.cpp":54:5)
#loc43 = loc("CWE762_Mismatched_Memory_Management_Routines__new_free_int_32.cpp":54:24)
#loc44 = loc("CWE762_Mismatched_Memory_Management_Routines__new_free_int_32.cpp":55:5)
#loc45 = loc("CWE762_Mismatched_Memory_Management_Routines__new_free_int_32.cpp":55:24)
#loc46 = loc("CWE762_Mismatched_Memory_Management_Routines__new_free_int_32.cpp":57:12)
#loc47 = loc("CWE762_Mismatched_Memory_Management_Routines__new_free_int_32.cpp":57:5)
#loc48 = loc("CWE762_Mismatched_Memory_Management_Routines__new_free_int_32.cpp":58:5)
#loc49 = loc("CWE762_Mismatched_Memory_Management_Routines__new_free_int_32.cpp":64:5)
#loc50 = loc("CWE762_Mismatched_Memory_Management_Routines__new_free_int_32.cpp":59:9)
#loc51 = loc("CWE762_Mismatched_Memory_Management_Routines__new_free_int_32.cpp":59:23)
#loc52 = loc("CWE762_Mismatched_Memory_Management_Routines__new_free_int_32.cpp":59:22)
#loc53 = loc("CWE762_Mismatched_Memory_Management_Routines__new_free_int_32.cpp":61:23)
#loc54 = loc("CWE762_Mismatched_Memory_Management_Routines__new_free_int_32.cpp":61:30)
#loc55 = loc("CWE762_Mismatched_Memory_Management_Routines__new_free_int_32.cpp":61:34)
#loc56 = loc("CWE762_Mismatched_Memory_Management_Routines__new_free_int_32.cpp":61:44)
#loc57 = loc("CWE762_Mismatched_Memory_Management_Routines__new_free_int_32.cpp":61:45)
#loc58 = loc("CWE762_Mismatched_Memory_Management_Routines__new_free_int_32.cpp":61:9)
#loc59 = loc("CWE762_Mismatched_Memory_Management_Routines__new_free_int_32.cpp":62:9)
#loc60 = loc("CWE762_Mismatched_Memory_Management_Routines__new_free_int_32.cpp":62:37)
#loc61 = loc("CWE762_Mismatched_Memory_Management_Routines__new_free_int_32.cpp":62:13)
#loc62 = loc("CWE762_Mismatched_Memory_Management_Routines__new_free_int_32.cpp":62:21)
#loc63 = loc("CWE762_Mismatched_Memory_Management_Routines__new_free_int_32.cpp":62:27)
#loc64 = loc("CWE762_Mismatched_Memory_Management_Routines__new_free_int_32.cpp":62:28)
#loc65 = loc("CWE762_Mismatched_Memory_Management_Routines__new_free_int_32.cpp":62:34)
#loc66 = loc("CWE762_Mismatched_Memory_Management_Routines__new_free_int_32.cpp":62:33)
#loc67 = loc("CWE762_Mismatched_Memory_Management_Routines__new_free_int_32.cpp":63:21)
#loc68 = loc("CWE762_Mismatched_Memory_Management_Routines__new_free_int_32.cpp":63:10)
#loc69 = loc("CWE762_Mismatched_Memory_Management_Routines__new_free_int_32.cpp":63:9)
#loc70 = loc("CWE762_Mismatched_Memory_Management_Routines__new_free_int_32.cpp":65:5)
#loc71 = loc("CWE762_Mismatched_Memory_Management_Routines__new_free_int_32.cpp":70:5)
#loc72 = loc("CWE762_Mismatched_Memory_Management_Routines__new_free_int_32.cpp":66:9)
#loc73 = loc("CWE762_Mismatched_Memory_Management_Routines__new_free_int_32.cpp":66:23)
#loc74 = loc("CWE762_Mismatched_Memory_Management_Routines__new_free_int_32.cpp":66:22)
#loc75 = loc("CWE762_Mismatched_Memory_Management_Routines__new_free_int_32.cpp":69:9)
#loc76 = loc("CWE762_Mismatched_Memory_Management_Routines__new_free_int_32.cpp":69:14)
#loc77 = loc("/usr/lib/gcc/x86_64-redhat-linux/14/../../../../include/c++/14/new":135:1)
#loc78 = loc("/usr/lib/gcc/x86_64-redhat-linux/14/../../../../include/c++/14/new":136:41)
#loc79 = loc("CWE762_Mismatched_Memory_Management_Routines__new_free_int_32.cpp":74:1)
#loc80 = loc("CWE762_Mismatched_Memory_Management_Routines__new_free_int_32.cpp":92:1)
#loc81 = loc("CWE762_Mismatched_Memory_Management_Routines__new_free_int_32.cpp":76:5)
#loc82 = loc("CWE762_Mismatched_Memory_Management_Routines__new_free_int_32.cpp":76:11)
#loc83 = loc("CWE762_Mismatched_Memory_Management_Routines__new_free_int_32.cpp":77:5)
#loc84 = loc("CWE762_Mismatched_Memory_Management_Routines__new_free_int_32.cpp":77:24)
#loc85 = loc("CWE762_Mismatched_Memory_Management_Routines__new_free_int_32.cpp":78:5)
#loc86 = loc("CWE762_Mismatched_Memory_Management_Routines__new_free_int_32.cpp":78:24)
#loc87 = loc("CWE762_Mismatched_Memory_Management_Routines__new_free_int_32.cpp":80:12)
#loc88 = loc("CWE762_Mismatched_Memory_Management_Routines__new_free_int_32.cpp":80:5)
#loc89 = loc("CWE762_Mismatched_Memory_Management_Routines__new_free_int_32.cpp":81:5)
#loc90 = loc("CWE762_Mismatched_Memory_Management_Routines__new_free_int_32.cpp":86:5)
#loc91 = loc("CWE762_Mismatched_Memory_Management_Routines__new_free_int_32.cpp":82:9)
#loc92 = loc("CWE762_Mismatched_Memory_Management_Routines__new_free_int_32.cpp":82:23)
#loc93 = loc("CWE762_Mismatched_Memory_Management_Routines__new_free_int_32.cpp":82:22)
#loc94 = loc("CWE762_Mismatched_Memory_Management_Routines__new_free_int_32.cpp":84:16)
#loc95 = loc("CWE762_Mismatched_Memory_Management_Routines__new_free_int_32.cpp":84:20)
#loc96 = loc("CWE762_Mismatched_Memory_Management_Routines__new_free_int_32.cpp":74:13)
#loc97 = loc("CWE762_Mismatched_Memory_Management_Routines__new_free_int_32.cpp":84:9)
#loc98 = loc("CWE762_Mismatched_Memory_Management_Routines__new_free_int_32.cpp":85:21)
#loc99 = loc("CWE762_Mismatched_Memory_Management_Routines__new_free_int_32.cpp":85:10)
#loc100 = loc("CWE762_Mismatched_Memory_Management_Routines__new_free_int_32.cpp":85:9)
#loc101 = loc("CWE762_Mismatched_Memory_Management_Routines__new_free_int_32.cpp":87:5)
#loc102 = loc("CWE762_Mismatched_Memory_Management_Routines__new_free_int_32.cpp":91:5)
#loc103 = loc("CWE762_Mismatched_Memory_Management_Routines__new_free_int_32.cpp":88:9)
#loc104 = loc("CWE762_Mismatched_Memory_Management_Routines__new_free_int_32.cpp":88:23)
#loc105 = loc("CWE762_Mismatched_Memory_Management_Routines__new_free_int_32.cpp":88:22)
#loc106 = loc("CWE762_Mismatched_Memory_Management_Routines__new_free_int_32.cpp":90:16)
#loc107 = loc("CWE762_Mismatched_Memory_Management_Routines__new_free_int_32.cpp":94:1)
#loc108 = loc("CWE762_Mismatched_Memory_Management_Routines__new_free_int_32.cpp":98:1)
#loc109 = loc("CWE762_Mismatched_Memory_Management_Routines__new_free_int_32.cpp":96:5)
#loc110 = loc("CWE762_Mismatched_Memory_Management_Routines__new_free_int_32.cpp":97:5)
#loc111 = loc("/usr/include/stdlib.h":575:1)
#loc112 = loc("/usr/include/stdlib.h":575:41)
#loc113 = loc("/usr/include/time.h":76:1)
#loc114 = loc("/usr/include/time.h":76:38)
#loc115 = loc("../../../testcasesupport/std_testcase_io.h":14:1)
#loc116 = loc("../../../testcasesupport/std_testcase_io.h":14:33)
#loc117 = loc("CWE762_Mismatched_Memory_Management_Routines__new_free_int_32.cpp":117:15)
#loc118 = loc("CWE762_Mismatched_Memory_Management_Routines__new_free_int_32.cpp":119:15)
#loc119 = loc("CWE762_Mismatched_Memory_Management_Routines__new_free_int_32.cpp":122:15)
#loc120 = loc("CWE762_Mismatched_Memory_Management_Routines__new_free_int_32.cpp":124:15)
#loc121 = loc("CWE762_Mismatched_Memory_Management_Routines__new_free_int_32.cpp":112:1)
#loc122 = loc("CWE762_Mismatched_Memory_Management_Routines__new_free_int_32.cpp":127:1)
#loc127 = loc("CWE762_Mismatched_Memory_Management_Routines__new_free_int_32.cpp":113:1)
#loc128 = loc("CWE762_Mismatched_Memory_Management_Routines__new_free_int_32.cpp":115:27)
#loc129 = loc("CWE762_Mismatched_Memory_Management_Routines__new_free_int_32.cpp":115:22)
#loc130 = loc("CWE762_Mismatched_Memory_Management_Routines__new_free_int_32.cpp":115:5)
#loc131 = loc("CWE762_Mismatched_Memory_Management_Routines__new_free_int_32.cpp":117:5)
#loc132 = loc("CWE762_Mismatched_Memory_Management_Routines__new_free_int_32.cpp":118:5)
#loc133 = loc("CWE762_Mismatched_Memory_Management_Routines__new_free_int_32.cpp":119:5)
#loc134 = loc("CWE762_Mismatched_Memory_Management_Routines__new_free_int_32.cpp":122:5)
#loc135 = loc("CWE762_Mismatched_Memory_Management_Routines__new_free_int_32.cpp":123:5)
#loc136 = loc("CWE762_Mismatched_Memory_Management_Routines__new_free_int_32.cpp":124:5)
#loc137 = loc("CWE762_Mismatched_Memory_Management_Routines__new_free_int_32.cpp":126:12)
#loc138 = loc("CWE762_Mismatched_Memory_Management_Routines__new_free_int_32.cpp":126:5)
#loc139 = loc(fused[#loc1, #loc2])
#loc140 = loc(fused[#loc3, #loc4])
#loc141 = loc(fused[#loc5, #loc6])
#loc142 = loc(fused[#loc7, #loc8])
#loc143 = loc(fused[#loc9, #loc10])
#loc144 = loc(fused[#loc11, #loc12])
#loc145 = loc(fused[#loc14, #loc13])
#loc146 = loc(fused[#loc15, #loc16])
#loc147 = loc(fused[#loc17, #loc18])
#loc148 = loc(fused[#loc20, #loc21])
#loc149 = loc(fused[#loc23, #loc21])
#loc150 = loc(fused[#loc26, #loc24])
#loc151 = loc(fused[#loc27, #loc28])
#loc152 = loc(fused[#loc29, #loc30])
#loc153 = loc(fused[#loc34, #loc35])
#loc154 = loc(fused[#loc36, #loc37])
#loc155 = loc(fused[#loc38, #loc39])
#loc156 = loc(fused[#loc40, #loc41])
#loc157 = loc(fused[#loc42, #loc43])
#loc158 = loc(fused[#loc44, #loc45])
#loc159 = loc(fused[#loc47, #loc46])
#loc160 = loc(fused[#loc48, #loc49])
#loc161 = loc(fused[#loc50, #loc51])
#loc162 = loc(fused[#loc55, #loc56])
#loc163 = loc(fused[#loc54, #loc56])
#loc164 = loc(fused[#loc53, #loc57])
#loc165 = loc(fused[#loc58, #loc57])
#loc166 = loc(fused[#loc59, #loc60])
#loc167 = loc(fused[#loc61, #loc62])
#loc168 = loc(fused[#loc63, #loc60])
#loc169 = loc(fused[#loc69, #loc67])
#loc170 = loc(fused[#loc70, #loc71])
#loc171 = loc(fused[#loc72, #loc73])
#loc172 = loc(fused[#loc77, #loc78])
#loc173 = loc(fused[#loc79, #loc80])
#loc174 = loc(fused[#loc81, #loc82])
#loc175 = loc(fused[#loc83, #loc84])
#loc176 = loc(fused[#loc85, #loc86])
#loc177 = loc(fused[#loc88, #loc87])
#loc178 = loc(fused[#loc89, #loc90])
#loc179 = loc(fused[#loc91, #loc92])
#loc180 = loc(fused[#loc94, #loc95])
#loc181 = loc(fused[#loc97, #loc95])
#loc182 = loc(fused[#loc100, #loc98])
#loc183 = loc(fused[#loc101, #loc102])
#loc184 = loc(fused[#loc103, #loc104])
#loc185 = loc(fused[#loc107, #loc108])
#loc186 = loc(fused[#loc111, #loc112])
#loc187 = loc(fused[#loc113, #loc114])
#loc188 = loc(fused[#loc115, #loc116])
#loc189 = loc(fused[#loc121, #loc122])
#loc192 = loc(fused[#loc138, #loc137])
