!s32i = !cir.int<s, 32>
!s64i = !cir.int<s, 64>
!s8i = !cir.int<s, 8>
!ty__IO_codecvt = !cir.struct<struct "_IO_codecvt" incomplete>
!ty__IO_marker = !cir.struct<struct "_IO_marker" incomplete>
!ty__IO_wide_data = !cir.struct<struct "_IO_wide_data" incomplete>
!u16i = !cir.int<u, 16>
!u32i = !cir.int<u, 32>
!u64i = !cir.int<u, 64>
!void = !cir.void
#false = #cir.bool<false> : !cir.bool
#fn_attr = #cir<extra({nothrow = #cir.nothrow})>
#fn_attr1 = #cir<extra({inline = #cir.inline<no>, nothrow = #cir.nothrow, optnone = #cir.optnone})>
#loc82 = loc("CWE190_Integer_Overflow__int_fgets_square_15.c":254:10)
#loc83 = loc("CWE190_Integer_Overflow__int_fgets_square_15.c":254:14)
#loc84 = loc("CWE190_Integer_Overflow__int_fgets_square_15.c":254:20)
#loc85 = loc("CWE190_Integer_Overflow__int_fgets_square_15.c":254:32)
#true = #cir.bool<true> : !cir.bool
#loc321 = loc(fused[#loc82, #loc83])
#loc322 = loc(fused[#loc84, #loc85])
!ty__IO_FILE = !cir.struct<struct "_IO_FILE" {!s32i, !cir.ptr<!s8i>, !cir.ptr<!s8i>, !cir.ptr<!s8i>, !cir.ptr<!s8i>, !cir.ptr<!s8i>, !cir.ptr<!s8i>, !cir.ptr<!s8i>, !cir.ptr<!s8i>, !cir.ptr<!s8i>, !cir.ptr<!s8i>, !cir.ptr<!s8i>, !cir.ptr<!ty__IO_marker>, !cir.ptr<!cir.struct<struct "_IO_FILE">>, !s32i, !s32i, !s64i, !u16i, !s8i, !cir.array<!s8i x 1>, !cir.ptr<!void>, !s64i, !cir.ptr<!ty__IO_codecvt>, !cir.ptr<!ty__IO_wide_data>, !cir.ptr<!cir.struct<struct "_IO_FILE">>, !cir.ptr<!void>, !cir.ptr<!cir.ptr<!cir.struct<struct "_IO_FILE">>>, !s32i, !cir.array<!s8i x 20>} #cir.record.decl.ast>
module @"/home/ladisgin/git_proj/juliet-c/testcases/CWE190_Integer_Overflow/s03/CWE190_Integer_Overflow__int_fgets_square_15.c" attributes {cir.lang = #cir.lang<c>, cir.sob = #cir.signed_overflow_behavior<undefined>, cir.triple = "x86_64-unknown-linux-gnu", dlti.dl_spec = #dlti.dl_spec<i32 = dense<32> : vector<2xi64>, f16 = dense<16> : vector<2xi64>, f64 = dense<64> : vector<2xi64>, f128 = dense<128> : vector<2xi64>, !llvm.ptr<270> = dense<32> : vector<4xi64>, !llvm.ptr = dense<64> : vector<4xi64>, i1 = dense<8> : vector<2xi64>, i8 = dense<8> : vector<2xi64>, i16 = dense<16> : vector<2xi64>, i64 = dense<64> : vector<2xi64>, !llvm.ptr<272> = dense<64> : vector<4xi64>, !llvm.ptr<271> = dense<32> : vector<4xi64>, f80 = dense<128> : vector<2xi64>, i128 = dense<128> : vector<2xi64>, "dlti.endianness" = "little", "dlti.stack_alignment" = 128 : i64>} {
  cir.func private @fgets(!cir.ptr<!s8i>, !s32i, !cir.ptr<!ty__IO_FILE>) -> !cir.ptr<!s8i> loc(#loc295)
  cir.global "private" external @stdin : !cir.ptr<!ty__IO_FILE> {alignment = 8 : i64} loc(#loc296)
  cir.func private @atoi(!cir.ptr<!s8i>) -> !s32i extra(#fn_attr) loc(#loc297)
  cir.func private @printLine(!cir.ptr<!s8i>) loc(#loc298)
  cir.global "private" constant cir_private dsolocal @".str" = #cir.const_array<"fgets() failed.\00" : !cir.array<!s8i x 16>> : !cir.array<!s8i x 16> {alignment = 1 : i64} loc(#loc9)
  cir.global "private" constant cir_private dsolocal @".str.1" = #cir.const_array<"Benign, fixed string\00" : !cir.array<!s8i x 21>> : !cir.array<!s8i x 21> {alignment = 1 : i64} loc(#loc10)
  cir.func private @printIntLine(!s32i) loc(#loc299)
  cir.func no_proto @CWE190_Integer_Overflow__int_fgets_square_15_bad() extra(#fn_attr1) {
    %0 = cir.alloca !s32i, !cir.ptr<!s32i>, ["data"] {alignment = 4 : i64} loc(#loc301)
    %1 = cir.const #cir.int<0> : !s32i loc(#loc17)
    cir.store %1, %0 : !s32i, !cir.ptr<!s32i> loc(#loc302)
    cir.scope {
      %2 = cir.const #cir.int<6> : !s32i loc(#loc21)
      cir.switch (%2 : !s32i) {
        cir.case(equal, [#cir.int<6> : !s32i]) {
          cir.scope {
            %3 = cir.alloca !cir.array<!s8i x 14>, !cir.ptr<!cir.array<!s8i x 14>>, ["inputBuffer"] {alignment = 1 : i64} loc(#loc305)
            %4 = cir.const #cir.zero : !cir.array<!s8i x 14> loc(#loc305)
            cir.store %4, %3 : !cir.array<!s8i x 14>, !cir.ptr<!cir.array<!s8i x 14>> loc(#loc305)
            cir.scope {
              %5 = cir.cast(array_to_ptrdecay, %3 : !cir.ptr<!cir.array<!s8i x 14>>), !cir.ptr<!s8i> loc(#loc29)
              %6 = cir.const #cir.int<3> : !s32i loc(#loc30)
              %7 = cir.cast(integral, %6 : !s32i), !u64i loc(#loc30)
              %8 = cir.const #cir.int<4> : !u64i loc(#loc30)
              %9 = cir.binop(mul, %7, %8) : !u64i loc(#loc30)
              %10 = cir.const #cir.int<2> : !s32i loc(#loc30)
              %11 = cir.cast(integral, %10 : !s32i), !u64i loc(#loc30)
              %12 = cir.binop(add, %9, %11) : !u64i loc(#loc30)
              %13 = cir.cast(integral, %12 : !u64i), !s32i loc(#loc30)
              %14 = cir.get_global @stdin : !cir.ptr<!cir.ptr<!ty__IO_FILE>> loc(#loc296)
              %15 = cir.load %14 : !cir.ptr<!cir.ptr<!ty__IO_FILE>>, !cir.ptr<!ty__IO_FILE> loc(#loc31)
              %16 = cir.call @fgets(%5, %13, %15) : (!cir.ptr<!s8i>, !s32i, !cir.ptr<!ty__IO_FILE>) -> !cir.ptr<!s8i> loc(#loc32)
              %17 = cir.const #cir.ptr<null> : !cir.ptr<!void> loc(#loc33)
              %18 = cir.cast(bitcast, %17 : !cir.ptr<!void>), !cir.ptr<!s8i> loc(#loc33)
              %19 = cir.cmp(ne, %16, %18) : !cir.ptr<!s8i>, !cir.bool loc(#loc307)
              cir.if %19 {
                %20 = cir.cast(array_to_ptrdecay, %3 : !cir.ptr<!cir.array<!s8i x 14>>), !cir.ptr<!s8i> loc(#loc37)
                %21 = cir.call @atoi(%20) : (!cir.ptr<!s8i>) -> !s32i extra(#fn_attr) loc(#loc38)
                cir.store %21, %0 : !s32i, !cir.ptr<!s32i> loc(#loc309)
              } else {
                %20 = cir.get_global @".str" : !cir.ptr<!cir.array<!s8i x 16>> loc(#loc9)
                %21 = cir.cast(array_to_ptrdecay, %20 : !cir.ptr<!cir.array<!s8i x 16>>), !cir.ptr<!s8i> loc(#loc9)
                cir.call @printLine(%21) : (!cir.ptr<!s8i>) -> () loc(#loc41)
              } loc(#loc308)
            } loc(#loc306)
          } loc(#loc304)
          cir.break loc(#loc42)
        } loc(#loc22)
        cir.case(default, []) {
          %3 = cir.get_global @".str.1" : !cir.ptr<!cir.array<!s8i x 21>> loc(#loc10)
          %4 = cir.cast(array_to_ptrdecay, %3 : !cir.ptr<!cir.array<!s8i x 21>>), !cir.ptr<!s8i> loc(#loc10)
          cir.call @printLine(%4) : (!cir.ptr<!s8i>) -> () loc(#loc44)
          cir.break loc(#loc45)
        } loc(#loc43)
        cir.yield loc(#loc19)
      } loc(#loc19)
    } loc(#loc303)
    cir.scope {
      %2 = cir.const #cir.int<7> : !s32i loc(#loc48)
      cir.switch (%2 : !s32i) {
        cir.case(equal, [#cir.int<7> : !s32i]) {
          cir.scope {
            %3 = cir.alloca !s32i, !cir.ptr<!s32i>, ["result", init] {alignment = 4 : i64} loc(#loc312)
            %4 = cir.load %0 : !cir.ptr<!s32i>, !s32i loc(#loc54)
            %5 = cir.load %0 : !cir.ptr<!s32i>, !s32i loc(#loc53)
            %6 = cir.binop(mul, %4, %5) nsw : !s32i loc(#loc54)
            cir.store %6, %3 : !s32i, !cir.ptr<!s32i> loc(#loc312)
            %7 = cir.load %3 : !cir.ptr<!s32i>, !s32i loc(#loc55)
            cir.call @printIntLine(%7) : (!s32i) -> () loc(#loc56)
          } loc(#loc311)
          cir.break loc(#loc57)
        } loc(#loc49)
        cir.case(default, []) {
          %3 = cir.get_global @".str.1" : !cir.ptr<!cir.array<!s8i x 21>> loc(#loc59)
          %4 = cir.cast(array_to_ptrdecay, %3 : !cir.ptr<!cir.array<!s8i x 21>>), !cir.ptr<!s8i> loc(#loc59)
          cir.call @printLine(%4) : (!cir.ptr<!s8i>) -> () loc(#loc60)
          cir.break loc(#loc61)
        } loc(#loc58)
        cir.yield loc(#loc46)
      } loc(#loc46)
    } loc(#loc310)
    cir.return loc(#loc14)
  } loc(#loc300)
  cir.func no_proto @CWE190_Integer_Overflow__int_fgets_square_15_good() extra(#fn_attr1) {
    %0 = cir.get_global @goodB2G1 : !cir.ptr<!cir.func<!void ()>> loc(#loc314)
    cir.call %0() : (!cir.ptr<!cir.func<!void ()>>) -> () loc(#loc64)
    %1 = cir.get_global @goodB2G2 : !cir.ptr<!cir.func<!void ()>> loc(#loc315)
    cir.call %1() : (!cir.ptr<!cir.func<!void ()>>) -> () loc(#loc66)
    %2 = cir.get_global @goodG2B1 : !cir.ptr<!cir.func<!void ()>> loc(#loc316)
    cir.call %2() : (!cir.ptr<!cir.func<!void ()>>) -> () loc(#loc68)
    %3 = cir.get_global @goodG2B2 : !cir.ptr<!cir.func<!void ()>> loc(#loc317)
    cir.call %3() : (!cir.ptr<!cir.func<!void ()>>) -> () loc(#loc70)
    cir.return loc(#loc63)
  } loc(#loc313)
  cir.func private @srand(!u32i) extra(#fn_attr) loc(#loc318)
  cir.func private @time(!cir.ptr<!s64i>) -> !s64i extra(#fn_attr) loc(#loc319)
  cir.global "private" constant cir_private dsolocal @".str.2" = #cir.const_array<"Calling good()...\00" : !cir.array<!s8i x 18>> : !cir.array<!s8i x 18> {alignment = 1 : i64} loc(#loc76)
  cir.global "private" constant cir_private dsolocal @".str.3" = #cir.const_array<"Finished good()\00" : !cir.array<!s8i x 16>> : !cir.array<!s8i x 16> {alignment = 1 : i64} loc(#loc77)
  cir.global "private" constant cir_private dsolocal @".str.4" = #cir.const_array<"Calling bad()...\00" : !cir.array<!s8i x 17>> : !cir.array<!s8i x 17> {alignment = 1 : i64} loc(#loc78)
  cir.global "private" constant cir_private dsolocal @".str.5" = #cir.const_array<"Finished bad()\00" : !cir.array<!s8i x 15>> : !cir.array<!s8i x 15> {alignment = 1 : i64} loc(#loc79)
  cir.func @main(%arg0: !s32i loc(fused[#loc82, #loc83]), %arg1: !cir.ptr<!cir.ptr<!s8i>> loc(fused[#loc84, #loc85])) -> !s32i extra(#fn_attr1) {
    %0 = cir.alloca !s32i, !cir.ptr<!s32i>, ["argc", init] {alignment = 4 : i64} loc(#loc321)
    %1 = cir.alloca !cir.ptr<!cir.ptr<!s8i>>, !cir.ptr<!cir.ptr<!cir.ptr<!s8i>>>, ["argv", init] {alignment = 8 : i64} loc(#loc322)
    %2 = cir.alloca !s32i, !cir.ptr<!s32i>, ["__retval"] {alignment = 4 : i64} loc(#loc81)
    cir.store %arg0, %0 : !s32i, !cir.ptr<!s32i> loc(#loc86)
    cir.store %arg1, %1 : !cir.ptr<!cir.ptr<!s8i>>, !cir.ptr<!cir.ptr<!cir.ptr<!s8i>>> loc(#loc86)
    %3 = cir.const #cir.ptr<null> : !cir.ptr<!s64i> loc(#loc87)
    %4 = cir.call @time(%3) : (!cir.ptr<!s64i>) -> !s64i extra(#fn_attr) loc(#loc88)
    %5 = cir.cast(integral, %4 : !s64i), !u32i loc(#loc88)
    cir.call @srand(%5) : (!u32i) -> () extra(#fn_attr) loc(#loc89)
    %6 = cir.get_global @".str.2" : !cir.ptr<!cir.array<!s8i x 18>> loc(#loc76)
    %7 = cir.cast(array_to_ptrdecay, %6 : !cir.ptr<!cir.array<!s8i x 18>>), !cir.ptr<!s8i> loc(#loc76)
    cir.call @printLine(%7) : (!cir.ptr<!s8i>) -> () loc(#loc90)
    %8 = cir.get_global @CWE190_Integer_Overflow__int_fgets_square_15_good : !cir.ptr<!cir.func<!void ()>> loc(#loc323)
    cir.call @CWE190_Integer_Overflow__int_fgets_square_15_good() : () -> () loc(#loc91)
    %9 = cir.get_global @".str.3" : !cir.ptr<!cir.array<!s8i x 16>> loc(#loc77)
    %10 = cir.cast(array_to_ptrdecay, %9 : !cir.ptr<!cir.array<!s8i x 16>>), !cir.ptr<!s8i> loc(#loc77)
    cir.call @printLine(%10) : (!cir.ptr<!s8i>) -> () loc(#loc93)
    %11 = cir.get_global @".str.4" : !cir.ptr<!cir.array<!s8i x 17>> loc(#loc78)
    %12 = cir.cast(array_to_ptrdecay, %11 : !cir.ptr<!cir.array<!s8i x 17>>), !cir.ptr<!s8i> loc(#loc78)
    cir.call @printLine(%12) : (!cir.ptr<!s8i>) -> () loc(#loc94)
    %13 = cir.get_global @CWE190_Integer_Overflow__int_fgets_square_15_bad : !cir.ptr<!cir.func<!void ()>> loc(#loc324)
    cir.call @CWE190_Integer_Overflow__int_fgets_square_15_bad() : () -> () loc(#loc95)
    %14 = cir.get_global @".str.5" : !cir.ptr<!cir.array<!s8i x 15>> loc(#loc79)
    %15 = cir.cast(array_to_ptrdecay, %14 : !cir.ptr<!cir.array<!s8i x 15>>), !cir.ptr<!s8i> loc(#loc79)
    cir.call @printLine(%15) : (!cir.ptr<!s8i>) -> () loc(#loc97)
    %16 = cir.const #cir.int<0> : !s32i loc(#loc98)
    cir.store %16, %2 : !s32i, !cir.ptr<!s32i> loc(#loc325)
    %17 = cir.load %2 : !cir.ptr<!s32i>, !s32i loc(#loc325)
    cir.return %17 : !s32i loc(#loc325)
  } loc(#loc320)
  cir.func private @sqrt(!cir.double) -> !cir.double extra(#fn_attr) loc(#loc100)
  cir.global "private" constant cir_private dsolocal @".str.6" = #cir.const_array<"data value is too large to perform arithmetic safely.\00" : !cir.array<!s8i x 54>> : !cir.array<!s8i x 54> {alignment = 1 : i64} loc(#loc101)
  cir.func no_proto internal private @goodB2G1() extra(#fn_attr1) {
    %0 = cir.alloca !s32i, !cir.ptr<!s32i>, ["data"] {alignment = 4 : i64} loc(#loc327)
    %1 = cir.const #cir.int<0> : !s32i loc(#loc106)
    cir.store %1, %0 : !s32i, !cir.ptr<!s32i> loc(#loc328)
    cir.scope {
      %2 = cir.const #cir.int<6> : !s32i loc(#loc110)
      cir.switch (%2 : !s32i) {
        cir.case(equal, [#cir.int<6> : !s32i]) {
          cir.scope {
            %3 = cir.alloca !cir.array<!s8i x 14>, !cir.ptr<!cir.array<!s8i x 14>>, ["inputBuffer"] {alignment = 1 : i64} loc(#loc331)
            %4 = cir.const #cir.zero : !cir.array<!s8i x 14> loc(#loc331)
            cir.store %4, %3 : !cir.array<!s8i x 14>, !cir.ptr<!cir.array<!s8i x 14>> loc(#loc331)
            cir.scope {
              %5 = cir.cast(array_to_ptrdecay, %3 : !cir.ptr<!cir.array<!s8i x 14>>), !cir.ptr<!s8i> loc(#loc118)
              %6 = cir.const #cir.int<3> : !s32i loc(#loc119)
              %7 = cir.cast(integral, %6 : !s32i), !u64i loc(#loc119)
              %8 = cir.const #cir.int<4> : !u64i loc(#loc119)
              %9 = cir.binop(mul, %7, %8) : !u64i loc(#loc119)
              %10 = cir.const #cir.int<2> : !s32i loc(#loc119)
              %11 = cir.cast(integral, %10 : !s32i), !u64i loc(#loc119)
              %12 = cir.binop(add, %9, %11) : !u64i loc(#loc119)
              %13 = cir.cast(integral, %12 : !u64i), !s32i loc(#loc119)
              %14 = cir.get_global @stdin : !cir.ptr<!cir.ptr<!ty__IO_FILE>> loc(#loc296)
              %15 = cir.load %14 : !cir.ptr<!cir.ptr<!ty__IO_FILE>>, !cir.ptr<!ty__IO_FILE> loc(#loc120)
              %16 = cir.call @fgets(%5, %13, %15) : (!cir.ptr<!s8i>, !s32i, !cir.ptr<!ty__IO_FILE>) -> !cir.ptr<!s8i> loc(#loc121)
              %17 = cir.const #cir.ptr<null> : !cir.ptr<!void> loc(#loc122)
              %18 = cir.cast(bitcast, %17 : !cir.ptr<!void>), !cir.ptr<!s8i> loc(#loc122)
              %19 = cir.cmp(ne, %16, %18) : !cir.ptr<!s8i>, !cir.bool loc(#loc333)
              cir.if %19 {
                %20 = cir.cast(array_to_ptrdecay, %3 : !cir.ptr<!cir.array<!s8i x 14>>), !cir.ptr<!s8i> loc(#loc126)
                %21 = cir.call @atoi(%20) : (!cir.ptr<!s8i>) -> !s32i extra(#fn_attr) loc(#loc127)
                cir.store %21, %0 : !s32i, !cir.ptr<!s32i> loc(#loc335)
              } else {
                %20 = cir.get_global @".str" : !cir.ptr<!cir.array<!s8i x 16>> loc(#loc130)
                %21 = cir.cast(array_to_ptrdecay, %20 : !cir.ptr<!cir.array<!s8i x 16>>), !cir.ptr<!s8i> loc(#loc130)
                cir.call @printLine(%21) : (!cir.ptr<!s8i>) -> () loc(#loc131)
              } loc(#loc334)
            } loc(#loc332)
          } loc(#loc330)
          cir.break loc(#loc132)
        } loc(#loc111)
        cir.case(default, []) {
          %3 = cir.get_global @".str.1" : !cir.ptr<!cir.array<!s8i x 21>> loc(#loc134)
          %4 = cir.cast(array_to_ptrdecay, %3 : !cir.ptr<!cir.array<!s8i x 21>>), !cir.ptr<!s8i> loc(#loc134)
          cir.call @printLine(%4) : (!cir.ptr<!s8i>) -> () loc(#loc135)
          cir.break loc(#loc136)
        } loc(#loc133)
        cir.yield loc(#loc108)
      } loc(#loc108)
    } loc(#loc329)
    cir.scope {
      %2 = cir.const #cir.int<8> : !s32i loc(#loc139)
      cir.switch (%2 : !s32i) {
        cir.case(equal, [#cir.int<7> : !s32i]) {
          %3 = cir.get_global @".str.1" : !cir.ptr<!cir.array<!s8i x 21>> loc(#loc141)
          %4 = cir.cast(array_to_ptrdecay, %3 : !cir.ptr<!cir.array<!s8i x 21>>), !cir.ptr<!s8i> loc(#loc141)
          cir.call @printLine(%4) : (!cir.ptr<!s8i>) -> () loc(#loc142)
          cir.break loc(#loc143)
        } loc(#loc140)
        cir.case(default, []) {
          cir.scope {
            %3 = cir.load %0 : !cir.ptr<!s32i>, !s32i loc(#loc147)
            %4 = cir.const #cir.int<2147483647> : !s32i loc(#loc148)
            %5 = cir.unary(minus, %4) : !s32i, !s32i loc(#loc148)
            %6 = cir.const #cir.int<1> : !s32i loc(#loc148)
            %7 = cir.binop(sub, %5, %6) nsw : !s32i loc(#loc148)
            %8 = cir.cmp(gt, %3, %7) : !s32i, !cir.bool loc(#loc338)
            %9 = cir.ternary(%8, true {
              %10 = cir.load %0 : !cir.ptr<!s32i>, !s32i loc(#loc150)
              %11 = cir.abs %10 poison : !s32i loc(#loc151)
              %12 = cir.cast(integral, %11 : !s32i), !s64i loc(#loc151)
              %13 = cir.get_global @sqrt : !cir.ptr<!cir.func<!cir.double (!cir.double)>> loc(#loc152)
              %14 = cir.const #cir.int<2147483647> : !s32i loc(#loc153)
              %15 = cir.cast(int_to_float, %14 : !s32i), !cir.double loc(#loc153)
              %16 = cir.call @sqrt(%15) : (!cir.double) -> !cir.double extra(#fn_attr) loc(#loc152)
              %17 = cir.cast(float_to_int, %16 : !cir.double), !s64i loc(#loc152)
              %18 = cir.cmp(lt, %12, %17) : !s64i, !cir.bool loc(#loc339)
              %19 = cir.ternary(%18, true {
                %20 = cir.const #true loc(#loc149)
                cir.yield %20 : !cir.bool loc(#loc149)
              }, false {
                %20 = cir.const #false loc(#loc149)
                cir.yield %20 : !cir.bool loc(#loc149)
              }) : (!cir.bool) -> !cir.bool loc(#loc149)
              cir.yield %19 : !cir.bool loc(#loc149)
            }, false {
              %10 = cir.const #false loc(#loc149)
              cir.yield %10 : !cir.bool loc(#loc149)
            }) : (!cir.bool) -> !cir.bool loc(#loc149)
            cir.if %9 {
              %10 = cir.alloca !s32i, !cir.ptr<!s32i>, ["result", init] {alignment = 4 : i64} loc(#loc341)
              %11 = cir.load %0 : !cir.ptr<!s32i>, !s32i loc(#loc160)
              %12 = cir.load %0 : !cir.ptr<!s32i>, !s32i loc(#loc159)
              %13 = cir.binop(mul, %11, %12) nsw : !s32i loc(#loc160)
              cir.store %13, %10 : !s32i, !cir.ptr<!s32i> loc(#loc341)
              %14 = cir.load %10 : !cir.ptr<!s32i>, !s32i loc(#loc161)
              cir.call @printIntLine(%14) : (!s32i) -> () loc(#loc162)
            } else {
              %10 = cir.get_global @".str.6" : !cir.ptr<!cir.array<!s8i x 54>> loc(#loc101)
              %11 = cir.cast(array_to_ptrdecay, %10 : !cir.ptr<!cir.array<!s8i x 54>>), !cir.ptr<!s8i> loc(#loc101)
              cir.call @printLine(%11) : (!cir.ptr<!s8i>) -> () loc(#loc163)
            } loc(#loc340)
          } loc(#loc337)
          cir.break loc(#loc164)
        } loc(#loc144)
        cir.yield loc(#loc137)
      } loc(#loc137)
    } loc(#loc336)
    cir.return loc(#loc103)
  } loc(#loc326)
  cir.func no_proto internal private @goodB2G2() extra(#fn_attr1) {
    %0 = cir.alloca !s32i, !cir.ptr<!s32i>, ["data"] {alignment = 4 : i64} loc(#loc343)
    %1 = cir.const #cir.int<0> : !s32i loc(#loc169)
    cir.store %1, %0 : !s32i, !cir.ptr<!s32i> loc(#loc344)
    cir.scope {
      %2 = cir.const #cir.int<6> : !s32i loc(#loc173)
      cir.switch (%2 : !s32i) {
        cir.case(equal, [#cir.int<6> : !s32i]) {
          cir.scope {
            %3 = cir.alloca !cir.array<!s8i x 14>, !cir.ptr<!cir.array<!s8i x 14>>, ["inputBuffer"] {alignment = 1 : i64} loc(#loc347)
            %4 = cir.const #cir.zero : !cir.array<!s8i x 14> loc(#loc347)
            cir.store %4, %3 : !cir.array<!s8i x 14>, !cir.ptr<!cir.array<!s8i x 14>> loc(#loc347)
            cir.scope {
              %5 = cir.cast(array_to_ptrdecay, %3 : !cir.ptr<!cir.array<!s8i x 14>>), !cir.ptr<!s8i> loc(#loc181)
              %6 = cir.const #cir.int<3> : !s32i loc(#loc182)
              %7 = cir.cast(integral, %6 : !s32i), !u64i loc(#loc182)
              %8 = cir.const #cir.int<4> : !u64i loc(#loc182)
              %9 = cir.binop(mul, %7, %8) : !u64i loc(#loc182)
              %10 = cir.const #cir.int<2> : !s32i loc(#loc182)
              %11 = cir.cast(integral, %10 : !s32i), !u64i loc(#loc182)
              %12 = cir.binop(add, %9, %11) : !u64i loc(#loc182)
              %13 = cir.cast(integral, %12 : !u64i), !s32i loc(#loc182)
              %14 = cir.get_global @stdin : !cir.ptr<!cir.ptr<!ty__IO_FILE>> loc(#loc296)
              %15 = cir.load %14 : !cir.ptr<!cir.ptr<!ty__IO_FILE>>, !cir.ptr<!ty__IO_FILE> loc(#loc183)
              %16 = cir.call @fgets(%5, %13, %15) : (!cir.ptr<!s8i>, !s32i, !cir.ptr<!ty__IO_FILE>) -> !cir.ptr<!s8i> loc(#loc184)
              %17 = cir.const #cir.ptr<null> : !cir.ptr<!void> loc(#loc185)
              %18 = cir.cast(bitcast, %17 : !cir.ptr<!void>), !cir.ptr<!s8i> loc(#loc185)
              %19 = cir.cmp(ne, %16, %18) : !cir.ptr<!s8i>, !cir.bool loc(#loc349)
              cir.if %19 {
                %20 = cir.cast(array_to_ptrdecay, %3 : !cir.ptr<!cir.array<!s8i x 14>>), !cir.ptr<!s8i> loc(#loc189)
                %21 = cir.call @atoi(%20) : (!cir.ptr<!s8i>) -> !s32i extra(#fn_attr) loc(#loc190)
                cir.store %21, %0 : !s32i, !cir.ptr<!s32i> loc(#loc351)
              } else {
                %20 = cir.get_global @".str" : !cir.ptr<!cir.array<!s8i x 16>> loc(#loc193)
                %21 = cir.cast(array_to_ptrdecay, %20 : !cir.ptr<!cir.array<!s8i x 16>>), !cir.ptr<!s8i> loc(#loc193)
                cir.call @printLine(%21) : (!cir.ptr<!s8i>) -> () loc(#loc194)
              } loc(#loc350)
            } loc(#loc348)
          } loc(#loc346)
          cir.break loc(#loc195)
        } loc(#loc174)
        cir.case(default, []) {
          %3 = cir.get_global @".str.1" : !cir.ptr<!cir.array<!s8i x 21>> loc(#loc197)
          %4 = cir.cast(array_to_ptrdecay, %3 : !cir.ptr<!cir.array<!s8i x 21>>), !cir.ptr<!s8i> loc(#loc197)
          cir.call @printLine(%4) : (!cir.ptr<!s8i>) -> () loc(#loc198)
          cir.break loc(#loc199)
        } loc(#loc196)
        cir.yield loc(#loc171)
      } loc(#loc171)
    } loc(#loc345)
    cir.scope {
      %2 = cir.const #cir.int<7> : !s32i loc(#loc202)
      cir.switch (%2 : !s32i) {
        cir.case(equal, [#cir.int<7> : !s32i]) {
          cir.scope {
            %3 = cir.load %0 : !cir.ptr<!s32i>, !s32i loc(#loc206)
            %4 = cir.const #cir.int<2147483647> : !s32i loc(#loc207)
            %5 = cir.unary(minus, %4) : !s32i, !s32i loc(#loc207)
            %6 = cir.const #cir.int<1> : !s32i loc(#loc207)
            %7 = cir.binop(sub, %5, %6) nsw : !s32i loc(#loc207)
            %8 = cir.cmp(gt, %3, %7) : !s32i, !cir.bool loc(#loc354)
            %9 = cir.ternary(%8, true {
              %10 = cir.load %0 : !cir.ptr<!s32i>, !s32i loc(#loc209)
              %11 = cir.abs %10 poison : !s32i loc(#loc210)
              %12 = cir.cast(integral, %11 : !s32i), !s64i loc(#loc210)
              %13 = cir.get_global @sqrt : !cir.ptr<!cir.func<!cir.double (!cir.double)>> loc(#loc211)
              %14 = cir.const #cir.int<2147483647> : !s32i loc(#loc212)
              %15 = cir.cast(int_to_float, %14 : !s32i), !cir.double loc(#loc212)
              %16 = cir.call @sqrt(%15) : (!cir.double) -> !cir.double extra(#fn_attr) loc(#loc211)
              %17 = cir.cast(float_to_int, %16 : !cir.double), !s64i loc(#loc211)
              %18 = cir.cmp(lt, %12, %17) : !s64i, !cir.bool loc(#loc355)
              %19 = cir.ternary(%18, true {
                %20 = cir.const #true loc(#loc208)
                cir.yield %20 : !cir.bool loc(#loc208)
              }, false {
                %20 = cir.const #false loc(#loc208)
                cir.yield %20 : !cir.bool loc(#loc208)
              }) : (!cir.bool) -> !cir.bool loc(#loc208)
              cir.yield %19 : !cir.bool loc(#loc208)
            }, false {
              %10 = cir.const #false loc(#loc208)
              cir.yield %10 : !cir.bool loc(#loc208)
            }) : (!cir.bool) -> !cir.bool loc(#loc208)
            cir.if %9 {
              %10 = cir.alloca !s32i, !cir.ptr<!s32i>, ["result", init] {alignment = 4 : i64} loc(#loc357)
              %11 = cir.load %0 : !cir.ptr<!s32i>, !s32i loc(#loc219)
              %12 = cir.load %0 : !cir.ptr<!s32i>, !s32i loc(#loc218)
              %13 = cir.binop(mul, %11, %12) nsw : !s32i loc(#loc219)
              cir.store %13, %10 : !s32i, !cir.ptr<!s32i> loc(#loc357)
              %14 = cir.load %10 : !cir.ptr<!s32i>, !s32i loc(#loc220)
              cir.call @printIntLine(%14) : (!s32i) -> () loc(#loc221)
            } else {
              %10 = cir.get_global @".str.6" : !cir.ptr<!cir.array<!s8i x 54>> loc(#loc222)
              %11 = cir.cast(array_to_ptrdecay, %10 : !cir.ptr<!cir.array<!s8i x 54>>), !cir.ptr<!s8i> loc(#loc222)
              cir.call @printLine(%11) : (!cir.ptr<!s8i>) -> () loc(#loc223)
            } loc(#loc356)
          } loc(#loc353)
          cir.break loc(#loc224)
        } loc(#loc203)
        cir.case(default, []) {
          %3 = cir.get_global @".str.1" : !cir.ptr<!cir.array<!s8i x 21>> loc(#loc226)
          %4 = cir.cast(array_to_ptrdecay, %3 : !cir.ptr<!cir.array<!s8i x 21>>), !cir.ptr<!s8i> loc(#loc226)
          cir.call @printLine(%4) : (!cir.ptr<!s8i>) -> () loc(#loc227)
          cir.break loc(#loc228)
        } loc(#loc225)
        cir.yield loc(#loc200)
      } loc(#loc200)
    } loc(#loc352)
    cir.return loc(#loc166)
  } loc(#loc342)
  cir.func no_proto internal private @goodG2B1() extra(#fn_attr1) {
    %0 = cir.alloca !s32i, !cir.ptr<!s32i>, ["data"] {alignment = 4 : i64} loc(#loc359)
    %1 = cir.const #cir.int<0> : !s32i loc(#loc233)
    cir.store %1, %0 : !s32i, !cir.ptr<!s32i> loc(#loc360)
    cir.scope {
      %2 = cir.const #cir.int<5> : !s32i loc(#loc237)
      cir.switch (%2 : !s32i) {
        cir.case(equal, [#cir.int<6> : !s32i]) {
          %3 = cir.get_global @".str.1" : !cir.ptr<!cir.array<!s8i x 21>> loc(#loc239)
          %4 = cir.cast(array_to_ptrdecay, %3 : !cir.ptr<!cir.array<!s8i x 21>>), !cir.ptr<!s8i> loc(#loc239)
          cir.call @printLine(%4) : (!cir.ptr<!s8i>) -> () loc(#loc240)
          cir.break loc(#loc241)
        } loc(#loc238)
        cir.case(default, []) {
          %3 = cir.const #cir.int<2> : !s32i loc(#loc243)
          cir.store %3, %0 : !s32i, !cir.ptr<!s32i> loc(#loc362)
          cir.break loc(#loc245)
        } loc(#loc242)
        cir.yield loc(#loc235)
      } loc(#loc235)
    } loc(#loc361)
    cir.scope {
      %2 = cir.const #cir.int<7> : !s32i loc(#loc248)
      cir.switch (%2 : !s32i) {
        cir.case(equal, [#cir.int<7> : !s32i]) {
          cir.scope {
            %3 = cir.alloca !s32i, !cir.ptr<!s32i>, ["result", init] {alignment = 4 : i64} loc(#loc365)
            %4 = cir.load %0 : !cir.ptr<!s32i>, !s32i loc(#loc254)
            %5 = cir.load %0 : !cir.ptr<!s32i>, !s32i loc(#loc253)
            %6 = cir.binop(mul, %4, %5) nsw : !s32i loc(#loc254)
            cir.store %6, %3 : !s32i, !cir.ptr<!s32i> loc(#loc365)
            %7 = cir.load %3 : !cir.ptr<!s32i>, !s32i loc(#loc255)
            cir.call @printIntLine(%7) : (!s32i) -> () loc(#loc256)
          } loc(#loc364)
          cir.break loc(#loc257)
        } loc(#loc249)
        cir.case(default, []) {
          %3 = cir.get_global @".str.1" : !cir.ptr<!cir.array<!s8i x 21>> loc(#loc259)
          %4 = cir.cast(array_to_ptrdecay, %3 : !cir.ptr<!cir.array<!s8i x 21>>), !cir.ptr<!s8i> loc(#loc259)
          cir.call @printLine(%4) : (!cir.ptr<!s8i>) -> () loc(#loc260)
          cir.break loc(#loc261)
        } loc(#loc258)
        cir.yield loc(#loc246)
      } loc(#loc246)
    } loc(#loc363)
    cir.return loc(#loc230)
  } loc(#loc358)
  cir.func no_proto internal private @goodG2B2() extra(#fn_attr1) {
    %0 = cir.alloca !s32i, !cir.ptr<!s32i>, ["data"] {alignment = 4 : i64} loc(#loc367)
    %1 = cir.const #cir.int<0> : !s32i loc(#loc266)
    cir.store %1, %0 : !s32i, !cir.ptr<!s32i> loc(#loc368)
    cir.scope {
      %2 = cir.const #cir.int<6> : !s32i loc(#loc270)
      cir.switch (%2 : !s32i) {
        cir.case(equal, [#cir.int<6> : !s32i]) {
          %3 = cir.const #cir.int<2> : !s32i loc(#loc272)
          cir.store %3, %0 : !s32i, !cir.ptr<!s32i> loc(#loc370)
          cir.break loc(#loc274)
        } loc(#loc271)
        cir.case(default, []) {
          %3 = cir.get_global @".str.1" : !cir.ptr<!cir.array<!s8i x 21>> loc(#loc276)
          %4 = cir.cast(array_to_ptrdecay, %3 : !cir.ptr<!cir.array<!s8i x 21>>), !cir.ptr<!s8i> loc(#loc276)
          cir.call @printLine(%4) : (!cir.ptr<!s8i>) -> () loc(#loc277)
          cir.break loc(#loc278)
        } loc(#loc275)
        cir.yield loc(#loc268)
      } loc(#loc268)
    } loc(#loc369)
    cir.scope {
      %2 = cir.const #cir.int<7> : !s32i loc(#loc281)
      cir.switch (%2 : !s32i) {
        cir.case(equal, [#cir.int<7> : !s32i]) {
          cir.scope {
            %3 = cir.alloca !s32i, !cir.ptr<!s32i>, ["result", init] {alignment = 4 : i64} loc(#loc373)
            %4 = cir.load %0 : !cir.ptr<!s32i>, !s32i loc(#loc287)
            %5 = cir.load %0 : !cir.ptr<!s32i>, !s32i loc(#loc286)
            %6 = cir.binop(mul, %4, %5) nsw : !s32i loc(#loc287)
            cir.store %6, %3 : !s32i, !cir.ptr<!s32i> loc(#loc373)
            %7 = cir.load %3 : !cir.ptr<!s32i>, !s32i loc(#loc288)
            cir.call @printIntLine(%7) : (!s32i) -> () loc(#loc289)
          } loc(#loc372)
          cir.break loc(#loc290)
        } loc(#loc282)
        cir.case(default, []) {
          %3 = cir.get_global @".str.1" : !cir.ptr<!cir.array<!s8i x 21>> loc(#loc292)
          %4 = cir.cast(array_to_ptrdecay, %3 : !cir.ptr<!cir.array<!s8i x 21>>), !cir.ptr<!s8i> loc(#loc292)
          cir.call @printLine(%4) : (!cir.ptr<!s8i>) -> () loc(#loc293)
          cir.break loc(#loc294)
        } loc(#loc291)
        cir.yield loc(#loc279)
      } loc(#loc279)
    } loc(#loc371)
    cir.return loc(#loc263)
  } loc(#loc366)
} loc(#loc)
#loc = loc("/home/ladisgin/git_proj/juliet-c/testcases/CWE190_Integer_Overflow/s03/CWE190_Integer_Overflow__int_fgets_square_15.c":0:0)
#loc1 = loc("/usr/include/stdio.h":654:1)
#loc2 = loc("/usr/include/stdio.h":655:59)
#loc3 = loc("/usr/include/stdio.h":149:1)
#loc4 = loc("/usr/include/stdio.h":149:14)
#loc5 = loc("/usr/include/stdlib.h":105:1)
#loc6 = loc("/usr/include/stdlib.h":106:33)
#loc7 = loc("../../../testcasesupport/std_testcase_io.h":14:1)
#loc8 = loc("../../../testcasesupport/std_testcase_io.h":14:33)
#loc9 = loc("CWE190_Integer_Overflow__int_fgets_square_15.c":44:23)
#loc10 = loc("CWE190_Integer_Overflow__int_fgets_square_15.c":50:19)
#loc11 = loc("../../../testcasesupport/std_testcase_io.h":18:1)
#loc12 = loc("../../../testcasesupport/std_testcase_io.h":18:33)
#loc13 = loc("CWE190_Integer_Overflow__int_fgets_square_15.c":26:1)
#loc14 = loc("CWE190_Integer_Overflow__int_fgets_square_15.c":67:1)
#loc15 = loc("CWE190_Integer_Overflow__int_fgets_square_15.c":28:5)
#loc16 = loc("CWE190_Integer_Overflow__int_fgets_square_15.c":28:9)
#loc17 = loc("CWE190_Integer_Overflow__int_fgets_square_15.c":30:12)
#loc18 = loc("CWE190_Integer_Overflow__int_fgets_square_15.c":30:5)
#loc19 = loc("CWE190_Integer_Overflow__int_fgets_square_15.c":31:5)
#loc20 = loc("CWE190_Integer_Overflow__int_fgets_square_15.c":52:5)
#loc21 = loc("CWE190_Integer_Overflow__int_fgets_square_15.c":31:12)
#loc22 = loc("CWE190_Integer_Overflow__int_fgets_square_15.c":33:5)
#loc23 = loc("CWE190_Integer_Overflow__int_fgets_square_15.c":34:5)
#loc24 = loc("CWE190_Integer_Overflow__int_fgets_square_15.c":46:5)
#loc25 = loc("CWE190_Integer_Overflow__int_fgets_square_15.c":35:9)
#loc26 = loc("CWE190_Integer_Overflow__int_fgets_square_15.c":35:45)
#loc27 = loc("CWE190_Integer_Overflow__int_fgets_square_15.c":37:9)
#loc28 = loc("CWE190_Integer_Overflow__int_fgets_square_15.c":45:9)
#loc29 = loc("CWE190_Integer_Overflow__int_fgets_square_15.c":37:19)
#loc30 = loc("CWE190_Integer_Overflow__int_fgets_square_15.c":37:32)
#loc31 = loc("CWE190_Integer_Overflow__int_fgets_square_15.c":37:49)
#loc32 = loc("CWE190_Integer_Overflow__int_fgets_square_15.c":37:13)
#loc33 = loc("CWE190_Integer_Overflow__int_fgets_square_15.c":37:59)
#loc34 = loc("CWE190_Integer_Overflow__int_fgets_square_15.c":38:9)
#loc35 = loc("CWE190_Integer_Overflow__int_fgets_square_15.c":41:9)
#loc36 = loc("CWE190_Integer_Overflow__int_fgets_square_15.c":43:9)
#loc37 = loc("CWE190_Integer_Overflow__int_fgets_square_15.c":40:25)
#loc38 = loc("CWE190_Integer_Overflow__int_fgets_square_15.c":40:20)
#loc39 = loc("CWE190_Integer_Overflow__int_fgets_square_15.c":40:13)
#loc40 = loc("CWE190_Integer_Overflow__int_fgets_square_15.c":40:36)
#loc41 = loc("CWE190_Integer_Overflow__int_fgets_square_15.c":44:13)
#loc42 = loc("CWE190_Integer_Overflow__int_fgets_square_15.c":47:5)
#loc43 = loc("CWE190_Integer_Overflow__int_fgets_square_15.c":48:5)
#loc44 = loc("CWE190_Integer_Overflow__int_fgets_square_15.c":50:9)
#loc45 = loc("CWE190_Integer_Overflow__int_fgets_square_15.c":51:9)
#loc46 = loc("CWE190_Integer_Overflow__int_fgets_square_15.c":53:5)
#loc47 = loc("CWE190_Integer_Overflow__int_fgets_square_15.c":66:5)
#loc48 = loc("CWE190_Integer_Overflow__int_fgets_square_15.c":53:12)
#loc49 = loc("CWE190_Integer_Overflow__int_fgets_square_15.c":55:5)
#loc50 = loc("CWE190_Integer_Overflow__int_fgets_square_15.c":56:5)
#loc51 = loc("CWE190_Integer_Overflow__int_fgets_square_15.c":60:5)
#loc52 = loc("CWE190_Integer_Overflow__int_fgets_square_15.c":58:9)
#loc53 = loc("CWE190_Integer_Overflow__int_fgets_square_15.c":58:29)
#loc54 = loc("CWE190_Integer_Overflow__int_fgets_square_15.c":58:22)
#loc55 = loc("CWE190_Integer_Overflow__int_fgets_square_15.c":59:22)
#loc56 = loc("CWE190_Integer_Overflow__int_fgets_square_15.c":59:9)
#loc57 = loc("CWE190_Integer_Overflow__int_fgets_square_15.c":61:5)
#loc58 = loc("CWE190_Integer_Overflow__int_fgets_square_15.c":62:5)
#loc59 = loc("CWE190_Integer_Overflow__int_fgets_square_15.c":64:19)
#loc60 = loc("CWE190_Integer_Overflow__int_fgets_square_15.c":64:9)
#loc61 = loc("CWE190_Integer_Overflow__int_fgets_square_15.c":65:9)
#loc62 = loc("CWE190_Integer_Overflow__int_fgets_square_15.c":237:1)
#loc63 = loc("CWE190_Integer_Overflow__int_fgets_square_15.c":243:1)
#loc64 = loc("CWE190_Integer_Overflow__int_fgets_square_15.c":239:5)
#loc65 = loc("CWE190_Integer_Overflow__int_fgets_square_15.c":239:14)
#loc66 = loc("CWE190_Integer_Overflow__int_fgets_square_15.c":240:5)
#loc67 = loc("CWE190_Integer_Overflow__int_fgets_square_15.c":240:14)
#loc68 = loc("CWE190_Integer_Overflow__int_fgets_square_15.c":241:5)
#loc69 = loc("CWE190_Integer_Overflow__int_fgets_square_15.c":241:14)
#loc70 = loc("CWE190_Integer_Overflow__int_fgets_square_15.c":242:5)
#loc71 = loc("CWE190_Integer_Overflow__int_fgets_square_15.c":242:14)
#loc72 = loc("/usr/include/stdlib.h":575:1)
#loc73 = loc("/usr/include/stdlib.h":575:41)
#loc74 = loc("/usr/include/time.h":76:1)
#loc75 = loc("/usr/include/time.h":76:38)
#loc76 = loc("CWE190_Integer_Overflow__int_fgets_square_15.c":259:15)
#loc77 = loc("CWE190_Integer_Overflow__int_fgets_square_15.c":261:15)
#loc78 = loc("CWE190_Integer_Overflow__int_fgets_square_15.c":264:15)
#loc79 = loc("CWE190_Integer_Overflow__int_fgets_square_15.c":266:15)
#loc80 = loc("CWE190_Integer_Overflow__int_fgets_square_15.c":254:1)
#loc81 = loc("CWE190_Integer_Overflow__int_fgets_square_15.c":269:1)
#loc86 = loc("CWE190_Integer_Overflow__int_fgets_square_15.c":255:1)
#loc87 = loc("CWE190_Integer_Overflow__int_fgets_square_15.c":257:27)
#loc88 = loc("CWE190_Integer_Overflow__int_fgets_square_15.c":257:22)
#loc89 = loc("CWE190_Integer_Overflow__int_fgets_square_15.c":257:5)
#loc90 = loc("CWE190_Integer_Overflow__int_fgets_square_15.c":259:5)
#loc91 = loc("CWE190_Integer_Overflow__int_fgets_square_15.c":260:5)
#loc92 = loc("CWE190_Integer_Overflow__int_fgets_square_15.c":260:55)
#loc93 = loc("CWE190_Integer_Overflow__int_fgets_square_15.c":261:5)
#loc94 = loc("CWE190_Integer_Overflow__int_fgets_square_15.c":264:5)
#loc95 = loc("CWE190_Integer_Overflow__int_fgets_square_15.c":265:5)
#loc96 = loc("CWE190_Integer_Overflow__int_fgets_square_15.c":265:54)
#loc97 = loc("CWE190_Integer_Overflow__int_fgets_square_15.c":266:5)
#loc98 = loc("CWE190_Integer_Overflow__int_fgets_square_15.c":268:12)
#loc99 = loc("CWE190_Integer_Overflow__int_fgets_square_15.c":268:5)
#loc100 = loc("/usr/include/bits/mathcalls.h":158:1)
#loc101 = loc("CWE190_Integer_Overflow__int_fgets_square_15.c":116:23)
#loc102 = loc("CWE190_Integer_Overflow__int_fgets_square_15.c":74:1)
#loc103 = loc("CWE190_Integer_Overflow__int_fgets_square_15.c":120:1)
#loc104 = loc("CWE190_Integer_Overflow__int_fgets_square_15.c":76:5)
#loc105 = loc("CWE190_Integer_Overflow__int_fgets_square_15.c":76:9)
#loc106 = loc("CWE190_Integer_Overflow__int_fgets_square_15.c":78:12)
#loc107 = loc("CWE190_Integer_Overflow__int_fgets_square_15.c":78:5)
#loc108 = loc("CWE190_Integer_Overflow__int_fgets_square_15.c":79:5)
#loc109 = loc("CWE190_Integer_Overflow__int_fgets_square_15.c":100:5)
#loc110 = loc("CWE190_Integer_Overflow__int_fgets_square_15.c":79:12)
#loc111 = loc("CWE190_Integer_Overflow__int_fgets_square_15.c":81:5)
#loc112 = loc("CWE190_Integer_Overflow__int_fgets_square_15.c":82:5)
#loc113 = loc("CWE190_Integer_Overflow__int_fgets_square_15.c":94:5)
#loc114 = loc("CWE190_Integer_Overflow__int_fgets_square_15.c":83:9)
#loc115 = loc("CWE190_Integer_Overflow__int_fgets_square_15.c":83:45)
#loc116 = loc("CWE190_Integer_Overflow__int_fgets_square_15.c":85:9)
#loc117 = loc("CWE190_Integer_Overflow__int_fgets_square_15.c":93:9)
#loc118 = loc("CWE190_Integer_Overflow__int_fgets_square_15.c":85:19)
#loc119 = loc("CWE190_Integer_Overflow__int_fgets_square_15.c":85:32)
#loc120 = loc("CWE190_Integer_Overflow__int_fgets_square_15.c":85:49)
#loc121 = loc("CWE190_Integer_Overflow__int_fgets_square_15.c":85:13)
#loc122 = loc("CWE190_Integer_Overflow__int_fgets_square_15.c":85:59)
#loc123 = loc("CWE190_Integer_Overflow__int_fgets_square_15.c":86:9)
#loc124 = loc("CWE190_Integer_Overflow__int_fgets_square_15.c":89:9)
#loc125 = loc("CWE190_Integer_Overflow__int_fgets_square_15.c":91:9)
#loc126 = loc("CWE190_Integer_Overflow__int_fgets_square_15.c":88:25)
#loc127 = loc("CWE190_Integer_Overflow__int_fgets_square_15.c":88:20)
#loc128 = loc("CWE190_Integer_Overflow__int_fgets_square_15.c":88:13)
#loc129 = loc("CWE190_Integer_Overflow__int_fgets_square_15.c":88:36)
#loc130 = loc("CWE190_Integer_Overflow__int_fgets_square_15.c":92:23)
#loc131 = loc("CWE190_Integer_Overflow__int_fgets_square_15.c":92:13)
#loc132 = loc("CWE190_Integer_Overflow__int_fgets_square_15.c":95:5)
#loc133 = loc("CWE190_Integer_Overflow__int_fgets_square_15.c":96:5)
#loc134 = loc("CWE190_Integer_Overflow__int_fgets_square_15.c":98:19)
#loc135 = loc("CWE190_Integer_Overflow__int_fgets_square_15.c":98:9)
#loc136 = loc("CWE190_Integer_Overflow__int_fgets_square_15.c":99:9)
#loc137 = loc("CWE190_Integer_Overflow__int_fgets_square_15.c":101:5)
#loc138 = loc("CWE190_Integer_Overflow__int_fgets_square_15.c":119:5)
#loc139 = loc("CWE190_Integer_Overflow__int_fgets_square_15.c":101:12)
#loc140 = loc("CWE190_Integer_Overflow__int_fgets_square_15.c":103:5)
#loc141 = loc("CWE190_Integer_Overflow__int_fgets_square_15.c":105:19)
#loc142 = loc("CWE190_Integer_Overflow__int_fgets_square_15.c":105:9)
#loc143 = loc("CWE190_Integer_Overflow__int_fgets_square_15.c":106:9)
#loc144 = loc("CWE190_Integer_Overflow__int_fgets_square_15.c":107:5)
#loc145 = loc("CWE190_Integer_Overflow__int_fgets_square_15.c":109:9)
#loc146 = loc("CWE190_Integer_Overflow__int_fgets_square_15.c":117:9)
#loc147 = loc("CWE190_Integer_Overflow__int_fgets_square_15.c":109:13)
#loc148 = loc("CWE190_Integer_Overflow__int_fgets_square_15.c":109:20)
#loc149 = loc("CWE190_Integer_Overflow__int_fgets_square_15.c":109:28)
#loc150 = loc("CWE190_Integer_Overflow__int_fgets_square_15.c":109:35)
#loc151 = loc("CWE190_Integer_Overflow__int_fgets_square_15.c":109:31)
#loc152 = loc("CWE190_Integer_Overflow__int_fgets_square_15.c":109:49)
#loc153 = loc("CWE190_Integer_Overflow__int_fgets_square_15.c":109:62)
#loc154 = loc("CWE190_Integer_Overflow__int_fgets_square_15.c":109:69)
#loc155 = loc("CWE190_Integer_Overflow__int_fgets_square_15.c":110:9)
#loc156 = loc("CWE190_Integer_Overflow__int_fgets_square_15.c":113:9)
#loc157 = loc("CWE190_Integer_Overflow__int_fgets_square_15.c":115:9)
#loc158 = loc("CWE190_Integer_Overflow__int_fgets_square_15.c":111:13)
#loc159 = loc("CWE190_Integer_Overflow__int_fgets_square_15.c":111:33)
#loc160 = loc("CWE190_Integer_Overflow__int_fgets_square_15.c":111:26)
#loc161 = loc("CWE190_Integer_Overflow__int_fgets_square_15.c":112:26)
#loc162 = loc("CWE190_Integer_Overflow__int_fgets_square_15.c":112:13)
#loc163 = loc("CWE190_Integer_Overflow__int_fgets_square_15.c":116:13)
#loc164 = loc("CWE190_Integer_Overflow__int_fgets_square_15.c":118:9)
#loc165 = loc("CWE190_Integer_Overflow__int_fgets_square_15.c":123:1)
#loc166 = loc("CWE190_Integer_Overflow__int_fgets_square_15.c":169:1)
#loc167 = loc("CWE190_Integer_Overflow__int_fgets_square_15.c":125:5)
#loc168 = loc("CWE190_Integer_Overflow__int_fgets_square_15.c":125:9)
#loc169 = loc("CWE190_Integer_Overflow__int_fgets_square_15.c":127:12)
#loc170 = loc("CWE190_Integer_Overflow__int_fgets_square_15.c":127:5)
#loc171 = loc("CWE190_Integer_Overflow__int_fgets_square_15.c":128:5)
#loc172 = loc("CWE190_Integer_Overflow__int_fgets_square_15.c":149:5)
#loc173 = loc("CWE190_Integer_Overflow__int_fgets_square_15.c":128:12)
#loc174 = loc("CWE190_Integer_Overflow__int_fgets_square_15.c":130:5)
#loc175 = loc("CWE190_Integer_Overflow__int_fgets_square_15.c":131:5)
#loc176 = loc("CWE190_Integer_Overflow__int_fgets_square_15.c":143:5)
#loc177 = loc("CWE190_Integer_Overflow__int_fgets_square_15.c":132:9)
#loc178 = loc("CWE190_Integer_Overflow__int_fgets_square_15.c":132:45)
#loc179 = loc("CWE190_Integer_Overflow__int_fgets_square_15.c":134:9)
#loc180 = loc("CWE190_Integer_Overflow__int_fgets_square_15.c":142:9)
#loc181 = loc("CWE190_Integer_Overflow__int_fgets_square_15.c":134:19)
#loc182 = loc("CWE190_Integer_Overflow__int_fgets_square_15.c":134:32)
#loc183 = loc("CWE190_Integer_Overflow__int_fgets_square_15.c":134:49)
#loc184 = loc("CWE190_Integer_Overflow__int_fgets_square_15.c":134:13)
#loc185 = loc("CWE190_Integer_Overflow__int_fgets_square_15.c":134:59)
#loc186 = loc("CWE190_Integer_Overflow__int_fgets_square_15.c":135:9)
#loc187 = loc("CWE190_Integer_Overflow__int_fgets_square_15.c":138:9)
#loc188 = loc("CWE190_Integer_Overflow__int_fgets_square_15.c":140:9)
#loc189 = loc("CWE190_Integer_Overflow__int_fgets_square_15.c":137:25)
#loc190 = loc("CWE190_Integer_Overflow__int_fgets_square_15.c":137:20)
#loc191 = loc("CWE190_Integer_Overflow__int_fgets_square_15.c":137:13)
#loc192 = loc("CWE190_Integer_Overflow__int_fgets_square_15.c":137:36)
#loc193 = loc("CWE190_Integer_Overflow__int_fgets_square_15.c":141:23)
#loc194 = loc("CWE190_Integer_Overflow__int_fgets_square_15.c":141:13)
#loc195 = loc("CWE190_Integer_Overflow__int_fgets_square_15.c":144:5)
#loc196 = loc("CWE190_Integer_Overflow__int_fgets_square_15.c":145:5)
#loc197 = loc("CWE190_Integer_Overflow__int_fgets_square_15.c":147:19)
#loc198 = loc("CWE190_Integer_Overflow__int_fgets_square_15.c":147:9)
#loc199 = loc("CWE190_Integer_Overflow__int_fgets_square_15.c":148:9)
#loc200 = loc("CWE190_Integer_Overflow__int_fgets_square_15.c":150:5)
#loc201 = loc("CWE190_Integer_Overflow__int_fgets_square_15.c":168:5)
#loc202 = loc("CWE190_Integer_Overflow__int_fgets_square_15.c":150:12)
#loc203 = loc("CWE190_Integer_Overflow__int_fgets_square_15.c":152:5)
#loc204 = loc("CWE190_Integer_Overflow__int_fgets_square_15.c":154:9)
#loc205 = loc("CWE190_Integer_Overflow__int_fgets_square_15.c":162:9)
#loc206 = loc("CWE190_Integer_Overflow__int_fgets_square_15.c":154:13)
#loc207 = loc("CWE190_Integer_Overflow__int_fgets_square_15.c":154:20)
#loc208 = loc("CWE190_Integer_Overflow__int_fgets_square_15.c":154:28)
#loc209 = loc("CWE190_Integer_Overflow__int_fgets_square_15.c":154:35)
#loc210 = loc("CWE190_Integer_Overflow__int_fgets_square_15.c":154:31)
#loc211 = loc("CWE190_Integer_Overflow__int_fgets_square_15.c":154:49)
#loc212 = loc("CWE190_Integer_Overflow__int_fgets_square_15.c":154:62)
#loc213 = loc("CWE190_Integer_Overflow__int_fgets_square_15.c":154:69)
#loc214 = loc("CWE190_Integer_Overflow__int_fgets_square_15.c":155:9)
#loc215 = loc("CWE190_Integer_Overflow__int_fgets_square_15.c":158:9)
#loc216 = loc("CWE190_Integer_Overflow__int_fgets_square_15.c":160:9)
#loc217 = loc("CWE190_Integer_Overflow__int_fgets_square_15.c":156:13)
#loc218 = loc("CWE190_Integer_Overflow__int_fgets_square_15.c":156:33)
#loc219 = loc("CWE190_Integer_Overflow__int_fgets_square_15.c":156:26)
#loc220 = loc("CWE190_Integer_Overflow__int_fgets_square_15.c":157:26)
#loc221 = loc("CWE190_Integer_Overflow__int_fgets_square_15.c":157:13)
#loc222 = loc("CWE190_Integer_Overflow__int_fgets_square_15.c":161:23)
#loc223 = loc("CWE190_Integer_Overflow__int_fgets_square_15.c":161:13)
#loc224 = loc("CWE190_Integer_Overflow__int_fgets_square_15.c":163:9)
#loc225 = loc("CWE190_Integer_Overflow__int_fgets_square_15.c":164:5)
#loc226 = loc("CWE190_Integer_Overflow__int_fgets_square_15.c":166:19)
#loc227 = loc("CWE190_Integer_Overflow__int_fgets_square_15.c":166:9)
#loc228 = loc("CWE190_Integer_Overflow__int_fgets_square_15.c":167:9)
#loc229 = loc("CWE190_Integer_Overflow__int_fgets_square_15.c":172:1)
#loc230 = loc("CWE190_Integer_Overflow__int_fgets_square_15.c":202:1)
#loc231 = loc("CWE190_Integer_Overflow__int_fgets_square_15.c":174:5)
#loc232 = loc("CWE190_Integer_Overflow__int_fgets_square_15.c":174:9)
#loc233 = loc("CWE190_Integer_Overflow__int_fgets_square_15.c":176:12)
#loc234 = loc("CWE190_Integer_Overflow__int_fgets_square_15.c":176:5)
#loc235 = loc("CWE190_Integer_Overflow__int_fgets_square_15.c":177:5)
#loc236 = loc("CWE190_Integer_Overflow__int_fgets_square_15.c":187:5)
#loc237 = loc("CWE190_Integer_Overflow__int_fgets_square_15.c":177:12)
#loc238 = loc("CWE190_Integer_Overflow__int_fgets_square_15.c":179:5)
#loc239 = loc("CWE190_Integer_Overflow__int_fgets_square_15.c":181:19)
#loc240 = loc("CWE190_Integer_Overflow__int_fgets_square_15.c":181:9)
#loc241 = loc("CWE190_Integer_Overflow__int_fgets_square_15.c":182:9)
#loc242 = loc("CWE190_Integer_Overflow__int_fgets_square_15.c":183:5)
#loc243 = loc("CWE190_Integer_Overflow__int_fgets_square_15.c":185:16)
#loc244 = loc("CWE190_Integer_Overflow__int_fgets_square_15.c":185:9)
#loc245 = loc("CWE190_Integer_Overflow__int_fgets_square_15.c":186:9)
#loc246 = loc("CWE190_Integer_Overflow__int_fgets_square_15.c":188:5)
#loc247 = loc("CWE190_Integer_Overflow__int_fgets_square_15.c":201:5)
#loc248 = loc("CWE190_Integer_Overflow__int_fgets_square_15.c":188:12)
#loc249 = loc("CWE190_Integer_Overflow__int_fgets_square_15.c":190:5)
#loc250 = loc("CWE190_Integer_Overflow__int_fgets_square_15.c":191:5)
#loc251 = loc("CWE190_Integer_Overflow__int_fgets_square_15.c":195:5)
#loc252 = loc("CWE190_Integer_Overflow__int_fgets_square_15.c":193:9)
#loc253 = loc("CWE190_Integer_Overflow__int_fgets_square_15.c":193:29)
#loc254 = loc("CWE190_Integer_Overflow__int_fgets_square_15.c":193:22)
#loc255 = loc("CWE190_Integer_Overflow__int_fgets_square_15.c":194:22)
#loc256 = loc("CWE190_Integer_Overflow__int_fgets_square_15.c":194:9)
#loc257 = loc("CWE190_Integer_Overflow__int_fgets_square_15.c":196:5)
#loc258 = loc("CWE190_Integer_Overflow__int_fgets_square_15.c":197:5)
#loc259 = loc("CWE190_Integer_Overflow__int_fgets_square_15.c":199:19)
#loc260 = loc("CWE190_Integer_Overflow__int_fgets_square_15.c":199:9)
#loc261 = loc("CWE190_Integer_Overflow__int_fgets_square_15.c":200:9)
#loc262 = loc("CWE190_Integer_Overflow__int_fgets_square_15.c":205:1)
#loc263 = loc("CWE190_Integer_Overflow__int_fgets_square_15.c":235:1)
#loc264 = loc("CWE190_Integer_Overflow__int_fgets_square_15.c":207:5)
#loc265 = loc("CWE190_Integer_Overflow__int_fgets_square_15.c":207:9)
#loc266 = loc("CWE190_Integer_Overflow__int_fgets_square_15.c":209:12)
#loc267 = loc("CWE190_Integer_Overflow__int_fgets_square_15.c":209:5)
#loc268 = loc("CWE190_Integer_Overflow__int_fgets_square_15.c":210:5)
#loc269 = loc("CWE190_Integer_Overflow__int_fgets_square_15.c":220:5)
#loc270 = loc("CWE190_Integer_Overflow__int_fgets_square_15.c":210:12)
#loc271 = loc("CWE190_Integer_Overflow__int_fgets_square_15.c":212:5)
#loc272 = loc("CWE190_Integer_Overflow__int_fgets_square_15.c":214:16)
#loc273 = loc("CWE190_Integer_Overflow__int_fgets_square_15.c":214:9)
#loc274 = loc("CWE190_Integer_Overflow__int_fgets_square_15.c":215:9)
#loc275 = loc("CWE190_Integer_Overflow__int_fgets_square_15.c":216:5)
#loc276 = loc("CWE190_Integer_Overflow__int_fgets_square_15.c":218:19)
#loc277 = loc("CWE190_Integer_Overflow__int_fgets_square_15.c":218:9)
#loc278 = loc("CWE190_Integer_Overflow__int_fgets_square_15.c":219:9)
#loc279 = loc("CWE190_Integer_Overflow__int_fgets_square_15.c":221:5)
#loc280 = loc("CWE190_Integer_Overflow__int_fgets_square_15.c":234:5)
#loc281 = loc("CWE190_Integer_Overflow__int_fgets_square_15.c":221:12)
#loc282 = loc("CWE190_Integer_Overflow__int_fgets_square_15.c":223:5)
#loc283 = loc("CWE190_Integer_Overflow__int_fgets_square_15.c":224:5)
#loc284 = loc("CWE190_Integer_Overflow__int_fgets_square_15.c":228:5)
#loc285 = loc("CWE190_Integer_Overflow__int_fgets_square_15.c":226:9)
#loc286 = loc("CWE190_Integer_Overflow__int_fgets_square_15.c":226:29)
#loc287 = loc("CWE190_Integer_Overflow__int_fgets_square_15.c":226:22)
#loc288 = loc("CWE190_Integer_Overflow__int_fgets_square_15.c":227:22)
#loc289 = loc("CWE190_Integer_Overflow__int_fgets_square_15.c":227:9)
#loc290 = loc("CWE190_Integer_Overflow__int_fgets_square_15.c":229:5)
#loc291 = loc("CWE190_Integer_Overflow__int_fgets_square_15.c":230:5)
#loc292 = loc("CWE190_Integer_Overflow__int_fgets_square_15.c":232:19)
#loc293 = loc("CWE190_Integer_Overflow__int_fgets_square_15.c":232:9)
#loc294 = loc("CWE190_Integer_Overflow__int_fgets_square_15.c":233:9)
#loc295 = loc(fused[#loc1, #loc2])
#loc296 = loc(fused[#loc3, #loc4])
#loc297 = loc(fused[#loc5, #loc6])
#loc298 = loc(fused[#loc7, #loc8])
#loc299 = loc(fused[#loc11, #loc12])
#loc300 = loc(fused[#loc13, #loc14])
#loc301 = loc(fused[#loc15, #loc16])
#loc302 = loc(fused[#loc18, #loc17])
#loc303 = loc(fused[#loc19, #loc20])
#loc304 = loc(fused[#loc23, #loc24])
#loc305 = loc(fused[#loc25, #loc26])
#loc306 = loc(fused[#loc27, #loc28])
#loc307 = loc(fused[#loc32, #loc33])
#loc308 = loc(fused[#loc34, #loc35, #loc36, #loc28])
#loc309 = loc(fused[#loc39, #loc40])
#loc310 = loc(fused[#loc46, #loc47])
#loc311 = loc(fused[#loc50, #loc51])
#loc312 = loc(fused[#loc52, #loc53])
#loc313 = loc(fused[#loc62, #loc63])
#loc314 = loc(fused[#loc64, #loc65])
#loc315 = loc(fused[#loc66, #loc67])
#loc316 = loc(fused[#loc68, #loc69])
#loc317 = loc(fused[#loc70, #loc71])
#loc318 = loc(fused[#loc72, #loc73])
#loc319 = loc(fused[#loc74, #loc75])
#loc320 = loc(fused[#loc80, #loc81])
#loc323 = loc(fused[#loc91, #loc92])
#loc324 = loc(fused[#loc95, #loc96])
#loc325 = loc(fused[#loc99, #loc98])
#loc326 = loc(fused[#loc102, #loc103])
#loc327 = loc(fused[#loc104, #loc105])
#loc328 = loc(fused[#loc107, #loc106])
#loc329 = loc(fused[#loc108, #loc109])
#loc330 = loc(fused[#loc112, #loc113])
#loc331 = loc(fused[#loc114, #loc115])
#loc332 = loc(fused[#loc116, #loc117])
#loc333 = loc(fused[#loc121, #loc122])
#loc334 = loc(fused[#loc123, #loc124, #loc125, #loc117])
#loc335 = loc(fused[#loc128, #loc129])
#loc336 = loc(fused[#loc137, #loc138])
#loc337 = loc(fused[#loc145, #loc146])
#loc338 = loc(fused[#loc147, #loc148])
#loc339 = loc(fused[#loc151, #loc154])
#loc340 = loc(fused[#loc155, #loc156, #loc157, #loc146])
#loc341 = loc(fused[#loc158, #loc159])
#loc342 = loc(fused[#loc165, #loc166])
#loc343 = loc(fused[#loc167, #loc168])
#loc344 = loc(fused[#loc170, #loc169])
#loc345 = loc(fused[#loc171, #loc172])
#loc346 = loc(fused[#loc175, #loc176])
#loc347 = loc(fused[#loc177, #loc178])
#loc348 = loc(fused[#loc179, #loc180])
#loc349 = loc(fused[#loc184, #loc185])
#loc350 = loc(fused[#loc186, #loc187, #loc188, #loc180])
#loc351 = loc(fused[#loc191, #loc192])
#loc352 = loc(fused[#loc200, #loc201])
#loc353 = loc(fused[#loc204, #loc205])
#loc354 = loc(fused[#loc206, #loc207])
#loc355 = loc(fused[#loc210, #loc213])
#loc356 = loc(fused[#loc214, #loc215, #loc216, #loc205])
#loc357 = loc(fused[#loc217, #loc218])
#loc358 = loc(fused[#loc229, #loc230])
#loc359 = loc(fused[#loc231, #loc232])
#loc360 = loc(fused[#loc234, #loc233])
#loc361 = loc(fused[#loc235, #loc236])
#loc362 = loc(fused[#loc244, #loc243])
#loc363 = loc(fused[#loc246, #loc247])
#loc364 = loc(fused[#loc250, #loc251])
#loc365 = loc(fused[#loc252, #loc253])
#loc366 = loc(fused[#loc262, #loc263])
#loc367 = loc(fused[#loc264, #loc265])
#loc368 = loc(fused[#loc267, #loc266])
#loc369 = loc(fused[#loc268, #loc269])
#loc370 = loc(fused[#loc273, #loc272])
#loc371 = loc(fused[#loc279, #loc280])
#loc372 = loc(fused[#loc283, #loc284])
#loc373 = loc(fused[#loc285, #loc286])
