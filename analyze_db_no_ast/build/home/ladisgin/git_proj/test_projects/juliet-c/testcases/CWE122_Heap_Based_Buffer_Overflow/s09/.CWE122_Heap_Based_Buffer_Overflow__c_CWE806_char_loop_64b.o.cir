!s32i = !cir.int<s, 32>
!s8i = !cir.int<s, 8>
!u64i = !cir.int<u, 64>
!void = !cir.void
#fn_attr = #cir<extra({nothrow = #cir.nothrow})>
#fn_attr1 = #cir<extra({inline = #cir.inline<no>, nothrow = #cir.nothrow, optnone = #cir.optnone})>
#loc9 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE806_char_loop_64b.c":23:72)
#loc10 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE806_char_loop_64b.c":23:79)
#loc54 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE806_char_loop_64b.c":49:76)
#loc55 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE806_char_loop_64b.c":49:83)
#loc101 = loc(fused[#loc9, #loc10])
#loc117 = loc(fused[#loc54, #loc55])
module @"/home/ladisgin/git_proj/test_projects/juliet-c/testcases/CWE122_Heap_Based_Buffer_Overflow/s09/CWE122_Heap_Based_Buffer_Overflow__c_CWE806_char_loop_64b.c" attributes {cir.lang = #cir.lang<c>, cir.sob = #cir.signed_overflow_behavior<undefined>, cir.triple = "x86_64-unknown-linux-gnu", dlti.dl_spec = #dlti.dl_spec<#dlti.dl_entry<i1, dense<8> : vector<2xi64>>, #dlti.dl_entry<i8, dense<8> : vector<2xi64>>, #dlti.dl_entry<!llvm.ptr, dense<64> : vector<4xi64>>, #dlti.dl_entry<f64, dense<64> : vector<2xi64>>, #dlti.dl_entry<f16, dense<16> : vector<2xi64>>, #dlti.dl_entry<i16, dense<16> : vector<2xi64>>, #dlti.dl_entry<i32, dense<32> : vector<2xi64>>, #dlti.dl_entry<!llvm.ptr<272>, dense<64> : vector<4xi64>>, #dlti.dl_entry<!llvm.ptr<270>, dense<32> : vector<4xi64>>, #dlti.dl_entry<!llvm.ptr<271>, dense<32> : vector<4xi64>>, #dlti.dl_entry<f128, dense<128> : vector<2xi64>>, #dlti.dl_entry<f80, dense<128> : vector<2xi64>>, #dlti.dl_entry<i64, dense<64> : vector<2xi64>>, #dlti.dl_entry<i128, dense<128> : vector<2xi64>>, #dlti.dl_entry<"dlti.endianness", "little">, #dlti.dl_entry<"dlti.stack_alignment", 128 : i64>>, llvm.data_layout = "e-m:e-p270:32:32-p271:32:32-p272:64:64-i64:64-i128:128-f80:128-n8:16:32:64-S128"} {
  cir.func private  @strlen(!cir.ptr<!s8i>) -> !u64i extra(#fn_attr) loc(#loc97)
  cir.func private  @printLine(!cir.ptr<!s8i>) loc(#loc98)
  cir.func private  @free(!cir.ptr<!void>) extra(#fn_attr) loc(#loc99)
  cir.func  @CWE122_Heap_Based_Buffer_Overflow__c_CWE806_char_loop_64b_badSink(%arg0: !cir.ptr<!void> loc(fused[#loc9, #loc10])) extra(#fn_attr1) {
    %0 = cir.alloca !cir.ptr<!void>, !cir.ptr<!cir.ptr<!void>>, ["dataVoidPtr", init] {alignment = 8 : i64} loc(#loc101)
    %1 = cir.alloca !cir.ptr<!cir.ptr<!s8i>>, !cir.ptr<!cir.ptr<!cir.ptr<!s8i>>>, ["dataPtr", init] {alignment = 8 : i64} loc(#loc102)
    %2 = cir.alloca !cir.ptr<!s8i>, !cir.ptr<!cir.ptr<!s8i>>, ["data", init] {alignment = 8 : i64} loc(#loc103)
    cir.store %arg0, %0 : !cir.ptr<!void>, !cir.ptr<!cir.ptr<!void>> loc(#loc15)
    %3 = cir.load %0 : !cir.ptr<!cir.ptr<!void>>, !cir.ptr<!void> loc(#loc12)
    %4 = cir.cast(bitcast, %3 : !cir.ptr<!void>), !cir.ptr<!cir.ptr<!s8i>> loc(#loc12)
    cir.store %4, %1 : !cir.ptr<!cir.ptr<!s8i>>, !cir.ptr<!cir.ptr<!cir.ptr<!s8i>>> loc(#loc102)
    %5 = cir.load deref %1 : !cir.ptr<!cir.ptr<!cir.ptr<!s8i>>>, !cir.ptr<!cir.ptr<!s8i>> loc(#loc16)
    %6 = cir.load %5 : !cir.ptr<!cir.ptr<!s8i>>, !cir.ptr<!s8i> loc(#loc17)
    cir.store %6, %2 : !cir.ptr<!s8i>, !cir.ptr<!cir.ptr<!s8i>> loc(#loc103)
    cir.scope {
      %7 = cir.alloca !cir.array<!s8i x 50>, !cir.ptr<!cir.array<!s8i x 50>>, ["dest"] {alignment = 16 : i64} loc(#loc105)
      %8 = cir.alloca !u64i, !cir.ptr<!u64i>, ["i"] {alignment = 8 : i64} loc(#loc106)
      %9 = cir.alloca !u64i, !cir.ptr<!u64i>, ["dataLen"] {alignment = 8 : i64} loc(#loc107)
      %10 = cir.const #cir.zero : !cir.array<!s8i x 50> loc(#loc105)
      cir.store %10, %7 : !cir.array<!s8i x 50>, !cir.ptr<!cir.array<!s8i x 50>> loc(#loc105)
      %11 = cir.get_global @strlen : !cir.ptr<!cir.func<!u64i (!cir.ptr<!s8i>)>> loc(#loc25)
      %12 = cir.load %2 : !cir.ptr<!cir.ptr<!s8i>>, !cir.ptr<!s8i> loc(#loc26)
      %13 = cir.call @strlen(%12) : (!cir.ptr<!s8i>) -> !u64i extra(#fn_attr) loc(#loc25)
      cir.store %13, %9 : !u64i, !cir.ptr<!u64i> loc(#loc108)
      cir.scope {
        %25 = cir.const #cir.int<0> : !s32i loc(#loc31)
        %26 = cir.cast(integral, %25 : !s32i), !u64i loc(#loc31)
        cir.store %26, %8 : !u64i, !cir.ptr<!u64i> loc(#loc110)
        cir.for : cond {
          %27 = cir.load %8 : !cir.ptr<!u64i>, !u64i loc(#loc33)
          %28 = cir.load %9 : !cir.ptr<!u64i>, !u64i loc(#loc34)
          %29 = cir.cmp(lt, %27, %28) : !u64i, !s32i loc(#loc111)
          %30 = cir.cast(int_to_bool, %29 : !s32i), !cir.bool loc(#loc35)
          cir.condition(%30) loc(#loc35)
        } body {
          cir.scope {
            %27 = cir.load %2 : !cir.ptr<!cir.ptr<!s8i>>, !cir.ptr<!s8i> loc(#loc37)
            %28 = cir.load %8 : !cir.ptr<!u64i>, !u64i loc(#loc38)
            %29 = cir.ptr_stride(%27 : !cir.ptr<!s8i>, %28 : !u64i), !cir.ptr<!s8i> loc(#loc39)
            %30 = cir.load %29 : !cir.ptr<!s8i>, !s8i loc(#loc37)
            %31 = cir.load %8 : !cir.ptr<!u64i>, !u64i loc(#loc40)
            %32 = cir.cast(array_to_ptrdecay, %7 : !cir.ptr<!cir.array<!s8i x 50>>), !cir.ptr<!s8i> loc(#loc41)
            %33 = cir.ptr_stride(%32 : !cir.ptr<!s8i>, %31 : !u64i), !cir.ptr<!s8i> loc(#loc41)
            cir.store %30, %33 : !s8i, !cir.ptr<!s8i> loc(#loc113)
          } loc(#loc112)
          cir.yield loc(#loc30)
        } step {
          %27 = cir.load %8 : !cir.ptr<!u64i>, !u64i loc(#loc42)
          %28 = cir.unary(inc, %27) : !u64i, !u64i loc(#loc43)
          cir.store %28, %8 : !u64i, !cir.ptr<!u64i> loc(#loc114)
          cir.yield loc(#loc109)
        } loc(#loc109)
      } loc(#loc109)
      %14 = cir.const #cir.int<0> : !s32i loc(#loc44)
      %15 = cir.cast(integral, %14 : !s32i), !s8i loc(#loc44)
      %16 = cir.const #cir.int<50> : !s32i loc(#loc45)
      %17 = cir.const #cir.int<1> : !s32i loc(#loc46)
      %18 = cir.binop(sub, %16, %17) nsw : !s32i loc(#loc45)
      %19 = cir.cast(array_to_ptrdecay, %7 : !cir.ptr<!cir.array<!s8i x 50>>), !cir.ptr<!s8i> loc(#loc47)
      %20 = cir.ptr_stride(%19 : !cir.ptr<!s8i>, %18 : !s32i), !cir.ptr<!s8i> loc(#loc47)
      cir.store %15, %20 : !s8i, !cir.ptr<!s8i> loc(#loc115)
      %21 = cir.load %2 : !cir.ptr<!cir.ptr<!s8i>>, !cir.ptr<!s8i> loc(#loc48)
      cir.call @printLine(%21) : (!cir.ptr<!s8i>) -> () loc(#loc49)
      %22 = cir.get_global @free : !cir.ptr<!cir.func<!void (!cir.ptr<!void>)>> loc(#loc50)
      %23 = cir.load %2 : !cir.ptr<!cir.ptr<!s8i>>, !cir.ptr<!s8i> loc(#loc51)
      %24 = cir.cast(bitcast, %23 : !cir.ptr<!s8i>), !cir.ptr<!void> loc(#loc51)
      cir.call @free(%24) : (!cir.ptr<!void>) -> () extra(#fn_attr) loc(#loc50)
    } loc(#loc104)
    cir.return loc(#loc8)
  } loc(#loc100)
  cir.func  @CWE122_Heap_Based_Buffer_Overflow__c_CWE806_char_loop_64b_goodG2BSink(%arg0: !cir.ptr<!void> loc(fused[#loc54, #loc55])) extra(#fn_attr1) {
    %0 = cir.alloca !cir.ptr<!void>, !cir.ptr<!cir.ptr<!void>>, ["dataVoidPtr", init] {alignment = 8 : i64} loc(#loc117)
    %1 = cir.alloca !cir.ptr<!cir.ptr<!s8i>>, !cir.ptr<!cir.ptr<!cir.ptr<!s8i>>>, ["dataPtr", init] {alignment = 8 : i64} loc(#loc118)
    %2 = cir.alloca !cir.ptr<!s8i>, !cir.ptr<!cir.ptr<!s8i>>, ["data", init] {alignment = 8 : i64} loc(#loc119)
    cir.store %arg0, %0 : !cir.ptr<!void>, !cir.ptr<!cir.ptr<!void>> loc(#loc60)
    %3 = cir.load %0 : !cir.ptr<!cir.ptr<!void>>, !cir.ptr<!void> loc(#loc57)
    %4 = cir.cast(bitcast, %3 : !cir.ptr<!void>), !cir.ptr<!cir.ptr<!s8i>> loc(#loc57)
    cir.store %4, %1 : !cir.ptr<!cir.ptr<!s8i>>, !cir.ptr<!cir.ptr<!cir.ptr<!s8i>>> loc(#loc118)
    %5 = cir.load deref %1 : !cir.ptr<!cir.ptr<!cir.ptr<!s8i>>>, !cir.ptr<!cir.ptr<!s8i>> loc(#loc61)
    %6 = cir.load %5 : !cir.ptr<!cir.ptr<!s8i>>, !cir.ptr<!s8i> loc(#loc62)
    cir.store %6, %2 : !cir.ptr<!s8i>, !cir.ptr<!cir.ptr<!s8i>> loc(#loc119)
    cir.scope {
      %7 = cir.alloca !cir.array<!s8i x 50>, !cir.ptr<!cir.array<!s8i x 50>>, ["dest"] {alignment = 16 : i64} loc(#loc121)
      %8 = cir.alloca !u64i, !cir.ptr<!u64i>, ["i"] {alignment = 8 : i64} loc(#loc122)
      %9 = cir.alloca !u64i, !cir.ptr<!u64i>, ["dataLen"] {alignment = 8 : i64} loc(#loc123)
      %10 = cir.const #cir.zero : !cir.array<!s8i x 50> loc(#loc121)
      cir.store %10, %7 : !cir.array<!s8i x 50>, !cir.ptr<!cir.array<!s8i x 50>> loc(#loc121)
      %11 = cir.get_global @strlen : !cir.ptr<!cir.func<!u64i (!cir.ptr<!s8i>)>> loc(#loc70)
      %12 = cir.load %2 : !cir.ptr<!cir.ptr<!s8i>>, !cir.ptr<!s8i> loc(#loc71)
      %13 = cir.call @strlen(%12) : (!cir.ptr<!s8i>) -> !u64i extra(#fn_attr) loc(#loc70)
      cir.store %13, %9 : !u64i, !cir.ptr<!u64i> loc(#loc124)
      cir.scope {
        %25 = cir.const #cir.int<0> : !s32i loc(#loc76)
        %26 = cir.cast(integral, %25 : !s32i), !u64i loc(#loc76)
        cir.store %26, %8 : !u64i, !cir.ptr<!u64i> loc(#loc126)
        cir.for : cond {
          %27 = cir.load %8 : !cir.ptr<!u64i>, !u64i loc(#loc78)
          %28 = cir.load %9 : !cir.ptr<!u64i>, !u64i loc(#loc79)
          %29 = cir.cmp(lt, %27, %28) : !u64i, !s32i loc(#loc127)
          %30 = cir.cast(int_to_bool, %29 : !s32i), !cir.bool loc(#loc80)
          cir.condition(%30) loc(#loc80)
        } body {
          cir.scope {
            %27 = cir.load %2 : !cir.ptr<!cir.ptr<!s8i>>, !cir.ptr<!s8i> loc(#loc82)
            %28 = cir.load %8 : !cir.ptr<!u64i>, !u64i loc(#loc83)
            %29 = cir.ptr_stride(%27 : !cir.ptr<!s8i>, %28 : !u64i), !cir.ptr<!s8i> loc(#loc84)
            %30 = cir.load %29 : !cir.ptr<!s8i>, !s8i loc(#loc82)
            %31 = cir.load %8 : !cir.ptr<!u64i>, !u64i loc(#loc85)
            %32 = cir.cast(array_to_ptrdecay, %7 : !cir.ptr<!cir.array<!s8i x 50>>), !cir.ptr<!s8i> loc(#loc86)
            %33 = cir.ptr_stride(%32 : !cir.ptr<!s8i>, %31 : !u64i), !cir.ptr<!s8i> loc(#loc86)
            cir.store %30, %33 : !s8i, !cir.ptr<!s8i> loc(#loc129)
          } loc(#loc128)
          cir.yield loc(#loc75)
        } step {
          %27 = cir.load %8 : !cir.ptr<!u64i>, !u64i loc(#loc87)
          %28 = cir.unary(inc, %27) : !u64i, !u64i loc(#loc88)
          cir.store %28, %8 : !u64i, !cir.ptr<!u64i> loc(#loc130)
          cir.yield loc(#loc125)
        } loc(#loc125)
      } loc(#loc125)
      %14 = cir.const #cir.int<0> : !s32i loc(#loc89)
      %15 = cir.cast(integral, %14 : !s32i), !s8i loc(#loc89)
      %16 = cir.const #cir.int<50> : !s32i loc(#loc90)
      %17 = cir.const #cir.int<1> : !s32i loc(#loc91)
      %18 = cir.binop(sub, %16, %17) nsw : !s32i loc(#loc90)
      %19 = cir.cast(array_to_ptrdecay, %7 : !cir.ptr<!cir.array<!s8i x 50>>), !cir.ptr<!s8i> loc(#loc92)
      %20 = cir.ptr_stride(%19 : !cir.ptr<!s8i>, %18 : !s32i), !cir.ptr<!s8i> loc(#loc92)
      cir.store %15, %20 : !s8i, !cir.ptr<!s8i> loc(#loc131)
      %21 = cir.load %2 : !cir.ptr<!cir.ptr<!s8i>>, !cir.ptr<!s8i> loc(#loc93)
      cir.call @printLine(%21) : (!cir.ptr<!s8i>) -> () loc(#loc94)
      %22 = cir.get_global @free : !cir.ptr<!cir.func<!void (!cir.ptr<!void>)>> loc(#loc95)
      %23 = cir.load %2 : !cir.ptr<!cir.ptr<!s8i>>, !cir.ptr<!s8i> loc(#loc96)
      %24 = cir.cast(bitcast, %23 : !cir.ptr<!s8i>), !cir.ptr<!void> loc(#loc96)
      cir.call @free(%24) : (!cir.ptr<!void>) -> () extra(#fn_attr) loc(#loc95)
    } loc(#loc120)
    cir.return loc(#loc53)
  } loc(#loc116)
} loc(#loc)
#loc = loc("/home/ladisgin/git_proj/test_projects/juliet-c/testcases/CWE122_Heap_Based_Buffer_Overflow/s09/CWE122_Heap_Based_Buffer_Overflow__c_CWE806_char_loop_64b.c":0:0)
#loc1 = loc("/usr/include/string.h":407:1)
#loc2 = loc("/usr/include/string.h":408:33)
#loc3 = loc("../../../testcasesupport/std_testcase_io.h":14:1)
#loc4 = loc("../../../testcasesupport/std_testcase_io.h":14:33)
#loc5 = loc("/usr/include/stdlib.h":687:1)
#loc6 = loc("/usr/include/stdlib.h":687:32)
#loc7 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE806_char_loop_64b.c":23:1)
#loc8 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE806_char_loop_64b.c":42:1)
#loc11 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE806_char_loop_64b.c":26:5)
#loc12 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE806_char_loop_64b.c":26:34)
#loc13 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE806_char_loop_64b.c":28:5)
#loc14 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE806_char_loop_64b.c":28:28)
#loc15 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE806_char_loop_64b.c":24:1)
#loc16 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE806_char_loop_64b.c":28:21)
#loc17 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE806_char_loop_64b.c":28:20)
#loc18 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE806_char_loop_64b.c":29:5)
#loc19 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE806_char_loop_64b.c":41:5)
#loc20 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE806_char_loop_64b.c":30:9)
#loc21 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE806_char_loop_64b.c":30:25)
#loc22 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE806_char_loop_64b.c":31:9)
#loc23 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE806_char_loop_64b.c":31:16)
#loc24 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE806_char_loop_64b.c":31:19)
#loc25 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE806_char_loop_64b.c":32:19)
#loc26 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE806_char_loop_64b.c":32:26)
#loc27 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE806_char_loop_64b.c":32:9)
#loc28 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE806_char_loop_64b.c":32:30)
#loc29 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE806_char_loop_64b.c":34:9)
#loc30 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE806_char_loop_64b.c":37:9)
#loc31 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE806_char_loop_64b.c":34:18)
#loc32 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE806_char_loop_64b.c":34:14)
#loc33 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE806_char_loop_64b.c":34:21)
#loc34 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE806_char_loop_64b.c":34:25)
#loc35 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE806_char_loop_64b.c":34:23)
#loc36 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE806_char_loop_64b.c":35:9)
#loc37 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE806_char_loop_64b.c":36:23)
#loc38 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE806_char_loop_64b.c":36:28)
#loc39 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE806_char_loop_64b.c":36:29)
#loc40 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE806_char_loop_64b.c":36:18)
#loc41 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE806_char_loop_64b.c":36:13)
#loc42 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE806_char_loop_64b.c":34:35)
#loc43 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE806_char_loop_64b.c":34:34)
#loc44 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE806_char_loop_64b.c":38:22)
#loc45 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE806_char_loop_64b.c":38:14)
#loc46 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE806_char_loop_64b.c":38:17)
#loc47 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE806_char_loop_64b.c":38:9)
#loc48 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE806_char_loop_64b.c":39:19)
#loc49 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE806_char_loop_64b.c":39:9)
#loc50 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE806_char_loop_64b.c":40:9)
#loc51 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE806_char_loop_64b.c":40:14)
#loc52 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE806_char_loop_64b.c":49:1)
#loc53 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE806_char_loop_64b.c":68:1)
#loc56 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE806_char_loop_64b.c":52:5)
#loc57 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE806_char_loop_64b.c":52:34)
#loc58 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE806_char_loop_64b.c":54:5)
#loc59 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE806_char_loop_64b.c":54:28)
#loc60 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE806_char_loop_64b.c":50:1)
#loc61 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE806_char_loop_64b.c":54:21)
#loc62 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE806_char_loop_64b.c":54:20)
#loc63 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE806_char_loop_64b.c":55:5)
#loc64 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE806_char_loop_64b.c":67:5)
#loc65 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE806_char_loop_64b.c":56:9)
#loc66 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE806_char_loop_64b.c":56:25)
#loc67 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE806_char_loop_64b.c":57:9)
#loc68 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE806_char_loop_64b.c":57:16)
#loc69 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE806_char_loop_64b.c":57:19)
#loc70 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE806_char_loop_64b.c":58:19)
#loc71 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE806_char_loop_64b.c":58:26)
#loc72 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE806_char_loop_64b.c":58:9)
#loc73 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE806_char_loop_64b.c":58:30)
#loc74 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE806_char_loop_64b.c":60:9)
#loc75 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE806_char_loop_64b.c":63:9)
#loc76 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE806_char_loop_64b.c":60:18)
#loc77 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE806_char_loop_64b.c":60:14)
#loc78 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE806_char_loop_64b.c":60:21)
#loc79 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE806_char_loop_64b.c":60:25)
#loc80 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE806_char_loop_64b.c":60:23)
#loc81 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE806_char_loop_64b.c":61:9)
#loc82 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE806_char_loop_64b.c":62:23)
#loc83 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE806_char_loop_64b.c":62:28)
#loc84 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE806_char_loop_64b.c":62:29)
#loc85 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE806_char_loop_64b.c":62:18)
#loc86 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE806_char_loop_64b.c":62:13)
#loc87 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE806_char_loop_64b.c":60:35)
#loc88 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE806_char_loop_64b.c":60:34)
#loc89 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE806_char_loop_64b.c":64:22)
#loc90 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE806_char_loop_64b.c":64:14)
#loc91 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE806_char_loop_64b.c":64:17)
#loc92 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE806_char_loop_64b.c":64:9)
#loc93 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE806_char_loop_64b.c":65:19)
#loc94 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE806_char_loop_64b.c":65:9)
#loc95 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE806_char_loop_64b.c":66:9)
#loc96 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE806_char_loop_64b.c":66:14)
#loc97 = loc(fused[#loc1, #loc2])
#loc98 = loc(fused[#loc3, #loc4])
#loc99 = loc(fused[#loc5, #loc6])
#loc100 = loc(fused[#loc7, #loc8])
#loc102 = loc(fused[#loc11, #loc12])
#loc103 = loc(fused[#loc13, #loc14])
#loc104 = loc(fused[#loc18, #loc19])
#loc105 = loc(fused[#loc20, #loc21])
#loc106 = loc(fused[#loc22, #loc23])
#loc107 = loc(fused[#loc22, #loc24])
#loc108 = loc(fused[#loc27, #loc28])
#loc109 = loc(fused[#loc29, #loc30])
#loc110 = loc(fused[#loc32, #loc31])
#loc111 = loc(fused[#loc33, #loc34])
#loc112 = loc(fused[#loc36, #loc30])
#loc113 = loc(fused[#loc41, #loc39])
#loc114 = loc(fused[#loc43, #loc42])
#loc115 = loc(fused[#loc47, #loc44])
#loc116 = loc(fused[#loc52, #loc53])
#loc118 = loc(fused[#loc56, #loc57])
#loc119 = loc(fused[#loc58, #loc59])
#loc120 = loc(fused[#loc63, #loc64])
#loc121 = loc(fused[#loc65, #loc66])
#loc122 = loc(fused[#loc67, #loc68])
#loc123 = loc(fused[#loc67, #loc69])
#loc124 = loc(fused[#loc72, #loc73])
#loc125 = loc(fused[#loc74, #loc75])
#loc126 = loc(fused[#loc77, #loc76])
#loc127 = loc(fused[#loc78, #loc79])
#loc128 = loc(fused[#loc81, #loc75])
#loc129 = loc(fused[#loc86, #loc84])
#loc130 = loc(fused[#loc88, #loc87])
#loc131 = loc(fused[#loc92, #loc89])
