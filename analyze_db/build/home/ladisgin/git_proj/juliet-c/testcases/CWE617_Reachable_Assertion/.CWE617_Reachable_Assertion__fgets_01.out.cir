!s32i = !cir.int<s, 32>
!s64i = !cir.int<s, 64>
!s8i = !cir.int<s, 8>
!ty__IO_codecvt = !cir.struct<struct "_IO_codecvt" incomplete>
!ty__IO_marker = !cir.struct<struct "_IO_marker" incomplete>
!ty__IO_wide_data = !cir.struct<struct "_IO_wide_data" incomplete>
!u16i = !cir.int<u, 16>
!u32i = !cir.int<u, 32>
!u64i = !cir.int<u, 64>
!void = !cir.void
#fn_attr = #cir<extra({nothrow = #cir.nothrow})>
#fn_attr1 = #cir<extra({inline = #cir.inline<no>, nothrow = #cir.nothrow, optnone = #cir.optnone})>
#loc53 = loc("CWE617_Reachable_Assertion__fgets_01.c":80:10)
#loc54 = loc("CWE617_Reachable_Assertion__fgets_01.c":80:14)
#loc55 = loc("CWE617_Reachable_Assertion__fgets_01.c":80:20)
#loc56 = loc("CWE617_Reachable_Assertion__fgets_01.c":80:32)
#loc101 = loc(fused[#loc53, #loc54])
#loc102 = loc(fused[#loc55, #loc56])
!ty__IO_FILE = !cir.struct<struct "_IO_FILE" {!s32i, !cir.ptr<!s8i>, !cir.ptr<!s8i>, !cir.ptr<!s8i>, !cir.ptr<!s8i>, !cir.ptr<!s8i>, !cir.ptr<!s8i>, !cir.ptr<!s8i>, !cir.ptr<!s8i>, !cir.ptr<!s8i>, !cir.ptr<!s8i>, !cir.ptr<!s8i>, !cir.ptr<!ty__IO_marker>, !cir.ptr<!cir.struct<struct "_IO_FILE">>, !s32i, !s32i, !s64i, !u16i, !s8i, !cir.array<!s8i x 1>, !cir.ptr<!void>, !s64i, !cir.ptr<!ty__IO_codecvt>, !cir.ptr<!ty__IO_wide_data>, !cir.ptr<!cir.struct<struct "_IO_FILE">>, !cir.ptr<!void>, !cir.ptr<!cir.ptr<!cir.struct<struct "_IO_FILE">>>, !s32i, !cir.array<!s8i x 20>} #cir.record.decl.ast>
module @"/home/ladisgin/git_proj/juliet-c/testcases/CWE617_Reachable_Assertion/CWE617_Reachable_Assertion__fgets_01.c" attributes {cir.lang = #cir.lang<c>, cir.sob = #cir.signed_overflow_behavior<undefined>, cir.triple = "x86_64-unknown-linux-gnu", dlti.dl_spec = #dlti.dl_spec<f80 = dense<128> : vector<2xi64>, i128 = dense<128> : vector<2xi64>, i64 = dense<64> : vector<2xi64>, !llvm.ptr<272> = dense<64> : vector<4xi64>, !llvm.ptr<271> = dense<32> : vector<4xi64>, f128 = dense<128> : vector<2xi64>, f16 = dense<16> : vector<2xi64>, !llvm.ptr<270> = dense<32> : vector<4xi64>, f64 = dense<64> : vector<2xi64>, i32 = dense<32> : vector<2xi64>, i16 = dense<16> : vector<2xi64>, i8 = dense<8> : vector<2xi64>, !llvm.ptr = dense<64> : vector<4xi64>, i1 = dense<8> : vector<2xi64>, "dlti.stack_alignment" = 128 : i64, "dlti.endianness" = "little">} {
  cir.func private @fgets(!cir.ptr<!s8i>, !s32i, !cir.ptr<!ty__IO_FILE>) -> !cir.ptr<!s8i> loc(#loc82)
  cir.global "private" external @stdin : !cir.ptr<!ty__IO_FILE> {alignment = 8 : i64} loc(#loc83)
  cir.func private @atoi(!cir.ptr<!s8i>) -> !s32i extra(#fn_attr) loc(#loc84)
  cir.func private @printLine(!cir.ptr<!s8i>) loc(#loc85)
  cir.global "private" constant cir_private dsolocal @".str" = #cir.const_array<"fgets() failed.\00" : !cir.array<!s8i x 16>> : !cir.array<!s8i x 16> {alignment = 1 : i64} loc(#loc9)
  cir.func private @__assert_fail(!cir.ptr<!s8i>, !cir.ptr<!s8i>, !u32i, !cir.ptr<!s8i>) extra(#fn_attr) loc(#loc86)
  cir.global "private" constant cir_private dsolocal @".str.1" = #cir.const_array<"data > ASSERT_VALUE\00" : !cir.array<!s8i x 20>> : !cir.array<!s8i x 20> {alignment = 1 : i64} loc(#loc12)
  cir.global "private" constant cir_private dsolocal @".str.2" = #cir.const_array<"CWE617_Reachable_Assertion__fgets_01.c\00" : !cir.array<!s8i x 39>> : !cir.array<!s8i x 39> {alignment = 1 : i64} loc(#loc12)
  cir.global "private" constant cir_private dsolocal @".str.3" = #cir.const_array<"void CWE617_Reachable_Assertion__fgets_01_bad()\00" : !cir.array<!s8i x 48>> : !cir.array<!s8i x 48> {alignment = 1 : i64} loc(#loc12)
  cir.func no_proto @CWE617_Reachable_Assertion__fgets_01_bad() extra(#fn_attr1) {
    %0 = cir.alloca !s32i, !cir.ptr<!s32i>, ["data"] {alignment = 4 : i64} loc(#loc88)
    %1 = cir.const #cir.int<1> : !s32i loc(#loc17)
    %2 = cir.unary(minus, %1) : !s32i, !s32i loc(#loc18)
    cir.store %2, %0 : !s32i, !cir.ptr<!s32i> loc(#loc89)
    cir.scope {
      %4 = cir.alloca !cir.array<!s8i x 14>, !cir.ptr<!cir.array<!s8i x 14>>, ["inputBuffer"] {alignment = 1 : i64} loc(#loc91)
      %5 = cir.const #cir.zero : !cir.array<!s8i x 14> loc(#loc91)
      cir.store %5, %4 : !cir.array<!s8i x 14>, !cir.ptr<!cir.array<!s8i x 14>> loc(#loc91)
      cir.scope {
        %6 = cir.cast(array_to_ptrdecay, %4 : !cir.ptr<!cir.array<!s8i x 14>>), !cir.ptr<!s8i> loc(#loc26)
        %7 = cir.const #cir.int<3> : !s32i loc(#loc27)
        %8 = cir.cast(integral, %7 : !s32i), !u64i loc(#loc27)
        %9 = cir.const #cir.int<4> : !u64i loc(#loc27)
        %10 = cir.binop(mul, %8, %9) : !u64i loc(#loc27)
        %11 = cir.const #cir.int<2> : !s32i loc(#loc27)
        %12 = cir.cast(integral, %11 : !s32i), !u64i loc(#loc27)
        %13 = cir.binop(add, %10, %12) : !u64i loc(#loc27)
        %14 = cir.cast(integral, %13 : !u64i), !s32i loc(#loc27)
        %15 = cir.get_global @stdin : !cir.ptr<!cir.ptr<!ty__IO_FILE>> loc(#loc83)
        %16 = cir.load %15 : !cir.ptr<!cir.ptr<!ty__IO_FILE>>, !cir.ptr<!ty__IO_FILE> loc(#loc28)
        %17 = cir.call @fgets(%6, %14, %16) : (!cir.ptr<!s8i>, !s32i, !cir.ptr<!ty__IO_FILE>) -> !cir.ptr<!s8i> loc(#loc29)
        %18 = cir.const #cir.ptr<null> : !cir.ptr<!void> loc(#loc30)
        %19 = cir.cast(bitcast, %18 : !cir.ptr<!void>), !cir.ptr<!s8i> loc(#loc30)
        %20 = cir.cmp(ne, %17, %19) : !cir.ptr<!s8i>, !cir.bool loc(#loc93)
        cir.if %20 {
          %21 = cir.cast(array_to_ptrdecay, %4 : !cir.ptr<!cir.array<!s8i x 14>>), !cir.ptr<!s8i> loc(#loc34)
          %22 = cir.call @atoi(%21) : (!cir.ptr<!s8i>) -> !s32i extra(#fn_attr) loc(#loc35)
          cir.store %22, %0 : !s32i, !cir.ptr<!s32i> loc(#loc95)
        } else {
          %21 = cir.get_global @".str" : !cir.ptr<!cir.array<!s8i x 16>> loc(#loc9)
          %22 = cir.cast(array_to_ptrdecay, %21 : !cir.ptr<!cir.array<!s8i x 16>>), !cir.ptr<!s8i> loc(#loc9)
          cir.call @printLine(%22) : (!cir.ptr<!s8i>) -> () loc(#loc38)
        } loc(#loc94)
      } loc(#loc92)
    } loc(#loc90)
    %3 = cir.const #cir.int<4> : !u64i loc(#loc12)
    cir.scope {
      cir.scope {
        %4 = cir.load %0 : !cir.ptr<!s32i>, !s32i loc(#loc12)
        %5 = cir.const #cir.int<5> : !s32i loc(#loc12)
        %6 = cir.cmp(gt, %4, %5) : !s32i, !cir.bool loc(#loc12)
        cir.if %6 {
        } else {
          %7 = cir.get_global @".str.1" : !cir.ptr<!cir.array<!s8i x 20>> loc(#loc12)
          %8 = cir.cast(array_to_ptrdecay, %7 : !cir.ptr<!cir.array<!s8i x 20>>), !cir.ptr<!s8i> loc(#loc12)
          %9 = cir.get_global @".str.2" : !cir.ptr<!cir.array<!s8i x 39>> loc(#loc12)
          %10 = cir.cast(array_to_ptrdecay, %9 : !cir.ptr<!cir.array<!s8i x 39>>), !cir.ptr<!s8i> loc(#loc12)
          %11 = cir.const #cir.int<46> : !s32i loc(#loc12)
          %12 = cir.cast(integral, %11 : !s32i), !u32i loc(#loc12)
          %13 = cir.get_global @".str.3" : !cir.ptr<!cir.array<!s8i x 48>> loc(#loc12)
          %14 = cir.cast(array_to_ptrdecay, %13 : !cir.ptr<!cir.array<!s8i x 48>>), !cir.ptr<!s8i> loc(#loc12)
          cir.call @__assert_fail(%8, %10, %12, %14) : (!cir.ptr<!s8i>, !cir.ptr<!s8i>, !u32i, !cir.ptr<!s8i>) -> () extra(#fn_attr) loc(#loc12)
        } loc(#loc12)
      } loc(#loc12)
    } loc(#loc12)
    cir.return loc(#loc14)
  } loc(#loc87)
  cir.func no_proto @CWE617_Reachable_Assertion__fgets_01_good() extra(#fn_attr1) {
    %0 = cir.get_global @goodG2B : !cir.ptr<!cir.func<!void ()>> loc(#loc97)
    cir.call %0() : (!cir.ptr<!cir.func<!void ()>>) -> () loc(#loc41)
    cir.return loc(#loc40)
  } loc(#loc96)
  cir.func private @srand(!u32i) extra(#fn_attr) loc(#loc98)
  cir.func private @time(!cir.ptr<!s64i>) -> !s64i extra(#fn_attr) loc(#loc99)
  cir.global "private" constant cir_private dsolocal @".str.4" = #cir.const_array<"Calling good()...\00" : !cir.array<!s8i x 18>> : !cir.array<!s8i x 18> {alignment = 1 : i64} loc(#loc47)
  cir.global "private" constant cir_private dsolocal @".str.5" = #cir.const_array<"Finished good()\00" : !cir.array<!s8i x 16>> : !cir.array<!s8i x 16> {alignment = 1 : i64} loc(#loc48)
  cir.global "private" constant cir_private dsolocal @".str.6" = #cir.const_array<"Calling bad()...\00" : !cir.array<!s8i x 17>> : !cir.array<!s8i x 17> {alignment = 1 : i64} loc(#loc49)
  cir.global "private" constant cir_private dsolocal @".str.7" = #cir.const_array<"Finished bad()\00" : !cir.array<!s8i x 15>> : !cir.array<!s8i x 15> {alignment = 1 : i64} loc(#loc50)
  cir.func @main(%arg0: !s32i loc(fused[#loc53, #loc54]), %arg1: !cir.ptr<!cir.ptr<!s8i>> loc(fused[#loc55, #loc56])) -> !s32i extra(#fn_attr1) {
    %0 = cir.alloca !s32i, !cir.ptr<!s32i>, ["argc", init] {alignment = 4 : i64} loc(#loc101)
    %1 = cir.alloca !cir.ptr<!cir.ptr<!s8i>>, !cir.ptr<!cir.ptr<!cir.ptr<!s8i>>>, ["argv", init] {alignment = 8 : i64} loc(#loc102)
    %2 = cir.alloca !s32i, !cir.ptr<!s32i>, ["__retval"] {alignment = 4 : i64} loc(#loc52)
    cir.store %arg0, %0 : !s32i, !cir.ptr<!s32i> loc(#loc57)
    cir.store %arg1, %1 : !cir.ptr<!cir.ptr<!s8i>>, !cir.ptr<!cir.ptr<!cir.ptr<!s8i>>> loc(#loc57)
    %3 = cir.const #cir.ptr<null> : !cir.ptr<!s64i> loc(#loc58)
    %4 = cir.call @time(%3) : (!cir.ptr<!s64i>) -> !s64i extra(#fn_attr) loc(#loc59)
    %5 = cir.cast(integral, %4 : !s64i), !u32i loc(#loc59)
    cir.call @srand(%5) : (!u32i) -> () extra(#fn_attr) loc(#loc60)
    %6 = cir.get_global @".str.4" : !cir.ptr<!cir.array<!s8i x 18>> loc(#loc47)
    %7 = cir.cast(array_to_ptrdecay, %6 : !cir.ptr<!cir.array<!s8i x 18>>), !cir.ptr<!s8i> loc(#loc47)
    cir.call @printLine(%7) : (!cir.ptr<!s8i>) -> () loc(#loc61)
    %8 = cir.get_global @CWE617_Reachable_Assertion__fgets_01_good : !cir.ptr<!cir.func<!void ()>> loc(#loc103)
    cir.call @CWE617_Reachable_Assertion__fgets_01_good() : () -> () loc(#loc62)
    %9 = cir.get_global @".str.5" : !cir.ptr<!cir.array<!s8i x 16>> loc(#loc48)
    %10 = cir.cast(array_to_ptrdecay, %9 : !cir.ptr<!cir.array<!s8i x 16>>), !cir.ptr<!s8i> loc(#loc48)
    cir.call @printLine(%10) : (!cir.ptr<!s8i>) -> () loc(#loc64)
    %11 = cir.get_global @".str.6" : !cir.ptr<!cir.array<!s8i x 17>> loc(#loc49)
    %12 = cir.cast(array_to_ptrdecay, %11 : !cir.ptr<!cir.array<!s8i x 17>>), !cir.ptr<!s8i> loc(#loc49)
    cir.call @printLine(%12) : (!cir.ptr<!s8i>) -> () loc(#loc65)
    %13 = cir.get_global @CWE617_Reachable_Assertion__fgets_01_bad : !cir.ptr<!cir.func<!void ()>> loc(#loc104)
    cir.call @CWE617_Reachable_Assertion__fgets_01_bad() : () -> () loc(#loc66)
    %14 = cir.get_global @".str.7" : !cir.ptr<!cir.array<!s8i x 15>> loc(#loc50)
    %15 = cir.cast(array_to_ptrdecay, %14 : !cir.ptr<!cir.array<!s8i x 15>>), !cir.ptr<!s8i> loc(#loc50)
    cir.call @printLine(%15) : (!cir.ptr<!s8i>) -> () loc(#loc68)
    %16 = cir.const #cir.int<0> : !s32i loc(#loc69)
    cir.store %16, %2 : !s32i, !cir.ptr<!s32i> loc(#loc105)
    %17 = cir.load %2 : !cir.ptr<!s32i>, !s32i loc(#loc105)
    cir.return %17 : !s32i loc(#loc105)
  } loc(#loc100)
  cir.global "private" constant cir_private dsolocal @".str.8" = #cir.const_array<"void goodG2B()\00" : !cir.array<!s8i x 15>> : !cir.array<!s8i x 15> {alignment = 1 : i64} loc(#loc71)
  cir.func no_proto internal private @goodG2B() extra(#fn_attr1) {
    %0 = cir.alloca !s32i, !cir.ptr<!s32i>, ["data"] {alignment = 4 : i64} loc(#loc107)
    %1 = cir.const #cir.int<1> : !s32i loc(#loc76)
    %2 = cir.unary(minus, %1) : !s32i, !s32i loc(#loc77)
    cir.store %2, %0 : !s32i, !cir.ptr<!s32i> loc(#loc108)
    %3 = cir.const #cir.int<5> : !s32i loc(#loc79)
    %4 = cir.const #cir.int<1> : !s32i loc(#loc80)
    %5 = cir.binop(add, %3, %4) nsw : !s32i loc(#loc79)
    cir.store %5, %0 : !s32i, !cir.ptr<!s32i> loc(#loc109)
    %6 = cir.const #cir.int<4> : !u64i loc(#loc71)
    cir.scope {
      cir.scope {
        %7 = cir.load %0 : !cir.ptr<!s32i>, !s32i loc(#loc71)
        %8 = cir.const #cir.int<5> : !s32i loc(#loc71)
        %9 = cir.cmp(gt, %7, %8) : !s32i, !cir.bool loc(#loc71)
        cir.if %9 {
        } else {
          %10 = cir.get_global @".str.1" : !cir.ptr<!cir.array<!s8i x 20>> loc(#loc71)
          %11 = cir.cast(array_to_ptrdecay, %10 : !cir.ptr<!cir.array<!s8i x 20>>), !cir.ptr<!s8i> loc(#loc71)
          %12 = cir.get_global @".str.2" : !cir.ptr<!cir.array<!s8i x 39>> loc(#loc71)
          %13 = cir.cast(array_to_ptrdecay, %12 : !cir.ptr<!cir.array<!s8i x 39>>), !cir.ptr<!s8i> loc(#loc71)
          %14 = cir.const #cir.int<62> : !s32i loc(#loc71)
          %15 = cir.cast(integral, %14 : !s32i), !u32i loc(#loc71)
          %16 = cir.get_global @".str.8" : !cir.ptr<!cir.array<!s8i x 15>> loc(#loc71)
          %17 = cir.cast(array_to_ptrdecay, %16 : !cir.ptr<!cir.array<!s8i x 15>>), !cir.ptr<!s8i> loc(#loc71)
          cir.call @__assert_fail(%11, %13, %15, %17) : (!cir.ptr<!s8i>, !cir.ptr<!s8i>, !u32i, !cir.ptr<!s8i>) -> () extra(#fn_attr) loc(#loc71)
        } loc(#loc71)
      } loc(#loc71)
    } loc(#loc71)
    cir.return loc(#loc73)
  } loc(#loc106)
} loc(#loc)
#loc = loc("/home/ladisgin/git_proj/juliet-c/testcases/CWE617_Reachable_Assertion/CWE617_Reachable_Assertion__fgets_01.c":0:0)
#loc1 = loc("/usr/include/stdio.h":654:1)
#loc2 = loc("/usr/include/stdio.h":655:59)
#loc3 = loc("/usr/include/stdio.h":149:1)
#loc4 = loc("/usr/include/stdio.h":149:14)
#loc5 = loc("/usr/include/stdlib.h":105:1)
#loc6 = loc("/usr/include/stdlib.h":106:33)
#loc7 = loc("../../testcasesupport/std_testcase_io.h":14:1)
#loc8 = loc("../../testcasesupport/std_testcase_io.h":14:33)
#loc9 = loc("CWE617_Reachable_Assertion__fgets_01.c":42:23)
#loc10 = loc("/usr/include/assert.h":67:1)
#loc11 = loc("/usr/include/assert.h":69:43)
#loc12 = loc("CWE617_Reachable_Assertion__fgets_01.c":46:5)
#loc13 = loc("CWE617_Reachable_Assertion__fgets_01.c":27:1)
#loc14 = loc("CWE617_Reachable_Assertion__fgets_01.c":47:1)
#loc15 = loc("CWE617_Reachable_Assertion__fgets_01.c":29:5)
#loc16 = loc("CWE617_Reachable_Assertion__fgets_01.c":29:9)
#loc17 = loc("CWE617_Reachable_Assertion__fgets_01.c":31:13)
#loc18 = loc("CWE617_Reachable_Assertion__fgets_01.c":31:12)
#loc19 = loc("CWE617_Reachable_Assertion__fgets_01.c":31:5)
#loc20 = loc("CWE617_Reachable_Assertion__fgets_01.c":32:5)
#loc21 = loc("CWE617_Reachable_Assertion__fgets_01.c":44:5)
#loc22 = loc("CWE617_Reachable_Assertion__fgets_01.c":33:9)
#loc23 = loc("CWE617_Reachable_Assertion__fgets_01.c":33:45)
#loc24 = loc("CWE617_Reachable_Assertion__fgets_01.c":35:9)
#loc25 = loc("CWE617_Reachable_Assertion__fgets_01.c":43:9)
#loc26 = loc("CWE617_Reachable_Assertion__fgets_01.c":35:19)
#loc27 = loc("CWE617_Reachable_Assertion__fgets_01.c":35:32)
#loc28 = loc("CWE617_Reachable_Assertion__fgets_01.c":35:49)
#loc29 = loc("CWE617_Reachable_Assertion__fgets_01.c":35:13)
#loc30 = loc("CWE617_Reachable_Assertion__fgets_01.c":35:59)
#loc31 = loc("CWE617_Reachable_Assertion__fgets_01.c":36:9)
#loc32 = loc("CWE617_Reachable_Assertion__fgets_01.c":39:9)
#loc33 = loc("CWE617_Reachable_Assertion__fgets_01.c":41:9)
#loc34 = loc("CWE617_Reachable_Assertion__fgets_01.c":38:25)
#loc35 = loc("CWE617_Reachable_Assertion__fgets_01.c":38:20)
#loc36 = loc("CWE617_Reachable_Assertion__fgets_01.c":38:13)
#loc37 = loc("CWE617_Reachable_Assertion__fgets_01.c":38:36)
#loc38 = loc("CWE617_Reachable_Assertion__fgets_01.c":42:13)
#loc39 = loc("CWE617_Reachable_Assertion__fgets_01.c":65:1)
#loc40 = loc("CWE617_Reachable_Assertion__fgets_01.c":68:1)
#loc41 = loc("CWE617_Reachable_Assertion__fgets_01.c":67:5)
#loc42 = loc("CWE617_Reachable_Assertion__fgets_01.c":67:13)
#loc43 = loc("/usr/include/stdlib.h":575:1)
#loc44 = loc("/usr/include/stdlib.h":575:41)
#loc45 = loc("/usr/include/time.h":76:1)
#loc46 = loc("/usr/include/time.h":76:38)
#loc47 = loc("CWE617_Reachable_Assertion__fgets_01.c":85:15)
#loc48 = loc("CWE617_Reachable_Assertion__fgets_01.c":87:15)
#loc49 = loc("CWE617_Reachable_Assertion__fgets_01.c":90:15)
#loc50 = loc("CWE617_Reachable_Assertion__fgets_01.c":92:15)
#loc51 = loc("CWE617_Reachable_Assertion__fgets_01.c":80:1)
#loc52 = loc("CWE617_Reachable_Assertion__fgets_01.c":95:1)
#loc57 = loc("CWE617_Reachable_Assertion__fgets_01.c":81:1)
#loc58 = loc("CWE617_Reachable_Assertion__fgets_01.c":83:27)
#loc59 = loc("CWE617_Reachable_Assertion__fgets_01.c":83:22)
#loc60 = loc("CWE617_Reachable_Assertion__fgets_01.c":83:5)
#loc61 = loc("CWE617_Reachable_Assertion__fgets_01.c":85:5)
#loc62 = loc("CWE617_Reachable_Assertion__fgets_01.c":86:5)
#loc63 = loc("CWE617_Reachable_Assertion__fgets_01.c":86:47)
#loc64 = loc("CWE617_Reachable_Assertion__fgets_01.c":87:5)
#loc65 = loc("CWE617_Reachable_Assertion__fgets_01.c":90:5)
#loc66 = loc("CWE617_Reachable_Assertion__fgets_01.c":91:5)
#loc67 = loc("CWE617_Reachable_Assertion__fgets_01.c":91:46)
#loc68 = loc("CWE617_Reachable_Assertion__fgets_01.c":92:5)
#loc69 = loc("CWE617_Reachable_Assertion__fgets_01.c":94:12)
#loc70 = loc("CWE617_Reachable_Assertion__fgets_01.c":94:5)
#loc71 = loc("CWE617_Reachable_Assertion__fgets_01.c":62:5)
#loc72 = loc("CWE617_Reachable_Assertion__fgets_01.c":54:1)
#loc73 = loc("CWE617_Reachable_Assertion__fgets_01.c":63:1)
#loc74 = loc("CWE617_Reachable_Assertion__fgets_01.c":56:5)
#loc75 = loc("CWE617_Reachable_Assertion__fgets_01.c":56:9)
#loc76 = loc("CWE617_Reachable_Assertion__fgets_01.c":58:13)
#loc77 = loc("CWE617_Reachable_Assertion__fgets_01.c":58:12)
#loc78 = loc("CWE617_Reachable_Assertion__fgets_01.c":58:5)
#loc79 = loc("CWE617_Reachable_Assertion__fgets_01.c":60:12)
#loc80 = loc("CWE617_Reachable_Assertion__fgets_01.c":60:25)
#loc81 = loc("CWE617_Reachable_Assertion__fgets_01.c":60:5)
#loc82 = loc(fused[#loc1, #loc2])
#loc83 = loc(fused[#loc3, #loc4])
#loc84 = loc(fused[#loc5, #loc6])
#loc85 = loc(fused[#loc7, #loc8])
#loc86 = loc(fused[#loc10, #loc11])
#loc87 = loc(fused[#loc13, #loc14])
#loc88 = loc(fused[#loc15, #loc16])
#loc89 = loc(fused[#loc19, #loc17])
#loc90 = loc(fused[#loc20, #loc21])
#loc91 = loc(fused[#loc22, #loc23])
#loc92 = loc(fused[#loc24, #loc25])
#loc93 = loc(fused[#loc29, #loc30])
#loc94 = loc(fused[#loc31, #loc32, #loc33, #loc25])
#loc95 = loc(fused[#loc36, #loc37])
#loc96 = loc(fused[#loc39, #loc40])
#loc97 = loc(fused[#loc41, #loc42])
#loc98 = loc(fused[#loc43, #loc44])
#loc99 = loc(fused[#loc45, #loc46])
#loc100 = loc(fused[#loc51, #loc52])
#loc103 = loc(fused[#loc62, #loc63])
#loc104 = loc(fused[#loc66, #loc67])
#loc105 = loc(fused[#loc70, #loc69])
#loc106 = loc(fused[#loc72, #loc73])
#loc107 = loc(fused[#loc74, #loc75])
#loc108 = loc(fused[#loc78, #loc76])
#loc109 = loc(fused[#loc81, #loc80])
