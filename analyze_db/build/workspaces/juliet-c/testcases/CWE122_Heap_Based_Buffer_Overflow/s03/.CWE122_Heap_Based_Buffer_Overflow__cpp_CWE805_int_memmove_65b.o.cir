!s32i = !cir.int<s, 32>
!u64i = !cir.int<u, 64>
!void = !cir.void
#fn_attr = #cir<extra({inline = #cir.inline<no>, optnone = #cir.optnone, uwtable = #cir.uwtable<async>})>
#loc5 = loc("CWE122_Heap_Based_Buffer_Overflow__cpp_CWE805_int_memmove_65b.cpp":24:14)
#loc6 = loc("CWE122_Heap_Based_Buffer_Overflow__cpp_CWE805_int_memmove_65b.cpp":24:20)
#loc26 = loc("CWE122_Heap_Based_Buffer_Overflow__cpp_CWE805_int_memmove_65b.cpp":40:18)
#loc27 = loc("CWE122_Heap_Based_Buffer_Overflow__cpp_CWE805_int_memmove_65b.cpp":40:24)
#loc47 = loc(fused[#loc5, #loc6])
#loc54 = loc(fused[#loc26, #loc27])
module @"/workspaces/juliet-c/testcases/CWE122_Heap_Based_Buffer_Overflow/s03/CWE122_Heap_Based_Buffer_Overflow__cpp_CWE805_int_memmove_65b.cpp" attributes {cir.lang = #cir.lang<cxx>, cir.sob = #cir.signed_overflow_behavior<undefined>, cir.triple = "x86_64-unknown-linux-gnu", cir.type_size_info = #cir.type_size_info<char = 8, int = 32, size_t = 64>, cir.uwtable = #cir.uwtable<async>, dlti.dl_spec = #dlti.dl_spec<f16 = dense<16> : vector<2xi64>, i32 = dense<32> : vector<2xi64>, i8 = dense<8> : vector<2xi64>, i16 = dense<16> : vector<2xi64>, !llvm.ptr<270> = dense<32> : vector<4xi64>, !llvm.ptr = dense<64> : vector<4xi64>, i1 = dense<8> : vector<2xi64>, f80 = dense<128> : vector<2xi64>, i128 = dense<128> : vector<2xi64>, i64 = dense<64> : vector<2xi64>, !llvm.ptr<272> = dense<64> : vector<4xi64>, !llvm.ptr<271> = dense<32> : vector<4xi64>, f128 = dense<128> : vector<2xi64>, f64 = dense<64> : vector<2xi64>, "dlti.stack_alignment" = 128 : i64, "dlti.mangling_mode" = "e", "dlti.endianness" = "little">} {
  cir.func private @printIntLine(!s32i) loc(#loc45)
  cir.func @_ZN60CWE122_Heap_Based_Buffer_Overflow__cpp_CWE805_int_memmove_657badSinkEPi(%arg0: !cir.ptr<!s32i> loc(fused[#loc5, #loc6])) extra(#fn_attr) {
    %0 = cir.alloca !cir.ptr<!s32i>, !cir.ptr<!cir.ptr<!s32i>>, ["data", init] {alignment = 8 : i64} loc(#loc47)
    cir.store %arg0, %0 : !cir.ptr<!s32i>, !cir.ptr<!cir.ptr<!s32i>> loc(#loc7)
    cir.scope {
      %1 = cir.alloca !cir.array<!s32i x 100>, !cir.ptr<!cir.array<!s32i x 100>>, ["source"] {alignment = 16 : i64} loc(#loc49)
      %2 = cir.const #cir.zero : !cir.array<!s32i x 100> loc(#loc49)
      cir.store %2, %1 : !cir.array<!s32i x 100>, !cir.ptr<!cir.array<!s32i x 100>> loc(#loc49)
      %3 = cir.load %0 : !cir.ptr<!cir.ptr<!s32i>>, !cir.ptr<!s32i> loc(#loc12)
      %4 = cir.cast(bitcast, %3 : !cir.ptr<!s32i>), !cir.ptr<!void> loc(#loc12)
      %5 = cir.cast(array_to_ptrdecay, %1 : !cir.ptr<!cir.array<!s32i x 100>>), !cir.ptr<!s32i> loc(#loc13)
      %6 = cir.cast(bitcast, %5 : !cir.ptr<!s32i>), !cir.ptr<!void> loc(#loc13)
      %7 = cir.const #cir.int<100> : !s32i loc(#loc14)
      %8 = cir.cast(integral, %7 : !s32i), !u64i loc(#loc14)
      %9 = cir.const #cir.int<4> : !u64i loc(#loc50)
      %10 = cir.binop(mul, %8, %9) : !u64i loc(#loc51)
      cir.libc.memmove %10 bytes from %6 to %4 : !cir.ptr<!void>, !u64i loc(#loc52)
      %11 = cir.load %0 : !cir.ptr<!cir.ptr<!s32i>>, !cir.ptr<!s32i> loc(#loc19)
      %12 = cir.const #cir.int<0> : !s32i loc(#loc20)
      %13 = cir.ptr_stride(%11 : !cir.ptr<!s32i>, %12 : !s32i), !cir.ptr<!s32i> loc(#loc21)
      %14 = cir.load %13 : !cir.ptr<!s32i>, !s32i loc(#loc19)
      cir.call @printIntLine(%14) : (!s32i) -> () loc(#loc22)
      %15 = cir.load %0 : !cir.ptr<!cir.ptr<!s32i>>, !cir.ptr<!s32i> loc(#loc23)
      cir.delete.array %15 : <!s32i> loc(#loc23)
    } loc(#loc48)
    cir.return loc(#loc4)
  } loc(#loc46)
  cir.func @_ZN60CWE122_Heap_Based_Buffer_Overflow__cpp_CWE805_int_memmove_6511goodG2BSinkEPi(%arg0: !cir.ptr<!s32i> loc(fused[#loc26, #loc27])) extra(#fn_attr) {
    %0 = cir.alloca !cir.ptr<!s32i>, !cir.ptr<!cir.ptr<!s32i>>, ["data", init] {alignment = 8 : i64} loc(#loc54)
    cir.store %arg0, %0 : !cir.ptr<!s32i>, !cir.ptr<!cir.ptr<!s32i>> loc(#loc28)
    cir.scope {
      %1 = cir.alloca !cir.array<!s32i x 100>, !cir.ptr<!cir.array<!s32i x 100>>, ["source"] {alignment = 16 : i64} loc(#loc56)
      %2 = cir.const #cir.zero : !cir.array<!s32i x 100> loc(#loc56)
      cir.store %2, %1 : !cir.array<!s32i x 100>, !cir.ptr<!cir.array<!s32i x 100>> loc(#loc56)
      %3 = cir.load %0 : !cir.ptr<!cir.ptr<!s32i>>, !cir.ptr<!s32i> loc(#loc33)
      %4 = cir.cast(bitcast, %3 : !cir.ptr<!s32i>), !cir.ptr<!void> loc(#loc33)
      %5 = cir.cast(array_to_ptrdecay, %1 : !cir.ptr<!cir.array<!s32i x 100>>), !cir.ptr<!s32i> loc(#loc34)
      %6 = cir.cast(bitcast, %5 : !cir.ptr<!s32i>), !cir.ptr<!void> loc(#loc34)
      %7 = cir.const #cir.int<100> : !s32i loc(#loc35)
      %8 = cir.cast(integral, %7 : !s32i), !u64i loc(#loc35)
      %9 = cir.const #cir.int<4> : !u64i loc(#loc57)
      %10 = cir.binop(mul, %8, %9) : !u64i loc(#loc58)
      cir.libc.memmove %10 bytes from %6 to %4 : !cir.ptr<!void>, !u64i loc(#loc59)
      %11 = cir.load %0 : !cir.ptr<!cir.ptr<!s32i>>, !cir.ptr<!s32i> loc(#loc40)
      %12 = cir.const #cir.int<0> : !s32i loc(#loc41)
      %13 = cir.ptr_stride(%11 : !cir.ptr<!s32i>, %12 : !s32i), !cir.ptr<!s32i> loc(#loc42)
      %14 = cir.load %13 : !cir.ptr<!s32i>, !s32i loc(#loc40)
      cir.call @printIntLine(%14) : (!s32i) -> () loc(#loc43)
      %15 = cir.load %0 : !cir.ptr<!cir.ptr<!s32i>>, !cir.ptr<!s32i> loc(#loc44)
      cir.delete.array %15 : <!s32i> loc(#loc44)
    } loc(#loc55)
    cir.return loc(#loc25)
  } loc(#loc53)
} loc(#loc)
#loc = loc("/workspaces/juliet-c/testcases/CWE122_Heap_Based_Buffer_Overflow/s03/CWE122_Heap_Based_Buffer_Overflow__cpp_CWE805_int_memmove_65b.cpp":0:0)
#loc1 = loc("../../../testcasesupport/std_testcase_io.h":18:1)
#loc2 = loc("../../../testcasesupport/std_testcase_io.h":18:33)
#loc3 = loc("CWE122_Heap_Based_Buffer_Overflow__cpp_CWE805_int_memmove_65b.cpp":24:1)
#loc4 = loc("CWE122_Heap_Based_Buffer_Overflow__cpp_CWE805_int_memmove_65b.cpp":33:1)
#loc7 = loc("CWE122_Heap_Based_Buffer_Overflow__cpp_CWE805_int_memmove_65b.cpp":25:1)
#loc8 = loc("CWE122_Heap_Based_Buffer_Overflow__cpp_CWE805_int_memmove_65b.cpp":26:5)
#loc9 = loc("CWE122_Heap_Based_Buffer_Overflow__cpp_CWE805_int_memmove_65b.cpp":32:5)
#loc10 = loc("CWE122_Heap_Based_Buffer_Overflow__cpp_CWE805_int_memmove_65b.cpp":27:9)
#loc11 = loc("CWE122_Heap_Based_Buffer_Overflow__cpp_CWE805_int_memmove_65b.cpp":27:29)
#loc12 = loc("CWE122_Heap_Based_Buffer_Overflow__cpp_CWE805_int_memmove_65b.cpp":29:17)
#loc13 = loc("CWE122_Heap_Based_Buffer_Overflow__cpp_CWE805_int_memmove_65b.cpp":29:23)
#loc14 = loc("CWE122_Heap_Based_Buffer_Overflow__cpp_CWE805_int_memmove_65b.cpp":29:31)
#loc15 = loc("CWE122_Heap_Based_Buffer_Overflow__cpp_CWE805_int_memmove_65b.cpp":29:35)
#loc16 = loc("CWE122_Heap_Based_Buffer_Overflow__cpp_CWE805_int_memmove_65b.cpp":29:45)
#loc17 = loc("CWE122_Heap_Based_Buffer_Overflow__cpp_CWE805_int_memmove_65b.cpp":29:9)
#loc18 = loc("CWE122_Heap_Based_Buffer_Overflow__cpp_CWE805_int_memmove_65b.cpp":29:46)
#loc19 = loc("CWE122_Heap_Based_Buffer_Overflow__cpp_CWE805_int_memmove_65b.cpp":30:22)
#loc20 = loc("CWE122_Heap_Based_Buffer_Overflow__cpp_CWE805_int_memmove_65b.cpp":30:27)
#loc21 = loc("CWE122_Heap_Based_Buffer_Overflow__cpp_CWE805_int_memmove_65b.cpp":30:28)
#loc22 = loc("CWE122_Heap_Based_Buffer_Overflow__cpp_CWE805_int_memmove_65b.cpp":30:9)
#loc23 = loc("CWE122_Heap_Based_Buffer_Overflow__cpp_CWE805_int_memmove_65b.cpp":31:19)
#loc24 = loc("CWE122_Heap_Based_Buffer_Overflow__cpp_CWE805_int_memmove_65b.cpp":40:1)
#loc25 = loc("CWE122_Heap_Based_Buffer_Overflow__cpp_CWE805_int_memmove_65b.cpp":49:1)
#loc28 = loc("CWE122_Heap_Based_Buffer_Overflow__cpp_CWE805_int_memmove_65b.cpp":41:1)
#loc29 = loc("CWE122_Heap_Based_Buffer_Overflow__cpp_CWE805_int_memmove_65b.cpp":42:5)
#loc30 = loc("CWE122_Heap_Based_Buffer_Overflow__cpp_CWE805_int_memmove_65b.cpp":48:5)
#loc31 = loc("CWE122_Heap_Based_Buffer_Overflow__cpp_CWE805_int_memmove_65b.cpp":43:9)
#loc32 = loc("CWE122_Heap_Based_Buffer_Overflow__cpp_CWE805_int_memmove_65b.cpp":43:29)
#loc33 = loc("CWE122_Heap_Based_Buffer_Overflow__cpp_CWE805_int_memmove_65b.cpp":45:17)
#loc34 = loc("CWE122_Heap_Based_Buffer_Overflow__cpp_CWE805_int_memmove_65b.cpp":45:23)
#loc35 = loc("CWE122_Heap_Based_Buffer_Overflow__cpp_CWE805_int_memmove_65b.cpp":45:31)
#loc36 = loc("CWE122_Heap_Based_Buffer_Overflow__cpp_CWE805_int_memmove_65b.cpp":45:35)
#loc37 = loc("CWE122_Heap_Based_Buffer_Overflow__cpp_CWE805_int_memmove_65b.cpp":45:45)
#loc38 = loc("CWE122_Heap_Based_Buffer_Overflow__cpp_CWE805_int_memmove_65b.cpp":45:9)
#loc39 = loc("CWE122_Heap_Based_Buffer_Overflow__cpp_CWE805_int_memmove_65b.cpp":45:46)
#loc40 = loc("CWE122_Heap_Based_Buffer_Overflow__cpp_CWE805_int_memmove_65b.cpp":46:22)
#loc41 = loc("CWE122_Heap_Based_Buffer_Overflow__cpp_CWE805_int_memmove_65b.cpp":46:27)
#loc42 = loc("CWE122_Heap_Based_Buffer_Overflow__cpp_CWE805_int_memmove_65b.cpp":46:28)
#loc43 = loc("CWE122_Heap_Based_Buffer_Overflow__cpp_CWE805_int_memmove_65b.cpp":46:9)
#loc44 = loc("CWE122_Heap_Based_Buffer_Overflow__cpp_CWE805_int_memmove_65b.cpp":47:19)
#loc45 = loc(fused[#loc1, #loc2])
#loc46 = loc(fused[#loc3, #loc4])
#loc48 = loc(fused[#loc8, #loc9])
#loc49 = loc(fused[#loc10, #loc11])
#loc50 = loc(fused[#loc15, #loc16])
#loc51 = loc(fused[#loc14, #loc16])
#loc52 = loc(fused[#loc17, #loc18])
#loc53 = loc(fused[#loc24, #loc25])
#loc55 = loc(fused[#loc29, #loc30])
#loc56 = loc(fused[#loc31, #loc32])
#loc57 = loc(fused[#loc36, #loc37])
#loc58 = loc(fused[#loc35, #loc37])
#loc59 = loc(fused[#loc38, #loc39])
