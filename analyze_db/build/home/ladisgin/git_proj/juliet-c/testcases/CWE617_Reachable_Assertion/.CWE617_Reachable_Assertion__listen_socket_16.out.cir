!s32i = !cir.int<s, 32>
!s64i = !cir.int<s, 64>
!s8i = !cir.int<s, 8>
!u16i = !cir.int<u, 16>
!u32i = !cir.int<u, 32>
!u64i = !cir.int<u, 64>
!u8i = !cir.int<u, 8>
!void = !cir.void
#false = #cir.bool<false> : !cir.bool
#fn_attr = #cir<extra({nothrow = #cir.nothrow})>
#fn_attr1 = #cir<extra({inline = #cir.inline<no>, nothrow = #cir.nothrow, optnone = #cir.optnone})>
#loc162 = loc("CWE617_Reachable_Assertion__listen_socket_16.c":164:10)
#loc163 = loc("CWE617_Reachable_Assertion__listen_socket_16.c":164:14)
#loc164 = loc("CWE617_Reachable_Assertion__listen_socket_16.c":164:20)
#loc165 = loc("CWE617_Reachable_Assertion__listen_socket_16.c":164:32)
#true = #cir.bool<true> : !cir.bool
!ty_in_addr = !cir.struct<struct "in_addr" {!u32i} #cir.record.decl.ast>
#loc257 = loc(fused[#loc162, #loc163])
#loc258 = loc(fused[#loc164, #loc165])
!ty_sockaddr = !cir.struct<struct "sockaddr" {!u16i, !cir.array<!s8i x 14>} #cir.record.decl.ast>
!ty_sockaddr_in = !cir.struct<struct "sockaddr_in" {!u16i, !u16i, !ty_in_addr, !cir.array<!u8i x 8>}>
module @"/home/ladisgin/git_proj/juliet-c/testcases/CWE617_Reachable_Assertion/CWE617_Reachable_Assertion__listen_socket_16.c" attributes {cir.lang = #cir.lang<c>, cir.sob = #cir.signed_overflow_behavior<undefined>, cir.triple = "x86_64-unknown-linux-gnu", dlti.dl_spec = #dlti.dl_spec<i128 = dense<128> : vector<2xi64>, i64 = dense<64> : vector<2xi64>, !llvm.ptr<272> = dense<64> : vector<4xi64>, !llvm.ptr = dense<64> : vector<4xi64>, f80 = dense<128> : vector<2xi64>, i32 = dense<32> : vector<2xi64>, i16 = dense<16> : vector<2xi64>, i8 = dense<8> : vector<2xi64>, i1 = dense<8> : vector<2xi64>, !llvm.ptr<271> = dense<32> : vector<4xi64>, !llvm.ptr<270> = dense<32> : vector<4xi64>, f128 = dense<128> : vector<2xi64>, f64 = dense<64> : vector<2xi64>, f16 = dense<16> : vector<2xi64>, "dlti.stack_alignment" = 128 : i64, "dlti.endianness" = "little">} {
  cir.func private @socket(!s32i, !s32i, !s32i) -> !s32i extra(#fn_attr) loc(#loc195)
  cir.func private @htons(!u16i) -> !u16i extra(#fn_attr) loc(#loc196)
  cir.func private @bind(!s32i, !cir.ptr<!ty_sockaddr>, !u32i) -> !s32i extra(#fn_attr) loc(#loc197)
  cir.func private @listen(!s32i, !s32i) -> !s32i extra(#fn_attr) loc(#loc198)
  cir.func private @accept(!s32i, !cir.ptr<!ty_sockaddr>, !cir.ptr<!u32i>) -> !s32i loc(#loc199)
  cir.func private @recv(!s32i, !cir.ptr<!void>, !u64i, !s32i) -> !s64i loc(#loc200)
  cir.func private @atoi(!cir.ptr<!s8i>) -> !s32i extra(#fn_attr) loc(#loc201)
  cir.func private @close(!s32i) -> !s32i loc(#loc202)
  cir.func private @__assert_fail(!cir.ptr<!s8i>, !cir.ptr<!s8i>, !u32i, !cir.ptr<!s8i>) extra(#fn_attr) loc(#loc203)
  cir.global "private" constant cir_private dsolocal @".str" = #cir.const_array<"data > ASSERT_VALUE\00" : !cir.array<!s8i x 20>> : !cir.array<!s8i x 20> {alignment = 1 : i64} loc(#loc19)
  cir.global "private" constant cir_private dsolocal @".str.1" = #cir.const_array<"CWE617_Reachable_Assertion__listen_socket_16.c\00" : !cir.array<!s8i x 47>> : !cir.array<!s8i x 47> {alignment = 1 : i64} loc(#loc19)
  cir.global "private" constant cir_private dsolocal @".str.2" = #cir.const_array<"void CWE617_Reachable_Assertion__listen_socket_16_bad()\00" : !cir.array<!s8i x 56>> : !cir.array<!s8i x 56> {alignment = 1 : i64} loc(#loc19)
  cir.func no_proto @CWE617_Reachable_Assertion__listen_socket_16_bad() extra(#fn_attr1) {
    %0 = cir.alloca !s32i, !cir.ptr<!s32i>, ["data"] {alignment = 4 : i64} loc(#loc205)
    %1 = cir.const #cir.int<1> : !s32i loc(#loc24)
    %2 = cir.unary(minus, %1) : !s32i, !s32i loc(#loc25)
    cir.store %2, %0 : !s32i, !cir.ptr<!s32i> loc(#loc206)
    cir.scope {
      cir.while {
        %4 = cir.const #cir.int<1> : !s32i loc(#loc29)
        %5 = cir.cast(int_to_bool, %4 : !s32i), !cir.bool loc(#loc29)
        cir.condition(%5) loc(#loc29)
      } do {
        cir.scope {
          %4 = cir.alloca !s32i, !cir.ptr<!s32i>, ["recvResult"] {alignment = 4 : i64} loc(#loc209)
          %5 = cir.alloca !ty_sockaddr_in, !cir.ptr<!ty_sockaddr_in>, ["service"] {alignment = 4 : i64} loc(#loc210)
          %6 = cir.alloca !s32i, !cir.ptr<!s32i>, ["listenSocket", init] {alignment = 4 : i64} loc(#loc211)
          %7 = cir.alloca !s32i, !cir.ptr<!s32i>, ["acceptSocket", init] {alignment = 4 : i64} loc(#loc212)
          %8 = cir.alloca !cir.array<!s8i x 14>, !cir.ptr<!cir.array<!s8i x 14>>, ["inputBuffer"] {alignment = 1 : i64} loc(#loc213)
          %9 = cir.const #cir.int<1> : !s32i loc(#loc37)
          %10 = cir.unary(minus, %9) : !s32i, !s32i loc(#loc37)
          cir.store %10, %6 : !s32i, !cir.ptr<!s32i> loc(#loc211)
          %11 = cir.const #cir.int<1> : !s32i loc(#loc39)
          %12 = cir.unary(minus, %11) : !s32i, !s32i loc(#loc39)
          cir.store %12, %7 : !s32i, !cir.ptr<!s32i> loc(#loc212)
          cir.scope {
            cir.do {
              %13 = cir.const #cir.int<2> : !s32i loc(#loc44)
              %14 = cir.const #cir.int<1> : !s32i loc(#loc45)
              %15 = cir.const #cir.int<6> : !s32i loc(#loc46)
              %16 = cir.call @socket(%13, %14, %15) : (!s32i, !s32i, !s32i) -> !s32i extra(#fn_attr) loc(#loc47)
              cir.store %16, %6 : !s32i, !cir.ptr<!s32i> loc(#loc215)
              cir.scope {
                %58 = cir.load %6 : !cir.ptr<!s32i>, !s32i loc(#loc52)
                %59 = cir.const #cir.int<1> : !s32i loc(#loc53)
                %60 = cir.unary(minus, %59) : !s32i, !s32i loc(#loc53)
                %61 = cir.cmp(eq, %58, %60) : !s32i, !cir.bool loc(#loc217)
                cir.if %61 {
                  cir.break loc(#loc55)
                } loc(#loc218)
              } loc(#loc216)
              %17 = cir.cast(bitcast, %5 : !cir.ptr<!ty_sockaddr_in>), !cir.ptr<!void> loc(#loc219)
              %18 = cir.const #cir.int<0> : !s32i loc(#loc58)
              %19 = cir.const #cir.int<16> : !u64i loc(#loc220)
              cir.libc.memset %19 bytes from %17 set to %18 : !cir.ptr<!void>, !s32i, !u64i loc(#loc221)
              %20 = cir.const #cir.int<2> : !s32i loc(#loc63)
              %21 = cir.cast(integral, %20 : !s32i), !u16i loc(#loc63)
              %22 = cir.get_member %5[0] {name = "sin_family"} : !cir.ptr<!ty_sockaddr_in> -> !cir.ptr<!u16i> loc(#loc64)
              cir.store %21, %22 : !u16i, !cir.ptr<!u16i> loc(#loc222)
              %23 = cir.const #cir.int<0> : !s32i loc(#loc66)
              %24 = cir.cast(integral, %23 : !s32i), !u32i loc(#loc66)
              %25 = cir.get_member %5[2] {name = "sin_addr"} : !cir.ptr<!ty_sockaddr_in> -> !cir.ptr<!ty_in_addr> loc(#loc67)
              %26 = cir.get_member %25[0] {name = "s_addr"} : !cir.ptr<!ty_in_addr> -> !cir.ptr<!u32i> loc(#loc68)
              cir.store %24, %26 : !u32i, !cir.ptr<!u32i> loc(#loc223)
              %27 = cir.const #cir.int<27015> : !s32i loc(#loc70)
              %28 = cir.cast(integral, %27 : !s32i), !u16i loc(#loc70)
              %29 = cir.call @htons(%28) : (!u16i) -> !u16i extra(#fn_attr) loc(#loc71)
              %30 = cir.get_member %5[1] {name = "sin_port"} : !cir.ptr<!ty_sockaddr_in> -> !cir.ptr<!u16i> loc(#loc72)
              cir.store %29, %30 : !u16i, !cir.ptr<!u16i> loc(#loc224)
              cir.scope {
                %58 = cir.load %6 : !cir.ptr<!s32i>, !s32i loc(#loc77)
                %59 = cir.cast(bitcast, %5 : !cir.ptr<!ty_sockaddr_in>), !cir.ptr<!ty_sockaddr> loc(#loc226)
                %60 = cir.const #cir.int<16> : !u64i loc(#loc227)
                %61 = cir.cast(integral, %60 : !u64i), !u32i loc(#loc227)
                %62 = cir.call @bind(%58, %59, %61) : (!s32i, !cir.ptr<!ty_sockaddr>, !u32i) -> !s32i extra(#fn_attr) loc(#loc82)
                %63 = cir.const #cir.int<1> : !s32i loc(#loc83)
                %64 = cir.unary(minus, %63) : !s32i, !s32i loc(#loc83)
                %65 = cir.cmp(eq, %62, %64) : !s32i, !cir.bool loc(#loc228)
                cir.if %65 {
                  cir.break loc(#loc85)
                } loc(#loc229)
              } loc(#loc225)
              cir.scope {
                %58 = cir.load %6 : !cir.ptr<!s32i>, !s32i loc(#loc88)
                %59 = cir.const #cir.int<5> : !s32i loc(#loc89)
                %60 = cir.call @listen(%58, %59) : (!s32i, !s32i) -> !s32i extra(#fn_attr) loc(#loc90)
                %61 = cir.const #cir.int<1> : !s32i loc(#loc91)
                %62 = cir.unary(minus, %61) : !s32i, !s32i loc(#loc91)
                %63 = cir.cmp(eq, %60, %62) : !s32i, !cir.bool loc(#loc231)
                cir.if %63 {
                  cir.break loc(#loc93)
                } loc(#loc232)
              } loc(#loc230)
              %31 = cir.load %6 : !cir.ptr<!s32i>, !s32i loc(#loc94)
              %32 = cir.const #cir.ptr<null> : !cir.ptr<!ty_sockaddr> loc(#loc95)
              %33 = cir.const #cir.ptr<null> : !cir.ptr<!u32i> loc(#loc96)
              %34 = cir.call @accept(%31, %32, %33) : (!s32i, !cir.ptr<!ty_sockaddr>, !cir.ptr<!u32i>) -> !s32i loc(#loc97)
              cir.store %34, %7 : !s32i, !cir.ptr<!s32i> loc(#loc233)
              cir.scope {
                %58 = cir.load %7 : !cir.ptr<!s32i>, !s32i loc(#loc102)
                %59 = cir.const #cir.int<1> : !s32i loc(#loc103)
                %60 = cir.unary(minus, %59) : !s32i, !s32i loc(#loc103)
                %61 = cir.cmp(eq, %58, %60) : !s32i, !cir.bool loc(#loc235)
                cir.if %61 {
                  cir.break loc(#loc105)
                } loc(#loc236)
              } loc(#loc234)
              %35 = cir.load %7 : !cir.ptr<!s32i>, !s32i loc(#loc106)
              %36 = cir.cast(array_to_ptrdecay, %8 : !cir.ptr<!cir.array<!s8i x 14>>), !cir.ptr<!s8i> loc(#loc107)
              %37 = cir.cast(bitcast, %36 : !cir.ptr<!s8i>), !cir.ptr<!void> loc(#loc107)
              %38 = cir.const #cir.int<3> : !s32i loc(#loc108)
              %39 = cir.cast(integral, %38 : !s32i), !u64i loc(#loc108)
              %40 = cir.const #cir.int<4> : !u64i loc(#loc108)
              %41 = cir.binop(mul, %39, %40) : !u64i loc(#loc108)
              %42 = cir.const #cir.int<2> : !s32i loc(#loc108)
              %43 = cir.cast(integral, %42 : !s32i), !u64i loc(#loc108)
              %44 = cir.binop(add, %41, %43) : !u64i loc(#loc108)
              %45 = cir.const #cir.int<1> : !s32i loc(#loc109)
              %46 = cir.cast(integral, %45 : !s32i), !u64i loc(#loc109)
              %47 = cir.binop(sub, %44, %46) : !u64i loc(#loc237)
              %48 = cir.const #cir.int<0> : !s32i loc(#loc110)
              %49 = cir.call @recv(%35, %37, %47, %48) : (!s32i, !cir.ptr<!void>, !u64i, !s32i) -> !s64i loc(#loc111)
              %50 = cir.cast(integral, %49 : !s64i), !s32i loc(#loc111)
              cir.store %50, %4 : !s32i, !cir.ptr<!s32i> loc(#loc238)
              cir.scope {
                %58 = cir.load %4 : !cir.ptr<!s32i>, !s32i loc(#loc116)
                %59 = cir.const #cir.int<1> : !s32i loc(#loc117)
                %60 = cir.unary(minus, %59) : !s32i, !s32i loc(#loc117)
                %61 = cir.cmp(eq, %58, %60) : !s32i, !cir.bool loc(#loc240)
                %62 = cir.ternary(%61, true {
                  %63 = cir.const #true loc(#loc118)
                  cir.yield %63 : !cir.bool loc(#loc118)
                }, false {
                  %63 = cir.load %4 : !cir.ptr<!s32i>, !s32i loc(#loc119)
                  %64 = cir.const #cir.int<0> : !s32i loc(#loc120)
                  %65 = cir.cmp(eq, %63, %64) : !s32i, !cir.bool loc(#loc241)
                  %66 = cir.ternary(%65, true {
                    %67 = cir.const #true loc(#loc118)
                    cir.yield %67 : !cir.bool loc(#loc118)
                  }, false {
                    %67 = cir.const #false loc(#loc118)
                    cir.yield %67 : !cir.bool loc(#loc118)
                  }) : (!cir.bool) -> !cir.bool loc(#loc118)
                  cir.yield %66 : !cir.bool loc(#loc118)
                }) : (!cir.bool) -> !cir.bool loc(#loc118)
                cir.if %62 {
                  cir.break loc(#loc122)
                } loc(#loc242)
              } loc(#loc239)
              %51 = cir.const #cir.int<0> : !s32i loc(#loc123)
              %52 = cir.cast(integral, %51 : !s32i), !s8i loc(#loc123)
              %53 = cir.load %4 : !cir.ptr<!s32i>, !s32i loc(#loc124)
              %54 = cir.cast(array_to_ptrdecay, %8 : !cir.ptr<!cir.array<!s8i x 14>>), !cir.ptr<!s8i> loc(#loc125)
              %55 = cir.ptr_stride(%54 : !cir.ptr<!s8i>, %53 : !s32i), !cir.ptr<!s8i> loc(#loc125)
              cir.store %52, %55 : !s8i, !cir.ptr<!s8i> loc(#loc243)
              %56 = cir.cast(array_to_ptrdecay, %8 : !cir.ptr<!cir.array<!s8i x 14>>), !cir.ptr<!s8i> loc(#loc126)
              %57 = cir.call @atoi(%56) : (!cir.ptr<!s8i>) -> !s32i extra(#fn_attr) loc(#loc127)
              cir.store %57, %0 : !s32i, !cir.ptr<!s32i> loc(#loc244)
              cir.yield loc(#loc43)
            } while {
              %13 = cir.const #cir.int<0> : !s32i loc(#loc130)
              %14 = cir.cast(int_to_bool, %13 : !s32i), !cir.bool loc(#loc130)
              cir.condition(%14) loc(#loc130)
            } loc(#loc214)
          } loc(#loc214)
          cir.scope {
            %13 = cir.load %6 : !cir.ptr<!s32i>, !s32i loc(#loc133)
            %14 = cir.const #cir.int<1> : !s32i loc(#loc134)
            %15 = cir.unary(minus, %14) : !s32i, !s32i loc(#loc134)
            %16 = cir.cmp(ne, %13, %15) : !s32i, !cir.bool loc(#loc246)
            cir.if %16 {
              %17 = cir.load %6 : !cir.ptr<!s32i>, !s32i loc(#loc136)
              %18 = cir.call @close(%17) : (!s32i) -> !s32i loc(#loc137)
            } loc(#loc247)
          } loc(#loc245)
          cir.scope {
            %13 = cir.load %7 : !cir.ptr<!s32i>, !s32i loc(#loc140)
            %14 = cir.const #cir.int<1> : !s32i loc(#loc141)
            %15 = cir.unary(minus, %14) : !s32i, !s32i loc(#loc141)
            %16 = cir.cmp(ne, %13, %15) : !s32i, !cir.bool loc(#loc249)
            cir.if %16 {
              %17 = cir.load %7 : !cir.ptr<!s32i>, !s32i loc(#loc143)
              %18 = cir.call @close(%17) : (!s32i) -> !s32i loc(#loc144)
            } loc(#loc250)
          } loc(#loc248)
        } loc(#loc208)
        cir.break loc(#loc145)
      } loc(#loc207)
    } loc(#loc207)
    %3 = cir.const #cir.int<4> : !u64i loc(#loc19)
    cir.scope {
      cir.scope {
        %4 = cir.load %0 : !cir.ptr<!s32i>, !s32i loc(#loc19)
        %5 = cir.const #cir.int<5> : !s32i loc(#loc19)
        %6 = cir.cmp(gt, %4, %5) : !s32i, !cir.bool loc(#loc19)
        cir.if %6 {
        } else {
          %7 = cir.get_global @".str" : !cir.ptr<!cir.array<!s8i x 20>> loc(#loc19)
          %8 = cir.cast(array_to_ptrdecay, %7 : !cir.ptr<!cir.array<!s8i x 20>>), !cir.ptr<!s8i> loc(#loc19)
          %9 = cir.get_global @".str.1" : !cir.ptr<!cir.array<!s8i x 47>> loc(#loc19)
          %10 = cir.cast(array_to_ptrdecay, %9 : !cir.ptr<!cir.array<!s8i x 47>>), !cir.ptr<!s8i> loc(#loc19)
          %11 = cir.const #cir.int<126> : !s32i loc(#loc19)
          %12 = cir.cast(integral, %11 : !s32i), !u32i loc(#loc19)
          %13 = cir.get_global @".str.2" : !cir.ptr<!cir.array<!s8i x 56>> loc(#loc19)
          %14 = cir.cast(array_to_ptrdecay, %13 : !cir.ptr<!cir.array<!s8i x 56>>), !cir.ptr<!s8i> loc(#loc19)
          cir.call @__assert_fail(%8, %10, %12, %14) : (!cir.ptr<!s8i>, !cir.ptr<!s8i>, !u32i, !cir.ptr<!s8i>) -> () extra(#fn_attr) loc(#loc19)
        } loc(#loc19)
      } loc(#loc19)
    } loc(#loc19)
    cir.return loc(#loc21)
  } loc(#loc204)
  cir.func no_proto @CWE617_Reachable_Assertion__listen_socket_16_good() extra(#fn_attr1) {
    %0 = cir.get_global @goodG2B : !cir.ptr<!cir.func<!void ()>> loc(#loc252)
    cir.call %0() : (!cir.ptr<!cir.func<!void ()>>) -> () loc(#loc148)
    cir.return loc(#loc147)
  } loc(#loc251)
  cir.func private @srand(!u32i) extra(#fn_attr) loc(#loc253)
  cir.func private @time(!cir.ptr<!s64i>) -> !s64i extra(#fn_attr) loc(#loc254)
  cir.func private @printLine(!cir.ptr<!s8i>) loc(#loc255)
  cir.global "private" constant cir_private dsolocal @".str.3" = #cir.const_array<"Calling good()...\00" : !cir.array<!s8i x 18>> : !cir.array<!s8i x 18> {alignment = 1 : i64} loc(#loc156)
  cir.global "private" constant cir_private dsolocal @".str.4" = #cir.const_array<"Finished good()\00" : !cir.array<!s8i x 16>> : !cir.array<!s8i x 16> {alignment = 1 : i64} loc(#loc157)
  cir.global "private" constant cir_private dsolocal @".str.5" = #cir.const_array<"Calling bad()...\00" : !cir.array<!s8i x 17>> : !cir.array<!s8i x 17> {alignment = 1 : i64} loc(#loc158)
  cir.global "private" constant cir_private dsolocal @".str.6" = #cir.const_array<"Finished bad()\00" : !cir.array<!s8i x 15>> : !cir.array<!s8i x 15> {alignment = 1 : i64} loc(#loc159)
  cir.func @main(%arg0: !s32i loc(fused[#loc162, #loc163]), %arg1: !cir.ptr<!cir.ptr<!s8i>> loc(fused[#loc164, #loc165])) -> !s32i extra(#fn_attr1) {
    %0 = cir.alloca !s32i, !cir.ptr<!s32i>, ["argc", init] {alignment = 4 : i64} loc(#loc257)
    %1 = cir.alloca !cir.ptr<!cir.ptr<!s8i>>, !cir.ptr<!cir.ptr<!cir.ptr<!s8i>>>, ["argv", init] {alignment = 8 : i64} loc(#loc258)
    %2 = cir.alloca !s32i, !cir.ptr<!s32i>, ["__retval"] {alignment = 4 : i64} loc(#loc161)
    cir.store %arg0, %0 : !s32i, !cir.ptr<!s32i> loc(#loc166)
    cir.store %arg1, %1 : !cir.ptr<!cir.ptr<!s8i>>, !cir.ptr<!cir.ptr<!cir.ptr<!s8i>>> loc(#loc166)
    %3 = cir.const #cir.ptr<null> : !cir.ptr<!s64i> loc(#loc167)
    %4 = cir.call @time(%3) : (!cir.ptr<!s64i>) -> !s64i extra(#fn_attr) loc(#loc168)
    %5 = cir.cast(integral, %4 : !s64i), !u32i loc(#loc168)
    cir.call @srand(%5) : (!u32i) -> () extra(#fn_attr) loc(#loc169)
    %6 = cir.get_global @".str.3" : !cir.ptr<!cir.array<!s8i x 18>> loc(#loc156)
    %7 = cir.cast(array_to_ptrdecay, %6 : !cir.ptr<!cir.array<!s8i x 18>>), !cir.ptr<!s8i> loc(#loc156)
    cir.call @printLine(%7) : (!cir.ptr<!s8i>) -> () loc(#loc170)
    %8 = cir.get_global @CWE617_Reachable_Assertion__listen_socket_16_good : !cir.ptr<!cir.func<!void ()>> loc(#loc259)
    cir.call @CWE617_Reachable_Assertion__listen_socket_16_good() : () -> () loc(#loc171)
    %9 = cir.get_global @".str.4" : !cir.ptr<!cir.array<!s8i x 16>> loc(#loc157)
    %10 = cir.cast(array_to_ptrdecay, %9 : !cir.ptr<!cir.array<!s8i x 16>>), !cir.ptr<!s8i> loc(#loc157)
    cir.call @printLine(%10) : (!cir.ptr<!s8i>) -> () loc(#loc173)
    %11 = cir.get_global @".str.5" : !cir.ptr<!cir.array<!s8i x 17>> loc(#loc158)
    %12 = cir.cast(array_to_ptrdecay, %11 : !cir.ptr<!cir.array<!s8i x 17>>), !cir.ptr<!s8i> loc(#loc158)
    cir.call @printLine(%12) : (!cir.ptr<!s8i>) -> () loc(#loc174)
    %13 = cir.get_global @CWE617_Reachable_Assertion__listen_socket_16_bad : !cir.ptr<!cir.func<!void ()>> loc(#loc260)
    cir.call @CWE617_Reachable_Assertion__listen_socket_16_bad() : () -> () loc(#loc175)
    %14 = cir.get_global @".str.6" : !cir.ptr<!cir.array<!s8i x 15>> loc(#loc159)
    %15 = cir.cast(array_to_ptrdecay, %14 : !cir.ptr<!cir.array<!s8i x 15>>), !cir.ptr<!s8i> loc(#loc159)
    cir.call @printLine(%15) : (!cir.ptr<!s8i>) -> () loc(#loc177)
    %16 = cir.const #cir.int<0> : !s32i loc(#loc178)
    cir.store %16, %2 : !s32i, !cir.ptr<!s32i> loc(#loc261)
    %17 = cir.load %2 : !cir.ptr<!s32i>, !s32i loc(#loc261)
    cir.return %17 : !s32i loc(#loc261)
  } loc(#loc256)
  cir.global "private" constant cir_private dsolocal @".str.7" = #cir.const_array<"void goodG2B()\00" : !cir.array<!s8i x 15>> : !cir.array<!s8i x 15> {alignment = 1 : i64} loc(#loc180)
  cir.func no_proto internal private @goodG2B() extra(#fn_attr1) {
    %0 = cir.alloca !s32i, !cir.ptr<!s32i>, ["data"] {alignment = 4 : i64} loc(#loc263)
    %1 = cir.const #cir.int<1> : !s32i loc(#loc185)
    %2 = cir.unary(minus, %1) : !s32i, !s32i loc(#loc186)
    cir.store %2, %0 : !s32i, !cir.ptr<!s32i> loc(#loc264)
    cir.scope {
      cir.while {
        %4 = cir.const #cir.int<1> : !s32i loc(#loc190)
        %5 = cir.cast(int_to_bool, %4 : !s32i), !cir.bool loc(#loc190)
        cir.condition(%5) loc(#loc190)
      } do {
        %4 = cir.const #cir.int<5> : !s32i loc(#loc191)
        %5 = cir.const #cir.int<1> : !s32i loc(#loc192)
        %6 = cir.binop(add, %4, %5) nsw : !s32i loc(#loc191)
        cir.store %6, %0 : !s32i, !cir.ptr<!s32i> loc(#loc266)
        cir.break loc(#loc194)
      } loc(#loc265)
    } loc(#loc265)
    %3 = cir.const #cir.int<4> : !u64i loc(#loc180)
    cir.scope {
      cir.scope {
        %4 = cir.load %0 : !cir.ptr<!s32i>, !s32i loc(#loc180)
        %5 = cir.const #cir.int<5> : !s32i loc(#loc180)
        %6 = cir.cmp(gt, %4, %5) : !s32i, !cir.bool loc(#loc180)
        cir.if %6 {
        } else {
          %7 = cir.get_global @".str" : !cir.ptr<!cir.array<!s8i x 20>> loc(#loc180)
          %8 = cir.cast(array_to_ptrdecay, %7 : !cir.ptr<!cir.array<!s8i x 20>>), !cir.ptr<!s8i> loc(#loc180)
          %9 = cir.get_global @".str.1" : !cir.ptr<!cir.array<!s8i x 47>> loc(#loc180)
          %10 = cir.cast(array_to_ptrdecay, %9 : !cir.ptr<!cir.array<!s8i x 47>>), !cir.ptr<!s8i> loc(#loc180)
          %11 = cir.const #cir.int<146> : !s32i loc(#loc180)
          %12 = cir.cast(integral, %11 : !s32i), !u32i loc(#loc180)
          %13 = cir.get_global @".str.7" : !cir.ptr<!cir.array<!s8i x 15>> loc(#loc180)
          %14 = cir.cast(array_to_ptrdecay, %13 : !cir.ptr<!cir.array<!s8i x 15>>), !cir.ptr<!s8i> loc(#loc180)
          cir.call @__assert_fail(%8, %10, %12, %14) : (!cir.ptr<!s8i>, !cir.ptr<!s8i>, !u32i, !cir.ptr<!s8i>) -> () extra(#fn_attr) loc(#loc180)
        } loc(#loc180)
      } loc(#loc180)
    } loc(#loc180)
    cir.return loc(#loc182)
  } loc(#loc262)
} loc(#loc)
#loc = loc("/home/ladisgin/git_proj/juliet-c/testcases/CWE617_Reachable_Assertion/CWE617_Reachable_Assertion__listen_socket_16.c":0:0)
#loc1 = loc("/usr/include/sys/socket.h":102:1)
#loc2 = loc("/usr/include/sys/socket.h":102:62)
#loc3 = loc("/usr/include/netinet/in.h":404:1)
#loc4 = loc("/usr/include/netinet/in.h":405:40)
#loc5 = loc("/usr/include/sys/socket.h":112:1)
#loc6 = loc("/usr/include/sys/socket.h":113:6)
#loc7 = loc("/usr/include/sys/socket.h":296:1)
#loc8 = loc("/usr/include/sys/socket.h":296:39)
#loc9 = loc("/usr/include/sys/socket.h":306:1)
#loc10 = loc("/usr/include/sys/socket.h":307:38)
#loc11 = loc("/usr/include/sys/socket.h":145:1)
#loc12 = loc("/usr/include/sys/socket.h":145:68)
#loc13 = loc("/usr/include/stdlib.h":105:1)
#loc14 = loc("/usr/include/stdlib.h":106:33)
#loc15 = loc("/usr/include/unistd.h":358:1)
#loc16 = loc("/usr/include/unistd.h":358:27)
#loc17 = loc("/usr/include/assert.h":67:1)
#loc18 = loc("/usr/include/assert.h":69:43)
#loc19 = loc("CWE617_Reachable_Assertion__listen_socket_16.c":126:5)
#loc20 = loc("CWE617_Reachable_Assertion__listen_socket_16.c":47:1)
#loc21 = loc("CWE617_Reachable_Assertion__listen_socket_16.c":127:1)
#loc22 = loc("CWE617_Reachable_Assertion__listen_socket_16.c":49:5)
#loc23 = loc("CWE617_Reachable_Assertion__listen_socket_16.c":49:9)
#loc24 = loc("CWE617_Reachable_Assertion__listen_socket_16.c":51:13)
#loc25 = loc("CWE617_Reachable_Assertion__listen_socket_16.c":51:12)
#loc26 = loc("CWE617_Reachable_Assertion__listen_socket_16.c":51:5)
#loc27 = loc("CWE617_Reachable_Assertion__listen_socket_16.c":52:5)
#loc28 = loc("CWE617_Reachable_Assertion__listen_socket_16.c":124:5)
#loc29 = loc("CWE617_Reachable_Assertion__listen_socket_16.c":52:11)
#loc30 = loc("CWE617_Reachable_Assertion__listen_socket_16.c":54:9)
#loc31 = loc("CWE617_Reachable_Assertion__listen_socket_16.c":122:9)
#loc32 = loc("CWE617_Reachable_Assertion__listen_socket_16.c":59:13)
#loc33 = loc("CWE617_Reachable_Assertion__listen_socket_16.c":59:17)
#loc34 = loc("CWE617_Reachable_Assertion__listen_socket_16.c":60:13)
#loc35 = loc("CWE617_Reachable_Assertion__listen_socket_16.c":60:32)
#loc36 = loc("CWE617_Reachable_Assertion__listen_socket_16.c":61:13)
#loc37 = loc("CWE617_Reachable_Assertion__listen_socket_16.c":61:35)
#loc38 = loc("CWE617_Reachable_Assertion__listen_socket_16.c":62:13)
#loc39 = loc("CWE617_Reachable_Assertion__listen_socket_16.c":62:35)
#loc40 = loc("CWE617_Reachable_Assertion__listen_socket_16.c":63:13)
#loc41 = loc("CWE617_Reachable_Assertion__listen_socket_16.c":63:45)
#loc42 = loc("CWE617_Reachable_Assertion__listen_socket_16.c":64:13)
#loc43 = loc("CWE617_Reachable_Assertion__listen_socket_16.c":107:21)
#loc44 = loc("CWE617_Reachable_Assertion__listen_socket_16.c":74:39)
#loc45 = loc("CWE617_Reachable_Assertion__listen_socket_16.c":74:48)
#loc46 = loc("CWE617_Reachable_Assertion__listen_socket_16.c":74:61)
#loc47 = loc("CWE617_Reachable_Assertion__listen_socket_16.c":74:32)
#loc48 = loc("CWE617_Reachable_Assertion__listen_socket_16.c":74:17)
#loc49 = loc("CWE617_Reachable_Assertion__listen_socket_16.c":74:72)
#loc50 = loc("CWE617_Reachable_Assertion__listen_socket_16.c":75:17)
#loc51 = loc("CWE617_Reachable_Assertion__listen_socket_16.c":78:17)
#loc52 = loc("CWE617_Reachable_Assertion__listen_socket_16.c":75:21)
#loc53 = loc("CWE617_Reachable_Assertion__listen_socket_16.c":75:37)
#loc54 = loc("CWE617_Reachable_Assertion__listen_socket_16.c":76:17)
#loc55 = loc("CWE617_Reachable_Assertion__listen_socket_16.c":77:21)
#loc56 = loc("CWE617_Reachable_Assertion__listen_socket_16.c":79:24)
#loc57 = loc("CWE617_Reachable_Assertion__listen_socket_16.c":79:25)
#loc58 = loc("CWE617_Reachable_Assertion__listen_socket_16.c":79:34)
#loc59 = loc("CWE617_Reachable_Assertion__listen_socket_16.c":79:37)
#loc60 = loc("CWE617_Reachable_Assertion__listen_socket_16.c":79:51)
#loc61 = loc("CWE617_Reachable_Assertion__listen_socket_16.c":79:17)
#loc62 = loc("CWE617_Reachable_Assertion__listen_socket_16.c":79:52)
#loc63 = loc("CWE617_Reachable_Assertion__listen_socket_16.c":80:38)
#loc64 = loc("/usr/include/netinet/in.h":249:5)
#loc65 = loc("CWE617_Reachable_Assertion__listen_socket_16.c":80:17)
#loc66 = loc("CWE617_Reachable_Assertion__listen_socket_16.c":81:43)
#loc67 = loc("/usr/include/netinet/in.h":251:20)
#loc68 = loc("/usr/include/netinet/in.h":33:15)
#loc69 = loc("CWE617_Reachable_Assertion__listen_socket_16.c":81:17)
#loc70 = loc("CWE617_Reachable_Assertion__listen_socket_16.c":82:42)
#loc71 = loc("CWE617_Reachable_Assertion__listen_socket_16.c":82:36)
#loc72 = loc("/usr/include/netinet/in.h":250:15)
#loc73 = loc("CWE617_Reachable_Assertion__listen_socket_16.c":82:17)
#loc74 = loc("CWE617_Reachable_Assertion__listen_socket_16.c":82:50)
#loc75 = loc("CWE617_Reachable_Assertion__listen_socket_16.c":83:17)
#loc76 = loc("CWE617_Reachable_Assertion__listen_socket_16.c":86:17)
#loc77 = loc("CWE617_Reachable_Assertion__listen_socket_16.c":83:26)
#loc78 = loc("CWE617_Reachable_Assertion__listen_socket_16.c":83:58)
#loc79 = loc("CWE617_Reachable_Assertion__listen_socket_16.c":83:59)
#loc80 = loc("CWE617_Reachable_Assertion__listen_socket_16.c":83:68)
#loc81 = loc("CWE617_Reachable_Assertion__listen_socket_16.c":83:82)
#loc82 = loc("CWE617_Reachable_Assertion__listen_socket_16.c":83:21)
#loc83 = loc("CWE617_Reachable_Assertion__listen_socket_16.c":83:88)
#loc84 = loc("CWE617_Reachable_Assertion__listen_socket_16.c":84:17)
#loc85 = loc("CWE617_Reachable_Assertion__listen_socket_16.c":85:21)
#loc86 = loc("CWE617_Reachable_Assertion__listen_socket_16.c":87:17)
#loc87 = loc("CWE617_Reachable_Assertion__listen_socket_16.c":90:17)
#loc88 = loc("CWE617_Reachable_Assertion__listen_socket_16.c":87:28)
#loc89 = loc("CWE617_Reachable_Assertion__listen_socket_16.c":87:42)
#loc90 = loc("CWE617_Reachable_Assertion__listen_socket_16.c":87:21)
#loc91 = loc("CWE617_Reachable_Assertion__listen_socket_16.c":87:61)
#loc92 = loc("CWE617_Reachable_Assertion__listen_socket_16.c":88:17)
#loc93 = loc("CWE617_Reachable_Assertion__listen_socket_16.c":89:21)
#loc94 = loc("CWE617_Reachable_Assertion__listen_socket_16.c":91:39)
#loc95 = loc("CWE617_Reachable_Assertion__listen_socket_16.c":91:53)
#loc96 = loc("CWE617_Reachable_Assertion__listen_socket_16.c":91:59)
#loc97 = loc("CWE617_Reachable_Assertion__listen_socket_16.c":91:32)
#loc98 = loc("CWE617_Reachable_Assertion__listen_socket_16.c":91:17)
#loc99 = loc("CWE617_Reachable_Assertion__listen_socket_16.c":91:63)
#loc100 = loc("CWE617_Reachable_Assertion__listen_socket_16.c":92:17)
#loc101 = loc("CWE617_Reachable_Assertion__listen_socket_16.c":95:17)
#loc102 = loc("CWE617_Reachable_Assertion__listen_socket_16.c":92:21)
#loc103 = loc("CWE617_Reachable_Assertion__listen_socket_16.c":92:37)
#loc104 = loc("CWE617_Reachable_Assertion__listen_socket_16.c":93:17)
#loc105 = loc("CWE617_Reachable_Assertion__listen_socket_16.c":94:21)
#loc106 = loc("CWE617_Reachable_Assertion__listen_socket_16.c":97:35)
#loc107 = loc("CWE617_Reachable_Assertion__listen_socket_16.c":97:49)
#loc108 = loc("CWE617_Reachable_Assertion__listen_socket_16.c":97:62)
#loc109 = loc("CWE617_Reachable_Assertion__listen_socket_16.c":97:80)
#loc110 = loc("CWE617_Reachable_Assertion__listen_socket_16.c":97:83)
#loc111 = loc("CWE617_Reachable_Assertion__listen_socket_16.c":97:30)
#loc112 = loc("CWE617_Reachable_Assertion__listen_socket_16.c":97:17)
#loc113 = loc("CWE617_Reachable_Assertion__listen_socket_16.c":97:84)
#loc114 = loc("CWE617_Reachable_Assertion__listen_socket_16.c":98:17)
#loc115 = loc("CWE617_Reachable_Assertion__listen_socket_16.c":101:17)
#loc116 = loc("CWE617_Reachable_Assertion__listen_socket_16.c":98:21)
#loc117 = loc("CWE617_Reachable_Assertion__listen_socket_16.c":98:35)
#loc118 = loc("CWE617_Reachable_Assertion__listen_socket_16.c":98:48)
#loc119 = loc("CWE617_Reachable_Assertion__listen_socket_16.c":98:51)
#loc120 = loc("CWE617_Reachable_Assertion__listen_socket_16.c":98:65)
#loc121 = loc("CWE617_Reachable_Assertion__listen_socket_16.c":99:17)
#loc122 = loc("CWE617_Reachable_Assertion__listen_socket_16.c":100:21)
#loc123 = loc("CWE617_Reachable_Assertion__listen_socket_16.c":103:43)
#loc124 = loc("CWE617_Reachable_Assertion__listen_socket_16.c":103:29)
#loc125 = loc("CWE617_Reachable_Assertion__listen_socket_16.c":103:17)
#loc126 = loc("CWE617_Reachable_Assertion__listen_socket_16.c":105:29)
#loc127 = loc("CWE617_Reachable_Assertion__listen_socket_16.c":105:24)
#loc128 = loc("CWE617_Reachable_Assertion__listen_socket_16.c":105:17)
#loc129 = loc("CWE617_Reachable_Assertion__listen_socket_16.c":105:40)
#loc130 = loc("CWE617_Reachable_Assertion__listen_socket_16.c":107:20)
#loc131 = loc("CWE617_Reachable_Assertion__listen_socket_16.c":108:13)
#loc132 = loc("CWE617_Reachable_Assertion__listen_socket_16.c":111:13)
#loc133 = loc("CWE617_Reachable_Assertion__listen_socket_16.c":108:17)
#loc134 = loc("CWE617_Reachable_Assertion__listen_socket_16.c":108:33)
#loc135 = loc("CWE617_Reachable_Assertion__listen_socket_16.c":109:13)
#loc136 = loc("CWE617_Reachable_Assertion__listen_socket_16.c":110:30)
#loc137 = loc("CWE617_Reachable_Assertion__listen_socket_16.c":110:17)
#loc138 = loc("CWE617_Reachable_Assertion__listen_socket_16.c":112:13)
#loc139 = loc("CWE617_Reachable_Assertion__listen_socket_16.c":115:13)
#loc140 = loc("CWE617_Reachable_Assertion__listen_socket_16.c":112:17)
#loc141 = loc("CWE617_Reachable_Assertion__listen_socket_16.c":112:33)
#loc142 = loc("CWE617_Reachable_Assertion__listen_socket_16.c":113:13)
#loc143 = loc("CWE617_Reachable_Assertion__listen_socket_16.c":114:30)
#loc144 = loc("CWE617_Reachable_Assertion__listen_socket_16.c":114:17)
#loc145 = loc("CWE617_Reachable_Assertion__listen_socket_16.c":123:9)
#loc146 = loc("CWE617_Reachable_Assertion__listen_socket_16.c":149:1)
#loc147 = loc("CWE617_Reachable_Assertion__listen_socket_16.c":152:1)
#loc148 = loc("CWE617_Reachable_Assertion__listen_socket_16.c":151:5)
#loc149 = loc("CWE617_Reachable_Assertion__listen_socket_16.c":151:13)
#loc150 = loc("/usr/include/stdlib.h":575:1)
#loc151 = loc("/usr/include/stdlib.h":575:41)
#loc152 = loc("/usr/include/time.h":76:1)
#loc153 = loc("/usr/include/time.h":76:38)
#loc154 = loc("../../testcasesupport/std_testcase_io.h":14:1)
#loc155 = loc("../../testcasesupport/std_testcase_io.h":14:33)
#loc156 = loc("CWE617_Reachable_Assertion__listen_socket_16.c":169:15)
#loc157 = loc("CWE617_Reachable_Assertion__listen_socket_16.c":171:15)
#loc158 = loc("CWE617_Reachable_Assertion__listen_socket_16.c":174:15)
#loc159 = loc("CWE617_Reachable_Assertion__listen_socket_16.c":176:15)
#loc160 = loc("CWE617_Reachable_Assertion__listen_socket_16.c":164:1)
#loc161 = loc("CWE617_Reachable_Assertion__listen_socket_16.c":179:1)
#loc166 = loc("CWE617_Reachable_Assertion__listen_socket_16.c":165:1)
#loc167 = loc("CWE617_Reachable_Assertion__listen_socket_16.c":167:27)
#loc168 = loc("CWE617_Reachable_Assertion__listen_socket_16.c":167:22)
#loc169 = loc("CWE617_Reachable_Assertion__listen_socket_16.c":167:5)
#loc170 = loc("CWE617_Reachable_Assertion__listen_socket_16.c":169:5)
#loc171 = loc("CWE617_Reachable_Assertion__listen_socket_16.c":170:5)
#loc172 = loc("CWE617_Reachable_Assertion__listen_socket_16.c":170:55)
#loc173 = loc("CWE617_Reachable_Assertion__listen_socket_16.c":171:5)
#loc174 = loc("CWE617_Reachable_Assertion__listen_socket_16.c":174:5)
#loc175 = loc("CWE617_Reachable_Assertion__listen_socket_16.c":175:5)
#loc176 = loc("CWE617_Reachable_Assertion__listen_socket_16.c":175:54)
#loc177 = loc("CWE617_Reachable_Assertion__listen_socket_16.c":176:5)
#loc178 = loc("CWE617_Reachable_Assertion__listen_socket_16.c":178:12)
#loc179 = loc("CWE617_Reachable_Assertion__listen_socket_16.c":178:5)
#loc180 = loc("CWE617_Reachable_Assertion__listen_socket_16.c":146:5)
#loc181 = loc("CWE617_Reachable_Assertion__listen_socket_16.c":134:1)
#loc182 = loc("CWE617_Reachable_Assertion__listen_socket_16.c":147:1)
#loc183 = loc("CWE617_Reachable_Assertion__listen_socket_16.c":136:5)
#loc184 = loc("CWE617_Reachable_Assertion__listen_socket_16.c":136:9)
#loc185 = loc("CWE617_Reachable_Assertion__listen_socket_16.c":138:13)
#loc186 = loc("CWE617_Reachable_Assertion__listen_socket_16.c":138:12)
#loc187 = loc("CWE617_Reachable_Assertion__listen_socket_16.c":138:5)
#loc188 = loc("CWE617_Reachable_Assertion__listen_socket_16.c":139:5)
#loc189 = loc("CWE617_Reachable_Assertion__listen_socket_16.c":144:5)
#loc190 = loc("CWE617_Reachable_Assertion__listen_socket_16.c":139:11)
#loc191 = loc("CWE617_Reachable_Assertion__listen_socket_16.c":142:16)
#loc192 = loc("CWE617_Reachable_Assertion__listen_socket_16.c":142:29)
#loc193 = loc("CWE617_Reachable_Assertion__listen_socket_16.c":142:9)
#loc194 = loc("CWE617_Reachable_Assertion__listen_socket_16.c":143:9)
#loc195 = loc(fused[#loc1, #loc2])
#loc196 = loc(fused[#loc3, #loc4])
#loc197 = loc(fused[#loc5, #loc6])
#loc198 = loc(fused[#loc7, #loc8])
#loc199 = loc(fused[#loc9, #loc10])
#loc200 = loc(fused[#loc11, #loc12])
#loc201 = loc(fused[#loc13, #loc14])
#loc202 = loc(fused[#loc15, #loc16])
#loc203 = loc(fused[#loc17, #loc18])
#loc204 = loc(fused[#loc20, #loc21])
#loc205 = loc(fused[#loc22, #loc23])
#loc206 = loc(fused[#loc26, #loc24])
#loc207 = loc(fused[#loc27, #loc28])
#loc208 = loc(fused[#loc30, #loc31])
#loc209 = loc(fused[#loc32, #loc33])
#loc210 = loc(fused[#loc34, #loc35])
#loc211 = loc(fused[#loc36, #loc37])
#loc212 = loc(fused[#loc38, #loc39])
#loc213 = loc(fused[#loc40, #loc41])
#loc214 = loc(fused[#loc42, #loc43])
#loc215 = loc(fused[#loc48, #loc49])
#loc216 = loc(fused[#loc50, #loc51])
#loc217 = loc(fused[#loc52, #loc53])
#loc218 = loc(fused[#loc54, #loc51])
#loc219 = loc(fused[#loc56, #loc57])
#loc220 = loc(fused[#loc59, #loc60])
#loc221 = loc(fused[#loc61, #loc62])
#loc222 = loc(fused[#loc65, #loc63])
#loc223 = loc(fused[#loc69, #loc66])
#loc224 = loc(fused[#loc73, #loc74])
#loc225 = loc(fused[#loc75, #loc76])
#loc226 = loc(fused[#loc78, #loc79])
#loc227 = loc(fused[#loc80, #loc81])
#loc228 = loc(fused[#loc82, #loc83])
#loc229 = loc(fused[#loc84, #loc76])
#loc230 = loc(fused[#loc86, #loc87])
#loc231 = loc(fused[#loc90, #loc91])
#loc232 = loc(fused[#loc92, #loc87])
#loc233 = loc(fused[#loc98, #loc99])
#loc234 = loc(fused[#loc100, #loc101])
#loc235 = loc(fused[#loc102, #loc103])
#loc236 = loc(fused[#loc104, #loc101])
#loc237 = loc(fused[#loc108, #loc109])
#loc238 = loc(fused[#loc112, #loc113])
#loc239 = loc(fused[#loc114, #loc115])
#loc240 = loc(fused[#loc116, #loc117])
#loc241 = loc(fused[#loc119, #loc120])
#loc242 = loc(fused[#loc121, #loc115])
#loc243 = loc(fused[#loc125, #loc123])
#loc244 = loc(fused[#loc128, #loc129])
#loc245 = loc(fused[#loc131, #loc132])
#loc246 = loc(fused[#loc133, #loc134])
#loc247 = loc(fused[#loc135, #loc132])
#loc248 = loc(fused[#loc138, #loc139])
#loc249 = loc(fused[#loc140, #loc141])
#loc250 = loc(fused[#loc142, #loc139])
#loc251 = loc(fused[#loc146, #loc147])
#loc252 = loc(fused[#loc148, #loc149])
#loc253 = loc(fused[#loc150, #loc151])
#loc254 = loc(fused[#loc152, #loc153])
#loc255 = loc(fused[#loc154, #loc155])
#loc256 = loc(fused[#loc160, #loc161])
#loc259 = loc(fused[#loc171, #loc172])
#loc260 = loc(fused[#loc175, #loc176])
#loc261 = loc(fused[#loc179, #loc178])
#loc262 = loc(fused[#loc181, #loc182])
#loc263 = loc(fused[#loc183, #loc184])
#loc264 = loc(fused[#loc187, #loc185])
#loc265 = loc(fused[#loc188, #loc189])
#loc266 = loc(fused[#loc193, #loc192])
