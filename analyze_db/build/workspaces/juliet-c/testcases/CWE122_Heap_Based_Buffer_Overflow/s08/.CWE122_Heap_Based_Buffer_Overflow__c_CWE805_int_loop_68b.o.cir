!s32i = !cir.int<s, 32>
!u64i = !cir.int<u, 64>
!void = !cir.void
#fn_attr = #cir<extra({nothrow = #cir.nothrow})>
#fn_attr1 = #cir<extra({inline = #cir.inline<no>, nothrow = #cir.nothrow, optnone = #cir.optnone, uwtable = #cir.uwtable<async>})>
module @"/workspaces/juliet-c/testcases/CWE122_Heap_Based_Buffer_Overflow/s08/CWE122_Heap_Based_Buffer_Overflow__c_CWE805_int_loop_68b.c" attributes {cir.lang = #cir.lang<c>, cir.sob = #cir.signed_overflow_behavior<undefined>, cir.triple = "x86_64-unknown-linux-gnu", cir.type_size_info = #cir.type_size_info<char = 8, int = 32, size_t = 64>, cir.uwtable = #cir.uwtable<async>, dlti.dl_spec = #dlti.dl_spec<f80 = dense<128> : vector<2xi64>, f128 = dense<128> : vector<2xi64>, f64 = dense<64> : vector<2xi64>, !llvm.ptr<271> = dense<32> : vector<4xi64>, !llvm.ptr<272> = dense<64> : vector<4xi64>, i16 = dense<16> : vector<2xi64>, i32 = dense<32> : vector<2xi64>, f16 = dense<16> : vector<2xi64>, !llvm.ptr = dense<64> : vector<4xi64>, i1 = dense<8> : vector<2xi64>, i8 = dense<8> : vector<2xi64>, i64 = dense<64> : vector<2xi64>, i128 = dense<128> : vector<2xi64>, !llvm.ptr<270> = dense<32> : vector<4xi64>, "dlti.mangling_mode" = "e", "dlti.endianness" = "little", "dlti.stack_alignment" = 128 : i64>} {
  cir.global "private" external @CWE122_Heap_Based_Buffer_Overflow__c_CWE805_int_loop_68_badData : !cir.ptr<!s32i> {alignment = 8 : i64} loc(#loc77)
  cir.func private @printIntLine(!s32i) loc(#loc78)
  cir.func private @free(!cir.ptr<!void>) extra(#fn_attr) loc(#loc79)
  cir.func no_proto @CWE122_Heap_Based_Buffer_Overflow__c_CWE805_int_loop_68b_badSink() extra(#fn_attr1) {
    %0 = cir.alloca !cir.ptr<!s32i>, !cir.ptr<!cir.ptr<!s32i>>, ["data", init] {alignment = 8 : i64} loc(#loc81)
    %1 = cir.get_global @CWE122_Heap_Based_Buffer_Overflow__c_CWE805_int_loop_68_badData : !cir.ptr<!cir.ptr<!s32i>> loc(#loc77)
    %2 = cir.load %1 : !cir.ptr<!cir.ptr<!s32i>>, !cir.ptr<!s32i> loc(#loc10)
    cir.store %2, %0 : !cir.ptr<!s32i>, !cir.ptr<!cir.ptr<!s32i>> loc(#loc81)
    cir.scope {
      %3 = cir.alloca !cir.array<!s32i x 100>, !cir.ptr<!cir.array<!s32i x 100>>, ["source"] {alignment = 16 : i64} loc(#loc83)
      %4 = cir.const #cir.zero : !cir.array<!s32i x 100> loc(#loc83)
      cir.store %4, %3 : !cir.array<!s32i x 100>, !cir.ptr<!cir.array<!s32i x 100>> loc(#loc83)
      cir.scope {
        %5 = cir.alloca !u64i, !cir.ptr<!u64i>, ["i"] {alignment = 8 : i64} loc(#loc85)
        cir.scope {
          %13 = cir.const #cir.int<0> : !s32i loc(#loc21)
          %14 = cir.cast(integral, %13 : !s32i), !u64i loc(#loc21)
          cir.store %14, %5 : !u64i, !cir.ptr<!u64i> loc(#loc87)
          cir.for : cond {
            %15 = cir.load %5 : !cir.ptr<!u64i>, !u64i loc(#loc23)
            %16 = cir.const #cir.int<100> : !s32i loc(#loc24)
            %17 = cir.cast(integral, %16 : !s32i), !u64i loc(#loc24)
            %18 = cir.cmp(lt, %15, %17) : !u64i, !cir.bool loc(#loc88)
            cir.condition(%18) loc(#loc25)
          } body {
            cir.scope {
              %15 = cir.load %5 : !cir.ptr<!u64i>, !u64i loc(#loc27)
              %16 = cir.cast(array_to_ptrdecay, %3 : !cir.ptr<!cir.array<!s32i x 100>>), !cir.ptr<!s32i> loc(#loc28)
              %17 = cir.ptr_stride(%16 : !cir.ptr<!s32i>, %15 : !u64i), !cir.ptr<!s32i> loc(#loc28)
              %18 = cir.load %17 : !cir.ptr<!s32i>, !s32i loc(#loc28)
              %19 = cir.load %0 : !cir.ptr<!cir.ptr<!s32i>>, !cir.ptr<!s32i> loc(#loc29)
              %20 = cir.load %5 : !cir.ptr<!u64i>, !u64i loc(#loc30)
              %21 = cir.ptr_stride(%19 : !cir.ptr<!s32i>, %20 : !u64i), !cir.ptr<!s32i> loc(#loc31)
              cir.store %18, %21 : !s32i, !cir.ptr<!s32i> loc(#loc90)
            } loc(#loc89)
            cir.yield loc(#loc20)
          } step {
            %15 = cir.load %5 : !cir.ptr<!u64i>, !u64i loc(#loc33)
            %16 = cir.unary(inc, %15) : !u64i, !u64i loc(#loc34)
            cir.store %16, %5 : !u64i, !cir.ptr<!u64i> loc(#loc91)
            cir.yield loc(#loc86)
          } loc(#loc86)
        } loc(#loc86)
        %6 = cir.load %0 : !cir.ptr<!cir.ptr<!s32i>>, !cir.ptr<!s32i> loc(#loc35)
        %7 = cir.const #cir.int<0> : !s32i loc(#loc36)
        %8 = cir.ptr_stride(%6 : !cir.ptr<!s32i>, %7 : !s32i), !cir.ptr<!s32i> loc(#loc37)
        %9 = cir.load %8 : !cir.ptr<!s32i>, !s32i loc(#loc35)
        cir.call @printIntLine(%9) : (!s32i) -> () loc(#loc38)
        %10 = cir.get_global @free : !cir.ptr<!cir.func<(!cir.ptr<!void>)>> loc(#loc39)
        %11 = cir.load %0 : !cir.ptr<!cir.ptr<!s32i>>, !cir.ptr<!s32i> loc(#loc40)
        %12 = cir.cast(bitcast, %11 : !cir.ptr<!s32i>), !cir.ptr<!void> loc(#loc40)
        cir.call @free(%12) : (!cir.ptr<!void>) -> () extra(#fn_attr) loc(#loc39)
      } loc(#loc84)
    } loc(#loc82)
    cir.return loc(#loc8)
  } loc(#loc80)
  cir.global "private" external @CWE122_Heap_Based_Buffer_Overflow__c_CWE805_int_loop_68_goodG2BData : !cir.ptr<!s32i> {alignment = 8 : i64} loc(#loc92)
  cir.func no_proto @CWE122_Heap_Based_Buffer_Overflow__c_CWE805_int_loop_68b_goodG2BSink() extra(#fn_attr1) {
    %0 = cir.alloca !cir.ptr<!s32i>, !cir.ptr<!cir.ptr<!s32i>>, ["data", init] {alignment = 8 : i64} loc(#loc94)
    %1 = cir.get_global @CWE122_Heap_Based_Buffer_Overflow__c_CWE805_int_loop_68_goodG2BData : !cir.ptr<!cir.ptr<!s32i>> loc(#loc92)
    %2 = cir.load %1 : !cir.ptr<!cir.ptr<!s32i>>, !cir.ptr<!s32i> loc(#loc46)
    cir.store %2, %0 : !cir.ptr<!s32i>, !cir.ptr<!cir.ptr<!s32i>> loc(#loc94)
    cir.scope {
      %3 = cir.alloca !cir.array<!s32i x 100>, !cir.ptr<!cir.array<!s32i x 100>>, ["source"] {alignment = 16 : i64} loc(#loc96)
      %4 = cir.const #cir.zero : !cir.array<!s32i x 100> loc(#loc96)
      cir.store %4, %3 : !cir.array<!s32i x 100>, !cir.ptr<!cir.array<!s32i x 100>> loc(#loc96)
      cir.scope {
        %5 = cir.alloca !u64i, !cir.ptr<!u64i>, ["i"] {alignment = 8 : i64} loc(#loc98)
        cir.scope {
          %13 = cir.const #cir.int<0> : !s32i loc(#loc57)
          %14 = cir.cast(integral, %13 : !s32i), !u64i loc(#loc57)
          cir.store %14, %5 : !u64i, !cir.ptr<!u64i> loc(#loc100)
          cir.for : cond {
            %15 = cir.load %5 : !cir.ptr<!u64i>, !u64i loc(#loc59)
            %16 = cir.const #cir.int<100> : !s32i loc(#loc60)
            %17 = cir.cast(integral, %16 : !s32i), !u64i loc(#loc60)
            %18 = cir.cmp(lt, %15, %17) : !u64i, !cir.bool loc(#loc101)
            cir.condition(%18) loc(#loc61)
          } body {
            cir.scope {
              %15 = cir.load %5 : !cir.ptr<!u64i>, !u64i loc(#loc63)
              %16 = cir.cast(array_to_ptrdecay, %3 : !cir.ptr<!cir.array<!s32i x 100>>), !cir.ptr<!s32i> loc(#loc64)
              %17 = cir.ptr_stride(%16 : !cir.ptr<!s32i>, %15 : !u64i), !cir.ptr<!s32i> loc(#loc64)
              %18 = cir.load %17 : !cir.ptr<!s32i>, !s32i loc(#loc64)
              %19 = cir.load %0 : !cir.ptr<!cir.ptr<!s32i>>, !cir.ptr<!s32i> loc(#loc65)
              %20 = cir.load %5 : !cir.ptr<!u64i>, !u64i loc(#loc66)
              %21 = cir.ptr_stride(%19 : !cir.ptr<!s32i>, %20 : !u64i), !cir.ptr<!s32i> loc(#loc67)
              cir.store %18, %21 : !s32i, !cir.ptr<!s32i> loc(#loc103)
            } loc(#loc102)
            cir.yield loc(#loc56)
          } step {
            %15 = cir.load %5 : !cir.ptr<!u64i>, !u64i loc(#loc69)
            %16 = cir.unary(inc, %15) : !u64i, !u64i loc(#loc70)
            cir.store %16, %5 : !u64i, !cir.ptr<!u64i> loc(#loc104)
            cir.yield loc(#loc99)
          } loc(#loc99)
        } loc(#loc99)
        %6 = cir.load %0 : !cir.ptr<!cir.ptr<!s32i>>, !cir.ptr<!s32i> loc(#loc71)
        %7 = cir.const #cir.int<0> : !s32i loc(#loc72)
        %8 = cir.ptr_stride(%6 : !cir.ptr<!s32i>, %7 : !s32i), !cir.ptr<!s32i> loc(#loc73)
        %9 = cir.load %8 : !cir.ptr<!s32i>, !s32i loc(#loc71)
        cir.call @printIntLine(%9) : (!s32i) -> () loc(#loc74)
        %10 = cir.get_global @free : !cir.ptr<!cir.func<(!cir.ptr<!void>)>> loc(#loc75)
        %11 = cir.load %0 : !cir.ptr<!cir.ptr<!s32i>>, !cir.ptr<!s32i> loc(#loc76)
        %12 = cir.cast(bitcast, %11 : !cir.ptr<!s32i>), !cir.ptr<!void> loc(#loc76)
        cir.call @free(%12) : (!cir.ptr<!void>) -> () extra(#fn_attr) loc(#loc75)
      } loc(#loc97)
    } loc(#loc95)
    cir.return loc(#loc44)
  } loc(#loc93)
} loc(#loc)
#loc = loc("/workspaces/juliet-c/testcases/CWE122_Heap_Based_Buffer_Overflow/s08/CWE122_Heap_Based_Buffer_Overflow__c_CWE805_int_loop_68b.c":0:0)
#loc1 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_int_loop_68b.c":19:1)
#loc2 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_int_loop_68b.c":19:14)
#loc3 = loc("../../../testcasesupport/std_testcase_io.h":18:1)
#loc4 = loc("../../../testcasesupport/std_testcase_io.h":18:33)
#loc5 = loc("/usr/include/stdlib.h":687:1)
#loc6 = loc("/usr/include/stdlib.h":687:32)
#loc7 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_int_loop_68b.c":26:1)
#loc8 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_int_loop_68b.c":42:1)
#loc9 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_int_loop_68b.c":28:5)
#loc10 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_int_loop_68b.c":28:18)
#loc11 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_int_loop_68b.c":29:5)
#loc12 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_int_loop_68b.c":41:5)
#loc13 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_int_loop_68b.c":30:9)
#loc14 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_int_loop_68b.c":30:29)
#loc15 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_int_loop_68b.c":31:9)
#loc16 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_int_loop_68b.c":40:9)
#loc17 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_int_loop_68b.c":32:13)
#loc18 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_int_loop_68b.c":32:20)
#loc19 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_int_loop_68b.c":34:13)
#loc20 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_int_loop_68b.c":37:13)
#loc21 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_int_loop_68b.c":34:22)
#loc22 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_int_loop_68b.c":34:18)
#loc23 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_int_loop_68b.c":34:25)
#loc24 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_int_loop_68b.c":34:29)
#loc25 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_int_loop_68b.c":34:27)
#loc26 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_int_loop_68b.c":35:13)
#loc27 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_int_loop_68b.c":36:34)
#loc28 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_int_loop_68b.c":36:27)
#loc29 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_int_loop_68b.c":36:17)
#loc30 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_int_loop_68b.c":36:22)
#loc31 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_int_loop_68b.c":36:23)
#loc32 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_int_loop_68b.c":36:35)
#loc33 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_int_loop_68b.c":34:35)
#loc34 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_int_loop_68b.c":34:34)
#loc35 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_int_loop_68b.c":38:26)
#loc36 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_int_loop_68b.c":38:31)
#loc37 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_int_loop_68b.c":38:32)
#loc38 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_int_loop_68b.c":38:13)
#loc39 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_int_loop_68b.c":39:13)
#loc40 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_int_loop_68b.c":39:18)
#loc41 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_int_loop_68b.c":20:1)
#loc42 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_int_loop_68b.c":20:14)
#loc43 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_int_loop_68b.c":49:1)
#loc44 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_int_loop_68b.c":65:1)
#loc45 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_int_loop_68b.c":51:5)
#loc46 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_int_loop_68b.c":51:18)
#loc47 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_int_loop_68b.c":52:5)
#loc48 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_int_loop_68b.c":64:5)
#loc49 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_int_loop_68b.c":53:9)
#loc50 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_int_loop_68b.c":53:29)
#loc51 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_int_loop_68b.c":54:9)
#loc52 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_int_loop_68b.c":63:9)
#loc53 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_int_loop_68b.c":55:13)
#loc54 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_int_loop_68b.c":55:20)
#loc55 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_int_loop_68b.c":57:13)
#loc56 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_int_loop_68b.c":60:13)
#loc57 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_int_loop_68b.c":57:22)
#loc58 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_int_loop_68b.c":57:18)
#loc59 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_int_loop_68b.c":57:25)
#loc60 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_int_loop_68b.c":57:29)
#loc61 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_int_loop_68b.c":57:27)
#loc62 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_int_loop_68b.c":58:13)
#loc63 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_int_loop_68b.c":59:34)
#loc64 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_int_loop_68b.c":59:27)
#loc65 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_int_loop_68b.c":59:17)
#loc66 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_int_loop_68b.c":59:22)
#loc67 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_int_loop_68b.c":59:23)
#loc68 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_int_loop_68b.c":59:35)
#loc69 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_int_loop_68b.c":57:35)
#loc70 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_int_loop_68b.c":57:34)
#loc71 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_int_loop_68b.c":61:26)
#loc72 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_int_loop_68b.c":61:31)
#loc73 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_int_loop_68b.c":61:32)
#loc74 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_int_loop_68b.c":61:13)
#loc75 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_int_loop_68b.c":62:13)
#loc76 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_int_loop_68b.c":62:18)
#loc77 = loc(fused[#loc1, #loc2])
#loc78 = loc(fused[#loc3, #loc4])
#loc79 = loc(fused[#loc5, #loc6])
#loc80 = loc(fused[#loc7, #loc8])
#loc81 = loc(fused[#loc9, #loc10])
#loc82 = loc(fused[#loc11, #loc12])
#loc83 = loc(fused[#loc13, #loc14])
#loc84 = loc(fused[#loc15, #loc16])
#loc85 = loc(fused[#loc17, #loc18])
#loc86 = loc(fused[#loc19, #loc20])
#loc87 = loc(fused[#loc22, #loc21])
#loc88 = loc(fused[#loc23, #loc24])
#loc89 = loc(fused[#loc26, #loc20])
#loc90 = loc(fused[#loc29, #loc32])
#loc91 = loc(fused[#loc34, #loc33])
#loc92 = loc(fused[#loc41, #loc42])
#loc93 = loc(fused[#loc43, #loc44])
#loc94 = loc(fused[#loc45, #loc46])
#loc95 = loc(fused[#loc47, #loc48])
#loc96 = loc(fused[#loc49, #loc50])
#loc97 = loc(fused[#loc51, #loc52])
#loc98 = loc(fused[#loc53, #loc54])
#loc99 = loc(fused[#loc55, #loc56])
#loc100 = loc(fused[#loc58, #loc57])
#loc101 = loc(fused[#loc59, #loc60])
#loc102 = loc(fused[#loc62, #loc56])
#loc103 = loc(fused[#loc65, #loc68])
#loc104 = loc(fused[#loc70, #loc69])
