!s32i = !cir.int<s, 32>
!s64i = !cir.int<s, 64>
!s8i = !cir.int<s, 8>
!u32i = !cir.int<u, 32>
!u64i = !cir.int<u, 64>
!void = !cir.void
#fn_attr = #cir<extra({inline = #cir.inline<no>, optnone = #cir.optnone})>
#fn_attr1 = #cir<extra({inline = #cir.inline<no>, nothrow = #cir.nothrow, optnone = #cir.optnone})>
#fn_attr2 = #cir<extra({nothrow = #cir.nothrow})>
#loc7 = loc("../../../testcasesupport/std_testcase.h":61:7)
#loc174 = loc("CWE762_Mismatched_Memory_Management_Routines__new_free_class_08.cpp":167:10)
#loc175 = loc("CWE762_Mismatched_Memory_Management_Routines__new_free_class_08.cpp":167:14)
#loc176 = loc("CWE762_Mismatched_Memory_Management_Routines__new_free_class_08.cpp":167:20)
#loc177 = loc("CWE762_Mismatched_Memory_Management_Routines__new_free_class_08.cpp":167:32)
!ty_TwoIntsClass = !cir.struct<class "TwoIntsClass" {!s32i, !s32i} #cir.record.decl.ast>
#loc269 = loc(fused[#loc174, #loc175])
#loc270 = loc(fused[#loc176, #loc177])
module @"/home/ladisgin/git_proj/juliet-c/testcases/CWE762_Mismatched_Memory_Management_Routines/s06/CWE762_Mismatched_Memory_Management_Routines__new_free_class_08.cpp" attributes {cir.lang = #cir.lang<cxx>, cir.sob = #cir.signed_overflow_behavior<undefined>, cir.triple = "x86_64-unknown-linux-gnu", dlti.dl_spec = #dlti.dl_spec<i32 = dense<32> : vector<2xi64>, f16 = dense<16> : vector<2xi64>, i16 = dense<16> : vector<2xi64>, i1 = dense<8> : vector<2xi64>, i8 = dense<8> : vector<2xi64>, !llvm.ptr = dense<64> : vector<4xi64>, i128 = dense<128> : vector<2xi64>, i64 = dense<64> : vector<2xi64>, f80 = dense<128> : vector<2xi64>, !llvm.ptr<270> = dense<32> : vector<4xi64>, f64 = dense<64> : vector<2xi64>, f128 = dense<128> : vector<2xi64>, !llvm.ptr<272> = dense<64> : vector<4xi64>, !llvm.ptr<271> = dense<32> : vector<4xi64>, "dlti.endianness" = "little", "dlti.stack_alignment" = 128 : i64>} {
  cir.func internal private @_ZL17staticReturnsTruev() -> !s32i extra(#fn_attr) {
    %0 = cir.alloca !s32i, !cir.ptr<!s32i>, ["__retval"] {alignment = 4 : i64} loc(#loc2)
    %1 = cir.const #cir.int<1> : !s32i loc(#loc3)
    cir.store %1, %0 : !s32i, !cir.ptr<!s32i> loc(#loc191)
    %2 = cir.load %0 : !cir.ptr<!s32i>, !s32i loc(#loc191)
    cir.return %2 : !s32i loc(#loc191)
  } loc(#loc190)
  cir.func private @_Znwm(!u64i) -> !cir.ptr<!void> loc(#loc192)
  cir.func linkonce_odr @_ZN12TwoIntsClassC2Ev(%arg0: !cir.ptr<!ty_TwoIntsClass> loc("../../../testcasesupport/std_testcase.h":61:7)) extra(#fn_attr1) {
    %0 = cir.alloca !cir.ptr<!ty_TwoIntsClass>, !cir.ptr<!cir.ptr<!ty_TwoIntsClass>>, ["this", init] {alignment = 8 : i64} loc(#loc7)
    cir.store %arg0, %0 : !cir.ptr<!ty_TwoIntsClass>, !cir.ptr<!cir.ptr<!ty_TwoIntsClass>> loc(#loc7)
    %1 = cir.load %0 : !cir.ptr<!cir.ptr<!ty_TwoIntsClass>>, !cir.ptr<!ty_TwoIntsClass> loc(#loc7)
    cir.return loc(#loc7)
  } loc(#loc7)
  cir.func private @free(!cir.ptr<!void>) extra(#fn_attr2) loc(#loc193)
  cir.func @_ZN63CWE762_Mismatched_Memory_Management_Routines__new_free_class_083badEv() extra(#fn_attr) {
    %0 = cir.alloca !cir.ptr<!ty_TwoIntsClass>, !cir.ptr<!cir.ptr<!ty_TwoIntsClass>>, ["data"] {alignment = 8 : i64} loc(#loc195)
    %1 = cir.const #cir.ptr<null> : !cir.ptr<!ty_TwoIntsClass> loc(#loc14)
    cir.store %1, %0 : !cir.ptr<!ty_TwoIntsClass>, !cir.ptr<!cir.ptr<!ty_TwoIntsClass>> loc(#loc196)
    cir.br ^bb1 loc(#loc197)
  ^bb1:  // pred: ^bb0
    %2 = cir.call @_ZL17staticReturnsTruev() : () -> !s32i loc(#loc18)
    %3 = cir.cast(int_to_bool, %2 : !s32i), !cir.bool loc(#loc198)
    cir.brcond %3 ^bb2, ^bb3 loc(#loc199)
  ^bb2:  // pred: ^bb1
    %4 = cir.const #cir.int<8> : !u64i loc(#loc200)
    %5 = cir.call @_Znwm(%4) : (!u64i) -> !cir.ptr<!void> loc(#loc23)
    %6 = cir.cast(bitcast, %5 : !cir.ptr<!void>), !cir.ptr<!ty_TwoIntsClass> loc(#loc200)
    cir.call @_ZN12TwoIntsClassC2Ev(%6) : (!cir.ptr<!ty_TwoIntsClass>) -> () extra(#fn_attr2) loc(#loc22)
    cir.store %6, %0 : !cir.ptr<!ty_TwoIntsClass>, !cir.ptr<!cir.ptr<!ty_TwoIntsClass>> loc(#loc201)
    cir.br ^bb3 loc(#loc17)
  ^bb3:  // 2 preds: ^bb1, ^bb2
    cir.br ^bb4 loc(#loc17)
  ^bb4:  // pred: ^bb3
    cir.br ^bb5 loc(#loc202)
  ^bb5:  // pred: ^bb4
    %7 = cir.call @_ZL17staticReturnsTruev() : () -> !s32i loc(#loc27)
    %8 = cir.cast(int_to_bool, %7 : !s32i), !cir.bool loc(#loc203)
    cir.brcond %8 ^bb6, ^bb7 loc(#loc204)
  ^bb6:  // pred: ^bb5
    %9 = cir.get_global @free : !cir.ptr<!cir.func<!void (!cir.ptr<!void>)>> loc(#loc30)
    %10 = cir.load %0 : !cir.ptr<!cir.ptr<!ty_TwoIntsClass>>, !cir.ptr<!ty_TwoIntsClass> loc(#loc31)
    %11 = cir.cast(bitcast, %10 : !cir.ptr<!ty_TwoIntsClass>), !cir.ptr<!void> loc(#loc31)
    cir.call @free(%11) : (!cir.ptr<!void>) -> () extra(#fn_attr2) loc(#loc30)
    cir.br ^bb7 loc(#loc26)
  ^bb7:  // 2 preds: ^bb5, ^bb6
    cir.br ^bb8 loc(#loc26)
  ^bb8:  // pred: ^bb7
    cir.return loc(#loc11)
  } loc(#loc194)
  cir.func internal private @_ZL18staticReturnsFalsev() -> !s32i extra(#fn_attr) {
    %0 = cir.alloca !s32i, !cir.ptr<!s32i>, ["__retval"] {alignment = 4 : i64} loc(#loc33)
    %1 = cir.const #cir.int<0> : !s32i loc(#loc34)
    cir.store %1, %0 : !s32i, !cir.ptr<!s32i> loc(#loc206)
    %2 = cir.load %0 : !cir.ptr<!s32i>, !s32i loc(#loc206)
    cir.return %2 : !s32i loc(#loc206)
  } loc(#loc205)
  cir.global "private" constant cir_private dsolocal @".str.4" = #cir.const_array<"Benign, fixed string\00" : !cir.array<!s8i x 21>> : !cir.array<!s8i x 21> {alignment = 1 : i64} loc(#loc36)
  cir.func private @_ZdlPv(!cir.ptr<!void>) extra(#fn_attr2) loc(#loc207)
  cir.func internal private @_ZN63CWE762_Mismatched_Memory_Management_Routines__new_free_class_08L8goodB2G1Ev() extra(#fn_attr) {
    %0 = cir.alloca !cir.ptr<!ty_TwoIntsClass>, !cir.ptr<!cir.ptr<!ty_TwoIntsClass>>, ["data"] {alignment = 8 : i64} loc(#loc209)
    %1 = cir.const #cir.ptr<null> : !cir.ptr<!ty_TwoIntsClass> loc(#loc43)
    cir.store %1, %0 : !cir.ptr<!ty_TwoIntsClass>, !cir.ptr<!cir.ptr<!ty_TwoIntsClass>> loc(#loc210)
    cir.br ^bb1 loc(#loc211)
  ^bb1:  // pred: ^bb0
    %2 = cir.call @_ZL17staticReturnsTruev() : () -> !s32i loc(#loc47)
    %3 = cir.cast(int_to_bool, %2 : !s32i), !cir.bool loc(#loc212)
    cir.brcond %3 ^bb2, ^bb3 loc(#loc213)
  ^bb2:  // pred: ^bb1
    %4 = cir.const #cir.int<8> : !u64i loc(#loc214)
    %5 = cir.call @_Znwm(%4) : (!u64i) -> !cir.ptr<!void> loc(#loc52)
    %6 = cir.cast(bitcast, %5 : !cir.ptr<!void>), !cir.ptr<!ty_TwoIntsClass> loc(#loc214)
    cir.call @_ZN12TwoIntsClassC2Ev(%6) : (!cir.ptr<!ty_TwoIntsClass>) -> () extra(#fn_attr2) loc(#loc51)
    cir.store %6, %0 : !cir.ptr<!ty_TwoIntsClass>, !cir.ptr<!cir.ptr<!ty_TwoIntsClass>> loc(#loc215)
    cir.br ^bb3 loc(#loc46)
  ^bb3:  // 2 preds: ^bb1, ^bb2
    cir.br ^bb4 loc(#loc46)
  ^bb4:  // pred: ^bb3
    cir.br ^bb5 loc(#loc216)
  ^bb5:  // pred: ^bb4
    %7 = cir.call @_ZL18staticReturnsFalsev() : () -> !s32i loc(#loc56)
    %8 = cir.cast(int_to_bool, %7 : !s32i), !cir.bool loc(#loc217)
    cir.brcond %8 ^bb6, ^bb7 loc(#loc218)
  ^bb6:  // pred: ^bb5
    %9 = cir.get_global @".str.4" : !cir.ptr<!cir.array<!s8i x 21>> loc(#loc36)
    %10 = cir.cast(array_to_ptrdecay, %9 : !cir.ptr<!cir.array<!s8i x 21>>), !cir.ptr<!s8i> loc(#loc36)
    cir.call @printLine(%10) : (!cir.ptr<!s8i>) -> () loc(#loc61)
    cir.br ^bb8 loc(#loc59)
  ^bb7:  // pred: ^bb5
    %11 = cir.load %0 : !cir.ptr<!cir.ptr<!ty_TwoIntsClass>>, !cir.ptr<!ty_TwoIntsClass> loc(#loc62)
    %12 = cir.cast(bitcast, %11 : !cir.ptr<!ty_TwoIntsClass>), !cir.ptr<!void> loc(#loc62)
    cir.call @_ZdlPv(%12) : (!cir.ptr<!void>) -> () extra(#fn_attr2) loc(#loc52)
    cir.br ^bb8 loc(#loc55)
  ^bb8:  // 2 preds: ^bb6, ^bb7
    cir.br ^bb9 loc(#loc55)
  ^bb9:  // pred: ^bb8
    cir.return loc(#loc40)
  } loc(#loc208)
  cir.func internal private @_ZN63CWE762_Mismatched_Memory_Management_Routines__new_free_class_08L8goodB2G2Ev() extra(#fn_attr) {
    %0 = cir.alloca !cir.ptr<!ty_TwoIntsClass>, !cir.ptr<!cir.ptr<!ty_TwoIntsClass>>, ["data"] {alignment = 8 : i64} loc(#loc220)
    %1 = cir.const #cir.ptr<null> : !cir.ptr<!ty_TwoIntsClass> loc(#loc67)
    cir.store %1, %0 : !cir.ptr<!ty_TwoIntsClass>, !cir.ptr<!cir.ptr<!ty_TwoIntsClass>> loc(#loc221)
    cir.br ^bb1 loc(#loc222)
  ^bb1:  // pred: ^bb0
    %2 = cir.call @_ZL17staticReturnsTruev() : () -> !s32i loc(#loc71)
    %3 = cir.cast(int_to_bool, %2 : !s32i), !cir.bool loc(#loc223)
    cir.brcond %3 ^bb2, ^bb3 loc(#loc224)
  ^bb2:  // pred: ^bb1
    %4 = cir.const #cir.int<8> : !u64i loc(#loc225)
    %5 = cir.call @_Znwm(%4) : (!u64i) -> !cir.ptr<!void> loc(#loc76)
    %6 = cir.cast(bitcast, %5 : !cir.ptr<!void>), !cir.ptr<!ty_TwoIntsClass> loc(#loc225)
    cir.call @_ZN12TwoIntsClassC2Ev(%6) : (!cir.ptr<!ty_TwoIntsClass>) -> () extra(#fn_attr2) loc(#loc75)
    cir.store %6, %0 : !cir.ptr<!ty_TwoIntsClass>, !cir.ptr<!cir.ptr<!ty_TwoIntsClass>> loc(#loc226)
    cir.br ^bb3 loc(#loc70)
  ^bb3:  // 2 preds: ^bb1, ^bb2
    cir.br ^bb4 loc(#loc70)
  ^bb4:  // pred: ^bb3
    cir.br ^bb5 loc(#loc227)
  ^bb5:  // pred: ^bb4
    %7 = cir.call @_ZL17staticReturnsTruev() : () -> !s32i loc(#loc80)
    %8 = cir.cast(int_to_bool, %7 : !s32i), !cir.bool loc(#loc228)
    cir.brcond %8 ^bb6, ^bb7 loc(#loc229)
  ^bb6:  // pred: ^bb5
    %9 = cir.load %0 : !cir.ptr<!cir.ptr<!ty_TwoIntsClass>>, !cir.ptr<!ty_TwoIntsClass> loc(#loc83)
    %10 = cir.cast(bitcast, %9 : !cir.ptr<!ty_TwoIntsClass>), !cir.ptr<!void> loc(#loc83)
    cir.call @_ZdlPv(%10) : (!cir.ptr<!void>) -> () extra(#fn_attr2) loc(#loc76)
    cir.br ^bb7 loc(#loc79)
  ^bb7:  // 2 preds: ^bb5, ^bb6
    cir.br ^bb8 loc(#loc79)
  ^bb8:  // pred: ^bb7
    cir.return loc(#loc64)
  } loc(#loc219)
  cir.func private @malloc(!u64i) -> !cir.ptr<!void> extra(#fn_attr2) loc(#loc230)
  cir.func private @exit(!s32i) extra(#fn_attr2) loc(#loc231)
  cir.func internal private @_ZN63CWE762_Mismatched_Memory_Management_Routines__new_free_class_08L8goodG2B1Ev() extra(#fn_attr) {
    %0 = cir.alloca !cir.ptr<!ty_TwoIntsClass>, !cir.ptr<!cir.ptr<!ty_TwoIntsClass>>, ["data"] {alignment = 8 : i64} loc(#loc233)
    %1 = cir.const #cir.ptr<null> : !cir.ptr<!ty_TwoIntsClass> loc(#loc92)
    cir.store %1, %0 : !cir.ptr<!ty_TwoIntsClass>, !cir.ptr<!cir.ptr<!ty_TwoIntsClass>> loc(#loc234)
    cir.br ^bb1 loc(#loc235)
  ^bb1:  // pred: ^bb0
    %2 = cir.call @_ZL18staticReturnsFalsev() : () -> !s32i loc(#loc96)
    %3 = cir.cast(int_to_bool, %2 : !s32i), !cir.bool loc(#loc236)
    cir.brcond %3 ^bb2, ^bb3 loc(#loc237)
  ^bb2:  // pred: ^bb1
    %4 = cir.get_global @".str.4" : !cir.ptr<!cir.array<!s8i x 21>> loc(#loc101)
    %5 = cir.cast(array_to_ptrdecay, %4 : !cir.ptr<!cir.array<!s8i x 21>>), !cir.ptr<!s8i> loc(#loc101)
    cir.call @printLine(%5) : (!cir.ptr<!s8i>) -> () loc(#loc102)
    cir.br ^bb8 loc(#loc99)
  ^bb3:  // pred: ^bb1
    %6 = cir.get_global @malloc : !cir.ptr<!cir.func<!cir.ptr<!void> (!u64i)>> loc(#loc103)
    %7 = cir.const #cir.int<100> : !s32i loc(#loc104)
    %8 = cir.cast(integral, %7 : !s32i), !u64i loc(#loc104)
    %9 = cir.const #cir.int<8> : !u64i loc(#loc238)
    %10 = cir.binop(mul, %8, %9) : !u64i loc(#loc239)
    %11 = cir.call @malloc(%10) : (!u64i) -> !cir.ptr<!void> extra(#fn_attr2) loc(#loc103)
    %12 = cir.cast(bitcast, %11 : !cir.ptr<!void>), !cir.ptr<!ty_TwoIntsClass> loc(#loc240)
    cir.store %12, %0 : !cir.ptr<!ty_TwoIntsClass>, !cir.ptr<!cir.ptr<!ty_TwoIntsClass>> loc(#loc241)
    cir.br ^bb4 loc(#loc242)
  ^bb4:  // pred: ^bb3
    %13 = cir.load %0 : !cir.ptr<!cir.ptr<!ty_TwoIntsClass>>, !cir.ptr<!ty_TwoIntsClass> loc(#loc111)
    %14 = cir.const #cir.ptr<null> : !cir.ptr<!ty_TwoIntsClass> loc(#loc112)
    %15 = cir.cmp(eq, %13, %14) : !cir.ptr<!ty_TwoIntsClass>, !cir.bool loc(#loc243)
    cir.brcond %15 ^bb5, ^bb6 loc(#loc244)
  ^bb5:  // pred: ^bb4
    %16 = cir.get_global @exit : !cir.ptr<!cir.func<!void (!s32i)>> loc(#loc114)
    %17 = cir.const #cir.int<1> : !s32i loc(#loc115)
    %18 = cir.unary(minus, %17) : !s32i, !s32i loc(#loc116)
    cir.call @exit(%18) : (!s32i) -> () extra(#fn_attr2) loc(#loc114)
    cir.br ^bb6 loc(#loc110)
  ^bb6:  // 2 preds: ^bb4, ^bb5
    cir.br ^bb7 loc(#loc110)
  ^bb7:  // pred: ^bb6
    cir.br ^bb8 loc(#loc95)
  ^bb8:  // 2 preds: ^bb2, ^bb7
    cir.br ^bb9 loc(#loc95)
  ^bb9:  // pred: ^bb8
    cir.br ^bb10 loc(#loc245)
  ^bb10:  // pred: ^bb9
    %19 = cir.call @_ZL17staticReturnsTruev() : () -> !s32i loc(#loc119)
    %20 = cir.cast(int_to_bool, %19 : !s32i), !cir.bool loc(#loc246)
    cir.brcond %20 ^bb11, ^bb12 loc(#loc247)
  ^bb11:  // pred: ^bb10
    %21 = cir.get_global @free : !cir.ptr<!cir.func<!void (!cir.ptr<!void>)>> loc(#loc122)
    %22 = cir.load %0 : !cir.ptr<!cir.ptr<!ty_TwoIntsClass>>, !cir.ptr<!ty_TwoIntsClass> loc(#loc123)
    %23 = cir.cast(bitcast, %22 : !cir.ptr<!ty_TwoIntsClass>), !cir.ptr<!void> loc(#loc123)
    cir.call @free(%23) : (!cir.ptr<!void>) -> () extra(#fn_attr2) loc(#loc122)
    cir.br ^bb12 loc(#loc118)
  ^bb12:  // 2 preds: ^bb10, ^bb11
    cir.br ^bb13 loc(#loc118)
  ^bb13:  // pred: ^bb12
    cir.return loc(#loc89)
  } loc(#loc232)
  cir.func internal private @_ZN63CWE762_Mismatched_Memory_Management_Routines__new_free_class_08L8goodG2B2Ev() extra(#fn_attr) {
    %0 = cir.alloca !cir.ptr<!ty_TwoIntsClass>, !cir.ptr<!cir.ptr<!ty_TwoIntsClass>>, ["data"] {alignment = 8 : i64} loc(#loc249)
    %1 = cir.const #cir.ptr<null> : !cir.ptr<!ty_TwoIntsClass> loc(#loc128)
    cir.store %1, %0 : !cir.ptr<!ty_TwoIntsClass>, !cir.ptr<!cir.ptr<!ty_TwoIntsClass>> loc(#loc250)
    cir.br ^bb1 loc(#loc251)
  ^bb1:  // pred: ^bb0
    %2 = cir.call @_ZL17staticReturnsTruev() : () -> !s32i loc(#loc132)
    %3 = cir.cast(int_to_bool, %2 : !s32i), !cir.bool loc(#loc252)
    cir.brcond %3 ^bb2, ^bb7 loc(#loc253)
  ^bb2:  // pred: ^bb1
    %4 = cir.get_global @malloc : !cir.ptr<!cir.func<!cir.ptr<!void> (!u64i)>> loc(#loc135)
    %5 = cir.const #cir.int<100> : !s32i loc(#loc136)
    %6 = cir.cast(integral, %5 : !s32i), !u64i loc(#loc136)
    %7 = cir.const #cir.int<8> : !u64i loc(#loc254)
    %8 = cir.binop(mul, %6, %7) : !u64i loc(#loc255)
    %9 = cir.call @malloc(%8) : (!u64i) -> !cir.ptr<!void> extra(#fn_attr2) loc(#loc135)
    %10 = cir.cast(bitcast, %9 : !cir.ptr<!void>), !cir.ptr<!ty_TwoIntsClass> loc(#loc256)
    cir.store %10, %0 : !cir.ptr<!ty_TwoIntsClass>, !cir.ptr<!cir.ptr<!ty_TwoIntsClass>> loc(#loc257)
    cir.br ^bb3 loc(#loc258)
  ^bb3:  // pred: ^bb2
    %11 = cir.load %0 : !cir.ptr<!cir.ptr<!ty_TwoIntsClass>>, !cir.ptr<!ty_TwoIntsClass> loc(#loc143)
    %12 = cir.const #cir.ptr<null> : !cir.ptr<!ty_TwoIntsClass> loc(#loc144)
    %13 = cir.cmp(eq, %11, %12) : !cir.ptr<!ty_TwoIntsClass>, !cir.bool loc(#loc259)
    cir.brcond %13 ^bb4, ^bb5 loc(#loc260)
  ^bb4:  // pred: ^bb3
    %14 = cir.get_global @exit : !cir.ptr<!cir.func<!void (!s32i)>> loc(#loc146)
    %15 = cir.const #cir.int<1> : !s32i loc(#loc147)
    %16 = cir.unary(minus, %15) : !s32i, !s32i loc(#loc148)
    cir.call @exit(%16) : (!s32i) -> () extra(#fn_attr2) loc(#loc146)
    cir.br ^bb5 loc(#loc142)
  ^bb5:  // 2 preds: ^bb3, ^bb4
    cir.br ^bb6 loc(#loc142)
  ^bb6:  // pred: ^bb5
    cir.br ^bb7 loc(#loc131)
  ^bb7:  // 2 preds: ^bb1, ^bb6
    cir.br ^bb8 loc(#loc131)
  ^bb8:  // pred: ^bb7
    cir.br ^bb9 loc(#loc261)
  ^bb9:  // pred: ^bb8
    %17 = cir.call @_ZL17staticReturnsTruev() : () -> !s32i loc(#loc151)
    %18 = cir.cast(int_to_bool, %17 : !s32i), !cir.bool loc(#loc262)
    cir.brcond %18 ^bb10, ^bb11 loc(#loc263)
  ^bb10:  // pred: ^bb9
    %19 = cir.get_global @free : !cir.ptr<!cir.func<!void (!cir.ptr<!void>)>> loc(#loc154)
    %20 = cir.load %0 : !cir.ptr<!cir.ptr<!ty_TwoIntsClass>>, !cir.ptr<!ty_TwoIntsClass> loc(#loc155)
    %21 = cir.cast(bitcast, %20 : !cir.ptr<!ty_TwoIntsClass>), !cir.ptr<!void> loc(#loc155)
    cir.call @free(%21) : (!cir.ptr<!void>) -> () extra(#fn_attr2) loc(#loc154)
    cir.br ^bb11 loc(#loc150)
  ^bb11:  // 2 preds: ^bb9, ^bb10
    cir.br ^bb12 loc(#loc150)
  ^bb12:  // pred: ^bb11
    cir.return loc(#loc125)
  } loc(#loc248)
  cir.func @_ZN63CWE762_Mismatched_Memory_Management_Routines__new_free_class_084goodEv() extra(#fn_attr) {
    cir.call @_ZN63CWE762_Mismatched_Memory_Management_Routines__new_free_class_08L8goodB2G1Ev() : () -> () loc(#loc158)
    cir.call @_ZN63CWE762_Mismatched_Memory_Management_Routines__new_free_class_08L8goodB2G2Ev() : () -> () loc(#loc159)
    cir.call @_ZN63CWE762_Mismatched_Memory_Management_Routines__new_free_class_08L8goodG2B1Ev() : () -> () loc(#loc160)
    cir.call @_ZN63CWE762_Mismatched_Memory_Management_Routines__new_free_class_08L8goodG2B2Ev() : () -> () loc(#loc161)
    cir.return loc(#loc157)
  } loc(#loc264)
  cir.func private @srand(!u32i) extra(#fn_attr2) loc(#loc265)
  cir.func private @time(!cir.ptr<!s64i>) -> !s64i extra(#fn_attr2) loc(#loc266)
  cir.func private @printLine(!cir.ptr<!s8i>) loc(#loc267)
  cir.global "private" constant cir_private dsolocal @".str" = #cir.const_array<"Calling good()...\00" : !cir.array<!s8i x 18>> : !cir.array<!s8i x 18> {alignment = 1 : i64} loc(#loc168)
  cir.global "private" constant cir_private dsolocal @".str.1" = #cir.const_array<"Finished good()\00" : !cir.array<!s8i x 16>> : !cir.array<!s8i x 16> {alignment = 1 : i64} loc(#loc169)
  cir.global "private" constant cir_private dsolocal @".str.2" = #cir.const_array<"Calling bad()...\00" : !cir.array<!s8i x 17>> : !cir.array<!s8i x 17> {alignment = 1 : i64} loc(#loc170)
  cir.global "private" constant cir_private dsolocal @".str.3" = #cir.const_array<"Finished bad()\00" : !cir.array<!s8i x 15>> : !cir.array<!s8i x 15> {alignment = 1 : i64} loc(#loc171)
  cir.func @main(%arg0: !s32i loc(fused[#loc174, #loc175]), %arg1: !cir.ptr<!cir.ptr<!s8i>> loc(fused[#loc176, #loc177])) -> !s32i extra(#fn_attr) {
    %0 = cir.alloca !s32i, !cir.ptr<!s32i>, ["argc", init] {alignment = 4 : i64} loc(#loc269)
    %1 = cir.alloca !cir.ptr<!cir.ptr<!s8i>>, !cir.ptr<!cir.ptr<!cir.ptr<!s8i>>>, ["argv", init] {alignment = 8 : i64} loc(#loc270)
    %2 = cir.alloca !s32i, !cir.ptr<!s32i>, ["__retval"] {alignment = 4 : i64} loc(#loc173)
    cir.store %arg0, %0 : !s32i, !cir.ptr<!s32i> loc(#loc178)
    cir.store %arg1, %1 : !cir.ptr<!cir.ptr<!s8i>>, !cir.ptr<!cir.ptr<!cir.ptr<!s8i>>> loc(#loc178)
    %3 = cir.const #cir.ptr<null> : !cir.ptr<!s64i> loc(#loc179)
    %4 = cir.call @time(%3) : (!cir.ptr<!s64i>) -> !s64i extra(#fn_attr2) loc(#loc180)
    %5 = cir.cast(integral, %4 : !s64i), !u32i loc(#loc180)
    cir.call @srand(%5) : (!u32i) -> () extra(#fn_attr2) loc(#loc181)
    %6 = cir.get_global @".str" : !cir.ptr<!cir.array<!s8i x 18>> loc(#loc168)
    %7 = cir.cast(array_to_ptrdecay, %6 : !cir.ptr<!cir.array<!s8i x 18>>), !cir.ptr<!s8i> loc(#loc168)
    cir.call @printLine(%7) : (!cir.ptr<!s8i>) -> () loc(#loc182)
    cir.call @_ZN63CWE762_Mismatched_Memory_Management_Routines__new_free_class_084goodEv() : () -> () loc(#loc183)
    %8 = cir.get_global @".str.1" : !cir.ptr<!cir.array<!s8i x 16>> loc(#loc169)
    %9 = cir.cast(array_to_ptrdecay, %8 : !cir.ptr<!cir.array<!s8i x 16>>), !cir.ptr<!s8i> loc(#loc169)
    cir.call @printLine(%9) : (!cir.ptr<!s8i>) -> () loc(#loc184)
    %10 = cir.get_global @".str.2" : !cir.ptr<!cir.array<!s8i x 17>> loc(#loc170)
    %11 = cir.cast(array_to_ptrdecay, %10 : !cir.ptr<!cir.array<!s8i x 17>>), !cir.ptr<!s8i> loc(#loc170)
    cir.call @printLine(%11) : (!cir.ptr<!s8i>) -> () loc(#loc185)
    cir.call @_ZN63CWE762_Mismatched_Memory_Management_Routines__new_free_class_083badEv() : () -> () loc(#loc186)
    %12 = cir.get_global @".str.3" : !cir.ptr<!cir.array<!s8i x 15>> loc(#loc171)
    %13 = cir.cast(array_to_ptrdecay, %12 : !cir.ptr<!cir.array<!s8i x 15>>), !cir.ptr<!s8i> loc(#loc171)
    cir.call @printLine(%13) : (!cir.ptr<!s8i>) -> () loc(#loc187)
    %14 = cir.const #cir.int<0> : !s32i loc(#loc188)
    cir.store %14, %2 : !s32i, !cir.ptr<!s32i> loc(#loc271)
    %15 = cir.load %2 : !cir.ptr<!s32i>, !s32i loc(#loc271)
    cir.return %15 : !s32i loc(#loc271)
  } loc(#loc268)
} loc(#loc)
#loc = loc("/home/ladisgin/git_proj/juliet-c/testcases/CWE762_Mismatched_Memory_Management_Routines/s06/CWE762_Mismatched_Memory_Management_Routines__new_free_class_08.cpp":0:0)
#loc1 = loc("CWE762_Mismatched_Memory_Management_Routines__new_free_class_08.cpp":23:1)
#loc2 = loc("CWE762_Mismatched_Memory_Management_Routines__new_free_class_08.cpp":26:1)
#loc3 = loc("CWE762_Mismatched_Memory_Management_Routines__new_free_class_08.cpp":25:12)
#loc4 = loc("CWE762_Mismatched_Memory_Management_Routines__new_free_class_08.cpp":25:5)
#loc5 = loc("/usr/lib/gcc/x86_64-redhat-linux/14/../../../../include/c++/14/new":131:20)
#loc6 = loc("/usr/lib/gcc/x86_64-redhat-linux/14/../../../../include/c++/14/new":132:41)
#loc8 = loc("/usr/include/stdlib.h":687:1)
#loc9 = loc("/usr/include/stdlib.h":687:32)
#loc10 = loc("CWE762_Mismatched_Memory_Management_Routines__new_free_class_08.cpp":38:1)
#loc11 = loc("CWE762_Mismatched_Memory_Management_Routines__new_free_class_08.cpp":54:1)
#loc12 = loc("CWE762_Mismatched_Memory_Management_Routines__new_free_class_08.cpp":40:5)
#loc13 = loc("CWE762_Mismatched_Memory_Management_Routines__new_free_class_08.cpp":40:20)
#loc14 = loc("CWE762_Mismatched_Memory_Management_Routines__new_free_class_08.cpp":42:12)
#loc15 = loc("CWE762_Mismatched_Memory_Management_Routines__new_free_class_08.cpp":42:5)
#loc16 = loc("CWE762_Mismatched_Memory_Management_Routines__new_free_class_08.cpp":43:5)
#loc17 = loc("CWE762_Mismatched_Memory_Management_Routines__new_free_class_08.cpp":47:5)
#loc18 = loc("CWE762_Mismatched_Memory_Management_Routines__new_free_class_08.cpp":43:8)
#loc19 = loc("CWE762_Mismatched_Memory_Management_Routines__new_free_class_08.cpp":43:26)
#loc20 = loc("CWE762_Mismatched_Memory_Management_Routines__new_free_class_08.cpp":44:5)
#loc21 = loc("CWE762_Mismatched_Memory_Management_Routines__new_free_class_08.cpp":46:16)
#loc22 = loc("CWE762_Mismatched_Memory_Management_Routines__new_free_class_08.cpp":46:20)
#loc23 = loc("CWE762_Mismatched_Memory_Management_Routines__new_free_class_08.cpp":38:6)
#loc24 = loc("CWE762_Mismatched_Memory_Management_Routines__new_free_class_08.cpp":46:9)
#loc25 = loc("CWE762_Mismatched_Memory_Management_Routines__new_free_class_08.cpp":48:5)
#loc26 = loc("CWE762_Mismatched_Memory_Management_Routines__new_free_class_08.cpp":53:5)
#loc27 = loc("CWE762_Mismatched_Memory_Management_Routines__new_free_class_08.cpp":48:8)
#loc28 = loc("CWE762_Mismatched_Memory_Management_Routines__new_free_class_08.cpp":48:26)
#loc29 = loc("CWE762_Mismatched_Memory_Management_Routines__new_free_class_08.cpp":49:5)
#loc30 = loc("CWE762_Mismatched_Memory_Management_Routines__new_free_class_08.cpp":52:9)
#loc31 = loc("CWE762_Mismatched_Memory_Management_Routines__new_free_class_08.cpp":52:14)
#loc32 = loc("CWE762_Mismatched_Memory_Management_Routines__new_free_class_08.cpp":28:1)
#loc33 = loc("CWE762_Mismatched_Memory_Management_Routines__new_free_class_08.cpp":31:1)
#loc34 = loc("CWE762_Mismatched_Memory_Management_Routines__new_free_class_08.cpp":30:12)
#loc35 = loc("CWE762_Mismatched_Memory_Management_Routines__new_free_class_08.cpp":30:5)
#loc36 = loc("CWE762_Mismatched_Memory_Management_Routines__new_free_class_08.cpp":74:19)
#loc37 = loc("/usr/lib/gcc/x86_64-redhat-linux/14/../../../../include/c++/14/new":135:1)
#loc38 = loc("/usr/lib/gcc/x86_64-redhat-linux/14/../../../../include/c++/14/new":136:41)
#loc39 = loc("CWE762_Mismatched_Memory_Management_Routines__new_free_class_08.cpp":61:1)
#loc40 = loc("CWE762_Mismatched_Memory_Management_Routines__new_free_class_08.cpp":81:1)
#loc41 = loc("CWE762_Mismatched_Memory_Management_Routines__new_free_class_08.cpp":63:5)
#loc42 = loc("CWE762_Mismatched_Memory_Management_Routines__new_free_class_08.cpp":63:20)
#loc43 = loc("CWE762_Mismatched_Memory_Management_Routines__new_free_class_08.cpp":65:12)
#loc44 = loc("CWE762_Mismatched_Memory_Management_Routines__new_free_class_08.cpp":65:5)
#loc45 = loc("CWE762_Mismatched_Memory_Management_Routines__new_free_class_08.cpp":66:5)
#loc46 = loc("CWE762_Mismatched_Memory_Management_Routines__new_free_class_08.cpp":70:5)
#loc47 = loc("CWE762_Mismatched_Memory_Management_Routines__new_free_class_08.cpp":66:8)
#loc48 = loc("CWE762_Mismatched_Memory_Management_Routines__new_free_class_08.cpp":66:26)
#loc49 = loc("CWE762_Mismatched_Memory_Management_Routines__new_free_class_08.cpp":67:5)
#loc50 = loc("CWE762_Mismatched_Memory_Management_Routines__new_free_class_08.cpp":69:16)
#loc51 = loc("CWE762_Mismatched_Memory_Management_Routines__new_free_class_08.cpp":69:20)
#loc52 = loc("CWE762_Mismatched_Memory_Management_Routines__new_free_class_08.cpp":61:13)
#loc53 = loc("CWE762_Mismatched_Memory_Management_Routines__new_free_class_08.cpp":69:9)
#loc54 = loc("CWE762_Mismatched_Memory_Management_Routines__new_free_class_08.cpp":71:5)
#loc55 = loc("CWE762_Mismatched_Memory_Management_Routines__new_free_class_08.cpp":80:5)
#loc56 = loc("CWE762_Mismatched_Memory_Management_Routines__new_free_class_08.cpp":71:8)
#loc57 = loc("CWE762_Mismatched_Memory_Management_Routines__new_free_class_08.cpp":71:27)
#loc58 = loc("CWE762_Mismatched_Memory_Management_Routines__new_free_class_08.cpp":72:5)
#loc59 = loc("CWE762_Mismatched_Memory_Management_Routines__new_free_class_08.cpp":75:5)
#loc60 = loc("CWE762_Mismatched_Memory_Management_Routines__new_free_class_08.cpp":77:5)
#loc61 = loc("CWE762_Mismatched_Memory_Management_Routines__new_free_class_08.cpp":74:9)
#loc62 = loc("CWE762_Mismatched_Memory_Management_Routines__new_free_class_08.cpp":79:16)
#loc63 = loc("CWE762_Mismatched_Memory_Management_Routines__new_free_class_08.cpp":84:1)
#loc64 = loc("CWE762_Mismatched_Memory_Management_Routines__new_free_class_08.cpp":99:1)
#loc65 = loc("CWE762_Mismatched_Memory_Management_Routines__new_free_class_08.cpp":86:5)
#loc66 = loc("CWE762_Mismatched_Memory_Management_Routines__new_free_class_08.cpp":86:20)
#loc67 = loc("CWE762_Mismatched_Memory_Management_Routines__new_free_class_08.cpp":88:12)
#loc68 = loc("CWE762_Mismatched_Memory_Management_Routines__new_free_class_08.cpp":88:5)
#loc69 = loc("CWE762_Mismatched_Memory_Management_Routines__new_free_class_08.cpp":89:5)
#loc70 = loc("CWE762_Mismatched_Memory_Management_Routines__new_free_class_08.cpp":93:5)
#loc71 = loc("CWE762_Mismatched_Memory_Management_Routines__new_free_class_08.cpp":89:8)
#loc72 = loc("CWE762_Mismatched_Memory_Management_Routines__new_free_class_08.cpp":89:26)
#loc73 = loc("CWE762_Mismatched_Memory_Management_Routines__new_free_class_08.cpp":90:5)
#loc74 = loc("CWE762_Mismatched_Memory_Management_Routines__new_free_class_08.cpp":92:16)
#loc75 = loc("CWE762_Mismatched_Memory_Management_Routines__new_free_class_08.cpp":92:20)
#loc76 = loc("CWE762_Mismatched_Memory_Management_Routines__new_free_class_08.cpp":84:13)
#loc77 = loc("CWE762_Mismatched_Memory_Management_Routines__new_free_class_08.cpp":92:9)
#loc78 = loc("CWE762_Mismatched_Memory_Management_Routines__new_free_class_08.cpp":94:5)
#loc79 = loc("CWE762_Mismatched_Memory_Management_Routines__new_free_class_08.cpp":98:5)
#loc80 = loc("CWE762_Mismatched_Memory_Management_Routines__new_free_class_08.cpp":94:8)
#loc81 = loc("CWE762_Mismatched_Memory_Management_Routines__new_free_class_08.cpp":94:26)
#loc82 = loc("CWE762_Mismatched_Memory_Management_Routines__new_free_class_08.cpp":95:5)
#loc83 = loc("CWE762_Mismatched_Memory_Management_Routines__new_free_class_08.cpp":97:16)
#loc84 = loc("/usr/include/stdlib.h":672:1)
#loc85 = loc("/usr/include/stdlib.h":672:45)
#loc86 = loc("/usr/include/stdlib.h":756:1)
#loc87 = loc("/usr/include/stdlib.h":756:70)
#loc88 = loc("CWE762_Mismatched_Memory_Management_Routines__new_free_class_08.cpp":102:1)
#loc89 = loc("CWE762_Mismatched_Memory_Management_Routines__new_free_class_08.cpp":124:1)
#loc90 = loc("CWE762_Mismatched_Memory_Management_Routines__new_free_class_08.cpp":104:5)
#loc91 = loc("CWE762_Mismatched_Memory_Management_Routines__new_free_class_08.cpp":104:20)
#loc92 = loc("CWE762_Mismatched_Memory_Management_Routines__new_free_class_08.cpp":106:12)
#loc93 = loc("CWE762_Mismatched_Memory_Management_Routines__new_free_class_08.cpp":106:5)
#loc94 = loc("CWE762_Mismatched_Memory_Management_Routines__new_free_class_08.cpp":107:5)
#loc95 = loc("CWE762_Mismatched_Memory_Management_Routines__new_free_class_08.cpp":117:5)
#loc96 = loc("CWE762_Mismatched_Memory_Management_Routines__new_free_class_08.cpp":107:8)
#loc97 = loc("CWE762_Mismatched_Memory_Management_Routines__new_free_class_08.cpp":107:27)
#loc98 = loc("CWE762_Mismatched_Memory_Management_Routines__new_free_class_08.cpp":108:5)
#loc99 = loc("CWE762_Mismatched_Memory_Management_Routines__new_free_class_08.cpp":111:5)
#loc100 = loc("CWE762_Mismatched_Memory_Management_Routines__new_free_class_08.cpp":113:5)
#loc101 = loc("CWE762_Mismatched_Memory_Management_Routines__new_free_class_08.cpp":110:19)
#loc102 = loc("CWE762_Mismatched_Memory_Management_Routines__new_free_class_08.cpp":110:9)
#loc103 = loc("CWE762_Mismatched_Memory_Management_Routines__new_free_class_08.cpp":115:32)
#loc104 = loc("CWE762_Mismatched_Memory_Management_Routines__new_free_class_08.cpp":115:39)
#loc105 = loc("CWE762_Mismatched_Memory_Management_Routines__new_free_class_08.cpp":115:43)
#loc106 = loc("CWE762_Mismatched_Memory_Management_Routines__new_free_class_08.cpp":115:62)
#loc107 = loc("CWE762_Mismatched_Memory_Management_Routines__new_free_class_08.cpp":115:63)
#loc108 = loc("CWE762_Mismatched_Memory_Management_Routines__new_free_class_08.cpp":115:9)
#loc109 = loc("CWE762_Mismatched_Memory_Management_Routines__new_free_class_08.cpp":116:9)
#loc110 = loc("CWE762_Mismatched_Memory_Management_Routines__new_free_class_08.cpp":116:37)
#loc111 = loc("CWE762_Mismatched_Memory_Management_Routines__new_free_class_08.cpp":116:13)
#loc112 = loc("CWE762_Mismatched_Memory_Management_Routines__new_free_class_08.cpp":116:21)
#loc113 = loc("CWE762_Mismatched_Memory_Management_Routines__new_free_class_08.cpp":116:27)
#loc114 = loc("CWE762_Mismatched_Memory_Management_Routines__new_free_class_08.cpp":116:28)
#loc115 = loc("CWE762_Mismatched_Memory_Management_Routines__new_free_class_08.cpp":116:34)
#loc116 = loc("CWE762_Mismatched_Memory_Management_Routines__new_free_class_08.cpp":116:33)
#loc117 = loc("CWE762_Mismatched_Memory_Management_Routines__new_free_class_08.cpp":118:5)
#loc118 = loc("CWE762_Mismatched_Memory_Management_Routines__new_free_class_08.cpp":123:5)
#loc119 = loc("CWE762_Mismatched_Memory_Management_Routines__new_free_class_08.cpp":118:8)
#loc120 = loc("CWE762_Mismatched_Memory_Management_Routines__new_free_class_08.cpp":118:26)
#loc121 = loc("CWE762_Mismatched_Memory_Management_Routines__new_free_class_08.cpp":119:5)
#loc122 = loc("CWE762_Mismatched_Memory_Management_Routines__new_free_class_08.cpp":122:9)
#loc123 = loc("CWE762_Mismatched_Memory_Management_Routines__new_free_class_08.cpp":122:14)
#loc124 = loc("CWE762_Mismatched_Memory_Management_Routines__new_free_class_08.cpp":127:1)
#loc125 = loc("CWE762_Mismatched_Memory_Management_Routines__new_free_class_08.cpp":144:1)
#loc126 = loc("CWE762_Mismatched_Memory_Management_Routines__new_free_class_08.cpp":129:5)
#loc127 = loc("CWE762_Mismatched_Memory_Management_Routines__new_free_class_08.cpp":129:20)
#loc128 = loc("CWE762_Mismatched_Memory_Management_Routines__new_free_class_08.cpp":131:12)
#loc129 = loc("CWE762_Mismatched_Memory_Management_Routines__new_free_class_08.cpp":131:5)
#loc130 = loc("CWE762_Mismatched_Memory_Management_Routines__new_free_class_08.cpp":132:5)
#loc131 = loc("CWE762_Mismatched_Memory_Management_Routines__new_free_class_08.cpp":137:5)
#loc132 = loc("CWE762_Mismatched_Memory_Management_Routines__new_free_class_08.cpp":132:8)
#loc133 = loc("CWE762_Mismatched_Memory_Management_Routines__new_free_class_08.cpp":132:26)
#loc134 = loc("CWE762_Mismatched_Memory_Management_Routines__new_free_class_08.cpp":133:5)
#loc135 = loc("CWE762_Mismatched_Memory_Management_Routines__new_free_class_08.cpp":135:32)
#loc136 = loc("CWE762_Mismatched_Memory_Management_Routines__new_free_class_08.cpp":135:39)
#loc137 = loc("CWE762_Mismatched_Memory_Management_Routines__new_free_class_08.cpp":135:43)
#loc138 = loc("CWE762_Mismatched_Memory_Management_Routines__new_free_class_08.cpp":135:62)
#loc139 = loc("CWE762_Mismatched_Memory_Management_Routines__new_free_class_08.cpp":135:63)
#loc140 = loc("CWE762_Mismatched_Memory_Management_Routines__new_free_class_08.cpp":135:9)
#loc141 = loc("CWE762_Mismatched_Memory_Management_Routines__new_free_class_08.cpp":136:9)
#loc142 = loc("CWE762_Mismatched_Memory_Management_Routines__new_free_class_08.cpp":136:37)
#loc143 = loc("CWE762_Mismatched_Memory_Management_Routines__new_free_class_08.cpp":136:13)
#loc144 = loc("CWE762_Mismatched_Memory_Management_Routines__new_free_class_08.cpp":136:21)
#loc145 = loc("CWE762_Mismatched_Memory_Management_Routines__new_free_class_08.cpp":136:27)
#loc146 = loc("CWE762_Mismatched_Memory_Management_Routines__new_free_class_08.cpp":136:28)
#loc147 = loc("CWE762_Mismatched_Memory_Management_Routines__new_free_class_08.cpp":136:34)
#loc148 = loc("CWE762_Mismatched_Memory_Management_Routines__new_free_class_08.cpp":136:33)
#loc149 = loc("CWE762_Mismatched_Memory_Management_Routines__new_free_class_08.cpp":138:5)
#loc150 = loc("CWE762_Mismatched_Memory_Management_Routines__new_free_class_08.cpp":143:5)
#loc151 = loc("CWE762_Mismatched_Memory_Management_Routines__new_free_class_08.cpp":138:8)
#loc152 = loc("CWE762_Mismatched_Memory_Management_Routines__new_free_class_08.cpp":138:26)
#loc153 = loc("CWE762_Mismatched_Memory_Management_Routines__new_free_class_08.cpp":139:5)
#loc154 = loc("CWE762_Mismatched_Memory_Management_Routines__new_free_class_08.cpp":142:9)
#loc155 = loc("CWE762_Mismatched_Memory_Management_Routines__new_free_class_08.cpp":142:14)
#loc156 = loc("CWE762_Mismatched_Memory_Management_Routines__new_free_class_08.cpp":146:1)
#loc157 = loc("CWE762_Mismatched_Memory_Management_Routines__new_free_class_08.cpp":152:1)
#loc158 = loc("CWE762_Mismatched_Memory_Management_Routines__new_free_class_08.cpp":148:5)
#loc159 = loc("CWE762_Mismatched_Memory_Management_Routines__new_free_class_08.cpp":149:5)
#loc160 = loc("CWE762_Mismatched_Memory_Management_Routines__new_free_class_08.cpp":150:5)
#loc161 = loc("CWE762_Mismatched_Memory_Management_Routines__new_free_class_08.cpp":151:5)
#loc162 = loc("/usr/include/stdlib.h":575:1)
#loc163 = loc("/usr/include/stdlib.h":575:41)
#loc164 = loc("/usr/include/time.h":76:1)
#loc165 = loc("/usr/include/time.h":76:38)
#loc166 = loc("../../../testcasesupport/std_testcase_io.h":14:1)
#loc167 = loc("../../../testcasesupport/std_testcase_io.h":14:33)
#loc168 = loc("CWE762_Mismatched_Memory_Management_Routines__new_free_class_08.cpp":172:15)
#loc169 = loc("CWE762_Mismatched_Memory_Management_Routines__new_free_class_08.cpp":174:15)
#loc170 = loc("CWE762_Mismatched_Memory_Management_Routines__new_free_class_08.cpp":177:15)
#loc171 = loc("CWE762_Mismatched_Memory_Management_Routines__new_free_class_08.cpp":179:15)
#loc172 = loc("CWE762_Mismatched_Memory_Management_Routines__new_free_class_08.cpp":167:1)
#loc173 = loc("CWE762_Mismatched_Memory_Management_Routines__new_free_class_08.cpp":182:1)
#loc178 = loc("CWE762_Mismatched_Memory_Management_Routines__new_free_class_08.cpp":168:1)
#loc179 = loc("CWE762_Mismatched_Memory_Management_Routines__new_free_class_08.cpp":170:27)
#loc180 = loc("CWE762_Mismatched_Memory_Management_Routines__new_free_class_08.cpp":170:22)
#loc181 = loc("CWE762_Mismatched_Memory_Management_Routines__new_free_class_08.cpp":170:5)
#loc182 = loc("CWE762_Mismatched_Memory_Management_Routines__new_free_class_08.cpp":172:5)
#loc183 = loc("CWE762_Mismatched_Memory_Management_Routines__new_free_class_08.cpp":173:5)
#loc184 = loc("CWE762_Mismatched_Memory_Management_Routines__new_free_class_08.cpp":174:5)
#loc185 = loc("CWE762_Mismatched_Memory_Management_Routines__new_free_class_08.cpp":177:5)
#loc186 = loc("CWE762_Mismatched_Memory_Management_Routines__new_free_class_08.cpp":178:5)
#loc187 = loc("CWE762_Mismatched_Memory_Management_Routines__new_free_class_08.cpp":179:5)
#loc188 = loc("CWE762_Mismatched_Memory_Management_Routines__new_free_class_08.cpp":181:12)
#loc189 = loc("CWE762_Mismatched_Memory_Management_Routines__new_free_class_08.cpp":181:5)
#loc190 = loc(fused[#loc1, #loc2])
#loc191 = loc(fused[#loc4, #loc3])
#loc192 = loc(fused[#loc5, #loc6])
#loc193 = loc(fused[#loc8, #loc9])
#loc194 = loc(fused[#loc10, #loc11])
#loc195 = loc(fused[#loc12, #loc13])
#loc196 = loc(fused[#loc15, #loc14])
#loc197 = loc(fused[#loc16, #loc17])
#loc198 = loc(fused[#loc18, #loc19])
#loc199 = loc(fused[#loc20, #loc17])
#loc200 = loc(fused[#loc21, #loc22])
#loc201 = loc(fused[#loc24, #loc22])
#loc202 = loc(fused[#loc25, #loc26])
#loc203 = loc(fused[#loc27, #loc28])
#loc204 = loc(fused[#loc29, #loc26])
#loc205 = loc(fused[#loc32, #loc33])
#loc206 = loc(fused[#loc35, #loc34])
#loc207 = loc(fused[#loc37, #loc38])
#loc208 = loc(fused[#loc39, #loc40])
#loc209 = loc(fused[#loc41, #loc42])
#loc210 = loc(fused[#loc44, #loc43])
#loc211 = loc(fused[#loc45, #loc46])
#loc212 = loc(fused[#loc47, #loc48])
#loc213 = loc(fused[#loc49, #loc46])
#loc214 = loc(fused[#loc50, #loc51])
#loc215 = loc(fused[#loc53, #loc51])
#loc216 = loc(fused[#loc54, #loc55])
#loc217 = loc(fused[#loc56, #loc57])
#loc218 = loc(fused[#loc58, #loc59, #loc60, #loc55])
#loc219 = loc(fused[#loc63, #loc64])
#loc220 = loc(fused[#loc65, #loc66])
#loc221 = loc(fused[#loc68, #loc67])
#loc222 = loc(fused[#loc69, #loc70])
#loc223 = loc(fused[#loc71, #loc72])
#loc224 = loc(fused[#loc73, #loc70])
#loc225 = loc(fused[#loc74, #loc75])
#loc226 = loc(fused[#loc77, #loc75])
#loc227 = loc(fused[#loc78, #loc79])
#loc228 = loc(fused[#loc80, #loc81])
#loc229 = loc(fused[#loc82, #loc79])
#loc230 = loc(fused[#loc84, #loc85])
#loc231 = loc(fused[#loc86, #loc87])
#loc232 = loc(fused[#loc88, #loc89])
#loc233 = loc(fused[#loc90, #loc91])
#loc234 = loc(fused[#loc93, #loc92])
#loc235 = loc(fused[#loc94, #loc95])
#loc236 = loc(fused[#loc96, #loc97])
#loc237 = loc(fused[#loc98, #loc99, #loc100, #loc95])
#loc238 = loc(fused[#loc105, #loc106])
#loc239 = loc(fused[#loc104, #loc106])
#loc240 = loc(fused[#loc103, #loc107])
#loc241 = loc(fused[#loc108, #loc107])
#loc242 = loc(fused[#loc109, #loc110])
#loc243 = loc(fused[#loc111, #loc112])
#loc244 = loc(fused[#loc113, #loc110])
#loc245 = loc(fused[#loc117, #loc118])
#loc246 = loc(fused[#loc119, #loc120])
#loc247 = loc(fused[#loc121, #loc118])
#loc248 = loc(fused[#loc124, #loc125])
#loc249 = loc(fused[#loc126, #loc127])
#loc250 = loc(fused[#loc129, #loc128])
#loc251 = loc(fused[#loc130, #loc131])
#loc252 = loc(fused[#loc132, #loc133])
#loc253 = loc(fused[#loc134, #loc131])
#loc254 = loc(fused[#loc137, #loc138])
#loc255 = loc(fused[#loc136, #loc138])
#loc256 = loc(fused[#loc135, #loc139])
#loc257 = loc(fused[#loc140, #loc139])
#loc258 = loc(fused[#loc141, #loc142])
#loc259 = loc(fused[#loc143, #loc144])
#loc260 = loc(fused[#loc145, #loc142])
#loc261 = loc(fused[#loc149, #loc150])
#loc262 = loc(fused[#loc151, #loc152])
#loc263 = loc(fused[#loc153, #loc150])
#loc264 = loc(fused[#loc156, #loc157])
#loc265 = loc(fused[#loc162, #loc163])
#loc266 = loc(fused[#loc164, #loc165])
#loc267 = loc(fused[#loc166, #loc167])
#loc268 = loc(fused[#loc172, #loc173])
#loc271 = loc(fused[#loc189, #loc188])
