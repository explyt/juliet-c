!s32i = !cir.int<s, 32>
!s64i = !cir.int<s, 64>
!s8i = !cir.int<s, 8>
!u16i = !cir.int<u, 16>
!u32i = !cir.int<u, 32>
!u64i = !cir.int<u, 64>
!u8i = !cir.int<u, 8>
!void = !cir.void
#false = #cir.bool<false> : !cir.bool
#fn_attr = #cir<extra({nothrow = #cir.nothrow})>
#fn_attr1 = #cir<extra({inline = #cir.inline<no>, optnone = #cir.optnone})>
#loc230 = loc("CWE680_Integer_Overflow_to_Buffer_Overflow__malloc_connect_socket_33.cpp":177:10)
#loc231 = loc("CWE680_Integer_Overflow_to_Buffer_Overflow__malloc_connect_socket_33.cpp":177:14)
#loc232 = loc("CWE680_Integer_Overflow_to_Buffer_Overflow__malloc_connect_socket_33.cpp":177:20)
#loc233 = loc("CWE680_Integer_Overflow_to_Buffer_Overflow__malloc_connect_socket_33.cpp":177:32)
#true = #cir.bool<true> : !cir.bool
!ty_in_addr = !cir.struct<struct "in_addr" {!u32i} #cir.record.decl.ast>
#loc337 = loc(fused[#loc230, #loc231])
#loc338 = loc(fused[#loc232, #loc233])
!ty_sockaddr = !cir.struct<struct "sockaddr" {!u16i, !cir.array<!s8i x 14>} #cir.record.decl.ast>
!ty_sockaddr_in = !cir.struct<struct "sockaddr_in" {!u16i, !u16i, !ty_in_addr, !cir.array<!u8i x 8>}>
module @"/home/ladisgin/git_proj/juliet-c/testcases/CWE680_Integer_Overflow_to_Buffer_Overflow/CWE680_Integer_Overflow_to_Buffer_Overflow__malloc_connect_socket_33.cpp" attributes {cir.lang = #cir.lang<cxx>, cir.sob = #cir.signed_overflow_behavior<undefined>, cir.triple = "x86_64-unknown-linux-gnu", dlti.dl_spec = #dlti.dl_spec<f80 = dense<128> : vector<2xi64>, i128 = dense<128> : vector<2xi64>, i64 = dense<64> : vector<2xi64>, i1 = dense<8> : vector<2xi64>, !llvm.ptr = dense<64> : vector<4xi64>, f16 = dense<16> : vector<2xi64>, i32 = dense<32> : vector<2xi64>, i16 = dense<16> : vector<2xi64>, i8 = dense<8> : vector<2xi64>, !llvm.ptr<272> = dense<64> : vector<4xi64>, !llvm.ptr<271> = dense<32> : vector<4xi64>, f128 = dense<128> : vector<2xi64>, !llvm.ptr<270> = dense<32> : vector<4xi64>, f64 = dense<64> : vector<2xi64>, "dlti.stack_alignment" = 128 : i64, "dlti.endianness" = "little">} {
  cir.func private @socket(!s32i, !s32i, !s32i) -> !s32i extra(#fn_attr) loc(#loc246)
  cir.func private @inet_addr(!cir.ptr<!s8i>) -> !u32i extra(#fn_attr) loc(#loc247)
  cir.global "private" constant cir_private dsolocal @".str" = #cir.const_array<"127.0.0.1\00" : !cir.array<!s8i x 10>> : !cir.array<!s8i x 10> {alignment = 1 : i64} loc(#loc5)
  cir.func private @htons(!u16i) -> !u16i extra(#fn_attr) loc(#loc248)
  cir.func private @connect(!s32i, !cir.ptr<!ty_sockaddr>, !u32i) -> !s32i loc(#loc249)
  cir.func private @recv(!s32i, !cir.ptr<!void>, !u64i, !s32i) -> !s64i loc(#loc250)
  cir.func private @atoi(!cir.ptr<!s8i>) -> !s32i extra(#fn_attr) loc(#loc251)
  cir.func private @close(!s32i) -> !s32i loc(#loc252)
  cir.func private @malloc(!u64i) -> !cir.ptr<!void> extra(#fn_attr) loc(#loc253)
  cir.func private @exit(!s32i) extra(#fn_attr) loc(#loc254)
  cir.func private @printIntLine(!s32i) loc(#loc255)
  cir.func private @free(!cir.ptr<!void>) extra(#fn_attr) loc(#loc256)
  cir.func @_ZN68CWE680_Integer_Overflow_to_Buffer_Overflow__malloc_connect_socket_333badEv() extra(#fn_attr1) {
    %0 = cir.alloca !s32i, !cir.ptr<!s32i>, ["data"] {alignment = 4 : i64} loc(#loc258)
    %1 = cir.alloca !cir.ptr<!s32i>, !cir.ptr<!cir.ptr<!s32i>>, ["dataRef", init, const] {alignment = 8 : i64} loc(#loc259)
    cir.store %0, %1 : !cir.ptr<!s32i>, !cir.ptr<!cir.ptr<!s32i>> loc(#loc29)
    %2 = cir.const #cir.int<1> : !s32i loc(#loc30)
    %3 = cir.unary(minus, %2) : !s32i, !s32i loc(#loc31)
    cir.store %3, %0 : !s32i, !cir.ptr<!s32i> loc(#loc260)
    cir.scope {
      %4 = cir.alloca !s32i, !cir.ptr<!s32i>, ["recvResult"] {alignment = 4 : i64} loc(#loc262)
      %5 = cir.alloca !ty_sockaddr_in, !cir.ptr<!ty_sockaddr_in>, ["service"] {alignment = 4 : i64} loc(#loc263)
      %6 = cir.alloca !s32i, !cir.ptr<!s32i>, ["connectSocket", init] {alignment = 4 : i64} loc(#loc264)
      %7 = cir.alloca !cir.array<!s8i x 14>, !cir.ptr<!cir.array<!s8i x 14>>, ["inputBuffer"] {alignment = 1 : i64} loc(#loc265)
      %8 = cir.const #cir.int<1> : !s32i loc(#loc40)
      %9 = cir.unary(minus, %8) : !s32i, !s32i loc(#loc40)
      cir.store %9, %6 : !s32i, !cir.ptr<!s32i> loc(#loc264)
      cir.scope {
        cir.do {
          %10 = cir.const #cir.int<2> : !s32i loc(#loc45)
          %11 = cir.const #cir.int<1> : !u32i loc(#loc46)
          %12 = cir.cast(integral, %11 : !u32i), !s32i loc(#loc46)
          %13 = cir.const #cir.int<6> : !u32i loc(#loc47)
          %14 = cir.cast(integral, %13 : !u32i), !s32i loc(#loc47)
          %15 = cir.call @socket(%10, %12, %14) : (!s32i, !s32i, !s32i) -> !s32i extra(#fn_attr) loc(#loc48)
          cir.store %15, %6 : !s32i, !cir.ptr<!s32i> loc(#loc267)
          cir.scope {
            %53 = cir.load %6 : !cir.ptr<!s32i>, !s32i loc(#loc53)
            %54 = cir.const #cir.int<1> : !s32i loc(#loc54)
            %55 = cir.unary(minus, %54) : !s32i, !s32i loc(#loc54)
            %56 = cir.cmp(eq, %53, %55) : !s32i, !cir.bool loc(#loc269)
            cir.if %56 {
              cir.break loc(#loc56)
            } loc(#loc270)
          } loc(#loc268)
          %16 = cir.cast(bitcast, %5 : !cir.ptr<!ty_sockaddr_in>), !cir.ptr<!void> loc(#loc271)
          %17 = cir.const #cir.int<0> : !s32i loc(#loc59)
          %18 = cir.const #cir.int<16> : !u64i loc(#loc272)
          cir.libc.memset %18 bytes from %16 set to %17 : !cir.ptr<!void>, !s32i, !u64i loc(#loc273)
          %19 = cir.const #cir.int<2> : !s32i loc(#loc64)
          %20 = cir.cast(integral, %19 : !s32i), !u16i loc(#loc64)
          %21 = cir.get_member %5[0] {name = "sin_family"} : !cir.ptr<!ty_sockaddr_in> -> !cir.ptr<!u16i> loc(#loc65)
          cir.store %20, %21 : !u16i, !cir.ptr<!u16i> loc(#loc274)
          %22 = cir.get_global @".str" : !cir.ptr<!cir.array<!s8i x 10>> loc(#loc5)
          %23 = cir.cast(array_to_ptrdecay, %22 : !cir.ptr<!cir.array<!s8i x 10>>), !cir.ptr<!s8i> loc(#loc5)
          %24 = cir.call @inet_addr(%23) : (!cir.ptr<!s8i>) -> !u32i extra(#fn_attr) loc(#loc67)
          %25 = cir.get_member %5[2] {name = "sin_addr"} : !cir.ptr<!ty_sockaddr_in> -> !cir.ptr<!ty_in_addr> loc(#loc68)
          %26 = cir.get_member %25[0] {name = "s_addr"} : !cir.ptr<!ty_in_addr> -> !cir.ptr<!u32i> loc(#loc69)
          cir.store %24, %26 : !u32i, !cir.ptr<!u32i> loc(#loc275)
          %27 = cir.const #cir.int<27015> : !s32i loc(#loc72)
          %28 = cir.cast(integral, %27 : !s32i), !u16i loc(#loc72)
          %29 = cir.call @htons(%28) : (!u16i) -> !u16i extra(#fn_attr) loc(#loc73)
          %30 = cir.get_member %5[1] {name = "sin_port"} : !cir.ptr<!ty_sockaddr_in> -> !cir.ptr<!u16i> loc(#loc74)
          cir.store %29, %30 : !u16i, !cir.ptr<!u16i> loc(#loc276)
          cir.scope {
            %53 = cir.load %6 : !cir.ptr<!s32i>, !s32i loc(#loc79)
            %54 = cir.cast(bitcast, %5 : !cir.ptr<!ty_sockaddr_in>), !cir.ptr<!ty_sockaddr> loc(#loc278)
            %55 = cir.const #cir.int<16> : !u64i loc(#loc279)
            %56 = cir.cast(integral, %55 : !u64i), !u32i loc(#loc279)
            %57 = cir.call @connect(%53, %54, %56) : (!s32i, !cir.ptr<!ty_sockaddr>, !u32i) -> !s32i loc(#loc84)
            %58 = cir.const #cir.int<1> : !s32i loc(#loc85)
            %59 = cir.unary(minus, %58) : !s32i, !s32i loc(#loc85)
            %60 = cir.cmp(eq, %57, %59) : !s32i, !cir.bool loc(#loc280)
            cir.if %60 {
              cir.break loc(#loc87)
            } loc(#loc281)
          } loc(#loc277)
          %31 = cir.load %6 : !cir.ptr<!s32i>, !s32i loc(#loc88)
          %32 = cir.cast(array_to_ptrdecay, %7 : !cir.ptr<!cir.array<!s8i x 14>>), !cir.ptr<!s8i> loc(#loc89)
          %33 = cir.cast(bitcast, %32 : !cir.ptr<!s8i>), !cir.ptr<!void> loc(#loc89)
          %34 = cir.const #cir.int<3> : !s32i loc(#loc90)
          %35 = cir.cast(integral, %34 : !s32i), !u64i loc(#loc90)
          %36 = cir.const #cir.int<4> : !u64i loc(#loc90)
          %37 = cir.binop(mul, %35, %36) : !u64i loc(#loc90)
          %38 = cir.const #cir.int<2> : !s32i loc(#loc90)
          %39 = cir.cast(integral, %38 : !s32i), !u64i loc(#loc90)
          %40 = cir.binop(add, %37, %39) : !u64i loc(#loc90)
          %41 = cir.const #cir.int<1> : !s32i loc(#loc91)
          %42 = cir.cast(integral, %41 : !s32i), !u64i loc(#loc91)
          %43 = cir.binop(sub, %40, %42) : !u64i loc(#loc282)
          %44 = cir.const #cir.int<0> : !s32i loc(#loc92)
          %45 = cir.call @recv(%31, %33, %43, %44) : (!s32i, !cir.ptr<!void>, !u64i, !s32i) -> !s64i loc(#loc93)
          %46 = cir.cast(integral, %45 : !s64i), !s32i loc(#loc93)
          cir.store %46, %4 : !s32i, !cir.ptr<!s32i> loc(#loc283)
          cir.scope {
            %53 = cir.load %4 : !cir.ptr<!s32i>, !s32i loc(#loc98)
            %54 = cir.const #cir.int<1> : !s32i loc(#loc99)
            %55 = cir.unary(minus, %54) : !s32i, !s32i loc(#loc99)
            %56 = cir.cmp(eq, %53, %55) : !s32i, !cir.bool loc(#loc285)
            %57 = cir.ternary(%56, true {
              %58 = cir.const #true loc(#loc100)
              cir.yield %58 : !cir.bool loc(#loc100)
            }, false {
              %58 = cir.load %4 : !cir.ptr<!s32i>, !s32i loc(#loc101)
              %59 = cir.const #cir.int<0> : !s32i loc(#loc102)
              %60 = cir.cmp(eq, %58, %59) : !s32i, !cir.bool loc(#loc286)
              %61 = cir.ternary(%60, true {
                %62 = cir.const #true loc(#loc100)
                cir.yield %62 : !cir.bool loc(#loc100)
              }, false {
                %62 = cir.const #false loc(#loc100)
                cir.yield %62 : !cir.bool loc(#loc100)
              }) : (!cir.bool) -> !cir.bool loc(#loc100)
              cir.yield %61 : !cir.bool loc(#loc100)
            }) : (!cir.bool) -> !cir.bool loc(#loc100)
            cir.if %57 {
              cir.break loc(#loc104)
            } loc(#loc287)
          } loc(#loc284)
          %47 = cir.const #cir.int<0> : !s8i loc(#loc105)
          %48 = cir.load %4 : !cir.ptr<!s32i>, !s32i loc(#loc106)
          %49 = cir.cast(array_to_ptrdecay, %7 : !cir.ptr<!cir.array<!s8i x 14>>), !cir.ptr<!s8i> loc(#loc107)
          %50 = cir.ptr_stride(%49 : !cir.ptr<!s8i>, %48 : !s32i), !cir.ptr<!s8i> loc(#loc107)
          cir.store %47, %50 : !s8i, !cir.ptr<!s8i> loc(#loc288)
          %51 = cir.cast(array_to_ptrdecay, %7 : !cir.ptr<!cir.array<!s8i x 14>>), !cir.ptr<!s8i> loc(#loc108)
          %52 = cir.call @atoi(%51) : (!cir.ptr<!s8i>) -> !s32i extra(#fn_attr) loc(#loc109)
          cir.store %52, %0 : !s32i, !cir.ptr<!s32i> loc(#loc289)
          cir.yield loc(#loc44)
        } while {
          %10 = cir.const #cir.int<0> : !s32i loc(#loc112)
          %11 = cir.cast(int_to_bool, %10 : !s32i), !cir.bool loc(#loc112)
          cir.condition(%11) loc(#loc112)
        } loc(#loc266)
      } loc(#loc266)
      cir.scope {
        %10 = cir.load %6 : !cir.ptr<!s32i>, !s32i loc(#loc115)
        %11 = cir.const #cir.int<1> : !s32i loc(#loc116)
        %12 = cir.unary(minus, %11) : !s32i, !s32i loc(#loc116)
        %13 = cir.cmp(ne, %10, %12) : !s32i, !cir.bool loc(#loc291)
        cir.if %13 {
          %14 = cir.load %6 : !cir.ptr<!s32i>, !s32i loc(#loc118)
          %15 = cir.call @close(%14) : (!s32i) -> !s32i loc(#loc119)
        } loc(#loc292)
      } loc(#loc290)
    } loc(#loc261)
    cir.scope {
      %4 = cir.alloca !s32i, !cir.ptr<!s32i>, ["data", init] {alignment = 4 : i64} loc(#loc294)
      %5 = cir.load %1 : !cir.ptr<!cir.ptr<!s32i>>, !cir.ptr<!s32i> loc(#loc123)
      %6 = cir.load %5 : !cir.ptr<!s32i>, !s32i loc(#loc123)
      cir.store %6, %4 : !s32i, !cir.ptr<!s32i> loc(#loc294)
      cir.scope {
        %7 = cir.alloca !u64i, !cir.ptr<!u64i>, ["i"] {alignment = 8 : i64} loc(#loc296)
        %8 = cir.alloca !cir.ptr<!s32i>, !cir.ptr<!cir.ptr<!s32i>>, ["intPointer"] {alignment = 8 : i64} loc(#loc297)
        %9 = cir.get_global @malloc : !cir.ptr<!cir.func<!cir.ptr<!void> (!u64i)>> loc(#loc130)
        %10 = cir.load %4 : !cir.ptr<!s32i>, !s32i loc(#loc131)
        %11 = cir.cast(integral, %10 : !s32i), !u64i loc(#loc131)
        %12 = cir.const #cir.int<4> : !u64i loc(#loc298)
        %13 = cir.binop(mul, %11, %12) : !u64i loc(#loc299)
        %14 = cir.call @malloc(%13) : (!u64i) -> !cir.ptr<!void> extra(#fn_attr) loc(#loc130)
        %15 = cir.cast(bitcast, %14 : !cir.ptr<!void>), !cir.ptr<!s32i> loc(#loc300)
        cir.store %15, %8 : !cir.ptr<!s32i>, !cir.ptr<!cir.ptr<!s32i>> loc(#loc301)
        cir.scope {
          %23 = cir.load %8 : !cir.ptr<!cir.ptr<!s32i>>, !cir.ptr<!s32i> loc(#loc138)
          %24 = cir.const #cir.ptr<null> : !cir.ptr<!s32i> loc(#loc139)
          %25 = cir.cmp(eq, %23, %24) : !cir.ptr<!s32i>, !cir.bool loc(#loc303)
          cir.if %25 {
            %26 = cir.get_global @exit : !cir.ptr<!cir.func<!void (!s32i)>> loc(#loc141)
            %27 = cir.const #cir.int<1> : !s32i loc(#loc142)
            %28 = cir.unary(minus, %27) : !s32i, !s32i loc(#loc143)
            cir.call @exit(%28) : (!s32i) -> () extra(#fn_attr) loc(#loc141)
          } loc(#loc304)
        } loc(#loc302)
        cir.scope {
          %23 = cir.const #cir.int<0> : !s32i loc(#loc146)
          %24 = cir.cast(integral, %23 : !s32i), !u64i loc(#loc146)
          cir.store %24, %7 : !u64i, !cir.ptr<!u64i> loc(#loc306)
          cir.for : cond {
            %25 = cir.load %7 : !cir.ptr<!u64i>, !u64i loc(#loc148)
            %26 = cir.load %4 : !cir.ptr<!s32i>, !s32i loc(#loc149)
            %27 = cir.cast(integral, %26 : !s32i), !u64i loc(#loc149)
            %28 = cir.cmp(lt, %25, %27) : !u64i, !cir.bool loc(#loc307)
            cir.condition(%28) loc(#loc307)
          } body {
            %25 = cir.const #cir.int<0> : !s32i loc(#loc150)
            %26 = cir.load %8 : !cir.ptr<!cir.ptr<!s32i>>, !cir.ptr<!s32i> loc(#loc151)
            %27 = cir.load %7 : !cir.ptr<!u64i>, !u64i loc(#loc152)
            %28 = cir.ptr_stride(%26 : !cir.ptr<!s32i>, %27 : !u64i), !cir.ptr<!s32i> loc(#loc153)
            cir.store %25, %28 : !s32i, !cir.ptr<!s32i> loc(#loc308)
            cir.yield loc(#loc145)
          } step {
            %25 = cir.load %7 : !cir.ptr<!u64i>, !u64i loc(#loc154)
            %26 = cir.unary(inc, %25) : !u64i, !u64i loc(#loc155)
            cir.store %26, %7 : !u64i, !cir.ptr<!u64i> loc(#loc309)
            cir.yield loc(#loc305)
          } loc(#loc305)
        } loc(#loc305)
        %16 = cir.load %8 : !cir.ptr<!cir.ptr<!s32i>>, !cir.ptr<!s32i> loc(#loc156)
        %17 = cir.const #cir.int<0> : !s32i loc(#loc157)
        %18 = cir.ptr_stride(%16 : !cir.ptr<!s32i>, %17 : !s32i), !cir.ptr<!s32i> loc(#loc158)
        %19 = cir.load %18 : !cir.ptr<!s32i>, !s32i loc(#loc156)
        cir.call @printIntLine(%19) : (!s32i) -> () loc(#loc159)
        %20 = cir.get_global @free : !cir.ptr<!cir.func<!void (!cir.ptr<!void>)>> loc(#loc160)
        %21 = cir.load %8 : !cir.ptr<!cir.ptr<!s32i>>, !cir.ptr<!s32i> loc(#loc161)
        %22 = cir.cast(bitcast, %21 : !cir.ptr<!s32i>), !cir.ptr<!void> loc(#loc161)
        cir.call @free(%22) : (!cir.ptr<!void>) -> () extra(#fn_attr) loc(#loc160)
      } loc(#loc295)
    } loc(#loc293)
    cir.return loc(#loc25)
  } loc(#loc257)
  cir.func internal private @_ZN68CWE680_Integer_Overflow_to_Buffer_Overflow__malloc_connect_socket_33L7goodG2BEv() extra(#fn_attr1) {
    %0 = cir.alloca !s32i, !cir.ptr<!s32i>, ["data"] {alignment = 4 : i64} loc(#loc311)
    %1 = cir.alloca !cir.ptr<!s32i>, !cir.ptr<!cir.ptr<!s32i>>, ["dataRef", init, const] {alignment = 8 : i64} loc(#loc312)
    cir.store %0, %1 : !cir.ptr<!s32i>, !cir.ptr<!cir.ptr<!s32i>> loc(#loc167)
    %2 = cir.const #cir.int<1> : !s32i loc(#loc168)
    %3 = cir.unary(minus, %2) : !s32i, !s32i loc(#loc169)
    cir.store %3, %0 : !s32i, !cir.ptr<!s32i> loc(#loc313)
    %4 = cir.const #cir.int<20> : !s32i loc(#loc171)
    cir.store %4, %0 : !s32i, !cir.ptr<!s32i> loc(#loc314)
    cir.scope {
      %5 = cir.alloca !s32i, !cir.ptr<!s32i>, ["data", init] {alignment = 4 : i64} loc(#loc316)
      %6 = cir.load %1 : !cir.ptr<!cir.ptr<!s32i>>, !cir.ptr<!s32i> loc(#loc176)
      %7 = cir.load %6 : !cir.ptr<!s32i>, !s32i loc(#loc176)
      cir.store %7, %5 : !s32i, !cir.ptr<!s32i> loc(#loc316)
      cir.scope {
        %8 = cir.alloca !u64i, !cir.ptr<!u64i>, ["i"] {alignment = 8 : i64} loc(#loc318)
        %9 = cir.alloca !cir.ptr<!s32i>, !cir.ptr<!cir.ptr<!s32i>>, ["intPointer"] {alignment = 8 : i64} loc(#loc319)
        %10 = cir.get_global @malloc : !cir.ptr<!cir.func<!cir.ptr<!void> (!u64i)>> loc(#loc183)
        %11 = cir.load %5 : !cir.ptr<!s32i>, !s32i loc(#loc184)
        %12 = cir.cast(integral, %11 : !s32i), !u64i loc(#loc184)
        %13 = cir.const #cir.int<4> : !u64i loc(#loc320)
        %14 = cir.binop(mul, %12, %13) : !u64i loc(#loc321)
        %15 = cir.call @malloc(%14) : (!u64i) -> !cir.ptr<!void> extra(#fn_attr) loc(#loc183)
        %16 = cir.cast(bitcast, %15 : !cir.ptr<!void>), !cir.ptr<!s32i> loc(#loc322)
        cir.store %16, %9 : !cir.ptr<!s32i>, !cir.ptr<!cir.ptr<!s32i>> loc(#loc323)
        cir.scope {
          %24 = cir.load %9 : !cir.ptr<!cir.ptr<!s32i>>, !cir.ptr<!s32i> loc(#loc191)
          %25 = cir.const #cir.ptr<null> : !cir.ptr<!s32i> loc(#loc192)
          %26 = cir.cmp(eq, %24, %25) : !cir.ptr<!s32i>, !cir.bool loc(#loc325)
          cir.if %26 {
            %27 = cir.get_global @exit : !cir.ptr<!cir.func<!void (!s32i)>> loc(#loc194)
            %28 = cir.const #cir.int<1> : !s32i loc(#loc195)
            %29 = cir.unary(minus, %28) : !s32i, !s32i loc(#loc196)
            cir.call @exit(%29) : (!s32i) -> () extra(#fn_attr) loc(#loc194)
          } loc(#loc326)
        } loc(#loc324)
        cir.scope {
          %24 = cir.const #cir.int<0> : !s32i loc(#loc199)
          %25 = cir.cast(integral, %24 : !s32i), !u64i loc(#loc199)
          cir.store %25, %8 : !u64i, !cir.ptr<!u64i> loc(#loc328)
          cir.for : cond {
            %26 = cir.load %8 : !cir.ptr<!u64i>, !u64i loc(#loc201)
            %27 = cir.load %5 : !cir.ptr<!s32i>, !s32i loc(#loc202)
            %28 = cir.cast(integral, %27 : !s32i), !u64i loc(#loc202)
            %29 = cir.cmp(lt, %26, %28) : !u64i, !cir.bool loc(#loc329)
            cir.condition(%29) loc(#loc329)
          } body {
            %26 = cir.const #cir.int<0> : !s32i loc(#loc203)
            %27 = cir.load %9 : !cir.ptr<!cir.ptr<!s32i>>, !cir.ptr<!s32i> loc(#loc204)
            %28 = cir.load %8 : !cir.ptr<!u64i>, !u64i loc(#loc205)
            %29 = cir.ptr_stride(%27 : !cir.ptr<!s32i>, %28 : !u64i), !cir.ptr<!s32i> loc(#loc206)
            cir.store %26, %29 : !s32i, !cir.ptr<!s32i> loc(#loc330)
            cir.yield loc(#loc198)
          } step {
            %26 = cir.load %8 : !cir.ptr<!u64i>, !u64i loc(#loc207)
            %27 = cir.unary(inc, %26) : !u64i, !u64i loc(#loc208)
            cir.store %27, %8 : !u64i, !cir.ptr<!u64i> loc(#loc331)
            cir.yield loc(#loc327)
          } loc(#loc327)
        } loc(#loc327)
        %17 = cir.load %9 : !cir.ptr<!cir.ptr<!s32i>>, !cir.ptr<!s32i> loc(#loc209)
        %18 = cir.const #cir.int<0> : !s32i loc(#loc210)
        %19 = cir.ptr_stride(%17 : !cir.ptr<!s32i>, %18 : !s32i), !cir.ptr<!s32i> loc(#loc211)
        %20 = cir.load %19 : !cir.ptr<!s32i>, !s32i loc(#loc209)
        cir.call @printIntLine(%20) : (!s32i) -> () loc(#loc212)
        %21 = cir.get_global @free : !cir.ptr<!cir.func<!void (!cir.ptr<!void>)>> loc(#loc213)
        %22 = cir.load %9 : !cir.ptr<!cir.ptr<!s32i>>, !cir.ptr<!s32i> loc(#loc214)
        %23 = cir.cast(bitcast, %22 : !cir.ptr<!s32i>), !cir.ptr<!void> loc(#loc214)
        cir.call @free(%23) : (!cir.ptr<!void>) -> () extra(#fn_attr) loc(#loc213)
      } loc(#loc317)
    } loc(#loc315)
    cir.return loc(#loc163)
  } loc(#loc310)
  cir.func @_ZN68CWE680_Integer_Overflow_to_Buffer_Overflow__malloc_connect_socket_334goodEv() extra(#fn_attr1) {
    cir.call @_ZN68CWE680_Integer_Overflow_to_Buffer_Overflow__malloc_connect_socket_33L7goodG2BEv() : () -> () loc(#loc217)
    cir.return loc(#loc216)
  } loc(#loc332)
  cir.func private @srand(!u32i) extra(#fn_attr) loc(#loc333)
  cir.func private @time(!cir.ptr<!s64i>) -> !s64i extra(#fn_attr) loc(#loc334)
  cir.func private @printLine(!cir.ptr<!s8i>) loc(#loc335)
  cir.global "private" constant cir_private dsolocal @".str.1" = #cir.const_array<"Calling good()...\00" : !cir.array<!s8i x 18>> : !cir.array<!s8i x 18> {alignment = 1 : i64} loc(#loc224)
  cir.global "private" constant cir_private dsolocal @".str.2" = #cir.const_array<"Finished good()\00" : !cir.array<!s8i x 16>> : !cir.array<!s8i x 16> {alignment = 1 : i64} loc(#loc225)
  cir.global "private" constant cir_private dsolocal @".str.3" = #cir.const_array<"Calling bad()...\00" : !cir.array<!s8i x 17>> : !cir.array<!s8i x 17> {alignment = 1 : i64} loc(#loc226)
  cir.global "private" constant cir_private dsolocal @".str.4" = #cir.const_array<"Finished bad()\00" : !cir.array<!s8i x 15>> : !cir.array<!s8i x 15> {alignment = 1 : i64} loc(#loc227)
  cir.func @main(%arg0: !s32i loc(fused[#loc230, #loc231]), %arg1: !cir.ptr<!cir.ptr<!s8i>> loc(fused[#loc232, #loc233])) -> !s32i extra(#fn_attr1) {
    %0 = cir.alloca !s32i, !cir.ptr<!s32i>, ["argc", init] {alignment = 4 : i64} loc(#loc337)
    %1 = cir.alloca !cir.ptr<!cir.ptr<!s8i>>, !cir.ptr<!cir.ptr<!cir.ptr<!s8i>>>, ["argv", init] {alignment = 8 : i64} loc(#loc338)
    %2 = cir.alloca !s32i, !cir.ptr<!s32i>, ["__retval"] {alignment = 4 : i64} loc(#loc229)
    cir.store %arg0, %0 : !s32i, !cir.ptr<!s32i> loc(#loc234)
    cir.store %arg1, %1 : !cir.ptr<!cir.ptr<!s8i>>, !cir.ptr<!cir.ptr<!cir.ptr<!s8i>>> loc(#loc234)
    %3 = cir.const #cir.ptr<null> : !cir.ptr<!s64i> loc(#loc235)
    %4 = cir.call @time(%3) : (!cir.ptr<!s64i>) -> !s64i extra(#fn_attr) loc(#loc236)
    %5 = cir.cast(integral, %4 : !s64i), !u32i loc(#loc236)
    cir.call @srand(%5) : (!u32i) -> () extra(#fn_attr) loc(#loc237)
    %6 = cir.get_global @".str.1" : !cir.ptr<!cir.array<!s8i x 18>> loc(#loc224)
    %7 = cir.cast(array_to_ptrdecay, %6 : !cir.ptr<!cir.array<!s8i x 18>>), !cir.ptr<!s8i> loc(#loc224)
    cir.call @printLine(%7) : (!cir.ptr<!s8i>) -> () loc(#loc238)
    cir.call @_ZN68CWE680_Integer_Overflow_to_Buffer_Overflow__malloc_connect_socket_334goodEv() : () -> () loc(#loc239)
    %8 = cir.get_global @".str.2" : !cir.ptr<!cir.array<!s8i x 16>> loc(#loc225)
    %9 = cir.cast(array_to_ptrdecay, %8 : !cir.ptr<!cir.array<!s8i x 16>>), !cir.ptr<!s8i> loc(#loc225)
    cir.call @printLine(%9) : (!cir.ptr<!s8i>) -> () loc(#loc240)
    %10 = cir.get_global @".str.3" : !cir.ptr<!cir.array<!s8i x 17>> loc(#loc226)
    %11 = cir.cast(array_to_ptrdecay, %10 : !cir.ptr<!cir.array<!s8i x 17>>), !cir.ptr<!s8i> loc(#loc226)
    cir.call @printLine(%11) : (!cir.ptr<!s8i>) -> () loc(#loc241)
    cir.call @_ZN68CWE680_Integer_Overflow_to_Buffer_Overflow__malloc_connect_socket_333badEv() : () -> () loc(#loc242)
    %12 = cir.get_global @".str.4" : !cir.ptr<!cir.array<!s8i x 15>> loc(#loc227)
    %13 = cir.cast(array_to_ptrdecay, %12 : !cir.ptr<!cir.array<!s8i x 15>>), !cir.ptr<!s8i> loc(#loc227)
    cir.call @printLine(%13) : (!cir.ptr<!s8i>) -> () loc(#loc243)
    %14 = cir.const #cir.int<0> : !s32i loc(#loc244)
    cir.store %14, %2 : !s32i, !cir.ptr<!s32i> loc(#loc339)
    %15 = cir.load %2 : !cir.ptr<!s32i>, !s32i loc(#loc339)
    cir.return %15 : !s32i loc(#loc339)
  } loc(#loc336)
} loc(#loc)
#loc = loc("/home/ladisgin/git_proj/juliet-c/testcases/CWE680_Integer_Overflow_to_Buffer_Overflow/CWE680_Integer_Overflow_to_Buffer_Overflow__malloc_connect_socket_33.cpp":0:0)
#loc1 = loc("/usr/include/sys/socket.h":102:1)
#loc2 = loc("/usr/include/sys/socket.h":102:62)
#loc3 = loc("/usr/include/arpa/inet.h":34:1)
#loc4 = loc("/usr/include/arpa/inet.h":34:47)
#loc5 = loc("CWE680_Integer_Overflow_to_Buffer_Overflow__malloc_connect_socket_33.cpp":78:49)
#loc6 = loc("/usr/include/netinet/in.h":404:1)
#loc7 = loc("/usr/include/netinet/in.h":405:40)
#loc8 = loc("/usr/include/sys/socket.h":126:1)
#loc9 = loc("/usr/include/sys/socket.h":126:75)
#loc10 = loc("/usr/include/sys/socket.h":145:1)
#loc11 = loc("/usr/include/sys/socket.h":145:68)
#loc12 = loc("/usr/include/stdlib.h":105:1)
#loc13 = loc("/usr/include/stdlib.h":106:33)
#loc14 = loc("/usr/include/unistd.h":358:1)
#loc15 = loc("/usr/include/unistd.h":358:27)
#loc16 = loc("/usr/include/stdlib.h":672:1)
#loc17 = loc("/usr/include/stdlib.h":672:45)
#loc18 = loc("/usr/include/stdlib.h":756:1)
#loc19 = loc("/usr/include/stdlib.h":756:70)
#loc20 = loc("../../testcasesupport/std_testcase_io.h":18:1)
#loc21 = loc("../../testcasesupport/std_testcase_io.h":18:33)
#loc22 = loc("/usr/include/stdlib.h":687:1)
#loc23 = loc("/usr/include/stdlib.h":687:32)
#loc24 = loc("CWE680_Integer_Overflow_to_Buffer_Overflow__malloc_connect_socket_33.cpp":46:1)
#loc25 = loc("CWE680_Integer_Overflow_to_Buffer_Overflow__malloc_connect_socket_33.cpp":125:1)
#loc26 = loc("CWE680_Integer_Overflow_to_Buffer_Overflow__malloc_connect_socket_33.cpp":48:5)
#loc27 = loc("CWE680_Integer_Overflow_to_Buffer_Overflow__malloc_connect_socket_33.cpp":48:9)
#loc28 = loc("CWE680_Integer_Overflow_to_Buffer_Overflow__malloc_connect_socket_33.cpp":49:5)
#loc29 = loc("CWE680_Integer_Overflow_to_Buffer_Overflow__malloc_connect_socket_33.cpp":49:20)
#loc30 = loc("CWE680_Integer_Overflow_to_Buffer_Overflow__malloc_connect_socket_33.cpp":51:13)
#loc31 = loc("CWE680_Integer_Overflow_to_Buffer_Overflow__malloc_connect_socket_33.cpp":51:12)
#loc32 = loc("CWE680_Integer_Overflow_to_Buffer_Overflow__malloc_connect_socket_33.cpp":51:5)
#loc33 = loc("CWE680_Integer_Overflow_to_Buffer_Overflow__malloc_connect_socket_33.cpp":52:5)
#loc34 = loc("CWE680_Integer_Overflow_to_Buffer_Overflow__malloc_connect_socket_33.cpp":107:5)
#loc35 = loc("CWE680_Integer_Overflow_to_Buffer_Overflow__malloc_connect_socket_33.cpp":57:9)
#loc36 = loc("CWE680_Integer_Overflow_to_Buffer_Overflow__malloc_connect_socket_33.cpp":57:13)
#loc37 = loc("CWE680_Integer_Overflow_to_Buffer_Overflow__malloc_connect_socket_33.cpp":58:9)
#loc38 = loc("CWE680_Integer_Overflow_to_Buffer_Overflow__malloc_connect_socket_33.cpp":58:28)
#loc39 = loc("CWE680_Integer_Overflow_to_Buffer_Overflow__malloc_connect_socket_33.cpp":59:9)
#loc40 = loc("CWE680_Integer_Overflow_to_Buffer_Overflow__malloc_connect_socket_33.cpp":59:32)
#loc41 = loc("CWE680_Integer_Overflow_to_Buffer_Overflow__malloc_connect_socket_33.cpp":60:9)
#loc42 = loc("CWE680_Integer_Overflow_to_Buffer_Overflow__malloc_connect_socket_33.cpp":60:41)
#loc43 = loc("CWE680_Integer_Overflow_to_Buffer_Overflow__malloc_connect_socket_33.cpp":61:9)
#loc44 = loc("CWE680_Integer_Overflow_to_Buffer_Overflow__malloc_connect_socket_33.cpp":96:17)
#loc45 = loc("CWE680_Integer_Overflow_to_Buffer_Overflow__malloc_connect_socket_33.cpp":71:36)
#loc46 = loc("CWE680_Integer_Overflow_to_Buffer_Overflow__malloc_connect_socket_33.cpp":71:45)
#loc47 = loc("CWE680_Integer_Overflow_to_Buffer_Overflow__malloc_connect_socket_33.cpp":71:58)
#loc48 = loc("CWE680_Integer_Overflow_to_Buffer_Overflow__malloc_connect_socket_33.cpp":71:29)
#loc49 = loc("CWE680_Integer_Overflow_to_Buffer_Overflow__malloc_connect_socket_33.cpp":71:13)
#loc50 = loc("CWE680_Integer_Overflow_to_Buffer_Overflow__malloc_connect_socket_33.cpp":71:69)
#loc51 = loc("CWE680_Integer_Overflow_to_Buffer_Overflow__malloc_connect_socket_33.cpp":72:13)
#loc52 = loc("CWE680_Integer_Overflow_to_Buffer_Overflow__malloc_connect_socket_33.cpp":75:13)
#loc53 = loc("CWE680_Integer_Overflow_to_Buffer_Overflow__malloc_connect_socket_33.cpp":72:17)
#loc54 = loc("CWE680_Integer_Overflow_to_Buffer_Overflow__malloc_connect_socket_33.cpp":72:34)
#loc55 = loc("CWE680_Integer_Overflow_to_Buffer_Overflow__malloc_connect_socket_33.cpp":73:13)
#loc56 = loc("CWE680_Integer_Overflow_to_Buffer_Overflow__malloc_connect_socket_33.cpp":74:17)
#loc57 = loc("CWE680_Integer_Overflow_to_Buffer_Overflow__malloc_connect_socket_33.cpp":76:20)
#loc58 = loc("CWE680_Integer_Overflow_to_Buffer_Overflow__malloc_connect_socket_33.cpp":76:21)
#loc59 = loc("CWE680_Integer_Overflow_to_Buffer_Overflow__malloc_connect_socket_33.cpp":76:30)
#loc60 = loc("CWE680_Integer_Overflow_to_Buffer_Overflow__malloc_connect_socket_33.cpp":76:33)
#loc61 = loc("CWE680_Integer_Overflow_to_Buffer_Overflow__malloc_connect_socket_33.cpp":76:47)
#loc62 = loc("CWE680_Integer_Overflow_to_Buffer_Overflow__malloc_connect_socket_33.cpp":76:13)
#loc63 = loc("CWE680_Integer_Overflow_to_Buffer_Overflow__malloc_connect_socket_33.cpp":76:48)
#loc64 = loc("CWE680_Integer_Overflow_to_Buffer_Overflow__malloc_connect_socket_33.cpp":77:34)
#loc65 = loc("/usr/include/netinet/in.h":249:5)
#loc66 = loc("CWE680_Integer_Overflow_to_Buffer_Overflow__malloc_connect_socket_33.cpp":77:13)
#loc67 = loc("CWE680_Integer_Overflow_to_Buffer_Overflow__malloc_connect_socket_33.cpp":78:39)
#loc68 = loc("/usr/include/netinet/in.h":251:20)
#loc69 = loc("/usr/include/netinet/in.h":33:15)
#loc70 = loc("CWE680_Integer_Overflow_to_Buffer_Overflow__malloc_connect_socket_33.cpp":78:13)
#loc71 = loc("CWE680_Integer_Overflow_to_Buffer_Overflow__malloc_connect_socket_33.cpp":78:59)
#loc72 = loc("CWE680_Integer_Overflow_to_Buffer_Overflow__malloc_connect_socket_33.cpp":79:38)
#loc73 = loc("CWE680_Integer_Overflow_to_Buffer_Overflow__malloc_connect_socket_33.cpp":79:32)
#loc74 = loc("/usr/include/netinet/in.h":250:15)
#loc75 = loc("CWE680_Integer_Overflow_to_Buffer_Overflow__malloc_connect_socket_33.cpp":79:13)
#loc76 = loc("CWE680_Integer_Overflow_to_Buffer_Overflow__malloc_connect_socket_33.cpp":79:46)
#loc77 = loc("CWE680_Integer_Overflow_to_Buffer_Overflow__malloc_connect_socket_33.cpp":80:13)
#loc78 = loc("CWE680_Integer_Overflow_to_Buffer_Overflow__malloc_connect_socket_33.cpp":83:13)
#loc79 = loc("CWE680_Integer_Overflow_to_Buffer_Overflow__malloc_connect_socket_33.cpp":80:25)
#loc80 = loc("CWE680_Integer_Overflow_to_Buffer_Overflow__malloc_connect_socket_33.cpp":80:58)
#loc81 = loc("CWE680_Integer_Overflow_to_Buffer_Overflow__malloc_connect_socket_33.cpp":80:59)
#loc82 = loc("CWE680_Integer_Overflow_to_Buffer_Overflow__malloc_connect_socket_33.cpp":80:68)
#loc83 = loc("CWE680_Integer_Overflow_to_Buffer_Overflow__malloc_connect_socket_33.cpp":80:82)
#loc84 = loc("CWE680_Integer_Overflow_to_Buffer_Overflow__malloc_connect_socket_33.cpp":80:17)
#loc85 = loc("CWE680_Integer_Overflow_to_Buffer_Overflow__malloc_connect_socket_33.cpp":80:88)
#loc86 = loc("CWE680_Integer_Overflow_to_Buffer_Overflow__malloc_connect_socket_33.cpp":81:13)
#loc87 = loc("CWE680_Integer_Overflow_to_Buffer_Overflow__malloc_connect_socket_33.cpp":82:17)
#loc88 = loc("CWE680_Integer_Overflow_to_Buffer_Overflow__malloc_connect_socket_33.cpp":86:31)
#loc89 = loc("CWE680_Integer_Overflow_to_Buffer_Overflow__malloc_connect_socket_33.cpp":86:46)
#loc90 = loc("CWE680_Integer_Overflow_to_Buffer_Overflow__malloc_connect_socket_33.cpp":86:59)
#loc91 = loc("CWE680_Integer_Overflow_to_Buffer_Overflow__malloc_connect_socket_33.cpp":86:77)
#loc92 = loc("CWE680_Integer_Overflow_to_Buffer_Overflow__malloc_connect_socket_33.cpp":86:80)
#loc93 = loc("CWE680_Integer_Overflow_to_Buffer_Overflow__malloc_connect_socket_33.cpp":86:26)
#loc94 = loc("CWE680_Integer_Overflow_to_Buffer_Overflow__malloc_connect_socket_33.cpp":86:13)
#loc95 = loc("CWE680_Integer_Overflow_to_Buffer_Overflow__malloc_connect_socket_33.cpp":86:81)
#loc96 = loc("CWE680_Integer_Overflow_to_Buffer_Overflow__malloc_connect_socket_33.cpp":87:13)
#loc97 = loc("CWE680_Integer_Overflow_to_Buffer_Overflow__malloc_connect_socket_33.cpp":90:13)
#loc98 = loc("CWE680_Integer_Overflow_to_Buffer_Overflow__malloc_connect_socket_33.cpp":87:17)
#loc99 = loc("CWE680_Integer_Overflow_to_Buffer_Overflow__malloc_connect_socket_33.cpp":87:31)
#loc100 = loc("CWE680_Integer_Overflow_to_Buffer_Overflow__malloc_connect_socket_33.cpp":87:44)
#loc101 = loc("CWE680_Integer_Overflow_to_Buffer_Overflow__malloc_connect_socket_33.cpp":87:47)
#loc102 = loc("CWE680_Integer_Overflow_to_Buffer_Overflow__malloc_connect_socket_33.cpp":87:61)
#loc103 = loc("CWE680_Integer_Overflow_to_Buffer_Overflow__malloc_connect_socket_33.cpp":88:13)
#loc104 = loc("CWE680_Integer_Overflow_to_Buffer_Overflow__malloc_connect_socket_33.cpp":89:17)
#loc105 = loc("CWE680_Integer_Overflow_to_Buffer_Overflow__malloc_connect_socket_33.cpp":92:39)
#loc106 = loc("CWE680_Integer_Overflow_to_Buffer_Overflow__malloc_connect_socket_33.cpp":92:25)
#loc107 = loc("CWE680_Integer_Overflow_to_Buffer_Overflow__malloc_connect_socket_33.cpp":92:13)
#loc108 = loc("CWE680_Integer_Overflow_to_Buffer_Overflow__malloc_connect_socket_33.cpp":94:25)
#loc109 = loc("CWE680_Integer_Overflow_to_Buffer_Overflow__malloc_connect_socket_33.cpp":94:20)
#loc110 = loc("CWE680_Integer_Overflow_to_Buffer_Overflow__malloc_connect_socket_33.cpp":94:13)
#loc111 = loc("CWE680_Integer_Overflow_to_Buffer_Overflow__malloc_connect_socket_33.cpp":94:36)
#loc112 = loc("CWE680_Integer_Overflow_to_Buffer_Overflow__malloc_connect_socket_33.cpp":96:16)
#loc113 = loc("CWE680_Integer_Overflow_to_Buffer_Overflow__malloc_connect_socket_33.cpp":97:9)
#loc114 = loc("CWE680_Integer_Overflow_to_Buffer_Overflow__malloc_connect_socket_33.cpp":100:9)
#loc115 = loc("CWE680_Integer_Overflow_to_Buffer_Overflow__malloc_connect_socket_33.cpp":97:13)
#loc116 = loc("CWE680_Integer_Overflow_to_Buffer_Overflow__malloc_connect_socket_33.cpp":97:30)
#loc117 = loc("CWE680_Integer_Overflow_to_Buffer_Overflow__malloc_connect_socket_33.cpp":98:9)
#loc118 = loc("CWE680_Integer_Overflow_to_Buffer_Overflow__malloc_connect_socket_33.cpp":99:26)
#loc119 = loc("CWE680_Integer_Overflow_to_Buffer_Overflow__malloc_connect_socket_33.cpp":99:13)
#loc120 = loc("CWE680_Integer_Overflow_to_Buffer_Overflow__malloc_connect_socket_33.cpp":108:5)
#loc121 = loc("CWE680_Integer_Overflow_to_Buffer_Overflow__malloc_connect_socket_33.cpp":124:5)
#loc122 = loc("CWE680_Integer_Overflow_to_Buffer_Overflow__malloc_connect_socket_33.cpp":109:9)
#loc123 = loc("CWE680_Integer_Overflow_to_Buffer_Overflow__malloc_connect_socket_33.cpp":109:20)
#loc124 = loc("CWE680_Integer_Overflow_to_Buffer_Overflow__malloc_connect_socket_33.cpp":110:9)
#loc125 = loc("CWE680_Integer_Overflow_to_Buffer_Overflow__malloc_connect_socket_33.cpp":123:9)
#loc126 = loc("CWE680_Integer_Overflow_to_Buffer_Overflow__malloc_connect_socket_33.cpp":111:13)
#loc127 = loc("CWE680_Integer_Overflow_to_Buffer_Overflow__malloc_connect_socket_33.cpp":111:20)
#loc128 = loc("CWE680_Integer_Overflow_to_Buffer_Overflow__malloc_connect_socket_33.cpp":112:13)
#loc129 = loc("CWE680_Integer_Overflow_to_Buffer_Overflow__malloc_connect_socket_33.cpp":112:18)
#loc130 = loc("CWE680_Integer_Overflow_to_Buffer_Overflow__malloc_connect_socket_33.cpp":115:32)
#loc131 = loc("CWE680_Integer_Overflow_to_Buffer_Overflow__malloc_connect_socket_33.cpp":115:39)
#loc132 = loc("CWE680_Integer_Overflow_to_Buffer_Overflow__malloc_connect_socket_33.cpp":115:46)
#loc133 = loc("CWE680_Integer_Overflow_to_Buffer_Overflow__malloc_connect_socket_33.cpp":115:56)
#loc134 = loc("CWE680_Integer_Overflow_to_Buffer_Overflow__malloc_connect_socket_33.cpp":115:57)
#loc135 = loc("CWE680_Integer_Overflow_to_Buffer_Overflow__malloc_connect_socket_33.cpp":115:13)
#loc136 = loc("CWE680_Integer_Overflow_to_Buffer_Overflow__malloc_connect_socket_33.cpp":116:13)
#loc137 = loc("CWE680_Integer_Overflow_to_Buffer_Overflow__malloc_connect_socket_33.cpp":116:47)
#loc138 = loc("CWE680_Integer_Overflow_to_Buffer_Overflow__malloc_connect_socket_33.cpp":116:17)
#loc139 = loc("CWE680_Integer_Overflow_to_Buffer_Overflow__malloc_connect_socket_33.cpp":116:31)
#loc140 = loc("CWE680_Integer_Overflow_to_Buffer_Overflow__malloc_connect_socket_33.cpp":116:37)
#loc141 = loc("CWE680_Integer_Overflow_to_Buffer_Overflow__malloc_connect_socket_33.cpp":116:38)
#loc142 = loc("CWE680_Integer_Overflow_to_Buffer_Overflow__malloc_connect_socket_33.cpp":116:44)
#loc143 = loc("CWE680_Integer_Overflow_to_Buffer_Overflow__malloc_connect_socket_33.cpp":116:43)
#loc144 = loc("CWE680_Integer_Overflow_to_Buffer_Overflow__malloc_connect_socket_33.cpp":117:13)
#loc145 = loc("CWE680_Integer_Overflow_to_Buffer_Overflow__malloc_connect_socket_33.cpp":120:13)
#loc146 = loc("CWE680_Integer_Overflow_to_Buffer_Overflow__malloc_connect_socket_33.cpp":117:22)
#loc147 = loc("CWE680_Integer_Overflow_to_Buffer_Overflow__malloc_connect_socket_33.cpp":117:18)
#loc148 = loc("CWE680_Integer_Overflow_to_Buffer_Overflow__malloc_connect_socket_33.cpp":117:25)
#loc149 = loc("CWE680_Integer_Overflow_to_Buffer_Overflow__malloc_connect_socket_33.cpp":117:37)
#loc150 = loc("CWE680_Integer_Overflow_to_Buffer_Overflow__malloc_connect_socket_33.cpp":119:33)
#loc151 = loc("CWE680_Integer_Overflow_to_Buffer_Overflow__malloc_connect_socket_33.cpp":119:17)
#loc152 = loc("CWE680_Integer_Overflow_to_Buffer_Overflow__malloc_connect_socket_33.cpp":119:28)
#loc153 = loc("CWE680_Integer_Overflow_to_Buffer_Overflow__malloc_connect_socket_33.cpp":119:29)
#loc154 = loc("CWE680_Integer_Overflow_to_Buffer_Overflow__malloc_connect_socket_33.cpp":117:44)
#loc155 = loc("CWE680_Integer_Overflow_to_Buffer_Overflow__malloc_connect_socket_33.cpp":117:43)
#loc156 = loc("CWE680_Integer_Overflow_to_Buffer_Overflow__malloc_connect_socket_33.cpp":121:26)
#loc157 = loc("CWE680_Integer_Overflow_to_Buffer_Overflow__malloc_connect_socket_33.cpp":121:37)
#loc158 = loc("CWE680_Integer_Overflow_to_Buffer_Overflow__malloc_connect_socket_33.cpp":121:38)
#loc159 = loc("CWE680_Integer_Overflow_to_Buffer_Overflow__malloc_connect_socket_33.cpp":121:13)
#loc160 = loc("CWE680_Integer_Overflow_to_Buffer_Overflow__malloc_connect_socket_33.cpp":122:13)
#loc161 = loc("CWE680_Integer_Overflow_to_Buffer_Overflow__malloc_connect_socket_33.cpp":122:18)
#loc162 = loc("CWE680_Integer_Overflow_to_Buffer_Overflow__malloc_connect_socket_33.cpp":132:1)
#loc163 = loc("CWE680_Integer_Overflow_to_Buffer_Overflow__malloc_connect_socket_33.cpp":157:1)
#loc164 = loc("CWE680_Integer_Overflow_to_Buffer_Overflow__malloc_connect_socket_33.cpp":134:5)
#loc165 = loc("CWE680_Integer_Overflow_to_Buffer_Overflow__malloc_connect_socket_33.cpp":134:9)
#loc166 = loc("CWE680_Integer_Overflow_to_Buffer_Overflow__malloc_connect_socket_33.cpp":135:5)
#loc167 = loc("CWE680_Integer_Overflow_to_Buffer_Overflow__malloc_connect_socket_33.cpp":135:20)
#loc168 = loc("CWE680_Integer_Overflow_to_Buffer_Overflow__malloc_connect_socket_33.cpp":137:13)
#loc169 = loc("CWE680_Integer_Overflow_to_Buffer_Overflow__malloc_connect_socket_33.cpp":137:12)
#loc170 = loc("CWE680_Integer_Overflow_to_Buffer_Overflow__malloc_connect_socket_33.cpp":137:5)
#loc171 = loc("CWE680_Integer_Overflow_to_Buffer_Overflow__malloc_connect_socket_33.cpp":139:12)
#loc172 = loc("CWE680_Integer_Overflow_to_Buffer_Overflow__malloc_connect_socket_33.cpp":139:5)
#loc173 = loc("CWE680_Integer_Overflow_to_Buffer_Overflow__malloc_connect_socket_33.cpp":140:5)
#loc174 = loc("CWE680_Integer_Overflow_to_Buffer_Overflow__malloc_connect_socket_33.cpp":156:5)
#loc175 = loc("CWE680_Integer_Overflow_to_Buffer_Overflow__malloc_connect_socket_33.cpp":141:9)
#loc176 = loc("CWE680_Integer_Overflow_to_Buffer_Overflow__malloc_connect_socket_33.cpp":141:20)
#loc177 = loc("CWE680_Integer_Overflow_to_Buffer_Overflow__malloc_connect_socket_33.cpp":142:9)
#loc178 = loc("CWE680_Integer_Overflow_to_Buffer_Overflow__malloc_connect_socket_33.cpp":155:9)
#loc179 = loc("CWE680_Integer_Overflow_to_Buffer_Overflow__malloc_connect_socket_33.cpp":143:13)
#loc180 = loc("CWE680_Integer_Overflow_to_Buffer_Overflow__malloc_connect_socket_33.cpp":143:20)
#loc181 = loc("CWE680_Integer_Overflow_to_Buffer_Overflow__malloc_connect_socket_33.cpp":144:13)
#loc182 = loc("CWE680_Integer_Overflow_to_Buffer_Overflow__malloc_connect_socket_33.cpp":144:18)
#loc183 = loc("CWE680_Integer_Overflow_to_Buffer_Overflow__malloc_connect_socket_33.cpp":147:32)
#loc184 = loc("CWE680_Integer_Overflow_to_Buffer_Overflow__malloc_connect_socket_33.cpp":147:39)
#loc185 = loc("CWE680_Integer_Overflow_to_Buffer_Overflow__malloc_connect_socket_33.cpp":147:46)
#loc186 = loc("CWE680_Integer_Overflow_to_Buffer_Overflow__malloc_connect_socket_33.cpp":147:56)
#loc187 = loc("CWE680_Integer_Overflow_to_Buffer_Overflow__malloc_connect_socket_33.cpp":147:57)
#loc188 = loc("CWE680_Integer_Overflow_to_Buffer_Overflow__malloc_connect_socket_33.cpp":147:13)
#loc189 = loc("CWE680_Integer_Overflow_to_Buffer_Overflow__malloc_connect_socket_33.cpp":148:13)
#loc190 = loc("CWE680_Integer_Overflow_to_Buffer_Overflow__malloc_connect_socket_33.cpp":148:47)
#loc191 = loc("CWE680_Integer_Overflow_to_Buffer_Overflow__malloc_connect_socket_33.cpp":148:17)
#loc192 = loc("CWE680_Integer_Overflow_to_Buffer_Overflow__malloc_connect_socket_33.cpp":148:31)
#loc193 = loc("CWE680_Integer_Overflow_to_Buffer_Overflow__malloc_connect_socket_33.cpp":148:37)
#loc194 = loc("CWE680_Integer_Overflow_to_Buffer_Overflow__malloc_connect_socket_33.cpp":148:38)
#loc195 = loc("CWE680_Integer_Overflow_to_Buffer_Overflow__malloc_connect_socket_33.cpp":148:44)
#loc196 = loc("CWE680_Integer_Overflow_to_Buffer_Overflow__malloc_connect_socket_33.cpp":148:43)
#loc197 = loc("CWE680_Integer_Overflow_to_Buffer_Overflow__malloc_connect_socket_33.cpp":149:13)
#loc198 = loc("CWE680_Integer_Overflow_to_Buffer_Overflow__malloc_connect_socket_33.cpp":152:13)
#loc199 = loc("CWE680_Integer_Overflow_to_Buffer_Overflow__malloc_connect_socket_33.cpp":149:22)
#loc200 = loc("CWE680_Integer_Overflow_to_Buffer_Overflow__malloc_connect_socket_33.cpp":149:18)
#loc201 = loc("CWE680_Integer_Overflow_to_Buffer_Overflow__malloc_connect_socket_33.cpp":149:25)
#loc202 = loc("CWE680_Integer_Overflow_to_Buffer_Overflow__malloc_connect_socket_33.cpp":149:37)
#loc203 = loc("CWE680_Integer_Overflow_to_Buffer_Overflow__malloc_connect_socket_33.cpp":151:33)
#loc204 = loc("CWE680_Integer_Overflow_to_Buffer_Overflow__malloc_connect_socket_33.cpp":151:17)
#loc205 = loc("CWE680_Integer_Overflow_to_Buffer_Overflow__malloc_connect_socket_33.cpp":151:28)
#loc206 = loc("CWE680_Integer_Overflow_to_Buffer_Overflow__malloc_connect_socket_33.cpp":151:29)
#loc207 = loc("CWE680_Integer_Overflow_to_Buffer_Overflow__malloc_connect_socket_33.cpp":149:44)
#loc208 = loc("CWE680_Integer_Overflow_to_Buffer_Overflow__malloc_connect_socket_33.cpp":149:43)
#loc209 = loc("CWE680_Integer_Overflow_to_Buffer_Overflow__malloc_connect_socket_33.cpp":153:26)
#loc210 = loc("CWE680_Integer_Overflow_to_Buffer_Overflow__malloc_connect_socket_33.cpp":153:37)
#loc211 = loc("CWE680_Integer_Overflow_to_Buffer_Overflow__malloc_connect_socket_33.cpp":153:38)
#loc212 = loc("CWE680_Integer_Overflow_to_Buffer_Overflow__malloc_connect_socket_33.cpp":153:13)
#loc213 = loc("CWE680_Integer_Overflow_to_Buffer_Overflow__malloc_connect_socket_33.cpp":154:13)
#loc214 = loc("CWE680_Integer_Overflow_to_Buffer_Overflow__malloc_connect_socket_33.cpp":154:18)
#loc215 = loc("CWE680_Integer_Overflow_to_Buffer_Overflow__malloc_connect_socket_33.cpp":159:1)
#loc216 = loc("CWE680_Integer_Overflow_to_Buffer_Overflow__malloc_connect_socket_33.cpp":162:1)
#loc217 = loc("CWE680_Integer_Overflow_to_Buffer_Overflow__malloc_connect_socket_33.cpp":161:5)
#loc218 = loc("/usr/include/stdlib.h":575:1)
#loc219 = loc("/usr/include/stdlib.h":575:41)
#loc220 = loc("/usr/include/time.h":76:1)
#loc221 = loc("/usr/include/time.h":76:38)
#loc222 = loc("../../testcasesupport/std_testcase_io.h":14:1)
#loc223 = loc("../../testcasesupport/std_testcase_io.h":14:33)
#loc224 = loc("CWE680_Integer_Overflow_to_Buffer_Overflow__malloc_connect_socket_33.cpp":182:15)
#loc225 = loc("CWE680_Integer_Overflow_to_Buffer_Overflow__malloc_connect_socket_33.cpp":184:15)
#loc226 = loc("CWE680_Integer_Overflow_to_Buffer_Overflow__malloc_connect_socket_33.cpp":187:15)
#loc227 = loc("CWE680_Integer_Overflow_to_Buffer_Overflow__malloc_connect_socket_33.cpp":189:15)
#loc228 = loc("CWE680_Integer_Overflow_to_Buffer_Overflow__malloc_connect_socket_33.cpp":177:1)
#loc229 = loc("CWE680_Integer_Overflow_to_Buffer_Overflow__malloc_connect_socket_33.cpp":192:1)
#loc234 = loc("CWE680_Integer_Overflow_to_Buffer_Overflow__malloc_connect_socket_33.cpp":178:1)
#loc235 = loc("CWE680_Integer_Overflow_to_Buffer_Overflow__malloc_connect_socket_33.cpp":180:27)
#loc236 = loc("CWE680_Integer_Overflow_to_Buffer_Overflow__malloc_connect_socket_33.cpp":180:22)
#loc237 = loc("CWE680_Integer_Overflow_to_Buffer_Overflow__malloc_connect_socket_33.cpp":180:5)
#loc238 = loc("CWE680_Integer_Overflow_to_Buffer_Overflow__malloc_connect_socket_33.cpp":182:5)
#loc239 = loc("CWE680_Integer_Overflow_to_Buffer_Overflow__malloc_connect_socket_33.cpp":183:5)
#loc240 = loc("CWE680_Integer_Overflow_to_Buffer_Overflow__malloc_connect_socket_33.cpp":184:5)
#loc241 = loc("CWE680_Integer_Overflow_to_Buffer_Overflow__malloc_connect_socket_33.cpp":187:5)
#loc242 = loc("CWE680_Integer_Overflow_to_Buffer_Overflow__malloc_connect_socket_33.cpp":188:5)
#loc243 = loc("CWE680_Integer_Overflow_to_Buffer_Overflow__malloc_connect_socket_33.cpp":189:5)
#loc244 = loc("CWE680_Integer_Overflow_to_Buffer_Overflow__malloc_connect_socket_33.cpp":191:12)
#loc245 = loc("CWE680_Integer_Overflow_to_Buffer_Overflow__malloc_connect_socket_33.cpp":191:5)
#loc246 = loc(fused[#loc1, #loc2])
#loc247 = loc(fused[#loc3, #loc4])
#loc248 = loc(fused[#loc6, #loc7])
#loc249 = loc(fused[#loc8, #loc9])
#loc250 = loc(fused[#loc10, #loc11])
#loc251 = loc(fused[#loc12, #loc13])
#loc252 = loc(fused[#loc14, #loc15])
#loc253 = loc(fused[#loc16, #loc17])
#loc254 = loc(fused[#loc18, #loc19])
#loc255 = loc(fused[#loc20, #loc21])
#loc256 = loc(fused[#loc22, #loc23])
#loc257 = loc(fused[#loc24, #loc25])
#loc258 = loc(fused[#loc26, #loc27])
#loc259 = loc(fused[#loc28, #loc29])
#loc260 = loc(fused[#loc32, #loc30])
#loc261 = loc(fused[#loc33, #loc34])
#loc262 = loc(fused[#loc35, #loc36])
#loc263 = loc(fused[#loc37, #loc38])
#loc264 = loc(fused[#loc39, #loc40])
#loc265 = loc(fused[#loc41, #loc42])
#loc266 = loc(fused[#loc43, #loc44])
#loc267 = loc(fused[#loc49, #loc50])
#loc268 = loc(fused[#loc51, #loc52])
#loc269 = loc(fused[#loc53, #loc54])
#loc270 = loc(fused[#loc55, #loc52])
#loc271 = loc(fused[#loc57, #loc58])
#loc272 = loc(fused[#loc60, #loc61])
#loc273 = loc(fused[#loc62, #loc63])
#loc274 = loc(fused[#loc66, #loc64])
#loc275 = loc(fused[#loc70, #loc71])
#loc276 = loc(fused[#loc75, #loc76])
#loc277 = loc(fused[#loc77, #loc78])
#loc278 = loc(fused[#loc80, #loc81])
#loc279 = loc(fused[#loc82, #loc83])
#loc280 = loc(fused[#loc84, #loc85])
#loc281 = loc(fused[#loc86, #loc78])
#loc282 = loc(fused[#loc90, #loc91])
#loc283 = loc(fused[#loc94, #loc95])
#loc284 = loc(fused[#loc96, #loc97])
#loc285 = loc(fused[#loc98, #loc99])
#loc286 = loc(fused[#loc101, #loc102])
#loc287 = loc(fused[#loc103, #loc97])
#loc288 = loc(fused[#loc107, #loc105])
#loc289 = loc(fused[#loc110, #loc111])
#loc290 = loc(fused[#loc113, #loc114])
#loc291 = loc(fused[#loc115, #loc116])
#loc292 = loc(fused[#loc117, #loc114])
#loc293 = loc(fused[#loc120, #loc121])
#loc294 = loc(fused[#loc122, #loc123])
#loc295 = loc(fused[#loc124, #loc125])
#loc296 = loc(fused[#loc126, #loc127])
#loc297 = loc(fused[#loc128, #loc129])
#loc298 = loc(fused[#loc132, #loc133])
#loc299 = loc(fused[#loc131, #loc133])
#loc300 = loc(fused[#loc130, #loc134])
#loc301 = loc(fused[#loc135, #loc134])
#loc302 = loc(fused[#loc136, #loc137])
#loc303 = loc(fused[#loc138, #loc139])
#loc304 = loc(fused[#loc140, #loc137])
#loc305 = loc(fused[#loc144, #loc145])
#loc306 = loc(fused[#loc147, #loc146])
#loc307 = loc(fused[#loc148, #loc149])
#loc308 = loc(fused[#loc151, #loc150])
#loc309 = loc(fused[#loc155, #loc154])
#loc310 = loc(fused[#loc162, #loc163])
#loc311 = loc(fused[#loc164, #loc165])
#loc312 = loc(fused[#loc166, #loc167])
#loc313 = loc(fused[#loc170, #loc168])
#loc314 = loc(fused[#loc172, #loc171])
#loc315 = loc(fused[#loc173, #loc174])
#loc316 = loc(fused[#loc175, #loc176])
#loc317 = loc(fused[#loc177, #loc178])
#loc318 = loc(fused[#loc179, #loc180])
#loc319 = loc(fused[#loc181, #loc182])
#loc320 = loc(fused[#loc185, #loc186])
#loc321 = loc(fused[#loc184, #loc186])
#loc322 = loc(fused[#loc183, #loc187])
#loc323 = loc(fused[#loc188, #loc187])
#loc324 = loc(fused[#loc189, #loc190])
#loc325 = loc(fused[#loc191, #loc192])
#loc326 = loc(fused[#loc193, #loc190])
#loc327 = loc(fused[#loc197, #loc198])
#loc328 = loc(fused[#loc200, #loc199])
#loc329 = loc(fused[#loc201, #loc202])
#loc330 = loc(fused[#loc204, #loc203])
#loc331 = loc(fused[#loc208, #loc207])
#loc332 = loc(fused[#loc215, #loc216])
#loc333 = loc(fused[#loc218, #loc219])
#loc334 = loc(fused[#loc220, #loc221])
#loc335 = loc(fused[#loc222, #loc223])
#loc336 = loc(fused[#loc228, #loc229])
#loc339 = loc(fused[#loc245, #loc244])
