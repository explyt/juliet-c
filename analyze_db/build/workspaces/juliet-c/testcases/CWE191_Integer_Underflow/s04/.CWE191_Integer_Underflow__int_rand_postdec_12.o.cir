!s32i = !cir.int<s, 32>
!s8i = !cir.int<s, 8>
!u32i = !cir.int<u, 32>
#fn_attr = #cir<extra({nothrow = #cir.nothrow})>
#fn_attr1 = #cir<extra({inline = #cir.inline<no>, nothrow = #cir.nothrow, optnone = #cir.optnone, uwtable = #cir.uwtable<async>})>
#loc27 = loc("CWE191_Integer_Underflow__int_rand_postdec_12.c":30:16)
#loc80 = loc("CWE191_Integer_Underflow__int_rand_postdec_12.c":77:16)
#loc82 = loc("CWE191_Integer_Underflow__int_rand_postdec_12.c":82:16)
module @"/workspaces/juliet-c/testcases/CWE191_Integer_Underflow/s04/CWE191_Integer_Underflow__int_rand_postdec_12.c" attributes {cir.lang = #cir.lang<c>, cir.sob = #cir.signed_overflow_behavior<undefined>, cir.triple = "x86_64-unknown-linux-gnu", cir.type_size_info = #cir.type_size_info<char = 8, int = 32, size_t = 64>, cir.uwtable = #cir.uwtable<async>, dlti.dl_spec = #dlti.dl_spec<!llvm.ptr<271> = dense<32> : vector<4xi64>, !llvm.ptr<272> = dense<64> : vector<4xi64>, i64 = dense<64> : vector<2xi64>, i32 = dense<32> : vector<2xi64>, f128 = dense<128> : vector<2xi64>, f64 = dense<64> : vector<2xi64>, f16 = dense<16> : vector<2xi64>, i1 = dense<8> : vector<2xi64>, !llvm.ptr<270> = dense<32> : vector<4xi64>, !llvm.ptr = dense<64> : vector<4xi64>, i16 = dense<16> : vector<2xi64>, i8 = dense<8> : vector<2xi64>, i128 = dense<128> : vector<2xi64>, f80 = dense<128> : vector<2xi64>, "dlti.endianness" = "little", "dlti.mangling_mode" = "e", "dlti.stack_alignment" = 128 : i64>} {
  cir.func no_proto private @globalReturnsTrueOrFalse(...) -> !s32i loc(#loc159)
  cir.func private @rand() -> !s32i extra(#fn_attr) loc(#loc160)
  cir.func private @printIntLine(!s32i) loc(#loc161)
  cir.func private @printLine(!cir.ptr<!s8i>) loc(#loc162)
  cir.global "private" constant cir_private dsolocal @".str" = #cir.const_array<"data value is too large to perform arithmetic safely.\00" : !cir.array<!s8i x 54>> : !cir.array<!s8i x 54> {alignment = 1 : i64} loc(#loc9)
  cir.func no_proto @CWE191_Integer_Underflow__int_rand_postdec_12_bad() extra(#fn_attr1) {
    %0 = cir.alloca !s32i, !cir.ptr<!s32i>, ["result", init] {alignment = 4 : i64} loc(#loc164)
    %1 = cir.alloca !s32i, !cir.ptr<!s32i>, ["result", init] {alignment = 4 : i64} loc(#loc165)
    %2 = cir.alloca !s32i, !cir.ptr<!s32i>, ["data"] {alignment = 4 : i64} loc(#loc166)
    %3 = cir.const #cir.int<0> : !s32i loc(#loc18)
    cir.store %3, %2 : !s32i, !cir.ptr<!s32i> loc(#loc167)
    cir.br ^bb1 loc(#loc168)
  ^bb1:  // pred: ^bb0
    %4 = cir.get_global @globalReturnsTrueOrFalse : !cir.ptr<!cir.func<(...) -> !s32i>> loc(#loc169)
    %5 = cir.cast(bitcast, %4 : !cir.ptr<!cir.func<(...) -> !s32i>>), !cir.ptr<!cir.func<() -> !s32i>> loc(#loc169)
    %6 = cir.call %5() : (!cir.ptr<!cir.func<() -> !s32i>>) -> !s32i loc(#loc22)
    %7 = cir.cast(int_to_bool, %6 : !s32i), !cir.bool loc(#loc22)
    cir.brcond %7 ^bb2, ^bb7 loc(#loc170)
  ^bb2:  // pred: ^bb1
    %8 = cir.call @rand() : () -> !s32i extra(#fn_attr) loc(#loc27)
    %9 = cir.const #cir.int<1> : !s32i loc(#loc27)
    %10 = cir.binop(and, %8, %9) : !s32i loc(#loc27)
    %11 = cir.cast(int_to_bool, %10 : !s32i), !cir.bool loc(#loc27)
    cir.brcond %11 ^bb3, ^bb4 loc(#loc27)
  ^bb3:  // pred: ^bb2
    %12 = cir.call @rand() : () -> !s32i extra(#fn_attr) loc(#loc27)
    %13 = cir.cast(integral, %12 : !s32i), !u32i loc(#loc27)
    %14 = cir.const #cir.int<30> : !s32i loc(#loc27)
    %15 = cir.shift(left, %13 : !u32i, %14 : !s32i) -> !u32i loc(#loc27)
    %16 = cir.call @rand() : () -> !s32i extra(#fn_attr) loc(#loc27)
    %17 = cir.cast(integral, %16 : !s32i), !u32i loc(#loc27)
    %18 = cir.const #cir.int<15> : !s32i loc(#loc27)
    %19 = cir.shift(left, %17 : !u32i, %18 : !s32i) -> !u32i loc(#loc27)
    %20 = cir.binop(xor, %15, %19) : !u32i loc(#loc27)
    %21 = cir.call @rand() : () -> !s32i extra(#fn_attr) loc(#loc27)
    %22 = cir.cast(integral, %21 : !s32i), !u32i loc(#loc27)
    %23 = cir.binop(xor, %20, %22) : !u32i loc(#loc27)
    cir.br ^bb5(%23 : !u32i) loc(#loc27)
  ^bb4:  // pred: ^bb2
    %24 = cir.call @rand() : () -> !s32i extra(#fn_attr) loc(#loc27)
    %25 = cir.cast(integral, %24 : !s32i), !u32i loc(#loc27)
    %26 = cir.const #cir.int<30> : !s32i loc(#loc27)
    %27 = cir.shift(left, %25 : !u32i, %26 : !s32i) -> !u32i loc(#loc27)
    %28 = cir.call @rand() : () -> !s32i extra(#fn_attr) loc(#loc27)
    %29 = cir.cast(integral, %28 : !s32i), !u32i loc(#loc27)
    %30 = cir.const #cir.int<15> : !s32i loc(#loc27)
    %31 = cir.shift(left, %29 : !u32i, %30 : !s32i) -> !u32i loc(#loc27)
    %32 = cir.binop(xor, %27, %31) : !u32i loc(#loc27)
    %33 = cir.call @rand() : () -> !s32i extra(#fn_attr) loc(#loc27)
    %34 = cir.cast(integral, %33 : !s32i), !u32i loc(#loc27)
    %35 = cir.binop(xor, %32, %34) : !u32i loc(#loc27)
    %36 = cir.unary(minus, %35) : !u32i, !u32i loc(#loc27)
    %37 = cir.const #cir.int<1> : !s32i loc(#loc27)
    %38 = cir.cast(integral, %37 : !s32i), !u32i loc(#loc27)
    %39 = cir.binop(sub, %36, %38) : !u32i loc(#loc27)
    cir.br ^bb5(%39 : !u32i) loc(#loc27)
  ^bb5(%40: !u32i loc("CWE191_Integer_Underflow__int_rand_postdec_12.c":30:16)):  // 2 preds: ^bb3, ^bb4
    cir.br ^bb6 loc(#loc27)
  ^bb6:  // pred: ^bb5
    %41 = cir.cast(integral, %40 : !u32i), !s32i loc(#loc27)
    cir.store %41, %2 : !s32i, !cir.ptr<!s32i> loc(#loc171)
    cir.br ^bb8 loc(#loc25)
  ^bb7:  // pred: ^bb1
    %42 = cir.const #cir.int<2> : !s32i loc(#loc29)
    %43 = cir.unary(minus, %42) nsw : !s32i, !s32i loc(#loc30)
    cir.store %43, %2 : !s32i, !cir.ptr<!s32i> loc(#loc172)
    cir.br ^bb8 loc(#loc21)
  ^bb8:  // 2 preds: ^bb6, ^bb7
    cir.br ^bb9 loc(#loc21)
  ^bb9:  // pred: ^bb8
    cir.br ^bb10 loc(#loc173)
  ^bb10:  // pred: ^bb9
    %44 = cir.get_global @globalReturnsTrueOrFalse : !cir.ptr<!cir.func<(...) -> !s32i>> loc(#loc174)
    %45 = cir.cast(bitcast, %44 : !cir.ptr<!cir.func<(...) -> !s32i>>), !cir.ptr<!cir.func<() -> !s32i>> loc(#loc174)
    %46 = cir.call %45() : (!cir.ptr<!cir.func<() -> !s32i>>) -> !s32i loc(#loc34)
    %47 = cir.cast(int_to_bool, %46 : !s32i), !cir.bool loc(#loc34)
    cir.brcond %47 ^bb11, ^bb14 loc(#loc175)
  ^bb11:  // pred: ^bb10
    cir.br ^bb12 loc(#loc176)
  ^bb12:  // pred: ^bb11
    %48 = cir.load %2 : !cir.ptr<!s32i>, !s32i loc(#loc41)
    %49 = cir.unary(dec, %48) nsw : !s32i, !s32i loc(#loc42)
    cir.store %49, %2 : !s32i, !cir.ptr<!s32i> loc(#loc177)
    %50 = cir.load %2 : !cir.ptr<!s32i>, !s32i loc(#loc13)
    cir.store %50, %0 : !s32i, !cir.ptr<!s32i> loc(#loc164)
    %51 = cir.load %0 : !cir.ptr<!s32i>, !s32i loc(#loc43)
    cir.call @printIntLine(%51) : (!s32i) -> () loc(#loc44)
    cir.br ^bb13 loc(#loc40)
  ^bb13:  // pred: ^bb12
    cir.br ^bb20 loc(#loc37)
  ^bb14:  // pred: ^bb10
    cir.br ^bb15 loc(#loc178)
  ^bb15:  // pred: ^bb14
    %52 = cir.load %2 : !cir.ptr<!s32i>, !s32i loc(#loc47)
    %53 = cir.const #cir.int<2147483647> : !s32i loc(#loc48)
    %54 = cir.unary(minus, %53) nsw : !s32i, !s32i loc(#loc48)
    %55 = cir.const #cir.int<1> : !s32i loc(#loc48)
    %56 = cir.binop(sub, %54, %55) nsw : !s32i loc(#loc48)
    %57 = cir.cmp(gt, %52, %56) : !s32i, !cir.bool loc(#loc179)
    cir.brcond %57 ^bb16, ^bb17 loc(#loc180)
  ^bb16:  // pred: ^bb15
    %58 = cir.load %2 : !cir.ptr<!s32i>, !s32i loc(#loc52)
    %59 = cir.unary(dec, %58) nsw : !s32i, !s32i loc(#loc53)
    cir.store %59, %2 : !s32i, !cir.ptr<!s32i> loc(#loc181)
    %60 = cir.load %2 : !cir.ptr<!s32i>, !s32i loc(#loc15)
    cir.store %60, %1 : !s32i, !cir.ptr<!s32i> loc(#loc165)
    %61 = cir.load %1 : !cir.ptr<!s32i>, !s32i loc(#loc54)
    cir.call @printIntLine(%61) : (!s32i) -> () loc(#loc55)
    cir.br ^bb18 loc(#loc50)
  ^bb17:  // pred: ^bb15
    %62 = cir.get_global @".str" : !cir.ptr<!cir.array<!s8i x 54>> loc(#loc9)
    %63 = cir.cast(array_to_ptrdecay, %62 : !cir.ptr<!cir.array<!s8i x 54>>), !cir.ptr<!s8i> loc(#loc9)
    cir.call @printLine(%63) : (!cir.ptr<!s8i>) -> () loc(#loc56)
    cir.br ^bb18 loc(#loc46)
  ^bb18:  // 2 preds: ^bb16, ^bb17
    cir.br ^bb19 loc(#loc46)
  ^bb19:  // pred: ^bb18
    cir.br ^bb20 loc(#loc33)
  ^bb20:  // 2 preds: ^bb13, ^bb19
    cir.br ^bb21 loc(#loc33)
  ^bb21:  // pred: ^bb20
    cir.return loc(#loc11)
  } loc(#loc163)
  cir.func no_proto @CWE191_Integer_Underflow__int_rand_postdec_12_good() extra(#fn_attr1) {
    %0 = cir.get_global @goodB2G : !cir.ptr<!cir.func<()>> loc(#loc183)
    cir.call %0() : (!cir.ptr<!cir.func<()>>) -> () loc(#loc59)
    %1 = cir.get_global @goodG2B : !cir.ptr<!cir.func<()>> loc(#loc184)
    cir.call %1() : (!cir.ptr<!cir.func<()>>) -> () loc(#loc61)
    cir.return loc(#loc58)
  } loc(#loc182)
  cir.func no_proto internal private @goodB2G() extra(#fn_attr1) {
    %0 = cir.alloca !s32i, !cir.ptr<!s32i>, ["result", init] {alignment = 4 : i64} loc(#loc186)
    %1 = cir.alloca !s32i, !cir.ptr<!s32i>, ["result", init] {alignment = 4 : i64} loc(#loc187)
    %2 = cir.alloca !s32i, !cir.ptr<!s32i>, ["data"] {alignment = 4 : i64} loc(#loc188)
    %3 = cir.const #cir.int<0> : !s32i loc(#loc71)
    cir.store %3, %2 : !s32i, !cir.ptr<!s32i> loc(#loc189)
    cir.br ^bb1 loc(#loc190)
  ^bb1:  // pred: ^bb0
    %4 = cir.get_global @globalReturnsTrueOrFalse : !cir.ptr<!cir.func<(...) -> !s32i>> loc(#loc191)
    %5 = cir.cast(bitcast, %4 : !cir.ptr<!cir.func<(...) -> !s32i>>), !cir.ptr<!cir.func<() -> !s32i>> loc(#loc191)
    %6 = cir.call %5() : (!cir.ptr<!cir.func<() -> !s32i>>) -> !s32i loc(#loc75)
    %7 = cir.cast(int_to_bool, %6 : !s32i), !cir.bool loc(#loc75)
    cir.brcond %7 ^bb2, ^bb7 loc(#loc192)
  ^bb2:  // pred: ^bb1
    %8 = cir.call @rand() : () -> !s32i extra(#fn_attr) loc(#loc80)
    %9 = cir.const #cir.int<1> : !s32i loc(#loc80)
    %10 = cir.binop(and, %8, %9) : !s32i loc(#loc80)
    %11 = cir.cast(int_to_bool, %10 : !s32i), !cir.bool loc(#loc80)
    cir.brcond %11 ^bb3, ^bb4 loc(#loc80)
  ^bb3:  // pred: ^bb2
    %12 = cir.call @rand() : () -> !s32i extra(#fn_attr) loc(#loc80)
    %13 = cir.cast(integral, %12 : !s32i), !u32i loc(#loc80)
    %14 = cir.const #cir.int<30> : !s32i loc(#loc80)
    %15 = cir.shift(left, %13 : !u32i, %14 : !s32i) -> !u32i loc(#loc80)
    %16 = cir.call @rand() : () -> !s32i extra(#fn_attr) loc(#loc80)
    %17 = cir.cast(integral, %16 : !s32i), !u32i loc(#loc80)
    %18 = cir.const #cir.int<15> : !s32i loc(#loc80)
    %19 = cir.shift(left, %17 : !u32i, %18 : !s32i) -> !u32i loc(#loc80)
    %20 = cir.binop(xor, %15, %19) : !u32i loc(#loc80)
    %21 = cir.call @rand() : () -> !s32i extra(#fn_attr) loc(#loc80)
    %22 = cir.cast(integral, %21 : !s32i), !u32i loc(#loc80)
    %23 = cir.binop(xor, %20, %22) : !u32i loc(#loc80)
    cir.br ^bb5(%23 : !u32i) loc(#loc80)
  ^bb4:  // pred: ^bb2
    %24 = cir.call @rand() : () -> !s32i extra(#fn_attr) loc(#loc80)
    %25 = cir.cast(integral, %24 : !s32i), !u32i loc(#loc80)
    %26 = cir.const #cir.int<30> : !s32i loc(#loc80)
    %27 = cir.shift(left, %25 : !u32i, %26 : !s32i) -> !u32i loc(#loc80)
    %28 = cir.call @rand() : () -> !s32i extra(#fn_attr) loc(#loc80)
    %29 = cir.cast(integral, %28 : !s32i), !u32i loc(#loc80)
    %30 = cir.const #cir.int<15> : !s32i loc(#loc80)
    %31 = cir.shift(left, %29 : !u32i, %30 : !s32i) -> !u32i loc(#loc80)
    %32 = cir.binop(xor, %27, %31) : !u32i loc(#loc80)
    %33 = cir.call @rand() : () -> !s32i extra(#fn_attr) loc(#loc80)
    %34 = cir.cast(integral, %33 : !s32i), !u32i loc(#loc80)
    %35 = cir.binop(xor, %32, %34) : !u32i loc(#loc80)
    %36 = cir.unary(minus, %35) : !u32i, !u32i loc(#loc80)
    %37 = cir.const #cir.int<1> : !s32i loc(#loc80)
    %38 = cir.cast(integral, %37 : !s32i), !u32i loc(#loc80)
    %39 = cir.binop(sub, %36, %38) : !u32i loc(#loc80)
    cir.br ^bb5(%39 : !u32i) loc(#loc80)
  ^bb5(%40: !u32i loc("CWE191_Integer_Underflow__int_rand_postdec_12.c":77:16)):  // 2 preds: ^bb3, ^bb4
    cir.br ^bb6 loc(#loc80)
  ^bb6:  // pred: ^bb5
    %41 = cir.cast(integral, %40 : !u32i), !s32i loc(#loc80)
    cir.store %41, %2 : !s32i, !cir.ptr<!s32i> loc(#loc193)
    cir.br ^bb12 loc(#loc78)
  ^bb7:  // pred: ^bb1
    %42 = cir.call @rand() : () -> !s32i extra(#fn_attr) loc(#loc82)
    %43 = cir.const #cir.int<1> : !s32i loc(#loc82)
    %44 = cir.binop(and, %42, %43) : !s32i loc(#loc82)
    %45 = cir.cast(int_to_bool, %44 : !s32i), !cir.bool loc(#loc82)
    cir.brcond %45 ^bb8, ^bb9 loc(#loc82)
  ^bb8:  // pred: ^bb7
    %46 = cir.call @rand() : () -> !s32i extra(#fn_attr) loc(#loc82)
    %47 = cir.cast(integral, %46 : !s32i), !u32i loc(#loc82)
    %48 = cir.const #cir.int<30> : !s32i loc(#loc82)
    %49 = cir.shift(left, %47 : !u32i, %48 : !s32i) -> !u32i loc(#loc82)
    %50 = cir.call @rand() : () -> !s32i extra(#fn_attr) loc(#loc82)
    %51 = cir.cast(integral, %50 : !s32i), !u32i loc(#loc82)
    %52 = cir.const #cir.int<15> : !s32i loc(#loc82)
    %53 = cir.shift(left, %51 : !u32i, %52 : !s32i) -> !u32i loc(#loc82)
    %54 = cir.binop(xor, %49, %53) : !u32i loc(#loc82)
    %55 = cir.call @rand() : () -> !s32i extra(#fn_attr) loc(#loc82)
    %56 = cir.cast(integral, %55 : !s32i), !u32i loc(#loc82)
    %57 = cir.binop(xor, %54, %56) : !u32i loc(#loc82)
    cir.br ^bb10(%57 : !u32i) loc(#loc82)
  ^bb9:  // pred: ^bb7
    %58 = cir.call @rand() : () -> !s32i extra(#fn_attr) loc(#loc82)
    %59 = cir.cast(integral, %58 : !s32i), !u32i loc(#loc82)
    %60 = cir.const #cir.int<30> : !s32i loc(#loc82)
    %61 = cir.shift(left, %59 : !u32i, %60 : !s32i) -> !u32i loc(#loc82)
    %62 = cir.call @rand() : () -> !s32i extra(#fn_attr) loc(#loc82)
    %63 = cir.cast(integral, %62 : !s32i), !u32i loc(#loc82)
    %64 = cir.const #cir.int<15> : !s32i loc(#loc82)
    %65 = cir.shift(left, %63 : !u32i, %64 : !s32i) -> !u32i loc(#loc82)
    %66 = cir.binop(xor, %61, %65) : !u32i loc(#loc82)
    %67 = cir.call @rand() : () -> !s32i extra(#fn_attr) loc(#loc82)
    %68 = cir.cast(integral, %67 : !s32i), !u32i loc(#loc82)
    %69 = cir.binop(xor, %66, %68) : !u32i loc(#loc82)
    %70 = cir.unary(minus, %69) : !u32i, !u32i loc(#loc82)
    %71 = cir.const #cir.int<1> : !s32i loc(#loc82)
    %72 = cir.cast(integral, %71 : !s32i), !u32i loc(#loc82)
    %73 = cir.binop(sub, %70, %72) : !u32i loc(#loc82)
    cir.br ^bb10(%73 : !u32i) loc(#loc82)
  ^bb10(%74: !u32i loc("CWE191_Integer_Underflow__int_rand_postdec_12.c":82:16)):  // 2 preds: ^bb8, ^bb9
    cir.br ^bb11 loc(#loc82)
  ^bb11:  // pred: ^bb10
    %75 = cir.cast(integral, %74 : !u32i), !s32i loc(#loc82)
    cir.store %75, %2 : !s32i, !cir.ptr<!s32i> loc(#loc194)
    cir.br ^bb12 loc(#loc74)
  ^bb12:  // 2 preds: ^bb6, ^bb11
    cir.br ^bb13 loc(#loc74)
  ^bb13:  // pred: ^bb12
    cir.br ^bb14 loc(#loc195)
  ^bb14:  // pred: ^bb13
    %76 = cir.get_global @globalReturnsTrueOrFalse : !cir.ptr<!cir.func<(...) -> !s32i>> loc(#loc196)
    %77 = cir.cast(bitcast, %76 : !cir.ptr<!cir.func<(...) -> !s32i>>), !cir.ptr<!cir.func<() -> !s32i>> loc(#loc196)
    %78 = cir.call %77() : (!cir.ptr<!cir.func<() -> !s32i>>) -> !s32i loc(#loc86)
    %79 = cir.cast(int_to_bool, %78 : !s32i), !cir.bool loc(#loc86)
    cir.brcond %79 ^bb15, ^bb21 loc(#loc197)
  ^bb15:  // pred: ^bb14
    cir.br ^bb16 loc(#loc198)
  ^bb16:  // pred: ^bb15
    %80 = cir.load %2 : !cir.ptr<!s32i>, !s32i loc(#loc93)
    %81 = cir.const #cir.int<2147483647> : !s32i loc(#loc94)
    %82 = cir.unary(minus, %81) nsw : !s32i, !s32i loc(#loc94)
    %83 = cir.const #cir.int<1> : !s32i loc(#loc94)
    %84 = cir.binop(sub, %82, %83) nsw : !s32i loc(#loc94)
    %85 = cir.cmp(gt, %80, %84) : !s32i, !cir.bool loc(#loc199)
    cir.brcond %85 ^bb17, ^bb18 loc(#loc200)
  ^bb17:  // pred: ^bb16
    %86 = cir.load %2 : !cir.ptr<!s32i>, !s32i loc(#loc98)
    %87 = cir.unary(dec, %86) nsw : !s32i, !s32i loc(#loc99)
    cir.store %87, %2 : !s32i, !cir.ptr<!s32i> loc(#loc201)
    %88 = cir.load %2 : !cir.ptr<!s32i>, !s32i loc(#loc66)
    cir.store %88, %0 : !s32i, !cir.ptr<!s32i> loc(#loc186)
    %89 = cir.load %0 : !cir.ptr<!s32i>, !s32i loc(#loc100)
    cir.call @printIntLine(%89) : (!s32i) -> () loc(#loc101)
    cir.br ^bb19 loc(#loc96)
  ^bb18:  // pred: ^bb16
    %90 = cir.get_global @".str" : !cir.ptr<!cir.array<!s8i x 54>> loc(#loc102)
    %91 = cir.cast(array_to_ptrdecay, %90 : !cir.ptr<!cir.array<!s8i x 54>>), !cir.ptr<!s8i> loc(#loc102)
    cir.call @printLine(%91) : (!cir.ptr<!s8i>) -> () loc(#loc103)
    cir.br ^bb19 loc(#loc92)
  ^bb19:  // 2 preds: ^bb17, ^bb18
    cir.br ^bb20 loc(#loc92)
  ^bb20:  // pred: ^bb19
    cir.br ^bb27 loc(#loc89)
  ^bb21:  // pred: ^bb14
    cir.br ^bb22 loc(#loc202)
  ^bb22:  // pred: ^bb21
    %92 = cir.load %2 : !cir.ptr<!s32i>, !s32i loc(#loc106)
    %93 = cir.const #cir.int<2147483647> : !s32i loc(#loc107)
    %94 = cir.unary(minus, %93) nsw : !s32i, !s32i loc(#loc107)
    %95 = cir.const #cir.int<1> : !s32i loc(#loc107)
    %96 = cir.binop(sub, %94, %95) nsw : !s32i loc(#loc107)
    %97 = cir.cmp(gt, %92, %96) : !s32i, !cir.bool loc(#loc203)
    cir.brcond %97 ^bb23, ^bb24 loc(#loc204)
  ^bb23:  // pred: ^bb22
    %98 = cir.load %2 : !cir.ptr<!s32i>, !s32i loc(#loc111)
    %99 = cir.unary(dec, %98) nsw : !s32i, !s32i loc(#loc112)
    cir.store %99, %2 : !s32i, !cir.ptr<!s32i> loc(#loc205)
    %100 = cir.load %2 : !cir.ptr<!s32i>, !s32i loc(#loc68)
    cir.store %100, %1 : !s32i, !cir.ptr<!s32i> loc(#loc187)
    %101 = cir.load %1 : !cir.ptr<!s32i>, !s32i loc(#loc113)
    cir.call @printIntLine(%101) : (!s32i) -> () loc(#loc114)
    cir.br ^bb25 loc(#loc109)
  ^bb24:  // pred: ^bb22
    %102 = cir.get_global @".str" : !cir.ptr<!cir.array<!s8i x 54>> loc(#loc115)
    %103 = cir.cast(array_to_ptrdecay, %102 : !cir.ptr<!cir.array<!s8i x 54>>), !cir.ptr<!s8i> loc(#loc115)
    cir.call @printLine(%103) : (!cir.ptr<!s8i>) -> () loc(#loc116)
    cir.br ^bb25 loc(#loc105)
  ^bb25:  // 2 preds: ^bb23, ^bb24
    cir.br ^bb26 loc(#loc105)
  ^bb26:  // pred: ^bb25
    cir.br ^bb27 loc(#loc85)
  ^bb27:  // 2 preds: ^bb20, ^bb26
    cir.br ^bb28 loc(#loc85)
  ^bb28:  // pred: ^bb27
    cir.return loc(#loc64)
  } loc(#loc185)
  cir.func no_proto internal private @goodG2B() extra(#fn_attr1) {
    %0 = cir.alloca !s32i, !cir.ptr<!s32i>, ["result", init] {alignment = 4 : i64} loc(#loc207)
    %1 = cir.alloca !s32i, !cir.ptr<!s32i>, ["result", init] {alignment = 4 : i64} loc(#loc208)
    %2 = cir.alloca !s32i, !cir.ptr<!s32i>, ["data"] {alignment = 4 : i64} loc(#loc209)
    %3 = cir.const #cir.int<0> : !s32i loc(#loc125)
    cir.store %3, %2 : !s32i, !cir.ptr<!s32i> loc(#loc210)
    cir.br ^bb1 loc(#loc211)
  ^bb1:  // pred: ^bb0
    %4 = cir.get_global @globalReturnsTrueOrFalse : !cir.ptr<!cir.func<(...) -> !s32i>> loc(#loc212)
    %5 = cir.cast(bitcast, %4 : !cir.ptr<!cir.func<(...) -> !s32i>>), !cir.ptr<!cir.func<() -> !s32i>> loc(#loc212)
    %6 = cir.call %5() : (!cir.ptr<!cir.func<() -> !s32i>>) -> !s32i loc(#loc129)
    %7 = cir.cast(int_to_bool, %6 : !s32i), !cir.bool loc(#loc129)
    cir.brcond %7 ^bb2, ^bb3 loc(#loc213)
  ^bb2:  // pred: ^bb1
    %8 = cir.const #cir.int<2> : !s32i loc(#loc134)
    %9 = cir.unary(minus, %8) nsw : !s32i, !s32i loc(#loc135)
    cir.store %9, %2 : !s32i, !cir.ptr<!s32i> loc(#loc214)
    cir.br ^bb4 loc(#loc132)
  ^bb3:  // pred: ^bb1
    %10 = cir.const #cir.int<2> : !s32i loc(#loc137)
    %11 = cir.unary(minus, %10) nsw : !s32i, !s32i loc(#loc138)
    cir.store %11, %2 : !s32i, !cir.ptr<!s32i> loc(#loc215)
    cir.br ^bb4 loc(#loc128)
  ^bb4:  // 2 preds: ^bb2, ^bb3
    cir.br ^bb5 loc(#loc128)
  ^bb5:  // pred: ^bb4
    cir.br ^bb6 loc(#loc216)
  ^bb6:  // pred: ^bb5
    %12 = cir.get_global @globalReturnsTrueOrFalse : !cir.ptr<!cir.func<(...) -> !s32i>> loc(#loc217)
    %13 = cir.cast(bitcast, %12 : !cir.ptr<!cir.func<(...) -> !s32i>>), !cir.ptr<!cir.func<() -> !s32i>> loc(#loc217)
    %14 = cir.call %13() : (!cir.ptr<!cir.func<() -> !s32i>>) -> !s32i loc(#loc142)
    %15 = cir.cast(int_to_bool, %14 : !s32i), !cir.bool loc(#loc142)
    cir.brcond %15 ^bb7, ^bb10 loc(#loc218)
  ^bb7:  // pred: ^bb6
    cir.br ^bb8 loc(#loc219)
  ^bb8:  // pred: ^bb7
    %16 = cir.load %2 : !cir.ptr<!s32i>, !s32i loc(#loc149)
    %17 = cir.unary(dec, %16) nsw : !s32i, !s32i loc(#loc150)
    cir.store %17, %2 : !s32i, !cir.ptr<!s32i> loc(#loc220)
    %18 = cir.load %2 : !cir.ptr<!s32i>, !s32i loc(#loc120)
    cir.store %18, %0 : !s32i, !cir.ptr<!s32i> loc(#loc207)
    %19 = cir.load %0 : !cir.ptr<!s32i>, !s32i loc(#loc151)
    cir.call @printIntLine(%19) : (!s32i) -> () loc(#loc152)
    cir.br ^bb9 loc(#loc148)
  ^bb9:  // pred: ^bb8
    cir.br ^bb13 loc(#loc145)
  ^bb10:  // pred: ^bb6
    cir.br ^bb11 loc(#loc221)
  ^bb11:  // pred: ^bb10
    %20 = cir.load %2 : !cir.ptr<!s32i>, !s32i loc(#loc155)
    %21 = cir.unary(dec, %20) nsw : !s32i, !s32i loc(#loc156)
    cir.store %21, %2 : !s32i, !cir.ptr<!s32i> loc(#loc222)
    %22 = cir.load %2 : !cir.ptr<!s32i>, !s32i loc(#loc122)
    cir.store %22, %1 : !s32i, !cir.ptr<!s32i> loc(#loc208)
    %23 = cir.load %1 : !cir.ptr<!s32i>, !s32i loc(#loc157)
    cir.call @printIntLine(%23) : (!s32i) -> () loc(#loc158)
    cir.br ^bb12 loc(#loc154)
  ^bb12:  // pred: ^bb11
    cir.br ^bb13 loc(#loc141)
  ^bb13:  // 2 preds: ^bb9, ^bb12
    cir.br ^bb14 loc(#loc141)
  ^bb14:  // pred: ^bb13
    cir.return loc(#loc118)
  } loc(#loc206)
} loc(#loc)
#loc = loc("/workspaces/juliet-c/testcases/CWE191_Integer_Underflow/s04/CWE191_Integer_Underflow__int_rand_postdec_12.c":0:0)
#loc1 = loc("../../../testcasesupport/std_testcase_io.h":52:1)
#loc2 = loc("../../../testcasesupport/std_testcase_io.h":52:30)
#loc3 = loc("/usr/include/stdlib.h":573:1)
#loc4 = loc("/usr/include/stdlib.h":573:24)
#loc5 = loc("../../../testcasesupport/std_testcase_io.h":18:1)
#loc6 = loc("../../../testcasesupport/std_testcase_io.h":18:33)
#loc7 = loc("../../../testcasesupport/std_testcase_io.h":14:1)
#loc8 = loc("../../../testcasesupport/std_testcase_io.h":14:33)
#loc9 = loc("CWE191_Integer_Underflow__int_rand_postdec_12.c":57:23)
#loc10 = loc("CWE191_Integer_Underflow__int_rand_postdec_12.c":22:1)
#loc11 = loc("CWE191_Integer_Underflow__int_rand_postdec_12.c":60:1)
#loc12 = loc("CWE191_Integer_Underflow__int_rand_postdec_12.c":42:13)
#loc13 = loc("CWE191_Integer_Underflow__int_rand_postdec_12.c":42:26)
#loc14 = loc("CWE191_Integer_Underflow__int_rand_postdec_12.c":52:13)
#loc15 = loc("CWE191_Integer_Underflow__int_rand_postdec_12.c":52:26)
#loc16 = loc("CWE191_Integer_Underflow__int_rand_postdec_12.c":24:5)
#loc17 = loc("CWE191_Integer_Underflow__int_rand_postdec_12.c":24:9)
#loc18 = loc("CWE191_Integer_Underflow__int_rand_postdec_12.c":26:12)
#loc19 = loc("CWE191_Integer_Underflow__int_rand_postdec_12.c":26:5)
#loc20 = loc("CWE191_Integer_Underflow__int_rand_postdec_12.c":27:5)
#loc21 = loc("CWE191_Integer_Underflow__int_rand_postdec_12.c":36:5)
#loc22 = loc("CWE191_Integer_Underflow__int_rand_postdec_12.c":27:8)
#loc23 = loc("CWE191_Integer_Underflow__int_rand_postdec_12.c":27:33)
#loc24 = loc("CWE191_Integer_Underflow__int_rand_postdec_12.c":28:5)
#loc25 = loc("CWE191_Integer_Underflow__int_rand_postdec_12.c":31:5)
#loc26 = loc("CWE191_Integer_Underflow__int_rand_postdec_12.c":33:5)
#loc28 = loc("CWE191_Integer_Underflow__int_rand_postdec_12.c":30:9)
#loc29 = loc("CWE191_Integer_Underflow__int_rand_postdec_12.c":35:17)
#loc30 = loc("CWE191_Integer_Underflow__int_rand_postdec_12.c":35:16)
#loc31 = loc("CWE191_Integer_Underflow__int_rand_postdec_12.c":35:9)
#loc32 = loc("CWE191_Integer_Underflow__int_rand_postdec_12.c":37:5)
#loc33 = loc("CWE191_Integer_Underflow__int_rand_postdec_12.c":59:5)
#loc34 = loc("CWE191_Integer_Underflow__int_rand_postdec_12.c":37:8)
#loc35 = loc("CWE191_Integer_Underflow__int_rand_postdec_12.c":37:33)
#loc36 = loc("CWE191_Integer_Underflow__int_rand_postdec_12.c":38:5)
#loc37 = loc("CWE191_Integer_Underflow__int_rand_postdec_12.c":45:5)
#loc38 = loc("CWE191_Integer_Underflow__int_rand_postdec_12.c":47:5)
#loc39 = loc("CWE191_Integer_Underflow__int_rand_postdec_12.c":39:9)
#loc40 = loc("CWE191_Integer_Underflow__int_rand_postdec_12.c":44:9)
#loc41 = loc("CWE191_Integer_Underflow__int_rand_postdec_12.c":41:17)
#loc42 = loc("CWE191_Integer_Underflow__int_rand_postdec_12.c":41:13)
#loc43 = loc("CWE191_Integer_Underflow__int_rand_postdec_12.c":43:26)
#loc44 = loc("CWE191_Integer_Underflow__int_rand_postdec_12.c":43:13)
#loc45 = loc("CWE191_Integer_Underflow__int_rand_postdec_12.c":49:9)
#loc46 = loc("CWE191_Integer_Underflow__int_rand_postdec_12.c":58:9)
#loc47 = loc("CWE191_Integer_Underflow__int_rand_postdec_12.c":49:13)
#loc48 = loc("CWE191_Integer_Underflow__int_rand_postdec_12.c":49:20)
#loc49 = loc("CWE191_Integer_Underflow__int_rand_postdec_12.c":50:9)
#loc50 = loc("CWE191_Integer_Underflow__int_rand_postdec_12.c":54:9)
#loc51 = loc("CWE191_Integer_Underflow__int_rand_postdec_12.c":56:9)
#loc52 = loc("CWE191_Integer_Underflow__int_rand_postdec_12.c":51:17)
#loc53 = loc("CWE191_Integer_Underflow__int_rand_postdec_12.c":51:13)
#loc54 = loc("CWE191_Integer_Underflow__int_rand_postdec_12.c":53:26)
#loc55 = loc("CWE191_Integer_Underflow__int_rand_postdec_12.c":53:13)
#loc56 = loc("CWE191_Integer_Underflow__int_rand_postdec_12.c":57:13)
#loc57 = loc("CWE191_Integer_Underflow__int_rand_postdec_12.c":152:1)
#loc58 = loc("CWE191_Integer_Underflow__int_rand_postdec_12.c":156:1)
#loc59 = loc("CWE191_Integer_Underflow__int_rand_postdec_12.c":154:5)
#loc60 = loc("CWE191_Integer_Underflow__int_rand_postdec_12.c":154:13)
#loc61 = loc("CWE191_Integer_Underflow__int_rand_postdec_12.c":155:5)
#loc62 = loc("CWE191_Integer_Underflow__int_rand_postdec_12.c":155:13)
#loc63 = loc("CWE191_Integer_Underflow__int_rand_postdec_12.c":69:1)
#loc64 = loc("CWE191_Integer_Underflow__int_rand_postdec_12.c":112:1)
#loc65 = loc("CWE191_Integer_Underflow__int_rand_postdec_12.c":90:13)
#loc66 = loc("CWE191_Integer_Underflow__int_rand_postdec_12.c":90:26)
#loc67 = loc("CWE191_Integer_Underflow__int_rand_postdec_12.c":104:13)
#loc68 = loc("CWE191_Integer_Underflow__int_rand_postdec_12.c":104:26)
#loc69 = loc("CWE191_Integer_Underflow__int_rand_postdec_12.c":71:5)
#loc70 = loc("CWE191_Integer_Underflow__int_rand_postdec_12.c":71:9)
#loc71 = loc("CWE191_Integer_Underflow__int_rand_postdec_12.c":73:12)
#loc72 = loc("CWE191_Integer_Underflow__int_rand_postdec_12.c":73:5)
#loc73 = loc("CWE191_Integer_Underflow__int_rand_postdec_12.c":74:5)
#loc74 = loc("CWE191_Integer_Underflow__int_rand_postdec_12.c":83:5)
#loc75 = loc("CWE191_Integer_Underflow__int_rand_postdec_12.c":74:8)
#loc76 = loc("CWE191_Integer_Underflow__int_rand_postdec_12.c":74:33)
#loc77 = loc("CWE191_Integer_Underflow__int_rand_postdec_12.c":75:5)
#loc78 = loc("CWE191_Integer_Underflow__int_rand_postdec_12.c":78:5)
#loc79 = loc("CWE191_Integer_Underflow__int_rand_postdec_12.c":80:5)
#loc81 = loc("CWE191_Integer_Underflow__int_rand_postdec_12.c":77:9)
#loc83 = loc("CWE191_Integer_Underflow__int_rand_postdec_12.c":82:9)
#loc84 = loc("CWE191_Integer_Underflow__int_rand_postdec_12.c":84:5)
#loc85 = loc("CWE191_Integer_Underflow__int_rand_postdec_12.c":111:5)
#loc86 = loc("CWE191_Integer_Underflow__int_rand_postdec_12.c":84:8)
#loc87 = loc("CWE191_Integer_Underflow__int_rand_postdec_12.c":84:33)
#loc88 = loc("CWE191_Integer_Underflow__int_rand_postdec_12.c":85:5)
#loc89 = loc("CWE191_Integer_Underflow__int_rand_postdec_12.c":97:5)
#loc90 = loc("CWE191_Integer_Underflow__int_rand_postdec_12.c":99:5)
#loc91 = loc("CWE191_Integer_Underflow__int_rand_postdec_12.c":87:9)
#loc92 = loc("CWE191_Integer_Underflow__int_rand_postdec_12.c":96:9)
#loc93 = loc("CWE191_Integer_Underflow__int_rand_postdec_12.c":87:13)
#loc94 = loc("CWE191_Integer_Underflow__int_rand_postdec_12.c":87:20)
#loc95 = loc("CWE191_Integer_Underflow__int_rand_postdec_12.c":88:9)
#loc96 = loc("CWE191_Integer_Underflow__int_rand_postdec_12.c":92:9)
#loc97 = loc("CWE191_Integer_Underflow__int_rand_postdec_12.c":94:9)
#loc98 = loc("CWE191_Integer_Underflow__int_rand_postdec_12.c":89:17)
#loc99 = loc("CWE191_Integer_Underflow__int_rand_postdec_12.c":89:13)
#loc100 = loc("CWE191_Integer_Underflow__int_rand_postdec_12.c":91:26)
#loc101 = loc("CWE191_Integer_Underflow__int_rand_postdec_12.c":91:13)
#loc102 = loc("CWE191_Integer_Underflow__int_rand_postdec_12.c":95:23)
#loc103 = loc("CWE191_Integer_Underflow__int_rand_postdec_12.c":95:13)
#loc104 = loc("CWE191_Integer_Underflow__int_rand_postdec_12.c":101:9)
#loc105 = loc("CWE191_Integer_Underflow__int_rand_postdec_12.c":110:9)
#loc106 = loc("CWE191_Integer_Underflow__int_rand_postdec_12.c":101:13)
#loc107 = loc("CWE191_Integer_Underflow__int_rand_postdec_12.c":101:20)
#loc108 = loc("CWE191_Integer_Underflow__int_rand_postdec_12.c":102:9)
#loc109 = loc("CWE191_Integer_Underflow__int_rand_postdec_12.c":106:9)
#loc110 = loc("CWE191_Integer_Underflow__int_rand_postdec_12.c":108:9)
#loc111 = loc("CWE191_Integer_Underflow__int_rand_postdec_12.c":103:17)
#loc112 = loc("CWE191_Integer_Underflow__int_rand_postdec_12.c":103:13)
#loc113 = loc("CWE191_Integer_Underflow__int_rand_postdec_12.c":105:26)
#loc114 = loc("CWE191_Integer_Underflow__int_rand_postdec_12.c":105:13)
#loc115 = loc("CWE191_Integer_Underflow__int_rand_postdec_12.c":109:23)
#loc116 = loc("CWE191_Integer_Underflow__int_rand_postdec_12.c":109:13)
#loc117 = loc("CWE191_Integer_Underflow__int_rand_postdec_12.c":117:1)
#loc118 = loc("CWE191_Integer_Underflow__int_rand_postdec_12.c":150:1)
#loc119 = loc("CWE191_Integer_Underflow__int_rand_postdec_12.c":137:13)
#loc120 = loc("CWE191_Integer_Underflow__int_rand_postdec_12.c":137:26)
#loc121 = loc("CWE191_Integer_Underflow__int_rand_postdec_12.c":146:13)
#loc122 = loc("CWE191_Integer_Underflow__int_rand_postdec_12.c":146:26)
#loc123 = loc("CWE191_Integer_Underflow__int_rand_postdec_12.c":119:5)
#loc124 = loc("CWE191_Integer_Underflow__int_rand_postdec_12.c":119:9)
#loc125 = loc("CWE191_Integer_Underflow__int_rand_postdec_12.c":121:12)
#loc126 = loc("CWE191_Integer_Underflow__int_rand_postdec_12.c":121:5)
#loc127 = loc("CWE191_Integer_Underflow__int_rand_postdec_12.c":122:5)
#loc128 = loc("CWE191_Integer_Underflow__int_rand_postdec_12.c":131:5)
#loc129 = loc("CWE191_Integer_Underflow__int_rand_postdec_12.c":122:8)
#loc130 = loc("CWE191_Integer_Underflow__int_rand_postdec_12.c":122:33)
#loc131 = loc("CWE191_Integer_Underflow__int_rand_postdec_12.c":123:5)
#loc132 = loc("CWE191_Integer_Underflow__int_rand_postdec_12.c":126:5)
#loc133 = loc("CWE191_Integer_Underflow__int_rand_postdec_12.c":128:5)
#loc134 = loc("CWE191_Integer_Underflow__int_rand_postdec_12.c":125:17)
#loc135 = loc("CWE191_Integer_Underflow__int_rand_postdec_12.c":125:16)
#loc136 = loc("CWE191_Integer_Underflow__int_rand_postdec_12.c":125:9)
#loc137 = loc("CWE191_Integer_Underflow__int_rand_postdec_12.c":130:17)
#loc138 = loc("CWE191_Integer_Underflow__int_rand_postdec_12.c":130:16)
#loc139 = loc("CWE191_Integer_Underflow__int_rand_postdec_12.c":130:9)
#loc140 = loc("CWE191_Integer_Underflow__int_rand_postdec_12.c":132:5)
#loc141 = loc("CWE191_Integer_Underflow__int_rand_postdec_12.c":149:5)
#loc142 = loc("CWE191_Integer_Underflow__int_rand_postdec_12.c":132:8)
#loc143 = loc("CWE191_Integer_Underflow__int_rand_postdec_12.c":132:33)
#loc144 = loc("CWE191_Integer_Underflow__int_rand_postdec_12.c":133:5)
#loc145 = loc("CWE191_Integer_Underflow__int_rand_postdec_12.c":140:5)
#loc146 = loc("CWE191_Integer_Underflow__int_rand_postdec_12.c":142:5)
#loc147 = loc("CWE191_Integer_Underflow__int_rand_postdec_12.c":134:9)
#loc148 = loc("CWE191_Integer_Underflow__int_rand_postdec_12.c":139:9)
#loc149 = loc("CWE191_Integer_Underflow__int_rand_postdec_12.c":136:17)
#loc150 = loc("CWE191_Integer_Underflow__int_rand_postdec_12.c":136:13)
#loc151 = loc("CWE191_Integer_Underflow__int_rand_postdec_12.c":138:26)
#loc152 = loc("CWE191_Integer_Underflow__int_rand_postdec_12.c":138:13)
#loc153 = loc("CWE191_Integer_Underflow__int_rand_postdec_12.c":143:9)
#loc154 = loc("CWE191_Integer_Underflow__int_rand_postdec_12.c":148:9)
#loc155 = loc("CWE191_Integer_Underflow__int_rand_postdec_12.c":145:17)
#loc156 = loc("CWE191_Integer_Underflow__int_rand_postdec_12.c":145:13)
#loc157 = loc("CWE191_Integer_Underflow__int_rand_postdec_12.c":147:26)
#loc158 = loc("CWE191_Integer_Underflow__int_rand_postdec_12.c":147:13)
#loc159 = loc(fused[#loc1, #loc2])
#loc160 = loc(fused[#loc3, #loc4])
#loc161 = loc(fused[#loc5, #loc6])
#loc162 = loc(fused[#loc7, #loc8])
#loc163 = loc(fused[#loc10, #loc11])
#loc164 = loc(fused[#loc12, #loc13])
#loc165 = loc(fused[#loc14, #loc15])
#loc166 = loc(fused[#loc16, #loc17])
#loc167 = loc(fused[#loc19, #loc18])
#loc168 = loc(fused[#loc20, #loc21])
#loc169 = loc(fused[#loc22, #loc23])
#loc170 = loc(fused[#loc24, #loc25, #loc26, #loc21])
#loc171 = loc(fused[#loc28, #loc27])
#loc172 = loc(fused[#loc31, #loc29])
#loc173 = loc(fused[#loc32, #loc33])
#loc174 = loc(fused[#loc34, #loc35])
#loc175 = loc(fused[#loc36, #loc37, #loc38, #loc33])
#loc176 = loc(fused[#loc39, #loc40])
#loc177 = loc(fused[#loc42, #loc41])
#loc178 = loc(fused[#loc45, #loc46])
#loc179 = loc(fused[#loc47, #loc48])
#loc180 = loc(fused[#loc49, #loc50, #loc51, #loc46])
#loc181 = loc(fused[#loc53, #loc52])
#loc182 = loc(fused[#loc57, #loc58])
#loc183 = loc(fused[#loc59, #loc60])
#loc184 = loc(fused[#loc61, #loc62])
#loc185 = loc(fused[#loc63, #loc64])
#loc186 = loc(fused[#loc65, #loc66])
#loc187 = loc(fused[#loc67, #loc68])
#loc188 = loc(fused[#loc69, #loc70])
#loc189 = loc(fused[#loc72, #loc71])
#loc190 = loc(fused[#loc73, #loc74])
#loc191 = loc(fused[#loc75, #loc76])
#loc192 = loc(fused[#loc77, #loc78, #loc79, #loc74])
#loc193 = loc(fused[#loc81, #loc80])
#loc194 = loc(fused[#loc83, #loc82])
#loc195 = loc(fused[#loc84, #loc85])
#loc196 = loc(fused[#loc86, #loc87])
#loc197 = loc(fused[#loc88, #loc89, #loc90, #loc85])
#loc198 = loc(fused[#loc91, #loc92])
#loc199 = loc(fused[#loc93, #loc94])
#loc200 = loc(fused[#loc95, #loc96, #loc97, #loc92])
#loc201 = loc(fused[#loc99, #loc98])
#loc202 = loc(fused[#loc104, #loc105])
#loc203 = loc(fused[#loc106, #loc107])
#loc204 = loc(fused[#loc108, #loc109, #loc110, #loc105])
#loc205 = loc(fused[#loc112, #loc111])
#loc206 = loc(fused[#loc117, #loc118])
#loc207 = loc(fused[#loc119, #loc120])
#loc208 = loc(fused[#loc121, #loc122])
#loc209 = loc(fused[#loc123, #loc124])
#loc210 = loc(fused[#loc126, #loc125])
#loc211 = loc(fused[#loc127, #loc128])
#loc212 = loc(fused[#loc129, #loc130])
#loc213 = loc(fused[#loc131, #loc132, #loc133, #loc128])
#loc214 = loc(fused[#loc136, #loc134])
#loc215 = loc(fused[#loc139, #loc137])
#loc216 = loc(fused[#loc140, #loc141])
#loc217 = loc(fused[#loc142, #loc143])
#loc218 = loc(fused[#loc144, #loc145, #loc146, #loc141])
#loc219 = loc(fused[#loc147, #loc148])
#loc220 = loc(fused[#loc150, #loc149])
#loc221 = loc(fused[#loc153, #loc154])
#loc222 = loc(fused[#loc156, #loc155])
