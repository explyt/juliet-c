!s32i = !cir.int<s, 32>
!s8i = !cir.int<s, 8>
!u64i = !cir.int<u, 64>
!void = !cir.void
#fn_attr = #cir<extra({inline = #cir.inline<no>, optnone = #cir.optnone})>
#loc5 = loc("CWE122_Heap_Based_Buffer_Overflow__cpp_src_char_cpy_22b.cpp":30:18)
#loc6 = loc("CWE122_Heap_Based_Buffer_Overflow__cpp_src_char_cpy_22b.cpp":30:25)
#loc32 = loc("CWE122_Heap_Based_Buffer_Overflow__cpp_src_char_cpy_22b.cpp":51:23)
#loc33 = loc("CWE122_Heap_Based_Buffer_Overflow__cpp_src_char_cpy_22b.cpp":51:30)
#loc59 = loc("CWE122_Heap_Based_Buffer_Overflow__cpp_src_char_cpy_22b.cpp":68:23)
#loc60 = loc("CWE122_Heap_Based_Buffer_Overflow__cpp_src_char_cpy_22b.cpp":68:30)
#loc81 = loc(fused[#loc5, #loc6])
#loc90 = loc(fused[#loc32, #loc33])
#loc98 = loc(fused[#loc59, #loc60])
module @"/home/ladisgin/git_proj/juliet-c/testcases/CWE122_Heap_Based_Buffer_Overflow/s05/CWE122_Heap_Based_Buffer_Overflow__cpp_src_char_cpy_22b.cpp" attributes {cir.lang = #cir.lang<cxx>, cir.sob = #cir.signed_overflow_behavior<undefined>, cir.triple = "x86_64-unknown-linux-gnu", dlti.dl_spec = #dlti.dl_spec<i1 = dense<8> : vector<2xi64>, !llvm.ptr = dense<64> : vector<4xi64>, i8 = dense<8> : vector<2xi64>, i16 = dense<16> : vector<2xi64>, f80 = dense<128> : vector<2xi64>, i32 = dense<32> : vector<2xi64>, i128 = dense<128> : vector<2xi64>, f16 = dense<16> : vector<2xi64>, f64 = dense<64> : vector<2xi64>, i64 = dense<64> : vector<2xi64>, f128 = dense<128> : vector<2xi64>, !llvm.ptr<272> = dense<64> : vector<4xi64>, !llvm.ptr<271> = dense<32> : vector<4xi64>, !llvm.ptr<270> = dense<32> : vector<4xi64>, "dlti.stack_alignment" = 128 : i64, "dlti.endianness" = "little">} {
  cir.global "private" external @_ZN54CWE122_Heap_Based_Buffer_Overflow__cpp_src_char_cpy_229badGlobalE : !s32i {alignment = 4 : i64} loc(#loc79)
  cir.func @_ZN54CWE122_Heap_Based_Buffer_Overflow__cpp_src_char_cpy_229badSourceEPc(%arg0: !cir.ptr<!s8i> loc(fused[#loc5, #loc6])) -> !cir.ptr<!s8i> extra(#fn_attr) {
    %0 = cir.alloca !cir.ptr<!s8i>, !cir.ptr<!cir.ptr<!s8i>>, ["data", init] {alignment = 8 : i64} loc(#loc81)
    %1 = cir.alloca !cir.ptr<!s8i>, !cir.ptr<!cir.ptr<!s8i>>, ["__retval"] {alignment = 8 : i64} loc(#loc4)
    cir.store %arg0, %0 : !cir.ptr<!s8i>, !cir.ptr<!cir.ptr<!s8i>> loc(#loc7)
    cir.br ^bb1 loc(#loc82)
  ^bb1:  // pred: ^bb0
    %2 = cir.get_global @_ZN54CWE122_Heap_Based_Buffer_Overflow__cpp_src_char_cpy_229badGlobalE : !cir.ptr<!s32i> loc(#loc79)
    %3 = cir.load %2 : !cir.ptr<!s32i>, !s32i loc(#loc10)
    %4 = cir.cast(int_to_bool, %3 : !s32i), !cir.bool loc(#loc10)
    cir.brcond %4 ^bb2, ^bb3 loc(#loc83)
  ^bb2:  // pred: ^bb1
    %5 = cir.load %0 : !cir.ptr<!cir.ptr<!s8i>>, !cir.ptr<!s8i> loc(#loc12)
    %6 = cir.cast(bitcast, %5 : !cir.ptr<!s8i>), !cir.ptr<!void> loc(#loc12)
    %7 = cir.const #cir.int<65> : !s8i loc(#loc13)
    %8 = cir.cast(integral, %7 : !s8i), !s32i loc(#loc13)
    %9 = cir.const #cir.int<100> : !s32i loc(#loc14)
    %10 = cir.const #cir.int<1> : !s32i loc(#loc15)
    %11 = cir.binop(sub, %9, %10) nsw : !s32i loc(#loc14)
    %12 = cir.cast(integral, %11 : !s32i), !u64i loc(#loc14)
    cir.libc.memset %12 bytes from %6 set to %8 : !cir.ptr<!void>, !s32i, !u64i loc(#loc84)
    %13 = cir.const #cir.int<0> : !s8i loc(#loc18)
    %14 = cir.load %0 : !cir.ptr<!cir.ptr<!s8i>>, !cir.ptr<!s8i> loc(#loc19)
    %15 = cir.const #cir.int<100> : !s32i loc(#loc20)
    %16 = cir.const #cir.int<1> : !s32i loc(#loc21)
    %17 = cir.binop(sub, %15, %16) nsw : !s32i loc(#loc20)
    %18 = cir.ptr_stride(%14 : !cir.ptr<!s8i>, %17 : !s32i), !cir.ptr<!s8i> loc(#loc22)
    cir.store %13, %18 : !s8i, !cir.ptr<!s8i> loc(#loc85)
    cir.br ^bb3 loc(#loc9)
  ^bb3:  // 2 preds: ^bb1, ^bb2
    cir.br ^bb4 loc(#loc9)
  ^bb4:  // pred: ^bb3
    %19 = cir.load %0 : !cir.ptr<!cir.ptr<!s8i>>, !cir.ptr<!s8i> loc(#loc23)
    cir.store %19, %1 : !cir.ptr<!s8i>, !cir.ptr<!cir.ptr<!s8i>> loc(#loc86)
    %20 = cir.load %1 : !cir.ptr<!cir.ptr<!s8i>>, !cir.ptr<!s8i> loc(#loc86)
    cir.return %20 : !cir.ptr<!s8i> loc(#loc86)
  } loc(#loc80)
  cir.global "private" external @_ZN54CWE122_Heap_Based_Buffer_Overflow__cpp_src_char_cpy_2214goodG2B1GlobalE : !s32i {alignment = 4 : i64} loc(#loc87)
  cir.func private @printLine(!cir.ptr<!s8i>) loc(#loc88)
  cir.global "private" constant cir_private dsolocal @".str" = #cir.const_array<"Benign, fixed string\00" : !cir.array<!s8i x 21>> : !cir.array<!s8i x 21> {alignment = 1 : i64} loc(#loc29)
  cir.func @_ZN54CWE122_Heap_Based_Buffer_Overflow__cpp_src_char_cpy_2214goodG2B1SourceEPc(%arg0: !cir.ptr<!s8i> loc(fused[#loc32, #loc33])) -> !cir.ptr<!s8i> extra(#fn_attr) {
    %0 = cir.alloca !cir.ptr<!s8i>, !cir.ptr<!cir.ptr<!s8i>>, ["data", init] {alignment = 8 : i64} loc(#loc90)
    %1 = cir.alloca !cir.ptr<!s8i>, !cir.ptr<!cir.ptr<!s8i>>, ["__retval"] {alignment = 8 : i64} loc(#loc31)
    cir.store %arg0, %0 : !cir.ptr<!s8i>, !cir.ptr<!cir.ptr<!s8i>> loc(#loc34)
    cir.br ^bb1 loc(#loc91)
  ^bb1:  // pred: ^bb0
    %2 = cir.get_global @_ZN54CWE122_Heap_Based_Buffer_Overflow__cpp_src_char_cpy_2214goodG2B1GlobalE : !cir.ptr<!s32i> loc(#loc87)
    %3 = cir.load %2 : !cir.ptr<!s32i>, !s32i loc(#loc37)
    %4 = cir.cast(int_to_bool, %3 : !s32i), !cir.bool loc(#loc37)
    cir.brcond %4 ^bb2, ^bb3 loc(#loc92)
  ^bb2:  // pred: ^bb1
    %5 = cir.get_global @".str" : !cir.ptr<!cir.array<!s8i x 21>> loc(#loc29)
    %6 = cir.cast(array_to_ptrdecay, %5 : !cir.ptr<!cir.array<!s8i x 21>>), !cir.ptr<!s8i> loc(#loc29)
    cir.call @printLine(%6) : (!cir.ptr<!s8i>) -> () loc(#loc41)
    cir.br ^bb4 loc(#loc39)
  ^bb3:  // pred: ^bb1
    %7 = cir.load %0 : !cir.ptr<!cir.ptr<!s8i>>, !cir.ptr<!s8i> loc(#loc42)
    %8 = cir.cast(bitcast, %7 : !cir.ptr<!s8i>), !cir.ptr<!void> loc(#loc42)
    %9 = cir.const #cir.int<65> : !s8i loc(#loc43)
    %10 = cir.cast(integral, %9 : !s8i), !s32i loc(#loc43)
    %11 = cir.const #cir.int<50> : !s32i loc(#loc44)
    %12 = cir.const #cir.int<1> : !s32i loc(#loc45)
    %13 = cir.binop(sub, %11, %12) nsw : !s32i loc(#loc44)
    %14 = cir.cast(integral, %13 : !s32i), !u64i loc(#loc44)
    cir.libc.memset %14 bytes from %8 set to %10 : !cir.ptr<!void>, !s32i, !u64i loc(#loc93)
    %15 = cir.const #cir.int<0> : !s8i loc(#loc48)
    %16 = cir.load %0 : !cir.ptr<!cir.ptr<!s8i>>, !cir.ptr<!s8i> loc(#loc49)
    %17 = cir.const #cir.int<50> : !s32i loc(#loc50)
    %18 = cir.const #cir.int<1> : !s32i loc(#loc51)
    %19 = cir.binop(sub, %17, %18) nsw : !s32i loc(#loc50)
    %20 = cir.ptr_stride(%16 : !cir.ptr<!s8i>, %19 : !s32i), !cir.ptr<!s8i> loc(#loc52)
    cir.store %15, %20 : !s8i, !cir.ptr<!s8i> loc(#loc94)
    cir.br ^bb4 loc(#loc36)
  ^bb4:  // 2 preds: ^bb2, ^bb3
    cir.br ^bb5 loc(#loc36)
  ^bb5:  // pred: ^bb4
    %21 = cir.load %0 : !cir.ptr<!cir.ptr<!s8i>>, !cir.ptr<!s8i> loc(#loc53)
    cir.store %21, %1 : !cir.ptr<!s8i>, !cir.ptr<!cir.ptr<!s8i>> loc(#loc95)
    %22 = cir.load %1 : !cir.ptr<!cir.ptr<!s8i>>, !cir.ptr<!s8i> loc(#loc95)
    cir.return %22 : !cir.ptr<!s8i> loc(#loc95)
  } loc(#loc89)
  cir.global "private" external @_ZN54CWE122_Heap_Based_Buffer_Overflow__cpp_src_char_cpy_2214goodG2B2GlobalE : !s32i {alignment = 4 : i64} loc(#loc96)
  cir.func @_ZN54CWE122_Heap_Based_Buffer_Overflow__cpp_src_char_cpy_2214goodG2B2SourceEPc(%arg0: !cir.ptr<!s8i> loc(fused[#loc59, #loc60])) -> !cir.ptr<!s8i> extra(#fn_attr) {
    %0 = cir.alloca !cir.ptr<!s8i>, !cir.ptr<!cir.ptr<!s8i>>, ["data", init] {alignment = 8 : i64} loc(#loc98)
    %1 = cir.alloca !cir.ptr<!s8i>, !cir.ptr<!cir.ptr<!s8i>>, ["__retval"] {alignment = 8 : i64} loc(#loc58)
    cir.store %arg0, %0 : !cir.ptr<!s8i>, !cir.ptr<!cir.ptr<!s8i>> loc(#loc61)
    cir.br ^bb1 loc(#loc99)
  ^bb1:  // pred: ^bb0
    %2 = cir.get_global @_ZN54CWE122_Heap_Based_Buffer_Overflow__cpp_src_char_cpy_2214goodG2B2GlobalE : !cir.ptr<!s32i> loc(#loc96)
    %3 = cir.load %2 : !cir.ptr<!s32i>, !s32i loc(#loc64)
    %4 = cir.cast(int_to_bool, %3 : !s32i), !cir.bool loc(#loc64)
    cir.brcond %4 ^bb2, ^bb3 loc(#loc100)
  ^bb2:  // pred: ^bb1
    %5 = cir.load %0 : !cir.ptr<!cir.ptr<!s8i>>, !cir.ptr<!s8i> loc(#loc66)
    %6 = cir.cast(bitcast, %5 : !cir.ptr<!s8i>), !cir.ptr<!void> loc(#loc66)
    %7 = cir.const #cir.int<65> : !s8i loc(#loc67)
    %8 = cir.cast(integral, %7 : !s8i), !s32i loc(#loc67)
    %9 = cir.const #cir.int<50> : !s32i loc(#loc68)
    %10 = cir.const #cir.int<1> : !s32i loc(#loc69)
    %11 = cir.binop(sub, %9, %10) nsw : !s32i loc(#loc68)
    %12 = cir.cast(integral, %11 : !s32i), !u64i loc(#loc68)
    cir.libc.memset %12 bytes from %6 set to %8 : !cir.ptr<!void>, !s32i, !u64i loc(#loc101)
    %13 = cir.const #cir.int<0> : !s8i loc(#loc72)
    %14 = cir.load %0 : !cir.ptr<!cir.ptr<!s8i>>, !cir.ptr<!s8i> loc(#loc73)
    %15 = cir.const #cir.int<50> : !s32i loc(#loc74)
    %16 = cir.const #cir.int<1> : !s32i loc(#loc75)
    %17 = cir.binop(sub, %15, %16) nsw : !s32i loc(#loc74)
    %18 = cir.ptr_stride(%14 : !cir.ptr<!s8i>, %17 : !s32i), !cir.ptr<!s8i> loc(#loc76)
    cir.store %13, %18 : !s8i, !cir.ptr<!s8i> loc(#loc102)
    cir.br ^bb3 loc(#loc63)
  ^bb3:  // 2 preds: ^bb1, ^bb2
    cir.br ^bb4 loc(#loc63)
  ^bb4:  // pred: ^bb3
    %19 = cir.load %0 : !cir.ptr<!cir.ptr<!s8i>>, !cir.ptr<!s8i> loc(#loc77)
    cir.store %19, %1 : !cir.ptr<!s8i>, !cir.ptr<!cir.ptr<!s8i>> loc(#loc103)
    %20 = cir.load %1 : !cir.ptr<!cir.ptr<!s8i>>, !cir.ptr<!s8i> loc(#loc103)
    cir.return %20 : !cir.ptr<!s8i> loc(#loc103)
  } loc(#loc97)
} loc(#loc)
#loc = loc("/home/ladisgin/git_proj/juliet-c/testcases/CWE122_Heap_Based_Buffer_Overflow/s05/CWE122_Heap_Based_Buffer_Overflow__cpp_src_char_cpy_22b.cpp":0:0)
#loc1 = loc("CWE122_Heap_Based_Buffer_Overflow__cpp_src_char_cpy_22b.cpp":28:1)
#loc2 = loc("CWE122_Heap_Based_Buffer_Overflow__cpp_src_char_cpy_22b.cpp":28:12)
#loc3 = loc("CWE122_Heap_Based_Buffer_Overflow__cpp_src_char_cpy_22b.cpp":30:1)
#loc4 = loc("CWE122_Heap_Based_Buffer_Overflow__cpp_src_char_cpy_22b.cpp":39:1)
#loc7 = loc("CWE122_Heap_Based_Buffer_Overflow__cpp_src_char_cpy_22b.cpp":31:1)
#loc8 = loc("CWE122_Heap_Based_Buffer_Overflow__cpp_src_char_cpy_22b.cpp":32:5)
#loc9 = loc("CWE122_Heap_Based_Buffer_Overflow__cpp_src_char_cpy_22b.cpp":37:5)
#loc10 = loc("CWE122_Heap_Based_Buffer_Overflow__cpp_src_char_cpy_22b.cpp":32:8)
#loc11 = loc("CWE122_Heap_Based_Buffer_Overflow__cpp_src_char_cpy_22b.cpp":33:5)
#loc12 = loc("CWE122_Heap_Based_Buffer_Overflow__cpp_src_char_cpy_22b.cpp":35:16)
#loc13 = loc("CWE122_Heap_Based_Buffer_Overflow__cpp_src_char_cpy_22b.cpp":35:22)
#loc14 = loc("CWE122_Heap_Based_Buffer_Overflow__cpp_src_char_cpy_22b.cpp":35:27)
#loc15 = loc("CWE122_Heap_Based_Buffer_Overflow__cpp_src_char_cpy_22b.cpp":35:31)
#loc16 = loc("CWE122_Heap_Based_Buffer_Overflow__cpp_src_char_cpy_22b.cpp":35:9)
#loc17 = loc("CWE122_Heap_Based_Buffer_Overflow__cpp_src_char_cpy_22b.cpp":35:32)
#loc18 = loc("CWE122_Heap_Based_Buffer_Overflow__cpp_src_char_cpy_22b.cpp":36:23)
#loc19 = loc("CWE122_Heap_Based_Buffer_Overflow__cpp_src_char_cpy_22b.cpp":36:9)
#loc20 = loc("CWE122_Heap_Based_Buffer_Overflow__cpp_src_char_cpy_22b.cpp":36:14)
#loc21 = loc("CWE122_Heap_Based_Buffer_Overflow__cpp_src_char_cpy_22b.cpp":36:18)
#loc22 = loc("CWE122_Heap_Based_Buffer_Overflow__cpp_src_char_cpy_22b.cpp":36:19)
#loc23 = loc("CWE122_Heap_Based_Buffer_Overflow__cpp_src_char_cpy_22b.cpp":38:12)
#loc24 = loc("CWE122_Heap_Based_Buffer_Overflow__cpp_src_char_cpy_22b.cpp":38:5)
#loc25 = loc("CWE122_Heap_Based_Buffer_Overflow__cpp_src_char_cpy_22b.cpp":47:1)
#loc26 = loc("CWE122_Heap_Based_Buffer_Overflow__cpp_src_char_cpy_22b.cpp":47:12)
#loc27 = loc("../../../testcasesupport/std_testcase_io.h":14:1)
#loc28 = loc("../../../testcasesupport/std_testcase_io.h":14:33)
#loc29 = loc("CWE122_Heap_Based_Buffer_Overflow__cpp_src_char_cpy_22b.cpp":56:19)
#loc30 = loc("CWE122_Heap_Based_Buffer_Overflow__cpp_src_char_cpy_22b.cpp":51:1)
#loc31 = loc("CWE122_Heap_Based_Buffer_Overflow__cpp_src_char_cpy_22b.cpp":65:1)
#loc34 = loc("CWE122_Heap_Based_Buffer_Overflow__cpp_src_char_cpy_22b.cpp":52:1)
#loc35 = loc("CWE122_Heap_Based_Buffer_Overflow__cpp_src_char_cpy_22b.cpp":53:5)
#loc36 = loc("CWE122_Heap_Based_Buffer_Overflow__cpp_src_char_cpy_22b.cpp":63:5)
#loc37 = loc("CWE122_Heap_Based_Buffer_Overflow__cpp_src_char_cpy_22b.cpp":53:8)
#loc38 = loc("CWE122_Heap_Based_Buffer_Overflow__cpp_src_char_cpy_22b.cpp":54:5)
#loc39 = loc("CWE122_Heap_Based_Buffer_Overflow__cpp_src_char_cpy_22b.cpp":57:5)
#loc40 = loc("CWE122_Heap_Based_Buffer_Overflow__cpp_src_char_cpy_22b.cpp":59:5)
#loc41 = loc("CWE122_Heap_Based_Buffer_Overflow__cpp_src_char_cpy_22b.cpp":56:9)
#loc42 = loc("CWE122_Heap_Based_Buffer_Overflow__cpp_src_char_cpy_22b.cpp":61:16)
#loc43 = loc("CWE122_Heap_Based_Buffer_Overflow__cpp_src_char_cpy_22b.cpp":61:22)
#loc44 = loc("CWE122_Heap_Based_Buffer_Overflow__cpp_src_char_cpy_22b.cpp":61:27)
#loc45 = loc("CWE122_Heap_Based_Buffer_Overflow__cpp_src_char_cpy_22b.cpp":61:30)
#loc46 = loc("CWE122_Heap_Based_Buffer_Overflow__cpp_src_char_cpy_22b.cpp":61:9)
#loc47 = loc("CWE122_Heap_Based_Buffer_Overflow__cpp_src_char_cpy_22b.cpp":61:31)
#loc48 = loc("CWE122_Heap_Based_Buffer_Overflow__cpp_src_char_cpy_22b.cpp":62:22)
#loc49 = loc("CWE122_Heap_Based_Buffer_Overflow__cpp_src_char_cpy_22b.cpp":62:9)
#loc50 = loc("CWE122_Heap_Based_Buffer_Overflow__cpp_src_char_cpy_22b.cpp":62:14)
#loc51 = loc("CWE122_Heap_Based_Buffer_Overflow__cpp_src_char_cpy_22b.cpp":62:17)
#loc52 = loc("CWE122_Heap_Based_Buffer_Overflow__cpp_src_char_cpy_22b.cpp":62:18)
#loc53 = loc("CWE122_Heap_Based_Buffer_Overflow__cpp_src_char_cpy_22b.cpp":64:12)
#loc54 = loc("CWE122_Heap_Based_Buffer_Overflow__cpp_src_char_cpy_22b.cpp":64:5)
#loc55 = loc("CWE122_Heap_Based_Buffer_Overflow__cpp_src_char_cpy_22b.cpp":48:1)
#loc56 = loc("CWE122_Heap_Based_Buffer_Overflow__cpp_src_char_cpy_22b.cpp":48:12)
#loc57 = loc("CWE122_Heap_Based_Buffer_Overflow__cpp_src_char_cpy_22b.cpp":68:1)
#loc58 = loc("CWE122_Heap_Based_Buffer_Overflow__cpp_src_char_cpy_22b.cpp":77:1)
#loc61 = loc("CWE122_Heap_Based_Buffer_Overflow__cpp_src_char_cpy_22b.cpp":69:1)
#loc62 = loc("CWE122_Heap_Based_Buffer_Overflow__cpp_src_char_cpy_22b.cpp":70:5)
#loc63 = loc("CWE122_Heap_Based_Buffer_Overflow__cpp_src_char_cpy_22b.cpp":75:5)
#loc64 = loc("CWE122_Heap_Based_Buffer_Overflow__cpp_src_char_cpy_22b.cpp":70:8)
#loc65 = loc("CWE122_Heap_Based_Buffer_Overflow__cpp_src_char_cpy_22b.cpp":71:5)
#loc66 = loc("CWE122_Heap_Based_Buffer_Overflow__cpp_src_char_cpy_22b.cpp":73:16)
#loc67 = loc("CWE122_Heap_Based_Buffer_Overflow__cpp_src_char_cpy_22b.cpp":73:22)
#loc68 = loc("CWE122_Heap_Based_Buffer_Overflow__cpp_src_char_cpy_22b.cpp":73:27)
#loc69 = loc("CWE122_Heap_Based_Buffer_Overflow__cpp_src_char_cpy_22b.cpp":73:30)
#loc70 = loc("CWE122_Heap_Based_Buffer_Overflow__cpp_src_char_cpy_22b.cpp":73:9)
#loc71 = loc("CWE122_Heap_Based_Buffer_Overflow__cpp_src_char_cpy_22b.cpp":73:31)
#loc72 = loc("CWE122_Heap_Based_Buffer_Overflow__cpp_src_char_cpy_22b.cpp":74:22)
#loc73 = loc("CWE122_Heap_Based_Buffer_Overflow__cpp_src_char_cpy_22b.cpp":74:9)
#loc74 = loc("CWE122_Heap_Based_Buffer_Overflow__cpp_src_char_cpy_22b.cpp":74:14)
#loc75 = loc("CWE122_Heap_Based_Buffer_Overflow__cpp_src_char_cpy_22b.cpp":74:17)
#loc76 = loc("CWE122_Heap_Based_Buffer_Overflow__cpp_src_char_cpy_22b.cpp":74:18)
#loc77 = loc("CWE122_Heap_Based_Buffer_Overflow__cpp_src_char_cpy_22b.cpp":76:12)
#loc78 = loc("CWE122_Heap_Based_Buffer_Overflow__cpp_src_char_cpy_22b.cpp":76:5)
#loc79 = loc(fused[#loc1, #loc2])
#loc80 = loc(fused[#loc3, #loc4])
#loc82 = loc(fused[#loc8, #loc9])
#loc83 = loc(fused[#loc11, #loc9])
#loc84 = loc(fused[#loc16, #loc17])
#loc85 = loc(fused[#loc19, #loc18])
#loc86 = loc(fused[#loc24, #loc23])
#loc87 = loc(fused[#loc25, #loc26])
#loc88 = loc(fused[#loc27, #loc28])
#loc89 = loc(fused[#loc30, #loc31])
#loc91 = loc(fused[#loc35, #loc36])
#loc92 = loc(fused[#loc38, #loc39, #loc40, #loc36])
#loc93 = loc(fused[#loc46, #loc47])
#loc94 = loc(fused[#loc49, #loc48])
#loc95 = loc(fused[#loc54, #loc53])
#loc96 = loc(fused[#loc55, #loc56])
#loc97 = loc(fused[#loc57, #loc58])
#loc99 = loc(fused[#loc62, #loc63])
#loc100 = loc(fused[#loc65, #loc63])
#loc101 = loc(fused[#loc70, #loc71])
#loc102 = loc(fused[#loc73, #loc72])
#loc103 = loc(fused[#loc78, #loc77])
