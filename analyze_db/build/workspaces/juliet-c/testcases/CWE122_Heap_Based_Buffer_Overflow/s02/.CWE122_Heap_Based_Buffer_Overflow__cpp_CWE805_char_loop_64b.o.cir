!s32i = !cir.int<s, 32>
!s8i = !cir.int<s, 8>
!u64i = !cir.int<u, 64>
!void = !cir.void
#fn_attr = #cir<extra({inline = #cir.inline<no>, optnone = #cir.optnone, uwtable = #cir.uwtable<async>})>
#loc5 = loc("CWE122_Heap_Based_Buffer_Overflow__cpp_CWE805_char_loop_64b.cpp":26:14)
#loc6 = loc("CWE122_Heap_Based_Buffer_Overflow__cpp_CWE805_char_loop_64b.cpp":26:21)
#loc55 = loc("CWE122_Heap_Based_Buffer_Overflow__cpp_CWE805_char_loop_64b.cpp":53:18)
#loc56 = loc("CWE122_Heap_Based_Buffer_Overflow__cpp_CWE805_char_loop_64b.cpp":53:25)
#loc105 = loc(fused[#loc5, #loc6])
#loc121 = loc(fused[#loc55, #loc56])
module @"/workspaces/juliet-c/testcases/CWE122_Heap_Based_Buffer_Overflow/s02/CWE122_Heap_Based_Buffer_Overflow__cpp_CWE805_char_loop_64b.cpp" attributes {cir.lang = #cir.lang<cxx>, cir.sob = #cir.signed_overflow_behavior<undefined>, cir.triple = "x86_64-unknown-linux-gnu", cir.type_size_info = #cir.type_size_info<char = 8, int = 32, size_t = 64>, cir.uwtable = #cir.uwtable<async>, dlti.dl_spec = #dlti.dl_spec<i32 = dense<32> : vector<2xi64>, i8 = dense<8> : vector<2xi64>, i16 = dense<16> : vector<2xi64>, !llvm.ptr<271> = dense<32> : vector<4xi64>, !llvm.ptr<272> = dense<64> : vector<4xi64>, f64 = dense<64> : vector<2xi64>, f16 = dense<16> : vector<2xi64>, f128 = dense<128> : vector<2xi64>, i128 = dense<128> : vector<2xi64>, f80 = dense<128> : vector<2xi64>, !llvm.ptr<270> = dense<32> : vector<4xi64>, i64 = dense<64> : vector<2xi64>, i1 = dense<8> : vector<2xi64>, !llvm.ptr = dense<64> : vector<4xi64>, "dlti.mangling_mode" = "e", "dlti.endianness" = "little", "dlti.stack_alignment" = 128 : i64>} {
  cir.func private @printLine(!cir.ptr<!s8i>) loc(#loc103)
  cir.func @_ZN58CWE122_Heap_Based_Buffer_Overflow__cpp_CWE805_char_loop_647badSinkEPv(%arg0: !cir.ptr<!void> loc(fused[#loc5, #loc6])) extra(#fn_attr) {
    %0 = cir.alloca !cir.ptr<!void>, !cir.ptr<!cir.ptr<!void>>, ["dataVoidPtr", init] {alignment = 8 : i64} loc(#loc105)
    %1 = cir.alloca !cir.ptr<!cir.ptr<!s8i>>, !cir.ptr<!cir.ptr<!cir.ptr<!s8i>>>, ["dataPtr", init] {alignment = 8 : i64} loc(#loc106)
    %2 = cir.alloca !cir.ptr<!s8i>, !cir.ptr<!cir.ptr<!s8i>>, ["data", init] {alignment = 8 : i64} loc(#loc107)
    cir.store %arg0, %0 : !cir.ptr<!void>, !cir.ptr<!cir.ptr<!void>> loc(#loc11)
    %3 = cir.load %0 : !cir.ptr<!cir.ptr<!void>>, !cir.ptr<!void> loc(#loc8)
    %4 = cir.cast(bitcast, %3 : !cir.ptr<!void>), !cir.ptr<!cir.ptr<!s8i>> loc(#loc8)
    cir.store %4, %1 : !cir.ptr<!cir.ptr<!s8i>>, !cir.ptr<!cir.ptr<!cir.ptr<!s8i>>> loc(#loc106)
    %5 = cir.load deref %1 : !cir.ptr<!cir.ptr<!cir.ptr<!s8i>>>, !cir.ptr<!cir.ptr<!s8i>> loc(#loc12)
    %6 = cir.load %5 : !cir.ptr<!cir.ptr<!s8i>>, !cir.ptr<!s8i> loc(#loc13)
    cir.store %6, %2 : !cir.ptr<!s8i>, !cir.ptr<!cir.ptr<!s8i>> loc(#loc107)
    cir.scope {
      %7 = cir.alloca !u64i, !cir.ptr<!u64i>, ["i"] {alignment = 8 : i64} loc(#loc109)
      %8 = cir.alloca !cir.array<!s8i x 100>, !cir.ptr<!cir.array<!s8i x 100>>, ["source"] {alignment = 16 : i64} loc(#loc110)
      %9 = cir.cast(array_to_ptrdecay, %8 : !cir.ptr<!cir.array<!s8i x 100>>), !cir.ptr<!s8i> loc(#loc20)
      %10 = cir.cast(bitcast, %9 : !cir.ptr<!s8i>), !cir.ptr<!void> loc(#loc20)
      %11 = cir.const #cir.int<67> : !s8i loc(#loc21)
      %12 = cir.cast(integral, %11 : !s8i), !s32i loc(#loc21)
      %13 = cir.const #cir.int<100> : !s32i loc(#loc22)
      %14 = cir.const #cir.int<1> : !s32i loc(#loc23)
      %15 = cir.binop(sub, %13, %14) nsw : !s32i loc(#loc22)
      %16 = cir.cast(integral, %15 : !s32i), !u64i loc(#loc22)
      cir.libc.memset %16 bytes from %10 set to %12 : !cir.ptr<!void>, !s32i, !u64i loc(#loc111)
      %17 = cir.const #cir.int<0> : !s8i loc(#loc26)
      %18 = cir.const #cir.int<100> : !s32i loc(#loc27)
      %19 = cir.const #cir.int<1> : !s32i loc(#loc28)
      %20 = cir.binop(sub, %18, %19) nsw : !s32i loc(#loc27)
      %21 = cir.cast(array_to_ptrdecay, %8 : !cir.ptr<!cir.array<!s8i x 100>>), !cir.ptr<!s8i> loc(#loc29)
      %22 = cir.ptr_stride(%21 : !cir.ptr<!s8i>, %20 : !s32i), !cir.ptr<!s8i> loc(#loc29)
      cir.store %17, %22 : !s8i, !cir.ptr<!s8i> loc(#loc112)
      cir.scope {
        %31 = cir.const #cir.int<0> : !s32i loc(#loc32)
        %32 = cir.cast(integral, %31 : !s32i), !u64i loc(#loc32)
        cir.store %32, %7 : !u64i, !cir.ptr<!u64i> loc(#loc114)
        cir.for : cond {
          %33 = cir.load %7 : !cir.ptr<!u64i>, !u64i loc(#loc34)
          %34 = cir.const #cir.int<100> : !s32i loc(#loc35)
          %35 = cir.cast(integral, %34 : !s32i), !u64i loc(#loc35)
          %36 = cir.cmp(lt, %33, %35) : !u64i, !cir.bool loc(#loc115)
          cir.condition(%36) loc(#loc115)
        } body {
          cir.scope {
            %33 = cir.load %7 : !cir.ptr<!u64i>, !u64i loc(#loc37)
            %34 = cir.cast(array_to_ptrdecay, %8 : !cir.ptr<!cir.array<!s8i x 100>>), !cir.ptr<!s8i> loc(#loc38)
            %35 = cir.ptr_stride(%34 : !cir.ptr<!s8i>, %33 : !u64i), !cir.ptr<!s8i> loc(#loc38)
            %36 = cir.load %35 : !cir.ptr<!s8i>, !s8i loc(#loc38)
            %37 = cir.load %2 : !cir.ptr<!cir.ptr<!s8i>>, !cir.ptr<!s8i> loc(#loc39)
            %38 = cir.load %7 : !cir.ptr<!u64i>, !u64i loc(#loc40)
            %39 = cir.ptr_stride(%37 : !cir.ptr<!s8i>, %38 : !u64i), !cir.ptr<!s8i> loc(#loc41)
            cir.store %36, %39 : !s8i, !cir.ptr<!s8i> loc(#loc117)
          } loc(#loc116)
          cir.yield loc(#loc31)
        } step {
          %33 = cir.load %7 : !cir.ptr<!u64i>, !u64i loc(#loc43)
          %34 = cir.unary(inc, %33) : !u64i, !u64i loc(#loc44)
          cir.store %34, %7 : !u64i, !cir.ptr<!u64i> loc(#loc118)
          cir.yield loc(#loc113)
        } loc(#loc113)
      } loc(#loc113)
      %23 = cir.const #cir.int<0> : !s8i loc(#loc45)
      %24 = cir.load %2 : !cir.ptr<!cir.ptr<!s8i>>, !cir.ptr<!s8i> loc(#loc46)
      %25 = cir.const #cir.int<100> : !s32i loc(#loc47)
      %26 = cir.const #cir.int<1> : !s32i loc(#loc48)
      %27 = cir.binop(sub, %25, %26) nsw : !s32i loc(#loc47)
      %28 = cir.ptr_stride(%24 : !cir.ptr<!s8i>, %27 : !s32i), !cir.ptr<!s8i> loc(#loc49)
      cir.store %23, %28 : !s8i, !cir.ptr<!s8i> loc(#loc119)
      %29 = cir.load %2 : !cir.ptr<!cir.ptr<!s8i>>, !cir.ptr<!s8i> loc(#loc50)
      cir.call @printLine(%29) : (!cir.ptr<!s8i>) -> () loc(#loc51)
      %30 = cir.load %2 : !cir.ptr<!cir.ptr<!s8i>>, !cir.ptr<!s8i> loc(#loc52)
      cir.delete.array %30 : <!s8i> loc(#loc52)
    } loc(#loc108)
    cir.return loc(#loc4)
  } loc(#loc104)
  cir.func @_ZN58CWE122_Heap_Based_Buffer_Overflow__cpp_CWE805_char_loop_6411goodG2BSinkEPv(%arg0: !cir.ptr<!void> loc(fused[#loc55, #loc56])) extra(#fn_attr) {
    %0 = cir.alloca !cir.ptr<!void>, !cir.ptr<!cir.ptr<!void>>, ["dataVoidPtr", init] {alignment = 8 : i64} loc(#loc121)
    %1 = cir.alloca !cir.ptr<!cir.ptr<!s8i>>, !cir.ptr<!cir.ptr<!cir.ptr<!s8i>>>, ["dataPtr", init] {alignment = 8 : i64} loc(#loc122)
    %2 = cir.alloca !cir.ptr<!s8i>, !cir.ptr<!cir.ptr<!s8i>>, ["data", init] {alignment = 8 : i64} loc(#loc123)
    cir.store %arg0, %0 : !cir.ptr<!void>, !cir.ptr<!cir.ptr<!void>> loc(#loc61)
    %3 = cir.load %0 : !cir.ptr<!cir.ptr<!void>>, !cir.ptr<!void> loc(#loc58)
    %4 = cir.cast(bitcast, %3 : !cir.ptr<!void>), !cir.ptr<!cir.ptr<!s8i>> loc(#loc58)
    cir.store %4, %1 : !cir.ptr<!cir.ptr<!s8i>>, !cir.ptr<!cir.ptr<!cir.ptr<!s8i>>> loc(#loc122)
    %5 = cir.load deref %1 : !cir.ptr<!cir.ptr<!cir.ptr<!s8i>>>, !cir.ptr<!cir.ptr<!s8i>> loc(#loc62)
    %6 = cir.load %5 : !cir.ptr<!cir.ptr<!s8i>>, !cir.ptr<!s8i> loc(#loc63)
    cir.store %6, %2 : !cir.ptr<!s8i>, !cir.ptr<!cir.ptr<!s8i>> loc(#loc123)
    cir.scope {
      %7 = cir.alloca !u64i, !cir.ptr<!u64i>, ["i"] {alignment = 8 : i64} loc(#loc125)
      %8 = cir.alloca !cir.array<!s8i x 100>, !cir.ptr<!cir.array<!s8i x 100>>, ["source"] {alignment = 16 : i64} loc(#loc126)
      %9 = cir.cast(array_to_ptrdecay, %8 : !cir.ptr<!cir.array<!s8i x 100>>), !cir.ptr<!s8i> loc(#loc70)
      %10 = cir.cast(bitcast, %9 : !cir.ptr<!s8i>), !cir.ptr<!void> loc(#loc70)
      %11 = cir.const #cir.int<67> : !s8i loc(#loc71)
      %12 = cir.cast(integral, %11 : !s8i), !s32i loc(#loc71)
      %13 = cir.const #cir.int<100> : !s32i loc(#loc72)
      %14 = cir.const #cir.int<1> : !s32i loc(#loc73)
      %15 = cir.binop(sub, %13, %14) nsw : !s32i loc(#loc72)
      %16 = cir.cast(integral, %15 : !s32i), !u64i loc(#loc72)
      cir.libc.memset %16 bytes from %10 set to %12 : !cir.ptr<!void>, !s32i, !u64i loc(#loc127)
      %17 = cir.const #cir.int<0> : !s8i loc(#loc76)
      %18 = cir.const #cir.int<100> : !s32i loc(#loc77)
      %19 = cir.const #cir.int<1> : !s32i loc(#loc78)
      %20 = cir.binop(sub, %18, %19) nsw : !s32i loc(#loc77)
      %21 = cir.cast(array_to_ptrdecay, %8 : !cir.ptr<!cir.array<!s8i x 100>>), !cir.ptr<!s8i> loc(#loc79)
      %22 = cir.ptr_stride(%21 : !cir.ptr<!s8i>, %20 : !s32i), !cir.ptr<!s8i> loc(#loc79)
      cir.store %17, %22 : !s8i, !cir.ptr<!s8i> loc(#loc128)
      cir.scope {
        %31 = cir.const #cir.int<0> : !s32i loc(#loc82)
        %32 = cir.cast(integral, %31 : !s32i), !u64i loc(#loc82)
        cir.store %32, %7 : !u64i, !cir.ptr<!u64i> loc(#loc130)
        cir.for : cond {
          %33 = cir.load %7 : !cir.ptr<!u64i>, !u64i loc(#loc84)
          %34 = cir.const #cir.int<100> : !s32i loc(#loc85)
          %35 = cir.cast(integral, %34 : !s32i), !u64i loc(#loc85)
          %36 = cir.cmp(lt, %33, %35) : !u64i, !cir.bool loc(#loc131)
          cir.condition(%36) loc(#loc131)
        } body {
          cir.scope {
            %33 = cir.load %7 : !cir.ptr<!u64i>, !u64i loc(#loc87)
            %34 = cir.cast(array_to_ptrdecay, %8 : !cir.ptr<!cir.array<!s8i x 100>>), !cir.ptr<!s8i> loc(#loc88)
            %35 = cir.ptr_stride(%34 : !cir.ptr<!s8i>, %33 : !u64i), !cir.ptr<!s8i> loc(#loc88)
            %36 = cir.load %35 : !cir.ptr<!s8i>, !s8i loc(#loc88)
            %37 = cir.load %2 : !cir.ptr<!cir.ptr<!s8i>>, !cir.ptr<!s8i> loc(#loc89)
            %38 = cir.load %7 : !cir.ptr<!u64i>, !u64i loc(#loc90)
            %39 = cir.ptr_stride(%37 : !cir.ptr<!s8i>, %38 : !u64i), !cir.ptr<!s8i> loc(#loc91)
            cir.store %36, %39 : !s8i, !cir.ptr<!s8i> loc(#loc133)
          } loc(#loc132)
          cir.yield loc(#loc81)
        } step {
          %33 = cir.load %7 : !cir.ptr<!u64i>, !u64i loc(#loc93)
          %34 = cir.unary(inc, %33) : !u64i, !u64i loc(#loc94)
          cir.store %34, %7 : !u64i, !cir.ptr<!u64i> loc(#loc134)
          cir.yield loc(#loc129)
        } loc(#loc129)
      } loc(#loc129)
      %23 = cir.const #cir.int<0> : !s8i loc(#loc95)
      %24 = cir.load %2 : !cir.ptr<!cir.ptr<!s8i>>, !cir.ptr<!s8i> loc(#loc96)
      %25 = cir.const #cir.int<100> : !s32i loc(#loc97)
      %26 = cir.const #cir.int<1> : !s32i loc(#loc98)
      %27 = cir.binop(sub, %25, %26) nsw : !s32i loc(#loc97)
      %28 = cir.ptr_stride(%24 : !cir.ptr<!s8i>, %27 : !s32i), !cir.ptr<!s8i> loc(#loc99)
      cir.store %23, %28 : !s8i, !cir.ptr<!s8i> loc(#loc135)
      %29 = cir.load %2 : !cir.ptr<!cir.ptr<!s8i>>, !cir.ptr<!s8i> loc(#loc100)
      cir.call @printLine(%29) : (!cir.ptr<!s8i>) -> () loc(#loc101)
      %30 = cir.load %2 : !cir.ptr<!cir.ptr<!s8i>>, !cir.ptr<!s8i> loc(#loc102)
      cir.delete.array %30 : <!s8i> loc(#loc102)
    } loc(#loc124)
    cir.return loc(#loc54)
  } loc(#loc120)
} loc(#loc)
#loc = loc("/workspaces/juliet-c/testcases/CWE122_Heap_Based_Buffer_Overflow/s02/CWE122_Heap_Based_Buffer_Overflow__cpp_CWE805_char_loop_64b.cpp":0:0)
#loc1 = loc("../../../testcasesupport/std_testcase_io.h":14:1)
#loc2 = loc("../../../testcasesupport/std_testcase_io.h":14:33)
#loc3 = loc("CWE122_Heap_Based_Buffer_Overflow__cpp_CWE805_char_loop_64b.cpp":26:1)
#loc4 = loc("CWE122_Heap_Based_Buffer_Overflow__cpp_CWE805_char_loop_64b.cpp":46:1)
#loc7 = loc("CWE122_Heap_Based_Buffer_Overflow__cpp_CWE805_char_loop_64b.cpp":29:5)
#loc8 = loc("CWE122_Heap_Based_Buffer_Overflow__cpp_CWE805_char_loop_64b.cpp":29:34)
#loc9 = loc("CWE122_Heap_Based_Buffer_Overflow__cpp_CWE805_char_loop_64b.cpp":31:5)
#loc10 = loc("CWE122_Heap_Based_Buffer_Overflow__cpp_CWE805_char_loop_64b.cpp":31:28)
#loc11 = loc("CWE122_Heap_Based_Buffer_Overflow__cpp_CWE805_char_loop_64b.cpp":27:1)
#loc12 = loc("CWE122_Heap_Based_Buffer_Overflow__cpp_CWE805_char_loop_64b.cpp":31:21)
#loc13 = loc("CWE122_Heap_Based_Buffer_Overflow__cpp_CWE805_char_loop_64b.cpp":31:20)
#loc14 = loc("CWE122_Heap_Based_Buffer_Overflow__cpp_CWE805_char_loop_64b.cpp":32:5)
#loc15 = loc("CWE122_Heap_Based_Buffer_Overflow__cpp_CWE805_char_loop_64b.cpp":45:5)
#loc16 = loc("CWE122_Heap_Based_Buffer_Overflow__cpp_CWE805_char_loop_64b.cpp":33:9)
#loc17 = loc("CWE122_Heap_Based_Buffer_Overflow__cpp_CWE805_char_loop_64b.cpp":33:16)
#loc18 = loc("CWE122_Heap_Based_Buffer_Overflow__cpp_CWE805_char_loop_64b.cpp":34:9)
#loc19 = loc("CWE122_Heap_Based_Buffer_Overflow__cpp_CWE805_char_loop_64b.cpp":34:24)
#loc20 = loc("CWE122_Heap_Based_Buffer_Overflow__cpp_CWE805_char_loop_64b.cpp":35:16)
#loc21 = loc("CWE122_Heap_Based_Buffer_Overflow__cpp_CWE805_char_loop_64b.cpp":35:24)
#loc22 = loc("CWE122_Heap_Based_Buffer_Overflow__cpp_CWE805_char_loop_64b.cpp":35:29)
#loc23 = loc("CWE122_Heap_Based_Buffer_Overflow__cpp_CWE805_char_loop_64b.cpp":35:33)
#loc24 = loc("CWE122_Heap_Based_Buffer_Overflow__cpp_CWE805_char_loop_64b.cpp":35:9)
#loc25 = loc("CWE122_Heap_Based_Buffer_Overflow__cpp_CWE805_char_loop_64b.cpp":35:34)
#loc26 = loc("CWE122_Heap_Based_Buffer_Overflow__cpp_CWE805_char_loop_64b.cpp":36:25)
#loc27 = loc("CWE122_Heap_Based_Buffer_Overflow__cpp_CWE805_char_loop_64b.cpp":36:16)
#loc28 = loc("CWE122_Heap_Based_Buffer_Overflow__cpp_CWE805_char_loop_64b.cpp":36:20)
#loc29 = loc("CWE122_Heap_Based_Buffer_Overflow__cpp_CWE805_char_loop_64b.cpp":36:9)
#loc30 = loc("CWE122_Heap_Based_Buffer_Overflow__cpp_CWE805_char_loop_64b.cpp":38:9)
#loc31 = loc("CWE122_Heap_Based_Buffer_Overflow__cpp_CWE805_char_loop_64b.cpp":41:9)
#loc32 = loc("CWE122_Heap_Based_Buffer_Overflow__cpp_CWE805_char_loop_64b.cpp":38:18)
#loc33 = loc("CWE122_Heap_Based_Buffer_Overflow__cpp_CWE805_char_loop_64b.cpp":38:14)
#loc34 = loc("CWE122_Heap_Based_Buffer_Overflow__cpp_CWE805_char_loop_64b.cpp":38:21)
#loc35 = loc("CWE122_Heap_Based_Buffer_Overflow__cpp_CWE805_char_loop_64b.cpp":38:25)
#loc36 = loc("CWE122_Heap_Based_Buffer_Overflow__cpp_CWE805_char_loop_64b.cpp":39:9)
#loc37 = loc("CWE122_Heap_Based_Buffer_Overflow__cpp_CWE805_char_loop_64b.cpp":40:30)
#loc38 = loc("CWE122_Heap_Based_Buffer_Overflow__cpp_CWE805_char_loop_64b.cpp":40:23)
#loc39 = loc("CWE122_Heap_Based_Buffer_Overflow__cpp_CWE805_char_loop_64b.cpp":40:13)
#loc40 = loc("CWE122_Heap_Based_Buffer_Overflow__cpp_CWE805_char_loop_64b.cpp":40:18)
#loc41 = loc("CWE122_Heap_Based_Buffer_Overflow__cpp_CWE805_char_loop_64b.cpp":40:19)
#loc42 = loc("CWE122_Heap_Based_Buffer_Overflow__cpp_CWE805_char_loop_64b.cpp":40:31)
#loc43 = loc("CWE122_Heap_Based_Buffer_Overflow__cpp_CWE805_char_loop_64b.cpp":38:31)
#loc44 = loc("CWE122_Heap_Based_Buffer_Overflow__cpp_CWE805_char_loop_64b.cpp":38:30)
#loc45 = loc("CWE122_Heap_Based_Buffer_Overflow__cpp_CWE805_char_loop_64b.cpp":42:23)
#loc46 = loc("CWE122_Heap_Based_Buffer_Overflow__cpp_CWE805_char_loop_64b.cpp":42:9)
#loc47 = loc("CWE122_Heap_Based_Buffer_Overflow__cpp_CWE805_char_loop_64b.cpp":42:14)
#loc48 = loc("CWE122_Heap_Based_Buffer_Overflow__cpp_CWE805_char_loop_64b.cpp":42:18)
#loc49 = loc("CWE122_Heap_Based_Buffer_Overflow__cpp_CWE805_char_loop_64b.cpp":42:19)
#loc50 = loc("CWE122_Heap_Based_Buffer_Overflow__cpp_CWE805_char_loop_64b.cpp":43:19)
#loc51 = loc("CWE122_Heap_Based_Buffer_Overflow__cpp_CWE805_char_loop_64b.cpp":43:9)
#loc52 = loc("CWE122_Heap_Based_Buffer_Overflow__cpp_CWE805_char_loop_64b.cpp":44:19)
#loc53 = loc("CWE122_Heap_Based_Buffer_Overflow__cpp_CWE805_char_loop_64b.cpp":53:1)
#loc54 = loc("CWE122_Heap_Based_Buffer_Overflow__cpp_CWE805_char_loop_64b.cpp":73:1)
#loc57 = loc("CWE122_Heap_Based_Buffer_Overflow__cpp_CWE805_char_loop_64b.cpp":56:5)
#loc58 = loc("CWE122_Heap_Based_Buffer_Overflow__cpp_CWE805_char_loop_64b.cpp":56:34)
#loc59 = loc("CWE122_Heap_Based_Buffer_Overflow__cpp_CWE805_char_loop_64b.cpp":58:5)
#loc60 = loc("CWE122_Heap_Based_Buffer_Overflow__cpp_CWE805_char_loop_64b.cpp":58:28)
#loc61 = loc("CWE122_Heap_Based_Buffer_Overflow__cpp_CWE805_char_loop_64b.cpp":54:1)
#loc62 = loc("CWE122_Heap_Based_Buffer_Overflow__cpp_CWE805_char_loop_64b.cpp":58:21)
#loc63 = loc("CWE122_Heap_Based_Buffer_Overflow__cpp_CWE805_char_loop_64b.cpp":58:20)
#loc64 = loc("CWE122_Heap_Based_Buffer_Overflow__cpp_CWE805_char_loop_64b.cpp":59:5)
#loc65 = loc("CWE122_Heap_Based_Buffer_Overflow__cpp_CWE805_char_loop_64b.cpp":72:5)
#loc66 = loc("CWE122_Heap_Based_Buffer_Overflow__cpp_CWE805_char_loop_64b.cpp":60:9)
#loc67 = loc("CWE122_Heap_Based_Buffer_Overflow__cpp_CWE805_char_loop_64b.cpp":60:16)
#loc68 = loc("CWE122_Heap_Based_Buffer_Overflow__cpp_CWE805_char_loop_64b.cpp":61:9)
#loc69 = loc("CWE122_Heap_Based_Buffer_Overflow__cpp_CWE805_char_loop_64b.cpp":61:24)
#loc70 = loc("CWE122_Heap_Based_Buffer_Overflow__cpp_CWE805_char_loop_64b.cpp":62:16)
#loc71 = loc("CWE122_Heap_Based_Buffer_Overflow__cpp_CWE805_char_loop_64b.cpp":62:24)
#loc72 = loc("CWE122_Heap_Based_Buffer_Overflow__cpp_CWE805_char_loop_64b.cpp":62:29)
#loc73 = loc("CWE122_Heap_Based_Buffer_Overflow__cpp_CWE805_char_loop_64b.cpp":62:33)
#loc74 = loc("CWE122_Heap_Based_Buffer_Overflow__cpp_CWE805_char_loop_64b.cpp":62:9)
#loc75 = loc("CWE122_Heap_Based_Buffer_Overflow__cpp_CWE805_char_loop_64b.cpp":62:34)
#loc76 = loc("CWE122_Heap_Based_Buffer_Overflow__cpp_CWE805_char_loop_64b.cpp":63:25)
#loc77 = loc("CWE122_Heap_Based_Buffer_Overflow__cpp_CWE805_char_loop_64b.cpp":63:16)
#loc78 = loc("CWE122_Heap_Based_Buffer_Overflow__cpp_CWE805_char_loop_64b.cpp":63:20)
#loc79 = loc("CWE122_Heap_Based_Buffer_Overflow__cpp_CWE805_char_loop_64b.cpp":63:9)
#loc80 = loc("CWE122_Heap_Based_Buffer_Overflow__cpp_CWE805_char_loop_64b.cpp":65:9)
#loc81 = loc("CWE122_Heap_Based_Buffer_Overflow__cpp_CWE805_char_loop_64b.cpp":68:9)
#loc82 = loc("CWE122_Heap_Based_Buffer_Overflow__cpp_CWE805_char_loop_64b.cpp":65:18)
#loc83 = loc("CWE122_Heap_Based_Buffer_Overflow__cpp_CWE805_char_loop_64b.cpp":65:14)
#loc84 = loc("CWE122_Heap_Based_Buffer_Overflow__cpp_CWE805_char_loop_64b.cpp":65:21)
#loc85 = loc("CWE122_Heap_Based_Buffer_Overflow__cpp_CWE805_char_loop_64b.cpp":65:25)
#loc86 = loc("CWE122_Heap_Based_Buffer_Overflow__cpp_CWE805_char_loop_64b.cpp":66:9)
#loc87 = loc("CWE122_Heap_Based_Buffer_Overflow__cpp_CWE805_char_loop_64b.cpp":67:30)
#loc88 = loc("CWE122_Heap_Based_Buffer_Overflow__cpp_CWE805_char_loop_64b.cpp":67:23)
#loc89 = loc("CWE122_Heap_Based_Buffer_Overflow__cpp_CWE805_char_loop_64b.cpp":67:13)
#loc90 = loc("CWE122_Heap_Based_Buffer_Overflow__cpp_CWE805_char_loop_64b.cpp":67:18)
#loc91 = loc("CWE122_Heap_Based_Buffer_Overflow__cpp_CWE805_char_loop_64b.cpp":67:19)
#loc92 = loc("CWE122_Heap_Based_Buffer_Overflow__cpp_CWE805_char_loop_64b.cpp":67:31)
#loc93 = loc("CWE122_Heap_Based_Buffer_Overflow__cpp_CWE805_char_loop_64b.cpp":65:31)
#loc94 = loc("CWE122_Heap_Based_Buffer_Overflow__cpp_CWE805_char_loop_64b.cpp":65:30)
#loc95 = loc("CWE122_Heap_Based_Buffer_Overflow__cpp_CWE805_char_loop_64b.cpp":69:23)
#loc96 = loc("CWE122_Heap_Based_Buffer_Overflow__cpp_CWE805_char_loop_64b.cpp":69:9)
#loc97 = loc("CWE122_Heap_Based_Buffer_Overflow__cpp_CWE805_char_loop_64b.cpp":69:14)
#loc98 = loc("CWE122_Heap_Based_Buffer_Overflow__cpp_CWE805_char_loop_64b.cpp":69:18)
#loc99 = loc("CWE122_Heap_Based_Buffer_Overflow__cpp_CWE805_char_loop_64b.cpp":69:19)
#loc100 = loc("CWE122_Heap_Based_Buffer_Overflow__cpp_CWE805_char_loop_64b.cpp":70:19)
#loc101 = loc("CWE122_Heap_Based_Buffer_Overflow__cpp_CWE805_char_loop_64b.cpp":70:9)
#loc102 = loc("CWE122_Heap_Based_Buffer_Overflow__cpp_CWE805_char_loop_64b.cpp":71:19)
#loc103 = loc(fused[#loc1, #loc2])
#loc104 = loc(fused[#loc3, #loc4])
#loc106 = loc(fused[#loc7, #loc8])
#loc107 = loc(fused[#loc9, #loc10])
#loc108 = loc(fused[#loc14, #loc15])
#loc109 = loc(fused[#loc16, #loc17])
#loc110 = loc(fused[#loc18, #loc19])
#loc111 = loc(fused[#loc24, #loc25])
#loc112 = loc(fused[#loc29, #loc26])
#loc113 = loc(fused[#loc30, #loc31])
#loc114 = loc(fused[#loc33, #loc32])
#loc115 = loc(fused[#loc34, #loc35])
#loc116 = loc(fused[#loc36, #loc31])
#loc117 = loc(fused[#loc39, #loc42])
#loc118 = loc(fused[#loc44, #loc43])
#loc119 = loc(fused[#loc46, #loc45])
#loc120 = loc(fused[#loc53, #loc54])
#loc122 = loc(fused[#loc57, #loc58])
#loc123 = loc(fused[#loc59, #loc60])
#loc124 = loc(fused[#loc64, #loc65])
#loc125 = loc(fused[#loc66, #loc67])
#loc126 = loc(fused[#loc68, #loc69])
#loc127 = loc(fused[#loc74, #loc75])
#loc128 = loc(fused[#loc79, #loc76])
#loc129 = loc(fused[#loc80, #loc81])
#loc130 = loc(fused[#loc83, #loc82])
#loc131 = loc(fused[#loc84, #loc85])
#loc132 = loc(fused[#loc86, #loc81])
#loc133 = loc(fused[#loc89, #loc92])
#loc134 = loc(fused[#loc94, #loc93])
#loc135 = loc(fused[#loc96, #loc95])
