!s32i = !cir.int<s, 32>
!s64i = !cir.int<s, 64>
!s8i = !cir.int<s, 8>
!u32i = !cir.int<u, 32>
!void = !cir.void
#fn_attr = #cir<extra({nothrow = #cir.nothrow})>
#fn_attr1 = #cir<extra({inline = #cir.inline<no>, nothrow = #cir.nothrow, optnone = #cir.optnone})>
#loc53 = loc("CWE478_Missing_Default_Case_in_Switch__basic_11.c":119:10)
#loc54 = loc("CWE478_Missing_Default_Case_in_Switch__basic_11.c":119:14)
#loc55 = loc("CWE478_Missing_Default_Case_in_Switch__basic_11.c":119:20)
#loc56 = loc("CWE478_Missing_Default_Case_in_Switch__basic_11.c":119:32)
#loc162 = loc(fused[#loc53, #loc54])
#loc163 = loc(fused[#loc55, #loc56])
module @"/home/ladisgin/git_proj/juliet-c/testcases/CWE478_Missing_Default_Case_in_Switch/CWE478_Missing_Default_Case_in_Switch__basic_11.c" attributes {cir.lang = #cir.lang<c>, cir.sob = #cir.signed_overflow_behavior<undefined>, cir.triple = "x86_64-unknown-linux-gnu", dlti.dl_spec = #dlti.dl_spec<i8 = dense<8> : vector<2xi64>, i16 = dense<16> : vector<2xi64>, i32 = dense<32> : vector<2xi64>, f16 = dense<16> : vector<2xi64>, f64 = dense<64> : vector<2xi64>, f128 = dense<128> : vector<2xi64>, !llvm.ptr<272> = dense<64> : vector<4xi64>, !llvm.ptr<271> = dense<32> : vector<4xi64>, i64 = dense<64> : vector<2xi64>, !llvm.ptr<270> = dense<32> : vector<4xi64>, i128 = dense<128> : vector<2xi64>, f80 = dense<128> : vector<2xi64>, !llvm.ptr = dense<64> : vector<4xi64>, i1 = dense<8> : vector<2xi64>, "dlti.endianness" = "little", "dlti.stack_alignment" = 128 : i64>} {
  cir.func no_proto private @globalReturnsTrue(...) -> !s32i loc(#loc141)
  cir.global "private" constant cir_private dsolocal @".str" = #cir.const_array<"shouldn't see this value\00" : !cir.array<!s8i x 25>> : !cir.array<!s8i x 25> {alignment = 1 : i64} loc(#loc3)
  cir.func private @rand() -> !s32i extra(#fn_attr) loc(#loc142)
  cir.global "private" constant cir_private dsolocal @".str.1" = #cir.const_array<"0\00" : !cir.array<!s8i x 2>> : !cir.array<!s8i x 2> {alignment = 1 : i64} loc(#loc6)
  cir.global "private" constant cir_private dsolocal @".str.2" = #cir.const_array<"1\00" : !cir.array<!s8i x 2>> : !cir.array<!s8i x 2> {alignment = 1 : i64} loc(#loc7)
  cir.func private @printLine(!cir.ptr<!s8i>) loc(#loc143)
  cir.func no_proto @CWE478_Missing_Default_Case_in_Switch__basic_11_bad() extra(#fn_attr1) {
    cir.scope {
      %0 = cir.get_global @globalReturnsTrue : !cir.ptr<!cir.func<!s32i (...)>> loc(#loc146)
      %1 = cir.cast(bitcast, %0 : !cir.ptr<!cir.func<!s32i (...)>>), !cir.ptr<!cir.func<!s32i ()>> loc(#loc146)
      %2 = cir.call %1() : (!cir.ptr<!cir.func<!s32i ()>>) -> !s32i loc(#loc14)
      %3 = cir.cast(int_to_bool, %2 : !s32i), !cir.bool loc(#loc14)
      cir.if %3 {
        cir.scope {
          %4 = cir.alloca !cir.ptr<!s8i>, !cir.ptr<!cir.ptr<!s8i>>, ["charString", init] {alignment = 8 : i64} loc(#loc149)
          %5 = cir.alloca !s32i, !cir.ptr<!s32i>, ["x"] {alignment = 4 : i64} loc(#loc150)
          %6 = cir.get_global @".str" : !cir.ptr<!cir.array<!s8i x 25>> loc(#loc3)
          %7 = cir.cast(array_to_ptrdecay, %6 : !cir.ptr<!cir.array<!s8i x 25>>), !cir.ptr<!s8i> loc(#loc3)
          cir.store %7, %4 : !cir.ptr<!s8i>, !cir.ptr<!cir.ptr<!s8i>> loc(#loc149)
          %8 = cir.call @rand() : () -> !s32i extra(#fn_attr) loc(#loc22)
          %9 = cir.const #cir.int<3> : !s32i loc(#loc23)
          %10 = cir.binop(rem, %8, %9) : !s32i loc(#loc151)
          cir.store %10, %5 : !s32i, !cir.ptr<!s32i> loc(#loc152)
          cir.scope {
            %12 = cir.load %5 : !cir.ptr<!s32i>, !s32i loc(#loc28)
            cir.switch (%12 : !s32i) {
              cir.case(equal, [#cir.int<0> : !s32i]) {
                %13 = cir.get_global @".str.1" : !cir.ptr<!cir.array<!s8i x 2>> loc(#loc6)
                %14 = cir.cast(array_to_ptrdecay, %13 : !cir.ptr<!cir.array<!s8i x 2>>), !cir.ptr<!s8i> loc(#loc6)
                cir.store %14, %4 : !cir.ptr<!s8i>, !cir.ptr<!cir.ptr<!s8i>> loc(#loc154)
                cir.break loc(#loc31)
              } loc(#loc29)
              cir.case(equal, [#cir.int<1> : !s32i]) {
                %13 = cir.get_global @".str.2" : !cir.ptr<!cir.array<!s8i x 2>> loc(#loc7)
                %14 = cir.cast(array_to_ptrdecay, %13 : !cir.ptr<!cir.array<!s8i x 2>>), !cir.ptr<!s8i> loc(#loc7)
                cir.store %14, %4 : !cir.ptr<!s8i>, !cir.ptr<!cir.ptr<!s8i>> loc(#loc155)
                cir.break loc(#loc34)
              } loc(#loc32)
              cir.yield loc(#loc26)
            } loc(#loc26)
          } loc(#loc153)
          %11 = cir.load %4 : !cir.ptr<!cir.ptr<!s8i>>, !cir.ptr<!s8i> loc(#loc35)
          cir.call @printLine(%11) : (!cir.ptr<!s8i>) -> () loc(#loc36)
        } loc(#loc148)
      } loc(#loc147)
    } loc(#loc145)
    cir.return loc(#loc11)
  } loc(#loc144)
  cir.func no_proto @CWE478_Missing_Default_Case_in_Switch__basic_11_good() extra(#fn_attr1) {
    %0 = cir.get_global @good1 : !cir.ptr<!cir.func<!void ()>> loc(#loc157)
    cir.call %0() : (!cir.ptr<!cir.func<!void ()>>) -> () loc(#loc39)
    %1 = cir.get_global @good2 : !cir.ptr<!cir.func<!void ()>> loc(#loc158)
    cir.call %1() : (!cir.ptr<!cir.func<!void ()>>) -> () loc(#loc41)
    cir.return loc(#loc38)
  } loc(#loc156)
  cir.func private @srand(!u32i) extra(#fn_attr) loc(#loc159)
  cir.func private @time(!cir.ptr<!s64i>) -> !s64i extra(#fn_attr) loc(#loc160)
  cir.global "private" constant cir_private dsolocal @".str.3" = #cir.const_array<"Calling good()...\00" : !cir.array<!s8i x 18>> : !cir.array<!s8i x 18> {alignment = 1 : i64} loc(#loc47)
  cir.global "private" constant cir_private dsolocal @".str.4" = #cir.const_array<"Finished good()\00" : !cir.array<!s8i x 16>> : !cir.array<!s8i x 16> {alignment = 1 : i64} loc(#loc48)
  cir.global "private" constant cir_private dsolocal @".str.5" = #cir.const_array<"Calling bad()...\00" : !cir.array<!s8i x 17>> : !cir.array<!s8i x 17> {alignment = 1 : i64} loc(#loc49)
  cir.global "private" constant cir_private dsolocal @".str.6" = #cir.const_array<"Finished bad()\00" : !cir.array<!s8i x 15>> : !cir.array<!s8i x 15> {alignment = 1 : i64} loc(#loc50)
  cir.func @main(%arg0: !s32i loc(fused[#loc53, #loc54]), %arg1: !cir.ptr<!cir.ptr<!s8i>> loc(fused[#loc55, #loc56])) -> !s32i extra(#fn_attr1) {
    %0 = cir.alloca !s32i, !cir.ptr<!s32i>, ["argc", init] {alignment = 4 : i64} loc(#loc162)
    %1 = cir.alloca !cir.ptr<!cir.ptr<!s8i>>, !cir.ptr<!cir.ptr<!cir.ptr<!s8i>>>, ["argv", init] {alignment = 8 : i64} loc(#loc163)
    %2 = cir.alloca !s32i, !cir.ptr<!s32i>, ["__retval"] {alignment = 4 : i64} loc(#loc52)
    cir.store %arg0, %0 : !s32i, !cir.ptr<!s32i> loc(#loc57)
    cir.store %arg1, %1 : !cir.ptr<!cir.ptr<!s8i>>, !cir.ptr<!cir.ptr<!cir.ptr<!s8i>>> loc(#loc57)
    %3 = cir.const #cir.ptr<null> : !cir.ptr<!s64i> loc(#loc58)
    %4 = cir.call @time(%3) : (!cir.ptr<!s64i>) -> !s64i extra(#fn_attr) loc(#loc59)
    %5 = cir.cast(integral, %4 : !s64i), !u32i loc(#loc59)
    cir.call @srand(%5) : (!u32i) -> () extra(#fn_attr) loc(#loc60)
    %6 = cir.get_global @".str.3" : !cir.ptr<!cir.array<!s8i x 18>> loc(#loc47)
    %7 = cir.cast(array_to_ptrdecay, %6 : !cir.ptr<!cir.array<!s8i x 18>>), !cir.ptr<!s8i> loc(#loc47)
    cir.call @printLine(%7) : (!cir.ptr<!s8i>) -> () loc(#loc61)
    %8 = cir.get_global @CWE478_Missing_Default_Case_in_Switch__basic_11_good : !cir.ptr<!cir.func<!void ()>> loc(#loc164)
    cir.call @CWE478_Missing_Default_Case_in_Switch__basic_11_good() : () -> () loc(#loc62)
    %9 = cir.get_global @".str.4" : !cir.ptr<!cir.array<!s8i x 16>> loc(#loc48)
    %10 = cir.cast(array_to_ptrdecay, %9 : !cir.ptr<!cir.array<!s8i x 16>>), !cir.ptr<!s8i> loc(#loc48)
    cir.call @printLine(%10) : (!cir.ptr<!s8i>) -> () loc(#loc64)
    %11 = cir.get_global @".str.5" : !cir.ptr<!cir.array<!s8i x 17>> loc(#loc49)
    %12 = cir.cast(array_to_ptrdecay, %11 : !cir.ptr<!cir.array<!s8i x 17>>), !cir.ptr<!s8i> loc(#loc49)
    cir.call @printLine(%12) : (!cir.ptr<!s8i>) -> () loc(#loc65)
    %13 = cir.get_global @CWE478_Missing_Default_Case_in_Switch__basic_11_bad : !cir.ptr<!cir.func<!void ()>> loc(#loc165)
    cir.call @CWE478_Missing_Default_Case_in_Switch__basic_11_bad() : () -> () loc(#loc66)
    %14 = cir.get_global @".str.6" : !cir.ptr<!cir.array<!s8i x 15>> loc(#loc50)
    %15 = cir.cast(array_to_ptrdecay, %14 : !cir.ptr<!cir.array<!s8i x 15>>), !cir.ptr<!s8i> loc(#loc50)
    cir.call @printLine(%15) : (!cir.ptr<!s8i>) -> () loc(#loc68)
    %16 = cir.const #cir.int<0> : !s32i loc(#loc69)
    cir.store %16, %2 : !s32i, !cir.ptr<!s32i> loc(#loc166)
    %17 = cir.load %2 : !cir.ptr<!s32i>, !s32i loc(#loc166)
    cir.return %17 : !s32i loc(#loc166)
  } loc(#loc161)
  cir.func no_proto private @globalReturnsFalse(...) -> !s32i loc(#loc167)
  cir.global "private" constant cir_private dsolocal @".str.7" = #cir.const_array<"Benign, fixed string\00" : !cir.array<!s8i x 21>> : !cir.array<!s8i x 21> {alignment = 1 : i64} loc(#loc73)
  cir.func no_proto internal private @good1() extra(#fn_attr1) {
    cir.scope {
      %0 = cir.get_global @globalReturnsFalse : !cir.ptr<!cir.func<!s32i (...)>> loc(#loc170)
      %1 = cir.cast(bitcast, %0 : !cir.ptr<!cir.func<!s32i (...)>>), !cir.ptr<!cir.func<!s32i ()>> loc(#loc170)
      %2 = cir.call %1() : (!cir.ptr<!cir.func<!s32i ()>>) -> !s32i loc(#loc78)
      %3 = cir.cast(int_to_bool, %2 : !s32i), !cir.bool loc(#loc78)
      cir.if %3 {
        %4 = cir.get_global @".str.7" : !cir.ptr<!cir.array<!s8i x 21>> loc(#loc73)
        %5 = cir.cast(array_to_ptrdecay, %4 : !cir.ptr<!cir.array<!s8i x 21>>), !cir.ptr<!s8i> loc(#loc73)
        cir.call @printLine(%5) : (!cir.ptr<!s8i>) -> () loc(#loc83)
      } else {
        cir.scope {
          %4 = cir.alloca !cir.ptr<!s8i>, !cir.ptr<!cir.ptr<!s8i>>, ["charString", init] {alignment = 8 : i64} loc(#loc173)
          %5 = cir.alloca !s32i, !cir.ptr<!s32i>, ["x"] {alignment = 4 : i64} loc(#loc174)
          %6 = cir.get_global @".str" : !cir.ptr<!cir.array<!s8i x 25>> loc(#loc87)
          %7 = cir.cast(array_to_ptrdecay, %6 : !cir.ptr<!cir.array<!s8i x 25>>), !cir.ptr<!s8i> loc(#loc87)
          cir.store %7, %4 : !cir.ptr<!s8i>, !cir.ptr<!cir.ptr<!s8i>> loc(#loc173)
          %8 = cir.call @rand() : () -> !s32i extra(#fn_attr) loc(#loc90)
          %9 = cir.const #cir.int<3> : !s32i loc(#loc91)
          %10 = cir.binop(rem, %8, %9) : !s32i loc(#loc175)
          cir.store %10, %5 : !s32i, !cir.ptr<!s32i> loc(#loc176)
          cir.scope {
            %12 = cir.load %5 : !cir.ptr<!s32i>, !s32i loc(#loc96)
            cir.switch (%12 : !s32i) {
              cir.case(equal, [#cir.int<0> : !s32i]) {
                %13 = cir.get_global @".str.1" : !cir.ptr<!cir.array<!s8i x 2>> loc(#loc98)
                %14 = cir.cast(array_to_ptrdecay, %13 : !cir.ptr<!cir.array<!s8i x 2>>), !cir.ptr<!s8i> loc(#loc98)
                cir.store %14, %4 : !cir.ptr<!s8i>, !cir.ptr<!cir.ptr<!s8i>> loc(#loc178)
                cir.break loc(#loc100)
              } loc(#loc97)
              cir.case(equal, [#cir.int<1> : !s32i]) {
                %13 = cir.get_global @".str.2" : !cir.ptr<!cir.array<!s8i x 2>> loc(#loc102)
                %14 = cir.cast(array_to_ptrdecay, %13 : !cir.ptr<!cir.array<!s8i x 2>>), !cir.ptr<!s8i> loc(#loc102)
                cir.store %14, %4 : !cir.ptr<!s8i>, !cir.ptr<!cir.ptr<!s8i>> loc(#loc179)
                cir.break loc(#loc104)
              } loc(#loc101)
              cir.case(default, []) {
                cir.return loc(#loc106)
              } loc(#loc105)
              cir.yield loc(#loc94)
            } loc(#loc94)
          } loc(#loc177)
          %11 = cir.load %4 : !cir.ptr<!cir.ptr<!s8i>>, !cir.ptr<!s8i> loc(#loc107)
          cir.call @printLine(%11) : (!cir.ptr<!s8i>) -> () loc(#loc108)
        } loc(#loc172)
      } loc(#loc171)
    } loc(#loc169)
    cir.return loc(#loc75)
  } loc(#loc168)
  cir.func no_proto internal private @good2() extra(#fn_attr1) {
    cir.scope {
      %0 = cir.get_global @globalReturnsTrue : !cir.ptr<!cir.func<!s32i (...)>> loc(#loc182)
      %1 = cir.cast(bitcast, %0 : !cir.ptr<!cir.func<!s32i (...)>>), !cir.ptr<!cir.func<!s32i ()>> loc(#loc182)
      %2 = cir.call %1() : (!cir.ptr<!cir.func<!s32i ()>>) -> !s32i loc(#loc113)
      %3 = cir.cast(int_to_bool, %2 : !s32i), !cir.bool loc(#loc113)
      cir.if %3 {
        cir.scope {
          %4 = cir.alloca !cir.ptr<!s8i>, !cir.ptr<!cir.ptr<!s8i>>, ["charString", init] {alignment = 8 : i64} loc(#loc185)
          %5 = cir.alloca !s32i, !cir.ptr<!s32i>, ["x"] {alignment = 4 : i64} loc(#loc186)
          %6 = cir.get_global @".str" : !cir.ptr<!cir.array<!s8i x 25>> loc(#loc119)
          %7 = cir.cast(array_to_ptrdecay, %6 : !cir.ptr<!cir.array<!s8i x 25>>), !cir.ptr<!s8i> loc(#loc119)
          cir.store %7, %4 : !cir.ptr<!s8i>, !cir.ptr<!cir.ptr<!s8i>> loc(#loc185)
          %8 = cir.call @rand() : () -> !s32i extra(#fn_attr) loc(#loc122)
          %9 = cir.const #cir.int<3> : !s32i loc(#loc123)
          %10 = cir.binop(rem, %8, %9) : !s32i loc(#loc187)
          cir.store %10, %5 : !s32i, !cir.ptr<!s32i> loc(#loc188)
          cir.scope {
            %12 = cir.load %5 : !cir.ptr<!s32i>, !s32i loc(#loc128)
            cir.switch (%12 : !s32i) {
              cir.case(equal, [#cir.int<0> : !s32i]) {
                %13 = cir.get_global @".str.1" : !cir.ptr<!cir.array<!s8i x 2>> loc(#loc130)
                %14 = cir.cast(array_to_ptrdecay, %13 : !cir.ptr<!cir.array<!s8i x 2>>), !cir.ptr<!s8i> loc(#loc130)
                cir.store %14, %4 : !cir.ptr<!s8i>, !cir.ptr<!cir.ptr<!s8i>> loc(#loc190)
                cir.break loc(#loc132)
              } loc(#loc129)
              cir.case(equal, [#cir.int<1> : !s32i]) {
                %13 = cir.get_global @".str.2" : !cir.ptr<!cir.array<!s8i x 2>> loc(#loc134)
                %14 = cir.cast(array_to_ptrdecay, %13 : !cir.ptr<!cir.array<!s8i x 2>>), !cir.ptr<!s8i> loc(#loc134)
                cir.store %14, %4 : !cir.ptr<!s8i>, !cir.ptr<!cir.ptr<!s8i>> loc(#loc191)
                cir.break loc(#loc136)
              } loc(#loc133)
              cir.case(default, []) {
                cir.return loc(#loc138)
              } loc(#loc137)
              cir.yield loc(#loc126)
            } loc(#loc126)
          } loc(#loc189)
          %11 = cir.load %4 : !cir.ptr<!cir.ptr<!s8i>>, !cir.ptr<!s8i> loc(#loc139)
          cir.call @printLine(%11) : (!cir.ptr<!s8i>) -> () loc(#loc140)
        } loc(#loc184)
      } loc(#loc183)
    } loc(#loc181)
    cir.return loc(#loc110)
  } loc(#loc180)
} loc(#loc)
#loc = loc("/home/ladisgin/git_proj/juliet-c/testcases/CWE478_Missing_Default_Case_in_Switch/CWE478_Missing_Default_Case_in_Switch__basic_11.c":0:0)
#loc1 = loc("../../testcasesupport/std_testcase_io.h":48:1)
#loc2 = loc("../../testcasesupport/std_testcase_io.h":48:23)
#loc3 = loc("CWE478_Missing_Default_Case_in_Switch__basic_11.c":25:38)
#loc4 = loc("/usr/include/stdlib.h":573:1)
#loc5 = loc("/usr/include/stdlib.h":573:24)
#loc6 = loc("CWE478_Missing_Default_Case_in_Switch__basic_11.c":31:30)
#loc7 = loc("CWE478_Missing_Default_Case_in_Switch__basic_11.c":34:30)
#loc8 = loc("../../testcasesupport/std_testcase_io.h":14:1)
#loc9 = loc("../../testcasesupport/std_testcase_io.h":14:33)
#loc10 = loc("CWE478_Missing_Default_Case_in_Switch__basic_11.c":20:1)
#loc11 = loc("CWE478_Missing_Default_Case_in_Switch__basic_11.c":41:1)
#loc12 = loc("CWE478_Missing_Default_Case_in_Switch__basic_11.c":22:5)
#loc13 = loc("CWE478_Missing_Default_Case_in_Switch__basic_11.c":40:5)
#loc14 = loc("CWE478_Missing_Default_Case_in_Switch__basic_11.c":22:8)
#loc15 = loc("CWE478_Missing_Default_Case_in_Switch__basic_11.c":22:26)
#loc16 = loc("CWE478_Missing_Default_Case_in_Switch__basic_11.c":23:5)
#loc17 = loc("CWE478_Missing_Default_Case_in_Switch__basic_11.c":24:9)
#loc18 = loc("CWE478_Missing_Default_Case_in_Switch__basic_11.c":39:9)
#loc19 = loc("CWE478_Missing_Default_Case_in_Switch__basic_11.c":25:13)
#loc20 = loc("CWE478_Missing_Default_Case_in_Switch__basic_11.c":26:13)
#loc21 = loc("CWE478_Missing_Default_Case_in_Switch__basic_11.c":26:17)
#loc22 = loc("CWE478_Missing_Default_Case_in_Switch__basic_11.c":27:18)
#loc23 = loc("CWE478_Missing_Default_Case_in_Switch__basic_11.c":27:27)
#loc24 = loc("CWE478_Missing_Default_Case_in_Switch__basic_11.c":27:13)
#loc25 = loc("CWE478_Missing_Default_Case_in_Switch__basic_11.c":27:28)
#loc26 = loc("CWE478_Missing_Default_Case_in_Switch__basic_11.c":28:13)
#loc27 = loc("CWE478_Missing_Default_Case_in_Switch__basic_11.c":37:13)
#loc28 = loc("CWE478_Missing_Default_Case_in_Switch__basic_11.c":28:21)
#loc29 = loc("CWE478_Missing_Default_Case_in_Switch__basic_11.c":30:13)
#loc30 = loc("CWE478_Missing_Default_Case_in_Switch__basic_11.c":31:17)
#loc31 = loc("CWE478_Missing_Default_Case_in_Switch__basic_11.c":32:17)
#loc32 = loc("CWE478_Missing_Default_Case_in_Switch__basic_11.c":33:13)
#loc33 = loc("CWE478_Missing_Default_Case_in_Switch__basic_11.c":34:17)
#loc34 = loc("CWE478_Missing_Default_Case_in_Switch__basic_11.c":35:17)
#loc35 = loc("CWE478_Missing_Default_Case_in_Switch__basic_11.c":38:23)
#loc36 = loc("CWE478_Missing_Default_Case_in_Switch__basic_11.c":38:13)
#loc37 = loc("CWE478_Missing_Default_Case_in_Switch__basic_11.c":104:1)
#loc38 = loc("CWE478_Missing_Default_Case_in_Switch__basic_11.c":108:1)
#loc39 = loc("CWE478_Missing_Default_Case_in_Switch__basic_11.c":106:5)
#loc40 = loc("CWE478_Missing_Default_Case_in_Switch__basic_11.c":106:11)
#loc41 = loc("CWE478_Missing_Default_Case_in_Switch__basic_11.c":107:5)
#loc42 = loc("CWE478_Missing_Default_Case_in_Switch__basic_11.c":107:11)
#loc43 = loc("/usr/include/stdlib.h":575:1)
#loc44 = loc("/usr/include/stdlib.h":575:41)
#loc45 = loc("/usr/include/time.h":76:1)
#loc46 = loc("/usr/include/time.h":76:38)
#loc47 = loc("CWE478_Missing_Default_Case_in_Switch__basic_11.c":124:15)
#loc48 = loc("CWE478_Missing_Default_Case_in_Switch__basic_11.c":126:15)
#loc49 = loc("CWE478_Missing_Default_Case_in_Switch__basic_11.c":129:15)
#loc50 = loc("CWE478_Missing_Default_Case_in_Switch__basic_11.c":131:15)
#loc51 = loc("CWE478_Missing_Default_Case_in_Switch__basic_11.c":119:1)
#loc52 = loc("CWE478_Missing_Default_Case_in_Switch__basic_11.c":134:1)
#loc57 = loc("CWE478_Missing_Default_Case_in_Switch__basic_11.c":120:1)
#loc58 = loc("CWE478_Missing_Default_Case_in_Switch__basic_11.c":122:27)
#loc59 = loc("CWE478_Missing_Default_Case_in_Switch__basic_11.c":122:22)
#loc60 = loc("CWE478_Missing_Default_Case_in_Switch__basic_11.c":122:5)
#loc61 = loc("CWE478_Missing_Default_Case_in_Switch__basic_11.c":124:5)
#loc62 = loc("CWE478_Missing_Default_Case_in_Switch__basic_11.c":125:5)
#loc63 = loc("CWE478_Missing_Default_Case_in_Switch__basic_11.c":125:58)
#loc64 = loc("CWE478_Missing_Default_Case_in_Switch__basic_11.c":126:5)
#loc65 = loc("CWE478_Missing_Default_Case_in_Switch__basic_11.c":129:5)
#loc66 = loc("CWE478_Missing_Default_Case_in_Switch__basic_11.c":130:5)
#loc67 = loc("CWE478_Missing_Default_Case_in_Switch__basic_11.c":130:57)
#loc68 = loc("CWE478_Missing_Default_Case_in_Switch__basic_11.c":131:5)
#loc69 = loc("CWE478_Missing_Default_Case_in_Switch__basic_11.c":133:12)
#loc70 = loc("CWE478_Missing_Default_Case_in_Switch__basic_11.c":133:5)
#loc71 = loc("../../testcasesupport/std_testcase_io.h":50:1)
#loc72 = loc("../../testcasesupport/std_testcase_io.h":50:24)
#loc73 = loc("CWE478_Missing_Default_Case_in_Switch__basic_11.c":53:19)
#loc74 = loc("CWE478_Missing_Default_Case_in_Switch__basic_11.c":48:1)
#loc75 = loc("CWE478_Missing_Default_Case_in_Switch__basic_11.c":76:1)
#loc76 = loc("CWE478_Missing_Default_Case_in_Switch__basic_11.c":50:5)
#loc77 = loc("CWE478_Missing_Default_Case_in_Switch__basic_11.c":75:5)
#loc78 = loc("CWE478_Missing_Default_Case_in_Switch__basic_11.c":50:8)
#loc79 = loc("CWE478_Missing_Default_Case_in_Switch__basic_11.c":50:27)
#loc80 = loc("CWE478_Missing_Default_Case_in_Switch__basic_11.c":51:5)
#loc81 = loc("CWE478_Missing_Default_Case_in_Switch__basic_11.c":54:5)
#loc82 = loc("CWE478_Missing_Default_Case_in_Switch__basic_11.c":56:5)
#loc83 = loc("CWE478_Missing_Default_Case_in_Switch__basic_11.c":53:9)
#loc84 = loc("CWE478_Missing_Default_Case_in_Switch__basic_11.c":57:9)
#loc85 = loc("CWE478_Missing_Default_Case_in_Switch__basic_11.c":74:9)
#loc86 = loc("CWE478_Missing_Default_Case_in_Switch__basic_11.c":58:13)
#loc87 = loc("CWE478_Missing_Default_Case_in_Switch__basic_11.c":58:38)
#loc88 = loc("CWE478_Missing_Default_Case_in_Switch__basic_11.c":59:13)
#loc89 = loc("CWE478_Missing_Default_Case_in_Switch__basic_11.c":59:17)
#loc90 = loc("CWE478_Missing_Default_Case_in_Switch__basic_11.c":60:18)
#loc91 = loc("CWE478_Missing_Default_Case_in_Switch__basic_11.c":60:27)
#loc92 = loc("CWE478_Missing_Default_Case_in_Switch__basic_11.c":60:13)
#loc93 = loc("CWE478_Missing_Default_Case_in_Switch__basic_11.c":60:28)
#loc94 = loc("CWE478_Missing_Default_Case_in_Switch__basic_11.c":61:13)
#loc95 = loc("CWE478_Missing_Default_Case_in_Switch__basic_11.c":72:13)
#loc96 = loc("CWE478_Missing_Default_Case_in_Switch__basic_11.c":61:21)
#loc97 = loc("CWE478_Missing_Default_Case_in_Switch__basic_11.c":63:13)
#loc98 = loc("CWE478_Missing_Default_Case_in_Switch__basic_11.c":64:30)
#loc99 = loc("CWE478_Missing_Default_Case_in_Switch__basic_11.c":64:17)
#loc100 = loc("CWE478_Missing_Default_Case_in_Switch__basic_11.c":65:17)
#loc101 = loc("CWE478_Missing_Default_Case_in_Switch__basic_11.c":66:13)
#loc102 = loc("CWE478_Missing_Default_Case_in_Switch__basic_11.c":67:30)
#loc103 = loc("CWE478_Missing_Default_Case_in_Switch__basic_11.c":67:17)
#loc104 = loc("CWE478_Missing_Default_Case_in_Switch__basic_11.c":68:17)
#loc105 = loc("CWE478_Missing_Default_Case_in_Switch__basic_11.c":70:13)
#loc106 = loc("CWE478_Missing_Default_Case_in_Switch__basic_11.c":71:17)
#loc107 = loc("CWE478_Missing_Default_Case_in_Switch__basic_11.c":73:23)
#loc108 = loc("CWE478_Missing_Default_Case_in_Switch__basic_11.c":73:13)
#loc109 = loc("CWE478_Missing_Default_Case_in_Switch__basic_11.c":79:1)
#loc110 = loc("CWE478_Missing_Default_Case_in_Switch__basic_11.c":102:1)
#loc111 = loc("CWE478_Missing_Default_Case_in_Switch__basic_11.c":81:5)
#loc112 = loc("CWE478_Missing_Default_Case_in_Switch__basic_11.c":101:5)
#loc113 = loc("CWE478_Missing_Default_Case_in_Switch__basic_11.c":81:8)
#loc114 = loc("CWE478_Missing_Default_Case_in_Switch__basic_11.c":81:26)
#loc115 = loc("CWE478_Missing_Default_Case_in_Switch__basic_11.c":82:5)
#loc116 = loc("CWE478_Missing_Default_Case_in_Switch__basic_11.c":83:9)
#loc117 = loc("CWE478_Missing_Default_Case_in_Switch__basic_11.c":100:9)
#loc118 = loc("CWE478_Missing_Default_Case_in_Switch__basic_11.c":84:13)
#loc119 = loc("CWE478_Missing_Default_Case_in_Switch__basic_11.c":84:38)
#loc120 = loc("CWE478_Missing_Default_Case_in_Switch__basic_11.c":85:13)
#loc121 = loc("CWE478_Missing_Default_Case_in_Switch__basic_11.c":85:17)
#loc122 = loc("CWE478_Missing_Default_Case_in_Switch__basic_11.c":86:18)
#loc123 = loc("CWE478_Missing_Default_Case_in_Switch__basic_11.c":86:27)
#loc124 = loc("CWE478_Missing_Default_Case_in_Switch__basic_11.c":86:13)
#loc125 = loc("CWE478_Missing_Default_Case_in_Switch__basic_11.c":86:28)
#loc126 = loc("CWE478_Missing_Default_Case_in_Switch__basic_11.c":87:13)
#loc127 = loc("CWE478_Missing_Default_Case_in_Switch__basic_11.c":98:13)
#loc128 = loc("CWE478_Missing_Default_Case_in_Switch__basic_11.c":87:21)
#loc129 = loc("CWE478_Missing_Default_Case_in_Switch__basic_11.c":89:13)
#loc130 = loc("CWE478_Missing_Default_Case_in_Switch__basic_11.c":90:30)
#loc131 = loc("CWE478_Missing_Default_Case_in_Switch__basic_11.c":90:17)
#loc132 = loc("CWE478_Missing_Default_Case_in_Switch__basic_11.c":91:17)
#loc133 = loc("CWE478_Missing_Default_Case_in_Switch__basic_11.c":92:13)
#loc134 = loc("CWE478_Missing_Default_Case_in_Switch__basic_11.c":93:30)
#loc135 = loc("CWE478_Missing_Default_Case_in_Switch__basic_11.c":93:17)
#loc136 = loc("CWE478_Missing_Default_Case_in_Switch__basic_11.c":94:17)
#loc137 = loc("CWE478_Missing_Default_Case_in_Switch__basic_11.c":96:13)
#loc138 = loc("CWE478_Missing_Default_Case_in_Switch__basic_11.c":97:17)
#loc139 = loc("CWE478_Missing_Default_Case_in_Switch__basic_11.c":99:23)
#loc140 = loc("CWE478_Missing_Default_Case_in_Switch__basic_11.c":99:13)
#loc141 = loc(fused[#loc1, #loc2])
#loc142 = loc(fused[#loc4, #loc5])
#loc143 = loc(fused[#loc8, #loc9])
#loc144 = loc(fused[#loc10, #loc11])
#loc145 = loc(fused[#loc12, #loc13])
#loc146 = loc(fused[#loc14, #loc15])
#loc147 = loc(fused[#loc16, #loc13])
#loc148 = loc(fused[#loc17, #loc18])
#loc149 = loc(fused[#loc19, #loc3])
#loc150 = loc(fused[#loc20, #loc21])
#loc151 = loc(fused[#loc22, #loc23])
#loc152 = loc(fused[#loc24, #loc25])
#loc153 = loc(fused[#loc26, #loc27])
#loc154 = loc(fused[#loc30, #loc6])
#loc155 = loc(fused[#loc33, #loc7])
#loc156 = loc(fused[#loc37, #loc38])
#loc157 = loc(fused[#loc39, #loc40])
#loc158 = loc(fused[#loc41, #loc42])
#loc159 = loc(fused[#loc43, #loc44])
#loc160 = loc(fused[#loc45, #loc46])
#loc161 = loc(fused[#loc51, #loc52])
#loc164 = loc(fused[#loc62, #loc63])
#loc165 = loc(fused[#loc66, #loc67])
#loc166 = loc(fused[#loc70, #loc69])
#loc167 = loc(fused[#loc71, #loc72])
#loc168 = loc(fused[#loc74, #loc75])
#loc169 = loc(fused[#loc76, #loc77])
#loc170 = loc(fused[#loc78, #loc79])
#loc171 = loc(fused[#loc80, #loc81, #loc82, #loc77])
#loc172 = loc(fused[#loc84, #loc85])
#loc173 = loc(fused[#loc86, #loc87])
#loc174 = loc(fused[#loc88, #loc89])
#loc175 = loc(fused[#loc90, #loc91])
#loc176 = loc(fused[#loc92, #loc93])
#loc177 = loc(fused[#loc94, #loc95])
#loc178 = loc(fused[#loc99, #loc98])
#loc179 = loc(fused[#loc103, #loc102])
#loc180 = loc(fused[#loc109, #loc110])
#loc181 = loc(fused[#loc111, #loc112])
#loc182 = loc(fused[#loc113, #loc114])
#loc183 = loc(fused[#loc115, #loc112])
#loc184 = loc(fused[#loc116, #loc117])
#loc185 = loc(fused[#loc118, #loc119])
#loc186 = loc(fused[#loc120, #loc121])
#loc187 = loc(fused[#loc122, #loc123])
#loc188 = loc(fused[#loc124, #loc125])
#loc189 = loc(fused[#loc126, #loc127])
#loc190 = loc(fused[#loc131, #loc130])
#loc191 = loc(fused[#loc135, #loc134])
