!s32i = !cir.int<s, 32>
!s64i = !cir.int<s, 64>
!s8i = !cir.int<s, 8>
!u32i = !cir.int<u, 32>
!u64i = !cir.int<u, 64>
!void = !cir.void
#fn_attr = #cir<extra({nothrow = #cir.nothrow})>
#fn_attr1 = #cir<extra({inline = #cir.inline<no>, optnone = #cir.optnone})>
#loc140 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_char_ncpy_33.cpp":97:10)
#loc141 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_char_ncpy_33.cpp":97:14)
#loc142 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_char_ncpy_33.cpp":97:20)
#loc143 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_char_ncpy_33.cpp":97:32)
#loc203 = loc(fused[#loc140, #loc141])
#loc204 = loc(fused[#loc142, #loc143])
module @"/home/ladisgin/git_proj/juliet-c/testcases/CWE122_Heap_Based_Buffer_Overflow/s07/CWE122_Heap_Based_Buffer_Overflow__c_CWE805_char_ncpy_33.cpp" attributes {cir.lang = #cir.lang<cxx>, cir.sob = #cir.signed_overflow_behavior<undefined>, cir.triple = "x86_64-unknown-linux-gnu", dlti.dl_spec = #dlti.dl_spec<f80 = dense<128> : vector<2xi64>, i128 = dense<128> : vector<2xi64>, i64 = dense<64> : vector<2xi64>, !llvm.ptr<272> = dense<64> : vector<4xi64>, !llvm.ptr<271> = dense<32> : vector<4xi64>, !llvm.ptr<270> = dense<32> : vector<4xi64>, f128 = dense<128> : vector<2xi64>, f64 = dense<64> : vector<2xi64>, f16 = dense<16> : vector<2xi64>, i32 = dense<32> : vector<2xi64>, i16 = dense<16> : vector<2xi64>, i8 = dense<8> : vector<2xi64>, i1 = dense<8> : vector<2xi64>, !llvm.ptr = dense<64> : vector<4xi64>, "dlti.stack_alignment" = 128 : i64, "dlti.endianness" = "little">} {
  cir.func private @malloc(!u64i) -> !cir.ptr<!void> extra(#fn_attr) loc(#loc156)
  cir.func private @exit(!s32i) extra(#fn_attr) loc(#loc157)
  cir.func private @strncpy(!cir.ptr<!s8i>, !cir.ptr<!s8i>, !u64i) -> !cir.ptr<!s8i> extra(#fn_attr) loc(#loc158)
  cir.func private @printLine(!cir.ptr<!s8i>) loc(#loc159)
  cir.func private @free(!cir.ptr<!void>) extra(#fn_attr) loc(#loc160)
  cir.func @_ZN56CWE122_Heap_Based_Buffer_Overflow__c_CWE805_char_ncpy_333badEv() extra(#fn_attr1) {
    %0 = cir.alloca !cir.ptr<!s8i>, !cir.ptr<!cir.ptr<!s8i>>, ["data", init] {alignment = 8 : i64} loc(#loc162)
    %1 = cir.alloca !cir.array<!s8i x 100>, !cir.ptr<!cir.array<!s8i x 100>>, ["source"] {alignment = 16 : i64} loc(#loc163)
    %2 = cir.alloca !cir.ptr<!s8i>, !cir.ptr<!cir.ptr<!s8i>>, ["data"] {alignment = 8 : i64} loc(#loc164)
    %3 = cir.alloca !cir.ptr<!cir.ptr<!s8i>>, !cir.ptr<!cir.ptr<!cir.ptr<!s8i>>>, ["dataRef", init, const] {alignment = 8 : i64} loc(#loc165)
    cir.store %2, %3 : !cir.ptr<!cir.ptr<!s8i>>, !cir.ptr<!cir.ptr<!cir.ptr<!s8i>>> loc(#loc20)
    %4 = cir.const #cir.ptr<null> : !cir.ptr<!s8i> loc(#loc21)
    cir.store %4, %2 : !cir.ptr<!s8i>, !cir.ptr<!cir.ptr<!s8i>> loc(#loc166)
    %5 = cir.get_global @malloc : !cir.ptr<!cir.func<!cir.ptr<!void> (!u64i)>> loc(#loc23)
    %6 = cir.const #cir.int<50> : !s32i loc(#loc24)
    %7 = cir.cast(integral, %6 : !s32i), !u64i loc(#loc24)
    %8 = cir.const #cir.int<1> : !u64i loc(#loc167)
    %9 = cir.binop(mul, %7, %8) : !u64i loc(#loc168)
    %10 = cir.call @malloc(%9) : (!u64i) -> !cir.ptr<!void> extra(#fn_attr) loc(#loc23)
    %11 = cir.cast(bitcast, %10 : !cir.ptr<!void>), !cir.ptr<!s8i> loc(#loc169)
    cir.store %11, %2 : !cir.ptr<!s8i>, !cir.ptr<!cir.ptr<!s8i>> loc(#loc170)
    cir.br ^bb1 loc(#loc171)
  ^bb1:  // pred: ^bb0
    %12 = cir.load %2 : !cir.ptr<!cir.ptr<!s8i>>, !cir.ptr<!s8i> loc(#loc31)
    %13 = cir.const #cir.ptr<null> : !cir.ptr<!s8i> loc(#loc32)
    %14 = cir.cmp(eq, %12, %13) : !cir.ptr<!s8i>, !cir.bool loc(#loc172)
    cir.brcond %14 ^bb2, ^bb3 loc(#loc173)
  ^bb2:  // pred: ^bb1
    %15 = cir.get_global @exit : !cir.ptr<!cir.func<!void (!s32i)>> loc(#loc34)
    %16 = cir.const #cir.int<1> : !s32i loc(#loc35)
    %17 = cir.unary(minus, %16) : !s32i, !s32i loc(#loc36)
    cir.call @exit(%17) : (!s32i) -> () extra(#fn_attr) loc(#loc34)
    cir.br ^bb3 loc(#loc30)
  ^bb3:  // 2 preds: ^bb1, ^bb2
    cir.br ^bb4 loc(#loc30)
  ^bb4:  // pred: ^bb3
    %18 = cir.const #cir.int<0> : !s8i loc(#loc37)
    %19 = cir.load %2 : !cir.ptr<!cir.ptr<!s8i>>, !cir.ptr<!s8i> loc(#loc38)
    %20 = cir.const #cir.int<0> : !s32i loc(#loc39)
    %21 = cir.ptr_stride(%19 : !cir.ptr<!s8i>, %20 : !s32i), !cir.ptr<!s8i> loc(#loc40)
    cir.store %18, %21 : !s8i, !cir.ptr<!s8i> loc(#loc174)
    cir.br ^bb5 loc(#loc175)
  ^bb5:  // pred: ^bb4
    %22 = cir.load %3 : !cir.ptr<!cir.ptr<!cir.ptr<!s8i>>>, !cir.ptr<!cir.ptr<!s8i>> loc(#loc14)
    %23 = cir.load %22 : !cir.ptr<!cir.ptr<!s8i>>, !cir.ptr<!s8i> loc(#loc14)
    cir.store %23, %0 : !cir.ptr<!s8i>, !cir.ptr<!cir.ptr<!s8i>> loc(#loc162)
    cir.br ^bb6 loc(#loc176)
  ^bb6:  // pred: ^bb5
    %24 = cir.cast(array_to_ptrdecay, %1 : !cir.ptr<!cir.array<!s8i x 100>>), !cir.ptr<!s8i> loc(#loc45)
    %25 = cir.cast(bitcast, %24 : !cir.ptr<!s8i>), !cir.ptr<!void> loc(#loc45)
    %26 = cir.const #cir.int<67> : !s8i loc(#loc46)
    %27 = cir.cast(integral, %26 : !s8i), !s32i loc(#loc46)
    %28 = cir.const #cir.int<100> : !s32i loc(#loc47)
    %29 = cir.const #cir.int<1> : !s32i loc(#loc48)
    %30 = cir.binop(sub, %28, %29) nsw : !s32i loc(#loc47)
    %31 = cir.cast(integral, %30 : !s32i), !u64i loc(#loc47)
    cir.libc.memset %31 bytes from %25 set to %27 : !cir.ptr<!void>, !s32i, !u64i loc(#loc177)
    %32 = cir.const #cir.int<0> : !s8i loc(#loc51)
    %33 = cir.const #cir.int<100> : !s32i loc(#loc52)
    %34 = cir.const #cir.int<1> : !s32i loc(#loc53)
    %35 = cir.binop(sub, %33, %34) nsw : !s32i loc(#loc52)
    %36 = cir.cast(array_to_ptrdecay, %1 : !cir.ptr<!cir.array<!s8i x 100>>), !cir.ptr<!s8i> loc(#loc54)
    %37 = cir.ptr_stride(%36 : !cir.ptr<!s8i>, %35 : !s32i), !cir.ptr<!s8i> loc(#loc54)
    cir.store %32, %37 : !s8i, !cir.ptr<!s8i> loc(#loc178)
    %38 = cir.get_global @strncpy : !cir.ptr<!cir.func<!cir.ptr<!s8i> (!cir.ptr<!s8i>, !cir.ptr<!s8i>, !u64i)>> loc(#loc55)
    %39 = cir.load %0 : !cir.ptr<!cir.ptr<!s8i>>, !cir.ptr<!s8i> loc(#loc56)
    %40 = cir.cast(array_to_ptrdecay, %1 : !cir.ptr<!cir.array<!s8i x 100>>), !cir.ptr<!s8i> loc(#loc57)
    %41 = cir.const #cir.int<100> : !s32i loc(#loc58)
    %42 = cir.const #cir.int<1> : !s32i loc(#loc59)
    %43 = cir.binop(sub, %41, %42) nsw : !s32i loc(#loc58)
    %44 = cir.cast(integral, %43 : !s32i), !u64i loc(#loc58)
    %45 = cir.call @strncpy(%39, %40, %44) : (!cir.ptr<!s8i>, !cir.ptr<!s8i>, !u64i) -> !cir.ptr<!s8i> extra(#fn_attr) loc(#loc55)
    %46 = cir.const #cir.int<0> : !s8i loc(#loc60)
    %47 = cir.load %0 : !cir.ptr<!cir.ptr<!s8i>>, !cir.ptr<!s8i> loc(#loc61)
    %48 = cir.const #cir.int<100> : !s32i loc(#loc62)
    %49 = cir.const #cir.int<1> : !s32i loc(#loc63)
    %50 = cir.binop(sub, %48, %49) nsw : !s32i loc(#loc62)
    %51 = cir.ptr_stride(%47 : !cir.ptr<!s8i>, %50 : !s32i), !cir.ptr<!s8i> loc(#loc64)
    cir.store %46, %51 : !s8i, !cir.ptr<!s8i> loc(#loc179)
    %52 = cir.load %0 : !cir.ptr<!cir.ptr<!s8i>>, !cir.ptr<!s8i> loc(#loc65)
    cir.call @printLine(%52) : (!cir.ptr<!s8i>) -> () loc(#loc66)
    %53 = cir.get_global @free : !cir.ptr<!cir.func<!void (!cir.ptr<!void>)>> loc(#loc67)
    %54 = cir.load %0 : !cir.ptr<!cir.ptr<!s8i>>, !cir.ptr<!s8i> loc(#loc68)
    %55 = cir.cast(bitcast, %54 : !cir.ptr<!s8i>), !cir.ptr<!void> loc(#loc68)
    cir.call @free(%55) : (!cir.ptr<!void>) -> () extra(#fn_attr) loc(#loc67)
    cir.br ^bb7 loc(#loc44)
  ^bb7:  // pred: ^bb6
    cir.br ^bb8 loc(#loc42)
  ^bb8:  // pred: ^bb7
    cir.return loc(#loc12)
  } loc(#loc161)
  cir.func internal private @_ZN56CWE122_Heap_Based_Buffer_Overflow__c_CWE805_char_ncpy_33L7goodG2BEv() extra(#fn_attr1) {
    %0 = cir.alloca !cir.ptr<!s8i>, !cir.ptr<!cir.ptr<!s8i>>, ["data", init] {alignment = 8 : i64} loc(#loc181)
    %1 = cir.alloca !cir.array<!s8i x 100>, !cir.ptr<!cir.array<!s8i x 100>>, ["source"] {alignment = 16 : i64} loc(#loc182)
    %2 = cir.alloca !cir.ptr<!s8i>, !cir.ptr<!cir.ptr<!s8i>>, ["data"] {alignment = 8 : i64} loc(#loc183)
    %3 = cir.alloca !cir.ptr<!cir.ptr<!s8i>>, !cir.ptr<!cir.ptr<!cir.ptr<!s8i>>>, ["dataRef", init, const] {alignment = 8 : i64} loc(#loc184)
    cir.store %2, %3 : !cir.ptr<!cir.ptr<!s8i>>, !cir.ptr<!cir.ptr<!cir.ptr<!s8i>>> loc(#loc78)
    %4 = cir.const #cir.ptr<null> : !cir.ptr<!s8i> loc(#loc79)
    cir.store %4, %2 : !cir.ptr<!s8i>, !cir.ptr<!cir.ptr<!s8i>> loc(#loc185)
    %5 = cir.get_global @malloc : !cir.ptr<!cir.func<!cir.ptr<!void> (!u64i)>> loc(#loc81)
    %6 = cir.const #cir.int<100> : !s32i loc(#loc82)
    %7 = cir.cast(integral, %6 : !s32i), !u64i loc(#loc82)
    %8 = cir.const #cir.int<1> : !u64i loc(#loc186)
    %9 = cir.binop(mul, %7, %8) : !u64i loc(#loc187)
    %10 = cir.call @malloc(%9) : (!u64i) -> !cir.ptr<!void> extra(#fn_attr) loc(#loc81)
    %11 = cir.cast(bitcast, %10 : !cir.ptr<!void>), !cir.ptr<!s8i> loc(#loc188)
    cir.store %11, %2 : !cir.ptr<!s8i>, !cir.ptr<!cir.ptr<!s8i>> loc(#loc189)
    cir.br ^bb1 loc(#loc190)
  ^bb1:  // pred: ^bb0
    %12 = cir.load %2 : !cir.ptr<!cir.ptr<!s8i>>, !cir.ptr<!s8i> loc(#loc89)
    %13 = cir.const #cir.ptr<null> : !cir.ptr<!s8i> loc(#loc90)
    %14 = cir.cmp(eq, %12, %13) : !cir.ptr<!s8i>, !cir.bool loc(#loc191)
    cir.brcond %14 ^bb2, ^bb3 loc(#loc192)
  ^bb2:  // pred: ^bb1
    %15 = cir.get_global @exit : !cir.ptr<!cir.func<!void (!s32i)>> loc(#loc92)
    %16 = cir.const #cir.int<1> : !s32i loc(#loc93)
    %17 = cir.unary(minus, %16) : !s32i, !s32i loc(#loc94)
    cir.call @exit(%17) : (!s32i) -> () extra(#fn_attr) loc(#loc92)
    cir.br ^bb3 loc(#loc88)
  ^bb3:  // 2 preds: ^bb1, ^bb2
    cir.br ^bb4 loc(#loc88)
  ^bb4:  // pred: ^bb3
    %18 = cir.const #cir.int<0> : !s8i loc(#loc95)
    %19 = cir.load %2 : !cir.ptr<!cir.ptr<!s8i>>, !cir.ptr<!s8i> loc(#loc96)
    %20 = cir.const #cir.int<0> : !s32i loc(#loc97)
    %21 = cir.ptr_stride(%19 : !cir.ptr<!s8i>, %20 : !s32i), !cir.ptr<!s8i> loc(#loc98)
    cir.store %18, %21 : !s8i, !cir.ptr<!s8i> loc(#loc193)
    cir.br ^bb5 loc(#loc194)
  ^bb5:  // pred: ^bb4
    %22 = cir.load %3 : !cir.ptr<!cir.ptr<!cir.ptr<!s8i>>>, !cir.ptr<!cir.ptr<!s8i>> loc(#loc72)
    %23 = cir.load %22 : !cir.ptr<!cir.ptr<!s8i>>, !cir.ptr<!s8i> loc(#loc72)
    cir.store %23, %0 : !cir.ptr<!s8i>, !cir.ptr<!cir.ptr<!s8i>> loc(#loc181)
    cir.br ^bb6 loc(#loc195)
  ^bb6:  // pred: ^bb5
    %24 = cir.cast(array_to_ptrdecay, %1 : !cir.ptr<!cir.array<!s8i x 100>>), !cir.ptr<!s8i> loc(#loc103)
    %25 = cir.cast(bitcast, %24 : !cir.ptr<!s8i>), !cir.ptr<!void> loc(#loc103)
    %26 = cir.const #cir.int<67> : !s8i loc(#loc104)
    %27 = cir.cast(integral, %26 : !s8i), !s32i loc(#loc104)
    %28 = cir.const #cir.int<100> : !s32i loc(#loc105)
    %29 = cir.const #cir.int<1> : !s32i loc(#loc106)
    %30 = cir.binop(sub, %28, %29) nsw : !s32i loc(#loc105)
    %31 = cir.cast(integral, %30 : !s32i), !u64i loc(#loc105)
    cir.libc.memset %31 bytes from %25 set to %27 : !cir.ptr<!void>, !s32i, !u64i loc(#loc196)
    %32 = cir.const #cir.int<0> : !s8i loc(#loc109)
    %33 = cir.const #cir.int<100> : !s32i loc(#loc110)
    %34 = cir.const #cir.int<1> : !s32i loc(#loc111)
    %35 = cir.binop(sub, %33, %34) nsw : !s32i loc(#loc110)
    %36 = cir.cast(array_to_ptrdecay, %1 : !cir.ptr<!cir.array<!s8i x 100>>), !cir.ptr<!s8i> loc(#loc112)
    %37 = cir.ptr_stride(%36 : !cir.ptr<!s8i>, %35 : !s32i), !cir.ptr<!s8i> loc(#loc112)
    cir.store %32, %37 : !s8i, !cir.ptr<!s8i> loc(#loc197)
    %38 = cir.get_global @strncpy : !cir.ptr<!cir.func<!cir.ptr<!s8i> (!cir.ptr<!s8i>, !cir.ptr<!s8i>, !u64i)>> loc(#loc113)
    %39 = cir.load %0 : !cir.ptr<!cir.ptr<!s8i>>, !cir.ptr<!s8i> loc(#loc114)
    %40 = cir.cast(array_to_ptrdecay, %1 : !cir.ptr<!cir.array<!s8i x 100>>), !cir.ptr<!s8i> loc(#loc115)
    %41 = cir.const #cir.int<100> : !s32i loc(#loc116)
    %42 = cir.const #cir.int<1> : !s32i loc(#loc117)
    %43 = cir.binop(sub, %41, %42) nsw : !s32i loc(#loc116)
    %44 = cir.cast(integral, %43 : !s32i), !u64i loc(#loc116)
    %45 = cir.call @strncpy(%39, %40, %44) : (!cir.ptr<!s8i>, !cir.ptr<!s8i>, !u64i) -> !cir.ptr<!s8i> extra(#fn_attr) loc(#loc113)
    %46 = cir.const #cir.int<0> : !s8i loc(#loc118)
    %47 = cir.load %0 : !cir.ptr<!cir.ptr<!s8i>>, !cir.ptr<!s8i> loc(#loc119)
    %48 = cir.const #cir.int<100> : !s32i loc(#loc120)
    %49 = cir.const #cir.int<1> : !s32i loc(#loc121)
    %50 = cir.binop(sub, %48, %49) nsw : !s32i loc(#loc120)
    %51 = cir.ptr_stride(%47 : !cir.ptr<!s8i>, %50 : !s32i), !cir.ptr<!s8i> loc(#loc122)
    cir.store %46, %51 : !s8i, !cir.ptr<!s8i> loc(#loc198)
    %52 = cir.load %0 : !cir.ptr<!cir.ptr<!s8i>>, !cir.ptr<!s8i> loc(#loc123)
    cir.call @printLine(%52) : (!cir.ptr<!s8i>) -> () loc(#loc124)
    %53 = cir.get_global @free : !cir.ptr<!cir.func<!void (!cir.ptr<!void>)>> loc(#loc125)
    %54 = cir.load %0 : !cir.ptr<!cir.ptr<!s8i>>, !cir.ptr<!s8i> loc(#loc126)
    %55 = cir.cast(bitcast, %54 : !cir.ptr<!s8i>), !cir.ptr<!void> loc(#loc126)
    cir.call @free(%55) : (!cir.ptr<!void>) -> () extra(#fn_attr) loc(#loc125)
    cir.br ^bb7 loc(#loc102)
  ^bb7:  // pred: ^bb6
    cir.br ^bb8 loc(#loc100)
  ^bb8:  // pred: ^bb7
    cir.return loc(#loc70)
  } loc(#loc180)
  cir.func @_ZN56CWE122_Heap_Based_Buffer_Overflow__c_CWE805_char_ncpy_334goodEv() extra(#fn_attr1) {
    cir.call @_ZN56CWE122_Heap_Based_Buffer_Overflow__c_CWE805_char_ncpy_33L7goodG2BEv() : () -> () loc(#loc129)
    cir.return loc(#loc128)
  } loc(#loc199)
  cir.func private @srand(!u32i) extra(#fn_attr) loc(#loc200)
  cir.func private @time(!cir.ptr<!s64i>) -> !s64i extra(#fn_attr) loc(#loc201)
  cir.global "private" constant cir_private dsolocal @".str" = #cir.const_array<"Calling good()...\00" : !cir.array<!s8i x 18>> : !cir.array<!s8i x 18> {alignment = 1 : i64} loc(#loc134)
  cir.global "private" constant cir_private dsolocal @".str.1" = #cir.const_array<"Finished good()\00" : !cir.array<!s8i x 16>> : !cir.array<!s8i x 16> {alignment = 1 : i64} loc(#loc135)
  cir.global "private" constant cir_private dsolocal @".str.2" = #cir.const_array<"Calling bad()...\00" : !cir.array<!s8i x 17>> : !cir.array<!s8i x 17> {alignment = 1 : i64} loc(#loc136)
  cir.global "private" constant cir_private dsolocal @".str.3" = #cir.const_array<"Finished bad()\00" : !cir.array<!s8i x 15>> : !cir.array<!s8i x 15> {alignment = 1 : i64} loc(#loc137)
  cir.func @main(%arg0: !s32i loc(fused[#loc140, #loc141]), %arg1: !cir.ptr<!cir.ptr<!s8i>> loc(fused[#loc142, #loc143])) -> !s32i extra(#fn_attr1) {
    %0 = cir.alloca !s32i, !cir.ptr<!s32i>, ["argc", init] {alignment = 4 : i64} loc(#loc203)
    %1 = cir.alloca !cir.ptr<!cir.ptr<!s8i>>, !cir.ptr<!cir.ptr<!cir.ptr<!s8i>>>, ["argv", init] {alignment = 8 : i64} loc(#loc204)
    %2 = cir.alloca !s32i, !cir.ptr<!s32i>, ["__retval"] {alignment = 4 : i64} loc(#loc139)
    cir.store %arg0, %0 : !s32i, !cir.ptr<!s32i> loc(#loc144)
    cir.store %arg1, %1 : !cir.ptr<!cir.ptr<!s8i>>, !cir.ptr<!cir.ptr<!cir.ptr<!s8i>>> loc(#loc144)
    %3 = cir.const #cir.ptr<null> : !cir.ptr<!s64i> loc(#loc145)
    %4 = cir.call @time(%3) : (!cir.ptr<!s64i>) -> !s64i extra(#fn_attr) loc(#loc146)
    %5 = cir.cast(integral, %4 : !s64i), !u32i loc(#loc146)
    cir.call @srand(%5) : (!u32i) -> () extra(#fn_attr) loc(#loc147)
    %6 = cir.get_global @".str" : !cir.ptr<!cir.array<!s8i x 18>> loc(#loc134)
    %7 = cir.cast(array_to_ptrdecay, %6 : !cir.ptr<!cir.array<!s8i x 18>>), !cir.ptr<!s8i> loc(#loc134)
    cir.call @printLine(%7) : (!cir.ptr<!s8i>) -> () loc(#loc148)
    cir.call @_ZN56CWE122_Heap_Based_Buffer_Overflow__c_CWE805_char_ncpy_334goodEv() : () -> () loc(#loc149)
    %8 = cir.get_global @".str.1" : !cir.ptr<!cir.array<!s8i x 16>> loc(#loc135)
    %9 = cir.cast(array_to_ptrdecay, %8 : !cir.ptr<!cir.array<!s8i x 16>>), !cir.ptr<!s8i> loc(#loc135)
    cir.call @printLine(%9) : (!cir.ptr<!s8i>) -> () loc(#loc150)
    %10 = cir.get_global @".str.2" : !cir.ptr<!cir.array<!s8i x 17>> loc(#loc136)
    %11 = cir.cast(array_to_ptrdecay, %10 : !cir.ptr<!cir.array<!s8i x 17>>), !cir.ptr<!s8i> loc(#loc136)
    cir.call @printLine(%11) : (!cir.ptr<!s8i>) -> () loc(#loc151)
    cir.call @_ZN56CWE122_Heap_Based_Buffer_Overflow__c_CWE805_char_ncpy_333badEv() : () -> () loc(#loc152)
    %12 = cir.get_global @".str.3" : !cir.ptr<!cir.array<!s8i x 15>> loc(#loc137)
    %13 = cir.cast(array_to_ptrdecay, %12 : !cir.ptr<!cir.array<!s8i x 15>>), !cir.ptr<!s8i> loc(#loc137)
    cir.call @printLine(%13) : (!cir.ptr<!s8i>) -> () loc(#loc153)
    %14 = cir.const #cir.int<0> : !s32i loc(#loc154)
    cir.store %14, %2 : !s32i, !cir.ptr<!s32i> loc(#loc205)
    %15 = cir.load %2 : !cir.ptr<!s32i>, !s32i loc(#loc205)
    cir.return %15 : !s32i loc(#loc205)
  } loc(#loc202)
} loc(#loc)
#loc = loc("/home/ladisgin/git_proj/juliet-c/testcases/CWE122_Heap_Based_Buffer_Overflow/s07/CWE122_Heap_Based_Buffer_Overflow__c_CWE805_char_ncpy_33.cpp":0:0)
#loc1 = loc("/usr/include/stdlib.h":672:1)
#loc2 = loc("/usr/include/stdlib.h":672:45)
#loc3 = loc("/usr/include/stdlib.h":756:1)
#loc4 = loc("/usr/include/stdlib.h":756:70)
#loc5 = loc("/usr/include/string.h":144:1)
#loc6 = loc("/usr/include/string.h":146:14)
#loc7 = loc("../../../testcasesupport/std_testcase_io.h":14:1)
#loc8 = loc("../../../testcasesupport/std_testcase_io.h":14:33)
#loc9 = loc("/usr/include/stdlib.h":687:1)
#loc10 = loc("/usr/include/stdlib.h":687:32)
#loc11 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_char_ncpy_33.cpp":26:1)
#loc12 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_char_ncpy_33.cpp":48:1)
#loc13 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_char_ncpy_33.cpp":36:9)
#loc14 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_char_ncpy_33.cpp":36:23)
#loc15 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_char_ncpy_33.cpp":38:13)
#loc16 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_char_ncpy_33.cpp":38:28)
#loc17 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_char_ncpy_33.cpp":28:5)
#loc18 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_char_ncpy_33.cpp":28:12)
#loc19 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_char_ncpy_33.cpp":29:5)
#loc20 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_char_ncpy_33.cpp":29:23)
#loc21 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_char_ncpy_33.cpp":30:12)
#loc22 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_char_ncpy_33.cpp":30:5)
#loc23 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_char_ncpy_33.cpp":32:20)
#loc24 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_char_ncpy_33.cpp":32:27)
#loc25 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_char_ncpy_33.cpp":32:30)
#loc26 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_char_ncpy_33.cpp":32:41)
#loc27 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_char_ncpy_33.cpp":32:42)
#loc28 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_char_ncpy_33.cpp":32:5)
#loc29 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_char_ncpy_33.cpp":33:5)
#loc30 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_char_ncpy_33.cpp":33:33)
#loc31 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_char_ncpy_33.cpp":33:9)
#loc32 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_char_ncpy_33.cpp":33:17)
#loc33 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_char_ncpy_33.cpp":33:23)
#loc34 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_char_ncpy_33.cpp":33:24)
#loc35 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_char_ncpy_33.cpp":33:30)
#loc36 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_char_ncpy_33.cpp":33:29)
#loc37 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_char_ncpy_33.cpp":34:15)
#loc38 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_char_ncpy_33.cpp":34:5)
#loc39 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_char_ncpy_33.cpp":34:10)
#loc40 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_char_ncpy_33.cpp":34:11)
#loc41 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_char_ncpy_33.cpp":35:5)
#loc42 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_char_ncpy_33.cpp":47:5)
#loc43 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_char_ncpy_33.cpp":37:9)
#loc44 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_char_ncpy_33.cpp":46:9)
#loc45 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_char_ncpy_33.cpp":39:20)
#loc46 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_char_ncpy_33.cpp":39:28)
#loc47 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_char_ncpy_33.cpp":39:33)
#loc48 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_char_ncpy_33.cpp":39:37)
#loc49 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_char_ncpy_33.cpp":39:13)
#loc50 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_char_ncpy_33.cpp":39:38)
#loc51 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_char_ncpy_33.cpp":40:29)
#loc52 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_char_ncpy_33.cpp":40:20)
#loc53 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_char_ncpy_33.cpp":40:24)
#loc54 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_char_ncpy_33.cpp":40:13)
#loc55 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_char_ncpy_33.cpp":42:13)
#loc56 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_char_ncpy_33.cpp":42:21)
#loc57 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_char_ncpy_33.cpp":42:27)
#loc58 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_char_ncpy_33.cpp":42:35)
#loc59 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_char_ncpy_33.cpp":42:39)
#loc60 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_char_ncpy_33.cpp":43:27)
#loc61 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_char_ncpy_33.cpp":43:13)
#loc62 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_char_ncpy_33.cpp":43:18)
#loc63 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_char_ncpy_33.cpp":43:22)
#loc64 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_char_ncpy_33.cpp":43:23)
#loc65 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_char_ncpy_33.cpp":44:23)
#loc66 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_char_ncpy_33.cpp":44:13)
#loc67 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_char_ncpy_33.cpp":45:13)
#loc68 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_char_ncpy_33.cpp":45:18)
#loc69 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_char_ncpy_33.cpp":55:1)
#loc70 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_char_ncpy_33.cpp":77:1)
#loc71 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_char_ncpy_33.cpp":65:9)
#loc72 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_char_ncpy_33.cpp":65:23)
#loc73 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_char_ncpy_33.cpp":67:13)
#loc74 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_char_ncpy_33.cpp":67:28)
#loc75 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_char_ncpy_33.cpp":57:5)
#loc76 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_char_ncpy_33.cpp":57:12)
#loc77 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_char_ncpy_33.cpp":58:5)
#loc78 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_char_ncpy_33.cpp":58:23)
#loc79 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_char_ncpy_33.cpp":59:12)
#loc80 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_char_ncpy_33.cpp":59:5)
#loc81 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_char_ncpy_33.cpp":61:20)
#loc82 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_char_ncpy_33.cpp":61:27)
#loc83 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_char_ncpy_33.cpp":61:31)
#loc84 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_char_ncpy_33.cpp":61:42)
#loc85 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_char_ncpy_33.cpp":61:43)
#loc86 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_char_ncpy_33.cpp":61:5)
#loc87 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_char_ncpy_33.cpp":62:5)
#loc88 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_char_ncpy_33.cpp":62:33)
#loc89 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_char_ncpy_33.cpp":62:9)
#loc90 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_char_ncpy_33.cpp":62:17)
#loc91 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_char_ncpy_33.cpp":62:23)
#loc92 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_char_ncpy_33.cpp":62:24)
#loc93 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_char_ncpy_33.cpp":62:30)
#loc94 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_char_ncpy_33.cpp":62:29)
#loc95 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_char_ncpy_33.cpp":63:15)
#loc96 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_char_ncpy_33.cpp":63:5)
#loc97 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_char_ncpy_33.cpp":63:10)
#loc98 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_char_ncpy_33.cpp":63:11)
#loc99 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_char_ncpy_33.cpp":64:5)
#loc100 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_char_ncpy_33.cpp":76:5)
#loc101 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_char_ncpy_33.cpp":66:9)
#loc102 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_char_ncpy_33.cpp":75:9)
#loc103 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_char_ncpy_33.cpp":68:20)
#loc104 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_char_ncpy_33.cpp":68:28)
#loc105 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_char_ncpy_33.cpp":68:33)
#loc106 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_char_ncpy_33.cpp":68:37)
#loc107 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_char_ncpy_33.cpp":68:13)
#loc108 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_char_ncpy_33.cpp":68:38)
#loc109 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_char_ncpy_33.cpp":69:29)
#loc110 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_char_ncpy_33.cpp":69:20)
#loc111 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_char_ncpy_33.cpp":69:24)
#loc112 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_char_ncpy_33.cpp":69:13)
#loc113 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_char_ncpy_33.cpp":71:13)
#loc114 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_char_ncpy_33.cpp":71:21)
#loc115 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_char_ncpy_33.cpp":71:27)
#loc116 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_char_ncpy_33.cpp":71:35)
#loc117 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_char_ncpy_33.cpp":71:39)
#loc118 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_char_ncpy_33.cpp":72:27)
#loc119 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_char_ncpy_33.cpp":72:13)
#loc120 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_char_ncpy_33.cpp":72:18)
#loc121 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_char_ncpy_33.cpp":72:22)
#loc122 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_char_ncpy_33.cpp":72:23)
#loc123 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_char_ncpy_33.cpp":73:23)
#loc124 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_char_ncpy_33.cpp":73:13)
#loc125 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_char_ncpy_33.cpp":74:13)
#loc126 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_char_ncpy_33.cpp":74:18)
#loc127 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_char_ncpy_33.cpp":79:1)
#loc128 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_char_ncpy_33.cpp":82:1)
#loc129 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_char_ncpy_33.cpp":81:5)
#loc130 = loc("/usr/include/stdlib.h":575:1)
#loc131 = loc("/usr/include/stdlib.h":575:41)
#loc132 = loc("/usr/include/time.h":76:1)
#loc133 = loc("/usr/include/time.h":76:38)
#loc134 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_char_ncpy_33.cpp":102:15)
#loc135 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_char_ncpy_33.cpp":104:15)
#loc136 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_char_ncpy_33.cpp":107:15)
#loc137 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_char_ncpy_33.cpp":109:15)
#loc138 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_char_ncpy_33.cpp":97:1)
#loc139 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_char_ncpy_33.cpp":112:1)
#loc144 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_char_ncpy_33.cpp":98:1)
#loc145 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_char_ncpy_33.cpp":100:27)
#loc146 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_char_ncpy_33.cpp":100:22)
#loc147 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_char_ncpy_33.cpp":100:5)
#loc148 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_char_ncpy_33.cpp":102:5)
#loc149 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_char_ncpy_33.cpp":103:5)
#loc150 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_char_ncpy_33.cpp":104:5)
#loc151 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_char_ncpy_33.cpp":107:5)
#loc152 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_char_ncpy_33.cpp":108:5)
#loc153 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_char_ncpy_33.cpp":109:5)
#loc154 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_char_ncpy_33.cpp":111:12)
#loc155 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_char_ncpy_33.cpp":111:5)
#loc156 = loc(fused[#loc1, #loc2])
#loc157 = loc(fused[#loc3, #loc4])
#loc158 = loc(fused[#loc5, #loc6])
#loc159 = loc(fused[#loc7, #loc8])
#loc160 = loc(fused[#loc9, #loc10])
#loc161 = loc(fused[#loc11, #loc12])
#loc162 = loc(fused[#loc13, #loc14])
#loc163 = loc(fused[#loc15, #loc16])
#loc164 = loc(fused[#loc17, #loc18])
#loc165 = loc(fused[#loc19, #loc20])
#loc166 = loc(fused[#loc22, #loc21])
#loc167 = loc(fused[#loc25, #loc26])
#loc168 = loc(fused[#loc24, #loc26])
#loc169 = loc(fused[#loc23, #loc27])
#loc170 = loc(fused[#loc28, #loc27])
#loc171 = loc(fused[#loc29, #loc30])
#loc172 = loc(fused[#loc31, #loc32])
#loc173 = loc(fused[#loc33, #loc30])
#loc174 = loc(fused[#loc38, #loc37])
#loc175 = loc(fused[#loc41, #loc42])
#loc176 = loc(fused[#loc43, #loc44])
#loc177 = loc(fused[#loc49, #loc50])
#loc178 = loc(fused[#loc54, #loc51])
#loc179 = loc(fused[#loc61, #loc60])
#loc180 = loc(fused[#loc69, #loc70])
#loc181 = loc(fused[#loc71, #loc72])
#loc182 = loc(fused[#loc73, #loc74])
#loc183 = loc(fused[#loc75, #loc76])
#loc184 = loc(fused[#loc77, #loc78])
#loc185 = loc(fused[#loc80, #loc79])
#loc186 = loc(fused[#loc83, #loc84])
#loc187 = loc(fused[#loc82, #loc84])
#loc188 = loc(fused[#loc81, #loc85])
#loc189 = loc(fused[#loc86, #loc85])
#loc190 = loc(fused[#loc87, #loc88])
#loc191 = loc(fused[#loc89, #loc90])
#loc192 = loc(fused[#loc91, #loc88])
#loc193 = loc(fused[#loc96, #loc95])
#loc194 = loc(fused[#loc99, #loc100])
#loc195 = loc(fused[#loc101, #loc102])
#loc196 = loc(fused[#loc107, #loc108])
#loc197 = loc(fused[#loc112, #loc109])
#loc198 = loc(fused[#loc119, #loc118])
#loc199 = loc(fused[#loc127, #loc128])
#loc200 = loc(fused[#loc130, #loc131])
#loc201 = loc(fused[#loc132, #loc133])
#loc202 = loc(fused[#loc138, #loc139])
#loc205 = loc(fused[#loc155, #loc154])
