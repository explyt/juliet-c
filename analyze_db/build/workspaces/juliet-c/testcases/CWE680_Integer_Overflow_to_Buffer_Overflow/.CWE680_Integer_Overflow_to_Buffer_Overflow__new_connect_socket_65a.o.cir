!s32i = !cir.int<s, 32>
!s64i = !cir.int<s, 64>
!s8i = !cir.int<s, 8>
!u16i = !cir.int<u, 16>
!u32i = !cir.int<u, 32>
!u64i = !cir.int<u, 64>
!u8i = !cir.int<u, 8>
!void = !cir.void
#false = #cir.bool<false> : !cir.bool
#fn_attr = #cir<extra({nothrow = #cir.nothrow})>
#fn_attr1 = #cir<extra({inline = #cir.inline<no>, optnone = #cir.optnone, uwtable = #cir.uwtable<async>})>
#true = #cir.bool<true> : !cir.bool
!ty_in_addr = !cir.record<struct "in_addr" {!u32i} #cir.record.decl.ast>
!ty_sockaddr = !cir.record<struct "sockaddr" {!u16i, !cir.array<!s8i x 14>} #cir.record.decl.ast>
!ty_sockaddr_in = !cir.record<struct "sockaddr_in" {!u16i, !u16i, !ty_in_addr, !cir.array<!u8i x 8>}>
module @"/workspaces/juliet-c/testcases/CWE680_Integer_Overflow_to_Buffer_Overflow/CWE680_Integer_Overflow_to_Buffer_Overflow__new_connect_socket_65a.cpp" attributes {cir.lang = #cir.lang<cxx>, cir.sob = #cir.signed_overflow_behavior<undefined>, cir.triple = "x86_64-unknown-linux-gnu", cir.type_size_info = #cir.type_size_info<char = 8, int = 32, size_t = 64>, cir.uwtable = #cir.uwtable<async>, dlti.dl_spec = #dlti.dl_spec<!llvm.ptr<270> = dense<32> : vector<4xi64>, !llvm.ptr<272> = dense<64> : vector<4xi64>, !llvm.ptr<271> = dense<32> : vector<4xi64>, f80 = dense<128> : vector<2xi64>, f128 = dense<128> : vector<2xi64>, i128 = dense<128> : vector<2xi64>, i64 = dense<64> : vector<2xi64>, i8 = dense<8> : vector<2xi64>, i1 = dense<8> : vector<2xi64>, !llvm.ptr = dense<64> : vector<4xi64>, f64 = dense<64> : vector<2xi64>, f16 = dense<16> : vector<2xi64>, i32 = dense<32> : vector<2xi64>, i16 = dense<16> : vector<2xi64>, "dlti.stack_alignment" = 128 : i64, "dlti.endianness" = "little", "dlti.mangling_mode" = "e">} {
  cir.func private @_ZN65CWE680_Integer_Overflow_to_Buffer_Overflow__new_connect_socket_657badSinkEi(!s32i) loc(#loc136)
  cir.func private @socket(!s32i, !s32i, !s32i) -> !s32i extra(#fn_attr) loc(#loc137)
  cir.func private @inet_addr(!cir.ptr<!s8i>) -> !u32i extra(#fn_attr) loc(#loc138)
  cir.global "private" constant cir_private dsolocal @".str" = #cir.const_array<"127.0.0.1\00" : !cir.array<!s8i x 10>> : !cir.array<!s8i x 10> {alignment = 1 : i64} loc(#loc7)
  cir.func private @htons(!u16i) -> !u16i extra(#fn_attr) loc(#loc139)
  cir.func private @connect(!s32i, !cir.ptr<!ty_sockaddr>, !u32i) -> !s32i loc(#loc140)
  cir.func private @recv(!s32i, !cir.ptr<!void>, !u64i, !s32i) -> !s64i loc(#loc141)
  cir.func private @atoi(!cir.ptr<!s8i>) -> !s32i extra(#fn_attr) loc(#loc142)
  cir.func private @close(!s32i) -> !s32i loc(#loc143)
  cir.func @_ZN65CWE680_Integer_Overflow_to_Buffer_Overflow__new_connect_socket_653badEv() extra(#fn_attr1) {
    %0 = cir.alloca !s32i, !cir.ptr<!s32i>, ["data"] {alignment = 4 : i64} loc(#loc145)
    %1 = cir.alloca !cir.ptr<!cir.func<(!s32i)>>, !cir.ptr<!cir.ptr<!cir.func<(!s32i)>>>, ["funcPtr", init] {alignment = 8 : i64} loc(#loc146)
    %2 = cir.get_global @_ZN65CWE680_Integer_Overflow_to_Buffer_Overflow__new_connect_socket_657badSinkEi : !cir.ptr<!cir.func<(!s32i)>> loc(#loc23)
    cir.store %2, %1 : !cir.ptr<!cir.func<(!s32i)>>, !cir.ptr<!cir.ptr<!cir.func<(!s32i)>>> loc(#loc146)
    %3 = cir.const #cir.int<1> : !s32i loc(#loc24)
    %4 = cir.unary(minus, %3) nsw : !s32i, !s32i loc(#loc25)
    cir.store %4, %0 : !s32i, !cir.ptr<!s32i> loc(#loc147)
    cir.scope {
      %7 = cir.alloca !s32i, !cir.ptr<!s32i>, ["recvResult"] {alignment = 4 : i64} loc(#loc149)
      %8 = cir.alloca !ty_sockaddr_in, !cir.ptr<!ty_sockaddr_in>, ["service"] {alignment = 4 : i64} loc(#loc150)
      %9 = cir.alloca !s32i, !cir.ptr<!s32i>, ["connectSocket", init] {alignment = 4 : i64} loc(#loc151)
      %10 = cir.alloca !cir.array<!s8i x 14>, !cir.ptr<!cir.array<!s8i x 14>>, ["inputBuffer"] {alignment = 1 : i64} loc(#loc152)
      %11 = cir.const #cir.int<1> : !s32i loc(#loc34)
      %12 = cir.unary(minus, %11) nsw : !s32i, !s32i loc(#loc34)
      cir.store %12, %9 : !s32i, !cir.ptr<!s32i> loc(#loc151)
      cir.scope {
        cir.do {
          cir.scope {
            %13 = cir.const #cir.int<2> : !s32i loc(#loc41)
            %14 = cir.const #cir.int<1> : !u32i loc(#loc42)
            %15 = cir.cast(integral, %14 : !u32i), !s32i loc(#loc42)
            %16 = cir.const #cir.int<6> : !u32i loc(#loc43)
            %17 = cir.cast(integral, %16 : !u32i), !s32i loc(#loc43)
            %18 = cir.call @socket(%13, %15, %17) : (!s32i, !s32i, !s32i) -> !s32i extra(#fn_attr) loc(#loc44)
            cir.store %18, %9 : !s32i, !cir.ptr<!s32i> loc(#loc155)
            cir.scope {
              %56 = cir.load %9 : !cir.ptr<!s32i>, !s32i loc(#loc49)
              %57 = cir.const #cir.int<1> : !s32i loc(#loc50)
              %58 = cir.unary(minus, %57) nsw : !s32i, !s32i loc(#loc50)
              %59 = cir.cmp(eq, %56, %58) : !s32i, !cir.bool loc(#loc157)
              cir.if %59 {
                cir.break loc(#loc52)
              } loc(#loc158)
            } loc(#loc156)
            %19 = cir.cast(bitcast, %8 : !cir.ptr<!ty_sockaddr_in>), !cir.ptr<!void> loc(#loc159)
            %20 = cir.const #cir.int<0> : !s32i loc(#loc55)
            %21 = cir.const #cir.int<16> : !u64i loc(#loc160)
            cir.libc.memset %21 bytes from %19 set to %20 : !cir.ptr<!void>, !s32i, !u64i loc(#loc161)
            %22 = cir.const #cir.int<2> : !s32i loc(#loc60)
            %23 = cir.cast(integral, %22 : !s32i), !u16i loc(#loc60)
            %24 = cir.get_member %8[0] {name = "sin_family"} : !cir.ptr<!ty_sockaddr_in> -> !cir.ptr<!u16i> loc(#loc61)
            cir.store %23, %24 : !u16i, !cir.ptr<!u16i> loc(#loc162)
            %25 = cir.get_global @".str" : !cir.ptr<!cir.array<!s8i x 10>> loc(#loc7)
            %26 = cir.cast(array_to_ptrdecay, %25 : !cir.ptr<!cir.array<!s8i x 10>>), !cir.ptr<!s8i> loc(#loc7)
            %27 = cir.call @inet_addr(%26) : (!cir.ptr<!s8i>) -> !u32i extra(#fn_attr) loc(#loc63)
            %28 = cir.get_member %8[2] {name = "sin_addr"} : !cir.ptr<!ty_sockaddr_in> -> !cir.ptr<!ty_in_addr> loc(#loc64)
            %29 = cir.get_member %28[0] {name = "s_addr"} : !cir.ptr<!ty_in_addr> -> !cir.ptr<!u32i> loc(#loc65)
            cir.store %27, %29 : !u32i, !cir.ptr<!u32i> loc(#loc163)
            %30 = cir.const #cir.int<27015> : !s32i loc(#loc68)
            %31 = cir.cast(integral, %30 : !s32i), !u16i loc(#loc68)
            %32 = cir.call @htons(%31) : (!u16i) -> !u16i side_effect(const) extra(#fn_attr) loc(#loc69)
            %33 = cir.get_member %8[1] {name = "sin_port"} : !cir.ptr<!ty_sockaddr_in> -> !cir.ptr<!u16i> loc(#loc70)
            cir.store %32, %33 : !u16i, !cir.ptr<!u16i> loc(#loc164)
            cir.scope {
              %56 = cir.load %9 : !cir.ptr<!s32i>, !s32i loc(#loc75)
              %57 = cir.cast(bitcast, %8 : !cir.ptr<!ty_sockaddr_in>), !cir.ptr<!ty_sockaddr> loc(#loc166)
              %58 = cir.const #cir.int<16> : !u64i loc(#loc167)
              %59 = cir.cast(integral, %58 : !u64i), !u32i loc(#loc167)
              %60 = cir.call @connect(%56, %57, %59) : (!s32i, !cir.ptr<!ty_sockaddr>, !u32i) -> !s32i loc(#loc80)
              %61 = cir.const #cir.int<1> : !s32i loc(#loc81)
              %62 = cir.unary(minus, %61) nsw : !s32i, !s32i loc(#loc81)
              %63 = cir.cmp(eq, %60, %62) : !s32i, !cir.bool loc(#loc168)
              cir.if %63 {
                cir.break loc(#loc83)
              } loc(#loc169)
            } loc(#loc165)
            %34 = cir.load %9 : !cir.ptr<!s32i>, !s32i loc(#loc84)
            %35 = cir.cast(array_to_ptrdecay, %10 : !cir.ptr<!cir.array<!s8i x 14>>), !cir.ptr<!s8i> loc(#loc85)
            %36 = cir.cast(bitcast, %35 : !cir.ptr<!s8i>), !cir.ptr<!void> loc(#loc85)
            %37 = cir.const #cir.int<3> : !s32i loc(#loc86)
            %38 = cir.cast(integral, %37 : !s32i), !u64i loc(#loc86)
            %39 = cir.const #cir.int<4> : !u64i loc(#loc86)
            %40 = cir.binop(mul, %38, %39) : !u64i loc(#loc86)
            %41 = cir.const #cir.int<2> : !s32i loc(#loc86)
            %42 = cir.cast(integral, %41 : !s32i), !u64i loc(#loc86)
            %43 = cir.binop(add, %40, %42) : !u64i loc(#loc86)
            %44 = cir.const #cir.int<1> : !s32i loc(#loc87)
            %45 = cir.cast(integral, %44 : !s32i), !u64i loc(#loc87)
            %46 = cir.binop(sub, %43, %45) : !u64i loc(#loc170)
            %47 = cir.const #cir.int<0> : !s32i loc(#loc88)
            %48 = cir.call @recv(%34, %36, %46, %47) : (!s32i, !cir.ptr<!void>, !u64i, !s32i) -> !s64i loc(#loc89)
            %49 = cir.cast(integral, %48 : !s64i), !s32i loc(#loc89)
            cir.store %49, %7 : !s32i, !cir.ptr<!s32i> loc(#loc171)
            cir.scope {
              %56 = cir.load %7 : !cir.ptr<!s32i>, !s32i loc(#loc94)
              %57 = cir.const #cir.int<1> : !s32i loc(#loc95)
              %58 = cir.unary(minus, %57) nsw : !s32i, !s32i loc(#loc95)
              %59 = cir.cmp(eq, %56, %58) : !s32i, !cir.bool loc(#loc173)
              %60 = cir.ternary(%59, true {
                %61 = cir.const #true loc(#loc96)
                cir.yield %61 : !cir.bool loc(#loc96)
              }, false {
                %61 = cir.load %7 : !cir.ptr<!s32i>, !s32i loc(#loc97)
                %62 = cir.const #cir.int<0> : !s32i loc(#loc98)
                %63 = cir.cmp(eq, %61, %62) : !s32i, !cir.bool loc(#loc174)
                %64 = cir.ternary(%63, true {
                  %65 = cir.const #true loc(#loc96)
                  cir.yield %65 : !cir.bool loc(#loc96)
                }, false {
                  %65 = cir.const #false loc(#loc96)
                  cir.yield %65 : !cir.bool loc(#loc96)
                }) : (!cir.bool) -> !cir.bool loc(#loc96)
                cir.yield %64 : !cir.bool loc(#loc96)
              }) : (!cir.bool) -> !cir.bool loc(#loc96)
              cir.if %60 {
                cir.break loc(#loc100)
              } loc(#loc175)
            } loc(#loc172)
            %50 = cir.const #cir.int<0> : !s8i loc(#loc101)
            %51 = cir.load %7 : !cir.ptr<!s32i>, !s32i loc(#loc102)
            %52 = cir.cast(array_to_ptrdecay, %10 : !cir.ptr<!cir.array<!s8i x 14>>), !cir.ptr<!s8i> loc(#loc103)
            %53 = cir.ptr_stride(%52 : !cir.ptr<!s8i>, %51 : !s32i), !cir.ptr<!s8i> loc(#loc103)
            cir.store %50, %53 : !s8i, !cir.ptr<!s8i> loc(#loc176)
            %54 = cir.cast(array_to_ptrdecay, %10 : !cir.ptr<!cir.array<!s8i x 14>>), !cir.ptr<!s8i> loc(#loc104)
            %55 = cir.call @atoi(%54) : (!cir.ptr<!s8i>) -> !s32i side_effect(pure) extra(#fn_attr) loc(#loc105)
            cir.store %55, %0 : !s32i, !cir.ptr<!s32i> loc(#loc177)
          } loc(#loc154)
          cir.yield loc(#loc38)
        } while {
          %13 = cir.const #cir.int<0> : !s32i loc(#loc108)
          %14 = cir.cast(int_to_bool, %13 : !s32i), !cir.bool loc(#loc108)
          cir.condition(%14) loc(#loc108)
        } loc(#loc153)
      } loc(#loc153)
      cir.scope {
        %13 = cir.load %9 : !cir.ptr<!s32i>, !s32i loc(#loc111)
        %14 = cir.const #cir.int<1> : !s32i loc(#loc112)
        %15 = cir.unary(minus, %14) nsw : !s32i, !s32i loc(#loc112)
        %16 = cir.cmp(ne, %13, %15) : !s32i, !cir.bool loc(#loc179)
        cir.if %16 {
          %17 = cir.load %9 : !cir.ptr<!s32i>, !s32i loc(#loc114)
          %18 = cir.call @close(%17) : (!s32i) -> !s32i loc(#loc115)
        } loc(#loc180)
      } loc(#loc178)
    } loc(#loc148)
    %5 = cir.load %1 : !cir.ptr<!cir.ptr<!cir.func<(!s32i)>>>, !cir.ptr<!cir.func<(!s32i)>> loc(#loc116)
    %6 = cir.load %0 : !cir.ptr<!s32i>, !s32i loc(#loc117)
    cir.call %5(%6) : (!cir.ptr<!cir.func<(!s32i)>>, !s32i) -> () loc(#loc116)
    cir.return loc(#loc19)
  } loc(#loc144)
  cir.func private @_ZN65CWE680_Integer_Overflow_to_Buffer_Overflow__new_connect_socket_6511goodG2BSinkEi(!s32i) loc(#loc181)
  cir.func internal private @_ZN65CWE680_Integer_Overflow_to_Buffer_Overflow__new_connect_socket_65L7goodG2BEv() extra(#fn_attr1) {
    %0 = cir.alloca !s32i, !cir.ptr<!s32i>, ["data"] {alignment = 4 : i64} loc(#loc183)
    %1 = cir.alloca !cir.ptr<!cir.func<(!s32i)>>, !cir.ptr<!cir.ptr<!cir.func<(!s32i)>>>, ["funcPtr", init] {alignment = 8 : i64} loc(#loc184)
    %2 = cir.get_global @_ZN65CWE680_Integer_Overflow_to_Buffer_Overflow__new_connect_socket_6511goodG2BSinkEi : !cir.ptr<!cir.func<(!s32i)>> loc(#loc125)
    cir.store %2, %1 : !cir.ptr<!cir.func<(!s32i)>>, !cir.ptr<!cir.ptr<!cir.func<(!s32i)>>> loc(#loc184)
    %3 = cir.const #cir.int<1> : !s32i loc(#loc126)
    %4 = cir.unary(minus, %3) nsw : !s32i, !s32i loc(#loc127)
    cir.store %4, %0 : !s32i, !cir.ptr<!s32i> loc(#loc185)
    %5 = cir.const #cir.int<20> : !s32i loc(#loc129)
    cir.store %5, %0 : !s32i, !cir.ptr<!s32i> loc(#loc186)
    %6 = cir.load %1 : !cir.ptr<!cir.ptr<!cir.func<(!s32i)>>>, !cir.ptr<!cir.func<(!s32i)>> loc(#loc131)
    %7 = cir.load %0 : !cir.ptr<!s32i>, !s32i loc(#loc132)
    cir.call %6(%7) : (!cir.ptr<!cir.func<(!s32i)>>, !s32i) -> () loc(#loc131)
    cir.return loc(#loc121)
  } loc(#loc182)
  cir.func @_ZN65CWE680_Integer_Overflow_to_Buffer_Overflow__new_connect_socket_654goodEv() extra(#fn_attr1) {
    cir.call @_ZN65CWE680_Integer_Overflow_to_Buffer_Overflow__new_connect_socket_65L7goodG2BEv() : () -> () loc(#loc135)
    cir.return loc(#loc134)
  } loc(#loc187)
} loc(#loc)
#loc = loc("/workspaces/juliet-c/testcases/CWE680_Integer_Overflow_to_Buffer_Overflow/CWE680_Integer_Overflow_to_Buffer_Overflow__new_connect_socket_65a.cpp":0:0)
#loc1 = loc("CWE680_Integer_Overflow_to_Buffer_Overflow__new_connect_socket_65a.cpp":47:1)
#loc2 = loc("CWE680_Integer_Overflow_to_Buffer_Overflow__new_connect_socket_65a.cpp":47:22)
#loc3 = loc("/usr/include/x86_64-linux-gnu/sys/socket.h":102:1)
#loc4 = loc("/usr/include/x86_64-linux-gnu/sys/socket.h":102:62)
#loc5 = loc("/usr/include/arpa/inet.h":34:1)
#loc6 = loc("/usr/include/arpa/inet.h":34:47)
#loc7 = loc("CWE680_Integer_Overflow_to_Buffer_Overflow__new_connect_socket_65a.cpp":82:49)
#loc8 = loc("/usr/include/netinet/in.h":402:1)
#loc9 = loc("/usr/include/netinet/in.h":403:40)
#loc10 = loc("/usr/include/x86_64-linux-gnu/sys/socket.h":126:1)
#loc11 = loc("/usr/include/x86_64-linux-gnu/sys/socket.h":126:75)
#loc12 = loc("/usr/include/x86_64-linux-gnu/sys/socket.h":145:1)
#loc13 = loc("/usr/include/x86_64-linux-gnu/sys/socket.h":145:68)
#loc14 = loc("/usr/include/stdlib.h":105:1)
#loc15 = loc("/usr/include/stdlib.h":106:33)
#loc16 = loc("/usr/include/unistd.h":358:1)
#loc17 = loc("/usr/include/unistd.h":358:27)
#loc18 = loc("CWE680_Integer_Overflow_to_Buffer_Overflow__new_connect_socket_65a.cpp":49:1)
#loc19 = loc("CWE680_Integer_Overflow_to_Buffer_Overflow__new_connect_socket_65a.cpp":114:1)
#loc20 = loc("CWE680_Integer_Overflow_to_Buffer_Overflow__new_connect_socket_65a.cpp":51:5)
#loc21 = loc("CWE680_Integer_Overflow_to_Buffer_Overflow__new_connect_socket_65a.cpp":51:9)
#loc22 = loc("CWE680_Integer_Overflow_to_Buffer_Overflow__new_connect_socket_65a.cpp":53:5)
#loc23 = loc("CWE680_Integer_Overflow_to_Buffer_Overflow__new_connect_socket_65a.cpp":53:29)
#loc24 = loc("CWE680_Integer_Overflow_to_Buffer_Overflow__new_connect_socket_65a.cpp":55:13)
#loc25 = loc("CWE680_Integer_Overflow_to_Buffer_Overflow__new_connect_socket_65a.cpp":55:12)
#loc26 = loc("CWE680_Integer_Overflow_to_Buffer_Overflow__new_connect_socket_65a.cpp":55:5)
#loc27 = loc("CWE680_Integer_Overflow_to_Buffer_Overflow__new_connect_socket_65a.cpp":56:5)
#loc28 = loc("CWE680_Integer_Overflow_to_Buffer_Overflow__new_connect_socket_65a.cpp":111:5)
#loc29 = loc("CWE680_Integer_Overflow_to_Buffer_Overflow__new_connect_socket_65a.cpp":61:9)
#loc30 = loc("CWE680_Integer_Overflow_to_Buffer_Overflow__new_connect_socket_65a.cpp":61:13)
#loc31 = loc("CWE680_Integer_Overflow_to_Buffer_Overflow__new_connect_socket_65a.cpp":62:9)
#loc32 = loc("CWE680_Integer_Overflow_to_Buffer_Overflow__new_connect_socket_65a.cpp":62:28)
#loc33 = loc("CWE680_Integer_Overflow_to_Buffer_Overflow__new_connect_socket_65a.cpp":63:9)
#loc34 = loc("CWE680_Integer_Overflow_to_Buffer_Overflow__new_connect_socket_65a.cpp":63:32)
#loc35 = loc("CWE680_Integer_Overflow_to_Buffer_Overflow__new_connect_socket_65a.cpp":64:9)
#loc36 = loc("CWE680_Integer_Overflow_to_Buffer_Overflow__new_connect_socket_65a.cpp":64:41)
#loc37 = loc("CWE680_Integer_Overflow_to_Buffer_Overflow__new_connect_socket_65a.cpp":65:9)
#loc38 = loc("CWE680_Integer_Overflow_to_Buffer_Overflow__new_connect_socket_65a.cpp":100:17)
#loc39 = loc("CWE680_Integer_Overflow_to_Buffer_Overflow__new_connect_socket_65a.cpp":66:9)
#loc40 = loc("CWE680_Integer_Overflow_to_Buffer_Overflow__new_connect_socket_65a.cpp":99:9)
#loc41 = loc("CWE680_Integer_Overflow_to_Buffer_Overflow__new_connect_socket_65a.cpp":75:36)
#loc42 = loc("CWE680_Integer_Overflow_to_Buffer_Overflow__new_connect_socket_65a.cpp":75:45)
#loc43 = loc("CWE680_Integer_Overflow_to_Buffer_Overflow__new_connect_socket_65a.cpp":75:58)
#loc44 = loc("CWE680_Integer_Overflow_to_Buffer_Overflow__new_connect_socket_65a.cpp":75:29)
#loc45 = loc("CWE680_Integer_Overflow_to_Buffer_Overflow__new_connect_socket_65a.cpp":75:13)
#loc46 = loc("CWE680_Integer_Overflow_to_Buffer_Overflow__new_connect_socket_65a.cpp":75:69)
#loc47 = loc("CWE680_Integer_Overflow_to_Buffer_Overflow__new_connect_socket_65a.cpp":76:13)
#loc48 = loc("CWE680_Integer_Overflow_to_Buffer_Overflow__new_connect_socket_65a.cpp":79:13)
#loc49 = loc("CWE680_Integer_Overflow_to_Buffer_Overflow__new_connect_socket_65a.cpp":76:17)
#loc50 = loc("CWE680_Integer_Overflow_to_Buffer_Overflow__new_connect_socket_65a.cpp":76:34)
#loc51 = loc("CWE680_Integer_Overflow_to_Buffer_Overflow__new_connect_socket_65a.cpp":77:13)
#loc52 = loc("CWE680_Integer_Overflow_to_Buffer_Overflow__new_connect_socket_65a.cpp":78:17)
#loc53 = loc("CWE680_Integer_Overflow_to_Buffer_Overflow__new_connect_socket_65a.cpp":80:20)
#loc54 = loc("CWE680_Integer_Overflow_to_Buffer_Overflow__new_connect_socket_65a.cpp":80:21)
#loc55 = loc("CWE680_Integer_Overflow_to_Buffer_Overflow__new_connect_socket_65a.cpp":80:30)
#loc56 = loc("CWE680_Integer_Overflow_to_Buffer_Overflow__new_connect_socket_65a.cpp":80:33)
#loc57 = loc("CWE680_Integer_Overflow_to_Buffer_Overflow__new_connect_socket_65a.cpp":80:47)
#loc58 = loc("CWE680_Integer_Overflow_to_Buffer_Overflow__new_connect_socket_65a.cpp":80:13)
#loc59 = loc("CWE680_Integer_Overflow_to_Buffer_Overflow__new_connect_socket_65a.cpp":80:48)
#loc60 = loc("CWE680_Integer_Overflow_to_Buffer_Overflow__new_connect_socket_65a.cpp":81:34)
#loc61 = loc("/usr/include/netinet/in.h":249:5)
#loc62 = loc("CWE680_Integer_Overflow_to_Buffer_Overflow__new_connect_socket_65a.cpp":81:13)
#loc63 = loc("CWE680_Integer_Overflow_to_Buffer_Overflow__new_connect_socket_65a.cpp":82:39)
#loc64 = loc("/usr/include/netinet/in.h":251:20)
#loc65 = loc("/usr/include/netinet/in.h":33:15)
#loc66 = loc("CWE680_Integer_Overflow_to_Buffer_Overflow__new_connect_socket_65a.cpp":82:13)
#loc67 = loc("CWE680_Integer_Overflow_to_Buffer_Overflow__new_connect_socket_65a.cpp":82:59)
#loc68 = loc("CWE680_Integer_Overflow_to_Buffer_Overflow__new_connect_socket_65a.cpp":83:38)
#loc69 = loc("CWE680_Integer_Overflow_to_Buffer_Overflow__new_connect_socket_65a.cpp":83:32)
#loc70 = loc("/usr/include/netinet/in.h":250:15)
#loc71 = loc("CWE680_Integer_Overflow_to_Buffer_Overflow__new_connect_socket_65a.cpp":83:13)
#loc72 = loc("CWE680_Integer_Overflow_to_Buffer_Overflow__new_connect_socket_65a.cpp":83:46)
#loc73 = loc("CWE680_Integer_Overflow_to_Buffer_Overflow__new_connect_socket_65a.cpp":84:13)
#loc74 = loc("CWE680_Integer_Overflow_to_Buffer_Overflow__new_connect_socket_65a.cpp":87:13)
#loc75 = loc("CWE680_Integer_Overflow_to_Buffer_Overflow__new_connect_socket_65a.cpp":84:25)
#loc76 = loc("CWE680_Integer_Overflow_to_Buffer_Overflow__new_connect_socket_65a.cpp":84:58)
#loc77 = loc("CWE680_Integer_Overflow_to_Buffer_Overflow__new_connect_socket_65a.cpp":84:59)
#loc78 = loc("CWE680_Integer_Overflow_to_Buffer_Overflow__new_connect_socket_65a.cpp":84:68)
#loc79 = loc("CWE680_Integer_Overflow_to_Buffer_Overflow__new_connect_socket_65a.cpp":84:82)
#loc80 = loc("CWE680_Integer_Overflow_to_Buffer_Overflow__new_connect_socket_65a.cpp":84:17)
#loc81 = loc("CWE680_Integer_Overflow_to_Buffer_Overflow__new_connect_socket_65a.cpp":84:88)
#loc82 = loc("CWE680_Integer_Overflow_to_Buffer_Overflow__new_connect_socket_65a.cpp":85:13)
#loc83 = loc("CWE680_Integer_Overflow_to_Buffer_Overflow__new_connect_socket_65a.cpp":86:17)
#loc84 = loc("CWE680_Integer_Overflow_to_Buffer_Overflow__new_connect_socket_65a.cpp":90:31)
#loc85 = loc("CWE680_Integer_Overflow_to_Buffer_Overflow__new_connect_socket_65a.cpp":90:46)
#loc86 = loc("CWE680_Integer_Overflow_to_Buffer_Overflow__new_connect_socket_65a.cpp":90:59)
#loc87 = loc("CWE680_Integer_Overflow_to_Buffer_Overflow__new_connect_socket_65a.cpp":90:77)
#loc88 = loc("CWE680_Integer_Overflow_to_Buffer_Overflow__new_connect_socket_65a.cpp":90:80)
#loc89 = loc("CWE680_Integer_Overflow_to_Buffer_Overflow__new_connect_socket_65a.cpp":90:26)
#loc90 = loc("CWE680_Integer_Overflow_to_Buffer_Overflow__new_connect_socket_65a.cpp":90:13)
#loc91 = loc("CWE680_Integer_Overflow_to_Buffer_Overflow__new_connect_socket_65a.cpp":90:81)
#loc92 = loc("CWE680_Integer_Overflow_to_Buffer_Overflow__new_connect_socket_65a.cpp":91:13)
#loc93 = loc("CWE680_Integer_Overflow_to_Buffer_Overflow__new_connect_socket_65a.cpp":94:13)
#loc94 = loc("CWE680_Integer_Overflow_to_Buffer_Overflow__new_connect_socket_65a.cpp":91:17)
#loc95 = loc("CWE680_Integer_Overflow_to_Buffer_Overflow__new_connect_socket_65a.cpp":91:31)
#loc96 = loc("CWE680_Integer_Overflow_to_Buffer_Overflow__new_connect_socket_65a.cpp":91:44)
#loc97 = loc("CWE680_Integer_Overflow_to_Buffer_Overflow__new_connect_socket_65a.cpp":91:47)
#loc98 = loc("CWE680_Integer_Overflow_to_Buffer_Overflow__new_connect_socket_65a.cpp":91:61)
#loc99 = loc("CWE680_Integer_Overflow_to_Buffer_Overflow__new_connect_socket_65a.cpp":92:13)
#loc100 = loc("CWE680_Integer_Overflow_to_Buffer_Overflow__new_connect_socket_65a.cpp":93:17)
#loc101 = loc("CWE680_Integer_Overflow_to_Buffer_Overflow__new_connect_socket_65a.cpp":96:39)
#loc102 = loc("CWE680_Integer_Overflow_to_Buffer_Overflow__new_connect_socket_65a.cpp":96:25)
#loc103 = loc("CWE680_Integer_Overflow_to_Buffer_Overflow__new_connect_socket_65a.cpp":96:13)
#loc104 = loc("CWE680_Integer_Overflow_to_Buffer_Overflow__new_connect_socket_65a.cpp":98:25)
#loc105 = loc("CWE680_Integer_Overflow_to_Buffer_Overflow__new_connect_socket_65a.cpp":98:20)
#loc106 = loc("CWE680_Integer_Overflow_to_Buffer_Overflow__new_connect_socket_65a.cpp":98:13)
#loc107 = loc("CWE680_Integer_Overflow_to_Buffer_Overflow__new_connect_socket_65a.cpp":98:36)
#loc108 = loc("CWE680_Integer_Overflow_to_Buffer_Overflow__new_connect_socket_65a.cpp":100:16)
#loc109 = loc("CWE680_Integer_Overflow_to_Buffer_Overflow__new_connect_socket_65a.cpp":101:9)
#loc110 = loc("CWE680_Integer_Overflow_to_Buffer_Overflow__new_connect_socket_65a.cpp":104:9)
#loc111 = loc("CWE680_Integer_Overflow_to_Buffer_Overflow__new_connect_socket_65a.cpp":101:13)
#loc112 = loc("CWE680_Integer_Overflow_to_Buffer_Overflow__new_connect_socket_65a.cpp":101:30)
#loc113 = loc("CWE680_Integer_Overflow_to_Buffer_Overflow__new_connect_socket_65a.cpp":102:9)
#loc114 = loc("CWE680_Integer_Overflow_to_Buffer_Overflow__new_connect_socket_65a.cpp":103:26)
#loc115 = loc("CWE680_Integer_Overflow_to_Buffer_Overflow__new_connect_socket_65a.cpp":103:13)
#loc116 = loc("CWE680_Integer_Overflow_to_Buffer_Overflow__new_connect_socket_65a.cpp":113:5)
#loc117 = loc("CWE680_Integer_Overflow_to_Buffer_Overflow__new_connect_socket_65a.cpp":113:13)
#loc118 = loc("CWE680_Integer_Overflow_to_Buffer_Overflow__new_connect_socket_65a.cpp":121:1)
#loc119 = loc("CWE680_Integer_Overflow_to_Buffer_Overflow__new_connect_socket_65a.cpp":121:26)
#loc120 = loc("CWE680_Integer_Overflow_to_Buffer_Overflow__new_connect_socket_65a.cpp":123:1)
#loc121 = loc("CWE680_Integer_Overflow_to_Buffer_Overflow__new_connect_socket_65a.cpp":132:1)
#loc122 = loc("CWE680_Integer_Overflow_to_Buffer_Overflow__new_connect_socket_65a.cpp":125:5)
#loc123 = loc("CWE680_Integer_Overflow_to_Buffer_Overflow__new_connect_socket_65a.cpp":125:9)
#loc124 = loc("CWE680_Integer_Overflow_to_Buffer_Overflow__new_connect_socket_65a.cpp":126:5)
#loc125 = loc("CWE680_Integer_Overflow_to_Buffer_Overflow__new_connect_socket_65a.cpp":126:29)
#loc126 = loc("CWE680_Integer_Overflow_to_Buffer_Overflow__new_connect_socket_65a.cpp":128:13)
#loc127 = loc("CWE680_Integer_Overflow_to_Buffer_Overflow__new_connect_socket_65a.cpp":128:12)
#loc128 = loc("CWE680_Integer_Overflow_to_Buffer_Overflow__new_connect_socket_65a.cpp":128:5)
#loc129 = loc("CWE680_Integer_Overflow_to_Buffer_Overflow__new_connect_socket_65a.cpp":130:12)
#loc130 = loc("CWE680_Integer_Overflow_to_Buffer_Overflow__new_connect_socket_65a.cpp":130:5)
#loc131 = loc("CWE680_Integer_Overflow_to_Buffer_Overflow__new_connect_socket_65a.cpp":131:5)
#loc132 = loc("CWE680_Integer_Overflow_to_Buffer_Overflow__new_connect_socket_65a.cpp":131:13)
#loc133 = loc("CWE680_Integer_Overflow_to_Buffer_Overflow__new_connect_socket_65a.cpp":134:1)
#loc134 = loc("CWE680_Integer_Overflow_to_Buffer_Overflow__new_connect_socket_65a.cpp":137:1)
#loc135 = loc("CWE680_Integer_Overflow_to_Buffer_Overflow__new_connect_socket_65a.cpp":136:5)
#loc136 = loc(fused[#loc1, #loc2])
#loc137 = loc(fused[#loc3, #loc4])
#loc138 = loc(fused[#loc5, #loc6])
#loc139 = loc(fused[#loc8, #loc9])
#loc140 = loc(fused[#loc10, #loc11])
#loc141 = loc(fused[#loc12, #loc13])
#loc142 = loc(fused[#loc14, #loc15])
#loc143 = loc(fused[#loc16, #loc17])
#loc144 = loc(fused[#loc18, #loc19])
#loc145 = loc(fused[#loc20, #loc21])
#loc146 = loc(fused[#loc22, #loc23])
#loc147 = loc(fused[#loc26, #loc24])
#loc148 = loc(fused[#loc27, #loc28])
#loc149 = loc(fused[#loc29, #loc30])
#loc150 = loc(fused[#loc31, #loc32])
#loc151 = loc(fused[#loc33, #loc34])
#loc152 = loc(fused[#loc35, #loc36])
#loc153 = loc(fused[#loc37, #loc38])
#loc154 = loc(fused[#loc39, #loc40])
#loc155 = loc(fused[#loc45, #loc46])
#loc156 = loc(fused[#loc47, #loc48])
#loc157 = loc(fused[#loc49, #loc50])
#loc158 = loc(fused[#loc51, #loc48])
#loc159 = loc(fused[#loc53, #loc54])
#loc160 = loc(fused[#loc56, #loc57])
#loc161 = loc(fused[#loc58, #loc59])
#loc162 = loc(fused[#loc62, #loc60])
#loc163 = loc(fused[#loc66, #loc67])
#loc164 = loc(fused[#loc71, #loc72])
#loc165 = loc(fused[#loc73, #loc74])
#loc166 = loc(fused[#loc76, #loc77])
#loc167 = loc(fused[#loc78, #loc79])
#loc168 = loc(fused[#loc80, #loc81])
#loc169 = loc(fused[#loc82, #loc74])
#loc170 = loc(fused[#loc86, #loc87])
#loc171 = loc(fused[#loc90, #loc91])
#loc172 = loc(fused[#loc92, #loc93])
#loc173 = loc(fused[#loc94, #loc95])
#loc174 = loc(fused[#loc97, #loc98])
#loc175 = loc(fused[#loc99, #loc93])
#loc176 = loc(fused[#loc103, #loc101])
#loc177 = loc(fused[#loc106, #loc107])
#loc178 = loc(fused[#loc109, #loc110])
#loc179 = loc(fused[#loc111, #loc112])
#loc180 = loc(fused[#loc113, #loc110])
#loc181 = loc(fused[#loc118, #loc119])
#loc182 = loc(fused[#loc120, #loc121])
#loc183 = loc(fused[#loc122, #loc123])
#loc184 = loc(fused[#loc124, #loc125])
#loc185 = loc(fused[#loc128, #loc126])
#loc186 = loc(fused[#loc130, #loc129])
#loc187 = loc(fused[#loc133, #loc134])
