!s32i = !cir.int<s, 32>
!s64i = !cir.int<s, 64>
!s8i = !cir.int<s, 8>
!u32i = !cir.int<u, 32>
!u64i = !cir.int<u, 64>
!void = !cir.void
#fn_attr = #cir<extra({nothrow = #cir.nothrow})>
#fn_attr1 = #cir<extra({inline = #cir.inline<no>, nothrow = #cir.nothrow, optnone = #cir.optnone})>
#fn_attr2 = #cir<extra({inline = #cir.inline<no>, optnone = #cir.optnone})>
#loc5 = loc("../../../testcasesupport/std_testcase.h":61:7)
#loc12 = loc("CWE122_Heap_Based_Buffer_Overflow__placement_new_41.cpp":25:21)
#loc13 = loc("CWE122_Heap_Based_Buffer_Overflow__placement_new_41.cpp":25:28)
#loc68 = loc("CWE122_Heap_Based_Buffer_Overflow__placement_new_41.cpp":60:25)
#loc69 = loc("CWE122_Heap_Based_Buffer_Overflow__placement_new_41.cpp":60:32)
#loc120 = loc("../../../testcasesupport/std_testcase.h":68:7)
#loc123 = loc("CWE122_Heap_Based_Buffer_Overflow__placement_new_41.cpp":91:25)
#loc124 = loc("CWE122_Heap_Based_Buffer_Overflow__placement_new_41.cpp":91:32)
#loc190 = loc("CWE122_Heap_Based_Buffer_Overflow__placement_new_41.cpp":138:10)
#loc191 = loc("CWE122_Heap_Based_Buffer_Overflow__placement_new_41.cpp":138:14)
#loc192 = loc("CWE122_Heap_Based_Buffer_Overflow__placement_new_41.cpp":138:20)
#loc193 = loc("CWE122_Heap_Based_Buffer_Overflow__placement_new_41.cpp":138:32)
!ty_OneIntClass = !cir.struct<class "OneIntClass" {!s32i} #cir.record.decl.ast>
!ty_TwoIntsClass = !cir.struct<class "TwoIntsClass" {!s32i, !s32i} #cir.record.decl.ast>
#loc211 = loc(fused[#loc12, #loc13])
#loc233 = loc(fused[#loc68, #loc69])
#loc255 = loc(fused[#loc123, #loc124])
#loc280 = loc(fused[#loc190, #loc191])
#loc281 = loc(fused[#loc192, #loc193])
module @"/home/ladisgin/git_proj/juliet-c/testcases/CWE122_Heap_Based_Buffer_Overflow/s11/CWE122_Heap_Based_Buffer_Overflow__placement_new_41.cpp" attributes {cir.lang = #cir.lang<cxx>, cir.sob = #cir.signed_overflow_behavior<undefined>, cir.triple = "x86_64-unknown-linux-gnu", dlti.dl_spec = #dlti.dl_spec<f80 = dense<128> : vector<2xi64>, !llvm.ptr = dense<64> : vector<4xi64>, !llvm.ptr<272> = dense<64> : vector<4xi64>, !llvm.ptr<271> = dense<32> : vector<4xi64>, i128 = dense<128> : vector<2xi64>, i64 = dense<64> : vector<2xi64>, f16 = dense<16> : vector<2xi64>, i32 = dense<32> : vector<2xi64>, f128 = dense<128> : vector<2xi64>, !llvm.ptr<270> = dense<32> : vector<4xi64>, i8 = dense<8> : vector<2xi64>, f64 = dense<64> : vector<2xi64>, i1 = dense<8> : vector<2xi64>, i16 = dense<16> : vector<2xi64>, "dlti.stack_alignment" = 128 : i64, "dlti.endianness" = "little">} {
  cir.func private @malloc(!u64i) -> !cir.ptr<!void> extra(#fn_attr) loc(#loc206)
  cir.func private @exit(!s32i) extra(#fn_attr) loc(#loc207)
  cir.func linkonce_odr @_ZN12TwoIntsClassC2Ev(%arg0: !cir.ptr<!ty_TwoIntsClass> loc("../../../testcasesupport/std_testcase.h":61:7)) extra(#fn_attr1) {
    %0 = cir.alloca !cir.ptr<!ty_TwoIntsClass>, !cir.ptr<!cir.ptr<!ty_TwoIntsClass>>, ["this", init] {alignment = 8 : i64} loc(#loc5)
    cir.store %arg0, %0 : !cir.ptr<!ty_TwoIntsClass>, !cir.ptr<!cir.ptr<!ty_TwoIntsClass>> loc(#loc5)
    %1 = cir.load %0 : !cir.ptr<!cir.ptr<!ty_TwoIntsClass>>, !cir.ptr<!ty_TwoIntsClass> loc(#loc5)
    cir.return loc(#loc5)
  } loc(#loc5)
  cir.func private @printIntLine(!s32i) loc(#loc208)
  cir.func private @free(!cir.ptr<!void>) extra(#fn_attr) loc(#loc209)
  cir.func internal private @_ZN51CWE122_Heap_Based_Buffer_Overflow__placement_new_41L7badSinkEPc(%arg0: !cir.ptr<!s8i> loc(fused[#loc12, #loc13])) extra(#fn_attr2) {
    %0 = cir.alloca !cir.ptr<!ty_TwoIntsClass>, !cir.ptr<!cir.ptr<!ty_TwoIntsClass>>, ["classTwo", init] {alignment = 8 : i64} loc(#loc212)
    %1 = cir.alloca !cir.ptr<!s8i>, !cir.ptr<!cir.ptr<!s8i>>, ["data", init] {alignment = 8 : i64} loc(#loc211)
    cir.store %arg0, %1 : !cir.ptr<!s8i>, !cir.ptr<!cir.ptr<!s8i>> loc(#loc16)
    cir.br ^bb1 loc(#loc213)
  ^bb1:  // pred: ^bb0
    %2 = cir.const #cir.int<8> : !u64i loc(#loc214)
    %3 = cir.load %1 : !cir.ptr<!cir.ptr<!s8i>>, !cir.ptr<!s8i> loc(#loc20)
    %4 = cir.cast(bitcast, %3 : !cir.ptr<!s8i>), !cir.ptr<!void> loc(#loc20)
    %5 = cir.cast(bitcast, %4 : !cir.ptr<!void>), !cir.ptr<!ty_TwoIntsClass> loc(#loc214)
    cir.call @_ZN12TwoIntsClassC2Ev(%5) : (!cir.ptr<!ty_TwoIntsClass>) -> () extra(#fn_attr) loc(#loc15)
    cir.store %5, %0 : !cir.ptr<!ty_TwoIntsClass>, !cir.ptr<!cir.ptr<!ty_TwoIntsClass>> loc(#loc212)
    %6 = cir.const #cir.int<5> : !s32i loc(#loc21)
    %7 = cir.load %0 : !cir.ptr<!cir.ptr<!ty_TwoIntsClass>>, !cir.ptr<!ty_TwoIntsClass> loc(#loc22)
    %8 = cir.get_member %7[0] {name = "intOne"} : !cir.ptr<!ty_TwoIntsClass> -> !cir.ptr<!s32i> loc(#loc23)
    cir.store %6, %8 : !s32i, !cir.ptr<!s32i> loc(#loc215)
    %9 = cir.const #cir.int<10> : !s32i loc(#loc24)
    %10 = cir.load %0 : !cir.ptr<!cir.ptr<!ty_TwoIntsClass>>, !cir.ptr<!ty_TwoIntsClass> loc(#loc25)
    %11 = cir.get_member %10[1] {name = "intTwo"} : !cir.ptr<!ty_TwoIntsClass> -> !cir.ptr<!s32i> loc(#loc26)
    cir.store %9, %11 : !s32i, !cir.ptr<!s32i> loc(#loc216)
    %12 = cir.load %0 : !cir.ptr<!cir.ptr<!ty_TwoIntsClass>>, !cir.ptr<!ty_TwoIntsClass> loc(#loc27)
    %13 = cir.get_member %12[0] {name = "intOne"} : !cir.ptr<!ty_TwoIntsClass> -> !cir.ptr<!s32i> loc(#loc23)
    %14 = cir.load %13 : !cir.ptr<!s32i>, !s32i loc(#loc28)
    cir.call @printIntLine(%14) : (!s32i) -> () loc(#loc29)
    %15 = cir.get_global @free : !cir.ptr<!cir.func<!void (!cir.ptr<!void>)>> loc(#loc30)
    %16 = cir.load %1 : !cir.ptr<!cir.ptr<!s8i>>, !cir.ptr<!s8i> loc(#loc31)
    %17 = cir.cast(bitcast, %16 : !cir.ptr<!s8i>), !cir.ptr<!void> loc(#loc31)
    cir.call @free(%17) : (!cir.ptr<!void>) -> () extra(#fn_attr) loc(#loc30)
    cir.br ^bb2 loc(#loc18)
  ^bb2:  // pred: ^bb1
    cir.return loc(#loc11)
  } loc(#loc210)
  cir.func @_ZN51CWE122_Heap_Based_Buffer_Overflow__placement_new_413badEv() extra(#fn_attr2) {
    %0 = cir.alloca !cir.ptr<!s8i>, !cir.ptr<!cir.ptr<!s8i>>, ["data"] {alignment = 8 : i64} loc(#loc218)
    %1 = cir.alloca !cir.ptr<!s8i>, !cir.ptr<!cir.ptr<!s8i>>, ["dataBadBuffer", init] {alignment = 8 : i64} loc(#loc219)
    %2 = cir.alloca !cir.ptr<!s8i>, !cir.ptr<!cir.ptr<!s8i>>, ["dataGoodBuffer", init] {alignment = 8 : i64} loc(#loc220)
    %3 = cir.get_global @malloc : !cir.ptr<!cir.func<!cir.ptr<!void> (!u64i)>> loc(#loc40)
    %4 = cir.const #cir.int<4> : !u64i loc(#loc221)
    %5 = cir.call @malloc(%4) : (!u64i) -> !cir.ptr<!void> extra(#fn_attr) loc(#loc40)
    %6 = cir.cast(bitcast, %5 : !cir.ptr<!void>), !cir.ptr<!s8i> loc(#loc222)
    cir.store %6, %1 : !cir.ptr<!s8i>, !cir.ptr<!cir.ptr<!s8i>> loc(#loc219)
    cir.br ^bb1 loc(#loc223)
  ^bb1:  // pred: ^bb0
    %7 = cir.load %1 : !cir.ptr<!cir.ptr<!s8i>>, !cir.ptr<!s8i> loc(#loc45)
    %8 = cir.const #cir.ptr<null> : !cir.ptr<!s8i> loc(#loc46)
    %9 = cir.cmp(eq, %7, %8) : !cir.ptr<!s8i>, !cir.bool loc(#loc224)
    cir.brcond %9 ^bb2, ^bb3 loc(#loc225)
  ^bb2:  // pred: ^bb1
    %10 = cir.get_global @exit : !cir.ptr<!cir.func<!void (!s32i)>> loc(#loc48)
    %11 = cir.const #cir.int<1> : !s32i loc(#loc49)
    %12 = cir.unary(minus, %11) : !s32i, !s32i loc(#loc50)
    cir.call @exit(%12) : (!s32i) -> () extra(#fn_attr) loc(#loc48)
    cir.br ^bb3 loc(#loc44)
  ^bb3:  // 2 preds: ^bb1, ^bb2
    cir.br ^bb4 loc(#loc44)
  ^bb4:  // pred: ^bb3
    %13 = cir.const #cir.int<8> : !u64i loc(#loc226)
    %14 = cir.call @malloc(%13) : (!u64i) -> !cir.ptr<!void> extra(#fn_attr) loc(#loc53)
    %15 = cir.cast(bitcast, %14 : !cir.ptr<!void>), !cir.ptr<!s8i> loc(#loc227)
    cir.store %15, %2 : !cir.ptr<!s8i>, !cir.ptr<!cir.ptr<!s8i>> loc(#loc220)
    cir.br ^bb5 loc(#loc228)
  ^bb5:  // pred: ^bb4
    %16 = cir.load %2 : !cir.ptr<!cir.ptr<!s8i>>, !cir.ptr<!s8i> loc(#loc56)
    %17 = cir.const #cir.ptr<null> : !cir.ptr<!s8i> loc(#loc57)
    %18 = cir.cmp(eq, %16, %17) : !cir.ptr<!s8i>, !cir.bool loc(#loc229)
    cir.brcond %18 ^bb6, ^bb7 loc(#loc230)
  ^bb6:  // pred: ^bb5
    %19 = cir.get_global @exit : !cir.ptr<!cir.func<!void (!s32i)>> loc(#loc59)
    %20 = cir.const #cir.int<1> : !s32i loc(#loc60)
    %21 = cir.unary(minus, %20) : !s32i, !s32i loc(#loc61)
    cir.call @exit(%21) : (!s32i) -> () extra(#fn_attr) loc(#loc59)
    cir.br ^bb7 loc(#loc55)
  ^bb7:  // 2 preds: ^bb5, ^bb6
    cir.br ^bb8 loc(#loc55)
  ^bb8:  // pred: ^bb7
    %22 = cir.load %1 : !cir.ptr<!cir.ptr<!s8i>>, !cir.ptr<!s8i> loc(#loc62)
    cir.store %22, %0 : !cir.ptr<!s8i>, !cir.ptr<!cir.ptr<!s8i>> loc(#loc231)
    %23 = cir.load %0 : !cir.ptr<!cir.ptr<!s8i>>, !cir.ptr<!s8i> loc(#loc64)
    cir.call @_ZN51CWE122_Heap_Based_Buffer_Overflow__placement_new_41L7badSinkEPc(%23) : (!cir.ptr<!s8i>) -> () loc(#loc65)
    cir.return loc(#loc33)
  } loc(#loc217)
  cir.func internal private @_ZN51CWE122_Heap_Based_Buffer_Overflow__placement_new_41L11goodG2BSinkEPc(%arg0: !cir.ptr<!s8i> loc(fused[#loc68, #loc69])) extra(#fn_attr2) {
    %0 = cir.alloca !cir.ptr<!ty_TwoIntsClass>, !cir.ptr<!cir.ptr<!ty_TwoIntsClass>>, ["classTwo", init] {alignment = 8 : i64} loc(#loc234)
    %1 = cir.alloca !cir.ptr<!s8i>, !cir.ptr<!cir.ptr<!s8i>>, ["data", init] {alignment = 8 : i64} loc(#loc233)
    cir.store %arg0, %1 : !cir.ptr<!s8i>, !cir.ptr<!cir.ptr<!s8i>> loc(#loc72)
    cir.br ^bb1 loc(#loc235)
  ^bb1:  // pred: ^bb0
    %2 = cir.const #cir.int<8> : !u64i loc(#loc236)
    %3 = cir.load %1 : !cir.ptr<!cir.ptr<!s8i>>, !cir.ptr<!s8i> loc(#loc76)
    %4 = cir.cast(bitcast, %3 : !cir.ptr<!s8i>), !cir.ptr<!void> loc(#loc76)
    %5 = cir.cast(bitcast, %4 : !cir.ptr<!void>), !cir.ptr<!ty_TwoIntsClass> loc(#loc236)
    cir.call @_ZN12TwoIntsClassC2Ev(%5) : (!cir.ptr<!ty_TwoIntsClass>) -> () extra(#fn_attr) loc(#loc71)
    cir.store %5, %0 : !cir.ptr<!ty_TwoIntsClass>, !cir.ptr<!cir.ptr<!ty_TwoIntsClass>> loc(#loc234)
    %6 = cir.const #cir.int<5> : !s32i loc(#loc77)
    %7 = cir.load %0 : !cir.ptr<!cir.ptr<!ty_TwoIntsClass>>, !cir.ptr<!ty_TwoIntsClass> loc(#loc78)
    %8 = cir.get_member %7[0] {name = "intOne"} : !cir.ptr<!ty_TwoIntsClass> -> !cir.ptr<!s32i> loc(#loc23)
    cir.store %6, %8 : !s32i, !cir.ptr<!s32i> loc(#loc237)
    %9 = cir.const #cir.int<10> : !s32i loc(#loc79)
    %10 = cir.load %0 : !cir.ptr<!cir.ptr<!ty_TwoIntsClass>>, !cir.ptr<!ty_TwoIntsClass> loc(#loc80)
    %11 = cir.get_member %10[1] {name = "intTwo"} : !cir.ptr<!ty_TwoIntsClass> -> !cir.ptr<!s32i> loc(#loc26)
    cir.store %9, %11 : !s32i, !cir.ptr<!s32i> loc(#loc238)
    %12 = cir.load %0 : !cir.ptr<!cir.ptr<!ty_TwoIntsClass>>, !cir.ptr<!ty_TwoIntsClass> loc(#loc81)
    %13 = cir.get_member %12[0] {name = "intOne"} : !cir.ptr<!ty_TwoIntsClass> -> !cir.ptr<!s32i> loc(#loc23)
    %14 = cir.load %13 : !cir.ptr<!s32i>, !s32i loc(#loc82)
    cir.call @printIntLine(%14) : (!s32i) -> () loc(#loc83)
    %15 = cir.get_global @free : !cir.ptr<!cir.func<!void (!cir.ptr<!void>)>> loc(#loc84)
    %16 = cir.load %1 : !cir.ptr<!cir.ptr<!s8i>>, !cir.ptr<!s8i> loc(#loc85)
    %17 = cir.cast(bitcast, %16 : !cir.ptr<!s8i>), !cir.ptr<!void> loc(#loc85)
    cir.call @free(%17) : (!cir.ptr<!void>) -> () extra(#fn_attr) loc(#loc84)
    cir.br ^bb2 loc(#loc74)
  ^bb2:  // pred: ^bb1
    cir.return loc(#loc67)
  } loc(#loc232)
  cir.func internal private @_ZN51CWE122_Heap_Based_Buffer_Overflow__placement_new_41L7goodG2BEv() extra(#fn_attr2) {
    %0 = cir.alloca !cir.ptr<!s8i>, !cir.ptr<!cir.ptr<!s8i>>, ["data"] {alignment = 8 : i64} loc(#loc240)
    %1 = cir.alloca !cir.ptr<!s8i>, !cir.ptr<!cir.ptr<!s8i>>, ["dataBadBuffer", init] {alignment = 8 : i64} loc(#loc241)
    %2 = cir.alloca !cir.ptr<!s8i>, !cir.ptr<!cir.ptr<!s8i>>, ["dataGoodBuffer", init] {alignment = 8 : i64} loc(#loc242)
    %3 = cir.get_global @malloc : !cir.ptr<!cir.func<!cir.ptr<!void> (!u64i)>> loc(#loc94)
    %4 = cir.const #cir.int<4> : !u64i loc(#loc243)
    %5 = cir.call @malloc(%4) : (!u64i) -> !cir.ptr<!void> extra(#fn_attr) loc(#loc94)
    %6 = cir.cast(bitcast, %5 : !cir.ptr<!void>), !cir.ptr<!s8i> loc(#loc244)
    cir.store %6, %1 : !cir.ptr<!s8i>, !cir.ptr<!cir.ptr<!s8i>> loc(#loc241)
    cir.br ^bb1 loc(#loc245)
  ^bb1:  // pred: ^bb0
    %7 = cir.load %1 : !cir.ptr<!cir.ptr<!s8i>>, !cir.ptr<!s8i> loc(#loc99)
    %8 = cir.const #cir.ptr<null> : !cir.ptr<!s8i> loc(#loc100)
    %9 = cir.cmp(eq, %7, %8) : !cir.ptr<!s8i>, !cir.bool loc(#loc246)
    cir.brcond %9 ^bb2, ^bb3 loc(#loc247)
  ^bb2:  // pred: ^bb1
    %10 = cir.get_global @exit : !cir.ptr<!cir.func<!void (!s32i)>> loc(#loc102)
    %11 = cir.const #cir.int<1> : !s32i loc(#loc103)
    %12 = cir.unary(minus, %11) : !s32i, !s32i loc(#loc104)
    cir.call @exit(%12) : (!s32i) -> () extra(#fn_attr) loc(#loc102)
    cir.br ^bb3 loc(#loc98)
  ^bb3:  // 2 preds: ^bb1, ^bb2
    cir.br ^bb4 loc(#loc98)
  ^bb4:  // pred: ^bb3
    %13 = cir.const #cir.int<8> : !u64i loc(#loc248)
    %14 = cir.call @malloc(%13) : (!u64i) -> !cir.ptr<!void> extra(#fn_attr) loc(#loc107)
    %15 = cir.cast(bitcast, %14 : !cir.ptr<!void>), !cir.ptr<!s8i> loc(#loc249)
    cir.store %15, %2 : !cir.ptr<!s8i>, !cir.ptr<!cir.ptr<!s8i>> loc(#loc242)
    cir.br ^bb5 loc(#loc250)
  ^bb5:  // pred: ^bb4
    %16 = cir.load %2 : !cir.ptr<!cir.ptr<!s8i>>, !cir.ptr<!s8i> loc(#loc110)
    %17 = cir.const #cir.ptr<null> : !cir.ptr<!s8i> loc(#loc111)
    %18 = cir.cmp(eq, %16, %17) : !cir.ptr<!s8i>, !cir.bool loc(#loc251)
    cir.brcond %18 ^bb6, ^bb7 loc(#loc252)
  ^bb6:  // pred: ^bb5
    %19 = cir.get_global @exit : !cir.ptr<!cir.func<!void (!s32i)>> loc(#loc113)
    %20 = cir.const #cir.int<1> : !s32i loc(#loc114)
    %21 = cir.unary(minus, %20) : !s32i, !s32i loc(#loc115)
    cir.call @exit(%21) : (!s32i) -> () extra(#fn_attr) loc(#loc113)
    cir.br ^bb7 loc(#loc109)
  ^bb7:  // 2 preds: ^bb5, ^bb6
    cir.br ^bb8 loc(#loc109)
  ^bb8:  // pred: ^bb7
    %22 = cir.load %2 : !cir.ptr<!cir.ptr<!s8i>>, !cir.ptr<!s8i> loc(#loc116)
    cir.store %22, %0 : !cir.ptr<!s8i>, !cir.ptr<!cir.ptr<!s8i>> loc(#loc253)
    %23 = cir.load %0 : !cir.ptr<!cir.ptr<!s8i>>, !cir.ptr<!s8i> loc(#loc118)
    cir.call @_ZN51CWE122_Heap_Based_Buffer_Overflow__placement_new_41L11goodG2BSinkEPc(%23) : (!cir.ptr<!s8i>) -> () loc(#loc119)
    cir.return loc(#loc87)
  } loc(#loc239)
  cir.func linkonce_odr @_ZN11OneIntClassC2Ev(%arg0: !cir.ptr<!ty_OneIntClass> loc("../../../testcasesupport/std_testcase.h":68:7)) extra(#fn_attr1) {
    %0 = cir.alloca !cir.ptr<!ty_OneIntClass>, !cir.ptr<!cir.ptr<!ty_OneIntClass>>, ["this", init] {alignment = 8 : i64} loc(#loc120)
    cir.store %arg0, %0 : !cir.ptr<!ty_OneIntClass>, !cir.ptr<!cir.ptr<!ty_OneIntClass>> loc(#loc120)
    %1 = cir.load %0 : !cir.ptr<!cir.ptr<!ty_OneIntClass>>, !cir.ptr<!ty_OneIntClass> loc(#loc120)
    cir.return loc(#loc120)
  } loc(#loc120)
  cir.func internal private @_ZN51CWE122_Heap_Based_Buffer_Overflow__placement_new_41L11goodB2GSinkEPc(%arg0: !cir.ptr<!s8i> loc(fused[#loc123, #loc124])) extra(#fn_attr2) {
    %0 = cir.alloca !cir.ptr<!ty_OneIntClass>, !cir.ptr<!cir.ptr<!ty_OneIntClass>>, ["classOne", init] {alignment = 8 : i64} loc(#loc256)
    %1 = cir.alloca !cir.ptr<!s8i>, !cir.ptr<!cir.ptr<!s8i>>, ["data", init] {alignment = 8 : i64} loc(#loc255)
    cir.store %arg0, %1 : !cir.ptr<!s8i>, !cir.ptr<!cir.ptr<!s8i>> loc(#loc127)
    cir.br ^bb1 loc(#loc257)
  ^bb1:  // pred: ^bb0
    %2 = cir.const #cir.int<4> : !u64i loc(#loc258)
    %3 = cir.load %1 : !cir.ptr<!cir.ptr<!s8i>>, !cir.ptr<!s8i> loc(#loc131)
    %4 = cir.cast(bitcast, %3 : !cir.ptr<!s8i>), !cir.ptr<!void> loc(#loc131)
    %5 = cir.cast(bitcast, %4 : !cir.ptr<!void>), !cir.ptr<!ty_OneIntClass> loc(#loc258)
    cir.call @_ZN11OneIntClassC2Ev(%5) : (!cir.ptr<!ty_OneIntClass>) -> () extra(#fn_attr) loc(#loc126)
    cir.store %5, %0 : !cir.ptr<!ty_OneIntClass>, !cir.ptr<!cir.ptr<!ty_OneIntClass>> loc(#loc256)
    %6 = cir.const #cir.int<5> : !s32i loc(#loc132)
    %7 = cir.load %0 : !cir.ptr<!cir.ptr<!ty_OneIntClass>>, !cir.ptr<!ty_OneIntClass> loc(#loc133)
    %8 = cir.get_member %7[0] {name = "intOne"} : !cir.ptr<!ty_OneIntClass> -> !cir.ptr<!s32i> loc(#loc134)
    cir.store %6, %8 : !s32i, !cir.ptr<!s32i> loc(#loc259)
    %9 = cir.load %0 : !cir.ptr<!cir.ptr<!ty_OneIntClass>>, !cir.ptr<!ty_OneIntClass> loc(#loc135)
    %10 = cir.get_member %9[0] {name = "intOne"} : !cir.ptr<!ty_OneIntClass> -> !cir.ptr<!s32i> loc(#loc134)
    %11 = cir.load %10 : !cir.ptr<!s32i>, !s32i loc(#loc136)
    cir.call @printIntLine(%11) : (!s32i) -> () loc(#loc137)
    %12 = cir.get_global @free : !cir.ptr<!cir.func<!void (!cir.ptr<!void>)>> loc(#loc138)
    %13 = cir.load %1 : !cir.ptr<!cir.ptr<!s8i>>, !cir.ptr<!s8i> loc(#loc139)
    %14 = cir.cast(bitcast, %13 : !cir.ptr<!s8i>), !cir.ptr<!void> loc(#loc139)
    cir.call @free(%14) : (!cir.ptr<!void>) -> () extra(#fn_attr) loc(#loc138)
    cir.br ^bb2 loc(#loc129)
  ^bb2:  // pred: ^bb1
    cir.return loc(#loc122)
  } loc(#loc254)
  cir.func internal private @_ZN51CWE122_Heap_Based_Buffer_Overflow__placement_new_41L7goodB2GEv() extra(#fn_attr2) {
    %0 = cir.alloca !cir.ptr<!s8i>, !cir.ptr<!cir.ptr<!s8i>>, ["data"] {alignment = 8 : i64} loc(#loc261)
    %1 = cir.alloca !cir.ptr<!s8i>, !cir.ptr<!cir.ptr<!s8i>>, ["dataBadBuffer", init] {alignment = 8 : i64} loc(#loc262)
    %2 = cir.alloca !cir.ptr<!s8i>, !cir.ptr<!cir.ptr<!s8i>>, ["dataGoodBuffer", init] {alignment = 8 : i64} loc(#loc263)
    %3 = cir.get_global @malloc : !cir.ptr<!cir.func<!cir.ptr<!void> (!u64i)>> loc(#loc148)
    %4 = cir.const #cir.int<4> : !u64i loc(#loc264)
    %5 = cir.call @malloc(%4) : (!u64i) -> !cir.ptr<!void> extra(#fn_attr) loc(#loc148)
    %6 = cir.cast(bitcast, %5 : !cir.ptr<!void>), !cir.ptr<!s8i> loc(#loc265)
    cir.store %6, %1 : !cir.ptr<!s8i>, !cir.ptr<!cir.ptr<!s8i>> loc(#loc262)
    cir.br ^bb1 loc(#loc266)
  ^bb1:  // pred: ^bb0
    %7 = cir.load %1 : !cir.ptr<!cir.ptr<!s8i>>, !cir.ptr<!s8i> loc(#loc153)
    %8 = cir.const #cir.ptr<null> : !cir.ptr<!s8i> loc(#loc154)
    %9 = cir.cmp(eq, %7, %8) : !cir.ptr<!s8i>, !cir.bool loc(#loc267)
    cir.brcond %9 ^bb2, ^bb3 loc(#loc268)
  ^bb2:  // pred: ^bb1
    %10 = cir.get_global @exit : !cir.ptr<!cir.func<!void (!s32i)>> loc(#loc156)
    %11 = cir.const #cir.int<1> : !s32i loc(#loc157)
    %12 = cir.unary(minus, %11) : !s32i, !s32i loc(#loc158)
    cir.call @exit(%12) : (!s32i) -> () extra(#fn_attr) loc(#loc156)
    cir.br ^bb3 loc(#loc152)
  ^bb3:  // 2 preds: ^bb1, ^bb2
    cir.br ^bb4 loc(#loc152)
  ^bb4:  // pred: ^bb3
    %13 = cir.const #cir.int<8> : !u64i loc(#loc269)
    %14 = cir.call @malloc(%13) : (!u64i) -> !cir.ptr<!void> extra(#fn_attr) loc(#loc161)
    %15 = cir.cast(bitcast, %14 : !cir.ptr<!void>), !cir.ptr<!s8i> loc(#loc270)
    cir.store %15, %2 : !cir.ptr<!s8i>, !cir.ptr<!cir.ptr<!s8i>> loc(#loc263)
    cir.br ^bb5 loc(#loc271)
  ^bb5:  // pred: ^bb4
    %16 = cir.load %2 : !cir.ptr<!cir.ptr<!s8i>>, !cir.ptr<!s8i> loc(#loc164)
    %17 = cir.const #cir.ptr<null> : !cir.ptr<!s8i> loc(#loc165)
    %18 = cir.cmp(eq, %16, %17) : !cir.ptr<!s8i>, !cir.bool loc(#loc272)
    cir.brcond %18 ^bb6, ^bb7 loc(#loc273)
  ^bb6:  // pred: ^bb5
    %19 = cir.get_global @exit : !cir.ptr<!cir.func<!void (!s32i)>> loc(#loc167)
    %20 = cir.const #cir.int<1> : !s32i loc(#loc168)
    %21 = cir.unary(minus, %20) : !s32i, !s32i loc(#loc169)
    cir.call @exit(%21) : (!s32i) -> () extra(#fn_attr) loc(#loc167)
    cir.br ^bb7 loc(#loc163)
  ^bb7:  // 2 preds: ^bb5, ^bb6
    cir.br ^bb8 loc(#loc163)
  ^bb8:  // pred: ^bb7
    %22 = cir.load %1 : !cir.ptr<!cir.ptr<!s8i>>, !cir.ptr<!s8i> loc(#loc170)
    cir.store %22, %0 : !cir.ptr<!s8i>, !cir.ptr<!cir.ptr<!s8i>> loc(#loc274)
    %23 = cir.load %0 : !cir.ptr<!cir.ptr<!s8i>>, !cir.ptr<!s8i> loc(#loc172)
    cir.call @_ZN51CWE122_Heap_Based_Buffer_Overflow__placement_new_41L11goodB2GSinkEPc(%23) : (!cir.ptr<!s8i>) -> () loc(#loc173)
    cir.return loc(#loc141)
  } loc(#loc260)
  cir.func @_ZN51CWE122_Heap_Based_Buffer_Overflow__placement_new_414goodEv() extra(#fn_attr2) {
    cir.call @_ZN51CWE122_Heap_Based_Buffer_Overflow__placement_new_41L7goodG2BEv() : () -> () loc(#loc176)
    cir.call @_ZN51CWE122_Heap_Based_Buffer_Overflow__placement_new_41L7goodB2GEv() : () -> () loc(#loc177)
    cir.return loc(#loc175)
  } loc(#loc275)
  cir.func private @srand(!u32i) extra(#fn_attr) loc(#loc276)
  cir.func private @time(!cir.ptr<!s64i>) -> !s64i extra(#fn_attr) loc(#loc277)
  cir.func private @printLine(!cir.ptr<!s8i>) loc(#loc278)
  cir.global "private" constant cir_private dsolocal @".str" = #cir.const_array<"Calling good()...\00" : !cir.array<!s8i x 18>> : !cir.array<!s8i x 18> {alignment = 1 : i64} loc(#loc184)
  cir.global "private" constant cir_private dsolocal @".str.1" = #cir.const_array<"Finished good()\00" : !cir.array<!s8i x 16>> : !cir.array<!s8i x 16> {alignment = 1 : i64} loc(#loc185)
  cir.global "private" constant cir_private dsolocal @".str.2" = #cir.const_array<"Calling bad()...\00" : !cir.array<!s8i x 17>> : !cir.array<!s8i x 17> {alignment = 1 : i64} loc(#loc186)
  cir.global "private" constant cir_private dsolocal @".str.3" = #cir.const_array<"Finished bad()\00" : !cir.array<!s8i x 15>> : !cir.array<!s8i x 15> {alignment = 1 : i64} loc(#loc187)
  cir.func @main(%arg0: !s32i loc(fused[#loc190, #loc191]), %arg1: !cir.ptr<!cir.ptr<!s8i>> loc(fused[#loc192, #loc193])) -> !s32i extra(#fn_attr2) {
    %0 = cir.alloca !s32i, !cir.ptr<!s32i>, ["argc", init] {alignment = 4 : i64} loc(#loc280)
    %1 = cir.alloca !cir.ptr<!cir.ptr<!s8i>>, !cir.ptr<!cir.ptr<!cir.ptr<!s8i>>>, ["argv", init] {alignment = 8 : i64} loc(#loc281)
    %2 = cir.alloca !s32i, !cir.ptr<!s32i>, ["__retval"] {alignment = 4 : i64} loc(#loc189)
    cir.store %arg0, %0 : !s32i, !cir.ptr<!s32i> loc(#loc194)
    cir.store %arg1, %1 : !cir.ptr<!cir.ptr<!s8i>>, !cir.ptr<!cir.ptr<!cir.ptr<!s8i>>> loc(#loc194)
    %3 = cir.const #cir.ptr<null> : !cir.ptr<!s64i> loc(#loc195)
    %4 = cir.call @time(%3) : (!cir.ptr<!s64i>) -> !s64i extra(#fn_attr) loc(#loc196)
    %5 = cir.cast(integral, %4 : !s64i), !u32i loc(#loc196)
    cir.call @srand(%5) : (!u32i) -> () extra(#fn_attr) loc(#loc197)
    %6 = cir.get_global @".str" : !cir.ptr<!cir.array<!s8i x 18>> loc(#loc184)
    %7 = cir.cast(array_to_ptrdecay, %6 : !cir.ptr<!cir.array<!s8i x 18>>), !cir.ptr<!s8i> loc(#loc184)
    cir.call @printLine(%7) : (!cir.ptr<!s8i>) -> () loc(#loc198)
    cir.call @_ZN51CWE122_Heap_Based_Buffer_Overflow__placement_new_414goodEv() : () -> () loc(#loc199)
    %8 = cir.get_global @".str.1" : !cir.ptr<!cir.array<!s8i x 16>> loc(#loc185)
    %9 = cir.cast(array_to_ptrdecay, %8 : !cir.ptr<!cir.array<!s8i x 16>>), !cir.ptr<!s8i> loc(#loc185)
    cir.call @printLine(%9) : (!cir.ptr<!s8i>) -> () loc(#loc200)
    %10 = cir.get_global @".str.2" : !cir.ptr<!cir.array<!s8i x 17>> loc(#loc186)
    %11 = cir.cast(array_to_ptrdecay, %10 : !cir.ptr<!cir.array<!s8i x 17>>), !cir.ptr<!s8i> loc(#loc186)
    cir.call @printLine(%11) : (!cir.ptr<!s8i>) -> () loc(#loc201)
    cir.call @_ZN51CWE122_Heap_Based_Buffer_Overflow__placement_new_413badEv() : () -> () loc(#loc202)
    %12 = cir.get_global @".str.3" : !cir.ptr<!cir.array<!s8i x 15>> loc(#loc187)
    %13 = cir.cast(array_to_ptrdecay, %12 : !cir.ptr<!cir.array<!s8i x 15>>), !cir.ptr<!s8i> loc(#loc187)
    cir.call @printLine(%13) : (!cir.ptr<!s8i>) -> () loc(#loc203)
    %14 = cir.const #cir.int<0> : !s32i loc(#loc204)
    cir.store %14, %2 : !s32i, !cir.ptr<!s32i> loc(#loc282)
    %15 = cir.load %2 : !cir.ptr<!s32i>, !s32i loc(#loc282)
    cir.return %15 : !s32i loc(#loc282)
  } loc(#loc279)
} loc(#loc)
#loc = loc("/home/ladisgin/git_proj/juliet-c/testcases/CWE122_Heap_Based_Buffer_Overflow/s11/CWE122_Heap_Based_Buffer_Overflow__placement_new_41.cpp":0:0)
#loc1 = loc("/usr/include/stdlib.h":672:1)
#loc2 = loc("/usr/include/stdlib.h":672:45)
#loc3 = loc("/usr/include/stdlib.h":756:1)
#loc4 = loc("/usr/include/stdlib.h":756:70)
#loc6 = loc("../../../testcasesupport/std_testcase_io.h":18:1)
#loc7 = loc("../../../testcasesupport/std_testcase_io.h":18:33)
#loc8 = loc("/usr/include/stdlib.h":687:1)
#loc9 = loc("/usr/include/stdlib.h":687:32)
#loc10 = loc("CWE122_Heap_Based_Buffer_Overflow__placement_new_41.cpp":25:1)
#loc11 = loc("CWE122_Heap_Based_Buffer_Overflow__placement_new_41.cpp":41:1)
#loc14 = loc("CWE122_Heap_Based_Buffer_Overflow__placement_new_41.cpp":33:9)
#loc15 = loc("CWE122_Heap_Based_Buffer_Overflow__placement_new_41.cpp":33:45)
#loc16 = loc("CWE122_Heap_Based_Buffer_Overflow__placement_new_41.cpp":26:1)
#loc17 = loc("CWE122_Heap_Based_Buffer_Overflow__placement_new_41.cpp":27:5)
#loc18 = loc("CWE122_Heap_Based_Buffer_Overflow__placement_new_41.cpp":40:5)
#loc19 = loc("CWE122_Heap_Based_Buffer_Overflow__placement_new_41.cpp":33:35)
#loc20 = loc("CWE122_Heap_Based_Buffer_Overflow__placement_new_41.cpp":33:39)
#loc21 = loc("CWE122_Heap_Based_Buffer_Overflow__placement_new_41.cpp":35:28)
#loc22 = loc("CWE122_Heap_Based_Buffer_Overflow__placement_new_41.cpp":35:9)
#loc23 = loc("../../../testcasesupport/std_testcase.h":64:13)
#loc24 = loc("CWE122_Heap_Based_Buffer_Overflow__placement_new_41.cpp":36:28)
#loc25 = loc("CWE122_Heap_Based_Buffer_Overflow__placement_new_41.cpp":36:9)
#loc26 = loc("../../../testcasesupport/std_testcase.h":65:13)
#loc27 = loc("CWE122_Heap_Based_Buffer_Overflow__placement_new_41.cpp":37:22)
#loc28 = loc("CWE122_Heap_Based_Buffer_Overflow__placement_new_41.cpp":37:32)
#loc29 = loc("CWE122_Heap_Based_Buffer_Overflow__placement_new_41.cpp":37:9)
#loc30 = loc("CWE122_Heap_Based_Buffer_Overflow__placement_new_41.cpp":39:9)
#loc31 = loc("CWE122_Heap_Based_Buffer_Overflow__placement_new_41.cpp":39:14)
#loc32 = loc("CWE122_Heap_Based_Buffer_Overflow__placement_new_41.cpp":43:1)
#loc33 = loc("CWE122_Heap_Based_Buffer_Overflow__placement_new_41.cpp":53:1)
#loc34 = loc("CWE122_Heap_Based_Buffer_Overflow__placement_new_41.cpp":45:5)
#loc35 = loc("CWE122_Heap_Based_Buffer_Overflow__placement_new_41.cpp":45:12)
#loc36 = loc("CWE122_Heap_Based_Buffer_Overflow__placement_new_41.cpp":46:5)
#loc37 = loc("CWE122_Heap_Based_Buffer_Overflow__placement_new_41.cpp":46:62)
#loc38 = loc("CWE122_Heap_Based_Buffer_Overflow__placement_new_41.cpp":48:5)
#loc39 = loc("CWE122_Heap_Based_Buffer_Overflow__placement_new_41.cpp":48:64)
#loc40 = loc("CWE122_Heap_Based_Buffer_Overflow__placement_new_41.cpp":46:36)
#loc41 = loc("CWE122_Heap_Based_Buffer_Overflow__placement_new_41.cpp":46:43)
#loc42 = loc("CWE122_Heap_Based_Buffer_Overflow__placement_new_41.cpp":46:61)
#loc43 = loc("CWE122_Heap_Based_Buffer_Overflow__placement_new_41.cpp":47:5)
#loc44 = loc("CWE122_Heap_Based_Buffer_Overflow__placement_new_41.cpp":47:42)
#loc45 = loc("CWE122_Heap_Based_Buffer_Overflow__placement_new_41.cpp":47:9)
#loc46 = loc("CWE122_Heap_Based_Buffer_Overflow__placement_new_41.cpp":47:26)
#loc47 = loc("CWE122_Heap_Based_Buffer_Overflow__placement_new_41.cpp":47:32)
#loc48 = loc("CWE122_Heap_Based_Buffer_Overflow__placement_new_41.cpp":47:33)
#loc49 = loc("CWE122_Heap_Based_Buffer_Overflow__placement_new_41.cpp":47:39)
#loc50 = loc("CWE122_Heap_Based_Buffer_Overflow__placement_new_41.cpp":47:38)
#loc51 = loc("CWE122_Heap_Based_Buffer_Overflow__placement_new_41.cpp":48:44)
#loc52 = loc("CWE122_Heap_Based_Buffer_Overflow__placement_new_41.cpp":48:63)
#loc53 = loc("CWE122_Heap_Based_Buffer_Overflow__placement_new_41.cpp":48:37)
#loc54 = loc("CWE122_Heap_Based_Buffer_Overflow__placement_new_41.cpp":49:5)
#loc55 = loc("CWE122_Heap_Based_Buffer_Overflow__placement_new_41.cpp":49:43)
#loc56 = loc("CWE122_Heap_Based_Buffer_Overflow__placement_new_41.cpp":49:9)
#loc57 = loc("CWE122_Heap_Based_Buffer_Overflow__placement_new_41.cpp":49:27)
#loc58 = loc("CWE122_Heap_Based_Buffer_Overflow__placement_new_41.cpp":49:33)
#loc59 = loc("CWE122_Heap_Based_Buffer_Overflow__placement_new_41.cpp":49:34)
#loc60 = loc("CWE122_Heap_Based_Buffer_Overflow__placement_new_41.cpp":49:40)
#loc61 = loc("CWE122_Heap_Based_Buffer_Overflow__placement_new_41.cpp":49:39)
#loc62 = loc("CWE122_Heap_Based_Buffer_Overflow__placement_new_41.cpp":51:12)
#loc63 = loc("CWE122_Heap_Based_Buffer_Overflow__placement_new_41.cpp":51:5)
#loc64 = loc("CWE122_Heap_Based_Buffer_Overflow__placement_new_41.cpp":52:13)
#loc65 = loc("CWE122_Heap_Based_Buffer_Overflow__placement_new_41.cpp":52:5)
#loc66 = loc("CWE122_Heap_Based_Buffer_Overflow__placement_new_41.cpp":60:1)
#loc67 = loc("CWE122_Heap_Based_Buffer_Overflow__placement_new_41.cpp":76:1)
#loc70 = loc("CWE122_Heap_Based_Buffer_Overflow__placement_new_41.cpp":68:9)
#loc71 = loc("CWE122_Heap_Based_Buffer_Overflow__placement_new_41.cpp":68:45)
#loc72 = loc("CWE122_Heap_Based_Buffer_Overflow__placement_new_41.cpp":61:1)
#loc73 = loc("CWE122_Heap_Based_Buffer_Overflow__placement_new_41.cpp":62:5)
#loc74 = loc("CWE122_Heap_Based_Buffer_Overflow__placement_new_41.cpp":75:5)
#loc75 = loc("CWE122_Heap_Based_Buffer_Overflow__placement_new_41.cpp":68:35)
#loc76 = loc("CWE122_Heap_Based_Buffer_Overflow__placement_new_41.cpp":68:39)
#loc77 = loc("CWE122_Heap_Based_Buffer_Overflow__placement_new_41.cpp":70:28)
#loc78 = loc("CWE122_Heap_Based_Buffer_Overflow__placement_new_41.cpp":70:9)
#loc79 = loc("CWE122_Heap_Based_Buffer_Overflow__placement_new_41.cpp":71:28)
#loc80 = loc("CWE122_Heap_Based_Buffer_Overflow__placement_new_41.cpp":71:9)
#loc81 = loc("CWE122_Heap_Based_Buffer_Overflow__placement_new_41.cpp":72:22)
#loc82 = loc("CWE122_Heap_Based_Buffer_Overflow__placement_new_41.cpp":72:32)
#loc83 = loc("CWE122_Heap_Based_Buffer_Overflow__placement_new_41.cpp":72:9)
#loc84 = loc("CWE122_Heap_Based_Buffer_Overflow__placement_new_41.cpp":74:9)
#loc85 = loc("CWE122_Heap_Based_Buffer_Overflow__placement_new_41.cpp":74:14)
#loc86 = loc("CWE122_Heap_Based_Buffer_Overflow__placement_new_41.cpp":78:1)
#loc87 = loc("CWE122_Heap_Based_Buffer_Overflow__placement_new_41.cpp":88:1)
#loc88 = loc("CWE122_Heap_Based_Buffer_Overflow__placement_new_41.cpp":80:5)
#loc89 = loc("CWE122_Heap_Based_Buffer_Overflow__placement_new_41.cpp":80:12)
#loc90 = loc("CWE122_Heap_Based_Buffer_Overflow__placement_new_41.cpp":81:5)
#loc91 = loc("CWE122_Heap_Based_Buffer_Overflow__placement_new_41.cpp":81:62)
#loc92 = loc("CWE122_Heap_Based_Buffer_Overflow__placement_new_41.cpp":83:5)
#loc93 = loc("CWE122_Heap_Based_Buffer_Overflow__placement_new_41.cpp":83:64)
#loc94 = loc("CWE122_Heap_Based_Buffer_Overflow__placement_new_41.cpp":81:36)
#loc95 = loc("CWE122_Heap_Based_Buffer_Overflow__placement_new_41.cpp":81:43)
#loc96 = loc("CWE122_Heap_Based_Buffer_Overflow__placement_new_41.cpp":81:61)
#loc97 = loc("CWE122_Heap_Based_Buffer_Overflow__placement_new_41.cpp":82:5)
#loc98 = loc("CWE122_Heap_Based_Buffer_Overflow__placement_new_41.cpp":82:42)
#loc99 = loc("CWE122_Heap_Based_Buffer_Overflow__placement_new_41.cpp":82:9)
#loc100 = loc("CWE122_Heap_Based_Buffer_Overflow__placement_new_41.cpp":82:26)
#loc101 = loc("CWE122_Heap_Based_Buffer_Overflow__placement_new_41.cpp":82:32)
#loc102 = loc("CWE122_Heap_Based_Buffer_Overflow__placement_new_41.cpp":82:33)
#loc103 = loc("CWE122_Heap_Based_Buffer_Overflow__placement_new_41.cpp":82:39)
#loc104 = loc("CWE122_Heap_Based_Buffer_Overflow__placement_new_41.cpp":82:38)
#loc105 = loc("CWE122_Heap_Based_Buffer_Overflow__placement_new_41.cpp":83:44)
#loc106 = loc("CWE122_Heap_Based_Buffer_Overflow__placement_new_41.cpp":83:63)
#loc107 = loc("CWE122_Heap_Based_Buffer_Overflow__placement_new_41.cpp":83:37)
#loc108 = loc("CWE122_Heap_Based_Buffer_Overflow__placement_new_41.cpp":84:5)
#loc109 = loc("CWE122_Heap_Based_Buffer_Overflow__placement_new_41.cpp":84:43)
#loc110 = loc("CWE122_Heap_Based_Buffer_Overflow__placement_new_41.cpp":84:9)
#loc111 = loc("CWE122_Heap_Based_Buffer_Overflow__placement_new_41.cpp":84:27)
#loc112 = loc("CWE122_Heap_Based_Buffer_Overflow__placement_new_41.cpp":84:33)
#loc113 = loc("CWE122_Heap_Based_Buffer_Overflow__placement_new_41.cpp":84:34)
#loc114 = loc("CWE122_Heap_Based_Buffer_Overflow__placement_new_41.cpp":84:40)
#loc115 = loc("CWE122_Heap_Based_Buffer_Overflow__placement_new_41.cpp":84:39)
#loc116 = loc("CWE122_Heap_Based_Buffer_Overflow__placement_new_41.cpp":86:12)
#loc117 = loc("CWE122_Heap_Based_Buffer_Overflow__placement_new_41.cpp":86:5)
#loc118 = loc("CWE122_Heap_Based_Buffer_Overflow__placement_new_41.cpp":87:17)
#loc119 = loc("CWE122_Heap_Based_Buffer_Overflow__placement_new_41.cpp":87:5)
#loc121 = loc("CWE122_Heap_Based_Buffer_Overflow__placement_new_41.cpp":91:1)
#loc122 = loc("CWE122_Heap_Based_Buffer_Overflow__placement_new_41.cpp":105:1)
#loc125 = loc("CWE122_Heap_Based_Buffer_Overflow__placement_new_41.cpp":99:9)
#loc126 = loc("CWE122_Heap_Based_Buffer_Overflow__placement_new_41.cpp":99:44)
#loc127 = loc("CWE122_Heap_Based_Buffer_Overflow__placement_new_41.cpp":92:1)
#loc128 = loc("CWE122_Heap_Based_Buffer_Overflow__placement_new_41.cpp":93:5)
#loc129 = loc("CWE122_Heap_Based_Buffer_Overflow__placement_new_41.cpp":104:5)
#loc130 = loc("CWE122_Heap_Based_Buffer_Overflow__placement_new_41.cpp":99:34)
#loc131 = loc("CWE122_Heap_Based_Buffer_Overflow__placement_new_41.cpp":99:38)
#loc132 = loc("CWE122_Heap_Based_Buffer_Overflow__placement_new_41.cpp":101:28)
#loc133 = loc("CWE122_Heap_Based_Buffer_Overflow__placement_new_41.cpp":101:9)
#loc134 = loc("../../../testcasesupport/std_testcase.h":71:13)
#loc135 = loc("CWE122_Heap_Based_Buffer_Overflow__placement_new_41.cpp":102:22)
#loc136 = loc("CWE122_Heap_Based_Buffer_Overflow__placement_new_41.cpp":102:32)
#loc137 = loc("CWE122_Heap_Based_Buffer_Overflow__placement_new_41.cpp":102:9)
#loc138 = loc("CWE122_Heap_Based_Buffer_Overflow__placement_new_41.cpp":103:9)
#loc139 = loc("CWE122_Heap_Based_Buffer_Overflow__placement_new_41.cpp":103:14)
#loc140 = loc("CWE122_Heap_Based_Buffer_Overflow__placement_new_41.cpp":107:1)
#loc141 = loc("CWE122_Heap_Based_Buffer_Overflow__placement_new_41.cpp":117:1)
#loc142 = loc("CWE122_Heap_Based_Buffer_Overflow__placement_new_41.cpp":109:5)
#loc143 = loc("CWE122_Heap_Based_Buffer_Overflow__placement_new_41.cpp":109:12)
#loc144 = loc("CWE122_Heap_Based_Buffer_Overflow__placement_new_41.cpp":110:5)
#loc145 = loc("CWE122_Heap_Based_Buffer_Overflow__placement_new_41.cpp":110:62)
#loc146 = loc("CWE122_Heap_Based_Buffer_Overflow__placement_new_41.cpp":112:5)
#loc147 = loc("CWE122_Heap_Based_Buffer_Overflow__placement_new_41.cpp":112:64)
#loc148 = loc("CWE122_Heap_Based_Buffer_Overflow__placement_new_41.cpp":110:36)
#loc149 = loc("CWE122_Heap_Based_Buffer_Overflow__placement_new_41.cpp":110:43)
#loc150 = loc("CWE122_Heap_Based_Buffer_Overflow__placement_new_41.cpp":110:61)
#loc151 = loc("CWE122_Heap_Based_Buffer_Overflow__placement_new_41.cpp":111:5)
#loc152 = loc("CWE122_Heap_Based_Buffer_Overflow__placement_new_41.cpp":111:42)
#loc153 = loc("CWE122_Heap_Based_Buffer_Overflow__placement_new_41.cpp":111:9)
#loc154 = loc("CWE122_Heap_Based_Buffer_Overflow__placement_new_41.cpp":111:26)
#loc155 = loc("CWE122_Heap_Based_Buffer_Overflow__placement_new_41.cpp":111:32)
#loc156 = loc("CWE122_Heap_Based_Buffer_Overflow__placement_new_41.cpp":111:33)
#loc157 = loc("CWE122_Heap_Based_Buffer_Overflow__placement_new_41.cpp":111:39)
#loc158 = loc("CWE122_Heap_Based_Buffer_Overflow__placement_new_41.cpp":111:38)
#loc159 = loc("CWE122_Heap_Based_Buffer_Overflow__placement_new_41.cpp":112:44)
#loc160 = loc("CWE122_Heap_Based_Buffer_Overflow__placement_new_41.cpp":112:63)
#loc161 = loc("CWE122_Heap_Based_Buffer_Overflow__placement_new_41.cpp":112:37)
#loc162 = loc("CWE122_Heap_Based_Buffer_Overflow__placement_new_41.cpp":113:5)
#loc163 = loc("CWE122_Heap_Based_Buffer_Overflow__placement_new_41.cpp":113:43)
#loc164 = loc("CWE122_Heap_Based_Buffer_Overflow__placement_new_41.cpp":113:9)
#loc165 = loc("CWE122_Heap_Based_Buffer_Overflow__placement_new_41.cpp":113:27)
#loc166 = loc("CWE122_Heap_Based_Buffer_Overflow__placement_new_41.cpp":113:33)
#loc167 = loc("CWE122_Heap_Based_Buffer_Overflow__placement_new_41.cpp":113:34)
#loc168 = loc("CWE122_Heap_Based_Buffer_Overflow__placement_new_41.cpp":113:40)
#loc169 = loc("CWE122_Heap_Based_Buffer_Overflow__placement_new_41.cpp":113:39)
#loc170 = loc("CWE122_Heap_Based_Buffer_Overflow__placement_new_41.cpp":115:12)
#loc171 = loc("CWE122_Heap_Based_Buffer_Overflow__placement_new_41.cpp":115:5)
#loc172 = loc("CWE122_Heap_Based_Buffer_Overflow__placement_new_41.cpp":116:17)
#loc173 = loc("CWE122_Heap_Based_Buffer_Overflow__placement_new_41.cpp":116:5)
#loc174 = loc("CWE122_Heap_Based_Buffer_Overflow__placement_new_41.cpp":119:1)
#loc175 = loc("CWE122_Heap_Based_Buffer_Overflow__placement_new_41.cpp":123:1)
#loc176 = loc("CWE122_Heap_Based_Buffer_Overflow__placement_new_41.cpp":121:5)
#loc177 = loc("CWE122_Heap_Based_Buffer_Overflow__placement_new_41.cpp":122:5)
#loc178 = loc("/usr/include/stdlib.h":575:1)
#loc179 = loc("/usr/include/stdlib.h":575:41)
#loc180 = loc("/usr/include/time.h":76:1)
#loc181 = loc("/usr/include/time.h":76:38)
#loc182 = loc("../../../testcasesupport/std_testcase_io.h":14:1)
#loc183 = loc("../../../testcasesupport/std_testcase_io.h":14:33)
#loc184 = loc("CWE122_Heap_Based_Buffer_Overflow__placement_new_41.cpp":143:15)
#loc185 = loc("CWE122_Heap_Based_Buffer_Overflow__placement_new_41.cpp":145:15)
#loc186 = loc("CWE122_Heap_Based_Buffer_Overflow__placement_new_41.cpp":148:15)
#loc187 = loc("CWE122_Heap_Based_Buffer_Overflow__placement_new_41.cpp":150:15)
#loc188 = loc("CWE122_Heap_Based_Buffer_Overflow__placement_new_41.cpp":138:1)
#loc189 = loc("CWE122_Heap_Based_Buffer_Overflow__placement_new_41.cpp":153:1)
#loc194 = loc("CWE122_Heap_Based_Buffer_Overflow__placement_new_41.cpp":139:1)
#loc195 = loc("CWE122_Heap_Based_Buffer_Overflow__placement_new_41.cpp":141:27)
#loc196 = loc("CWE122_Heap_Based_Buffer_Overflow__placement_new_41.cpp":141:22)
#loc197 = loc("CWE122_Heap_Based_Buffer_Overflow__placement_new_41.cpp":141:5)
#loc198 = loc("CWE122_Heap_Based_Buffer_Overflow__placement_new_41.cpp":143:5)
#loc199 = loc("CWE122_Heap_Based_Buffer_Overflow__placement_new_41.cpp":144:5)
#loc200 = loc("CWE122_Heap_Based_Buffer_Overflow__placement_new_41.cpp":145:5)
#loc201 = loc("CWE122_Heap_Based_Buffer_Overflow__placement_new_41.cpp":148:5)
#loc202 = loc("CWE122_Heap_Based_Buffer_Overflow__placement_new_41.cpp":149:5)
#loc203 = loc("CWE122_Heap_Based_Buffer_Overflow__placement_new_41.cpp":150:5)
#loc204 = loc("CWE122_Heap_Based_Buffer_Overflow__placement_new_41.cpp":152:12)
#loc205 = loc("CWE122_Heap_Based_Buffer_Overflow__placement_new_41.cpp":152:5)
#loc206 = loc(fused[#loc1, #loc2])
#loc207 = loc(fused[#loc3, #loc4])
#loc208 = loc(fused[#loc6, #loc7])
#loc209 = loc(fused[#loc8, #loc9])
#loc210 = loc(fused[#loc10, #loc11])
#loc212 = loc(fused[#loc14, #loc15])
#loc213 = loc(fused[#loc17, #loc18])
#loc214 = loc(fused[#loc19, #loc15])
#loc215 = loc(fused[#loc22, #loc21])
#loc216 = loc(fused[#loc25, #loc24])
#loc217 = loc(fused[#loc32, #loc33])
#loc218 = loc(fused[#loc34, #loc35])
#loc219 = loc(fused[#loc36, #loc37])
#loc220 = loc(fused[#loc38, #loc39])
#loc221 = loc(fused[#loc41, #loc42])
#loc222 = loc(fused[#loc40, #loc37])
#loc223 = loc(fused[#loc43, #loc44])
#loc224 = loc(fused[#loc45, #loc46])
#loc225 = loc(fused[#loc47, #loc44])
#loc226 = loc(fused[#loc51, #loc52])
#loc227 = loc(fused[#loc53, #loc39])
#loc228 = loc(fused[#loc54, #loc55])
#loc229 = loc(fused[#loc56, #loc57])
#loc230 = loc(fused[#loc58, #loc55])
#loc231 = loc(fused[#loc63, #loc62])
#loc232 = loc(fused[#loc66, #loc67])
#loc234 = loc(fused[#loc70, #loc71])
#loc235 = loc(fused[#loc73, #loc74])
#loc236 = loc(fused[#loc75, #loc71])
#loc237 = loc(fused[#loc78, #loc77])
#loc238 = loc(fused[#loc80, #loc79])
#loc239 = loc(fused[#loc86, #loc87])
#loc240 = loc(fused[#loc88, #loc89])
#loc241 = loc(fused[#loc90, #loc91])
#loc242 = loc(fused[#loc92, #loc93])
#loc243 = loc(fused[#loc95, #loc96])
#loc244 = loc(fused[#loc94, #loc91])
#loc245 = loc(fused[#loc97, #loc98])
#loc246 = loc(fused[#loc99, #loc100])
#loc247 = loc(fused[#loc101, #loc98])
#loc248 = loc(fused[#loc105, #loc106])
#loc249 = loc(fused[#loc107, #loc93])
#loc250 = loc(fused[#loc108, #loc109])
#loc251 = loc(fused[#loc110, #loc111])
#loc252 = loc(fused[#loc112, #loc109])
#loc253 = loc(fused[#loc117, #loc116])
#loc254 = loc(fused[#loc121, #loc122])
#loc256 = loc(fused[#loc125, #loc126])
#loc257 = loc(fused[#loc128, #loc129])
#loc258 = loc(fused[#loc130, #loc126])
#loc259 = loc(fused[#loc133, #loc132])
#loc260 = loc(fused[#loc140, #loc141])
#loc261 = loc(fused[#loc142, #loc143])
#loc262 = loc(fused[#loc144, #loc145])
#loc263 = loc(fused[#loc146, #loc147])
#loc264 = loc(fused[#loc149, #loc150])
#loc265 = loc(fused[#loc148, #loc145])
#loc266 = loc(fused[#loc151, #loc152])
#loc267 = loc(fused[#loc153, #loc154])
#loc268 = loc(fused[#loc155, #loc152])
#loc269 = loc(fused[#loc159, #loc160])
#loc270 = loc(fused[#loc161, #loc147])
#loc271 = loc(fused[#loc162, #loc163])
#loc272 = loc(fused[#loc164, #loc165])
#loc273 = loc(fused[#loc166, #loc163])
#loc274 = loc(fused[#loc171, #loc170])
#loc275 = loc(fused[#loc174, #loc175])
#loc276 = loc(fused[#loc178, #loc179])
#loc277 = loc(fused[#loc180, #loc181])
#loc278 = loc(fused[#loc182, #loc183])
#loc279 = loc(fused[#loc188, #loc189])
#loc282 = loc(fused[#loc205, #loc204])
