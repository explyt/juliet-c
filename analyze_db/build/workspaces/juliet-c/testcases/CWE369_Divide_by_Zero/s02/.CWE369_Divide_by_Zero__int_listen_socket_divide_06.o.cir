!s32i = !cir.int<s, 32>
!s64i = !cir.int<s, 64>
!s8i = !cir.int<s, 8>
!u16i = !cir.int<u, 16>
!u32i = !cir.int<u, 32>
!u64i = !cir.int<u, 64>
!u8i = !cir.int<u, 8>
!void = !cir.void
#false = #cir.bool<false> : !cir.bool
#fn_attr = #cir<extra({nothrow = #cir.nothrow})>
#fn_attr1 = #cir<extra({inline = #cir.inline<no>, nothrow = #cir.nothrow, optnone = #cir.optnone, uwtable = #cir.uwtable<async>})>
#true = #cir.bool<true> : !cir.bool
!ty_in_addr = !cir.record<struct "in_addr" {!u32i} #cir.record.decl.ast>
!ty_sockaddr = !cir.record<struct "sockaddr" {!u16i, !cir.array<!s8i x 14>} #cir.record.decl.ast>
!ty_sockaddr_in = !cir.record<struct "sockaddr_in" {!u16i, !u16i, !ty_in_addr, !cir.array<!u8i x 8>}>
module @"/workspaces/juliet-c/testcases/CWE369_Divide_by_Zero/s02/CWE369_Divide_by_Zero__int_listen_socket_divide_06.c" attributes {cir.lang = #cir.lang<c>, cir.sob = #cir.signed_overflow_behavior<undefined>, cir.triple = "x86_64-unknown-linux-gnu", cir.type_size_info = #cir.type_size_info<char = 8, int = 32, size_t = 64>, cir.uwtable = #cir.uwtable<async>, dlti.dl_spec = #dlti.dl_spec<i8 = dense<8> : vector<2xi64>, !llvm.ptr = dense<64> : vector<4xi64>, i1 = dense<8> : vector<2xi64>, f80 = dense<128> : vector<2xi64>, i128 = dense<128> : vector<2xi64>, !llvm.ptr<272> = dense<64> : vector<4xi64>, i64 = dense<64> : vector<2xi64>, f128 = dense<128> : vector<2xi64>, !llvm.ptr<271> = dense<32> : vector<4xi64>, !llvm.ptr<270> = dense<32> : vector<4xi64>, f64 = dense<64> : vector<2xi64>, f16 = dense<16> : vector<2xi64>, i16 = dense<16> : vector<2xi64>, i32 = dense<32> : vector<2xi64>, "dlti.stack_alignment" = 128 : i64, "dlti.endianness" = "little", "dlti.mangling_mode" = "e">} {
  cir.func private @socket(!s32i, !s32i, !s32i) -> !s32i extra(#fn_attr) loc(#loc504)
  cir.func private @htons(!u16i) -> !u16i extra(#fn_attr) loc(#loc505)
  cir.func private @bind(!s32i, !cir.ptr<!ty_sockaddr>, !u32i) -> !s32i extra(#fn_attr) loc(#loc506)
  cir.func private @listen(!s32i, !s32i) -> !s32i extra(#fn_attr) loc(#loc507)
  cir.func private @accept(!s32i, !cir.ptr<!ty_sockaddr>, !cir.ptr<!u32i>) -> !s32i loc(#loc508)
  cir.func private @recv(!s32i, !cir.ptr<!void>, !u64i, !s32i) -> !s64i loc(#loc509)
  cir.func private @atoi(!cir.ptr<!s8i>) -> !s32i extra(#fn_attr) loc(#loc510)
  cir.func private @close(!s32i) -> !s32i loc(#loc511)
  cir.func private @printIntLine(!s32i) loc(#loc512)
  cir.func no_proto @CWE369_Divide_by_Zero__int_listen_socket_divide_06_bad() extra(#fn_attr1) {
    %0 = cir.alloca !s32i, !cir.ptr<!s32i>, ["data"] {alignment = 4 : i64} loc(#loc514)
    %1 = cir.const #cir.int<1> : !s32i loc(#loc23)
    %2 = cir.unary(minus, %1) nsw : !s32i, !s32i loc(#loc24)
    cir.store %2, %0 : !s32i, !cir.ptr<!s32i> loc(#loc515)
    cir.scope {
      %3 = cir.const #cir.int<5> : !s32i loc(#loc28)
      %4 = cir.const #cir.int<5> : !s32i loc(#loc29)
      %5 = cir.cmp(eq, %3, %4) : !s32i, !cir.bool loc(#loc517)
      cir.if %5 {
        cir.scope {
          %6 = cir.alloca !s32i, !cir.ptr<!s32i>, ["recvResult"] {alignment = 4 : i64} loc(#loc520)
          %7 = cir.alloca !ty_sockaddr_in, !cir.ptr<!ty_sockaddr_in>, ["service"] {alignment = 4 : i64} loc(#loc521)
          %8 = cir.alloca !s32i, !cir.ptr<!s32i>, ["listenSocket", init] {alignment = 4 : i64} loc(#loc522)
          %9 = cir.alloca !s32i, !cir.ptr<!s32i>, ["acceptSocket", init] {alignment = 4 : i64} loc(#loc523)
          %10 = cir.alloca !cir.array<!s8i x 14>, !cir.ptr<!cir.array<!s8i x 14>>, ["inputBuffer"] {alignment = 1 : i64} loc(#loc524)
          %11 = cir.const #cir.int<1> : !s32i loc(#loc38)
          %12 = cir.unary(minus, %11) nsw : !s32i, !s32i loc(#loc38)
          cir.store %12, %8 : !s32i, !cir.ptr<!s32i> loc(#loc522)
          %13 = cir.const #cir.int<1> : !s32i loc(#loc40)
          %14 = cir.unary(minus, %13) nsw : !s32i, !s32i loc(#loc40)
          cir.store %14, %9 : !s32i, !cir.ptr<!s32i> loc(#loc523)
          cir.scope {
            cir.do {
              cir.scope {
                %15 = cir.const #cir.int<2> : !s32i loc(#loc47)
                %16 = cir.const #cir.int<1> : !s32i loc(#loc48)
                %17 = cir.const #cir.int<6> : !s32i loc(#loc49)
                %18 = cir.call @socket(%15, %16, %17) : (!s32i, !s32i, !s32i) -> !s32i extra(#fn_attr) loc(#loc50)
                cir.store %18, %8 : !s32i, !cir.ptr<!s32i> loc(#loc527)
                cir.scope {
                  %60 = cir.load %8 : !cir.ptr<!s32i>, !s32i loc(#loc55)
                  %61 = cir.const #cir.int<1> : !s32i loc(#loc56)
                  %62 = cir.unary(minus, %61) nsw : !s32i, !s32i loc(#loc56)
                  %63 = cir.cmp(eq, %60, %62) : !s32i, !cir.bool loc(#loc529)
                  cir.if %63 {
                    cir.break loc(#loc58)
                  } loc(#loc530)
                } loc(#loc528)
                %19 = cir.cast(bitcast, %7 : !cir.ptr<!ty_sockaddr_in>), !cir.ptr<!void> loc(#loc531)
                %20 = cir.const #cir.int<0> : !s32i loc(#loc61)
                %21 = cir.const #cir.int<16> : !u64i loc(#loc532)
                cir.libc.memset %21 bytes from %19 set to %20 : !cir.ptr<!void>, !s32i, !u64i loc(#loc533)
                %22 = cir.const #cir.int<2> : !s32i loc(#loc66)
                %23 = cir.cast(integral, %22 : !s32i), !u16i loc(#loc66)
                %24 = cir.get_member %7[0] {name = "sin_family"} : !cir.ptr<!ty_sockaddr_in> -> !cir.ptr<!u16i> loc(#loc67)
                cir.store %23, %24 : !u16i, !cir.ptr<!u16i> loc(#loc534)
                %25 = cir.const #cir.int<0> : !s32i loc(#loc69)
                %26 = cir.cast(integral, %25 : !s32i), !u32i loc(#loc69)
                %27 = cir.get_member %7[2] {name = "sin_addr"} : !cir.ptr<!ty_sockaddr_in> -> !cir.ptr<!ty_in_addr> loc(#loc70)
                %28 = cir.get_member %27[0] {name = "s_addr"} : !cir.ptr<!ty_in_addr> -> !cir.ptr<!u32i> loc(#loc71)
                cir.store %26, %28 : !u32i, !cir.ptr<!u32i> loc(#loc535)
                %29 = cir.const #cir.int<27015> : !s32i loc(#loc73)
                %30 = cir.cast(integral, %29 : !s32i), !u16i loc(#loc73)
                %31 = cir.call @htons(%30) : (!u16i) -> !u16i side_effect(const) extra(#fn_attr) loc(#loc74)
                %32 = cir.get_member %7[1] {name = "sin_port"} : !cir.ptr<!ty_sockaddr_in> -> !cir.ptr<!u16i> loc(#loc75)
                cir.store %31, %32 : !u16i, !cir.ptr<!u16i> loc(#loc536)
                cir.scope {
                  %60 = cir.load %8 : !cir.ptr<!s32i>, !s32i loc(#loc80)
                  %61 = cir.cast(bitcast, %7 : !cir.ptr<!ty_sockaddr_in>), !cir.ptr<!ty_sockaddr> loc(#loc538)
                  %62 = cir.const #cir.int<16> : !u64i loc(#loc539)
                  %63 = cir.cast(integral, %62 : !u64i), !u32i loc(#loc539)
                  %64 = cir.call @bind(%60, %61, %63) : (!s32i, !cir.ptr<!ty_sockaddr>, !u32i) -> !s32i extra(#fn_attr) loc(#loc85)
                  %65 = cir.const #cir.int<1> : !s32i loc(#loc86)
                  %66 = cir.unary(minus, %65) nsw : !s32i, !s32i loc(#loc86)
                  %67 = cir.cmp(eq, %64, %66) : !s32i, !cir.bool loc(#loc540)
                  cir.if %67 {
                    cir.break loc(#loc88)
                  } loc(#loc541)
                } loc(#loc537)
                cir.scope {
                  %60 = cir.load %8 : !cir.ptr<!s32i>, !s32i loc(#loc91)
                  %61 = cir.const #cir.int<5> : !s32i loc(#loc92)
                  %62 = cir.call @listen(%60, %61) : (!s32i, !s32i) -> !s32i extra(#fn_attr) loc(#loc93)
                  %63 = cir.const #cir.int<1> : !s32i loc(#loc94)
                  %64 = cir.unary(minus, %63) nsw : !s32i, !s32i loc(#loc94)
                  %65 = cir.cmp(eq, %62, %64) : !s32i, !cir.bool loc(#loc543)
                  cir.if %65 {
                    cir.break loc(#loc96)
                  } loc(#loc544)
                } loc(#loc542)
                %33 = cir.load %8 : !cir.ptr<!s32i>, !s32i loc(#loc97)
                %34 = cir.const #cir.ptr<null> : !cir.ptr<!ty_sockaddr> loc(#loc98)
                %35 = cir.const #cir.ptr<null> : !cir.ptr<!u32i> loc(#loc99)
                %36 = cir.call @accept(%33, %34, %35) : (!s32i, !cir.ptr<!ty_sockaddr>, !cir.ptr<!u32i>) -> !s32i loc(#loc100)
                cir.store %36, %9 : !s32i, !cir.ptr<!s32i> loc(#loc545)
                cir.scope {
                  %60 = cir.load %9 : !cir.ptr<!s32i>, !s32i loc(#loc105)
                  %61 = cir.const #cir.int<1> : !s32i loc(#loc106)
                  %62 = cir.unary(minus, %61) nsw : !s32i, !s32i loc(#loc106)
                  %63 = cir.cmp(eq, %60, %62) : !s32i, !cir.bool loc(#loc547)
                  cir.if %63 {
                    cir.break loc(#loc108)
                  } loc(#loc548)
                } loc(#loc546)
                %37 = cir.load %9 : !cir.ptr<!s32i>, !s32i loc(#loc109)
                %38 = cir.cast(array_to_ptrdecay, %10 : !cir.ptr<!cir.array<!s8i x 14>>), !cir.ptr<!s8i> loc(#loc110)
                %39 = cir.cast(bitcast, %38 : !cir.ptr<!s8i>), !cir.ptr<!void> loc(#loc110)
                %40 = cir.const #cir.int<3> : !s32i loc(#loc111)
                %41 = cir.cast(integral, %40 : !s32i), !u64i loc(#loc111)
                %42 = cir.const #cir.int<4> : !u64i loc(#loc111)
                %43 = cir.binop(mul, %41, %42) : !u64i loc(#loc111)
                %44 = cir.const #cir.int<2> : !s32i loc(#loc111)
                %45 = cir.cast(integral, %44 : !s32i), !u64i loc(#loc111)
                %46 = cir.binop(add, %43, %45) : !u64i loc(#loc111)
                %47 = cir.const #cir.int<1> : !s32i loc(#loc112)
                %48 = cir.cast(integral, %47 : !s32i), !u64i loc(#loc112)
                %49 = cir.binop(sub, %46, %48) : !u64i loc(#loc549)
                %50 = cir.const #cir.int<0> : !s32i loc(#loc113)
                %51 = cir.call @recv(%37, %39, %49, %50) : (!s32i, !cir.ptr<!void>, !u64i, !s32i) -> !s64i loc(#loc114)
                %52 = cir.cast(integral, %51 : !s64i), !s32i loc(#loc114)
                cir.store %52, %6 : !s32i, !cir.ptr<!s32i> loc(#loc550)
                cir.scope {
                  %60 = cir.load %6 : !cir.ptr<!s32i>, !s32i loc(#loc119)
                  %61 = cir.const #cir.int<1> : !s32i loc(#loc120)
                  %62 = cir.unary(minus, %61) nsw : !s32i, !s32i loc(#loc120)
                  %63 = cir.cmp(eq, %60, %62) : !s32i, !cir.bool loc(#loc552)
                  %64 = cir.ternary(%63, true {
                    %65 = cir.const #true loc(#loc121)
                    cir.yield %65 : !cir.bool loc(#loc121)
                  }, false {
                    %65 = cir.load %6 : !cir.ptr<!s32i>, !s32i loc(#loc122)
                    %66 = cir.const #cir.int<0> : !s32i loc(#loc123)
                    %67 = cir.cmp(eq, %65, %66) : !s32i, !cir.bool loc(#loc553)
                    %68 = cir.ternary(%67, true {
                      %69 = cir.const #true loc(#loc121)
                      cir.yield %69 : !cir.bool loc(#loc121)
                    }, false {
                      %69 = cir.const #false loc(#loc121)
                      cir.yield %69 : !cir.bool loc(#loc121)
                    }) : (!cir.bool) -> !cir.bool loc(#loc121)
                    cir.yield %68 : !cir.bool loc(#loc121)
                  }) : (!cir.bool) -> !cir.bool loc(#loc121)
                  cir.if %64 {
                    cir.break loc(#loc125)
                  } loc(#loc554)
                } loc(#loc551)
                %53 = cir.const #cir.int<0> : !s32i loc(#loc126)
                %54 = cir.cast(integral, %53 : !s32i), !s8i loc(#loc126)
                %55 = cir.load %6 : !cir.ptr<!s32i>, !s32i loc(#loc127)
                %56 = cir.cast(array_to_ptrdecay, %10 : !cir.ptr<!cir.array<!s8i x 14>>), !cir.ptr<!s8i> loc(#loc128)
                %57 = cir.ptr_stride(%56 : !cir.ptr<!s8i>, %55 : !s32i), !cir.ptr<!s8i> loc(#loc128)
                cir.store %54, %57 : !s8i, !cir.ptr<!s8i> loc(#loc555)
                %58 = cir.cast(array_to_ptrdecay, %10 : !cir.ptr<!cir.array<!s8i x 14>>), !cir.ptr<!s8i> loc(#loc129)
                %59 = cir.call @atoi(%58) : (!cir.ptr<!s8i>) -> !s32i side_effect(pure) extra(#fn_attr) loc(#loc130)
                cir.store %59, %0 : !s32i, !cir.ptr<!s32i> loc(#loc556)
              } loc(#loc526)
              cir.yield loc(#loc44)
            } while {
              %15 = cir.const #cir.int<0> : !s32i loc(#loc133)
              %16 = cir.cast(int_to_bool, %15 : !s32i), !cir.bool loc(#loc133)
              cir.condition(%16) loc(#loc133)
            } loc(#loc525)
          } loc(#loc525)
          cir.scope {
            %15 = cir.load %8 : !cir.ptr<!s32i>, !s32i loc(#loc136)
            %16 = cir.const #cir.int<1> : !s32i loc(#loc137)
            %17 = cir.unary(minus, %16) nsw : !s32i, !s32i loc(#loc137)
            %18 = cir.cmp(ne, %15, %17) : !s32i, !cir.bool loc(#loc558)
            cir.if %18 {
              %19 = cir.load %8 : !cir.ptr<!s32i>, !s32i loc(#loc139)
              %20 = cir.call @close(%19) : (!s32i) -> !s32i loc(#loc140)
            } loc(#loc559)
          } loc(#loc557)
          cir.scope {
            %15 = cir.load %9 : !cir.ptr<!s32i>, !s32i loc(#loc143)
            %16 = cir.const #cir.int<1> : !s32i loc(#loc144)
            %17 = cir.unary(minus, %16) nsw : !s32i, !s32i loc(#loc144)
            %18 = cir.cmp(ne, %15, %17) : !s32i, !cir.bool loc(#loc561)
            cir.if %18 {
              %19 = cir.load %9 : !cir.ptr<!s32i>, !s32i loc(#loc146)
              %20 = cir.call @close(%19) : (!s32i) -> !s32i loc(#loc147)
            } loc(#loc562)
          } loc(#loc560)
        } loc(#loc519)
      } loc(#loc518)
    } loc(#loc516)
    cir.scope {
      %3 = cir.const #cir.int<5> : !s32i loc(#loc150)
      %4 = cir.const #cir.int<5> : !s32i loc(#loc151)
      %5 = cir.cmp(eq, %3, %4) : !s32i, !cir.bool loc(#loc564)
      cir.if %5 {
        %6 = cir.const #cir.int<100> : !s32i loc(#loc153)
        %7 = cir.load %0 : !cir.ptr<!s32i>, !s32i loc(#loc154)
        %8 = cir.binop(div, %6, %7) : !s32i loc(#loc566)
        cir.call @printIntLine(%8) : (!s32i) -> () loc(#loc155)
      } loc(#loc565)
    } loc(#loc563)
    cir.return loc(#loc20)
  } loc(#loc513)
  cir.func no_proto @CWE369_Divide_by_Zero__int_listen_socket_divide_06_good() extra(#fn_attr1) {
    %0 = cir.get_global @goodB2G1 : !cir.ptr<!cir.func<()>> loc(#loc568)
    cir.call %0() : (!cir.ptr<!cir.func<()>>) -> () loc(#loc158)
    %1 = cir.get_global @goodB2G2 : !cir.ptr<!cir.func<()>> loc(#loc569)
    cir.call %1() : (!cir.ptr<!cir.func<()>>) -> () loc(#loc160)
    %2 = cir.get_global @goodG2B1 : !cir.ptr<!cir.func<()>> loc(#loc570)
    cir.call %2() : (!cir.ptr<!cir.func<()>>) -> () loc(#loc162)
    %3 = cir.get_global @goodG2B2 : !cir.ptr<!cir.func<()>> loc(#loc571)
    cir.call %3() : (!cir.ptr<!cir.func<()>>) -> () loc(#loc164)
    cir.return loc(#loc157)
  } loc(#loc567)
  cir.func private @printLine(!cir.ptr<!s8i>) loc(#loc572)
  cir.global "private" constant cir_private dsolocal @".str" = #cir.const_array<"Benign, fixed string\00" : !cir.array<!s8i x 21>> : !cir.array<!s8i x 21> {alignment = 1 : i64} loc(#loc168)
  cir.global "private" constant cir_private dsolocal @".str.1" = #cir.const_array<"This would result in a divide by zero\00" : !cir.array<!s8i x 38>> : !cir.array<!s8i x 38> {alignment = 1 : i64} loc(#loc169)
  cir.func no_proto internal private @goodB2G1() extra(#fn_attr1) {
    %0 = cir.alloca !s32i, !cir.ptr<!s32i>, ["data"] {alignment = 4 : i64} loc(#loc574)
    %1 = cir.const #cir.int<1> : !s32i loc(#loc174)
    %2 = cir.unary(minus, %1) nsw : !s32i, !s32i loc(#loc175)
    cir.store %2, %0 : !s32i, !cir.ptr<!s32i> loc(#loc575)
    cir.scope {
      %3 = cir.const #cir.int<5> : !s32i loc(#loc179)
      %4 = cir.const #cir.int<5> : !s32i loc(#loc180)
      %5 = cir.cmp(eq, %3, %4) : !s32i, !cir.bool loc(#loc577)
      cir.if %5 {
        cir.scope {
          %6 = cir.alloca !s32i, !cir.ptr<!s32i>, ["recvResult"] {alignment = 4 : i64} loc(#loc580)
          %7 = cir.alloca !ty_sockaddr_in, !cir.ptr<!ty_sockaddr_in>, ["service"] {alignment = 4 : i64} loc(#loc581)
          %8 = cir.alloca !s32i, !cir.ptr<!s32i>, ["listenSocket", init] {alignment = 4 : i64} loc(#loc582)
          %9 = cir.alloca !s32i, !cir.ptr<!s32i>, ["acceptSocket", init] {alignment = 4 : i64} loc(#loc583)
          %10 = cir.alloca !cir.array<!s8i x 14>, !cir.ptr<!cir.array<!s8i x 14>>, ["inputBuffer"] {alignment = 1 : i64} loc(#loc584)
          %11 = cir.const #cir.int<1> : !s32i loc(#loc189)
          %12 = cir.unary(minus, %11) nsw : !s32i, !s32i loc(#loc189)
          cir.store %12, %8 : !s32i, !cir.ptr<!s32i> loc(#loc582)
          %13 = cir.const #cir.int<1> : !s32i loc(#loc191)
          %14 = cir.unary(minus, %13) nsw : !s32i, !s32i loc(#loc191)
          cir.store %14, %9 : !s32i, !cir.ptr<!s32i> loc(#loc583)
          cir.scope {
            cir.do {
              cir.scope {
                %15 = cir.const #cir.int<2> : !s32i loc(#loc198)
                %16 = cir.const #cir.int<1> : !s32i loc(#loc199)
                %17 = cir.const #cir.int<6> : !s32i loc(#loc200)
                %18 = cir.call @socket(%15, %16, %17) : (!s32i, !s32i, !s32i) -> !s32i extra(#fn_attr) loc(#loc201)
                cir.store %18, %8 : !s32i, !cir.ptr<!s32i> loc(#loc587)
                cir.scope {
                  %60 = cir.load %8 : !cir.ptr<!s32i>, !s32i loc(#loc206)
                  %61 = cir.const #cir.int<1> : !s32i loc(#loc207)
                  %62 = cir.unary(minus, %61) nsw : !s32i, !s32i loc(#loc207)
                  %63 = cir.cmp(eq, %60, %62) : !s32i, !cir.bool loc(#loc589)
                  cir.if %63 {
                    cir.break loc(#loc209)
                  } loc(#loc590)
                } loc(#loc588)
                %19 = cir.cast(bitcast, %7 : !cir.ptr<!ty_sockaddr_in>), !cir.ptr<!void> loc(#loc591)
                %20 = cir.const #cir.int<0> : !s32i loc(#loc212)
                %21 = cir.const #cir.int<16> : !u64i loc(#loc592)
                cir.libc.memset %21 bytes from %19 set to %20 : !cir.ptr<!void>, !s32i, !u64i loc(#loc593)
                %22 = cir.const #cir.int<2> : !s32i loc(#loc217)
                %23 = cir.cast(integral, %22 : !s32i), !u16i loc(#loc217)
                %24 = cir.get_member %7[0] {name = "sin_family"} : !cir.ptr<!ty_sockaddr_in> -> !cir.ptr<!u16i> loc(#loc67)
                cir.store %23, %24 : !u16i, !cir.ptr<!u16i> loc(#loc594)
                %25 = cir.const #cir.int<0> : !s32i loc(#loc219)
                %26 = cir.cast(integral, %25 : !s32i), !u32i loc(#loc219)
                %27 = cir.get_member %7[2] {name = "sin_addr"} : !cir.ptr<!ty_sockaddr_in> -> !cir.ptr<!ty_in_addr> loc(#loc70)
                %28 = cir.get_member %27[0] {name = "s_addr"} : !cir.ptr<!ty_in_addr> -> !cir.ptr<!u32i> loc(#loc71)
                cir.store %26, %28 : !u32i, !cir.ptr<!u32i> loc(#loc595)
                %29 = cir.const #cir.int<27015> : !s32i loc(#loc221)
                %30 = cir.cast(integral, %29 : !s32i), !u16i loc(#loc221)
                %31 = cir.call @htons(%30) : (!u16i) -> !u16i side_effect(const) extra(#fn_attr) loc(#loc222)
                %32 = cir.get_member %7[1] {name = "sin_port"} : !cir.ptr<!ty_sockaddr_in> -> !cir.ptr<!u16i> loc(#loc75)
                cir.store %31, %32 : !u16i, !cir.ptr<!u16i> loc(#loc596)
                cir.scope {
                  %60 = cir.load %8 : !cir.ptr<!s32i>, !s32i loc(#loc227)
                  %61 = cir.cast(bitcast, %7 : !cir.ptr<!ty_sockaddr_in>), !cir.ptr<!ty_sockaddr> loc(#loc598)
                  %62 = cir.const #cir.int<16> : !u64i loc(#loc599)
                  %63 = cir.cast(integral, %62 : !u64i), !u32i loc(#loc599)
                  %64 = cir.call @bind(%60, %61, %63) : (!s32i, !cir.ptr<!ty_sockaddr>, !u32i) -> !s32i extra(#fn_attr) loc(#loc232)
                  %65 = cir.const #cir.int<1> : !s32i loc(#loc233)
                  %66 = cir.unary(minus, %65) nsw : !s32i, !s32i loc(#loc233)
                  %67 = cir.cmp(eq, %64, %66) : !s32i, !cir.bool loc(#loc600)
                  cir.if %67 {
                    cir.break loc(#loc235)
                  } loc(#loc601)
                } loc(#loc597)
                cir.scope {
                  %60 = cir.load %8 : !cir.ptr<!s32i>, !s32i loc(#loc238)
                  %61 = cir.const #cir.int<5> : !s32i loc(#loc239)
                  %62 = cir.call @listen(%60, %61) : (!s32i, !s32i) -> !s32i extra(#fn_attr) loc(#loc240)
                  %63 = cir.const #cir.int<1> : !s32i loc(#loc241)
                  %64 = cir.unary(minus, %63) nsw : !s32i, !s32i loc(#loc241)
                  %65 = cir.cmp(eq, %62, %64) : !s32i, !cir.bool loc(#loc603)
                  cir.if %65 {
                    cir.break loc(#loc243)
                  } loc(#loc604)
                } loc(#loc602)
                %33 = cir.load %8 : !cir.ptr<!s32i>, !s32i loc(#loc244)
                %34 = cir.const #cir.ptr<null> : !cir.ptr<!ty_sockaddr> loc(#loc245)
                %35 = cir.const #cir.ptr<null> : !cir.ptr<!u32i> loc(#loc246)
                %36 = cir.call @accept(%33, %34, %35) : (!s32i, !cir.ptr<!ty_sockaddr>, !cir.ptr<!u32i>) -> !s32i loc(#loc247)
                cir.store %36, %9 : !s32i, !cir.ptr<!s32i> loc(#loc605)
                cir.scope {
                  %60 = cir.load %9 : !cir.ptr<!s32i>, !s32i loc(#loc252)
                  %61 = cir.const #cir.int<1> : !s32i loc(#loc253)
                  %62 = cir.unary(minus, %61) nsw : !s32i, !s32i loc(#loc253)
                  %63 = cir.cmp(eq, %60, %62) : !s32i, !cir.bool loc(#loc607)
                  cir.if %63 {
                    cir.break loc(#loc255)
                  } loc(#loc608)
                } loc(#loc606)
                %37 = cir.load %9 : !cir.ptr<!s32i>, !s32i loc(#loc256)
                %38 = cir.cast(array_to_ptrdecay, %10 : !cir.ptr<!cir.array<!s8i x 14>>), !cir.ptr<!s8i> loc(#loc257)
                %39 = cir.cast(bitcast, %38 : !cir.ptr<!s8i>), !cir.ptr<!void> loc(#loc257)
                %40 = cir.const #cir.int<3> : !s32i loc(#loc258)
                %41 = cir.cast(integral, %40 : !s32i), !u64i loc(#loc258)
                %42 = cir.const #cir.int<4> : !u64i loc(#loc258)
                %43 = cir.binop(mul, %41, %42) : !u64i loc(#loc258)
                %44 = cir.const #cir.int<2> : !s32i loc(#loc258)
                %45 = cir.cast(integral, %44 : !s32i), !u64i loc(#loc258)
                %46 = cir.binop(add, %43, %45) : !u64i loc(#loc258)
                %47 = cir.const #cir.int<1> : !s32i loc(#loc259)
                %48 = cir.cast(integral, %47 : !s32i), !u64i loc(#loc259)
                %49 = cir.binop(sub, %46, %48) : !u64i loc(#loc609)
                %50 = cir.const #cir.int<0> : !s32i loc(#loc260)
                %51 = cir.call @recv(%37, %39, %49, %50) : (!s32i, !cir.ptr<!void>, !u64i, !s32i) -> !s64i loc(#loc261)
                %52 = cir.cast(integral, %51 : !s64i), !s32i loc(#loc261)
                cir.store %52, %6 : !s32i, !cir.ptr<!s32i> loc(#loc610)
                cir.scope {
                  %60 = cir.load %6 : !cir.ptr<!s32i>, !s32i loc(#loc266)
                  %61 = cir.const #cir.int<1> : !s32i loc(#loc267)
                  %62 = cir.unary(minus, %61) nsw : !s32i, !s32i loc(#loc267)
                  %63 = cir.cmp(eq, %60, %62) : !s32i, !cir.bool loc(#loc612)
                  %64 = cir.ternary(%63, true {
                    %65 = cir.const #true loc(#loc268)
                    cir.yield %65 : !cir.bool loc(#loc268)
                  }, false {
                    %65 = cir.load %6 : !cir.ptr<!s32i>, !s32i loc(#loc269)
                    %66 = cir.const #cir.int<0> : !s32i loc(#loc270)
                    %67 = cir.cmp(eq, %65, %66) : !s32i, !cir.bool loc(#loc613)
                    %68 = cir.ternary(%67, true {
                      %69 = cir.const #true loc(#loc268)
                      cir.yield %69 : !cir.bool loc(#loc268)
                    }, false {
                      %69 = cir.const #false loc(#loc268)
                      cir.yield %69 : !cir.bool loc(#loc268)
                    }) : (!cir.bool) -> !cir.bool loc(#loc268)
                    cir.yield %68 : !cir.bool loc(#loc268)
                  }) : (!cir.bool) -> !cir.bool loc(#loc268)
                  cir.if %64 {
                    cir.break loc(#loc272)
                  } loc(#loc614)
                } loc(#loc611)
                %53 = cir.const #cir.int<0> : !s32i loc(#loc273)
                %54 = cir.cast(integral, %53 : !s32i), !s8i loc(#loc273)
                %55 = cir.load %6 : !cir.ptr<!s32i>, !s32i loc(#loc274)
                %56 = cir.cast(array_to_ptrdecay, %10 : !cir.ptr<!cir.array<!s8i x 14>>), !cir.ptr<!s8i> loc(#loc275)
                %57 = cir.ptr_stride(%56 : !cir.ptr<!s8i>, %55 : !s32i), !cir.ptr<!s8i> loc(#loc275)
                cir.store %54, %57 : !s8i, !cir.ptr<!s8i> loc(#loc615)
                %58 = cir.cast(array_to_ptrdecay, %10 : !cir.ptr<!cir.array<!s8i x 14>>), !cir.ptr<!s8i> loc(#loc276)
                %59 = cir.call @atoi(%58) : (!cir.ptr<!s8i>) -> !s32i side_effect(pure) extra(#fn_attr) loc(#loc277)
                cir.store %59, %0 : !s32i, !cir.ptr<!s32i> loc(#loc616)
              } loc(#loc586)
              cir.yield loc(#loc195)
            } while {
              %15 = cir.const #cir.int<0> : !s32i loc(#loc280)
              %16 = cir.cast(int_to_bool, %15 : !s32i), !cir.bool loc(#loc280)
              cir.condition(%16) loc(#loc280)
            } loc(#loc585)
          } loc(#loc585)
          cir.scope {
            %15 = cir.load %8 : !cir.ptr<!s32i>, !s32i loc(#loc283)
            %16 = cir.const #cir.int<1> : !s32i loc(#loc284)
            %17 = cir.unary(minus, %16) nsw : !s32i, !s32i loc(#loc284)
            %18 = cir.cmp(ne, %15, %17) : !s32i, !cir.bool loc(#loc618)
            cir.if %18 {
              %19 = cir.load %8 : !cir.ptr<!s32i>, !s32i loc(#loc286)
              %20 = cir.call @close(%19) : (!s32i) -> !s32i loc(#loc287)
            } loc(#loc619)
          } loc(#loc617)
          cir.scope {
            %15 = cir.load %9 : !cir.ptr<!s32i>, !s32i loc(#loc290)
            %16 = cir.const #cir.int<1> : !s32i loc(#loc291)
            %17 = cir.unary(minus, %16) nsw : !s32i, !s32i loc(#loc291)
            %18 = cir.cmp(ne, %15, %17) : !s32i, !cir.bool loc(#loc621)
            cir.if %18 {
              %19 = cir.load %9 : !cir.ptr<!s32i>, !s32i loc(#loc293)
              %20 = cir.call @close(%19) : (!s32i) -> !s32i loc(#loc294)
            } loc(#loc622)
          } loc(#loc620)
        } loc(#loc579)
      } loc(#loc578)
    } loc(#loc576)
    cir.scope {
      %3 = cir.const #cir.int<5> : !s32i loc(#loc297)
      %4 = cir.const #cir.int<5> : !s32i loc(#loc298)
      %5 = cir.cmp(ne, %3, %4) : !s32i, !cir.bool loc(#loc624)
      cir.if %5 {
        %6 = cir.get_global @".str" : !cir.ptr<!cir.array<!s8i x 21>> loc(#loc168)
        %7 = cir.cast(array_to_ptrdecay, %6 : !cir.ptr<!cir.array<!s8i x 21>>), !cir.ptr<!s8i> loc(#loc168)
        cir.call @printLine(%7) : (!cir.ptr<!s8i>) -> () loc(#loc302)
      } else {
        cir.scope {
          %6 = cir.load %0 : !cir.ptr<!s32i>, !s32i loc(#loc305)
          %7 = cir.const #cir.int<0> : !s32i loc(#loc306)
          %8 = cir.cmp(ne, %6, %7) : !s32i, !cir.bool loc(#loc627)
          cir.if %8 {
            %9 = cir.const #cir.int<100> : !s32i loc(#loc310)
            %10 = cir.load %0 : !cir.ptr<!s32i>, !s32i loc(#loc311)
            %11 = cir.binop(div, %9, %10) : !s32i loc(#loc629)
            cir.call @printIntLine(%11) : (!s32i) -> () loc(#loc312)
          } else {
            %9 = cir.get_global @".str.1" : !cir.ptr<!cir.array<!s8i x 38>> loc(#loc169)
            %10 = cir.cast(array_to_ptrdecay, %9 : !cir.ptr<!cir.array<!s8i x 38>>), !cir.ptr<!s8i> loc(#loc169)
            cir.call @printLine(%10) : (!cir.ptr<!s8i>) -> () loc(#loc313)
          } loc(#loc628)
        } loc(#loc626)
      } loc(#loc625)
    } loc(#loc623)
    cir.return loc(#loc171)
  } loc(#loc573)
  cir.func no_proto internal private @goodB2G2() extra(#fn_attr1) {
    %0 = cir.alloca !s32i, !cir.ptr<!s32i>, ["data"] {alignment = 4 : i64} loc(#loc631)
    %1 = cir.const #cir.int<1> : !s32i loc(#loc318)
    %2 = cir.unary(minus, %1) nsw : !s32i, !s32i loc(#loc319)
    cir.store %2, %0 : !s32i, !cir.ptr<!s32i> loc(#loc632)
    cir.scope {
      %3 = cir.const #cir.int<5> : !s32i loc(#loc323)
      %4 = cir.const #cir.int<5> : !s32i loc(#loc324)
      %5 = cir.cmp(eq, %3, %4) : !s32i, !cir.bool loc(#loc634)
      cir.if %5 {
        cir.scope {
          %6 = cir.alloca !s32i, !cir.ptr<!s32i>, ["recvResult"] {alignment = 4 : i64} loc(#loc637)
          %7 = cir.alloca !ty_sockaddr_in, !cir.ptr<!ty_sockaddr_in>, ["service"] {alignment = 4 : i64} loc(#loc638)
          %8 = cir.alloca !s32i, !cir.ptr<!s32i>, ["listenSocket", init] {alignment = 4 : i64} loc(#loc639)
          %9 = cir.alloca !s32i, !cir.ptr<!s32i>, ["acceptSocket", init] {alignment = 4 : i64} loc(#loc640)
          %10 = cir.alloca !cir.array<!s8i x 14>, !cir.ptr<!cir.array<!s8i x 14>>, ["inputBuffer"] {alignment = 1 : i64} loc(#loc641)
          %11 = cir.const #cir.int<1> : !s32i loc(#loc333)
          %12 = cir.unary(minus, %11) nsw : !s32i, !s32i loc(#loc333)
          cir.store %12, %8 : !s32i, !cir.ptr<!s32i> loc(#loc639)
          %13 = cir.const #cir.int<1> : !s32i loc(#loc335)
          %14 = cir.unary(minus, %13) nsw : !s32i, !s32i loc(#loc335)
          cir.store %14, %9 : !s32i, !cir.ptr<!s32i> loc(#loc640)
          cir.scope {
            cir.do {
              cir.scope {
                %15 = cir.const #cir.int<2> : !s32i loc(#loc342)
                %16 = cir.const #cir.int<1> : !s32i loc(#loc343)
                %17 = cir.const #cir.int<6> : !s32i loc(#loc344)
                %18 = cir.call @socket(%15, %16, %17) : (!s32i, !s32i, !s32i) -> !s32i extra(#fn_attr) loc(#loc345)
                cir.store %18, %8 : !s32i, !cir.ptr<!s32i> loc(#loc644)
                cir.scope {
                  %60 = cir.load %8 : !cir.ptr<!s32i>, !s32i loc(#loc350)
                  %61 = cir.const #cir.int<1> : !s32i loc(#loc351)
                  %62 = cir.unary(minus, %61) nsw : !s32i, !s32i loc(#loc351)
                  %63 = cir.cmp(eq, %60, %62) : !s32i, !cir.bool loc(#loc646)
                  cir.if %63 {
                    cir.break loc(#loc353)
                  } loc(#loc647)
                } loc(#loc645)
                %19 = cir.cast(bitcast, %7 : !cir.ptr<!ty_sockaddr_in>), !cir.ptr<!void> loc(#loc648)
                %20 = cir.const #cir.int<0> : !s32i loc(#loc356)
                %21 = cir.const #cir.int<16> : !u64i loc(#loc649)
                cir.libc.memset %21 bytes from %19 set to %20 : !cir.ptr<!void>, !s32i, !u64i loc(#loc650)
                %22 = cir.const #cir.int<2> : !s32i loc(#loc361)
                %23 = cir.cast(integral, %22 : !s32i), !u16i loc(#loc361)
                %24 = cir.get_member %7[0] {name = "sin_family"} : !cir.ptr<!ty_sockaddr_in> -> !cir.ptr<!u16i> loc(#loc67)
                cir.store %23, %24 : !u16i, !cir.ptr<!u16i> loc(#loc651)
                %25 = cir.const #cir.int<0> : !s32i loc(#loc363)
                %26 = cir.cast(integral, %25 : !s32i), !u32i loc(#loc363)
                %27 = cir.get_member %7[2] {name = "sin_addr"} : !cir.ptr<!ty_sockaddr_in> -> !cir.ptr<!ty_in_addr> loc(#loc70)
                %28 = cir.get_member %27[0] {name = "s_addr"} : !cir.ptr<!ty_in_addr> -> !cir.ptr<!u32i> loc(#loc71)
                cir.store %26, %28 : !u32i, !cir.ptr<!u32i> loc(#loc652)
                %29 = cir.const #cir.int<27015> : !s32i loc(#loc365)
                %30 = cir.cast(integral, %29 : !s32i), !u16i loc(#loc365)
                %31 = cir.call @htons(%30) : (!u16i) -> !u16i side_effect(const) extra(#fn_attr) loc(#loc366)
                %32 = cir.get_member %7[1] {name = "sin_port"} : !cir.ptr<!ty_sockaddr_in> -> !cir.ptr<!u16i> loc(#loc75)
                cir.store %31, %32 : !u16i, !cir.ptr<!u16i> loc(#loc653)
                cir.scope {
                  %60 = cir.load %8 : !cir.ptr<!s32i>, !s32i loc(#loc371)
                  %61 = cir.cast(bitcast, %7 : !cir.ptr<!ty_sockaddr_in>), !cir.ptr<!ty_sockaddr> loc(#loc655)
                  %62 = cir.const #cir.int<16> : !u64i loc(#loc656)
                  %63 = cir.cast(integral, %62 : !u64i), !u32i loc(#loc656)
                  %64 = cir.call @bind(%60, %61, %63) : (!s32i, !cir.ptr<!ty_sockaddr>, !u32i) -> !s32i extra(#fn_attr) loc(#loc376)
                  %65 = cir.const #cir.int<1> : !s32i loc(#loc377)
                  %66 = cir.unary(minus, %65) nsw : !s32i, !s32i loc(#loc377)
                  %67 = cir.cmp(eq, %64, %66) : !s32i, !cir.bool loc(#loc657)
                  cir.if %67 {
                    cir.break loc(#loc379)
                  } loc(#loc658)
                } loc(#loc654)
                cir.scope {
                  %60 = cir.load %8 : !cir.ptr<!s32i>, !s32i loc(#loc382)
                  %61 = cir.const #cir.int<5> : !s32i loc(#loc383)
                  %62 = cir.call @listen(%60, %61) : (!s32i, !s32i) -> !s32i extra(#fn_attr) loc(#loc384)
                  %63 = cir.const #cir.int<1> : !s32i loc(#loc385)
                  %64 = cir.unary(minus, %63) nsw : !s32i, !s32i loc(#loc385)
                  %65 = cir.cmp(eq, %62, %64) : !s32i, !cir.bool loc(#loc660)
                  cir.if %65 {
                    cir.break loc(#loc387)
                  } loc(#loc661)
                } loc(#loc659)
                %33 = cir.load %8 : !cir.ptr<!s32i>, !s32i loc(#loc388)
                %34 = cir.const #cir.ptr<null> : !cir.ptr<!ty_sockaddr> loc(#loc389)
                %35 = cir.const #cir.ptr<null> : !cir.ptr<!u32i> loc(#loc390)
                %36 = cir.call @accept(%33, %34, %35) : (!s32i, !cir.ptr<!ty_sockaddr>, !cir.ptr<!u32i>) -> !s32i loc(#loc391)
                cir.store %36, %9 : !s32i, !cir.ptr<!s32i> loc(#loc662)
                cir.scope {
                  %60 = cir.load %9 : !cir.ptr<!s32i>, !s32i loc(#loc396)
                  %61 = cir.const #cir.int<1> : !s32i loc(#loc397)
                  %62 = cir.unary(minus, %61) nsw : !s32i, !s32i loc(#loc397)
                  %63 = cir.cmp(eq, %60, %62) : !s32i, !cir.bool loc(#loc664)
                  cir.if %63 {
                    cir.break loc(#loc399)
                  } loc(#loc665)
                } loc(#loc663)
                %37 = cir.load %9 : !cir.ptr<!s32i>, !s32i loc(#loc400)
                %38 = cir.cast(array_to_ptrdecay, %10 : !cir.ptr<!cir.array<!s8i x 14>>), !cir.ptr<!s8i> loc(#loc401)
                %39 = cir.cast(bitcast, %38 : !cir.ptr<!s8i>), !cir.ptr<!void> loc(#loc401)
                %40 = cir.const #cir.int<3> : !s32i loc(#loc402)
                %41 = cir.cast(integral, %40 : !s32i), !u64i loc(#loc402)
                %42 = cir.const #cir.int<4> : !u64i loc(#loc402)
                %43 = cir.binop(mul, %41, %42) : !u64i loc(#loc402)
                %44 = cir.const #cir.int<2> : !s32i loc(#loc402)
                %45 = cir.cast(integral, %44 : !s32i), !u64i loc(#loc402)
                %46 = cir.binop(add, %43, %45) : !u64i loc(#loc402)
                %47 = cir.const #cir.int<1> : !s32i loc(#loc403)
                %48 = cir.cast(integral, %47 : !s32i), !u64i loc(#loc403)
                %49 = cir.binop(sub, %46, %48) : !u64i loc(#loc666)
                %50 = cir.const #cir.int<0> : !s32i loc(#loc404)
                %51 = cir.call @recv(%37, %39, %49, %50) : (!s32i, !cir.ptr<!void>, !u64i, !s32i) -> !s64i loc(#loc405)
                %52 = cir.cast(integral, %51 : !s64i), !s32i loc(#loc405)
                cir.store %52, %6 : !s32i, !cir.ptr<!s32i> loc(#loc667)
                cir.scope {
                  %60 = cir.load %6 : !cir.ptr<!s32i>, !s32i loc(#loc410)
                  %61 = cir.const #cir.int<1> : !s32i loc(#loc411)
                  %62 = cir.unary(minus, %61) nsw : !s32i, !s32i loc(#loc411)
                  %63 = cir.cmp(eq, %60, %62) : !s32i, !cir.bool loc(#loc669)
                  %64 = cir.ternary(%63, true {
                    %65 = cir.const #true loc(#loc412)
                    cir.yield %65 : !cir.bool loc(#loc412)
                  }, false {
                    %65 = cir.load %6 : !cir.ptr<!s32i>, !s32i loc(#loc413)
                    %66 = cir.const #cir.int<0> : !s32i loc(#loc414)
                    %67 = cir.cmp(eq, %65, %66) : !s32i, !cir.bool loc(#loc670)
                    %68 = cir.ternary(%67, true {
                      %69 = cir.const #true loc(#loc412)
                      cir.yield %69 : !cir.bool loc(#loc412)
                    }, false {
                      %69 = cir.const #false loc(#loc412)
                      cir.yield %69 : !cir.bool loc(#loc412)
                    }) : (!cir.bool) -> !cir.bool loc(#loc412)
                    cir.yield %68 : !cir.bool loc(#loc412)
                  }) : (!cir.bool) -> !cir.bool loc(#loc412)
                  cir.if %64 {
                    cir.break loc(#loc416)
                  } loc(#loc671)
                } loc(#loc668)
                %53 = cir.const #cir.int<0> : !s32i loc(#loc417)
                %54 = cir.cast(integral, %53 : !s32i), !s8i loc(#loc417)
                %55 = cir.load %6 : !cir.ptr<!s32i>, !s32i loc(#loc418)
                %56 = cir.cast(array_to_ptrdecay, %10 : !cir.ptr<!cir.array<!s8i x 14>>), !cir.ptr<!s8i> loc(#loc419)
                %57 = cir.ptr_stride(%56 : !cir.ptr<!s8i>, %55 : !s32i), !cir.ptr<!s8i> loc(#loc419)
                cir.store %54, %57 : !s8i, !cir.ptr<!s8i> loc(#loc672)
                %58 = cir.cast(array_to_ptrdecay, %10 : !cir.ptr<!cir.array<!s8i x 14>>), !cir.ptr<!s8i> loc(#loc420)
                %59 = cir.call @atoi(%58) : (!cir.ptr<!s8i>) -> !s32i side_effect(pure) extra(#fn_attr) loc(#loc421)
                cir.store %59, %0 : !s32i, !cir.ptr<!s32i> loc(#loc673)
              } loc(#loc643)
              cir.yield loc(#loc339)
            } while {
              %15 = cir.const #cir.int<0> : !s32i loc(#loc424)
              %16 = cir.cast(int_to_bool, %15 : !s32i), !cir.bool loc(#loc424)
              cir.condition(%16) loc(#loc424)
            } loc(#loc642)
          } loc(#loc642)
          cir.scope {
            %15 = cir.load %8 : !cir.ptr<!s32i>, !s32i loc(#loc427)
            %16 = cir.const #cir.int<1> : !s32i loc(#loc428)
            %17 = cir.unary(minus, %16) nsw : !s32i, !s32i loc(#loc428)
            %18 = cir.cmp(ne, %15, %17) : !s32i, !cir.bool loc(#loc675)
            cir.if %18 {
              %19 = cir.load %8 : !cir.ptr<!s32i>, !s32i loc(#loc430)
              %20 = cir.call @close(%19) : (!s32i) -> !s32i loc(#loc431)
            } loc(#loc676)
          } loc(#loc674)
          cir.scope {
            %15 = cir.load %9 : !cir.ptr<!s32i>, !s32i loc(#loc434)
            %16 = cir.const #cir.int<1> : !s32i loc(#loc435)
            %17 = cir.unary(minus, %16) nsw : !s32i, !s32i loc(#loc435)
            %18 = cir.cmp(ne, %15, %17) : !s32i, !cir.bool loc(#loc678)
            cir.if %18 {
              %19 = cir.load %9 : !cir.ptr<!s32i>, !s32i loc(#loc437)
              %20 = cir.call @close(%19) : (!s32i) -> !s32i loc(#loc438)
            } loc(#loc679)
          } loc(#loc677)
        } loc(#loc636)
      } loc(#loc635)
    } loc(#loc633)
    cir.scope {
      %3 = cir.const #cir.int<5> : !s32i loc(#loc441)
      %4 = cir.const #cir.int<5> : !s32i loc(#loc442)
      %5 = cir.cmp(eq, %3, %4) : !s32i, !cir.bool loc(#loc681)
      cir.if %5 {
        cir.scope {
          %6 = cir.load %0 : !cir.ptr<!s32i>, !s32i loc(#loc446)
          %7 = cir.const #cir.int<0> : !s32i loc(#loc447)
          %8 = cir.cmp(ne, %6, %7) : !s32i, !cir.bool loc(#loc684)
          cir.if %8 {
            %9 = cir.const #cir.int<100> : !s32i loc(#loc451)
            %10 = cir.load %0 : !cir.ptr<!s32i>, !s32i loc(#loc452)
            %11 = cir.binop(div, %9, %10) : !s32i loc(#loc686)
            cir.call @printIntLine(%11) : (!s32i) -> () loc(#loc453)
          } else {
            %9 = cir.get_global @".str.1" : !cir.ptr<!cir.array<!s8i x 38>> loc(#loc454)
            %10 = cir.cast(array_to_ptrdecay, %9 : !cir.ptr<!cir.array<!s8i x 38>>), !cir.ptr<!s8i> loc(#loc454)
            cir.call @printLine(%10) : (!cir.ptr<!s8i>) -> () loc(#loc455)
          } loc(#loc685)
        } loc(#loc683)
      } loc(#loc682)
    } loc(#loc680)
    cir.return loc(#loc315)
  } loc(#loc630)
  cir.func no_proto internal private @goodG2B1() extra(#fn_attr1) {
    %0 = cir.alloca !s32i, !cir.ptr<!s32i>, ["data"] {alignment = 4 : i64} loc(#loc688)
    %1 = cir.const #cir.int<1> : !s32i loc(#loc460)
    %2 = cir.unary(minus, %1) nsw : !s32i, !s32i loc(#loc461)
    cir.store %2, %0 : !s32i, !cir.ptr<!s32i> loc(#loc689)
    cir.scope {
      %3 = cir.const #cir.int<5> : !s32i loc(#loc465)
      %4 = cir.const #cir.int<5> : !s32i loc(#loc466)
      %5 = cir.cmp(ne, %3, %4) : !s32i, !cir.bool loc(#loc691)
      cir.if %5 {
        %6 = cir.get_global @".str" : !cir.ptr<!cir.array<!s8i x 21>> loc(#loc470)
        %7 = cir.cast(array_to_ptrdecay, %6 : !cir.ptr<!cir.array<!s8i x 21>>), !cir.ptr<!s8i> loc(#loc470)
        cir.call @printLine(%7) : (!cir.ptr<!s8i>) -> () loc(#loc471)
      } else {
        %6 = cir.const #cir.int<7> : !s32i loc(#loc472)
        cir.store %6, %0 : !s32i, !cir.ptr<!s32i> loc(#loc693)
      } loc(#loc692)
    } loc(#loc690)
    cir.scope {
      %3 = cir.const #cir.int<5> : !s32i loc(#loc476)
      %4 = cir.const #cir.int<5> : !s32i loc(#loc477)
      %5 = cir.cmp(eq, %3, %4) : !s32i, !cir.bool loc(#loc695)
      cir.if %5 {
        %6 = cir.const #cir.int<100> : !s32i loc(#loc479)
        %7 = cir.load %0 : !cir.ptr<!s32i>, !s32i loc(#loc480)
        %8 = cir.binop(div, %6, %7) : !s32i loc(#loc697)
        cir.call @printIntLine(%8) : (!s32i) -> () loc(#loc481)
      } loc(#loc696)
    } loc(#loc694)
    cir.return loc(#loc457)
  } loc(#loc687)
  cir.func no_proto internal private @goodG2B2() extra(#fn_attr1) {
    %0 = cir.alloca !s32i, !cir.ptr<!s32i>, ["data"] {alignment = 4 : i64} loc(#loc699)
    %1 = cir.const #cir.int<1> : !s32i loc(#loc486)
    %2 = cir.unary(minus, %1) nsw : !s32i, !s32i loc(#loc487)
    cir.store %2, %0 : !s32i, !cir.ptr<!s32i> loc(#loc700)
    cir.scope {
      %3 = cir.const #cir.int<5> : !s32i loc(#loc491)
      %4 = cir.const #cir.int<5> : !s32i loc(#loc492)
      %5 = cir.cmp(eq, %3, %4) : !s32i, !cir.bool loc(#loc702)
      cir.if %5 {
        %6 = cir.const #cir.int<7> : !s32i loc(#loc494)
        cir.store %6, %0 : !s32i, !cir.ptr<!s32i> loc(#loc704)
      } loc(#loc703)
    } loc(#loc701)
    cir.scope {
      %3 = cir.const #cir.int<5> : !s32i loc(#loc498)
      %4 = cir.const #cir.int<5> : !s32i loc(#loc499)
      %5 = cir.cmp(eq, %3, %4) : !s32i, !cir.bool loc(#loc706)
      cir.if %5 {
        %6 = cir.const #cir.int<100> : !s32i loc(#loc501)
        %7 = cir.load %0 : !cir.ptr<!s32i>, !s32i loc(#loc502)
        %8 = cir.binop(div, %6, %7) : !s32i loc(#loc708)
        cir.call @printIntLine(%8) : (!s32i) -> () loc(#loc503)
      } loc(#loc707)
    } loc(#loc705)
    cir.return loc(#loc483)
  } loc(#loc698)
} loc(#loc)
#loc = loc("/workspaces/juliet-c/testcases/CWE369_Divide_by_Zero/s02/CWE369_Divide_by_Zero__int_listen_socket_divide_06.c":0:0)
#loc1 = loc("/usr/include/x86_64-linux-gnu/sys/socket.h":102:1)
#loc2 = loc("/usr/include/x86_64-linux-gnu/sys/socket.h":102:62)
#loc3 = loc("/usr/include/netinet/in.h":402:1)
#loc4 = loc("/usr/include/netinet/in.h":403:40)
#loc5 = loc("/usr/include/x86_64-linux-gnu/sys/socket.h":112:1)
#loc6 = loc("/usr/include/x86_64-linux-gnu/sys/socket.h":113:6)
#loc7 = loc("/usr/include/x86_64-linux-gnu/sys/socket.h":296:1)
#loc8 = loc("/usr/include/x86_64-linux-gnu/sys/socket.h":296:39)
#loc9 = loc("/usr/include/x86_64-linux-gnu/sys/socket.h":306:1)
#loc10 = loc("/usr/include/x86_64-linux-gnu/sys/socket.h":307:38)
#loc11 = loc("/usr/include/x86_64-linux-gnu/sys/socket.h":145:1)
#loc12 = loc("/usr/include/x86_64-linux-gnu/sys/socket.h":145:68)
#loc13 = loc("/usr/include/stdlib.h":105:1)
#loc14 = loc("/usr/include/stdlib.h":106:33)
#loc15 = loc("/usr/include/unistd.h":358:1)
#loc16 = loc("/usr/include/unistd.h":358:27)
#loc17 = loc("../../../testcasesupport/std_testcase_io.h":18:1)
#loc18 = loc("../../../testcasesupport/std_testcase_io.h":18:33)
#loc19 = loc("CWE369_Divide_by_Zero__int_listen_socket_divide_06.c":49:1)
#loc20 = loc("CWE369_Divide_by_Zero__int_listen_socket_divide_06.c":131:1)
#loc21 = loc("CWE369_Divide_by_Zero__int_listen_socket_divide_06.c":51:5)
#loc22 = loc("CWE369_Divide_by_Zero__int_listen_socket_divide_06.c":51:9)
#loc23 = loc("CWE369_Divide_by_Zero__int_listen_socket_divide_06.c":53:13)
#loc24 = loc("CWE369_Divide_by_Zero__int_listen_socket_divide_06.c":53:12)
#loc25 = loc("CWE369_Divide_by_Zero__int_listen_socket_divide_06.c":53:5)
#loc26 = loc("CWE369_Divide_by_Zero__int_listen_socket_divide_06.c":54:5)
#loc27 = loc("CWE369_Divide_by_Zero__int_listen_socket_divide_06.c":125:5)
#loc28 = loc("CWE369_Divide_by_Zero__int_listen_socket_divide_06.c":54:8)
#loc29 = loc("CWE369_Divide_by_Zero__int_listen_socket_divide_06.c":54:27)
#loc30 = loc("CWE369_Divide_by_Zero__int_listen_socket_divide_06.c":55:5)
#loc31 = loc("CWE369_Divide_by_Zero__int_listen_socket_divide_06.c":56:9)
#loc32 = loc("CWE369_Divide_by_Zero__int_listen_socket_divide_06.c":124:9)
#loc33 = loc("CWE369_Divide_by_Zero__int_listen_socket_divide_06.c":61:13)
#loc34 = loc("CWE369_Divide_by_Zero__int_listen_socket_divide_06.c":61:17)
#loc35 = loc("CWE369_Divide_by_Zero__int_listen_socket_divide_06.c":62:13)
#loc36 = loc("CWE369_Divide_by_Zero__int_listen_socket_divide_06.c":62:32)
#loc37 = loc("CWE369_Divide_by_Zero__int_listen_socket_divide_06.c":63:13)
#loc38 = loc("CWE369_Divide_by_Zero__int_listen_socket_divide_06.c":63:35)
#loc39 = loc("CWE369_Divide_by_Zero__int_listen_socket_divide_06.c":64:13)
#loc40 = loc("CWE369_Divide_by_Zero__int_listen_socket_divide_06.c":64:35)
#loc41 = loc("CWE369_Divide_by_Zero__int_listen_socket_divide_06.c":65:13)
#loc42 = loc("CWE369_Divide_by_Zero__int_listen_socket_divide_06.c":65:45)
#loc43 = loc("CWE369_Divide_by_Zero__int_listen_socket_divide_06.c":66:13)
#loc44 = loc("CWE369_Divide_by_Zero__int_listen_socket_divide_06.c":109:21)
#loc45 = loc("CWE369_Divide_by_Zero__int_listen_socket_divide_06.c":67:13)
#loc46 = loc("CWE369_Divide_by_Zero__int_listen_socket_divide_06.c":108:13)
#loc47 = loc("CWE369_Divide_by_Zero__int_listen_socket_divide_06.c":76:39)
#loc48 = loc("CWE369_Divide_by_Zero__int_listen_socket_divide_06.c":76:48)
#loc49 = loc("CWE369_Divide_by_Zero__int_listen_socket_divide_06.c":76:61)
#loc50 = loc("CWE369_Divide_by_Zero__int_listen_socket_divide_06.c":76:32)
#loc51 = loc("CWE369_Divide_by_Zero__int_listen_socket_divide_06.c":76:17)
#loc52 = loc("CWE369_Divide_by_Zero__int_listen_socket_divide_06.c":76:72)
#loc53 = loc("CWE369_Divide_by_Zero__int_listen_socket_divide_06.c":77:17)
#loc54 = loc("CWE369_Divide_by_Zero__int_listen_socket_divide_06.c":80:17)
#loc55 = loc("CWE369_Divide_by_Zero__int_listen_socket_divide_06.c":77:21)
#loc56 = loc("CWE369_Divide_by_Zero__int_listen_socket_divide_06.c":77:37)
#loc57 = loc("CWE369_Divide_by_Zero__int_listen_socket_divide_06.c":78:17)
#loc58 = loc("CWE369_Divide_by_Zero__int_listen_socket_divide_06.c":79:21)
#loc59 = loc("CWE369_Divide_by_Zero__int_listen_socket_divide_06.c":81:24)
#loc60 = loc("CWE369_Divide_by_Zero__int_listen_socket_divide_06.c":81:25)
#loc61 = loc("CWE369_Divide_by_Zero__int_listen_socket_divide_06.c":81:34)
#loc62 = loc("CWE369_Divide_by_Zero__int_listen_socket_divide_06.c":81:37)
#loc63 = loc("CWE369_Divide_by_Zero__int_listen_socket_divide_06.c":81:51)
#loc64 = loc("CWE369_Divide_by_Zero__int_listen_socket_divide_06.c":81:17)
#loc65 = loc("CWE369_Divide_by_Zero__int_listen_socket_divide_06.c":81:52)
#loc66 = loc("CWE369_Divide_by_Zero__int_listen_socket_divide_06.c":82:38)
#loc67 = loc("/usr/include/netinet/in.h":249:5)
#loc68 = loc("CWE369_Divide_by_Zero__int_listen_socket_divide_06.c":82:17)
#loc69 = loc("CWE369_Divide_by_Zero__int_listen_socket_divide_06.c":83:43)
#loc70 = loc("/usr/include/netinet/in.h":251:20)
#loc71 = loc("/usr/include/netinet/in.h":33:15)
#loc72 = loc("CWE369_Divide_by_Zero__int_listen_socket_divide_06.c":83:17)
#loc73 = loc("CWE369_Divide_by_Zero__int_listen_socket_divide_06.c":84:42)
#loc74 = loc("CWE369_Divide_by_Zero__int_listen_socket_divide_06.c":84:36)
#loc75 = loc("/usr/include/netinet/in.h":250:15)
#loc76 = loc("CWE369_Divide_by_Zero__int_listen_socket_divide_06.c":84:17)
#loc77 = loc("CWE369_Divide_by_Zero__int_listen_socket_divide_06.c":84:50)
#loc78 = loc("CWE369_Divide_by_Zero__int_listen_socket_divide_06.c":85:17)
#loc79 = loc("CWE369_Divide_by_Zero__int_listen_socket_divide_06.c":88:17)
#loc80 = loc("CWE369_Divide_by_Zero__int_listen_socket_divide_06.c":85:26)
#loc81 = loc("CWE369_Divide_by_Zero__int_listen_socket_divide_06.c":85:58)
#loc82 = loc("CWE369_Divide_by_Zero__int_listen_socket_divide_06.c":85:59)
#loc83 = loc("CWE369_Divide_by_Zero__int_listen_socket_divide_06.c":85:68)
#loc84 = loc("CWE369_Divide_by_Zero__int_listen_socket_divide_06.c":85:82)
#loc85 = loc("CWE369_Divide_by_Zero__int_listen_socket_divide_06.c":85:21)
#loc86 = loc("CWE369_Divide_by_Zero__int_listen_socket_divide_06.c":85:88)
#loc87 = loc("CWE369_Divide_by_Zero__int_listen_socket_divide_06.c":86:17)
#loc88 = loc("CWE369_Divide_by_Zero__int_listen_socket_divide_06.c":87:21)
#loc89 = loc("CWE369_Divide_by_Zero__int_listen_socket_divide_06.c":89:17)
#loc90 = loc("CWE369_Divide_by_Zero__int_listen_socket_divide_06.c":92:17)
#loc91 = loc("CWE369_Divide_by_Zero__int_listen_socket_divide_06.c":89:28)
#loc92 = loc("CWE369_Divide_by_Zero__int_listen_socket_divide_06.c":89:42)
#loc93 = loc("CWE369_Divide_by_Zero__int_listen_socket_divide_06.c":89:21)
#loc94 = loc("CWE369_Divide_by_Zero__int_listen_socket_divide_06.c":89:61)
#loc95 = loc("CWE369_Divide_by_Zero__int_listen_socket_divide_06.c":90:17)
#loc96 = loc("CWE369_Divide_by_Zero__int_listen_socket_divide_06.c":91:21)
#loc97 = loc("CWE369_Divide_by_Zero__int_listen_socket_divide_06.c":93:39)
#loc98 = loc("CWE369_Divide_by_Zero__int_listen_socket_divide_06.c":93:53)
#loc99 = loc("CWE369_Divide_by_Zero__int_listen_socket_divide_06.c":93:59)
#loc100 = loc("CWE369_Divide_by_Zero__int_listen_socket_divide_06.c":93:32)
#loc101 = loc("CWE369_Divide_by_Zero__int_listen_socket_divide_06.c":93:17)
#loc102 = loc("CWE369_Divide_by_Zero__int_listen_socket_divide_06.c":93:63)
#loc103 = loc("CWE369_Divide_by_Zero__int_listen_socket_divide_06.c":94:17)
#loc104 = loc("CWE369_Divide_by_Zero__int_listen_socket_divide_06.c":97:17)
#loc105 = loc("CWE369_Divide_by_Zero__int_listen_socket_divide_06.c":94:21)
#loc106 = loc("CWE369_Divide_by_Zero__int_listen_socket_divide_06.c":94:37)
#loc107 = loc("CWE369_Divide_by_Zero__int_listen_socket_divide_06.c":95:17)
#loc108 = loc("CWE369_Divide_by_Zero__int_listen_socket_divide_06.c":96:21)
#loc109 = loc("CWE369_Divide_by_Zero__int_listen_socket_divide_06.c":99:35)
#loc110 = loc("CWE369_Divide_by_Zero__int_listen_socket_divide_06.c":99:49)
#loc111 = loc("CWE369_Divide_by_Zero__int_listen_socket_divide_06.c":99:62)
#loc112 = loc("CWE369_Divide_by_Zero__int_listen_socket_divide_06.c":99:80)
#loc113 = loc("CWE369_Divide_by_Zero__int_listen_socket_divide_06.c":99:83)
#loc114 = loc("CWE369_Divide_by_Zero__int_listen_socket_divide_06.c":99:30)
#loc115 = loc("CWE369_Divide_by_Zero__int_listen_socket_divide_06.c":99:17)
#loc116 = loc("CWE369_Divide_by_Zero__int_listen_socket_divide_06.c":99:84)
#loc117 = loc("CWE369_Divide_by_Zero__int_listen_socket_divide_06.c":100:17)
#loc118 = loc("CWE369_Divide_by_Zero__int_listen_socket_divide_06.c":103:17)
#loc119 = loc("CWE369_Divide_by_Zero__int_listen_socket_divide_06.c":100:21)
#loc120 = loc("CWE369_Divide_by_Zero__int_listen_socket_divide_06.c":100:35)
#loc121 = loc("CWE369_Divide_by_Zero__int_listen_socket_divide_06.c":100:48)
#loc122 = loc("CWE369_Divide_by_Zero__int_listen_socket_divide_06.c":100:51)
#loc123 = loc("CWE369_Divide_by_Zero__int_listen_socket_divide_06.c":100:65)
#loc124 = loc("CWE369_Divide_by_Zero__int_listen_socket_divide_06.c":101:17)
#loc125 = loc("CWE369_Divide_by_Zero__int_listen_socket_divide_06.c":102:21)
#loc126 = loc("CWE369_Divide_by_Zero__int_listen_socket_divide_06.c":105:43)
#loc127 = loc("CWE369_Divide_by_Zero__int_listen_socket_divide_06.c":105:29)
#loc128 = loc("CWE369_Divide_by_Zero__int_listen_socket_divide_06.c":105:17)
#loc129 = loc("CWE369_Divide_by_Zero__int_listen_socket_divide_06.c":107:29)
#loc130 = loc("CWE369_Divide_by_Zero__int_listen_socket_divide_06.c":107:24)
#loc131 = loc("CWE369_Divide_by_Zero__int_listen_socket_divide_06.c":107:17)
#loc132 = loc("CWE369_Divide_by_Zero__int_listen_socket_divide_06.c":107:40)
#loc133 = loc("CWE369_Divide_by_Zero__int_listen_socket_divide_06.c":109:20)
#loc134 = loc("CWE369_Divide_by_Zero__int_listen_socket_divide_06.c":110:13)
#loc135 = loc("CWE369_Divide_by_Zero__int_listen_socket_divide_06.c":113:13)
#loc136 = loc("CWE369_Divide_by_Zero__int_listen_socket_divide_06.c":110:17)
#loc137 = loc("CWE369_Divide_by_Zero__int_listen_socket_divide_06.c":110:33)
#loc138 = loc("CWE369_Divide_by_Zero__int_listen_socket_divide_06.c":111:13)
#loc139 = loc("CWE369_Divide_by_Zero__int_listen_socket_divide_06.c":112:30)
#loc140 = loc("CWE369_Divide_by_Zero__int_listen_socket_divide_06.c":112:17)
#loc141 = loc("CWE369_Divide_by_Zero__int_listen_socket_divide_06.c":114:13)
#loc142 = loc("CWE369_Divide_by_Zero__int_listen_socket_divide_06.c":117:13)
#loc143 = loc("CWE369_Divide_by_Zero__int_listen_socket_divide_06.c":114:17)
#loc144 = loc("CWE369_Divide_by_Zero__int_listen_socket_divide_06.c":114:33)
#loc145 = loc("CWE369_Divide_by_Zero__int_listen_socket_divide_06.c":115:13)
#loc146 = loc("CWE369_Divide_by_Zero__int_listen_socket_divide_06.c":116:30)
#loc147 = loc("CWE369_Divide_by_Zero__int_listen_socket_divide_06.c":116:17)
#loc148 = loc("CWE369_Divide_by_Zero__int_listen_socket_divide_06.c":126:5)
#loc149 = loc("CWE369_Divide_by_Zero__int_listen_socket_divide_06.c":130:5)
#loc150 = loc("CWE369_Divide_by_Zero__int_listen_socket_divide_06.c":126:8)
#loc151 = loc("CWE369_Divide_by_Zero__int_listen_socket_divide_06.c":126:27)
#loc152 = loc("CWE369_Divide_by_Zero__int_listen_socket_divide_06.c":127:5)
#loc153 = loc("CWE369_Divide_by_Zero__int_listen_socket_divide_06.c":129:22)
#loc154 = loc("CWE369_Divide_by_Zero__int_listen_socket_divide_06.c":129:28)
#loc155 = loc("CWE369_Divide_by_Zero__int_listen_socket_divide_06.c":129:9)
#loc156 = loc("CWE369_Divide_by_Zero__int_listen_socket_divide_06.c":367:1)
#loc157 = loc("CWE369_Divide_by_Zero__int_listen_socket_divide_06.c":373:1)
#loc158 = loc("CWE369_Divide_by_Zero__int_listen_socket_divide_06.c":369:5)
#loc159 = loc("CWE369_Divide_by_Zero__int_listen_socket_divide_06.c":369:14)
#loc160 = loc("CWE369_Divide_by_Zero__int_listen_socket_divide_06.c":370:5)
#loc161 = loc("CWE369_Divide_by_Zero__int_listen_socket_divide_06.c":370:14)
#loc162 = loc("CWE369_Divide_by_Zero__int_listen_socket_divide_06.c":371:5)
#loc163 = loc("CWE369_Divide_by_Zero__int_listen_socket_divide_06.c":371:14)
#loc164 = loc("CWE369_Divide_by_Zero__int_listen_socket_divide_06.c":372:5)
#loc165 = loc("CWE369_Divide_by_Zero__int_listen_socket_divide_06.c":372:14)
#loc166 = loc("../../../testcasesupport/std_testcase_io.h":14:1)
#loc167 = loc("../../../testcasesupport/std_testcase_io.h":14:33)
#loc168 = loc("CWE369_Divide_by_Zero__int_listen_socket_divide_06.c":218:19)
#loc169 = loc("CWE369_Divide_by_Zero__int_listen_socket_divide_06.c":229:23)
#loc170 = loc("CWE369_Divide_by_Zero__int_listen_socket_divide_06.c":138:1)
#loc171 = loc("CWE369_Divide_by_Zero__int_listen_socket_divide_06.c":232:1)
#loc172 = loc("CWE369_Divide_by_Zero__int_listen_socket_divide_06.c":140:5)
#loc173 = loc("CWE369_Divide_by_Zero__int_listen_socket_divide_06.c":140:9)
#loc174 = loc("CWE369_Divide_by_Zero__int_listen_socket_divide_06.c":142:13)
#loc175 = loc("CWE369_Divide_by_Zero__int_listen_socket_divide_06.c":142:12)
#loc176 = loc("CWE369_Divide_by_Zero__int_listen_socket_divide_06.c":142:5)
#loc177 = loc("CWE369_Divide_by_Zero__int_listen_socket_divide_06.c":143:5)
#loc178 = loc("CWE369_Divide_by_Zero__int_listen_socket_divide_06.c":214:5)
#loc179 = loc("CWE369_Divide_by_Zero__int_listen_socket_divide_06.c":143:8)
#loc180 = loc("CWE369_Divide_by_Zero__int_listen_socket_divide_06.c":143:27)
#loc181 = loc("CWE369_Divide_by_Zero__int_listen_socket_divide_06.c":144:5)
#loc182 = loc("CWE369_Divide_by_Zero__int_listen_socket_divide_06.c":145:9)
#loc183 = loc("CWE369_Divide_by_Zero__int_listen_socket_divide_06.c":213:9)
#loc184 = loc("CWE369_Divide_by_Zero__int_listen_socket_divide_06.c":150:13)
#loc185 = loc("CWE369_Divide_by_Zero__int_listen_socket_divide_06.c":150:17)
#loc186 = loc("CWE369_Divide_by_Zero__int_listen_socket_divide_06.c":151:13)
#loc187 = loc("CWE369_Divide_by_Zero__int_listen_socket_divide_06.c":151:32)
#loc188 = loc("CWE369_Divide_by_Zero__int_listen_socket_divide_06.c":152:13)
#loc189 = loc("CWE369_Divide_by_Zero__int_listen_socket_divide_06.c":152:35)
#loc190 = loc("CWE369_Divide_by_Zero__int_listen_socket_divide_06.c":153:13)
#loc191 = loc("CWE369_Divide_by_Zero__int_listen_socket_divide_06.c":153:35)
#loc192 = loc("CWE369_Divide_by_Zero__int_listen_socket_divide_06.c":154:13)
#loc193 = loc("CWE369_Divide_by_Zero__int_listen_socket_divide_06.c":154:45)
#loc194 = loc("CWE369_Divide_by_Zero__int_listen_socket_divide_06.c":155:13)
#loc195 = loc("CWE369_Divide_by_Zero__int_listen_socket_divide_06.c":198:21)
#loc196 = loc("CWE369_Divide_by_Zero__int_listen_socket_divide_06.c":156:13)
#loc197 = loc("CWE369_Divide_by_Zero__int_listen_socket_divide_06.c":197:13)
#loc198 = loc("CWE369_Divide_by_Zero__int_listen_socket_divide_06.c":165:39)
#loc199 = loc("CWE369_Divide_by_Zero__int_listen_socket_divide_06.c":165:48)
#loc200 = loc("CWE369_Divide_by_Zero__int_listen_socket_divide_06.c":165:61)
#loc201 = loc("CWE369_Divide_by_Zero__int_listen_socket_divide_06.c":165:32)
#loc202 = loc("CWE369_Divide_by_Zero__int_listen_socket_divide_06.c":165:17)
#loc203 = loc("CWE369_Divide_by_Zero__int_listen_socket_divide_06.c":165:72)
#loc204 = loc("CWE369_Divide_by_Zero__int_listen_socket_divide_06.c":166:17)
#loc205 = loc("CWE369_Divide_by_Zero__int_listen_socket_divide_06.c":169:17)
#loc206 = loc("CWE369_Divide_by_Zero__int_listen_socket_divide_06.c":166:21)
#loc207 = loc("CWE369_Divide_by_Zero__int_listen_socket_divide_06.c":166:37)
#loc208 = loc("CWE369_Divide_by_Zero__int_listen_socket_divide_06.c":167:17)
#loc209 = loc("CWE369_Divide_by_Zero__int_listen_socket_divide_06.c":168:21)
#loc210 = loc("CWE369_Divide_by_Zero__int_listen_socket_divide_06.c":170:24)
#loc211 = loc("CWE369_Divide_by_Zero__int_listen_socket_divide_06.c":170:25)
#loc212 = loc("CWE369_Divide_by_Zero__int_listen_socket_divide_06.c":170:34)
#loc213 = loc("CWE369_Divide_by_Zero__int_listen_socket_divide_06.c":170:37)
#loc214 = loc("CWE369_Divide_by_Zero__int_listen_socket_divide_06.c":170:51)
#loc215 = loc("CWE369_Divide_by_Zero__int_listen_socket_divide_06.c":170:17)
#loc216 = loc("CWE369_Divide_by_Zero__int_listen_socket_divide_06.c":170:52)
#loc217 = loc("CWE369_Divide_by_Zero__int_listen_socket_divide_06.c":171:38)
#loc218 = loc("CWE369_Divide_by_Zero__int_listen_socket_divide_06.c":171:17)
#loc219 = loc("CWE369_Divide_by_Zero__int_listen_socket_divide_06.c":172:43)
#loc220 = loc("CWE369_Divide_by_Zero__int_listen_socket_divide_06.c":172:17)
#loc221 = loc("CWE369_Divide_by_Zero__int_listen_socket_divide_06.c":173:42)
#loc222 = loc("CWE369_Divide_by_Zero__int_listen_socket_divide_06.c":173:36)
#loc223 = loc("CWE369_Divide_by_Zero__int_listen_socket_divide_06.c":173:17)
#loc224 = loc("CWE369_Divide_by_Zero__int_listen_socket_divide_06.c":173:50)
#loc225 = loc("CWE369_Divide_by_Zero__int_listen_socket_divide_06.c":174:17)
#loc226 = loc("CWE369_Divide_by_Zero__int_listen_socket_divide_06.c":177:17)
#loc227 = loc("CWE369_Divide_by_Zero__int_listen_socket_divide_06.c":174:26)
#loc228 = loc("CWE369_Divide_by_Zero__int_listen_socket_divide_06.c":174:58)
#loc229 = loc("CWE369_Divide_by_Zero__int_listen_socket_divide_06.c":174:59)
#loc230 = loc("CWE369_Divide_by_Zero__int_listen_socket_divide_06.c":174:68)
#loc231 = loc("CWE369_Divide_by_Zero__int_listen_socket_divide_06.c":174:82)
#loc232 = loc("CWE369_Divide_by_Zero__int_listen_socket_divide_06.c":174:21)
#loc233 = loc("CWE369_Divide_by_Zero__int_listen_socket_divide_06.c":174:88)
#loc234 = loc("CWE369_Divide_by_Zero__int_listen_socket_divide_06.c":175:17)
#loc235 = loc("CWE369_Divide_by_Zero__int_listen_socket_divide_06.c":176:21)
#loc236 = loc("CWE369_Divide_by_Zero__int_listen_socket_divide_06.c":178:17)
#loc237 = loc("CWE369_Divide_by_Zero__int_listen_socket_divide_06.c":181:17)
#loc238 = loc("CWE369_Divide_by_Zero__int_listen_socket_divide_06.c":178:28)
#loc239 = loc("CWE369_Divide_by_Zero__int_listen_socket_divide_06.c":178:42)
#loc240 = loc("CWE369_Divide_by_Zero__int_listen_socket_divide_06.c":178:21)
#loc241 = loc("CWE369_Divide_by_Zero__int_listen_socket_divide_06.c":178:61)
#loc242 = loc("CWE369_Divide_by_Zero__int_listen_socket_divide_06.c":179:17)
#loc243 = loc("CWE369_Divide_by_Zero__int_listen_socket_divide_06.c":180:21)
#loc244 = loc("CWE369_Divide_by_Zero__int_listen_socket_divide_06.c":182:39)
#loc245 = loc("CWE369_Divide_by_Zero__int_listen_socket_divide_06.c":182:53)
#loc246 = loc("CWE369_Divide_by_Zero__int_listen_socket_divide_06.c":182:59)
#loc247 = loc("CWE369_Divide_by_Zero__int_listen_socket_divide_06.c":182:32)
#loc248 = loc("CWE369_Divide_by_Zero__int_listen_socket_divide_06.c":182:17)
#loc249 = loc("CWE369_Divide_by_Zero__int_listen_socket_divide_06.c":182:63)
#loc250 = loc("CWE369_Divide_by_Zero__int_listen_socket_divide_06.c":183:17)
#loc251 = loc("CWE369_Divide_by_Zero__int_listen_socket_divide_06.c":186:17)
#loc252 = loc("CWE369_Divide_by_Zero__int_listen_socket_divide_06.c":183:21)
#loc253 = loc("CWE369_Divide_by_Zero__int_listen_socket_divide_06.c":183:37)
#loc254 = loc("CWE369_Divide_by_Zero__int_listen_socket_divide_06.c":184:17)
#loc255 = loc("CWE369_Divide_by_Zero__int_listen_socket_divide_06.c":185:21)
#loc256 = loc("CWE369_Divide_by_Zero__int_listen_socket_divide_06.c":188:35)
#loc257 = loc("CWE369_Divide_by_Zero__int_listen_socket_divide_06.c":188:49)
#loc258 = loc("CWE369_Divide_by_Zero__int_listen_socket_divide_06.c":188:62)
#loc259 = loc("CWE369_Divide_by_Zero__int_listen_socket_divide_06.c":188:80)
#loc260 = loc("CWE369_Divide_by_Zero__int_listen_socket_divide_06.c":188:83)
#loc261 = loc("CWE369_Divide_by_Zero__int_listen_socket_divide_06.c":188:30)
#loc262 = loc("CWE369_Divide_by_Zero__int_listen_socket_divide_06.c":188:17)
#loc263 = loc("CWE369_Divide_by_Zero__int_listen_socket_divide_06.c":188:84)
#loc264 = loc("CWE369_Divide_by_Zero__int_listen_socket_divide_06.c":189:17)
#loc265 = loc("CWE369_Divide_by_Zero__int_listen_socket_divide_06.c":192:17)
#loc266 = loc("CWE369_Divide_by_Zero__int_listen_socket_divide_06.c":189:21)
#loc267 = loc("CWE369_Divide_by_Zero__int_listen_socket_divide_06.c":189:35)
#loc268 = loc("CWE369_Divide_by_Zero__int_listen_socket_divide_06.c":189:48)
#loc269 = loc("CWE369_Divide_by_Zero__int_listen_socket_divide_06.c":189:51)
#loc270 = loc("CWE369_Divide_by_Zero__int_listen_socket_divide_06.c":189:65)
#loc271 = loc("CWE369_Divide_by_Zero__int_listen_socket_divide_06.c":190:17)
#loc272 = loc("CWE369_Divide_by_Zero__int_listen_socket_divide_06.c":191:21)
#loc273 = loc("CWE369_Divide_by_Zero__int_listen_socket_divide_06.c":194:43)
#loc274 = loc("CWE369_Divide_by_Zero__int_listen_socket_divide_06.c":194:29)
#loc275 = loc("CWE369_Divide_by_Zero__int_listen_socket_divide_06.c":194:17)
#loc276 = loc("CWE369_Divide_by_Zero__int_listen_socket_divide_06.c":196:29)
#loc277 = loc("CWE369_Divide_by_Zero__int_listen_socket_divide_06.c":196:24)
#loc278 = loc("CWE369_Divide_by_Zero__int_listen_socket_divide_06.c":196:17)
#loc279 = loc("CWE369_Divide_by_Zero__int_listen_socket_divide_06.c":196:40)
#loc280 = loc("CWE369_Divide_by_Zero__int_listen_socket_divide_06.c":198:20)
#loc281 = loc("CWE369_Divide_by_Zero__int_listen_socket_divide_06.c":199:13)
#loc282 = loc("CWE369_Divide_by_Zero__int_listen_socket_divide_06.c":202:13)
#loc283 = loc("CWE369_Divide_by_Zero__int_listen_socket_divide_06.c":199:17)
#loc284 = loc("CWE369_Divide_by_Zero__int_listen_socket_divide_06.c":199:33)
#loc285 = loc("CWE369_Divide_by_Zero__int_listen_socket_divide_06.c":200:13)
#loc286 = loc("CWE369_Divide_by_Zero__int_listen_socket_divide_06.c":201:30)
#loc287 = loc("CWE369_Divide_by_Zero__int_listen_socket_divide_06.c":201:17)
#loc288 = loc("CWE369_Divide_by_Zero__int_listen_socket_divide_06.c":203:13)
#loc289 = loc("CWE369_Divide_by_Zero__int_listen_socket_divide_06.c":206:13)
#loc290 = loc("CWE369_Divide_by_Zero__int_listen_socket_divide_06.c":203:17)
#loc291 = loc("CWE369_Divide_by_Zero__int_listen_socket_divide_06.c":203:33)
#loc292 = loc("CWE369_Divide_by_Zero__int_listen_socket_divide_06.c":204:13)
#loc293 = loc("CWE369_Divide_by_Zero__int_listen_socket_divide_06.c":205:30)
#loc294 = loc("CWE369_Divide_by_Zero__int_listen_socket_divide_06.c":205:17)
#loc295 = loc("CWE369_Divide_by_Zero__int_listen_socket_divide_06.c":215:5)
#loc296 = loc("CWE369_Divide_by_Zero__int_listen_socket_divide_06.c":231:5)
#loc297 = loc("CWE369_Divide_by_Zero__int_listen_socket_divide_06.c":215:8)
#loc298 = loc("CWE369_Divide_by_Zero__int_listen_socket_divide_06.c":215:27)
#loc299 = loc("CWE369_Divide_by_Zero__int_listen_socket_divide_06.c":216:5)
#loc300 = loc("CWE369_Divide_by_Zero__int_listen_socket_divide_06.c":219:5)
#loc301 = loc("CWE369_Divide_by_Zero__int_listen_socket_divide_06.c":221:5)
#loc302 = loc("CWE369_Divide_by_Zero__int_listen_socket_divide_06.c":218:9)
#loc303 = loc("CWE369_Divide_by_Zero__int_listen_socket_divide_06.c":223:9)
#loc304 = loc("CWE369_Divide_by_Zero__int_listen_socket_divide_06.c":230:9)
#loc305 = loc("CWE369_Divide_by_Zero__int_listen_socket_divide_06.c":223:13)
#loc306 = loc("CWE369_Divide_by_Zero__int_listen_socket_divide_06.c":223:21)
#loc307 = loc("CWE369_Divide_by_Zero__int_listen_socket_divide_06.c":224:9)
#loc308 = loc("CWE369_Divide_by_Zero__int_listen_socket_divide_06.c":226:9)
#loc309 = loc("CWE369_Divide_by_Zero__int_listen_socket_divide_06.c":228:9)
#loc310 = loc("CWE369_Divide_by_Zero__int_listen_socket_divide_06.c":225:26)
#loc311 = loc("CWE369_Divide_by_Zero__int_listen_socket_divide_06.c":225:32)
#loc312 = loc("CWE369_Divide_by_Zero__int_listen_socket_divide_06.c":225:13)
#loc313 = loc("CWE369_Divide_by_Zero__int_listen_socket_divide_06.c":229:13)
#loc314 = loc("CWE369_Divide_by_Zero__int_listen_socket_divide_06.c":235:1)
#loc315 = loc("CWE369_Divide_by_Zero__int_listen_socket_divide_06.c":324:1)
#loc316 = loc("CWE369_Divide_by_Zero__int_listen_socket_divide_06.c":237:5)
#loc317 = loc("CWE369_Divide_by_Zero__int_listen_socket_divide_06.c":237:9)
#loc318 = loc("CWE369_Divide_by_Zero__int_listen_socket_divide_06.c":239:13)
#loc319 = loc("CWE369_Divide_by_Zero__int_listen_socket_divide_06.c":239:12)
#loc320 = loc("CWE369_Divide_by_Zero__int_listen_socket_divide_06.c":239:5)
#loc321 = loc("CWE369_Divide_by_Zero__int_listen_socket_divide_06.c":240:5)
#loc322 = loc("CWE369_Divide_by_Zero__int_listen_socket_divide_06.c":311:5)
#loc323 = loc("CWE369_Divide_by_Zero__int_listen_socket_divide_06.c":240:8)
#loc324 = loc("CWE369_Divide_by_Zero__int_listen_socket_divide_06.c":240:27)
#loc325 = loc("CWE369_Divide_by_Zero__int_listen_socket_divide_06.c":241:5)
#loc326 = loc("CWE369_Divide_by_Zero__int_listen_socket_divide_06.c":242:9)
#loc327 = loc("CWE369_Divide_by_Zero__int_listen_socket_divide_06.c":310:9)
#loc328 = loc("CWE369_Divide_by_Zero__int_listen_socket_divide_06.c":247:13)
#loc329 = loc("CWE369_Divide_by_Zero__int_listen_socket_divide_06.c":247:17)
#loc330 = loc("CWE369_Divide_by_Zero__int_listen_socket_divide_06.c":248:13)
#loc331 = loc("CWE369_Divide_by_Zero__int_listen_socket_divide_06.c":248:32)
#loc332 = loc("CWE369_Divide_by_Zero__int_listen_socket_divide_06.c":249:13)
#loc333 = loc("CWE369_Divide_by_Zero__int_listen_socket_divide_06.c":249:35)
#loc334 = loc("CWE369_Divide_by_Zero__int_listen_socket_divide_06.c":250:13)
#loc335 = loc("CWE369_Divide_by_Zero__int_listen_socket_divide_06.c":250:35)
#loc336 = loc("CWE369_Divide_by_Zero__int_listen_socket_divide_06.c":251:13)
#loc337 = loc("CWE369_Divide_by_Zero__int_listen_socket_divide_06.c":251:45)
#loc338 = loc("CWE369_Divide_by_Zero__int_listen_socket_divide_06.c":252:13)
#loc339 = loc("CWE369_Divide_by_Zero__int_listen_socket_divide_06.c":295:21)
#loc340 = loc("CWE369_Divide_by_Zero__int_listen_socket_divide_06.c":253:13)
#loc341 = loc("CWE369_Divide_by_Zero__int_listen_socket_divide_06.c":294:13)
#loc342 = loc("CWE369_Divide_by_Zero__int_listen_socket_divide_06.c":262:39)
#loc343 = loc("CWE369_Divide_by_Zero__int_listen_socket_divide_06.c":262:48)
#loc344 = loc("CWE369_Divide_by_Zero__int_listen_socket_divide_06.c":262:61)
#loc345 = loc("CWE369_Divide_by_Zero__int_listen_socket_divide_06.c":262:32)
#loc346 = loc("CWE369_Divide_by_Zero__int_listen_socket_divide_06.c":262:17)
#loc347 = loc("CWE369_Divide_by_Zero__int_listen_socket_divide_06.c":262:72)
#loc348 = loc("CWE369_Divide_by_Zero__int_listen_socket_divide_06.c":263:17)
#loc349 = loc("CWE369_Divide_by_Zero__int_listen_socket_divide_06.c":266:17)
#loc350 = loc("CWE369_Divide_by_Zero__int_listen_socket_divide_06.c":263:21)
#loc351 = loc("CWE369_Divide_by_Zero__int_listen_socket_divide_06.c":263:37)
#loc352 = loc("CWE369_Divide_by_Zero__int_listen_socket_divide_06.c":264:17)
#loc353 = loc("CWE369_Divide_by_Zero__int_listen_socket_divide_06.c":265:21)
#loc354 = loc("CWE369_Divide_by_Zero__int_listen_socket_divide_06.c":267:24)
#loc355 = loc("CWE369_Divide_by_Zero__int_listen_socket_divide_06.c":267:25)
#loc356 = loc("CWE369_Divide_by_Zero__int_listen_socket_divide_06.c":267:34)
#loc357 = loc("CWE369_Divide_by_Zero__int_listen_socket_divide_06.c":267:37)
#loc358 = loc("CWE369_Divide_by_Zero__int_listen_socket_divide_06.c":267:51)
#loc359 = loc("CWE369_Divide_by_Zero__int_listen_socket_divide_06.c":267:17)
#loc360 = loc("CWE369_Divide_by_Zero__int_listen_socket_divide_06.c":267:52)
#loc361 = loc("CWE369_Divide_by_Zero__int_listen_socket_divide_06.c":268:38)
#loc362 = loc("CWE369_Divide_by_Zero__int_listen_socket_divide_06.c":268:17)
#loc363 = loc("CWE369_Divide_by_Zero__int_listen_socket_divide_06.c":269:43)
#loc364 = loc("CWE369_Divide_by_Zero__int_listen_socket_divide_06.c":269:17)
#loc365 = loc("CWE369_Divide_by_Zero__int_listen_socket_divide_06.c":270:42)
#loc366 = loc("CWE369_Divide_by_Zero__int_listen_socket_divide_06.c":270:36)
#loc367 = loc("CWE369_Divide_by_Zero__int_listen_socket_divide_06.c":270:17)
#loc368 = loc("CWE369_Divide_by_Zero__int_listen_socket_divide_06.c":270:50)
#loc369 = loc("CWE369_Divide_by_Zero__int_listen_socket_divide_06.c":271:17)
#loc370 = loc("CWE369_Divide_by_Zero__int_listen_socket_divide_06.c":274:17)
#loc371 = loc("CWE369_Divide_by_Zero__int_listen_socket_divide_06.c":271:26)
#loc372 = loc("CWE369_Divide_by_Zero__int_listen_socket_divide_06.c":271:58)
#loc373 = loc("CWE369_Divide_by_Zero__int_listen_socket_divide_06.c":271:59)
#loc374 = loc("CWE369_Divide_by_Zero__int_listen_socket_divide_06.c":271:68)
#loc375 = loc("CWE369_Divide_by_Zero__int_listen_socket_divide_06.c":271:82)
#loc376 = loc("CWE369_Divide_by_Zero__int_listen_socket_divide_06.c":271:21)
#loc377 = loc("CWE369_Divide_by_Zero__int_listen_socket_divide_06.c":271:88)
#loc378 = loc("CWE369_Divide_by_Zero__int_listen_socket_divide_06.c":272:17)
#loc379 = loc("CWE369_Divide_by_Zero__int_listen_socket_divide_06.c":273:21)
#loc380 = loc("CWE369_Divide_by_Zero__int_listen_socket_divide_06.c":275:17)
#loc381 = loc("CWE369_Divide_by_Zero__int_listen_socket_divide_06.c":278:17)
#loc382 = loc("CWE369_Divide_by_Zero__int_listen_socket_divide_06.c":275:28)
#loc383 = loc("CWE369_Divide_by_Zero__int_listen_socket_divide_06.c":275:42)
#loc384 = loc("CWE369_Divide_by_Zero__int_listen_socket_divide_06.c":275:21)
#loc385 = loc("CWE369_Divide_by_Zero__int_listen_socket_divide_06.c":275:61)
#loc386 = loc("CWE369_Divide_by_Zero__int_listen_socket_divide_06.c":276:17)
#loc387 = loc("CWE369_Divide_by_Zero__int_listen_socket_divide_06.c":277:21)
#loc388 = loc("CWE369_Divide_by_Zero__int_listen_socket_divide_06.c":279:39)
#loc389 = loc("CWE369_Divide_by_Zero__int_listen_socket_divide_06.c":279:53)
#loc390 = loc("CWE369_Divide_by_Zero__int_listen_socket_divide_06.c":279:59)
#loc391 = loc("CWE369_Divide_by_Zero__int_listen_socket_divide_06.c":279:32)
#loc392 = loc("CWE369_Divide_by_Zero__int_listen_socket_divide_06.c":279:17)
#loc393 = loc("CWE369_Divide_by_Zero__int_listen_socket_divide_06.c":279:63)
#loc394 = loc("CWE369_Divide_by_Zero__int_listen_socket_divide_06.c":280:17)
#loc395 = loc("CWE369_Divide_by_Zero__int_listen_socket_divide_06.c":283:17)
#loc396 = loc("CWE369_Divide_by_Zero__int_listen_socket_divide_06.c":280:21)
#loc397 = loc("CWE369_Divide_by_Zero__int_listen_socket_divide_06.c":280:37)
#loc398 = loc("CWE369_Divide_by_Zero__int_listen_socket_divide_06.c":281:17)
#loc399 = loc("CWE369_Divide_by_Zero__int_listen_socket_divide_06.c":282:21)
#loc400 = loc("CWE369_Divide_by_Zero__int_listen_socket_divide_06.c":285:35)
#loc401 = loc("CWE369_Divide_by_Zero__int_listen_socket_divide_06.c":285:49)
#loc402 = loc("CWE369_Divide_by_Zero__int_listen_socket_divide_06.c":285:62)
#loc403 = loc("CWE369_Divide_by_Zero__int_listen_socket_divide_06.c":285:80)
#loc404 = loc("CWE369_Divide_by_Zero__int_listen_socket_divide_06.c":285:83)
#loc405 = loc("CWE369_Divide_by_Zero__int_listen_socket_divide_06.c":285:30)
#loc406 = loc("CWE369_Divide_by_Zero__int_listen_socket_divide_06.c":285:17)
#loc407 = loc("CWE369_Divide_by_Zero__int_listen_socket_divide_06.c":285:84)
#loc408 = loc("CWE369_Divide_by_Zero__int_listen_socket_divide_06.c":286:17)
#loc409 = loc("CWE369_Divide_by_Zero__int_listen_socket_divide_06.c":289:17)
#loc410 = loc("CWE369_Divide_by_Zero__int_listen_socket_divide_06.c":286:21)
#loc411 = loc("CWE369_Divide_by_Zero__int_listen_socket_divide_06.c":286:35)
#loc412 = loc("CWE369_Divide_by_Zero__int_listen_socket_divide_06.c":286:48)
#loc413 = loc("CWE369_Divide_by_Zero__int_listen_socket_divide_06.c":286:51)
#loc414 = loc("CWE369_Divide_by_Zero__int_listen_socket_divide_06.c":286:65)
#loc415 = loc("CWE369_Divide_by_Zero__int_listen_socket_divide_06.c":287:17)
#loc416 = loc("CWE369_Divide_by_Zero__int_listen_socket_divide_06.c":288:21)
#loc417 = loc("CWE369_Divide_by_Zero__int_listen_socket_divide_06.c":291:43)
#loc418 = loc("CWE369_Divide_by_Zero__int_listen_socket_divide_06.c":291:29)
#loc419 = loc("CWE369_Divide_by_Zero__int_listen_socket_divide_06.c":291:17)
#loc420 = loc("CWE369_Divide_by_Zero__int_listen_socket_divide_06.c":293:29)
#loc421 = loc("CWE369_Divide_by_Zero__int_listen_socket_divide_06.c":293:24)
#loc422 = loc("CWE369_Divide_by_Zero__int_listen_socket_divide_06.c":293:17)
#loc423 = loc("CWE369_Divide_by_Zero__int_listen_socket_divide_06.c":293:40)
#loc424 = loc("CWE369_Divide_by_Zero__int_listen_socket_divide_06.c":295:20)
#loc425 = loc("CWE369_Divide_by_Zero__int_listen_socket_divide_06.c":296:13)
#loc426 = loc("CWE369_Divide_by_Zero__int_listen_socket_divide_06.c":299:13)
#loc427 = loc("CWE369_Divide_by_Zero__int_listen_socket_divide_06.c":296:17)
#loc428 = loc("CWE369_Divide_by_Zero__int_listen_socket_divide_06.c":296:33)
#loc429 = loc("CWE369_Divide_by_Zero__int_listen_socket_divide_06.c":297:13)
#loc430 = loc("CWE369_Divide_by_Zero__int_listen_socket_divide_06.c":298:30)
#loc431 = loc("CWE369_Divide_by_Zero__int_listen_socket_divide_06.c":298:17)
#loc432 = loc("CWE369_Divide_by_Zero__int_listen_socket_divide_06.c":300:13)
#loc433 = loc("CWE369_Divide_by_Zero__int_listen_socket_divide_06.c":303:13)
#loc434 = loc("CWE369_Divide_by_Zero__int_listen_socket_divide_06.c":300:17)
#loc435 = loc("CWE369_Divide_by_Zero__int_listen_socket_divide_06.c":300:33)
#loc436 = loc("CWE369_Divide_by_Zero__int_listen_socket_divide_06.c":301:13)
#loc437 = loc("CWE369_Divide_by_Zero__int_listen_socket_divide_06.c":302:30)
#loc438 = loc("CWE369_Divide_by_Zero__int_listen_socket_divide_06.c":302:17)
#loc439 = loc("CWE369_Divide_by_Zero__int_listen_socket_divide_06.c":312:5)
#loc440 = loc("CWE369_Divide_by_Zero__int_listen_socket_divide_06.c":323:5)
#loc441 = loc("CWE369_Divide_by_Zero__int_listen_socket_divide_06.c":312:8)
#loc442 = loc("CWE369_Divide_by_Zero__int_listen_socket_divide_06.c":312:27)
#loc443 = loc("CWE369_Divide_by_Zero__int_listen_socket_divide_06.c":313:5)
#loc444 = loc("CWE369_Divide_by_Zero__int_listen_socket_divide_06.c":315:9)
#loc445 = loc("CWE369_Divide_by_Zero__int_listen_socket_divide_06.c":322:9)
#loc446 = loc("CWE369_Divide_by_Zero__int_listen_socket_divide_06.c":315:13)
#loc447 = loc("CWE369_Divide_by_Zero__int_listen_socket_divide_06.c":315:21)
#loc448 = loc("CWE369_Divide_by_Zero__int_listen_socket_divide_06.c":316:9)
#loc449 = loc("CWE369_Divide_by_Zero__int_listen_socket_divide_06.c":318:9)
#loc450 = loc("CWE369_Divide_by_Zero__int_listen_socket_divide_06.c":320:9)
#loc451 = loc("CWE369_Divide_by_Zero__int_listen_socket_divide_06.c":317:26)
#loc452 = loc("CWE369_Divide_by_Zero__int_listen_socket_divide_06.c":317:32)
#loc453 = loc("CWE369_Divide_by_Zero__int_listen_socket_divide_06.c":317:13)
#loc454 = loc("CWE369_Divide_by_Zero__int_listen_socket_divide_06.c":321:23)
#loc455 = loc("CWE369_Divide_by_Zero__int_listen_socket_divide_06.c":321:13)
#loc456 = loc("CWE369_Divide_by_Zero__int_listen_socket_divide_06.c":327:1)
#loc457 = loc("CWE369_Divide_by_Zero__int_listen_socket_divide_06.c":347:1)
#loc458 = loc("CWE369_Divide_by_Zero__int_listen_socket_divide_06.c":329:5)
#loc459 = loc("CWE369_Divide_by_Zero__int_listen_socket_divide_06.c":329:9)
#loc460 = loc("CWE369_Divide_by_Zero__int_listen_socket_divide_06.c":331:13)
#loc461 = loc("CWE369_Divide_by_Zero__int_listen_socket_divide_06.c":331:12)
#loc462 = loc("CWE369_Divide_by_Zero__int_listen_socket_divide_06.c":331:5)
#loc463 = loc("CWE369_Divide_by_Zero__int_listen_socket_divide_06.c":332:5)
#loc464 = loc("CWE369_Divide_by_Zero__int_listen_socket_divide_06.c":341:5)
#loc465 = loc("CWE369_Divide_by_Zero__int_listen_socket_divide_06.c":332:8)
#loc466 = loc("CWE369_Divide_by_Zero__int_listen_socket_divide_06.c":332:27)
#loc467 = loc("CWE369_Divide_by_Zero__int_listen_socket_divide_06.c":333:5)
#loc468 = loc("CWE369_Divide_by_Zero__int_listen_socket_divide_06.c":336:5)
#loc469 = loc("CWE369_Divide_by_Zero__int_listen_socket_divide_06.c":338:5)
#loc470 = loc("CWE369_Divide_by_Zero__int_listen_socket_divide_06.c":335:19)
#loc471 = loc("CWE369_Divide_by_Zero__int_listen_socket_divide_06.c":335:9)
#loc472 = loc("CWE369_Divide_by_Zero__int_listen_socket_divide_06.c":340:16)
#loc473 = loc("CWE369_Divide_by_Zero__int_listen_socket_divide_06.c":340:9)
#loc474 = loc("CWE369_Divide_by_Zero__int_listen_socket_divide_06.c":342:5)
#loc475 = loc("CWE369_Divide_by_Zero__int_listen_socket_divide_06.c":346:5)
#loc476 = loc("CWE369_Divide_by_Zero__int_listen_socket_divide_06.c":342:8)
#loc477 = loc("CWE369_Divide_by_Zero__int_listen_socket_divide_06.c":342:27)
#loc478 = loc("CWE369_Divide_by_Zero__int_listen_socket_divide_06.c":343:5)
#loc479 = loc("CWE369_Divide_by_Zero__int_listen_socket_divide_06.c":345:22)
#loc480 = loc("CWE369_Divide_by_Zero__int_listen_socket_divide_06.c":345:28)
#loc481 = loc("CWE369_Divide_by_Zero__int_listen_socket_divide_06.c":345:9)
#loc482 = loc("CWE369_Divide_by_Zero__int_listen_socket_divide_06.c":350:1)
#loc483 = loc("CWE369_Divide_by_Zero__int_listen_socket_divide_06.c":365:1)
#loc484 = loc("CWE369_Divide_by_Zero__int_listen_socket_divide_06.c":352:5)
#loc485 = loc("CWE369_Divide_by_Zero__int_listen_socket_divide_06.c":352:9)
#loc486 = loc("CWE369_Divide_by_Zero__int_listen_socket_divide_06.c":354:13)
#loc487 = loc("CWE369_Divide_by_Zero__int_listen_socket_divide_06.c":354:12)
#loc488 = loc("CWE369_Divide_by_Zero__int_listen_socket_divide_06.c":354:5)
#loc489 = loc("CWE369_Divide_by_Zero__int_listen_socket_divide_06.c":355:5)
#loc490 = loc("CWE369_Divide_by_Zero__int_listen_socket_divide_06.c":359:5)
#loc491 = loc("CWE369_Divide_by_Zero__int_listen_socket_divide_06.c":355:8)
#loc492 = loc("CWE369_Divide_by_Zero__int_listen_socket_divide_06.c":355:27)
#loc493 = loc("CWE369_Divide_by_Zero__int_listen_socket_divide_06.c":356:5)
#loc494 = loc("CWE369_Divide_by_Zero__int_listen_socket_divide_06.c":358:16)
#loc495 = loc("CWE369_Divide_by_Zero__int_listen_socket_divide_06.c":358:9)
#loc496 = loc("CWE369_Divide_by_Zero__int_listen_socket_divide_06.c":360:5)
#loc497 = loc("CWE369_Divide_by_Zero__int_listen_socket_divide_06.c":364:5)
#loc498 = loc("CWE369_Divide_by_Zero__int_listen_socket_divide_06.c":360:8)
#loc499 = loc("CWE369_Divide_by_Zero__int_listen_socket_divide_06.c":360:27)
#loc500 = loc("CWE369_Divide_by_Zero__int_listen_socket_divide_06.c":361:5)
#loc501 = loc("CWE369_Divide_by_Zero__int_listen_socket_divide_06.c":363:22)
#loc502 = loc("CWE369_Divide_by_Zero__int_listen_socket_divide_06.c":363:28)
#loc503 = loc("CWE369_Divide_by_Zero__int_listen_socket_divide_06.c":363:9)
#loc504 = loc(fused[#loc1, #loc2])
#loc505 = loc(fused[#loc3, #loc4])
#loc506 = loc(fused[#loc5, #loc6])
#loc507 = loc(fused[#loc7, #loc8])
#loc508 = loc(fused[#loc9, #loc10])
#loc509 = loc(fused[#loc11, #loc12])
#loc510 = loc(fused[#loc13, #loc14])
#loc511 = loc(fused[#loc15, #loc16])
#loc512 = loc(fused[#loc17, #loc18])
#loc513 = loc(fused[#loc19, #loc20])
#loc514 = loc(fused[#loc21, #loc22])
#loc515 = loc(fused[#loc25, #loc23])
#loc516 = loc(fused[#loc26, #loc27])
#loc517 = loc(fused[#loc28, #loc29])
#loc518 = loc(fused[#loc30, #loc27])
#loc519 = loc(fused[#loc31, #loc32])
#loc520 = loc(fused[#loc33, #loc34])
#loc521 = loc(fused[#loc35, #loc36])
#loc522 = loc(fused[#loc37, #loc38])
#loc523 = loc(fused[#loc39, #loc40])
#loc524 = loc(fused[#loc41, #loc42])
#loc525 = loc(fused[#loc43, #loc44])
#loc526 = loc(fused[#loc45, #loc46])
#loc527 = loc(fused[#loc51, #loc52])
#loc528 = loc(fused[#loc53, #loc54])
#loc529 = loc(fused[#loc55, #loc56])
#loc530 = loc(fused[#loc57, #loc54])
#loc531 = loc(fused[#loc59, #loc60])
#loc532 = loc(fused[#loc62, #loc63])
#loc533 = loc(fused[#loc64, #loc65])
#loc534 = loc(fused[#loc68, #loc66])
#loc535 = loc(fused[#loc72, #loc69])
#loc536 = loc(fused[#loc76, #loc77])
#loc537 = loc(fused[#loc78, #loc79])
#loc538 = loc(fused[#loc81, #loc82])
#loc539 = loc(fused[#loc83, #loc84])
#loc540 = loc(fused[#loc85, #loc86])
#loc541 = loc(fused[#loc87, #loc79])
#loc542 = loc(fused[#loc89, #loc90])
#loc543 = loc(fused[#loc93, #loc94])
#loc544 = loc(fused[#loc95, #loc90])
#loc545 = loc(fused[#loc101, #loc102])
#loc546 = loc(fused[#loc103, #loc104])
#loc547 = loc(fused[#loc105, #loc106])
#loc548 = loc(fused[#loc107, #loc104])
#loc549 = loc(fused[#loc111, #loc112])
#loc550 = loc(fused[#loc115, #loc116])
#loc551 = loc(fused[#loc117, #loc118])
#loc552 = loc(fused[#loc119, #loc120])
#loc553 = loc(fused[#loc122, #loc123])
#loc554 = loc(fused[#loc124, #loc118])
#loc555 = loc(fused[#loc128, #loc126])
#loc556 = loc(fused[#loc131, #loc132])
#loc557 = loc(fused[#loc134, #loc135])
#loc558 = loc(fused[#loc136, #loc137])
#loc559 = loc(fused[#loc138, #loc135])
#loc560 = loc(fused[#loc141, #loc142])
#loc561 = loc(fused[#loc143, #loc144])
#loc562 = loc(fused[#loc145, #loc142])
#loc563 = loc(fused[#loc148, #loc149])
#loc564 = loc(fused[#loc150, #loc151])
#loc565 = loc(fused[#loc152, #loc149])
#loc566 = loc(fused[#loc153, #loc154])
#loc567 = loc(fused[#loc156, #loc157])
#loc568 = loc(fused[#loc158, #loc159])
#loc569 = loc(fused[#loc160, #loc161])
#loc570 = loc(fused[#loc162, #loc163])
#loc571 = loc(fused[#loc164, #loc165])
#loc572 = loc(fused[#loc166, #loc167])
#loc573 = loc(fused[#loc170, #loc171])
#loc574 = loc(fused[#loc172, #loc173])
#loc575 = loc(fused[#loc176, #loc174])
#loc576 = loc(fused[#loc177, #loc178])
#loc577 = loc(fused[#loc179, #loc180])
#loc578 = loc(fused[#loc181, #loc178])
#loc579 = loc(fused[#loc182, #loc183])
#loc580 = loc(fused[#loc184, #loc185])
#loc581 = loc(fused[#loc186, #loc187])
#loc582 = loc(fused[#loc188, #loc189])
#loc583 = loc(fused[#loc190, #loc191])
#loc584 = loc(fused[#loc192, #loc193])
#loc585 = loc(fused[#loc194, #loc195])
#loc586 = loc(fused[#loc196, #loc197])
#loc587 = loc(fused[#loc202, #loc203])
#loc588 = loc(fused[#loc204, #loc205])
#loc589 = loc(fused[#loc206, #loc207])
#loc590 = loc(fused[#loc208, #loc205])
#loc591 = loc(fused[#loc210, #loc211])
#loc592 = loc(fused[#loc213, #loc214])
#loc593 = loc(fused[#loc215, #loc216])
#loc594 = loc(fused[#loc218, #loc217])
#loc595 = loc(fused[#loc220, #loc219])
#loc596 = loc(fused[#loc223, #loc224])
#loc597 = loc(fused[#loc225, #loc226])
#loc598 = loc(fused[#loc228, #loc229])
#loc599 = loc(fused[#loc230, #loc231])
#loc600 = loc(fused[#loc232, #loc233])
#loc601 = loc(fused[#loc234, #loc226])
#loc602 = loc(fused[#loc236, #loc237])
#loc603 = loc(fused[#loc240, #loc241])
#loc604 = loc(fused[#loc242, #loc237])
#loc605 = loc(fused[#loc248, #loc249])
#loc606 = loc(fused[#loc250, #loc251])
#loc607 = loc(fused[#loc252, #loc253])
#loc608 = loc(fused[#loc254, #loc251])
#loc609 = loc(fused[#loc258, #loc259])
#loc610 = loc(fused[#loc262, #loc263])
#loc611 = loc(fused[#loc264, #loc265])
#loc612 = loc(fused[#loc266, #loc267])
#loc613 = loc(fused[#loc269, #loc270])
#loc614 = loc(fused[#loc271, #loc265])
#loc615 = loc(fused[#loc275, #loc273])
#loc616 = loc(fused[#loc278, #loc279])
#loc617 = loc(fused[#loc281, #loc282])
#loc618 = loc(fused[#loc283, #loc284])
#loc619 = loc(fused[#loc285, #loc282])
#loc620 = loc(fused[#loc288, #loc289])
#loc621 = loc(fused[#loc290, #loc291])
#loc622 = loc(fused[#loc292, #loc289])
#loc623 = loc(fused[#loc295, #loc296])
#loc624 = loc(fused[#loc297, #loc298])
#loc625 = loc(fused[#loc299, #loc300, #loc301, #loc296])
#loc626 = loc(fused[#loc303, #loc304])
#loc627 = loc(fused[#loc305, #loc306])
#loc628 = loc(fused[#loc307, #loc308, #loc309, #loc304])
#loc629 = loc(fused[#loc310, #loc311])
#loc630 = loc(fused[#loc314, #loc315])
#loc631 = loc(fused[#loc316, #loc317])
#loc632 = loc(fused[#loc320, #loc318])
#loc633 = loc(fused[#loc321, #loc322])
#loc634 = loc(fused[#loc323, #loc324])
#loc635 = loc(fused[#loc325, #loc322])
#loc636 = loc(fused[#loc326, #loc327])
#loc637 = loc(fused[#loc328, #loc329])
#loc638 = loc(fused[#loc330, #loc331])
#loc639 = loc(fused[#loc332, #loc333])
#loc640 = loc(fused[#loc334, #loc335])
#loc641 = loc(fused[#loc336, #loc337])
#loc642 = loc(fused[#loc338, #loc339])
#loc643 = loc(fused[#loc340, #loc341])
#loc644 = loc(fused[#loc346, #loc347])
#loc645 = loc(fused[#loc348, #loc349])
#loc646 = loc(fused[#loc350, #loc351])
#loc647 = loc(fused[#loc352, #loc349])
#loc648 = loc(fused[#loc354, #loc355])
#loc649 = loc(fused[#loc357, #loc358])
#loc650 = loc(fused[#loc359, #loc360])
#loc651 = loc(fused[#loc362, #loc361])
#loc652 = loc(fused[#loc364, #loc363])
#loc653 = loc(fused[#loc367, #loc368])
#loc654 = loc(fused[#loc369, #loc370])
#loc655 = loc(fused[#loc372, #loc373])
#loc656 = loc(fused[#loc374, #loc375])
#loc657 = loc(fused[#loc376, #loc377])
#loc658 = loc(fused[#loc378, #loc370])
#loc659 = loc(fused[#loc380, #loc381])
#loc660 = loc(fused[#loc384, #loc385])
#loc661 = loc(fused[#loc386, #loc381])
#loc662 = loc(fused[#loc392, #loc393])
#loc663 = loc(fused[#loc394, #loc395])
#loc664 = loc(fused[#loc396, #loc397])
#loc665 = loc(fused[#loc398, #loc395])
#loc666 = loc(fused[#loc402, #loc403])
#loc667 = loc(fused[#loc406, #loc407])
#loc668 = loc(fused[#loc408, #loc409])
#loc669 = loc(fused[#loc410, #loc411])
#loc670 = loc(fused[#loc413, #loc414])
#loc671 = loc(fused[#loc415, #loc409])
#loc672 = loc(fused[#loc419, #loc417])
#loc673 = loc(fused[#loc422, #loc423])
#loc674 = loc(fused[#loc425, #loc426])
#loc675 = loc(fused[#loc427, #loc428])
#loc676 = loc(fused[#loc429, #loc426])
#loc677 = loc(fused[#loc432, #loc433])
#loc678 = loc(fused[#loc434, #loc435])
#loc679 = loc(fused[#loc436, #loc433])
#loc680 = loc(fused[#loc439, #loc440])
#loc681 = loc(fused[#loc441, #loc442])
#loc682 = loc(fused[#loc443, #loc440])
#loc683 = loc(fused[#loc444, #loc445])
#loc684 = loc(fused[#loc446, #loc447])
#loc685 = loc(fused[#loc448, #loc449, #loc450, #loc445])
#loc686 = loc(fused[#loc451, #loc452])
#loc687 = loc(fused[#loc456, #loc457])
#loc688 = loc(fused[#loc458, #loc459])
#loc689 = loc(fused[#loc462, #loc460])
#loc690 = loc(fused[#loc463, #loc464])
#loc691 = loc(fused[#loc465, #loc466])
#loc692 = loc(fused[#loc467, #loc468, #loc469, #loc464])
#loc693 = loc(fused[#loc473, #loc472])
#loc694 = loc(fused[#loc474, #loc475])
#loc695 = loc(fused[#loc476, #loc477])
#loc696 = loc(fused[#loc478, #loc475])
#loc697 = loc(fused[#loc479, #loc480])
#loc698 = loc(fused[#loc482, #loc483])
#loc699 = loc(fused[#loc484, #loc485])
#loc700 = loc(fused[#loc488, #loc486])
#loc701 = loc(fused[#loc489, #loc490])
#loc702 = loc(fused[#loc491, #loc492])
#loc703 = loc(fused[#loc493, #loc490])
#loc704 = loc(fused[#loc495, #loc494])
#loc705 = loc(fused[#loc496, #loc497])
#loc706 = loc(fused[#loc498, #loc499])
#loc707 = loc(fused[#loc500, #loc497])
#loc708 = loc(fused[#loc501, #loc502])
