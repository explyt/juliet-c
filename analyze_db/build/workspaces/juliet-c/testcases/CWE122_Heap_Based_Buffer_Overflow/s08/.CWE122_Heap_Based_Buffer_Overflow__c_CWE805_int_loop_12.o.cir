!s32i = !cir.int<s, 32>
!u64i = !cir.int<u, 64>
!void = !cir.void
#fn_attr = #cir<extra({nothrow = #cir.nothrow})>
#fn_attr1 = #cir<extra({inline = #cir.inline<no>, nothrow = #cir.nothrow, optnone = #cir.optnone, uwtable = #cir.uwtable<async>})>
module @"/workspaces/juliet-c/testcases/CWE122_Heap_Based_Buffer_Overflow/s08/CWE122_Heap_Based_Buffer_Overflow__c_CWE805_int_loop_12.c" attributes {cir.lang = #cir.lang<c>, cir.sob = #cir.signed_overflow_behavior<undefined>, cir.triple = "x86_64-unknown-linux-gnu", cir.type_size_info = #cir.type_size_info<char = 8, int = 32, size_t = 64>, cir.uwtable = #cir.uwtable<async>, dlti.dl_spec = #dlti.dl_spec<f16 = dense<16> : vector<2xi64>, f64 = dense<64> : vector<2xi64>, i32 = dense<32> : vector<2xi64>, i16 = dense<16> : vector<2xi64>, !llvm.ptr<272> = dense<64> : vector<4xi64>, !llvm.ptr<271> = dense<32> : vector<4xi64>, f128 = dense<128> : vector<2xi64>, f80 = dense<128> : vector<2xi64>, i128 = dense<128> : vector<2xi64>, i64 = dense<64> : vector<2xi64>, i8 = dense<8> : vector<2xi64>, i1 = dense<8> : vector<2xi64>, !llvm.ptr = dense<64> : vector<4xi64>, !llvm.ptr<270> = dense<32> : vector<4xi64>, "dlti.endianness" = "little", "dlti.stack_alignment" = 128 : i64, "dlti.mangling_mode" = "e">} {
  cir.func no_proto private @globalReturnsTrueOrFalse(...) -> !s32i loc(#loc157)
  cir.func private @malloc(!u64i) -> !cir.ptr<!void> extra(#fn_attr) loc(#loc158)
  cir.func private @exit(!s32i) extra(#fn_attr) loc(#loc159)
  cir.func private @printIntLine(!s32i) loc(#loc160)
  cir.func private @free(!cir.ptr<!void>) extra(#fn_attr) loc(#loc161)
  cir.func no_proto @CWE122_Heap_Based_Buffer_Overflow__c_CWE805_int_loop_12_bad() extra(#fn_attr1) {
    %0 = cir.alloca !cir.array<!s32i x 100>, !cir.ptr<!cir.array<!s32i x 100>>, ["source"] {alignment = 16 : i64} loc(#loc163)
    %1 = cir.alloca !u64i, !cir.ptr<!u64i>, ["i"] {alignment = 8 : i64} loc(#loc164)
    %2 = cir.alloca !cir.ptr<!s32i>, !cir.ptr<!cir.ptr<!s32i>>, ["data"] {alignment = 8 : i64} loc(#loc165)
    %3 = cir.const #cir.ptr<null> : !cir.ptr<!s32i> loc(#loc19)
    cir.store %3, %2 : !cir.ptr<!s32i>, !cir.ptr<!cir.ptr<!s32i>> loc(#loc166)
    cir.br ^bb1 loc(#loc167)
  ^bb1:  // pred: ^bb0
    %4 = cir.get_global @globalReturnsTrueOrFalse : !cir.ptr<!cir.func<(...) -> !s32i>> loc(#loc168)
    %5 = cir.cast(bitcast, %4 : !cir.ptr<!cir.func<(...) -> !s32i>>), !cir.ptr<!cir.func<() -> !s32i>> loc(#loc168)
    %6 = cir.call %5() : (!cir.ptr<!cir.func<() -> !s32i>>) -> !s32i loc(#loc23)
    %7 = cir.cast(int_to_bool, %6 : !s32i), !cir.bool loc(#loc23)
    cir.brcond %7 ^bb2, ^bb7 loc(#loc169)
  ^bb2:  // pred: ^bb1
    %8 = cir.get_global @malloc : !cir.ptr<!cir.func<(!u64i) -> !cir.ptr<!void>>> loc(#loc28)
    %9 = cir.const #cir.int<50> : !s32i loc(#loc29)
    %10 = cir.cast(integral, %9 : !s32i), !u64i loc(#loc29)
    %11 = cir.const #cir.int<4> : !u64i loc(#loc170)
    %12 = cir.binop(mul, %10, %11) : !u64i loc(#loc171)
    %13 = cir.call @malloc(%12) : (!u64i) -> !cir.ptr<!void> extra(#fn_attr) loc(#loc28)
    %14 = cir.cast(bitcast, %13 : !cir.ptr<!void>), !cir.ptr<!s32i> loc(#loc172)
    cir.store %14, %2 : !cir.ptr<!s32i>, !cir.ptr<!cir.ptr<!s32i>> loc(#loc173)
    cir.br ^bb3 loc(#loc174)
  ^bb3:  // pred: ^bb2
    %15 = cir.load %2 : !cir.ptr<!cir.ptr<!s32i>>, !cir.ptr<!s32i> loc(#loc36)
    %16 = cir.const #cir.ptr<null> : !cir.ptr<!void> loc(#loc37)
    %17 = cir.cast(bitcast, %16 : !cir.ptr<!void>), !cir.ptr<!s32i> loc(#loc37)
    %18 = cir.cmp(eq, %15, %17) : !cir.ptr<!s32i>, !cir.bool loc(#loc175)
    cir.brcond %18 ^bb4, ^bb5 loc(#loc176)
  ^bb4:  // pred: ^bb3
    %19 = cir.get_global @exit : !cir.ptr<!cir.func<(!s32i)>> loc(#loc39)
    %20 = cir.const #cir.int<1> : !s32i loc(#loc40)
    %21 = cir.unary(minus, %20) nsw : !s32i, !s32i loc(#loc41)
    cir.call @exit(%21) : (!s32i) -> () extra(#fn_attr) loc(#loc39)
    cir.br ^bb5 loc(#loc35)
  ^bb5:  // 2 preds: ^bb3, ^bb4
    cir.br ^bb6 loc(#loc35)
  ^bb6:  // pred: ^bb5
    cir.br ^bb12 loc(#loc26)
  ^bb7:  // pred: ^bb1
    %22 = cir.get_global @malloc : !cir.ptr<!cir.func<(!u64i) -> !cir.ptr<!void>>> loc(#loc42)
    %23 = cir.const #cir.int<100> : !s32i loc(#loc43)
    %24 = cir.cast(integral, %23 : !s32i), !u64i loc(#loc43)
    %25 = cir.const #cir.int<4> : !u64i loc(#loc177)
    %26 = cir.binop(mul, %24, %25) : !u64i loc(#loc178)
    %27 = cir.call @malloc(%26) : (!u64i) -> !cir.ptr<!void> extra(#fn_attr) loc(#loc42)
    %28 = cir.cast(bitcast, %27 : !cir.ptr<!void>), !cir.ptr<!s32i> loc(#loc179)
    cir.store %28, %2 : !cir.ptr<!s32i>, !cir.ptr<!cir.ptr<!s32i>> loc(#loc180)
    cir.br ^bb8 loc(#loc181)
  ^bb8:  // pred: ^bb7
    %29 = cir.load %2 : !cir.ptr<!cir.ptr<!s32i>>, !cir.ptr<!s32i> loc(#loc50)
    %30 = cir.const #cir.ptr<null> : !cir.ptr<!void> loc(#loc51)
    %31 = cir.cast(bitcast, %30 : !cir.ptr<!void>), !cir.ptr<!s32i> loc(#loc51)
    %32 = cir.cmp(eq, %29, %31) : !cir.ptr<!s32i>, !cir.bool loc(#loc182)
    cir.brcond %32 ^bb9, ^bb10 loc(#loc183)
  ^bb9:  // pred: ^bb8
    %33 = cir.get_global @exit : !cir.ptr<!cir.func<(!s32i)>> loc(#loc53)
    %34 = cir.const #cir.int<1> : !s32i loc(#loc54)
    %35 = cir.unary(minus, %34) nsw : !s32i, !s32i loc(#loc55)
    cir.call @exit(%35) : (!s32i) -> () extra(#fn_attr) loc(#loc53)
    cir.br ^bb10 loc(#loc49)
  ^bb10:  // 2 preds: ^bb8, ^bb9
    cir.br ^bb11 loc(#loc49)
  ^bb11:  // pred: ^bb10
    cir.br ^bb12 loc(#loc22)
  ^bb12:  // 2 preds: ^bb6, ^bb11
    cir.br ^bb13 loc(#loc22)
  ^bb13:  // pred: ^bb12
    cir.br ^bb14 loc(#loc184)
  ^bb14:  // pred: ^bb13
    %36 = cir.const #cir.zero : !cir.array<!s32i x 100> loc(#loc163)
    cir.store %36, %0 : !cir.array<!s32i x 100>, !cir.ptr<!cir.array<!s32i x 100>> loc(#loc163)
    cir.br ^bb15 loc(#loc185)
  ^bb15:  // pred: ^bb14
    cir.br ^bb16 loc(#loc186)
  ^bb16:  // pred: ^bb15
    %37 = cir.const #cir.int<0> : !s32i loc(#loc62)
    %38 = cir.cast(integral, %37 : !s32i), !u64i loc(#loc62)
    cir.store %38, %1 : !u64i, !cir.ptr<!u64i> loc(#loc187)
    cir.br ^bb17 loc(#loc186)
  ^bb17:  // 2 preds: ^bb16, ^bb21
    %39 = cir.load %1 : !cir.ptr<!u64i>, !u64i loc(#loc64)
    %40 = cir.const #cir.int<100> : !s32i loc(#loc65)
    %41 = cir.cast(integral, %40 : !s32i), !u64i loc(#loc65)
    %42 = cir.cmp(lt, %39, %41) : !u64i, !cir.bool loc(#loc188)
    cir.brcond %42 ^bb18, ^bb22 loc(#loc66)
  ^bb18:  // pred: ^bb17
    cir.br ^bb19 loc(#loc189)
  ^bb19:  // pred: ^bb18
    %43 = cir.load %1 : !cir.ptr<!u64i>, !u64i loc(#loc68)
    %44 = cir.cast(array_to_ptrdecay, %0 : !cir.ptr<!cir.array<!s32i x 100>>), !cir.ptr<!s32i> loc(#loc69)
    %45 = cir.ptr_stride(%44 : !cir.ptr<!s32i>, %43 : !u64i), !cir.ptr<!s32i> loc(#loc69)
    %46 = cir.load %45 : !cir.ptr<!s32i>, !s32i loc(#loc69)
    %47 = cir.load %2 : !cir.ptr<!cir.ptr<!s32i>>, !cir.ptr<!s32i> loc(#loc70)
    %48 = cir.load %1 : !cir.ptr<!u64i>, !u64i loc(#loc71)
    %49 = cir.ptr_stride(%47 : !cir.ptr<!s32i>, %48 : !u64i), !cir.ptr<!s32i> loc(#loc72)
    cir.store %46, %49 : !s32i, !cir.ptr<!s32i> loc(#loc190)
    cir.br ^bb20 loc(#loc61)
  ^bb20:  // pred: ^bb19
    cir.br ^bb21 loc(#loc61)
  ^bb21:  // pred: ^bb20
    %50 = cir.load %1 : !cir.ptr<!u64i>, !u64i loc(#loc74)
    %51 = cir.unary(inc, %50) : !u64i, !u64i loc(#loc75)
    cir.store %51, %1 : !u64i, !cir.ptr<!u64i> loc(#loc191)
    cir.br ^bb17 loc(#loc186)
  ^bb22:  // pred: ^bb17
    cir.br ^bb23 loc(#loc61)
  ^bb23:  // pred: ^bb22
    %52 = cir.load %2 : !cir.ptr<!cir.ptr<!s32i>>, !cir.ptr<!s32i> loc(#loc76)
    %53 = cir.const #cir.int<0> : !s32i loc(#loc77)
    %54 = cir.ptr_stride(%52 : !cir.ptr<!s32i>, %53 : !s32i), !cir.ptr<!s32i> loc(#loc78)
    %55 = cir.load %54 : !cir.ptr<!s32i>, !s32i loc(#loc76)
    cir.call @printIntLine(%55) : (!s32i) -> () loc(#loc79)
    %56 = cir.load %2 : !cir.ptr<!cir.ptr<!s32i>>, !cir.ptr<!s32i> loc(#loc80)
    %57 = cir.cast(bitcast, %56 : !cir.ptr<!s32i>), !cir.ptr<!void> loc(#loc80)
    cir.call @free(%57) : (!cir.ptr<!void>) -> () extra(#fn_attr) loc(#loc81)
    cir.br ^bb24 loc(#loc59)
  ^bb24:  // pred: ^bb23
    cir.br ^bb25 loc(#loc57)
  ^bb25:  // pred: ^bb24
    cir.return loc(#loc12)
  } loc(#loc162)
  cir.func no_proto @CWE122_Heap_Based_Buffer_Overflow__c_CWE805_int_loop_12_good() extra(#fn_attr1) {
    %0 = cir.get_global @goodG2B : !cir.ptr<!cir.func<()>> loc(#loc193)
    cir.call %0() : (!cir.ptr<!cir.func<()>>) -> () loc(#loc84)
    cir.return loc(#loc83)
  } loc(#loc192)
  cir.func no_proto internal private @goodG2B() extra(#fn_attr1) {
    %0 = cir.alloca !cir.array<!s32i x 100>, !cir.ptr<!cir.array<!s32i x 100>>, ["source"] {alignment = 16 : i64} loc(#loc195)
    %1 = cir.alloca !u64i, !cir.ptr<!u64i>, ["i"] {alignment = 8 : i64} loc(#loc196)
    %2 = cir.alloca !cir.ptr<!s32i>, !cir.ptr<!cir.ptr<!s32i>>, ["data"] {alignment = 8 : i64} loc(#loc197)
    %3 = cir.const #cir.ptr<null> : !cir.ptr<!s32i> loc(#loc94)
    cir.store %3, %2 : !cir.ptr<!s32i>, !cir.ptr<!cir.ptr<!s32i>> loc(#loc198)
    cir.br ^bb1 loc(#loc199)
  ^bb1:  // pred: ^bb0
    %4 = cir.get_global @globalReturnsTrueOrFalse : !cir.ptr<!cir.func<(...) -> !s32i>> loc(#loc200)
    %5 = cir.cast(bitcast, %4 : !cir.ptr<!cir.func<(...) -> !s32i>>), !cir.ptr<!cir.func<() -> !s32i>> loc(#loc200)
    %6 = cir.call %5() : (!cir.ptr<!cir.func<() -> !s32i>>) -> !s32i loc(#loc98)
    %7 = cir.cast(int_to_bool, %6 : !s32i), !cir.bool loc(#loc98)
    cir.brcond %7 ^bb2, ^bb7 loc(#loc201)
  ^bb2:  // pred: ^bb1
    %8 = cir.get_global @malloc : !cir.ptr<!cir.func<(!u64i) -> !cir.ptr<!void>>> loc(#loc103)
    %9 = cir.const #cir.int<100> : !s32i loc(#loc104)
    %10 = cir.cast(integral, %9 : !s32i), !u64i loc(#loc104)
    %11 = cir.const #cir.int<4> : !u64i loc(#loc202)
    %12 = cir.binop(mul, %10, %11) : !u64i loc(#loc203)
    %13 = cir.call @malloc(%12) : (!u64i) -> !cir.ptr<!void> extra(#fn_attr) loc(#loc103)
    %14 = cir.cast(bitcast, %13 : !cir.ptr<!void>), !cir.ptr<!s32i> loc(#loc204)
    cir.store %14, %2 : !cir.ptr<!s32i>, !cir.ptr<!cir.ptr<!s32i>> loc(#loc205)
    cir.br ^bb3 loc(#loc206)
  ^bb3:  // pred: ^bb2
    %15 = cir.load %2 : !cir.ptr<!cir.ptr<!s32i>>, !cir.ptr<!s32i> loc(#loc111)
    %16 = cir.const #cir.ptr<null> : !cir.ptr<!void> loc(#loc112)
    %17 = cir.cast(bitcast, %16 : !cir.ptr<!void>), !cir.ptr<!s32i> loc(#loc112)
    %18 = cir.cmp(eq, %15, %17) : !cir.ptr<!s32i>, !cir.bool loc(#loc207)
    cir.brcond %18 ^bb4, ^bb5 loc(#loc208)
  ^bb4:  // pred: ^bb3
    %19 = cir.get_global @exit : !cir.ptr<!cir.func<(!s32i)>> loc(#loc114)
    %20 = cir.const #cir.int<1> : !s32i loc(#loc115)
    %21 = cir.unary(minus, %20) nsw : !s32i, !s32i loc(#loc116)
    cir.call @exit(%21) : (!s32i) -> () extra(#fn_attr) loc(#loc114)
    cir.br ^bb5 loc(#loc110)
  ^bb5:  // 2 preds: ^bb3, ^bb4
    cir.br ^bb6 loc(#loc110)
  ^bb6:  // pred: ^bb5
    cir.br ^bb12 loc(#loc101)
  ^bb7:  // pred: ^bb1
    %22 = cir.get_global @malloc : !cir.ptr<!cir.func<(!u64i) -> !cir.ptr<!void>>> loc(#loc117)
    %23 = cir.const #cir.int<100> : !s32i loc(#loc118)
    %24 = cir.cast(integral, %23 : !s32i), !u64i loc(#loc118)
    %25 = cir.const #cir.int<4> : !u64i loc(#loc209)
    %26 = cir.binop(mul, %24, %25) : !u64i loc(#loc210)
    %27 = cir.call @malloc(%26) : (!u64i) -> !cir.ptr<!void> extra(#fn_attr) loc(#loc117)
    %28 = cir.cast(bitcast, %27 : !cir.ptr<!void>), !cir.ptr<!s32i> loc(#loc211)
    cir.store %28, %2 : !cir.ptr<!s32i>, !cir.ptr<!cir.ptr<!s32i>> loc(#loc212)
    cir.br ^bb8 loc(#loc213)
  ^bb8:  // pred: ^bb7
    %29 = cir.load %2 : !cir.ptr<!cir.ptr<!s32i>>, !cir.ptr<!s32i> loc(#loc125)
    %30 = cir.const #cir.ptr<null> : !cir.ptr<!void> loc(#loc126)
    %31 = cir.cast(bitcast, %30 : !cir.ptr<!void>), !cir.ptr<!s32i> loc(#loc126)
    %32 = cir.cmp(eq, %29, %31) : !cir.ptr<!s32i>, !cir.bool loc(#loc214)
    cir.brcond %32 ^bb9, ^bb10 loc(#loc215)
  ^bb9:  // pred: ^bb8
    %33 = cir.get_global @exit : !cir.ptr<!cir.func<(!s32i)>> loc(#loc128)
    %34 = cir.const #cir.int<1> : !s32i loc(#loc129)
    %35 = cir.unary(minus, %34) nsw : !s32i, !s32i loc(#loc130)
    cir.call @exit(%35) : (!s32i) -> () extra(#fn_attr) loc(#loc128)
    cir.br ^bb10 loc(#loc124)
  ^bb10:  // 2 preds: ^bb8, ^bb9
    cir.br ^bb11 loc(#loc124)
  ^bb11:  // pred: ^bb10
    cir.br ^bb12 loc(#loc97)
  ^bb12:  // 2 preds: ^bb6, ^bb11
    cir.br ^bb13 loc(#loc97)
  ^bb13:  // pred: ^bb12
    cir.br ^bb14 loc(#loc216)
  ^bb14:  // pred: ^bb13
    %36 = cir.const #cir.zero : !cir.array<!s32i x 100> loc(#loc195)
    cir.store %36, %0 : !cir.array<!s32i x 100>, !cir.ptr<!cir.array<!s32i x 100>> loc(#loc195)
    cir.br ^bb15 loc(#loc217)
  ^bb15:  // pred: ^bb14
    cir.br ^bb16 loc(#loc218)
  ^bb16:  // pred: ^bb15
    %37 = cir.const #cir.int<0> : !s32i loc(#loc137)
    %38 = cir.cast(integral, %37 : !s32i), !u64i loc(#loc137)
    cir.store %38, %1 : !u64i, !cir.ptr<!u64i> loc(#loc219)
    cir.br ^bb17 loc(#loc218)
  ^bb17:  // 2 preds: ^bb16, ^bb21
    %39 = cir.load %1 : !cir.ptr<!u64i>, !u64i loc(#loc139)
    %40 = cir.const #cir.int<100> : !s32i loc(#loc140)
    %41 = cir.cast(integral, %40 : !s32i), !u64i loc(#loc140)
    %42 = cir.cmp(lt, %39, %41) : !u64i, !cir.bool loc(#loc220)
    cir.brcond %42 ^bb18, ^bb22 loc(#loc141)
  ^bb18:  // pred: ^bb17
    cir.br ^bb19 loc(#loc221)
  ^bb19:  // pred: ^bb18
    %43 = cir.load %1 : !cir.ptr<!u64i>, !u64i loc(#loc143)
    %44 = cir.cast(array_to_ptrdecay, %0 : !cir.ptr<!cir.array<!s32i x 100>>), !cir.ptr<!s32i> loc(#loc144)
    %45 = cir.ptr_stride(%44 : !cir.ptr<!s32i>, %43 : !u64i), !cir.ptr<!s32i> loc(#loc144)
    %46 = cir.load %45 : !cir.ptr<!s32i>, !s32i loc(#loc144)
    %47 = cir.load %2 : !cir.ptr<!cir.ptr<!s32i>>, !cir.ptr<!s32i> loc(#loc145)
    %48 = cir.load %1 : !cir.ptr<!u64i>, !u64i loc(#loc146)
    %49 = cir.ptr_stride(%47 : !cir.ptr<!s32i>, %48 : !u64i), !cir.ptr<!s32i> loc(#loc147)
    cir.store %46, %49 : !s32i, !cir.ptr<!s32i> loc(#loc222)
    cir.br ^bb20 loc(#loc136)
  ^bb20:  // pred: ^bb19
    cir.br ^bb21 loc(#loc136)
  ^bb21:  // pred: ^bb20
    %50 = cir.load %1 : !cir.ptr<!u64i>, !u64i loc(#loc149)
    %51 = cir.unary(inc, %50) : !u64i, !u64i loc(#loc150)
    cir.store %51, %1 : !u64i, !cir.ptr<!u64i> loc(#loc223)
    cir.br ^bb17 loc(#loc218)
  ^bb22:  // pred: ^bb17
    cir.br ^bb23 loc(#loc136)
  ^bb23:  // pred: ^bb22
    %52 = cir.load %2 : !cir.ptr<!cir.ptr<!s32i>>, !cir.ptr<!s32i> loc(#loc151)
    %53 = cir.const #cir.int<0> : !s32i loc(#loc152)
    %54 = cir.ptr_stride(%52 : !cir.ptr<!s32i>, %53 : !s32i), !cir.ptr<!s32i> loc(#loc153)
    %55 = cir.load %54 : !cir.ptr<!s32i>, !s32i loc(#loc151)
    cir.call @printIntLine(%55) : (!s32i) -> () loc(#loc154)
    %56 = cir.load %2 : !cir.ptr<!cir.ptr<!s32i>>, !cir.ptr<!s32i> loc(#loc155)
    %57 = cir.cast(bitcast, %56 : !cir.ptr<!s32i>), !cir.ptr<!void> loc(#loc155)
    cir.call @free(%57) : (!cir.ptr<!void>) -> () extra(#fn_attr) loc(#loc156)
    cir.br ^bb24 loc(#loc134)
  ^bb24:  // pred: ^bb23
    cir.br ^bb25 loc(#loc132)
  ^bb25:  // pred: ^bb24
    cir.return loc(#loc87)
  } loc(#loc194)
} loc(#loc)
#loc = loc("/workspaces/juliet-c/testcases/CWE122_Heap_Based_Buffer_Overflow/s08/CWE122_Heap_Based_Buffer_Overflow__c_CWE805_int_loop_12.c":0:0)
#loc1 = loc("../../../testcasesupport/std_testcase_io.h":52:1)
#loc2 = loc("../../../testcasesupport/std_testcase_io.h":52:30)
#loc3 = loc("/usr/include/stdlib.h":672:1)
#loc4 = loc("/usr/include/stdlib.h":672:45)
#loc5 = loc("/usr/include/stdlib.h":756:1)
#loc6 = loc("/usr/include/stdlib.h":756:70)
#loc7 = loc("../../../testcasesupport/std_testcase_io.h":18:1)
#loc8 = loc("../../../testcasesupport/std_testcase_io.h":18:33)
#loc9 = loc("/usr/include/stdlib.h":687:1)
#loc10 = loc("/usr/include/stdlib.h":687:32)
#loc11 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_int_loop_12.c":21:1)
#loc12 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_int_loop_12.c":50:1)
#loc13 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_int_loop_12.c":38:9)
#loc14 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_int_loop_12.c":38:29)
#loc15 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_int_loop_12.c":40:13)
#loc16 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_int_loop_12.c":40:20)
#loc17 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_int_loop_12.c":23:5)
#loc18 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_int_loop_12.c":23:11)
#loc19 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_int_loop_12.c":24:12)
#loc20 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_int_loop_12.c":24:5)
#loc21 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_int_loop_12.c":25:5)
#loc22 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_int_loop_12.c":36:5)
#loc23 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_int_loop_12.c":25:8)
#loc24 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_int_loop_12.c":25:33)
#loc25 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_int_loop_12.c":26:5)
#loc26 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_int_loop_12.c":30:5)
#loc27 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_int_loop_12.c":32:5)
#loc28 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_int_loop_12.c":28:23)
#loc29 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_int_loop_12.c":28:30)
#loc30 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_int_loop_12.c":28:33)
#loc31 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_int_loop_12.c":28:43)
#loc32 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_int_loop_12.c":28:44)
#loc33 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_int_loop_12.c":28:9)
#loc34 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_int_loop_12.c":29:9)
#loc35 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_int_loop_12.c":29:37)
#loc36 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_int_loop_12.c":29:13)
#loc37 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_int_loop_12.c":29:21)
#loc38 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_int_loop_12.c":29:27)
#loc39 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_int_loop_12.c":29:28)
#loc40 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_int_loop_12.c":29:34)
#loc41 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_int_loop_12.c":29:33)
#loc42 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_int_loop_12.c":34:23)
#loc43 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_int_loop_12.c":34:30)
#loc44 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_int_loop_12.c":34:34)
#loc45 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_int_loop_12.c":34:44)
#loc46 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_int_loop_12.c":34:45)
#loc47 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_int_loop_12.c":34:9)
#loc48 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_int_loop_12.c":35:9)
#loc49 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_int_loop_12.c":35:37)
#loc50 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_int_loop_12.c":35:13)
#loc51 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_int_loop_12.c":35:21)
#loc52 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_int_loop_12.c":35:27)
#loc53 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_int_loop_12.c":35:28)
#loc54 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_int_loop_12.c":35:34)
#loc55 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_int_loop_12.c":35:33)
#loc56 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_int_loop_12.c":37:5)
#loc57 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_int_loop_12.c":49:5)
#loc58 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_int_loop_12.c":39:9)
#loc59 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_int_loop_12.c":48:9)
#loc60 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_int_loop_12.c":42:13)
#loc61 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_int_loop_12.c":45:13)
#loc62 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_int_loop_12.c":42:22)
#loc63 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_int_loop_12.c":42:18)
#loc64 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_int_loop_12.c":42:25)
#loc65 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_int_loop_12.c":42:29)
#loc66 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_int_loop_12.c":42:27)
#loc67 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_int_loop_12.c":43:13)
#loc68 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_int_loop_12.c":44:34)
#loc69 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_int_loop_12.c":44:27)
#loc70 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_int_loop_12.c":44:17)
#loc71 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_int_loop_12.c":44:22)
#loc72 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_int_loop_12.c":44:23)
#loc73 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_int_loop_12.c":44:35)
#loc74 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_int_loop_12.c":42:35)
#loc75 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_int_loop_12.c":42:34)
#loc76 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_int_loop_12.c":46:26)
#loc77 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_int_loop_12.c":46:31)
#loc78 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_int_loop_12.c":46:32)
#loc79 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_int_loop_12.c":46:13)
#loc80 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_int_loop_12.c":47:18)
#loc81 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_int_loop_12.c":47:13)
#loc82 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_int_loop_12.c":89:1)
#loc83 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_int_loop_12.c":92:1)
#loc84 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_int_loop_12.c":91:5)
#loc85 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_int_loop_12.c":91:13)
#loc86 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_int_loop_12.c":58:1)
#loc87 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_int_loop_12.c":87:1)
#loc88 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_int_loop_12.c":75:9)
#loc89 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_int_loop_12.c":75:29)
#loc90 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_int_loop_12.c":77:13)
#loc91 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_int_loop_12.c":77:20)
#loc92 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_int_loop_12.c":60:5)
#loc93 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_int_loop_12.c":60:11)
#loc94 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_int_loop_12.c":61:12)
#loc95 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_int_loop_12.c":61:5)
#loc96 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_int_loop_12.c":62:5)
#loc97 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_int_loop_12.c":73:5)
#loc98 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_int_loop_12.c":62:8)
#loc99 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_int_loop_12.c":62:33)
#loc100 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_int_loop_12.c":63:5)
#loc101 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_int_loop_12.c":67:5)
#loc102 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_int_loop_12.c":69:5)
#loc103 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_int_loop_12.c":65:23)
#loc104 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_int_loop_12.c":65:30)
#loc105 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_int_loop_12.c":65:34)
#loc106 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_int_loop_12.c":65:44)
#loc107 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_int_loop_12.c":65:45)
#loc108 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_int_loop_12.c":65:9)
#loc109 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_int_loop_12.c":66:9)
#loc110 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_int_loop_12.c":66:37)
#loc111 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_int_loop_12.c":66:13)
#loc112 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_int_loop_12.c":66:21)
#loc113 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_int_loop_12.c":66:27)
#loc114 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_int_loop_12.c":66:28)
#loc115 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_int_loop_12.c":66:34)
#loc116 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_int_loop_12.c":66:33)
#loc117 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_int_loop_12.c":71:23)
#loc118 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_int_loop_12.c":71:30)
#loc119 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_int_loop_12.c":71:34)
#loc120 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_int_loop_12.c":71:44)
#loc121 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_int_loop_12.c":71:45)
#loc122 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_int_loop_12.c":71:9)
#loc123 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_int_loop_12.c":72:9)
#loc124 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_int_loop_12.c":72:37)
#loc125 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_int_loop_12.c":72:13)
#loc126 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_int_loop_12.c":72:21)
#loc127 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_int_loop_12.c":72:27)
#loc128 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_int_loop_12.c":72:28)
#loc129 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_int_loop_12.c":72:34)
#loc130 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_int_loop_12.c":72:33)
#loc131 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_int_loop_12.c":74:5)
#loc132 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_int_loop_12.c":86:5)
#loc133 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_int_loop_12.c":76:9)
#loc134 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_int_loop_12.c":85:9)
#loc135 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_int_loop_12.c":79:13)
#loc136 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_int_loop_12.c":82:13)
#loc137 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_int_loop_12.c":79:22)
#loc138 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_int_loop_12.c":79:18)
#loc139 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_int_loop_12.c":79:25)
#loc140 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_int_loop_12.c":79:29)
#loc141 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_int_loop_12.c":79:27)
#loc142 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_int_loop_12.c":80:13)
#loc143 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_int_loop_12.c":81:34)
#loc144 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_int_loop_12.c":81:27)
#loc145 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_int_loop_12.c":81:17)
#loc146 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_int_loop_12.c":81:22)
#loc147 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_int_loop_12.c":81:23)
#loc148 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_int_loop_12.c":81:35)
#loc149 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_int_loop_12.c":79:35)
#loc150 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_int_loop_12.c":79:34)
#loc151 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_int_loop_12.c":83:26)
#loc152 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_int_loop_12.c":83:31)
#loc153 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_int_loop_12.c":83:32)
#loc154 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_int_loop_12.c":83:13)
#loc155 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_int_loop_12.c":84:18)
#loc156 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_int_loop_12.c":84:13)
#loc157 = loc(fused[#loc1, #loc2])
#loc158 = loc(fused[#loc3, #loc4])
#loc159 = loc(fused[#loc5, #loc6])
#loc160 = loc(fused[#loc7, #loc8])
#loc161 = loc(fused[#loc9, #loc10])
#loc162 = loc(fused[#loc11, #loc12])
#loc163 = loc(fused[#loc13, #loc14])
#loc164 = loc(fused[#loc15, #loc16])
#loc165 = loc(fused[#loc17, #loc18])
#loc166 = loc(fused[#loc20, #loc19])
#loc167 = loc(fused[#loc21, #loc22])
#loc168 = loc(fused[#loc23, #loc24])
#loc169 = loc(fused[#loc25, #loc26, #loc27, #loc22])
#loc170 = loc(fused[#loc30, #loc31])
#loc171 = loc(fused[#loc29, #loc31])
#loc172 = loc(fused[#loc28, #loc32])
#loc173 = loc(fused[#loc33, #loc32])
#loc174 = loc(fused[#loc34, #loc35])
#loc175 = loc(fused[#loc36, #loc37])
#loc176 = loc(fused[#loc38, #loc35])
#loc177 = loc(fused[#loc44, #loc45])
#loc178 = loc(fused[#loc43, #loc45])
#loc179 = loc(fused[#loc42, #loc46])
#loc180 = loc(fused[#loc47, #loc46])
#loc181 = loc(fused[#loc48, #loc49])
#loc182 = loc(fused[#loc50, #loc51])
#loc183 = loc(fused[#loc52, #loc49])
#loc184 = loc(fused[#loc56, #loc57])
#loc185 = loc(fused[#loc58, #loc59])
#loc186 = loc(fused[#loc60, #loc61])
#loc187 = loc(fused[#loc63, #loc62])
#loc188 = loc(fused[#loc64, #loc65])
#loc189 = loc(fused[#loc67, #loc61])
#loc190 = loc(fused[#loc70, #loc73])
#loc191 = loc(fused[#loc75, #loc74])
#loc192 = loc(fused[#loc82, #loc83])
#loc193 = loc(fused[#loc84, #loc85])
#loc194 = loc(fused[#loc86, #loc87])
#loc195 = loc(fused[#loc88, #loc89])
#loc196 = loc(fused[#loc90, #loc91])
#loc197 = loc(fused[#loc92, #loc93])
#loc198 = loc(fused[#loc95, #loc94])
#loc199 = loc(fused[#loc96, #loc97])
#loc200 = loc(fused[#loc98, #loc99])
#loc201 = loc(fused[#loc100, #loc101, #loc102, #loc97])
#loc202 = loc(fused[#loc105, #loc106])
#loc203 = loc(fused[#loc104, #loc106])
#loc204 = loc(fused[#loc103, #loc107])
#loc205 = loc(fused[#loc108, #loc107])
#loc206 = loc(fused[#loc109, #loc110])
#loc207 = loc(fused[#loc111, #loc112])
#loc208 = loc(fused[#loc113, #loc110])
#loc209 = loc(fused[#loc119, #loc120])
#loc210 = loc(fused[#loc118, #loc120])
#loc211 = loc(fused[#loc117, #loc121])
#loc212 = loc(fused[#loc122, #loc121])
#loc213 = loc(fused[#loc123, #loc124])
#loc214 = loc(fused[#loc125, #loc126])
#loc215 = loc(fused[#loc127, #loc124])
#loc216 = loc(fused[#loc131, #loc132])
#loc217 = loc(fused[#loc133, #loc134])
#loc218 = loc(fused[#loc135, #loc136])
#loc219 = loc(fused[#loc138, #loc137])
#loc220 = loc(fused[#loc139, #loc140])
#loc221 = loc(fused[#loc142, #loc136])
#loc222 = loc(fused[#loc145, #loc148])
#loc223 = loc(fused[#loc150, #loc149])
