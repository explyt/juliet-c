!s32i = !cir.int<s, 32>
!s8i = !cir.int<s, 8>
!u32i = !cir.int<u, 32>
#fn_attr = #cir<extra({nothrow = #cir.nothrow})>
#fn_attr1 = #cir<extra({inline = #cir.inline<no>, nothrow = #cir.nothrow, optnone = #cir.optnone, uwtable = #cir.uwtable<async>})>
module @"/workspaces/juliet-c/testcases/CWE191_Integer_Underflow/s03/CWE191_Integer_Underflow__int_rand_sub_18.c" attributes {cir.lang = #cir.lang<c>, cir.sob = #cir.signed_overflow_behavior<undefined>, cir.triple = "x86_64-unknown-linux-gnu", cir.type_size_info = #cir.type_size_info<char = 8, int = 32, size_t = 64>, cir.uwtable = #cir.uwtable<async>, dlti.dl_spec = #dlti.dl_spec<i128 = dense<128> : vector<2xi64>, f80 = dense<128> : vector<2xi64>, i64 = dense<64> : vector<2xi64>, !llvm.ptr<271> = dense<32> : vector<4xi64>, !llvm.ptr<272> = dense<64> : vector<4xi64>, f64 = dense<64> : vector<2xi64>, f128 = dense<128> : vector<2xi64>, i32 = dense<32> : vector<2xi64>, f16 = dense<16> : vector<2xi64>, i16 = dense<16> : vector<2xi64>, i8 = dense<8> : vector<2xi64>, !llvm.ptr<270> = dense<32> : vector<4xi64>, i1 = dense<8> : vector<2xi64>, !llvm.ptr = dense<64> : vector<4xi64>, "dlti.stack_alignment" = 128 : i64, "dlti.endianness" = "little", "dlti.mangling_mode" = "e">} {
  cir.func private @rand() -> !s32i extra(#fn_attr) loc(#loc80)
  cir.func private @printIntLine(!s32i) loc(#loc81)
  cir.func no_proto @CWE191_Integer_Underflow__int_rand_sub_18_bad() extra(#fn_attr1) {
    %0 = cir.alloca !s32i, !cir.ptr<!s32i>, ["data"] {alignment = 4 : i64} loc(#loc83)
    %1 = cir.alloca !s32i, !cir.ptr<!s32i>, ["result", init] {alignment = 4 : i64} loc(#loc84)
    %2 = cir.const #cir.int<0> : !s32i loc(#loc11)
    cir.store %2, %0 : !s32i, !cir.ptr<!s32i> loc(#loc85)
    cir.goto "source" loc(#loc86)
  ^bb1:  // no predecessors
    cir.label "source" loc(#loc15)
    %3 = cir.call @rand() : () -> !s32i extra(#fn_attr) loc(#loc16)
    %4 = cir.const #cir.int<1> : !s32i loc(#loc16)
    %5 = cir.binop(and, %3, %4) : !s32i loc(#loc16)
    %6 = cir.cast(int_to_bool, %5 : !s32i), !cir.bool loc(#loc16)
    %7 = cir.ternary(%6, true {
      %13 = cir.call @rand() : () -> !s32i extra(#fn_attr) loc(#loc16)
      %14 = cir.cast(integral, %13 : !s32i), !u32i loc(#loc16)
      %15 = cir.const #cir.int<30> : !s32i loc(#loc16)
      %16 = cir.shift(left, %14 : !u32i, %15 : !s32i) -> !u32i loc(#loc16)
      %17 = cir.call @rand() : () -> !s32i extra(#fn_attr) loc(#loc16)
      %18 = cir.cast(integral, %17 : !s32i), !u32i loc(#loc16)
      %19 = cir.const #cir.int<15> : !s32i loc(#loc16)
      %20 = cir.shift(left, %18 : !u32i, %19 : !s32i) -> !u32i loc(#loc16)
      %21 = cir.binop(xor, %16, %20) : !u32i loc(#loc16)
      %22 = cir.call @rand() : () -> !s32i extra(#fn_attr) loc(#loc16)
      %23 = cir.cast(integral, %22 : !s32i), !u32i loc(#loc16)
      %24 = cir.binop(xor, %21, %23) : !u32i loc(#loc16)
      cir.yield %24 : !u32i loc(#loc16)
    }, false {
      %13 = cir.call @rand() : () -> !s32i extra(#fn_attr) loc(#loc16)
      %14 = cir.cast(integral, %13 : !s32i), !u32i loc(#loc16)
      %15 = cir.const #cir.int<30> : !s32i loc(#loc16)
      %16 = cir.shift(left, %14 : !u32i, %15 : !s32i) -> !u32i loc(#loc16)
      %17 = cir.call @rand() : () -> !s32i extra(#fn_attr) loc(#loc16)
      %18 = cir.cast(integral, %17 : !s32i), !u32i loc(#loc16)
      %19 = cir.const #cir.int<15> : !s32i loc(#loc16)
      %20 = cir.shift(left, %18 : !u32i, %19 : !s32i) -> !u32i loc(#loc16)
      %21 = cir.binop(xor, %16, %20) : !u32i loc(#loc16)
      %22 = cir.call @rand() : () -> !s32i extra(#fn_attr) loc(#loc16)
      %23 = cir.cast(integral, %22 : !s32i), !u32i loc(#loc16)
      %24 = cir.binop(xor, %21, %23) : !u32i loc(#loc16)
      %25 = cir.unary(minus, %24) : !u32i, !u32i loc(#loc16)
      %26 = cir.const #cir.int<1> : !s32i loc(#loc16)
      %27 = cir.cast(integral, %26 : !s32i), !u32i loc(#loc16)
      %28 = cir.binop(sub, %25, %27) : !u32i loc(#loc16)
      cir.yield %28 : !u32i loc(#loc16)
    }) : (!cir.bool) -> !u32i loc(#loc16)
    %8 = cir.cast(integral, %7 : !u32i), !s32i loc(#loc16)
    cir.store %8, %0 : !s32i, !cir.ptr<!s32i> loc(#loc87)
    cir.goto "sink" loc(#loc88)
  ^bb2:  // no predecessors
    cir.label "sink" loc(#loc20)
    %9 = cir.load %0 : !cir.ptr<!s32i>, !s32i loc(#loc21)
    %10 = cir.const #cir.int<1> : !s32i loc(#loc10)
    %11 = cir.binop(sub, %9, %10) nsw : !s32i loc(#loc21)
    cir.store %11, %1 : !s32i, !cir.ptr<!s32i> loc(#loc84)
    %12 = cir.load %1 : !cir.ptr<!s32i>, !s32i loc(#loc22)
    cir.call @printIntLine(%12) : (!s32i) -> () loc(#loc23)
    cir.return loc(#loc6)
  } loc(#loc82)
  cir.func no_proto @CWE191_Integer_Underflow__int_rand_sub_18_good() extra(#fn_attr1) {
    %0 = cir.get_global @goodB2G : !cir.ptr<!cir.func<()>> loc(#loc90)
    cir.call %0() : (!cir.ptr<!cir.func<()>>) -> () loc(#loc26)
    %1 = cir.get_global @goodG2B : !cir.ptr<!cir.func<()>> loc(#loc91)
    cir.call %1() : (!cir.ptr<!cir.func<()>>) -> () loc(#loc28)
    cir.return loc(#loc25)
  } loc(#loc89)
  cir.func private @printLine(!cir.ptr<!s8i>) loc(#loc92)
  cir.global "private" constant cir_private dsolocal @".str" = #cir.const_array<"data value is too large to perform subtraction.\00" : !cir.array<!s8i x 48>> : !cir.array<!s8i x 48> {alignment = 1 : i64} loc(#loc32)
  cir.func no_proto internal private @goodB2G() extra(#fn_attr1) {
    %0 = cir.alloca !s32i, !cir.ptr<!s32i>, ["data"] {alignment = 4 : i64} loc(#loc94)
    %1 = cir.const #cir.int<0> : !s32i loc(#loc37)
    cir.store %1, %0 : !s32i, !cir.ptr<!s32i> loc(#loc95)
    cir.goto "source" loc(#loc96)
  ^bb1:  // no predecessors
    cir.label "source" loc(#loc41)
    %2 = cir.call @rand() : () -> !s32i extra(#fn_attr) loc(#loc42)
    %3 = cir.const #cir.int<1> : !s32i loc(#loc42)
    %4 = cir.binop(and, %2, %3) : !s32i loc(#loc42)
    %5 = cir.cast(int_to_bool, %4 : !s32i), !cir.bool loc(#loc42)
    %6 = cir.ternary(%5, true {
      %8 = cir.call @rand() : () -> !s32i extra(#fn_attr) loc(#loc42)
      %9 = cir.cast(integral, %8 : !s32i), !u32i loc(#loc42)
      %10 = cir.const #cir.int<30> : !s32i loc(#loc42)
      %11 = cir.shift(left, %9 : !u32i, %10 : !s32i) -> !u32i loc(#loc42)
      %12 = cir.call @rand() : () -> !s32i extra(#fn_attr) loc(#loc42)
      %13 = cir.cast(integral, %12 : !s32i), !u32i loc(#loc42)
      %14 = cir.const #cir.int<15> : !s32i loc(#loc42)
      %15 = cir.shift(left, %13 : !u32i, %14 : !s32i) -> !u32i loc(#loc42)
      %16 = cir.binop(xor, %11, %15) : !u32i loc(#loc42)
      %17 = cir.call @rand() : () -> !s32i extra(#fn_attr) loc(#loc42)
      %18 = cir.cast(integral, %17 : !s32i), !u32i loc(#loc42)
      %19 = cir.binop(xor, %16, %18) : !u32i loc(#loc42)
      cir.yield %19 : !u32i loc(#loc42)
    }, false {
      %8 = cir.call @rand() : () -> !s32i extra(#fn_attr) loc(#loc42)
      %9 = cir.cast(integral, %8 : !s32i), !u32i loc(#loc42)
      %10 = cir.const #cir.int<30> : !s32i loc(#loc42)
      %11 = cir.shift(left, %9 : !u32i, %10 : !s32i) -> !u32i loc(#loc42)
      %12 = cir.call @rand() : () -> !s32i extra(#fn_attr) loc(#loc42)
      %13 = cir.cast(integral, %12 : !s32i), !u32i loc(#loc42)
      %14 = cir.const #cir.int<15> : !s32i loc(#loc42)
      %15 = cir.shift(left, %13 : !u32i, %14 : !s32i) -> !u32i loc(#loc42)
      %16 = cir.binop(xor, %11, %15) : !u32i loc(#loc42)
      %17 = cir.call @rand() : () -> !s32i extra(#fn_attr) loc(#loc42)
      %18 = cir.cast(integral, %17 : !s32i), !u32i loc(#loc42)
      %19 = cir.binop(xor, %16, %18) : !u32i loc(#loc42)
      %20 = cir.unary(minus, %19) : !u32i, !u32i loc(#loc42)
      %21 = cir.const #cir.int<1> : !s32i loc(#loc42)
      %22 = cir.cast(integral, %21 : !s32i), !u32i loc(#loc42)
      %23 = cir.binop(sub, %20, %22) : !u32i loc(#loc42)
      cir.yield %23 : !u32i loc(#loc42)
    }) : (!cir.bool) -> !u32i loc(#loc42)
    %7 = cir.cast(integral, %6 : !u32i), !s32i loc(#loc42)
    cir.store %7, %0 : !s32i, !cir.ptr<!s32i> loc(#loc97)
    cir.goto "sink" loc(#loc98)
  ^bb2:  // no predecessors
    cir.label "sink" loc(#loc46)
    cir.scope {
      %8 = cir.load %0 : !cir.ptr<!s32i>, !s32i loc(#loc49)
      %9 = cir.const #cir.int<2147483647> : !s32i loc(#loc50)
      %10 = cir.unary(minus, %9) nsw : !s32i, !s32i loc(#loc50)
      %11 = cir.const #cir.int<1> : !s32i loc(#loc50)
      %12 = cir.binop(sub, %10, %11) nsw : !s32i loc(#loc50)
      %13 = cir.cmp(gt, %8, %12) : !s32i, !cir.bool loc(#loc100)
      cir.if %13 {
        %14 = cir.alloca !s32i, !cir.ptr<!s32i>, ["result", init] {alignment = 4 : i64} loc(#loc102)
        %15 = cir.load %0 : !cir.ptr<!s32i>, !s32i loc(#loc56)
        %16 = cir.const #cir.int<1> : !s32i loc(#loc55)
        %17 = cir.binop(sub, %15, %16) nsw : !s32i loc(#loc56)
        cir.store %17, %14 : !s32i, !cir.ptr<!s32i> loc(#loc102)
        %18 = cir.load %14 : !cir.ptr<!s32i>, !s32i loc(#loc57)
        cir.call @printIntLine(%18) : (!s32i) -> () loc(#loc58)
      } else {
        %14 = cir.get_global @".str" : !cir.ptr<!cir.array<!s8i x 48>> loc(#loc32)
        %15 = cir.cast(array_to_ptrdecay, %14 : !cir.ptr<!cir.array<!s8i x 48>>), !cir.ptr<!s8i> loc(#loc32)
        cir.call @printLine(%15) : (!cir.ptr<!s8i>) -> () loc(#loc59)
      } loc(#loc101)
    } loc(#loc99)
    cir.return loc(#loc34)
  } loc(#loc93)
  cir.func no_proto internal private @goodG2B() extra(#fn_attr1) {
    %0 = cir.alloca !s32i, !cir.ptr<!s32i>, ["data"] {alignment = 4 : i64} loc(#loc104)
    %1 = cir.alloca !s32i, !cir.ptr<!s32i>, ["result", init] {alignment = 4 : i64} loc(#loc105)
    %2 = cir.const #cir.int<0> : !s32i loc(#loc66)
    cir.store %2, %0 : !s32i, !cir.ptr<!s32i> loc(#loc106)
    cir.goto "source" loc(#loc107)
  ^bb1:  // no predecessors
    cir.label "source" loc(#loc70)
    %3 = cir.const #cir.int<2> : !s32i loc(#loc71)
    %4 = cir.unary(minus, %3) nsw : !s32i, !s32i loc(#loc72)
    cir.store %4, %0 : !s32i, !cir.ptr<!s32i> loc(#loc108)
    cir.goto "sink" loc(#loc109)
  ^bb2:  // no predecessors
    cir.label "sink" loc(#loc76)
    %5 = cir.load %0 : !cir.ptr<!s32i>, !s32i loc(#loc77)
    %6 = cir.const #cir.int<1> : !s32i loc(#loc65)
    %7 = cir.binop(sub, %5, %6) nsw : !s32i loc(#loc77)
    cir.store %7, %1 : !s32i, !cir.ptr<!s32i> loc(#loc105)
    %8 = cir.load %1 : !cir.ptr<!s32i>, !s32i loc(#loc78)
    cir.call @printIntLine(%8) : (!s32i) -> () loc(#loc79)
    cir.return loc(#loc61)
  } loc(#loc103)
} loc(#loc)
#loc = loc("/workspaces/juliet-c/testcases/CWE191_Integer_Underflow/s03/CWE191_Integer_Underflow__int_rand_sub_18.c":0:0)
#loc1 = loc("/usr/include/stdlib.h":573:1)
#loc2 = loc("/usr/include/stdlib.h":573:24)
#loc3 = loc("../../../testcasesupport/std_testcase_io.h":18:1)
#loc4 = loc("../../../testcasesupport/std_testcase_io.h":18:33)
#loc5 = loc("CWE191_Integer_Underflow__int_rand_sub_18.c":22:1)
#loc6 = loc("CWE191_Integer_Underflow__int_rand_sub_18.c":38:1)
#loc7 = loc("CWE191_Integer_Underflow__int_rand_sub_18.c":24:5)
#loc8 = loc("CWE191_Integer_Underflow__int_rand_sub_18.c":24:9)
#loc9 = loc("CWE191_Integer_Underflow__int_rand_sub_18.c":35:9)
#loc10 = loc("CWE191_Integer_Underflow__int_rand_sub_18.c":35:29)
#loc11 = loc("CWE191_Integer_Underflow__int_rand_sub_18.c":26:12)
#loc12 = loc("CWE191_Integer_Underflow__int_rand_sub_18.c":26:5)
#loc13 = loc("CWE191_Integer_Underflow__int_rand_sub_18.c":27:5)
#loc14 = loc("CWE191_Integer_Underflow__int_rand_sub_18.c":27:10)
#loc15 = loc("CWE191_Integer_Underflow__int_rand_sub_18.c":28:1)
#loc16 = loc("CWE191_Integer_Underflow__int_rand_sub_18.c":30:12)
#loc17 = loc("CWE191_Integer_Underflow__int_rand_sub_18.c":30:5)
#loc18 = loc("CWE191_Integer_Underflow__int_rand_sub_18.c":31:5)
#loc19 = loc("CWE191_Integer_Underflow__int_rand_sub_18.c":31:10)
#loc20 = loc("CWE191_Integer_Underflow__int_rand_sub_18.c":32:1)
#loc21 = loc("CWE191_Integer_Underflow__int_rand_sub_18.c":35:22)
#loc22 = loc("CWE191_Integer_Underflow__int_rand_sub_18.c":36:22)
#loc23 = loc("CWE191_Integer_Underflow__int_rand_sub_18.c":36:9)
#loc24 = loc("CWE191_Integer_Underflow__int_rand_sub_18.c":87:1)
#loc25 = loc("CWE191_Integer_Underflow__int_rand_sub_18.c":91:1)
#loc26 = loc("CWE191_Integer_Underflow__int_rand_sub_18.c":89:5)
#loc27 = loc("CWE191_Integer_Underflow__int_rand_sub_18.c":89:13)
#loc28 = loc("CWE191_Integer_Underflow__int_rand_sub_18.c":90:5)
#loc29 = loc("CWE191_Integer_Underflow__int_rand_sub_18.c":90:13)
#loc30 = loc("../../../testcasesupport/std_testcase_io.h":14:1)
#loc31 = loc("../../../testcasesupport/std_testcase_io.h":14:33)
#loc32 = loc("CWE191_Integer_Underflow__int_rand_sub_18.c":64:19)
#loc33 = loc("CWE191_Integer_Underflow__int_rand_sub_18.c":45:1)
#loc34 = loc("CWE191_Integer_Underflow__int_rand_sub_18.c":66:1)
#loc35 = loc("CWE191_Integer_Underflow__int_rand_sub_18.c":47:5)
#loc36 = loc("CWE191_Integer_Underflow__int_rand_sub_18.c":47:9)
#loc37 = loc("CWE191_Integer_Underflow__int_rand_sub_18.c":49:12)
#loc38 = loc("CWE191_Integer_Underflow__int_rand_sub_18.c":49:5)
#loc39 = loc("CWE191_Integer_Underflow__int_rand_sub_18.c":50:5)
#loc40 = loc("CWE191_Integer_Underflow__int_rand_sub_18.c":50:10)
#loc41 = loc("CWE191_Integer_Underflow__int_rand_sub_18.c":51:1)
#loc42 = loc("CWE191_Integer_Underflow__int_rand_sub_18.c":53:12)
#loc43 = loc("CWE191_Integer_Underflow__int_rand_sub_18.c":53:5)
#loc44 = loc("CWE191_Integer_Underflow__int_rand_sub_18.c":54:5)
#loc45 = loc("CWE191_Integer_Underflow__int_rand_sub_18.c":54:10)
#loc46 = loc("CWE191_Integer_Underflow__int_rand_sub_18.c":55:1)
#loc47 = loc("CWE191_Integer_Underflow__int_rand_sub_18.c":57:5)
#loc48 = loc("CWE191_Integer_Underflow__int_rand_sub_18.c":65:5)
#loc49 = loc("CWE191_Integer_Underflow__int_rand_sub_18.c":57:9)
#loc50 = loc("CWE191_Integer_Underflow__int_rand_sub_18.c":57:16)
#loc51 = loc("CWE191_Integer_Underflow__int_rand_sub_18.c":58:5)
#loc52 = loc("CWE191_Integer_Underflow__int_rand_sub_18.c":61:5)
#loc53 = loc("CWE191_Integer_Underflow__int_rand_sub_18.c":63:5)
#loc54 = loc("CWE191_Integer_Underflow__int_rand_sub_18.c":59:9)
#loc55 = loc("CWE191_Integer_Underflow__int_rand_sub_18.c":59:29)
#loc56 = loc("CWE191_Integer_Underflow__int_rand_sub_18.c":59:22)
#loc57 = loc("CWE191_Integer_Underflow__int_rand_sub_18.c":60:22)
#loc58 = loc("CWE191_Integer_Underflow__int_rand_sub_18.c":60:9)
#loc59 = loc("CWE191_Integer_Underflow__int_rand_sub_18.c":64:9)
#loc60 = loc("CWE191_Integer_Underflow__int_rand_sub_18.c":69:1)
#loc61 = loc("CWE191_Integer_Underflow__int_rand_sub_18.c":85:1)
#loc62 = loc("CWE191_Integer_Underflow__int_rand_sub_18.c":71:5)
#loc63 = loc("CWE191_Integer_Underflow__int_rand_sub_18.c":71:9)
#loc64 = loc("CWE191_Integer_Underflow__int_rand_sub_18.c":82:9)
#loc65 = loc("CWE191_Integer_Underflow__int_rand_sub_18.c":82:29)
#loc66 = loc("CWE191_Integer_Underflow__int_rand_sub_18.c":73:12)
#loc67 = loc("CWE191_Integer_Underflow__int_rand_sub_18.c":73:5)
#loc68 = loc("CWE191_Integer_Underflow__int_rand_sub_18.c":74:5)
#loc69 = loc("CWE191_Integer_Underflow__int_rand_sub_18.c":74:10)
#loc70 = loc("CWE191_Integer_Underflow__int_rand_sub_18.c":75:1)
#loc71 = loc("CWE191_Integer_Underflow__int_rand_sub_18.c":77:13)
#loc72 = loc("CWE191_Integer_Underflow__int_rand_sub_18.c":77:12)
#loc73 = loc("CWE191_Integer_Underflow__int_rand_sub_18.c":77:5)
#loc74 = loc("CWE191_Integer_Underflow__int_rand_sub_18.c":78:5)
#loc75 = loc("CWE191_Integer_Underflow__int_rand_sub_18.c":78:10)
#loc76 = loc("CWE191_Integer_Underflow__int_rand_sub_18.c":79:1)
#loc77 = loc("CWE191_Integer_Underflow__int_rand_sub_18.c":82:22)
#loc78 = loc("CWE191_Integer_Underflow__int_rand_sub_18.c":83:22)
#loc79 = loc("CWE191_Integer_Underflow__int_rand_sub_18.c":83:9)
#loc80 = loc(fused[#loc1, #loc2])
#loc81 = loc(fused[#loc3, #loc4])
#loc82 = loc(fused[#loc5, #loc6])
#loc83 = loc(fused[#loc7, #loc8])
#loc84 = loc(fused[#loc9, #loc10])
#loc85 = loc(fused[#loc12, #loc11])
#loc86 = loc(fused[#loc13, #loc14])
#loc87 = loc(fused[#loc17, #loc16])
#loc88 = loc(fused[#loc18, #loc19])
#loc89 = loc(fused[#loc24, #loc25])
#loc90 = loc(fused[#loc26, #loc27])
#loc91 = loc(fused[#loc28, #loc29])
#loc92 = loc(fused[#loc30, #loc31])
#loc93 = loc(fused[#loc33, #loc34])
#loc94 = loc(fused[#loc35, #loc36])
#loc95 = loc(fused[#loc38, #loc37])
#loc96 = loc(fused[#loc39, #loc40])
#loc97 = loc(fused[#loc43, #loc42])
#loc98 = loc(fused[#loc44, #loc45])
#loc99 = loc(fused[#loc47, #loc48])
#loc100 = loc(fused[#loc49, #loc50])
#loc101 = loc(fused[#loc51, #loc52, #loc53, #loc48])
#loc102 = loc(fused[#loc54, #loc55])
#loc103 = loc(fused[#loc60, #loc61])
#loc104 = loc(fused[#loc62, #loc63])
#loc105 = loc(fused[#loc64, #loc65])
#loc106 = loc(fused[#loc67, #loc66])
#loc107 = loc(fused[#loc68, #loc69])
#loc108 = loc(fused[#loc73, #loc71])
#loc109 = loc(fused[#loc74, #loc75])
