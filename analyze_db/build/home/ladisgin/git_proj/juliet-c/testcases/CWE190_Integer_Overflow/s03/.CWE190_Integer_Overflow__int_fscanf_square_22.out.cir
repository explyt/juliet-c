!s32i = !cir.int<s, 32>
!s64i = !cir.int<s, 64>
!s8i = !cir.int<s, 8>
#false = #cir.bool<false> : !cir.bool
#fn_attr = #cir<extra({inline = #cir.inline<no>, nothrow = #cir.nothrow, optnone = #cir.optnone})>
#fn_attr1 = #cir<extra({nothrow = #cir.nothrow})>
#loc7 = loc("CWE190_Integer_Overflow__int_fscanf_square_22b.c":27:60)
#loc8 = loc("CWE190_Integer_Overflow__int_fscanf_square_22b.c":27:64)
#loc30 = loc("CWE190_Integer_Overflow__int_fscanf_square_22b.c":49:65)
#loc31 = loc("CWE190_Integer_Overflow__int_fscanf_square_22b.c":49:69)
#loc63 = loc("CWE190_Integer_Overflow__int_fscanf_square_22b.c":72:65)
#loc64 = loc("CWE190_Integer_Overflow__int_fscanf_square_22b.c":72:69)
#loc94 = loc("CWE190_Integer_Overflow__int_fscanf_square_22b.c":90:64)
#loc95 = loc("CWE190_Integer_Overflow__int_fscanf_square_22b.c":90:68)
#true = #cir.bool<true> : !cir.bool
#loc111 = loc(fused[#loc7, #loc8])
#loc119 = loc(fused[#loc30, #loc31])
#loc129 = loc(fused[#loc63, #loc64])
#loc139 = loc(fused[#loc94, #loc95])
module @"/home/ladisgin/git_proj/juliet-c/testcases/CWE190_Integer_Overflow/s03/CWE190_Integer_Overflow__int_fscanf_square_22b.c" attributes {cir.lang = #cir.lang<c>, cir.sob = #cir.signed_overflow_behavior<undefined>, cir.triple = "x86_64-unknown-linux-gnu", dlti.dl_spec = #dlti.dl_spec<f64 = dense<64> : vector<2xi64>, i32 = dense<32> : vector<2xi64>, i8 = dense<8> : vector<2xi64>, i16 = dense<16> : vector<2xi64>, !llvm.ptr = dense<64> : vector<4xi64>, i1 = dense<8> : vector<2xi64>, f80 = dense<128> : vector<2xi64>, i128 = dense<128> : vector<2xi64>, i64 = dense<64> : vector<2xi64>, !llvm.ptr<271> = dense<32> : vector<4xi64>, !llvm.ptr<272> = dense<64> : vector<4xi64>, f16 = dense<16> : vector<2xi64>, f128 = dense<128> : vector<2xi64>, !llvm.ptr<270> = dense<32> : vector<4xi64>, "dlti.endianness" = "little", "dlti.stack_alignment" = 128 : i64>} {
  cir.global "private" external @CWE190_Integer_Overflow__int_fscanf_square_22_badGlobal : !s32i {alignment = 4 : i64} loc(#loc108)
  cir.func private @printIntLine(!s32i) loc(#loc109)
  cir.func @CWE190_Integer_Overflow__int_fscanf_square_22_badSink(%arg0: !s32i loc(fused[#loc7, #loc8])) extra(#fn_attr) {
    %0 = cir.alloca !s32i, !cir.ptr<!s32i>, ["data", init] {alignment = 4 : i64} loc(#loc111)
    cir.store %arg0, %0 : !s32i, !cir.ptr<!s32i> loc(#loc9)
    cir.scope {
      %1 = cir.get_global @CWE190_Integer_Overflow__int_fscanf_square_22_badGlobal : !cir.ptr<!s32i> loc(#loc108)
      %2 = cir.load %1 : !cir.ptr<!s32i>, !s32i loc(#loc12)
      %3 = cir.cast(int_to_bool, %2 : !s32i), !cir.bool loc(#loc12)
      cir.if %3 {
        cir.scope {
          %4 = cir.alloca !s32i, !cir.ptr<!s32i>, ["result", init] {alignment = 4 : i64} loc(#loc115)
          %5 = cir.load %0 : !cir.ptr<!s32i>, !s32i loc(#loc18)
          %6 = cir.load %0 : !cir.ptr<!s32i>, !s32i loc(#loc17)
          %7 = cir.binop(mul, %5, %6) nsw : !s32i loc(#loc18)
          cir.store %7, %4 : !s32i, !cir.ptr<!s32i> loc(#loc115)
          %8 = cir.load %4 : !cir.ptr<!s32i>, !s32i loc(#loc19)
          cir.call @printIntLine(%8) : (!s32i) -> () loc(#loc20)
        } loc(#loc114)
      } loc(#loc113)
    } loc(#loc112)
    cir.return loc(#loc6)
  } loc(#loc110)
  cir.global "private" external @CWE190_Integer_Overflow__int_fscanf_square_22_goodB2G1Global : !s32i {alignment = 4 : i64} loc(#loc116)
  cir.func private @printLine(!cir.ptr<!s8i>) loc(#loc117)
  cir.global "private" constant cir_private dsolocal @".str" = #cir.const_array<"Benign, fixed string\00" : !cir.array<!s8i x 21>> : !cir.array<!s8i x 21> {alignment = 1 : i64} loc(#loc25)
  cir.func private @sqrt(!cir.double) -> !cir.double extra(#fn_attr1) loc(#loc26)
  cir.global "private" constant cir_private dsolocal @".str.1" = #cir.const_array<"data value is too large to perform arithmetic safely.\00" : !cir.array<!s8i x 54>> : !cir.array<!s8i x 54> {alignment = 1 : i64} loc(#loc27)
  cir.func @CWE190_Integer_Overflow__int_fscanf_square_22_goodB2G1Sink(%arg0: !s32i loc(fused[#loc30, #loc31])) extra(#fn_attr) {
    %0 = cir.alloca !s32i, !cir.ptr<!s32i>, ["data", init] {alignment = 4 : i64} loc(#loc119)
    cir.store %arg0, %0 : !s32i, !cir.ptr<!s32i> loc(#loc32)
    cir.scope {
      %1 = cir.get_global @CWE190_Integer_Overflow__int_fscanf_square_22_goodB2G1Global : !cir.ptr<!s32i> loc(#loc116)
      %2 = cir.load %1 : !cir.ptr<!s32i>, !s32i loc(#loc35)
      %3 = cir.cast(int_to_bool, %2 : !s32i), !cir.bool loc(#loc35)
      cir.if %3 {
        %4 = cir.get_global @".str" : !cir.ptr<!cir.array<!s8i x 21>> loc(#loc25)
        %5 = cir.cast(array_to_ptrdecay, %4 : !cir.ptr<!cir.array<!s8i x 21>>), !cir.ptr<!s8i> loc(#loc25)
        cir.call @printLine(%5) : (!cir.ptr<!s8i>) -> () loc(#loc39)
      } else {
        cir.scope {
          %4 = cir.load %0 : !cir.ptr<!s32i>, !s32i loc(#loc42)
          %5 = cir.const #cir.int<2147483647> : !s32i loc(#loc43)
          %6 = cir.unary(minus, %5) : !s32i, !s32i loc(#loc43)
          %7 = cir.const #cir.int<1> : !s32i loc(#loc43)
          %8 = cir.binop(sub, %6, %7) nsw : !s32i loc(#loc43)
          %9 = cir.cmp(gt, %4, %8) : !s32i, !cir.bool loc(#loc123)
          %10 = cir.ternary(%9, true {
            %11 = cir.load %0 : !cir.ptr<!s32i>, !s32i loc(#loc45)
            %12 = cir.abs %11 poison : !s32i loc(#loc46)
            %13 = cir.cast(integral, %12 : !s32i), !s64i loc(#loc46)
            %14 = cir.get_global @sqrt : !cir.ptr<!cir.func<!cir.double (!cir.double)>> loc(#loc47)
            %15 = cir.const #cir.int<2147483647> : !s32i loc(#loc48)
            %16 = cir.cast(int_to_float, %15 : !s32i), !cir.double loc(#loc48)
            %17 = cir.call @sqrt(%16) : (!cir.double) -> !cir.double extra(#fn_attr1) loc(#loc47)
            %18 = cir.cast(float_to_int, %17 : !cir.double), !s64i loc(#loc47)
            %19 = cir.cmp(lt, %13, %18) : !s64i, !cir.bool loc(#loc124)
            %20 = cir.ternary(%19, true {
              %21 = cir.const #true loc(#loc44)
              cir.yield %21 : !cir.bool loc(#loc44)
            }, false {
              %21 = cir.const #false loc(#loc44)
              cir.yield %21 : !cir.bool loc(#loc44)
            }) : (!cir.bool) -> !cir.bool loc(#loc44)
            cir.yield %20 : !cir.bool loc(#loc44)
          }, false {
            %11 = cir.const #false loc(#loc44)
            cir.yield %11 : !cir.bool loc(#loc44)
          }) : (!cir.bool) -> !cir.bool loc(#loc44)
          cir.if %10 {
            %11 = cir.alloca !s32i, !cir.ptr<!s32i>, ["result", init] {alignment = 4 : i64} loc(#loc126)
            %12 = cir.load %0 : !cir.ptr<!s32i>, !s32i loc(#loc55)
            %13 = cir.load %0 : !cir.ptr<!s32i>, !s32i loc(#loc54)
            %14 = cir.binop(mul, %12, %13) nsw : !s32i loc(#loc55)
            cir.store %14, %11 : !s32i, !cir.ptr<!s32i> loc(#loc126)
            %15 = cir.load %11 : !cir.ptr<!s32i>, !s32i loc(#loc56)
            cir.call @printIntLine(%15) : (!s32i) -> () loc(#loc57)
          } else {
            %11 = cir.get_global @".str.1" : !cir.ptr<!cir.array<!s8i x 54>> loc(#loc27)
            %12 = cir.cast(array_to_ptrdecay, %11 : !cir.ptr<!cir.array<!s8i x 54>>), !cir.ptr<!s8i> loc(#loc27)
            cir.call @printLine(%12) : (!cir.ptr<!s8i>) -> () loc(#loc58)
          } loc(#loc125)
        } loc(#loc122)
      } loc(#loc121)
    } loc(#loc120)
    cir.return loc(#loc29)
  } loc(#loc118)
  cir.global "private" external @CWE190_Integer_Overflow__int_fscanf_square_22_goodB2G2Global : !s32i {alignment = 4 : i64} loc(#loc127)
  cir.func @CWE190_Integer_Overflow__int_fscanf_square_22_goodB2G2Sink(%arg0: !s32i loc(fused[#loc63, #loc64])) extra(#fn_attr) {
    %0 = cir.alloca !s32i, !cir.ptr<!s32i>, ["data", init] {alignment = 4 : i64} loc(#loc129)
    cir.store %arg0, %0 : !s32i, !cir.ptr<!s32i> loc(#loc65)
    cir.scope {
      %1 = cir.get_global @CWE190_Integer_Overflow__int_fscanf_square_22_goodB2G2Global : !cir.ptr<!s32i> loc(#loc127)
      %2 = cir.load %1 : !cir.ptr<!s32i>, !s32i loc(#loc68)
      %3 = cir.cast(int_to_bool, %2 : !s32i), !cir.bool loc(#loc68)
      cir.if %3 {
        cir.scope {
          %4 = cir.load %0 : !cir.ptr<!s32i>, !s32i loc(#loc72)
          %5 = cir.const #cir.int<2147483647> : !s32i loc(#loc73)
          %6 = cir.unary(minus, %5) : !s32i, !s32i loc(#loc73)
          %7 = cir.const #cir.int<1> : !s32i loc(#loc73)
          %8 = cir.binop(sub, %6, %7) nsw : !s32i loc(#loc73)
          %9 = cir.cmp(gt, %4, %8) : !s32i, !cir.bool loc(#loc133)
          %10 = cir.ternary(%9, true {
            %11 = cir.load %0 : !cir.ptr<!s32i>, !s32i loc(#loc75)
            %12 = cir.abs %11 poison : !s32i loc(#loc76)
            %13 = cir.cast(integral, %12 : !s32i), !s64i loc(#loc76)
            %14 = cir.get_global @sqrt : !cir.ptr<!cir.func<!cir.double (!cir.double)>> loc(#loc77)
            %15 = cir.const #cir.int<2147483647> : !s32i loc(#loc78)
            %16 = cir.cast(int_to_float, %15 : !s32i), !cir.double loc(#loc78)
            %17 = cir.call @sqrt(%16) : (!cir.double) -> !cir.double extra(#fn_attr1) loc(#loc77)
            %18 = cir.cast(float_to_int, %17 : !cir.double), !s64i loc(#loc77)
            %19 = cir.cmp(lt, %13, %18) : !s64i, !cir.bool loc(#loc134)
            %20 = cir.ternary(%19, true {
              %21 = cir.const #true loc(#loc74)
              cir.yield %21 : !cir.bool loc(#loc74)
            }, false {
              %21 = cir.const #false loc(#loc74)
              cir.yield %21 : !cir.bool loc(#loc74)
            }) : (!cir.bool) -> !cir.bool loc(#loc74)
            cir.yield %20 : !cir.bool loc(#loc74)
          }, false {
            %11 = cir.const #false loc(#loc74)
            cir.yield %11 : !cir.bool loc(#loc74)
          }) : (!cir.bool) -> !cir.bool loc(#loc74)
          cir.if %10 {
            %11 = cir.alloca !s32i, !cir.ptr<!s32i>, ["result", init] {alignment = 4 : i64} loc(#loc136)
            %12 = cir.load %0 : !cir.ptr<!s32i>, !s32i loc(#loc85)
            %13 = cir.load %0 : !cir.ptr<!s32i>, !s32i loc(#loc84)
            %14 = cir.binop(mul, %12, %13) nsw : !s32i loc(#loc85)
            cir.store %14, %11 : !s32i, !cir.ptr<!s32i> loc(#loc136)
            %15 = cir.load %11 : !cir.ptr<!s32i>, !s32i loc(#loc86)
            cir.call @printIntLine(%15) : (!s32i) -> () loc(#loc87)
          } else {
            %11 = cir.get_global @".str.1" : !cir.ptr<!cir.array<!s8i x 54>> loc(#loc88)
            %12 = cir.cast(array_to_ptrdecay, %11 : !cir.ptr<!cir.array<!s8i x 54>>), !cir.ptr<!s8i> loc(#loc88)
            cir.call @printLine(%12) : (!cir.ptr<!s8i>) -> () loc(#loc89)
          } loc(#loc135)
        } loc(#loc132)
      } loc(#loc131)
    } loc(#loc130)
    cir.return loc(#loc62)
  } loc(#loc128)
  cir.global "private" external @CWE190_Integer_Overflow__int_fscanf_square_22_goodG2BGlobal : !s32i {alignment = 4 : i64} loc(#loc137)
  cir.func @CWE190_Integer_Overflow__int_fscanf_square_22_goodG2BSink(%arg0: !s32i loc(fused[#loc94, #loc95])) extra(#fn_attr) {
    %0 = cir.alloca !s32i, !cir.ptr<!s32i>, ["data", init] {alignment = 4 : i64} loc(#loc139)
    cir.store %arg0, %0 : !s32i, !cir.ptr<!s32i> loc(#loc96)
    cir.scope {
      %1 = cir.get_global @CWE190_Integer_Overflow__int_fscanf_square_22_goodG2BGlobal : !cir.ptr<!s32i> loc(#loc137)
      %2 = cir.load %1 : !cir.ptr<!s32i>, !s32i loc(#loc99)
      %3 = cir.cast(int_to_bool, %2 : !s32i), !cir.bool loc(#loc99)
      cir.if %3 {
        cir.scope {
          %4 = cir.alloca !s32i, !cir.ptr<!s32i>, ["result", init] {alignment = 4 : i64} loc(#loc143)
          %5 = cir.load %0 : !cir.ptr<!s32i>, !s32i loc(#loc105)
          %6 = cir.load %0 : !cir.ptr<!s32i>, !s32i loc(#loc104)
          %7 = cir.binop(mul, %5, %6) nsw : !s32i loc(#loc105)
          cir.store %7, %4 : !s32i, !cir.ptr<!s32i> loc(#loc143)
          %8 = cir.load %4 : !cir.ptr<!s32i>, !s32i loc(#loc106)
          cir.call @printIntLine(%8) : (!s32i) -> () loc(#loc107)
        } loc(#loc142)
      } loc(#loc141)
    } loc(#loc140)
    cir.return loc(#loc93)
  } loc(#loc138)
} loc(#loc)
#loc = loc("/home/ladisgin/git_proj/juliet-c/testcases/CWE190_Integer_Overflow/s03/CWE190_Integer_Overflow__int_fscanf_square_22b.c":0:0)
#loc1 = loc("CWE190_Integer_Overflow__int_fscanf_square_22b.c":25:1)
#loc2 = loc("CWE190_Integer_Overflow__int_fscanf_square_22b.c":25:12)
#loc3 = loc("../../../testcasesupport/std_testcase_io.h":18:1)
#loc4 = loc("../../../testcasesupport/std_testcase_io.h":18:33)
#loc5 = loc("CWE190_Integer_Overflow__int_fscanf_square_22b.c":27:1)
#loc6 = loc("CWE190_Integer_Overflow__int_fscanf_square_22b.c":37:1)
#loc9 = loc("CWE190_Integer_Overflow__int_fscanf_square_22b.c":28:1)
#loc10 = loc("CWE190_Integer_Overflow__int_fscanf_square_22b.c":29:5)
#loc11 = loc("CWE190_Integer_Overflow__int_fscanf_square_22b.c":36:5)
#loc12 = loc("CWE190_Integer_Overflow__int_fscanf_square_22b.c":29:8)
#loc13 = loc("CWE190_Integer_Overflow__int_fscanf_square_22b.c":30:5)
#loc14 = loc("CWE190_Integer_Overflow__int_fscanf_square_22b.c":31:9)
#loc15 = loc("CWE190_Integer_Overflow__int_fscanf_square_22b.c":35:9)
#loc16 = loc("CWE190_Integer_Overflow__int_fscanf_square_22b.c":33:13)
#loc17 = loc("CWE190_Integer_Overflow__int_fscanf_square_22b.c":33:33)
#loc18 = loc("CWE190_Integer_Overflow__int_fscanf_square_22b.c":33:26)
#loc19 = loc("CWE190_Integer_Overflow__int_fscanf_square_22b.c":34:26)
#loc20 = loc("CWE190_Integer_Overflow__int_fscanf_square_22b.c":34:13)
#loc21 = loc("CWE190_Integer_Overflow__int_fscanf_square_22b.c":44:1)
#loc22 = loc("CWE190_Integer_Overflow__int_fscanf_square_22b.c":44:12)
#loc23 = loc("../../../testcasesupport/std_testcase_io.h":14:1)
#loc24 = loc("../../../testcasesupport/std_testcase_io.h":14:33)
#loc25 = loc("CWE190_Integer_Overflow__int_fscanf_square_22b.c":54:19)
#loc26 = loc("/usr/include/bits/mathcalls.h":158:1)
#loc27 = loc("CWE190_Integer_Overflow__int_fscanf_square_22b.c":66:23)
#loc28 = loc("CWE190_Integer_Overflow__int_fscanf_square_22b.c":49:1)
#loc29 = loc("CWE190_Integer_Overflow__int_fscanf_square_22b.c":69:1)
#loc32 = loc("CWE190_Integer_Overflow__int_fscanf_square_22b.c":50:1)
#loc33 = loc("CWE190_Integer_Overflow__int_fscanf_square_22b.c":51:5)
#loc34 = loc("CWE190_Integer_Overflow__int_fscanf_square_22b.c":68:5)
#loc35 = loc("CWE190_Integer_Overflow__int_fscanf_square_22b.c":51:8)
#loc36 = loc("CWE190_Integer_Overflow__int_fscanf_square_22b.c":52:5)
#loc37 = loc("CWE190_Integer_Overflow__int_fscanf_square_22b.c":55:5)
#loc38 = loc("CWE190_Integer_Overflow__int_fscanf_square_22b.c":57:5)
#loc39 = loc("CWE190_Integer_Overflow__int_fscanf_square_22b.c":54:9)
#loc40 = loc("CWE190_Integer_Overflow__int_fscanf_square_22b.c":59:9)
#loc41 = loc("CWE190_Integer_Overflow__int_fscanf_square_22b.c":67:9)
#loc42 = loc("CWE190_Integer_Overflow__int_fscanf_square_22b.c":59:13)
#loc43 = loc("CWE190_Integer_Overflow__int_fscanf_square_22b.c":59:20)
#loc44 = loc("CWE190_Integer_Overflow__int_fscanf_square_22b.c":59:28)
#loc45 = loc("CWE190_Integer_Overflow__int_fscanf_square_22b.c":59:35)
#loc46 = loc("CWE190_Integer_Overflow__int_fscanf_square_22b.c":59:31)
#loc47 = loc("CWE190_Integer_Overflow__int_fscanf_square_22b.c":59:49)
#loc48 = loc("CWE190_Integer_Overflow__int_fscanf_square_22b.c":59:62)
#loc49 = loc("CWE190_Integer_Overflow__int_fscanf_square_22b.c":59:69)
#loc50 = loc("CWE190_Integer_Overflow__int_fscanf_square_22b.c":60:9)
#loc51 = loc("CWE190_Integer_Overflow__int_fscanf_square_22b.c":63:9)
#loc52 = loc("CWE190_Integer_Overflow__int_fscanf_square_22b.c":65:9)
#loc53 = loc("CWE190_Integer_Overflow__int_fscanf_square_22b.c":61:13)
#loc54 = loc("CWE190_Integer_Overflow__int_fscanf_square_22b.c":61:33)
#loc55 = loc("CWE190_Integer_Overflow__int_fscanf_square_22b.c":61:26)
#loc56 = loc("CWE190_Integer_Overflow__int_fscanf_square_22b.c":62:26)
#loc57 = loc("CWE190_Integer_Overflow__int_fscanf_square_22b.c":62:13)
#loc58 = loc("CWE190_Integer_Overflow__int_fscanf_square_22b.c":66:13)
#loc59 = loc("CWE190_Integer_Overflow__int_fscanf_square_22b.c":45:1)
#loc60 = loc("CWE190_Integer_Overflow__int_fscanf_square_22b.c":45:12)
#loc61 = loc("CWE190_Integer_Overflow__int_fscanf_square_22b.c":72:1)
#loc62 = loc("CWE190_Integer_Overflow__int_fscanf_square_22b.c":87:1)
#loc65 = loc("CWE190_Integer_Overflow__int_fscanf_square_22b.c":73:1)
#loc66 = loc("CWE190_Integer_Overflow__int_fscanf_square_22b.c":74:5)
#loc67 = loc("CWE190_Integer_Overflow__int_fscanf_square_22b.c":86:5)
#loc68 = loc("CWE190_Integer_Overflow__int_fscanf_square_22b.c":74:8)
#loc69 = loc("CWE190_Integer_Overflow__int_fscanf_square_22b.c":75:5)
#loc70 = loc("CWE190_Integer_Overflow__int_fscanf_square_22b.c":77:9)
#loc71 = loc("CWE190_Integer_Overflow__int_fscanf_square_22b.c":85:9)
#loc72 = loc("CWE190_Integer_Overflow__int_fscanf_square_22b.c":77:13)
#loc73 = loc("CWE190_Integer_Overflow__int_fscanf_square_22b.c":77:20)
#loc74 = loc("CWE190_Integer_Overflow__int_fscanf_square_22b.c":77:28)
#loc75 = loc("CWE190_Integer_Overflow__int_fscanf_square_22b.c":77:35)
#loc76 = loc("CWE190_Integer_Overflow__int_fscanf_square_22b.c":77:31)
#loc77 = loc("CWE190_Integer_Overflow__int_fscanf_square_22b.c":77:49)
#loc78 = loc("CWE190_Integer_Overflow__int_fscanf_square_22b.c":77:62)
#loc79 = loc("CWE190_Integer_Overflow__int_fscanf_square_22b.c":77:69)
#loc80 = loc("CWE190_Integer_Overflow__int_fscanf_square_22b.c":78:9)
#loc81 = loc("CWE190_Integer_Overflow__int_fscanf_square_22b.c":81:9)
#loc82 = loc("CWE190_Integer_Overflow__int_fscanf_square_22b.c":83:9)
#loc83 = loc("CWE190_Integer_Overflow__int_fscanf_square_22b.c":79:13)
#loc84 = loc("CWE190_Integer_Overflow__int_fscanf_square_22b.c":79:33)
#loc85 = loc("CWE190_Integer_Overflow__int_fscanf_square_22b.c":79:26)
#loc86 = loc("CWE190_Integer_Overflow__int_fscanf_square_22b.c":80:26)
#loc87 = loc("CWE190_Integer_Overflow__int_fscanf_square_22b.c":80:13)
#loc88 = loc("CWE190_Integer_Overflow__int_fscanf_square_22b.c":84:23)
#loc89 = loc("CWE190_Integer_Overflow__int_fscanf_square_22b.c":84:13)
#loc90 = loc("CWE190_Integer_Overflow__int_fscanf_square_22b.c":46:1)
#loc91 = loc("CWE190_Integer_Overflow__int_fscanf_square_22b.c":46:12)
#loc92 = loc("CWE190_Integer_Overflow__int_fscanf_square_22b.c":90:1)
#loc93 = loc("CWE190_Integer_Overflow__int_fscanf_square_22b.c":100:1)
#loc96 = loc("CWE190_Integer_Overflow__int_fscanf_square_22b.c":91:1)
#loc97 = loc("CWE190_Integer_Overflow__int_fscanf_square_22b.c":92:5)
#loc98 = loc("CWE190_Integer_Overflow__int_fscanf_square_22b.c":99:5)
#loc99 = loc("CWE190_Integer_Overflow__int_fscanf_square_22b.c":92:8)
#loc100 = loc("CWE190_Integer_Overflow__int_fscanf_square_22b.c":93:5)
#loc101 = loc("CWE190_Integer_Overflow__int_fscanf_square_22b.c":94:9)
#loc102 = loc("CWE190_Integer_Overflow__int_fscanf_square_22b.c":98:9)
#loc103 = loc("CWE190_Integer_Overflow__int_fscanf_square_22b.c":96:13)
#loc104 = loc("CWE190_Integer_Overflow__int_fscanf_square_22b.c":96:33)
#loc105 = loc("CWE190_Integer_Overflow__int_fscanf_square_22b.c":96:26)
#loc106 = loc("CWE190_Integer_Overflow__int_fscanf_square_22b.c":97:26)
#loc107 = loc("CWE190_Integer_Overflow__int_fscanf_square_22b.c":97:13)
#loc108 = loc(fused[#loc1, #loc2])
#loc109 = loc(fused[#loc3, #loc4])
#loc110 = loc(fused[#loc5, #loc6])
#loc112 = loc(fused[#loc10, #loc11])
#loc113 = loc(fused[#loc13, #loc11])
#loc114 = loc(fused[#loc14, #loc15])
#loc115 = loc(fused[#loc16, #loc17])
#loc116 = loc(fused[#loc21, #loc22])
#loc117 = loc(fused[#loc23, #loc24])
#loc118 = loc(fused[#loc28, #loc29])
#loc120 = loc(fused[#loc33, #loc34])
#loc121 = loc(fused[#loc36, #loc37, #loc38, #loc34])
#loc122 = loc(fused[#loc40, #loc41])
#loc123 = loc(fused[#loc42, #loc43])
#loc124 = loc(fused[#loc46, #loc49])
#loc125 = loc(fused[#loc50, #loc51, #loc52, #loc41])
#loc126 = loc(fused[#loc53, #loc54])
#loc127 = loc(fused[#loc59, #loc60])
#loc128 = loc(fused[#loc61, #loc62])
#loc130 = loc(fused[#loc66, #loc67])
#loc131 = loc(fused[#loc69, #loc67])
#loc132 = loc(fused[#loc70, #loc71])
#loc133 = loc(fused[#loc72, #loc73])
#loc134 = loc(fused[#loc76, #loc79])
#loc135 = loc(fused[#loc80, #loc81, #loc82, #loc71])
#loc136 = loc(fused[#loc83, #loc84])
#loc137 = loc(fused[#loc90, #loc91])
#loc138 = loc(fused[#loc92, #loc93])
#loc140 = loc(fused[#loc97, #loc98])
#loc141 = loc(fused[#loc100, #loc98])
#loc142 = loc(fused[#loc101, #loc102])
#loc143 = loc(fused[#loc103, #loc104])
