!s32i = !cir.int<s, 32>
!s64i = !cir.int<s, 64>
!s8i = !cir.int<s, 8>
!u32i = !cir.int<u, 32>
!u64i = !cir.int<u, 64>
!void = !cir.void
#fn_attr = #cir<extra({nothrow = #cir.nothrow})>
#fn_attr1 = #cir<extra({inline = #cir.inline<no>, nothrow = #cir.nothrow, optnone = #cir.optnone})>
#loc71 = loc("CWE122_Heap_Based_Buffer_Overflow__char_type_overrun_memcpy_01.c":85:10)
#loc72 = loc("CWE122_Heap_Based_Buffer_Overflow__char_type_overrun_memcpy_01.c":85:14)
#loc73 = loc("CWE122_Heap_Based_Buffer_Overflow__char_type_overrun_memcpy_01.c":85:20)
#loc74 = loc("CWE122_Heap_Based_Buffer_Overflow__char_type_overrun_memcpy_01.c":85:32)
#loc164 = loc(fused[#loc71, #loc72])
#loc165 = loc(fused[#loc73, #loc74])
!ty__charVoid = !cir.struct<struct "_charVoid" {!cir.array<!s8i x 16>, !cir.ptr<!void>, !cir.ptr<!void>} #cir.record.decl.ast>
module @"/home/ladisgin/git_proj/juliet-c/testcases/CWE122_Heap_Based_Buffer_Overflow/s01/CWE122_Heap_Based_Buffer_Overflow__char_type_overrun_memcpy_01.c" attributes {cir.lang = #cir.lang<c>, cir.sob = #cir.signed_overflow_behavior<undefined>, cir.triple = "x86_64-unknown-linux-gnu", dlti.dl_spec = #dlti.dl_spec<i128 = dense<128> : vector<2xi64>, i64 = dense<64> : vector<2xi64>, !llvm.ptr = dense<64> : vector<4xi64>, i1 = dense<8> : vector<2xi64>, f80 = dense<128> : vector<2xi64>, i32 = dense<32> : vector<2xi64>, i8 = dense<8> : vector<2xi64>, i16 = dense<16> : vector<2xi64>, !llvm.ptr<271> = dense<32> : vector<4xi64>, !llvm.ptr<272> = dense<64> : vector<4xi64>, f16 = dense<16> : vector<2xi64>, f128 = dense<128> : vector<2xi64>, !llvm.ptr<270> = dense<32> : vector<4xi64>, f64 = dense<64> : vector<2xi64>, "dlti.stack_alignment" = 128 : i64, "dlti.endianness" = "little">} {
  cir.func private @malloc(!u64i) -> !cir.ptr<!void> extra(#fn_attr) loc(#loc135)
  cir.func private @exit(!s32i) extra(#fn_attr) loc(#loc136)
  cir.global "private" constant cir_private dsolocal @".str" = #cir.const_array<"0123456789abcdef0123456789abcde\00" : !cir.array<!s8i x 32>> : !cir.array<!s8i x 32> {alignment = 1 : i64} loc(#loc5)
  cir.func private @printLine(!cir.ptr<!s8i>) loc(#loc137)
  cir.func private @free(!cir.ptr<!void>) extra(#fn_attr) loc(#loc138)
  cir.func no_proto @CWE122_Heap_Based_Buffer_Overflow__char_type_overrun_memcpy_01_bad() extra(#fn_attr1) {
    %0 = cir.alloca !cir.ptr<!ty__charVoid>, !cir.ptr<!cir.ptr<!ty__charVoid>>, ["structCharVoid", init] {alignment = 8 : i64} loc(#loc140)
    cir.br ^bb1 loc(#loc141)
  ^bb1:  // pred: ^bb0
    %1 = cir.get_global @malloc : !cir.ptr<!cir.func<!cir.ptr<!void> (!u64i)>> loc(#loc16)
    %2 = cir.const #cir.int<32> : !u64i loc(#loc142)
    %3 = cir.call @malloc(%2) : (!u64i) -> !cir.ptr<!void> extra(#fn_attr) loc(#loc16)
    %4 = cir.cast(bitcast, %3 : !cir.ptr<!void>), !cir.ptr<!ty__charVoid> loc(#loc143)
    cir.store %4, %0 : !cir.ptr<!ty__charVoid>, !cir.ptr<!cir.ptr<!ty__charVoid>> loc(#loc140)
    cir.br ^bb2 loc(#loc144)
  ^bb2:  // pred: ^bb1
    %5 = cir.load %0 : !cir.ptr<!cir.ptr<!ty__charVoid>>, !cir.ptr<!ty__charVoid> loc(#loc21)
    %6 = cir.const #cir.ptr<null> : !cir.ptr<!void> loc(#loc22)
    %7 = cir.cast(bitcast, %6 : !cir.ptr<!void>), !cir.ptr<!ty__charVoid> loc(#loc22)
    %8 = cir.cmp(eq, %5, %7) : !cir.ptr<!ty__charVoid>, !cir.bool loc(#loc145)
    cir.brcond %8 ^bb3, ^bb4 loc(#loc146)
  ^bb3:  // pred: ^bb2
    %9 = cir.get_global @exit : !cir.ptr<!cir.func<!void (!s32i)>> loc(#loc24)
    %10 = cir.const #cir.int<1> : !s32i loc(#loc25)
    %11 = cir.unary(minus, %10) : !s32i, !s32i loc(#loc26)
    cir.call @exit(%11) : (!s32i) -> () extra(#fn_attr) loc(#loc24)
    cir.br ^bb4 loc(#loc20)
  ^bb4:  // 2 preds: ^bb2, ^bb3
    cir.br ^bb5 loc(#loc20)
  ^bb5:  // pred: ^bb4
    %12 = cir.get_global @".str" : !cir.ptr<!cir.array<!s8i x 32>> loc(#loc5)
    %13 = cir.cast(array_to_ptrdecay, %12 : !cir.ptr<!cir.array<!s8i x 32>>), !cir.ptr<!s8i> loc(#loc5)
    %14 = cir.cast(bitcast, %13 : !cir.ptr<!s8i>), !cir.ptr<!void> loc(#loc5)
    %15 = cir.load %0 : !cir.ptr<!cir.ptr<!ty__charVoid>>, !cir.ptr<!ty__charVoid> loc(#loc27)
    %16 = cir.get_member %15[1] {name = "voidSecond"} : !cir.ptr<!ty__charVoid> -> !cir.ptr<!cir.ptr<!void>> loc(#loc28)
    cir.store %14, %16 : !cir.ptr<!void>, !cir.ptr<!cir.ptr<!void>> loc(#loc147)
    %17 = cir.load %0 : !cir.ptr<!cir.ptr<!ty__charVoid>>, !cir.ptr<!ty__charVoid> loc(#loc29)
    %18 = cir.get_member %17[1] {name = "voidSecond"} : !cir.ptr<!ty__charVoid> -> !cir.ptr<!cir.ptr<!void>> loc(#loc28)
    %19 = cir.load %18 : !cir.ptr<!cir.ptr<!void>>, !cir.ptr<!void> loc(#loc30)
    %20 = cir.cast(bitcast, %19 : !cir.ptr<!void>), !cir.ptr<!s8i> loc(#loc148)
    cir.call @printLine(%20) : (!cir.ptr<!s8i>) -> () loc(#loc31)
    %21 = cir.load %0 : !cir.ptr<!cir.ptr<!ty__charVoid>>, !cir.ptr<!ty__charVoid> loc(#loc32)
    %22 = cir.get_member %21[0] {name = "charFirst"} : !cir.ptr<!ty__charVoid> -> !cir.ptr<!cir.array<!s8i x 16>> loc(#loc33)
    %23 = cir.cast(array_to_ptrdecay, %22 : !cir.ptr<!cir.array<!s8i x 16>>), !cir.ptr<!s8i> loc(#loc149)
    %24 = cir.cast(bitcast, %23 : !cir.ptr<!s8i>), !cir.ptr<!void> loc(#loc149)
    %25 = cir.get_global @".str" : !cir.ptr<!cir.array<!s8i x 32>> loc(#loc35)
    %26 = cir.cast(array_to_ptrdecay, %25 : !cir.ptr<!cir.array<!s8i x 32>>), !cir.ptr<!s8i> loc(#loc35)
    %27 = cir.cast(bitcast, %26 : !cir.ptr<!s8i>), !cir.ptr<!void> loc(#loc35)
    %28 = cir.const #cir.int<32> : !u64i loc(#loc150)
    cir.libc.memcpy %28 bytes from %27 to %24 : !u64i, !cir.ptr<!void> -> !cir.ptr<!void> loc(#loc151)
    %29 = cir.const #cir.int<0> : !s32i loc(#loc40)
    %30 = cir.cast(integral, %29 : !s32i), !s8i loc(#loc40)
    %31 = cir.load %0 : !cir.ptr<!cir.ptr<!ty__charVoid>>, !cir.ptr<!ty__charVoid> loc(#loc41)
    %32 = cir.get_member %31[0] {name = "charFirst"} : !cir.ptr<!ty__charVoid> -> !cir.ptr<!cir.array<!s8i x 16>> loc(#loc33)
    %33 = cir.const #cir.int<16> : !u64i loc(#loc152)
    %34 = cir.const #cir.int<1> : !u64i loc(#loc153)
    %35 = cir.binop(div, %33, %34) : !u64i loc(#loc154)
    %36 = cir.const #cir.int<1> : !s32i loc(#loc46)
    %37 = cir.cast(integral, %36 : !s32i), !u64i loc(#loc46)
    %38 = cir.binop(sub, %35, %37) : !u64i loc(#loc155)
    %39 = cir.cast(array_to_ptrdecay, %32 : !cir.ptr<!cir.array<!s8i x 16>>), !cir.ptr<!s8i> loc(#loc41)
    %40 = cir.ptr_stride(%39 : !cir.ptr<!s8i>, %38 : !u64i), !cir.ptr<!s8i> loc(#loc48)
    cir.store %30, %40 : !s8i, !cir.ptr<!s8i> loc(#loc156)
    %41 = cir.load %0 : !cir.ptr<!cir.ptr<!ty__charVoid>>, !cir.ptr<!ty__charVoid> loc(#loc49)
    %42 = cir.get_member %41[0] {name = "charFirst"} : !cir.ptr<!ty__charVoid> -> !cir.ptr<!cir.array<!s8i x 16>> loc(#loc33)
    %43 = cir.cast(array_to_ptrdecay, %42 : !cir.ptr<!cir.array<!s8i x 16>>), !cir.ptr<!s8i> loc(#loc157)
    cir.call @printLine(%43) : (!cir.ptr<!s8i>) -> () loc(#loc51)
    %44 = cir.load %0 : !cir.ptr<!cir.ptr<!ty__charVoid>>, !cir.ptr<!ty__charVoid> loc(#loc52)
    %45 = cir.get_member %44[1] {name = "voidSecond"} : !cir.ptr<!ty__charVoid> -> !cir.ptr<!cir.ptr<!void>> loc(#loc28)
    %46 = cir.load %45 : !cir.ptr<!cir.ptr<!void>>, !cir.ptr<!void> loc(#loc53)
    %47 = cir.cast(bitcast, %46 : !cir.ptr<!void>), !cir.ptr<!s8i> loc(#loc158)
    cir.call @printLine(%47) : (!cir.ptr<!s8i>) -> () loc(#loc54)
    %48 = cir.load %0 : !cir.ptr<!cir.ptr<!ty__charVoid>>, !cir.ptr<!ty__charVoid> loc(#loc55)
    %49 = cir.cast(bitcast, %48 : !cir.ptr<!ty__charVoid>), !cir.ptr<!void> loc(#loc55)
    cir.call @free(%49) : (!cir.ptr<!void>) -> () extra(#fn_attr) loc(#loc56)
    cir.br ^bb6 loc(#loc15)
  ^bb6:  // pred: ^bb5
    cir.return loc(#loc11)
  } loc(#loc139)
  cir.func no_proto @CWE122_Heap_Based_Buffer_Overflow__char_type_overrun_memcpy_01_good() extra(#fn_attr1) {
    %0 = cir.get_global @good1 : !cir.ptr<!cir.func<!void ()>> loc(#loc160)
    cir.call %0() : (!cir.ptr<!cir.func<!void ()>>) -> () loc(#loc59)
    cir.return loc(#loc58)
  } loc(#loc159)
  cir.func private @srand(!u32i) extra(#fn_attr) loc(#loc161)
  cir.func private @time(!cir.ptr<!s64i>) -> !s64i extra(#fn_attr) loc(#loc162)
  cir.global "private" constant cir_private dsolocal @".str.1" = #cir.const_array<"Calling good()...\00" : !cir.array<!s8i x 18>> : !cir.array<!s8i x 18> {alignment = 1 : i64} loc(#loc65)
  cir.global "private" constant cir_private dsolocal @".str.2" = #cir.const_array<"Finished good()\00" : !cir.array<!s8i x 16>> : !cir.array<!s8i x 16> {alignment = 1 : i64} loc(#loc66)
  cir.global "private" constant cir_private dsolocal @".str.3" = #cir.const_array<"Calling bad()...\00" : !cir.array<!s8i x 17>> : !cir.array<!s8i x 17> {alignment = 1 : i64} loc(#loc67)
  cir.global "private" constant cir_private dsolocal @".str.4" = #cir.const_array<"Finished bad()\00" : !cir.array<!s8i x 15>> : !cir.array<!s8i x 15> {alignment = 1 : i64} loc(#loc68)
  cir.func @main(%arg0: !s32i loc(fused[#loc71, #loc72]), %arg1: !cir.ptr<!cir.ptr<!s8i>> loc(fused[#loc73, #loc74])) -> !s32i extra(#fn_attr1) {
    %0 = cir.alloca !s32i, !cir.ptr<!s32i>, ["argc", init] {alignment = 4 : i64} loc(#loc164)
    %1 = cir.alloca !cir.ptr<!cir.ptr<!s8i>>, !cir.ptr<!cir.ptr<!cir.ptr<!s8i>>>, ["argv", init] {alignment = 8 : i64} loc(#loc165)
    %2 = cir.alloca !s32i, !cir.ptr<!s32i>, ["__retval"] {alignment = 4 : i64} loc(#loc70)
    cir.store %arg0, %0 : !s32i, !cir.ptr<!s32i> loc(#loc75)
    cir.store %arg1, %1 : !cir.ptr<!cir.ptr<!s8i>>, !cir.ptr<!cir.ptr<!cir.ptr<!s8i>>> loc(#loc75)
    %3 = cir.const #cir.ptr<null> : !cir.ptr<!s64i> loc(#loc76)
    %4 = cir.call @time(%3) : (!cir.ptr<!s64i>) -> !s64i extra(#fn_attr) loc(#loc77)
    %5 = cir.cast(integral, %4 : !s64i), !u32i loc(#loc77)
    cir.call @srand(%5) : (!u32i) -> () extra(#fn_attr) loc(#loc78)
    %6 = cir.get_global @".str.1" : !cir.ptr<!cir.array<!s8i x 18>> loc(#loc65)
    %7 = cir.cast(array_to_ptrdecay, %6 : !cir.ptr<!cir.array<!s8i x 18>>), !cir.ptr<!s8i> loc(#loc65)
    cir.call @printLine(%7) : (!cir.ptr<!s8i>) -> () loc(#loc79)
    %8 = cir.get_global @CWE122_Heap_Based_Buffer_Overflow__char_type_overrun_memcpy_01_good : !cir.ptr<!cir.func<!void ()>> loc(#loc166)
    cir.call @CWE122_Heap_Based_Buffer_Overflow__char_type_overrun_memcpy_01_good() : () -> () loc(#loc80)
    %9 = cir.get_global @".str.2" : !cir.ptr<!cir.array<!s8i x 16>> loc(#loc66)
    %10 = cir.cast(array_to_ptrdecay, %9 : !cir.ptr<!cir.array<!s8i x 16>>), !cir.ptr<!s8i> loc(#loc66)
    cir.call @printLine(%10) : (!cir.ptr<!s8i>) -> () loc(#loc82)
    %11 = cir.get_global @".str.3" : !cir.ptr<!cir.array<!s8i x 17>> loc(#loc67)
    %12 = cir.cast(array_to_ptrdecay, %11 : !cir.ptr<!cir.array<!s8i x 17>>), !cir.ptr<!s8i> loc(#loc67)
    cir.call @printLine(%12) : (!cir.ptr<!s8i>) -> () loc(#loc83)
    %13 = cir.get_global @CWE122_Heap_Based_Buffer_Overflow__char_type_overrun_memcpy_01_bad : !cir.ptr<!cir.func<!void ()>> loc(#loc167)
    cir.call @CWE122_Heap_Based_Buffer_Overflow__char_type_overrun_memcpy_01_bad() : () -> () loc(#loc84)
    %14 = cir.get_global @".str.4" : !cir.ptr<!cir.array<!s8i x 15>> loc(#loc68)
    %15 = cir.cast(array_to_ptrdecay, %14 : !cir.ptr<!cir.array<!s8i x 15>>), !cir.ptr<!s8i> loc(#loc68)
    cir.call @printLine(%15) : (!cir.ptr<!s8i>) -> () loc(#loc86)
    %16 = cir.const #cir.int<0> : !s32i loc(#loc87)
    cir.store %16, %2 : !s32i, !cir.ptr<!s32i> loc(#loc168)
    %17 = cir.load %2 : !cir.ptr<!s32i>, !s32i loc(#loc168)
    cir.return %17 : !s32i loc(#loc168)
  } loc(#loc163)
  cir.func no_proto internal private @good1() extra(#fn_attr1) {
    %0 = cir.alloca !cir.ptr<!ty__charVoid>, !cir.ptr<!cir.ptr<!ty__charVoid>>, ["structCharVoid", init] {alignment = 8 : i64} loc(#loc170)
    cir.br ^bb1 loc(#loc171)
  ^bb1:  // pred: ^bb0
    %1 = cir.get_global @malloc : !cir.ptr<!cir.func<!cir.ptr<!void> (!u64i)>> loc(#loc95)
    %2 = cir.const #cir.int<32> : !u64i loc(#loc172)
    %3 = cir.call @malloc(%2) : (!u64i) -> !cir.ptr<!void> extra(#fn_attr) loc(#loc95)
    %4 = cir.cast(bitcast, %3 : !cir.ptr<!void>), !cir.ptr<!ty__charVoid> loc(#loc173)
    cir.store %4, %0 : !cir.ptr<!ty__charVoid>, !cir.ptr<!cir.ptr<!ty__charVoid>> loc(#loc170)
    cir.br ^bb2 loc(#loc174)
  ^bb2:  // pred: ^bb1
    %5 = cir.load %0 : !cir.ptr<!cir.ptr<!ty__charVoid>>, !cir.ptr<!ty__charVoid> loc(#loc100)
    %6 = cir.const #cir.ptr<null> : !cir.ptr<!void> loc(#loc101)
    %7 = cir.cast(bitcast, %6 : !cir.ptr<!void>), !cir.ptr<!ty__charVoid> loc(#loc101)
    %8 = cir.cmp(eq, %5, %7) : !cir.ptr<!ty__charVoid>, !cir.bool loc(#loc175)
    cir.brcond %8 ^bb3, ^bb4 loc(#loc176)
  ^bb3:  // pred: ^bb2
    %9 = cir.get_global @exit : !cir.ptr<!cir.func<!void (!s32i)>> loc(#loc103)
    %10 = cir.const #cir.int<1> : !s32i loc(#loc104)
    %11 = cir.unary(minus, %10) : !s32i, !s32i loc(#loc105)
    cir.call @exit(%11) : (!s32i) -> () extra(#fn_attr) loc(#loc103)
    cir.br ^bb4 loc(#loc99)
  ^bb4:  // 2 preds: ^bb2, ^bb3
    cir.br ^bb5 loc(#loc99)
  ^bb5:  // pred: ^bb4
    %12 = cir.get_global @".str" : !cir.ptr<!cir.array<!s8i x 32>> loc(#loc106)
    %13 = cir.cast(array_to_ptrdecay, %12 : !cir.ptr<!cir.array<!s8i x 32>>), !cir.ptr<!s8i> loc(#loc106)
    %14 = cir.cast(bitcast, %13 : !cir.ptr<!s8i>), !cir.ptr<!void> loc(#loc106)
    %15 = cir.load %0 : !cir.ptr<!cir.ptr<!ty__charVoid>>, !cir.ptr<!ty__charVoid> loc(#loc107)
    %16 = cir.get_member %15[1] {name = "voidSecond"} : !cir.ptr<!ty__charVoid> -> !cir.ptr<!cir.ptr<!void>> loc(#loc28)
    cir.store %14, %16 : !cir.ptr<!void>, !cir.ptr<!cir.ptr<!void>> loc(#loc177)
    %17 = cir.load %0 : !cir.ptr<!cir.ptr<!ty__charVoid>>, !cir.ptr<!ty__charVoid> loc(#loc108)
    %18 = cir.get_member %17[1] {name = "voidSecond"} : !cir.ptr<!ty__charVoid> -> !cir.ptr<!cir.ptr<!void>> loc(#loc28)
    %19 = cir.load %18 : !cir.ptr<!cir.ptr<!void>>, !cir.ptr<!void> loc(#loc109)
    %20 = cir.cast(bitcast, %19 : !cir.ptr<!void>), !cir.ptr<!s8i> loc(#loc178)
    cir.call @printLine(%20) : (!cir.ptr<!s8i>) -> () loc(#loc110)
    %21 = cir.load %0 : !cir.ptr<!cir.ptr<!ty__charVoid>>, !cir.ptr<!ty__charVoid> loc(#loc111)
    %22 = cir.get_member %21[0] {name = "charFirst"} : !cir.ptr<!ty__charVoid> -> !cir.ptr<!cir.array<!s8i x 16>> loc(#loc33)
    %23 = cir.cast(array_to_ptrdecay, %22 : !cir.ptr<!cir.array<!s8i x 16>>), !cir.ptr<!s8i> loc(#loc179)
    %24 = cir.cast(bitcast, %23 : !cir.ptr<!s8i>), !cir.ptr<!void> loc(#loc179)
    %25 = cir.get_global @".str" : !cir.ptr<!cir.array<!s8i x 32>> loc(#loc113)
    %26 = cir.cast(array_to_ptrdecay, %25 : !cir.ptr<!cir.array<!s8i x 32>>), !cir.ptr<!s8i> loc(#loc113)
    %27 = cir.cast(bitcast, %26 : !cir.ptr<!s8i>), !cir.ptr<!void> loc(#loc113)
    %28 = cir.const #cir.int<16> : !u64i loc(#loc180)
    cir.libc.memcpy %28 bytes from %27 to %24 : !u64i, !cir.ptr<!void> -> !cir.ptr<!void> loc(#loc181)
    %29 = cir.const #cir.int<0> : !s32i loc(#loc118)
    %30 = cir.cast(integral, %29 : !s32i), !s8i loc(#loc118)
    %31 = cir.load %0 : !cir.ptr<!cir.ptr<!ty__charVoid>>, !cir.ptr<!ty__charVoid> loc(#loc119)
    %32 = cir.get_member %31[0] {name = "charFirst"} : !cir.ptr<!ty__charVoid> -> !cir.ptr<!cir.array<!s8i x 16>> loc(#loc33)
    %33 = cir.const #cir.int<16> : !u64i loc(#loc182)
    %34 = cir.const #cir.int<1> : !u64i loc(#loc183)
    %35 = cir.binop(div, %33, %34) : !u64i loc(#loc184)
    %36 = cir.const #cir.int<1> : !s32i loc(#loc124)
    %37 = cir.cast(integral, %36 : !s32i), !u64i loc(#loc124)
    %38 = cir.binop(sub, %35, %37) : !u64i loc(#loc185)
    %39 = cir.cast(array_to_ptrdecay, %32 : !cir.ptr<!cir.array<!s8i x 16>>), !cir.ptr<!s8i> loc(#loc119)
    %40 = cir.ptr_stride(%39 : !cir.ptr<!s8i>, %38 : !u64i), !cir.ptr<!s8i> loc(#loc126)
    cir.store %30, %40 : !s8i, !cir.ptr<!s8i> loc(#loc186)
    %41 = cir.load %0 : !cir.ptr<!cir.ptr<!ty__charVoid>>, !cir.ptr<!ty__charVoid> loc(#loc127)
    %42 = cir.get_member %41[0] {name = "charFirst"} : !cir.ptr<!ty__charVoid> -> !cir.ptr<!cir.array<!s8i x 16>> loc(#loc33)
    %43 = cir.cast(array_to_ptrdecay, %42 : !cir.ptr<!cir.array<!s8i x 16>>), !cir.ptr<!s8i> loc(#loc187)
    cir.call @printLine(%43) : (!cir.ptr<!s8i>) -> () loc(#loc129)
    %44 = cir.load %0 : !cir.ptr<!cir.ptr<!ty__charVoid>>, !cir.ptr<!ty__charVoid> loc(#loc130)
    %45 = cir.get_member %44[1] {name = "voidSecond"} : !cir.ptr<!ty__charVoid> -> !cir.ptr<!cir.ptr<!void>> loc(#loc28)
    %46 = cir.load %45 : !cir.ptr<!cir.ptr<!void>>, !cir.ptr<!void> loc(#loc131)
    %47 = cir.cast(bitcast, %46 : !cir.ptr<!void>), !cir.ptr<!s8i> loc(#loc188)
    cir.call @printLine(%47) : (!cir.ptr<!s8i>) -> () loc(#loc132)
    %48 = cir.load %0 : !cir.ptr<!cir.ptr<!ty__charVoid>>, !cir.ptr<!ty__charVoid> loc(#loc133)
    %49 = cir.cast(bitcast, %48 : !cir.ptr<!ty__charVoid>), !cir.ptr<!void> loc(#loc133)
    cir.call @free(%49) : (!cir.ptr<!void>) -> () extra(#fn_attr) loc(#loc134)
    cir.br ^bb6 loc(#loc94)
  ^bb6:  // pred: ^bb5
    cir.return loc(#loc90)
  } loc(#loc169)
} loc(#loc)
#loc = loc("/home/ladisgin/git_proj/juliet-c/testcases/CWE122_Heap_Based_Buffer_Overflow/s01/CWE122_Heap_Based_Buffer_Overflow__char_type_overrun_memcpy_01.c":0:0)
#loc1 = loc("/usr/include/stdlib.h":672:1)
#loc2 = loc("/usr/include/stdlib.h":672:45)
#loc3 = loc("/usr/include/stdlib.h":756:1)
#loc4 = loc("/usr/include/stdlib.h":756:70)
#loc5 = loc("CWE122_Heap_Based_Buffer_Overflow__char_type_overrun_memcpy_01.c":38:46)
#loc6 = loc("../../../testcasesupport/std_testcase_io.h":14:1)
#loc7 = loc("../../../testcasesupport/std_testcase_io.h":14:33)
#loc8 = loc("/usr/include/stdlib.h":687:1)
#loc9 = loc("/usr/include/stdlib.h":687:32)
#loc10 = loc("CWE122_Heap_Based_Buffer_Overflow__char_type_overrun_memcpy_01.c":33:1)
#loc11 = loc("CWE122_Heap_Based_Buffer_Overflow__char_type_overrun_memcpy_01.c":48:1)
#loc12 = loc("CWE122_Heap_Based_Buffer_Overflow__char_type_overrun_memcpy_01.c":36:9)
#loc13 = loc("CWE122_Heap_Based_Buffer_Overflow__char_type_overrun_memcpy_01.c":36:72)
#loc14 = loc("CWE122_Heap_Based_Buffer_Overflow__char_type_overrun_memcpy_01.c":35:5)
#loc15 = loc("CWE122_Heap_Based_Buffer_Overflow__char_type_overrun_memcpy_01.c":47:5)
#loc16 = loc("CWE122_Heap_Based_Buffer_Overflow__char_type_overrun_memcpy_01.c":36:49)
#loc17 = loc("CWE122_Heap_Based_Buffer_Overflow__char_type_overrun_memcpy_01.c":36:56)
#loc18 = loc("CWE122_Heap_Based_Buffer_Overflow__char_type_overrun_memcpy_01.c":36:71)
#loc19 = loc("CWE122_Heap_Based_Buffer_Overflow__char_type_overrun_memcpy_01.c":37:9)
#loc20 = loc("CWE122_Heap_Based_Buffer_Overflow__char_type_overrun_memcpy_01.c":37:47)
#loc21 = loc("CWE122_Heap_Based_Buffer_Overflow__char_type_overrun_memcpy_01.c":37:13)
#loc22 = loc("CWE122_Heap_Based_Buffer_Overflow__char_type_overrun_memcpy_01.c":37:31)
#loc23 = loc("CWE122_Heap_Based_Buffer_Overflow__char_type_overrun_memcpy_01.c":37:37)
#loc24 = loc("CWE122_Heap_Based_Buffer_Overflow__char_type_overrun_memcpy_01.c":37:38)
#loc25 = loc("CWE122_Heap_Based_Buffer_Overflow__char_type_overrun_memcpy_01.c":37:44)
#loc26 = loc("CWE122_Heap_Based_Buffer_Overflow__char_type_overrun_memcpy_01.c":37:43)
#loc27 = loc("CWE122_Heap_Based_Buffer_Overflow__char_type_overrun_memcpy_01.c":38:9)
#loc28 = loc("CWE122_Heap_Based_Buffer_Overflow__char_type_overrun_memcpy_01.c":27:12)
#loc29 = loc("CWE122_Heap_Based_Buffer_Overflow__char_type_overrun_memcpy_01.c":40:27)
#loc30 = loc("CWE122_Heap_Based_Buffer_Overflow__char_type_overrun_memcpy_01.c":40:43)
#loc31 = loc("CWE122_Heap_Based_Buffer_Overflow__char_type_overrun_memcpy_01.c":40:9)
#loc32 = loc("CWE122_Heap_Based_Buffer_Overflow__char_type_overrun_memcpy_01.c":42:16)
#loc33 = loc("CWE122_Heap_Based_Buffer_Overflow__char_type_overrun_memcpy_01.c":26:10)
#loc34 = loc("CWE122_Heap_Based_Buffer_Overflow__char_type_overrun_memcpy_01.c":42:32)
#loc35 = loc("CWE122_Heap_Based_Buffer_Overflow__char_type_overrun_memcpy_01.c":42:43)
#loc36 = loc("CWE122_Heap_Based_Buffer_Overflow__char_type_overrun_memcpy_01.c":42:52)
#loc37 = loc("CWE122_Heap_Based_Buffer_Overflow__char_type_overrun_memcpy_01.c":42:74)
#loc38 = loc("CWE122_Heap_Based_Buffer_Overflow__char_type_overrun_memcpy_01.c":42:9)
#loc39 = loc("CWE122_Heap_Based_Buffer_Overflow__char_type_overrun_memcpy_01.c":42:75)
#loc40 = loc("CWE122_Heap_Based_Buffer_Overflow__char_type_overrun_memcpy_01.c":43:89)
#loc41 = loc("CWE122_Heap_Based_Buffer_Overflow__char_type_overrun_memcpy_01.c":43:9)
#loc42 = loc("CWE122_Heap_Based_Buffer_Overflow__char_type_overrun_memcpy_01.c":43:36)
#loc43 = loc("CWE122_Heap_Based_Buffer_Overflow__char_type_overrun_memcpy_01.c":43:68)
#loc44 = loc("CWE122_Heap_Based_Buffer_Overflow__char_type_overrun_memcpy_01.c":43:70)
#loc45 = loc("CWE122_Heap_Based_Buffer_Overflow__char_type_overrun_memcpy_01.c":43:81)
#loc46 = loc("CWE122_Heap_Based_Buffer_Overflow__char_type_overrun_memcpy_01.c":43:84)
#loc47 = loc("CWE122_Heap_Based_Buffer_Overflow__char_type_overrun_memcpy_01.c":43:35)
#loc48 = loc("CWE122_Heap_Based_Buffer_Overflow__char_type_overrun_memcpy_01.c":43:25)
#loc49 = loc("CWE122_Heap_Based_Buffer_Overflow__char_type_overrun_memcpy_01.c":44:27)
#loc50 = loc("CWE122_Heap_Based_Buffer_Overflow__char_type_overrun_memcpy_01.c":44:43)
#loc51 = loc("CWE122_Heap_Based_Buffer_Overflow__char_type_overrun_memcpy_01.c":44:9)
#loc52 = loc("CWE122_Heap_Based_Buffer_Overflow__char_type_overrun_memcpy_01.c":45:27)
#loc53 = loc("CWE122_Heap_Based_Buffer_Overflow__char_type_overrun_memcpy_01.c":45:43)
#loc54 = loc("CWE122_Heap_Based_Buffer_Overflow__char_type_overrun_memcpy_01.c":45:9)
#loc55 = loc("CWE122_Heap_Based_Buffer_Overflow__char_type_overrun_memcpy_01.c":46:14)
#loc56 = loc("CWE122_Heap_Based_Buffer_Overflow__char_type_overrun_memcpy_01.c":46:9)
#loc57 = loc("CWE122_Heap_Based_Buffer_Overflow__char_type_overrun_memcpy_01.c":71:1)
#loc58 = loc("CWE122_Heap_Based_Buffer_Overflow__char_type_overrun_memcpy_01.c":74:1)
#loc59 = loc("CWE122_Heap_Based_Buffer_Overflow__char_type_overrun_memcpy_01.c":73:5)
#loc60 = loc("CWE122_Heap_Based_Buffer_Overflow__char_type_overrun_memcpy_01.c":73:11)
#loc61 = loc("/usr/include/stdlib.h":575:1)
#loc62 = loc("/usr/include/stdlib.h":575:41)
#loc63 = loc("/usr/include/time.h":76:1)
#loc64 = loc("/usr/include/time.h":76:38)
#loc65 = loc("CWE122_Heap_Based_Buffer_Overflow__char_type_overrun_memcpy_01.c":90:15)
#loc66 = loc("CWE122_Heap_Based_Buffer_Overflow__char_type_overrun_memcpy_01.c":92:15)
#loc67 = loc("CWE122_Heap_Based_Buffer_Overflow__char_type_overrun_memcpy_01.c":95:15)
#loc68 = loc("CWE122_Heap_Based_Buffer_Overflow__char_type_overrun_memcpy_01.c":97:15)
#loc69 = loc("CWE122_Heap_Based_Buffer_Overflow__char_type_overrun_memcpy_01.c":85:1)
#loc70 = loc("CWE122_Heap_Based_Buffer_Overflow__char_type_overrun_memcpy_01.c":100:1)
#loc75 = loc("CWE122_Heap_Based_Buffer_Overflow__char_type_overrun_memcpy_01.c":86:1)
#loc76 = loc("CWE122_Heap_Based_Buffer_Overflow__char_type_overrun_memcpy_01.c":88:27)
#loc77 = loc("CWE122_Heap_Based_Buffer_Overflow__char_type_overrun_memcpy_01.c":88:22)
#loc78 = loc("CWE122_Heap_Based_Buffer_Overflow__char_type_overrun_memcpy_01.c":88:5)
#loc79 = loc("CWE122_Heap_Based_Buffer_Overflow__char_type_overrun_memcpy_01.c":90:5)
#loc80 = loc("CWE122_Heap_Based_Buffer_Overflow__char_type_overrun_memcpy_01.c":91:5)
#loc81 = loc("CWE122_Heap_Based_Buffer_Overflow__char_type_overrun_memcpy_01.c":91:73)
#loc82 = loc("CWE122_Heap_Based_Buffer_Overflow__char_type_overrun_memcpy_01.c":92:5)
#loc83 = loc("CWE122_Heap_Based_Buffer_Overflow__char_type_overrun_memcpy_01.c":95:5)
#loc84 = loc("CWE122_Heap_Based_Buffer_Overflow__char_type_overrun_memcpy_01.c":96:5)
#loc85 = loc("CWE122_Heap_Based_Buffer_Overflow__char_type_overrun_memcpy_01.c":96:72)
#loc86 = loc("CWE122_Heap_Based_Buffer_Overflow__char_type_overrun_memcpy_01.c":97:5)
#loc87 = loc("CWE122_Heap_Based_Buffer_Overflow__char_type_overrun_memcpy_01.c":99:12)
#loc88 = loc("CWE122_Heap_Based_Buffer_Overflow__char_type_overrun_memcpy_01.c":99:5)
#loc89 = loc("CWE122_Heap_Based_Buffer_Overflow__char_type_overrun_memcpy_01.c":54:1)
#loc90 = loc("CWE122_Heap_Based_Buffer_Overflow__char_type_overrun_memcpy_01.c":69:1)
#loc91 = loc("CWE122_Heap_Based_Buffer_Overflow__char_type_overrun_memcpy_01.c":57:9)
#loc92 = loc("CWE122_Heap_Based_Buffer_Overflow__char_type_overrun_memcpy_01.c":57:72)
#loc93 = loc("CWE122_Heap_Based_Buffer_Overflow__char_type_overrun_memcpy_01.c":56:5)
#loc94 = loc("CWE122_Heap_Based_Buffer_Overflow__char_type_overrun_memcpy_01.c":68:5)
#loc95 = loc("CWE122_Heap_Based_Buffer_Overflow__char_type_overrun_memcpy_01.c":57:49)
#loc96 = loc("CWE122_Heap_Based_Buffer_Overflow__char_type_overrun_memcpy_01.c":57:56)
#loc97 = loc("CWE122_Heap_Based_Buffer_Overflow__char_type_overrun_memcpy_01.c":57:71)
#loc98 = loc("CWE122_Heap_Based_Buffer_Overflow__char_type_overrun_memcpy_01.c":58:9)
#loc99 = loc("CWE122_Heap_Based_Buffer_Overflow__char_type_overrun_memcpy_01.c":58:47)
#loc100 = loc("CWE122_Heap_Based_Buffer_Overflow__char_type_overrun_memcpy_01.c":58:13)
#loc101 = loc("CWE122_Heap_Based_Buffer_Overflow__char_type_overrun_memcpy_01.c":58:31)
#loc102 = loc("CWE122_Heap_Based_Buffer_Overflow__char_type_overrun_memcpy_01.c":58:37)
#loc103 = loc("CWE122_Heap_Based_Buffer_Overflow__char_type_overrun_memcpy_01.c":58:38)
#loc104 = loc("CWE122_Heap_Based_Buffer_Overflow__char_type_overrun_memcpy_01.c":58:44)
#loc105 = loc("CWE122_Heap_Based_Buffer_Overflow__char_type_overrun_memcpy_01.c":58:43)
#loc106 = loc("CWE122_Heap_Based_Buffer_Overflow__char_type_overrun_memcpy_01.c":59:46)
#loc107 = loc("CWE122_Heap_Based_Buffer_Overflow__char_type_overrun_memcpy_01.c":59:9)
#loc108 = loc("CWE122_Heap_Based_Buffer_Overflow__char_type_overrun_memcpy_01.c":61:27)
#loc109 = loc("CWE122_Heap_Based_Buffer_Overflow__char_type_overrun_memcpy_01.c":61:43)
#loc110 = loc("CWE122_Heap_Based_Buffer_Overflow__char_type_overrun_memcpy_01.c":61:9)
#loc111 = loc("CWE122_Heap_Based_Buffer_Overflow__char_type_overrun_memcpy_01.c":63:16)
#loc112 = loc("CWE122_Heap_Based_Buffer_Overflow__char_type_overrun_memcpy_01.c":63:32)
#loc113 = loc("CWE122_Heap_Based_Buffer_Overflow__char_type_overrun_memcpy_01.c":63:43)
#loc114 = loc("CWE122_Heap_Based_Buffer_Overflow__char_type_overrun_memcpy_01.c":63:52)
#loc115 = loc("CWE122_Heap_Based_Buffer_Overflow__char_type_overrun_memcpy_01.c":63:84)
#loc116 = loc("CWE122_Heap_Based_Buffer_Overflow__char_type_overrun_memcpy_01.c":63:9)
#loc117 = loc("CWE122_Heap_Based_Buffer_Overflow__char_type_overrun_memcpy_01.c":63:85)
#loc118 = loc("CWE122_Heap_Based_Buffer_Overflow__char_type_overrun_memcpy_01.c":64:89)
#loc119 = loc("CWE122_Heap_Based_Buffer_Overflow__char_type_overrun_memcpy_01.c":64:9)
#loc120 = loc("CWE122_Heap_Based_Buffer_Overflow__char_type_overrun_memcpy_01.c":64:36)
#loc121 = loc("CWE122_Heap_Based_Buffer_Overflow__char_type_overrun_memcpy_01.c":64:68)
#loc122 = loc("CWE122_Heap_Based_Buffer_Overflow__char_type_overrun_memcpy_01.c":64:70)
#loc123 = loc("CWE122_Heap_Based_Buffer_Overflow__char_type_overrun_memcpy_01.c":64:81)
#loc124 = loc("CWE122_Heap_Based_Buffer_Overflow__char_type_overrun_memcpy_01.c":64:84)
#loc125 = loc("CWE122_Heap_Based_Buffer_Overflow__char_type_overrun_memcpy_01.c":64:35)
#loc126 = loc("CWE122_Heap_Based_Buffer_Overflow__char_type_overrun_memcpy_01.c":64:25)
#loc127 = loc("CWE122_Heap_Based_Buffer_Overflow__char_type_overrun_memcpy_01.c":65:27)
#loc128 = loc("CWE122_Heap_Based_Buffer_Overflow__char_type_overrun_memcpy_01.c":65:43)
#loc129 = loc("CWE122_Heap_Based_Buffer_Overflow__char_type_overrun_memcpy_01.c":65:9)
#loc130 = loc("CWE122_Heap_Based_Buffer_Overflow__char_type_overrun_memcpy_01.c":66:27)
#loc131 = loc("CWE122_Heap_Based_Buffer_Overflow__char_type_overrun_memcpy_01.c":66:43)
#loc132 = loc("CWE122_Heap_Based_Buffer_Overflow__char_type_overrun_memcpy_01.c":66:9)
#loc133 = loc("CWE122_Heap_Based_Buffer_Overflow__char_type_overrun_memcpy_01.c":67:14)
#loc134 = loc("CWE122_Heap_Based_Buffer_Overflow__char_type_overrun_memcpy_01.c":67:9)
#loc135 = loc(fused[#loc1, #loc2])
#loc136 = loc(fused[#loc3, #loc4])
#loc137 = loc(fused[#loc6, #loc7])
#loc138 = loc(fused[#loc8, #loc9])
#loc139 = loc(fused[#loc10, #loc11])
#loc140 = loc(fused[#loc12, #loc13])
#loc141 = loc(fused[#loc14, #loc15])
#loc142 = loc(fused[#loc17, #loc18])
#loc143 = loc(fused[#loc16, #loc13])
#loc144 = loc(fused[#loc19, #loc20])
#loc145 = loc(fused[#loc21, #loc22])
#loc146 = loc(fused[#loc23, #loc20])
#loc147 = loc(fused[#loc27, #loc5])
#loc148 = loc(fused[#loc29, #loc30])
#loc149 = loc(fused[#loc32, #loc34])
#loc150 = loc(fused[#loc36, #loc37])
#loc151 = loc(fused[#loc38, #loc39])
#loc152 = loc(fused[#loc42, #loc43])
#loc153 = loc(fused[#loc44, #loc45])
#loc154 = loc(fused[#loc42, #loc45])
#loc155 = loc(fused[#loc47, #loc46])
#loc156 = loc(fused[#loc41, #loc40])
#loc157 = loc(fused[#loc49, #loc50])
#loc158 = loc(fused[#loc52, #loc53])
#loc159 = loc(fused[#loc57, #loc58])
#loc160 = loc(fused[#loc59, #loc60])
#loc161 = loc(fused[#loc61, #loc62])
#loc162 = loc(fused[#loc63, #loc64])
#loc163 = loc(fused[#loc69, #loc70])
#loc166 = loc(fused[#loc80, #loc81])
#loc167 = loc(fused[#loc84, #loc85])
#loc168 = loc(fused[#loc88, #loc87])
#loc169 = loc(fused[#loc89, #loc90])
#loc170 = loc(fused[#loc91, #loc92])
#loc171 = loc(fused[#loc93, #loc94])
#loc172 = loc(fused[#loc96, #loc97])
#loc173 = loc(fused[#loc95, #loc92])
#loc174 = loc(fused[#loc98, #loc99])
#loc175 = loc(fused[#loc100, #loc101])
#loc176 = loc(fused[#loc102, #loc99])
#loc177 = loc(fused[#loc107, #loc106])
#loc178 = loc(fused[#loc108, #loc109])
#loc179 = loc(fused[#loc111, #loc112])
#loc180 = loc(fused[#loc114, #loc115])
#loc181 = loc(fused[#loc116, #loc117])
#loc182 = loc(fused[#loc120, #loc121])
#loc183 = loc(fused[#loc122, #loc123])
#loc184 = loc(fused[#loc120, #loc123])
#loc185 = loc(fused[#loc125, #loc124])
#loc186 = loc(fused[#loc119, #loc118])
#loc187 = loc(fused[#loc127, #loc128])
#loc188 = loc(fused[#loc130, #loc131])
