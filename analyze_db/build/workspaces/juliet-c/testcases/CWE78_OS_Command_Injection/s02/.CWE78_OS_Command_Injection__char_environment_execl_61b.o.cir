!s32i = !cir.int<s, 32>
!s8i = !cir.int<s, 8>
!u64i = !cir.int<u, 64>
!void = !cir.void
#fn_attr = #cir<extra({nothrow = #cir.nothrow})>
#fn_attr1 = #cir<extra({inline = #cir.inline<no>, nothrow = #cir.nothrow, optnone = #cir.optnone, uwtable = #cir.uwtable<async>})>
#loc10 = loc("CWE78_OS_Command_Injection__char_environment_execl_61b.c":53:73)
#loc11 = loc("CWE78_OS_Command_Injection__char_environment_execl_61b.c":53:80)
#loc42 = loc("CWE78_OS_Command_Injection__char_environment_execl_61b.c":74:77)
#loc43 = loc("CWE78_OS_Command_Injection__char_environment_execl_61b.c":74:84)
#loc53 = loc(fused[#loc10, #loc11])
#loc65 = loc(fused[#loc42, #loc43])
module @"/workspaces/juliet-c/testcases/CWE78_OS_Command_Injection/s02/CWE78_OS_Command_Injection__char_environment_execl_61b.c" attributes {cir.lang = #cir.lang<c>, cir.sob = #cir.signed_overflow_behavior<undefined>, cir.triple = "x86_64-unknown-linux-gnu", cir.type_size_info = #cir.type_size_info<char = 8, int = 32, size_t = 64>, cir.uwtable = #cir.uwtable<async>, dlti.dl_spec = #dlti.dl_spec<f80 = dense<128> : vector<2xi64>, i128 = dense<128> : vector<2xi64>, i64 = dense<64> : vector<2xi64>, !llvm.ptr<272> = dense<64> : vector<4xi64>, !llvm.ptr<271> = dense<32> : vector<4xi64>, f128 = dense<128> : vector<2xi64>, f64 = dense<64> : vector<2xi64>, f16 = dense<16> : vector<2xi64>, i32 = dense<32> : vector<2xi64>, i8 = dense<8> : vector<2xi64>, !llvm.ptr<270> = dense<32> : vector<4xi64>, i16 = dense<16> : vector<2xi64>, !llvm.ptr = dense<64> : vector<4xi64>, i1 = dense<8> : vector<2xi64>, "dlti.stack_alignment" = 128 : i64, "dlti.endianness" = "little", "dlti.mangling_mode" = "e">} {
  cir.func private @strlen(!cir.ptr<!s8i>) -> !u64i extra(#fn_attr) loc(#loc49)
  cir.func private @getenv(!cir.ptr<!s8i>) -> !cir.ptr<!s8i> extra(#fn_attr) loc(#loc50)
  cir.global "private" constant cir_private dsolocal @".str" = #cir.const_array<"ADD\00" : !cir.array<!s8i x 4>> : !cir.array<!s8i x 4> {alignment = 1 : i64} loc(#loc5)
  cir.func private @strncat(!cir.ptr<!s8i>, !cir.ptr<!s8i>, !u64i) -> !cir.ptr<!s8i> extra(#fn_attr) loc(#loc51)
  cir.func @CWE78_OS_Command_Injection__char_environment_execl_61b_badSource(%arg0: !cir.ptr<!s8i> loc(fused[#loc10, #loc11])) -> !cir.ptr<!s8i> extra(#fn_attr1) {
    %0 = cir.alloca !cir.ptr<!s8i>, !cir.ptr<!cir.ptr<!s8i>>, ["data", init] {alignment = 8 : i64} loc(#loc53)
    %1 = cir.alloca !cir.ptr<!s8i>, !cir.ptr<!cir.ptr<!s8i>>, ["__retval"] {alignment = 8 : i64} loc(#loc9)
    cir.store %arg0, %0 : !cir.ptr<!s8i>, !cir.ptr<!cir.ptr<!s8i>> loc(#loc12)
    cir.scope {
      %4 = cir.alloca !u64i, !cir.ptr<!u64i>, ["dataLen", init] {alignment = 8 : i64} loc(#loc55)
      %5 = cir.alloca !cir.ptr<!s8i>, !cir.ptr<!cir.ptr<!s8i>>, ["environment", init] {alignment = 8 : i64} loc(#loc56)
      %6 = cir.get_global @strlen : !cir.ptr<!cir.func<(!cir.ptr<!s8i>) -> !u64i>> loc(#loc19)
      %7 = cir.load %0 : !cir.ptr<!cir.ptr<!s8i>>, !cir.ptr<!s8i> loc(#loc20)
      %8 = cir.call @strlen(%7) : (!cir.ptr<!s8i>) -> !u64i side_effect(pure) extra(#fn_attr) loc(#loc19)
      cir.store %8, %4 : !u64i, !cir.ptr<!u64i> loc(#loc55)
      %9 = cir.get_global @".str" : !cir.ptr<!cir.array<!s8i x 4>> loc(#loc5)
      %10 = cir.cast(array_to_ptrdecay, %9 : !cir.ptr<!cir.array<!s8i x 4>>), !cir.ptr<!s8i> loc(#loc5)
      %11 = cir.call @getenv(%10) : (!cir.ptr<!s8i>) -> !cir.ptr<!s8i> extra(#fn_attr) loc(#loc21)
      cir.store %11, %5 : !cir.ptr<!s8i>, !cir.ptr<!cir.ptr<!s8i>> loc(#loc56)
      cir.scope {
        %12 = cir.load %5 : !cir.ptr<!cir.ptr<!s8i>>, !cir.ptr<!s8i> loc(#loc24)
        %13 = cir.const #cir.ptr<null> : !cir.ptr<!void> loc(#loc25)
        %14 = cir.cast(bitcast, %13 : !cir.ptr<!void>), !cir.ptr<!s8i> loc(#loc25)
        %15 = cir.cmp(ne, %12, %14) : !cir.ptr<!s8i>, !cir.bool loc(#loc58)
        cir.if %15 {
          %16 = cir.get_global @strncat : !cir.ptr<!cir.func<(!cir.ptr<!s8i>, !cir.ptr<!s8i>, !u64i) -> !cir.ptr<!s8i>>> loc(#loc27)
          %17 = cir.load %0 : !cir.ptr<!cir.ptr<!s8i>>, !cir.ptr<!s8i> loc(#loc28)
          %18 = cir.load %4 : !cir.ptr<!u64i>, !u64i loc(#loc29)
          %19 = cir.ptr_stride(%17 : !cir.ptr<!s8i>, %18 : !u64i), !cir.ptr<!s8i> loc(#loc30)
          %20 = cir.load %5 : !cir.ptr<!cir.ptr<!s8i>>, !cir.ptr<!s8i> loc(#loc31)
          %21 = cir.const #cir.int<100> : !s32i loc(#loc32)
          %22 = cir.cast(integral, %21 : !s32i), !u64i loc(#loc32)
          %23 = cir.load %4 : !cir.ptr<!u64i>, !u64i loc(#loc33)
          %24 = cir.binop(sub, %22, %23) : !u64i loc(#loc60)
          %25 = cir.const #cir.int<1> : !s32i loc(#loc34)
          %26 = cir.cast(integral, %25 : !s32i), !u64i loc(#loc34)
          %27 = cir.binop(sub, %24, %26) : !u64i loc(#loc61)
          %28 = cir.call @strncat(%19, %20, %27) : (!cir.ptr<!s8i>, !cir.ptr<!s8i>, !u64i) -> !cir.ptr<!s8i> extra(#fn_attr) loc(#loc27)
        } loc(#loc59)
      } loc(#loc57)
    } loc(#loc54)
    %2 = cir.load %0 : !cir.ptr<!cir.ptr<!s8i>>, !cir.ptr<!s8i> loc(#loc35)
    cir.store %2, %1 : !cir.ptr<!s8i>, !cir.ptr<!cir.ptr<!s8i>> loc(#loc62)
    %3 = cir.load %1 : !cir.ptr<!cir.ptr<!s8i>>, !cir.ptr<!s8i> loc(#loc62)
    cir.return %3 : !cir.ptr<!s8i> loc(#loc62)
  } loc(#loc52)
  cir.func private @strcat(!cir.ptr<!s8i>, !cir.ptr<!s8i>) -> !cir.ptr<!s8i> extra(#fn_attr) loc(#loc63)
  cir.global "private" constant cir_private dsolocal @".str.1" = #cir.const_array<"*.*\00" : !cir.array<!s8i x 4>> : !cir.array<!s8i x 4> {alignment = 1 : i64} loc(#loc39)
  cir.func @CWE78_OS_Command_Injection__char_environment_execl_61b_goodG2BSource(%arg0: !cir.ptr<!s8i> loc(fused[#loc42, #loc43])) -> !cir.ptr<!s8i> extra(#fn_attr1) {
    %0 = cir.alloca !cir.ptr<!s8i>, !cir.ptr<!cir.ptr<!s8i>>, ["data", init] {alignment = 8 : i64} loc(#loc65)
    %1 = cir.alloca !cir.ptr<!s8i>, !cir.ptr<!cir.ptr<!s8i>>, ["__retval"] {alignment = 8 : i64} loc(#loc41)
    cir.store %arg0, %0 : !cir.ptr<!s8i>, !cir.ptr<!cir.ptr<!s8i>> loc(#loc44)
    %2 = cir.get_global @strcat : !cir.ptr<!cir.func<(!cir.ptr<!s8i>, !cir.ptr<!s8i>) -> !cir.ptr<!s8i>>> loc(#loc45)
    %3 = cir.load %0 : !cir.ptr<!cir.ptr<!s8i>>, !cir.ptr<!s8i> loc(#loc46)
    %4 = cir.get_global @".str.1" : !cir.ptr<!cir.array<!s8i x 4>> loc(#loc39)
    %5 = cir.cast(array_to_ptrdecay, %4 : !cir.ptr<!cir.array<!s8i x 4>>), !cir.ptr<!s8i> loc(#loc39)
    %6 = cir.call @strcat(%3, %5) : (!cir.ptr<!s8i>, !cir.ptr<!s8i>) -> !cir.ptr<!s8i> extra(#fn_attr) loc(#loc45)
    %7 = cir.load %0 : !cir.ptr<!cir.ptr<!s8i>>, !cir.ptr<!s8i> loc(#loc47)
    cir.store %7, %1 : !cir.ptr<!s8i>, !cir.ptr<!cir.ptr<!s8i>> loc(#loc66)
    %8 = cir.load %1 : !cir.ptr<!cir.ptr<!s8i>>, !cir.ptr<!s8i> loc(#loc66)
    cir.return %8 : !cir.ptr<!s8i> loc(#loc66)
  } loc(#loc64)
} loc(#loc)
#loc = loc("/workspaces/juliet-c/testcases/CWE78_OS_Command_Injection/s02/CWE78_OS_Command_Injection__char_environment_execl_61b.c":0:0)
#loc1 = loc("/usr/include/string.h":407:1)
#loc2 = loc("/usr/include/string.h":408:33)
#loc3 = loc("/usr/include/stdlib.h":773:1)
#loc4 = loc("/usr/include/stdlib.h":773:50)
#loc5 = loc("CWE78_OS_Command_Injection__char_environment_execl_61b.c":58:37)
#loc6 = loc("/usr/include/string.h":152:1)
#loc7 = loc("/usr/include/string.h":153:29)
#loc8 = loc("CWE78_OS_Command_Injection__char_environment_execl_61b.c":53:1)
#loc9 = loc("CWE78_OS_Command_Injection__char_environment_execl_61b.c":67:1)
#loc12 = loc("CWE78_OS_Command_Injection__char_environment_execl_61b.c":54:1)
#loc13 = loc("CWE78_OS_Command_Injection__char_environment_execl_61b.c":55:5)
#loc14 = loc("CWE78_OS_Command_Injection__char_environment_execl_61b.c":65:5)
#loc15 = loc("CWE78_OS_Command_Injection__char_environment_execl_61b.c":57:9)
#loc16 = loc("CWE78_OS_Command_Injection__char_environment_execl_61b.c":57:37)
#loc17 = loc("CWE78_OS_Command_Injection__char_environment_execl_61b.c":58:9)
#loc18 = loc("CWE78_OS_Command_Injection__char_environment_execl_61b.c":58:49)
#loc19 = loc("CWE78_OS_Command_Injection__char_environment_execl_61b.c":57:26)
#loc20 = loc("CWE78_OS_Command_Injection__char_environment_execl_61b.c":57:33)
#loc21 = loc("CWE78_OS_Command_Injection__char_environment_execl_61b.c":58:30)
#loc22 = loc("CWE78_OS_Command_Injection__char_environment_execl_61b.c":60:9)
#loc23 = loc("CWE78_OS_Command_Injection__char_environment_execl_61b.c":64:9)
#loc24 = loc("CWE78_OS_Command_Injection__char_environment_execl_61b.c":60:13)
#loc25 = loc("CWE78_OS_Command_Injection__char_environment_execl_61b.c":60:28)
#loc26 = loc("CWE78_OS_Command_Injection__char_environment_execl_61b.c":61:9)
#loc27 = loc("CWE78_OS_Command_Injection__char_environment_execl_61b.c":63:13)
#loc28 = loc("CWE78_OS_Command_Injection__char_environment_execl_61b.c":63:21)
#loc29 = loc("CWE78_OS_Command_Injection__char_environment_execl_61b.c":63:26)
#loc30 = loc("CWE78_OS_Command_Injection__char_environment_execl_61b.c":63:25)
#loc31 = loc("CWE78_OS_Command_Injection__char_environment_execl_61b.c":63:35)
#loc32 = loc("CWE78_OS_Command_Injection__char_environment_execl_61b.c":63:48)
#loc33 = loc("CWE78_OS_Command_Injection__char_environment_execl_61b.c":63:52)
#loc34 = loc("CWE78_OS_Command_Injection__char_environment_execl_61b.c":63:60)
#loc35 = loc("CWE78_OS_Command_Injection__char_environment_execl_61b.c":66:12)
#loc36 = loc("CWE78_OS_Command_Injection__char_environment_execl_61b.c":66:5)
#loc37 = loc("/usr/include/string.h":149:1)
#loc38 = loc("/usr/include/string.h":150:14)
#loc39 = loc("CWE78_OS_Command_Injection__char_environment_execl_61b.c":77:18)
#loc40 = loc("CWE78_OS_Command_Injection__char_environment_execl_61b.c":74:1)
#loc41 = loc("CWE78_OS_Command_Injection__char_environment_execl_61b.c":79:1)
#loc44 = loc("CWE78_OS_Command_Injection__char_environment_execl_61b.c":75:1)
#loc45 = loc("CWE78_OS_Command_Injection__char_environment_execl_61b.c":77:5)
#loc46 = loc("CWE78_OS_Command_Injection__char_environment_execl_61b.c":77:12)
#loc47 = loc("CWE78_OS_Command_Injection__char_environment_execl_61b.c":78:12)
#loc48 = loc("CWE78_OS_Command_Injection__char_environment_execl_61b.c":78:5)
#loc49 = loc(fused[#loc1, #loc2])
#loc50 = loc(fused[#loc3, #loc4])
#loc51 = loc(fused[#loc6, #loc7])
#loc52 = loc(fused[#loc8, #loc9])
#loc54 = loc(fused[#loc13, #loc14])
#loc55 = loc(fused[#loc15, #loc16])
#loc56 = loc(fused[#loc17, #loc18])
#loc57 = loc(fused[#loc22, #loc23])
#loc58 = loc(fused[#loc24, #loc25])
#loc59 = loc(fused[#loc26, #loc23])
#loc60 = loc(fused[#loc32, #loc33])
#loc61 = loc(fused[#loc32, #loc34])
#loc62 = loc(fused[#loc36, #loc35])
#loc63 = loc(fused[#loc37, #loc38])
#loc64 = loc(fused[#loc40, #loc41])
#loc66 = loc(fused[#loc48, #loc47])
