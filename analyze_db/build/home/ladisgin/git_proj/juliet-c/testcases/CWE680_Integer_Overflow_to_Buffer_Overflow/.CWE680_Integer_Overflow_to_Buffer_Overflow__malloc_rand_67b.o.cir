!s32i = !cir.int<s, 32>
!u64i = !cir.int<u, 64>
!void = !cir.void
#fn_attr = #cir<extra({nothrow = #cir.nothrow})>
#fn_attr1 = #cir<extra({inline = #cir.inline<no>, nothrow = #cir.nothrow, optnone = #cir.optnone})>
#loc11 = loc("CWE680_Integer_Overflow_to_Buffer_Overflow__malloc_rand_67b.c":26:74)
#loc12 = loc("CWE680_Integer_Overflow_to_Buffer_Overflow__malloc_rand_67b.c":26:144)
#loc59 = loc("CWE680_Integer_Overflow_to_Buffer_Overflow__malloc_rand_67b.c":50:78)
#loc60 = loc("CWE680_Integer_Overflow_to_Buffer_Overflow__malloc_rand_67b.c":50:148)
!ty__CWE680_Integer_Overflow_to_Buffer_Overflow__malloc_rand_67_structType = !cir.struct<struct "_CWE680_Integer_Overflow_to_Buffer_Overflow__malloc_rand_67_structType" {!s32i}>
#loc109 = loc(fused[#loc11, #loc12])
#loc128 = loc(fused[#loc59, #loc60])
module @"/home/ladisgin/git_proj/juliet-c/testcases/CWE680_Integer_Overflow_to_Buffer_Overflow/CWE680_Integer_Overflow_to_Buffer_Overflow__malloc_rand_67b.c" attributes {cir.lang = #cir.lang<c>, cir.sob = #cir.signed_overflow_behavior<undefined>, cir.triple = "x86_64-unknown-linux-gnu", dlti.dl_spec = #dlti.dl_spec<!llvm.ptr<270> = dense<32> : vector<4xi64>, f128 = dense<128> : vector<2xi64>, !llvm.ptr<271> = dense<32> : vector<4xi64>, !llvm.ptr<272> = dense<64> : vector<4xi64>, i64 = dense<64> : vector<2xi64>, i32 = dense<32> : vector<2xi64>, f16 = dense<16> : vector<2xi64>, f64 = dense<64> : vector<2xi64>, i1 = dense<8> : vector<2xi64>, !llvm.ptr = dense<64> : vector<4xi64>, i16 = dense<16> : vector<2xi64>, i8 = dense<8> : vector<2xi64>, i128 = dense<128> : vector<2xi64>, f80 = dense<128> : vector<2xi64>, "dlti.endianness" = "little", "dlti.stack_alignment" = 128 : i64>} {
  cir.func private @malloc(!u64i) -> !cir.ptr<!void> extra(#fn_attr) loc(#loc104)
  cir.func private @exit(!s32i) extra(#fn_attr) loc(#loc105)
  cir.func private @printIntLine(!s32i) loc(#loc106)
  cir.func private @free(!cir.ptr<!void>) extra(#fn_attr) loc(#loc107)
  cir.func @CWE680_Integer_Overflow_to_Buffer_Overflow__malloc_rand_67b_badSink(%arg0: !ty__CWE680_Integer_Overflow_to_Buffer_Overflow__malloc_rand_67_structType loc(fused[#loc11, #loc12])) extra(#fn_attr1) {
    %0 = cir.alloca !u64i, !cir.ptr<!u64i>, ["i"] {alignment = 8 : i64} loc(#loc110)
    %1 = cir.alloca !cir.ptr<!s32i>, !cir.ptr<!cir.ptr<!s32i>>, ["intPointer"] {alignment = 8 : i64} loc(#loc111)
    %2 = cir.alloca !ty__CWE680_Integer_Overflow_to_Buffer_Overflow__malloc_rand_67_structType, !cir.ptr<!ty__CWE680_Integer_Overflow_to_Buffer_Overflow__malloc_rand_67_structType>, ["myStruct", init] {alignment = 4 : i64} loc(#loc109)
    %3 = cir.alloca !s32i, !cir.ptr<!s32i>, ["data", init] {alignment = 4 : i64} loc(#loc112)
    cir.store %arg0, %2 : !ty__CWE680_Integer_Overflow_to_Buffer_Overflow__malloc_rand_67_structType, !cir.ptr<!ty__CWE680_Integer_Overflow_to_Buffer_Overflow__malloc_rand_67_structType> loc(#loc19)
    %4 = cir.get_member %2[0] {name = "structFirst"} : !cir.ptr<!ty__CWE680_Integer_Overflow_to_Buffer_Overflow__malloc_rand_67_structType> -> !cir.ptr<!s32i> loc(#loc20)
    %5 = cir.load %4 : !cir.ptr<!s32i>, !s32i loc(#loc18)
    cir.store %5, %3 : !s32i, !cir.ptr<!s32i> loc(#loc112)
    cir.br ^bb1 loc(#loc113)
  ^bb1:  // pred: ^bb0
    %6 = cir.get_global @malloc : !cir.ptr<!cir.func<!cir.ptr<!void> (!u64i)>> loc(#loc23)
    %7 = cir.load %3 : !cir.ptr<!s32i>, !s32i loc(#loc24)
    %8 = cir.cast(integral, %7 : !s32i), !u64i loc(#loc24)
    %9 = cir.const #cir.int<4> : !u64i loc(#loc114)
    %10 = cir.binop(mul, %8, %9) : !u64i loc(#loc115)
    %11 = cir.call @malloc(%10) : (!u64i) -> !cir.ptr<!void> extra(#fn_attr) loc(#loc23)
    %12 = cir.cast(bitcast, %11 : !cir.ptr<!void>), !cir.ptr<!s32i> loc(#loc116)
    cir.store %12, %1 : !cir.ptr<!s32i>, !cir.ptr<!cir.ptr<!s32i>> loc(#loc117)
    cir.br ^bb2 loc(#loc118)
  ^bb2:  // pred: ^bb1
    %13 = cir.load %1 : !cir.ptr<!cir.ptr<!s32i>>, !cir.ptr<!s32i> loc(#loc31)
    %14 = cir.const #cir.ptr<null> : !cir.ptr<!void> loc(#loc32)
    %15 = cir.cast(bitcast, %14 : !cir.ptr<!void>), !cir.ptr<!s32i> loc(#loc32)
    %16 = cir.cmp(eq, %13, %15) : !cir.ptr<!s32i>, !cir.bool loc(#loc119)
    cir.brcond %16 ^bb3, ^bb4 loc(#loc120)
  ^bb3:  // pred: ^bb2
    %17 = cir.get_global @exit : !cir.ptr<!cir.func<!void (!s32i)>> loc(#loc34)
    %18 = cir.const #cir.int<1> : !s32i loc(#loc35)
    %19 = cir.unary(minus, %18) : !s32i, !s32i loc(#loc36)
    cir.call @exit(%19) : (!s32i) -> () extra(#fn_attr) loc(#loc34)
    cir.br ^bb4 loc(#loc30)
  ^bb4:  // 2 preds: ^bb2, ^bb3
    cir.br ^bb5 loc(#loc30)
  ^bb5:  // pred: ^bb4
    cir.br ^bb6 loc(#loc121)
  ^bb6:  // pred: ^bb5
    %20 = cir.const #cir.int<0> : !s32i loc(#loc39)
    %21 = cir.cast(integral, %20 : !s32i), !u64i loc(#loc39)
    cir.store %21, %0 : !u64i, !cir.ptr<!u64i> loc(#loc122)
    cir.br ^bb7 loc(#loc121)
  ^bb7:  // 2 preds: ^bb6, ^bb11
    %22 = cir.load %0 : !cir.ptr<!u64i>, !u64i loc(#loc41)
    %23 = cir.load %3 : !cir.ptr<!s32i>, !s32i loc(#loc42)
    %24 = cir.cast(integral, %23 : !s32i), !u64i loc(#loc42)
    %25 = cir.cmp(lt, %22, %24) : !u64i, !cir.bool loc(#loc123)
    cir.brcond %25 ^bb8, ^bb12 loc(#loc43)
  ^bb8:  // pred: ^bb7
    cir.br ^bb9 loc(#loc124)
  ^bb9:  // pred: ^bb8
    %26 = cir.const #cir.int<0> : !s32i loc(#loc45)
    %27 = cir.load %1 : !cir.ptr<!cir.ptr<!s32i>>, !cir.ptr<!s32i> loc(#loc46)
    %28 = cir.load %0 : !cir.ptr<!u64i>, !u64i loc(#loc47)
    %29 = cir.ptr_stride(%27 : !cir.ptr<!s32i>, %28 : !u64i), !cir.ptr<!s32i> loc(#loc48)
    cir.store %26, %29 : !s32i, !cir.ptr<!s32i> loc(#loc125)
    cir.br ^bb10 loc(#loc38)
  ^bb10:  // pred: ^bb9
    cir.br ^bb11 loc(#loc38)
  ^bb11:  // pred: ^bb10
    %30 = cir.load %0 : !cir.ptr<!u64i>, !u64i loc(#loc49)
    %31 = cir.unary(inc, %30) : !u64i, !u64i loc(#loc50)
    cir.store %31, %0 : !u64i, !cir.ptr<!u64i> loc(#loc126)
    cir.br ^bb7 loc(#loc121)
  ^bb12:  // pred: ^bb7
    cir.br ^bb13 loc(#loc38)
  ^bb13:  // pred: ^bb12
    %32 = cir.load %1 : !cir.ptr<!cir.ptr<!s32i>>, !cir.ptr<!s32i> loc(#loc51)
    %33 = cir.const #cir.int<0> : !s32i loc(#loc52)
    %34 = cir.ptr_stride(%32 : !cir.ptr<!s32i>, %33 : !s32i), !cir.ptr<!s32i> loc(#loc53)
    %35 = cir.load %34 : !cir.ptr<!s32i>, !s32i loc(#loc51)
    cir.call @printIntLine(%35) : (!s32i) -> () loc(#loc54)
    %36 = cir.load %1 : !cir.ptr<!cir.ptr<!s32i>>, !cir.ptr<!s32i> loc(#loc55)
    %37 = cir.cast(bitcast, %36 : !cir.ptr<!s32i>), !cir.ptr<!void> loc(#loc55)
    cir.call @free(%37) : (!cir.ptr<!void>) -> () extra(#fn_attr) loc(#loc56)
    cir.br ^bb14 loc(#loc22)
  ^bb14:  // pred: ^bb13
    cir.return loc(#loc10)
  } loc(#loc108)
  cir.func @CWE680_Integer_Overflow_to_Buffer_Overflow__malloc_rand_67b_goodG2BSink(%arg0: !ty__CWE680_Integer_Overflow_to_Buffer_Overflow__malloc_rand_67_structType loc(fused[#loc59, #loc60])) extra(#fn_attr1) {
    %0 = cir.alloca !u64i, !cir.ptr<!u64i>, ["i"] {alignment = 8 : i64} loc(#loc129)
    %1 = cir.alloca !cir.ptr<!s32i>, !cir.ptr<!cir.ptr<!s32i>>, ["intPointer"] {alignment = 8 : i64} loc(#loc130)
    %2 = cir.alloca !ty__CWE680_Integer_Overflow_to_Buffer_Overflow__malloc_rand_67_structType, !cir.ptr<!ty__CWE680_Integer_Overflow_to_Buffer_Overflow__malloc_rand_67_structType>, ["myStruct", init] {alignment = 4 : i64} loc(#loc128)
    %3 = cir.alloca !s32i, !cir.ptr<!s32i>, ["data", init] {alignment = 4 : i64} loc(#loc131)
    cir.store %arg0, %2 : !ty__CWE680_Integer_Overflow_to_Buffer_Overflow__malloc_rand_67_structType, !cir.ptr<!ty__CWE680_Integer_Overflow_to_Buffer_Overflow__malloc_rand_67_structType> loc(#loc67)
    %4 = cir.get_member %2[0] {name = "structFirst"} : !cir.ptr<!ty__CWE680_Integer_Overflow_to_Buffer_Overflow__malloc_rand_67_structType> -> !cir.ptr<!s32i> loc(#loc20)
    %5 = cir.load %4 : !cir.ptr<!s32i>, !s32i loc(#loc66)
    cir.store %5, %3 : !s32i, !cir.ptr<!s32i> loc(#loc131)
    cir.br ^bb1 loc(#loc132)
  ^bb1:  // pred: ^bb0
    %6 = cir.get_global @malloc : !cir.ptr<!cir.func<!cir.ptr<!void> (!u64i)>> loc(#loc70)
    %7 = cir.load %3 : !cir.ptr<!s32i>, !s32i loc(#loc71)
    %8 = cir.cast(integral, %7 : !s32i), !u64i loc(#loc71)
    %9 = cir.const #cir.int<4> : !u64i loc(#loc133)
    %10 = cir.binop(mul, %8, %9) : !u64i loc(#loc134)
    %11 = cir.call @malloc(%10) : (!u64i) -> !cir.ptr<!void> extra(#fn_attr) loc(#loc70)
    %12 = cir.cast(bitcast, %11 : !cir.ptr<!void>), !cir.ptr<!s32i> loc(#loc135)
    cir.store %12, %1 : !cir.ptr<!s32i>, !cir.ptr<!cir.ptr<!s32i>> loc(#loc136)
    cir.br ^bb2 loc(#loc137)
  ^bb2:  // pred: ^bb1
    %13 = cir.load %1 : !cir.ptr<!cir.ptr<!s32i>>, !cir.ptr<!s32i> loc(#loc78)
    %14 = cir.const #cir.ptr<null> : !cir.ptr<!void> loc(#loc79)
    %15 = cir.cast(bitcast, %14 : !cir.ptr<!void>), !cir.ptr<!s32i> loc(#loc79)
    %16 = cir.cmp(eq, %13, %15) : !cir.ptr<!s32i>, !cir.bool loc(#loc138)
    cir.brcond %16 ^bb3, ^bb4 loc(#loc139)
  ^bb3:  // pred: ^bb2
    %17 = cir.get_global @exit : !cir.ptr<!cir.func<!void (!s32i)>> loc(#loc81)
    %18 = cir.const #cir.int<1> : !s32i loc(#loc82)
    %19 = cir.unary(minus, %18) : !s32i, !s32i loc(#loc83)
    cir.call @exit(%19) : (!s32i) -> () extra(#fn_attr) loc(#loc81)
    cir.br ^bb4 loc(#loc77)
  ^bb4:  // 2 preds: ^bb2, ^bb3
    cir.br ^bb5 loc(#loc77)
  ^bb5:  // pred: ^bb4
    cir.br ^bb6 loc(#loc140)
  ^bb6:  // pred: ^bb5
    %20 = cir.const #cir.int<0> : !s32i loc(#loc86)
    %21 = cir.cast(integral, %20 : !s32i), !u64i loc(#loc86)
    cir.store %21, %0 : !u64i, !cir.ptr<!u64i> loc(#loc141)
    cir.br ^bb7 loc(#loc140)
  ^bb7:  // 2 preds: ^bb6, ^bb11
    %22 = cir.load %0 : !cir.ptr<!u64i>, !u64i loc(#loc88)
    %23 = cir.load %3 : !cir.ptr<!s32i>, !s32i loc(#loc89)
    %24 = cir.cast(integral, %23 : !s32i), !u64i loc(#loc89)
    %25 = cir.cmp(lt, %22, %24) : !u64i, !cir.bool loc(#loc142)
    cir.brcond %25 ^bb8, ^bb12 loc(#loc90)
  ^bb8:  // pred: ^bb7
    cir.br ^bb9 loc(#loc143)
  ^bb9:  // pred: ^bb8
    %26 = cir.const #cir.int<0> : !s32i loc(#loc92)
    %27 = cir.load %1 : !cir.ptr<!cir.ptr<!s32i>>, !cir.ptr<!s32i> loc(#loc93)
    %28 = cir.load %0 : !cir.ptr<!u64i>, !u64i loc(#loc94)
    %29 = cir.ptr_stride(%27 : !cir.ptr<!s32i>, %28 : !u64i), !cir.ptr<!s32i> loc(#loc95)
    cir.store %26, %29 : !s32i, !cir.ptr<!s32i> loc(#loc144)
    cir.br ^bb10 loc(#loc85)
  ^bb10:  // pred: ^bb9
    cir.br ^bb11 loc(#loc85)
  ^bb11:  // pred: ^bb10
    %30 = cir.load %0 : !cir.ptr<!u64i>, !u64i loc(#loc96)
    %31 = cir.unary(inc, %30) : !u64i, !u64i loc(#loc97)
    cir.store %31, %0 : !u64i, !cir.ptr<!u64i> loc(#loc145)
    cir.br ^bb7 loc(#loc140)
  ^bb12:  // pred: ^bb7
    cir.br ^bb13 loc(#loc85)
  ^bb13:  // pred: ^bb12
    %32 = cir.load %1 : !cir.ptr<!cir.ptr<!s32i>>, !cir.ptr<!s32i> loc(#loc98)
    %33 = cir.const #cir.int<0> : !s32i loc(#loc99)
    %34 = cir.ptr_stride(%32 : !cir.ptr<!s32i>, %33 : !s32i), !cir.ptr<!s32i> loc(#loc100)
    %35 = cir.load %34 : !cir.ptr<!s32i>, !s32i loc(#loc98)
    cir.call @printIntLine(%35) : (!s32i) -> () loc(#loc101)
    %36 = cir.load %1 : !cir.ptr<!cir.ptr<!s32i>>, !cir.ptr<!s32i> loc(#loc102)
    %37 = cir.cast(bitcast, %36 : !cir.ptr<!s32i>), !cir.ptr<!void> loc(#loc102)
    cir.call @free(%37) : (!cir.ptr<!void>) -> () extra(#fn_attr) loc(#loc103)
    cir.br ^bb14 loc(#loc69)
  ^bb14:  // pred: ^bb13
    cir.return loc(#loc58)
  } loc(#loc127)
} loc(#loc)
#loc = loc("/home/ladisgin/git_proj/juliet-c/testcases/CWE680_Integer_Overflow_to_Buffer_Overflow/CWE680_Integer_Overflow_to_Buffer_Overflow__malloc_rand_67b.c":0:0)
#loc1 = loc("/usr/include/stdlib.h":672:1)
#loc2 = loc("/usr/include/stdlib.h":672:45)
#loc3 = loc("/usr/include/stdlib.h":756:1)
#loc4 = loc("/usr/include/stdlib.h":756:70)
#loc5 = loc("../../testcasesupport/std_testcase_io.h":18:1)
#loc6 = loc("../../testcasesupport/std_testcase_io.h":18:33)
#loc7 = loc("/usr/include/stdlib.h":687:1)
#loc8 = loc("/usr/include/stdlib.h":687:32)
#loc9 = loc("CWE680_Integer_Overflow_to_Buffer_Overflow__malloc_rand_67b.c":26:1)
#loc10 = loc("CWE680_Integer_Overflow_to_Buffer_Overflow__malloc_rand_67b.c":43:1)
#loc13 = loc("CWE680_Integer_Overflow_to_Buffer_Overflow__malloc_rand_67b.c":30:9)
#loc14 = loc("CWE680_Integer_Overflow_to_Buffer_Overflow__malloc_rand_67b.c":30:16)
#loc15 = loc("CWE680_Integer_Overflow_to_Buffer_Overflow__malloc_rand_67b.c":31:9)
#loc16 = loc("CWE680_Integer_Overflow_to_Buffer_Overflow__malloc_rand_67b.c":31:14)
#loc17 = loc("CWE680_Integer_Overflow_to_Buffer_Overflow__malloc_rand_67b.c":28:5)
#loc18 = loc("CWE680_Integer_Overflow_to_Buffer_Overflow__malloc_rand_67b.c":28:25)
#loc19 = loc("CWE680_Integer_Overflow_to_Buffer_Overflow__malloc_rand_67b.c":27:1)
#loc20 = loc("CWE680_Integer_Overflow_to_Buffer_Overflow__malloc_rand_67b.c":21:9)
#loc21 = loc("CWE680_Integer_Overflow_to_Buffer_Overflow__malloc_rand_67b.c":29:5)
#loc22 = loc("CWE680_Integer_Overflow_to_Buffer_Overflow__malloc_rand_67b.c":42:5)
#loc23 = loc("CWE680_Integer_Overflow_to_Buffer_Overflow__malloc_rand_67b.c":34:28)
#loc24 = loc("CWE680_Integer_Overflow_to_Buffer_Overflow__malloc_rand_67b.c":34:35)
#loc25 = loc("CWE680_Integer_Overflow_to_Buffer_Overflow__malloc_rand_67b.c":34:42)
#loc26 = loc("CWE680_Integer_Overflow_to_Buffer_Overflow__malloc_rand_67b.c":34:52)
#loc27 = loc("CWE680_Integer_Overflow_to_Buffer_Overflow__malloc_rand_67b.c":34:53)
#loc28 = loc("CWE680_Integer_Overflow_to_Buffer_Overflow__malloc_rand_67b.c":34:9)
#loc29 = loc("CWE680_Integer_Overflow_to_Buffer_Overflow__malloc_rand_67b.c":35:9)
#loc30 = loc("CWE680_Integer_Overflow_to_Buffer_Overflow__malloc_rand_67b.c":35:43)
#loc31 = loc("CWE680_Integer_Overflow_to_Buffer_Overflow__malloc_rand_67b.c":35:13)
#loc32 = loc("CWE680_Integer_Overflow_to_Buffer_Overflow__malloc_rand_67b.c":35:27)
#loc33 = loc("CWE680_Integer_Overflow_to_Buffer_Overflow__malloc_rand_67b.c":35:33)
#loc34 = loc("CWE680_Integer_Overflow_to_Buffer_Overflow__malloc_rand_67b.c":35:34)
#loc35 = loc("CWE680_Integer_Overflow_to_Buffer_Overflow__malloc_rand_67b.c":35:40)
#loc36 = loc("CWE680_Integer_Overflow_to_Buffer_Overflow__malloc_rand_67b.c":35:39)
#loc37 = loc("CWE680_Integer_Overflow_to_Buffer_Overflow__malloc_rand_67b.c":36:9)
#loc38 = loc("CWE680_Integer_Overflow_to_Buffer_Overflow__malloc_rand_67b.c":39:9)
#loc39 = loc("CWE680_Integer_Overflow_to_Buffer_Overflow__malloc_rand_67b.c":36:18)
#loc40 = loc("CWE680_Integer_Overflow_to_Buffer_Overflow__malloc_rand_67b.c":36:14)
#loc41 = loc("CWE680_Integer_Overflow_to_Buffer_Overflow__malloc_rand_67b.c":36:21)
#loc42 = loc("CWE680_Integer_Overflow_to_Buffer_Overflow__malloc_rand_67b.c":36:33)
#loc43 = loc("CWE680_Integer_Overflow_to_Buffer_Overflow__malloc_rand_67b.c":36:23)
#loc44 = loc("CWE680_Integer_Overflow_to_Buffer_Overflow__malloc_rand_67b.c":37:9)
#loc45 = loc("CWE680_Integer_Overflow_to_Buffer_Overflow__malloc_rand_67b.c":38:29)
#loc46 = loc("CWE680_Integer_Overflow_to_Buffer_Overflow__malloc_rand_67b.c":38:13)
#loc47 = loc("CWE680_Integer_Overflow_to_Buffer_Overflow__malloc_rand_67b.c":38:24)
#loc48 = loc("CWE680_Integer_Overflow_to_Buffer_Overflow__malloc_rand_67b.c":38:25)
#loc49 = loc("CWE680_Integer_Overflow_to_Buffer_Overflow__malloc_rand_67b.c":36:40)
#loc50 = loc("CWE680_Integer_Overflow_to_Buffer_Overflow__malloc_rand_67b.c":36:39)
#loc51 = loc("CWE680_Integer_Overflow_to_Buffer_Overflow__malloc_rand_67b.c":40:22)
#loc52 = loc("CWE680_Integer_Overflow_to_Buffer_Overflow__malloc_rand_67b.c":40:33)
#loc53 = loc("CWE680_Integer_Overflow_to_Buffer_Overflow__malloc_rand_67b.c":40:34)
#loc54 = loc("CWE680_Integer_Overflow_to_Buffer_Overflow__malloc_rand_67b.c":40:9)
#loc55 = loc("CWE680_Integer_Overflow_to_Buffer_Overflow__malloc_rand_67b.c":41:14)
#loc56 = loc("CWE680_Integer_Overflow_to_Buffer_Overflow__malloc_rand_67b.c":41:9)
#loc57 = loc("CWE680_Integer_Overflow_to_Buffer_Overflow__malloc_rand_67b.c":50:1)
#loc58 = loc("CWE680_Integer_Overflow_to_Buffer_Overflow__malloc_rand_67b.c":67:1)
#loc61 = loc("CWE680_Integer_Overflow_to_Buffer_Overflow__malloc_rand_67b.c":54:9)
#loc62 = loc("CWE680_Integer_Overflow_to_Buffer_Overflow__malloc_rand_67b.c":54:16)
#loc63 = loc("CWE680_Integer_Overflow_to_Buffer_Overflow__malloc_rand_67b.c":55:9)
#loc64 = loc("CWE680_Integer_Overflow_to_Buffer_Overflow__malloc_rand_67b.c":55:14)
#loc65 = loc("CWE680_Integer_Overflow_to_Buffer_Overflow__malloc_rand_67b.c":52:5)
#loc66 = loc("CWE680_Integer_Overflow_to_Buffer_Overflow__malloc_rand_67b.c":52:25)
#loc67 = loc("CWE680_Integer_Overflow_to_Buffer_Overflow__malloc_rand_67b.c":51:1)
#loc68 = loc("CWE680_Integer_Overflow_to_Buffer_Overflow__malloc_rand_67b.c":53:5)
#loc69 = loc("CWE680_Integer_Overflow_to_Buffer_Overflow__malloc_rand_67b.c":66:5)
#loc70 = loc("CWE680_Integer_Overflow_to_Buffer_Overflow__malloc_rand_67b.c":58:28)
#loc71 = loc("CWE680_Integer_Overflow_to_Buffer_Overflow__malloc_rand_67b.c":58:35)
#loc72 = loc("CWE680_Integer_Overflow_to_Buffer_Overflow__malloc_rand_67b.c":58:42)
#loc73 = loc("CWE680_Integer_Overflow_to_Buffer_Overflow__malloc_rand_67b.c":58:52)
#loc74 = loc("CWE680_Integer_Overflow_to_Buffer_Overflow__malloc_rand_67b.c":58:53)
#loc75 = loc("CWE680_Integer_Overflow_to_Buffer_Overflow__malloc_rand_67b.c":58:9)
#loc76 = loc("CWE680_Integer_Overflow_to_Buffer_Overflow__malloc_rand_67b.c":59:9)
#loc77 = loc("CWE680_Integer_Overflow_to_Buffer_Overflow__malloc_rand_67b.c":59:43)
#loc78 = loc("CWE680_Integer_Overflow_to_Buffer_Overflow__malloc_rand_67b.c":59:13)
#loc79 = loc("CWE680_Integer_Overflow_to_Buffer_Overflow__malloc_rand_67b.c":59:27)
#loc80 = loc("CWE680_Integer_Overflow_to_Buffer_Overflow__malloc_rand_67b.c":59:33)
#loc81 = loc("CWE680_Integer_Overflow_to_Buffer_Overflow__malloc_rand_67b.c":59:34)
#loc82 = loc("CWE680_Integer_Overflow_to_Buffer_Overflow__malloc_rand_67b.c":59:40)
#loc83 = loc("CWE680_Integer_Overflow_to_Buffer_Overflow__malloc_rand_67b.c":59:39)
#loc84 = loc("CWE680_Integer_Overflow_to_Buffer_Overflow__malloc_rand_67b.c":60:9)
#loc85 = loc("CWE680_Integer_Overflow_to_Buffer_Overflow__malloc_rand_67b.c":63:9)
#loc86 = loc("CWE680_Integer_Overflow_to_Buffer_Overflow__malloc_rand_67b.c":60:18)
#loc87 = loc("CWE680_Integer_Overflow_to_Buffer_Overflow__malloc_rand_67b.c":60:14)
#loc88 = loc("CWE680_Integer_Overflow_to_Buffer_Overflow__malloc_rand_67b.c":60:21)
#loc89 = loc("CWE680_Integer_Overflow_to_Buffer_Overflow__malloc_rand_67b.c":60:33)
#loc90 = loc("CWE680_Integer_Overflow_to_Buffer_Overflow__malloc_rand_67b.c":60:23)
#loc91 = loc("CWE680_Integer_Overflow_to_Buffer_Overflow__malloc_rand_67b.c":61:9)
#loc92 = loc("CWE680_Integer_Overflow_to_Buffer_Overflow__malloc_rand_67b.c":62:29)
#loc93 = loc("CWE680_Integer_Overflow_to_Buffer_Overflow__malloc_rand_67b.c":62:13)
#loc94 = loc("CWE680_Integer_Overflow_to_Buffer_Overflow__malloc_rand_67b.c":62:24)
#loc95 = loc("CWE680_Integer_Overflow_to_Buffer_Overflow__malloc_rand_67b.c":62:25)
#loc96 = loc("CWE680_Integer_Overflow_to_Buffer_Overflow__malloc_rand_67b.c":60:40)
#loc97 = loc("CWE680_Integer_Overflow_to_Buffer_Overflow__malloc_rand_67b.c":60:39)
#loc98 = loc("CWE680_Integer_Overflow_to_Buffer_Overflow__malloc_rand_67b.c":64:22)
#loc99 = loc("CWE680_Integer_Overflow_to_Buffer_Overflow__malloc_rand_67b.c":64:33)
#loc100 = loc("CWE680_Integer_Overflow_to_Buffer_Overflow__malloc_rand_67b.c":64:34)
#loc101 = loc("CWE680_Integer_Overflow_to_Buffer_Overflow__malloc_rand_67b.c":64:9)
#loc102 = loc("CWE680_Integer_Overflow_to_Buffer_Overflow__malloc_rand_67b.c":65:14)
#loc103 = loc("CWE680_Integer_Overflow_to_Buffer_Overflow__malloc_rand_67b.c":65:9)
#loc104 = loc(fused[#loc1, #loc2])
#loc105 = loc(fused[#loc3, #loc4])
#loc106 = loc(fused[#loc5, #loc6])
#loc107 = loc(fused[#loc7, #loc8])
#loc108 = loc(fused[#loc9, #loc10])
#loc110 = loc(fused[#loc13, #loc14])
#loc111 = loc(fused[#loc15, #loc16])
#loc112 = loc(fused[#loc17, #loc18])
#loc113 = loc(fused[#loc21, #loc22])
#loc114 = loc(fused[#loc25, #loc26])
#loc115 = loc(fused[#loc24, #loc26])
#loc116 = loc(fused[#loc23, #loc27])
#loc117 = loc(fused[#loc28, #loc27])
#loc118 = loc(fused[#loc29, #loc30])
#loc119 = loc(fused[#loc31, #loc32])
#loc120 = loc(fused[#loc33, #loc30])
#loc121 = loc(fused[#loc37, #loc38])
#loc122 = loc(fused[#loc40, #loc39])
#loc123 = loc(fused[#loc41, #loc42])
#loc124 = loc(fused[#loc44, #loc38])
#loc125 = loc(fused[#loc46, #loc45])
#loc126 = loc(fused[#loc50, #loc49])
#loc127 = loc(fused[#loc57, #loc58])
#loc129 = loc(fused[#loc61, #loc62])
#loc130 = loc(fused[#loc63, #loc64])
#loc131 = loc(fused[#loc65, #loc66])
#loc132 = loc(fused[#loc68, #loc69])
#loc133 = loc(fused[#loc72, #loc73])
#loc134 = loc(fused[#loc71, #loc73])
#loc135 = loc(fused[#loc70, #loc74])
#loc136 = loc(fused[#loc75, #loc74])
#loc137 = loc(fused[#loc76, #loc77])
#loc138 = loc(fused[#loc78, #loc79])
#loc139 = loc(fused[#loc80, #loc77])
#loc140 = loc(fused[#loc84, #loc85])
#loc141 = loc(fused[#loc87, #loc86])
#loc142 = loc(fused[#loc88, #loc89])
#loc143 = loc(fused[#loc91, #loc85])
#loc144 = loc(fused[#loc93, #loc92])
#loc145 = loc(fused[#loc97, #loc96])
