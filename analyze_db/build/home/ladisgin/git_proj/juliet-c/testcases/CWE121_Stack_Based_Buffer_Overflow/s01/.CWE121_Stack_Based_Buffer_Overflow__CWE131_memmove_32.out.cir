!s32i = !cir.int<s, 32>
!s64i = !cir.int<s, 64>
!s8i = !cir.int<s, 8>
!u32i = !cir.int<u, 32>
!u64i = !cir.int<u, 64>
!u8i = !cir.int<u, 8>
!void = !cir.void
#fn_attr = #cir<extra({inline = #cir.inline<no>, nothrow = #cir.nothrow, optnone = #cir.optnone})>
#fn_attr1 = #cir<extra({nothrow = #cir.nothrow})>
#loc59 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE131_memmove_32.c":86:10)
#loc60 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE131_memmove_32.c":86:14)
#loc61 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE131_memmove_32.c":86:20)
#loc62 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE131_memmove_32.c":86:32)
#loc140 = loc(fused[#loc59, #loc60])
#loc141 = loc(fused[#loc61, #loc62])
module @"/home/ladisgin/git_proj/juliet-c/testcases/CWE121_Stack_Based_Buffer_Overflow/s01/CWE121_Stack_Based_Buffer_Overflow__CWE131_memmove_32.c" attributes {cir.lang = #cir.lang<c>, cir.sob = #cir.signed_overflow_behavior<undefined>, cir.triple = "x86_64-unknown-linux-gnu", dlti.dl_spec = #dlti.dl_spec<i16 = dense<16> : vector<2xi64>, i8 = dense<8> : vector<2xi64>, i32 = dense<32> : vector<2xi64>, f16 = dense<16> : vector<2xi64>, !llvm.ptr<270> = dense<32> : vector<4xi64>, f64 = dense<64> : vector<2xi64>, f128 = dense<128> : vector<2xi64>, !llvm.ptr<271> = dense<32> : vector<4xi64>, !llvm.ptr<272> = dense<64> : vector<4xi64>, i64 = dense<64> : vector<2xi64>, i128 = dense<128> : vector<2xi64>, f80 = dense<128> : vector<2xi64>, !llvm.ptr = dense<64> : vector<4xi64>, i1 = dense<8> : vector<2xi64>, "dlti.endianness" = "little", "dlti.stack_alignment" = 128 : i64>} {
  cir.func private @printIntLine(!s32i) loc(#loc117)
  cir.func no_proto @CWE121_Stack_Based_Buffer_Overflow__CWE131_memmove_32_bad() extra(#fn_attr) {
    %0 = cir.alloca !cir.ptr<!s32i>, !cir.ptr<!cir.ptr<!s32i>>, ["data"] {alignment = 8 : i64} loc(#loc119)
    %1 = cir.alloca !cir.ptr<!cir.ptr<!s32i>>, !cir.ptr<!cir.ptr<!cir.ptr<!s32i>>>, ["dataPtr1", init] {alignment = 8 : i64} loc(#loc120)
    %2 = cir.alloca !cir.ptr<!cir.ptr<!s32i>>, !cir.ptr<!cir.ptr<!cir.ptr<!s32i>>>, ["dataPtr2", init] {alignment = 8 : i64} loc(#loc121)
    cir.store %0, %1 : !cir.ptr<!cir.ptr<!s32i>>, !cir.ptr<!cir.ptr<!cir.ptr<!s32i>>> loc(#loc120)
    cir.store %0, %2 : !cir.ptr<!cir.ptr<!s32i>>, !cir.ptr<!cir.ptr<!cir.ptr<!s32i>>> loc(#loc121)
    %3 = cir.const #cir.ptr<null> : !cir.ptr<!s32i> loc(#loc11)
    cir.store %3, %0 : !cir.ptr<!s32i>, !cir.ptr<!cir.ptr<!s32i>> loc(#loc122)
    cir.scope {
      %4 = cir.alloca !cir.ptr<!s32i>, !cir.ptr<!cir.ptr<!s32i>>, ["data", init] {alignment = 8 : i64} loc(#loc124)
      %5 = cir.load deref %1 : !cir.ptr<!cir.ptr<!cir.ptr<!s32i>>>, !cir.ptr<!cir.ptr<!s32i>> loc(#loc16)
      %6 = cir.load %5 : !cir.ptr<!cir.ptr<!s32i>>, !cir.ptr<!s32i> loc(#loc17)
      cir.store %6, %4 : !cir.ptr<!s32i>, !cir.ptr<!cir.ptr<!s32i>> loc(#loc124)
      %7 = cir.const #cir.int<10> : !s32i loc(#loc18)
      %8 = cir.cast(integral, %7 : !s32i), !u64i loc(#loc18)
      %9 = cir.alloca !u8i, !cir.ptr<!u8i>, %8 : !u64i, ["bi_alloca"] {alignment = 16 : i64} loc(#loc18)
      %10 = cir.cast(bitcast, %9 : !cir.ptr<!u8i>), !cir.ptr<!void> loc(#loc18)
      %11 = cir.cast(bitcast, %10 : !cir.ptr<!void>), !cir.ptr<!s32i> loc(#loc18)
      cir.store %11, %4 : !cir.ptr<!s32i>, !cir.ptr<!cir.ptr<!s32i>> loc(#loc125)
      %12 = cir.load %4 : !cir.ptr<!cir.ptr<!s32i>>, !cir.ptr<!s32i> loc(#loc20)
      %13 = cir.load deref %1 : !cir.ptr<!cir.ptr<!cir.ptr<!s32i>>>, !cir.ptr<!cir.ptr<!s32i>> loc(#loc21)
      cir.store %12, %13 : !cir.ptr<!s32i>, !cir.ptr<!cir.ptr<!s32i>> loc(#loc126)
    } loc(#loc123)
    cir.scope {
      %4 = cir.alloca !cir.ptr<!s32i>, !cir.ptr<!cir.ptr<!s32i>>, ["data", init] {alignment = 8 : i64} loc(#loc128)
      %5 = cir.load deref %2 : !cir.ptr<!cir.ptr<!cir.ptr<!s32i>>>, !cir.ptr<!cir.ptr<!s32i>> loc(#loc26)
      %6 = cir.load %5 : !cir.ptr<!cir.ptr<!s32i>>, !cir.ptr<!s32i> loc(#loc27)
      cir.store %6, %4 : !cir.ptr<!s32i>, !cir.ptr<!cir.ptr<!s32i>> loc(#loc128)
      cir.scope {
        %7 = cir.alloca !cir.array<!s32i x 10>, !cir.ptr<!cir.array<!s32i x 10>>, ["source"] {alignment = 16 : i64} loc(#loc130)
        %8 = cir.const #cir.zero : !cir.array<!s32i x 10> loc(#loc130)
        cir.store %8, %7 : !cir.array<!s32i x 10>, !cir.ptr<!cir.array<!s32i x 10>> loc(#loc130)
        %9 = cir.load %4 : !cir.ptr<!cir.ptr<!s32i>>, !cir.ptr<!s32i> loc(#loc32)
        %10 = cir.cast(bitcast, %9 : !cir.ptr<!s32i>), !cir.ptr<!void> loc(#loc32)
        %11 = cir.cast(array_to_ptrdecay, %7 : !cir.ptr<!cir.array<!s32i x 10>>), !cir.ptr<!s32i> loc(#loc33)
        %12 = cir.cast(bitcast, %11 : !cir.ptr<!s32i>), !cir.ptr<!void> loc(#loc33)
        %13 = cir.const #cir.int<10> : !s32i loc(#loc34)
        %14 = cir.cast(integral, %13 : !s32i), !u64i loc(#loc34)
        %15 = cir.const #cir.int<4> : !u64i loc(#loc131)
        %16 = cir.binop(mul, %14, %15) : !u64i loc(#loc132)
        cir.libc.memmove %16 bytes from %12 to %10 : !cir.ptr<!void>, !u64i loc(#loc133)
        %17 = cir.load %4 : !cir.ptr<!cir.ptr<!s32i>>, !cir.ptr<!s32i> loc(#loc39)
        %18 = cir.const #cir.int<0> : !s32i loc(#loc40)
        %19 = cir.ptr_stride(%17 : !cir.ptr<!s32i>, %18 : !s32i), !cir.ptr<!s32i> loc(#loc41)
        %20 = cir.load %19 : !cir.ptr<!s32i>, !s32i loc(#loc39)
        cir.call @printIntLine(%20) : (!s32i) -> () loc(#loc42)
      } loc(#loc129)
    } loc(#loc127)
    cir.return loc(#loc4)
  } loc(#loc118)
  cir.func no_proto @CWE121_Stack_Based_Buffer_Overflow__CWE131_memmove_32_good() extra(#fn_attr) {
    %0 = cir.get_global @goodG2B : !cir.ptr<!cir.func<!void ()>> loc(#loc135)
    cir.call %0() : (!cir.ptr<!cir.func<!void ()>>) -> () loc(#loc45)
    cir.return loc(#loc44)
  } loc(#loc134)
  cir.func private @srand(!u32i) extra(#fn_attr1) loc(#loc136)
  cir.func private @time(!cir.ptr<!s64i>) -> !s64i extra(#fn_attr1) loc(#loc137)
  cir.func private @printLine(!cir.ptr<!s8i>) loc(#loc138)
  cir.global "private" constant cir_private dsolocal @".str" = #cir.const_array<"Calling good()...\00" : !cir.array<!s8i x 18>> : !cir.array<!s8i x 18> {alignment = 1 : i64} loc(#loc53)
  cir.global "private" constant cir_private dsolocal @".str.1" = #cir.const_array<"Finished good()\00" : !cir.array<!s8i x 16>> : !cir.array<!s8i x 16> {alignment = 1 : i64} loc(#loc54)
  cir.global "private" constant cir_private dsolocal @".str.2" = #cir.const_array<"Calling bad()...\00" : !cir.array<!s8i x 17>> : !cir.array<!s8i x 17> {alignment = 1 : i64} loc(#loc55)
  cir.global "private" constant cir_private dsolocal @".str.3" = #cir.const_array<"Finished bad()\00" : !cir.array<!s8i x 15>> : !cir.array<!s8i x 15> {alignment = 1 : i64} loc(#loc56)
  cir.func @main(%arg0: !s32i loc(fused[#loc59, #loc60]), %arg1: !cir.ptr<!cir.ptr<!s8i>> loc(fused[#loc61, #loc62])) -> !s32i extra(#fn_attr) {
    %0 = cir.alloca !s32i, !cir.ptr<!s32i>, ["argc", init] {alignment = 4 : i64} loc(#loc140)
    %1 = cir.alloca !cir.ptr<!cir.ptr<!s8i>>, !cir.ptr<!cir.ptr<!cir.ptr<!s8i>>>, ["argv", init] {alignment = 8 : i64} loc(#loc141)
    %2 = cir.alloca !s32i, !cir.ptr<!s32i>, ["__retval"] {alignment = 4 : i64} loc(#loc58)
    cir.store %arg0, %0 : !s32i, !cir.ptr<!s32i> loc(#loc63)
    cir.store %arg1, %1 : !cir.ptr<!cir.ptr<!s8i>>, !cir.ptr<!cir.ptr<!cir.ptr<!s8i>>> loc(#loc63)
    %3 = cir.const #cir.ptr<null> : !cir.ptr<!s64i> loc(#loc64)
    %4 = cir.call @time(%3) : (!cir.ptr<!s64i>) -> !s64i extra(#fn_attr1) loc(#loc65)
    %5 = cir.cast(integral, %4 : !s64i), !u32i loc(#loc65)
    cir.call @srand(%5) : (!u32i) -> () extra(#fn_attr1) loc(#loc66)
    %6 = cir.get_global @".str" : !cir.ptr<!cir.array<!s8i x 18>> loc(#loc53)
    %7 = cir.cast(array_to_ptrdecay, %6 : !cir.ptr<!cir.array<!s8i x 18>>), !cir.ptr<!s8i> loc(#loc53)
    cir.call @printLine(%7) : (!cir.ptr<!s8i>) -> () loc(#loc67)
    %8 = cir.get_global @CWE121_Stack_Based_Buffer_Overflow__CWE131_memmove_32_good : !cir.ptr<!cir.func<!void ()>> loc(#loc142)
    cir.call @CWE121_Stack_Based_Buffer_Overflow__CWE131_memmove_32_good() : () -> () loc(#loc68)
    %9 = cir.get_global @".str.1" : !cir.ptr<!cir.array<!s8i x 16>> loc(#loc54)
    %10 = cir.cast(array_to_ptrdecay, %9 : !cir.ptr<!cir.array<!s8i x 16>>), !cir.ptr<!s8i> loc(#loc54)
    cir.call @printLine(%10) : (!cir.ptr<!s8i>) -> () loc(#loc70)
    %11 = cir.get_global @".str.2" : !cir.ptr<!cir.array<!s8i x 17>> loc(#loc55)
    %12 = cir.cast(array_to_ptrdecay, %11 : !cir.ptr<!cir.array<!s8i x 17>>), !cir.ptr<!s8i> loc(#loc55)
    cir.call @printLine(%12) : (!cir.ptr<!s8i>) -> () loc(#loc71)
    %13 = cir.get_global @CWE121_Stack_Based_Buffer_Overflow__CWE131_memmove_32_bad : !cir.ptr<!cir.func<!void ()>> loc(#loc143)
    cir.call @CWE121_Stack_Based_Buffer_Overflow__CWE131_memmove_32_bad() : () -> () loc(#loc72)
    %14 = cir.get_global @".str.3" : !cir.ptr<!cir.array<!s8i x 15>> loc(#loc56)
    %15 = cir.cast(array_to_ptrdecay, %14 : !cir.ptr<!cir.array<!s8i x 15>>), !cir.ptr<!s8i> loc(#loc56)
    cir.call @printLine(%15) : (!cir.ptr<!s8i>) -> () loc(#loc74)
    %16 = cir.const #cir.int<0> : !s32i loc(#loc75)
    cir.store %16, %2 : !s32i, !cir.ptr<!s32i> loc(#loc144)
    %17 = cir.load %2 : !cir.ptr<!s32i>, !s32i loc(#loc144)
    cir.return %17 : !s32i loc(#loc144)
  } loc(#loc139)
  cir.func no_proto internal private @goodG2B() extra(#fn_attr) {
    %0 = cir.alloca !cir.ptr<!s32i>, !cir.ptr<!cir.ptr<!s32i>>, ["data"] {alignment = 8 : i64} loc(#loc146)
    %1 = cir.alloca !cir.ptr<!cir.ptr<!s32i>>, !cir.ptr<!cir.ptr<!cir.ptr<!s32i>>>, ["dataPtr1", init] {alignment = 8 : i64} loc(#loc147)
    %2 = cir.alloca !cir.ptr<!cir.ptr<!s32i>>, !cir.ptr<!cir.ptr<!cir.ptr<!s32i>>>, ["dataPtr2", init] {alignment = 8 : i64} loc(#loc148)
    cir.store %0, %1 : !cir.ptr<!cir.ptr<!s32i>>, !cir.ptr<!cir.ptr<!cir.ptr<!s32i>>> loc(#loc147)
    cir.store %0, %2 : !cir.ptr<!cir.ptr<!s32i>>, !cir.ptr<!cir.ptr<!cir.ptr<!s32i>>> loc(#loc148)
    %3 = cir.const #cir.ptr<null> : !cir.ptr<!s32i> loc(#loc85)
    cir.store %3, %0 : !cir.ptr<!s32i>, !cir.ptr<!cir.ptr<!s32i>> loc(#loc149)
    cir.scope {
      %4 = cir.alloca !cir.ptr<!s32i>, !cir.ptr<!cir.ptr<!s32i>>, ["data", init] {alignment = 8 : i64} loc(#loc151)
      %5 = cir.load deref %1 : !cir.ptr<!cir.ptr<!cir.ptr<!s32i>>>, !cir.ptr<!cir.ptr<!s32i>> loc(#loc90)
      %6 = cir.load %5 : !cir.ptr<!cir.ptr<!s32i>>, !cir.ptr<!s32i> loc(#loc91)
      cir.store %6, %4 : !cir.ptr<!s32i>, !cir.ptr<!cir.ptr<!s32i>> loc(#loc151)
      %7 = cir.const #cir.int<10> : !s32i loc(#loc92)
      %8 = cir.cast(integral, %7 : !s32i), !u64i loc(#loc92)
      %9 = cir.const #cir.int<4> : !u64i loc(#loc92)
      %10 = cir.binop(mul, %8, %9) : !u64i loc(#loc92)
      %11 = cir.alloca !u8i, !cir.ptr<!u8i>, %10 : !u64i, ["bi_alloca"] {alignment = 16 : i64} loc(#loc92)
      %12 = cir.cast(bitcast, %11 : !cir.ptr<!u8i>), !cir.ptr<!void> loc(#loc92)
      %13 = cir.cast(bitcast, %12 : !cir.ptr<!void>), !cir.ptr<!s32i> loc(#loc92)
      cir.store %13, %4 : !cir.ptr<!s32i>, !cir.ptr<!cir.ptr<!s32i>> loc(#loc152)
      %14 = cir.load %4 : !cir.ptr<!cir.ptr<!s32i>>, !cir.ptr<!s32i> loc(#loc94)
      %15 = cir.load deref %1 : !cir.ptr<!cir.ptr<!cir.ptr<!s32i>>>, !cir.ptr<!cir.ptr<!s32i>> loc(#loc95)
      cir.store %14, %15 : !cir.ptr<!s32i>, !cir.ptr<!cir.ptr<!s32i>> loc(#loc153)
    } loc(#loc150)
    cir.scope {
      %4 = cir.alloca !cir.ptr<!s32i>, !cir.ptr<!cir.ptr<!s32i>>, ["data", init] {alignment = 8 : i64} loc(#loc155)
      %5 = cir.load deref %2 : !cir.ptr<!cir.ptr<!cir.ptr<!s32i>>>, !cir.ptr<!cir.ptr<!s32i>> loc(#loc100)
      %6 = cir.load %5 : !cir.ptr<!cir.ptr<!s32i>>, !cir.ptr<!s32i> loc(#loc101)
      cir.store %6, %4 : !cir.ptr<!s32i>, !cir.ptr<!cir.ptr<!s32i>> loc(#loc155)
      cir.scope {
        %7 = cir.alloca !cir.array<!s32i x 10>, !cir.ptr<!cir.array<!s32i x 10>>, ["source"] {alignment = 16 : i64} loc(#loc157)
        %8 = cir.const #cir.zero : !cir.array<!s32i x 10> loc(#loc157)
        cir.store %8, %7 : !cir.array<!s32i x 10>, !cir.ptr<!cir.array<!s32i x 10>> loc(#loc157)
        %9 = cir.load %4 : !cir.ptr<!cir.ptr<!s32i>>, !cir.ptr<!s32i> loc(#loc106)
        %10 = cir.cast(bitcast, %9 : !cir.ptr<!s32i>), !cir.ptr<!void> loc(#loc106)
        %11 = cir.cast(array_to_ptrdecay, %7 : !cir.ptr<!cir.array<!s32i x 10>>), !cir.ptr<!s32i> loc(#loc107)
        %12 = cir.cast(bitcast, %11 : !cir.ptr<!s32i>), !cir.ptr<!void> loc(#loc107)
        %13 = cir.const #cir.int<10> : !s32i loc(#loc108)
        %14 = cir.cast(integral, %13 : !s32i), !u64i loc(#loc108)
        %15 = cir.const #cir.int<4> : !u64i loc(#loc158)
        %16 = cir.binop(mul, %14, %15) : !u64i loc(#loc159)
        cir.libc.memmove %16 bytes from %12 to %10 : !cir.ptr<!void>, !u64i loc(#loc160)
        %17 = cir.load %4 : !cir.ptr<!cir.ptr<!s32i>>, !cir.ptr<!s32i> loc(#loc113)
        %18 = cir.const #cir.int<0> : !s32i loc(#loc114)
        %19 = cir.ptr_stride(%17 : !cir.ptr<!s32i>, %18 : !s32i), !cir.ptr<!s32i> loc(#loc115)
        %20 = cir.load %19 : !cir.ptr<!s32i>, !s32i loc(#loc113)
        cir.call @printIntLine(%20) : (!s32i) -> () loc(#loc116)
      } loc(#loc156)
    } loc(#loc154)
    cir.return loc(#loc78)
  } loc(#loc145)
} loc(#loc)
#loc = loc("/home/ladisgin/git_proj/juliet-c/testcases/CWE121_Stack_Based_Buffer_Overflow/s01/CWE121_Stack_Based_Buffer_Overflow__CWE131_memmove_32.c":0:0)
#loc1 = loc("../../../testcasesupport/std_testcase_io.h":18:1)
#loc2 = loc("../../../testcasesupport/std_testcase_io.h":18:33)
#loc3 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE131_memmove_32.c":21:1)
#loc4 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE131_memmove_32.c":42:1)
#loc5 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE131_memmove_32.c":23:5)
#loc6 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE131_memmove_32.c":23:11)
#loc7 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE131_memmove_32.c":24:5)
#loc8 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE131_memmove_32.c":24:24)
#loc9 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE131_memmove_32.c":25:5)
#loc10 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE131_memmove_32.c":25:24)
#loc11 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE131_memmove_32.c":26:12)
#loc12 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE131_memmove_32.c":26:5)
#loc13 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE131_memmove_32.c":27:5)
#loc14 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE131_memmove_32.c":32:5)
#loc15 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE131_memmove_32.c":28:9)
#loc16 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE131_memmove_32.c":28:23)
#loc17 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE131_memmove_32.c":28:22)
#loc18 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE131_memmove_32.c":30:23)
#loc19 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE131_memmove_32.c":30:9)
#loc20 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE131_memmove_32.c":31:21)
#loc21 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE131_memmove_32.c":31:10)
#loc22 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE131_memmove_32.c":31:9)
#loc23 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE131_memmove_32.c":33:5)
#loc24 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE131_memmove_32.c":41:5)
#loc25 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE131_memmove_32.c":34:9)
#loc26 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE131_memmove_32.c":34:23)
#loc27 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE131_memmove_32.c":34:22)
#loc28 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE131_memmove_32.c":35:9)
#loc29 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE131_memmove_32.c":40:9)
#loc30 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE131_memmove_32.c":36:13)
#loc31 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE131_memmove_32.c":36:32)
#loc32 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE131_memmove_32.c":38:21)
#loc33 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE131_memmove_32.c":38:27)
#loc34 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE131_memmove_32.c":38:35)
#loc35 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE131_memmove_32.c":38:38)
#loc36 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE131_memmove_32.c":38:48)
#loc37 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE131_memmove_32.c":38:13)
#loc38 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE131_memmove_32.c":38:49)
#loc39 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE131_memmove_32.c":39:26)
#loc40 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE131_memmove_32.c":39:31)
#loc41 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE131_memmove_32.c":39:32)
#loc42 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE131_memmove_32.c":39:13)
#loc43 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE131_memmove_32.c":72:1)
#loc44 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE131_memmove_32.c":75:1)
#loc45 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE131_memmove_32.c":74:5)
#loc46 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE131_memmove_32.c":74:13)
#loc47 = loc("/usr/include/stdlib.h":575:1)
#loc48 = loc("/usr/include/stdlib.h":575:41)
#loc49 = loc("/usr/include/time.h":76:1)
#loc50 = loc("/usr/include/time.h":76:38)
#loc51 = loc("../../../testcasesupport/std_testcase_io.h":14:1)
#loc52 = loc("../../../testcasesupport/std_testcase_io.h":14:33)
#loc53 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE131_memmove_32.c":91:15)
#loc54 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE131_memmove_32.c":93:15)
#loc55 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE131_memmove_32.c":96:15)
#loc56 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE131_memmove_32.c":98:15)
#loc57 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE131_memmove_32.c":86:1)
#loc58 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE131_memmove_32.c":101:1)
#loc63 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE131_memmove_32.c":87:1)
#loc64 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE131_memmove_32.c":89:27)
#loc65 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE131_memmove_32.c":89:22)
#loc66 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE131_memmove_32.c":89:5)
#loc67 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE131_memmove_32.c":91:5)
#loc68 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE131_memmove_32.c":92:5)
#loc69 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE131_memmove_32.c":92:64)
#loc70 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE131_memmove_32.c":93:5)
#loc71 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE131_memmove_32.c":96:5)
#loc72 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE131_memmove_32.c":97:5)
#loc73 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE131_memmove_32.c":97:63)
#loc74 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE131_memmove_32.c":98:5)
#loc75 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE131_memmove_32.c":100:12)
#loc76 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE131_memmove_32.c":100:5)
#loc77 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE131_memmove_32.c":49:1)
#loc78 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE131_memmove_32.c":70:1)
#loc79 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE131_memmove_32.c":51:5)
#loc80 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE131_memmove_32.c":51:11)
#loc81 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE131_memmove_32.c":52:5)
#loc82 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE131_memmove_32.c":52:24)
#loc83 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE131_memmove_32.c":53:5)
#loc84 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE131_memmove_32.c":53:24)
#loc85 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE131_memmove_32.c":54:12)
#loc86 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE131_memmove_32.c":54:5)
#loc87 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE131_memmove_32.c":55:5)
#loc88 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE131_memmove_32.c":60:5)
#loc89 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE131_memmove_32.c":56:9)
#loc90 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE131_memmove_32.c":56:23)
#loc91 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE131_memmove_32.c":56:22)
#loc92 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE131_memmove_32.c":58:23)
#loc93 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE131_memmove_32.c":58:9)
#loc94 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE131_memmove_32.c":59:21)
#loc95 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE131_memmove_32.c":59:10)
#loc96 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE131_memmove_32.c":59:9)
#loc97 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE131_memmove_32.c":61:5)
#loc98 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE131_memmove_32.c":69:5)
#loc99 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE131_memmove_32.c":62:9)
#loc100 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE131_memmove_32.c":62:23)
#loc101 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE131_memmove_32.c":62:22)
#loc102 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE131_memmove_32.c":63:9)
#loc103 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE131_memmove_32.c":68:9)
#loc104 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE131_memmove_32.c":64:13)
#loc105 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE131_memmove_32.c":64:32)
#loc106 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE131_memmove_32.c":66:21)
#loc107 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE131_memmove_32.c":66:27)
#loc108 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE131_memmove_32.c":66:35)
#loc109 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE131_memmove_32.c":66:38)
#loc110 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE131_memmove_32.c":66:48)
#loc111 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE131_memmove_32.c":66:13)
#loc112 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE131_memmove_32.c":66:49)
#loc113 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE131_memmove_32.c":67:26)
#loc114 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE131_memmove_32.c":67:31)
#loc115 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE131_memmove_32.c":67:32)
#loc116 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE131_memmove_32.c":67:13)
#loc117 = loc(fused[#loc1, #loc2])
#loc118 = loc(fused[#loc3, #loc4])
#loc119 = loc(fused[#loc5, #loc6])
#loc120 = loc(fused[#loc7, #loc8])
#loc121 = loc(fused[#loc9, #loc10])
#loc122 = loc(fused[#loc12, #loc11])
#loc123 = loc(fused[#loc13, #loc14])
#loc124 = loc(fused[#loc15, #loc16])
#loc125 = loc(fused[#loc19, #loc18])
#loc126 = loc(fused[#loc22, #loc20])
#loc127 = loc(fused[#loc23, #loc24])
#loc128 = loc(fused[#loc25, #loc26])
#loc129 = loc(fused[#loc28, #loc29])
#loc130 = loc(fused[#loc30, #loc31])
#loc131 = loc(fused[#loc35, #loc36])
#loc132 = loc(fused[#loc34, #loc36])
#loc133 = loc(fused[#loc37, #loc38])
#loc134 = loc(fused[#loc43, #loc44])
#loc135 = loc(fused[#loc45, #loc46])
#loc136 = loc(fused[#loc47, #loc48])
#loc137 = loc(fused[#loc49, #loc50])
#loc138 = loc(fused[#loc51, #loc52])
#loc139 = loc(fused[#loc57, #loc58])
#loc142 = loc(fused[#loc68, #loc69])
#loc143 = loc(fused[#loc72, #loc73])
#loc144 = loc(fused[#loc76, #loc75])
#loc145 = loc(fused[#loc77, #loc78])
#loc146 = loc(fused[#loc79, #loc80])
#loc147 = loc(fused[#loc81, #loc82])
#loc148 = loc(fused[#loc83, #loc84])
#loc149 = loc(fused[#loc86, #loc85])
#loc150 = loc(fused[#loc87, #loc88])
#loc151 = loc(fused[#loc89, #loc90])
#loc152 = loc(fused[#loc93, #loc92])
#loc153 = loc(fused[#loc96, #loc94])
#loc154 = loc(fused[#loc97, #loc98])
#loc155 = loc(fused[#loc99, #loc100])
#loc156 = loc(fused[#loc102, #loc103])
#loc157 = loc(fused[#loc104, #loc105])
#loc158 = loc(fused[#loc109, #loc110])
#loc159 = loc(fused[#loc108, #loc110])
#loc160 = loc(fused[#loc111, #loc112])
