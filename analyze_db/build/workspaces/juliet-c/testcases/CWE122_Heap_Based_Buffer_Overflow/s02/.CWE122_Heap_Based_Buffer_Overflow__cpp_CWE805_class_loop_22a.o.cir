!s32i = !cir.int<s, 32>
!u64i = !cir.int<u, 64>
!void = !cir.void
#fn_attr = #cir<extra({inline = #cir.inline<no>, nothrow = #cir.nothrow, optnone = #cir.optnone, uwtable = #cir.uwtable<async>})>
#fn_attr1 = #cir<extra({inline = #cir.inline<no>, optnone = #cir.optnone, uwtable = #cir.uwtable<async>})>
#fn_attr2 = #cir<extra({nothrow = #cir.nothrow})>
#loc5 = loc("../../../testcasesupport/std_testcase.h":61:7)
!ty_TwoIntsClass = !cir.record<class "TwoIntsClass" {!s32i, !s32i} #cir.record.decl.ast>
module @"/workspaces/juliet-c/testcases/CWE122_Heap_Based_Buffer_Overflow/s02/CWE122_Heap_Based_Buffer_Overflow__cpp_CWE805_class_loop_22a.cpp" attributes {cir.lang = #cir.lang<cxx>, cir.sob = #cir.signed_overflow_behavior<undefined>, cir.triple = "x86_64-unknown-linux-gnu", cir.type_size_info = #cir.type_size_info<char = 8, int = 32, size_t = 64>, cir.uwtable = #cir.uwtable<async>, dlti.dl_spec = #dlti.dl_spec<f80 = dense<128> : vector<2xi64>, i1 = dense<8> : vector<2xi64>, !llvm.ptr = dense<64> : vector<4xi64>, i16 = dense<16> : vector<2xi64>, i8 = dense<8> : vector<2xi64>, i32 = dense<32> : vector<2xi64>, f64 = dense<64> : vector<2xi64>, f128 = dense<128> : vector<2xi64>, f16 = dense<16> : vector<2xi64>, !llvm.ptr<272> = dense<64> : vector<4xi64>, !llvm.ptr<271> = dense<32> : vector<4xi64>, i64 = dense<64> : vector<2xi64>, !llvm.ptr<270> = dense<32> : vector<4xi64>, i128 = dense<128> : vector<2xi64>, "dlti.stack_alignment" = 128 : i64, "dlti.endianness" = "little", "dlti.mangling_mode" = "e">} {
  cir.global external dsolocal @_ZN59CWE122_Heap_Based_Buffer_Overflow__cpp_CWE805_class_loop_229badGlobalE = #cir.int<0> : !s32i {alignment = 4 : i64} loc(#loc202)
  cir.func private @_ZN59CWE122_Heap_Based_Buffer_Overflow__cpp_CWE805_class_loop_229badSourceEP12TwoIntsClass(!cir.ptr<!ty_TwoIntsClass>) -> !cir.ptr<!ty_TwoIntsClass> loc(#loc203)
  cir.func linkonce_odr @_ZN12TwoIntsClassaSERKS_(%arg0: !cir.ptr<!ty_TwoIntsClass> loc("../../../testcasesupport/std_testcase.h":61:7), %arg1: !cir.ptr<!ty_TwoIntsClass> loc("../../../testcasesupport/std_testcase.h":61:7)) -> !cir.ptr<!ty_TwoIntsClass> extra(#fn_attr) {
    %0 = cir.alloca !cir.ptr<!ty_TwoIntsClass>, !cir.ptr<!cir.ptr<!ty_TwoIntsClass>>, ["this", init] {alignment = 8 : i64} loc(#loc5)
    %1 = cir.alloca !cir.ptr<!ty_TwoIntsClass>, !cir.ptr<!cir.ptr<!ty_TwoIntsClass>>, ["", init, const] {alignment = 8 : i64} loc(#loc5)
    %2 = cir.alloca !cir.ptr<!ty_TwoIntsClass>, !cir.ptr<!cir.ptr<!ty_TwoIntsClass>>, ["__retval"] {alignment = 8 : i64} loc(#loc5)
    cir.store %arg0, %0 : !cir.ptr<!ty_TwoIntsClass>, !cir.ptr<!cir.ptr<!ty_TwoIntsClass>> loc(#loc5)
    cir.store %arg1, %1 : !cir.ptr<!ty_TwoIntsClass>, !cir.ptr<!cir.ptr<!ty_TwoIntsClass>> loc(#loc5)
    %3 = cir.load deref %0 : !cir.ptr<!cir.ptr<!ty_TwoIntsClass>>, !cir.ptr<!ty_TwoIntsClass> loc(#loc5)
    %4 = cir.get_member %3[0] {name = "intOne"} : !cir.ptr<!ty_TwoIntsClass> -> !cir.ptr<!s32i> loc(#loc6)
    %5 = cir.load %1 : !cir.ptr<!cir.ptr<!ty_TwoIntsClass>>, !cir.ptr<!ty_TwoIntsClass> loc(#loc5)
    %6 = cir.get_member %5[0] {name = "intOne"} : !cir.ptr<!ty_TwoIntsClass> -> !cir.ptr<!s32i> loc(#loc6)
    %7 = cir.const #cir.int<8> : !u64i loc(#loc5)
    %8 = cir.cast(bitcast, %4 : !cir.ptr<!s32i>), !cir.ptr<!void> loc(#loc6)
    %9 = cir.cast(bitcast, %6 : !cir.ptr<!s32i>), !cir.ptr<!void> loc(#loc6)
    cir.libc.memcpy %7 bytes from %9 to %8 : !u64i, !cir.ptr<!void> -> !cir.ptr<!void> loc(#loc5)
    cir.store %3, %2 : !cir.ptr<!ty_TwoIntsClass>, !cir.ptr<!cir.ptr<!ty_TwoIntsClass>> loc(#loc5)
    %10 = cir.load %2 : !cir.ptr<!cir.ptr<!ty_TwoIntsClass>>, !cir.ptr<!ty_TwoIntsClass> loc(#loc5)
    cir.return %10 : !cir.ptr<!ty_TwoIntsClass> loc(#loc5)
  } loc(#loc5)
  cir.func private @printIntLine(!s32i) loc(#loc204)
  cir.func @_ZN59CWE122_Heap_Based_Buffer_Overflow__cpp_CWE805_class_loop_223badEv() extra(#fn_attr1) {
    %0 = cir.alloca !cir.ptr<!ty_TwoIntsClass>, !cir.ptr<!cir.ptr<!ty_TwoIntsClass>>, ["data"] {alignment = 8 : i64} loc(#loc206)
    %1 = cir.const #cir.ptr<null> : !cir.ptr<!ty_TwoIntsClass> loc(#loc13)
    cir.store %1, %0 : !cir.ptr<!ty_TwoIntsClass>, !cir.ptr<!cir.ptr<!ty_TwoIntsClass>> loc(#loc207)
    %2 = cir.const #cir.int<1> : !s32i loc(#loc15)
    %3 = cir.get_global @_ZN59CWE122_Heap_Based_Buffer_Overflow__cpp_CWE805_class_loop_229badGlobalE : !cir.ptr<!s32i> loc(#loc202)
    cir.store %2, %3 : !s32i, !cir.ptr<!s32i> loc(#loc208)
    %4 = cir.load %0 : !cir.ptr<!cir.ptr<!ty_TwoIntsClass>>, !cir.ptr<!ty_TwoIntsClass> loc(#loc17)
    %5 = cir.call @_ZN59CWE122_Heap_Based_Buffer_Overflow__cpp_CWE805_class_loop_229badSourceEP12TwoIntsClass(%4) : (!cir.ptr<!ty_TwoIntsClass>) -> !cir.ptr<!ty_TwoIntsClass> loc(#loc18)
    cir.store %5, %0 : !cir.ptr<!ty_TwoIntsClass>, !cir.ptr<!cir.ptr<!ty_TwoIntsClass>> loc(#loc209)
    cir.scope {
      %6 = cir.alloca !cir.array<!ty_TwoIntsClass x 100>, !cir.ptr<!cir.array<!ty_TwoIntsClass x 100>>, ["source"] {alignment = 16 : i64} loc(#loc211)
      cir.scope {
        %7 = cir.alloca !u64i, !cir.ptr<!u64i>, ["i"] {alignment = 8 : i64} loc(#loc213)
        cir.scope {
          %8 = cir.const #cir.int<0> : !s32i loc(#loc31)
          %9 = cir.cast(integral, %8 : !s32i), !u64i loc(#loc31)
          cir.store %9, %7 : !u64i, !cir.ptr<!u64i> loc(#loc215)
          cir.for : cond {
            %10 = cir.load %7 : !cir.ptr<!u64i>, !u64i loc(#loc33)
            %11 = cir.const #cir.int<100> : !s32i loc(#loc34)
            %12 = cir.cast(integral, %11 : !s32i), !u64i loc(#loc34)
            %13 = cir.cmp(lt, %10, %12) : !u64i, !cir.bool loc(#loc216)
            cir.condition(%13) loc(#loc216)
          } body {
            cir.scope {
              %10 = cir.const #cir.int<0> : !s32i loc(#loc36)
              %11 = cir.load %7 : !cir.ptr<!u64i>, !u64i loc(#loc37)
              %12 = cir.cast(array_to_ptrdecay, %6 : !cir.ptr<!cir.array<!ty_TwoIntsClass x 100>>), !cir.ptr<!ty_TwoIntsClass> loc(#loc38)
              %13 = cir.ptr_stride(%12 : !cir.ptr<!ty_TwoIntsClass>, %11 : !u64i), !cir.ptr<!ty_TwoIntsClass> loc(#loc38)
              %14 = cir.get_member %13[0] {name = "intOne"} : !cir.ptr<!ty_TwoIntsClass> -> !cir.ptr<!s32i> loc(#loc6)
              cir.store %10, %14 : !s32i, !cir.ptr<!s32i> loc(#loc218)
              %15 = cir.const #cir.int<0> : !s32i loc(#loc39)
              %16 = cir.load %7 : !cir.ptr<!u64i>, !u64i loc(#loc40)
              %17 = cir.cast(array_to_ptrdecay, %6 : !cir.ptr<!cir.array<!ty_TwoIntsClass x 100>>), !cir.ptr<!ty_TwoIntsClass> loc(#loc41)
              %18 = cir.ptr_stride(%17 : !cir.ptr<!ty_TwoIntsClass>, %16 : !u64i), !cir.ptr<!ty_TwoIntsClass> loc(#loc41)
              %19 = cir.get_member %18[1] {name = "intTwo"} : !cir.ptr<!ty_TwoIntsClass> -> !cir.ptr<!s32i> loc(#loc42)
              cir.store %15, %19 : !s32i, !cir.ptr<!s32i> loc(#loc219)
            } loc(#loc217)
            cir.yield loc(#loc30)
          } step {
            %10 = cir.load %7 : !cir.ptr<!u64i>, !u64i loc(#loc43)
            %11 = cir.unary(inc, %10) : !u64i, !u64i loc(#loc44)
            cir.store %11, %7 : !u64i, !cir.ptr<!u64i> loc(#loc220)
            cir.yield loc(#loc214)
          } loc(#loc214)
        } loc(#loc214)
      } loc(#loc212)
      cir.scope {
        %7 = cir.alloca !u64i, !cir.ptr<!u64i>, ["i"] {alignment = 8 : i64} loc(#loc222)
        cir.scope {
          %14 = cir.const #cir.int<0> : !s32i loc(#loc51)
          %15 = cir.cast(integral, %14 : !s32i), !u64i loc(#loc51)
          cir.store %15, %7 : !u64i, !cir.ptr<!u64i> loc(#loc224)
          cir.for : cond {
            %16 = cir.load %7 : !cir.ptr<!u64i>, !u64i loc(#loc53)
            %17 = cir.const #cir.int<100> : !s32i loc(#loc54)
            %18 = cir.cast(integral, %17 : !s32i), !u64i loc(#loc54)
            %19 = cir.cmp(lt, %16, %18) : !u64i, !cir.bool loc(#loc225)
            cir.condition(%19) loc(#loc225)
          } body {
            cir.scope {
              %16 = cir.load %7 : !cir.ptr<!u64i>, !u64i loc(#loc56)
              %17 = cir.cast(array_to_ptrdecay, %6 : !cir.ptr<!cir.array<!ty_TwoIntsClass x 100>>), !cir.ptr<!ty_TwoIntsClass> loc(#loc57)
              %18 = cir.ptr_stride(%17 : !cir.ptr<!ty_TwoIntsClass>, %16 : !u64i), !cir.ptr<!ty_TwoIntsClass> loc(#loc57)
              %19 = cir.load %0 : !cir.ptr<!cir.ptr<!ty_TwoIntsClass>>, !cir.ptr<!ty_TwoIntsClass> loc(#loc58)
              %20 = cir.load %7 : !cir.ptr<!u64i>, !u64i loc(#loc59)
              %21 = cir.ptr_stride(%19 : !cir.ptr<!ty_TwoIntsClass>, %20 : !u64i), !cir.ptr<!ty_TwoIntsClass> loc(#loc60)
              %22 = cir.call @_ZN12TwoIntsClassaSERKS_(%21, %18) : (!cir.ptr<!ty_TwoIntsClass>, !cir.ptr<!ty_TwoIntsClass>) -> !cir.ptr<!ty_TwoIntsClass> extra(#fn_attr2) loc(#loc61)
            } loc(#loc226)
            cir.yield loc(#loc50)
          } step {
            %16 = cir.load %7 : !cir.ptr<!u64i>, !u64i loc(#loc62)
            %17 = cir.unary(inc, %16) : !u64i, !u64i loc(#loc63)
            cir.store %17, %7 : !u64i, !cir.ptr<!u64i> loc(#loc227)
            cir.yield loc(#loc223)
          } loc(#loc223)
        } loc(#loc223)
        %8 = cir.load %0 : !cir.ptr<!cir.ptr<!ty_TwoIntsClass>>, !cir.ptr<!ty_TwoIntsClass> loc(#loc64)
        %9 = cir.const #cir.int<0> : !s32i loc(#loc65)
        %10 = cir.ptr_stride(%8 : !cir.ptr<!ty_TwoIntsClass>, %9 : !s32i), !cir.ptr<!ty_TwoIntsClass> loc(#loc66)
        %11 = cir.get_member %10[0] {name = "intOne"} : !cir.ptr<!ty_TwoIntsClass> -> !cir.ptr<!s32i> loc(#loc6)
        %12 = cir.load %11 : !cir.ptr<!s32i>, !s32i loc(#loc67)
        cir.call @printIntLine(%12) : (!s32i) -> () loc(#loc68)
        %13 = cir.load %0 : !cir.ptr<!cir.ptr<!ty_TwoIntsClass>>, !cir.ptr<!ty_TwoIntsClass> loc(#loc69)
        cir.delete.array %13 : <!ty_TwoIntsClass> loc(#loc69)
      } loc(#loc221)
    } loc(#loc210)
    cir.return loc(#loc10)
  } loc(#loc205)
  cir.global external dsolocal @_ZN59CWE122_Heap_Based_Buffer_Overflow__cpp_CWE805_class_loop_2214goodG2B1GlobalE = #cir.int<0> : !s32i {alignment = 4 : i64} loc(#loc228)
  cir.global external dsolocal @_ZN59CWE122_Heap_Based_Buffer_Overflow__cpp_CWE805_class_loop_2214goodG2B2GlobalE = #cir.int<0> : !s32i {alignment = 4 : i64} loc(#loc229)
  cir.func private @_ZN59CWE122_Heap_Based_Buffer_Overflow__cpp_CWE805_class_loop_2214goodG2B1SourceEP12TwoIntsClass(!cir.ptr<!ty_TwoIntsClass>) -> !cir.ptr<!ty_TwoIntsClass> loc(#loc230)
  cir.func internal private @_ZN59CWE122_Heap_Based_Buffer_Overflow__cpp_CWE805_class_loop_22L8goodG2B1Ev() extra(#fn_attr1) {
    %0 = cir.alloca !cir.ptr<!ty_TwoIntsClass>, !cir.ptr<!cir.ptr<!ty_TwoIntsClass>>, ["data"] {alignment = 8 : i64} loc(#loc232)
    %1 = cir.const #cir.ptr<null> : !cir.ptr<!ty_TwoIntsClass> loc(#loc80)
    cir.store %1, %0 : !cir.ptr<!ty_TwoIntsClass>, !cir.ptr<!cir.ptr<!ty_TwoIntsClass>> loc(#loc233)
    %2 = cir.const #cir.int<0> : !s32i loc(#loc82)
    %3 = cir.get_global @_ZN59CWE122_Heap_Based_Buffer_Overflow__cpp_CWE805_class_loop_2214goodG2B1GlobalE : !cir.ptr<!s32i> loc(#loc228)
    cir.store %2, %3 : !s32i, !cir.ptr<!s32i> loc(#loc234)
    %4 = cir.load %0 : !cir.ptr<!cir.ptr<!ty_TwoIntsClass>>, !cir.ptr<!ty_TwoIntsClass> loc(#loc84)
    %5 = cir.call @_ZN59CWE122_Heap_Based_Buffer_Overflow__cpp_CWE805_class_loop_2214goodG2B1SourceEP12TwoIntsClass(%4) : (!cir.ptr<!ty_TwoIntsClass>) -> !cir.ptr<!ty_TwoIntsClass> loc(#loc85)
    cir.store %5, %0 : !cir.ptr<!ty_TwoIntsClass>, !cir.ptr<!cir.ptr<!ty_TwoIntsClass>> loc(#loc235)
    cir.scope {
      %6 = cir.alloca !cir.array<!ty_TwoIntsClass x 100>, !cir.ptr<!cir.array<!ty_TwoIntsClass x 100>>, ["source"] {alignment = 16 : i64} loc(#loc237)
      cir.scope {
        %7 = cir.alloca !u64i, !cir.ptr<!u64i>, ["i"] {alignment = 8 : i64} loc(#loc239)
        cir.scope {
          %8 = cir.const #cir.int<0> : !s32i loc(#loc98)
          %9 = cir.cast(integral, %8 : !s32i), !u64i loc(#loc98)
          cir.store %9, %7 : !u64i, !cir.ptr<!u64i> loc(#loc241)
          cir.for : cond {
            %10 = cir.load %7 : !cir.ptr<!u64i>, !u64i loc(#loc100)
            %11 = cir.const #cir.int<100> : !s32i loc(#loc101)
            %12 = cir.cast(integral, %11 : !s32i), !u64i loc(#loc101)
            %13 = cir.cmp(lt, %10, %12) : !u64i, !cir.bool loc(#loc242)
            cir.condition(%13) loc(#loc242)
          } body {
            cir.scope {
              %10 = cir.const #cir.int<0> : !s32i loc(#loc103)
              %11 = cir.load %7 : !cir.ptr<!u64i>, !u64i loc(#loc104)
              %12 = cir.cast(array_to_ptrdecay, %6 : !cir.ptr<!cir.array<!ty_TwoIntsClass x 100>>), !cir.ptr<!ty_TwoIntsClass> loc(#loc105)
              %13 = cir.ptr_stride(%12 : !cir.ptr<!ty_TwoIntsClass>, %11 : !u64i), !cir.ptr<!ty_TwoIntsClass> loc(#loc105)
              %14 = cir.get_member %13[0] {name = "intOne"} : !cir.ptr<!ty_TwoIntsClass> -> !cir.ptr<!s32i> loc(#loc6)
              cir.store %10, %14 : !s32i, !cir.ptr<!s32i> loc(#loc244)
              %15 = cir.const #cir.int<0> : !s32i loc(#loc106)
              %16 = cir.load %7 : !cir.ptr<!u64i>, !u64i loc(#loc107)
              %17 = cir.cast(array_to_ptrdecay, %6 : !cir.ptr<!cir.array<!ty_TwoIntsClass x 100>>), !cir.ptr<!ty_TwoIntsClass> loc(#loc108)
              %18 = cir.ptr_stride(%17 : !cir.ptr<!ty_TwoIntsClass>, %16 : !u64i), !cir.ptr<!ty_TwoIntsClass> loc(#loc108)
              %19 = cir.get_member %18[1] {name = "intTwo"} : !cir.ptr<!ty_TwoIntsClass> -> !cir.ptr<!s32i> loc(#loc42)
              cir.store %15, %19 : !s32i, !cir.ptr<!s32i> loc(#loc245)
            } loc(#loc243)
            cir.yield loc(#loc97)
          } step {
            %10 = cir.load %7 : !cir.ptr<!u64i>, !u64i loc(#loc109)
            %11 = cir.unary(inc, %10) : !u64i, !u64i loc(#loc110)
            cir.store %11, %7 : !u64i, !cir.ptr<!u64i> loc(#loc246)
            cir.yield loc(#loc240)
          } loc(#loc240)
        } loc(#loc240)
      } loc(#loc238)
      cir.scope {
        %7 = cir.alloca !u64i, !cir.ptr<!u64i>, ["i"] {alignment = 8 : i64} loc(#loc248)
        cir.scope {
          %14 = cir.const #cir.int<0> : !s32i loc(#loc117)
          %15 = cir.cast(integral, %14 : !s32i), !u64i loc(#loc117)
          cir.store %15, %7 : !u64i, !cir.ptr<!u64i> loc(#loc250)
          cir.for : cond {
            %16 = cir.load %7 : !cir.ptr<!u64i>, !u64i loc(#loc119)
            %17 = cir.const #cir.int<100> : !s32i loc(#loc120)
            %18 = cir.cast(integral, %17 : !s32i), !u64i loc(#loc120)
            %19 = cir.cmp(lt, %16, %18) : !u64i, !cir.bool loc(#loc251)
            cir.condition(%19) loc(#loc251)
          } body {
            cir.scope {
              %16 = cir.load %7 : !cir.ptr<!u64i>, !u64i loc(#loc122)
              %17 = cir.cast(array_to_ptrdecay, %6 : !cir.ptr<!cir.array<!ty_TwoIntsClass x 100>>), !cir.ptr<!ty_TwoIntsClass> loc(#loc123)
              %18 = cir.ptr_stride(%17 : !cir.ptr<!ty_TwoIntsClass>, %16 : !u64i), !cir.ptr<!ty_TwoIntsClass> loc(#loc123)
              %19 = cir.load %0 : !cir.ptr<!cir.ptr<!ty_TwoIntsClass>>, !cir.ptr<!ty_TwoIntsClass> loc(#loc124)
              %20 = cir.load %7 : !cir.ptr<!u64i>, !u64i loc(#loc125)
              %21 = cir.ptr_stride(%19 : !cir.ptr<!ty_TwoIntsClass>, %20 : !u64i), !cir.ptr<!ty_TwoIntsClass> loc(#loc126)
              %22 = cir.call @_ZN12TwoIntsClassaSERKS_(%21, %18) : (!cir.ptr<!ty_TwoIntsClass>, !cir.ptr<!ty_TwoIntsClass>) -> !cir.ptr<!ty_TwoIntsClass> extra(#fn_attr2) loc(#loc127)
            } loc(#loc252)
            cir.yield loc(#loc116)
          } step {
            %16 = cir.load %7 : !cir.ptr<!u64i>, !u64i loc(#loc128)
            %17 = cir.unary(inc, %16) : !u64i, !u64i loc(#loc129)
            cir.store %17, %7 : !u64i, !cir.ptr<!u64i> loc(#loc253)
            cir.yield loc(#loc249)
          } loc(#loc249)
        } loc(#loc249)
        %8 = cir.load %0 : !cir.ptr<!cir.ptr<!ty_TwoIntsClass>>, !cir.ptr<!ty_TwoIntsClass> loc(#loc130)
        %9 = cir.const #cir.int<0> : !s32i loc(#loc131)
        %10 = cir.ptr_stride(%8 : !cir.ptr<!ty_TwoIntsClass>, %9 : !s32i), !cir.ptr<!ty_TwoIntsClass> loc(#loc132)
        %11 = cir.get_member %10[0] {name = "intOne"} : !cir.ptr<!ty_TwoIntsClass> -> !cir.ptr<!s32i> loc(#loc6)
        %12 = cir.load %11 : !cir.ptr<!s32i>, !s32i loc(#loc133)
        cir.call @printIntLine(%12) : (!s32i) -> () loc(#loc134)
        %13 = cir.load %0 : !cir.ptr<!cir.ptr<!ty_TwoIntsClass>>, !cir.ptr<!ty_TwoIntsClass> loc(#loc135)
        cir.delete.array %13 : <!ty_TwoIntsClass> loc(#loc135)
      } loc(#loc247)
    } loc(#loc236)
    cir.return loc(#loc77)
  } loc(#loc231)
  cir.func private @_ZN59CWE122_Heap_Based_Buffer_Overflow__cpp_CWE805_class_loop_2214goodG2B2SourceEP12TwoIntsClass(!cir.ptr<!ty_TwoIntsClass>) -> !cir.ptr<!ty_TwoIntsClass> loc(#loc254)
  cir.func internal private @_ZN59CWE122_Heap_Based_Buffer_Overflow__cpp_CWE805_class_loop_22L8goodG2B2Ev() extra(#fn_attr1) {
    %0 = cir.alloca !cir.ptr<!ty_TwoIntsClass>, !cir.ptr<!cir.ptr<!ty_TwoIntsClass>>, ["data"] {alignment = 8 : i64} loc(#loc256)
    %1 = cir.const #cir.ptr<null> : !cir.ptr<!ty_TwoIntsClass> loc(#loc142)
    cir.store %1, %0 : !cir.ptr<!ty_TwoIntsClass>, !cir.ptr<!cir.ptr<!ty_TwoIntsClass>> loc(#loc257)
    %2 = cir.const #cir.int<1> : !s32i loc(#loc144)
    %3 = cir.get_global @_ZN59CWE122_Heap_Based_Buffer_Overflow__cpp_CWE805_class_loop_2214goodG2B2GlobalE : !cir.ptr<!s32i> loc(#loc229)
    cir.store %2, %3 : !s32i, !cir.ptr<!s32i> loc(#loc258)
    %4 = cir.load %0 : !cir.ptr<!cir.ptr<!ty_TwoIntsClass>>, !cir.ptr<!ty_TwoIntsClass> loc(#loc146)
    %5 = cir.call @_ZN59CWE122_Heap_Based_Buffer_Overflow__cpp_CWE805_class_loop_2214goodG2B2SourceEP12TwoIntsClass(%4) : (!cir.ptr<!ty_TwoIntsClass>) -> !cir.ptr<!ty_TwoIntsClass> loc(#loc147)
    cir.store %5, %0 : !cir.ptr<!ty_TwoIntsClass>, !cir.ptr<!cir.ptr<!ty_TwoIntsClass>> loc(#loc259)
    cir.scope {
      %6 = cir.alloca !cir.array<!ty_TwoIntsClass x 100>, !cir.ptr<!cir.array<!ty_TwoIntsClass x 100>>, ["source"] {alignment = 16 : i64} loc(#loc261)
      cir.scope {
        %7 = cir.alloca !u64i, !cir.ptr<!u64i>, ["i"] {alignment = 8 : i64} loc(#loc263)
        cir.scope {
          %8 = cir.const #cir.int<0> : !s32i loc(#loc160)
          %9 = cir.cast(integral, %8 : !s32i), !u64i loc(#loc160)
          cir.store %9, %7 : !u64i, !cir.ptr<!u64i> loc(#loc265)
          cir.for : cond {
            %10 = cir.load %7 : !cir.ptr<!u64i>, !u64i loc(#loc162)
            %11 = cir.const #cir.int<100> : !s32i loc(#loc163)
            %12 = cir.cast(integral, %11 : !s32i), !u64i loc(#loc163)
            %13 = cir.cmp(lt, %10, %12) : !u64i, !cir.bool loc(#loc266)
            cir.condition(%13) loc(#loc266)
          } body {
            cir.scope {
              %10 = cir.const #cir.int<0> : !s32i loc(#loc165)
              %11 = cir.load %7 : !cir.ptr<!u64i>, !u64i loc(#loc166)
              %12 = cir.cast(array_to_ptrdecay, %6 : !cir.ptr<!cir.array<!ty_TwoIntsClass x 100>>), !cir.ptr<!ty_TwoIntsClass> loc(#loc167)
              %13 = cir.ptr_stride(%12 : !cir.ptr<!ty_TwoIntsClass>, %11 : !u64i), !cir.ptr<!ty_TwoIntsClass> loc(#loc167)
              %14 = cir.get_member %13[0] {name = "intOne"} : !cir.ptr<!ty_TwoIntsClass> -> !cir.ptr<!s32i> loc(#loc6)
              cir.store %10, %14 : !s32i, !cir.ptr<!s32i> loc(#loc268)
              %15 = cir.const #cir.int<0> : !s32i loc(#loc168)
              %16 = cir.load %7 : !cir.ptr<!u64i>, !u64i loc(#loc169)
              %17 = cir.cast(array_to_ptrdecay, %6 : !cir.ptr<!cir.array<!ty_TwoIntsClass x 100>>), !cir.ptr<!ty_TwoIntsClass> loc(#loc170)
              %18 = cir.ptr_stride(%17 : !cir.ptr<!ty_TwoIntsClass>, %16 : !u64i), !cir.ptr<!ty_TwoIntsClass> loc(#loc170)
              %19 = cir.get_member %18[1] {name = "intTwo"} : !cir.ptr<!ty_TwoIntsClass> -> !cir.ptr<!s32i> loc(#loc42)
              cir.store %15, %19 : !s32i, !cir.ptr<!s32i> loc(#loc269)
            } loc(#loc267)
            cir.yield loc(#loc159)
          } step {
            %10 = cir.load %7 : !cir.ptr<!u64i>, !u64i loc(#loc171)
            %11 = cir.unary(inc, %10) : !u64i, !u64i loc(#loc172)
            cir.store %11, %7 : !u64i, !cir.ptr<!u64i> loc(#loc270)
            cir.yield loc(#loc264)
          } loc(#loc264)
        } loc(#loc264)
      } loc(#loc262)
      cir.scope {
        %7 = cir.alloca !u64i, !cir.ptr<!u64i>, ["i"] {alignment = 8 : i64} loc(#loc272)
        cir.scope {
          %14 = cir.const #cir.int<0> : !s32i loc(#loc179)
          %15 = cir.cast(integral, %14 : !s32i), !u64i loc(#loc179)
          cir.store %15, %7 : !u64i, !cir.ptr<!u64i> loc(#loc274)
          cir.for : cond {
            %16 = cir.load %7 : !cir.ptr<!u64i>, !u64i loc(#loc181)
            %17 = cir.const #cir.int<100> : !s32i loc(#loc182)
            %18 = cir.cast(integral, %17 : !s32i), !u64i loc(#loc182)
            %19 = cir.cmp(lt, %16, %18) : !u64i, !cir.bool loc(#loc275)
            cir.condition(%19) loc(#loc275)
          } body {
            cir.scope {
              %16 = cir.load %7 : !cir.ptr<!u64i>, !u64i loc(#loc184)
              %17 = cir.cast(array_to_ptrdecay, %6 : !cir.ptr<!cir.array<!ty_TwoIntsClass x 100>>), !cir.ptr<!ty_TwoIntsClass> loc(#loc185)
              %18 = cir.ptr_stride(%17 : !cir.ptr<!ty_TwoIntsClass>, %16 : !u64i), !cir.ptr<!ty_TwoIntsClass> loc(#loc185)
              %19 = cir.load %0 : !cir.ptr<!cir.ptr<!ty_TwoIntsClass>>, !cir.ptr<!ty_TwoIntsClass> loc(#loc186)
              %20 = cir.load %7 : !cir.ptr<!u64i>, !u64i loc(#loc187)
              %21 = cir.ptr_stride(%19 : !cir.ptr<!ty_TwoIntsClass>, %20 : !u64i), !cir.ptr<!ty_TwoIntsClass> loc(#loc188)
              %22 = cir.call @_ZN12TwoIntsClassaSERKS_(%21, %18) : (!cir.ptr<!ty_TwoIntsClass>, !cir.ptr<!ty_TwoIntsClass>) -> !cir.ptr<!ty_TwoIntsClass> extra(#fn_attr2) loc(#loc189)
            } loc(#loc276)
            cir.yield loc(#loc178)
          } step {
            %16 = cir.load %7 : !cir.ptr<!u64i>, !u64i loc(#loc190)
            %17 = cir.unary(inc, %16) : !u64i, !u64i loc(#loc191)
            cir.store %17, %7 : !u64i, !cir.ptr<!u64i> loc(#loc277)
            cir.yield loc(#loc273)
          } loc(#loc273)
        } loc(#loc273)
        %8 = cir.load %0 : !cir.ptr<!cir.ptr<!ty_TwoIntsClass>>, !cir.ptr<!ty_TwoIntsClass> loc(#loc192)
        %9 = cir.const #cir.int<0> : !s32i loc(#loc193)
        %10 = cir.ptr_stride(%8 : !cir.ptr<!ty_TwoIntsClass>, %9 : !s32i), !cir.ptr<!ty_TwoIntsClass> loc(#loc194)
        %11 = cir.get_member %10[0] {name = "intOne"} : !cir.ptr<!ty_TwoIntsClass> -> !cir.ptr<!s32i> loc(#loc6)
        %12 = cir.load %11 : !cir.ptr<!s32i>, !s32i loc(#loc195)
        cir.call @printIntLine(%12) : (!s32i) -> () loc(#loc196)
        %13 = cir.load %0 : !cir.ptr<!cir.ptr<!ty_TwoIntsClass>>, !cir.ptr<!ty_TwoIntsClass> loc(#loc197)
        cir.delete.array %13 : <!ty_TwoIntsClass> loc(#loc197)
      } loc(#loc271)
    } loc(#loc260)
    cir.return loc(#loc139)
  } loc(#loc255)
  cir.func @_ZN59CWE122_Heap_Based_Buffer_Overflow__cpp_CWE805_class_loop_224goodEv() extra(#fn_attr1) {
    cir.call @_ZN59CWE122_Heap_Based_Buffer_Overflow__cpp_CWE805_class_loop_22L8goodG2B1Ev() : () -> () loc(#loc200)
    cir.call @_ZN59CWE122_Heap_Based_Buffer_Overflow__cpp_CWE805_class_loop_22L8goodG2B2Ev() : () -> () loc(#loc201)
    cir.return loc(#loc199)
  } loc(#loc278)
} loc(#loc)
#loc = loc("/workspaces/juliet-c/testcases/CWE122_Heap_Based_Buffer_Overflow/s02/CWE122_Heap_Based_Buffer_Overflow__cpp_CWE805_class_loop_22a.cpp":0:0)
#loc1 = loc("CWE122_Heap_Based_Buffer_Overflow__cpp_CWE805_class_loop_22a.cpp":26:1)
#loc2 = loc("CWE122_Heap_Based_Buffer_Overflow__cpp_CWE805_class_loop_22a.cpp":26:17)
#loc3 = loc("CWE122_Heap_Based_Buffer_Overflow__cpp_CWE805_class_loop_22a.cpp":28:1)
#loc4 = loc("CWE122_Heap_Based_Buffer_Overflow__cpp_CWE805_class_loop_22a.cpp":28:45)
#loc6 = loc("../../../testcasesupport/std_testcase.h":64:13)
#loc7 = loc("../../../testcasesupport/std_testcase_io.h":18:1)
#loc8 = loc("../../../testcasesupport/std_testcase_io.h":18:33)
#loc9 = loc("CWE122_Heap_Based_Buffer_Overflow__cpp_CWE805_class_loop_22a.cpp":30:1)
#loc10 = loc("CWE122_Heap_Based_Buffer_Overflow__cpp_CWE805_class_loop_22a.cpp":59:1)
#loc11 = loc("CWE122_Heap_Based_Buffer_Overflow__cpp_CWE805_class_loop_22a.cpp":32:5)
#loc12 = loc("CWE122_Heap_Based_Buffer_Overflow__cpp_CWE805_class_loop_22a.cpp":32:20)
#loc13 = loc("CWE122_Heap_Based_Buffer_Overflow__cpp_CWE805_class_loop_22a.cpp":33:12)
#loc14 = loc("CWE122_Heap_Based_Buffer_Overflow__cpp_CWE805_class_loop_22a.cpp":33:5)
#loc15 = loc("CWE122_Heap_Based_Buffer_Overflow__cpp_CWE805_class_loop_22a.cpp":34:17)
#loc16 = loc("CWE122_Heap_Based_Buffer_Overflow__cpp_CWE805_class_loop_22a.cpp":34:5)
#loc17 = loc("CWE122_Heap_Based_Buffer_Overflow__cpp_CWE805_class_loop_22a.cpp":35:22)
#loc18 = loc("CWE122_Heap_Based_Buffer_Overflow__cpp_CWE805_class_loop_22a.cpp":35:12)
#loc19 = loc("CWE122_Heap_Based_Buffer_Overflow__cpp_CWE805_class_loop_22a.cpp":35:5)
#loc20 = loc("CWE122_Heap_Based_Buffer_Overflow__cpp_CWE805_class_loop_22a.cpp":35:26)
#loc21 = loc("CWE122_Heap_Based_Buffer_Overflow__cpp_CWE805_class_loop_22a.cpp":36:5)
#loc22 = loc("CWE122_Heap_Based_Buffer_Overflow__cpp_CWE805_class_loop_22a.cpp":57:5)
#loc23 = loc("CWE122_Heap_Based_Buffer_Overflow__cpp_CWE805_class_loop_22a.cpp":37:9)
#loc24 = loc("CWE122_Heap_Based_Buffer_Overflow__cpp_CWE805_class_loop_22a.cpp":37:32)
#loc25 = loc("CWE122_Heap_Based_Buffer_Overflow__cpp_CWE805_class_loop_22a.cpp":38:9)
#loc26 = loc("CWE122_Heap_Based_Buffer_Overflow__cpp_CWE805_class_loop_22a.cpp":46:9)
#loc27 = loc("CWE122_Heap_Based_Buffer_Overflow__cpp_CWE805_class_loop_22a.cpp":39:13)
#loc28 = loc("CWE122_Heap_Based_Buffer_Overflow__cpp_CWE805_class_loop_22a.cpp":39:20)
#loc29 = loc("CWE122_Heap_Based_Buffer_Overflow__cpp_CWE805_class_loop_22a.cpp":41:13)
#loc30 = loc("CWE122_Heap_Based_Buffer_Overflow__cpp_CWE805_class_loop_22a.cpp":45:13)
#loc31 = loc("CWE122_Heap_Based_Buffer_Overflow__cpp_CWE805_class_loop_22a.cpp":41:22)
#loc32 = loc("CWE122_Heap_Based_Buffer_Overflow__cpp_CWE805_class_loop_22a.cpp":41:18)
#loc33 = loc("CWE122_Heap_Based_Buffer_Overflow__cpp_CWE805_class_loop_22a.cpp":41:25)
#loc34 = loc("CWE122_Heap_Based_Buffer_Overflow__cpp_CWE805_class_loop_22a.cpp":41:29)
#loc35 = loc("CWE122_Heap_Based_Buffer_Overflow__cpp_CWE805_class_loop_22a.cpp":42:13)
#loc36 = loc("CWE122_Heap_Based_Buffer_Overflow__cpp_CWE805_class_loop_22a.cpp":43:36)
#loc37 = loc("CWE122_Heap_Based_Buffer_Overflow__cpp_CWE805_class_loop_22a.cpp":43:24)
#loc38 = loc("CWE122_Heap_Based_Buffer_Overflow__cpp_CWE805_class_loop_22a.cpp":43:17)
#loc39 = loc("CWE122_Heap_Based_Buffer_Overflow__cpp_CWE805_class_loop_22a.cpp":44:36)
#loc40 = loc("CWE122_Heap_Based_Buffer_Overflow__cpp_CWE805_class_loop_22a.cpp":44:24)
#loc41 = loc("CWE122_Heap_Based_Buffer_Overflow__cpp_CWE805_class_loop_22a.cpp":44:17)
#loc42 = loc("../../../testcasesupport/std_testcase.h":65:13)
#loc43 = loc("CWE122_Heap_Based_Buffer_Overflow__cpp_CWE805_class_loop_22a.cpp":41:35)
#loc44 = loc("CWE122_Heap_Based_Buffer_Overflow__cpp_CWE805_class_loop_22a.cpp":41:34)
#loc45 = loc("CWE122_Heap_Based_Buffer_Overflow__cpp_CWE805_class_loop_22a.cpp":47:9)
#loc46 = loc("CWE122_Heap_Based_Buffer_Overflow__cpp_CWE805_class_loop_22a.cpp":56:9)
#loc47 = loc("CWE122_Heap_Based_Buffer_Overflow__cpp_CWE805_class_loop_22a.cpp":48:13)
#loc48 = loc("CWE122_Heap_Based_Buffer_Overflow__cpp_CWE805_class_loop_22a.cpp":48:20)
#loc49 = loc("CWE122_Heap_Based_Buffer_Overflow__cpp_CWE805_class_loop_22a.cpp":50:13)
#loc50 = loc("CWE122_Heap_Based_Buffer_Overflow__cpp_CWE805_class_loop_22a.cpp":53:13)
#loc51 = loc("CWE122_Heap_Based_Buffer_Overflow__cpp_CWE805_class_loop_22a.cpp":50:22)
#loc52 = loc("CWE122_Heap_Based_Buffer_Overflow__cpp_CWE805_class_loop_22a.cpp":50:18)
#loc53 = loc("CWE122_Heap_Based_Buffer_Overflow__cpp_CWE805_class_loop_22a.cpp":50:25)
#loc54 = loc("CWE122_Heap_Based_Buffer_Overflow__cpp_CWE805_class_loop_22a.cpp":50:29)
#loc55 = loc("CWE122_Heap_Based_Buffer_Overflow__cpp_CWE805_class_loop_22a.cpp":51:13)
#loc56 = loc("CWE122_Heap_Based_Buffer_Overflow__cpp_CWE805_class_loop_22a.cpp":52:34)
#loc57 = loc("CWE122_Heap_Based_Buffer_Overflow__cpp_CWE805_class_loop_22a.cpp":52:27)
#loc58 = loc("CWE122_Heap_Based_Buffer_Overflow__cpp_CWE805_class_loop_22a.cpp":52:17)
#loc59 = loc("CWE122_Heap_Based_Buffer_Overflow__cpp_CWE805_class_loop_22a.cpp":52:22)
#loc60 = loc("CWE122_Heap_Based_Buffer_Overflow__cpp_CWE805_class_loop_22a.cpp":52:23)
#loc61 = loc("CWE122_Heap_Based_Buffer_Overflow__cpp_CWE805_class_loop_22a.cpp":52:25)
#loc62 = loc("CWE122_Heap_Based_Buffer_Overflow__cpp_CWE805_class_loop_22a.cpp":50:35)
#loc63 = loc("CWE122_Heap_Based_Buffer_Overflow__cpp_CWE805_class_loop_22a.cpp":50:34)
#loc64 = loc("CWE122_Heap_Based_Buffer_Overflow__cpp_CWE805_class_loop_22a.cpp":54:26)
#loc65 = loc("CWE122_Heap_Based_Buffer_Overflow__cpp_CWE805_class_loop_22a.cpp":54:31)
#loc66 = loc("CWE122_Heap_Based_Buffer_Overflow__cpp_CWE805_class_loop_22a.cpp":54:32)
#loc67 = loc("CWE122_Heap_Based_Buffer_Overflow__cpp_CWE805_class_loop_22a.cpp":54:34)
#loc68 = loc("CWE122_Heap_Based_Buffer_Overflow__cpp_CWE805_class_loop_22a.cpp":54:13)
#loc69 = loc("CWE122_Heap_Based_Buffer_Overflow__cpp_CWE805_class_loop_22a.cpp":55:23)
#loc70 = loc("CWE122_Heap_Based_Buffer_Overflow__cpp_CWE805_class_loop_22a.cpp":67:1)
#loc71 = loc("CWE122_Heap_Based_Buffer_Overflow__cpp_CWE805_class_loop_22a.cpp":67:22)
#loc72 = loc("CWE122_Heap_Based_Buffer_Overflow__cpp_CWE805_class_loop_22a.cpp":68:1)
#loc73 = loc("CWE122_Heap_Based_Buffer_Overflow__cpp_CWE805_class_loop_22a.cpp":68:22)
#loc74 = loc("CWE122_Heap_Based_Buffer_Overflow__cpp_CWE805_class_loop_22a.cpp":71:1)
#loc75 = loc("CWE122_Heap_Based_Buffer_Overflow__cpp_CWE805_class_loop_22a.cpp":71:50)
#loc76 = loc("CWE122_Heap_Based_Buffer_Overflow__cpp_CWE805_class_loop_22a.cpp":73:1)
#loc77 = loc("CWE122_Heap_Based_Buffer_Overflow__cpp_CWE805_class_loop_22a.cpp":102:1)
#loc78 = loc("CWE122_Heap_Based_Buffer_Overflow__cpp_CWE805_class_loop_22a.cpp":75:5)
#loc79 = loc("CWE122_Heap_Based_Buffer_Overflow__cpp_CWE805_class_loop_22a.cpp":75:20)
#loc80 = loc("CWE122_Heap_Based_Buffer_Overflow__cpp_CWE805_class_loop_22a.cpp":76:12)
#loc81 = loc("CWE122_Heap_Based_Buffer_Overflow__cpp_CWE805_class_loop_22a.cpp":76:5)
#loc82 = loc("CWE122_Heap_Based_Buffer_Overflow__cpp_CWE805_class_loop_22a.cpp":77:22)
#loc83 = loc("CWE122_Heap_Based_Buffer_Overflow__cpp_CWE805_class_loop_22a.cpp":77:5)
#loc84 = loc("CWE122_Heap_Based_Buffer_Overflow__cpp_CWE805_class_loop_22a.cpp":78:27)
#loc85 = loc("CWE122_Heap_Based_Buffer_Overflow__cpp_CWE805_class_loop_22a.cpp":78:12)
#loc86 = loc("CWE122_Heap_Based_Buffer_Overflow__cpp_CWE805_class_loop_22a.cpp":78:5)
#loc87 = loc("CWE122_Heap_Based_Buffer_Overflow__cpp_CWE805_class_loop_22a.cpp":78:31)
#loc88 = loc("CWE122_Heap_Based_Buffer_Overflow__cpp_CWE805_class_loop_22a.cpp":79:5)
#loc89 = loc("CWE122_Heap_Based_Buffer_Overflow__cpp_CWE805_class_loop_22a.cpp":100:5)
#loc90 = loc("CWE122_Heap_Based_Buffer_Overflow__cpp_CWE805_class_loop_22a.cpp":80:9)
#loc91 = loc("CWE122_Heap_Based_Buffer_Overflow__cpp_CWE805_class_loop_22a.cpp":80:32)
#loc92 = loc("CWE122_Heap_Based_Buffer_Overflow__cpp_CWE805_class_loop_22a.cpp":81:9)
#loc93 = loc("CWE122_Heap_Based_Buffer_Overflow__cpp_CWE805_class_loop_22a.cpp":89:9)
#loc94 = loc("CWE122_Heap_Based_Buffer_Overflow__cpp_CWE805_class_loop_22a.cpp":82:13)
#loc95 = loc("CWE122_Heap_Based_Buffer_Overflow__cpp_CWE805_class_loop_22a.cpp":82:20)
#loc96 = loc("CWE122_Heap_Based_Buffer_Overflow__cpp_CWE805_class_loop_22a.cpp":84:13)
#loc97 = loc("CWE122_Heap_Based_Buffer_Overflow__cpp_CWE805_class_loop_22a.cpp":88:13)
#loc98 = loc("CWE122_Heap_Based_Buffer_Overflow__cpp_CWE805_class_loop_22a.cpp":84:22)
#loc99 = loc("CWE122_Heap_Based_Buffer_Overflow__cpp_CWE805_class_loop_22a.cpp":84:18)
#loc100 = loc("CWE122_Heap_Based_Buffer_Overflow__cpp_CWE805_class_loop_22a.cpp":84:25)
#loc101 = loc("CWE122_Heap_Based_Buffer_Overflow__cpp_CWE805_class_loop_22a.cpp":84:29)
#loc102 = loc("CWE122_Heap_Based_Buffer_Overflow__cpp_CWE805_class_loop_22a.cpp":85:13)
#loc103 = loc("CWE122_Heap_Based_Buffer_Overflow__cpp_CWE805_class_loop_22a.cpp":86:36)
#loc104 = loc("CWE122_Heap_Based_Buffer_Overflow__cpp_CWE805_class_loop_22a.cpp":86:24)
#loc105 = loc("CWE122_Heap_Based_Buffer_Overflow__cpp_CWE805_class_loop_22a.cpp":86:17)
#loc106 = loc("CWE122_Heap_Based_Buffer_Overflow__cpp_CWE805_class_loop_22a.cpp":87:36)
#loc107 = loc("CWE122_Heap_Based_Buffer_Overflow__cpp_CWE805_class_loop_22a.cpp":87:24)
#loc108 = loc("CWE122_Heap_Based_Buffer_Overflow__cpp_CWE805_class_loop_22a.cpp":87:17)
#loc109 = loc("CWE122_Heap_Based_Buffer_Overflow__cpp_CWE805_class_loop_22a.cpp":84:35)
#loc110 = loc("CWE122_Heap_Based_Buffer_Overflow__cpp_CWE805_class_loop_22a.cpp":84:34)
#loc111 = loc("CWE122_Heap_Based_Buffer_Overflow__cpp_CWE805_class_loop_22a.cpp":90:9)
#loc112 = loc("CWE122_Heap_Based_Buffer_Overflow__cpp_CWE805_class_loop_22a.cpp":99:9)
#loc113 = loc("CWE122_Heap_Based_Buffer_Overflow__cpp_CWE805_class_loop_22a.cpp":91:13)
#loc114 = loc("CWE122_Heap_Based_Buffer_Overflow__cpp_CWE805_class_loop_22a.cpp":91:20)
#loc115 = loc("CWE122_Heap_Based_Buffer_Overflow__cpp_CWE805_class_loop_22a.cpp":93:13)
#loc116 = loc("CWE122_Heap_Based_Buffer_Overflow__cpp_CWE805_class_loop_22a.cpp":96:13)
#loc117 = loc("CWE122_Heap_Based_Buffer_Overflow__cpp_CWE805_class_loop_22a.cpp":93:22)
#loc118 = loc("CWE122_Heap_Based_Buffer_Overflow__cpp_CWE805_class_loop_22a.cpp":93:18)
#loc119 = loc("CWE122_Heap_Based_Buffer_Overflow__cpp_CWE805_class_loop_22a.cpp":93:25)
#loc120 = loc("CWE122_Heap_Based_Buffer_Overflow__cpp_CWE805_class_loop_22a.cpp":93:29)
#loc121 = loc("CWE122_Heap_Based_Buffer_Overflow__cpp_CWE805_class_loop_22a.cpp":94:13)
#loc122 = loc("CWE122_Heap_Based_Buffer_Overflow__cpp_CWE805_class_loop_22a.cpp":95:34)
#loc123 = loc("CWE122_Heap_Based_Buffer_Overflow__cpp_CWE805_class_loop_22a.cpp":95:27)
#loc124 = loc("CWE122_Heap_Based_Buffer_Overflow__cpp_CWE805_class_loop_22a.cpp":95:17)
#loc125 = loc("CWE122_Heap_Based_Buffer_Overflow__cpp_CWE805_class_loop_22a.cpp":95:22)
#loc126 = loc("CWE122_Heap_Based_Buffer_Overflow__cpp_CWE805_class_loop_22a.cpp":95:23)
#loc127 = loc("CWE122_Heap_Based_Buffer_Overflow__cpp_CWE805_class_loop_22a.cpp":95:25)
#loc128 = loc("CWE122_Heap_Based_Buffer_Overflow__cpp_CWE805_class_loop_22a.cpp":93:35)
#loc129 = loc("CWE122_Heap_Based_Buffer_Overflow__cpp_CWE805_class_loop_22a.cpp":93:34)
#loc130 = loc("CWE122_Heap_Based_Buffer_Overflow__cpp_CWE805_class_loop_22a.cpp":97:26)
#loc131 = loc("CWE122_Heap_Based_Buffer_Overflow__cpp_CWE805_class_loop_22a.cpp":97:31)
#loc132 = loc("CWE122_Heap_Based_Buffer_Overflow__cpp_CWE805_class_loop_22a.cpp":97:32)
#loc133 = loc("CWE122_Heap_Based_Buffer_Overflow__cpp_CWE805_class_loop_22a.cpp":97:34)
#loc134 = loc("CWE122_Heap_Based_Buffer_Overflow__cpp_CWE805_class_loop_22a.cpp":97:13)
#loc135 = loc("CWE122_Heap_Based_Buffer_Overflow__cpp_CWE805_class_loop_22a.cpp":98:23)
#loc136 = loc("CWE122_Heap_Based_Buffer_Overflow__cpp_CWE805_class_loop_22a.cpp":105:1)
#loc137 = loc("CWE122_Heap_Based_Buffer_Overflow__cpp_CWE805_class_loop_22a.cpp":105:50)
#loc138 = loc("CWE122_Heap_Based_Buffer_Overflow__cpp_CWE805_class_loop_22a.cpp":107:1)
#loc139 = loc("CWE122_Heap_Based_Buffer_Overflow__cpp_CWE805_class_loop_22a.cpp":136:1)
#loc140 = loc("CWE122_Heap_Based_Buffer_Overflow__cpp_CWE805_class_loop_22a.cpp":109:5)
#loc141 = loc("CWE122_Heap_Based_Buffer_Overflow__cpp_CWE805_class_loop_22a.cpp":109:20)
#loc142 = loc("CWE122_Heap_Based_Buffer_Overflow__cpp_CWE805_class_loop_22a.cpp":110:12)
#loc143 = loc("CWE122_Heap_Based_Buffer_Overflow__cpp_CWE805_class_loop_22a.cpp":110:5)
#loc144 = loc("CWE122_Heap_Based_Buffer_Overflow__cpp_CWE805_class_loop_22a.cpp":111:22)
#loc145 = loc("CWE122_Heap_Based_Buffer_Overflow__cpp_CWE805_class_loop_22a.cpp":111:5)
#loc146 = loc("CWE122_Heap_Based_Buffer_Overflow__cpp_CWE805_class_loop_22a.cpp":112:27)
#loc147 = loc("CWE122_Heap_Based_Buffer_Overflow__cpp_CWE805_class_loop_22a.cpp":112:12)
#loc148 = loc("CWE122_Heap_Based_Buffer_Overflow__cpp_CWE805_class_loop_22a.cpp":112:5)
#loc149 = loc("CWE122_Heap_Based_Buffer_Overflow__cpp_CWE805_class_loop_22a.cpp":112:31)
#loc150 = loc("CWE122_Heap_Based_Buffer_Overflow__cpp_CWE805_class_loop_22a.cpp":113:5)
#loc151 = loc("CWE122_Heap_Based_Buffer_Overflow__cpp_CWE805_class_loop_22a.cpp":134:5)
#loc152 = loc("CWE122_Heap_Based_Buffer_Overflow__cpp_CWE805_class_loop_22a.cpp":114:9)
#loc153 = loc("CWE122_Heap_Based_Buffer_Overflow__cpp_CWE805_class_loop_22a.cpp":114:32)
#loc154 = loc("CWE122_Heap_Based_Buffer_Overflow__cpp_CWE805_class_loop_22a.cpp":115:9)
#loc155 = loc("CWE122_Heap_Based_Buffer_Overflow__cpp_CWE805_class_loop_22a.cpp":123:9)
#loc156 = loc("CWE122_Heap_Based_Buffer_Overflow__cpp_CWE805_class_loop_22a.cpp":116:13)
#loc157 = loc("CWE122_Heap_Based_Buffer_Overflow__cpp_CWE805_class_loop_22a.cpp":116:20)
#loc158 = loc("CWE122_Heap_Based_Buffer_Overflow__cpp_CWE805_class_loop_22a.cpp":118:13)
#loc159 = loc("CWE122_Heap_Based_Buffer_Overflow__cpp_CWE805_class_loop_22a.cpp":122:13)
#loc160 = loc("CWE122_Heap_Based_Buffer_Overflow__cpp_CWE805_class_loop_22a.cpp":118:22)
#loc161 = loc("CWE122_Heap_Based_Buffer_Overflow__cpp_CWE805_class_loop_22a.cpp":118:18)
#loc162 = loc("CWE122_Heap_Based_Buffer_Overflow__cpp_CWE805_class_loop_22a.cpp":118:25)
#loc163 = loc("CWE122_Heap_Based_Buffer_Overflow__cpp_CWE805_class_loop_22a.cpp":118:29)
#loc164 = loc("CWE122_Heap_Based_Buffer_Overflow__cpp_CWE805_class_loop_22a.cpp":119:13)
#loc165 = loc("CWE122_Heap_Based_Buffer_Overflow__cpp_CWE805_class_loop_22a.cpp":120:36)
#loc166 = loc("CWE122_Heap_Based_Buffer_Overflow__cpp_CWE805_class_loop_22a.cpp":120:24)
#loc167 = loc("CWE122_Heap_Based_Buffer_Overflow__cpp_CWE805_class_loop_22a.cpp":120:17)
#loc168 = loc("CWE122_Heap_Based_Buffer_Overflow__cpp_CWE805_class_loop_22a.cpp":121:36)
#loc169 = loc("CWE122_Heap_Based_Buffer_Overflow__cpp_CWE805_class_loop_22a.cpp":121:24)
#loc170 = loc("CWE122_Heap_Based_Buffer_Overflow__cpp_CWE805_class_loop_22a.cpp":121:17)
#loc171 = loc("CWE122_Heap_Based_Buffer_Overflow__cpp_CWE805_class_loop_22a.cpp":118:35)
#loc172 = loc("CWE122_Heap_Based_Buffer_Overflow__cpp_CWE805_class_loop_22a.cpp":118:34)
#loc173 = loc("CWE122_Heap_Based_Buffer_Overflow__cpp_CWE805_class_loop_22a.cpp":124:9)
#loc174 = loc("CWE122_Heap_Based_Buffer_Overflow__cpp_CWE805_class_loop_22a.cpp":133:9)
#loc175 = loc("CWE122_Heap_Based_Buffer_Overflow__cpp_CWE805_class_loop_22a.cpp":125:13)
#loc176 = loc("CWE122_Heap_Based_Buffer_Overflow__cpp_CWE805_class_loop_22a.cpp":125:20)
#loc177 = loc("CWE122_Heap_Based_Buffer_Overflow__cpp_CWE805_class_loop_22a.cpp":127:13)
#loc178 = loc("CWE122_Heap_Based_Buffer_Overflow__cpp_CWE805_class_loop_22a.cpp":130:13)
#loc179 = loc("CWE122_Heap_Based_Buffer_Overflow__cpp_CWE805_class_loop_22a.cpp":127:22)
#loc180 = loc("CWE122_Heap_Based_Buffer_Overflow__cpp_CWE805_class_loop_22a.cpp":127:18)
#loc181 = loc("CWE122_Heap_Based_Buffer_Overflow__cpp_CWE805_class_loop_22a.cpp":127:25)
#loc182 = loc("CWE122_Heap_Based_Buffer_Overflow__cpp_CWE805_class_loop_22a.cpp":127:29)
#loc183 = loc("CWE122_Heap_Based_Buffer_Overflow__cpp_CWE805_class_loop_22a.cpp":128:13)
#loc184 = loc("CWE122_Heap_Based_Buffer_Overflow__cpp_CWE805_class_loop_22a.cpp":129:34)
#loc185 = loc("CWE122_Heap_Based_Buffer_Overflow__cpp_CWE805_class_loop_22a.cpp":129:27)
#loc186 = loc("CWE122_Heap_Based_Buffer_Overflow__cpp_CWE805_class_loop_22a.cpp":129:17)
#loc187 = loc("CWE122_Heap_Based_Buffer_Overflow__cpp_CWE805_class_loop_22a.cpp":129:22)
#loc188 = loc("CWE122_Heap_Based_Buffer_Overflow__cpp_CWE805_class_loop_22a.cpp":129:23)
#loc189 = loc("CWE122_Heap_Based_Buffer_Overflow__cpp_CWE805_class_loop_22a.cpp":129:25)
#loc190 = loc("CWE122_Heap_Based_Buffer_Overflow__cpp_CWE805_class_loop_22a.cpp":127:35)
#loc191 = loc("CWE122_Heap_Based_Buffer_Overflow__cpp_CWE805_class_loop_22a.cpp":127:34)
#loc192 = loc("CWE122_Heap_Based_Buffer_Overflow__cpp_CWE805_class_loop_22a.cpp":131:26)
#loc193 = loc("CWE122_Heap_Based_Buffer_Overflow__cpp_CWE805_class_loop_22a.cpp":131:31)
#loc194 = loc("CWE122_Heap_Based_Buffer_Overflow__cpp_CWE805_class_loop_22a.cpp":131:32)
#loc195 = loc("CWE122_Heap_Based_Buffer_Overflow__cpp_CWE805_class_loop_22a.cpp":131:34)
#loc196 = loc("CWE122_Heap_Based_Buffer_Overflow__cpp_CWE805_class_loop_22a.cpp":131:13)
#loc197 = loc("CWE122_Heap_Based_Buffer_Overflow__cpp_CWE805_class_loop_22a.cpp":132:23)
#loc198 = loc("CWE122_Heap_Based_Buffer_Overflow__cpp_CWE805_class_loop_22a.cpp":138:1)
#loc199 = loc("CWE122_Heap_Based_Buffer_Overflow__cpp_CWE805_class_loop_22a.cpp":142:1)
#loc200 = loc("CWE122_Heap_Based_Buffer_Overflow__cpp_CWE805_class_loop_22a.cpp":140:5)
#loc201 = loc("CWE122_Heap_Based_Buffer_Overflow__cpp_CWE805_class_loop_22a.cpp":141:5)
#loc202 = loc(fused[#loc1, #loc2])
#loc203 = loc(fused[#loc3, #loc4])
#loc204 = loc(fused[#loc7, #loc8])
#loc205 = loc(fused[#loc9, #loc10])
#loc206 = loc(fused[#loc11, #loc12])
#loc207 = loc(fused[#loc14, #loc13])
#loc208 = loc(fused[#loc16, #loc15])
#loc209 = loc(fused[#loc19, #loc20])
#loc210 = loc(fused[#loc21, #loc22])
#loc211 = loc(fused[#loc23, #loc24])
#loc212 = loc(fused[#loc25, #loc26])
#loc213 = loc(fused[#loc27, #loc28])
#loc214 = loc(fused[#loc29, #loc30])
#loc215 = loc(fused[#loc32, #loc31])
#loc216 = loc(fused[#loc33, #loc34])
#loc217 = loc(fused[#loc35, #loc30])
#loc218 = loc(fused[#loc38, #loc36])
#loc219 = loc(fused[#loc41, #loc39])
#loc220 = loc(fused[#loc44, #loc43])
#loc221 = loc(fused[#loc45, #loc46])
#loc222 = loc(fused[#loc47, #loc48])
#loc223 = loc(fused[#loc49, #loc50])
#loc224 = loc(fused[#loc52, #loc51])
#loc225 = loc(fused[#loc53, #loc54])
#loc226 = loc(fused[#loc55, #loc50])
#loc227 = loc(fused[#loc63, #loc62])
#loc228 = loc(fused[#loc70, #loc71])
#loc229 = loc(fused[#loc72, #loc73])
#loc230 = loc(fused[#loc74, #loc75])
#loc231 = loc(fused[#loc76, #loc77])
#loc232 = loc(fused[#loc78, #loc79])
#loc233 = loc(fused[#loc81, #loc80])
#loc234 = loc(fused[#loc83, #loc82])
#loc235 = loc(fused[#loc86, #loc87])
#loc236 = loc(fused[#loc88, #loc89])
#loc237 = loc(fused[#loc90, #loc91])
#loc238 = loc(fused[#loc92, #loc93])
#loc239 = loc(fused[#loc94, #loc95])
#loc240 = loc(fused[#loc96, #loc97])
#loc241 = loc(fused[#loc99, #loc98])
#loc242 = loc(fused[#loc100, #loc101])
#loc243 = loc(fused[#loc102, #loc97])
#loc244 = loc(fused[#loc105, #loc103])
#loc245 = loc(fused[#loc108, #loc106])
#loc246 = loc(fused[#loc110, #loc109])
#loc247 = loc(fused[#loc111, #loc112])
#loc248 = loc(fused[#loc113, #loc114])
#loc249 = loc(fused[#loc115, #loc116])
#loc250 = loc(fused[#loc118, #loc117])
#loc251 = loc(fused[#loc119, #loc120])
#loc252 = loc(fused[#loc121, #loc116])
#loc253 = loc(fused[#loc129, #loc128])
#loc254 = loc(fused[#loc136, #loc137])
#loc255 = loc(fused[#loc138, #loc139])
#loc256 = loc(fused[#loc140, #loc141])
#loc257 = loc(fused[#loc143, #loc142])
#loc258 = loc(fused[#loc145, #loc144])
#loc259 = loc(fused[#loc148, #loc149])
#loc260 = loc(fused[#loc150, #loc151])
#loc261 = loc(fused[#loc152, #loc153])
#loc262 = loc(fused[#loc154, #loc155])
#loc263 = loc(fused[#loc156, #loc157])
#loc264 = loc(fused[#loc158, #loc159])
#loc265 = loc(fused[#loc161, #loc160])
#loc266 = loc(fused[#loc162, #loc163])
#loc267 = loc(fused[#loc164, #loc159])
#loc268 = loc(fused[#loc167, #loc165])
#loc269 = loc(fused[#loc170, #loc168])
#loc270 = loc(fused[#loc172, #loc171])
#loc271 = loc(fused[#loc173, #loc174])
#loc272 = loc(fused[#loc175, #loc176])
#loc273 = loc(fused[#loc177, #loc178])
#loc274 = loc(fused[#loc180, #loc179])
#loc275 = loc(fused[#loc181, #loc182])
#loc276 = loc(fused[#loc183, #loc178])
#loc277 = loc(fused[#loc191, #loc190])
#loc278 = loc(fused[#loc198, #loc199])
