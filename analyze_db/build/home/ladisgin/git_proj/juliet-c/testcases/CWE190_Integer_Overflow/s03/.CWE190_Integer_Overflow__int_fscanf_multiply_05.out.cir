!s32i = !cir.int<s, 32>
!s64i = !cir.int<s, 64>
!s8i = !cir.int<s, 8>
!ty__IO_codecvt = !cir.struct<struct "_IO_codecvt" incomplete>
!ty__IO_marker = !cir.struct<struct "_IO_marker" incomplete>
!ty__IO_wide_data = !cir.struct<struct "_IO_wide_data" incomplete>
!u16i = !cir.int<u, 16>
!u32i = !cir.int<u, 32>
!void = !cir.void
#fn_attr = #cir<extra({inline = #cir.inline<no>, nothrow = #cir.nothrow, optnone = #cir.optnone})>
#fn_attr1 = #cir<extra({nothrow = #cir.nothrow})>
#loc58 = loc("CWE190_Integer_Overflow__int_fscanf_multiply_05.c":182:10)
#loc59 = loc("CWE190_Integer_Overflow__int_fscanf_multiply_05.c":182:14)
#loc60 = loc("CWE190_Integer_Overflow__int_fscanf_multiply_05.c":182:20)
#loc61 = loc("CWE190_Integer_Overflow__int_fscanf_multiply_05.c":182:32)
#loc238 = loc(fused[#loc58, #loc59])
#loc239 = loc(fused[#loc60, #loc61])
!ty__IO_FILE = !cir.struct<struct "_IO_FILE" {!s32i, !cir.ptr<!s8i>, !cir.ptr<!s8i>, !cir.ptr<!s8i>, !cir.ptr<!s8i>, !cir.ptr<!s8i>, !cir.ptr<!s8i>, !cir.ptr<!s8i>, !cir.ptr<!s8i>, !cir.ptr<!s8i>, !cir.ptr<!s8i>, !cir.ptr<!s8i>, !cir.ptr<!ty__IO_marker>, !cir.ptr<!cir.struct<struct "_IO_FILE">>, !s32i, !s32i, !s64i, !u16i, !s8i, !cir.array<!s8i x 1>, !cir.ptr<!void>, !s64i, !cir.ptr<!ty__IO_codecvt>, !cir.ptr<!ty__IO_wide_data>, !cir.ptr<!cir.struct<struct "_IO_FILE">>, !cir.ptr<!void>, !cir.ptr<!cir.ptr<!cir.struct<struct "_IO_FILE">>>, !s32i, !cir.array<!s8i x 20>} #cir.record.decl.ast>
module @"/home/ladisgin/git_proj/juliet-c/testcases/CWE190_Integer_Overflow/s03/CWE190_Integer_Overflow__int_fscanf_multiply_05.c" attributes {cir.lang = #cir.lang<c>, cir.sob = #cir.signed_overflow_behavior<undefined>, cir.triple = "x86_64-unknown-linux-gnu", dlti.dl_spec = #dlti.dl_spec<i64 = dense<64> : vector<2xi64>, !llvm.ptr<271> = dense<32> : vector<4xi64>, !llvm.ptr<272> = dense<64> : vector<4xi64>, f80 = dense<128> : vector<2xi64>, i128 = dense<128> : vector<2xi64>, i16 = dense<16> : vector<2xi64>, i8 = dense<8> : vector<2xi64>, i1 = dense<8> : vector<2xi64>, !llvm.ptr = dense<64> : vector<4xi64>, f128 = dense<128> : vector<2xi64>, f16 = dense<16> : vector<2xi64>, !llvm.ptr<270> = dense<32> : vector<4xi64>, f64 = dense<64> : vector<2xi64>, i32 = dense<32> : vector<2xi64>, "dlti.stack_alignment" = 128 : i64, "dlti.endianness" = "little">} {
  cir.global "private" internal dsolocal @staticTrue = #cir.int<1> : !s32i {alignment = 4 : i64} loc(#loc214)
  cir.func private @__isoc99_fscanf(!cir.ptr<!ty__IO_FILE>, !cir.ptr<!s8i>, ...) -> !s32i loc(#loc215)
  cir.global "private" external @stdin : !cir.ptr<!ty__IO_FILE> {alignment = 8 : i64} loc(#loc216)
  cir.global "private" constant cir_private dsolocal @".str" = #cir.const_array<"%d\00" : !cir.array<!s8i x 3>> : !cir.array<!s8i x 3> {alignment = 1 : i64} loc(#loc7)
  cir.func private @printIntLine(!s32i) loc(#loc217)
  cir.func no_proto @CWE190_Integer_Overflow__int_fscanf_multiply_05_bad() extra(#fn_attr) {
    %0 = cir.alloca !s32i, !cir.ptr<!s32i>, ["data"] {alignment = 4 : i64} loc(#loc219)
    %1 = cir.const #cir.int<0> : !s32i loc(#loc14)
    cir.store %1, %0 : !s32i, !cir.ptr<!s32i> loc(#loc220)
    cir.scope {
      %2 = cir.get_global @staticTrue : !cir.ptr<!s32i> loc(#loc214)
      %3 = cir.load %2 : !cir.ptr<!s32i>, !s32i loc(#loc18)
      %4 = cir.cast(int_to_bool, %3 : !s32i), !cir.bool loc(#loc18)
      cir.if %4 {
        %5 = cir.get_global @__isoc99_fscanf : !cir.ptr<!cir.func<!s32i (!cir.ptr<!ty__IO_FILE>, !cir.ptr<!s8i>, ...)>> loc(#loc20)
        %6 = cir.get_global @stdin : !cir.ptr<!cir.ptr<!ty__IO_FILE>> loc(#loc216)
        %7 = cir.load %6 : !cir.ptr<!cir.ptr<!ty__IO_FILE>>, !cir.ptr<!ty__IO_FILE> loc(#loc21)
        %8 = cir.get_global @".str" : !cir.ptr<!cir.array<!s8i x 3>> loc(#loc7)
        %9 = cir.cast(array_to_ptrdecay, %8 : !cir.ptr<!cir.array<!s8i x 3>>), !cir.ptr<!s8i> loc(#loc7)
        %10 = cir.call @__isoc99_fscanf(%7, %9, %0) : (!cir.ptr<!ty__IO_FILE>, !cir.ptr<!s8i>, !cir.ptr<!s32i>) -> !s32i loc(#loc20)
      } loc(#loc222)
    } loc(#loc221)
    cir.scope {
      %2 = cir.get_global @staticTrue : !cir.ptr<!s32i> loc(#loc214)
      %3 = cir.load %2 : !cir.ptr<!s32i>, !s32i loc(#loc24)
      %4 = cir.cast(int_to_bool, %3 : !s32i), !cir.bool loc(#loc24)
      cir.if %4 {
        cir.scope {
          %5 = cir.load %0 : !cir.ptr<!s32i>, !s32i loc(#loc28)
          %6 = cir.const #cir.int<0> : !s32i loc(#loc29)
          %7 = cir.cmp(gt, %5, %6) : !s32i, !cir.bool loc(#loc226)
          cir.if %7 {
            %8 = cir.alloca !s32i, !cir.ptr<!s32i>, ["result", init] {alignment = 4 : i64} loc(#loc228)
            %9 = cir.load %0 : !cir.ptr<!s32i>, !s32i loc(#loc33)
            %10 = cir.const #cir.int<2> : !s32i loc(#loc32)
            %11 = cir.binop(mul, %9, %10) nsw : !s32i loc(#loc33)
            cir.store %11, %8 : !s32i, !cir.ptr<!s32i> loc(#loc228)
            %12 = cir.load %8 : !cir.ptr<!s32i>, !s32i loc(#loc34)
            cir.call @printIntLine(%12) : (!s32i) -> () loc(#loc35)
          } loc(#loc227)
        } loc(#loc225)
      } loc(#loc224)
    } loc(#loc223)
    cir.return loc(#loc11)
  } loc(#loc218)
  cir.func no_proto @CWE190_Integer_Overflow__int_fscanf_multiply_05_good() extra(#fn_attr) {
    %0 = cir.get_global @goodB2G1 : !cir.ptr<!cir.func<!void ()>> loc(#loc230)
    cir.call %0() : (!cir.ptr<!cir.func<!void ()>>) -> () loc(#loc38)
    %1 = cir.get_global @goodB2G2 : !cir.ptr<!cir.func<!void ()>> loc(#loc231)
    cir.call %1() : (!cir.ptr<!cir.func<!void ()>>) -> () loc(#loc40)
    %2 = cir.get_global @goodG2B1 : !cir.ptr<!cir.func<!void ()>> loc(#loc232)
    cir.call %2() : (!cir.ptr<!cir.func<!void ()>>) -> () loc(#loc42)
    %3 = cir.get_global @goodG2B2 : !cir.ptr<!cir.func<!void ()>> loc(#loc233)
    cir.call %3() : (!cir.ptr<!cir.func<!void ()>>) -> () loc(#loc44)
    cir.return loc(#loc37)
  } loc(#loc229)
  cir.func private @srand(!u32i) extra(#fn_attr1) loc(#loc234)
  cir.func private @time(!cir.ptr<!s64i>) -> !s64i extra(#fn_attr1) loc(#loc235)
  cir.func private @printLine(!cir.ptr<!s8i>) loc(#loc236)
  cir.global "private" constant cir_private dsolocal @".str.1" = #cir.const_array<"Calling good()...\00" : !cir.array<!s8i x 18>> : !cir.array<!s8i x 18> {alignment = 1 : i64} loc(#loc52)
  cir.global "private" constant cir_private dsolocal @".str.2" = #cir.const_array<"Finished good()\00" : !cir.array<!s8i x 16>> : !cir.array<!s8i x 16> {alignment = 1 : i64} loc(#loc53)
  cir.global "private" constant cir_private dsolocal @".str.3" = #cir.const_array<"Calling bad()...\00" : !cir.array<!s8i x 17>> : !cir.array<!s8i x 17> {alignment = 1 : i64} loc(#loc54)
  cir.global "private" constant cir_private dsolocal @".str.4" = #cir.const_array<"Finished bad()\00" : !cir.array<!s8i x 15>> : !cir.array<!s8i x 15> {alignment = 1 : i64} loc(#loc55)
  cir.func @main(%arg0: !s32i loc(fused[#loc58, #loc59]), %arg1: !cir.ptr<!cir.ptr<!s8i>> loc(fused[#loc60, #loc61])) -> !s32i extra(#fn_attr) {
    %0 = cir.alloca !s32i, !cir.ptr<!s32i>, ["argc", init] {alignment = 4 : i64} loc(#loc238)
    %1 = cir.alloca !cir.ptr<!cir.ptr<!s8i>>, !cir.ptr<!cir.ptr<!cir.ptr<!s8i>>>, ["argv", init] {alignment = 8 : i64} loc(#loc239)
    %2 = cir.alloca !s32i, !cir.ptr<!s32i>, ["__retval"] {alignment = 4 : i64} loc(#loc57)
    cir.store %arg0, %0 : !s32i, !cir.ptr<!s32i> loc(#loc62)
    cir.store %arg1, %1 : !cir.ptr<!cir.ptr<!s8i>>, !cir.ptr<!cir.ptr<!cir.ptr<!s8i>>> loc(#loc62)
    %3 = cir.const #cir.ptr<null> : !cir.ptr<!s64i> loc(#loc63)
    %4 = cir.call @time(%3) : (!cir.ptr<!s64i>) -> !s64i extra(#fn_attr1) loc(#loc64)
    %5 = cir.cast(integral, %4 : !s64i), !u32i loc(#loc64)
    cir.call @srand(%5) : (!u32i) -> () extra(#fn_attr1) loc(#loc65)
    %6 = cir.get_global @".str.1" : !cir.ptr<!cir.array<!s8i x 18>> loc(#loc52)
    %7 = cir.cast(array_to_ptrdecay, %6 : !cir.ptr<!cir.array<!s8i x 18>>), !cir.ptr<!s8i> loc(#loc52)
    cir.call @printLine(%7) : (!cir.ptr<!s8i>) -> () loc(#loc66)
    %8 = cir.get_global @CWE190_Integer_Overflow__int_fscanf_multiply_05_good : !cir.ptr<!cir.func<!void ()>> loc(#loc240)
    cir.call @CWE190_Integer_Overflow__int_fscanf_multiply_05_good() : () -> () loc(#loc67)
    %9 = cir.get_global @".str.2" : !cir.ptr<!cir.array<!s8i x 16>> loc(#loc53)
    %10 = cir.cast(array_to_ptrdecay, %9 : !cir.ptr<!cir.array<!s8i x 16>>), !cir.ptr<!s8i> loc(#loc53)
    cir.call @printLine(%10) : (!cir.ptr<!s8i>) -> () loc(#loc69)
    %11 = cir.get_global @".str.3" : !cir.ptr<!cir.array<!s8i x 17>> loc(#loc54)
    %12 = cir.cast(array_to_ptrdecay, %11 : !cir.ptr<!cir.array<!s8i x 17>>), !cir.ptr<!s8i> loc(#loc54)
    cir.call @printLine(%12) : (!cir.ptr<!s8i>) -> () loc(#loc70)
    %13 = cir.get_global @CWE190_Integer_Overflow__int_fscanf_multiply_05_bad : !cir.ptr<!cir.func<!void ()>> loc(#loc241)
    cir.call @CWE190_Integer_Overflow__int_fscanf_multiply_05_bad() : () -> () loc(#loc71)
    %14 = cir.get_global @".str.4" : !cir.ptr<!cir.array<!s8i x 15>> loc(#loc55)
    %15 = cir.cast(array_to_ptrdecay, %14 : !cir.ptr<!cir.array<!s8i x 15>>), !cir.ptr<!s8i> loc(#loc55)
    cir.call @printLine(%15) : (!cir.ptr<!s8i>) -> () loc(#loc73)
    %16 = cir.const #cir.int<0> : !s32i loc(#loc74)
    cir.store %16, %2 : !s32i, !cir.ptr<!s32i> loc(#loc242)
    %17 = cir.load %2 : !cir.ptr<!s32i>, !s32i loc(#loc242)
    cir.return %17 : !s32i loc(#loc242)
  } loc(#loc237)
  cir.global "private" internal dsolocal @staticFalse = #cir.int<0> : !s32i {alignment = 4 : i64} loc(#loc243)
  cir.global "private" constant cir_private dsolocal @".str.5" = #cir.const_array<"Benign, fixed string\00" : !cir.array<!s8i x 21>> : !cir.array<!s8i x 21> {alignment = 1 : i64} loc(#loc78)
  cir.global "private" constant cir_private dsolocal @".str.6" = #cir.const_array<"data value is too large to perform arithmetic safely.\00" : !cir.array<!s8i x 54>> : !cir.array<!s8i x 54> {alignment = 1 : i64} loc(#loc79)
  cir.func no_proto internal private @goodB2G1() extra(#fn_attr) {
    %0 = cir.alloca !s32i, !cir.ptr<!s32i>, ["data"] {alignment = 4 : i64} loc(#loc245)
    %1 = cir.const #cir.int<0> : !s32i loc(#loc84)
    cir.store %1, %0 : !s32i, !cir.ptr<!s32i> loc(#loc246)
    cir.scope {
      %2 = cir.get_global @staticTrue : !cir.ptr<!s32i> loc(#loc214)
      %3 = cir.load %2 : !cir.ptr<!s32i>, !s32i loc(#loc88)
      %4 = cir.cast(int_to_bool, %3 : !s32i), !cir.bool loc(#loc88)
      cir.if %4 {
        %5 = cir.get_global @__isoc99_fscanf : !cir.ptr<!cir.func<!s32i (!cir.ptr<!ty__IO_FILE>, !cir.ptr<!s8i>, ...)>> loc(#loc90)
        %6 = cir.get_global @stdin : !cir.ptr<!cir.ptr<!ty__IO_FILE>> loc(#loc216)
        %7 = cir.load %6 : !cir.ptr<!cir.ptr<!ty__IO_FILE>>, !cir.ptr<!ty__IO_FILE> loc(#loc91)
        %8 = cir.get_global @".str" : !cir.ptr<!cir.array<!s8i x 3>> loc(#loc92)
        %9 = cir.cast(array_to_ptrdecay, %8 : !cir.ptr<!cir.array<!s8i x 3>>), !cir.ptr<!s8i> loc(#loc92)
        %10 = cir.call @__isoc99_fscanf(%7, %9, %0) : (!cir.ptr<!ty__IO_FILE>, !cir.ptr<!s8i>, !cir.ptr<!s32i>) -> !s32i loc(#loc90)
      } loc(#loc248)
    } loc(#loc247)
    cir.scope {
      %2 = cir.get_global @staticFalse : !cir.ptr<!s32i> loc(#loc243)
      %3 = cir.load %2 : !cir.ptr<!s32i>, !s32i loc(#loc95)
      %4 = cir.cast(int_to_bool, %3 : !s32i), !cir.bool loc(#loc95)
      cir.if %4 {
        %5 = cir.get_global @".str.5" : !cir.ptr<!cir.array<!s8i x 21>> loc(#loc78)
        %6 = cir.cast(array_to_ptrdecay, %5 : !cir.ptr<!cir.array<!s8i x 21>>), !cir.ptr<!s8i> loc(#loc78)
        cir.call @printLine(%6) : (!cir.ptr<!s8i>) -> () loc(#loc99)
      } else {
        cir.scope {
          %5 = cir.load %0 : !cir.ptr<!s32i>, !s32i loc(#loc102)
          %6 = cir.const #cir.int<0> : !s32i loc(#loc103)
          %7 = cir.cmp(gt, %5, %6) : !s32i, !cir.bool loc(#loc252)
          cir.if %7 {
            cir.scope {
              %8 = cir.load %0 : !cir.ptr<!s32i>, !s32i loc(#loc107)
              %9 = cir.const #cir.int<2147483647> : !s32i loc(#loc108)
              %10 = cir.const #cir.int<2> : !s32i loc(#loc109)
              %11 = cir.binop(div, %9, %10) : !s32i loc(#loc255)
              %12 = cir.cmp(lt, %8, %11) : !s32i, !cir.bool loc(#loc256)
              cir.if %12 {
                %13 = cir.alloca !s32i, !cir.ptr<!s32i>, ["result", init] {alignment = 4 : i64} loc(#loc258)
                %14 = cir.load %0 : !cir.ptr<!s32i>, !s32i loc(#loc116)
                %15 = cir.const #cir.int<2> : !s32i loc(#loc115)
                %16 = cir.binop(mul, %14, %15) nsw : !s32i loc(#loc116)
                cir.store %16, %13 : !s32i, !cir.ptr<!s32i> loc(#loc258)
                %17 = cir.load %13 : !cir.ptr<!s32i>, !s32i loc(#loc117)
                cir.call @printIntLine(%17) : (!s32i) -> () loc(#loc118)
              } else {
                %13 = cir.get_global @".str.6" : !cir.ptr<!cir.array<!s8i x 54>> loc(#loc79)
                %14 = cir.cast(array_to_ptrdecay, %13 : !cir.ptr<!cir.array<!s8i x 54>>), !cir.ptr<!s8i> loc(#loc79)
                cir.call @printLine(%14) : (!cir.ptr<!s8i>) -> () loc(#loc119)
              } loc(#loc257)
            } loc(#loc254)
          } loc(#loc253)
        } loc(#loc251)
      } loc(#loc250)
    } loc(#loc249)
    cir.return loc(#loc81)
  } loc(#loc244)
  cir.func no_proto internal private @goodB2G2() extra(#fn_attr) {
    %0 = cir.alloca !s32i, !cir.ptr<!s32i>, ["data"] {alignment = 4 : i64} loc(#loc260)
    %1 = cir.const #cir.int<0> : !s32i loc(#loc124)
    cir.store %1, %0 : !s32i, !cir.ptr<!s32i> loc(#loc261)
    cir.scope {
      %2 = cir.get_global @staticTrue : !cir.ptr<!s32i> loc(#loc214)
      %3 = cir.load %2 : !cir.ptr<!s32i>, !s32i loc(#loc128)
      %4 = cir.cast(int_to_bool, %3 : !s32i), !cir.bool loc(#loc128)
      cir.if %4 {
        %5 = cir.get_global @__isoc99_fscanf : !cir.ptr<!cir.func<!s32i (!cir.ptr<!ty__IO_FILE>, !cir.ptr<!s8i>, ...)>> loc(#loc130)
        %6 = cir.get_global @stdin : !cir.ptr<!cir.ptr<!ty__IO_FILE>> loc(#loc216)
        %7 = cir.load %6 : !cir.ptr<!cir.ptr<!ty__IO_FILE>>, !cir.ptr<!ty__IO_FILE> loc(#loc131)
        %8 = cir.get_global @".str" : !cir.ptr<!cir.array<!s8i x 3>> loc(#loc132)
        %9 = cir.cast(array_to_ptrdecay, %8 : !cir.ptr<!cir.array<!s8i x 3>>), !cir.ptr<!s8i> loc(#loc132)
        %10 = cir.call @__isoc99_fscanf(%7, %9, %0) : (!cir.ptr<!ty__IO_FILE>, !cir.ptr<!s8i>, !cir.ptr<!s32i>) -> !s32i loc(#loc130)
      } loc(#loc263)
    } loc(#loc262)
    cir.scope {
      %2 = cir.get_global @staticTrue : !cir.ptr<!s32i> loc(#loc214)
      %3 = cir.load %2 : !cir.ptr<!s32i>, !s32i loc(#loc135)
      %4 = cir.cast(int_to_bool, %3 : !s32i), !cir.bool loc(#loc135)
      cir.if %4 {
        cir.scope {
          %5 = cir.load %0 : !cir.ptr<!s32i>, !s32i loc(#loc139)
          %6 = cir.const #cir.int<0> : !s32i loc(#loc140)
          %7 = cir.cmp(gt, %5, %6) : !s32i, !cir.bool loc(#loc267)
          cir.if %7 {
            cir.scope {
              %8 = cir.load %0 : !cir.ptr<!s32i>, !s32i loc(#loc144)
              %9 = cir.const #cir.int<2147483647> : !s32i loc(#loc145)
              %10 = cir.const #cir.int<2> : !s32i loc(#loc146)
              %11 = cir.binop(div, %9, %10) : !s32i loc(#loc270)
              %12 = cir.cmp(lt, %8, %11) : !s32i, !cir.bool loc(#loc271)
              cir.if %12 {
                %13 = cir.alloca !s32i, !cir.ptr<!s32i>, ["result", init] {alignment = 4 : i64} loc(#loc273)
                %14 = cir.load %0 : !cir.ptr<!s32i>, !s32i loc(#loc153)
                %15 = cir.const #cir.int<2> : !s32i loc(#loc152)
                %16 = cir.binop(mul, %14, %15) nsw : !s32i loc(#loc153)
                cir.store %16, %13 : !s32i, !cir.ptr<!s32i> loc(#loc273)
                %17 = cir.load %13 : !cir.ptr<!s32i>, !s32i loc(#loc154)
                cir.call @printIntLine(%17) : (!s32i) -> () loc(#loc155)
              } else {
                %13 = cir.get_global @".str.6" : !cir.ptr<!cir.array<!s8i x 54>> loc(#loc156)
                %14 = cir.cast(array_to_ptrdecay, %13 : !cir.ptr<!cir.array<!s8i x 54>>), !cir.ptr<!s8i> loc(#loc156)
                cir.call @printLine(%14) : (!cir.ptr<!s8i>) -> () loc(#loc157)
              } loc(#loc272)
            } loc(#loc269)
          } loc(#loc268)
        } loc(#loc266)
      } loc(#loc265)
    } loc(#loc264)
    cir.return loc(#loc121)
  } loc(#loc259)
  cir.func no_proto internal private @goodG2B1() extra(#fn_attr) {
    %0 = cir.alloca !s32i, !cir.ptr<!s32i>, ["data"] {alignment = 4 : i64} loc(#loc275)
    %1 = cir.const #cir.int<0> : !s32i loc(#loc162)
    cir.store %1, %0 : !s32i, !cir.ptr<!s32i> loc(#loc276)
    cir.scope {
      %2 = cir.get_global @staticFalse : !cir.ptr<!s32i> loc(#loc243)
      %3 = cir.load %2 : !cir.ptr<!s32i>, !s32i loc(#loc166)
      %4 = cir.cast(int_to_bool, %3 : !s32i), !cir.bool loc(#loc166)
      cir.if %4 {
        %5 = cir.get_global @".str.5" : !cir.ptr<!cir.array<!s8i x 21>> loc(#loc170)
        %6 = cir.cast(array_to_ptrdecay, %5 : !cir.ptr<!cir.array<!s8i x 21>>), !cir.ptr<!s8i> loc(#loc170)
        cir.call @printLine(%6) : (!cir.ptr<!s8i>) -> () loc(#loc171)
      } else {
        %5 = cir.const #cir.int<2> : !s32i loc(#loc172)
        cir.store %5, %0 : !s32i, !cir.ptr<!s32i> loc(#loc279)
      } loc(#loc278)
    } loc(#loc277)
    cir.scope {
      %2 = cir.get_global @staticTrue : !cir.ptr<!s32i> loc(#loc214)
      %3 = cir.load %2 : !cir.ptr<!s32i>, !s32i loc(#loc176)
      %4 = cir.cast(int_to_bool, %3 : !s32i), !cir.bool loc(#loc176)
      cir.if %4 {
        cir.scope {
          %5 = cir.load %0 : !cir.ptr<!s32i>, !s32i loc(#loc180)
          %6 = cir.const #cir.int<0> : !s32i loc(#loc181)
          %7 = cir.cmp(gt, %5, %6) : !s32i, !cir.bool loc(#loc283)
          cir.if %7 {
            %8 = cir.alloca !s32i, !cir.ptr<!s32i>, ["result", init] {alignment = 4 : i64} loc(#loc285)
            %9 = cir.load %0 : !cir.ptr<!s32i>, !s32i loc(#loc185)
            %10 = cir.const #cir.int<2> : !s32i loc(#loc184)
            %11 = cir.binop(mul, %9, %10) nsw : !s32i loc(#loc185)
            cir.store %11, %8 : !s32i, !cir.ptr<!s32i> loc(#loc285)
            %12 = cir.load %8 : !cir.ptr<!s32i>, !s32i loc(#loc186)
            cir.call @printIntLine(%12) : (!s32i) -> () loc(#loc187)
          } loc(#loc284)
        } loc(#loc282)
      } loc(#loc281)
    } loc(#loc280)
    cir.return loc(#loc159)
  } loc(#loc274)
  cir.func no_proto internal private @goodG2B2() extra(#fn_attr) {
    %0 = cir.alloca !s32i, !cir.ptr<!s32i>, ["data"] {alignment = 4 : i64} loc(#loc287)
    %1 = cir.const #cir.int<0> : !s32i loc(#loc192)
    cir.store %1, %0 : !s32i, !cir.ptr<!s32i> loc(#loc288)
    cir.scope {
      %2 = cir.get_global @staticTrue : !cir.ptr<!s32i> loc(#loc214)
      %3 = cir.load %2 : !cir.ptr<!s32i>, !s32i loc(#loc196)
      %4 = cir.cast(int_to_bool, %3 : !s32i), !cir.bool loc(#loc196)
      cir.if %4 {
        %5 = cir.const #cir.int<2> : !s32i loc(#loc198)
        cir.store %5, %0 : !s32i, !cir.ptr<!s32i> loc(#loc291)
      } loc(#loc290)
    } loc(#loc289)
    cir.scope {
      %2 = cir.get_global @staticTrue : !cir.ptr<!s32i> loc(#loc214)
      %3 = cir.load %2 : !cir.ptr<!s32i>, !s32i loc(#loc202)
      %4 = cir.cast(int_to_bool, %3 : !s32i), !cir.bool loc(#loc202)
      cir.if %4 {
        cir.scope {
          %5 = cir.load %0 : !cir.ptr<!s32i>, !s32i loc(#loc206)
          %6 = cir.const #cir.int<0> : !s32i loc(#loc207)
          %7 = cir.cmp(gt, %5, %6) : !s32i, !cir.bool loc(#loc295)
          cir.if %7 {
            %8 = cir.alloca !s32i, !cir.ptr<!s32i>, ["result", init] {alignment = 4 : i64} loc(#loc297)
            %9 = cir.load %0 : !cir.ptr<!s32i>, !s32i loc(#loc211)
            %10 = cir.const #cir.int<2> : !s32i loc(#loc210)
            %11 = cir.binop(mul, %9, %10) nsw : !s32i loc(#loc211)
            cir.store %11, %8 : !s32i, !cir.ptr<!s32i> loc(#loc297)
            %12 = cir.load %8 : !cir.ptr<!s32i>, !s32i loc(#loc212)
            cir.call @printIntLine(%12) : (!s32i) -> () loc(#loc213)
          } loc(#loc296)
        } loc(#loc294)
      } loc(#loc293)
    } loc(#loc292)
    cir.return loc(#loc189)
  } loc(#loc286)
} loc(#loc)
#loc = loc("/home/ladisgin/git_proj/juliet-c/testcases/CWE190_Integer_Overflow/s03/CWE190_Integer_Overflow__int_fscanf_multiply_05.c":0:0)
#loc1 = loc("CWE190_Integer_Overflow__int_fscanf_multiply_05.c":23:1)
#loc2 = loc("CWE190_Integer_Overflow__int_fscanf_multiply_05.c":23:25)
#loc3 = loc("/usr/include/stdio.h":463:1)
#loc4 = loc("/usr/include/stdio.h":465:33)
#loc5 = loc("/usr/include/stdio.h":149:1)
#loc6 = loc("/usr/include/stdio.h":149:14)
#loc7 = loc("CWE190_Integer_Overflow__int_fscanf_multiply_05.c":36:23)
#loc8 = loc("../../../testcasesupport/std_testcase_io.h":18:1)
#loc9 = loc("../../../testcasesupport/std_testcase_io.h":18:33)
#loc10 = loc("CWE190_Integer_Overflow__int_fscanf_multiply_05.c":28:1)
#loc11 = loc("CWE190_Integer_Overflow__int_fscanf_multiply_05.c":47:1)
#loc12 = loc("CWE190_Integer_Overflow__int_fscanf_multiply_05.c":30:5)
#loc13 = loc("CWE190_Integer_Overflow__int_fscanf_multiply_05.c":30:9)
#loc14 = loc("CWE190_Integer_Overflow__int_fscanf_multiply_05.c":32:12)
#loc15 = loc("CWE190_Integer_Overflow__int_fscanf_multiply_05.c":32:5)
#loc16 = loc("CWE190_Integer_Overflow__int_fscanf_multiply_05.c":33:5)
#loc17 = loc("CWE190_Integer_Overflow__int_fscanf_multiply_05.c":37:5)
#loc18 = loc("CWE190_Integer_Overflow__int_fscanf_multiply_05.c":33:8)
#loc19 = loc("CWE190_Integer_Overflow__int_fscanf_multiply_05.c":34:5)
#loc20 = loc("CWE190_Integer_Overflow__int_fscanf_multiply_05.c":36:9)
#loc21 = loc("CWE190_Integer_Overflow__int_fscanf_multiply_05.c":36:16)
#loc22 = loc("CWE190_Integer_Overflow__int_fscanf_multiply_05.c":38:5)
#loc23 = loc("CWE190_Integer_Overflow__int_fscanf_multiply_05.c":46:5)
#loc24 = loc("CWE190_Integer_Overflow__int_fscanf_multiply_05.c":38:8)
#loc25 = loc("CWE190_Integer_Overflow__int_fscanf_multiply_05.c":39:5)
#loc26 = loc("CWE190_Integer_Overflow__int_fscanf_multiply_05.c":40:9)
#loc27 = loc("CWE190_Integer_Overflow__int_fscanf_multiply_05.c":45:9)
#loc28 = loc("CWE190_Integer_Overflow__int_fscanf_multiply_05.c":40:12)
#loc29 = loc("CWE190_Integer_Overflow__int_fscanf_multiply_05.c":40:19)
#loc30 = loc("CWE190_Integer_Overflow__int_fscanf_multiply_05.c":41:9)
#loc31 = loc("CWE190_Integer_Overflow__int_fscanf_multiply_05.c":43:13)
#loc32 = loc("CWE190_Integer_Overflow__int_fscanf_multiply_05.c":43:33)
#loc33 = loc("CWE190_Integer_Overflow__int_fscanf_multiply_05.c":43:26)
#loc34 = loc("CWE190_Integer_Overflow__int_fscanf_multiply_05.c":44:26)
#loc35 = loc("CWE190_Integer_Overflow__int_fscanf_multiply_05.c":44:13)
#loc36 = loc("CWE190_Integer_Overflow__int_fscanf_multiply_05.c":165:1)
#loc37 = loc("CWE190_Integer_Overflow__int_fscanf_multiply_05.c":171:1)
#loc38 = loc("CWE190_Integer_Overflow__int_fscanf_multiply_05.c":167:5)
#loc39 = loc("CWE190_Integer_Overflow__int_fscanf_multiply_05.c":167:14)
#loc40 = loc("CWE190_Integer_Overflow__int_fscanf_multiply_05.c":168:5)
#loc41 = loc("CWE190_Integer_Overflow__int_fscanf_multiply_05.c":168:14)
#loc42 = loc("CWE190_Integer_Overflow__int_fscanf_multiply_05.c":169:5)
#loc43 = loc("CWE190_Integer_Overflow__int_fscanf_multiply_05.c":169:14)
#loc44 = loc("CWE190_Integer_Overflow__int_fscanf_multiply_05.c":170:5)
#loc45 = loc("CWE190_Integer_Overflow__int_fscanf_multiply_05.c":170:14)
#loc46 = loc("/usr/include/stdlib.h":575:1)
#loc47 = loc("/usr/include/stdlib.h":575:41)
#loc48 = loc("/usr/include/time.h":76:1)
#loc49 = loc("/usr/include/time.h":76:38)
#loc50 = loc("../../../testcasesupport/std_testcase_io.h":14:1)
#loc51 = loc("../../../testcasesupport/std_testcase_io.h":14:33)
#loc52 = loc("CWE190_Integer_Overflow__int_fscanf_multiply_05.c":187:15)
#loc53 = loc("CWE190_Integer_Overflow__int_fscanf_multiply_05.c":189:15)
#loc54 = loc("CWE190_Integer_Overflow__int_fscanf_multiply_05.c":192:15)
#loc55 = loc("CWE190_Integer_Overflow__int_fscanf_multiply_05.c":194:15)
#loc56 = loc("CWE190_Integer_Overflow__int_fscanf_multiply_05.c":182:1)
#loc57 = loc("CWE190_Integer_Overflow__int_fscanf_multiply_05.c":197:1)
#loc62 = loc("CWE190_Integer_Overflow__int_fscanf_multiply_05.c":183:1)
#loc63 = loc("CWE190_Integer_Overflow__int_fscanf_multiply_05.c":185:27)
#loc64 = loc("CWE190_Integer_Overflow__int_fscanf_multiply_05.c":185:22)
#loc65 = loc("CWE190_Integer_Overflow__int_fscanf_multiply_05.c":185:5)
#loc66 = loc("CWE190_Integer_Overflow__int_fscanf_multiply_05.c":187:5)
#loc67 = loc("CWE190_Integer_Overflow__int_fscanf_multiply_05.c":188:5)
#loc68 = loc("CWE190_Integer_Overflow__int_fscanf_multiply_05.c":188:58)
#loc69 = loc("CWE190_Integer_Overflow__int_fscanf_multiply_05.c":189:5)
#loc70 = loc("CWE190_Integer_Overflow__int_fscanf_multiply_05.c":192:5)
#loc71 = loc("CWE190_Integer_Overflow__int_fscanf_multiply_05.c":193:5)
#loc72 = loc("CWE190_Integer_Overflow__int_fscanf_multiply_05.c":193:57)
#loc73 = loc("CWE190_Integer_Overflow__int_fscanf_multiply_05.c":194:5)
#loc74 = loc("CWE190_Integer_Overflow__int_fscanf_multiply_05.c":196:12)
#loc75 = loc("CWE190_Integer_Overflow__int_fscanf_multiply_05.c":196:5)
#loc76 = loc("CWE190_Integer_Overflow__int_fscanf_multiply_05.c":24:1)
#loc77 = loc("CWE190_Integer_Overflow__int_fscanf_multiply_05.c":24:26)
#loc78 = loc("CWE190_Integer_Overflow__int_fscanf_multiply_05.c":67:19)
#loc79 = loc("CWE190_Integer_Overflow__int_fscanf_multiply_05.c":81:27)
#loc80 = loc("CWE190_Integer_Overflow__int_fscanf_multiply_05.c":54:1)
#loc81 = loc("CWE190_Integer_Overflow__int_fscanf_multiply_05.c":85:1)
#loc82 = loc("CWE190_Integer_Overflow__int_fscanf_multiply_05.c":56:5)
#loc83 = loc("CWE190_Integer_Overflow__int_fscanf_multiply_05.c":56:9)
#loc84 = loc("CWE190_Integer_Overflow__int_fscanf_multiply_05.c":58:12)
#loc85 = loc("CWE190_Integer_Overflow__int_fscanf_multiply_05.c":58:5)
#loc86 = loc("CWE190_Integer_Overflow__int_fscanf_multiply_05.c":59:5)
#loc87 = loc("CWE190_Integer_Overflow__int_fscanf_multiply_05.c":63:5)
#loc88 = loc("CWE190_Integer_Overflow__int_fscanf_multiply_05.c":59:8)
#loc89 = loc("CWE190_Integer_Overflow__int_fscanf_multiply_05.c":60:5)
#loc90 = loc("CWE190_Integer_Overflow__int_fscanf_multiply_05.c":62:9)
#loc91 = loc("CWE190_Integer_Overflow__int_fscanf_multiply_05.c":62:16)
#loc92 = loc("CWE190_Integer_Overflow__int_fscanf_multiply_05.c":62:23)
#loc93 = loc("CWE190_Integer_Overflow__int_fscanf_multiply_05.c":64:5)
#loc94 = loc("CWE190_Integer_Overflow__int_fscanf_multiply_05.c":84:5)
#loc95 = loc("CWE190_Integer_Overflow__int_fscanf_multiply_05.c":64:8)
#loc96 = loc("CWE190_Integer_Overflow__int_fscanf_multiply_05.c":65:5)
#loc97 = loc("CWE190_Integer_Overflow__int_fscanf_multiply_05.c":68:5)
#loc98 = loc("CWE190_Integer_Overflow__int_fscanf_multiply_05.c":70:5)
#loc99 = loc("CWE190_Integer_Overflow__int_fscanf_multiply_05.c":67:9)
#loc100 = loc("CWE190_Integer_Overflow__int_fscanf_multiply_05.c":71:9)
#loc101 = loc("CWE190_Integer_Overflow__int_fscanf_multiply_05.c":83:9)
#loc102 = loc("CWE190_Integer_Overflow__int_fscanf_multiply_05.c":71:12)
#loc103 = loc("CWE190_Integer_Overflow__int_fscanf_multiply_05.c":71:19)
#loc104 = loc("CWE190_Integer_Overflow__int_fscanf_multiply_05.c":72:9)
#loc105 = loc("CWE190_Integer_Overflow__int_fscanf_multiply_05.c":74:13)
#loc106 = loc("CWE190_Integer_Overflow__int_fscanf_multiply_05.c":82:13)
#loc107 = loc("CWE190_Integer_Overflow__int_fscanf_multiply_05.c":74:17)
#loc108 = loc("CWE190_Integer_Overflow__int_fscanf_multiply_05.c":74:25)
#loc109 = loc("CWE190_Integer_Overflow__int_fscanf_multiply_05.c":74:33)
#loc110 = loc("CWE190_Integer_Overflow__int_fscanf_multiply_05.c":74:34)
#loc111 = loc("CWE190_Integer_Overflow__int_fscanf_multiply_05.c":75:13)
#loc112 = loc("CWE190_Integer_Overflow__int_fscanf_multiply_05.c":78:13)
#loc113 = loc("CWE190_Integer_Overflow__int_fscanf_multiply_05.c":80:13)
#loc114 = loc("CWE190_Integer_Overflow__int_fscanf_multiply_05.c":76:17)
#loc115 = loc("CWE190_Integer_Overflow__int_fscanf_multiply_05.c":76:37)
#loc116 = loc("CWE190_Integer_Overflow__int_fscanf_multiply_05.c":76:30)
#loc117 = loc("CWE190_Integer_Overflow__int_fscanf_multiply_05.c":77:30)
#loc118 = loc("CWE190_Integer_Overflow__int_fscanf_multiply_05.c":77:17)
#loc119 = loc("CWE190_Integer_Overflow__int_fscanf_multiply_05.c":81:17)
#loc120 = loc("CWE190_Integer_Overflow__int_fscanf_multiply_05.c":88:1)
#loc121 = loc("CWE190_Integer_Overflow__int_fscanf_multiply_05.c":114:1)
#loc122 = loc("CWE190_Integer_Overflow__int_fscanf_multiply_05.c":90:5)
#loc123 = loc("CWE190_Integer_Overflow__int_fscanf_multiply_05.c":90:9)
#loc124 = loc("CWE190_Integer_Overflow__int_fscanf_multiply_05.c":92:12)
#loc125 = loc("CWE190_Integer_Overflow__int_fscanf_multiply_05.c":92:5)
#loc126 = loc("CWE190_Integer_Overflow__int_fscanf_multiply_05.c":93:5)
#loc127 = loc("CWE190_Integer_Overflow__int_fscanf_multiply_05.c":97:5)
#loc128 = loc("CWE190_Integer_Overflow__int_fscanf_multiply_05.c":93:8)
#loc129 = loc("CWE190_Integer_Overflow__int_fscanf_multiply_05.c":94:5)
#loc130 = loc("CWE190_Integer_Overflow__int_fscanf_multiply_05.c":96:9)
#loc131 = loc("CWE190_Integer_Overflow__int_fscanf_multiply_05.c":96:16)
#loc132 = loc("CWE190_Integer_Overflow__int_fscanf_multiply_05.c":96:23)
#loc133 = loc("CWE190_Integer_Overflow__int_fscanf_multiply_05.c":98:5)
#loc134 = loc("CWE190_Integer_Overflow__int_fscanf_multiply_05.c":113:5)
#loc135 = loc("CWE190_Integer_Overflow__int_fscanf_multiply_05.c":98:8)
#loc136 = loc("CWE190_Integer_Overflow__int_fscanf_multiply_05.c":99:5)
#loc137 = loc("CWE190_Integer_Overflow__int_fscanf_multiply_05.c":100:9)
#loc138 = loc("CWE190_Integer_Overflow__int_fscanf_multiply_05.c":112:9)
#loc139 = loc("CWE190_Integer_Overflow__int_fscanf_multiply_05.c":100:12)
#loc140 = loc("CWE190_Integer_Overflow__int_fscanf_multiply_05.c":100:19)
#loc141 = loc("CWE190_Integer_Overflow__int_fscanf_multiply_05.c":101:9)
#loc142 = loc("CWE190_Integer_Overflow__int_fscanf_multiply_05.c":103:13)
#loc143 = loc("CWE190_Integer_Overflow__int_fscanf_multiply_05.c":111:13)
#loc144 = loc("CWE190_Integer_Overflow__int_fscanf_multiply_05.c":103:17)
#loc145 = loc("CWE190_Integer_Overflow__int_fscanf_multiply_05.c":103:25)
#loc146 = loc("CWE190_Integer_Overflow__int_fscanf_multiply_05.c":103:33)
#loc147 = loc("CWE190_Integer_Overflow__int_fscanf_multiply_05.c":103:34)
#loc148 = loc("CWE190_Integer_Overflow__int_fscanf_multiply_05.c":104:13)
#loc149 = loc("CWE190_Integer_Overflow__int_fscanf_multiply_05.c":107:13)
#loc150 = loc("CWE190_Integer_Overflow__int_fscanf_multiply_05.c":109:13)
#loc151 = loc("CWE190_Integer_Overflow__int_fscanf_multiply_05.c":105:17)
#loc152 = loc("CWE190_Integer_Overflow__int_fscanf_multiply_05.c":105:37)
#loc153 = loc("CWE190_Integer_Overflow__int_fscanf_multiply_05.c":105:30)
#loc154 = loc("CWE190_Integer_Overflow__int_fscanf_multiply_05.c":106:30)
#loc155 = loc("CWE190_Integer_Overflow__int_fscanf_multiply_05.c":106:17)
#loc156 = loc("CWE190_Integer_Overflow__int_fscanf_multiply_05.c":110:27)
#loc157 = loc("CWE190_Integer_Overflow__int_fscanf_multiply_05.c":110:17)
#loc158 = loc("CWE190_Integer_Overflow__int_fscanf_multiply_05.c":117:1)
#loc159 = loc("CWE190_Integer_Overflow__int_fscanf_multiply_05.c":141:1)
#loc160 = loc("CWE190_Integer_Overflow__int_fscanf_multiply_05.c":119:5)
#loc161 = loc("CWE190_Integer_Overflow__int_fscanf_multiply_05.c":119:9)
#loc162 = loc("CWE190_Integer_Overflow__int_fscanf_multiply_05.c":121:12)
#loc163 = loc("CWE190_Integer_Overflow__int_fscanf_multiply_05.c":121:5)
#loc164 = loc("CWE190_Integer_Overflow__int_fscanf_multiply_05.c":122:5)
#loc165 = loc("CWE190_Integer_Overflow__int_fscanf_multiply_05.c":131:5)
#loc166 = loc("CWE190_Integer_Overflow__int_fscanf_multiply_05.c":122:8)
#loc167 = loc("CWE190_Integer_Overflow__int_fscanf_multiply_05.c":123:5)
#loc168 = loc("CWE190_Integer_Overflow__int_fscanf_multiply_05.c":126:5)
#loc169 = loc("CWE190_Integer_Overflow__int_fscanf_multiply_05.c":128:5)
#loc170 = loc("CWE190_Integer_Overflow__int_fscanf_multiply_05.c":125:19)
#loc171 = loc("CWE190_Integer_Overflow__int_fscanf_multiply_05.c":125:9)
#loc172 = loc("CWE190_Integer_Overflow__int_fscanf_multiply_05.c":130:16)
#loc173 = loc("CWE190_Integer_Overflow__int_fscanf_multiply_05.c":130:9)
#loc174 = loc("CWE190_Integer_Overflow__int_fscanf_multiply_05.c":132:5)
#loc175 = loc("CWE190_Integer_Overflow__int_fscanf_multiply_05.c":140:5)
#loc176 = loc("CWE190_Integer_Overflow__int_fscanf_multiply_05.c":132:8)
#loc177 = loc("CWE190_Integer_Overflow__int_fscanf_multiply_05.c":133:5)
#loc178 = loc("CWE190_Integer_Overflow__int_fscanf_multiply_05.c":134:9)
#loc179 = loc("CWE190_Integer_Overflow__int_fscanf_multiply_05.c":139:9)
#loc180 = loc("CWE190_Integer_Overflow__int_fscanf_multiply_05.c":134:12)
#loc181 = loc("CWE190_Integer_Overflow__int_fscanf_multiply_05.c":134:19)
#loc182 = loc("CWE190_Integer_Overflow__int_fscanf_multiply_05.c":135:9)
#loc183 = loc("CWE190_Integer_Overflow__int_fscanf_multiply_05.c":137:13)
#loc184 = loc("CWE190_Integer_Overflow__int_fscanf_multiply_05.c":137:33)
#loc185 = loc("CWE190_Integer_Overflow__int_fscanf_multiply_05.c":137:26)
#loc186 = loc("CWE190_Integer_Overflow__int_fscanf_multiply_05.c":138:26)
#loc187 = loc("CWE190_Integer_Overflow__int_fscanf_multiply_05.c":138:13)
#loc188 = loc("CWE190_Integer_Overflow__int_fscanf_multiply_05.c":144:1)
#loc189 = loc("CWE190_Integer_Overflow__int_fscanf_multiply_05.c":163:1)
#loc190 = loc("CWE190_Integer_Overflow__int_fscanf_multiply_05.c":146:5)
#loc191 = loc("CWE190_Integer_Overflow__int_fscanf_multiply_05.c":146:9)
#loc192 = loc("CWE190_Integer_Overflow__int_fscanf_multiply_05.c":148:12)
#loc193 = loc("CWE190_Integer_Overflow__int_fscanf_multiply_05.c":148:5)
#loc194 = loc("CWE190_Integer_Overflow__int_fscanf_multiply_05.c":149:5)
#loc195 = loc("CWE190_Integer_Overflow__int_fscanf_multiply_05.c":153:5)
#loc196 = loc("CWE190_Integer_Overflow__int_fscanf_multiply_05.c":149:8)
#loc197 = loc("CWE190_Integer_Overflow__int_fscanf_multiply_05.c":150:5)
#loc198 = loc("CWE190_Integer_Overflow__int_fscanf_multiply_05.c":152:16)
#loc199 = loc("CWE190_Integer_Overflow__int_fscanf_multiply_05.c":152:9)
#loc200 = loc("CWE190_Integer_Overflow__int_fscanf_multiply_05.c":154:5)
#loc201 = loc("CWE190_Integer_Overflow__int_fscanf_multiply_05.c":162:5)
#loc202 = loc("CWE190_Integer_Overflow__int_fscanf_multiply_05.c":154:8)
#loc203 = loc("CWE190_Integer_Overflow__int_fscanf_multiply_05.c":155:5)
#loc204 = loc("CWE190_Integer_Overflow__int_fscanf_multiply_05.c":156:9)
#loc205 = loc("CWE190_Integer_Overflow__int_fscanf_multiply_05.c":161:9)
#loc206 = loc("CWE190_Integer_Overflow__int_fscanf_multiply_05.c":156:12)
#loc207 = loc("CWE190_Integer_Overflow__int_fscanf_multiply_05.c":156:19)
#loc208 = loc("CWE190_Integer_Overflow__int_fscanf_multiply_05.c":157:9)
#loc209 = loc("CWE190_Integer_Overflow__int_fscanf_multiply_05.c":159:13)
#loc210 = loc("CWE190_Integer_Overflow__int_fscanf_multiply_05.c":159:33)
#loc211 = loc("CWE190_Integer_Overflow__int_fscanf_multiply_05.c":159:26)
#loc212 = loc("CWE190_Integer_Overflow__int_fscanf_multiply_05.c":160:26)
#loc213 = loc("CWE190_Integer_Overflow__int_fscanf_multiply_05.c":160:13)
#loc214 = loc(fused[#loc1, #loc2])
#loc215 = loc(fused[#loc3, #loc4])
#loc216 = loc(fused[#loc5, #loc6])
#loc217 = loc(fused[#loc8, #loc9])
#loc218 = loc(fused[#loc10, #loc11])
#loc219 = loc(fused[#loc12, #loc13])
#loc220 = loc(fused[#loc15, #loc14])
#loc221 = loc(fused[#loc16, #loc17])
#loc222 = loc(fused[#loc19, #loc17])
#loc223 = loc(fused[#loc22, #loc23])
#loc224 = loc(fused[#loc25, #loc23])
#loc225 = loc(fused[#loc26, #loc27])
#loc226 = loc(fused[#loc28, #loc29])
#loc227 = loc(fused[#loc30, #loc27])
#loc228 = loc(fused[#loc31, #loc32])
#loc229 = loc(fused[#loc36, #loc37])
#loc230 = loc(fused[#loc38, #loc39])
#loc231 = loc(fused[#loc40, #loc41])
#loc232 = loc(fused[#loc42, #loc43])
#loc233 = loc(fused[#loc44, #loc45])
#loc234 = loc(fused[#loc46, #loc47])
#loc235 = loc(fused[#loc48, #loc49])
#loc236 = loc(fused[#loc50, #loc51])
#loc237 = loc(fused[#loc56, #loc57])
#loc240 = loc(fused[#loc67, #loc68])
#loc241 = loc(fused[#loc71, #loc72])
#loc242 = loc(fused[#loc75, #loc74])
#loc243 = loc(fused[#loc76, #loc77])
#loc244 = loc(fused[#loc80, #loc81])
#loc245 = loc(fused[#loc82, #loc83])
#loc246 = loc(fused[#loc85, #loc84])
#loc247 = loc(fused[#loc86, #loc87])
#loc248 = loc(fused[#loc89, #loc87])
#loc249 = loc(fused[#loc93, #loc94])
#loc250 = loc(fused[#loc96, #loc97, #loc98, #loc94])
#loc251 = loc(fused[#loc100, #loc101])
#loc252 = loc(fused[#loc102, #loc103])
#loc253 = loc(fused[#loc104, #loc101])
#loc254 = loc(fused[#loc105, #loc106])
#loc255 = loc(fused[#loc108, #loc109])
#loc256 = loc(fused[#loc107, #loc110])
#loc257 = loc(fused[#loc111, #loc112, #loc113, #loc106])
#loc258 = loc(fused[#loc114, #loc115])
#loc259 = loc(fused[#loc120, #loc121])
#loc260 = loc(fused[#loc122, #loc123])
#loc261 = loc(fused[#loc125, #loc124])
#loc262 = loc(fused[#loc126, #loc127])
#loc263 = loc(fused[#loc129, #loc127])
#loc264 = loc(fused[#loc133, #loc134])
#loc265 = loc(fused[#loc136, #loc134])
#loc266 = loc(fused[#loc137, #loc138])
#loc267 = loc(fused[#loc139, #loc140])
#loc268 = loc(fused[#loc141, #loc138])
#loc269 = loc(fused[#loc142, #loc143])
#loc270 = loc(fused[#loc145, #loc146])
#loc271 = loc(fused[#loc144, #loc147])
#loc272 = loc(fused[#loc148, #loc149, #loc150, #loc143])
#loc273 = loc(fused[#loc151, #loc152])
#loc274 = loc(fused[#loc158, #loc159])
#loc275 = loc(fused[#loc160, #loc161])
#loc276 = loc(fused[#loc163, #loc162])
#loc277 = loc(fused[#loc164, #loc165])
#loc278 = loc(fused[#loc167, #loc168, #loc169, #loc165])
#loc279 = loc(fused[#loc173, #loc172])
#loc280 = loc(fused[#loc174, #loc175])
#loc281 = loc(fused[#loc177, #loc175])
#loc282 = loc(fused[#loc178, #loc179])
#loc283 = loc(fused[#loc180, #loc181])
#loc284 = loc(fused[#loc182, #loc179])
#loc285 = loc(fused[#loc183, #loc184])
#loc286 = loc(fused[#loc188, #loc189])
#loc287 = loc(fused[#loc190, #loc191])
#loc288 = loc(fused[#loc193, #loc192])
#loc289 = loc(fused[#loc194, #loc195])
#loc290 = loc(fused[#loc197, #loc195])
#loc291 = loc(fused[#loc199, #loc198])
#loc292 = loc(fused[#loc200, #loc201])
#loc293 = loc(fused[#loc203, #loc201])
#loc294 = loc(fused[#loc204, #loc205])
#loc295 = loc(fused[#loc206, #loc207])
#loc296 = loc(fused[#loc208, #loc205])
#loc297 = loc(fused[#loc209, #loc210])
