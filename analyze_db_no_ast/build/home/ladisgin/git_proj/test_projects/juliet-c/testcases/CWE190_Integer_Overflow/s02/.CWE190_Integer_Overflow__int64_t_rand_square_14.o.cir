!s32i = !cir.int<s, 32>
!s64i = !cir.int<s, 64>
!s8i = !cir.int<s, 8>
!u64i = !cir.int<u, 64>
!void = !cir.void
#fn_attr = #cir<extra({nothrow = #cir.nothrow})>
#fn_attr1 = #cir<extra({inline = #cir.inline<no>, nothrow = #cir.nothrow, optnone = #cir.optnone})>
module @"/home/ladisgin/git_proj/test_projects/juliet-c/testcases/CWE190_Integer_Overflow/s02/CWE190_Integer_Overflow__int64_t_rand_square_14.c" attributes {cir.lang = #cir.lang<c>, cir.sob = #cir.signed_overflow_behavior<undefined>, cir.triple = "x86_64-unknown-linux-gnu", dlti.dl_spec = #dlti.dl_spec<#dlti.dl_entry<!llvm.ptr, dense<64> : vector<4xi64>>, #dlti.dl_entry<i1, dense<8> : vector<2xi64>>, #dlti.dl_entry<f80, dense<128> : vector<2xi64>>, #dlti.dl_entry<i128, dense<128> : vector<2xi64>>, #dlti.dl_entry<!llvm.ptr<272>, dense<64> : vector<4xi64>>, #dlti.dl_entry<i64, dense<64> : vector<2xi64>>, #dlti.dl_entry<f128, dense<128> : vector<2xi64>>, #dlti.dl_entry<!llvm.ptr<271>, dense<32> : vector<4xi64>>, #dlti.dl_entry<f16, dense<16> : vector<2xi64>>, #dlti.dl_entry<!llvm.ptr<270>, dense<32> : vector<4xi64>>, #dlti.dl_entry<f64, dense<64> : vector<2xi64>>, #dlti.dl_entry<i32, dense<32> : vector<2xi64>>, #dlti.dl_entry<i8, dense<8> : vector<2xi64>>, #dlti.dl_entry<i16, dense<16> : vector<2xi64>>, #dlti.dl_entry<"dlti.stack_alignment", 128 : i64>, #dlti.dl_entry<"dlti.endianness", "little">>, llvm.data_layout = "e-m:e-p270:32:32-p271:32:32-p272:64:64-i64:64-i128:128-f80:128-n8:16:32:64-S128"} {
  cir.global "private"  external @globalFive : !s32i {alignment = 4 : i64} loc(#loc187)
  cir.func private  @rand() -> !s32i extra(#fn_attr) loc(#loc188)
  cir.func private  @printLongLongLine(!s64i) loc(#loc189)
  cir.func no_proto  @CWE190_Integer_Overflow__int64_t_rand_square_14_bad() extra(#fn_attr1) {
    %0 = cir.alloca !s64i, !cir.ptr<!s64i>, ["data"] {alignment = 8 : i64} loc(#loc191)
    %1 = cir.const #cir.int<0> : !s64i loc(#loc11)
    cir.store %1, %0 : !s64i, !cir.ptr<!s64i> loc(#loc192)
    cir.scope {
      %2 = cir.get_global @globalFive : !cir.ptr<!s32i> loc(#loc187)
      %3 = cir.load %2 : !cir.ptr<!s32i>, !s32i loc(#loc15)
      %4 = cir.const #cir.int<5> : !s32i loc(#loc16)
      %5 = cir.cmp(eq, %3, %4) : !s32i, !s32i loc(#loc194)
      %6 = cir.cast(int_to_bool, %5 : !s32i), !cir.bool loc(#loc17)
      cir.if %6 {
        %7 = cir.call @rand() : () -> !s32i extra(#fn_attr) loc(#loc19)
        %8 = cir.const #cir.int<1> : !s32i loc(#loc19)
        %9 = cir.binop(and, %7, %8) : !s32i loc(#loc19)
        %10 = cir.cast(int_to_bool, %9 : !s32i), !cir.bool loc(#loc19)
        %11 = cir.ternary(%10, true {
          %13 = cir.call @rand() : () -> !s32i extra(#fn_attr) loc(#loc19)
          %14 = cir.cast(integral, %13 : !s32i), !u64i loc(#loc19)
          %15 = cir.const #cir.int<60> : !s32i loc(#loc19)
          %16 = cir.shift(left, %14 : !u64i, %15 : !s32i) -> !u64i loc(#loc19)
          %17 = cir.call @rand() : () -> !s32i extra(#fn_attr) loc(#loc19)
          %18 = cir.cast(integral, %17 : !s32i), !u64i loc(#loc19)
          %19 = cir.const #cir.int<45> : !s32i loc(#loc19)
          %20 = cir.shift(left, %18 : !u64i, %19 : !s32i) -> !u64i loc(#loc19)
          %21 = cir.binop(xor, %16, %20) : !u64i loc(#loc19)
          %22 = cir.call @rand() : () -> !s32i extra(#fn_attr) loc(#loc19)
          %23 = cir.cast(integral, %22 : !s32i), !u64i loc(#loc19)
          %24 = cir.const #cir.int<30> : !s32i loc(#loc19)
          %25 = cir.shift(left, %23 : !u64i, %24 : !s32i) -> !u64i loc(#loc19)
          %26 = cir.binop(xor, %21, %25) : !u64i loc(#loc19)
          %27 = cir.call @rand() : () -> !s32i extra(#fn_attr) loc(#loc19)
          %28 = cir.cast(integral, %27 : !s32i), !u64i loc(#loc19)
          %29 = cir.const #cir.int<15> : !s32i loc(#loc19)
          %30 = cir.shift(left, %28 : !u64i, %29 : !s32i) -> !u64i loc(#loc19)
          %31 = cir.binop(xor, %26, %30) : !u64i loc(#loc19)
          %32 = cir.call @rand() : () -> !s32i extra(#fn_attr) loc(#loc19)
          %33 = cir.cast(integral, %32 : !s32i), !u64i loc(#loc19)
          %34 = cir.binop(xor, %31, %33) : !u64i loc(#loc19)
          cir.yield %34 : !u64i loc(#loc19)
        }, false {
          %13 = cir.call @rand() : () -> !s32i extra(#fn_attr) loc(#loc19)
          %14 = cir.cast(integral, %13 : !s32i), !u64i loc(#loc19)
          %15 = cir.const #cir.int<60> : !s32i loc(#loc19)
          %16 = cir.shift(left, %14 : !u64i, %15 : !s32i) -> !u64i loc(#loc19)
          %17 = cir.call @rand() : () -> !s32i extra(#fn_attr) loc(#loc19)
          %18 = cir.cast(integral, %17 : !s32i), !u64i loc(#loc19)
          %19 = cir.const #cir.int<45> : !s32i loc(#loc19)
          %20 = cir.shift(left, %18 : !u64i, %19 : !s32i) -> !u64i loc(#loc19)
          %21 = cir.binop(xor, %16, %20) : !u64i loc(#loc19)
          %22 = cir.call @rand() : () -> !s32i extra(#fn_attr) loc(#loc19)
          %23 = cir.cast(integral, %22 : !s32i), !u64i loc(#loc19)
          %24 = cir.const #cir.int<30> : !s32i loc(#loc19)
          %25 = cir.shift(left, %23 : !u64i, %24 : !s32i) -> !u64i loc(#loc19)
          %26 = cir.binop(xor, %21, %25) : !u64i loc(#loc19)
          %27 = cir.call @rand() : () -> !s32i extra(#fn_attr) loc(#loc19)
          %28 = cir.cast(integral, %27 : !s32i), !u64i loc(#loc19)
          %29 = cir.const #cir.int<15> : !s32i loc(#loc19)
          %30 = cir.shift(left, %28 : !u64i, %29 : !s32i) -> !u64i loc(#loc19)
          %31 = cir.binop(xor, %26, %30) : !u64i loc(#loc19)
          %32 = cir.call @rand() : () -> !s32i extra(#fn_attr) loc(#loc19)
          %33 = cir.cast(integral, %32 : !s32i), !u64i loc(#loc19)
          %34 = cir.binop(xor, %31, %33) : !u64i loc(#loc19)
          %35 = cir.unary(minus, %34) : !u64i, !u64i loc(#loc19)
          %36 = cir.const #cir.int<1> : !s32i loc(#loc19)
          %37 = cir.cast(integral, %36 : !s32i), !u64i loc(#loc19)
          %38 = cir.binop(sub, %35, %37) : !u64i loc(#loc19)
          cir.yield %38 : !u64i loc(#loc19)
        }) : (!cir.bool) -> !u64i loc(#loc19)
        %12 = cir.cast(integral, %11 : !u64i), !s64i loc(#loc19)
        cir.store %12, %0 : !s64i, !cir.ptr<!s64i> loc(#loc196)
      } loc(#loc195)
    } loc(#loc193)
    cir.scope {
      %2 = cir.get_global @globalFive : !cir.ptr<!s32i> loc(#loc187)
      %3 = cir.load %2 : !cir.ptr<!s32i>, !s32i loc(#loc23)
      %4 = cir.const #cir.int<5> : !s32i loc(#loc24)
      %5 = cir.cmp(eq, %3, %4) : !s32i, !s32i loc(#loc198)
      %6 = cir.cast(int_to_bool, %5 : !s32i), !cir.bool loc(#loc25)
      cir.if %6 {
        cir.scope {
          %7 = cir.alloca !s64i, !cir.ptr<!s64i>, ["result", init] {alignment = 8 : i64} loc(#loc201)
          %8 = cir.load %0 : !cir.ptr<!s64i>, !s64i loc(#loc31)
          %9 = cir.load %0 : !cir.ptr<!s64i>, !s64i loc(#loc30)
          %10 = cir.binop(mul, %8, %9) nsw : !s64i loc(#loc31)
          cir.store %10, %7 : !s64i, !cir.ptr<!s64i> loc(#loc201)
          %11 = cir.load %7 : !cir.ptr<!s64i>, !s64i loc(#loc32)
          cir.call @printLongLongLine(%11) : (!s64i) -> () loc(#loc33)
        } loc(#loc200)
      } loc(#loc199)
    } loc(#loc197)
    cir.return loc(#loc8)
  } loc(#loc190)
  cir.func no_proto  @CWE190_Integer_Overflow__int64_t_rand_square_14_good() extra(#fn_attr1) {
    %0 = cir.get_global @goodB2G1 : !cir.ptr<!cir.func<!void ()>> loc(#loc203)
    cir.call %0() : (!cir.ptr<!cir.func<!void ()>>) -> () loc(#loc36)
    %1 = cir.get_global @goodB2G2 : !cir.ptr<!cir.func<!void ()>> loc(#loc204)
    cir.call %1() : (!cir.ptr<!cir.func<!void ()>>) -> () loc(#loc38)
    %2 = cir.get_global @goodG2B1 : !cir.ptr<!cir.func<!void ()>> loc(#loc205)
    cir.call %2() : (!cir.ptr<!cir.func<!void ()>>) -> () loc(#loc40)
    %3 = cir.get_global @goodG2B2 : !cir.ptr<!cir.func<!void ()>> loc(#loc206)
    cir.call %3() : (!cir.ptr<!cir.func<!void ()>>) -> () loc(#loc42)
    cir.return loc(#loc35)
  } loc(#loc202)
  cir.func private  @printLine(!cir.ptr<!s8i>) loc(#loc207)
  cir.global "private"  constant internal dsolocal @".str" = #cir.const_array<"Benign, fixed string\00" : !cir.array<!s8i x 21>> : !cir.array<!s8i x 21> {alignment = 1 : i64} loc(#loc46)
  cir.func private  @imaxabs(!s64i) -> !s64i extra(#fn_attr) loc(#loc208)
  cir.func private  @sqrtl(!cir.long_double<!cir.f80>) -> !cir.long_double<!cir.f80> extra(#fn_attr) loc(#loc49)
  cir.global "private"  constant internal dsolocal @".str1" = #cir.const_array<"data value is too large to perform arithmetic safely.\00" : !cir.array<!s8i x 54>> : !cir.array<!s8i x 54> {alignment = 1 : i64} loc(#loc50)
  cir.func no_proto internal private  @goodB2G1() extra(#fn_attr1) {
    %0 = cir.alloca !s64i, !cir.ptr<!s64i>, ["data"] {alignment = 8 : i64} loc(#loc210)
    %1 = cir.const #cir.int<0> : !s64i loc(#loc55)
    cir.store %1, %0 : !s64i, !cir.ptr<!s64i> loc(#loc211)
    cir.scope {
      %2 = cir.get_global @globalFive : !cir.ptr<!s32i> loc(#loc187)
      %3 = cir.load %2 : !cir.ptr<!s32i>, !s32i loc(#loc59)
      %4 = cir.const #cir.int<5> : !s32i loc(#loc60)
      %5 = cir.cmp(eq, %3, %4) : !s32i, !s32i loc(#loc213)
      %6 = cir.cast(int_to_bool, %5 : !s32i), !cir.bool loc(#loc61)
      cir.if %6 {
        %7 = cir.call @rand() : () -> !s32i extra(#fn_attr) loc(#loc63)
        %8 = cir.const #cir.int<1> : !s32i loc(#loc63)
        %9 = cir.binop(and, %7, %8) : !s32i loc(#loc63)
        %10 = cir.cast(int_to_bool, %9 : !s32i), !cir.bool loc(#loc63)
        %11 = cir.ternary(%10, true {
          %13 = cir.call @rand() : () -> !s32i extra(#fn_attr) loc(#loc63)
          %14 = cir.cast(integral, %13 : !s32i), !u64i loc(#loc63)
          %15 = cir.const #cir.int<60> : !s32i loc(#loc63)
          %16 = cir.shift(left, %14 : !u64i, %15 : !s32i) -> !u64i loc(#loc63)
          %17 = cir.call @rand() : () -> !s32i extra(#fn_attr) loc(#loc63)
          %18 = cir.cast(integral, %17 : !s32i), !u64i loc(#loc63)
          %19 = cir.const #cir.int<45> : !s32i loc(#loc63)
          %20 = cir.shift(left, %18 : !u64i, %19 : !s32i) -> !u64i loc(#loc63)
          %21 = cir.binop(xor, %16, %20) : !u64i loc(#loc63)
          %22 = cir.call @rand() : () -> !s32i extra(#fn_attr) loc(#loc63)
          %23 = cir.cast(integral, %22 : !s32i), !u64i loc(#loc63)
          %24 = cir.const #cir.int<30> : !s32i loc(#loc63)
          %25 = cir.shift(left, %23 : !u64i, %24 : !s32i) -> !u64i loc(#loc63)
          %26 = cir.binop(xor, %21, %25) : !u64i loc(#loc63)
          %27 = cir.call @rand() : () -> !s32i extra(#fn_attr) loc(#loc63)
          %28 = cir.cast(integral, %27 : !s32i), !u64i loc(#loc63)
          %29 = cir.const #cir.int<15> : !s32i loc(#loc63)
          %30 = cir.shift(left, %28 : !u64i, %29 : !s32i) -> !u64i loc(#loc63)
          %31 = cir.binop(xor, %26, %30) : !u64i loc(#loc63)
          %32 = cir.call @rand() : () -> !s32i extra(#fn_attr) loc(#loc63)
          %33 = cir.cast(integral, %32 : !s32i), !u64i loc(#loc63)
          %34 = cir.binop(xor, %31, %33) : !u64i loc(#loc63)
          cir.yield %34 : !u64i loc(#loc63)
        }, false {
          %13 = cir.call @rand() : () -> !s32i extra(#fn_attr) loc(#loc63)
          %14 = cir.cast(integral, %13 : !s32i), !u64i loc(#loc63)
          %15 = cir.const #cir.int<60> : !s32i loc(#loc63)
          %16 = cir.shift(left, %14 : !u64i, %15 : !s32i) -> !u64i loc(#loc63)
          %17 = cir.call @rand() : () -> !s32i extra(#fn_attr) loc(#loc63)
          %18 = cir.cast(integral, %17 : !s32i), !u64i loc(#loc63)
          %19 = cir.const #cir.int<45> : !s32i loc(#loc63)
          %20 = cir.shift(left, %18 : !u64i, %19 : !s32i) -> !u64i loc(#loc63)
          %21 = cir.binop(xor, %16, %20) : !u64i loc(#loc63)
          %22 = cir.call @rand() : () -> !s32i extra(#fn_attr) loc(#loc63)
          %23 = cir.cast(integral, %22 : !s32i), !u64i loc(#loc63)
          %24 = cir.const #cir.int<30> : !s32i loc(#loc63)
          %25 = cir.shift(left, %23 : !u64i, %24 : !s32i) -> !u64i loc(#loc63)
          %26 = cir.binop(xor, %21, %25) : !u64i loc(#loc63)
          %27 = cir.call @rand() : () -> !s32i extra(#fn_attr) loc(#loc63)
          %28 = cir.cast(integral, %27 : !s32i), !u64i loc(#loc63)
          %29 = cir.const #cir.int<15> : !s32i loc(#loc63)
          %30 = cir.shift(left, %28 : !u64i, %29 : !s32i) -> !u64i loc(#loc63)
          %31 = cir.binop(xor, %26, %30) : !u64i loc(#loc63)
          %32 = cir.call @rand() : () -> !s32i extra(#fn_attr) loc(#loc63)
          %33 = cir.cast(integral, %32 : !s32i), !u64i loc(#loc63)
          %34 = cir.binop(xor, %31, %33) : !u64i loc(#loc63)
          %35 = cir.unary(minus, %34) : !u64i, !u64i loc(#loc63)
          %36 = cir.const #cir.int<1> : !s32i loc(#loc63)
          %37 = cir.cast(integral, %36 : !s32i), !u64i loc(#loc63)
          %38 = cir.binop(sub, %35, %37) : !u64i loc(#loc63)
          cir.yield %38 : !u64i loc(#loc63)
        }) : (!cir.bool) -> !u64i loc(#loc63)
        %12 = cir.cast(integral, %11 : !u64i), !s64i loc(#loc63)
        cir.store %12, %0 : !s64i, !cir.ptr<!s64i> loc(#loc215)
      } loc(#loc214)
    } loc(#loc212)
    cir.scope {
      %2 = cir.get_global @globalFive : !cir.ptr<!s32i> loc(#loc187)
      %3 = cir.load %2 : !cir.ptr<!s32i>, !s32i loc(#loc67)
      %4 = cir.const #cir.int<5> : !s32i loc(#loc68)
      %5 = cir.cmp(ne, %3, %4) : !s32i, !s32i loc(#loc217)
      %6 = cir.cast(int_to_bool, %5 : !s32i), !cir.bool loc(#loc69)
      cir.if %6 {
        %7 = cir.get_global @".str" : !cir.ptr<!cir.array<!s8i x 21>> loc(#loc46)
        %8 = cir.cast(array_to_ptrdecay, %7 : !cir.ptr<!cir.array<!s8i x 21>>), !cir.ptr<!s8i> loc(#loc46)
        cir.call @printLine(%8) : (!cir.ptr<!s8i>) -> () loc(#loc73)
      } else {
        cir.scope {
          %7 = cir.load %0 : !cir.ptr<!s64i>, !s64i loc(#loc76)
          %8 = cir.call @imaxabs(%7) : (!s64i) -> !s64i extra(#fn_attr) loc(#loc77)
          %9 = cir.cast(int_to_float, %8 : !s64i), !cir.long_double<!cir.f80> loc(#loc77)
          %10 = cir.get_global @sqrtl : !cir.ptr<!cir.func<!cir.long_double<!cir.f80> (!cir.long_double<!cir.f80>)>> loc(#loc78)
          %11 = cir.const #cir.int<9223372036854775807> : !s64i loc(#loc79)
          %12 = cir.cast(int_to_float, %11 : !s64i), !cir.long_double<!cir.f80> loc(#loc79)
          %13 = cir.call @sqrtl(%12) : (!cir.long_double<!cir.f80>) -> !cir.long_double<!cir.f80> extra(#fn_attr) loc(#loc78)
          %14 = cir.cmp(le, %9, %13) : !cir.long_double<!cir.f80>, !s32i loc(#loc220)
          %15 = cir.cast(int_to_bool, %14 : !s32i), !cir.bool loc(#loc81)
          cir.if %15 {
            %16 = cir.alloca !s64i, !cir.ptr<!s64i>, ["result", init] {alignment = 8 : i64} loc(#loc222)
            %17 = cir.load %0 : !cir.ptr<!s64i>, !s64i loc(#loc87)
            %18 = cir.load %0 : !cir.ptr<!s64i>, !s64i loc(#loc86)
            %19 = cir.binop(mul, %17, %18) nsw : !s64i loc(#loc87)
            cir.store %19, %16 : !s64i, !cir.ptr<!s64i> loc(#loc222)
            %20 = cir.load %16 : !cir.ptr<!s64i>, !s64i loc(#loc88)
            cir.call @printLongLongLine(%20) : (!s64i) -> () loc(#loc89)
          } else {
            %16 = cir.get_global @".str1" : !cir.ptr<!cir.array<!s8i x 54>> loc(#loc50)
            %17 = cir.cast(array_to_ptrdecay, %16 : !cir.ptr<!cir.array<!s8i x 54>>), !cir.ptr<!s8i> loc(#loc50)
            cir.call @printLine(%17) : (!cir.ptr<!s8i>) -> () loc(#loc90)
          } loc(#loc221)
        } loc(#loc219)
      } loc(#loc218)
    } loc(#loc216)
    cir.return loc(#loc52)
  } loc(#loc209)
  cir.func no_proto internal private  @goodB2G2() extra(#fn_attr1) {
    %0 = cir.alloca !s64i, !cir.ptr<!s64i>, ["data"] {alignment = 8 : i64} loc(#loc224)
    %1 = cir.const #cir.int<0> : !s64i loc(#loc95)
    cir.store %1, %0 : !s64i, !cir.ptr<!s64i> loc(#loc225)
    cir.scope {
      %2 = cir.get_global @globalFive : !cir.ptr<!s32i> loc(#loc187)
      %3 = cir.load %2 : !cir.ptr<!s32i>, !s32i loc(#loc99)
      %4 = cir.const #cir.int<5> : !s32i loc(#loc100)
      %5 = cir.cmp(eq, %3, %4) : !s32i, !s32i loc(#loc227)
      %6 = cir.cast(int_to_bool, %5 : !s32i), !cir.bool loc(#loc101)
      cir.if %6 {
        %7 = cir.call @rand() : () -> !s32i extra(#fn_attr) loc(#loc103)
        %8 = cir.const #cir.int<1> : !s32i loc(#loc103)
        %9 = cir.binop(and, %7, %8) : !s32i loc(#loc103)
        %10 = cir.cast(int_to_bool, %9 : !s32i), !cir.bool loc(#loc103)
        %11 = cir.ternary(%10, true {
          %13 = cir.call @rand() : () -> !s32i extra(#fn_attr) loc(#loc103)
          %14 = cir.cast(integral, %13 : !s32i), !u64i loc(#loc103)
          %15 = cir.const #cir.int<60> : !s32i loc(#loc103)
          %16 = cir.shift(left, %14 : !u64i, %15 : !s32i) -> !u64i loc(#loc103)
          %17 = cir.call @rand() : () -> !s32i extra(#fn_attr) loc(#loc103)
          %18 = cir.cast(integral, %17 : !s32i), !u64i loc(#loc103)
          %19 = cir.const #cir.int<45> : !s32i loc(#loc103)
          %20 = cir.shift(left, %18 : !u64i, %19 : !s32i) -> !u64i loc(#loc103)
          %21 = cir.binop(xor, %16, %20) : !u64i loc(#loc103)
          %22 = cir.call @rand() : () -> !s32i extra(#fn_attr) loc(#loc103)
          %23 = cir.cast(integral, %22 : !s32i), !u64i loc(#loc103)
          %24 = cir.const #cir.int<30> : !s32i loc(#loc103)
          %25 = cir.shift(left, %23 : !u64i, %24 : !s32i) -> !u64i loc(#loc103)
          %26 = cir.binop(xor, %21, %25) : !u64i loc(#loc103)
          %27 = cir.call @rand() : () -> !s32i extra(#fn_attr) loc(#loc103)
          %28 = cir.cast(integral, %27 : !s32i), !u64i loc(#loc103)
          %29 = cir.const #cir.int<15> : !s32i loc(#loc103)
          %30 = cir.shift(left, %28 : !u64i, %29 : !s32i) -> !u64i loc(#loc103)
          %31 = cir.binop(xor, %26, %30) : !u64i loc(#loc103)
          %32 = cir.call @rand() : () -> !s32i extra(#fn_attr) loc(#loc103)
          %33 = cir.cast(integral, %32 : !s32i), !u64i loc(#loc103)
          %34 = cir.binop(xor, %31, %33) : !u64i loc(#loc103)
          cir.yield %34 : !u64i loc(#loc103)
        }, false {
          %13 = cir.call @rand() : () -> !s32i extra(#fn_attr) loc(#loc103)
          %14 = cir.cast(integral, %13 : !s32i), !u64i loc(#loc103)
          %15 = cir.const #cir.int<60> : !s32i loc(#loc103)
          %16 = cir.shift(left, %14 : !u64i, %15 : !s32i) -> !u64i loc(#loc103)
          %17 = cir.call @rand() : () -> !s32i extra(#fn_attr) loc(#loc103)
          %18 = cir.cast(integral, %17 : !s32i), !u64i loc(#loc103)
          %19 = cir.const #cir.int<45> : !s32i loc(#loc103)
          %20 = cir.shift(left, %18 : !u64i, %19 : !s32i) -> !u64i loc(#loc103)
          %21 = cir.binop(xor, %16, %20) : !u64i loc(#loc103)
          %22 = cir.call @rand() : () -> !s32i extra(#fn_attr) loc(#loc103)
          %23 = cir.cast(integral, %22 : !s32i), !u64i loc(#loc103)
          %24 = cir.const #cir.int<30> : !s32i loc(#loc103)
          %25 = cir.shift(left, %23 : !u64i, %24 : !s32i) -> !u64i loc(#loc103)
          %26 = cir.binop(xor, %21, %25) : !u64i loc(#loc103)
          %27 = cir.call @rand() : () -> !s32i extra(#fn_attr) loc(#loc103)
          %28 = cir.cast(integral, %27 : !s32i), !u64i loc(#loc103)
          %29 = cir.const #cir.int<15> : !s32i loc(#loc103)
          %30 = cir.shift(left, %28 : !u64i, %29 : !s32i) -> !u64i loc(#loc103)
          %31 = cir.binop(xor, %26, %30) : !u64i loc(#loc103)
          %32 = cir.call @rand() : () -> !s32i extra(#fn_attr) loc(#loc103)
          %33 = cir.cast(integral, %32 : !s32i), !u64i loc(#loc103)
          %34 = cir.binop(xor, %31, %33) : !u64i loc(#loc103)
          %35 = cir.unary(minus, %34) : !u64i, !u64i loc(#loc103)
          %36 = cir.const #cir.int<1> : !s32i loc(#loc103)
          %37 = cir.cast(integral, %36 : !s32i), !u64i loc(#loc103)
          %38 = cir.binop(sub, %35, %37) : !u64i loc(#loc103)
          cir.yield %38 : !u64i loc(#loc103)
        }) : (!cir.bool) -> !u64i loc(#loc103)
        %12 = cir.cast(integral, %11 : !u64i), !s64i loc(#loc103)
        cir.store %12, %0 : !s64i, !cir.ptr<!s64i> loc(#loc229)
      } loc(#loc228)
    } loc(#loc226)
    cir.scope {
      %2 = cir.get_global @globalFive : !cir.ptr<!s32i> loc(#loc187)
      %3 = cir.load %2 : !cir.ptr<!s32i>, !s32i loc(#loc107)
      %4 = cir.const #cir.int<5> : !s32i loc(#loc108)
      %5 = cir.cmp(eq, %3, %4) : !s32i, !s32i loc(#loc231)
      %6 = cir.cast(int_to_bool, %5 : !s32i), !cir.bool loc(#loc109)
      cir.if %6 {
        cir.scope {
          %7 = cir.load %0 : !cir.ptr<!s64i>, !s64i loc(#loc113)
          %8 = cir.call @imaxabs(%7) : (!s64i) -> !s64i extra(#fn_attr) loc(#loc114)
          %9 = cir.cast(int_to_float, %8 : !s64i), !cir.long_double<!cir.f80> loc(#loc114)
          %10 = cir.get_global @sqrtl : !cir.ptr<!cir.func<!cir.long_double<!cir.f80> (!cir.long_double<!cir.f80>)>> loc(#loc115)
          %11 = cir.const #cir.int<9223372036854775807> : !s64i loc(#loc116)
          %12 = cir.cast(int_to_float, %11 : !s64i), !cir.long_double<!cir.f80> loc(#loc116)
          %13 = cir.call @sqrtl(%12) : (!cir.long_double<!cir.f80>) -> !cir.long_double<!cir.f80> extra(#fn_attr) loc(#loc115)
          %14 = cir.cmp(le, %9, %13) : !cir.long_double<!cir.f80>, !s32i loc(#loc234)
          %15 = cir.cast(int_to_bool, %14 : !s32i), !cir.bool loc(#loc118)
          cir.if %15 {
            %16 = cir.alloca !s64i, !cir.ptr<!s64i>, ["result", init] {alignment = 8 : i64} loc(#loc236)
            %17 = cir.load %0 : !cir.ptr<!s64i>, !s64i loc(#loc124)
            %18 = cir.load %0 : !cir.ptr<!s64i>, !s64i loc(#loc123)
            %19 = cir.binop(mul, %17, %18) nsw : !s64i loc(#loc124)
            cir.store %19, %16 : !s64i, !cir.ptr<!s64i> loc(#loc236)
            %20 = cir.load %16 : !cir.ptr<!s64i>, !s64i loc(#loc125)
            cir.call @printLongLongLine(%20) : (!s64i) -> () loc(#loc126)
          } else {
            %16 = cir.get_global @".str1" : !cir.ptr<!cir.array<!s8i x 54>> loc(#loc127)
            %17 = cir.cast(array_to_ptrdecay, %16 : !cir.ptr<!cir.array<!s8i x 54>>), !cir.ptr<!s8i> loc(#loc127)
            cir.call @printLine(%17) : (!cir.ptr<!s8i>) -> () loc(#loc128)
          } loc(#loc235)
        } loc(#loc233)
      } loc(#loc232)
    } loc(#loc230)
    cir.return loc(#loc92)
  } loc(#loc223)
  cir.func no_proto internal private  @goodG2B1() extra(#fn_attr1) {
    %0 = cir.alloca !s64i, !cir.ptr<!s64i>, ["data"] {alignment = 8 : i64} loc(#loc238)
    %1 = cir.const #cir.int<0> : !s64i loc(#loc133)
    cir.store %1, %0 : !s64i, !cir.ptr<!s64i> loc(#loc239)
    cir.scope {
      %2 = cir.get_global @globalFive : !cir.ptr<!s32i> loc(#loc187)
      %3 = cir.load %2 : !cir.ptr<!s32i>, !s32i loc(#loc137)
      %4 = cir.const #cir.int<5> : !s32i loc(#loc138)
      %5 = cir.cmp(ne, %3, %4) : !s32i, !s32i loc(#loc241)
      %6 = cir.cast(int_to_bool, %5 : !s32i), !cir.bool loc(#loc139)
      cir.if %6 {
        %7 = cir.get_global @".str" : !cir.ptr<!cir.array<!s8i x 21>> loc(#loc143)
        %8 = cir.cast(array_to_ptrdecay, %7 : !cir.ptr<!cir.array<!s8i x 21>>), !cir.ptr<!s8i> loc(#loc143)
        cir.call @printLine(%8) : (!cir.ptr<!s8i>) -> () loc(#loc144)
      } else {
        %7 = cir.const #cir.int<2> : !s32i loc(#loc145)
        %8 = cir.cast(integral, %7 : !s32i), !s64i loc(#loc145)
        cir.store %8, %0 : !s64i, !cir.ptr<!s64i> loc(#loc243)
      } loc(#loc242)
    } loc(#loc240)
    cir.scope {
      %2 = cir.get_global @globalFive : !cir.ptr<!s32i> loc(#loc187)
      %3 = cir.load %2 : !cir.ptr<!s32i>, !s32i loc(#loc149)
      %4 = cir.const #cir.int<5> : !s32i loc(#loc150)
      %5 = cir.cmp(eq, %3, %4) : !s32i, !s32i loc(#loc245)
      %6 = cir.cast(int_to_bool, %5 : !s32i), !cir.bool loc(#loc151)
      cir.if %6 {
        cir.scope {
          %7 = cir.alloca !s64i, !cir.ptr<!s64i>, ["result", init] {alignment = 8 : i64} loc(#loc248)
          %8 = cir.load %0 : !cir.ptr<!s64i>, !s64i loc(#loc157)
          %9 = cir.load %0 : !cir.ptr<!s64i>, !s64i loc(#loc156)
          %10 = cir.binop(mul, %8, %9) nsw : !s64i loc(#loc157)
          cir.store %10, %7 : !s64i, !cir.ptr<!s64i> loc(#loc248)
          %11 = cir.load %7 : !cir.ptr<!s64i>, !s64i loc(#loc158)
          cir.call @printLongLongLine(%11) : (!s64i) -> () loc(#loc159)
        } loc(#loc247)
      } loc(#loc246)
    } loc(#loc244)
    cir.return loc(#loc130)
  } loc(#loc237)
  cir.func no_proto internal private  @goodG2B2() extra(#fn_attr1) {
    %0 = cir.alloca !s64i, !cir.ptr<!s64i>, ["data"] {alignment = 8 : i64} loc(#loc250)
    %1 = cir.const #cir.int<0> : !s64i loc(#loc164)
    cir.store %1, %0 : !s64i, !cir.ptr<!s64i> loc(#loc251)
    cir.scope {
      %2 = cir.get_global @globalFive : !cir.ptr<!s32i> loc(#loc187)
      %3 = cir.load %2 : !cir.ptr<!s32i>, !s32i loc(#loc168)
      %4 = cir.const #cir.int<5> : !s32i loc(#loc169)
      %5 = cir.cmp(eq, %3, %4) : !s32i, !s32i loc(#loc253)
      %6 = cir.cast(int_to_bool, %5 : !s32i), !cir.bool loc(#loc170)
      cir.if %6 {
        %7 = cir.const #cir.int<2> : !s32i loc(#loc172)
        %8 = cir.cast(integral, %7 : !s32i), !s64i loc(#loc172)
        cir.store %8, %0 : !s64i, !cir.ptr<!s64i> loc(#loc255)
      } loc(#loc254)
    } loc(#loc252)
    cir.scope {
      %2 = cir.get_global @globalFive : !cir.ptr<!s32i> loc(#loc187)
      %3 = cir.load %2 : !cir.ptr<!s32i>, !s32i loc(#loc176)
      %4 = cir.const #cir.int<5> : !s32i loc(#loc177)
      %5 = cir.cmp(eq, %3, %4) : !s32i, !s32i loc(#loc257)
      %6 = cir.cast(int_to_bool, %5 : !s32i), !cir.bool loc(#loc178)
      cir.if %6 {
        cir.scope {
          %7 = cir.alloca !s64i, !cir.ptr<!s64i>, ["result", init] {alignment = 8 : i64} loc(#loc260)
          %8 = cir.load %0 : !cir.ptr<!s64i>, !s64i loc(#loc184)
          %9 = cir.load %0 : !cir.ptr<!s64i>, !s64i loc(#loc183)
          %10 = cir.binop(mul, %8, %9) nsw : !s64i loc(#loc184)
          cir.store %10, %7 : !s64i, !cir.ptr<!s64i> loc(#loc260)
          %11 = cir.load %7 : !cir.ptr<!s64i>, !s64i loc(#loc185)
          cir.call @printLongLongLine(%11) : (!s64i) -> () loc(#loc186)
        } loc(#loc259)
      } loc(#loc258)
    } loc(#loc256)
    cir.return loc(#loc161)
  } loc(#loc249)
} loc(#loc)
#loc = loc("/home/ladisgin/git_proj/test_projects/juliet-c/testcases/CWE190_Integer_Overflow/s02/CWE190_Integer_Overflow__int64_t_rand_square_14.c":0:0)
#loc1 = loc("../../../testcasesupport/std_testcase.h":118:1)
#loc2 = loc("../../../testcasesupport/std_testcase.h":118:12)
#loc3 = loc("/usr/include/stdlib.h":573:1)
#loc4 = loc("/usr/include/stdlib.h":573:24)
#loc5 = loc("../../../testcasesupport/std_testcase_io.h":26:1)
#loc6 = loc("../../../testcasesupport/std_testcase_io.h":26:49)
#loc7 = loc("CWE190_Integer_Overflow__int64_t_rand_square_14.c":25:1)
#loc8 = loc("CWE190_Integer_Overflow__int64_t_rand_square_14.c":42:1)
#loc9 = loc("CWE190_Integer_Overflow__int64_t_rand_square_14.c":27:5)
#loc10 = loc("CWE190_Integer_Overflow__int64_t_rand_square_14.c":27:13)
#loc11 = loc("CWE190_Integer_Overflow__int64_t_rand_square_14.c":28:12)
#loc12 = loc("CWE190_Integer_Overflow__int64_t_rand_square_14.c":28:5)
#loc13 = loc("CWE190_Integer_Overflow__int64_t_rand_square_14.c":29:5)
#loc14 = loc("CWE190_Integer_Overflow__int64_t_rand_square_14.c":33:5)
#loc15 = loc("CWE190_Integer_Overflow__int64_t_rand_square_14.c":29:8)
#loc16 = loc("CWE190_Integer_Overflow__int64_t_rand_square_14.c":29:20)
#loc17 = loc("CWE190_Integer_Overflow__int64_t_rand_square_14.c":29:18)
#loc18 = loc("CWE190_Integer_Overflow__int64_t_rand_square_14.c":30:5)
#loc19 = loc("CWE190_Integer_Overflow__int64_t_rand_square_14.c":32:25)
#loc20 = loc("CWE190_Integer_Overflow__int64_t_rand_square_14.c":32:9)
#loc21 = loc("CWE190_Integer_Overflow__int64_t_rand_square_14.c":34:5)
#loc22 = loc("CWE190_Integer_Overflow__int64_t_rand_square_14.c":41:5)
#loc23 = loc("CWE190_Integer_Overflow__int64_t_rand_square_14.c":34:8)
#loc24 = loc("CWE190_Integer_Overflow__int64_t_rand_square_14.c":34:20)
#loc25 = loc("CWE190_Integer_Overflow__int64_t_rand_square_14.c":34:18)
#loc26 = loc("CWE190_Integer_Overflow__int64_t_rand_square_14.c":35:5)
#loc27 = loc("CWE190_Integer_Overflow__int64_t_rand_square_14.c":36:9)
#loc28 = loc("CWE190_Integer_Overflow__int64_t_rand_square_14.c":40:9)
#loc29 = loc("CWE190_Integer_Overflow__int64_t_rand_square_14.c":38:13)
#loc30 = loc("CWE190_Integer_Overflow__int64_t_rand_square_14.c":38:37)
#loc31 = loc("CWE190_Integer_Overflow__int64_t_rand_square_14.c":38:30)
#loc32 = loc("CWE190_Integer_Overflow__int64_t_rand_square_14.c":39:31)
#loc33 = loc("CWE190_Integer_Overflow__int64_t_rand_square_14.c":39:13)
#loc34 = loc("CWE190_Integer_Overflow__int64_t_rand_square_14.c":148:1)
#loc35 = loc("CWE190_Integer_Overflow__int64_t_rand_square_14.c":154:1)
#loc36 = loc("CWE190_Integer_Overflow__int64_t_rand_square_14.c":150:5)
#loc37 = loc("CWE190_Integer_Overflow__int64_t_rand_square_14.c":150:14)
#loc38 = loc("CWE190_Integer_Overflow__int64_t_rand_square_14.c":151:5)
#loc39 = loc("CWE190_Integer_Overflow__int64_t_rand_square_14.c":151:14)
#loc40 = loc("CWE190_Integer_Overflow__int64_t_rand_square_14.c":152:5)
#loc41 = loc("CWE190_Integer_Overflow__int64_t_rand_square_14.c":152:14)
#loc42 = loc("CWE190_Integer_Overflow__int64_t_rand_square_14.c":153:5)
#loc43 = loc("CWE190_Integer_Overflow__int64_t_rand_square_14.c":153:14)
#loc44 = loc("../../../testcasesupport/std_testcase_io.h":14:1)
#loc45 = loc("../../../testcasesupport/std_testcase_io.h":14:33)
#loc46 = loc("CWE190_Integer_Overflow__int64_t_rand_square_14.c":61:19)
#loc47 = loc("/usr/include/inttypes.h":351:1)
#loc48 = loc("/usr/include/inttypes.h":351:74)
#loc49 = loc("/usr/include/bits/mathcalls.h":143:1)
#loc50 = loc("CWE190_Integer_Overflow__int64_t_rand_square_14.c":73:23)
#loc51 = loc("CWE190_Integer_Overflow__int64_t_rand_square_14.c":49:1)
#loc52 = loc("CWE190_Integer_Overflow__int64_t_rand_square_14.c":76:1)
#loc53 = loc("CWE190_Integer_Overflow__int64_t_rand_square_14.c":51:5)
#loc54 = loc("CWE190_Integer_Overflow__int64_t_rand_square_14.c":51:13)
#loc55 = loc("CWE190_Integer_Overflow__int64_t_rand_square_14.c":52:12)
#loc56 = loc("CWE190_Integer_Overflow__int64_t_rand_square_14.c":52:5)
#loc57 = loc("CWE190_Integer_Overflow__int64_t_rand_square_14.c":53:5)
#loc58 = loc("CWE190_Integer_Overflow__int64_t_rand_square_14.c":57:5)
#loc59 = loc("CWE190_Integer_Overflow__int64_t_rand_square_14.c":53:8)
#loc60 = loc("CWE190_Integer_Overflow__int64_t_rand_square_14.c":53:20)
#loc61 = loc("CWE190_Integer_Overflow__int64_t_rand_square_14.c":53:18)
#loc62 = loc("CWE190_Integer_Overflow__int64_t_rand_square_14.c":54:5)
#loc63 = loc("CWE190_Integer_Overflow__int64_t_rand_square_14.c":56:25)
#loc64 = loc("CWE190_Integer_Overflow__int64_t_rand_square_14.c":56:9)
#loc65 = loc("CWE190_Integer_Overflow__int64_t_rand_square_14.c":58:5)
#loc66 = loc("CWE190_Integer_Overflow__int64_t_rand_square_14.c":75:5)
#loc67 = loc("CWE190_Integer_Overflow__int64_t_rand_square_14.c":58:8)
#loc68 = loc("CWE190_Integer_Overflow__int64_t_rand_square_14.c":58:20)
#loc69 = loc("CWE190_Integer_Overflow__int64_t_rand_square_14.c":58:18)
#loc70 = loc("CWE190_Integer_Overflow__int64_t_rand_square_14.c":59:5)
#loc71 = loc("CWE190_Integer_Overflow__int64_t_rand_square_14.c":62:5)
#loc72 = loc("CWE190_Integer_Overflow__int64_t_rand_square_14.c":64:5)
#loc73 = loc("CWE190_Integer_Overflow__int64_t_rand_square_14.c":61:9)
#loc74 = loc("CWE190_Integer_Overflow__int64_t_rand_square_14.c":66:9)
#loc75 = loc("CWE190_Integer_Overflow__int64_t_rand_square_14.c":74:9)
#loc76 = loc("CWE190_Integer_Overflow__int64_t_rand_square_14.c":66:31)
#loc77 = loc("CWE190_Integer_Overflow__int64_t_rand_square_14.c":66:13)
#loc78 = loc("CWE190_Integer_Overflow__int64_t_rand_square_14.c":66:40)
#loc79 = loc("CWE190_Integer_Overflow__int64_t_rand_square_14.c":66:46)
#loc80 = loc("CWE190_Integer_Overflow__int64_t_rand_square_14.c":66:55)
#loc81 = loc("CWE190_Integer_Overflow__int64_t_rand_square_14.c":66:37)
#loc82 = loc("CWE190_Integer_Overflow__int64_t_rand_square_14.c":67:9)
#loc83 = loc("CWE190_Integer_Overflow__int64_t_rand_square_14.c":70:9)
#loc84 = loc("CWE190_Integer_Overflow__int64_t_rand_square_14.c":72:9)
#loc85 = loc("CWE190_Integer_Overflow__int64_t_rand_square_14.c":68:13)
#loc86 = loc("CWE190_Integer_Overflow__int64_t_rand_square_14.c":68:37)
#loc87 = loc("CWE190_Integer_Overflow__int64_t_rand_square_14.c":68:30)
#loc88 = loc("CWE190_Integer_Overflow__int64_t_rand_square_14.c":69:31)
#loc89 = loc("CWE190_Integer_Overflow__int64_t_rand_square_14.c":69:13)
#loc90 = loc("CWE190_Integer_Overflow__int64_t_rand_square_14.c":73:13)
#loc91 = loc("CWE190_Integer_Overflow__int64_t_rand_square_14.c":79:1)
#loc92 = loc("CWE190_Integer_Overflow__int64_t_rand_square_14.c":101:1)
#loc93 = loc("CWE190_Integer_Overflow__int64_t_rand_square_14.c":81:5)
#loc94 = loc("CWE190_Integer_Overflow__int64_t_rand_square_14.c":81:13)
#loc95 = loc("CWE190_Integer_Overflow__int64_t_rand_square_14.c":82:12)
#loc96 = loc("CWE190_Integer_Overflow__int64_t_rand_square_14.c":82:5)
#loc97 = loc("CWE190_Integer_Overflow__int64_t_rand_square_14.c":83:5)
#loc98 = loc("CWE190_Integer_Overflow__int64_t_rand_square_14.c":87:5)
#loc99 = loc("CWE190_Integer_Overflow__int64_t_rand_square_14.c":83:8)
#loc100 = loc("CWE190_Integer_Overflow__int64_t_rand_square_14.c":83:20)
#loc101 = loc("CWE190_Integer_Overflow__int64_t_rand_square_14.c":83:18)
#loc102 = loc("CWE190_Integer_Overflow__int64_t_rand_square_14.c":84:5)
#loc103 = loc("CWE190_Integer_Overflow__int64_t_rand_square_14.c":86:25)
#loc104 = loc("CWE190_Integer_Overflow__int64_t_rand_square_14.c":86:9)
#loc105 = loc("CWE190_Integer_Overflow__int64_t_rand_square_14.c":88:5)
#loc106 = loc("CWE190_Integer_Overflow__int64_t_rand_square_14.c":100:5)
#loc107 = loc("CWE190_Integer_Overflow__int64_t_rand_square_14.c":88:8)
#loc108 = loc("CWE190_Integer_Overflow__int64_t_rand_square_14.c":88:20)
#loc109 = loc("CWE190_Integer_Overflow__int64_t_rand_square_14.c":88:18)
#loc110 = loc("CWE190_Integer_Overflow__int64_t_rand_square_14.c":89:5)
#loc111 = loc("CWE190_Integer_Overflow__int64_t_rand_square_14.c":91:9)
#loc112 = loc("CWE190_Integer_Overflow__int64_t_rand_square_14.c":99:9)
#loc113 = loc("CWE190_Integer_Overflow__int64_t_rand_square_14.c":91:31)
#loc114 = loc("CWE190_Integer_Overflow__int64_t_rand_square_14.c":91:13)
#loc115 = loc("CWE190_Integer_Overflow__int64_t_rand_square_14.c":91:40)
#loc116 = loc("CWE190_Integer_Overflow__int64_t_rand_square_14.c":91:46)
#loc117 = loc("CWE190_Integer_Overflow__int64_t_rand_square_14.c":91:55)
#loc118 = loc("CWE190_Integer_Overflow__int64_t_rand_square_14.c":91:37)
#loc119 = loc("CWE190_Integer_Overflow__int64_t_rand_square_14.c":92:9)
#loc120 = loc("CWE190_Integer_Overflow__int64_t_rand_square_14.c":95:9)
#loc121 = loc("CWE190_Integer_Overflow__int64_t_rand_square_14.c":97:9)
#loc122 = loc("CWE190_Integer_Overflow__int64_t_rand_square_14.c":93:13)
#loc123 = loc("CWE190_Integer_Overflow__int64_t_rand_square_14.c":93:37)
#loc124 = loc("CWE190_Integer_Overflow__int64_t_rand_square_14.c":93:30)
#loc125 = loc("CWE190_Integer_Overflow__int64_t_rand_square_14.c":94:31)
#loc126 = loc("CWE190_Integer_Overflow__int64_t_rand_square_14.c":94:13)
#loc127 = loc("CWE190_Integer_Overflow__int64_t_rand_square_14.c":98:23)
#loc128 = loc("CWE190_Integer_Overflow__int64_t_rand_square_14.c":98:13)
#loc129 = loc("CWE190_Integer_Overflow__int64_t_rand_square_14.c":104:1)
#loc130 = loc("CWE190_Integer_Overflow__int64_t_rand_square_14.c":126:1)
#loc131 = loc("CWE190_Integer_Overflow__int64_t_rand_square_14.c":106:5)
#loc132 = loc("CWE190_Integer_Overflow__int64_t_rand_square_14.c":106:13)
#loc133 = loc("CWE190_Integer_Overflow__int64_t_rand_square_14.c":107:12)
#loc134 = loc("CWE190_Integer_Overflow__int64_t_rand_square_14.c":107:5)
#loc135 = loc("CWE190_Integer_Overflow__int64_t_rand_square_14.c":108:5)
#loc136 = loc("CWE190_Integer_Overflow__int64_t_rand_square_14.c":117:5)
#loc137 = loc("CWE190_Integer_Overflow__int64_t_rand_square_14.c":108:8)
#loc138 = loc("CWE190_Integer_Overflow__int64_t_rand_square_14.c":108:20)
#loc139 = loc("CWE190_Integer_Overflow__int64_t_rand_square_14.c":108:18)
#loc140 = loc("CWE190_Integer_Overflow__int64_t_rand_square_14.c":109:5)
#loc141 = loc("CWE190_Integer_Overflow__int64_t_rand_square_14.c":112:5)
#loc142 = loc("CWE190_Integer_Overflow__int64_t_rand_square_14.c":114:5)
#loc143 = loc("CWE190_Integer_Overflow__int64_t_rand_square_14.c":111:19)
#loc144 = loc("CWE190_Integer_Overflow__int64_t_rand_square_14.c":111:9)
#loc145 = loc("CWE190_Integer_Overflow__int64_t_rand_square_14.c":116:16)
#loc146 = loc("CWE190_Integer_Overflow__int64_t_rand_square_14.c":116:9)
#loc147 = loc("CWE190_Integer_Overflow__int64_t_rand_square_14.c":118:5)
#loc148 = loc("CWE190_Integer_Overflow__int64_t_rand_square_14.c":125:5)
#loc149 = loc("CWE190_Integer_Overflow__int64_t_rand_square_14.c":118:8)
#loc150 = loc("CWE190_Integer_Overflow__int64_t_rand_square_14.c":118:20)
#loc151 = loc("CWE190_Integer_Overflow__int64_t_rand_square_14.c":118:18)
#loc152 = loc("CWE190_Integer_Overflow__int64_t_rand_square_14.c":119:5)
#loc153 = loc("CWE190_Integer_Overflow__int64_t_rand_square_14.c":120:9)
#loc154 = loc("CWE190_Integer_Overflow__int64_t_rand_square_14.c":124:9)
#loc155 = loc("CWE190_Integer_Overflow__int64_t_rand_square_14.c":122:13)
#loc156 = loc("CWE190_Integer_Overflow__int64_t_rand_square_14.c":122:37)
#loc157 = loc("CWE190_Integer_Overflow__int64_t_rand_square_14.c":122:30)
#loc158 = loc("CWE190_Integer_Overflow__int64_t_rand_square_14.c":123:31)
#loc159 = loc("CWE190_Integer_Overflow__int64_t_rand_square_14.c":123:13)
#loc160 = loc("CWE190_Integer_Overflow__int64_t_rand_square_14.c":129:1)
#loc161 = loc("CWE190_Integer_Overflow__int64_t_rand_square_14.c":146:1)
#loc162 = loc("CWE190_Integer_Overflow__int64_t_rand_square_14.c":131:5)
#loc163 = loc("CWE190_Integer_Overflow__int64_t_rand_square_14.c":131:13)
#loc164 = loc("CWE190_Integer_Overflow__int64_t_rand_square_14.c":132:12)
#loc165 = loc("CWE190_Integer_Overflow__int64_t_rand_square_14.c":132:5)
#loc166 = loc("CWE190_Integer_Overflow__int64_t_rand_square_14.c":133:5)
#loc167 = loc("CWE190_Integer_Overflow__int64_t_rand_square_14.c":137:5)
#loc168 = loc("CWE190_Integer_Overflow__int64_t_rand_square_14.c":133:8)
#loc169 = loc("CWE190_Integer_Overflow__int64_t_rand_square_14.c":133:20)
#loc170 = loc("CWE190_Integer_Overflow__int64_t_rand_square_14.c":133:18)
#loc171 = loc("CWE190_Integer_Overflow__int64_t_rand_square_14.c":134:5)
#loc172 = loc("CWE190_Integer_Overflow__int64_t_rand_square_14.c":136:16)
#loc173 = loc("CWE190_Integer_Overflow__int64_t_rand_square_14.c":136:9)
#loc174 = loc("CWE190_Integer_Overflow__int64_t_rand_square_14.c":138:5)
#loc175 = loc("CWE190_Integer_Overflow__int64_t_rand_square_14.c":145:5)
#loc176 = loc("CWE190_Integer_Overflow__int64_t_rand_square_14.c":138:8)
#loc177 = loc("CWE190_Integer_Overflow__int64_t_rand_square_14.c":138:20)
#loc178 = loc("CWE190_Integer_Overflow__int64_t_rand_square_14.c":138:18)
#loc179 = loc("CWE190_Integer_Overflow__int64_t_rand_square_14.c":139:5)
#loc180 = loc("CWE190_Integer_Overflow__int64_t_rand_square_14.c":140:9)
#loc181 = loc("CWE190_Integer_Overflow__int64_t_rand_square_14.c":144:9)
#loc182 = loc("CWE190_Integer_Overflow__int64_t_rand_square_14.c":142:13)
#loc183 = loc("CWE190_Integer_Overflow__int64_t_rand_square_14.c":142:37)
#loc184 = loc("CWE190_Integer_Overflow__int64_t_rand_square_14.c":142:30)
#loc185 = loc("CWE190_Integer_Overflow__int64_t_rand_square_14.c":143:31)
#loc186 = loc("CWE190_Integer_Overflow__int64_t_rand_square_14.c":143:13)
#loc187 = loc(fused[#loc1, #loc2])
#loc188 = loc(fused[#loc3, #loc4])
#loc189 = loc(fused[#loc5, #loc6])
#loc190 = loc(fused[#loc7, #loc8])
#loc191 = loc(fused[#loc9, #loc10])
#loc192 = loc(fused[#loc12, #loc11])
#loc193 = loc(fused[#loc13, #loc14])
#loc194 = loc(fused[#loc15, #loc16])
#loc195 = loc(fused[#loc18, #loc14])
#loc196 = loc(fused[#loc20, #loc19])
#loc197 = loc(fused[#loc21, #loc22])
#loc198 = loc(fused[#loc23, #loc24])
#loc199 = loc(fused[#loc26, #loc22])
#loc200 = loc(fused[#loc27, #loc28])
#loc201 = loc(fused[#loc29, #loc30])
#loc202 = loc(fused[#loc34, #loc35])
#loc203 = loc(fused[#loc36, #loc37])
#loc204 = loc(fused[#loc38, #loc39])
#loc205 = loc(fused[#loc40, #loc41])
#loc206 = loc(fused[#loc42, #loc43])
#loc207 = loc(fused[#loc44, #loc45])
#loc208 = loc(fused[#loc47, #loc48])
#loc209 = loc(fused[#loc51, #loc52])
#loc210 = loc(fused[#loc53, #loc54])
#loc211 = loc(fused[#loc56, #loc55])
#loc212 = loc(fused[#loc57, #loc58])
#loc213 = loc(fused[#loc59, #loc60])
#loc214 = loc(fused[#loc62, #loc58])
#loc215 = loc(fused[#loc64, #loc63])
#loc216 = loc(fused[#loc65, #loc66])
#loc217 = loc(fused[#loc67, #loc68])
#loc218 = loc(fused[#loc70, #loc71, #loc72, #loc66])
#loc219 = loc(fused[#loc74, #loc75])
#loc220 = loc(fused[#loc77, #loc80])
#loc221 = loc(fused[#loc82, #loc83, #loc84, #loc75])
#loc222 = loc(fused[#loc85, #loc86])
#loc223 = loc(fused[#loc91, #loc92])
#loc224 = loc(fused[#loc93, #loc94])
#loc225 = loc(fused[#loc96, #loc95])
#loc226 = loc(fused[#loc97, #loc98])
#loc227 = loc(fused[#loc99, #loc100])
#loc228 = loc(fused[#loc102, #loc98])
#loc229 = loc(fused[#loc104, #loc103])
#loc230 = loc(fused[#loc105, #loc106])
#loc231 = loc(fused[#loc107, #loc108])
#loc232 = loc(fused[#loc110, #loc106])
#loc233 = loc(fused[#loc111, #loc112])
#loc234 = loc(fused[#loc114, #loc117])
#loc235 = loc(fused[#loc119, #loc120, #loc121, #loc112])
#loc236 = loc(fused[#loc122, #loc123])
#loc237 = loc(fused[#loc129, #loc130])
#loc238 = loc(fused[#loc131, #loc132])
#loc239 = loc(fused[#loc134, #loc133])
#loc240 = loc(fused[#loc135, #loc136])
#loc241 = loc(fused[#loc137, #loc138])
#loc242 = loc(fused[#loc140, #loc141, #loc142, #loc136])
#loc243 = loc(fused[#loc146, #loc145])
#loc244 = loc(fused[#loc147, #loc148])
#loc245 = loc(fused[#loc149, #loc150])
#loc246 = loc(fused[#loc152, #loc148])
#loc247 = loc(fused[#loc153, #loc154])
#loc248 = loc(fused[#loc155, #loc156])
#loc249 = loc(fused[#loc160, #loc161])
#loc250 = loc(fused[#loc162, #loc163])
#loc251 = loc(fused[#loc165, #loc164])
#loc252 = loc(fused[#loc166, #loc167])
#loc253 = loc(fused[#loc168, #loc169])
#loc254 = loc(fused[#loc171, #loc167])
#loc255 = loc(fused[#loc173, #loc172])
#loc256 = loc(fused[#loc174, #loc175])
#loc257 = loc(fused[#loc176, #loc177])
#loc258 = loc(fused[#loc179, #loc175])
#loc259 = loc(fused[#loc180, #loc181])
#loc260 = loc(fused[#loc182, #loc183])
