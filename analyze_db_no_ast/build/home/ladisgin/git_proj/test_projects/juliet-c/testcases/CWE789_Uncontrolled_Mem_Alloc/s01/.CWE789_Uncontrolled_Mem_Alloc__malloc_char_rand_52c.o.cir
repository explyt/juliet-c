!s32i = !cir.int<s, 32>
!s8i = !cir.int<s, 8>
!u64i = !cir.int<u, 64>
!void = !cir.void
#false = #cir.bool<false> : !cir.bool
#fn_attr = #cir<extra({nothrow = #cir.nothrow})>
#fn_attr1 = #cir<extra({inline = #cir.inline<no>, nothrow = #cir.nothrow, optnone = #cir.optnone})>
#loc15 = loc("CWE789_Uncontrolled_Mem_Alloc__malloc_char_rand_52c.c":28:66)
#loc16 = loc("CWE789_Uncontrolled_Mem_Alloc__malloc_char_rand_52c.c":28:73)
#loc55 = loc("CWE789_Uncontrolled_Mem_Alloc__malloc_char_rand_52c.c":56:70)
#loc56 = loc("CWE789_Uncontrolled_Mem_Alloc__malloc_char_rand_52c.c":56:77)
#loc98 = loc("CWE789_Uncontrolled_Mem_Alloc__malloc_char_rand_52c.c":80:70)
#loc99 = loc("CWE789_Uncontrolled_Mem_Alloc__malloc_char_rand_52c.c":80:77)
#true = #cir.bool<true> : !cir.bool
#loc147 = loc(fused[#loc15, #loc16])
#loc162 = loc(fused[#loc55, #loc56])
#loc177 = loc(fused[#loc98, #loc99])
module @"/home/ladisgin/git_proj/test_projects/juliet-c/testcases/CWE789_Uncontrolled_Mem_Alloc/s01/CWE789_Uncontrolled_Mem_Alloc__malloc_char_rand_52c.c" attributes {cir.lang = #cir.lang<c>, cir.sob = #cir.signed_overflow_behavior<undefined>, cir.triple = "x86_64-unknown-linux-gnu", dlti.dl_spec = #dlti.dl_spec<#dlti.dl_entry<i8, dense<8> : vector<2xi64>>, #dlti.dl_entry<i16, dense<16> : vector<2xi64>>, #dlti.dl_entry<!llvm.ptr, dense<64> : vector<4xi64>>, #dlti.dl_entry<i1, dense<8> : vector<2xi64>>, #dlti.dl_entry<f64, dense<64> : vector<2xi64>>, #dlti.dl_entry<!llvm.ptr<270>, dense<32> : vector<4xi64>>, #dlti.dl_entry<f16, dense<16> : vector<2xi64>>, #dlti.dl_entry<i32, dense<32> : vector<2xi64>>, #dlti.dl_entry<!llvm.ptr<272>, dense<64> : vector<4xi64>>, #dlti.dl_entry<i64, dense<64> : vector<2xi64>>, #dlti.dl_entry<f128, dense<128> : vector<2xi64>>, #dlti.dl_entry<!llvm.ptr<271>, dense<32> : vector<4xi64>>, #dlti.dl_entry<f80, dense<128> : vector<2xi64>>, #dlti.dl_entry<i128, dense<128> : vector<2xi64>>, #dlti.dl_entry<"dlti.endianness", "little">, #dlti.dl_entry<"dlti.stack_alignment", 128 : i64>>, llvm.data_layout = "e-m:e-p270:32:32-p271:32:32-p272:64:64-i64:64-i128:128-f80:128-n8:16:32:64-S128"} {
  cir.func private  @malloc(!u64i) -> !cir.ptr<!void> extra(#fn_attr) loc(#loc141)
  cir.func private  @exit(!s32i) extra(#fn_attr) loc(#loc142)
  cir.func private  @strcpy(!cir.ptr<!s8i>, !cir.ptr<!s8i>) -> !cir.ptr<!s8i> extra(#fn_attr) loc(#loc143)
  cir.global "private"  constant internal dsolocal @".str" = #cir.const_array<"hello\00" : !cir.array<!s8i x 6>> : !cir.array<!s8i x 6> {alignment = 1 : i64} loc(#loc7)
  cir.func private  @printLine(!cir.ptr<!s8i>) loc(#loc144)
  cir.func private  @free(!cir.ptr<!void>) extra(#fn_attr) loc(#loc145)
  cir.global "private"  constant internal dsolocal @".str1" = #cir.const_array<"Input is less than the length of the source string\00" : !cir.array<!s8i x 51>> : !cir.array<!s8i x 51> {alignment = 1 : i64} loc(#loc12)
  cir.func  @CWE789_Uncontrolled_Mem_Alloc__malloc_char_rand_52c_badSink(%arg0: !u64i loc(fused[#loc15, #loc16])) extra(#fn_attr1) {
    %0 = cir.alloca !u64i, !cir.ptr<!u64i>, ["data", init] {alignment = 8 : i64} loc(#loc147)
    cir.store %arg0, %0 : !u64i, !cir.ptr<!u64i> loc(#loc17)
    cir.scope {
      %1 = cir.alloca !cir.ptr<!s8i>, !cir.ptr<!cir.ptr<!s8i>>, ["myString"] {alignment = 8 : i64} loc(#loc149)
      cir.scope {
        %2 = cir.load %0 : !cir.ptr<!u64i>, !u64i loc(#loc24)
        %3 = cir.const #cir.int<5> : !u64i loc(#loc151)
        %4 = cir.cmp(gt, %2, %3) : !u64i, !s32i loc(#loc152)
        %5 = cir.cast(int_to_bool, %4 : !s32i), !cir.bool loc(#loc27)
        cir.if %5 {
          %6 = cir.get_global @malloc : !cir.ptr<!cir.func<!cir.ptr<!void> (!u64i)>> loc(#loc31)
          %7 = cir.load %0 : !cir.ptr<!u64i>, !u64i loc(#loc32)
          %8 = cir.const #cir.int<1> : !u64i loc(#loc154)
          %9 = cir.binop(mul, %7, %8) : !u64i loc(#loc155)
          %10 = cir.call @malloc(%9) : (!u64i) -> !cir.ptr<!void> extra(#fn_attr) loc(#loc31)
          %11 = cir.cast(bitcast, %10 : !cir.ptr<!void>), !cir.ptr<!s8i> loc(#loc156)
          cir.store %11, %1 : !cir.ptr<!s8i>, !cir.ptr<!cir.ptr<!s8i>> loc(#loc157)
          cir.scope {
            %21 = cir.load %1 : !cir.ptr<!cir.ptr<!s8i>>, !cir.ptr<!s8i> loc(#loc39)
            %22 = cir.const #cir.ptr<null> : !cir.ptr<!void> loc(#loc40)
            %23 = cir.cast(bitcast, %22 : !cir.ptr<!void>), !cir.ptr<!s8i> loc(#loc40)
            %24 = cir.cmp(eq, %21, %23) : !cir.ptr<!s8i>, !s32i loc(#loc159)
            %25 = cir.cast(int_to_bool, %24 : !s32i), !cir.bool loc(#loc41)
            cir.if %25 {
              %26 = cir.get_global @exit : !cir.ptr<!cir.func<!void (!s32i)>> loc(#loc43)
              %27 = cir.const #cir.int<1> : !s32i loc(#loc44)
              %28 = cir.unary(minus, %27) : !s32i, !s32i loc(#loc45)
              cir.call @exit(%28) : (!s32i) -> () extra(#fn_attr) loc(#loc43)
            } loc(#loc160)
          } loc(#loc158)
          %12 = cir.get_global @strcpy : !cir.ptr<!cir.func<!cir.ptr<!s8i> (!cir.ptr<!s8i>, !cir.ptr<!s8i>)>> loc(#loc46)
          %13 = cir.load %1 : !cir.ptr<!cir.ptr<!s8i>>, !cir.ptr<!s8i> loc(#loc47)
          %14 = cir.get_global @".str" : !cir.ptr<!cir.array<!s8i x 6>> loc(#loc7)
          %15 = cir.cast(array_to_ptrdecay, %14 : !cir.ptr<!cir.array<!s8i x 6>>), !cir.ptr<!s8i> loc(#loc7)
          %16 = cir.call @strcpy(%13, %15) : (!cir.ptr<!s8i>, !cir.ptr<!s8i>) -> !cir.ptr<!s8i> extra(#fn_attr) loc(#loc46)
          %17 = cir.load %1 : !cir.ptr<!cir.ptr<!s8i>>, !cir.ptr<!s8i> loc(#loc48)
          cir.call @printLine(%17) : (!cir.ptr<!s8i>) -> () loc(#loc49)
          %18 = cir.get_global @free : !cir.ptr<!cir.func<!void (!cir.ptr<!void>)>> loc(#loc50)
          %19 = cir.load %1 : !cir.ptr<!cir.ptr<!s8i>>, !cir.ptr<!s8i> loc(#loc51)
          %20 = cir.cast(bitcast, %19 : !cir.ptr<!s8i>), !cir.ptr<!void> loc(#loc51)
          cir.call @free(%20) : (!cir.ptr<!void>) -> () extra(#fn_attr) loc(#loc50)
        } else {
          %6 = cir.get_global @".str1" : !cir.ptr<!cir.array<!s8i x 51>> loc(#loc12)
          %7 = cir.cast(array_to_ptrdecay, %6 : !cir.ptr<!cir.array<!s8i x 51>>), !cir.ptr<!s8i> loc(#loc12)
          cir.call @printLine(%7) : (!cir.ptr<!s8i>) -> () loc(#loc52)
        } loc(#loc153)
      } loc(#loc150)
    } loc(#loc148)
    cir.return loc(#loc14)
  } loc(#loc146)
  cir.func  @CWE789_Uncontrolled_Mem_Alloc__malloc_char_rand_52c_goodG2BSink(%arg0: !u64i loc(fused[#loc55, #loc56])) extra(#fn_attr1) {
    %0 = cir.alloca !u64i, !cir.ptr<!u64i>, ["data", init] {alignment = 8 : i64} loc(#loc162)
    cir.store %arg0, %0 : !u64i, !cir.ptr<!u64i> loc(#loc57)
    cir.scope {
      %1 = cir.alloca !cir.ptr<!s8i>, !cir.ptr<!cir.ptr<!s8i>>, ["myString"] {alignment = 8 : i64} loc(#loc164)
      cir.scope {
        %2 = cir.load %0 : !cir.ptr<!u64i>, !u64i loc(#loc64)
        %3 = cir.const #cir.int<5> : !u64i loc(#loc166)
        %4 = cir.cmp(gt, %2, %3) : !u64i, !s32i loc(#loc167)
        %5 = cir.cast(int_to_bool, %4 : !s32i), !cir.bool loc(#loc67)
        cir.if %5 {
          %6 = cir.get_global @malloc : !cir.ptr<!cir.func<!cir.ptr<!void> (!u64i)>> loc(#loc71)
          %7 = cir.load %0 : !cir.ptr<!u64i>, !u64i loc(#loc72)
          %8 = cir.const #cir.int<1> : !u64i loc(#loc169)
          %9 = cir.binop(mul, %7, %8) : !u64i loc(#loc170)
          %10 = cir.call @malloc(%9) : (!u64i) -> !cir.ptr<!void> extra(#fn_attr) loc(#loc71)
          %11 = cir.cast(bitcast, %10 : !cir.ptr<!void>), !cir.ptr<!s8i> loc(#loc171)
          cir.store %11, %1 : !cir.ptr<!s8i>, !cir.ptr<!cir.ptr<!s8i>> loc(#loc172)
          cir.scope {
            %21 = cir.load %1 : !cir.ptr<!cir.ptr<!s8i>>, !cir.ptr<!s8i> loc(#loc79)
            %22 = cir.const #cir.ptr<null> : !cir.ptr<!void> loc(#loc80)
            %23 = cir.cast(bitcast, %22 : !cir.ptr<!void>), !cir.ptr<!s8i> loc(#loc80)
            %24 = cir.cmp(eq, %21, %23) : !cir.ptr<!s8i>, !s32i loc(#loc174)
            %25 = cir.cast(int_to_bool, %24 : !s32i), !cir.bool loc(#loc81)
            cir.if %25 {
              %26 = cir.get_global @exit : !cir.ptr<!cir.func<!void (!s32i)>> loc(#loc83)
              %27 = cir.const #cir.int<1> : !s32i loc(#loc84)
              %28 = cir.unary(minus, %27) : !s32i, !s32i loc(#loc85)
              cir.call @exit(%28) : (!s32i) -> () extra(#fn_attr) loc(#loc83)
            } loc(#loc175)
          } loc(#loc173)
          %12 = cir.get_global @strcpy : !cir.ptr<!cir.func<!cir.ptr<!s8i> (!cir.ptr<!s8i>, !cir.ptr<!s8i>)>> loc(#loc86)
          %13 = cir.load %1 : !cir.ptr<!cir.ptr<!s8i>>, !cir.ptr<!s8i> loc(#loc87)
          %14 = cir.get_global @".str" : !cir.ptr<!cir.array<!s8i x 6>> loc(#loc88)
          %15 = cir.cast(array_to_ptrdecay, %14 : !cir.ptr<!cir.array<!s8i x 6>>), !cir.ptr<!s8i> loc(#loc88)
          %16 = cir.call @strcpy(%13, %15) : (!cir.ptr<!s8i>, !cir.ptr<!s8i>) -> !cir.ptr<!s8i> extra(#fn_attr) loc(#loc86)
          %17 = cir.load %1 : !cir.ptr<!cir.ptr<!s8i>>, !cir.ptr<!s8i> loc(#loc89)
          cir.call @printLine(%17) : (!cir.ptr<!s8i>) -> () loc(#loc90)
          %18 = cir.get_global @free : !cir.ptr<!cir.func<!void (!cir.ptr<!void>)>> loc(#loc91)
          %19 = cir.load %1 : !cir.ptr<!cir.ptr<!s8i>>, !cir.ptr<!s8i> loc(#loc92)
          %20 = cir.cast(bitcast, %19 : !cir.ptr<!s8i>), !cir.ptr<!void> loc(#loc92)
          cir.call @free(%20) : (!cir.ptr<!void>) -> () extra(#fn_attr) loc(#loc91)
        } else {
          %6 = cir.get_global @".str1" : !cir.ptr<!cir.array<!s8i x 51>> loc(#loc93)
          %7 = cir.cast(array_to_ptrdecay, %6 : !cir.ptr<!cir.array<!s8i x 51>>), !cir.ptr<!s8i> loc(#loc93)
          cir.call @printLine(%7) : (!cir.ptr<!s8i>) -> () loc(#loc94)
        } loc(#loc168)
      } loc(#loc165)
    } loc(#loc163)
    cir.return loc(#loc54)
  } loc(#loc161)
  cir.global "private"  constant internal dsolocal @".str2" = #cir.const_array<"Input is less than the length of the source string or too large\00" : !cir.array<!s8i x 64>> : !cir.array<!s8i x 64> {alignment = 1 : i64} loc(#loc95)
  cir.func  @CWE789_Uncontrolled_Mem_Alloc__malloc_char_rand_52c_goodB2GSink(%arg0: !u64i loc(fused[#loc98, #loc99])) extra(#fn_attr1) {
    %0 = cir.alloca !u64i, !cir.ptr<!u64i>, ["data", init] {alignment = 8 : i64} loc(#loc177)
    cir.store %arg0, %0 : !u64i, !cir.ptr<!u64i> loc(#loc100)
    cir.scope {
      %1 = cir.alloca !cir.ptr<!s8i>, !cir.ptr<!cir.ptr<!s8i>>, ["myString"] {alignment = 8 : i64} loc(#loc179)
      cir.scope {
        %2 = cir.load %0 : !cir.ptr<!u64i>, !u64i loc(#loc107)
        %3 = cir.const #cir.int<5> : !u64i loc(#loc181)
        %4 = cir.cmp(gt, %2, %3) : !u64i, !s32i loc(#loc182)
        %5 = cir.cast(int_to_bool, %4 : !s32i), !cir.bool loc(#loc110)
        %6 = cir.ternary(%5, true {
          %7 = cir.load %0 : !cir.ptr<!u64i>, !u64i loc(#loc112)
          %8 = cir.const #cir.int<100> : !s32i loc(#loc113)
          %9 = cir.cast(integral, %8 : !s32i), !u64i loc(#loc113)
          %10 = cir.cmp(lt, %7, %9) : !u64i, !s32i loc(#loc183)
          %11 = cir.cast(int_to_bool, %10 : !s32i), !cir.bool loc(#loc114)
          %12 = cir.ternary(%11, true {
            %13 = cir.const #true loc(#loc111)
            cir.yield %13 : !cir.bool loc(#loc111)
          }, false {
            %13 = cir.const #false loc(#loc111)
            cir.yield %13 : !cir.bool loc(#loc111)
          }) : (!cir.bool) -> !cir.bool loc(#loc111)
          cir.yield %12 : !cir.bool loc(#loc111)
        }, false {
          %7 = cir.const #false loc(#loc111)
          cir.yield %7 : !cir.bool loc(#loc111)
        }) : (!cir.bool) -> !cir.bool loc(#loc111)
        cir.if %6 {
          %7 = cir.get_global @malloc : !cir.ptr<!cir.func<!cir.ptr<!void> (!u64i)>> loc(#loc118)
          %8 = cir.load %0 : !cir.ptr<!u64i>, !u64i loc(#loc119)
          %9 = cir.const #cir.int<1> : !u64i loc(#loc185)
          %10 = cir.binop(mul, %8, %9) : !u64i loc(#loc186)
          %11 = cir.call @malloc(%10) : (!u64i) -> !cir.ptr<!void> extra(#fn_attr) loc(#loc118)
          %12 = cir.cast(bitcast, %11 : !cir.ptr<!void>), !cir.ptr<!s8i> loc(#loc187)
          cir.store %12, %1 : !cir.ptr<!s8i>, !cir.ptr<!cir.ptr<!s8i>> loc(#loc188)
          cir.scope {
            %22 = cir.load %1 : !cir.ptr<!cir.ptr<!s8i>>, !cir.ptr<!s8i> loc(#loc126)
            %23 = cir.const #cir.ptr<null> : !cir.ptr<!void> loc(#loc127)
            %24 = cir.cast(bitcast, %23 : !cir.ptr<!void>), !cir.ptr<!s8i> loc(#loc127)
            %25 = cir.cmp(eq, %22, %24) : !cir.ptr<!s8i>, !s32i loc(#loc190)
            %26 = cir.cast(int_to_bool, %25 : !s32i), !cir.bool loc(#loc128)
            cir.if %26 {
              %27 = cir.get_global @exit : !cir.ptr<!cir.func<!void (!s32i)>> loc(#loc130)
              %28 = cir.const #cir.int<1> : !s32i loc(#loc131)
              %29 = cir.unary(minus, %28) : !s32i, !s32i loc(#loc132)
              cir.call @exit(%29) : (!s32i) -> () extra(#fn_attr) loc(#loc130)
            } loc(#loc191)
          } loc(#loc189)
          %13 = cir.get_global @strcpy : !cir.ptr<!cir.func<!cir.ptr<!s8i> (!cir.ptr<!s8i>, !cir.ptr<!s8i>)>> loc(#loc133)
          %14 = cir.load %1 : !cir.ptr<!cir.ptr<!s8i>>, !cir.ptr<!s8i> loc(#loc134)
          %15 = cir.get_global @".str" : !cir.ptr<!cir.array<!s8i x 6>> loc(#loc135)
          %16 = cir.cast(array_to_ptrdecay, %15 : !cir.ptr<!cir.array<!s8i x 6>>), !cir.ptr<!s8i> loc(#loc135)
          %17 = cir.call @strcpy(%14, %16) : (!cir.ptr<!s8i>, !cir.ptr<!s8i>) -> !cir.ptr<!s8i> extra(#fn_attr) loc(#loc133)
          %18 = cir.load %1 : !cir.ptr<!cir.ptr<!s8i>>, !cir.ptr<!s8i> loc(#loc136)
          cir.call @printLine(%18) : (!cir.ptr<!s8i>) -> () loc(#loc137)
          %19 = cir.get_global @free : !cir.ptr<!cir.func<!void (!cir.ptr<!void>)>> loc(#loc138)
          %20 = cir.load %1 : !cir.ptr<!cir.ptr<!s8i>>, !cir.ptr<!s8i> loc(#loc139)
          %21 = cir.cast(bitcast, %20 : !cir.ptr<!s8i>), !cir.ptr<!void> loc(#loc139)
          cir.call @free(%21) : (!cir.ptr<!void>) -> () extra(#fn_attr) loc(#loc138)
        } else {
          %7 = cir.get_global @".str2" : !cir.ptr<!cir.array<!s8i x 64>> loc(#loc95)
          %8 = cir.cast(array_to_ptrdecay, %7 : !cir.ptr<!cir.array<!s8i x 64>>), !cir.ptr<!s8i> loc(#loc95)
          cir.call @printLine(%8) : (!cir.ptr<!s8i>) -> () loc(#loc140)
        } loc(#loc184)
      } loc(#loc180)
    } loc(#loc178)
    cir.return loc(#loc97)
  } loc(#loc176)
} loc(#loc)
#loc = loc("/home/ladisgin/git_proj/test_projects/juliet-c/testcases/CWE789_Uncontrolled_Mem_Alloc/s01/CWE789_Uncontrolled_Mem_Alloc__malloc_char_rand_52c.c":0:0)
#loc1 = loc("/usr/include/stdlib.h":672:1)
#loc2 = loc("/usr/include/stdlib.h":672:45)
#loc3 = loc("/usr/include/stdlib.h":756:1)
#loc4 = loc("/usr/include/stdlib.h":756:70)
#loc5 = loc("/usr/include/string.h":141:1)
#loc6 = loc("/usr/include/string.h":142:14)
#loc7 = loc("CWE789_Uncontrolled_Mem_Alloc__malloc_char_rand_52c.c":40:30)
#loc8 = loc("../../../testcasesupport/std_testcase_io.h":14:1)
#loc9 = loc("../../../testcasesupport/std_testcase_io.h":14:33)
#loc10 = loc("/usr/include/stdlib.h":687:1)
#loc11 = loc("/usr/include/stdlib.h":687:32)
#loc12 = loc("CWE789_Uncontrolled_Mem_Alloc__malloc_char_rand_52c.c":46:23)
#loc13 = loc("CWE789_Uncontrolled_Mem_Alloc__malloc_char_rand_52c.c":28:1)
#loc14 = loc("CWE789_Uncontrolled_Mem_Alloc__malloc_char_rand_52c.c":49:1)
#loc17 = loc("CWE789_Uncontrolled_Mem_Alloc__malloc_char_rand_52c.c":29:1)
#loc18 = loc("CWE789_Uncontrolled_Mem_Alloc__malloc_char_rand_52c.c":30:5)
#loc19 = loc("CWE789_Uncontrolled_Mem_Alloc__malloc_char_rand_52c.c":48:5)
#loc20 = loc("CWE789_Uncontrolled_Mem_Alloc__malloc_char_rand_52c.c":31:9)
#loc21 = loc("CWE789_Uncontrolled_Mem_Alloc__malloc_char_rand_52c.c":31:16)
#loc22 = loc("CWE789_Uncontrolled_Mem_Alloc__malloc_char_rand_52c.c":35:9)
#loc23 = loc("CWE789_Uncontrolled_Mem_Alloc__malloc_char_rand_52c.c":47:9)
#loc24 = loc("CWE789_Uncontrolled_Mem_Alloc__malloc_char_rand_52c.c":35:13)
#loc25 = loc("CWE789_Uncontrolled_Mem_Alloc__malloc_char_rand_52c.c":35:20)
#loc26 = loc("CWE789_Uncontrolled_Mem_Alloc__malloc_char_rand_52c.c":35:39)
#loc27 = loc("CWE789_Uncontrolled_Mem_Alloc__malloc_char_rand_52c.c":35:18)
#loc28 = loc("CWE789_Uncontrolled_Mem_Alloc__malloc_char_rand_52c.c":36:9)
#loc29 = loc("CWE789_Uncontrolled_Mem_Alloc__malloc_char_rand_52c.c":43:9)
#loc30 = loc("CWE789_Uncontrolled_Mem_Alloc__malloc_char_rand_52c.c":45:9)
#loc31 = loc("CWE789_Uncontrolled_Mem_Alloc__malloc_char_rand_52c.c":37:32)
#loc32 = loc("CWE789_Uncontrolled_Mem_Alloc__malloc_char_rand_52c.c":37:39)
#loc33 = loc("CWE789_Uncontrolled_Mem_Alloc__malloc_char_rand_52c.c":37:44)
#loc34 = loc("CWE789_Uncontrolled_Mem_Alloc__malloc_char_rand_52c.c":37:55)
#loc35 = loc("CWE789_Uncontrolled_Mem_Alloc__malloc_char_rand_52c.c":37:56)
#loc36 = loc("CWE789_Uncontrolled_Mem_Alloc__malloc_char_rand_52c.c":37:13)
#loc37 = loc("CWE789_Uncontrolled_Mem_Alloc__malloc_char_rand_52c.c":38:13)
#loc38 = loc("CWE789_Uncontrolled_Mem_Alloc__malloc_char_rand_52c.c":38:45)
#loc39 = loc("CWE789_Uncontrolled_Mem_Alloc__malloc_char_rand_52c.c":38:17)
#loc40 = loc("CWE789_Uncontrolled_Mem_Alloc__malloc_char_rand_52c.c":38:29)
#loc41 = loc("CWE789_Uncontrolled_Mem_Alloc__malloc_char_rand_52c.c":38:26)
#loc42 = loc("CWE789_Uncontrolled_Mem_Alloc__malloc_char_rand_52c.c":38:35)
#loc43 = loc("CWE789_Uncontrolled_Mem_Alloc__malloc_char_rand_52c.c":38:36)
#loc44 = loc("CWE789_Uncontrolled_Mem_Alloc__malloc_char_rand_52c.c":38:42)
#loc45 = loc("CWE789_Uncontrolled_Mem_Alloc__malloc_char_rand_52c.c":38:41)
#loc46 = loc("CWE789_Uncontrolled_Mem_Alloc__malloc_char_rand_52c.c":40:13)
#loc47 = loc("CWE789_Uncontrolled_Mem_Alloc__malloc_char_rand_52c.c":40:20)
#loc48 = loc("CWE789_Uncontrolled_Mem_Alloc__malloc_char_rand_52c.c":41:23)
#loc49 = loc("CWE789_Uncontrolled_Mem_Alloc__malloc_char_rand_52c.c":41:13)
#loc50 = loc("CWE789_Uncontrolled_Mem_Alloc__malloc_char_rand_52c.c":42:13)
#loc51 = loc("CWE789_Uncontrolled_Mem_Alloc__malloc_char_rand_52c.c":42:18)
#loc52 = loc("CWE789_Uncontrolled_Mem_Alloc__malloc_char_rand_52c.c":46:13)
#loc53 = loc("CWE789_Uncontrolled_Mem_Alloc__malloc_char_rand_52c.c":56:1)
#loc54 = loc("CWE789_Uncontrolled_Mem_Alloc__malloc_char_rand_52c.c":77:1)
#loc57 = loc("CWE789_Uncontrolled_Mem_Alloc__malloc_char_rand_52c.c":57:1)
#loc58 = loc("CWE789_Uncontrolled_Mem_Alloc__malloc_char_rand_52c.c":58:5)
#loc59 = loc("CWE789_Uncontrolled_Mem_Alloc__malloc_char_rand_52c.c":76:5)
#loc60 = loc("CWE789_Uncontrolled_Mem_Alloc__malloc_char_rand_52c.c":59:9)
#loc61 = loc("CWE789_Uncontrolled_Mem_Alloc__malloc_char_rand_52c.c":59:16)
#loc62 = loc("CWE789_Uncontrolled_Mem_Alloc__malloc_char_rand_52c.c":63:9)
#loc63 = loc("CWE789_Uncontrolled_Mem_Alloc__malloc_char_rand_52c.c":75:9)
#loc64 = loc("CWE789_Uncontrolled_Mem_Alloc__malloc_char_rand_52c.c":63:13)
#loc65 = loc("CWE789_Uncontrolled_Mem_Alloc__malloc_char_rand_52c.c":63:20)
#loc66 = loc("CWE789_Uncontrolled_Mem_Alloc__malloc_char_rand_52c.c":63:39)
#loc67 = loc("CWE789_Uncontrolled_Mem_Alloc__malloc_char_rand_52c.c":63:18)
#loc68 = loc("CWE789_Uncontrolled_Mem_Alloc__malloc_char_rand_52c.c":64:9)
#loc69 = loc("CWE789_Uncontrolled_Mem_Alloc__malloc_char_rand_52c.c":71:9)
#loc70 = loc("CWE789_Uncontrolled_Mem_Alloc__malloc_char_rand_52c.c":73:9)
#loc71 = loc("CWE789_Uncontrolled_Mem_Alloc__malloc_char_rand_52c.c":65:32)
#loc72 = loc("CWE789_Uncontrolled_Mem_Alloc__malloc_char_rand_52c.c":65:39)
#loc73 = loc("CWE789_Uncontrolled_Mem_Alloc__malloc_char_rand_52c.c":65:44)
#loc74 = loc("CWE789_Uncontrolled_Mem_Alloc__malloc_char_rand_52c.c":65:55)
#loc75 = loc("CWE789_Uncontrolled_Mem_Alloc__malloc_char_rand_52c.c":65:56)
#loc76 = loc("CWE789_Uncontrolled_Mem_Alloc__malloc_char_rand_52c.c":65:13)
#loc77 = loc("CWE789_Uncontrolled_Mem_Alloc__malloc_char_rand_52c.c":66:13)
#loc78 = loc("CWE789_Uncontrolled_Mem_Alloc__malloc_char_rand_52c.c":66:45)
#loc79 = loc("CWE789_Uncontrolled_Mem_Alloc__malloc_char_rand_52c.c":66:17)
#loc80 = loc("CWE789_Uncontrolled_Mem_Alloc__malloc_char_rand_52c.c":66:29)
#loc81 = loc("CWE789_Uncontrolled_Mem_Alloc__malloc_char_rand_52c.c":66:26)
#loc82 = loc("CWE789_Uncontrolled_Mem_Alloc__malloc_char_rand_52c.c":66:35)
#loc83 = loc("CWE789_Uncontrolled_Mem_Alloc__malloc_char_rand_52c.c":66:36)
#loc84 = loc("CWE789_Uncontrolled_Mem_Alloc__malloc_char_rand_52c.c":66:42)
#loc85 = loc("CWE789_Uncontrolled_Mem_Alloc__malloc_char_rand_52c.c":66:41)
#loc86 = loc("CWE789_Uncontrolled_Mem_Alloc__malloc_char_rand_52c.c":68:13)
#loc87 = loc("CWE789_Uncontrolled_Mem_Alloc__malloc_char_rand_52c.c":68:20)
#loc88 = loc("CWE789_Uncontrolled_Mem_Alloc__malloc_char_rand_52c.c":68:30)
#loc89 = loc("CWE789_Uncontrolled_Mem_Alloc__malloc_char_rand_52c.c":69:23)
#loc90 = loc("CWE789_Uncontrolled_Mem_Alloc__malloc_char_rand_52c.c":69:13)
#loc91 = loc("CWE789_Uncontrolled_Mem_Alloc__malloc_char_rand_52c.c":70:13)
#loc92 = loc("CWE789_Uncontrolled_Mem_Alloc__malloc_char_rand_52c.c":70:18)
#loc93 = loc("CWE789_Uncontrolled_Mem_Alloc__malloc_char_rand_52c.c":74:23)
#loc94 = loc("CWE789_Uncontrolled_Mem_Alloc__malloc_char_rand_52c.c":74:13)
#loc95 = loc("CWE789_Uncontrolled_Mem_Alloc__malloc_char_rand_52c.c":98:23)
#loc96 = loc("CWE789_Uncontrolled_Mem_Alloc__malloc_char_rand_52c.c":80:1)
#loc97 = loc("CWE789_Uncontrolled_Mem_Alloc__malloc_char_rand_52c.c":101:1)
#loc100 = loc("CWE789_Uncontrolled_Mem_Alloc__malloc_char_rand_52c.c":81:1)
#loc101 = loc("CWE789_Uncontrolled_Mem_Alloc__malloc_char_rand_52c.c":82:5)
#loc102 = loc("CWE789_Uncontrolled_Mem_Alloc__malloc_char_rand_52c.c":100:5)
#loc103 = loc("CWE789_Uncontrolled_Mem_Alloc__malloc_char_rand_52c.c":83:9)
#loc104 = loc("CWE789_Uncontrolled_Mem_Alloc__malloc_char_rand_52c.c":83:16)
#loc105 = loc("CWE789_Uncontrolled_Mem_Alloc__malloc_char_rand_52c.c":87:9)
#loc106 = loc("CWE789_Uncontrolled_Mem_Alloc__malloc_char_rand_52c.c":99:9)
#loc107 = loc("CWE789_Uncontrolled_Mem_Alloc__malloc_char_rand_52c.c":87:13)
#loc108 = loc("CWE789_Uncontrolled_Mem_Alloc__malloc_char_rand_52c.c":87:20)
#loc109 = loc("CWE789_Uncontrolled_Mem_Alloc__malloc_char_rand_52c.c":87:39)
#loc110 = loc("CWE789_Uncontrolled_Mem_Alloc__malloc_char_rand_52c.c":87:18)
#loc111 = loc("CWE789_Uncontrolled_Mem_Alloc__malloc_char_rand_52c.c":87:41)
#loc112 = loc("CWE789_Uncontrolled_Mem_Alloc__malloc_char_rand_52c.c":87:44)
#loc113 = loc("CWE789_Uncontrolled_Mem_Alloc__malloc_char_rand_52c.c":87:51)
#loc114 = loc("CWE789_Uncontrolled_Mem_Alloc__malloc_char_rand_52c.c":87:49)
#loc115 = loc("CWE789_Uncontrolled_Mem_Alloc__malloc_char_rand_52c.c":88:9)
#loc116 = loc("CWE789_Uncontrolled_Mem_Alloc__malloc_char_rand_52c.c":95:9)
#loc117 = loc("CWE789_Uncontrolled_Mem_Alloc__malloc_char_rand_52c.c":97:9)
#loc118 = loc("CWE789_Uncontrolled_Mem_Alloc__malloc_char_rand_52c.c":89:32)
#loc119 = loc("CWE789_Uncontrolled_Mem_Alloc__malloc_char_rand_52c.c":89:39)
#loc120 = loc("CWE789_Uncontrolled_Mem_Alloc__malloc_char_rand_52c.c":89:44)
#loc121 = loc("CWE789_Uncontrolled_Mem_Alloc__malloc_char_rand_52c.c":89:55)
#loc122 = loc("CWE789_Uncontrolled_Mem_Alloc__malloc_char_rand_52c.c":89:56)
#loc123 = loc("CWE789_Uncontrolled_Mem_Alloc__malloc_char_rand_52c.c":89:13)
#loc124 = loc("CWE789_Uncontrolled_Mem_Alloc__malloc_char_rand_52c.c":90:13)
#loc125 = loc("CWE789_Uncontrolled_Mem_Alloc__malloc_char_rand_52c.c":90:45)
#loc126 = loc("CWE789_Uncontrolled_Mem_Alloc__malloc_char_rand_52c.c":90:17)
#loc127 = loc("CWE789_Uncontrolled_Mem_Alloc__malloc_char_rand_52c.c":90:29)
#loc128 = loc("CWE789_Uncontrolled_Mem_Alloc__malloc_char_rand_52c.c":90:26)
#loc129 = loc("CWE789_Uncontrolled_Mem_Alloc__malloc_char_rand_52c.c":90:35)
#loc130 = loc("CWE789_Uncontrolled_Mem_Alloc__malloc_char_rand_52c.c":90:36)
#loc131 = loc("CWE789_Uncontrolled_Mem_Alloc__malloc_char_rand_52c.c":90:42)
#loc132 = loc("CWE789_Uncontrolled_Mem_Alloc__malloc_char_rand_52c.c":90:41)
#loc133 = loc("CWE789_Uncontrolled_Mem_Alloc__malloc_char_rand_52c.c":92:13)
#loc134 = loc("CWE789_Uncontrolled_Mem_Alloc__malloc_char_rand_52c.c":92:20)
#loc135 = loc("CWE789_Uncontrolled_Mem_Alloc__malloc_char_rand_52c.c":92:30)
#loc136 = loc("CWE789_Uncontrolled_Mem_Alloc__malloc_char_rand_52c.c":93:23)
#loc137 = loc("CWE789_Uncontrolled_Mem_Alloc__malloc_char_rand_52c.c":93:13)
#loc138 = loc("CWE789_Uncontrolled_Mem_Alloc__malloc_char_rand_52c.c":94:13)
#loc139 = loc("CWE789_Uncontrolled_Mem_Alloc__malloc_char_rand_52c.c":94:18)
#loc140 = loc("CWE789_Uncontrolled_Mem_Alloc__malloc_char_rand_52c.c":98:13)
#loc141 = loc(fused[#loc1, #loc2])
#loc142 = loc(fused[#loc3, #loc4])
#loc143 = loc(fused[#loc5, #loc6])
#loc144 = loc(fused[#loc8, #loc9])
#loc145 = loc(fused[#loc10, #loc11])
#loc146 = loc(fused[#loc13, #loc14])
#loc148 = loc(fused[#loc18, #loc19])
#loc149 = loc(fused[#loc20, #loc21])
#loc150 = loc(fused[#loc22, #loc23])
#loc151 = loc(fused[#loc25, #loc26])
#loc152 = loc(fused[#loc24, #loc26])
#loc153 = loc(fused[#loc28, #loc29, #loc30, #loc23])
#loc154 = loc(fused[#loc33, #loc34])
#loc155 = loc(fused[#loc32, #loc34])
#loc156 = loc(fused[#loc31, #loc35])
#loc157 = loc(fused[#loc36, #loc35])
#loc158 = loc(fused[#loc37, #loc38])
#loc159 = loc(fused[#loc39, #loc40])
#loc160 = loc(fused[#loc42, #loc38])
#loc161 = loc(fused[#loc53, #loc54])
#loc163 = loc(fused[#loc58, #loc59])
#loc164 = loc(fused[#loc60, #loc61])
#loc165 = loc(fused[#loc62, #loc63])
#loc166 = loc(fused[#loc65, #loc66])
#loc167 = loc(fused[#loc64, #loc66])
#loc168 = loc(fused[#loc68, #loc69, #loc70, #loc63])
#loc169 = loc(fused[#loc73, #loc74])
#loc170 = loc(fused[#loc72, #loc74])
#loc171 = loc(fused[#loc71, #loc75])
#loc172 = loc(fused[#loc76, #loc75])
#loc173 = loc(fused[#loc77, #loc78])
#loc174 = loc(fused[#loc79, #loc80])
#loc175 = loc(fused[#loc82, #loc78])
#loc176 = loc(fused[#loc96, #loc97])
#loc178 = loc(fused[#loc101, #loc102])
#loc179 = loc(fused[#loc103, #loc104])
#loc180 = loc(fused[#loc105, #loc106])
#loc181 = loc(fused[#loc108, #loc109])
#loc182 = loc(fused[#loc107, #loc109])
#loc183 = loc(fused[#loc112, #loc113])
#loc184 = loc(fused[#loc115, #loc116, #loc117, #loc106])
#loc185 = loc(fused[#loc120, #loc121])
#loc186 = loc(fused[#loc119, #loc121])
#loc187 = loc(fused[#loc118, #loc122])
#loc188 = loc(fused[#loc123, #loc122])
#loc189 = loc(fused[#loc124, #loc125])
#loc190 = loc(fused[#loc126, #loc127])
#loc191 = loc(fused[#loc129, #loc125])
