!s32i = !cir.int<s, 32>
!s64i = !cir.int<s, 64>
!s8i = !cir.int<s, 8>
!u16i = !cir.int<u, 16>
!u32i = !cir.int<u, 32>
!u64i = !cir.int<u, 64>
!u8i = !cir.int<u, 8>
!void = !cir.void
#false = #cir.bool<false> : !cir.bool
#fn_attr = #cir<extra({nothrow = #cir.nothrow})>
#fn_attr1 = #cir<extra({inline = #cir.inline<no>, nothrow = #cir.nothrow, optnone = #cir.optnone, uwtable = #cir.uwtable<async>})>
#loc20 = loc("CWE369_Divide_by_Zero__float_connect_socket_41.c":46:21)
#loc21 = loc("CWE369_Divide_by_Zero__float_connect_socket_41.c":46:27)
#loc139 = loc("CWE369_Divide_by_Zero__float_connect_socket_41.c":144:25)
#loc140 = loc("CWE369_Divide_by_Zero__float_connect_socket_41.c":144:31)
#loc253 = loc("CWE369_Divide_by_Zero__float_connect_socket_41.c":124:25)
#loc254 = loc("CWE369_Divide_by_Zero__float_connect_socket_41.c":124:31)
#true = #cir.bool<true> : !cir.bool
!ty_in_addr = !cir.record<struct "in_addr" {!u32i} #cir.record.decl.ast>
#loc283 = loc(fused[#loc20, #loc21])
#loc327 = loc(fused[#loc139, #loc140])
#loc369 = loc(fused[#loc253, #loc254])
!ty_sockaddr = !cir.record<struct "sockaddr" {!u16i, !cir.array<!s8i x 14>} #cir.record.decl.ast>
!ty_sockaddr_in = !cir.record<struct "sockaddr_in" {!u16i, !u16i, !ty_in_addr, !cir.array<!u8i x 8>}>
module @"/workspaces/juliet-c/testcases/CWE369_Divide_by_Zero/s01/CWE369_Divide_by_Zero__float_connect_socket_41.c" attributes {cir.lang = #cir.lang<c>, cir.sob = #cir.signed_overflow_behavior<undefined>, cir.triple = "x86_64-unknown-linux-gnu", cir.type_size_info = #cir.type_size_info<char = 8, int = 32, size_t = 64>, cir.uwtable = #cir.uwtable<async>, dlti.dl_spec = #dlti.dl_spec<!llvm.ptr<270> = dense<32> : vector<4xi64>, i16 = dense<16> : vector<2xi64>, i8 = dense<8> : vector<2xi64>, i1 = dense<8> : vector<2xi64>, !llvm.ptr = dense<64> : vector<4xi64>, f80 = dense<128> : vector<2xi64>, i64 = dense<64> : vector<2xi64>, i128 = dense<128> : vector<2xi64>, !llvm.ptr<272> = dense<64> : vector<4xi64>, !llvm.ptr<271> = dense<32> : vector<4xi64>, f64 = dense<64> : vector<2xi64>, f128 = dense<128> : vector<2xi64>, f16 = dense<16> : vector<2xi64>, i32 = dense<32> : vector<2xi64>, "dlti.mangling_mode" = "e", "dlti.endianness" = "little", "dlti.stack_alignment" = 128 : i64>} {
  cir.func private @socket(!s32i, !s32i, !s32i) -> !s32i extra(#fn_attr) loc(#loc274)
  cir.func private @inet_addr(!cir.ptr<!s8i>) -> !u32i extra(#fn_attr) loc(#loc275)
  cir.global "private" constant cir_private dsolocal @".str" = #cir.const_array<"127.0.0.1\00" : !cir.array<!s8i x 10>> : !cir.array<!s8i x 10> {alignment = 1 : i64} loc(#loc5)
  cir.func private @htons(!u16i) -> !u16i extra(#fn_attr) loc(#loc276)
  cir.func private @connect(!s32i, !cir.ptr<!ty_sockaddr>, !u32i) -> !s32i loc(#loc277)
  cir.func private @recv(!s32i, !cir.ptr<!void>, !u64i, !s32i) -> !s64i loc(#loc278)
  cir.func private @atof(!cir.ptr<!s8i>) -> !cir.double extra(#fn_attr) loc(#loc279)
  cir.func private @close(!s32i) -> !s32i loc(#loc280)
  cir.func private @printIntLine(!s32i) loc(#loc281)
  cir.func internal private @badSink(%arg0: !cir.float loc(fused[#loc20, #loc21])) extra(#fn_attr1) {
    %0 = cir.alloca !cir.float, !cir.ptr<!cir.float>, ["data", init] {alignment = 4 : i64} loc(#loc283)
    cir.store %arg0, %0 : !cir.float, !cir.ptr<!cir.float> loc(#loc22)
    cir.scope {
      %1 = cir.alloca !s32i, !cir.ptr<!s32i>, ["result", init] {alignment = 4 : i64} loc(#loc285)
      %2 = cir.const #cir.fp<1.000000e+02> : !cir.double loc(#loc27)
      %3 = cir.load %0 : !cir.ptr<!cir.float>, !cir.float loc(#loc28)
      %4 = cir.cast(floating, %3 : !cir.float), !cir.double loc(#loc28)
      %5 = cir.binop(div, %2, %4) : !cir.double loc(#loc286)
      %6 = cir.cast(float_to_int, %5 : !cir.double), !s32i loc(#loc286)
      cir.store %6, %1 : !s32i, !cir.ptr<!s32i> loc(#loc285)
      %7 = cir.load %1 : !cir.ptr<!s32i>, !s32i loc(#loc29)
      cir.call @printIntLine(%7) : (!s32i) -> () loc(#loc30)
    } loc(#loc284)
    cir.return loc(#loc19)
  } loc(#loc282)
  cir.func no_proto @CWE369_Divide_by_Zero__float_connect_socket_41_bad() extra(#fn_attr1) {
    %0 = cir.alloca !cir.float, !cir.ptr<!cir.float>, ["data"] {alignment = 4 : i64} loc(#loc288)
    %1 = cir.const #cir.fp<0.000000e+00> : !cir.float loc(#loc35)
    cir.store %1, %0 : !cir.float, !cir.ptr<!cir.float> loc(#loc289)
    cir.scope {
      %3 = cir.alloca !s32i, !cir.ptr<!s32i>, ["recvResult"] {alignment = 4 : i64} loc(#loc291)
      %4 = cir.alloca !ty_sockaddr_in, !cir.ptr<!ty_sockaddr_in>, ["service"] {alignment = 4 : i64} loc(#loc292)
      %5 = cir.alloca !s32i, !cir.ptr<!s32i>, ["connectSocket", init] {alignment = 4 : i64} loc(#loc293)
      %6 = cir.alloca !cir.array<!s8i x 20>, !cir.ptr<!cir.array<!s8i x 20>>, ["inputBuffer"] {alignment = 16 : i64} loc(#loc294)
      %7 = cir.const #cir.int<1> : !s32i loc(#loc44)
      %8 = cir.unary(minus, %7) nsw : !s32i, !s32i loc(#loc44)
      cir.store %8, %5 : !s32i, !cir.ptr<!s32i> loc(#loc293)
      cir.scope {
        cir.do {
          cir.scope {
            %9 = cir.const #cir.int<2> : !s32i loc(#loc51)
            %10 = cir.const #cir.int<1> : !s32i loc(#loc52)
            %11 = cir.const #cir.int<6> : !s32i loc(#loc53)
            %12 = cir.call @socket(%9, %10, %11) : (!s32i, !s32i, !s32i) -> !s32i extra(#fn_attr) loc(#loc54)
            cir.store %12, %5 : !s32i, !cir.ptr<!s32i> loc(#loc297)
            cir.scope {
              %46 = cir.load %5 : !cir.ptr<!s32i>, !s32i loc(#loc59)
              %47 = cir.const #cir.int<1> : !s32i loc(#loc60)
              %48 = cir.unary(minus, %47) nsw : !s32i, !s32i loc(#loc60)
              %49 = cir.cmp(eq, %46, %48) : !s32i, !cir.bool loc(#loc299)
              cir.if %49 {
                cir.break loc(#loc62)
              } loc(#loc300)
            } loc(#loc298)
            %13 = cir.cast(bitcast, %4 : !cir.ptr<!ty_sockaddr_in>), !cir.ptr<!void> loc(#loc301)
            %14 = cir.const #cir.int<0> : !s32i loc(#loc65)
            %15 = cir.const #cir.int<16> : !u64i loc(#loc302)
            cir.libc.memset %15 bytes from %13 set to %14 : !cir.ptr<!void>, !s32i, !u64i loc(#loc303)
            %16 = cir.const #cir.int<2> : !s32i loc(#loc70)
            %17 = cir.cast(integral, %16 : !s32i), !u16i loc(#loc70)
            %18 = cir.get_member %4[0] {name = "sin_family"} : !cir.ptr<!ty_sockaddr_in> -> !cir.ptr<!u16i> loc(#loc71)
            cir.store %17, %18 : !u16i, !cir.ptr<!u16i> loc(#loc304)
            %19 = cir.get_global @".str" : !cir.ptr<!cir.array<!s8i x 10>> loc(#loc5)
            %20 = cir.cast(array_to_ptrdecay, %19 : !cir.ptr<!cir.array<!s8i x 10>>), !cir.ptr<!s8i> loc(#loc5)
            %21 = cir.call @inet_addr(%20) : (!cir.ptr<!s8i>) -> !u32i extra(#fn_attr) loc(#loc73)
            %22 = cir.get_member %4[2] {name = "sin_addr"} : !cir.ptr<!ty_sockaddr_in> -> !cir.ptr<!ty_in_addr> loc(#loc74)
            %23 = cir.get_member %22[0] {name = "s_addr"} : !cir.ptr<!ty_in_addr> -> !cir.ptr<!u32i> loc(#loc75)
            cir.store %21, %23 : !u32i, !cir.ptr<!u32i> loc(#loc305)
            %24 = cir.const #cir.int<27015> : !s32i loc(#loc78)
            %25 = cir.cast(integral, %24 : !s32i), !u16i loc(#loc78)
            %26 = cir.call @htons(%25) : (!u16i) -> !u16i side_effect(const) extra(#fn_attr) loc(#loc79)
            %27 = cir.get_member %4[1] {name = "sin_port"} : !cir.ptr<!ty_sockaddr_in> -> !cir.ptr<!u16i> loc(#loc80)
            cir.store %26, %27 : !u16i, !cir.ptr<!u16i> loc(#loc306)
            cir.scope {
              %46 = cir.load %5 : !cir.ptr<!s32i>, !s32i loc(#loc85)
              %47 = cir.cast(bitcast, %4 : !cir.ptr<!ty_sockaddr_in>), !cir.ptr<!ty_sockaddr> loc(#loc308)
              %48 = cir.const #cir.int<16> : !u64i loc(#loc309)
              %49 = cir.cast(integral, %48 : !u64i), !u32i loc(#loc309)
              %50 = cir.call @connect(%46, %47, %49) : (!s32i, !cir.ptr<!ty_sockaddr>, !u32i) -> !s32i loc(#loc90)
              %51 = cir.const #cir.int<1> : !s32i loc(#loc91)
              %52 = cir.unary(minus, %51) nsw : !s32i, !s32i loc(#loc91)
              %53 = cir.cmp(eq, %50, %52) : !s32i, !cir.bool loc(#loc310)
              cir.if %53 {
                cir.break loc(#loc93)
              } loc(#loc311)
            } loc(#loc307)
            %28 = cir.load %5 : !cir.ptr<!s32i>, !s32i loc(#loc94)
            %29 = cir.cast(array_to_ptrdecay, %6 : !cir.ptr<!cir.array<!s8i x 20>>), !cir.ptr<!s8i> loc(#loc95)
            %30 = cir.cast(bitcast, %29 : !cir.ptr<!s8i>), !cir.ptr<!void> loc(#loc95)
            %31 = cir.const #cir.int<20> : !s32i loc(#loc96)
            %32 = cir.const #cir.int<1> : !s32i loc(#loc97)
            %33 = cir.binop(sub, %31, %32) nsw : !s32i loc(#loc96)
            %34 = cir.cast(integral, %33 : !s32i), !u64i loc(#loc96)
            %35 = cir.const #cir.int<0> : !s32i loc(#loc98)
            %36 = cir.call @recv(%28, %30, %34, %35) : (!s32i, !cir.ptr<!void>, !u64i, !s32i) -> !s64i loc(#loc99)
            %37 = cir.cast(integral, %36 : !s64i), !s32i loc(#loc99)
            cir.store %37, %3 : !s32i, !cir.ptr<!s32i> loc(#loc312)
            cir.scope {
              %46 = cir.load %3 : !cir.ptr<!s32i>, !s32i loc(#loc104)
              %47 = cir.const #cir.int<1> : !s32i loc(#loc105)
              %48 = cir.unary(minus, %47) nsw : !s32i, !s32i loc(#loc105)
              %49 = cir.cmp(eq, %46, %48) : !s32i, !cir.bool loc(#loc314)
              %50 = cir.ternary(%49, true {
                %51 = cir.const #true loc(#loc106)
                cir.yield %51 : !cir.bool loc(#loc106)
              }, false {
                %51 = cir.load %3 : !cir.ptr<!s32i>, !s32i loc(#loc107)
                %52 = cir.const #cir.int<0> : !s32i loc(#loc108)
                %53 = cir.cmp(eq, %51, %52) : !s32i, !cir.bool loc(#loc315)
                %54 = cir.ternary(%53, true {
                  %55 = cir.const #true loc(#loc106)
                  cir.yield %55 : !cir.bool loc(#loc106)
                }, false {
                  %55 = cir.const #false loc(#loc106)
                  cir.yield %55 : !cir.bool loc(#loc106)
                }) : (!cir.bool) -> !cir.bool loc(#loc106)
                cir.yield %54 : !cir.bool loc(#loc106)
              }) : (!cir.bool) -> !cir.bool loc(#loc106)
              cir.if %50 {
                cir.break loc(#loc110)
              } loc(#loc316)
            } loc(#loc313)
            %38 = cir.const #cir.int<0> : !s32i loc(#loc111)
            %39 = cir.cast(integral, %38 : !s32i), !s8i loc(#loc111)
            %40 = cir.load %3 : !cir.ptr<!s32i>, !s32i loc(#loc112)
            %41 = cir.cast(array_to_ptrdecay, %6 : !cir.ptr<!cir.array<!s8i x 20>>), !cir.ptr<!s8i> loc(#loc113)
            %42 = cir.ptr_stride(%41 : !cir.ptr<!s8i>, %40 : !s32i), !cir.ptr<!s8i> loc(#loc113)
            cir.store %39, %42 : !s8i, !cir.ptr<!s8i> loc(#loc317)
            %43 = cir.cast(array_to_ptrdecay, %6 : !cir.ptr<!cir.array<!s8i x 20>>), !cir.ptr<!s8i> loc(#loc114)
            %44 = cir.call @atof(%43) : (!cir.ptr<!s8i>) -> !cir.double side_effect(pure) extra(#fn_attr) loc(#loc115)
            %45 = cir.cast(floating, %44 : !cir.double), !cir.float loc(#loc115)
            cir.store %45, %0 : !cir.float, !cir.ptr<!cir.float> loc(#loc318)
          } loc(#loc296)
          cir.yield loc(#loc48)
        } while {
          %9 = cir.const #cir.int<0> : !s32i loc(#loc118)
          %10 = cir.cast(int_to_bool, %9 : !s32i), !cir.bool loc(#loc118)
          cir.condition(%10) loc(#loc118)
        } loc(#loc295)
      } loc(#loc295)
      cir.scope {
        %9 = cir.load %5 : !cir.ptr<!s32i>, !s32i loc(#loc121)
        %10 = cir.const #cir.int<1> : !s32i loc(#loc122)
        %11 = cir.unary(minus, %10) nsw : !s32i, !s32i loc(#loc122)
        %12 = cir.cmp(ne, %9, %11) : !s32i, !cir.bool loc(#loc320)
        cir.if %12 {
          %13 = cir.load %5 : !cir.ptr<!s32i>, !s32i loc(#loc124)
          %14 = cir.call @close(%13) : (!s32i) -> !s32i loc(#loc125)
        } loc(#loc321)
      } loc(#loc319)
    } loc(#loc290)
    %2 = cir.load %0 : !cir.ptr<!cir.float>, !cir.float loc(#loc126)
    cir.call @badSink(%2) : (!cir.float) -> () loc(#loc127)
    cir.return loc(#loc32)
  } loc(#loc287)
  cir.func no_proto @CWE369_Divide_by_Zero__float_connect_socket_41_good() extra(#fn_attr1) {
    %0 = cir.get_global @goodB2G : !cir.ptr<!cir.func<()>> loc(#loc323)
    cir.call %0() : (!cir.ptr<!cir.func<()>>) -> () loc(#loc130)
    %1 = cir.get_global @goodG2B : !cir.ptr<!cir.func<()>> loc(#loc324)
    cir.call %1() : (!cir.ptr<!cir.func<()>>) -> () loc(#loc132)
    cir.return loc(#loc129)
  } loc(#loc322)
  cir.func private @printLine(!cir.ptr<!s8i>) loc(#loc325)
  cir.global "private" constant cir_private dsolocal @".str.1" = #cir.const_array<"This would result in a divide by zero\00" : !cir.array<!s8i x 38>> : !cir.array<!s8i x 38> {alignment = 1 : i64} loc(#loc136)
  cir.func internal private @goodB2GSink(%arg0: !cir.float loc(fused[#loc139, #loc140])) extra(#fn_attr1) {
    %0 = cir.alloca !cir.float, !cir.ptr<!cir.float>, ["data", init] {alignment = 4 : i64} loc(#loc327)
    cir.store %arg0, %0 : !cir.float, !cir.ptr<!cir.float> loc(#loc141)
    cir.scope {
      %1 = cir.load %0 : !cir.ptr<!cir.float>, !cir.float loc(#loc144)
      %2 = cir.cast(floating, %1 : !cir.float), !cir.double loc(#loc144)
      %3 = cir.fabs %2 : !cir.double loc(#loc144)
      %4 = cir.const #cir.fp<9.9999999999999995E-7> : !cir.double loc(#loc145)
      %5 = cir.cmp(gt, %3, %4) : !cir.double, !cir.bool loc(#loc329)
      cir.if %5 {
        %6 = cir.alloca !s32i, !cir.ptr<!s32i>, ["result", init] {alignment = 4 : i64} loc(#loc331)
        %7 = cir.const #cir.fp<1.000000e+02> : !cir.double loc(#loc152)
        %8 = cir.load %0 : !cir.ptr<!cir.float>, !cir.float loc(#loc153)
        %9 = cir.cast(floating, %8 : !cir.float), !cir.double loc(#loc153)
        %10 = cir.binop(div, %7, %9) : !cir.double loc(#loc332)
        %11 = cir.cast(float_to_int, %10 : !cir.double), !s32i loc(#loc332)
        cir.store %11, %6 : !s32i, !cir.ptr<!s32i> loc(#loc331)
        %12 = cir.load %6 : !cir.ptr<!s32i>, !s32i loc(#loc154)
        cir.call @printIntLine(%12) : (!s32i) -> () loc(#loc155)
      } else {
        %6 = cir.get_global @".str.1" : !cir.ptr<!cir.array<!s8i x 38>> loc(#loc136)
        %7 = cir.cast(array_to_ptrdecay, %6 : !cir.ptr<!cir.array<!s8i x 38>>), !cir.ptr<!s8i> loc(#loc136)
        cir.call @printLine(%7) : (!cir.ptr<!s8i>) -> () loc(#loc156)
      } loc(#loc330)
    } loc(#loc328)
    cir.return loc(#loc138)
  } loc(#loc326)
  cir.func no_proto internal private @goodB2G() extra(#fn_attr1) {
    %0 = cir.alloca !cir.float, !cir.ptr<!cir.float>, ["data"] {alignment = 4 : i64} loc(#loc334)
    %1 = cir.const #cir.fp<0.000000e+00> : !cir.float loc(#loc161)
    cir.store %1, %0 : !cir.float, !cir.ptr<!cir.float> loc(#loc335)
    cir.scope {
      %3 = cir.alloca !s32i, !cir.ptr<!s32i>, ["recvResult"] {alignment = 4 : i64} loc(#loc337)
      %4 = cir.alloca !ty_sockaddr_in, !cir.ptr<!ty_sockaddr_in>, ["service"] {alignment = 4 : i64} loc(#loc338)
      %5 = cir.alloca !s32i, !cir.ptr<!s32i>, ["connectSocket", init] {alignment = 4 : i64} loc(#loc339)
      %6 = cir.alloca !cir.array<!s8i x 20>, !cir.ptr<!cir.array<!s8i x 20>>, ["inputBuffer"] {alignment = 16 : i64} loc(#loc340)
      %7 = cir.const #cir.int<1> : !s32i loc(#loc170)
      %8 = cir.unary(minus, %7) nsw : !s32i, !s32i loc(#loc170)
      cir.store %8, %5 : !s32i, !cir.ptr<!s32i> loc(#loc339)
      cir.scope {
        cir.do {
          cir.scope {
            %9 = cir.const #cir.int<2> : !s32i loc(#loc177)
            %10 = cir.const #cir.int<1> : !s32i loc(#loc178)
            %11 = cir.const #cir.int<6> : !s32i loc(#loc179)
            %12 = cir.call @socket(%9, %10, %11) : (!s32i, !s32i, !s32i) -> !s32i extra(#fn_attr) loc(#loc180)
            cir.store %12, %5 : !s32i, !cir.ptr<!s32i> loc(#loc343)
            cir.scope {
              %46 = cir.load %5 : !cir.ptr<!s32i>, !s32i loc(#loc185)
              %47 = cir.const #cir.int<1> : !s32i loc(#loc186)
              %48 = cir.unary(minus, %47) nsw : !s32i, !s32i loc(#loc186)
              %49 = cir.cmp(eq, %46, %48) : !s32i, !cir.bool loc(#loc345)
              cir.if %49 {
                cir.break loc(#loc188)
              } loc(#loc346)
            } loc(#loc344)
            %13 = cir.cast(bitcast, %4 : !cir.ptr<!ty_sockaddr_in>), !cir.ptr<!void> loc(#loc347)
            %14 = cir.const #cir.int<0> : !s32i loc(#loc191)
            %15 = cir.const #cir.int<16> : !u64i loc(#loc348)
            cir.libc.memset %15 bytes from %13 set to %14 : !cir.ptr<!void>, !s32i, !u64i loc(#loc349)
            %16 = cir.const #cir.int<2> : !s32i loc(#loc196)
            %17 = cir.cast(integral, %16 : !s32i), !u16i loc(#loc196)
            %18 = cir.get_member %4[0] {name = "sin_family"} : !cir.ptr<!ty_sockaddr_in> -> !cir.ptr<!u16i> loc(#loc71)
            cir.store %17, %18 : !u16i, !cir.ptr<!u16i> loc(#loc350)
            %19 = cir.get_global @".str" : !cir.ptr<!cir.array<!s8i x 10>> loc(#loc198)
            %20 = cir.cast(array_to_ptrdecay, %19 : !cir.ptr<!cir.array<!s8i x 10>>), !cir.ptr<!s8i> loc(#loc198)
            %21 = cir.call @inet_addr(%20) : (!cir.ptr<!s8i>) -> !u32i extra(#fn_attr) loc(#loc199)
            %22 = cir.get_member %4[2] {name = "sin_addr"} : !cir.ptr<!ty_sockaddr_in> -> !cir.ptr<!ty_in_addr> loc(#loc74)
            %23 = cir.get_member %22[0] {name = "s_addr"} : !cir.ptr<!ty_in_addr> -> !cir.ptr<!u32i> loc(#loc75)
            cir.store %21, %23 : !u32i, !cir.ptr<!u32i> loc(#loc351)
            %24 = cir.const #cir.int<27015> : !s32i loc(#loc202)
            %25 = cir.cast(integral, %24 : !s32i), !u16i loc(#loc202)
            %26 = cir.call @htons(%25) : (!u16i) -> !u16i side_effect(const) extra(#fn_attr) loc(#loc203)
            %27 = cir.get_member %4[1] {name = "sin_port"} : !cir.ptr<!ty_sockaddr_in> -> !cir.ptr<!u16i> loc(#loc80)
            cir.store %26, %27 : !u16i, !cir.ptr<!u16i> loc(#loc352)
            cir.scope {
              %46 = cir.load %5 : !cir.ptr<!s32i>, !s32i loc(#loc208)
              %47 = cir.cast(bitcast, %4 : !cir.ptr<!ty_sockaddr_in>), !cir.ptr<!ty_sockaddr> loc(#loc354)
              %48 = cir.const #cir.int<16> : !u64i loc(#loc355)
              %49 = cir.cast(integral, %48 : !u64i), !u32i loc(#loc355)
              %50 = cir.call @connect(%46, %47, %49) : (!s32i, !cir.ptr<!ty_sockaddr>, !u32i) -> !s32i loc(#loc213)
              %51 = cir.const #cir.int<1> : !s32i loc(#loc214)
              %52 = cir.unary(minus, %51) nsw : !s32i, !s32i loc(#loc214)
              %53 = cir.cmp(eq, %50, %52) : !s32i, !cir.bool loc(#loc356)
              cir.if %53 {
                cir.break loc(#loc216)
              } loc(#loc357)
            } loc(#loc353)
            %28 = cir.load %5 : !cir.ptr<!s32i>, !s32i loc(#loc217)
            %29 = cir.cast(array_to_ptrdecay, %6 : !cir.ptr<!cir.array<!s8i x 20>>), !cir.ptr<!s8i> loc(#loc218)
            %30 = cir.cast(bitcast, %29 : !cir.ptr<!s8i>), !cir.ptr<!void> loc(#loc218)
            %31 = cir.const #cir.int<20> : !s32i loc(#loc219)
            %32 = cir.const #cir.int<1> : !s32i loc(#loc220)
            %33 = cir.binop(sub, %31, %32) nsw : !s32i loc(#loc219)
            %34 = cir.cast(integral, %33 : !s32i), !u64i loc(#loc219)
            %35 = cir.const #cir.int<0> : !s32i loc(#loc221)
            %36 = cir.call @recv(%28, %30, %34, %35) : (!s32i, !cir.ptr<!void>, !u64i, !s32i) -> !s64i loc(#loc222)
            %37 = cir.cast(integral, %36 : !s64i), !s32i loc(#loc222)
            cir.store %37, %3 : !s32i, !cir.ptr<!s32i> loc(#loc358)
            cir.scope {
              %46 = cir.load %3 : !cir.ptr<!s32i>, !s32i loc(#loc227)
              %47 = cir.const #cir.int<1> : !s32i loc(#loc228)
              %48 = cir.unary(minus, %47) nsw : !s32i, !s32i loc(#loc228)
              %49 = cir.cmp(eq, %46, %48) : !s32i, !cir.bool loc(#loc360)
              %50 = cir.ternary(%49, true {
                %51 = cir.const #true loc(#loc229)
                cir.yield %51 : !cir.bool loc(#loc229)
              }, false {
                %51 = cir.load %3 : !cir.ptr<!s32i>, !s32i loc(#loc230)
                %52 = cir.const #cir.int<0> : !s32i loc(#loc231)
                %53 = cir.cmp(eq, %51, %52) : !s32i, !cir.bool loc(#loc361)
                %54 = cir.ternary(%53, true {
                  %55 = cir.const #true loc(#loc229)
                  cir.yield %55 : !cir.bool loc(#loc229)
                }, false {
                  %55 = cir.const #false loc(#loc229)
                  cir.yield %55 : !cir.bool loc(#loc229)
                }) : (!cir.bool) -> !cir.bool loc(#loc229)
                cir.yield %54 : !cir.bool loc(#loc229)
              }) : (!cir.bool) -> !cir.bool loc(#loc229)
              cir.if %50 {
                cir.break loc(#loc233)
              } loc(#loc362)
            } loc(#loc359)
            %38 = cir.const #cir.int<0> : !s32i loc(#loc234)
            %39 = cir.cast(integral, %38 : !s32i), !s8i loc(#loc234)
            %40 = cir.load %3 : !cir.ptr<!s32i>, !s32i loc(#loc235)
            %41 = cir.cast(array_to_ptrdecay, %6 : !cir.ptr<!cir.array<!s8i x 20>>), !cir.ptr<!s8i> loc(#loc236)
            %42 = cir.ptr_stride(%41 : !cir.ptr<!s8i>, %40 : !s32i), !cir.ptr<!s8i> loc(#loc236)
            cir.store %39, %42 : !s8i, !cir.ptr<!s8i> loc(#loc363)
            %43 = cir.cast(array_to_ptrdecay, %6 : !cir.ptr<!cir.array<!s8i x 20>>), !cir.ptr<!s8i> loc(#loc237)
            %44 = cir.call @atof(%43) : (!cir.ptr<!s8i>) -> !cir.double side_effect(pure) extra(#fn_attr) loc(#loc238)
            %45 = cir.cast(floating, %44 : !cir.double), !cir.float loc(#loc238)
            cir.store %45, %0 : !cir.float, !cir.ptr<!cir.float> loc(#loc364)
          } loc(#loc342)
          cir.yield loc(#loc174)
        } while {
          %9 = cir.const #cir.int<0> : !s32i loc(#loc241)
          %10 = cir.cast(int_to_bool, %9 : !s32i), !cir.bool loc(#loc241)
          cir.condition(%10) loc(#loc241)
        } loc(#loc341)
      } loc(#loc341)
      cir.scope {
        %9 = cir.load %5 : !cir.ptr<!s32i>, !s32i loc(#loc244)
        %10 = cir.const #cir.int<1> : !s32i loc(#loc245)
        %11 = cir.unary(minus, %10) nsw : !s32i, !s32i loc(#loc245)
        %12 = cir.cmp(ne, %9, %11) : !s32i, !cir.bool loc(#loc366)
        cir.if %12 {
          %13 = cir.load %5 : !cir.ptr<!s32i>, !s32i loc(#loc247)
          %14 = cir.call @close(%13) : (!s32i) -> !s32i loc(#loc248)
        } loc(#loc367)
      } loc(#loc365)
    } loc(#loc336)
    %2 = cir.load %0 : !cir.ptr<!cir.float>, !cir.float loc(#loc249)
    cir.call @goodB2GSink(%2) : (!cir.float) -> () loc(#loc250)
    cir.return loc(#loc158)
  } loc(#loc333)
  cir.func internal private @goodG2BSink(%arg0: !cir.float loc(fused[#loc253, #loc254])) extra(#fn_attr1) {
    %0 = cir.alloca !cir.float, !cir.ptr<!cir.float>, ["data", init] {alignment = 4 : i64} loc(#loc369)
    cir.store %arg0, %0 : !cir.float, !cir.ptr<!cir.float> loc(#loc255)
    cir.scope {
      %1 = cir.alloca !s32i, !cir.ptr<!s32i>, ["result", init] {alignment = 4 : i64} loc(#loc371)
      %2 = cir.const #cir.fp<1.000000e+02> : !cir.double loc(#loc260)
      %3 = cir.load %0 : !cir.ptr<!cir.float>, !cir.float loc(#loc261)
      %4 = cir.cast(floating, %3 : !cir.float), !cir.double loc(#loc261)
      %5 = cir.binop(div, %2, %4) : !cir.double loc(#loc372)
      %6 = cir.cast(float_to_int, %5 : !cir.double), !s32i loc(#loc372)
      cir.store %6, %1 : !s32i, !cir.ptr<!s32i> loc(#loc371)
      %7 = cir.load %1 : !cir.ptr<!s32i>, !s32i loc(#loc262)
      cir.call @printIntLine(%7) : (!s32i) -> () loc(#loc263)
    } loc(#loc370)
    cir.return loc(#loc252)
  } loc(#loc368)
  cir.func no_proto internal private @goodG2B() extra(#fn_attr1) {
    %0 = cir.alloca !cir.float, !cir.ptr<!cir.float>, ["data"] {alignment = 4 : i64} loc(#loc374)
    %1 = cir.const #cir.fp<0.000000e+00> : !cir.float loc(#loc268)
    cir.store %1, %0 : !cir.float, !cir.ptr<!cir.float> loc(#loc375)
    %2 = cir.const #cir.fp<2.000000e+00> : !cir.float loc(#loc270)
    cir.store %2, %0 : !cir.float, !cir.ptr<!cir.float> loc(#loc376)
    %3 = cir.load %0 : !cir.ptr<!cir.float>, !cir.float loc(#loc272)
    cir.call @goodG2BSink(%3) : (!cir.float) -> () loc(#loc273)
    cir.return loc(#loc265)
  } loc(#loc373)
} loc(#loc)
#loc = loc("/workspaces/juliet-c/testcases/CWE369_Divide_by_Zero/s01/CWE369_Divide_by_Zero__float_connect_socket_41.c":0:0)
#loc1 = loc("/usr/include/x86_64-linux-gnu/sys/socket.h":102:1)
#loc2 = loc("/usr/include/x86_64-linux-gnu/sys/socket.h":102:62)
#loc3 = loc("/usr/include/arpa/inet.h":34:1)
#loc4 = loc("/usr/include/arpa/inet.h":34:47)
#loc5 = loc("CWE369_Divide_by_Zero__float_connect_socket_41.c":85:49)
#loc6 = loc("/usr/include/netinet/in.h":402:1)
#loc7 = loc("/usr/include/netinet/in.h":403:40)
#loc8 = loc("/usr/include/x86_64-linux-gnu/sys/socket.h":126:1)
#loc9 = loc("/usr/include/x86_64-linux-gnu/sys/socket.h":126:75)
#loc10 = loc("/usr/include/x86_64-linux-gnu/sys/socket.h":145:1)
#loc11 = loc("/usr/include/x86_64-linux-gnu/sys/socket.h":145:68)
#loc12 = loc("/usr/include/stdlib.h":102:1)
#loc13 = loc("/usr/include/stdlib.h":103:33)
#loc14 = loc("/usr/include/unistd.h":358:1)
#loc15 = loc("/usr/include/unistd.h":358:27)
#loc16 = loc("../../../testcasesupport/std_testcase_io.h":18:1)
#loc17 = loc("../../../testcasesupport/std_testcase_io.h":18:33)
#loc18 = loc("CWE369_Divide_by_Zero__float_connect_socket_41.c":46:1)
#loc19 = loc("CWE369_Divide_by_Zero__float_connect_socket_41.c":53:1)
#loc22 = loc("CWE369_Divide_by_Zero__float_connect_socket_41.c":47:1)
#loc23 = loc("CWE369_Divide_by_Zero__float_connect_socket_41.c":48:5)
#loc24 = loc("CWE369_Divide_by_Zero__float_connect_socket_41.c":52:5)
#loc25 = loc("CWE369_Divide_by_Zero__float_connect_socket_41.c":50:9)
#loc26 = loc("CWE369_Divide_by_Zero__float_connect_socket_41.c":50:40)
#loc27 = loc("CWE369_Divide_by_Zero__float_connect_socket_41.c":50:28)
#loc28 = loc("CWE369_Divide_by_Zero__float_connect_socket_41.c":50:36)
#loc29 = loc("CWE369_Divide_by_Zero__float_connect_socket_41.c":51:22)
#loc30 = loc("CWE369_Divide_by_Zero__float_connect_socket_41.c":51:9)
#loc31 = loc("CWE369_Divide_by_Zero__float_connect_socket_41.c":55:1)
#loc32 = loc("CWE369_Divide_by_Zero__float_connect_socket_41.c":117:1)
#loc33 = loc("CWE369_Divide_by_Zero__float_connect_socket_41.c":57:5)
#loc34 = loc("CWE369_Divide_by_Zero__float_connect_socket_41.c":57:11)
#loc35 = loc("CWE369_Divide_by_Zero__float_connect_socket_41.c":59:12)
#loc36 = loc("CWE369_Divide_by_Zero__float_connect_socket_41.c":59:5)
#loc37 = loc("CWE369_Divide_by_Zero__float_connect_socket_41.c":60:5)
#loc38 = loc("CWE369_Divide_by_Zero__float_connect_socket_41.c":115:5)
#loc39 = loc("CWE369_Divide_by_Zero__float_connect_socket_41.c":65:9)
#loc40 = loc("CWE369_Divide_by_Zero__float_connect_socket_41.c":65:13)
#loc41 = loc("CWE369_Divide_by_Zero__float_connect_socket_41.c":66:9)
#loc42 = loc("CWE369_Divide_by_Zero__float_connect_socket_41.c":66:28)
#loc43 = loc("CWE369_Divide_by_Zero__float_connect_socket_41.c":67:9)
#loc44 = loc("CWE369_Divide_by_Zero__float_connect_socket_41.c":67:32)
#loc45 = loc("CWE369_Divide_by_Zero__float_connect_socket_41.c":68:9)
#loc46 = loc("CWE369_Divide_by_Zero__float_connect_socket_41.c":68:41)
#loc47 = loc("CWE369_Divide_by_Zero__float_connect_socket_41.c":69:9)
#loc48 = loc("CWE369_Divide_by_Zero__float_connect_socket_41.c":104:17)
#loc49 = loc("CWE369_Divide_by_Zero__float_connect_socket_41.c":70:9)
#loc50 = loc("CWE369_Divide_by_Zero__float_connect_socket_41.c":103:9)
#loc51 = loc("CWE369_Divide_by_Zero__float_connect_socket_41.c":78:36)
#loc52 = loc("CWE369_Divide_by_Zero__float_connect_socket_41.c":78:45)
#loc53 = loc("CWE369_Divide_by_Zero__float_connect_socket_41.c":78:58)
#loc54 = loc("CWE369_Divide_by_Zero__float_connect_socket_41.c":78:29)
#loc55 = loc("CWE369_Divide_by_Zero__float_connect_socket_41.c":78:13)
#loc56 = loc("CWE369_Divide_by_Zero__float_connect_socket_41.c":78:69)
#loc57 = loc("CWE369_Divide_by_Zero__float_connect_socket_41.c":79:13)
#loc58 = loc("CWE369_Divide_by_Zero__float_connect_socket_41.c":82:13)
#loc59 = loc("CWE369_Divide_by_Zero__float_connect_socket_41.c":79:17)
#loc60 = loc("CWE369_Divide_by_Zero__float_connect_socket_41.c":79:34)
#loc61 = loc("CWE369_Divide_by_Zero__float_connect_socket_41.c":80:13)
#loc62 = loc("CWE369_Divide_by_Zero__float_connect_socket_41.c":81:17)
#loc63 = loc("CWE369_Divide_by_Zero__float_connect_socket_41.c":83:20)
#loc64 = loc("CWE369_Divide_by_Zero__float_connect_socket_41.c":83:21)
#loc65 = loc("CWE369_Divide_by_Zero__float_connect_socket_41.c":83:30)
#loc66 = loc("CWE369_Divide_by_Zero__float_connect_socket_41.c":83:33)
#loc67 = loc("CWE369_Divide_by_Zero__float_connect_socket_41.c":83:47)
#loc68 = loc("CWE369_Divide_by_Zero__float_connect_socket_41.c":83:13)
#loc69 = loc("CWE369_Divide_by_Zero__float_connect_socket_41.c":83:48)
#loc70 = loc("CWE369_Divide_by_Zero__float_connect_socket_41.c":84:34)
#loc71 = loc("/usr/include/netinet/in.h":249:5)
#loc72 = loc("CWE369_Divide_by_Zero__float_connect_socket_41.c":84:13)
#loc73 = loc("CWE369_Divide_by_Zero__float_connect_socket_41.c":85:39)
#loc74 = loc("/usr/include/netinet/in.h":251:20)
#loc75 = loc("/usr/include/netinet/in.h":33:15)
#loc76 = loc("CWE369_Divide_by_Zero__float_connect_socket_41.c":85:13)
#loc77 = loc("CWE369_Divide_by_Zero__float_connect_socket_41.c":85:59)
#loc78 = loc("CWE369_Divide_by_Zero__float_connect_socket_41.c":86:38)
#loc79 = loc("CWE369_Divide_by_Zero__float_connect_socket_41.c":86:32)
#loc80 = loc("/usr/include/netinet/in.h":250:15)
#loc81 = loc("CWE369_Divide_by_Zero__float_connect_socket_41.c":86:13)
#loc82 = loc("CWE369_Divide_by_Zero__float_connect_socket_41.c":86:46)
#loc83 = loc("CWE369_Divide_by_Zero__float_connect_socket_41.c":87:13)
#loc84 = loc("CWE369_Divide_by_Zero__float_connect_socket_41.c":90:13)
#loc85 = loc("CWE369_Divide_by_Zero__float_connect_socket_41.c":87:25)
#loc86 = loc("CWE369_Divide_by_Zero__float_connect_socket_41.c":87:58)
#loc87 = loc("CWE369_Divide_by_Zero__float_connect_socket_41.c":87:59)
#loc88 = loc("CWE369_Divide_by_Zero__float_connect_socket_41.c":87:68)
#loc89 = loc("CWE369_Divide_by_Zero__float_connect_socket_41.c":87:82)
#loc90 = loc("CWE369_Divide_by_Zero__float_connect_socket_41.c":87:17)
#loc91 = loc("CWE369_Divide_by_Zero__float_connect_socket_41.c":87:88)
#loc92 = loc("CWE369_Divide_by_Zero__float_connect_socket_41.c":88:13)
#loc93 = loc("CWE369_Divide_by_Zero__float_connect_socket_41.c":89:17)
#loc94 = loc("CWE369_Divide_by_Zero__float_connect_socket_41.c":94:31)
#loc95 = loc("CWE369_Divide_by_Zero__float_connect_socket_41.c":94:46)
#loc96 = loc("CWE369_Divide_by_Zero__float_connect_socket_41.c":94:59)
#loc97 = loc("CWE369_Divide_by_Zero__float_connect_socket_41.c":94:77)
#loc98 = loc("CWE369_Divide_by_Zero__float_connect_socket_41.c":94:80)
#loc99 = loc("CWE369_Divide_by_Zero__float_connect_socket_41.c":94:26)
#loc100 = loc("CWE369_Divide_by_Zero__float_connect_socket_41.c":94:13)
#loc101 = loc("CWE369_Divide_by_Zero__float_connect_socket_41.c":94:81)
#loc102 = loc("CWE369_Divide_by_Zero__float_connect_socket_41.c":95:13)
#loc103 = loc("CWE369_Divide_by_Zero__float_connect_socket_41.c":98:13)
#loc104 = loc("CWE369_Divide_by_Zero__float_connect_socket_41.c":95:17)
#loc105 = loc("CWE369_Divide_by_Zero__float_connect_socket_41.c":95:31)
#loc106 = loc("CWE369_Divide_by_Zero__float_connect_socket_41.c":95:44)
#loc107 = loc("CWE369_Divide_by_Zero__float_connect_socket_41.c":95:47)
#loc108 = loc("CWE369_Divide_by_Zero__float_connect_socket_41.c":95:61)
#loc109 = loc("CWE369_Divide_by_Zero__float_connect_socket_41.c":96:13)
#loc110 = loc("CWE369_Divide_by_Zero__float_connect_socket_41.c":97:17)
#loc111 = loc("CWE369_Divide_by_Zero__float_connect_socket_41.c":100:39)
#loc112 = loc("CWE369_Divide_by_Zero__float_connect_socket_41.c":100:25)
#loc113 = loc("CWE369_Divide_by_Zero__float_connect_socket_41.c":100:13)
#loc114 = loc("CWE369_Divide_by_Zero__float_connect_socket_41.c":102:32)
#loc115 = loc("CWE369_Divide_by_Zero__float_connect_socket_41.c":102:27)
#loc116 = loc("CWE369_Divide_by_Zero__float_connect_socket_41.c":102:13)
#loc117 = loc("CWE369_Divide_by_Zero__float_connect_socket_41.c":102:43)
#loc118 = loc("CWE369_Divide_by_Zero__float_connect_socket_41.c":104:16)
#loc119 = loc("CWE369_Divide_by_Zero__float_connect_socket_41.c":105:9)
#loc120 = loc("CWE369_Divide_by_Zero__float_connect_socket_41.c":108:9)
#loc121 = loc("CWE369_Divide_by_Zero__float_connect_socket_41.c":105:13)
#loc122 = loc("CWE369_Divide_by_Zero__float_connect_socket_41.c":105:30)
#loc123 = loc("CWE369_Divide_by_Zero__float_connect_socket_41.c":106:9)
#loc124 = loc("CWE369_Divide_by_Zero__float_connect_socket_41.c":107:26)
#loc125 = loc("CWE369_Divide_by_Zero__float_connect_socket_41.c":107:13)
#loc126 = loc("CWE369_Divide_by_Zero__float_connect_socket_41.c":116:13)
#loc127 = loc("CWE369_Divide_by_Zero__float_connect_socket_41.c":116:5)
#loc128 = loc("CWE369_Divide_by_Zero__float_connect_socket_41.c":222:1)
#loc129 = loc("CWE369_Divide_by_Zero__float_connect_socket_41.c":226:1)
#loc130 = loc("CWE369_Divide_by_Zero__float_connect_socket_41.c":224:5)
#loc131 = loc("CWE369_Divide_by_Zero__float_connect_socket_41.c":224:13)
#loc132 = loc("CWE369_Divide_by_Zero__float_connect_socket_41.c":225:5)
#loc133 = loc("CWE369_Divide_by_Zero__float_connect_socket_41.c":225:13)
#loc134 = loc("../../../testcasesupport/std_testcase_io.h":14:1)
#loc135 = loc("../../../testcasesupport/std_testcase_io.h":14:33)
#loc136 = loc("CWE369_Divide_by_Zero__float_connect_socket_41.c":154:19)
#loc137 = loc("CWE369_Divide_by_Zero__float_connect_socket_41.c":144:1)
#loc138 = loc("CWE369_Divide_by_Zero__float_connect_socket_41.c":156:1)
#loc141 = loc("CWE369_Divide_by_Zero__float_connect_socket_41.c":145:1)
#loc142 = loc("CWE369_Divide_by_Zero__float_connect_socket_41.c":147:5)
#loc143 = loc("CWE369_Divide_by_Zero__float_connect_socket_41.c":155:5)
#loc144 = loc("CWE369_Divide_by_Zero__float_connect_socket_41.c":147:13)
#loc145 = loc("CWE369_Divide_by_Zero__float_connect_socket_41.c":147:21)
#loc146 = loc("CWE369_Divide_by_Zero__float_connect_socket_41.c":147:8)
#loc147 = loc("CWE369_Divide_by_Zero__float_connect_socket_41.c":148:5)
#loc148 = loc("CWE369_Divide_by_Zero__float_connect_socket_41.c":151:5)
#loc149 = loc("CWE369_Divide_by_Zero__float_connect_socket_41.c":153:5)
#loc150 = loc("CWE369_Divide_by_Zero__float_connect_socket_41.c":149:9)
#loc151 = loc("CWE369_Divide_by_Zero__float_connect_socket_41.c":149:40)
#loc152 = loc("CWE369_Divide_by_Zero__float_connect_socket_41.c":149:28)
#loc153 = loc("CWE369_Divide_by_Zero__float_connect_socket_41.c":149:36)
#loc154 = loc("CWE369_Divide_by_Zero__float_connect_socket_41.c":150:22)
#loc155 = loc("CWE369_Divide_by_Zero__float_connect_socket_41.c":150:9)
#loc156 = loc("CWE369_Divide_by_Zero__float_connect_socket_41.c":154:9)
#loc157 = loc("CWE369_Divide_by_Zero__float_connect_socket_41.c":158:1)
#loc158 = loc("CWE369_Divide_by_Zero__float_connect_socket_41.c":220:1)
#loc159 = loc("CWE369_Divide_by_Zero__float_connect_socket_41.c":160:5)
#loc160 = loc("CWE369_Divide_by_Zero__float_connect_socket_41.c":160:11)
#loc161 = loc("CWE369_Divide_by_Zero__float_connect_socket_41.c":162:12)
#loc162 = loc("CWE369_Divide_by_Zero__float_connect_socket_41.c":162:5)
#loc163 = loc("CWE369_Divide_by_Zero__float_connect_socket_41.c":163:5)
#loc164 = loc("CWE369_Divide_by_Zero__float_connect_socket_41.c":218:5)
#loc165 = loc("CWE369_Divide_by_Zero__float_connect_socket_41.c":168:9)
#loc166 = loc("CWE369_Divide_by_Zero__float_connect_socket_41.c":168:13)
#loc167 = loc("CWE369_Divide_by_Zero__float_connect_socket_41.c":169:9)
#loc168 = loc("CWE369_Divide_by_Zero__float_connect_socket_41.c":169:28)
#loc169 = loc("CWE369_Divide_by_Zero__float_connect_socket_41.c":170:9)
#loc170 = loc("CWE369_Divide_by_Zero__float_connect_socket_41.c":170:32)
#loc171 = loc("CWE369_Divide_by_Zero__float_connect_socket_41.c":171:9)
#loc172 = loc("CWE369_Divide_by_Zero__float_connect_socket_41.c":171:41)
#loc173 = loc("CWE369_Divide_by_Zero__float_connect_socket_41.c":172:9)
#loc174 = loc("CWE369_Divide_by_Zero__float_connect_socket_41.c":207:17)
#loc175 = loc("CWE369_Divide_by_Zero__float_connect_socket_41.c":173:9)
#loc176 = loc("CWE369_Divide_by_Zero__float_connect_socket_41.c":206:9)
#loc177 = loc("CWE369_Divide_by_Zero__float_connect_socket_41.c":181:36)
#loc178 = loc("CWE369_Divide_by_Zero__float_connect_socket_41.c":181:45)
#loc179 = loc("CWE369_Divide_by_Zero__float_connect_socket_41.c":181:58)
#loc180 = loc("CWE369_Divide_by_Zero__float_connect_socket_41.c":181:29)
#loc181 = loc("CWE369_Divide_by_Zero__float_connect_socket_41.c":181:13)
#loc182 = loc("CWE369_Divide_by_Zero__float_connect_socket_41.c":181:69)
#loc183 = loc("CWE369_Divide_by_Zero__float_connect_socket_41.c":182:13)
#loc184 = loc("CWE369_Divide_by_Zero__float_connect_socket_41.c":185:13)
#loc185 = loc("CWE369_Divide_by_Zero__float_connect_socket_41.c":182:17)
#loc186 = loc("CWE369_Divide_by_Zero__float_connect_socket_41.c":182:34)
#loc187 = loc("CWE369_Divide_by_Zero__float_connect_socket_41.c":183:13)
#loc188 = loc("CWE369_Divide_by_Zero__float_connect_socket_41.c":184:17)
#loc189 = loc("CWE369_Divide_by_Zero__float_connect_socket_41.c":186:20)
#loc190 = loc("CWE369_Divide_by_Zero__float_connect_socket_41.c":186:21)
#loc191 = loc("CWE369_Divide_by_Zero__float_connect_socket_41.c":186:30)
#loc192 = loc("CWE369_Divide_by_Zero__float_connect_socket_41.c":186:33)
#loc193 = loc("CWE369_Divide_by_Zero__float_connect_socket_41.c":186:47)
#loc194 = loc("CWE369_Divide_by_Zero__float_connect_socket_41.c":186:13)
#loc195 = loc("CWE369_Divide_by_Zero__float_connect_socket_41.c":186:48)
#loc196 = loc("CWE369_Divide_by_Zero__float_connect_socket_41.c":187:34)
#loc197 = loc("CWE369_Divide_by_Zero__float_connect_socket_41.c":187:13)
#loc198 = loc("CWE369_Divide_by_Zero__float_connect_socket_41.c":188:49)
#loc199 = loc("CWE369_Divide_by_Zero__float_connect_socket_41.c":188:39)
#loc200 = loc("CWE369_Divide_by_Zero__float_connect_socket_41.c":188:13)
#loc201 = loc("CWE369_Divide_by_Zero__float_connect_socket_41.c":188:59)
#loc202 = loc("CWE369_Divide_by_Zero__float_connect_socket_41.c":189:38)
#loc203 = loc("CWE369_Divide_by_Zero__float_connect_socket_41.c":189:32)
#loc204 = loc("CWE369_Divide_by_Zero__float_connect_socket_41.c":189:13)
#loc205 = loc("CWE369_Divide_by_Zero__float_connect_socket_41.c":189:46)
#loc206 = loc("CWE369_Divide_by_Zero__float_connect_socket_41.c":190:13)
#loc207 = loc("CWE369_Divide_by_Zero__float_connect_socket_41.c":193:13)
#loc208 = loc("CWE369_Divide_by_Zero__float_connect_socket_41.c":190:25)
#loc209 = loc("CWE369_Divide_by_Zero__float_connect_socket_41.c":190:58)
#loc210 = loc("CWE369_Divide_by_Zero__float_connect_socket_41.c":190:59)
#loc211 = loc("CWE369_Divide_by_Zero__float_connect_socket_41.c":190:68)
#loc212 = loc("CWE369_Divide_by_Zero__float_connect_socket_41.c":190:82)
#loc213 = loc("CWE369_Divide_by_Zero__float_connect_socket_41.c":190:17)
#loc214 = loc("CWE369_Divide_by_Zero__float_connect_socket_41.c":190:88)
#loc215 = loc("CWE369_Divide_by_Zero__float_connect_socket_41.c":191:13)
#loc216 = loc("CWE369_Divide_by_Zero__float_connect_socket_41.c":192:17)
#loc217 = loc("CWE369_Divide_by_Zero__float_connect_socket_41.c":197:31)
#loc218 = loc("CWE369_Divide_by_Zero__float_connect_socket_41.c":197:46)
#loc219 = loc("CWE369_Divide_by_Zero__float_connect_socket_41.c":197:59)
#loc220 = loc("CWE369_Divide_by_Zero__float_connect_socket_41.c":197:77)
#loc221 = loc("CWE369_Divide_by_Zero__float_connect_socket_41.c":197:80)
#loc222 = loc("CWE369_Divide_by_Zero__float_connect_socket_41.c":197:26)
#loc223 = loc("CWE369_Divide_by_Zero__float_connect_socket_41.c":197:13)
#loc224 = loc("CWE369_Divide_by_Zero__float_connect_socket_41.c":197:81)
#loc225 = loc("CWE369_Divide_by_Zero__float_connect_socket_41.c":198:13)
#loc226 = loc("CWE369_Divide_by_Zero__float_connect_socket_41.c":201:13)
#loc227 = loc("CWE369_Divide_by_Zero__float_connect_socket_41.c":198:17)
#loc228 = loc("CWE369_Divide_by_Zero__float_connect_socket_41.c":198:31)
#loc229 = loc("CWE369_Divide_by_Zero__float_connect_socket_41.c":198:44)
#loc230 = loc("CWE369_Divide_by_Zero__float_connect_socket_41.c":198:47)
#loc231 = loc("CWE369_Divide_by_Zero__float_connect_socket_41.c":198:61)
#loc232 = loc("CWE369_Divide_by_Zero__float_connect_socket_41.c":199:13)
#loc233 = loc("CWE369_Divide_by_Zero__float_connect_socket_41.c":200:17)
#loc234 = loc("CWE369_Divide_by_Zero__float_connect_socket_41.c":203:39)
#loc235 = loc("CWE369_Divide_by_Zero__float_connect_socket_41.c":203:25)
#loc236 = loc("CWE369_Divide_by_Zero__float_connect_socket_41.c":203:13)
#loc237 = loc("CWE369_Divide_by_Zero__float_connect_socket_41.c":205:32)
#loc238 = loc("CWE369_Divide_by_Zero__float_connect_socket_41.c":205:27)
#loc239 = loc("CWE369_Divide_by_Zero__float_connect_socket_41.c":205:13)
#loc240 = loc("CWE369_Divide_by_Zero__float_connect_socket_41.c":205:43)
#loc241 = loc("CWE369_Divide_by_Zero__float_connect_socket_41.c":207:16)
#loc242 = loc("CWE369_Divide_by_Zero__float_connect_socket_41.c":208:9)
#loc243 = loc("CWE369_Divide_by_Zero__float_connect_socket_41.c":211:9)
#loc244 = loc("CWE369_Divide_by_Zero__float_connect_socket_41.c":208:13)
#loc245 = loc("CWE369_Divide_by_Zero__float_connect_socket_41.c":208:30)
#loc246 = loc("CWE369_Divide_by_Zero__float_connect_socket_41.c":209:9)
#loc247 = loc("CWE369_Divide_by_Zero__float_connect_socket_41.c":210:26)
#loc248 = loc("CWE369_Divide_by_Zero__float_connect_socket_41.c":210:13)
#loc249 = loc("CWE369_Divide_by_Zero__float_connect_socket_41.c":219:17)
#loc250 = loc("CWE369_Divide_by_Zero__float_connect_socket_41.c":219:5)
#loc251 = loc("CWE369_Divide_by_Zero__float_connect_socket_41.c":124:1)
#loc252 = loc("CWE369_Divide_by_Zero__float_connect_socket_41.c":131:1)
#loc255 = loc("CWE369_Divide_by_Zero__float_connect_socket_41.c":125:1)
#loc256 = loc("CWE369_Divide_by_Zero__float_connect_socket_41.c":126:5)
#loc257 = loc("CWE369_Divide_by_Zero__float_connect_socket_41.c":130:5)
#loc258 = loc("CWE369_Divide_by_Zero__float_connect_socket_41.c":128:9)
#loc259 = loc("CWE369_Divide_by_Zero__float_connect_socket_41.c":128:40)
#loc260 = loc("CWE369_Divide_by_Zero__float_connect_socket_41.c":128:28)
#loc261 = loc("CWE369_Divide_by_Zero__float_connect_socket_41.c":128:36)
#loc262 = loc("CWE369_Divide_by_Zero__float_connect_socket_41.c":129:22)
#loc263 = loc("CWE369_Divide_by_Zero__float_connect_socket_41.c":129:9)
#loc264 = loc("CWE369_Divide_by_Zero__float_connect_socket_41.c":133:1)
#loc265 = loc("CWE369_Divide_by_Zero__float_connect_socket_41.c":141:1)
#loc266 = loc("CWE369_Divide_by_Zero__float_connect_socket_41.c":135:5)
#loc267 = loc("CWE369_Divide_by_Zero__float_connect_socket_41.c":135:11)
#loc268 = loc("CWE369_Divide_by_Zero__float_connect_socket_41.c":137:12)
#loc269 = loc("CWE369_Divide_by_Zero__float_connect_socket_41.c":137:5)
#loc270 = loc("CWE369_Divide_by_Zero__float_connect_socket_41.c":139:12)
#loc271 = loc("CWE369_Divide_by_Zero__float_connect_socket_41.c":139:5)
#loc272 = loc("CWE369_Divide_by_Zero__float_connect_socket_41.c":140:17)
#loc273 = loc("CWE369_Divide_by_Zero__float_connect_socket_41.c":140:5)
#loc274 = loc(fused[#loc1, #loc2])
#loc275 = loc(fused[#loc3, #loc4])
#loc276 = loc(fused[#loc6, #loc7])
#loc277 = loc(fused[#loc8, #loc9])
#loc278 = loc(fused[#loc10, #loc11])
#loc279 = loc(fused[#loc12, #loc13])
#loc280 = loc(fused[#loc14, #loc15])
#loc281 = loc(fused[#loc16, #loc17])
#loc282 = loc(fused[#loc18, #loc19])
#loc284 = loc(fused[#loc23, #loc24])
#loc285 = loc(fused[#loc25, #loc26])
#loc286 = loc(fused[#loc27, #loc28])
#loc287 = loc(fused[#loc31, #loc32])
#loc288 = loc(fused[#loc33, #loc34])
#loc289 = loc(fused[#loc36, #loc35])
#loc290 = loc(fused[#loc37, #loc38])
#loc291 = loc(fused[#loc39, #loc40])
#loc292 = loc(fused[#loc41, #loc42])
#loc293 = loc(fused[#loc43, #loc44])
#loc294 = loc(fused[#loc45, #loc46])
#loc295 = loc(fused[#loc47, #loc48])
#loc296 = loc(fused[#loc49, #loc50])
#loc297 = loc(fused[#loc55, #loc56])
#loc298 = loc(fused[#loc57, #loc58])
#loc299 = loc(fused[#loc59, #loc60])
#loc300 = loc(fused[#loc61, #loc58])
#loc301 = loc(fused[#loc63, #loc64])
#loc302 = loc(fused[#loc66, #loc67])
#loc303 = loc(fused[#loc68, #loc69])
#loc304 = loc(fused[#loc72, #loc70])
#loc305 = loc(fused[#loc76, #loc77])
#loc306 = loc(fused[#loc81, #loc82])
#loc307 = loc(fused[#loc83, #loc84])
#loc308 = loc(fused[#loc86, #loc87])
#loc309 = loc(fused[#loc88, #loc89])
#loc310 = loc(fused[#loc90, #loc91])
#loc311 = loc(fused[#loc92, #loc84])
#loc312 = loc(fused[#loc100, #loc101])
#loc313 = loc(fused[#loc102, #loc103])
#loc314 = loc(fused[#loc104, #loc105])
#loc315 = loc(fused[#loc107, #loc108])
#loc316 = loc(fused[#loc109, #loc103])
#loc317 = loc(fused[#loc113, #loc111])
#loc318 = loc(fused[#loc116, #loc117])
#loc319 = loc(fused[#loc119, #loc120])
#loc320 = loc(fused[#loc121, #loc122])
#loc321 = loc(fused[#loc123, #loc120])
#loc322 = loc(fused[#loc128, #loc129])
#loc323 = loc(fused[#loc130, #loc131])
#loc324 = loc(fused[#loc132, #loc133])
#loc325 = loc(fused[#loc134, #loc135])
#loc326 = loc(fused[#loc137, #loc138])
#loc328 = loc(fused[#loc142, #loc143])
#loc329 = loc(fused[#loc146, #loc145])
#loc330 = loc(fused[#loc147, #loc148, #loc149, #loc143])
#loc331 = loc(fused[#loc150, #loc151])
#loc332 = loc(fused[#loc152, #loc153])
#loc333 = loc(fused[#loc157, #loc158])
#loc334 = loc(fused[#loc159, #loc160])
#loc335 = loc(fused[#loc162, #loc161])
#loc336 = loc(fused[#loc163, #loc164])
#loc337 = loc(fused[#loc165, #loc166])
#loc338 = loc(fused[#loc167, #loc168])
#loc339 = loc(fused[#loc169, #loc170])
#loc340 = loc(fused[#loc171, #loc172])
#loc341 = loc(fused[#loc173, #loc174])
#loc342 = loc(fused[#loc175, #loc176])
#loc343 = loc(fused[#loc181, #loc182])
#loc344 = loc(fused[#loc183, #loc184])
#loc345 = loc(fused[#loc185, #loc186])
#loc346 = loc(fused[#loc187, #loc184])
#loc347 = loc(fused[#loc189, #loc190])
#loc348 = loc(fused[#loc192, #loc193])
#loc349 = loc(fused[#loc194, #loc195])
#loc350 = loc(fused[#loc197, #loc196])
#loc351 = loc(fused[#loc200, #loc201])
#loc352 = loc(fused[#loc204, #loc205])
#loc353 = loc(fused[#loc206, #loc207])
#loc354 = loc(fused[#loc209, #loc210])
#loc355 = loc(fused[#loc211, #loc212])
#loc356 = loc(fused[#loc213, #loc214])
#loc357 = loc(fused[#loc215, #loc207])
#loc358 = loc(fused[#loc223, #loc224])
#loc359 = loc(fused[#loc225, #loc226])
#loc360 = loc(fused[#loc227, #loc228])
#loc361 = loc(fused[#loc230, #loc231])
#loc362 = loc(fused[#loc232, #loc226])
#loc363 = loc(fused[#loc236, #loc234])
#loc364 = loc(fused[#loc239, #loc240])
#loc365 = loc(fused[#loc242, #loc243])
#loc366 = loc(fused[#loc244, #loc245])
#loc367 = loc(fused[#loc246, #loc243])
#loc368 = loc(fused[#loc251, #loc252])
#loc370 = loc(fused[#loc256, #loc257])
#loc371 = loc(fused[#loc258, #loc259])
#loc372 = loc(fused[#loc260, #loc261])
#loc373 = loc(fused[#loc264, #loc265])
#loc374 = loc(fused[#loc266, #loc267])
#loc375 = loc(fused[#loc269, #loc268])
#loc376 = loc(fused[#loc271, #loc270])
