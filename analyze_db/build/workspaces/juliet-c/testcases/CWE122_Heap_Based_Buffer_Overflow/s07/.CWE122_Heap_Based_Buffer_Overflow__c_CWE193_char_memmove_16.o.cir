!s32i = !cir.int<s, 32>
!s8i = !cir.int<s, 8>
!u64i = !cir.int<u, 64>
!void = !cir.void
#fn_attr = #cir<extra({nothrow = #cir.nothrow})>
#fn_attr1 = #cir<extra({inline = #cir.inline<no>, nothrow = #cir.nothrow, optnone = #cir.optnone, uwtable = #cir.uwtable<async>})>
module @"/workspaces/juliet-c/testcases/CWE122_Heap_Based_Buffer_Overflow/s07/CWE122_Heap_Based_Buffer_Overflow__c_CWE193_char_memmove_16.c" attributes {cir.lang = #cir.lang<c>, cir.sob = #cir.signed_overflow_behavior<undefined>, cir.triple = "x86_64-unknown-linux-gnu", cir.type_size_info = #cir.type_size_info<char = 8, int = 32, size_t = 64>, cir.uwtable = #cir.uwtable<async>, dlti.dl_spec = #dlti.dl_spec<i1 = dense<8> : vector<2xi64>, !llvm.ptr = dense<64> : vector<4xi64>, i16 = dense<16> : vector<2xi64>, i8 = dense<8> : vector<2xi64>, f16 = dense<16> : vector<2xi64>, i32 = dense<32> : vector<2xi64>, f128 = dense<128> : vector<2xi64>, f64 = dense<64> : vector<2xi64>, !llvm.ptr<272> = dense<64> : vector<4xi64>, !llvm.ptr<271> = dense<32> : vector<4xi64>, i64 = dense<64> : vector<2xi64>, f80 = dense<128> : vector<2xi64>, !llvm.ptr<270> = dense<32> : vector<4xi64>, i128 = dense<128> : vector<2xi64>, "dlti.endianness" = "little", "dlti.mangling_mode" = "e", "dlti.stack_alignment" = 128 : i64>} {
  cir.global "private" constant cir_private @__const.goodG2B.source = #cir.const_array<"AAAAAAAAAA\00" : !cir.array<!s8i x 11>> : !cir.array<!s8i x 11> loc(#loc103)
  cir.global "private" constant cir_private @__const.CWE122_Heap_Based_Buffer_Overflow__c_CWE193_char_memmove_16_bad.source = #cir.const_array<"AAAAAAAAAA\00" : !cir.array<!s8i x 11>> : !cir.array<!s8i x 11> loc(#loc104)
  cir.func private @malloc(!u64i) -> !cir.ptr<!void> extra(#fn_attr) loc(#loc105)
  cir.func private @exit(!s32i) extra(#fn_attr) loc(#loc106)
  cir.func private @strlen(!cir.ptr<!s8i>) -> !u64i extra(#fn_attr) loc(#loc107)
  cir.func private @printLine(!cir.ptr<!s8i>) loc(#loc108)
  cir.func private @free(!cir.ptr<!void>) extra(#fn_attr) loc(#loc109)
  cir.func no_proto @CWE122_Heap_Based_Buffer_Overflow__c_CWE193_char_memmove_16_bad() extra(#fn_attr1) {
    %0 = cir.alloca !cir.ptr<!s8i>, !cir.ptr<!cir.ptr<!s8i>>, ["data"] {alignment = 8 : i64} loc(#loc111)
    %1 = cir.const #cir.ptr<null> : !cir.ptr<!s8i> loc(#loc19)
    cir.store %1, %0 : !cir.ptr<!s8i>, !cir.ptr<!cir.ptr<!s8i>> loc(#loc112)
    cir.scope {
      cir.while {
        %2 = cir.const #cir.int<1> : !s32i loc(#loc23)
        %3 = cir.cast(int_to_bool, %2 : !s32i), !cir.bool loc(#loc23)
        cir.condition(%3) loc(#loc23)
      } do {
        cir.scope {
          %2 = cir.get_global @malloc : !cir.ptr<!cir.func<(!u64i) -> !cir.ptr<!void>>> loc(#loc25)
          %3 = cir.const #cir.int<10> : !s32i loc(#loc26)
          %4 = cir.cast(integral, %3 : !s32i), !u64i loc(#loc26)
          %5 = cir.const #cir.int<1> : !u64i loc(#loc115)
          %6 = cir.binop(mul, %4, %5) : !u64i loc(#loc116)
          %7 = cir.call @malloc(%6) : (!u64i) -> !cir.ptr<!void> extra(#fn_attr) loc(#loc25)
          %8 = cir.cast(bitcast, %7 : !cir.ptr<!void>), !cir.ptr<!s8i> loc(#loc117)
          cir.store %8, %0 : !cir.ptr<!s8i>, !cir.ptr<!cir.ptr<!s8i>> loc(#loc118)
          cir.scope {
            %9 = cir.load %0 : !cir.ptr<!cir.ptr<!s8i>>, !cir.ptr<!s8i> loc(#loc33)
            %10 = cir.const #cir.ptr<null> : !cir.ptr<!void> loc(#loc34)
            %11 = cir.cast(bitcast, %10 : !cir.ptr<!void>), !cir.ptr<!s8i> loc(#loc34)
            %12 = cir.cmp(eq, %9, %11) : !cir.ptr<!s8i>, !cir.bool loc(#loc120)
            cir.if %12 {
              %13 = cir.get_global @exit : !cir.ptr<!cir.func<(!s32i)>> loc(#loc36)
              %14 = cir.const #cir.int<1> : !s32i loc(#loc37)
              %15 = cir.unary(minus, %14) nsw : !s32i, !s32i loc(#loc38)
              cir.call @exit(%15) : (!s32i) -> () extra(#fn_attr) loc(#loc36)
            } loc(#loc121)
          } loc(#loc119)
          cir.break loc(#loc39)
        } loc(#loc114)
        cir.yield loc(#loc22)
      } loc(#loc113)
    } loc(#loc113)
    cir.scope {
      %2 = cir.alloca !cir.array<!s8i x 11>, !cir.ptr<!cir.array<!s8i x 11>>, ["source"] {alignment = 1 : i64} loc(#loc104)
      %3 = cir.get_global @__const.CWE122_Heap_Based_Buffer_Overflow__c_CWE193_char_memmove_16_bad.source : !cir.ptr<!cir.array<!s8i x 11>> loc(#loc104)
      cir.copy %3 to %2 : !cir.ptr<!cir.array<!s8i x 11>> loc(#loc104)
      %4 = cir.load %0 : !cir.ptr<!cir.ptr<!s8i>>, !cir.ptr<!s8i> loc(#loc42)
      %5 = cir.cast(bitcast, %4 : !cir.ptr<!s8i>), !cir.ptr<!void> loc(#loc42)
      %6 = cir.cast(array_to_ptrdecay, %2 : !cir.ptr<!cir.array<!s8i x 11>>), !cir.ptr<!s8i> loc(#loc43)
      %7 = cir.cast(bitcast, %6 : !cir.ptr<!s8i>), !cir.ptr<!void> loc(#loc43)
      %8 = cir.get_global @strlen : !cir.ptr<!cir.func<(!cir.ptr<!s8i>) -> !u64i>> loc(#loc44)
      %9 = cir.cast(array_to_ptrdecay, %2 : !cir.ptr<!cir.array<!s8i x 11>>), !cir.ptr<!s8i> loc(#loc45)
      %10 = cir.call @strlen(%9) : (!cir.ptr<!s8i>) -> !u64i side_effect(pure) extra(#fn_attr) loc(#loc44)
      %11 = cir.const #cir.int<1> : !s32i loc(#loc46)
      %12 = cir.cast(integral, %11 : !s32i), !u64i loc(#loc46)
      %13 = cir.binop(add, %10, %12) : !u64i loc(#loc123)
      %14 = cir.const #cir.int<1> : !u64i loc(#loc124)
      %15 = cir.binop(mul, %13, %14) : !u64i loc(#loc125)
      cir.libc.memmove %15 bytes from %7 to %5 : !cir.ptr<!void>, !u64i loc(#loc126)
      %16 = cir.load %0 : !cir.ptr<!cir.ptr<!s8i>>, !cir.ptr<!s8i> loc(#loc52)
      cir.call @printLine(%16) : (!cir.ptr<!s8i>) -> () loc(#loc53)
      %17 = cir.get_global @free : !cir.ptr<!cir.func<(!cir.ptr<!void>)>> loc(#loc54)
      %18 = cir.load %0 : !cir.ptr<!cir.ptr<!s8i>>, !cir.ptr<!s8i> loc(#loc55)
      %19 = cir.cast(bitcast, %18 : !cir.ptr<!s8i>), !cir.ptr<!void> loc(#loc55)
      cir.call @free(%19) : (!cir.ptr<!void>) -> () extra(#fn_attr) loc(#loc54)
    } loc(#loc122)
    cir.return loc(#loc16)
  } loc(#loc110)
  cir.func no_proto @CWE122_Heap_Based_Buffer_Overflow__c_CWE193_char_memmove_16_good() extra(#fn_attr1) {
    %0 = cir.get_global @goodG2B : !cir.ptr<!cir.func<()>> loc(#loc128)
    cir.call %0() : (!cir.ptr<!cir.func<()>>) -> () loc(#loc58)
    cir.return loc(#loc57)
  } loc(#loc127)
  cir.func no_proto internal private @goodG2B() extra(#fn_attr1) {
    %0 = cir.alloca !cir.ptr<!s8i>, !cir.ptr<!cir.ptr<!s8i>>, ["data"] {alignment = 8 : i64} loc(#loc130)
    %1 = cir.const #cir.ptr<null> : !cir.ptr<!s8i> loc(#loc64)
    cir.store %1, %0 : !cir.ptr<!s8i>, !cir.ptr<!cir.ptr<!s8i>> loc(#loc131)
    cir.scope {
      cir.while {
        %2 = cir.const #cir.int<1> : !s32i loc(#loc68)
        %3 = cir.cast(int_to_bool, %2 : !s32i), !cir.bool loc(#loc68)
        cir.condition(%3) loc(#loc68)
      } do {
        cir.scope {
          %2 = cir.get_global @malloc : !cir.ptr<!cir.func<(!u64i) -> !cir.ptr<!void>>> loc(#loc70)
          %3 = cir.const #cir.int<10> : !s32i loc(#loc71)
          %4 = cir.const #cir.int<1> : !s32i loc(#loc72)
          %5 = cir.binop(add, %3, %4) nsw : !s32i loc(#loc71)
          %6 = cir.cast(integral, %5 : !s32i), !u64i loc(#loc71)
          %7 = cir.const #cir.int<1> : !u64i loc(#loc134)
          %8 = cir.binop(mul, %6, %7) : !u64i loc(#loc135)
          %9 = cir.call @malloc(%8) : (!u64i) -> !cir.ptr<!void> extra(#fn_attr) loc(#loc70)
          %10 = cir.cast(bitcast, %9 : !cir.ptr<!void>), !cir.ptr<!s8i> loc(#loc136)
          cir.store %10, %0 : !cir.ptr<!s8i>, !cir.ptr<!cir.ptr<!s8i>> loc(#loc137)
          cir.scope {
            %11 = cir.load %0 : !cir.ptr<!cir.ptr<!s8i>>, !cir.ptr<!s8i> loc(#loc80)
            %12 = cir.const #cir.ptr<null> : !cir.ptr<!void> loc(#loc81)
            %13 = cir.cast(bitcast, %12 : !cir.ptr<!void>), !cir.ptr<!s8i> loc(#loc81)
            %14 = cir.cmp(eq, %11, %13) : !cir.ptr<!s8i>, !cir.bool loc(#loc139)
            cir.if %14 {
              %15 = cir.get_global @exit : !cir.ptr<!cir.func<(!s32i)>> loc(#loc83)
              %16 = cir.const #cir.int<1> : !s32i loc(#loc84)
              %17 = cir.unary(minus, %16) nsw : !s32i, !s32i loc(#loc85)
              cir.call @exit(%17) : (!s32i) -> () extra(#fn_attr) loc(#loc83)
            } loc(#loc140)
          } loc(#loc138)
          cir.break loc(#loc86)
        } loc(#loc133)
        cir.yield loc(#loc67)
      } loc(#loc132)
    } loc(#loc132)
    cir.scope {
      %2 = cir.alloca !cir.array<!s8i x 11>, !cir.ptr<!cir.array<!s8i x 11>>, ["source"] {alignment = 1 : i64} loc(#loc103)
      %3 = cir.get_global @__const.goodG2B.source : !cir.ptr<!cir.array<!s8i x 11>> loc(#loc103)
      cir.copy %3 to %2 : !cir.ptr<!cir.array<!s8i x 11>> loc(#loc103)
      %4 = cir.load %0 : !cir.ptr<!cir.ptr<!s8i>>, !cir.ptr<!s8i> loc(#loc89)
      %5 = cir.cast(bitcast, %4 : !cir.ptr<!s8i>), !cir.ptr<!void> loc(#loc89)
      %6 = cir.cast(array_to_ptrdecay, %2 : !cir.ptr<!cir.array<!s8i x 11>>), !cir.ptr<!s8i> loc(#loc90)
      %7 = cir.cast(bitcast, %6 : !cir.ptr<!s8i>), !cir.ptr<!void> loc(#loc90)
      %8 = cir.get_global @strlen : !cir.ptr<!cir.func<(!cir.ptr<!s8i>) -> !u64i>> loc(#loc91)
      %9 = cir.cast(array_to_ptrdecay, %2 : !cir.ptr<!cir.array<!s8i x 11>>), !cir.ptr<!s8i> loc(#loc92)
      %10 = cir.call @strlen(%9) : (!cir.ptr<!s8i>) -> !u64i side_effect(pure) extra(#fn_attr) loc(#loc91)
      %11 = cir.const #cir.int<1> : !s32i loc(#loc93)
      %12 = cir.cast(integral, %11 : !s32i), !u64i loc(#loc93)
      %13 = cir.binop(add, %10, %12) : !u64i loc(#loc142)
      %14 = cir.const #cir.int<1> : !u64i loc(#loc143)
      %15 = cir.binop(mul, %13, %14) : !u64i loc(#loc144)
      cir.libc.memmove %15 bytes from %7 to %5 : !cir.ptr<!void>, !u64i loc(#loc145)
      %16 = cir.load %0 : !cir.ptr<!cir.ptr<!s8i>>, !cir.ptr<!s8i> loc(#loc99)
      cir.call @printLine(%16) : (!cir.ptr<!s8i>) -> () loc(#loc100)
      %17 = cir.get_global @free : !cir.ptr<!cir.func<(!cir.ptr<!void>)>> loc(#loc101)
      %18 = cir.load %0 : !cir.ptr<!cir.ptr<!s8i>>, !cir.ptr<!s8i> loc(#loc102)
      %19 = cir.cast(bitcast, %18 : !cir.ptr<!s8i>), !cir.ptr<!void> loc(#loc102)
      cir.call @free(%19) : (!cir.ptr<!void>) -> () extra(#fn_attr) loc(#loc101)
    } loc(#loc141)
    cir.return loc(#loc61)
  } loc(#loc129)
} loc(#loc)
#loc = loc("/workspaces/juliet-c/testcases/CWE122_Heap_Based_Buffer_Overflow/s07/CWE122_Heap_Based_Buffer_Overflow__c_CWE193_char_memmove_16.c":0:0)
#loc1 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE193_char_memmove_16.c":66:9)
#loc2 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE193_char_memmove_16.c":66:29)
#loc3 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE193_char_memmove_16.c":40:9)
#loc4 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE193_char_memmove_16.c":40:29)
#loc5 = loc("/usr/include/stdlib.h":672:1)
#loc6 = loc("/usr/include/stdlib.h":672:45)
#loc7 = loc("/usr/include/stdlib.h":756:1)
#loc8 = loc("/usr/include/stdlib.h":756:70)
#loc9 = loc("/usr/include/string.h":407:1)
#loc10 = loc("/usr/include/string.h":408:33)
#loc11 = loc("../../../testcasesupport/std_testcase_io.h":14:1)
#loc12 = loc("../../../testcasesupport/std_testcase_io.h":14:33)
#loc13 = loc("/usr/include/stdlib.h":687:1)
#loc14 = loc("/usr/include/stdlib.h":687:32)
#loc15 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE193_char_memmove_16.c":28:1)
#loc16 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE193_char_memmove_16.c":47:1)
#loc17 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE193_char_memmove_16.c":30:5)
#loc18 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE193_char_memmove_16.c":30:12)
#loc19 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE193_char_memmove_16.c":31:12)
#loc20 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE193_char_memmove_16.c":31:5)
#loc21 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE193_char_memmove_16.c":32:5)
#loc22 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE193_char_memmove_16.c":38:5)
#loc23 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE193_char_memmove_16.c":32:11)
#loc24 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE193_char_memmove_16.c":33:5)
#loc25 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE193_char_memmove_16.c":35:24)
#loc26 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE193_char_memmove_16.c":35:31)
#loc27 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE193_char_memmove_16.c":35:34)
#loc28 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE193_char_memmove_16.c":35:45)
#loc29 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE193_char_memmove_16.c":35:46)
#loc30 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE193_char_memmove_16.c":35:9)
#loc31 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE193_char_memmove_16.c":36:9)
#loc32 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE193_char_memmove_16.c":36:37)
#loc33 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE193_char_memmove_16.c":36:13)
#loc34 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE193_char_memmove_16.c":36:21)
#loc35 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE193_char_memmove_16.c":36:27)
#loc36 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE193_char_memmove_16.c":36:28)
#loc37 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE193_char_memmove_16.c":36:34)
#loc38 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE193_char_memmove_16.c":36:33)
#loc39 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE193_char_memmove_16.c":37:9)
#loc40 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE193_char_memmove_16.c":39:5)
#loc41 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE193_char_memmove_16.c":46:5)
#loc42 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE193_char_memmove_16.c":43:17)
#loc43 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE193_char_memmove_16.c":43:23)
#loc44 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE193_char_memmove_16.c":43:32)
#loc45 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE193_char_memmove_16.c":43:39)
#loc46 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE193_char_memmove_16.c":43:49)
#loc47 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE193_char_memmove_16.c":43:54)
#loc48 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE193_char_memmove_16.c":43:65)
#loc49 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE193_char_memmove_16.c":43:31)
#loc50 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE193_char_memmove_16.c":43:9)
#loc51 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE193_char_memmove_16.c":43:66)
#loc52 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE193_char_memmove_16.c":44:19)
#loc53 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE193_char_memmove_16.c":44:9)
#loc54 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE193_char_memmove_16.c":45:9)
#loc55 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE193_char_memmove_16.c":45:14)
#loc56 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE193_char_memmove_16.c":75:1)
#loc57 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE193_char_memmove_16.c":78:1)
#loc58 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE193_char_memmove_16.c":77:5)
#loc59 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE193_char_memmove_16.c":77:13)
#loc60 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE193_char_memmove_16.c":54:1)
#loc61 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE193_char_memmove_16.c":73:1)
#loc62 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE193_char_memmove_16.c":56:5)
#loc63 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE193_char_memmove_16.c":56:12)
#loc64 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE193_char_memmove_16.c":57:12)
#loc65 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE193_char_memmove_16.c":57:5)
#loc66 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE193_char_memmove_16.c":58:5)
#loc67 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE193_char_memmove_16.c":64:5)
#loc68 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE193_char_memmove_16.c":58:11)
#loc69 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE193_char_memmove_16.c":59:5)
#loc70 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE193_char_memmove_16.c":61:24)
#loc71 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE193_char_memmove_16.c":61:32)
#loc72 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE193_char_memmove_16.c":61:35)
#loc73 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE193_char_memmove_16.c":61:38)
#loc74 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE193_char_memmove_16.c":61:49)
#loc75 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE193_char_memmove_16.c":61:31)
#loc76 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE193_char_memmove_16.c":61:50)
#loc77 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE193_char_memmove_16.c":61:9)
#loc78 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE193_char_memmove_16.c":62:9)
#loc79 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE193_char_memmove_16.c":62:37)
#loc80 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE193_char_memmove_16.c":62:13)
#loc81 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE193_char_memmove_16.c":62:21)
#loc82 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE193_char_memmove_16.c":62:27)
#loc83 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE193_char_memmove_16.c":62:28)
#loc84 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE193_char_memmove_16.c":62:34)
#loc85 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE193_char_memmove_16.c":62:33)
#loc86 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE193_char_memmove_16.c":63:9)
#loc87 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE193_char_memmove_16.c":65:5)
#loc88 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE193_char_memmove_16.c":72:5)
#loc89 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE193_char_memmove_16.c":69:17)
#loc90 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE193_char_memmove_16.c":69:23)
#loc91 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE193_char_memmove_16.c":69:32)
#loc92 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE193_char_memmove_16.c":69:39)
#loc93 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE193_char_memmove_16.c":69:49)
#loc94 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE193_char_memmove_16.c":69:54)
#loc95 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE193_char_memmove_16.c":69:65)
#loc96 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE193_char_memmove_16.c":69:31)
#loc97 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE193_char_memmove_16.c":69:9)
#loc98 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE193_char_memmove_16.c":69:66)
#loc99 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE193_char_memmove_16.c":70:19)
#loc100 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE193_char_memmove_16.c":70:9)
#loc101 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE193_char_memmove_16.c":71:9)
#loc102 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE193_char_memmove_16.c":71:14)
#loc103 = loc(fused[#loc1, #loc2])
#loc104 = loc(fused[#loc3, #loc4])
#loc105 = loc(fused[#loc5, #loc6])
#loc106 = loc(fused[#loc7, #loc8])
#loc107 = loc(fused[#loc9, #loc10])
#loc108 = loc(fused[#loc11, #loc12])
#loc109 = loc(fused[#loc13, #loc14])
#loc110 = loc(fused[#loc15, #loc16])
#loc111 = loc(fused[#loc17, #loc18])
#loc112 = loc(fused[#loc20, #loc19])
#loc113 = loc(fused[#loc21, #loc22])
#loc114 = loc(fused[#loc24, #loc22])
#loc115 = loc(fused[#loc27, #loc28])
#loc116 = loc(fused[#loc26, #loc28])
#loc117 = loc(fused[#loc25, #loc29])
#loc118 = loc(fused[#loc30, #loc29])
#loc119 = loc(fused[#loc31, #loc32])
#loc120 = loc(fused[#loc33, #loc34])
#loc121 = loc(fused[#loc35, #loc32])
#loc122 = loc(fused[#loc40, #loc41])
#loc123 = loc(fused[#loc44, #loc46])
#loc124 = loc(fused[#loc47, #loc48])
#loc125 = loc(fused[#loc49, #loc48])
#loc126 = loc(fused[#loc50, #loc51])
#loc127 = loc(fused[#loc56, #loc57])
#loc128 = loc(fused[#loc58, #loc59])
#loc129 = loc(fused[#loc60, #loc61])
#loc130 = loc(fused[#loc62, #loc63])
#loc131 = loc(fused[#loc65, #loc64])
#loc132 = loc(fused[#loc66, #loc67])
#loc133 = loc(fused[#loc69, #loc67])
#loc134 = loc(fused[#loc73, #loc74])
#loc135 = loc(fused[#loc75, #loc74])
#loc136 = loc(fused[#loc70, #loc76])
#loc137 = loc(fused[#loc77, #loc76])
#loc138 = loc(fused[#loc78, #loc79])
#loc139 = loc(fused[#loc80, #loc81])
#loc140 = loc(fused[#loc82, #loc79])
#loc141 = loc(fused[#loc87, #loc88])
#loc142 = loc(fused[#loc91, #loc93])
#loc143 = loc(fused[#loc94, #loc95])
#loc144 = loc(fused[#loc96, #loc95])
#loc145 = loc(fused[#loc97, #loc98])
