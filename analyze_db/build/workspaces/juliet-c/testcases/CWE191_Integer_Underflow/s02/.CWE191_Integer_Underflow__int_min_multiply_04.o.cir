!s32i = !cir.int<s, 32>
!s8i = !cir.int<s, 8>
#fn_attr = #cir<extra({inline = #cir.inline<no>, nothrow = #cir.nothrow, optnone = #cir.optnone, uwtable = #cir.uwtable<async>})>
module @"/workspaces/juliet-c/testcases/CWE191_Integer_Underflow/s02/CWE191_Integer_Underflow__int_min_multiply_04.c" attributes {cir.lang = #cir.lang<c>, cir.sob = #cir.signed_overflow_behavior<undefined>, cir.triple = "x86_64-unknown-linux-gnu", cir.type_size_info = #cir.type_size_info<char = 8, int = 32, size_t = 64>, cir.uwtable = #cir.uwtable<async>, dlti.dl_spec = #dlti.dl_spec<!llvm.ptr<272> = dense<64> : vector<4xi64>, !llvm.ptr<271> = dense<32> : vector<4xi64>, f16 = dense<16> : vector<2xi64>, f64 = dense<64> : vector<2xi64>, f128 = dense<128> : vector<2xi64>, i32 = dense<32> : vector<2xi64>, i8 = dense<8> : vector<2xi64>, i16 = dense<16> : vector<2xi64>, f80 = dense<128> : vector<2xi64>, i1 = dense<8> : vector<2xi64>, !llvm.ptr = dense<64> : vector<4xi64>, i64 = dense<64> : vector<2xi64>, !llvm.ptr<270> = dense<32> : vector<4xi64>, i128 = dense<128> : vector<2xi64>, "dlti.endianness" = "little", "dlti.stack_alignment" = 128 : i64, "dlti.mangling_mode" = "e">} {
  cir.func private @printIntLine(!s32i) loc(#loc177)
  cir.func no_proto @CWE191_Integer_Underflow__int_min_multiply_04_bad() extra(#fn_attr) {
    %0 = cir.alloca !s32i, !cir.ptr<!s32i>, ["data"] {alignment = 4 : i64} loc(#loc179)
    %1 = cir.const #cir.int<0> : !s32i loc(#loc7)
    cir.store %1, %0 : !s32i, !cir.ptr<!s32i> loc(#loc180)
    cir.scope {
      %2 = cir.const #cir.int<1> : !s32i loc(#loc11)
      %3 = cir.cast(int_to_bool, %2 : !s32i), !cir.bool loc(#loc11)
      cir.if %3 {
        %4 = cir.const #cir.int<2147483647> : !s32i loc(#loc13)
        %5 = cir.unary(minus, %4) nsw : !s32i, !s32i loc(#loc13)
        %6 = cir.const #cir.int<1> : !s32i loc(#loc13)
        %7 = cir.binop(sub, %5, %6) nsw : !s32i loc(#loc13)
        cir.store %7, %0 : !s32i, !cir.ptr<!s32i> loc(#loc183)
      } loc(#loc182)
    } loc(#loc181)
    cir.scope {
      %2 = cir.const #cir.int<1> : !s32i loc(#loc17)
      %3 = cir.cast(int_to_bool, %2 : !s32i), !cir.bool loc(#loc17)
      cir.if %3 {
        cir.scope {
          %4 = cir.load %0 : !cir.ptr<!s32i>, !s32i loc(#loc21)
          %5 = cir.const #cir.int<0> : !s32i loc(#loc22)
          %6 = cir.cmp(lt, %4, %5) : !s32i, !cir.bool loc(#loc187)
          cir.if %6 {
            %7 = cir.alloca !s32i, !cir.ptr<!s32i>, ["result", init] {alignment = 4 : i64} loc(#loc189)
            %8 = cir.load %0 : !cir.ptr<!s32i>, !s32i loc(#loc26)
            %9 = cir.const #cir.int<2> : !s32i loc(#loc25)
            %10 = cir.binop(mul, %8, %9) nsw : !s32i loc(#loc26)
            cir.store %10, %7 : !s32i, !cir.ptr<!s32i> loc(#loc189)
            %11 = cir.load %7 : !cir.ptr<!s32i>, !s32i loc(#loc27)
            cir.call @printIntLine(%11) : (!s32i) -> () loc(#loc28)
          } loc(#loc188)
        } loc(#loc186)
      } loc(#loc185)
    } loc(#loc184)
    cir.return loc(#loc4)
  } loc(#loc178)
  cir.func no_proto @CWE191_Integer_Underflow__int_min_multiply_04_good() extra(#fn_attr) {
    %0 = cir.get_global @goodB2G1 : !cir.ptr<!cir.func<()>> loc(#loc191)
    cir.call %0() : (!cir.ptr<!cir.func<()>>) -> () loc(#loc31)
    %1 = cir.get_global @goodB2G2 : !cir.ptr<!cir.func<()>> loc(#loc192)
    cir.call %1() : (!cir.ptr<!cir.func<()>>) -> () loc(#loc33)
    %2 = cir.get_global @goodG2B1 : !cir.ptr<!cir.func<()>> loc(#loc193)
    cir.call %2() : (!cir.ptr<!cir.func<()>>) -> () loc(#loc35)
    %3 = cir.get_global @goodG2B2 : !cir.ptr<!cir.func<()>> loc(#loc194)
    cir.call %3() : (!cir.ptr<!cir.func<()>>) -> () loc(#loc37)
    cir.return loc(#loc30)
  } loc(#loc190)
  cir.func private @printLine(!cir.ptr<!s8i>) loc(#loc195)
  cir.global "private" constant cir_private dsolocal @".str" = #cir.const_array<"Benign, fixed string\00" : !cir.array<!s8i x 21>> : !cir.array<!s8i x 21> {alignment = 1 : i64} loc(#loc41)
  cir.global "private" constant cir_private dsolocal @".str.1" = #cir.const_array<"data value is too small to perform multiplication.\00" : !cir.array<!s8i x 51>> : !cir.array<!s8i x 51> {alignment = 1 : i64} loc(#loc42)
  cir.func no_proto internal private @goodB2G1() extra(#fn_attr) {
    %0 = cir.alloca !s32i, !cir.ptr<!s32i>, ["data"] {alignment = 4 : i64} loc(#loc197)
    %1 = cir.const #cir.int<0> : !s32i loc(#loc47)
    cir.store %1, %0 : !s32i, !cir.ptr<!s32i> loc(#loc198)
    cir.scope {
      %2 = cir.const #cir.int<1> : !s32i loc(#loc51)
      %3 = cir.cast(int_to_bool, %2 : !s32i), !cir.bool loc(#loc51)
      cir.if %3 {
        %4 = cir.const #cir.int<2147483647> : !s32i loc(#loc53)
        %5 = cir.unary(minus, %4) nsw : !s32i, !s32i loc(#loc53)
        %6 = cir.const #cir.int<1> : !s32i loc(#loc53)
        %7 = cir.binop(sub, %5, %6) nsw : !s32i loc(#loc53)
        cir.store %7, %0 : !s32i, !cir.ptr<!s32i> loc(#loc201)
      } loc(#loc200)
    } loc(#loc199)
    cir.scope {
      %2 = cir.const #cir.int<0> : !s32i loc(#loc57)
      %3 = cir.cast(int_to_bool, %2 : !s32i), !cir.bool loc(#loc57)
      cir.if %3 {
        %4 = cir.get_global @".str" : !cir.ptr<!cir.array<!s8i x 21>> loc(#loc41)
        %5 = cir.cast(array_to_ptrdecay, %4 : !cir.ptr<!cir.array<!s8i x 21>>), !cir.ptr<!s8i> loc(#loc41)
        cir.call @printLine(%5) : (!cir.ptr<!s8i>) -> () loc(#loc61)
      } else {
        cir.scope {
          %4 = cir.load %0 : !cir.ptr<!s32i>, !s32i loc(#loc64)
          %5 = cir.const #cir.int<0> : !s32i loc(#loc65)
          %6 = cir.cmp(lt, %4, %5) : !s32i, !cir.bool loc(#loc205)
          cir.if %6 {
            cir.scope {
              %7 = cir.load %0 : !cir.ptr<!s32i>, !s32i loc(#loc69)
              %8 = cir.const #cir.int<2147483647> : !s32i loc(#loc70)
              %9 = cir.unary(minus, %8) nsw : !s32i, !s32i loc(#loc70)
              %10 = cir.const #cir.int<1> : !s32i loc(#loc70)
              %11 = cir.binop(sub, %9, %10) nsw : !s32i loc(#loc70)
              %12 = cir.const #cir.int<2> : !s32i loc(#loc71)
              %13 = cir.binop(div, %11, %12) : !s32i loc(#loc208)
              %14 = cir.cmp(gt, %7, %13) : !s32i, !cir.bool loc(#loc209)
              cir.if %14 {
                %15 = cir.alloca !s32i, !cir.ptr<!s32i>, ["result", init] {alignment = 4 : i64} loc(#loc211)
                %16 = cir.load %0 : !cir.ptr<!s32i>, !s32i loc(#loc78)
                %17 = cir.const #cir.int<2> : !s32i loc(#loc77)
                %18 = cir.binop(mul, %16, %17) nsw : !s32i loc(#loc78)
                cir.store %18, %15 : !s32i, !cir.ptr<!s32i> loc(#loc211)
                %19 = cir.load %15 : !cir.ptr<!s32i>, !s32i loc(#loc79)
                cir.call @printIntLine(%19) : (!s32i) -> () loc(#loc80)
              } else {
                %15 = cir.get_global @".str.1" : !cir.ptr<!cir.array<!s8i x 51>> loc(#loc42)
                %16 = cir.cast(array_to_ptrdecay, %15 : !cir.ptr<!cir.array<!s8i x 51>>), !cir.ptr<!s8i> loc(#loc42)
                cir.call @printLine(%16) : (!cir.ptr<!s8i>) -> () loc(#loc81)
              } loc(#loc210)
            } loc(#loc207)
          } loc(#loc206)
        } loc(#loc204)
      } loc(#loc203)
    } loc(#loc202)
    cir.return loc(#loc44)
  } loc(#loc196)
  cir.func no_proto internal private @goodB2G2() extra(#fn_attr) {
    %0 = cir.alloca !s32i, !cir.ptr<!s32i>, ["data"] {alignment = 4 : i64} loc(#loc213)
    %1 = cir.const #cir.int<0> : !s32i loc(#loc86)
    cir.store %1, %0 : !s32i, !cir.ptr<!s32i> loc(#loc214)
    cir.scope {
      %2 = cir.const #cir.int<1> : !s32i loc(#loc90)
      %3 = cir.cast(int_to_bool, %2 : !s32i), !cir.bool loc(#loc90)
      cir.if %3 {
        %4 = cir.const #cir.int<2147483647> : !s32i loc(#loc92)
        %5 = cir.unary(minus, %4) nsw : !s32i, !s32i loc(#loc92)
        %6 = cir.const #cir.int<1> : !s32i loc(#loc92)
        %7 = cir.binop(sub, %5, %6) nsw : !s32i loc(#loc92)
        cir.store %7, %0 : !s32i, !cir.ptr<!s32i> loc(#loc217)
      } loc(#loc216)
    } loc(#loc215)
    cir.scope {
      %2 = cir.const #cir.int<1> : !s32i loc(#loc96)
      %3 = cir.cast(int_to_bool, %2 : !s32i), !cir.bool loc(#loc96)
      cir.if %3 {
        cir.scope {
          %4 = cir.load %0 : !cir.ptr<!s32i>, !s32i loc(#loc100)
          %5 = cir.const #cir.int<0> : !s32i loc(#loc101)
          %6 = cir.cmp(lt, %4, %5) : !s32i, !cir.bool loc(#loc221)
          cir.if %6 {
            cir.scope {
              %7 = cir.load %0 : !cir.ptr<!s32i>, !s32i loc(#loc105)
              %8 = cir.const #cir.int<2147483647> : !s32i loc(#loc106)
              %9 = cir.unary(minus, %8) nsw : !s32i, !s32i loc(#loc106)
              %10 = cir.const #cir.int<1> : !s32i loc(#loc106)
              %11 = cir.binop(sub, %9, %10) nsw : !s32i loc(#loc106)
              %12 = cir.const #cir.int<2> : !s32i loc(#loc107)
              %13 = cir.binop(div, %11, %12) : !s32i loc(#loc224)
              %14 = cir.cmp(gt, %7, %13) : !s32i, !cir.bool loc(#loc225)
              cir.if %14 {
                %15 = cir.alloca !s32i, !cir.ptr<!s32i>, ["result", init] {alignment = 4 : i64} loc(#loc227)
                %16 = cir.load %0 : !cir.ptr<!s32i>, !s32i loc(#loc114)
                %17 = cir.const #cir.int<2> : !s32i loc(#loc113)
                %18 = cir.binop(mul, %16, %17) nsw : !s32i loc(#loc114)
                cir.store %18, %15 : !s32i, !cir.ptr<!s32i> loc(#loc227)
                %19 = cir.load %15 : !cir.ptr<!s32i>, !s32i loc(#loc115)
                cir.call @printIntLine(%19) : (!s32i) -> () loc(#loc116)
              } else {
                %15 = cir.get_global @".str.1" : !cir.ptr<!cir.array<!s8i x 51>> loc(#loc117)
                %16 = cir.cast(array_to_ptrdecay, %15 : !cir.ptr<!cir.array<!s8i x 51>>), !cir.ptr<!s8i> loc(#loc117)
                cir.call @printLine(%16) : (!cir.ptr<!s8i>) -> () loc(#loc118)
              } loc(#loc226)
            } loc(#loc223)
          } loc(#loc222)
        } loc(#loc220)
      } loc(#loc219)
    } loc(#loc218)
    cir.return loc(#loc83)
  } loc(#loc212)
  cir.func no_proto internal private @goodG2B1() extra(#fn_attr) {
    %0 = cir.alloca !s32i, !cir.ptr<!s32i>, ["data"] {alignment = 4 : i64} loc(#loc229)
    %1 = cir.const #cir.int<0> : !s32i loc(#loc123)
    cir.store %1, %0 : !s32i, !cir.ptr<!s32i> loc(#loc230)
    cir.scope {
      %2 = cir.const #cir.int<0> : !s32i loc(#loc127)
      %3 = cir.cast(int_to_bool, %2 : !s32i), !cir.bool loc(#loc127)
      cir.if %3 {
        %4 = cir.get_global @".str" : !cir.ptr<!cir.array<!s8i x 21>> loc(#loc131)
        %5 = cir.cast(array_to_ptrdecay, %4 : !cir.ptr<!cir.array<!s8i x 21>>), !cir.ptr<!s8i> loc(#loc131)
        cir.call @printLine(%5) : (!cir.ptr<!s8i>) -> () loc(#loc132)
      } else {
        %4 = cir.const #cir.int<2> : !s32i loc(#loc133)
        %5 = cir.unary(minus, %4) nsw : !s32i, !s32i loc(#loc134)
        cir.store %5, %0 : !s32i, !cir.ptr<!s32i> loc(#loc233)
      } loc(#loc232)
    } loc(#loc231)
    cir.scope {
      %2 = cir.const #cir.int<1> : !s32i loc(#loc138)
      %3 = cir.cast(int_to_bool, %2 : !s32i), !cir.bool loc(#loc138)
      cir.if %3 {
        cir.scope {
          %4 = cir.load %0 : !cir.ptr<!s32i>, !s32i loc(#loc142)
          %5 = cir.const #cir.int<0> : !s32i loc(#loc143)
          %6 = cir.cmp(lt, %4, %5) : !s32i, !cir.bool loc(#loc237)
          cir.if %6 {
            %7 = cir.alloca !s32i, !cir.ptr<!s32i>, ["result", init] {alignment = 4 : i64} loc(#loc239)
            %8 = cir.load %0 : !cir.ptr<!s32i>, !s32i loc(#loc147)
            %9 = cir.const #cir.int<2> : !s32i loc(#loc146)
            %10 = cir.binop(mul, %8, %9) nsw : !s32i loc(#loc147)
            cir.store %10, %7 : !s32i, !cir.ptr<!s32i> loc(#loc239)
            %11 = cir.load %7 : !cir.ptr<!s32i>, !s32i loc(#loc148)
            cir.call @printIntLine(%11) : (!s32i) -> () loc(#loc149)
          } loc(#loc238)
        } loc(#loc236)
      } loc(#loc235)
    } loc(#loc234)
    cir.return loc(#loc120)
  } loc(#loc228)
  cir.func no_proto internal private @goodG2B2() extra(#fn_attr) {
    %0 = cir.alloca !s32i, !cir.ptr<!s32i>, ["data"] {alignment = 4 : i64} loc(#loc241)
    %1 = cir.const #cir.int<0> : !s32i loc(#loc154)
    cir.store %1, %0 : !s32i, !cir.ptr<!s32i> loc(#loc242)
    cir.scope {
      %2 = cir.const #cir.int<1> : !s32i loc(#loc158)
      %3 = cir.cast(int_to_bool, %2 : !s32i), !cir.bool loc(#loc158)
      cir.if %3 {
        %4 = cir.const #cir.int<2> : !s32i loc(#loc160)
        %5 = cir.unary(minus, %4) nsw : !s32i, !s32i loc(#loc161)
        cir.store %5, %0 : !s32i, !cir.ptr<!s32i> loc(#loc245)
      } loc(#loc244)
    } loc(#loc243)
    cir.scope {
      %2 = cir.const #cir.int<1> : !s32i loc(#loc165)
      %3 = cir.cast(int_to_bool, %2 : !s32i), !cir.bool loc(#loc165)
      cir.if %3 {
        cir.scope {
          %4 = cir.load %0 : !cir.ptr<!s32i>, !s32i loc(#loc169)
          %5 = cir.const #cir.int<0> : !s32i loc(#loc170)
          %6 = cir.cmp(lt, %4, %5) : !s32i, !cir.bool loc(#loc249)
          cir.if %6 {
            %7 = cir.alloca !s32i, !cir.ptr<!s32i>, ["result", init] {alignment = 4 : i64} loc(#loc251)
            %8 = cir.load %0 : !cir.ptr<!s32i>, !s32i loc(#loc174)
            %9 = cir.const #cir.int<2> : !s32i loc(#loc173)
            %10 = cir.binop(mul, %8, %9) nsw : !s32i loc(#loc174)
            cir.store %10, %7 : !s32i, !cir.ptr<!s32i> loc(#loc251)
            %11 = cir.load %7 : !cir.ptr<!s32i>, !s32i loc(#loc175)
            cir.call @printIntLine(%11) : (!s32i) -> () loc(#loc176)
          } loc(#loc250)
        } loc(#loc248)
      } loc(#loc247)
    } loc(#loc246)
    cir.return loc(#loc151)
  } loc(#loc240)
} loc(#loc)
#loc = loc("/workspaces/juliet-c/testcases/CWE191_Integer_Underflow/s02/CWE191_Integer_Underflow__int_min_multiply_04.c":0:0)
#loc1 = loc("../../../testcasesupport/std_testcase_io.h":18:1)
#loc2 = loc("../../../testcasesupport/std_testcase_io.h":18:33)
#loc3 = loc("CWE191_Integer_Underflow__int_min_multiply_04.c":28:1)
#loc4 = loc("CWE191_Integer_Underflow__int_min_multiply_04.c":47:1)
#loc5 = loc("CWE191_Integer_Underflow__int_min_multiply_04.c":30:5)
#loc6 = loc("CWE191_Integer_Underflow__int_min_multiply_04.c":30:9)
#loc7 = loc("CWE191_Integer_Underflow__int_min_multiply_04.c":32:12)
#loc8 = loc("CWE191_Integer_Underflow__int_min_multiply_04.c":32:5)
#loc9 = loc("CWE191_Integer_Underflow__int_min_multiply_04.c":33:5)
#loc10 = loc("CWE191_Integer_Underflow__int_min_multiply_04.c":37:5)
#loc11 = loc("CWE191_Integer_Underflow__int_min_multiply_04.c":33:8)
#loc12 = loc("CWE191_Integer_Underflow__int_min_multiply_04.c":34:5)
#loc13 = loc("CWE191_Integer_Underflow__int_min_multiply_04.c":36:16)
#loc14 = loc("CWE191_Integer_Underflow__int_min_multiply_04.c":36:9)
#loc15 = loc("CWE191_Integer_Underflow__int_min_multiply_04.c":38:5)
#loc16 = loc("CWE191_Integer_Underflow__int_min_multiply_04.c":46:5)
#loc17 = loc("CWE191_Integer_Underflow__int_min_multiply_04.c":38:8)
#loc18 = loc("CWE191_Integer_Underflow__int_min_multiply_04.c":39:5)
#loc19 = loc("CWE191_Integer_Underflow__int_min_multiply_04.c":40:9)
#loc20 = loc("CWE191_Integer_Underflow__int_min_multiply_04.c":45:9)
#loc21 = loc("CWE191_Integer_Underflow__int_min_multiply_04.c":40:12)
#loc22 = loc("CWE191_Integer_Underflow__int_min_multiply_04.c":40:19)
#loc23 = loc("CWE191_Integer_Underflow__int_min_multiply_04.c":41:9)
#loc24 = loc("CWE191_Integer_Underflow__int_min_multiply_04.c":43:13)
#loc25 = loc("CWE191_Integer_Underflow__int_min_multiply_04.c":43:33)
#loc26 = loc("CWE191_Integer_Underflow__int_min_multiply_04.c":43:26)
#loc27 = loc("CWE191_Integer_Underflow__int_min_multiply_04.c":44:26)
#loc28 = loc("CWE191_Integer_Underflow__int_min_multiply_04.c":44:13)
#loc29 = loc("CWE191_Integer_Underflow__int_min_multiply_04.c":165:1)
#loc30 = loc("CWE191_Integer_Underflow__int_min_multiply_04.c":171:1)
#loc31 = loc("CWE191_Integer_Underflow__int_min_multiply_04.c":167:5)
#loc32 = loc("CWE191_Integer_Underflow__int_min_multiply_04.c":167:14)
#loc33 = loc("CWE191_Integer_Underflow__int_min_multiply_04.c":168:5)
#loc34 = loc("CWE191_Integer_Underflow__int_min_multiply_04.c":168:14)
#loc35 = loc("CWE191_Integer_Underflow__int_min_multiply_04.c":169:5)
#loc36 = loc("CWE191_Integer_Underflow__int_min_multiply_04.c":169:14)
#loc37 = loc("CWE191_Integer_Underflow__int_min_multiply_04.c":170:5)
#loc38 = loc("CWE191_Integer_Underflow__int_min_multiply_04.c":170:14)
#loc39 = loc("../../../testcasesupport/std_testcase_io.h":14:1)
#loc40 = loc("../../../testcasesupport/std_testcase_io.h":14:33)
#loc41 = loc("CWE191_Integer_Underflow__int_min_multiply_04.c":67:19)
#loc42 = loc("CWE191_Integer_Underflow__int_min_multiply_04.c":81:27)
#loc43 = loc("CWE191_Integer_Underflow__int_min_multiply_04.c":54:1)
#loc44 = loc("CWE191_Integer_Underflow__int_min_multiply_04.c":85:1)
#loc45 = loc("CWE191_Integer_Underflow__int_min_multiply_04.c":56:5)
#loc46 = loc("CWE191_Integer_Underflow__int_min_multiply_04.c":56:9)
#loc47 = loc("CWE191_Integer_Underflow__int_min_multiply_04.c":58:12)
#loc48 = loc("CWE191_Integer_Underflow__int_min_multiply_04.c":58:5)
#loc49 = loc("CWE191_Integer_Underflow__int_min_multiply_04.c":59:5)
#loc50 = loc("CWE191_Integer_Underflow__int_min_multiply_04.c":63:5)
#loc51 = loc("CWE191_Integer_Underflow__int_min_multiply_04.c":59:8)
#loc52 = loc("CWE191_Integer_Underflow__int_min_multiply_04.c":60:5)
#loc53 = loc("CWE191_Integer_Underflow__int_min_multiply_04.c":62:16)
#loc54 = loc("CWE191_Integer_Underflow__int_min_multiply_04.c":62:9)
#loc55 = loc("CWE191_Integer_Underflow__int_min_multiply_04.c":64:5)
#loc56 = loc("CWE191_Integer_Underflow__int_min_multiply_04.c":84:5)
#loc57 = loc("CWE191_Integer_Underflow__int_min_multiply_04.c":64:8)
#loc58 = loc("CWE191_Integer_Underflow__int_min_multiply_04.c":65:5)
#loc59 = loc("CWE191_Integer_Underflow__int_min_multiply_04.c":68:5)
#loc60 = loc("CWE191_Integer_Underflow__int_min_multiply_04.c":70:5)
#loc61 = loc("CWE191_Integer_Underflow__int_min_multiply_04.c":67:9)
#loc62 = loc("CWE191_Integer_Underflow__int_min_multiply_04.c":71:9)
#loc63 = loc("CWE191_Integer_Underflow__int_min_multiply_04.c":83:9)
#loc64 = loc("CWE191_Integer_Underflow__int_min_multiply_04.c":71:12)
#loc65 = loc("CWE191_Integer_Underflow__int_min_multiply_04.c":71:19)
#loc66 = loc("CWE191_Integer_Underflow__int_min_multiply_04.c":72:9)
#loc67 = loc("CWE191_Integer_Underflow__int_min_multiply_04.c":74:13)
#loc68 = loc("CWE191_Integer_Underflow__int_min_multiply_04.c":82:13)
#loc69 = loc("CWE191_Integer_Underflow__int_min_multiply_04.c":74:17)
#loc70 = loc("CWE191_Integer_Underflow__int_min_multiply_04.c":74:25)
#loc71 = loc("CWE191_Integer_Underflow__int_min_multiply_04.c":74:33)
#loc72 = loc("CWE191_Integer_Underflow__int_min_multiply_04.c":74:34)
#loc73 = loc("CWE191_Integer_Underflow__int_min_multiply_04.c":75:13)
#loc74 = loc("CWE191_Integer_Underflow__int_min_multiply_04.c":78:13)
#loc75 = loc("CWE191_Integer_Underflow__int_min_multiply_04.c":80:13)
#loc76 = loc("CWE191_Integer_Underflow__int_min_multiply_04.c":76:17)
#loc77 = loc("CWE191_Integer_Underflow__int_min_multiply_04.c":76:37)
#loc78 = loc("CWE191_Integer_Underflow__int_min_multiply_04.c":76:30)
#loc79 = loc("CWE191_Integer_Underflow__int_min_multiply_04.c":77:30)
#loc80 = loc("CWE191_Integer_Underflow__int_min_multiply_04.c":77:17)
#loc81 = loc("CWE191_Integer_Underflow__int_min_multiply_04.c":81:17)
#loc82 = loc("CWE191_Integer_Underflow__int_min_multiply_04.c":88:1)
#loc83 = loc("CWE191_Integer_Underflow__int_min_multiply_04.c":114:1)
#loc84 = loc("CWE191_Integer_Underflow__int_min_multiply_04.c":90:5)
#loc85 = loc("CWE191_Integer_Underflow__int_min_multiply_04.c":90:9)
#loc86 = loc("CWE191_Integer_Underflow__int_min_multiply_04.c":92:12)
#loc87 = loc("CWE191_Integer_Underflow__int_min_multiply_04.c":92:5)
#loc88 = loc("CWE191_Integer_Underflow__int_min_multiply_04.c":93:5)
#loc89 = loc("CWE191_Integer_Underflow__int_min_multiply_04.c":97:5)
#loc90 = loc("CWE191_Integer_Underflow__int_min_multiply_04.c":93:8)
#loc91 = loc("CWE191_Integer_Underflow__int_min_multiply_04.c":94:5)
#loc92 = loc("CWE191_Integer_Underflow__int_min_multiply_04.c":96:16)
#loc93 = loc("CWE191_Integer_Underflow__int_min_multiply_04.c":96:9)
#loc94 = loc("CWE191_Integer_Underflow__int_min_multiply_04.c":98:5)
#loc95 = loc("CWE191_Integer_Underflow__int_min_multiply_04.c":113:5)
#loc96 = loc("CWE191_Integer_Underflow__int_min_multiply_04.c":98:8)
#loc97 = loc("CWE191_Integer_Underflow__int_min_multiply_04.c":99:5)
#loc98 = loc("CWE191_Integer_Underflow__int_min_multiply_04.c":100:9)
#loc99 = loc("CWE191_Integer_Underflow__int_min_multiply_04.c":112:9)
#loc100 = loc("CWE191_Integer_Underflow__int_min_multiply_04.c":100:12)
#loc101 = loc("CWE191_Integer_Underflow__int_min_multiply_04.c":100:19)
#loc102 = loc("CWE191_Integer_Underflow__int_min_multiply_04.c":101:9)
#loc103 = loc("CWE191_Integer_Underflow__int_min_multiply_04.c":103:13)
#loc104 = loc("CWE191_Integer_Underflow__int_min_multiply_04.c":111:13)
#loc105 = loc("CWE191_Integer_Underflow__int_min_multiply_04.c":103:17)
#loc106 = loc("CWE191_Integer_Underflow__int_min_multiply_04.c":103:25)
#loc107 = loc("CWE191_Integer_Underflow__int_min_multiply_04.c":103:33)
#loc108 = loc("CWE191_Integer_Underflow__int_min_multiply_04.c":103:34)
#loc109 = loc("CWE191_Integer_Underflow__int_min_multiply_04.c":104:13)
#loc110 = loc("CWE191_Integer_Underflow__int_min_multiply_04.c":107:13)
#loc111 = loc("CWE191_Integer_Underflow__int_min_multiply_04.c":109:13)
#loc112 = loc("CWE191_Integer_Underflow__int_min_multiply_04.c":105:17)
#loc113 = loc("CWE191_Integer_Underflow__int_min_multiply_04.c":105:37)
#loc114 = loc("CWE191_Integer_Underflow__int_min_multiply_04.c":105:30)
#loc115 = loc("CWE191_Integer_Underflow__int_min_multiply_04.c":106:30)
#loc116 = loc("CWE191_Integer_Underflow__int_min_multiply_04.c":106:17)
#loc117 = loc("CWE191_Integer_Underflow__int_min_multiply_04.c":110:27)
#loc118 = loc("CWE191_Integer_Underflow__int_min_multiply_04.c":110:17)
#loc119 = loc("CWE191_Integer_Underflow__int_min_multiply_04.c":117:1)
#loc120 = loc("CWE191_Integer_Underflow__int_min_multiply_04.c":141:1)
#loc121 = loc("CWE191_Integer_Underflow__int_min_multiply_04.c":119:5)
#loc122 = loc("CWE191_Integer_Underflow__int_min_multiply_04.c":119:9)
#loc123 = loc("CWE191_Integer_Underflow__int_min_multiply_04.c":121:12)
#loc124 = loc("CWE191_Integer_Underflow__int_min_multiply_04.c":121:5)
#loc125 = loc("CWE191_Integer_Underflow__int_min_multiply_04.c":122:5)
#loc126 = loc("CWE191_Integer_Underflow__int_min_multiply_04.c":131:5)
#loc127 = loc("CWE191_Integer_Underflow__int_min_multiply_04.c":122:8)
#loc128 = loc("CWE191_Integer_Underflow__int_min_multiply_04.c":123:5)
#loc129 = loc("CWE191_Integer_Underflow__int_min_multiply_04.c":126:5)
#loc130 = loc("CWE191_Integer_Underflow__int_min_multiply_04.c":128:5)
#loc131 = loc("CWE191_Integer_Underflow__int_min_multiply_04.c":125:19)
#loc132 = loc("CWE191_Integer_Underflow__int_min_multiply_04.c":125:9)
#loc133 = loc("CWE191_Integer_Underflow__int_min_multiply_04.c":130:17)
#loc134 = loc("CWE191_Integer_Underflow__int_min_multiply_04.c":130:16)
#loc135 = loc("CWE191_Integer_Underflow__int_min_multiply_04.c":130:9)
#loc136 = loc("CWE191_Integer_Underflow__int_min_multiply_04.c":132:5)
#loc137 = loc("CWE191_Integer_Underflow__int_min_multiply_04.c":140:5)
#loc138 = loc("CWE191_Integer_Underflow__int_min_multiply_04.c":132:8)
#loc139 = loc("CWE191_Integer_Underflow__int_min_multiply_04.c":133:5)
#loc140 = loc("CWE191_Integer_Underflow__int_min_multiply_04.c":134:9)
#loc141 = loc("CWE191_Integer_Underflow__int_min_multiply_04.c":139:9)
#loc142 = loc("CWE191_Integer_Underflow__int_min_multiply_04.c":134:12)
#loc143 = loc("CWE191_Integer_Underflow__int_min_multiply_04.c":134:19)
#loc144 = loc("CWE191_Integer_Underflow__int_min_multiply_04.c":135:9)
#loc145 = loc("CWE191_Integer_Underflow__int_min_multiply_04.c":137:13)
#loc146 = loc("CWE191_Integer_Underflow__int_min_multiply_04.c":137:33)
#loc147 = loc("CWE191_Integer_Underflow__int_min_multiply_04.c":137:26)
#loc148 = loc("CWE191_Integer_Underflow__int_min_multiply_04.c":138:26)
#loc149 = loc("CWE191_Integer_Underflow__int_min_multiply_04.c":138:13)
#loc150 = loc("CWE191_Integer_Underflow__int_min_multiply_04.c":144:1)
#loc151 = loc("CWE191_Integer_Underflow__int_min_multiply_04.c":163:1)
#loc152 = loc("CWE191_Integer_Underflow__int_min_multiply_04.c":146:5)
#loc153 = loc("CWE191_Integer_Underflow__int_min_multiply_04.c":146:9)
#loc154 = loc("CWE191_Integer_Underflow__int_min_multiply_04.c":148:12)
#loc155 = loc("CWE191_Integer_Underflow__int_min_multiply_04.c":148:5)
#loc156 = loc("CWE191_Integer_Underflow__int_min_multiply_04.c":149:5)
#loc157 = loc("CWE191_Integer_Underflow__int_min_multiply_04.c":153:5)
#loc158 = loc("CWE191_Integer_Underflow__int_min_multiply_04.c":149:8)
#loc159 = loc("CWE191_Integer_Underflow__int_min_multiply_04.c":150:5)
#loc160 = loc("CWE191_Integer_Underflow__int_min_multiply_04.c":152:17)
#loc161 = loc("CWE191_Integer_Underflow__int_min_multiply_04.c":152:16)
#loc162 = loc("CWE191_Integer_Underflow__int_min_multiply_04.c":152:9)
#loc163 = loc("CWE191_Integer_Underflow__int_min_multiply_04.c":154:5)
#loc164 = loc("CWE191_Integer_Underflow__int_min_multiply_04.c":162:5)
#loc165 = loc("CWE191_Integer_Underflow__int_min_multiply_04.c":154:8)
#loc166 = loc("CWE191_Integer_Underflow__int_min_multiply_04.c":155:5)
#loc167 = loc("CWE191_Integer_Underflow__int_min_multiply_04.c":156:9)
#loc168 = loc("CWE191_Integer_Underflow__int_min_multiply_04.c":161:9)
#loc169 = loc("CWE191_Integer_Underflow__int_min_multiply_04.c":156:12)
#loc170 = loc("CWE191_Integer_Underflow__int_min_multiply_04.c":156:19)
#loc171 = loc("CWE191_Integer_Underflow__int_min_multiply_04.c":157:9)
#loc172 = loc("CWE191_Integer_Underflow__int_min_multiply_04.c":159:13)
#loc173 = loc("CWE191_Integer_Underflow__int_min_multiply_04.c":159:33)
#loc174 = loc("CWE191_Integer_Underflow__int_min_multiply_04.c":159:26)
#loc175 = loc("CWE191_Integer_Underflow__int_min_multiply_04.c":160:26)
#loc176 = loc("CWE191_Integer_Underflow__int_min_multiply_04.c":160:13)
#loc177 = loc(fused[#loc1, #loc2])
#loc178 = loc(fused[#loc3, #loc4])
#loc179 = loc(fused[#loc5, #loc6])
#loc180 = loc(fused[#loc8, #loc7])
#loc181 = loc(fused[#loc9, #loc10])
#loc182 = loc(fused[#loc12, #loc10])
#loc183 = loc(fused[#loc14, #loc13])
#loc184 = loc(fused[#loc15, #loc16])
#loc185 = loc(fused[#loc18, #loc16])
#loc186 = loc(fused[#loc19, #loc20])
#loc187 = loc(fused[#loc21, #loc22])
#loc188 = loc(fused[#loc23, #loc20])
#loc189 = loc(fused[#loc24, #loc25])
#loc190 = loc(fused[#loc29, #loc30])
#loc191 = loc(fused[#loc31, #loc32])
#loc192 = loc(fused[#loc33, #loc34])
#loc193 = loc(fused[#loc35, #loc36])
#loc194 = loc(fused[#loc37, #loc38])
#loc195 = loc(fused[#loc39, #loc40])
#loc196 = loc(fused[#loc43, #loc44])
#loc197 = loc(fused[#loc45, #loc46])
#loc198 = loc(fused[#loc48, #loc47])
#loc199 = loc(fused[#loc49, #loc50])
#loc200 = loc(fused[#loc52, #loc50])
#loc201 = loc(fused[#loc54, #loc53])
#loc202 = loc(fused[#loc55, #loc56])
#loc203 = loc(fused[#loc58, #loc59, #loc60, #loc56])
#loc204 = loc(fused[#loc62, #loc63])
#loc205 = loc(fused[#loc64, #loc65])
#loc206 = loc(fused[#loc66, #loc63])
#loc207 = loc(fused[#loc67, #loc68])
#loc208 = loc(fused[#loc70, #loc71])
#loc209 = loc(fused[#loc69, #loc72])
#loc210 = loc(fused[#loc73, #loc74, #loc75, #loc68])
#loc211 = loc(fused[#loc76, #loc77])
#loc212 = loc(fused[#loc82, #loc83])
#loc213 = loc(fused[#loc84, #loc85])
#loc214 = loc(fused[#loc87, #loc86])
#loc215 = loc(fused[#loc88, #loc89])
#loc216 = loc(fused[#loc91, #loc89])
#loc217 = loc(fused[#loc93, #loc92])
#loc218 = loc(fused[#loc94, #loc95])
#loc219 = loc(fused[#loc97, #loc95])
#loc220 = loc(fused[#loc98, #loc99])
#loc221 = loc(fused[#loc100, #loc101])
#loc222 = loc(fused[#loc102, #loc99])
#loc223 = loc(fused[#loc103, #loc104])
#loc224 = loc(fused[#loc106, #loc107])
#loc225 = loc(fused[#loc105, #loc108])
#loc226 = loc(fused[#loc109, #loc110, #loc111, #loc104])
#loc227 = loc(fused[#loc112, #loc113])
#loc228 = loc(fused[#loc119, #loc120])
#loc229 = loc(fused[#loc121, #loc122])
#loc230 = loc(fused[#loc124, #loc123])
#loc231 = loc(fused[#loc125, #loc126])
#loc232 = loc(fused[#loc128, #loc129, #loc130, #loc126])
#loc233 = loc(fused[#loc135, #loc133])
#loc234 = loc(fused[#loc136, #loc137])
#loc235 = loc(fused[#loc139, #loc137])
#loc236 = loc(fused[#loc140, #loc141])
#loc237 = loc(fused[#loc142, #loc143])
#loc238 = loc(fused[#loc144, #loc141])
#loc239 = loc(fused[#loc145, #loc146])
#loc240 = loc(fused[#loc150, #loc151])
#loc241 = loc(fused[#loc152, #loc153])
#loc242 = loc(fused[#loc155, #loc154])
#loc243 = loc(fused[#loc156, #loc157])
#loc244 = loc(fused[#loc159, #loc157])
#loc245 = loc(fused[#loc162, #loc160])
#loc246 = loc(fused[#loc163, #loc164])
#loc247 = loc(fused[#loc166, #loc164])
#loc248 = loc(fused[#loc167, #loc168])
#loc249 = loc(fused[#loc169, #loc170])
#loc250 = loc(fused[#loc171, #loc168])
#loc251 = loc(fused[#loc172, #loc173])
