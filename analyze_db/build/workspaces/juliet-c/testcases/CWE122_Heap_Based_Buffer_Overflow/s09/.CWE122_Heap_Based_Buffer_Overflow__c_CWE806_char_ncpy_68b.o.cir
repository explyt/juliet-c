!s32i = !cir.int<s, 32>
!s8i = !cir.int<s, 8>
!u64i = !cir.int<u, 64>
!void = !cir.void
#fn_attr = #cir<extra({nothrow = #cir.nothrow})>
#fn_attr1 = #cir<extra({inline = #cir.inline<no>, nothrow = #cir.nothrow, optnone = #cir.optnone, uwtable = #cir.uwtable<async>})>
module @"/workspaces/juliet-c/testcases/CWE122_Heap_Based_Buffer_Overflow/s09/CWE122_Heap_Based_Buffer_Overflow__c_CWE806_char_ncpy_68b.c" attributes {cir.lang = #cir.lang<c>, cir.sob = #cir.signed_overflow_behavior<undefined>, cir.triple = "x86_64-unknown-linux-gnu", cir.type_size_info = #cir.type_size_info<char = 8, int = 32, size_t = 64>, cir.uwtable = #cir.uwtable<async>, dlti.dl_spec = #dlti.dl_spec<i1 = dense<8> : vector<2xi64>, !llvm.ptr = dense<64> : vector<4xi64>, f80 = dense<128> : vector<2xi64>, i32 = dense<32> : vector<2xi64>, i16 = dense<16> : vector<2xi64>, !llvm.ptr<270> = dense<32> : vector<4xi64>, i8 = dense<8> : vector<2xi64>, !llvm.ptr<271> = dense<32> : vector<4xi64>, !llvm.ptr<272> = dense<64> : vector<4xi64>, f128 = dense<128> : vector<2xi64>, f64 = dense<64> : vector<2xi64>, f16 = dense<16> : vector<2xi64>, i128 = dense<128> : vector<2xi64>, i64 = dense<64> : vector<2xi64>, "dlti.stack_alignment" = 128 : i64, "dlti.mangling_mode" = "e", "dlti.endianness" = "little">} {
  cir.global "private" external @CWE122_Heap_Based_Buffer_Overflow__c_CWE806_char_ncpy_68_badData : !cir.ptr<!s8i> {alignment = 8 : i64} loc(#loc55)
  cir.func private @strncpy(!cir.ptr<!s8i>, !cir.ptr<!s8i>, !u64i) -> !cir.ptr<!s8i> extra(#fn_attr) loc(#loc56)
  cir.func private @strlen(!cir.ptr<!s8i>) -> !u64i extra(#fn_attr) loc(#loc57)
  cir.func private @printLine(!cir.ptr<!s8i>) loc(#loc58)
  cir.func private @free(!cir.ptr<!void>) extra(#fn_attr) loc(#loc59)
  cir.func no_proto @CWE122_Heap_Based_Buffer_Overflow__c_CWE806_char_ncpy_68b_badSink() extra(#fn_attr1) {
    %0 = cir.alloca !cir.ptr<!s8i>, !cir.ptr<!cir.ptr<!s8i>>, ["data", init] {alignment = 8 : i64} loc(#loc61)
    %1 = cir.get_global @CWE122_Heap_Based_Buffer_Overflow__c_CWE806_char_ncpy_68_badData : !cir.ptr<!cir.ptr<!s8i>> loc(#loc55)
    %2 = cir.load %1 : !cir.ptr<!cir.ptr<!s8i>>, !cir.ptr<!s8i> loc(#loc14)
    cir.store %2, %0 : !cir.ptr<!s8i>, !cir.ptr<!cir.ptr<!s8i>> loc(#loc61)
    cir.scope {
      %3 = cir.alloca !cir.array<!s8i x 50>, !cir.ptr<!cir.array<!s8i x 50>>, ["dest"] {alignment = 16 : i64} loc(#loc63)
      %4 = cir.const #cir.zero : !cir.array<!s8i x 50> loc(#loc63)
      cir.store %4, %3 : !cir.array<!s8i x 50>, !cir.ptr<!cir.array<!s8i x 50>> loc(#loc63)
      %5 = cir.get_global @strncpy : !cir.ptr<!cir.func<(!cir.ptr<!s8i>, !cir.ptr<!s8i>, !u64i) -> !cir.ptr<!s8i>>> loc(#loc19)
      %6 = cir.cast(array_to_ptrdecay, %3 : !cir.ptr<!cir.array<!s8i x 50>>), !cir.ptr<!s8i> loc(#loc20)
      %7 = cir.load %0 : !cir.ptr<!cir.ptr<!s8i>>, !cir.ptr<!s8i> loc(#loc21)
      %8 = cir.get_global @strlen : !cir.ptr<!cir.func<(!cir.ptr<!s8i>) -> !u64i>> loc(#loc22)
      %9 = cir.load %0 : !cir.ptr<!cir.ptr<!s8i>>, !cir.ptr<!s8i> loc(#loc23)
      %10 = cir.call @strlen(%9) : (!cir.ptr<!s8i>) -> !u64i side_effect(pure) extra(#fn_attr) loc(#loc22)
      %11 = cir.call @strncpy(%6, %7, %10) : (!cir.ptr<!s8i>, !cir.ptr<!s8i>, !u64i) -> !cir.ptr<!s8i> extra(#fn_attr) loc(#loc19)
      %12 = cir.const #cir.int<0> : !s32i loc(#loc24)
      %13 = cir.cast(integral, %12 : !s32i), !s8i loc(#loc24)
      %14 = cir.const #cir.int<50> : !s32i loc(#loc25)
      %15 = cir.const #cir.int<1> : !s32i loc(#loc26)
      %16 = cir.binop(sub, %14, %15) nsw : !s32i loc(#loc25)
      %17 = cir.cast(array_to_ptrdecay, %3 : !cir.ptr<!cir.array<!s8i x 50>>), !cir.ptr<!s8i> loc(#loc27)
      %18 = cir.ptr_stride(%17 : !cir.ptr<!s8i>, %16 : !s32i), !cir.ptr<!s8i> loc(#loc27)
      cir.store %13, %18 : !s8i, !cir.ptr<!s8i> loc(#loc64)
      %19 = cir.load %0 : !cir.ptr<!cir.ptr<!s8i>>, !cir.ptr<!s8i> loc(#loc28)
      cir.call @printLine(%19) : (!cir.ptr<!s8i>) -> () loc(#loc29)
      %20 = cir.get_global @free : !cir.ptr<!cir.func<(!cir.ptr<!void>)>> loc(#loc30)
      %21 = cir.load %0 : !cir.ptr<!cir.ptr<!s8i>>, !cir.ptr<!s8i> loc(#loc31)
      %22 = cir.cast(bitcast, %21 : !cir.ptr<!s8i>), !cir.ptr<!void> loc(#loc31)
      cir.call @free(%22) : (!cir.ptr<!void>) -> () extra(#fn_attr) loc(#loc30)
    } loc(#loc62)
    cir.return loc(#loc12)
  } loc(#loc60)
  cir.global "private" external @CWE122_Heap_Based_Buffer_Overflow__c_CWE806_char_ncpy_68_goodG2BData : !cir.ptr<!s8i> {alignment = 8 : i64} loc(#loc65)
  cir.func no_proto @CWE122_Heap_Based_Buffer_Overflow__c_CWE806_char_ncpy_68b_goodG2BSink() extra(#fn_attr1) {
    %0 = cir.alloca !cir.ptr<!s8i>, !cir.ptr<!cir.ptr<!s8i>>, ["data", init] {alignment = 8 : i64} loc(#loc67)
    %1 = cir.get_global @CWE122_Heap_Based_Buffer_Overflow__c_CWE806_char_ncpy_68_goodG2BData : !cir.ptr<!cir.ptr<!s8i>> loc(#loc65)
    %2 = cir.load %1 : !cir.ptr<!cir.ptr<!s8i>>, !cir.ptr<!s8i> loc(#loc37)
    cir.store %2, %0 : !cir.ptr<!s8i>, !cir.ptr<!cir.ptr<!s8i>> loc(#loc67)
    cir.scope {
      %3 = cir.alloca !cir.array<!s8i x 50>, !cir.ptr<!cir.array<!s8i x 50>>, ["dest"] {alignment = 16 : i64} loc(#loc69)
      %4 = cir.const #cir.zero : !cir.array<!s8i x 50> loc(#loc69)
      cir.store %4, %3 : !cir.array<!s8i x 50>, !cir.ptr<!cir.array<!s8i x 50>> loc(#loc69)
      %5 = cir.get_global @strncpy : !cir.ptr<!cir.func<(!cir.ptr<!s8i>, !cir.ptr<!s8i>, !u64i) -> !cir.ptr<!s8i>>> loc(#loc42)
      %6 = cir.cast(array_to_ptrdecay, %3 : !cir.ptr<!cir.array<!s8i x 50>>), !cir.ptr<!s8i> loc(#loc43)
      %7 = cir.load %0 : !cir.ptr<!cir.ptr<!s8i>>, !cir.ptr<!s8i> loc(#loc44)
      %8 = cir.get_global @strlen : !cir.ptr<!cir.func<(!cir.ptr<!s8i>) -> !u64i>> loc(#loc45)
      %9 = cir.load %0 : !cir.ptr<!cir.ptr<!s8i>>, !cir.ptr<!s8i> loc(#loc46)
      %10 = cir.call @strlen(%9) : (!cir.ptr<!s8i>) -> !u64i side_effect(pure) extra(#fn_attr) loc(#loc45)
      %11 = cir.call @strncpy(%6, %7, %10) : (!cir.ptr<!s8i>, !cir.ptr<!s8i>, !u64i) -> !cir.ptr<!s8i> extra(#fn_attr) loc(#loc42)
      %12 = cir.const #cir.int<0> : !s32i loc(#loc47)
      %13 = cir.cast(integral, %12 : !s32i), !s8i loc(#loc47)
      %14 = cir.const #cir.int<50> : !s32i loc(#loc48)
      %15 = cir.const #cir.int<1> : !s32i loc(#loc49)
      %16 = cir.binop(sub, %14, %15) nsw : !s32i loc(#loc48)
      %17 = cir.cast(array_to_ptrdecay, %3 : !cir.ptr<!cir.array<!s8i x 50>>), !cir.ptr<!s8i> loc(#loc50)
      %18 = cir.ptr_stride(%17 : !cir.ptr<!s8i>, %16 : !s32i), !cir.ptr<!s8i> loc(#loc50)
      cir.store %13, %18 : !s8i, !cir.ptr<!s8i> loc(#loc70)
      %19 = cir.load %0 : !cir.ptr<!cir.ptr<!s8i>>, !cir.ptr<!s8i> loc(#loc51)
      cir.call @printLine(%19) : (!cir.ptr<!s8i>) -> () loc(#loc52)
      %20 = cir.get_global @free : !cir.ptr<!cir.func<(!cir.ptr<!void>)>> loc(#loc53)
      %21 = cir.load %0 : !cir.ptr<!cir.ptr<!s8i>>, !cir.ptr<!s8i> loc(#loc54)
      %22 = cir.cast(bitcast, %21 : !cir.ptr<!s8i>), !cir.ptr<!void> loc(#loc54)
      cir.call @free(%22) : (!cir.ptr<!void>) -> () extra(#fn_attr) loc(#loc53)
    } loc(#loc68)
    cir.return loc(#loc35)
  } loc(#loc66)
} loc(#loc)
#loc = loc("/workspaces/juliet-c/testcases/CWE122_Heap_Based_Buffer_Overflow/s09/CWE122_Heap_Based_Buffer_Overflow__c_CWE806_char_ncpy_68b.c":0:0)
#loc1 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE806_char_ncpy_68b.c":21:1)
#loc2 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE806_char_ncpy_68b.c":21:15)
#loc3 = loc("/usr/include/string.h":144:1)
#loc4 = loc("/usr/include/string.h":146:14)
#loc5 = loc("/usr/include/string.h":407:1)
#loc6 = loc("/usr/include/string.h":408:33)
#loc7 = loc("../../../testcasesupport/std_testcase_io.h":14:1)
#loc8 = loc("../../../testcasesupport/std_testcase_io.h":14:33)
#loc9 = loc("/usr/include/stdlib.h":687:1)
#loc10 = loc("/usr/include/stdlib.h":687:32)
#loc11 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE806_char_ncpy_68b.c":28:1)
#loc12 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE806_char_ncpy_68b.c":39:1)
#loc13 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE806_char_ncpy_68b.c":30:5)
#loc14 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE806_char_ncpy_68b.c":30:19)
#loc15 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE806_char_ncpy_68b.c":31:5)
#loc16 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE806_char_ncpy_68b.c":38:5)
#loc17 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE806_char_ncpy_68b.c":32:9)
#loc18 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE806_char_ncpy_68b.c":32:25)
#loc19 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE806_char_ncpy_68b.c":34:9)
#loc20 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE806_char_ncpy_68b.c":34:17)
#loc21 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE806_char_ncpy_68b.c":34:23)
#loc22 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE806_char_ncpy_68b.c":34:29)
#loc23 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE806_char_ncpy_68b.c":34:36)
#loc24 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE806_char_ncpy_68b.c":35:22)
#loc25 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE806_char_ncpy_68b.c":35:14)
#loc26 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE806_char_ncpy_68b.c":35:17)
#loc27 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE806_char_ncpy_68b.c":35:9)
#loc28 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE806_char_ncpy_68b.c":36:19)
#loc29 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE806_char_ncpy_68b.c":36:9)
#loc30 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE806_char_ncpy_68b.c":37:9)
#loc31 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE806_char_ncpy_68b.c":37:14)
#loc32 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE806_char_ncpy_68b.c":22:1)
#loc33 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE806_char_ncpy_68b.c":22:15)
#loc34 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE806_char_ncpy_68b.c":46:1)
#loc35 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE806_char_ncpy_68b.c":57:1)
#loc36 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE806_char_ncpy_68b.c":48:5)
#loc37 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE806_char_ncpy_68b.c":48:19)
#loc38 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE806_char_ncpy_68b.c":49:5)
#loc39 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE806_char_ncpy_68b.c":56:5)
#loc40 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE806_char_ncpy_68b.c":50:9)
#loc41 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE806_char_ncpy_68b.c":50:25)
#loc42 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE806_char_ncpy_68b.c":52:9)
#loc43 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE806_char_ncpy_68b.c":52:17)
#loc44 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE806_char_ncpy_68b.c":52:23)
#loc45 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE806_char_ncpy_68b.c":52:29)
#loc46 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE806_char_ncpy_68b.c":52:36)
#loc47 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE806_char_ncpy_68b.c":53:22)
#loc48 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE806_char_ncpy_68b.c":53:14)
#loc49 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE806_char_ncpy_68b.c":53:17)
#loc50 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE806_char_ncpy_68b.c":53:9)
#loc51 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE806_char_ncpy_68b.c":54:19)
#loc52 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE806_char_ncpy_68b.c":54:9)
#loc53 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE806_char_ncpy_68b.c":55:9)
#loc54 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE806_char_ncpy_68b.c":55:14)
#loc55 = loc(fused[#loc1, #loc2])
#loc56 = loc(fused[#loc3, #loc4])
#loc57 = loc(fused[#loc5, #loc6])
#loc58 = loc(fused[#loc7, #loc8])
#loc59 = loc(fused[#loc9, #loc10])
#loc60 = loc(fused[#loc11, #loc12])
#loc61 = loc(fused[#loc13, #loc14])
#loc62 = loc(fused[#loc15, #loc16])
#loc63 = loc(fused[#loc17, #loc18])
#loc64 = loc(fused[#loc27, #loc24])
#loc65 = loc(fused[#loc32, #loc33])
#loc66 = loc(fused[#loc34, #loc35])
#loc67 = loc(fused[#loc36, #loc37])
#loc68 = loc(fused[#loc38, #loc39])
#loc69 = loc(fused[#loc40, #loc41])
#loc70 = loc(fused[#loc50, #loc47])
