!s32i = !cir.int<s, 32>
!s64i = !cir.int<s, 64>
!s8i = !cir.int<s, 8>
!u32i = !cir.int<u, 32>
#fn_attr = #cir<extra({inline = #cir.inline<no>, nothrow = #cir.nothrow, optnone = #cir.optnone, uwtable = #cir.uwtable<async>})>
#fn_attr1 = #cir<extra({nothrow = #cir.nothrow})>
module @"/workspaces/juliet-c/testcases/CWE190_Integer_Overflow/s05/CWE190_Integer_Overflow__unsigned_int_max_square_15.c" attributes {cir.lang = #cir.lang<c>, cir.sob = #cir.signed_overflow_behavior<undefined>, cir.triple = "x86_64-unknown-linux-gnu", cir.type_size_info = #cir.type_size_info<char = 8, int = 32, size_t = 64>, cir.uwtable = #cir.uwtable<async>, dlti.dl_spec = #dlti.dl_spec<f80 = dense<128> : vector<2xi64>, i128 = dense<128> : vector<2xi64>, i8 = dense<8> : vector<2xi64>, i16 = dense<16> : vector<2xi64>, !llvm.ptr = dense<64> : vector<4xi64>, i1 = dense<8> : vector<2xi64>, f64 = dense<64> : vector<2xi64>, f16 = dense<16> : vector<2xi64>, !llvm.ptr<270> = dense<32> : vector<4xi64>, f128 = dense<128> : vector<2xi64>, i32 = dense<32> : vector<2xi64>, i64 = dense<64> : vector<2xi64>, !llvm.ptr<271> = dense<32> : vector<4xi64>, !llvm.ptr<272> = dense<64> : vector<4xi64>, "dlti.stack_alignment" = 128 : i64, "dlti.endianness" = "little", "dlti.mangling_mode" = "e">} {
  cir.func private @printLine(!cir.ptr<!s8i>) loc(#loc201)
  cir.global "private" constant cir_private dsolocal @".str" = #cir.const_array<"Benign, fixed string\00" : !cir.array<!s8i x 21>> : !cir.array<!s8i x 21> {alignment = 1 : i64} loc(#loc3)
  cir.func private @printUnsignedLine(!u32i) loc(#loc202)
  cir.func no_proto @CWE190_Integer_Overflow__unsigned_int_max_square_15_bad() extra(#fn_attr) {
    %0 = cir.alloca !u32i, !cir.ptr<!u32i>, ["data"] {alignment = 4 : i64} loc(#loc204)
    %1 = cir.const #cir.int<0> : !s32i loc(#loc10)
    %2 = cir.cast(integral, %1 : !s32i), !u32i loc(#loc10)
    cir.store %2, %0 : !u32i, !cir.ptr<!u32i> loc(#loc205)
    cir.scope {
      %3 = cir.const #cir.int<6> : !s32i loc(#loc14)
      cir.switch (%3 : !s32i) {
        cir.case(equal, [#cir.int<6> : !s32i]) {
          %4 = cir.const #cir.int<2147483647> : !s32i loc(#loc16)
          %5 = cir.cast(integral, %4 : !s32i), !u32i loc(#loc16)
          %6 = cir.const #cir.int<2> : !u32i loc(#loc16)
          %7 = cir.binop(mul, %5, %6) : !u32i loc(#loc16)
          %8 = cir.const #cir.int<1> : !u32i loc(#loc16)
          %9 = cir.binop(add, %7, %8) : !u32i loc(#loc16)
          cir.store %9, %0 : !u32i, !cir.ptr<!u32i> loc(#loc207)
          cir.break loc(#loc18)
        } loc(#loc15)
        cir.case(default, []) {
          %4 = cir.get_global @".str" : !cir.ptr<!cir.array<!s8i x 21>> loc(#loc3)
          %5 = cir.cast(array_to_ptrdecay, %4 : !cir.ptr<!cir.array<!s8i x 21>>), !cir.ptr<!s8i> loc(#loc3)
          cir.call @printLine(%5) : (!cir.ptr<!s8i>) -> () loc(#loc20)
          cir.break loc(#loc21)
        } loc(#loc19)
        cir.yield loc(#loc12)
      } loc(#loc12)
    } loc(#loc206)
    cir.scope {
      %3 = cir.const #cir.int<7> : !s32i loc(#loc24)
      cir.switch (%3 : !s32i) {
        cir.case(equal, [#cir.int<7> : !s32i]) {
          cir.scope {
            %4 = cir.alloca !u32i, !cir.ptr<!u32i>, ["result", init] {alignment = 4 : i64} loc(#loc210)
            %5 = cir.load %0 : !cir.ptr<!u32i>, !u32i loc(#loc30)
            %6 = cir.load %0 : !cir.ptr<!u32i>, !u32i loc(#loc29)
            %7 = cir.binop(mul, %5, %6) : !u32i loc(#loc211)
            cir.store %7, %4 : !u32i, !cir.ptr<!u32i> loc(#loc210)
            %8 = cir.load %4 : !cir.ptr<!u32i>, !u32i loc(#loc31)
            cir.call @printUnsignedLine(%8) : (!u32i) -> () loc(#loc32)
          } loc(#loc209)
          cir.break loc(#loc33)
        } loc(#loc25)
        cir.case(default, []) {
          %4 = cir.get_global @".str" : !cir.ptr<!cir.array<!s8i x 21>> loc(#loc35)
          %5 = cir.cast(array_to_ptrdecay, %4 : !cir.ptr<!cir.array<!s8i x 21>>), !cir.ptr<!s8i> loc(#loc35)
          cir.call @printLine(%5) : (!cir.ptr<!s8i>) -> () loc(#loc36)
          cir.break loc(#loc37)
        } loc(#loc34)
        cir.yield loc(#loc22)
      } loc(#loc22)
    } loc(#loc208)
    cir.return loc(#loc7)
  } loc(#loc203)
  cir.func no_proto @CWE190_Integer_Overflow__unsigned_int_max_square_15_good() extra(#fn_attr) {
    %0 = cir.get_global @goodB2G1 : !cir.ptr<!cir.func<()>> loc(#loc213)
    cir.call %0() : (!cir.ptr<!cir.func<()>>) -> () loc(#loc40)
    %1 = cir.get_global @goodB2G2 : !cir.ptr<!cir.func<()>> loc(#loc214)
    cir.call %1() : (!cir.ptr<!cir.func<()>>) -> () loc(#loc42)
    %2 = cir.get_global @goodG2B1 : !cir.ptr<!cir.func<()>> loc(#loc215)
    cir.call %2() : (!cir.ptr<!cir.func<()>>) -> () loc(#loc44)
    %3 = cir.get_global @goodG2B2 : !cir.ptr<!cir.func<()>> loc(#loc216)
    cir.call %3() : (!cir.ptr<!cir.func<()>>) -> () loc(#loc46)
    cir.return loc(#loc39)
  } loc(#loc212)
  cir.func private @sqrt(!cir.double) -> !cir.double extra(#fn_attr1) loc(#loc48)
  cir.global "private" constant cir_private dsolocal @".str.1" = #cir.const_array<"data value is too large to perform arithmetic safely.\00" : !cir.array<!s8i x 54>> : !cir.array<!s8i x 54> {alignment = 1 : i64} loc(#loc49)
  cir.func no_proto internal private @goodB2G1() extra(#fn_attr) {
    %0 = cir.alloca !u32i, !cir.ptr<!u32i>, ["data"] {alignment = 4 : i64} loc(#loc218)
    %1 = cir.const #cir.int<0> : !s32i loc(#loc54)
    %2 = cir.cast(integral, %1 : !s32i), !u32i loc(#loc54)
    cir.store %2, %0 : !u32i, !cir.ptr<!u32i> loc(#loc219)
    cir.scope {
      %3 = cir.const #cir.int<6> : !s32i loc(#loc58)
      cir.switch (%3 : !s32i) {
        cir.case(equal, [#cir.int<6> : !s32i]) {
          %4 = cir.const #cir.int<2147483647> : !s32i loc(#loc60)
          %5 = cir.cast(integral, %4 : !s32i), !u32i loc(#loc60)
          %6 = cir.const #cir.int<2> : !u32i loc(#loc60)
          %7 = cir.binop(mul, %5, %6) : !u32i loc(#loc60)
          %8 = cir.const #cir.int<1> : !u32i loc(#loc60)
          %9 = cir.binop(add, %7, %8) : !u32i loc(#loc60)
          cir.store %9, %0 : !u32i, !cir.ptr<!u32i> loc(#loc221)
          cir.break loc(#loc62)
        } loc(#loc59)
        cir.case(default, []) {
          %4 = cir.get_global @".str" : !cir.ptr<!cir.array<!s8i x 21>> loc(#loc64)
          %5 = cir.cast(array_to_ptrdecay, %4 : !cir.ptr<!cir.array<!s8i x 21>>), !cir.ptr<!s8i> loc(#loc64)
          cir.call @printLine(%5) : (!cir.ptr<!s8i>) -> () loc(#loc65)
          cir.break loc(#loc66)
        } loc(#loc63)
        cir.yield loc(#loc56)
      } loc(#loc56)
    } loc(#loc220)
    cir.scope {
      %3 = cir.const #cir.int<8> : !s32i loc(#loc69)
      cir.switch (%3 : !s32i) {
        cir.case(equal, [#cir.int<7> : !s32i]) {
          %4 = cir.get_global @".str" : !cir.ptr<!cir.array<!s8i x 21>> loc(#loc71)
          %5 = cir.cast(array_to_ptrdecay, %4 : !cir.ptr<!cir.array<!s8i x 21>>), !cir.ptr<!s8i> loc(#loc71)
          cir.call @printLine(%5) : (!cir.ptr<!s8i>) -> () loc(#loc72)
          cir.break loc(#loc73)
        } loc(#loc70)
        cir.case(default, []) {
          cir.scope {
            %4 = cir.load %0 : !cir.ptr<!u32i>, !u32i loc(#loc77)
            %5 = cir.cast(integral, %4 : !u32i), !s64i loc(#loc77)
            %6 = cir.cast(integral, %5 : !s64i), !s32i loc(#loc77)
            %7 = cir.abs %6 poison : !s32i loc(#loc78)
            %8 = cir.cast(integral, %7 : !s32i), !s64i loc(#loc78)
            %9 = cir.get_global @sqrt : !cir.ptr<!cir.func<(!cir.double) -> !cir.double>> loc(#loc79)
            %10 = cir.const #cir.int<2147483647> : !s32i loc(#loc80)
            %11 = cir.cast(integral, %10 : !s32i), !u32i loc(#loc80)
            %12 = cir.const #cir.int<2> : !u32i loc(#loc80)
            %13 = cir.binop(mul, %11, %12) : !u32i loc(#loc80)
            %14 = cir.const #cir.int<1> : !u32i loc(#loc80)
            %15 = cir.binop(add, %13, %14) : !u32i loc(#loc80)
            %16 = cir.cast(int_to_float, %15 : !u32i), !cir.double loc(#loc80)
            %17 = cir.call @sqrt(%16) : (!cir.double) -> !cir.double extra(#fn_attr1) loc(#loc79)
            %18 = cir.cast(float_to_int, %17 : !cir.double), !s64i loc(#loc79)
            %19 = cir.cmp(lt, %8, %18) : !s64i, !cir.bool loc(#loc224)
            cir.if %19 {
              %20 = cir.alloca !u32i, !cir.ptr<!u32i>, ["result", init] {alignment = 4 : i64} loc(#loc226)
              %21 = cir.load %0 : !cir.ptr<!u32i>, !u32i loc(#loc87)
              %22 = cir.load %0 : !cir.ptr<!u32i>, !u32i loc(#loc86)
              %23 = cir.binop(mul, %21, %22) : !u32i loc(#loc227)
              cir.store %23, %20 : !u32i, !cir.ptr<!u32i> loc(#loc226)
              %24 = cir.load %20 : !cir.ptr<!u32i>, !u32i loc(#loc88)
              cir.call @printUnsignedLine(%24) : (!u32i) -> () loc(#loc89)
            } else {
              %20 = cir.get_global @".str.1" : !cir.ptr<!cir.array<!s8i x 54>> loc(#loc49)
              %21 = cir.cast(array_to_ptrdecay, %20 : !cir.ptr<!cir.array<!s8i x 54>>), !cir.ptr<!s8i> loc(#loc49)
              cir.call @printLine(%21) : (!cir.ptr<!s8i>) -> () loc(#loc90)
            } loc(#loc225)
          } loc(#loc223)
          cir.break loc(#loc91)
        } loc(#loc74)
        cir.yield loc(#loc67)
      } loc(#loc67)
    } loc(#loc222)
    cir.return loc(#loc51)
  } loc(#loc217)
  cir.func no_proto internal private @goodB2G2() extra(#fn_attr) {
    %0 = cir.alloca !u32i, !cir.ptr<!u32i>, ["data"] {alignment = 4 : i64} loc(#loc229)
    %1 = cir.const #cir.int<0> : !s32i loc(#loc96)
    %2 = cir.cast(integral, %1 : !s32i), !u32i loc(#loc96)
    cir.store %2, %0 : !u32i, !cir.ptr<!u32i> loc(#loc230)
    cir.scope {
      %3 = cir.const #cir.int<6> : !s32i loc(#loc100)
      cir.switch (%3 : !s32i) {
        cir.case(equal, [#cir.int<6> : !s32i]) {
          %4 = cir.const #cir.int<2147483647> : !s32i loc(#loc102)
          %5 = cir.cast(integral, %4 : !s32i), !u32i loc(#loc102)
          %6 = cir.const #cir.int<2> : !u32i loc(#loc102)
          %7 = cir.binop(mul, %5, %6) : !u32i loc(#loc102)
          %8 = cir.const #cir.int<1> : !u32i loc(#loc102)
          %9 = cir.binop(add, %7, %8) : !u32i loc(#loc102)
          cir.store %9, %0 : !u32i, !cir.ptr<!u32i> loc(#loc232)
          cir.break loc(#loc104)
        } loc(#loc101)
        cir.case(default, []) {
          %4 = cir.get_global @".str" : !cir.ptr<!cir.array<!s8i x 21>> loc(#loc106)
          %5 = cir.cast(array_to_ptrdecay, %4 : !cir.ptr<!cir.array<!s8i x 21>>), !cir.ptr<!s8i> loc(#loc106)
          cir.call @printLine(%5) : (!cir.ptr<!s8i>) -> () loc(#loc107)
          cir.break loc(#loc108)
        } loc(#loc105)
        cir.yield loc(#loc98)
      } loc(#loc98)
    } loc(#loc231)
    cir.scope {
      %3 = cir.const #cir.int<7> : !s32i loc(#loc111)
      cir.switch (%3 : !s32i) {
        cir.case(equal, [#cir.int<7> : !s32i]) {
          cir.scope {
            %4 = cir.load %0 : !cir.ptr<!u32i>, !u32i loc(#loc115)
            %5 = cir.cast(integral, %4 : !u32i), !s64i loc(#loc115)
            %6 = cir.cast(integral, %5 : !s64i), !s32i loc(#loc115)
            %7 = cir.abs %6 poison : !s32i loc(#loc116)
            %8 = cir.cast(integral, %7 : !s32i), !s64i loc(#loc116)
            %9 = cir.get_global @sqrt : !cir.ptr<!cir.func<(!cir.double) -> !cir.double>> loc(#loc117)
            %10 = cir.const #cir.int<2147483647> : !s32i loc(#loc118)
            %11 = cir.cast(integral, %10 : !s32i), !u32i loc(#loc118)
            %12 = cir.const #cir.int<2> : !u32i loc(#loc118)
            %13 = cir.binop(mul, %11, %12) : !u32i loc(#loc118)
            %14 = cir.const #cir.int<1> : !u32i loc(#loc118)
            %15 = cir.binop(add, %13, %14) : !u32i loc(#loc118)
            %16 = cir.cast(int_to_float, %15 : !u32i), !cir.double loc(#loc118)
            %17 = cir.call @sqrt(%16) : (!cir.double) -> !cir.double extra(#fn_attr1) loc(#loc117)
            %18 = cir.cast(float_to_int, %17 : !cir.double), !s64i loc(#loc117)
            %19 = cir.cmp(lt, %8, %18) : !s64i, !cir.bool loc(#loc235)
            cir.if %19 {
              %20 = cir.alloca !u32i, !cir.ptr<!u32i>, ["result", init] {alignment = 4 : i64} loc(#loc237)
              %21 = cir.load %0 : !cir.ptr<!u32i>, !u32i loc(#loc125)
              %22 = cir.load %0 : !cir.ptr<!u32i>, !u32i loc(#loc124)
              %23 = cir.binop(mul, %21, %22) : !u32i loc(#loc238)
              cir.store %23, %20 : !u32i, !cir.ptr<!u32i> loc(#loc237)
              %24 = cir.load %20 : !cir.ptr<!u32i>, !u32i loc(#loc126)
              cir.call @printUnsignedLine(%24) : (!u32i) -> () loc(#loc127)
            } else {
              %20 = cir.get_global @".str.1" : !cir.ptr<!cir.array<!s8i x 54>> loc(#loc128)
              %21 = cir.cast(array_to_ptrdecay, %20 : !cir.ptr<!cir.array<!s8i x 54>>), !cir.ptr<!s8i> loc(#loc128)
              cir.call @printLine(%21) : (!cir.ptr<!s8i>) -> () loc(#loc129)
            } loc(#loc236)
          } loc(#loc234)
          cir.break loc(#loc130)
        } loc(#loc112)
        cir.case(default, []) {
          %4 = cir.get_global @".str" : !cir.ptr<!cir.array<!s8i x 21>> loc(#loc132)
          %5 = cir.cast(array_to_ptrdecay, %4 : !cir.ptr<!cir.array<!s8i x 21>>), !cir.ptr<!s8i> loc(#loc132)
          cir.call @printLine(%5) : (!cir.ptr<!s8i>) -> () loc(#loc133)
          cir.break loc(#loc134)
        } loc(#loc131)
        cir.yield loc(#loc109)
      } loc(#loc109)
    } loc(#loc233)
    cir.return loc(#loc93)
  } loc(#loc228)
  cir.func no_proto internal private @goodG2B1() extra(#fn_attr) {
    %0 = cir.alloca !u32i, !cir.ptr<!u32i>, ["data"] {alignment = 4 : i64} loc(#loc240)
    %1 = cir.const #cir.int<0> : !s32i loc(#loc139)
    %2 = cir.cast(integral, %1 : !s32i), !u32i loc(#loc139)
    cir.store %2, %0 : !u32i, !cir.ptr<!u32i> loc(#loc241)
    cir.scope {
      %3 = cir.const #cir.int<5> : !s32i loc(#loc143)
      cir.switch (%3 : !s32i) {
        cir.case(equal, [#cir.int<6> : !s32i]) {
          %4 = cir.get_global @".str" : !cir.ptr<!cir.array<!s8i x 21>> loc(#loc145)
          %5 = cir.cast(array_to_ptrdecay, %4 : !cir.ptr<!cir.array<!s8i x 21>>), !cir.ptr<!s8i> loc(#loc145)
          cir.call @printLine(%5) : (!cir.ptr<!s8i>) -> () loc(#loc146)
          cir.break loc(#loc147)
        } loc(#loc144)
        cir.case(default, []) {
          %4 = cir.const #cir.int<2> : !s32i loc(#loc149)
          %5 = cir.cast(integral, %4 : !s32i), !u32i loc(#loc149)
          cir.store %5, %0 : !u32i, !cir.ptr<!u32i> loc(#loc243)
          cir.break loc(#loc151)
        } loc(#loc148)
        cir.yield loc(#loc141)
      } loc(#loc141)
    } loc(#loc242)
    cir.scope {
      %3 = cir.const #cir.int<7> : !s32i loc(#loc154)
      cir.switch (%3 : !s32i) {
        cir.case(equal, [#cir.int<7> : !s32i]) {
          cir.scope {
            %4 = cir.alloca !u32i, !cir.ptr<!u32i>, ["result", init] {alignment = 4 : i64} loc(#loc246)
            %5 = cir.load %0 : !cir.ptr<!u32i>, !u32i loc(#loc160)
            %6 = cir.load %0 : !cir.ptr<!u32i>, !u32i loc(#loc159)
            %7 = cir.binop(mul, %5, %6) : !u32i loc(#loc247)
            cir.store %7, %4 : !u32i, !cir.ptr<!u32i> loc(#loc246)
            %8 = cir.load %4 : !cir.ptr<!u32i>, !u32i loc(#loc161)
            cir.call @printUnsignedLine(%8) : (!u32i) -> () loc(#loc162)
          } loc(#loc245)
          cir.break loc(#loc163)
        } loc(#loc155)
        cir.case(default, []) {
          %4 = cir.get_global @".str" : !cir.ptr<!cir.array<!s8i x 21>> loc(#loc165)
          %5 = cir.cast(array_to_ptrdecay, %4 : !cir.ptr<!cir.array<!s8i x 21>>), !cir.ptr<!s8i> loc(#loc165)
          cir.call @printLine(%5) : (!cir.ptr<!s8i>) -> () loc(#loc166)
          cir.break loc(#loc167)
        } loc(#loc164)
        cir.yield loc(#loc152)
      } loc(#loc152)
    } loc(#loc244)
    cir.return loc(#loc136)
  } loc(#loc239)
  cir.func no_proto internal private @goodG2B2() extra(#fn_attr) {
    %0 = cir.alloca !u32i, !cir.ptr<!u32i>, ["data"] {alignment = 4 : i64} loc(#loc249)
    %1 = cir.const #cir.int<0> : !s32i loc(#loc172)
    %2 = cir.cast(integral, %1 : !s32i), !u32i loc(#loc172)
    cir.store %2, %0 : !u32i, !cir.ptr<!u32i> loc(#loc250)
    cir.scope {
      %3 = cir.const #cir.int<6> : !s32i loc(#loc176)
      cir.switch (%3 : !s32i) {
        cir.case(equal, [#cir.int<6> : !s32i]) {
          %4 = cir.const #cir.int<2> : !s32i loc(#loc178)
          %5 = cir.cast(integral, %4 : !s32i), !u32i loc(#loc178)
          cir.store %5, %0 : !u32i, !cir.ptr<!u32i> loc(#loc252)
          cir.break loc(#loc180)
        } loc(#loc177)
        cir.case(default, []) {
          %4 = cir.get_global @".str" : !cir.ptr<!cir.array<!s8i x 21>> loc(#loc182)
          %5 = cir.cast(array_to_ptrdecay, %4 : !cir.ptr<!cir.array<!s8i x 21>>), !cir.ptr<!s8i> loc(#loc182)
          cir.call @printLine(%5) : (!cir.ptr<!s8i>) -> () loc(#loc183)
          cir.break loc(#loc184)
        } loc(#loc181)
        cir.yield loc(#loc174)
      } loc(#loc174)
    } loc(#loc251)
    cir.scope {
      %3 = cir.const #cir.int<7> : !s32i loc(#loc187)
      cir.switch (%3 : !s32i) {
        cir.case(equal, [#cir.int<7> : !s32i]) {
          cir.scope {
            %4 = cir.alloca !u32i, !cir.ptr<!u32i>, ["result", init] {alignment = 4 : i64} loc(#loc255)
            %5 = cir.load %0 : !cir.ptr<!u32i>, !u32i loc(#loc193)
            %6 = cir.load %0 : !cir.ptr<!u32i>, !u32i loc(#loc192)
            %7 = cir.binop(mul, %5, %6) : !u32i loc(#loc256)
            cir.store %7, %4 : !u32i, !cir.ptr<!u32i> loc(#loc255)
            %8 = cir.load %4 : !cir.ptr<!u32i>, !u32i loc(#loc194)
            cir.call @printUnsignedLine(%8) : (!u32i) -> () loc(#loc195)
          } loc(#loc254)
          cir.break loc(#loc196)
        } loc(#loc188)
        cir.case(default, []) {
          %4 = cir.get_global @".str" : !cir.ptr<!cir.array<!s8i x 21>> loc(#loc198)
          %5 = cir.cast(array_to_ptrdecay, %4 : !cir.ptr<!cir.array<!s8i x 21>>), !cir.ptr<!s8i> loc(#loc198)
          cir.call @printLine(%5) : (!cir.ptr<!s8i>) -> () loc(#loc199)
          cir.break loc(#loc200)
        } loc(#loc197)
        cir.yield loc(#loc185)
      } loc(#loc185)
    } loc(#loc253)
    cir.return loc(#loc169)
  } loc(#loc248)
} loc(#loc)
#loc = loc("/workspaces/juliet-c/testcases/CWE190_Integer_Overflow/s05/CWE190_Integer_Overflow__unsigned_int_max_square_15.c":0:0)
#loc1 = loc("../../../testcasesupport/std_testcase_io.h":14:1)
#loc2 = loc("../../../testcasesupport/std_testcase_io.h":14:33)
#loc3 = loc("CWE190_Integer_Overflow__unsigned_int_max_square_15.c":36:19)
#loc4 = loc("../../../testcasesupport/std_testcase_io.h":34:1)
#loc5 = loc("../../../testcasesupport/std_testcase_io.h":34:47)
#loc6 = loc("CWE190_Integer_Overflow__unsigned_int_max_square_15.c":24:1)
#loc7 = loc("CWE190_Integer_Overflow__unsigned_int_max_square_15.c":53:1)
#loc8 = loc("CWE190_Integer_Overflow__unsigned_int_max_square_15.c":26:5)
#loc9 = loc("CWE190_Integer_Overflow__unsigned_int_max_square_15.c":26:18)
#loc10 = loc("CWE190_Integer_Overflow__unsigned_int_max_square_15.c":27:12)
#loc11 = loc("CWE190_Integer_Overflow__unsigned_int_max_square_15.c":27:5)
#loc12 = loc("CWE190_Integer_Overflow__unsigned_int_max_square_15.c":28:5)
#loc13 = loc("CWE190_Integer_Overflow__unsigned_int_max_square_15.c":38:5)
#loc14 = loc("CWE190_Integer_Overflow__unsigned_int_max_square_15.c":28:12)
#loc15 = loc("CWE190_Integer_Overflow__unsigned_int_max_square_15.c":30:5)
#loc16 = loc("CWE190_Integer_Overflow__unsigned_int_max_square_15.c":32:16)
#loc17 = loc("CWE190_Integer_Overflow__unsigned_int_max_square_15.c":32:9)
#loc18 = loc("CWE190_Integer_Overflow__unsigned_int_max_square_15.c":33:9)
#loc19 = loc("CWE190_Integer_Overflow__unsigned_int_max_square_15.c":34:5)
#loc20 = loc("CWE190_Integer_Overflow__unsigned_int_max_square_15.c":36:9)
#loc21 = loc("CWE190_Integer_Overflow__unsigned_int_max_square_15.c":37:9)
#loc22 = loc("CWE190_Integer_Overflow__unsigned_int_max_square_15.c":39:5)
#loc23 = loc("CWE190_Integer_Overflow__unsigned_int_max_square_15.c":52:5)
#loc24 = loc("CWE190_Integer_Overflow__unsigned_int_max_square_15.c":39:12)
#loc25 = loc("CWE190_Integer_Overflow__unsigned_int_max_square_15.c":41:5)
#loc26 = loc("CWE190_Integer_Overflow__unsigned_int_max_square_15.c":42:5)
#loc27 = loc("CWE190_Integer_Overflow__unsigned_int_max_square_15.c":46:5)
#loc28 = loc("CWE190_Integer_Overflow__unsigned_int_max_square_15.c":44:9)
#loc29 = loc("CWE190_Integer_Overflow__unsigned_int_max_square_15.c":44:38)
#loc30 = loc("CWE190_Integer_Overflow__unsigned_int_max_square_15.c":44:31)
#loc31 = loc("CWE190_Integer_Overflow__unsigned_int_max_square_15.c":45:27)
#loc32 = loc("CWE190_Integer_Overflow__unsigned_int_max_square_15.c":45:9)
#loc33 = loc("CWE190_Integer_Overflow__unsigned_int_max_square_15.c":47:5)
#loc34 = loc("CWE190_Integer_Overflow__unsigned_int_max_square_15.c":48:5)
#loc35 = loc("CWE190_Integer_Overflow__unsigned_int_max_square_15.c":50:19)
#loc36 = loc("CWE190_Integer_Overflow__unsigned_int_max_square_15.c":50:9)
#loc37 = loc("CWE190_Integer_Overflow__unsigned_int_max_square_15.c":51:9)
#loc38 = loc("CWE190_Integer_Overflow__unsigned_int_max_square_15.c":197:1)
#loc39 = loc("CWE190_Integer_Overflow__unsigned_int_max_square_15.c":203:1)
#loc40 = loc("CWE190_Integer_Overflow__unsigned_int_max_square_15.c":199:5)
#loc41 = loc("CWE190_Integer_Overflow__unsigned_int_max_square_15.c":199:14)
#loc42 = loc("CWE190_Integer_Overflow__unsigned_int_max_square_15.c":200:5)
#loc43 = loc("CWE190_Integer_Overflow__unsigned_int_max_square_15.c":200:14)
#loc44 = loc("CWE190_Integer_Overflow__unsigned_int_max_square_15.c":201:5)
#loc45 = loc("CWE190_Integer_Overflow__unsigned_int_max_square_15.c":201:14)
#loc46 = loc("CWE190_Integer_Overflow__unsigned_int_max_square_15.c":202:5)
#loc47 = loc("CWE190_Integer_Overflow__unsigned_int_max_square_15.c":202:14)
#loc48 = loc("/usr/include/x86_64-linux-gnu/bits/mathcalls.h":143:1)
#loc49 = loc("CWE190_Integer_Overflow__unsigned_int_max_square_15.c":90:23)
#loc50 = loc("CWE190_Integer_Overflow__unsigned_int_max_square_15.c":60:1)
#loc51 = loc("CWE190_Integer_Overflow__unsigned_int_max_square_15.c":94:1)
#loc52 = loc("CWE190_Integer_Overflow__unsigned_int_max_square_15.c":62:5)
#loc53 = loc("CWE190_Integer_Overflow__unsigned_int_max_square_15.c":62:18)
#loc54 = loc("CWE190_Integer_Overflow__unsigned_int_max_square_15.c":63:12)
#loc55 = loc("CWE190_Integer_Overflow__unsigned_int_max_square_15.c":63:5)
#loc56 = loc("CWE190_Integer_Overflow__unsigned_int_max_square_15.c":64:5)
#loc57 = loc("CWE190_Integer_Overflow__unsigned_int_max_square_15.c":74:5)
#loc58 = loc("CWE190_Integer_Overflow__unsigned_int_max_square_15.c":64:12)
#loc59 = loc("CWE190_Integer_Overflow__unsigned_int_max_square_15.c":66:5)
#loc60 = loc("CWE190_Integer_Overflow__unsigned_int_max_square_15.c":68:16)
#loc61 = loc("CWE190_Integer_Overflow__unsigned_int_max_square_15.c":68:9)
#loc62 = loc("CWE190_Integer_Overflow__unsigned_int_max_square_15.c":69:9)
#loc63 = loc("CWE190_Integer_Overflow__unsigned_int_max_square_15.c":70:5)
#loc64 = loc("CWE190_Integer_Overflow__unsigned_int_max_square_15.c":72:19)
#loc65 = loc("CWE190_Integer_Overflow__unsigned_int_max_square_15.c":72:9)
#loc66 = loc("CWE190_Integer_Overflow__unsigned_int_max_square_15.c":73:9)
#loc67 = loc("CWE190_Integer_Overflow__unsigned_int_max_square_15.c":75:5)
#loc68 = loc("CWE190_Integer_Overflow__unsigned_int_max_square_15.c":93:5)
#loc69 = loc("CWE190_Integer_Overflow__unsigned_int_max_square_15.c":75:12)
#loc70 = loc("CWE190_Integer_Overflow__unsigned_int_max_square_15.c":77:5)
#loc71 = loc("CWE190_Integer_Overflow__unsigned_int_max_square_15.c":79:19)
#loc72 = loc("CWE190_Integer_Overflow__unsigned_int_max_square_15.c":79:9)
#loc73 = loc("CWE190_Integer_Overflow__unsigned_int_max_square_15.c":80:9)
#loc74 = loc("CWE190_Integer_Overflow__unsigned_int_max_square_15.c":81:5)
#loc75 = loc("CWE190_Integer_Overflow__unsigned_int_max_square_15.c":83:9)
#loc76 = loc("CWE190_Integer_Overflow__unsigned_int_max_square_15.c":91:9)
#loc77 = loc("CWE190_Integer_Overflow__unsigned_int_max_square_15.c":83:23)
#loc78 = loc("CWE190_Integer_Overflow__unsigned_int_max_square_15.c":83:13)
#loc79 = loc("CWE190_Integer_Overflow__unsigned_int_max_square_15.c":83:37)
#loc80 = loc("CWE190_Integer_Overflow__unsigned_int_max_square_15.c":83:50)
#loc81 = loc("CWE190_Integer_Overflow__unsigned_int_max_square_15.c":83:58)
#loc82 = loc("CWE190_Integer_Overflow__unsigned_int_max_square_15.c":84:9)
#loc83 = loc("CWE190_Integer_Overflow__unsigned_int_max_square_15.c":87:9)
#loc84 = loc("CWE190_Integer_Overflow__unsigned_int_max_square_15.c":89:9)
#loc85 = loc("CWE190_Integer_Overflow__unsigned_int_max_square_15.c":85:13)
#loc86 = loc("CWE190_Integer_Overflow__unsigned_int_max_square_15.c":85:42)
#loc87 = loc("CWE190_Integer_Overflow__unsigned_int_max_square_15.c":85:35)
#loc88 = loc("CWE190_Integer_Overflow__unsigned_int_max_square_15.c":86:31)
#loc89 = loc("CWE190_Integer_Overflow__unsigned_int_max_square_15.c":86:13)
#loc90 = loc("CWE190_Integer_Overflow__unsigned_int_max_square_15.c":90:13)
#loc91 = loc("CWE190_Integer_Overflow__unsigned_int_max_square_15.c":92:9)
#loc92 = loc("CWE190_Integer_Overflow__unsigned_int_max_square_15.c":97:1)
#loc93 = loc("CWE190_Integer_Overflow__unsigned_int_max_square_15.c":131:1)
#loc94 = loc("CWE190_Integer_Overflow__unsigned_int_max_square_15.c":99:5)
#loc95 = loc("CWE190_Integer_Overflow__unsigned_int_max_square_15.c":99:18)
#loc96 = loc("CWE190_Integer_Overflow__unsigned_int_max_square_15.c":100:12)
#loc97 = loc("CWE190_Integer_Overflow__unsigned_int_max_square_15.c":100:5)
#loc98 = loc("CWE190_Integer_Overflow__unsigned_int_max_square_15.c":101:5)
#loc99 = loc("CWE190_Integer_Overflow__unsigned_int_max_square_15.c":111:5)
#loc100 = loc("CWE190_Integer_Overflow__unsigned_int_max_square_15.c":101:12)
#loc101 = loc("CWE190_Integer_Overflow__unsigned_int_max_square_15.c":103:5)
#loc102 = loc("CWE190_Integer_Overflow__unsigned_int_max_square_15.c":105:16)
#loc103 = loc("CWE190_Integer_Overflow__unsigned_int_max_square_15.c":105:9)
#loc104 = loc("CWE190_Integer_Overflow__unsigned_int_max_square_15.c":106:9)
#loc105 = loc("CWE190_Integer_Overflow__unsigned_int_max_square_15.c":107:5)
#loc106 = loc("CWE190_Integer_Overflow__unsigned_int_max_square_15.c":109:19)
#loc107 = loc("CWE190_Integer_Overflow__unsigned_int_max_square_15.c":109:9)
#loc108 = loc("CWE190_Integer_Overflow__unsigned_int_max_square_15.c":110:9)
#loc109 = loc("CWE190_Integer_Overflow__unsigned_int_max_square_15.c":112:5)
#loc110 = loc("CWE190_Integer_Overflow__unsigned_int_max_square_15.c":130:5)
#loc111 = loc("CWE190_Integer_Overflow__unsigned_int_max_square_15.c":112:12)
#loc112 = loc("CWE190_Integer_Overflow__unsigned_int_max_square_15.c":114:5)
#loc113 = loc("CWE190_Integer_Overflow__unsigned_int_max_square_15.c":116:9)
#loc114 = loc("CWE190_Integer_Overflow__unsigned_int_max_square_15.c":124:9)
#loc115 = loc("CWE190_Integer_Overflow__unsigned_int_max_square_15.c":116:23)
#loc116 = loc("CWE190_Integer_Overflow__unsigned_int_max_square_15.c":116:13)
#loc117 = loc("CWE190_Integer_Overflow__unsigned_int_max_square_15.c":116:37)
#loc118 = loc("CWE190_Integer_Overflow__unsigned_int_max_square_15.c":116:50)
#loc119 = loc("CWE190_Integer_Overflow__unsigned_int_max_square_15.c":116:58)
#loc120 = loc("CWE190_Integer_Overflow__unsigned_int_max_square_15.c":117:9)
#loc121 = loc("CWE190_Integer_Overflow__unsigned_int_max_square_15.c":120:9)
#loc122 = loc("CWE190_Integer_Overflow__unsigned_int_max_square_15.c":122:9)
#loc123 = loc("CWE190_Integer_Overflow__unsigned_int_max_square_15.c":118:13)
#loc124 = loc("CWE190_Integer_Overflow__unsigned_int_max_square_15.c":118:42)
#loc125 = loc("CWE190_Integer_Overflow__unsigned_int_max_square_15.c":118:35)
#loc126 = loc("CWE190_Integer_Overflow__unsigned_int_max_square_15.c":119:31)
#loc127 = loc("CWE190_Integer_Overflow__unsigned_int_max_square_15.c":119:13)
#loc128 = loc("CWE190_Integer_Overflow__unsigned_int_max_square_15.c":123:23)
#loc129 = loc("CWE190_Integer_Overflow__unsigned_int_max_square_15.c":123:13)
#loc130 = loc("CWE190_Integer_Overflow__unsigned_int_max_square_15.c":125:9)
#loc131 = loc("CWE190_Integer_Overflow__unsigned_int_max_square_15.c":126:5)
#loc132 = loc("CWE190_Integer_Overflow__unsigned_int_max_square_15.c":128:19)
#loc133 = loc("CWE190_Integer_Overflow__unsigned_int_max_square_15.c":128:9)
#loc134 = loc("CWE190_Integer_Overflow__unsigned_int_max_square_15.c":129:9)
#loc135 = loc("CWE190_Integer_Overflow__unsigned_int_max_square_15.c":134:1)
#loc136 = loc("CWE190_Integer_Overflow__unsigned_int_max_square_15.c":163:1)
#loc137 = loc("CWE190_Integer_Overflow__unsigned_int_max_square_15.c":136:5)
#loc138 = loc("CWE190_Integer_Overflow__unsigned_int_max_square_15.c":136:18)
#loc139 = loc("CWE190_Integer_Overflow__unsigned_int_max_square_15.c":137:12)
#loc140 = loc("CWE190_Integer_Overflow__unsigned_int_max_square_15.c":137:5)
#loc141 = loc("CWE190_Integer_Overflow__unsigned_int_max_square_15.c":138:5)
#loc142 = loc("CWE190_Integer_Overflow__unsigned_int_max_square_15.c":148:5)
#loc143 = loc("CWE190_Integer_Overflow__unsigned_int_max_square_15.c":138:12)
#loc144 = loc("CWE190_Integer_Overflow__unsigned_int_max_square_15.c":140:5)
#loc145 = loc("CWE190_Integer_Overflow__unsigned_int_max_square_15.c":142:19)
#loc146 = loc("CWE190_Integer_Overflow__unsigned_int_max_square_15.c":142:9)
#loc147 = loc("CWE190_Integer_Overflow__unsigned_int_max_square_15.c":143:9)
#loc148 = loc("CWE190_Integer_Overflow__unsigned_int_max_square_15.c":144:5)
#loc149 = loc("CWE190_Integer_Overflow__unsigned_int_max_square_15.c":146:16)
#loc150 = loc("CWE190_Integer_Overflow__unsigned_int_max_square_15.c":146:9)
#loc151 = loc("CWE190_Integer_Overflow__unsigned_int_max_square_15.c":147:9)
#loc152 = loc("CWE190_Integer_Overflow__unsigned_int_max_square_15.c":149:5)
#loc153 = loc("CWE190_Integer_Overflow__unsigned_int_max_square_15.c":162:5)
#loc154 = loc("CWE190_Integer_Overflow__unsigned_int_max_square_15.c":149:12)
#loc155 = loc("CWE190_Integer_Overflow__unsigned_int_max_square_15.c":151:5)
#loc156 = loc("CWE190_Integer_Overflow__unsigned_int_max_square_15.c":152:5)
#loc157 = loc("CWE190_Integer_Overflow__unsigned_int_max_square_15.c":156:5)
#loc158 = loc("CWE190_Integer_Overflow__unsigned_int_max_square_15.c":154:9)
#loc159 = loc("CWE190_Integer_Overflow__unsigned_int_max_square_15.c":154:38)
#loc160 = loc("CWE190_Integer_Overflow__unsigned_int_max_square_15.c":154:31)
#loc161 = loc("CWE190_Integer_Overflow__unsigned_int_max_square_15.c":155:27)
#loc162 = loc("CWE190_Integer_Overflow__unsigned_int_max_square_15.c":155:9)
#loc163 = loc("CWE190_Integer_Overflow__unsigned_int_max_square_15.c":157:5)
#loc164 = loc("CWE190_Integer_Overflow__unsigned_int_max_square_15.c":158:5)
#loc165 = loc("CWE190_Integer_Overflow__unsigned_int_max_square_15.c":160:19)
#loc166 = loc("CWE190_Integer_Overflow__unsigned_int_max_square_15.c":160:9)
#loc167 = loc("CWE190_Integer_Overflow__unsigned_int_max_square_15.c":161:9)
#loc168 = loc("CWE190_Integer_Overflow__unsigned_int_max_square_15.c":166:1)
#loc169 = loc("CWE190_Integer_Overflow__unsigned_int_max_square_15.c":195:1)
#loc170 = loc("CWE190_Integer_Overflow__unsigned_int_max_square_15.c":168:5)
#loc171 = loc("CWE190_Integer_Overflow__unsigned_int_max_square_15.c":168:18)
#loc172 = loc("CWE190_Integer_Overflow__unsigned_int_max_square_15.c":169:12)
#loc173 = loc("CWE190_Integer_Overflow__unsigned_int_max_square_15.c":169:5)
#loc174 = loc("CWE190_Integer_Overflow__unsigned_int_max_square_15.c":170:5)
#loc175 = loc("CWE190_Integer_Overflow__unsigned_int_max_square_15.c":180:5)
#loc176 = loc("CWE190_Integer_Overflow__unsigned_int_max_square_15.c":170:12)
#loc177 = loc("CWE190_Integer_Overflow__unsigned_int_max_square_15.c":172:5)
#loc178 = loc("CWE190_Integer_Overflow__unsigned_int_max_square_15.c":174:16)
#loc179 = loc("CWE190_Integer_Overflow__unsigned_int_max_square_15.c":174:9)
#loc180 = loc("CWE190_Integer_Overflow__unsigned_int_max_square_15.c":175:9)
#loc181 = loc("CWE190_Integer_Overflow__unsigned_int_max_square_15.c":176:5)
#loc182 = loc("CWE190_Integer_Overflow__unsigned_int_max_square_15.c":178:19)
#loc183 = loc("CWE190_Integer_Overflow__unsigned_int_max_square_15.c":178:9)
#loc184 = loc("CWE190_Integer_Overflow__unsigned_int_max_square_15.c":179:9)
#loc185 = loc("CWE190_Integer_Overflow__unsigned_int_max_square_15.c":181:5)
#loc186 = loc("CWE190_Integer_Overflow__unsigned_int_max_square_15.c":194:5)
#loc187 = loc("CWE190_Integer_Overflow__unsigned_int_max_square_15.c":181:12)
#loc188 = loc("CWE190_Integer_Overflow__unsigned_int_max_square_15.c":183:5)
#loc189 = loc("CWE190_Integer_Overflow__unsigned_int_max_square_15.c":184:5)
#loc190 = loc("CWE190_Integer_Overflow__unsigned_int_max_square_15.c":188:5)
#loc191 = loc("CWE190_Integer_Overflow__unsigned_int_max_square_15.c":186:9)
#loc192 = loc("CWE190_Integer_Overflow__unsigned_int_max_square_15.c":186:38)
#loc193 = loc("CWE190_Integer_Overflow__unsigned_int_max_square_15.c":186:31)
#loc194 = loc("CWE190_Integer_Overflow__unsigned_int_max_square_15.c":187:27)
#loc195 = loc("CWE190_Integer_Overflow__unsigned_int_max_square_15.c":187:9)
#loc196 = loc("CWE190_Integer_Overflow__unsigned_int_max_square_15.c":189:5)
#loc197 = loc("CWE190_Integer_Overflow__unsigned_int_max_square_15.c":190:5)
#loc198 = loc("CWE190_Integer_Overflow__unsigned_int_max_square_15.c":192:19)
#loc199 = loc("CWE190_Integer_Overflow__unsigned_int_max_square_15.c":192:9)
#loc200 = loc("CWE190_Integer_Overflow__unsigned_int_max_square_15.c":193:9)
#loc201 = loc(fused[#loc1, #loc2])
#loc202 = loc(fused[#loc4, #loc5])
#loc203 = loc(fused[#loc6, #loc7])
#loc204 = loc(fused[#loc8, #loc9])
#loc205 = loc(fused[#loc11, #loc10])
#loc206 = loc(fused[#loc12, #loc13])
#loc207 = loc(fused[#loc17, #loc16])
#loc208 = loc(fused[#loc22, #loc23])
#loc209 = loc(fused[#loc26, #loc27])
#loc210 = loc(fused[#loc28, #loc29])
#loc211 = loc(fused[#loc30, #loc29])
#loc212 = loc(fused[#loc38, #loc39])
#loc213 = loc(fused[#loc40, #loc41])
#loc214 = loc(fused[#loc42, #loc43])
#loc215 = loc(fused[#loc44, #loc45])
#loc216 = loc(fused[#loc46, #loc47])
#loc217 = loc(fused[#loc50, #loc51])
#loc218 = loc(fused[#loc52, #loc53])
#loc219 = loc(fused[#loc55, #loc54])
#loc220 = loc(fused[#loc56, #loc57])
#loc221 = loc(fused[#loc61, #loc60])
#loc222 = loc(fused[#loc67, #loc68])
#loc223 = loc(fused[#loc75, #loc76])
#loc224 = loc(fused[#loc78, #loc81])
#loc225 = loc(fused[#loc82, #loc83, #loc84, #loc76])
#loc226 = loc(fused[#loc85, #loc86])
#loc227 = loc(fused[#loc87, #loc86])
#loc228 = loc(fused[#loc92, #loc93])
#loc229 = loc(fused[#loc94, #loc95])
#loc230 = loc(fused[#loc97, #loc96])
#loc231 = loc(fused[#loc98, #loc99])
#loc232 = loc(fused[#loc103, #loc102])
#loc233 = loc(fused[#loc109, #loc110])
#loc234 = loc(fused[#loc113, #loc114])
#loc235 = loc(fused[#loc116, #loc119])
#loc236 = loc(fused[#loc120, #loc121, #loc122, #loc114])
#loc237 = loc(fused[#loc123, #loc124])
#loc238 = loc(fused[#loc125, #loc124])
#loc239 = loc(fused[#loc135, #loc136])
#loc240 = loc(fused[#loc137, #loc138])
#loc241 = loc(fused[#loc140, #loc139])
#loc242 = loc(fused[#loc141, #loc142])
#loc243 = loc(fused[#loc150, #loc149])
#loc244 = loc(fused[#loc152, #loc153])
#loc245 = loc(fused[#loc156, #loc157])
#loc246 = loc(fused[#loc158, #loc159])
#loc247 = loc(fused[#loc160, #loc159])
#loc248 = loc(fused[#loc168, #loc169])
#loc249 = loc(fused[#loc170, #loc171])
#loc250 = loc(fused[#loc173, #loc172])
#loc251 = loc(fused[#loc174, #loc175])
#loc252 = loc(fused[#loc179, #loc178])
#loc253 = loc(fused[#loc185, #loc186])
#loc254 = loc(fused[#loc189, #loc190])
#loc255 = loc(fused[#loc191, #loc192])
#loc256 = loc(fused[#loc193, #loc192])
