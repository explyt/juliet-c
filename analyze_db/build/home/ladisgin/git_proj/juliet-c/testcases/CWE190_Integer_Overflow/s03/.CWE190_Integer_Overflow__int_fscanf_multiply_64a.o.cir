!s32i = !cir.int<s, 32>
!s64i = !cir.int<s, 64>
!s8i = !cir.int<s, 8>
!ty__IO_codecvt = !cir.struct<struct "_IO_codecvt" incomplete>
!ty__IO_marker = !cir.struct<struct "_IO_marker" incomplete>
!ty__IO_wide_data = !cir.struct<struct "_IO_wide_data" incomplete>
!u16i = !cir.int<u, 16>
!void = !cir.void
#fn_attr = #cir<extra({inline = #cir.inline<no>, nothrow = #cir.nothrow, optnone = #cir.optnone})>
!ty__IO_FILE = !cir.struct<struct "_IO_FILE" {!s32i, !cir.ptr<!s8i>, !cir.ptr<!s8i>, !cir.ptr<!s8i>, !cir.ptr<!s8i>, !cir.ptr<!s8i>, !cir.ptr<!s8i>, !cir.ptr<!s8i>, !cir.ptr<!s8i>, !cir.ptr<!s8i>, !cir.ptr<!s8i>, !cir.ptr<!s8i>, !cir.ptr<!ty__IO_marker>, !cir.ptr<!cir.struct<struct "_IO_FILE">>, !s32i, !s32i, !s64i, !u16i, !s8i, !cir.array<!s8i x 1>, !cir.ptr<!void>, !s64i, !cir.ptr<!ty__IO_codecvt>, !cir.ptr<!ty__IO_wide_data>, !cir.ptr<!cir.struct<struct "_IO_FILE">>, !cir.ptr<!void>, !cir.ptr<!cir.ptr<!cir.struct<struct "_IO_FILE">>>, !s32i, !cir.array<!s8i x 20>} #cir.record.decl.ast>
module @"/home/ladisgin/git_proj/juliet-c/testcases/CWE190_Integer_Overflow/s03/CWE190_Integer_Overflow__int_fscanf_multiply_64a.c" attributes {cir.lang = #cir.lang<c>, cir.sob = #cir.signed_overflow_behavior<undefined>, cir.triple = "x86_64-unknown-linux-gnu", dlti.dl_spec = #dlti.dl_spec<i128 = dense<128> : vector<2xi64>, i64 = dense<64> : vector<2xi64>, f80 = dense<128> : vector<2xi64>, !llvm.ptr = dense<64> : vector<4xi64>, i8 = dense<8> : vector<2xi64>, i1 = dense<8> : vector<2xi64>, i16 = dense<16> : vector<2xi64>, f16 = dense<16> : vector<2xi64>, i32 = dense<32> : vector<2xi64>, f128 = dense<128> : vector<2xi64>, !llvm.ptr<270> = dense<32> : vector<4xi64>, f64 = dense<64> : vector<2xi64>, !llvm.ptr<271> = dense<32> : vector<4xi64>, !llvm.ptr<272> = dense<64> : vector<4xi64>, "dlti.stack_alignment" = 128 : i64, "dlti.endianness" = "little">} {
  cir.func private @__isoc99_fscanf(!cir.ptr<!ty__IO_FILE>, !cir.ptr<!s8i>, ...) -> !s32i loc(#loc52)
  cir.global "private" external @stdin : !cir.ptr<!ty__IO_FILE> {alignment = 8 : i64} loc(#loc53)
  cir.global "private" constant cir_private dsolocal @".str" = #cir.const_array<"%d\00" : !cir.array<!s8i x 3>> : !cir.array<!s8i x 3> {alignment = 1 : i64} loc(#loc5)
  cir.func private @CWE190_Integer_Overflow__int_fscanf_multiply_64b_badSink(!cir.ptr<!void>) loc(#loc54)
  cir.func no_proto @CWE190_Integer_Overflow__int_fscanf_multiply_64_bad() extra(#fn_attr) {
    %0 = cir.alloca !s32i, !cir.ptr<!s32i>, ["data"] {alignment = 4 : i64} loc(#loc56)
    %1 = cir.const #cir.int<0> : !s32i loc(#loc12)
    cir.store %1, %0 : !s32i, !cir.ptr<!s32i> loc(#loc57)
    %2 = cir.get_global @__isoc99_fscanf : !cir.ptr<!cir.func<!s32i (!cir.ptr<!ty__IO_FILE>, !cir.ptr<!s8i>, ...)>> loc(#loc14)
    %3 = cir.get_global @stdin : !cir.ptr<!cir.ptr<!ty__IO_FILE>> loc(#loc53)
    %4 = cir.load %3 : !cir.ptr<!cir.ptr<!ty__IO_FILE>>, !cir.ptr<!ty__IO_FILE> loc(#loc15)
    %5 = cir.get_global @".str" : !cir.ptr<!cir.array<!s8i x 3>> loc(#loc5)
    %6 = cir.cast(array_to_ptrdecay, %5 : !cir.ptr<!cir.array<!s8i x 3>>), !cir.ptr<!s8i> loc(#loc5)
    %7 = cir.call @__isoc99_fscanf(%4, %6, %0) : (!cir.ptr<!ty__IO_FILE>, !cir.ptr<!s8i>, !cir.ptr<!s32i>) -> !s32i loc(#loc14)
    %8 = cir.cast(bitcast, %0 : !cir.ptr<!s32i>), !cir.ptr<!void> loc(#loc58)
    cir.call @CWE190_Integer_Overflow__int_fscanf_multiply_64b_badSink(%8) : (!cir.ptr<!void>) -> () loc(#loc18)
    cir.return loc(#loc9)
  } loc(#loc55)
  cir.func no_proto @CWE190_Integer_Overflow__int_fscanf_multiply_64_good() extra(#fn_attr) {
    %0 = cir.get_global @goodG2B : !cir.ptr<!cir.func<!void ()>> loc(#loc60)
    cir.call %0() : (!cir.ptr<!cir.func<!void ()>>) -> () loc(#loc21)
    %1 = cir.get_global @goodB2G : !cir.ptr<!cir.func<!void ()>> loc(#loc61)
    cir.call %1() : (!cir.ptr<!cir.func<!void ()>>) -> () loc(#loc23)
    cir.return loc(#loc20)
  } loc(#loc59)
  cir.func private @CWE190_Integer_Overflow__int_fscanf_multiply_64b_goodG2BSink(!cir.ptr<!void>) loc(#loc62)
  cir.func no_proto internal private @goodG2B() extra(#fn_attr) {
    %0 = cir.alloca !s32i, !cir.ptr<!s32i>, ["data"] {alignment = 4 : i64} loc(#loc64)
    %1 = cir.const #cir.int<0> : !s32i loc(#loc31)
    cir.store %1, %0 : !s32i, !cir.ptr<!s32i> loc(#loc65)
    %2 = cir.const #cir.int<2> : !s32i loc(#loc33)
    cir.store %2, %0 : !s32i, !cir.ptr<!s32i> loc(#loc66)
    %3 = cir.cast(bitcast, %0 : !cir.ptr<!s32i>), !cir.ptr<!void> loc(#loc67)
    cir.call @CWE190_Integer_Overflow__int_fscanf_multiply_64b_goodG2BSink(%3) : (!cir.ptr<!void>) -> () loc(#loc37)
    cir.return loc(#loc28)
  } loc(#loc63)
  cir.func private @CWE190_Integer_Overflow__int_fscanf_multiply_64b_goodB2GSink(!cir.ptr<!void>) loc(#loc68)
  cir.func no_proto internal private @goodB2G() extra(#fn_attr) {
    %0 = cir.alloca !s32i, !cir.ptr<!s32i>, ["data"] {alignment = 4 : i64} loc(#loc70)
    %1 = cir.const #cir.int<0> : !s32i loc(#loc44)
    cir.store %1, %0 : !s32i, !cir.ptr<!s32i> loc(#loc71)
    %2 = cir.get_global @__isoc99_fscanf : !cir.ptr<!cir.func<!s32i (!cir.ptr<!ty__IO_FILE>, !cir.ptr<!s8i>, ...)>> loc(#loc46)
    %3 = cir.get_global @stdin : !cir.ptr<!cir.ptr<!ty__IO_FILE>> loc(#loc53)
    %4 = cir.load %3 : !cir.ptr<!cir.ptr<!ty__IO_FILE>>, !cir.ptr<!ty__IO_FILE> loc(#loc47)
    %5 = cir.get_global @".str" : !cir.ptr<!cir.array<!s8i x 3>> loc(#loc48)
    %6 = cir.cast(array_to_ptrdecay, %5 : !cir.ptr<!cir.array<!s8i x 3>>), !cir.ptr<!s8i> loc(#loc48)
    %7 = cir.call @__isoc99_fscanf(%4, %6, %0) : (!cir.ptr<!ty__IO_FILE>, !cir.ptr<!s8i>, !cir.ptr<!s32i>) -> !s32i loc(#loc46)
    %8 = cir.cast(bitcast, %0 : !cir.ptr<!s32i>), !cir.ptr<!void> loc(#loc72)
    cir.call @CWE190_Integer_Overflow__int_fscanf_multiply_64b_goodB2GSink(%8) : (!cir.ptr<!void>) -> () loc(#loc51)
    cir.return loc(#loc41)
  } loc(#loc69)
} loc(#loc)
#loc = loc("/home/ladisgin/git_proj/juliet-c/testcases/CWE190_Integer_Overflow/s03/CWE190_Integer_Overflow__int_fscanf_multiply_64a.c":0:0)
#loc1 = loc("/usr/include/stdio.h":463:1)
#loc2 = loc("/usr/include/stdio.h":465:33)
#loc3 = loc("/usr/include/stdio.h":149:1)
#loc4 = loc("/usr/include/stdio.h":149:14)
#loc5 = loc("CWE190_Integer_Overflow__int_fscanf_multiply_64a.c":31:19)
#loc6 = loc("CWE190_Integer_Overflow__int_fscanf_multiply_64a.c":23:1)
#loc7 = loc("CWE190_Integer_Overflow__int_fscanf_multiply_64a.c":23:81)
#loc8 = loc("CWE190_Integer_Overflow__int_fscanf_multiply_64a.c":25:1)
#loc9 = loc("CWE190_Integer_Overflow__int_fscanf_multiply_64a.c":33:1)
#loc10 = loc("CWE190_Integer_Overflow__int_fscanf_multiply_64a.c":27:5)
#loc11 = loc("CWE190_Integer_Overflow__int_fscanf_multiply_64a.c":27:9)
#loc12 = loc("CWE190_Integer_Overflow__int_fscanf_multiply_64a.c":29:12)
#loc13 = loc("CWE190_Integer_Overflow__int_fscanf_multiply_64a.c":29:5)
#loc14 = loc("CWE190_Integer_Overflow__int_fscanf_multiply_64a.c":31:5)
#loc15 = loc("CWE190_Integer_Overflow__int_fscanf_multiply_64a.c":31:12)
#loc16 = loc("CWE190_Integer_Overflow__int_fscanf_multiply_64a.c":32:62)
#loc17 = loc("CWE190_Integer_Overflow__int_fscanf_multiply_64a.c":32:63)
#loc18 = loc("CWE190_Integer_Overflow__int_fscanf_multiply_64a.c":32:5)
#loc19 = loc("CWE190_Integer_Overflow__int_fscanf_multiply_64a.c":65:1)
#loc20 = loc("CWE190_Integer_Overflow__int_fscanf_multiply_64a.c":69:1)
#loc21 = loc("CWE190_Integer_Overflow__int_fscanf_multiply_64a.c":67:5)
#loc22 = loc("CWE190_Integer_Overflow__int_fscanf_multiply_64a.c":67:13)
#loc23 = loc("CWE190_Integer_Overflow__int_fscanf_multiply_64a.c":68:5)
#loc24 = loc("CWE190_Integer_Overflow__int_fscanf_multiply_64a.c":68:13)
#loc25 = loc("CWE190_Integer_Overflow__int_fscanf_multiply_64a.c":40:1)
#loc26 = loc("CWE190_Integer_Overflow__int_fscanf_multiply_64a.c":40:85)
#loc27 = loc("CWE190_Integer_Overflow__int_fscanf_multiply_64a.c":42:1)
#loc28 = loc("CWE190_Integer_Overflow__int_fscanf_multiply_64a.c":50:1)
#loc29 = loc("CWE190_Integer_Overflow__int_fscanf_multiply_64a.c":44:5)
#loc30 = loc("CWE190_Integer_Overflow__int_fscanf_multiply_64a.c":44:9)
#loc31 = loc("CWE190_Integer_Overflow__int_fscanf_multiply_64a.c":46:12)
#loc32 = loc("CWE190_Integer_Overflow__int_fscanf_multiply_64a.c":46:5)
#loc33 = loc("CWE190_Integer_Overflow__int_fscanf_multiply_64a.c":48:12)
#loc34 = loc("CWE190_Integer_Overflow__int_fscanf_multiply_64a.c":48:5)
#loc35 = loc("CWE190_Integer_Overflow__int_fscanf_multiply_64a.c":49:66)
#loc36 = loc("CWE190_Integer_Overflow__int_fscanf_multiply_64a.c":49:67)
#loc37 = loc("CWE190_Integer_Overflow__int_fscanf_multiply_64a.c":49:5)
#loc38 = loc("CWE190_Integer_Overflow__int_fscanf_multiply_64a.c":53:1)
#loc39 = loc("CWE190_Integer_Overflow__int_fscanf_multiply_64a.c":53:85)
#loc40 = loc("CWE190_Integer_Overflow__int_fscanf_multiply_64a.c":55:1)
#loc41 = loc("CWE190_Integer_Overflow__int_fscanf_multiply_64a.c":63:1)
#loc42 = loc("CWE190_Integer_Overflow__int_fscanf_multiply_64a.c":57:5)
#loc43 = loc("CWE190_Integer_Overflow__int_fscanf_multiply_64a.c":57:9)
#loc44 = loc("CWE190_Integer_Overflow__int_fscanf_multiply_64a.c":59:12)
#loc45 = loc("CWE190_Integer_Overflow__int_fscanf_multiply_64a.c":59:5)
#loc46 = loc("CWE190_Integer_Overflow__int_fscanf_multiply_64a.c":61:5)
#loc47 = loc("CWE190_Integer_Overflow__int_fscanf_multiply_64a.c":61:12)
#loc48 = loc("CWE190_Integer_Overflow__int_fscanf_multiply_64a.c":61:19)
#loc49 = loc("CWE190_Integer_Overflow__int_fscanf_multiply_64a.c":62:66)
#loc50 = loc("CWE190_Integer_Overflow__int_fscanf_multiply_64a.c":62:67)
#loc51 = loc("CWE190_Integer_Overflow__int_fscanf_multiply_64a.c":62:5)
#loc52 = loc(fused[#loc1, #loc2])
#loc53 = loc(fused[#loc3, #loc4])
#loc54 = loc(fused[#loc6, #loc7])
#loc55 = loc(fused[#loc8, #loc9])
#loc56 = loc(fused[#loc10, #loc11])
#loc57 = loc(fused[#loc13, #loc12])
#loc58 = loc(fused[#loc16, #loc17])
#loc59 = loc(fused[#loc19, #loc20])
#loc60 = loc(fused[#loc21, #loc22])
#loc61 = loc(fused[#loc23, #loc24])
#loc62 = loc(fused[#loc25, #loc26])
#loc63 = loc(fused[#loc27, #loc28])
#loc64 = loc(fused[#loc29, #loc30])
#loc65 = loc(fused[#loc32, #loc31])
#loc66 = loc(fused[#loc34, #loc33])
#loc67 = loc(fused[#loc35, #loc36])
#loc68 = loc(fused[#loc38, #loc39])
#loc69 = loc(fused[#loc40, #loc41])
#loc70 = loc(fused[#loc42, #loc43])
#loc71 = loc(fused[#loc45, #loc44])
#loc72 = loc(fused[#loc49, #loc50])
