!s32i = !cir.int<s, 32>
!s64i = !cir.int<s, 64>
!s8i = !cir.int<s, 8>
!ty__IO_codecvt = !cir.struct<struct "_IO_codecvt" incomplete>
!ty__IO_marker = !cir.struct<struct "_IO_marker" incomplete>
!ty__IO_wide_data = !cir.struct<struct "_IO_wide_data" incomplete>
!u16i = !cir.int<u, 16>
!u64i = !cir.int<u, 64>
!void = !cir.void
#fn_attr = #cir<extra({nothrow = #cir.nothrow})>
#fn_attr1 = #cir<extra({inline = #cir.inline<no>, nothrow = #cir.nothrow, optnone = #cir.optnone})>
!ty__IO_FILE = !cir.struct<struct "_IO_FILE" {!s32i, !cir.ptr<!s8i>, !cir.ptr<!s8i>, !cir.ptr<!s8i>, !cir.ptr<!s8i>, !cir.ptr<!s8i>, !cir.ptr<!s8i>, !cir.ptr<!s8i>, !cir.ptr<!s8i>, !cir.ptr<!s8i>, !cir.ptr<!s8i>, !cir.ptr<!s8i>, !cir.ptr<!ty__IO_marker>, !cir.ptr<!cir.struct<struct "_IO_FILE">>, !s32i, !s32i, !s64i, !u16i, !s8i, !cir.array<!s8i x 1>, !cir.ptr<!void>, !s64i, !cir.ptr<!ty__IO_codecvt>, !cir.ptr<!ty__IO_wide_data>, !cir.ptr<!cir.struct<struct "_IO_FILE">>, !cir.ptr<!void>, !u64i, !s32i, !cir.array<!s8i x 20>} #cir.record.decl.ast>
module @"/home/ladisgin/git_proj/test_projects/juliet-c/testcases/CWE190_Integer_Overflow/s03/CWE190_Integer_Overflow__int_fgets_multiply_08.c" attributes {cir.lang = #cir.lang<c>, cir.sob = #cir.signed_overflow_behavior<undefined>, cir.triple = "x86_64-unknown-linux-gnu", dlti.dl_spec = #dlti.dl_spec<#dlti.dl_entry<!llvm.ptr, dense<64> : vector<4xi64>>, #dlti.dl_entry<i1, dense<8> : vector<2xi64>>, #dlti.dl_entry<f80, dense<128> : vector<2xi64>>, #dlti.dl_entry<i128, dense<128> : vector<2xi64>>, #dlti.dl_entry<i64, dense<64> : vector<2xi64>>, #dlti.dl_entry<!llvm.ptr<270>, dense<32> : vector<4xi64>>, #dlti.dl_entry<f16, dense<16> : vector<2xi64>>, #dlti.dl_entry<!llvm.ptr<272>, dense<64> : vector<4xi64>>, #dlti.dl_entry<!llvm.ptr<271>, dense<32> : vector<4xi64>>, #dlti.dl_entry<f64, dense<64> : vector<2xi64>>, #dlti.dl_entry<f128, dense<128> : vector<2xi64>>, #dlti.dl_entry<i32, dense<32> : vector<2xi64>>, #dlti.dl_entry<i8, dense<8> : vector<2xi64>>, #dlti.dl_entry<i16, dense<16> : vector<2xi64>>, #dlti.dl_entry<"dlti.stack_alignment", 128 : i64>, #dlti.dl_entry<"dlti.endianness", "little">>, llvm.data_layout = "e-m:e-p270:32:32-p271:32:32-p272:64:64-i64:64-i128:128-f80:128-n8:16:32:64-S128"} {
  cir.func private  @fgets(!cir.ptr<!s8i>, !s32i, !cir.ptr<!ty__IO_FILE>) -> !cir.ptr<!s8i> loc(#loc263)
  cir.global "private"  external @stdin : !cir.ptr<!ty__IO_FILE> {alignment = 8 : i64} loc(#loc264)
  cir.func private  @atoi(!cir.ptr<!s8i>) -> !s32i extra(#fn_attr) loc(#loc265)
  cir.func private  @printLine(!cir.ptr<!s8i>) loc(#loc266)
  cir.global "private"  constant internal dsolocal @".str" = #cir.const_array<"fgets() failed.\00" : !cir.array<!s8i x 16>> : !cir.array<!s8i x 16> {alignment = 1 : i64} loc(#loc9)
  cir.func private  @printIntLine(!s32i) loc(#loc267)
  cir.func no_proto  @CWE190_Integer_Overflow__int_fgets_multiply_08_bad() extra(#fn_attr1) {
    %0 = cir.alloca !s32i, !cir.ptr<!s32i>, ["data"] {alignment = 4 : i64} loc(#loc269)
    %1 = cir.const #cir.int<0> : !s32i loc(#loc16)
    cir.store %1, %0 : !s32i, !cir.ptr<!s32i> loc(#loc270)
    cir.scope {
      %2 = cir.get_global @staticReturnsTrue : !cir.ptr<!cir.func<!s32i ()>> loc(#loc272)
      %3 = cir.call %2() : (!cir.ptr<!cir.func<!s32i ()>>) -> !s32i loc(#loc20)
      %4 = cir.cast(int_to_bool, %3 : !s32i), !cir.bool loc(#loc20)
      cir.if %4 {
        cir.scope {
          %5 = cir.alloca !cir.array<!s8i x 14>, !cir.ptr<!cir.array<!s8i x 14>>, ["inputBuffer"] {alignment = 1 : i64} loc(#loc275)
          %6 = cir.const #cir.zero : !cir.array<!s8i x 14> loc(#loc275)
          cir.store %6, %5 : !cir.array<!s8i x 14>, !cir.ptr<!cir.array<!s8i x 14>> loc(#loc275)
          cir.scope {
            %7 = cir.cast(array_to_ptrdecay, %5 : !cir.ptr<!cir.array<!s8i x 14>>), !cir.ptr<!s8i> loc(#loc29)
            %8 = cir.const #cir.int<3> : !s32i loc(#loc30)
            %9 = cir.cast(integral, %8 : !s32i), !u64i loc(#loc30)
            %10 = cir.const #cir.int<4> : !u64i loc(#loc30)
            %11 = cir.binop(mul, %9, %10) : !u64i loc(#loc30)
            %12 = cir.const #cir.int<2> : !s32i loc(#loc30)
            %13 = cir.cast(integral, %12 : !s32i), !u64i loc(#loc30)
            %14 = cir.binop(add, %11, %13) : !u64i loc(#loc30)
            %15 = cir.cast(integral, %14 : !u64i), !s32i loc(#loc30)
            %16 = cir.get_global @stdin : !cir.ptr<!cir.ptr<!ty__IO_FILE>> loc(#loc264)
            %17 = cir.load %16 : !cir.ptr<!cir.ptr<!ty__IO_FILE>>, !cir.ptr<!ty__IO_FILE> loc(#loc31)
            %18 = cir.call @fgets(%7, %15, %17) : (!cir.ptr<!s8i>, !s32i, !cir.ptr<!ty__IO_FILE>) -> !cir.ptr<!s8i> loc(#loc32)
            %19 = cir.const #cir.ptr<null> : !cir.ptr<!void> loc(#loc33)
            %20 = cir.cast(bitcast, %19 : !cir.ptr<!void>), !cir.ptr<!s8i> loc(#loc33)
            %21 = cir.cmp(ne, %18, %20) : !cir.ptr<!s8i>, !s32i loc(#loc277)
            %22 = cir.cast(int_to_bool, %21 : !s32i), !cir.bool loc(#loc34)
            cir.if %22 {
              %23 = cir.cast(array_to_ptrdecay, %5 : !cir.ptr<!cir.array<!s8i x 14>>), !cir.ptr<!s8i> loc(#loc38)
              %24 = cir.call @atoi(%23) : (!cir.ptr<!s8i>) -> !s32i extra(#fn_attr) loc(#loc39)
              cir.store %24, %0 : !s32i, !cir.ptr<!s32i> loc(#loc279)
            } else {
              %23 = cir.get_global @".str" : !cir.ptr<!cir.array<!s8i x 16>> loc(#loc9)
              %24 = cir.cast(array_to_ptrdecay, %23 : !cir.ptr<!cir.array<!s8i x 16>>), !cir.ptr<!s8i> loc(#loc9)
              cir.call @printLine(%24) : (!cir.ptr<!s8i>) -> () loc(#loc42)
            } loc(#loc278)
          } loc(#loc276)
        } loc(#loc274)
      } loc(#loc273)
    } loc(#loc271)
    cir.scope {
      %2 = cir.get_global @staticReturnsTrue : !cir.ptr<!cir.func<!s32i ()>> loc(#loc281)
      %3 = cir.call %2() : (!cir.ptr<!cir.func<!s32i ()>>) -> !s32i loc(#loc45)
      %4 = cir.cast(int_to_bool, %3 : !s32i), !cir.bool loc(#loc45)
      cir.if %4 {
        cir.scope {
          %5 = cir.load %0 : !cir.ptr<!s32i>, !s32i loc(#loc50)
          %6 = cir.const #cir.int<0> : !s32i loc(#loc51)
          %7 = cir.cmp(gt, %5, %6) : !s32i, !s32i loc(#loc284)
          %8 = cir.cast(int_to_bool, %7 : !s32i), !cir.bool loc(#loc52)
          cir.if %8 {
            %9 = cir.alloca !s32i, !cir.ptr<!s32i>, ["result", init] {alignment = 4 : i64} loc(#loc286)
            %10 = cir.load %0 : !cir.ptr<!s32i>, !s32i loc(#loc56)
            %11 = cir.const #cir.int<2> : !s32i loc(#loc55)
            %12 = cir.binop(mul, %10, %11) nsw : !s32i loc(#loc56)
            cir.store %12, %9 : !s32i, !cir.ptr<!s32i> loc(#loc286)
            %13 = cir.load %9 : !cir.ptr<!s32i>, !s32i loc(#loc57)
            cir.call @printIntLine(%13) : (!s32i) -> () loc(#loc58)
          } loc(#loc285)
        } loc(#loc283)
      } loc(#loc282)
    } loc(#loc280)
    cir.return loc(#loc13)
  } loc(#loc268)
  cir.func no_proto  @CWE190_Integer_Overflow__int_fgets_multiply_08_good() extra(#fn_attr1) {
    %0 = cir.get_global @goodB2G1 : !cir.ptr<!cir.func<!void ()>> loc(#loc288)
    cir.call %0() : (!cir.ptr<!cir.func<!void ()>>) -> () loc(#loc61)
    %1 = cir.get_global @goodB2G2 : !cir.ptr<!cir.func<!void ()>> loc(#loc289)
    cir.call %1() : (!cir.ptr<!cir.func<!void ()>>) -> () loc(#loc63)
    %2 = cir.get_global @goodG2B1 : !cir.ptr<!cir.func<!void ()>> loc(#loc290)
    cir.call %2() : (!cir.ptr<!cir.func<!void ()>>) -> () loc(#loc65)
    %3 = cir.get_global @goodG2B2 : !cir.ptr<!cir.func<!void ()>> loc(#loc291)
    cir.call %3() : (!cir.ptr<!cir.func<!void ()>>) -> () loc(#loc67)
    cir.return loc(#loc60)
  } loc(#loc287)
  cir.func no_proto internal private  @staticReturnsTrue() -> !s32i extra(#fn_attr1) {
    %0 = cir.alloca !s32i, !cir.ptr<!s32i>, ["__retval"] {alignment = 4 : i64} loc(#loc70)
    %1 = cir.const #cir.int<1> : !s32i loc(#loc71)
    cir.store %1, %0 : !s32i, !cir.ptr<!s32i> loc(#loc293)
    %2 = cir.load %0 : !cir.ptr<!s32i>, !s32i loc(#loc293)
    cir.return %2 : !s32i loc(#loc293)
  } loc(#loc292)
  cir.global "private"  constant internal dsolocal @".str1" = #cir.const_array<"Benign, fixed string\00" : !cir.array<!s8i x 21>> : !cir.array<!s8i x 21> {alignment = 1 : i64} loc(#loc73)
  cir.global "private"  constant internal dsolocal @".str2" = #cir.const_array<"data value is too large to perform arithmetic safely.\00" : !cir.array<!s8i x 54>> : !cir.array<!s8i x 54> {alignment = 1 : i64} loc(#loc74)
  cir.func no_proto internal private  @goodB2G1() extra(#fn_attr1) {
    %0 = cir.alloca !s32i, !cir.ptr<!s32i>, ["data"] {alignment = 4 : i64} loc(#loc295)
    %1 = cir.const #cir.int<0> : !s32i loc(#loc79)
    cir.store %1, %0 : !s32i, !cir.ptr<!s32i> loc(#loc296)
    cir.scope {
      %2 = cir.get_global @staticReturnsTrue : !cir.ptr<!cir.func<!s32i ()>> loc(#loc298)
      %3 = cir.call @staticReturnsTrue() : () -> !s32i loc(#loc83)
      %4 = cir.cast(int_to_bool, %3 : !s32i), !cir.bool loc(#loc83)
      cir.if %4 {
        cir.scope {
          %5 = cir.alloca !cir.array<!s8i x 14>, !cir.ptr<!cir.array<!s8i x 14>>, ["inputBuffer"] {alignment = 1 : i64} loc(#loc301)
          %6 = cir.const #cir.zero : !cir.array<!s8i x 14> loc(#loc301)
          cir.store %6, %5 : !cir.array<!s8i x 14>, !cir.ptr<!cir.array<!s8i x 14>> loc(#loc301)
          cir.scope {
            %7 = cir.cast(array_to_ptrdecay, %5 : !cir.ptr<!cir.array<!s8i x 14>>), !cir.ptr<!s8i> loc(#loc92)
            %8 = cir.const #cir.int<3> : !s32i loc(#loc93)
            %9 = cir.cast(integral, %8 : !s32i), !u64i loc(#loc93)
            %10 = cir.const #cir.int<4> : !u64i loc(#loc93)
            %11 = cir.binop(mul, %9, %10) : !u64i loc(#loc93)
            %12 = cir.const #cir.int<2> : !s32i loc(#loc93)
            %13 = cir.cast(integral, %12 : !s32i), !u64i loc(#loc93)
            %14 = cir.binop(add, %11, %13) : !u64i loc(#loc93)
            %15 = cir.cast(integral, %14 : !u64i), !s32i loc(#loc93)
            %16 = cir.get_global @stdin : !cir.ptr<!cir.ptr<!ty__IO_FILE>> loc(#loc264)
            %17 = cir.load %16 : !cir.ptr<!cir.ptr<!ty__IO_FILE>>, !cir.ptr<!ty__IO_FILE> loc(#loc94)
            %18 = cir.call @fgets(%7, %15, %17) : (!cir.ptr<!s8i>, !s32i, !cir.ptr<!ty__IO_FILE>) -> !cir.ptr<!s8i> loc(#loc95)
            %19 = cir.const #cir.ptr<null> : !cir.ptr<!void> loc(#loc96)
            %20 = cir.cast(bitcast, %19 : !cir.ptr<!void>), !cir.ptr<!s8i> loc(#loc96)
            %21 = cir.cmp(ne, %18, %20) : !cir.ptr<!s8i>, !s32i loc(#loc303)
            %22 = cir.cast(int_to_bool, %21 : !s32i), !cir.bool loc(#loc97)
            cir.if %22 {
              %23 = cir.cast(array_to_ptrdecay, %5 : !cir.ptr<!cir.array<!s8i x 14>>), !cir.ptr<!s8i> loc(#loc101)
              %24 = cir.call @atoi(%23) : (!cir.ptr<!s8i>) -> !s32i extra(#fn_attr) loc(#loc102)
              cir.store %24, %0 : !s32i, !cir.ptr<!s32i> loc(#loc305)
            } else {
              %23 = cir.get_global @".str" : !cir.ptr<!cir.array<!s8i x 16>> loc(#loc105)
              %24 = cir.cast(array_to_ptrdecay, %23 : !cir.ptr<!cir.array<!s8i x 16>>), !cir.ptr<!s8i> loc(#loc105)
              cir.call @printLine(%24) : (!cir.ptr<!s8i>) -> () loc(#loc106)
            } loc(#loc304)
          } loc(#loc302)
        } loc(#loc300)
      } loc(#loc299)
    } loc(#loc297)
    cir.scope {
      %2 = cir.get_global @staticReturnsFalse : !cir.ptr<!cir.func<!s32i ()>> loc(#loc307)
      %3 = cir.call %2() : (!cir.ptr<!cir.func<!s32i ()>>) -> !s32i loc(#loc109)
      %4 = cir.cast(int_to_bool, %3 : !s32i), !cir.bool loc(#loc109)
      cir.if %4 {
        %5 = cir.get_global @".str1" : !cir.ptr<!cir.array<!s8i x 21>> loc(#loc73)
        %6 = cir.cast(array_to_ptrdecay, %5 : !cir.ptr<!cir.array<!s8i x 21>>), !cir.ptr<!s8i> loc(#loc73)
        cir.call @printLine(%6) : (!cir.ptr<!s8i>) -> () loc(#loc114)
      } else {
        cir.scope {
          %5 = cir.load %0 : !cir.ptr<!s32i>, !s32i loc(#loc117)
          %6 = cir.const #cir.int<0> : !s32i loc(#loc118)
          %7 = cir.cmp(gt, %5, %6) : !s32i, !s32i loc(#loc310)
          %8 = cir.cast(int_to_bool, %7 : !s32i), !cir.bool loc(#loc119)
          cir.if %8 {
            cir.scope {
              %9 = cir.load %0 : !cir.ptr<!s32i>, !s32i loc(#loc123)
              %10 = cir.const #cir.int<2147483647> : !s32i loc(#loc124)
              %11 = cir.const #cir.int<2> : !s32i loc(#loc125)
              %12 = cir.binop(div, %10, %11) : !s32i loc(#loc313)
              %13 = cir.cmp(lt, %9, %12) : !s32i, !s32i loc(#loc314)
              %14 = cir.cast(int_to_bool, %13 : !s32i), !cir.bool loc(#loc127)
              cir.if %14 {
                %15 = cir.alloca !s32i, !cir.ptr<!s32i>, ["result", init] {alignment = 4 : i64} loc(#loc316)
                %16 = cir.load %0 : !cir.ptr<!s32i>, !s32i loc(#loc133)
                %17 = cir.const #cir.int<2> : !s32i loc(#loc132)
                %18 = cir.binop(mul, %16, %17) nsw : !s32i loc(#loc133)
                cir.store %18, %15 : !s32i, !cir.ptr<!s32i> loc(#loc316)
                %19 = cir.load %15 : !cir.ptr<!s32i>, !s32i loc(#loc134)
                cir.call @printIntLine(%19) : (!s32i) -> () loc(#loc135)
              } else {
                %15 = cir.get_global @".str2" : !cir.ptr<!cir.array<!s8i x 54>> loc(#loc74)
                %16 = cir.cast(array_to_ptrdecay, %15 : !cir.ptr<!cir.array<!s8i x 54>>), !cir.ptr<!s8i> loc(#loc74)
                cir.call @printLine(%16) : (!cir.ptr<!s8i>) -> () loc(#loc136)
              } loc(#loc315)
            } loc(#loc312)
          } loc(#loc311)
        } loc(#loc309)
      } loc(#loc308)
    } loc(#loc306)
    cir.return loc(#loc76)
  } loc(#loc294)
  cir.func no_proto internal private  @staticReturnsFalse() -> !s32i extra(#fn_attr1) {
    %0 = cir.alloca !s32i, !cir.ptr<!s32i>, ["__retval"] {alignment = 4 : i64} loc(#loc138)
    %1 = cir.const #cir.int<0> : !s32i loc(#loc139)
    cir.store %1, %0 : !s32i, !cir.ptr<!s32i> loc(#loc318)
    %2 = cir.load %0 : !cir.ptr<!s32i>, !s32i loc(#loc318)
    cir.return %2 : !s32i loc(#loc318)
  } loc(#loc317)
  cir.func no_proto internal private  @goodB2G2() extra(#fn_attr1) {
    %0 = cir.alloca !s32i, !cir.ptr<!s32i>, ["data"] {alignment = 4 : i64} loc(#loc320)
    %1 = cir.const #cir.int<0> : !s32i loc(#loc145)
    cir.store %1, %0 : !s32i, !cir.ptr<!s32i> loc(#loc321)
    cir.scope {
      %2 = cir.get_global @staticReturnsTrue : !cir.ptr<!cir.func<!s32i ()>> loc(#loc323)
      %3 = cir.call @staticReturnsTrue() : () -> !s32i loc(#loc149)
      %4 = cir.cast(int_to_bool, %3 : !s32i), !cir.bool loc(#loc149)
      cir.if %4 {
        cir.scope {
          %5 = cir.alloca !cir.array<!s8i x 14>, !cir.ptr<!cir.array<!s8i x 14>>, ["inputBuffer"] {alignment = 1 : i64} loc(#loc326)
          %6 = cir.const #cir.zero : !cir.array<!s8i x 14> loc(#loc326)
          cir.store %6, %5 : !cir.array<!s8i x 14>, !cir.ptr<!cir.array<!s8i x 14>> loc(#loc326)
          cir.scope {
            %7 = cir.cast(array_to_ptrdecay, %5 : !cir.ptr<!cir.array<!s8i x 14>>), !cir.ptr<!s8i> loc(#loc158)
            %8 = cir.const #cir.int<3> : !s32i loc(#loc159)
            %9 = cir.cast(integral, %8 : !s32i), !u64i loc(#loc159)
            %10 = cir.const #cir.int<4> : !u64i loc(#loc159)
            %11 = cir.binop(mul, %9, %10) : !u64i loc(#loc159)
            %12 = cir.const #cir.int<2> : !s32i loc(#loc159)
            %13 = cir.cast(integral, %12 : !s32i), !u64i loc(#loc159)
            %14 = cir.binop(add, %11, %13) : !u64i loc(#loc159)
            %15 = cir.cast(integral, %14 : !u64i), !s32i loc(#loc159)
            %16 = cir.get_global @stdin : !cir.ptr<!cir.ptr<!ty__IO_FILE>> loc(#loc264)
            %17 = cir.load %16 : !cir.ptr<!cir.ptr<!ty__IO_FILE>>, !cir.ptr<!ty__IO_FILE> loc(#loc160)
            %18 = cir.call @fgets(%7, %15, %17) : (!cir.ptr<!s8i>, !s32i, !cir.ptr<!ty__IO_FILE>) -> !cir.ptr<!s8i> loc(#loc161)
            %19 = cir.const #cir.ptr<null> : !cir.ptr<!void> loc(#loc162)
            %20 = cir.cast(bitcast, %19 : !cir.ptr<!void>), !cir.ptr<!s8i> loc(#loc162)
            %21 = cir.cmp(ne, %18, %20) : !cir.ptr<!s8i>, !s32i loc(#loc328)
            %22 = cir.cast(int_to_bool, %21 : !s32i), !cir.bool loc(#loc163)
            cir.if %22 {
              %23 = cir.cast(array_to_ptrdecay, %5 : !cir.ptr<!cir.array<!s8i x 14>>), !cir.ptr<!s8i> loc(#loc167)
              %24 = cir.call @atoi(%23) : (!cir.ptr<!s8i>) -> !s32i extra(#fn_attr) loc(#loc168)
              cir.store %24, %0 : !s32i, !cir.ptr<!s32i> loc(#loc330)
            } else {
              %23 = cir.get_global @".str" : !cir.ptr<!cir.array<!s8i x 16>> loc(#loc171)
              %24 = cir.cast(array_to_ptrdecay, %23 : !cir.ptr<!cir.array<!s8i x 16>>), !cir.ptr<!s8i> loc(#loc171)
              cir.call @printLine(%24) : (!cir.ptr<!s8i>) -> () loc(#loc172)
            } loc(#loc329)
          } loc(#loc327)
        } loc(#loc325)
      } loc(#loc324)
    } loc(#loc322)
    cir.scope {
      %2 = cir.get_global @staticReturnsTrue : !cir.ptr<!cir.func<!s32i ()>> loc(#loc332)
      %3 = cir.call @staticReturnsTrue() : () -> !s32i loc(#loc175)
      %4 = cir.cast(int_to_bool, %3 : !s32i), !cir.bool loc(#loc175)
      cir.if %4 {
        cir.scope {
          %5 = cir.load %0 : !cir.ptr<!s32i>, !s32i loc(#loc180)
          %6 = cir.const #cir.int<0> : !s32i loc(#loc181)
          %7 = cir.cmp(gt, %5, %6) : !s32i, !s32i loc(#loc335)
          %8 = cir.cast(int_to_bool, %7 : !s32i), !cir.bool loc(#loc182)
          cir.if %8 {
            cir.scope {
              %9 = cir.load %0 : !cir.ptr<!s32i>, !s32i loc(#loc186)
              %10 = cir.const #cir.int<2147483647> : !s32i loc(#loc187)
              %11 = cir.const #cir.int<2> : !s32i loc(#loc188)
              %12 = cir.binop(div, %10, %11) : !s32i loc(#loc338)
              %13 = cir.cmp(lt, %9, %12) : !s32i, !s32i loc(#loc339)
              %14 = cir.cast(int_to_bool, %13 : !s32i), !cir.bool loc(#loc190)
              cir.if %14 {
                %15 = cir.alloca !s32i, !cir.ptr<!s32i>, ["result", init] {alignment = 4 : i64} loc(#loc341)
                %16 = cir.load %0 : !cir.ptr<!s32i>, !s32i loc(#loc196)
                %17 = cir.const #cir.int<2> : !s32i loc(#loc195)
                %18 = cir.binop(mul, %16, %17) nsw : !s32i loc(#loc196)
                cir.store %18, %15 : !s32i, !cir.ptr<!s32i> loc(#loc341)
                %19 = cir.load %15 : !cir.ptr<!s32i>, !s32i loc(#loc197)
                cir.call @printIntLine(%19) : (!s32i) -> () loc(#loc198)
              } else {
                %15 = cir.get_global @".str2" : !cir.ptr<!cir.array<!s8i x 54>> loc(#loc199)
                %16 = cir.cast(array_to_ptrdecay, %15 : !cir.ptr<!cir.array<!s8i x 54>>), !cir.ptr<!s8i> loc(#loc199)
                cir.call @printLine(%16) : (!cir.ptr<!s8i>) -> () loc(#loc200)
              } loc(#loc340)
            } loc(#loc337)
          } loc(#loc336)
        } loc(#loc334)
      } loc(#loc333)
    } loc(#loc331)
    cir.return loc(#loc142)
  } loc(#loc319)
  cir.func no_proto internal private  @goodG2B1() extra(#fn_attr1) {
    %0 = cir.alloca !s32i, !cir.ptr<!s32i>, ["data"] {alignment = 4 : i64} loc(#loc343)
    %1 = cir.const #cir.int<0> : !s32i loc(#loc205)
    cir.store %1, %0 : !s32i, !cir.ptr<!s32i> loc(#loc344)
    cir.scope {
      %2 = cir.get_global @staticReturnsFalse : !cir.ptr<!cir.func<!s32i ()>> loc(#loc346)
      %3 = cir.call @staticReturnsFalse() : () -> !s32i loc(#loc209)
      %4 = cir.cast(int_to_bool, %3 : !s32i), !cir.bool loc(#loc209)
      cir.if %4 {
        %5 = cir.get_global @".str1" : !cir.ptr<!cir.array<!s8i x 21>> loc(#loc214)
        %6 = cir.cast(array_to_ptrdecay, %5 : !cir.ptr<!cir.array<!s8i x 21>>), !cir.ptr<!s8i> loc(#loc214)
        cir.call @printLine(%6) : (!cir.ptr<!s8i>) -> () loc(#loc215)
      } else {
        %5 = cir.const #cir.int<2> : !s32i loc(#loc216)
        cir.store %5, %0 : !s32i, !cir.ptr<!s32i> loc(#loc348)
      } loc(#loc347)
    } loc(#loc345)
    cir.scope {
      %2 = cir.get_global @staticReturnsTrue : !cir.ptr<!cir.func<!s32i ()>> loc(#loc350)
      %3 = cir.call @staticReturnsTrue() : () -> !s32i loc(#loc220)
      %4 = cir.cast(int_to_bool, %3 : !s32i), !cir.bool loc(#loc220)
      cir.if %4 {
        cir.scope {
          %5 = cir.load %0 : !cir.ptr<!s32i>, !s32i loc(#loc225)
          %6 = cir.const #cir.int<0> : !s32i loc(#loc226)
          %7 = cir.cmp(gt, %5, %6) : !s32i, !s32i loc(#loc353)
          %8 = cir.cast(int_to_bool, %7 : !s32i), !cir.bool loc(#loc227)
          cir.if %8 {
            %9 = cir.alloca !s32i, !cir.ptr<!s32i>, ["result", init] {alignment = 4 : i64} loc(#loc355)
            %10 = cir.load %0 : !cir.ptr<!s32i>, !s32i loc(#loc231)
            %11 = cir.const #cir.int<2> : !s32i loc(#loc230)
            %12 = cir.binop(mul, %10, %11) nsw : !s32i loc(#loc231)
            cir.store %12, %9 : !s32i, !cir.ptr<!s32i> loc(#loc355)
            %13 = cir.load %9 : !cir.ptr<!s32i>, !s32i loc(#loc232)
            cir.call @printIntLine(%13) : (!s32i) -> () loc(#loc233)
          } loc(#loc354)
        } loc(#loc352)
      } loc(#loc351)
    } loc(#loc349)
    cir.return loc(#loc202)
  } loc(#loc342)
  cir.func no_proto internal private  @goodG2B2() extra(#fn_attr1) {
    %0 = cir.alloca !s32i, !cir.ptr<!s32i>, ["data"] {alignment = 4 : i64} loc(#loc357)
    %1 = cir.const #cir.int<0> : !s32i loc(#loc238)
    cir.store %1, %0 : !s32i, !cir.ptr<!s32i> loc(#loc358)
    cir.scope {
      %2 = cir.get_global @staticReturnsTrue : !cir.ptr<!cir.func<!s32i ()>> loc(#loc360)
      %3 = cir.call @staticReturnsTrue() : () -> !s32i loc(#loc242)
      %4 = cir.cast(int_to_bool, %3 : !s32i), !cir.bool loc(#loc242)
      cir.if %4 {
        %5 = cir.const #cir.int<2> : !s32i loc(#loc245)
        cir.store %5, %0 : !s32i, !cir.ptr<!s32i> loc(#loc362)
      } loc(#loc361)
    } loc(#loc359)
    cir.scope {
      %2 = cir.get_global @staticReturnsTrue : !cir.ptr<!cir.func<!s32i ()>> loc(#loc364)
      %3 = cir.call @staticReturnsTrue() : () -> !s32i loc(#loc249)
      %4 = cir.cast(int_to_bool, %3 : !s32i), !cir.bool loc(#loc249)
      cir.if %4 {
        cir.scope {
          %5 = cir.load %0 : !cir.ptr<!s32i>, !s32i loc(#loc254)
          %6 = cir.const #cir.int<0> : !s32i loc(#loc255)
          %7 = cir.cmp(gt, %5, %6) : !s32i, !s32i loc(#loc367)
          %8 = cir.cast(int_to_bool, %7 : !s32i), !cir.bool loc(#loc256)
          cir.if %8 {
            %9 = cir.alloca !s32i, !cir.ptr<!s32i>, ["result", init] {alignment = 4 : i64} loc(#loc369)
            %10 = cir.load %0 : !cir.ptr<!s32i>, !s32i loc(#loc260)
            %11 = cir.const #cir.int<2> : !s32i loc(#loc259)
            %12 = cir.binop(mul, %10, %11) nsw : !s32i loc(#loc260)
            cir.store %12, %9 : !s32i, !cir.ptr<!s32i> loc(#loc369)
            %13 = cir.load %9 : !cir.ptr<!s32i>, !s32i loc(#loc261)
            cir.call @printIntLine(%13) : (!s32i) -> () loc(#loc262)
          } loc(#loc368)
        } loc(#loc366)
      } loc(#loc365)
    } loc(#loc363)
    cir.return loc(#loc235)
  } loc(#loc356)
} loc(#loc)
#loc = loc("/home/ladisgin/git_proj/test_projects/juliet-c/testcases/CWE190_Integer_Overflow/s03/CWE190_Integer_Overflow__int_fgets_multiply_08.c":0:0)
#loc1 = loc("/usr/include/stdio.h":654:1)
#loc2 = loc("/usr/include/stdio.h":655:59)
#loc3 = loc("/usr/include/stdio.h":149:1)
#loc4 = loc("/usr/include/stdio.h":149:14)
#loc5 = loc("/usr/include/stdlib.h":105:1)
#loc6 = loc("/usr/include/stdlib.h":106:33)
#loc7 = loc("../../../testcasesupport/std_testcase_io.h":14:1)
#loc8 = loc("../../../testcasesupport/std_testcase_io.h":14:33)
#loc9 = loc("CWE190_Integer_Overflow__int_fgets_multiply_08.c":54:27)
#loc10 = loc("../../../testcasesupport/std_testcase_io.h":18:1)
#loc11 = loc("../../../testcasesupport/std_testcase_io.h":18:33)
#loc12 = loc("CWE190_Integer_Overflow__int_fgets_multiply_08.c":37:1)
#loc13 = loc("CWE190_Integer_Overflow__int_fgets_multiply_08.c":67:1)
#loc14 = loc("CWE190_Integer_Overflow__int_fgets_multiply_08.c":39:5)
#loc15 = loc("CWE190_Integer_Overflow__int_fgets_multiply_08.c":39:9)
#loc16 = loc("CWE190_Integer_Overflow__int_fgets_multiply_08.c":41:12)
#loc17 = loc("CWE190_Integer_Overflow__int_fgets_multiply_08.c":41:5)
#loc18 = loc("CWE190_Integer_Overflow__int_fgets_multiply_08.c":42:5)
#loc19 = loc("CWE190_Integer_Overflow__int_fgets_multiply_08.c":57:5)
#loc20 = loc("CWE190_Integer_Overflow__int_fgets_multiply_08.c":42:8)
#loc21 = loc("CWE190_Integer_Overflow__int_fgets_multiply_08.c":42:26)
#loc22 = loc("CWE190_Integer_Overflow__int_fgets_multiply_08.c":43:5)
#loc23 = loc("CWE190_Integer_Overflow__int_fgets_multiply_08.c":44:9)
#loc24 = loc("CWE190_Integer_Overflow__int_fgets_multiply_08.c":56:9)
#loc25 = loc("CWE190_Integer_Overflow__int_fgets_multiply_08.c":45:13)
#loc26 = loc("CWE190_Integer_Overflow__int_fgets_multiply_08.c":45:49)
#loc27 = loc("CWE190_Integer_Overflow__int_fgets_multiply_08.c":47:13)
#loc28 = loc("CWE190_Integer_Overflow__int_fgets_multiply_08.c":55:13)
#loc29 = loc("CWE190_Integer_Overflow__int_fgets_multiply_08.c":47:23)
#loc30 = loc("CWE190_Integer_Overflow__int_fgets_multiply_08.c":47:36)
#loc31 = loc("CWE190_Integer_Overflow__int_fgets_multiply_08.c":47:53)
#loc32 = loc("CWE190_Integer_Overflow__int_fgets_multiply_08.c":47:17)
#loc33 = loc("CWE190_Integer_Overflow__int_fgets_multiply_08.c":47:63)
#loc34 = loc("CWE190_Integer_Overflow__int_fgets_multiply_08.c":47:60)
#loc35 = loc("CWE190_Integer_Overflow__int_fgets_multiply_08.c":48:13)
#loc36 = loc("CWE190_Integer_Overflow__int_fgets_multiply_08.c":51:13)
#loc37 = loc("CWE190_Integer_Overflow__int_fgets_multiply_08.c":53:13)
#loc38 = loc("CWE190_Integer_Overflow__int_fgets_multiply_08.c":50:29)
#loc39 = loc("CWE190_Integer_Overflow__int_fgets_multiply_08.c":50:24)
#loc40 = loc("CWE190_Integer_Overflow__int_fgets_multiply_08.c":50:17)
#loc41 = loc("CWE190_Integer_Overflow__int_fgets_multiply_08.c":50:40)
#loc42 = loc("CWE190_Integer_Overflow__int_fgets_multiply_08.c":54:17)
#loc43 = loc("CWE190_Integer_Overflow__int_fgets_multiply_08.c":58:5)
#loc44 = loc("CWE190_Integer_Overflow__int_fgets_multiply_08.c":66:5)
#loc45 = loc("CWE190_Integer_Overflow__int_fgets_multiply_08.c":58:8)
#loc46 = loc("CWE190_Integer_Overflow__int_fgets_multiply_08.c":58:26)
#loc47 = loc("CWE190_Integer_Overflow__int_fgets_multiply_08.c":59:5)
#loc48 = loc("CWE190_Integer_Overflow__int_fgets_multiply_08.c":60:9)
#loc49 = loc("CWE190_Integer_Overflow__int_fgets_multiply_08.c":65:9)
#loc50 = loc("CWE190_Integer_Overflow__int_fgets_multiply_08.c":60:12)
#loc51 = loc("CWE190_Integer_Overflow__int_fgets_multiply_08.c":60:19)
#loc52 = loc("CWE190_Integer_Overflow__int_fgets_multiply_08.c":60:17)
#loc53 = loc("CWE190_Integer_Overflow__int_fgets_multiply_08.c":61:9)
#loc54 = loc("CWE190_Integer_Overflow__int_fgets_multiply_08.c":63:13)
#loc55 = loc("CWE190_Integer_Overflow__int_fgets_multiply_08.c":63:33)
#loc56 = loc("CWE190_Integer_Overflow__int_fgets_multiply_08.c":63:26)
#loc57 = loc("CWE190_Integer_Overflow__int_fgets_multiply_08.c":64:26)
#loc58 = loc("CWE190_Integer_Overflow__int_fgets_multiply_08.c":64:13)
#loc59 = loc("CWE190_Integer_Overflow__int_fgets_multiply_08.c":207:1)
#loc60 = loc("CWE190_Integer_Overflow__int_fgets_multiply_08.c":213:1)
#loc61 = loc("CWE190_Integer_Overflow__int_fgets_multiply_08.c":209:5)
#loc62 = loc("CWE190_Integer_Overflow__int_fgets_multiply_08.c":209:14)
#loc63 = loc("CWE190_Integer_Overflow__int_fgets_multiply_08.c":210:5)
#loc64 = loc("CWE190_Integer_Overflow__int_fgets_multiply_08.c":210:14)
#loc65 = loc("CWE190_Integer_Overflow__int_fgets_multiply_08.c":211:5)
#loc66 = loc("CWE190_Integer_Overflow__int_fgets_multiply_08.c":211:14)
#loc67 = loc("CWE190_Integer_Overflow__int_fgets_multiply_08.c":212:5)
#loc68 = loc("CWE190_Integer_Overflow__int_fgets_multiply_08.c":212:14)
#loc69 = loc("CWE190_Integer_Overflow__int_fgets_multiply_08.c":25:1)
#loc70 = loc("CWE190_Integer_Overflow__int_fgets_multiply_08.c":28:1)
#loc71 = loc("CWE190_Integer_Overflow__int_fgets_multiply_08.c":27:12)
#loc72 = loc("CWE190_Integer_Overflow__int_fgets_multiply_08.c":27:5)
#loc73 = loc("CWE190_Integer_Overflow__int_fgets_multiply_08.c":98:19)
#loc74 = loc("CWE190_Integer_Overflow__int_fgets_multiply_08.c":112:27)
#loc75 = loc("CWE190_Integer_Overflow__int_fgets_multiply_08.c":74:1)
#loc76 = loc("CWE190_Integer_Overflow__int_fgets_multiply_08.c":116:1)
#loc77 = loc("CWE190_Integer_Overflow__int_fgets_multiply_08.c":76:5)
#loc78 = loc("CWE190_Integer_Overflow__int_fgets_multiply_08.c":76:9)
#loc79 = loc("CWE190_Integer_Overflow__int_fgets_multiply_08.c":78:12)
#loc80 = loc("CWE190_Integer_Overflow__int_fgets_multiply_08.c":78:5)
#loc81 = loc("CWE190_Integer_Overflow__int_fgets_multiply_08.c":79:5)
#loc82 = loc("CWE190_Integer_Overflow__int_fgets_multiply_08.c":94:5)
#loc83 = loc("CWE190_Integer_Overflow__int_fgets_multiply_08.c":79:8)
#loc84 = loc("CWE190_Integer_Overflow__int_fgets_multiply_08.c":79:26)
#loc85 = loc("CWE190_Integer_Overflow__int_fgets_multiply_08.c":80:5)
#loc86 = loc("CWE190_Integer_Overflow__int_fgets_multiply_08.c":81:9)
#loc87 = loc("CWE190_Integer_Overflow__int_fgets_multiply_08.c":93:9)
#loc88 = loc("CWE190_Integer_Overflow__int_fgets_multiply_08.c":82:13)
#loc89 = loc("CWE190_Integer_Overflow__int_fgets_multiply_08.c":82:49)
#loc90 = loc("CWE190_Integer_Overflow__int_fgets_multiply_08.c":84:13)
#loc91 = loc("CWE190_Integer_Overflow__int_fgets_multiply_08.c":92:13)
#loc92 = loc("CWE190_Integer_Overflow__int_fgets_multiply_08.c":84:23)
#loc93 = loc("CWE190_Integer_Overflow__int_fgets_multiply_08.c":84:36)
#loc94 = loc("CWE190_Integer_Overflow__int_fgets_multiply_08.c":84:53)
#loc95 = loc("CWE190_Integer_Overflow__int_fgets_multiply_08.c":84:17)
#loc96 = loc("CWE190_Integer_Overflow__int_fgets_multiply_08.c":84:63)
#loc97 = loc("CWE190_Integer_Overflow__int_fgets_multiply_08.c":84:60)
#loc98 = loc("CWE190_Integer_Overflow__int_fgets_multiply_08.c":85:13)
#loc99 = loc("CWE190_Integer_Overflow__int_fgets_multiply_08.c":88:13)
#loc100 = loc("CWE190_Integer_Overflow__int_fgets_multiply_08.c":90:13)
#loc101 = loc("CWE190_Integer_Overflow__int_fgets_multiply_08.c":87:29)
#loc102 = loc("CWE190_Integer_Overflow__int_fgets_multiply_08.c":87:24)
#loc103 = loc("CWE190_Integer_Overflow__int_fgets_multiply_08.c":87:17)
#loc104 = loc("CWE190_Integer_Overflow__int_fgets_multiply_08.c":87:40)
#loc105 = loc("CWE190_Integer_Overflow__int_fgets_multiply_08.c":91:27)
#loc106 = loc("CWE190_Integer_Overflow__int_fgets_multiply_08.c":91:17)
#loc107 = loc("CWE190_Integer_Overflow__int_fgets_multiply_08.c":95:5)
#loc108 = loc("CWE190_Integer_Overflow__int_fgets_multiply_08.c":115:5)
#loc109 = loc("CWE190_Integer_Overflow__int_fgets_multiply_08.c":95:8)
#loc110 = loc("CWE190_Integer_Overflow__int_fgets_multiply_08.c":95:27)
#loc111 = loc("CWE190_Integer_Overflow__int_fgets_multiply_08.c":96:5)
#loc112 = loc("CWE190_Integer_Overflow__int_fgets_multiply_08.c":99:5)
#loc113 = loc("CWE190_Integer_Overflow__int_fgets_multiply_08.c":101:5)
#loc114 = loc("CWE190_Integer_Overflow__int_fgets_multiply_08.c":98:9)
#loc115 = loc("CWE190_Integer_Overflow__int_fgets_multiply_08.c":102:9)
#loc116 = loc("CWE190_Integer_Overflow__int_fgets_multiply_08.c":114:9)
#loc117 = loc("CWE190_Integer_Overflow__int_fgets_multiply_08.c":102:12)
#loc118 = loc("CWE190_Integer_Overflow__int_fgets_multiply_08.c":102:19)
#loc119 = loc("CWE190_Integer_Overflow__int_fgets_multiply_08.c":102:17)
#loc120 = loc("CWE190_Integer_Overflow__int_fgets_multiply_08.c":103:9)
#loc121 = loc("CWE190_Integer_Overflow__int_fgets_multiply_08.c":105:13)
#loc122 = loc("CWE190_Integer_Overflow__int_fgets_multiply_08.c":113:13)
#loc123 = loc("CWE190_Integer_Overflow__int_fgets_multiply_08.c":105:17)
#loc124 = loc("CWE190_Integer_Overflow__int_fgets_multiply_08.c":105:25)
#loc125 = loc("CWE190_Integer_Overflow__int_fgets_multiply_08.c":105:33)
#loc126 = loc("CWE190_Integer_Overflow__int_fgets_multiply_08.c":105:34)
#loc127 = loc("CWE190_Integer_Overflow__int_fgets_multiply_08.c":105:22)
#loc128 = loc("CWE190_Integer_Overflow__int_fgets_multiply_08.c":106:13)
#loc129 = loc("CWE190_Integer_Overflow__int_fgets_multiply_08.c":109:13)
#loc130 = loc("CWE190_Integer_Overflow__int_fgets_multiply_08.c":111:13)
#loc131 = loc("CWE190_Integer_Overflow__int_fgets_multiply_08.c":107:17)
#loc132 = loc("CWE190_Integer_Overflow__int_fgets_multiply_08.c":107:37)
#loc133 = loc("CWE190_Integer_Overflow__int_fgets_multiply_08.c":107:30)
#loc134 = loc("CWE190_Integer_Overflow__int_fgets_multiply_08.c":108:30)
#loc135 = loc("CWE190_Integer_Overflow__int_fgets_multiply_08.c":108:17)
#loc136 = loc("CWE190_Integer_Overflow__int_fgets_multiply_08.c":112:17)
#loc137 = loc("CWE190_Integer_Overflow__int_fgets_multiply_08.c":30:1)
#loc138 = loc("CWE190_Integer_Overflow__int_fgets_multiply_08.c":33:1)
#loc139 = loc("CWE190_Integer_Overflow__int_fgets_multiply_08.c":32:12)
#loc140 = loc("CWE190_Integer_Overflow__int_fgets_multiply_08.c":32:5)
#loc141 = loc("CWE190_Integer_Overflow__int_fgets_multiply_08.c":119:1)
#loc142 = loc("CWE190_Integer_Overflow__int_fgets_multiply_08.c":156:1)
#loc143 = loc("CWE190_Integer_Overflow__int_fgets_multiply_08.c":121:5)
#loc144 = loc("CWE190_Integer_Overflow__int_fgets_multiply_08.c":121:9)
#loc145 = loc("CWE190_Integer_Overflow__int_fgets_multiply_08.c":123:12)
#loc146 = loc("CWE190_Integer_Overflow__int_fgets_multiply_08.c":123:5)
#loc147 = loc("CWE190_Integer_Overflow__int_fgets_multiply_08.c":124:5)
#loc148 = loc("CWE190_Integer_Overflow__int_fgets_multiply_08.c":139:5)
#loc149 = loc("CWE190_Integer_Overflow__int_fgets_multiply_08.c":124:8)
#loc150 = loc("CWE190_Integer_Overflow__int_fgets_multiply_08.c":124:26)
#loc151 = loc("CWE190_Integer_Overflow__int_fgets_multiply_08.c":125:5)
#loc152 = loc("CWE190_Integer_Overflow__int_fgets_multiply_08.c":126:9)
#loc153 = loc("CWE190_Integer_Overflow__int_fgets_multiply_08.c":138:9)
#loc154 = loc("CWE190_Integer_Overflow__int_fgets_multiply_08.c":127:13)
#loc155 = loc("CWE190_Integer_Overflow__int_fgets_multiply_08.c":127:49)
#loc156 = loc("CWE190_Integer_Overflow__int_fgets_multiply_08.c":129:13)
#loc157 = loc("CWE190_Integer_Overflow__int_fgets_multiply_08.c":137:13)
#loc158 = loc("CWE190_Integer_Overflow__int_fgets_multiply_08.c":129:23)
#loc159 = loc("CWE190_Integer_Overflow__int_fgets_multiply_08.c":129:36)
#loc160 = loc("CWE190_Integer_Overflow__int_fgets_multiply_08.c":129:53)
#loc161 = loc("CWE190_Integer_Overflow__int_fgets_multiply_08.c":129:17)
#loc162 = loc("CWE190_Integer_Overflow__int_fgets_multiply_08.c":129:63)
#loc163 = loc("CWE190_Integer_Overflow__int_fgets_multiply_08.c":129:60)
#loc164 = loc("CWE190_Integer_Overflow__int_fgets_multiply_08.c":130:13)
#loc165 = loc("CWE190_Integer_Overflow__int_fgets_multiply_08.c":133:13)
#loc166 = loc("CWE190_Integer_Overflow__int_fgets_multiply_08.c":135:13)
#loc167 = loc("CWE190_Integer_Overflow__int_fgets_multiply_08.c":132:29)
#loc168 = loc("CWE190_Integer_Overflow__int_fgets_multiply_08.c":132:24)
#loc169 = loc("CWE190_Integer_Overflow__int_fgets_multiply_08.c":132:17)
#loc170 = loc("CWE190_Integer_Overflow__int_fgets_multiply_08.c":132:40)
#loc171 = loc("CWE190_Integer_Overflow__int_fgets_multiply_08.c":136:27)
#loc172 = loc("CWE190_Integer_Overflow__int_fgets_multiply_08.c":136:17)
#loc173 = loc("CWE190_Integer_Overflow__int_fgets_multiply_08.c":140:5)
#loc174 = loc("CWE190_Integer_Overflow__int_fgets_multiply_08.c":155:5)
#loc175 = loc("CWE190_Integer_Overflow__int_fgets_multiply_08.c":140:8)
#loc176 = loc("CWE190_Integer_Overflow__int_fgets_multiply_08.c":140:26)
#loc177 = loc("CWE190_Integer_Overflow__int_fgets_multiply_08.c":141:5)
#loc178 = loc("CWE190_Integer_Overflow__int_fgets_multiply_08.c":142:9)
#loc179 = loc("CWE190_Integer_Overflow__int_fgets_multiply_08.c":154:9)
#loc180 = loc("CWE190_Integer_Overflow__int_fgets_multiply_08.c":142:12)
#loc181 = loc("CWE190_Integer_Overflow__int_fgets_multiply_08.c":142:19)
#loc182 = loc("CWE190_Integer_Overflow__int_fgets_multiply_08.c":142:17)
#loc183 = loc("CWE190_Integer_Overflow__int_fgets_multiply_08.c":143:9)
#loc184 = loc("CWE190_Integer_Overflow__int_fgets_multiply_08.c":145:13)
#loc185 = loc("CWE190_Integer_Overflow__int_fgets_multiply_08.c":153:13)
#loc186 = loc("CWE190_Integer_Overflow__int_fgets_multiply_08.c":145:17)
#loc187 = loc("CWE190_Integer_Overflow__int_fgets_multiply_08.c":145:25)
#loc188 = loc("CWE190_Integer_Overflow__int_fgets_multiply_08.c":145:33)
#loc189 = loc("CWE190_Integer_Overflow__int_fgets_multiply_08.c":145:34)
#loc190 = loc("CWE190_Integer_Overflow__int_fgets_multiply_08.c":145:22)
#loc191 = loc("CWE190_Integer_Overflow__int_fgets_multiply_08.c":146:13)
#loc192 = loc("CWE190_Integer_Overflow__int_fgets_multiply_08.c":149:13)
#loc193 = loc("CWE190_Integer_Overflow__int_fgets_multiply_08.c":151:13)
#loc194 = loc("CWE190_Integer_Overflow__int_fgets_multiply_08.c":147:17)
#loc195 = loc("CWE190_Integer_Overflow__int_fgets_multiply_08.c":147:37)
#loc196 = loc("CWE190_Integer_Overflow__int_fgets_multiply_08.c":147:30)
#loc197 = loc("CWE190_Integer_Overflow__int_fgets_multiply_08.c":148:30)
#loc198 = loc("CWE190_Integer_Overflow__int_fgets_multiply_08.c":148:17)
#loc199 = loc("CWE190_Integer_Overflow__int_fgets_multiply_08.c":152:27)
#loc200 = loc("CWE190_Integer_Overflow__int_fgets_multiply_08.c":152:17)
#loc201 = loc("CWE190_Integer_Overflow__int_fgets_multiply_08.c":159:1)
#loc202 = loc("CWE190_Integer_Overflow__int_fgets_multiply_08.c":183:1)
#loc203 = loc("CWE190_Integer_Overflow__int_fgets_multiply_08.c":161:5)
#loc204 = loc("CWE190_Integer_Overflow__int_fgets_multiply_08.c":161:9)
#loc205 = loc("CWE190_Integer_Overflow__int_fgets_multiply_08.c":163:12)
#loc206 = loc("CWE190_Integer_Overflow__int_fgets_multiply_08.c":163:5)
#loc207 = loc("CWE190_Integer_Overflow__int_fgets_multiply_08.c":164:5)
#loc208 = loc("CWE190_Integer_Overflow__int_fgets_multiply_08.c":173:5)
#loc209 = loc("CWE190_Integer_Overflow__int_fgets_multiply_08.c":164:8)
#loc210 = loc("CWE190_Integer_Overflow__int_fgets_multiply_08.c":164:27)
#loc211 = loc("CWE190_Integer_Overflow__int_fgets_multiply_08.c":165:5)
#loc212 = loc("CWE190_Integer_Overflow__int_fgets_multiply_08.c":168:5)
#loc213 = loc("CWE190_Integer_Overflow__int_fgets_multiply_08.c":170:5)
#loc214 = loc("CWE190_Integer_Overflow__int_fgets_multiply_08.c":167:19)
#loc215 = loc("CWE190_Integer_Overflow__int_fgets_multiply_08.c":167:9)
#loc216 = loc("CWE190_Integer_Overflow__int_fgets_multiply_08.c":172:16)
#loc217 = loc("CWE190_Integer_Overflow__int_fgets_multiply_08.c":172:9)
#loc218 = loc("CWE190_Integer_Overflow__int_fgets_multiply_08.c":174:5)
#loc219 = loc("CWE190_Integer_Overflow__int_fgets_multiply_08.c":182:5)
#loc220 = loc("CWE190_Integer_Overflow__int_fgets_multiply_08.c":174:8)
#loc221 = loc("CWE190_Integer_Overflow__int_fgets_multiply_08.c":174:26)
#loc222 = loc("CWE190_Integer_Overflow__int_fgets_multiply_08.c":175:5)
#loc223 = loc("CWE190_Integer_Overflow__int_fgets_multiply_08.c":176:9)
#loc224 = loc("CWE190_Integer_Overflow__int_fgets_multiply_08.c":181:9)
#loc225 = loc("CWE190_Integer_Overflow__int_fgets_multiply_08.c":176:12)
#loc226 = loc("CWE190_Integer_Overflow__int_fgets_multiply_08.c":176:19)
#loc227 = loc("CWE190_Integer_Overflow__int_fgets_multiply_08.c":176:17)
#loc228 = loc("CWE190_Integer_Overflow__int_fgets_multiply_08.c":177:9)
#loc229 = loc("CWE190_Integer_Overflow__int_fgets_multiply_08.c":179:13)
#loc230 = loc("CWE190_Integer_Overflow__int_fgets_multiply_08.c":179:33)
#loc231 = loc("CWE190_Integer_Overflow__int_fgets_multiply_08.c":179:26)
#loc232 = loc("CWE190_Integer_Overflow__int_fgets_multiply_08.c":180:26)
#loc233 = loc("CWE190_Integer_Overflow__int_fgets_multiply_08.c":180:13)
#loc234 = loc("CWE190_Integer_Overflow__int_fgets_multiply_08.c":186:1)
#loc235 = loc("CWE190_Integer_Overflow__int_fgets_multiply_08.c":205:1)
#loc236 = loc("CWE190_Integer_Overflow__int_fgets_multiply_08.c":188:5)
#loc237 = loc("CWE190_Integer_Overflow__int_fgets_multiply_08.c":188:9)
#loc238 = loc("CWE190_Integer_Overflow__int_fgets_multiply_08.c":190:12)
#loc239 = loc("CWE190_Integer_Overflow__int_fgets_multiply_08.c":190:5)
#loc240 = loc("CWE190_Integer_Overflow__int_fgets_multiply_08.c":191:5)
#loc241 = loc("CWE190_Integer_Overflow__int_fgets_multiply_08.c":195:5)
#loc242 = loc("CWE190_Integer_Overflow__int_fgets_multiply_08.c":191:8)
#loc243 = loc("CWE190_Integer_Overflow__int_fgets_multiply_08.c":191:26)
#loc244 = loc("CWE190_Integer_Overflow__int_fgets_multiply_08.c":192:5)
#loc245 = loc("CWE190_Integer_Overflow__int_fgets_multiply_08.c":194:16)
#loc246 = loc("CWE190_Integer_Overflow__int_fgets_multiply_08.c":194:9)
#loc247 = loc("CWE190_Integer_Overflow__int_fgets_multiply_08.c":196:5)
#loc248 = loc("CWE190_Integer_Overflow__int_fgets_multiply_08.c":204:5)
#loc249 = loc("CWE190_Integer_Overflow__int_fgets_multiply_08.c":196:8)
#loc250 = loc("CWE190_Integer_Overflow__int_fgets_multiply_08.c":196:26)
#loc251 = loc("CWE190_Integer_Overflow__int_fgets_multiply_08.c":197:5)
#loc252 = loc("CWE190_Integer_Overflow__int_fgets_multiply_08.c":198:9)
#loc253 = loc("CWE190_Integer_Overflow__int_fgets_multiply_08.c":203:9)
#loc254 = loc("CWE190_Integer_Overflow__int_fgets_multiply_08.c":198:12)
#loc255 = loc("CWE190_Integer_Overflow__int_fgets_multiply_08.c":198:19)
#loc256 = loc("CWE190_Integer_Overflow__int_fgets_multiply_08.c":198:17)
#loc257 = loc("CWE190_Integer_Overflow__int_fgets_multiply_08.c":199:9)
#loc258 = loc("CWE190_Integer_Overflow__int_fgets_multiply_08.c":201:13)
#loc259 = loc("CWE190_Integer_Overflow__int_fgets_multiply_08.c":201:33)
#loc260 = loc("CWE190_Integer_Overflow__int_fgets_multiply_08.c":201:26)
#loc261 = loc("CWE190_Integer_Overflow__int_fgets_multiply_08.c":202:26)
#loc262 = loc("CWE190_Integer_Overflow__int_fgets_multiply_08.c":202:13)
#loc263 = loc(fused[#loc1, #loc2])
#loc264 = loc(fused[#loc3, #loc4])
#loc265 = loc(fused[#loc5, #loc6])
#loc266 = loc(fused[#loc7, #loc8])
#loc267 = loc(fused[#loc10, #loc11])
#loc268 = loc(fused[#loc12, #loc13])
#loc269 = loc(fused[#loc14, #loc15])
#loc270 = loc(fused[#loc17, #loc16])
#loc271 = loc(fused[#loc18, #loc19])
#loc272 = loc(fused[#loc20, #loc21])
#loc273 = loc(fused[#loc22, #loc19])
#loc274 = loc(fused[#loc23, #loc24])
#loc275 = loc(fused[#loc25, #loc26])
#loc276 = loc(fused[#loc27, #loc28])
#loc277 = loc(fused[#loc32, #loc33])
#loc278 = loc(fused[#loc35, #loc36, #loc37, #loc28])
#loc279 = loc(fused[#loc40, #loc41])
#loc280 = loc(fused[#loc43, #loc44])
#loc281 = loc(fused[#loc45, #loc46])
#loc282 = loc(fused[#loc47, #loc44])
#loc283 = loc(fused[#loc48, #loc49])
#loc284 = loc(fused[#loc50, #loc51])
#loc285 = loc(fused[#loc53, #loc49])
#loc286 = loc(fused[#loc54, #loc55])
#loc287 = loc(fused[#loc59, #loc60])
#loc288 = loc(fused[#loc61, #loc62])
#loc289 = loc(fused[#loc63, #loc64])
#loc290 = loc(fused[#loc65, #loc66])
#loc291 = loc(fused[#loc67, #loc68])
#loc292 = loc(fused[#loc69, #loc70])
#loc293 = loc(fused[#loc72, #loc71])
#loc294 = loc(fused[#loc75, #loc76])
#loc295 = loc(fused[#loc77, #loc78])
#loc296 = loc(fused[#loc80, #loc79])
#loc297 = loc(fused[#loc81, #loc82])
#loc298 = loc(fused[#loc83, #loc84])
#loc299 = loc(fused[#loc85, #loc82])
#loc300 = loc(fused[#loc86, #loc87])
#loc301 = loc(fused[#loc88, #loc89])
#loc302 = loc(fused[#loc90, #loc91])
#loc303 = loc(fused[#loc95, #loc96])
#loc304 = loc(fused[#loc98, #loc99, #loc100, #loc91])
#loc305 = loc(fused[#loc103, #loc104])
#loc306 = loc(fused[#loc107, #loc108])
#loc307 = loc(fused[#loc109, #loc110])
#loc308 = loc(fused[#loc111, #loc112, #loc113, #loc108])
#loc309 = loc(fused[#loc115, #loc116])
#loc310 = loc(fused[#loc117, #loc118])
#loc311 = loc(fused[#loc120, #loc116])
#loc312 = loc(fused[#loc121, #loc122])
#loc313 = loc(fused[#loc124, #loc125])
#loc314 = loc(fused[#loc123, #loc126])
#loc315 = loc(fused[#loc128, #loc129, #loc130, #loc122])
#loc316 = loc(fused[#loc131, #loc132])
#loc317 = loc(fused[#loc137, #loc138])
#loc318 = loc(fused[#loc140, #loc139])
#loc319 = loc(fused[#loc141, #loc142])
#loc320 = loc(fused[#loc143, #loc144])
#loc321 = loc(fused[#loc146, #loc145])
#loc322 = loc(fused[#loc147, #loc148])
#loc323 = loc(fused[#loc149, #loc150])
#loc324 = loc(fused[#loc151, #loc148])
#loc325 = loc(fused[#loc152, #loc153])
#loc326 = loc(fused[#loc154, #loc155])
#loc327 = loc(fused[#loc156, #loc157])
#loc328 = loc(fused[#loc161, #loc162])
#loc329 = loc(fused[#loc164, #loc165, #loc166, #loc157])
#loc330 = loc(fused[#loc169, #loc170])
#loc331 = loc(fused[#loc173, #loc174])
#loc332 = loc(fused[#loc175, #loc176])
#loc333 = loc(fused[#loc177, #loc174])
#loc334 = loc(fused[#loc178, #loc179])
#loc335 = loc(fused[#loc180, #loc181])
#loc336 = loc(fused[#loc183, #loc179])
#loc337 = loc(fused[#loc184, #loc185])
#loc338 = loc(fused[#loc187, #loc188])
#loc339 = loc(fused[#loc186, #loc189])
#loc340 = loc(fused[#loc191, #loc192, #loc193, #loc185])
#loc341 = loc(fused[#loc194, #loc195])
#loc342 = loc(fused[#loc201, #loc202])
#loc343 = loc(fused[#loc203, #loc204])
#loc344 = loc(fused[#loc206, #loc205])
#loc345 = loc(fused[#loc207, #loc208])
#loc346 = loc(fused[#loc209, #loc210])
#loc347 = loc(fused[#loc211, #loc212, #loc213, #loc208])
#loc348 = loc(fused[#loc217, #loc216])
#loc349 = loc(fused[#loc218, #loc219])
#loc350 = loc(fused[#loc220, #loc221])
#loc351 = loc(fused[#loc222, #loc219])
#loc352 = loc(fused[#loc223, #loc224])
#loc353 = loc(fused[#loc225, #loc226])
#loc354 = loc(fused[#loc228, #loc224])
#loc355 = loc(fused[#loc229, #loc230])
#loc356 = loc(fused[#loc234, #loc235])
#loc357 = loc(fused[#loc236, #loc237])
#loc358 = loc(fused[#loc239, #loc238])
#loc359 = loc(fused[#loc240, #loc241])
#loc360 = loc(fused[#loc242, #loc243])
#loc361 = loc(fused[#loc244, #loc241])
#loc362 = loc(fused[#loc246, #loc245])
#loc363 = loc(fused[#loc247, #loc248])
#loc364 = loc(fused[#loc249, #loc250])
#loc365 = loc(fused[#loc251, #loc248])
#loc366 = loc(fused[#loc252, #loc253])
#loc367 = loc(fused[#loc254, #loc255])
#loc368 = loc(fused[#loc257, #loc253])
#loc369 = loc(fused[#loc258, #loc259])
