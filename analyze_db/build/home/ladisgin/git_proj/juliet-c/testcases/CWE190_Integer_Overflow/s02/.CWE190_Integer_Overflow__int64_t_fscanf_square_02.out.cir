!s32i = !cir.int<s, 32>
!s64i = !cir.int<s, 64>
!s8i = !cir.int<s, 8>
!ty__IO_codecvt = !cir.struct<struct "_IO_codecvt" incomplete>
!ty__IO_marker = !cir.struct<struct "_IO_marker" incomplete>
!ty__IO_wide_data = !cir.struct<struct "_IO_wide_data" incomplete>
!u16i = !cir.int<u, 16>
!u32i = !cir.int<u, 32>
!void = !cir.void
#fn_attr = #cir<extra({inline = #cir.inline<no>, nothrow = #cir.nothrow, optnone = #cir.optnone})>
#fn_attr1 = #cir<extra({nothrow = #cir.nothrow})>
#loc54 = loc("CWE190_Integer_Overflow__int64_t_fscanf_square_02.c":165:10)
#loc55 = loc("CWE190_Integer_Overflow__int64_t_fscanf_square_02.c":165:14)
#loc56 = loc("CWE190_Integer_Overflow__int64_t_fscanf_square_02.c":165:20)
#loc57 = loc("CWE190_Integer_Overflow__int64_t_fscanf_square_02.c":165:32)
#loc221 = loc(fused[#loc54, #loc55])
#loc222 = loc(fused[#loc56, #loc57])
!ty__IO_FILE = !cir.struct<struct "_IO_FILE" {!s32i, !cir.ptr<!s8i>, !cir.ptr<!s8i>, !cir.ptr<!s8i>, !cir.ptr<!s8i>, !cir.ptr<!s8i>, !cir.ptr<!s8i>, !cir.ptr<!s8i>, !cir.ptr<!s8i>, !cir.ptr<!s8i>, !cir.ptr<!s8i>, !cir.ptr<!s8i>, !cir.ptr<!ty__IO_marker>, !cir.ptr<!cir.struct<struct "_IO_FILE">>, !s32i, !s32i, !s64i, !u16i, !s8i, !cir.array<!s8i x 1>, !cir.ptr<!void>, !s64i, !cir.ptr<!ty__IO_codecvt>, !cir.ptr<!ty__IO_wide_data>, !cir.ptr<!cir.struct<struct "_IO_FILE">>, !cir.ptr<!void>, !cir.ptr<!cir.ptr<!cir.struct<struct "_IO_FILE">>>, !s32i, !cir.array<!s8i x 20>} #cir.record.decl.ast>
module @"/home/ladisgin/git_proj/juliet-c/testcases/CWE190_Integer_Overflow/s02/CWE190_Integer_Overflow__int64_t_fscanf_square_02.c" attributes {cir.lang = #cir.lang<c>, cir.sob = #cir.signed_overflow_behavior<undefined>, cir.triple = "x86_64-unknown-linux-gnu", dlti.dl_spec = #dlti.dl_spec<!llvm.ptr = dense<64> : vector<4xi64>, f80 = dense<128> : vector<2xi64>, i16 = dense<16> : vector<2xi64>, i1 = dense<8> : vector<2xi64>, i8 = dense<8> : vector<2xi64>, f128 = dense<128> : vector<2xi64>, !llvm.ptr<270> = dense<32> : vector<4xi64>, f64 = dense<64> : vector<2xi64>, i32 = dense<32> : vector<2xi64>, f16 = dense<16> : vector<2xi64>, i64 = dense<64> : vector<2xi64>, i128 = dense<128> : vector<2xi64>, !llvm.ptr<271> = dense<32> : vector<4xi64>, !llvm.ptr<272> = dense<64> : vector<4xi64>, "dlti.stack_alignment" = 128 : i64, "dlti.endianness" = "little">} {
  cir.func private @__isoc99_fscanf(!cir.ptr<!ty__IO_FILE>, !cir.ptr<!s8i>, ...) -> !s32i loc(#loc199)
  cir.global "private" external @stdin : !cir.ptr<!ty__IO_FILE> {alignment = 8 : i64} loc(#loc200)
  cir.global "private" constant cir_private dsolocal @".str" = #cir.const_array<"%ld\00" : !cir.array<!s8i x 4>> : !cir.array<!s8i x 4> {alignment = 1 : i64} loc(#loc201)
  cir.func private @printLongLongLine(!s64i) loc(#loc202)
  cir.func no_proto @CWE190_Integer_Overflow__int64_t_fscanf_square_02_bad() extra(#fn_attr) {
    %0 = cir.alloca !s64i, !cir.ptr<!s64i>, ["data"] {alignment = 8 : i64} loc(#loc204)
    %1 = cir.const #cir.int<0> : !s64i loc(#loc13)
    cir.store %1, %0 : !s64i, !cir.ptr<!s64i> loc(#loc205)
    cir.scope {
      %2 = cir.const #cir.int<1> : !s32i loc(#loc17)
      %3 = cir.cast(int_to_bool, %2 : !s32i), !cir.bool loc(#loc17)
      cir.if %3 {
        %4 = cir.get_global @__isoc99_fscanf : !cir.ptr<!cir.func<!s32i (!cir.ptr<!ty__IO_FILE>, !cir.ptr<!s8i>, ...)>> loc(#loc19)
        %5 = cir.get_global @stdin : !cir.ptr<!cir.ptr<!ty__IO_FILE>> loc(#loc200)
        %6 = cir.load %5 : !cir.ptr<!cir.ptr<!ty__IO_FILE>>, !cir.ptr<!ty__IO_FILE> loc(#loc20)
        %7 = cir.get_global @".str" : !cir.ptr<!cir.array<!s8i x 4>> loc(#loc201)
        %8 = cir.cast(array_to_ptrdecay, %7 : !cir.ptr<!cir.array<!s8i x 4>>), !cir.ptr<!s8i> loc(#loc201)
        %9 = cir.call @__isoc99_fscanf(%6, %8, %0) : (!cir.ptr<!ty__IO_FILE>, !cir.ptr<!s8i>, !cir.ptr<!s64i>) -> !s32i loc(#loc19)
      } loc(#loc207)
    } loc(#loc206)
    cir.scope {
      %2 = cir.const #cir.int<1> : !s32i loc(#loc23)
      %3 = cir.cast(int_to_bool, %2 : !s32i), !cir.bool loc(#loc23)
      cir.if %3 {
        cir.scope {
          %4 = cir.alloca !s64i, !cir.ptr<!s64i>, ["result", init] {alignment = 8 : i64} loc(#loc211)
          %5 = cir.load %0 : !cir.ptr<!s64i>, !s64i loc(#loc29)
          %6 = cir.load %0 : !cir.ptr<!s64i>, !s64i loc(#loc28)
          %7 = cir.binop(mul, %5, %6) nsw : !s64i loc(#loc29)
          cir.store %7, %4 : !s64i, !cir.ptr<!s64i> loc(#loc211)
          %8 = cir.load %4 : !cir.ptr<!s64i>, !s64i loc(#loc30)
          cir.call @printLongLongLine(%8) : (!s64i) -> () loc(#loc31)
        } loc(#loc210)
      } loc(#loc209)
    } loc(#loc208)
    cir.return loc(#loc10)
  } loc(#loc203)
  cir.func no_proto @CWE190_Integer_Overflow__int64_t_fscanf_square_02_good() extra(#fn_attr) {
    %0 = cir.get_global @goodB2G1 : !cir.ptr<!cir.func<!void ()>> loc(#loc213)
    cir.call %0() : (!cir.ptr<!cir.func<!void ()>>) -> () loc(#loc34)
    %1 = cir.get_global @goodB2G2 : !cir.ptr<!cir.func<!void ()>> loc(#loc214)
    cir.call %1() : (!cir.ptr<!cir.func<!void ()>>) -> () loc(#loc36)
    %2 = cir.get_global @goodG2B1 : !cir.ptr<!cir.func<!void ()>> loc(#loc215)
    cir.call %2() : (!cir.ptr<!cir.func<!void ()>>) -> () loc(#loc38)
    %3 = cir.get_global @goodG2B2 : !cir.ptr<!cir.func<!void ()>> loc(#loc216)
    cir.call %3() : (!cir.ptr<!cir.func<!void ()>>) -> () loc(#loc40)
    cir.return loc(#loc33)
  } loc(#loc212)
  cir.func private @srand(!u32i) extra(#fn_attr1) loc(#loc217)
  cir.func private @time(!cir.ptr<!s64i>) -> !s64i extra(#fn_attr1) loc(#loc218)
  cir.func private @printLine(!cir.ptr<!s8i>) loc(#loc219)
  cir.global "private" constant cir_private dsolocal @".str.1" = #cir.const_array<"Calling good()...\00" : !cir.array<!s8i x 18>> : !cir.array<!s8i x 18> {alignment = 1 : i64} loc(#loc48)
  cir.global "private" constant cir_private dsolocal @".str.2" = #cir.const_array<"Finished good()\00" : !cir.array<!s8i x 16>> : !cir.array<!s8i x 16> {alignment = 1 : i64} loc(#loc49)
  cir.global "private" constant cir_private dsolocal @".str.3" = #cir.const_array<"Calling bad()...\00" : !cir.array<!s8i x 17>> : !cir.array<!s8i x 17> {alignment = 1 : i64} loc(#loc50)
  cir.global "private" constant cir_private dsolocal @".str.4" = #cir.const_array<"Finished bad()\00" : !cir.array<!s8i x 15>> : !cir.array<!s8i x 15> {alignment = 1 : i64} loc(#loc51)
  cir.func @main(%arg0: !s32i loc(fused[#loc54, #loc55]), %arg1: !cir.ptr<!cir.ptr<!s8i>> loc(fused[#loc56, #loc57])) -> !s32i extra(#fn_attr) {
    %0 = cir.alloca !s32i, !cir.ptr<!s32i>, ["argc", init] {alignment = 4 : i64} loc(#loc221)
    %1 = cir.alloca !cir.ptr<!cir.ptr<!s8i>>, !cir.ptr<!cir.ptr<!cir.ptr<!s8i>>>, ["argv", init] {alignment = 8 : i64} loc(#loc222)
    %2 = cir.alloca !s32i, !cir.ptr<!s32i>, ["__retval"] {alignment = 4 : i64} loc(#loc53)
    cir.store %arg0, %0 : !s32i, !cir.ptr<!s32i> loc(#loc58)
    cir.store %arg1, %1 : !cir.ptr<!cir.ptr<!s8i>>, !cir.ptr<!cir.ptr<!cir.ptr<!s8i>>> loc(#loc58)
    %3 = cir.const #cir.ptr<null> : !cir.ptr<!s64i> loc(#loc59)
    %4 = cir.call @time(%3) : (!cir.ptr<!s64i>) -> !s64i extra(#fn_attr1) loc(#loc60)
    %5 = cir.cast(integral, %4 : !s64i), !u32i loc(#loc60)
    cir.call @srand(%5) : (!u32i) -> () extra(#fn_attr1) loc(#loc61)
    %6 = cir.get_global @".str.1" : !cir.ptr<!cir.array<!s8i x 18>> loc(#loc48)
    %7 = cir.cast(array_to_ptrdecay, %6 : !cir.ptr<!cir.array<!s8i x 18>>), !cir.ptr<!s8i> loc(#loc48)
    cir.call @printLine(%7) : (!cir.ptr<!s8i>) -> () loc(#loc62)
    %8 = cir.get_global @CWE190_Integer_Overflow__int64_t_fscanf_square_02_good : !cir.ptr<!cir.func<!void ()>> loc(#loc223)
    cir.call @CWE190_Integer_Overflow__int64_t_fscanf_square_02_good() : () -> () loc(#loc63)
    %9 = cir.get_global @".str.2" : !cir.ptr<!cir.array<!s8i x 16>> loc(#loc49)
    %10 = cir.cast(array_to_ptrdecay, %9 : !cir.ptr<!cir.array<!s8i x 16>>), !cir.ptr<!s8i> loc(#loc49)
    cir.call @printLine(%10) : (!cir.ptr<!s8i>) -> () loc(#loc65)
    %11 = cir.get_global @".str.3" : !cir.ptr<!cir.array<!s8i x 17>> loc(#loc50)
    %12 = cir.cast(array_to_ptrdecay, %11 : !cir.ptr<!cir.array<!s8i x 17>>), !cir.ptr<!s8i> loc(#loc50)
    cir.call @printLine(%12) : (!cir.ptr<!s8i>) -> () loc(#loc66)
    %13 = cir.get_global @CWE190_Integer_Overflow__int64_t_fscanf_square_02_bad : !cir.ptr<!cir.func<!void ()>> loc(#loc224)
    cir.call @CWE190_Integer_Overflow__int64_t_fscanf_square_02_bad() : () -> () loc(#loc67)
    %14 = cir.get_global @".str.4" : !cir.ptr<!cir.array<!s8i x 15>> loc(#loc51)
    %15 = cir.cast(array_to_ptrdecay, %14 : !cir.ptr<!cir.array<!s8i x 15>>), !cir.ptr<!s8i> loc(#loc51)
    cir.call @printLine(%15) : (!cir.ptr<!s8i>) -> () loc(#loc69)
    %16 = cir.const #cir.int<0> : !s32i loc(#loc70)
    cir.store %16, %2 : !s32i, !cir.ptr<!s32i> loc(#loc225)
    %17 = cir.load %2 : !cir.ptr<!s32i>, !s32i loc(#loc225)
    cir.return %17 : !s32i loc(#loc225)
  } loc(#loc220)
  cir.global "private" constant cir_private dsolocal @".str.5" = #cir.const_array<"Benign, fixed string\00" : !cir.array<!s8i x 21>> : !cir.array<!s8i x 21> {alignment = 1 : i64} loc(#loc72)
  cir.func private @imaxabs(!s64i) -> !s64i extra(#fn_attr1) loc(#loc226)
  cir.func private @sqrtl(!cir.long_double<!cir.f80>) -> !cir.long_double<!cir.f80> extra(#fn_attr1) loc(#loc75)
  cir.global "private" constant cir_private dsolocal @".str.6" = #cir.const_array<"data value is too large to perform arithmetic safely.\00" : !cir.array<!s8i x 54>> : !cir.array<!s8i x 54> {alignment = 1 : i64} loc(#loc76)
  cir.func no_proto internal private @goodB2G1() extra(#fn_attr) {
    %0 = cir.alloca !s64i, !cir.ptr<!s64i>, ["data"] {alignment = 8 : i64} loc(#loc228)
    %1 = cir.const #cir.int<0> : !s64i loc(#loc81)
    cir.store %1, %0 : !s64i, !cir.ptr<!s64i> loc(#loc229)
    cir.scope {
      %2 = cir.const #cir.int<1> : !s32i loc(#loc85)
      %3 = cir.cast(int_to_bool, %2 : !s32i), !cir.bool loc(#loc85)
      cir.if %3 {
        %4 = cir.get_global @__isoc99_fscanf : !cir.ptr<!cir.func<!s32i (!cir.ptr<!ty__IO_FILE>, !cir.ptr<!s8i>, ...)>> loc(#loc87)
        %5 = cir.get_global @stdin : !cir.ptr<!cir.ptr<!ty__IO_FILE>> loc(#loc200)
        %6 = cir.load %5 : !cir.ptr<!cir.ptr<!ty__IO_FILE>>, !cir.ptr<!ty__IO_FILE> loc(#loc88)
        %7 = cir.get_global @".str" : !cir.ptr<!cir.array<!s8i x 4>> loc(#loc232)
        %8 = cir.cast(array_to_ptrdecay, %7 : !cir.ptr<!cir.array<!s8i x 4>>), !cir.ptr<!s8i> loc(#loc232)
        %9 = cir.call @__isoc99_fscanf(%6, %8, %0) : (!cir.ptr<!ty__IO_FILE>, !cir.ptr<!s8i>, !cir.ptr<!s64i>) -> !s32i loc(#loc87)
      } loc(#loc231)
    } loc(#loc230)
    cir.scope {
      %2 = cir.const #cir.int<0> : !s32i loc(#loc93)
      %3 = cir.cast(int_to_bool, %2 : !s32i), !cir.bool loc(#loc93)
      cir.if %3 {
        %4 = cir.get_global @".str.5" : !cir.ptr<!cir.array<!s8i x 21>> loc(#loc72)
        %5 = cir.cast(array_to_ptrdecay, %4 : !cir.ptr<!cir.array<!s8i x 21>>), !cir.ptr<!s8i> loc(#loc72)
        cir.call @printLine(%5) : (!cir.ptr<!s8i>) -> () loc(#loc97)
      } else {
        cir.scope {
          %4 = cir.load %0 : !cir.ptr<!s64i>, !s64i loc(#loc100)
          %5 = cir.call @imaxabs(%4) : (!s64i) -> !s64i extra(#fn_attr1) loc(#loc101)
          %6 = cir.cast(int_to_float, %5 : !s64i), !cir.long_double<!cir.f80> loc(#loc101)
          %7 = cir.get_global @sqrtl : !cir.ptr<!cir.func<!cir.long_double<!cir.f80> (!cir.long_double<!cir.f80>)>> loc(#loc102)
          %8 = cir.const #cir.int<9223372036854775807> : !s64i loc(#loc103)
          %9 = cir.cast(int_to_float, %8 : !s64i), !cir.long_double<!cir.f80> loc(#loc103)
          %10 = cir.call @sqrtl(%9) : (!cir.long_double<!cir.f80>) -> !cir.long_double<!cir.f80> extra(#fn_attr1) loc(#loc102)
          %11 = cir.cmp(le, %6, %10) : !cir.long_double<!cir.f80>, !cir.bool loc(#loc236)
          cir.if %11 {
            %12 = cir.alloca !s64i, !cir.ptr<!s64i>, ["result", init] {alignment = 8 : i64} loc(#loc238)
            %13 = cir.load %0 : !cir.ptr<!s64i>, !s64i loc(#loc110)
            %14 = cir.load %0 : !cir.ptr<!s64i>, !s64i loc(#loc109)
            %15 = cir.binop(mul, %13, %14) nsw : !s64i loc(#loc110)
            cir.store %15, %12 : !s64i, !cir.ptr<!s64i> loc(#loc238)
            %16 = cir.load %12 : !cir.ptr<!s64i>, !s64i loc(#loc111)
            cir.call @printLongLongLine(%16) : (!s64i) -> () loc(#loc112)
          } else {
            %12 = cir.get_global @".str.6" : !cir.ptr<!cir.array<!s8i x 54>> loc(#loc76)
            %13 = cir.cast(array_to_ptrdecay, %12 : !cir.ptr<!cir.array<!s8i x 54>>), !cir.ptr<!s8i> loc(#loc76)
            cir.call @printLine(%13) : (!cir.ptr<!s8i>) -> () loc(#loc113)
          } loc(#loc237)
        } loc(#loc235)
      } loc(#loc234)
    } loc(#loc233)
    cir.return loc(#loc78)
  } loc(#loc227)
  cir.func no_proto internal private @goodB2G2() extra(#fn_attr) {
    %0 = cir.alloca !s64i, !cir.ptr<!s64i>, ["data"] {alignment = 8 : i64} loc(#loc240)
    %1 = cir.const #cir.int<0> : !s64i loc(#loc118)
    cir.store %1, %0 : !s64i, !cir.ptr<!s64i> loc(#loc241)
    cir.scope {
      %2 = cir.const #cir.int<1> : !s32i loc(#loc122)
      %3 = cir.cast(int_to_bool, %2 : !s32i), !cir.bool loc(#loc122)
      cir.if %3 {
        %4 = cir.get_global @__isoc99_fscanf : !cir.ptr<!cir.func<!s32i (!cir.ptr<!ty__IO_FILE>, !cir.ptr<!s8i>, ...)>> loc(#loc124)
        %5 = cir.get_global @stdin : !cir.ptr<!cir.ptr<!ty__IO_FILE>> loc(#loc200)
        %6 = cir.load %5 : !cir.ptr<!cir.ptr<!ty__IO_FILE>>, !cir.ptr<!ty__IO_FILE> loc(#loc125)
        %7 = cir.get_global @".str" : !cir.ptr<!cir.array<!s8i x 4>> loc(#loc244)
        %8 = cir.cast(array_to_ptrdecay, %7 : !cir.ptr<!cir.array<!s8i x 4>>), !cir.ptr<!s8i> loc(#loc244)
        %9 = cir.call @__isoc99_fscanf(%6, %8, %0) : (!cir.ptr<!ty__IO_FILE>, !cir.ptr<!s8i>, !cir.ptr<!s64i>) -> !s32i loc(#loc124)
      } loc(#loc243)
    } loc(#loc242)
    cir.scope {
      %2 = cir.const #cir.int<1> : !s32i loc(#loc130)
      %3 = cir.cast(int_to_bool, %2 : !s32i), !cir.bool loc(#loc130)
      cir.if %3 {
        cir.scope {
          %4 = cir.load %0 : !cir.ptr<!s64i>, !s64i loc(#loc134)
          %5 = cir.call @imaxabs(%4) : (!s64i) -> !s64i extra(#fn_attr1) loc(#loc135)
          %6 = cir.cast(int_to_float, %5 : !s64i), !cir.long_double<!cir.f80> loc(#loc135)
          %7 = cir.get_global @sqrtl : !cir.ptr<!cir.func<!cir.long_double<!cir.f80> (!cir.long_double<!cir.f80>)>> loc(#loc136)
          %8 = cir.const #cir.int<9223372036854775807> : !s64i loc(#loc137)
          %9 = cir.cast(int_to_float, %8 : !s64i), !cir.long_double<!cir.f80> loc(#loc137)
          %10 = cir.call @sqrtl(%9) : (!cir.long_double<!cir.f80>) -> !cir.long_double<!cir.f80> extra(#fn_attr1) loc(#loc136)
          %11 = cir.cmp(le, %6, %10) : !cir.long_double<!cir.f80>, !cir.bool loc(#loc248)
          cir.if %11 {
            %12 = cir.alloca !s64i, !cir.ptr<!s64i>, ["result", init] {alignment = 8 : i64} loc(#loc250)
            %13 = cir.load %0 : !cir.ptr<!s64i>, !s64i loc(#loc144)
            %14 = cir.load %0 : !cir.ptr<!s64i>, !s64i loc(#loc143)
            %15 = cir.binop(mul, %13, %14) nsw : !s64i loc(#loc144)
            cir.store %15, %12 : !s64i, !cir.ptr<!s64i> loc(#loc250)
            %16 = cir.load %12 : !cir.ptr<!s64i>, !s64i loc(#loc145)
            cir.call @printLongLongLine(%16) : (!s64i) -> () loc(#loc146)
          } else {
            %12 = cir.get_global @".str.6" : !cir.ptr<!cir.array<!s8i x 54>> loc(#loc147)
            %13 = cir.cast(array_to_ptrdecay, %12 : !cir.ptr<!cir.array<!s8i x 54>>), !cir.ptr<!s8i> loc(#loc147)
            cir.call @printLine(%13) : (!cir.ptr<!s8i>) -> () loc(#loc148)
          } loc(#loc249)
        } loc(#loc247)
      } loc(#loc246)
    } loc(#loc245)
    cir.return loc(#loc115)
  } loc(#loc239)
  cir.func no_proto internal private @goodG2B1() extra(#fn_attr) {
    %0 = cir.alloca !s64i, !cir.ptr<!s64i>, ["data"] {alignment = 8 : i64} loc(#loc252)
    %1 = cir.const #cir.int<0> : !s64i loc(#loc153)
    cir.store %1, %0 : !s64i, !cir.ptr<!s64i> loc(#loc253)
    cir.scope {
      %2 = cir.const #cir.int<0> : !s32i loc(#loc157)
      %3 = cir.cast(int_to_bool, %2 : !s32i), !cir.bool loc(#loc157)
      cir.if %3 {
        %4 = cir.get_global @".str.5" : !cir.ptr<!cir.array<!s8i x 21>> loc(#loc161)
        %5 = cir.cast(array_to_ptrdecay, %4 : !cir.ptr<!cir.array<!s8i x 21>>), !cir.ptr<!s8i> loc(#loc161)
        cir.call @printLine(%5) : (!cir.ptr<!s8i>) -> () loc(#loc162)
      } else {
        %4 = cir.const #cir.int<2> : !s32i loc(#loc163)
        %5 = cir.cast(integral, %4 : !s32i), !s64i loc(#loc163)
        cir.store %5, %0 : !s64i, !cir.ptr<!s64i> loc(#loc256)
      } loc(#loc255)
    } loc(#loc254)
    cir.scope {
      %2 = cir.const #cir.int<1> : !s32i loc(#loc167)
      %3 = cir.cast(int_to_bool, %2 : !s32i), !cir.bool loc(#loc167)
      cir.if %3 {
        cir.scope {
          %4 = cir.alloca !s64i, !cir.ptr<!s64i>, ["result", init] {alignment = 8 : i64} loc(#loc260)
          %5 = cir.load %0 : !cir.ptr<!s64i>, !s64i loc(#loc173)
          %6 = cir.load %0 : !cir.ptr<!s64i>, !s64i loc(#loc172)
          %7 = cir.binop(mul, %5, %6) nsw : !s64i loc(#loc173)
          cir.store %7, %4 : !s64i, !cir.ptr<!s64i> loc(#loc260)
          %8 = cir.load %4 : !cir.ptr<!s64i>, !s64i loc(#loc174)
          cir.call @printLongLongLine(%8) : (!s64i) -> () loc(#loc175)
        } loc(#loc259)
      } loc(#loc258)
    } loc(#loc257)
    cir.return loc(#loc150)
  } loc(#loc251)
  cir.func no_proto internal private @goodG2B2() extra(#fn_attr) {
    %0 = cir.alloca !s64i, !cir.ptr<!s64i>, ["data"] {alignment = 8 : i64} loc(#loc262)
    %1 = cir.const #cir.int<0> : !s64i loc(#loc180)
    cir.store %1, %0 : !s64i, !cir.ptr<!s64i> loc(#loc263)
    cir.scope {
      %2 = cir.const #cir.int<1> : !s32i loc(#loc184)
      %3 = cir.cast(int_to_bool, %2 : !s32i), !cir.bool loc(#loc184)
      cir.if %3 {
        %4 = cir.const #cir.int<2> : !s32i loc(#loc186)
        %5 = cir.cast(integral, %4 : !s32i), !s64i loc(#loc186)
        cir.store %5, %0 : !s64i, !cir.ptr<!s64i> loc(#loc266)
      } loc(#loc265)
    } loc(#loc264)
    cir.scope {
      %2 = cir.const #cir.int<1> : !s32i loc(#loc190)
      %3 = cir.cast(int_to_bool, %2 : !s32i), !cir.bool loc(#loc190)
      cir.if %3 {
        cir.scope {
          %4 = cir.alloca !s64i, !cir.ptr<!s64i>, ["result", init] {alignment = 8 : i64} loc(#loc270)
          %5 = cir.load %0 : !cir.ptr<!s64i>, !s64i loc(#loc196)
          %6 = cir.load %0 : !cir.ptr<!s64i>, !s64i loc(#loc195)
          %7 = cir.binop(mul, %5, %6) nsw : !s64i loc(#loc196)
          cir.store %7, %4 : !s64i, !cir.ptr<!s64i> loc(#loc270)
          %8 = cir.load %4 : !cir.ptr<!s64i>, !s64i loc(#loc197)
          cir.call @printLongLongLine(%8) : (!s64i) -> () loc(#loc198)
        } loc(#loc269)
      } loc(#loc268)
    } loc(#loc267)
    cir.return loc(#loc177)
  } loc(#loc261)
} loc(#loc)
#loc = loc("/home/ladisgin/git_proj/juliet-c/testcases/CWE190_Integer_Overflow/s02/CWE190_Integer_Overflow__int64_t_fscanf_square_02.c":0:0)
#loc1 = loc("/usr/include/stdio.h":463:1)
#loc2 = loc("/usr/include/stdio.h":465:33)
#loc3 = loc("/usr/include/stdio.h":149:1)
#loc4 = loc("/usr/include/stdio.h":149:14)
#loc5 = loc("CWE190_Integer_Overflow__int64_t_fscanf_square_02.c":32:24)
#loc6 = loc("CWE190_Integer_Overflow__int64_t_fscanf_square_02.c":32:28)
#loc7 = loc("../../../testcasesupport/std_testcase_io.h":26:1)
#loc8 = loc("../../../testcasesupport/std_testcase_io.h":26:49)
#loc9 = loc("CWE190_Integer_Overflow__int64_t_fscanf_square_02.c":25:1)
#loc10 = loc("CWE190_Integer_Overflow__int64_t_fscanf_square_02.c":42:1)
#loc11 = loc("CWE190_Integer_Overflow__int64_t_fscanf_square_02.c":27:5)
#loc12 = loc("CWE190_Integer_Overflow__int64_t_fscanf_square_02.c":27:13)
#loc13 = loc("CWE190_Integer_Overflow__int64_t_fscanf_square_02.c":28:12)
#loc14 = loc("CWE190_Integer_Overflow__int64_t_fscanf_square_02.c":28:5)
#loc15 = loc("CWE190_Integer_Overflow__int64_t_fscanf_square_02.c":29:5)
#loc16 = loc("CWE190_Integer_Overflow__int64_t_fscanf_square_02.c":33:5)
#loc17 = loc("CWE190_Integer_Overflow__int64_t_fscanf_square_02.c":29:8)
#loc18 = loc("CWE190_Integer_Overflow__int64_t_fscanf_square_02.c":30:5)
#loc19 = loc("CWE190_Integer_Overflow__int64_t_fscanf_square_02.c":32:9)
#loc20 = loc("CWE190_Integer_Overflow__int64_t_fscanf_square_02.c":32:17)
#loc21 = loc("CWE190_Integer_Overflow__int64_t_fscanf_square_02.c":34:5)
#loc22 = loc("CWE190_Integer_Overflow__int64_t_fscanf_square_02.c":41:5)
#loc23 = loc("CWE190_Integer_Overflow__int64_t_fscanf_square_02.c":34:8)
#loc24 = loc("CWE190_Integer_Overflow__int64_t_fscanf_square_02.c":35:5)
#loc25 = loc("CWE190_Integer_Overflow__int64_t_fscanf_square_02.c":36:9)
#loc26 = loc("CWE190_Integer_Overflow__int64_t_fscanf_square_02.c":40:9)
#loc27 = loc("CWE190_Integer_Overflow__int64_t_fscanf_square_02.c":38:13)
#loc28 = loc("CWE190_Integer_Overflow__int64_t_fscanf_square_02.c":38:37)
#loc29 = loc("CWE190_Integer_Overflow__int64_t_fscanf_square_02.c":38:30)
#loc30 = loc("CWE190_Integer_Overflow__int64_t_fscanf_square_02.c":39:31)
#loc31 = loc("CWE190_Integer_Overflow__int64_t_fscanf_square_02.c":39:13)
#loc32 = loc("CWE190_Integer_Overflow__int64_t_fscanf_square_02.c":148:1)
#loc33 = loc("CWE190_Integer_Overflow__int64_t_fscanf_square_02.c":154:1)
#loc34 = loc("CWE190_Integer_Overflow__int64_t_fscanf_square_02.c":150:5)
#loc35 = loc("CWE190_Integer_Overflow__int64_t_fscanf_square_02.c":150:14)
#loc36 = loc("CWE190_Integer_Overflow__int64_t_fscanf_square_02.c":151:5)
#loc37 = loc("CWE190_Integer_Overflow__int64_t_fscanf_square_02.c":151:14)
#loc38 = loc("CWE190_Integer_Overflow__int64_t_fscanf_square_02.c":152:5)
#loc39 = loc("CWE190_Integer_Overflow__int64_t_fscanf_square_02.c":152:14)
#loc40 = loc("CWE190_Integer_Overflow__int64_t_fscanf_square_02.c":153:5)
#loc41 = loc("CWE190_Integer_Overflow__int64_t_fscanf_square_02.c":153:14)
#loc42 = loc("/usr/include/stdlib.h":575:1)
#loc43 = loc("/usr/include/stdlib.h":575:41)
#loc44 = loc("/usr/include/time.h":76:1)
#loc45 = loc("/usr/include/time.h":76:38)
#loc46 = loc("../../../testcasesupport/std_testcase_io.h":14:1)
#loc47 = loc("../../../testcasesupport/std_testcase_io.h":14:33)
#loc48 = loc("CWE190_Integer_Overflow__int64_t_fscanf_square_02.c":170:15)
#loc49 = loc("CWE190_Integer_Overflow__int64_t_fscanf_square_02.c":172:15)
#loc50 = loc("CWE190_Integer_Overflow__int64_t_fscanf_square_02.c":175:15)
#loc51 = loc("CWE190_Integer_Overflow__int64_t_fscanf_square_02.c":177:15)
#loc52 = loc("CWE190_Integer_Overflow__int64_t_fscanf_square_02.c":165:1)
#loc53 = loc("CWE190_Integer_Overflow__int64_t_fscanf_square_02.c":180:1)
#loc58 = loc("CWE190_Integer_Overflow__int64_t_fscanf_square_02.c":166:1)
#loc59 = loc("CWE190_Integer_Overflow__int64_t_fscanf_square_02.c":168:27)
#loc60 = loc("CWE190_Integer_Overflow__int64_t_fscanf_square_02.c":168:22)
#loc61 = loc("CWE190_Integer_Overflow__int64_t_fscanf_square_02.c":168:5)
#loc62 = loc("CWE190_Integer_Overflow__int64_t_fscanf_square_02.c":170:5)
#loc63 = loc("CWE190_Integer_Overflow__int64_t_fscanf_square_02.c":171:5)
#loc64 = loc("CWE190_Integer_Overflow__int64_t_fscanf_square_02.c":171:60)
#loc65 = loc("CWE190_Integer_Overflow__int64_t_fscanf_square_02.c":172:5)
#loc66 = loc("CWE190_Integer_Overflow__int64_t_fscanf_square_02.c":175:5)
#loc67 = loc("CWE190_Integer_Overflow__int64_t_fscanf_square_02.c":176:5)
#loc68 = loc("CWE190_Integer_Overflow__int64_t_fscanf_square_02.c":176:59)
#loc69 = loc("CWE190_Integer_Overflow__int64_t_fscanf_square_02.c":177:5)
#loc70 = loc("CWE190_Integer_Overflow__int64_t_fscanf_square_02.c":179:12)
#loc71 = loc("CWE190_Integer_Overflow__int64_t_fscanf_square_02.c":179:5)
#loc72 = loc("CWE190_Integer_Overflow__int64_t_fscanf_square_02.c":61:19)
#loc73 = loc("/usr/include/inttypes.h":351:1)
#loc74 = loc("/usr/include/inttypes.h":351:74)
#loc75 = loc("/usr/include/bits/mathcalls.h":158:1)
#loc76 = loc("CWE190_Integer_Overflow__int64_t_fscanf_square_02.c":73:23)
#loc77 = loc("CWE190_Integer_Overflow__int64_t_fscanf_square_02.c":49:1)
#loc78 = loc("CWE190_Integer_Overflow__int64_t_fscanf_square_02.c":76:1)
#loc79 = loc("CWE190_Integer_Overflow__int64_t_fscanf_square_02.c":51:5)
#loc80 = loc("CWE190_Integer_Overflow__int64_t_fscanf_square_02.c":51:13)
#loc81 = loc("CWE190_Integer_Overflow__int64_t_fscanf_square_02.c":52:12)
#loc82 = loc("CWE190_Integer_Overflow__int64_t_fscanf_square_02.c":52:5)
#loc83 = loc("CWE190_Integer_Overflow__int64_t_fscanf_square_02.c":53:5)
#loc84 = loc("CWE190_Integer_Overflow__int64_t_fscanf_square_02.c":57:5)
#loc85 = loc("CWE190_Integer_Overflow__int64_t_fscanf_square_02.c":53:8)
#loc86 = loc("CWE190_Integer_Overflow__int64_t_fscanf_square_02.c":54:5)
#loc87 = loc("CWE190_Integer_Overflow__int64_t_fscanf_square_02.c":56:9)
#loc88 = loc("CWE190_Integer_Overflow__int64_t_fscanf_square_02.c":56:17)
#loc89 = loc("CWE190_Integer_Overflow__int64_t_fscanf_square_02.c":56:24)
#loc90 = loc("CWE190_Integer_Overflow__int64_t_fscanf_square_02.c":56:28)
#loc91 = loc("CWE190_Integer_Overflow__int64_t_fscanf_square_02.c":58:5)
#loc92 = loc("CWE190_Integer_Overflow__int64_t_fscanf_square_02.c":75:5)
#loc93 = loc("CWE190_Integer_Overflow__int64_t_fscanf_square_02.c":58:8)
#loc94 = loc("CWE190_Integer_Overflow__int64_t_fscanf_square_02.c":59:5)
#loc95 = loc("CWE190_Integer_Overflow__int64_t_fscanf_square_02.c":62:5)
#loc96 = loc("CWE190_Integer_Overflow__int64_t_fscanf_square_02.c":64:5)
#loc97 = loc("CWE190_Integer_Overflow__int64_t_fscanf_square_02.c":61:9)
#loc98 = loc("CWE190_Integer_Overflow__int64_t_fscanf_square_02.c":66:9)
#loc99 = loc("CWE190_Integer_Overflow__int64_t_fscanf_square_02.c":74:9)
#loc100 = loc("CWE190_Integer_Overflow__int64_t_fscanf_square_02.c":66:31)
#loc101 = loc("CWE190_Integer_Overflow__int64_t_fscanf_square_02.c":66:13)
#loc102 = loc("CWE190_Integer_Overflow__int64_t_fscanf_square_02.c":66:40)
#loc103 = loc("CWE190_Integer_Overflow__int64_t_fscanf_square_02.c":66:46)
#loc104 = loc("CWE190_Integer_Overflow__int64_t_fscanf_square_02.c":66:55)
#loc105 = loc("CWE190_Integer_Overflow__int64_t_fscanf_square_02.c":67:9)
#loc106 = loc("CWE190_Integer_Overflow__int64_t_fscanf_square_02.c":70:9)
#loc107 = loc("CWE190_Integer_Overflow__int64_t_fscanf_square_02.c":72:9)
#loc108 = loc("CWE190_Integer_Overflow__int64_t_fscanf_square_02.c":68:13)
#loc109 = loc("CWE190_Integer_Overflow__int64_t_fscanf_square_02.c":68:37)
#loc110 = loc("CWE190_Integer_Overflow__int64_t_fscanf_square_02.c":68:30)
#loc111 = loc("CWE190_Integer_Overflow__int64_t_fscanf_square_02.c":69:31)
#loc112 = loc("CWE190_Integer_Overflow__int64_t_fscanf_square_02.c":69:13)
#loc113 = loc("CWE190_Integer_Overflow__int64_t_fscanf_square_02.c":73:13)
#loc114 = loc("CWE190_Integer_Overflow__int64_t_fscanf_square_02.c":79:1)
#loc115 = loc("CWE190_Integer_Overflow__int64_t_fscanf_square_02.c":101:1)
#loc116 = loc("CWE190_Integer_Overflow__int64_t_fscanf_square_02.c":81:5)
#loc117 = loc("CWE190_Integer_Overflow__int64_t_fscanf_square_02.c":81:13)
#loc118 = loc("CWE190_Integer_Overflow__int64_t_fscanf_square_02.c":82:12)
#loc119 = loc("CWE190_Integer_Overflow__int64_t_fscanf_square_02.c":82:5)
#loc120 = loc("CWE190_Integer_Overflow__int64_t_fscanf_square_02.c":83:5)
#loc121 = loc("CWE190_Integer_Overflow__int64_t_fscanf_square_02.c":87:5)
#loc122 = loc("CWE190_Integer_Overflow__int64_t_fscanf_square_02.c":83:8)
#loc123 = loc("CWE190_Integer_Overflow__int64_t_fscanf_square_02.c":84:5)
#loc124 = loc("CWE190_Integer_Overflow__int64_t_fscanf_square_02.c":86:9)
#loc125 = loc("CWE190_Integer_Overflow__int64_t_fscanf_square_02.c":86:17)
#loc126 = loc("CWE190_Integer_Overflow__int64_t_fscanf_square_02.c":86:24)
#loc127 = loc("CWE190_Integer_Overflow__int64_t_fscanf_square_02.c":86:28)
#loc128 = loc("CWE190_Integer_Overflow__int64_t_fscanf_square_02.c":88:5)
#loc129 = loc("CWE190_Integer_Overflow__int64_t_fscanf_square_02.c":100:5)
#loc130 = loc("CWE190_Integer_Overflow__int64_t_fscanf_square_02.c":88:8)
#loc131 = loc("CWE190_Integer_Overflow__int64_t_fscanf_square_02.c":89:5)
#loc132 = loc("CWE190_Integer_Overflow__int64_t_fscanf_square_02.c":91:9)
#loc133 = loc("CWE190_Integer_Overflow__int64_t_fscanf_square_02.c":99:9)
#loc134 = loc("CWE190_Integer_Overflow__int64_t_fscanf_square_02.c":91:31)
#loc135 = loc("CWE190_Integer_Overflow__int64_t_fscanf_square_02.c":91:13)
#loc136 = loc("CWE190_Integer_Overflow__int64_t_fscanf_square_02.c":91:40)
#loc137 = loc("CWE190_Integer_Overflow__int64_t_fscanf_square_02.c":91:46)
#loc138 = loc("CWE190_Integer_Overflow__int64_t_fscanf_square_02.c":91:55)
#loc139 = loc("CWE190_Integer_Overflow__int64_t_fscanf_square_02.c":92:9)
#loc140 = loc("CWE190_Integer_Overflow__int64_t_fscanf_square_02.c":95:9)
#loc141 = loc("CWE190_Integer_Overflow__int64_t_fscanf_square_02.c":97:9)
#loc142 = loc("CWE190_Integer_Overflow__int64_t_fscanf_square_02.c":93:13)
#loc143 = loc("CWE190_Integer_Overflow__int64_t_fscanf_square_02.c":93:37)
#loc144 = loc("CWE190_Integer_Overflow__int64_t_fscanf_square_02.c":93:30)
#loc145 = loc("CWE190_Integer_Overflow__int64_t_fscanf_square_02.c":94:31)
#loc146 = loc("CWE190_Integer_Overflow__int64_t_fscanf_square_02.c":94:13)
#loc147 = loc("CWE190_Integer_Overflow__int64_t_fscanf_square_02.c":98:23)
#loc148 = loc("CWE190_Integer_Overflow__int64_t_fscanf_square_02.c":98:13)
#loc149 = loc("CWE190_Integer_Overflow__int64_t_fscanf_square_02.c":104:1)
#loc150 = loc("CWE190_Integer_Overflow__int64_t_fscanf_square_02.c":126:1)
#loc151 = loc("CWE190_Integer_Overflow__int64_t_fscanf_square_02.c":106:5)
#loc152 = loc("CWE190_Integer_Overflow__int64_t_fscanf_square_02.c":106:13)
#loc153 = loc("CWE190_Integer_Overflow__int64_t_fscanf_square_02.c":107:12)
#loc154 = loc("CWE190_Integer_Overflow__int64_t_fscanf_square_02.c":107:5)
#loc155 = loc("CWE190_Integer_Overflow__int64_t_fscanf_square_02.c":108:5)
#loc156 = loc("CWE190_Integer_Overflow__int64_t_fscanf_square_02.c":117:5)
#loc157 = loc("CWE190_Integer_Overflow__int64_t_fscanf_square_02.c":108:8)
#loc158 = loc("CWE190_Integer_Overflow__int64_t_fscanf_square_02.c":109:5)
#loc159 = loc("CWE190_Integer_Overflow__int64_t_fscanf_square_02.c":112:5)
#loc160 = loc("CWE190_Integer_Overflow__int64_t_fscanf_square_02.c":114:5)
#loc161 = loc("CWE190_Integer_Overflow__int64_t_fscanf_square_02.c":111:19)
#loc162 = loc("CWE190_Integer_Overflow__int64_t_fscanf_square_02.c":111:9)
#loc163 = loc("CWE190_Integer_Overflow__int64_t_fscanf_square_02.c":116:16)
#loc164 = loc("CWE190_Integer_Overflow__int64_t_fscanf_square_02.c":116:9)
#loc165 = loc("CWE190_Integer_Overflow__int64_t_fscanf_square_02.c":118:5)
#loc166 = loc("CWE190_Integer_Overflow__int64_t_fscanf_square_02.c":125:5)
#loc167 = loc("CWE190_Integer_Overflow__int64_t_fscanf_square_02.c":118:8)
#loc168 = loc("CWE190_Integer_Overflow__int64_t_fscanf_square_02.c":119:5)
#loc169 = loc("CWE190_Integer_Overflow__int64_t_fscanf_square_02.c":120:9)
#loc170 = loc("CWE190_Integer_Overflow__int64_t_fscanf_square_02.c":124:9)
#loc171 = loc("CWE190_Integer_Overflow__int64_t_fscanf_square_02.c":122:13)
#loc172 = loc("CWE190_Integer_Overflow__int64_t_fscanf_square_02.c":122:37)
#loc173 = loc("CWE190_Integer_Overflow__int64_t_fscanf_square_02.c":122:30)
#loc174 = loc("CWE190_Integer_Overflow__int64_t_fscanf_square_02.c":123:31)
#loc175 = loc("CWE190_Integer_Overflow__int64_t_fscanf_square_02.c":123:13)
#loc176 = loc("CWE190_Integer_Overflow__int64_t_fscanf_square_02.c":129:1)
#loc177 = loc("CWE190_Integer_Overflow__int64_t_fscanf_square_02.c":146:1)
#loc178 = loc("CWE190_Integer_Overflow__int64_t_fscanf_square_02.c":131:5)
#loc179 = loc("CWE190_Integer_Overflow__int64_t_fscanf_square_02.c":131:13)
#loc180 = loc("CWE190_Integer_Overflow__int64_t_fscanf_square_02.c":132:12)
#loc181 = loc("CWE190_Integer_Overflow__int64_t_fscanf_square_02.c":132:5)
#loc182 = loc("CWE190_Integer_Overflow__int64_t_fscanf_square_02.c":133:5)
#loc183 = loc("CWE190_Integer_Overflow__int64_t_fscanf_square_02.c":137:5)
#loc184 = loc("CWE190_Integer_Overflow__int64_t_fscanf_square_02.c":133:8)
#loc185 = loc("CWE190_Integer_Overflow__int64_t_fscanf_square_02.c":134:5)
#loc186 = loc("CWE190_Integer_Overflow__int64_t_fscanf_square_02.c":136:16)
#loc187 = loc("CWE190_Integer_Overflow__int64_t_fscanf_square_02.c":136:9)
#loc188 = loc("CWE190_Integer_Overflow__int64_t_fscanf_square_02.c":138:5)
#loc189 = loc("CWE190_Integer_Overflow__int64_t_fscanf_square_02.c":145:5)
#loc190 = loc("CWE190_Integer_Overflow__int64_t_fscanf_square_02.c":138:8)
#loc191 = loc("CWE190_Integer_Overflow__int64_t_fscanf_square_02.c":139:5)
#loc192 = loc("CWE190_Integer_Overflow__int64_t_fscanf_square_02.c":140:9)
#loc193 = loc("CWE190_Integer_Overflow__int64_t_fscanf_square_02.c":144:9)
#loc194 = loc("CWE190_Integer_Overflow__int64_t_fscanf_square_02.c":142:13)
#loc195 = loc("CWE190_Integer_Overflow__int64_t_fscanf_square_02.c":142:37)
#loc196 = loc("CWE190_Integer_Overflow__int64_t_fscanf_square_02.c":142:30)
#loc197 = loc("CWE190_Integer_Overflow__int64_t_fscanf_square_02.c":143:31)
#loc198 = loc("CWE190_Integer_Overflow__int64_t_fscanf_square_02.c":143:13)
#loc199 = loc(fused[#loc1, #loc2])
#loc200 = loc(fused[#loc3, #loc4])
#loc201 = loc(fused[#loc5, #loc6])
#loc202 = loc(fused[#loc7, #loc8])
#loc203 = loc(fused[#loc9, #loc10])
#loc204 = loc(fused[#loc11, #loc12])
#loc205 = loc(fused[#loc14, #loc13])
#loc206 = loc(fused[#loc15, #loc16])
#loc207 = loc(fused[#loc18, #loc16])
#loc208 = loc(fused[#loc21, #loc22])
#loc209 = loc(fused[#loc24, #loc22])
#loc210 = loc(fused[#loc25, #loc26])
#loc211 = loc(fused[#loc27, #loc28])
#loc212 = loc(fused[#loc32, #loc33])
#loc213 = loc(fused[#loc34, #loc35])
#loc214 = loc(fused[#loc36, #loc37])
#loc215 = loc(fused[#loc38, #loc39])
#loc216 = loc(fused[#loc40, #loc41])
#loc217 = loc(fused[#loc42, #loc43])
#loc218 = loc(fused[#loc44, #loc45])
#loc219 = loc(fused[#loc46, #loc47])
#loc220 = loc(fused[#loc52, #loc53])
#loc223 = loc(fused[#loc63, #loc64])
#loc224 = loc(fused[#loc67, #loc68])
#loc225 = loc(fused[#loc71, #loc70])
#loc226 = loc(fused[#loc73, #loc74])
#loc227 = loc(fused[#loc77, #loc78])
#loc228 = loc(fused[#loc79, #loc80])
#loc229 = loc(fused[#loc82, #loc81])
#loc230 = loc(fused[#loc83, #loc84])
#loc231 = loc(fused[#loc86, #loc84])
#loc232 = loc(fused[#loc89, #loc90])
#loc233 = loc(fused[#loc91, #loc92])
#loc234 = loc(fused[#loc94, #loc95, #loc96, #loc92])
#loc235 = loc(fused[#loc98, #loc99])
#loc236 = loc(fused[#loc101, #loc104])
#loc237 = loc(fused[#loc105, #loc106, #loc107, #loc99])
#loc238 = loc(fused[#loc108, #loc109])
#loc239 = loc(fused[#loc114, #loc115])
#loc240 = loc(fused[#loc116, #loc117])
#loc241 = loc(fused[#loc119, #loc118])
#loc242 = loc(fused[#loc120, #loc121])
#loc243 = loc(fused[#loc123, #loc121])
#loc244 = loc(fused[#loc126, #loc127])
#loc245 = loc(fused[#loc128, #loc129])
#loc246 = loc(fused[#loc131, #loc129])
#loc247 = loc(fused[#loc132, #loc133])
#loc248 = loc(fused[#loc135, #loc138])
#loc249 = loc(fused[#loc139, #loc140, #loc141, #loc133])
#loc250 = loc(fused[#loc142, #loc143])
#loc251 = loc(fused[#loc149, #loc150])
#loc252 = loc(fused[#loc151, #loc152])
#loc253 = loc(fused[#loc154, #loc153])
#loc254 = loc(fused[#loc155, #loc156])
#loc255 = loc(fused[#loc158, #loc159, #loc160, #loc156])
#loc256 = loc(fused[#loc164, #loc163])
#loc257 = loc(fused[#loc165, #loc166])
#loc258 = loc(fused[#loc168, #loc166])
#loc259 = loc(fused[#loc169, #loc170])
#loc260 = loc(fused[#loc171, #loc172])
#loc261 = loc(fused[#loc176, #loc177])
#loc262 = loc(fused[#loc178, #loc179])
#loc263 = loc(fused[#loc181, #loc180])
#loc264 = loc(fused[#loc182, #loc183])
#loc265 = loc(fused[#loc185, #loc183])
#loc266 = loc(fused[#loc187, #loc186])
#loc267 = loc(fused[#loc188, #loc189])
#loc268 = loc(fused[#loc191, #loc189])
#loc269 = loc(fused[#loc192, #loc193])
#loc270 = loc(fused[#loc194, #loc195])
