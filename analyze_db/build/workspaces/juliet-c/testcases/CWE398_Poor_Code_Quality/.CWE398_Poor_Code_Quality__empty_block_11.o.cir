!s32i = !cir.int<s, 32>
!s8i = !cir.int<s, 8>
#fn_attr = #cir<extra({inline = #cir.inline<no>, nothrow = #cir.nothrow, optnone = #cir.optnone, uwtable = #cir.uwtable<async>})>
module @"/workspaces/juliet-c/testcases/CWE398_Poor_Code_Quality/CWE398_Poor_Code_Quality__empty_block_11.c" attributes {cir.lang = #cir.lang<c>, cir.sob = #cir.signed_overflow_behavior<undefined>, cir.triple = "x86_64-unknown-linux-gnu", cir.type_size_info = #cir.type_size_info<char = 8, int = 32, size_t = 64>, cir.uwtable = #cir.uwtable<async>, dlti.dl_spec = #dlti.dl_spec<!llvm.ptr<271> = dense<32> : vector<4xi64>, f128 = dense<128> : vector<2xi64>, f16 = dense<16> : vector<2xi64>, f64 = dense<64> : vector<2xi64>, i128 = dense<128> : vector<2xi64>, !llvm.ptr<272> = dense<64> : vector<4xi64>, i64 = dense<64> : vector<2xi64>, !llvm.ptr = dense<64> : vector<4xi64>, !llvm.ptr<270> = dense<32> : vector<4xi64>, f80 = dense<128> : vector<2xi64>, i32 = dense<32> : vector<2xi64>, i16 = dense<16> : vector<2xi64>, i8 = dense<8> : vector<2xi64>, i1 = dense<8> : vector<2xi64>, "dlti.endianness" = "little", "dlti.mangling_mode" = "e", "dlti.stack_alignment" = 128 : i64>} {
  cir.func no_proto private @globalReturnsTrue(...) -> !s32i loc(#loc52)
  cir.func private @printLine(!cir.ptr<!s8i>) loc(#loc53)
  cir.global "private" constant cir_private dsolocal @".str" = #cir.const_array<"Hello from bad()\00" : !cir.array<!s8i x 17>> : !cir.array<!s8i x 17> {alignment = 1 : i64} loc(#loc5)
  cir.func no_proto @CWE398_Poor_Code_Quality__empty_block_11_bad() extra(#fn_attr) {
    cir.br ^bb1 loc(#loc55)
  ^bb1:  // pred: ^bb0
    %0 = cir.get_global @globalReturnsTrue : !cir.ptr<!cir.func<(...) -> !s32i>> loc(#loc56)
    %1 = cir.cast(bitcast, %0 : !cir.ptr<!cir.func<(...) -> !s32i>>), !cir.ptr<!cir.func<() -> !s32i>> loc(#loc56)
    %2 = cir.call %1() : (!cir.ptr<!cir.func<() -> !s32i>>) -> !s32i loc(#loc10)
    %3 = cir.cast(int_to_bool, %2 : !s32i), !cir.bool loc(#loc10)
    cir.brcond %3 ^bb2, ^bb3 loc(#loc57)
  ^bb2:  // pred: ^bb1
    %4 = cir.get_global @".str" : !cir.ptr<!cir.array<!s8i x 17>> loc(#loc5)
    %5 = cir.cast(array_to_ptrdecay, %4 : !cir.ptr<!cir.array<!s8i x 17>>), !cir.ptr<!s8i> loc(#loc5)
    cir.call @printLine(%5) : (!cir.ptr<!s8i>) -> () loc(#loc13)
    cir.br ^bb3 loc(#loc9)
  ^bb3:  // 2 preds: ^bb1, ^bb2
    cir.br ^bb4 loc(#loc9)
  ^bb4:  // pred: ^bb3
    cir.return loc(#loc7)
  } loc(#loc54)
  cir.func no_proto @CWE398_Poor_Code_Quality__empty_block_11_good() extra(#fn_attr) {
    %0 = cir.get_global @good1 : !cir.ptr<!cir.func<()>> loc(#loc59)
    cir.call %0() : (!cir.ptr<!cir.func<()>>) -> () loc(#loc16)
    %1 = cir.get_global @good2 : !cir.ptr<!cir.func<()>> loc(#loc60)
    cir.call %1() : (!cir.ptr<!cir.func<()>>) -> () loc(#loc18)
    cir.return loc(#loc15)
  } loc(#loc58)
  cir.func no_proto private @globalReturnsFalse(...) -> !s32i loc(#loc61)
  cir.global "private" constant cir_private dsolocal @".str.1" = #cir.const_array<"Benign, fixed string\00" : !cir.array<!s8i x 21>> : !cir.array<!s8i x 21> {alignment = 1 : i64} loc(#loc22)
  cir.global "private" constant cir_private dsolocal @".str.2" = #cir.const_array<"Inside the block\00" : !cir.array<!s8i x 17>> : !cir.array<!s8i x 17> {alignment = 1 : i64} loc(#loc23)
  cir.global "private" constant cir_private dsolocal @".str.3" = #cir.const_array<"Hello from good()\00" : !cir.array<!s8i x 18>> : !cir.array<!s8i x 18> {alignment = 1 : i64} loc(#loc24)
  cir.func no_proto internal private @good1() extra(#fn_attr) {
    cir.br ^bb1 loc(#loc63)
  ^bb1:  // pred: ^bb0
    %0 = cir.get_global @globalReturnsFalse : !cir.ptr<!cir.func<(...) -> !s32i>> loc(#loc64)
    %1 = cir.cast(bitcast, %0 : !cir.ptr<!cir.func<(...) -> !s32i>>), !cir.ptr<!cir.func<() -> !s32i>> loc(#loc64)
    %2 = cir.call %1() : (!cir.ptr<!cir.func<() -> !s32i>>) -> !s32i loc(#loc29)
    %3 = cir.cast(int_to_bool, %2 : !s32i), !cir.bool loc(#loc29)
    cir.brcond %3 ^bb2, ^bb3 loc(#loc65)
  ^bb2:  // pred: ^bb1
    %4 = cir.get_global @".str.1" : !cir.ptr<!cir.array<!s8i x 21>> loc(#loc22)
    %5 = cir.cast(array_to_ptrdecay, %4 : !cir.ptr<!cir.array<!s8i x 21>>), !cir.ptr<!s8i> loc(#loc22)
    cir.call @printLine(%5) : (!cir.ptr<!s8i>) -> () loc(#loc34)
    cir.br ^bb6 loc(#loc32)
  ^bb3:  // pred: ^bb1
    cir.br ^bb4 loc(#loc66)
  ^bb4:  // pred: ^bb3
    %6 = cir.get_global @".str.2" : !cir.ptr<!cir.array<!s8i x 17>> loc(#loc23)
    %7 = cir.cast(array_to_ptrdecay, %6 : !cir.ptr<!cir.array<!s8i x 17>>), !cir.ptr<!s8i> loc(#loc23)
    cir.call @printLine(%7) : (!cir.ptr<!s8i>) -> () loc(#loc37)
    cir.br ^bb5 loc(#loc36)
  ^bb5:  // pred: ^bb4
    %8 = cir.get_global @".str.3" : !cir.ptr<!cir.array<!s8i x 18>> loc(#loc24)
    %9 = cir.cast(array_to_ptrdecay, %8 : !cir.ptr<!cir.array<!s8i x 18>>), !cir.ptr<!s8i> loc(#loc24)
    cir.call @printLine(%9) : (!cir.ptr<!s8i>) -> () loc(#loc38)
    cir.br ^bb6 loc(#loc28)
  ^bb6:  // 2 preds: ^bb2, ^bb5
    cir.br ^bb7 loc(#loc28)
  ^bb7:  // pred: ^bb6
    cir.return loc(#loc26)
  } loc(#loc62)
  cir.func no_proto internal private @good2() extra(#fn_attr) {
    cir.br ^bb1 loc(#loc68)
  ^bb1:  // pred: ^bb0
    %0 = cir.get_global @globalReturnsTrue : !cir.ptr<!cir.func<(...) -> !s32i>> loc(#loc69)
    %1 = cir.cast(bitcast, %0 : !cir.ptr<!cir.func<(...) -> !s32i>>), !cir.ptr<!cir.func<() -> !s32i>> loc(#loc69)
    %2 = cir.call %1() : (!cir.ptr<!cir.func<() -> !s32i>>) -> !s32i loc(#loc43)
    %3 = cir.cast(int_to_bool, %2 : !s32i), !cir.bool loc(#loc43)
    cir.brcond %3 ^bb2, ^bb5 loc(#loc70)
  ^bb2:  // pred: ^bb1
    cir.br ^bb3 loc(#loc71)
  ^bb3:  // pred: ^bb2
    %4 = cir.get_global @".str.2" : !cir.ptr<!cir.array<!s8i x 17>> loc(#loc48)
    %5 = cir.cast(array_to_ptrdecay, %4 : !cir.ptr<!cir.array<!s8i x 17>>), !cir.ptr<!s8i> loc(#loc48)
    cir.call @printLine(%5) : (!cir.ptr<!s8i>) -> () loc(#loc49)
    cir.br ^bb4 loc(#loc47)
  ^bb4:  // pred: ^bb3
    %6 = cir.get_global @".str.3" : !cir.ptr<!cir.array<!s8i x 18>> loc(#loc50)
    %7 = cir.cast(array_to_ptrdecay, %6 : !cir.ptr<!cir.array<!s8i x 18>>), !cir.ptr<!s8i> loc(#loc50)
    cir.call @printLine(%7) : (!cir.ptr<!s8i>) -> () loc(#loc51)
    cir.br ^bb5 loc(#loc42)
  ^bb5:  // 2 preds: ^bb1, ^bb4
    cir.br ^bb6 loc(#loc42)
  ^bb6:  // pred: ^bb5
    cir.return loc(#loc40)
  } loc(#loc67)
} loc(#loc)
#loc = loc("/workspaces/juliet-c/testcases/CWE398_Poor_Code_Quality/CWE398_Poor_Code_Quality__empty_block_11.c":0:0)
#loc1 = loc("../../testcasesupport/std_testcase_io.h":48:1)
#loc2 = loc("../../testcasesupport/std_testcase_io.h":48:23)
#loc3 = loc("../../testcasesupport/std_testcase_io.h":14:1)
#loc4 = loc("../../testcasesupport/std_testcase_io.h":14:33)
#loc5 = loc("CWE398_Poor_Code_Quality__empty_block_11.c":27:19)
#loc6 = loc("CWE398_Poor_Code_Quality__empty_block_11.c":20:1)
#loc7 = loc("CWE398_Poor_Code_Quality__empty_block_11.c":29:1)
#loc8 = loc("CWE398_Poor_Code_Quality__empty_block_11.c":22:5)
#loc9 = loc("CWE398_Poor_Code_Quality__empty_block_11.c":28:5)
#loc10 = loc("CWE398_Poor_Code_Quality__empty_block_11.c":22:8)
#loc11 = loc("CWE398_Poor_Code_Quality__empty_block_11.c":22:26)
#loc12 = loc("CWE398_Poor_Code_Quality__empty_block_11.c":23:5)
#loc13 = loc("CWE398_Poor_Code_Quality__empty_block_11.c":27:9)
#loc14 = loc("CWE398_Poor_Code_Quality__empty_block_11.c":66:1)
#loc15 = loc("CWE398_Poor_Code_Quality__empty_block_11.c":70:1)
#loc16 = loc("CWE398_Poor_Code_Quality__empty_block_11.c":68:5)
#loc17 = loc("CWE398_Poor_Code_Quality__empty_block_11.c":68:11)
#loc18 = loc("CWE398_Poor_Code_Quality__empty_block_11.c":69:5)
#loc19 = loc("CWE398_Poor_Code_Quality__empty_block_11.c":69:11)
#loc20 = loc("../../testcasesupport/std_testcase_io.h":50:1)
#loc21 = loc("../../testcasesupport/std_testcase_io.h":50:24)
#loc22 = loc("CWE398_Poor_Code_Quality__empty_block_11.c":41:19)
#loc23 = loc("CWE398_Poor_Code_Quality__empty_block_11.c":47:23)
#loc24 = loc("CWE398_Poor_Code_Quality__empty_block_11.c":49:19)
#loc25 = loc("CWE398_Poor_Code_Quality__empty_block_11.c":36:1)
#loc26 = loc("CWE398_Poor_Code_Quality__empty_block_11.c":51:1)
#loc27 = loc("CWE398_Poor_Code_Quality__empty_block_11.c":38:5)
#loc28 = loc("CWE398_Poor_Code_Quality__empty_block_11.c":50:5)
#loc29 = loc("CWE398_Poor_Code_Quality__empty_block_11.c":38:8)
#loc30 = loc("CWE398_Poor_Code_Quality__empty_block_11.c":38:27)
#loc31 = loc("CWE398_Poor_Code_Quality__empty_block_11.c":39:5)
#loc32 = loc("CWE398_Poor_Code_Quality__empty_block_11.c":42:5)
#loc33 = loc("CWE398_Poor_Code_Quality__empty_block_11.c":44:5)
#loc34 = loc("CWE398_Poor_Code_Quality__empty_block_11.c":41:9)
#loc35 = loc("CWE398_Poor_Code_Quality__empty_block_11.c":46:9)
#loc36 = loc("CWE398_Poor_Code_Quality__empty_block_11.c":48:9)
#loc37 = loc("CWE398_Poor_Code_Quality__empty_block_11.c":47:13)
#loc38 = loc("CWE398_Poor_Code_Quality__empty_block_11.c":49:9)
#loc39 = loc("CWE398_Poor_Code_Quality__empty_block_11.c":54:1)
#loc40 = loc("CWE398_Poor_Code_Quality__empty_block_11.c":64:1)
#loc41 = loc("CWE398_Poor_Code_Quality__empty_block_11.c":56:5)
#loc42 = loc("CWE398_Poor_Code_Quality__empty_block_11.c":63:5)
#loc43 = loc("CWE398_Poor_Code_Quality__empty_block_11.c":56:8)
#loc44 = loc("CWE398_Poor_Code_Quality__empty_block_11.c":56:26)
#loc45 = loc("CWE398_Poor_Code_Quality__empty_block_11.c":57:5)
#loc46 = loc("CWE398_Poor_Code_Quality__empty_block_11.c":59:9)
#loc47 = loc("CWE398_Poor_Code_Quality__empty_block_11.c":61:9)
#loc48 = loc("CWE398_Poor_Code_Quality__empty_block_11.c":60:23)
#loc49 = loc("CWE398_Poor_Code_Quality__empty_block_11.c":60:13)
#loc50 = loc("CWE398_Poor_Code_Quality__empty_block_11.c":62:19)
#loc51 = loc("CWE398_Poor_Code_Quality__empty_block_11.c":62:9)
#loc52 = loc(fused[#loc1, #loc2])
#loc53 = loc(fused[#loc3, #loc4])
#loc54 = loc(fused[#loc6, #loc7])
#loc55 = loc(fused[#loc8, #loc9])
#loc56 = loc(fused[#loc10, #loc11])
#loc57 = loc(fused[#loc12, #loc9])
#loc58 = loc(fused[#loc14, #loc15])
#loc59 = loc(fused[#loc16, #loc17])
#loc60 = loc(fused[#loc18, #loc19])
#loc61 = loc(fused[#loc20, #loc21])
#loc62 = loc(fused[#loc25, #loc26])
#loc63 = loc(fused[#loc27, #loc28])
#loc64 = loc(fused[#loc29, #loc30])
#loc65 = loc(fused[#loc31, #loc32, #loc33, #loc28])
#loc66 = loc(fused[#loc35, #loc36])
#loc67 = loc(fused[#loc39, #loc40])
#loc68 = loc(fused[#loc41, #loc42])
#loc69 = loc(fused[#loc43, #loc44])
#loc70 = loc(fused[#loc45, #loc42])
#loc71 = loc(fused[#loc46, #loc47])
