!s32i = !cir.int<s, 32>
!s8i = !cir.int<s, 8>
!void = !cir.void
#fn_attr = #cir<extra({nothrow = #cir.nothrow})>
#fn_attr1 = #cir<extra({inline = #cir.inline<no>, nothrow = #cir.nothrow, optnone = #cir.optnone})>
module @"/home/ladisgin/git_proj/juliet-c/testcases/CWE391_Unchecked_Error_Condition/CWE391_Unchecked_Error_Condition__sqrt_09.c" attributes {cir.lang = #cir.lang<c>, cir.sob = #cir.signed_overflow_behavior<undefined>, cir.triple = "x86_64-unknown-linux-gnu", dlti.dl_spec = #dlti.dl_spec<i64 = dense<64> : vector<2xi64>, i128 = dense<128> : vector<2xi64>, !llvm.ptr<271> = dense<32> : vector<4xi64>, !llvm.ptr<272> = dense<64> : vector<4xi64>, !llvm.ptr = dense<64> : vector<4xi64>, f80 = dense<128> : vector<2xi64>, i16 = dense<16> : vector<2xi64>, i32 = dense<32> : vector<2xi64>, i1 = dense<8> : vector<2xi64>, i8 = dense<8> : vector<2xi64>, f64 = dense<64> : vector<2xi64>, f128 = dense<128> : vector<2xi64>, f16 = dense<16> : vector<2xi64>, !llvm.ptr<270> = dense<32> : vector<4xi64>, "dlti.stack_alignment" = 128 : i64, "dlti.endianness" = "little">} {
  cir.global "private" constant external @GLOBAL_CONST_TRUE : !s32i {alignment = 4 : i64} loc(#loc97)
  cir.func private @sqrt(!cir.double) -> !cir.double extra(#fn_attr) loc(#loc3)
  cir.func private @printDoubleLine(!cir.double) loc(#loc98)
  cir.func no_proto @CWE391_Unchecked_Error_Condition__sqrt_09_bad() extra(#fn_attr1) {
    %0 = cir.alloca !cir.double, !cir.ptr<!cir.double>, ["doubleNumber"] {alignment = 8 : i64} loc(#loc100)
    cir.br ^bb1 loc(#loc101)
  ^bb1:  // pred: ^bb0
    %1 = cir.get_global @GLOBAL_CONST_TRUE : !cir.ptr<!s32i> loc(#loc97)
    %2 = cir.load %1 : !cir.ptr<!s32i>, !s32i loc(#loc12)
    %3 = cir.cast(int_to_bool, %2 : !s32i), !cir.bool loc(#loc12)
    cir.brcond %3 ^bb2, ^bb5 loc(#loc102)
  ^bb2:  // pred: ^bb1
    cir.br ^bb3 loc(#loc103)
  ^bb3:  // pred: ^bb2
    %4 = cir.get_global @sqrt : !cir.ptr<!cir.func<!cir.double (!cir.double)>> loc(#loc16)
    %5 = cir.const #cir.int<1> : !s32i loc(#loc17)
    %6 = cir.unary(minus, %5) : !s32i, !s32i loc(#loc18)
    %7 = cir.cast(int_to_float, %6 : !s32i), !cir.double loc(#loc18)
    %8 = cir.call @sqrt(%7) : (!cir.double) -> !cir.double extra(#fn_attr) loc(#loc16)
    cir.store %8, %0 : !cir.double, !cir.ptr<!cir.double> loc(#loc104)
    %9 = cir.load %0 : !cir.ptr<!cir.double>, !cir.double loc(#loc21)
    cir.call @printDoubleLine(%9) : (!cir.double) -> () loc(#loc22)
    cir.br ^bb4 loc(#loc15)
  ^bb4:  // pred: ^bb3
    cir.br ^bb5 loc(#loc11)
  ^bb5:  // 2 preds: ^bb1, ^bb4
    cir.br ^bb6 loc(#loc11)
  ^bb6:  // pred: ^bb5
    cir.return loc(#loc7)
  } loc(#loc99)
  cir.func no_proto @CWE391_Unchecked_Error_Condition__sqrt_09_good() extra(#fn_attr1) {
    %0 = cir.get_global @good1 : !cir.ptr<!cir.func<!void ()>> loc(#loc106)
    cir.call %0() : (!cir.ptr<!cir.func<!void ()>>) -> () loc(#loc25)
    %1 = cir.get_global @good2 : !cir.ptr<!cir.func<!void ()>> loc(#loc107)
    cir.call %1() : (!cir.ptr<!cir.func<!void ()>>) -> () loc(#loc27)
    cir.return loc(#loc24)
  } loc(#loc105)
  cir.global "private" constant external @GLOBAL_CONST_FALSE : !s32i {alignment = 4 : i64} loc(#loc108)
  cir.func private @printLine(!cir.ptr<!s8i>) loc(#loc109)
  cir.global "private" constant cir_private dsolocal @".str" = #cir.const_array<"Benign, fixed string\00" : !cir.array<!s8i x 21>> : !cir.array<!s8i x 21> {alignment = 1 : i64} loc(#loc33)
  cir.func private @__errno_location() -> !cir.ptr<!s32i> extra(#fn_attr) loc(#loc110)
  cir.global "private" constant cir_private dsolocal @".str.1" = #cir.const_array<"sqrt() failed\00" : !cir.array<!s8i x 14>> : !cir.array<!s8i x 14> {alignment = 1 : i64} loc(#loc36)
  cir.func private @exit(!s32i) extra(#fn_attr) loc(#loc111)
  cir.func no_proto internal private @good1() extra(#fn_attr1) {
    %0 = cir.alloca !cir.double, !cir.ptr<!cir.double>, ["doubleNumber"] {alignment = 8 : i64} loc(#loc113)
    cir.br ^bb1 loc(#loc114)
  ^bb1:  // pred: ^bb0
    %1 = cir.get_global @GLOBAL_CONST_FALSE : !cir.ptr<!s32i> loc(#loc108)
    %2 = cir.load %1 : !cir.ptr<!s32i>, !s32i loc(#loc45)
    %3 = cir.cast(int_to_bool, %2 : !s32i), !cir.bool loc(#loc45)
    cir.brcond %3 ^bb2, ^bb3 loc(#loc115)
  ^bb2:  // pred: ^bb1
    %4 = cir.get_global @".str" : !cir.ptr<!cir.array<!s8i x 21>> loc(#loc33)
    %5 = cir.cast(array_to_ptrdecay, %4 : !cir.ptr<!cir.array<!s8i x 21>>), !cir.ptr<!s8i> loc(#loc33)
    cir.call @printLine(%5) : (!cir.ptr<!s8i>) -> () loc(#loc49)
    cir.br ^bb10 loc(#loc47)
  ^bb3:  // pred: ^bb1
    cir.br ^bb4 loc(#loc116)
  ^bb4:  // pred: ^bb3
    %6 = cir.const #cir.int<0> : !s32i loc(#loc52)
    %7 = cir.call @__errno_location() : () -> !cir.ptr<!s32i> extra(#fn_attr) loc(#loc53)
    cir.store %6, %7 : !s32i, !cir.ptr<!s32i> loc(#loc117)
    %8 = cir.get_global @sqrt : !cir.ptr<!cir.func<!cir.double (!cir.double)>> loc(#loc54)
    %9 = cir.const #cir.int<1> : !s32i loc(#loc55)
    %10 = cir.unary(minus, %9) : !s32i, !s32i loc(#loc56)
    %11 = cir.cast(int_to_float, %10 : !s32i), !cir.double loc(#loc56)
    %12 = cir.call @sqrt(%11) : (!cir.double) -> !cir.double extra(#fn_attr) loc(#loc54)
    cir.store %12, %0 : !cir.double, !cir.ptr<!cir.double> loc(#loc118)
    cir.br ^bb5 loc(#loc119)
  ^bb5:  // pred: ^bb4
    %13 = cir.call @__errno_location() : () -> !cir.ptr<!s32i> extra(#fn_attr) loc(#loc61)
    %14 = cir.load %13 : !cir.ptr<!s32i>, !s32i loc(#loc61)
    %15 = cir.const #cir.int<33> : !s32i loc(#loc62)
    %16 = cir.cmp(eq, %14, %15) : !s32i, !cir.bool loc(#loc120)
    cir.brcond %16 ^bb6, ^bb7 loc(#loc121)
  ^bb6:  // pred: ^bb5
    %17 = cir.get_global @".str.1" : !cir.ptr<!cir.array<!s8i x 14>> loc(#loc36)
    %18 = cir.cast(array_to_ptrdecay, %17 : !cir.ptr<!cir.array<!s8i x 14>>), !cir.ptr<!s8i> loc(#loc36)
    cir.call @printLine(%18) : (!cir.ptr<!s8i>) -> () loc(#loc64)
    %19 = cir.get_global @exit : !cir.ptr<!cir.func<!void (!s32i)>> loc(#loc65)
    %20 = cir.const #cir.int<1> : !s32i loc(#loc66)
    cir.call @exit(%20) : (!s32i) -> () extra(#fn_attr) loc(#loc65)
    cir.br ^bb7 loc(#loc60)
  ^bb7:  // 2 preds: ^bb5, ^bb6
    cir.br ^bb8 loc(#loc60)
  ^bb8:  // pred: ^bb7
    %21 = cir.load %0 : !cir.ptr<!cir.double>, !cir.double loc(#loc67)
    cir.call @printDoubleLine(%21) : (!cir.double) -> () loc(#loc68)
    cir.br ^bb9 loc(#loc51)
  ^bb9:  // pred: ^bb8
    cir.br ^bb10 loc(#loc44)
  ^bb10:  // 2 preds: ^bb2, ^bb9
    cir.br ^bb11 loc(#loc44)
  ^bb11:  // pred: ^bb10
    cir.return loc(#loc40)
  } loc(#loc112)
  cir.func no_proto internal private @good2() extra(#fn_attr1) {
    %0 = cir.alloca !cir.double, !cir.ptr<!cir.double>, ["doubleNumber"] {alignment = 8 : i64} loc(#loc123)
    cir.br ^bb1 loc(#loc124)
  ^bb1:  // pred: ^bb0
    %1 = cir.get_global @GLOBAL_CONST_TRUE : !cir.ptr<!s32i> loc(#loc97)
    %2 = cir.load %1 : !cir.ptr<!s32i>, !s32i loc(#loc75)
    %3 = cir.cast(int_to_bool, %2 : !s32i), !cir.bool loc(#loc75)
    cir.brcond %3 ^bb2, ^bb9 loc(#loc125)
  ^bb2:  // pred: ^bb1
    cir.br ^bb3 loc(#loc126)
  ^bb3:  // pred: ^bb2
    %4 = cir.const #cir.int<0> : !s32i loc(#loc79)
    %5 = cir.call @__errno_location() : () -> !cir.ptr<!s32i> extra(#fn_attr) loc(#loc80)
    cir.store %4, %5 : !s32i, !cir.ptr<!s32i> loc(#loc127)
    %6 = cir.get_global @sqrt : !cir.ptr<!cir.func<!cir.double (!cir.double)>> loc(#loc81)
    %7 = cir.const #cir.int<1> : !s32i loc(#loc82)
    %8 = cir.unary(minus, %7) : !s32i, !s32i loc(#loc83)
    %9 = cir.cast(int_to_float, %8 : !s32i), !cir.double loc(#loc83)
    %10 = cir.call @sqrt(%9) : (!cir.double) -> !cir.double extra(#fn_attr) loc(#loc81)
    cir.store %10, %0 : !cir.double, !cir.ptr<!cir.double> loc(#loc128)
    cir.br ^bb4 loc(#loc129)
  ^bb4:  // pred: ^bb3
    %11 = cir.call @__errno_location() : () -> !cir.ptr<!s32i> extra(#fn_attr) loc(#loc88)
    %12 = cir.load %11 : !cir.ptr<!s32i>, !s32i loc(#loc88)
    %13 = cir.const #cir.int<33> : !s32i loc(#loc89)
    %14 = cir.cmp(eq, %12, %13) : !s32i, !cir.bool loc(#loc130)
    cir.brcond %14 ^bb5, ^bb6 loc(#loc131)
  ^bb5:  // pred: ^bb4
    %15 = cir.get_global @".str.1" : !cir.ptr<!cir.array<!s8i x 14>> loc(#loc91)
    %16 = cir.cast(array_to_ptrdecay, %15 : !cir.ptr<!cir.array<!s8i x 14>>), !cir.ptr<!s8i> loc(#loc91)
    cir.call @printLine(%16) : (!cir.ptr<!s8i>) -> () loc(#loc92)
    %17 = cir.get_global @exit : !cir.ptr<!cir.func<!void (!s32i)>> loc(#loc93)
    %18 = cir.const #cir.int<1> : !s32i loc(#loc94)
    cir.call @exit(%18) : (!s32i) -> () extra(#fn_attr) loc(#loc93)
    cir.br ^bb6 loc(#loc87)
  ^bb6:  // 2 preds: ^bb4, ^bb5
    cir.br ^bb7 loc(#loc87)
  ^bb7:  // pred: ^bb6
    %19 = cir.load %0 : !cir.ptr<!cir.double>, !cir.double loc(#loc95)
    cir.call @printDoubleLine(%19) : (!cir.double) -> () loc(#loc96)
    cir.br ^bb8 loc(#loc78)
  ^bb8:  // pred: ^bb7
    cir.br ^bb9 loc(#loc74)
  ^bb9:  // 2 preds: ^bb1, ^bb8
    cir.br ^bb10 loc(#loc74)
  ^bb10:  // pred: ^bb9
    cir.return loc(#loc70)
  } loc(#loc122)
} loc(#loc)
#loc = loc("/home/ladisgin/git_proj/juliet-c/testcases/CWE391_Unchecked_Error_Condition/CWE391_Unchecked_Error_Condition__sqrt_09.c":0:0)
#loc1 = loc("../../testcasesupport/std_testcase.h":109:1)
#loc2 = loc("../../testcasesupport/std_testcase.h":109:18)
#loc3 = loc("/usr/include/bits/mathcalls.h":158:1)
#loc4 = loc("../../testcasesupport/std_testcase_io.h":38:1)
#loc5 = loc("../../testcasesupport/std_testcase_io.h":38:41)
#loc6 = loc("CWE391_Unchecked_Error_Condition__sqrt_09.c":24:1)
#loc7 = loc("CWE391_Unchecked_Error_Condition__sqrt_09.c":35:1)
#loc8 = loc("CWE391_Unchecked_Error_Condition__sqrt_09.c":29:13)
#loc9 = loc("CWE391_Unchecked_Error_Condition__sqrt_09.c":29:20)
#loc10 = loc("CWE391_Unchecked_Error_Condition__sqrt_09.c":26:5)
#loc11 = loc("CWE391_Unchecked_Error_Condition__sqrt_09.c":34:5)
#loc12 = loc("CWE391_Unchecked_Error_Condition__sqrt_09.c":26:8)
#loc13 = loc("CWE391_Unchecked_Error_Condition__sqrt_09.c":27:5)
#loc14 = loc("CWE391_Unchecked_Error_Condition__sqrt_09.c":28:9)
#loc15 = loc("CWE391_Unchecked_Error_Condition__sqrt_09.c":33:9)
#loc16 = loc("CWE391_Unchecked_Error_Condition__sqrt_09.c":30:36)
#loc17 = loc("CWE391_Unchecked_Error_Condition__sqrt_09.c":30:50)
#loc18 = loc("CWE391_Unchecked_Error_Condition__sqrt_09.c":30:49)
#loc19 = loc("CWE391_Unchecked_Error_Condition__sqrt_09.c":30:13)
#loc20 = loc("CWE391_Unchecked_Error_Condition__sqrt_09.c":30:51)
#loc21 = loc("CWE391_Unchecked_Error_Condition__sqrt_09.c":32:29)
#loc22 = loc("CWE391_Unchecked_Error_Condition__sqrt_09.c":32:13)
#loc23 = loc("CWE391_Unchecked_Error_Condition__sqrt_09.c":86:1)
#loc24 = loc("CWE391_Unchecked_Error_Condition__sqrt_09.c":90:1)
#loc25 = loc("CWE391_Unchecked_Error_Condition__sqrt_09.c":88:5)
#loc26 = loc("CWE391_Unchecked_Error_Condition__sqrt_09.c":88:11)
#loc27 = loc("CWE391_Unchecked_Error_Condition__sqrt_09.c":89:5)
#loc28 = loc("CWE391_Unchecked_Error_Condition__sqrt_09.c":89:11)
#loc29 = loc("../../testcasesupport/std_testcase.h":110:1)
#loc30 = loc("../../testcasesupport/std_testcase.h":110:18)
#loc31 = loc("../../testcasesupport/std_testcase_io.h":14:1)
#loc32 = loc("../../testcasesupport/std_testcase_io.h":14:33)
#loc33 = loc("CWE391_Unchecked_Error_Condition__sqrt_09.c":47:19)
#loc34 = loc("/usr/include/errno.h":37:1)
#loc35 = loc("/usr/include/errno.h":37:45)
#loc36 = loc("CWE391_Unchecked_Error_Condition__sqrt_09.c":58:27)
#loc37 = loc("/usr/include/stdlib.h":756:1)
#loc38 = loc("/usr/include/stdlib.h":756:70)
#loc39 = loc("CWE391_Unchecked_Error_Condition__sqrt_09.c":42:1)
#loc40 = loc("CWE391_Unchecked_Error_Condition__sqrt_09.c":64:1)
#loc41 = loc("CWE391_Unchecked_Error_Condition__sqrt_09.c":52:13)
#loc42 = loc("CWE391_Unchecked_Error_Condition__sqrt_09.c":52:20)
#loc43 = loc("CWE391_Unchecked_Error_Condition__sqrt_09.c":44:5)
#loc44 = loc("CWE391_Unchecked_Error_Condition__sqrt_09.c":63:5)
#loc45 = loc("CWE391_Unchecked_Error_Condition__sqrt_09.c":44:8)
#loc46 = loc("CWE391_Unchecked_Error_Condition__sqrt_09.c":45:5)
#loc47 = loc("CWE391_Unchecked_Error_Condition__sqrt_09.c":48:5)
#loc48 = loc("CWE391_Unchecked_Error_Condition__sqrt_09.c":50:5)
#loc49 = loc("CWE391_Unchecked_Error_Condition__sqrt_09.c":47:9)
#loc50 = loc("CWE391_Unchecked_Error_Condition__sqrt_09.c":51:9)
#loc51 = loc("CWE391_Unchecked_Error_Condition__sqrt_09.c":62:9)
#loc52 = loc("CWE391_Unchecked_Error_Condition__sqrt_09.c":53:21)
#loc53 = loc("CWE391_Unchecked_Error_Condition__sqrt_09.c":53:13)
#loc54 = loc("CWE391_Unchecked_Error_Condition__sqrt_09.c":54:36)
#loc55 = loc("CWE391_Unchecked_Error_Condition__sqrt_09.c":54:50)
#loc56 = loc("CWE391_Unchecked_Error_Condition__sqrt_09.c":54:49)
#loc57 = loc("CWE391_Unchecked_Error_Condition__sqrt_09.c":54:13)
#loc58 = loc("CWE391_Unchecked_Error_Condition__sqrt_09.c":54:51)
#loc59 = loc("CWE391_Unchecked_Error_Condition__sqrt_09.c":56:13)
#loc60 = loc("CWE391_Unchecked_Error_Condition__sqrt_09.c":60:13)
#loc61 = loc("CWE391_Unchecked_Error_Condition__sqrt_09.c":56:17)
#loc62 = loc("CWE391_Unchecked_Error_Condition__sqrt_09.c":56:26)
#loc63 = loc("CWE391_Unchecked_Error_Condition__sqrt_09.c":57:13)
#loc64 = loc("CWE391_Unchecked_Error_Condition__sqrt_09.c":58:17)
#loc65 = loc("CWE391_Unchecked_Error_Condition__sqrt_09.c":59:17)
#loc66 = loc("CWE391_Unchecked_Error_Condition__sqrt_09.c":59:22)
#loc67 = loc("CWE391_Unchecked_Error_Condition__sqrt_09.c":61:29)
#loc68 = loc("CWE391_Unchecked_Error_Condition__sqrt_09.c":61:13)
#loc69 = loc("CWE391_Unchecked_Error_Condition__sqrt_09.c":67:1)
#loc70 = loc("CWE391_Unchecked_Error_Condition__sqrt_09.c":84:1)
#loc71 = loc("CWE391_Unchecked_Error_Condition__sqrt_09.c":72:13)
#loc72 = loc("CWE391_Unchecked_Error_Condition__sqrt_09.c":72:20)
#loc73 = loc("CWE391_Unchecked_Error_Condition__sqrt_09.c":69:5)
#loc74 = loc("CWE391_Unchecked_Error_Condition__sqrt_09.c":83:5)
#loc75 = loc("CWE391_Unchecked_Error_Condition__sqrt_09.c":69:8)
#loc76 = loc("CWE391_Unchecked_Error_Condition__sqrt_09.c":70:5)
#loc77 = loc("CWE391_Unchecked_Error_Condition__sqrt_09.c":71:9)
#loc78 = loc("CWE391_Unchecked_Error_Condition__sqrt_09.c":82:9)
#loc79 = loc("CWE391_Unchecked_Error_Condition__sqrt_09.c":73:21)
#loc80 = loc("CWE391_Unchecked_Error_Condition__sqrt_09.c":73:13)
#loc81 = loc("CWE391_Unchecked_Error_Condition__sqrt_09.c":74:36)
#loc82 = loc("CWE391_Unchecked_Error_Condition__sqrt_09.c":74:50)
#loc83 = loc("CWE391_Unchecked_Error_Condition__sqrt_09.c":74:49)
#loc84 = loc("CWE391_Unchecked_Error_Condition__sqrt_09.c":74:13)
#loc85 = loc("CWE391_Unchecked_Error_Condition__sqrt_09.c":74:51)
#loc86 = loc("CWE391_Unchecked_Error_Condition__sqrt_09.c":76:13)
#loc87 = loc("CWE391_Unchecked_Error_Condition__sqrt_09.c":80:13)
#loc88 = loc("CWE391_Unchecked_Error_Condition__sqrt_09.c":76:17)
#loc89 = loc("CWE391_Unchecked_Error_Condition__sqrt_09.c":76:26)
#loc90 = loc("CWE391_Unchecked_Error_Condition__sqrt_09.c":77:13)
#loc91 = loc("CWE391_Unchecked_Error_Condition__sqrt_09.c":78:27)
#loc92 = loc("CWE391_Unchecked_Error_Condition__sqrt_09.c":78:17)
#loc93 = loc("CWE391_Unchecked_Error_Condition__sqrt_09.c":79:17)
#loc94 = loc("CWE391_Unchecked_Error_Condition__sqrt_09.c":79:22)
#loc95 = loc("CWE391_Unchecked_Error_Condition__sqrt_09.c":81:29)
#loc96 = loc("CWE391_Unchecked_Error_Condition__sqrt_09.c":81:13)
#loc97 = loc(fused[#loc1, #loc2])
#loc98 = loc(fused[#loc4, #loc5])
#loc99 = loc(fused[#loc6, #loc7])
#loc100 = loc(fused[#loc8, #loc9])
#loc101 = loc(fused[#loc10, #loc11])
#loc102 = loc(fused[#loc13, #loc11])
#loc103 = loc(fused[#loc14, #loc15])
#loc104 = loc(fused[#loc19, #loc20])
#loc105 = loc(fused[#loc23, #loc24])
#loc106 = loc(fused[#loc25, #loc26])
#loc107 = loc(fused[#loc27, #loc28])
#loc108 = loc(fused[#loc29, #loc30])
#loc109 = loc(fused[#loc31, #loc32])
#loc110 = loc(fused[#loc34, #loc35])
#loc111 = loc(fused[#loc37, #loc38])
#loc112 = loc(fused[#loc39, #loc40])
#loc113 = loc(fused[#loc41, #loc42])
#loc114 = loc(fused[#loc43, #loc44])
#loc115 = loc(fused[#loc46, #loc47, #loc48, #loc44])
#loc116 = loc(fused[#loc50, #loc51])
#loc117 = loc(fused[#loc53, #loc52])
#loc118 = loc(fused[#loc57, #loc58])
#loc119 = loc(fused[#loc59, #loc60])
#loc120 = loc(fused[#loc61, #loc62])
#loc121 = loc(fused[#loc63, #loc60])
#loc122 = loc(fused[#loc69, #loc70])
#loc123 = loc(fused[#loc71, #loc72])
#loc124 = loc(fused[#loc73, #loc74])
#loc125 = loc(fused[#loc76, #loc74])
#loc126 = loc(fused[#loc77, #loc78])
#loc127 = loc(fused[#loc80, #loc79])
#loc128 = loc(fused[#loc84, #loc85])
#loc129 = loc(fused[#loc86, #loc87])
#loc130 = loc(fused[#loc88, #loc89])
#loc131 = loc(fused[#loc90, #loc87])
