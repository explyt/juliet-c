!s32i = !cir.int<s, 32>
!s8i = !cir.int<s, 8>
!void = !cir.void
#fn_attr = #cir<extra({inline = #cir.inline<no>, nothrow = #cir.nothrow, optnone = #cir.optnone})>
module @"/home/ladisgin/git_proj/juliet-c/testcases/CWE482_Comparing_Instead_of_Assigning/CWE482_Comparing_Instead_of_Assigning__basic_08.c" attributes {cir.lang = #cir.lang<c>, cir.sob = #cir.signed_overflow_behavior<undefined>, cir.triple = "x86_64-unknown-linux-gnu", dlti.dl_spec = #dlti.dl_spec<f16 = dense<16> : vector<2xi64>, f64 = dense<64> : vector<2xi64>, f128 = dense<128> : vector<2xi64>, i1 = dense<8> : vector<2xi64>, !llvm.ptr<270> = dense<32> : vector<4xi64>, i8 = dense<8> : vector<2xi64>, i16 = dense<16> : vector<2xi64>, i32 = dense<32> : vector<2xi64>, i128 = dense<128> : vector<2xi64>, i64 = dense<64> : vector<2xi64>, !llvm.ptr<272> = dense<64> : vector<4xi64>, !llvm.ptr<271> = dense<32> : vector<4xi64>, !llvm.ptr = dense<64> : vector<4xi64>, f80 = dense<128> : vector<2xi64>, "dlti.endianness" = "little", "dlti.stack_alignment" = 128 : i64>} {
  cir.func private @printIntLine(!s32i) loc(#loc72)
  cir.func no_proto @CWE482_Comparing_Instead_of_Assigning__basic_08_bad() extra(#fn_attr) {
    %0 = cir.alloca !s32i, !cir.ptr<!s32i>, ["intBadSink", init] {alignment = 4 : i64} loc(#loc74)
    cir.br ^bb1 loc(#loc75)
  ^bb1:  // pred: ^bb0
    %1 = cir.get_global @staticReturnsTrue : !cir.ptr<!cir.func<!s32i ()>> loc(#loc76)
    %2 = cir.call %1() : (!cir.ptr<!cir.func<!s32i ()>>) -> !s32i loc(#loc9)
    %3 = cir.cast(int_to_bool, %2 : !s32i), !cir.bool loc(#loc9)
    cir.brcond %3 ^bb2, ^bb5 loc(#loc77)
  ^bb2:  // pred: ^bb1
    cir.br ^bb3 loc(#loc78)
  ^bb3:  // pred: ^bb2
    %4 = cir.const #cir.int<0> : !s32i loc(#loc6)
    cir.store %4, %0 : !s32i, !cir.ptr<!s32i> loc(#loc74)
    %5 = cir.load %0 : !cir.ptr<!s32i>, !s32i loc(#loc14)
    cir.call @printIntLine(%5) : (!s32i) -> () loc(#loc15)
    %6 = cir.load %0 : !cir.ptr<!s32i>, !s32i loc(#loc16)
    cir.call @printIntLine(%6) : (!s32i) -> () loc(#loc17)
    cir.br ^bb4 loc(#loc13)
  ^bb4:  // pred: ^bb3
    cir.br ^bb5 loc(#loc8)
  ^bb5:  // 2 preds: ^bb1, ^bb4
    cir.br ^bb6 loc(#loc8)
  ^bb6:  // pred: ^bb5
    cir.return loc(#loc4)
  } loc(#loc73)
  cir.func no_proto @CWE482_Comparing_Instead_of_Assigning__basic_08_good() extra(#fn_attr) {
    %0 = cir.get_global @good1 : !cir.ptr<!cir.func<!void ()>> loc(#loc80)
    cir.call %0() : (!cir.ptr<!cir.func<!void ()>>) -> () loc(#loc20)
    %1 = cir.get_global @good2 : !cir.ptr<!cir.func<!void ()>> loc(#loc81)
    cir.call %1() : (!cir.ptr<!cir.func<!void ()>>) -> () loc(#loc22)
    cir.return loc(#loc19)
  } loc(#loc79)
  cir.func no_proto internal private @staticReturnsTrue() -> !s32i extra(#fn_attr) {
    %0 = cir.alloca !s32i, !cir.ptr<!s32i>, ["__retval"] {alignment = 4 : i64} loc(#loc25)
    %1 = cir.const #cir.int<1> : !s32i loc(#loc26)
    cir.store %1, %0 : !s32i, !cir.ptr<!s32i> loc(#loc83)
    %2 = cir.load %0 : !cir.ptr<!s32i>, !s32i loc(#loc83)
    cir.return %2 : !s32i loc(#loc83)
  } loc(#loc82)
  cir.func private @printLine(!cir.ptr<!s8i>) loc(#loc84)
  cir.global "private" constant cir_private dsolocal @".str" = #cir.const_array<"Benign, fixed string\00" : !cir.array<!s8i x 21>> : !cir.array<!s8i x 21> {alignment = 1 : i64} loc(#loc30)
  cir.func no_proto internal private @good1() extra(#fn_attr) {
    %0 = cir.alloca !s32i, !cir.ptr<!s32i>, ["intGoodSink", init] {alignment = 4 : i64} loc(#loc86)
    cir.br ^bb1 loc(#loc87)
  ^bb1:  // pred: ^bb0
    %1 = cir.get_global @staticReturnsFalse : !cir.ptr<!cir.func<!s32i ()>> loc(#loc88)
    %2 = cir.call %1() : (!cir.ptr<!cir.func<!s32i ()>>) -> !s32i loc(#loc37)
    %3 = cir.cast(int_to_bool, %2 : !s32i), !cir.bool loc(#loc37)
    cir.brcond %3 ^bb2, ^bb3 loc(#loc89)
  ^bb2:  // pred: ^bb1
    %4 = cir.get_global @".str" : !cir.ptr<!cir.array<!s8i x 21>> loc(#loc30)
    %5 = cir.cast(array_to_ptrdecay, %4 : !cir.ptr<!cir.array<!s8i x 21>>), !cir.ptr<!s8i> loc(#loc30)
    cir.call @printLine(%5) : (!cir.ptr<!s8i>) -> () loc(#loc42)
    cir.br ^bb6 loc(#loc40)
  ^bb3:  // pred: ^bb1
    cir.br ^bb4 loc(#loc90)
  ^bb4:  // pred: ^bb3
    %6 = cir.const #cir.int<0> : !s32i loc(#loc34)
    cir.store %6, %0 : !s32i, !cir.ptr<!s32i> loc(#loc86)
    %7 = cir.load %0 : !cir.ptr<!s32i>, !s32i loc(#loc45)
    cir.call @printIntLine(%7) : (!s32i) -> () loc(#loc46)
    %8 = cir.const #cir.int<5> : !s32i loc(#loc47)
    cir.store %8, %0 : !s32i, !cir.ptr<!s32i> loc(#loc91)
    %9 = cir.load %0 : !cir.ptr<!s32i>, !s32i loc(#loc49)
    cir.call @printIntLine(%9) : (!s32i) -> () loc(#loc50)
    cir.br ^bb5 loc(#loc44)
  ^bb5:  // pred: ^bb4
    cir.br ^bb6 loc(#loc36)
  ^bb6:  // 2 preds: ^bb2, ^bb5
    cir.br ^bb7 loc(#loc36)
  ^bb7:  // pred: ^bb6
    cir.return loc(#loc32)
  } loc(#loc85)
  cir.func no_proto internal private @staticReturnsFalse() -> !s32i extra(#fn_attr) {
    %0 = cir.alloca !s32i, !cir.ptr<!s32i>, ["__retval"] {alignment = 4 : i64} loc(#loc52)
    %1 = cir.const #cir.int<0> : !s32i loc(#loc53)
    cir.store %1, %0 : !s32i, !cir.ptr<!s32i> loc(#loc93)
    %2 = cir.load %0 : !cir.ptr<!s32i>, !s32i loc(#loc93)
    cir.return %2 : !s32i loc(#loc93)
  } loc(#loc92)
  cir.func no_proto internal private @good2() extra(#fn_attr) {
    %0 = cir.alloca !s32i, !cir.ptr<!s32i>, ["intGoodSink", init] {alignment = 4 : i64} loc(#loc95)
    cir.br ^bb1 loc(#loc96)
  ^bb1:  // pred: ^bb0
    %1 = cir.get_global @staticReturnsTrue : !cir.ptr<!cir.func<!s32i ()>> loc(#loc97)
    %2 = cir.call @staticReturnsTrue() : () -> !s32i loc(#loc61)
    %3 = cir.cast(int_to_bool, %2 : !s32i), !cir.bool loc(#loc61)
    cir.brcond %3 ^bb2, ^bb5 loc(#loc98)
  ^bb2:  // pred: ^bb1
    cir.br ^bb3 loc(#loc99)
  ^bb3:  // pred: ^bb2
    %4 = cir.const #cir.int<0> : !s32i loc(#loc58)
    cir.store %4, %0 : !s32i, !cir.ptr<!s32i> loc(#loc95)
    %5 = cir.load %0 : !cir.ptr<!s32i>, !s32i loc(#loc66)
    cir.call @printIntLine(%5) : (!s32i) -> () loc(#loc67)
    %6 = cir.const #cir.int<5> : !s32i loc(#loc68)
    cir.store %6, %0 : !s32i, !cir.ptr<!s32i> loc(#loc100)
    %7 = cir.load %0 : !cir.ptr<!s32i>, !s32i loc(#loc70)
    cir.call @printIntLine(%7) : (!s32i) -> () loc(#loc71)
    cir.br ^bb4 loc(#loc65)
  ^bb4:  // pred: ^bb3
    cir.br ^bb5 loc(#loc60)
  ^bb5:  // 2 preds: ^bb1, ^bb4
    cir.br ^bb6 loc(#loc60)
  ^bb6:  // pred: ^bb5
    cir.return loc(#loc56)
  } loc(#loc94)
} loc(#loc)
#loc = loc("/home/ladisgin/git_proj/juliet-c/testcases/CWE482_Comparing_Instead_of_Assigning/CWE482_Comparing_Instead_of_Assigning__basic_08.c":0:0)
#loc1 = loc("../../testcasesupport/std_testcase_io.h":18:1)
#loc2 = loc("../../testcasesupport/std_testcase_io.h":18:33)
#loc3 = loc("CWE482_Comparing_Instead_of_Assigning__basic_08.c":33:1)
#loc4 = loc("CWE482_Comparing_Instead_of_Assigning__basic_08.c":46:1)
#loc5 = loc("CWE482_Comparing_Instead_of_Assigning__basic_08.c":38:13)
#loc6 = loc("CWE482_Comparing_Instead_of_Assigning__basic_08.c":38:30)
#loc7 = loc("CWE482_Comparing_Instead_of_Assigning__basic_08.c":35:5)
#loc8 = loc("CWE482_Comparing_Instead_of_Assigning__basic_08.c":45:5)
#loc9 = loc("CWE482_Comparing_Instead_of_Assigning__basic_08.c":35:8)
#loc10 = loc("CWE482_Comparing_Instead_of_Assigning__basic_08.c":35:26)
#loc11 = loc("CWE482_Comparing_Instead_of_Assigning__basic_08.c":36:5)
#loc12 = loc("CWE482_Comparing_Instead_of_Assigning__basic_08.c":37:9)
#loc13 = loc("CWE482_Comparing_Instead_of_Assigning__basic_08.c":44:9)
#loc14 = loc("CWE482_Comparing_Instead_of_Assigning__basic_08.c":40:26)
#loc15 = loc("CWE482_Comparing_Instead_of_Assigning__basic_08.c":40:13)
#loc16 = loc("CWE482_Comparing_Instead_of_Assigning__basic_08.c":43:26)
#loc17 = loc("CWE482_Comparing_Instead_of_Assigning__basic_08.c":43:13)
#loc18 = loc("CWE482_Comparing_Instead_of_Assigning__basic_08.c":89:1)
#loc19 = loc("CWE482_Comparing_Instead_of_Assigning__basic_08.c":93:1)
#loc20 = loc("CWE482_Comparing_Instead_of_Assigning__basic_08.c":91:5)
#loc21 = loc("CWE482_Comparing_Instead_of_Assigning__basic_08.c":91:11)
#loc22 = loc("CWE482_Comparing_Instead_of_Assigning__basic_08.c":92:5)
#loc23 = loc("CWE482_Comparing_Instead_of_Assigning__basic_08.c":92:11)
#loc24 = loc("CWE482_Comparing_Instead_of_Assigning__basic_08.c":21:1)
#loc25 = loc("CWE482_Comparing_Instead_of_Assigning__basic_08.c":24:1)
#loc26 = loc("CWE482_Comparing_Instead_of_Assigning__basic_08.c":23:12)
#loc27 = loc("CWE482_Comparing_Instead_of_Assigning__basic_08.c":23:5)
#loc28 = loc("../../testcasesupport/std_testcase_io.h":14:1)
#loc29 = loc("../../testcasesupport/std_testcase_io.h":14:33)
#loc30 = loc("CWE482_Comparing_Instead_of_Assigning__basic_08.c":58:19)
#loc31 = loc("CWE482_Comparing_Instead_of_Assigning__basic_08.c":53:1)
#loc32 = loc("CWE482_Comparing_Instead_of_Assigning__basic_08.c":71:1)
#loc33 = loc("CWE482_Comparing_Instead_of_Assigning__basic_08.c":63:13)
#loc34 = loc("CWE482_Comparing_Instead_of_Assigning__basic_08.c":63:31)
#loc35 = loc("CWE482_Comparing_Instead_of_Assigning__basic_08.c":55:5)
#loc36 = loc("CWE482_Comparing_Instead_of_Assigning__basic_08.c":70:5)
#loc37 = loc("CWE482_Comparing_Instead_of_Assigning__basic_08.c":55:8)
#loc38 = loc("CWE482_Comparing_Instead_of_Assigning__basic_08.c":55:27)
#loc39 = loc("CWE482_Comparing_Instead_of_Assigning__basic_08.c":56:5)
#loc40 = loc("CWE482_Comparing_Instead_of_Assigning__basic_08.c":59:5)
#loc41 = loc("CWE482_Comparing_Instead_of_Assigning__basic_08.c":61:5)
#loc42 = loc("CWE482_Comparing_Instead_of_Assigning__basic_08.c":58:9)
#loc43 = loc("CWE482_Comparing_Instead_of_Assigning__basic_08.c":62:9)
#loc44 = loc("CWE482_Comparing_Instead_of_Assigning__basic_08.c":69:9)
#loc45 = loc("CWE482_Comparing_Instead_of_Assigning__basic_08.c":65:26)
#loc46 = loc("CWE482_Comparing_Instead_of_Assigning__basic_08.c":65:13)
#loc47 = loc("CWE482_Comparing_Instead_of_Assigning__basic_08.c":67:27)
#loc48 = loc("CWE482_Comparing_Instead_of_Assigning__basic_08.c":67:13)
#loc49 = loc("CWE482_Comparing_Instead_of_Assigning__basic_08.c":68:26)
#loc50 = loc("CWE482_Comparing_Instead_of_Assigning__basic_08.c":68:13)
#loc51 = loc("CWE482_Comparing_Instead_of_Assigning__basic_08.c":26:1)
#loc52 = loc("CWE482_Comparing_Instead_of_Assigning__basic_08.c":29:1)
#loc53 = loc("CWE482_Comparing_Instead_of_Assigning__basic_08.c":28:12)
#loc54 = loc("CWE482_Comparing_Instead_of_Assigning__basic_08.c":28:5)
#loc55 = loc("CWE482_Comparing_Instead_of_Assigning__basic_08.c":74:1)
#loc56 = loc("CWE482_Comparing_Instead_of_Assigning__basic_08.c":87:1)
#loc57 = loc("CWE482_Comparing_Instead_of_Assigning__basic_08.c":79:13)
#loc58 = loc("CWE482_Comparing_Instead_of_Assigning__basic_08.c":79:31)
#loc59 = loc("CWE482_Comparing_Instead_of_Assigning__basic_08.c":76:5)
#loc60 = loc("CWE482_Comparing_Instead_of_Assigning__basic_08.c":86:5)
#loc61 = loc("CWE482_Comparing_Instead_of_Assigning__basic_08.c":76:8)
#loc62 = loc("CWE482_Comparing_Instead_of_Assigning__basic_08.c":76:26)
#loc63 = loc("CWE482_Comparing_Instead_of_Assigning__basic_08.c":77:5)
#loc64 = loc("CWE482_Comparing_Instead_of_Assigning__basic_08.c":78:9)
#loc65 = loc("CWE482_Comparing_Instead_of_Assigning__basic_08.c":85:9)
#loc66 = loc("CWE482_Comparing_Instead_of_Assigning__basic_08.c":81:26)
#loc67 = loc("CWE482_Comparing_Instead_of_Assigning__basic_08.c":81:13)
#loc68 = loc("CWE482_Comparing_Instead_of_Assigning__basic_08.c":83:27)
#loc69 = loc("CWE482_Comparing_Instead_of_Assigning__basic_08.c":83:13)
#loc70 = loc("CWE482_Comparing_Instead_of_Assigning__basic_08.c":84:26)
#loc71 = loc("CWE482_Comparing_Instead_of_Assigning__basic_08.c":84:13)
#loc72 = loc(fused[#loc1, #loc2])
#loc73 = loc(fused[#loc3, #loc4])
#loc74 = loc(fused[#loc5, #loc6])
#loc75 = loc(fused[#loc7, #loc8])
#loc76 = loc(fused[#loc9, #loc10])
#loc77 = loc(fused[#loc11, #loc8])
#loc78 = loc(fused[#loc12, #loc13])
#loc79 = loc(fused[#loc18, #loc19])
#loc80 = loc(fused[#loc20, #loc21])
#loc81 = loc(fused[#loc22, #loc23])
#loc82 = loc(fused[#loc24, #loc25])
#loc83 = loc(fused[#loc27, #loc26])
#loc84 = loc(fused[#loc28, #loc29])
#loc85 = loc(fused[#loc31, #loc32])
#loc86 = loc(fused[#loc33, #loc34])
#loc87 = loc(fused[#loc35, #loc36])
#loc88 = loc(fused[#loc37, #loc38])
#loc89 = loc(fused[#loc39, #loc40, #loc41, #loc36])
#loc90 = loc(fused[#loc43, #loc44])
#loc91 = loc(fused[#loc48, #loc47])
#loc92 = loc(fused[#loc51, #loc52])
#loc93 = loc(fused[#loc54, #loc53])
#loc94 = loc(fused[#loc55, #loc56])
#loc95 = loc(fused[#loc57, #loc58])
#loc96 = loc(fused[#loc59, #loc60])
#loc97 = loc(fused[#loc61, #loc62])
#loc98 = loc(fused[#loc63, #loc60])
#loc99 = loc(fused[#loc64, #loc65])
#loc100 = loc(fused[#loc69, #loc68])
