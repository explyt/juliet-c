!s32i = !cir.int<s, 32>
!s8i = !cir.int<s, 8>
!u32i = !cir.int<u, 32>
#false = #cir.bool<false> : !cir.bool
#fn_attr = #cir<extra({nothrow = #cir.nothrow})>
#fn_attr1 = #cir<extra({inline = #cir.inline<no>, nothrow = #cir.nothrow, optnone = #cir.optnone, uwtable = #cir.uwtable<async>})>
#true = #cir.bool<true> : !cir.bool
module @"/workspaces/juliet-c/testcases/CWE121_Stack_Based_Buffer_Overflow/s01/CWE121_Stack_Based_Buffer_Overflow__CWE129_rand_18.c" attributes {cir.lang = #cir.lang<c>, cir.sob = #cir.signed_overflow_behavior<undefined>, cir.triple = "x86_64-unknown-linux-gnu", cir.type_size_info = #cir.type_size_info<char = 8, int = 32, size_t = 64>, cir.uwtable = #cir.uwtable<async>, dlti.dl_spec = #dlti.dl_spec<f128 = dense<128> : vector<2xi64>, f64 = dense<64> : vector<2xi64>, i32 = dense<32> : vector<2xi64>, f16 = dense<16> : vector<2xi64>, i16 = dense<16> : vector<2xi64>, i1 = dense<8> : vector<2xi64>, i8 = dense<8> : vector<2xi64>, !llvm.ptr<270> = dense<32> : vector<4xi64>, !llvm.ptr = dense<64> : vector<4xi64>, f80 = dense<128> : vector<2xi64>, i64 = dense<64> : vector<2xi64>, i128 = dense<128> : vector<2xi64>, !llvm.ptr<272> = dense<64> : vector<4xi64>, !llvm.ptr<271> = dense<32> : vector<4xi64>, "dlti.endianness" = "little", "dlti.mangling_mode" = "e", "dlti.stack_alignment" = 128 : i64>} {
  cir.func private @rand() -> !s32i extra(#fn_attr) loc(#loc149)
  cir.func private @printIntLine(!s32i) loc(#loc150)
  cir.func private @printLine(!cir.ptr<!s8i>) loc(#loc151)
  cir.global "private" constant cir_private dsolocal @".str" = #cir.const_array<"ERROR: Array index is negative.\00" : !cir.array<!s8i x 32>> : !cir.array<!s8i x 32> {alignment = 1 : i64} loc(#loc7)
  cir.func no_proto @CWE121_Stack_Based_Buffer_Overflow__CWE129_rand_18_bad() extra(#fn_attr1) {
    %0 = cir.alloca !s32i, !cir.ptr<!s32i>, ["data"] {alignment = 4 : i64} loc(#loc153)
    %1 = cir.alloca !s32i, !cir.ptr<!s32i>, ["i"] {alignment = 4 : i64} loc(#loc154)
    %2 = cir.alloca !cir.array<!s32i x 10>, !cir.ptr<!cir.array<!s32i x 10>>, ["buffer"] {alignment = 16 : i64} loc(#loc155)
    %3 = cir.const #cir.int<1> : !s32i loc(#loc16)
    %4 = cir.unary(minus, %3) nsw : !s32i, !s32i loc(#loc17)
    cir.store %4, %0 : !s32i, !cir.ptr<!s32i> loc(#loc156)
    cir.goto "source" loc(#loc157)
  ^bb1:  // no predecessors
    cir.label "source" loc(#loc21)
    %5 = cir.call @rand() : () -> !s32i extra(#fn_attr) loc(#loc22)
    %6 = cir.const #cir.int<1> : !s32i loc(#loc22)
    %7 = cir.binop(and, %5, %6) : !s32i loc(#loc22)
    %8 = cir.cast(int_to_bool, %7 : !s32i), !cir.bool loc(#loc22)
    %9 = cir.ternary(%8, true {
      %12 = cir.call @rand() : () -> !s32i extra(#fn_attr) loc(#loc22)
      %13 = cir.cast(integral, %12 : !s32i), !u32i loc(#loc22)
      %14 = cir.const #cir.int<30> : !s32i loc(#loc22)
      %15 = cir.shift(left, %13 : !u32i, %14 : !s32i) -> !u32i loc(#loc22)
      %16 = cir.call @rand() : () -> !s32i extra(#fn_attr) loc(#loc22)
      %17 = cir.cast(integral, %16 : !s32i), !u32i loc(#loc22)
      %18 = cir.const #cir.int<15> : !s32i loc(#loc22)
      %19 = cir.shift(left, %17 : !u32i, %18 : !s32i) -> !u32i loc(#loc22)
      %20 = cir.binop(xor, %15, %19) : !u32i loc(#loc22)
      %21 = cir.call @rand() : () -> !s32i extra(#fn_attr) loc(#loc22)
      %22 = cir.cast(integral, %21 : !s32i), !u32i loc(#loc22)
      %23 = cir.binop(xor, %20, %22) : !u32i loc(#loc22)
      cir.yield %23 : !u32i loc(#loc22)
    }, false {
      %12 = cir.call @rand() : () -> !s32i extra(#fn_attr) loc(#loc22)
      %13 = cir.cast(integral, %12 : !s32i), !u32i loc(#loc22)
      %14 = cir.const #cir.int<30> : !s32i loc(#loc22)
      %15 = cir.shift(left, %13 : !u32i, %14 : !s32i) -> !u32i loc(#loc22)
      %16 = cir.call @rand() : () -> !s32i extra(#fn_attr) loc(#loc22)
      %17 = cir.cast(integral, %16 : !s32i), !u32i loc(#loc22)
      %18 = cir.const #cir.int<15> : !s32i loc(#loc22)
      %19 = cir.shift(left, %17 : !u32i, %18 : !s32i) -> !u32i loc(#loc22)
      %20 = cir.binop(xor, %15, %19) : !u32i loc(#loc22)
      %21 = cir.call @rand() : () -> !s32i extra(#fn_attr) loc(#loc22)
      %22 = cir.cast(integral, %21 : !s32i), !u32i loc(#loc22)
      %23 = cir.binop(xor, %20, %22) : !u32i loc(#loc22)
      %24 = cir.unary(minus, %23) : !u32i, !u32i loc(#loc22)
      %25 = cir.const #cir.int<1> : !s32i loc(#loc22)
      %26 = cir.cast(integral, %25 : !s32i), !u32i loc(#loc22)
      %27 = cir.binop(sub, %24, %26) : !u32i loc(#loc22)
      cir.yield %27 : !u32i loc(#loc22)
    }) : (!cir.bool) -> !u32i loc(#loc22)
    %10 = cir.cast(integral, %9 : !u32i), !s32i loc(#loc22)
    cir.store %10, %0 : !s32i, !cir.ptr<!s32i> loc(#loc158)
    cir.goto "sink" loc(#loc159)
  ^bb2:  // no predecessors
    cir.label "sink" loc(#loc26)
    %11 = cir.const #cir.zero : !cir.array<!s32i x 10> loc(#loc155)
    cir.store %11, %2 : !cir.array<!s32i x 10>, !cir.ptr<!cir.array<!s32i x 10>> loc(#loc155)
    cir.scope {
      %12 = cir.load %0 : !cir.ptr<!s32i>, !s32i loc(#loc29)
      %13 = cir.const #cir.int<0> : !s32i loc(#loc30)
      %14 = cir.cmp(ge, %12, %13) : !s32i, !cir.bool loc(#loc161)
      cir.if %14 {
        %15 = cir.const #cir.int<1> : !s32i loc(#loc34)
        %16 = cir.load %0 : !cir.ptr<!s32i>, !s32i loc(#loc35)
        %17 = cir.cast(array_to_ptrdecay, %2 : !cir.ptr<!cir.array<!s32i x 10>>), !cir.ptr<!s32i> loc(#loc36)
        %18 = cir.ptr_stride(%17 : !cir.ptr<!s32i>, %16 : !s32i), !cir.ptr<!s32i> loc(#loc36)
        cir.store %15, %18 : !s32i, !cir.ptr<!s32i> loc(#loc163)
        cir.scope {
          %19 = cir.const #cir.int<0> : !s32i loc(#loc39)
          cir.store %19, %1 : !s32i, !cir.ptr<!s32i> loc(#loc165)
          cir.for : cond {
            %20 = cir.load %1 : !cir.ptr<!s32i>, !s32i loc(#loc41)
            %21 = cir.const #cir.int<10> : !s32i loc(#loc42)
            %22 = cir.cmp(lt, %20, %21) : !s32i, !cir.bool loc(#loc166)
            cir.condition(%22) loc(#loc43)
          } body {
            cir.scope {
              %20 = cir.load %1 : !cir.ptr<!s32i>, !s32i loc(#loc45)
              %21 = cir.cast(array_to_ptrdecay, %2 : !cir.ptr<!cir.array<!s32i x 10>>), !cir.ptr<!s32i> loc(#loc46)
              %22 = cir.ptr_stride(%21 : !cir.ptr<!s32i>, %20 : !s32i), !cir.ptr<!s32i> loc(#loc46)
              %23 = cir.load %22 : !cir.ptr<!s32i>, !s32i loc(#loc46)
              cir.call @printIntLine(%23) : (!s32i) -> () loc(#loc47)
            } loc(#loc167)
            cir.yield loc(#loc38)
          } step {
            %20 = cir.load %1 : !cir.ptr<!s32i>, !s32i loc(#loc48)
            %21 = cir.unary(inc, %20) nsw : !s32i, !s32i loc(#loc49)
            cir.store %21, %1 : !s32i, !cir.ptr<!s32i> loc(#loc168)
            cir.yield loc(#loc164)
          } loc(#loc164)
        } loc(#loc164)
      } else {
        %15 = cir.get_global @".str" : !cir.ptr<!cir.array<!s8i x 32>> loc(#loc7)
        %16 = cir.cast(array_to_ptrdecay, %15 : !cir.ptr<!cir.array<!s8i x 32>>), !cir.ptr<!s8i> loc(#loc7)
        cir.call @printLine(%16) : (!cir.ptr<!s8i>) -> () loc(#loc50)
      } loc(#loc162)
    } loc(#loc160)
    cir.return loc(#loc9)
  } loc(#loc152)
  cir.func no_proto @CWE121_Stack_Based_Buffer_Overflow__CWE129_rand_18_good() extra(#fn_attr1) {
    %0 = cir.get_global @goodB2G : !cir.ptr<!cir.func<()>> loc(#loc170)
    cir.call %0() : (!cir.ptr<!cir.func<()>>) -> () loc(#loc53)
    %1 = cir.get_global @goodG2B : !cir.ptr<!cir.func<()>> loc(#loc171)
    cir.call %1() : (!cir.ptr<!cir.func<()>>) -> () loc(#loc55)
    cir.return loc(#loc52)
  } loc(#loc169)
  cir.global "private" constant cir_private dsolocal @".str.1" = #cir.const_array<"ERROR: Array index is out-of-bounds\00" : !cir.array<!s8i x 36>> : !cir.array<!s8i x 36> {alignment = 1 : i64} loc(#loc57)
  cir.func no_proto internal private @goodB2G() extra(#fn_attr1) {
    %0 = cir.alloca !s32i, !cir.ptr<!s32i>, ["data"] {alignment = 4 : i64} loc(#loc173)
    %1 = cir.alloca !s32i, !cir.ptr<!s32i>, ["i"] {alignment = 4 : i64} loc(#loc174)
    %2 = cir.alloca !cir.array<!s32i x 10>, !cir.ptr<!cir.array<!s32i x 10>>, ["buffer"] {alignment = 16 : i64} loc(#loc175)
    %3 = cir.const #cir.int<1> : !s32i loc(#loc66)
    %4 = cir.unary(minus, %3) nsw : !s32i, !s32i loc(#loc67)
    cir.store %4, %0 : !s32i, !cir.ptr<!s32i> loc(#loc176)
    cir.goto "source" loc(#loc177)
  ^bb1:  // no predecessors
    cir.label "source" loc(#loc71)
    %5 = cir.call @rand() : () -> !s32i extra(#fn_attr) loc(#loc72)
    %6 = cir.const #cir.int<1> : !s32i loc(#loc72)
    %7 = cir.binop(and, %5, %6) : !s32i loc(#loc72)
    %8 = cir.cast(int_to_bool, %7 : !s32i), !cir.bool loc(#loc72)
    %9 = cir.ternary(%8, true {
      %12 = cir.call @rand() : () -> !s32i extra(#fn_attr) loc(#loc72)
      %13 = cir.cast(integral, %12 : !s32i), !u32i loc(#loc72)
      %14 = cir.const #cir.int<30> : !s32i loc(#loc72)
      %15 = cir.shift(left, %13 : !u32i, %14 : !s32i) -> !u32i loc(#loc72)
      %16 = cir.call @rand() : () -> !s32i extra(#fn_attr) loc(#loc72)
      %17 = cir.cast(integral, %16 : !s32i), !u32i loc(#loc72)
      %18 = cir.const #cir.int<15> : !s32i loc(#loc72)
      %19 = cir.shift(left, %17 : !u32i, %18 : !s32i) -> !u32i loc(#loc72)
      %20 = cir.binop(xor, %15, %19) : !u32i loc(#loc72)
      %21 = cir.call @rand() : () -> !s32i extra(#fn_attr) loc(#loc72)
      %22 = cir.cast(integral, %21 : !s32i), !u32i loc(#loc72)
      %23 = cir.binop(xor, %20, %22) : !u32i loc(#loc72)
      cir.yield %23 : !u32i loc(#loc72)
    }, false {
      %12 = cir.call @rand() : () -> !s32i extra(#fn_attr) loc(#loc72)
      %13 = cir.cast(integral, %12 : !s32i), !u32i loc(#loc72)
      %14 = cir.const #cir.int<30> : !s32i loc(#loc72)
      %15 = cir.shift(left, %13 : !u32i, %14 : !s32i) -> !u32i loc(#loc72)
      %16 = cir.call @rand() : () -> !s32i extra(#fn_attr) loc(#loc72)
      %17 = cir.cast(integral, %16 : !s32i), !u32i loc(#loc72)
      %18 = cir.const #cir.int<15> : !s32i loc(#loc72)
      %19 = cir.shift(left, %17 : !u32i, %18 : !s32i) -> !u32i loc(#loc72)
      %20 = cir.binop(xor, %15, %19) : !u32i loc(#loc72)
      %21 = cir.call @rand() : () -> !s32i extra(#fn_attr) loc(#loc72)
      %22 = cir.cast(integral, %21 : !s32i), !u32i loc(#loc72)
      %23 = cir.binop(xor, %20, %22) : !u32i loc(#loc72)
      %24 = cir.unary(minus, %23) : !u32i, !u32i loc(#loc72)
      %25 = cir.const #cir.int<1> : !s32i loc(#loc72)
      %26 = cir.cast(integral, %25 : !s32i), !u32i loc(#loc72)
      %27 = cir.binop(sub, %24, %26) : !u32i loc(#loc72)
      cir.yield %27 : !u32i loc(#loc72)
    }) : (!cir.bool) -> !u32i loc(#loc72)
    %10 = cir.cast(integral, %9 : !u32i), !s32i loc(#loc72)
    cir.store %10, %0 : !s32i, !cir.ptr<!s32i> loc(#loc178)
    cir.goto "sink" loc(#loc179)
  ^bb2:  // no predecessors
    cir.label "sink" loc(#loc76)
    %11 = cir.const #cir.zero : !cir.array<!s32i x 10> loc(#loc175)
    cir.store %11, %2 : !cir.array<!s32i x 10>, !cir.ptr<!cir.array<!s32i x 10>> loc(#loc175)
    cir.scope {
      %12 = cir.load %0 : !cir.ptr<!s32i>, !s32i loc(#loc79)
      %13 = cir.const #cir.int<0> : !s32i loc(#loc80)
      %14 = cir.cmp(ge, %12, %13) : !s32i, !cir.bool loc(#loc181)
      %15 = cir.ternary(%14, true {
        %16 = cir.load %0 : !cir.ptr<!s32i>, !s32i loc(#loc82)
        %17 = cir.const #cir.int<10> : !s32i loc(#loc83)
        %18 = cir.cmp(lt, %16, %17) : !s32i, !cir.bool loc(#loc182)
        %19 = cir.ternary(%18, true {
          %20 = cir.const #true loc(#loc81)
          cir.yield %20 : !cir.bool loc(#loc81)
        }, false {
          %20 = cir.const #false loc(#loc81)
          cir.yield %20 : !cir.bool loc(#loc81)
        }) : (!cir.bool) -> !cir.bool loc(#loc81)
        cir.yield %19 : !cir.bool loc(#loc81)
      }, false {
        %16 = cir.const #false loc(#loc81)
        cir.yield %16 : !cir.bool loc(#loc81)
      }) : (!cir.bool) -> !cir.bool loc(#loc81)
      cir.if %15 {
        %16 = cir.const #cir.int<1> : !s32i loc(#loc88)
        %17 = cir.load %0 : !cir.ptr<!s32i>, !s32i loc(#loc89)
        %18 = cir.cast(array_to_ptrdecay, %2 : !cir.ptr<!cir.array<!s32i x 10>>), !cir.ptr<!s32i> loc(#loc90)
        %19 = cir.ptr_stride(%18 : !cir.ptr<!s32i>, %17 : !s32i), !cir.ptr<!s32i> loc(#loc90)
        cir.store %16, %19 : !s32i, !cir.ptr<!s32i> loc(#loc184)
        cir.scope {
          %20 = cir.const #cir.int<0> : !s32i loc(#loc93)
          cir.store %20, %1 : !s32i, !cir.ptr<!s32i> loc(#loc186)
          cir.for : cond {
            %21 = cir.load %1 : !cir.ptr<!s32i>, !s32i loc(#loc95)
            %22 = cir.const #cir.int<10> : !s32i loc(#loc96)
            %23 = cir.cmp(lt, %21, %22) : !s32i, !cir.bool loc(#loc187)
            cir.condition(%23) loc(#loc97)
          } body {
            cir.scope {
              %21 = cir.load %1 : !cir.ptr<!s32i>, !s32i loc(#loc99)
              %22 = cir.cast(array_to_ptrdecay, %2 : !cir.ptr<!cir.array<!s32i x 10>>), !cir.ptr<!s32i> loc(#loc100)
              %23 = cir.ptr_stride(%22 : !cir.ptr<!s32i>, %21 : !s32i), !cir.ptr<!s32i> loc(#loc100)
              %24 = cir.load %23 : !cir.ptr<!s32i>, !s32i loc(#loc100)
              cir.call @printIntLine(%24) : (!s32i) -> () loc(#loc101)
            } loc(#loc188)
            cir.yield loc(#loc92)
          } step {
            %21 = cir.load %1 : !cir.ptr<!s32i>, !s32i loc(#loc102)
            %22 = cir.unary(inc, %21) nsw : !s32i, !s32i loc(#loc103)
            cir.store %22, %1 : !s32i, !cir.ptr<!s32i> loc(#loc189)
            cir.yield loc(#loc185)
          } loc(#loc185)
        } loc(#loc185)
      } else {
        %16 = cir.get_global @".str.1" : !cir.ptr<!cir.array<!s8i x 36>> loc(#loc57)
        %17 = cir.cast(array_to_ptrdecay, %16 : !cir.ptr<!cir.array<!s8i x 36>>), !cir.ptr<!s8i> loc(#loc57)
        cir.call @printLine(%17) : (!cir.ptr<!s8i>) -> () loc(#loc104)
      } loc(#loc183)
    } loc(#loc180)
    cir.return loc(#loc59)
  } loc(#loc172)
  cir.func no_proto internal private @goodG2B() extra(#fn_attr1) {
    %0 = cir.alloca !s32i, !cir.ptr<!s32i>, ["data"] {alignment = 4 : i64} loc(#loc191)
    %1 = cir.alloca !s32i, !cir.ptr<!s32i>, ["i"] {alignment = 4 : i64} loc(#loc192)
    %2 = cir.alloca !cir.array<!s32i x 10>, !cir.ptr<!cir.array<!s32i x 10>>, ["buffer"] {alignment = 16 : i64} loc(#loc193)
    %3 = cir.const #cir.int<1> : !s32i loc(#loc113)
    %4 = cir.unary(minus, %3) nsw : !s32i, !s32i loc(#loc114)
    cir.store %4, %0 : !s32i, !cir.ptr<!s32i> loc(#loc194)
    cir.goto "source" loc(#loc195)
  ^bb1:  // no predecessors
    cir.label "source" loc(#loc118)
    %5 = cir.const #cir.int<7> : !s32i loc(#loc119)
    cir.store %5, %0 : !s32i, !cir.ptr<!s32i> loc(#loc196)
    cir.goto "sink" loc(#loc197)
  ^bb2:  // no predecessors
    cir.label "sink" loc(#loc123)
    %6 = cir.const #cir.zero : !cir.array<!s32i x 10> loc(#loc193)
    cir.store %6, %2 : !cir.array<!s32i x 10>, !cir.ptr<!cir.array<!s32i x 10>> loc(#loc193)
    cir.scope {
      %7 = cir.load %0 : !cir.ptr<!s32i>, !s32i loc(#loc126)
      %8 = cir.const #cir.int<0> : !s32i loc(#loc127)
      %9 = cir.cmp(ge, %7, %8) : !s32i, !cir.bool loc(#loc199)
      cir.if %9 {
        %10 = cir.const #cir.int<1> : !s32i loc(#loc131)
        %11 = cir.load %0 : !cir.ptr<!s32i>, !s32i loc(#loc132)
        %12 = cir.cast(array_to_ptrdecay, %2 : !cir.ptr<!cir.array<!s32i x 10>>), !cir.ptr<!s32i> loc(#loc133)
        %13 = cir.ptr_stride(%12 : !cir.ptr<!s32i>, %11 : !s32i), !cir.ptr<!s32i> loc(#loc133)
        cir.store %10, %13 : !s32i, !cir.ptr<!s32i> loc(#loc201)
        cir.scope {
          %14 = cir.const #cir.int<0> : !s32i loc(#loc136)
          cir.store %14, %1 : !s32i, !cir.ptr<!s32i> loc(#loc203)
          cir.for : cond {
            %15 = cir.load %1 : !cir.ptr<!s32i>, !s32i loc(#loc138)
            %16 = cir.const #cir.int<10> : !s32i loc(#loc139)
            %17 = cir.cmp(lt, %15, %16) : !s32i, !cir.bool loc(#loc204)
            cir.condition(%17) loc(#loc140)
          } body {
            cir.scope {
              %15 = cir.load %1 : !cir.ptr<!s32i>, !s32i loc(#loc142)
              %16 = cir.cast(array_to_ptrdecay, %2 : !cir.ptr<!cir.array<!s32i x 10>>), !cir.ptr<!s32i> loc(#loc143)
              %17 = cir.ptr_stride(%16 : !cir.ptr<!s32i>, %15 : !s32i), !cir.ptr<!s32i> loc(#loc143)
              %18 = cir.load %17 : !cir.ptr<!s32i>, !s32i loc(#loc143)
              cir.call @printIntLine(%18) : (!s32i) -> () loc(#loc144)
            } loc(#loc205)
            cir.yield loc(#loc135)
          } step {
            %15 = cir.load %1 : !cir.ptr<!s32i>, !s32i loc(#loc145)
            %16 = cir.unary(inc, %15) nsw : !s32i, !s32i loc(#loc146)
            cir.store %16, %1 : !s32i, !cir.ptr<!s32i> loc(#loc206)
            cir.yield loc(#loc202)
          } loc(#loc202)
        } loc(#loc202)
      } else {
        %10 = cir.get_global @".str" : !cir.ptr<!cir.array<!s8i x 32>> loc(#loc147)
        %11 = cir.cast(array_to_ptrdecay, %10 : !cir.ptr<!cir.array<!s8i x 32>>), !cir.ptr<!s8i> loc(#loc147)
        cir.call @printLine(%11) : (!cir.ptr<!s8i>) -> () loc(#loc148)
      } loc(#loc200)
    } loc(#loc198)
    cir.return loc(#loc106)
  } loc(#loc190)
} loc(#loc)
#loc = loc("/workspaces/juliet-c/testcases/CWE121_Stack_Based_Buffer_Overflow/s01/CWE121_Stack_Based_Buffer_Overflow__CWE129_rand_18.c":0:0)
#loc1 = loc("/usr/include/stdlib.h":573:1)
#loc2 = loc("/usr/include/stdlib.h":573:24)
#loc3 = loc("../../../testcasesupport/std_testcase_io.h":18:1)
#loc4 = loc("../../../testcasesupport/std_testcase_io.h":18:33)
#loc5 = loc("../../../testcasesupport/std_testcase_io.h":14:1)
#loc6 = loc("../../../testcasesupport/std_testcase_io.h":14:33)
#loc7 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE129_rand_18.c":49:23)
#loc8 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE129_rand_18.c":22:1)
#loc9 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE129_rand_18.c":52:1)
#loc10 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE129_rand_18.c":24:5)
#loc11 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE129_rand_18.c":24:9)
#loc12 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE129_rand_18.c":34:9)
#loc13 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE129_rand_18.c":34:13)
#loc14 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE129_rand_18.c":35:9)
#loc15 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE129_rand_18.c":35:30)
#loc16 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE129_rand_18.c":26:13)
#loc17 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE129_rand_18.c":26:12)
#loc18 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE129_rand_18.c":26:5)
#loc19 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE129_rand_18.c":27:5)
#loc20 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE129_rand_18.c":27:10)
#loc21 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE129_rand_18.c":28:1)
#loc22 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE129_rand_18.c":30:12)
#loc23 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE129_rand_18.c":30:5)
#loc24 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE129_rand_18.c":31:5)
#loc25 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE129_rand_18.c":31:10)
#loc26 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE129_rand_18.c":32:1)
#loc27 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE129_rand_18.c":38:9)
#loc28 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE129_rand_18.c":50:9)
#loc29 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE129_rand_18.c":38:13)
#loc30 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE129_rand_18.c":38:21)
#loc31 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE129_rand_18.c":39:9)
#loc32 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE129_rand_18.c":46:9)
#loc33 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE129_rand_18.c":48:9)
#loc34 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE129_rand_18.c":40:28)
#loc35 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE129_rand_18.c":40:20)
#loc36 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE129_rand_18.c":40:13)
#loc37 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE129_rand_18.c":42:13)
#loc38 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE129_rand_18.c":45:13)
#loc39 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE129_rand_18.c":42:21)
#loc40 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE129_rand_18.c":42:17)
#loc41 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE129_rand_18.c":42:24)
#loc42 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE129_rand_18.c":42:28)
#loc43 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE129_rand_18.c":42:26)
#loc44 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE129_rand_18.c":43:13)
#loc45 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE129_rand_18.c":44:37)
#loc46 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE129_rand_18.c":44:30)
#loc47 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE129_rand_18.c":44:17)
#loc48 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE129_rand_18.c":42:33)
#loc49 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE129_rand_18.c":42:32)
#loc50 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE129_rand_18.c":49:13)
#loc51 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE129_rand_18.c":124:1)
#loc52 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE129_rand_18.c":128:1)
#loc53 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE129_rand_18.c":126:5)
#loc54 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE129_rand_18.c":126:13)
#loc55 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE129_rand_18.c":127:5)
#loc56 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE129_rand_18.c":127:13)
#loc57 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE129_rand_18.c":85:23)
#loc58 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE129_rand_18.c":59:1)
#loc59 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE129_rand_18.c":88:1)
#loc60 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE129_rand_18.c":61:5)
#loc61 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE129_rand_18.c":61:9)
#loc62 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE129_rand_18.c":71:9)
#loc63 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE129_rand_18.c":71:13)
#loc64 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE129_rand_18.c":72:9)
#loc65 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE129_rand_18.c":72:30)
#loc66 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE129_rand_18.c":63:13)
#loc67 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE129_rand_18.c":63:12)
#loc68 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE129_rand_18.c":63:5)
#loc69 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE129_rand_18.c":64:5)
#loc70 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE129_rand_18.c":64:10)
#loc71 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE129_rand_18.c":65:1)
#loc72 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE129_rand_18.c":67:12)
#loc73 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE129_rand_18.c":67:5)
#loc74 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE129_rand_18.c":68:5)
#loc75 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE129_rand_18.c":68:10)
#loc76 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE129_rand_18.c":69:1)
#loc77 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE129_rand_18.c":74:9)
#loc78 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE129_rand_18.c":86:9)
#loc79 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE129_rand_18.c":74:13)
#loc80 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE129_rand_18.c":74:21)
#loc81 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE129_rand_18.c":74:23)
#loc82 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE129_rand_18.c":74:26)
#loc83 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE129_rand_18.c":74:34)
#loc84 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE129_rand_18.c":74:36)
#loc85 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE129_rand_18.c":75:9)
#loc86 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE129_rand_18.c":82:9)
#loc87 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE129_rand_18.c":84:9)
#loc88 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE129_rand_18.c":76:28)
#loc89 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE129_rand_18.c":76:20)
#loc90 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE129_rand_18.c":76:13)
#loc91 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE129_rand_18.c":78:13)
#loc92 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE129_rand_18.c":81:13)
#loc93 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE129_rand_18.c":78:21)
#loc94 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE129_rand_18.c":78:17)
#loc95 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE129_rand_18.c":78:24)
#loc96 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE129_rand_18.c":78:28)
#loc97 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE129_rand_18.c":78:26)
#loc98 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE129_rand_18.c":79:13)
#loc99 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE129_rand_18.c":80:37)
#loc100 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE129_rand_18.c":80:30)
#loc101 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE129_rand_18.c":80:17)
#loc102 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE129_rand_18.c":78:33)
#loc103 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE129_rand_18.c":78:32)
#loc104 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE129_rand_18.c":85:13)
#loc105 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE129_rand_18.c":91:1)
#loc106 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE129_rand_18.c":122:1)
#loc107 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE129_rand_18.c":93:5)
#loc108 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE129_rand_18.c":93:9)
#loc109 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE129_rand_18.c":104:9)
#loc110 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE129_rand_18.c":104:13)
#loc111 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE129_rand_18.c":105:9)
#loc112 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE129_rand_18.c":105:30)
#loc113 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE129_rand_18.c":95:13)
#loc114 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE129_rand_18.c":95:12)
#loc115 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE129_rand_18.c":95:5)
#loc116 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE129_rand_18.c":96:5)
#loc117 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE129_rand_18.c":96:10)
#loc118 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE129_rand_18.c":97:1)
#loc119 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE129_rand_18.c":100:12)
#loc120 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE129_rand_18.c":100:5)
#loc121 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE129_rand_18.c":101:5)
#loc122 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE129_rand_18.c":101:10)
#loc123 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE129_rand_18.c":102:1)
#loc124 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE129_rand_18.c":108:9)
#loc125 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE129_rand_18.c":120:9)
#loc126 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE129_rand_18.c":108:13)
#loc127 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE129_rand_18.c":108:21)
#loc128 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE129_rand_18.c":109:9)
#loc129 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE129_rand_18.c":116:9)
#loc130 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE129_rand_18.c":118:9)
#loc131 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE129_rand_18.c":110:28)
#loc132 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE129_rand_18.c":110:20)
#loc133 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE129_rand_18.c":110:13)
#loc134 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE129_rand_18.c":112:13)
#loc135 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE129_rand_18.c":115:13)
#loc136 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE129_rand_18.c":112:21)
#loc137 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE129_rand_18.c":112:17)
#loc138 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE129_rand_18.c":112:24)
#loc139 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE129_rand_18.c":112:28)
#loc140 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE129_rand_18.c":112:26)
#loc141 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE129_rand_18.c":113:13)
#loc142 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE129_rand_18.c":114:37)
#loc143 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE129_rand_18.c":114:30)
#loc144 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE129_rand_18.c":114:17)
#loc145 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE129_rand_18.c":112:33)
#loc146 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE129_rand_18.c":112:32)
#loc147 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE129_rand_18.c":119:23)
#loc148 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE129_rand_18.c":119:13)
#loc149 = loc(fused[#loc1, #loc2])
#loc150 = loc(fused[#loc3, #loc4])
#loc151 = loc(fused[#loc5, #loc6])
#loc152 = loc(fused[#loc8, #loc9])
#loc153 = loc(fused[#loc10, #loc11])
#loc154 = loc(fused[#loc12, #loc13])
#loc155 = loc(fused[#loc14, #loc15])
#loc156 = loc(fused[#loc18, #loc16])
#loc157 = loc(fused[#loc19, #loc20])
#loc158 = loc(fused[#loc23, #loc22])
#loc159 = loc(fused[#loc24, #loc25])
#loc160 = loc(fused[#loc27, #loc28])
#loc161 = loc(fused[#loc29, #loc30])
#loc162 = loc(fused[#loc31, #loc32, #loc33, #loc28])
#loc163 = loc(fused[#loc36, #loc34])
#loc164 = loc(fused[#loc37, #loc38])
#loc165 = loc(fused[#loc40, #loc39])
#loc166 = loc(fused[#loc41, #loc42])
#loc167 = loc(fused[#loc44, #loc38])
#loc168 = loc(fused[#loc49, #loc48])
#loc169 = loc(fused[#loc51, #loc52])
#loc170 = loc(fused[#loc53, #loc54])
#loc171 = loc(fused[#loc55, #loc56])
#loc172 = loc(fused[#loc58, #loc59])
#loc173 = loc(fused[#loc60, #loc61])
#loc174 = loc(fused[#loc62, #loc63])
#loc175 = loc(fused[#loc64, #loc65])
#loc176 = loc(fused[#loc68, #loc66])
#loc177 = loc(fused[#loc69, #loc70])
#loc178 = loc(fused[#loc73, #loc72])
#loc179 = loc(fused[#loc74, #loc75])
#loc180 = loc(fused[#loc77, #loc78])
#loc181 = loc(fused[#loc79, #loc80])
#loc182 = loc(fused[#loc82, #loc84])
#loc183 = loc(fused[#loc85, #loc86, #loc87, #loc78])
#loc184 = loc(fused[#loc90, #loc88])
#loc185 = loc(fused[#loc91, #loc92])
#loc186 = loc(fused[#loc94, #loc93])
#loc187 = loc(fused[#loc95, #loc96])
#loc188 = loc(fused[#loc98, #loc92])
#loc189 = loc(fused[#loc103, #loc102])
#loc190 = loc(fused[#loc105, #loc106])
#loc191 = loc(fused[#loc107, #loc108])
#loc192 = loc(fused[#loc109, #loc110])
#loc193 = loc(fused[#loc111, #loc112])
#loc194 = loc(fused[#loc115, #loc113])
#loc195 = loc(fused[#loc116, #loc117])
#loc196 = loc(fused[#loc120, #loc119])
#loc197 = loc(fused[#loc121, #loc122])
#loc198 = loc(fused[#loc124, #loc125])
#loc199 = loc(fused[#loc126, #loc127])
#loc200 = loc(fused[#loc128, #loc129, #loc130, #loc125])
#loc201 = loc(fused[#loc133, #loc131])
#loc202 = loc(fused[#loc134, #loc135])
#loc203 = loc(fused[#loc137, #loc136])
#loc204 = loc(fused[#loc138, #loc139])
#loc205 = loc(fused[#loc141, #loc135])
#loc206 = loc(fused[#loc146, #loc145])
