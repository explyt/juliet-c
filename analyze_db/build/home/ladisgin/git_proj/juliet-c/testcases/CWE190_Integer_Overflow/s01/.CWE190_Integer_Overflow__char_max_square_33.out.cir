!s32i = !cir.int<s, 32>
!s64i = !cir.int<s, 64>
!s8i = !cir.int<s, 8>
!u32i = !cir.int<u, 32>
#fn_attr = #cir<extra({inline = #cir.inline<no>, optnone = #cir.optnone})>
#fn_attr1 = #cir<extra({nothrow = #cir.nothrow})>
#loc47 = loc("/usr/lib/gcc/x86_64-redhat-linux/14/../../../../include/c++/14/bits/std_abs.h":56:7)
#loc48 = loc("/usr/lib/gcc/x86_64-redhat-linux/14/../../../../include/c++/14/bits/std_abs.h":56:12)
#loc102 = loc("CWE190_Integer_Overflow__char_max_square_33.cpp":107:10)
#loc103 = loc("CWE190_Integer_Overflow__char_max_square_33.cpp":107:14)
#loc104 = loc("CWE190_Integer_Overflow__char_max_square_33.cpp":107:20)
#loc105 = loc("CWE190_Integer_Overflow__char_max_square_33.cpp":107:32)
#loc138 = loc(fused[#loc47, #loc48])
#loc156 = loc(fused[#loc102, #loc103])
#loc157 = loc(fused[#loc104, #loc105])
module @"/home/ladisgin/git_proj/juliet-c/testcases/CWE190_Integer_Overflow/s01/CWE190_Integer_Overflow__char_max_square_33.cpp" attributes {cir.lang = #cir.lang<cxx>, cir.sob = #cir.signed_overflow_behavior<undefined>, cir.triple = "x86_64-unknown-linux-gnu", dlti.dl_spec = #dlti.dl_spec<f128 = dense<128> : vector<2xi64>, !llvm.ptr<270> = dense<32> : vector<4xi64>, f64 = dense<64> : vector<2xi64>, f16 = dense<16> : vector<2xi64>, i32 = dense<32> : vector<2xi64>, i16 = dense<16> : vector<2xi64>, i8 = dense<8> : vector<2xi64>, i1 = dense<8> : vector<2xi64>, !llvm.ptr = dense<64> : vector<4xi64>, f80 = dense<128> : vector<2xi64>, i128 = dense<128> : vector<2xi64>, i64 = dense<64> : vector<2xi64>, !llvm.ptr<271> = dense<32> : vector<4xi64>, !llvm.ptr<272> = dense<64> : vector<4xi64>, "dlti.endianness" = "little", "dlti.stack_alignment" = 128 : i64>} {
  cir.func private @printHexCharLine(!s8i) loc(#loc118)
  cir.func @_ZN43CWE190_Integer_Overflow__char_max_square_333badEv() extra(#fn_attr) {
    %0 = cir.alloca !s8i, !cir.ptr<!s8i>, ["data", init] {alignment = 1 : i64} loc(#loc120)
    %1 = cir.alloca !s8i, !cir.ptr<!s8i>, ["result", init] {alignment = 1 : i64} loc(#loc121)
    %2 = cir.alloca !s8i, !cir.ptr<!s8i>, ["data"] {alignment = 1 : i64} loc(#loc122)
    %3 = cir.alloca !cir.ptr<!s8i>, !cir.ptr<!cir.ptr<!s8i>>, ["dataRef", init, const] {alignment = 8 : i64} loc(#loc123)
    cir.store %2, %3 : !cir.ptr<!s8i>, !cir.ptr<!cir.ptr<!s8i>> loc(#loc12)
    %4 = cir.const #cir.int<32> : !s8i loc(#loc13)
    cir.store %4, %2 : !s8i, !cir.ptr<!s8i> loc(#loc124)
    %5 = cir.const #cir.int<127> : !s32i loc(#loc15)
    %6 = cir.cast(integral, %5 : !s32i), !s8i loc(#loc15)
    cir.store %6, %2 : !s8i, !cir.ptr<!s8i> loc(#loc125)
    cir.br ^bb1 loc(#loc126)
  ^bb1:  // pred: ^bb0
    %7 = cir.load %3 : !cir.ptr<!cir.ptr<!s8i>>, !cir.ptr<!s8i> loc(#loc6)
    %8 = cir.load %7 : !cir.ptr<!s8i>, !s8i loc(#loc6)
    cir.store %8, %0 : !s8i, !cir.ptr<!s8i> loc(#loc120)
    cir.br ^bb2 loc(#loc127)
  ^bb2:  // pred: ^bb1
    %9 = cir.load %0 : !cir.ptr<!s8i>, !s8i loc(#loc21)
    %10 = cir.cast(integral, %9 : !s8i), !s32i loc(#loc21)
    %11 = cir.load %0 : !cir.ptr<!s8i>, !s8i loc(#loc8)
    %12 = cir.cast(integral, %11 : !s8i), !s32i loc(#loc8)
    %13 = cir.binop(mul, %10, %12) nsw : !s32i loc(#loc21)
    %14 = cir.cast(integral, %13 : !s32i), !s8i loc(#loc21)
    cir.store %14, %1 : !s8i, !cir.ptr<!s8i> loc(#loc121)
    %15 = cir.load %1 : !cir.ptr<!s8i>, !s8i loc(#loc22)
    cir.call @printHexCharLine(%15) : (!s8i) -> () loc(#loc23)
    cir.br ^bb3 loc(#loc20)
  ^bb3:  // pred: ^bb2
    cir.br ^bb4 loc(#loc18)
  ^bb4:  // pred: ^bb3
    cir.return loc(#loc4)
  } loc(#loc119)
  cir.func internal private @_ZN43CWE190_Integer_Overflow__char_max_square_33L7goodG2BEv() extra(#fn_attr) {
    %0 = cir.alloca !s8i, !cir.ptr<!s8i>, ["data", init] {alignment = 1 : i64} loc(#loc129)
    %1 = cir.alloca !s8i, !cir.ptr<!s8i>, ["result", init] {alignment = 1 : i64} loc(#loc130)
    %2 = cir.alloca !s8i, !cir.ptr<!s8i>, ["data"] {alignment = 1 : i64} loc(#loc131)
    %3 = cir.alloca !cir.ptr<!s8i>, !cir.ptr<!cir.ptr<!s8i>>, ["dataRef", init, const] {alignment = 8 : i64} loc(#loc132)
    cir.store %2, %3 : !cir.ptr<!s8i>, !cir.ptr<!cir.ptr<!s8i>> loc(#loc33)
    %4 = cir.const #cir.int<32> : !s8i loc(#loc34)
    cir.store %4, %2 : !s8i, !cir.ptr<!s8i> loc(#loc133)
    %5 = cir.const #cir.int<2> : !s32i loc(#loc36)
    %6 = cir.cast(integral, %5 : !s32i), !s8i loc(#loc36)
    cir.store %6, %2 : !s8i, !cir.ptr<!s8i> loc(#loc134)
    cir.br ^bb1 loc(#loc135)
  ^bb1:  // pred: ^bb0
    %7 = cir.load %3 : !cir.ptr<!cir.ptr<!s8i>>, !cir.ptr<!s8i> loc(#loc27)
    %8 = cir.load %7 : !cir.ptr<!s8i>, !s8i loc(#loc27)
    cir.store %8, %0 : !s8i, !cir.ptr<!s8i> loc(#loc129)
    cir.br ^bb2 loc(#loc136)
  ^bb2:  // pred: ^bb1
    %9 = cir.load %0 : !cir.ptr<!s8i>, !s8i loc(#loc42)
    %10 = cir.cast(integral, %9 : !s8i), !s32i loc(#loc42)
    %11 = cir.load %0 : !cir.ptr<!s8i>, !s8i loc(#loc29)
    %12 = cir.cast(integral, %11 : !s8i), !s32i loc(#loc29)
    %13 = cir.binop(mul, %10, %12) nsw : !s32i loc(#loc42)
    %14 = cir.cast(integral, %13 : !s32i), !s8i loc(#loc42)
    cir.store %14, %1 : !s8i, !cir.ptr<!s8i> loc(#loc130)
    %15 = cir.load %1 : !cir.ptr<!s8i>, !s8i loc(#loc43)
    cir.call @printHexCharLine(%15) : (!s8i) -> () loc(#loc44)
    cir.br ^bb3 loc(#loc41)
  ^bb3:  // pred: ^bb2
    cir.br ^bb4 loc(#loc39)
  ^bb4:  // pred: ^bb3
    cir.return loc(#loc25)
  } loc(#loc128)
  cir.func linkonce_odr @_ZSt3absl(%arg0: !s64i loc(fused[#loc47, #loc48])) -> !s64i extra(#fn_attr) {
    %0 = cir.alloca !s64i, !cir.ptr<!s64i>, ["__i", init] {alignment = 8 : i64} loc(#loc138)
    %1 = cir.alloca !s64i, !cir.ptr<!s64i>, ["__retval"] {alignment = 8 : i64} loc(#loc46)
    cir.store %arg0, %0 : !s64i, !cir.ptr<!s64i> loc(#loc49)
    %2 = cir.load %0 : !cir.ptr<!s64i>, !s64i loc(#loc50)
    %3 = cir.abs %2 poison : !s64i loc(#loc51)
    cir.store %3, %1 : !s64i, !cir.ptr<!s64i> loc(#loc139)
    %4 = cir.load %1 : !cir.ptr<!s64i>, !s64i loc(#loc139)
    cir.return %4 : !s64i loc(#loc139)
  } loc(#loc137)
  cir.func private @sqrt(!cir.double) -> !cir.double extra(#fn_attr1) loc(#loc54)
  cir.global "private" constant cir_private dsolocal @".str.4" = #cir.const_array<"data value is too large to perform arithmetic safely.\00" : !cir.array<!s8i x 54>> : !cir.array<!s8i x 54> {alignment = 1 : i64} loc(#loc55)
  cir.func internal private @_ZN43CWE190_Integer_Overflow__char_max_square_33L7goodB2GEv() extra(#fn_attr) {
    %0 = cir.alloca !s8i, !cir.ptr<!s8i>, ["data", init] {alignment = 1 : i64} loc(#loc141)
    %1 = cir.alloca !s8i, !cir.ptr<!s8i>, ["result", init] {alignment = 1 : i64} loc(#loc142)
    %2 = cir.alloca !s8i, !cir.ptr<!s8i>, ["data"] {alignment = 1 : i64} loc(#loc143)
    %3 = cir.alloca !cir.ptr<!s8i>, !cir.ptr<!cir.ptr<!s8i>>, ["dataRef", init, const] {alignment = 8 : i64} loc(#loc144)
    cir.store %2, %3 : !cir.ptr<!s8i>, !cir.ptr<!cir.ptr<!s8i>> loc(#loc65)
    %4 = cir.const #cir.int<32> : !s8i loc(#loc66)
    cir.store %4, %2 : !s8i, !cir.ptr<!s8i> loc(#loc145)
    %5 = cir.const #cir.int<127> : !s32i loc(#loc68)
    %6 = cir.cast(integral, %5 : !s32i), !s8i loc(#loc68)
    cir.store %6, %2 : !s8i, !cir.ptr<!s8i> loc(#loc146)
    cir.br ^bb1 loc(#loc147)
  ^bb1:  // pred: ^bb0
    %7 = cir.load %3 : !cir.ptr<!cir.ptr<!s8i>>, !cir.ptr<!s8i> loc(#loc59)
    %8 = cir.load %7 : !cir.ptr<!s8i>, !s8i loc(#loc59)
    cir.store %8, %0 : !s8i, !cir.ptr<!s8i> loc(#loc141)
    cir.br ^bb2 loc(#loc148)
  ^bb2:  // pred: ^bb1
    %9 = cir.load %0 : !cir.ptr<!s8i>, !s8i loc(#loc74)
    %10 = cir.cast(integral, %9 : !s8i), !s64i loc(#loc74)
    %11 = cir.call @_ZSt3absl(%10) : (!s64i) -> !s64i loc(#loc75)
    %12 = cir.get_global @sqrt : !cir.ptr<!cir.func<!cir.double (!cir.double)>> loc(#loc76)
    %13 = cir.const #cir.int<127> : !s32i loc(#loc77)
    %14 = cir.cast(int_to_float, %13 : !s32i), !cir.double loc(#loc77)
    %15 = cir.call @sqrt(%14) : (!cir.double) -> !cir.double extra(#fn_attr1) loc(#loc76)
    %16 = cir.cast(float_to_int, %15 : !cir.double), !s64i loc(#loc76)
    %17 = cir.cmp(le, %11, %16) : !s64i, !cir.bool loc(#loc149)
    cir.brcond %17 ^bb3, ^bb4 loc(#loc150)
  ^bb3:  // pred: ^bb2
    %18 = cir.load %0 : !cir.ptr<!s8i>, !s8i loc(#loc82)
    %19 = cir.cast(integral, %18 : !s8i), !s32i loc(#loc82)
    %20 = cir.load %0 : !cir.ptr<!s8i>, !s8i loc(#loc61)
    %21 = cir.cast(integral, %20 : !s8i), !s32i loc(#loc61)
    %22 = cir.binop(mul, %19, %21) nsw : !s32i loc(#loc82)
    %23 = cir.cast(integral, %22 : !s32i), !s8i loc(#loc82)
    cir.store %23, %1 : !s8i, !cir.ptr<!s8i> loc(#loc142)
    %24 = cir.load %1 : !cir.ptr<!s8i>, !s8i loc(#loc83)
    cir.call @printHexCharLine(%24) : (!s8i) -> () loc(#loc84)
    cir.br ^bb5 loc(#loc80)
  ^bb4:  // pred: ^bb2
    %25 = cir.get_global @".str.4" : !cir.ptr<!cir.array<!s8i x 54>> loc(#loc55)
    %26 = cir.cast(array_to_ptrdecay, %25 : !cir.ptr<!cir.array<!s8i x 54>>), !cir.ptr<!s8i> loc(#loc55)
    cir.call @printLine(%26) : (!cir.ptr<!s8i>) -> () loc(#loc85)
    cir.br ^bb5 loc(#loc73)
  ^bb5:  // 2 preds: ^bb3, ^bb4
    cir.br ^bb6 loc(#loc73)
  ^bb6:  // pred: ^bb5
    cir.br ^bb7 loc(#loc71)
  ^bb7:  // pred: ^bb6
    cir.return loc(#loc57)
  } loc(#loc140)
  cir.func @_ZN43CWE190_Integer_Overflow__char_max_square_334goodEv() extra(#fn_attr) {
    cir.call @_ZN43CWE190_Integer_Overflow__char_max_square_33L7goodG2BEv() : () -> () loc(#loc88)
    cir.call @_ZN43CWE190_Integer_Overflow__char_max_square_33L7goodB2GEv() : () -> () loc(#loc89)
    cir.return loc(#loc87)
  } loc(#loc151)
  cir.func private @srand(!u32i) extra(#fn_attr1) loc(#loc152)
  cir.func private @time(!cir.ptr<!s64i>) -> !s64i extra(#fn_attr1) loc(#loc153)
  cir.func private @printLine(!cir.ptr<!s8i>) loc(#loc154)
  cir.global "private" constant cir_private dsolocal @".str" = #cir.const_array<"Calling good()...\00" : !cir.array<!s8i x 18>> : !cir.array<!s8i x 18> {alignment = 1 : i64} loc(#loc96)
  cir.global "private" constant cir_private dsolocal @".str.1" = #cir.const_array<"Finished good()\00" : !cir.array<!s8i x 16>> : !cir.array<!s8i x 16> {alignment = 1 : i64} loc(#loc97)
  cir.global "private" constant cir_private dsolocal @".str.2" = #cir.const_array<"Calling bad()...\00" : !cir.array<!s8i x 17>> : !cir.array<!s8i x 17> {alignment = 1 : i64} loc(#loc98)
  cir.global "private" constant cir_private dsolocal @".str.3" = #cir.const_array<"Finished bad()\00" : !cir.array<!s8i x 15>> : !cir.array<!s8i x 15> {alignment = 1 : i64} loc(#loc99)
  cir.func @main(%arg0: !s32i loc(fused[#loc102, #loc103]), %arg1: !cir.ptr<!cir.ptr<!s8i>> loc(fused[#loc104, #loc105])) -> !s32i extra(#fn_attr) {
    %0 = cir.alloca !s32i, !cir.ptr<!s32i>, ["argc", init] {alignment = 4 : i64} loc(#loc156)
    %1 = cir.alloca !cir.ptr<!cir.ptr<!s8i>>, !cir.ptr<!cir.ptr<!cir.ptr<!s8i>>>, ["argv", init] {alignment = 8 : i64} loc(#loc157)
    %2 = cir.alloca !s32i, !cir.ptr<!s32i>, ["__retval"] {alignment = 4 : i64} loc(#loc101)
    cir.store %arg0, %0 : !s32i, !cir.ptr<!s32i> loc(#loc106)
    cir.store %arg1, %1 : !cir.ptr<!cir.ptr<!s8i>>, !cir.ptr<!cir.ptr<!cir.ptr<!s8i>>> loc(#loc106)
    %3 = cir.const #cir.ptr<null> : !cir.ptr<!s64i> loc(#loc107)
    %4 = cir.call @time(%3) : (!cir.ptr<!s64i>) -> !s64i extra(#fn_attr1) loc(#loc108)
    %5 = cir.cast(integral, %4 : !s64i), !u32i loc(#loc108)
    cir.call @srand(%5) : (!u32i) -> () extra(#fn_attr1) loc(#loc109)
    %6 = cir.get_global @".str" : !cir.ptr<!cir.array<!s8i x 18>> loc(#loc96)
    %7 = cir.cast(array_to_ptrdecay, %6 : !cir.ptr<!cir.array<!s8i x 18>>), !cir.ptr<!s8i> loc(#loc96)
    cir.call @printLine(%7) : (!cir.ptr<!s8i>) -> () loc(#loc110)
    cir.call @_ZN43CWE190_Integer_Overflow__char_max_square_334goodEv() : () -> () loc(#loc111)
    %8 = cir.get_global @".str.1" : !cir.ptr<!cir.array<!s8i x 16>> loc(#loc97)
    %9 = cir.cast(array_to_ptrdecay, %8 : !cir.ptr<!cir.array<!s8i x 16>>), !cir.ptr<!s8i> loc(#loc97)
    cir.call @printLine(%9) : (!cir.ptr<!s8i>) -> () loc(#loc112)
    %10 = cir.get_global @".str.2" : !cir.ptr<!cir.array<!s8i x 17>> loc(#loc98)
    %11 = cir.cast(array_to_ptrdecay, %10 : !cir.ptr<!cir.array<!s8i x 17>>), !cir.ptr<!s8i> loc(#loc98)
    cir.call @printLine(%11) : (!cir.ptr<!s8i>) -> () loc(#loc113)
    cir.call @_ZN43CWE190_Integer_Overflow__char_max_square_333badEv() : () -> () loc(#loc114)
    %12 = cir.get_global @".str.3" : !cir.ptr<!cir.array<!s8i x 15>> loc(#loc99)
    %13 = cir.cast(array_to_ptrdecay, %12 : !cir.ptr<!cir.array<!s8i x 15>>), !cir.ptr<!s8i> loc(#loc99)
    cir.call @printLine(%13) : (!cir.ptr<!s8i>) -> () loc(#loc115)
    %14 = cir.const #cir.int<0> : !s32i loc(#loc116)
    cir.store %14, %2 : !s32i, !cir.ptr<!s32i> loc(#loc158)
    %15 = cir.load %2 : !cir.ptr<!s32i>, !s32i loc(#loc158)
    cir.return %15 : !s32i loc(#loc158)
  } loc(#loc155)
} loc(#loc)
#loc = loc("/home/ladisgin/git_proj/juliet-c/testcases/CWE190_Integer_Overflow/s01/CWE190_Integer_Overflow__char_max_square_33.cpp":0:0)
#loc1 = loc("../../../testcasesupport/std_testcase_io.h":30:1)
#loc2 = loc("../../../testcasesupport/std_testcase_io.h":30:35)
#loc3 = loc("CWE190_Integer_Overflow__char_max_square_33.cpp":27:1)
#loc4 = loc("CWE190_Integer_Overflow__char_max_square_33.cpp":42:1)
#loc5 = loc("CWE190_Integer_Overflow__char_max_square_33.cpp":35:9)
#loc6 = loc("CWE190_Integer_Overflow__char_max_square_33.cpp":35:21)
#loc7 = loc("CWE190_Integer_Overflow__char_max_square_33.cpp":38:13)
#loc8 = loc("CWE190_Integer_Overflow__char_max_square_33.cpp":38:34)
#loc9 = loc("CWE190_Integer_Overflow__char_max_square_33.cpp":29:5)
#loc10 = loc("CWE190_Integer_Overflow__char_max_square_33.cpp":29:10)
#loc11 = loc("CWE190_Integer_Overflow__char_max_square_33.cpp":30:5)
#loc12 = loc("CWE190_Integer_Overflow__char_max_square_33.cpp":30:21)
#loc13 = loc("CWE190_Integer_Overflow__char_max_square_33.cpp":31:12)
#loc14 = loc("CWE190_Integer_Overflow__char_max_square_33.cpp":31:5)
#loc15 = loc("CWE190_Integer_Overflow__char_max_square_33.cpp":33:12)
#loc16 = loc("CWE190_Integer_Overflow__char_max_square_33.cpp":33:5)
#loc17 = loc("CWE190_Integer_Overflow__char_max_square_33.cpp":34:5)
#loc18 = loc("CWE190_Integer_Overflow__char_max_square_33.cpp":41:5)
#loc19 = loc("CWE190_Integer_Overflow__char_max_square_33.cpp":36:9)
#loc20 = loc("CWE190_Integer_Overflow__char_max_square_33.cpp":40:9)
#loc21 = loc("CWE190_Integer_Overflow__char_max_square_33.cpp":38:27)
#loc22 = loc("CWE190_Integer_Overflow__char_max_square_33.cpp":39:30)
#loc23 = loc("CWE190_Integer_Overflow__char_max_square_33.cpp":39:13)
#loc24 = loc("CWE190_Integer_Overflow__char_max_square_33.cpp":49:1)
#loc25 = loc("CWE190_Integer_Overflow__char_max_square_33.cpp":64:1)
#loc26 = loc("CWE190_Integer_Overflow__char_max_square_33.cpp":57:9)
#loc27 = loc("CWE190_Integer_Overflow__char_max_square_33.cpp":57:21)
#loc28 = loc("CWE190_Integer_Overflow__char_max_square_33.cpp":60:13)
#loc29 = loc("CWE190_Integer_Overflow__char_max_square_33.cpp":60:34)
#loc30 = loc("CWE190_Integer_Overflow__char_max_square_33.cpp":51:5)
#loc31 = loc("CWE190_Integer_Overflow__char_max_square_33.cpp":51:10)
#loc32 = loc("CWE190_Integer_Overflow__char_max_square_33.cpp":52:5)
#loc33 = loc("CWE190_Integer_Overflow__char_max_square_33.cpp":52:21)
#loc34 = loc("CWE190_Integer_Overflow__char_max_square_33.cpp":53:12)
#loc35 = loc("CWE190_Integer_Overflow__char_max_square_33.cpp":53:5)
#loc36 = loc("CWE190_Integer_Overflow__char_max_square_33.cpp":55:12)
#loc37 = loc("CWE190_Integer_Overflow__char_max_square_33.cpp":55:5)
#loc38 = loc("CWE190_Integer_Overflow__char_max_square_33.cpp":56:5)
#loc39 = loc("CWE190_Integer_Overflow__char_max_square_33.cpp":63:5)
#loc40 = loc("CWE190_Integer_Overflow__char_max_square_33.cpp":58:9)
#loc41 = loc("CWE190_Integer_Overflow__char_max_square_33.cpp":62:9)
#loc42 = loc("CWE190_Integer_Overflow__char_max_square_33.cpp":60:27)
#loc43 = loc("CWE190_Integer_Overflow__char_max_square_33.cpp":61:30)
#loc44 = loc("CWE190_Integer_Overflow__char_max_square_33.cpp":61:13)
#loc45 = loc("/usr/lib/gcc/x86_64-redhat-linux/14/../../../../include/c++/14/bits/std_abs.h":55:3)
#loc46 = loc("/usr/lib/gcc/x86_64-redhat-linux/14/../../../../include/c++/14/bits/std_abs.h":56:47)
#loc49 = loc("/usr/lib/gcc/x86_64-redhat-linux/14/../../../../include/c++/14/bits/std_abs.h":56:17)
#loc50 = loc("/usr/lib/gcc/x86_64-redhat-linux/14/../../../../include/c++/14/bits/std_abs.h":56:41)
#loc51 = loc("/usr/lib/gcc/x86_64-redhat-linux/14/../../../../include/c++/14/bits/std_abs.h":56:26)
#loc52 = loc("/usr/lib/gcc/x86_64-redhat-linux/14/../../../../include/c++/14/bits/std_abs.h":56:19)
#loc53 = loc("/usr/lib/gcc/x86_64-redhat-linux/14/../../../../include/c++/14/bits/std_abs.h":56:44)
#loc54 = loc("/usr/include/bits/mathcalls.h":158:1)
#loc55 = loc("CWE190_Integer_Overflow__char_max_square_33.cpp":84:23)
#loc56 = loc("CWE190_Integer_Overflow__char_max_square_33.cpp":67:1)
#loc57 = loc("CWE190_Integer_Overflow__char_max_square_33.cpp":87:1)
#loc58 = loc("CWE190_Integer_Overflow__char_max_square_33.cpp":75:9)
#loc59 = loc("CWE190_Integer_Overflow__char_max_square_33.cpp":75:21)
#loc60 = loc("CWE190_Integer_Overflow__char_max_square_33.cpp":79:13)
#loc61 = loc("CWE190_Integer_Overflow__char_max_square_33.cpp":79:34)
#loc62 = loc("CWE190_Integer_Overflow__char_max_square_33.cpp":69:5)
#loc63 = loc("CWE190_Integer_Overflow__char_max_square_33.cpp":69:10)
#loc64 = loc("CWE190_Integer_Overflow__char_max_square_33.cpp":70:5)
#loc65 = loc("CWE190_Integer_Overflow__char_max_square_33.cpp":70:21)
#loc66 = loc("CWE190_Integer_Overflow__char_max_square_33.cpp":71:12)
#loc67 = loc("CWE190_Integer_Overflow__char_max_square_33.cpp":71:5)
#loc68 = loc("CWE190_Integer_Overflow__char_max_square_33.cpp":73:12)
#loc69 = loc("CWE190_Integer_Overflow__char_max_square_33.cpp":73:5)
#loc70 = loc("CWE190_Integer_Overflow__char_max_square_33.cpp":74:5)
#loc71 = loc("CWE190_Integer_Overflow__char_max_square_33.cpp":86:5)
#loc72 = loc("CWE190_Integer_Overflow__char_max_square_33.cpp":77:9)
#loc73 = loc("CWE190_Integer_Overflow__char_max_square_33.cpp":85:9)
#loc74 = loc("CWE190_Integer_Overflow__char_max_square_33.cpp":77:23)
#loc75 = loc("CWE190_Integer_Overflow__char_max_square_33.cpp":77:13)
#loc76 = loc("CWE190_Integer_Overflow__char_max_square_33.cpp":77:38)
#loc77 = loc("CWE190_Integer_Overflow__char_max_square_33.cpp":77:51)
#loc78 = loc("CWE190_Integer_Overflow__char_max_square_33.cpp":77:59)
#loc79 = loc("CWE190_Integer_Overflow__char_max_square_33.cpp":78:9)
#loc80 = loc("CWE190_Integer_Overflow__char_max_square_33.cpp":81:9)
#loc81 = loc("CWE190_Integer_Overflow__char_max_square_33.cpp":83:9)
#loc82 = loc("CWE190_Integer_Overflow__char_max_square_33.cpp":79:27)
#loc83 = loc("CWE190_Integer_Overflow__char_max_square_33.cpp":80:30)
#loc84 = loc("CWE190_Integer_Overflow__char_max_square_33.cpp":80:13)
#loc85 = loc("CWE190_Integer_Overflow__char_max_square_33.cpp":84:13)
#loc86 = loc("CWE190_Integer_Overflow__char_max_square_33.cpp":89:1)
#loc87 = loc("CWE190_Integer_Overflow__char_max_square_33.cpp":93:1)
#loc88 = loc("CWE190_Integer_Overflow__char_max_square_33.cpp":91:5)
#loc89 = loc("CWE190_Integer_Overflow__char_max_square_33.cpp":92:5)
#loc90 = loc("/usr/include/stdlib.h":575:1)
#loc91 = loc("/usr/include/stdlib.h":575:41)
#loc92 = loc("/usr/include/time.h":76:1)
#loc93 = loc("/usr/include/time.h":76:38)
#loc94 = loc("../../../testcasesupport/std_testcase_io.h":14:1)
#loc95 = loc("../../../testcasesupport/std_testcase_io.h":14:33)
#loc96 = loc("CWE190_Integer_Overflow__char_max_square_33.cpp":112:15)
#loc97 = loc("CWE190_Integer_Overflow__char_max_square_33.cpp":114:15)
#loc98 = loc("CWE190_Integer_Overflow__char_max_square_33.cpp":117:15)
#loc99 = loc("CWE190_Integer_Overflow__char_max_square_33.cpp":119:15)
#loc100 = loc("CWE190_Integer_Overflow__char_max_square_33.cpp":107:1)
#loc101 = loc("CWE190_Integer_Overflow__char_max_square_33.cpp":122:1)
#loc106 = loc("CWE190_Integer_Overflow__char_max_square_33.cpp":108:1)
#loc107 = loc("CWE190_Integer_Overflow__char_max_square_33.cpp":110:27)
#loc108 = loc("CWE190_Integer_Overflow__char_max_square_33.cpp":110:22)
#loc109 = loc("CWE190_Integer_Overflow__char_max_square_33.cpp":110:5)
#loc110 = loc("CWE190_Integer_Overflow__char_max_square_33.cpp":112:5)
#loc111 = loc("CWE190_Integer_Overflow__char_max_square_33.cpp":113:5)
#loc112 = loc("CWE190_Integer_Overflow__char_max_square_33.cpp":114:5)
#loc113 = loc("CWE190_Integer_Overflow__char_max_square_33.cpp":117:5)
#loc114 = loc("CWE190_Integer_Overflow__char_max_square_33.cpp":118:5)
#loc115 = loc("CWE190_Integer_Overflow__char_max_square_33.cpp":119:5)
#loc116 = loc("CWE190_Integer_Overflow__char_max_square_33.cpp":121:12)
#loc117 = loc("CWE190_Integer_Overflow__char_max_square_33.cpp":121:5)
#loc118 = loc(fused[#loc1, #loc2])
#loc119 = loc(fused[#loc3, #loc4])
#loc120 = loc(fused[#loc5, #loc6])
#loc121 = loc(fused[#loc7, #loc8])
#loc122 = loc(fused[#loc9, #loc10])
#loc123 = loc(fused[#loc11, #loc12])
#loc124 = loc(fused[#loc14, #loc13])
#loc125 = loc(fused[#loc16, #loc15])
#loc126 = loc(fused[#loc17, #loc18])
#loc127 = loc(fused[#loc19, #loc20])
#loc128 = loc(fused[#loc24, #loc25])
#loc129 = loc(fused[#loc26, #loc27])
#loc130 = loc(fused[#loc28, #loc29])
#loc131 = loc(fused[#loc30, #loc31])
#loc132 = loc(fused[#loc32, #loc33])
#loc133 = loc(fused[#loc35, #loc34])
#loc134 = loc(fused[#loc37, #loc36])
#loc135 = loc(fused[#loc38, #loc39])
#loc136 = loc(fused[#loc40, #loc41])
#loc137 = loc(fused[#loc45, #loc46])
#loc139 = loc(fused[#loc52, #loc53])
#loc140 = loc(fused[#loc56, #loc57])
#loc141 = loc(fused[#loc58, #loc59])
#loc142 = loc(fused[#loc60, #loc61])
#loc143 = loc(fused[#loc62, #loc63])
#loc144 = loc(fused[#loc64, #loc65])
#loc145 = loc(fused[#loc67, #loc66])
#loc146 = loc(fused[#loc69, #loc68])
#loc147 = loc(fused[#loc70, #loc71])
#loc148 = loc(fused[#loc72, #loc73])
#loc149 = loc(fused[#loc75, #loc78])
#loc150 = loc(fused[#loc79, #loc80, #loc81, #loc73])
#loc151 = loc(fused[#loc86, #loc87])
#loc152 = loc(fused[#loc90, #loc91])
#loc153 = loc(fused[#loc92, #loc93])
#loc154 = loc(fused[#loc94, #loc95])
#loc155 = loc(fused[#loc100, #loc101])
#loc158 = loc(fused[#loc117, #loc116])
