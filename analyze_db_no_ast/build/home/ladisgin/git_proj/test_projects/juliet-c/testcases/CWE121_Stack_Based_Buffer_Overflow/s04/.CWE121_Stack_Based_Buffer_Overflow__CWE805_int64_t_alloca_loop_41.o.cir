!s32i = !cir.int<s, 32>
!s64i = !cir.int<s, 64>
!u64i = !cir.int<u, 64>
!u8i = !cir.int<u, 8>
!void = !cir.void
#fn_attr = #cir<extra({inline = #cir.inline<no>, nothrow = #cir.nothrow, optnone = #cir.optnone})>
#loc5 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE805_int64_t_alloca_loop_41.c":21:80)
#loc6 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE805_int64_t_alloca_loop_41.c":21:90)
#loc50 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE805_int64_t_alloca_loop_41.c":52:84)
#loc51 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE805_int64_t_alloca_loop_41.c":52:94)
#loc99 = loc(fused[#loc5, #loc6])
#loc116 = loc(fused[#loc50, #loc51])
module @"/home/ladisgin/git_proj/test_projects/juliet-c/testcases/CWE121_Stack_Based_Buffer_Overflow/s04/CWE121_Stack_Based_Buffer_Overflow__CWE805_int64_t_alloca_loop_41.c" attributes {cir.lang = #cir.lang<c>, cir.sob = #cir.signed_overflow_behavior<undefined>, cir.triple = "x86_64-unknown-linux-gnu", dlti.dl_spec = #dlti.dl_spec<#dlti.dl_entry<i16, dense<16> : vector<2xi64>>, #dlti.dl_entry<i32, dense<32> : vector<2xi64>>, #dlti.dl_entry<i8, dense<8> : vector<2xi64>>, #dlti.dl_entry<f128, dense<128> : vector<2xi64>>, #dlti.dl_entry<!llvm.ptr<271>, dense<32> : vector<4xi64>>, #dlti.dl_entry<f16, dense<16> : vector<2xi64>>, #dlti.dl_entry<!llvm.ptr<270>, dense<32> : vector<4xi64>>, #dlti.dl_entry<f64, dense<64> : vector<2xi64>>, #dlti.dl_entry<i128, dense<128> : vector<2xi64>>, #dlti.dl_entry<!llvm.ptr<272>, dense<64> : vector<4xi64>>, #dlti.dl_entry<i64, dense<64> : vector<2xi64>>, #dlti.dl_entry<!llvm.ptr, dense<64> : vector<4xi64>>, #dlti.dl_entry<i1, dense<8> : vector<2xi64>>, #dlti.dl_entry<f80, dense<128> : vector<2xi64>>, #dlti.dl_entry<"dlti.endianness", "little">, #dlti.dl_entry<"dlti.stack_alignment", 128 : i64>>, llvm.data_layout = "e-m:e-p270:32:32-p271:32:32-p272:64:64-i64:64-i128:128-f80:128-n8:16:32:64-S128"} {
  cir.func private  @printLongLongLine(!s64i) loc(#loc97)
  cir.func  @CWE121_Stack_Based_Buffer_Overflow__CWE805_int64_t_alloca_loop_41_badSink(%arg0: !cir.ptr<!s64i> loc(fused[#loc5, #loc6])) extra(#fn_attr) {
    %0 = cir.alloca !cir.ptr<!s64i>, !cir.ptr<!cir.ptr<!s64i>>, ["data", init] {alignment = 8 : i64} loc(#loc99)
    cir.store %arg0, %0 : !cir.ptr<!s64i>, !cir.ptr<!cir.ptr<!s64i>> loc(#loc7)
    cir.scope {
      %1 = cir.alloca !cir.array<!s64i x 100>, !cir.ptr<!cir.array<!s64i x 100>>, ["source"] {alignment = 16 : i64} loc(#loc101)
      %2 = cir.const #cir.zero : !cir.array<!s64i x 100> loc(#loc101)
      cir.store %2, %1 : !cir.array<!s64i x 100>, !cir.ptr<!cir.array<!s64i x 100>> loc(#loc101)
      cir.scope {
        %3 = cir.alloca !u64i, !cir.ptr<!u64i>, ["i"] {alignment = 8 : i64} loc(#loc103)
        cir.scope {
          %8 = cir.const #cir.int<0> : !s32i loc(#loc18)
          %9 = cir.cast(integral, %8 : !s32i), !u64i loc(#loc18)
          cir.store %9, %3 : !u64i, !cir.ptr<!u64i> loc(#loc105)
          cir.for : cond {
            %10 = cir.load %3 : !cir.ptr<!u64i>, !u64i loc(#loc20)
            %11 = cir.const #cir.int<100> : !s32i loc(#loc21)
            %12 = cir.cast(integral, %11 : !s32i), !u64i loc(#loc21)
            %13 = cir.cmp(lt, %10, %12) : !u64i, !s32i loc(#loc106)
            %14 = cir.cast(int_to_bool, %13 : !s32i), !cir.bool loc(#loc22)
            cir.condition(%14) loc(#loc22)
          } body {
            cir.scope {
              %10 = cir.load %3 : !cir.ptr<!u64i>, !u64i loc(#loc24)
              %11 = cir.cast(array_to_ptrdecay, %1 : !cir.ptr<!cir.array<!s64i x 100>>), !cir.ptr<!s64i> loc(#loc25)
              %12 = cir.ptr_stride(%11 : !cir.ptr<!s64i>, %10 : !u64i), !cir.ptr<!s64i> loc(#loc25)
              %13 = cir.load %12 : !cir.ptr<!s64i>, !s64i loc(#loc25)
              %14 = cir.load %0 : !cir.ptr<!cir.ptr<!s64i>>, !cir.ptr<!s64i> loc(#loc26)
              %15 = cir.load %3 : !cir.ptr<!u64i>, !u64i loc(#loc27)
              %16 = cir.ptr_stride(%14 : !cir.ptr<!s64i>, %15 : !u64i), !cir.ptr<!s64i> loc(#loc28)
              cir.store %13, %16 : !s64i, !cir.ptr<!s64i> loc(#loc108)
            } loc(#loc107)
            cir.yield loc(#loc17)
          } step {
            %10 = cir.load %3 : !cir.ptr<!u64i>, !u64i loc(#loc30)
            %11 = cir.unary(inc, %10) : !u64i, !u64i loc(#loc31)
            cir.store %11, %3 : !u64i, !cir.ptr<!u64i> loc(#loc109)
            cir.yield loc(#loc104)
          } loc(#loc104)
        } loc(#loc104)
        %4 = cir.load %0 : !cir.ptr<!cir.ptr<!s64i>>, !cir.ptr<!s64i> loc(#loc32)
        %5 = cir.const #cir.int<0> : !s32i loc(#loc33)
        %6 = cir.ptr_stride(%4 : !cir.ptr<!s64i>, %5 : !s32i), !cir.ptr<!s64i> loc(#loc34)
        %7 = cir.load %6 : !cir.ptr<!s64i>, !s64i loc(#loc32)
        cir.call @printLongLongLine(%7) : (!s64i) -> () loc(#loc35)
      } loc(#loc102)
    } loc(#loc100)
    cir.return loc(#loc4)
  } loc(#loc98)
  cir.func no_proto  @CWE121_Stack_Based_Buffer_Overflow__CWE805_int64_t_alloca_loop_41_bad() extra(#fn_attr) {
    %0 = cir.alloca !cir.ptr<!s64i>, !cir.ptr<!cir.ptr<!s64i>>, ["data"] {alignment = 8 : i64} loc(#loc111)
    %1 = cir.alloca !cir.ptr<!s64i>, !cir.ptr<!cir.ptr<!s64i>>, ["dataBadBuffer", init] {alignment = 8 : i64} loc(#loc112)
    %2 = cir.const #cir.int<50> : !s32i loc(#loc41)
    %3 = cir.cast(integral, %2 : !s32i), !u64i loc(#loc41)
    %4 = cir.const #cir.int<8> : !u64i loc(#loc41)
    %5 = cir.binop(mul, %3, %4) : !u64i loc(#loc41)
    %6 = cir.alloca !u8i, !cir.ptr<!u8i>, %5 : !u64i, ["bi_alloca"] {alignment = 16 : i64} loc(#loc41)
    %7 = cir.alloca !cir.ptr<!s64i>, !cir.ptr<!cir.ptr<!s64i>>, ["dataGoodBuffer", init] {alignment = 8 : i64} loc(#loc113)
    %8 = cir.cast(bitcast, %6 : !cir.ptr<!u8i>), !cir.ptr<!void> loc(#loc41)
    %9 = cir.cast(bitcast, %8 : !cir.ptr<!void>), !cir.ptr<!s64i> loc(#loc41)
    cir.store %9, %1 : !cir.ptr<!s64i>, !cir.ptr<!cir.ptr<!s64i>> loc(#loc112)
    %10 = cir.const #cir.int<100> : !s32i loc(#loc43)
    %11 = cir.cast(integral, %10 : !s32i), !u64i loc(#loc43)
    %12 = cir.const #cir.int<8> : !u64i loc(#loc43)
    %13 = cir.binop(mul, %11, %12) : !u64i loc(#loc43)
    %14 = cir.alloca !u8i, !cir.ptr<!u8i>, %13 : !u64i, ["bi_alloca"] {alignment = 16 : i64} loc(#loc43)
    %15 = cir.cast(bitcast, %14 : !cir.ptr<!u8i>), !cir.ptr<!void> loc(#loc43)
    %16 = cir.cast(bitcast, %15 : !cir.ptr<!void>), !cir.ptr<!s64i> loc(#loc43)
    cir.store %16, %7 : !cir.ptr<!s64i>, !cir.ptr<!cir.ptr<!s64i>> loc(#loc113)
    %17 = cir.load %1 : !cir.ptr<!cir.ptr<!s64i>>, !cir.ptr<!s64i> loc(#loc44)
    cir.store %17, %0 : !cir.ptr<!s64i>, !cir.ptr<!cir.ptr<!s64i>> loc(#loc114)
    %18 = cir.load %0 : !cir.ptr<!cir.ptr<!s64i>>, !cir.ptr<!s64i> loc(#loc46)
    cir.call @CWE121_Stack_Based_Buffer_Overflow__CWE805_int64_t_alloca_loop_41_badSink(%18) : (!cir.ptr<!s64i>) -> () loc(#loc47)
    cir.return loc(#loc37)
  } loc(#loc110)
  cir.func  @CWE121_Stack_Based_Buffer_Overflow__CWE805_int64_t_alloca_loop_41_goodG2BSink(%arg0: !cir.ptr<!s64i> loc(fused[#loc50, #loc51])) extra(#fn_attr) {
    %0 = cir.alloca !cir.ptr<!s64i>, !cir.ptr<!cir.ptr<!s64i>>, ["data", init] {alignment = 8 : i64} loc(#loc116)
    cir.store %arg0, %0 : !cir.ptr<!s64i>, !cir.ptr<!cir.ptr<!s64i>> loc(#loc52)
    cir.scope {
      %1 = cir.alloca !cir.array<!s64i x 100>, !cir.ptr<!cir.array<!s64i x 100>>, ["source"] {alignment = 16 : i64} loc(#loc118)
      %2 = cir.const #cir.zero : !cir.array<!s64i x 100> loc(#loc118)
      cir.store %2, %1 : !cir.array<!s64i x 100>, !cir.ptr<!cir.array<!s64i x 100>> loc(#loc118)
      cir.scope {
        %3 = cir.alloca !u64i, !cir.ptr<!u64i>, ["i"] {alignment = 8 : i64} loc(#loc120)
        cir.scope {
          %8 = cir.const #cir.int<0> : !s32i loc(#loc63)
          %9 = cir.cast(integral, %8 : !s32i), !u64i loc(#loc63)
          cir.store %9, %3 : !u64i, !cir.ptr<!u64i> loc(#loc122)
          cir.for : cond {
            %10 = cir.load %3 : !cir.ptr<!u64i>, !u64i loc(#loc65)
            %11 = cir.const #cir.int<100> : !s32i loc(#loc66)
            %12 = cir.cast(integral, %11 : !s32i), !u64i loc(#loc66)
            %13 = cir.cmp(lt, %10, %12) : !u64i, !s32i loc(#loc123)
            %14 = cir.cast(int_to_bool, %13 : !s32i), !cir.bool loc(#loc67)
            cir.condition(%14) loc(#loc67)
          } body {
            cir.scope {
              %10 = cir.load %3 : !cir.ptr<!u64i>, !u64i loc(#loc69)
              %11 = cir.cast(array_to_ptrdecay, %1 : !cir.ptr<!cir.array<!s64i x 100>>), !cir.ptr<!s64i> loc(#loc70)
              %12 = cir.ptr_stride(%11 : !cir.ptr<!s64i>, %10 : !u64i), !cir.ptr<!s64i> loc(#loc70)
              %13 = cir.load %12 : !cir.ptr<!s64i>, !s64i loc(#loc70)
              %14 = cir.load %0 : !cir.ptr<!cir.ptr<!s64i>>, !cir.ptr<!s64i> loc(#loc71)
              %15 = cir.load %3 : !cir.ptr<!u64i>, !u64i loc(#loc72)
              %16 = cir.ptr_stride(%14 : !cir.ptr<!s64i>, %15 : !u64i), !cir.ptr<!s64i> loc(#loc73)
              cir.store %13, %16 : !s64i, !cir.ptr<!s64i> loc(#loc125)
            } loc(#loc124)
            cir.yield loc(#loc62)
          } step {
            %10 = cir.load %3 : !cir.ptr<!u64i>, !u64i loc(#loc75)
            %11 = cir.unary(inc, %10) : !u64i, !u64i loc(#loc76)
            cir.store %11, %3 : !u64i, !cir.ptr<!u64i> loc(#loc126)
            cir.yield loc(#loc121)
          } loc(#loc121)
        } loc(#loc121)
        %4 = cir.load %0 : !cir.ptr<!cir.ptr<!s64i>>, !cir.ptr<!s64i> loc(#loc77)
        %5 = cir.const #cir.int<0> : !s32i loc(#loc78)
        %6 = cir.ptr_stride(%4 : !cir.ptr<!s64i>, %5 : !s32i), !cir.ptr<!s64i> loc(#loc79)
        %7 = cir.load %6 : !cir.ptr<!s64i>, !s64i loc(#loc77)
        cir.call @printLongLongLine(%7) : (!s64i) -> () loc(#loc80)
      } loc(#loc119)
    } loc(#loc117)
    cir.return loc(#loc49)
  } loc(#loc115)
  cir.func no_proto  @CWE121_Stack_Based_Buffer_Overflow__CWE805_int64_t_alloca_loop_41_good() extra(#fn_attr) {
    %0 = cir.get_global @goodG2B : !cir.ptr<!cir.func<!void ()>> loc(#loc128)
    cir.call %0() : (!cir.ptr<!cir.func<!void ()>>) -> () loc(#loc83)
    cir.return loc(#loc82)
  } loc(#loc127)
  cir.func no_proto internal private  @goodG2B() extra(#fn_attr) {
    %0 = cir.alloca !cir.ptr<!s64i>, !cir.ptr<!cir.ptr<!s64i>>, ["data"] {alignment = 8 : i64} loc(#loc130)
    %1 = cir.alloca !cir.ptr<!s64i>, !cir.ptr<!cir.ptr<!s64i>>, ["dataBadBuffer", init] {alignment = 8 : i64} loc(#loc131)
    %2 = cir.const #cir.int<50> : !s32i loc(#loc90)
    %3 = cir.cast(integral, %2 : !s32i), !u64i loc(#loc90)
    %4 = cir.const #cir.int<8> : !u64i loc(#loc90)
    %5 = cir.binop(mul, %3, %4) : !u64i loc(#loc90)
    %6 = cir.alloca !u8i, !cir.ptr<!u8i>, %5 : !u64i, ["bi_alloca"] {alignment = 16 : i64} loc(#loc90)
    %7 = cir.alloca !cir.ptr<!s64i>, !cir.ptr<!cir.ptr<!s64i>>, ["dataGoodBuffer", init] {alignment = 8 : i64} loc(#loc132)
    %8 = cir.cast(bitcast, %6 : !cir.ptr<!u8i>), !cir.ptr<!void> loc(#loc90)
    %9 = cir.cast(bitcast, %8 : !cir.ptr<!void>), !cir.ptr<!s64i> loc(#loc90)
    cir.store %9, %1 : !cir.ptr<!s64i>, !cir.ptr<!cir.ptr<!s64i>> loc(#loc131)
    %10 = cir.const #cir.int<100> : !s32i loc(#loc92)
    %11 = cir.cast(integral, %10 : !s32i), !u64i loc(#loc92)
    %12 = cir.const #cir.int<8> : !u64i loc(#loc92)
    %13 = cir.binop(mul, %11, %12) : !u64i loc(#loc92)
    %14 = cir.alloca !u8i, !cir.ptr<!u8i>, %13 : !u64i, ["bi_alloca"] {alignment = 16 : i64} loc(#loc92)
    %15 = cir.cast(bitcast, %14 : !cir.ptr<!u8i>), !cir.ptr<!void> loc(#loc92)
    %16 = cir.cast(bitcast, %15 : !cir.ptr<!void>), !cir.ptr<!s64i> loc(#loc92)
    cir.store %16, %7 : !cir.ptr<!s64i>, !cir.ptr<!cir.ptr<!s64i>> loc(#loc132)
    %17 = cir.load %7 : !cir.ptr<!cir.ptr<!s64i>>, !cir.ptr<!s64i> loc(#loc93)
    cir.store %17, %0 : !cir.ptr<!s64i>, !cir.ptr<!cir.ptr<!s64i>> loc(#loc133)
    %18 = cir.load %0 : !cir.ptr<!cir.ptr<!s64i>>, !cir.ptr<!s64i> loc(#loc95)
    cir.call @CWE121_Stack_Based_Buffer_Overflow__CWE805_int64_t_alloca_loop_41_goodG2BSink(%18) : (!cir.ptr<!s64i>) -> () loc(#loc96)
    cir.return loc(#loc86)
  } loc(#loc129)
} loc(#loc)
#loc = loc("/home/ladisgin/git_proj/test_projects/juliet-c/testcases/CWE121_Stack_Based_Buffer_Overflow/s04/CWE121_Stack_Based_Buffer_Overflow__CWE805_int64_t_alloca_loop_41.c":0:0)
#loc1 = loc("../../../testcasesupport/std_testcase_io.h":26:1)
#loc2 = loc("../../../testcasesupport/std_testcase_io.h":26:49)
#loc3 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE805_int64_t_alloca_loop_41.c":21:1)
#loc4 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE805_int64_t_alloca_loop_41.c":35:1)
#loc7 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE805_int64_t_alloca_loop_41.c":22:1)
#loc8 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE805_int64_t_alloca_loop_41.c":23:5)
#loc9 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE805_int64_t_alloca_loop_41.c":34:5)
#loc10 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE805_int64_t_alloca_loop_41.c":24:9)
#loc11 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE805_int64_t_alloca_loop_41.c":24:33)
#loc12 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE805_int64_t_alloca_loop_41.c":25:9)
#loc13 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE805_int64_t_alloca_loop_41.c":33:9)
#loc14 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE805_int64_t_alloca_loop_41.c":26:13)
#loc15 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE805_int64_t_alloca_loop_41.c":26:20)
#loc16 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE805_int64_t_alloca_loop_41.c":28:13)
#loc17 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE805_int64_t_alloca_loop_41.c":31:13)
#loc18 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE805_int64_t_alloca_loop_41.c":28:22)
#loc19 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE805_int64_t_alloca_loop_41.c":28:18)
#loc20 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE805_int64_t_alloca_loop_41.c":28:25)
#loc21 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE805_int64_t_alloca_loop_41.c":28:29)
#loc22 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE805_int64_t_alloca_loop_41.c":28:27)
#loc23 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE805_int64_t_alloca_loop_41.c":29:13)
#loc24 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE805_int64_t_alloca_loop_41.c":30:34)
#loc25 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE805_int64_t_alloca_loop_41.c":30:27)
#loc26 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE805_int64_t_alloca_loop_41.c":30:17)
#loc27 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE805_int64_t_alloca_loop_41.c":30:22)
#loc28 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE805_int64_t_alloca_loop_41.c":30:23)
#loc29 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE805_int64_t_alloca_loop_41.c":30:35)
#loc30 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE805_int64_t_alloca_loop_41.c":28:35)
#loc31 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE805_int64_t_alloca_loop_41.c":28:34)
#loc32 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE805_int64_t_alloca_loop_41.c":32:31)
#loc33 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE805_int64_t_alloca_loop_41.c":32:36)
#loc34 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE805_int64_t_alloca_loop_41.c":32:37)
#loc35 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE805_int64_t_alloca_loop_41.c":32:13)
#loc36 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE805_int64_t_alloca_loop_41.c":37:1)
#loc37 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE805_int64_t_alloca_loop_41.c":46:1)
#loc38 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE805_int64_t_alloca_loop_41.c":39:5)
#loc39 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE805_int64_t_alloca_loop_41.c":39:15)
#loc40 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE805_int64_t_alloca_loop_41.c":40:5)
#loc41 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE805_int64_t_alloca_loop_41.c":40:42)
#loc42 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE805_int64_t_alloca_loop_41.c":41:5)
#loc43 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE805_int64_t_alloca_loop_41.c":41:43)
#loc44 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE805_int64_t_alloca_loop_41.c":44:12)
#loc45 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE805_int64_t_alloca_loop_41.c":44:5)
#loc46 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE805_int64_t_alloca_loop_41.c":45:79)
#loc47 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE805_int64_t_alloca_loop_41.c":45:5)
#loc48 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE805_int64_t_alloca_loop_41.c":52:1)
#loc49 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE805_int64_t_alloca_loop_41.c":66:1)
#loc52 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE805_int64_t_alloca_loop_41.c":53:1)
#loc53 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE805_int64_t_alloca_loop_41.c":54:5)
#loc54 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE805_int64_t_alloca_loop_41.c":65:5)
#loc55 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE805_int64_t_alloca_loop_41.c":55:9)
#loc56 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE805_int64_t_alloca_loop_41.c":55:33)
#loc57 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE805_int64_t_alloca_loop_41.c":56:9)
#loc58 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE805_int64_t_alloca_loop_41.c":64:9)
#loc59 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE805_int64_t_alloca_loop_41.c":57:13)
#loc60 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE805_int64_t_alloca_loop_41.c":57:20)
#loc61 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE805_int64_t_alloca_loop_41.c":59:13)
#loc62 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE805_int64_t_alloca_loop_41.c":62:13)
#loc63 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE805_int64_t_alloca_loop_41.c":59:22)
#loc64 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE805_int64_t_alloca_loop_41.c":59:18)
#loc65 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE805_int64_t_alloca_loop_41.c":59:25)
#loc66 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE805_int64_t_alloca_loop_41.c":59:29)
#loc67 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE805_int64_t_alloca_loop_41.c":59:27)
#loc68 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE805_int64_t_alloca_loop_41.c":60:13)
#loc69 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE805_int64_t_alloca_loop_41.c":61:34)
#loc70 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE805_int64_t_alloca_loop_41.c":61:27)
#loc71 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE805_int64_t_alloca_loop_41.c":61:17)
#loc72 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE805_int64_t_alloca_loop_41.c":61:22)
#loc73 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE805_int64_t_alloca_loop_41.c":61:23)
#loc74 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE805_int64_t_alloca_loop_41.c":61:35)
#loc75 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE805_int64_t_alloca_loop_41.c":59:35)
#loc76 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE805_int64_t_alloca_loop_41.c":59:34)
#loc77 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE805_int64_t_alloca_loop_41.c":63:31)
#loc78 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE805_int64_t_alloca_loop_41.c":63:36)
#loc79 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE805_int64_t_alloca_loop_41.c":63:37)
#loc80 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE805_int64_t_alloca_loop_41.c":63:13)
#loc81 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE805_int64_t_alloca_loop_41.c":79:1)
#loc82 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE805_int64_t_alloca_loop_41.c":82:1)
#loc83 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE805_int64_t_alloca_loop_41.c":81:5)
#loc84 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE805_int64_t_alloca_loop_41.c":81:13)
#loc85 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE805_int64_t_alloca_loop_41.c":69:1)
#loc86 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE805_int64_t_alloca_loop_41.c":77:1)
#loc87 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE805_int64_t_alloca_loop_41.c":71:5)
#loc88 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE805_int64_t_alloca_loop_41.c":71:15)
#loc89 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE805_int64_t_alloca_loop_41.c":72:5)
#loc90 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE805_int64_t_alloca_loop_41.c":72:42)
#loc91 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE805_int64_t_alloca_loop_41.c":73:5)
#loc92 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE805_int64_t_alloca_loop_41.c":73:43)
#loc93 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE805_int64_t_alloca_loop_41.c":75:12)
#loc94 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE805_int64_t_alloca_loop_41.c":75:5)
#loc95 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE805_int64_t_alloca_loop_41.c":76:83)
#loc96 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE805_int64_t_alloca_loop_41.c":76:5)
#loc97 = loc(fused[#loc1, #loc2])
#loc98 = loc(fused[#loc3, #loc4])
#loc100 = loc(fused[#loc8, #loc9])
#loc101 = loc(fused[#loc10, #loc11])
#loc102 = loc(fused[#loc12, #loc13])
#loc103 = loc(fused[#loc14, #loc15])
#loc104 = loc(fused[#loc16, #loc17])
#loc105 = loc(fused[#loc19, #loc18])
#loc106 = loc(fused[#loc20, #loc21])
#loc107 = loc(fused[#loc23, #loc17])
#loc108 = loc(fused[#loc26, #loc29])
#loc109 = loc(fused[#loc31, #loc30])
#loc110 = loc(fused[#loc36, #loc37])
#loc111 = loc(fused[#loc38, #loc39])
#loc112 = loc(fused[#loc40, #loc41])
#loc113 = loc(fused[#loc42, #loc43])
#loc114 = loc(fused[#loc45, #loc44])
#loc115 = loc(fused[#loc48, #loc49])
#loc117 = loc(fused[#loc53, #loc54])
#loc118 = loc(fused[#loc55, #loc56])
#loc119 = loc(fused[#loc57, #loc58])
#loc120 = loc(fused[#loc59, #loc60])
#loc121 = loc(fused[#loc61, #loc62])
#loc122 = loc(fused[#loc64, #loc63])
#loc123 = loc(fused[#loc65, #loc66])
#loc124 = loc(fused[#loc68, #loc62])
#loc125 = loc(fused[#loc71, #loc74])
#loc126 = loc(fused[#loc76, #loc75])
#loc127 = loc(fused[#loc81, #loc82])
#loc128 = loc(fused[#loc83, #loc84])
#loc129 = loc(fused[#loc85, #loc86])
#loc130 = loc(fused[#loc87, #loc88])
#loc131 = loc(fused[#loc89, #loc90])
#loc132 = loc(fused[#loc91, #loc92])
#loc133 = loc(fused[#loc94, #loc93])
