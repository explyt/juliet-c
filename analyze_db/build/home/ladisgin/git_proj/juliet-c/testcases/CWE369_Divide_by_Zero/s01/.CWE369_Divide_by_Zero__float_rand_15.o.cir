!s32i = !cir.int<s, 32>
!s8i = !cir.int<s, 8>
!u32i = !cir.int<u, 32>
!void = !cir.void
#fn_attr = #cir<extra({nothrow = #cir.nothrow})>
#fn_attr1 = #cir<extra({inline = #cir.inline<no>, nothrow = #cir.nothrow, optnone = #cir.optnone})>
#loc20 = loc("CWE369_Divide_by_Zero__float_rand_15.c":33:23)
#loc62 = loc("CWE369_Divide_by_Zero__float_rand_15.c":70:23)
#loc101 = loc("CWE369_Divide_by_Zero__float_rand_15.c":108:23)
module @"/home/ladisgin/git_proj/juliet-c/testcases/CWE369_Divide_by_Zero/s01/CWE369_Divide_by_Zero__float_rand_15.c" attributes {cir.lang = #cir.lang<c>, cir.sob = #cir.signed_overflow_behavior<undefined>, cir.triple = "x86_64-unknown-linux-gnu", dlti.dl_spec = #dlti.dl_spec<!llvm.ptr<271> = dense<32> : vector<4xi64>, !llvm.ptr<270> = dense<32> : vector<4xi64>, f128 = dense<128> : vector<2xi64>, f64 = dense<64> : vector<2xi64>, f16 = dense<16> : vector<2xi64>, i32 = dense<32> : vector<2xi64>, i16 = dense<16> : vector<2xi64>, i8 = dense<8> : vector<2xi64>, i1 = dense<8> : vector<2xi64>, !llvm.ptr = dense<64> : vector<4xi64>, f80 = dense<128> : vector<2xi64>, i128 = dense<128> : vector<2xi64>, i64 = dense<64> : vector<2xi64>, !llvm.ptr<272> = dense<64> : vector<4xi64>, "dlti.endianness" = "little", "dlti.stack_alignment" = 128 : i64>} {
  cir.func private @rand() -> !s32i extra(#fn_attr) loc(#loc193)
  cir.func private @printLine(!cir.ptr<!s8i>) loc(#loc194)
  cir.global "private" constant cir_private dsolocal @".str" = #cir.const_array<"Benign, fixed string\00" : !cir.array<!s8i x 21>> : !cir.array<!s8i x 21> {alignment = 1 : i64} loc(#loc5)
  cir.func private @printIntLine(!s32i) loc(#loc195)
  cir.func no_proto @CWE369_Divide_by_Zero__float_rand_15_bad() extra(#fn_attr1) {
    %0 = cir.alloca !s32i, !cir.ptr<!s32i>, ["result", init] {alignment = 4 : i64} loc(#loc197)
    %1 = cir.alloca !cir.float, !cir.ptr<!cir.float>, ["data"] {alignment = 4 : i64} loc(#loc198)
    %2 = cir.const #cir.fp<0.000000e+00> : !cir.float loc(#loc14)
    cir.store %2, %1 : !cir.float, !cir.ptr<!cir.float> loc(#loc199)
    cir.br ^bb1 loc(#loc200)
  ^bb1:  // pred: ^bb0
    %3 = cir.const #cir.int<6> : !s32i loc(#loc18)
    cir.br ^bb2 loc(#loc16)
  ^bb2:  // pred: ^bb1
    cir.switch.flat %3 : !s32i, ^bb9 [
      6: ^bb4
    ] loc(#loc16)
  ^bb3:  // no predecessors
    cir.br ^bb4 loc(#loc19)
  ^bb4:  // 2 preds: ^bb2, ^bb3
    %4 = cir.call @rand() : () -> !s32i extra(#fn_attr) loc(#loc20)
    %5 = cir.const #cir.int<1> : !s32i loc(#loc20)
    %6 = cir.binop(and, %4, %5) : !s32i loc(#loc20)
    %7 = cir.cast(int_to_bool, %6 : !s32i), !cir.bool loc(#loc20)
    cir.brcond %7 ^bb5, ^bb6 loc(#loc20)
  ^bb5:  // pred: ^bb4
    %8 = cir.call @rand() : () -> !s32i extra(#fn_attr) loc(#loc20)
    %9 = cir.cast(integral, %8 : !s32i), !u32i loc(#loc20)
    %10 = cir.const #cir.int<30> : !s32i loc(#loc20)
    %11 = cir.shift(left, %9 : !u32i, %10 : !s32i) -> !u32i loc(#loc20)
    %12 = cir.call @rand() : () -> !s32i extra(#fn_attr) loc(#loc20)
    %13 = cir.cast(integral, %12 : !s32i), !u32i loc(#loc20)
    %14 = cir.const #cir.int<15> : !s32i loc(#loc20)
    %15 = cir.shift(left, %13 : !u32i, %14 : !s32i) -> !u32i loc(#loc20)
    %16 = cir.binop(xor, %11, %15) : !u32i loc(#loc20)
    %17 = cir.call @rand() : () -> !s32i extra(#fn_attr) loc(#loc20)
    %18 = cir.cast(integral, %17 : !s32i), !u32i loc(#loc20)
    %19 = cir.binop(xor, %16, %18) : !u32i loc(#loc20)
    cir.br ^bb7(%19 : !u32i) loc(#loc20)
  ^bb6:  // pred: ^bb4
    %20 = cir.call @rand() : () -> !s32i extra(#fn_attr) loc(#loc20)
    %21 = cir.cast(integral, %20 : !s32i), !u32i loc(#loc20)
    %22 = cir.const #cir.int<30> : !s32i loc(#loc20)
    %23 = cir.shift(left, %21 : !u32i, %22 : !s32i) -> !u32i loc(#loc20)
    %24 = cir.call @rand() : () -> !s32i extra(#fn_attr) loc(#loc20)
    %25 = cir.cast(integral, %24 : !s32i), !u32i loc(#loc20)
    %26 = cir.const #cir.int<15> : !s32i loc(#loc20)
    %27 = cir.shift(left, %25 : !u32i, %26 : !s32i) -> !u32i loc(#loc20)
    %28 = cir.binop(xor, %23, %27) : !u32i loc(#loc20)
    %29 = cir.call @rand() : () -> !s32i extra(#fn_attr) loc(#loc20)
    %30 = cir.cast(integral, %29 : !s32i), !u32i loc(#loc20)
    %31 = cir.binop(xor, %28, %30) : !u32i loc(#loc20)
    %32 = cir.unary(minus, %31) : !u32i, !u32i loc(#loc20)
    %33 = cir.const #cir.int<1> : !s32i loc(#loc20)
    %34 = cir.cast(integral, %33 : !s32i), !u32i loc(#loc20)
    %35 = cir.binop(sub, %32, %34) : !u32i loc(#loc20)
    cir.br ^bb7(%35 : !u32i) loc(#loc20)
  ^bb7(%36: !u32i loc("CWE369_Divide_by_Zero__float_rand_15.c":33:23)):  // 2 preds: ^bb5, ^bb6
    cir.br ^bb8 loc(#loc20)
  ^bb8:  // pred: ^bb7
    %37 = cir.cast(integral, %36 : !u32i), !s32i loc(#loc20)
    %38 = cir.cast(int_to_float, %37 : !s32i), !cir.float loc(#loc20)
    cir.store %38, %1 : !cir.float, !cir.ptr<!cir.float> loc(#loc201)
    cir.br ^bb10 loc(#loc22)
  ^bb9:  // pred: ^bb2
    %39 = cir.get_global @".str" : !cir.ptr<!cir.array<!s8i x 21>> loc(#loc5)
    %40 = cir.cast(array_to_ptrdecay, %39 : !cir.ptr<!cir.array<!s8i x 21>>), !cir.ptr<!s8i> loc(#loc5)
    cir.call @printLine(%40) : (!cir.ptr<!s8i>) -> () loc(#loc23)
    cir.br ^bb10 loc(#loc24)
  ^bb10:  // 2 preds: ^bb8, ^bb9
    cir.br ^bb11 loc(#loc17)
  ^bb11:  // pred: ^bb10
    cir.br ^bb12 loc(#loc202)
  ^bb12:  // pred: ^bb11
    %41 = cir.const #cir.int<7> : !s32i loc(#loc27)
    cir.br ^bb13 loc(#loc25)
  ^bb13:  // pred: ^bb12
    cir.switch.flat %41 : !s32i, ^bb18 [
      7: ^bb15
    ] loc(#loc25)
  ^bb14:  // no predecessors
    cir.br ^bb15 loc(#loc28)
  ^bb15:  // 2 preds: ^bb13, ^bb14
    cir.br ^bb16 loc(#loc203)
  ^bb16:  // pred: ^bb15
    %42 = cir.const #cir.fp<1.000000e+02> : !cir.double loc(#loc31)
    %43 = cir.load %1 : !cir.ptr<!cir.float>, !cir.float loc(#loc32)
    %44 = cir.cast(floating, %43 : !cir.float), !cir.double loc(#loc32)
    %45 = cir.binop(div, %42, %44) : !cir.double loc(#loc204)
    %46 = cir.cast(float_to_int, %45 : !cir.double), !s32i loc(#loc204)
    cir.store %46, %0 : !s32i, !cir.ptr<!s32i> loc(#loc197)
    %47 = cir.load %0 : !cir.ptr<!s32i>, !s32i loc(#loc33)
    cir.call @printIntLine(%47) : (!s32i) -> () loc(#loc34)
    cir.br ^bb17 loc(#loc30)
  ^bb17:  // pred: ^bb16
    cir.br ^bb19 loc(#loc35)
  ^bb18:  // pred: ^bb13
    %48 = cir.get_global @".str" : !cir.ptr<!cir.array<!s8i x 21>> loc(#loc36)
    %49 = cir.cast(array_to_ptrdecay, %48 : !cir.ptr<!cir.array<!s8i x 21>>), !cir.ptr<!s8i> loc(#loc36)
    cir.call @printLine(%49) : (!cir.ptr<!s8i>) -> () loc(#loc37)
    cir.br ^bb19 loc(#loc38)
  ^bb19:  // 2 preds: ^bb17, ^bb18
    cir.br ^bb20 loc(#loc26)
  ^bb20:  // pred: ^bb19
    cir.return loc(#loc9)
  } loc(#loc196)
  cir.func no_proto @CWE369_Divide_by_Zero__float_rand_15_good() extra(#fn_attr1) {
    %0 = cir.get_global @goodB2G1 : !cir.ptr<!cir.func<!void ()>> loc(#loc206)
    cir.call %0() : (!cir.ptr<!cir.func<!void ()>>) -> () loc(#loc41)
    %1 = cir.get_global @goodB2G2 : !cir.ptr<!cir.func<!void ()>> loc(#loc207)
    cir.call %1() : (!cir.ptr<!cir.func<!void ()>>) -> () loc(#loc43)
    %2 = cir.get_global @goodG2B1 : !cir.ptr<!cir.func<!void ()>> loc(#loc208)
    cir.call %2() : (!cir.ptr<!cir.func<!void ()>>) -> () loc(#loc45)
    %3 = cir.get_global @goodG2B2 : !cir.ptr<!cir.func<!void ()>> loc(#loc209)
    cir.call %3() : (!cir.ptr<!cir.func<!void ()>>) -> () loc(#loc47)
    cir.return loc(#loc40)
  } loc(#loc205)
  cir.global "private" constant cir_private dsolocal @".str.1" = #cir.const_array<"This would result in a divide by zero\00" : !cir.array<!s8i x 38>> : !cir.array<!s8i x 38> {alignment = 1 : i64} loc(#loc49)
  cir.func no_proto internal private @goodB2G1() extra(#fn_attr1) {
    %0 = cir.alloca !s32i, !cir.ptr<!s32i>, ["result", init] {alignment = 4 : i64} loc(#loc211)
    %1 = cir.alloca !cir.float, !cir.ptr<!cir.float>, ["data"] {alignment = 4 : i64} loc(#loc212)
    %2 = cir.const #cir.fp<0.000000e+00> : !cir.float loc(#loc56)
    cir.store %2, %1 : !cir.float, !cir.ptr<!cir.float> loc(#loc213)
    cir.br ^bb1 loc(#loc214)
  ^bb1:  // pred: ^bb0
    %3 = cir.const #cir.int<6> : !s32i loc(#loc60)
    cir.br ^bb2 loc(#loc58)
  ^bb2:  // pred: ^bb1
    cir.switch.flat %3 : !s32i, ^bb9 [
      6: ^bb4
    ] loc(#loc58)
  ^bb3:  // no predecessors
    cir.br ^bb4 loc(#loc61)
  ^bb4:  // 2 preds: ^bb2, ^bb3
    %4 = cir.call @rand() : () -> !s32i extra(#fn_attr) loc(#loc62)
    %5 = cir.const #cir.int<1> : !s32i loc(#loc62)
    %6 = cir.binop(and, %4, %5) : !s32i loc(#loc62)
    %7 = cir.cast(int_to_bool, %6 : !s32i), !cir.bool loc(#loc62)
    cir.brcond %7 ^bb5, ^bb6 loc(#loc62)
  ^bb5:  // pred: ^bb4
    %8 = cir.call @rand() : () -> !s32i extra(#fn_attr) loc(#loc62)
    %9 = cir.cast(integral, %8 : !s32i), !u32i loc(#loc62)
    %10 = cir.const #cir.int<30> : !s32i loc(#loc62)
    %11 = cir.shift(left, %9 : !u32i, %10 : !s32i) -> !u32i loc(#loc62)
    %12 = cir.call @rand() : () -> !s32i extra(#fn_attr) loc(#loc62)
    %13 = cir.cast(integral, %12 : !s32i), !u32i loc(#loc62)
    %14 = cir.const #cir.int<15> : !s32i loc(#loc62)
    %15 = cir.shift(left, %13 : !u32i, %14 : !s32i) -> !u32i loc(#loc62)
    %16 = cir.binop(xor, %11, %15) : !u32i loc(#loc62)
    %17 = cir.call @rand() : () -> !s32i extra(#fn_attr) loc(#loc62)
    %18 = cir.cast(integral, %17 : !s32i), !u32i loc(#loc62)
    %19 = cir.binop(xor, %16, %18) : !u32i loc(#loc62)
    cir.br ^bb7(%19 : !u32i) loc(#loc62)
  ^bb6:  // pred: ^bb4
    %20 = cir.call @rand() : () -> !s32i extra(#fn_attr) loc(#loc62)
    %21 = cir.cast(integral, %20 : !s32i), !u32i loc(#loc62)
    %22 = cir.const #cir.int<30> : !s32i loc(#loc62)
    %23 = cir.shift(left, %21 : !u32i, %22 : !s32i) -> !u32i loc(#loc62)
    %24 = cir.call @rand() : () -> !s32i extra(#fn_attr) loc(#loc62)
    %25 = cir.cast(integral, %24 : !s32i), !u32i loc(#loc62)
    %26 = cir.const #cir.int<15> : !s32i loc(#loc62)
    %27 = cir.shift(left, %25 : !u32i, %26 : !s32i) -> !u32i loc(#loc62)
    %28 = cir.binop(xor, %23, %27) : !u32i loc(#loc62)
    %29 = cir.call @rand() : () -> !s32i extra(#fn_attr) loc(#loc62)
    %30 = cir.cast(integral, %29 : !s32i), !u32i loc(#loc62)
    %31 = cir.binop(xor, %28, %30) : !u32i loc(#loc62)
    %32 = cir.unary(minus, %31) : !u32i, !u32i loc(#loc62)
    %33 = cir.const #cir.int<1> : !s32i loc(#loc62)
    %34 = cir.cast(integral, %33 : !s32i), !u32i loc(#loc62)
    %35 = cir.binop(sub, %32, %34) : !u32i loc(#loc62)
    cir.br ^bb7(%35 : !u32i) loc(#loc62)
  ^bb7(%36: !u32i loc("CWE369_Divide_by_Zero__float_rand_15.c":70:23)):  // 2 preds: ^bb5, ^bb6
    cir.br ^bb8 loc(#loc62)
  ^bb8:  // pred: ^bb7
    %37 = cir.cast(integral, %36 : !u32i), !s32i loc(#loc62)
    %38 = cir.cast(int_to_float, %37 : !s32i), !cir.float loc(#loc62)
    cir.store %38, %1 : !cir.float, !cir.ptr<!cir.float> loc(#loc215)
    cir.br ^bb10 loc(#loc64)
  ^bb9:  // pred: ^bb2
    %39 = cir.get_global @".str" : !cir.ptr<!cir.array<!s8i x 21>> loc(#loc65)
    %40 = cir.cast(array_to_ptrdecay, %39 : !cir.ptr<!cir.array<!s8i x 21>>), !cir.ptr<!s8i> loc(#loc65)
    cir.call @printLine(%40) : (!cir.ptr<!s8i>) -> () loc(#loc66)
    cir.br ^bb10 loc(#loc67)
  ^bb10:  // 2 preds: ^bb8, ^bb9
    cir.br ^bb11 loc(#loc59)
  ^bb11:  // pred: ^bb10
    cir.br ^bb12 loc(#loc216)
  ^bb12:  // pred: ^bb11
    %41 = cir.const #cir.int<8> : !s32i loc(#loc70)
    cir.br ^bb13 loc(#loc68)
  ^bb13:  // pred: ^bb12
    cir.switch.flat %41 : !s32i, ^bb16 [
      7: ^bb15
    ] loc(#loc68)
  ^bb14:  // no predecessors
    cir.br ^bb15 loc(#loc71)
  ^bb15:  // 2 preds: ^bb13, ^bb14
    %42 = cir.get_global @".str" : !cir.ptr<!cir.array<!s8i x 21>> loc(#loc72)
    %43 = cir.cast(array_to_ptrdecay, %42 : !cir.ptr<!cir.array<!s8i x 21>>), !cir.ptr<!s8i> loc(#loc72)
    cir.call @printLine(%43) : (!cir.ptr<!s8i>) -> () loc(#loc73)
    cir.br ^bb22 loc(#loc74)
  ^bb16:  // pred: ^bb13
    cir.br ^bb17 loc(#loc217)
  ^bb17:  // pred: ^bb16
    %44 = cir.load %1 : !cir.ptr<!cir.float>, !cir.float loc(#loc77)
    %45 = cir.cast(floating, %44 : !cir.float), !cir.double loc(#loc77)
    %46 = cir.fabs %45 : !cir.double loc(#loc77)
    %47 = cir.const #cir.fp<9.9999999999999995E-7> : !cir.double loc(#loc78)
    %48 = cir.cmp(gt, %46, %47) : !cir.double, !cir.bool loc(#loc218)
    cir.brcond %48 ^bb18, ^bb19 loc(#loc219)
  ^bb18:  // pred: ^bb17
    %49 = cir.const #cir.fp<1.000000e+02> : !cir.double loc(#loc83)
    %50 = cir.load %1 : !cir.ptr<!cir.float>, !cir.float loc(#loc84)
    %51 = cir.cast(floating, %50 : !cir.float), !cir.double loc(#loc84)
    %52 = cir.binop(div, %49, %51) : !cir.double loc(#loc220)
    %53 = cir.cast(float_to_int, %52 : !cir.double), !s32i loc(#loc220)
    cir.store %53, %0 : !s32i, !cir.ptr<!s32i> loc(#loc211)
    %54 = cir.load %0 : !cir.ptr<!s32i>, !s32i loc(#loc85)
    cir.call @printIntLine(%54) : (!s32i) -> () loc(#loc86)
    cir.br ^bb20 loc(#loc81)
  ^bb19:  // pred: ^bb17
    %55 = cir.get_global @".str.1" : !cir.ptr<!cir.array<!s8i x 38>> loc(#loc49)
    %56 = cir.cast(array_to_ptrdecay, %55 : !cir.ptr<!cir.array<!s8i x 38>>), !cir.ptr<!s8i> loc(#loc49)
    cir.call @printLine(%56) : (!cir.ptr<!s8i>) -> () loc(#loc87)
    cir.br ^bb20 loc(#loc76)
  ^bb20:  // 2 preds: ^bb18, ^bb19
    cir.br ^bb21 loc(#loc76)
  ^bb21:  // pred: ^bb20
    cir.br ^bb22 loc(#loc88)
  ^bb22:  // 2 preds: ^bb15, ^bb21
    cir.br ^bb23 loc(#loc69)
  ^bb23:  // pred: ^bb22
    cir.return loc(#loc51)
  } loc(#loc210)
  cir.func no_proto internal private @goodB2G2() extra(#fn_attr1) {
    %0 = cir.alloca !s32i, !cir.ptr<!s32i>, ["result", init] {alignment = 4 : i64} loc(#loc222)
    %1 = cir.alloca !cir.float, !cir.ptr<!cir.float>, ["data"] {alignment = 4 : i64} loc(#loc223)
    %2 = cir.const #cir.fp<0.000000e+00> : !cir.float loc(#loc95)
    cir.store %2, %1 : !cir.float, !cir.ptr<!cir.float> loc(#loc224)
    cir.br ^bb1 loc(#loc225)
  ^bb1:  // pred: ^bb0
    %3 = cir.const #cir.int<6> : !s32i loc(#loc99)
    cir.br ^bb2 loc(#loc97)
  ^bb2:  // pred: ^bb1
    cir.switch.flat %3 : !s32i, ^bb9 [
      6: ^bb4
    ] loc(#loc97)
  ^bb3:  // no predecessors
    cir.br ^bb4 loc(#loc100)
  ^bb4:  // 2 preds: ^bb2, ^bb3
    %4 = cir.call @rand() : () -> !s32i extra(#fn_attr) loc(#loc101)
    %5 = cir.const #cir.int<1> : !s32i loc(#loc101)
    %6 = cir.binop(and, %4, %5) : !s32i loc(#loc101)
    %7 = cir.cast(int_to_bool, %6 : !s32i), !cir.bool loc(#loc101)
    cir.brcond %7 ^bb5, ^bb6 loc(#loc101)
  ^bb5:  // pred: ^bb4
    %8 = cir.call @rand() : () -> !s32i extra(#fn_attr) loc(#loc101)
    %9 = cir.cast(integral, %8 : !s32i), !u32i loc(#loc101)
    %10 = cir.const #cir.int<30> : !s32i loc(#loc101)
    %11 = cir.shift(left, %9 : !u32i, %10 : !s32i) -> !u32i loc(#loc101)
    %12 = cir.call @rand() : () -> !s32i extra(#fn_attr) loc(#loc101)
    %13 = cir.cast(integral, %12 : !s32i), !u32i loc(#loc101)
    %14 = cir.const #cir.int<15> : !s32i loc(#loc101)
    %15 = cir.shift(left, %13 : !u32i, %14 : !s32i) -> !u32i loc(#loc101)
    %16 = cir.binop(xor, %11, %15) : !u32i loc(#loc101)
    %17 = cir.call @rand() : () -> !s32i extra(#fn_attr) loc(#loc101)
    %18 = cir.cast(integral, %17 : !s32i), !u32i loc(#loc101)
    %19 = cir.binop(xor, %16, %18) : !u32i loc(#loc101)
    cir.br ^bb7(%19 : !u32i) loc(#loc101)
  ^bb6:  // pred: ^bb4
    %20 = cir.call @rand() : () -> !s32i extra(#fn_attr) loc(#loc101)
    %21 = cir.cast(integral, %20 : !s32i), !u32i loc(#loc101)
    %22 = cir.const #cir.int<30> : !s32i loc(#loc101)
    %23 = cir.shift(left, %21 : !u32i, %22 : !s32i) -> !u32i loc(#loc101)
    %24 = cir.call @rand() : () -> !s32i extra(#fn_attr) loc(#loc101)
    %25 = cir.cast(integral, %24 : !s32i), !u32i loc(#loc101)
    %26 = cir.const #cir.int<15> : !s32i loc(#loc101)
    %27 = cir.shift(left, %25 : !u32i, %26 : !s32i) -> !u32i loc(#loc101)
    %28 = cir.binop(xor, %23, %27) : !u32i loc(#loc101)
    %29 = cir.call @rand() : () -> !s32i extra(#fn_attr) loc(#loc101)
    %30 = cir.cast(integral, %29 : !s32i), !u32i loc(#loc101)
    %31 = cir.binop(xor, %28, %30) : !u32i loc(#loc101)
    %32 = cir.unary(minus, %31) : !u32i, !u32i loc(#loc101)
    %33 = cir.const #cir.int<1> : !s32i loc(#loc101)
    %34 = cir.cast(integral, %33 : !s32i), !u32i loc(#loc101)
    %35 = cir.binop(sub, %32, %34) : !u32i loc(#loc101)
    cir.br ^bb7(%35 : !u32i) loc(#loc101)
  ^bb7(%36: !u32i loc("CWE369_Divide_by_Zero__float_rand_15.c":108:23)):  // 2 preds: ^bb5, ^bb6
    cir.br ^bb8 loc(#loc101)
  ^bb8:  // pred: ^bb7
    %37 = cir.cast(integral, %36 : !u32i), !s32i loc(#loc101)
    %38 = cir.cast(int_to_float, %37 : !s32i), !cir.float loc(#loc101)
    cir.store %38, %1 : !cir.float, !cir.ptr<!cir.float> loc(#loc226)
    cir.br ^bb10 loc(#loc103)
  ^bb9:  // pred: ^bb2
    %39 = cir.get_global @".str" : !cir.ptr<!cir.array<!s8i x 21>> loc(#loc104)
    %40 = cir.cast(array_to_ptrdecay, %39 : !cir.ptr<!cir.array<!s8i x 21>>), !cir.ptr<!s8i> loc(#loc104)
    cir.call @printLine(%40) : (!cir.ptr<!s8i>) -> () loc(#loc105)
    cir.br ^bb10 loc(#loc106)
  ^bb10:  // 2 preds: ^bb8, ^bb9
    cir.br ^bb11 loc(#loc98)
  ^bb11:  // pred: ^bb10
    cir.br ^bb12 loc(#loc227)
  ^bb12:  // pred: ^bb11
    %41 = cir.const #cir.int<7> : !s32i loc(#loc109)
    cir.br ^bb13 loc(#loc107)
  ^bb13:  // pred: ^bb12
    cir.switch.flat %41 : !s32i, ^bb21 [
      7: ^bb15
    ] loc(#loc107)
  ^bb14:  // no predecessors
    cir.br ^bb15 loc(#loc110)
  ^bb15:  // 2 preds: ^bb13, ^bb14
    cir.br ^bb16 loc(#loc228)
  ^bb16:  // pred: ^bb15
    %42 = cir.load %1 : !cir.ptr<!cir.float>, !cir.float loc(#loc113)
    %43 = cir.cast(floating, %42 : !cir.float), !cir.double loc(#loc113)
    %44 = cir.fabs %43 : !cir.double loc(#loc113)
    %45 = cir.const #cir.fp<9.9999999999999995E-7> : !cir.double loc(#loc114)
    %46 = cir.cmp(gt, %44, %45) : !cir.double, !cir.bool loc(#loc229)
    cir.brcond %46 ^bb17, ^bb18 loc(#loc230)
  ^bb17:  // pred: ^bb16
    %47 = cir.const #cir.fp<1.000000e+02> : !cir.double loc(#loc119)
    %48 = cir.load %1 : !cir.ptr<!cir.float>, !cir.float loc(#loc120)
    %49 = cir.cast(floating, %48 : !cir.float), !cir.double loc(#loc120)
    %50 = cir.binop(div, %47, %49) : !cir.double loc(#loc231)
    %51 = cir.cast(float_to_int, %50 : !cir.double), !s32i loc(#loc231)
    cir.store %51, %0 : !s32i, !cir.ptr<!s32i> loc(#loc222)
    %52 = cir.load %0 : !cir.ptr<!s32i>, !s32i loc(#loc121)
    cir.call @printIntLine(%52) : (!s32i) -> () loc(#loc122)
    cir.br ^bb19 loc(#loc117)
  ^bb18:  // pred: ^bb16
    %53 = cir.get_global @".str.1" : !cir.ptr<!cir.array<!s8i x 38>> loc(#loc123)
    %54 = cir.cast(array_to_ptrdecay, %53 : !cir.ptr<!cir.array<!s8i x 38>>), !cir.ptr<!s8i> loc(#loc123)
    cir.call @printLine(%54) : (!cir.ptr<!s8i>) -> () loc(#loc124)
    cir.br ^bb19 loc(#loc112)
  ^bb19:  // 2 preds: ^bb17, ^bb18
    cir.br ^bb20 loc(#loc112)
  ^bb20:  // pred: ^bb19
    cir.br ^bb22 loc(#loc125)
  ^bb21:  // pred: ^bb13
    %55 = cir.get_global @".str" : !cir.ptr<!cir.array<!s8i x 21>> loc(#loc126)
    %56 = cir.cast(array_to_ptrdecay, %55 : !cir.ptr<!cir.array<!s8i x 21>>), !cir.ptr<!s8i> loc(#loc126)
    cir.call @printLine(%56) : (!cir.ptr<!s8i>) -> () loc(#loc127)
    cir.br ^bb22 loc(#loc128)
  ^bb22:  // 2 preds: ^bb20, ^bb21
    cir.br ^bb23 loc(#loc108)
  ^bb23:  // pred: ^bb22
    cir.return loc(#loc90)
  } loc(#loc221)
  cir.func no_proto internal private @goodG2B1() extra(#fn_attr1) {
    %0 = cir.alloca !s32i, !cir.ptr<!s32i>, ["result", init] {alignment = 4 : i64} loc(#loc233)
    %1 = cir.alloca !cir.float, !cir.ptr<!cir.float>, ["data"] {alignment = 4 : i64} loc(#loc234)
    %2 = cir.const #cir.fp<0.000000e+00> : !cir.float loc(#loc135)
    cir.store %2, %1 : !cir.float, !cir.ptr<!cir.float> loc(#loc235)
    cir.br ^bb1 loc(#loc236)
  ^bb1:  // pred: ^bb0
    %3 = cir.const #cir.int<5> : !s32i loc(#loc139)
    cir.br ^bb2 loc(#loc137)
  ^bb2:  // pred: ^bb1
    cir.switch.flat %3 : !s32i, ^bb5 [
      6: ^bb4
    ] loc(#loc137)
  ^bb3:  // no predecessors
    cir.br ^bb4 loc(#loc140)
  ^bb4:  // 2 preds: ^bb2, ^bb3
    %4 = cir.get_global @".str" : !cir.ptr<!cir.array<!s8i x 21>> loc(#loc141)
    %5 = cir.cast(array_to_ptrdecay, %4 : !cir.ptr<!cir.array<!s8i x 21>>), !cir.ptr<!s8i> loc(#loc141)
    cir.call @printLine(%5) : (!cir.ptr<!s8i>) -> () loc(#loc142)
    cir.br ^bb6 loc(#loc143)
  ^bb5:  // pred: ^bb2
    %6 = cir.const #cir.fp<2.000000e+00> : !cir.float loc(#loc144)
    cir.store %6, %1 : !cir.float, !cir.ptr<!cir.float> loc(#loc237)
    cir.br ^bb6 loc(#loc146)
  ^bb6:  // 2 preds: ^bb4, ^bb5
    cir.br ^bb7 loc(#loc138)
  ^bb7:  // pred: ^bb6
    cir.br ^bb8 loc(#loc238)
  ^bb8:  // pred: ^bb7
    %7 = cir.const #cir.int<7> : !s32i loc(#loc149)
    cir.br ^bb9 loc(#loc147)
  ^bb9:  // pred: ^bb8
    cir.switch.flat %7 : !s32i, ^bb14 [
      7: ^bb11
    ] loc(#loc147)
  ^bb10:  // no predecessors
    cir.br ^bb11 loc(#loc150)
  ^bb11:  // 2 preds: ^bb9, ^bb10
    cir.br ^bb12 loc(#loc239)
  ^bb12:  // pred: ^bb11
    %8 = cir.const #cir.fp<1.000000e+02> : !cir.double loc(#loc153)
    %9 = cir.load %1 : !cir.ptr<!cir.float>, !cir.float loc(#loc154)
    %10 = cir.cast(floating, %9 : !cir.float), !cir.double loc(#loc154)
    %11 = cir.binop(div, %8, %10) : !cir.double loc(#loc240)
    %12 = cir.cast(float_to_int, %11 : !cir.double), !s32i loc(#loc240)
    cir.store %12, %0 : !s32i, !cir.ptr<!s32i> loc(#loc233)
    %13 = cir.load %0 : !cir.ptr<!s32i>, !s32i loc(#loc155)
    cir.call @printIntLine(%13) : (!s32i) -> () loc(#loc156)
    cir.br ^bb13 loc(#loc152)
  ^bb13:  // pred: ^bb12
    cir.br ^bb15 loc(#loc157)
  ^bb14:  // pred: ^bb9
    %14 = cir.get_global @".str" : !cir.ptr<!cir.array<!s8i x 21>> loc(#loc158)
    %15 = cir.cast(array_to_ptrdecay, %14 : !cir.ptr<!cir.array<!s8i x 21>>), !cir.ptr<!s8i> loc(#loc158)
    cir.call @printLine(%15) : (!cir.ptr<!s8i>) -> () loc(#loc159)
    cir.br ^bb15 loc(#loc160)
  ^bb15:  // 2 preds: ^bb13, ^bb14
    cir.br ^bb16 loc(#loc148)
  ^bb16:  // pred: ^bb15
    cir.return loc(#loc130)
  } loc(#loc232)
  cir.func no_proto internal private @goodG2B2() extra(#fn_attr1) {
    %0 = cir.alloca !s32i, !cir.ptr<!s32i>, ["result", init] {alignment = 4 : i64} loc(#loc242)
    %1 = cir.alloca !cir.float, !cir.ptr<!cir.float>, ["data"] {alignment = 4 : i64} loc(#loc243)
    %2 = cir.const #cir.fp<0.000000e+00> : !cir.float loc(#loc167)
    cir.store %2, %1 : !cir.float, !cir.ptr<!cir.float> loc(#loc244)
    cir.br ^bb1 loc(#loc245)
  ^bb1:  // pred: ^bb0
    %3 = cir.const #cir.int<6> : !s32i loc(#loc171)
    cir.br ^bb2 loc(#loc169)
  ^bb2:  // pred: ^bb1
    cir.switch.flat %3 : !s32i, ^bb5 [
      6: ^bb4
    ] loc(#loc169)
  ^bb3:  // no predecessors
    cir.br ^bb4 loc(#loc172)
  ^bb4:  // 2 preds: ^bb2, ^bb3
    %4 = cir.const #cir.fp<2.000000e+00> : !cir.float loc(#loc173)
    cir.store %4, %1 : !cir.float, !cir.ptr<!cir.float> loc(#loc246)
    cir.br ^bb6 loc(#loc175)
  ^bb5:  // pred: ^bb2
    %5 = cir.get_global @".str" : !cir.ptr<!cir.array<!s8i x 21>> loc(#loc176)
    %6 = cir.cast(array_to_ptrdecay, %5 : !cir.ptr<!cir.array<!s8i x 21>>), !cir.ptr<!s8i> loc(#loc176)
    cir.call @printLine(%6) : (!cir.ptr<!s8i>) -> () loc(#loc177)
    cir.br ^bb6 loc(#loc178)
  ^bb6:  // 2 preds: ^bb4, ^bb5
    cir.br ^bb7 loc(#loc170)
  ^bb7:  // pred: ^bb6
    cir.br ^bb8 loc(#loc247)
  ^bb8:  // pred: ^bb7
    %7 = cir.const #cir.int<7> : !s32i loc(#loc181)
    cir.br ^bb9 loc(#loc179)
  ^bb9:  // pred: ^bb8
    cir.switch.flat %7 : !s32i, ^bb14 [
      7: ^bb11
    ] loc(#loc179)
  ^bb10:  // no predecessors
    cir.br ^bb11 loc(#loc182)
  ^bb11:  // 2 preds: ^bb9, ^bb10
    cir.br ^bb12 loc(#loc248)
  ^bb12:  // pred: ^bb11
    %8 = cir.const #cir.fp<1.000000e+02> : !cir.double loc(#loc185)
    %9 = cir.load %1 : !cir.ptr<!cir.float>, !cir.float loc(#loc186)
    %10 = cir.cast(floating, %9 : !cir.float), !cir.double loc(#loc186)
    %11 = cir.binop(div, %8, %10) : !cir.double loc(#loc249)
    %12 = cir.cast(float_to_int, %11 : !cir.double), !s32i loc(#loc249)
    cir.store %12, %0 : !s32i, !cir.ptr<!s32i> loc(#loc242)
    %13 = cir.load %0 : !cir.ptr<!s32i>, !s32i loc(#loc187)
    cir.call @printIntLine(%13) : (!s32i) -> () loc(#loc188)
    cir.br ^bb13 loc(#loc184)
  ^bb13:  // pred: ^bb12
    cir.br ^bb15 loc(#loc189)
  ^bb14:  // pred: ^bb9
    %14 = cir.get_global @".str" : !cir.ptr<!cir.array<!s8i x 21>> loc(#loc190)
    %15 = cir.cast(array_to_ptrdecay, %14 : !cir.ptr<!cir.array<!s8i x 21>>), !cir.ptr<!s8i> loc(#loc190)
    cir.call @printLine(%15) : (!cir.ptr<!s8i>) -> () loc(#loc191)
    cir.br ^bb15 loc(#loc192)
  ^bb15:  // 2 preds: ^bb13, ^bb14
    cir.br ^bb16 loc(#loc180)
  ^bb16:  // pred: ^bb15
    cir.return loc(#loc162)
  } loc(#loc241)
} loc(#loc)
#loc = loc("/home/ladisgin/git_proj/juliet-c/testcases/CWE369_Divide_by_Zero/s01/CWE369_Divide_by_Zero__float_rand_15.c":0:0)
#loc1 = loc("/usr/include/stdlib.h":573:1)
#loc2 = loc("/usr/include/stdlib.h":573:24)
#loc3 = loc("../../../testcasesupport/std_testcase_io.h":14:1)
#loc4 = loc("../../../testcasesupport/std_testcase_io.h":14:33)
#loc5 = loc("CWE369_Divide_by_Zero__float_rand_15.c":37:19)
#loc6 = loc("../../../testcasesupport/std_testcase_io.h":18:1)
#loc7 = loc("../../../testcasesupport/std_testcase_io.h":18:33)
#loc8 = loc("CWE369_Divide_by_Zero__float_rand_15.c":24:1)
#loc9 = loc("CWE369_Divide_by_Zero__float_rand_15.c":54:1)
#loc10 = loc("CWE369_Divide_by_Zero__float_rand_15.c":45:9)
#loc11 = loc("CWE369_Divide_by_Zero__float_rand_15.c":45:40)
#loc12 = loc("CWE369_Divide_by_Zero__float_rand_15.c":26:5)
#loc13 = loc("CWE369_Divide_by_Zero__float_rand_15.c":26:11)
#loc14 = loc("CWE369_Divide_by_Zero__float_rand_15.c":28:12)
#loc15 = loc("CWE369_Divide_by_Zero__float_rand_15.c":28:5)
#loc16 = loc("CWE369_Divide_by_Zero__float_rand_15.c":29:5)
#loc17 = loc("CWE369_Divide_by_Zero__float_rand_15.c":39:5)
#loc18 = loc("CWE369_Divide_by_Zero__float_rand_15.c":29:12)
#loc19 = loc("CWE369_Divide_by_Zero__float_rand_15.c":31:5)
#loc21 = loc("CWE369_Divide_by_Zero__float_rand_15.c":33:9)
#loc22 = loc("CWE369_Divide_by_Zero__float_rand_15.c":34:9)
#loc23 = loc("CWE369_Divide_by_Zero__float_rand_15.c":37:9)
#loc24 = loc("CWE369_Divide_by_Zero__float_rand_15.c":38:9)
#loc25 = loc("CWE369_Divide_by_Zero__float_rand_15.c":40:5)
#loc26 = loc("CWE369_Divide_by_Zero__float_rand_15.c":53:5)
#loc27 = loc("CWE369_Divide_by_Zero__float_rand_15.c":40:12)
#loc28 = loc("CWE369_Divide_by_Zero__float_rand_15.c":42:5)
#loc29 = loc("CWE369_Divide_by_Zero__float_rand_15.c":43:5)
#loc30 = loc("CWE369_Divide_by_Zero__float_rand_15.c":47:5)
#loc31 = loc("CWE369_Divide_by_Zero__float_rand_15.c":45:28)
#loc32 = loc("CWE369_Divide_by_Zero__float_rand_15.c":45:36)
#loc33 = loc("CWE369_Divide_by_Zero__float_rand_15.c":46:22)
#loc34 = loc("CWE369_Divide_by_Zero__float_rand_15.c":46:9)
#loc35 = loc("CWE369_Divide_by_Zero__float_rand_15.c":48:5)
#loc36 = loc("CWE369_Divide_by_Zero__float_rand_15.c":51:19)
#loc37 = loc("CWE369_Divide_by_Zero__float_rand_15.c":51:9)
#loc38 = loc("CWE369_Divide_by_Zero__float_rand_15.c":52:9)
#loc39 = loc("CWE369_Divide_by_Zero__float_rand_15.c":202:1)
#loc40 = loc("CWE369_Divide_by_Zero__float_rand_15.c":208:1)
#loc41 = loc("CWE369_Divide_by_Zero__float_rand_15.c":204:5)
#loc42 = loc("CWE369_Divide_by_Zero__float_rand_15.c":204:14)
#loc43 = loc("CWE369_Divide_by_Zero__float_rand_15.c":205:5)
#loc44 = loc("CWE369_Divide_by_Zero__float_rand_15.c":205:14)
#loc45 = loc("CWE369_Divide_by_Zero__float_rand_15.c":206:5)
#loc46 = loc("CWE369_Divide_by_Zero__float_rand_15.c":206:14)
#loc47 = loc("CWE369_Divide_by_Zero__float_rand_15.c":207:5)
#loc48 = loc("CWE369_Divide_by_Zero__float_rand_15.c":207:14)
#loc49 = loc("CWE369_Divide_by_Zero__float_rand_15.c":92:23)
#loc50 = loc("CWE369_Divide_by_Zero__float_rand_15.c":61:1)
#loc51 = loc("CWE369_Divide_by_Zero__float_rand_15.c":96:1)
#loc52 = loc("CWE369_Divide_by_Zero__float_rand_15.c":87:13)
#loc53 = loc("CWE369_Divide_by_Zero__float_rand_15.c":87:44)
#loc54 = loc("CWE369_Divide_by_Zero__float_rand_15.c":63:5)
#loc55 = loc("CWE369_Divide_by_Zero__float_rand_15.c":63:11)
#loc56 = loc("CWE369_Divide_by_Zero__float_rand_15.c":65:12)
#loc57 = loc("CWE369_Divide_by_Zero__float_rand_15.c":65:5)
#loc58 = loc("CWE369_Divide_by_Zero__float_rand_15.c":66:5)
#loc59 = loc("CWE369_Divide_by_Zero__float_rand_15.c":76:5)
#loc60 = loc("CWE369_Divide_by_Zero__float_rand_15.c":66:12)
#loc61 = loc("CWE369_Divide_by_Zero__float_rand_15.c":68:5)
#loc63 = loc("CWE369_Divide_by_Zero__float_rand_15.c":70:9)
#loc64 = loc("CWE369_Divide_by_Zero__float_rand_15.c":71:9)
#loc65 = loc("CWE369_Divide_by_Zero__float_rand_15.c":74:19)
#loc66 = loc("CWE369_Divide_by_Zero__float_rand_15.c":74:9)
#loc67 = loc("CWE369_Divide_by_Zero__float_rand_15.c":75:9)
#loc68 = loc("CWE369_Divide_by_Zero__float_rand_15.c":77:5)
#loc69 = loc("CWE369_Divide_by_Zero__float_rand_15.c":95:5)
#loc70 = loc("CWE369_Divide_by_Zero__float_rand_15.c":77:12)
#loc71 = loc("CWE369_Divide_by_Zero__float_rand_15.c":79:5)
#loc72 = loc("CWE369_Divide_by_Zero__float_rand_15.c":81:19)
#loc73 = loc("CWE369_Divide_by_Zero__float_rand_15.c":81:9)
#loc74 = loc("CWE369_Divide_by_Zero__float_rand_15.c":82:9)
#loc75 = loc("CWE369_Divide_by_Zero__float_rand_15.c":85:9)
#loc76 = loc("CWE369_Divide_by_Zero__float_rand_15.c":93:9)
#loc77 = loc("CWE369_Divide_by_Zero__float_rand_15.c":85:17)
#loc78 = loc("CWE369_Divide_by_Zero__float_rand_15.c":85:25)
#loc79 = loc("CWE369_Divide_by_Zero__float_rand_15.c":85:12)
#loc80 = loc("CWE369_Divide_by_Zero__float_rand_15.c":86:9)
#loc81 = loc("CWE369_Divide_by_Zero__float_rand_15.c":89:9)
#loc82 = loc("CWE369_Divide_by_Zero__float_rand_15.c":91:9)
#loc83 = loc("CWE369_Divide_by_Zero__float_rand_15.c":87:32)
#loc84 = loc("CWE369_Divide_by_Zero__float_rand_15.c":87:40)
#loc85 = loc("CWE369_Divide_by_Zero__float_rand_15.c":88:26)
#loc86 = loc("CWE369_Divide_by_Zero__float_rand_15.c":88:13)
#loc87 = loc("CWE369_Divide_by_Zero__float_rand_15.c":92:13)
#loc88 = loc("CWE369_Divide_by_Zero__float_rand_15.c":94:9)
#loc89 = loc("CWE369_Divide_by_Zero__float_rand_15.c":99:1)
#loc90 = loc("CWE369_Divide_by_Zero__float_rand_15.c":134:1)
#loc91 = loc("CWE369_Divide_by_Zero__float_rand_15.c":121:13)
#loc92 = loc("CWE369_Divide_by_Zero__float_rand_15.c":121:44)
#loc93 = loc("CWE369_Divide_by_Zero__float_rand_15.c":101:5)
#loc94 = loc("CWE369_Divide_by_Zero__float_rand_15.c":101:11)
#loc95 = loc("CWE369_Divide_by_Zero__float_rand_15.c":103:12)
#loc96 = loc("CWE369_Divide_by_Zero__float_rand_15.c":103:5)
#loc97 = loc("CWE369_Divide_by_Zero__float_rand_15.c":104:5)
#loc98 = loc("CWE369_Divide_by_Zero__float_rand_15.c":114:5)
#loc99 = loc("CWE369_Divide_by_Zero__float_rand_15.c":104:12)
#loc100 = loc("CWE369_Divide_by_Zero__float_rand_15.c":106:5)
#loc102 = loc("CWE369_Divide_by_Zero__float_rand_15.c":108:9)
#loc103 = loc("CWE369_Divide_by_Zero__float_rand_15.c":109:9)
#loc104 = loc("CWE369_Divide_by_Zero__float_rand_15.c":112:19)
#loc105 = loc("CWE369_Divide_by_Zero__float_rand_15.c":112:9)
#loc106 = loc("CWE369_Divide_by_Zero__float_rand_15.c":113:9)
#loc107 = loc("CWE369_Divide_by_Zero__float_rand_15.c":115:5)
#loc108 = loc("CWE369_Divide_by_Zero__float_rand_15.c":133:5)
#loc109 = loc("CWE369_Divide_by_Zero__float_rand_15.c":115:12)
#loc110 = loc("CWE369_Divide_by_Zero__float_rand_15.c":117:5)
#loc111 = loc("CWE369_Divide_by_Zero__float_rand_15.c":119:9)
#loc112 = loc("CWE369_Divide_by_Zero__float_rand_15.c":127:9)
#loc113 = loc("CWE369_Divide_by_Zero__float_rand_15.c":119:17)
#loc114 = loc("CWE369_Divide_by_Zero__float_rand_15.c":119:25)
#loc115 = loc("CWE369_Divide_by_Zero__float_rand_15.c":119:12)
#loc116 = loc("CWE369_Divide_by_Zero__float_rand_15.c":120:9)
#loc117 = loc("CWE369_Divide_by_Zero__float_rand_15.c":123:9)
#loc118 = loc("CWE369_Divide_by_Zero__float_rand_15.c":125:9)
#loc119 = loc("CWE369_Divide_by_Zero__float_rand_15.c":121:32)
#loc120 = loc("CWE369_Divide_by_Zero__float_rand_15.c":121:40)
#loc121 = loc("CWE369_Divide_by_Zero__float_rand_15.c":122:26)
#loc122 = loc("CWE369_Divide_by_Zero__float_rand_15.c":122:13)
#loc123 = loc("CWE369_Divide_by_Zero__float_rand_15.c":126:23)
#loc124 = loc("CWE369_Divide_by_Zero__float_rand_15.c":126:13)
#loc125 = loc("CWE369_Divide_by_Zero__float_rand_15.c":128:9)
#loc126 = loc("CWE369_Divide_by_Zero__float_rand_15.c":131:19)
#loc127 = loc("CWE369_Divide_by_Zero__float_rand_15.c":131:9)
#loc128 = loc("CWE369_Divide_by_Zero__float_rand_15.c":132:9)
#loc129 = loc("CWE369_Divide_by_Zero__float_rand_15.c":137:1)
#loc130 = loc("CWE369_Divide_by_Zero__float_rand_15.c":167:1)
#loc131 = loc("CWE369_Divide_by_Zero__float_rand_15.c":158:9)
#loc132 = loc("CWE369_Divide_by_Zero__float_rand_15.c":158:40)
#loc133 = loc("CWE369_Divide_by_Zero__float_rand_15.c":139:5)
#loc134 = loc("CWE369_Divide_by_Zero__float_rand_15.c":139:11)
#loc135 = loc("CWE369_Divide_by_Zero__float_rand_15.c":141:12)
#loc136 = loc("CWE369_Divide_by_Zero__float_rand_15.c":141:5)
#loc137 = loc("CWE369_Divide_by_Zero__float_rand_15.c":142:5)
#loc138 = loc("CWE369_Divide_by_Zero__float_rand_15.c":152:5)
#loc139 = loc("CWE369_Divide_by_Zero__float_rand_15.c":142:12)
#loc140 = loc("CWE369_Divide_by_Zero__float_rand_15.c":144:5)
#loc141 = loc("CWE369_Divide_by_Zero__float_rand_15.c":146:19)
#loc142 = loc("CWE369_Divide_by_Zero__float_rand_15.c":146:9)
#loc143 = loc("CWE369_Divide_by_Zero__float_rand_15.c":147:9)
#loc144 = loc("CWE369_Divide_by_Zero__float_rand_15.c":150:16)
#loc145 = loc("CWE369_Divide_by_Zero__float_rand_15.c":150:9)
#loc146 = loc("CWE369_Divide_by_Zero__float_rand_15.c":151:9)
#loc147 = loc("CWE369_Divide_by_Zero__float_rand_15.c":153:5)
#loc148 = loc("CWE369_Divide_by_Zero__float_rand_15.c":166:5)
#loc149 = loc("CWE369_Divide_by_Zero__float_rand_15.c":153:12)
#loc150 = loc("CWE369_Divide_by_Zero__float_rand_15.c":155:5)
#loc151 = loc("CWE369_Divide_by_Zero__float_rand_15.c":156:5)
#loc152 = loc("CWE369_Divide_by_Zero__float_rand_15.c":160:5)
#loc153 = loc("CWE369_Divide_by_Zero__float_rand_15.c":158:28)
#loc154 = loc("CWE369_Divide_by_Zero__float_rand_15.c":158:36)
#loc155 = loc("CWE369_Divide_by_Zero__float_rand_15.c":159:22)
#loc156 = loc("CWE369_Divide_by_Zero__float_rand_15.c":159:9)
#loc157 = loc("CWE369_Divide_by_Zero__float_rand_15.c":161:5)
#loc158 = loc("CWE369_Divide_by_Zero__float_rand_15.c":164:19)
#loc159 = loc("CWE369_Divide_by_Zero__float_rand_15.c":164:9)
#loc160 = loc("CWE369_Divide_by_Zero__float_rand_15.c":165:9)
#loc161 = loc("CWE369_Divide_by_Zero__float_rand_15.c":170:1)
#loc162 = loc("CWE369_Divide_by_Zero__float_rand_15.c":200:1)
#loc163 = loc("CWE369_Divide_by_Zero__float_rand_15.c":191:9)
#loc164 = loc("CWE369_Divide_by_Zero__float_rand_15.c":191:40)
#loc165 = loc("CWE369_Divide_by_Zero__float_rand_15.c":172:5)
#loc166 = loc("CWE369_Divide_by_Zero__float_rand_15.c":172:11)
#loc167 = loc("CWE369_Divide_by_Zero__float_rand_15.c":174:12)
#loc168 = loc("CWE369_Divide_by_Zero__float_rand_15.c":174:5)
#loc169 = loc("CWE369_Divide_by_Zero__float_rand_15.c":175:5)
#loc170 = loc("CWE369_Divide_by_Zero__float_rand_15.c":185:5)
#loc171 = loc("CWE369_Divide_by_Zero__float_rand_15.c":175:12)
#loc172 = loc("CWE369_Divide_by_Zero__float_rand_15.c":177:5)
#loc173 = loc("CWE369_Divide_by_Zero__float_rand_15.c":179:16)
#loc174 = loc("CWE369_Divide_by_Zero__float_rand_15.c":179:9)
#loc175 = loc("CWE369_Divide_by_Zero__float_rand_15.c":180:9)
#loc176 = loc("CWE369_Divide_by_Zero__float_rand_15.c":183:19)
#loc177 = loc("CWE369_Divide_by_Zero__float_rand_15.c":183:9)
#loc178 = loc("CWE369_Divide_by_Zero__float_rand_15.c":184:9)
#loc179 = loc("CWE369_Divide_by_Zero__float_rand_15.c":186:5)
#loc180 = loc("CWE369_Divide_by_Zero__float_rand_15.c":199:5)
#loc181 = loc("CWE369_Divide_by_Zero__float_rand_15.c":186:12)
#loc182 = loc("CWE369_Divide_by_Zero__float_rand_15.c":188:5)
#loc183 = loc("CWE369_Divide_by_Zero__float_rand_15.c":189:5)
#loc184 = loc("CWE369_Divide_by_Zero__float_rand_15.c":193:5)
#loc185 = loc("CWE369_Divide_by_Zero__float_rand_15.c":191:28)
#loc186 = loc("CWE369_Divide_by_Zero__float_rand_15.c":191:36)
#loc187 = loc("CWE369_Divide_by_Zero__float_rand_15.c":192:22)
#loc188 = loc("CWE369_Divide_by_Zero__float_rand_15.c":192:9)
#loc189 = loc("CWE369_Divide_by_Zero__float_rand_15.c":194:5)
#loc190 = loc("CWE369_Divide_by_Zero__float_rand_15.c":197:19)
#loc191 = loc("CWE369_Divide_by_Zero__float_rand_15.c":197:9)
#loc192 = loc("CWE369_Divide_by_Zero__float_rand_15.c":198:9)
#loc193 = loc(fused[#loc1, #loc2])
#loc194 = loc(fused[#loc3, #loc4])
#loc195 = loc(fused[#loc6, #loc7])
#loc196 = loc(fused[#loc8, #loc9])
#loc197 = loc(fused[#loc10, #loc11])
#loc198 = loc(fused[#loc12, #loc13])
#loc199 = loc(fused[#loc15, #loc14])
#loc200 = loc(fused[#loc16, #loc17])
#loc201 = loc(fused[#loc21, #loc20])
#loc202 = loc(fused[#loc25, #loc26])
#loc203 = loc(fused[#loc29, #loc30])
#loc204 = loc(fused[#loc31, #loc32])
#loc205 = loc(fused[#loc39, #loc40])
#loc206 = loc(fused[#loc41, #loc42])
#loc207 = loc(fused[#loc43, #loc44])
#loc208 = loc(fused[#loc45, #loc46])
#loc209 = loc(fused[#loc47, #loc48])
#loc210 = loc(fused[#loc50, #loc51])
#loc211 = loc(fused[#loc52, #loc53])
#loc212 = loc(fused[#loc54, #loc55])
#loc213 = loc(fused[#loc57, #loc56])
#loc214 = loc(fused[#loc58, #loc59])
#loc215 = loc(fused[#loc63, #loc62])
#loc216 = loc(fused[#loc68, #loc69])
#loc217 = loc(fused[#loc75, #loc76])
#loc218 = loc(fused[#loc79, #loc78])
#loc219 = loc(fused[#loc80, #loc81, #loc82, #loc76])
#loc220 = loc(fused[#loc83, #loc84])
#loc221 = loc(fused[#loc89, #loc90])
#loc222 = loc(fused[#loc91, #loc92])
#loc223 = loc(fused[#loc93, #loc94])
#loc224 = loc(fused[#loc96, #loc95])
#loc225 = loc(fused[#loc97, #loc98])
#loc226 = loc(fused[#loc102, #loc101])
#loc227 = loc(fused[#loc107, #loc108])
#loc228 = loc(fused[#loc111, #loc112])
#loc229 = loc(fused[#loc115, #loc114])
#loc230 = loc(fused[#loc116, #loc117, #loc118, #loc112])
#loc231 = loc(fused[#loc119, #loc120])
#loc232 = loc(fused[#loc129, #loc130])
#loc233 = loc(fused[#loc131, #loc132])
#loc234 = loc(fused[#loc133, #loc134])
#loc235 = loc(fused[#loc136, #loc135])
#loc236 = loc(fused[#loc137, #loc138])
#loc237 = loc(fused[#loc145, #loc144])
#loc238 = loc(fused[#loc147, #loc148])
#loc239 = loc(fused[#loc151, #loc152])
#loc240 = loc(fused[#loc153, #loc154])
#loc241 = loc(fused[#loc161, #loc162])
#loc242 = loc(fused[#loc163, #loc164])
#loc243 = loc(fused[#loc165, #loc166])
#loc244 = loc(fused[#loc168, #loc167])
#loc245 = loc(fused[#loc169, #loc170])
#loc246 = loc(fused[#loc174, #loc173])
#loc247 = loc(fused[#loc179, #loc180])
#loc248 = loc(fused[#loc183, #loc184])
#loc249 = loc(fused[#loc185, #loc186])
