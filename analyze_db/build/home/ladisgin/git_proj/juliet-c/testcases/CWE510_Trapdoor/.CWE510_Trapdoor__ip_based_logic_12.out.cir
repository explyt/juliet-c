!s32i = !cir.int<s, 32>
!s64i = !cir.int<s, 64>
!s8i = !cir.int<s, 8>
!u16i = !cir.int<u, 16>
!u32i = !cir.int<u, 32>
!u64i = !cir.int<u, 64>
!u8i = !cir.int<u, 8>
!void = !cir.void
#fn_attr = #cir<extra({nothrow = #cir.nothrow})>
#fn_attr1 = #cir<extra({inline = #cir.inline<no>, nothrow = #cir.nothrow, optnone = #cir.optnone})>
#loc278 = loc("CWE510_Trapdoor__ip_based_logic_12.c":340:10)
#loc279 = loc("CWE510_Trapdoor__ip_based_logic_12.c":340:14)
#loc280 = loc("CWE510_Trapdoor__ip_based_logic_12.c":340:20)
#loc281 = loc("CWE510_Trapdoor__ip_based_logic_12.c":340:32)
!ty_in_addr = !cir.struct<struct "in_addr" {!u32i} #cir.record.decl.ast>
#loc605 = loc(fused[#loc278, #loc279])
#loc606 = loc(fused[#loc280, #loc281])
!ty_sockaddr = !cir.struct<struct "sockaddr" {!u16i, !cir.array<!s8i x 14>} #cir.record.decl.ast>
!ty_sockaddr_in = !cir.struct<struct "sockaddr_in" {!u16i, !u16i, !ty_in_addr, !cir.array<!u8i x 8>}>
module @"/home/ladisgin/git_proj/juliet-c/testcases/CWE510_Trapdoor/CWE510_Trapdoor__ip_based_logic_12.c" attributes {cir.lang = #cir.lang<c>, cir.sob = #cir.signed_overflow_behavior<undefined>, cir.triple = "x86_64-unknown-linux-gnu", dlti.dl_spec = #dlti.dl_spec<i32 = dense<32> : vector<2xi64>, f64 = dense<64> : vector<2xi64>, f16 = dense<16> : vector<2xi64>, f128 = dense<128> : vector<2xi64>, !llvm.ptr<270> = dense<32> : vector<4xi64>, !llvm.ptr = dense<64> : vector<4xi64>, i1 = dense<8> : vector<2xi64>, i8 = dense<8> : vector<2xi64>, i16 = dense<16> : vector<2xi64>, i128 = dense<128> : vector<2xi64>, f80 = dense<128> : vector<2xi64>, !llvm.ptr<271> = dense<32> : vector<4xi64>, !llvm.ptr<272> = dense<64> : vector<4xi64>, i64 = dense<64> : vector<2xi64>, "dlti.endianness" = "little", "dlti.stack_alignment" = 128 : i64>} {
  cir.func no_proto private @globalReturnsTrueOrFalse(...) -> !s32i loc(#loc495)
  cir.func private @socket(!s32i, !s32i, !s32i) -> !s32i extra(#fn_attr) loc(#loc496)
  cir.func private @htons(!u16i) -> !u16i extra(#fn_attr) loc(#loc497)
  cir.func private @bind(!s32i, !cir.ptr<!ty_sockaddr>, !u32i) -> !s32i extra(#fn_attr) loc(#loc498)
  cir.func private @listen(!s32i, !s32i) -> !s32i extra(#fn_attr) loc(#loc499)
  cir.func private @accept(!s32i, !cir.ptr<!ty_sockaddr>, !cir.ptr<!u32i>) -> !s32i loc(#loc500)
  cir.func private @getsockname(!s32i, !cir.ptr<!ty_sockaddr>, !cir.ptr<!u32i>) -> !s32i extra(#fn_attr) loc(#loc501)
  cir.func private @strcmp(!cir.ptr<!s8i>, !cir.ptr<!s8i>) -> !s32i extra(#fn_attr) loc(#loc502)
  cir.global "private" constant cir_private dsolocal @".str" = #cir.const_array<"192.168.30.123\00" : !cir.array<!s8i x 15>> : !cir.array<!s8i x 15> {alignment = 1 : i64} loc(#loc17)
  cir.func private @inet_ntoa(!ty_in_addr) -> !cir.ptr<!s8i> extra(#fn_attr) loc(#loc503)
  cir.func private @send(!s32i, !cir.ptr<!void>, !u64i, !s32i) -> !s64i loc(#loc504)
  cir.global "private" constant cir_private dsolocal @".str.1" = #cir.const_array<"Welcome, admin!\00" : !cir.array<!s8i x 16>> : !cir.array<!s8i x 16> {alignment = 1 : i64} loc(#loc22)
  cir.global "private" constant cir_private dsolocal @".str.2" = #cir.const_array<"Welcome!\00" : !cir.array<!s8i x 9>> : !cir.array<!s8i x 9> {alignment = 1 : i64} loc(#loc23)
  cir.func private @printLine(!cir.ptr<!s8i>) loc(#loc505)
  cir.global "private" constant cir_private dsolocal @".str.3" = #cir.const_array<"Send failed!\00" : !cir.array<!s8i x 13>> : !cir.array<!s8i x 13> {alignment = 1 : i64} loc(#loc26)
  cir.func private @close(!s32i) -> !s32i loc(#loc506)
  cir.func no_proto @CWE510_Trapdoor__ip_based_logic_12_bad() extra(#fn_attr1) {
    cir.scope {
      %0 = cir.get_global @globalReturnsTrueOrFalse : !cir.ptr<!cir.func<!s32i (...)>> loc(#loc509)
      %1 = cir.cast(bitcast, %0 : !cir.ptr<!cir.func<!s32i (...)>>), !cir.ptr<!cir.func<!s32i ()>> loc(#loc509)
      %2 = cir.call %1() : (!cir.ptr<!cir.func<!s32i ()>>) -> !s32i loc(#loc33)
      %3 = cir.cast(int_to_bool, %2 : !s32i), !cir.bool loc(#loc33)
      cir.if %3 {
        cir.scope {
          %4 = cir.alloca !ty_sockaddr_in, !cir.ptr<!ty_sockaddr_in>, ["service"] {alignment = 4 : i64} loc(#loc512)
          %5 = cir.alloca !ty_sockaddr_in, !cir.ptr<!ty_sockaddr_in>, ["acceptService"] {alignment = 4 : i64} loc(#loc513)
          %6 = cir.alloca !s32i, !cir.ptr<!s32i>, ["acceptServiceLen", init] {alignment = 4 : i64} loc(#loc514)
          %7 = cir.alloca !s32i, !cir.ptr<!s32i>, ["listenSocket", init] {alignment = 4 : i64} loc(#loc515)
          %8 = cir.alloca !s32i, !cir.ptr<!s32i>, ["acceptSocket", init] {alignment = 4 : i64} loc(#loc516)
          %9 = cir.const #cir.int<16> : !u64i loc(#loc517)
          %10 = cir.cast(integral, %9 : !u64i), !s32i loc(#loc517)
          cir.store %10, %6 : !s32i, !cir.ptr<!s32i> loc(#loc514)
          %11 = cir.const #cir.int<1> : !s32i loc(#loc46)
          %12 = cir.unary(minus, %11) : !s32i, !s32i loc(#loc46)
          cir.store %12, %7 : !s32i, !cir.ptr<!s32i> loc(#loc515)
          %13 = cir.const #cir.int<1> : !s32i loc(#loc48)
          %14 = cir.unary(minus, %13) : !s32i, !s32i loc(#loc48)
          cir.store %14, %8 : !s32i, !cir.ptr<!s32i> loc(#loc516)
          cir.scope {
            cir.do {
              %15 = cir.const #cir.int<2> : !s32i loc(#loc52)
              %16 = cir.const #cir.int<1> : !s32i loc(#loc53)
              %17 = cir.const #cir.int<6> : !s32i loc(#loc54)
              %18 = cir.call @socket(%15, %16, %17) : (!s32i, !s32i, !s32i) -> !s32i extra(#fn_attr) loc(#loc55)
              cir.store %18, %7 : !s32i, !cir.ptr<!s32i> loc(#loc519)
              cir.scope {
                %37 = cir.load %7 : !cir.ptr<!s32i>, !s32i loc(#loc60)
                %38 = cir.const #cir.int<1> : !s32i loc(#loc61)
                %39 = cir.unary(minus, %38) : !s32i, !s32i loc(#loc61)
                %40 = cir.cmp(eq, %37, %39) : !s32i, !cir.bool loc(#loc521)
                cir.if %40 {
                  cir.break loc(#loc63)
                } loc(#loc522)
              } loc(#loc520)
              %19 = cir.cast(bitcast, %4 : !cir.ptr<!ty_sockaddr_in>), !cir.ptr<!void> loc(#loc523)
              %20 = cir.const #cir.int<0> : !s32i loc(#loc66)
              %21 = cir.const #cir.int<16> : !u64i loc(#loc524)
              cir.libc.memset %21 bytes from %19 set to %20 : !cir.ptr<!void>, !s32i, !u64i loc(#loc525)
              %22 = cir.const #cir.int<2> : !s32i loc(#loc71)
              %23 = cir.cast(integral, %22 : !s32i), !u16i loc(#loc71)
              %24 = cir.get_member %4[0] {name = "sin_family"} : !cir.ptr<!ty_sockaddr_in> -> !cir.ptr<!u16i> loc(#loc72)
              cir.store %23, %24 : !u16i, !cir.ptr<!u16i> loc(#loc526)
              %25 = cir.const #cir.int<0> : !s32i loc(#loc74)
              %26 = cir.cast(integral, %25 : !s32i), !u32i loc(#loc74)
              %27 = cir.get_member %4[2] {name = "sin_addr"} : !cir.ptr<!ty_sockaddr_in> -> !cir.ptr<!ty_in_addr> loc(#loc75)
              %28 = cir.get_member %27[0] {name = "s_addr"} : !cir.ptr<!ty_in_addr> -> !cir.ptr<!u32i> loc(#loc76)
              cir.store %26, %28 : !u32i, !cir.ptr<!u32i> loc(#loc527)
              %29 = cir.const #cir.int<20000> : !s32i loc(#loc78)
              %30 = cir.cast(integral, %29 : !s32i), !u16i loc(#loc78)
              %31 = cir.call @htons(%30) : (!u16i) -> !u16i extra(#fn_attr) loc(#loc79)
              %32 = cir.get_member %4[1] {name = "sin_port"} : !cir.ptr<!ty_sockaddr_in> -> !cir.ptr<!u16i> loc(#loc80)
              cir.store %31, %32 : !u16i, !cir.ptr<!u16i> loc(#loc528)
              cir.scope {
                %37 = cir.load %7 : !cir.ptr<!s32i>, !s32i loc(#loc85)
                %38 = cir.cast(bitcast, %4 : !cir.ptr<!ty_sockaddr_in>), !cir.ptr<!ty_sockaddr> loc(#loc530)
                %39 = cir.const #cir.int<16> : !u64i loc(#loc531)
                %40 = cir.cast(integral, %39 : !u64i), !u32i loc(#loc531)
                %41 = cir.call @bind(%37, %38, %40) : (!s32i, !cir.ptr<!ty_sockaddr>, !u32i) -> !s32i extra(#fn_attr) loc(#loc90)
                %42 = cir.const #cir.int<1> : !s32i loc(#loc91)
                %43 = cir.unary(minus, %42) : !s32i, !s32i loc(#loc91)
                %44 = cir.cmp(eq, %41, %43) : !s32i, !cir.bool loc(#loc532)
                cir.if %44 {
                  cir.break loc(#loc93)
                } loc(#loc533)
              } loc(#loc529)
              cir.scope {
                %37 = cir.load %7 : !cir.ptr<!s32i>, !s32i loc(#loc96)
                %38 = cir.const #cir.int<5> : !s32i loc(#loc97)
                %39 = cir.call @listen(%37, %38) : (!s32i, !s32i) -> !s32i extra(#fn_attr) loc(#loc98)
                %40 = cir.const #cir.int<1> : !s32i loc(#loc99)
                %41 = cir.unary(minus, %40) : !s32i, !s32i loc(#loc99)
                %42 = cir.cmp(eq, %39, %41) : !s32i, !cir.bool loc(#loc535)
                cir.if %42 {
                  cir.break loc(#loc101)
                } loc(#loc536)
              } loc(#loc534)
              %33 = cir.load %7 : !cir.ptr<!s32i>, !s32i loc(#loc102)
              %34 = cir.const #cir.ptr<null> : !cir.ptr<!ty_sockaddr> loc(#loc103)
              %35 = cir.const #cir.ptr<null> : !cir.ptr<!u32i> loc(#loc104)
              %36 = cir.call @accept(%33, %34, %35) : (!s32i, !cir.ptr<!ty_sockaddr>, !cir.ptr<!u32i>) -> !s32i loc(#loc105)
              cir.store %36, %8 : !s32i, !cir.ptr<!s32i> loc(#loc537)
              cir.scope {
                %37 = cir.load %8 : !cir.ptr<!s32i>, !s32i loc(#loc110)
                %38 = cir.const #cir.int<1> : !s32i loc(#loc111)
                %39 = cir.unary(minus, %38) : !s32i, !s32i loc(#loc111)
                %40 = cir.cmp(eq, %37, %39) : !s32i, !cir.bool loc(#loc539)
                cir.if %40 {
                  cir.break loc(#loc113)
                } loc(#loc540)
              } loc(#loc538)
              cir.scope {
                %37 = cir.load %8 : !cir.ptr<!s32i>, !s32i loc(#loc116)
                %38 = cir.cast(bitcast, %5 : !cir.ptr<!ty_sockaddr_in>), !cir.ptr<!ty_sockaddr> loc(#loc542)
                %39 = cir.cast(bitcast, %6 : !cir.ptr<!s32i>), !cir.ptr<!u32i> loc(#loc543)
                %40 = cir.call @getsockname(%37, %38, %39) : (!s32i, !cir.ptr<!ty_sockaddr>, !cir.ptr<!u32i>) -> !s32i extra(#fn_attr) loc(#loc121)
                %41 = cir.const #cir.int<1> : !s32i loc(#loc122)
                %42 = cir.unary(minus, %41) : !s32i, !s32i loc(#loc123)
                %43 = cir.cmp(eq, %40, %42) : !s32i, !cir.bool loc(#loc544)
                cir.if %43 {
                  cir.break loc(#loc125)
                } loc(#loc545)
              } loc(#loc541)
              cir.scope {
                %37 = cir.get_global @strcmp : !cir.ptr<!cir.func<!s32i (!cir.ptr<!s8i>, !cir.ptr<!s8i>)>> loc(#loc128)
                %38 = cir.get_global @".str" : !cir.ptr<!cir.array<!s8i x 15>> loc(#loc17)
                %39 = cir.cast(array_to_ptrdecay, %38 : !cir.ptr<!cir.array<!s8i x 15>>), !cir.ptr<!s8i> loc(#loc17)
                %40 = cir.get_member %5[2] {name = "sin_addr"} : !cir.ptr<!ty_sockaddr_in> -> !cir.ptr<!ty_in_addr> loc(#loc75)
                %41 = cir.load %40 : !cir.ptr<!ty_in_addr>, !ty_in_addr loc(#loc129)
                %42 = cir.call @inet_ntoa(%41) : (!ty_in_addr) -> !cir.ptr<!s8i> extra(#fn_attr) loc(#loc129)
                %43 = cir.call @strcmp(%39, %42) : (!cir.ptr<!s8i>, !cir.ptr<!s8i>) -> !s32i extra(#fn_attr) loc(#loc128)
                %44 = cir.const #cir.int<0> : !s32i loc(#loc130)
                %45 = cir.cmp(eq, %43, %44) : !s32i, !cir.bool loc(#loc547)
                cir.if %45 {
                  cir.scope {
                    %46 = cir.load %8 : !cir.ptr<!s32i>, !s32i loc(#loc136)
                    %47 = cir.get_global @".str.1" : !cir.ptr<!cir.array<!s8i x 16>> loc(#loc22)
                    %48 = cir.cast(array_to_ptrdecay, %47 : !cir.ptr<!cir.array<!s8i x 16>>), !cir.ptr<!s8i> loc(#loc22)
                    %49 = cir.cast(bitcast, %48 : !cir.ptr<!s8i>), !cir.ptr<!void> loc(#loc22)
                    %50 = cir.const #cir.int<15> : !u64i loc(#loc550)
                    %51 = cir.const #cir.int<0> : !s32i loc(#loc139)
                    %52 = cir.call @send(%46, %49, %50, %51) : (!s32i, !cir.ptr<!void>, !u64i, !s32i) -> !s64i loc(#loc140)
                    %53 = cir.const #cir.int<1> : !s32i loc(#loc141)
                    %54 = cir.unary(minus, %53) : !s32i, !s32i loc(#loc141)
                    %55 = cir.cast(integral, %54 : !s32i), !s64i loc(#loc141)
                    %56 = cir.cmp(eq, %52, %55) : !s64i, !cir.bool loc(#loc551)
                    cir.if %56 {
                      cir.break loc(#loc143)
                    } loc(#loc552)
                  } loc(#loc549)
                } else {
                  cir.scope {
                    %46 = cir.load %8 : !cir.ptr<!s32i>, !s32i loc(#loc146)
                    %47 = cir.get_global @".str.2" : !cir.ptr<!cir.array<!s8i x 9>> loc(#loc23)
                    %48 = cir.cast(array_to_ptrdecay, %47 : !cir.ptr<!cir.array<!s8i x 9>>), !cir.ptr<!s8i> loc(#loc23)
                    %49 = cir.cast(bitcast, %48 : !cir.ptr<!s8i>), !cir.ptr<!void> loc(#loc23)
                    %50 = cir.const #cir.int<8> : !u64i loc(#loc554)
                    %51 = cir.const #cir.int<0> : !s32i loc(#loc149)
                    %52 = cir.call @send(%46, %49, %50, %51) : (!s32i, !cir.ptr<!void>, !u64i, !s32i) -> !s64i loc(#loc150)
                    %53 = cir.const #cir.int<1> : !s32i loc(#loc151)
                    %54 = cir.unary(minus, %53) : !s32i, !s32i loc(#loc151)
                    %55 = cir.cast(integral, %54 : !s32i), !s64i loc(#loc151)
                    %56 = cir.cmp(eq, %52, %55) : !s64i, !cir.bool loc(#loc555)
                    cir.if %56 {
                      %57 = cir.get_global @".str.3" : !cir.ptr<!cir.array<!s8i x 13>> loc(#loc26)
                      %58 = cir.cast(array_to_ptrdecay, %57 : !cir.ptr<!cir.array<!s8i x 13>>), !cir.ptr<!s8i> loc(#loc26)
                      cir.call @printLine(%58) : (!cir.ptr<!s8i>) -> () loc(#loc153)
                    } loc(#loc556)
                  } loc(#loc553)
                } loc(#loc548)
              } loc(#loc546)
              cir.yield loc(#loc51)
            } while {
              %15 = cir.const #cir.int<0> : !s32i loc(#loc154)
              %16 = cir.cast(int_to_bool, %15 : !s32i), !cir.bool loc(#loc154)
              cir.condition(%16) loc(#loc154)
            } loc(#loc518)
          } loc(#loc518)
          cir.scope {
            %15 = cir.load %7 : !cir.ptr<!s32i>, !s32i loc(#loc157)
            %16 = cir.const #cir.int<1> : !s32i loc(#loc158)
            %17 = cir.unary(minus, %16) : !s32i, !s32i loc(#loc158)
            %18 = cir.cmp(ne, %15, %17) : !s32i, !cir.bool loc(#loc558)
            cir.if %18 {
              %19 = cir.load %7 : !cir.ptr<!s32i>, !s32i loc(#loc160)
              %20 = cir.call @close(%19) : (!s32i) -> !s32i loc(#loc161)
            } loc(#loc559)
          } loc(#loc557)
          cir.scope {
            %15 = cir.load %8 : !cir.ptr<!s32i>, !s32i loc(#loc164)
            %16 = cir.const #cir.int<1> : !s32i loc(#loc165)
            %17 = cir.unary(minus, %16) : !s32i, !s32i loc(#loc165)
            %18 = cir.cmp(ne, %15, %17) : !s32i, !cir.bool loc(#loc561)
            cir.if %18 {
              %19 = cir.load %8 : !cir.ptr<!s32i>, !s32i loc(#loc167)
              %20 = cir.call @close(%19) : (!s32i) -> !s32i loc(#loc168)
            } loc(#loc562)
          } loc(#loc560)
        } loc(#loc511)
      } else {
        cir.scope {
          %4 = cir.alloca !ty_sockaddr_in, !cir.ptr<!ty_sockaddr_in>, ["service"] {alignment = 4 : i64} loc(#loc564)
          %5 = cir.alloca !s32i, !cir.ptr<!s32i>, ["listenSocket", init] {alignment = 4 : i64} loc(#loc565)
          %6 = cir.alloca !s32i, !cir.ptr<!s32i>, ["acceptSocket", init] {alignment = 4 : i64} loc(#loc566)
          %7 = cir.const #cir.int<1> : !s32i loc(#loc174)
          %8 = cir.unary(minus, %7) : !s32i, !s32i loc(#loc174)
          cir.store %8, %5 : !s32i, !cir.ptr<!s32i> loc(#loc565)
          %9 = cir.const #cir.int<1> : !s32i loc(#loc176)
          %10 = cir.unary(minus, %9) : !s32i, !s32i loc(#loc176)
          cir.store %10, %6 : !s32i, !cir.ptr<!s32i> loc(#loc566)
          cir.scope {
            cir.do {
              %11 = cir.const #cir.int<2> : !s32i loc(#loc179)
              %12 = cir.const #cir.int<1> : !s32i loc(#loc180)
              %13 = cir.const #cir.int<6> : !s32i loc(#loc181)
              %14 = cir.call @socket(%11, %12, %13) : (!s32i, !s32i, !s32i) -> !s32i extra(#fn_attr) loc(#loc182)
              cir.store %14, %5 : !s32i, !cir.ptr<!s32i> loc(#loc568)
              cir.scope {
                %33 = cir.load %5 : !cir.ptr<!s32i>, !s32i loc(#loc187)
                %34 = cir.const #cir.int<1> : !s32i loc(#loc188)
                %35 = cir.unary(minus, %34) : !s32i, !s32i loc(#loc188)
                %36 = cir.cmp(eq, %33, %35) : !s32i, !cir.bool loc(#loc570)
                cir.if %36 {
                  cir.break loc(#loc190)
                } loc(#loc571)
              } loc(#loc569)
              %15 = cir.cast(bitcast, %4 : !cir.ptr<!ty_sockaddr_in>), !cir.ptr<!void> loc(#loc572)
              %16 = cir.const #cir.int<0> : !s32i loc(#loc193)
              %17 = cir.const #cir.int<16> : !u64i loc(#loc573)
              cir.libc.memset %17 bytes from %15 set to %16 : !cir.ptr<!void>, !s32i, !u64i loc(#loc574)
              %18 = cir.const #cir.int<2> : !s32i loc(#loc198)
              %19 = cir.cast(integral, %18 : !s32i), !u16i loc(#loc198)
              %20 = cir.get_member %4[0] {name = "sin_family"} : !cir.ptr<!ty_sockaddr_in> -> !cir.ptr<!u16i> loc(#loc72)
              cir.store %19, %20 : !u16i, !cir.ptr<!u16i> loc(#loc575)
              %21 = cir.const #cir.int<0> : !s32i loc(#loc200)
              %22 = cir.cast(integral, %21 : !s32i), !u32i loc(#loc200)
              %23 = cir.get_member %4[2] {name = "sin_addr"} : !cir.ptr<!ty_sockaddr_in> -> !cir.ptr<!ty_in_addr> loc(#loc75)
              %24 = cir.get_member %23[0] {name = "s_addr"} : !cir.ptr<!ty_in_addr> -> !cir.ptr<!u32i> loc(#loc76)
              cir.store %22, %24 : !u32i, !cir.ptr<!u32i> loc(#loc576)
              %25 = cir.const #cir.int<20000> : !s32i loc(#loc202)
              %26 = cir.cast(integral, %25 : !s32i), !u16i loc(#loc202)
              %27 = cir.call @htons(%26) : (!u16i) -> !u16i extra(#fn_attr) loc(#loc203)
              %28 = cir.get_member %4[1] {name = "sin_port"} : !cir.ptr<!ty_sockaddr_in> -> !cir.ptr<!u16i> loc(#loc80)
              cir.store %27, %28 : !u16i, !cir.ptr<!u16i> loc(#loc577)
              cir.scope {
                %33 = cir.load %5 : !cir.ptr<!s32i>, !s32i loc(#loc208)
                %34 = cir.cast(bitcast, %4 : !cir.ptr<!ty_sockaddr_in>), !cir.ptr<!ty_sockaddr> loc(#loc579)
                %35 = cir.const #cir.int<16> : !u64i loc(#loc580)
                %36 = cir.cast(integral, %35 : !u64i), !u32i loc(#loc580)
                %37 = cir.call @bind(%33, %34, %36) : (!s32i, !cir.ptr<!ty_sockaddr>, !u32i) -> !s32i extra(#fn_attr) loc(#loc213)
                %38 = cir.const #cir.int<1> : !s32i loc(#loc214)
                %39 = cir.unary(minus, %38) : !s32i, !s32i loc(#loc214)
                %40 = cir.cmp(eq, %37, %39) : !s32i, !cir.bool loc(#loc581)
                cir.if %40 {
                  cir.break loc(#loc216)
                } loc(#loc582)
              } loc(#loc578)
              cir.scope {
                %33 = cir.load %5 : !cir.ptr<!s32i>, !s32i loc(#loc219)
                %34 = cir.const #cir.int<5> : !s32i loc(#loc220)
                %35 = cir.call @listen(%33, %34) : (!s32i, !s32i) -> !s32i extra(#fn_attr) loc(#loc221)
                %36 = cir.const #cir.int<1> : !s32i loc(#loc222)
                %37 = cir.unary(minus, %36) : !s32i, !s32i loc(#loc222)
                %38 = cir.cmp(eq, %35, %37) : !s32i, !cir.bool loc(#loc584)
                cir.if %38 {
                  cir.break loc(#loc224)
                } loc(#loc585)
              } loc(#loc583)
              %29 = cir.load %5 : !cir.ptr<!s32i>, !s32i loc(#loc225)
              %30 = cir.const #cir.ptr<null> : !cir.ptr<!ty_sockaddr> loc(#loc226)
              %31 = cir.const #cir.ptr<null> : !cir.ptr<!u32i> loc(#loc227)
              %32 = cir.call @accept(%29, %30, %31) : (!s32i, !cir.ptr<!ty_sockaddr>, !cir.ptr<!u32i>) -> !s32i loc(#loc228)
              cir.store %32, %6 : !s32i, !cir.ptr<!s32i> loc(#loc586)
              cir.scope {
                %33 = cir.load %6 : !cir.ptr<!s32i>, !s32i loc(#loc233)
                %34 = cir.const #cir.int<1> : !s32i loc(#loc234)
                %35 = cir.unary(minus, %34) : !s32i, !s32i loc(#loc234)
                %36 = cir.cmp(eq, %33, %35) : !s32i, !cir.bool loc(#loc588)
                cir.if %36 {
                  cir.break loc(#loc236)
                } loc(#loc589)
              } loc(#loc587)
              cir.scope {
                %33 = cir.load %6 : !cir.ptr<!s32i>, !s32i loc(#loc239)
                %34 = cir.get_global @".str.2" : !cir.ptr<!cir.array<!s8i x 9>> loc(#loc240)
                %35 = cir.cast(array_to_ptrdecay, %34 : !cir.ptr<!cir.array<!s8i x 9>>), !cir.ptr<!s8i> loc(#loc240)
                %36 = cir.cast(bitcast, %35 : !cir.ptr<!s8i>), !cir.ptr<!void> loc(#loc240)
                %37 = cir.const #cir.int<8> : !u64i loc(#loc591)
                %38 = cir.const #cir.int<0> : !s32i loc(#loc243)
                %39 = cir.call @send(%33, %36, %37, %38) : (!s32i, !cir.ptr<!void>, !u64i, !s32i) -> !s64i loc(#loc244)
                %40 = cir.const #cir.int<1> : !s32i loc(#loc245)
                %41 = cir.unary(minus, %40) : !s32i, !s32i loc(#loc245)
                %42 = cir.cast(integral, %41 : !s32i), !s64i loc(#loc245)
                %43 = cir.cmp(eq, %39, %42) : !s64i, !cir.bool loc(#loc592)
                cir.if %43 {
                  %44 = cir.get_global @".str.3" : !cir.ptr<!cir.array<!s8i x 13>> loc(#loc247)
                  %45 = cir.cast(array_to_ptrdecay, %44 : !cir.ptr<!cir.array<!s8i x 13>>), !cir.ptr<!s8i> loc(#loc247)
                  cir.call @printLine(%45) : (!cir.ptr<!s8i>) -> () loc(#loc248)
                } loc(#loc593)
              } loc(#loc590)
              cir.yield loc(#loc178)
            } while {
              %11 = cir.const #cir.int<0> : !s32i loc(#loc249)
              %12 = cir.cast(int_to_bool, %11 : !s32i), !cir.bool loc(#loc249)
              cir.condition(%12) loc(#loc249)
            } loc(#loc567)
          } loc(#loc567)
          cir.scope {
            %11 = cir.load %5 : !cir.ptr<!s32i>, !s32i loc(#loc252)
            %12 = cir.const #cir.int<1> : !s32i loc(#loc253)
            %13 = cir.unary(minus, %12) : !s32i, !s32i loc(#loc253)
            %14 = cir.cmp(ne, %11, %13) : !s32i, !cir.bool loc(#loc595)
            cir.if %14 {
              %15 = cir.load %5 : !cir.ptr<!s32i>, !s32i loc(#loc255)
              %16 = cir.call @close(%15) : (!s32i) -> !s32i loc(#loc256)
            } loc(#loc596)
          } loc(#loc594)
          cir.scope {
            %11 = cir.load %6 : !cir.ptr<!s32i>, !s32i loc(#loc259)
            %12 = cir.const #cir.int<1> : !s32i loc(#loc260)
            %13 = cir.unary(minus, %12) : !s32i, !s32i loc(#loc260)
            %14 = cir.cmp(ne, %11, %13) : !s32i, !cir.bool loc(#loc598)
            cir.if %14 {
              %15 = cir.load %6 : !cir.ptr<!s32i>, !s32i loc(#loc262)
              %16 = cir.call @close(%15) : (!s32i) -> !s32i loc(#loc263)
            } loc(#loc599)
          } loc(#loc597)
        } loc(#loc563)
      } loc(#loc510)
    } loc(#loc508)
    cir.return loc(#loc30)
  } loc(#loc507)
  cir.func no_proto @CWE510_Trapdoor__ip_based_logic_12_good() extra(#fn_attr1) {
    %0 = cir.get_global @good1 : !cir.ptr<!cir.func<!void ()>> loc(#loc601)
    cir.call %0() : (!cir.ptr<!cir.func<!void ()>>) -> () loc(#loc266)
    cir.return loc(#loc265)
  } loc(#loc600)
  cir.func private @srand(!u32i) extra(#fn_attr) loc(#loc602)
  cir.func private @time(!cir.ptr<!s64i>) -> !s64i extra(#fn_attr) loc(#loc603)
  cir.global "private" constant cir_private dsolocal @".str.4" = #cir.const_array<"Calling good()...\00" : !cir.array<!s8i x 18>> : !cir.array<!s8i x 18> {alignment = 1 : i64} loc(#loc272)
  cir.global "private" constant cir_private dsolocal @".str.5" = #cir.const_array<"Finished good()\00" : !cir.array<!s8i x 16>> : !cir.array<!s8i x 16> {alignment = 1 : i64} loc(#loc273)
  cir.global "private" constant cir_private dsolocal @".str.6" = #cir.const_array<"Calling bad()...\00" : !cir.array<!s8i x 17>> : !cir.array<!s8i x 17> {alignment = 1 : i64} loc(#loc274)
  cir.global "private" constant cir_private dsolocal @".str.7" = #cir.const_array<"Finished bad()\00" : !cir.array<!s8i x 15>> : !cir.array<!s8i x 15> {alignment = 1 : i64} loc(#loc275)
  cir.func @main(%arg0: !s32i loc(fused[#loc278, #loc279]), %arg1: !cir.ptr<!cir.ptr<!s8i>> loc(fused[#loc280, #loc281])) -> !s32i extra(#fn_attr1) {
    %0 = cir.alloca !s32i, !cir.ptr<!s32i>, ["argc", init] {alignment = 4 : i64} loc(#loc605)
    %1 = cir.alloca !cir.ptr<!cir.ptr<!s8i>>, !cir.ptr<!cir.ptr<!cir.ptr<!s8i>>>, ["argv", init] {alignment = 8 : i64} loc(#loc606)
    %2 = cir.alloca !s32i, !cir.ptr<!s32i>, ["__retval"] {alignment = 4 : i64} loc(#loc277)
    cir.store %arg0, %0 : !s32i, !cir.ptr<!s32i> loc(#loc282)
    cir.store %arg1, %1 : !cir.ptr<!cir.ptr<!s8i>>, !cir.ptr<!cir.ptr<!cir.ptr<!s8i>>> loc(#loc282)
    %3 = cir.const #cir.ptr<null> : !cir.ptr<!s64i> loc(#loc283)
    %4 = cir.call @time(%3) : (!cir.ptr<!s64i>) -> !s64i extra(#fn_attr) loc(#loc284)
    %5 = cir.cast(integral, %4 : !s64i), !u32i loc(#loc284)
    cir.call @srand(%5) : (!u32i) -> () extra(#fn_attr) loc(#loc285)
    %6 = cir.get_global @".str.4" : !cir.ptr<!cir.array<!s8i x 18>> loc(#loc272)
    %7 = cir.cast(array_to_ptrdecay, %6 : !cir.ptr<!cir.array<!s8i x 18>>), !cir.ptr<!s8i> loc(#loc272)
    cir.call @printLine(%7) : (!cir.ptr<!s8i>) -> () loc(#loc286)
    %8 = cir.get_global @CWE510_Trapdoor__ip_based_logic_12_good : !cir.ptr<!cir.func<!void ()>> loc(#loc607)
    cir.call @CWE510_Trapdoor__ip_based_logic_12_good() : () -> () loc(#loc287)
    %9 = cir.get_global @".str.5" : !cir.ptr<!cir.array<!s8i x 16>> loc(#loc273)
    %10 = cir.cast(array_to_ptrdecay, %9 : !cir.ptr<!cir.array<!s8i x 16>>), !cir.ptr<!s8i> loc(#loc273)
    cir.call @printLine(%10) : (!cir.ptr<!s8i>) -> () loc(#loc289)
    %11 = cir.get_global @".str.6" : !cir.ptr<!cir.array<!s8i x 17>> loc(#loc274)
    %12 = cir.cast(array_to_ptrdecay, %11 : !cir.ptr<!cir.array<!s8i x 17>>), !cir.ptr<!s8i> loc(#loc274)
    cir.call @printLine(%12) : (!cir.ptr<!s8i>) -> () loc(#loc290)
    %13 = cir.get_global @CWE510_Trapdoor__ip_based_logic_12_bad : !cir.ptr<!cir.func<!void ()>> loc(#loc608)
    cir.call @CWE510_Trapdoor__ip_based_logic_12_bad() : () -> () loc(#loc291)
    %14 = cir.get_global @".str.7" : !cir.ptr<!cir.array<!s8i x 15>> loc(#loc275)
    %15 = cir.cast(array_to_ptrdecay, %14 : !cir.ptr<!cir.array<!s8i x 15>>), !cir.ptr<!s8i> loc(#loc275)
    cir.call @printLine(%15) : (!cir.ptr<!s8i>) -> () loc(#loc293)
    %16 = cir.const #cir.int<0> : !s32i loc(#loc294)
    cir.store %16, %2 : !s32i, !cir.ptr<!s32i> loc(#loc609)
    %17 = cir.load %2 : !cir.ptr<!s32i>, !s32i loc(#loc609)
    cir.return %17 : !s32i loc(#loc609)
  } loc(#loc604)
  cir.func no_proto internal private @good1() extra(#fn_attr1) {
    cir.scope {
      %0 = cir.get_global @globalReturnsTrueOrFalse : !cir.ptr<!cir.func<!s32i (...)>> loc(#loc612)
      %1 = cir.cast(bitcast, %0 : !cir.ptr<!cir.func<!s32i (...)>>), !cir.ptr<!cir.func<!s32i ()>> loc(#loc612)
      %2 = cir.call %1() : (!cir.ptr<!cir.func<!s32i ()>>) -> !s32i loc(#loc300)
      %3 = cir.cast(int_to_bool, %2 : !s32i), !cir.bool loc(#loc300)
      cir.if %3 {
        cir.scope {
          %4 = cir.alloca !ty_sockaddr_in, !cir.ptr<!ty_sockaddr_in>, ["service"] {alignment = 4 : i64} loc(#loc615)
          %5 = cir.alloca !s32i, !cir.ptr<!s32i>, ["listenSocket", init] {alignment = 4 : i64} loc(#loc616)
          %6 = cir.alloca !s32i, !cir.ptr<!s32i>, ["acceptSocket", init] {alignment = 4 : i64} loc(#loc617)
          %7 = cir.const #cir.int<1> : !s32i loc(#loc310)
          %8 = cir.unary(minus, %7) : !s32i, !s32i loc(#loc310)
          cir.store %8, %5 : !s32i, !cir.ptr<!s32i> loc(#loc616)
          %9 = cir.const #cir.int<1> : !s32i loc(#loc312)
          %10 = cir.unary(minus, %9) : !s32i, !s32i loc(#loc312)
          cir.store %10, %6 : !s32i, !cir.ptr<!s32i> loc(#loc617)
          cir.scope {
            cir.do {
              %11 = cir.const #cir.int<2> : !s32i loc(#loc315)
              %12 = cir.const #cir.int<1> : !s32i loc(#loc316)
              %13 = cir.const #cir.int<6> : !s32i loc(#loc317)
              %14 = cir.call @socket(%11, %12, %13) : (!s32i, !s32i, !s32i) -> !s32i extra(#fn_attr) loc(#loc318)
              cir.store %14, %5 : !s32i, !cir.ptr<!s32i> loc(#loc619)
              cir.scope {
                %33 = cir.load %5 : !cir.ptr<!s32i>, !s32i loc(#loc323)
                %34 = cir.const #cir.int<1> : !s32i loc(#loc324)
                %35 = cir.unary(minus, %34) : !s32i, !s32i loc(#loc324)
                %36 = cir.cmp(eq, %33, %35) : !s32i, !cir.bool loc(#loc621)
                cir.if %36 {
                  cir.break loc(#loc326)
                } loc(#loc622)
              } loc(#loc620)
              %15 = cir.cast(bitcast, %4 : !cir.ptr<!ty_sockaddr_in>), !cir.ptr<!void> loc(#loc623)
              %16 = cir.const #cir.int<0> : !s32i loc(#loc329)
              %17 = cir.const #cir.int<16> : !u64i loc(#loc624)
              cir.libc.memset %17 bytes from %15 set to %16 : !cir.ptr<!void>, !s32i, !u64i loc(#loc625)
              %18 = cir.const #cir.int<2> : !s32i loc(#loc334)
              %19 = cir.cast(integral, %18 : !s32i), !u16i loc(#loc334)
              %20 = cir.get_member %4[0] {name = "sin_family"} : !cir.ptr<!ty_sockaddr_in> -> !cir.ptr<!u16i> loc(#loc72)
              cir.store %19, %20 : !u16i, !cir.ptr<!u16i> loc(#loc626)
              %21 = cir.const #cir.int<0> : !s32i loc(#loc336)
              %22 = cir.cast(integral, %21 : !s32i), !u32i loc(#loc336)
              %23 = cir.get_member %4[2] {name = "sin_addr"} : !cir.ptr<!ty_sockaddr_in> -> !cir.ptr<!ty_in_addr> loc(#loc75)
              %24 = cir.get_member %23[0] {name = "s_addr"} : !cir.ptr<!ty_in_addr> -> !cir.ptr<!u32i> loc(#loc76)
              cir.store %22, %24 : !u32i, !cir.ptr<!u32i> loc(#loc627)
              %25 = cir.const #cir.int<20000> : !s32i loc(#loc338)
              %26 = cir.cast(integral, %25 : !s32i), !u16i loc(#loc338)
              %27 = cir.call @htons(%26) : (!u16i) -> !u16i extra(#fn_attr) loc(#loc339)
              %28 = cir.get_member %4[1] {name = "sin_port"} : !cir.ptr<!ty_sockaddr_in> -> !cir.ptr<!u16i> loc(#loc80)
              cir.store %27, %28 : !u16i, !cir.ptr<!u16i> loc(#loc628)
              cir.scope {
                %33 = cir.load %5 : !cir.ptr<!s32i>, !s32i loc(#loc344)
                %34 = cir.cast(bitcast, %4 : !cir.ptr<!ty_sockaddr_in>), !cir.ptr<!ty_sockaddr> loc(#loc630)
                %35 = cir.const #cir.int<16> : !u64i loc(#loc631)
                %36 = cir.cast(integral, %35 : !u64i), !u32i loc(#loc631)
                %37 = cir.call @bind(%33, %34, %36) : (!s32i, !cir.ptr<!ty_sockaddr>, !u32i) -> !s32i extra(#fn_attr) loc(#loc349)
                %38 = cir.const #cir.int<1> : !s32i loc(#loc350)
                %39 = cir.unary(minus, %38) : !s32i, !s32i loc(#loc350)
                %40 = cir.cmp(eq, %37, %39) : !s32i, !cir.bool loc(#loc632)
                cir.if %40 {
                  cir.break loc(#loc352)
                } loc(#loc633)
              } loc(#loc629)
              cir.scope {
                %33 = cir.load %5 : !cir.ptr<!s32i>, !s32i loc(#loc355)
                %34 = cir.const #cir.int<5> : !s32i loc(#loc356)
                %35 = cir.call @listen(%33, %34) : (!s32i, !s32i) -> !s32i extra(#fn_attr) loc(#loc357)
                %36 = cir.const #cir.int<1> : !s32i loc(#loc358)
                %37 = cir.unary(minus, %36) : !s32i, !s32i loc(#loc358)
                %38 = cir.cmp(eq, %35, %37) : !s32i, !cir.bool loc(#loc635)
                cir.if %38 {
                  cir.break loc(#loc360)
                } loc(#loc636)
              } loc(#loc634)
              %29 = cir.load %5 : !cir.ptr<!s32i>, !s32i loc(#loc361)
              %30 = cir.const #cir.ptr<null> : !cir.ptr<!ty_sockaddr> loc(#loc362)
              %31 = cir.const #cir.ptr<null> : !cir.ptr<!u32i> loc(#loc363)
              %32 = cir.call @accept(%29, %30, %31) : (!s32i, !cir.ptr<!ty_sockaddr>, !cir.ptr<!u32i>) -> !s32i loc(#loc364)
              cir.store %32, %6 : !s32i, !cir.ptr<!s32i> loc(#loc637)
              cir.scope {
                %33 = cir.load %6 : !cir.ptr<!s32i>, !s32i loc(#loc369)
                %34 = cir.const #cir.int<1> : !s32i loc(#loc370)
                %35 = cir.unary(minus, %34) : !s32i, !s32i loc(#loc370)
                %36 = cir.cmp(eq, %33, %35) : !s32i, !cir.bool loc(#loc639)
                cir.if %36 {
                  cir.break loc(#loc372)
                } loc(#loc640)
              } loc(#loc638)
              cir.scope {
                %33 = cir.load %6 : !cir.ptr<!s32i>, !s32i loc(#loc375)
                %34 = cir.get_global @".str.2" : !cir.ptr<!cir.array<!s8i x 9>> loc(#loc376)
                %35 = cir.cast(array_to_ptrdecay, %34 : !cir.ptr<!cir.array<!s8i x 9>>), !cir.ptr<!s8i> loc(#loc376)
                %36 = cir.cast(bitcast, %35 : !cir.ptr<!s8i>), !cir.ptr<!void> loc(#loc376)
                %37 = cir.const #cir.int<8> : !u64i loc(#loc642)
                %38 = cir.const #cir.int<0> : !s32i loc(#loc379)
                %39 = cir.call @send(%33, %36, %37, %38) : (!s32i, !cir.ptr<!void>, !u64i, !s32i) -> !s64i loc(#loc380)
                %40 = cir.const #cir.int<1> : !s32i loc(#loc381)
                %41 = cir.unary(minus, %40) : !s32i, !s32i loc(#loc381)
                %42 = cir.cast(integral, %41 : !s32i), !s64i loc(#loc381)
                %43 = cir.cmp(eq, %39, %42) : !s64i, !cir.bool loc(#loc643)
                cir.if %43 {
                  %44 = cir.get_global @".str.3" : !cir.ptr<!cir.array<!s8i x 13>> loc(#loc383)
                  %45 = cir.cast(array_to_ptrdecay, %44 : !cir.ptr<!cir.array<!s8i x 13>>), !cir.ptr<!s8i> loc(#loc383)
                  cir.call @printLine(%45) : (!cir.ptr<!s8i>) -> () loc(#loc384)
                } loc(#loc644)
              } loc(#loc641)
              cir.yield loc(#loc314)
            } while {
              %11 = cir.const #cir.int<0> : !s32i loc(#loc385)
              %12 = cir.cast(int_to_bool, %11 : !s32i), !cir.bool loc(#loc385)
              cir.condition(%12) loc(#loc385)
            } loc(#loc618)
          } loc(#loc618)
          cir.scope {
            %11 = cir.load %5 : !cir.ptr<!s32i>, !s32i loc(#loc388)
            %12 = cir.const #cir.int<1> : !s32i loc(#loc389)
            %13 = cir.unary(minus, %12) : !s32i, !s32i loc(#loc389)
            %14 = cir.cmp(ne, %11, %13) : !s32i, !cir.bool loc(#loc646)
            cir.if %14 {
              %15 = cir.load %5 : !cir.ptr<!s32i>, !s32i loc(#loc391)
              %16 = cir.call @close(%15) : (!s32i) -> !s32i loc(#loc392)
            } loc(#loc647)
          } loc(#loc645)
          cir.scope {
            %11 = cir.load %6 : !cir.ptr<!s32i>, !s32i loc(#loc395)
            %12 = cir.const #cir.int<1> : !s32i loc(#loc396)
            %13 = cir.unary(minus, %12) : !s32i, !s32i loc(#loc396)
            %14 = cir.cmp(ne, %11, %13) : !s32i, !cir.bool loc(#loc649)
            cir.if %14 {
              %15 = cir.load %6 : !cir.ptr<!s32i>, !s32i loc(#loc398)
              %16 = cir.call @close(%15) : (!s32i) -> !s32i loc(#loc399)
            } loc(#loc650)
          } loc(#loc648)
        } loc(#loc614)
      } else {
        cir.scope {
          %4 = cir.alloca !ty_sockaddr_in, !cir.ptr<!ty_sockaddr_in>, ["service"] {alignment = 4 : i64} loc(#loc652)
          %5 = cir.alloca !s32i, !cir.ptr<!s32i>, ["listenSocket", init] {alignment = 4 : i64} loc(#loc653)
          %6 = cir.alloca !s32i, !cir.ptr<!s32i>, ["acceptSocket", init] {alignment = 4 : i64} loc(#loc654)
          %7 = cir.const #cir.int<1> : !s32i loc(#loc405)
          %8 = cir.unary(minus, %7) : !s32i, !s32i loc(#loc405)
          cir.store %8, %5 : !s32i, !cir.ptr<!s32i> loc(#loc653)
          %9 = cir.const #cir.int<1> : !s32i loc(#loc407)
          %10 = cir.unary(minus, %9) : !s32i, !s32i loc(#loc407)
          cir.store %10, %6 : !s32i, !cir.ptr<!s32i> loc(#loc654)
          cir.scope {
            cir.do {
              %11 = cir.const #cir.int<2> : !s32i loc(#loc410)
              %12 = cir.const #cir.int<1> : !s32i loc(#loc411)
              %13 = cir.const #cir.int<6> : !s32i loc(#loc412)
              %14 = cir.call @socket(%11, %12, %13) : (!s32i, !s32i, !s32i) -> !s32i extra(#fn_attr) loc(#loc413)
              cir.store %14, %5 : !s32i, !cir.ptr<!s32i> loc(#loc656)
              cir.scope {
                %33 = cir.load %5 : !cir.ptr<!s32i>, !s32i loc(#loc418)
                %34 = cir.const #cir.int<1> : !s32i loc(#loc419)
                %35 = cir.unary(minus, %34) : !s32i, !s32i loc(#loc419)
                %36 = cir.cmp(eq, %33, %35) : !s32i, !cir.bool loc(#loc658)
                cir.if %36 {
                  cir.break loc(#loc421)
                } loc(#loc659)
              } loc(#loc657)
              %15 = cir.cast(bitcast, %4 : !cir.ptr<!ty_sockaddr_in>), !cir.ptr<!void> loc(#loc660)
              %16 = cir.const #cir.int<0> : !s32i loc(#loc424)
              %17 = cir.const #cir.int<16> : !u64i loc(#loc661)
              cir.libc.memset %17 bytes from %15 set to %16 : !cir.ptr<!void>, !s32i, !u64i loc(#loc662)
              %18 = cir.const #cir.int<2> : !s32i loc(#loc429)
              %19 = cir.cast(integral, %18 : !s32i), !u16i loc(#loc429)
              %20 = cir.get_member %4[0] {name = "sin_family"} : !cir.ptr<!ty_sockaddr_in> -> !cir.ptr<!u16i> loc(#loc72)
              cir.store %19, %20 : !u16i, !cir.ptr<!u16i> loc(#loc663)
              %21 = cir.const #cir.int<0> : !s32i loc(#loc431)
              %22 = cir.cast(integral, %21 : !s32i), !u32i loc(#loc431)
              %23 = cir.get_member %4[2] {name = "sin_addr"} : !cir.ptr<!ty_sockaddr_in> -> !cir.ptr<!ty_in_addr> loc(#loc75)
              %24 = cir.get_member %23[0] {name = "s_addr"} : !cir.ptr<!ty_in_addr> -> !cir.ptr<!u32i> loc(#loc76)
              cir.store %22, %24 : !u32i, !cir.ptr<!u32i> loc(#loc664)
              %25 = cir.const #cir.int<20000> : !s32i loc(#loc433)
              %26 = cir.cast(integral, %25 : !s32i), !u16i loc(#loc433)
              %27 = cir.call @htons(%26) : (!u16i) -> !u16i extra(#fn_attr) loc(#loc434)
              %28 = cir.get_member %4[1] {name = "sin_port"} : !cir.ptr<!ty_sockaddr_in> -> !cir.ptr<!u16i> loc(#loc80)
              cir.store %27, %28 : !u16i, !cir.ptr<!u16i> loc(#loc665)
              cir.scope {
                %33 = cir.load %5 : !cir.ptr<!s32i>, !s32i loc(#loc439)
                %34 = cir.cast(bitcast, %4 : !cir.ptr<!ty_sockaddr_in>), !cir.ptr<!ty_sockaddr> loc(#loc667)
                %35 = cir.const #cir.int<16> : !u64i loc(#loc668)
                %36 = cir.cast(integral, %35 : !u64i), !u32i loc(#loc668)
                %37 = cir.call @bind(%33, %34, %36) : (!s32i, !cir.ptr<!ty_sockaddr>, !u32i) -> !s32i extra(#fn_attr) loc(#loc444)
                %38 = cir.const #cir.int<1> : !s32i loc(#loc445)
                %39 = cir.unary(minus, %38) : !s32i, !s32i loc(#loc445)
                %40 = cir.cmp(eq, %37, %39) : !s32i, !cir.bool loc(#loc669)
                cir.if %40 {
                  cir.break loc(#loc447)
                } loc(#loc670)
              } loc(#loc666)
              cir.scope {
                %33 = cir.load %5 : !cir.ptr<!s32i>, !s32i loc(#loc450)
                %34 = cir.const #cir.int<5> : !s32i loc(#loc451)
                %35 = cir.call @listen(%33, %34) : (!s32i, !s32i) -> !s32i extra(#fn_attr) loc(#loc452)
                %36 = cir.const #cir.int<1> : !s32i loc(#loc453)
                %37 = cir.unary(minus, %36) : !s32i, !s32i loc(#loc453)
                %38 = cir.cmp(eq, %35, %37) : !s32i, !cir.bool loc(#loc672)
                cir.if %38 {
                  cir.break loc(#loc455)
                } loc(#loc673)
              } loc(#loc671)
              %29 = cir.load %5 : !cir.ptr<!s32i>, !s32i loc(#loc456)
              %30 = cir.const #cir.ptr<null> : !cir.ptr<!ty_sockaddr> loc(#loc457)
              %31 = cir.const #cir.ptr<null> : !cir.ptr<!u32i> loc(#loc458)
              %32 = cir.call @accept(%29, %30, %31) : (!s32i, !cir.ptr<!ty_sockaddr>, !cir.ptr<!u32i>) -> !s32i loc(#loc459)
              cir.store %32, %6 : !s32i, !cir.ptr<!s32i> loc(#loc674)
              cir.scope {
                %33 = cir.load %6 : !cir.ptr<!s32i>, !s32i loc(#loc464)
                %34 = cir.const #cir.int<1> : !s32i loc(#loc465)
                %35 = cir.unary(minus, %34) : !s32i, !s32i loc(#loc465)
                %36 = cir.cmp(eq, %33, %35) : !s32i, !cir.bool loc(#loc676)
                cir.if %36 {
                  cir.break loc(#loc467)
                } loc(#loc677)
              } loc(#loc675)
              cir.scope {
                %33 = cir.load %6 : !cir.ptr<!s32i>, !s32i loc(#loc470)
                %34 = cir.get_global @".str.2" : !cir.ptr<!cir.array<!s8i x 9>> loc(#loc471)
                %35 = cir.cast(array_to_ptrdecay, %34 : !cir.ptr<!cir.array<!s8i x 9>>), !cir.ptr<!s8i> loc(#loc471)
                %36 = cir.cast(bitcast, %35 : !cir.ptr<!s8i>), !cir.ptr<!void> loc(#loc471)
                %37 = cir.const #cir.int<8> : !u64i loc(#loc679)
                %38 = cir.const #cir.int<0> : !s32i loc(#loc474)
                %39 = cir.call @send(%33, %36, %37, %38) : (!s32i, !cir.ptr<!void>, !u64i, !s32i) -> !s64i loc(#loc475)
                %40 = cir.const #cir.int<1> : !s32i loc(#loc476)
                %41 = cir.unary(minus, %40) : !s32i, !s32i loc(#loc476)
                %42 = cir.cast(integral, %41 : !s32i), !s64i loc(#loc476)
                %43 = cir.cmp(eq, %39, %42) : !s64i, !cir.bool loc(#loc680)
                cir.if %43 {
                  %44 = cir.get_global @".str.3" : !cir.ptr<!cir.array<!s8i x 13>> loc(#loc478)
                  %45 = cir.cast(array_to_ptrdecay, %44 : !cir.ptr<!cir.array<!s8i x 13>>), !cir.ptr<!s8i> loc(#loc478)
                  cir.call @printLine(%45) : (!cir.ptr<!s8i>) -> () loc(#loc479)
                } loc(#loc681)
              } loc(#loc678)
              cir.yield loc(#loc409)
            } while {
              %11 = cir.const #cir.int<0> : !s32i loc(#loc480)
              %12 = cir.cast(int_to_bool, %11 : !s32i), !cir.bool loc(#loc480)
              cir.condition(%12) loc(#loc480)
            } loc(#loc655)
          } loc(#loc655)
          cir.scope {
            %11 = cir.load %5 : !cir.ptr<!s32i>, !s32i loc(#loc483)
            %12 = cir.const #cir.int<1> : !s32i loc(#loc484)
            %13 = cir.unary(minus, %12) : !s32i, !s32i loc(#loc484)
            %14 = cir.cmp(ne, %11, %13) : !s32i, !cir.bool loc(#loc683)
            cir.if %14 {
              %15 = cir.load %5 : !cir.ptr<!s32i>, !s32i loc(#loc486)
              %16 = cir.call @close(%15) : (!s32i) -> !s32i loc(#loc487)
            } loc(#loc684)
          } loc(#loc682)
          cir.scope {
            %11 = cir.load %6 : !cir.ptr<!s32i>, !s32i loc(#loc490)
            %12 = cir.const #cir.int<1> : !s32i loc(#loc491)
            %13 = cir.unary(minus, %12) : !s32i, !s32i loc(#loc491)
            %14 = cir.cmp(ne, %11, %13) : !s32i, !cir.bool loc(#loc686)
            cir.if %14 {
              %15 = cir.load %6 : !cir.ptr<!s32i>, !s32i loc(#loc493)
              %16 = cir.call @close(%15) : (!s32i) -> !s32i loc(#loc494)
            } loc(#loc687)
          } loc(#loc685)
        } loc(#loc651)
      } loc(#loc613)
    } loc(#loc611)
    cir.return loc(#loc297)
  } loc(#loc610)
} loc(#loc)
#loc = loc("/home/ladisgin/git_proj/juliet-c/testcases/CWE510_Trapdoor/CWE510_Trapdoor__ip_based_logic_12.c":0:0)
#loc1 = loc("../../testcasesupport/std_testcase_io.h":52:1)
#loc2 = loc("../../testcasesupport/std_testcase_io.h":52:30)
#loc3 = loc("/usr/include/sys/socket.h":102:1)
#loc4 = loc("/usr/include/sys/socket.h":102:62)
#loc5 = loc("/usr/include/netinet/in.h":404:1)
#loc6 = loc("/usr/include/netinet/in.h":405:40)
#loc7 = loc("/usr/include/sys/socket.h":112:1)
#loc8 = loc("/usr/include/sys/socket.h":113:6)
#loc9 = loc("/usr/include/sys/socket.h":296:1)
#loc10 = loc("/usr/include/sys/socket.h":296:39)
#loc11 = loc("/usr/include/sys/socket.h":306:1)
#loc12 = loc("/usr/include/sys/socket.h":307:38)
#loc13 = loc("/usr/include/sys/socket.h":116:1)
#loc14 = loc("/usr/include/sys/socket.h":117:33)
#loc15 = loc("/usr/include/string.h":156:1)
#loc16 = loc("/usr/include/string.h":157:33)
#loc17 = loc("CWE510_Trapdoor__ip_based_logic_12.c":90:28)
#loc18 = loc("/usr/include/arpa/inet.h":53:1)
#loc19 = loc("/usr/include/arpa/inet.h":53:46)
#loc20 = loc("/usr/include/sys/socket.h":138:1)
#loc21 = loc("/usr/include/sys/socket.h":138:74)
#loc22 = loc("CWE510_Trapdoor__ip_based_logic_12.c":92:44)
#loc23 = loc("CWE510_Trapdoor__ip_based_logic_12.c":100:44)
#loc24 = loc("../../testcasesupport/std_testcase_io.h":14:1)
#loc25 = loc("../../testcasesupport/std_testcase_io.h":14:33)
#loc26 = loc("CWE510_Trapdoor__ip_based_logic_12.c":102:35)
#loc27 = loc("/usr/include/unistd.h":358:1)
#loc28 = loc("/usr/include/unistd.h":358:27)
#loc29 = loc("CWE510_Trapdoor__ip_based_logic_12.c":41:1)
#loc30 = loc("CWE510_Trapdoor__ip_based_logic_12.c":187:1)
#loc31 = loc("CWE510_Trapdoor__ip_based_logic_12.c":43:5)
#loc32 = loc("CWE510_Trapdoor__ip_based_logic_12.c":186:5)
#loc33 = loc("CWE510_Trapdoor__ip_based_logic_12.c":43:8)
#loc34 = loc("CWE510_Trapdoor__ip_based_logic_12.c":43:33)
#loc35 = loc("CWE510_Trapdoor__ip_based_logic_12.c":44:5)
#loc36 = loc("CWE510_Trapdoor__ip_based_logic_12.c":122:5)
#loc37 = loc("CWE510_Trapdoor__ip_based_logic_12.c":124:5)
#loc38 = loc("CWE510_Trapdoor__ip_based_logic_12.c":45:9)
#loc39 = loc("CWE510_Trapdoor__ip_based_logic_12.c":121:9)
#loc40 = loc("CWE510_Trapdoor__ip_based_logic_12.c":50:13)
#loc41 = loc("CWE510_Trapdoor__ip_based_logic_12.c":50:32)
#loc42 = loc("CWE510_Trapdoor__ip_based_logic_12.c":50:41)
#loc43 = loc("CWE510_Trapdoor__ip_based_logic_12.c":51:13)
#loc44 = loc("CWE510_Trapdoor__ip_based_logic_12.c":51:56)
#loc45 = loc("CWE510_Trapdoor__ip_based_logic_12.c":52:13)
#loc46 = loc("CWE510_Trapdoor__ip_based_logic_12.c":52:35)
#loc47 = loc("CWE510_Trapdoor__ip_based_logic_12.c":53:13)
#loc48 = loc("CWE510_Trapdoor__ip_based_logic_12.c":53:35)
#loc49 = loc("CWE510_Trapdoor__ip_based_logic_12.c":51:36)
#loc50 = loc("CWE510_Trapdoor__ip_based_logic_12.c":54:13)
#loc51 = loc("CWE510_Trapdoor__ip_based_logic_12.c":106:21)
#loc52 = loc("CWE510_Trapdoor__ip_based_logic_12.c":63:39)
#loc53 = loc("CWE510_Trapdoor__ip_based_logic_12.c":63:48)
#loc54 = loc("CWE510_Trapdoor__ip_based_logic_12.c":63:61)
#loc55 = loc("CWE510_Trapdoor__ip_based_logic_12.c":63:32)
#loc56 = loc("CWE510_Trapdoor__ip_based_logic_12.c":63:17)
#loc57 = loc("CWE510_Trapdoor__ip_based_logic_12.c":63:72)
#loc58 = loc("CWE510_Trapdoor__ip_based_logic_12.c":64:17)
#loc59 = loc("CWE510_Trapdoor__ip_based_logic_12.c":67:17)
#loc60 = loc("CWE510_Trapdoor__ip_based_logic_12.c":64:21)
#loc61 = loc("CWE510_Trapdoor__ip_based_logic_12.c":64:37)
#loc62 = loc("CWE510_Trapdoor__ip_based_logic_12.c":65:17)
#loc63 = loc("CWE510_Trapdoor__ip_based_logic_12.c":66:21)
#loc64 = loc("CWE510_Trapdoor__ip_based_logic_12.c":68:24)
#loc65 = loc("CWE510_Trapdoor__ip_based_logic_12.c":68:25)
#loc66 = loc("CWE510_Trapdoor__ip_based_logic_12.c":68:34)
#loc67 = loc("CWE510_Trapdoor__ip_based_logic_12.c":68:37)
#loc68 = loc("CWE510_Trapdoor__ip_based_logic_12.c":68:51)
#loc69 = loc("CWE510_Trapdoor__ip_based_logic_12.c":68:17)
#loc70 = loc("CWE510_Trapdoor__ip_based_logic_12.c":68:52)
#loc71 = loc("CWE510_Trapdoor__ip_based_logic_12.c":69:38)
#loc72 = loc("/usr/include/netinet/in.h":249:5)
#loc73 = loc("CWE510_Trapdoor__ip_based_logic_12.c":69:17)
#loc74 = loc("CWE510_Trapdoor__ip_based_logic_12.c":70:43)
#loc75 = loc("/usr/include/netinet/in.h":251:20)
#loc76 = loc("/usr/include/netinet/in.h":33:15)
#loc77 = loc("CWE510_Trapdoor__ip_based_logic_12.c":70:17)
#loc78 = loc("CWE510_Trapdoor__ip_based_logic_12.c":71:42)
#loc79 = loc("CWE510_Trapdoor__ip_based_logic_12.c":71:36)
#loc80 = loc("/usr/include/netinet/in.h":250:15)
#loc81 = loc("CWE510_Trapdoor__ip_based_logic_12.c":71:17)
#loc82 = loc("CWE510_Trapdoor__ip_based_logic_12.c":71:47)
#loc83 = loc("CWE510_Trapdoor__ip_based_logic_12.c":72:17)
#loc84 = loc("CWE510_Trapdoor__ip_based_logic_12.c":75:17)
#loc85 = loc("CWE510_Trapdoor__ip_based_logic_12.c":72:26)
#loc86 = loc("CWE510_Trapdoor__ip_based_logic_12.c":72:58)
#loc87 = loc("CWE510_Trapdoor__ip_based_logic_12.c":72:59)
#loc88 = loc("CWE510_Trapdoor__ip_based_logic_12.c":72:68)
#loc89 = loc("CWE510_Trapdoor__ip_based_logic_12.c":72:82)
#loc90 = loc("CWE510_Trapdoor__ip_based_logic_12.c":72:21)
#loc91 = loc("CWE510_Trapdoor__ip_based_logic_12.c":72:88)
#loc92 = loc("CWE510_Trapdoor__ip_based_logic_12.c":73:17)
#loc93 = loc("CWE510_Trapdoor__ip_based_logic_12.c":74:21)
#loc94 = loc("CWE510_Trapdoor__ip_based_logic_12.c":76:17)
#loc95 = loc("CWE510_Trapdoor__ip_based_logic_12.c":79:17)
#loc96 = loc("CWE510_Trapdoor__ip_based_logic_12.c":76:28)
#loc97 = loc("CWE510_Trapdoor__ip_based_logic_12.c":76:42)
#loc98 = loc("CWE510_Trapdoor__ip_based_logic_12.c":76:21)
#loc99 = loc("CWE510_Trapdoor__ip_based_logic_12.c":76:48)
#loc100 = loc("CWE510_Trapdoor__ip_based_logic_12.c":77:17)
#loc101 = loc("CWE510_Trapdoor__ip_based_logic_12.c":78:21)
#loc102 = loc("CWE510_Trapdoor__ip_based_logic_12.c":80:39)
#loc103 = loc("CWE510_Trapdoor__ip_based_logic_12.c":80:53)
#loc104 = loc("CWE510_Trapdoor__ip_based_logic_12.c":80:59)
#loc105 = loc("CWE510_Trapdoor__ip_based_logic_12.c":80:32)
#loc106 = loc("CWE510_Trapdoor__ip_based_logic_12.c":80:17)
#loc107 = loc("CWE510_Trapdoor__ip_based_logic_12.c":80:63)
#loc108 = loc("CWE510_Trapdoor__ip_based_logic_12.c":81:17)
#loc109 = loc("CWE510_Trapdoor__ip_based_logic_12.c":84:17)
#loc110 = loc("CWE510_Trapdoor__ip_based_logic_12.c":81:21)
#loc111 = loc("CWE510_Trapdoor__ip_based_logic_12.c":81:37)
#loc112 = loc("CWE510_Trapdoor__ip_based_logic_12.c":82:17)
#loc113 = loc("CWE510_Trapdoor__ip_based_logic_12.c":83:21)
#loc114 = loc("CWE510_Trapdoor__ip_based_logic_12.c":85:17)
#loc115 = loc("CWE510_Trapdoor__ip_based_logic_12.c":88:17)
#loc116 = loc("CWE510_Trapdoor__ip_based_logic_12.c":85:33)
#loc117 = loc("CWE510_Trapdoor__ip_based_logic_12.c":85:66)
#loc118 = loc("CWE510_Trapdoor__ip_based_logic_12.c":85:67)
#loc119 = loc("CWE510_Trapdoor__ip_based_logic_12.c":85:82)
#loc120 = loc("CWE510_Trapdoor__ip_based_logic_12.c":85:83)
#loc121 = loc("CWE510_Trapdoor__ip_based_logic_12.c":85:21)
#loc122 = loc("CWE510_Trapdoor__ip_based_logic_12.c":85:105)
#loc123 = loc("CWE510_Trapdoor__ip_based_logic_12.c":85:104)
#loc124 = loc("CWE510_Trapdoor__ip_based_logic_12.c":86:17)
#loc125 = loc("CWE510_Trapdoor__ip_based_logic_12.c":87:21)
#loc126 = loc("CWE510_Trapdoor__ip_based_logic_12.c":90:17)
#loc127 = loc("CWE510_Trapdoor__ip_based_logic_12.c":104:17)
#loc128 = loc("CWE510_Trapdoor__ip_based_logic_12.c":90:21)
#loc129 = loc("CWE510_Trapdoor__ip_based_logic_12.c":90:46)
#loc130 = loc("CWE510_Trapdoor__ip_based_logic_12.c":90:84)
#loc131 = loc("CWE510_Trapdoor__ip_based_logic_12.c":91:17)
#loc132 = loc("CWE510_Trapdoor__ip_based_logic_12.c":97:17)
#loc133 = loc("CWE510_Trapdoor__ip_based_logic_12.c":99:17)
#loc134 = loc("CWE510_Trapdoor__ip_based_logic_12.c":92:21)
#loc135 = loc("CWE510_Trapdoor__ip_based_logic_12.c":96:21)
#loc136 = loc("CWE510_Trapdoor__ip_based_logic_12.c":92:30)
#loc137 = loc("CWE510_Trapdoor__ip_based_logic_12.c":92:59)
#loc138 = loc("CWE510_Trapdoor__ip_based_logic_12.c":92:79)
#loc139 = loc("CWE510_Trapdoor__ip_based_logic_12.c":92:82)
#loc140 = loc("CWE510_Trapdoor__ip_based_logic_12.c":92:25)
#loc141 = loc("CWE510_Trapdoor__ip_based_logic_12.c":92:89)
#loc142 = loc("CWE510_Trapdoor__ip_based_logic_12.c":93:21)
#loc143 = loc("CWE510_Trapdoor__ip_based_logic_12.c":95:25)
#loc144 = loc("CWE510_Trapdoor__ip_based_logic_12.c":100:21)
#loc145 = loc("CWE510_Trapdoor__ip_based_logic_12.c":103:21)
#loc146 = loc("CWE510_Trapdoor__ip_based_logic_12.c":100:30)
#loc147 = loc("CWE510_Trapdoor__ip_based_logic_12.c":100:61)
#loc148 = loc("CWE510_Trapdoor__ip_based_logic_12.c":100:83)
#loc149 = loc("CWE510_Trapdoor__ip_based_logic_12.c":100:86)
#loc150 = loc("CWE510_Trapdoor__ip_based_logic_12.c":100:25)
#loc151 = loc("CWE510_Trapdoor__ip_based_logic_12.c":100:92)
#loc152 = loc("CWE510_Trapdoor__ip_based_logic_12.c":101:21)
#loc153 = loc("CWE510_Trapdoor__ip_based_logic_12.c":102:25)
#loc154 = loc("CWE510_Trapdoor__ip_based_logic_12.c":106:20)
#loc155 = loc("CWE510_Trapdoor__ip_based_logic_12.c":107:13)
#loc156 = loc("CWE510_Trapdoor__ip_based_logic_12.c":110:13)
#loc157 = loc("CWE510_Trapdoor__ip_based_logic_12.c":107:17)
#loc158 = loc("CWE510_Trapdoor__ip_based_logic_12.c":107:33)
#loc159 = loc("CWE510_Trapdoor__ip_based_logic_12.c":108:13)
#loc160 = loc("CWE510_Trapdoor__ip_based_logic_12.c":109:30)
#loc161 = loc("CWE510_Trapdoor__ip_based_logic_12.c":109:17)
#loc162 = loc("CWE510_Trapdoor__ip_based_logic_12.c":111:13)
#loc163 = loc("CWE510_Trapdoor__ip_based_logic_12.c":114:13)
#loc164 = loc("CWE510_Trapdoor__ip_based_logic_12.c":111:17)
#loc165 = loc("CWE510_Trapdoor__ip_based_logic_12.c":111:33)
#loc166 = loc("CWE510_Trapdoor__ip_based_logic_12.c":112:13)
#loc167 = loc("CWE510_Trapdoor__ip_based_logic_12.c":113:30)
#loc168 = loc("CWE510_Trapdoor__ip_based_logic_12.c":113:17)
#loc169 = loc("CWE510_Trapdoor__ip_based_logic_12.c":125:9)
#loc170 = loc("CWE510_Trapdoor__ip_based_logic_12.c":185:9)
#loc171 = loc("CWE510_Trapdoor__ip_based_logic_12.c":130:13)
#loc172 = loc("CWE510_Trapdoor__ip_based_logic_12.c":130:32)
#loc173 = loc("CWE510_Trapdoor__ip_based_logic_12.c":131:13)
#loc174 = loc("CWE510_Trapdoor__ip_based_logic_12.c":131:35)
#loc175 = loc("CWE510_Trapdoor__ip_based_logic_12.c":132:13)
#loc176 = loc("CWE510_Trapdoor__ip_based_logic_12.c":132:35)
#loc177 = loc("CWE510_Trapdoor__ip_based_logic_12.c":133:13)
#loc178 = loc("CWE510_Trapdoor__ip_based_logic_12.c":170:21)
#loc179 = loc("CWE510_Trapdoor__ip_based_logic_12.c":142:39)
#loc180 = loc("CWE510_Trapdoor__ip_based_logic_12.c":142:48)
#loc181 = loc("CWE510_Trapdoor__ip_based_logic_12.c":142:61)
#loc182 = loc("CWE510_Trapdoor__ip_based_logic_12.c":142:32)
#loc183 = loc("CWE510_Trapdoor__ip_based_logic_12.c":142:17)
#loc184 = loc("CWE510_Trapdoor__ip_based_logic_12.c":142:72)
#loc185 = loc("CWE510_Trapdoor__ip_based_logic_12.c":143:17)
#loc186 = loc("CWE510_Trapdoor__ip_based_logic_12.c":146:17)
#loc187 = loc("CWE510_Trapdoor__ip_based_logic_12.c":143:21)
#loc188 = loc("CWE510_Trapdoor__ip_based_logic_12.c":143:37)
#loc189 = loc("CWE510_Trapdoor__ip_based_logic_12.c":144:17)
#loc190 = loc("CWE510_Trapdoor__ip_based_logic_12.c":145:21)
#loc191 = loc("CWE510_Trapdoor__ip_based_logic_12.c":147:24)
#loc192 = loc("CWE510_Trapdoor__ip_based_logic_12.c":147:25)
#loc193 = loc("CWE510_Trapdoor__ip_based_logic_12.c":147:34)
#loc194 = loc("CWE510_Trapdoor__ip_based_logic_12.c":147:37)
#loc195 = loc("CWE510_Trapdoor__ip_based_logic_12.c":147:51)
#loc196 = loc("CWE510_Trapdoor__ip_based_logic_12.c":147:17)
#loc197 = loc("CWE510_Trapdoor__ip_based_logic_12.c":147:52)
#loc198 = loc("CWE510_Trapdoor__ip_based_logic_12.c":148:38)
#loc199 = loc("CWE510_Trapdoor__ip_based_logic_12.c":148:17)
#loc200 = loc("CWE510_Trapdoor__ip_based_logic_12.c":149:43)
#loc201 = loc("CWE510_Trapdoor__ip_based_logic_12.c":149:17)
#loc202 = loc("CWE510_Trapdoor__ip_based_logic_12.c":150:42)
#loc203 = loc("CWE510_Trapdoor__ip_based_logic_12.c":150:36)
#loc204 = loc("CWE510_Trapdoor__ip_based_logic_12.c":150:17)
#loc205 = loc("CWE510_Trapdoor__ip_based_logic_12.c":150:47)
#loc206 = loc("CWE510_Trapdoor__ip_based_logic_12.c":151:17)
#loc207 = loc("CWE510_Trapdoor__ip_based_logic_12.c":154:17)
#loc208 = loc("CWE510_Trapdoor__ip_based_logic_12.c":151:26)
#loc209 = loc("CWE510_Trapdoor__ip_based_logic_12.c":151:58)
#loc210 = loc("CWE510_Trapdoor__ip_based_logic_12.c":151:59)
#loc211 = loc("CWE510_Trapdoor__ip_based_logic_12.c":151:68)
#loc212 = loc("CWE510_Trapdoor__ip_based_logic_12.c":151:82)
#loc213 = loc("CWE510_Trapdoor__ip_based_logic_12.c":151:21)
#loc214 = loc("CWE510_Trapdoor__ip_based_logic_12.c":151:88)
#loc215 = loc("CWE510_Trapdoor__ip_based_logic_12.c":152:17)
#loc216 = loc("CWE510_Trapdoor__ip_based_logic_12.c":153:21)
#loc217 = loc("CWE510_Trapdoor__ip_based_logic_12.c":155:17)
#loc218 = loc("CWE510_Trapdoor__ip_based_logic_12.c":158:17)
#loc219 = loc("CWE510_Trapdoor__ip_based_logic_12.c":155:28)
#loc220 = loc("CWE510_Trapdoor__ip_based_logic_12.c":155:42)
#loc221 = loc("CWE510_Trapdoor__ip_based_logic_12.c":155:21)
#loc222 = loc("CWE510_Trapdoor__ip_based_logic_12.c":155:48)
#loc223 = loc("CWE510_Trapdoor__ip_based_logic_12.c":156:17)
#loc224 = loc("CWE510_Trapdoor__ip_based_logic_12.c":157:21)
#loc225 = loc("CWE510_Trapdoor__ip_based_logic_12.c":159:39)
#loc226 = loc("CWE510_Trapdoor__ip_based_logic_12.c":159:53)
#loc227 = loc("CWE510_Trapdoor__ip_based_logic_12.c":159:59)
#loc228 = loc("CWE510_Trapdoor__ip_based_logic_12.c":159:32)
#loc229 = loc("CWE510_Trapdoor__ip_based_logic_12.c":159:17)
#loc230 = loc("CWE510_Trapdoor__ip_based_logic_12.c":159:63)
#loc231 = loc("CWE510_Trapdoor__ip_based_logic_12.c":160:17)
#loc232 = loc("CWE510_Trapdoor__ip_based_logic_12.c":163:17)
#loc233 = loc("CWE510_Trapdoor__ip_based_logic_12.c":160:21)
#loc234 = loc("CWE510_Trapdoor__ip_based_logic_12.c":160:37)
#loc235 = loc("CWE510_Trapdoor__ip_based_logic_12.c":161:17)
#loc236 = loc("CWE510_Trapdoor__ip_based_logic_12.c":162:21)
#loc237 = loc("CWE510_Trapdoor__ip_based_logic_12.c":165:17)
#loc238 = loc("CWE510_Trapdoor__ip_based_logic_12.c":168:17)
#loc239 = loc("CWE510_Trapdoor__ip_based_logic_12.c":165:26)
#loc240 = loc("CWE510_Trapdoor__ip_based_logic_12.c":165:40)
#loc241 = loc("CWE510_Trapdoor__ip_based_logic_12.c":165:57)
#loc242 = loc("CWE510_Trapdoor__ip_based_logic_12.c":165:79)
#loc243 = loc("CWE510_Trapdoor__ip_based_logic_12.c":165:82)
#loc244 = loc("CWE510_Trapdoor__ip_based_logic_12.c":165:21)
#loc245 = loc("CWE510_Trapdoor__ip_based_logic_12.c":165:88)
#loc246 = loc("CWE510_Trapdoor__ip_based_logic_12.c":166:17)
#loc247 = loc("CWE510_Trapdoor__ip_based_logic_12.c":167:31)
#loc248 = loc("CWE510_Trapdoor__ip_based_logic_12.c":167:21)
#loc249 = loc("CWE510_Trapdoor__ip_based_logic_12.c":170:20)
#loc250 = loc("CWE510_Trapdoor__ip_based_logic_12.c":171:13)
#loc251 = loc("CWE510_Trapdoor__ip_based_logic_12.c":174:13)
#loc252 = loc("CWE510_Trapdoor__ip_based_logic_12.c":171:17)
#loc253 = loc("CWE510_Trapdoor__ip_based_logic_12.c":171:33)
#loc254 = loc("CWE510_Trapdoor__ip_based_logic_12.c":172:13)
#loc255 = loc("CWE510_Trapdoor__ip_based_logic_12.c":173:30)
#loc256 = loc("CWE510_Trapdoor__ip_based_logic_12.c":173:17)
#loc257 = loc("CWE510_Trapdoor__ip_based_logic_12.c":175:13)
#loc258 = loc("CWE510_Trapdoor__ip_based_logic_12.c":178:13)
#loc259 = loc("CWE510_Trapdoor__ip_based_logic_12.c":175:17)
#loc260 = loc("CWE510_Trapdoor__ip_based_logic_12.c":175:33)
#loc261 = loc("CWE510_Trapdoor__ip_based_logic_12.c":176:13)
#loc262 = loc("CWE510_Trapdoor__ip_based_logic_12.c":177:30)
#loc263 = loc("CWE510_Trapdoor__ip_based_logic_12.c":177:17)
#loc264 = loc("CWE510_Trapdoor__ip_based_logic_12.c":326:1)
#loc265 = loc("CWE510_Trapdoor__ip_based_logic_12.c":329:1)
#loc266 = loc("CWE510_Trapdoor__ip_based_logic_12.c":328:5)
#loc267 = loc("CWE510_Trapdoor__ip_based_logic_12.c":328:11)
#loc268 = loc("/usr/include/stdlib.h":575:1)
#loc269 = loc("/usr/include/stdlib.h":575:41)
#loc270 = loc("/usr/include/time.h":76:1)
#loc271 = loc("/usr/include/time.h":76:38)
#loc272 = loc("CWE510_Trapdoor__ip_based_logic_12.c":345:15)
#loc273 = loc("CWE510_Trapdoor__ip_based_logic_12.c":347:15)
#loc274 = loc("CWE510_Trapdoor__ip_based_logic_12.c":350:15)
#loc275 = loc("CWE510_Trapdoor__ip_based_logic_12.c":352:15)
#loc276 = loc("CWE510_Trapdoor__ip_based_logic_12.c":340:1)
#loc277 = loc("CWE510_Trapdoor__ip_based_logic_12.c":355:1)
#loc282 = loc("CWE510_Trapdoor__ip_based_logic_12.c":341:1)
#loc283 = loc("CWE510_Trapdoor__ip_based_logic_12.c":343:27)
#loc284 = loc("CWE510_Trapdoor__ip_based_logic_12.c":343:22)
#loc285 = loc("CWE510_Trapdoor__ip_based_logic_12.c":343:5)
#loc286 = loc("CWE510_Trapdoor__ip_based_logic_12.c":345:5)
#loc287 = loc("CWE510_Trapdoor__ip_based_logic_12.c":346:5)
#loc288 = loc("CWE510_Trapdoor__ip_based_logic_12.c":346:45)
#loc289 = loc("CWE510_Trapdoor__ip_based_logic_12.c":347:5)
#loc290 = loc("CWE510_Trapdoor__ip_based_logic_12.c":350:5)
#loc291 = loc("CWE510_Trapdoor__ip_based_logic_12.c":351:5)
#loc292 = loc("CWE510_Trapdoor__ip_based_logic_12.c":351:44)
#loc293 = loc("CWE510_Trapdoor__ip_based_logic_12.c":352:5)
#loc294 = loc("CWE510_Trapdoor__ip_based_logic_12.c":354:12)
#loc295 = loc("CWE510_Trapdoor__ip_based_logic_12.c":354:5)
#loc296 = loc("CWE510_Trapdoor__ip_based_logic_12.c":194:1)
#loc297 = loc("CWE510_Trapdoor__ip_based_logic_12.c":324:1)
#loc298 = loc("CWE510_Trapdoor__ip_based_logic_12.c":196:5)
#loc299 = loc("CWE510_Trapdoor__ip_based_logic_12.c":323:5)
#loc300 = loc("CWE510_Trapdoor__ip_based_logic_12.c":196:8)
#loc301 = loc("CWE510_Trapdoor__ip_based_logic_12.c":196:33)
#loc302 = loc("CWE510_Trapdoor__ip_based_logic_12.c":197:5)
#loc303 = loc("CWE510_Trapdoor__ip_based_logic_12.c":259:5)
#loc304 = loc("CWE510_Trapdoor__ip_based_logic_12.c":261:5)
#loc305 = loc("CWE510_Trapdoor__ip_based_logic_12.c":198:9)
#loc306 = loc("CWE510_Trapdoor__ip_based_logic_12.c":258:9)
#loc307 = loc("CWE510_Trapdoor__ip_based_logic_12.c":203:13)
#loc308 = loc("CWE510_Trapdoor__ip_based_logic_12.c":203:32)
#loc309 = loc("CWE510_Trapdoor__ip_based_logic_12.c":204:13)
#loc310 = loc("CWE510_Trapdoor__ip_based_logic_12.c":204:35)
#loc311 = loc("CWE510_Trapdoor__ip_based_logic_12.c":205:13)
#loc312 = loc("CWE510_Trapdoor__ip_based_logic_12.c":205:35)
#loc313 = loc("CWE510_Trapdoor__ip_based_logic_12.c":206:13)
#loc314 = loc("CWE510_Trapdoor__ip_based_logic_12.c":243:21)
#loc315 = loc("CWE510_Trapdoor__ip_based_logic_12.c":215:39)
#loc316 = loc("CWE510_Trapdoor__ip_based_logic_12.c":215:48)
#loc317 = loc("CWE510_Trapdoor__ip_based_logic_12.c":215:61)
#loc318 = loc("CWE510_Trapdoor__ip_based_logic_12.c":215:32)
#loc319 = loc("CWE510_Trapdoor__ip_based_logic_12.c":215:17)
#loc320 = loc("CWE510_Trapdoor__ip_based_logic_12.c":215:72)
#loc321 = loc("CWE510_Trapdoor__ip_based_logic_12.c":216:17)
#loc322 = loc("CWE510_Trapdoor__ip_based_logic_12.c":219:17)
#loc323 = loc("CWE510_Trapdoor__ip_based_logic_12.c":216:21)
#loc324 = loc("CWE510_Trapdoor__ip_based_logic_12.c":216:37)
#loc325 = loc("CWE510_Trapdoor__ip_based_logic_12.c":217:17)
#loc326 = loc("CWE510_Trapdoor__ip_based_logic_12.c":218:21)
#loc327 = loc("CWE510_Trapdoor__ip_based_logic_12.c":220:24)
#loc328 = loc("CWE510_Trapdoor__ip_based_logic_12.c":220:25)
#loc329 = loc("CWE510_Trapdoor__ip_based_logic_12.c":220:34)
#loc330 = loc("CWE510_Trapdoor__ip_based_logic_12.c":220:37)
#loc331 = loc("CWE510_Trapdoor__ip_based_logic_12.c":220:51)
#loc332 = loc("CWE510_Trapdoor__ip_based_logic_12.c":220:17)
#loc333 = loc("CWE510_Trapdoor__ip_based_logic_12.c":220:52)
#loc334 = loc("CWE510_Trapdoor__ip_based_logic_12.c":221:38)
#loc335 = loc("CWE510_Trapdoor__ip_based_logic_12.c":221:17)
#loc336 = loc("CWE510_Trapdoor__ip_based_logic_12.c":222:43)
#loc337 = loc("CWE510_Trapdoor__ip_based_logic_12.c":222:17)
#loc338 = loc("CWE510_Trapdoor__ip_based_logic_12.c":223:42)
#loc339 = loc("CWE510_Trapdoor__ip_based_logic_12.c":223:36)
#loc340 = loc("CWE510_Trapdoor__ip_based_logic_12.c":223:17)
#loc341 = loc("CWE510_Trapdoor__ip_based_logic_12.c":223:47)
#loc342 = loc("CWE510_Trapdoor__ip_based_logic_12.c":224:17)
#loc343 = loc("CWE510_Trapdoor__ip_based_logic_12.c":227:17)
#loc344 = loc("CWE510_Trapdoor__ip_based_logic_12.c":224:26)
#loc345 = loc("CWE510_Trapdoor__ip_based_logic_12.c":224:58)
#loc346 = loc("CWE510_Trapdoor__ip_based_logic_12.c":224:59)
#loc347 = loc("CWE510_Trapdoor__ip_based_logic_12.c":224:68)
#loc348 = loc("CWE510_Trapdoor__ip_based_logic_12.c":224:82)
#loc349 = loc("CWE510_Trapdoor__ip_based_logic_12.c":224:21)
#loc350 = loc("CWE510_Trapdoor__ip_based_logic_12.c":224:88)
#loc351 = loc("CWE510_Trapdoor__ip_based_logic_12.c":225:17)
#loc352 = loc("CWE510_Trapdoor__ip_based_logic_12.c":226:21)
#loc353 = loc("CWE510_Trapdoor__ip_based_logic_12.c":228:17)
#loc354 = loc("CWE510_Trapdoor__ip_based_logic_12.c":231:17)
#loc355 = loc("CWE510_Trapdoor__ip_based_logic_12.c":228:28)
#loc356 = loc("CWE510_Trapdoor__ip_based_logic_12.c":228:42)
#loc357 = loc("CWE510_Trapdoor__ip_based_logic_12.c":228:21)
#loc358 = loc("CWE510_Trapdoor__ip_based_logic_12.c":228:48)
#loc359 = loc("CWE510_Trapdoor__ip_based_logic_12.c":229:17)
#loc360 = loc("CWE510_Trapdoor__ip_based_logic_12.c":230:21)
#loc361 = loc("CWE510_Trapdoor__ip_based_logic_12.c":232:39)
#loc362 = loc("CWE510_Trapdoor__ip_based_logic_12.c":232:53)
#loc363 = loc("CWE510_Trapdoor__ip_based_logic_12.c":232:59)
#loc364 = loc("CWE510_Trapdoor__ip_based_logic_12.c":232:32)
#loc365 = loc("CWE510_Trapdoor__ip_based_logic_12.c":232:17)
#loc366 = loc("CWE510_Trapdoor__ip_based_logic_12.c":232:63)
#loc367 = loc("CWE510_Trapdoor__ip_based_logic_12.c":233:17)
#loc368 = loc("CWE510_Trapdoor__ip_based_logic_12.c":236:17)
#loc369 = loc("CWE510_Trapdoor__ip_based_logic_12.c":233:21)
#loc370 = loc("CWE510_Trapdoor__ip_based_logic_12.c":233:37)
#loc371 = loc("CWE510_Trapdoor__ip_based_logic_12.c":234:17)
#loc372 = loc("CWE510_Trapdoor__ip_based_logic_12.c":235:21)
#loc373 = loc("CWE510_Trapdoor__ip_based_logic_12.c":238:17)
#loc374 = loc("CWE510_Trapdoor__ip_based_logic_12.c":241:17)
#loc375 = loc("CWE510_Trapdoor__ip_based_logic_12.c":238:26)
#loc376 = loc("CWE510_Trapdoor__ip_based_logic_12.c":238:40)
#loc377 = loc("CWE510_Trapdoor__ip_based_logic_12.c":238:57)
#loc378 = loc("CWE510_Trapdoor__ip_based_logic_12.c":238:79)
#loc379 = loc("CWE510_Trapdoor__ip_based_logic_12.c":238:82)
#loc380 = loc("CWE510_Trapdoor__ip_based_logic_12.c":238:21)
#loc381 = loc("CWE510_Trapdoor__ip_based_logic_12.c":238:88)
#loc382 = loc("CWE510_Trapdoor__ip_based_logic_12.c":239:17)
#loc383 = loc("CWE510_Trapdoor__ip_based_logic_12.c":240:31)
#loc384 = loc("CWE510_Trapdoor__ip_based_logic_12.c":240:21)
#loc385 = loc("CWE510_Trapdoor__ip_based_logic_12.c":243:20)
#loc386 = loc("CWE510_Trapdoor__ip_based_logic_12.c":244:13)
#loc387 = loc("CWE510_Trapdoor__ip_based_logic_12.c":247:13)
#loc388 = loc("CWE510_Trapdoor__ip_based_logic_12.c":244:17)
#loc389 = loc("CWE510_Trapdoor__ip_based_logic_12.c":244:33)
#loc390 = loc("CWE510_Trapdoor__ip_based_logic_12.c":245:13)
#loc391 = loc("CWE510_Trapdoor__ip_based_logic_12.c":246:30)
#loc392 = loc("CWE510_Trapdoor__ip_based_logic_12.c":246:17)
#loc393 = loc("CWE510_Trapdoor__ip_based_logic_12.c":248:13)
#loc394 = loc("CWE510_Trapdoor__ip_based_logic_12.c":251:13)
#loc395 = loc("CWE510_Trapdoor__ip_based_logic_12.c":248:17)
#loc396 = loc("CWE510_Trapdoor__ip_based_logic_12.c":248:33)
#loc397 = loc("CWE510_Trapdoor__ip_based_logic_12.c":249:13)
#loc398 = loc("CWE510_Trapdoor__ip_based_logic_12.c":250:30)
#loc399 = loc("CWE510_Trapdoor__ip_based_logic_12.c":250:17)
#loc400 = loc("CWE510_Trapdoor__ip_based_logic_12.c":262:9)
#loc401 = loc("CWE510_Trapdoor__ip_based_logic_12.c":322:9)
#loc402 = loc("CWE510_Trapdoor__ip_based_logic_12.c":267:13)
#loc403 = loc("CWE510_Trapdoor__ip_based_logic_12.c":267:32)
#loc404 = loc("CWE510_Trapdoor__ip_based_logic_12.c":268:13)
#loc405 = loc("CWE510_Trapdoor__ip_based_logic_12.c":268:35)
#loc406 = loc("CWE510_Trapdoor__ip_based_logic_12.c":269:13)
#loc407 = loc("CWE510_Trapdoor__ip_based_logic_12.c":269:35)
#loc408 = loc("CWE510_Trapdoor__ip_based_logic_12.c":270:13)
#loc409 = loc("CWE510_Trapdoor__ip_based_logic_12.c":307:21)
#loc410 = loc("CWE510_Trapdoor__ip_based_logic_12.c":279:39)
#loc411 = loc("CWE510_Trapdoor__ip_based_logic_12.c":279:48)
#loc412 = loc("CWE510_Trapdoor__ip_based_logic_12.c":279:61)
#loc413 = loc("CWE510_Trapdoor__ip_based_logic_12.c":279:32)
#loc414 = loc("CWE510_Trapdoor__ip_based_logic_12.c":279:17)
#loc415 = loc("CWE510_Trapdoor__ip_based_logic_12.c":279:72)
#loc416 = loc("CWE510_Trapdoor__ip_based_logic_12.c":280:17)
#loc417 = loc("CWE510_Trapdoor__ip_based_logic_12.c":283:17)
#loc418 = loc("CWE510_Trapdoor__ip_based_logic_12.c":280:21)
#loc419 = loc("CWE510_Trapdoor__ip_based_logic_12.c":280:37)
#loc420 = loc("CWE510_Trapdoor__ip_based_logic_12.c":281:17)
#loc421 = loc("CWE510_Trapdoor__ip_based_logic_12.c":282:21)
#loc422 = loc("CWE510_Trapdoor__ip_based_logic_12.c":284:24)
#loc423 = loc("CWE510_Trapdoor__ip_based_logic_12.c":284:25)
#loc424 = loc("CWE510_Trapdoor__ip_based_logic_12.c":284:34)
#loc425 = loc("CWE510_Trapdoor__ip_based_logic_12.c":284:37)
#loc426 = loc("CWE510_Trapdoor__ip_based_logic_12.c":284:51)
#loc427 = loc("CWE510_Trapdoor__ip_based_logic_12.c":284:17)
#loc428 = loc("CWE510_Trapdoor__ip_based_logic_12.c":284:52)
#loc429 = loc("CWE510_Trapdoor__ip_based_logic_12.c":285:38)
#loc430 = loc("CWE510_Trapdoor__ip_based_logic_12.c":285:17)
#loc431 = loc("CWE510_Trapdoor__ip_based_logic_12.c":286:43)
#loc432 = loc("CWE510_Trapdoor__ip_based_logic_12.c":286:17)
#loc433 = loc("CWE510_Trapdoor__ip_based_logic_12.c":287:42)
#loc434 = loc("CWE510_Trapdoor__ip_based_logic_12.c":287:36)
#loc435 = loc("CWE510_Trapdoor__ip_based_logic_12.c":287:17)
#loc436 = loc("CWE510_Trapdoor__ip_based_logic_12.c":287:47)
#loc437 = loc("CWE510_Trapdoor__ip_based_logic_12.c":288:17)
#loc438 = loc("CWE510_Trapdoor__ip_based_logic_12.c":291:17)
#loc439 = loc("CWE510_Trapdoor__ip_based_logic_12.c":288:26)
#loc440 = loc("CWE510_Trapdoor__ip_based_logic_12.c":288:58)
#loc441 = loc("CWE510_Trapdoor__ip_based_logic_12.c":288:59)
#loc442 = loc("CWE510_Trapdoor__ip_based_logic_12.c":288:68)
#loc443 = loc("CWE510_Trapdoor__ip_based_logic_12.c":288:82)
#loc444 = loc("CWE510_Trapdoor__ip_based_logic_12.c":288:21)
#loc445 = loc("CWE510_Trapdoor__ip_based_logic_12.c":288:88)
#loc446 = loc("CWE510_Trapdoor__ip_based_logic_12.c":289:17)
#loc447 = loc("CWE510_Trapdoor__ip_based_logic_12.c":290:21)
#loc448 = loc("CWE510_Trapdoor__ip_based_logic_12.c":292:17)
#loc449 = loc("CWE510_Trapdoor__ip_based_logic_12.c":295:17)
#loc450 = loc("CWE510_Trapdoor__ip_based_logic_12.c":292:28)
#loc451 = loc("CWE510_Trapdoor__ip_based_logic_12.c":292:42)
#loc452 = loc("CWE510_Trapdoor__ip_based_logic_12.c":292:21)
#loc453 = loc("CWE510_Trapdoor__ip_based_logic_12.c":292:48)
#loc454 = loc("CWE510_Trapdoor__ip_based_logic_12.c":293:17)
#loc455 = loc("CWE510_Trapdoor__ip_based_logic_12.c":294:21)
#loc456 = loc("CWE510_Trapdoor__ip_based_logic_12.c":296:39)
#loc457 = loc("CWE510_Trapdoor__ip_based_logic_12.c":296:53)
#loc458 = loc("CWE510_Trapdoor__ip_based_logic_12.c":296:59)
#loc459 = loc("CWE510_Trapdoor__ip_based_logic_12.c":296:32)
#loc460 = loc("CWE510_Trapdoor__ip_based_logic_12.c":296:17)
#loc461 = loc("CWE510_Trapdoor__ip_based_logic_12.c":296:63)
#loc462 = loc("CWE510_Trapdoor__ip_based_logic_12.c":297:17)
#loc463 = loc("CWE510_Trapdoor__ip_based_logic_12.c":300:17)
#loc464 = loc("CWE510_Trapdoor__ip_based_logic_12.c":297:21)
#loc465 = loc("CWE510_Trapdoor__ip_based_logic_12.c":297:37)
#loc466 = loc("CWE510_Trapdoor__ip_based_logic_12.c":298:17)
#loc467 = loc("CWE510_Trapdoor__ip_based_logic_12.c":299:21)
#loc468 = loc("CWE510_Trapdoor__ip_based_logic_12.c":302:17)
#loc469 = loc("CWE510_Trapdoor__ip_based_logic_12.c":305:17)
#loc470 = loc("CWE510_Trapdoor__ip_based_logic_12.c":302:26)
#loc471 = loc("CWE510_Trapdoor__ip_based_logic_12.c":302:40)
#loc472 = loc("CWE510_Trapdoor__ip_based_logic_12.c":302:57)
#loc473 = loc("CWE510_Trapdoor__ip_based_logic_12.c":302:79)
#loc474 = loc("CWE510_Trapdoor__ip_based_logic_12.c":302:82)
#loc475 = loc("CWE510_Trapdoor__ip_based_logic_12.c":302:21)
#loc476 = loc("CWE510_Trapdoor__ip_based_logic_12.c":302:88)
#loc477 = loc("CWE510_Trapdoor__ip_based_logic_12.c":303:17)
#loc478 = loc("CWE510_Trapdoor__ip_based_logic_12.c":304:31)
#loc479 = loc("CWE510_Trapdoor__ip_based_logic_12.c":304:21)
#loc480 = loc("CWE510_Trapdoor__ip_based_logic_12.c":307:20)
#loc481 = loc("CWE510_Trapdoor__ip_based_logic_12.c":308:13)
#loc482 = loc("CWE510_Trapdoor__ip_based_logic_12.c":311:13)
#loc483 = loc("CWE510_Trapdoor__ip_based_logic_12.c":308:17)
#loc484 = loc("CWE510_Trapdoor__ip_based_logic_12.c":308:33)
#loc485 = loc("CWE510_Trapdoor__ip_based_logic_12.c":309:13)
#loc486 = loc("CWE510_Trapdoor__ip_based_logic_12.c":310:30)
#loc487 = loc("CWE510_Trapdoor__ip_based_logic_12.c":310:17)
#loc488 = loc("CWE510_Trapdoor__ip_based_logic_12.c":312:13)
#loc489 = loc("CWE510_Trapdoor__ip_based_logic_12.c":315:13)
#loc490 = loc("CWE510_Trapdoor__ip_based_logic_12.c":312:17)
#loc491 = loc("CWE510_Trapdoor__ip_based_logic_12.c":312:33)
#loc492 = loc("CWE510_Trapdoor__ip_based_logic_12.c":313:13)
#loc493 = loc("CWE510_Trapdoor__ip_based_logic_12.c":314:30)
#loc494 = loc("CWE510_Trapdoor__ip_based_logic_12.c":314:17)
#loc495 = loc(fused[#loc1, #loc2])
#loc496 = loc(fused[#loc3, #loc4])
#loc497 = loc(fused[#loc5, #loc6])
#loc498 = loc(fused[#loc7, #loc8])
#loc499 = loc(fused[#loc9, #loc10])
#loc500 = loc(fused[#loc11, #loc12])
#loc501 = loc(fused[#loc13, #loc14])
#loc502 = loc(fused[#loc15, #loc16])
#loc503 = loc(fused[#loc18, #loc19])
#loc504 = loc(fused[#loc20, #loc21])
#loc505 = loc(fused[#loc24, #loc25])
#loc506 = loc(fused[#loc27, #loc28])
#loc507 = loc(fused[#loc29, #loc30])
#loc508 = loc(fused[#loc31, #loc32])
#loc509 = loc(fused[#loc33, #loc34])
#loc510 = loc(fused[#loc35, #loc36, #loc37, #loc32])
#loc511 = loc(fused[#loc38, #loc39])
#loc512 = loc(fused[#loc40, #loc41])
#loc513 = loc(fused[#loc40, #loc42])
#loc514 = loc(fused[#loc43, #loc44])
#loc515 = loc(fused[#loc45, #loc46])
#loc516 = loc(fused[#loc47, #loc48])
#loc517 = loc(fused[#loc49, #loc44])
#loc518 = loc(fused[#loc50, #loc51])
#loc519 = loc(fused[#loc56, #loc57])
#loc520 = loc(fused[#loc58, #loc59])
#loc521 = loc(fused[#loc60, #loc61])
#loc522 = loc(fused[#loc62, #loc59])
#loc523 = loc(fused[#loc64, #loc65])
#loc524 = loc(fused[#loc67, #loc68])
#loc525 = loc(fused[#loc69, #loc70])
#loc526 = loc(fused[#loc73, #loc71])
#loc527 = loc(fused[#loc77, #loc74])
#loc528 = loc(fused[#loc81, #loc82])
#loc529 = loc(fused[#loc83, #loc84])
#loc530 = loc(fused[#loc86, #loc87])
#loc531 = loc(fused[#loc88, #loc89])
#loc532 = loc(fused[#loc90, #loc91])
#loc533 = loc(fused[#loc92, #loc84])
#loc534 = loc(fused[#loc94, #loc95])
#loc535 = loc(fused[#loc98, #loc99])
#loc536 = loc(fused[#loc100, #loc95])
#loc537 = loc(fused[#loc106, #loc107])
#loc538 = loc(fused[#loc108, #loc109])
#loc539 = loc(fused[#loc110, #loc111])
#loc540 = loc(fused[#loc112, #loc109])
#loc541 = loc(fused[#loc114, #loc115])
#loc542 = loc(fused[#loc117, #loc118])
#loc543 = loc(fused[#loc119, #loc120])
#loc544 = loc(fused[#loc121, #loc122])
#loc545 = loc(fused[#loc124, #loc115])
#loc546 = loc(fused[#loc126, #loc127])
#loc547 = loc(fused[#loc128, #loc130])
#loc548 = loc(fused[#loc131, #loc132, #loc133, #loc127])
#loc549 = loc(fused[#loc134, #loc135])
#loc550 = loc(fused[#loc137, #loc138])
#loc551 = loc(fused[#loc140, #loc141])
#loc552 = loc(fused[#loc142, #loc135])
#loc553 = loc(fused[#loc144, #loc145])
#loc554 = loc(fused[#loc147, #loc148])
#loc555 = loc(fused[#loc150, #loc151])
#loc556 = loc(fused[#loc152, #loc145])
#loc557 = loc(fused[#loc155, #loc156])
#loc558 = loc(fused[#loc157, #loc158])
#loc559 = loc(fused[#loc159, #loc156])
#loc560 = loc(fused[#loc162, #loc163])
#loc561 = loc(fused[#loc164, #loc165])
#loc562 = loc(fused[#loc166, #loc163])
#loc563 = loc(fused[#loc169, #loc170])
#loc564 = loc(fused[#loc171, #loc172])
#loc565 = loc(fused[#loc173, #loc174])
#loc566 = loc(fused[#loc175, #loc176])
#loc567 = loc(fused[#loc177, #loc178])
#loc568 = loc(fused[#loc183, #loc184])
#loc569 = loc(fused[#loc185, #loc186])
#loc570 = loc(fused[#loc187, #loc188])
#loc571 = loc(fused[#loc189, #loc186])
#loc572 = loc(fused[#loc191, #loc192])
#loc573 = loc(fused[#loc194, #loc195])
#loc574 = loc(fused[#loc196, #loc197])
#loc575 = loc(fused[#loc199, #loc198])
#loc576 = loc(fused[#loc201, #loc200])
#loc577 = loc(fused[#loc204, #loc205])
#loc578 = loc(fused[#loc206, #loc207])
#loc579 = loc(fused[#loc209, #loc210])
#loc580 = loc(fused[#loc211, #loc212])
#loc581 = loc(fused[#loc213, #loc214])
#loc582 = loc(fused[#loc215, #loc207])
#loc583 = loc(fused[#loc217, #loc218])
#loc584 = loc(fused[#loc221, #loc222])
#loc585 = loc(fused[#loc223, #loc218])
#loc586 = loc(fused[#loc229, #loc230])
#loc587 = loc(fused[#loc231, #loc232])
#loc588 = loc(fused[#loc233, #loc234])
#loc589 = loc(fused[#loc235, #loc232])
#loc590 = loc(fused[#loc237, #loc238])
#loc591 = loc(fused[#loc241, #loc242])
#loc592 = loc(fused[#loc244, #loc245])
#loc593 = loc(fused[#loc246, #loc238])
#loc594 = loc(fused[#loc250, #loc251])
#loc595 = loc(fused[#loc252, #loc253])
#loc596 = loc(fused[#loc254, #loc251])
#loc597 = loc(fused[#loc257, #loc258])
#loc598 = loc(fused[#loc259, #loc260])
#loc599 = loc(fused[#loc261, #loc258])
#loc600 = loc(fused[#loc264, #loc265])
#loc601 = loc(fused[#loc266, #loc267])
#loc602 = loc(fused[#loc268, #loc269])
#loc603 = loc(fused[#loc270, #loc271])
#loc604 = loc(fused[#loc276, #loc277])
#loc607 = loc(fused[#loc287, #loc288])
#loc608 = loc(fused[#loc291, #loc292])
#loc609 = loc(fused[#loc295, #loc294])
#loc610 = loc(fused[#loc296, #loc297])
#loc611 = loc(fused[#loc298, #loc299])
#loc612 = loc(fused[#loc300, #loc301])
#loc613 = loc(fused[#loc302, #loc303, #loc304, #loc299])
#loc614 = loc(fused[#loc305, #loc306])
#loc615 = loc(fused[#loc307, #loc308])
#loc616 = loc(fused[#loc309, #loc310])
#loc617 = loc(fused[#loc311, #loc312])
#loc618 = loc(fused[#loc313, #loc314])
#loc619 = loc(fused[#loc319, #loc320])
#loc620 = loc(fused[#loc321, #loc322])
#loc621 = loc(fused[#loc323, #loc324])
#loc622 = loc(fused[#loc325, #loc322])
#loc623 = loc(fused[#loc327, #loc328])
#loc624 = loc(fused[#loc330, #loc331])
#loc625 = loc(fused[#loc332, #loc333])
#loc626 = loc(fused[#loc335, #loc334])
#loc627 = loc(fused[#loc337, #loc336])
#loc628 = loc(fused[#loc340, #loc341])
#loc629 = loc(fused[#loc342, #loc343])
#loc630 = loc(fused[#loc345, #loc346])
#loc631 = loc(fused[#loc347, #loc348])
#loc632 = loc(fused[#loc349, #loc350])
#loc633 = loc(fused[#loc351, #loc343])
#loc634 = loc(fused[#loc353, #loc354])
#loc635 = loc(fused[#loc357, #loc358])
#loc636 = loc(fused[#loc359, #loc354])
#loc637 = loc(fused[#loc365, #loc366])
#loc638 = loc(fused[#loc367, #loc368])
#loc639 = loc(fused[#loc369, #loc370])
#loc640 = loc(fused[#loc371, #loc368])
#loc641 = loc(fused[#loc373, #loc374])
#loc642 = loc(fused[#loc377, #loc378])
#loc643 = loc(fused[#loc380, #loc381])
#loc644 = loc(fused[#loc382, #loc374])
#loc645 = loc(fused[#loc386, #loc387])
#loc646 = loc(fused[#loc388, #loc389])
#loc647 = loc(fused[#loc390, #loc387])
#loc648 = loc(fused[#loc393, #loc394])
#loc649 = loc(fused[#loc395, #loc396])
#loc650 = loc(fused[#loc397, #loc394])
#loc651 = loc(fused[#loc400, #loc401])
#loc652 = loc(fused[#loc402, #loc403])
#loc653 = loc(fused[#loc404, #loc405])
#loc654 = loc(fused[#loc406, #loc407])
#loc655 = loc(fused[#loc408, #loc409])
#loc656 = loc(fused[#loc414, #loc415])
#loc657 = loc(fused[#loc416, #loc417])
#loc658 = loc(fused[#loc418, #loc419])
#loc659 = loc(fused[#loc420, #loc417])
#loc660 = loc(fused[#loc422, #loc423])
#loc661 = loc(fused[#loc425, #loc426])
#loc662 = loc(fused[#loc427, #loc428])
#loc663 = loc(fused[#loc430, #loc429])
#loc664 = loc(fused[#loc432, #loc431])
#loc665 = loc(fused[#loc435, #loc436])
#loc666 = loc(fused[#loc437, #loc438])
#loc667 = loc(fused[#loc440, #loc441])
#loc668 = loc(fused[#loc442, #loc443])
#loc669 = loc(fused[#loc444, #loc445])
#loc670 = loc(fused[#loc446, #loc438])
#loc671 = loc(fused[#loc448, #loc449])
#loc672 = loc(fused[#loc452, #loc453])
#loc673 = loc(fused[#loc454, #loc449])
#loc674 = loc(fused[#loc460, #loc461])
#loc675 = loc(fused[#loc462, #loc463])
#loc676 = loc(fused[#loc464, #loc465])
#loc677 = loc(fused[#loc466, #loc463])
#loc678 = loc(fused[#loc468, #loc469])
#loc679 = loc(fused[#loc472, #loc473])
#loc680 = loc(fused[#loc475, #loc476])
#loc681 = loc(fused[#loc477, #loc469])
#loc682 = loc(fused[#loc481, #loc482])
#loc683 = loc(fused[#loc483, #loc484])
#loc684 = loc(fused[#loc485, #loc482])
#loc685 = loc(fused[#loc488, #loc489])
#loc686 = loc(fused[#loc490, #loc491])
#loc687 = loc(fused[#loc492, #loc489])
