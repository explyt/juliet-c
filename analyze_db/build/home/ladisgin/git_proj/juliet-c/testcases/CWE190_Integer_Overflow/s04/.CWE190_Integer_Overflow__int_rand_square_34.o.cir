!s32i = !cir.int<s, 32>
!s64i = !cir.int<s, 64>
!s8i = !cir.int<s, 8>
!u32i = !cir.int<u, 32>
!void = !cir.void
#false = #cir.bool<false> : !cir.bool
#fn_attr = #cir<extra({nothrow = #cir.nothrow})>
#fn_attr1 = #cir<extra({inline = #cir.inline<no>, nothrow = #cir.nothrow, optnone = #cir.optnone})>
#loc17 = loc("CWE190_Integer_Overflow__int_rand_square_34.c":37:12)
#loc75 = loc("CWE190_Integer_Overflow__int_rand_square_34.c":81:12)
#loc85 = loc("CWE190_Integer_Overflow__int_rand_square_34.c":86:28)
#true = #cir.bool<true> : !cir.bool
!ty_CWE190_Integer_Overflow__int_rand_square_34_unionType = !cir.struct<union "CWE190_Integer_Overflow__int_rand_square_34_unionType" {!s32i, !s32i}>
module @"/home/ladisgin/git_proj/juliet-c/testcases/CWE190_Integer_Overflow/s04/CWE190_Integer_Overflow__int_rand_square_34.c" attributes {cir.lang = #cir.lang<c>, cir.sob = #cir.signed_overflow_behavior<undefined>, cir.triple = "x86_64-unknown-linux-gnu", dlti.dl_spec = #dlti.dl_spec<i1 = dense<8> : vector<2xi64>, i8 = dense<8> : vector<2xi64>, !llvm.ptr = dense<64> : vector<4xi64>, i16 = dense<16> : vector<2xi64>, i32 = dense<32> : vector<2xi64>, f80 = dense<128> : vector<2xi64>, f16 = dense<16> : vector<2xi64>, f64 = dense<64> : vector<2xi64>, i128 = dense<128> : vector<2xi64>, f128 = dense<128> : vector<2xi64>, i64 = dense<64> : vector<2xi64>, !llvm.ptr<272> = dense<64> : vector<4xi64>, !llvm.ptr<271> = dense<32> : vector<4xi64>, !llvm.ptr<270> = dense<32> : vector<4xi64>, "dlti.stack_alignment" = 128 : i64, "dlti.endianness" = "little">} {
  cir.func private @rand() -> !s32i extra(#fn_attr) loc(#loc98)
  cir.func private @printIntLine(!s32i) loc(#loc99)
  cir.func no_proto @CWE190_Integer_Overflow__int_rand_square_34_bad() extra(#fn_attr1) {
    %0 = cir.alloca !s32i, !cir.ptr<!s32i>, ["data", init] {alignment = 4 : i64} loc(#loc101)
    %1 = cir.alloca !s32i, !cir.ptr<!s32i>, ["result", init] {alignment = 4 : i64} loc(#loc102)
    %2 = cir.alloca !s32i, !cir.ptr<!s32i>, ["data"] {alignment = 4 : i64} loc(#loc103)
    %3 = cir.alloca !ty_CWE190_Integer_Overflow__int_rand_square_34_unionType, !cir.ptr<!ty_CWE190_Integer_Overflow__int_rand_square_34_unionType>, ["myUnion"] {alignment = 4 : i64} loc(#loc104)
    %4 = cir.const #cir.int<0> : !s32i loc(#loc15)
    cir.store %4, %2 : !s32i, !cir.ptr<!s32i> loc(#loc105)
    %5 = cir.call @rand() : () -> !s32i extra(#fn_attr) loc(#loc17)
    %6 = cir.const #cir.int<1> : !s32i loc(#loc17)
    %7 = cir.binop(and, %5, %6) : !s32i loc(#loc17)
    %8 = cir.cast(int_to_bool, %7 : !s32i), !cir.bool loc(#loc17)
    cir.brcond %8 ^bb1, ^bb2 loc(#loc17)
  ^bb1:  // pred: ^bb0
    %9 = cir.call @rand() : () -> !s32i extra(#fn_attr) loc(#loc17)
    %10 = cir.cast(integral, %9 : !s32i), !u32i loc(#loc17)
    %11 = cir.const #cir.int<30> : !s32i loc(#loc17)
    %12 = cir.shift(left, %10 : !u32i, %11 : !s32i) -> !u32i loc(#loc17)
    %13 = cir.call @rand() : () -> !s32i extra(#fn_attr) loc(#loc17)
    %14 = cir.cast(integral, %13 : !s32i), !u32i loc(#loc17)
    %15 = cir.const #cir.int<15> : !s32i loc(#loc17)
    %16 = cir.shift(left, %14 : !u32i, %15 : !s32i) -> !u32i loc(#loc17)
    %17 = cir.binop(xor, %12, %16) : !u32i loc(#loc17)
    %18 = cir.call @rand() : () -> !s32i extra(#fn_attr) loc(#loc17)
    %19 = cir.cast(integral, %18 : !s32i), !u32i loc(#loc17)
    %20 = cir.binop(xor, %17, %19) : !u32i loc(#loc17)
    cir.br ^bb3(%20 : !u32i) loc(#loc17)
  ^bb2:  // pred: ^bb0
    %21 = cir.call @rand() : () -> !s32i extra(#fn_attr) loc(#loc17)
    %22 = cir.cast(integral, %21 : !s32i), !u32i loc(#loc17)
    %23 = cir.const #cir.int<30> : !s32i loc(#loc17)
    %24 = cir.shift(left, %22 : !u32i, %23 : !s32i) -> !u32i loc(#loc17)
    %25 = cir.call @rand() : () -> !s32i extra(#fn_attr) loc(#loc17)
    %26 = cir.cast(integral, %25 : !s32i), !u32i loc(#loc17)
    %27 = cir.const #cir.int<15> : !s32i loc(#loc17)
    %28 = cir.shift(left, %26 : !u32i, %27 : !s32i) -> !u32i loc(#loc17)
    %29 = cir.binop(xor, %24, %28) : !u32i loc(#loc17)
    %30 = cir.call @rand() : () -> !s32i extra(#fn_attr) loc(#loc17)
    %31 = cir.cast(integral, %30 : !s32i), !u32i loc(#loc17)
    %32 = cir.binop(xor, %29, %31) : !u32i loc(#loc17)
    %33 = cir.unary(minus, %32) : !u32i, !u32i loc(#loc17)
    %34 = cir.const #cir.int<1> : !s32i loc(#loc17)
    %35 = cir.cast(integral, %34 : !s32i), !u32i loc(#loc17)
    %36 = cir.binop(sub, %33, %35) : !u32i loc(#loc17)
    cir.br ^bb3(%36 : !u32i) loc(#loc17)
  ^bb3(%37: !u32i loc("CWE190_Integer_Overflow__int_rand_square_34.c":37:12)):  // 2 preds: ^bb1, ^bb2
    cir.br ^bb4 loc(#loc17)
  ^bb4:  // pred: ^bb3
    %38 = cir.cast(integral, %37 : !u32i), !s32i loc(#loc17)
    cir.store %38, %2 : !s32i, !cir.ptr<!s32i> loc(#loc106)
    %39 = cir.load %2 : !cir.ptr<!s32i>, !s32i loc(#loc19)
    %40 = cir.get_member %3[0] {name = "unionFirst"} : !cir.ptr<!ty_CWE190_Integer_Overflow__int_rand_square_34_unionType> -> !cir.ptr<!s32i> loc(#loc20)
    cir.store %39, %40 : !s32i, !cir.ptr<!s32i> loc(#loc107)
    cir.br ^bb5 loc(#loc108)
  ^bb5:  // pred: ^bb4
    %41 = cir.get_member %3[1] {name = "unionSecond"} : !cir.ptr<!ty_CWE190_Integer_Overflow__int_rand_square_34_unionType> -> !cir.ptr<!s32i> loc(#loc24)
    %42 = cir.load %41 : !cir.ptr<!s32i>, !s32i loc(#loc8)
    cir.store %42, %0 : !s32i, !cir.ptr<!s32i> loc(#loc101)
    cir.br ^bb6 loc(#loc109)
  ^bb6:  // pred: ^bb5
    %43 = cir.load %0 : !cir.ptr<!s32i>, !s32i loc(#loc27)
    %44 = cir.load %0 : !cir.ptr<!s32i>, !s32i loc(#loc10)
    %45 = cir.binop(mul, %43, %44) nsw : !s32i loc(#loc27)
    cir.store %45, %1 : !s32i, !cir.ptr<!s32i> loc(#loc102)
    %46 = cir.load %1 : !cir.ptr<!s32i>, !s32i loc(#loc28)
    cir.call @printIntLine(%46) : (!s32i) -> () loc(#loc29)
    cir.br ^bb7 loc(#loc26)
  ^bb7:  // pred: ^bb6
    cir.br ^bb8 loc(#loc23)
  ^bb8:  // pred: ^bb7
    cir.return loc(#loc6)
  } loc(#loc100)
  cir.func no_proto @CWE190_Integer_Overflow__int_rand_square_34_good() extra(#fn_attr1) {
    %0 = cir.get_global @goodG2B : !cir.ptr<!cir.func<!void ()>> loc(#loc111)
    cir.call %0() : (!cir.ptr<!cir.func<!void ()>>) -> () loc(#loc32)
    %1 = cir.get_global @goodB2G : !cir.ptr<!cir.func<!void ()>> loc(#loc112)
    cir.call %1() : (!cir.ptr<!cir.func<!void ()>>) -> () loc(#loc34)
    cir.return loc(#loc31)
  } loc(#loc110)
  cir.func no_proto internal private @goodG2B() extra(#fn_attr1) {
    %0 = cir.alloca !s32i, !cir.ptr<!s32i>, ["data", init] {alignment = 4 : i64} loc(#loc114)
    %1 = cir.alloca !s32i, !cir.ptr<!s32i>, ["result", init] {alignment = 4 : i64} loc(#loc115)
    %2 = cir.alloca !s32i, !cir.ptr<!s32i>, ["data"] {alignment = 4 : i64} loc(#loc116)
    %3 = cir.alloca !ty_CWE190_Integer_Overflow__int_rand_square_34_unionType, !cir.ptr<!ty_CWE190_Integer_Overflow__int_rand_square_34_unionType>, ["myUnion"] {alignment = 4 : i64} loc(#loc117)
    %4 = cir.const #cir.int<0> : !s32i loc(#loc46)
    cir.store %4, %2 : !s32i, !cir.ptr<!s32i> loc(#loc118)
    %5 = cir.const #cir.int<2> : !s32i loc(#loc48)
    cir.store %5, %2 : !s32i, !cir.ptr<!s32i> loc(#loc119)
    %6 = cir.load %2 : !cir.ptr<!s32i>, !s32i loc(#loc50)
    %7 = cir.get_member %3[0] {name = "unionFirst"} : !cir.ptr<!ty_CWE190_Integer_Overflow__int_rand_square_34_unionType> -> !cir.ptr<!s32i> loc(#loc20)
    cir.store %6, %7 : !s32i, !cir.ptr<!s32i> loc(#loc120)
    cir.br ^bb1 loc(#loc121)
  ^bb1:  // pred: ^bb0
    %8 = cir.get_member %3[1] {name = "unionSecond"} : !cir.ptr<!ty_CWE190_Integer_Overflow__int_rand_square_34_unionType> -> !cir.ptr<!s32i> loc(#loc24)
    %9 = cir.load %8 : !cir.ptr<!s32i>, !s32i loc(#loc39)
    cir.store %9, %0 : !s32i, !cir.ptr<!s32i> loc(#loc114)
    cir.br ^bb2 loc(#loc122)
  ^bb2:  // pred: ^bb1
    %10 = cir.load %0 : !cir.ptr<!s32i>, !s32i loc(#loc56)
    %11 = cir.load %0 : !cir.ptr<!s32i>, !s32i loc(#loc41)
    %12 = cir.binop(mul, %10, %11) nsw : !s32i loc(#loc56)
    cir.store %12, %1 : !s32i, !cir.ptr<!s32i> loc(#loc115)
    %13 = cir.load %1 : !cir.ptr<!s32i>, !s32i loc(#loc57)
    cir.call @printIntLine(%13) : (!s32i) -> () loc(#loc58)
    cir.br ^bb3 loc(#loc55)
  ^bb3:  // pred: ^bb2
    cir.br ^bb4 loc(#loc53)
  ^bb4:  // pred: ^bb3
    cir.return loc(#loc37)
  } loc(#loc113)
  cir.func private @sqrt(!cir.double) -> !cir.double extra(#fn_attr) loc(#loc59)
  cir.func private @printLine(!cir.ptr<!s8i>) loc(#loc123)
  cir.global "private" constant cir_private dsolocal @".str" = #cir.const_array<"data value is too large to perform arithmetic safely.\00" : !cir.array<!s8i x 54>> : !cir.array<!s8i x 54> {alignment = 1 : i64} loc(#loc62)
  cir.func no_proto internal private @goodB2G() extra(#fn_attr1) {
    %0 = cir.alloca !s32i, !cir.ptr<!s32i>, ["data", init] {alignment = 4 : i64} loc(#loc125)
    %1 = cir.alloca !s32i, !cir.ptr<!s32i>, ["result", init] {alignment = 4 : i64} loc(#loc126)
    %2 = cir.alloca !s32i, !cir.ptr<!s32i>, ["data"] {alignment = 4 : i64} loc(#loc127)
    %3 = cir.alloca !ty_CWE190_Integer_Overflow__int_rand_square_34_unionType, !cir.ptr<!ty_CWE190_Integer_Overflow__int_rand_square_34_unionType>, ["myUnion"] {alignment = 4 : i64} loc(#loc128)
    %4 = cir.const #cir.int<0> : !s32i loc(#loc73)
    cir.store %4, %2 : !s32i, !cir.ptr<!s32i> loc(#loc129)
    %5 = cir.call @rand() : () -> !s32i extra(#fn_attr) loc(#loc75)
    %6 = cir.const #cir.int<1> : !s32i loc(#loc75)
    %7 = cir.binop(and, %5, %6) : !s32i loc(#loc75)
    %8 = cir.cast(int_to_bool, %7 : !s32i), !cir.bool loc(#loc75)
    cir.brcond %8 ^bb1, ^bb2 loc(#loc75)
  ^bb1:  // pred: ^bb0
    %9 = cir.call @rand() : () -> !s32i extra(#fn_attr) loc(#loc75)
    %10 = cir.cast(integral, %9 : !s32i), !u32i loc(#loc75)
    %11 = cir.const #cir.int<30> : !s32i loc(#loc75)
    %12 = cir.shift(left, %10 : !u32i, %11 : !s32i) -> !u32i loc(#loc75)
    %13 = cir.call @rand() : () -> !s32i extra(#fn_attr) loc(#loc75)
    %14 = cir.cast(integral, %13 : !s32i), !u32i loc(#loc75)
    %15 = cir.const #cir.int<15> : !s32i loc(#loc75)
    %16 = cir.shift(left, %14 : !u32i, %15 : !s32i) -> !u32i loc(#loc75)
    %17 = cir.binop(xor, %12, %16) : !u32i loc(#loc75)
    %18 = cir.call @rand() : () -> !s32i extra(#fn_attr) loc(#loc75)
    %19 = cir.cast(integral, %18 : !s32i), !u32i loc(#loc75)
    %20 = cir.binop(xor, %17, %19) : !u32i loc(#loc75)
    cir.br ^bb3(%20 : !u32i) loc(#loc75)
  ^bb2:  // pred: ^bb0
    %21 = cir.call @rand() : () -> !s32i extra(#fn_attr) loc(#loc75)
    %22 = cir.cast(integral, %21 : !s32i), !u32i loc(#loc75)
    %23 = cir.const #cir.int<30> : !s32i loc(#loc75)
    %24 = cir.shift(left, %22 : !u32i, %23 : !s32i) -> !u32i loc(#loc75)
    %25 = cir.call @rand() : () -> !s32i extra(#fn_attr) loc(#loc75)
    %26 = cir.cast(integral, %25 : !s32i), !u32i loc(#loc75)
    %27 = cir.const #cir.int<15> : !s32i loc(#loc75)
    %28 = cir.shift(left, %26 : !u32i, %27 : !s32i) -> !u32i loc(#loc75)
    %29 = cir.binop(xor, %24, %28) : !u32i loc(#loc75)
    %30 = cir.call @rand() : () -> !s32i extra(#fn_attr) loc(#loc75)
    %31 = cir.cast(integral, %30 : !s32i), !u32i loc(#loc75)
    %32 = cir.binop(xor, %29, %31) : !u32i loc(#loc75)
    %33 = cir.unary(minus, %32) : !u32i, !u32i loc(#loc75)
    %34 = cir.const #cir.int<1> : !s32i loc(#loc75)
    %35 = cir.cast(integral, %34 : !s32i), !u32i loc(#loc75)
    %36 = cir.binop(sub, %33, %35) : !u32i loc(#loc75)
    cir.br ^bb3(%36 : !u32i) loc(#loc75)
  ^bb3(%37: !u32i loc("CWE190_Integer_Overflow__int_rand_square_34.c":81:12)):  // 2 preds: ^bb1, ^bb2
    cir.br ^bb4 loc(#loc75)
  ^bb4:  // pred: ^bb3
    %38 = cir.cast(integral, %37 : !u32i), !s32i loc(#loc75)
    cir.store %38, %2 : !s32i, !cir.ptr<!s32i> loc(#loc130)
    %39 = cir.load %2 : !cir.ptr<!s32i>, !s32i loc(#loc77)
    %40 = cir.get_member %3[0] {name = "unionFirst"} : !cir.ptr<!ty_CWE190_Integer_Overflow__int_rand_square_34_unionType> -> !cir.ptr<!s32i> loc(#loc20)
    cir.store %39, %40 : !s32i, !cir.ptr<!s32i> loc(#loc131)
    cir.br ^bb5 loc(#loc132)
  ^bb5:  // pred: ^bb4
    %41 = cir.get_member %3[1] {name = "unionSecond"} : !cir.ptr<!ty_CWE190_Integer_Overflow__int_rand_square_34_unionType> -> !cir.ptr<!s32i> loc(#loc24)
    %42 = cir.load %41 : !cir.ptr<!s32i>, !s32i loc(#loc66)
    cir.store %42, %0 : !s32i, !cir.ptr<!s32i> loc(#loc125)
    cir.br ^bb6 loc(#loc133)
  ^bb6:  // pred: ^bb5
    %43 = cir.load %0 : !cir.ptr<!s32i>, !s32i loc(#loc83)
    %44 = cir.const #cir.int<2147483647> : !s32i loc(#loc84)
    %45 = cir.unary(minus, %44) : !s32i, !s32i loc(#loc84)
    %46 = cir.const #cir.int<1> : !s32i loc(#loc84)
    %47 = cir.binop(sub, %45, %46) nsw : !s32i loc(#loc84)
    %48 = cir.cmp(gt, %43, %47) : !s32i, !cir.bool loc(#loc134)
    cir.brcond %48 ^bb7, ^bb12 loc(#loc85)
  ^bb7:  // pred: ^bb6
    %49 = cir.load %0 : !cir.ptr<!s32i>, !s32i loc(#loc86)
    %50 = cir.abs %49 poison : !s32i loc(#loc87)
    %51 = cir.cast(integral, %50 : !s32i), !s64i loc(#loc87)
    %52 = cir.get_global @sqrt : !cir.ptr<!cir.func<!cir.double (!cir.double)>> loc(#loc88)
    %53 = cir.const #cir.int<2147483647> : !s32i loc(#loc89)
    %54 = cir.cast(int_to_float, %53 : !s32i), !cir.double loc(#loc89)
    %55 = cir.call @sqrt(%54) : (!cir.double) -> !cir.double extra(#fn_attr) loc(#loc88)
    %56 = cir.cast(float_to_int, %55 : !cir.double), !s64i loc(#loc88)
    %57 = cir.cmp(lt, %51, %56) : !s64i, !cir.bool loc(#loc135)
    cir.brcond %57 ^bb8, ^bb9 loc(#loc85)
  ^bb8:  // pred: ^bb7
    %58 = cir.const #true loc(#loc85)
    cir.br ^bb10(%58 : !cir.bool) loc(#loc85)
  ^bb9:  // pred: ^bb7
    %59 = cir.const #false loc(#loc85)
    cir.br ^bb10(%59 : !cir.bool) loc(#loc85)
  ^bb10(%60: !cir.bool loc("CWE190_Integer_Overflow__int_rand_square_34.c":86:28)):  // 2 preds: ^bb8, ^bb9
    cir.br ^bb11 loc(#loc85)
  ^bb11:  // pred: ^bb10
    cir.br ^bb13(%60 : !cir.bool) loc(#loc85)
  ^bb12:  // pred: ^bb6
    %61 = cir.const #false loc(#loc85)
    cir.br ^bb13(%61 : !cir.bool) loc(#loc85)
  ^bb13(%62: !cir.bool loc("CWE190_Integer_Overflow__int_rand_square_34.c":86:28)):  // 2 preds: ^bb11, ^bb12
    cir.br ^bb14 loc(#loc85)
  ^bb14:  // pred: ^bb13
    cir.brcond %62 ^bb15, ^bb16 loc(#loc136)
  ^bb15:  // pred: ^bb14
    %63 = cir.load %0 : !cir.ptr<!s32i>, !s32i loc(#loc94)
    %64 = cir.load %0 : !cir.ptr<!s32i>, !s32i loc(#loc68)
    %65 = cir.binop(mul, %63, %64) nsw : !s32i loc(#loc94)
    cir.store %65, %1 : !s32i, !cir.ptr<!s32i> loc(#loc126)
    %66 = cir.load %1 : !cir.ptr<!s32i>, !s32i loc(#loc95)
    cir.call @printIntLine(%66) : (!s32i) -> () loc(#loc96)
    cir.br ^bb17 loc(#loc92)
  ^bb16:  // pred: ^bb14
    %67 = cir.get_global @".str" : !cir.ptr<!cir.array<!s8i x 54>> loc(#loc62)
    %68 = cir.cast(array_to_ptrdecay, %67 : !cir.ptr<!cir.array<!s8i x 54>>), !cir.ptr<!s8i> loc(#loc62)
    cir.call @printLine(%68) : (!cir.ptr<!s8i>) -> () loc(#loc97)
    cir.br ^bb17 loc(#loc82)
  ^bb17:  // 2 preds: ^bb15, ^bb16
    cir.br ^bb18 loc(#loc82)
  ^bb18:  // pred: ^bb17
    cir.br ^bb19 loc(#loc80)
  ^bb19:  // pred: ^bb18
    cir.return loc(#loc64)
  } loc(#loc124)
} loc(#loc)
#loc = loc("/home/ladisgin/git_proj/juliet-c/testcases/CWE190_Integer_Overflow/s04/CWE190_Integer_Overflow__int_rand_square_34.c":0:0)
#loc1 = loc("/usr/include/stdlib.h":573:1)
#loc2 = loc("/usr/include/stdlib.h":573:24)
#loc3 = loc("../../../testcasesupport/std_testcase_io.h":18:1)
#loc4 = loc("../../../testcasesupport/std_testcase_io.h":18:33)
#loc5 = loc("CWE190_Integer_Overflow__int_rand_square_34.c":30:1)
#loc6 = loc("CWE190_Integer_Overflow__int_rand_square_34.c":47:1)
#loc7 = loc("CWE190_Integer_Overflow__int_rand_square_34.c":40:9)
#loc8 = loc("CWE190_Integer_Overflow__int_rand_square_34.c":40:28)
#loc9 = loc("CWE190_Integer_Overflow__int_rand_square_34.c":43:13)
#loc10 = loc("CWE190_Integer_Overflow__int_rand_square_34.c":43:33)
#loc11 = loc("CWE190_Integer_Overflow__int_rand_square_34.c":32:5)
#loc12 = loc("CWE190_Integer_Overflow__int_rand_square_34.c":32:9)
#loc13 = loc("CWE190_Integer_Overflow__int_rand_square_34.c":33:5)
#loc14 = loc("CWE190_Integer_Overflow__int_rand_square_34.c":33:59)
#loc15 = loc("CWE190_Integer_Overflow__int_rand_square_34.c":35:12)
#loc16 = loc("CWE190_Integer_Overflow__int_rand_square_34.c":35:5)
#loc18 = loc("CWE190_Integer_Overflow__int_rand_square_34.c":37:5)
#loc19 = loc("CWE190_Integer_Overflow__int_rand_square_34.c":38:26)
#loc20 = loc("CWE190_Integer_Overflow__int_rand_square_34.c":24:9)
#loc21 = loc("CWE190_Integer_Overflow__int_rand_square_34.c":38:5)
#loc22 = loc("CWE190_Integer_Overflow__int_rand_square_34.c":39:5)
#loc23 = loc("CWE190_Integer_Overflow__int_rand_square_34.c":46:5)
#loc24 = loc("CWE190_Integer_Overflow__int_rand_square_34.c":25:9)
#loc25 = loc("CWE190_Integer_Overflow__int_rand_square_34.c":41:9)
#loc26 = loc("CWE190_Integer_Overflow__int_rand_square_34.c":45:9)
#loc27 = loc("CWE190_Integer_Overflow__int_rand_square_34.c":43:26)
#loc28 = loc("CWE190_Integer_Overflow__int_rand_square_34.c":44:26)
#loc29 = loc("CWE190_Integer_Overflow__int_rand_square_34.c":44:13)
#loc30 = loc("CWE190_Integer_Overflow__int_rand_square_34.c":98:1)
#loc31 = loc("CWE190_Integer_Overflow__int_rand_square_34.c":102:1)
#loc32 = loc("CWE190_Integer_Overflow__int_rand_square_34.c":100:5)
#loc33 = loc("CWE190_Integer_Overflow__int_rand_square_34.c":100:13)
#loc34 = loc("CWE190_Integer_Overflow__int_rand_square_34.c":101:5)
#loc35 = loc("CWE190_Integer_Overflow__int_rand_square_34.c":101:13)
#loc36 = loc("CWE190_Integer_Overflow__int_rand_square_34.c":54:1)
#loc37 = loc("CWE190_Integer_Overflow__int_rand_square_34.c":71:1)
#loc38 = loc("CWE190_Integer_Overflow__int_rand_square_34.c":64:9)
#loc39 = loc("CWE190_Integer_Overflow__int_rand_square_34.c":64:28)
#loc40 = loc("CWE190_Integer_Overflow__int_rand_square_34.c":67:13)
#loc41 = loc("CWE190_Integer_Overflow__int_rand_square_34.c":67:33)
#loc42 = loc("CWE190_Integer_Overflow__int_rand_square_34.c":56:5)
#loc43 = loc("CWE190_Integer_Overflow__int_rand_square_34.c":56:9)
#loc44 = loc("CWE190_Integer_Overflow__int_rand_square_34.c":57:5)
#loc45 = loc("CWE190_Integer_Overflow__int_rand_square_34.c":57:59)
#loc46 = loc("CWE190_Integer_Overflow__int_rand_square_34.c":59:12)
#loc47 = loc("CWE190_Integer_Overflow__int_rand_square_34.c":59:5)
#loc48 = loc("CWE190_Integer_Overflow__int_rand_square_34.c":61:12)
#loc49 = loc("CWE190_Integer_Overflow__int_rand_square_34.c":61:5)
#loc50 = loc("CWE190_Integer_Overflow__int_rand_square_34.c":62:26)
#loc51 = loc("CWE190_Integer_Overflow__int_rand_square_34.c":62:5)
#loc52 = loc("CWE190_Integer_Overflow__int_rand_square_34.c":63:5)
#loc53 = loc("CWE190_Integer_Overflow__int_rand_square_34.c":70:5)
#loc54 = loc("CWE190_Integer_Overflow__int_rand_square_34.c":65:9)
#loc55 = loc("CWE190_Integer_Overflow__int_rand_square_34.c":69:9)
#loc56 = loc("CWE190_Integer_Overflow__int_rand_square_34.c":67:26)
#loc57 = loc("CWE190_Integer_Overflow__int_rand_square_34.c":68:26)
#loc58 = loc("CWE190_Integer_Overflow__int_rand_square_34.c":68:13)
#loc59 = loc("/usr/include/bits/mathcalls.h":158:1)
#loc60 = loc("../../../testcasesupport/std_testcase_io.h":14:1)
#loc61 = loc("../../../testcasesupport/std_testcase_io.h":14:33)
#loc62 = loc("CWE190_Integer_Overflow__int_rand_square_34.c":93:23)
#loc63 = loc("CWE190_Integer_Overflow__int_rand_square_34.c":74:1)
#loc64 = loc("CWE190_Integer_Overflow__int_rand_square_34.c":96:1)
#loc65 = loc("CWE190_Integer_Overflow__int_rand_square_34.c":84:9)
#loc66 = loc("CWE190_Integer_Overflow__int_rand_square_34.c":84:28)
#loc67 = loc("CWE190_Integer_Overflow__int_rand_square_34.c":88:13)
#loc68 = loc("CWE190_Integer_Overflow__int_rand_square_34.c":88:33)
#loc69 = loc("CWE190_Integer_Overflow__int_rand_square_34.c":76:5)
#loc70 = loc("CWE190_Integer_Overflow__int_rand_square_34.c":76:9)
#loc71 = loc("CWE190_Integer_Overflow__int_rand_square_34.c":77:5)
#loc72 = loc("CWE190_Integer_Overflow__int_rand_square_34.c":77:59)
#loc73 = loc("CWE190_Integer_Overflow__int_rand_square_34.c":79:12)
#loc74 = loc("CWE190_Integer_Overflow__int_rand_square_34.c":79:5)
#loc76 = loc("CWE190_Integer_Overflow__int_rand_square_34.c":81:5)
#loc77 = loc("CWE190_Integer_Overflow__int_rand_square_34.c":82:26)
#loc78 = loc("CWE190_Integer_Overflow__int_rand_square_34.c":82:5)
#loc79 = loc("CWE190_Integer_Overflow__int_rand_square_34.c":83:5)
#loc80 = loc("CWE190_Integer_Overflow__int_rand_square_34.c":95:5)
#loc81 = loc("CWE190_Integer_Overflow__int_rand_square_34.c":86:9)
#loc82 = loc("CWE190_Integer_Overflow__int_rand_square_34.c":94:9)
#loc83 = loc("CWE190_Integer_Overflow__int_rand_square_34.c":86:13)
#loc84 = loc("CWE190_Integer_Overflow__int_rand_square_34.c":86:20)
#loc86 = loc("CWE190_Integer_Overflow__int_rand_square_34.c":86:35)
#loc87 = loc("CWE190_Integer_Overflow__int_rand_square_34.c":86:31)
#loc88 = loc("CWE190_Integer_Overflow__int_rand_square_34.c":86:49)
#loc89 = loc("CWE190_Integer_Overflow__int_rand_square_34.c":86:62)
#loc90 = loc("CWE190_Integer_Overflow__int_rand_square_34.c":86:69)
#loc91 = loc("CWE190_Integer_Overflow__int_rand_square_34.c":87:9)
#loc92 = loc("CWE190_Integer_Overflow__int_rand_square_34.c":90:9)
#loc93 = loc("CWE190_Integer_Overflow__int_rand_square_34.c":92:9)
#loc94 = loc("CWE190_Integer_Overflow__int_rand_square_34.c":88:26)
#loc95 = loc("CWE190_Integer_Overflow__int_rand_square_34.c":89:26)
#loc96 = loc("CWE190_Integer_Overflow__int_rand_square_34.c":89:13)
#loc97 = loc("CWE190_Integer_Overflow__int_rand_square_34.c":93:13)
#loc98 = loc(fused[#loc1, #loc2])
#loc99 = loc(fused[#loc3, #loc4])
#loc100 = loc(fused[#loc5, #loc6])
#loc101 = loc(fused[#loc7, #loc8])
#loc102 = loc(fused[#loc9, #loc10])
#loc103 = loc(fused[#loc11, #loc12])
#loc104 = loc(fused[#loc13, #loc14])
#loc105 = loc(fused[#loc16, #loc15])
#loc106 = loc(fused[#loc18, #loc17])
#loc107 = loc(fused[#loc21, #loc19])
#loc108 = loc(fused[#loc22, #loc23])
#loc109 = loc(fused[#loc25, #loc26])
#loc110 = loc(fused[#loc30, #loc31])
#loc111 = loc(fused[#loc32, #loc33])
#loc112 = loc(fused[#loc34, #loc35])
#loc113 = loc(fused[#loc36, #loc37])
#loc114 = loc(fused[#loc38, #loc39])
#loc115 = loc(fused[#loc40, #loc41])
#loc116 = loc(fused[#loc42, #loc43])
#loc117 = loc(fused[#loc44, #loc45])
#loc118 = loc(fused[#loc47, #loc46])
#loc119 = loc(fused[#loc49, #loc48])
#loc120 = loc(fused[#loc51, #loc50])
#loc121 = loc(fused[#loc52, #loc53])
#loc122 = loc(fused[#loc54, #loc55])
#loc123 = loc(fused[#loc60, #loc61])
#loc124 = loc(fused[#loc63, #loc64])
#loc125 = loc(fused[#loc65, #loc66])
#loc126 = loc(fused[#loc67, #loc68])
#loc127 = loc(fused[#loc69, #loc70])
#loc128 = loc(fused[#loc71, #loc72])
#loc129 = loc(fused[#loc74, #loc73])
#loc130 = loc(fused[#loc76, #loc75])
#loc131 = loc(fused[#loc78, #loc77])
#loc132 = loc(fused[#loc79, #loc80])
#loc133 = loc(fused[#loc81, #loc82])
#loc134 = loc(fused[#loc83, #loc84])
#loc135 = loc(fused[#loc87, #loc90])
#loc136 = loc(fused[#loc91, #loc92, #loc93, #loc82])
