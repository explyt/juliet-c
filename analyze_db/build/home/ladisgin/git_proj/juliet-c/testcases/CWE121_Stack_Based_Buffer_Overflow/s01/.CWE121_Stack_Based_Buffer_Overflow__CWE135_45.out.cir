!s32i = !cir.int<s, 32>
!s64i = !cir.int<s, 64>
!s8i = !cir.int<s, 8>
!u32i = !cir.int<u, 32>
!u64i = !cir.int<u, 64>
!u8i = !cir.int<u, 8>
!void = !cir.void
#fn_attr = #cir<extra({inline = #cir.inline<no>, nothrow = #cir.nothrow, optnone = #cir.optnone})>
#fn_attr1 = #cir<extra({nothrow = #cir.nothrow})>
#loc33 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE135_45.c":117:10)
#loc34 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE135_45.c":117:14)
#loc35 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE135_45.c":117:20)
#loc36 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE135_45.c":117:32)
#loc154 = loc(fused[#loc33, #loc34])
#loc155 = loc(fused[#loc35, #loc36])
module @"/home/ladisgin/git_proj/juliet-c/testcases/CWE121_Stack_Based_Buffer_Overflow/s01/CWE121_Stack_Based_Buffer_Overflow__CWE135_45.c" attributes {cir.lang = #cir.lang<c>, cir.sob = #cir.signed_overflow_behavior<undefined>, cir.triple = "x86_64-unknown-linux-gnu", dlti.dl_spec = #dlti.dl_spec<i128 = dense<128> : vector<2xi64>, f80 = dense<128> : vector<2xi64>, !llvm.ptr<271> = dense<32> : vector<4xi64>, !llvm.ptr<272> = dense<64> : vector<4xi64>, i64 = dense<64> : vector<2xi64>, i32 = dense<32> : vector<2xi64>, f16 = dense<16> : vector<2xi64>, f64 = dense<64> : vector<2xi64>, f128 = dense<128> : vector<2xi64>, !llvm.ptr = dense<64> : vector<4xi64>, i1 = dense<8> : vector<2xi64>, !llvm.ptr<270> = dense<32> : vector<4xi64>, i8 = dense<8> : vector<2xi64>, i16 = dense<16> : vector<2xi64>, "dlti.stack_alignment" = 128 : i64, "dlti.endianness" = "little">} {
  cir.global "private" constant cir_private dsolocal @".str" = #cir.const_array<[#cir.int<65> : !s32i, #cir.int<65> : !s32i, #cir.int<65> : !s32i, #cir.int<65> : !s32i, #cir.int<65> : !s32i, #cir.int<65> : !s32i, #cir.int<65> : !s32i, #cir.int<65> : !s32i, #cir.int<65> : !s32i, #cir.int<65> : !s32i, #cir.int<65> : !s32i, #cir.int<65> : !s32i, #cir.int<65> : !s32i, #cir.int<65> : !s32i, #cir.int<65> : !s32i, #cir.int<65> : !s32i, #cir.int<65> : !s32i, #cir.int<65> : !s32i, #cir.int<65> : !s32i, #cir.int<65> : !s32i, #cir.int<65> : !s32i, #cir.int<65> : !s32i, #cir.int<65> : !s32i, #cir.int<65> : !s32i, #cir.int<65> : !s32i, #cir.int<65> : !s32i, #cir.int<65> : !s32i, #cir.int<65> : !s32i, #cir.int<65> : !s32i, #cir.int<65> : !s32i, #cir.int<65> : !s32i, #cir.int<65> : !s32i, #cir.int<65> : !s32i, #cir.int<65> : !s32i, #cir.int<65> : !s32i, #cir.int<65> : !s32i, #cir.int<65> : !s32i, #cir.int<65> : !s32i, #cir.int<65> : !s32i, #cir.int<65> : !s32i, #cir.int<65> : !s32i, #cir.int<65> : !s32i, #cir.int<0> : !s32i]> : !cir.array<!s32i x 43> {alignment = 4 : i64} loc(#loc1)
  cir.global "private" internal dsolocal @CWE121_Stack_Based_Buffer_Overflow__CWE135_45_badData = #cir.ptr<null> : !cir.ptr<!void> {alignment = 8 : i64} loc(#loc140)
  cir.func no_proto @CWE121_Stack_Based_Buffer_Overflow__CWE135_45_bad() extra(#fn_attr) {
    %0 = cir.alloca !cir.ptr<!void>, !cir.ptr<!cir.ptr<!void>>, ["data"] {alignment = 8 : i64} loc(#loc142)
    %1 = cir.const #cir.ptr<null> : !cir.ptr<!void> loc(#loc8)
    cir.store %1, %0 : !cir.ptr<!void>, !cir.ptr<!cir.ptr<!void>> loc(#loc143)
    %2 = cir.get_global @".str" : !cir.ptr<!cir.array<!s32i x 43>> loc(#loc1)
    %3 = cir.cast(array_to_ptrdecay, %2 : !cir.ptr<!cir.array<!s32i x 43>>), !cir.ptr<!s32i> loc(#loc1)
    %4 = cir.cast(bitcast, %3 : !cir.ptr<!s32i>), !cir.ptr<!void> loc(#loc1)
    cir.store %4, %0 : !cir.ptr<!void>, !cir.ptr<!cir.ptr<!void>> loc(#loc144)
    %5 = cir.load %0 : !cir.ptr<!cir.ptr<!void>>, !cir.ptr<!void> loc(#loc11)
    %6 = cir.get_global @CWE121_Stack_Based_Buffer_Overflow__CWE135_45_badData : !cir.ptr<!cir.ptr<!void>> loc(#loc140)
    cir.store %5, %6 : !cir.ptr<!void>, !cir.ptr<!cir.ptr<!void>> loc(#loc145)
    %7 = cir.get_global @badSink : !cir.ptr<!cir.func<!void ()>> loc(#loc146)
    cir.call %7() : (!cir.ptr<!cir.func<!void ()>>) -> () loc(#loc13)
    cir.return loc(#loc5)
  } loc(#loc141)
  cir.func no_proto @CWE121_Stack_Based_Buffer_Overflow__CWE135_45_good() extra(#fn_attr) {
    %0 = cir.get_global @goodG2B : !cir.ptr<!cir.func<!void ()>> loc(#loc148)
    cir.call %0() : (!cir.ptr<!cir.func<!void ()>>) -> () loc(#loc17)
    %1 = cir.get_global @goodB2G : !cir.ptr<!cir.func<!void ()>> loc(#loc149)
    cir.call %1() : (!cir.ptr<!cir.func<!void ()>>) -> () loc(#loc19)
    cir.return loc(#loc16)
  } loc(#loc147)
  cir.func private @srand(!u32i) extra(#fn_attr1) loc(#loc150)
  cir.func private @time(!cir.ptr<!s64i>) -> !s64i extra(#fn_attr1) loc(#loc151)
  cir.func private @printLine(!cir.ptr<!s8i>) loc(#loc152)
  cir.global "private" constant cir_private dsolocal @".str.1" = #cir.const_array<"Calling good()...\00" : !cir.array<!s8i x 18>> : !cir.array<!s8i x 18> {alignment = 1 : i64} loc(#loc27)
  cir.global "private" constant cir_private dsolocal @".str.2" = #cir.const_array<"Finished good()\00" : !cir.array<!s8i x 16>> : !cir.array<!s8i x 16> {alignment = 1 : i64} loc(#loc28)
  cir.global "private" constant cir_private dsolocal @".str.3" = #cir.const_array<"Calling bad()...\00" : !cir.array<!s8i x 17>> : !cir.array<!s8i x 17> {alignment = 1 : i64} loc(#loc29)
  cir.global "private" constant cir_private dsolocal @".str.4" = #cir.const_array<"Finished bad()\00" : !cir.array<!s8i x 15>> : !cir.array<!s8i x 15> {alignment = 1 : i64} loc(#loc30)
  cir.func @main(%arg0: !s32i loc(fused[#loc33, #loc34]), %arg1: !cir.ptr<!cir.ptr<!s8i>> loc(fused[#loc35, #loc36])) -> !s32i extra(#fn_attr) {
    %0 = cir.alloca !s32i, !cir.ptr<!s32i>, ["argc", init] {alignment = 4 : i64} loc(#loc154)
    %1 = cir.alloca !cir.ptr<!cir.ptr<!s8i>>, !cir.ptr<!cir.ptr<!cir.ptr<!s8i>>>, ["argv", init] {alignment = 8 : i64} loc(#loc155)
    %2 = cir.alloca !s32i, !cir.ptr<!s32i>, ["__retval"] {alignment = 4 : i64} loc(#loc32)
    cir.store %arg0, %0 : !s32i, !cir.ptr<!s32i> loc(#loc37)
    cir.store %arg1, %1 : !cir.ptr<!cir.ptr<!s8i>>, !cir.ptr<!cir.ptr<!cir.ptr<!s8i>>> loc(#loc37)
    %3 = cir.const #cir.ptr<null> : !cir.ptr<!s64i> loc(#loc38)
    %4 = cir.call @time(%3) : (!cir.ptr<!s64i>) -> !s64i extra(#fn_attr1) loc(#loc39)
    %5 = cir.cast(integral, %4 : !s64i), !u32i loc(#loc39)
    cir.call @srand(%5) : (!u32i) -> () extra(#fn_attr1) loc(#loc40)
    %6 = cir.get_global @".str.1" : !cir.ptr<!cir.array<!s8i x 18>> loc(#loc27)
    %7 = cir.cast(array_to_ptrdecay, %6 : !cir.ptr<!cir.array<!s8i x 18>>), !cir.ptr<!s8i> loc(#loc27)
    cir.call @printLine(%7) : (!cir.ptr<!s8i>) -> () loc(#loc41)
    %8 = cir.get_global @CWE121_Stack_Based_Buffer_Overflow__CWE135_45_good : !cir.ptr<!cir.func<!void ()>> loc(#loc156)
    cir.call @CWE121_Stack_Based_Buffer_Overflow__CWE135_45_good() : () -> () loc(#loc42)
    %9 = cir.get_global @".str.2" : !cir.ptr<!cir.array<!s8i x 16>> loc(#loc28)
    %10 = cir.cast(array_to_ptrdecay, %9 : !cir.ptr<!cir.array<!s8i x 16>>), !cir.ptr<!s8i> loc(#loc28)
    cir.call @printLine(%10) : (!cir.ptr<!s8i>) -> () loc(#loc44)
    %11 = cir.get_global @".str.3" : !cir.ptr<!cir.array<!s8i x 17>> loc(#loc29)
    %12 = cir.cast(array_to_ptrdecay, %11 : !cir.ptr<!cir.array<!s8i x 17>>), !cir.ptr<!s8i> loc(#loc29)
    cir.call @printLine(%12) : (!cir.ptr<!s8i>) -> () loc(#loc45)
    %13 = cir.get_global @CWE121_Stack_Based_Buffer_Overflow__CWE135_45_bad : !cir.ptr<!cir.func<!void ()>> loc(#loc157)
    cir.call @CWE121_Stack_Based_Buffer_Overflow__CWE135_45_bad() : () -> () loc(#loc46)
    %14 = cir.get_global @".str.4" : !cir.ptr<!cir.array<!s8i x 15>> loc(#loc30)
    %15 = cir.cast(array_to_ptrdecay, %14 : !cir.ptr<!cir.array<!s8i x 15>>), !cir.ptr<!s8i> loc(#loc30)
    cir.call @printLine(%15) : (!cir.ptr<!s8i>) -> () loc(#loc48)
    %16 = cir.const #cir.int<0> : !s32i loc(#loc49)
    cir.store %16, %2 : !s32i, !cir.ptr<!s32i> loc(#loc158)
    %17 = cir.load %2 : !cir.ptr<!s32i>, !s32i loc(#loc158)
    cir.return %17 : !s32i loc(#loc158)
  } loc(#loc153)
  cir.func private @strlen(!cir.ptr<!s8i>) -> !u64i extra(#fn_attr1) loc(#loc159)
  cir.func private @wcscpy(!cir.ptr<!s32i>, !cir.ptr<!s32i>) -> !cir.ptr<!s32i> extra(#fn_attr1) loc(#loc160)
  cir.func no_proto internal private @badSink() extra(#fn_attr) {
    %0 = cir.alloca !cir.ptr<!void>, !cir.ptr<!cir.ptr<!void>>, ["data", init] {alignment = 8 : i64} loc(#loc162)
    %1 = cir.get_global @CWE121_Stack_Based_Buffer_Overflow__CWE135_45_badData : !cir.ptr<!cir.ptr<!void>> loc(#loc140)
    %2 = cir.load %1 : !cir.ptr<!cir.ptr<!void>>, !cir.ptr<!void> loc(#loc58)
    cir.store %2, %0 : !cir.ptr<!void>, !cir.ptr<!cir.ptr<!void>> loc(#loc162)
    cir.scope {
      %3 = cir.alloca !u64i, !cir.ptr<!u64i>, ["dataLen", init] {alignment = 8 : i64} loc(#loc164)
      %4 = cir.alloca !cir.ptr<!void>, !cir.ptr<!cir.ptr<!void>>, ["dest", init] {alignment = 8 : i64} loc(#loc165)
      %5 = cir.get_global @strlen : !cir.ptr<!cir.func<!u64i (!cir.ptr<!s8i>)>> loc(#loc65)
      %6 = cir.load %0 : !cir.ptr<!cir.ptr<!void>>, !cir.ptr<!void> loc(#loc66)
      %7 = cir.cast(bitcast, %6 : !cir.ptr<!void>), !cir.ptr<!s8i> loc(#loc66)
      %8 = cir.call @strlen(%7) : (!cir.ptr<!s8i>) -> !u64i extra(#fn_attr1) loc(#loc65)
      cir.store %8, %3 : !u64i, !cir.ptr<!u64i> loc(#loc164)
      %9 = cir.load %3 : !cir.ptr<!u64i>, !u64i loc(#loc64)
      %10 = cir.const #cir.int<1> : !s32i loc(#loc64)
      %11 = cir.cast(integral, %10 : !s32i), !u64i loc(#loc64)
      %12 = cir.binop(add, %9, %11) : !u64i loc(#loc64)
      %13 = cir.const #cir.int<4> : !u64i loc(#loc64)
      %14 = cir.binop(mul, %12, %13) : !u64i loc(#loc64)
      %15 = cir.alloca !u8i, !cir.ptr<!u8i>, %14 : !u64i, ["bi_alloca"] {alignment = 16 : i64} loc(#loc64)
      %16 = cir.cast(bitcast, %15 : !cir.ptr<!u8i>), !cir.ptr<!void> loc(#loc64)
      cir.store %16, %4 : !cir.ptr<!void>, !cir.ptr<!cir.ptr<!void>> loc(#loc165)
      %17 = cir.load %4 : !cir.ptr<!cir.ptr<!void>>, !cir.ptr<!void> loc(#loc67)
      %18 = cir.cast(bitcast, %17 : !cir.ptr<!void>), !cir.ptr<!s32i> loc(#loc67)
      %19 = cir.load %0 : !cir.ptr<!cir.ptr<!void>>, !cir.ptr<!void> loc(#loc68)
      %20 = cir.cast(bitcast, %19 : !cir.ptr<!void>), !cir.ptr<!s32i> loc(#loc68)
      %21 = cir.call @wcscpy(%18, %20) : (!cir.ptr<!s32i>, !cir.ptr<!s32i>) -> !cir.ptr<!s32i> extra(#fn_attr1) loc(#loc69)
      %22 = cir.load %4 : !cir.ptr<!cir.ptr<!void>>, !cir.ptr<!void> loc(#loc70)
      %23 = cir.cast(bitcast, %22 : !cir.ptr<!void>), !cir.ptr<!s8i> loc(#loc70)
      cir.call @printLine(%23) : (!cir.ptr<!s8i>) -> () loc(#loc71)
    } loc(#loc163)
    cir.return loc(#loc56)
  } loc(#loc161)
  cir.global "private" constant cir_private dsolocal @".str.5" = #cir.const_array<"AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA\00" : !cir.array<!s8i x 43>> : !cir.array<!s8i x 43> {alignment = 1 : i64} loc(#loc72)
  cir.global "private" internal dsolocal @CWE121_Stack_Based_Buffer_Overflow__CWE135_45_goodG2BData = #cir.ptr<null> : !cir.ptr<!void> {alignment = 8 : i64} loc(#loc166)
  cir.func no_proto internal private @goodG2B() extra(#fn_attr) {
    %0 = cir.alloca !cir.ptr<!void>, !cir.ptr<!cir.ptr<!void>>, ["data"] {alignment = 8 : i64} loc(#loc168)
    %1 = cir.const #cir.ptr<null> : !cir.ptr<!void> loc(#loc79)
    cir.store %1, %0 : !cir.ptr<!void>, !cir.ptr<!cir.ptr<!void>> loc(#loc169)
    %2 = cir.get_global @".str.5" : !cir.ptr<!cir.array<!s8i x 43>> loc(#loc72)
    %3 = cir.cast(array_to_ptrdecay, %2 : !cir.ptr<!cir.array<!s8i x 43>>), !cir.ptr<!s8i> loc(#loc72)
    %4 = cir.cast(bitcast, %3 : !cir.ptr<!s8i>), !cir.ptr<!void> loc(#loc72)
    cir.store %4, %0 : !cir.ptr<!void>, !cir.ptr<!cir.ptr<!void>> loc(#loc170)
    %5 = cir.load %0 : !cir.ptr<!cir.ptr<!void>>, !cir.ptr<!void> loc(#loc82)
    %6 = cir.get_global @CWE121_Stack_Based_Buffer_Overflow__CWE135_45_goodG2BData : !cir.ptr<!cir.ptr<!void>> loc(#loc166)
    cir.store %5, %6 : !cir.ptr<!void>, !cir.ptr<!cir.ptr<!void>> loc(#loc171)
    %7 = cir.get_global @goodG2BSink : !cir.ptr<!cir.func<!void ()>> loc(#loc172)
    cir.call %7() : (!cir.ptr<!cir.func<!void ()>>) -> () loc(#loc84)
    cir.return loc(#loc76)
  } loc(#loc167)
  cir.func private @strcpy(!cir.ptr<!s8i>, !cir.ptr<!s8i>) -> !cir.ptr<!s8i> extra(#fn_attr1) loc(#loc173)
  cir.func no_proto internal private @goodG2BSink() extra(#fn_attr) {
    %0 = cir.alloca !cir.ptr<!void>, !cir.ptr<!cir.ptr<!void>>, ["data", init] {alignment = 8 : i64} loc(#loc175)
    %1 = cir.get_global @CWE121_Stack_Based_Buffer_Overflow__CWE135_45_goodG2BData : !cir.ptr<!cir.ptr<!void>> loc(#loc166)
    %2 = cir.load %1 : !cir.ptr<!cir.ptr<!void>>, !cir.ptr<!void> loc(#loc91)
    cir.store %2, %0 : !cir.ptr<!void>, !cir.ptr<!cir.ptr<!void>> loc(#loc175)
    cir.scope {
      %3 = cir.alloca !u64i, !cir.ptr<!u64i>, ["dataLen", init] {alignment = 8 : i64} loc(#loc177)
      %4 = cir.alloca !cir.ptr<!void>, !cir.ptr<!cir.ptr<!void>>, ["dest", init] {alignment = 8 : i64} loc(#loc178)
      %5 = cir.get_global @strlen : !cir.ptr<!cir.func<!u64i (!cir.ptr<!s8i>)>> loc(#loc98)
      %6 = cir.load %0 : !cir.ptr<!cir.ptr<!void>>, !cir.ptr<!void> loc(#loc99)
      %7 = cir.cast(bitcast, %6 : !cir.ptr<!void>), !cir.ptr<!s8i> loc(#loc99)
      %8 = cir.call @strlen(%7) : (!cir.ptr<!s8i>) -> !u64i extra(#fn_attr1) loc(#loc98)
      cir.store %8, %3 : !u64i, !cir.ptr<!u64i> loc(#loc177)
      %9 = cir.load %3 : !cir.ptr<!u64i>, !u64i loc(#loc97)
      %10 = cir.const #cir.int<1> : !s32i loc(#loc97)
      %11 = cir.cast(integral, %10 : !s32i), !u64i loc(#loc97)
      %12 = cir.binop(add, %9, %11) : !u64i loc(#loc97)
      %13 = cir.const #cir.int<1> : !s32i loc(#loc97)
      %14 = cir.cast(integral, %13 : !s32i), !u64i loc(#loc97)
      %15 = cir.binop(mul, %12, %14) : !u64i loc(#loc97)
      %16 = cir.alloca !u8i, !cir.ptr<!u8i>, %15 : !u64i, ["bi_alloca"] {alignment = 16 : i64} loc(#loc97)
      %17 = cir.cast(bitcast, %16 : !cir.ptr<!u8i>), !cir.ptr<!void> loc(#loc97)
      cir.store %17, %4 : !cir.ptr<!void>, !cir.ptr<!cir.ptr<!void>> loc(#loc178)
      %18 = cir.get_global @strcpy : !cir.ptr<!cir.func<!cir.ptr<!s8i> (!cir.ptr<!s8i>, !cir.ptr<!s8i>)>> loc(#loc100)
      %19 = cir.load %4 : !cir.ptr<!cir.ptr<!void>>, !cir.ptr<!void> loc(#loc101)
      %20 = cir.cast(bitcast, %19 : !cir.ptr<!void>), !cir.ptr<!s8i> loc(#loc101)
      %21 = cir.load %0 : !cir.ptr<!cir.ptr<!void>>, !cir.ptr<!void> loc(#loc102)
      %22 = cir.cast(bitcast, %21 : !cir.ptr<!void>), !cir.ptr<!s8i> loc(#loc102)
      %23 = cir.call @strcpy(%20, %22) : (!cir.ptr<!s8i>, !cir.ptr<!s8i>) -> !cir.ptr<!s8i> extra(#fn_attr1) loc(#loc100)
      %24 = cir.load %4 : !cir.ptr<!cir.ptr<!void>>, !cir.ptr<!void> loc(#loc103)
      %25 = cir.cast(bitcast, %24 : !cir.ptr<!void>), !cir.ptr<!s8i> loc(#loc103)
      cir.call @printLine(%25) : (!cir.ptr<!s8i>) -> () loc(#loc104)
    } loc(#loc176)
    cir.return loc(#loc89)
  } loc(#loc174)
  cir.global "private" internal dsolocal @CWE121_Stack_Based_Buffer_Overflow__CWE135_45_goodB2GData = #cir.ptr<null> : !cir.ptr<!void> {alignment = 8 : i64} loc(#loc179)
  cir.func no_proto internal private @goodB2G() extra(#fn_attr) {
    %0 = cir.alloca !cir.ptr<!void>, !cir.ptr<!cir.ptr<!void>>, ["data"] {alignment = 8 : i64} loc(#loc181)
    %1 = cir.const #cir.ptr<null> : !cir.ptr<!void> loc(#loc111)
    cir.store %1, %0 : !cir.ptr<!void>, !cir.ptr<!cir.ptr<!void>> loc(#loc182)
    %2 = cir.get_global @".str" : !cir.ptr<!cir.array<!s32i x 43>> loc(#loc113)
    %3 = cir.cast(array_to_ptrdecay, %2 : !cir.ptr<!cir.array<!s32i x 43>>), !cir.ptr<!s32i> loc(#loc113)
    %4 = cir.cast(bitcast, %3 : !cir.ptr<!s32i>), !cir.ptr<!void> loc(#loc113)
    cir.store %4, %0 : !cir.ptr<!void>, !cir.ptr<!cir.ptr<!void>> loc(#loc183)
    %5 = cir.load %0 : !cir.ptr<!cir.ptr<!void>>, !cir.ptr<!void> loc(#loc115)
    %6 = cir.get_global @CWE121_Stack_Based_Buffer_Overflow__CWE135_45_goodB2GData : !cir.ptr<!cir.ptr<!void>> loc(#loc179)
    cir.store %5, %6 : !cir.ptr<!void>, !cir.ptr<!cir.ptr<!void>> loc(#loc184)
    %7 = cir.get_global @goodB2GSink : !cir.ptr<!cir.func<!void ()>> loc(#loc185)
    cir.call %7() : (!cir.ptr<!cir.func<!void ()>>) -> () loc(#loc117)
    cir.return loc(#loc108)
  } loc(#loc180)
  cir.func private @wcslen(!cir.ptr<!s32i>) -> !u64i extra(#fn_attr1) loc(#loc186)
  cir.func private @printWLine(!cir.ptr<!s32i>) loc(#loc187)
  cir.func no_proto internal private @goodB2GSink() extra(#fn_attr) {
    %0 = cir.alloca !cir.ptr<!void>, !cir.ptr<!cir.ptr<!void>>, ["data", init] {alignment = 8 : i64} loc(#loc189)
    %1 = cir.get_global @CWE121_Stack_Based_Buffer_Overflow__CWE135_45_goodB2GData : !cir.ptr<!cir.ptr<!void>> loc(#loc179)
    %2 = cir.load %1 : !cir.ptr<!cir.ptr<!void>>, !cir.ptr<!void> loc(#loc126)
    cir.store %2, %0 : !cir.ptr<!void>, !cir.ptr<!cir.ptr<!void>> loc(#loc189)
    cir.scope {
      %3 = cir.alloca !u64i, !cir.ptr<!u64i>, ["dataLen", init] {alignment = 8 : i64} loc(#loc191)
      %4 = cir.alloca !cir.ptr<!void>, !cir.ptr<!cir.ptr<!void>>, ["dest", init] {alignment = 8 : i64} loc(#loc192)
      %5 = cir.get_global @wcslen : !cir.ptr<!cir.func<!u64i (!cir.ptr<!s32i>)>> loc(#loc133)
      %6 = cir.load %0 : !cir.ptr<!cir.ptr<!void>>, !cir.ptr<!void> loc(#loc134)
      %7 = cir.cast(bitcast, %6 : !cir.ptr<!void>), !cir.ptr<!s32i> loc(#loc134)
      %8 = cir.call @wcslen(%7) : (!cir.ptr<!s32i>) -> !u64i extra(#fn_attr1) loc(#loc133)
      cir.store %8, %3 : !u64i, !cir.ptr<!u64i> loc(#loc191)
      %9 = cir.load %3 : !cir.ptr<!u64i>, !u64i loc(#loc132)
      %10 = cir.const #cir.int<1> : !s32i loc(#loc132)
      %11 = cir.cast(integral, %10 : !s32i), !u64i loc(#loc132)
      %12 = cir.binop(add, %9, %11) : !u64i loc(#loc132)
      %13 = cir.const #cir.int<4> : !u64i loc(#loc132)
      %14 = cir.binop(mul, %12, %13) : !u64i loc(#loc132)
      %15 = cir.alloca !u8i, !cir.ptr<!u8i>, %14 : !u64i, ["bi_alloca"] {alignment = 16 : i64} loc(#loc132)
      %16 = cir.cast(bitcast, %15 : !cir.ptr<!u8i>), !cir.ptr<!void> loc(#loc132)
      cir.store %16, %4 : !cir.ptr<!void>, !cir.ptr<!cir.ptr<!void>> loc(#loc192)
      %17 = cir.load %4 : !cir.ptr<!cir.ptr<!void>>, !cir.ptr<!void> loc(#loc135)
      %18 = cir.cast(bitcast, %17 : !cir.ptr<!void>), !cir.ptr<!s32i> loc(#loc135)
      %19 = cir.load %0 : !cir.ptr<!cir.ptr<!void>>, !cir.ptr<!void> loc(#loc136)
      %20 = cir.cast(bitcast, %19 : !cir.ptr<!void>), !cir.ptr<!s32i> loc(#loc136)
      %21 = cir.call @wcscpy(%18, %20) : (!cir.ptr<!s32i>, !cir.ptr<!s32i>) -> !cir.ptr<!s32i> extra(#fn_attr1) loc(#loc137)
      %22 = cir.load %4 : !cir.ptr<!cir.ptr<!void>>, !cir.ptr<!void> loc(#loc138)
      %23 = cir.cast(bitcast, %22 : !cir.ptr<!void>), !cir.ptr<!s32i> loc(#loc138)
      cir.call @printWLine(%23) : (!cir.ptr<!s32i>) -> () loc(#loc139)
    } loc(#loc190)
    cir.return loc(#loc124)
  } loc(#loc188)
} loc(#loc)
#loc = loc("/home/ladisgin/git_proj/juliet-c/testcases/CWE121_Stack_Based_Buffer_Overflow/s01/CWE121_Stack_Based_Buffer_Overflow__CWE135_45.c":0:0)
#loc1 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE135_45.c":48:20)
#loc2 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE135_45.c":25:1)
#loc3 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE135_45.c":25:15)
#loc4 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE135_45.c":43:1)
#loc5 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE135_45.c":51:1)
#loc6 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE135_45.c":45:5)
#loc7 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE135_45.c":45:12)
#loc8 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE135_45.c":46:12)
#loc9 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE135_45.c":46:5)
#loc10 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE135_45.c":48:5)
#loc11 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE135_45.c":49:61)
#loc12 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE135_45.c":49:5)
#loc13 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE135_45.c":50:5)
#loc14 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE135_45.c":50:13)
#loc15 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE135_45.c":103:1)
#loc16 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE135_45.c":107:1)
#loc17 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE135_45.c":105:5)
#loc18 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE135_45.c":105:13)
#loc19 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE135_45.c":106:5)
#loc20 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE135_45.c":106:13)
#loc21 = loc("/usr/include/stdlib.h":575:1)
#loc22 = loc("/usr/include/stdlib.h":575:41)
#loc23 = loc("/usr/include/time.h":76:1)
#loc24 = loc("/usr/include/time.h":76:38)
#loc25 = loc("../../../testcasesupport/std_testcase_io.h":14:1)
#loc26 = loc("../../../testcasesupport/std_testcase_io.h":14:33)
#loc27 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE135_45.c":122:15)
#loc28 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE135_45.c":124:15)
#loc29 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE135_45.c":127:15)
#loc30 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE135_45.c":129:15)
#loc31 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE135_45.c":117:1)
#loc32 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE135_45.c":132:1)
#loc37 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE135_45.c":118:1)
#loc38 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE135_45.c":120:27)
#loc39 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE135_45.c":120:22)
#loc40 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE135_45.c":120:5)
#loc41 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE135_45.c":122:5)
#loc42 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE135_45.c":123:5)
#loc43 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE135_45.c":123:56)
#loc44 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE135_45.c":124:5)
#loc45 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE135_45.c":127:5)
#loc46 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE135_45.c":128:5)
#loc47 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE135_45.c":128:55)
#loc48 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE135_45.c":129:5)
#loc49 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE135_45.c":131:12)
#loc50 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE135_45.c":131:5)
#loc51 = loc("/usr/include/string.h":407:1)
#loc52 = loc("/usr/include/string.h":408:33)
#loc53 = loc("/usr/include/wchar.h":98:1)
#loc54 = loc("/usr/include/wchar.h":100:14)
#loc55 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE135_45.c":31:1)
#loc56 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE135_45.c":41:1)
#loc57 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE135_45.c":33:5)
#loc58 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE135_45.c":33:19)
#loc59 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE135_45.c":34:5)
#loc60 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE135_45.c":40:5)
#loc61 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE135_45.c":36:9)
#loc62 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE135_45.c":36:45)
#loc63 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE135_45.c":37:9)
#loc64 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE135_45.c":37:31)
#loc65 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE135_45.c":36:26)
#loc66 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE135_45.c":36:41)
#loc67 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE135_45.c":38:22)
#loc68 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE135_45.c":38:28)
#loc69 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE135_45.c":38:15)
#loc70 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE135_45.c":39:27)
#loc71 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE135_45.c":39:9)
#loc72 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE135_45.c":75:20)
#loc73 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE135_45.c":26:1)
#loc74 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE135_45.c":26:15)
#loc75 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE135_45.c":70:1)
#loc76 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE135_45.c":78:1)
#loc77 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE135_45.c":72:5)
#loc78 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE135_45.c":72:12)
#loc79 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE135_45.c":73:12)
#loc80 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE135_45.c":73:5)
#loc81 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE135_45.c":75:5)
#loc82 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE135_45.c":76:65)
#loc83 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE135_45.c":76:5)
#loc84 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE135_45.c":77:5)
#loc85 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE135_45.c":77:17)
#loc86 = loc("/usr/include/string.h":141:1)
#loc87 = loc("/usr/include/string.h":142:14)
#loc88 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE135_45.c":58:1)
#loc89 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE135_45.c":68:1)
#loc90 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE135_45.c":60:5)
#loc91 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE135_45.c":60:19)
#loc92 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE135_45.c":61:5)
#loc93 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE135_45.c":67:5)
#loc94 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE135_45.c":63:9)
#loc95 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE135_45.c":63:45)
#loc96 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE135_45.c":64:9)
#loc97 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE135_45.c":64:31)
#loc98 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE135_45.c":63:26)
#loc99 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE135_45.c":63:41)
#loc100 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE135_45.c":65:15)
#loc101 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE135_45.c":65:22)
#loc102 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE135_45.c":65:28)
#loc103 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE135_45.c":66:27)
#loc104 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE135_45.c":66:9)
#loc105 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE135_45.c":27:1)
#loc106 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE135_45.c":27:15)
#loc107 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE135_45.c":93:1)
#loc108 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE135_45.c":101:1)
#loc109 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE135_45.c":95:5)
#loc110 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE135_45.c":95:12)
#loc111 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE135_45.c":96:12)
#loc112 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE135_45.c":96:5)
#loc113 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE135_45.c":98:20)
#loc114 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE135_45.c":98:5)
#loc115 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE135_45.c":99:65)
#loc116 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE135_45.c":99:5)
#loc117 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE135_45.c":100:5)
#loc118 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE135_45.c":100:17)
#loc119 = loc("/usr/include/wchar.h":247:1)
#loc120 = loc("/usr/include/wchar.h":247:51)
#loc121 = loc("../../../testcasesupport/std_testcase_io.h":16:1)
#loc122 = loc("../../../testcasesupport/std_testcase_io.h":16:37)
#loc123 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE135_45.c":81:1)
#loc124 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE135_45.c":91:1)
#loc125 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE135_45.c":83:5)
#loc126 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE135_45.c":83:19)
#loc127 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE135_45.c":84:5)
#loc128 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE135_45.c":90:5)
#loc129 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE135_45.c":86:9)
#loc130 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE135_45.c":86:48)
#loc131 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE135_45.c":87:9)
#loc132 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE135_45.c":87:31)
#loc133 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE135_45.c":86:26)
#loc134 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE135_45.c":86:44)
#loc135 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE135_45.c":88:22)
#loc136 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE135_45.c":88:28)
#loc137 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE135_45.c":88:15)
#loc138 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE135_45.c":89:31)
#loc139 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE135_45.c":89:9)
#loc140 = loc(fused[#loc2, #loc3])
#loc141 = loc(fused[#loc4, #loc5])
#loc142 = loc(fused[#loc6, #loc7])
#loc143 = loc(fused[#loc9, #loc8])
#loc144 = loc(fused[#loc10, #loc1])
#loc145 = loc(fused[#loc12, #loc11])
#loc146 = loc(fused[#loc13, #loc14])
#loc147 = loc(fused[#loc15, #loc16])
#loc148 = loc(fused[#loc17, #loc18])
#loc149 = loc(fused[#loc19, #loc20])
#loc150 = loc(fused[#loc21, #loc22])
#loc151 = loc(fused[#loc23, #loc24])
#loc152 = loc(fused[#loc25, #loc26])
#loc153 = loc(fused[#loc31, #loc32])
#loc156 = loc(fused[#loc42, #loc43])
#loc157 = loc(fused[#loc46, #loc47])
#loc158 = loc(fused[#loc50, #loc49])
#loc159 = loc(fused[#loc51, #loc52])
#loc160 = loc(fused[#loc53, #loc54])
#loc161 = loc(fused[#loc55, #loc56])
#loc162 = loc(fused[#loc57, #loc58])
#loc163 = loc(fused[#loc59, #loc60])
#loc164 = loc(fused[#loc61, #loc62])
#loc165 = loc(fused[#loc63, #loc64])
#loc166 = loc(fused[#loc73, #loc74])
#loc167 = loc(fused[#loc75, #loc76])
#loc168 = loc(fused[#loc77, #loc78])
#loc169 = loc(fused[#loc80, #loc79])
#loc170 = loc(fused[#loc81, #loc72])
#loc171 = loc(fused[#loc83, #loc82])
#loc172 = loc(fused[#loc84, #loc85])
#loc173 = loc(fused[#loc86, #loc87])
#loc174 = loc(fused[#loc88, #loc89])
#loc175 = loc(fused[#loc90, #loc91])
#loc176 = loc(fused[#loc92, #loc93])
#loc177 = loc(fused[#loc94, #loc95])
#loc178 = loc(fused[#loc96, #loc97])
#loc179 = loc(fused[#loc105, #loc106])
#loc180 = loc(fused[#loc107, #loc108])
#loc181 = loc(fused[#loc109, #loc110])
#loc182 = loc(fused[#loc112, #loc111])
#loc183 = loc(fused[#loc114, #loc113])
#loc184 = loc(fused[#loc116, #loc115])
#loc185 = loc(fused[#loc117, #loc118])
#loc186 = loc(fused[#loc119, #loc120])
#loc187 = loc(fused[#loc121, #loc122])
#loc188 = loc(fused[#loc123, #loc124])
#loc189 = loc(fused[#loc125, #loc126])
#loc190 = loc(fused[#loc127, #loc128])
#loc191 = loc(fused[#loc129, #loc130])
#loc192 = loc(fused[#loc131, #loc132])
