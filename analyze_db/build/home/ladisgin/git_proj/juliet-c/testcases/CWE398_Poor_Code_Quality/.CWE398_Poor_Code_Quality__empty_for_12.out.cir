!s32i = !cir.int<s, 32>
!s64i = !cir.int<s, 64>
!s8i = !cir.int<s, 8>
!u32i = !cir.int<u, 32>
!void = !cir.void
#fn_attr = #cir<extra({inline = #cir.inline<no>, nothrow = #cir.nothrow, optnone = #cir.optnone})>
#fn_attr1 = #cir<extra({nothrow = #cir.nothrow})>
#loc61 = loc("CWE398_Poor_Code_Quality__empty_for_12.c":94:10)
#loc62 = loc("CWE398_Poor_Code_Quality__empty_for_12.c":94:14)
#loc63 = loc("CWE398_Poor_Code_Quality__empty_for_12.c":94:20)
#loc64 = loc("CWE398_Poor_Code_Quality__empty_for_12.c":94:32)
#loc148 = loc(fused[#loc61, #loc62])
#loc149 = loc(fused[#loc63, #loc64])
module @"/home/ladisgin/git_proj/juliet-c/testcases/CWE398_Poor_Code_Quality/CWE398_Poor_Code_Quality__empty_for_12.c" attributes {cir.lang = #cir.lang<c>, cir.sob = #cir.signed_overflow_behavior<undefined>, cir.triple = "x86_64-unknown-linux-gnu", dlti.dl_spec = #dlti.dl_spec<i8 = dense<8> : vector<2xi64>, i16 = dense<16> : vector<2xi64>, i32 = dense<32> : vector<2xi64>, f16 = dense<16> : vector<2xi64>, f64 = dense<64> : vector<2xi64>, f128 = dense<128> : vector<2xi64>, !llvm.ptr<272> = dense<64> : vector<4xi64>, !llvm.ptr<271> = dense<32> : vector<4xi64>, i64 = dense<64> : vector<2xi64>, !llvm.ptr<270> = dense<32> : vector<4xi64>, i128 = dense<128> : vector<2xi64>, f80 = dense<128> : vector<2xi64>, !llvm.ptr = dense<64> : vector<4xi64>, i1 = dense<8> : vector<2xi64>, "dlti.endianness" = "little", "dlti.stack_alignment" = 128 : i64>} {
  cir.func no_proto private @globalReturnsTrueOrFalse(...) -> !s32i loc(#loc124)
  cir.func private @printLine(!cir.ptr<!s8i>) loc(#loc125)
  cir.global "private" constant cir_private dsolocal @".str" = #cir.const_array<"Hello from bad()\00" : !cir.array<!s8i x 17>> : !cir.array<!s8i x 17> {alignment = 1 : i64} loc(#loc5)
  cir.global "private" constant cir_private dsolocal @".str.1" = #cir.const_array<"Inside the for statement\00" : !cir.array<!s8i x 25>> : !cir.array<!s8i x 25> {alignment = 1 : i64} loc(#loc6)
  cir.global "private" constant cir_private dsolocal @".str.2" = #cir.const_array<"Hello from good()\00" : !cir.array<!s8i x 18>> : !cir.array<!s8i x 18> {alignment = 1 : i64} loc(#loc7)
  cir.func no_proto @CWE398_Poor_Code_Quality__empty_for_12_bad() extra(#fn_attr) {
    cir.scope {
      %0 = cir.get_global @globalReturnsTrueOrFalse : !cir.ptr<!cir.func<!s32i (...)>> loc(#loc128)
      %1 = cir.cast(bitcast, %0 : !cir.ptr<!cir.func<!s32i (...)>>), !cir.ptr<!cir.func<!s32i ()>> loc(#loc128)
      %2 = cir.call %1() : (!cir.ptr<!cir.func<!s32i ()>>) -> !s32i loc(#loc12)
      %3 = cir.cast(int_to_bool, %2 : !s32i), !cir.bool loc(#loc12)
      cir.if %3 {
        cir.scope {
          %6 = cir.alloca !s32i, !cir.ptr<!s32i>, ["i"] {alignment = 4 : i64} loc(#loc131)
          cir.scope {
            %7 = cir.const #cir.int<0> : !s32i loc(#loc23)
            cir.store %7, %6 : !s32i, !cir.ptr<!s32i> loc(#loc133)
            cir.for : cond {
              %8 = cir.load %6 : !cir.ptr<!s32i>, !s32i loc(#loc25)
              %9 = cir.const #cir.int<10> : !s32i loc(#loc26)
              %10 = cir.cmp(lt, %8, %9) : !s32i, !cir.bool loc(#loc134)
              cir.condition(%10) loc(#loc27)
            } body {
              cir.yield loc(#loc22)
            } step {
              %8 = cir.load %6 : !cir.ptr<!s32i>, !s32i loc(#loc28)
              %9 = cir.unary(inc, %8) : !s32i, !s32i loc(#loc29)
              cir.store %9, %6 : !s32i, !cir.ptr<!s32i> loc(#loc135)
              cir.yield loc(#loc132)
            } loc(#loc132)
          } loc(#loc132)
        } loc(#loc130)
        %4 = cir.get_global @".str" : !cir.ptr<!cir.array<!s8i x 17>> loc(#loc5)
        %5 = cir.cast(array_to_ptrdecay, %4 : !cir.ptr<!cir.array<!s8i x 17>>), !cir.ptr<!s8i> loc(#loc5)
        cir.call @printLine(%5) : (!cir.ptr<!s8i>) -> () loc(#loc30)
      } else {
        cir.scope {
          %6 = cir.alloca !s32i, !cir.ptr<!s32i>, ["i"] {alignment = 4 : i64} loc(#loc137)
          cir.scope {
            %7 = cir.const #cir.int<0> : !s32i loc(#loc37)
            cir.store %7, %6 : !s32i, !cir.ptr<!s32i> loc(#loc139)
            cir.for : cond {
              %8 = cir.load %6 : !cir.ptr<!s32i>, !s32i loc(#loc39)
              %9 = cir.const #cir.int<10> : !s32i loc(#loc40)
              %10 = cir.cmp(lt, %8, %9) : !s32i, !cir.bool loc(#loc140)
              cir.condition(%10) loc(#loc41)
            } body {
              cir.scope {
                %8 = cir.get_global @".str.1" : !cir.ptr<!cir.array<!s8i x 25>> loc(#loc6)
                %9 = cir.cast(array_to_ptrdecay, %8 : !cir.ptr<!cir.array<!s8i x 25>>), !cir.ptr<!s8i> loc(#loc6)
                cir.call @printLine(%9) : (!cir.ptr<!s8i>) -> () loc(#loc43)
              } loc(#loc141)
              cir.yield loc(#loc36)
            } step {
              %8 = cir.load %6 : !cir.ptr<!s32i>, !s32i loc(#loc44)
              %9 = cir.unary(inc, %8) : !s32i, !s32i loc(#loc45)
              cir.store %9, %6 : !s32i, !cir.ptr<!s32i> loc(#loc142)
              cir.yield loc(#loc138)
            } loc(#loc138)
          } loc(#loc138)
        } loc(#loc136)
        %4 = cir.get_global @".str.2" : !cir.ptr<!cir.array<!s8i x 18>> loc(#loc7)
        %5 = cir.cast(array_to_ptrdecay, %4 : !cir.ptr<!cir.array<!s8i x 18>>), !cir.ptr<!s8i> loc(#loc7)
        cir.call @printLine(%5) : (!cir.ptr<!s8i>) -> () loc(#loc46)
      } loc(#loc129)
    } loc(#loc127)
    cir.return loc(#loc9)
  } loc(#loc126)
  cir.func no_proto @CWE398_Poor_Code_Quality__empty_for_12_good() extra(#fn_attr) {
    %0 = cir.get_global @good1 : !cir.ptr<!cir.func<!void ()>> loc(#loc144)
    cir.call %0() : (!cir.ptr<!cir.func<!void ()>>) -> () loc(#loc49)
    cir.return loc(#loc48)
  } loc(#loc143)
  cir.func private @srand(!u32i) extra(#fn_attr1) loc(#loc145)
  cir.func private @time(!cir.ptr<!s64i>) -> !s64i extra(#fn_attr1) loc(#loc146)
  cir.global "private" constant cir_private dsolocal @".str.3" = #cir.const_array<"Calling good()...\00" : !cir.array<!s8i x 18>> : !cir.array<!s8i x 18> {alignment = 1 : i64} loc(#loc55)
  cir.global "private" constant cir_private dsolocal @".str.4" = #cir.const_array<"Finished good()\00" : !cir.array<!s8i x 16>> : !cir.array<!s8i x 16> {alignment = 1 : i64} loc(#loc56)
  cir.global "private" constant cir_private dsolocal @".str.5" = #cir.const_array<"Calling bad()...\00" : !cir.array<!s8i x 17>> : !cir.array<!s8i x 17> {alignment = 1 : i64} loc(#loc57)
  cir.global "private" constant cir_private dsolocal @".str.6" = #cir.const_array<"Finished bad()\00" : !cir.array<!s8i x 15>> : !cir.array<!s8i x 15> {alignment = 1 : i64} loc(#loc58)
  cir.func @main(%arg0: !s32i loc(fused[#loc61, #loc62]), %arg1: !cir.ptr<!cir.ptr<!s8i>> loc(fused[#loc63, #loc64])) -> !s32i extra(#fn_attr) {
    %0 = cir.alloca !s32i, !cir.ptr<!s32i>, ["argc", init] {alignment = 4 : i64} loc(#loc148)
    %1 = cir.alloca !cir.ptr<!cir.ptr<!s8i>>, !cir.ptr<!cir.ptr<!cir.ptr<!s8i>>>, ["argv", init] {alignment = 8 : i64} loc(#loc149)
    %2 = cir.alloca !s32i, !cir.ptr<!s32i>, ["__retval"] {alignment = 4 : i64} loc(#loc60)
    cir.store %arg0, %0 : !s32i, !cir.ptr<!s32i> loc(#loc65)
    cir.store %arg1, %1 : !cir.ptr<!cir.ptr<!s8i>>, !cir.ptr<!cir.ptr<!cir.ptr<!s8i>>> loc(#loc65)
    %3 = cir.const #cir.ptr<null> : !cir.ptr<!s64i> loc(#loc66)
    %4 = cir.call @time(%3) : (!cir.ptr<!s64i>) -> !s64i extra(#fn_attr1) loc(#loc67)
    %5 = cir.cast(integral, %4 : !s64i), !u32i loc(#loc67)
    cir.call @srand(%5) : (!u32i) -> () extra(#fn_attr1) loc(#loc68)
    %6 = cir.get_global @".str.3" : !cir.ptr<!cir.array<!s8i x 18>> loc(#loc55)
    %7 = cir.cast(array_to_ptrdecay, %6 : !cir.ptr<!cir.array<!s8i x 18>>), !cir.ptr<!s8i> loc(#loc55)
    cir.call @printLine(%7) : (!cir.ptr<!s8i>) -> () loc(#loc69)
    %8 = cir.get_global @CWE398_Poor_Code_Quality__empty_for_12_good : !cir.ptr<!cir.func<!void ()>> loc(#loc150)
    cir.call @CWE398_Poor_Code_Quality__empty_for_12_good() : () -> () loc(#loc70)
    %9 = cir.get_global @".str.4" : !cir.ptr<!cir.array<!s8i x 16>> loc(#loc56)
    %10 = cir.cast(array_to_ptrdecay, %9 : !cir.ptr<!cir.array<!s8i x 16>>), !cir.ptr<!s8i> loc(#loc56)
    cir.call @printLine(%10) : (!cir.ptr<!s8i>) -> () loc(#loc72)
    %11 = cir.get_global @".str.5" : !cir.ptr<!cir.array<!s8i x 17>> loc(#loc57)
    %12 = cir.cast(array_to_ptrdecay, %11 : !cir.ptr<!cir.array<!s8i x 17>>), !cir.ptr<!s8i> loc(#loc57)
    cir.call @printLine(%12) : (!cir.ptr<!s8i>) -> () loc(#loc73)
    %13 = cir.get_global @CWE398_Poor_Code_Quality__empty_for_12_bad : !cir.ptr<!cir.func<!void ()>> loc(#loc151)
    cir.call @CWE398_Poor_Code_Quality__empty_for_12_bad() : () -> () loc(#loc74)
    %14 = cir.get_global @".str.6" : !cir.ptr<!cir.array<!s8i x 15>> loc(#loc58)
    %15 = cir.cast(array_to_ptrdecay, %14 : !cir.ptr<!cir.array<!s8i x 15>>), !cir.ptr<!s8i> loc(#loc58)
    cir.call @printLine(%15) : (!cir.ptr<!s8i>) -> () loc(#loc76)
    %16 = cir.const #cir.int<0> : !s32i loc(#loc77)
    cir.store %16, %2 : !s32i, !cir.ptr<!s32i> loc(#loc152)
    %17 = cir.load %2 : !cir.ptr<!s32i>, !s32i loc(#loc152)
    cir.return %17 : !s32i loc(#loc152)
  } loc(#loc147)
  cir.func no_proto internal private @good1() extra(#fn_attr) {
    cir.scope {
      %0 = cir.get_global @globalReturnsTrueOrFalse : !cir.ptr<!cir.func<!s32i (...)>> loc(#loc155)
      %1 = cir.cast(bitcast, %0 : !cir.ptr<!cir.func<!s32i (...)>>), !cir.ptr<!cir.func<!s32i ()>> loc(#loc155)
      %2 = cir.call %1() : (!cir.ptr<!cir.func<!s32i ()>>) -> !s32i loc(#loc83)
      %3 = cir.cast(int_to_bool, %2 : !s32i), !cir.bool loc(#loc83)
      cir.if %3 {
        cir.scope {
          %6 = cir.alloca !s32i, !cir.ptr<!s32i>, ["i"] {alignment = 4 : i64} loc(#loc158)
          cir.scope {
            %7 = cir.const #cir.int<0> : !s32i loc(#loc94)
            cir.store %7, %6 : !s32i, !cir.ptr<!s32i> loc(#loc160)
            cir.for : cond {
              %8 = cir.load %6 : !cir.ptr<!s32i>, !s32i loc(#loc96)
              %9 = cir.const #cir.int<10> : !s32i loc(#loc97)
              %10 = cir.cmp(lt, %8, %9) : !s32i, !cir.bool loc(#loc161)
              cir.condition(%10) loc(#loc98)
            } body {
              cir.scope {
                %8 = cir.get_global @".str.1" : !cir.ptr<!cir.array<!s8i x 25>> loc(#loc100)
                %9 = cir.cast(array_to_ptrdecay, %8 : !cir.ptr<!cir.array<!s8i x 25>>), !cir.ptr<!s8i> loc(#loc100)
                cir.call @printLine(%9) : (!cir.ptr<!s8i>) -> () loc(#loc101)
              } loc(#loc162)
              cir.yield loc(#loc93)
            } step {
              %8 = cir.load %6 : !cir.ptr<!s32i>, !s32i loc(#loc102)
              %9 = cir.unary(inc, %8) : !s32i, !s32i loc(#loc103)
              cir.store %9, %6 : !s32i, !cir.ptr<!s32i> loc(#loc163)
              cir.yield loc(#loc159)
            } loc(#loc159)
          } loc(#loc159)
        } loc(#loc157)
        %4 = cir.get_global @".str.2" : !cir.ptr<!cir.array<!s8i x 18>> loc(#loc104)
        %5 = cir.cast(array_to_ptrdecay, %4 : !cir.ptr<!cir.array<!s8i x 18>>), !cir.ptr<!s8i> loc(#loc104)
        cir.call @printLine(%5) : (!cir.ptr<!s8i>) -> () loc(#loc105)
      } else {
        cir.scope {
          %6 = cir.alloca !s32i, !cir.ptr<!s32i>, ["i"] {alignment = 4 : i64} loc(#loc165)
          cir.scope {
            %7 = cir.const #cir.int<0> : !s32i loc(#loc112)
            cir.store %7, %6 : !s32i, !cir.ptr<!s32i> loc(#loc167)
            cir.for : cond {
              %8 = cir.load %6 : !cir.ptr<!s32i>, !s32i loc(#loc114)
              %9 = cir.const #cir.int<10> : !s32i loc(#loc115)
              %10 = cir.cmp(lt, %8, %9) : !s32i, !cir.bool loc(#loc168)
              cir.condition(%10) loc(#loc116)
            } body {
              cir.scope {
                %8 = cir.get_global @".str.1" : !cir.ptr<!cir.array<!s8i x 25>> loc(#loc118)
                %9 = cir.cast(array_to_ptrdecay, %8 : !cir.ptr<!cir.array<!s8i x 25>>), !cir.ptr<!s8i> loc(#loc118)
                cir.call @printLine(%9) : (!cir.ptr<!s8i>) -> () loc(#loc119)
              } loc(#loc169)
              cir.yield loc(#loc111)
            } step {
              %8 = cir.load %6 : !cir.ptr<!s32i>, !s32i loc(#loc120)
              %9 = cir.unary(inc, %8) : !s32i, !s32i loc(#loc121)
              cir.store %9, %6 : !s32i, !cir.ptr<!s32i> loc(#loc170)
              cir.yield loc(#loc166)
            } loc(#loc166)
          } loc(#loc166)
        } loc(#loc164)
        %4 = cir.get_global @".str.2" : !cir.ptr<!cir.array<!s8i x 18>> loc(#loc122)
        %5 = cir.cast(array_to_ptrdecay, %4 : !cir.ptr<!cir.array<!s8i x 18>>), !cir.ptr<!s8i> loc(#loc122)
        cir.call @printLine(%5) : (!cir.ptr<!s8i>) -> () loc(#loc123)
      } loc(#loc156)
    } loc(#loc154)
    cir.return loc(#loc80)
  } loc(#loc153)
} loc(#loc)
#loc = loc("/home/ladisgin/git_proj/juliet-c/testcases/CWE398_Poor_Code_Quality/CWE398_Poor_Code_Quality__empty_for_12.c":0:0)
#loc1 = loc("../../testcasesupport/std_testcase_io.h":52:1)
#loc2 = loc("../../testcasesupport/std_testcase_io.h":52:30)
#loc3 = loc("../../testcasesupport/std_testcase_io.h":14:1)
#loc4 = loc("../../testcasesupport/std_testcase_io.h":14:33)
#loc5 = loc("CWE398_Poor_Code_Quality__empty_for_12.c":31:19)
#loc6 = loc("CWE398_Poor_Code_Quality__empty_for_12.c":40:27)
#loc7 = loc("CWE398_Poor_Code_Quality__empty_for_12.c":43:19)
#loc8 = loc("CWE398_Poor_Code_Quality__empty_for_12.c":20:1)
#loc9 = loc("CWE398_Poor_Code_Quality__empty_for_12.c":45:1)
#loc10 = loc("CWE398_Poor_Code_Quality__empty_for_12.c":22:5)
#loc11 = loc("CWE398_Poor_Code_Quality__empty_for_12.c":44:5)
#loc12 = loc("CWE398_Poor_Code_Quality__empty_for_12.c":22:8)
#loc13 = loc("CWE398_Poor_Code_Quality__empty_for_12.c":22:33)
#loc14 = loc("CWE398_Poor_Code_Quality__empty_for_12.c":23:5)
#loc15 = loc("CWE398_Poor_Code_Quality__empty_for_12.c":32:5)
#loc16 = loc("CWE398_Poor_Code_Quality__empty_for_12.c":34:5)
#loc17 = loc("CWE398_Poor_Code_Quality__empty_for_12.c":25:9)
#loc18 = loc("CWE398_Poor_Code_Quality__empty_for_12.c":30:9)
#loc19 = loc("CWE398_Poor_Code_Quality__empty_for_12.c":26:13)
#loc20 = loc("CWE398_Poor_Code_Quality__empty_for_12.c":26:17)
#loc21 = loc("CWE398_Poor_Code_Quality__empty_for_12.c":27:13)
#loc22 = loc("CWE398_Poor_Code_Quality__empty_for_12.c":29:13)
#loc23 = loc("CWE398_Poor_Code_Quality__empty_for_12.c":27:22)
#loc24 = loc("CWE398_Poor_Code_Quality__empty_for_12.c":27:18)
#loc25 = loc("CWE398_Poor_Code_Quality__empty_for_12.c":27:25)
#loc26 = loc("CWE398_Poor_Code_Quality__empty_for_12.c":27:29)
#loc27 = loc("CWE398_Poor_Code_Quality__empty_for_12.c":27:27)
#loc28 = loc("CWE398_Poor_Code_Quality__empty_for_12.c":27:34)
#loc29 = loc("CWE398_Poor_Code_Quality__empty_for_12.c":27:33)
#loc30 = loc("CWE398_Poor_Code_Quality__empty_for_12.c":31:9)
#loc31 = loc("CWE398_Poor_Code_Quality__empty_for_12.c":36:9)
#loc32 = loc("CWE398_Poor_Code_Quality__empty_for_12.c":42:9)
#loc33 = loc("CWE398_Poor_Code_Quality__empty_for_12.c":37:13)
#loc34 = loc("CWE398_Poor_Code_Quality__empty_for_12.c":37:17)
#loc35 = loc("CWE398_Poor_Code_Quality__empty_for_12.c":38:13)
#loc36 = loc("CWE398_Poor_Code_Quality__empty_for_12.c":41:13)
#loc37 = loc("CWE398_Poor_Code_Quality__empty_for_12.c":38:22)
#loc38 = loc("CWE398_Poor_Code_Quality__empty_for_12.c":38:18)
#loc39 = loc("CWE398_Poor_Code_Quality__empty_for_12.c":38:25)
#loc40 = loc("CWE398_Poor_Code_Quality__empty_for_12.c":38:29)
#loc41 = loc("CWE398_Poor_Code_Quality__empty_for_12.c":38:27)
#loc42 = loc("CWE398_Poor_Code_Quality__empty_for_12.c":39:13)
#loc43 = loc("CWE398_Poor_Code_Quality__empty_for_12.c":40:17)
#loc44 = loc("CWE398_Poor_Code_Quality__empty_for_12.c":38:34)
#loc45 = loc("CWE398_Poor_Code_Quality__empty_for_12.c":38:33)
#loc46 = loc("CWE398_Poor_Code_Quality__empty_for_12.c":43:9)
#loc47 = loc("CWE398_Poor_Code_Quality__empty_for_12.c":80:1)
#loc48 = loc("CWE398_Poor_Code_Quality__empty_for_12.c":83:1)
#loc49 = loc("CWE398_Poor_Code_Quality__empty_for_12.c":82:5)
#loc50 = loc("CWE398_Poor_Code_Quality__empty_for_12.c":82:11)
#loc51 = loc("/usr/include/stdlib.h":575:1)
#loc52 = loc("/usr/include/stdlib.h":575:41)
#loc53 = loc("/usr/include/time.h":76:1)
#loc54 = loc("/usr/include/time.h":76:38)
#loc55 = loc("CWE398_Poor_Code_Quality__empty_for_12.c":99:15)
#loc56 = loc("CWE398_Poor_Code_Quality__empty_for_12.c":101:15)
#loc57 = loc("CWE398_Poor_Code_Quality__empty_for_12.c":104:15)
#loc58 = loc("CWE398_Poor_Code_Quality__empty_for_12.c":106:15)
#loc59 = loc("CWE398_Poor_Code_Quality__empty_for_12.c":94:1)
#loc60 = loc("CWE398_Poor_Code_Quality__empty_for_12.c":109:1)
#loc65 = loc("CWE398_Poor_Code_Quality__empty_for_12.c":95:1)
#loc66 = loc("CWE398_Poor_Code_Quality__empty_for_12.c":97:27)
#loc67 = loc("CWE398_Poor_Code_Quality__empty_for_12.c":97:22)
#loc68 = loc("CWE398_Poor_Code_Quality__empty_for_12.c":97:5)
#loc69 = loc("CWE398_Poor_Code_Quality__empty_for_12.c":99:5)
#loc70 = loc("CWE398_Poor_Code_Quality__empty_for_12.c":100:5)
#loc71 = loc("CWE398_Poor_Code_Quality__empty_for_12.c":100:49)
#loc72 = loc("CWE398_Poor_Code_Quality__empty_for_12.c":101:5)
#loc73 = loc("CWE398_Poor_Code_Quality__empty_for_12.c":104:5)
#loc74 = loc("CWE398_Poor_Code_Quality__empty_for_12.c":105:5)
#loc75 = loc("CWE398_Poor_Code_Quality__empty_for_12.c":105:48)
#loc76 = loc("CWE398_Poor_Code_Quality__empty_for_12.c":106:5)
#loc77 = loc("CWE398_Poor_Code_Quality__empty_for_12.c":108:12)
#loc78 = loc("CWE398_Poor_Code_Quality__empty_for_12.c":108:5)
#loc79 = loc("CWE398_Poor_Code_Quality__empty_for_12.c":52:1)
#loc80 = loc("CWE398_Poor_Code_Quality__empty_for_12.c":78:1)
#loc81 = loc("CWE398_Poor_Code_Quality__empty_for_12.c":54:5)
#loc82 = loc("CWE398_Poor_Code_Quality__empty_for_12.c":77:5)
#loc83 = loc("CWE398_Poor_Code_Quality__empty_for_12.c":54:8)
#loc84 = loc("CWE398_Poor_Code_Quality__empty_for_12.c":54:33)
#loc85 = loc("CWE398_Poor_Code_Quality__empty_for_12.c":55:5)
#loc86 = loc("CWE398_Poor_Code_Quality__empty_for_12.c":65:5)
#loc87 = loc("CWE398_Poor_Code_Quality__empty_for_12.c":67:5)
#loc88 = loc("CWE398_Poor_Code_Quality__empty_for_12.c":57:9)
#loc89 = loc("CWE398_Poor_Code_Quality__empty_for_12.c":63:9)
#loc90 = loc("CWE398_Poor_Code_Quality__empty_for_12.c":58:13)
#loc91 = loc("CWE398_Poor_Code_Quality__empty_for_12.c":58:17)
#loc92 = loc("CWE398_Poor_Code_Quality__empty_for_12.c":59:13)
#loc93 = loc("CWE398_Poor_Code_Quality__empty_for_12.c":62:13)
#loc94 = loc("CWE398_Poor_Code_Quality__empty_for_12.c":59:22)
#loc95 = loc("CWE398_Poor_Code_Quality__empty_for_12.c":59:18)
#loc96 = loc("CWE398_Poor_Code_Quality__empty_for_12.c":59:25)
#loc97 = loc("CWE398_Poor_Code_Quality__empty_for_12.c":59:29)
#loc98 = loc("CWE398_Poor_Code_Quality__empty_for_12.c":59:27)
#loc99 = loc("CWE398_Poor_Code_Quality__empty_for_12.c":60:13)
#loc100 = loc("CWE398_Poor_Code_Quality__empty_for_12.c":61:27)
#loc101 = loc("CWE398_Poor_Code_Quality__empty_for_12.c":61:17)
#loc102 = loc("CWE398_Poor_Code_Quality__empty_for_12.c":59:34)
#loc103 = loc("CWE398_Poor_Code_Quality__empty_for_12.c":59:33)
#loc104 = loc("CWE398_Poor_Code_Quality__empty_for_12.c":64:19)
#loc105 = loc("CWE398_Poor_Code_Quality__empty_for_12.c":64:9)
#loc106 = loc("CWE398_Poor_Code_Quality__empty_for_12.c":69:9)
#loc107 = loc("CWE398_Poor_Code_Quality__empty_for_12.c":75:9)
#loc108 = loc("CWE398_Poor_Code_Quality__empty_for_12.c":70:13)
#loc109 = loc("CWE398_Poor_Code_Quality__empty_for_12.c":70:17)
#loc110 = loc("CWE398_Poor_Code_Quality__empty_for_12.c":71:13)
#loc111 = loc("CWE398_Poor_Code_Quality__empty_for_12.c":74:13)
#loc112 = loc("CWE398_Poor_Code_Quality__empty_for_12.c":71:22)
#loc113 = loc("CWE398_Poor_Code_Quality__empty_for_12.c":71:18)
#loc114 = loc("CWE398_Poor_Code_Quality__empty_for_12.c":71:25)
#loc115 = loc("CWE398_Poor_Code_Quality__empty_for_12.c":71:29)
#loc116 = loc("CWE398_Poor_Code_Quality__empty_for_12.c":71:27)
#loc117 = loc("CWE398_Poor_Code_Quality__empty_for_12.c":72:13)
#loc118 = loc("CWE398_Poor_Code_Quality__empty_for_12.c":73:27)
#loc119 = loc("CWE398_Poor_Code_Quality__empty_for_12.c":73:17)
#loc120 = loc("CWE398_Poor_Code_Quality__empty_for_12.c":71:34)
#loc121 = loc("CWE398_Poor_Code_Quality__empty_for_12.c":71:33)
#loc122 = loc("CWE398_Poor_Code_Quality__empty_for_12.c":76:19)
#loc123 = loc("CWE398_Poor_Code_Quality__empty_for_12.c":76:9)
#loc124 = loc(fused[#loc1, #loc2])
#loc125 = loc(fused[#loc3, #loc4])
#loc126 = loc(fused[#loc8, #loc9])
#loc127 = loc(fused[#loc10, #loc11])
#loc128 = loc(fused[#loc12, #loc13])
#loc129 = loc(fused[#loc14, #loc15, #loc16, #loc11])
#loc130 = loc(fused[#loc17, #loc18])
#loc131 = loc(fused[#loc19, #loc20])
#loc132 = loc(fused[#loc21, #loc22])
#loc133 = loc(fused[#loc24, #loc23])
#loc134 = loc(fused[#loc25, #loc26])
#loc135 = loc(fused[#loc29, #loc28])
#loc136 = loc(fused[#loc31, #loc32])
#loc137 = loc(fused[#loc33, #loc34])
#loc138 = loc(fused[#loc35, #loc36])
#loc139 = loc(fused[#loc38, #loc37])
#loc140 = loc(fused[#loc39, #loc40])
#loc141 = loc(fused[#loc42, #loc36])
#loc142 = loc(fused[#loc45, #loc44])
#loc143 = loc(fused[#loc47, #loc48])
#loc144 = loc(fused[#loc49, #loc50])
#loc145 = loc(fused[#loc51, #loc52])
#loc146 = loc(fused[#loc53, #loc54])
#loc147 = loc(fused[#loc59, #loc60])
#loc150 = loc(fused[#loc70, #loc71])
#loc151 = loc(fused[#loc74, #loc75])
#loc152 = loc(fused[#loc78, #loc77])
#loc153 = loc(fused[#loc79, #loc80])
#loc154 = loc(fused[#loc81, #loc82])
#loc155 = loc(fused[#loc83, #loc84])
#loc156 = loc(fused[#loc85, #loc86, #loc87, #loc82])
#loc157 = loc(fused[#loc88, #loc89])
#loc158 = loc(fused[#loc90, #loc91])
#loc159 = loc(fused[#loc92, #loc93])
#loc160 = loc(fused[#loc95, #loc94])
#loc161 = loc(fused[#loc96, #loc97])
#loc162 = loc(fused[#loc99, #loc93])
#loc163 = loc(fused[#loc103, #loc102])
#loc164 = loc(fused[#loc106, #loc107])
#loc165 = loc(fused[#loc108, #loc109])
#loc166 = loc(fused[#loc110, #loc111])
#loc167 = loc(fused[#loc113, #loc112])
#loc168 = loc(fused[#loc114, #loc115])
#loc169 = loc(fused[#loc117, #loc111])
#loc170 = loc(fused[#loc121, #loc120])
