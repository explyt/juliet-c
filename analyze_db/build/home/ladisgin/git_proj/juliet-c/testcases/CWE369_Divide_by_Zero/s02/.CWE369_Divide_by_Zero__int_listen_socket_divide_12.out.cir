!s32i = !cir.int<s, 32>
!s64i = !cir.int<s, 64>
!s8i = !cir.int<s, 8>
!u16i = !cir.int<u, 16>
!u32i = !cir.int<u, 32>
!u64i = !cir.int<u, 64>
!u8i = !cir.int<u, 8>
!void = !cir.void
#false = #cir.bool<false> : !cir.bool
#fn_attr = #cir<extra({nothrow = #cir.nothrow})>
#fn_attr1 = #cir<extra({inline = #cir.inline<no>, nothrow = #cir.nothrow, optnone = #cir.optnone})>
#loc192 = loc("CWE369_Divide_by_Zero__int_listen_socket_divide_12.c":372:10)
#loc193 = loc("CWE369_Divide_by_Zero__int_listen_socket_divide_12.c":372:14)
#loc194 = loc("CWE369_Divide_by_Zero__int_listen_socket_divide_12.c":372:20)
#loc195 = loc("CWE369_Divide_by_Zero__int_listen_socket_divide_12.c":372:32)
#true = #cir.bool<true> : !cir.bool
!ty_in_addr = !cir.struct<struct "in_addr" {!u32i} #cir.record.decl.ast>
#loc583 = loc(fused[#loc192, #loc193])
#loc584 = loc(fused[#loc194, #loc195])
!ty_sockaddr = !cir.struct<struct "sockaddr" {!u16i, !cir.array<!s8i x 14>} #cir.record.decl.ast>
!ty_sockaddr_in = !cir.struct<struct "sockaddr_in" {!u16i, !u16i, !ty_in_addr, !cir.array<!u8i x 8>}>
module @"/home/ladisgin/git_proj/juliet-c/testcases/CWE369_Divide_by_Zero/s02/CWE369_Divide_by_Zero__int_listen_socket_divide_12.c" attributes {cir.lang = #cir.lang<c>, cir.sob = #cir.signed_overflow_behavior<undefined>, cir.triple = "x86_64-unknown-linux-gnu", dlti.dl_spec = #dlti.dl_spec<!llvm.ptr = dense<64> : vector<4xi64>, i8 = dense<8> : vector<2xi64>, i1 = dense<8> : vector<2xi64>, i32 = dense<32> : vector<2xi64>, i16 = dense<16> : vector<2xi64>, f64 = dense<64> : vector<2xi64>, f16 = dense<16> : vector<2xi64>, !llvm.ptr<271> = dense<32> : vector<4xi64>, !llvm.ptr<270> = dense<32> : vector<4xi64>, f128 = dense<128> : vector<2xi64>, !llvm.ptr<272> = dense<64> : vector<4xi64>, i128 = dense<128> : vector<2xi64>, i64 = dense<64> : vector<2xi64>, f80 = dense<128> : vector<2xi64>, "dlti.endianness" = "little", "dlti.stack_alignment" = 128 : i64>} {
  cir.func no_proto private @globalReturnsTrueOrFalse(...) -> !s32i loc(#loc508)
  cir.func private @socket(!s32i, !s32i, !s32i) -> !s32i extra(#fn_attr) loc(#loc509)
  cir.func private @htons(!u16i) -> !u16i extra(#fn_attr) loc(#loc510)
  cir.func private @bind(!s32i, !cir.ptr<!ty_sockaddr>, !u32i) -> !s32i extra(#fn_attr) loc(#loc511)
  cir.func private @listen(!s32i, !s32i) -> !s32i extra(#fn_attr) loc(#loc512)
  cir.func private @accept(!s32i, !cir.ptr<!ty_sockaddr>, !cir.ptr<!u32i>) -> !s32i loc(#loc513)
  cir.func private @recv(!s32i, !cir.ptr<!void>, !u64i, !s32i) -> !s64i loc(#loc514)
  cir.func private @atoi(!cir.ptr<!s8i>) -> !s32i extra(#fn_attr) loc(#loc515)
  cir.func private @close(!s32i) -> !s32i loc(#loc516)
  cir.func private @printIntLine(!s32i) loc(#loc517)
  cir.func private @printLine(!cir.ptr<!s8i>) loc(#loc518)
  cir.global "private" constant cir_private dsolocal @".str" = #cir.const_array<"This would result in a divide by zero\00" : !cir.array<!s8i x 38>> : !cir.array<!s8i x 38> {alignment = 1 : i64} loc(#loc23)
  cir.func no_proto @CWE369_Divide_by_Zero__int_listen_socket_divide_12_bad() extra(#fn_attr1) {
    %0 = cir.alloca !s32i, !cir.ptr<!s32i>, ["data"] {alignment = 4 : i64} loc(#loc520)
    %1 = cir.const #cir.int<1> : !s32i loc(#loc28)
    %2 = cir.unary(minus, %1) : !s32i, !s32i loc(#loc29)
    cir.store %2, %0 : !s32i, !cir.ptr<!s32i> loc(#loc521)
    cir.scope {
      %3 = cir.get_global @globalReturnsTrueOrFalse : !cir.ptr<!cir.func<!s32i (...)>> loc(#loc523)
      %4 = cir.cast(bitcast, %3 : !cir.ptr<!cir.func<!s32i (...)>>), !cir.ptr<!cir.func<!s32i ()>> loc(#loc523)
      %5 = cir.call %4() : (!cir.ptr<!cir.func<!s32i ()>>) -> !s32i loc(#loc33)
      %6 = cir.cast(int_to_bool, %5 : !s32i), !cir.bool loc(#loc33)
      cir.if %6 {
        cir.scope {
          %7 = cir.alloca !s32i, !cir.ptr<!s32i>, ["recvResult"] {alignment = 4 : i64} loc(#loc526)
          %8 = cir.alloca !ty_sockaddr_in, !cir.ptr<!ty_sockaddr_in>, ["service"] {alignment = 4 : i64} loc(#loc527)
          %9 = cir.alloca !s32i, !cir.ptr<!s32i>, ["listenSocket", init] {alignment = 4 : i64} loc(#loc528)
          %10 = cir.alloca !s32i, !cir.ptr<!s32i>, ["acceptSocket", init] {alignment = 4 : i64} loc(#loc529)
          %11 = cir.alloca !cir.array<!s8i x 14>, !cir.ptr<!cir.array<!s8i x 14>>, ["inputBuffer"] {alignment = 1 : i64} loc(#loc530)
          %12 = cir.const #cir.int<1> : !s32i loc(#loc45)
          %13 = cir.unary(minus, %12) : !s32i, !s32i loc(#loc45)
          cir.store %13, %9 : !s32i, !cir.ptr<!s32i> loc(#loc528)
          %14 = cir.const #cir.int<1> : !s32i loc(#loc47)
          %15 = cir.unary(minus, %14) : !s32i, !s32i loc(#loc47)
          cir.store %15, %10 : !s32i, !cir.ptr<!s32i> loc(#loc529)
          cir.scope {
            cir.do {
              %16 = cir.const #cir.int<2> : !s32i loc(#loc52)
              %17 = cir.const #cir.int<1> : !s32i loc(#loc53)
              %18 = cir.const #cir.int<6> : !s32i loc(#loc54)
              %19 = cir.call @socket(%16, %17, %18) : (!s32i, !s32i, !s32i) -> !s32i extra(#fn_attr) loc(#loc55)
              cir.store %19, %9 : !s32i, !cir.ptr<!s32i> loc(#loc532)
              cir.scope {
                %61 = cir.load %9 : !cir.ptr<!s32i>, !s32i loc(#loc60)
                %62 = cir.const #cir.int<1> : !s32i loc(#loc61)
                %63 = cir.unary(minus, %62) : !s32i, !s32i loc(#loc61)
                %64 = cir.cmp(eq, %61, %63) : !s32i, !cir.bool loc(#loc534)
                cir.if %64 {
                  cir.break loc(#loc63)
                } loc(#loc535)
              } loc(#loc533)
              %20 = cir.cast(bitcast, %8 : !cir.ptr<!ty_sockaddr_in>), !cir.ptr<!void> loc(#loc536)
              %21 = cir.const #cir.int<0> : !s32i loc(#loc66)
              %22 = cir.const #cir.int<16> : !u64i loc(#loc537)
              cir.libc.memset %22 bytes from %20 set to %21 : !cir.ptr<!void>, !s32i, !u64i loc(#loc538)
              %23 = cir.const #cir.int<2> : !s32i loc(#loc71)
              %24 = cir.cast(integral, %23 : !s32i), !u16i loc(#loc71)
              %25 = cir.get_member %8[0] {name = "sin_family"} : !cir.ptr<!ty_sockaddr_in> -> !cir.ptr<!u16i> loc(#loc72)
              cir.store %24, %25 : !u16i, !cir.ptr<!u16i> loc(#loc539)
              %26 = cir.const #cir.int<0> : !s32i loc(#loc74)
              %27 = cir.cast(integral, %26 : !s32i), !u32i loc(#loc74)
              %28 = cir.get_member %8[2] {name = "sin_addr"} : !cir.ptr<!ty_sockaddr_in> -> !cir.ptr<!ty_in_addr> loc(#loc75)
              %29 = cir.get_member %28[0] {name = "s_addr"} : !cir.ptr<!ty_in_addr> -> !cir.ptr<!u32i> loc(#loc76)
              cir.store %27, %29 : !u32i, !cir.ptr<!u32i> loc(#loc540)
              %30 = cir.const #cir.int<27015> : !s32i loc(#loc78)
              %31 = cir.cast(integral, %30 : !s32i), !u16i loc(#loc78)
              %32 = cir.call @htons(%31) : (!u16i) -> !u16i extra(#fn_attr) loc(#loc79)
              %33 = cir.get_member %8[1] {name = "sin_port"} : !cir.ptr<!ty_sockaddr_in> -> !cir.ptr<!u16i> loc(#loc80)
              cir.store %32, %33 : !u16i, !cir.ptr<!u16i> loc(#loc541)
              cir.scope {
                %61 = cir.load %9 : !cir.ptr<!s32i>, !s32i loc(#loc85)
                %62 = cir.cast(bitcast, %8 : !cir.ptr<!ty_sockaddr_in>), !cir.ptr<!ty_sockaddr> loc(#loc543)
                %63 = cir.const #cir.int<16> : !u64i loc(#loc544)
                %64 = cir.cast(integral, %63 : !u64i), !u32i loc(#loc544)
                %65 = cir.call @bind(%61, %62, %64) : (!s32i, !cir.ptr<!ty_sockaddr>, !u32i) -> !s32i extra(#fn_attr) loc(#loc90)
                %66 = cir.const #cir.int<1> : !s32i loc(#loc91)
                %67 = cir.unary(minus, %66) : !s32i, !s32i loc(#loc91)
                %68 = cir.cmp(eq, %65, %67) : !s32i, !cir.bool loc(#loc545)
                cir.if %68 {
                  cir.break loc(#loc93)
                } loc(#loc546)
              } loc(#loc542)
              cir.scope {
                %61 = cir.load %9 : !cir.ptr<!s32i>, !s32i loc(#loc96)
                %62 = cir.const #cir.int<5> : !s32i loc(#loc97)
                %63 = cir.call @listen(%61, %62) : (!s32i, !s32i) -> !s32i extra(#fn_attr) loc(#loc98)
                %64 = cir.const #cir.int<1> : !s32i loc(#loc99)
                %65 = cir.unary(minus, %64) : !s32i, !s32i loc(#loc99)
                %66 = cir.cmp(eq, %63, %65) : !s32i, !cir.bool loc(#loc548)
                cir.if %66 {
                  cir.break loc(#loc101)
                } loc(#loc549)
              } loc(#loc547)
              %34 = cir.load %9 : !cir.ptr<!s32i>, !s32i loc(#loc102)
              %35 = cir.const #cir.ptr<null> : !cir.ptr<!ty_sockaddr> loc(#loc103)
              %36 = cir.const #cir.ptr<null> : !cir.ptr<!u32i> loc(#loc104)
              %37 = cir.call @accept(%34, %35, %36) : (!s32i, !cir.ptr<!ty_sockaddr>, !cir.ptr<!u32i>) -> !s32i loc(#loc105)
              cir.store %37, %10 : !s32i, !cir.ptr<!s32i> loc(#loc550)
              cir.scope {
                %61 = cir.load %10 : !cir.ptr<!s32i>, !s32i loc(#loc110)
                %62 = cir.const #cir.int<1> : !s32i loc(#loc111)
                %63 = cir.unary(minus, %62) : !s32i, !s32i loc(#loc111)
                %64 = cir.cmp(eq, %61, %63) : !s32i, !cir.bool loc(#loc552)
                cir.if %64 {
                  cir.break loc(#loc113)
                } loc(#loc553)
              } loc(#loc551)
              %38 = cir.load %10 : !cir.ptr<!s32i>, !s32i loc(#loc114)
              %39 = cir.cast(array_to_ptrdecay, %11 : !cir.ptr<!cir.array<!s8i x 14>>), !cir.ptr<!s8i> loc(#loc115)
              %40 = cir.cast(bitcast, %39 : !cir.ptr<!s8i>), !cir.ptr<!void> loc(#loc115)
              %41 = cir.const #cir.int<3> : !s32i loc(#loc116)
              %42 = cir.cast(integral, %41 : !s32i), !u64i loc(#loc116)
              %43 = cir.const #cir.int<4> : !u64i loc(#loc116)
              %44 = cir.binop(mul, %42, %43) : !u64i loc(#loc116)
              %45 = cir.const #cir.int<2> : !s32i loc(#loc116)
              %46 = cir.cast(integral, %45 : !s32i), !u64i loc(#loc116)
              %47 = cir.binop(add, %44, %46) : !u64i loc(#loc116)
              %48 = cir.const #cir.int<1> : !s32i loc(#loc117)
              %49 = cir.cast(integral, %48 : !s32i), !u64i loc(#loc117)
              %50 = cir.binop(sub, %47, %49) : !u64i loc(#loc554)
              %51 = cir.const #cir.int<0> : !s32i loc(#loc118)
              %52 = cir.call @recv(%38, %40, %50, %51) : (!s32i, !cir.ptr<!void>, !u64i, !s32i) -> !s64i loc(#loc119)
              %53 = cir.cast(integral, %52 : !s64i), !s32i loc(#loc119)
              cir.store %53, %7 : !s32i, !cir.ptr<!s32i> loc(#loc555)
              cir.scope {
                %61 = cir.load %7 : !cir.ptr<!s32i>, !s32i loc(#loc124)
                %62 = cir.const #cir.int<1> : !s32i loc(#loc125)
                %63 = cir.unary(minus, %62) : !s32i, !s32i loc(#loc125)
                %64 = cir.cmp(eq, %61, %63) : !s32i, !cir.bool loc(#loc557)
                %65 = cir.ternary(%64, true {
                  %66 = cir.const #true loc(#loc126)
                  cir.yield %66 : !cir.bool loc(#loc126)
                }, false {
                  %66 = cir.load %7 : !cir.ptr<!s32i>, !s32i loc(#loc127)
                  %67 = cir.const #cir.int<0> : !s32i loc(#loc128)
                  %68 = cir.cmp(eq, %66, %67) : !s32i, !cir.bool loc(#loc558)
                  %69 = cir.ternary(%68, true {
                    %70 = cir.const #true loc(#loc126)
                    cir.yield %70 : !cir.bool loc(#loc126)
                  }, false {
                    %70 = cir.const #false loc(#loc126)
                    cir.yield %70 : !cir.bool loc(#loc126)
                  }) : (!cir.bool) -> !cir.bool loc(#loc126)
                  cir.yield %69 : !cir.bool loc(#loc126)
                }) : (!cir.bool) -> !cir.bool loc(#loc126)
                cir.if %65 {
                  cir.break loc(#loc130)
                } loc(#loc559)
              } loc(#loc556)
              %54 = cir.const #cir.int<0> : !s32i loc(#loc131)
              %55 = cir.cast(integral, %54 : !s32i), !s8i loc(#loc131)
              %56 = cir.load %7 : !cir.ptr<!s32i>, !s32i loc(#loc132)
              %57 = cir.cast(array_to_ptrdecay, %11 : !cir.ptr<!cir.array<!s8i x 14>>), !cir.ptr<!s8i> loc(#loc133)
              %58 = cir.ptr_stride(%57 : !cir.ptr<!s8i>, %56 : !s32i), !cir.ptr<!s8i> loc(#loc133)
              cir.store %55, %58 : !s8i, !cir.ptr<!s8i> loc(#loc560)
              %59 = cir.cast(array_to_ptrdecay, %11 : !cir.ptr<!cir.array<!s8i x 14>>), !cir.ptr<!s8i> loc(#loc134)
              %60 = cir.call @atoi(%59) : (!cir.ptr<!s8i>) -> !s32i extra(#fn_attr) loc(#loc135)
              cir.store %60, %0 : !s32i, !cir.ptr<!s32i> loc(#loc561)
              cir.yield loc(#loc51)
            } while {
              %16 = cir.const #cir.int<0> : !s32i loc(#loc138)
              %17 = cir.cast(int_to_bool, %16 : !s32i), !cir.bool loc(#loc138)
              cir.condition(%17) loc(#loc138)
            } loc(#loc531)
          } loc(#loc531)
          cir.scope {
            %16 = cir.load %9 : !cir.ptr<!s32i>, !s32i loc(#loc141)
            %17 = cir.const #cir.int<1> : !s32i loc(#loc142)
            %18 = cir.unary(minus, %17) : !s32i, !s32i loc(#loc142)
            %19 = cir.cmp(ne, %16, %18) : !s32i, !cir.bool loc(#loc563)
            cir.if %19 {
              %20 = cir.load %9 : !cir.ptr<!s32i>, !s32i loc(#loc144)
              %21 = cir.call @close(%20) : (!s32i) -> !s32i loc(#loc145)
            } loc(#loc564)
          } loc(#loc562)
          cir.scope {
            %16 = cir.load %10 : !cir.ptr<!s32i>, !s32i loc(#loc148)
            %17 = cir.const #cir.int<1> : !s32i loc(#loc149)
            %18 = cir.unary(minus, %17) : !s32i, !s32i loc(#loc149)
            %19 = cir.cmp(ne, %16, %18) : !s32i, !cir.bool loc(#loc566)
            cir.if %19 {
              %20 = cir.load %10 : !cir.ptr<!s32i>, !s32i loc(#loc151)
              %21 = cir.call @close(%20) : (!s32i) -> !s32i loc(#loc152)
            } loc(#loc567)
          } loc(#loc565)
        } loc(#loc525)
      } else {
        %7 = cir.const #cir.int<7> : !s32i loc(#loc153)
        cir.store %7, %0 : !s32i, !cir.ptr<!s32i> loc(#loc568)
      } loc(#loc524)
    } loc(#loc522)
    cir.scope {
      %3 = cir.get_global @globalReturnsTrueOrFalse : !cir.ptr<!cir.func<!s32i (...)>> loc(#loc570)
      %4 = cir.cast(bitcast, %3 : !cir.ptr<!cir.func<!s32i (...)>>), !cir.ptr<!cir.func<!s32i ()>> loc(#loc570)
      %5 = cir.call %4() : (!cir.ptr<!cir.func<!s32i ()>>) -> !s32i loc(#loc157)
      %6 = cir.cast(int_to_bool, %5 : !s32i), !cir.bool loc(#loc157)
      cir.if %6 {
        %7 = cir.const #cir.int<100> : !s32i loc(#loc162)
        %8 = cir.load %0 : !cir.ptr<!s32i>, !s32i loc(#loc163)
        %9 = cir.binop(div, %7, %8) : !s32i loc(#loc572)
        cir.call @printIntLine(%9) : (!s32i) -> () loc(#loc164)
      } else {
        cir.scope {
          %7 = cir.load %0 : !cir.ptr<!s32i>, !s32i loc(#loc167)
          %8 = cir.const #cir.int<0> : !s32i loc(#loc168)
          %9 = cir.cmp(ne, %7, %8) : !s32i, !cir.bool loc(#loc574)
          cir.if %9 {
            %10 = cir.const #cir.int<100> : !s32i loc(#loc172)
            %11 = cir.load %0 : !cir.ptr<!s32i>, !s32i loc(#loc173)
            %12 = cir.binop(div, %10, %11) : !s32i loc(#loc576)
            cir.call @printIntLine(%12) : (!s32i) -> () loc(#loc174)
          } else {
            %10 = cir.get_global @".str" : !cir.ptr<!cir.array<!s8i x 38>> loc(#loc23)
            %11 = cir.cast(array_to_ptrdecay, %10 : !cir.ptr<!cir.array<!s8i x 38>>), !cir.ptr<!s8i> loc(#loc23)
            cir.call @printLine(%11) : (!cir.ptr<!s8i>) -> () loc(#loc175)
          } loc(#loc575)
        } loc(#loc573)
      } loc(#loc571)
    } loc(#loc569)
    cir.return loc(#loc25)
  } loc(#loc519)
  cir.func no_proto @CWE369_Divide_by_Zero__int_listen_socket_divide_12_good() extra(#fn_attr1) {
    %0 = cir.get_global @goodB2G : !cir.ptr<!cir.func<!void ()>> loc(#loc578)
    cir.call %0() : (!cir.ptr<!cir.func<!void ()>>) -> () loc(#loc178)
    %1 = cir.get_global @goodG2B : !cir.ptr<!cir.func<!void ()>> loc(#loc579)
    cir.call %1() : (!cir.ptr<!cir.func<!void ()>>) -> () loc(#loc180)
    cir.return loc(#loc177)
  } loc(#loc577)
  cir.func private @srand(!u32i) extra(#fn_attr) loc(#loc580)
  cir.func private @time(!cir.ptr<!s64i>) -> !s64i extra(#fn_attr) loc(#loc581)
  cir.global "private" constant cir_private dsolocal @".str.1" = #cir.const_array<"Calling good()...\00" : !cir.array<!s8i x 18>> : !cir.array<!s8i x 18> {alignment = 1 : i64} loc(#loc186)
  cir.global "private" constant cir_private dsolocal @".str.2" = #cir.const_array<"Finished good()\00" : !cir.array<!s8i x 16>> : !cir.array<!s8i x 16> {alignment = 1 : i64} loc(#loc187)
  cir.global "private" constant cir_private dsolocal @".str.3" = #cir.const_array<"Calling bad()...\00" : !cir.array<!s8i x 17>> : !cir.array<!s8i x 17> {alignment = 1 : i64} loc(#loc188)
  cir.global "private" constant cir_private dsolocal @".str.4" = #cir.const_array<"Finished bad()\00" : !cir.array<!s8i x 15>> : !cir.array<!s8i x 15> {alignment = 1 : i64} loc(#loc189)
  cir.func @main(%arg0: !s32i loc(fused[#loc192, #loc193]), %arg1: !cir.ptr<!cir.ptr<!s8i>> loc(fused[#loc194, #loc195])) -> !s32i extra(#fn_attr1) {
    %0 = cir.alloca !s32i, !cir.ptr<!s32i>, ["argc", init] {alignment = 4 : i64} loc(#loc583)
    %1 = cir.alloca !cir.ptr<!cir.ptr<!s8i>>, !cir.ptr<!cir.ptr<!cir.ptr<!s8i>>>, ["argv", init] {alignment = 8 : i64} loc(#loc584)
    %2 = cir.alloca !s32i, !cir.ptr<!s32i>, ["__retval"] {alignment = 4 : i64} loc(#loc191)
    cir.store %arg0, %0 : !s32i, !cir.ptr<!s32i> loc(#loc196)
    cir.store %arg1, %1 : !cir.ptr<!cir.ptr<!s8i>>, !cir.ptr<!cir.ptr<!cir.ptr<!s8i>>> loc(#loc196)
    %3 = cir.const #cir.ptr<null> : !cir.ptr<!s64i> loc(#loc197)
    %4 = cir.call @time(%3) : (!cir.ptr<!s64i>) -> !s64i extra(#fn_attr) loc(#loc198)
    %5 = cir.cast(integral, %4 : !s64i), !u32i loc(#loc198)
    cir.call @srand(%5) : (!u32i) -> () extra(#fn_attr) loc(#loc199)
    %6 = cir.get_global @".str.1" : !cir.ptr<!cir.array<!s8i x 18>> loc(#loc186)
    %7 = cir.cast(array_to_ptrdecay, %6 : !cir.ptr<!cir.array<!s8i x 18>>), !cir.ptr<!s8i> loc(#loc186)
    cir.call @printLine(%7) : (!cir.ptr<!s8i>) -> () loc(#loc200)
    %8 = cir.get_global @CWE369_Divide_by_Zero__int_listen_socket_divide_12_good : !cir.ptr<!cir.func<!void ()>> loc(#loc585)
    cir.call @CWE369_Divide_by_Zero__int_listen_socket_divide_12_good() : () -> () loc(#loc201)
    %9 = cir.get_global @".str.2" : !cir.ptr<!cir.array<!s8i x 16>> loc(#loc187)
    %10 = cir.cast(array_to_ptrdecay, %9 : !cir.ptr<!cir.array<!s8i x 16>>), !cir.ptr<!s8i> loc(#loc187)
    cir.call @printLine(%10) : (!cir.ptr<!s8i>) -> () loc(#loc203)
    %11 = cir.get_global @".str.3" : !cir.ptr<!cir.array<!s8i x 17>> loc(#loc188)
    %12 = cir.cast(array_to_ptrdecay, %11 : !cir.ptr<!cir.array<!s8i x 17>>), !cir.ptr<!s8i> loc(#loc188)
    cir.call @printLine(%12) : (!cir.ptr<!s8i>) -> () loc(#loc204)
    %13 = cir.get_global @CWE369_Divide_by_Zero__int_listen_socket_divide_12_bad : !cir.ptr<!cir.func<!void ()>> loc(#loc586)
    cir.call @CWE369_Divide_by_Zero__int_listen_socket_divide_12_bad() : () -> () loc(#loc205)
    %14 = cir.get_global @".str.4" : !cir.ptr<!cir.array<!s8i x 15>> loc(#loc189)
    %15 = cir.cast(array_to_ptrdecay, %14 : !cir.ptr<!cir.array<!s8i x 15>>), !cir.ptr<!s8i> loc(#loc189)
    cir.call @printLine(%15) : (!cir.ptr<!s8i>) -> () loc(#loc207)
    %16 = cir.const #cir.int<0> : !s32i loc(#loc208)
    cir.store %16, %2 : !s32i, !cir.ptr<!s32i> loc(#loc587)
    %17 = cir.load %2 : !cir.ptr<!s32i>, !s32i loc(#loc587)
    cir.return %17 : !s32i loc(#loc587)
  } loc(#loc582)
  cir.func no_proto internal private @goodB2G() extra(#fn_attr1) {
    %0 = cir.alloca !s32i, !cir.ptr<!s32i>, ["data"] {alignment = 4 : i64} loc(#loc589)
    %1 = cir.const #cir.int<1> : !s32i loc(#loc214)
    %2 = cir.unary(minus, %1) : !s32i, !s32i loc(#loc215)
    cir.store %2, %0 : !s32i, !cir.ptr<!s32i> loc(#loc590)
    cir.scope {
      %3 = cir.get_global @globalReturnsTrueOrFalse : !cir.ptr<!cir.func<!s32i (...)>> loc(#loc592)
      %4 = cir.cast(bitcast, %3 : !cir.ptr<!cir.func<!s32i (...)>>), !cir.ptr<!cir.func<!s32i ()>> loc(#loc592)
      %5 = cir.call %4() : (!cir.ptr<!cir.func<!s32i ()>>) -> !s32i loc(#loc219)
      %6 = cir.cast(int_to_bool, %5 : !s32i), !cir.bool loc(#loc219)
      cir.if %6 {
        cir.scope {
          %7 = cir.alloca !s32i, !cir.ptr<!s32i>, ["recvResult"] {alignment = 4 : i64} loc(#loc595)
          %8 = cir.alloca !ty_sockaddr_in, !cir.ptr<!ty_sockaddr_in>, ["service"] {alignment = 4 : i64} loc(#loc596)
          %9 = cir.alloca !s32i, !cir.ptr<!s32i>, ["listenSocket", init] {alignment = 4 : i64} loc(#loc597)
          %10 = cir.alloca !s32i, !cir.ptr<!s32i>, ["acceptSocket", init] {alignment = 4 : i64} loc(#loc598)
          %11 = cir.alloca !cir.array<!s8i x 14>, !cir.ptr<!cir.array<!s8i x 14>>, ["inputBuffer"] {alignment = 1 : i64} loc(#loc599)
          %12 = cir.const #cir.int<1> : !s32i loc(#loc231)
          %13 = cir.unary(minus, %12) : !s32i, !s32i loc(#loc231)
          cir.store %13, %9 : !s32i, !cir.ptr<!s32i> loc(#loc597)
          %14 = cir.const #cir.int<1> : !s32i loc(#loc233)
          %15 = cir.unary(minus, %14) : !s32i, !s32i loc(#loc233)
          cir.store %15, %10 : !s32i, !cir.ptr<!s32i> loc(#loc598)
          cir.scope {
            cir.do {
              %16 = cir.const #cir.int<2> : !s32i loc(#loc238)
              %17 = cir.const #cir.int<1> : !s32i loc(#loc239)
              %18 = cir.const #cir.int<6> : !s32i loc(#loc240)
              %19 = cir.call @socket(%16, %17, %18) : (!s32i, !s32i, !s32i) -> !s32i extra(#fn_attr) loc(#loc241)
              cir.store %19, %9 : !s32i, !cir.ptr<!s32i> loc(#loc601)
              cir.scope {
                %61 = cir.load %9 : !cir.ptr<!s32i>, !s32i loc(#loc246)
                %62 = cir.const #cir.int<1> : !s32i loc(#loc247)
                %63 = cir.unary(minus, %62) : !s32i, !s32i loc(#loc247)
                %64 = cir.cmp(eq, %61, %63) : !s32i, !cir.bool loc(#loc603)
                cir.if %64 {
                  cir.break loc(#loc249)
                } loc(#loc604)
              } loc(#loc602)
              %20 = cir.cast(bitcast, %8 : !cir.ptr<!ty_sockaddr_in>), !cir.ptr<!void> loc(#loc605)
              %21 = cir.const #cir.int<0> : !s32i loc(#loc252)
              %22 = cir.const #cir.int<16> : !u64i loc(#loc606)
              cir.libc.memset %22 bytes from %20 set to %21 : !cir.ptr<!void>, !s32i, !u64i loc(#loc607)
              %23 = cir.const #cir.int<2> : !s32i loc(#loc257)
              %24 = cir.cast(integral, %23 : !s32i), !u16i loc(#loc257)
              %25 = cir.get_member %8[0] {name = "sin_family"} : !cir.ptr<!ty_sockaddr_in> -> !cir.ptr<!u16i> loc(#loc72)
              cir.store %24, %25 : !u16i, !cir.ptr<!u16i> loc(#loc608)
              %26 = cir.const #cir.int<0> : !s32i loc(#loc259)
              %27 = cir.cast(integral, %26 : !s32i), !u32i loc(#loc259)
              %28 = cir.get_member %8[2] {name = "sin_addr"} : !cir.ptr<!ty_sockaddr_in> -> !cir.ptr<!ty_in_addr> loc(#loc75)
              %29 = cir.get_member %28[0] {name = "s_addr"} : !cir.ptr<!ty_in_addr> -> !cir.ptr<!u32i> loc(#loc76)
              cir.store %27, %29 : !u32i, !cir.ptr<!u32i> loc(#loc609)
              %30 = cir.const #cir.int<27015> : !s32i loc(#loc261)
              %31 = cir.cast(integral, %30 : !s32i), !u16i loc(#loc261)
              %32 = cir.call @htons(%31) : (!u16i) -> !u16i extra(#fn_attr) loc(#loc262)
              %33 = cir.get_member %8[1] {name = "sin_port"} : !cir.ptr<!ty_sockaddr_in> -> !cir.ptr<!u16i> loc(#loc80)
              cir.store %32, %33 : !u16i, !cir.ptr<!u16i> loc(#loc610)
              cir.scope {
                %61 = cir.load %9 : !cir.ptr<!s32i>, !s32i loc(#loc267)
                %62 = cir.cast(bitcast, %8 : !cir.ptr<!ty_sockaddr_in>), !cir.ptr<!ty_sockaddr> loc(#loc612)
                %63 = cir.const #cir.int<16> : !u64i loc(#loc613)
                %64 = cir.cast(integral, %63 : !u64i), !u32i loc(#loc613)
                %65 = cir.call @bind(%61, %62, %64) : (!s32i, !cir.ptr<!ty_sockaddr>, !u32i) -> !s32i extra(#fn_attr) loc(#loc272)
                %66 = cir.const #cir.int<1> : !s32i loc(#loc273)
                %67 = cir.unary(minus, %66) : !s32i, !s32i loc(#loc273)
                %68 = cir.cmp(eq, %65, %67) : !s32i, !cir.bool loc(#loc614)
                cir.if %68 {
                  cir.break loc(#loc275)
                } loc(#loc615)
              } loc(#loc611)
              cir.scope {
                %61 = cir.load %9 : !cir.ptr<!s32i>, !s32i loc(#loc278)
                %62 = cir.const #cir.int<5> : !s32i loc(#loc279)
                %63 = cir.call @listen(%61, %62) : (!s32i, !s32i) -> !s32i extra(#fn_attr) loc(#loc280)
                %64 = cir.const #cir.int<1> : !s32i loc(#loc281)
                %65 = cir.unary(minus, %64) : !s32i, !s32i loc(#loc281)
                %66 = cir.cmp(eq, %63, %65) : !s32i, !cir.bool loc(#loc617)
                cir.if %66 {
                  cir.break loc(#loc283)
                } loc(#loc618)
              } loc(#loc616)
              %34 = cir.load %9 : !cir.ptr<!s32i>, !s32i loc(#loc284)
              %35 = cir.const #cir.ptr<null> : !cir.ptr<!ty_sockaddr> loc(#loc285)
              %36 = cir.const #cir.ptr<null> : !cir.ptr<!u32i> loc(#loc286)
              %37 = cir.call @accept(%34, %35, %36) : (!s32i, !cir.ptr<!ty_sockaddr>, !cir.ptr<!u32i>) -> !s32i loc(#loc287)
              cir.store %37, %10 : !s32i, !cir.ptr<!s32i> loc(#loc619)
              cir.scope {
                %61 = cir.load %10 : !cir.ptr<!s32i>, !s32i loc(#loc292)
                %62 = cir.const #cir.int<1> : !s32i loc(#loc293)
                %63 = cir.unary(minus, %62) : !s32i, !s32i loc(#loc293)
                %64 = cir.cmp(eq, %61, %63) : !s32i, !cir.bool loc(#loc621)
                cir.if %64 {
                  cir.break loc(#loc295)
                } loc(#loc622)
              } loc(#loc620)
              %38 = cir.load %10 : !cir.ptr<!s32i>, !s32i loc(#loc296)
              %39 = cir.cast(array_to_ptrdecay, %11 : !cir.ptr<!cir.array<!s8i x 14>>), !cir.ptr<!s8i> loc(#loc297)
              %40 = cir.cast(bitcast, %39 : !cir.ptr<!s8i>), !cir.ptr<!void> loc(#loc297)
              %41 = cir.const #cir.int<3> : !s32i loc(#loc298)
              %42 = cir.cast(integral, %41 : !s32i), !u64i loc(#loc298)
              %43 = cir.const #cir.int<4> : !u64i loc(#loc298)
              %44 = cir.binop(mul, %42, %43) : !u64i loc(#loc298)
              %45 = cir.const #cir.int<2> : !s32i loc(#loc298)
              %46 = cir.cast(integral, %45 : !s32i), !u64i loc(#loc298)
              %47 = cir.binop(add, %44, %46) : !u64i loc(#loc298)
              %48 = cir.const #cir.int<1> : !s32i loc(#loc299)
              %49 = cir.cast(integral, %48 : !s32i), !u64i loc(#loc299)
              %50 = cir.binop(sub, %47, %49) : !u64i loc(#loc623)
              %51 = cir.const #cir.int<0> : !s32i loc(#loc300)
              %52 = cir.call @recv(%38, %40, %50, %51) : (!s32i, !cir.ptr<!void>, !u64i, !s32i) -> !s64i loc(#loc301)
              %53 = cir.cast(integral, %52 : !s64i), !s32i loc(#loc301)
              cir.store %53, %7 : !s32i, !cir.ptr<!s32i> loc(#loc624)
              cir.scope {
                %61 = cir.load %7 : !cir.ptr<!s32i>, !s32i loc(#loc306)
                %62 = cir.const #cir.int<1> : !s32i loc(#loc307)
                %63 = cir.unary(minus, %62) : !s32i, !s32i loc(#loc307)
                %64 = cir.cmp(eq, %61, %63) : !s32i, !cir.bool loc(#loc626)
                %65 = cir.ternary(%64, true {
                  %66 = cir.const #true loc(#loc308)
                  cir.yield %66 : !cir.bool loc(#loc308)
                }, false {
                  %66 = cir.load %7 : !cir.ptr<!s32i>, !s32i loc(#loc309)
                  %67 = cir.const #cir.int<0> : !s32i loc(#loc310)
                  %68 = cir.cmp(eq, %66, %67) : !s32i, !cir.bool loc(#loc627)
                  %69 = cir.ternary(%68, true {
                    %70 = cir.const #true loc(#loc308)
                    cir.yield %70 : !cir.bool loc(#loc308)
                  }, false {
                    %70 = cir.const #false loc(#loc308)
                    cir.yield %70 : !cir.bool loc(#loc308)
                  }) : (!cir.bool) -> !cir.bool loc(#loc308)
                  cir.yield %69 : !cir.bool loc(#loc308)
                }) : (!cir.bool) -> !cir.bool loc(#loc308)
                cir.if %65 {
                  cir.break loc(#loc312)
                } loc(#loc628)
              } loc(#loc625)
              %54 = cir.const #cir.int<0> : !s32i loc(#loc313)
              %55 = cir.cast(integral, %54 : !s32i), !s8i loc(#loc313)
              %56 = cir.load %7 : !cir.ptr<!s32i>, !s32i loc(#loc314)
              %57 = cir.cast(array_to_ptrdecay, %11 : !cir.ptr<!cir.array<!s8i x 14>>), !cir.ptr<!s8i> loc(#loc315)
              %58 = cir.ptr_stride(%57 : !cir.ptr<!s8i>, %56 : !s32i), !cir.ptr<!s8i> loc(#loc315)
              cir.store %55, %58 : !s8i, !cir.ptr<!s8i> loc(#loc629)
              %59 = cir.cast(array_to_ptrdecay, %11 : !cir.ptr<!cir.array<!s8i x 14>>), !cir.ptr<!s8i> loc(#loc316)
              %60 = cir.call @atoi(%59) : (!cir.ptr<!s8i>) -> !s32i extra(#fn_attr) loc(#loc317)
              cir.store %60, %0 : !s32i, !cir.ptr<!s32i> loc(#loc630)
              cir.yield loc(#loc237)
            } while {
              %16 = cir.const #cir.int<0> : !s32i loc(#loc320)
              %17 = cir.cast(int_to_bool, %16 : !s32i), !cir.bool loc(#loc320)
              cir.condition(%17) loc(#loc320)
            } loc(#loc600)
          } loc(#loc600)
          cir.scope {
            %16 = cir.load %9 : !cir.ptr<!s32i>, !s32i loc(#loc323)
            %17 = cir.const #cir.int<1> : !s32i loc(#loc324)
            %18 = cir.unary(minus, %17) : !s32i, !s32i loc(#loc324)
            %19 = cir.cmp(ne, %16, %18) : !s32i, !cir.bool loc(#loc632)
            cir.if %19 {
              %20 = cir.load %9 : !cir.ptr<!s32i>, !s32i loc(#loc326)
              %21 = cir.call @close(%20) : (!s32i) -> !s32i loc(#loc327)
            } loc(#loc633)
          } loc(#loc631)
          cir.scope {
            %16 = cir.load %10 : !cir.ptr<!s32i>, !s32i loc(#loc330)
            %17 = cir.const #cir.int<1> : !s32i loc(#loc331)
            %18 = cir.unary(minus, %17) : !s32i, !s32i loc(#loc331)
            %19 = cir.cmp(ne, %16, %18) : !s32i, !cir.bool loc(#loc635)
            cir.if %19 {
              %20 = cir.load %10 : !cir.ptr<!s32i>, !s32i loc(#loc333)
              %21 = cir.call @close(%20) : (!s32i) -> !s32i loc(#loc334)
            } loc(#loc636)
          } loc(#loc634)
        } loc(#loc594)
      } else {
        cir.scope {
          %7 = cir.alloca !s32i, !cir.ptr<!s32i>, ["recvResult"] {alignment = 4 : i64} loc(#loc638)
          %8 = cir.alloca !ty_sockaddr_in, !cir.ptr<!ty_sockaddr_in>, ["service"] {alignment = 4 : i64} loc(#loc639)
          %9 = cir.alloca !s32i, !cir.ptr<!s32i>, ["listenSocket", init] {alignment = 4 : i64} loc(#loc640)
          %10 = cir.alloca !s32i, !cir.ptr<!s32i>, ["acceptSocket", init] {alignment = 4 : i64} loc(#loc641)
          %11 = cir.alloca !cir.array<!s8i x 14>, !cir.ptr<!cir.array<!s8i x 14>>, ["inputBuffer"] {alignment = 1 : i64} loc(#loc642)
          %12 = cir.const #cir.int<1> : !s32i loc(#loc342)
          %13 = cir.unary(minus, %12) : !s32i, !s32i loc(#loc342)
          cir.store %13, %9 : !s32i, !cir.ptr<!s32i> loc(#loc640)
          %14 = cir.const #cir.int<1> : !s32i loc(#loc344)
          %15 = cir.unary(minus, %14) : !s32i, !s32i loc(#loc344)
          cir.store %15, %10 : !s32i, !cir.ptr<!s32i> loc(#loc641)
          cir.scope {
            cir.do {
              %16 = cir.const #cir.int<2> : !s32i loc(#loc349)
              %17 = cir.const #cir.int<1> : !s32i loc(#loc350)
              %18 = cir.const #cir.int<6> : !s32i loc(#loc351)
              %19 = cir.call @socket(%16, %17, %18) : (!s32i, !s32i, !s32i) -> !s32i extra(#fn_attr) loc(#loc352)
              cir.store %19, %9 : !s32i, !cir.ptr<!s32i> loc(#loc644)
              cir.scope {
                %61 = cir.load %9 : !cir.ptr<!s32i>, !s32i loc(#loc357)
                %62 = cir.const #cir.int<1> : !s32i loc(#loc358)
                %63 = cir.unary(minus, %62) : !s32i, !s32i loc(#loc358)
                %64 = cir.cmp(eq, %61, %63) : !s32i, !cir.bool loc(#loc646)
                cir.if %64 {
                  cir.break loc(#loc360)
                } loc(#loc647)
              } loc(#loc645)
              %20 = cir.cast(bitcast, %8 : !cir.ptr<!ty_sockaddr_in>), !cir.ptr<!void> loc(#loc648)
              %21 = cir.const #cir.int<0> : !s32i loc(#loc363)
              %22 = cir.const #cir.int<16> : !u64i loc(#loc649)
              cir.libc.memset %22 bytes from %20 set to %21 : !cir.ptr<!void>, !s32i, !u64i loc(#loc650)
              %23 = cir.const #cir.int<2> : !s32i loc(#loc368)
              %24 = cir.cast(integral, %23 : !s32i), !u16i loc(#loc368)
              %25 = cir.get_member %8[0] {name = "sin_family"} : !cir.ptr<!ty_sockaddr_in> -> !cir.ptr<!u16i> loc(#loc72)
              cir.store %24, %25 : !u16i, !cir.ptr<!u16i> loc(#loc651)
              %26 = cir.const #cir.int<0> : !s32i loc(#loc370)
              %27 = cir.cast(integral, %26 : !s32i), !u32i loc(#loc370)
              %28 = cir.get_member %8[2] {name = "sin_addr"} : !cir.ptr<!ty_sockaddr_in> -> !cir.ptr<!ty_in_addr> loc(#loc75)
              %29 = cir.get_member %28[0] {name = "s_addr"} : !cir.ptr<!ty_in_addr> -> !cir.ptr<!u32i> loc(#loc76)
              cir.store %27, %29 : !u32i, !cir.ptr<!u32i> loc(#loc652)
              %30 = cir.const #cir.int<27015> : !s32i loc(#loc372)
              %31 = cir.cast(integral, %30 : !s32i), !u16i loc(#loc372)
              %32 = cir.call @htons(%31) : (!u16i) -> !u16i extra(#fn_attr) loc(#loc373)
              %33 = cir.get_member %8[1] {name = "sin_port"} : !cir.ptr<!ty_sockaddr_in> -> !cir.ptr<!u16i> loc(#loc80)
              cir.store %32, %33 : !u16i, !cir.ptr<!u16i> loc(#loc653)
              cir.scope {
                %61 = cir.load %9 : !cir.ptr<!s32i>, !s32i loc(#loc378)
                %62 = cir.cast(bitcast, %8 : !cir.ptr<!ty_sockaddr_in>), !cir.ptr<!ty_sockaddr> loc(#loc655)
                %63 = cir.const #cir.int<16> : !u64i loc(#loc656)
                %64 = cir.cast(integral, %63 : !u64i), !u32i loc(#loc656)
                %65 = cir.call @bind(%61, %62, %64) : (!s32i, !cir.ptr<!ty_sockaddr>, !u32i) -> !s32i extra(#fn_attr) loc(#loc383)
                %66 = cir.const #cir.int<1> : !s32i loc(#loc384)
                %67 = cir.unary(minus, %66) : !s32i, !s32i loc(#loc384)
                %68 = cir.cmp(eq, %65, %67) : !s32i, !cir.bool loc(#loc657)
                cir.if %68 {
                  cir.break loc(#loc386)
                } loc(#loc658)
              } loc(#loc654)
              cir.scope {
                %61 = cir.load %9 : !cir.ptr<!s32i>, !s32i loc(#loc389)
                %62 = cir.const #cir.int<5> : !s32i loc(#loc390)
                %63 = cir.call @listen(%61, %62) : (!s32i, !s32i) -> !s32i extra(#fn_attr) loc(#loc391)
                %64 = cir.const #cir.int<1> : !s32i loc(#loc392)
                %65 = cir.unary(minus, %64) : !s32i, !s32i loc(#loc392)
                %66 = cir.cmp(eq, %63, %65) : !s32i, !cir.bool loc(#loc660)
                cir.if %66 {
                  cir.break loc(#loc394)
                } loc(#loc661)
              } loc(#loc659)
              %34 = cir.load %9 : !cir.ptr<!s32i>, !s32i loc(#loc395)
              %35 = cir.const #cir.ptr<null> : !cir.ptr<!ty_sockaddr> loc(#loc396)
              %36 = cir.const #cir.ptr<null> : !cir.ptr<!u32i> loc(#loc397)
              %37 = cir.call @accept(%34, %35, %36) : (!s32i, !cir.ptr<!ty_sockaddr>, !cir.ptr<!u32i>) -> !s32i loc(#loc398)
              cir.store %37, %10 : !s32i, !cir.ptr<!s32i> loc(#loc662)
              cir.scope {
                %61 = cir.load %10 : !cir.ptr<!s32i>, !s32i loc(#loc403)
                %62 = cir.const #cir.int<1> : !s32i loc(#loc404)
                %63 = cir.unary(minus, %62) : !s32i, !s32i loc(#loc404)
                %64 = cir.cmp(eq, %61, %63) : !s32i, !cir.bool loc(#loc664)
                cir.if %64 {
                  cir.break loc(#loc406)
                } loc(#loc665)
              } loc(#loc663)
              %38 = cir.load %10 : !cir.ptr<!s32i>, !s32i loc(#loc407)
              %39 = cir.cast(array_to_ptrdecay, %11 : !cir.ptr<!cir.array<!s8i x 14>>), !cir.ptr<!s8i> loc(#loc408)
              %40 = cir.cast(bitcast, %39 : !cir.ptr<!s8i>), !cir.ptr<!void> loc(#loc408)
              %41 = cir.const #cir.int<3> : !s32i loc(#loc409)
              %42 = cir.cast(integral, %41 : !s32i), !u64i loc(#loc409)
              %43 = cir.const #cir.int<4> : !u64i loc(#loc409)
              %44 = cir.binop(mul, %42, %43) : !u64i loc(#loc409)
              %45 = cir.const #cir.int<2> : !s32i loc(#loc409)
              %46 = cir.cast(integral, %45 : !s32i), !u64i loc(#loc409)
              %47 = cir.binop(add, %44, %46) : !u64i loc(#loc409)
              %48 = cir.const #cir.int<1> : !s32i loc(#loc410)
              %49 = cir.cast(integral, %48 : !s32i), !u64i loc(#loc410)
              %50 = cir.binop(sub, %47, %49) : !u64i loc(#loc666)
              %51 = cir.const #cir.int<0> : !s32i loc(#loc411)
              %52 = cir.call @recv(%38, %40, %50, %51) : (!s32i, !cir.ptr<!void>, !u64i, !s32i) -> !s64i loc(#loc412)
              %53 = cir.cast(integral, %52 : !s64i), !s32i loc(#loc412)
              cir.store %53, %7 : !s32i, !cir.ptr<!s32i> loc(#loc667)
              cir.scope {
                %61 = cir.load %7 : !cir.ptr<!s32i>, !s32i loc(#loc417)
                %62 = cir.const #cir.int<1> : !s32i loc(#loc418)
                %63 = cir.unary(minus, %62) : !s32i, !s32i loc(#loc418)
                %64 = cir.cmp(eq, %61, %63) : !s32i, !cir.bool loc(#loc669)
                %65 = cir.ternary(%64, true {
                  %66 = cir.const #true loc(#loc419)
                  cir.yield %66 : !cir.bool loc(#loc419)
                }, false {
                  %66 = cir.load %7 : !cir.ptr<!s32i>, !s32i loc(#loc420)
                  %67 = cir.const #cir.int<0> : !s32i loc(#loc421)
                  %68 = cir.cmp(eq, %66, %67) : !s32i, !cir.bool loc(#loc670)
                  %69 = cir.ternary(%68, true {
                    %70 = cir.const #true loc(#loc419)
                    cir.yield %70 : !cir.bool loc(#loc419)
                  }, false {
                    %70 = cir.const #false loc(#loc419)
                    cir.yield %70 : !cir.bool loc(#loc419)
                  }) : (!cir.bool) -> !cir.bool loc(#loc419)
                  cir.yield %69 : !cir.bool loc(#loc419)
                }) : (!cir.bool) -> !cir.bool loc(#loc419)
                cir.if %65 {
                  cir.break loc(#loc423)
                } loc(#loc671)
              } loc(#loc668)
              %54 = cir.const #cir.int<0> : !s32i loc(#loc424)
              %55 = cir.cast(integral, %54 : !s32i), !s8i loc(#loc424)
              %56 = cir.load %7 : !cir.ptr<!s32i>, !s32i loc(#loc425)
              %57 = cir.cast(array_to_ptrdecay, %11 : !cir.ptr<!cir.array<!s8i x 14>>), !cir.ptr<!s8i> loc(#loc426)
              %58 = cir.ptr_stride(%57 : !cir.ptr<!s8i>, %56 : !s32i), !cir.ptr<!s8i> loc(#loc426)
              cir.store %55, %58 : !s8i, !cir.ptr<!s8i> loc(#loc672)
              %59 = cir.cast(array_to_ptrdecay, %11 : !cir.ptr<!cir.array<!s8i x 14>>), !cir.ptr<!s8i> loc(#loc427)
              %60 = cir.call @atoi(%59) : (!cir.ptr<!s8i>) -> !s32i extra(#fn_attr) loc(#loc428)
              cir.store %60, %0 : !s32i, !cir.ptr<!s32i> loc(#loc673)
              cir.yield loc(#loc348)
            } while {
              %16 = cir.const #cir.int<0> : !s32i loc(#loc431)
              %17 = cir.cast(int_to_bool, %16 : !s32i), !cir.bool loc(#loc431)
              cir.condition(%17) loc(#loc431)
            } loc(#loc643)
          } loc(#loc643)
          cir.scope {
            %16 = cir.load %9 : !cir.ptr<!s32i>, !s32i loc(#loc434)
            %17 = cir.const #cir.int<1> : !s32i loc(#loc435)
            %18 = cir.unary(minus, %17) : !s32i, !s32i loc(#loc435)
            %19 = cir.cmp(ne, %16, %18) : !s32i, !cir.bool loc(#loc675)
            cir.if %19 {
              %20 = cir.load %9 : !cir.ptr<!s32i>, !s32i loc(#loc437)
              %21 = cir.call @close(%20) : (!s32i) -> !s32i loc(#loc438)
            } loc(#loc676)
          } loc(#loc674)
          cir.scope {
            %16 = cir.load %10 : !cir.ptr<!s32i>, !s32i loc(#loc441)
            %17 = cir.const #cir.int<1> : !s32i loc(#loc442)
            %18 = cir.unary(minus, %17) : !s32i, !s32i loc(#loc442)
            %19 = cir.cmp(ne, %16, %18) : !s32i, !cir.bool loc(#loc678)
            cir.if %19 {
              %20 = cir.load %10 : !cir.ptr<!s32i>, !s32i loc(#loc444)
              %21 = cir.call @close(%20) : (!s32i) -> !s32i loc(#loc445)
            } loc(#loc679)
          } loc(#loc677)
        } loc(#loc637)
      } loc(#loc593)
    } loc(#loc591)
    cir.scope {
      %3 = cir.get_global @globalReturnsTrueOrFalse : !cir.ptr<!cir.func<!s32i (...)>> loc(#loc681)
      %4 = cir.cast(bitcast, %3 : !cir.ptr<!cir.func<!s32i (...)>>), !cir.ptr<!cir.func<!s32i ()>> loc(#loc681)
      %5 = cir.call %4() : (!cir.ptr<!cir.func<!s32i ()>>) -> !s32i loc(#loc448)
      %6 = cir.cast(int_to_bool, %5 : !s32i), !cir.bool loc(#loc448)
      cir.if %6 {
        cir.scope {
          %7 = cir.load %0 : !cir.ptr<!s32i>, !s32i loc(#loc455)
          %8 = cir.const #cir.int<0> : !s32i loc(#loc456)
          %9 = cir.cmp(ne, %7, %8) : !s32i, !cir.bool loc(#loc684)
          cir.if %9 {
            %10 = cir.const #cir.int<100> : !s32i loc(#loc460)
            %11 = cir.load %0 : !cir.ptr<!s32i>, !s32i loc(#loc461)
            %12 = cir.binop(div, %10, %11) : !s32i loc(#loc686)
            cir.call @printIntLine(%12) : (!s32i) -> () loc(#loc462)
          } else {
            %10 = cir.get_global @".str" : !cir.ptr<!cir.array<!s8i x 38>> loc(#loc463)
            %11 = cir.cast(array_to_ptrdecay, %10 : !cir.ptr<!cir.array<!s8i x 38>>), !cir.ptr<!s8i> loc(#loc463)
            cir.call @printLine(%11) : (!cir.ptr<!s8i>) -> () loc(#loc464)
          } loc(#loc685)
        } loc(#loc683)
      } else {
        cir.scope {
          %7 = cir.load %0 : !cir.ptr<!s32i>, !s32i loc(#loc467)
          %8 = cir.const #cir.int<0> : !s32i loc(#loc468)
          %9 = cir.cmp(ne, %7, %8) : !s32i, !cir.bool loc(#loc688)
          cir.if %9 {
            %10 = cir.const #cir.int<100> : !s32i loc(#loc472)
            %11 = cir.load %0 : !cir.ptr<!s32i>, !s32i loc(#loc473)
            %12 = cir.binop(div, %10, %11) : !s32i loc(#loc690)
            cir.call @printIntLine(%12) : (!s32i) -> () loc(#loc474)
          } else {
            %10 = cir.get_global @".str" : !cir.ptr<!cir.array<!s8i x 38>> loc(#loc475)
            %11 = cir.cast(array_to_ptrdecay, %10 : !cir.ptr<!cir.array<!s8i x 38>>), !cir.ptr<!s8i> loc(#loc475)
            cir.call @printLine(%11) : (!cir.ptr<!s8i>) -> () loc(#loc476)
          } loc(#loc689)
        } loc(#loc687)
      } loc(#loc682)
    } loc(#loc680)
    cir.return loc(#loc211)
  } loc(#loc588)
  cir.func no_proto internal private @goodG2B() extra(#fn_attr1) {
    %0 = cir.alloca !s32i, !cir.ptr<!s32i>, ["data"] {alignment = 4 : i64} loc(#loc692)
    %1 = cir.const #cir.int<1> : !s32i loc(#loc481)
    %2 = cir.unary(minus, %1) : !s32i, !s32i loc(#loc482)
    cir.store %2, %0 : !s32i, !cir.ptr<!s32i> loc(#loc693)
    cir.scope {
      %3 = cir.get_global @globalReturnsTrueOrFalse : !cir.ptr<!cir.func<!s32i (...)>> loc(#loc695)
      %4 = cir.cast(bitcast, %3 : !cir.ptr<!cir.func<!s32i (...)>>), !cir.ptr<!cir.func<!s32i ()>> loc(#loc695)
      %5 = cir.call %4() : (!cir.ptr<!cir.func<!s32i ()>>) -> !s32i loc(#loc486)
      %6 = cir.cast(int_to_bool, %5 : !s32i), !cir.bool loc(#loc486)
      cir.if %6 {
        %7 = cir.const #cir.int<7> : !s32i loc(#loc491)
        cir.store %7, %0 : !s32i, !cir.ptr<!s32i> loc(#loc697)
      } else {
        %7 = cir.const #cir.int<7> : !s32i loc(#loc493)
        cir.store %7, %0 : !s32i, !cir.ptr<!s32i> loc(#loc698)
      } loc(#loc696)
    } loc(#loc694)
    cir.scope {
      %3 = cir.get_global @globalReturnsTrueOrFalse : !cir.ptr<!cir.func<!s32i (...)>> loc(#loc700)
      %4 = cir.cast(bitcast, %3 : !cir.ptr<!cir.func<!s32i (...)>>), !cir.ptr<!cir.func<!s32i ()>> loc(#loc700)
      %5 = cir.call %4() : (!cir.ptr<!cir.func<!s32i ()>>) -> !s32i loc(#loc497)
      %6 = cir.cast(int_to_bool, %5 : !s32i), !cir.bool loc(#loc497)
      cir.if %6 {
        %7 = cir.const #cir.int<100> : !s32i loc(#loc502)
        %8 = cir.load %0 : !cir.ptr<!s32i>, !s32i loc(#loc503)
        %9 = cir.binop(div, %7, %8) : !s32i loc(#loc702)
        cir.call @printIntLine(%9) : (!s32i) -> () loc(#loc504)
      } else {
        %7 = cir.const #cir.int<100> : !s32i loc(#loc505)
        %8 = cir.load %0 : !cir.ptr<!s32i>, !s32i loc(#loc506)
        %9 = cir.binop(div, %7, %8) : !s32i loc(#loc703)
        cir.call @printIntLine(%9) : (!s32i) -> () loc(#loc507)
      } loc(#loc701)
    } loc(#loc699)
    cir.return loc(#loc478)
  } loc(#loc691)
} loc(#loc)
#loc = loc("/home/ladisgin/git_proj/juliet-c/testcases/CWE369_Divide_by_Zero/s02/CWE369_Divide_by_Zero__int_listen_socket_divide_12.c":0:0)
#loc1 = loc("../../../testcasesupport/std_testcase_io.h":52:1)
#loc2 = loc("../../../testcasesupport/std_testcase_io.h":52:30)
#loc3 = loc("/usr/include/sys/socket.h":102:1)
#loc4 = loc("/usr/include/sys/socket.h":102:62)
#loc5 = loc("/usr/include/netinet/in.h":404:1)
#loc6 = loc("/usr/include/netinet/in.h":405:40)
#loc7 = loc("/usr/include/sys/socket.h":112:1)
#loc8 = loc("/usr/include/sys/socket.h":113:6)
#loc9 = loc("/usr/include/sys/socket.h":296:1)
#loc10 = loc("/usr/include/sys/socket.h":296:39)
#loc11 = loc("/usr/include/sys/socket.h":306:1)
#loc12 = loc("/usr/include/sys/socket.h":307:38)
#loc13 = loc("/usr/include/sys/socket.h":145:1)
#loc14 = loc("/usr/include/sys/socket.h":145:68)
#loc15 = loc("/usr/include/stdlib.h":105:1)
#loc16 = loc("/usr/include/stdlib.h":106:33)
#loc17 = loc("/usr/include/unistd.h":358:1)
#loc18 = loc("/usr/include/unistd.h":358:27)
#loc19 = loc("../../../testcasesupport/std_testcase_io.h":18:1)
#loc20 = loc("../../../testcasesupport/std_testcase_io.h":18:33)
#loc21 = loc("../../../testcasesupport/std_testcase_io.h":14:1)
#loc22 = loc("../../../testcasesupport/std_testcase_io.h":14:33)
#loc23 = loc("CWE369_Divide_by_Zero__int_listen_socket_divide_12.c":140:23)
#loc24 = loc("CWE369_Divide_by_Zero__int_listen_socket_divide_12.c":44:1)
#loc25 = loc("CWE369_Divide_by_Zero__int_listen_socket_divide_12.c":143:1)
#loc26 = loc("CWE369_Divide_by_Zero__int_listen_socket_divide_12.c":46:5)
#loc27 = loc("CWE369_Divide_by_Zero__int_listen_socket_divide_12.c":46:9)
#loc28 = loc("CWE369_Divide_by_Zero__int_listen_socket_divide_12.c":48:13)
#loc29 = loc("CWE369_Divide_by_Zero__int_listen_socket_divide_12.c":48:12)
#loc30 = loc("CWE369_Divide_by_Zero__int_listen_socket_divide_12.c":48:5)
#loc31 = loc("CWE369_Divide_by_Zero__int_listen_socket_divide_12.c":49:5)
#loc32 = loc("CWE369_Divide_by_Zero__int_listen_socket_divide_12.c":125:5)
#loc33 = loc("CWE369_Divide_by_Zero__int_listen_socket_divide_12.c":49:8)
#loc34 = loc("CWE369_Divide_by_Zero__int_listen_socket_divide_12.c":49:33)
#loc35 = loc("CWE369_Divide_by_Zero__int_listen_socket_divide_12.c":50:5)
#loc36 = loc("CWE369_Divide_by_Zero__int_listen_socket_divide_12.c":120:5)
#loc37 = loc("CWE369_Divide_by_Zero__int_listen_socket_divide_12.c":122:5)
#loc38 = loc("CWE369_Divide_by_Zero__int_listen_socket_divide_12.c":51:9)
#loc39 = loc("CWE369_Divide_by_Zero__int_listen_socket_divide_12.c":119:9)
#loc40 = loc("CWE369_Divide_by_Zero__int_listen_socket_divide_12.c":56:13)
#loc41 = loc("CWE369_Divide_by_Zero__int_listen_socket_divide_12.c":56:17)
#loc42 = loc("CWE369_Divide_by_Zero__int_listen_socket_divide_12.c":57:13)
#loc43 = loc("CWE369_Divide_by_Zero__int_listen_socket_divide_12.c":57:32)
#loc44 = loc("CWE369_Divide_by_Zero__int_listen_socket_divide_12.c":58:13)
#loc45 = loc("CWE369_Divide_by_Zero__int_listen_socket_divide_12.c":58:35)
#loc46 = loc("CWE369_Divide_by_Zero__int_listen_socket_divide_12.c":59:13)
#loc47 = loc("CWE369_Divide_by_Zero__int_listen_socket_divide_12.c":59:35)
#loc48 = loc("CWE369_Divide_by_Zero__int_listen_socket_divide_12.c":60:13)
#loc49 = loc("CWE369_Divide_by_Zero__int_listen_socket_divide_12.c":60:45)
#loc50 = loc("CWE369_Divide_by_Zero__int_listen_socket_divide_12.c":61:13)
#loc51 = loc("CWE369_Divide_by_Zero__int_listen_socket_divide_12.c":104:21)
#loc52 = loc("CWE369_Divide_by_Zero__int_listen_socket_divide_12.c":71:39)
#loc53 = loc("CWE369_Divide_by_Zero__int_listen_socket_divide_12.c":71:48)
#loc54 = loc("CWE369_Divide_by_Zero__int_listen_socket_divide_12.c":71:61)
#loc55 = loc("CWE369_Divide_by_Zero__int_listen_socket_divide_12.c":71:32)
#loc56 = loc("CWE369_Divide_by_Zero__int_listen_socket_divide_12.c":71:17)
#loc57 = loc("CWE369_Divide_by_Zero__int_listen_socket_divide_12.c":71:72)
#loc58 = loc("CWE369_Divide_by_Zero__int_listen_socket_divide_12.c":72:17)
#loc59 = loc("CWE369_Divide_by_Zero__int_listen_socket_divide_12.c":75:17)
#loc60 = loc("CWE369_Divide_by_Zero__int_listen_socket_divide_12.c":72:21)
#loc61 = loc("CWE369_Divide_by_Zero__int_listen_socket_divide_12.c":72:37)
#loc62 = loc("CWE369_Divide_by_Zero__int_listen_socket_divide_12.c":73:17)
#loc63 = loc("CWE369_Divide_by_Zero__int_listen_socket_divide_12.c":74:21)
#loc64 = loc("CWE369_Divide_by_Zero__int_listen_socket_divide_12.c":76:24)
#loc65 = loc("CWE369_Divide_by_Zero__int_listen_socket_divide_12.c":76:25)
#loc66 = loc("CWE369_Divide_by_Zero__int_listen_socket_divide_12.c":76:34)
#loc67 = loc("CWE369_Divide_by_Zero__int_listen_socket_divide_12.c":76:37)
#loc68 = loc("CWE369_Divide_by_Zero__int_listen_socket_divide_12.c":76:51)
#loc69 = loc("CWE369_Divide_by_Zero__int_listen_socket_divide_12.c":76:17)
#loc70 = loc("CWE369_Divide_by_Zero__int_listen_socket_divide_12.c":76:52)
#loc71 = loc("CWE369_Divide_by_Zero__int_listen_socket_divide_12.c":77:38)
#loc72 = loc("/usr/include/netinet/in.h":249:5)
#loc73 = loc("CWE369_Divide_by_Zero__int_listen_socket_divide_12.c":77:17)
#loc74 = loc("CWE369_Divide_by_Zero__int_listen_socket_divide_12.c":78:43)
#loc75 = loc("/usr/include/netinet/in.h":251:20)
#loc76 = loc("/usr/include/netinet/in.h":33:15)
#loc77 = loc("CWE369_Divide_by_Zero__int_listen_socket_divide_12.c":78:17)
#loc78 = loc("CWE369_Divide_by_Zero__int_listen_socket_divide_12.c":79:42)
#loc79 = loc("CWE369_Divide_by_Zero__int_listen_socket_divide_12.c":79:36)
#loc80 = loc("/usr/include/netinet/in.h":250:15)
#loc81 = loc("CWE369_Divide_by_Zero__int_listen_socket_divide_12.c":79:17)
#loc82 = loc("CWE369_Divide_by_Zero__int_listen_socket_divide_12.c":79:50)
#loc83 = loc("CWE369_Divide_by_Zero__int_listen_socket_divide_12.c":80:17)
#loc84 = loc("CWE369_Divide_by_Zero__int_listen_socket_divide_12.c":83:17)
#loc85 = loc("CWE369_Divide_by_Zero__int_listen_socket_divide_12.c":80:26)
#loc86 = loc("CWE369_Divide_by_Zero__int_listen_socket_divide_12.c":80:58)
#loc87 = loc("CWE369_Divide_by_Zero__int_listen_socket_divide_12.c":80:59)
#loc88 = loc("CWE369_Divide_by_Zero__int_listen_socket_divide_12.c":80:68)
#loc89 = loc("CWE369_Divide_by_Zero__int_listen_socket_divide_12.c":80:82)
#loc90 = loc("CWE369_Divide_by_Zero__int_listen_socket_divide_12.c":80:21)
#loc91 = loc("CWE369_Divide_by_Zero__int_listen_socket_divide_12.c":80:88)
#loc92 = loc("CWE369_Divide_by_Zero__int_listen_socket_divide_12.c":81:17)
#loc93 = loc("CWE369_Divide_by_Zero__int_listen_socket_divide_12.c":82:21)
#loc94 = loc("CWE369_Divide_by_Zero__int_listen_socket_divide_12.c":84:17)
#loc95 = loc("CWE369_Divide_by_Zero__int_listen_socket_divide_12.c":87:17)
#loc96 = loc("CWE369_Divide_by_Zero__int_listen_socket_divide_12.c":84:28)
#loc97 = loc("CWE369_Divide_by_Zero__int_listen_socket_divide_12.c":84:42)
#loc98 = loc("CWE369_Divide_by_Zero__int_listen_socket_divide_12.c":84:21)
#loc99 = loc("CWE369_Divide_by_Zero__int_listen_socket_divide_12.c":84:61)
#loc100 = loc("CWE369_Divide_by_Zero__int_listen_socket_divide_12.c":85:17)
#loc101 = loc("CWE369_Divide_by_Zero__int_listen_socket_divide_12.c":86:21)
#loc102 = loc("CWE369_Divide_by_Zero__int_listen_socket_divide_12.c":88:39)
#loc103 = loc("CWE369_Divide_by_Zero__int_listen_socket_divide_12.c":88:53)
#loc104 = loc("CWE369_Divide_by_Zero__int_listen_socket_divide_12.c":88:59)
#loc105 = loc("CWE369_Divide_by_Zero__int_listen_socket_divide_12.c":88:32)
#loc106 = loc("CWE369_Divide_by_Zero__int_listen_socket_divide_12.c":88:17)
#loc107 = loc("CWE369_Divide_by_Zero__int_listen_socket_divide_12.c":88:63)
#loc108 = loc("CWE369_Divide_by_Zero__int_listen_socket_divide_12.c":89:17)
#loc109 = loc("CWE369_Divide_by_Zero__int_listen_socket_divide_12.c":92:17)
#loc110 = loc("CWE369_Divide_by_Zero__int_listen_socket_divide_12.c":89:21)
#loc111 = loc("CWE369_Divide_by_Zero__int_listen_socket_divide_12.c":89:37)
#loc112 = loc("CWE369_Divide_by_Zero__int_listen_socket_divide_12.c":90:17)
#loc113 = loc("CWE369_Divide_by_Zero__int_listen_socket_divide_12.c":91:21)
#loc114 = loc("CWE369_Divide_by_Zero__int_listen_socket_divide_12.c":94:35)
#loc115 = loc("CWE369_Divide_by_Zero__int_listen_socket_divide_12.c":94:49)
#loc116 = loc("CWE369_Divide_by_Zero__int_listen_socket_divide_12.c":94:62)
#loc117 = loc("CWE369_Divide_by_Zero__int_listen_socket_divide_12.c":94:80)
#loc118 = loc("CWE369_Divide_by_Zero__int_listen_socket_divide_12.c":94:83)
#loc119 = loc("CWE369_Divide_by_Zero__int_listen_socket_divide_12.c":94:30)
#loc120 = loc("CWE369_Divide_by_Zero__int_listen_socket_divide_12.c":94:17)
#loc121 = loc("CWE369_Divide_by_Zero__int_listen_socket_divide_12.c":94:84)
#loc122 = loc("CWE369_Divide_by_Zero__int_listen_socket_divide_12.c":95:17)
#loc123 = loc("CWE369_Divide_by_Zero__int_listen_socket_divide_12.c":98:17)
#loc124 = loc("CWE369_Divide_by_Zero__int_listen_socket_divide_12.c":95:21)
#loc125 = loc("CWE369_Divide_by_Zero__int_listen_socket_divide_12.c":95:35)
#loc126 = loc("CWE369_Divide_by_Zero__int_listen_socket_divide_12.c":95:48)
#loc127 = loc("CWE369_Divide_by_Zero__int_listen_socket_divide_12.c":95:51)
#loc128 = loc("CWE369_Divide_by_Zero__int_listen_socket_divide_12.c":95:65)
#loc129 = loc("CWE369_Divide_by_Zero__int_listen_socket_divide_12.c":96:17)
#loc130 = loc("CWE369_Divide_by_Zero__int_listen_socket_divide_12.c":97:21)
#loc131 = loc("CWE369_Divide_by_Zero__int_listen_socket_divide_12.c":100:43)
#loc132 = loc("CWE369_Divide_by_Zero__int_listen_socket_divide_12.c":100:29)
#loc133 = loc("CWE369_Divide_by_Zero__int_listen_socket_divide_12.c":100:17)
#loc134 = loc("CWE369_Divide_by_Zero__int_listen_socket_divide_12.c":102:29)
#loc135 = loc("CWE369_Divide_by_Zero__int_listen_socket_divide_12.c":102:24)
#loc136 = loc("CWE369_Divide_by_Zero__int_listen_socket_divide_12.c":102:17)
#loc137 = loc("CWE369_Divide_by_Zero__int_listen_socket_divide_12.c":102:40)
#loc138 = loc("CWE369_Divide_by_Zero__int_listen_socket_divide_12.c":104:20)
#loc139 = loc("CWE369_Divide_by_Zero__int_listen_socket_divide_12.c":105:13)
#loc140 = loc("CWE369_Divide_by_Zero__int_listen_socket_divide_12.c":108:13)
#loc141 = loc("CWE369_Divide_by_Zero__int_listen_socket_divide_12.c":105:17)
#loc142 = loc("CWE369_Divide_by_Zero__int_listen_socket_divide_12.c":105:33)
#loc143 = loc("CWE369_Divide_by_Zero__int_listen_socket_divide_12.c":106:13)
#loc144 = loc("CWE369_Divide_by_Zero__int_listen_socket_divide_12.c":107:30)
#loc145 = loc("CWE369_Divide_by_Zero__int_listen_socket_divide_12.c":107:17)
#loc146 = loc("CWE369_Divide_by_Zero__int_listen_socket_divide_12.c":109:13)
#loc147 = loc("CWE369_Divide_by_Zero__int_listen_socket_divide_12.c":112:13)
#loc148 = loc("CWE369_Divide_by_Zero__int_listen_socket_divide_12.c":109:17)
#loc149 = loc("CWE369_Divide_by_Zero__int_listen_socket_divide_12.c":109:33)
#loc150 = loc("CWE369_Divide_by_Zero__int_listen_socket_divide_12.c":110:13)
#loc151 = loc("CWE369_Divide_by_Zero__int_listen_socket_divide_12.c":111:30)
#loc152 = loc("CWE369_Divide_by_Zero__int_listen_socket_divide_12.c":111:17)
#loc153 = loc("CWE369_Divide_by_Zero__int_listen_socket_divide_12.c":124:16)
#loc154 = loc("CWE369_Divide_by_Zero__int_listen_socket_divide_12.c":124:9)
#loc155 = loc("CWE369_Divide_by_Zero__int_listen_socket_divide_12.c":126:5)
#loc156 = loc("CWE369_Divide_by_Zero__int_listen_socket_divide_12.c":142:5)
#loc157 = loc("CWE369_Divide_by_Zero__int_listen_socket_divide_12.c":126:8)
#loc158 = loc("CWE369_Divide_by_Zero__int_listen_socket_divide_12.c":126:33)
#loc159 = loc("CWE369_Divide_by_Zero__int_listen_socket_divide_12.c":127:5)
#loc160 = loc("CWE369_Divide_by_Zero__int_listen_socket_divide_12.c":130:5)
#loc161 = loc("CWE369_Divide_by_Zero__int_listen_socket_divide_12.c":132:5)
#loc162 = loc("CWE369_Divide_by_Zero__int_listen_socket_divide_12.c":129:22)
#loc163 = loc("CWE369_Divide_by_Zero__int_listen_socket_divide_12.c":129:28)
#loc164 = loc("CWE369_Divide_by_Zero__int_listen_socket_divide_12.c":129:9)
#loc165 = loc("CWE369_Divide_by_Zero__int_listen_socket_divide_12.c":134:9)
#loc166 = loc("CWE369_Divide_by_Zero__int_listen_socket_divide_12.c":141:9)
#loc167 = loc("CWE369_Divide_by_Zero__int_listen_socket_divide_12.c":134:13)
#loc168 = loc("CWE369_Divide_by_Zero__int_listen_socket_divide_12.c":134:21)
#loc169 = loc("CWE369_Divide_by_Zero__int_listen_socket_divide_12.c":135:9)
#loc170 = loc("CWE369_Divide_by_Zero__int_listen_socket_divide_12.c":137:9)
#loc171 = loc("CWE369_Divide_by_Zero__int_listen_socket_divide_12.c":139:9)
#loc172 = loc("CWE369_Divide_by_Zero__int_listen_socket_divide_12.c":136:26)
#loc173 = loc("CWE369_Divide_by_Zero__int_listen_socket_divide_12.c":136:32)
#loc174 = loc("CWE369_Divide_by_Zero__int_listen_socket_divide_12.c":136:13)
#loc175 = loc("CWE369_Divide_by_Zero__int_listen_socket_divide_12.c":140:13)
#loc176 = loc("CWE369_Divide_by_Zero__int_listen_socket_divide_12.c":357:1)
#loc177 = loc("CWE369_Divide_by_Zero__int_listen_socket_divide_12.c":361:1)
#loc178 = loc("CWE369_Divide_by_Zero__int_listen_socket_divide_12.c":359:5)
#loc179 = loc("CWE369_Divide_by_Zero__int_listen_socket_divide_12.c":359:13)
#loc180 = loc("CWE369_Divide_by_Zero__int_listen_socket_divide_12.c":360:5)
#loc181 = loc("CWE369_Divide_by_Zero__int_listen_socket_divide_12.c":360:13)
#loc182 = loc("/usr/include/stdlib.h":575:1)
#loc183 = loc("/usr/include/stdlib.h":575:41)
#loc184 = loc("/usr/include/time.h":76:1)
#loc185 = loc("/usr/include/time.h":76:38)
#loc186 = loc("CWE369_Divide_by_Zero__int_listen_socket_divide_12.c":377:15)
#loc187 = loc("CWE369_Divide_by_Zero__int_listen_socket_divide_12.c":379:15)
#loc188 = loc("CWE369_Divide_by_Zero__int_listen_socket_divide_12.c":382:15)
#loc189 = loc("CWE369_Divide_by_Zero__int_listen_socket_divide_12.c":384:15)
#loc190 = loc("CWE369_Divide_by_Zero__int_listen_socket_divide_12.c":372:1)
#loc191 = loc("CWE369_Divide_by_Zero__int_listen_socket_divide_12.c":387:1)
#loc196 = loc("CWE369_Divide_by_Zero__int_listen_socket_divide_12.c":373:1)
#loc197 = loc("CWE369_Divide_by_Zero__int_listen_socket_divide_12.c":375:27)
#loc198 = loc("CWE369_Divide_by_Zero__int_listen_socket_divide_12.c":375:22)
#loc199 = loc("CWE369_Divide_by_Zero__int_listen_socket_divide_12.c":375:5)
#loc200 = loc("CWE369_Divide_by_Zero__int_listen_socket_divide_12.c":377:5)
#loc201 = loc("CWE369_Divide_by_Zero__int_listen_socket_divide_12.c":378:5)
#loc202 = loc("CWE369_Divide_by_Zero__int_listen_socket_divide_12.c":378:61)
#loc203 = loc("CWE369_Divide_by_Zero__int_listen_socket_divide_12.c":379:5)
#loc204 = loc("CWE369_Divide_by_Zero__int_listen_socket_divide_12.c":382:5)
#loc205 = loc("CWE369_Divide_by_Zero__int_listen_socket_divide_12.c":383:5)
#loc206 = loc("CWE369_Divide_by_Zero__int_listen_socket_divide_12.c":383:60)
#loc207 = loc("CWE369_Divide_by_Zero__int_listen_socket_divide_12.c":384:5)
#loc208 = loc("CWE369_Divide_by_Zero__int_listen_socket_divide_12.c":386:12)
#loc209 = loc("CWE369_Divide_by_Zero__int_listen_socket_divide_12.c":386:5)
#loc210 = loc("CWE369_Divide_by_Zero__int_listen_socket_divide_12.c":152:1)
#loc211 = loc("CWE369_Divide_by_Zero__int_listen_socket_divide_12.c":325:1)
#loc212 = loc("CWE369_Divide_by_Zero__int_listen_socket_divide_12.c":154:5)
#loc213 = loc("CWE369_Divide_by_Zero__int_listen_socket_divide_12.c":154:9)
#loc214 = loc("CWE369_Divide_by_Zero__int_listen_socket_divide_12.c":156:13)
#loc215 = loc("CWE369_Divide_by_Zero__int_listen_socket_divide_12.c":156:12)
#loc216 = loc("CWE369_Divide_by_Zero__int_listen_socket_divide_12.c":156:5)
#loc217 = loc("CWE369_Divide_by_Zero__int_listen_socket_divide_12.c":157:5)
#loc218 = loc("CWE369_Divide_by_Zero__int_listen_socket_divide_12.c":300:5)
#loc219 = loc("CWE369_Divide_by_Zero__int_listen_socket_divide_12.c":157:8)
#loc220 = loc("CWE369_Divide_by_Zero__int_listen_socket_divide_12.c":157:33)
#loc221 = loc("CWE369_Divide_by_Zero__int_listen_socket_divide_12.c":158:5)
#loc222 = loc("CWE369_Divide_by_Zero__int_listen_socket_divide_12.c":228:5)
#loc223 = loc("CWE369_Divide_by_Zero__int_listen_socket_divide_12.c":230:5)
#loc224 = loc("CWE369_Divide_by_Zero__int_listen_socket_divide_12.c":159:9)
#loc225 = loc("CWE369_Divide_by_Zero__int_listen_socket_divide_12.c":227:9)
#loc226 = loc("CWE369_Divide_by_Zero__int_listen_socket_divide_12.c":164:13)
#loc227 = loc("CWE369_Divide_by_Zero__int_listen_socket_divide_12.c":164:17)
#loc228 = loc("CWE369_Divide_by_Zero__int_listen_socket_divide_12.c":165:13)
#loc229 = loc("CWE369_Divide_by_Zero__int_listen_socket_divide_12.c":165:32)
#loc230 = loc("CWE369_Divide_by_Zero__int_listen_socket_divide_12.c":166:13)
#loc231 = loc("CWE369_Divide_by_Zero__int_listen_socket_divide_12.c":166:35)
#loc232 = loc("CWE369_Divide_by_Zero__int_listen_socket_divide_12.c":167:13)
#loc233 = loc("CWE369_Divide_by_Zero__int_listen_socket_divide_12.c":167:35)
#loc234 = loc("CWE369_Divide_by_Zero__int_listen_socket_divide_12.c":168:13)
#loc235 = loc("CWE369_Divide_by_Zero__int_listen_socket_divide_12.c":168:45)
#loc236 = loc("CWE369_Divide_by_Zero__int_listen_socket_divide_12.c":169:13)
#loc237 = loc("CWE369_Divide_by_Zero__int_listen_socket_divide_12.c":212:21)
#loc238 = loc("CWE369_Divide_by_Zero__int_listen_socket_divide_12.c":179:39)
#loc239 = loc("CWE369_Divide_by_Zero__int_listen_socket_divide_12.c":179:48)
#loc240 = loc("CWE369_Divide_by_Zero__int_listen_socket_divide_12.c":179:61)
#loc241 = loc("CWE369_Divide_by_Zero__int_listen_socket_divide_12.c":179:32)
#loc242 = loc("CWE369_Divide_by_Zero__int_listen_socket_divide_12.c":179:17)
#loc243 = loc("CWE369_Divide_by_Zero__int_listen_socket_divide_12.c":179:72)
#loc244 = loc("CWE369_Divide_by_Zero__int_listen_socket_divide_12.c":180:17)
#loc245 = loc("CWE369_Divide_by_Zero__int_listen_socket_divide_12.c":183:17)
#loc246 = loc("CWE369_Divide_by_Zero__int_listen_socket_divide_12.c":180:21)
#loc247 = loc("CWE369_Divide_by_Zero__int_listen_socket_divide_12.c":180:37)
#loc248 = loc("CWE369_Divide_by_Zero__int_listen_socket_divide_12.c":181:17)
#loc249 = loc("CWE369_Divide_by_Zero__int_listen_socket_divide_12.c":182:21)
#loc250 = loc("CWE369_Divide_by_Zero__int_listen_socket_divide_12.c":184:24)
#loc251 = loc("CWE369_Divide_by_Zero__int_listen_socket_divide_12.c":184:25)
#loc252 = loc("CWE369_Divide_by_Zero__int_listen_socket_divide_12.c":184:34)
#loc253 = loc("CWE369_Divide_by_Zero__int_listen_socket_divide_12.c":184:37)
#loc254 = loc("CWE369_Divide_by_Zero__int_listen_socket_divide_12.c":184:51)
#loc255 = loc("CWE369_Divide_by_Zero__int_listen_socket_divide_12.c":184:17)
#loc256 = loc("CWE369_Divide_by_Zero__int_listen_socket_divide_12.c":184:52)
#loc257 = loc("CWE369_Divide_by_Zero__int_listen_socket_divide_12.c":185:38)
#loc258 = loc("CWE369_Divide_by_Zero__int_listen_socket_divide_12.c":185:17)
#loc259 = loc("CWE369_Divide_by_Zero__int_listen_socket_divide_12.c":186:43)
#loc260 = loc("CWE369_Divide_by_Zero__int_listen_socket_divide_12.c":186:17)
#loc261 = loc("CWE369_Divide_by_Zero__int_listen_socket_divide_12.c":187:42)
#loc262 = loc("CWE369_Divide_by_Zero__int_listen_socket_divide_12.c":187:36)
#loc263 = loc("CWE369_Divide_by_Zero__int_listen_socket_divide_12.c":187:17)
#loc264 = loc("CWE369_Divide_by_Zero__int_listen_socket_divide_12.c":187:50)
#loc265 = loc("CWE369_Divide_by_Zero__int_listen_socket_divide_12.c":188:17)
#loc266 = loc("CWE369_Divide_by_Zero__int_listen_socket_divide_12.c":191:17)
#loc267 = loc("CWE369_Divide_by_Zero__int_listen_socket_divide_12.c":188:26)
#loc268 = loc("CWE369_Divide_by_Zero__int_listen_socket_divide_12.c":188:58)
#loc269 = loc("CWE369_Divide_by_Zero__int_listen_socket_divide_12.c":188:59)
#loc270 = loc("CWE369_Divide_by_Zero__int_listen_socket_divide_12.c":188:68)
#loc271 = loc("CWE369_Divide_by_Zero__int_listen_socket_divide_12.c":188:82)
#loc272 = loc("CWE369_Divide_by_Zero__int_listen_socket_divide_12.c":188:21)
#loc273 = loc("CWE369_Divide_by_Zero__int_listen_socket_divide_12.c":188:88)
#loc274 = loc("CWE369_Divide_by_Zero__int_listen_socket_divide_12.c":189:17)
#loc275 = loc("CWE369_Divide_by_Zero__int_listen_socket_divide_12.c":190:21)
#loc276 = loc("CWE369_Divide_by_Zero__int_listen_socket_divide_12.c":192:17)
#loc277 = loc("CWE369_Divide_by_Zero__int_listen_socket_divide_12.c":195:17)
#loc278 = loc("CWE369_Divide_by_Zero__int_listen_socket_divide_12.c":192:28)
#loc279 = loc("CWE369_Divide_by_Zero__int_listen_socket_divide_12.c":192:42)
#loc280 = loc("CWE369_Divide_by_Zero__int_listen_socket_divide_12.c":192:21)
#loc281 = loc("CWE369_Divide_by_Zero__int_listen_socket_divide_12.c":192:61)
#loc282 = loc("CWE369_Divide_by_Zero__int_listen_socket_divide_12.c":193:17)
#loc283 = loc("CWE369_Divide_by_Zero__int_listen_socket_divide_12.c":194:21)
#loc284 = loc("CWE369_Divide_by_Zero__int_listen_socket_divide_12.c":196:39)
#loc285 = loc("CWE369_Divide_by_Zero__int_listen_socket_divide_12.c":196:53)
#loc286 = loc("CWE369_Divide_by_Zero__int_listen_socket_divide_12.c":196:59)
#loc287 = loc("CWE369_Divide_by_Zero__int_listen_socket_divide_12.c":196:32)
#loc288 = loc("CWE369_Divide_by_Zero__int_listen_socket_divide_12.c":196:17)
#loc289 = loc("CWE369_Divide_by_Zero__int_listen_socket_divide_12.c":196:63)
#loc290 = loc("CWE369_Divide_by_Zero__int_listen_socket_divide_12.c":197:17)
#loc291 = loc("CWE369_Divide_by_Zero__int_listen_socket_divide_12.c":200:17)
#loc292 = loc("CWE369_Divide_by_Zero__int_listen_socket_divide_12.c":197:21)
#loc293 = loc("CWE369_Divide_by_Zero__int_listen_socket_divide_12.c":197:37)
#loc294 = loc("CWE369_Divide_by_Zero__int_listen_socket_divide_12.c":198:17)
#loc295 = loc("CWE369_Divide_by_Zero__int_listen_socket_divide_12.c":199:21)
#loc296 = loc("CWE369_Divide_by_Zero__int_listen_socket_divide_12.c":202:35)
#loc297 = loc("CWE369_Divide_by_Zero__int_listen_socket_divide_12.c":202:49)
#loc298 = loc("CWE369_Divide_by_Zero__int_listen_socket_divide_12.c":202:62)
#loc299 = loc("CWE369_Divide_by_Zero__int_listen_socket_divide_12.c":202:80)
#loc300 = loc("CWE369_Divide_by_Zero__int_listen_socket_divide_12.c":202:83)
#loc301 = loc("CWE369_Divide_by_Zero__int_listen_socket_divide_12.c":202:30)
#loc302 = loc("CWE369_Divide_by_Zero__int_listen_socket_divide_12.c":202:17)
#loc303 = loc("CWE369_Divide_by_Zero__int_listen_socket_divide_12.c":202:84)
#loc304 = loc("CWE369_Divide_by_Zero__int_listen_socket_divide_12.c":203:17)
#loc305 = loc("CWE369_Divide_by_Zero__int_listen_socket_divide_12.c":206:17)
#loc306 = loc("CWE369_Divide_by_Zero__int_listen_socket_divide_12.c":203:21)
#loc307 = loc("CWE369_Divide_by_Zero__int_listen_socket_divide_12.c":203:35)
#loc308 = loc("CWE369_Divide_by_Zero__int_listen_socket_divide_12.c":203:48)
#loc309 = loc("CWE369_Divide_by_Zero__int_listen_socket_divide_12.c":203:51)
#loc310 = loc("CWE369_Divide_by_Zero__int_listen_socket_divide_12.c":203:65)
#loc311 = loc("CWE369_Divide_by_Zero__int_listen_socket_divide_12.c":204:17)
#loc312 = loc("CWE369_Divide_by_Zero__int_listen_socket_divide_12.c":205:21)
#loc313 = loc("CWE369_Divide_by_Zero__int_listen_socket_divide_12.c":208:43)
#loc314 = loc("CWE369_Divide_by_Zero__int_listen_socket_divide_12.c":208:29)
#loc315 = loc("CWE369_Divide_by_Zero__int_listen_socket_divide_12.c":208:17)
#loc316 = loc("CWE369_Divide_by_Zero__int_listen_socket_divide_12.c":210:29)
#loc317 = loc("CWE369_Divide_by_Zero__int_listen_socket_divide_12.c":210:24)
#loc318 = loc("CWE369_Divide_by_Zero__int_listen_socket_divide_12.c":210:17)
#loc319 = loc("CWE369_Divide_by_Zero__int_listen_socket_divide_12.c":210:40)
#loc320 = loc("CWE369_Divide_by_Zero__int_listen_socket_divide_12.c":212:20)
#loc321 = loc("CWE369_Divide_by_Zero__int_listen_socket_divide_12.c":213:13)
#loc322 = loc("CWE369_Divide_by_Zero__int_listen_socket_divide_12.c":216:13)
#loc323 = loc("CWE369_Divide_by_Zero__int_listen_socket_divide_12.c":213:17)
#loc324 = loc("CWE369_Divide_by_Zero__int_listen_socket_divide_12.c":213:33)
#loc325 = loc("CWE369_Divide_by_Zero__int_listen_socket_divide_12.c":214:13)
#loc326 = loc("CWE369_Divide_by_Zero__int_listen_socket_divide_12.c":215:30)
#loc327 = loc("CWE369_Divide_by_Zero__int_listen_socket_divide_12.c":215:17)
#loc328 = loc("CWE369_Divide_by_Zero__int_listen_socket_divide_12.c":217:13)
#loc329 = loc("CWE369_Divide_by_Zero__int_listen_socket_divide_12.c":220:13)
#loc330 = loc("CWE369_Divide_by_Zero__int_listen_socket_divide_12.c":217:17)
#loc331 = loc("CWE369_Divide_by_Zero__int_listen_socket_divide_12.c":217:33)
#loc332 = loc("CWE369_Divide_by_Zero__int_listen_socket_divide_12.c":218:13)
#loc333 = loc("CWE369_Divide_by_Zero__int_listen_socket_divide_12.c":219:30)
#loc334 = loc("CWE369_Divide_by_Zero__int_listen_socket_divide_12.c":219:17)
#loc335 = loc("CWE369_Divide_by_Zero__int_listen_socket_divide_12.c":231:9)
#loc336 = loc("CWE369_Divide_by_Zero__int_listen_socket_divide_12.c":299:9)
#loc337 = loc("CWE369_Divide_by_Zero__int_listen_socket_divide_12.c":236:13)
#loc338 = loc("CWE369_Divide_by_Zero__int_listen_socket_divide_12.c":236:17)
#loc339 = loc("CWE369_Divide_by_Zero__int_listen_socket_divide_12.c":237:13)
#loc340 = loc("CWE369_Divide_by_Zero__int_listen_socket_divide_12.c":237:32)
#loc341 = loc("CWE369_Divide_by_Zero__int_listen_socket_divide_12.c":238:13)
#loc342 = loc("CWE369_Divide_by_Zero__int_listen_socket_divide_12.c":238:35)
#loc343 = loc("CWE369_Divide_by_Zero__int_listen_socket_divide_12.c":239:13)
#loc344 = loc("CWE369_Divide_by_Zero__int_listen_socket_divide_12.c":239:35)
#loc345 = loc("CWE369_Divide_by_Zero__int_listen_socket_divide_12.c":240:13)
#loc346 = loc("CWE369_Divide_by_Zero__int_listen_socket_divide_12.c":240:45)
#loc347 = loc("CWE369_Divide_by_Zero__int_listen_socket_divide_12.c":241:13)
#loc348 = loc("CWE369_Divide_by_Zero__int_listen_socket_divide_12.c":284:21)
#loc349 = loc("CWE369_Divide_by_Zero__int_listen_socket_divide_12.c":251:39)
#loc350 = loc("CWE369_Divide_by_Zero__int_listen_socket_divide_12.c":251:48)
#loc351 = loc("CWE369_Divide_by_Zero__int_listen_socket_divide_12.c":251:61)
#loc352 = loc("CWE369_Divide_by_Zero__int_listen_socket_divide_12.c":251:32)
#loc353 = loc("CWE369_Divide_by_Zero__int_listen_socket_divide_12.c":251:17)
#loc354 = loc("CWE369_Divide_by_Zero__int_listen_socket_divide_12.c":251:72)
#loc355 = loc("CWE369_Divide_by_Zero__int_listen_socket_divide_12.c":252:17)
#loc356 = loc("CWE369_Divide_by_Zero__int_listen_socket_divide_12.c":255:17)
#loc357 = loc("CWE369_Divide_by_Zero__int_listen_socket_divide_12.c":252:21)
#loc358 = loc("CWE369_Divide_by_Zero__int_listen_socket_divide_12.c":252:37)
#loc359 = loc("CWE369_Divide_by_Zero__int_listen_socket_divide_12.c":253:17)
#loc360 = loc("CWE369_Divide_by_Zero__int_listen_socket_divide_12.c":254:21)
#loc361 = loc("CWE369_Divide_by_Zero__int_listen_socket_divide_12.c":256:24)
#loc362 = loc("CWE369_Divide_by_Zero__int_listen_socket_divide_12.c":256:25)
#loc363 = loc("CWE369_Divide_by_Zero__int_listen_socket_divide_12.c":256:34)
#loc364 = loc("CWE369_Divide_by_Zero__int_listen_socket_divide_12.c":256:37)
#loc365 = loc("CWE369_Divide_by_Zero__int_listen_socket_divide_12.c":256:51)
#loc366 = loc("CWE369_Divide_by_Zero__int_listen_socket_divide_12.c":256:17)
#loc367 = loc("CWE369_Divide_by_Zero__int_listen_socket_divide_12.c":256:52)
#loc368 = loc("CWE369_Divide_by_Zero__int_listen_socket_divide_12.c":257:38)
#loc369 = loc("CWE369_Divide_by_Zero__int_listen_socket_divide_12.c":257:17)
#loc370 = loc("CWE369_Divide_by_Zero__int_listen_socket_divide_12.c":258:43)
#loc371 = loc("CWE369_Divide_by_Zero__int_listen_socket_divide_12.c":258:17)
#loc372 = loc("CWE369_Divide_by_Zero__int_listen_socket_divide_12.c":259:42)
#loc373 = loc("CWE369_Divide_by_Zero__int_listen_socket_divide_12.c":259:36)
#loc374 = loc("CWE369_Divide_by_Zero__int_listen_socket_divide_12.c":259:17)
#loc375 = loc("CWE369_Divide_by_Zero__int_listen_socket_divide_12.c":259:50)
#loc376 = loc("CWE369_Divide_by_Zero__int_listen_socket_divide_12.c":260:17)
#loc377 = loc("CWE369_Divide_by_Zero__int_listen_socket_divide_12.c":263:17)
#loc378 = loc("CWE369_Divide_by_Zero__int_listen_socket_divide_12.c":260:26)
#loc379 = loc("CWE369_Divide_by_Zero__int_listen_socket_divide_12.c":260:58)
#loc380 = loc("CWE369_Divide_by_Zero__int_listen_socket_divide_12.c":260:59)
#loc381 = loc("CWE369_Divide_by_Zero__int_listen_socket_divide_12.c":260:68)
#loc382 = loc("CWE369_Divide_by_Zero__int_listen_socket_divide_12.c":260:82)
#loc383 = loc("CWE369_Divide_by_Zero__int_listen_socket_divide_12.c":260:21)
#loc384 = loc("CWE369_Divide_by_Zero__int_listen_socket_divide_12.c":260:88)
#loc385 = loc("CWE369_Divide_by_Zero__int_listen_socket_divide_12.c":261:17)
#loc386 = loc("CWE369_Divide_by_Zero__int_listen_socket_divide_12.c":262:21)
#loc387 = loc("CWE369_Divide_by_Zero__int_listen_socket_divide_12.c":264:17)
#loc388 = loc("CWE369_Divide_by_Zero__int_listen_socket_divide_12.c":267:17)
#loc389 = loc("CWE369_Divide_by_Zero__int_listen_socket_divide_12.c":264:28)
#loc390 = loc("CWE369_Divide_by_Zero__int_listen_socket_divide_12.c":264:42)
#loc391 = loc("CWE369_Divide_by_Zero__int_listen_socket_divide_12.c":264:21)
#loc392 = loc("CWE369_Divide_by_Zero__int_listen_socket_divide_12.c":264:61)
#loc393 = loc("CWE369_Divide_by_Zero__int_listen_socket_divide_12.c":265:17)
#loc394 = loc("CWE369_Divide_by_Zero__int_listen_socket_divide_12.c":266:21)
#loc395 = loc("CWE369_Divide_by_Zero__int_listen_socket_divide_12.c":268:39)
#loc396 = loc("CWE369_Divide_by_Zero__int_listen_socket_divide_12.c":268:53)
#loc397 = loc("CWE369_Divide_by_Zero__int_listen_socket_divide_12.c":268:59)
#loc398 = loc("CWE369_Divide_by_Zero__int_listen_socket_divide_12.c":268:32)
#loc399 = loc("CWE369_Divide_by_Zero__int_listen_socket_divide_12.c":268:17)
#loc400 = loc("CWE369_Divide_by_Zero__int_listen_socket_divide_12.c":268:63)
#loc401 = loc("CWE369_Divide_by_Zero__int_listen_socket_divide_12.c":269:17)
#loc402 = loc("CWE369_Divide_by_Zero__int_listen_socket_divide_12.c":272:17)
#loc403 = loc("CWE369_Divide_by_Zero__int_listen_socket_divide_12.c":269:21)
#loc404 = loc("CWE369_Divide_by_Zero__int_listen_socket_divide_12.c":269:37)
#loc405 = loc("CWE369_Divide_by_Zero__int_listen_socket_divide_12.c":270:17)
#loc406 = loc("CWE369_Divide_by_Zero__int_listen_socket_divide_12.c":271:21)
#loc407 = loc("CWE369_Divide_by_Zero__int_listen_socket_divide_12.c":274:35)
#loc408 = loc("CWE369_Divide_by_Zero__int_listen_socket_divide_12.c":274:49)
#loc409 = loc("CWE369_Divide_by_Zero__int_listen_socket_divide_12.c":274:62)
#loc410 = loc("CWE369_Divide_by_Zero__int_listen_socket_divide_12.c":274:80)
#loc411 = loc("CWE369_Divide_by_Zero__int_listen_socket_divide_12.c":274:83)
#loc412 = loc("CWE369_Divide_by_Zero__int_listen_socket_divide_12.c":274:30)
#loc413 = loc("CWE369_Divide_by_Zero__int_listen_socket_divide_12.c":274:17)
#loc414 = loc("CWE369_Divide_by_Zero__int_listen_socket_divide_12.c":274:84)
#loc415 = loc("CWE369_Divide_by_Zero__int_listen_socket_divide_12.c":275:17)
#loc416 = loc("CWE369_Divide_by_Zero__int_listen_socket_divide_12.c":278:17)
#loc417 = loc("CWE369_Divide_by_Zero__int_listen_socket_divide_12.c":275:21)
#loc418 = loc("CWE369_Divide_by_Zero__int_listen_socket_divide_12.c":275:35)
#loc419 = loc("CWE369_Divide_by_Zero__int_listen_socket_divide_12.c":275:48)
#loc420 = loc("CWE369_Divide_by_Zero__int_listen_socket_divide_12.c":275:51)
#loc421 = loc("CWE369_Divide_by_Zero__int_listen_socket_divide_12.c":275:65)
#loc422 = loc("CWE369_Divide_by_Zero__int_listen_socket_divide_12.c":276:17)
#loc423 = loc("CWE369_Divide_by_Zero__int_listen_socket_divide_12.c":277:21)
#loc424 = loc("CWE369_Divide_by_Zero__int_listen_socket_divide_12.c":280:43)
#loc425 = loc("CWE369_Divide_by_Zero__int_listen_socket_divide_12.c":280:29)
#loc426 = loc("CWE369_Divide_by_Zero__int_listen_socket_divide_12.c":280:17)
#loc427 = loc("CWE369_Divide_by_Zero__int_listen_socket_divide_12.c":282:29)
#loc428 = loc("CWE369_Divide_by_Zero__int_listen_socket_divide_12.c":282:24)
#loc429 = loc("CWE369_Divide_by_Zero__int_listen_socket_divide_12.c":282:17)
#loc430 = loc("CWE369_Divide_by_Zero__int_listen_socket_divide_12.c":282:40)
#loc431 = loc("CWE369_Divide_by_Zero__int_listen_socket_divide_12.c":284:20)
#loc432 = loc("CWE369_Divide_by_Zero__int_listen_socket_divide_12.c":285:13)
#loc433 = loc("CWE369_Divide_by_Zero__int_listen_socket_divide_12.c":288:13)
#loc434 = loc("CWE369_Divide_by_Zero__int_listen_socket_divide_12.c":285:17)
#loc435 = loc("CWE369_Divide_by_Zero__int_listen_socket_divide_12.c":285:33)
#loc436 = loc("CWE369_Divide_by_Zero__int_listen_socket_divide_12.c":286:13)
#loc437 = loc("CWE369_Divide_by_Zero__int_listen_socket_divide_12.c":287:30)
#loc438 = loc("CWE369_Divide_by_Zero__int_listen_socket_divide_12.c":287:17)
#loc439 = loc("CWE369_Divide_by_Zero__int_listen_socket_divide_12.c":289:13)
#loc440 = loc("CWE369_Divide_by_Zero__int_listen_socket_divide_12.c":292:13)
#loc441 = loc("CWE369_Divide_by_Zero__int_listen_socket_divide_12.c":289:17)
#loc442 = loc("CWE369_Divide_by_Zero__int_listen_socket_divide_12.c":289:33)
#loc443 = loc("CWE369_Divide_by_Zero__int_listen_socket_divide_12.c":290:13)
#loc444 = loc("CWE369_Divide_by_Zero__int_listen_socket_divide_12.c":291:30)
#loc445 = loc("CWE369_Divide_by_Zero__int_listen_socket_divide_12.c":291:17)
#loc446 = loc("CWE369_Divide_by_Zero__int_listen_socket_divide_12.c":301:5)
#loc447 = loc("CWE369_Divide_by_Zero__int_listen_socket_divide_12.c":324:5)
#loc448 = loc("CWE369_Divide_by_Zero__int_listen_socket_divide_12.c":301:8)
#loc449 = loc("CWE369_Divide_by_Zero__int_listen_socket_divide_12.c":301:33)
#loc450 = loc("CWE369_Divide_by_Zero__int_listen_socket_divide_12.c":302:5)
#loc451 = loc("CWE369_Divide_by_Zero__int_listen_socket_divide_12.c":312:5)
#loc452 = loc("CWE369_Divide_by_Zero__int_listen_socket_divide_12.c":314:5)
#loc453 = loc("CWE369_Divide_by_Zero__int_listen_socket_divide_12.c":304:9)
#loc454 = loc("CWE369_Divide_by_Zero__int_listen_socket_divide_12.c":311:9)
#loc455 = loc("CWE369_Divide_by_Zero__int_listen_socket_divide_12.c":304:13)
#loc456 = loc("CWE369_Divide_by_Zero__int_listen_socket_divide_12.c":304:21)
#loc457 = loc("CWE369_Divide_by_Zero__int_listen_socket_divide_12.c":305:9)
#loc458 = loc("CWE369_Divide_by_Zero__int_listen_socket_divide_12.c":307:9)
#loc459 = loc("CWE369_Divide_by_Zero__int_listen_socket_divide_12.c":309:9)
#loc460 = loc("CWE369_Divide_by_Zero__int_listen_socket_divide_12.c":306:26)
#loc461 = loc("CWE369_Divide_by_Zero__int_listen_socket_divide_12.c":306:32)
#loc462 = loc("CWE369_Divide_by_Zero__int_listen_socket_divide_12.c":306:13)
#loc463 = loc("CWE369_Divide_by_Zero__int_listen_socket_divide_12.c":310:23)
#loc464 = loc("CWE369_Divide_by_Zero__int_listen_socket_divide_12.c":310:13)
#loc465 = loc("CWE369_Divide_by_Zero__int_listen_socket_divide_12.c":316:9)
#loc466 = loc("CWE369_Divide_by_Zero__int_listen_socket_divide_12.c":323:9)
#loc467 = loc("CWE369_Divide_by_Zero__int_listen_socket_divide_12.c":316:13)
#loc468 = loc("CWE369_Divide_by_Zero__int_listen_socket_divide_12.c":316:21)
#loc469 = loc("CWE369_Divide_by_Zero__int_listen_socket_divide_12.c":317:9)
#loc470 = loc("CWE369_Divide_by_Zero__int_listen_socket_divide_12.c":319:9)
#loc471 = loc("CWE369_Divide_by_Zero__int_listen_socket_divide_12.c":321:9)
#loc472 = loc("CWE369_Divide_by_Zero__int_listen_socket_divide_12.c":318:26)
#loc473 = loc("CWE369_Divide_by_Zero__int_listen_socket_divide_12.c":318:32)
#loc474 = loc("CWE369_Divide_by_Zero__int_listen_socket_divide_12.c":318:13)
#loc475 = loc("CWE369_Divide_by_Zero__int_listen_socket_divide_12.c":322:23)
#loc476 = loc("CWE369_Divide_by_Zero__int_listen_socket_divide_12.c":322:13)
#loc477 = loc("CWE369_Divide_by_Zero__int_listen_socket_divide_12.c":330:1)
#loc478 = loc("CWE369_Divide_by_Zero__int_listen_socket_divide_12.c":355:1)
#loc479 = loc("CWE369_Divide_by_Zero__int_listen_socket_divide_12.c":332:5)
#loc480 = loc("CWE369_Divide_by_Zero__int_listen_socket_divide_12.c":332:9)
#loc481 = loc("CWE369_Divide_by_Zero__int_listen_socket_divide_12.c":334:13)
#loc482 = loc("CWE369_Divide_by_Zero__int_listen_socket_divide_12.c":334:12)
#loc483 = loc("CWE369_Divide_by_Zero__int_listen_socket_divide_12.c":334:5)
#loc484 = loc("CWE369_Divide_by_Zero__int_listen_socket_divide_12.c":335:5)
#loc485 = loc("CWE369_Divide_by_Zero__int_listen_socket_divide_12.c":344:5)
#loc486 = loc("CWE369_Divide_by_Zero__int_listen_socket_divide_12.c":335:8)
#loc487 = loc("CWE369_Divide_by_Zero__int_listen_socket_divide_12.c":335:33)
#loc488 = loc("CWE369_Divide_by_Zero__int_listen_socket_divide_12.c":336:5)
#loc489 = loc("CWE369_Divide_by_Zero__int_listen_socket_divide_12.c":339:5)
#loc490 = loc("CWE369_Divide_by_Zero__int_listen_socket_divide_12.c":341:5)
#loc491 = loc("CWE369_Divide_by_Zero__int_listen_socket_divide_12.c":338:16)
#loc492 = loc("CWE369_Divide_by_Zero__int_listen_socket_divide_12.c":338:9)
#loc493 = loc("CWE369_Divide_by_Zero__int_listen_socket_divide_12.c":343:16)
#loc494 = loc("CWE369_Divide_by_Zero__int_listen_socket_divide_12.c":343:9)
#loc495 = loc("CWE369_Divide_by_Zero__int_listen_socket_divide_12.c":345:5)
#loc496 = loc("CWE369_Divide_by_Zero__int_listen_socket_divide_12.c":354:5)
#loc497 = loc("CWE369_Divide_by_Zero__int_listen_socket_divide_12.c":345:8)
#loc498 = loc("CWE369_Divide_by_Zero__int_listen_socket_divide_12.c":345:33)
#loc499 = loc("CWE369_Divide_by_Zero__int_listen_socket_divide_12.c":346:5)
#loc500 = loc("CWE369_Divide_by_Zero__int_listen_socket_divide_12.c":349:5)
#loc501 = loc("CWE369_Divide_by_Zero__int_listen_socket_divide_12.c":351:5)
#loc502 = loc("CWE369_Divide_by_Zero__int_listen_socket_divide_12.c":348:22)
#loc503 = loc("CWE369_Divide_by_Zero__int_listen_socket_divide_12.c":348:28)
#loc504 = loc("CWE369_Divide_by_Zero__int_listen_socket_divide_12.c":348:9)
#loc505 = loc("CWE369_Divide_by_Zero__int_listen_socket_divide_12.c":353:22)
#loc506 = loc("CWE369_Divide_by_Zero__int_listen_socket_divide_12.c":353:28)
#loc507 = loc("CWE369_Divide_by_Zero__int_listen_socket_divide_12.c":353:9)
#loc508 = loc(fused[#loc1, #loc2])
#loc509 = loc(fused[#loc3, #loc4])
#loc510 = loc(fused[#loc5, #loc6])
#loc511 = loc(fused[#loc7, #loc8])
#loc512 = loc(fused[#loc9, #loc10])
#loc513 = loc(fused[#loc11, #loc12])
#loc514 = loc(fused[#loc13, #loc14])
#loc515 = loc(fused[#loc15, #loc16])
#loc516 = loc(fused[#loc17, #loc18])
#loc517 = loc(fused[#loc19, #loc20])
#loc518 = loc(fused[#loc21, #loc22])
#loc519 = loc(fused[#loc24, #loc25])
#loc520 = loc(fused[#loc26, #loc27])
#loc521 = loc(fused[#loc30, #loc28])
#loc522 = loc(fused[#loc31, #loc32])
#loc523 = loc(fused[#loc33, #loc34])
#loc524 = loc(fused[#loc35, #loc36, #loc37, #loc32])
#loc525 = loc(fused[#loc38, #loc39])
#loc526 = loc(fused[#loc40, #loc41])
#loc527 = loc(fused[#loc42, #loc43])
#loc528 = loc(fused[#loc44, #loc45])
#loc529 = loc(fused[#loc46, #loc47])
#loc530 = loc(fused[#loc48, #loc49])
#loc531 = loc(fused[#loc50, #loc51])
#loc532 = loc(fused[#loc56, #loc57])
#loc533 = loc(fused[#loc58, #loc59])
#loc534 = loc(fused[#loc60, #loc61])
#loc535 = loc(fused[#loc62, #loc59])
#loc536 = loc(fused[#loc64, #loc65])
#loc537 = loc(fused[#loc67, #loc68])
#loc538 = loc(fused[#loc69, #loc70])
#loc539 = loc(fused[#loc73, #loc71])
#loc540 = loc(fused[#loc77, #loc74])
#loc541 = loc(fused[#loc81, #loc82])
#loc542 = loc(fused[#loc83, #loc84])
#loc543 = loc(fused[#loc86, #loc87])
#loc544 = loc(fused[#loc88, #loc89])
#loc545 = loc(fused[#loc90, #loc91])
#loc546 = loc(fused[#loc92, #loc84])
#loc547 = loc(fused[#loc94, #loc95])
#loc548 = loc(fused[#loc98, #loc99])
#loc549 = loc(fused[#loc100, #loc95])
#loc550 = loc(fused[#loc106, #loc107])
#loc551 = loc(fused[#loc108, #loc109])
#loc552 = loc(fused[#loc110, #loc111])
#loc553 = loc(fused[#loc112, #loc109])
#loc554 = loc(fused[#loc116, #loc117])
#loc555 = loc(fused[#loc120, #loc121])
#loc556 = loc(fused[#loc122, #loc123])
#loc557 = loc(fused[#loc124, #loc125])
#loc558 = loc(fused[#loc127, #loc128])
#loc559 = loc(fused[#loc129, #loc123])
#loc560 = loc(fused[#loc133, #loc131])
#loc561 = loc(fused[#loc136, #loc137])
#loc562 = loc(fused[#loc139, #loc140])
#loc563 = loc(fused[#loc141, #loc142])
#loc564 = loc(fused[#loc143, #loc140])
#loc565 = loc(fused[#loc146, #loc147])
#loc566 = loc(fused[#loc148, #loc149])
#loc567 = loc(fused[#loc150, #loc147])
#loc568 = loc(fused[#loc154, #loc153])
#loc569 = loc(fused[#loc155, #loc156])
#loc570 = loc(fused[#loc157, #loc158])
#loc571 = loc(fused[#loc159, #loc160, #loc161, #loc156])
#loc572 = loc(fused[#loc162, #loc163])
#loc573 = loc(fused[#loc165, #loc166])
#loc574 = loc(fused[#loc167, #loc168])
#loc575 = loc(fused[#loc169, #loc170, #loc171, #loc166])
#loc576 = loc(fused[#loc172, #loc173])
#loc577 = loc(fused[#loc176, #loc177])
#loc578 = loc(fused[#loc178, #loc179])
#loc579 = loc(fused[#loc180, #loc181])
#loc580 = loc(fused[#loc182, #loc183])
#loc581 = loc(fused[#loc184, #loc185])
#loc582 = loc(fused[#loc190, #loc191])
#loc585 = loc(fused[#loc201, #loc202])
#loc586 = loc(fused[#loc205, #loc206])
#loc587 = loc(fused[#loc209, #loc208])
#loc588 = loc(fused[#loc210, #loc211])
#loc589 = loc(fused[#loc212, #loc213])
#loc590 = loc(fused[#loc216, #loc214])
#loc591 = loc(fused[#loc217, #loc218])
#loc592 = loc(fused[#loc219, #loc220])
#loc593 = loc(fused[#loc221, #loc222, #loc223, #loc218])
#loc594 = loc(fused[#loc224, #loc225])
#loc595 = loc(fused[#loc226, #loc227])
#loc596 = loc(fused[#loc228, #loc229])
#loc597 = loc(fused[#loc230, #loc231])
#loc598 = loc(fused[#loc232, #loc233])
#loc599 = loc(fused[#loc234, #loc235])
#loc600 = loc(fused[#loc236, #loc237])
#loc601 = loc(fused[#loc242, #loc243])
#loc602 = loc(fused[#loc244, #loc245])
#loc603 = loc(fused[#loc246, #loc247])
#loc604 = loc(fused[#loc248, #loc245])
#loc605 = loc(fused[#loc250, #loc251])
#loc606 = loc(fused[#loc253, #loc254])
#loc607 = loc(fused[#loc255, #loc256])
#loc608 = loc(fused[#loc258, #loc257])
#loc609 = loc(fused[#loc260, #loc259])
#loc610 = loc(fused[#loc263, #loc264])
#loc611 = loc(fused[#loc265, #loc266])
#loc612 = loc(fused[#loc268, #loc269])
#loc613 = loc(fused[#loc270, #loc271])
#loc614 = loc(fused[#loc272, #loc273])
#loc615 = loc(fused[#loc274, #loc266])
#loc616 = loc(fused[#loc276, #loc277])
#loc617 = loc(fused[#loc280, #loc281])
#loc618 = loc(fused[#loc282, #loc277])
#loc619 = loc(fused[#loc288, #loc289])
#loc620 = loc(fused[#loc290, #loc291])
#loc621 = loc(fused[#loc292, #loc293])
#loc622 = loc(fused[#loc294, #loc291])
#loc623 = loc(fused[#loc298, #loc299])
#loc624 = loc(fused[#loc302, #loc303])
#loc625 = loc(fused[#loc304, #loc305])
#loc626 = loc(fused[#loc306, #loc307])
#loc627 = loc(fused[#loc309, #loc310])
#loc628 = loc(fused[#loc311, #loc305])
#loc629 = loc(fused[#loc315, #loc313])
#loc630 = loc(fused[#loc318, #loc319])
#loc631 = loc(fused[#loc321, #loc322])
#loc632 = loc(fused[#loc323, #loc324])
#loc633 = loc(fused[#loc325, #loc322])
#loc634 = loc(fused[#loc328, #loc329])
#loc635 = loc(fused[#loc330, #loc331])
#loc636 = loc(fused[#loc332, #loc329])
#loc637 = loc(fused[#loc335, #loc336])
#loc638 = loc(fused[#loc337, #loc338])
#loc639 = loc(fused[#loc339, #loc340])
#loc640 = loc(fused[#loc341, #loc342])
#loc641 = loc(fused[#loc343, #loc344])
#loc642 = loc(fused[#loc345, #loc346])
#loc643 = loc(fused[#loc347, #loc348])
#loc644 = loc(fused[#loc353, #loc354])
#loc645 = loc(fused[#loc355, #loc356])
#loc646 = loc(fused[#loc357, #loc358])
#loc647 = loc(fused[#loc359, #loc356])
#loc648 = loc(fused[#loc361, #loc362])
#loc649 = loc(fused[#loc364, #loc365])
#loc650 = loc(fused[#loc366, #loc367])
#loc651 = loc(fused[#loc369, #loc368])
#loc652 = loc(fused[#loc371, #loc370])
#loc653 = loc(fused[#loc374, #loc375])
#loc654 = loc(fused[#loc376, #loc377])
#loc655 = loc(fused[#loc379, #loc380])
#loc656 = loc(fused[#loc381, #loc382])
#loc657 = loc(fused[#loc383, #loc384])
#loc658 = loc(fused[#loc385, #loc377])
#loc659 = loc(fused[#loc387, #loc388])
#loc660 = loc(fused[#loc391, #loc392])
#loc661 = loc(fused[#loc393, #loc388])
#loc662 = loc(fused[#loc399, #loc400])
#loc663 = loc(fused[#loc401, #loc402])
#loc664 = loc(fused[#loc403, #loc404])
#loc665 = loc(fused[#loc405, #loc402])
#loc666 = loc(fused[#loc409, #loc410])
#loc667 = loc(fused[#loc413, #loc414])
#loc668 = loc(fused[#loc415, #loc416])
#loc669 = loc(fused[#loc417, #loc418])
#loc670 = loc(fused[#loc420, #loc421])
#loc671 = loc(fused[#loc422, #loc416])
#loc672 = loc(fused[#loc426, #loc424])
#loc673 = loc(fused[#loc429, #loc430])
#loc674 = loc(fused[#loc432, #loc433])
#loc675 = loc(fused[#loc434, #loc435])
#loc676 = loc(fused[#loc436, #loc433])
#loc677 = loc(fused[#loc439, #loc440])
#loc678 = loc(fused[#loc441, #loc442])
#loc679 = loc(fused[#loc443, #loc440])
#loc680 = loc(fused[#loc446, #loc447])
#loc681 = loc(fused[#loc448, #loc449])
#loc682 = loc(fused[#loc450, #loc451, #loc452, #loc447])
#loc683 = loc(fused[#loc453, #loc454])
#loc684 = loc(fused[#loc455, #loc456])
#loc685 = loc(fused[#loc457, #loc458, #loc459, #loc454])
#loc686 = loc(fused[#loc460, #loc461])
#loc687 = loc(fused[#loc465, #loc466])
#loc688 = loc(fused[#loc467, #loc468])
#loc689 = loc(fused[#loc469, #loc470, #loc471, #loc466])
#loc690 = loc(fused[#loc472, #loc473])
#loc691 = loc(fused[#loc477, #loc478])
#loc692 = loc(fused[#loc479, #loc480])
#loc693 = loc(fused[#loc483, #loc481])
#loc694 = loc(fused[#loc484, #loc485])
#loc695 = loc(fused[#loc486, #loc487])
#loc696 = loc(fused[#loc488, #loc489, #loc490, #loc485])
#loc697 = loc(fused[#loc492, #loc491])
#loc698 = loc(fused[#loc494, #loc493])
#loc699 = loc(fused[#loc495, #loc496])
#loc700 = loc(fused[#loc497, #loc498])
#loc701 = loc(fused[#loc499, #loc500, #loc501, #loc496])
#loc702 = loc(fused[#loc502, #loc503])
#loc703 = loc(fused[#loc505, #loc506])
