!s32i = !cir.int<s, 32>
!s8i = !cir.int<s, 8>
!u64i = !cir.int<u, 64>
!void = !cir.void
#fn_attr = #cir<extra({inline = #cir.inline<no>, nothrow = #cir.nothrow, optnone = #cir.optnone})>
#fn_attr1 = #cir<extra({nothrow = #cir.nothrow})>
#fn_attr2 = #cir<extra({inline = #cir.inline<no>, optnone = #cir.optnone})>
#loc1 = loc("../../../testcasesupport/std_testcase.h":61:7)
#loc8 = loc("CWE122_Heap_Based_Buffer_Overflow__placement_new_63b.cpp":25:14)
#loc9 = loc("CWE122_Heap_Based_Buffer_Overflow__placement_new_63b.cpp":25:23)
#loc33 = loc("CWE122_Heap_Based_Buffer_Overflow__placement_new_63b.cpp":49:18)
#loc34 = loc("CWE122_Heap_Based_Buffer_Overflow__placement_new_63b.cpp":49:27)
#loc54 = loc("../../../testcasesupport/std_testcase.h":68:7)
#loc57 = loc("CWE122_Heap_Based_Buffer_Overflow__placement_new_63b.cpp":69:18)
#loc58 = loc("CWE122_Heap_Based_Buffer_Overflow__placement_new_63b.cpp":69:27)
!ty_OneIntClass = !cir.struct<class "OneIntClass" {!s32i} #cir.record.decl.ast>
!ty_TwoIntsClass = !cir.struct<class "TwoIntsClass" {!s32i, !s32i} #cir.record.decl.ast>
#loc80 = loc(fused[#loc8, #loc9])
#loc88 = loc(fused[#loc33, #loc34])
#loc96 = loc(fused[#loc57, #loc58])
module @"/home/ladisgin/git_proj/test_projects/juliet-c/testcases/CWE122_Heap_Based_Buffer_Overflow/s11/CWE122_Heap_Based_Buffer_Overflow__placement_new_63b.cpp" attributes {cir.lang = #cir.lang<cxx>, cir.sob = #cir.signed_overflow_behavior<undefined>, cir.triple = "x86_64-unknown-linux-gnu", dlti.dl_spec = #dlti.dl_spec<#dlti.dl_entry<f64, dense<64> : vector<2xi64>>, #dlti.dl_entry<f16, dense<16> : vector<2xi64>>, #dlti.dl_entry<!llvm.ptr<270>, dense<32> : vector<4xi64>>, #dlti.dl_entry<f128, dense<128> : vector<2xi64>>, #dlti.dl_entry<i32, dense<32> : vector<2xi64>>, #dlti.dl_entry<i8, dense<8> : vector<2xi64>>, #dlti.dl_entry<i16, dense<16> : vector<2xi64>>, #dlti.dl_entry<!llvm.ptr, dense<64> : vector<4xi64>>, #dlti.dl_entry<i1, dense<8> : vector<2xi64>>, #dlti.dl_entry<f80, dense<128> : vector<2xi64>>, #dlti.dl_entry<i128, dense<128> : vector<2xi64>>, #dlti.dl_entry<i64, dense<64> : vector<2xi64>>, #dlti.dl_entry<!llvm.ptr<271>, dense<32> : vector<4xi64>>, #dlti.dl_entry<!llvm.ptr<272>, dense<64> : vector<4xi64>>, #dlti.dl_entry<"dlti.endianness", "little">, #dlti.dl_entry<"dlti.stack_alignment", 128 : i64>>, llvm.data_layout = "e-m:e-p270:32:32-p271:32:32-p272:64:64-i64:64-i128:128-f80:128-n8:16:32:64-S128"} {
  cir.func linkonce_odr  @_ZN12TwoIntsClassC2Ev(%arg0: !cir.ptr<!ty_TwoIntsClass> loc("../../../testcasesupport/std_testcase.h":61:7)) extra(#fn_attr) {
    %0 = cir.alloca !cir.ptr<!ty_TwoIntsClass>, !cir.ptr<!cir.ptr<!ty_TwoIntsClass>>, ["this", init] {alignment = 8 : i64} loc(#loc1)
    cir.store %arg0, %0 : !cir.ptr<!ty_TwoIntsClass>, !cir.ptr<!cir.ptr<!ty_TwoIntsClass>> loc(#loc1)
    %1 = cir.load %0 : !cir.ptr<!cir.ptr<!ty_TwoIntsClass>>, !cir.ptr<!ty_TwoIntsClass> loc(#loc1)
    cir.return loc(#loc1)
  } loc(#loc1)
  cir.func private  @printIntLine(!s32i) loc(#loc77)
  cir.func private  @free(!cir.ptr<!void>) extra(#fn_attr1) loc(#loc78)
  cir.func  @_ZN51CWE122_Heap_Based_Buffer_Overflow__placement_new_637badSinkEPPc(%arg0: !cir.ptr<!cir.ptr<!s8i>> loc(fused[#loc8, #loc9])) extra(#fn_attr2) {
    %0 = cir.alloca !cir.ptr<!cir.ptr<!s8i>>, !cir.ptr<!cir.ptr<!cir.ptr<!s8i>>>, ["dataPtr", init] {alignment = 8 : i64} loc(#loc80)
    %1 = cir.alloca !cir.ptr<!s8i>, !cir.ptr<!cir.ptr<!s8i>>, ["data", init] {alignment = 8 : i64} loc(#loc81)
    cir.store %arg0, %0 : !cir.ptr<!cir.ptr<!s8i>>, !cir.ptr<!cir.ptr<!cir.ptr<!s8i>>> loc(#loc12)
    %2 = cir.load deref %0 : !cir.ptr<!cir.ptr<!cir.ptr<!s8i>>>, !cir.ptr<!cir.ptr<!s8i>> loc(#loc11)
    %3 = cir.load %2 : !cir.ptr<!cir.ptr<!s8i>>, !cir.ptr<!s8i> loc(#loc13)
    cir.store %3, %1 : !cir.ptr<!s8i>, !cir.ptr<!cir.ptr<!s8i>> loc(#loc81)
    cir.scope {
      %4 = cir.alloca !cir.ptr<!ty_TwoIntsClass>, !cir.ptr<!cir.ptr<!ty_TwoIntsClass>>, ["classTwo", init] {alignment = 8 : i64} loc(#loc83)
      %5 = cir.const #cir.int<8> : !u64i loc(#loc84)
      %6 = cir.load %1 : !cir.ptr<!cir.ptr<!s8i>>, !cir.ptr<!s8i> loc(#loc19)
      %7 = cir.cast(bitcast, %6 : !cir.ptr<!s8i>), !cir.ptr<!void> loc(#loc19)
      %8 = cir.cast(bitcast, %7 : !cir.ptr<!void>), !cir.ptr<!ty_TwoIntsClass> loc(#loc84)
      cir.call @_ZN12TwoIntsClassC2Ev(%8) : (!cir.ptr<!ty_TwoIntsClass>) -> () extra(#fn_attr1) loc(#loc17)
      cir.store %8, %4 : !cir.ptr<!ty_TwoIntsClass>, !cir.ptr<!cir.ptr<!ty_TwoIntsClass>> loc(#loc83)
      %9 = cir.const #cir.int<5> : !s32i loc(#loc20)
      %10 = cir.load %4 : !cir.ptr<!cir.ptr<!ty_TwoIntsClass>>, !cir.ptr<!ty_TwoIntsClass> loc(#loc21)
      %11 = cir.get_member %10[0] {name = "intOne"} : !cir.ptr<!ty_TwoIntsClass> -> !cir.ptr<!s32i> loc(#loc22)
      cir.store %9, %11 : !s32i, !cir.ptr<!s32i> loc(#loc85)
      %12 = cir.const #cir.int<10> : !s32i loc(#loc23)
      %13 = cir.load %4 : !cir.ptr<!cir.ptr<!ty_TwoIntsClass>>, !cir.ptr<!ty_TwoIntsClass> loc(#loc24)
      %14 = cir.get_member %13[1] {name = "intTwo"} : !cir.ptr<!ty_TwoIntsClass> -> !cir.ptr<!s32i> loc(#loc25)
      cir.store %12, %14 : !s32i, !cir.ptr<!s32i> loc(#loc86)
      %15 = cir.load %4 : !cir.ptr<!cir.ptr<!ty_TwoIntsClass>>, !cir.ptr<!ty_TwoIntsClass> loc(#loc26)
      %16 = cir.get_member %15[0] {name = "intOne"} : !cir.ptr<!ty_TwoIntsClass> -> !cir.ptr<!s32i> loc(#loc22)
      %17 = cir.load %16 : !cir.ptr<!s32i>, !s32i loc(#loc27)
      cir.call @printIntLine(%17) : (!s32i) -> () loc(#loc28)
      %18 = cir.get_global @free : !cir.ptr<!cir.func<!void (!cir.ptr<!void>)>> loc(#loc29)
      %19 = cir.load %1 : !cir.ptr<!cir.ptr<!s8i>>, !cir.ptr<!s8i> loc(#loc30)
      %20 = cir.cast(bitcast, %19 : !cir.ptr<!s8i>), !cir.ptr<!void> loc(#loc30)
      cir.call @free(%20) : (!cir.ptr<!void>) -> () extra(#fn_attr1) loc(#loc29)
    } loc(#loc82)
    cir.return loc(#loc7)
  } loc(#loc79)
  cir.func  @_ZN51CWE122_Heap_Based_Buffer_Overflow__placement_new_6311goodG2BSinkEPPc(%arg0: !cir.ptr<!cir.ptr<!s8i>> loc(fused[#loc33, #loc34])) extra(#fn_attr2) {
    %0 = cir.alloca !cir.ptr<!cir.ptr<!s8i>>, !cir.ptr<!cir.ptr<!cir.ptr<!s8i>>>, ["dataPtr", init] {alignment = 8 : i64} loc(#loc88)
    %1 = cir.alloca !cir.ptr<!s8i>, !cir.ptr<!cir.ptr<!s8i>>, ["data", init] {alignment = 8 : i64} loc(#loc89)
    cir.store %arg0, %0 : !cir.ptr<!cir.ptr<!s8i>>, !cir.ptr<!cir.ptr<!cir.ptr<!s8i>>> loc(#loc37)
    %2 = cir.load deref %0 : !cir.ptr<!cir.ptr<!cir.ptr<!s8i>>>, !cir.ptr<!cir.ptr<!s8i>> loc(#loc36)
    %3 = cir.load %2 : !cir.ptr<!cir.ptr<!s8i>>, !cir.ptr<!s8i> loc(#loc38)
    cir.store %3, %1 : !cir.ptr<!s8i>, !cir.ptr<!cir.ptr<!s8i>> loc(#loc89)
    cir.scope {
      %4 = cir.alloca !cir.ptr<!ty_TwoIntsClass>, !cir.ptr<!cir.ptr<!ty_TwoIntsClass>>, ["classTwo", init] {alignment = 8 : i64} loc(#loc91)
      %5 = cir.const #cir.int<8> : !u64i loc(#loc92)
      %6 = cir.load %1 : !cir.ptr<!cir.ptr<!s8i>>, !cir.ptr<!s8i> loc(#loc44)
      %7 = cir.cast(bitcast, %6 : !cir.ptr<!s8i>), !cir.ptr<!void> loc(#loc44)
      %8 = cir.cast(bitcast, %7 : !cir.ptr<!void>), !cir.ptr<!ty_TwoIntsClass> loc(#loc92)
      cir.call @_ZN12TwoIntsClassC2Ev(%8) : (!cir.ptr<!ty_TwoIntsClass>) -> () extra(#fn_attr1) loc(#loc42)
      cir.store %8, %4 : !cir.ptr<!ty_TwoIntsClass>, !cir.ptr<!cir.ptr<!ty_TwoIntsClass>> loc(#loc91)
      %9 = cir.const #cir.int<5> : !s32i loc(#loc45)
      %10 = cir.load %4 : !cir.ptr<!cir.ptr<!ty_TwoIntsClass>>, !cir.ptr<!ty_TwoIntsClass> loc(#loc46)
      %11 = cir.get_member %10[0] {name = "intOne"} : !cir.ptr<!ty_TwoIntsClass> -> !cir.ptr<!s32i> loc(#loc22)
      cir.store %9, %11 : !s32i, !cir.ptr<!s32i> loc(#loc93)
      %12 = cir.const #cir.int<10> : !s32i loc(#loc47)
      %13 = cir.load %4 : !cir.ptr<!cir.ptr<!ty_TwoIntsClass>>, !cir.ptr<!ty_TwoIntsClass> loc(#loc48)
      %14 = cir.get_member %13[1] {name = "intTwo"} : !cir.ptr<!ty_TwoIntsClass> -> !cir.ptr<!s32i> loc(#loc25)
      cir.store %12, %14 : !s32i, !cir.ptr<!s32i> loc(#loc94)
      %15 = cir.load %4 : !cir.ptr<!cir.ptr<!ty_TwoIntsClass>>, !cir.ptr<!ty_TwoIntsClass> loc(#loc49)
      %16 = cir.get_member %15[0] {name = "intOne"} : !cir.ptr<!ty_TwoIntsClass> -> !cir.ptr<!s32i> loc(#loc22)
      %17 = cir.load %16 : !cir.ptr<!s32i>, !s32i loc(#loc50)
      cir.call @printIntLine(%17) : (!s32i) -> () loc(#loc51)
      %18 = cir.get_global @free : !cir.ptr<!cir.func<!void (!cir.ptr<!void>)>> loc(#loc52)
      %19 = cir.load %1 : !cir.ptr<!cir.ptr<!s8i>>, !cir.ptr<!s8i> loc(#loc53)
      %20 = cir.cast(bitcast, %19 : !cir.ptr<!s8i>), !cir.ptr<!void> loc(#loc53)
      cir.call @free(%20) : (!cir.ptr<!void>) -> () extra(#fn_attr1) loc(#loc52)
    } loc(#loc90)
    cir.return loc(#loc32)
  } loc(#loc87)
  cir.func linkonce_odr  @_ZN11OneIntClassC2Ev(%arg0: !cir.ptr<!ty_OneIntClass> loc("../../../testcasesupport/std_testcase.h":68:7)) extra(#fn_attr) {
    %0 = cir.alloca !cir.ptr<!ty_OneIntClass>, !cir.ptr<!cir.ptr<!ty_OneIntClass>>, ["this", init] {alignment = 8 : i64} loc(#loc54)
    cir.store %arg0, %0 : !cir.ptr<!ty_OneIntClass>, !cir.ptr<!cir.ptr<!ty_OneIntClass>> loc(#loc54)
    %1 = cir.load %0 : !cir.ptr<!cir.ptr<!ty_OneIntClass>>, !cir.ptr<!ty_OneIntClass> loc(#loc54)
    cir.return loc(#loc54)
  } loc(#loc54)
  cir.func  @_ZN51CWE122_Heap_Based_Buffer_Overflow__placement_new_6311goodB2GSinkEPPc(%arg0: !cir.ptr<!cir.ptr<!s8i>> loc(fused[#loc57, #loc58])) extra(#fn_attr2) {
    %0 = cir.alloca !cir.ptr<!cir.ptr<!s8i>>, !cir.ptr<!cir.ptr<!cir.ptr<!s8i>>>, ["dataPtr", init] {alignment = 8 : i64} loc(#loc96)
    %1 = cir.alloca !cir.ptr<!s8i>, !cir.ptr<!cir.ptr<!s8i>>, ["data", init] {alignment = 8 : i64} loc(#loc97)
    cir.store %arg0, %0 : !cir.ptr<!cir.ptr<!s8i>>, !cir.ptr<!cir.ptr<!cir.ptr<!s8i>>> loc(#loc61)
    %2 = cir.load deref %0 : !cir.ptr<!cir.ptr<!cir.ptr<!s8i>>>, !cir.ptr<!cir.ptr<!s8i>> loc(#loc60)
    %3 = cir.load %2 : !cir.ptr<!cir.ptr<!s8i>>, !cir.ptr<!s8i> loc(#loc62)
    cir.store %3, %1 : !cir.ptr<!s8i>, !cir.ptr<!cir.ptr<!s8i>> loc(#loc97)
    cir.scope {
      %4 = cir.alloca !cir.ptr<!ty_OneIntClass>, !cir.ptr<!cir.ptr<!ty_OneIntClass>>, ["classOne", init] {alignment = 8 : i64} loc(#loc99)
      %5 = cir.const #cir.int<4> : !u64i loc(#loc100)
      %6 = cir.load %1 : !cir.ptr<!cir.ptr<!s8i>>, !cir.ptr<!s8i> loc(#loc68)
      %7 = cir.cast(bitcast, %6 : !cir.ptr<!s8i>), !cir.ptr<!void> loc(#loc68)
      %8 = cir.cast(bitcast, %7 : !cir.ptr<!void>), !cir.ptr<!ty_OneIntClass> loc(#loc100)
      cir.call @_ZN11OneIntClassC2Ev(%8) : (!cir.ptr<!ty_OneIntClass>) -> () extra(#fn_attr1) loc(#loc66)
      cir.store %8, %4 : !cir.ptr<!ty_OneIntClass>, !cir.ptr<!cir.ptr<!ty_OneIntClass>> loc(#loc99)
      %9 = cir.const #cir.int<5> : !s32i loc(#loc69)
      %10 = cir.load %4 : !cir.ptr<!cir.ptr<!ty_OneIntClass>>, !cir.ptr<!ty_OneIntClass> loc(#loc70)
      %11 = cir.get_member %10[0] {name = "intOne"} : !cir.ptr<!ty_OneIntClass> -> !cir.ptr<!s32i> loc(#loc71)
      cir.store %9, %11 : !s32i, !cir.ptr<!s32i> loc(#loc101)
      %12 = cir.load %4 : !cir.ptr<!cir.ptr<!ty_OneIntClass>>, !cir.ptr<!ty_OneIntClass> loc(#loc72)
      %13 = cir.get_member %12[0] {name = "intOne"} : !cir.ptr<!ty_OneIntClass> -> !cir.ptr<!s32i> loc(#loc71)
      %14 = cir.load %13 : !cir.ptr<!s32i>, !s32i loc(#loc73)
      cir.call @printIntLine(%14) : (!s32i) -> () loc(#loc74)
      %15 = cir.get_global @free : !cir.ptr<!cir.func<!void (!cir.ptr<!void>)>> loc(#loc75)
      %16 = cir.load %1 : !cir.ptr<!cir.ptr<!s8i>>, !cir.ptr<!s8i> loc(#loc76)
      %17 = cir.cast(bitcast, %16 : !cir.ptr<!s8i>), !cir.ptr<!void> loc(#loc76)
      cir.call @free(%17) : (!cir.ptr<!void>) -> () extra(#fn_attr1) loc(#loc75)
    } loc(#loc98)
    cir.return loc(#loc56)
  } loc(#loc95)
} loc(#loc)
#loc = loc("/home/ladisgin/git_proj/test_projects/juliet-c/testcases/CWE122_Heap_Based_Buffer_Overflow/s11/CWE122_Heap_Based_Buffer_Overflow__placement_new_63b.cpp":0:0)
#loc2 = loc("../../../testcasesupport/std_testcase_io.h":18:1)
#loc3 = loc("../../../testcasesupport/std_testcase_io.h":18:33)
#loc4 = loc("/usr/include/stdlib.h":687:1)
#loc5 = loc("/usr/include/stdlib.h":687:32)
#loc6 = loc("CWE122_Heap_Based_Buffer_Overflow__placement_new_63b.cpp":25:1)
#loc7 = loc("CWE122_Heap_Based_Buffer_Overflow__placement_new_63b.cpp":42:1)
#loc10 = loc("CWE122_Heap_Based_Buffer_Overflow__placement_new_63b.cpp":27:5)
#loc11 = loc("CWE122_Heap_Based_Buffer_Overflow__placement_new_63b.cpp":27:20)
#loc12 = loc("CWE122_Heap_Based_Buffer_Overflow__placement_new_63b.cpp":26:1)
#loc13 = loc("CWE122_Heap_Based_Buffer_Overflow__placement_new_63b.cpp":27:19)
#loc14 = loc("CWE122_Heap_Based_Buffer_Overflow__placement_new_63b.cpp":28:5)
#loc15 = loc("CWE122_Heap_Based_Buffer_Overflow__placement_new_63b.cpp":41:5)
#loc16 = loc("CWE122_Heap_Based_Buffer_Overflow__placement_new_63b.cpp":34:9)
#loc17 = loc("CWE122_Heap_Based_Buffer_Overflow__placement_new_63b.cpp":34:45)
#loc18 = loc("CWE122_Heap_Based_Buffer_Overflow__placement_new_63b.cpp":34:35)
#loc19 = loc("CWE122_Heap_Based_Buffer_Overflow__placement_new_63b.cpp":34:39)
#loc20 = loc("CWE122_Heap_Based_Buffer_Overflow__placement_new_63b.cpp":36:28)
#loc21 = loc("CWE122_Heap_Based_Buffer_Overflow__placement_new_63b.cpp":36:9)
#loc22 = loc("../../../testcasesupport/std_testcase.h":64:13)
#loc23 = loc("CWE122_Heap_Based_Buffer_Overflow__placement_new_63b.cpp":37:28)
#loc24 = loc("CWE122_Heap_Based_Buffer_Overflow__placement_new_63b.cpp":37:9)
#loc25 = loc("../../../testcasesupport/std_testcase.h":65:13)
#loc26 = loc("CWE122_Heap_Based_Buffer_Overflow__placement_new_63b.cpp":38:22)
#loc27 = loc("CWE122_Heap_Based_Buffer_Overflow__placement_new_63b.cpp":38:32)
#loc28 = loc("CWE122_Heap_Based_Buffer_Overflow__placement_new_63b.cpp":38:9)
#loc29 = loc("CWE122_Heap_Based_Buffer_Overflow__placement_new_63b.cpp":40:9)
#loc30 = loc("CWE122_Heap_Based_Buffer_Overflow__placement_new_63b.cpp":40:14)
#loc31 = loc("CWE122_Heap_Based_Buffer_Overflow__placement_new_63b.cpp":49:1)
#loc32 = loc("CWE122_Heap_Based_Buffer_Overflow__placement_new_63b.cpp":66:1)
#loc35 = loc("CWE122_Heap_Based_Buffer_Overflow__placement_new_63b.cpp":51:5)
#loc36 = loc("CWE122_Heap_Based_Buffer_Overflow__placement_new_63b.cpp":51:20)
#loc37 = loc("CWE122_Heap_Based_Buffer_Overflow__placement_new_63b.cpp":50:1)
#loc38 = loc("CWE122_Heap_Based_Buffer_Overflow__placement_new_63b.cpp":51:19)
#loc39 = loc("CWE122_Heap_Based_Buffer_Overflow__placement_new_63b.cpp":52:5)
#loc40 = loc("CWE122_Heap_Based_Buffer_Overflow__placement_new_63b.cpp":65:5)
#loc41 = loc("CWE122_Heap_Based_Buffer_Overflow__placement_new_63b.cpp":58:9)
#loc42 = loc("CWE122_Heap_Based_Buffer_Overflow__placement_new_63b.cpp":58:45)
#loc43 = loc("CWE122_Heap_Based_Buffer_Overflow__placement_new_63b.cpp":58:35)
#loc44 = loc("CWE122_Heap_Based_Buffer_Overflow__placement_new_63b.cpp":58:39)
#loc45 = loc("CWE122_Heap_Based_Buffer_Overflow__placement_new_63b.cpp":60:28)
#loc46 = loc("CWE122_Heap_Based_Buffer_Overflow__placement_new_63b.cpp":60:9)
#loc47 = loc("CWE122_Heap_Based_Buffer_Overflow__placement_new_63b.cpp":61:28)
#loc48 = loc("CWE122_Heap_Based_Buffer_Overflow__placement_new_63b.cpp":61:9)
#loc49 = loc("CWE122_Heap_Based_Buffer_Overflow__placement_new_63b.cpp":62:22)
#loc50 = loc("CWE122_Heap_Based_Buffer_Overflow__placement_new_63b.cpp":62:32)
#loc51 = loc("CWE122_Heap_Based_Buffer_Overflow__placement_new_63b.cpp":62:9)
#loc52 = loc("CWE122_Heap_Based_Buffer_Overflow__placement_new_63b.cpp":64:9)
#loc53 = loc("CWE122_Heap_Based_Buffer_Overflow__placement_new_63b.cpp":64:14)
#loc55 = loc("CWE122_Heap_Based_Buffer_Overflow__placement_new_63b.cpp":69:1)
#loc56 = loc("CWE122_Heap_Based_Buffer_Overflow__placement_new_63b.cpp":84:1)
#loc59 = loc("CWE122_Heap_Based_Buffer_Overflow__placement_new_63b.cpp":71:5)
#loc60 = loc("CWE122_Heap_Based_Buffer_Overflow__placement_new_63b.cpp":71:20)
#loc61 = loc("CWE122_Heap_Based_Buffer_Overflow__placement_new_63b.cpp":70:1)
#loc62 = loc("CWE122_Heap_Based_Buffer_Overflow__placement_new_63b.cpp":71:19)
#loc63 = loc("CWE122_Heap_Based_Buffer_Overflow__placement_new_63b.cpp":72:5)
#loc64 = loc("CWE122_Heap_Based_Buffer_Overflow__placement_new_63b.cpp":83:5)
#loc65 = loc("CWE122_Heap_Based_Buffer_Overflow__placement_new_63b.cpp":78:9)
#loc66 = loc("CWE122_Heap_Based_Buffer_Overflow__placement_new_63b.cpp":78:44)
#loc67 = loc("CWE122_Heap_Based_Buffer_Overflow__placement_new_63b.cpp":78:34)
#loc68 = loc("CWE122_Heap_Based_Buffer_Overflow__placement_new_63b.cpp":78:38)
#loc69 = loc("CWE122_Heap_Based_Buffer_Overflow__placement_new_63b.cpp":80:28)
#loc70 = loc("CWE122_Heap_Based_Buffer_Overflow__placement_new_63b.cpp":80:9)
#loc71 = loc("../../../testcasesupport/std_testcase.h":71:13)
#loc72 = loc("CWE122_Heap_Based_Buffer_Overflow__placement_new_63b.cpp":81:22)
#loc73 = loc("CWE122_Heap_Based_Buffer_Overflow__placement_new_63b.cpp":81:32)
#loc74 = loc("CWE122_Heap_Based_Buffer_Overflow__placement_new_63b.cpp":81:9)
#loc75 = loc("CWE122_Heap_Based_Buffer_Overflow__placement_new_63b.cpp":82:9)
#loc76 = loc("CWE122_Heap_Based_Buffer_Overflow__placement_new_63b.cpp":82:14)
#loc77 = loc(fused[#loc2, #loc3])
#loc78 = loc(fused[#loc4, #loc5])
#loc79 = loc(fused[#loc6, #loc7])
#loc81 = loc(fused[#loc10, #loc11])
#loc82 = loc(fused[#loc14, #loc15])
#loc83 = loc(fused[#loc16, #loc17])
#loc84 = loc(fused[#loc18, #loc17])
#loc85 = loc(fused[#loc21, #loc20])
#loc86 = loc(fused[#loc24, #loc23])
#loc87 = loc(fused[#loc31, #loc32])
#loc89 = loc(fused[#loc35, #loc36])
#loc90 = loc(fused[#loc39, #loc40])
#loc91 = loc(fused[#loc41, #loc42])
#loc92 = loc(fused[#loc43, #loc42])
#loc93 = loc(fused[#loc46, #loc45])
#loc94 = loc(fused[#loc48, #loc47])
#loc95 = loc(fused[#loc55, #loc56])
#loc97 = loc(fused[#loc59, #loc60])
#loc98 = loc(fused[#loc63, #loc64])
#loc99 = loc(fused[#loc65, #loc66])
#loc100 = loc(fused[#loc67, #loc66])
#loc101 = loc(fused[#loc70, #loc69])
