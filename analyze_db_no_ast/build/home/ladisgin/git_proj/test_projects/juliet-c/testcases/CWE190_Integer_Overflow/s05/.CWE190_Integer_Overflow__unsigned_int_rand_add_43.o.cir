!s32i = !cir.int<s, 32>
!s8i = !cir.int<s, 8>
!u32i = !cir.int<u, 32>
#fn_attr = #cir<extra({nothrow = #cir.nothrow})>
#fn_attr1 = #cir<extra({inline = #cir.inline<no>, optnone = #cir.optnone})>
#loc5 = loc("CWE190_Integer_Overflow__unsigned_int_rand_add_43.cpp":25:23)
#loc6 = loc("CWE190_Integer_Overflow__unsigned_int_rand_add_43.cpp":25:37)
#loc28 = loc("CWE190_Integer_Overflow__unsigned_int_rand_add_43.cpp":48:27)
#loc29 = loc("CWE190_Integer_Overflow__unsigned_int_rand_add_43.cpp":48:41)
#loc49 = loc("CWE190_Integer_Overflow__unsigned_int_rand_add_43.cpp":67:27)
#loc50 = loc("CWE190_Integer_Overflow__unsigned_int_rand_add_43.cpp":67:41)
#loc83 = loc(fused[#loc5, #loc6])
#loc93 = loc(fused[#loc28, #loc29])
#loc102 = loc(fused[#loc49, #loc50])
module @"/home/ladisgin/git_proj/test_projects/juliet-c/testcases/CWE190_Integer_Overflow/s05/CWE190_Integer_Overflow__unsigned_int_rand_add_43.cpp" attributes {cir.lang = #cir.lang<cxx>, cir.sob = #cir.signed_overflow_behavior<undefined>, cir.triple = "x86_64-unknown-linux-gnu", dlti.dl_spec = #dlti.dl_spec<#dlti.dl_entry<!llvm.ptr<270>, dense<32> : vector<4xi64>>, #dlti.dl_entry<i32, dense<32> : vector<2xi64>>, #dlti.dl_entry<i64, dense<64> : vector<2xi64>>, #dlti.dl_entry<f16, dense<16> : vector<2xi64>>, #dlti.dl_entry<f64, dense<64> : vector<2xi64>>, #dlti.dl_entry<!llvm.ptr<272>, dense<64> : vector<4xi64>>, #dlti.dl_entry<f128, dense<128> : vector<2xi64>>, #dlti.dl_entry<!llvm.ptr<271>, dense<32> : vector<4xi64>>, #dlti.dl_entry<f80, dense<128> : vector<2xi64>>, #dlti.dl_entry<i128, dense<128> : vector<2xi64>>, #dlti.dl_entry<i16, dense<16> : vector<2xi64>>, #dlti.dl_entry<i8, dense<8> : vector<2xi64>>, #dlti.dl_entry<i1, dense<8> : vector<2xi64>>, #dlti.dl_entry<!llvm.ptr, dense<64> : vector<4xi64>>, #dlti.dl_entry<"dlti.endianness", "little">, #dlti.dl_entry<"dlti.stack_alignment", 128 : i64>>, llvm.data_layout = "e-m:e-p270:32:32-p271:32:32-p272:64:64-i64:64-i128:128-f80:128-n8:16:32:64-S128"} {
  cir.func private  @rand() -> !s32i extra(#fn_attr) loc(#loc81)
  cir.func internal private  @_ZN49CWE190_Integer_Overflow__unsigned_int_rand_add_43L9badSourceERj(%arg0: !cir.ptr<!u32i> loc(fused[#loc5, #loc6])) extra(#fn_attr1) {
    %0 = cir.alloca !cir.ptr<!u32i>, !cir.ptr<!cir.ptr<!u32i>>, ["data", init, const] {alignment = 8 : i64} loc(#loc83)
    cir.store %arg0, %0 : !cir.ptr<!u32i>, !cir.ptr<!cir.ptr<!u32i>> loc(#loc7)
    %1 = cir.call @rand() : () -> !s32i extra(#fn_attr) loc(#loc8)
    %2 = cir.const #cir.int<1> : !s32i loc(#loc8)
    %3 = cir.binop(and, %1, %2) : !s32i loc(#loc8)
    %4 = cir.cast(int_to_bool, %3 : !s32i), !cir.bool loc(#loc8)
    %5 = cir.ternary(%4, true {
      %9 = cir.call @rand() : () -> !s32i extra(#fn_attr) loc(#loc8)
      %10 = cir.cast(integral, %9 : !s32i), !u32i loc(#loc8)
      %11 = cir.const #cir.int<30> : !s32i loc(#loc8)
      %12 = cir.shift(left, %10 : !u32i, %11 : !s32i) -> !u32i loc(#loc8)
      %13 = cir.call @rand() : () -> !s32i extra(#fn_attr) loc(#loc8)
      %14 = cir.cast(integral, %13 : !s32i), !u32i loc(#loc8)
      %15 = cir.const #cir.int<15> : !s32i loc(#loc8)
      %16 = cir.shift(left, %14 : !u32i, %15 : !s32i) -> !u32i loc(#loc8)
      %17 = cir.binop(xor, %12, %16) : !u32i loc(#loc8)
      %18 = cir.call @rand() : () -> !s32i extra(#fn_attr) loc(#loc8)
      %19 = cir.cast(integral, %18 : !s32i), !u32i loc(#loc8)
      %20 = cir.binop(xor, %17, %19) : !u32i loc(#loc8)
      cir.yield %20 : !u32i loc(#loc8)
    }, false {
      %9 = cir.call @rand() : () -> !s32i extra(#fn_attr) loc(#loc8)
      %10 = cir.cast(integral, %9 : !s32i), !u32i loc(#loc8)
      %11 = cir.const #cir.int<30> : !s32i loc(#loc8)
      %12 = cir.shift(left, %10 : !u32i, %11 : !s32i) -> !u32i loc(#loc8)
      %13 = cir.call @rand() : () -> !s32i extra(#fn_attr) loc(#loc8)
      %14 = cir.cast(integral, %13 : !s32i), !u32i loc(#loc8)
      %15 = cir.const #cir.int<15> : !s32i loc(#loc8)
      %16 = cir.shift(left, %14 : !u32i, %15 : !s32i) -> !u32i loc(#loc8)
      %17 = cir.binop(xor, %12, %16) : !u32i loc(#loc8)
      %18 = cir.call @rand() : () -> !s32i extra(#fn_attr) loc(#loc8)
      %19 = cir.cast(integral, %18 : !s32i), !u32i loc(#loc8)
      %20 = cir.binop(xor, %17, %19) : !u32i loc(#loc8)
      %21 = cir.unary(minus, %20) : !u32i, !u32i loc(#loc8)
      %22 = cir.const #cir.int<1> : !s32i loc(#loc8)
      %23 = cir.cast(integral, %22 : !s32i), !u32i loc(#loc8)
      %24 = cir.binop(sub, %21, %23) : !u32i loc(#loc8)
      cir.yield %24 : !u32i loc(#loc8)
    }) : (!cir.bool) -> !u32i loc(#loc8)
    %6 = cir.cast(integral, %5 : !u32i), !s32i loc(#loc8)
    %7 = cir.cast(integral, %6 : !s32i), !u32i loc(#loc8)
    %8 = cir.load %0 : !cir.ptr<!cir.ptr<!u32i>>, !cir.ptr<!u32i> loc(#loc9)
    cir.store %7, %8 : !u32i, !cir.ptr<!u32i> loc(#loc84)
    cir.return loc(#loc4)
  } loc(#loc82)
  cir.func private  @printUnsignedLine(!u32i) loc(#loc85)
  cir.func  @_ZN49CWE190_Integer_Overflow__unsigned_int_rand_add_433badEv() extra(#fn_attr1) {
    %0 = cir.alloca !u32i, !cir.ptr<!u32i>, ["data"] {alignment = 4 : i64} loc(#loc87)
    %1 = cir.const #cir.int<0> : !s32i loc(#loc16)
    %2 = cir.cast(integral, %1 : !s32i), !u32i loc(#loc16)
    cir.store %2, %0 : !u32i, !cir.ptr<!u32i> loc(#loc88)
    cir.call @_ZN49CWE190_Integer_Overflow__unsigned_int_rand_add_43L9badSourceERj(%0) : (!cir.ptr<!u32i>) -> () loc(#loc18)
    cir.scope {
      %3 = cir.alloca !u32i, !cir.ptr<!u32i>, ["result", init] {alignment = 4 : i64} loc(#loc90)
      %4 = cir.load %0 : !cir.ptr<!u32i>, !u32i loc(#loc23)
      %5 = cir.const #cir.int<1> : !s32i loc(#loc22)
      %6 = cir.cast(integral, %5 : !s32i), !u32i loc(#loc22)
      %7 = cir.binop(add, %4, %6) : !u32i loc(#loc91)
      cir.store %7, %3 : !u32i, !cir.ptr<!u32i> loc(#loc90)
      %8 = cir.load %3 : !cir.ptr<!u32i>, !u32i loc(#loc24)
      cir.call @printUnsignedLine(%8) : (!u32i) -> () loc(#loc25)
    } loc(#loc89)
    cir.return loc(#loc13)
  } loc(#loc86)
  cir.func internal private  @_ZN49CWE190_Integer_Overflow__unsigned_int_rand_add_43L13goodG2BSourceERj(%arg0: !cir.ptr<!u32i> loc(fused[#loc28, #loc29])) extra(#fn_attr1) {
    %0 = cir.alloca !cir.ptr<!u32i>, !cir.ptr<!cir.ptr<!u32i>>, ["data", init, const] {alignment = 8 : i64} loc(#loc93)
    cir.store %arg0, %0 : !cir.ptr<!u32i>, !cir.ptr<!cir.ptr<!u32i>> loc(#loc30)
    %1 = cir.const #cir.int<2> : !s32i loc(#loc31)
    %2 = cir.cast(integral, %1 : !s32i), !u32i loc(#loc31)
    %3 = cir.load %0 : !cir.ptr<!cir.ptr<!u32i>>, !cir.ptr<!u32i> loc(#loc32)
    cir.store %2, %3 : !u32i, !cir.ptr<!u32i> loc(#loc94)
    cir.return loc(#loc27)
  } loc(#loc92)
  cir.func internal private  @_ZN49CWE190_Integer_Overflow__unsigned_int_rand_add_43L7goodG2BEv() extra(#fn_attr1) {
    %0 = cir.alloca !u32i, !cir.ptr<!u32i>, ["data"] {alignment = 4 : i64} loc(#loc96)
    %1 = cir.const #cir.int<0> : !s32i loc(#loc37)
    %2 = cir.cast(integral, %1 : !s32i), !u32i loc(#loc37)
    cir.store %2, %0 : !u32i, !cir.ptr<!u32i> loc(#loc97)
    cir.call @_ZN49CWE190_Integer_Overflow__unsigned_int_rand_add_43L13goodG2BSourceERj(%0) : (!cir.ptr<!u32i>) -> () loc(#loc39)
    cir.scope {
      %3 = cir.alloca !u32i, !cir.ptr<!u32i>, ["result", init] {alignment = 4 : i64} loc(#loc99)
      %4 = cir.load %0 : !cir.ptr<!u32i>, !u32i loc(#loc44)
      %5 = cir.const #cir.int<1> : !s32i loc(#loc43)
      %6 = cir.cast(integral, %5 : !s32i), !u32i loc(#loc43)
      %7 = cir.binop(add, %4, %6) : !u32i loc(#loc100)
      cir.store %7, %3 : !u32i, !cir.ptr<!u32i> loc(#loc99)
      %8 = cir.load %3 : !cir.ptr<!u32i>, !u32i loc(#loc45)
      cir.call @printUnsignedLine(%8) : (!u32i) -> () loc(#loc46)
    } loc(#loc98)
    cir.return loc(#loc34)
  } loc(#loc95)
  cir.func internal private  @_ZN49CWE190_Integer_Overflow__unsigned_int_rand_add_43L13goodB2GSourceERj(%arg0: !cir.ptr<!u32i> loc(fused[#loc49, #loc50])) extra(#fn_attr1) {
    %0 = cir.alloca !cir.ptr<!u32i>, !cir.ptr<!cir.ptr<!u32i>>, ["data", init, const] {alignment = 8 : i64} loc(#loc102)
    cir.store %arg0, %0 : !cir.ptr<!u32i>, !cir.ptr<!cir.ptr<!u32i>> loc(#loc51)
    %1 = cir.call @rand() : () -> !s32i extra(#fn_attr) loc(#loc52)
    %2 = cir.const #cir.int<1> : !s32i loc(#loc52)
    %3 = cir.binop(and, %1, %2) : !s32i loc(#loc52)
    %4 = cir.cast(int_to_bool, %3 : !s32i), !cir.bool loc(#loc52)
    %5 = cir.ternary(%4, true {
      %9 = cir.call @rand() : () -> !s32i extra(#fn_attr) loc(#loc52)
      %10 = cir.cast(integral, %9 : !s32i), !u32i loc(#loc52)
      %11 = cir.const #cir.int<30> : !s32i loc(#loc52)
      %12 = cir.shift(left, %10 : !u32i, %11 : !s32i) -> !u32i loc(#loc52)
      %13 = cir.call @rand() : () -> !s32i extra(#fn_attr) loc(#loc52)
      %14 = cir.cast(integral, %13 : !s32i), !u32i loc(#loc52)
      %15 = cir.const #cir.int<15> : !s32i loc(#loc52)
      %16 = cir.shift(left, %14 : !u32i, %15 : !s32i) -> !u32i loc(#loc52)
      %17 = cir.binop(xor, %12, %16) : !u32i loc(#loc52)
      %18 = cir.call @rand() : () -> !s32i extra(#fn_attr) loc(#loc52)
      %19 = cir.cast(integral, %18 : !s32i), !u32i loc(#loc52)
      %20 = cir.binop(xor, %17, %19) : !u32i loc(#loc52)
      cir.yield %20 : !u32i loc(#loc52)
    }, false {
      %9 = cir.call @rand() : () -> !s32i extra(#fn_attr) loc(#loc52)
      %10 = cir.cast(integral, %9 : !s32i), !u32i loc(#loc52)
      %11 = cir.const #cir.int<30> : !s32i loc(#loc52)
      %12 = cir.shift(left, %10 : !u32i, %11 : !s32i) -> !u32i loc(#loc52)
      %13 = cir.call @rand() : () -> !s32i extra(#fn_attr) loc(#loc52)
      %14 = cir.cast(integral, %13 : !s32i), !u32i loc(#loc52)
      %15 = cir.const #cir.int<15> : !s32i loc(#loc52)
      %16 = cir.shift(left, %14 : !u32i, %15 : !s32i) -> !u32i loc(#loc52)
      %17 = cir.binop(xor, %12, %16) : !u32i loc(#loc52)
      %18 = cir.call @rand() : () -> !s32i extra(#fn_attr) loc(#loc52)
      %19 = cir.cast(integral, %18 : !s32i), !u32i loc(#loc52)
      %20 = cir.binop(xor, %17, %19) : !u32i loc(#loc52)
      %21 = cir.unary(minus, %20) : !u32i, !u32i loc(#loc52)
      %22 = cir.const #cir.int<1> : !s32i loc(#loc52)
      %23 = cir.cast(integral, %22 : !s32i), !u32i loc(#loc52)
      %24 = cir.binop(sub, %21, %23) : !u32i loc(#loc52)
      cir.yield %24 : !u32i loc(#loc52)
    }) : (!cir.bool) -> !u32i loc(#loc52)
    %6 = cir.cast(integral, %5 : !u32i), !s32i loc(#loc52)
    %7 = cir.cast(integral, %6 : !s32i), !u32i loc(#loc52)
    %8 = cir.load %0 : !cir.ptr<!cir.ptr<!u32i>>, !cir.ptr<!u32i> loc(#loc53)
    cir.store %7, %8 : !u32i, !cir.ptr<!u32i> loc(#loc103)
    cir.return loc(#loc48)
  } loc(#loc101)
  cir.func private  @printLine(!cir.ptr<!s8i>) loc(#loc104)
  cir.global "private"  constant internal dsolocal @".str" = #cir.const_array<"data value is too large to perform arithmetic safely.\00" : !cir.array<!s8i x 54>> : !cir.array<!s8i x 54> {alignment = 1 : i64} loc(#loc56)
  cir.func internal private  @_ZN49CWE190_Integer_Overflow__unsigned_int_rand_add_43L7goodB2GEv() extra(#fn_attr1) {
    %0 = cir.alloca !u32i, !cir.ptr<!u32i>, ["data"] {alignment = 4 : i64} loc(#loc106)
    %1 = cir.const #cir.int<0> : !s32i loc(#loc61)
    %2 = cir.cast(integral, %1 : !s32i), !u32i loc(#loc61)
    cir.store %2, %0 : !u32i, !cir.ptr<!u32i> loc(#loc107)
    cir.call @_ZN49CWE190_Integer_Overflow__unsigned_int_rand_add_43L13goodB2GSourceERj(%0) : (!cir.ptr<!u32i>) -> () loc(#loc63)
    cir.scope {
      %3 = cir.load %0 : !cir.ptr<!u32i>, !u32i loc(#loc66)
      %4 = cir.const #cir.int<2147483647> : !s32i loc(#loc67)
      %5 = cir.cast(integral, %4 : !s32i), !u32i loc(#loc67)
      %6 = cir.const #cir.int<2> : !u32i loc(#loc67)
      %7 = cir.binop(mul, %5, %6) : !u32i loc(#loc67)
      %8 = cir.const #cir.int<1> : !u32i loc(#loc67)
      %9 = cir.binop(add, %7, %8) : !u32i loc(#loc67)
      %10 = cir.cmp(lt, %3, %9) : !u32i, !cir.bool loc(#loc109)
      cir.if %10 {
        %11 = cir.alloca !u32i, !cir.ptr<!u32i>, ["result", init] {alignment = 4 : i64} loc(#loc111)
        %12 = cir.load %0 : !cir.ptr<!u32i>, !u32i loc(#loc73)
        %13 = cir.const #cir.int<1> : !s32i loc(#loc72)
        %14 = cir.cast(integral, %13 : !s32i), !u32i loc(#loc72)
        %15 = cir.binop(add, %12, %14) : !u32i loc(#loc112)
        cir.store %15, %11 : !u32i, !cir.ptr<!u32i> loc(#loc111)
        %16 = cir.load %11 : !cir.ptr<!u32i>, !u32i loc(#loc74)
        cir.call @printUnsignedLine(%16) : (!u32i) -> () loc(#loc75)
      } else {
        %11 = cir.get_global @".str" : !cir.ptr<!cir.array<!s8i x 54>> loc(#loc56)
        %12 = cir.cast(array_to_ptrdecay, %11 : !cir.ptr<!cir.array<!s8i x 54>>), !cir.ptr<!s8i> loc(#loc56)
        cir.call @printLine(%12) : (!cir.ptr<!s8i>) -> () loc(#loc76)
      } loc(#loc110)
    } loc(#loc108)
    cir.return loc(#loc58)
  } loc(#loc105)
  cir.func  @_ZN49CWE190_Integer_Overflow__unsigned_int_rand_add_434goodEv() extra(#fn_attr1) {
    cir.call @_ZN49CWE190_Integer_Overflow__unsigned_int_rand_add_43L7goodG2BEv() : () -> () loc(#loc79)
    cir.call @_ZN49CWE190_Integer_Overflow__unsigned_int_rand_add_43L7goodB2GEv() : () -> () loc(#loc80)
    cir.return loc(#loc78)
  } loc(#loc113)
} loc(#loc)
#loc = loc("/home/ladisgin/git_proj/test_projects/juliet-c/testcases/CWE190_Integer_Overflow/s05/CWE190_Integer_Overflow__unsigned_int_rand_add_43.cpp":0:0)
#loc1 = loc("/usr/include/stdlib.h":573:1)
#loc2 = loc("/usr/include/stdlib.h":573:24)
#loc3 = loc("CWE190_Integer_Overflow__unsigned_int_rand_add_43.cpp":25:1)
#loc4 = loc("CWE190_Integer_Overflow__unsigned_int_rand_add_43.cpp":29:1)
#loc7 = loc("CWE190_Integer_Overflow__unsigned_int_rand_add_43.cpp":26:1)
#loc8 = loc("CWE190_Integer_Overflow__unsigned_int_rand_add_43.cpp":28:26)
#loc9 = loc("CWE190_Integer_Overflow__unsigned_int_rand_add_43.cpp":28:5)
#loc10 = loc("../../../testcasesupport/std_testcase_io.h":34:1)
#loc11 = loc("../../../testcasesupport/std_testcase_io.h":34:47)
#loc12 = loc("CWE190_Integer_Overflow__unsigned_int_rand_add_43.cpp":31:1)
#loc13 = loc("CWE190_Integer_Overflow__unsigned_int_rand_add_43.cpp":41:1)
#loc14 = loc("CWE190_Integer_Overflow__unsigned_int_rand_add_43.cpp":33:5)
#loc15 = loc("CWE190_Integer_Overflow__unsigned_int_rand_add_43.cpp":33:18)
#loc16 = loc("CWE190_Integer_Overflow__unsigned_int_rand_add_43.cpp":34:12)
#loc17 = loc("CWE190_Integer_Overflow__unsigned_int_rand_add_43.cpp":34:5)
#loc18 = loc("CWE190_Integer_Overflow__unsigned_int_rand_add_43.cpp":35:5)
#loc19 = loc("CWE190_Integer_Overflow__unsigned_int_rand_add_43.cpp":36:5)
#loc20 = loc("CWE190_Integer_Overflow__unsigned_int_rand_add_43.cpp":40:5)
#loc21 = loc("CWE190_Integer_Overflow__unsigned_int_rand_add_43.cpp":38:9)
#loc22 = loc("CWE190_Integer_Overflow__unsigned_int_rand_add_43.cpp":38:38)
#loc23 = loc("CWE190_Integer_Overflow__unsigned_int_rand_add_43.cpp":38:31)
#loc24 = loc("CWE190_Integer_Overflow__unsigned_int_rand_add_43.cpp":39:27)
#loc25 = loc("CWE190_Integer_Overflow__unsigned_int_rand_add_43.cpp":39:9)
#loc26 = loc("CWE190_Integer_Overflow__unsigned_int_rand_add_43.cpp":48:1)
#loc27 = loc("CWE190_Integer_Overflow__unsigned_int_rand_add_43.cpp":52:1)
#loc30 = loc("CWE190_Integer_Overflow__unsigned_int_rand_add_43.cpp":49:1)
#loc31 = loc("CWE190_Integer_Overflow__unsigned_int_rand_add_43.cpp":51:12)
#loc32 = loc("CWE190_Integer_Overflow__unsigned_int_rand_add_43.cpp":51:5)
#loc33 = loc("CWE190_Integer_Overflow__unsigned_int_rand_add_43.cpp":54:1)
#loc34 = loc("CWE190_Integer_Overflow__unsigned_int_rand_add_43.cpp":64:1)
#loc35 = loc("CWE190_Integer_Overflow__unsigned_int_rand_add_43.cpp":56:5)
#loc36 = loc("CWE190_Integer_Overflow__unsigned_int_rand_add_43.cpp":56:18)
#loc37 = loc("CWE190_Integer_Overflow__unsigned_int_rand_add_43.cpp":57:12)
#loc38 = loc("CWE190_Integer_Overflow__unsigned_int_rand_add_43.cpp":57:5)
#loc39 = loc("CWE190_Integer_Overflow__unsigned_int_rand_add_43.cpp":58:5)
#loc40 = loc("CWE190_Integer_Overflow__unsigned_int_rand_add_43.cpp":59:5)
#loc41 = loc("CWE190_Integer_Overflow__unsigned_int_rand_add_43.cpp":63:5)
#loc42 = loc("CWE190_Integer_Overflow__unsigned_int_rand_add_43.cpp":61:9)
#loc43 = loc("CWE190_Integer_Overflow__unsigned_int_rand_add_43.cpp":61:38)
#loc44 = loc("CWE190_Integer_Overflow__unsigned_int_rand_add_43.cpp":61:31)
#loc45 = loc("CWE190_Integer_Overflow__unsigned_int_rand_add_43.cpp":62:27)
#loc46 = loc("CWE190_Integer_Overflow__unsigned_int_rand_add_43.cpp":62:9)
#loc47 = loc("CWE190_Integer_Overflow__unsigned_int_rand_add_43.cpp":67:1)
#loc48 = loc("CWE190_Integer_Overflow__unsigned_int_rand_add_43.cpp":71:1)
#loc51 = loc("CWE190_Integer_Overflow__unsigned_int_rand_add_43.cpp":68:1)
#loc52 = loc("CWE190_Integer_Overflow__unsigned_int_rand_add_43.cpp":70:26)
#loc53 = loc("CWE190_Integer_Overflow__unsigned_int_rand_add_43.cpp":70:5)
#loc54 = loc("../../../testcasesupport/std_testcase_io.h":14:1)
#loc55 = loc("../../../testcasesupport/std_testcase_io.h":14:33)
#loc56 = loc("CWE190_Integer_Overflow__unsigned_int_rand_add_43.cpp":86:19)
#loc57 = loc("CWE190_Integer_Overflow__unsigned_int_rand_add_43.cpp":73:1)
#loc58 = loc("CWE190_Integer_Overflow__unsigned_int_rand_add_43.cpp":88:1)
#loc59 = loc("CWE190_Integer_Overflow__unsigned_int_rand_add_43.cpp":75:5)
#loc60 = loc("CWE190_Integer_Overflow__unsigned_int_rand_add_43.cpp":75:18)
#loc61 = loc("CWE190_Integer_Overflow__unsigned_int_rand_add_43.cpp":76:12)
#loc62 = loc("CWE190_Integer_Overflow__unsigned_int_rand_add_43.cpp":76:5)
#loc63 = loc("CWE190_Integer_Overflow__unsigned_int_rand_add_43.cpp":77:5)
#loc64 = loc("CWE190_Integer_Overflow__unsigned_int_rand_add_43.cpp":79:5)
#loc65 = loc("CWE190_Integer_Overflow__unsigned_int_rand_add_43.cpp":87:5)
#loc66 = loc("CWE190_Integer_Overflow__unsigned_int_rand_add_43.cpp":79:9)
#loc67 = loc("CWE190_Integer_Overflow__unsigned_int_rand_add_43.cpp":79:16)
#loc68 = loc("CWE190_Integer_Overflow__unsigned_int_rand_add_43.cpp":80:5)
#loc69 = loc("CWE190_Integer_Overflow__unsigned_int_rand_add_43.cpp":83:5)
#loc70 = loc("CWE190_Integer_Overflow__unsigned_int_rand_add_43.cpp":85:5)
#loc71 = loc("CWE190_Integer_Overflow__unsigned_int_rand_add_43.cpp":81:9)
#loc72 = loc("CWE190_Integer_Overflow__unsigned_int_rand_add_43.cpp":81:38)
#loc73 = loc("CWE190_Integer_Overflow__unsigned_int_rand_add_43.cpp":81:31)
#loc74 = loc("CWE190_Integer_Overflow__unsigned_int_rand_add_43.cpp":82:27)
#loc75 = loc("CWE190_Integer_Overflow__unsigned_int_rand_add_43.cpp":82:9)
#loc76 = loc("CWE190_Integer_Overflow__unsigned_int_rand_add_43.cpp":86:9)
#loc77 = loc("CWE190_Integer_Overflow__unsigned_int_rand_add_43.cpp":90:1)
#loc78 = loc("CWE190_Integer_Overflow__unsigned_int_rand_add_43.cpp":94:1)
#loc79 = loc("CWE190_Integer_Overflow__unsigned_int_rand_add_43.cpp":92:5)
#loc80 = loc("CWE190_Integer_Overflow__unsigned_int_rand_add_43.cpp":93:5)
#loc81 = loc(fused[#loc1, #loc2])
#loc82 = loc(fused[#loc3, #loc4])
#loc84 = loc(fused[#loc9, #loc8])
#loc85 = loc(fused[#loc10, #loc11])
#loc86 = loc(fused[#loc12, #loc13])
#loc87 = loc(fused[#loc14, #loc15])
#loc88 = loc(fused[#loc17, #loc16])
#loc89 = loc(fused[#loc19, #loc20])
#loc90 = loc(fused[#loc21, #loc22])
#loc91 = loc(fused[#loc23, #loc22])
#loc92 = loc(fused[#loc26, #loc27])
#loc94 = loc(fused[#loc32, #loc31])
#loc95 = loc(fused[#loc33, #loc34])
#loc96 = loc(fused[#loc35, #loc36])
#loc97 = loc(fused[#loc38, #loc37])
#loc98 = loc(fused[#loc40, #loc41])
#loc99 = loc(fused[#loc42, #loc43])
#loc100 = loc(fused[#loc44, #loc43])
#loc101 = loc(fused[#loc47, #loc48])
#loc103 = loc(fused[#loc53, #loc52])
#loc104 = loc(fused[#loc54, #loc55])
#loc105 = loc(fused[#loc57, #loc58])
#loc106 = loc(fused[#loc59, #loc60])
#loc107 = loc(fused[#loc62, #loc61])
#loc108 = loc(fused[#loc64, #loc65])
#loc109 = loc(fused[#loc66, #loc67])
#loc110 = loc(fused[#loc68, #loc69, #loc70, #loc65])
#loc111 = loc(fused[#loc71, #loc72])
#loc112 = loc(fused[#loc73, #loc72])
#loc113 = loc(fused[#loc77, #loc78])
