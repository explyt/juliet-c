!s32i = !cir.int<s, 32>
!u64i = !cir.int<u, 64>
!u8i = !cir.int<u, 8>
!void = !cir.void
#fn_attr = #cir<extra({inline = #cir.inline<no>, nothrow = #cir.nothrow, optnone = #cir.optnone, uwtable = #cir.uwtable<async>})>
!ty__twoIntsStruct = !cir.record<struct "_twoIntsStruct" {!s32i, !s32i} #cir.record.decl.ast>
module @"/workspaces/juliet-c/testcases/CWE121_Stack_Based_Buffer_Overflow/s04/CWE121_Stack_Based_Buffer_Overflow__CWE805_struct_alloca_loop_16.c" attributes {cir.lang = #cir.lang<c>, cir.sob = #cir.signed_overflow_behavior<undefined>, cir.triple = "x86_64-unknown-linux-gnu", cir.type_size_info = #cir.type_size_info<char = 8, int = 32, size_t = 64>, cir.uwtable = #cir.uwtable<async>, dlti.dl_spec = #dlti.dl_spec<f16 = dense<16> : vector<2xi64>, f64 = dense<64> : vector<2xi64>, i32 = dense<32> : vector<2xi64>, i16 = dense<16> : vector<2xi64>, i8 = dense<8> : vector<2xi64>, i1 = dense<8> : vector<2xi64>, !llvm.ptr = dense<64> : vector<4xi64>, f80 = dense<128> : vector<2xi64>, i128 = dense<128> : vector<2xi64>, !llvm.ptr<272> = dense<64> : vector<4xi64>, !llvm.ptr<270> = dense<32> : vector<4xi64>, i64 = dense<64> : vector<2xi64>, f128 = dense<128> : vector<2xi64>, !llvm.ptr<271> = dense<32> : vector<4xi64>, "dlti.endianness" = "little", "dlti.mangling_mode" = "e", "dlti.stack_alignment" = 128 : i64>} {
  cir.func private @printStructLine(!cir.ptr<!ty__twoIntsStruct>) loc(#loc133)
  cir.func no_proto @CWE121_Stack_Based_Buffer_Overflow__CWE805_struct_alloca_loop_16_bad() extra(#fn_attr) {
    %0 = cir.alloca !cir.ptr<!ty__twoIntsStruct>, !cir.ptr<!cir.ptr<!ty__twoIntsStruct>>, ["data"] {alignment = 8 : i64} loc(#loc135)
    %1 = cir.alloca !cir.ptr<!ty__twoIntsStruct>, !cir.ptr<!cir.ptr<!ty__twoIntsStruct>>, ["dataBadBuffer", init] {alignment = 8 : i64} loc(#loc136)
    %2 = cir.const #cir.int<50> : !s32i loc(#loc8)
    %3 = cir.cast(integral, %2 : !s32i), !u64i loc(#loc8)
    %4 = cir.const #cir.int<8> : !u64i loc(#loc8)
    %5 = cir.binop(mul, %3, %4) : !u64i loc(#loc8)
    %6 = cir.alloca !u8i, !cir.ptr<!u8i>, %5 : !u64i, ["bi_alloca"] {alignment = 16 : i64} loc(#loc8)
    %7 = cir.alloca !cir.ptr<!ty__twoIntsStruct>, !cir.ptr<!cir.ptr<!ty__twoIntsStruct>>, ["dataGoodBuffer", init] {alignment = 8 : i64} loc(#loc137)
    %8 = cir.cast(bitcast, %6 : !cir.ptr<!u8i>), !cir.ptr<!void> loc(#loc8)
    %9 = cir.cast(bitcast, %8 : !cir.ptr<!void>), !cir.ptr<!ty__twoIntsStruct> loc(#loc8)
    cir.store %9, %1 : !cir.ptr<!ty__twoIntsStruct>, !cir.ptr<!cir.ptr<!ty__twoIntsStruct>> loc(#loc136)
    %10 = cir.const #cir.int<100> : !s32i loc(#loc10)
    %11 = cir.cast(integral, %10 : !s32i), !u64i loc(#loc10)
    %12 = cir.const #cir.int<8> : !u64i loc(#loc10)
    %13 = cir.binop(mul, %11, %12) : !u64i loc(#loc10)
    %14 = cir.alloca !u8i, !cir.ptr<!u8i>, %13 : !u64i, ["bi_alloca"] {alignment = 16 : i64} loc(#loc10)
    %15 = cir.cast(bitcast, %14 : !cir.ptr<!u8i>), !cir.ptr<!void> loc(#loc10)
    %16 = cir.cast(bitcast, %15 : !cir.ptr<!void>), !cir.ptr<!ty__twoIntsStruct> loc(#loc10)
    cir.store %16, %7 : !cir.ptr<!ty__twoIntsStruct>, !cir.ptr<!cir.ptr<!ty__twoIntsStruct>> loc(#loc137)
    cir.scope {
      cir.while {
        %17 = cir.const #cir.int<1> : !s32i loc(#loc13)
        %18 = cir.cast(int_to_bool, %17 : !s32i), !cir.bool loc(#loc13)
        cir.condition(%18) loc(#loc13)
      } do {
        cir.scope {
          %17 = cir.load %1 : !cir.ptr<!cir.ptr<!ty__twoIntsStruct>>, !cir.ptr<!ty__twoIntsStruct> loc(#loc15)
          cir.store %17, %0 : !cir.ptr<!ty__twoIntsStruct>, !cir.ptr<!cir.ptr<!ty__twoIntsStruct>> loc(#loc140)
          cir.break loc(#loc17)
        } loc(#loc139)
        cir.yield loc(#loc12)
      } loc(#loc138)
    } loc(#loc138)
    cir.scope {
      %17 = cir.alloca !cir.array<!ty__twoIntsStruct x 100>, !cir.ptr<!cir.array<!ty__twoIntsStruct x 100>>, ["source"] {alignment = 16 : i64} loc(#loc142)
      cir.scope {
        %18 = cir.alloca !u64i, !cir.ptr<!u64i>, ["i"] {alignment = 8 : i64} loc(#loc144)
        cir.scope {
          %19 = cir.const #cir.int<0> : !s32i loc(#loc28)
          %20 = cir.cast(integral, %19 : !s32i), !u64i loc(#loc28)
          cir.store %20, %18 : !u64i, !cir.ptr<!u64i> loc(#loc146)
          cir.for : cond {
            %21 = cir.load %18 : !cir.ptr<!u64i>, !u64i loc(#loc30)
            %22 = cir.const #cir.int<100> : !s32i loc(#loc31)
            %23 = cir.cast(integral, %22 : !s32i), !u64i loc(#loc31)
            %24 = cir.cmp(lt, %21, %23) : !u64i, !cir.bool loc(#loc147)
            cir.condition(%24) loc(#loc32)
          } body {
            cir.scope {
              %21 = cir.const #cir.int<0> : !s32i loc(#loc34)
              %22 = cir.load %18 : !cir.ptr<!u64i>, !u64i loc(#loc35)
              %23 = cir.cast(array_to_ptrdecay, %17 : !cir.ptr<!cir.array<!ty__twoIntsStruct x 100>>), !cir.ptr<!ty__twoIntsStruct> loc(#loc36)
              %24 = cir.ptr_stride(%23 : !cir.ptr<!ty__twoIntsStruct>, %22 : !u64i), !cir.ptr<!ty__twoIntsStruct> loc(#loc36)
              %25 = cir.get_member %24[0] {name = "intOne"} : !cir.ptr<!ty__twoIntsStruct> -> !cir.ptr<!s32i> loc(#loc37)
              cir.store %21, %25 : !s32i, !cir.ptr<!s32i> loc(#loc149)
              %26 = cir.const #cir.int<0> : !s32i loc(#loc38)
              %27 = cir.load %18 : !cir.ptr<!u64i>, !u64i loc(#loc39)
              %28 = cir.cast(array_to_ptrdecay, %17 : !cir.ptr<!cir.array<!ty__twoIntsStruct x 100>>), !cir.ptr<!ty__twoIntsStruct> loc(#loc40)
              %29 = cir.ptr_stride(%28 : !cir.ptr<!ty__twoIntsStruct>, %27 : !u64i), !cir.ptr<!ty__twoIntsStruct> loc(#loc40)
              %30 = cir.get_member %29[1] {name = "intTwo"} : !cir.ptr<!ty__twoIntsStruct> -> !cir.ptr<!s32i> loc(#loc41)
              cir.store %26, %30 : !s32i, !cir.ptr<!s32i> loc(#loc150)
            } loc(#loc148)
            cir.yield loc(#loc27)
          } step {
            %21 = cir.load %18 : !cir.ptr<!u64i>, !u64i loc(#loc42)
            %22 = cir.unary(inc, %21) : !u64i, !u64i loc(#loc43)
            cir.store %22, %18 : !u64i, !cir.ptr<!u64i> loc(#loc151)
            cir.yield loc(#loc145)
          } loc(#loc145)
        } loc(#loc145)
      } loc(#loc143)
      cir.scope {
        %18 = cir.alloca !u64i, !cir.ptr<!u64i>, ["i"] {alignment = 8 : i64} loc(#loc153)
        cir.scope {
          %22 = cir.const #cir.int<0> : !s32i loc(#loc50)
          %23 = cir.cast(integral, %22 : !s32i), !u64i loc(#loc50)
          cir.store %23, %18 : !u64i, !cir.ptr<!u64i> loc(#loc155)
          cir.for : cond {
            %24 = cir.load %18 : !cir.ptr<!u64i>, !u64i loc(#loc52)
            %25 = cir.const #cir.int<100> : !s32i loc(#loc53)
            %26 = cir.cast(integral, %25 : !s32i), !u64i loc(#loc53)
            %27 = cir.cmp(lt, %24, %26) : !u64i, !cir.bool loc(#loc156)
            cir.condition(%27) loc(#loc54)
          } body {
            cir.scope {
              %24 = cir.load %0 : !cir.ptr<!cir.ptr<!ty__twoIntsStruct>>, !cir.ptr<!ty__twoIntsStruct> loc(#loc56)
              %25 = cir.load %18 : !cir.ptr<!u64i>, !u64i loc(#loc57)
              %26 = cir.ptr_stride(%24 : !cir.ptr<!ty__twoIntsStruct>, %25 : !u64i), !cir.ptr<!ty__twoIntsStruct> loc(#loc58)
              %27 = cir.load %18 : !cir.ptr<!u64i>, !u64i loc(#loc59)
              %28 = cir.cast(array_to_ptrdecay, %17 : !cir.ptr<!cir.array<!ty__twoIntsStruct x 100>>), !cir.ptr<!ty__twoIntsStruct> loc(#loc60)
              %29 = cir.ptr_stride(%28 : !cir.ptr<!ty__twoIntsStruct>, %27 : !u64i), !cir.ptr<!ty__twoIntsStruct> loc(#loc60)
              cir.copy %29 to %26 : !cir.ptr<!ty__twoIntsStruct> loc(#loc58)
            } loc(#loc157)
            cir.yield loc(#loc49)
          } step {
            %24 = cir.load %18 : !cir.ptr<!u64i>, !u64i loc(#loc61)
            %25 = cir.unary(inc, %24) : !u64i, !u64i loc(#loc62)
            cir.store %25, %18 : !u64i, !cir.ptr<!u64i> loc(#loc158)
            cir.yield loc(#loc154)
          } loc(#loc154)
        } loc(#loc154)
        %19 = cir.load %0 : !cir.ptr<!cir.ptr<!ty__twoIntsStruct>>, !cir.ptr<!ty__twoIntsStruct> loc(#loc63)
        %20 = cir.const #cir.int<0> : !s32i loc(#loc64)
        %21 = cir.ptr_stride(%19 : !cir.ptr<!ty__twoIntsStruct>, %20 : !s32i), !cir.ptr<!ty__twoIntsStruct> loc(#loc65)
        cir.call @printStructLine(%21) : (!cir.ptr<!ty__twoIntsStruct>) -> () loc(#loc66)
      } loc(#loc152)
    } loc(#loc141)
    cir.return loc(#loc4)
  } loc(#loc134)
  cir.func no_proto @CWE121_Stack_Based_Buffer_Overflow__CWE805_struct_alloca_loop_16_good() extra(#fn_attr) {
    %0 = cir.get_global @goodG2B : !cir.ptr<!cir.func<()>> loc(#loc160)
    cir.call %0() : (!cir.ptr<!cir.func<()>>) -> () loc(#loc69)
    cir.return loc(#loc68)
  } loc(#loc159)
  cir.func no_proto internal private @goodG2B() extra(#fn_attr) {
    %0 = cir.alloca !cir.ptr<!ty__twoIntsStruct>, !cir.ptr<!cir.ptr<!ty__twoIntsStruct>>, ["data"] {alignment = 8 : i64} loc(#loc162)
    %1 = cir.alloca !cir.ptr<!ty__twoIntsStruct>, !cir.ptr<!cir.ptr<!ty__twoIntsStruct>>, ["dataBadBuffer", init] {alignment = 8 : i64} loc(#loc163)
    %2 = cir.const #cir.int<50> : !s32i loc(#loc76)
    %3 = cir.cast(integral, %2 : !s32i), !u64i loc(#loc76)
    %4 = cir.const #cir.int<8> : !u64i loc(#loc76)
    %5 = cir.binop(mul, %3, %4) : !u64i loc(#loc76)
    %6 = cir.alloca !u8i, !cir.ptr<!u8i>, %5 : !u64i, ["bi_alloca"] {alignment = 16 : i64} loc(#loc76)
    %7 = cir.alloca !cir.ptr<!ty__twoIntsStruct>, !cir.ptr<!cir.ptr<!ty__twoIntsStruct>>, ["dataGoodBuffer", init] {alignment = 8 : i64} loc(#loc164)
    %8 = cir.cast(bitcast, %6 : !cir.ptr<!u8i>), !cir.ptr<!void> loc(#loc76)
    %9 = cir.cast(bitcast, %8 : !cir.ptr<!void>), !cir.ptr<!ty__twoIntsStruct> loc(#loc76)
    cir.store %9, %1 : !cir.ptr<!ty__twoIntsStruct>, !cir.ptr<!cir.ptr<!ty__twoIntsStruct>> loc(#loc163)
    %10 = cir.const #cir.int<100> : !s32i loc(#loc78)
    %11 = cir.cast(integral, %10 : !s32i), !u64i loc(#loc78)
    %12 = cir.const #cir.int<8> : !u64i loc(#loc78)
    %13 = cir.binop(mul, %11, %12) : !u64i loc(#loc78)
    %14 = cir.alloca !u8i, !cir.ptr<!u8i>, %13 : !u64i, ["bi_alloca"] {alignment = 16 : i64} loc(#loc78)
    %15 = cir.cast(bitcast, %14 : !cir.ptr<!u8i>), !cir.ptr<!void> loc(#loc78)
    %16 = cir.cast(bitcast, %15 : !cir.ptr<!void>), !cir.ptr<!ty__twoIntsStruct> loc(#loc78)
    cir.store %16, %7 : !cir.ptr<!ty__twoIntsStruct>, !cir.ptr<!cir.ptr<!ty__twoIntsStruct>> loc(#loc164)
    cir.scope {
      cir.while {
        %17 = cir.const #cir.int<1> : !s32i loc(#loc81)
        %18 = cir.cast(int_to_bool, %17 : !s32i), !cir.bool loc(#loc81)
        cir.condition(%18) loc(#loc81)
      } do {
        cir.scope {
          %17 = cir.load %7 : !cir.ptr<!cir.ptr<!ty__twoIntsStruct>>, !cir.ptr<!ty__twoIntsStruct> loc(#loc83)
          cir.store %17, %0 : !cir.ptr<!ty__twoIntsStruct>, !cir.ptr<!cir.ptr<!ty__twoIntsStruct>> loc(#loc167)
          cir.break loc(#loc85)
        } loc(#loc166)
        cir.yield loc(#loc80)
      } loc(#loc165)
    } loc(#loc165)
    cir.scope {
      %17 = cir.alloca !cir.array<!ty__twoIntsStruct x 100>, !cir.ptr<!cir.array<!ty__twoIntsStruct x 100>>, ["source"] {alignment = 16 : i64} loc(#loc169)
      cir.scope {
        %18 = cir.alloca !u64i, !cir.ptr<!u64i>, ["i"] {alignment = 8 : i64} loc(#loc171)
        cir.scope {
          %19 = cir.const #cir.int<0> : !s32i loc(#loc96)
          %20 = cir.cast(integral, %19 : !s32i), !u64i loc(#loc96)
          cir.store %20, %18 : !u64i, !cir.ptr<!u64i> loc(#loc173)
          cir.for : cond {
            %21 = cir.load %18 : !cir.ptr<!u64i>, !u64i loc(#loc98)
            %22 = cir.const #cir.int<100> : !s32i loc(#loc99)
            %23 = cir.cast(integral, %22 : !s32i), !u64i loc(#loc99)
            %24 = cir.cmp(lt, %21, %23) : !u64i, !cir.bool loc(#loc174)
            cir.condition(%24) loc(#loc100)
          } body {
            cir.scope {
              %21 = cir.const #cir.int<0> : !s32i loc(#loc102)
              %22 = cir.load %18 : !cir.ptr<!u64i>, !u64i loc(#loc103)
              %23 = cir.cast(array_to_ptrdecay, %17 : !cir.ptr<!cir.array<!ty__twoIntsStruct x 100>>), !cir.ptr<!ty__twoIntsStruct> loc(#loc104)
              %24 = cir.ptr_stride(%23 : !cir.ptr<!ty__twoIntsStruct>, %22 : !u64i), !cir.ptr<!ty__twoIntsStruct> loc(#loc104)
              %25 = cir.get_member %24[0] {name = "intOne"} : !cir.ptr<!ty__twoIntsStruct> -> !cir.ptr<!s32i> loc(#loc37)
              cir.store %21, %25 : !s32i, !cir.ptr<!s32i> loc(#loc176)
              %26 = cir.const #cir.int<0> : !s32i loc(#loc105)
              %27 = cir.load %18 : !cir.ptr<!u64i>, !u64i loc(#loc106)
              %28 = cir.cast(array_to_ptrdecay, %17 : !cir.ptr<!cir.array<!ty__twoIntsStruct x 100>>), !cir.ptr<!ty__twoIntsStruct> loc(#loc107)
              %29 = cir.ptr_stride(%28 : !cir.ptr<!ty__twoIntsStruct>, %27 : !u64i), !cir.ptr<!ty__twoIntsStruct> loc(#loc107)
              %30 = cir.get_member %29[1] {name = "intTwo"} : !cir.ptr<!ty__twoIntsStruct> -> !cir.ptr<!s32i> loc(#loc41)
              cir.store %26, %30 : !s32i, !cir.ptr<!s32i> loc(#loc177)
            } loc(#loc175)
            cir.yield loc(#loc95)
          } step {
            %21 = cir.load %18 : !cir.ptr<!u64i>, !u64i loc(#loc108)
            %22 = cir.unary(inc, %21) : !u64i, !u64i loc(#loc109)
            cir.store %22, %18 : !u64i, !cir.ptr<!u64i> loc(#loc178)
            cir.yield loc(#loc172)
          } loc(#loc172)
        } loc(#loc172)
      } loc(#loc170)
      cir.scope {
        %18 = cir.alloca !u64i, !cir.ptr<!u64i>, ["i"] {alignment = 8 : i64} loc(#loc180)
        cir.scope {
          %22 = cir.const #cir.int<0> : !s32i loc(#loc116)
          %23 = cir.cast(integral, %22 : !s32i), !u64i loc(#loc116)
          cir.store %23, %18 : !u64i, !cir.ptr<!u64i> loc(#loc182)
          cir.for : cond {
            %24 = cir.load %18 : !cir.ptr<!u64i>, !u64i loc(#loc118)
            %25 = cir.const #cir.int<100> : !s32i loc(#loc119)
            %26 = cir.cast(integral, %25 : !s32i), !u64i loc(#loc119)
            %27 = cir.cmp(lt, %24, %26) : !u64i, !cir.bool loc(#loc183)
            cir.condition(%27) loc(#loc120)
          } body {
            cir.scope {
              %24 = cir.load %0 : !cir.ptr<!cir.ptr<!ty__twoIntsStruct>>, !cir.ptr<!ty__twoIntsStruct> loc(#loc122)
              %25 = cir.load %18 : !cir.ptr<!u64i>, !u64i loc(#loc123)
              %26 = cir.ptr_stride(%24 : !cir.ptr<!ty__twoIntsStruct>, %25 : !u64i), !cir.ptr<!ty__twoIntsStruct> loc(#loc124)
              %27 = cir.load %18 : !cir.ptr<!u64i>, !u64i loc(#loc125)
              %28 = cir.cast(array_to_ptrdecay, %17 : !cir.ptr<!cir.array<!ty__twoIntsStruct x 100>>), !cir.ptr<!ty__twoIntsStruct> loc(#loc126)
              %29 = cir.ptr_stride(%28 : !cir.ptr<!ty__twoIntsStruct>, %27 : !u64i), !cir.ptr<!ty__twoIntsStruct> loc(#loc126)
              cir.copy %29 to %26 : !cir.ptr<!ty__twoIntsStruct> loc(#loc124)
            } loc(#loc184)
            cir.yield loc(#loc115)
          } step {
            %24 = cir.load %18 : !cir.ptr<!u64i>, !u64i loc(#loc127)
            %25 = cir.unary(inc, %24) : !u64i, !u64i loc(#loc128)
            cir.store %25, %18 : !u64i, !cir.ptr<!u64i> loc(#loc185)
            cir.yield loc(#loc181)
          } loc(#loc181)
        } loc(#loc181)
        %19 = cir.load %0 : !cir.ptr<!cir.ptr<!ty__twoIntsStruct>>, !cir.ptr<!ty__twoIntsStruct> loc(#loc129)
        %20 = cir.const #cir.int<0> : !s32i loc(#loc130)
        %21 = cir.ptr_stride(%19 : !cir.ptr<!ty__twoIntsStruct>, %20 : !s32i), !cir.ptr<!ty__twoIntsStruct> loc(#loc131)
        cir.call @printStructLine(%21) : (!cir.ptr<!ty__twoIntsStruct>) -> () loc(#loc132)
      } loc(#loc179)
    } loc(#loc168)
    cir.return loc(#loc72)
  } loc(#loc161)
} loc(#loc)
#loc = loc("/workspaces/juliet-c/testcases/CWE121_Stack_Based_Buffer_Overflow/s04/CWE121_Stack_Based_Buffer_Overflow__CWE805_struct_alloca_loop_16.c":0:0)
#loc1 = loc("../../../testcasesupport/std_testcase_io.h":40:1)
#loc2 = loc("../../../testcasesupport/std_testcase_io.h":40:63)
#loc3 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE805_struct_alloca_loop_16.c":21:1)
#loc4 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE805_struct_alloca_loop_16.c":54:1)
#loc5 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE805_struct_alloca_loop_16.c":23:5)
#loc6 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE805_struct_alloca_loop_16.c":23:21)
#loc7 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE805_struct_alloca_loop_16.c":24:5)
#loc8 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE805_struct_alloca_loop_16.c":24:54)
#loc9 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE805_struct_alloca_loop_16.c":25:5)
#loc10 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE805_struct_alloca_loop_16.c":25:55)
#loc11 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE805_struct_alloca_loop_16.c":26:5)
#loc12 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE805_struct_alloca_loop_16.c":32:5)
#loc13 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE805_struct_alloca_loop_16.c":26:11)
#loc14 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE805_struct_alloca_loop_16.c":27:5)
#loc15 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE805_struct_alloca_loop_16.c":30:16)
#loc16 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE805_struct_alloca_loop_16.c":30:9)
#loc17 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE805_struct_alloca_loop_16.c":31:9)
#loc18 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE805_struct_alloca_loop_16.c":33:5)
#loc19 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE805_struct_alloca_loop_16.c":53:5)
#loc20 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE805_struct_alloca_loop_16.c":34:9)
#loc21 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE805_struct_alloca_loop_16.c":34:33)
#loc22 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE805_struct_alloca_loop_16.c":35:9)
#loc23 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE805_struct_alloca_loop_16.c":43:9)
#loc24 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE805_struct_alloca_loop_16.c":36:13)
#loc25 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE805_struct_alloca_loop_16.c":36:20)
#loc26 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE805_struct_alloca_loop_16.c":38:13)
#loc27 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE805_struct_alloca_loop_16.c":42:13)
#loc28 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE805_struct_alloca_loop_16.c":38:22)
#loc29 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE805_struct_alloca_loop_16.c":38:18)
#loc30 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE805_struct_alloca_loop_16.c":38:25)
#loc31 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE805_struct_alloca_loop_16.c":38:29)
#loc32 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE805_struct_alloca_loop_16.c":38:27)
#loc33 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE805_struct_alloca_loop_16.c":39:13)
#loc34 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE805_struct_alloca_loop_16.c":40:36)
#loc35 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE805_struct_alloca_loop_16.c":40:24)
#loc36 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE805_struct_alloca_loop_16.c":40:17)
#loc37 = loc("../../../testcasesupport/std_testcase.h":98:9)
#loc38 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE805_struct_alloca_loop_16.c":41:36)
#loc39 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE805_struct_alloca_loop_16.c":41:24)
#loc40 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE805_struct_alloca_loop_16.c":41:17)
#loc41 = loc("../../../testcasesupport/std_testcase.h":99:9)
#loc42 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE805_struct_alloca_loop_16.c":38:35)
#loc43 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE805_struct_alloca_loop_16.c":38:34)
#loc44 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE805_struct_alloca_loop_16.c":44:9)
#loc45 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE805_struct_alloca_loop_16.c":52:9)
#loc46 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE805_struct_alloca_loop_16.c":45:13)
#loc47 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE805_struct_alloca_loop_16.c":45:20)
#loc48 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE805_struct_alloca_loop_16.c":47:13)
#loc49 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE805_struct_alloca_loop_16.c":50:13)
#loc50 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE805_struct_alloca_loop_16.c":47:22)
#loc51 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE805_struct_alloca_loop_16.c":47:18)
#loc52 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE805_struct_alloca_loop_16.c":47:25)
#loc53 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE805_struct_alloca_loop_16.c":47:29)
#loc54 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE805_struct_alloca_loop_16.c":47:27)
#loc55 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE805_struct_alloca_loop_16.c":48:13)
#loc56 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE805_struct_alloca_loop_16.c":49:17)
#loc57 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE805_struct_alloca_loop_16.c":49:22)
#loc58 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE805_struct_alloca_loop_16.c":49:23)
#loc59 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE805_struct_alloca_loop_16.c":49:34)
#loc60 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE805_struct_alloca_loop_16.c":49:27)
#loc61 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE805_struct_alloca_loop_16.c":47:35)
#loc62 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE805_struct_alloca_loop_16.c":47:34)
#loc63 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE805_struct_alloca_loop_16.c":51:30)
#loc64 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE805_struct_alloca_loop_16.c":51:35)
#loc65 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE805_struct_alloca_loop_16.c":51:36)
#loc66 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE805_struct_alloca_loop_16.c":51:13)
#loc67 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE805_struct_alloca_loop_16.c":95:1)
#loc68 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE805_struct_alloca_loop_16.c":98:1)
#loc69 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE805_struct_alloca_loop_16.c":97:5)
#loc70 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE805_struct_alloca_loop_16.c":97:13)
#loc71 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE805_struct_alloca_loop_16.c":61:1)
#loc72 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE805_struct_alloca_loop_16.c":93:1)
#loc73 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE805_struct_alloca_loop_16.c":63:5)
#loc74 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE805_struct_alloca_loop_16.c":63:21)
#loc75 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE805_struct_alloca_loop_16.c":64:5)
#loc76 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE805_struct_alloca_loop_16.c":64:54)
#loc77 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE805_struct_alloca_loop_16.c":65:5)
#loc78 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE805_struct_alloca_loop_16.c":65:55)
#loc79 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE805_struct_alloca_loop_16.c":66:5)
#loc80 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE805_struct_alloca_loop_16.c":71:5)
#loc81 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE805_struct_alloca_loop_16.c":66:11)
#loc82 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE805_struct_alloca_loop_16.c":67:5)
#loc83 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE805_struct_alloca_loop_16.c":69:16)
#loc84 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE805_struct_alloca_loop_16.c":69:9)
#loc85 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE805_struct_alloca_loop_16.c":70:9)
#loc86 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE805_struct_alloca_loop_16.c":72:5)
#loc87 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE805_struct_alloca_loop_16.c":92:5)
#loc88 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE805_struct_alloca_loop_16.c":73:9)
#loc89 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE805_struct_alloca_loop_16.c":73:33)
#loc90 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE805_struct_alloca_loop_16.c":74:9)
#loc91 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE805_struct_alloca_loop_16.c":82:9)
#loc92 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE805_struct_alloca_loop_16.c":75:13)
#loc93 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE805_struct_alloca_loop_16.c":75:20)
#loc94 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE805_struct_alloca_loop_16.c":77:13)
#loc95 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE805_struct_alloca_loop_16.c":81:13)
#loc96 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE805_struct_alloca_loop_16.c":77:22)
#loc97 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE805_struct_alloca_loop_16.c":77:18)
#loc98 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE805_struct_alloca_loop_16.c":77:25)
#loc99 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE805_struct_alloca_loop_16.c":77:29)
#loc100 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE805_struct_alloca_loop_16.c":77:27)
#loc101 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE805_struct_alloca_loop_16.c":78:13)
#loc102 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE805_struct_alloca_loop_16.c":79:36)
#loc103 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE805_struct_alloca_loop_16.c":79:24)
#loc104 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE805_struct_alloca_loop_16.c":79:17)
#loc105 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE805_struct_alloca_loop_16.c":80:36)
#loc106 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE805_struct_alloca_loop_16.c":80:24)
#loc107 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE805_struct_alloca_loop_16.c":80:17)
#loc108 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE805_struct_alloca_loop_16.c":77:35)
#loc109 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE805_struct_alloca_loop_16.c":77:34)
#loc110 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE805_struct_alloca_loop_16.c":83:9)
#loc111 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE805_struct_alloca_loop_16.c":91:9)
#loc112 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE805_struct_alloca_loop_16.c":84:13)
#loc113 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE805_struct_alloca_loop_16.c":84:20)
#loc114 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE805_struct_alloca_loop_16.c":86:13)
#loc115 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE805_struct_alloca_loop_16.c":89:13)
#loc116 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE805_struct_alloca_loop_16.c":86:22)
#loc117 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE805_struct_alloca_loop_16.c":86:18)
#loc118 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE805_struct_alloca_loop_16.c":86:25)
#loc119 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE805_struct_alloca_loop_16.c":86:29)
#loc120 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE805_struct_alloca_loop_16.c":86:27)
#loc121 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE805_struct_alloca_loop_16.c":87:13)
#loc122 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE805_struct_alloca_loop_16.c":88:17)
#loc123 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE805_struct_alloca_loop_16.c":88:22)
#loc124 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE805_struct_alloca_loop_16.c":88:23)
#loc125 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE805_struct_alloca_loop_16.c":88:34)
#loc126 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE805_struct_alloca_loop_16.c":88:27)
#loc127 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE805_struct_alloca_loop_16.c":86:35)
#loc128 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE805_struct_alloca_loop_16.c":86:34)
#loc129 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE805_struct_alloca_loop_16.c":90:30)
#loc130 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE805_struct_alloca_loop_16.c":90:35)
#loc131 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE805_struct_alloca_loop_16.c":90:36)
#loc132 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE805_struct_alloca_loop_16.c":90:13)
#loc133 = loc(fused[#loc1, #loc2])
#loc134 = loc(fused[#loc3, #loc4])
#loc135 = loc(fused[#loc5, #loc6])
#loc136 = loc(fused[#loc7, #loc8])
#loc137 = loc(fused[#loc9, #loc10])
#loc138 = loc(fused[#loc11, #loc12])
#loc139 = loc(fused[#loc14, #loc12])
#loc140 = loc(fused[#loc16, #loc15])
#loc141 = loc(fused[#loc18, #loc19])
#loc142 = loc(fused[#loc20, #loc21])
#loc143 = loc(fused[#loc22, #loc23])
#loc144 = loc(fused[#loc24, #loc25])
#loc145 = loc(fused[#loc26, #loc27])
#loc146 = loc(fused[#loc29, #loc28])
#loc147 = loc(fused[#loc30, #loc31])
#loc148 = loc(fused[#loc33, #loc27])
#loc149 = loc(fused[#loc36, #loc34])
#loc150 = loc(fused[#loc40, #loc38])
#loc151 = loc(fused[#loc43, #loc42])
#loc152 = loc(fused[#loc44, #loc45])
#loc153 = loc(fused[#loc46, #loc47])
#loc154 = loc(fused[#loc48, #loc49])
#loc155 = loc(fused[#loc51, #loc50])
#loc156 = loc(fused[#loc52, #loc53])
#loc157 = loc(fused[#loc55, #loc49])
#loc158 = loc(fused[#loc62, #loc61])
#loc159 = loc(fused[#loc67, #loc68])
#loc160 = loc(fused[#loc69, #loc70])
#loc161 = loc(fused[#loc71, #loc72])
#loc162 = loc(fused[#loc73, #loc74])
#loc163 = loc(fused[#loc75, #loc76])
#loc164 = loc(fused[#loc77, #loc78])
#loc165 = loc(fused[#loc79, #loc80])
#loc166 = loc(fused[#loc82, #loc80])
#loc167 = loc(fused[#loc84, #loc83])
#loc168 = loc(fused[#loc86, #loc87])
#loc169 = loc(fused[#loc88, #loc89])
#loc170 = loc(fused[#loc90, #loc91])
#loc171 = loc(fused[#loc92, #loc93])
#loc172 = loc(fused[#loc94, #loc95])
#loc173 = loc(fused[#loc97, #loc96])
#loc174 = loc(fused[#loc98, #loc99])
#loc175 = loc(fused[#loc101, #loc95])
#loc176 = loc(fused[#loc104, #loc102])
#loc177 = loc(fused[#loc107, #loc105])
#loc178 = loc(fused[#loc109, #loc108])
#loc179 = loc(fused[#loc110, #loc111])
#loc180 = loc(fused[#loc112, #loc113])
#loc181 = loc(fused[#loc114, #loc115])
#loc182 = loc(fused[#loc117, #loc116])
#loc183 = loc(fused[#loc118, #loc119])
#loc184 = loc(fused[#loc121, #loc115])
#loc185 = loc(fused[#loc128, #loc127])
