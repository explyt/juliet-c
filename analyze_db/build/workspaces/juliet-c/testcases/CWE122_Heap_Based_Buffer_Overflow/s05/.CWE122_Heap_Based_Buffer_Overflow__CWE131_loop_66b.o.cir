!s32i = !cir.int<s, 32>
!u64i = !cir.int<u, 64>
!void = !cir.void
#fn_attr = #cir<extra({nothrow = #cir.nothrow})>
#fn_attr1 = #cir<extra({inline = #cir.inline<no>, nothrow = #cir.nothrow, optnone = #cir.optnone, uwtable = #cir.uwtable<async>})>
#loc7 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE131_loop_66b.c":21:65)
#loc8 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE131_loop_66b.c":21:81)
#loc44 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE131_loop_66b.c":43:69)
#loc45 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE131_loop_66b.c":43:85)
#loc82 = loc(fused[#loc7, #loc8])
#loc94 = loc(fused[#loc44, #loc45])
module @"/workspaces/juliet-c/testcases/CWE122_Heap_Based_Buffer_Overflow/s05/CWE122_Heap_Based_Buffer_Overflow__CWE131_loop_66b.c" attributes {cir.lang = #cir.lang<c>, cir.sob = #cir.signed_overflow_behavior<undefined>, cir.triple = "x86_64-unknown-linux-gnu", cir.type_size_info = #cir.type_size_info<char = 8, int = 32, size_t = 64>, cir.uwtable = #cir.uwtable<async>, dlti.dl_spec = #dlti.dl_spec<f64 = dense<64> : vector<2xi64>, f128 = dense<128> : vector<2xi64>, i32 = dense<32> : vector<2xi64>, f16 = dense<16> : vector<2xi64>, !llvm.ptr<270> = dense<32> : vector<4xi64>, !llvm.ptr<272> = dense<64> : vector<4xi64>, !llvm.ptr<271> = dense<32> : vector<4xi64>, i128 = dense<128> : vector<2xi64>, i64 = dense<64> : vector<2xi64>, f80 = dense<128> : vector<2xi64>, !llvm.ptr = dense<64> : vector<4xi64>, i8 = dense<8> : vector<2xi64>, i1 = dense<8> : vector<2xi64>, i16 = dense<16> : vector<2xi64>, "dlti.mangling_mode" = "e", "dlti.stack_alignment" = 128 : i64, "dlti.endianness" = "little">} {
  cir.func private @printIntLine(!s32i) loc(#loc79)
  cir.func private @free(!cir.ptr<!void>) extra(#fn_attr) loc(#loc80)
  cir.func @CWE122_Heap_Based_Buffer_Overflow__CWE131_loop_66b_badSink(%arg0: !cir.ptr<!cir.ptr<!s32i>> loc(fused[#loc7, #loc8])) extra(#fn_attr1) {
    %0 = cir.alloca !cir.ptr<!cir.ptr<!s32i>>, !cir.ptr<!cir.ptr<!cir.ptr<!s32i>>>, ["dataArray", init] {alignment = 8 : i64} loc(#loc82)
    %1 = cir.alloca !cir.ptr<!s32i>, !cir.ptr<!cir.ptr<!s32i>>, ["data", init] {alignment = 8 : i64} loc(#loc83)
    cir.store %arg0, %0 : !cir.ptr<!cir.ptr<!s32i>>, !cir.ptr<!cir.ptr<!cir.ptr<!s32i>>> loc(#loc11)
    %2 = cir.load %0 : !cir.ptr<!cir.ptr<!cir.ptr<!s32i>>>, !cir.ptr<!cir.ptr<!s32i>> loc(#loc12)
    %3 = cir.const #cir.int<2> : !s32i loc(#loc13)
    %4 = cir.ptr_stride(%2 : !cir.ptr<!cir.ptr<!s32i>>, %3 : !s32i), !cir.ptr<!cir.ptr<!s32i>> loc(#loc10)
    %5 = cir.load %4 : !cir.ptr<!cir.ptr<!s32i>>, !cir.ptr<!s32i> loc(#loc12)
    cir.store %5, %1 : !cir.ptr<!s32i>, !cir.ptr<!cir.ptr<!s32i>> loc(#loc83)
    cir.scope {
      %6 = cir.alloca !cir.array<!s32i x 10>, !cir.ptr<!cir.array<!s32i x 10>>, ["source"] {alignment = 16 : i64} loc(#loc85)
      %7 = cir.alloca !u64i, !cir.ptr<!u64i>, ["i"] {alignment = 8 : i64} loc(#loc86)
      %8 = cir.const #cir.zero : !cir.array<!s32i x 10> loc(#loc85)
      cir.store %8, %6 : !cir.array<!s32i x 10>, !cir.ptr<!cir.array<!s32i x 10>> loc(#loc85)
      cir.scope {
        %16 = cir.const #cir.int<0> : !s32i loc(#loc22)
        %17 = cir.cast(integral, %16 : !s32i), !u64i loc(#loc22)
        cir.store %17, %7 : !u64i, !cir.ptr<!u64i> loc(#loc88)
        cir.for : cond {
          %18 = cir.load %7 : !cir.ptr<!u64i>, !u64i loc(#loc24)
          %19 = cir.const #cir.int<10> : !s32i loc(#loc25)
          %20 = cir.cast(integral, %19 : !s32i), !u64i loc(#loc25)
          %21 = cir.cmp(lt, %18, %20) : !u64i, !cir.bool loc(#loc89)
          cir.condition(%21) loc(#loc26)
        } body {
          cir.scope {
            %18 = cir.load %7 : !cir.ptr<!u64i>, !u64i loc(#loc28)
            %19 = cir.cast(array_to_ptrdecay, %6 : !cir.ptr<!cir.array<!s32i x 10>>), !cir.ptr<!s32i> loc(#loc29)
            %20 = cir.ptr_stride(%19 : !cir.ptr<!s32i>, %18 : !u64i), !cir.ptr<!s32i> loc(#loc29)
            %21 = cir.load %20 : !cir.ptr<!s32i>, !s32i loc(#loc29)
            %22 = cir.load %1 : !cir.ptr<!cir.ptr<!s32i>>, !cir.ptr<!s32i> loc(#loc30)
            %23 = cir.load %7 : !cir.ptr<!u64i>, !u64i loc(#loc31)
            %24 = cir.ptr_stride(%22 : !cir.ptr<!s32i>, %23 : !u64i), !cir.ptr<!s32i> loc(#loc32)
            cir.store %21, %24 : !s32i, !cir.ptr<!s32i> loc(#loc91)
          } loc(#loc90)
          cir.yield loc(#loc21)
        } step {
          %18 = cir.load %7 : !cir.ptr<!u64i>, !u64i loc(#loc34)
          %19 = cir.unary(inc, %18) : !u64i, !u64i loc(#loc35)
          cir.store %19, %7 : !u64i, !cir.ptr<!u64i> loc(#loc92)
          cir.yield loc(#loc87)
        } loc(#loc87)
      } loc(#loc87)
      %9 = cir.load %1 : !cir.ptr<!cir.ptr<!s32i>>, !cir.ptr<!s32i> loc(#loc36)
      %10 = cir.const #cir.int<0> : !s32i loc(#loc37)
      %11 = cir.ptr_stride(%9 : !cir.ptr<!s32i>, %10 : !s32i), !cir.ptr<!s32i> loc(#loc38)
      %12 = cir.load %11 : !cir.ptr<!s32i>, !s32i loc(#loc36)
      cir.call @printIntLine(%12) : (!s32i) -> () loc(#loc39)
      %13 = cir.get_global @free : !cir.ptr<!cir.func<(!cir.ptr<!void>)>> loc(#loc40)
      %14 = cir.load %1 : !cir.ptr<!cir.ptr<!s32i>>, !cir.ptr<!s32i> loc(#loc41)
      %15 = cir.cast(bitcast, %14 : !cir.ptr<!s32i>), !cir.ptr<!void> loc(#loc41)
      cir.call @free(%15) : (!cir.ptr<!void>) -> () extra(#fn_attr) loc(#loc40)
    } loc(#loc84)
    cir.return loc(#loc6)
  } loc(#loc81)
  cir.func @CWE122_Heap_Based_Buffer_Overflow__CWE131_loop_66b_goodG2BSink(%arg0: !cir.ptr<!cir.ptr<!s32i>> loc(fused[#loc44, #loc45])) extra(#fn_attr1) {
    %0 = cir.alloca !cir.ptr<!cir.ptr<!s32i>>, !cir.ptr<!cir.ptr<!cir.ptr<!s32i>>>, ["dataArray", init] {alignment = 8 : i64} loc(#loc94)
    %1 = cir.alloca !cir.ptr<!s32i>, !cir.ptr<!cir.ptr<!s32i>>, ["data", init] {alignment = 8 : i64} loc(#loc95)
    cir.store %arg0, %0 : !cir.ptr<!cir.ptr<!s32i>>, !cir.ptr<!cir.ptr<!cir.ptr<!s32i>>> loc(#loc48)
    %2 = cir.load %0 : !cir.ptr<!cir.ptr<!cir.ptr<!s32i>>>, !cir.ptr<!cir.ptr<!s32i>> loc(#loc49)
    %3 = cir.const #cir.int<2> : !s32i loc(#loc50)
    %4 = cir.ptr_stride(%2 : !cir.ptr<!cir.ptr<!s32i>>, %3 : !s32i), !cir.ptr<!cir.ptr<!s32i>> loc(#loc47)
    %5 = cir.load %4 : !cir.ptr<!cir.ptr<!s32i>>, !cir.ptr<!s32i> loc(#loc49)
    cir.store %5, %1 : !cir.ptr<!s32i>, !cir.ptr<!cir.ptr<!s32i>> loc(#loc95)
    cir.scope {
      %6 = cir.alloca !cir.array<!s32i x 10>, !cir.ptr<!cir.array<!s32i x 10>>, ["source"] {alignment = 16 : i64} loc(#loc97)
      %7 = cir.alloca !u64i, !cir.ptr<!u64i>, ["i"] {alignment = 8 : i64} loc(#loc98)
      %8 = cir.const #cir.zero : !cir.array<!s32i x 10> loc(#loc97)
      cir.store %8, %6 : !cir.array<!s32i x 10>, !cir.ptr<!cir.array<!s32i x 10>> loc(#loc97)
      cir.scope {
        %16 = cir.const #cir.int<0> : !s32i loc(#loc59)
        %17 = cir.cast(integral, %16 : !s32i), !u64i loc(#loc59)
        cir.store %17, %7 : !u64i, !cir.ptr<!u64i> loc(#loc100)
        cir.for : cond {
          %18 = cir.load %7 : !cir.ptr<!u64i>, !u64i loc(#loc61)
          %19 = cir.const #cir.int<10> : !s32i loc(#loc62)
          %20 = cir.cast(integral, %19 : !s32i), !u64i loc(#loc62)
          %21 = cir.cmp(lt, %18, %20) : !u64i, !cir.bool loc(#loc101)
          cir.condition(%21) loc(#loc63)
        } body {
          cir.scope {
            %18 = cir.load %7 : !cir.ptr<!u64i>, !u64i loc(#loc65)
            %19 = cir.cast(array_to_ptrdecay, %6 : !cir.ptr<!cir.array<!s32i x 10>>), !cir.ptr<!s32i> loc(#loc66)
            %20 = cir.ptr_stride(%19 : !cir.ptr<!s32i>, %18 : !u64i), !cir.ptr<!s32i> loc(#loc66)
            %21 = cir.load %20 : !cir.ptr<!s32i>, !s32i loc(#loc66)
            %22 = cir.load %1 : !cir.ptr<!cir.ptr<!s32i>>, !cir.ptr<!s32i> loc(#loc67)
            %23 = cir.load %7 : !cir.ptr<!u64i>, !u64i loc(#loc68)
            %24 = cir.ptr_stride(%22 : !cir.ptr<!s32i>, %23 : !u64i), !cir.ptr<!s32i> loc(#loc69)
            cir.store %21, %24 : !s32i, !cir.ptr<!s32i> loc(#loc103)
          } loc(#loc102)
          cir.yield loc(#loc58)
        } step {
          %18 = cir.load %7 : !cir.ptr<!u64i>, !u64i loc(#loc71)
          %19 = cir.unary(inc, %18) : !u64i, !u64i loc(#loc72)
          cir.store %19, %7 : !u64i, !cir.ptr<!u64i> loc(#loc104)
          cir.yield loc(#loc99)
        } loc(#loc99)
      } loc(#loc99)
      %9 = cir.load %1 : !cir.ptr<!cir.ptr<!s32i>>, !cir.ptr<!s32i> loc(#loc73)
      %10 = cir.const #cir.int<0> : !s32i loc(#loc74)
      %11 = cir.ptr_stride(%9 : !cir.ptr<!s32i>, %10 : !s32i), !cir.ptr<!s32i> loc(#loc75)
      %12 = cir.load %11 : !cir.ptr<!s32i>, !s32i loc(#loc73)
      cir.call @printIntLine(%12) : (!s32i) -> () loc(#loc76)
      %13 = cir.get_global @free : !cir.ptr<!cir.func<(!cir.ptr<!void>)>> loc(#loc77)
      %14 = cir.load %1 : !cir.ptr<!cir.ptr<!s32i>>, !cir.ptr<!s32i> loc(#loc78)
      %15 = cir.cast(bitcast, %14 : !cir.ptr<!s32i>), !cir.ptr<!void> loc(#loc78)
      cir.call @free(%15) : (!cir.ptr<!void>) -> () extra(#fn_attr) loc(#loc77)
    } loc(#loc96)
    cir.return loc(#loc43)
  } loc(#loc93)
} loc(#loc)
#loc = loc("/workspaces/juliet-c/testcases/CWE122_Heap_Based_Buffer_Overflow/s05/CWE122_Heap_Based_Buffer_Overflow__CWE131_loop_66b.c":0:0)
#loc1 = loc("../../../testcasesupport/std_testcase_io.h":18:1)
#loc2 = loc("../../../testcasesupport/std_testcase_io.h":18:33)
#loc3 = loc("/usr/include/stdlib.h":687:1)
#loc4 = loc("/usr/include/stdlib.h":687:32)
#loc5 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE131_loop_66b.c":21:1)
#loc6 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE131_loop_66b.c":36:1)
#loc9 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE131_loop_66b.c":24:5)
#loc10 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE131_loop_66b.c":24:29)
#loc11 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE131_loop_66b.c":22:1)
#loc12 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE131_loop_66b.c":24:18)
#loc13 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE131_loop_66b.c":24:28)
#loc14 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE131_loop_66b.c":25:5)
#loc15 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE131_loop_66b.c":35:5)
#loc16 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE131_loop_66b.c":26:9)
#loc17 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE131_loop_66b.c":26:28)
#loc18 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE131_loop_66b.c":27:9)
#loc19 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE131_loop_66b.c":27:16)
#loc20 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE131_loop_66b.c":29:9)
#loc21 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE131_loop_66b.c":32:9)
#loc22 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE131_loop_66b.c":29:18)
#loc23 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE131_loop_66b.c":29:14)
#loc24 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE131_loop_66b.c":29:21)
#loc25 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE131_loop_66b.c":29:25)
#loc26 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE131_loop_66b.c":29:23)
#loc27 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE131_loop_66b.c":30:9)
#loc28 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE131_loop_66b.c":31:30)
#loc29 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE131_loop_66b.c":31:23)
#loc30 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE131_loop_66b.c":31:13)
#loc31 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE131_loop_66b.c":31:18)
#loc32 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE131_loop_66b.c":31:19)
#loc33 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE131_loop_66b.c":31:31)
#loc34 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE131_loop_66b.c":29:30)
#loc35 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE131_loop_66b.c":29:29)
#loc36 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE131_loop_66b.c":33:22)
#loc37 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE131_loop_66b.c":33:27)
#loc38 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE131_loop_66b.c":33:28)
#loc39 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE131_loop_66b.c":33:9)
#loc40 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE131_loop_66b.c":34:9)
#loc41 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE131_loop_66b.c":34:14)
#loc42 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE131_loop_66b.c":43:1)
#loc43 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE131_loop_66b.c":57:1)
#loc46 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE131_loop_66b.c":45:5)
#loc47 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE131_loop_66b.c":45:29)
#loc48 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE131_loop_66b.c":44:1)
#loc49 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE131_loop_66b.c":45:18)
#loc50 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE131_loop_66b.c":45:28)
#loc51 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE131_loop_66b.c":46:5)
#loc52 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE131_loop_66b.c":56:5)
#loc53 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE131_loop_66b.c":47:9)
#loc54 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE131_loop_66b.c":47:28)
#loc55 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE131_loop_66b.c":48:9)
#loc56 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE131_loop_66b.c":48:16)
#loc57 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE131_loop_66b.c":50:9)
#loc58 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE131_loop_66b.c":53:9)
#loc59 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE131_loop_66b.c":50:18)
#loc60 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE131_loop_66b.c":50:14)
#loc61 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE131_loop_66b.c":50:21)
#loc62 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE131_loop_66b.c":50:25)
#loc63 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE131_loop_66b.c":50:23)
#loc64 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE131_loop_66b.c":51:9)
#loc65 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE131_loop_66b.c":52:30)
#loc66 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE131_loop_66b.c":52:23)
#loc67 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE131_loop_66b.c":52:13)
#loc68 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE131_loop_66b.c":52:18)
#loc69 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE131_loop_66b.c":52:19)
#loc70 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE131_loop_66b.c":52:31)
#loc71 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE131_loop_66b.c":50:30)
#loc72 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE131_loop_66b.c":50:29)
#loc73 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE131_loop_66b.c":54:22)
#loc74 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE131_loop_66b.c":54:27)
#loc75 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE131_loop_66b.c":54:28)
#loc76 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE131_loop_66b.c":54:9)
#loc77 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE131_loop_66b.c":55:9)
#loc78 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE131_loop_66b.c":55:14)
#loc79 = loc(fused[#loc1, #loc2])
#loc80 = loc(fused[#loc3, #loc4])
#loc81 = loc(fused[#loc5, #loc6])
#loc83 = loc(fused[#loc9, #loc10])
#loc84 = loc(fused[#loc14, #loc15])
#loc85 = loc(fused[#loc16, #loc17])
#loc86 = loc(fused[#loc18, #loc19])
#loc87 = loc(fused[#loc20, #loc21])
#loc88 = loc(fused[#loc23, #loc22])
#loc89 = loc(fused[#loc24, #loc25])
#loc90 = loc(fused[#loc27, #loc21])
#loc91 = loc(fused[#loc30, #loc33])
#loc92 = loc(fused[#loc35, #loc34])
#loc93 = loc(fused[#loc42, #loc43])
#loc95 = loc(fused[#loc46, #loc47])
#loc96 = loc(fused[#loc51, #loc52])
#loc97 = loc(fused[#loc53, #loc54])
#loc98 = loc(fused[#loc55, #loc56])
#loc99 = loc(fused[#loc57, #loc58])
#loc100 = loc(fused[#loc60, #loc59])
#loc101 = loc(fused[#loc61, #loc62])
#loc102 = loc(fused[#loc64, #loc58])
#loc103 = loc(fused[#loc67, #loc70])
#loc104 = loc(fused[#loc72, #loc71])
