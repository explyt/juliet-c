!s32i = !cir.int<s, 32>
!s8i = !cir.int<s, 8>
#fn_attr = #cir<extra({nothrow = #cir.nothrow})>
#fn_attr1 = #cir<extra({inline = #cir.inline<no>, nothrow = #cir.nothrow, optnone = #cir.optnone, uwtable = #cir.uwtable<async>})>
module @"/workspaces/juliet-c/testcases/CWE253_Incorrect_Check_of_Function_Return_Value/CWE253_Incorrect_Check_of_Function_Return_Value__char_sscanf_16.c" attributes {cir.lang = #cir.lang<c>, cir.sob = #cir.signed_overflow_behavior<undefined>, cir.triple = "x86_64-unknown-linux-gnu", cir.type_size_info = #cir.type_size_info<char = 8, int = 32, size_t = 64>, cir.uwtable = #cir.uwtable<async>, dlti.dl_spec = #dlti.dl_spec<!llvm.ptr = dense<64> : vector<4xi64>, i1 = dense<8> : vector<2xi64>, f80 = dense<128> : vector<2xi64>, i8 = dense<8> : vector<2xi64>, i128 = dense<128> : vector<2xi64>, i16 = dense<16> : vector<2xi64>, i64 = dense<64> : vector<2xi64>, i32 = dense<32> : vector<2xi64>, !llvm.ptr<272> = dense<64> : vector<4xi64>, f16 = dense<16> : vector<2xi64>, f64 = dense<64> : vector<2xi64>, !llvm.ptr<271> = dense<32> : vector<4xi64>, f128 = dense<128> : vector<2xi64>, !llvm.ptr<270> = dense<32> : vector<4xi64>, "dlti.stack_alignment" = 128 : i64, "dlti.endianness" = "little", "dlti.mangling_mode" = "e">} {
  cir.func private @__isoc99_sscanf(!cir.ptr<!s8i>, !cir.ptr<!s8i>, ...) -> !s32i extra(#fn_attr) loc(#loc55)
  cir.global "private" constant cir_private dsolocal @".str" = #cir.const_array<"string\00" : !cir.array<!s8i x 7>> : !cir.array<!s8i x 7> {alignment = 1 : i64} loc(#loc3)
  cir.global "private" constant cir_private dsolocal @".str.1" = #cir.const_array<"%99s" : !cir.array<!s8i x 4>, trailing_zeros> : !cir.array<!s8i x 6> {alignment = 1 : i64} loc(#loc4)
  cir.func private @printLine(!cir.ptr<!s8i>) loc(#loc56)
  cir.global "private" constant cir_private dsolocal @".str.2" = #cir.const_array<"sscanf failed!\00" : !cir.array<!s8i x 15>> : !cir.array<!s8i x 15> {alignment = 1 : i64} loc(#loc7)
  cir.func no_proto @CWE253_Incorrect_Check_of_Function_Return_Value__char_sscanf_16_bad() extra(#fn_attr1) {
    cir.scope {
      cir.while {
        %0 = cir.const #cir.int<1> : !s32i loc(#loc12)
        %1 = cir.cast(int_to_bool, %0 : !s32i), !cir.bool loc(#loc12)
        cir.condition(%1) loc(#loc12)
      } do {
        cir.scope {
          cir.scope {
            %0 = cir.alloca !cir.array<!s8i x 100>, !cir.ptr<!cir.array<!s8i x 100>>, ["dataBuffer"] {alignment = 16 : i64} loc(#loc61)
            %1 = cir.alloca !cir.ptr<!s8i>, !cir.ptr<!cir.ptr<!s8i>>, ["data", init] {alignment = 8 : i64} loc(#loc62)
            %2 = cir.const #cir.zero : !cir.array<!s8i x 100> loc(#loc61)
            cir.store %2, %0 : !cir.array<!s8i x 100>, !cir.ptr<!cir.array<!s8i x 100>> loc(#loc61)
            %3 = cir.cast(array_to_ptrdecay, %0 : !cir.ptr<!cir.array<!s8i x 100>>), !cir.ptr<!s8i> loc(#loc19)
            cir.store %3, %1 : !cir.ptr<!s8i>, !cir.ptr<!cir.ptr<!s8i>> loc(#loc62)
            cir.scope {
              %4 = cir.get_global @__isoc99_sscanf : !cir.ptr<!cir.func<(!cir.ptr<!s8i>, !cir.ptr<!s8i>, ...) -> !s32i>> loc(#loc22)
              %5 = cir.get_global @".str" : !cir.ptr<!cir.array<!s8i x 7>> loc(#loc3)
              %6 = cir.cast(array_to_ptrdecay, %5 : !cir.ptr<!cir.array<!s8i x 7>>), !cir.ptr<!s8i> loc(#loc3)
              %7 = cir.get_global @".str.1" : !cir.ptr<!cir.array<!s8i x 6>> loc(#loc4)
              %8 = cir.cast(array_to_ptrdecay, %7 : !cir.ptr<!cir.array<!s8i x 6>>), !cir.ptr<!s8i> loc(#loc4)
              %9 = cir.load %1 : !cir.ptr<!cir.ptr<!s8i>>, !cir.ptr<!s8i> loc(#loc23)
              %10 = cir.call @__isoc99_sscanf(%6, %8, %9) : (!cir.ptr<!s8i>, !cir.ptr<!s8i>, !cir.ptr<!s8i>) -> !s32i extra(#fn_attr) loc(#loc22)
              %11 = cir.const #cir.int<0> : !s32i loc(#loc24)
              %12 = cir.cmp(eq, %10, %11) : !s32i, !cir.bool loc(#loc64)
              cir.if %12 {
                %13 = cir.get_global @".str.2" : !cir.ptr<!cir.array<!s8i x 15>> loc(#loc7)
                %14 = cir.cast(array_to_ptrdecay, %13 : !cir.ptr<!cir.array<!s8i x 15>>), !cir.ptr<!s8i> loc(#loc7)
                cir.call @printLine(%14) : (!cir.ptr<!s8i>) -> () loc(#loc26)
              } loc(#loc65)
            } loc(#loc63)
          } loc(#loc60)
          cir.break loc(#loc27)
        } loc(#loc59)
        cir.yield loc(#loc11)
      } loc(#loc58)
    } loc(#loc58)
    cir.return loc(#loc9)
  } loc(#loc57)
  cir.func no_proto @CWE253_Incorrect_Check_of_Function_Return_Value__char_sscanf_16_good() extra(#fn_attr1) {
    %0 = cir.get_global @good1 : !cir.ptr<!cir.func<()>> loc(#loc67)
    cir.call %0() : (!cir.ptr<!cir.func<()>>) -> () loc(#loc30)
    cir.return loc(#loc29)
  } loc(#loc66)
  cir.func no_proto internal private @good1() extra(#fn_attr1) {
    cir.scope {
      cir.while {
        %0 = cir.const #cir.int<1> : !s32i loc(#loc36)
        %1 = cir.cast(int_to_bool, %0 : !s32i), !cir.bool loc(#loc36)
        cir.condition(%1) loc(#loc36)
      } do {
        cir.scope {
          cir.scope {
            %0 = cir.alloca !cir.array<!s8i x 100>, !cir.ptr<!cir.array<!s8i x 100>>, ["dataBuffer"] {alignment = 16 : i64} loc(#loc72)
            %1 = cir.alloca !cir.ptr<!s8i>, !cir.ptr<!cir.ptr<!s8i>>, ["data", init] {alignment = 8 : i64} loc(#loc73)
            %2 = cir.const #cir.zero : !cir.array<!s8i x 100> loc(#loc72)
            cir.store %2, %0 : !cir.array<!s8i x 100>, !cir.ptr<!cir.array<!s8i x 100>> loc(#loc72)
            %3 = cir.cast(array_to_ptrdecay, %0 : !cir.ptr<!cir.array<!s8i x 100>>), !cir.ptr<!s8i> loc(#loc43)
            cir.store %3, %1 : !cir.ptr<!s8i>, !cir.ptr<!cir.ptr<!s8i>> loc(#loc73)
            cir.scope {
              %4 = cir.get_global @__isoc99_sscanf : !cir.ptr<!cir.func<(!cir.ptr<!s8i>, !cir.ptr<!s8i>, ...) -> !s32i>> loc(#loc46)
              %5 = cir.get_global @".str" : !cir.ptr<!cir.array<!s8i x 7>> loc(#loc47)
              %6 = cir.cast(array_to_ptrdecay, %5 : !cir.ptr<!cir.array<!s8i x 7>>), !cir.ptr<!s8i> loc(#loc47)
              %7 = cir.get_global @".str.1" : !cir.ptr<!cir.array<!s8i x 6>> loc(#loc48)
              %8 = cir.cast(array_to_ptrdecay, %7 : !cir.ptr<!cir.array<!s8i x 6>>), !cir.ptr<!s8i> loc(#loc48)
              %9 = cir.load %1 : !cir.ptr<!cir.ptr<!s8i>>, !cir.ptr<!s8i> loc(#loc49)
              %10 = cir.call @__isoc99_sscanf(%6, %8, %9) : (!cir.ptr<!s8i>, !cir.ptr<!s8i>, !cir.ptr<!s8i>) -> !s32i extra(#fn_attr) loc(#loc46)
              %11 = cir.const #cir.int<1> : !s32i loc(#loc50)
              %12 = cir.unary(minus, %11) nsw : !s32i, !s32i loc(#loc50)
              %13 = cir.cmp(eq, %10, %12) : !s32i, !cir.bool loc(#loc75)
              cir.if %13 {
                %14 = cir.get_global @".str.2" : !cir.ptr<!cir.array<!s8i x 15>> loc(#loc52)
                %15 = cir.cast(array_to_ptrdecay, %14 : !cir.ptr<!cir.array<!s8i x 15>>), !cir.ptr<!s8i> loc(#loc52)
                cir.call @printLine(%15) : (!cir.ptr<!s8i>) -> () loc(#loc53)
              } loc(#loc76)
            } loc(#loc74)
          } loc(#loc71)
          cir.break loc(#loc54)
        } loc(#loc70)
        cir.yield loc(#loc35)
      } loc(#loc69)
    } loc(#loc69)
    cir.return loc(#loc33)
  } loc(#loc68)
} loc(#loc)
#loc = loc("/workspaces/juliet-c/testcases/CWE253_Incorrect_Check_of_Function_Return_Value/CWE253_Incorrect_Check_of_Function_Return_Value__char_sscanf_16.c":0:0)
#loc1 = loc("/usr/include/stdio.h":468:1)
#loc2 = loc("/usr/include/stdio.h":468:12)
#loc3 = loc("CWE253_Incorrect_Check_of_Function_Return_Value__char_sscanf_16.c":37:24)
#loc4 = loc("CWE253_Incorrect_Check_of_Function_Return_Value__char_sscanf_16.c":37:36)
#loc5 = loc("../../testcasesupport/std_testcase_io.h":14:1)
#loc6 = loc("../../testcasesupport/std_testcase_io.h":14:33)
#loc7 = loc("CWE253_Incorrect_Check_of_Function_Return_Value__char_sscanf_16.c":39:27)
#loc8 = loc("CWE253_Incorrect_Check_of_Function_Return_Value__char_sscanf_16.c":26:1)
#loc9 = loc("CWE253_Incorrect_Check_of_Function_Return_Value__char_sscanf_16.c":44:1)
#loc10 = loc("CWE253_Incorrect_Check_of_Function_Return_Value__char_sscanf_16.c":28:5)
#loc11 = loc("CWE253_Incorrect_Check_of_Function_Return_Value__char_sscanf_16.c":43:5)
#loc12 = loc("CWE253_Incorrect_Check_of_Function_Return_Value__char_sscanf_16.c":28:11)
#loc13 = loc("CWE253_Incorrect_Check_of_Function_Return_Value__char_sscanf_16.c":29:5)
#loc14 = loc("CWE253_Incorrect_Check_of_Function_Return_Value__char_sscanf_16.c":30:9)
#loc15 = loc("CWE253_Incorrect_Check_of_Function_Return_Value__char_sscanf_16.c":41:9)
#loc16 = loc("CWE253_Incorrect_Check_of_Function_Return_Value__char_sscanf_16.c":33:13)
#loc17 = loc("CWE253_Incorrect_Check_of_Function_Return_Value__char_sscanf_16.c":33:36)
#loc18 = loc("CWE253_Incorrect_Check_of_Function_Return_Value__char_sscanf_16.c":34:13)
#loc19 = loc("CWE253_Incorrect_Check_of_Function_Return_Value__char_sscanf_16.c":34:27)
#loc20 = loc("CWE253_Incorrect_Check_of_Function_Return_Value__char_sscanf_16.c":37:13)
#loc21 = loc("CWE253_Incorrect_Check_of_Function_Return_Value__char_sscanf_16.c":40:13)
#loc22 = loc("CWE253_Incorrect_Check_of_Function_Return_Value__char_sscanf_16.c":37:17)
#loc23 = loc("CWE253_Incorrect_Check_of_Function_Return_Value__char_sscanf_16.c":37:46)
#loc24 = loc("CWE253_Incorrect_Check_of_Function_Return_Value__char_sscanf_16.c":37:55)
#loc25 = loc("CWE253_Incorrect_Check_of_Function_Return_Value__char_sscanf_16.c":38:13)
#loc26 = loc("CWE253_Incorrect_Check_of_Function_Return_Value__char_sscanf_16.c":39:17)
#loc27 = loc("CWE253_Incorrect_Check_of_Function_Return_Value__char_sscanf_16.c":42:9)
#loc28 = loc("CWE253_Incorrect_Check_of_Function_Return_Value__char_sscanf_16.c":70:1)
#loc29 = loc("CWE253_Incorrect_Check_of_Function_Return_Value__char_sscanf_16.c":73:1)
#loc30 = loc("CWE253_Incorrect_Check_of_Function_Return_Value__char_sscanf_16.c":72:5)
#loc31 = loc("CWE253_Incorrect_Check_of_Function_Return_Value__char_sscanf_16.c":72:11)
#loc32 = loc("CWE253_Incorrect_Check_of_Function_Return_Value__char_sscanf_16.c":51:1)
#loc33 = loc("CWE253_Incorrect_Check_of_Function_Return_Value__char_sscanf_16.c":68:1)
#loc34 = loc("CWE253_Incorrect_Check_of_Function_Return_Value__char_sscanf_16.c":53:5)
#loc35 = loc("CWE253_Incorrect_Check_of_Function_Return_Value__char_sscanf_16.c":67:5)
#loc36 = loc("CWE253_Incorrect_Check_of_Function_Return_Value__char_sscanf_16.c":53:11)
#loc37 = loc("CWE253_Incorrect_Check_of_Function_Return_Value__char_sscanf_16.c":54:5)
#loc38 = loc("CWE253_Incorrect_Check_of_Function_Return_Value__char_sscanf_16.c":55:9)
#loc39 = loc("CWE253_Incorrect_Check_of_Function_Return_Value__char_sscanf_16.c":65:9)
#loc40 = loc("CWE253_Incorrect_Check_of_Function_Return_Value__char_sscanf_16.c":58:13)
#loc41 = loc("CWE253_Incorrect_Check_of_Function_Return_Value__char_sscanf_16.c":58:36)
#loc42 = loc("CWE253_Incorrect_Check_of_Function_Return_Value__char_sscanf_16.c":59:13)
#loc43 = loc("CWE253_Incorrect_Check_of_Function_Return_Value__char_sscanf_16.c":59:27)
#loc44 = loc("CWE253_Incorrect_Check_of_Function_Return_Value__char_sscanf_16.c":61:13)
#loc45 = loc("CWE253_Incorrect_Check_of_Function_Return_Value__char_sscanf_16.c":64:13)
#loc46 = loc("CWE253_Incorrect_Check_of_Function_Return_Value__char_sscanf_16.c":61:17)
#loc47 = loc("CWE253_Incorrect_Check_of_Function_Return_Value__char_sscanf_16.c":61:24)
#loc48 = loc("CWE253_Incorrect_Check_of_Function_Return_Value__char_sscanf_16.c":61:36)
#loc49 = loc("CWE253_Incorrect_Check_of_Function_Return_Value__char_sscanf_16.c":61:46)
#loc50 = loc("CWE253_Incorrect_Check_of_Function_Return_Value__char_sscanf_16.c":61:55)
#loc51 = loc("CWE253_Incorrect_Check_of_Function_Return_Value__char_sscanf_16.c":62:13)
#loc52 = loc("CWE253_Incorrect_Check_of_Function_Return_Value__char_sscanf_16.c":63:27)
#loc53 = loc("CWE253_Incorrect_Check_of_Function_Return_Value__char_sscanf_16.c":63:17)
#loc54 = loc("CWE253_Incorrect_Check_of_Function_Return_Value__char_sscanf_16.c":66:9)
#loc55 = loc(fused[#loc1, #loc2])
#loc56 = loc(fused[#loc5, #loc6])
#loc57 = loc(fused[#loc8, #loc9])
#loc58 = loc(fused[#loc10, #loc11])
#loc59 = loc(fused[#loc13, #loc11])
#loc60 = loc(fused[#loc14, #loc15])
#loc61 = loc(fused[#loc16, #loc17])
#loc62 = loc(fused[#loc18, #loc19])
#loc63 = loc(fused[#loc20, #loc21])
#loc64 = loc(fused[#loc22, #loc24])
#loc65 = loc(fused[#loc25, #loc21])
#loc66 = loc(fused[#loc28, #loc29])
#loc67 = loc(fused[#loc30, #loc31])
#loc68 = loc(fused[#loc32, #loc33])
#loc69 = loc(fused[#loc34, #loc35])
#loc70 = loc(fused[#loc37, #loc35])
#loc71 = loc(fused[#loc38, #loc39])
#loc72 = loc(fused[#loc40, #loc41])
#loc73 = loc(fused[#loc42, #loc43])
#loc74 = loc(fused[#loc44, #loc45])
#loc75 = loc(fused[#loc46, #loc50])
#loc76 = loc(fused[#loc51, #loc45])
