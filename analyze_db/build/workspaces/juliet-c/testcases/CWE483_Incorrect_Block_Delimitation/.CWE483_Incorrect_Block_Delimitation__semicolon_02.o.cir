!s32i = !cir.int<s, 32>
!s8i = !cir.int<s, 8>
#fn_attr = #cir<extra({nothrow = #cir.nothrow})>
#fn_attr1 = #cir<extra({inline = #cir.inline<no>, nothrow = #cir.nothrow, optnone = #cir.optnone, uwtable = #cir.uwtable<async>})>
module @"/workspaces/juliet-c/testcases/CWE483_Incorrect_Block_Delimitation/CWE483_Incorrect_Block_Delimitation__semicolon_02.c" attributes {cir.lang = #cir.lang<c>, cir.sob = #cir.signed_overflow_behavior<undefined>, cir.triple = "x86_64-unknown-linux-gnu", cir.type_size_info = #cir.type_size_info<char = 8, int = 32, size_t = 64>, cir.uwtable = #cir.uwtable<async>, dlti.dl_spec = #dlti.dl_spec<i32 = dense<32> : vector<2xi64>, i16 = dense<16> : vector<2xi64>, i8 = dense<8> : vector<2xi64>, i1 = dense<8> : vector<2xi64>, !llvm.ptr<270> = dense<32> : vector<4xi64>, !llvm.ptr<271> = dense<32> : vector<4xi64>, f128 = dense<128> : vector<2xi64>, f64 = dense<64> : vector<2xi64>, f16 = dense<16> : vector<2xi64>, i128 = dense<128> : vector<2xi64>, i64 = dense<64> : vector<2xi64>, !llvm.ptr<272> = dense<64> : vector<4xi64>, !llvm.ptr = dense<64> : vector<4xi64>, f80 = dense<128> : vector<2xi64>, "dlti.mangling_mode" = "e", "dlti.endianness" = "little", "dlti.stack_alignment" = 128 : i64>} {
  cir.func private @rand() -> !s32i extra(#fn_attr) loc(#loc103)
  cir.func private @printLine(!cir.ptr<!s8i>) loc(#loc104)
  cir.global "private" constant cir_private dsolocal @".str" = #cir.const_array<"x == 0\00" : !cir.array<!s8i x 7>> : !cir.array<!s8i x 7> {alignment = 1 : i64} loc(#loc5)
  cir.global "private" constant cir_private dsolocal @".str.1" = #cir.const_array<"x was 0\0A\00" : !cir.array<!s8i x 9>> : !cir.array<!s8i x 9> {alignment = 1 : i64} loc(#loc6)
  cir.func no_proto @CWE483_Incorrect_Block_Delimitation__semicolon_02_bad() extra(#fn_attr1) {
    cir.scope {
      %0 = cir.const #cir.int<1> : !s32i loc(#loc11)
      %1 = cir.cast(int_to_bool, %0 : !s32i), !cir.bool loc(#loc11)
      cir.if %1 {
        cir.scope {
          %2 = cir.alloca !s32i, !cir.ptr<!s32i>, ["x", init] {alignment = 4 : i64} loc(#loc109)
          %3 = cir.alloca !s32i, !cir.ptr<!s32i>, ["y", init] {alignment = 4 : i64} loc(#loc110)
          %4 = cir.call @rand() : () -> !s32i extra(#fn_attr) loc(#loc19)
          %5 = cir.const #cir.int<3> : !s32i loc(#loc20)
          %6 = cir.binop(rem, %4, %5) : !s32i loc(#loc111)
          cir.store %6, %2 : !s32i, !cir.ptr<!s32i> loc(#loc109)
          %7 = cir.const #cir.int<0> : !s32i loc(#loc18)
          cir.store %7, %3 : !s32i, !cir.ptr<!s32i> loc(#loc110)
          cir.scope {
            %8 = cir.load %2 : !cir.ptr<!s32i>, !s32i loc(#loc23)
            %9 = cir.const #cir.int<0> : !s32i loc(#loc24)
            %10 = cir.cmp(eq, %8, %9) : !s32i, !cir.bool loc(#loc113)
            cir.if %10 {
            } loc(#loc22)
          } loc(#loc112)
          cir.scope {
            %8 = cir.get_global @".str" : !cir.ptr<!cir.array<!s8i x 7>> loc(#loc5)
            %9 = cir.cast(array_to_ptrdecay, %8 : !cir.ptr<!cir.array<!s8i x 7>>), !cir.ptr<!s8i> loc(#loc5)
            cir.call @printLine(%9) : (!cir.ptr<!s8i>) -> () loc(#loc27)
            %10 = cir.const #cir.int<1> : !s32i loc(#loc28)
            cir.store %10, %3 : !s32i, !cir.ptr<!s32i> loc(#loc115)
          } loc(#loc114)
          cir.scope {
            %8 = cir.load %3 : !cir.ptr<!s32i>, !s32i loc(#loc32)
            %9 = cir.cast(int_to_bool, %8 : !s32i), !cir.bool loc(#loc32)
            cir.if %9 {
              %10 = cir.get_global @".str.1" : !cir.ptr<!cir.array<!s8i x 9>> loc(#loc6)
              %11 = cir.cast(array_to_ptrdecay, %10 : !cir.ptr<!cir.array<!s8i x 9>>), !cir.ptr<!s8i> loc(#loc6)
              cir.call @printLine(%11) : (!cir.ptr<!s8i>) -> () loc(#loc34)
            } loc(#loc117)
          } loc(#loc116)
        } loc(#loc108)
      } loc(#loc107)
    } loc(#loc106)
    cir.return loc(#loc8)
  } loc(#loc105)
  cir.func no_proto @CWE483_Incorrect_Block_Delimitation__semicolon_02_good() extra(#fn_attr1) {
    %0 = cir.get_global @good1 : !cir.ptr<!cir.func<()>> loc(#loc119)
    cir.call %0() : (!cir.ptr<!cir.func<()>>) -> () loc(#loc37)
    %1 = cir.get_global @good2 : !cir.ptr<!cir.func<()>> loc(#loc120)
    cir.call %1() : (!cir.ptr<!cir.func<()>>) -> () loc(#loc39)
    cir.return loc(#loc36)
  } loc(#loc118)
  cir.global "private" constant cir_private dsolocal @".str.2" = #cir.const_array<"Benign, fixed string\00" : !cir.array<!s8i x 21>> : !cir.array<!s8i x 21> {alignment = 1 : i64} loc(#loc41)
  cir.func no_proto internal private @good1() extra(#fn_attr1) {
    cir.scope {
      %0 = cir.const #cir.int<0> : !s32i loc(#loc46)
      %1 = cir.cast(int_to_bool, %0 : !s32i), !cir.bool loc(#loc46)
      cir.if %1 {
        %2 = cir.get_global @".str.2" : !cir.ptr<!cir.array<!s8i x 21>> loc(#loc41)
        %3 = cir.cast(array_to_ptrdecay, %2 : !cir.ptr<!cir.array<!s8i x 21>>), !cir.ptr<!s8i> loc(#loc41)
        cir.call @printLine(%3) : (!cir.ptr<!s8i>) -> () loc(#loc50)
      } else {
        cir.scope {
          %2 = cir.alloca !s32i, !cir.ptr<!s32i>, ["x", init] {alignment = 4 : i64} loc(#loc125)
          %3 = cir.alloca !s32i, !cir.ptr<!s32i>, ["y", init] {alignment = 4 : i64} loc(#loc126)
          %4 = cir.call @rand() : () -> !s32i extra(#fn_attr) loc(#loc57)
          %5 = cir.const #cir.int<3> : !s32i loc(#loc58)
          %6 = cir.binop(rem, %4, %5) : !s32i loc(#loc127)
          cir.store %6, %2 : !s32i, !cir.ptr<!s32i> loc(#loc125)
          %7 = cir.const #cir.int<0> : !s32i loc(#loc56)
          cir.store %7, %3 : !s32i, !cir.ptr<!s32i> loc(#loc126)
          cir.scope {
            %8 = cir.load %2 : !cir.ptr<!s32i>, !s32i loc(#loc61)
            %9 = cir.const #cir.int<0> : !s32i loc(#loc62)
            %10 = cir.cmp(eq, %8, %9) : !s32i, !cir.bool loc(#loc129)
            cir.if %10 {
              %11 = cir.get_global @".str" : !cir.ptr<!cir.array<!s8i x 7>> loc(#loc64)
              %12 = cir.cast(array_to_ptrdecay, %11 : !cir.ptr<!cir.array<!s8i x 7>>), !cir.ptr<!s8i> loc(#loc64)
              cir.call @printLine(%12) : (!cir.ptr<!s8i>) -> () loc(#loc65)
              %13 = cir.const #cir.int<1> : !s32i loc(#loc66)
              cir.store %13, %3 : !s32i, !cir.ptr<!s32i> loc(#loc131)
            } loc(#loc130)
          } loc(#loc128)
          cir.scope {
            %8 = cir.load %3 : !cir.ptr<!s32i>, !s32i loc(#loc70)
            %9 = cir.cast(int_to_bool, %8 : !s32i), !cir.bool loc(#loc70)
            cir.if %9 {
              %10 = cir.get_global @".str.1" : !cir.ptr<!cir.array<!s8i x 9>> loc(#loc72)
              %11 = cir.cast(array_to_ptrdecay, %10 : !cir.ptr<!cir.array<!s8i x 9>>), !cir.ptr<!s8i> loc(#loc72)
              cir.call @printLine(%11) : (!cir.ptr<!s8i>) -> () loc(#loc73)
            } loc(#loc133)
          } loc(#loc132)
        } loc(#loc124)
      } loc(#loc123)
    } loc(#loc122)
    cir.return loc(#loc43)
  } loc(#loc121)
  cir.func no_proto internal private @good2() extra(#fn_attr1) {
    cir.scope {
      %0 = cir.const #cir.int<1> : !s32i loc(#loc78)
      %1 = cir.cast(int_to_bool, %0 : !s32i), !cir.bool loc(#loc78)
      cir.if %1 {
        cir.scope {
          %2 = cir.alloca !s32i, !cir.ptr<!s32i>, ["x", init] {alignment = 4 : i64} loc(#loc138)
          %3 = cir.alloca !s32i, !cir.ptr<!s32i>, ["y", init] {alignment = 4 : i64} loc(#loc139)
          %4 = cir.call @rand() : () -> !s32i extra(#fn_attr) loc(#loc86)
          %5 = cir.const #cir.int<3> : !s32i loc(#loc87)
          %6 = cir.binop(rem, %4, %5) : !s32i loc(#loc140)
          cir.store %6, %2 : !s32i, !cir.ptr<!s32i> loc(#loc138)
          %7 = cir.const #cir.int<0> : !s32i loc(#loc85)
          cir.store %7, %3 : !s32i, !cir.ptr<!s32i> loc(#loc139)
          cir.scope {
            %8 = cir.load %2 : !cir.ptr<!s32i>, !s32i loc(#loc90)
            %9 = cir.const #cir.int<0> : !s32i loc(#loc91)
            %10 = cir.cmp(eq, %8, %9) : !s32i, !cir.bool loc(#loc142)
            cir.if %10 {
              %11 = cir.get_global @".str" : !cir.ptr<!cir.array<!s8i x 7>> loc(#loc93)
              %12 = cir.cast(array_to_ptrdecay, %11 : !cir.ptr<!cir.array<!s8i x 7>>), !cir.ptr<!s8i> loc(#loc93)
              cir.call @printLine(%12) : (!cir.ptr<!s8i>) -> () loc(#loc94)
              %13 = cir.const #cir.int<1> : !s32i loc(#loc95)
              cir.store %13, %3 : !s32i, !cir.ptr<!s32i> loc(#loc144)
            } loc(#loc143)
          } loc(#loc141)
          cir.scope {
            %8 = cir.load %3 : !cir.ptr<!s32i>, !s32i loc(#loc99)
            %9 = cir.cast(int_to_bool, %8 : !s32i), !cir.bool loc(#loc99)
            cir.if %9 {
              %10 = cir.get_global @".str.1" : !cir.ptr<!cir.array<!s8i x 9>> loc(#loc101)
              %11 = cir.cast(array_to_ptrdecay, %10 : !cir.ptr<!cir.array<!s8i x 9>>), !cir.ptr<!s8i> loc(#loc101)
              cir.call @printLine(%11) : (!cir.ptr<!s8i>) -> () loc(#loc102)
            } loc(#loc146)
          } loc(#loc145)
        } loc(#loc137)
      } loc(#loc136)
    } loc(#loc135)
    cir.return loc(#loc75)
  } loc(#loc134)
} loc(#loc)
#loc = loc("/workspaces/juliet-c/testcases/CWE483_Incorrect_Block_Delimitation/CWE483_Incorrect_Block_Delimitation__semicolon_02.c":0:0)
#loc1 = loc("/usr/include/stdlib.h":573:1)
#loc2 = loc("/usr/include/stdlib.h":573:24)
#loc3 = loc("../../testcasesupport/std_testcase_io.h":14:1)
#loc4 = loc("../../testcasesupport/std_testcase_io.h":14:33)
#loc5 = loc("CWE483_Incorrect_Block_Delimitation__semicolon_02.c":30:27)
#loc6 = loc("CWE483_Incorrect_Block_Delimitation__semicolon_02.c":35:27)
#loc7 = loc("CWE483_Incorrect_Block_Delimitation__semicolon_02.c":20:1)
#loc8 = loc("CWE483_Incorrect_Block_Delimitation__semicolon_02.c":39:1)
#loc9 = loc("CWE483_Incorrect_Block_Delimitation__semicolon_02.c":22:5)
#loc10 = loc("CWE483_Incorrect_Block_Delimitation__semicolon_02.c":38:5)
#loc11 = loc("CWE483_Incorrect_Block_Delimitation__semicolon_02.c":22:8)
#loc12 = loc("CWE483_Incorrect_Block_Delimitation__semicolon_02.c":23:5)
#loc13 = loc("CWE483_Incorrect_Block_Delimitation__semicolon_02.c":24:9)
#loc14 = loc("CWE483_Incorrect_Block_Delimitation__semicolon_02.c":37:9)
#loc15 = loc("CWE483_Incorrect_Block_Delimitation__semicolon_02.c":25:13)
#loc16 = loc("CWE483_Incorrect_Block_Delimitation__semicolon_02.c":25:32)
#loc17 = loc("CWE483_Incorrect_Block_Delimitation__semicolon_02.c":26:13)
#loc18 = loc("CWE483_Incorrect_Block_Delimitation__semicolon_02.c":26:21)
#loc19 = loc("CWE483_Incorrect_Block_Delimitation__semicolon_02.c":25:22)
#loc20 = loc("CWE483_Incorrect_Block_Delimitation__semicolon_02.c":25:31)
#loc21 = loc("CWE483_Incorrect_Block_Delimitation__semicolon_02.c":28:13)
#loc22 = loc("CWE483_Incorrect_Block_Delimitation__semicolon_02.c":28:24)
#loc23 = loc("CWE483_Incorrect_Block_Delimitation__semicolon_02.c":28:17)
#loc24 = loc("CWE483_Incorrect_Block_Delimitation__semicolon_02.c":28:22)
#loc25 = loc("CWE483_Incorrect_Block_Delimitation__semicolon_02.c":29:13)
#loc26 = loc("CWE483_Incorrect_Block_Delimitation__semicolon_02.c":32:13)
#loc27 = loc("CWE483_Incorrect_Block_Delimitation__semicolon_02.c":30:17)
#loc28 = loc("CWE483_Incorrect_Block_Delimitation__semicolon_02.c":31:21)
#loc29 = loc("CWE483_Incorrect_Block_Delimitation__semicolon_02.c":31:17)
#loc30 = loc("CWE483_Incorrect_Block_Delimitation__semicolon_02.c":33:13)
#loc31 = loc("CWE483_Incorrect_Block_Delimitation__semicolon_02.c":36:13)
#loc32 = loc("CWE483_Incorrect_Block_Delimitation__semicolon_02.c":33:17)
#loc33 = loc("CWE483_Incorrect_Block_Delimitation__semicolon_02.c":34:13)
#loc34 = loc("CWE483_Incorrect_Block_Delimitation__semicolon_02.c":35:17)
#loc35 = loc("CWE483_Incorrect_Block_Delimitation__semicolon_02.c":94:1)
#loc36 = loc("CWE483_Incorrect_Block_Delimitation__semicolon_02.c":98:1)
#loc37 = loc("CWE483_Incorrect_Block_Delimitation__semicolon_02.c":96:5)
#loc38 = loc("CWE483_Incorrect_Block_Delimitation__semicolon_02.c":96:11)
#loc39 = loc("CWE483_Incorrect_Block_Delimitation__semicolon_02.c":97:5)
#loc40 = loc("CWE483_Incorrect_Block_Delimitation__semicolon_02.c":97:11)
#loc41 = loc("CWE483_Incorrect_Block_Delimitation__semicolon_02.c":51:19)
#loc42 = loc("CWE483_Incorrect_Block_Delimitation__semicolon_02.c":46:1)
#loc43 = loc("CWE483_Incorrect_Block_Delimitation__semicolon_02.c":70:1)
#loc44 = loc("CWE483_Incorrect_Block_Delimitation__semicolon_02.c":48:5)
#loc45 = loc("CWE483_Incorrect_Block_Delimitation__semicolon_02.c":69:5)
#loc46 = loc("CWE483_Incorrect_Block_Delimitation__semicolon_02.c":48:8)
#loc47 = loc("CWE483_Incorrect_Block_Delimitation__semicolon_02.c":49:5)
#loc48 = loc("CWE483_Incorrect_Block_Delimitation__semicolon_02.c":52:5)
#loc49 = loc("CWE483_Incorrect_Block_Delimitation__semicolon_02.c":54:5)
#loc50 = loc("CWE483_Incorrect_Block_Delimitation__semicolon_02.c":51:9)
#loc51 = loc("CWE483_Incorrect_Block_Delimitation__semicolon_02.c":55:9)
#loc52 = loc("CWE483_Incorrect_Block_Delimitation__semicolon_02.c":68:9)
#loc53 = loc("CWE483_Incorrect_Block_Delimitation__semicolon_02.c":56:13)
#loc54 = loc("CWE483_Incorrect_Block_Delimitation__semicolon_02.c":56:32)
#loc55 = loc("CWE483_Incorrect_Block_Delimitation__semicolon_02.c":57:13)
#loc56 = loc("CWE483_Incorrect_Block_Delimitation__semicolon_02.c":57:21)
#loc57 = loc("CWE483_Incorrect_Block_Delimitation__semicolon_02.c":56:22)
#loc58 = loc("CWE483_Incorrect_Block_Delimitation__semicolon_02.c":56:31)
#loc59 = loc("CWE483_Incorrect_Block_Delimitation__semicolon_02.c":59:13)
#loc60 = loc("CWE483_Incorrect_Block_Delimitation__semicolon_02.c":63:13)
#loc61 = loc("CWE483_Incorrect_Block_Delimitation__semicolon_02.c":59:17)
#loc62 = loc("CWE483_Incorrect_Block_Delimitation__semicolon_02.c":59:22)
#loc63 = loc("CWE483_Incorrect_Block_Delimitation__semicolon_02.c":60:13)
#loc64 = loc("CWE483_Incorrect_Block_Delimitation__semicolon_02.c":61:27)
#loc65 = loc("CWE483_Incorrect_Block_Delimitation__semicolon_02.c":61:17)
#loc66 = loc("CWE483_Incorrect_Block_Delimitation__semicolon_02.c":62:21)
#loc67 = loc("CWE483_Incorrect_Block_Delimitation__semicolon_02.c":62:17)
#loc68 = loc("CWE483_Incorrect_Block_Delimitation__semicolon_02.c":64:13)
#loc69 = loc("CWE483_Incorrect_Block_Delimitation__semicolon_02.c":67:13)
#loc70 = loc("CWE483_Incorrect_Block_Delimitation__semicolon_02.c":64:17)
#loc71 = loc("CWE483_Incorrect_Block_Delimitation__semicolon_02.c":65:13)
#loc72 = loc("CWE483_Incorrect_Block_Delimitation__semicolon_02.c":66:27)
#loc73 = loc("CWE483_Incorrect_Block_Delimitation__semicolon_02.c":66:17)
#loc74 = loc("CWE483_Incorrect_Block_Delimitation__semicolon_02.c":73:1)
#loc75 = loc("CWE483_Incorrect_Block_Delimitation__semicolon_02.c":92:1)
#loc76 = loc("CWE483_Incorrect_Block_Delimitation__semicolon_02.c":75:5)
#loc77 = loc("CWE483_Incorrect_Block_Delimitation__semicolon_02.c":91:5)
#loc78 = loc("CWE483_Incorrect_Block_Delimitation__semicolon_02.c":75:8)
#loc79 = loc("CWE483_Incorrect_Block_Delimitation__semicolon_02.c":76:5)
#loc80 = loc("CWE483_Incorrect_Block_Delimitation__semicolon_02.c":77:9)
#loc81 = loc("CWE483_Incorrect_Block_Delimitation__semicolon_02.c":90:9)
#loc82 = loc("CWE483_Incorrect_Block_Delimitation__semicolon_02.c":78:13)
#loc83 = loc("CWE483_Incorrect_Block_Delimitation__semicolon_02.c":78:32)
#loc84 = loc("CWE483_Incorrect_Block_Delimitation__semicolon_02.c":79:13)
#loc85 = loc("CWE483_Incorrect_Block_Delimitation__semicolon_02.c":79:21)
#loc86 = loc("CWE483_Incorrect_Block_Delimitation__semicolon_02.c":78:22)
#loc87 = loc("CWE483_Incorrect_Block_Delimitation__semicolon_02.c":78:31)
#loc88 = loc("CWE483_Incorrect_Block_Delimitation__semicolon_02.c":81:13)
#loc89 = loc("CWE483_Incorrect_Block_Delimitation__semicolon_02.c":85:13)
#loc90 = loc("CWE483_Incorrect_Block_Delimitation__semicolon_02.c":81:17)
#loc91 = loc("CWE483_Incorrect_Block_Delimitation__semicolon_02.c":81:22)
#loc92 = loc("CWE483_Incorrect_Block_Delimitation__semicolon_02.c":82:13)
#loc93 = loc("CWE483_Incorrect_Block_Delimitation__semicolon_02.c":83:27)
#loc94 = loc("CWE483_Incorrect_Block_Delimitation__semicolon_02.c":83:17)
#loc95 = loc("CWE483_Incorrect_Block_Delimitation__semicolon_02.c":84:21)
#loc96 = loc("CWE483_Incorrect_Block_Delimitation__semicolon_02.c":84:17)
#loc97 = loc("CWE483_Incorrect_Block_Delimitation__semicolon_02.c":86:13)
#loc98 = loc("CWE483_Incorrect_Block_Delimitation__semicolon_02.c":89:13)
#loc99 = loc("CWE483_Incorrect_Block_Delimitation__semicolon_02.c":86:17)
#loc100 = loc("CWE483_Incorrect_Block_Delimitation__semicolon_02.c":87:13)
#loc101 = loc("CWE483_Incorrect_Block_Delimitation__semicolon_02.c":88:27)
#loc102 = loc("CWE483_Incorrect_Block_Delimitation__semicolon_02.c":88:17)
#loc103 = loc(fused[#loc1, #loc2])
#loc104 = loc(fused[#loc3, #loc4])
#loc105 = loc(fused[#loc7, #loc8])
#loc106 = loc(fused[#loc9, #loc10])
#loc107 = loc(fused[#loc12, #loc10])
#loc108 = loc(fused[#loc13, #loc14])
#loc109 = loc(fused[#loc15, #loc16])
#loc110 = loc(fused[#loc17, #loc18])
#loc111 = loc(fused[#loc19, #loc20])
#loc112 = loc(fused[#loc21, #loc22])
#loc113 = loc(fused[#loc23, #loc24])
#loc114 = loc(fused[#loc25, #loc26])
#loc115 = loc(fused[#loc29, #loc28])
#loc116 = loc(fused[#loc30, #loc31])
#loc117 = loc(fused[#loc33, #loc31])
#loc118 = loc(fused[#loc35, #loc36])
#loc119 = loc(fused[#loc37, #loc38])
#loc120 = loc(fused[#loc39, #loc40])
#loc121 = loc(fused[#loc42, #loc43])
#loc122 = loc(fused[#loc44, #loc45])
#loc123 = loc(fused[#loc47, #loc48, #loc49, #loc45])
#loc124 = loc(fused[#loc51, #loc52])
#loc125 = loc(fused[#loc53, #loc54])
#loc126 = loc(fused[#loc55, #loc56])
#loc127 = loc(fused[#loc57, #loc58])
#loc128 = loc(fused[#loc59, #loc60])
#loc129 = loc(fused[#loc61, #loc62])
#loc130 = loc(fused[#loc63, #loc60])
#loc131 = loc(fused[#loc67, #loc66])
#loc132 = loc(fused[#loc68, #loc69])
#loc133 = loc(fused[#loc71, #loc69])
#loc134 = loc(fused[#loc74, #loc75])
#loc135 = loc(fused[#loc76, #loc77])
#loc136 = loc(fused[#loc79, #loc77])
#loc137 = loc(fused[#loc80, #loc81])
#loc138 = loc(fused[#loc82, #loc83])
#loc139 = loc(fused[#loc84, #loc85])
#loc140 = loc(fused[#loc86, #loc87])
#loc141 = loc(fused[#loc88, #loc89])
#loc142 = loc(fused[#loc90, #loc91])
#loc143 = loc(fused[#loc92, #loc89])
#loc144 = loc(fused[#loc96, #loc95])
#loc145 = loc(fused[#loc97, #loc98])
#loc146 = loc(fused[#loc100, #loc98])
