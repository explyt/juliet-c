!s32i = !cir.int<s, 32>
!s8i = !cir.int<s, 8>
!u64i = !cir.int<u, 64>
!u8i = !cir.int<u, 8>
!void = !cir.void
#fn_attr = #cir<extra({nothrow = #cir.nothrow})>
#fn_attr1 = #cir<extra({inline = #cir.inline<no>, nothrow = #cir.nothrow, optnone = #cir.optnone})>
module @"/home/ladisgin/git_proj/juliet-c/testcases/CWE121_Stack_Based_Buffer_Overflow/s02/CWE121_Stack_Based_Buffer_Overflow__CWE193_char_alloca_ncpy_04.c" attributes {cir.lang = #cir.lang<c>, cir.sob = #cir.signed_overflow_behavior<undefined>, cir.triple = "x86_64-unknown-linux-gnu", dlti.dl_spec = #dlti.dl_spec<!llvm.ptr = dense<64> : vector<4xi64>, f80 = dense<128> : vector<2xi64>, i32 = dense<32> : vector<2xi64>, i16 = dense<16> : vector<2xi64>, i8 = dense<8> : vector<2xi64>, i1 = dense<8> : vector<2xi64>, !llvm.ptr<271> = dense<32> : vector<4xi64>, !llvm.ptr<270> = dense<32> : vector<4xi64>, f128 = dense<128> : vector<2xi64>, f64 = dense<64> : vector<2xi64>, f16 = dense<16> : vector<2xi64>, i128 = dense<128> : vector<2xi64>, i64 = dense<64> : vector<2xi64>, !llvm.ptr<272> = dense<64> : vector<4xi64>, "dlti.stack_alignment" = 128 : i64, "dlti.endianness" = "little">} {
  cir.global "private" constant cir_private @__const.goodG2B2.source = #cir.const_array<"AAAAAAAAAA\00" : !cir.array<!s8i x 11>> : !cir.array<!s8i x 11> loc(#loc107)
  cir.global "private" constant cir_private @__const.goodG2B1.source = #cir.const_array<"AAAAAAAAAA\00" : !cir.array<!s8i x 11>> : !cir.array<!s8i x 11> loc(#loc108)
  cir.global "private" constant cir_private @__const.CWE121_Stack_Based_Buffer_Overflow__CWE193_char_alloca_ncpy_04_bad.source = #cir.const_array<"AAAAAAAAAA\00" : !cir.array<!s8i x 11>> : !cir.array<!s8i x 11> loc(#loc109)
  cir.func private @strncpy(!cir.ptr<!s8i>, !cir.ptr<!s8i>, !u64i) -> !cir.ptr<!s8i> extra(#fn_attr) loc(#loc110)
  cir.func private @strlen(!cir.ptr<!s8i>) -> !u64i extra(#fn_attr) loc(#loc111)
  cir.func private @printLine(!cir.ptr<!s8i>) loc(#loc112)
  cir.func no_proto @CWE121_Stack_Based_Buffer_Overflow__CWE193_char_alloca_ncpy_04_bad() extra(#fn_attr1) {
    %0 = cir.alloca !cir.array<!s8i x 11>, !cir.ptr<!cir.array<!s8i x 11>>, ["source"] {alignment = 1 : i64} loc(#loc109)
    %1 = cir.alloca !cir.ptr<!s8i>, !cir.ptr<!cir.ptr<!s8i>>, ["data"] {alignment = 8 : i64} loc(#loc114)
    %2 = cir.alloca !cir.ptr<!s8i>, !cir.ptr<!cir.ptr<!s8i>>, ["dataBadBuffer", init] {alignment = 8 : i64} loc(#loc115)
    %3 = cir.const #cir.int<10> : !s32i loc(#loc18)
    %4 = cir.cast(integral, %3 : !s32i), !u64i loc(#loc18)
    %5 = cir.const #cir.int<1> : !u64i loc(#loc18)
    %6 = cir.binop(mul, %4, %5) : !u64i loc(#loc18)
    %7 = cir.alloca !u8i, !cir.ptr<!u8i>, %6 : !u64i, ["bi_alloca"] {alignment = 16 : i64} loc(#loc18)
    %8 = cir.alloca !cir.ptr<!s8i>, !cir.ptr<!cir.ptr<!s8i>>, ["dataGoodBuffer", init] {alignment = 8 : i64} loc(#loc116)
    %9 = cir.cast(bitcast, %7 : !cir.ptr<!u8i>), !cir.ptr<!void> loc(#loc18)
    %10 = cir.cast(bitcast, %9 : !cir.ptr<!void>), !cir.ptr<!s8i> loc(#loc18)
    cir.store %10, %2 : !cir.ptr<!s8i>, !cir.ptr<!cir.ptr<!s8i>> loc(#loc115)
    %11 = cir.const #cir.int<10> : !s32i loc(#loc20)
    %12 = cir.const #cir.int<1> : !s32i loc(#loc20)
    %13 = cir.binop(add, %11, %12) nsw : !s32i loc(#loc20)
    %14 = cir.cast(integral, %13 : !s32i), !u64i loc(#loc20)
    %15 = cir.const #cir.int<1> : !u64i loc(#loc20)
    %16 = cir.binop(mul, %14, %15) : !u64i loc(#loc20)
    %17 = cir.alloca !u8i, !cir.ptr<!u8i>, %16 : !u64i, ["bi_alloca"] {alignment = 16 : i64} loc(#loc20)
    %18 = cir.cast(bitcast, %17 : !cir.ptr<!u8i>), !cir.ptr<!void> loc(#loc20)
    %19 = cir.cast(bitcast, %18 : !cir.ptr<!void>), !cir.ptr<!s8i> loc(#loc20)
    cir.store %19, %8 : !cir.ptr<!s8i>, !cir.ptr<!cir.ptr<!s8i>> loc(#loc116)
    cir.br ^bb1 loc(#loc117)
  ^bb1:  // pred: ^bb0
    %20 = cir.const #cir.int<1> : !s32i loc(#loc23)
    %21 = cir.cast(int_to_bool, %20 : !s32i), !cir.bool loc(#loc23)
    cir.brcond %21 ^bb2, ^bb3 loc(#loc118)
  ^bb2:  // pred: ^bb1
    %22 = cir.load %2 : !cir.ptr<!cir.ptr<!s8i>>, !cir.ptr<!s8i> loc(#loc25)
    cir.store %22, %1 : !cir.ptr<!s8i>, !cir.ptr<!cir.ptr<!s8i>> loc(#loc119)
    %23 = cir.const #cir.int<0> : !s32i loc(#loc27)
    %24 = cir.cast(integral, %23 : !s32i), !s8i loc(#loc27)
    %25 = cir.load %1 : !cir.ptr<!cir.ptr<!s8i>>, !cir.ptr<!s8i> loc(#loc28)
    %26 = cir.const #cir.int<0> : !s32i loc(#loc29)
    %27 = cir.ptr_stride(%25 : !cir.ptr<!s8i>, %26 : !s32i), !cir.ptr<!s8i> loc(#loc30)
    cir.store %24, %27 : !s8i, !cir.ptr<!s8i> loc(#loc120)
    cir.br ^bb3 loc(#loc22)
  ^bb3:  // 2 preds: ^bb1, ^bb2
    cir.br ^bb4 loc(#loc22)
  ^bb4:  // pred: ^bb3
    cir.br ^bb5 loc(#loc121)
  ^bb5:  // pred: ^bb4
    %28 = cir.get_global @__const.CWE121_Stack_Based_Buffer_Overflow__CWE193_char_alloca_ncpy_04_bad.source : !cir.ptr<!cir.array<!s8i x 11>> loc(#loc109)
    cir.copy %28 to %0 : !cir.ptr<!cir.array<!s8i x 11>> loc(#loc109)
    %29 = cir.get_global @strncpy : !cir.ptr<!cir.func<!cir.ptr<!s8i> (!cir.ptr<!s8i>, !cir.ptr<!s8i>, !u64i)>> loc(#loc33)
    %30 = cir.load %1 : !cir.ptr<!cir.ptr<!s8i>>, !cir.ptr<!s8i> loc(#loc34)
    %31 = cir.cast(array_to_ptrdecay, %0 : !cir.ptr<!cir.array<!s8i x 11>>), !cir.ptr<!s8i> loc(#loc35)
    %32 = cir.get_global @strlen : !cir.ptr<!cir.func<!u64i (!cir.ptr<!s8i>)>> loc(#loc36)
    %33 = cir.cast(array_to_ptrdecay, %0 : !cir.ptr<!cir.array<!s8i x 11>>), !cir.ptr<!s8i> loc(#loc37)
    %34 = cir.call @strlen(%33) : (!cir.ptr<!s8i>) -> !u64i extra(#fn_attr) loc(#loc36)
    %35 = cir.const #cir.int<1> : !s32i loc(#loc38)
    %36 = cir.cast(integral, %35 : !s32i), !u64i loc(#loc38)
    %37 = cir.binop(add, %34, %36) : !u64i loc(#loc122)
    %38 = cir.call @strncpy(%30, %31, %37) : (!cir.ptr<!s8i>, !cir.ptr<!s8i>, !u64i) -> !cir.ptr<!s8i> extra(#fn_attr) loc(#loc33)
    %39 = cir.load %1 : !cir.ptr<!cir.ptr<!s8i>>, !cir.ptr<!s8i> loc(#loc39)
    cir.call @printLine(%39) : (!cir.ptr<!s8i>) -> () loc(#loc40)
    cir.br ^bb6 loc(#loc32)
  ^bb6:  // pred: ^bb5
    cir.return loc(#loc14)
  } loc(#loc113)
  cir.func no_proto @CWE121_Stack_Based_Buffer_Overflow__CWE193_char_alloca_ncpy_04_good() extra(#fn_attr1) {
    %0 = cir.get_global @goodG2B1 : !cir.ptr<!cir.func<!void ()>> loc(#loc124)
    cir.call %0() : (!cir.ptr<!cir.func<!void ()>>) -> () loc(#loc43)
    %1 = cir.get_global @goodG2B2 : !cir.ptr<!cir.func<!void ()>> loc(#loc125)
    cir.call %1() : (!cir.ptr<!cir.func<!void ()>>) -> () loc(#loc45)
    cir.return loc(#loc42)
  } loc(#loc123)
  cir.global "private" constant cir_private dsolocal @".str" = #cir.const_array<"Benign, fixed string\00" : !cir.array<!s8i x 21>> : !cir.array<!s8i x 21> {alignment = 1 : i64} loc(#loc47)
  cir.func no_proto internal private @goodG2B1() extra(#fn_attr1) {
    %0 = cir.alloca !cir.array<!s8i x 11>, !cir.ptr<!cir.array<!s8i x 11>>, ["source"] {alignment = 1 : i64} loc(#loc108)
    %1 = cir.alloca !cir.ptr<!s8i>, !cir.ptr<!cir.ptr<!s8i>>, ["data"] {alignment = 8 : i64} loc(#loc127)
    %2 = cir.alloca !cir.ptr<!s8i>, !cir.ptr<!cir.ptr<!s8i>>, ["dataBadBuffer", init] {alignment = 8 : i64} loc(#loc128)
    %3 = cir.const #cir.int<10> : !s32i loc(#loc53)
    %4 = cir.cast(integral, %3 : !s32i), !u64i loc(#loc53)
    %5 = cir.const #cir.int<1> : !u64i loc(#loc53)
    %6 = cir.binop(mul, %4, %5) : !u64i loc(#loc53)
    %7 = cir.alloca !u8i, !cir.ptr<!u8i>, %6 : !u64i, ["bi_alloca"] {alignment = 16 : i64} loc(#loc53)
    %8 = cir.alloca !cir.ptr<!s8i>, !cir.ptr<!cir.ptr<!s8i>>, ["dataGoodBuffer", init] {alignment = 8 : i64} loc(#loc129)
    %9 = cir.cast(bitcast, %7 : !cir.ptr<!u8i>), !cir.ptr<!void> loc(#loc53)
    %10 = cir.cast(bitcast, %9 : !cir.ptr<!void>), !cir.ptr<!s8i> loc(#loc53)
    cir.store %10, %2 : !cir.ptr<!s8i>, !cir.ptr<!cir.ptr<!s8i>> loc(#loc128)
    %11 = cir.const #cir.int<10> : !s32i loc(#loc55)
    %12 = cir.const #cir.int<1> : !s32i loc(#loc55)
    %13 = cir.binop(add, %11, %12) nsw : !s32i loc(#loc55)
    %14 = cir.cast(integral, %13 : !s32i), !u64i loc(#loc55)
    %15 = cir.const #cir.int<1> : !u64i loc(#loc55)
    %16 = cir.binop(mul, %14, %15) : !u64i loc(#loc55)
    %17 = cir.alloca !u8i, !cir.ptr<!u8i>, %16 : !u64i, ["bi_alloca"] {alignment = 16 : i64} loc(#loc55)
    %18 = cir.cast(bitcast, %17 : !cir.ptr<!u8i>), !cir.ptr<!void> loc(#loc55)
    %19 = cir.cast(bitcast, %18 : !cir.ptr<!void>), !cir.ptr<!s8i> loc(#loc55)
    cir.store %19, %8 : !cir.ptr<!s8i>, !cir.ptr<!cir.ptr<!s8i>> loc(#loc129)
    cir.br ^bb1 loc(#loc130)
  ^bb1:  // pred: ^bb0
    %20 = cir.const #cir.int<0> : !s32i loc(#loc58)
    %21 = cir.cast(int_to_bool, %20 : !s32i), !cir.bool loc(#loc58)
    cir.brcond %21 ^bb2, ^bb3 loc(#loc131)
  ^bb2:  // pred: ^bb1
    %22 = cir.get_global @".str" : !cir.ptr<!cir.array<!s8i x 21>> loc(#loc47)
    %23 = cir.cast(array_to_ptrdecay, %22 : !cir.ptr<!cir.array<!s8i x 21>>), !cir.ptr<!s8i> loc(#loc47)
    cir.call @printLine(%23) : (!cir.ptr<!s8i>) -> () loc(#loc62)
    cir.br ^bb4 loc(#loc60)
  ^bb3:  // pred: ^bb1
    %24 = cir.load %8 : !cir.ptr<!cir.ptr<!s8i>>, !cir.ptr<!s8i> loc(#loc63)
    cir.store %24, %1 : !cir.ptr<!s8i>, !cir.ptr<!cir.ptr<!s8i>> loc(#loc132)
    %25 = cir.const #cir.int<0> : !s32i loc(#loc65)
    %26 = cir.cast(integral, %25 : !s32i), !s8i loc(#loc65)
    %27 = cir.load %1 : !cir.ptr<!cir.ptr<!s8i>>, !cir.ptr<!s8i> loc(#loc66)
    %28 = cir.const #cir.int<0> : !s32i loc(#loc67)
    %29 = cir.ptr_stride(%27 : !cir.ptr<!s8i>, %28 : !s32i), !cir.ptr<!s8i> loc(#loc68)
    cir.store %26, %29 : !s8i, !cir.ptr<!s8i> loc(#loc133)
    cir.br ^bb4 loc(#loc57)
  ^bb4:  // 2 preds: ^bb2, ^bb3
    cir.br ^bb5 loc(#loc57)
  ^bb5:  // pred: ^bb4
    cir.br ^bb6 loc(#loc134)
  ^bb6:  // pred: ^bb5
    %30 = cir.get_global @__const.goodG2B1.source : !cir.ptr<!cir.array<!s8i x 11>> loc(#loc108)
    cir.copy %30 to %0 : !cir.ptr<!cir.array<!s8i x 11>> loc(#loc108)
    %31 = cir.get_global @strncpy : !cir.ptr<!cir.func<!cir.ptr<!s8i> (!cir.ptr<!s8i>, !cir.ptr<!s8i>, !u64i)>> loc(#loc71)
    %32 = cir.load %1 : !cir.ptr<!cir.ptr<!s8i>>, !cir.ptr<!s8i> loc(#loc72)
    %33 = cir.cast(array_to_ptrdecay, %0 : !cir.ptr<!cir.array<!s8i x 11>>), !cir.ptr<!s8i> loc(#loc73)
    %34 = cir.get_global @strlen : !cir.ptr<!cir.func<!u64i (!cir.ptr<!s8i>)>> loc(#loc74)
    %35 = cir.cast(array_to_ptrdecay, %0 : !cir.ptr<!cir.array<!s8i x 11>>), !cir.ptr<!s8i> loc(#loc75)
    %36 = cir.call @strlen(%35) : (!cir.ptr<!s8i>) -> !u64i extra(#fn_attr) loc(#loc74)
    %37 = cir.const #cir.int<1> : !s32i loc(#loc76)
    %38 = cir.cast(integral, %37 : !s32i), !u64i loc(#loc76)
    %39 = cir.binop(add, %36, %38) : !u64i loc(#loc135)
    %40 = cir.call @strncpy(%32, %33, %39) : (!cir.ptr<!s8i>, !cir.ptr<!s8i>, !u64i) -> !cir.ptr<!s8i> extra(#fn_attr) loc(#loc71)
    %41 = cir.load %1 : !cir.ptr<!cir.ptr<!s8i>>, !cir.ptr<!s8i> loc(#loc77)
    cir.call @printLine(%41) : (!cir.ptr<!s8i>) -> () loc(#loc78)
    cir.br ^bb7 loc(#loc70)
  ^bb7:  // pred: ^bb6
    cir.return loc(#loc49)
  } loc(#loc126)
  cir.func no_proto internal private @goodG2B2() extra(#fn_attr1) {
    %0 = cir.alloca !cir.array<!s8i x 11>, !cir.ptr<!cir.array<!s8i x 11>>, ["source"] {alignment = 1 : i64} loc(#loc107)
    %1 = cir.alloca !cir.ptr<!s8i>, !cir.ptr<!cir.ptr<!s8i>>, ["data"] {alignment = 8 : i64} loc(#loc137)
    %2 = cir.alloca !cir.ptr<!s8i>, !cir.ptr<!cir.ptr<!s8i>>, ["dataBadBuffer", init] {alignment = 8 : i64} loc(#loc138)
    %3 = cir.const #cir.int<10> : !s32i loc(#loc84)
    %4 = cir.cast(integral, %3 : !s32i), !u64i loc(#loc84)
    %5 = cir.const #cir.int<1> : !u64i loc(#loc84)
    %6 = cir.binop(mul, %4, %5) : !u64i loc(#loc84)
    %7 = cir.alloca !u8i, !cir.ptr<!u8i>, %6 : !u64i, ["bi_alloca"] {alignment = 16 : i64} loc(#loc84)
    %8 = cir.alloca !cir.ptr<!s8i>, !cir.ptr<!cir.ptr<!s8i>>, ["dataGoodBuffer", init] {alignment = 8 : i64} loc(#loc139)
    %9 = cir.cast(bitcast, %7 : !cir.ptr<!u8i>), !cir.ptr<!void> loc(#loc84)
    %10 = cir.cast(bitcast, %9 : !cir.ptr<!void>), !cir.ptr<!s8i> loc(#loc84)
    cir.store %10, %2 : !cir.ptr<!s8i>, !cir.ptr<!cir.ptr<!s8i>> loc(#loc138)
    %11 = cir.const #cir.int<10> : !s32i loc(#loc86)
    %12 = cir.const #cir.int<1> : !s32i loc(#loc86)
    %13 = cir.binop(add, %11, %12) nsw : !s32i loc(#loc86)
    %14 = cir.cast(integral, %13 : !s32i), !u64i loc(#loc86)
    %15 = cir.const #cir.int<1> : !u64i loc(#loc86)
    %16 = cir.binop(mul, %14, %15) : !u64i loc(#loc86)
    %17 = cir.alloca !u8i, !cir.ptr<!u8i>, %16 : !u64i, ["bi_alloca"] {alignment = 16 : i64} loc(#loc86)
    %18 = cir.cast(bitcast, %17 : !cir.ptr<!u8i>), !cir.ptr<!void> loc(#loc86)
    %19 = cir.cast(bitcast, %18 : !cir.ptr<!void>), !cir.ptr<!s8i> loc(#loc86)
    cir.store %19, %8 : !cir.ptr<!s8i>, !cir.ptr<!cir.ptr<!s8i>> loc(#loc139)
    cir.br ^bb1 loc(#loc140)
  ^bb1:  // pred: ^bb0
    %20 = cir.const #cir.int<1> : !s32i loc(#loc89)
    %21 = cir.cast(int_to_bool, %20 : !s32i), !cir.bool loc(#loc89)
    cir.brcond %21 ^bb2, ^bb3 loc(#loc141)
  ^bb2:  // pred: ^bb1
    %22 = cir.load %8 : !cir.ptr<!cir.ptr<!s8i>>, !cir.ptr<!s8i> loc(#loc91)
    cir.store %22, %1 : !cir.ptr<!s8i>, !cir.ptr<!cir.ptr<!s8i>> loc(#loc142)
    %23 = cir.const #cir.int<0> : !s32i loc(#loc93)
    %24 = cir.cast(integral, %23 : !s32i), !s8i loc(#loc93)
    %25 = cir.load %1 : !cir.ptr<!cir.ptr<!s8i>>, !cir.ptr<!s8i> loc(#loc94)
    %26 = cir.const #cir.int<0> : !s32i loc(#loc95)
    %27 = cir.ptr_stride(%25 : !cir.ptr<!s8i>, %26 : !s32i), !cir.ptr<!s8i> loc(#loc96)
    cir.store %24, %27 : !s8i, !cir.ptr<!s8i> loc(#loc143)
    cir.br ^bb3 loc(#loc88)
  ^bb3:  // 2 preds: ^bb1, ^bb2
    cir.br ^bb4 loc(#loc88)
  ^bb4:  // pred: ^bb3
    cir.br ^bb5 loc(#loc144)
  ^bb5:  // pred: ^bb4
    %28 = cir.get_global @__const.goodG2B2.source : !cir.ptr<!cir.array<!s8i x 11>> loc(#loc107)
    cir.copy %28 to %0 : !cir.ptr<!cir.array<!s8i x 11>> loc(#loc107)
    %29 = cir.get_global @strncpy : !cir.ptr<!cir.func<!cir.ptr<!s8i> (!cir.ptr<!s8i>, !cir.ptr<!s8i>, !u64i)>> loc(#loc99)
    %30 = cir.load %1 : !cir.ptr<!cir.ptr<!s8i>>, !cir.ptr<!s8i> loc(#loc100)
    %31 = cir.cast(array_to_ptrdecay, %0 : !cir.ptr<!cir.array<!s8i x 11>>), !cir.ptr<!s8i> loc(#loc101)
    %32 = cir.get_global @strlen : !cir.ptr<!cir.func<!u64i (!cir.ptr<!s8i>)>> loc(#loc102)
    %33 = cir.cast(array_to_ptrdecay, %0 : !cir.ptr<!cir.array<!s8i x 11>>), !cir.ptr<!s8i> loc(#loc103)
    %34 = cir.call @strlen(%33) : (!cir.ptr<!s8i>) -> !u64i extra(#fn_attr) loc(#loc102)
    %35 = cir.const #cir.int<1> : !s32i loc(#loc104)
    %36 = cir.cast(integral, %35 : !s32i), !u64i loc(#loc104)
    %37 = cir.binop(add, %34, %36) : !u64i loc(#loc145)
    %38 = cir.call @strncpy(%30, %31, %37) : (!cir.ptr<!s8i>, !cir.ptr<!s8i>, !u64i) -> !cir.ptr<!s8i> extra(#fn_attr) loc(#loc99)
    %39 = cir.load %1 : !cir.ptr<!cir.ptr<!s8i>>, !cir.ptr<!s8i> loc(#loc105)
    cir.call @printLine(%39) : (!cir.ptr<!s8i>) -> () loc(#loc106)
    cir.br ^bb6 loc(#loc98)
  ^bb6:  // pred: ^bb5
    cir.return loc(#loc80)
  } loc(#loc136)
} loc(#loc)
#loc = loc("/home/ladisgin/git_proj/juliet-c/testcases/CWE121_Stack_Based_Buffer_Overflow/s02/CWE121_Stack_Based_Buffer_Overflow__CWE193_char_alloca_ncpy_04.c":0:0)
#loc1 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE193_char_alloca_ncpy_04.c":101:9)
#loc2 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE193_char_alloca_ncpy_04.c":101:29)
#loc3 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE193_char_alloca_ncpy_04.c":79:9)
#loc4 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE193_char_alloca_ncpy_04.c":79:29)
#loc5 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE193_char_alloca_ncpy_04.c":48:9)
#loc6 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE193_char_alloca_ncpy_04.c":48:29)
#loc7 = loc("/usr/include/string.h":144:1)
#loc8 = loc("/usr/include/string.h":146:14)
#loc9 = loc("/usr/include/string.h":407:1)
#loc10 = loc("/usr/include/string.h":408:33)
#loc11 = loc("../../../testcasesupport/std_testcase_io.h":14:1)
#loc12 = loc("../../../testcasesupport/std_testcase_io.h":14:33)
#loc13 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE193_char_alloca_ncpy_04.c":35:1)
#loc14 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE193_char_alloca_ncpy_04.c":54:1)
#loc15 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE193_char_alloca_ncpy_04.c":37:5)
#loc16 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE193_char_alloca_ncpy_04.c":37:12)
#loc17 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE193_char_alloca_ncpy_04.c":38:5)
#loc18 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE193_char_alloca_ncpy_04.c":38:36)
#loc19 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE193_char_alloca_ncpy_04.c":39:5)
#loc20 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE193_char_alloca_ncpy_04.c":39:37)
#loc21 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE193_char_alloca_ncpy_04.c":40:5)
#loc22 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE193_char_alloca_ncpy_04.c":46:5)
#loc23 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE193_char_alloca_ncpy_04.c":40:8)
#loc24 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE193_char_alloca_ncpy_04.c":41:5)
#loc25 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE193_char_alloca_ncpy_04.c":44:16)
#loc26 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE193_char_alloca_ncpy_04.c":44:9)
#loc27 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE193_char_alloca_ncpy_04.c":45:19)
#loc28 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE193_char_alloca_ncpy_04.c":45:9)
#loc29 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE193_char_alloca_ncpy_04.c":45:14)
#loc30 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE193_char_alloca_ncpy_04.c":45:15)
#loc31 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE193_char_alloca_ncpy_04.c":47:5)
#loc32 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE193_char_alloca_ncpy_04.c":53:5)
#loc33 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE193_char_alloca_ncpy_04.c":51:9)
#loc34 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE193_char_alloca_ncpy_04.c":51:17)
#loc35 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE193_char_alloca_ncpy_04.c":51:23)
#loc36 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE193_char_alloca_ncpy_04.c":51:31)
#loc37 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE193_char_alloca_ncpy_04.c":51:38)
#loc38 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE193_char_alloca_ncpy_04.c":51:48)
#loc39 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE193_char_alloca_ncpy_04.c":52:19)
#loc40 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE193_char_alloca_ncpy_04.c":52:9)
#loc41 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE193_char_alloca_ncpy_04.c":109:1)
#loc42 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE193_char_alloca_ncpy_04.c":113:1)
#loc43 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE193_char_alloca_ncpy_04.c":111:5)
#loc44 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE193_char_alloca_ncpy_04.c":111:14)
#loc45 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE193_char_alloca_ncpy_04.c":112:5)
#loc46 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE193_char_alloca_ncpy_04.c":112:14)
#loc47 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE193_char_alloca_ncpy_04.c":69:19)
#loc48 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE193_char_alloca_ncpy_04.c":61:1)
#loc49 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE193_char_alloca_ncpy_04.c":85:1)
#loc50 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE193_char_alloca_ncpy_04.c":63:5)
#loc51 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE193_char_alloca_ncpy_04.c":63:12)
#loc52 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE193_char_alloca_ncpy_04.c":64:5)
#loc53 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE193_char_alloca_ncpy_04.c":64:36)
#loc54 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE193_char_alloca_ncpy_04.c":65:5)
#loc55 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE193_char_alloca_ncpy_04.c":65:37)
#loc56 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE193_char_alloca_ncpy_04.c":66:5)
#loc57 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE193_char_alloca_ncpy_04.c":77:5)
#loc58 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE193_char_alloca_ncpy_04.c":66:8)
#loc59 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE193_char_alloca_ncpy_04.c":67:5)
#loc60 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE193_char_alloca_ncpy_04.c":70:5)
#loc61 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE193_char_alloca_ncpy_04.c":72:5)
#loc62 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE193_char_alloca_ncpy_04.c":69:9)
#loc63 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE193_char_alloca_ncpy_04.c":75:16)
#loc64 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE193_char_alloca_ncpy_04.c":75:9)
#loc65 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE193_char_alloca_ncpy_04.c":76:19)
#loc66 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE193_char_alloca_ncpy_04.c":76:9)
#loc67 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE193_char_alloca_ncpy_04.c":76:14)
#loc68 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE193_char_alloca_ncpy_04.c":76:15)
#loc69 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE193_char_alloca_ncpy_04.c":78:5)
#loc70 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE193_char_alloca_ncpy_04.c":84:5)
#loc71 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE193_char_alloca_ncpy_04.c":82:9)
#loc72 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE193_char_alloca_ncpy_04.c":82:17)
#loc73 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE193_char_alloca_ncpy_04.c":82:23)
#loc74 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE193_char_alloca_ncpy_04.c":82:31)
#loc75 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE193_char_alloca_ncpy_04.c":82:38)
#loc76 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE193_char_alloca_ncpy_04.c":82:48)
#loc77 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE193_char_alloca_ncpy_04.c":83:19)
#loc78 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE193_char_alloca_ncpy_04.c":83:9)
#loc79 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE193_char_alloca_ncpy_04.c":88:1)
#loc80 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE193_char_alloca_ncpy_04.c":107:1)
#loc81 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE193_char_alloca_ncpy_04.c":90:5)
#loc82 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE193_char_alloca_ncpy_04.c":90:12)
#loc83 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE193_char_alloca_ncpy_04.c":91:5)
#loc84 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE193_char_alloca_ncpy_04.c":91:36)
#loc85 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE193_char_alloca_ncpy_04.c":92:5)
#loc86 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE193_char_alloca_ncpy_04.c":92:37)
#loc87 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE193_char_alloca_ncpy_04.c":93:5)
#loc88 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE193_char_alloca_ncpy_04.c":99:5)
#loc89 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE193_char_alloca_ncpy_04.c":93:8)
#loc90 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE193_char_alloca_ncpy_04.c":94:5)
#loc91 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE193_char_alloca_ncpy_04.c":97:16)
#loc92 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE193_char_alloca_ncpy_04.c":97:9)
#loc93 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE193_char_alloca_ncpy_04.c":98:19)
#loc94 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE193_char_alloca_ncpy_04.c":98:9)
#loc95 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE193_char_alloca_ncpy_04.c":98:14)
#loc96 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE193_char_alloca_ncpy_04.c":98:15)
#loc97 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE193_char_alloca_ncpy_04.c":100:5)
#loc98 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE193_char_alloca_ncpy_04.c":106:5)
#loc99 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE193_char_alloca_ncpy_04.c":104:9)
#loc100 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE193_char_alloca_ncpy_04.c":104:17)
#loc101 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE193_char_alloca_ncpy_04.c":104:23)
#loc102 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE193_char_alloca_ncpy_04.c":104:31)
#loc103 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE193_char_alloca_ncpy_04.c":104:38)
#loc104 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE193_char_alloca_ncpy_04.c":104:48)
#loc105 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE193_char_alloca_ncpy_04.c":105:19)
#loc106 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE193_char_alloca_ncpy_04.c":105:9)
#loc107 = loc(fused[#loc1, #loc2])
#loc108 = loc(fused[#loc3, #loc4])
#loc109 = loc(fused[#loc5, #loc6])
#loc110 = loc(fused[#loc7, #loc8])
#loc111 = loc(fused[#loc9, #loc10])
#loc112 = loc(fused[#loc11, #loc12])
#loc113 = loc(fused[#loc13, #loc14])
#loc114 = loc(fused[#loc15, #loc16])
#loc115 = loc(fused[#loc17, #loc18])
#loc116 = loc(fused[#loc19, #loc20])
#loc117 = loc(fused[#loc21, #loc22])
#loc118 = loc(fused[#loc24, #loc22])
#loc119 = loc(fused[#loc26, #loc25])
#loc120 = loc(fused[#loc28, #loc27])
#loc121 = loc(fused[#loc31, #loc32])
#loc122 = loc(fused[#loc36, #loc38])
#loc123 = loc(fused[#loc41, #loc42])
#loc124 = loc(fused[#loc43, #loc44])
#loc125 = loc(fused[#loc45, #loc46])
#loc126 = loc(fused[#loc48, #loc49])
#loc127 = loc(fused[#loc50, #loc51])
#loc128 = loc(fused[#loc52, #loc53])
#loc129 = loc(fused[#loc54, #loc55])
#loc130 = loc(fused[#loc56, #loc57])
#loc131 = loc(fused[#loc59, #loc60, #loc61, #loc57])
#loc132 = loc(fused[#loc64, #loc63])
#loc133 = loc(fused[#loc66, #loc65])
#loc134 = loc(fused[#loc69, #loc70])
#loc135 = loc(fused[#loc74, #loc76])
#loc136 = loc(fused[#loc79, #loc80])
#loc137 = loc(fused[#loc81, #loc82])
#loc138 = loc(fused[#loc83, #loc84])
#loc139 = loc(fused[#loc85, #loc86])
#loc140 = loc(fused[#loc87, #loc88])
#loc141 = loc(fused[#loc90, #loc88])
#loc142 = loc(fused[#loc92, #loc91])
#loc143 = loc(fused[#loc94, #loc93])
#loc144 = loc(fused[#loc97, #loc98])
#loc145 = loc(fused[#loc102, #loc104])
