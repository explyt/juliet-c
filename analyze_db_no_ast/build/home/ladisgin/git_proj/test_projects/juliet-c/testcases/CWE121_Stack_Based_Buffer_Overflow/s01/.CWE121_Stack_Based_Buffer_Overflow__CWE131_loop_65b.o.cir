!s32i = !cir.int<s, 32>
!u64i = !cir.int<u, 64>
#fn_attr = #cir<extra({inline = #cir.inline<no>, nothrow = #cir.nothrow, optnone = #cir.optnone})>
#loc5 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE131_loop_65b.c":21:66)
#loc6 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE131_loop_65b.c":21:72)
#loc36 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE131_loop_65b.c":40:70)
#loc37 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE131_loop_65b.c":40:76)
#loc67 = loc(fused[#loc5, #loc6])
#loc78 = loc(fused[#loc36, #loc37])
module @"/home/ladisgin/git_proj/test_projects/juliet-c/testcases/CWE121_Stack_Based_Buffer_Overflow/s01/CWE121_Stack_Based_Buffer_Overflow__CWE131_loop_65b.c" attributes {cir.lang = #cir.lang<c>, cir.sob = #cir.signed_overflow_behavior<undefined>, cir.triple = "x86_64-unknown-linux-gnu", dlti.dl_spec = #dlti.dl_spec<#dlti.dl_entry<f64, dense<64> : vector<2xi64>>, #dlti.dl_entry<f16, dense<16> : vector<2xi64>>, #dlti.dl_entry<!llvm.ptr<270>, dense<32> : vector<4xi64>>, #dlti.dl_entry<f128, dense<128> : vector<2xi64>>, #dlti.dl_entry<i32, dense<32> : vector<2xi64>>, #dlti.dl_entry<i64, dense<64> : vector<2xi64>>, #dlti.dl_entry<!llvm.ptr<271>, dense<32> : vector<4xi64>>, #dlti.dl_entry<!llvm.ptr<272>, dense<64> : vector<4xi64>>, #dlti.dl_entry<f80, dense<128> : vector<2xi64>>, #dlti.dl_entry<i128, dense<128> : vector<2xi64>>, #dlti.dl_entry<i8, dense<8> : vector<2xi64>>, #dlti.dl_entry<i16, dense<16> : vector<2xi64>>, #dlti.dl_entry<!llvm.ptr, dense<64> : vector<4xi64>>, #dlti.dl_entry<i1, dense<8> : vector<2xi64>>, #dlti.dl_entry<"dlti.endianness", "little">, #dlti.dl_entry<"dlti.stack_alignment", 128 : i64>>, llvm.data_layout = "e-m:e-p270:32:32-p271:32:32-p272:64:64-i64:64-i128:128-f80:128-n8:16:32:64-S128"} {
  cir.func private  @printIntLine(!s32i) loc(#loc65)
  cir.func  @CWE121_Stack_Based_Buffer_Overflow__CWE131_loop_65b_badSink(%arg0: !cir.ptr<!s32i> loc(fused[#loc5, #loc6])) extra(#fn_attr) {
    %0 = cir.alloca !cir.ptr<!s32i>, !cir.ptr<!cir.ptr<!s32i>>, ["data", init] {alignment = 8 : i64} loc(#loc67)
    cir.store %arg0, %0 : !cir.ptr<!s32i>, !cir.ptr<!cir.ptr<!s32i>> loc(#loc7)
    cir.scope {
      %1 = cir.alloca !cir.array<!s32i x 10>, !cir.ptr<!cir.array<!s32i x 10>>, ["source"] {alignment = 16 : i64} loc(#loc69)
      %2 = cir.alloca !u64i, !cir.ptr<!u64i>, ["i"] {alignment = 8 : i64} loc(#loc70)
      %3 = cir.const #cir.zero : !cir.array<!s32i x 10> loc(#loc69)
      cir.store %3, %1 : !cir.array<!s32i x 10>, !cir.ptr<!cir.array<!s32i x 10>> loc(#loc69)
      cir.scope {
        %8 = cir.const #cir.int<0> : !s32i loc(#loc16)
        %9 = cir.cast(integral, %8 : !s32i), !u64i loc(#loc16)
        cir.store %9, %2 : !u64i, !cir.ptr<!u64i> loc(#loc72)
        cir.for : cond {
          %10 = cir.load %2 : !cir.ptr<!u64i>, !u64i loc(#loc18)
          %11 = cir.const #cir.int<10> : !s32i loc(#loc19)
          %12 = cir.cast(integral, %11 : !s32i), !u64i loc(#loc19)
          %13 = cir.cmp(lt, %10, %12) : !u64i, !s32i loc(#loc73)
          %14 = cir.cast(int_to_bool, %13 : !s32i), !cir.bool loc(#loc20)
          cir.condition(%14) loc(#loc20)
        } body {
          cir.scope {
            %10 = cir.load %2 : !cir.ptr<!u64i>, !u64i loc(#loc22)
            %11 = cir.cast(array_to_ptrdecay, %1 : !cir.ptr<!cir.array<!s32i x 10>>), !cir.ptr<!s32i> loc(#loc23)
            %12 = cir.ptr_stride(%11 : !cir.ptr<!s32i>, %10 : !u64i), !cir.ptr<!s32i> loc(#loc23)
            %13 = cir.load %12 : !cir.ptr<!s32i>, !s32i loc(#loc23)
            %14 = cir.load %0 : !cir.ptr<!cir.ptr<!s32i>>, !cir.ptr<!s32i> loc(#loc24)
            %15 = cir.load %2 : !cir.ptr<!u64i>, !u64i loc(#loc25)
            %16 = cir.ptr_stride(%14 : !cir.ptr<!s32i>, %15 : !u64i), !cir.ptr<!s32i> loc(#loc26)
            cir.store %13, %16 : !s32i, !cir.ptr<!s32i> loc(#loc75)
          } loc(#loc74)
          cir.yield loc(#loc15)
        } step {
          %10 = cir.load %2 : !cir.ptr<!u64i>, !u64i loc(#loc28)
          %11 = cir.unary(inc, %10) : !u64i, !u64i loc(#loc29)
          cir.store %11, %2 : !u64i, !cir.ptr<!u64i> loc(#loc76)
          cir.yield loc(#loc71)
        } loc(#loc71)
      } loc(#loc71)
      %4 = cir.load %0 : !cir.ptr<!cir.ptr<!s32i>>, !cir.ptr<!s32i> loc(#loc30)
      %5 = cir.const #cir.int<0> : !s32i loc(#loc31)
      %6 = cir.ptr_stride(%4 : !cir.ptr<!s32i>, %5 : !s32i), !cir.ptr<!s32i> loc(#loc32)
      %7 = cir.load %6 : !cir.ptr<!s32i>, !s32i loc(#loc30)
      cir.call @printIntLine(%7) : (!s32i) -> () loc(#loc33)
    } loc(#loc68)
    cir.return loc(#loc4)
  } loc(#loc66)
  cir.func  @CWE121_Stack_Based_Buffer_Overflow__CWE131_loop_65b_goodG2BSink(%arg0: !cir.ptr<!s32i> loc(fused[#loc36, #loc37])) extra(#fn_attr) {
    %0 = cir.alloca !cir.ptr<!s32i>, !cir.ptr<!cir.ptr<!s32i>>, ["data", init] {alignment = 8 : i64} loc(#loc78)
    cir.store %arg0, %0 : !cir.ptr<!s32i>, !cir.ptr<!cir.ptr<!s32i>> loc(#loc38)
    cir.scope {
      %1 = cir.alloca !cir.array<!s32i x 10>, !cir.ptr<!cir.array<!s32i x 10>>, ["source"] {alignment = 16 : i64} loc(#loc80)
      %2 = cir.alloca !u64i, !cir.ptr<!u64i>, ["i"] {alignment = 8 : i64} loc(#loc81)
      %3 = cir.const #cir.zero : !cir.array<!s32i x 10> loc(#loc80)
      cir.store %3, %1 : !cir.array<!s32i x 10>, !cir.ptr<!cir.array<!s32i x 10>> loc(#loc80)
      cir.scope {
        %8 = cir.const #cir.int<0> : !s32i loc(#loc47)
        %9 = cir.cast(integral, %8 : !s32i), !u64i loc(#loc47)
        cir.store %9, %2 : !u64i, !cir.ptr<!u64i> loc(#loc83)
        cir.for : cond {
          %10 = cir.load %2 : !cir.ptr<!u64i>, !u64i loc(#loc49)
          %11 = cir.const #cir.int<10> : !s32i loc(#loc50)
          %12 = cir.cast(integral, %11 : !s32i), !u64i loc(#loc50)
          %13 = cir.cmp(lt, %10, %12) : !u64i, !s32i loc(#loc84)
          %14 = cir.cast(int_to_bool, %13 : !s32i), !cir.bool loc(#loc51)
          cir.condition(%14) loc(#loc51)
        } body {
          cir.scope {
            %10 = cir.load %2 : !cir.ptr<!u64i>, !u64i loc(#loc53)
            %11 = cir.cast(array_to_ptrdecay, %1 : !cir.ptr<!cir.array<!s32i x 10>>), !cir.ptr<!s32i> loc(#loc54)
            %12 = cir.ptr_stride(%11 : !cir.ptr<!s32i>, %10 : !u64i), !cir.ptr<!s32i> loc(#loc54)
            %13 = cir.load %12 : !cir.ptr<!s32i>, !s32i loc(#loc54)
            %14 = cir.load %0 : !cir.ptr<!cir.ptr<!s32i>>, !cir.ptr<!s32i> loc(#loc55)
            %15 = cir.load %2 : !cir.ptr<!u64i>, !u64i loc(#loc56)
            %16 = cir.ptr_stride(%14 : !cir.ptr<!s32i>, %15 : !u64i), !cir.ptr<!s32i> loc(#loc57)
            cir.store %13, %16 : !s32i, !cir.ptr<!s32i> loc(#loc86)
          } loc(#loc85)
          cir.yield loc(#loc46)
        } step {
          %10 = cir.load %2 : !cir.ptr<!u64i>, !u64i loc(#loc59)
          %11 = cir.unary(inc, %10) : !u64i, !u64i loc(#loc60)
          cir.store %11, %2 : !u64i, !cir.ptr<!u64i> loc(#loc87)
          cir.yield loc(#loc82)
        } loc(#loc82)
      } loc(#loc82)
      %4 = cir.load %0 : !cir.ptr<!cir.ptr<!s32i>>, !cir.ptr<!s32i> loc(#loc61)
      %5 = cir.const #cir.int<0> : !s32i loc(#loc62)
      %6 = cir.ptr_stride(%4 : !cir.ptr<!s32i>, %5 : !s32i), !cir.ptr<!s32i> loc(#loc63)
      %7 = cir.load %6 : !cir.ptr<!s32i>, !s32i loc(#loc61)
      cir.call @printIntLine(%7) : (!s32i) -> () loc(#loc64)
    } loc(#loc79)
    cir.return loc(#loc35)
  } loc(#loc77)
} loc(#loc)
#loc = loc("/home/ladisgin/git_proj/test_projects/juliet-c/testcases/CWE121_Stack_Based_Buffer_Overflow/s01/CWE121_Stack_Based_Buffer_Overflow__CWE131_loop_65b.c":0:0)
#loc1 = loc("../../../testcasesupport/std_testcase_io.h":18:1)
#loc2 = loc("../../../testcasesupport/std_testcase_io.h":18:33)
#loc3 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE131_loop_65b.c":21:1)
#loc4 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE131_loop_65b.c":33:1)
#loc7 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE131_loop_65b.c":22:1)
#loc8 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE131_loop_65b.c":23:5)
#loc9 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE131_loop_65b.c":32:5)
#loc10 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE131_loop_65b.c":24:9)
#loc11 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE131_loop_65b.c":24:28)
#loc12 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE131_loop_65b.c":25:9)
#loc13 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE131_loop_65b.c":25:16)
#loc14 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE131_loop_65b.c":27:9)
#loc15 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE131_loop_65b.c":30:9)
#loc16 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE131_loop_65b.c":27:18)
#loc17 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE131_loop_65b.c":27:14)
#loc18 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE131_loop_65b.c":27:21)
#loc19 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE131_loop_65b.c":27:25)
#loc20 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE131_loop_65b.c":27:23)
#loc21 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE131_loop_65b.c":28:9)
#loc22 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE131_loop_65b.c":29:30)
#loc23 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE131_loop_65b.c":29:23)
#loc24 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE131_loop_65b.c":29:13)
#loc25 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE131_loop_65b.c":29:18)
#loc26 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE131_loop_65b.c":29:19)
#loc27 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE131_loop_65b.c":29:31)
#loc28 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE131_loop_65b.c":27:30)
#loc29 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE131_loop_65b.c":27:29)
#loc30 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE131_loop_65b.c":31:22)
#loc31 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE131_loop_65b.c":31:27)
#loc32 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE131_loop_65b.c":31:28)
#loc33 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE131_loop_65b.c":31:9)
#loc34 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE131_loop_65b.c":40:1)
#loc35 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE131_loop_65b.c":52:1)
#loc38 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE131_loop_65b.c":41:1)
#loc39 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE131_loop_65b.c":42:5)
#loc40 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE131_loop_65b.c":51:5)
#loc41 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE131_loop_65b.c":43:9)
#loc42 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE131_loop_65b.c":43:28)
#loc43 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE131_loop_65b.c":44:9)
#loc44 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE131_loop_65b.c":44:16)
#loc45 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE131_loop_65b.c":46:9)
#loc46 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE131_loop_65b.c":49:9)
#loc47 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE131_loop_65b.c":46:18)
#loc48 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE131_loop_65b.c":46:14)
#loc49 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE131_loop_65b.c":46:21)
#loc50 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE131_loop_65b.c":46:25)
#loc51 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE131_loop_65b.c":46:23)
#loc52 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE131_loop_65b.c":47:9)
#loc53 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE131_loop_65b.c":48:30)
#loc54 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE131_loop_65b.c":48:23)
#loc55 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE131_loop_65b.c":48:13)
#loc56 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE131_loop_65b.c":48:18)
#loc57 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE131_loop_65b.c":48:19)
#loc58 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE131_loop_65b.c":48:31)
#loc59 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE131_loop_65b.c":46:30)
#loc60 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE131_loop_65b.c":46:29)
#loc61 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE131_loop_65b.c":50:22)
#loc62 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE131_loop_65b.c":50:27)
#loc63 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE131_loop_65b.c":50:28)
#loc64 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE131_loop_65b.c":50:9)
#loc65 = loc(fused[#loc1, #loc2])
#loc66 = loc(fused[#loc3, #loc4])
#loc68 = loc(fused[#loc8, #loc9])
#loc69 = loc(fused[#loc10, #loc11])
#loc70 = loc(fused[#loc12, #loc13])
#loc71 = loc(fused[#loc14, #loc15])
#loc72 = loc(fused[#loc17, #loc16])
#loc73 = loc(fused[#loc18, #loc19])
#loc74 = loc(fused[#loc21, #loc15])
#loc75 = loc(fused[#loc24, #loc27])
#loc76 = loc(fused[#loc29, #loc28])
#loc77 = loc(fused[#loc34, #loc35])
#loc79 = loc(fused[#loc39, #loc40])
#loc80 = loc(fused[#loc41, #loc42])
#loc81 = loc(fused[#loc43, #loc44])
#loc82 = loc(fused[#loc45, #loc46])
#loc83 = loc(fused[#loc48, #loc47])
#loc84 = loc(fused[#loc49, #loc50])
#loc85 = loc(fused[#loc52, #loc46])
#loc86 = loc(fused[#loc55, #loc58])
#loc87 = loc(fused[#loc60, #loc59])
