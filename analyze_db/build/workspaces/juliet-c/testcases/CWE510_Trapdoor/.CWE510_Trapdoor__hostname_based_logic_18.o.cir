!s32i = !cir.int<s, 32>
!s64i = !cir.int<s, 64>
!s8i = !cir.int<s, 8>
!u16i = !cir.int<u, 16>
!u32i = !cir.int<u, 32>
!u64i = !cir.int<u, 64>
!u8i = !cir.int<u, 8>
!void = !cir.void
#fn_attr = #cir<extra({nothrow = #cir.nothrow})>
#fn_attr1 = #cir<extra({inline = #cir.inline<no>, nothrow = #cir.nothrow, optnone = #cir.optnone, uwtable = #cir.uwtable<async>})>
!ty_in_addr = !cir.record<struct "in_addr" {!u32i} #cir.record.decl.ast>
!ty_sockaddr = !cir.record<struct "sockaddr" {!u16i, !cir.array<!s8i x 14>} #cir.record.decl.ast>
!ty_sockaddr_in = !cir.record<struct "sockaddr_in" {!u16i, !u16i, !ty_in_addr, !cir.array<!u8i x 8>}>
module @"/workspaces/juliet-c/testcases/CWE510_Trapdoor/CWE510_Trapdoor__hostname_based_logic_18.c" attributes {cir.lang = #cir.lang<c>, cir.sob = #cir.signed_overflow_behavior<undefined>, cir.triple = "x86_64-unknown-linux-gnu", cir.type_size_info = #cir.type_size_info<char = 8, int = 32, size_t = 64>, cir.uwtable = #cir.uwtable<async>, dlti.dl_spec = #dlti.dl_spec<i128 = dense<128> : vector<2xi64>, f80 = dense<128> : vector<2xi64>, i64 = dense<64> : vector<2xi64>, !llvm.ptr<270> = dense<32> : vector<4xi64>, i1 = dense<8> : vector<2xi64>, !llvm.ptr = dense<64> : vector<4xi64>, i32 = dense<32> : vector<2xi64>, f16 = dense<16> : vector<2xi64>, i16 = dense<16> : vector<2xi64>, i8 = dense<8> : vector<2xi64>, !llvm.ptr<271> = dense<32> : vector<4xi64>, !llvm.ptr<272> = dense<64> : vector<4xi64>, f64 = dense<64> : vector<2xi64>, f128 = dense<128> : vector<2xi64>, "dlti.mangling_mode" = "e", "dlti.stack_alignment" = 128 : i64, "dlti.endianness" = "little">} {
  cir.func private @socket(!s32i, !s32i, !s32i) -> !s32i extra(#fn_attr) loc(#loc286)
  cir.func private @htons(!u16i) -> !u16i extra(#fn_attr) loc(#loc287)
  cir.func private @bind(!s32i, !cir.ptr<!ty_sockaddr>, !u32i) -> !s32i extra(#fn_attr) loc(#loc288)
  cir.func private @listen(!s32i, !s32i) -> !s32i extra(#fn_attr) loc(#loc289)
  cir.func private @accept(!s32i, !cir.ptr<!ty_sockaddr>, !cir.ptr<!u32i>) -> !s32i loc(#loc290)
  cir.func private @getsockname(!s32i, !cir.ptr<!ty_sockaddr>, !cir.ptr<!u32i>) -> !s32i extra(#fn_attr) loc(#loc291)
  cir.func private @getnameinfo(!cir.ptr<!ty_sockaddr>, !u32i, !cir.ptr<!s8i>, !u32i, !cir.ptr<!s8i>, !u32i, !s32i) -> !s32i loc(#loc292)
  cir.func private @strcmp(!cir.ptr<!s8i>, !cir.ptr<!s8i>) -> !s32i extra(#fn_attr) loc(#loc293)
  cir.global "private" constant cir_private dsolocal @".str" = #cir.const_array<"admin.google.com\00" : !cir.array<!s8i x 17>> : !cir.array<!s8i x 17> {alignment = 1 : i64} loc(#loc17)
  cir.func private @send(!s32i, !cir.ptr<!void>, !u64i, !s32i) -> !s64i loc(#loc294)
  cir.global "private" constant cir_private dsolocal @".str.1" = #cir.const_array<"Welcome, admin!\00" : !cir.array<!s8i x 16>> : !cir.array<!s8i x 16> {alignment = 1 : i64} loc(#loc20)
  cir.global "private" constant cir_private dsolocal @".str.2" = #cir.const_array<"Welcome!\00" : !cir.array<!s8i x 9>> : !cir.array<!s8i x 9> {alignment = 1 : i64} loc(#loc21)
  cir.func private @printLine(!cir.ptr<!s8i>) loc(#loc295)
  cir.global "private" constant cir_private dsolocal @".str.3" = #cir.const_array<"Send failed!\00" : !cir.array<!s8i x 13>> : !cir.array<!s8i x 13> {alignment = 1 : i64} loc(#loc24)
  cir.func private @close(!s32i) -> !s32i loc(#loc296)
  cir.func no_proto @CWE510_Trapdoor__hostname_based_logic_18_bad() extra(#fn_attr1) {
    %0 = cir.alloca !ty_sockaddr_in, !cir.ptr<!ty_sockaddr_in>, ["service"] {alignment = 4 : i64} loc(#loc298)
    %1 = cir.alloca !ty_sockaddr_in, !cir.ptr<!ty_sockaddr_in>, ["acceptService"] {alignment = 4 : i64} loc(#loc299)
    %2 = cir.alloca !s32i, !cir.ptr<!s32i>, ["acceptServiceLen", init] {alignment = 4 : i64} loc(#loc300)
    %3 = cir.alloca !s32i, !cir.ptr<!s32i>, ["listenSocket", init] {alignment = 4 : i64} loc(#loc301)
    %4 = cir.alloca !s32i, !cir.ptr<!s32i>, ["acceptSocket", init] {alignment = 4 : i64} loc(#loc302)
    %5 = cir.alloca !cir.array<!s8i x 1025>, !cir.ptr<!cir.array<!s8i x 1025>>, ["hostname"] {alignment = 16 : i64} loc(#loc303)
    %6 = cir.alloca !cir.array<!s8i x 32>, !cir.ptr<!cir.array<!s8i x 32>>, ["servInfo"] {alignment = 16 : i64} loc(#loc304)
    cir.goto "sink" loc(#loc305)
  ^bb1:  // no predecessors
    cir.label "sink" loc(#loc44)
    %7 = cir.const #cir.int<16> : !u64i loc(#loc306)
    %8 = cir.cast(integral, %7 : !u64i), !s32i loc(#loc306)
    cir.store %8, %2 : !s32i, !cir.ptr<!s32i> loc(#loc300)
    %9 = cir.const #cir.int<1> : !s32i loc(#loc35)
    %10 = cir.unary(minus, %9) nsw : !s32i, !s32i loc(#loc35)
    cir.store %10, %3 : !s32i, !cir.ptr<!s32i> loc(#loc301)
    %11 = cir.const #cir.int<1> : !s32i loc(#loc37)
    %12 = cir.unary(minus, %11) nsw : !s32i, !s32i loc(#loc37)
    cir.store %12, %4 : !s32i, !cir.ptr<!s32i> loc(#loc302)
    cir.scope {
      cir.do {
        cir.scope {
          %13 = cir.const #cir.int<2> : !s32i loc(#loc50)
          %14 = cir.const #cir.int<1> : !s32i loc(#loc51)
          %15 = cir.const #cir.int<6> : !s32i loc(#loc52)
          %16 = cir.call @socket(%13, %14, %15) : (!s32i, !s32i, !s32i) -> !s32i extra(#fn_attr) loc(#loc53)
          cir.store %16, %3 : !s32i, !cir.ptr<!s32i> loc(#loc309)
          cir.scope {
            %35 = cir.load %3 : !cir.ptr<!s32i>, !s32i loc(#loc58)
            %36 = cir.const #cir.int<1> : !s32i loc(#loc59)
            %37 = cir.unary(minus, %36) nsw : !s32i, !s32i loc(#loc59)
            %38 = cir.cmp(eq, %35, %37) : !s32i, !cir.bool loc(#loc311)
            cir.if %38 {
              cir.break loc(#loc61)
            } loc(#loc312)
          } loc(#loc310)
          %17 = cir.cast(bitcast, %0 : !cir.ptr<!ty_sockaddr_in>), !cir.ptr<!void> loc(#loc313)
          %18 = cir.const #cir.int<0> : !s32i loc(#loc64)
          %19 = cir.const #cir.int<16> : !u64i loc(#loc314)
          cir.libc.memset %19 bytes from %17 set to %18 : !cir.ptr<!void>, !s32i, !u64i loc(#loc315)
          %20 = cir.const #cir.int<2> : !s32i loc(#loc69)
          %21 = cir.cast(integral, %20 : !s32i), !u16i loc(#loc69)
          %22 = cir.get_member %0[0] {name = "sin_family"} : !cir.ptr<!ty_sockaddr_in> -> !cir.ptr<!u16i> loc(#loc70)
          cir.store %21, %22 : !u16i, !cir.ptr<!u16i> loc(#loc316)
          %23 = cir.const #cir.int<0> : !s32i loc(#loc72)
          %24 = cir.cast(integral, %23 : !s32i), !u32i loc(#loc72)
          %25 = cir.get_member %0[2] {name = "sin_addr"} : !cir.ptr<!ty_sockaddr_in> -> !cir.ptr<!ty_in_addr> loc(#loc73)
          %26 = cir.get_member %25[0] {name = "s_addr"} : !cir.ptr<!ty_in_addr> -> !cir.ptr<!u32i> loc(#loc74)
          cir.store %24, %26 : !u32i, !cir.ptr<!u32i> loc(#loc317)
          %27 = cir.const #cir.int<20000> : !s32i loc(#loc76)
          %28 = cir.cast(integral, %27 : !s32i), !u16i loc(#loc76)
          %29 = cir.call @htons(%28) : (!u16i) -> !u16i side_effect(const) extra(#fn_attr) loc(#loc77)
          %30 = cir.get_member %0[1] {name = "sin_port"} : !cir.ptr<!ty_sockaddr_in> -> !cir.ptr<!u16i> loc(#loc78)
          cir.store %29, %30 : !u16i, !cir.ptr<!u16i> loc(#loc318)
          cir.scope {
            %35 = cir.load %3 : !cir.ptr<!s32i>, !s32i loc(#loc83)
            %36 = cir.cast(bitcast, %0 : !cir.ptr<!ty_sockaddr_in>), !cir.ptr<!ty_sockaddr> loc(#loc320)
            %37 = cir.const #cir.int<16> : !u64i loc(#loc321)
            %38 = cir.cast(integral, %37 : !u64i), !u32i loc(#loc321)
            %39 = cir.call @bind(%35, %36, %38) : (!s32i, !cir.ptr<!ty_sockaddr>, !u32i) -> !s32i extra(#fn_attr) loc(#loc88)
            %40 = cir.const #cir.int<1> : !s32i loc(#loc89)
            %41 = cir.unary(minus, %40) nsw : !s32i, !s32i loc(#loc89)
            %42 = cir.cmp(eq, %39, %41) : !s32i, !cir.bool loc(#loc322)
            cir.if %42 {
              cir.break loc(#loc91)
            } loc(#loc323)
          } loc(#loc319)
          cir.scope {
            %35 = cir.load %3 : !cir.ptr<!s32i>, !s32i loc(#loc94)
            %36 = cir.const #cir.int<5> : !s32i loc(#loc95)
            %37 = cir.call @listen(%35, %36) : (!s32i, !s32i) -> !s32i extra(#fn_attr) loc(#loc96)
            %38 = cir.const #cir.int<1> : !s32i loc(#loc97)
            %39 = cir.unary(minus, %38) nsw : !s32i, !s32i loc(#loc97)
            %40 = cir.cmp(eq, %37, %39) : !s32i, !cir.bool loc(#loc325)
            cir.if %40 {
              cir.break loc(#loc99)
            } loc(#loc326)
          } loc(#loc324)
          %31 = cir.load %3 : !cir.ptr<!s32i>, !s32i loc(#loc100)
          %32 = cir.const #cir.ptr<null> : !cir.ptr<!ty_sockaddr> loc(#loc101)
          %33 = cir.const #cir.ptr<null> : !cir.ptr<!u32i> loc(#loc102)
          %34 = cir.call @accept(%31, %32, %33) : (!s32i, !cir.ptr<!ty_sockaddr>, !cir.ptr<!u32i>) -> !s32i loc(#loc103)
          cir.store %34, %4 : !s32i, !cir.ptr<!s32i> loc(#loc327)
          cir.scope {
            %35 = cir.load %4 : !cir.ptr<!s32i>, !s32i loc(#loc108)
            %36 = cir.const #cir.int<1> : !s32i loc(#loc109)
            %37 = cir.unary(minus, %36) nsw : !s32i, !s32i loc(#loc109)
            %38 = cir.cmp(eq, %35, %37) : !s32i, !cir.bool loc(#loc329)
            cir.if %38 {
              cir.break loc(#loc111)
            } loc(#loc330)
          } loc(#loc328)
          cir.scope {
            %35 = cir.load %4 : !cir.ptr<!s32i>, !s32i loc(#loc114)
            %36 = cir.cast(bitcast, %1 : !cir.ptr<!ty_sockaddr_in>), !cir.ptr<!ty_sockaddr> loc(#loc332)
            %37 = cir.cast(bitcast, %2 : !cir.ptr<!s32i>), !cir.ptr<!u32i> loc(#loc333)
            %38 = cir.call @getsockname(%35, %36, %37) : (!s32i, !cir.ptr<!ty_sockaddr>, !cir.ptr<!u32i>) -> !s32i extra(#fn_attr) loc(#loc119)
            %39 = cir.const #cir.int<1> : !s32i loc(#loc120)
            %40 = cir.unary(minus, %39) nsw : !s32i, !s32i loc(#loc121)
            %41 = cir.cmp(eq, %38, %40) : !s32i, !cir.bool loc(#loc334)
            cir.if %41 {
              cir.break loc(#loc123)
            } loc(#loc335)
          } loc(#loc331)
          cir.scope {
            %35 = cir.cast(bitcast, %1 : !cir.ptr<!ty_sockaddr_in>), !cir.ptr<!ty_sockaddr> loc(#loc337)
            %36 = cir.const #cir.int<16> : !u64i loc(#loc338)
            %37 = cir.cast(integral, %36 : !u64i), !u32i loc(#loc338)
            %38 = cir.cast(array_to_ptrdecay, %5 : !cir.ptr<!cir.array<!s8i x 1025>>), !cir.ptr<!s8i> loc(#loc130)
            %39 = cir.const #cir.int<1025> : !s32i loc(#loc131)
            %40 = cir.cast(integral, %39 : !s32i), !u32i loc(#loc131)
            %41 = cir.cast(array_to_ptrdecay, %6 : !cir.ptr<!cir.array<!s8i x 32>>), !cir.ptr<!s8i> loc(#loc132)
            %42 = cir.const #cir.int<32> : !s32i loc(#loc133)
            %43 = cir.cast(integral, %42 : !s32i), !u32i loc(#loc133)
            %44 = cir.const #cir.int<2> : !s32i loc(#loc134)
            %45 = cir.call @getnameinfo(%35, %37, %38, %40, %41, %43, %44) : (!cir.ptr<!ty_sockaddr>, !u32i, !cir.ptr<!s8i>, !u32i, !cir.ptr<!s8i>, !u32i, !s32i) -> !s32i loc(#loc135)
            %46 = cir.const #cir.int<0> : !s32i loc(#loc136)
            %47 = cir.cmp(ne, %45, %46) : !s32i, !cir.bool loc(#loc339)
            cir.if %47 {
              cir.break loc(#loc138)
            } loc(#loc340)
          } loc(#loc336)
          cir.scope {
            %35 = cir.get_global @strcmp : !cir.ptr<!cir.func<(!cir.ptr<!s8i>, !cir.ptr<!s8i>) -> !s32i>> loc(#loc141)
            %36 = cir.get_global @".str" : !cir.ptr<!cir.array<!s8i x 17>> loc(#loc17)
            %37 = cir.cast(array_to_ptrdecay, %36 : !cir.ptr<!cir.array<!s8i x 17>>), !cir.ptr<!s8i> loc(#loc17)
            %38 = cir.cast(array_to_ptrdecay, %5 : !cir.ptr<!cir.array<!s8i x 1025>>), !cir.ptr<!s8i> loc(#loc142)
            %39 = cir.call @strcmp(%37, %38) : (!cir.ptr<!s8i>, !cir.ptr<!s8i>) -> !s32i side_effect(pure) extra(#fn_attr) loc(#loc141)
            %40 = cir.const #cir.int<0> : !s32i loc(#loc143)
            %41 = cir.cmp(eq, %39, %40) : !s32i, !cir.bool loc(#loc342)
            cir.if %41 {
              cir.scope {
                %42 = cir.load %4 : !cir.ptr<!s32i>, !s32i loc(#loc149)
                %43 = cir.get_global @".str.1" : !cir.ptr<!cir.array<!s8i x 16>> loc(#loc20)
                %44 = cir.cast(array_to_ptrdecay, %43 : !cir.ptr<!cir.array<!s8i x 16>>), !cir.ptr<!s8i> loc(#loc20)
                %45 = cir.cast(bitcast, %44 : !cir.ptr<!s8i>), !cir.ptr<!void> loc(#loc20)
                %46 = cir.const #cir.int<15> : !u64i loc(#loc345)
                %47 = cir.const #cir.int<0> : !s32i loc(#loc152)
                %48 = cir.call @send(%42, %45, %46, %47) : (!s32i, !cir.ptr<!void>, !u64i, !s32i) -> !s64i loc(#loc153)
                %49 = cir.const #cir.int<1> : !s32i loc(#loc154)
                %50 = cir.unary(minus, %49) nsw : !s32i, !s32i loc(#loc154)
                %51 = cir.cast(integral, %50 : !s32i), !s64i loc(#loc154)
                %52 = cir.cmp(eq, %48, %51) : !s64i, !cir.bool loc(#loc346)
                cir.if %52 {
                  cir.break loc(#loc156)
                } loc(#loc347)
              } loc(#loc344)
            } else {
              cir.scope {
                %42 = cir.load %4 : !cir.ptr<!s32i>, !s32i loc(#loc159)
                %43 = cir.get_global @".str.2" : !cir.ptr<!cir.array<!s8i x 9>> loc(#loc21)
                %44 = cir.cast(array_to_ptrdecay, %43 : !cir.ptr<!cir.array<!s8i x 9>>), !cir.ptr<!s8i> loc(#loc21)
                %45 = cir.cast(bitcast, %44 : !cir.ptr<!s8i>), !cir.ptr<!void> loc(#loc21)
                %46 = cir.const #cir.int<8> : !u64i loc(#loc349)
                %47 = cir.const #cir.int<0> : !s32i loc(#loc162)
                %48 = cir.call @send(%42, %45, %46, %47) : (!s32i, !cir.ptr<!void>, !u64i, !s32i) -> !s64i loc(#loc163)
                %49 = cir.const #cir.int<1> : !s32i loc(#loc164)
                %50 = cir.unary(minus, %49) nsw : !s32i, !s32i loc(#loc164)
                %51 = cir.cast(integral, %50 : !s32i), !s64i loc(#loc164)
                %52 = cir.cmp(eq, %48, %51) : !s64i, !cir.bool loc(#loc350)
                cir.if %52 {
                  %53 = cir.get_global @".str.3" : !cir.ptr<!cir.array<!s8i x 13>> loc(#loc24)
                  %54 = cir.cast(array_to_ptrdecay, %53 : !cir.ptr<!cir.array<!s8i x 13>>), !cir.ptr<!s8i> loc(#loc24)
                  cir.call @printLine(%54) : (!cir.ptr<!s8i>) -> () loc(#loc166)
                } loc(#loc351)
              } loc(#loc348)
            } loc(#loc343)
          } loc(#loc341)
        } loc(#loc308)
        cir.yield loc(#loc47)
      } while {
        %13 = cir.const #cir.int<0> : !s32i loc(#loc167)
        %14 = cir.cast(int_to_bool, %13 : !s32i), !cir.bool loc(#loc167)
        cir.condition(%14) loc(#loc167)
      } loc(#loc307)
    } loc(#loc307)
    cir.scope {
      %13 = cir.load %3 : !cir.ptr<!s32i>, !s32i loc(#loc170)
      %14 = cir.const #cir.int<1> : !s32i loc(#loc171)
      %15 = cir.unary(minus, %14) nsw : !s32i, !s32i loc(#loc171)
      %16 = cir.cmp(ne, %13, %15) : !s32i, !cir.bool loc(#loc353)
      cir.if %16 {
        %17 = cir.load %3 : !cir.ptr<!s32i>, !s32i loc(#loc173)
        %18 = cir.call @close(%17) : (!s32i) -> !s32i loc(#loc174)
      } loc(#loc354)
    } loc(#loc352)
    cir.scope {
      %13 = cir.load %4 : !cir.ptr<!s32i>, !s32i loc(#loc177)
      %14 = cir.const #cir.int<1> : !s32i loc(#loc178)
      %15 = cir.unary(minus, %14) nsw : !s32i, !s32i loc(#loc178)
      %16 = cir.cmp(ne, %13, %15) : !s32i, !cir.bool loc(#loc356)
      cir.if %16 {
        %17 = cir.load %4 : !cir.ptr<!s32i>, !s32i loc(#loc180)
        %18 = cir.call @close(%17) : (!s32i) -> !s32i loc(#loc181)
      } loc(#loc357)
    } loc(#loc355)
    cir.return loc(#loc28)
  } loc(#loc297)
  cir.func no_proto @CWE510_Trapdoor__hostname_based_logic_18_good() extra(#fn_attr1) {
    %0 = cir.get_global @good1 : !cir.ptr<!cir.func<()>> loc(#loc359)
    cir.call %0() : (!cir.ptr<!cir.func<()>>) -> () loc(#loc184)
    cir.return loc(#loc183)
  } loc(#loc358)
  cir.func no_proto internal private @good1() extra(#fn_attr1) {
    %0 = cir.alloca !ty_sockaddr_in, !cir.ptr<!ty_sockaddr_in>, ["service"] {alignment = 4 : i64} loc(#loc361)
    %1 = cir.alloca !s32i, !cir.ptr<!s32i>, ["listenSocket", init] {alignment = 4 : i64} loc(#loc362)
    %2 = cir.alloca !s32i, !cir.ptr<!s32i>, ["acceptSocket", init] {alignment = 4 : i64} loc(#loc363)
    cir.goto "sink" loc(#loc364)
  ^bb1:  // no predecessors
    cir.label "sink" loc(#loc196)
    %3 = cir.const #cir.int<1> : !s32i loc(#loc191)
    %4 = cir.unary(minus, %3) nsw : !s32i, !s32i loc(#loc191)
    cir.store %4, %1 : !s32i, !cir.ptr<!s32i> loc(#loc362)
    %5 = cir.const #cir.int<1> : !s32i loc(#loc193)
    %6 = cir.unary(minus, %5) nsw : !s32i, !s32i loc(#loc193)
    cir.store %6, %2 : !s32i, !cir.ptr<!s32i> loc(#loc363)
    cir.scope {
      cir.do {
        cir.scope {
          %7 = cir.const #cir.int<2> : !s32i loc(#loc201)
          %8 = cir.const #cir.int<1> : !s32i loc(#loc202)
          %9 = cir.const #cir.int<6> : !s32i loc(#loc203)
          %10 = cir.call @socket(%7, %8, %9) : (!s32i, !s32i, !s32i) -> !s32i extra(#fn_attr) loc(#loc204)
          cir.store %10, %1 : !s32i, !cir.ptr<!s32i> loc(#loc367)
          cir.scope {
            %29 = cir.load %1 : !cir.ptr<!s32i>, !s32i loc(#loc209)
            %30 = cir.const #cir.int<1> : !s32i loc(#loc210)
            %31 = cir.unary(minus, %30) nsw : !s32i, !s32i loc(#loc210)
            %32 = cir.cmp(eq, %29, %31) : !s32i, !cir.bool loc(#loc369)
            cir.if %32 {
              cir.break loc(#loc212)
            } loc(#loc370)
          } loc(#loc368)
          %11 = cir.cast(bitcast, %0 : !cir.ptr<!ty_sockaddr_in>), !cir.ptr<!void> loc(#loc371)
          %12 = cir.const #cir.int<0> : !s32i loc(#loc215)
          %13 = cir.const #cir.int<16> : !u64i loc(#loc372)
          cir.libc.memset %13 bytes from %11 set to %12 : !cir.ptr<!void>, !s32i, !u64i loc(#loc373)
          %14 = cir.const #cir.int<2> : !s32i loc(#loc220)
          %15 = cir.cast(integral, %14 : !s32i), !u16i loc(#loc220)
          %16 = cir.get_member %0[0] {name = "sin_family"} : !cir.ptr<!ty_sockaddr_in> -> !cir.ptr<!u16i> loc(#loc70)
          cir.store %15, %16 : !u16i, !cir.ptr<!u16i> loc(#loc374)
          %17 = cir.const #cir.int<0> : !s32i loc(#loc222)
          %18 = cir.cast(integral, %17 : !s32i), !u32i loc(#loc222)
          %19 = cir.get_member %0[2] {name = "sin_addr"} : !cir.ptr<!ty_sockaddr_in> -> !cir.ptr<!ty_in_addr> loc(#loc73)
          %20 = cir.get_member %19[0] {name = "s_addr"} : !cir.ptr<!ty_in_addr> -> !cir.ptr<!u32i> loc(#loc74)
          cir.store %18, %20 : !u32i, !cir.ptr<!u32i> loc(#loc375)
          %21 = cir.const #cir.int<20000> : !s32i loc(#loc224)
          %22 = cir.cast(integral, %21 : !s32i), !u16i loc(#loc224)
          %23 = cir.call @htons(%22) : (!u16i) -> !u16i side_effect(const) extra(#fn_attr) loc(#loc225)
          %24 = cir.get_member %0[1] {name = "sin_port"} : !cir.ptr<!ty_sockaddr_in> -> !cir.ptr<!u16i> loc(#loc78)
          cir.store %23, %24 : !u16i, !cir.ptr<!u16i> loc(#loc376)
          cir.scope {
            %29 = cir.load %1 : !cir.ptr<!s32i>, !s32i loc(#loc230)
            %30 = cir.cast(bitcast, %0 : !cir.ptr<!ty_sockaddr_in>), !cir.ptr<!ty_sockaddr> loc(#loc378)
            %31 = cir.const #cir.int<16> : !u64i loc(#loc379)
            %32 = cir.cast(integral, %31 : !u64i), !u32i loc(#loc379)
            %33 = cir.call @bind(%29, %30, %32) : (!s32i, !cir.ptr<!ty_sockaddr>, !u32i) -> !s32i extra(#fn_attr) loc(#loc235)
            %34 = cir.const #cir.int<1> : !s32i loc(#loc236)
            %35 = cir.unary(minus, %34) nsw : !s32i, !s32i loc(#loc236)
            %36 = cir.cmp(eq, %33, %35) : !s32i, !cir.bool loc(#loc380)
            cir.if %36 {
              cir.break loc(#loc238)
            } loc(#loc381)
          } loc(#loc377)
          cir.scope {
            %29 = cir.load %1 : !cir.ptr<!s32i>, !s32i loc(#loc241)
            %30 = cir.const #cir.int<5> : !s32i loc(#loc242)
            %31 = cir.call @listen(%29, %30) : (!s32i, !s32i) -> !s32i extra(#fn_attr) loc(#loc243)
            %32 = cir.const #cir.int<1> : !s32i loc(#loc244)
            %33 = cir.unary(minus, %32) nsw : !s32i, !s32i loc(#loc244)
            %34 = cir.cmp(eq, %31, %33) : !s32i, !cir.bool loc(#loc383)
            cir.if %34 {
              cir.break loc(#loc246)
            } loc(#loc384)
          } loc(#loc382)
          %25 = cir.load %1 : !cir.ptr<!s32i>, !s32i loc(#loc247)
          %26 = cir.const #cir.ptr<null> : !cir.ptr<!ty_sockaddr> loc(#loc248)
          %27 = cir.const #cir.ptr<null> : !cir.ptr<!u32i> loc(#loc249)
          %28 = cir.call @accept(%25, %26, %27) : (!s32i, !cir.ptr<!ty_sockaddr>, !cir.ptr<!u32i>) -> !s32i loc(#loc250)
          cir.store %28, %2 : !s32i, !cir.ptr<!s32i> loc(#loc385)
          cir.scope {
            %29 = cir.load %2 : !cir.ptr<!s32i>, !s32i loc(#loc255)
            %30 = cir.const #cir.int<1> : !s32i loc(#loc256)
            %31 = cir.unary(minus, %30) nsw : !s32i, !s32i loc(#loc256)
            %32 = cir.cmp(eq, %29, %31) : !s32i, !cir.bool loc(#loc387)
            cir.if %32 {
              cir.break loc(#loc258)
            } loc(#loc388)
          } loc(#loc386)
          cir.scope {
            %29 = cir.load %2 : !cir.ptr<!s32i>, !s32i loc(#loc261)
            %30 = cir.get_global @".str.2" : !cir.ptr<!cir.array<!s8i x 9>> loc(#loc262)
            %31 = cir.cast(array_to_ptrdecay, %30 : !cir.ptr<!cir.array<!s8i x 9>>), !cir.ptr<!s8i> loc(#loc262)
            %32 = cir.cast(bitcast, %31 : !cir.ptr<!s8i>), !cir.ptr<!void> loc(#loc262)
            %33 = cir.const #cir.int<8> : !u64i loc(#loc390)
            %34 = cir.const #cir.int<0> : !s32i loc(#loc265)
            %35 = cir.call @send(%29, %32, %33, %34) : (!s32i, !cir.ptr<!void>, !u64i, !s32i) -> !s64i loc(#loc266)
            %36 = cir.const #cir.int<1> : !s32i loc(#loc267)
            %37 = cir.unary(minus, %36) nsw : !s32i, !s32i loc(#loc267)
            %38 = cir.cast(integral, %37 : !s32i), !s64i loc(#loc267)
            %39 = cir.cmp(eq, %35, %38) : !s64i, !cir.bool loc(#loc391)
            cir.if %39 {
              %40 = cir.get_global @".str.3" : !cir.ptr<!cir.array<!s8i x 13>> loc(#loc269)
              %41 = cir.cast(array_to_ptrdecay, %40 : !cir.ptr<!cir.array<!s8i x 13>>), !cir.ptr<!s8i> loc(#loc269)
              cir.call @printLine(%41) : (!cir.ptr<!s8i>) -> () loc(#loc270)
            } loc(#loc392)
          } loc(#loc389)
        } loc(#loc366)
        cir.yield loc(#loc198)
      } while {
        %7 = cir.const #cir.int<0> : !s32i loc(#loc271)
        %8 = cir.cast(int_to_bool, %7 : !s32i), !cir.bool loc(#loc271)
        cir.condition(%8) loc(#loc271)
      } loc(#loc365)
    } loc(#loc365)
    cir.scope {
      %7 = cir.load %1 : !cir.ptr<!s32i>, !s32i loc(#loc274)
      %8 = cir.const #cir.int<1> : !s32i loc(#loc275)
      %9 = cir.unary(minus, %8) nsw : !s32i, !s32i loc(#loc275)
      %10 = cir.cmp(ne, %7, %9) : !s32i, !cir.bool loc(#loc394)
      cir.if %10 {
        %11 = cir.load %1 : !cir.ptr<!s32i>, !s32i loc(#loc277)
        %12 = cir.call @close(%11) : (!s32i) -> !s32i loc(#loc278)
      } loc(#loc395)
    } loc(#loc393)
    cir.scope {
      %7 = cir.load %2 : !cir.ptr<!s32i>, !s32i loc(#loc281)
      %8 = cir.const #cir.int<1> : !s32i loc(#loc282)
      %9 = cir.unary(minus, %8) nsw : !s32i, !s32i loc(#loc282)
      %10 = cir.cmp(ne, %7, %9) : !s32i, !cir.bool loc(#loc397)
      cir.if %10 {
        %11 = cir.load %2 : !cir.ptr<!s32i>, !s32i loc(#loc284)
        %12 = cir.call @close(%11) : (!s32i) -> !s32i loc(#loc285)
      } loc(#loc398)
    } loc(#loc396)
    cir.return loc(#loc187)
  } loc(#loc360)
} loc(#loc)
#loc = loc("/workspaces/juliet-c/testcases/CWE510_Trapdoor/CWE510_Trapdoor__hostname_based_logic_18.c":0:0)
#loc1 = loc("/usr/include/x86_64-linux-gnu/sys/socket.h":102:1)
#loc2 = loc("/usr/include/x86_64-linux-gnu/sys/socket.h":102:62)
#loc3 = loc("/usr/include/netinet/in.h":402:1)
#loc4 = loc("/usr/include/netinet/in.h":403:40)
#loc5 = loc("/usr/include/x86_64-linux-gnu/sys/socket.h":112:1)
#loc6 = loc("/usr/include/x86_64-linux-gnu/sys/socket.h":113:6)
#loc7 = loc("/usr/include/x86_64-linux-gnu/sys/socket.h":296:1)
#loc8 = loc("/usr/include/x86_64-linux-gnu/sys/socket.h":296:39)
#loc9 = loc("/usr/include/x86_64-linux-gnu/sys/socket.h":306:1)
#loc10 = loc("/usr/include/x86_64-linux-gnu/sys/socket.h":307:38)
#loc11 = loc("/usr/include/x86_64-linux-gnu/sys/socket.h":116:1)
#loc12 = loc("/usr/include/x86_64-linux-gnu/sys/socket.h":117:33)
#loc13 = loc("/usr/include/netdb.h":675:1)
#loc14 = loc("/usr/include/netdb.h":678:36)
#loc15 = loc("/usr/include/string.h":156:1)
#loc16 = loc("/usr/include/string.h":157:33)
#loc17 = loc("CWE510_Trapdoor__hostname_based_logic_18.c":105:24)
#loc18 = loc("/usr/include/x86_64-linux-gnu/sys/socket.h":138:1)
#loc19 = loc("/usr/include/x86_64-linux-gnu/sys/socket.h":138:74)
#loc20 = loc("CWE510_Trapdoor__hostname_based_logic_18.c":107:40)
#loc21 = loc("CWE510_Trapdoor__hostname_based_logic_18.c":115:40)
#loc22 = loc("../../testcasesupport/std_testcase_io.h":14:1)
#loc23 = loc("../../testcasesupport/std_testcase_io.h":14:33)
#loc24 = loc("CWE510_Trapdoor__hostname_based_logic_18.c":117:31)
#loc25 = loc("/usr/include/unistd.h":358:1)
#loc26 = loc("/usr/include/unistd.h":358:27)
#loc27 = loc("CWE510_Trapdoor__hostname_based_logic_18.c":47:1)
#loc28 = loc("CWE510_Trapdoor__hostname_based_logic_18.c":137:1)
#loc29 = loc("CWE510_Trapdoor__hostname_based_logic_18.c":56:9)
#loc30 = loc("CWE510_Trapdoor__hostname_based_logic_18.c":56:28)
#loc31 = loc("CWE510_Trapdoor__hostname_based_logic_18.c":56:37)
#loc32 = loc("CWE510_Trapdoor__hostname_based_logic_18.c":57:9)
#loc33 = loc("CWE510_Trapdoor__hostname_based_logic_18.c":57:52)
#loc34 = loc("CWE510_Trapdoor__hostname_based_logic_18.c":58:9)
#loc35 = loc("CWE510_Trapdoor__hostname_based_logic_18.c":58:31)
#loc36 = loc("CWE510_Trapdoor__hostname_based_logic_18.c":59:9)
#loc37 = loc("CWE510_Trapdoor__hostname_based_logic_18.c":59:31)
#loc38 = loc("CWE510_Trapdoor__hostname_based_logic_18.c":60:9)
#loc39 = loc("CWE510_Trapdoor__hostname_based_logic_18.c":60:33)
#loc40 = loc("CWE510_Trapdoor__hostname_based_logic_18.c":61:9)
#loc41 = loc("CWE510_Trapdoor__hostname_based_logic_18.c":61:33)
#loc42 = loc("CWE510_Trapdoor__hostname_based_logic_18.c":49:5)
#loc43 = loc("CWE510_Trapdoor__hostname_based_logic_18.c":49:10)
#loc44 = loc("CWE510_Trapdoor__hostname_based_logic_18.c":50:1)
#loc45 = loc("CWE510_Trapdoor__hostname_based_logic_18.c":57:32)
#loc46 = loc("CWE510_Trapdoor__hostname_based_logic_18.c":62:9)
#loc47 = loc("CWE510_Trapdoor__hostname_based_logic_18.c":121:17)
#loc48 = loc("CWE510_Trapdoor__hostname_based_logic_18.c":63:9)
#loc49 = loc("CWE510_Trapdoor__hostname_based_logic_18.c":120:9)
#loc50 = loc("CWE510_Trapdoor__hostname_based_logic_18.c":71:35)
#loc51 = loc("CWE510_Trapdoor__hostname_based_logic_18.c":71:44)
#loc52 = loc("CWE510_Trapdoor__hostname_based_logic_18.c":71:57)
#loc53 = loc("CWE510_Trapdoor__hostname_based_logic_18.c":71:28)
#loc54 = loc("CWE510_Trapdoor__hostname_based_logic_18.c":71:13)
#loc55 = loc("CWE510_Trapdoor__hostname_based_logic_18.c":71:68)
#loc56 = loc("CWE510_Trapdoor__hostname_based_logic_18.c":72:13)
#loc57 = loc("CWE510_Trapdoor__hostname_based_logic_18.c":75:13)
#loc58 = loc("CWE510_Trapdoor__hostname_based_logic_18.c":72:17)
#loc59 = loc("CWE510_Trapdoor__hostname_based_logic_18.c":72:33)
#loc60 = loc("CWE510_Trapdoor__hostname_based_logic_18.c":73:13)
#loc61 = loc("CWE510_Trapdoor__hostname_based_logic_18.c":74:17)
#loc62 = loc("CWE510_Trapdoor__hostname_based_logic_18.c":76:20)
#loc63 = loc("CWE510_Trapdoor__hostname_based_logic_18.c":76:21)
#loc64 = loc("CWE510_Trapdoor__hostname_based_logic_18.c":76:30)
#loc65 = loc("CWE510_Trapdoor__hostname_based_logic_18.c":76:33)
#loc66 = loc("CWE510_Trapdoor__hostname_based_logic_18.c":76:47)
#loc67 = loc("CWE510_Trapdoor__hostname_based_logic_18.c":76:13)
#loc68 = loc("CWE510_Trapdoor__hostname_based_logic_18.c":76:48)
#loc69 = loc("CWE510_Trapdoor__hostname_based_logic_18.c":77:34)
#loc70 = loc("/usr/include/netinet/in.h":249:5)
#loc71 = loc("CWE510_Trapdoor__hostname_based_logic_18.c":77:13)
#loc72 = loc("CWE510_Trapdoor__hostname_based_logic_18.c":78:39)
#loc73 = loc("/usr/include/netinet/in.h":251:20)
#loc74 = loc("/usr/include/netinet/in.h":33:15)
#loc75 = loc("CWE510_Trapdoor__hostname_based_logic_18.c":78:13)
#loc76 = loc("CWE510_Trapdoor__hostname_based_logic_18.c":79:38)
#loc77 = loc("CWE510_Trapdoor__hostname_based_logic_18.c":79:32)
#loc78 = loc("/usr/include/netinet/in.h":250:15)
#loc79 = loc("CWE510_Trapdoor__hostname_based_logic_18.c":79:13)
#loc80 = loc("CWE510_Trapdoor__hostname_based_logic_18.c":79:43)
#loc81 = loc("CWE510_Trapdoor__hostname_based_logic_18.c":80:13)
#loc82 = loc("CWE510_Trapdoor__hostname_based_logic_18.c":83:13)
#loc83 = loc("CWE510_Trapdoor__hostname_based_logic_18.c":80:22)
#loc84 = loc("CWE510_Trapdoor__hostname_based_logic_18.c":80:54)
#loc85 = loc("CWE510_Trapdoor__hostname_based_logic_18.c":80:55)
#loc86 = loc("CWE510_Trapdoor__hostname_based_logic_18.c":80:64)
#loc87 = loc("CWE510_Trapdoor__hostname_based_logic_18.c":80:78)
#loc88 = loc("CWE510_Trapdoor__hostname_based_logic_18.c":80:17)
#loc89 = loc("CWE510_Trapdoor__hostname_based_logic_18.c":80:84)
#loc90 = loc("CWE510_Trapdoor__hostname_based_logic_18.c":81:13)
#loc91 = loc("CWE510_Trapdoor__hostname_based_logic_18.c":82:17)
#loc92 = loc("CWE510_Trapdoor__hostname_based_logic_18.c":84:13)
#loc93 = loc("CWE510_Trapdoor__hostname_based_logic_18.c":87:13)
#loc94 = loc("CWE510_Trapdoor__hostname_based_logic_18.c":84:24)
#loc95 = loc("CWE510_Trapdoor__hostname_based_logic_18.c":84:38)
#loc96 = loc("CWE510_Trapdoor__hostname_based_logic_18.c":84:17)
#loc97 = loc("CWE510_Trapdoor__hostname_based_logic_18.c":84:44)
#loc98 = loc("CWE510_Trapdoor__hostname_based_logic_18.c":85:13)
#loc99 = loc("CWE510_Trapdoor__hostname_based_logic_18.c":86:17)
#loc100 = loc("CWE510_Trapdoor__hostname_based_logic_18.c":88:35)
#loc101 = loc("CWE510_Trapdoor__hostname_based_logic_18.c":88:49)
#loc102 = loc("CWE510_Trapdoor__hostname_based_logic_18.c":88:55)
#loc103 = loc("CWE510_Trapdoor__hostname_based_logic_18.c":88:28)
#loc104 = loc("CWE510_Trapdoor__hostname_based_logic_18.c":88:13)
#loc105 = loc("CWE510_Trapdoor__hostname_based_logic_18.c":88:59)
#loc106 = loc("CWE510_Trapdoor__hostname_based_logic_18.c":89:13)
#loc107 = loc("CWE510_Trapdoor__hostname_based_logic_18.c":92:13)
#loc108 = loc("CWE510_Trapdoor__hostname_based_logic_18.c":89:17)
#loc109 = loc("CWE510_Trapdoor__hostname_based_logic_18.c":89:33)
#loc110 = loc("CWE510_Trapdoor__hostname_based_logic_18.c":90:13)
#loc111 = loc("CWE510_Trapdoor__hostname_based_logic_18.c":91:17)
#loc112 = loc("CWE510_Trapdoor__hostname_based_logic_18.c":93:13)
#loc113 = loc("CWE510_Trapdoor__hostname_based_logic_18.c":96:13)
#loc114 = loc("CWE510_Trapdoor__hostname_based_logic_18.c":93:29)
#loc115 = loc("CWE510_Trapdoor__hostname_based_logic_18.c":93:62)
#loc116 = loc("CWE510_Trapdoor__hostname_based_logic_18.c":93:63)
#loc117 = loc("CWE510_Trapdoor__hostname_based_logic_18.c":93:78)
#loc118 = loc("CWE510_Trapdoor__hostname_based_logic_18.c":93:79)
#loc119 = loc("CWE510_Trapdoor__hostname_based_logic_18.c":93:17)
#loc120 = loc("CWE510_Trapdoor__hostname_based_logic_18.c":93:101)
#loc121 = loc("CWE510_Trapdoor__hostname_based_logic_18.c":93:100)
#loc122 = loc("CWE510_Trapdoor__hostname_based_logic_18.c":94:13)
#loc123 = loc("CWE510_Trapdoor__hostname_based_logic_18.c":95:17)
#loc124 = loc("CWE510_Trapdoor__hostname_based_logic_18.c":97:13)
#loc125 = loc("CWE510_Trapdoor__hostname_based_logic_18.c":103:13)
#loc126 = loc("CWE510_Trapdoor__hostname_based_logic_18.c":97:48)
#loc127 = loc("CWE510_Trapdoor__hostname_based_logic_18.c":97:49)
#loc128 = loc("CWE510_Trapdoor__hostname_based_logic_18.c":98:29)
#loc129 = loc("CWE510_Trapdoor__hostname_based_logic_18.c":98:51)
#loc130 = loc("CWE510_Trapdoor__hostname_based_logic_18.c":99:29)
#loc131 = loc("CWE510_Trapdoor__hostname_based_logic_18.c":100:29)
#loc132 = loc("CWE510_Trapdoor__hostname_based_logic_18.c":100:41)
#loc133 = loc("CWE510_Trapdoor__hostname_based_logic_18.c":100:51)
#loc134 = loc("CWE510_Trapdoor__hostname_based_logic_18.c":100:63)
#loc135 = loc("CWE510_Trapdoor__hostname_based_logic_18.c":97:17)
#loc136 = loc("CWE510_Trapdoor__hostname_based_logic_18.c":100:82)
#loc137 = loc("CWE510_Trapdoor__hostname_based_logic_18.c":101:13)
#loc138 = loc("CWE510_Trapdoor__hostname_based_logic_18.c":102:17)
#loc139 = loc("CWE510_Trapdoor__hostname_based_logic_18.c":105:13)
#loc140 = loc("CWE510_Trapdoor__hostname_based_logic_18.c":119:13)
#loc141 = loc("CWE510_Trapdoor__hostname_based_logic_18.c":105:17)
#loc142 = loc("CWE510_Trapdoor__hostname_based_logic_18.c":105:44)
#loc143 = loc("CWE510_Trapdoor__hostname_based_logic_18.c":105:57)
#loc144 = loc("CWE510_Trapdoor__hostname_based_logic_18.c":106:13)
#loc145 = loc("CWE510_Trapdoor__hostname_based_logic_18.c":112:13)
#loc146 = loc("CWE510_Trapdoor__hostname_based_logic_18.c":114:13)
#loc147 = loc("CWE510_Trapdoor__hostname_based_logic_18.c":107:17)
#loc148 = loc("CWE510_Trapdoor__hostname_based_logic_18.c":111:17)
#loc149 = loc("CWE510_Trapdoor__hostname_based_logic_18.c":107:26)
#loc150 = loc("CWE510_Trapdoor__hostname_based_logic_18.c":107:55)
#loc151 = loc("CWE510_Trapdoor__hostname_based_logic_18.c":107:75)
#loc152 = loc("CWE510_Trapdoor__hostname_based_logic_18.c":107:78)
#loc153 = loc("CWE510_Trapdoor__hostname_based_logic_18.c":107:21)
#loc154 = loc("CWE510_Trapdoor__hostname_based_logic_18.c":107:85)
#loc155 = loc("CWE510_Trapdoor__hostname_based_logic_18.c":108:17)
#loc156 = loc("CWE510_Trapdoor__hostname_based_logic_18.c":110:21)
#loc157 = loc("CWE510_Trapdoor__hostname_based_logic_18.c":115:17)
#loc158 = loc("CWE510_Trapdoor__hostname_based_logic_18.c":118:17)
#loc159 = loc("CWE510_Trapdoor__hostname_based_logic_18.c":115:26)
#loc160 = loc("CWE510_Trapdoor__hostname_based_logic_18.c":115:57)
#loc161 = loc("CWE510_Trapdoor__hostname_based_logic_18.c":115:79)
#loc162 = loc("CWE510_Trapdoor__hostname_based_logic_18.c":115:82)
#loc163 = loc("CWE510_Trapdoor__hostname_based_logic_18.c":115:21)
#loc164 = loc("CWE510_Trapdoor__hostname_based_logic_18.c":115:88)
#loc165 = loc("CWE510_Trapdoor__hostname_based_logic_18.c":116:17)
#loc166 = loc("CWE510_Trapdoor__hostname_based_logic_18.c":117:21)
#loc167 = loc("CWE510_Trapdoor__hostname_based_logic_18.c":121:16)
#loc168 = loc("CWE510_Trapdoor__hostname_based_logic_18.c":122:9)
#loc169 = loc("CWE510_Trapdoor__hostname_based_logic_18.c":125:9)
#loc170 = loc("CWE510_Trapdoor__hostname_based_logic_18.c":122:13)
#loc171 = loc("CWE510_Trapdoor__hostname_based_logic_18.c":122:29)
#loc172 = loc("CWE510_Trapdoor__hostname_based_logic_18.c":123:9)
#loc173 = loc("CWE510_Trapdoor__hostname_based_logic_18.c":124:26)
#loc174 = loc("CWE510_Trapdoor__hostname_based_logic_18.c":124:13)
#loc175 = loc("CWE510_Trapdoor__hostname_based_logic_18.c":126:9)
#loc176 = loc("CWE510_Trapdoor__hostname_based_logic_18.c":129:9)
#loc177 = loc("CWE510_Trapdoor__hostname_based_logic_18.c":126:13)
#loc178 = loc("CWE510_Trapdoor__hostname_based_logic_18.c":126:29)
#loc179 = loc("CWE510_Trapdoor__hostname_based_logic_18.c":127:9)
#loc180 = loc("CWE510_Trapdoor__hostname_based_logic_18.c":128:26)
#loc181 = loc("CWE510_Trapdoor__hostname_based_logic_18.c":128:13)
#loc182 = loc("CWE510_Trapdoor__hostname_based_logic_18.c":211:1)
#loc183 = loc("CWE510_Trapdoor__hostname_based_logic_18.c":214:1)
#loc184 = loc("CWE510_Trapdoor__hostname_based_logic_18.c":213:5)
#loc185 = loc("CWE510_Trapdoor__hostname_based_logic_18.c":213:11)
#loc186 = loc("CWE510_Trapdoor__hostname_based_logic_18.c":144:1)
#loc187 = loc("CWE510_Trapdoor__hostname_based_logic_18.c":209:1)
#loc188 = loc("CWE510_Trapdoor__hostname_based_logic_18.c":153:9)
#loc189 = loc("CWE510_Trapdoor__hostname_based_logic_18.c":153:28)
#loc190 = loc("CWE510_Trapdoor__hostname_based_logic_18.c":154:9)
#loc191 = loc("CWE510_Trapdoor__hostname_based_logic_18.c":154:31)
#loc192 = loc("CWE510_Trapdoor__hostname_based_logic_18.c":155:9)
#loc193 = loc("CWE510_Trapdoor__hostname_based_logic_18.c":155:31)
#loc194 = loc("CWE510_Trapdoor__hostname_based_logic_18.c":146:5)
#loc195 = loc("CWE510_Trapdoor__hostname_based_logic_18.c":146:10)
#loc196 = loc("CWE510_Trapdoor__hostname_based_logic_18.c":147:1)
#loc197 = loc("CWE510_Trapdoor__hostname_based_logic_18.c":156:9)
#loc198 = loc("CWE510_Trapdoor__hostname_based_logic_18.c":193:17)
#loc199 = loc("CWE510_Trapdoor__hostname_based_logic_18.c":157:9)
#loc200 = loc("CWE510_Trapdoor__hostname_based_logic_18.c":192:9)
#loc201 = loc("CWE510_Trapdoor__hostname_based_logic_18.c":165:35)
#loc202 = loc("CWE510_Trapdoor__hostname_based_logic_18.c":165:44)
#loc203 = loc("CWE510_Trapdoor__hostname_based_logic_18.c":165:57)
#loc204 = loc("CWE510_Trapdoor__hostname_based_logic_18.c":165:28)
#loc205 = loc("CWE510_Trapdoor__hostname_based_logic_18.c":165:13)
#loc206 = loc("CWE510_Trapdoor__hostname_based_logic_18.c":165:68)
#loc207 = loc("CWE510_Trapdoor__hostname_based_logic_18.c":166:13)
#loc208 = loc("CWE510_Trapdoor__hostname_based_logic_18.c":169:13)
#loc209 = loc("CWE510_Trapdoor__hostname_based_logic_18.c":166:17)
#loc210 = loc("CWE510_Trapdoor__hostname_based_logic_18.c":166:33)
#loc211 = loc("CWE510_Trapdoor__hostname_based_logic_18.c":167:13)
#loc212 = loc("CWE510_Trapdoor__hostname_based_logic_18.c":168:17)
#loc213 = loc("CWE510_Trapdoor__hostname_based_logic_18.c":170:20)
#loc214 = loc("CWE510_Trapdoor__hostname_based_logic_18.c":170:21)
#loc215 = loc("CWE510_Trapdoor__hostname_based_logic_18.c":170:30)
#loc216 = loc("CWE510_Trapdoor__hostname_based_logic_18.c":170:33)
#loc217 = loc("CWE510_Trapdoor__hostname_based_logic_18.c":170:47)
#loc218 = loc("CWE510_Trapdoor__hostname_based_logic_18.c":170:13)
#loc219 = loc("CWE510_Trapdoor__hostname_based_logic_18.c":170:48)
#loc220 = loc("CWE510_Trapdoor__hostname_based_logic_18.c":171:34)
#loc221 = loc("CWE510_Trapdoor__hostname_based_logic_18.c":171:13)
#loc222 = loc("CWE510_Trapdoor__hostname_based_logic_18.c":172:39)
#loc223 = loc("CWE510_Trapdoor__hostname_based_logic_18.c":172:13)
#loc224 = loc("CWE510_Trapdoor__hostname_based_logic_18.c":173:38)
#loc225 = loc("CWE510_Trapdoor__hostname_based_logic_18.c":173:32)
#loc226 = loc("CWE510_Trapdoor__hostname_based_logic_18.c":173:13)
#loc227 = loc("CWE510_Trapdoor__hostname_based_logic_18.c":173:43)
#loc228 = loc("CWE510_Trapdoor__hostname_based_logic_18.c":174:13)
#loc229 = loc("CWE510_Trapdoor__hostname_based_logic_18.c":177:13)
#loc230 = loc("CWE510_Trapdoor__hostname_based_logic_18.c":174:22)
#loc231 = loc("CWE510_Trapdoor__hostname_based_logic_18.c":174:54)
#loc232 = loc("CWE510_Trapdoor__hostname_based_logic_18.c":174:55)
#loc233 = loc("CWE510_Trapdoor__hostname_based_logic_18.c":174:64)
#loc234 = loc("CWE510_Trapdoor__hostname_based_logic_18.c":174:78)
#loc235 = loc("CWE510_Trapdoor__hostname_based_logic_18.c":174:17)
#loc236 = loc("CWE510_Trapdoor__hostname_based_logic_18.c":174:84)
#loc237 = loc("CWE510_Trapdoor__hostname_based_logic_18.c":175:13)
#loc238 = loc("CWE510_Trapdoor__hostname_based_logic_18.c":176:17)
#loc239 = loc("CWE510_Trapdoor__hostname_based_logic_18.c":178:13)
#loc240 = loc("CWE510_Trapdoor__hostname_based_logic_18.c":181:13)
#loc241 = loc("CWE510_Trapdoor__hostname_based_logic_18.c":178:24)
#loc242 = loc("CWE510_Trapdoor__hostname_based_logic_18.c":178:38)
#loc243 = loc("CWE510_Trapdoor__hostname_based_logic_18.c":178:17)
#loc244 = loc("CWE510_Trapdoor__hostname_based_logic_18.c":178:44)
#loc245 = loc("CWE510_Trapdoor__hostname_based_logic_18.c":179:13)
#loc246 = loc("CWE510_Trapdoor__hostname_based_logic_18.c":180:17)
#loc247 = loc("CWE510_Trapdoor__hostname_based_logic_18.c":182:35)
#loc248 = loc("CWE510_Trapdoor__hostname_based_logic_18.c":182:49)
#loc249 = loc("CWE510_Trapdoor__hostname_based_logic_18.c":182:55)
#loc250 = loc("CWE510_Trapdoor__hostname_based_logic_18.c":182:28)
#loc251 = loc("CWE510_Trapdoor__hostname_based_logic_18.c":182:13)
#loc252 = loc("CWE510_Trapdoor__hostname_based_logic_18.c":182:59)
#loc253 = loc("CWE510_Trapdoor__hostname_based_logic_18.c":183:13)
#loc254 = loc("CWE510_Trapdoor__hostname_based_logic_18.c":186:13)
#loc255 = loc("CWE510_Trapdoor__hostname_based_logic_18.c":183:17)
#loc256 = loc("CWE510_Trapdoor__hostname_based_logic_18.c":183:33)
#loc257 = loc("CWE510_Trapdoor__hostname_based_logic_18.c":184:13)
#loc258 = loc("CWE510_Trapdoor__hostname_based_logic_18.c":185:17)
#loc259 = loc("CWE510_Trapdoor__hostname_based_logic_18.c":188:13)
#loc260 = loc("CWE510_Trapdoor__hostname_based_logic_18.c":191:13)
#loc261 = loc("CWE510_Trapdoor__hostname_based_logic_18.c":188:22)
#loc262 = loc("CWE510_Trapdoor__hostname_based_logic_18.c":188:36)
#loc263 = loc("CWE510_Trapdoor__hostname_based_logic_18.c":188:53)
#loc264 = loc("CWE510_Trapdoor__hostname_based_logic_18.c":188:75)
#loc265 = loc("CWE510_Trapdoor__hostname_based_logic_18.c":188:78)
#loc266 = loc("CWE510_Trapdoor__hostname_based_logic_18.c":188:17)
#loc267 = loc("CWE510_Trapdoor__hostname_based_logic_18.c":188:84)
#loc268 = loc("CWE510_Trapdoor__hostname_based_logic_18.c":189:13)
#loc269 = loc("CWE510_Trapdoor__hostname_based_logic_18.c":190:27)
#loc270 = loc("CWE510_Trapdoor__hostname_based_logic_18.c":190:17)
#loc271 = loc("CWE510_Trapdoor__hostname_based_logic_18.c":193:16)
#loc272 = loc("CWE510_Trapdoor__hostname_based_logic_18.c":194:9)
#loc273 = loc("CWE510_Trapdoor__hostname_based_logic_18.c":197:9)
#loc274 = loc("CWE510_Trapdoor__hostname_based_logic_18.c":194:13)
#loc275 = loc("CWE510_Trapdoor__hostname_based_logic_18.c":194:29)
#loc276 = loc("CWE510_Trapdoor__hostname_based_logic_18.c":195:9)
#loc277 = loc("CWE510_Trapdoor__hostname_based_logic_18.c":196:26)
#loc278 = loc("CWE510_Trapdoor__hostname_based_logic_18.c":196:13)
#loc279 = loc("CWE510_Trapdoor__hostname_based_logic_18.c":198:9)
#loc280 = loc("CWE510_Trapdoor__hostname_based_logic_18.c":201:9)
#loc281 = loc("CWE510_Trapdoor__hostname_based_logic_18.c":198:13)
#loc282 = loc("CWE510_Trapdoor__hostname_based_logic_18.c":198:29)
#loc283 = loc("CWE510_Trapdoor__hostname_based_logic_18.c":199:9)
#loc284 = loc("CWE510_Trapdoor__hostname_based_logic_18.c":200:26)
#loc285 = loc("CWE510_Trapdoor__hostname_based_logic_18.c":200:13)
#loc286 = loc(fused[#loc1, #loc2])
#loc287 = loc(fused[#loc3, #loc4])
#loc288 = loc(fused[#loc5, #loc6])
#loc289 = loc(fused[#loc7, #loc8])
#loc290 = loc(fused[#loc9, #loc10])
#loc291 = loc(fused[#loc11, #loc12])
#loc292 = loc(fused[#loc13, #loc14])
#loc293 = loc(fused[#loc15, #loc16])
#loc294 = loc(fused[#loc18, #loc19])
#loc295 = loc(fused[#loc22, #loc23])
#loc296 = loc(fused[#loc25, #loc26])
#loc297 = loc(fused[#loc27, #loc28])
#loc298 = loc(fused[#loc29, #loc30])
#loc299 = loc(fused[#loc29, #loc31])
#loc300 = loc(fused[#loc32, #loc33])
#loc301 = loc(fused[#loc34, #loc35])
#loc302 = loc(fused[#loc36, #loc37])
#loc303 = loc(fused[#loc38, #loc39])
#loc304 = loc(fused[#loc40, #loc41])
#loc305 = loc(fused[#loc42, #loc43])
#loc306 = loc(fused[#loc45, #loc33])
#loc307 = loc(fused[#loc46, #loc47])
#loc308 = loc(fused[#loc48, #loc49])
#loc309 = loc(fused[#loc54, #loc55])
#loc310 = loc(fused[#loc56, #loc57])
#loc311 = loc(fused[#loc58, #loc59])
#loc312 = loc(fused[#loc60, #loc57])
#loc313 = loc(fused[#loc62, #loc63])
#loc314 = loc(fused[#loc65, #loc66])
#loc315 = loc(fused[#loc67, #loc68])
#loc316 = loc(fused[#loc71, #loc69])
#loc317 = loc(fused[#loc75, #loc72])
#loc318 = loc(fused[#loc79, #loc80])
#loc319 = loc(fused[#loc81, #loc82])
#loc320 = loc(fused[#loc84, #loc85])
#loc321 = loc(fused[#loc86, #loc87])
#loc322 = loc(fused[#loc88, #loc89])
#loc323 = loc(fused[#loc90, #loc82])
#loc324 = loc(fused[#loc92, #loc93])
#loc325 = loc(fused[#loc96, #loc97])
#loc326 = loc(fused[#loc98, #loc93])
#loc327 = loc(fused[#loc104, #loc105])
#loc328 = loc(fused[#loc106, #loc107])
#loc329 = loc(fused[#loc108, #loc109])
#loc330 = loc(fused[#loc110, #loc107])
#loc331 = loc(fused[#loc112, #loc113])
#loc332 = loc(fused[#loc115, #loc116])
#loc333 = loc(fused[#loc117, #loc118])
#loc334 = loc(fused[#loc119, #loc120])
#loc335 = loc(fused[#loc122, #loc113])
#loc336 = loc(fused[#loc124, #loc125])
#loc337 = loc(fused[#loc126, #loc127])
#loc338 = loc(fused[#loc128, #loc129])
#loc339 = loc(fused[#loc135, #loc136])
#loc340 = loc(fused[#loc137, #loc125])
#loc341 = loc(fused[#loc139, #loc140])
#loc342 = loc(fused[#loc141, #loc143])
#loc343 = loc(fused[#loc144, #loc145, #loc146, #loc140])
#loc344 = loc(fused[#loc147, #loc148])
#loc345 = loc(fused[#loc150, #loc151])
#loc346 = loc(fused[#loc153, #loc154])
#loc347 = loc(fused[#loc155, #loc148])
#loc348 = loc(fused[#loc157, #loc158])
#loc349 = loc(fused[#loc160, #loc161])
#loc350 = loc(fused[#loc163, #loc164])
#loc351 = loc(fused[#loc165, #loc158])
#loc352 = loc(fused[#loc168, #loc169])
#loc353 = loc(fused[#loc170, #loc171])
#loc354 = loc(fused[#loc172, #loc169])
#loc355 = loc(fused[#loc175, #loc176])
#loc356 = loc(fused[#loc177, #loc178])
#loc357 = loc(fused[#loc179, #loc176])
#loc358 = loc(fused[#loc182, #loc183])
#loc359 = loc(fused[#loc184, #loc185])
#loc360 = loc(fused[#loc186, #loc187])
#loc361 = loc(fused[#loc188, #loc189])
#loc362 = loc(fused[#loc190, #loc191])
#loc363 = loc(fused[#loc192, #loc193])
#loc364 = loc(fused[#loc194, #loc195])
#loc365 = loc(fused[#loc197, #loc198])
#loc366 = loc(fused[#loc199, #loc200])
#loc367 = loc(fused[#loc205, #loc206])
#loc368 = loc(fused[#loc207, #loc208])
#loc369 = loc(fused[#loc209, #loc210])
#loc370 = loc(fused[#loc211, #loc208])
#loc371 = loc(fused[#loc213, #loc214])
#loc372 = loc(fused[#loc216, #loc217])
#loc373 = loc(fused[#loc218, #loc219])
#loc374 = loc(fused[#loc221, #loc220])
#loc375 = loc(fused[#loc223, #loc222])
#loc376 = loc(fused[#loc226, #loc227])
#loc377 = loc(fused[#loc228, #loc229])
#loc378 = loc(fused[#loc231, #loc232])
#loc379 = loc(fused[#loc233, #loc234])
#loc380 = loc(fused[#loc235, #loc236])
#loc381 = loc(fused[#loc237, #loc229])
#loc382 = loc(fused[#loc239, #loc240])
#loc383 = loc(fused[#loc243, #loc244])
#loc384 = loc(fused[#loc245, #loc240])
#loc385 = loc(fused[#loc251, #loc252])
#loc386 = loc(fused[#loc253, #loc254])
#loc387 = loc(fused[#loc255, #loc256])
#loc388 = loc(fused[#loc257, #loc254])
#loc389 = loc(fused[#loc259, #loc260])
#loc390 = loc(fused[#loc263, #loc264])
#loc391 = loc(fused[#loc266, #loc267])
#loc392 = loc(fused[#loc268, #loc260])
#loc393 = loc(fused[#loc272, #loc273])
#loc394 = loc(fused[#loc274, #loc275])
#loc395 = loc(fused[#loc276, #loc273])
#loc396 = loc(fused[#loc279, #loc280])
#loc397 = loc(fused[#loc281, #loc282])
#loc398 = loc(fused[#loc283, #loc280])
