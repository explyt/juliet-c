!s32i = !cir.int<s, 32>
!s8i = !cir.int<s, 8>
!u32i = !cir.int<u, 32>
!u64i = !cir.int<u, 64>
!void = !cir.void
#fn_attr = #cir<extra({nothrow = #cir.nothrow})>
#fn_attr1 = #cir<extra({inline = #cir.inline<no>, nothrow = #cir.nothrow, optnone = #cir.optnone})>
module @"/home/ladisgin/git_proj/juliet-c/testcases/CWE617_Reachable_Assertion/CWE617_Reachable_Assertion__zero_17.c" attributes {cir.lang = #cir.lang<c>, cir.sob = #cir.signed_overflow_behavior<undefined>, cir.triple = "x86_64-unknown-linux-gnu", dlti.dl_spec = #dlti.dl_spec<!llvm.ptr = dense<64> : vector<4xi64>, i1 = dense<8> : vector<2xi64>, f80 = dense<128> : vector<2xi64>, i32 = dense<32> : vector<2xi64>, i16 = dense<16> : vector<2xi64>, i8 = dense<8> : vector<2xi64>, !llvm.ptr<270> = dense<32> : vector<4xi64>, f128 = dense<128> : vector<2xi64>, !llvm.ptr<271> = dense<32> : vector<4xi64>, f16 = dense<16> : vector<2xi64>, f64 = dense<64> : vector<2xi64>, i128 = dense<128> : vector<2xi64>, !llvm.ptr<272> = dense<64> : vector<4xi64>, i64 = dense<64> : vector<2xi64>, "dlti.stack_alignment" = 128 : i64, "dlti.endianness" = "little">} {
  cir.func private @__assert_fail(!cir.ptr<!s8i>, !cir.ptr<!s8i>, !u32i, !cir.ptr<!s8i>) extra(#fn_attr) loc(#loc37)
  cir.global "private" constant cir_private dsolocal @".str" = #cir.const_array<"0\00" : !cir.array<!s8i x 2>> : !cir.array<!s8i x 2> {alignment = 1 : i64} loc(#loc3)
  cir.global "private" constant cir_private dsolocal @".str.1" = #cir.const_array<"CWE617_Reachable_Assertion__zero_17.c\00" : !cir.array<!s8i x 38>> : !cir.array<!s8i x 38> {alignment = 1 : i64} loc(#loc3)
  cir.global "private" constant cir_private dsolocal @".str.2" = #cir.const_array<"void CWE617_Reachable_Assertion__zero_17_bad()\00" : !cir.array<!s8i x 47>> : !cir.array<!s8i x 47> {alignment = 1 : i64} loc(#loc3)
  cir.func no_proto @CWE617_Reachable_Assertion__zero_17_bad() extra(#fn_attr1) {
    %0 = cir.alloca !s32i, !cir.ptr<!s32i>, ["j"] {alignment = 4 : i64} loc(#loc39)
    cir.br ^bb1 loc(#loc40)
  ^bb1:  // pred: ^bb0
    %1 = cir.const #cir.int<0> : !s32i loc(#loc10)
    cir.store %1, %0 : !s32i, !cir.ptr<!s32i> loc(#loc41)
    cir.br ^bb2 loc(#loc40)
  ^bb2:  // 2 preds: ^bb1, ^bb13
    %2 = cir.load %0 : !cir.ptr<!s32i>, !s32i loc(#loc12)
    %3 = cir.const #cir.int<1> : !s32i loc(#loc13)
    %4 = cir.cmp(lt, %2, %3) : !s32i, !cir.bool loc(#loc42)
    cir.brcond %4 ^bb3, ^bb14 loc(#loc14)
  ^bb3:  // pred: ^bb2
    cir.br ^bb4 loc(#loc43)
  ^bb4:  // pred: ^bb3
    %5 = cir.const #cir.int<4> : !u64i loc(#loc3)
    cir.br ^bb5 loc(#loc3)
  ^bb5:  // pred: ^bb4
    cir.br ^bb6 loc(#loc3)
  ^bb6:  // pred: ^bb5
    %6 = cir.const #cir.int<0> : !s32i loc(#loc3)
    %7 = cir.cast(int_to_bool, %6 : !s32i), !cir.bool loc(#loc3)
    cir.brcond %7 ^bb7, ^bb8 loc(#loc3)
  ^bb7:  // pred: ^bb6
    cir.br ^bb9 loc(#loc3)
  ^bb8:  // pred: ^bb6
    %8 = cir.get_global @".str" : !cir.ptr<!cir.array<!s8i x 2>> loc(#loc3)
    %9 = cir.cast(array_to_ptrdecay, %8 : !cir.ptr<!cir.array<!s8i x 2>>), !cir.ptr<!s8i> loc(#loc3)
    %10 = cir.get_global @".str.1" : !cir.ptr<!cir.array<!s8i x 38>> loc(#loc3)
    %11 = cir.cast(array_to_ptrdecay, %10 : !cir.ptr<!cir.array<!s8i x 38>>), !cir.ptr<!s8i> loc(#loc3)
    %12 = cir.const #cir.int<28> : !s32i loc(#loc3)
    %13 = cir.cast(integral, %12 : !s32i), !u32i loc(#loc3)
    %14 = cir.get_global @".str.2" : !cir.ptr<!cir.array<!s8i x 47>> loc(#loc3)
    %15 = cir.cast(array_to_ptrdecay, %14 : !cir.ptr<!cir.array<!s8i x 47>>), !cir.ptr<!s8i> loc(#loc3)
    cir.call @__assert_fail(%9, %11, %13, %15) : (!cir.ptr<!s8i>, !cir.ptr<!s8i>, !u32i, !cir.ptr<!s8i>) -> () extra(#fn_attr) loc(#loc3)
    cir.br ^bb9 loc(#loc3)
  ^bb9:  // 2 preds: ^bb7, ^bb8
    cir.br ^bb10 loc(#loc3)
  ^bb10:  // pred: ^bb9
    cir.br ^bb11 loc(#loc3)
  ^bb11:  // pred: ^bb10
    cir.br ^bb12 loc(#loc9)
  ^bb12:  // pred: ^bb11
    cir.br ^bb13 loc(#loc9)
  ^bb13:  // pred: ^bb12
    %16 = cir.load %0 : !cir.ptr<!s32i>, !s32i loc(#loc16)
    %17 = cir.unary(inc, %16) : !s32i, !s32i loc(#loc17)
    cir.store %17, %0 : !s32i, !cir.ptr<!s32i> loc(#loc44)
    cir.br ^bb2 loc(#loc40)
  ^bb14:  // pred: ^bb2
    cir.br ^bb15 loc(#loc9)
  ^bb15:  // pred: ^bb14
    cir.return loc(#loc5)
  } loc(#loc38)
  cir.func no_proto @CWE617_Reachable_Assertion__zero_17_good() extra(#fn_attr1) {
    %0 = cir.get_global @good1 : !cir.ptr<!cir.func<!void ()>> loc(#loc46)
    cir.call %0() : (!cir.ptr<!cir.func<!void ()>>) -> () loc(#loc20)
    cir.return loc(#loc19)
  } loc(#loc45)
  cir.global "private" constant cir_private dsolocal @".str.3" = #cir.const_array<"1\00" : !cir.array<!s8i x 2>> : !cir.array<!s8i x 2> {alignment = 1 : i64} loc(#loc22)
  cir.global "private" constant cir_private dsolocal @".str.4" = #cir.const_array<"void good1()\00" : !cir.array<!s8i x 13>> : !cir.array<!s8i x 13> {alignment = 1 : i64} loc(#loc22)
  cir.func no_proto internal private @good1() extra(#fn_attr1) {
    %0 = cir.alloca !s32i, !cir.ptr<!s32i>, ["k"] {alignment = 4 : i64} loc(#loc48)
    cir.br ^bb1 loc(#loc49)
  ^bb1:  // pred: ^bb0
    %1 = cir.const #cir.int<0> : !s32i loc(#loc29)
    cir.store %1, %0 : !s32i, !cir.ptr<!s32i> loc(#loc50)
    cir.br ^bb2 loc(#loc49)
  ^bb2:  // 2 preds: ^bb1, ^bb13
    %2 = cir.load %0 : !cir.ptr<!s32i>, !s32i loc(#loc31)
    %3 = cir.const #cir.int<1> : !s32i loc(#loc32)
    %4 = cir.cmp(lt, %2, %3) : !s32i, !cir.bool loc(#loc51)
    cir.brcond %4 ^bb3, ^bb14 loc(#loc33)
  ^bb3:  // pred: ^bb2
    cir.br ^bb4 loc(#loc52)
  ^bb4:  // pred: ^bb3
    %5 = cir.const #cir.int<4> : !u64i loc(#loc22)
    cir.br ^bb5 loc(#loc22)
  ^bb5:  // pred: ^bb4
    cir.br ^bb6 loc(#loc22)
  ^bb6:  // pred: ^bb5
    %6 = cir.const #cir.int<1> : !s32i loc(#loc22)
    %7 = cir.cast(int_to_bool, %6 : !s32i), !cir.bool loc(#loc22)
    cir.brcond %7 ^bb7, ^bb8 loc(#loc22)
  ^bb7:  // pred: ^bb6
    cir.br ^bb9 loc(#loc22)
  ^bb8:  // pred: ^bb6
    %8 = cir.get_global @".str.3" : !cir.ptr<!cir.array<!s8i x 2>> loc(#loc22)
    %9 = cir.cast(array_to_ptrdecay, %8 : !cir.ptr<!cir.array<!s8i x 2>>), !cir.ptr<!s8i> loc(#loc22)
    %10 = cir.get_global @".str.1" : !cir.ptr<!cir.array<!s8i x 38>> loc(#loc22)
    %11 = cir.cast(array_to_ptrdecay, %10 : !cir.ptr<!cir.array<!s8i x 38>>), !cir.ptr<!s8i> loc(#loc22)
    %12 = cir.const #cir.int<45> : !s32i loc(#loc22)
    %13 = cir.cast(integral, %12 : !s32i), !u32i loc(#loc22)
    %14 = cir.get_global @".str.4" : !cir.ptr<!cir.array<!s8i x 13>> loc(#loc22)
    %15 = cir.cast(array_to_ptrdecay, %14 : !cir.ptr<!cir.array<!s8i x 13>>), !cir.ptr<!s8i> loc(#loc22)
    cir.call @__assert_fail(%9, %11, %13, %15) : (!cir.ptr<!s8i>, !cir.ptr<!s8i>, !u32i, !cir.ptr<!s8i>) -> () extra(#fn_attr) loc(#loc22)
    cir.br ^bb9 loc(#loc22)
  ^bb9:  // 2 preds: ^bb7, ^bb8
    cir.br ^bb10 loc(#loc22)
  ^bb10:  // pred: ^bb9
    cir.br ^bb11 loc(#loc22)
  ^bb11:  // pred: ^bb10
    cir.br ^bb12 loc(#loc28)
  ^bb12:  // pred: ^bb11
    cir.br ^bb13 loc(#loc28)
  ^bb13:  // pred: ^bb12
    %16 = cir.load %0 : !cir.ptr<!s32i>, !s32i loc(#loc35)
    %17 = cir.unary(inc, %16) : !s32i, !s32i loc(#loc36)
    cir.store %17, %0 : !s32i, !cir.ptr<!s32i> loc(#loc53)
    cir.br ^bb2 loc(#loc49)
  ^bb14:  // pred: ^bb2
    cir.br ^bb15 loc(#loc28)
  ^bb15:  // pred: ^bb14
    cir.return loc(#loc24)
  } loc(#loc47)
} loc(#loc)
#loc = loc("/home/ladisgin/git_proj/juliet-c/testcases/CWE617_Reachable_Assertion/CWE617_Reachable_Assertion__zero_17.c":0:0)
#loc1 = loc("/usr/include/assert.h":67:1)
#loc2 = loc("/usr/include/assert.h":69:43)
#loc3 = loc("CWE617_Reachable_Assertion__zero_17.c":28:9)
#loc4 = loc("CWE617_Reachable_Assertion__zero_17.c":22:1)
#loc5 = loc("CWE617_Reachable_Assertion__zero_17.c":30:1)
#loc6 = loc("CWE617_Reachable_Assertion__zero_17.c":24:5)
#loc7 = loc("CWE617_Reachable_Assertion__zero_17.c":24:9)
#loc8 = loc("CWE617_Reachable_Assertion__zero_17.c":25:5)
#loc9 = loc("CWE617_Reachable_Assertion__zero_17.c":29:5)
#loc10 = loc("CWE617_Reachable_Assertion__zero_17.c":25:13)
#loc11 = loc("CWE617_Reachable_Assertion__zero_17.c":25:9)
#loc12 = loc("CWE617_Reachable_Assertion__zero_17.c":25:16)
#loc13 = loc("CWE617_Reachable_Assertion__zero_17.c":25:20)
#loc14 = loc("CWE617_Reachable_Assertion__zero_17.c":25:18)
#loc15 = loc("CWE617_Reachable_Assertion__zero_17.c":26:5)
#loc16 = loc("CWE617_Reachable_Assertion__zero_17.c":25:24)
#loc17 = loc("CWE617_Reachable_Assertion__zero_17.c":25:23)
#loc18 = loc("CWE617_Reachable_Assertion__zero_17.c":49:1)
#loc19 = loc("CWE617_Reachable_Assertion__zero_17.c":52:1)
#loc20 = loc("CWE617_Reachable_Assertion__zero_17.c":51:5)
#loc21 = loc("CWE617_Reachable_Assertion__zero_17.c":51:11)
#loc22 = loc("CWE617_Reachable_Assertion__zero_17.c":45:9)
#loc23 = loc("CWE617_Reachable_Assertion__zero_17.c":37:1)
#loc24 = loc("CWE617_Reachable_Assertion__zero_17.c":47:1)
#loc25 = loc("CWE617_Reachable_Assertion__zero_17.c":39:5)
#loc26 = loc("CWE617_Reachable_Assertion__zero_17.c":39:9)
#loc27 = loc("CWE617_Reachable_Assertion__zero_17.c":40:5)
#loc28 = loc("CWE617_Reachable_Assertion__zero_17.c":46:5)
#loc29 = loc("CWE617_Reachable_Assertion__zero_17.c":40:13)
#loc30 = loc("CWE617_Reachable_Assertion__zero_17.c":40:9)
#loc31 = loc("CWE617_Reachable_Assertion__zero_17.c":40:16)
#loc32 = loc("CWE617_Reachable_Assertion__zero_17.c":40:20)
#loc33 = loc("CWE617_Reachable_Assertion__zero_17.c":40:18)
#loc34 = loc("CWE617_Reachable_Assertion__zero_17.c":41:5)
#loc35 = loc("CWE617_Reachable_Assertion__zero_17.c":40:24)
#loc36 = loc("CWE617_Reachable_Assertion__zero_17.c":40:23)
#loc37 = loc(fused[#loc1, #loc2])
#loc38 = loc(fused[#loc4, #loc5])
#loc39 = loc(fused[#loc6, #loc7])
#loc40 = loc(fused[#loc8, #loc9])
#loc41 = loc(fused[#loc11, #loc10])
#loc42 = loc(fused[#loc12, #loc13])
#loc43 = loc(fused[#loc15, #loc9])
#loc44 = loc(fused[#loc17, #loc16])
#loc45 = loc(fused[#loc18, #loc19])
#loc46 = loc(fused[#loc20, #loc21])
#loc47 = loc(fused[#loc23, #loc24])
#loc48 = loc(fused[#loc25, #loc26])
#loc49 = loc(fused[#loc27, #loc28])
#loc50 = loc(fused[#loc30, #loc29])
#loc51 = loc(fused[#loc31, #loc32])
#loc52 = loc(fused[#loc34, #loc28])
#loc53 = loc(fused[#loc36, #loc35])
