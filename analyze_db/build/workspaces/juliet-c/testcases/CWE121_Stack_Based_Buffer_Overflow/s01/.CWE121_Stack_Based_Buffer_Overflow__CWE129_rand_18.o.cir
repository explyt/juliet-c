!s32i = !cir.int<s, 32>
!s8i = !cir.int<s, 8>
!u32i = !cir.int<u, 32>
#false = #cir.bool<false> : !cir.bool
#fn_attr = #cir<extra({nothrow = #cir.nothrow})>
#fn_attr1 = #cir<extra({inline = #cir.inline<no>, nothrow = #cir.nothrow, optnone = #cir.optnone, uwtable = #cir.uwtable<async>})>
#loc21 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE129_rand_18.c":30:12)
#loc69 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE129_rand_18.c":67:12)
#loc77 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE129_rand_18.c":74:23)
#true = #cir.bool<true> : !cir.bool
module @"/workspaces/juliet-c/testcases/CWE121_Stack_Based_Buffer_Overflow/s01/CWE121_Stack_Based_Buffer_Overflow__CWE129_rand_18.c" attributes {cir.lang = #cir.lang<c>, cir.sob = #cir.signed_overflow_behavior<undefined>, cir.triple = "x86_64-unknown-linux-gnu", cir.type_size_info = #cir.type_size_info<char = 8, int = 32, size_t = 64>, cir.uwtable = #cir.uwtable<async>, dlti.dl_spec = #dlti.dl_spec<i128 = dense<128> : vector<2xi64>, i64 = dense<64> : vector<2xi64>, !llvm.ptr<271> = dense<32> : vector<4xi64>, !llvm.ptr<272> = dense<64> : vector<4xi64>, f128 = dense<128> : vector<2xi64>, f64 = dense<64> : vector<2xi64>, f16 = dense<16> : vector<2xi64>, i32 = dense<32> : vector<2xi64>, i16 = dense<16> : vector<2xi64>, i8 = dense<8> : vector<2xi64>, i1 = dense<8> : vector<2xi64>, !llvm.ptr<270> = dense<32> : vector<4xi64>, !llvm.ptr = dense<64> : vector<4xi64>, f80 = dense<128> : vector<2xi64>, "dlti.endianness" = "little", "dlti.mangling_mode" = "e", "dlti.stack_alignment" = 128 : i64>} {
  cir.func private @rand() -> !s32i extra(#fn_attr) loc(#loc143)
  cir.func private @printIntLine(!s32i) loc(#loc144)
  cir.func private @printLine(!cir.ptr<!s8i>) loc(#loc145)
  cir.global "private" constant cir_private dsolocal @".str" = #cir.const_array<"ERROR: Array index is negative.\00" : !cir.array<!s8i x 32>> : !cir.array<!s8i x 32> {alignment = 1 : i64} loc(#loc7)
  cir.func no_proto @CWE121_Stack_Based_Buffer_Overflow__CWE129_rand_18_bad() extra(#fn_attr1) {
    %0 = cir.alloca !s32i, !cir.ptr<!s32i>, ["data"] {alignment = 4 : i64} loc(#loc147)
    %1 = cir.alloca !s32i, !cir.ptr<!s32i>, ["i"] {alignment = 4 : i64} loc(#loc148)
    %2 = cir.alloca !cir.array<!s32i x 10>, !cir.ptr<!cir.array<!s32i x 10>>, ["buffer"] {alignment = 16 : i64} loc(#loc149)
    %3 = cir.const #cir.int<1> : !s32i loc(#loc16)
    %4 = cir.unary(minus, %3) nsw : !s32i, !s32i loc(#loc17)
    cir.store %4, %0 : !s32i, !cir.ptr<!s32i> loc(#loc150)
    cir.br ^bb1 loc(#loc151)
  ^bb1:  // pred: ^bb0
    %5 = cir.call @rand() : () -> !s32i extra(#fn_attr) loc(#loc21)
    %6 = cir.const #cir.int<1> : !s32i loc(#loc21)
    %7 = cir.binop(and, %5, %6) : !s32i loc(#loc21)
    %8 = cir.cast(int_to_bool, %7 : !s32i), !cir.bool loc(#loc21)
    cir.brcond %8 ^bb2, ^bb3 loc(#loc21)
  ^bb2:  // pred: ^bb1
    %9 = cir.call @rand() : () -> !s32i extra(#fn_attr) loc(#loc21)
    %10 = cir.cast(integral, %9 : !s32i), !u32i loc(#loc21)
    %11 = cir.const #cir.int<30> : !s32i loc(#loc21)
    %12 = cir.shift(left, %10 : !u32i, %11 : !s32i) -> !u32i loc(#loc21)
    %13 = cir.call @rand() : () -> !s32i extra(#fn_attr) loc(#loc21)
    %14 = cir.cast(integral, %13 : !s32i), !u32i loc(#loc21)
    %15 = cir.const #cir.int<15> : !s32i loc(#loc21)
    %16 = cir.shift(left, %14 : !u32i, %15 : !s32i) -> !u32i loc(#loc21)
    %17 = cir.binop(xor, %12, %16) : !u32i loc(#loc21)
    %18 = cir.call @rand() : () -> !s32i extra(#fn_attr) loc(#loc21)
    %19 = cir.cast(integral, %18 : !s32i), !u32i loc(#loc21)
    %20 = cir.binop(xor, %17, %19) : !u32i loc(#loc21)
    cir.br ^bb4(%20 : !u32i) loc(#loc21)
  ^bb3:  // pred: ^bb1
    %21 = cir.call @rand() : () -> !s32i extra(#fn_attr) loc(#loc21)
    %22 = cir.cast(integral, %21 : !s32i), !u32i loc(#loc21)
    %23 = cir.const #cir.int<30> : !s32i loc(#loc21)
    %24 = cir.shift(left, %22 : !u32i, %23 : !s32i) -> !u32i loc(#loc21)
    %25 = cir.call @rand() : () -> !s32i extra(#fn_attr) loc(#loc21)
    %26 = cir.cast(integral, %25 : !s32i), !u32i loc(#loc21)
    %27 = cir.const #cir.int<15> : !s32i loc(#loc21)
    %28 = cir.shift(left, %26 : !u32i, %27 : !s32i) -> !u32i loc(#loc21)
    %29 = cir.binop(xor, %24, %28) : !u32i loc(#loc21)
    %30 = cir.call @rand() : () -> !s32i extra(#fn_attr) loc(#loc21)
    %31 = cir.cast(integral, %30 : !s32i), !u32i loc(#loc21)
    %32 = cir.binop(xor, %29, %31) : !u32i loc(#loc21)
    %33 = cir.unary(minus, %32) : !u32i, !u32i loc(#loc21)
    %34 = cir.const #cir.int<1> : !s32i loc(#loc21)
    %35 = cir.cast(integral, %34 : !s32i), !u32i loc(#loc21)
    %36 = cir.binop(sub, %33, %35) : !u32i loc(#loc21)
    cir.br ^bb4(%36 : !u32i) loc(#loc21)
  ^bb4(%37: !u32i loc("CWE121_Stack_Based_Buffer_Overflow__CWE129_rand_18.c":30:12)):  // 2 preds: ^bb2, ^bb3
    cir.br ^bb5 loc(#loc21)
  ^bb5:  // pred: ^bb4
    %38 = cir.cast(integral, %37 : !u32i), !s32i loc(#loc21)
    cir.store %38, %0 : !s32i, !cir.ptr<!s32i> loc(#loc152)
    cir.br ^bb6 loc(#loc153)
  ^bb6:  // pred: ^bb5
    %39 = cir.const #cir.zero : !cir.array<!s32i x 10> loc(#loc149)
    cir.store %39, %2 : !cir.array<!s32i x 10>, !cir.ptr<!cir.array<!s32i x 10>> loc(#loc149)
    cir.br ^bb7 loc(#loc154)
  ^bb7:  // pred: ^bb6
    %40 = cir.load %0 : !cir.ptr<!s32i>, !s32i loc(#loc27)
    %41 = cir.const #cir.int<0> : !s32i loc(#loc28)
    %42 = cir.cmp(ge, %40, %41) : !s32i, !cir.bool loc(#loc155)
    cir.brcond %42 ^bb8, ^bb17 loc(#loc156)
  ^bb8:  // pred: ^bb7
    %43 = cir.const #cir.int<1> : !s32i loc(#loc32)
    %44 = cir.load %0 : !cir.ptr<!s32i>, !s32i loc(#loc33)
    %45 = cir.cast(array_to_ptrdecay, %2 : !cir.ptr<!cir.array<!s32i x 10>>), !cir.ptr<!s32i> loc(#loc34)
    %46 = cir.ptr_stride(%45 : !cir.ptr<!s32i>, %44 : !s32i), !cir.ptr<!s32i> loc(#loc34)
    cir.store %43, %46 : !s32i, !cir.ptr<!s32i> loc(#loc157)
    cir.br ^bb9 loc(#loc158)
  ^bb9:  // pred: ^bb8
    %47 = cir.const #cir.int<0> : !s32i loc(#loc37)
    cir.store %47, %1 : !s32i, !cir.ptr<!s32i> loc(#loc159)
    cir.br ^bb10 loc(#loc158)
  ^bb10:  // 2 preds: ^bb9, ^bb14
    %48 = cir.load %1 : !cir.ptr<!s32i>, !s32i loc(#loc39)
    %49 = cir.const #cir.int<10> : !s32i loc(#loc40)
    %50 = cir.cmp(lt, %48, %49) : !s32i, !cir.bool loc(#loc160)
    cir.brcond %50 ^bb11, ^bb15 loc(#loc41)
  ^bb11:  // pred: ^bb10
    cir.br ^bb12 loc(#loc161)
  ^bb12:  // pred: ^bb11
    %51 = cir.load %1 : !cir.ptr<!s32i>, !s32i loc(#loc43)
    %52 = cir.cast(array_to_ptrdecay, %2 : !cir.ptr<!cir.array<!s32i x 10>>), !cir.ptr<!s32i> loc(#loc44)
    %53 = cir.ptr_stride(%52 : !cir.ptr<!s32i>, %51 : !s32i), !cir.ptr<!s32i> loc(#loc44)
    %54 = cir.load %53 : !cir.ptr<!s32i>, !s32i loc(#loc44)
    cir.call @printIntLine(%54) : (!s32i) -> () loc(#loc45)
    cir.br ^bb13 loc(#loc36)
  ^bb13:  // pred: ^bb12
    cir.br ^bb14 loc(#loc36)
  ^bb14:  // pred: ^bb13
    %55 = cir.load %1 : !cir.ptr<!s32i>, !s32i loc(#loc46)
    %56 = cir.unary(inc, %55) nsw : !s32i, !s32i loc(#loc47)
    cir.store %56, %1 : !s32i, !cir.ptr<!s32i> loc(#loc162)
    cir.br ^bb10 loc(#loc158)
  ^bb15:  // pred: ^bb10
    cir.br ^bb16 loc(#loc36)
  ^bb16:  // pred: ^bb15
    cir.br ^bb18 loc(#loc30)
  ^bb17:  // pred: ^bb7
    %57 = cir.get_global @".str" : !cir.ptr<!cir.array<!s8i x 32>> loc(#loc7)
    %58 = cir.cast(array_to_ptrdecay, %57 : !cir.ptr<!cir.array<!s8i x 32>>), !cir.ptr<!s8i> loc(#loc7)
    cir.call @printLine(%58) : (!cir.ptr<!s8i>) -> () loc(#loc48)
    cir.br ^bb18 loc(#loc26)
  ^bb18:  // 2 preds: ^bb16, ^bb17
    cir.br ^bb19 loc(#loc26)
  ^bb19:  // pred: ^bb18
    cir.return loc(#loc9)
  } loc(#loc146)
  cir.func no_proto @CWE121_Stack_Based_Buffer_Overflow__CWE129_rand_18_good() extra(#fn_attr1) {
    %0 = cir.get_global @goodB2G : !cir.ptr<!cir.func<()>> loc(#loc164)
    cir.call %0() : (!cir.ptr<!cir.func<()>>) -> () loc(#loc51)
    %1 = cir.get_global @goodG2B : !cir.ptr<!cir.func<()>> loc(#loc165)
    cir.call %1() : (!cir.ptr<!cir.func<()>>) -> () loc(#loc53)
    cir.return loc(#loc50)
  } loc(#loc163)
  cir.global "private" constant cir_private dsolocal @".str.1" = #cir.const_array<"ERROR: Array index is out-of-bounds\00" : !cir.array<!s8i x 36>> : !cir.array<!s8i x 36> {alignment = 1 : i64} loc(#loc55)
  cir.func no_proto internal private @goodB2G() extra(#fn_attr1) {
    %0 = cir.alloca !s32i, !cir.ptr<!s32i>, ["data"] {alignment = 4 : i64} loc(#loc167)
    %1 = cir.alloca !s32i, !cir.ptr<!s32i>, ["i"] {alignment = 4 : i64} loc(#loc168)
    %2 = cir.alloca !cir.array<!s32i x 10>, !cir.ptr<!cir.array<!s32i x 10>>, ["buffer"] {alignment = 16 : i64} loc(#loc169)
    %3 = cir.const #cir.int<1> : !s32i loc(#loc64)
    %4 = cir.unary(minus, %3) nsw : !s32i, !s32i loc(#loc65)
    cir.store %4, %0 : !s32i, !cir.ptr<!s32i> loc(#loc170)
    cir.br ^bb1 loc(#loc171)
  ^bb1:  // pred: ^bb0
    %5 = cir.call @rand() : () -> !s32i extra(#fn_attr) loc(#loc69)
    %6 = cir.const #cir.int<1> : !s32i loc(#loc69)
    %7 = cir.binop(and, %5, %6) : !s32i loc(#loc69)
    %8 = cir.cast(int_to_bool, %7 : !s32i), !cir.bool loc(#loc69)
    cir.brcond %8 ^bb2, ^bb3 loc(#loc69)
  ^bb2:  // pred: ^bb1
    %9 = cir.call @rand() : () -> !s32i extra(#fn_attr) loc(#loc69)
    %10 = cir.cast(integral, %9 : !s32i), !u32i loc(#loc69)
    %11 = cir.const #cir.int<30> : !s32i loc(#loc69)
    %12 = cir.shift(left, %10 : !u32i, %11 : !s32i) -> !u32i loc(#loc69)
    %13 = cir.call @rand() : () -> !s32i extra(#fn_attr) loc(#loc69)
    %14 = cir.cast(integral, %13 : !s32i), !u32i loc(#loc69)
    %15 = cir.const #cir.int<15> : !s32i loc(#loc69)
    %16 = cir.shift(left, %14 : !u32i, %15 : !s32i) -> !u32i loc(#loc69)
    %17 = cir.binop(xor, %12, %16) : !u32i loc(#loc69)
    %18 = cir.call @rand() : () -> !s32i extra(#fn_attr) loc(#loc69)
    %19 = cir.cast(integral, %18 : !s32i), !u32i loc(#loc69)
    %20 = cir.binop(xor, %17, %19) : !u32i loc(#loc69)
    cir.br ^bb4(%20 : !u32i) loc(#loc69)
  ^bb3:  // pred: ^bb1
    %21 = cir.call @rand() : () -> !s32i extra(#fn_attr) loc(#loc69)
    %22 = cir.cast(integral, %21 : !s32i), !u32i loc(#loc69)
    %23 = cir.const #cir.int<30> : !s32i loc(#loc69)
    %24 = cir.shift(left, %22 : !u32i, %23 : !s32i) -> !u32i loc(#loc69)
    %25 = cir.call @rand() : () -> !s32i extra(#fn_attr) loc(#loc69)
    %26 = cir.cast(integral, %25 : !s32i), !u32i loc(#loc69)
    %27 = cir.const #cir.int<15> : !s32i loc(#loc69)
    %28 = cir.shift(left, %26 : !u32i, %27 : !s32i) -> !u32i loc(#loc69)
    %29 = cir.binop(xor, %24, %28) : !u32i loc(#loc69)
    %30 = cir.call @rand() : () -> !s32i extra(#fn_attr) loc(#loc69)
    %31 = cir.cast(integral, %30 : !s32i), !u32i loc(#loc69)
    %32 = cir.binop(xor, %29, %31) : !u32i loc(#loc69)
    %33 = cir.unary(minus, %32) : !u32i, !u32i loc(#loc69)
    %34 = cir.const #cir.int<1> : !s32i loc(#loc69)
    %35 = cir.cast(integral, %34 : !s32i), !u32i loc(#loc69)
    %36 = cir.binop(sub, %33, %35) : !u32i loc(#loc69)
    cir.br ^bb4(%36 : !u32i) loc(#loc69)
  ^bb4(%37: !u32i loc("CWE121_Stack_Based_Buffer_Overflow__CWE129_rand_18.c":67:12)):  // 2 preds: ^bb2, ^bb3
    cir.br ^bb5 loc(#loc69)
  ^bb5:  // pred: ^bb4
    %38 = cir.cast(integral, %37 : !u32i), !s32i loc(#loc69)
    cir.store %38, %0 : !s32i, !cir.ptr<!s32i> loc(#loc172)
    cir.br ^bb6 loc(#loc173)
  ^bb6:  // pred: ^bb5
    %39 = cir.const #cir.zero : !cir.array<!s32i x 10> loc(#loc169)
    cir.store %39, %2 : !cir.array<!s32i x 10>, !cir.ptr<!cir.array<!s32i x 10>> loc(#loc169)
    cir.br ^bb7 loc(#loc174)
  ^bb7:  // pred: ^bb6
    %40 = cir.load %0 : !cir.ptr<!s32i>, !s32i loc(#loc75)
    %41 = cir.const #cir.int<0> : !s32i loc(#loc76)
    %42 = cir.cmp(ge, %40, %41) : !s32i, !cir.bool loc(#loc175)
    cir.brcond %42 ^bb8, ^bb13 loc(#loc77)
  ^bb8:  // pred: ^bb7
    %43 = cir.load %0 : !cir.ptr<!s32i>, !s32i loc(#loc78)
    %44 = cir.const #cir.int<10> : !s32i loc(#loc79)
    %45 = cir.cmp(lt, %43, %44) : !s32i, !cir.bool loc(#loc176)
    cir.brcond %45 ^bb9, ^bb10 loc(#loc77)
  ^bb9:  // pred: ^bb8
    %46 = cir.const #true loc(#loc77)
    cir.br ^bb11(%46 : !cir.bool) loc(#loc77)
  ^bb10:  // pred: ^bb8
    %47 = cir.const #false loc(#loc77)
    cir.br ^bb11(%47 : !cir.bool) loc(#loc77)
  ^bb11(%48: !cir.bool loc("CWE121_Stack_Based_Buffer_Overflow__CWE129_rand_18.c":74:23)):  // 2 preds: ^bb9, ^bb10
    cir.br ^bb12 loc(#loc77)
  ^bb12:  // pred: ^bb11
    cir.br ^bb14(%48 : !cir.bool) loc(#loc77)
  ^bb13:  // pred: ^bb7
    %49 = cir.const #false loc(#loc77)
    cir.br ^bb14(%49 : !cir.bool) loc(#loc77)
  ^bb14(%50: !cir.bool loc("CWE121_Stack_Based_Buffer_Overflow__CWE129_rand_18.c":74:23)):  // 2 preds: ^bb12, ^bb13
    cir.br ^bb15 loc(#loc77)
  ^bb15:  // pred: ^bb14
    cir.brcond %50 ^bb16, ^bb25 loc(#loc177)
  ^bb16:  // pred: ^bb15
    %51 = cir.const #cir.int<1> : !s32i loc(#loc84)
    %52 = cir.load %0 : !cir.ptr<!s32i>, !s32i loc(#loc85)
    %53 = cir.cast(array_to_ptrdecay, %2 : !cir.ptr<!cir.array<!s32i x 10>>), !cir.ptr<!s32i> loc(#loc86)
    %54 = cir.ptr_stride(%53 : !cir.ptr<!s32i>, %52 : !s32i), !cir.ptr<!s32i> loc(#loc86)
    cir.store %51, %54 : !s32i, !cir.ptr<!s32i> loc(#loc178)
    cir.br ^bb17 loc(#loc179)
  ^bb17:  // pred: ^bb16
    %55 = cir.const #cir.int<0> : !s32i loc(#loc89)
    cir.store %55, %1 : !s32i, !cir.ptr<!s32i> loc(#loc180)
    cir.br ^bb18 loc(#loc179)
  ^bb18:  // 2 preds: ^bb17, ^bb22
    %56 = cir.load %1 : !cir.ptr<!s32i>, !s32i loc(#loc91)
    %57 = cir.const #cir.int<10> : !s32i loc(#loc92)
    %58 = cir.cmp(lt, %56, %57) : !s32i, !cir.bool loc(#loc181)
    cir.brcond %58 ^bb19, ^bb23 loc(#loc93)
  ^bb19:  // pred: ^bb18
    cir.br ^bb20 loc(#loc182)
  ^bb20:  // pred: ^bb19
    %59 = cir.load %1 : !cir.ptr<!s32i>, !s32i loc(#loc95)
    %60 = cir.cast(array_to_ptrdecay, %2 : !cir.ptr<!cir.array<!s32i x 10>>), !cir.ptr<!s32i> loc(#loc96)
    %61 = cir.ptr_stride(%60 : !cir.ptr<!s32i>, %59 : !s32i), !cir.ptr<!s32i> loc(#loc96)
    %62 = cir.load %61 : !cir.ptr<!s32i>, !s32i loc(#loc96)
    cir.call @printIntLine(%62) : (!s32i) -> () loc(#loc97)
    cir.br ^bb21 loc(#loc88)
  ^bb21:  // pred: ^bb20
    cir.br ^bb22 loc(#loc88)
  ^bb22:  // pred: ^bb21
    %63 = cir.load %1 : !cir.ptr<!s32i>, !s32i loc(#loc98)
    %64 = cir.unary(inc, %63) nsw : !s32i, !s32i loc(#loc99)
    cir.store %64, %1 : !s32i, !cir.ptr<!s32i> loc(#loc183)
    cir.br ^bb18 loc(#loc179)
  ^bb23:  // pred: ^bb18
    cir.br ^bb24 loc(#loc88)
  ^bb24:  // pred: ^bb23
    cir.br ^bb26 loc(#loc82)
  ^bb25:  // pred: ^bb15
    %65 = cir.get_global @".str.1" : !cir.ptr<!cir.array<!s8i x 36>> loc(#loc55)
    %66 = cir.cast(array_to_ptrdecay, %65 : !cir.ptr<!cir.array<!s8i x 36>>), !cir.ptr<!s8i> loc(#loc55)
    cir.call @printLine(%66) : (!cir.ptr<!s8i>) -> () loc(#loc100)
    cir.br ^bb26 loc(#loc74)
  ^bb26:  // 2 preds: ^bb24, ^bb25
    cir.br ^bb27 loc(#loc74)
  ^bb27:  // pred: ^bb26
    cir.return loc(#loc57)
  } loc(#loc166)
  cir.func no_proto internal private @goodG2B() extra(#fn_attr1) {
    %0 = cir.alloca !s32i, !cir.ptr<!s32i>, ["data"] {alignment = 4 : i64} loc(#loc185)
    %1 = cir.alloca !s32i, !cir.ptr<!s32i>, ["i"] {alignment = 4 : i64} loc(#loc186)
    %2 = cir.alloca !cir.array<!s32i x 10>, !cir.ptr<!cir.array<!s32i x 10>>, ["buffer"] {alignment = 16 : i64} loc(#loc187)
    %3 = cir.const #cir.int<1> : !s32i loc(#loc109)
    %4 = cir.unary(minus, %3) nsw : !s32i, !s32i loc(#loc110)
    cir.store %4, %0 : !s32i, !cir.ptr<!s32i> loc(#loc188)
    cir.br ^bb1 loc(#loc189)
  ^bb1:  // pred: ^bb0
    %5 = cir.const #cir.int<7> : !s32i loc(#loc114)
    cir.store %5, %0 : !s32i, !cir.ptr<!s32i> loc(#loc190)
    cir.br ^bb2 loc(#loc191)
  ^bb2:  // pred: ^bb1
    %6 = cir.const #cir.zero : !cir.array<!s32i x 10> loc(#loc187)
    cir.store %6, %2 : !cir.array<!s32i x 10>, !cir.ptr<!cir.array<!s32i x 10>> loc(#loc187)
    cir.br ^bb3 loc(#loc192)
  ^bb3:  // pred: ^bb2
    %7 = cir.load %0 : !cir.ptr<!s32i>, !s32i loc(#loc120)
    %8 = cir.const #cir.int<0> : !s32i loc(#loc121)
    %9 = cir.cmp(ge, %7, %8) : !s32i, !cir.bool loc(#loc193)
    cir.brcond %9 ^bb4, ^bb13 loc(#loc194)
  ^bb4:  // pred: ^bb3
    %10 = cir.const #cir.int<1> : !s32i loc(#loc125)
    %11 = cir.load %0 : !cir.ptr<!s32i>, !s32i loc(#loc126)
    %12 = cir.cast(array_to_ptrdecay, %2 : !cir.ptr<!cir.array<!s32i x 10>>), !cir.ptr<!s32i> loc(#loc127)
    %13 = cir.ptr_stride(%12 : !cir.ptr<!s32i>, %11 : !s32i), !cir.ptr<!s32i> loc(#loc127)
    cir.store %10, %13 : !s32i, !cir.ptr<!s32i> loc(#loc195)
    cir.br ^bb5 loc(#loc196)
  ^bb5:  // pred: ^bb4
    %14 = cir.const #cir.int<0> : !s32i loc(#loc130)
    cir.store %14, %1 : !s32i, !cir.ptr<!s32i> loc(#loc197)
    cir.br ^bb6 loc(#loc196)
  ^bb6:  // 2 preds: ^bb5, ^bb10
    %15 = cir.load %1 : !cir.ptr<!s32i>, !s32i loc(#loc132)
    %16 = cir.const #cir.int<10> : !s32i loc(#loc133)
    %17 = cir.cmp(lt, %15, %16) : !s32i, !cir.bool loc(#loc198)
    cir.brcond %17 ^bb7, ^bb11 loc(#loc134)
  ^bb7:  // pred: ^bb6
    cir.br ^bb8 loc(#loc199)
  ^bb8:  // pred: ^bb7
    %18 = cir.load %1 : !cir.ptr<!s32i>, !s32i loc(#loc136)
    %19 = cir.cast(array_to_ptrdecay, %2 : !cir.ptr<!cir.array<!s32i x 10>>), !cir.ptr<!s32i> loc(#loc137)
    %20 = cir.ptr_stride(%19 : !cir.ptr<!s32i>, %18 : !s32i), !cir.ptr<!s32i> loc(#loc137)
    %21 = cir.load %20 : !cir.ptr<!s32i>, !s32i loc(#loc137)
    cir.call @printIntLine(%21) : (!s32i) -> () loc(#loc138)
    cir.br ^bb9 loc(#loc129)
  ^bb9:  // pred: ^bb8
    cir.br ^bb10 loc(#loc129)
  ^bb10:  // pred: ^bb9
    %22 = cir.load %1 : !cir.ptr<!s32i>, !s32i loc(#loc139)
    %23 = cir.unary(inc, %22) nsw : !s32i, !s32i loc(#loc140)
    cir.store %23, %1 : !s32i, !cir.ptr<!s32i> loc(#loc200)
    cir.br ^bb6 loc(#loc196)
  ^bb11:  // pred: ^bb6
    cir.br ^bb12 loc(#loc129)
  ^bb12:  // pred: ^bb11
    cir.br ^bb14 loc(#loc123)
  ^bb13:  // pred: ^bb3
    %24 = cir.get_global @".str" : !cir.ptr<!cir.array<!s8i x 32>> loc(#loc141)
    %25 = cir.cast(array_to_ptrdecay, %24 : !cir.ptr<!cir.array<!s8i x 32>>), !cir.ptr<!s8i> loc(#loc141)
    cir.call @printLine(%25) : (!cir.ptr<!s8i>) -> () loc(#loc142)
    cir.br ^bb14 loc(#loc119)
  ^bb14:  // 2 preds: ^bb12, ^bb13
    cir.br ^bb15 loc(#loc119)
  ^bb15:  // pred: ^bb14
    cir.return loc(#loc102)
  } loc(#loc184)
} loc(#loc)
#loc = loc("/workspaces/juliet-c/testcases/CWE121_Stack_Based_Buffer_Overflow/s01/CWE121_Stack_Based_Buffer_Overflow__CWE129_rand_18.c":0:0)
#loc1 = loc("/usr/include/stdlib.h":573:1)
#loc2 = loc("/usr/include/stdlib.h":573:24)
#loc3 = loc("../../../testcasesupport/std_testcase_io.h":18:1)
#loc4 = loc("../../../testcasesupport/std_testcase_io.h":18:33)
#loc5 = loc("../../../testcasesupport/std_testcase_io.h":14:1)
#loc6 = loc("../../../testcasesupport/std_testcase_io.h":14:33)
#loc7 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE129_rand_18.c":49:23)
#loc8 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE129_rand_18.c":22:1)
#loc9 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE129_rand_18.c":52:1)
#loc10 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE129_rand_18.c":24:5)
#loc11 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE129_rand_18.c":24:9)
#loc12 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE129_rand_18.c":34:9)
#loc13 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE129_rand_18.c":34:13)
#loc14 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE129_rand_18.c":35:9)
#loc15 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE129_rand_18.c":35:30)
#loc16 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE129_rand_18.c":26:13)
#loc17 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE129_rand_18.c":26:12)
#loc18 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE129_rand_18.c":26:5)
#loc19 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE129_rand_18.c":27:5)
#loc20 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE129_rand_18.c":27:10)
#loc22 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE129_rand_18.c":30:5)
#loc23 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE129_rand_18.c":31:5)
#loc24 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE129_rand_18.c":31:10)
#loc25 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE129_rand_18.c":38:9)
#loc26 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE129_rand_18.c":50:9)
#loc27 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE129_rand_18.c":38:13)
#loc28 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE129_rand_18.c":38:21)
#loc29 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE129_rand_18.c":39:9)
#loc30 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE129_rand_18.c":46:9)
#loc31 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE129_rand_18.c":48:9)
#loc32 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE129_rand_18.c":40:28)
#loc33 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE129_rand_18.c":40:20)
#loc34 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE129_rand_18.c":40:13)
#loc35 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE129_rand_18.c":42:13)
#loc36 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE129_rand_18.c":45:13)
#loc37 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE129_rand_18.c":42:21)
#loc38 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE129_rand_18.c":42:17)
#loc39 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE129_rand_18.c":42:24)
#loc40 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE129_rand_18.c":42:28)
#loc41 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE129_rand_18.c":42:26)
#loc42 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE129_rand_18.c":43:13)
#loc43 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE129_rand_18.c":44:37)
#loc44 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE129_rand_18.c":44:30)
#loc45 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE129_rand_18.c":44:17)
#loc46 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE129_rand_18.c":42:33)
#loc47 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE129_rand_18.c":42:32)
#loc48 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE129_rand_18.c":49:13)
#loc49 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE129_rand_18.c":124:1)
#loc50 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE129_rand_18.c":128:1)
#loc51 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE129_rand_18.c":126:5)
#loc52 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE129_rand_18.c":126:13)
#loc53 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE129_rand_18.c":127:5)
#loc54 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE129_rand_18.c":127:13)
#loc55 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE129_rand_18.c":85:23)
#loc56 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE129_rand_18.c":59:1)
#loc57 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE129_rand_18.c":88:1)
#loc58 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE129_rand_18.c":61:5)
#loc59 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE129_rand_18.c":61:9)
#loc60 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE129_rand_18.c":71:9)
#loc61 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE129_rand_18.c":71:13)
#loc62 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE129_rand_18.c":72:9)
#loc63 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE129_rand_18.c":72:30)
#loc64 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE129_rand_18.c":63:13)
#loc65 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE129_rand_18.c":63:12)
#loc66 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE129_rand_18.c":63:5)
#loc67 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE129_rand_18.c":64:5)
#loc68 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE129_rand_18.c":64:10)
#loc70 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE129_rand_18.c":67:5)
#loc71 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE129_rand_18.c":68:5)
#loc72 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE129_rand_18.c":68:10)
#loc73 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE129_rand_18.c":74:9)
#loc74 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE129_rand_18.c":86:9)
#loc75 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE129_rand_18.c":74:13)
#loc76 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE129_rand_18.c":74:21)
#loc78 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE129_rand_18.c":74:26)
#loc79 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE129_rand_18.c":74:34)
#loc80 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE129_rand_18.c":74:36)
#loc81 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE129_rand_18.c":75:9)
#loc82 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE129_rand_18.c":82:9)
#loc83 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE129_rand_18.c":84:9)
#loc84 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE129_rand_18.c":76:28)
#loc85 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE129_rand_18.c":76:20)
#loc86 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE129_rand_18.c":76:13)
#loc87 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE129_rand_18.c":78:13)
#loc88 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE129_rand_18.c":81:13)
#loc89 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE129_rand_18.c":78:21)
#loc90 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE129_rand_18.c":78:17)
#loc91 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE129_rand_18.c":78:24)
#loc92 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE129_rand_18.c":78:28)
#loc93 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE129_rand_18.c":78:26)
#loc94 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE129_rand_18.c":79:13)
#loc95 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE129_rand_18.c":80:37)
#loc96 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE129_rand_18.c":80:30)
#loc97 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE129_rand_18.c":80:17)
#loc98 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE129_rand_18.c":78:33)
#loc99 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE129_rand_18.c":78:32)
#loc100 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE129_rand_18.c":85:13)
#loc101 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE129_rand_18.c":91:1)
#loc102 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE129_rand_18.c":122:1)
#loc103 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE129_rand_18.c":93:5)
#loc104 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE129_rand_18.c":93:9)
#loc105 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE129_rand_18.c":104:9)
#loc106 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE129_rand_18.c":104:13)
#loc107 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE129_rand_18.c":105:9)
#loc108 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE129_rand_18.c":105:30)
#loc109 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE129_rand_18.c":95:13)
#loc110 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE129_rand_18.c":95:12)
#loc111 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE129_rand_18.c":95:5)
#loc112 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE129_rand_18.c":96:5)
#loc113 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE129_rand_18.c":96:10)
#loc114 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE129_rand_18.c":100:12)
#loc115 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE129_rand_18.c":100:5)
#loc116 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE129_rand_18.c":101:5)
#loc117 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE129_rand_18.c":101:10)
#loc118 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE129_rand_18.c":108:9)
#loc119 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE129_rand_18.c":120:9)
#loc120 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE129_rand_18.c":108:13)
#loc121 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE129_rand_18.c":108:21)
#loc122 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE129_rand_18.c":109:9)
#loc123 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE129_rand_18.c":116:9)
#loc124 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE129_rand_18.c":118:9)
#loc125 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE129_rand_18.c":110:28)
#loc126 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE129_rand_18.c":110:20)
#loc127 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE129_rand_18.c":110:13)
#loc128 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE129_rand_18.c":112:13)
#loc129 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE129_rand_18.c":115:13)
#loc130 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE129_rand_18.c":112:21)
#loc131 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE129_rand_18.c":112:17)
#loc132 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE129_rand_18.c":112:24)
#loc133 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE129_rand_18.c":112:28)
#loc134 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE129_rand_18.c":112:26)
#loc135 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE129_rand_18.c":113:13)
#loc136 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE129_rand_18.c":114:37)
#loc137 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE129_rand_18.c":114:30)
#loc138 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE129_rand_18.c":114:17)
#loc139 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE129_rand_18.c":112:33)
#loc140 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE129_rand_18.c":112:32)
#loc141 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE129_rand_18.c":119:23)
#loc142 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE129_rand_18.c":119:13)
#loc143 = loc(fused[#loc1, #loc2])
#loc144 = loc(fused[#loc3, #loc4])
#loc145 = loc(fused[#loc5, #loc6])
#loc146 = loc(fused[#loc8, #loc9])
#loc147 = loc(fused[#loc10, #loc11])
#loc148 = loc(fused[#loc12, #loc13])
#loc149 = loc(fused[#loc14, #loc15])
#loc150 = loc(fused[#loc18, #loc16])
#loc151 = loc(fused[#loc19, #loc20])
#loc152 = loc(fused[#loc22, #loc21])
#loc153 = loc(fused[#loc23, #loc24])
#loc154 = loc(fused[#loc25, #loc26])
#loc155 = loc(fused[#loc27, #loc28])
#loc156 = loc(fused[#loc29, #loc30, #loc31, #loc26])
#loc157 = loc(fused[#loc34, #loc32])
#loc158 = loc(fused[#loc35, #loc36])
#loc159 = loc(fused[#loc38, #loc37])
#loc160 = loc(fused[#loc39, #loc40])
#loc161 = loc(fused[#loc42, #loc36])
#loc162 = loc(fused[#loc47, #loc46])
#loc163 = loc(fused[#loc49, #loc50])
#loc164 = loc(fused[#loc51, #loc52])
#loc165 = loc(fused[#loc53, #loc54])
#loc166 = loc(fused[#loc56, #loc57])
#loc167 = loc(fused[#loc58, #loc59])
#loc168 = loc(fused[#loc60, #loc61])
#loc169 = loc(fused[#loc62, #loc63])
#loc170 = loc(fused[#loc66, #loc64])
#loc171 = loc(fused[#loc67, #loc68])
#loc172 = loc(fused[#loc70, #loc69])
#loc173 = loc(fused[#loc71, #loc72])
#loc174 = loc(fused[#loc73, #loc74])
#loc175 = loc(fused[#loc75, #loc76])
#loc176 = loc(fused[#loc78, #loc80])
#loc177 = loc(fused[#loc81, #loc82, #loc83, #loc74])
#loc178 = loc(fused[#loc86, #loc84])
#loc179 = loc(fused[#loc87, #loc88])
#loc180 = loc(fused[#loc90, #loc89])
#loc181 = loc(fused[#loc91, #loc92])
#loc182 = loc(fused[#loc94, #loc88])
#loc183 = loc(fused[#loc99, #loc98])
#loc184 = loc(fused[#loc101, #loc102])
#loc185 = loc(fused[#loc103, #loc104])
#loc186 = loc(fused[#loc105, #loc106])
#loc187 = loc(fused[#loc107, #loc108])
#loc188 = loc(fused[#loc111, #loc109])
#loc189 = loc(fused[#loc112, #loc113])
#loc190 = loc(fused[#loc115, #loc114])
#loc191 = loc(fused[#loc116, #loc117])
#loc192 = loc(fused[#loc118, #loc119])
#loc193 = loc(fused[#loc120, #loc121])
#loc194 = loc(fused[#loc122, #loc123, #loc124, #loc119])
#loc195 = loc(fused[#loc127, #loc125])
#loc196 = loc(fused[#loc128, #loc129])
#loc197 = loc(fused[#loc131, #loc130])
#loc198 = loc(fused[#loc132, #loc133])
#loc199 = loc(fused[#loc135, #loc129])
#loc200 = loc(fused[#loc140, #loc139])
