!s32i = !cir.int<s, 32>
!u64i = !cir.int<u, 64>
!u8i = !cir.int<u, 8>
!void = !cir.void
#fn_attr = #cir<extra({inline = #cir.inline<no>, nothrow = #cir.nothrow, optnone = #cir.optnone, uwtable = #cir.uwtable<async>})>
module @"/workspaces/juliet-c/testcases/CWE121_Stack_Based_Buffer_Overflow/s01/CWE121_Stack_Based_Buffer_Overflow__CWE131_memcpy_32.c" attributes {cir.lang = #cir.lang<c>, cir.sob = #cir.signed_overflow_behavior<undefined>, cir.triple = "x86_64-unknown-linux-gnu", cir.type_size_info = #cir.type_size_info<char = 8, int = 32, size_t = 64>, cir.uwtable = #cir.uwtable<async>, dlti.dl_spec = #dlti.dl_spec<i8 = dense<8> : vector<2xi64>, i1 = dense<8> : vector<2xi64>, !llvm.ptr = dense<64> : vector<4xi64>, f16 = dense<16> : vector<2xi64>, !llvm.ptr<270> = dense<32> : vector<4xi64>, f64 = dense<64> : vector<2xi64>, i32 = dense<32> : vector<2xi64>, i16 = dense<16> : vector<2xi64>, !llvm.ptr<272> = dense<64> : vector<4xi64>, !llvm.ptr<271> = dense<32> : vector<4xi64>, f128 = dense<128> : vector<2xi64>, f80 = dense<128> : vector<2xi64>, i128 = dense<128> : vector<2xi64>, i64 = dense<64> : vector<2xi64>, "dlti.endianness" = "little", "dlti.mangling_mode" = "e", "dlti.stack_alignment" = 128 : i64>} {
  cir.func private @printIntLine(!s32i) loc(#loc87)
  cir.func no_proto @CWE121_Stack_Based_Buffer_Overflow__CWE131_memcpy_32_bad() extra(#fn_attr) {
    %0 = cir.alloca !cir.ptr<!s32i>, !cir.ptr<!cir.ptr<!s32i>>, ["data"] {alignment = 8 : i64} loc(#loc89)
    %1 = cir.alloca !cir.ptr<!cir.ptr<!s32i>>, !cir.ptr<!cir.ptr<!cir.ptr<!s32i>>>, ["dataPtr1", init] {alignment = 8 : i64} loc(#loc90)
    %2 = cir.alloca !cir.ptr<!cir.ptr<!s32i>>, !cir.ptr<!cir.ptr<!cir.ptr<!s32i>>>, ["dataPtr2", init] {alignment = 8 : i64} loc(#loc91)
    cir.store %0, %1 : !cir.ptr<!cir.ptr<!s32i>>, !cir.ptr<!cir.ptr<!cir.ptr<!s32i>>> loc(#loc90)
    cir.store %0, %2 : !cir.ptr<!cir.ptr<!s32i>>, !cir.ptr<!cir.ptr<!cir.ptr<!s32i>>> loc(#loc91)
    %3 = cir.const #cir.ptr<null> : !cir.ptr<!s32i> loc(#loc11)
    cir.store %3, %0 : !cir.ptr<!s32i>, !cir.ptr<!cir.ptr<!s32i>> loc(#loc92)
    cir.scope {
      %4 = cir.alloca !cir.ptr<!s32i>, !cir.ptr<!cir.ptr<!s32i>>, ["data", init] {alignment = 8 : i64} loc(#loc94)
      %5 = cir.load deref %1 : !cir.ptr<!cir.ptr<!cir.ptr<!s32i>>>, !cir.ptr<!cir.ptr<!s32i>> loc(#loc16)
      %6 = cir.load %5 : !cir.ptr<!cir.ptr<!s32i>>, !cir.ptr<!s32i> loc(#loc17)
      cir.store %6, %4 : !cir.ptr<!s32i>, !cir.ptr<!cir.ptr<!s32i>> loc(#loc94)
      %7 = cir.const #cir.int<10> : !s32i loc(#loc18)
      %8 = cir.cast(integral, %7 : !s32i), !u64i loc(#loc18)
      %9 = cir.alloca !u8i, !cir.ptr<!u8i>, %8 : !u64i, ["bi_alloca"] {alignment = 16 : i64} loc(#loc18)
      %10 = cir.cast(bitcast, %9 : !cir.ptr<!u8i>), !cir.ptr<!void> loc(#loc18)
      %11 = cir.cast(bitcast, %10 : !cir.ptr<!void>), !cir.ptr<!s32i> loc(#loc18)
      cir.store %11, %4 : !cir.ptr<!s32i>, !cir.ptr<!cir.ptr<!s32i>> loc(#loc95)
      %12 = cir.load %4 : !cir.ptr<!cir.ptr<!s32i>>, !cir.ptr<!s32i> loc(#loc20)
      %13 = cir.load deref %1 : !cir.ptr<!cir.ptr<!cir.ptr<!s32i>>>, !cir.ptr<!cir.ptr<!s32i>> loc(#loc21)
      cir.store %12, %13 : !cir.ptr<!s32i>, !cir.ptr<!cir.ptr<!s32i>> loc(#loc96)
    } loc(#loc93)
    cir.scope {
      %4 = cir.alloca !cir.ptr<!s32i>, !cir.ptr<!cir.ptr<!s32i>>, ["data", init] {alignment = 8 : i64} loc(#loc98)
      %5 = cir.load deref %2 : !cir.ptr<!cir.ptr<!cir.ptr<!s32i>>>, !cir.ptr<!cir.ptr<!s32i>> loc(#loc26)
      %6 = cir.load %5 : !cir.ptr<!cir.ptr<!s32i>>, !cir.ptr<!s32i> loc(#loc27)
      cir.store %6, %4 : !cir.ptr<!s32i>, !cir.ptr<!cir.ptr<!s32i>> loc(#loc98)
      cir.scope {
        %7 = cir.alloca !cir.array<!s32i x 10>, !cir.ptr<!cir.array<!s32i x 10>>, ["source"] {alignment = 16 : i64} loc(#loc100)
        %8 = cir.const #cir.zero : !cir.array<!s32i x 10> loc(#loc100)
        cir.store %8, %7 : !cir.array<!s32i x 10>, !cir.ptr<!cir.array<!s32i x 10>> loc(#loc100)
        %9 = cir.load %4 : !cir.ptr<!cir.ptr<!s32i>>, !cir.ptr<!s32i> loc(#loc32)
        %10 = cir.cast(bitcast, %9 : !cir.ptr<!s32i>), !cir.ptr<!void> loc(#loc32)
        %11 = cir.cast(array_to_ptrdecay, %7 : !cir.ptr<!cir.array<!s32i x 10>>), !cir.ptr<!s32i> loc(#loc33)
        %12 = cir.cast(bitcast, %11 : !cir.ptr<!s32i>), !cir.ptr<!void> loc(#loc33)
        %13 = cir.const #cir.int<10> : !s32i loc(#loc34)
        %14 = cir.cast(integral, %13 : !s32i), !u64i loc(#loc34)
        %15 = cir.const #cir.int<4> : !u64i loc(#loc101)
        %16 = cir.binop(mul, %14, %15) : !u64i loc(#loc102)
        cir.libc.memcpy %16 bytes from %12 to %10 : !u64i, !cir.ptr<!void> -> !cir.ptr<!void> loc(#loc103)
        %17 = cir.load %4 : !cir.ptr<!cir.ptr<!s32i>>, !cir.ptr<!s32i> loc(#loc39)
        %18 = cir.const #cir.int<0> : !s32i loc(#loc40)
        %19 = cir.ptr_stride(%17 : !cir.ptr<!s32i>, %18 : !s32i), !cir.ptr<!s32i> loc(#loc41)
        %20 = cir.load %19 : !cir.ptr<!s32i>, !s32i loc(#loc39)
        cir.call @printIntLine(%20) : (!s32i) -> () loc(#loc42)
      } loc(#loc99)
    } loc(#loc97)
    cir.return loc(#loc4)
  } loc(#loc88)
  cir.func no_proto @CWE121_Stack_Based_Buffer_Overflow__CWE131_memcpy_32_good() extra(#fn_attr) {
    %0 = cir.get_global @goodG2B : !cir.ptr<!cir.func<()>> loc(#loc105)
    cir.call %0() : (!cir.ptr<!cir.func<()>>) -> () loc(#loc45)
    cir.return loc(#loc44)
  } loc(#loc104)
  cir.func no_proto internal private @goodG2B() extra(#fn_attr) {
    %0 = cir.alloca !cir.ptr<!s32i>, !cir.ptr<!cir.ptr<!s32i>>, ["data"] {alignment = 8 : i64} loc(#loc107)
    %1 = cir.alloca !cir.ptr<!cir.ptr<!s32i>>, !cir.ptr<!cir.ptr<!cir.ptr<!s32i>>>, ["dataPtr1", init] {alignment = 8 : i64} loc(#loc108)
    %2 = cir.alloca !cir.ptr<!cir.ptr<!s32i>>, !cir.ptr<!cir.ptr<!cir.ptr<!s32i>>>, ["dataPtr2", init] {alignment = 8 : i64} loc(#loc109)
    cir.store %0, %1 : !cir.ptr<!cir.ptr<!s32i>>, !cir.ptr<!cir.ptr<!cir.ptr<!s32i>>> loc(#loc108)
    cir.store %0, %2 : !cir.ptr<!cir.ptr<!s32i>>, !cir.ptr<!cir.ptr<!cir.ptr<!s32i>>> loc(#loc109)
    %3 = cir.const #cir.ptr<null> : !cir.ptr<!s32i> loc(#loc55)
    cir.store %3, %0 : !cir.ptr<!s32i>, !cir.ptr<!cir.ptr<!s32i>> loc(#loc110)
    cir.scope {
      %4 = cir.alloca !cir.ptr<!s32i>, !cir.ptr<!cir.ptr<!s32i>>, ["data", init] {alignment = 8 : i64} loc(#loc112)
      %5 = cir.load deref %1 : !cir.ptr<!cir.ptr<!cir.ptr<!s32i>>>, !cir.ptr<!cir.ptr<!s32i>> loc(#loc60)
      %6 = cir.load %5 : !cir.ptr<!cir.ptr<!s32i>>, !cir.ptr<!s32i> loc(#loc61)
      cir.store %6, %4 : !cir.ptr<!s32i>, !cir.ptr<!cir.ptr<!s32i>> loc(#loc112)
      %7 = cir.const #cir.int<10> : !s32i loc(#loc62)
      %8 = cir.cast(integral, %7 : !s32i), !u64i loc(#loc62)
      %9 = cir.const #cir.int<4> : !u64i loc(#loc62)
      %10 = cir.binop(mul, %8, %9) : !u64i loc(#loc62)
      %11 = cir.alloca !u8i, !cir.ptr<!u8i>, %10 : !u64i, ["bi_alloca"] {alignment = 16 : i64} loc(#loc62)
      %12 = cir.cast(bitcast, %11 : !cir.ptr<!u8i>), !cir.ptr<!void> loc(#loc62)
      %13 = cir.cast(bitcast, %12 : !cir.ptr<!void>), !cir.ptr<!s32i> loc(#loc62)
      cir.store %13, %4 : !cir.ptr<!s32i>, !cir.ptr<!cir.ptr<!s32i>> loc(#loc113)
      %14 = cir.load %4 : !cir.ptr<!cir.ptr<!s32i>>, !cir.ptr<!s32i> loc(#loc64)
      %15 = cir.load deref %1 : !cir.ptr<!cir.ptr<!cir.ptr<!s32i>>>, !cir.ptr<!cir.ptr<!s32i>> loc(#loc65)
      cir.store %14, %15 : !cir.ptr<!s32i>, !cir.ptr<!cir.ptr<!s32i>> loc(#loc114)
    } loc(#loc111)
    cir.scope {
      %4 = cir.alloca !cir.ptr<!s32i>, !cir.ptr<!cir.ptr<!s32i>>, ["data", init] {alignment = 8 : i64} loc(#loc116)
      %5 = cir.load deref %2 : !cir.ptr<!cir.ptr<!cir.ptr<!s32i>>>, !cir.ptr<!cir.ptr<!s32i>> loc(#loc70)
      %6 = cir.load %5 : !cir.ptr<!cir.ptr<!s32i>>, !cir.ptr<!s32i> loc(#loc71)
      cir.store %6, %4 : !cir.ptr<!s32i>, !cir.ptr<!cir.ptr<!s32i>> loc(#loc116)
      cir.scope {
        %7 = cir.alloca !cir.array<!s32i x 10>, !cir.ptr<!cir.array<!s32i x 10>>, ["source"] {alignment = 16 : i64} loc(#loc118)
        %8 = cir.const #cir.zero : !cir.array<!s32i x 10> loc(#loc118)
        cir.store %8, %7 : !cir.array<!s32i x 10>, !cir.ptr<!cir.array<!s32i x 10>> loc(#loc118)
        %9 = cir.load %4 : !cir.ptr<!cir.ptr<!s32i>>, !cir.ptr<!s32i> loc(#loc76)
        %10 = cir.cast(bitcast, %9 : !cir.ptr<!s32i>), !cir.ptr<!void> loc(#loc76)
        %11 = cir.cast(array_to_ptrdecay, %7 : !cir.ptr<!cir.array<!s32i x 10>>), !cir.ptr<!s32i> loc(#loc77)
        %12 = cir.cast(bitcast, %11 : !cir.ptr<!s32i>), !cir.ptr<!void> loc(#loc77)
        %13 = cir.const #cir.int<10> : !s32i loc(#loc78)
        %14 = cir.cast(integral, %13 : !s32i), !u64i loc(#loc78)
        %15 = cir.const #cir.int<4> : !u64i loc(#loc119)
        %16 = cir.binop(mul, %14, %15) : !u64i loc(#loc120)
        cir.libc.memcpy %16 bytes from %12 to %10 : !u64i, !cir.ptr<!void> -> !cir.ptr<!void> loc(#loc121)
        %17 = cir.load %4 : !cir.ptr<!cir.ptr<!s32i>>, !cir.ptr<!s32i> loc(#loc83)
        %18 = cir.const #cir.int<0> : !s32i loc(#loc84)
        %19 = cir.ptr_stride(%17 : !cir.ptr<!s32i>, %18 : !s32i), !cir.ptr<!s32i> loc(#loc85)
        %20 = cir.load %19 : !cir.ptr<!s32i>, !s32i loc(#loc83)
        cir.call @printIntLine(%20) : (!s32i) -> () loc(#loc86)
      } loc(#loc117)
    } loc(#loc115)
    cir.return loc(#loc48)
  } loc(#loc106)
} loc(#loc)
#loc = loc("/workspaces/juliet-c/testcases/CWE121_Stack_Based_Buffer_Overflow/s01/CWE121_Stack_Based_Buffer_Overflow__CWE131_memcpy_32.c":0:0)
#loc1 = loc("../../../testcasesupport/std_testcase_io.h":18:1)
#loc2 = loc("../../../testcasesupport/std_testcase_io.h":18:33)
#loc3 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE131_memcpy_32.c":21:1)
#loc4 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE131_memcpy_32.c":42:1)
#loc5 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE131_memcpy_32.c":23:5)
#loc6 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE131_memcpy_32.c":23:11)
#loc7 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE131_memcpy_32.c":24:5)
#loc8 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE131_memcpy_32.c":24:24)
#loc9 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE131_memcpy_32.c":25:5)
#loc10 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE131_memcpy_32.c":25:24)
#loc11 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE131_memcpy_32.c":26:12)
#loc12 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE131_memcpy_32.c":26:5)
#loc13 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE131_memcpy_32.c":27:5)
#loc14 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE131_memcpy_32.c":32:5)
#loc15 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE131_memcpy_32.c":28:9)
#loc16 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE131_memcpy_32.c":28:23)
#loc17 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE131_memcpy_32.c":28:22)
#loc18 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE131_memcpy_32.c":30:23)
#loc19 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE131_memcpy_32.c":30:9)
#loc20 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE131_memcpy_32.c":31:21)
#loc21 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE131_memcpy_32.c":31:10)
#loc22 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE131_memcpy_32.c":31:9)
#loc23 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE131_memcpy_32.c":33:5)
#loc24 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE131_memcpy_32.c":41:5)
#loc25 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE131_memcpy_32.c":34:9)
#loc26 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE131_memcpy_32.c":34:23)
#loc27 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE131_memcpy_32.c":34:22)
#loc28 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE131_memcpy_32.c":35:9)
#loc29 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE131_memcpy_32.c":40:9)
#loc30 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE131_memcpy_32.c":36:13)
#loc31 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE131_memcpy_32.c":36:32)
#loc32 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE131_memcpy_32.c":38:20)
#loc33 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE131_memcpy_32.c":38:26)
#loc34 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE131_memcpy_32.c":38:34)
#loc35 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE131_memcpy_32.c":38:37)
#loc36 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE131_memcpy_32.c":38:47)
#loc37 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE131_memcpy_32.c":38:13)
#loc38 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE131_memcpy_32.c":38:48)
#loc39 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE131_memcpy_32.c":39:26)
#loc40 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE131_memcpy_32.c":39:31)
#loc41 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE131_memcpy_32.c":39:32)
#loc42 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE131_memcpy_32.c":39:13)
#loc43 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE131_memcpy_32.c":72:1)
#loc44 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE131_memcpy_32.c":75:1)
#loc45 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE131_memcpy_32.c":74:5)
#loc46 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE131_memcpy_32.c":74:13)
#loc47 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE131_memcpy_32.c":49:1)
#loc48 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE131_memcpy_32.c":70:1)
#loc49 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE131_memcpy_32.c":51:5)
#loc50 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE131_memcpy_32.c":51:11)
#loc51 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE131_memcpy_32.c":52:5)
#loc52 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE131_memcpy_32.c":52:24)
#loc53 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE131_memcpy_32.c":53:5)
#loc54 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE131_memcpy_32.c":53:24)
#loc55 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE131_memcpy_32.c":54:12)
#loc56 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE131_memcpy_32.c":54:5)
#loc57 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE131_memcpy_32.c":55:5)
#loc58 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE131_memcpy_32.c":60:5)
#loc59 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE131_memcpy_32.c":56:9)
#loc60 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE131_memcpy_32.c":56:23)
#loc61 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE131_memcpy_32.c":56:22)
#loc62 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE131_memcpy_32.c":58:23)
#loc63 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE131_memcpy_32.c":58:9)
#loc64 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE131_memcpy_32.c":59:21)
#loc65 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE131_memcpy_32.c":59:10)
#loc66 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE131_memcpy_32.c":59:9)
#loc67 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE131_memcpy_32.c":61:5)
#loc68 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE131_memcpy_32.c":69:5)
#loc69 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE131_memcpy_32.c":62:9)
#loc70 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE131_memcpy_32.c":62:23)
#loc71 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE131_memcpy_32.c":62:22)
#loc72 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE131_memcpy_32.c":63:9)
#loc73 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE131_memcpy_32.c":68:9)
#loc74 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE131_memcpy_32.c":64:13)
#loc75 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE131_memcpy_32.c":64:32)
#loc76 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE131_memcpy_32.c":66:20)
#loc77 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE131_memcpy_32.c":66:26)
#loc78 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE131_memcpy_32.c":66:34)
#loc79 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE131_memcpy_32.c":66:37)
#loc80 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE131_memcpy_32.c":66:47)
#loc81 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE131_memcpy_32.c":66:13)
#loc82 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE131_memcpy_32.c":66:48)
#loc83 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE131_memcpy_32.c":67:26)
#loc84 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE131_memcpy_32.c":67:31)
#loc85 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE131_memcpy_32.c":67:32)
#loc86 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE131_memcpy_32.c":67:13)
#loc87 = loc(fused[#loc1, #loc2])
#loc88 = loc(fused[#loc3, #loc4])
#loc89 = loc(fused[#loc5, #loc6])
#loc90 = loc(fused[#loc7, #loc8])
#loc91 = loc(fused[#loc9, #loc10])
#loc92 = loc(fused[#loc12, #loc11])
#loc93 = loc(fused[#loc13, #loc14])
#loc94 = loc(fused[#loc15, #loc16])
#loc95 = loc(fused[#loc19, #loc18])
#loc96 = loc(fused[#loc22, #loc20])
#loc97 = loc(fused[#loc23, #loc24])
#loc98 = loc(fused[#loc25, #loc26])
#loc99 = loc(fused[#loc28, #loc29])
#loc100 = loc(fused[#loc30, #loc31])
#loc101 = loc(fused[#loc35, #loc36])
#loc102 = loc(fused[#loc34, #loc36])
#loc103 = loc(fused[#loc37, #loc38])
#loc104 = loc(fused[#loc43, #loc44])
#loc105 = loc(fused[#loc45, #loc46])
#loc106 = loc(fused[#loc47, #loc48])
#loc107 = loc(fused[#loc49, #loc50])
#loc108 = loc(fused[#loc51, #loc52])
#loc109 = loc(fused[#loc53, #loc54])
#loc110 = loc(fused[#loc56, #loc55])
#loc111 = loc(fused[#loc57, #loc58])
#loc112 = loc(fused[#loc59, #loc60])
#loc113 = loc(fused[#loc63, #loc62])
#loc114 = loc(fused[#loc66, #loc64])
#loc115 = loc(fused[#loc67, #loc68])
#loc116 = loc(fused[#loc69, #loc70])
#loc117 = loc(fused[#loc72, #loc73])
#loc118 = loc(fused[#loc74, #loc75])
#loc119 = loc(fused[#loc79, #loc80])
#loc120 = loc(fused[#loc78, #loc80])
#loc121 = loc(fused[#loc81, #loc82])
