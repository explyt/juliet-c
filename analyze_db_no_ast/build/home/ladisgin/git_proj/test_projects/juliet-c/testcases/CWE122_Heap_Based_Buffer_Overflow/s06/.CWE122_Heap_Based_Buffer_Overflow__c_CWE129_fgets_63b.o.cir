!s32i = !cir.int<s, 32>
!s8i = !cir.int<s, 8>
!u64i = !cir.int<u, 64>
!void = !cir.void
#false = #cir.bool<false> : !cir.bool
#fn_attr = #cir<extra({nothrow = #cir.nothrow})>
#fn_attr1 = #cir<extra({inline = #cir.inline<no>, nothrow = #cir.nothrow, optnone = #cir.optnone})>
#loc14 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_63b.c":24:68)
#loc15 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_63b.c":24:74)
#loc84 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_63b.c":60:72)
#loc85 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_63b.c":60:78)
#loc156 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_63b.c":92:72)
#loc157 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_63b.c":92:78)
#true = #cir.bool<true> : !cir.bool
#loc235 = loc(fused[#loc14, #loc15])
#loc262 = loc(fused[#loc84, #loc85])
#loc289 = loc(fused[#loc156, #loc157])
module @"/home/ladisgin/git_proj/test_projects/juliet-c/testcases/CWE122_Heap_Based_Buffer_Overflow/s06/CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_63b.c" attributes {cir.lang = #cir.lang<c>, cir.sob = #cir.signed_overflow_behavior<undefined>, cir.triple = "x86_64-unknown-linux-gnu", dlti.dl_spec = #dlti.dl_spec<#dlti.dl_entry<f64, dense<64> : vector<2xi64>>, #dlti.dl_entry<f16, dense<16> : vector<2xi64>>, #dlti.dl_entry<!llvm.ptr<270>, dense<32> : vector<4xi64>>, #dlti.dl_entry<f128, dense<128> : vector<2xi64>>, #dlti.dl_entry<i32, dense<32> : vector<2xi64>>, #dlti.dl_entry<i64, dense<64> : vector<2xi64>>, #dlti.dl_entry<!llvm.ptr<271>, dense<32> : vector<4xi64>>, #dlti.dl_entry<!llvm.ptr<272>, dense<64> : vector<4xi64>>, #dlti.dl_entry<i128, dense<128> : vector<2xi64>>, #dlti.dl_entry<f80, dense<128> : vector<2xi64>>, #dlti.dl_entry<i8, dense<8> : vector<2xi64>>, #dlti.dl_entry<i16, dense<16> : vector<2xi64>>, #dlti.dl_entry<i1, dense<8> : vector<2xi64>>, #dlti.dl_entry<!llvm.ptr, dense<64> : vector<4xi64>>, #dlti.dl_entry<"dlti.endianness", "little">, #dlti.dl_entry<"dlti.stack_alignment", 128 : i64>>, llvm.data_layout = "e-m:e-p270:32:32-p271:32:32-p272:64:64-i64:64-i128:128-f80:128-n8:16:32:64-S128"} {
  cir.func private  @malloc(!u64i) -> !cir.ptr<!void> extra(#fn_attr) loc(#loc229)
  cir.func private  @exit(!s32i) extra(#fn_attr) loc(#loc230)
  cir.func private  @printIntLine(!s32i) loc(#loc231)
  cir.func private  @printLine(!cir.ptr<!s8i>) loc(#loc232)
  cir.global "private"  constant internal dsolocal @".str" = #cir.const_array<"ERROR: Array index is negative.\00" : !cir.array<!s8i x 32>> : !cir.array<!s8i x 32> {alignment = 1 : i64} loc(#loc9)
  cir.func private  @free(!cir.ptr<!void>) extra(#fn_attr) loc(#loc233)
  cir.func  @CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_63b_badSink(%arg0: !cir.ptr<!s32i> loc(fused[#loc14, #loc15])) extra(#fn_attr1) {
    %0 = cir.alloca !cir.ptr<!s32i>, !cir.ptr<!cir.ptr<!s32i>>, ["dataPtr", init] {alignment = 8 : i64} loc(#loc235)
    %1 = cir.alloca !s32i, !cir.ptr<!s32i>, ["data", init] {alignment = 4 : i64} loc(#loc236)
    cir.store %arg0, %0 : !cir.ptr<!s32i>, !cir.ptr<!cir.ptr<!s32i>> loc(#loc18)
    %2 = cir.load deref %0 : !cir.ptr<!cir.ptr<!s32i>>, !cir.ptr<!s32i> loc(#loc17)
    %3 = cir.load %2 : !cir.ptr<!s32i>, !s32i loc(#loc19)
    cir.store %3, %1 : !s32i, !cir.ptr<!s32i> loc(#loc236)
    cir.scope {
      %4 = cir.alloca !s32i, !cir.ptr<!s32i>, ["i"] {alignment = 4 : i64} loc(#loc238)
      %5 = cir.alloca !cir.ptr<!s32i>, !cir.ptr<!cir.ptr<!s32i>>, ["buffer", init] {alignment = 8 : i64} loc(#loc239)
      %6 = cir.get_global @malloc : !cir.ptr<!cir.func<!cir.ptr<!void> (!u64i)>> loc(#loc26)
      %7 = cir.const #cir.int<10> : !s32i loc(#loc27)
      %8 = cir.cast(integral, %7 : !s32i), !u64i loc(#loc27)
      %9 = cir.const #cir.int<4> : !u64i loc(#loc240)
      %10 = cir.binop(mul, %8, %9) : !u64i loc(#loc241)
      %11 = cir.call @malloc(%10) : (!u64i) -> !cir.ptr<!void> extra(#fn_attr) loc(#loc26)
      %12 = cir.cast(bitcast, %11 : !cir.ptr<!void>), !cir.ptr<!s32i> loc(#loc242)
      cir.store %12, %5 : !cir.ptr<!s32i>, !cir.ptr<!cir.ptr<!s32i>> loc(#loc239)
      cir.scope {
        %16 = cir.load %5 : !cir.ptr<!cir.ptr<!s32i>>, !cir.ptr<!s32i> loc(#loc32)
        %17 = cir.const #cir.ptr<null> : !cir.ptr<!void> loc(#loc33)
        %18 = cir.cast(bitcast, %17 : !cir.ptr<!void>), !cir.ptr<!s32i> loc(#loc33)
        %19 = cir.cmp(eq, %16, %18) : !cir.ptr<!s32i>, !s32i loc(#loc244)
        %20 = cir.cast(int_to_bool, %19 : !s32i), !cir.bool loc(#loc34)
        cir.if %20 {
          %21 = cir.get_global @exit : !cir.ptr<!cir.func<!void (!s32i)>> loc(#loc36)
          %22 = cir.const #cir.int<1> : !s32i loc(#loc37)
          %23 = cir.unary(minus, %22) : !s32i, !s32i loc(#loc38)
          cir.call @exit(%23) : (!s32i) -> () extra(#fn_attr) loc(#loc36)
        } loc(#loc245)
      } loc(#loc243)
      cir.scope {
        %16 = cir.const #cir.int<0> : !s32i loc(#loc41)
        cir.store %16, %4 : !s32i, !cir.ptr<!s32i> loc(#loc247)
        cir.for : cond {
          %17 = cir.load %4 : !cir.ptr<!s32i>, !s32i loc(#loc43)
          %18 = cir.const #cir.int<10> : !s32i loc(#loc44)
          %19 = cir.cmp(lt, %17, %18) : !s32i, !s32i loc(#loc248)
          %20 = cir.cast(int_to_bool, %19 : !s32i), !cir.bool loc(#loc45)
          cir.condition(%20) loc(#loc45)
        } body {
          cir.scope {
            %17 = cir.const #cir.int<0> : !s32i loc(#loc47)
            %18 = cir.load %5 : !cir.ptr<!cir.ptr<!s32i>>, !cir.ptr<!s32i> loc(#loc48)
            %19 = cir.load %4 : !cir.ptr<!s32i>, !s32i loc(#loc49)
            %20 = cir.ptr_stride(%18 : !cir.ptr<!s32i>, %19 : !s32i), !cir.ptr<!s32i> loc(#loc50)
            cir.store %17, %20 : !s32i, !cir.ptr<!s32i> loc(#loc250)
          } loc(#loc249)
          cir.yield loc(#loc40)
        } step {
          %17 = cir.load %4 : !cir.ptr<!s32i>, !s32i loc(#loc51)
          %18 = cir.unary(inc, %17) : !s32i, !s32i loc(#loc52)
          cir.store %18, %4 : !s32i, !cir.ptr<!s32i> loc(#loc251)
          cir.yield loc(#loc246)
        } loc(#loc246)
      } loc(#loc246)
      cir.scope {
        %16 = cir.load %1 : !cir.ptr<!s32i>, !s32i loc(#loc55)
        %17 = cir.const #cir.int<0> : !s32i loc(#loc56)
        %18 = cir.cmp(ge, %16, %17) : !s32i, !s32i loc(#loc253)
        %19 = cir.cast(int_to_bool, %18 : !s32i), !cir.bool loc(#loc57)
        cir.if %19 {
          %20 = cir.const #cir.int<1> : !s32i loc(#loc61)
          %21 = cir.load %5 : !cir.ptr<!cir.ptr<!s32i>>, !cir.ptr<!s32i> loc(#loc62)
          %22 = cir.load %1 : !cir.ptr<!s32i>, !s32i loc(#loc63)
          %23 = cir.ptr_stride(%21 : !cir.ptr<!s32i>, %22 : !s32i), !cir.ptr<!s32i> loc(#loc64)
          cir.store %20, %23 : !s32i, !cir.ptr<!s32i> loc(#loc255)
          cir.scope {
            %24 = cir.const #cir.int<0> : !s32i loc(#loc67)
            cir.store %24, %4 : !s32i, !cir.ptr<!s32i> loc(#loc257)
            cir.for : cond {
              %25 = cir.load %4 : !cir.ptr<!s32i>, !s32i loc(#loc69)
              %26 = cir.const #cir.int<10> : !s32i loc(#loc70)
              %27 = cir.cmp(lt, %25, %26) : !s32i, !s32i loc(#loc258)
              %28 = cir.cast(int_to_bool, %27 : !s32i), !cir.bool loc(#loc71)
              cir.condition(%28) loc(#loc71)
            } body {
              cir.scope {
                %25 = cir.load %5 : !cir.ptr<!cir.ptr<!s32i>>, !cir.ptr<!s32i> loc(#loc73)
                %26 = cir.load %4 : !cir.ptr<!s32i>, !s32i loc(#loc74)
                %27 = cir.ptr_stride(%25 : !cir.ptr<!s32i>, %26 : !s32i), !cir.ptr<!s32i> loc(#loc75)
                %28 = cir.load %27 : !cir.ptr<!s32i>, !s32i loc(#loc73)
                cir.call @printIntLine(%28) : (!s32i) -> () loc(#loc76)
              } loc(#loc259)
              cir.yield loc(#loc66)
            } step {
              %25 = cir.load %4 : !cir.ptr<!s32i>, !s32i loc(#loc77)
              %26 = cir.unary(inc, %25) : !s32i, !s32i loc(#loc78)
              cir.store %26, %4 : !s32i, !cir.ptr<!s32i> loc(#loc260)
              cir.yield loc(#loc256)
            } loc(#loc256)
          } loc(#loc256)
        } else {
          %20 = cir.get_global @".str" : !cir.ptr<!cir.array<!s8i x 32>> loc(#loc9)
          %21 = cir.cast(array_to_ptrdecay, %20 : !cir.ptr<!cir.array<!s8i x 32>>), !cir.ptr<!s8i> loc(#loc9)
          cir.call @printLine(%21) : (!cir.ptr<!s8i>) -> () loc(#loc79)
        } loc(#loc254)
      } loc(#loc252)
      %13 = cir.get_global @free : !cir.ptr<!cir.func<!void (!cir.ptr<!void>)>> loc(#loc80)
      %14 = cir.load %5 : !cir.ptr<!cir.ptr<!s32i>>, !cir.ptr<!s32i> loc(#loc81)
      %15 = cir.cast(bitcast, %14 : !cir.ptr<!s32i>), !cir.ptr<!void> loc(#loc81)
      cir.call @free(%15) : (!cir.ptr<!void>) -> () extra(#fn_attr) loc(#loc80)
    } loc(#loc237)
    cir.return loc(#loc13)
  } loc(#loc234)
  cir.func  @CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_63b_goodG2BSink(%arg0: !cir.ptr<!s32i> loc(fused[#loc84, #loc85])) extra(#fn_attr1) {
    %0 = cir.alloca !cir.ptr<!s32i>, !cir.ptr<!cir.ptr<!s32i>>, ["dataPtr", init] {alignment = 8 : i64} loc(#loc262)
    %1 = cir.alloca !s32i, !cir.ptr<!s32i>, ["data", init] {alignment = 4 : i64} loc(#loc263)
    cir.store %arg0, %0 : !cir.ptr<!s32i>, !cir.ptr<!cir.ptr<!s32i>> loc(#loc88)
    %2 = cir.load deref %0 : !cir.ptr<!cir.ptr<!s32i>>, !cir.ptr<!s32i> loc(#loc87)
    %3 = cir.load %2 : !cir.ptr<!s32i>, !s32i loc(#loc89)
    cir.store %3, %1 : !s32i, !cir.ptr<!s32i> loc(#loc263)
    cir.scope {
      %4 = cir.alloca !s32i, !cir.ptr<!s32i>, ["i"] {alignment = 4 : i64} loc(#loc265)
      %5 = cir.alloca !cir.ptr<!s32i>, !cir.ptr<!cir.ptr<!s32i>>, ["buffer", init] {alignment = 8 : i64} loc(#loc266)
      %6 = cir.get_global @malloc : !cir.ptr<!cir.func<!cir.ptr<!void> (!u64i)>> loc(#loc96)
      %7 = cir.const #cir.int<10> : !s32i loc(#loc97)
      %8 = cir.cast(integral, %7 : !s32i), !u64i loc(#loc97)
      %9 = cir.const #cir.int<4> : !u64i loc(#loc267)
      %10 = cir.binop(mul, %8, %9) : !u64i loc(#loc268)
      %11 = cir.call @malloc(%10) : (!u64i) -> !cir.ptr<!void> extra(#fn_attr) loc(#loc96)
      %12 = cir.cast(bitcast, %11 : !cir.ptr<!void>), !cir.ptr<!s32i> loc(#loc269)
      cir.store %12, %5 : !cir.ptr<!s32i>, !cir.ptr<!cir.ptr<!s32i>> loc(#loc266)
      cir.scope {
        %16 = cir.load %5 : !cir.ptr<!cir.ptr<!s32i>>, !cir.ptr<!s32i> loc(#loc102)
        %17 = cir.const #cir.ptr<null> : !cir.ptr<!void> loc(#loc103)
        %18 = cir.cast(bitcast, %17 : !cir.ptr<!void>), !cir.ptr<!s32i> loc(#loc103)
        %19 = cir.cmp(eq, %16, %18) : !cir.ptr<!s32i>, !s32i loc(#loc271)
        %20 = cir.cast(int_to_bool, %19 : !s32i), !cir.bool loc(#loc104)
        cir.if %20 {
          %21 = cir.get_global @exit : !cir.ptr<!cir.func<!void (!s32i)>> loc(#loc106)
          %22 = cir.const #cir.int<1> : !s32i loc(#loc107)
          %23 = cir.unary(minus, %22) : !s32i, !s32i loc(#loc108)
          cir.call @exit(%23) : (!s32i) -> () extra(#fn_attr) loc(#loc106)
        } loc(#loc272)
      } loc(#loc270)
      cir.scope {
        %16 = cir.const #cir.int<0> : !s32i loc(#loc111)
        cir.store %16, %4 : !s32i, !cir.ptr<!s32i> loc(#loc274)
        cir.for : cond {
          %17 = cir.load %4 : !cir.ptr<!s32i>, !s32i loc(#loc113)
          %18 = cir.const #cir.int<10> : !s32i loc(#loc114)
          %19 = cir.cmp(lt, %17, %18) : !s32i, !s32i loc(#loc275)
          %20 = cir.cast(int_to_bool, %19 : !s32i), !cir.bool loc(#loc115)
          cir.condition(%20) loc(#loc115)
        } body {
          cir.scope {
            %17 = cir.const #cir.int<0> : !s32i loc(#loc117)
            %18 = cir.load %5 : !cir.ptr<!cir.ptr<!s32i>>, !cir.ptr<!s32i> loc(#loc118)
            %19 = cir.load %4 : !cir.ptr<!s32i>, !s32i loc(#loc119)
            %20 = cir.ptr_stride(%18 : !cir.ptr<!s32i>, %19 : !s32i), !cir.ptr<!s32i> loc(#loc120)
            cir.store %17, %20 : !s32i, !cir.ptr<!s32i> loc(#loc277)
          } loc(#loc276)
          cir.yield loc(#loc110)
        } step {
          %17 = cir.load %4 : !cir.ptr<!s32i>, !s32i loc(#loc121)
          %18 = cir.unary(inc, %17) : !s32i, !s32i loc(#loc122)
          cir.store %18, %4 : !s32i, !cir.ptr<!s32i> loc(#loc278)
          cir.yield loc(#loc273)
        } loc(#loc273)
      } loc(#loc273)
      cir.scope {
        %16 = cir.load %1 : !cir.ptr<!s32i>, !s32i loc(#loc125)
        %17 = cir.const #cir.int<0> : !s32i loc(#loc126)
        %18 = cir.cmp(ge, %16, %17) : !s32i, !s32i loc(#loc280)
        %19 = cir.cast(int_to_bool, %18 : !s32i), !cir.bool loc(#loc127)
        cir.if %19 {
          %20 = cir.const #cir.int<1> : !s32i loc(#loc131)
          %21 = cir.load %5 : !cir.ptr<!cir.ptr<!s32i>>, !cir.ptr<!s32i> loc(#loc132)
          %22 = cir.load %1 : !cir.ptr<!s32i>, !s32i loc(#loc133)
          %23 = cir.ptr_stride(%21 : !cir.ptr<!s32i>, %22 : !s32i), !cir.ptr<!s32i> loc(#loc134)
          cir.store %20, %23 : !s32i, !cir.ptr<!s32i> loc(#loc282)
          cir.scope {
            %24 = cir.const #cir.int<0> : !s32i loc(#loc137)
            cir.store %24, %4 : !s32i, !cir.ptr<!s32i> loc(#loc284)
            cir.for : cond {
              %25 = cir.load %4 : !cir.ptr<!s32i>, !s32i loc(#loc139)
              %26 = cir.const #cir.int<10> : !s32i loc(#loc140)
              %27 = cir.cmp(lt, %25, %26) : !s32i, !s32i loc(#loc285)
              %28 = cir.cast(int_to_bool, %27 : !s32i), !cir.bool loc(#loc141)
              cir.condition(%28) loc(#loc141)
            } body {
              cir.scope {
                %25 = cir.load %5 : !cir.ptr<!cir.ptr<!s32i>>, !cir.ptr<!s32i> loc(#loc143)
                %26 = cir.load %4 : !cir.ptr<!s32i>, !s32i loc(#loc144)
                %27 = cir.ptr_stride(%25 : !cir.ptr<!s32i>, %26 : !s32i), !cir.ptr<!s32i> loc(#loc145)
                %28 = cir.load %27 : !cir.ptr<!s32i>, !s32i loc(#loc143)
                cir.call @printIntLine(%28) : (!s32i) -> () loc(#loc146)
              } loc(#loc286)
              cir.yield loc(#loc136)
            } step {
              %25 = cir.load %4 : !cir.ptr<!s32i>, !s32i loc(#loc147)
              %26 = cir.unary(inc, %25) : !s32i, !s32i loc(#loc148)
              cir.store %26, %4 : !s32i, !cir.ptr<!s32i> loc(#loc287)
              cir.yield loc(#loc283)
            } loc(#loc283)
          } loc(#loc283)
        } else {
          %20 = cir.get_global @".str" : !cir.ptr<!cir.array<!s8i x 32>> loc(#loc149)
          %21 = cir.cast(array_to_ptrdecay, %20 : !cir.ptr<!cir.array<!s8i x 32>>), !cir.ptr<!s8i> loc(#loc149)
          cir.call @printLine(%21) : (!cir.ptr<!s8i>) -> () loc(#loc150)
        } loc(#loc281)
      } loc(#loc279)
      %13 = cir.get_global @free : !cir.ptr<!cir.func<!void (!cir.ptr<!void>)>> loc(#loc151)
      %14 = cir.load %5 : !cir.ptr<!cir.ptr<!s32i>>, !cir.ptr<!s32i> loc(#loc152)
      %15 = cir.cast(bitcast, %14 : !cir.ptr<!s32i>), !cir.ptr<!void> loc(#loc152)
      cir.call @free(%15) : (!cir.ptr<!void>) -> () extra(#fn_attr) loc(#loc151)
    } loc(#loc264)
    cir.return loc(#loc83)
  } loc(#loc261)
  cir.global "private"  constant internal dsolocal @".str1" = #cir.const_array<"ERROR: Array index is out-of-bounds\00" : !cir.array<!s8i x 36>> : !cir.array<!s8i x 36> {alignment = 1 : i64} loc(#loc153)
  cir.func  @CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_63b_goodB2GSink(%arg0: !cir.ptr<!s32i> loc(fused[#loc156, #loc157])) extra(#fn_attr1) {
    %0 = cir.alloca !cir.ptr<!s32i>, !cir.ptr<!cir.ptr<!s32i>>, ["dataPtr", init] {alignment = 8 : i64} loc(#loc289)
    %1 = cir.alloca !s32i, !cir.ptr<!s32i>, ["data", init] {alignment = 4 : i64} loc(#loc290)
    cir.store %arg0, %0 : !cir.ptr<!s32i>, !cir.ptr<!cir.ptr<!s32i>> loc(#loc160)
    %2 = cir.load deref %0 : !cir.ptr<!cir.ptr<!s32i>>, !cir.ptr<!s32i> loc(#loc159)
    %3 = cir.load %2 : !cir.ptr<!s32i>, !s32i loc(#loc161)
    cir.store %3, %1 : !s32i, !cir.ptr<!s32i> loc(#loc290)
    cir.scope {
      %4 = cir.alloca !s32i, !cir.ptr<!s32i>, ["i"] {alignment = 4 : i64} loc(#loc292)
      %5 = cir.alloca !cir.ptr<!s32i>, !cir.ptr<!cir.ptr<!s32i>>, ["buffer", init] {alignment = 8 : i64} loc(#loc293)
      %6 = cir.get_global @malloc : !cir.ptr<!cir.func<!cir.ptr<!void> (!u64i)>> loc(#loc168)
      %7 = cir.const #cir.int<10> : !s32i loc(#loc169)
      %8 = cir.cast(integral, %7 : !s32i), !u64i loc(#loc169)
      %9 = cir.const #cir.int<4> : !u64i loc(#loc294)
      %10 = cir.binop(mul, %8, %9) : !u64i loc(#loc295)
      %11 = cir.call @malloc(%10) : (!u64i) -> !cir.ptr<!void> extra(#fn_attr) loc(#loc168)
      %12 = cir.cast(bitcast, %11 : !cir.ptr<!void>), !cir.ptr<!s32i> loc(#loc296)
      cir.store %12, %5 : !cir.ptr<!s32i>, !cir.ptr<!cir.ptr<!s32i>> loc(#loc293)
      cir.scope {
        %16 = cir.load %5 : !cir.ptr<!cir.ptr<!s32i>>, !cir.ptr<!s32i> loc(#loc174)
        %17 = cir.const #cir.ptr<null> : !cir.ptr<!void> loc(#loc175)
        %18 = cir.cast(bitcast, %17 : !cir.ptr<!void>), !cir.ptr<!s32i> loc(#loc175)
        %19 = cir.cmp(eq, %16, %18) : !cir.ptr<!s32i>, !s32i loc(#loc298)
        %20 = cir.cast(int_to_bool, %19 : !s32i), !cir.bool loc(#loc176)
        cir.if %20 {
          %21 = cir.get_global @exit : !cir.ptr<!cir.func<!void (!s32i)>> loc(#loc178)
          %22 = cir.const #cir.int<1> : !s32i loc(#loc179)
          %23 = cir.unary(minus, %22) : !s32i, !s32i loc(#loc180)
          cir.call @exit(%23) : (!s32i) -> () extra(#fn_attr) loc(#loc178)
        } loc(#loc299)
      } loc(#loc297)
      cir.scope {
        %16 = cir.const #cir.int<0> : !s32i loc(#loc183)
        cir.store %16, %4 : !s32i, !cir.ptr<!s32i> loc(#loc301)
        cir.for : cond {
          %17 = cir.load %4 : !cir.ptr<!s32i>, !s32i loc(#loc185)
          %18 = cir.const #cir.int<10> : !s32i loc(#loc186)
          %19 = cir.cmp(lt, %17, %18) : !s32i, !s32i loc(#loc302)
          %20 = cir.cast(int_to_bool, %19 : !s32i), !cir.bool loc(#loc187)
          cir.condition(%20) loc(#loc187)
        } body {
          cir.scope {
            %17 = cir.const #cir.int<0> : !s32i loc(#loc189)
            %18 = cir.load %5 : !cir.ptr<!cir.ptr<!s32i>>, !cir.ptr<!s32i> loc(#loc190)
            %19 = cir.load %4 : !cir.ptr<!s32i>, !s32i loc(#loc191)
            %20 = cir.ptr_stride(%18 : !cir.ptr<!s32i>, %19 : !s32i), !cir.ptr<!s32i> loc(#loc192)
            cir.store %17, %20 : !s32i, !cir.ptr<!s32i> loc(#loc304)
          } loc(#loc303)
          cir.yield loc(#loc182)
        } step {
          %17 = cir.load %4 : !cir.ptr<!s32i>, !s32i loc(#loc193)
          %18 = cir.unary(inc, %17) : !s32i, !s32i loc(#loc194)
          cir.store %18, %4 : !s32i, !cir.ptr<!s32i> loc(#loc305)
          cir.yield loc(#loc300)
        } loc(#loc300)
      } loc(#loc300)
      cir.scope {
        %16 = cir.load %1 : !cir.ptr<!s32i>, !s32i loc(#loc197)
        %17 = cir.const #cir.int<0> : !s32i loc(#loc198)
        %18 = cir.cmp(ge, %16, %17) : !s32i, !s32i loc(#loc307)
        %19 = cir.cast(int_to_bool, %18 : !s32i), !cir.bool loc(#loc199)
        %20 = cir.ternary(%19, true {
          %21 = cir.load %1 : !cir.ptr<!s32i>, !s32i loc(#loc201)
          %22 = cir.const #cir.int<10> : !s32i loc(#loc202)
          %23 = cir.cmp(lt, %21, %22) : !s32i, !s32i loc(#loc308)
          %24 = cir.cast(int_to_bool, %23 : !s32i), !cir.bool loc(#loc204)
          %25 = cir.ternary(%24, true {
            %26 = cir.const #true loc(#loc200)
            cir.yield %26 : !cir.bool loc(#loc200)
          }, false {
            %26 = cir.const #false loc(#loc200)
            cir.yield %26 : !cir.bool loc(#loc200)
          }) : (!cir.bool) -> !cir.bool loc(#loc200)
          cir.yield %25 : !cir.bool loc(#loc200)
        }, false {
          %21 = cir.const #false loc(#loc200)
          cir.yield %21 : !cir.bool loc(#loc200)
        }) : (!cir.bool) -> !cir.bool loc(#loc200)
        cir.if %20 {
          %21 = cir.const #cir.int<1> : !s32i loc(#loc208)
          %22 = cir.load %5 : !cir.ptr<!cir.ptr<!s32i>>, !cir.ptr<!s32i> loc(#loc209)
          %23 = cir.load %1 : !cir.ptr<!s32i>, !s32i loc(#loc210)
          %24 = cir.ptr_stride(%22 : !cir.ptr<!s32i>, %23 : !s32i), !cir.ptr<!s32i> loc(#loc211)
          cir.store %21, %24 : !s32i, !cir.ptr<!s32i> loc(#loc310)
          cir.scope {
            %25 = cir.const #cir.int<0> : !s32i loc(#loc214)
            cir.store %25, %4 : !s32i, !cir.ptr<!s32i> loc(#loc312)
            cir.for : cond {
              %26 = cir.load %4 : !cir.ptr<!s32i>, !s32i loc(#loc216)
              %27 = cir.const #cir.int<10> : !s32i loc(#loc217)
              %28 = cir.cmp(lt, %26, %27) : !s32i, !s32i loc(#loc313)
              %29 = cir.cast(int_to_bool, %28 : !s32i), !cir.bool loc(#loc218)
              cir.condition(%29) loc(#loc218)
            } body {
              cir.scope {
                %26 = cir.load %5 : !cir.ptr<!cir.ptr<!s32i>>, !cir.ptr<!s32i> loc(#loc220)
                %27 = cir.load %4 : !cir.ptr<!s32i>, !s32i loc(#loc221)
                %28 = cir.ptr_stride(%26 : !cir.ptr<!s32i>, %27 : !s32i), !cir.ptr<!s32i> loc(#loc222)
                %29 = cir.load %28 : !cir.ptr<!s32i>, !s32i loc(#loc220)
                cir.call @printIntLine(%29) : (!s32i) -> () loc(#loc223)
              } loc(#loc314)
              cir.yield loc(#loc213)
            } step {
              %26 = cir.load %4 : !cir.ptr<!s32i>, !s32i loc(#loc224)
              %27 = cir.unary(inc, %26) : !s32i, !s32i loc(#loc225)
              cir.store %27, %4 : !s32i, !cir.ptr<!s32i> loc(#loc315)
              cir.yield loc(#loc311)
            } loc(#loc311)
          } loc(#loc311)
        } else {
          %21 = cir.get_global @".str1" : !cir.ptr<!cir.array<!s8i x 36>> loc(#loc153)
          %22 = cir.cast(array_to_ptrdecay, %21 : !cir.ptr<!cir.array<!s8i x 36>>), !cir.ptr<!s8i> loc(#loc153)
          cir.call @printLine(%22) : (!cir.ptr<!s8i>) -> () loc(#loc226)
        } loc(#loc309)
      } loc(#loc306)
      %13 = cir.get_global @free : !cir.ptr<!cir.func<!void (!cir.ptr<!void>)>> loc(#loc227)
      %14 = cir.load %5 : !cir.ptr<!cir.ptr<!s32i>>, !cir.ptr<!s32i> loc(#loc228)
      %15 = cir.cast(bitcast, %14 : !cir.ptr<!s32i>), !cir.ptr<!void> loc(#loc228)
      cir.call @free(%15) : (!cir.ptr<!void>) -> () extra(#fn_attr) loc(#loc227)
    } loc(#loc291)
    cir.return loc(#loc155)
  } loc(#loc288)
} loc(#loc)
#loc = loc("/home/ladisgin/git_proj/test_projects/juliet-c/testcases/CWE122_Heap_Based_Buffer_Overflow/s06/CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_63b.c":0:0)
#loc1 = loc("/usr/include/stdlib.h":672:1)
#loc2 = loc("/usr/include/stdlib.h":672:45)
#loc3 = loc("/usr/include/stdlib.h":756:1)
#loc4 = loc("/usr/include/stdlib.h":756:70)
#loc5 = loc("../../../testcasesupport/std_testcase_io.h":18:1)
#loc6 = loc("../../../testcasesupport/std_testcase_io.h":18:33)
#loc7 = loc("../../../testcasesupport/std_testcase_io.h":14:1)
#loc8 = loc("../../../testcasesupport/std_testcase_io.h":14:33)
#loc9 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_63b.c":49:23)
#loc10 = loc("/usr/include/stdlib.h":687:1)
#loc11 = loc("/usr/include/stdlib.h":687:32)
#loc12 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_63b.c":24:1)
#loc13 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_63b.c":53:1)
#loc16 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_63b.c":26:5)
#loc17 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_63b.c":26:17)
#loc18 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_63b.c":25:1)
#loc19 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_63b.c":26:16)
#loc20 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_63b.c":27:5)
#loc21 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_63b.c":52:5)
#loc22 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_63b.c":28:9)
#loc23 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_63b.c":28:13)
#loc24 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_63b.c":29:9)
#loc25 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_63b.c":29:54)
#loc26 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_63b.c":29:31)
#loc27 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_63b.c":29:38)
#loc28 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_63b.c":29:43)
#loc29 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_63b.c":29:53)
#loc30 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_63b.c":30:9)
#loc31 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_63b.c":30:39)
#loc32 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_63b.c":30:13)
#loc33 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_63b.c":30:23)
#loc34 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_63b.c":30:20)
#loc35 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_63b.c":30:29)
#loc36 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_63b.c":30:30)
#loc37 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_63b.c":30:36)
#loc38 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_63b.c":30:35)
#loc39 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_63b.c":32:9)
#loc40 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_63b.c":35:9)
#loc41 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_63b.c":32:18)
#loc42 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_63b.c":32:14)
#loc43 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_63b.c":32:21)
#loc44 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_63b.c":32:25)
#loc45 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_63b.c":32:23)
#loc46 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_63b.c":33:9)
#loc47 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_63b.c":34:25)
#loc48 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_63b.c":34:13)
#loc49 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_63b.c":34:20)
#loc50 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_63b.c":34:21)
#loc51 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_63b.c":32:30)
#loc52 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_63b.c":32:29)
#loc53 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_63b.c":38:9)
#loc54 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_63b.c":50:9)
#loc55 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_63b.c":38:13)
#loc56 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_63b.c":38:21)
#loc57 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_63b.c":38:18)
#loc58 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_63b.c":39:9)
#loc59 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_63b.c":46:9)
#loc60 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_63b.c":48:9)
#loc61 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_63b.c":40:28)
#loc62 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_63b.c":40:13)
#loc63 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_63b.c":40:20)
#loc64 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_63b.c":40:24)
#loc65 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_63b.c":42:13)
#loc66 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_63b.c":45:13)
#loc67 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_63b.c":42:21)
#loc68 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_63b.c":42:17)
#loc69 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_63b.c":42:24)
#loc70 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_63b.c":42:28)
#loc71 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_63b.c":42:26)
#loc72 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_63b.c":43:13)
#loc73 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_63b.c":44:30)
#loc74 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_63b.c":44:37)
#loc75 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_63b.c":44:38)
#loc76 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_63b.c":44:17)
#loc77 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_63b.c":42:33)
#loc78 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_63b.c":42:32)
#loc79 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_63b.c":49:13)
#loc80 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_63b.c":51:9)
#loc81 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_63b.c":51:14)
#loc82 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_63b.c":60:1)
#loc83 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_63b.c":89:1)
#loc86 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_63b.c":62:5)
#loc87 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_63b.c":62:17)
#loc88 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_63b.c":61:1)
#loc89 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_63b.c":62:16)
#loc90 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_63b.c":63:5)
#loc91 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_63b.c":88:5)
#loc92 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_63b.c":64:9)
#loc93 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_63b.c":64:13)
#loc94 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_63b.c":65:9)
#loc95 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_63b.c":65:54)
#loc96 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_63b.c":65:31)
#loc97 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_63b.c":65:38)
#loc98 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_63b.c":65:43)
#loc99 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_63b.c":65:53)
#loc100 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_63b.c":66:9)
#loc101 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_63b.c":66:39)
#loc102 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_63b.c":66:13)
#loc103 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_63b.c":66:23)
#loc104 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_63b.c":66:20)
#loc105 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_63b.c":66:29)
#loc106 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_63b.c":66:30)
#loc107 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_63b.c":66:36)
#loc108 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_63b.c":66:35)
#loc109 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_63b.c":68:9)
#loc110 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_63b.c":71:9)
#loc111 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_63b.c":68:18)
#loc112 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_63b.c":68:14)
#loc113 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_63b.c":68:21)
#loc114 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_63b.c":68:25)
#loc115 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_63b.c":68:23)
#loc116 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_63b.c":69:9)
#loc117 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_63b.c":70:25)
#loc118 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_63b.c":70:13)
#loc119 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_63b.c":70:20)
#loc120 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_63b.c":70:21)
#loc121 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_63b.c":68:30)
#loc122 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_63b.c":68:29)
#loc123 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_63b.c":74:9)
#loc124 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_63b.c":86:9)
#loc125 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_63b.c":74:13)
#loc126 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_63b.c":74:21)
#loc127 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_63b.c":74:18)
#loc128 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_63b.c":75:9)
#loc129 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_63b.c":82:9)
#loc130 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_63b.c":84:9)
#loc131 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_63b.c":76:28)
#loc132 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_63b.c":76:13)
#loc133 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_63b.c":76:20)
#loc134 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_63b.c":76:24)
#loc135 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_63b.c":78:13)
#loc136 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_63b.c":81:13)
#loc137 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_63b.c":78:21)
#loc138 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_63b.c":78:17)
#loc139 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_63b.c":78:24)
#loc140 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_63b.c":78:28)
#loc141 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_63b.c":78:26)
#loc142 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_63b.c":79:13)
#loc143 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_63b.c":80:30)
#loc144 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_63b.c":80:37)
#loc145 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_63b.c":80:38)
#loc146 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_63b.c":80:17)
#loc147 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_63b.c":78:33)
#loc148 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_63b.c":78:32)
#loc149 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_63b.c":85:23)
#loc150 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_63b.c":85:13)
#loc151 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_63b.c":87:9)
#loc152 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_63b.c":87:14)
#loc153 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_63b.c":116:23)
#loc154 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_63b.c":92:1)
#loc155 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_63b.c":120:1)
#loc158 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_63b.c":94:5)
#loc159 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_63b.c":94:17)
#loc160 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_63b.c":93:1)
#loc161 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_63b.c":94:16)
#loc162 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_63b.c":95:5)
#loc163 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_63b.c":119:5)
#loc164 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_63b.c":96:9)
#loc165 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_63b.c":96:13)
#loc166 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_63b.c":97:9)
#loc167 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_63b.c":97:54)
#loc168 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_63b.c":97:31)
#loc169 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_63b.c":97:38)
#loc170 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_63b.c":97:43)
#loc171 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_63b.c":97:53)
#loc172 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_63b.c":98:9)
#loc173 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_63b.c":98:39)
#loc174 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_63b.c":98:13)
#loc175 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_63b.c":98:23)
#loc176 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_63b.c":98:20)
#loc177 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_63b.c":98:29)
#loc178 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_63b.c":98:30)
#loc179 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_63b.c":98:36)
#loc180 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_63b.c":98:35)
#loc181 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_63b.c":100:9)
#loc182 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_63b.c":103:9)
#loc183 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_63b.c":100:18)
#loc184 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_63b.c":100:14)
#loc185 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_63b.c":100:21)
#loc186 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_63b.c":100:25)
#loc187 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_63b.c":100:23)
#loc188 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_63b.c":101:9)
#loc189 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_63b.c":102:25)
#loc190 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_63b.c":102:13)
#loc191 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_63b.c":102:20)
#loc192 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_63b.c":102:21)
#loc193 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_63b.c":100:30)
#loc194 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_63b.c":100:29)
#loc195 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_63b.c":105:9)
#loc196 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_63b.c":117:9)
#loc197 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_63b.c":105:13)
#loc198 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_63b.c":105:21)
#loc199 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_63b.c":105:18)
#loc200 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_63b.c":105:23)
#loc201 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_63b.c":105:26)
#loc202 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_63b.c":105:34)
#loc203 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_63b.c":105:36)
#loc204 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_63b.c":105:31)
#loc205 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_63b.c":106:9)
#loc206 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_63b.c":113:9)
#loc207 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_63b.c":115:9)
#loc208 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_63b.c":107:28)
#loc209 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_63b.c":107:13)
#loc210 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_63b.c":107:20)
#loc211 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_63b.c":107:24)
#loc212 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_63b.c":109:13)
#loc213 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_63b.c":112:13)
#loc214 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_63b.c":109:21)
#loc215 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_63b.c":109:17)
#loc216 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_63b.c":109:24)
#loc217 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_63b.c":109:28)
#loc218 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_63b.c":109:26)
#loc219 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_63b.c":110:13)
#loc220 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_63b.c":111:30)
#loc221 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_63b.c":111:37)
#loc222 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_63b.c":111:38)
#loc223 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_63b.c":111:17)
#loc224 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_63b.c":109:33)
#loc225 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_63b.c":109:32)
#loc226 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_63b.c":116:13)
#loc227 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_63b.c":118:9)
#loc228 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_63b.c":118:14)
#loc229 = loc(fused[#loc1, #loc2])
#loc230 = loc(fused[#loc3, #loc4])
#loc231 = loc(fused[#loc5, #loc6])
#loc232 = loc(fused[#loc7, #loc8])
#loc233 = loc(fused[#loc10, #loc11])
#loc234 = loc(fused[#loc12, #loc13])
#loc236 = loc(fused[#loc16, #loc17])
#loc237 = loc(fused[#loc20, #loc21])
#loc238 = loc(fused[#loc22, #loc23])
#loc239 = loc(fused[#loc24, #loc25])
#loc240 = loc(fused[#loc28, #loc29])
#loc241 = loc(fused[#loc27, #loc29])
#loc242 = loc(fused[#loc26, #loc25])
#loc243 = loc(fused[#loc30, #loc31])
#loc244 = loc(fused[#loc32, #loc33])
#loc245 = loc(fused[#loc35, #loc31])
#loc246 = loc(fused[#loc39, #loc40])
#loc247 = loc(fused[#loc42, #loc41])
#loc248 = loc(fused[#loc43, #loc44])
#loc249 = loc(fused[#loc46, #loc40])
#loc250 = loc(fused[#loc48, #loc47])
#loc251 = loc(fused[#loc52, #loc51])
#loc252 = loc(fused[#loc53, #loc54])
#loc253 = loc(fused[#loc55, #loc56])
#loc254 = loc(fused[#loc58, #loc59, #loc60, #loc54])
#loc255 = loc(fused[#loc62, #loc61])
#loc256 = loc(fused[#loc65, #loc66])
#loc257 = loc(fused[#loc68, #loc67])
#loc258 = loc(fused[#loc69, #loc70])
#loc259 = loc(fused[#loc72, #loc66])
#loc260 = loc(fused[#loc78, #loc77])
#loc261 = loc(fused[#loc82, #loc83])
#loc263 = loc(fused[#loc86, #loc87])
#loc264 = loc(fused[#loc90, #loc91])
#loc265 = loc(fused[#loc92, #loc93])
#loc266 = loc(fused[#loc94, #loc95])
#loc267 = loc(fused[#loc98, #loc99])
#loc268 = loc(fused[#loc97, #loc99])
#loc269 = loc(fused[#loc96, #loc95])
#loc270 = loc(fused[#loc100, #loc101])
#loc271 = loc(fused[#loc102, #loc103])
#loc272 = loc(fused[#loc105, #loc101])
#loc273 = loc(fused[#loc109, #loc110])
#loc274 = loc(fused[#loc112, #loc111])
#loc275 = loc(fused[#loc113, #loc114])
#loc276 = loc(fused[#loc116, #loc110])
#loc277 = loc(fused[#loc118, #loc117])
#loc278 = loc(fused[#loc122, #loc121])
#loc279 = loc(fused[#loc123, #loc124])
#loc280 = loc(fused[#loc125, #loc126])
#loc281 = loc(fused[#loc128, #loc129, #loc130, #loc124])
#loc282 = loc(fused[#loc132, #loc131])
#loc283 = loc(fused[#loc135, #loc136])
#loc284 = loc(fused[#loc138, #loc137])
#loc285 = loc(fused[#loc139, #loc140])
#loc286 = loc(fused[#loc142, #loc136])
#loc287 = loc(fused[#loc148, #loc147])
#loc288 = loc(fused[#loc154, #loc155])
#loc290 = loc(fused[#loc158, #loc159])
#loc291 = loc(fused[#loc162, #loc163])
#loc292 = loc(fused[#loc164, #loc165])
#loc293 = loc(fused[#loc166, #loc167])
#loc294 = loc(fused[#loc170, #loc171])
#loc295 = loc(fused[#loc169, #loc171])
#loc296 = loc(fused[#loc168, #loc167])
#loc297 = loc(fused[#loc172, #loc173])
#loc298 = loc(fused[#loc174, #loc175])
#loc299 = loc(fused[#loc177, #loc173])
#loc300 = loc(fused[#loc181, #loc182])
#loc301 = loc(fused[#loc184, #loc183])
#loc302 = loc(fused[#loc185, #loc186])
#loc303 = loc(fused[#loc188, #loc182])
#loc304 = loc(fused[#loc190, #loc189])
#loc305 = loc(fused[#loc194, #loc193])
#loc306 = loc(fused[#loc195, #loc196])
#loc307 = loc(fused[#loc197, #loc198])
#loc308 = loc(fused[#loc201, #loc203])
#loc309 = loc(fused[#loc205, #loc206, #loc207, #loc196])
#loc310 = loc(fused[#loc209, #loc208])
#loc311 = loc(fused[#loc212, #loc213])
#loc312 = loc(fused[#loc215, #loc214])
#loc313 = loc(fused[#loc216, #loc217])
#loc314 = loc(fused[#loc219, #loc213])
#loc315 = loc(fused[#loc225, #loc224])
