!s32i = !cir.int<s, 32>
!s64i = !cir.int<s, 64>
!s8i = !cir.int<s, 8>
!u32i = !cir.int<u, 32>
!void = !cir.void
#fn_attr = #cir<extra({nothrow = #cir.nothrow})>
#fn_attr1 = #cir<extra({inline = #cir.inline<no>, nothrow = #cir.nothrow, optnone = #cir.optnone})>
#loc66 = loc("CWE511_Logic_Time_Bomb__counter_12.c":120:10)
#loc67 = loc("CWE511_Logic_Time_Bomb__counter_12.c":120:14)
#loc68 = loc("CWE511_Logic_Time_Bomb__counter_12.c":120:20)
#loc69 = loc("CWE511_Logic_Time_Bomb__counter_12.c":120:32)
#loc157 = loc(fused[#loc66, #loc67])
#loc158 = loc(fused[#loc68, #loc69])
module @"/home/ladisgin/git_proj/juliet-c/testcases/CWE511_Logic_Time_Bomb/CWE511_Logic_Time_Bomb__counter_12.c" attributes {cir.lang = #cir.lang<c>, cir.sob = #cir.signed_overflow_behavior<undefined>, cir.triple = "x86_64-unknown-linux-gnu", dlti.dl_spec = #dlti.dl_spec<f16 = dense<16> : vector<2xi64>, f128 = dense<128> : vector<2xi64>, !llvm.ptr<270> = dense<32> : vector<4xi64>, f64 = dense<64> : vector<2xi64>, !llvm.ptr<271> = dense<32> : vector<4xi64>, !llvm.ptr<272> = dense<64> : vector<4xi64>, i16 = dense<16> : vector<2xi64>, i8 = dense<8> : vector<2xi64>, i32 = dense<32> : vector<2xi64>, f80 = dense<128> : vector<2xi64>, !llvm.ptr = dense<64> : vector<4xi64>, i1 = dense<8> : vector<2xi64>, i64 = dense<64> : vector<2xi64>, i128 = dense<128> : vector<2xi64>, "dlti.endianness" = "little", "dlti.stack_alignment" = 128 : i64>} {
  cir.func no_proto private @globalReturnsTrueOrFalse(...) -> !s32i loc(#loc129)
  cir.func private @unlink(!cir.ptr<!s8i>) -> !s32i extra(#fn_attr) loc(#loc130)
  cir.global "private" constant cir_private dsolocal @".str" = #cir.const_array<"important_file.txt\00" : !cir.array<!s8i x 19>> : !cir.array<!s8i x 19> {alignment = 1 : i64} loc(#loc5)
  cir.func private @printLine(!cir.ptr<!s8i>) loc(#loc131)
  cir.global "private" constant cir_private dsolocal @".str.1" = #cir.const_array<"Happy New Year!\00" : !cir.array<!s8i x 16>> : !cir.array<!s8i x 16> {alignment = 1 : i64} loc(#loc8)
  cir.func no_proto @CWE511_Logic_Time_Bomb__counter_12_bad() extra(#fn_attr1) {
    %0 = cir.alloca !s32i, !cir.ptr<!s32i>, ["count", init] {alignment = 4 : i64} loc(#loc133)
    %1 = cir.alloca !s32i, !cir.ptr<!s32i>, ["count", init] {alignment = 4 : i64} loc(#loc134)
    cir.br ^bb1 loc(#loc135)
  ^bb1:  // pred: ^bb0
    %2 = cir.get_global @globalReturnsTrueOrFalse : !cir.ptr<!cir.func<!s32i (...)>> loc(#loc136)
    %3 = cir.cast(bitcast, %2 : !cir.ptr<!cir.func<!s32i (...)>>), !cir.ptr<!cir.func<!s32i ()>> loc(#loc136)
    %4 = cir.call %3() : (!cir.ptr<!cir.func<!s32i ()>>) -> !s32i loc(#loc17)
    %5 = cir.cast(int_to_bool, %4 : !s32i), !cir.bool loc(#loc17)
    cir.brcond %5 ^bb2, ^bb14 loc(#loc137)
  ^bb2:  // pred: ^bb1
    cir.br ^bb3 loc(#loc138)
  ^bb3:  // pred: ^bb2
    %6 = cir.const #cir.int<0> : !s32i loc(#loc12)
    cir.store %6, %0 : !s32i, !cir.ptr<!s32i> loc(#loc133)
    cir.br ^bb4 loc(#loc139)
  ^bb4:  // pred: ^bb3
    cir.br ^bb6 loc(#loc139)
  ^bb5:  // pred: ^bb10
    %7 = cir.const #cir.int<1> : !s32i loc(#loc26)
    %8 = cir.const #cir.int<1> : !s32i loc(#loc27)
    %9 = cir.cmp(eq, %7, %8) : !s32i, !cir.bool loc(#loc140)
    cir.brcond %9 ^bb6, ^bb11 loc(#loc28)
  ^bb6:  // 2 preds: ^bb4, ^bb5
    cir.br ^bb7 loc(#loc141)
  ^bb7:  // pred: ^bb6
    %10 = cir.load %0 : !cir.ptr<!s32i>, !s32i loc(#loc31)
    %11 = cir.const #cir.int<20000> : !s32i loc(#loc32)
    %12 = cir.cmp(eq, %10, %11) : !s32i, !cir.bool loc(#loc142)
    cir.brcond %12 ^bb8, ^bb9 loc(#loc143)
  ^bb8:  // pred: ^bb7
    %13 = cir.get_global @".str" : !cir.ptr<!cir.array<!s8i x 19>> loc(#loc5)
    %14 = cir.cast(array_to_ptrdecay, %13 : !cir.ptr<!cir.array<!s8i x 19>>), !cir.ptr<!s8i> loc(#loc5)
    %15 = cir.call @unlink(%14) : (!cir.ptr<!s8i>) -> !s32i extra(#fn_attr) loc(#loc34)
    cir.br ^bb9 loc(#loc30)
  ^bb9:  // 2 preds: ^bb7, ^bb8
    cir.br ^bb10 loc(#loc30)
  ^bb10:  // pred: ^bb9
    %16 = cir.load %0 : !cir.ptr<!s32i>, !s32i loc(#loc35)
    %17 = cir.unary(inc, %16) : !s32i, !s32i loc(#loc36)
    cir.store %17, %0 : !s32i, !cir.ptr<!s32i> loc(#loc144)
    cir.br ^bb5 loc(#loc25)
  ^bb11:  // pred: ^bb5
    cir.br ^bb12 loc(#loc25)
  ^bb12:  // pred: ^bb11
    cir.br ^bb13 loc(#loc23)
  ^bb13:  // pred: ^bb12
    cir.br ^bb26 loc(#loc20)
  ^bb14:  // pred: ^bb1
    cir.br ^bb15 loc(#loc145)
  ^bb15:  // pred: ^bb14
    %18 = cir.const #cir.int<0> : !s32i loc(#loc14)
    cir.store %18, %1 : !s32i, !cir.ptr<!s32i> loc(#loc134)
    cir.br ^bb16 loc(#loc146)
  ^bb16:  // pred: ^bb15
    cir.br ^bb18 loc(#loc146)
  ^bb17:  // pred: ^bb22
    %19 = cir.const #cir.int<1> : !s32i loc(#loc41)
    %20 = cir.const #cir.int<1> : !s32i loc(#loc42)
    %21 = cir.cmp(eq, %19, %20) : !s32i, !cir.bool loc(#loc147)
    cir.brcond %21 ^bb18, ^bb23 loc(#loc43)
  ^bb18:  // 2 preds: ^bb16, ^bb17
    cir.br ^bb19 loc(#loc148)
  ^bb19:  // pred: ^bb18
    %22 = cir.load %1 : !cir.ptr<!s32i>, !s32i loc(#loc46)
    %23 = cir.const #cir.int<20000> : !s32i loc(#loc47)
    %24 = cir.cmp(eq, %22, %23) : !s32i, !cir.bool loc(#loc149)
    cir.brcond %24 ^bb20, ^bb21 loc(#loc150)
  ^bb20:  // pred: ^bb19
    %25 = cir.get_global @".str.1" : !cir.ptr<!cir.array<!s8i x 16>> loc(#loc8)
    %26 = cir.cast(array_to_ptrdecay, %25 : !cir.ptr<!cir.array<!s8i x 16>>), !cir.ptr<!s8i> loc(#loc8)
    cir.call @printLine(%26) : (!cir.ptr<!s8i>) -> () loc(#loc49)
    cir.br ^bb21 loc(#loc45)
  ^bb21:  // 2 preds: ^bb19, ^bb20
    cir.br ^bb22 loc(#loc45)
  ^bb22:  // pred: ^bb21
    %27 = cir.load %1 : !cir.ptr<!s32i>, !s32i loc(#loc50)
    %28 = cir.unary(inc, %27) : !s32i, !s32i loc(#loc51)
    cir.store %28, %1 : !s32i, !cir.ptr<!s32i> loc(#loc151)
    cir.br ^bb17 loc(#loc40)
  ^bb23:  // pred: ^bb17
    cir.br ^bb24 loc(#loc40)
  ^bb24:  // pred: ^bb23
    cir.br ^bb25 loc(#loc38)
  ^bb25:  // pred: ^bb24
    cir.br ^bb26 loc(#loc16)
  ^bb26:  // 2 preds: ^bb13, ^bb25
    cir.br ^bb27 loc(#loc16)
  ^bb27:  // pred: ^bb26
    cir.return loc(#loc10)
  } loc(#loc132)
  cir.func no_proto @CWE511_Logic_Time_Bomb__counter_12_good() extra(#fn_attr1) {
    %0 = cir.get_global @good1 : !cir.ptr<!cir.func<!void ()>> loc(#loc153)
    cir.call %0() : (!cir.ptr<!cir.func<!void ()>>) -> () loc(#loc54)
    cir.return loc(#loc53)
  } loc(#loc152)
  cir.func private @srand(!u32i) extra(#fn_attr) loc(#loc154)
  cir.func private @time(!cir.ptr<!s64i>) -> !s64i extra(#fn_attr) loc(#loc155)
  cir.global "private" constant cir_private dsolocal @".str.2" = #cir.const_array<"Calling good()...\00" : !cir.array<!s8i x 18>> : !cir.array<!s8i x 18> {alignment = 1 : i64} loc(#loc60)
  cir.global "private" constant cir_private dsolocal @".str.3" = #cir.const_array<"Finished good()\00" : !cir.array<!s8i x 16>> : !cir.array<!s8i x 16> {alignment = 1 : i64} loc(#loc61)
  cir.global "private" constant cir_private dsolocal @".str.4" = #cir.const_array<"Calling bad()...\00" : !cir.array<!s8i x 17>> : !cir.array<!s8i x 17> {alignment = 1 : i64} loc(#loc62)
  cir.global "private" constant cir_private dsolocal @".str.5" = #cir.const_array<"Finished bad()\00" : !cir.array<!s8i x 15>> : !cir.array<!s8i x 15> {alignment = 1 : i64} loc(#loc63)
  cir.func @main(%arg0: !s32i loc(fused[#loc66, #loc67]), %arg1: !cir.ptr<!cir.ptr<!s8i>> loc(fused[#loc68, #loc69])) -> !s32i extra(#fn_attr1) {
    %0 = cir.alloca !s32i, !cir.ptr<!s32i>, ["argc", init] {alignment = 4 : i64} loc(#loc157)
    %1 = cir.alloca !cir.ptr<!cir.ptr<!s8i>>, !cir.ptr<!cir.ptr<!cir.ptr<!s8i>>>, ["argv", init] {alignment = 8 : i64} loc(#loc158)
    %2 = cir.alloca !s32i, !cir.ptr<!s32i>, ["__retval"] {alignment = 4 : i64} loc(#loc65)
    cir.store %arg0, %0 : !s32i, !cir.ptr<!s32i> loc(#loc70)
    cir.store %arg1, %1 : !cir.ptr<!cir.ptr<!s8i>>, !cir.ptr<!cir.ptr<!cir.ptr<!s8i>>> loc(#loc70)
    %3 = cir.const #cir.ptr<null> : !cir.ptr<!s64i> loc(#loc71)
    %4 = cir.call @time(%3) : (!cir.ptr<!s64i>) -> !s64i extra(#fn_attr) loc(#loc72)
    %5 = cir.cast(integral, %4 : !s64i), !u32i loc(#loc72)
    cir.call @srand(%5) : (!u32i) -> () extra(#fn_attr) loc(#loc73)
    %6 = cir.get_global @".str.2" : !cir.ptr<!cir.array<!s8i x 18>> loc(#loc60)
    %7 = cir.cast(array_to_ptrdecay, %6 : !cir.ptr<!cir.array<!s8i x 18>>), !cir.ptr<!s8i> loc(#loc60)
    cir.call @printLine(%7) : (!cir.ptr<!s8i>) -> () loc(#loc74)
    %8 = cir.get_global @CWE511_Logic_Time_Bomb__counter_12_good : !cir.ptr<!cir.func<!void ()>> loc(#loc159)
    cir.call @CWE511_Logic_Time_Bomb__counter_12_good() : () -> () loc(#loc75)
    %9 = cir.get_global @".str.3" : !cir.ptr<!cir.array<!s8i x 16>> loc(#loc61)
    %10 = cir.cast(array_to_ptrdecay, %9 : !cir.ptr<!cir.array<!s8i x 16>>), !cir.ptr<!s8i> loc(#loc61)
    cir.call @printLine(%10) : (!cir.ptr<!s8i>) -> () loc(#loc77)
    %11 = cir.get_global @".str.4" : !cir.ptr<!cir.array<!s8i x 17>> loc(#loc62)
    %12 = cir.cast(array_to_ptrdecay, %11 : !cir.ptr<!cir.array<!s8i x 17>>), !cir.ptr<!s8i> loc(#loc62)
    cir.call @printLine(%12) : (!cir.ptr<!s8i>) -> () loc(#loc78)
    %13 = cir.get_global @CWE511_Logic_Time_Bomb__counter_12_bad : !cir.ptr<!cir.func<!void ()>> loc(#loc160)
    cir.call @CWE511_Logic_Time_Bomb__counter_12_bad() : () -> () loc(#loc79)
    %14 = cir.get_global @".str.5" : !cir.ptr<!cir.array<!s8i x 15>> loc(#loc63)
    %15 = cir.cast(array_to_ptrdecay, %14 : !cir.ptr<!cir.array<!s8i x 15>>), !cir.ptr<!s8i> loc(#loc63)
    cir.call @printLine(%15) : (!cir.ptr<!s8i>) -> () loc(#loc81)
    %16 = cir.const #cir.int<0> : !s32i loc(#loc82)
    cir.store %16, %2 : !s32i, !cir.ptr<!s32i> loc(#loc161)
    %17 = cir.load %2 : !cir.ptr<!s32i>, !s32i loc(#loc161)
    cir.return %17 : !s32i loc(#loc161)
  } loc(#loc156)
  cir.func no_proto internal private @good1() extra(#fn_attr1) {
    %0 = cir.alloca !s32i, !cir.ptr<!s32i>, ["count", init] {alignment = 4 : i64} loc(#loc163)
    %1 = cir.alloca !s32i, !cir.ptr<!s32i>, ["count", init] {alignment = 4 : i64} loc(#loc164)
    cir.br ^bb1 loc(#loc165)
  ^bb1:  // pred: ^bb0
    %2 = cir.get_global @globalReturnsTrueOrFalse : !cir.ptr<!cir.func<!s32i (...)>> loc(#loc166)
    %3 = cir.cast(bitcast, %2 : !cir.ptr<!cir.func<!s32i (...)>>), !cir.ptr<!cir.func<!s32i ()>> loc(#loc166)
    %4 = cir.call %3() : (!cir.ptr<!cir.func<!s32i ()>>) -> !s32i loc(#loc92)
    %5 = cir.cast(int_to_bool, %4 : !s32i), !cir.bool loc(#loc92)
    cir.brcond %5 ^bb2, ^bb14 loc(#loc167)
  ^bb2:  // pred: ^bb1
    cir.br ^bb3 loc(#loc168)
  ^bb3:  // pred: ^bb2
    %6 = cir.const #cir.int<0> : !s32i loc(#loc87)
    cir.store %6, %0 : !s32i, !cir.ptr<!s32i> loc(#loc163)
    cir.br ^bb4 loc(#loc169)
  ^bb4:  // pred: ^bb3
    cir.br ^bb6 loc(#loc169)
  ^bb5:  // pred: ^bb10
    %7 = cir.const #cir.int<1> : !s32i loc(#loc101)
    %8 = cir.const #cir.int<1> : !s32i loc(#loc102)
    %9 = cir.cmp(eq, %7, %8) : !s32i, !cir.bool loc(#loc170)
    cir.brcond %9 ^bb6, ^bb11 loc(#loc103)
  ^bb6:  // 2 preds: ^bb4, ^bb5
    cir.br ^bb7 loc(#loc171)
  ^bb7:  // pred: ^bb6
    %10 = cir.load %0 : !cir.ptr<!s32i>, !s32i loc(#loc106)
    %11 = cir.const #cir.int<20000> : !s32i loc(#loc107)
    %12 = cir.cmp(eq, %10, %11) : !s32i, !cir.bool loc(#loc172)
    cir.brcond %12 ^bb8, ^bb9 loc(#loc173)
  ^bb8:  // pred: ^bb7
    %13 = cir.get_global @".str.1" : !cir.ptr<!cir.array<!s8i x 16>> loc(#loc109)
    %14 = cir.cast(array_to_ptrdecay, %13 : !cir.ptr<!cir.array<!s8i x 16>>), !cir.ptr<!s8i> loc(#loc109)
    cir.call @printLine(%14) : (!cir.ptr<!s8i>) -> () loc(#loc110)
    cir.br ^bb9 loc(#loc105)
  ^bb9:  // 2 preds: ^bb7, ^bb8
    cir.br ^bb10 loc(#loc105)
  ^bb10:  // pred: ^bb9
    %15 = cir.load %0 : !cir.ptr<!s32i>, !s32i loc(#loc111)
    %16 = cir.unary(inc, %15) : !s32i, !s32i loc(#loc112)
    cir.store %16, %0 : !s32i, !cir.ptr<!s32i> loc(#loc174)
    cir.br ^bb5 loc(#loc100)
  ^bb11:  // pred: ^bb5
    cir.br ^bb12 loc(#loc100)
  ^bb12:  // pred: ^bb11
    cir.br ^bb13 loc(#loc98)
  ^bb13:  // pred: ^bb12
    cir.br ^bb26 loc(#loc95)
  ^bb14:  // pred: ^bb1
    cir.br ^bb15 loc(#loc175)
  ^bb15:  // pred: ^bb14
    %17 = cir.const #cir.int<0> : !s32i loc(#loc89)
    cir.store %17, %1 : !s32i, !cir.ptr<!s32i> loc(#loc164)
    cir.br ^bb16 loc(#loc176)
  ^bb16:  // pred: ^bb15
    cir.br ^bb18 loc(#loc176)
  ^bb17:  // pred: ^bb22
    %18 = cir.const #cir.int<1> : !s32i loc(#loc117)
    %19 = cir.const #cir.int<1> : !s32i loc(#loc118)
    %20 = cir.cmp(eq, %18, %19) : !s32i, !cir.bool loc(#loc177)
    cir.brcond %20 ^bb18, ^bb23 loc(#loc119)
  ^bb18:  // 2 preds: ^bb16, ^bb17
    cir.br ^bb19 loc(#loc178)
  ^bb19:  // pred: ^bb18
    %21 = cir.load %1 : !cir.ptr<!s32i>, !s32i loc(#loc122)
    %22 = cir.const #cir.int<20000> : !s32i loc(#loc123)
    %23 = cir.cmp(eq, %21, %22) : !s32i, !cir.bool loc(#loc179)
    cir.brcond %23 ^bb20, ^bb21 loc(#loc180)
  ^bb20:  // pred: ^bb19
    %24 = cir.get_global @".str.1" : !cir.ptr<!cir.array<!s8i x 16>> loc(#loc125)
    %25 = cir.cast(array_to_ptrdecay, %24 : !cir.ptr<!cir.array<!s8i x 16>>), !cir.ptr<!s8i> loc(#loc125)
    cir.call @printLine(%25) : (!cir.ptr<!s8i>) -> () loc(#loc126)
    cir.br ^bb21 loc(#loc121)
  ^bb21:  // 2 preds: ^bb19, ^bb20
    cir.br ^bb22 loc(#loc121)
  ^bb22:  // pred: ^bb21
    %26 = cir.load %1 : !cir.ptr<!s32i>, !s32i loc(#loc127)
    %27 = cir.unary(inc, %26) : !s32i, !s32i loc(#loc128)
    cir.store %27, %1 : !s32i, !cir.ptr<!s32i> loc(#loc181)
    cir.br ^bb17 loc(#loc116)
  ^bb23:  // pred: ^bb17
    cir.br ^bb24 loc(#loc116)
  ^bb24:  // pred: ^bb23
    cir.br ^bb25 loc(#loc114)
  ^bb25:  // pred: ^bb24
    cir.br ^bb26 loc(#loc91)
  ^bb26:  // 2 preds: ^bb13, ^bb25
    cir.br ^bb27 loc(#loc91)
  ^bb27:  // pred: ^bb26
    cir.return loc(#loc85)
  } loc(#loc162)
} loc(#loc)
#loc = loc("/home/ladisgin/git_proj/juliet-c/testcases/CWE511_Logic_Time_Bomb/CWE511_Logic_Time_Bomb__counter_12.c":0:0)
#loc1 = loc("../../testcasesupport/std_testcase_io.h":52:1)
#loc2 = loc("../../testcasesupport/std_testcase_io.h":52:30)
#loc3 = loc("/usr/include/unistd.h":858:1)
#loc4 = loc("/usr/include/unistd.h":858:48)
#loc5 = loc("CWE511_Logic_Time_Bomb__counter_12.c":40:28)
#loc6 = loc("../../testcasesupport/std_testcase_io.h":14:1)
#loc7 = loc("../../testcasesupport/std_testcase_io.h":14:33)
#loc8 = loc("CWE511_Logic_Time_Bomb__counter_12.c":56:31)
#loc9 = loc("CWE511_Logic_Time_Bomb__counter_12.c":29:1)
#loc10 = loc("CWE511_Logic_Time_Bomb__counter_12.c":63:1)
#loc11 = loc("CWE511_Logic_Time_Bomb__counter_12.c":34:13)
#loc12 = loc("CWE511_Logic_Time_Bomb__counter_12.c":34:25)
#loc13 = loc("CWE511_Logic_Time_Bomb__counter_12.c":50:13)
#loc14 = loc("CWE511_Logic_Time_Bomb__counter_12.c":50:25)
#loc15 = loc("CWE511_Logic_Time_Bomb__counter_12.c":31:5)
#loc16 = loc("CWE511_Logic_Time_Bomb__counter_12.c":62:5)
#loc17 = loc("CWE511_Logic_Time_Bomb__counter_12.c":31:8)
#loc18 = loc("CWE511_Logic_Time_Bomb__counter_12.c":31:33)
#loc19 = loc("CWE511_Logic_Time_Bomb__counter_12.c":32:5)
#loc20 = loc("CWE511_Logic_Time_Bomb__counter_12.c":46:5)
#loc21 = loc("CWE511_Logic_Time_Bomb__counter_12.c":48:5)
#loc22 = loc("CWE511_Logic_Time_Bomb__counter_12.c":33:9)
#loc23 = loc("CWE511_Logic_Time_Bomb__counter_12.c":45:9)
#loc24 = loc("CWE511_Logic_Time_Bomb__counter_12.c":35:13)
#loc25 = loc("CWE511_Logic_Time_Bomb__counter_12.c":44:25)
#loc26 = loc("CWE511_Logic_Time_Bomb__counter_12.c":44:19)
#loc27 = loc("CWE511_Logic_Time_Bomb__counter_12.c":44:24)
#loc28 = loc("CWE511_Logic_Time_Bomb__counter_12.c":44:21)
#loc29 = loc("CWE511_Logic_Time_Bomb__counter_12.c":38:17)
#loc30 = loc("CWE511_Logic_Time_Bomb__counter_12.c":41:17)
#loc31 = loc("CWE511_Logic_Time_Bomb__counter_12.c":38:21)
#loc32 = loc("CWE511_Logic_Time_Bomb__counter_12.c":38:30)
#loc33 = loc("CWE511_Logic_Time_Bomb__counter_12.c":39:17)
#loc34 = loc("CWE511_Logic_Time_Bomb__counter_12.c":40:21)
#loc35 = loc("CWE511_Logic_Time_Bomb__counter_12.c":42:22)
#loc36 = loc("CWE511_Logic_Time_Bomb__counter_12.c":42:17)
#loc37 = loc("CWE511_Logic_Time_Bomb__counter_12.c":49:9)
#loc38 = loc("CWE511_Logic_Time_Bomb__counter_12.c":61:9)
#loc39 = loc("CWE511_Logic_Time_Bomb__counter_12.c":51:13)
#loc40 = loc("CWE511_Logic_Time_Bomb__counter_12.c":60:25)
#loc41 = loc("CWE511_Logic_Time_Bomb__counter_12.c":60:19)
#loc42 = loc("CWE511_Logic_Time_Bomb__counter_12.c":60:24)
#loc43 = loc("CWE511_Logic_Time_Bomb__counter_12.c":60:21)
#loc44 = loc("CWE511_Logic_Time_Bomb__counter_12.c":54:17)
#loc45 = loc("CWE511_Logic_Time_Bomb__counter_12.c":57:17)
#loc46 = loc("CWE511_Logic_Time_Bomb__counter_12.c":54:21)
#loc47 = loc("CWE511_Logic_Time_Bomb__counter_12.c":54:30)
#loc48 = loc("CWE511_Logic_Time_Bomb__counter_12.c":55:17)
#loc49 = loc("CWE511_Logic_Time_Bomb__counter_12.c":56:21)
#loc50 = loc("CWE511_Logic_Time_Bomb__counter_12.c":58:22)
#loc51 = loc("CWE511_Logic_Time_Bomb__counter_12.c":58:17)
#loc52 = loc("CWE511_Logic_Time_Bomb__counter_12.c":106:1)
#loc53 = loc("CWE511_Logic_Time_Bomb__counter_12.c":109:1)
#loc54 = loc("CWE511_Logic_Time_Bomb__counter_12.c":108:5)
#loc55 = loc("CWE511_Logic_Time_Bomb__counter_12.c":108:11)
#loc56 = loc("/usr/include/stdlib.h":575:1)
#loc57 = loc("/usr/include/stdlib.h":575:41)
#loc58 = loc("/usr/include/time.h":76:1)
#loc59 = loc("/usr/include/time.h":76:38)
#loc60 = loc("CWE511_Logic_Time_Bomb__counter_12.c":125:15)
#loc61 = loc("CWE511_Logic_Time_Bomb__counter_12.c":127:15)
#loc62 = loc("CWE511_Logic_Time_Bomb__counter_12.c":130:15)
#loc63 = loc("CWE511_Logic_Time_Bomb__counter_12.c":132:15)
#loc64 = loc("CWE511_Logic_Time_Bomb__counter_12.c":120:1)
#loc65 = loc("CWE511_Logic_Time_Bomb__counter_12.c":135:1)
#loc70 = loc("CWE511_Logic_Time_Bomb__counter_12.c":121:1)
#loc71 = loc("CWE511_Logic_Time_Bomb__counter_12.c":123:27)
#loc72 = loc("CWE511_Logic_Time_Bomb__counter_12.c":123:22)
#loc73 = loc("CWE511_Logic_Time_Bomb__counter_12.c":123:5)
#loc74 = loc("CWE511_Logic_Time_Bomb__counter_12.c":125:5)
#loc75 = loc("CWE511_Logic_Time_Bomb__counter_12.c":126:5)
#loc76 = loc("CWE511_Logic_Time_Bomb__counter_12.c":126:45)
#loc77 = loc("CWE511_Logic_Time_Bomb__counter_12.c":127:5)
#loc78 = loc("CWE511_Logic_Time_Bomb__counter_12.c":130:5)
#loc79 = loc("CWE511_Logic_Time_Bomb__counter_12.c":131:5)
#loc80 = loc("CWE511_Logic_Time_Bomb__counter_12.c":131:44)
#loc81 = loc("CWE511_Logic_Time_Bomb__counter_12.c":132:5)
#loc82 = loc("CWE511_Logic_Time_Bomb__counter_12.c":134:12)
#loc83 = loc("CWE511_Logic_Time_Bomb__counter_12.c":134:5)
#loc84 = loc("CWE511_Logic_Time_Bomb__counter_12.c":70:1)
#loc85 = loc("CWE511_Logic_Time_Bomb__counter_12.c":104:1)
#loc86 = loc("CWE511_Logic_Time_Bomb__counter_12.c":75:13)
#loc87 = loc("CWE511_Logic_Time_Bomb__counter_12.c":75:25)
#loc88 = loc("CWE511_Logic_Time_Bomb__counter_12.c":91:13)
#loc89 = loc("CWE511_Logic_Time_Bomb__counter_12.c":91:25)
#loc90 = loc("CWE511_Logic_Time_Bomb__counter_12.c":72:5)
#loc91 = loc("CWE511_Logic_Time_Bomb__counter_12.c":103:5)
#loc92 = loc("CWE511_Logic_Time_Bomb__counter_12.c":72:8)
#loc93 = loc("CWE511_Logic_Time_Bomb__counter_12.c":72:33)
#loc94 = loc("CWE511_Logic_Time_Bomb__counter_12.c":73:5)
#loc95 = loc("CWE511_Logic_Time_Bomb__counter_12.c":87:5)
#loc96 = loc("CWE511_Logic_Time_Bomb__counter_12.c":89:5)
#loc97 = loc("CWE511_Logic_Time_Bomb__counter_12.c":74:9)
#loc98 = loc("CWE511_Logic_Time_Bomb__counter_12.c":86:9)
#loc99 = loc("CWE511_Logic_Time_Bomb__counter_12.c":76:13)
#loc100 = loc("CWE511_Logic_Time_Bomb__counter_12.c":85:25)
#loc101 = loc("CWE511_Logic_Time_Bomb__counter_12.c":85:19)
#loc102 = loc("CWE511_Logic_Time_Bomb__counter_12.c":85:24)
#loc103 = loc("CWE511_Logic_Time_Bomb__counter_12.c":85:21)
#loc104 = loc("CWE511_Logic_Time_Bomb__counter_12.c":79:17)
#loc105 = loc("CWE511_Logic_Time_Bomb__counter_12.c":82:17)
#loc106 = loc("CWE511_Logic_Time_Bomb__counter_12.c":79:21)
#loc107 = loc("CWE511_Logic_Time_Bomb__counter_12.c":79:30)
#loc108 = loc("CWE511_Logic_Time_Bomb__counter_12.c":80:17)
#loc109 = loc("CWE511_Logic_Time_Bomb__counter_12.c":81:31)
#loc110 = loc("CWE511_Logic_Time_Bomb__counter_12.c":81:21)
#loc111 = loc("CWE511_Logic_Time_Bomb__counter_12.c":83:22)
#loc112 = loc("CWE511_Logic_Time_Bomb__counter_12.c":83:17)
#loc113 = loc("CWE511_Logic_Time_Bomb__counter_12.c":90:9)
#loc114 = loc("CWE511_Logic_Time_Bomb__counter_12.c":102:9)
#loc115 = loc("CWE511_Logic_Time_Bomb__counter_12.c":92:13)
#loc116 = loc("CWE511_Logic_Time_Bomb__counter_12.c":101:25)
#loc117 = loc("CWE511_Logic_Time_Bomb__counter_12.c":101:19)
#loc118 = loc("CWE511_Logic_Time_Bomb__counter_12.c":101:24)
#loc119 = loc("CWE511_Logic_Time_Bomb__counter_12.c":101:21)
#loc120 = loc("CWE511_Logic_Time_Bomb__counter_12.c":95:17)
#loc121 = loc("CWE511_Logic_Time_Bomb__counter_12.c":98:17)
#loc122 = loc("CWE511_Logic_Time_Bomb__counter_12.c":95:21)
#loc123 = loc("CWE511_Logic_Time_Bomb__counter_12.c":95:30)
#loc124 = loc("CWE511_Logic_Time_Bomb__counter_12.c":96:17)
#loc125 = loc("CWE511_Logic_Time_Bomb__counter_12.c":97:31)
#loc126 = loc("CWE511_Logic_Time_Bomb__counter_12.c":97:21)
#loc127 = loc("CWE511_Logic_Time_Bomb__counter_12.c":99:22)
#loc128 = loc("CWE511_Logic_Time_Bomb__counter_12.c":99:17)
#loc129 = loc(fused[#loc1, #loc2])
#loc130 = loc(fused[#loc3, #loc4])
#loc131 = loc(fused[#loc6, #loc7])
#loc132 = loc(fused[#loc9, #loc10])
#loc133 = loc(fused[#loc11, #loc12])
#loc134 = loc(fused[#loc13, #loc14])
#loc135 = loc(fused[#loc15, #loc16])
#loc136 = loc(fused[#loc17, #loc18])
#loc137 = loc(fused[#loc19, #loc20, #loc21, #loc16])
#loc138 = loc(fused[#loc22, #loc23])
#loc139 = loc(fused[#loc24, #loc25])
#loc140 = loc(fused[#loc26, #loc27])
#loc141 = loc(fused[#loc29, #loc30])
#loc142 = loc(fused[#loc31, #loc32])
#loc143 = loc(fused[#loc33, #loc30])
#loc144 = loc(fused[#loc36, #loc35])
#loc145 = loc(fused[#loc37, #loc38])
#loc146 = loc(fused[#loc39, #loc40])
#loc147 = loc(fused[#loc41, #loc42])
#loc148 = loc(fused[#loc44, #loc45])
#loc149 = loc(fused[#loc46, #loc47])
#loc150 = loc(fused[#loc48, #loc45])
#loc151 = loc(fused[#loc51, #loc50])
#loc152 = loc(fused[#loc52, #loc53])
#loc153 = loc(fused[#loc54, #loc55])
#loc154 = loc(fused[#loc56, #loc57])
#loc155 = loc(fused[#loc58, #loc59])
#loc156 = loc(fused[#loc64, #loc65])
#loc159 = loc(fused[#loc75, #loc76])
#loc160 = loc(fused[#loc79, #loc80])
#loc161 = loc(fused[#loc83, #loc82])
#loc162 = loc(fused[#loc84, #loc85])
#loc163 = loc(fused[#loc86, #loc87])
#loc164 = loc(fused[#loc88, #loc89])
#loc165 = loc(fused[#loc90, #loc91])
#loc166 = loc(fused[#loc92, #loc93])
#loc167 = loc(fused[#loc94, #loc95, #loc96, #loc91])
#loc168 = loc(fused[#loc97, #loc98])
#loc169 = loc(fused[#loc99, #loc100])
#loc170 = loc(fused[#loc101, #loc102])
#loc171 = loc(fused[#loc104, #loc105])
#loc172 = loc(fused[#loc106, #loc107])
#loc173 = loc(fused[#loc108, #loc105])
#loc174 = loc(fused[#loc112, #loc111])
#loc175 = loc(fused[#loc113, #loc114])
#loc176 = loc(fused[#loc115, #loc116])
#loc177 = loc(fused[#loc117, #loc118])
#loc178 = loc(fused[#loc120, #loc121])
#loc179 = loc(fused[#loc122, #loc123])
#loc180 = loc(fused[#loc124, #loc121])
#loc181 = loc(fused[#loc128, #loc127])
