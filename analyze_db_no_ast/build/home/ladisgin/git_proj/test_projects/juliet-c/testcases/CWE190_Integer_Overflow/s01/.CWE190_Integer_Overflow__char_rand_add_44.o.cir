!s32i = !cir.int<s, 32>
!s8i = !cir.int<s, 8>
!u32i = !cir.int<u, 32>
!void = !cir.void
#fn_attr = #cir<extra({inline = #cir.inline<no>, nothrow = #cir.nothrow, optnone = #cir.optnone})>
#fn_attr1 = #cir<extra({nothrow = #cir.nothrow})>
#loc5 = loc("CWE190_Integer_Overflow__char_rand_add_44.c":22:21)
#loc6 = loc("CWE190_Integer_Overflow__char_rand_add_44.c":22:26)
#loc37 = loc("CWE190_Integer_Overflow__char_rand_add_44.c":48:25)
#loc38 = loc("CWE190_Integer_Overflow__char_rand_add_44.c":48:30)
#loc64 = loc("CWE190_Integer_Overflow__char_rand_add_44.c":68:25)
#loc65 = loc("CWE190_Integer_Overflow__char_rand_add_44.c":68:30)
#loc95 = loc(fused[#loc5, #loc6])
#loc108 = loc(fused[#loc37, #loc38])
#loc118 = loc(fused[#loc64, #loc65])
module @"/home/ladisgin/git_proj/test_projects/juliet-c/testcases/CWE190_Integer_Overflow/s01/CWE190_Integer_Overflow__char_rand_add_44.c" attributes {cir.lang = #cir.lang<c>, cir.sob = #cir.signed_overflow_behavior<undefined>, cir.triple = "x86_64-unknown-linux-gnu", dlti.dl_spec = #dlti.dl_spec<#dlti.dl_entry<i16, dense<16> : vector<2xi64>>, #dlti.dl_entry<i8, dense<8> : vector<2xi64>>, #dlti.dl_entry<i1, dense<8> : vector<2xi64>>, #dlti.dl_entry<!llvm.ptr, dense<64> : vector<4xi64>>, #dlti.dl_entry<f16, dense<16> : vector<2xi64>>, #dlti.dl_entry<f64, dense<64> : vector<2xi64>>, #dlti.dl_entry<i32, dense<32> : vector<2xi64>>, #dlti.dl_entry<!llvm.ptr<272>, dense<64> : vector<4xi64>>, #dlti.dl_entry<i64, dense<64> : vector<2xi64>>, #dlti.dl_entry<!llvm.ptr<270>, dense<32> : vector<4xi64>>, #dlti.dl_entry<f128, dense<128> : vector<2xi64>>, #dlti.dl_entry<!llvm.ptr<271>, dense<32> : vector<4xi64>>, #dlti.dl_entry<f80, dense<128> : vector<2xi64>>, #dlti.dl_entry<i128, dense<128> : vector<2xi64>>, #dlti.dl_entry<"dlti.endianness", "little">, #dlti.dl_entry<"dlti.stack_alignment", 128 : i64>>, llvm.data_layout = "e-m:e-p270:32:32-p271:32:32-p272:64:64-i64:64-i128:128-f80:128-n8:16:32:64-S128"} {
  cir.func private  @printHexCharLine(!s8i) loc(#loc93)
  cir.func internal private  @badSink(%arg0: !s8i loc(fused[#loc5, #loc6])) extra(#fn_attr) {
    %0 = cir.alloca !s8i, !cir.ptr<!s8i>, ["data", init] {alignment = 1 : i64} loc(#loc95)
    cir.store %arg0, %0 : !s8i, !cir.ptr<!s8i> loc(#loc7)
    cir.scope {
      %1 = cir.alloca !s8i, !cir.ptr<!s8i>, ["result", init] {alignment = 1 : i64} loc(#loc97)
      %2 = cir.load %0 : !cir.ptr<!s8i>, !s8i loc(#loc12)
      %3 = cir.cast(integral, %2 : !s8i), !s32i loc(#loc12)
      %4 = cir.const #cir.int<1> : !s32i loc(#loc11)
      %5 = cir.binop(add, %3, %4) nsw : !s32i loc(#loc12)
      %6 = cir.cast(integral, %5 : !s32i), !s8i loc(#loc12)
      cir.store %6, %1 : !s8i, !cir.ptr<!s8i> loc(#loc97)
      %7 = cir.load %1 : !cir.ptr<!s8i>, !s8i loc(#loc13)
      cir.call @printHexCharLine(%7) : (!s8i) -> () loc(#loc14)
    } loc(#loc96)
    cir.return loc(#loc4)
  } loc(#loc94)
  cir.func private  @rand() -> !s32i extra(#fn_attr1) loc(#loc98)
  cir.func no_proto  @CWE190_Integer_Overflow__char_rand_add_44_bad() extra(#fn_attr) {
    %0 = cir.alloca !s8i, !cir.ptr<!s8i>, ["data"] {alignment = 1 : i64} loc(#loc100)
    %1 = cir.alloca !cir.ptr<!cir.func<!void (!s8i)>>, !cir.ptr<!cir.ptr<!cir.func<!void (!s8i)>>>, ["funcPtr", init] {alignment = 8 : i64} loc(#loc101)
    %2 = cir.get_global @badSink : !cir.ptr<!cir.func<!void (!s8i)>> loc(#loc22)
    cir.store %2, %1 : !cir.ptr<!cir.func<!void (!s8i)>>, !cir.ptr<!cir.ptr<!cir.func<!void (!s8i)>>> loc(#loc101)
    %3 = cir.const #cir.int<32> : !s32i loc(#loc23)
    %4 = cir.cast(integral, %3 : !s32i), !s8i loc(#loc23)
    cir.store %4, %0 : !s8i, !cir.ptr<!s8i> loc(#loc102)
    %5 = cir.call @rand() : () -> !s32i extra(#fn_attr1) loc(#loc25)
    %6 = cir.const #cir.int<1> : !s32i loc(#loc25)
    %7 = cir.binop(and, %5, %6) : !s32i loc(#loc25)
    %8 = cir.cast(int_to_bool, %7 : !s32i), !cir.bool loc(#loc25)
    %9 = cir.ternary(%8, true {
      %14 = cir.call @rand() : () -> !s32i extra(#fn_attr1) loc(#loc25)
      %15 = cir.cast(integral, %14 : !s32i), !u32i loc(#loc25)
      %16 = cir.const #cir.int<30> : !s32i loc(#loc25)
      %17 = cir.shift(left, %15 : !u32i, %16 : !s32i) -> !u32i loc(#loc25)
      %18 = cir.call @rand() : () -> !s32i extra(#fn_attr1) loc(#loc25)
      %19 = cir.cast(integral, %18 : !s32i), !u32i loc(#loc25)
      %20 = cir.const #cir.int<15> : !s32i loc(#loc25)
      %21 = cir.shift(left, %19 : !u32i, %20 : !s32i) -> !u32i loc(#loc25)
      %22 = cir.binop(xor, %17, %21) : !u32i loc(#loc25)
      %23 = cir.call @rand() : () -> !s32i extra(#fn_attr1) loc(#loc25)
      %24 = cir.cast(integral, %23 : !s32i), !u32i loc(#loc25)
      %25 = cir.binop(xor, %22, %24) : !u32i loc(#loc25)
      cir.yield %25 : !u32i loc(#loc25)
    }, false {
      %14 = cir.call @rand() : () -> !s32i extra(#fn_attr1) loc(#loc25)
      %15 = cir.cast(integral, %14 : !s32i), !u32i loc(#loc25)
      %16 = cir.const #cir.int<30> : !s32i loc(#loc25)
      %17 = cir.shift(left, %15 : !u32i, %16 : !s32i) -> !u32i loc(#loc25)
      %18 = cir.call @rand() : () -> !s32i extra(#fn_attr1) loc(#loc25)
      %19 = cir.cast(integral, %18 : !s32i), !u32i loc(#loc25)
      %20 = cir.const #cir.int<15> : !s32i loc(#loc25)
      %21 = cir.shift(left, %19 : !u32i, %20 : !s32i) -> !u32i loc(#loc25)
      %22 = cir.binop(xor, %17, %21) : !u32i loc(#loc25)
      %23 = cir.call @rand() : () -> !s32i extra(#fn_attr1) loc(#loc25)
      %24 = cir.cast(integral, %23 : !s32i), !u32i loc(#loc25)
      %25 = cir.binop(xor, %22, %24) : !u32i loc(#loc25)
      %26 = cir.unary(minus, %25) : !u32i, !u32i loc(#loc25)
      %27 = cir.const #cir.int<1> : !s32i loc(#loc25)
      %28 = cir.cast(integral, %27 : !s32i), !u32i loc(#loc25)
      %29 = cir.binop(sub, %26, %28) : !u32i loc(#loc25)
      cir.yield %29 : !u32i loc(#loc25)
    }) : (!cir.bool) -> !u32i loc(#loc25)
    %10 = cir.cast(integral, %9 : !u32i), !s32i loc(#loc25)
    %11 = cir.cast(integral, %10 : !s32i), !s8i loc(#loc25)
    cir.store %11, %0 : !s8i, !cir.ptr<!s8i> loc(#loc103)
    %12 = cir.load %1 : !cir.ptr<!cir.ptr<!cir.func<!void (!s8i)>>>, !cir.ptr<!cir.func<!void (!s8i)>> loc(#loc27)
    %13 = cir.load %0 : !cir.ptr<!s8i>, !s8i loc(#loc28)
    cir.call %12(%13) : (!cir.ptr<!cir.func<!void (!s8i)>>, !s8i) -> () loc(#loc27)
    cir.return loc(#loc18)
  } loc(#loc99)
  cir.func no_proto  @CWE190_Integer_Overflow__char_rand_add_44_good() extra(#fn_attr) {
    %0 = cir.get_global @goodG2B : !cir.ptr<!cir.func<!void ()>> loc(#loc105)
    cir.call %0() : (!cir.ptr<!cir.func<!void ()>>) -> () loc(#loc31)
    %1 = cir.get_global @goodB2G : !cir.ptr<!cir.func<!void ()>> loc(#loc106)
    cir.call %1() : (!cir.ptr<!cir.func<!void ()>>) -> () loc(#loc33)
    cir.return loc(#loc30)
  } loc(#loc104)
  cir.func internal private  @goodG2BSink(%arg0: !s8i loc(fused[#loc37, #loc38])) extra(#fn_attr) {
    %0 = cir.alloca !s8i, !cir.ptr<!s8i>, ["data", init] {alignment = 1 : i64} loc(#loc108)
    cir.store %arg0, %0 : !s8i, !cir.ptr<!s8i> loc(#loc39)
    cir.scope {
      %1 = cir.alloca !s8i, !cir.ptr<!s8i>, ["result", init] {alignment = 1 : i64} loc(#loc110)
      %2 = cir.load %0 : !cir.ptr<!s8i>, !s8i loc(#loc44)
      %3 = cir.cast(integral, %2 : !s8i), !s32i loc(#loc44)
      %4 = cir.const #cir.int<1> : !s32i loc(#loc43)
      %5 = cir.binop(add, %3, %4) nsw : !s32i loc(#loc44)
      %6 = cir.cast(integral, %5 : !s32i), !s8i loc(#loc44)
      cir.store %6, %1 : !s8i, !cir.ptr<!s8i> loc(#loc110)
      %7 = cir.load %1 : !cir.ptr<!s8i>, !s8i loc(#loc45)
      cir.call @printHexCharLine(%7) : (!s8i) -> () loc(#loc46)
    } loc(#loc109)
    cir.return loc(#loc36)
  } loc(#loc107)
  cir.func no_proto internal private  @goodG2B() extra(#fn_attr) {
    %0 = cir.alloca !s8i, !cir.ptr<!s8i>, ["data"] {alignment = 1 : i64} loc(#loc112)
    %1 = cir.alloca !cir.ptr<!cir.func<!void (!s8i)>>, !cir.ptr<!cir.ptr<!cir.func<!void (!s8i)>>>, ["funcPtr", init] {alignment = 8 : i64} loc(#loc113)
    %2 = cir.get_global @goodG2BSink : !cir.ptr<!cir.func<!void (!s8i)>> loc(#loc52)
    cir.store %2, %1 : !cir.ptr<!cir.func<!void (!s8i)>>, !cir.ptr<!cir.ptr<!cir.func<!void (!s8i)>>> loc(#loc113)
    %3 = cir.const #cir.int<32> : !s32i loc(#loc53)
    %4 = cir.cast(integral, %3 : !s32i), !s8i loc(#loc53)
    cir.store %4, %0 : !s8i, !cir.ptr<!s8i> loc(#loc114)
    %5 = cir.const #cir.int<2> : !s32i loc(#loc55)
    %6 = cir.cast(integral, %5 : !s32i), !s8i loc(#loc55)
    cir.store %6, %0 : !s8i, !cir.ptr<!s8i> loc(#loc115)
    %7 = cir.load %1 : !cir.ptr<!cir.ptr<!cir.func<!void (!s8i)>>>, !cir.ptr<!cir.func<!void (!s8i)>> loc(#loc57)
    %8 = cir.load %0 : !cir.ptr<!s8i>, !s8i loc(#loc58)
    cir.call %7(%8) : (!cir.ptr<!cir.func<!void (!s8i)>>, !s8i) -> () loc(#loc57)
    cir.return loc(#loc48)
  } loc(#loc111)
  cir.func private  @printLine(!cir.ptr<!s8i>) loc(#loc116)
  cir.global "private"  constant internal dsolocal @".str" = #cir.const_array<"data value is too large to perform arithmetic safely.\00" : !cir.array<!s8i x 54>> : !cir.array<!s8i x 54> {alignment = 1 : i64} loc(#loc61)
  cir.func internal private  @goodB2GSink(%arg0: !s8i loc(fused[#loc64, #loc65])) extra(#fn_attr) {
    %0 = cir.alloca !s8i, !cir.ptr<!s8i>, ["data", init] {alignment = 1 : i64} loc(#loc118)
    cir.store %arg0, %0 : !s8i, !cir.ptr<!s8i> loc(#loc66)
    cir.scope {
      %1 = cir.load %0 : !cir.ptr<!s8i>, !s8i loc(#loc69)
      %2 = cir.cast(integral, %1 : !s8i), !s32i loc(#loc69)
      %3 = cir.const #cir.int<127> : !s32i loc(#loc70)
      %4 = cir.cmp(lt, %2, %3) : !s32i, !s32i loc(#loc120)
      %5 = cir.cast(int_to_bool, %4 : !s32i), !cir.bool loc(#loc71)
      cir.if %5 {
        %6 = cir.alloca !s8i, !cir.ptr<!s8i>, ["result", init] {alignment = 1 : i64} loc(#loc122)
        %7 = cir.load %0 : !cir.ptr<!s8i>, !s8i loc(#loc77)
        %8 = cir.cast(integral, %7 : !s8i), !s32i loc(#loc77)
        %9 = cir.const #cir.int<1> : !s32i loc(#loc76)
        %10 = cir.binop(add, %8, %9) nsw : !s32i loc(#loc77)
        %11 = cir.cast(integral, %10 : !s32i), !s8i loc(#loc77)
        cir.store %11, %6 : !s8i, !cir.ptr<!s8i> loc(#loc122)
        %12 = cir.load %6 : !cir.ptr<!s8i>, !s8i loc(#loc78)
        cir.call @printHexCharLine(%12) : (!s8i) -> () loc(#loc79)
      } else {
        %6 = cir.get_global @".str" : !cir.ptr<!cir.array<!s8i x 54>> loc(#loc61)
        %7 = cir.cast(array_to_ptrdecay, %6 : !cir.ptr<!cir.array<!s8i x 54>>), !cir.ptr<!s8i> loc(#loc61)
        cir.call @printLine(%7) : (!cir.ptr<!s8i>) -> () loc(#loc80)
      } loc(#loc121)
    } loc(#loc119)
    cir.return loc(#loc63)
  } loc(#loc117)
  cir.func no_proto internal private  @goodB2G() extra(#fn_attr) {
    %0 = cir.alloca !s8i, !cir.ptr<!s8i>, ["data"] {alignment = 1 : i64} loc(#loc124)
    %1 = cir.alloca !cir.ptr<!cir.func<!void (!s8i)>>, !cir.ptr<!cir.ptr<!cir.func<!void (!s8i)>>>, ["funcPtr", init] {alignment = 8 : i64} loc(#loc125)
    %2 = cir.get_global @goodB2GSink : !cir.ptr<!cir.func<!void (!s8i)>> loc(#loc86)
    cir.store %2, %1 : !cir.ptr<!cir.func<!void (!s8i)>>, !cir.ptr<!cir.ptr<!cir.func<!void (!s8i)>>> loc(#loc125)
    %3 = cir.const #cir.int<32> : !s32i loc(#loc87)
    %4 = cir.cast(integral, %3 : !s32i), !s8i loc(#loc87)
    cir.store %4, %0 : !s8i, !cir.ptr<!s8i> loc(#loc126)
    %5 = cir.call @rand() : () -> !s32i extra(#fn_attr1) loc(#loc89)
    %6 = cir.const #cir.int<1> : !s32i loc(#loc89)
    %7 = cir.binop(and, %5, %6) : !s32i loc(#loc89)
    %8 = cir.cast(int_to_bool, %7 : !s32i), !cir.bool loc(#loc89)
    %9 = cir.ternary(%8, true {
      %14 = cir.call @rand() : () -> !s32i extra(#fn_attr1) loc(#loc89)
      %15 = cir.cast(integral, %14 : !s32i), !u32i loc(#loc89)
      %16 = cir.const #cir.int<30> : !s32i loc(#loc89)
      %17 = cir.shift(left, %15 : !u32i, %16 : !s32i) -> !u32i loc(#loc89)
      %18 = cir.call @rand() : () -> !s32i extra(#fn_attr1) loc(#loc89)
      %19 = cir.cast(integral, %18 : !s32i), !u32i loc(#loc89)
      %20 = cir.const #cir.int<15> : !s32i loc(#loc89)
      %21 = cir.shift(left, %19 : !u32i, %20 : !s32i) -> !u32i loc(#loc89)
      %22 = cir.binop(xor, %17, %21) : !u32i loc(#loc89)
      %23 = cir.call @rand() : () -> !s32i extra(#fn_attr1) loc(#loc89)
      %24 = cir.cast(integral, %23 : !s32i), !u32i loc(#loc89)
      %25 = cir.binop(xor, %22, %24) : !u32i loc(#loc89)
      cir.yield %25 : !u32i loc(#loc89)
    }, false {
      %14 = cir.call @rand() : () -> !s32i extra(#fn_attr1) loc(#loc89)
      %15 = cir.cast(integral, %14 : !s32i), !u32i loc(#loc89)
      %16 = cir.const #cir.int<30> : !s32i loc(#loc89)
      %17 = cir.shift(left, %15 : !u32i, %16 : !s32i) -> !u32i loc(#loc89)
      %18 = cir.call @rand() : () -> !s32i extra(#fn_attr1) loc(#loc89)
      %19 = cir.cast(integral, %18 : !s32i), !u32i loc(#loc89)
      %20 = cir.const #cir.int<15> : !s32i loc(#loc89)
      %21 = cir.shift(left, %19 : !u32i, %20 : !s32i) -> !u32i loc(#loc89)
      %22 = cir.binop(xor, %17, %21) : !u32i loc(#loc89)
      %23 = cir.call @rand() : () -> !s32i extra(#fn_attr1) loc(#loc89)
      %24 = cir.cast(integral, %23 : !s32i), !u32i loc(#loc89)
      %25 = cir.binop(xor, %22, %24) : !u32i loc(#loc89)
      %26 = cir.unary(minus, %25) : !u32i, !u32i loc(#loc89)
      %27 = cir.const #cir.int<1> : !s32i loc(#loc89)
      %28 = cir.cast(integral, %27 : !s32i), !u32i loc(#loc89)
      %29 = cir.binop(sub, %26, %28) : !u32i loc(#loc89)
      cir.yield %29 : !u32i loc(#loc89)
    }) : (!cir.bool) -> !u32i loc(#loc89)
    %10 = cir.cast(integral, %9 : !u32i), !s32i loc(#loc89)
    %11 = cir.cast(integral, %10 : !s32i), !s8i loc(#loc89)
    cir.store %11, %0 : !s8i, !cir.ptr<!s8i> loc(#loc127)
    %12 = cir.load %1 : !cir.ptr<!cir.ptr<!cir.func<!void (!s8i)>>>, !cir.ptr<!cir.func<!void (!s8i)>> loc(#loc91)
    %13 = cir.load %0 : !cir.ptr<!s8i>, !s8i loc(#loc92)
    cir.call %12(%13) : (!cir.ptr<!cir.func<!void (!s8i)>>, !s8i) -> () loc(#loc91)
    cir.return loc(#loc82)
  } loc(#loc123)
} loc(#loc)
#loc = loc("/home/ladisgin/git_proj/test_projects/juliet-c/testcases/CWE190_Integer_Overflow/s01/CWE190_Integer_Overflow__char_rand_add_44.c":0:0)
#loc1 = loc("../../../testcasesupport/std_testcase_io.h":30:1)
#loc2 = loc("../../../testcasesupport/std_testcase_io.h":30:35)
#loc3 = loc("CWE190_Integer_Overflow__char_rand_add_44.c":22:1)
#loc4 = loc("CWE190_Integer_Overflow__char_rand_add_44.c":29:1)
#loc7 = loc("CWE190_Integer_Overflow__char_rand_add_44.c":23:1)
#loc8 = loc("CWE190_Integer_Overflow__char_rand_add_44.c":24:5)
#loc9 = loc("CWE190_Integer_Overflow__char_rand_add_44.c":28:5)
#loc10 = loc("CWE190_Integer_Overflow__char_rand_add_44.c":26:9)
#loc11 = loc("CWE190_Integer_Overflow__char_rand_add_44.c":26:30)
#loc12 = loc("CWE190_Integer_Overflow__char_rand_add_44.c":26:23)
#loc13 = loc("CWE190_Integer_Overflow__char_rand_add_44.c":27:26)
#loc14 = loc("CWE190_Integer_Overflow__char_rand_add_44.c":27:9)
#loc15 = loc("/usr/include/stdlib.h":573:1)
#loc16 = loc("/usr/include/stdlib.h":573:24)
#loc17 = loc("CWE190_Integer_Overflow__char_rand_add_44.c":31:1)
#loc18 = loc("CWE190_Integer_Overflow__char_rand_add_44.c":41:1)
#loc19 = loc("CWE190_Integer_Overflow__char_rand_add_44.c":33:5)
#loc20 = loc("CWE190_Integer_Overflow__char_rand_add_44.c":33:10)
#loc21 = loc("CWE190_Integer_Overflow__char_rand_add_44.c":35:5)
#loc22 = loc("CWE190_Integer_Overflow__char_rand_add_44.c":35:30)
#loc23 = loc("CWE190_Integer_Overflow__char_rand_add_44.c":36:12)
#loc24 = loc("CWE190_Integer_Overflow__char_rand_add_44.c":36:5)
#loc25 = loc("CWE190_Integer_Overflow__char_rand_add_44.c":38:18)
#loc26 = loc("CWE190_Integer_Overflow__char_rand_add_44.c":38:5)
#loc27 = loc("CWE190_Integer_Overflow__char_rand_add_44.c":40:5)
#loc28 = loc("CWE190_Integer_Overflow__char_rand_add_44.c":40:13)
#loc29 = loc("CWE190_Integer_Overflow__char_rand_add_44.c":92:1)
#loc30 = loc("CWE190_Integer_Overflow__char_rand_add_44.c":96:1)
#loc31 = loc("CWE190_Integer_Overflow__char_rand_add_44.c":94:5)
#loc32 = loc("CWE190_Integer_Overflow__char_rand_add_44.c":94:13)
#loc33 = loc("CWE190_Integer_Overflow__char_rand_add_44.c":95:5)
#loc34 = loc("CWE190_Integer_Overflow__char_rand_add_44.c":95:13)
#loc35 = loc("CWE190_Integer_Overflow__char_rand_add_44.c":48:1)
#loc36 = loc("CWE190_Integer_Overflow__char_rand_add_44.c":55:1)
#loc39 = loc("CWE190_Integer_Overflow__char_rand_add_44.c":49:1)
#loc40 = loc("CWE190_Integer_Overflow__char_rand_add_44.c":50:5)
#loc41 = loc("CWE190_Integer_Overflow__char_rand_add_44.c":54:5)
#loc42 = loc("CWE190_Integer_Overflow__char_rand_add_44.c":52:9)
#loc43 = loc("CWE190_Integer_Overflow__char_rand_add_44.c":52:30)
#loc44 = loc("CWE190_Integer_Overflow__char_rand_add_44.c":52:23)
#loc45 = loc("CWE190_Integer_Overflow__char_rand_add_44.c":53:26)
#loc46 = loc("CWE190_Integer_Overflow__char_rand_add_44.c":53:9)
#loc47 = loc("CWE190_Integer_Overflow__char_rand_add_44.c":57:1)
#loc48 = loc("CWE190_Integer_Overflow__char_rand_add_44.c":65:1)
#loc49 = loc("CWE190_Integer_Overflow__char_rand_add_44.c":59:5)
#loc50 = loc("CWE190_Integer_Overflow__char_rand_add_44.c":59:10)
#loc51 = loc("CWE190_Integer_Overflow__char_rand_add_44.c":60:5)
#loc52 = loc("CWE190_Integer_Overflow__char_rand_add_44.c":60:30)
#loc53 = loc("CWE190_Integer_Overflow__char_rand_add_44.c":61:12)
#loc54 = loc("CWE190_Integer_Overflow__char_rand_add_44.c":61:5)
#loc55 = loc("CWE190_Integer_Overflow__char_rand_add_44.c":63:12)
#loc56 = loc("CWE190_Integer_Overflow__char_rand_add_44.c":63:5)
#loc57 = loc("CWE190_Integer_Overflow__char_rand_add_44.c":64:5)
#loc58 = loc("CWE190_Integer_Overflow__char_rand_add_44.c":64:13)
#loc59 = loc("../../../testcasesupport/std_testcase_io.h":14:1)
#loc60 = loc("../../../testcasesupport/std_testcase_io.h":14:33)
#loc61 = loc("CWE190_Integer_Overflow__char_rand_add_44.c":78:19)
#loc62 = loc("CWE190_Integer_Overflow__char_rand_add_44.c":68:1)
#loc63 = loc("CWE190_Integer_Overflow__char_rand_add_44.c":80:1)
#loc66 = loc("CWE190_Integer_Overflow__char_rand_add_44.c":69:1)
#loc67 = loc("CWE190_Integer_Overflow__char_rand_add_44.c":71:5)
#loc68 = loc("CWE190_Integer_Overflow__char_rand_add_44.c":79:5)
#loc69 = loc("CWE190_Integer_Overflow__char_rand_add_44.c":71:9)
#loc70 = loc("CWE190_Integer_Overflow__char_rand_add_44.c":71:16)
#loc71 = loc("CWE190_Integer_Overflow__char_rand_add_44.c":71:14)
#loc72 = loc("CWE190_Integer_Overflow__char_rand_add_44.c":72:5)
#loc73 = loc("CWE190_Integer_Overflow__char_rand_add_44.c":75:5)
#loc74 = loc("CWE190_Integer_Overflow__char_rand_add_44.c":77:5)
#loc75 = loc("CWE190_Integer_Overflow__char_rand_add_44.c":73:9)
#loc76 = loc("CWE190_Integer_Overflow__char_rand_add_44.c":73:30)
#loc77 = loc("CWE190_Integer_Overflow__char_rand_add_44.c":73:23)
#loc78 = loc("CWE190_Integer_Overflow__char_rand_add_44.c":74:26)
#loc79 = loc("CWE190_Integer_Overflow__char_rand_add_44.c":74:9)
#loc80 = loc("CWE190_Integer_Overflow__char_rand_add_44.c":78:9)
#loc81 = loc("CWE190_Integer_Overflow__char_rand_add_44.c":82:1)
#loc82 = loc("CWE190_Integer_Overflow__char_rand_add_44.c":90:1)
#loc83 = loc("CWE190_Integer_Overflow__char_rand_add_44.c":84:5)
#loc84 = loc("CWE190_Integer_Overflow__char_rand_add_44.c":84:10)
#loc85 = loc("CWE190_Integer_Overflow__char_rand_add_44.c":85:5)
#loc86 = loc("CWE190_Integer_Overflow__char_rand_add_44.c":85:30)
#loc87 = loc("CWE190_Integer_Overflow__char_rand_add_44.c":86:12)
#loc88 = loc("CWE190_Integer_Overflow__char_rand_add_44.c":86:5)
#loc89 = loc("CWE190_Integer_Overflow__char_rand_add_44.c":88:18)
#loc90 = loc("CWE190_Integer_Overflow__char_rand_add_44.c":88:5)
#loc91 = loc("CWE190_Integer_Overflow__char_rand_add_44.c":89:5)
#loc92 = loc("CWE190_Integer_Overflow__char_rand_add_44.c":89:13)
#loc93 = loc(fused[#loc1, #loc2])
#loc94 = loc(fused[#loc3, #loc4])
#loc96 = loc(fused[#loc8, #loc9])
#loc97 = loc(fused[#loc10, #loc11])
#loc98 = loc(fused[#loc15, #loc16])
#loc99 = loc(fused[#loc17, #loc18])
#loc100 = loc(fused[#loc19, #loc20])
#loc101 = loc(fused[#loc21, #loc22])
#loc102 = loc(fused[#loc24, #loc23])
#loc103 = loc(fused[#loc26, #loc25])
#loc104 = loc(fused[#loc29, #loc30])
#loc105 = loc(fused[#loc31, #loc32])
#loc106 = loc(fused[#loc33, #loc34])
#loc107 = loc(fused[#loc35, #loc36])
#loc109 = loc(fused[#loc40, #loc41])
#loc110 = loc(fused[#loc42, #loc43])
#loc111 = loc(fused[#loc47, #loc48])
#loc112 = loc(fused[#loc49, #loc50])
#loc113 = loc(fused[#loc51, #loc52])
#loc114 = loc(fused[#loc54, #loc53])
#loc115 = loc(fused[#loc56, #loc55])
#loc116 = loc(fused[#loc59, #loc60])
#loc117 = loc(fused[#loc62, #loc63])
#loc119 = loc(fused[#loc67, #loc68])
#loc120 = loc(fused[#loc69, #loc70])
#loc121 = loc(fused[#loc72, #loc73, #loc74, #loc68])
#loc122 = loc(fused[#loc75, #loc76])
#loc123 = loc(fused[#loc81, #loc82])
#loc124 = loc(fused[#loc83, #loc84])
#loc125 = loc(fused[#loc85, #loc86])
#loc126 = loc(fused[#loc88, #loc87])
#loc127 = loc(fused[#loc90, #loc89])
