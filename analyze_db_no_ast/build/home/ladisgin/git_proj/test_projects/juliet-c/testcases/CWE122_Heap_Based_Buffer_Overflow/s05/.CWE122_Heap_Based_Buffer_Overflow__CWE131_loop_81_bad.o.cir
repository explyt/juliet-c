!s32i = !cir.int<s, 32>
!u32i = !cir.int<u, 32>
!u64i = !cir.int<u, 64>
!void = !cir.void
#fn_attr = #cir<extra({nothrow = #cir.nothrow})>
#fn_attr1 = #cir<extra({inline = #cir.inline<no>, optnone = #cir.optnone})>
#loc7 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE131_loop_81_bad.cpp":24:61)
#loc8 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE131_loop_81_bad.cpp":24:68)
#loc9 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE131_loop_81_bad.cpp":24:74)
#loc40 = loc(fused[#loc8, #loc9])
!ty_CWE122_Heap_Based_Buffer_Overflow__CWE131_loop_813A3ACWE122_Heap_Based_Buffer_Overflow__CWE131_loop_81_base = !cir.struct<class "CWE122_Heap_Based_Buffer_Overflow__CWE131_loop_81::CWE122_Heap_Based_Buffer_Overflow__CWE131_loop_81_base" {!cir.ptr<!cir.ptr<!cir.func<!u32i ()>>>} #cir.record.decl.ast>
!ty_CWE122_Heap_Based_Buffer_Overflow__CWE131_loop_813A3ACWE122_Heap_Based_Buffer_Overflow__CWE131_loop_81_bad = !cir.struct<class "CWE122_Heap_Based_Buffer_Overflow__CWE131_loop_81::CWE122_Heap_Based_Buffer_Overflow__CWE131_loop_81_bad" {!ty_CWE122_Heap_Based_Buffer_Overflow__CWE131_loop_813A3ACWE122_Heap_Based_Buffer_Overflow__CWE131_loop_81_base} #cir.record.decl.ast>
module @"/home/ladisgin/git_proj/test_projects/juliet-c/testcases/CWE122_Heap_Based_Buffer_Overflow/s05/CWE122_Heap_Based_Buffer_Overflow__CWE131_loop_81_bad.cpp" attributes {cir.lang = #cir.lang<cxx>, cir.sob = #cir.signed_overflow_behavior<undefined>, cir.triple = "x86_64-unknown-linux-gnu", dlti.dl_spec = #dlti.dl_spec<#dlti.dl_entry<i1, dense<8> : vector<2xi64>>, #dlti.dl_entry<!llvm.ptr, dense<64> : vector<4xi64>>, #dlti.dl_entry<i32, dense<32> : vector<2xi64>>, #dlti.dl_entry<i8, dense<8> : vector<2xi64>>, #dlti.dl_entry<i16, dense<16> : vector<2xi64>>, #dlti.dl_entry<!llvm.ptr<271>, dense<32> : vector<4xi64>>, #dlti.dl_entry<!llvm.ptr<272>, dense<64> : vector<4xi64>>, #dlti.dl_entry<f128, dense<128> : vector<2xi64>>, #dlti.dl_entry<f16, dense<16> : vector<2xi64>>, #dlti.dl_entry<!llvm.ptr<270>, dense<32> : vector<4xi64>>, #dlti.dl_entry<f64, dense<64> : vector<2xi64>>, #dlti.dl_entry<i128, dense<128> : vector<2xi64>>, #dlti.dl_entry<f80, dense<128> : vector<2xi64>>, #dlti.dl_entry<i64, dense<64> : vector<2xi64>>, #dlti.dl_entry<"dlti.stack_alignment", 128 : i64>, #dlti.dl_entry<"dlti.endianness", "little">>, llvm.data_layout = "e-m:e-p270:32:32-p271:32:32-p272:64:64-i64:64-i128:128-f80:128-n8:16:32:64-S128"} {
  cir.func private  @printIntLine(!s32i) loc(#loc37)
  cir.func private  @free(!cir.ptr<!void>) extra(#fn_attr) loc(#loc38)
  cir.func  @_ZNK49CWE122_Heap_Based_Buffer_Overflow__CWE131_loop_8153CWE122_Heap_Based_Buffer_Overflow__CWE131_loop_81_bad6actionEPi(%arg0: !cir.ptr<!ty_CWE122_Heap_Based_Buffer_Overflow__CWE131_loop_813A3ACWE122_Heap_Based_Buffer_Overflow__CWE131_loop_81_bad> loc("CWE122_Heap_Based_Buffer_Overflow__CWE131_loop_81_bad.cpp":24:61), %arg1: !cir.ptr<!s32i> loc(fused[#loc8, #loc9])) extra(#fn_attr1) {
    %0 = cir.alloca !cir.ptr<!ty_CWE122_Heap_Based_Buffer_Overflow__CWE131_loop_813A3ACWE122_Heap_Based_Buffer_Overflow__CWE131_loop_81_bad>, !cir.ptr<!cir.ptr<!ty_CWE122_Heap_Based_Buffer_Overflow__CWE131_loop_813A3ACWE122_Heap_Based_Buffer_Overflow__CWE131_loop_81_bad>>, ["this", init] {alignment = 8 : i64} loc(#loc7)
    %1 = cir.alloca !cir.ptr<!s32i>, !cir.ptr<!cir.ptr<!s32i>>, ["data", init] {alignment = 8 : i64} loc(#loc40)
    cir.store %arg0, %0 : !cir.ptr<!ty_CWE122_Heap_Based_Buffer_Overflow__CWE131_loop_813A3ACWE122_Heap_Based_Buffer_Overflow__CWE131_loop_81_bad>, !cir.ptr<!cir.ptr<!ty_CWE122_Heap_Based_Buffer_Overflow__CWE131_loop_813A3ACWE122_Heap_Based_Buffer_Overflow__CWE131_loop_81_bad>> loc(#loc10)
    cir.store %arg1, %1 : !cir.ptr<!s32i>, !cir.ptr<!cir.ptr<!s32i>> loc(#loc10)
    %2 = cir.load %0 : !cir.ptr<!cir.ptr<!ty_CWE122_Heap_Based_Buffer_Overflow__CWE131_loop_813A3ACWE122_Heap_Based_Buffer_Overflow__CWE131_loop_81_bad>>, !cir.ptr<!ty_CWE122_Heap_Based_Buffer_Overflow__CWE131_loop_813A3ACWE122_Heap_Based_Buffer_Overflow__CWE131_loop_81_bad> loc(#loc7)
    cir.scope {
      %3 = cir.alloca !cir.array<!s32i x 10>, !cir.ptr<!cir.array<!s32i x 10>>, ["source"] {alignment = 16 : i64} loc(#loc42)
      %4 = cir.alloca !u64i, !cir.ptr<!u64i>, ["i"] {alignment = 8 : i64} loc(#loc43)
      %5 = cir.const #cir.zero : !cir.array<!s32i x 10> loc(#loc42)
      cir.store %5, %3 : !cir.array<!s32i x 10>, !cir.ptr<!cir.array<!s32i x 10>> loc(#loc42)
      cir.scope {
        %13 = cir.const #cir.int<0> : !s32i loc(#loc19)
        %14 = cir.cast(integral, %13 : !s32i), !u64i loc(#loc19)
        cir.store %14, %4 : !u64i, !cir.ptr<!u64i> loc(#loc45)
        cir.for : cond {
          %15 = cir.load %4 : !cir.ptr<!u64i>, !u64i loc(#loc21)
          %16 = cir.const #cir.int<10> : !s32i loc(#loc22)
          %17 = cir.cast(integral, %16 : !s32i), !u64i loc(#loc22)
          %18 = cir.cmp(lt, %15, %17) : !u64i, !cir.bool loc(#loc46)
          cir.condition(%18) loc(#loc46)
        } body {
          %15 = cir.load %4 : !cir.ptr<!u64i>, !u64i loc(#loc23)
          %16 = cir.cast(array_to_ptrdecay, %3 : !cir.ptr<!cir.array<!s32i x 10>>), !cir.ptr<!s32i> loc(#loc24)
          %17 = cir.ptr_stride(%16 : !cir.ptr<!s32i>, %15 : !u64i), !cir.ptr<!s32i> loc(#loc24)
          %18 = cir.load %17 : !cir.ptr<!s32i>, !s32i loc(#loc24)
          %19 = cir.load %1 : !cir.ptr<!cir.ptr<!s32i>>, !cir.ptr<!s32i> loc(#loc25)
          %20 = cir.load %4 : !cir.ptr<!u64i>, !u64i loc(#loc26)
          %21 = cir.ptr_stride(%19 : !cir.ptr<!s32i>, %20 : !u64i), !cir.ptr<!s32i> loc(#loc27)
          cir.store %18, %21 : !s32i, !cir.ptr<!s32i> loc(#loc47)
          cir.yield loc(#loc18)
        } step {
          %15 = cir.load %4 : !cir.ptr<!u64i>, !u64i loc(#loc29)
          %16 = cir.unary(inc, %15) : !u64i, !u64i loc(#loc30)
          cir.store %16, %4 : !u64i, !cir.ptr<!u64i> loc(#loc48)
          cir.yield loc(#loc44)
        } loc(#loc44)
      } loc(#loc44)
      %6 = cir.load %1 : !cir.ptr<!cir.ptr<!s32i>>, !cir.ptr<!s32i> loc(#loc31)
      %7 = cir.const #cir.int<0> : !s32i loc(#loc32)
      %8 = cir.ptr_stride(%6 : !cir.ptr<!s32i>, %7 : !s32i), !cir.ptr<!s32i> loc(#loc33)
      %9 = cir.load %8 : !cir.ptr<!s32i>, !s32i loc(#loc31)
      cir.call @printIntLine(%9) : (!s32i) -> () loc(#loc34)
      %10 = cir.get_global @free : !cir.ptr<!cir.func<!void (!cir.ptr<!void>)>> loc(#loc35)
      %11 = cir.load %1 : !cir.ptr<!cir.ptr<!s32i>>, !cir.ptr<!s32i> loc(#loc36)
      %12 = cir.cast(bitcast, %11 : !cir.ptr<!s32i>), !cir.ptr<!void> loc(#loc36)
      cir.call @free(%12) : (!cir.ptr<!void>) -> () extra(#fn_attr) loc(#loc35)
    } loc(#loc41)
    cir.return loc(#loc6)
  } loc(#loc39)
} loc(#loc)
#loc = loc("/home/ladisgin/git_proj/test_projects/juliet-c/testcases/CWE122_Heap_Based_Buffer_Overflow/s05/CWE122_Heap_Based_Buffer_Overflow__CWE131_loop_81_bad.cpp":0:0)
#loc1 = loc("../../../testcasesupport/std_testcase_io.h":18:1)
#loc2 = loc("../../../testcasesupport/std_testcase_io.h":18:33)
#loc3 = loc("/usr/include/stdlib.h":687:1)
#loc4 = loc("/usr/include/stdlib.h":687:32)
#loc5 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE131_loop_81_bad.cpp":24:1)
#loc6 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE131_loop_81_bad.cpp":37:1)
#loc10 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE131_loop_81_bad.cpp":25:1)
#loc11 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE131_loop_81_bad.cpp":26:5)
#loc12 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE131_loop_81_bad.cpp":36:5)
#loc13 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE131_loop_81_bad.cpp":27:9)
#loc14 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE131_loop_81_bad.cpp":27:28)
#loc15 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE131_loop_81_bad.cpp":28:9)
#loc16 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE131_loop_81_bad.cpp":28:16)
#loc17 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE131_loop_81_bad.cpp":30:9)
#loc18 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE131_loop_81_bad.cpp":33:9)
#loc19 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE131_loop_81_bad.cpp":30:18)
#loc20 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE131_loop_81_bad.cpp":30:14)
#loc21 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE131_loop_81_bad.cpp":30:21)
#loc22 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE131_loop_81_bad.cpp":30:25)
#loc23 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE131_loop_81_bad.cpp":32:30)
#loc24 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE131_loop_81_bad.cpp":32:23)
#loc25 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE131_loop_81_bad.cpp":32:13)
#loc26 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE131_loop_81_bad.cpp":32:18)
#loc27 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE131_loop_81_bad.cpp":32:19)
#loc28 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE131_loop_81_bad.cpp":32:31)
#loc29 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE131_loop_81_bad.cpp":30:30)
#loc30 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE131_loop_81_bad.cpp":30:29)
#loc31 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE131_loop_81_bad.cpp":34:22)
#loc32 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE131_loop_81_bad.cpp":34:27)
#loc33 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE131_loop_81_bad.cpp":34:28)
#loc34 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE131_loop_81_bad.cpp":34:9)
#loc35 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE131_loop_81_bad.cpp":35:9)
#loc36 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE131_loop_81_bad.cpp":35:14)
#loc37 = loc(fused[#loc1, #loc2])
#loc38 = loc(fused[#loc3, #loc4])
#loc39 = loc(fused[#loc5, #loc6])
#loc41 = loc(fused[#loc11, #loc12])
#loc42 = loc(fused[#loc13, #loc14])
#loc43 = loc(fused[#loc15, #loc16])
#loc44 = loc(fused[#loc17, #loc18])
#loc45 = loc(fused[#loc20, #loc19])
#loc46 = loc(fused[#loc21, #loc22])
#loc47 = loc(fused[#loc25, #loc28])
#loc48 = loc(fused[#loc30, #loc29])
