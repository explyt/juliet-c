!s32i = !cir.int<s, 32>
!u32i = !cir.int<u, 32>
#fn_attr = #cir<extra({inline = #cir.inline<no>, optnone = #cir.optnone})>
#loc5 = loc("CWE190_Integer_Overflow__int_rand_multiply_81_goodG2B.cpp":25:61)
#loc6 = loc("CWE190_Integer_Overflow__int_rand_multiply_81_goodG2B.cpp":25:68)
#loc7 = loc("CWE190_Integer_Overflow__int_rand_multiply_81_goodG2B.cpp":25:72)
#loc21 = loc(fused[#loc6, #loc7])
!ty_CWE190_Integer_Overflow__int_rand_multiply_813A3ACWE190_Integer_Overflow__int_rand_multiply_81_base = !cir.struct<class "CWE190_Integer_Overflow__int_rand_multiply_81::CWE190_Integer_Overflow__int_rand_multiply_81_base" {!cir.ptr<!cir.ptr<!cir.func<!u32i ()>>>} #cir.record.decl.ast>
!ty_CWE190_Integer_Overflow__int_rand_multiply_813A3ACWE190_Integer_Overflow__int_rand_multiply_81_goodG2B = !cir.struct<class "CWE190_Integer_Overflow__int_rand_multiply_81::CWE190_Integer_Overflow__int_rand_multiply_81_goodG2B" {!ty_CWE190_Integer_Overflow__int_rand_multiply_813A3ACWE190_Integer_Overflow__int_rand_multiply_81_base} #cir.record.decl.ast>
module @"/home/ladisgin/git_proj/test_projects/juliet-c/testcases/CWE190_Integer_Overflow/s04/CWE190_Integer_Overflow__int_rand_multiply_81_goodG2B.cpp" attributes {cir.lang = #cir.lang<cxx>, cir.sob = #cir.signed_overflow_behavior<undefined>, cir.triple = "x86_64-unknown-linux-gnu", dlti.dl_spec = #dlti.dl_spec<#dlti.dl_entry<!llvm.ptr, dense<64> : vector<4xi64>>, #dlti.dl_entry<i1, dense<8> : vector<2xi64>>, #dlti.dl_entry<i128, dense<128> : vector<2xi64>>, #dlti.dl_entry<f80, dense<128> : vector<2xi64>>, #dlti.dl_entry<i64, dense<64> : vector<2xi64>>, #dlti.dl_entry<!llvm.ptr<270>, dense<32> : vector<4xi64>>, #dlti.dl_entry<f16, dense<16> : vector<2xi64>>, #dlti.dl_entry<!llvm.ptr<272>, dense<64> : vector<4xi64>>, #dlti.dl_entry<f64, dense<64> : vector<2xi64>>, #dlti.dl_entry<f128, dense<128> : vector<2xi64>>, #dlti.dl_entry<!llvm.ptr<271>, dense<32> : vector<4xi64>>, #dlti.dl_entry<i32, dense<32> : vector<2xi64>>, #dlti.dl_entry<i8, dense<8> : vector<2xi64>>, #dlti.dl_entry<i16, dense<16> : vector<2xi64>>, #dlti.dl_entry<"dlti.stack_alignment", 128 : i64>, #dlti.dl_entry<"dlti.endianness", "little">>, llvm.data_layout = "e-m:e-p270:32:32-p271:32:32-p272:64:64-i64:64-i128:128-f80:128-n8:16:32:64-S128"} {
  cir.func private  @printIntLine(!s32i) loc(#loc19)
  cir.func  @_ZNK45CWE190_Integer_Overflow__int_rand_multiply_8153CWE190_Integer_Overflow__int_rand_multiply_81_goodG2B6actionEi(%arg0: !cir.ptr<!ty_CWE190_Integer_Overflow__int_rand_multiply_813A3ACWE190_Integer_Overflow__int_rand_multiply_81_goodG2B> loc("CWE190_Integer_Overflow__int_rand_multiply_81_goodG2B.cpp":25:61), %arg1: !s32i loc(fused[#loc6, #loc7])) extra(#fn_attr) {
    %0 = cir.alloca !cir.ptr<!ty_CWE190_Integer_Overflow__int_rand_multiply_813A3ACWE190_Integer_Overflow__int_rand_multiply_81_goodG2B>, !cir.ptr<!cir.ptr<!ty_CWE190_Integer_Overflow__int_rand_multiply_813A3ACWE190_Integer_Overflow__int_rand_multiply_81_goodG2B>>, ["this", init] {alignment = 8 : i64} loc(#loc5)
    %1 = cir.alloca !s32i, !cir.ptr<!s32i>, ["data", init] {alignment = 4 : i64} loc(#loc21)
    cir.store %arg0, %0 : !cir.ptr<!ty_CWE190_Integer_Overflow__int_rand_multiply_813A3ACWE190_Integer_Overflow__int_rand_multiply_81_goodG2B>, !cir.ptr<!cir.ptr<!ty_CWE190_Integer_Overflow__int_rand_multiply_813A3ACWE190_Integer_Overflow__int_rand_multiply_81_goodG2B>> loc(#loc8)
    cir.store %arg1, %1 : !s32i, !cir.ptr<!s32i> loc(#loc8)
    %2 = cir.load %0 : !cir.ptr<!cir.ptr<!ty_CWE190_Integer_Overflow__int_rand_multiply_813A3ACWE190_Integer_Overflow__int_rand_multiply_81_goodG2B>>, !cir.ptr<!ty_CWE190_Integer_Overflow__int_rand_multiply_813A3ACWE190_Integer_Overflow__int_rand_multiply_81_goodG2B> loc(#loc5)
    cir.scope {
      %3 = cir.load %1 : !cir.ptr<!s32i>, !s32i loc(#loc11)
      %4 = cir.const #cir.int<0> : !s32i loc(#loc12)
      %5 = cir.cmp(gt, %3, %4) : !s32i, !cir.bool loc(#loc23)
      cir.if %5 {
        %6 = cir.alloca !s32i, !cir.ptr<!s32i>, ["result", init] {alignment = 4 : i64} loc(#loc25)
        %7 = cir.load %1 : !cir.ptr<!s32i>, !s32i loc(#loc16)
        %8 = cir.const #cir.int<2> : !s32i loc(#loc15)
        %9 = cir.binop(mul, %7, %8) nsw : !s32i loc(#loc16)
        cir.store %9, %6 : !s32i, !cir.ptr<!s32i> loc(#loc25)
        %10 = cir.load %6 : !cir.ptr<!s32i>, !s32i loc(#loc17)
        cir.call @printIntLine(%10) : (!s32i) -> () loc(#loc18)
      } loc(#loc24)
    } loc(#loc22)
    cir.return loc(#loc4)
  } loc(#loc20)
} loc(#loc)
#loc = loc("/home/ladisgin/git_proj/test_projects/juliet-c/testcases/CWE190_Integer_Overflow/s04/CWE190_Integer_Overflow__int_rand_multiply_81_goodG2B.cpp":0:0)
#loc1 = loc("../../../testcasesupport/std_testcase_io.h":18:1)
#loc2 = loc("../../../testcasesupport/std_testcase_io.h":18:33)
#loc3 = loc("CWE190_Integer_Overflow__int_rand_multiply_81_goodG2B.cpp":25:1)
#loc4 = loc("CWE190_Integer_Overflow__int_rand_multiply_81_goodG2B.cpp":33:1)
#loc8 = loc("CWE190_Integer_Overflow__int_rand_multiply_81_goodG2B.cpp":26:1)
#loc9 = loc("CWE190_Integer_Overflow__int_rand_multiply_81_goodG2B.cpp":27:5)
#loc10 = loc("CWE190_Integer_Overflow__int_rand_multiply_81_goodG2B.cpp":32:5)
#loc11 = loc("CWE190_Integer_Overflow__int_rand_multiply_81_goodG2B.cpp":27:8)
#loc12 = loc("CWE190_Integer_Overflow__int_rand_multiply_81_goodG2B.cpp":27:15)
#loc13 = loc("CWE190_Integer_Overflow__int_rand_multiply_81_goodG2B.cpp":28:5)
#loc14 = loc("CWE190_Integer_Overflow__int_rand_multiply_81_goodG2B.cpp":30:9)
#loc15 = loc("CWE190_Integer_Overflow__int_rand_multiply_81_goodG2B.cpp":30:29)
#loc16 = loc("CWE190_Integer_Overflow__int_rand_multiply_81_goodG2B.cpp":30:22)
#loc17 = loc("CWE190_Integer_Overflow__int_rand_multiply_81_goodG2B.cpp":31:22)
#loc18 = loc("CWE190_Integer_Overflow__int_rand_multiply_81_goodG2B.cpp":31:9)
#loc19 = loc(fused[#loc1, #loc2])
#loc20 = loc(fused[#loc3, #loc4])
#loc22 = loc(fused[#loc9, #loc10])
#loc23 = loc(fused[#loc11, #loc12])
#loc24 = loc(fused[#loc13, #loc10])
#loc25 = loc(fused[#loc14, #loc15])
