!s32i = !cir.int<s, 32>
!s8i = !cir.int<s, 8>
#fn_attr = #cir<extra({nothrow = #cir.nothrow})>
#fn_attr1 = #cir<extra({inline = #cir.inline<no>, nothrow = #cir.nothrow, optnone = #cir.optnone, uwtable = #cir.uwtable<async>})>
module @"/workspaces/juliet-c/testcases/CWE511_Logic_Time_Bomb/CWE511_Logic_Time_Bomb__counter_17.c" attributes {cir.lang = #cir.lang<c>, cir.sob = #cir.signed_overflow_behavior<undefined>, cir.triple = "x86_64-unknown-linux-gnu", cir.type_size_info = #cir.type_size_info<char = 8, int = 32, size_t = 64>, cir.uwtable = #cir.uwtable<async>, dlti.dl_spec = #dlti.dl_spec<!llvm.ptr<270> = dense<32> : vector<4xi64>, i32 = dense<32> : vector<2xi64>, i64 = dense<64> : vector<2xi64>, f16 = dense<16> : vector<2xi64>, !llvm.ptr<272> = dense<64> : vector<4xi64>, !llvm.ptr<271> = dense<32> : vector<4xi64>, f64 = dense<64> : vector<2xi64>, f128 = dense<128> : vector<2xi64>, !llvm.ptr = dense<64> : vector<4xi64>, i1 = dense<8> : vector<2xi64>, i8 = dense<8> : vector<2xi64>, i16 = dense<16> : vector<2xi64>, i128 = dense<128> : vector<2xi64>, f80 = dense<128> : vector<2xi64>, "dlti.mangling_mode" = "e", "dlti.endianness" = "little", "dlti.stack_alignment" = 128 : i64>} {
  cir.func private @unlink(!cir.ptr<!s8i>) -> !s32i extra(#fn_attr) loc(#loc77)
  cir.global "private" constant cir_private dsolocal @".str" = #cir.const_array<"important_file.txt\00" : !cir.array<!s8i x 19>> : !cir.array<!s8i x 19> {alignment = 1 : i64} loc(#loc3)
  cir.func no_proto @CWE511_Logic_Time_Bomb__counter_17_bad() extra(#fn_attr1) {
    %0 = cir.alloca !s32i, !cir.ptr<!s32i>, ["count", init] {alignment = 4 : i64} loc(#loc79)
    %1 = cir.alloca !s32i, !cir.ptr<!s32i>, ["j"] {alignment = 4 : i64} loc(#loc80)
    cir.br ^bb1 loc(#loc81)
  ^bb1:  // pred: ^bb0
    %2 = cir.const #cir.int<0> : !s32i loc(#loc12)
    cir.store %2, %1 : !s32i, !cir.ptr<!s32i> loc(#loc82)
    cir.br ^bb2 loc(#loc81)
  ^bb2:  // 2 preds: ^bb1, ^bb19
    %3 = cir.load %1 : !cir.ptr<!s32i>, !s32i loc(#loc14)
    %4 = cir.const #cir.int<1> : !s32i loc(#loc15)
    %5 = cir.cmp(lt, %3, %4) : !s32i, !cir.bool loc(#loc83)
    cir.brcond %5 ^bb3, ^bb20 loc(#loc16)
  ^bb3:  // pred: ^bb2
    cir.br ^bb4 loc(#loc84)
  ^bb4:  // pred: ^bb3
    cir.br ^bb5 loc(#loc85)
  ^bb5:  // pred: ^bb4
    %6 = cir.const #cir.int<0> : !s32i loc(#loc7)
    cir.store %6, %0 : !s32i, !cir.ptr<!s32i> loc(#loc79)
    cir.br ^bb6 loc(#loc86)
  ^bb6:  // pred: ^bb5
    cir.br ^bb8 loc(#loc86)
  ^bb7:  // pred: ^bb14
    %7 = cir.const #cir.int<1> : !s32i loc(#loc22)
    %8 = cir.const #cir.int<1> : !s32i loc(#loc23)
    %9 = cir.cmp(eq, %7, %8) : !s32i, !cir.bool loc(#loc87)
    cir.brcond %9 ^bb8, ^bb15 loc(#loc24)
  ^bb8:  // 2 preds: ^bb6, ^bb7
    cir.br ^bb9 loc(#loc88)
  ^bb9:  // pred: ^bb8
    cir.br ^bb10 loc(#loc89)
  ^bb10:  // pred: ^bb9
    %10 = cir.load %0 : !cir.ptr<!s32i>, !s32i loc(#loc29)
    %11 = cir.const #cir.int<20000> : !s32i loc(#loc30)
    %12 = cir.cmp(eq, %10, %11) : !s32i, !cir.bool loc(#loc90)
    cir.brcond %12 ^bb11, ^bb12 loc(#loc91)
  ^bb11:  // pred: ^bb10
    %13 = cir.get_global @".str" : !cir.ptr<!cir.array<!s8i x 19>> loc(#loc3)
    %14 = cir.cast(array_to_ptrdecay, %13 : !cir.ptr<!cir.array<!s8i x 19>>), !cir.ptr<!s8i> loc(#loc3)
    %15 = cir.call @unlink(%14) : (!cir.ptr<!s8i>) -> !s32i extra(#fn_attr) loc(#loc32)
    cir.br ^bb12 loc(#loc28)
  ^bb12:  // 2 preds: ^bb10, ^bb11
    cir.br ^bb13 loc(#loc28)
  ^bb13:  // pred: ^bb12
    %16 = cir.load %0 : !cir.ptr<!s32i>, !s32i loc(#loc33)
    %17 = cir.unary(inc, %16) nsw : !s32i, !s32i loc(#loc34)
    cir.store %17, %0 : !s32i, !cir.ptr<!s32i> loc(#loc92)
    cir.br ^bb14 loc(#loc26)
  ^bb14:  // pred: ^bb13
    cir.br ^bb7 loc(#loc21)
  ^bb15:  // pred: ^bb7
    cir.br ^bb16 loc(#loc21)
  ^bb16:  // pred: ^bb15
    cir.br ^bb17 loc(#loc19)
  ^bb17:  // pred: ^bb16
    cir.br ^bb18 loc(#loc11)
  ^bb18:  // pred: ^bb17
    cir.br ^bb19 loc(#loc11)
  ^bb19:  // pred: ^bb18
    %18 = cir.load %1 : !cir.ptr<!s32i>, !s32i loc(#loc35)
    %19 = cir.unary(inc, %18) nsw : !s32i, !s32i loc(#loc36)
    cir.store %19, %1 : !s32i, !cir.ptr<!s32i> loc(#loc93)
    cir.br ^bb2 loc(#loc81)
  ^bb20:  // pred: ^bb2
    cir.br ^bb21 loc(#loc11)
  ^bb21:  // pred: ^bb20
    cir.return loc(#loc5)
  } loc(#loc78)
  cir.func no_proto @CWE511_Logic_Time_Bomb__counter_17_good() extra(#fn_attr1) {
    %0 = cir.get_global @good1 : !cir.ptr<!cir.func<()>> loc(#loc95)
    cir.call %0() : (!cir.ptr<!cir.func<()>>) -> () loc(#loc39)
    cir.return loc(#loc38)
  } loc(#loc94)
  cir.func private @printLine(!cir.ptr<!s8i>) loc(#loc96)
  cir.global "private" constant cir_private dsolocal @".str.1" = #cir.const_array<"Happy New Year!\00" : !cir.array<!s8i x 16>> : !cir.array<!s8i x 16> {alignment = 1 : i64} loc(#loc43)
  cir.func no_proto internal private @good1() extra(#fn_attr1) {
    %0 = cir.alloca !s32i, !cir.ptr<!s32i>, ["count", init] {alignment = 4 : i64} loc(#loc98)
    %1 = cir.alloca !s32i, !cir.ptr<!s32i>, ["k"] {alignment = 4 : i64} loc(#loc99)
    cir.br ^bb1 loc(#loc100)
  ^bb1:  // pred: ^bb0
    %2 = cir.const #cir.int<0> : !s32i loc(#loc52)
    cir.store %2, %1 : !s32i, !cir.ptr<!s32i> loc(#loc101)
    cir.br ^bb2 loc(#loc100)
  ^bb2:  // 2 preds: ^bb1, ^bb19
    %3 = cir.load %1 : !cir.ptr<!s32i>, !s32i loc(#loc54)
    %4 = cir.const #cir.int<1> : !s32i loc(#loc55)
    %5 = cir.cmp(lt, %3, %4) : !s32i, !cir.bool loc(#loc102)
    cir.brcond %5 ^bb3, ^bb20 loc(#loc56)
  ^bb3:  // pred: ^bb2
    cir.br ^bb4 loc(#loc103)
  ^bb4:  // pred: ^bb3
    cir.br ^bb5 loc(#loc104)
  ^bb5:  // pred: ^bb4
    %6 = cir.const #cir.int<0> : !s32i loc(#loc47)
    cir.store %6, %0 : !s32i, !cir.ptr<!s32i> loc(#loc98)
    cir.br ^bb6 loc(#loc105)
  ^bb6:  // pred: ^bb5
    cir.br ^bb8 loc(#loc105)
  ^bb7:  // pred: ^bb14
    %7 = cir.const #cir.int<1> : !s32i loc(#loc62)
    %8 = cir.const #cir.int<1> : !s32i loc(#loc63)
    %9 = cir.cmp(eq, %7, %8) : !s32i, !cir.bool loc(#loc106)
    cir.brcond %9 ^bb8, ^bb15 loc(#loc64)
  ^bb8:  // 2 preds: ^bb6, ^bb7
    cir.br ^bb9 loc(#loc107)
  ^bb9:  // pred: ^bb8
    cir.br ^bb10 loc(#loc108)
  ^bb10:  // pred: ^bb9
    %10 = cir.load %0 : !cir.ptr<!s32i>, !s32i loc(#loc69)
    %11 = cir.const #cir.int<20000> : !s32i loc(#loc70)
    %12 = cir.cmp(eq, %10, %11) : !s32i, !cir.bool loc(#loc109)
    cir.brcond %12 ^bb11, ^bb12 loc(#loc110)
  ^bb11:  // pred: ^bb10
    %13 = cir.get_global @".str.1" : !cir.ptr<!cir.array<!s8i x 16>> loc(#loc43)
    %14 = cir.cast(array_to_ptrdecay, %13 : !cir.ptr<!cir.array<!s8i x 16>>), !cir.ptr<!s8i> loc(#loc43)
    cir.call @printLine(%14) : (!cir.ptr<!s8i>) -> () loc(#loc72)
    cir.br ^bb12 loc(#loc68)
  ^bb12:  // 2 preds: ^bb10, ^bb11
    cir.br ^bb13 loc(#loc68)
  ^bb13:  // pred: ^bb12
    %15 = cir.load %0 : !cir.ptr<!s32i>, !s32i loc(#loc73)
    %16 = cir.unary(inc, %15) nsw : !s32i, !s32i loc(#loc74)
    cir.store %16, %0 : !s32i, !cir.ptr<!s32i> loc(#loc111)
    cir.br ^bb14 loc(#loc66)
  ^bb14:  // pred: ^bb13
    cir.br ^bb7 loc(#loc61)
  ^bb15:  // pred: ^bb7
    cir.br ^bb16 loc(#loc61)
  ^bb16:  // pred: ^bb15
    cir.br ^bb17 loc(#loc59)
  ^bb17:  // pred: ^bb16
    cir.br ^bb18 loc(#loc51)
  ^bb18:  // pred: ^bb17
    cir.br ^bb19 loc(#loc51)
  ^bb19:  // pred: ^bb18
    %17 = cir.load %1 : !cir.ptr<!s32i>, !s32i loc(#loc75)
    %18 = cir.unary(inc, %17) nsw : !s32i, !s32i loc(#loc76)
    cir.store %18, %1 : !s32i, !cir.ptr<!s32i> loc(#loc112)
    cir.br ^bb2 loc(#loc100)
  ^bb20:  // pred: ^bb2
    cir.br ^bb21 loc(#loc51)
  ^bb21:  // pred: ^bb20
    cir.return loc(#loc45)
  } loc(#loc97)
} loc(#loc)
#loc = loc("/workspaces/juliet-c/testcases/CWE511_Logic_Time_Bomb/CWE511_Logic_Time_Bomb__counter_17.c":0:0)
#loc1 = loc("/usr/include/unistd.h":858:1)
#loc2 = loc("/usr/include/unistd.h":858:48)
#loc3 = loc("CWE511_Logic_Time_Bomb__counter_17.c":41:28)
#loc4 = loc("CWE511_Logic_Time_Bomb__counter_17.c":29:1)
#loc5 = loc("CWE511_Logic_Time_Bomb__counter_17.c":48:1)
#loc6 = loc("CWE511_Logic_Time_Bomb__counter_17.c":35:13)
#loc7 = loc("CWE511_Logic_Time_Bomb__counter_17.c":35:25)
#loc8 = loc("CWE511_Logic_Time_Bomb__counter_17.c":31:5)
#loc9 = loc("CWE511_Logic_Time_Bomb__counter_17.c":31:9)
#loc10 = loc("CWE511_Logic_Time_Bomb__counter_17.c":32:5)
#loc11 = loc("CWE511_Logic_Time_Bomb__counter_17.c":47:5)
#loc12 = loc("CWE511_Logic_Time_Bomb__counter_17.c":32:13)
#loc13 = loc("CWE511_Logic_Time_Bomb__counter_17.c":32:9)
#loc14 = loc("CWE511_Logic_Time_Bomb__counter_17.c":32:16)
#loc15 = loc("CWE511_Logic_Time_Bomb__counter_17.c":32:20)
#loc16 = loc("CWE511_Logic_Time_Bomb__counter_17.c":32:18)
#loc17 = loc("CWE511_Logic_Time_Bomb__counter_17.c":33:5)
#loc18 = loc("CWE511_Logic_Time_Bomb__counter_17.c":34:9)
#loc19 = loc("CWE511_Logic_Time_Bomb__counter_17.c":46:9)
#loc20 = loc("CWE511_Logic_Time_Bomb__counter_17.c":36:13)
#loc21 = loc("CWE511_Logic_Time_Bomb__counter_17.c":45:25)
#loc22 = loc("CWE511_Logic_Time_Bomb__counter_17.c":45:19)
#loc23 = loc("CWE511_Logic_Time_Bomb__counter_17.c":45:24)
#loc24 = loc("CWE511_Logic_Time_Bomb__counter_17.c":45:21)
#loc25 = loc("CWE511_Logic_Time_Bomb__counter_17.c":37:13)
#loc26 = loc("CWE511_Logic_Time_Bomb__counter_17.c":44:13)
#loc27 = loc("CWE511_Logic_Time_Bomb__counter_17.c":39:17)
#loc28 = loc("CWE511_Logic_Time_Bomb__counter_17.c":42:17)
#loc29 = loc("CWE511_Logic_Time_Bomb__counter_17.c":39:21)
#loc30 = loc("CWE511_Logic_Time_Bomb__counter_17.c":39:30)
#loc31 = loc("CWE511_Logic_Time_Bomb__counter_17.c":40:17)
#loc32 = loc("CWE511_Logic_Time_Bomb__counter_17.c":41:21)
#loc33 = loc("CWE511_Logic_Time_Bomb__counter_17.c":43:22)
#loc34 = loc("CWE511_Logic_Time_Bomb__counter_17.c":43:17)
#loc35 = loc("CWE511_Logic_Time_Bomb__counter_17.c":32:24)
#loc36 = loc("CWE511_Logic_Time_Bomb__counter_17.c":32:23)
#loc37 = loc("CWE511_Logic_Time_Bomb__counter_17.c":76:1)
#loc38 = loc("CWE511_Logic_Time_Bomb__counter_17.c":79:1)
#loc39 = loc("CWE511_Logic_Time_Bomb__counter_17.c":78:5)
#loc40 = loc("CWE511_Logic_Time_Bomb__counter_17.c":78:11)
#loc41 = loc("../../testcasesupport/std_testcase_io.h":14:1)
#loc42 = loc("../../testcasesupport/std_testcase_io.h":14:33)
#loc43 = loc("CWE511_Logic_Time_Bomb__counter_17.c":67:31)
#loc44 = loc("CWE511_Logic_Time_Bomb__counter_17.c":55:1)
#loc45 = loc("CWE511_Logic_Time_Bomb__counter_17.c":74:1)
#loc46 = loc("CWE511_Logic_Time_Bomb__counter_17.c":61:13)
#loc47 = loc("CWE511_Logic_Time_Bomb__counter_17.c":61:25)
#loc48 = loc("CWE511_Logic_Time_Bomb__counter_17.c":57:5)
#loc49 = loc("CWE511_Logic_Time_Bomb__counter_17.c":57:9)
#loc50 = loc("CWE511_Logic_Time_Bomb__counter_17.c":58:5)
#loc51 = loc("CWE511_Logic_Time_Bomb__counter_17.c":73:5)
#loc52 = loc("CWE511_Logic_Time_Bomb__counter_17.c":58:13)
#loc53 = loc("CWE511_Logic_Time_Bomb__counter_17.c":58:9)
#loc54 = loc("CWE511_Logic_Time_Bomb__counter_17.c":58:16)
#loc55 = loc("CWE511_Logic_Time_Bomb__counter_17.c":58:20)
#loc56 = loc("CWE511_Logic_Time_Bomb__counter_17.c":58:18)
#loc57 = loc("CWE511_Logic_Time_Bomb__counter_17.c":59:5)
#loc58 = loc("CWE511_Logic_Time_Bomb__counter_17.c":60:9)
#loc59 = loc("CWE511_Logic_Time_Bomb__counter_17.c":72:9)
#loc60 = loc("CWE511_Logic_Time_Bomb__counter_17.c":62:13)
#loc61 = loc("CWE511_Logic_Time_Bomb__counter_17.c":71:25)
#loc62 = loc("CWE511_Logic_Time_Bomb__counter_17.c":71:19)
#loc63 = loc("CWE511_Logic_Time_Bomb__counter_17.c":71:24)
#loc64 = loc("CWE511_Logic_Time_Bomb__counter_17.c":71:21)
#loc65 = loc("CWE511_Logic_Time_Bomb__counter_17.c":63:13)
#loc66 = loc("CWE511_Logic_Time_Bomb__counter_17.c":70:13)
#loc67 = loc("CWE511_Logic_Time_Bomb__counter_17.c":65:17)
#loc68 = loc("CWE511_Logic_Time_Bomb__counter_17.c":68:17)
#loc69 = loc("CWE511_Logic_Time_Bomb__counter_17.c":65:21)
#loc70 = loc("CWE511_Logic_Time_Bomb__counter_17.c":65:30)
#loc71 = loc("CWE511_Logic_Time_Bomb__counter_17.c":66:17)
#loc72 = loc("CWE511_Logic_Time_Bomb__counter_17.c":67:21)
#loc73 = loc("CWE511_Logic_Time_Bomb__counter_17.c":69:22)
#loc74 = loc("CWE511_Logic_Time_Bomb__counter_17.c":69:17)
#loc75 = loc("CWE511_Logic_Time_Bomb__counter_17.c":58:24)
#loc76 = loc("CWE511_Logic_Time_Bomb__counter_17.c":58:23)
#loc77 = loc(fused[#loc1, #loc2])
#loc78 = loc(fused[#loc4, #loc5])
#loc79 = loc(fused[#loc6, #loc7])
#loc80 = loc(fused[#loc8, #loc9])
#loc81 = loc(fused[#loc10, #loc11])
#loc82 = loc(fused[#loc13, #loc12])
#loc83 = loc(fused[#loc14, #loc15])
#loc84 = loc(fused[#loc17, #loc11])
#loc85 = loc(fused[#loc18, #loc19])
#loc86 = loc(fused[#loc20, #loc21])
#loc87 = loc(fused[#loc22, #loc23])
#loc88 = loc(fused[#loc25, #loc26])
#loc89 = loc(fused[#loc27, #loc28])
#loc90 = loc(fused[#loc29, #loc30])
#loc91 = loc(fused[#loc31, #loc28])
#loc92 = loc(fused[#loc34, #loc33])
#loc93 = loc(fused[#loc36, #loc35])
#loc94 = loc(fused[#loc37, #loc38])
#loc95 = loc(fused[#loc39, #loc40])
#loc96 = loc(fused[#loc41, #loc42])
#loc97 = loc(fused[#loc44, #loc45])
#loc98 = loc(fused[#loc46, #loc47])
#loc99 = loc(fused[#loc48, #loc49])
#loc100 = loc(fused[#loc50, #loc51])
#loc101 = loc(fused[#loc53, #loc52])
#loc102 = loc(fused[#loc54, #loc55])
#loc103 = loc(fused[#loc57, #loc51])
#loc104 = loc(fused[#loc58, #loc59])
#loc105 = loc(fused[#loc60, #loc61])
#loc106 = loc(fused[#loc62, #loc63])
#loc107 = loc(fused[#loc65, #loc66])
#loc108 = loc(fused[#loc67, #loc68])
#loc109 = loc(fused[#loc69, #loc70])
#loc110 = loc(fused[#loc71, #loc68])
#loc111 = loc(fused[#loc74, #loc73])
#loc112 = loc(fused[#loc76, #loc75])
