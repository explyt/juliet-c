!s32i = !cir.int<s, 32>
!s8i = !cir.int<s, 8>
!u32i = !cir.int<u, 32>
#false = #cir.bool<false> : !cir.bool
#fn_attr = #cir<extra({nothrow = #cir.nothrow})>
#fn_attr1 = #cir<extra({inline = #cir.inline<no>, nothrow = #cir.nothrow, optnone = #cir.optnone, uwtable = #cir.uwtable<async>})>
#true = #cir.bool<true> : !cir.bool
module @"/workspaces/juliet-c/testcases/CWE126_Buffer_Overread/s01/CWE126_Buffer_Overread__CWE129_rand_13.c" attributes {cir.lang = #cir.lang<c>, cir.sob = #cir.signed_overflow_behavior<undefined>, cir.triple = "x86_64-unknown-linux-gnu", cir.type_size_info = #cir.type_size_info<char = 8, int = 32, size_t = 64>, cir.uwtable = #cir.uwtable<async>, dlti.dl_spec = #dlti.dl_spec<i32 = dense<32> : vector<2xi64>, !llvm.ptr<270> = dense<32> : vector<4xi64>, i16 = dense<16> : vector<2xi64>, i8 = dense<8> : vector<2xi64>, i1 = dense<8> : vector<2xi64>, !llvm.ptr = dense<64> : vector<4xi64>, f80 = dense<128> : vector<2xi64>, i128 = dense<128> : vector<2xi64>, !llvm.ptr<272> = dense<64> : vector<4xi64>, i64 = dense<64> : vector<2xi64>, !llvm.ptr<271> = dense<32> : vector<4xi64>, f128 = dense<128> : vector<2xi64>, f64 = dense<64> : vector<2xi64>, f16 = dense<16> : vector<2xi64>, "dlti.stack_alignment" = 128 : i64, "dlti.endianness" = "little", "dlti.mangling_mode" = "e">} {
  cir.global "private" constant external @GLOBAL_CONST_FIVE : !s32i {alignment = 4 : i64} loc(#loc210)
  cir.func private @rand() -> !s32i extra(#fn_attr) loc(#loc211)
  cir.func private @printIntLine(!s32i) loc(#loc212)
  cir.func private @printLine(!cir.ptr<!s8i>) loc(#loc213)
  cir.global "private" constant cir_private dsolocal @".str" = #cir.const_array<"ERROR: Array index is negative\00" : !cir.array<!s8i x 31>> : !cir.array<!s8i x 31> {alignment = 1 : i64} loc(#loc9)
  cir.func no_proto @CWE126_Buffer_Overread__CWE129_rand_13_bad() extra(#fn_attr1) {
    %0 = cir.alloca !s32i, !cir.ptr<!s32i>, ["data"] {alignment = 4 : i64} loc(#loc215)
    %1 = cir.const #cir.int<1> : !s32i loc(#loc14)
    %2 = cir.unary(minus, %1) nsw : !s32i, !s32i loc(#loc15)
    cir.store %2, %0 : !s32i, !cir.ptr<!s32i> loc(#loc216)
    cir.scope {
      %3 = cir.get_global @GLOBAL_CONST_FIVE : !cir.ptr<!s32i> loc(#loc210)
      %4 = cir.load %3 : !cir.ptr<!s32i>, !s32i loc(#loc19)
      %5 = cir.const #cir.int<5> : !s32i loc(#loc20)
      %6 = cir.cmp(eq, %4, %5) : !s32i, !cir.bool loc(#loc218)
      cir.if %6 {
        %7 = cir.call @rand() : () -> !s32i extra(#fn_attr) loc(#loc22)
        %8 = cir.const #cir.int<1> : !s32i loc(#loc22)
        %9 = cir.binop(and, %7, %8) : !s32i loc(#loc22)
        %10 = cir.cast(int_to_bool, %9 : !s32i), !cir.bool loc(#loc22)
        %11 = cir.ternary(%10, true {
          %13 = cir.call @rand() : () -> !s32i extra(#fn_attr) loc(#loc22)
          %14 = cir.cast(integral, %13 : !s32i), !u32i loc(#loc22)
          %15 = cir.const #cir.int<30> : !s32i loc(#loc22)
          %16 = cir.shift(left, %14 : !u32i, %15 : !s32i) -> !u32i loc(#loc22)
          %17 = cir.call @rand() : () -> !s32i extra(#fn_attr) loc(#loc22)
          %18 = cir.cast(integral, %17 : !s32i), !u32i loc(#loc22)
          %19 = cir.const #cir.int<15> : !s32i loc(#loc22)
          %20 = cir.shift(left, %18 : !u32i, %19 : !s32i) -> !u32i loc(#loc22)
          %21 = cir.binop(xor, %16, %20) : !u32i loc(#loc22)
          %22 = cir.call @rand() : () -> !s32i extra(#fn_attr) loc(#loc22)
          %23 = cir.cast(integral, %22 : !s32i), !u32i loc(#loc22)
          %24 = cir.binop(xor, %21, %23) : !u32i loc(#loc22)
          cir.yield %24 : !u32i loc(#loc22)
        }, false {
          %13 = cir.call @rand() : () -> !s32i extra(#fn_attr) loc(#loc22)
          %14 = cir.cast(integral, %13 : !s32i), !u32i loc(#loc22)
          %15 = cir.const #cir.int<30> : !s32i loc(#loc22)
          %16 = cir.shift(left, %14 : !u32i, %15 : !s32i) -> !u32i loc(#loc22)
          %17 = cir.call @rand() : () -> !s32i extra(#fn_attr) loc(#loc22)
          %18 = cir.cast(integral, %17 : !s32i), !u32i loc(#loc22)
          %19 = cir.const #cir.int<15> : !s32i loc(#loc22)
          %20 = cir.shift(left, %18 : !u32i, %19 : !s32i) -> !u32i loc(#loc22)
          %21 = cir.binop(xor, %16, %20) : !u32i loc(#loc22)
          %22 = cir.call @rand() : () -> !s32i extra(#fn_attr) loc(#loc22)
          %23 = cir.cast(integral, %22 : !s32i), !u32i loc(#loc22)
          %24 = cir.binop(xor, %21, %23) : !u32i loc(#loc22)
          %25 = cir.unary(minus, %24) : !u32i, !u32i loc(#loc22)
          %26 = cir.const #cir.int<1> : !s32i loc(#loc22)
          %27 = cir.cast(integral, %26 : !s32i), !u32i loc(#loc22)
          %28 = cir.binop(sub, %25, %27) : !u32i loc(#loc22)
          cir.yield %28 : !u32i loc(#loc22)
        }) : (!cir.bool) -> !u32i loc(#loc22)
        %12 = cir.cast(integral, %11 : !u32i), !s32i loc(#loc22)
        cir.store %12, %0 : !s32i, !cir.ptr<!s32i> loc(#loc220)
      } loc(#loc219)
    } loc(#loc217)
    cir.scope {
      %3 = cir.get_global @GLOBAL_CONST_FIVE : !cir.ptr<!s32i> loc(#loc210)
      %4 = cir.load %3 : !cir.ptr<!s32i>, !s32i loc(#loc26)
      %5 = cir.const #cir.int<5> : !s32i loc(#loc27)
      %6 = cir.cmp(eq, %4, %5) : !s32i, !cir.bool loc(#loc222)
      cir.if %6 {
        cir.scope {
          %7 = cir.alloca !cir.array<!s32i x 10>, !cir.ptr<!cir.array<!s32i x 10>>, ["buffer"] {alignment = 16 : i64} loc(#loc225)
          %8 = cir.const #cir.zero : !cir.array<!s32i x 10> loc(#loc225)
          cir.store %8, %7 : !cir.array<!s32i x 10>, !cir.ptr<!cir.array<!s32i x 10>> loc(#loc225)
          cir.scope {
            %9 = cir.load %0 : !cir.ptr<!s32i>, !s32i loc(#loc35)
            %10 = cir.const #cir.int<0> : !s32i loc(#loc36)
            %11 = cir.cmp(ge, %9, %10) : !s32i, !cir.bool loc(#loc227)
            cir.if %11 {
              %12 = cir.load %0 : !cir.ptr<!s32i>, !s32i loc(#loc40)
              %13 = cir.cast(array_to_ptrdecay, %7 : !cir.ptr<!cir.array<!s32i x 10>>), !cir.ptr<!s32i> loc(#loc41)
              %14 = cir.ptr_stride(%13 : !cir.ptr<!s32i>, %12 : !s32i), !cir.ptr<!s32i> loc(#loc41)
              %15 = cir.load %14 : !cir.ptr<!s32i>, !s32i loc(#loc41)
              cir.call @printIntLine(%15) : (!s32i) -> () loc(#loc42)
            } else {
              %12 = cir.get_global @".str" : !cir.ptr<!cir.array<!s8i x 31>> loc(#loc9)
              %13 = cir.cast(array_to_ptrdecay, %12 : !cir.ptr<!cir.array<!s8i x 31>>), !cir.ptr<!s8i> loc(#loc9)
              cir.call @printLine(%13) : (!cir.ptr<!s8i>) -> () loc(#loc43)
            } loc(#loc228)
          } loc(#loc226)
        } loc(#loc224)
      } loc(#loc223)
    } loc(#loc221)
    cir.return loc(#loc11)
  } loc(#loc214)
  cir.func no_proto @CWE126_Buffer_Overread__CWE129_rand_13_good() extra(#fn_attr1) {
    %0 = cir.get_global @goodB2G1 : !cir.ptr<!cir.func<()>> loc(#loc230)
    cir.call %0() : (!cir.ptr<!cir.func<()>>) -> () loc(#loc46)
    %1 = cir.get_global @goodB2G2 : !cir.ptr<!cir.func<()>> loc(#loc231)
    cir.call %1() : (!cir.ptr<!cir.func<()>>) -> () loc(#loc48)
    %2 = cir.get_global @goodG2B1 : !cir.ptr<!cir.func<()>> loc(#loc232)
    cir.call %2() : (!cir.ptr<!cir.func<()>>) -> () loc(#loc50)
    %3 = cir.get_global @goodG2B2 : !cir.ptr<!cir.func<()>> loc(#loc233)
    cir.call %3() : (!cir.ptr<!cir.func<()>>) -> () loc(#loc52)
    cir.return loc(#loc45)
  } loc(#loc229)
  cir.global "private" constant cir_private dsolocal @".str.1" = #cir.const_array<"Benign, fixed string\00" : !cir.array<!s8i x 21>> : !cir.array<!s8i x 21> {alignment = 1 : i64} loc(#loc54)
  cir.global "private" constant cir_private dsolocal @".str.2" = #cir.const_array<"ERROR: Array index is out-of-bounds\00" : !cir.array<!s8i x 36>> : !cir.array<!s8i x 36> {alignment = 1 : i64} loc(#loc55)
  cir.func no_proto internal private @goodB2G1() extra(#fn_attr1) {
    %0 = cir.alloca !s32i, !cir.ptr<!s32i>, ["data"] {alignment = 4 : i64} loc(#loc235)
    %1 = cir.const #cir.int<1> : !s32i loc(#loc60)
    %2 = cir.unary(minus, %1) nsw : !s32i, !s32i loc(#loc61)
    cir.store %2, %0 : !s32i, !cir.ptr<!s32i> loc(#loc236)
    cir.scope {
      %3 = cir.get_global @GLOBAL_CONST_FIVE : !cir.ptr<!s32i> loc(#loc210)
      %4 = cir.load %3 : !cir.ptr<!s32i>, !s32i loc(#loc65)
      %5 = cir.const #cir.int<5> : !s32i loc(#loc66)
      %6 = cir.cmp(eq, %4, %5) : !s32i, !cir.bool loc(#loc238)
      cir.if %6 {
        %7 = cir.call @rand() : () -> !s32i extra(#fn_attr) loc(#loc68)
        %8 = cir.const #cir.int<1> : !s32i loc(#loc68)
        %9 = cir.binop(and, %7, %8) : !s32i loc(#loc68)
        %10 = cir.cast(int_to_bool, %9 : !s32i), !cir.bool loc(#loc68)
        %11 = cir.ternary(%10, true {
          %13 = cir.call @rand() : () -> !s32i extra(#fn_attr) loc(#loc68)
          %14 = cir.cast(integral, %13 : !s32i), !u32i loc(#loc68)
          %15 = cir.const #cir.int<30> : !s32i loc(#loc68)
          %16 = cir.shift(left, %14 : !u32i, %15 : !s32i) -> !u32i loc(#loc68)
          %17 = cir.call @rand() : () -> !s32i extra(#fn_attr) loc(#loc68)
          %18 = cir.cast(integral, %17 : !s32i), !u32i loc(#loc68)
          %19 = cir.const #cir.int<15> : !s32i loc(#loc68)
          %20 = cir.shift(left, %18 : !u32i, %19 : !s32i) -> !u32i loc(#loc68)
          %21 = cir.binop(xor, %16, %20) : !u32i loc(#loc68)
          %22 = cir.call @rand() : () -> !s32i extra(#fn_attr) loc(#loc68)
          %23 = cir.cast(integral, %22 : !s32i), !u32i loc(#loc68)
          %24 = cir.binop(xor, %21, %23) : !u32i loc(#loc68)
          cir.yield %24 : !u32i loc(#loc68)
        }, false {
          %13 = cir.call @rand() : () -> !s32i extra(#fn_attr) loc(#loc68)
          %14 = cir.cast(integral, %13 : !s32i), !u32i loc(#loc68)
          %15 = cir.const #cir.int<30> : !s32i loc(#loc68)
          %16 = cir.shift(left, %14 : !u32i, %15 : !s32i) -> !u32i loc(#loc68)
          %17 = cir.call @rand() : () -> !s32i extra(#fn_attr) loc(#loc68)
          %18 = cir.cast(integral, %17 : !s32i), !u32i loc(#loc68)
          %19 = cir.const #cir.int<15> : !s32i loc(#loc68)
          %20 = cir.shift(left, %18 : !u32i, %19 : !s32i) -> !u32i loc(#loc68)
          %21 = cir.binop(xor, %16, %20) : !u32i loc(#loc68)
          %22 = cir.call @rand() : () -> !s32i extra(#fn_attr) loc(#loc68)
          %23 = cir.cast(integral, %22 : !s32i), !u32i loc(#loc68)
          %24 = cir.binop(xor, %21, %23) : !u32i loc(#loc68)
          %25 = cir.unary(minus, %24) : !u32i, !u32i loc(#loc68)
          %26 = cir.const #cir.int<1> : !s32i loc(#loc68)
          %27 = cir.cast(integral, %26 : !s32i), !u32i loc(#loc68)
          %28 = cir.binop(sub, %25, %27) : !u32i loc(#loc68)
          cir.yield %28 : !u32i loc(#loc68)
        }) : (!cir.bool) -> !u32i loc(#loc68)
        %12 = cir.cast(integral, %11 : !u32i), !s32i loc(#loc68)
        cir.store %12, %0 : !s32i, !cir.ptr<!s32i> loc(#loc240)
      } loc(#loc239)
    } loc(#loc237)
    cir.scope {
      %3 = cir.get_global @GLOBAL_CONST_FIVE : !cir.ptr<!s32i> loc(#loc210)
      %4 = cir.load %3 : !cir.ptr<!s32i>, !s32i loc(#loc72)
      %5 = cir.const #cir.int<5> : !s32i loc(#loc73)
      %6 = cir.cmp(ne, %4, %5) : !s32i, !cir.bool loc(#loc242)
      cir.if %6 {
        %7 = cir.get_global @".str.1" : !cir.ptr<!cir.array<!s8i x 21>> loc(#loc54)
        %8 = cir.cast(array_to_ptrdecay, %7 : !cir.ptr<!cir.array<!s8i x 21>>), !cir.ptr<!s8i> loc(#loc54)
        cir.call @printLine(%8) : (!cir.ptr<!s8i>) -> () loc(#loc77)
      } else {
        cir.scope {
          %7 = cir.alloca !cir.array<!s32i x 10>, !cir.ptr<!cir.array<!s32i x 10>>, ["buffer"] {alignment = 16 : i64} loc(#loc245)
          %8 = cir.const #cir.zero : !cir.array<!s32i x 10> loc(#loc245)
          cir.store %8, %7 : !cir.array<!s32i x 10>, !cir.ptr<!cir.array<!s32i x 10>> loc(#loc245)
          cir.scope {
            %9 = cir.load %0 : !cir.ptr<!s32i>, !s32i loc(#loc84)
            %10 = cir.const #cir.int<0> : !s32i loc(#loc85)
            %11 = cir.cmp(ge, %9, %10) : !s32i, !cir.bool loc(#loc247)
            %12 = cir.ternary(%11, true {
              %13 = cir.load %0 : !cir.ptr<!s32i>, !s32i loc(#loc87)
              %14 = cir.const #cir.int<10> : !s32i loc(#loc88)
              %15 = cir.cmp(lt, %13, %14) : !s32i, !cir.bool loc(#loc248)
              %16 = cir.ternary(%15, true {
                %17 = cir.const #true loc(#loc86)
                cir.yield %17 : !cir.bool loc(#loc86)
              }, false {
                %17 = cir.const #false loc(#loc86)
                cir.yield %17 : !cir.bool loc(#loc86)
              }) : (!cir.bool) -> !cir.bool loc(#loc86)
              cir.yield %16 : !cir.bool loc(#loc86)
            }, false {
              %13 = cir.const #false loc(#loc86)
              cir.yield %13 : !cir.bool loc(#loc86)
            }) : (!cir.bool) -> !cir.bool loc(#loc86)
            cir.if %12 {
              %13 = cir.load %0 : !cir.ptr<!s32i>, !s32i loc(#loc93)
              %14 = cir.cast(array_to_ptrdecay, %7 : !cir.ptr<!cir.array<!s32i x 10>>), !cir.ptr<!s32i> loc(#loc94)
              %15 = cir.ptr_stride(%14 : !cir.ptr<!s32i>, %13 : !s32i), !cir.ptr<!s32i> loc(#loc94)
              %16 = cir.load %15 : !cir.ptr<!s32i>, !s32i loc(#loc94)
              cir.call @printIntLine(%16) : (!s32i) -> () loc(#loc95)
            } else {
              %13 = cir.get_global @".str.2" : !cir.ptr<!cir.array<!s8i x 36>> loc(#loc55)
              %14 = cir.cast(array_to_ptrdecay, %13 : !cir.ptr<!cir.array<!s8i x 36>>), !cir.ptr<!s8i> loc(#loc55)
              cir.call @printLine(%14) : (!cir.ptr<!s8i>) -> () loc(#loc96)
            } loc(#loc249)
          } loc(#loc246)
        } loc(#loc244)
      } loc(#loc243)
    } loc(#loc241)
    cir.return loc(#loc57)
  } loc(#loc234)
  cir.func no_proto internal private @goodB2G2() extra(#fn_attr1) {
    %0 = cir.alloca !s32i, !cir.ptr<!s32i>, ["data"] {alignment = 4 : i64} loc(#loc251)
    %1 = cir.const #cir.int<1> : !s32i loc(#loc101)
    %2 = cir.unary(minus, %1) nsw : !s32i, !s32i loc(#loc102)
    cir.store %2, %0 : !s32i, !cir.ptr<!s32i> loc(#loc252)
    cir.scope {
      %3 = cir.get_global @GLOBAL_CONST_FIVE : !cir.ptr<!s32i> loc(#loc210)
      %4 = cir.load %3 : !cir.ptr<!s32i>, !s32i loc(#loc106)
      %5 = cir.const #cir.int<5> : !s32i loc(#loc107)
      %6 = cir.cmp(eq, %4, %5) : !s32i, !cir.bool loc(#loc254)
      cir.if %6 {
        %7 = cir.call @rand() : () -> !s32i extra(#fn_attr) loc(#loc109)
        %8 = cir.const #cir.int<1> : !s32i loc(#loc109)
        %9 = cir.binop(and, %7, %8) : !s32i loc(#loc109)
        %10 = cir.cast(int_to_bool, %9 : !s32i), !cir.bool loc(#loc109)
        %11 = cir.ternary(%10, true {
          %13 = cir.call @rand() : () -> !s32i extra(#fn_attr) loc(#loc109)
          %14 = cir.cast(integral, %13 : !s32i), !u32i loc(#loc109)
          %15 = cir.const #cir.int<30> : !s32i loc(#loc109)
          %16 = cir.shift(left, %14 : !u32i, %15 : !s32i) -> !u32i loc(#loc109)
          %17 = cir.call @rand() : () -> !s32i extra(#fn_attr) loc(#loc109)
          %18 = cir.cast(integral, %17 : !s32i), !u32i loc(#loc109)
          %19 = cir.const #cir.int<15> : !s32i loc(#loc109)
          %20 = cir.shift(left, %18 : !u32i, %19 : !s32i) -> !u32i loc(#loc109)
          %21 = cir.binop(xor, %16, %20) : !u32i loc(#loc109)
          %22 = cir.call @rand() : () -> !s32i extra(#fn_attr) loc(#loc109)
          %23 = cir.cast(integral, %22 : !s32i), !u32i loc(#loc109)
          %24 = cir.binop(xor, %21, %23) : !u32i loc(#loc109)
          cir.yield %24 : !u32i loc(#loc109)
        }, false {
          %13 = cir.call @rand() : () -> !s32i extra(#fn_attr) loc(#loc109)
          %14 = cir.cast(integral, %13 : !s32i), !u32i loc(#loc109)
          %15 = cir.const #cir.int<30> : !s32i loc(#loc109)
          %16 = cir.shift(left, %14 : !u32i, %15 : !s32i) -> !u32i loc(#loc109)
          %17 = cir.call @rand() : () -> !s32i extra(#fn_attr) loc(#loc109)
          %18 = cir.cast(integral, %17 : !s32i), !u32i loc(#loc109)
          %19 = cir.const #cir.int<15> : !s32i loc(#loc109)
          %20 = cir.shift(left, %18 : !u32i, %19 : !s32i) -> !u32i loc(#loc109)
          %21 = cir.binop(xor, %16, %20) : !u32i loc(#loc109)
          %22 = cir.call @rand() : () -> !s32i extra(#fn_attr) loc(#loc109)
          %23 = cir.cast(integral, %22 : !s32i), !u32i loc(#loc109)
          %24 = cir.binop(xor, %21, %23) : !u32i loc(#loc109)
          %25 = cir.unary(minus, %24) : !u32i, !u32i loc(#loc109)
          %26 = cir.const #cir.int<1> : !s32i loc(#loc109)
          %27 = cir.cast(integral, %26 : !s32i), !u32i loc(#loc109)
          %28 = cir.binop(sub, %25, %27) : !u32i loc(#loc109)
          cir.yield %28 : !u32i loc(#loc109)
        }) : (!cir.bool) -> !u32i loc(#loc109)
        %12 = cir.cast(integral, %11 : !u32i), !s32i loc(#loc109)
        cir.store %12, %0 : !s32i, !cir.ptr<!s32i> loc(#loc256)
      } loc(#loc255)
    } loc(#loc253)
    cir.scope {
      %3 = cir.get_global @GLOBAL_CONST_FIVE : !cir.ptr<!s32i> loc(#loc210)
      %4 = cir.load %3 : !cir.ptr<!s32i>, !s32i loc(#loc113)
      %5 = cir.const #cir.int<5> : !s32i loc(#loc114)
      %6 = cir.cmp(eq, %4, %5) : !s32i, !cir.bool loc(#loc258)
      cir.if %6 {
        cir.scope {
          %7 = cir.alloca !cir.array<!s32i x 10>, !cir.ptr<!cir.array<!s32i x 10>>, ["buffer"] {alignment = 16 : i64} loc(#loc261)
          %8 = cir.const #cir.zero : !cir.array<!s32i x 10> loc(#loc261)
          cir.store %8, %7 : !cir.array<!s32i x 10>, !cir.ptr<!cir.array<!s32i x 10>> loc(#loc261)
          cir.scope {
            %9 = cir.load %0 : !cir.ptr<!s32i>, !s32i loc(#loc122)
            %10 = cir.const #cir.int<0> : !s32i loc(#loc123)
            %11 = cir.cmp(ge, %9, %10) : !s32i, !cir.bool loc(#loc263)
            %12 = cir.ternary(%11, true {
              %13 = cir.load %0 : !cir.ptr<!s32i>, !s32i loc(#loc125)
              %14 = cir.const #cir.int<10> : !s32i loc(#loc126)
              %15 = cir.cmp(lt, %13, %14) : !s32i, !cir.bool loc(#loc264)
              %16 = cir.ternary(%15, true {
                %17 = cir.const #true loc(#loc124)
                cir.yield %17 : !cir.bool loc(#loc124)
              }, false {
                %17 = cir.const #false loc(#loc124)
                cir.yield %17 : !cir.bool loc(#loc124)
              }) : (!cir.bool) -> !cir.bool loc(#loc124)
              cir.yield %16 : !cir.bool loc(#loc124)
            }, false {
              %13 = cir.const #false loc(#loc124)
              cir.yield %13 : !cir.bool loc(#loc124)
            }) : (!cir.bool) -> !cir.bool loc(#loc124)
            cir.if %12 {
              %13 = cir.load %0 : !cir.ptr<!s32i>, !s32i loc(#loc131)
              %14 = cir.cast(array_to_ptrdecay, %7 : !cir.ptr<!cir.array<!s32i x 10>>), !cir.ptr<!s32i> loc(#loc132)
              %15 = cir.ptr_stride(%14 : !cir.ptr<!s32i>, %13 : !s32i), !cir.ptr<!s32i> loc(#loc132)
              %16 = cir.load %15 : !cir.ptr<!s32i>, !s32i loc(#loc132)
              cir.call @printIntLine(%16) : (!s32i) -> () loc(#loc133)
            } else {
              %13 = cir.get_global @".str.2" : !cir.ptr<!cir.array<!s8i x 36>> loc(#loc134)
              %14 = cir.cast(array_to_ptrdecay, %13 : !cir.ptr<!cir.array<!s8i x 36>>), !cir.ptr<!s8i> loc(#loc134)
              cir.call @printLine(%14) : (!cir.ptr<!s8i>) -> () loc(#loc135)
            } loc(#loc265)
          } loc(#loc262)
        } loc(#loc260)
      } loc(#loc259)
    } loc(#loc257)
    cir.return loc(#loc98)
  } loc(#loc250)
  cir.func no_proto internal private @goodG2B1() extra(#fn_attr1) {
    %0 = cir.alloca !s32i, !cir.ptr<!s32i>, ["data"] {alignment = 4 : i64} loc(#loc267)
    %1 = cir.const #cir.int<1> : !s32i loc(#loc140)
    %2 = cir.unary(minus, %1) nsw : !s32i, !s32i loc(#loc141)
    cir.store %2, %0 : !s32i, !cir.ptr<!s32i> loc(#loc268)
    cir.scope {
      %3 = cir.get_global @GLOBAL_CONST_FIVE : !cir.ptr<!s32i> loc(#loc210)
      %4 = cir.load %3 : !cir.ptr<!s32i>, !s32i loc(#loc145)
      %5 = cir.const #cir.int<5> : !s32i loc(#loc146)
      %6 = cir.cmp(ne, %4, %5) : !s32i, !cir.bool loc(#loc270)
      cir.if %6 {
        %7 = cir.get_global @".str.1" : !cir.ptr<!cir.array<!s8i x 21>> loc(#loc150)
        %8 = cir.cast(array_to_ptrdecay, %7 : !cir.ptr<!cir.array<!s8i x 21>>), !cir.ptr<!s8i> loc(#loc150)
        cir.call @printLine(%8) : (!cir.ptr<!s8i>) -> () loc(#loc151)
      } else {
        %7 = cir.const #cir.int<7> : !s32i loc(#loc152)
        cir.store %7, %0 : !s32i, !cir.ptr<!s32i> loc(#loc272)
      } loc(#loc271)
    } loc(#loc269)
    cir.scope {
      %3 = cir.get_global @GLOBAL_CONST_FIVE : !cir.ptr<!s32i> loc(#loc210)
      %4 = cir.load %3 : !cir.ptr<!s32i>, !s32i loc(#loc156)
      %5 = cir.const #cir.int<5> : !s32i loc(#loc157)
      %6 = cir.cmp(eq, %4, %5) : !s32i, !cir.bool loc(#loc274)
      cir.if %6 {
        cir.scope {
          %7 = cir.alloca !cir.array<!s32i x 10>, !cir.ptr<!cir.array<!s32i x 10>>, ["buffer"] {alignment = 16 : i64} loc(#loc277)
          %8 = cir.const #cir.zero : !cir.array<!s32i x 10> loc(#loc277)
          cir.store %8, %7 : !cir.array<!s32i x 10>, !cir.ptr<!cir.array<!s32i x 10>> loc(#loc277)
          cir.scope {
            %9 = cir.load %0 : !cir.ptr<!s32i>, !s32i loc(#loc165)
            %10 = cir.const #cir.int<0> : !s32i loc(#loc166)
            %11 = cir.cmp(ge, %9, %10) : !s32i, !cir.bool loc(#loc279)
            cir.if %11 {
              %12 = cir.load %0 : !cir.ptr<!s32i>, !s32i loc(#loc170)
              %13 = cir.cast(array_to_ptrdecay, %7 : !cir.ptr<!cir.array<!s32i x 10>>), !cir.ptr<!s32i> loc(#loc171)
              %14 = cir.ptr_stride(%13 : !cir.ptr<!s32i>, %12 : !s32i), !cir.ptr<!s32i> loc(#loc171)
              %15 = cir.load %14 : !cir.ptr<!s32i>, !s32i loc(#loc171)
              cir.call @printIntLine(%15) : (!s32i) -> () loc(#loc172)
            } else {
              %12 = cir.get_global @".str" : !cir.ptr<!cir.array<!s8i x 31>> loc(#loc173)
              %13 = cir.cast(array_to_ptrdecay, %12 : !cir.ptr<!cir.array<!s8i x 31>>), !cir.ptr<!s8i> loc(#loc173)
              cir.call @printLine(%13) : (!cir.ptr<!s8i>) -> () loc(#loc174)
            } loc(#loc280)
          } loc(#loc278)
        } loc(#loc276)
      } loc(#loc275)
    } loc(#loc273)
    cir.return loc(#loc137)
  } loc(#loc266)
  cir.func no_proto internal private @goodG2B2() extra(#fn_attr1) {
    %0 = cir.alloca !s32i, !cir.ptr<!s32i>, ["data"] {alignment = 4 : i64} loc(#loc282)
    %1 = cir.const #cir.int<1> : !s32i loc(#loc179)
    %2 = cir.unary(minus, %1) nsw : !s32i, !s32i loc(#loc180)
    cir.store %2, %0 : !s32i, !cir.ptr<!s32i> loc(#loc283)
    cir.scope {
      %3 = cir.get_global @GLOBAL_CONST_FIVE : !cir.ptr<!s32i> loc(#loc210)
      %4 = cir.load %3 : !cir.ptr<!s32i>, !s32i loc(#loc184)
      %5 = cir.const #cir.int<5> : !s32i loc(#loc185)
      %6 = cir.cmp(eq, %4, %5) : !s32i, !cir.bool loc(#loc285)
      cir.if %6 {
        %7 = cir.const #cir.int<7> : !s32i loc(#loc187)
        cir.store %7, %0 : !s32i, !cir.ptr<!s32i> loc(#loc287)
      } loc(#loc286)
    } loc(#loc284)
    cir.scope {
      %3 = cir.get_global @GLOBAL_CONST_FIVE : !cir.ptr<!s32i> loc(#loc210)
      %4 = cir.load %3 : !cir.ptr<!s32i>, !s32i loc(#loc191)
      %5 = cir.const #cir.int<5> : !s32i loc(#loc192)
      %6 = cir.cmp(eq, %4, %5) : !s32i, !cir.bool loc(#loc289)
      cir.if %6 {
        cir.scope {
          %7 = cir.alloca !cir.array<!s32i x 10>, !cir.ptr<!cir.array<!s32i x 10>>, ["buffer"] {alignment = 16 : i64} loc(#loc292)
          %8 = cir.const #cir.zero : !cir.array<!s32i x 10> loc(#loc292)
          cir.store %8, %7 : !cir.array<!s32i x 10>, !cir.ptr<!cir.array<!s32i x 10>> loc(#loc292)
          cir.scope {
            %9 = cir.load %0 : !cir.ptr<!s32i>, !s32i loc(#loc200)
            %10 = cir.const #cir.int<0> : !s32i loc(#loc201)
            %11 = cir.cmp(ge, %9, %10) : !s32i, !cir.bool loc(#loc294)
            cir.if %11 {
              %12 = cir.load %0 : !cir.ptr<!s32i>, !s32i loc(#loc205)
              %13 = cir.cast(array_to_ptrdecay, %7 : !cir.ptr<!cir.array<!s32i x 10>>), !cir.ptr<!s32i> loc(#loc206)
              %14 = cir.ptr_stride(%13 : !cir.ptr<!s32i>, %12 : !s32i), !cir.ptr<!s32i> loc(#loc206)
              %15 = cir.load %14 : !cir.ptr<!s32i>, !s32i loc(#loc206)
              cir.call @printIntLine(%15) : (!s32i) -> () loc(#loc207)
            } else {
              %12 = cir.get_global @".str" : !cir.ptr<!cir.array<!s8i x 31>> loc(#loc208)
              %13 = cir.cast(array_to_ptrdecay, %12 : !cir.ptr<!cir.array<!s8i x 31>>), !cir.ptr<!s8i> loc(#loc208)
              cir.call @printLine(%13) : (!cir.ptr<!s8i>) -> () loc(#loc209)
            } loc(#loc295)
          } loc(#loc293)
        } loc(#loc291)
      } loc(#loc290)
    } loc(#loc288)
    cir.return loc(#loc176)
  } loc(#loc281)
} loc(#loc)
#loc = loc("/workspaces/juliet-c/testcases/CWE126_Buffer_Overread/s01/CWE126_Buffer_Overread__CWE129_rand_13.c":0:0)
#loc1 = loc("../../../testcasesupport/std_testcase.h":111:1)
#loc2 = loc("../../../testcasesupport/std_testcase.h":111:18)
#loc3 = loc("/usr/include/stdlib.h":573:1)
#loc4 = loc("/usr/include/stdlib.h":573:24)
#loc5 = loc("../../../testcasesupport/std_testcase_io.h":18:1)
#loc6 = loc("../../../testcasesupport/std_testcase_io.h":18:33)
#loc7 = loc("../../../testcasesupport/std_testcase_io.h":14:1)
#loc8 = loc("../../../testcasesupport/std_testcase_io.h":14:33)
#loc9 = loc("CWE126_Buffer_Overread__CWE129_rand_13.c":44:27)
#loc10 = loc("CWE126_Buffer_Overread__CWE129_rand_13.c":22:1)
#loc11 = loc("CWE126_Buffer_Overread__CWE129_rand_13.c":48:1)
#loc12 = loc("CWE126_Buffer_Overread__CWE129_rand_13.c":24:5)
#loc13 = loc("CWE126_Buffer_Overread__CWE129_rand_13.c":24:9)
#loc14 = loc("CWE126_Buffer_Overread__CWE129_rand_13.c":26:13)
#loc15 = loc("CWE126_Buffer_Overread__CWE129_rand_13.c":26:12)
#loc16 = loc("CWE126_Buffer_Overread__CWE129_rand_13.c":26:5)
#loc17 = loc("CWE126_Buffer_Overread__CWE129_rand_13.c":27:5)
#loc18 = loc("CWE126_Buffer_Overread__CWE129_rand_13.c":31:5)
#loc19 = loc("CWE126_Buffer_Overread__CWE129_rand_13.c":27:8)
#loc20 = loc("CWE126_Buffer_Overread__CWE129_rand_13.c":27:27)
#loc21 = loc("CWE126_Buffer_Overread__CWE129_rand_13.c":28:5)
#loc22 = loc("CWE126_Buffer_Overread__CWE129_rand_13.c":30:16)
#loc23 = loc("CWE126_Buffer_Overread__CWE129_rand_13.c":30:9)
#loc24 = loc("CWE126_Buffer_Overread__CWE129_rand_13.c":32:5)
#loc25 = loc("CWE126_Buffer_Overread__CWE129_rand_13.c":47:5)
#loc26 = loc("CWE126_Buffer_Overread__CWE129_rand_13.c":32:8)
#loc27 = loc("CWE126_Buffer_Overread__CWE129_rand_13.c":32:27)
#loc28 = loc("CWE126_Buffer_Overread__CWE129_rand_13.c":33:5)
#loc29 = loc("CWE126_Buffer_Overread__CWE129_rand_13.c":34:9)
#loc30 = loc("CWE126_Buffer_Overread__CWE129_rand_13.c":46:9)
#loc31 = loc("CWE126_Buffer_Overread__CWE129_rand_13.c":35:13)
#loc32 = loc("CWE126_Buffer_Overread__CWE129_rand_13.c":35:34)
#loc33 = loc("CWE126_Buffer_Overread__CWE129_rand_13.c":38:13)
#loc34 = loc("CWE126_Buffer_Overread__CWE129_rand_13.c":45:13)
#loc35 = loc("CWE126_Buffer_Overread__CWE129_rand_13.c":38:17)
#loc36 = loc("CWE126_Buffer_Overread__CWE129_rand_13.c":38:25)
#loc37 = loc("CWE126_Buffer_Overread__CWE129_rand_13.c":39:13)
#loc38 = loc("CWE126_Buffer_Overread__CWE129_rand_13.c":41:13)
#loc39 = loc("CWE126_Buffer_Overread__CWE129_rand_13.c":43:13)
#loc40 = loc("CWE126_Buffer_Overread__CWE129_rand_13.c":40:37)
#loc41 = loc("CWE126_Buffer_Overread__CWE129_rand_13.c":40:30)
#loc42 = loc("CWE126_Buffer_Overread__CWE129_rand_13.c":40:17)
#loc43 = loc("CWE126_Buffer_Overread__CWE129_rand_13.c":44:17)
#loc44 = loc("CWE126_Buffer_Overread__CWE129_rand_13.c":180:1)
#loc45 = loc("CWE126_Buffer_Overread__CWE129_rand_13.c":186:1)
#loc46 = loc("CWE126_Buffer_Overread__CWE129_rand_13.c":182:5)
#loc47 = loc("CWE126_Buffer_Overread__CWE129_rand_13.c":182:14)
#loc48 = loc("CWE126_Buffer_Overread__CWE129_rand_13.c":183:5)
#loc49 = loc("CWE126_Buffer_Overread__CWE129_rand_13.c":183:14)
#loc50 = loc("CWE126_Buffer_Overread__CWE129_rand_13.c":184:5)
#loc51 = loc("CWE126_Buffer_Overread__CWE129_rand_13.c":184:14)
#loc52 = loc("CWE126_Buffer_Overread__CWE129_rand_13.c":185:5)
#loc53 = loc("CWE126_Buffer_Overread__CWE129_rand_13.c":185:14)
#loc54 = loc("CWE126_Buffer_Overread__CWE129_rand_13.c":68:19)
#loc55 = loc("CWE126_Buffer_Overread__CWE129_rand_13.c":81:27)
#loc56 = loc("CWE126_Buffer_Overread__CWE129_rand_13.c":55:1)
#loc57 = loc("CWE126_Buffer_Overread__CWE129_rand_13.c":85:1)
#loc58 = loc("CWE126_Buffer_Overread__CWE129_rand_13.c":57:5)
#loc59 = loc("CWE126_Buffer_Overread__CWE129_rand_13.c":57:9)
#loc60 = loc("CWE126_Buffer_Overread__CWE129_rand_13.c":59:13)
#loc61 = loc("CWE126_Buffer_Overread__CWE129_rand_13.c":59:12)
#loc62 = loc("CWE126_Buffer_Overread__CWE129_rand_13.c":59:5)
#loc63 = loc("CWE126_Buffer_Overread__CWE129_rand_13.c":60:5)
#loc64 = loc("CWE126_Buffer_Overread__CWE129_rand_13.c":64:5)
#loc65 = loc("CWE126_Buffer_Overread__CWE129_rand_13.c":60:8)
#loc66 = loc("CWE126_Buffer_Overread__CWE129_rand_13.c":60:27)
#loc67 = loc("CWE126_Buffer_Overread__CWE129_rand_13.c":61:5)
#loc68 = loc("CWE126_Buffer_Overread__CWE129_rand_13.c":63:16)
#loc69 = loc("CWE126_Buffer_Overread__CWE129_rand_13.c":63:9)
#loc70 = loc("CWE126_Buffer_Overread__CWE129_rand_13.c":65:5)
#loc71 = loc("CWE126_Buffer_Overread__CWE129_rand_13.c":84:5)
#loc72 = loc("CWE126_Buffer_Overread__CWE129_rand_13.c":65:8)
#loc73 = loc("CWE126_Buffer_Overread__CWE129_rand_13.c":65:27)
#loc74 = loc("CWE126_Buffer_Overread__CWE129_rand_13.c":66:5)
#loc75 = loc("CWE126_Buffer_Overread__CWE129_rand_13.c":69:5)
#loc76 = loc("CWE126_Buffer_Overread__CWE129_rand_13.c":71:5)
#loc77 = loc("CWE126_Buffer_Overread__CWE129_rand_13.c":68:9)
#loc78 = loc("CWE126_Buffer_Overread__CWE129_rand_13.c":72:9)
#loc79 = loc("CWE126_Buffer_Overread__CWE129_rand_13.c":83:9)
#loc80 = loc("CWE126_Buffer_Overread__CWE129_rand_13.c":73:13)
#loc81 = loc("CWE126_Buffer_Overread__CWE129_rand_13.c":73:34)
#loc82 = loc("CWE126_Buffer_Overread__CWE129_rand_13.c":75:13)
#loc83 = loc("CWE126_Buffer_Overread__CWE129_rand_13.c":82:13)
#loc84 = loc("CWE126_Buffer_Overread__CWE129_rand_13.c":75:17)
#loc85 = loc("CWE126_Buffer_Overread__CWE129_rand_13.c":75:25)
#loc86 = loc("CWE126_Buffer_Overread__CWE129_rand_13.c":75:27)
#loc87 = loc("CWE126_Buffer_Overread__CWE129_rand_13.c":75:30)
#loc88 = loc("CWE126_Buffer_Overread__CWE129_rand_13.c":75:38)
#loc89 = loc("CWE126_Buffer_Overread__CWE129_rand_13.c":75:40)
#loc90 = loc("CWE126_Buffer_Overread__CWE129_rand_13.c":76:13)
#loc91 = loc("CWE126_Buffer_Overread__CWE129_rand_13.c":78:13)
#loc92 = loc("CWE126_Buffer_Overread__CWE129_rand_13.c":80:13)
#loc93 = loc("CWE126_Buffer_Overread__CWE129_rand_13.c":77:37)
#loc94 = loc("CWE126_Buffer_Overread__CWE129_rand_13.c":77:30)
#loc95 = loc("CWE126_Buffer_Overread__CWE129_rand_13.c":77:17)
#loc96 = loc("CWE126_Buffer_Overread__CWE129_rand_13.c":81:17)
#loc97 = loc("CWE126_Buffer_Overread__CWE129_rand_13.c":88:1)
#loc98 = loc("CWE126_Buffer_Overread__CWE129_rand_13.c":113:1)
#loc99 = loc("CWE126_Buffer_Overread__CWE129_rand_13.c":90:5)
#loc100 = loc("CWE126_Buffer_Overread__CWE129_rand_13.c":90:9)
#loc101 = loc("CWE126_Buffer_Overread__CWE129_rand_13.c":92:13)
#loc102 = loc("CWE126_Buffer_Overread__CWE129_rand_13.c":92:12)
#loc103 = loc("CWE126_Buffer_Overread__CWE129_rand_13.c":92:5)
#loc104 = loc("CWE126_Buffer_Overread__CWE129_rand_13.c":93:5)
#loc105 = loc("CWE126_Buffer_Overread__CWE129_rand_13.c":97:5)
#loc106 = loc("CWE126_Buffer_Overread__CWE129_rand_13.c":93:8)
#loc107 = loc("CWE126_Buffer_Overread__CWE129_rand_13.c":93:27)
#loc108 = loc("CWE126_Buffer_Overread__CWE129_rand_13.c":94:5)
#loc109 = loc("CWE126_Buffer_Overread__CWE129_rand_13.c":96:16)
#loc110 = loc("CWE126_Buffer_Overread__CWE129_rand_13.c":96:9)
#loc111 = loc("CWE126_Buffer_Overread__CWE129_rand_13.c":98:5)
#loc112 = loc("CWE126_Buffer_Overread__CWE129_rand_13.c":112:5)
#loc113 = loc("CWE126_Buffer_Overread__CWE129_rand_13.c":98:8)
#loc114 = loc("CWE126_Buffer_Overread__CWE129_rand_13.c":98:27)
#loc115 = loc("CWE126_Buffer_Overread__CWE129_rand_13.c":99:5)
#loc116 = loc("CWE126_Buffer_Overread__CWE129_rand_13.c":100:9)
#loc117 = loc("CWE126_Buffer_Overread__CWE129_rand_13.c":111:9)
#loc118 = loc("CWE126_Buffer_Overread__CWE129_rand_13.c":101:13)
#loc119 = loc("CWE126_Buffer_Overread__CWE129_rand_13.c":101:34)
#loc120 = loc("CWE126_Buffer_Overread__CWE129_rand_13.c":103:13)
#loc121 = loc("CWE126_Buffer_Overread__CWE129_rand_13.c":110:13)
#loc122 = loc("CWE126_Buffer_Overread__CWE129_rand_13.c":103:17)
#loc123 = loc("CWE126_Buffer_Overread__CWE129_rand_13.c":103:25)
#loc124 = loc("CWE126_Buffer_Overread__CWE129_rand_13.c":103:27)
#loc125 = loc("CWE126_Buffer_Overread__CWE129_rand_13.c":103:30)
#loc126 = loc("CWE126_Buffer_Overread__CWE129_rand_13.c":103:38)
#loc127 = loc("CWE126_Buffer_Overread__CWE129_rand_13.c":103:40)
#loc128 = loc("CWE126_Buffer_Overread__CWE129_rand_13.c":104:13)
#loc129 = loc("CWE126_Buffer_Overread__CWE129_rand_13.c":106:13)
#loc130 = loc("CWE126_Buffer_Overread__CWE129_rand_13.c":108:13)
#loc131 = loc("CWE126_Buffer_Overread__CWE129_rand_13.c":105:37)
#loc132 = loc("CWE126_Buffer_Overread__CWE129_rand_13.c":105:30)
#loc133 = loc("CWE126_Buffer_Overread__CWE129_rand_13.c":105:17)
#loc134 = loc("CWE126_Buffer_Overread__CWE129_rand_13.c":109:27)
#loc135 = loc("CWE126_Buffer_Overread__CWE129_rand_13.c":109:17)
#loc136 = loc("CWE126_Buffer_Overread__CWE129_rand_13.c":116:1)
#loc137 = loc("CWE126_Buffer_Overread__CWE129_rand_13.c":148:1)
#loc138 = loc("CWE126_Buffer_Overread__CWE129_rand_13.c":118:5)
#loc139 = loc("CWE126_Buffer_Overread__CWE129_rand_13.c":118:9)
#loc140 = loc("CWE126_Buffer_Overread__CWE129_rand_13.c":120:13)
#loc141 = loc("CWE126_Buffer_Overread__CWE129_rand_13.c":120:12)
#loc142 = loc("CWE126_Buffer_Overread__CWE129_rand_13.c":120:5)
#loc143 = loc("CWE126_Buffer_Overread__CWE129_rand_13.c":121:5)
#loc144 = loc("CWE126_Buffer_Overread__CWE129_rand_13.c":131:5)
#loc145 = loc("CWE126_Buffer_Overread__CWE129_rand_13.c":121:8)
#loc146 = loc("CWE126_Buffer_Overread__CWE129_rand_13.c":121:27)
#loc147 = loc("CWE126_Buffer_Overread__CWE129_rand_13.c":122:5)
#loc148 = loc("CWE126_Buffer_Overread__CWE129_rand_13.c":125:5)
#loc149 = loc("CWE126_Buffer_Overread__CWE129_rand_13.c":127:5)
#loc150 = loc("CWE126_Buffer_Overread__CWE129_rand_13.c":124:19)
#loc151 = loc("CWE126_Buffer_Overread__CWE129_rand_13.c":124:9)
#loc152 = loc("CWE126_Buffer_Overread__CWE129_rand_13.c":130:16)
#loc153 = loc("CWE126_Buffer_Overread__CWE129_rand_13.c":130:9)
#loc154 = loc("CWE126_Buffer_Overread__CWE129_rand_13.c":132:5)
#loc155 = loc("CWE126_Buffer_Overread__CWE129_rand_13.c":147:5)
#loc156 = loc("CWE126_Buffer_Overread__CWE129_rand_13.c":132:8)
#loc157 = loc("CWE126_Buffer_Overread__CWE129_rand_13.c":132:27)
#loc158 = loc("CWE126_Buffer_Overread__CWE129_rand_13.c":133:5)
#loc159 = loc("CWE126_Buffer_Overread__CWE129_rand_13.c":134:9)
#loc160 = loc("CWE126_Buffer_Overread__CWE129_rand_13.c":146:9)
#loc161 = loc("CWE126_Buffer_Overread__CWE129_rand_13.c":135:13)
#loc162 = loc("CWE126_Buffer_Overread__CWE129_rand_13.c":135:34)
#loc163 = loc("CWE126_Buffer_Overread__CWE129_rand_13.c":138:13)
#loc164 = loc("CWE126_Buffer_Overread__CWE129_rand_13.c":145:13)
#loc165 = loc("CWE126_Buffer_Overread__CWE129_rand_13.c":138:17)
#loc166 = loc("CWE126_Buffer_Overread__CWE129_rand_13.c":138:25)
#loc167 = loc("CWE126_Buffer_Overread__CWE129_rand_13.c":139:13)
#loc168 = loc("CWE126_Buffer_Overread__CWE129_rand_13.c":141:13)
#loc169 = loc("CWE126_Buffer_Overread__CWE129_rand_13.c":143:13)
#loc170 = loc("CWE126_Buffer_Overread__CWE129_rand_13.c":140:37)
#loc171 = loc("CWE126_Buffer_Overread__CWE129_rand_13.c":140:30)
#loc172 = loc("CWE126_Buffer_Overread__CWE129_rand_13.c":140:17)
#loc173 = loc("CWE126_Buffer_Overread__CWE129_rand_13.c":144:27)
#loc174 = loc("CWE126_Buffer_Overread__CWE129_rand_13.c":144:17)
#loc175 = loc("CWE126_Buffer_Overread__CWE129_rand_13.c":151:1)
#loc176 = loc("CWE126_Buffer_Overread__CWE129_rand_13.c":178:1)
#loc177 = loc("CWE126_Buffer_Overread__CWE129_rand_13.c":153:5)
#loc178 = loc("CWE126_Buffer_Overread__CWE129_rand_13.c":153:9)
#loc179 = loc("CWE126_Buffer_Overread__CWE129_rand_13.c":155:13)
#loc180 = loc("CWE126_Buffer_Overread__CWE129_rand_13.c":155:12)
#loc181 = loc("CWE126_Buffer_Overread__CWE129_rand_13.c":155:5)
#loc182 = loc("CWE126_Buffer_Overread__CWE129_rand_13.c":156:5)
#loc183 = loc("CWE126_Buffer_Overread__CWE129_rand_13.c":161:5)
#loc184 = loc("CWE126_Buffer_Overread__CWE129_rand_13.c":156:8)
#loc185 = loc("CWE126_Buffer_Overread__CWE129_rand_13.c":156:27)
#loc186 = loc("CWE126_Buffer_Overread__CWE129_rand_13.c":157:5)
#loc187 = loc("CWE126_Buffer_Overread__CWE129_rand_13.c":160:16)
#loc188 = loc("CWE126_Buffer_Overread__CWE129_rand_13.c":160:9)
#loc189 = loc("CWE126_Buffer_Overread__CWE129_rand_13.c":162:5)
#loc190 = loc("CWE126_Buffer_Overread__CWE129_rand_13.c":177:5)
#loc191 = loc("CWE126_Buffer_Overread__CWE129_rand_13.c":162:8)
#loc192 = loc("CWE126_Buffer_Overread__CWE129_rand_13.c":162:27)
#loc193 = loc("CWE126_Buffer_Overread__CWE129_rand_13.c":163:5)
#loc194 = loc("CWE126_Buffer_Overread__CWE129_rand_13.c":164:9)
#loc195 = loc("CWE126_Buffer_Overread__CWE129_rand_13.c":176:9)
#loc196 = loc("CWE126_Buffer_Overread__CWE129_rand_13.c":165:13)
#loc197 = loc("CWE126_Buffer_Overread__CWE129_rand_13.c":165:34)
#loc198 = loc("CWE126_Buffer_Overread__CWE129_rand_13.c":168:13)
#loc199 = loc("CWE126_Buffer_Overread__CWE129_rand_13.c":175:13)
#loc200 = loc("CWE126_Buffer_Overread__CWE129_rand_13.c":168:17)
#loc201 = loc("CWE126_Buffer_Overread__CWE129_rand_13.c":168:25)
#loc202 = loc("CWE126_Buffer_Overread__CWE129_rand_13.c":169:13)
#loc203 = loc("CWE126_Buffer_Overread__CWE129_rand_13.c":171:13)
#loc204 = loc("CWE126_Buffer_Overread__CWE129_rand_13.c":173:13)
#loc205 = loc("CWE126_Buffer_Overread__CWE129_rand_13.c":170:37)
#loc206 = loc("CWE126_Buffer_Overread__CWE129_rand_13.c":170:30)
#loc207 = loc("CWE126_Buffer_Overread__CWE129_rand_13.c":170:17)
#loc208 = loc("CWE126_Buffer_Overread__CWE129_rand_13.c":174:27)
#loc209 = loc("CWE126_Buffer_Overread__CWE129_rand_13.c":174:17)
#loc210 = loc(fused[#loc1, #loc2])
#loc211 = loc(fused[#loc3, #loc4])
#loc212 = loc(fused[#loc5, #loc6])
#loc213 = loc(fused[#loc7, #loc8])
#loc214 = loc(fused[#loc10, #loc11])
#loc215 = loc(fused[#loc12, #loc13])
#loc216 = loc(fused[#loc16, #loc14])
#loc217 = loc(fused[#loc17, #loc18])
#loc218 = loc(fused[#loc19, #loc20])
#loc219 = loc(fused[#loc21, #loc18])
#loc220 = loc(fused[#loc23, #loc22])
#loc221 = loc(fused[#loc24, #loc25])
#loc222 = loc(fused[#loc26, #loc27])
#loc223 = loc(fused[#loc28, #loc25])
#loc224 = loc(fused[#loc29, #loc30])
#loc225 = loc(fused[#loc31, #loc32])
#loc226 = loc(fused[#loc33, #loc34])
#loc227 = loc(fused[#loc35, #loc36])
#loc228 = loc(fused[#loc37, #loc38, #loc39, #loc34])
#loc229 = loc(fused[#loc44, #loc45])
#loc230 = loc(fused[#loc46, #loc47])
#loc231 = loc(fused[#loc48, #loc49])
#loc232 = loc(fused[#loc50, #loc51])
#loc233 = loc(fused[#loc52, #loc53])
#loc234 = loc(fused[#loc56, #loc57])
#loc235 = loc(fused[#loc58, #loc59])
#loc236 = loc(fused[#loc62, #loc60])
#loc237 = loc(fused[#loc63, #loc64])
#loc238 = loc(fused[#loc65, #loc66])
#loc239 = loc(fused[#loc67, #loc64])
#loc240 = loc(fused[#loc69, #loc68])
#loc241 = loc(fused[#loc70, #loc71])
#loc242 = loc(fused[#loc72, #loc73])
#loc243 = loc(fused[#loc74, #loc75, #loc76, #loc71])
#loc244 = loc(fused[#loc78, #loc79])
#loc245 = loc(fused[#loc80, #loc81])
#loc246 = loc(fused[#loc82, #loc83])
#loc247 = loc(fused[#loc84, #loc85])
#loc248 = loc(fused[#loc87, #loc89])
#loc249 = loc(fused[#loc90, #loc91, #loc92, #loc83])
#loc250 = loc(fused[#loc97, #loc98])
#loc251 = loc(fused[#loc99, #loc100])
#loc252 = loc(fused[#loc103, #loc101])
#loc253 = loc(fused[#loc104, #loc105])
#loc254 = loc(fused[#loc106, #loc107])
#loc255 = loc(fused[#loc108, #loc105])
#loc256 = loc(fused[#loc110, #loc109])
#loc257 = loc(fused[#loc111, #loc112])
#loc258 = loc(fused[#loc113, #loc114])
#loc259 = loc(fused[#loc115, #loc112])
#loc260 = loc(fused[#loc116, #loc117])
#loc261 = loc(fused[#loc118, #loc119])
#loc262 = loc(fused[#loc120, #loc121])
#loc263 = loc(fused[#loc122, #loc123])
#loc264 = loc(fused[#loc125, #loc127])
#loc265 = loc(fused[#loc128, #loc129, #loc130, #loc121])
#loc266 = loc(fused[#loc136, #loc137])
#loc267 = loc(fused[#loc138, #loc139])
#loc268 = loc(fused[#loc142, #loc140])
#loc269 = loc(fused[#loc143, #loc144])
#loc270 = loc(fused[#loc145, #loc146])
#loc271 = loc(fused[#loc147, #loc148, #loc149, #loc144])
#loc272 = loc(fused[#loc153, #loc152])
#loc273 = loc(fused[#loc154, #loc155])
#loc274 = loc(fused[#loc156, #loc157])
#loc275 = loc(fused[#loc158, #loc155])
#loc276 = loc(fused[#loc159, #loc160])
#loc277 = loc(fused[#loc161, #loc162])
#loc278 = loc(fused[#loc163, #loc164])
#loc279 = loc(fused[#loc165, #loc166])
#loc280 = loc(fused[#loc167, #loc168, #loc169, #loc164])
#loc281 = loc(fused[#loc175, #loc176])
#loc282 = loc(fused[#loc177, #loc178])
#loc283 = loc(fused[#loc181, #loc179])
#loc284 = loc(fused[#loc182, #loc183])
#loc285 = loc(fused[#loc184, #loc185])
#loc286 = loc(fused[#loc186, #loc183])
#loc287 = loc(fused[#loc188, #loc187])
#loc288 = loc(fused[#loc189, #loc190])
#loc289 = loc(fused[#loc191, #loc192])
#loc290 = loc(fused[#loc193, #loc190])
#loc291 = loc(fused[#loc194, #loc195])
#loc292 = loc(fused[#loc196, #loc197])
#loc293 = loc(fused[#loc198, #loc199])
#loc294 = loc(fused[#loc200, #loc201])
#loc295 = loc(fused[#loc202, #loc203, #loc204, #loc199])
