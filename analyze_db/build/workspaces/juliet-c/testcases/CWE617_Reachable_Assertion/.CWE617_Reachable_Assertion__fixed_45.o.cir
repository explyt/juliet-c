!s32i = !cir.int<s, 32>
!s8i = !cir.int<s, 8>
!u32i = !cir.int<u, 32>
!u64i = !cir.int<u, 64>
#fn_attr = #cir<extra({inline = #cir.inline<no>, nothrow = #cir.nothrow, optnone = #cir.optnone, uwtable = #cir.uwtable<async>})>
#fn_attr1 = #cir<extra({nothrow = #cir.nothrow})>
module @"/workspaces/juliet-c/testcases/CWE617_Reachable_Assertion/CWE617_Reachable_Assertion__fixed_45.c" attributes {cir.lang = #cir.lang<c>, cir.sob = #cir.signed_overflow_behavior<undefined>, cir.triple = "x86_64-unknown-linux-gnu", cir.type_size_info = #cir.type_size_info<char = 8, int = 32, size_t = 64>, cir.uwtable = #cir.uwtable<async>, dlti.dl_spec = #dlti.dl_spec<f80 = dense<128> : vector<2xi64>, i128 = dense<128> : vector<2xi64>, i8 = dense<8> : vector<2xi64>, i16 = dense<16> : vector<2xi64>, i1 = dense<8> : vector<2xi64>, !llvm.ptr = dense<64> : vector<4xi64>, f64 = dense<64> : vector<2xi64>, f128 = dense<128> : vector<2xi64>, f16 = dense<16> : vector<2xi64>, i32 = dense<32> : vector<2xi64>, !llvm.ptr<270> = dense<32> : vector<4xi64>, i64 = dense<64> : vector<2xi64>, !llvm.ptr<272> = dense<64> : vector<4xi64>, !llvm.ptr<271> = dense<32> : vector<4xi64>, "dlti.stack_alignment" = 128 : i64, "dlti.mangling_mode" = "e", "dlti.endianness" = "little">} {
  cir.global "private" internal dsolocal @CWE617_Reachable_Assertion__fixed_45_badData = #cir.int<0> : !s32i {alignment = 4 : i64} loc(#loc49)
  cir.func no_proto @CWE617_Reachable_Assertion__fixed_45_bad() extra(#fn_attr) {
    %0 = cir.alloca !s32i, !cir.ptr<!s32i>, ["data"] {alignment = 4 : i64} loc(#loc51)
    %1 = cir.const #cir.int<1> : !s32i loc(#loc7)
    %2 = cir.unary(minus, %1) nsw : !s32i, !s32i loc(#loc8)
    cir.store %2, %0 : !s32i, !cir.ptr<!s32i> loc(#loc52)
    %3 = cir.const #cir.int<5> : !s32i loc(#loc10)
    %4 = cir.const #cir.int<1> : !s32i loc(#loc11)
    %5 = cir.binop(sub, %3, %4) nsw : !s32i loc(#loc10)
    cir.store %5, %0 : !s32i, !cir.ptr<!s32i> loc(#loc53)
    %6 = cir.load %0 : !cir.ptr<!s32i>, !s32i loc(#loc13)
    %7 = cir.get_global @CWE617_Reachable_Assertion__fixed_45_badData : !cir.ptr<!s32i> loc(#loc49)
    cir.store %6, %7 : !s32i, !cir.ptr<!s32i> loc(#loc54)
    %8 = cir.get_global @badSink : !cir.ptr<!cir.func<()>> loc(#loc55)
    cir.call %8() : (!cir.ptr<!cir.func<()>>) -> () loc(#loc15)
    cir.return loc(#loc4)
  } loc(#loc50)
  cir.func no_proto @CWE617_Reachable_Assertion__fixed_45_good() extra(#fn_attr) {
    %0 = cir.get_global @goodG2B : !cir.ptr<!cir.func<()>> loc(#loc57)
    cir.call %0() : (!cir.ptr<!cir.func<()>>) -> () loc(#loc19)
    cir.return loc(#loc18)
  } loc(#loc56)
  cir.func private @__assert_fail(!cir.ptr<!s8i>, !cir.ptr<!s8i>, !u32i, !cir.ptr<!s8i>) extra(#fn_attr1) loc(#loc58)
  cir.global "private" constant cir_private dsolocal @".str" = #cir.const_array<"data > ASSERT_VALUE\00" : !cir.array<!s8i x 20>> : !cir.array<!s8i x 20> {alignment = 1 : i64} loc(#loc23)
  cir.global "private" constant cir_private dsolocal @".str.1" = #cir.const_array<"CWE617_Reachable_Assertion__fixed_45.c\00" : !cir.array<!s8i x 39>> : !cir.array<!s8i x 39> {alignment = 1 : i64} loc(#loc23)
  cir.global "private" constant cir_private dsolocal @".str.2" = #cir.const_array<"void badSink()\00" : !cir.array<!s8i x 15>> : !cir.array<!s8i x 15> {alignment = 1 : i64} loc(#loc23)
  cir.func no_proto internal private @badSink() extra(#fn_attr) {
    %0 = cir.alloca !s32i, !cir.ptr<!s32i>, ["data", init] {alignment = 4 : i64} loc(#loc60)
    %1 = cir.get_global @CWE617_Reachable_Assertion__fixed_45_badData : !cir.ptr<!s32i> loc(#loc49)
    %2 = cir.load %1 : !cir.ptr<!s32i>, !s32i loc(#loc27)
    cir.store %2, %0 : !s32i, !cir.ptr<!s32i> loc(#loc60)
    %3 = cir.const #cir.int<4> : !u64i loc(#loc23)
    cir.scope {
      cir.scope {
        %4 = cir.load %0 : !cir.ptr<!s32i>, !s32i loc(#loc23)
        %5 = cir.const #cir.int<5> : !s32i loc(#loc23)
        %6 = cir.cmp(gt, %4, %5) : !s32i, !cir.bool loc(#loc23)
        cir.if %6 {
        } else {
          %7 = cir.get_global @".str" : !cir.ptr<!cir.array<!s8i x 20>> loc(#loc23)
          %8 = cir.cast(array_to_ptrdecay, %7 : !cir.ptr<!cir.array<!s8i x 20>>), !cir.ptr<!s8i> loc(#loc23)
          %9 = cir.get_global @".str.1" : !cir.ptr<!cir.array<!s8i x 39>> loc(#loc23)
          %10 = cir.cast(array_to_ptrdecay, %9 : !cir.ptr<!cir.array<!s8i x 39>>), !cir.ptr<!s8i> loc(#loc23)
          %11 = cir.const #cir.int<32> : !s32i loc(#loc23)
          %12 = cir.cast(integral, %11 : !s32i), !u32i loc(#loc23)
          %13 = cir.get_global @".str.2" : !cir.ptr<!cir.array<!s8i x 15>> loc(#loc23)
          %14 = cir.cast(array_to_ptrdecay, %13 : !cir.ptr<!cir.array<!s8i x 15>>), !cir.ptr<!s8i> loc(#loc23)
          cir.call @__assert_fail(%8, %10, %12, %14) : (!cir.ptr<!s8i>, !cir.ptr<!s8i>, !u32i, !cir.ptr<!s8i>) -> () extra(#fn_attr1) loc(#loc23)
        } loc(#loc23)
      } loc(#loc23)
    } loc(#loc23)
    cir.return loc(#loc25)
  } loc(#loc59)
  cir.global "private" internal dsolocal @CWE617_Reachable_Assertion__fixed_45_goodG2BData = #cir.int<0> : !s32i {alignment = 4 : i64} loc(#loc61)
  cir.func no_proto internal private @goodG2B() extra(#fn_attr) {
    %0 = cir.alloca !s32i, !cir.ptr<!s32i>, ["data"] {alignment = 4 : i64} loc(#loc63)
    %1 = cir.const #cir.int<1> : !s32i loc(#loc34)
    %2 = cir.unary(minus, %1) nsw : !s32i, !s32i loc(#loc35)
    cir.store %2, %0 : !s32i, !cir.ptr<!s32i> loc(#loc64)
    %3 = cir.const #cir.int<5> : !s32i loc(#loc37)
    %4 = cir.const #cir.int<1> : !s32i loc(#loc38)
    %5 = cir.binop(add, %3, %4) nsw : !s32i loc(#loc37)
    cir.store %5, %0 : !s32i, !cir.ptr<!s32i> loc(#loc65)
    %6 = cir.load %0 : !cir.ptr<!s32i>, !s32i loc(#loc40)
    %7 = cir.get_global @CWE617_Reachable_Assertion__fixed_45_goodG2BData : !cir.ptr<!s32i> loc(#loc61)
    cir.store %6, %7 : !s32i, !cir.ptr<!s32i> loc(#loc66)
    %8 = cir.get_global @goodG2BSink : !cir.ptr<!cir.func<()>> loc(#loc67)
    cir.call %8() : (!cir.ptr<!cir.func<()>>) -> () loc(#loc42)
    cir.return loc(#loc31)
  } loc(#loc62)
  cir.global "private" constant cir_private dsolocal @".str.3" = #cir.const_array<"void goodG2BSink()\00" : !cir.array<!s8i x 19>> : !cir.array<!s8i x 19> {alignment = 1 : i64} loc(#loc44)
  cir.func no_proto internal private @goodG2BSink() extra(#fn_attr) {
    %0 = cir.alloca !s32i, !cir.ptr<!s32i>, ["data", init] {alignment = 4 : i64} loc(#loc69)
    %1 = cir.get_global @CWE617_Reachable_Assertion__fixed_45_goodG2BData : !cir.ptr<!s32i> loc(#loc61)
    %2 = cir.load %1 : !cir.ptr<!s32i>, !s32i loc(#loc48)
    cir.store %2, %0 : !s32i, !cir.ptr<!s32i> loc(#loc69)
    %3 = cir.const #cir.int<4> : !u64i loc(#loc44)
    cir.scope {
      cir.scope {
        %4 = cir.load %0 : !cir.ptr<!s32i>, !s32i loc(#loc44)
        %5 = cir.const #cir.int<5> : !s32i loc(#loc44)
        %6 = cir.cmp(gt, %4, %5) : !s32i, !cir.bool loc(#loc44)
        cir.if %6 {
        } else {
          %7 = cir.get_global @".str" : !cir.ptr<!cir.array<!s8i x 20>> loc(#loc44)
          %8 = cir.cast(array_to_ptrdecay, %7 : !cir.ptr<!cir.array<!s8i x 20>>), !cir.ptr<!s8i> loc(#loc44)
          %9 = cir.get_global @".str.1" : !cir.ptr<!cir.array<!s8i x 39>> loc(#loc44)
          %10 = cir.cast(array_to_ptrdecay, %9 : !cir.ptr<!cir.array<!s8i x 39>>), !cir.ptr<!s8i> loc(#loc44)
          %11 = cir.const #cir.int<55> : !s32i loc(#loc44)
          %12 = cir.cast(integral, %11 : !s32i), !u32i loc(#loc44)
          %13 = cir.get_global @".str.3" : !cir.ptr<!cir.array<!s8i x 19>> loc(#loc44)
          %14 = cir.cast(array_to_ptrdecay, %13 : !cir.ptr<!cir.array<!s8i x 19>>), !cir.ptr<!s8i> loc(#loc44)
          cir.call @__assert_fail(%8, %10, %12, %14) : (!cir.ptr<!s8i>, !cir.ptr<!s8i>, !u32i, !cir.ptr<!s8i>) -> () extra(#fn_attr1) loc(#loc44)
        } loc(#loc44)
      } loc(#loc44)
    } loc(#loc44)
    cir.return loc(#loc46)
  } loc(#loc68)
} loc(#loc)
#loc = loc("/workspaces/juliet-c/testcases/CWE617_Reachable_Assertion/CWE617_Reachable_Assertion__fixed_45.c":0:0)
#loc1 = loc("CWE617_Reachable_Assertion__fixed_45.c":23:1)
#loc2 = loc("CWE617_Reachable_Assertion__fixed_45.c":23:12)
#loc3 = loc("CWE617_Reachable_Assertion__fixed_45.c":35:1)
#loc4 = loc("CWE617_Reachable_Assertion__fixed_45.c":44:1)
#loc5 = loc("CWE617_Reachable_Assertion__fixed_45.c":37:5)
#loc6 = loc("CWE617_Reachable_Assertion__fixed_45.c":37:9)
#loc7 = loc("CWE617_Reachable_Assertion__fixed_45.c":39:13)
#loc8 = loc("CWE617_Reachable_Assertion__fixed_45.c":39:12)
#loc9 = loc("CWE617_Reachable_Assertion__fixed_45.c":39:5)
#loc10 = loc("CWE617_Reachable_Assertion__fixed_45.c":41:12)
#loc11 = loc("CWE617_Reachable_Assertion__fixed_45.c":41:25)
#loc12 = loc("CWE617_Reachable_Assertion__fixed_45.c":41:5)
#loc13 = loc("CWE617_Reachable_Assertion__fixed_45.c":42:52)
#loc14 = loc("CWE617_Reachable_Assertion__fixed_45.c":42:5)
#loc15 = loc("CWE617_Reachable_Assertion__fixed_45.c":43:5)
#loc16 = loc("CWE617_Reachable_Assertion__fixed_45.c":43:13)
#loc17 = loc("CWE617_Reachable_Assertion__fixed_45.c":69:1)
#loc18 = loc("CWE617_Reachable_Assertion__fixed_45.c":72:1)
#loc19 = loc("CWE617_Reachable_Assertion__fixed_45.c":71:5)
#loc20 = loc("CWE617_Reachable_Assertion__fixed_45.c":71:13)
#loc21 = loc("/usr/include/assert.h":69:1)
#loc22 = loc("/usr/include/assert.h":71:43)
#loc23 = loc("CWE617_Reachable_Assertion__fixed_45.c":32:5)
#loc24 = loc("CWE617_Reachable_Assertion__fixed_45.c":28:1)
#loc25 = loc("CWE617_Reachable_Assertion__fixed_45.c":33:1)
#loc26 = loc("CWE617_Reachable_Assertion__fixed_45.c":30:5)
#loc27 = loc("CWE617_Reachable_Assertion__fixed_45.c":30:16)
#loc28 = loc("CWE617_Reachable_Assertion__fixed_45.c":24:1)
#loc29 = loc("CWE617_Reachable_Assertion__fixed_45.c":24:12)
#loc30 = loc("CWE617_Reachable_Assertion__fixed_45.c":58:1)
#loc31 = loc("CWE617_Reachable_Assertion__fixed_45.c":67:1)
#loc32 = loc("CWE617_Reachable_Assertion__fixed_45.c":60:5)
#loc33 = loc("CWE617_Reachable_Assertion__fixed_45.c":60:9)
#loc34 = loc("CWE617_Reachable_Assertion__fixed_45.c":62:13)
#loc35 = loc("CWE617_Reachable_Assertion__fixed_45.c":62:12)
#loc36 = loc("CWE617_Reachable_Assertion__fixed_45.c":62:5)
#loc37 = loc("CWE617_Reachable_Assertion__fixed_45.c":64:12)
#loc38 = loc("CWE617_Reachable_Assertion__fixed_45.c":64:25)
#loc39 = loc("CWE617_Reachable_Assertion__fixed_45.c":64:5)
#loc40 = loc("CWE617_Reachable_Assertion__fixed_45.c":65:56)
#loc41 = loc("CWE617_Reachable_Assertion__fixed_45.c":65:5)
#loc42 = loc("CWE617_Reachable_Assertion__fixed_45.c":66:5)
#loc43 = loc("CWE617_Reachable_Assertion__fixed_45.c":66:17)
#loc44 = loc("CWE617_Reachable_Assertion__fixed_45.c":55:5)
#loc45 = loc("CWE617_Reachable_Assertion__fixed_45.c":51:1)
#loc46 = loc("CWE617_Reachable_Assertion__fixed_45.c":56:1)
#loc47 = loc("CWE617_Reachable_Assertion__fixed_45.c":53:5)
#loc48 = loc("CWE617_Reachable_Assertion__fixed_45.c":53:16)
#loc49 = loc(fused[#loc1, #loc2])
#loc50 = loc(fused[#loc3, #loc4])
#loc51 = loc(fused[#loc5, #loc6])
#loc52 = loc(fused[#loc9, #loc7])
#loc53 = loc(fused[#loc12, #loc11])
#loc54 = loc(fused[#loc14, #loc13])
#loc55 = loc(fused[#loc15, #loc16])
#loc56 = loc(fused[#loc17, #loc18])
#loc57 = loc(fused[#loc19, #loc20])
#loc58 = loc(fused[#loc21, #loc22])
#loc59 = loc(fused[#loc24, #loc25])
#loc60 = loc(fused[#loc26, #loc27])
#loc61 = loc(fused[#loc28, #loc29])
#loc62 = loc(fused[#loc30, #loc31])
#loc63 = loc(fused[#loc32, #loc33])
#loc64 = loc(fused[#loc36, #loc34])
#loc65 = loc(fused[#loc39, #loc38])
#loc66 = loc(fused[#loc41, #loc40])
#loc67 = loc(fused[#loc42, #loc43])
#loc68 = loc(fused[#loc45, #loc46])
#loc69 = loc(fused[#loc47, #loc48])
