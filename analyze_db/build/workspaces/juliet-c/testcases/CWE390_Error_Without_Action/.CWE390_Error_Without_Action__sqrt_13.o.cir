!s32i = !cir.int<s, 32>
!s8i = !cir.int<s, 8>
#fn_attr = #cir<extra({nothrow = #cir.nothrow})>
#fn_attr1 = #cir<extra({inline = #cir.inline<no>, nothrow = #cir.nothrow, optnone = #cir.optnone, uwtable = #cir.uwtable<async>})>
module @"/workspaces/juliet-c/testcases/CWE390_Error_Without_Action/CWE390_Error_Without_Action__sqrt_13.c" attributes {cir.lang = #cir.lang<c>, cir.sob = #cir.signed_overflow_behavior<undefined>, cir.triple = "x86_64-unknown-linux-gnu", cir.type_size_info = #cir.type_size_info<char = 8, int = 32, size_t = 64>, cir.uwtable = #cir.uwtable<async>, dlti.dl_spec = #dlti.dl_spec<!llvm.ptr<272> = dense<64> : vector<4xi64>, f16 = dense<16> : vector<2xi64>, !llvm.ptr<271> = dense<32> : vector<4xi64>, f64 = dense<64> : vector<2xi64>, f128 = dense<128> : vector<2xi64>, i64 = dense<64> : vector<2xi64>, i128 = dense<128> : vector<2xi64>, f80 = dense<128> : vector<2xi64>, !llvm.ptr<270> = dense<32> : vector<4xi64>, i1 = dense<8> : vector<2xi64>, !llvm.ptr = dense<64> : vector<4xi64>, i16 = dense<16> : vector<2xi64>, i8 = dense<8> : vector<2xi64>, i32 = dense<32> : vector<2xi64>, "dlti.endianness" = "little", "dlti.mangling_mode" = "e", "dlti.stack_alignment" = 128 : i64>} {
  cir.global "private" constant external @GLOBAL_CONST_FIVE : !s32i {alignment = 4 : i64} loc(#loc105)
  cir.func private @__errno_location() -> !cir.ptr<!s32i> extra(#fn_attr) loc(#loc106)
  cir.func private @sqrt(!cir.double) -> !cir.double extra(#fn_attr) loc(#loc5)
  cir.func private @printDoubleLine(!cir.double) loc(#loc107)
  cir.func no_proto @CWE390_Error_Without_Action__sqrt_13_bad() extra(#fn_attr1) {
    cir.scope {
      %0 = cir.get_global @GLOBAL_CONST_FIVE : !cir.ptr<!s32i> loc(#loc105)
      %1 = cir.load %0 : !cir.ptr<!s32i>, !s32i loc(#loc12)
      %2 = cir.const #cir.int<5> : !s32i loc(#loc13)
      %3 = cir.cmp(eq, %1, %2) : !s32i, !cir.bool loc(#loc110)
      cir.if %3 {
        cir.scope {
          %4 = cir.alloca !cir.double, !cir.ptr<!cir.double>, ["doubleNumber"] {alignment = 8 : i64} loc(#loc113)
          %5 = cir.const #cir.int<0> : !s32i loc(#loc19)
          %6 = cir.call @__errno_location() : () -> !cir.ptr<!s32i> side_effect(const) extra(#fn_attr) loc(#loc20)
          cir.store %5, %6 : !s32i, !cir.ptr<!s32i> loc(#loc114)
          %7 = cir.get_global @sqrt : !cir.ptr<!cir.func<(!cir.double) -> !cir.double>> loc(#loc21)
          %8 = cir.const #cir.int<1> : !s32i loc(#loc22)
          %9 = cir.unary(minus, %8) nsw : !s32i, !s32i loc(#loc23)
          %10 = cir.cast(int_to_float, %9 : !s32i), !cir.double loc(#loc23)
          %11 = cir.call @sqrt(%10) : (!cir.double) -> !cir.double extra(#fn_attr) loc(#loc21)
          cir.store %11, %4 : !cir.double, !cir.ptr<!cir.double> loc(#loc115)
          cir.scope {
            %13 = cir.call @__errno_location() : () -> !cir.ptr<!s32i> side_effect(const) extra(#fn_attr) loc(#loc28)
            %14 = cir.load %13 : !cir.ptr<!s32i>, !s32i loc(#loc28)
            %15 = cir.const #cir.int<33> : !s32i loc(#loc29)
            %16 = cir.cmp(eq, %14, %15) : !s32i, !cir.bool loc(#loc117)
            cir.if %16 {
            } loc(#loc118)
          } loc(#loc116)
          %12 = cir.load %4 : !cir.ptr<!cir.double>, !cir.double loc(#loc31)
          cir.call @printDoubleLine(%12) : (!cir.double) -> () loc(#loc32)
        } loc(#loc112)
      } loc(#loc111)
    } loc(#loc109)
    cir.return loc(#loc9)
  } loc(#loc108)
  cir.func no_proto @CWE390_Error_Without_Action__sqrt_13_good() extra(#fn_attr1) {
    %0 = cir.get_global @good1 : !cir.ptr<!cir.func<()>> loc(#loc120)
    cir.call %0() : (!cir.ptr<!cir.func<()>>) -> () loc(#loc35)
    %1 = cir.get_global @good2 : !cir.ptr<!cir.func<()>> loc(#loc121)
    cir.call %1() : (!cir.ptr<!cir.func<()>>) -> () loc(#loc37)
    cir.return loc(#loc34)
  } loc(#loc119)
  cir.func private @printLine(!cir.ptr<!s8i>) loc(#loc122)
  cir.global "private" constant cir_private dsolocal @".str" = #cir.const_array<"Benign, fixed string\00" : !cir.array<!s8i x 21>> : !cir.array<!s8i x 21> {alignment = 1 : i64} loc(#loc41)
  cir.global "private" constant cir_private dsolocal @".str.1" = #cir.const_array<"sqrt() failed\00" : !cir.array<!s8i x 14>> : !cir.array<!s8i x 14> {alignment = 1 : i64} loc(#loc42)
  cir.func private @exit(!s32i) extra(#fn_attr) loc(#loc123)
  cir.func no_proto internal private @good1() extra(#fn_attr1) {
    cir.scope {
      %0 = cir.get_global @GLOBAL_CONST_FIVE : !cir.ptr<!s32i> loc(#loc105)
      %1 = cir.load %0 : !cir.ptr<!s32i>, !s32i loc(#loc49)
      %2 = cir.const #cir.int<5> : !s32i loc(#loc50)
      %3 = cir.cmp(ne, %1, %2) : !s32i, !cir.bool loc(#loc126)
      cir.if %3 {
        %4 = cir.get_global @".str" : !cir.ptr<!cir.array<!s8i x 21>> loc(#loc41)
        %5 = cir.cast(array_to_ptrdecay, %4 : !cir.ptr<!cir.array<!s8i x 21>>), !cir.ptr<!s8i> loc(#loc41)
        cir.call @printLine(%5) : (!cir.ptr<!s8i>) -> () loc(#loc54)
      } else {
        cir.scope {
          %4 = cir.alloca !cir.double, !cir.ptr<!cir.double>, ["doubleNumber"] {alignment = 8 : i64} loc(#loc129)
          %5 = cir.const #cir.int<0> : !s32i loc(#loc59)
          %6 = cir.call @__errno_location() : () -> !cir.ptr<!s32i> side_effect(const) extra(#fn_attr) loc(#loc60)
          cir.store %5, %6 : !s32i, !cir.ptr<!s32i> loc(#loc130)
          %7 = cir.get_global @sqrt : !cir.ptr<!cir.func<(!cir.double) -> !cir.double>> loc(#loc61)
          %8 = cir.const #cir.int<1> : !s32i loc(#loc62)
          %9 = cir.unary(minus, %8) nsw : !s32i, !s32i loc(#loc63)
          %10 = cir.cast(int_to_float, %9 : !s32i), !cir.double loc(#loc63)
          %11 = cir.call @sqrt(%10) : (!cir.double) -> !cir.double extra(#fn_attr) loc(#loc61)
          cir.store %11, %4 : !cir.double, !cir.ptr<!cir.double> loc(#loc131)
          cir.scope {
            %13 = cir.call @__errno_location() : () -> !cir.ptr<!s32i> side_effect(const) extra(#fn_attr) loc(#loc68)
            %14 = cir.load %13 : !cir.ptr<!s32i>, !s32i loc(#loc68)
            %15 = cir.const #cir.int<33> : !s32i loc(#loc69)
            %16 = cir.cmp(eq, %14, %15) : !s32i, !cir.bool loc(#loc133)
            cir.if %16 {
              %17 = cir.get_global @".str.1" : !cir.ptr<!cir.array<!s8i x 14>> loc(#loc42)
              %18 = cir.cast(array_to_ptrdecay, %17 : !cir.ptr<!cir.array<!s8i x 14>>), !cir.ptr<!s8i> loc(#loc42)
              cir.call @printLine(%18) : (!cir.ptr<!s8i>) -> () loc(#loc71)
              %19 = cir.get_global @exit : !cir.ptr<!cir.func<(!s32i)>> loc(#loc72)
              %20 = cir.const #cir.int<1> : !s32i loc(#loc73)
              cir.call @exit(%20) : (!s32i) -> () extra(#fn_attr) loc(#loc72)
            } loc(#loc134)
          } loc(#loc132)
          %12 = cir.load %4 : !cir.ptr<!cir.double>, !cir.double loc(#loc74)
          cir.call @printDoubleLine(%12) : (!cir.double) -> () loc(#loc75)
        } loc(#loc128)
      } loc(#loc127)
    } loc(#loc125)
    cir.return loc(#loc46)
  } loc(#loc124)
  cir.func no_proto internal private @good2() extra(#fn_attr1) {
    cir.scope {
      %0 = cir.get_global @GLOBAL_CONST_FIVE : !cir.ptr<!s32i> loc(#loc105)
      %1 = cir.load %0 : !cir.ptr<!s32i>, !s32i loc(#loc80)
      %2 = cir.const #cir.int<5> : !s32i loc(#loc81)
      %3 = cir.cmp(eq, %1, %2) : !s32i, !cir.bool loc(#loc137)
      cir.if %3 {
        cir.scope {
          %4 = cir.alloca !cir.double, !cir.ptr<!cir.double>, ["doubleNumber"] {alignment = 8 : i64} loc(#loc140)
          %5 = cir.const #cir.int<0> : !s32i loc(#loc87)
          %6 = cir.call @__errno_location() : () -> !cir.ptr<!s32i> side_effect(const) extra(#fn_attr) loc(#loc88)
          cir.store %5, %6 : !s32i, !cir.ptr<!s32i> loc(#loc141)
          %7 = cir.get_global @sqrt : !cir.ptr<!cir.func<(!cir.double) -> !cir.double>> loc(#loc89)
          %8 = cir.const #cir.int<1> : !s32i loc(#loc90)
          %9 = cir.unary(minus, %8) nsw : !s32i, !s32i loc(#loc91)
          %10 = cir.cast(int_to_float, %9 : !s32i), !cir.double loc(#loc91)
          %11 = cir.call @sqrt(%10) : (!cir.double) -> !cir.double extra(#fn_attr) loc(#loc89)
          cir.store %11, %4 : !cir.double, !cir.ptr<!cir.double> loc(#loc142)
          cir.scope {
            %13 = cir.call @__errno_location() : () -> !cir.ptr<!s32i> side_effect(const) extra(#fn_attr) loc(#loc96)
            %14 = cir.load %13 : !cir.ptr<!s32i>, !s32i loc(#loc96)
            %15 = cir.const #cir.int<33> : !s32i loc(#loc97)
            %16 = cir.cmp(eq, %14, %15) : !s32i, !cir.bool loc(#loc144)
            cir.if %16 {
              %17 = cir.get_global @".str.1" : !cir.ptr<!cir.array<!s8i x 14>> loc(#loc99)
              %18 = cir.cast(array_to_ptrdecay, %17 : !cir.ptr<!cir.array<!s8i x 14>>), !cir.ptr<!s8i> loc(#loc99)
              cir.call @printLine(%18) : (!cir.ptr<!s8i>) -> () loc(#loc100)
              %19 = cir.get_global @exit : !cir.ptr<!cir.func<(!s32i)>> loc(#loc101)
              %20 = cir.const #cir.int<1> : !s32i loc(#loc102)
              cir.call @exit(%20) : (!s32i) -> () extra(#fn_attr) loc(#loc101)
            } loc(#loc145)
          } loc(#loc143)
          %12 = cir.load %4 : !cir.ptr<!cir.double>, !cir.double loc(#loc103)
          cir.call @printDoubleLine(%12) : (!cir.double) -> () loc(#loc104)
        } loc(#loc139)
      } loc(#loc138)
    } loc(#loc136)
    cir.return loc(#loc77)
  } loc(#loc135)
} loc(#loc)
#loc = loc("/workspaces/juliet-c/testcases/CWE390_Error_Without_Action/CWE390_Error_Without_Action__sqrt_13.c":0:0)
#loc1 = loc("../../testcasesupport/std_testcase.h":111:1)
#loc2 = loc("../../testcasesupport/std_testcase.h":111:18)
#loc3 = loc("/usr/include/errno.h":37:1)
#loc4 = loc("/usr/include/errno.h":37:45)
#loc5 = loc("/usr/include/x86_64-linux-gnu/bits/mathcalls.h":143:1)
#loc6 = loc("../../testcasesupport/std_testcase_io.h":38:1)
#loc7 = loc("../../testcasesupport/std_testcase_io.h":38:41)
#loc8 = loc("CWE390_Error_Without_Action__sqrt_13.c":23:1)
#loc9 = loc("CWE390_Error_Without_Action__sqrt_13.c":39:1)
#loc10 = loc("CWE390_Error_Without_Action__sqrt_13.c":25:5)
#loc11 = loc("CWE390_Error_Without_Action__sqrt_13.c":38:5)
#loc12 = loc("CWE390_Error_Without_Action__sqrt_13.c":25:8)
#loc13 = loc("CWE390_Error_Without_Action__sqrt_13.c":25:27)
#loc14 = loc("CWE390_Error_Without_Action__sqrt_13.c":26:5)
#loc15 = loc("CWE390_Error_Without_Action__sqrt_13.c":27:9)
#loc16 = loc("CWE390_Error_Without_Action__sqrt_13.c":37:9)
#loc17 = loc("CWE390_Error_Without_Action__sqrt_13.c":28:13)
#loc18 = loc("CWE390_Error_Without_Action__sqrt_13.c":28:20)
#loc19 = loc("CWE390_Error_Without_Action__sqrt_13.c":29:21)
#loc20 = loc("CWE390_Error_Without_Action__sqrt_13.c":29:13)
#loc21 = loc("CWE390_Error_Without_Action__sqrt_13.c":30:36)
#loc22 = loc("CWE390_Error_Without_Action__sqrt_13.c":30:50)
#loc23 = loc("CWE390_Error_Without_Action__sqrt_13.c":30:49)
#loc24 = loc("CWE390_Error_Without_Action__sqrt_13.c":30:13)
#loc25 = loc("CWE390_Error_Without_Action__sqrt_13.c":30:51)
#loc26 = loc("CWE390_Error_Without_Action__sqrt_13.c":32:13)
#loc27 = loc("CWE390_Error_Without_Action__sqrt_13.c":35:13)
#loc28 = loc("CWE390_Error_Without_Action__sqrt_13.c":32:17)
#loc29 = loc("CWE390_Error_Without_Action__sqrt_13.c":32:26)
#loc30 = loc("CWE390_Error_Without_Action__sqrt_13.c":33:13)
#loc31 = loc("CWE390_Error_Without_Action__sqrt_13.c":36:29)
#loc32 = loc("CWE390_Error_Without_Action__sqrt_13.c":36:13)
#loc33 = loc("CWE390_Error_Without_Action__sqrt_13.c":90:1)
#loc34 = loc("CWE390_Error_Without_Action__sqrt_13.c":94:1)
#loc35 = loc("CWE390_Error_Without_Action__sqrt_13.c":92:5)
#loc36 = loc("CWE390_Error_Without_Action__sqrt_13.c":92:11)
#loc37 = loc("CWE390_Error_Without_Action__sqrt_13.c":93:5)
#loc38 = loc("CWE390_Error_Without_Action__sqrt_13.c":93:11)
#loc39 = loc("../../testcasesupport/std_testcase_io.h":14:1)
#loc40 = loc("../../testcasesupport/std_testcase_io.h":14:33)
#loc41 = loc("CWE390_Error_Without_Action__sqrt_13.c":51:19)
#loc42 = loc("CWE390_Error_Without_Action__sqrt_13.c":62:27)
#loc43 = loc("/usr/include/stdlib.h":756:1)
#loc44 = loc("/usr/include/stdlib.h":756:70)
#loc45 = loc("CWE390_Error_Without_Action__sqrt_13.c":46:1)
#loc46 = loc("CWE390_Error_Without_Action__sqrt_13.c":68:1)
#loc47 = loc("CWE390_Error_Without_Action__sqrt_13.c":48:5)
#loc48 = loc("CWE390_Error_Without_Action__sqrt_13.c":67:5)
#loc49 = loc("CWE390_Error_Without_Action__sqrt_13.c":48:8)
#loc50 = loc("CWE390_Error_Without_Action__sqrt_13.c":48:27)
#loc51 = loc("CWE390_Error_Without_Action__sqrt_13.c":49:5)
#loc52 = loc("CWE390_Error_Without_Action__sqrt_13.c":52:5)
#loc53 = loc("CWE390_Error_Without_Action__sqrt_13.c":54:5)
#loc54 = loc("CWE390_Error_Without_Action__sqrt_13.c":51:9)
#loc55 = loc("CWE390_Error_Without_Action__sqrt_13.c":55:9)
#loc56 = loc("CWE390_Error_Without_Action__sqrt_13.c":66:9)
#loc57 = loc("CWE390_Error_Without_Action__sqrt_13.c":56:13)
#loc58 = loc("CWE390_Error_Without_Action__sqrt_13.c":56:20)
#loc59 = loc("CWE390_Error_Without_Action__sqrt_13.c":57:21)
#loc60 = loc("CWE390_Error_Without_Action__sqrt_13.c":57:13)
#loc61 = loc("CWE390_Error_Without_Action__sqrt_13.c":58:36)
#loc62 = loc("CWE390_Error_Without_Action__sqrt_13.c":58:50)
#loc63 = loc("CWE390_Error_Without_Action__sqrt_13.c":58:49)
#loc64 = loc("CWE390_Error_Without_Action__sqrt_13.c":58:13)
#loc65 = loc("CWE390_Error_Without_Action__sqrt_13.c":58:51)
#loc66 = loc("CWE390_Error_Without_Action__sqrt_13.c":60:13)
#loc67 = loc("CWE390_Error_Without_Action__sqrt_13.c":64:13)
#loc68 = loc("CWE390_Error_Without_Action__sqrt_13.c":60:17)
#loc69 = loc("CWE390_Error_Without_Action__sqrt_13.c":60:26)
#loc70 = loc("CWE390_Error_Without_Action__sqrt_13.c":61:13)
#loc71 = loc("CWE390_Error_Without_Action__sqrt_13.c":62:17)
#loc72 = loc("CWE390_Error_Without_Action__sqrt_13.c":63:17)
#loc73 = loc("CWE390_Error_Without_Action__sqrt_13.c":63:22)
#loc74 = loc("CWE390_Error_Without_Action__sqrt_13.c":65:29)
#loc75 = loc("CWE390_Error_Without_Action__sqrt_13.c":65:13)
#loc76 = loc("CWE390_Error_Without_Action__sqrt_13.c":71:1)
#loc77 = loc("CWE390_Error_Without_Action__sqrt_13.c":88:1)
#loc78 = loc("CWE390_Error_Without_Action__sqrt_13.c":73:5)
#loc79 = loc("CWE390_Error_Without_Action__sqrt_13.c":87:5)
#loc80 = loc("CWE390_Error_Without_Action__sqrt_13.c":73:8)
#loc81 = loc("CWE390_Error_Without_Action__sqrt_13.c":73:27)
#loc82 = loc("CWE390_Error_Without_Action__sqrt_13.c":74:5)
#loc83 = loc("CWE390_Error_Without_Action__sqrt_13.c":75:9)
#loc84 = loc("CWE390_Error_Without_Action__sqrt_13.c":86:9)
#loc85 = loc("CWE390_Error_Without_Action__sqrt_13.c":76:13)
#loc86 = loc("CWE390_Error_Without_Action__sqrt_13.c":76:20)
#loc87 = loc("CWE390_Error_Without_Action__sqrt_13.c":77:21)
#loc88 = loc("CWE390_Error_Without_Action__sqrt_13.c":77:13)
#loc89 = loc("CWE390_Error_Without_Action__sqrt_13.c":78:36)
#loc90 = loc("CWE390_Error_Without_Action__sqrt_13.c":78:50)
#loc91 = loc("CWE390_Error_Without_Action__sqrt_13.c":78:49)
#loc92 = loc("CWE390_Error_Without_Action__sqrt_13.c":78:13)
#loc93 = loc("CWE390_Error_Without_Action__sqrt_13.c":78:51)
#loc94 = loc("CWE390_Error_Without_Action__sqrt_13.c":80:13)
#loc95 = loc("CWE390_Error_Without_Action__sqrt_13.c":84:13)
#loc96 = loc("CWE390_Error_Without_Action__sqrt_13.c":80:17)
#loc97 = loc("CWE390_Error_Without_Action__sqrt_13.c":80:26)
#loc98 = loc("CWE390_Error_Without_Action__sqrt_13.c":81:13)
#loc99 = loc("CWE390_Error_Without_Action__sqrt_13.c":82:27)
#loc100 = loc("CWE390_Error_Without_Action__sqrt_13.c":82:17)
#loc101 = loc("CWE390_Error_Without_Action__sqrt_13.c":83:17)
#loc102 = loc("CWE390_Error_Without_Action__sqrt_13.c":83:22)
#loc103 = loc("CWE390_Error_Without_Action__sqrt_13.c":85:29)
#loc104 = loc("CWE390_Error_Without_Action__sqrt_13.c":85:13)
#loc105 = loc(fused[#loc1, #loc2])
#loc106 = loc(fused[#loc3, #loc4])
#loc107 = loc(fused[#loc6, #loc7])
#loc108 = loc(fused[#loc8, #loc9])
#loc109 = loc(fused[#loc10, #loc11])
#loc110 = loc(fused[#loc12, #loc13])
#loc111 = loc(fused[#loc14, #loc11])
#loc112 = loc(fused[#loc15, #loc16])
#loc113 = loc(fused[#loc17, #loc18])
#loc114 = loc(fused[#loc20, #loc19])
#loc115 = loc(fused[#loc24, #loc25])
#loc116 = loc(fused[#loc26, #loc27])
#loc117 = loc(fused[#loc28, #loc29])
#loc118 = loc(fused[#loc30, #loc27])
#loc119 = loc(fused[#loc33, #loc34])
#loc120 = loc(fused[#loc35, #loc36])
#loc121 = loc(fused[#loc37, #loc38])
#loc122 = loc(fused[#loc39, #loc40])
#loc123 = loc(fused[#loc43, #loc44])
#loc124 = loc(fused[#loc45, #loc46])
#loc125 = loc(fused[#loc47, #loc48])
#loc126 = loc(fused[#loc49, #loc50])
#loc127 = loc(fused[#loc51, #loc52, #loc53, #loc48])
#loc128 = loc(fused[#loc55, #loc56])
#loc129 = loc(fused[#loc57, #loc58])
#loc130 = loc(fused[#loc60, #loc59])
#loc131 = loc(fused[#loc64, #loc65])
#loc132 = loc(fused[#loc66, #loc67])
#loc133 = loc(fused[#loc68, #loc69])
#loc134 = loc(fused[#loc70, #loc67])
#loc135 = loc(fused[#loc76, #loc77])
#loc136 = loc(fused[#loc78, #loc79])
#loc137 = loc(fused[#loc80, #loc81])
#loc138 = loc(fused[#loc82, #loc79])
#loc139 = loc(fused[#loc83, #loc84])
#loc140 = loc(fused[#loc85, #loc86])
#loc141 = loc(fused[#loc88, #loc87])
#loc142 = loc(fused[#loc92, #loc93])
#loc143 = loc(fused[#loc94, #loc95])
#loc144 = loc(fused[#loc96, #loc97])
#loc145 = loc(fused[#loc98, #loc95])
