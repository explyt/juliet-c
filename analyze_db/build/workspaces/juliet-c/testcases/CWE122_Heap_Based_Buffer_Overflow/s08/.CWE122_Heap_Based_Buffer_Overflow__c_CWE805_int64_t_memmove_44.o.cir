!s32i = !cir.int<s, 32>
!s64i = !cir.int<s, 64>
!u64i = !cir.int<u, 64>
!void = !cir.void
#fn_attr = #cir<extra({nothrow = #cir.nothrow})>
#fn_attr1 = #cir<extra({inline = #cir.inline<no>, nothrow = #cir.nothrow, optnone = #cir.optnone, uwtable = #cir.uwtable<async>})>
#loc7 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_int64_t_memmove_44.c":21:21)
#loc8 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_int64_t_memmove_44.c":21:31)
#loc61 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_int64_t_memmove_44.c":50:25)
#loc62 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_int64_t_memmove_44.c":50:35)
#loc108 = loc(fused[#loc7, #loc8])
#loc130 = loc(fused[#loc61, #loc62])
module @"/workspaces/juliet-c/testcases/CWE122_Heap_Based_Buffer_Overflow/s08/CWE122_Heap_Based_Buffer_Overflow__c_CWE805_int64_t_memmove_44.c" attributes {cir.lang = #cir.lang<c>, cir.sob = #cir.signed_overflow_behavior<undefined>, cir.triple = "x86_64-unknown-linux-gnu", cir.type_size_info = #cir.type_size_info<char = 8, int = 32, size_t = 64>, cir.uwtable = #cir.uwtable<async>, dlti.dl_spec = #dlti.dl_spec<i1 = dense<8> : vector<2xi64>, !llvm.ptr = dense<64> : vector<4xi64>, i16 = dense<16> : vector<2xi64>, !llvm.ptr<270> = dense<32> : vector<4xi64>, i8 = dense<8> : vector<2xi64>, i32 = dense<32> : vector<2xi64>, f128 = dense<128> : vector<2xi64>, f64 = dense<64> : vector<2xi64>, f16 = dense<16> : vector<2xi64>, !llvm.ptr<272> = dense<64> : vector<4xi64>, !llvm.ptr<271> = dense<32> : vector<4xi64>, i64 = dense<64> : vector<2xi64>, i128 = dense<128> : vector<2xi64>, f80 = dense<128> : vector<2xi64>, "dlti.mangling_mode" = "e", "dlti.endianness" = "little", "dlti.stack_alignment" = 128 : i64>} {
  cir.func private @printLongLongLine(!s64i) loc(#loc105)
  cir.func private @free(!cir.ptr<!void>) extra(#fn_attr) loc(#loc106)
  cir.func internal private @badSink(%arg0: !cir.ptr<!s64i> loc(fused[#loc7, #loc8])) extra(#fn_attr1) {
    %0 = cir.alloca !cir.ptr<!s64i>, !cir.ptr<!cir.ptr<!s64i>>, ["data", init] {alignment = 8 : i64} loc(#loc108)
    cir.store %arg0, %0 : !cir.ptr<!s64i>, !cir.ptr<!cir.ptr<!s64i>> loc(#loc9)
    cir.scope {
      %1 = cir.alloca !cir.array<!s64i x 100>, !cir.ptr<!cir.array<!s64i x 100>>, ["source"] {alignment = 16 : i64} loc(#loc110)
      %2 = cir.const #cir.zero : !cir.array<!s64i x 100> loc(#loc110)
      cir.store %2, %1 : !cir.array<!s64i x 100>, !cir.ptr<!cir.array<!s64i x 100>> loc(#loc110)
      %3 = cir.load %0 : !cir.ptr<!cir.ptr<!s64i>>, !cir.ptr<!s64i> loc(#loc14)
      %4 = cir.cast(bitcast, %3 : !cir.ptr<!s64i>), !cir.ptr<!void> loc(#loc14)
      %5 = cir.cast(array_to_ptrdecay, %1 : !cir.ptr<!cir.array<!s64i x 100>>), !cir.ptr<!s64i> loc(#loc15)
      %6 = cir.cast(bitcast, %5 : !cir.ptr<!s64i>), !cir.ptr<!void> loc(#loc15)
      %7 = cir.const #cir.int<100> : !s32i loc(#loc16)
      %8 = cir.cast(integral, %7 : !s32i), !u64i loc(#loc16)
      %9 = cir.const #cir.int<8> : !u64i loc(#loc111)
      %10 = cir.binop(mul, %8, %9) : !u64i loc(#loc112)
      cir.libc.memmove %10 bytes from %6 to %4 : !cir.ptr<!void>, !u64i loc(#loc113)
      %11 = cir.load %0 : !cir.ptr<!cir.ptr<!s64i>>, !cir.ptr<!s64i> loc(#loc21)
      %12 = cir.const #cir.int<0> : !s32i loc(#loc22)
      %13 = cir.ptr_stride(%11 : !cir.ptr<!s64i>, %12 : !s32i), !cir.ptr<!s64i> loc(#loc23)
      %14 = cir.load %13 : !cir.ptr<!s64i>, !s64i loc(#loc21)
      cir.call @printLongLongLine(%14) : (!s64i) -> () loc(#loc24)
      %15 = cir.get_global @free : !cir.ptr<!cir.func<(!cir.ptr<!void>)>> loc(#loc25)
      %16 = cir.load %0 : !cir.ptr<!cir.ptr<!s64i>>, !cir.ptr<!s64i> loc(#loc26)
      %17 = cir.cast(bitcast, %16 : !cir.ptr<!s64i>), !cir.ptr<!void> loc(#loc26)
      cir.call @free(%17) : (!cir.ptr<!void>) -> () extra(#fn_attr) loc(#loc25)
    } loc(#loc109)
    cir.return loc(#loc6)
  } loc(#loc107)
  cir.func private @malloc(!u64i) -> !cir.ptr<!void> extra(#fn_attr) loc(#loc114)
  cir.func private @exit(!s32i) extra(#fn_attr) loc(#loc115)
  cir.func no_proto @CWE122_Heap_Based_Buffer_Overflow__c_CWE805_int64_t_memmove_44_bad() extra(#fn_attr1) {
    %0 = cir.alloca !cir.ptr<!s64i>, !cir.ptr<!cir.ptr<!s64i>>, ["data"] {alignment = 8 : i64} loc(#loc117)
    %1 = cir.alloca !cir.ptr<!cir.func<(!cir.ptr<!s64i>)>>, !cir.ptr<!cir.ptr<!cir.func<(!cir.ptr<!s64i>)>>>, ["funcPtr", init] {alignment = 8 : i64} loc(#loc118)
    %2 = cir.get_global @badSink : !cir.ptr<!cir.func<(!cir.ptr<!s64i>)>> loc(#loc36)
    cir.store %2, %1 : !cir.ptr<!cir.func<(!cir.ptr<!s64i>)>>, !cir.ptr<!cir.ptr<!cir.func<(!cir.ptr<!s64i>)>>> loc(#loc118)
    %3 = cir.const #cir.ptr<null> : !cir.ptr<!s64i> loc(#loc37)
    cir.store %3, %0 : !cir.ptr<!s64i>, !cir.ptr<!cir.ptr<!s64i>> loc(#loc119)
    %4 = cir.get_global @malloc : !cir.ptr<!cir.func<(!u64i) -> !cir.ptr<!void>>> loc(#loc39)
    %5 = cir.const #cir.int<50> : !s32i loc(#loc40)
    %6 = cir.cast(integral, %5 : !s32i), !u64i loc(#loc40)
    %7 = cir.const #cir.int<8> : !u64i loc(#loc120)
    %8 = cir.binop(mul, %6, %7) : !u64i loc(#loc121)
    %9 = cir.call @malloc(%8) : (!u64i) -> !cir.ptr<!void> extra(#fn_attr) loc(#loc39)
    %10 = cir.cast(bitcast, %9 : !cir.ptr<!void>), !cir.ptr<!s64i> loc(#loc122)
    cir.store %10, %0 : !cir.ptr<!s64i>, !cir.ptr<!cir.ptr<!s64i>> loc(#loc123)
    cir.scope {
      %13 = cir.load %0 : !cir.ptr<!cir.ptr<!s64i>>, !cir.ptr<!s64i> loc(#loc47)
      %14 = cir.const #cir.ptr<null> : !cir.ptr<!void> loc(#loc48)
      %15 = cir.cast(bitcast, %14 : !cir.ptr<!void>), !cir.ptr<!s64i> loc(#loc48)
      %16 = cir.cmp(eq, %13, %15) : !cir.ptr<!s64i>, !cir.bool loc(#loc125)
      cir.if %16 {
        %17 = cir.get_global @exit : !cir.ptr<!cir.func<(!s32i)>> loc(#loc50)
        %18 = cir.const #cir.int<1> : !s32i loc(#loc51)
        %19 = cir.unary(minus, %18) nsw : !s32i, !s32i loc(#loc52)
        cir.call @exit(%19) : (!s32i) -> () extra(#fn_attr) loc(#loc50)
      } loc(#loc126)
    } loc(#loc124)
    %11 = cir.load %1 : !cir.ptr<!cir.ptr<!cir.func<(!cir.ptr<!s64i>)>>>, !cir.ptr<!cir.func<(!cir.ptr<!s64i>)>> loc(#loc53)
    %12 = cir.load %0 : !cir.ptr<!cir.ptr<!s64i>>, !cir.ptr<!s64i> loc(#loc54)
    cir.call %11(%12) : (!cir.ptr<!cir.func<(!cir.ptr<!s64i>)>>, !cir.ptr<!s64i>) -> () loc(#loc53)
    cir.return loc(#loc32)
  } loc(#loc116)
  cir.func no_proto @CWE122_Heap_Based_Buffer_Overflow__c_CWE805_int64_t_memmove_44_good() extra(#fn_attr1) {
    %0 = cir.get_global @goodG2B : !cir.ptr<!cir.func<()>> loc(#loc128)
    cir.call %0() : (!cir.ptr<!cir.func<()>>) -> () loc(#loc57)
    cir.return loc(#loc56)
  } loc(#loc127)
  cir.func internal private @goodG2BSink(%arg0: !cir.ptr<!s64i> loc(fused[#loc61, #loc62])) extra(#fn_attr1) {
    %0 = cir.alloca !cir.ptr<!s64i>, !cir.ptr<!cir.ptr<!s64i>>, ["data", init] {alignment = 8 : i64} loc(#loc130)
    cir.store %arg0, %0 : !cir.ptr<!s64i>, !cir.ptr<!cir.ptr<!s64i>> loc(#loc63)
    cir.scope {
      %1 = cir.alloca !cir.array<!s64i x 100>, !cir.ptr<!cir.array<!s64i x 100>>, ["source"] {alignment = 16 : i64} loc(#loc132)
      %2 = cir.const #cir.zero : !cir.array<!s64i x 100> loc(#loc132)
      cir.store %2, %1 : !cir.array<!s64i x 100>, !cir.ptr<!cir.array<!s64i x 100>> loc(#loc132)
      %3 = cir.load %0 : !cir.ptr<!cir.ptr<!s64i>>, !cir.ptr<!s64i> loc(#loc68)
      %4 = cir.cast(bitcast, %3 : !cir.ptr<!s64i>), !cir.ptr<!void> loc(#loc68)
      %5 = cir.cast(array_to_ptrdecay, %1 : !cir.ptr<!cir.array<!s64i x 100>>), !cir.ptr<!s64i> loc(#loc69)
      %6 = cir.cast(bitcast, %5 : !cir.ptr<!s64i>), !cir.ptr<!void> loc(#loc69)
      %7 = cir.const #cir.int<100> : !s32i loc(#loc70)
      %8 = cir.cast(integral, %7 : !s32i), !u64i loc(#loc70)
      %9 = cir.const #cir.int<8> : !u64i loc(#loc133)
      %10 = cir.binop(mul, %8, %9) : !u64i loc(#loc134)
      cir.libc.memmove %10 bytes from %6 to %4 : !cir.ptr<!void>, !u64i loc(#loc135)
      %11 = cir.load %0 : !cir.ptr<!cir.ptr<!s64i>>, !cir.ptr<!s64i> loc(#loc75)
      %12 = cir.const #cir.int<0> : !s32i loc(#loc76)
      %13 = cir.ptr_stride(%11 : !cir.ptr<!s64i>, %12 : !s32i), !cir.ptr<!s64i> loc(#loc77)
      %14 = cir.load %13 : !cir.ptr<!s64i>, !s64i loc(#loc75)
      cir.call @printLongLongLine(%14) : (!s64i) -> () loc(#loc78)
      %15 = cir.get_global @free : !cir.ptr<!cir.func<(!cir.ptr<!void>)>> loc(#loc79)
      %16 = cir.load %0 : !cir.ptr<!cir.ptr<!s64i>>, !cir.ptr<!s64i> loc(#loc80)
      %17 = cir.cast(bitcast, %16 : !cir.ptr<!s64i>), !cir.ptr<!void> loc(#loc80)
      cir.call @free(%17) : (!cir.ptr<!void>) -> () extra(#fn_attr) loc(#loc79)
    } loc(#loc131)
    cir.return loc(#loc60)
  } loc(#loc129)
  cir.func no_proto internal private @goodG2B() extra(#fn_attr1) {
    %0 = cir.alloca !cir.ptr<!s64i>, !cir.ptr<!cir.ptr<!s64i>>, ["data"] {alignment = 8 : i64} loc(#loc137)
    %1 = cir.alloca !cir.ptr<!cir.func<(!cir.ptr<!s64i>)>>, !cir.ptr<!cir.ptr<!cir.func<(!cir.ptr<!s64i>)>>>, ["funcPtr", init] {alignment = 8 : i64} loc(#loc138)
    %2 = cir.get_global @goodG2BSink : !cir.ptr<!cir.func<(!cir.ptr<!s64i>)>> loc(#loc86)
    cir.store %2, %1 : !cir.ptr<!cir.func<(!cir.ptr<!s64i>)>>, !cir.ptr<!cir.ptr<!cir.func<(!cir.ptr<!s64i>)>>> loc(#loc138)
    %3 = cir.const #cir.ptr<null> : !cir.ptr<!s64i> loc(#loc87)
    cir.store %3, %0 : !cir.ptr<!s64i>, !cir.ptr<!cir.ptr<!s64i>> loc(#loc139)
    %4 = cir.get_global @malloc : !cir.ptr<!cir.func<(!u64i) -> !cir.ptr<!void>>> loc(#loc89)
    %5 = cir.const #cir.int<100> : !s32i loc(#loc90)
    %6 = cir.cast(integral, %5 : !s32i), !u64i loc(#loc90)
    %7 = cir.const #cir.int<8> : !u64i loc(#loc140)
    %8 = cir.binop(mul, %6, %7) : !u64i loc(#loc141)
    %9 = cir.call @malloc(%8) : (!u64i) -> !cir.ptr<!void> extra(#fn_attr) loc(#loc89)
    %10 = cir.cast(bitcast, %9 : !cir.ptr<!void>), !cir.ptr<!s64i> loc(#loc142)
    cir.store %10, %0 : !cir.ptr<!s64i>, !cir.ptr<!cir.ptr<!s64i>> loc(#loc143)
    cir.scope {
      %13 = cir.load %0 : !cir.ptr<!cir.ptr<!s64i>>, !cir.ptr<!s64i> loc(#loc97)
      %14 = cir.const #cir.ptr<null> : !cir.ptr<!void> loc(#loc98)
      %15 = cir.cast(bitcast, %14 : !cir.ptr<!void>), !cir.ptr<!s64i> loc(#loc98)
      %16 = cir.cmp(eq, %13, %15) : !cir.ptr<!s64i>, !cir.bool loc(#loc145)
      cir.if %16 {
        %17 = cir.get_global @exit : !cir.ptr<!cir.func<(!s32i)>> loc(#loc100)
        %18 = cir.const #cir.int<1> : !s32i loc(#loc101)
        %19 = cir.unary(minus, %18) nsw : !s32i, !s32i loc(#loc102)
        cir.call @exit(%19) : (!s32i) -> () extra(#fn_attr) loc(#loc100)
      } loc(#loc146)
    } loc(#loc144)
    %11 = cir.load %1 : !cir.ptr<!cir.ptr<!cir.func<(!cir.ptr<!s64i>)>>>, !cir.ptr<!cir.func<(!cir.ptr<!s64i>)>> loc(#loc103)
    %12 = cir.load %0 : !cir.ptr<!cir.ptr<!s64i>>, !cir.ptr<!s64i> loc(#loc104)
    cir.call %11(%12) : (!cir.ptr<!cir.func<(!cir.ptr<!s64i>)>>, !cir.ptr<!s64i>) -> () loc(#loc103)
    cir.return loc(#loc82)
  } loc(#loc136)
} loc(#loc)
#loc = loc("/workspaces/juliet-c/testcases/CWE122_Heap_Based_Buffer_Overflow/s08/CWE122_Heap_Based_Buffer_Overflow__c_CWE805_int64_t_memmove_44.c":0:0)
#loc1 = loc("../../../testcasesupport/std_testcase_io.h":26:1)
#loc2 = loc("../../../testcasesupport/std_testcase_io.h":26:49)
#loc3 = loc("/usr/include/stdlib.h":687:1)
#loc4 = loc("/usr/include/stdlib.h":687:32)
#loc5 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_int64_t_memmove_44.c":21:1)
#loc6 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_int64_t_memmove_44.c":30:1)
#loc9 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_int64_t_memmove_44.c":22:1)
#loc10 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_int64_t_memmove_44.c":23:5)
#loc11 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_int64_t_memmove_44.c":29:5)
#loc12 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_int64_t_memmove_44.c":24:9)
#loc13 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_int64_t_memmove_44.c":24:33)
#loc14 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_int64_t_memmove_44.c":26:17)
#loc15 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_int64_t_memmove_44.c":26:23)
#loc16 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_int64_t_memmove_44.c":26:31)
#loc17 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_int64_t_memmove_44.c":26:35)
#loc18 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_int64_t_memmove_44.c":26:49)
#loc19 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_int64_t_memmove_44.c":26:9)
#loc20 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_int64_t_memmove_44.c":26:50)
#loc21 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_int64_t_memmove_44.c":27:27)
#loc22 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_int64_t_memmove_44.c":27:32)
#loc23 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_int64_t_memmove_44.c":27:33)
#loc24 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_int64_t_memmove_44.c":27:9)
#loc25 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_int64_t_memmove_44.c":28:9)
#loc26 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_int64_t_memmove_44.c":28:14)
#loc27 = loc("/usr/include/stdlib.h":672:1)
#loc28 = loc("/usr/include/stdlib.h":672:45)
#loc29 = loc("/usr/include/stdlib.h":756:1)
#loc30 = loc("/usr/include/stdlib.h":756:70)
#loc31 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_int64_t_memmove_44.c":32:1)
#loc32 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_int64_t_memmove_44.c":43:1)
#loc33 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_int64_t_memmove_44.c":34:5)
#loc34 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_int64_t_memmove_44.c":34:15)
#loc35 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_int64_t_memmove_44.c":36:5)
#loc36 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_int64_t_memmove_44.c":36:35)
#loc37 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_int64_t_memmove_44.c":37:12)
#loc38 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_int64_t_memmove_44.c":37:5)
#loc39 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_int64_t_memmove_44.c":39:23)
#loc40 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_int64_t_memmove_44.c":39:30)
#loc41 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_int64_t_memmove_44.c":39:33)
#loc42 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_int64_t_memmove_44.c":39:47)
#loc43 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_int64_t_memmove_44.c":39:48)
#loc44 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_int64_t_memmove_44.c":39:5)
#loc45 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_int64_t_memmove_44.c":40:5)
#loc46 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_int64_t_memmove_44.c":40:33)
#loc47 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_int64_t_memmove_44.c":40:9)
#loc48 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_int64_t_memmove_44.c":40:17)
#loc49 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_int64_t_memmove_44.c":40:23)
#loc50 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_int64_t_memmove_44.c":40:24)
#loc51 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_int64_t_memmove_44.c":40:30)
#loc52 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_int64_t_memmove_44.c":40:29)
#loc53 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_int64_t_memmove_44.c":42:5)
#loc54 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_int64_t_memmove_44.c":42:13)
#loc55 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_int64_t_memmove_44.c":72:1)
#loc56 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_int64_t_memmove_44.c":75:1)
#loc57 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_int64_t_memmove_44.c":74:5)
#loc58 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_int64_t_memmove_44.c":74:13)
#loc59 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_int64_t_memmove_44.c":50:1)
#loc60 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_int64_t_memmove_44.c":59:1)
#loc63 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_int64_t_memmove_44.c":51:1)
#loc64 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_int64_t_memmove_44.c":52:5)
#loc65 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_int64_t_memmove_44.c":58:5)
#loc66 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_int64_t_memmove_44.c":53:9)
#loc67 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_int64_t_memmove_44.c":53:33)
#loc68 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_int64_t_memmove_44.c":55:17)
#loc69 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_int64_t_memmove_44.c":55:23)
#loc70 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_int64_t_memmove_44.c":55:31)
#loc71 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_int64_t_memmove_44.c":55:35)
#loc72 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_int64_t_memmove_44.c":55:49)
#loc73 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_int64_t_memmove_44.c":55:9)
#loc74 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_int64_t_memmove_44.c":55:50)
#loc75 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_int64_t_memmove_44.c":56:27)
#loc76 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_int64_t_memmove_44.c":56:32)
#loc77 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_int64_t_memmove_44.c":56:33)
#loc78 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_int64_t_memmove_44.c":56:9)
#loc79 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_int64_t_memmove_44.c":57:9)
#loc80 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_int64_t_memmove_44.c":57:14)
#loc81 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_int64_t_memmove_44.c":61:1)
#loc82 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_int64_t_memmove_44.c":70:1)
#loc83 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_int64_t_memmove_44.c":63:5)
#loc84 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_int64_t_memmove_44.c":63:15)
#loc85 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_int64_t_memmove_44.c":64:5)
#loc86 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_int64_t_memmove_44.c":64:35)
#loc87 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_int64_t_memmove_44.c":65:12)
#loc88 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_int64_t_memmove_44.c":65:5)
#loc89 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_int64_t_memmove_44.c":67:23)
#loc90 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_int64_t_memmove_44.c":67:30)
#loc91 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_int64_t_memmove_44.c":67:34)
#loc92 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_int64_t_memmove_44.c":67:48)
#loc93 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_int64_t_memmove_44.c":67:49)
#loc94 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_int64_t_memmove_44.c":67:5)
#loc95 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_int64_t_memmove_44.c":68:5)
#loc96 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_int64_t_memmove_44.c":68:33)
#loc97 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_int64_t_memmove_44.c":68:9)
#loc98 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_int64_t_memmove_44.c":68:17)
#loc99 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_int64_t_memmove_44.c":68:23)
#loc100 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_int64_t_memmove_44.c":68:24)
#loc101 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_int64_t_memmove_44.c":68:30)
#loc102 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_int64_t_memmove_44.c":68:29)
#loc103 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_int64_t_memmove_44.c":69:5)
#loc104 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_int64_t_memmove_44.c":69:13)
#loc105 = loc(fused[#loc1, #loc2])
#loc106 = loc(fused[#loc3, #loc4])
#loc107 = loc(fused[#loc5, #loc6])
#loc109 = loc(fused[#loc10, #loc11])
#loc110 = loc(fused[#loc12, #loc13])
#loc111 = loc(fused[#loc17, #loc18])
#loc112 = loc(fused[#loc16, #loc18])
#loc113 = loc(fused[#loc19, #loc20])
#loc114 = loc(fused[#loc27, #loc28])
#loc115 = loc(fused[#loc29, #loc30])
#loc116 = loc(fused[#loc31, #loc32])
#loc117 = loc(fused[#loc33, #loc34])
#loc118 = loc(fused[#loc35, #loc36])
#loc119 = loc(fused[#loc38, #loc37])
#loc120 = loc(fused[#loc41, #loc42])
#loc121 = loc(fused[#loc40, #loc42])
#loc122 = loc(fused[#loc39, #loc43])
#loc123 = loc(fused[#loc44, #loc43])
#loc124 = loc(fused[#loc45, #loc46])
#loc125 = loc(fused[#loc47, #loc48])
#loc126 = loc(fused[#loc49, #loc46])
#loc127 = loc(fused[#loc55, #loc56])
#loc128 = loc(fused[#loc57, #loc58])
#loc129 = loc(fused[#loc59, #loc60])
#loc131 = loc(fused[#loc64, #loc65])
#loc132 = loc(fused[#loc66, #loc67])
#loc133 = loc(fused[#loc71, #loc72])
#loc134 = loc(fused[#loc70, #loc72])
#loc135 = loc(fused[#loc73, #loc74])
#loc136 = loc(fused[#loc81, #loc82])
#loc137 = loc(fused[#loc83, #loc84])
#loc138 = loc(fused[#loc85, #loc86])
#loc139 = loc(fused[#loc88, #loc87])
#loc140 = loc(fused[#loc91, #loc92])
#loc141 = loc(fused[#loc90, #loc92])
#loc142 = loc(fused[#loc89, #loc93])
#loc143 = loc(fused[#loc94, #loc93])
#loc144 = loc(fused[#loc95, #loc96])
#loc145 = loc(fused[#loc97, #loc98])
#loc146 = loc(fused[#loc99, #loc96])
