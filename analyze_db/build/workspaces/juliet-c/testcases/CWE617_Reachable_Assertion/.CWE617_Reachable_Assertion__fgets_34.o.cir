!s32i = !cir.int<s, 32>
!s64i = !cir.int<s, 64>
!s8i = !cir.int<s, 8>
!ty__IO_codecvt = !cir.record<struct "_IO_codecvt" incomplete>
!ty__IO_marker = !cir.record<struct "_IO_marker" incomplete>
!ty__IO_wide_data = !cir.record<struct "_IO_wide_data" incomplete>
!u16i = !cir.int<u, 16>
!u32i = !cir.int<u, 32>
!u64i = !cir.int<u, 64>
!void = !cir.void
#fn_attr = #cir<extra({nothrow = #cir.nothrow})>
#fn_attr1 = #cir<extra({inline = #cir.inline<no>, nothrow = #cir.nothrow, optnone = #cir.optnone, uwtable = #cir.uwtable<async>})>
!ty_CWE617_Reachable_Assertion__fgets_34_unionType = !cir.record<union "CWE617_Reachable_Assertion__fgets_34_unionType" {!s32i, !s32i}>
!ty__IO_FILE = !cir.record<struct "_IO_FILE" {!s32i, !cir.ptr<!s8i>, !cir.ptr<!s8i>, !cir.ptr<!s8i>, !cir.ptr<!s8i>, !cir.ptr<!s8i>, !cir.ptr<!s8i>, !cir.ptr<!s8i>, !cir.ptr<!s8i>, !cir.ptr<!s8i>, !cir.ptr<!s8i>, !cir.ptr<!s8i>, !cir.ptr<!ty__IO_marker>, !cir.ptr<!cir.record<struct "_IO_FILE">>, !s32i, !s32i, !s64i, !u16i, !s8i, !cir.array<!s8i x 1>, !cir.ptr<!void>, !s64i, !cir.ptr<!ty__IO_codecvt>, !cir.ptr<!ty__IO_wide_data>, !cir.ptr<!cir.record<struct "_IO_FILE">>, !cir.ptr<!void>, !u64i, !s32i, !cir.array<!s8i x 20>} #cir.record.decl.ast>
module @"/workspaces/juliet-c/testcases/CWE617_Reachable_Assertion/CWE617_Reachable_Assertion__fgets_34.c" attributes {cir.lang = #cir.lang<c>, cir.sob = #cir.signed_overflow_behavior<undefined>, cir.triple = "x86_64-unknown-linux-gnu", cir.type_size_info = #cir.type_size_info<char = 8, int = 32, size_t = 64>, cir.uwtable = #cir.uwtable<async>, dlti.dl_spec = #dlti.dl_spec<f128 = dense<128> : vector<2xi64>, !llvm.ptr<271> = dense<32> : vector<4xi64>, !llvm.ptr<270> = dense<32> : vector<4xi64>, f16 = dense<16> : vector<2xi64>, f64 = dense<64> : vector<2xi64>, i128 = dense<128> : vector<2xi64>, !llvm.ptr<272> = dense<64> : vector<4xi64>, i64 = dense<64> : vector<2xi64>, !llvm.ptr = dense<64> : vector<4xi64>, i1 = dense<8> : vector<2xi64>, f80 = dense<128> : vector<2xi64>, i32 = dense<32> : vector<2xi64>, i8 = dense<8> : vector<2xi64>, i16 = dense<16> : vector<2xi64>, "dlti.mangling_mode" = "e", "dlti.stack_alignment" = 128 : i64, "dlti.endianness" = "little">} {
  cir.func private @fgets(!cir.ptr<!s8i>, !s32i, !cir.ptr<!ty__IO_FILE>) -> !cir.ptr<!s8i> loc(#loc72)
  cir.global "private" external @stdin : !cir.ptr<!ty__IO_FILE> {alignment = 8 : i64} loc(#loc73)
  cir.func private @atoi(!cir.ptr<!s8i>) -> !s32i extra(#fn_attr) loc(#loc74)
  cir.func private @printLine(!cir.ptr<!s8i>) loc(#loc75)
  cir.global "private" constant cir_private dsolocal @".str" = #cir.const_array<"fgets() failed.\00" : !cir.array<!s8i x 16>> : !cir.array<!s8i x 16> {alignment = 1 : i64} loc(#loc9)
  cir.func private @__assert_fail(!cir.ptr<!s8i>, !cir.ptr<!s8i>, !u32i, !cir.ptr<!s8i>) extra(#fn_attr) loc(#loc76)
  cir.global "private" constant cir_private dsolocal @".str.1" = #cir.const_array<"data > ASSERT_VALUE\00" : !cir.array<!s8i x 20>> : !cir.array<!s8i x 20> {alignment = 1 : i64} loc(#loc12)
  cir.global "private" constant cir_private dsolocal @".str.2" = #cir.const_array<"CWE617_Reachable_Assertion__fgets_34.c\00" : !cir.array<!s8i x 39>> : !cir.array<!s8i x 39> {alignment = 1 : i64} loc(#loc12)
  cir.global "private" constant cir_private dsolocal @".str.3" = #cir.const_array<"void CWE617_Reachable_Assertion__fgets_34_bad()\00" : !cir.array<!s8i x 48>> : !cir.array<!s8i x 48> {alignment = 1 : i64} loc(#loc12)
  cir.func no_proto @CWE617_Reachable_Assertion__fgets_34_bad() extra(#fn_attr1) {
    %0 = cir.alloca !s32i, !cir.ptr<!s32i>, ["data"] {alignment = 4 : i64} loc(#loc78)
    %1 = cir.alloca !ty_CWE617_Reachable_Assertion__fgets_34_unionType, !cir.ptr<!ty_CWE617_Reachable_Assertion__fgets_34_unionType>, ["myUnion"] {alignment = 4 : i64} loc(#loc79)
    %2 = cir.const #cir.int<1> : !s32i loc(#loc19)
    %3 = cir.unary(minus, %2) nsw : !s32i, !s32i loc(#loc20)
    cir.store %3, %0 : !s32i, !cir.ptr<!s32i> loc(#loc80)
    cir.scope {
      %6 = cir.alloca !cir.array<!s8i x 14>, !cir.ptr<!cir.array<!s8i x 14>>, ["inputBuffer"] {alignment = 1 : i64} loc(#loc82)
      %7 = cir.const #cir.zero : !cir.array<!s8i x 14> loc(#loc82)
      cir.store %7, %6 : !cir.array<!s8i x 14>, !cir.ptr<!cir.array<!s8i x 14>> loc(#loc82)
      cir.scope {
        %8 = cir.cast(array_to_ptrdecay, %6 : !cir.ptr<!cir.array<!s8i x 14>>), !cir.ptr<!s8i> loc(#loc28)
        %9 = cir.const #cir.int<3> : !s32i loc(#loc29)
        %10 = cir.cast(integral, %9 : !s32i), !u64i loc(#loc29)
        %11 = cir.const #cir.int<4> : !u64i loc(#loc29)
        %12 = cir.binop(mul, %10, %11) : !u64i loc(#loc29)
        %13 = cir.const #cir.int<2> : !s32i loc(#loc29)
        %14 = cir.cast(integral, %13 : !s32i), !u64i loc(#loc29)
        %15 = cir.binop(add, %12, %14) : !u64i loc(#loc29)
        %16 = cir.cast(integral, %15 : !u64i), !s32i loc(#loc29)
        %17 = cir.get_global @stdin : !cir.ptr<!cir.ptr<!ty__IO_FILE>> loc(#loc73)
        %18 = cir.load %17 : !cir.ptr<!cir.ptr<!ty__IO_FILE>>, !cir.ptr<!ty__IO_FILE> loc(#loc30)
        %19 = cir.call @fgets(%8, %16, %18) : (!cir.ptr<!s8i>, !s32i, !cir.ptr<!ty__IO_FILE>) -> !cir.ptr<!s8i> loc(#loc31)
        %20 = cir.const #cir.ptr<null> : !cir.ptr<!void> loc(#loc32)
        %21 = cir.cast(bitcast, %20 : !cir.ptr<!void>), !cir.ptr<!s8i> loc(#loc32)
        %22 = cir.cmp(ne, %19, %21) : !cir.ptr<!s8i>, !cir.bool loc(#loc84)
        cir.if %22 {
          %23 = cir.cast(array_to_ptrdecay, %6 : !cir.ptr<!cir.array<!s8i x 14>>), !cir.ptr<!s8i> loc(#loc36)
          %24 = cir.call @atoi(%23) : (!cir.ptr<!s8i>) -> !s32i side_effect(pure) extra(#fn_attr) loc(#loc37)
          cir.store %24, %0 : !s32i, !cir.ptr<!s32i> loc(#loc86)
        } else {
          %23 = cir.get_global @".str" : !cir.ptr<!cir.array<!s8i x 16>> loc(#loc9)
          %24 = cir.cast(array_to_ptrdecay, %23 : !cir.ptr<!cir.array<!s8i x 16>>), !cir.ptr<!s8i> loc(#loc9)
          cir.call @printLine(%24) : (!cir.ptr<!s8i>) -> () loc(#loc40)
        } loc(#loc85)
      } loc(#loc83)
    } loc(#loc81)
    %4 = cir.load %0 : !cir.ptr<!s32i>, !s32i loc(#loc41)
    %5 = cir.get_member %1[0] {name = "unionFirst"} : !cir.ptr<!ty_CWE617_Reachable_Assertion__fgets_34_unionType> -> !cir.ptr<!s32i> loc(#loc42)
    cir.store %4, %5 : !s32i, !cir.ptr<!s32i> loc(#loc87)
    cir.scope {
      %6 = cir.alloca !s32i, !cir.ptr<!s32i>, ["data", init] {alignment = 4 : i64} loc(#loc89)
      %7 = cir.get_member %1[1] {name = "unionSecond"} : !cir.ptr<!ty_CWE617_Reachable_Assertion__fgets_34_unionType> -> !cir.ptr<!s32i> loc(#loc48)
      %8 = cir.load %7 : !cir.ptr<!s32i>, !s32i loc(#loc47)
      cir.store %8, %6 : !s32i, !cir.ptr<!s32i> loc(#loc89)
      %9 = cir.const #cir.int<4> : !u64i loc(#loc12)
      cir.scope {
        cir.scope {
          %10 = cir.load %6 : !cir.ptr<!s32i>, !s32i loc(#loc12)
          %11 = cir.const #cir.int<5> : !s32i loc(#loc12)
          %12 = cir.cmp(gt, %10, %11) : !s32i, !cir.bool loc(#loc12)
          cir.if %12 {
          } else {
            %13 = cir.get_global @".str.1" : !cir.ptr<!cir.array<!s8i x 20>> loc(#loc12)
            %14 = cir.cast(array_to_ptrdecay, %13 : !cir.ptr<!cir.array<!s8i x 20>>), !cir.ptr<!s8i> loc(#loc12)
            %15 = cir.get_global @".str.2" : !cir.ptr<!cir.array<!s8i x 39>> loc(#loc12)
            %16 = cir.cast(array_to_ptrdecay, %15 : !cir.ptr<!cir.array<!s8i x 39>>), !cir.ptr<!s8i> loc(#loc12)
            %17 = cir.const #cir.int<56> : !s32i loc(#loc12)
            %18 = cir.cast(integral, %17 : !s32i), !u32i loc(#loc12)
            %19 = cir.get_global @".str.3" : !cir.ptr<!cir.array<!s8i x 48>> loc(#loc12)
            %20 = cir.cast(array_to_ptrdecay, %19 : !cir.ptr<!cir.array<!s8i x 48>>), !cir.ptr<!s8i> loc(#loc12)
            cir.call @__assert_fail(%14, %16, %18, %20) : (!cir.ptr<!s8i>, !cir.ptr<!s8i>, !u32i, !cir.ptr<!s8i>) -> () extra(#fn_attr) loc(#loc12)
          } loc(#loc12)
        } loc(#loc12)
      } loc(#loc12)
    } loc(#loc88)
    cir.return loc(#loc14)
  } loc(#loc77)
  cir.func no_proto @CWE617_Reachable_Assertion__fgets_34_good() extra(#fn_attr1) {
    %0 = cir.get_global @goodG2B : !cir.ptr<!cir.func<()>> loc(#loc91)
    cir.call %0() : (!cir.ptr<!cir.func<()>>) -> () loc(#loc51)
    cir.return loc(#loc50)
  } loc(#loc90)
  cir.global "private" constant cir_private dsolocal @".str.4" = #cir.const_array<"void goodG2B()\00" : !cir.array<!s8i x 15>> : !cir.array<!s8i x 15> {alignment = 1 : i64} loc(#loc53)
  cir.func no_proto internal private @goodG2B() extra(#fn_attr1) {
    %0 = cir.alloca !s32i, !cir.ptr<!s32i>, ["data"] {alignment = 4 : i64} loc(#loc93)
    %1 = cir.alloca !ty_CWE617_Reachable_Assertion__fgets_34_unionType, !cir.ptr<!ty_CWE617_Reachable_Assertion__fgets_34_unionType>, ["myUnion"] {alignment = 4 : i64} loc(#loc94)
    %2 = cir.const #cir.int<1> : !s32i loc(#loc60)
    %3 = cir.unary(minus, %2) nsw : !s32i, !s32i loc(#loc61)
    cir.store %3, %0 : !s32i, !cir.ptr<!s32i> loc(#loc95)
    %4 = cir.const #cir.int<5> : !s32i loc(#loc63)
    %5 = cir.const #cir.int<1> : !s32i loc(#loc64)
    %6 = cir.binop(add, %4, %5) nsw : !s32i loc(#loc63)
    cir.store %6, %0 : !s32i, !cir.ptr<!s32i> loc(#loc96)
    %7 = cir.load %0 : !cir.ptr<!s32i>, !s32i loc(#loc66)
    %8 = cir.get_member %1[0] {name = "unionFirst"} : !cir.ptr<!ty_CWE617_Reachable_Assertion__fgets_34_unionType> -> !cir.ptr<!s32i> loc(#loc42)
    cir.store %7, %8 : !s32i, !cir.ptr<!s32i> loc(#loc97)
    cir.scope {
      %9 = cir.alloca !s32i, !cir.ptr<!s32i>, ["data", init] {alignment = 4 : i64} loc(#loc99)
      %10 = cir.get_member %1[1] {name = "unionSecond"} : !cir.ptr<!ty_CWE617_Reachable_Assertion__fgets_34_unionType> -> !cir.ptr<!s32i> loc(#loc48)
      %11 = cir.load %10 : !cir.ptr<!s32i>, !s32i loc(#loc71)
      cir.store %11, %9 : !s32i, !cir.ptr<!s32i> loc(#loc99)
      %12 = cir.const #cir.int<4> : !u64i loc(#loc53)
      cir.scope {
        cir.scope {
          %13 = cir.load %9 : !cir.ptr<!s32i>, !s32i loc(#loc53)
          %14 = cir.const #cir.int<5> : !s32i loc(#loc53)
          %15 = cir.cmp(gt, %13, %14) : !s32i, !cir.bool loc(#loc53)
          cir.if %15 {
          } else {
            %16 = cir.get_global @".str.1" : !cir.ptr<!cir.array<!s8i x 20>> loc(#loc53)
            %17 = cir.cast(array_to_ptrdecay, %16 : !cir.ptr<!cir.array<!s8i x 20>>), !cir.ptr<!s8i> loc(#loc53)
            %18 = cir.get_global @".str.2" : !cir.ptr<!cir.array<!s8i x 39>> loc(#loc53)
            %19 = cir.cast(array_to_ptrdecay, %18 : !cir.ptr<!cir.array<!s8i x 39>>), !cir.ptr<!s8i> loc(#loc53)
            %20 = cir.const #cir.int<77> : !s32i loc(#loc53)
            %21 = cir.cast(integral, %20 : !s32i), !u32i loc(#loc53)
            %22 = cir.get_global @".str.4" : !cir.ptr<!cir.array<!s8i x 15>> loc(#loc53)
            %23 = cir.cast(array_to_ptrdecay, %22 : !cir.ptr<!cir.array<!s8i x 15>>), !cir.ptr<!s8i> loc(#loc53)
            cir.call @__assert_fail(%17, %19, %21, %23) : (!cir.ptr<!s8i>, !cir.ptr<!s8i>, !u32i, !cir.ptr<!s8i>) -> () extra(#fn_attr) loc(#loc53)
          } loc(#loc53)
        } loc(#loc53)
      } loc(#loc53)
    } loc(#loc98)
    cir.return loc(#loc55)
  } loc(#loc92)
} loc(#loc)
#loc = loc("/workspaces/juliet-c/testcases/CWE617_Reachable_Assertion/CWE617_Reachable_Assertion__fgets_34.c":0:0)
#loc1 = loc("/usr/include/stdio.h":654:1)
#loc2 = loc("/usr/include/stdio.h":655:59)
#loc3 = loc("/usr/include/stdio.h":149:1)
#loc4 = loc("/usr/include/stdio.h":149:14)
#loc5 = loc("/usr/include/stdlib.h":105:1)
#loc6 = loc("/usr/include/stdlib.h":106:33)
#loc7 = loc("../../testcasesupport/std_testcase_io.h":14:1)
#loc8 = loc("../../testcasesupport/std_testcase_io.h":14:33)
#loc9 = loc("CWE617_Reachable_Assertion__fgets_34.c":49:23)
#loc10 = loc("/usr/include/assert.h":69:1)
#loc11 = loc("/usr/include/assert.h":71:43)
#loc12 = loc("CWE617_Reachable_Assertion__fgets_34.c":56:9)
#loc13 = loc("CWE617_Reachable_Assertion__fgets_34.c":33:1)
#loc14 = loc("CWE617_Reachable_Assertion__fgets_34.c":58:1)
#loc15 = loc("CWE617_Reachable_Assertion__fgets_34.c":35:5)
#loc16 = loc("CWE617_Reachable_Assertion__fgets_34.c":35:9)
#loc17 = loc("CWE617_Reachable_Assertion__fgets_34.c":36:5)
#loc18 = loc("CWE617_Reachable_Assertion__fgets_34.c":36:52)
#loc19 = loc("CWE617_Reachable_Assertion__fgets_34.c":38:13)
#loc20 = loc("CWE617_Reachable_Assertion__fgets_34.c":38:12)
#loc21 = loc("CWE617_Reachable_Assertion__fgets_34.c":38:5)
#loc22 = loc("CWE617_Reachable_Assertion__fgets_34.c":39:5)
#loc23 = loc("CWE617_Reachable_Assertion__fgets_34.c":51:5)
#loc24 = loc("CWE617_Reachable_Assertion__fgets_34.c":40:9)
#loc25 = loc("CWE617_Reachable_Assertion__fgets_34.c":40:45)
#loc26 = loc("CWE617_Reachable_Assertion__fgets_34.c":42:9)
#loc27 = loc("CWE617_Reachable_Assertion__fgets_34.c":50:9)
#loc28 = loc("CWE617_Reachable_Assertion__fgets_34.c":42:19)
#loc29 = loc("CWE617_Reachable_Assertion__fgets_34.c":42:32)
#loc30 = loc("CWE617_Reachable_Assertion__fgets_34.c":42:49)
#loc31 = loc("CWE617_Reachable_Assertion__fgets_34.c":42:13)
#loc32 = loc("CWE617_Reachable_Assertion__fgets_34.c":42:59)
#loc33 = loc("CWE617_Reachable_Assertion__fgets_34.c":43:9)
#loc34 = loc("CWE617_Reachable_Assertion__fgets_34.c":46:9)
#loc35 = loc("CWE617_Reachable_Assertion__fgets_34.c":48:9)
#loc36 = loc("CWE617_Reachable_Assertion__fgets_34.c":45:25)
#loc37 = loc("CWE617_Reachable_Assertion__fgets_34.c":45:20)
#loc38 = loc("CWE617_Reachable_Assertion__fgets_34.c":45:13)
#loc39 = loc("CWE617_Reachable_Assertion__fgets_34.c":45:36)
#loc40 = loc("CWE617_Reachable_Assertion__fgets_34.c":49:13)
#loc41 = loc("CWE617_Reachable_Assertion__fgets_34.c":52:26)
#loc42 = loc("CWE617_Reachable_Assertion__fgets_34.c":27:9)
#loc43 = loc("CWE617_Reachable_Assertion__fgets_34.c":52:5)
#loc44 = loc("CWE617_Reachable_Assertion__fgets_34.c":53:5)
#loc45 = loc("CWE617_Reachable_Assertion__fgets_34.c":57:5)
#loc46 = loc("CWE617_Reachable_Assertion__fgets_34.c":54:9)
#loc47 = loc("CWE617_Reachable_Assertion__fgets_34.c":54:28)
#loc48 = loc("CWE617_Reachable_Assertion__fgets_34.c":28:9)
#loc49 = loc("CWE617_Reachable_Assertion__fgets_34.c":81:1)
#loc50 = loc("CWE617_Reachable_Assertion__fgets_34.c":84:1)
#loc51 = loc("CWE617_Reachable_Assertion__fgets_34.c":83:5)
#loc52 = loc("CWE617_Reachable_Assertion__fgets_34.c":83:13)
#loc53 = loc("CWE617_Reachable_Assertion__fgets_34.c":77:9)
#loc54 = loc("CWE617_Reachable_Assertion__fgets_34.c":65:1)
#loc55 = loc("CWE617_Reachable_Assertion__fgets_34.c":79:1)
#loc56 = loc("CWE617_Reachable_Assertion__fgets_34.c":67:5)
#loc57 = loc("CWE617_Reachable_Assertion__fgets_34.c":67:9)
#loc58 = loc("CWE617_Reachable_Assertion__fgets_34.c":68:5)
#loc59 = loc("CWE617_Reachable_Assertion__fgets_34.c":68:52)
#loc60 = loc("CWE617_Reachable_Assertion__fgets_34.c":70:13)
#loc61 = loc("CWE617_Reachable_Assertion__fgets_34.c":70:12)
#loc62 = loc("CWE617_Reachable_Assertion__fgets_34.c":70:5)
#loc63 = loc("CWE617_Reachable_Assertion__fgets_34.c":72:12)
#loc64 = loc("CWE617_Reachable_Assertion__fgets_34.c":72:25)
#loc65 = loc("CWE617_Reachable_Assertion__fgets_34.c":72:5)
#loc66 = loc("CWE617_Reachable_Assertion__fgets_34.c":73:26)
#loc67 = loc("CWE617_Reachable_Assertion__fgets_34.c":73:5)
#loc68 = loc("CWE617_Reachable_Assertion__fgets_34.c":74:5)
#loc69 = loc("CWE617_Reachable_Assertion__fgets_34.c":78:5)
#loc70 = loc("CWE617_Reachable_Assertion__fgets_34.c":75:9)
#loc71 = loc("CWE617_Reachable_Assertion__fgets_34.c":75:28)
#loc72 = loc(fused[#loc1, #loc2])
#loc73 = loc(fused[#loc3, #loc4])
#loc74 = loc(fused[#loc5, #loc6])
#loc75 = loc(fused[#loc7, #loc8])
#loc76 = loc(fused[#loc10, #loc11])
#loc77 = loc(fused[#loc13, #loc14])
#loc78 = loc(fused[#loc15, #loc16])
#loc79 = loc(fused[#loc17, #loc18])
#loc80 = loc(fused[#loc21, #loc19])
#loc81 = loc(fused[#loc22, #loc23])
#loc82 = loc(fused[#loc24, #loc25])
#loc83 = loc(fused[#loc26, #loc27])
#loc84 = loc(fused[#loc31, #loc32])
#loc85 = loc(fused[#loc33, #loc34, #loc35, #loc27])
#loc86 = loc(fused[#loc38, #loc39])
#loc87 = loc(fused[#loc43, #loc41])
#loc88 = loc(fused[#loc44, #loc45])
#loc89 = loc(fused[#loc46, #loc47])
#loc90 = loc(fused[#loc49, #loc50])
#loc91 = loc(fused[#loc51, #loc52])
#loc92 = loc(fused[#loc54, #loc55])
#loc93 = loc(fused[#loc56, #loc57])
#loc94 = loc(fused[#loc58, #loc59])
#loc95 = loc(fused[#loc62, #loc60])
#loc96 = loc(fused[#loc65, #loc64])
#loc97 = loc(fused[#loc67, #loc66])
#loc98 = loc(fused[#loc68, #loc69])
#loc99 = loc(fused[#loc70, #loc71])
