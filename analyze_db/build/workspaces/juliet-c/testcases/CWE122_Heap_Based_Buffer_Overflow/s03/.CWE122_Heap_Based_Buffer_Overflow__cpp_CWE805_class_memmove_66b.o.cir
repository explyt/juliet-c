!s32i = !cir.int<s, 32>
!u64i = !cir.int<u, 64>
!void = !cir.void
#fn_attr = #cir<extra({inline = #cir.inline<no>, optnone = #cir.optnone, uwtable = #cir.uwtable<async>})>
#loc5 = loc("CWE122_Heap_Based_Buffer_Overflow__cpp_CWE805_class_memmove_66b.cpp":24:14)
#loc6 = loc("CWE122_Heap_Based_Buffer_Overflow__cpp_CWE805_class_memmove_66b.cpp":24:39)
#loc52 = loc("CWE122_Heap_Based_Buffer_Overflow__cpp_CWE805_class_memmove_66b.cpp":51:18)
#loc53 = loc("CWE122_Heap_Based_Buffer_Overflow__cpp_CWE805_class_memmove_66b.cpp":51:43)
!ty_TwoIntsClass = !cir.record<class "TwoIntsClass" {!s32i, !s32i} #cir.record.decl.ast>
#loc97 = loc(fused[#loc5, #loc6])
#loc114 = loc(fused[#loc52, #loc53])
module @"/workspaces/juliet-c/testcases/CWE122_Heap_Based_Buffer_Overflow/s03/CWE122_Heap_Based_Buffer_Overflow__cpp_CWE805_class_memmove_66b.cpp" attributes {cir.lang = #cir.lang<cxx>, cir.sob = #cir.signed_overflow_behavior<undefined>, cir.triple = "x86_64-unknown-linux-gnu", cir.type_size_info = #cir.type_size_info<char = 8, int = 32, size_t = 64>, cir.uwtable = #cir.uwtable<async>, dlti.dl_spec = #dlti.dl_spec<i16 = dense<16> : vector<2xi64>, i8 = dense<8> : vector<2xi64>, i1 = dense<8> : vector<2xi64>, !llvm.ptr = dense<64> : vector<4xi64>, !llvm.ptr<270> = dense<32> : vector<4xi64>, f80 = dense<128> : vector<2xi64>, i128 = dense<128> : vector<2xi64>, i64 = dense<64> : vector<2xi64>, !llvm.ptr<271> = dense<32> : vector<4xi64>, !llvm.ptr<272> = dense<64> : vector<4xi64>, f128 = dense<128> : vector<2xi64>, f64 = dense<64> : vector<2xi64>, f16 = dense<16> : vector<2xi64>, i32 = dense<32> : vector<2xi64>, "dlti.stack_alignment" = 128 : i64, "dlti.endianness" = "little", "dlti.mangling_mode" = "e">} {
  cir.func private @printIntLine(!s32i) loc(#loc95)
  cir.func @_ZN62CWE122_Heap_Based_Buffer_Overflow__cpp_CWE805_class_memmove_667badSinkEPP12TwoIntsClass(%arg0: !cir.ptr<!cir.ptr<!ty_TwoIntsClass>> loc(fused[#loc5, #loc6])) extra(#fn_attr) {
    %0 = cir.alloca !cir.ptr<!cir.ptr<!ty_TwoIntsClass>>, !cir.ptr<!cir.ptr<!cir.ptr<!ty_TwoIntsClass>>>, ["dataArray", init] {alignment = 8 : i64} loc(#loc97)
    %1 = cir.alloca !cir.ptr<!ty_TwoIntsClass>, !cir.ptr<!cir.ptr<!ty_TwoIntsClass>>, ["data", init] {alignment = 8 : i64} loc(#loc98)
    cir.store %arg0, %0 : !cir.ptr<!cir.ptr<!ty_TwoIntsClass>>, !cir.ptr<!cir.ptr<!cir.ptr<!ty_TwoIntsClass>>> loc(#loc9)
    %2 = cir.load %0 : !cir.ptr<!cir.ptr<!cir.ptr<!ty_TwoIntsClass>>>, !cir.ptr<!cir.ptr<!ty_TwoIntsClass>> loc(#loc10)
    %3 = cir.const #cir.int<2> : !s32i loc(#loc11)
    %4 = cir.ptr_stride(%2 : !cir.ptr<!cir.ptr<!ty_TwoIntsClass>>, %3 : !s32i), !cir.ptr<!cir.ptr<!ty_TwoIntsClass>> loc(#loc8)
    %5 = cir.load %4 : !cir.ptr<!cir.ptr<!ty_TwoIntsClass>>, !cir.ptr<!ty_TwoIntsClass> loc(#loc10)
    cir.store %5, %1 : !cir.ptr<!ty_TwoIntsClass>, !cir.ptr<!cir.ptr<!ty_TwoIntsClass>> loc(#loc98)
    cir.scope {
      %6 = cir.alloca !cir.array<!ty_TwoIntsClass x 100>, !cir.ptr<!cir.array<!ty_TwoIntsClass x 100>>, ["source"] {alignment = 16 : i64} loc(#loc100)
      cir.scope {
        %21 = cir.alloca !u64i, !cir.ptr<!u64i>, ["i"] {alignment = 8 : i64} loc(#loc102)
        cir.scope {
          %22 = cir.const #cir.int<0> : !s32i loc(#loc22)
          %23 = cir.cast(integral, %22 : !s32i), !u64i loc(#loc22)
          cir.store %23, %21 : !u64i, !cir.ptr<!u64i> loc(#loc104)
          cir.for : cond {
            %24 = cir.load %21 : !cir.ptr<!u64i>, !u64i loc(#loc24)
            %25 = cir.const #cir.int<100> : !s32i loc(#loc25)
            %26 = cir.cast(integral, %25 : !s32i), !u64i loc(#loc25)
            %27 = cir.cmp(lt, %24, %26) : !u64i, !cir.bool loc(#loc105)
            cir.condition(%27) loc(#loc105)
          } body {
            cir.scope {
              %24 = cir.const #cir.int<0> : !s32i loc(#loc27)
              %25 = cir.load %21 : !cir.ptr<!u64i>, !u64i loc(#loc28)
              %26 = cir.cast(array_to_ptrdecay, %6 : !cir.ptr<!cir.array<!ty_TwoIntsClass x 100>>), !cir.ptr<!ty_TwoIntsClass> loc(#loc29)
              %27 = cir.ptr_stride(%26 : !cir.ptr<!ty_TwoIntsClass>, %25 : !u64i), !cir.ptr<!ty_TwoIntsClass> loc(#loc29)
              %28 = cir.get_member %27[0] {name = "intOne"} : !cir.ptr<!ty_TwoIntsClass> -> !cir.ptr<!s32i> loc(#loc30)
              cir.store %24, %28 : !s32i, !cir.ptr<!s32i> loc(#loc107)
              %29 = cir.const #cir.int<0> : !s32i loc(#loc31)
              %30 = cir.load %21 : !cir.ptr<!u64i>, !u64i loc(#loc32)
              %31 = cir.cast(array_to_ptrdecay, %6 : !cir.ptr<!cir.array<!ty_TwoIntsClass x 100>>), !cir.ptr<!ty_TwoIntsClass> loc(#loc33)
              %32 = cir.ptr_stride(%31 : !cir.ptr<!ty_TwoIntsClass>, %30 : !u64i), !cir.ptr<!ty_TwoIntsClass> loc(#loc33)
              %33 = cir.get_member %32[1] {name = "intTwo"} : !cir.ptr<!ty_TwoIntsClass> -> !cir.ptr<!s32i> loc(#loc34)
              cir.store %29, %33 : !s32i, !cir.ptr<!s32i> loc(#loc108)
            } loc(#loc106)
            cir.yield loc(#loc21)
          } step {
            %24 = cir.load %21 : !cir.ptr<!u64i>, !u64i loc(#loc35)
            %25 = cir.unary(inc, %24) : !u64i, !u64i loc(#loc36)
            cir.store %25, %21 : !u64i, !cir.ptr<!u64i> loc(#loc109)
            cir.yield loc(#loc103)
          } loc(#loc103)
        } loc(#loc103)
      } loc(#loc101)
      %7 = cir.load %1 : !cir.ptr<!cir.ptr<!ty_TwoIntsClass>>, !cir.ptr<!ty_TwoIntsClass> loc(#loc37)
      %8 = cir.cast(bitcast, %7 : !cir.ptr<!ty_TwoIntsClass>), !cir.ptr<!void> loc(#loc37)
      %9 = cir.cast(array_to_ptrdecay, %6 : !cir.ptr<!cir.array<!ty_TwoIntsClass x 100>>), !cir.ptr<!ty_TwoIntsClass> loc(#loc38)
      %10 = cir.cast(bitcast, %9 : !cir.ptr<!ty_TwoIntsClass>), !cir.ptr<!void> loc(#loc38)
      %11 = cir.const #cir.int<100> : !s32i loc(#loc39)
      %12 = cir.cast(integral, %11 : !s32i), !u64i loc(#loc39)
      %13 = cir.const #cir.int<8> : !u64i loc(#loc110)
      %14 = cir.binop(mul, %12, %13) : !u64i loc(#loc111)
      cir.libc.memmove %14 bytes from %10 to %8 : !cir.ptr<!void>, !u64i loc(#loc112)
      %15 = cir.load %1 : !cir.ptr<!cir.ptr<!ty_TwoIntsClass>>, !cir.ptr<!ty_TwoIntsClass> loc(#loc44)
      %16 = cir.const #cir.int<0> : !s32i loc(#loc45)
      %17 = cir.ptr_stride(%15 : !cir.ptr<!ty_TwoIntsClass>, %16 : !s32i), !cir.ptr<!ty_TwoIntsClass> loc(#loc46)
      %18 = cir.get_member %17[0] {name = "intOne"} : !cir.ptr<!ty_TwoIntsClass> -> !cir.ptr<!s32i> loc(#loc30)
      %19 = cir.load %18 : !cir.ptr<!s32i>, !s32i loc(#loc47)
      cir.call @printIntLine(%19) : (!s32i) -> () loc(#loc48)
      %20 = cir.load %1 : !cir.ptr<!cir.ptr<!ty_TwoIntsClass>>, !cir.ptr<!ty_TwoIntsClass> loc(#loc49)
      cir.delete.array %20 : <!ty_TwoIntsClass> loc(#loc49)
    } loc(#loc99)
    cir.return loc(#loc4)
  } loc(#loc96)
  cir.func @_ZN62CWE122_Heap_Based_Buffer_Overflow__cpp_CWE805_class_memmove_6611goodG2BSinkEPP12TwoIntsClass(%arg0: !cir.ptr<!cir.ptr<!ty_TwoIntsClass>> loc(fused[#loc52, #loc53])) extra(#fn_attr) {
    %0 = cir.alloca !cir.ptr<!cir.ptr<!ty_TwoIntsClass>>, !cir.ptr<!cir.ptr<!cir.ptr<!ty_TwoIntsClass>>>, ["dataArray", init] {alignment = 8 : i64} loc(#loc114)
    %1 = cir.alloca !cir.ptr<!ty_TwoIntsClass>, !cir.ptr<!cir.ptr<!ty_TwoIntsClass>>, ["data", init] {alignment = 8 : i64} loc(#loc115)
    cir.store %arg0, %0 : !cir.ptr<!cir.ptr<!ty_TwoIntsClass>>, !cir.ptr<!cir.ptr<!cir.ptr<!ty_TwoIntsClass>>> loc(#loc56)
    %2 = cir.load %0 : !cir.ptr<!cir.ptr<!cir.ptr<!ty_TwoIntsClass>>>, !cir.ptr<!cir.ptr<!ty_TwoIntsClass>> loc(#loc57)
    %3 = cir.const #cir.int<2> : !s32i loc(#loc58)
    %4 = cir.ptr_stride(%2 : !cir.ptr<!cir.ptr<!ty_TwoIntsClass>>, %3 : !s32i), !cir.ptr<!cir.ptr<!ty_TwoIntsClass>> loc(#loc55)
    %5 = cir.load %4 : !cir.ptr<!cir.ptr<!ty_TwoIntsClass>>, !cir.ptr<!ty_TwoIntsClass> loc(#loc57)
    cir.store %5, %1 : !cir.ptr<!ty_TwoIntsClass>, !cir.ptr<!cir.ptr<!ty_TwoIntsClass>> loc(#loc115)
    cir.scope {
      %6 = cir.alloca !cir.array<!ty_TwoIntsClass x 100>, !cir.ptr<!cir.array<!ty_TwoIntsClass x 100>>, ["source"] {alignment = 16 : i64} loc(#loc117)
      cir.scope {
        %21 = cir.alloca !u64i, !cir.ptr<!u64i>, ["i"] {alignment = 8 : i64} loc(#loc119)
        cir.scope {
          %22 = cir.const #cir.int<0> : !s32i loc(#loc69)
          %23 = cir.cast(integral, %22 : !s32i), !u64i loc(#loc69)
          cir.store %23, %21 : !u64i, !cir.ptr<!u64i> loc(#loc121)
          cir.for : cond {
            %24 = cir.load %21 : !cir.ptr<!u64i>, !u64i loc(#loc71)
            %25 = cir.const #cir.int<100> : !s32i loc(#loc72)
            %26 = cir.cast(integral, %25 : !s32i), !u64i loc(#loc72)
            %27 = cir.cmp(lt, %24, %26) : !u64i, !cir.bool loc(#loc122)
            cir.condition(%27) loc(#loc122)
          } body {
            cir.scope {
              %24 = cir.const #cir.int<0> : !s32i loc(#loc74)
              %25 = cir.load %21 : !cir.ptr<!u64i>, !u64i loc(#loc75)
              %26 = cir.cast(array_to_ptrdecay, %6 : !cir.ptr<!cir.array<!ty_TwoIntsClass x 100>>), !cir.ptr<!ty_TwoIntsClass> loc(#loc76)
              %27 = cir.ptr_stride(%26 : !cir.ptr<!ty_TwoIntsClass>, %25 : !u64i), !cir.ptr<!ty_TwoIntsClass> loc(#loc76)
              %28 = cir.get_member %27[0] {name = "intOne"} : !cir.ptr<!ty_TwoIntsClass> -> !cir.ptr<!s32i> loc(#loc30)
              cir.store %24, %28 : !s32i, !cir.ptr<!s32i> loc(#loc124)
              %29 = cir.const #cir.int<0> : !s32i loc(#loc77)
              %30 = cir.load %21 : !cir.ptr<!u64i>, !u64i loc(#loc78)
              %31 = cir.cast(array_to_ptrdecay, %6 : !cir.ptr<!cir.array<!ty_TwoIntsClass x 100>>), !cir.ptr<!ty_TwoIntsClass> loc(#loc79)
              %32 = cir.ptr_stride(%31 : !cir.ptr<!ty_TwoIntsClass>, %30 : !u64i), !cir.ptr<!ty_TwoIntsClass> loc(#loc79)
              %33 = cir.get_member %32[1] {name = "intTwo"} : !cir.ptr<!ty_TwoIntsClass> -> !cir.ptr<!s32i> loc(#loc34)
              cir.store %29, %33 : !s32i, !cir.ptr<!s32i> loc(#loc125)
            } loc(#loc123)
            cir.yield loc(#loc68)
          } step {
            %24 = cir.load %21 : !cir.ptr<!u64i>, !u64i loc(#loc80)
            %25 = cir.unary(inc, %24) : !u64i, !u64i loc(#loc81)
            cir.store %25, %21 : !u64i, !cir.ptr<!u64i> loc(#loc126)
            cir.yield loc(#loc120)
          } loc(#loc120)
        } loc(#loc120)
      } loc(#loc118)
      %7 = cir.load %1 : !cir.ptr<!cir.ptr<!ty_TwoIntsClass>>, !cir.ptr<!ty_TwoIntsClass> loc(#loc82)
      %8 = cir.cast(bitcast, %7 : !cir.ptr<!ty_TwoIntsClass>), !cir.ptr<!void> loc(#loc82)
      %9 = cir.cast(array_to_ptrdecay, %6 : !cir.ptr<!cir.array<!ty_TwoIntsClass x 100>>), !cir.ptr<!ty_TwoIntsClass> loc(#loc83)
      %10 = cir.cast(bitcast, %9 : !cir.ptr<!ty_TwoIntsClass>), !cir.ptr<!void> loc(#loc83)
      %11 = cir.const #cir.int<100> : !s32i loc(#loc84)
      %12 = cir.cast(integral, %11 : !s32i), !u64i loc(#loc84)
      %13 = cir.const #cir.int<8> : !u64i loc(#loc127)
      %14 = cir.binop(mul, %12, %13) : !u64i loc(#loc128)
      cir.libc.memmove %14 bytes from %10 to %8 : !cir.ptr<!void>, !u64i loc(#loc129)
      %15 = cir.load %1 : !cir.ptr<!cir.ptr<!ty_TwoIntsClass>>, !cir.ptr<!ty_TwoIntsClass> loc(#loc89)
      %16 = cir.const #cir.int<0> : !s32i loc(#loc90)
      %17 = cir.ptr_stride(%15 : !cir.ptr<!ty_TwoIntsClass>, %16 : !s32i), !cir.ptr<!ty_TwoIntsClass> loc(#loc91)
      %18 = cir.get_member %17[0] {name = "intOne"} : !cir.ptr<!ty_TwoIntsClass> -> !cir.ptr<!s32i> loc(#loc30)
      %19 = cir.load %18 : !cir.ptr<!s32i>, !s32i loc(#loc92)
      cir.call @printIntLine(%19) : (!s32i) -> () loc(#loc93)
      %20 = cir.load %1 : !cir.ptr<!cir.ptr<!ty_TwoIntsClass>>, !cir.ptr<!ty_TwoIntsClass> loc(#loc94)
      cir.delete.array %20 : <!ty_TwoIntsClass> loc(#loc94)
    } loc(#loc116)
    cir.return loc(#loc51)
  } loc(#loc113)
} loc(#loc)
#loc = loc("/workspaces/juliet-c/testcases/CWE122_Heap_Based_Buffer_Overflow/s03/CWE122_Heap_Based_Buffer_Overflow__cpp_CWE805_class_memmove_66b.cpp":0:0)
#loc1 = loc("../../../testcasesupport/std_testcase_io.h":18:1)
#loc2 = loc("../../../testcasesupport/std_testcase_io.h":18:33)
#loc3 = loc("CWE122_Heap_Based_Buffer_Overflow__cpp_CWE805_class_memmove_66b.cpp":24:1)
#loc4 = loc("CWE122_Heap_Based_Buffer_Overflow__cpp_CWE805_class_memmove_66b.cpp":44:1)
#loc7 = loc("CWE122_Heap_Based_Buffer_Overflow__cpp_CWE805_class_memmove_66b.cpp":27:5)
#loc8 = loc("CWE122_Heap_Based_Buffer_Overflow__cpp_CWE805_class_memmove_66b.cpp":27:38)
#loc9 = loc("CWE122_Heap_Based_Buffer_Overflow__cpp_CWE805_class_memmove_66b.cpp":25:1)
#loc10 = loc("CWE122_Heap_Based_Buffer_Overflow__cpp_CWE805_class_memmove_66b.cpp":27:27)
#loc11 = loc("CWE122_Heap_Based_Buffer_Overflow__cpp_CWE805_class_memmove_66b.cpp":27:37)
#loc12 = loc("CWE122_Heap_Based_Buffer_Overflow__cpp_CWE805_class_memmove_66b.cpp":28:5)
#loc13 = loc("CWE122_Heap_Based_Buffer_Overflow__cpp_CWE805_class_memmove_66b.cpp":43:5)
#loc14 = loc("CWE122_Heap_Based_Buffer_Overflow__cpp_CWE805_class_memmove_66b.cpp":29:9)
#loc15 = loc("CWE122_Heap_Based_Buffer_Overflow__cpp_CWE805_class_memmove_66b.cpp":29:32)
#loc16 = loc("CWE122_Heap_Based_Buffer_Overflow__cpp_CWE805_class_memmove_66b.cpp":30:9)
#loc17 = loc("CWE122_Heap_Based_Buffer_Overflow__cpp_CWE805_class_memmove_66b.cpp":38:9)
#loc18 = loc("CWE122_Heap_Based_Buffer_Overflow__cpp_CWE805_class_memmove_66b.cpp":31:13)
#loc19 = loc("CWE122_Heap_Based_Buffer_Overflow__cpp_CWE805_class_memmove_66b.cpp":31:20)
#loc20 = loc("CWE122_Heap_Based_Buffer_Overflow__cpp_CWE805_class_memmove_66b.cpp":33:13)
#loc21 = loc("CWE122_Heap_Based_Buffer_Overflow__cpp_CWE805_class_memmove_66b.cpp":37:13)
#loc22 = loc("CWE122_Heap_Based_Buffer_Overflow__cpp_CWE805_class_memmove_66b.cpp":33:22)
#loc23 = loc("CWE122_Heap_Based_Buffer_Overflow__cpp_CWE805_class_memmove_66b.cpp":33:18)
#loc24 = loc("CWE122_Heap_Based_Buffer_Overflow__cpp_CWE805_class_memmove_66b.cpp":33:25)
#loc25 = loc("CWE122_Heap_Based_Buffer_Overflow__cpp_CWE805_class_memmove_66b.cpp":33:29)
#loc26 = loc("CWE122_Heap_Based_Buffer_Overflow__cpp_CWE805_class_memmove_66b.cpp":34:13)
#loc27 = loc("CWE122_Heap_Based_Buffer_Overflow__cpp_CWE805_class_memmove_66b.cpp":35:36)
#loc28 = loc("CWE122_Heap_Based_Buffer_Overflow__cpp_CWE805_class_memmove_66b.cpp":35:24)
#loc29 = loc("CWE122_Heap_Based_Buffer_Overflow__cpp_CWE805_class_memmove_66b.cpp":35:17)
#loc30 = loc("../../../testcasesupport/std_testcase.h":64:13)
#loc31 = loc("CWE122_Heap_Based_Buffer_Overflow__cpp_CWE805_class_memmove_66b.cpp":36:36)
#loc32 = loc("CWE122_Heap_Based_Buffer_Overflow__cpp_CWE805_class_memmove_66b.cpp":36:24)
#loc33 = loc("CWE122_Heap_Based_Buffer_Overflow__cpp_CWE805_class_memmove_66b.cpp":36:17)
#loc34 = loc("../../../testcasesupport/std_testcase.h":65:13)
#loc35 = loc("CWE122_Heap_Based_Buffer_Overflow__cpp_CWE805_class_memmove_66b.cpp":33:35)
#loc36 = loc("CWE122_Heap_Based_Buffer_Overflow__cpp_CWE805_class_memmove_66b.cpp":33:34)
#loc37 = loc("CWE122_Heap_Based_Buffer_Overflow__cpp_CWE805_class_memmove_66b.cpp":40:17)
#loc38 = loc("CWE122_Heap_Based_Buffer_Overflow__cpp_CWE805_class_memmove_66b.cpp":40:23)
#loc39 = loc("CWE122_Heap_Based_Buffer_Overflow__cpp_CWE805_class_memmove_66b.cpp":40:31)
#loc40 = loc("CWE122_Heap_Based_Buffer_Overflow__cpp_CWE805_class_memmove_66b.cpp":40:35)
#loc41 = loc("CWE122_Heap_Based_Buffer_Overflow__cpp_CWE805_class_memmove_66b.cpp":40:54)
#loc42 = loc("CWE122_Heap_Based_Buffer_Overflow__cpp_CWE805_class_memmove_66b.cpp":40:9)
#loc43 = loc("CWE122_Heap_Based_Buffer_Overflow__cpp_CWE805_class_memmove_66b.cpp":40:55)
#loc44 = loc("CWE122_Heap_Based_Buffer_Overflow__cpp_CWE805_class_memmove_66b.cpp":41:22)
#loc45 = loc("CWE122_Heap_Based_Buffer_Overflow__cpp_CWE805_class_memmove_66b.cpp":41:27)
#loc46 = loc("CWE122_Heap_Based_Buffer_Overflow__cpp_CWE805_class_memmove_66b.cpp":41:28)
#loc47 = loc("CWE122_Heap_Based_Buffer_Overflow__cpp_CWE805_class_memmove_66b.cpp":41:30)
#loc48 = loc("CWE122_Heap_Based_Buffer_Overflow__cpp_CWE805_class_memmove_66b.cpp":41:9)
#loc49 = loc("CWE122_Heap_Based_Buffer_Overflow__cpp_CWE805_class_memmove_66b.cpp":42:19)
#loc50 = loc("CWE122_Heap_Based_Buffer_Overflow__cpp_CWE805_class_memmove_66b.cpp":51:1)
#loc51 = loc("CWE122_Heap_Based_Buffer_Overflow__cpp_CWE805_class_memmove_66b.cpp":70:1)
#loc54 = loc("CWE122_Heap_Based_Buffer_Overflow__cpp_CWE805_class_memmove_66b.cpp":53:5)
#loc55 = loc("CWE122_Heap_Based_Buffer_Overflow__cpp_CWE805_class_memmove_66b.cpp":53:38)
#loc56 = loc("CWE122_Heap_Based_Buffer_Overflow__cpp_CWE805_class_memmove_66b.cpp":52:1)
#loc57 = loc("CWE122_Heap_Based_Buffer_Overflow__cpp_CWE805_class_memmove_66b.cpp":53:27)
#loc58 = loc("CWE122_Heap_Based_Buffer_Overflow__cpp_CWE805_class_memmove_66b.cpp":53:37)
#loc59 = loc("CWE122_Heap_Based_Buffer_Overflow__cpp_CWE805_class_memmove_66b.cpp":54:5)
#loc60 = loc("CWE122_Heap_Based_Buffer_Overflow__cpp_CWE805_class_memmove_66b.cpp":69:5)
#loc61 = loc("CWE122_Heap_Based_Buffer_Overflow__cpp_CWE805_class_memmove_66b.cpp":55:9)
#loc62 = loc("CWE122_Heap_Based_Buffer_Overflow__cpp_CWE805_class_memmove_66b.cpp":55:32)
#loc63 = loc("CWE122_Heap_Based_Buffer_Overflow__cpp_CWE805_class_memmove_66b.cpp":56:9)
#loc64 = loc("CWE122_Heap_Based_Buffer_Overflow__cpp_CWE805_class_memmove_66b.cpp":64:9)
#loc65 = loc("CWE122_Heap_Based_Buffer_Overflow__cpp_CWE805_class_memmove_66b.cpp":57:13)
#loc66 = loc("CWE122_Heap_Based_Buffer_Overflow__cpp_CWE805_class_memmove_66b.cpp":57:20)
#loc67 = loc("CWE122_Heap_Based_Buffer_Overflow__cpp_CWE805_class_memmove_66b.cpp":59:13)
#loc68 = loc("CWE122_Heap_Based_Buffer_Overflow__cpp_CWE805_class_memmove_66b.cpp":63:13)
#loc69 = loc("CWE122_Heap_Based_Buffer_Overflow__cpp_CWE805_class_memmove_66b.cpp":59:22)
#loc70 = loc("CWE122_Heap_Based_Buffer_Overflow__cpp_CWE805_class_memmove_66b.cpp":59:18)
#loc71 = loc("CWE122_Heap_Based_Buffer_Overflow__cpp_CWE805_class_memmove_66b.cpp":59:25)
#loc72 = loc("CWE122_Heap_Based_Buffer_Overflow__cpp_CWE805_class_memmove_66b.cpp":59:29)
#loc73 = loc("CWE122_Heap_Based_Buffer_Overflow__cpp_CWE805_class_memmove_66b.cpp":60:13)
#loc74 = loc("CWE122_Heap_Based_Buffer_Overflow__cpp_CWE805_class_memmove_66b.cpp":61:36)
#loc75 = loc("CWE122_Heap_Based_Buffer_Overflow__cpp_CWE805_class_memmove_66b.cpp":61:24)
#loc76 = loc("CWE122_Heap_Based_Buffer_Overflow__cpp_CWE805_class_memmove_66b.cpp":61:17)
#loc77 = loc("CWE122_Heap_Based_Buffer_Overflow__cpp_CWE805_class_memmove_66b.cpp":62:36)
#loc78 = loc("CWE122_Heap_Based_Buffer_Overflow__cpp_CWE805_class_memmove_66b.cpp":62:24)
#loc79 = loc("CWE122_Heap_Based_Buffer_Overflow__cpp_CWE805_class_memmove_66b.cpp":62:17)
#loc80 = loc("CWE122_Heap_Based_Buffer_Overflow__cpp_CWE805_class_memmove_66b.cpp":59:35)
#loc81 = loc("CWE122_Heap_Based_Buffer_Overflow__cpp_CWE805_class_memmove_66b.cpp":59:34)
#loc82 = loc("CWE122_Heap_Based_Buffer_Overflow__cpp_CWE805_class_memmove_66b.cpp":66:17)
#loc83 = loc("CWE122_Heap_Based_Buffer_Overflow__cpp_CWE805_class_memmove_66b.cpp":66:23)
#loc84 = loc("CWE122_Heap_Based_Buffer_Overflow__cpp_CWE805_class_memmove_66b.cpp":66:31)
#loc85 = loc("CWE122_Heap_Based_Buffer_Overflow__cpp_CWE805_class_memmove_66b.cpp":66:35)
#loc86 = loc("CWE122_Heap_Based_Buffer_Overflow__cpp_CWE805_class_memmove_66b.cpp":66:54)
#loc87 = loc("CWE122_Heap_Based_Buffer_Overflow__cpp_CWE805_class_memmove_66b.cpp":66:9)
#loc88 = loc("CWE122_Heap_Based_Buffer_Overflow__cpp_CWE805_class_memmove_66b.cpp":66:55)
#loc89 = loc("CWE122_Heap_Based_Buffer_Overflow__cpp_CWE805_class_memmove_66b.cpp":67:22)
#loc90 = loc("CWE122_Heap_Based_Buffer_Overflow__cpp_CWE805_class_memmove_66b.cpp":67:27)
#loc91 = loc("CWE122_Heap_Based_Buffer_Overflow__cpp_CWE805_class_memmove_66b.cpp":67:28)
#loc92 = loc("CWE122_Heap_Based_Buffer_Overflow__cpp_CWE805_class_memmove_66b.cpp":67:30)
#loc93 = loc("CWE122_Heap_Based_Buffer_Overflow__cpp_CWE805_class_memmove_66b.cpp":67:9)
#loc94 = loc("CWE122_Heap_Based_Buffer_Overflow__cpp_CWE805_class_memmove_66b.cpp":68:19)
#loc95 = loc(fused[#loc1, #loc2])
#loc96 = loc(fused[#loc3, #loc4])
#loc98 = loc(fused[#loc7, #loc8])
#loc99 = loc(fused[#loc12, #loc13])
#loc100 = loc(fused[#loc14, #loc15])
#loc101 = loc(fused[#loc16, #loc17])
#loc102 = loc(fused[#loc18, #loc19])
#loc103 = loc(fused[#loc20, #loc21])
#loc104 = loc(fused[#loc23, #loc22])
#loc105 = loc(fused[#loc24, #loc25])
#loc106 = loc(fused[#loc26, #loc21])
#loc107 = loc(fused[#loc29, #loc27])
#loc108 = loc(fused[#loc33, #loc31])
#loc109 = loc(fused[#loc36, #loc35])
#loc110 = loc(fused[#loc40, #loc41])
#loc111 = loc(fused[#loc39, #loc41])
#loc112 = loc(fused[#loc42, #loc43])
#loc113 = loc(fused[#loc50, #loc51])
#loc115 = loc(fused[#loc54, #loc55])
#loc116 = loc(fused[#loc59, #loc60])
#loc117 = loc(fused[#loc61, #loc62])
#loc118 = loc(fused[#loc63, #loc64])
#loc119 = loc(fused[#loc65, #loc66])
#loc120 = loc(fused[#loc67, #loc68])
#loc121 = loc(fused[#loc70, #loc69])
#loc122 = loc(fused[#loc71, #loc72])
#loc123 = loc(fused[#loc73, #loc68])
#loc124 = loc(fused[#loc76, #loc74])
#loc125 = loc(fused[#loc79, #loc77])
#loc126 = loc(fused[#loc81, #loc80])
#loc127 = loc(fused[#loc85, #loc86])
#loc128 = loc(fused[#loc84, #loc86])
#loc129 = loc(fused[#loc87, #loc88])
