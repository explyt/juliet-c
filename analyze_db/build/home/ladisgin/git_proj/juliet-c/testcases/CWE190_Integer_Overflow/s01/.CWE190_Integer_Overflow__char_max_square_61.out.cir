!s32i = !cir.int<s, 32>
!s8i = !cir.int<s, 8>
#fn_attr = #cir<extra({inline = #cir.inline<no>, nothrow = #cir.nothrow, optnone = #cir.optnone})>
#loc3 = loc("CWE190_Integer_Overflow__char_max_square_61b.c":24:61)
#loc4 = loc("CWE190_Integer_Overflow__char_max_square_61b.c":24:66)
#loc12 = loc("CWE190_Integer_Overflow__char_max_square_61b.c":36:65)
#loc13 = loc("CWE190_Integer_Overflow__char_max_square_61b.c":36:70)
#loc21 = loc("CWE190_Integer_Overflow__char_max_square_61b.c":44:65)
#loc22 = loc("CWE190_Integer_Overflow__char_max_square_61b.c":44:70)
#loc29 = loc(fused[#loc3, #loc4])
#loc33 = loc(fused[#loc12, #loc13])
#loc37 = loc(fused[#loc21, #loc22])
module @"/home/ladisgin/git_proj/juliet-c/testcases/CWE190_Integer_Overflow/s01/CWE190_Integer_Overflow__char_max_square_61b.c" attributes {cir.lang = #cir.lang<c>, cir.sob = #cir.signed_overflow_behavior<undefined>, cir.triple = "x86_64-unknown-linux-gnu", dlti.dl_spec = #dlti.dl_spec<i128 = dense<128> : vector<2xi64>, f80 = dense<128> : vector<2xi64>, i8 = dense<8> : vector<2xi64>, i16 = dense<16> : vector<2xi64>, !llvm.ptr = dense<64> : vector<4xi64>, i1 = dense<8> : vector<2xi64>, f64 = dense<64> : vector<2xi64>, f16 = dense<16> : vector<2xi64>, !llvm.ptr<270> = dense<32> : vector<4xi64>, f128 = dense<128> : vector<2xi64>, i32 = dense<32> : vector<2xi64>, i64 = dense<64> : vector<2xi64>, !llvm.ptr<271> = dense<32> : vector<4xi64>, !llvm.ptr<272> = dense<64> : vector<4xi64>, "dlti.stack_alignment" = 128 : i64, "dlti.endianness" = "little">} {
  cir.func @CWE190_Integer_Overflow__char_max_square_61b_badSource(%arg0: !s8i loc(fused[#loc3, #loc4])) -> !s8i extra(#fn_attr) {
    %0 = cir.alloca !s8i, !cir.ptr<!s8i>, ["data", init] {alignment = 1 : i64} loc(#loc29)
    %1 = cir.alloca !s8i, !cir.ptr<!s8i>, ["__retval"] {alignment = 1 : i64} loc(#loc2)
    cir.store %arg0, %0 : !s8i, !cir.ptr<!s8i> loc(#loc5)
    %2 = cir.const #cir.int<127> : !s32i loc(#loc6)
    %3 = cir.cast(integral, %2 : !s32i), !s8i loc(#loc6)
    cir.store %3, %0 : !s8i, !cir.ptr<!s8i> loc(#loc30)
    %4 = cir.load %0 : !cir.ptr<!s8i>, !s8i loc(#loc8)
    cir.store %4, %1 : !s8i, !cir.ptr<!s8i> loc(#loc31)
    %5 = cir.load %1 : !cir.ptr<!s8i>, !s8i loc(#loc31)
    cir.return %5 : !s8i loc(#loc31)
  } loc(#loc28)
  cir.func @CWE190_Integer_Overflow__char_max_square_61b_goodG2BSource(%arg0: !s8i loc(fused[#loc12, #loc13])) -> !s8i extra(#fn_attr) {
    %0 = cir.alloca !s8i, !cir.ptr<!s8i>, ["data", init] {alignment = 1 : i64} loc(#loc33)
    %1 = cir.alloca !s8i, !cir.ptr<!s8i>, ["__retval"] {alignment = 1 : i64} loc(#loc11)
    cir.store %arg0, %0 : !s8i, !cir.ptr<!s8i> loc(#loc14)
    %2 = cir.const #cir.int<2> : !s32i loc(#loc15)
    %3 = cir.cast(integral, %2 : !s32i), !s8i loc(#loc15)
    cir.store %3, %0 : !s8i, !cir.ptr<!s8i> loc(#loc34)
    %4 = cir.load %0 : !cir.ptr<!s8i>, !s8i loc(#loc17)
    cir.store %4, %1 : !s8i, !cir.ptr<!s8i> loc(#loc35)
    %5 = cir.load %1 : !cir.ptr<!s8i>, !s8i loc(#loc35)
    cir.return %5 : !s8i loc(#loc35)
  } loc(#loc32)
  cir.func @CWE190_Integer_Overflow__char_max_square_61b_goodB2GSource(%arg0: !s8i loc(fused[#loc21, #loc22])) -> !s8i extra(#fn_attr) {
    %0 = cir.alloca !s8i, !cir.ptr<!s8i>, ["data", init] {alignment = 1 : i64} loc(#loc37)
    %1 = cir.alloca !s8i, !cir.ptr<!s8i>, ["__retval"] {alignment = 1 : i64} loc(#loc20)
    cir.store %arg0, %0 : !s8i, !cir.ptr<!s8i> loc(#loc23)
    %2 = cir.const #cir.int<127> : !s32i loc(#loc24)
    %3 = cir.cast(integral, %2 : !s32i), !s8i loc(#loc24)
    cir.store %3, %0 : !s8i, !cir.ptr<!s8i> loc(#loc38)
    %4 = cir.load %0 : !cir.ptr<!s8i>, !s8i loc(#loc26)
    cir.store %4, %1 : !s8i, !cir.ptr<!s8i> loc(#loc39)
    %5 = cir.load %1 : !cir.ptr<!s8i>, !s8i loc(#loc39)
    cir.return %5 : !s8i loc(#loc39)
  } loc(#loc36)
} loc(#loc)
#loc = loc("/home/ladisgin/git_proj/juliet-c/testcases/CWE190_Integer_Overflow/s01/CWE190_Integer_Overflow__char_max_square_61b.c":0:0)
#loc1 = loc("CWE190_Integer_Overflow__char_max_square_61b.c":24:1)
#loc2 = loc("CWE190_Integer_Overflow__char_max_square_61b.c":29:1)
#loc5 = loc("CWE190_Integer_Overflow__char_max_square_61b.c":25:1)
#loc6 = loc("CWE190_Integer_Overflow__char_max_square_61b.c":27:12)
#loc7 = loc("CWE190_Integer_Overflow__char_max_square_61b.c":27:5)
#loc8 = loc("CWE190_Integer_Overflow__char_max_square_61b.c":28:12)
#loc9 = loc("CWE190_Integer_Overflow__char_max_square_61b.c":28:5)
#loc10 = loc("CWE190_Integer_Overflow__char_max_square_61b.c":36:1)
#loc11 = loc("CWE190_Integer_Overflow__char_max_square_61b.c":41:1)
#loc14 = loc("CWE190_Integer_Overflow__char_max_square_61b.c":37:1)
#loc15 = loc("CWE190_Integer_Overflow__char_max_square_61b.c":39:12)
#loc16 = loc("CWE190_Integer_Overflow__char_max_square_61b.c":39:5)
#loc17 = loc("CWE190_Integer_Overflow__char_max_square_61b.c":40:12)
#loc18 = loc("CWE190_Integer_Overflow__char_max_square_61b.c":40:5)
#loc19 = loc("CWE190_Integer_Overflow__char_max_square_61b.c":44:1)
#loc20 = loc("CWE190_Integer_Overflow__char_max_square_61b.c":49:1)
#loc23 = loc("CWE190_Integer_Overflow__char_max_square_61b.c":45:1)
#loc24 = loc("CWE190_Integer_Overflow__char_max_square_61b.c":47:12)
#loc25 = loc("CWE190_Integer_Overflow__char_max_square_61b.c":47:5)
#loc26 = loc("CWE190_Integer_Overflow__char_max_square_61b.c":48:12)
#loc27 = loc("CWE190_Integer_Overflow__char_max_square_61b.c":48:5)
#loc28 = loc(fused[#loc1, #loc2])
#loc30 = loc(fused[#loc7, #loc6])
#loc31 = loc(fused[#loc9, #loc8])
#loc32 = loc(fused[#loc10, #loc11])
#loc34 = loc(fused[#loc16, #loc15])
#loc35 = loc(fused[#loc18, #loc17])
#loc36 = loc(fused[#loc19, #loc20])
#loc38 = loc(fused[#loc25, #loc24])
#loc39 = loc(fused[#loc27, #loc26])
