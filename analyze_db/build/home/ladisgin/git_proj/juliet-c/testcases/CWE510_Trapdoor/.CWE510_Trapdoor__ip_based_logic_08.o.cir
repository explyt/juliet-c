!s32i = !cir.int<s, 32>
!s64i = !cir.int<s, 64>
!s8i = !cir.int<s, 8>
!u16i = !cir.int<u, 16>
!u32i = !cir.int<u, 32>
!u64i = !cir.int<u, 64>
!u8i = !cir.int<u, 8>
!void = !cir.void
#fn_attr = #cir<extra({nothrow = #cir.nothrow})>
#fn_attr1 = #cir<extra({inline = #cir.inline<no>, nothrow = #cir.nothrow, optnone = #cir.optnone})>
!ty_in_addr = !cir.struct<struct "in_addr" {!u32i} #cir.record.decl.ast>
!ty_sockaddr = !cir.struct<struct "sockaddr" {!u16i, !cir.array<!s8i x 14>} #cir.record.decl.ast>
!ty_sockaddr_in = !cir.struct<struct "sockaddr_in" {!u16i, !u16i, !ty_in_addr, !cir.array<!u8i x 8>}>
module @"/home/ladisgin/git_proj/juliet-c/testcases/CWE510_Trapdoor/CWE510_Trapdoor__ip_based_logic_08.c" attributes {cir.lang = #cir.lang<c>, cir.sob = #cir.signed_overflow_behavior<undefined>, cir.triple = "x86_64-unknown-linux-gnu", dlti.dl_spec = #dlti.dl_spec<i64 = dense<64> : vector<2xi64>, !llvm.ptr<271> = dense<32> : vector<4xi64>, !llvm.ptr<272> = dense<64> : vector<4xi64>, f80 = dense<128> : vector<2xi64>, i128 = dense<128> : vector<2xi64>, i16 = dense<16> : vector<2xi64>, i8 = dense<8> : vector<2xi64>, i1 = dense<8> : vector<2xi64>, !llvm.ptr = dense<64> : vector<4xi64>, f128 = dense<128> : vector<2xi64>, !llvm.ptr<270> = dense<32> : vector<4xi64>, f64 = dense<64> : vector<2xi64>, f16 = dense<16> : vector<2xi64>, i32 = dense<32> : vector<2xi64>, "dlti.stack_alignment" = 128 : i64, "dlti.endianness" = "little">} {
  cir.func private @socket(!s32i, !s32i, !s32i) -> !s32i extra(#fn_attr) loc(#loc387)
  cir.func private @htons(!u16i) -> !u16i extra(#fn_attr) loc(#loc388)
  cir.func private @bind(!s32i, !cir.ptr<!ty_sockaddr>, !u32i) -> !s32i extra(#fn_attr) loc(#loc389)
  cir.func private @listen(!s32i, !s32i) -> !s32i extra(#fn_attr) loc(#loc390)
  cir.func private @accept(!s32i, !cir.ptr<!ty_sockaddr>, !cir.ptr<!u32i>) -> !s32i loc(#loc391)
  cir.func private @getsockname(!s32i, !cir.ptr<!ty_sockaddr>, !cir.ptr<!u32i>) -> !s32i extra(#fn_attr) loc(#loc392)
  cir.func private @strcmp(!cir.ptr<!s8i>, !cir.ptr<!s8i>) -> !s32i extra(#fn_attr) loc(#loc393)
  cir.global "private" constant cir_private dsolocal @".str" = #cir.const_array<"192.168.30.123\00" : !cir.array<!s8i x 15>> : !cir.array<!s8i x 15> {alignment = 1 : i64} loc(#loc15)
  cir.func private @inet_ntoa(!ty_in_addr) -> !cir.ptr<!s8i> extra(#fn_attr) loc(#loc394)
  cir.func private @send(!s32i, !cir.ptr<!void>, !u64i, !s32i) -> !s64i loc(#loc395)
  cir.global "private" constant cir_private dsolocal @".str.1" = #cir.const_array<"Welcome, admin!\00" : !cir.array<!s8i x 16>> : !cir.array<!s8i x 16> {alignment = 1 : i64} loc(#loc20)
  cir.global "private" constant cir_private dsolocal @".str.2" = #cir.const_array<"Welcome!\00" : !cir.array<!s8i x 9>> : !cir.array<!s8i x 9> {alignment = 1 : i64} loc(#loc21)
  cir.func private @printLine(!cir.ptr<!s8i>) loc(#loc396)
  cir.global "private" constant cir_private dsolocal @".str.3" = #cir.const_array<"Send failed!\00" : !cir.array<!s8i x 13>> : !cir.array<!s8i x 13> {alignment = 1 : i64} loc(#loc24)
  cir.func private @close(!s32i) -> !s32i loc(#loc397)
  cir.func no_proto @CWE510_Trapdoor__ip_based_logic_08_bad() extra(#fn_attr1) {
    %0 = cir.alloca !ty_sockaddr_in, !cir.ptr<!ty_sockaddr_in>, ["service"] {alignment = 4 : i64} loc(#loc399)
    %1 = cir.alloca !ty_sockaddr_in, !cir.ptr<!ty_sockaddr_in>, ["acceptService"] {alignment = 4 : i64} loc(#loc400)
    %2 = cir.alloca !s32i, !cir.ptr<!s32i>, ["acceptServiceLen", init] {alignment = 4 : i64} loc(#loc401)
    %3 = cir.alloca !s32i, !cir.ptr<!s32i>, ["listenSocket", init] {alignment = 4 : i64} loc(#loc402)
    %4 = cir.alloca !s32i, !cir.ptr<!s32i>, ["acceptSocket", init] {alignment = 4 : i64} loc(#loc403)
    cir.br ^bb1 loc(#loc404)
  ^bb1:  // pred: ^bb0
    %5 = cir.get_global @staticReturnsTrue : !cir.ptr<!cir.func<!s32i ()>> loc(#loc405)
    %6 = cir.call %5() : (!cir.ptr<!cir.func<!s32i ()>>) -> !s32i loc(#loc40)
    %7 = cir.cast(int_to_bool, %6 : !s32i), !cir.bool loc(#loc40)
    cir.brcond %7 ^bb2, ^bb51 loc(#loc406)
  ^bb2:  // pred: ^bb1
    cir.br ^bb3 loc(#loc407)
  ^bb3:  // pred: ^bb2
    %8 = cir.const #cir.int<16> : !u64i loc(#loc408)
    %9 = cir.cast(integral, %8 : !u64i), !s32i loc(#loc408)
    cir.store %9, %2 : !s32i, !cir.ptr<!s32i> loc(#loc401)
    %10 = cir.const #cir.int<1> : !s32i loc(#loc35)
    %11 = cir.unary(minus, %10) : !s32i, !s32i loc(#loc35)
    cir.store %11, %3 : !s32i, !cir.ptr<!s32i> loc(#loc402)
    %12 = cir.const #cir.int<1> : !s32i loc(#loc37)
    %13 = cir.unary(minus, %12) : !s32i, !s32i loc(#loc37)
    cir.store %13, %4 : !s32i, !cir.ptr<!s32i> loc(#loc403)
    cir.br ^bb4 loc(#loc409)
  ^bb4:  // pred: ^bb3
    cir.br ^bb6 loc(#loc409)
  ^bb5:  // pred: ^bb39
    %14 = cir.const #cir.int<0> : !s32i loc(#loc48)
    %15 = cir.cast(int_to_bool, %14 : !s32i), !cir.bool loc(#loc48)
    cir.brcond %15 ^bb6, ^bb40 loc(#loc48)
  ^bb6:  // 2 preds: ^bb4, ^bb5
    %16 = cir.const #cir.int<2> : !s32i loc(#loc49)
    %17 = cir.const #cir.int<1> : !s32i loc(#loc50)
    %18 = cir.const #cir.int<6> : !s32i loc(#loc51)
    %19 = cir.call @socket(%16, %17, %18) : (!s32i, !s32i, !s32i) -> !s32i extra(#fn_attr) loc(#loc52)
    cir.store %19, %3 : !s32i, !cir.ptr<!s32i> loc(#loc410)
    cir.br ^bb7 loc(#loc411)
  ^bb7:  // pred: ^bb6
    %20 = cir.load %3 : !cir.ptr<!s32i>, !s32i loc(#loc57)
    %21 = cir.const #cir.int<1> : !s32i loc(#loc58)
    %22 = cir.unary(minus, %21) : !s32i, !s32i loc(#loc58)
    %23 = cir.cmp(eq, %20, %22) : !s32i, !cir.bool loc(#loc412)
    cir.brcond %23 ^bb8, ^bb9 loc(#loc413)
  ^bb8:  // pred: ^bb7
    cir.br ^bb40 loc(#loc60)
  ^bb9:  // pred: ^bb7
    cir.br ^bb10 loc(#loc56)
  ^bb10:  // pred: ^bb9
    %24 = cir.cast(bitcast, %0 : !cir.ptr<!ty_sockaddr_in>), !cir.ptr<!void> loc(#loc414)
    %25 = cir.const #cir.int<0> : !s32i loc(#loc63)
    %26 = cir.const #cir.int<16> : !u64i loc(#loc415)
    cir.libc.memset %26 bytes from %24 set to %25 : !cir.ptr<!void>, !s32i, !u64i loc(#loc416)
    %27 = cir.const #cir.int<2> : !s32i loc(#loc68)
    %28 = cir.cast(integral, %27 : !s32i), !u16i loc(#loc68)
    %29 = cir.get_member %0[0] {name = "sin_family"} : !cir.ptr<!ty_sockaddr_in> -> !cir.ptr<!u16i> loc(#loc69)
    cir.store %28, %29 : !u16i, !cir.ptr<!u16i> loc(#loc417)
    %30 = cir.const #cir.int<0> : !s32i loc(#loc71)
    %31 = cir.cast(integral, %30 : !s32i), !u32i loc(#loc71)
    %32 = cir.get_member %0[2] {name = "sin_addr"} : !cir.ptr<!ty_sockaddr_in> -> !cir.ptr<!ty_in_addr> loc(#loc72)
    %33 = cir.get_member %32[0] {name = "s_addr"} : !cir.ptr<!ty_in_addr> -> !cir.ptr<!u32i> loc(#loc73)
    cir.store %31, %33 : !u32i, !cir.ptr<!u32i> loc(#loc418)
    %34 = cir.const #cir.int<20000> : !s32i loc(#loc75)
    %35 = cir.cast(integral, %34 : !s32i), !u16i loc(#loc75)
    %36 = cir.call @htons(%35) : (!u16i) -> !u16i extra(#fn_attr) loc(#loc76)
    %37 = cir.get_member %0[1] {name = "sin_port"} : !cir.ptr<!ty_sockaddr_in> -> !cir.ptr<!u16i> loc(#loc77)
    cir.store %36, %37 : !u16i, !cir.ptr<!u16i> loc(#loc419)
    cir.br ^bb11 loc(#loc420)
  ^bb11:  // pred: ^bb10
    %38 = cir.load %3 : !cir.ptr<!s32i>, !s32i loc(#loc82)
    %39 = cir.cast(bitcast, %0 : !cir.ptr<!ty_sockaddr_in>), !cir.ptr<!ty_sockaddr> loc(#loc421)
    %40 = cir.const #cir.int<16> : !u64i loc(#loc422)
    %41 = cir.cast(integral, %40 : !u64i), !u32i loc(#loc422)
    %42 = cir.call @bind(%38, %39, %41) : (!s32i, !cir.ptr<!ty_sockaddr>, !u32i) -> !s32i extra(#fn_attr) loc(#loc87)
    %43 = cir.const #cir.int<1> : !s32i loc(#loc88)
    %44 = cir.unary(minus, %43) : !s32i, !s32i loc(#loc88)
    %45 = cir.cmp(eq, %42, %44) : !s32i, !cir.bool loc(#loc423)
    cir.brcond %45 ^bb12, ^bb13 loc(#loc424)
  ^bb12:  // pred: ^bb11
    cir.br ^bb40 loc(#loc90)
  ^bb13:  // pred: ^bb11
    cir.br ^bb14 loc(#loc81)
  ^bb14:  // pred: ^bb13
    cir.br ^bb15 loc(#loc425)
  ^bb15:  // pred: ^bb14
    %46 = cir.load %3 : !cir.ptr<!s32i>, !s32i loc(#loc93)
    %47 = cir.const #cir.int<5> : !s32i loc(#loc94)
    %48 = cir.call @listen(%46, %47) : (!s32i, !s32i) -> !s32i extra(#fn_attr) loc(#loc95)
    %49 = cir.const #cir.int<1> : !s32i loc(#loc96)
    %50 = cir.unary(minus, %49) : !s32i, !s32i loc(#loc96)
    %51 = cir.cmp(eq, %48, %50) : !s32i, !cir.bool loc(#loc426)
    cir.brcond %51 ^bb16, ^bb17 loc(#loc427)
  ^bb16:  // pred: ^bb15
    cir.br ^bb40 loc(#loc98)
  ^bb17:  // pred: ^bb15
    cir.br ^bb18 loc(#loc92)
  ^bb18:  // pred: ^bb17
    %52 = cir.load %3 : !cir.ptr<!s32i>, !s32i loc(#loc99)
    %53 = cir.const #cir.ptr<null> : !cir.ptr<!ty_sockaddr> loc(#loc100)
    %54 = cir.const #cir.ptr<null> : !cir.ptr<!u32i> loc(#loc101)
    %55 = cir.call @accept(%52, %53, %54) : (!s32i, !cir.ptr<!ty_sockaddr>, !cir.ptr<!u32i>) -> !s32i loc(#loc102)
    cir.store %55, %4 : !s32i, !cir.ptr<!s32i> loc(#loc428)
    cir.br ^bb19 loc(#loc429)
  ^bb19:  // pred: ^bb18
    %56 = cir.load %4 : !cir.ptr<!s32i>, !s32i loc(#loc107)
    %57 = cir.const #cir.int<1> : !s32i loc(#loc108)
    %58 = cir.unary(minus, %57) : !s32i, !s32i loc(#loc108)
    %59 = cir.cmp(eq, %56, %58) : !s32i, !cir.bool loc(#loc430)
    cir.brcond %59 ^bb20, ^bb21 loc(#loc431)
  ^bb20:  // pred: ^bb19
    cir.br ^bb40 loc(#loc110)
  ^bb21:  // pred: ^bb19
    cir.br ^bb22 loc(#loc106)
  ^bb22:  // pred: ^bb21
    cir.br ^bb23 loc(#loc432)
  ^bb23:  // pred: ^bb22
    %60 = cir.load %4 : !cir.ptr<!s32i>, !s32i loc(#loc113)
    %61 = cir.cast(bitcast, %1 : !cir.ptr<!ty_sockaddr_in>), !cir.ptr<!ty_sockaddr> loc(#loc433)
    %62 = cir.cast(bitcast, %2 : !cir.ptr<!s32i>), !cir.ptr<!u32i> loc(#loc434)
    %63 = cir.call @getsockname(%60, %61, %62) : (!s32i, !cir.ptr<!ty_sockaddr>, !cir.ptr<!u32i>) -> !s32i extra(#fn_attr) loc(#loc118)
    %64 = cir.const #cir.int<1> : !s32i loc(#loc119)
    %65 = cir.unary(minus, %64) : !s32i, !s32i loc(#loc120)
    %66 = cir.cmp(eq, %63, %65) : !s32i, !cir.bool loc(#loc435)
    cir.brcond %66 ^bb24, ^bb25 loc(#loc436)
  ^bb24:  // pred: ^bb23
    cir.br ^bb40 loc(#loc122)
  ^bb25:  // pred: ^bb23
    cir.br ^bb26 loc(#loc112)
  ^bb26:  // pred: ^bb25
    cir.br ^bb27 loc(#loc437)
  ^bb27:  // pred: ^bb26
    %67 = cir.get_global @strcmp : !cir.ptr<!cir.func<!s32i (!cir.ptr<!s8i>, !cir.ptr<!s8i>)>> loc(#loc125)
    %68 = cir.get_global @".str" : !cir.ptr<!cir.array<!s8i x 15>> loc(#loc15)
    %69 = cir.cast(array_to_ptrdecay, %68 : !cir.ptr<!cir.array<!s8i x 15>>), !cir.ptr<!s8i> loc(#loc15)
    %70 = cir.get_member %1[2] {name = "sin_addr"} : !cir.ptr<!ty_sockaddr_in> -> !cir.ptr<!ty_in_addr> loc(#loc72)
    %71 = cir.load %70 : !cir.ptr<!ty_in_addr>, !ty_in_addr loc(#loc126)
    %72 = cir.call @inet_ntoa(%71) : (!ty_in_addr) -> !cir.ptr<!s8i> extra(#fn_attr) loc(#loc126)
    %73 = cir.call @strcmp(%69, %72) : (!cir.ptr<!s8i>, !cir.ptr<!s8i>) -> !s32i extra(#fn_attr) loc(#loc125)
    %74 = cir.const #cir.int<0> : !s32i loc(#loc127)
    %75 = cir.cmp(eq, %73, %74) : !s32i, !cir.bool loc(#loc438)
    cir.brcond %75 ^bb28, ^bb33 loc(#loc439)
  ^bb28:  // pred: ^bb27
    cir.br ^bb29 loc(#loc440)
  ^bb29:  // pred: ^bb28
    %76 = cir.load %4 : !cir.ptr<!s32i>, !s32i loc(#loc133)
    %77 = cir.get_global @".str.1" : !cir.ptr<!cir.array<!s8i x 16>> loc(#loc20)
    %78 = cir.cast(array_to_ptrdecay, %77 : !cir.ptr<!cir.array<!s8i x 16>>), !cir.ptr<!s8i> loc(#loc20)
    %79 = cir.cast(bitcast, %78 : !cir.ptr<!s8i>), !cir.ptr<!void> loc(#loc20)
    %80 = cir.const #cir.int<15> : !u64i loc(#loc441)
    %81 = cir.const #cir.int<0> : !s32i loc(#loc136)
    %82 = cir.call @send(%76, %79, %80, %81) : (!s32i, !cir.ptr<!void>, !u64i, !s32i) -> !s64i loc(#loc137)
    %83 = cir.const #cir.int<1> : !s32i loc(#loc138)
    %84 = cir.unary(minus, %83) : !s32i, !s32i loc(#loc138)
    %85 = cir.cast(integral, %84 : !s32i), !s64i loc(#loc138)
    %86 = cir.cmp(eq, %82, %85) : !s64i, !cir.bool loc(#loc442)
    cir.brcond %86 ^bb30, ^bb31 loc(#loc443)
  ^bb30:  // pred: ^bb29
    cir.br ^bb40 loc(#loc140)
  ^bb31:  // pred: ^bb29
    cir.br ^bb32 loc(#loc132)
  ^bb32:  // pred: ^bb31
    cir.br ^bb38 loc(#loc129)
  ^bb33:  // pred: ^bb27
    cir.br ^bb34 loc(#loc444)
  ^bb34:  // pred: ^bb33
    %87 = cir.load %4 : !cir.ptr<!s32i>, !s32i loc(#loc143)
    %88 = cir.get_global @".str.2" : !cir.ptr<!cir.array<!s8i x 9>> loc(#loc21)
    %89 = cir.cast(array_to_ptrdecay, %88 : !cir.ptr<!cir.array<!s8i x 9>>), !cir.ptr<!s8i> loc(#loc21)
    %90 = cir.cast(bitcast, %89 : !cir.ptr<!s8i>), !cir.ptr<!void> loc(#loc21)
    %91 = cir.const #cir.int<8> : !u64i loc(#loc445)
    %92 = cir.const #cir.int<0> : !s32i loc(#loc146)
    %93 = cir.call @send(%87, %90, %91, %92) : (!s32i, !cir.ptr<!void>, !u64i, !s32i) -> !s64i loc(#loc147)
    %94 = cir.const #cir.int<1> : !s32i loc(#loc148)
    %95 = cir.unary(minus, %94) : !s32i, !s32i loc(#loc148)
    %96 = cir.cast(integral, %95 : !s32i), !s64i loc(#loc148)
    %97 = cir.cmp(eq, %93, %96) : !s64i, !cir.bool loc(#loc446)
    cir.brcond %97 ^bb35, ^bb36 loc(#loc447)
  ^bb35:  // pred: ^bb34
    %98 = cir.get_global @".str.3" : !cir.ptr<!cir.array<!s8i x 13>> loc(#loc24)
    %99 = cir.cast(array_to_ptrdecay, %98 : !cir.ptr<!cir.array<!s8i x 13>>), !cir.ptr<!s8i> loc(#loc24)
    cir.call @printLine(%99) : (!cir.ptr<!s8i>) -> () loc(#loc150)
    cir.br ^bb36 loc(#loc142)
  ^bb36:  // 2 preds: ^bb34, ^bb35
    cir.br ^bb37 loc(#loc142)
  ^bb37:  // pred: ^bb36
    cir.br ^bb38 loc(#loc124)
  ^bb38:  // 2 preds: ^bb32, ^bb37
    cir.br ^bb39 loc(#loc124)
  ^bb39:  // pred: ^bb38
    cir.br ^bb5 loc(#loc47)
  ^bb40:  // 7 preds: ^bb5, ^bb8, ^bb12, ^bb16, ^bb20, ^bb24, ^bb30
    cir.br ^bb41 loc(#loc47)
  ^bb41:  // pred: ^bb40
    cir.br ^bb42 loc(#loc448)
  ^bb42:  // pred: ^bb41
    %100 = cir.load %3 : !cir.ptr<!s32i>, !s32i loc(#loc153)
    %101 = cir.const #cir.int<1> : !s32i loc(#loc154)
    %102 = cir.unary(minus, %101) : !s32i, !s32i loc(#loc154)
    %103 = cir.cmp(ne, %100, %102) : !s32i, !cir.bool loc(#loc449)
    cir.brcond %103 ^bb43, ^bb44 loc(#loc450)
  ^bb43:  // pred: ^bb42
    %104 = cir.load %3 : !cir.ptr<!s32i>, !s32i loc(#loc156)
    %105 = cir.call @close(%104) : (!s32i) -> !s32i loc(#loc157)
    cir.br ^bb44 loc(#loc152)
  ^bb44:  // 2 preds: ^bb42, ^bb43
    cir.br ^bb45 loc(#loc152)
  ^bb45:  // pred: ^bb44
    cir.br ^bb46 loc(#loc451)
  ^bb46:  // pred: ^bb45
    %106 = cir.load %4 : !cir.ptr<!s32i>, !s32i loc(#loc160)
    %107 = cir.const #cir.int<1> : !s32i loc(#loc161)
    %108 = cir.unary(minus, %107) : !s32i, !s32i loc(#loc161)
    %109 = cir.cmp(ne, %106, %108) : !s32i, !cir.bool loc(#loc452)
    cir.brcond %109 ^bb47, ^bb48 loc(#loc453)
  ^bb47:  // pred: ^bb46
    %110 = cir.load %4 : !cir.ptr<!s32i>, !s32i loc(#loc163)
    %111 = cir.call @close(%110) : (!s32i) -> !s32i loc(#loc164)
    cir.br ^bb48 loc(#loc159)
  ^bb48:  // 2 preds: ^bb46, ^bb47
    cir.br ^bb49 loc(#loc159)
  ^bb49:  // pred: ^bb48
    cir.br ^bb50 loc(#loc44)
  ^bb50:  // pred: ^bb49
    cir.br ^bb51 loc(#loc39)
  ^bb51:  // 2 preds: ^bb1, ^bb50
    cir.br ^bb52 loc(#loc39)
  ^bb52:  // pred: ^bb51
    cir.return loc(#loc28)
  } loc(#loc398)
  cir.func no_proto @CWE510_Trapdoor__ip_based_logic_08_good() extra(#fn_attr1) {
    %0 = cir.get_global @good1 : !cir.ptr<!cir.func<!void ()>> loc(#loc455)
    cir.call %0() : (!cir.ptr<!cir.func<!void ()>>) -> () loc(#loc167)
    %1 = cir.get_global @good2 : !cir.ptr<!cir.func<!void ()>> loc(#loc456)
    cir.call %1() : (!cir.ptr<!cir.func<!void ()>>) -> () loc(#loc169)
    cir.return loc(#loc166)
  } loc(#loc454)
  cir.func no_proto internal private @staticReturnsTrue() -> !s32i extra(#fn_attr1) {
    %0 = cir.alloca !s32i, !cir.ptr<!s32i>, ["__retval"] {alignment = 4 : i64} loc(#loc172)
    %1 = cir.const #cir.int<1> : !s32i loc(#loc173)
    cir.store %1, %0 : !s32i, !cir.ptr<!s32i> loc(#loc458)
    %2 = cir.load %0 : !cir.ptr<!s32i>, !s32i loc(#loc458)
    cir.return %2 : !s32i loc(#loc458)
  } loc(#loc457)
  cir.global "private" constant cir_private dsolocal @".str.4" = #cir.const_array<"Benign, fixed string\00" : !cir.array<!s8i x 21>> : !cir.array<!s8i x 21> {alignment = 1 : i64} loc(#loc175)
  cir.func no_proto internal private @good1() extra(#fn_attr1) {
    %0 = cir.alloca !ty_sockaddr_in, !cir.ptr<!ty_sockaddr_in>, ["service"] {alignment = 4 : i64} loc(#loc460)
    %1 = cir.alloca !s32i, !cir.ptr<!s32i>, ["listenSocket", init] {alignment = 4 : i64} loc(#loc461)
    %2 = cir.alloca !s32i, !cir.ptr<!s32i>, ["acceptSocket", init] {alignment = 4 : i64} loc(#loc462)
    cir.br ^bb1 loc(#loc463)
  ^bb1:  // pred: ^bb0
    %3 = cir.get_global @staticReturnsFalse : !cir.ptr<!cir.func<!s32i ()>> loc(#loc464)
    %4 = cir.call %3() : (!cir.ptr<!cir.func<!s32i ()>>) -> !s32i loc(#loc186)
    %5 = cir.cast(int_to_bool, %4 : !s32i), !cir.bool loc(#loc186)
    cir.brcond %5 ^bb2, ^bb3 loc(#loc465)
  ^bb2:  // pred: ^bb1
    %6 = cir.get_global @".str.4" : !cir.ptr<!cir.array<!s8i x 21>> loc(#loc175)
    %7 = cir.cast(array_to_ptrdecay, %6 : !cir.ptr<!cir.array<!s8i x 21>>), !cir.ptr<!s8i> loc(#loc175)
    cir.call @printLine(%7) : (!cir.ptr<!s8i>) -> () loc(#loc191)
    cir.br ^bb39 loc(#loc189)
  ^bb3:  // pred: ^bb1
    cir.br ^bb4 loc(#loc466)
  ^bb4:  // pred: ^bb3
    %8 = cir.const #cir.int<1> : !s32i loc(#loc181)
    %9 = cir.unary(minus, %8) : !s32i, !s32i loc(#loc181)
    cir.store %9, %1 : !s32i, !cir.ptr<!s32i> loc(#loc461)
    %10 = cir.const #cir.int<1> : !s32i loc(#loc183)
    %11 = cir.unary(minus, %10) : !s32i, !s32i loc(#loc183)
    cir.store %11, %2 : !s32i, !cir.ptr<!s32i> loc(#loc462)
    cir.br ^bb5 loc(#loc467)
  ^bb5:  // pred: ^bb4
    cir.br ^bb7 loc(#loc467)
  ^bb6:  // pred: ^bb27
    %12 = cir.const #cir.int<0> : !s32i loc(#loc196)
    %13 = cir.cast(int_to_bool, %12 : !s32i), !cir.bool loc(#loc196)
    cir.brcond %13 ^bb7, ^bb28 loc(#loc196)
  ^bb7:  // 2 preds: ^bb5, ^bb6
    %14 = cir.const #cir.int<2> : !s32i loc(#loc197)
    %15 = cir.const #cir.int<1> : !s32i loc(#loc198)
    %16 = cir.const #cir.int<6> : !s32i loc(#loc199)
    %17 = cir.call @socket(%14, %15, %16) : (!s32i, !s32i, !s32i) -> !s32i extra(#fn_attr) loc(#loc200)
    cir.store %17, %1 : !s32i, !cir.ptr<!s32i> loc(#loc468)
    cir.br ^bb8 loc(#loc469)
  ^bb8:  // pred: ^bb7
    %18 = cir.load %1 : !cir.ptr<!s32i>, !s32i loc(#loc205)
    %19 = cir.const #cir.int<1> : !s32i loc(#loc206)
    %20 = cir.unary(minus, %19) : !s32i, !s32i loc(#loc206)
    %21 = cir.cmp(eq, %18, %20) : !s32i, !cir.bool loc(#loc470)
    cir.brcond %21 ^bb9, ^bb10 loc(#loc471)
  ^bb9:  // pred: ^bb8
    cir.br ^bb28 loc(#loc208)
  ^bb10:  // pred: ^bb8
    cir.br ^bb11 loc(#loc204)
  ^bb11:  // pred: ^bb10
    %22 = cir.cast(bitcast, %0 : !cir.ptr<!ty_sockaddr_in>), !cir.ptr<!void> loc(#loc472)
    %23 = cir.const #cir.int<0> : !s32i loc(#loc211)
    %24 = cir.const #cir.int<16> : !u64i loc(#loc473)
    cir.libc.memset %24 bytes from %22 set to %23 : !cir.ptr<!void>, !s32i, !u64i loc(#loc474)
    %25 = cir.const #cir.int<2> : !s32i loc(#loc216)
    %26 = cir.cast(integral, %25 : !s32i), !u16i loc(#loc216)
    %27 = cir.get_member %0[0] {name = "sin_family"} : !cir.ptr<!ty_sockaddr_in> -> !cir.ptr<!u16i> loc(#loc69)
    cir.store %26, %27 : !u16i, !cir.ptr<!u16i> loc(#loc475)
    %28 = cir.const #cir.int<0> : !s32i loc(#loc218)
    %29 = cir.cast(integral, %28 : !s32i), !u32i loc(#loc218)
    %30 = cir.get_member %0[2] {name = "sin_addr"} : !cir.ptr<!ty_sockaddr_in> -> !cir.ptr<!ty_in_addr> loc(#loc72)
    %31 = cir.get_member %30[0] {name = "s_addr"} : !cir.ptr<!ty_in_addr> -> !cir.ptr<!u32i> loc(#loc73)
    cir.store %29, %31 : !u32i, !cir.ptr<!u32i> loc(#loc476)
    %32 = cir.const #cir.int<20000> : !s32i loc(#loc220)
    %33 = cir.cast(integral, %32 : !s32i), !u16i loc(#loc220)
    %34 = cir.call @htons(%33) : (!u16i) -> !u16i extra(#fn_attr) loc(#loc221)
    %35 = cir.get_member %0[1] {name = "sin_port"} : !cir.ptr<!ty_sockaddr_in> -> !cir.ptr<!u16i> loc(#loc77)
    cir.store %34, %35 : !u16i, !cir.ptr<!u16i> loc(#loc477)
    cir.br ^bb12 loc(#loc478)
  ^bb12:  // pred: ^bb11
    %36 = cir.load %1 : !cir.ptr<!s32i>, !s32i loc(#loc226)
    %37 = cir.cast(bitcast, %0 : !cir.ptr<!ty_sockaddr_in>), !cir.ptr<!ty_sockaddr> loc(#loc479)
    %38 = cir.const #cir.int<16> : !u64i loc(#loc480)
    %39 = cir.cast(integral, %38 : !u64i), !u32i loc(#loc480)
    %40 = cir.call @bind(%36, %37, %39) : (!s32i, !cir.ptr<!ty_sockaddr>, !u32i) -> !s32i extra(#fn_attr) loc(#loc231)
    %41 = cir.const #cir.int<1> : !s32i loc(#loc232)
    %42 = cir.unary(minus, %41) : !s32i, !s32i loc(#loc232)
    %43 = cir.cmp(eq, %40, %42) : !s32i, !cir.bool loc(#loc481)
    cir.brcond %43 ^bb13, ^bb14 loc(#loc482)
  ^bb13:  // pred: ^bb12
    cir.br ^bb28 loc(#loc234)
  ^bb14:  // pred: ^bb12
    cir.br ^bb15 loc(#loc225)
  ^bb15:  // pred: ^bb14
    cir.br ^bb16 loc(#loc483)
  ^bb16:  // pred: ^bb15
    %44 = cir.load %1 : !cir.ptr<!s32i>, !s32i loc(#loc237)
    %45 = cir.const #cir.int<5> : !s32i loc(#loc238)
    %46 = cir.call @listen(%44, %45) : (!s32i, !s32i) -> !s32i extra(#fn_attr) loc(#loc239)
    %47 = cir.const #cir.int<1> : !s32i loc(#loc240)
    %48 = cir.unary(minus, %47) : !s32i, !s32i loc(#loc240)
    %49 = cir.cmp(eq, %46, %48) : !s32i, !cir.bool loc(#loc484)
    cir.brcond %49 ^bb17, ^bb18 loc(#loc485)
  ^bb17:  // pred: ^bb16
    cir.br ^bb28 loc(#loc242)
  ^bb18:  // pred: ^bb16
    cir.br ^bb19 loc(#loc236)
  ^bb19:  // pred: ^bb18
    %50 = cir.load %1 : !cir.ptr<!s32i>, !s32i loc(#loc243)
    %51 = cir.const #cir.ptr<null> : !cir.ptr<!ty_sockaddr> loc(#loc244)
    %52 = cir.const #cir.ptr<null> : !cir.ptr<!u32i> loc(#loc245)
    %53 = cir.call @accept(%50, %51, %52) : (!s32i, !cir.ptr<!ty_sockaddr>, !cir.ptr<!u32i>) -> !s32i loc(#loc246)
    cir.store %53, %2 : !s32i, !cir.ptr<!s32i> loc(#loc486)
    cir.br ^bb20 loc(#loc487)
  ^bb20:  // pred: ^bb19
    %54 = cir.load %2 : !cir.ptr<!s32i>, !s32i loc(#loc251)
    %55 = cir.const #cir.int<1> : !s32i loc(#loc252)
    %56 = cir.unary(minus, %55) : !s32i, !s32i loc(#loc252)
    %57 = cir.cmp(eq, %54, %56) : !s32i, !cir.bool loc(#loc488)
    cir.brcond %57 ^bb21, ^bb22 loc(#loc489)
  ^bb21:  // pred: ^bb20
    cir.br ^bb28 loc(#loc254)
  ^bb22:  // pred: ^bb20
    cir.br ^bb23 loc(#loc250)
  ^bb23:  // pred: ^bb22
    cir.br ^bb24 loc(#loc490)
  ^bb24:  // pred: ^bb23
    %58 = cir.load %2 : !cir.ptr<!s32i>, !s32i loc(#loc257)
    %59 = cir.get_global @".str.2" : !cir.ptr<!cir.array<!s8i x 9>> loc(#loc258)
    %60 = cir.cast(array_to_ptrdecay, %59 : !cir.ptr<!cir.array<!s8i x 9>>), !cir.ptr<!s8i> loc(#loc258)
    %61 = cir.cast(bitcast, %60 : !cir.ptr<!s8i>), !cir.ptr<!void> loc(#loc258)
    %62 = cir.const #cir.int<8> : !u64i loc(#loc491)
    %63 = cir.const #cir.int<0> : !s32i loc(#loc261)
    %64 = cir.call @send(%58, %61, %62, %63) : (!s32i, !cir.ptr<!void>, !u64i, !s32i) -> !s64i loc(#loc262)
    %65 = cir.const #cir.int<1> : !s32i loc(#loc263)
    %66 = cir.unary(minus, %65) : !s32i, !s32i loc(#loc263)
    %67 = cir.cast(integral, %66 : !s32i), !s64i loc(#loc263)
    %68 = cir.cmp(eq, %64, %67) : !s64i, !cir.bool loc(#loc492)
    cir.brcond %68 ^bb25, ^bb26 loc(#loc493)
  ^bb25:  // pred: ^bb24
    %69 = cir.get_global @".str.3" : !cir.ptr<!cir.array<!s8i x 13>> loc(#loc265)
    %70 = cir.cast(array_to_ptrdecay, %69 : !cir.ptr<!cir.array<!s8i x 13>>), !cir.ptr<!s8i> loc(#loc265)
    cir.call @printLine(%70) : (!cir.ptr<!s8i>) -> () loc(#loc266)
    cir.br ^bb26 loc(#loc256)
  ^bb26:  // 2 preds: ^bb24, ^bb25
    cir.br ^bb27 loc(#loc256)
  ^bb27:  // pred: ^bb26
    cir.br ^bb6 loc(#loc195)
  ^bb28:  // 5 preds: ^bb6, ^bb9, ^bb13, ^bb17, ^bb21
    cir.br ^bb29 loc(#loc195)
  ^bb29:  // pred: ^bb28
    cir.br ^bb30 loc(#loc494)
  ^bb30:  // pred: ^bb29
    %71 = cir.load %1 : !cir.ptr<!s32i>, !s32i loc(#loc269)
    %72 = cir.const #cir.int<1> : !s32i loc(#loc270)
    %73 = cir.unary(minus, %72) : !s32i, !s32i loc(#loc270)
    %74 = cir.cmp(ne, %71, %73) : !s32i, !cir.bool loc(#loc495)
    cir.brcond %74 ^bb31, ^bb32 loc(#loc496)
  ^bb31:  // pred: ^bb30
    %75 = cir.load %1 : !cir.ptr<!s32i>, !s32i loc(#loc272)
    %76 = cir.call @close(%75) : (!s32i) -> !s32i loc(#loc273)
    cir.br ^bb32 loc(#loc268)
  ^bb32:  // 2 preds: ^bb30, ^bb31
    cir.br ^bb33 loc(#loc268)
  ^bb33:  // pred: ^bb32
    cir.br ^bb34 loc(#loc497)
  ^bb34:  // pred: ^bb33
    %77 = cir.load %2 : !cir.ptr<!s32i>, !s32i loc(#loc276)
    %78 = cir.const #cir.int<1> : !s32i loc(#loc277)
    %79 = cir.unary(minus, %78) : !s32i, !s32i loc(#loc277)
    %80 = cir.cmp(ne, %77, %79) : !s32i, !cir.bool loc(#loc498)
    cir.brcond %80 ^bb35, ^bb36 loc(#loc499)
  ^bb35:  // pred: ^bb34
    %81 = cir.load %2 : !cir.ptr<!s32i>, !s32i loc(#loc279)
    %82 = cir.call @close(%81) : (!s32i) -> !s32i loc(#loc280)
    cir.br ^bb36 loc(#loc275)
  ^bb36:  // 2 preds: ^bb34, ^bb35
    cir.br ^bb37 loc(#loc275)
  ^bb37:  // pred: ^bb36
    cir.br ^bb38 loc(#loc193)
  ^bb38:  // pred: ^bb37
    cir.br ^bb39 loc(#loc185)
  ^bb39:  // 2 preds: ^bb2, ^bb38
    cir.br ^bb40 loc(#loc185)
  ^bb40:  // pred: ^bb39
    cir.return loc(#loc177)
  } loc(#loc459)
  cir.func no_proto internal private @staticReturnsFalse() -> !s32i extra(#fn_attr1) {
    %0 = cir.alloca !s32i, !cir.ptr<!s32i>, ["__retval"] {alignment = 4 : i64} loc(#loc282)
    %1 = cir.const #cir.int<0> : !s32i loc(#loc283)
    cir.store %1, %0 : !s32i, !cir.ptr<!s32i> loc(#loc501)
    %2 = cir.load %0 : !cir.ptr<!s32i>, !s32i loc(#loc501)
    cir.return %2 : !s32i loc(#loc501)
  } loc(#loc500)
  cir.func no_proto internal private @good2() extra(#fn_attr1) {
    %0 = cir.alloca !ty_sockaddr_in, !cir.ptr<!ty_sockaddr_in>, ["service"] {alignment = 4 : i64} loc(#loc503)
    %1 = cir.alloca !s32i, !cir.ptr<!s32i>, ["listenSocket", init] {alignment = 4 : i64} loc(#loc504)
    %2 = cir.alloca !s32i, !cir.ptr<!s32i>, ["acceptSocket", init] {alignment = 4 : i64} loc(#loc505)
    cir.br ^bb1 loc(#loc506)
  ^bb1:  // pred: ^bb0
    %3 = cir.get_global @staticReturnsTrue : !cir.ptr<!cir.func<!s32i ()>> loc(#loc507)
    %4 = cir.call @staticReturnsTrue() : () -> !s32i loc(#loc295)
    %5 = cir.cast(int_to_bool, %4 : !s32i), !cir.bool loc(#loc295)
    cir.brcond %5 ^bb2, ^bb38 loc(#loc508)
  ^bb2:  // pred: ^bb1
    cir.br ^bb3 loc(#loc509)
  ^bb3:  // pred: ^bb2
    %6 = cir.const #cir.int<1> : !s32i loc(#loc290)
    %7 = cir.unary(minus, %6) : !s32i, !s32i loc(#loc290)
    cir.store %7, %1 : !s32i, !cir.ptr<!s32i> loc(#loc504)
    %8 = cir.const #cir.int<1> : !s32i loc(#loc292)
    %9 = cir.unary(minus, %8) : !s32i, !s32i loc(#loc292)
    cir.store %9, %2 : !s32i, !cir.ptr<!s32i> loc(#loc505)
    cir.br ^bb4 loc(#loc510)
  ^bb4:  // pred: ^bb3
    cir.br ^bb6 loc(#loc510)
  ^bb5:  // pred: ^bb26
    %10 = cir.const #cir.int<0> : !s32i loc(#loc302)
    %11 = cir.cast(int_to_bool, %10 : !s32i), !cir.bool loc(#loc302)
    cir.brcond %11 ^bb6, ^bb27 loc(#loc302)
  ^bb6:  // 2 preds: ^bb4, ^bb5
    %12 = cir.const #cir.int<2> : !s32i loc(#loc303)
    %13 = cir.const #cir.int<1> : !s32i loc(#loc304)
    %14 = cir.const #cir.int<6> : !s32i loc(#loc305)
    %15 = cir.call @socket(%12, %13, %14) : (!s32i, !s32i, !s32i) -> !s32i extra(#fn_attr) loc(#loc306)
    cir.store %15, %1 : !s32i, !cir.ptr<!s32i> loc(#loc511)
    cir.br ^bb7 loc(#loc512)
  ^bb7:  // pred: ^bb6
    %16 = cir.load %1 : !cir.ptr<!s32i>, !s32i loc(#loc311)
    %17 = cir.const #cir.int<1> : !s32i loc(#loc312)
    %18 = cir.unary(minus, %17) : !s32i, !s32i loc(#loc312)
    %19 = cir.cmp(eq, %16, %18) : !s32i, !cir.bool loc(#loc513)
    cir.brcond %19 ^bb8, ^bb9 loc(#loc514)
  ^bb8:  // pred: ^bb7
    cir.br ^bb27 loc(#loc314)
  ^bb9:  // pred: ^bb7
    cir.br ^bb10 loc(#loc310)
  ^bb10:  // pred: ^bb9
    %20 = cir.cast(bitcast, %0 : !cir.ptr<!ty_sockaddr_in>), !cir.ptr<!void> loc(#loc515)
    %21 = cir.const #cir.int<0> : !s32i loc(#loc317)
    %22 = cir.const #cir.int<16> : !u64i loc(#loc516)
    cir.libc.memset %22 bytes from %20 set to %21 : !cir.ptr<!void>, !s32i, !u64i loc(#loc517)
    %23 = cir.const #cir.int<2> : !s32i loc(#loc322)
    %24 = cir.cast(integral, %23 : !s32i), !u16i loc(#loc322)
    %25 = cir.get_member %0[0] {name = "sin_family"} : !cir.ptr<!ty_sockaddr_in> -> !cir.ptr<!u16i> loc(#loc69)
    cir.store %24, %25 : !u16i, !cir.ptr<!u16i> loc(#loc518)
    %26 = cir.const #cir.int<0> : !s32i loc(#loc324)
    %27 = cir.cast(integral, %26 : !s32i), !u32i loc(#loc324)
    %28 = cir.get_member %0[2] {name = "sin_addr"} : !cir.ptr<!ty_sockaddr_in> -> !cir.ptr<!ty_in_addr> loc(#loc72)
    %29 = cir.get_member %28[0] {name = "s_addr"} : !cir.ptr<!ty_in_addr> -> !cir.ptr<!u32i> loc(#loc73)
    cir.store %27, %29 : !u32i, !cir.ptr<!u32i> loc(#loc519)
    %30 = cir.const #cir.int<20000> : !s32i loc(#loc326)
    %31 = cir.cast(integral, %30 : !s32i), !u16i loc(#loc326)
    %32 = cir.call @htons(%31) : (!u16i) -> !u16i extra(#fn_attr) loc(#loc327)
    %33 = cir.get_member %0[1] {name = "sin_port"} : !cir.ptr<!ty_sockaddr_in> -> !cir.ptr<!u16i> loc(#loc77)
    cir.store %32, %33 : !u16i, !cir.ptr<!u16i> loc(#loc520)
    cir.br ^bb11 loc(#loc521)
  ^bb11:  // pred: ^bb10
    %34 = cir.load %1 : !cir.ptr<!s32i>, !s32i loc(#loc332)
    %35 = cir.cast(bitcast, %0 : !cir.ptr<!ty_sockaddr_in>), !cir.ptr<!ty_sockaddr> loc(#loc522)
    %36 = cir.const #cir.int<16> : !u64i loc(#loc523)
    %37 = cir.cast(integral, %36 : !u64i), !u32i loc(#loc523)
    %38 = cir.call @bind(%34, %35, %37) : (!s32i, !cir.ptr<!ty_sockaddr>, !u32i) -> !s32i extra(#fn_attr) loc(#loc337)
    %39 = cir.const #cir.int<1> : !s32i loc(#loc338)
    %40 = cir.unary(minus, %39) : !s32i, !s32i loc(#loc338)
    %41 = cir.cmp(eq, %38, %40) : !s32i, !cir.bool loc(#loc524)
    cir.brcond %41 ^bb12, ^bb13 loc(#loc525)
  ^bb12:  // pred: ^bb11
    cir.br ^bb27 loc(#loc340)
  ^bb13:  // pred: ^bb11
    cir.br ^bb14 loc(#loc331)
  ^bb14:  // pred: ^bb13
    cir.br ^bb15 loc(#loc526)
  ^bb15:  // pred: ^bb14
    %42 = cir.load %1 : !cir.ptr<!s32i>, !s32i loc(#loc343)
    %43 = cir.const #cir.int<5> : !s32i loc(#loc344)
    %44 = cir.call @listen(%42, %43) : (!s32i, !s32i) -> !s32i extra(#fn_attr) loc(#loc345)
    %45 = cir.const #cir.int<1> : !s32i loc(#loc346)
    %46 = cir.unary(minus, %45) : !s32i, !s32i loc(#loc346)
    %47 = cir.cmp(eq, %44, %46) : !s32i, !cir.bool loc(#loc527)
    cir.brcond %47 ^bb16, ^bb17 loc(#loc528)
  ^bb16:  // pred: ^bb15
    cir.br ^bb27 loc(#loc348)
  ^bb17:  // pred: ^bb15
    cir.br ^bb18 loc(#loc342)
  ^bb18:  // pred: ^bb17
    %48 = cir.load %1 : !cir.ptr<!s32i>, !s32i loc(#loc349)
    %49 = cir.const #cir.ptr<null> : !cir.ptr<!ty_sockaddr> loc(#loc350)
    %50 = cir.const #cir.ptr<null> : !cir.ptr<!u32i> loc(#loc351)
    %51 = cir.call @accept(%48, %49, %50) : (!s32i, !cir.ptr<!ty_sockaddr>, !cir.ptr<!u32i>) -> !s32i loc(#loc352)
    cir.store %51, %2 : !s32i, !cir.ptr<!s32i> loc(#loc529)
    cir.br ^bb19 loc(#loc530)
  ^bb19:  // pred: ^bb18
    %52 = cir.load %2 : !cir.ptr<!s32i>, !s32i loc(#loc357)
    %53 = cir.const #cir.int<1> : !s32i loc(#loc358)
    %54 = cir.unary(minus, %53) : !s32i, !s32i loc(#loc358)
    %55 = cir.cmp(eq, %52, %54) : !s32i, !cir.bool loc(#loc531)
    cir.brcond %55 ^bb20, ^bb21 loc(#loc532)
  ^bb20:  // pred: ^bb19
    cir.br ^bb27 loc(#loc360)
  ^bb21:  // pred: ^bb19
    cir.br ^bb22 loc(#loc356)
  ^bb22:  // pred: ^bb21
    cir.br ^bb23 loc(#loc533)
  ^bb23:  // pred: ^bb22
    %56 = cir.load %2 : !cir.ptr<!s32i>, !s32i loc(#loc363)
    %57 = cir.get_global @".str.2" : !cir.ptr<!cir.array<!s8i x 9>> loc(#loc364)
    %58 = cir.cast(array_to_ptrdecay, %57 : !cir.ptr<!cir.array<!s8i x 9>>), !cir.ptr<!s8i> loc(#loc364)
    %59 = cir.cast(bitcast, %58 : !cir.ptr<!s8i>), !cir.ptr<!void> loc(#loc364)
    %60 = cir.const #cir.int<8> : !u64i loc(#loc534)
    %61 = cir.const #cir.int<0> : !s32i loc(#loc367)
    %62 = cir.call @send(%56, %59, %60, %61) : (!s32i, !cir.ptr<!void>, !u64i, !s32i) -> !s64i loc(#loc368)
    %63 = cir.const #cir.int<1> : !s32i loc(#loc369)
    %64 = cir.unary(minus, %63) : !s32i, !s32i loc(#loc369)
    %65 = cir.cast(integral, %64 : !s32i), !s64i loc(#loc369)
    %66 = cir.cmp(eq, %62, %65) : !s64i, !cir.bool loc(#loc535)
    cir.brcond %66 ^bb24, ^bb25 loc(#loc536)
  ^bb24:  // pred: ^bb23
    %67 = cir.get_global @".str.3" : !cir.ptr<!cir.array<!s8i x 13>> loc(#loc371)
    %68 = cir.cast(array_to_ptrdecay, %67 : !cir.ptr<!cir.array<!s8i x 13>>), !cir.ptr<!s8i> loc(#loc371)
    cir.call @printLine(%68) : (!cir.ptr<!s8i>) -> () loc(#loc372)
    cir.br ^bb25 loc(#loc362)
  ^bb25:  // 2 preds: ^bb23, ^bb24
    cir.br ^bb26 loc(#loc362)
  ^bb26:  // pred: ^bb25
    cir.br ^bb5 loc(#loc301)
  ^bb27:  // 5 preds: ^bb5, ^bb8, ^bb12, ^bb16, ^bb20
    cir.br ^bb28 loc(#loc301)
  ^bb28:  // pred: ^bb27
    cir.br ^bb29 loc(#loc537)
  ^bb29:  // pred: ^bb28
    %69 = cir.load %1 : !cir.ptr<!s32i>, !s32i loc(#loc375)
    %70 = cir.const #cir.int<1> : !s32i loc(#loc376)
    %71 = cir.unary(minus, %70) : !s32i, !s32i loc(#loc376)
    %72 = cir.cmp(ne, %69, %71) : !s32i, !cir.bool loc(#loc538)
    cir.brcond %72 ^bb30, ^bb31 loc(#loc539)
  ^bb30:  // pred: ^bb29
    %73 = cir.load %1 : !cir.ptr<!s32i>, !s32i loc(#loc378)
    %74 = cir.call @close(%73) : (!s32i) -> !s32i loc(#loc379)
    cir.br ^bb31 loc(#loc374)
  ^bb31:  // 2 preds: ^bb29, ^bb30
    cir.br ^bb32 loc(#loc374)
  ^bb32:  // pred: ^bb31
    cir.br ^bb33 loc(#loc540)
  ^bb33:  // pred: ^bb32
    %75 = cir.load %2 : !cir.ptr<!s32i>, !s32i loc(#loc382)
    %76 = cir.const #cir.int<1> : !s32i loc(#loc383)
    %77 = cir.unary(minus, %76) : !s32i, !s32i loc(#loc383)
    %78 = cir.cmp(ne, %75, %77) : !s32i, !cir.bool loc(#loc541)
    cir.brcond %78 ^bb34, ^bb35 loc(#loc542)
  ^bb34:  // pred: ^bb33
    %79 = cir.load %2 : !cir.ptr<!s32i>, !s32i loc(#loc385)
    %80 = cir.call @close(%79) : (!s32i) -> !s32i loc(#loc386)
    cir.br ^bb35 loc(#loc381)
  ^bb35:  // 2 preds: ^bb33, ^bb34
    cir.br ^bb36 loc(#loc381)
  ^bb36:  // pred: ^bb35
    cir.br ^bb37 loc(#loc299)
  ^bb37:  // pred: ^bb36
    cir.br ^bb38 loc(#loc294)
  ^bb38:  // 2 preds: ^bb1, ^bb37
    cir.br ^bb39 loc(#loc294)
  ^bb39:  // pred: ^bb38
    cir.return loc(#loc286)
  } loc(#loc502)
} loc(#loc)
#loc = loc("/home/ladisgin/git_proj/juliet-c/testcases/CWE510_Trapdoor/CWE510_Trapdoor__ip_based_logic_08.c":0:0)
#loc1 = loc("/usr/include/sys/socket.h":102:1)
#loc2 = loc("/usr/include/sys/socket.h":102:62)
#loc3 = loc("/usr/include/netinet/in.h":404:1)
#loc4 = loc("/usr/include/netinet/in.h":405:40)
#loc5 = loc("/usr/include/sys/socket.h":112:1)
#loc6 = loc("/usr/include/sys/socket.h":113:6)
#loc7 = loc("/usr/include/sys/socket.h":296:1)
#loc8 = loc("/usr/include/sys/socket.h":296:39)
#loc9 = loc("/usr/include/sys/socket.h":306:1)
#loc10 = loc("/usr/include/sys/socket.h":307:38)
#loc11 = loc("/usr/include/sys/socket.h":116:1)
#loc12 = loc("/usr/include/sys/socket.h":117:33)
#loc13 = loc("/usr/include/string.h":156:1)
#loc14 = loc("/usr/include/string.h":157:33)
#loc15 = loc("CWE510_Trapdoor__ip_based_logic_08.c":103:28)
#loc16 = loc("/usr/include/arpa/inet.h":53:1)
#loc17 = loc("/usr/include/arpa/inet.h":53:46)
#loc18 = loc("/usr/include/sys/socket.h":138:1)
#loc19 = loc("/usr/include/sys/socket.h":138:74)
#loc20 = loc("CWE510_Trapdoor__ip_based_logic_08.c":105:44)
#loc21 = loc("CWE510_Trapdoor__ip_based_logic_08.c":113:44)
#loc22 = loc("../../testcasesupport/std_testcase_io.h":14:1)
#loc23 = loc("../../testcasesupport/std_testcase_io.h":14:33)
#loc24 = loc("CWE510_Trapdoor__ip_based_logic_08.c":115:35)
#loc25 = loc("/usr/include/unistd.h":358:1)
#loc26 = loc("/usr/include/unistd.h":358:27)
#loc27 = loc("CWE510_Trapdoor__ip_based_logic_08.c":54:1)
#loc28 = loc("CWE510_Trapdoor__ip_based_logic_08.c":136:1)
#loc29 = loc("CWE510_Trapdoor__ip_based_logic_08.c":63:13)
#loc30 = loc("CWE510_Trapdoor__ip_based_logic_08.c":63:32)
#loc31 = loc("CWE510_Trapdoor__ip_based_logic_08.c":63:41)
#loc32 = loc("CWE510_Trapdoor__ip_based_logic_08.c":64:13)
#loc33 = loc("CWE510_Trapdoor__ip_based_logic_08.c":64:56)
#loc34 = loc("CWE510_Trapdoor__ip_based_logic_08.c":65:13)
#loc35 = loc("CWE510_Trapdoor__ip_based_logic_08.c":65:35)
#loc36 = loc("CWE510_Trapdoor__ip_based_logic_08.c":66:13)
#loc37 = loc("CWE510_Trapdoor__ip_based_logic_08.c":66:35)
#loc38 = loc("CWE510_Trapdoor__ip_based_logic_08.c":56:5)
#loc39 = loc("CWE510_Trapdoor__ip_based_logic_08.c":135:5)
#loc40 = loc("CWE510_Trapdoor__ip_based_logic_08.c":56:8)
#loc41 = loc("CWE510_Trapdoor__ip_based_logic_08.c":56:26)
#loc42 = loc("CWE510_Trapdoor__ip_based_logic_08.c":57:5)
#loc43 = loc("CWE510_Trapdoor__ip_based_logic_08.c":58:9)
#loc44 = loc("CWE510_Trapdoor__ip_based_logic_08.c":134:9)
#loc45 = loc("CWE510_Trapdoor__ip_based_logic_08.c":64:36)
#loc46 = loc("CWE510_Trapdoor__ip_based_logic_08.c":67:13)
#loc47 = loc("CWE510_Trapdoor__ip_based_logic_08.c":119:21)
#loc48 = loc("CWE510_Trapdoor__ip_based_logic_08.c":119:20)
#loc49 = loc("CWE510_Trapdoor__ip_based_logic_08.c":76:39)
#loc50 = loc("CWE510_Trapdoor__ip_based_logic_08.c":76:48)
#loc51 = loc("CWE510_Trapdoor__ip_based_logic_08.c":76:61)
#loc52 = loc("CWE510_Trapdoor__ip_based_logic_08.c":76:32)
#loc53 = loc("CWE510_Trapdoor__ip_based_logic_08.c":76:17)
#loc54 = loc("CWE510_Trapdoor__ip_based_logic_08.c":76:72)
#loc55 = loc("CWE510_Trapdoor__ip_based_logic_08.c":77:17)
#loc56 = loc("CWE510_Trapdoor__ip_based_logic_08.c":80:17)
#loc57 = loc("CWE510_Trapdoor__ip_based_logic_08.c":77:21)
#loc58 = loc("CWE510_Trapdoor__ip_based_logic_08.c":77:37)
#loc59 = loc("CWE510_Trapdoor__ip_based_logic_08.c":78:17)
#loc60 = loc("CWE510_Trapdoor__ip_based_logic_08.c":79:21)
#loc61 = loc("CWE510_Trapdoor__ip_based_logic_08.c":81:24)
#loc62 = loc("CWE510_Trapdoor__ip_based_logic_08.c":81:25)
#loc63 = loc("CWE510_Trapdoor__ip_based_logic_08.c":81:34)
#loc64 = loc("CWE510_Trapdoor__ip_based_logic_08.c":81:37)
#loc65 = loc("CWE510_Trapdoor__ip_based_logic_08.c":81:51)
#loc66 = loc("CWE510_Trapdoor__ip_based_logic_08.c":81:17)
#loc67 = loc("CWE510_Trapdoor__ip_based_logic_08.c":81:52)
#loc68 = loc("CWE510_Trapdoor__ip_based_logic_08.c":82:38)
#loc69 = loc("/usr/include/netinet/in.h":249:5)
#loc70 = loc("CWE510_Trapdoor__ip_based_logic_08.c":82:17)
#loc71 = loc("CWE510_Trapdoor__ip_based_logic_08.c":83:43)
#loc72 = loc("/usr/include/netinet/in.h":251:20)
#loc73 = loc("/usr/include/netinet/in.h":33:15)
#loc74 = loc("CWE510_Trapdoor__ip_based_logic_08.c":83:17)
#loc75 = loc("CWE510_Trapdoor__ip_based_logic_08.c":84:42)
#loc76 = loc("CWE510_Trapdoor__ip_based_logic_08.c":84:36)
#loc77 = loc("/usr/include/netinet/in.h":250:15)
#loc78 = loc("CWE510_Trapdoor__ip_based_logic_08.c":84:17)
#loc79 = loc("CWE510_Trapdoor__ip_based_logic_08.c":84:47)
#loc80 = loc("CWE510_Trapdoor__ip_based_logic_08.c":85:17)
#loc81 = loc("CWE510_Trapdoor__ip_based_logic_08.c":88:17)
#loc82 = loc("CWE510_Trapdoor__ip_based_logic_08.c":85:26)
#loc83 = loc("CWE510_Trapdoor__ip_based_logic_08.c":85:58)
#loc84 = loc("CWE510_Trapdoor__ip_based_logic_08.c":85:59)
#loc85 = loc("CWE510_Trapdoor__ip_based_logic_08.c":85:68)
#loc86 = loc("CWE510_Trapdoor__ip_based_logic_08.c":85:82)
#loc87 = loc("CWE510_Trapdoor__ip_based_logic_08.c":85:21)
#loc88 = loc("CWE510_Trapdoor__ip_based_logic_08.c":85:88)
#loc89 = loc("CWE510_Trapdoor__ip_based_logic_08.c":86:17)
#loc90 = loc("CWE510_Trapdoor__ip_based_logic_08.c":87:21)
#loc91 = loc("CWE510_Trapdoor__ip_based_logic_08.c":89:17)
#loc92 = loc("CWE510_Trapdoor__ip_based_logic_08.c":92:17)
#loc93 = loc("CWE510_Trapdoor__ip_based_logic_08.c":89:28)
#loc94 = loc("CWE510_Trapdoor__ip_based_logic_08.c":89:42)
#loc95 = loc("CWE510_Trapdoor__ip_based_logic_08.c":89:21)
#loc96 = loc("CWE510_Trapdoor__ip_based_logic_08.c":89:48)
#loc97 = loc("CWE510_Trapdoor__ip_based_logic_08.c":90:17)
#loc98 = loc("CWE510_Trapdoor__ip_based_logic_08.c":91:21)
#loc99 = loc("CWE510_Trapdoor__ip_based_logic_08.c":93:39)
#loc100 = loc("CWE510_Trapdoor__ip_based_logic_08.c":93:53)
#loc101 = loc("CWE510_Trapdoor__ip_based_logic_08.c":93:59)
#loc102 = loc("CWE510_Trapdoor__ip_based_logic_08.c":93:32)
#loc103 = loc("CWE510_Trapdoor__ip_based_logic_08.c":93:17)
#loc104 = loc("CWE510_Trapdoor__ip_based_logic_08.c":93:63)
#loc105 = loc("CWE510_Trapdoor__ip_based_logic_08.c":94:17)
#loc106 = loc("CWE510_Trapdoor__ip_based_logic_08.c":97:17)
#loc107 = loc("CWE510_Trapdoor__ip_based_logic_08.c":94:21)
#loc108 = loc("CWE510_Trapdoor__ip_based_logic_08.c":94:37)
#loc109 = loc("CWE510_Trapdoor__ip_based_logic_08.c":95:17)
#loc110 = loc("CWE510_Trapdoor__ip_based_logic_08.c":96:21)
#loc111 = loc("CWE510_Trapdoor__ip_based_logic_08.c":98:17)
#loc112 = loc("CWE510_Trapdoor__ip_based_logic_08.c":101:17)
#loc113 = loc("CWE510_Trapdoor__ip_based_logic_08.c":98:33)
#loc114 = loc("CWE510_Trapdoor__ip_based_logic_08.c":98:66)
#loc115 = loc("CWE510_Trapdoor__ip_based_logic_08.c":98:67)
#loc116 = loc("CWE510_Trapdoor__ip_based_logic_08.c":98:82)
#loc117 = loc("CWE510_Trapdoor__ip_based_logic_08.c":98:83)
#loc118 = loc("CWE510_Trapdoor__ip_based_logic_08.c":98:21)
#loc119 = loc("CWE510_Trapdoor__ip_based_logic_08.c":98:105)
#loc120 = loc("CWE510_Trapdoor__ip_based_logic_08.c":98:104)
#loc121 = loc("CWE510_Trapdoor__ip_based_logic_08.c":99:17)
#loc122 = loc("CWE510_Trapdoor__ip_based_logic_08.c":100:21)
#loc123 = loc("CWE510_Trapdoor__ip_based_logic_08.c":103:17)
#loc124 = loc("CWE510_Trapdoor__ip_based_logic_08.c":117:17)
#loc125 = loc("CWE510_Trapdoor__ip_based_logic_08.c":103:21)
#loc126 = loc("CWE510_Trapdoor__ip_based_logic_08.c":103:46)
#loc127 = loc("CWE510_Trapdoor__ip_based_logic_08.c":103:84)
#loc128 = loc("CWE510_Trapdoor__ip_based_logic_08.c":104:17)
#loc129 = loc("CWE510_Trapdoor__ip_based_logic_08.c":110:17)
#loc130 = loc("CWE510_Trapdoor__ip_based_logic_08.c":112:17)
#loc131 = loc("CWE510_Trapdoor__ip_based_logic_08.c":105:21)
#loc132 = loc("CWE510_Trapdoor__ip_based_logic_08.c":109:21)
#loc133 = loc("CWE510_Trapdoor__ip_based_logic_08.c":105:30)
#loc134 = loc("CWE510_Trapdoor__ip_based_logic_08.c":105:59)
#loc135 = loc("CWE510_Trapdoor__ip_based_logic_08.c":105:79)
#loc136 = loc("CWE510_Trapdoor__ip_based_logic_08.c":105:82)
#loc137 = loc("CWE510_Trapdoor__ip_based_logic_08.c":105:25)
#loc138 = loc("CWE510_Trapdoor__ip_based_logic_08.c":105:89)
#loc139 = loc("CWE510_Trapdoor__ip_based_logic_08.c":106:21)
#loc140 = loc("CWE510_Trapdoor__ip_based_logic_08.c":108:25)
#loc141 = loc("CWE510_Trapdoor__ip_based_logic_08.c":113:21)
#loc142 = loc("CWE510_Trapdoor__ip_based_logic_08.c":116:21)
#loc143 = loc("CWE510_Trapdoor__ip_based_logic_08.c":113:30)
#loc144 = loc("CWE510_Trapdoor__ip_based_logic_08.c":113:61)
#loc145 = loc("CWE510_Trapdoor__ip_based_logic_08.c":113:83)
#loc146 = loc("CWE510_Trapdoor__ip_based_logic_08.c":113:86)
#loc147 = loc("CWE510_Trapdoor__ip_based_logic_08.c":113:25)
#loc148 = loc("CWE510_Trapdoor__ip_based_logic_08.c":113:92)
#loc149 = loc("CWE510_Trapdoor__ip_based_logic_08.c":114:21)
#loc150 = loc("CWE510_Trapdoor__ip_based_logic_08.c":115:25)
#loc151 = loc("CWE510_Trapdoor__ip_based_logic_08.c":120:13)
#loc152 = loc("CWE510_Trapdoor__ip_based_logic_08.c":123:13)
#loc153 = loc("CWE510_Trapdoor__ip_based_logic_08.c":120:17)
#loc154 = loc("CWE510_Trapdoor__ip_based_logic_08.c":120:33)
#loc155 = loc("CWE510_Trapdoor__ip_based_logic_08.c":121:13)
#loc156 = loc("CWE510_Trapdoor__ip_based_logic_08.c":122:30)
#loc157 = loc("CWE510_Trapdoor__ip_based_logic_08.c":122:17)
#loc158 = loc("CWE510_Trapdoor__ip_based_logic_08.c":124:13)
#loc159 = loc("CWE510_Trapdoor__ip_based_logic_08.c":127:13)
#loc160 = loc("CWE510_Trapdoor__ip_based_logic_08.c":124:17)
#loc161 = loc("CWE510_Trapdoor__ip_based_logic_08.c":124:33)
#loc162 = loc("CWE510_Trapdoor__ip_based_logic_08.c":125:13)
#loc163 = loc("CWE510_Trapdoor__ip_based_logic_08.c":126:30)
#loc164 = loc("CWE510_Trapdoor__ip_based_logic_08.c":126:17)
#loc165 = loc("CWE510_Trapdoor__ip_based_logic_08.c":285:1)
#loc166 = loc("CWE510_Trapdoor__ip_based_logic_08.c":289:1)
#loc167 = loc("CWE510_Trapdoor__ip_based_logic_08.c":287:5)
#loc168 = loc("CWE510_Trapdoor__ip_based_logic_08.c":287:11)
#loc169 = loc("CWE510_Trapdoor__ip_based_logic_08.c":288:5)
#loc170 = loc("CWE510_Trapdoor__ip_based_logic_08.c":288:11)
#loc171 = loc("CWE510_Trapdoor__ip_based_logic_08.c":42:1)
#loc172 = loc("CWE510_Trapdoor__ip_based_logic_08.c":45:1)
#loc173 = loc("CWE510_Trapdoor__ip_based_logic_08.c":44:12)
#loc174 = loc("CWE510_Trapdoor__ip_based_logic_08.c":44:5)
#loc175 = loc("CWE510_Trapdoor__ip_based_logic_08.c":148:19)
#loc176 = loc("CWE510_Trapdoor__ip_based_logic_08.c":143:1)
#loc177 = loc("CWE510_Trapdoor__ip_based_logic_08.c":214:1)
#loc178 = loc("CWE510_Trapdoor__ip_based_logic_08.c":157:13)
#loc179 = loc("CWE510_Trapdoor__ip_based_logic_08.c":157:32)
#loc180 = loc("CWE510_Trapdoor__ip_based_logic_08.c":158:13)
#loc181 = loc("CWE510_Trapdoor__ip_based_logic_08.c":158:35)
#loc182 = loc("CWE510_Trapdoor__ip_based_logic_08.c":159:13)
#loc183 = loc("CWE510_Trapdoor__ip_based_logic_08.c":159:35)
#loc184 = loc("CWE510_Trapdoor__ip_based_logic_08.c":145:5)
#loc185 = loc("CWE510_Trapdoor__ip_based_logic_08.c":213:5)
#loc186 = loc("CWE510_Trapdoor__ip_based_logic_08.c":145:8)
#loc187 = loc("CWE510_Trapdoor__ip_based_logic_08.c":145:27)
#loc188 = loc("CWE510_Trapdoor__ip_based_logic_08.c":146:5)
#loc189 = loc("CWE510_Trapdoor__ip_based_logic_08.c":149:5)
#loc190 = loc("CWE510_Trapdoor__ip_based_logic_08.c":151:5)
#loc191 = loc("CWE510_Trapdoor__ip_based_logic_08.c":148:9)
#loc192 = loc("CWE510_Trapdoor__ip_based_logic_08.c":152:9)
#loc193 = loc("CWE510_Trapdoor__ip_based_logic_08.c":212:9)
#loc194 = loc("CWE510_Trapdoor__ip_based_logic_08.c":160:13)
#loc195 = loc("CWE510_Trapdoor__ip_based_logic_08.c":197:21)
#loc196 = loc("CWE510_Trapdoor__ip_based_logic_08.c":197:20)
#loc197 = loc("CWE510_Trapdoor__ip_based_logic_08.c":169:39)
#loc198 = loc("CWE510_Trapdoor__ip_based_logic_08.c":169:48)
#loc199 = loc("CWE510_Trapdoor__ip_based_logic_08.c":169:61)
#loc200 = loc("CWE510_Trapdoor__ip_based_logic_08.c":169:32)
#loc201 = loc("CWE510_Trapdoor__ip_based_logic_08.c":169:17)
#loc202 = loc("CWE510_Trapdoor__ip_based_logic_08.c":169:72)
#loc203 = loc("CWE510_Trapdoor__ip_based_logic_08.c":170:17)
#loc204 = loc("CWE510_Trapdoor__ip_based_logic_08.c":173:17)
#loc205 = loc("CWE510_Trapdoor__ip_based_logic_08.c":170:21)
#loc206 = loc("CWE510_Trapdoor__ip_based_logic_08.c":170:37)
#loc207 = loc("CWE510_Trapdoor__ip_based_logic_08.c":171:17)
#loc208 = loc("CWE510_Trapdoor__ip_based_logic_08.c":172:21)
#loc209 = loc("CWE510_Trapdoor__ip_based_logic_08.c":174:24)
#loc210 = loc("CWE510_Trapdoor__ip_based_logic_08.c":174:25)
#loc211 = loc("CWE510_Trapdoor__ip_based_logic_08.c":174:34)
#loc212 = loc("CWE510_Trapdoor__ip_based_logic_08.c":174:37)
#loc213 = loc("CWE510_Trapdoor__ip_based_logic_08.c":174:51)
#loc214 = loc("CWE510_Trapdoor__ip_based_logic_08.c":174:17)
#loc215 = loc("CWE510_Trapdoor__ip_based_logic_08.c":174:52)
#loc216 = loc("CWE510_Trapdoor__ip_based_logic_08.c":175:38)
#loc217 = loc("CWE510_Trapdoor__ip_based_logic_08.c":175:17)
#loc218 = loc("CWE510_Trapdoor__ip_based_logic_08.c":176:43)
#loc219 = loc("CWE510_Trapdoor__ip_based_logic_08.c":176:17)
#loc220 = loc("CWE510_Trapdoor__ip_based_logic_08.c":177:42)
#loc221 = loc("CWE510_Trapdoor__ip_based_logic_08.c":177:36)
#loc222 = loc("CWE510_Trapdoor__ip_based_logic_08.c":177:17)
#loc223 = loc("CWE510_Trapdoor__ip_based_logic_08.c":177:47)
#loc224 = loc("CWE510_Trapdoor__ip_based_logic_08.c":178:17)
#loc225 = loc("CWE510_Trapdoor__ip_based_logic_08.c":181:17)
#loc226 = loc("CWE510_Trapdoor__ip_based_logic_08.c":178:26)
#loc227 = loc("CWE510_Trapdoor__ip_based_logic_08.c":178:58)
#loc228 = loc("CWE510_Trapdoor__ip_based_logic_08.c":178:59)
#loc229 = loc("CWE510_Trapdoor__ip_based_logic_08.c":178:68)
#loc230 = loc("CWE510_Trapdoor__ip_based_logic_08.c":178:82)
#loc231 = loc("CWE510_Trapdoor__ip_based_logic_08.c":178:21)
#loc232 = loc("CWE510_Trapdoor__ip_based_logic_08.c":178:88)
#loc233 = loc("CWE510_Trapdoor__ip_based_logic_08.c":179:17)
#loc234 = loc("CWE510_Trapdoor__ip_based_logic_08.c":180:21)
#loc235 = loc("CWE510_Trapdoor__ip_based_logic_08.c":182:17)
#loc236 = loc("CWE510_Trapdoor__ip_based_logic_08.c":185:17)
#loc237 = loc("CWE510_Trapdoor__ip_based_logic_08.c":182:28)
#loc238 = loc("CWE510_Trapdoor__ip_based_logic_08.c":182:42)
#loc239 = loc("CWE510_Trapdoor__ip_based_logic_08.c":182:21)
#loc240 = loc("CWE510_Trapdoor__ip_based_logic_08.c":182:48)
#loc241 = loc("CWE510_Trapdoor__ip_based_logic_08.c":183:17)
#loc242 = loc("CWE510_Trapdoor__ip_based_logic_08.c":184:21)
#loc243 = loc("CWE510_Trapdoor__ip_based_logic_08.c":186:39)
#loc244 = loc("CWE510_Trapdoor__ip_based_logic_08.c":186:53)
#loc245 = loc("CWE510_Trapdoor__ip_based_logic_08.c":186:59)
#loc246 = loc("CWE510_Trapdoor__ip_based_logic_08.c":186:32)
#loc247 = loc("CWE510_Trapdoor__ip_based_logic_08.c":186:17)
#loc248 = loc("CWE510_Trapdoor__ip_based_logic_08.c":186:63)
#loc249 = loc("CWE510_Trapdoor__ip_based_logic_08.c":187:17)
#loc250 = loc("CWE510_Trapdoor__ip_based_logic_08.c":190:17)
#loc251 = loc("CWE510_Trapdoor__ip_based_logic_08.c":187:21)
#loc252 = loc("CWE510_Trapdoor__ip_based_logic_08.c":187:37)
#loc253 = loc("CWE510_Trapdoor__ip_based_logic_08.c":188:17)
#loc254 = loc("CWE510_Trapdoor__ip_based_logic_08.c":189:21)
#loc255 = loc("CWE510_Trapdoor__ip_based_logic_08.c":192:17)
#loc256 = loc("CWE510_Trapdoor__ip_based_logic_08.c":195:17)
#loc257 = loc("CWE510_Trapdoor__ip_based_logic_08.c":192:26)
#loc258 = loc("CWE510_Trapdoor__ip_based_logic_08.c":192:40)
#loc259 = loc("CWE510_Trapdoor__ip_based_logic_08.c":192:57)
#loc260 = loc("CWE510_Trapdoor__ip_based_logic_08.c":192:79)
#loc261 = loc("CWE510_Trapdoor__ip_based_logic_08.c":192:82)
#loc262 = loc("CWE510_Trapdoor__ip_based_logic_08.c":192:21)
#loc263 = loc("CWE510_Trapdoor__ip_based_logic_08.c":192:88)
#loc264 = loc("CWE510_Trapdoor__ip_based_logic_08.c":193:17)
#loc265 = loc("CWE510_Trapdoor__ip_based_logic_08.c":194:31)
#loc266 = loc("CWE510_Trapdoor__ip_based_logic_08.c":194:21)
#loc267 = loc("CWE510_Trapdoor__ip_based_logic_08.c":198:13)
#loc268 = loc("CWE510_Trapdoor__ip_based_logic_08.c":201:13)
#loc269 = loc("CWE510_Trapdoor__ip_based_logic_08.c":198:17)
#loc270 = loc("CWE510_Trapdoor__ip_based_logic_08.c":198:33)
#loc271 = loc("CWE510_Trapdoor__ip_based_logic_08.c":199:13)
#loc272 = loc("CWE510_Trapdoor__ip_based_logic_08.c":200:30)
#loc273 = loc("CWE510_Trapdoor__ip_based_logic_08.c":200:17)
#loc274 = loc("CWE510_Trapdoor__ip_based_logic_08.c":202:13)
#loc275 = loc("CWE510_Trapdoor__ip_based_logic_08.c":205:13)
#loc276 = loc("CWE510_Trapdoor__ip_based_logic_08.c":202:17)
#loc277 = loc("CWE510_Trapdoor__ip_based_logic_08.c":202:33)
#loc278 = loc("CWE510_Trapdoor__ip_based_logic_08.c":203:13)
#loc279 = loc("CWE510_Trapdoor__ip_based_logic_08.c":204:30)
#loc280 = loc("CWE510_Trapdoor__ip_based_logic_08.c":204:17)
#loc281 = loc("CWE510_Trapdoor__ip_based_logic_08.c":47:1)
#loc282 = loc("CWE510_Trapdoor__ip_based_logic_08.c":50:1)
#loc283 = loc("CWE510_Trapdoor__ip_based_logic_08.c":49:12)
#loc284 = loc("CWE510_Trapdoor__ip_based_logic_08.c":49:5)
#loc285 = loc("CWE510_Trapdoor__ip_based_logic_08.c":217:1)
#loc286 = loc("CWE510_Trapdoor__ip_based_logic_08.c":283:1)
#loc287 = loc("CWE510_Trapdoor__ip_based_logic_08.c":226:13)
#loc288 = loc("CWE510_Trapdoor__ip_based_logic_08.c":226:32)
#loc289 = loc("CWE510_Trapdoor__ip_based_logic_08.c":227:13)
#loc290 = loc("CWE510_Trapdoor__ip_based_logic_08.c":227:35)
#loc291 = loc("CWE510_Trapdoor__ip_based_logic_08.c":228:13)
#loc292 = loc("CWE510_Trapdoor__ip_based_logic_08.c":228:35)
#loc293 = loc("CWE510_Trapdoor__ip_based_logic_08.c":219:5)
#loc294 = loc("CWE510_Trapdoor__ip_based_logic_08.c":282:5)
#loc295 = loc("CWE510_Trapdoor__ip_based_logic_08.c":219:8)
#loc296 = loc("CWE510_Trapdoor__ip_based_logic_08.c":219:26)
#loc297 = loc("CWE510_Trapdoor__ip_based_logic_08.c":220:5)
#loc298 = loc("CWE510_Trapdoor__ip_based_logic_08.c":221:9)
#loc299 = loc("CWE510_Trapdoor__ip_based_logic_08.c":281:9)
#loc300 = loc("CWE510_Trapdoor__ip_based_logic_08.c":229:13)
#loc301 = loc("CWE510_Trapdoor__ip_based_logic_08.c":266:21)
#loc302 = loc("CWE510_Trapdoor__ip_based_logic_08.c":266:20)
#loc303 = loc("CWE510_Trapdoor__ip_based_logic_08.c":238:39)
#loc304 = loc("CWE510_Trapdoor__ip_based_logic_08.c":238:48)
#loc305 = loc("CWE510_Trapdoor__ip_based_logic_08.c":238:61)
#loc306 = loc("CWE510_Trapdoor__ip_based_logic_08.c":238:32)
#loc307 = loc("CWE510_Trapdoor__ip_based_logic_08.c":238:17)
#loc308 = loc("CWE510_Trapdoor__ip_based_logic_08.c":238:72)
#loc309 = loc("CWE510_Trapdoor__ip_based_logic_08.c":239:17)
#loc310 = loc("CWE510_Trapdoor__ip_based_logic_08.c":242:17)
#loc311 = loc("CWE510_Trapdoor__ip_based_logic_08.c":239:21)
#loc312 = loc("CWE510_Trapdoor__ip_based_logic_08.c":239:37)
#loc313 = loc("CWE510_Trapdoor__ip_based_logic_08.c":240:17)
#loc314 = loc("CWE510_Trapdoor__ip_based_logic_08.c":241:21)
#loc315 = loc("CWE510_Trapdoor__ip_based_logic_08.c":243:24)
#loc316 = loc("CWE510_Trapdoor__ip_based_logic_08.c":243:25)
#loc317 = loc("CWE510_Trapdoor__ip_based_logic_08.c":243:34)
#loc318 = loc("CWE510_Trapdoor__ip_based_logic_08.c":243:37)
#loc319 = loc("CWE510_Trapdoor__ip_based_logic_08.c":243:51)
#loc320 = loc("CWE510_Trapdoor__ip_based_logic_08.c":243:17)
#loc321 = loc("CWE510_Trapdoor__ip_based_logic_08.c":243:52)
#loc322 = loc("CWE510_Trapdoor__ip_based_logic_08.c":244:38)
#loc323 = loc("CWE510_Trapdoor__ip_based_logic_08.c":244:17)
#loc324 = loc("CWE510_Trapdoor__ip_based_logic_08.c":245:43)
#loc325 = loc("CWE510_Trapdoor__ip_based_logic_08.c":245:17)
#loc326 = loc("CWE510_Trapdoor__ip_based_logic_08.c":246:42)
#loc327 = loc("CWE510_Trapdoor__ip_based_logic_08.c":246:36)
#loc328 = loc("CWE510_Trapdoor__ip_based_logic_08.c":246:17)
#loc329 = loc("CWE510_Trapdoor__ip_based_logic_08.c":246:47)
#loc330 = loc("CWE510_Trapdoor__ip_based_logic_08.c":247:17)
#loc331 = loc("CWE510_Trapdoor__ip_based_logic_08.c":250:17)
#loc332 = loc("CWE510_Trapdoor__ip_based_logic_08.c":247:26)
#loc333 = loc("CWE510_Trapdoor__ip_based_logic_08.c":247:58)
#loc334 = loc("CWE510_Trapdoor__ip_based_logic_08.c":247:59)
#loc335 = loc("CWE510_Trapdoor__ip_based_logic_08.c":247:68)
#loc336 = loc("CWE510_Trapdoor__ip_based_logic_08.c":247:82)
#loc337 = loc("CWE510_Trapdoor__ip_based_logic_08.c":247:21)
#loc338 = loc("CWE510_Trapdoor__ip_based_logic_08.c":247:88)
#loc339 = loc("CWE510_Trapdoor__ip_based_logic_08.c":248:17)
#loc340 = loc("CWE510_Trapdoor__ip_based_logic_08.c":249:21)
#loc341 = loc("CWE510_Trapdoor__ip_based_logic_08.c":251:17)
#loc342 = loc("CWE510_Trapdoor__ip_based_logic_08.c":254:17)
#loc343 = loc("CWE510_Trapdoor__ip_based_logic_08.c":251:28)
#loc344 = loc("CWE510_Trapdoor__ip_based_logic_08.c":251:42)
#loc345 = loc("CWE510_Trapdoor__ip_based_logic_08.c":251:21)
#loc346 = loc("CWE510_Trapdoor__ip_based_logic_08.c":251:48)
#loc347 = loc("CWE510_Trapdoor__ip_based_logic_08.c":252:17)
#loc348 = loc("CWE510_Trapdoor__ip_based_logic_08.c":253:21)
#loc349 = loc("CWE510_Trapdoor__ip_based_logic_08.c":255:39)
#loc350 = loc("CWE510_Trapdoor__ip_based_logic_08.c":255:53)
#loc351 = loc("CWE510_Trapdoor__ip_based_logic_08.c":255:59)
#loc352 = loc("CWE510_Trapdoor__ip_based_logic_08.c":255:32)
#loc353 = loc("CWE510_Trapdoor__ip_based_logic_08.c":255:17)
#loc354 = loc("CWE510_Trapdoor__ip_based_logic_08.c":255:63)
#loc355 = loc("CWE510_Trapdoor__ip_based_logic_08.c":256:17)
#loc356 = loc("CWE510_Trapdoor__ip_based_logic_08.c":259:17)
#loc357 = loc("CWE510_Trapdoor__ip_based_logic_08.c":256:21)
#loc358 = loc("CWE510_Trapdoor__ip_based_logic_08.c":256:37)
#loc359 = loc("CWE510_Trapdoor__ip_based_logic_08.c":257:17)
#loc360 = loc("CWE510_Trapdoor__ip_based_logic_08.c":258:21)
#loc361 = loc("CWE510_Trapdoor__ip_based_logic_08.c":261:17)
#loc362 = loc("CWE510_Trapdoor__ip_based_logic_08.c":264:17)
#loc363 = loc("CWE510_Trapdoor__ip_based_logic_08.c":261:26)
#loc364 = loc("CWE510_Trapdoor__ip_based_logic_08.c":261:40)
#loc365 = loc("CWE510_Trapdoor__ip_based_logic_08.c":261:57)
#loc366 = loc("CWE510_Trapdoor__ip_based_logic_08.c":261:79)
#loc367 = loc("CWE510_Trapdoor__ip_based_logic_08.c":261:82)
#loc368 = loc("CWE510_Trapdoor__ip_based_logic_08.c":261:21)
#loc369 = loc("CWE510_Trapdoor__ip_based_logic_08.c":261:88)
#loc370 = loc("CWE510_Trapdoor__ip_based_logic_08.c":262:17)
#loc371 = loc("CWE510_Trapdoor__ip_based_logic_08.c":263:31)
#loc372 = loc("CWE510_Trapdoor__ip_based_logic_08.c":263:21)
#loc373 = loc("CWE510_Trapdoor__ip_based_logic_08.c":267:13)
#loc374 = loc("CWE510_Trapdoor__ip_based_logic_08.c":270:13)
#loc375 = loc("CWE510_Trapdoor__ip_based_logic_08.c":267:17)
#loc376 = loc("CWE510_Trapdoor__ip_based_logic_08.c":267:33)
#loc377 = loc("CWE510_Trapdoor__ip_based_logic_08.c":268:13)
#loc378 = loc("CWE510_Trapdoor__ip_based_logic_08.c":269:30)
#loc379 = loc("CWE510_Trapdoor__ip_based_logic_08.c":269:17)
#loc380 = loc("CWE510_Trapdoor__ip_based_logic_08.c":271:13)
#loc381 = loc("CWE510_Trapdoor__ip_based_logic_08.c":274:13)
#loc382 = loc("CWE510_Trapdoor__ip_based_logic_08.c":271:17)
#loc383 = loc("CWE510_Trapdoor__ip_based_logic_08.c":271:33)
#loc384 = loc("CWE510_Trapdoor__ip_based_logic_08.c":272:13)
#loc385 = loc("CWE510_Trapdoor__ip_based_logic_08.c":273:30)
#loc386 = loc("CWE510_Trapdoor__ip_based_logic_08.c":273:17)
#loc387 = loc(fused[#loc1, #loc2])
#loc388 = loc(fused[#loc3, #loc4])
#loc389 = loc(fused[#loc5, #loc6])
#loc390 = loc(fused[#loc7, #loc8])
#loc391 = loc(fused[#loc9, #loc10])
#loc392 = loc(fused[#loc11, #loc12])
#loc393 = loc(fused[#loc13, #loc14])
#loc394 = loc(fused[#loc16, #loc17])
#loc395 = loc(fused[#loc18, #loc19])
#loc396 = loc(fused[#loc22, #loc23])
#loc397 = loc(fused[#loc25, #loc26])
#loc398 = loc(fused[#loc27, #loc28])
#loc399 = loc(fused[#loc29, #loc30])
#loc400 = loc(fused[#loc29, #loc31])
#loc401 = loc(fused[#loc32, #loc33])
#loc402 = loc(fused[#loc34, #loc35])
#loc403 = loc(fused[#loc36, #loc37])
#loc404 = loc(fused[#loc38, #loc39])
#loc405 = loc(fused[#loc40, #loc41])
#loc406 = loc(fused[#loc42, #loc39])
#loc407 = loc(fused[#loc43, #loc44])
#loc408 = loc(fused[#loc45, #loc33])
#loc409 = loc(fused[#loc46, #loc47])
#loc410 = loc(fused[#loc53, #loc54])
#loc411 = loc(fused[#loc55, #loc56])
#loc412 = loc(fused[#loc57, #loc58])
#loc413 = loc(fused[#loc59, #loc56])
#loc414 = loc(fused[#loc61, #loc62])
#loc415 = loc(fused[#loc64, #loc65])
#loc416 = loc(fused[#loc66, #loc67])
#loc417 = loc(fused[#loc70, #loc68])
#loc418 = loc(fused[#loc74, #loc71])
#loc419 = loc(fused[#loc78, #loc79])
#loc420 = loc(fused[#loc80, #loc81])
#loc421 = loc(fused[#loc83, #loc84])
#loc422 = loc(fused[#loc85, #loc86])
#loc423 = loc(fused[#loc87, #loc88])
#loc424 = loc(fused[#loc89, #loc81])
#loc425 = loc(fused[#loc91, #loc92])
#loc426 = loc(fused[#loc95, #loc96])
#loc427 = loc(fused[#loc97, #loc92])
#loc428 = loc(fused[#loc103, #loc104])
#loc429 = loc(fused[#loc105, #loc106])
#loc430 = loc(fused[#loc107, #loc108])
#loc431 = loc(fused[#loc109, #loc106])
#loc432 = loc(fused[#loc111, #loc112])
#loc433 = loc(fused[#loc114, #loc115])
#loc434 = loc(fused[#loc116, #loc117])
#loc435 = loc(fused[#loc118, #loc119])
#loc436 = loc(fused[#loc121, #loc112])
#loc437 = loc(fused[#loc123, #loc124])
#loc438 = loc(fused[#loc125, #loc127])
#loc439 = loc(fused[#loc128, #loc129, #loc130, #loc124])
#loc440 = loc(fused[#loc131, #loc132])
#loc441 = loc(fused[#loc134, #loc135])
#loc442 = loc(fused[#loc137, #loc138])
#loc443 = loc(fused[#loc139, #loc132])
#loc444 = loc(fused[#loc141, #loc142])
#loc445 = loc(fused[#loc144, #loc145])
#loc446 = loc(fused[#loc147, #loc148])
#loc447 = loc(fused[#loc149, #loc142])
#loc448 = loc(fused[#loc151, #loc152])
#loc449 = loc(fused[#loc153, #loc154])
#loc450 = loc(fused[#loc155, #loc152])
#loc451 = loc(fused[#loc158, #loc159])
#loc452 = loc(fused[#loc160, #loc161])
#loc453 = loc(fused[#loc162, #loc159])
#loc454 = loc(fused[#loc165, #loc166])
#loc455 = loc(fused[#loc167, #loc168])
#loc456 = loc(fused[#loc169, #loc170])
#loc457 = loc(fused[#loc171, #loc172])
#loc458 = loc(fused[#loc174, #loc173])
#loc459 = loc(fused[#loc176, #loc177])
#loc460 = loc(fused[#loc178, #loc179])
#loc461 = loc(fused[#loc180, #loc181])
#loc462 = loc(fused[#loc182, #loc183])
#loc463 = loc(fused[#loc184, #loc185])
#loc464 = loc(fused[#loc186, #loc187])
#loc465 = loc(fused[#loc188, #loc189, #loc190, #loc185])
#loc466 = loc(fused[#loc192, #loc193])
#loc467 = loc(fused[#loc194, #loc195])
#loc468 = loc(fused[#loc201, #loc202])
#loc469 = loc(fused[#loc203, #loc204])
#loc470 = loc(fused[#loc205, #loc206])
#loc471 = loc(fused[#loc207, #loc204])
#loc472 = loc(fused[#loc209, #loc210])
#loc473 = loc(fused[#loc212, #loc213])
#loc474 = loc(fused[#loc214, #loc215])
#loc475 = loc(fused[#loc217, #loc216])
#loc476 = loc(fused[#loc219, #loc218])
#loc477 = loc(fused[#loc222, #loc223])
#loc478 = loc(fused[#loc224, #loc225])
#loc479 = loc(fused[#loc227, #loc228])
#loc480 = loc(fused[#loc229, #loc230])
#loc481 = loc(fused[#loc231, #loc232])
#loc482 = loc(fused[#loc233, #loc225])
#loc483 = loc(fused[#loc235, #loc236])
#loc484 = loc(fused[#loc239, #loc240])
#loc485 = loc(fused[#loc241, #loc236])
#loc486 = loc(fused[#loc247, #loc248])
#loc487 = loc(fused[#loc249, #loc250])
#loc488 = loc(fused[#loc251, #loc252])
#loc489 = loc(fused[#loc253, #loc250])
#loc490 = loc(fused[#loc255, #loc256])
#loc491 = loc(fused[#loc259, #loc260])
#loc492 = loc(fused[#loc262, #loc263])
#loc493 = loc(fused[#loc264, #loc256])
#loc494 = loc(fused[#loc267, #loc268])
#loc495 = loc(fused[#loc269, #loc270])
#loc496 = loc(fused[#loc271, #loc268])
#loc497 = loc(fused[#loc274, #loc275])
#loc498 = loc(fused[#loc276, #loc277])
#loc499 = loc(fused[#loc278, #loc275])
#loc500 = loc(fused[#loc281, #loc282])
#loc501 = loc(fused[#loc284, #loc283])
#loc502 = loc(fused[#loc285, #loc286])
#loc503 = loc(fused[#loc287, #loc288])
#loc504 = loc(fused[#loc289, #loc290])
#loc505 = loc(fused[#loc291, #loc292])
#loc506 = loc(fused[#loc293, #loc294])
#loc507 = loc(fused[#loc295, #loc296])
#loc508 = loc(fused[#loc297, #loc294])
#loc509 = loc(fused[#loc298, #loc299])
#loc510 = loc(fused[#loc300, #loc301])
#loc511 = loc(fused[#loc307, #loc308])
#loc512 = loc(fused[#loc309, #loc310])
#loc513 = loc(fused[#loc311, #loc312])
#loc514 = loc(fused[#loc313, #loc310])
#loc515 = loc(fused[#loc315, #loc316])
#loc516 = loc(fused[#loc318, #loc319])
#loc517 = loc(fused[#loc320, #loc321])
#loc518 = loc(fused[#loc323, #loc322])
#loc519 = loc(fused[#loc325, #loc324])
#loc520 = loc(fused[#loc328, #loc329])
#loc521 = loc(fused[#loc330, #loc331])
#loc522 = loc(fused[#loc333, #loc334])
#loc523 = loc(fused[#loc335, #loc336])
#loc524 = loc(fused[#loc337, #loc338])
#loc525 = loc(fused[#loc339, #loc331])
#loc526 = loc(fused[#loc341, #loc342])
#loc527 = loc(fused[#loc345, #loc346])
#loc528 = loc(fused[#loc347, #loc342])
#loc529 = loc(fused[#loc353, #loc354])
#loc530 = loc(fused[#loc355, #loc356])
#loc531 = loc(fused[#loc357, #loc358])
#loc532 = loc(fused[#loc359, #loc356])
#loc533 = loc(fused[#loc361, #loc362])
#loc534 = loc(fused[#loc365, #loc366])
#loc535 = loc(fused[#loc368, #loc369])
#loc536 = loc(fused[#loc370, #loc362])
#loc537 = loc(fused[#loc373, #loc374])
#loc538 = loc(fused[#loc375, #loc376])
#loc539 = loc(fused[#loc377, #loc374])
#loc540 = loc(fused[#loc380, #loc381])
#loc541 = loc(fused[#loc382, #loc383])
#loc542 = loc(fused[#loc384, #loc381])
