!s32i = !cir.int<s, 32>
!s64i = !cir.int<s, 64>
!s8i = !cir.int<s, 8>
!ty__IO_codecvt = !cir.struct<struct "_IO_codecvt" incomplete>
!ty__IO_marker = !cir.struct<struct "_IO_marker" incomplete>
!ty__IO_wide_data = !cir.struct<struct "_IO_wide_data" incomplete>
!u16i = !cir.int<u, 16>
!u32i = !cir.int<u, 32>
!void = !cir.void
#fn_attr = #cir<extra({nothrow = #cir.nothrow})>
#fn_attr1 = #cir<extra({inline = #cir.inline<no>, nothrow = #cir.nothrow, optnone = #cir.optnone})>
#loc60 = loc("CWE681_Incorrect_Conversion_Between_Numeric_Types__doubleNaN2int_08.c":156:10)
#loc61 = loc("CWE681_Incorrect_Conversion_Between_Numeric_Types__doubleNaN2int_08.c":156:14)
#loc62 = loc("CWE681_Incorrect_Conversion_Between_Numeric_Types__doubleNaN2int_08.c":156:20)
#loc63 = loc("CWE681_Incorrect_Conversion_Between_Numeric_Types__doubleNaN2int_08.c":156:32)
#loc194 = loc(fused[#loc60, #loc61])
#loc195 = loc(fused[#loc62, #loc63])
!ty__IO_FILE = !cir.struct<struct "_IO_FILE" {!s32i, !cir.ptr<!s8i>, !cir.ptr<!s8i>, !cir.ptr<!s8i>, !cir.ptr<!s8i>, !cir.ptr<!s8i>, !cir.ptr<!s8i>, !cir.ptr<!s8i>, !cir.ptr<!s8i>, !cir.ptr<!s8i>, !cir.ptr<!s8i>, !cir.ptr<!s8i>, !cir.ptr<!ty__IO_marker>, !cir.ptr<!cir.struct<struct "_IO_FILE">>, !s32i, !s32i, !s64i, !u16i, !s8i, !cir.array<!s8i x 1>, !cir.ptr<!void>, !s64i, !cir.ptr<!ty__IO_codecvt>, !cir.ptr<!ty__IO_wide_data>, !cir.ptr<!cir.struct<struct "_IO_FILE">>, !cir.ptr<!void>, !cir.ptr<!cir.ptr<!cir.struct<struct "_IO_FILE">>>, !s32i, !cir.array<!s8i x 20>} #cir.record.decl.ast>
module @"/home/ladisgin/git_proj/juliet-c/testcases/CWE681_Incorrect_Conversion_Between_Numeric_Types/CWE681_Incorrect_Conversion_Between_Numeric_Types__doubleNaN2int_08.c" attributes {cir.lang = #cir.lang<c>, cir.sob = #cir.signed_overflow_behavior<undefined>, cir.triple = "x86_64-unknown-linux-gnu", dlti.dl_spec = #dlti.dl_spec<!llvm.ptr<270> = dense<32> : vector<4xi64>, f64 = dense<64> : vector<2xi64>, f128 = dense<128> : vector<2xi64>, !llvm.ptr<272> = dense<64> : vector<4xi64>, !llvm.ptr<271> = dense<32> : vector<4xi64>, i128 = dense<128> : vector<2xi64>, i64 = dense<64> : vector<2xi64>, f80 = dense<128> : vector<2xi64>, i1 = dense<8> : vector<2xi64>, i8 = dense<8> : vector<2xi64>, !llvm.ptr = dense<64> : vector<4xi64>, f16 = dense<16> : vector<2xi64>, i16 = dense<16> : vector<2xi64>, i32 = dense<32> : vector<2xi64>, "dlti.stack_alignment" = 128 : i64, "dlti.endianness" = "little">} {
  cir.func private @fgets(!cir.ptr<!s8i>, !s32i, !cir.ptr<!ty__IO_FILE>) -> !cir.ptr<!s8i> loc(#loc172)
  cir.global "private" external @stdin : !cir.ptr<!ty__IO_FILE> {alignment = 8 : i64} loc(#loc173)
  cir.func private @atof(!cir.ptr<!s8i>) -> !cir.double extra(#fn_attr) loc(#loc174)
  cir.func private @printLine(!cir.ptr<!s8i>) loc(#loc175)
  cir.global "private" constant cir_private dsolocal @".str" = #cir.const_array<"fgets() failed.\00" : !cir.array<!s8i x 16>> : !cir.array<!s8i x 16> {alignment = 1 : i64} loc(#loc9)
  cir.func private @printIntLine(!s32i) loc(#loc176)
  cir.func private @sqrt(!cir.double) -> !cir.double extra(#fn_attr) loc(#loc12)
  cir.func no_proto @CWE681_Incorrect_Conversion_Between_Numeric_Types__doubleNaN2int_08_bad() extra(#fn_attr1) {
    %0 = cir.alloca !cir.array<!s8i x 256>, !cir.ptr<!cir.array<!s8i x 256>>, ["inputBuffer"] {alignment = 16 : i64} loc(#loc178)
    %1 = cir.alloca !cir.double, !cir.ptr<!cir.double>, ["doubleNumber", init] {alignment = 8 : i64} loc(#loc179)
    cir.br ^bb1 loc(#loc180)
  ^bb1:  // pred: ^bb0
    %2 = cir.get_global @staticReturnsTrue : !cir.ptr<!cir.func<!s32i ()>> loc(#loc181)
    %3 = cir.call %2() : (!cir.ptr<!cir.func<!s32i ()>>) -> !s32i loc(#loc21)
    %4 = cir.cast(int_to_bool, %3 : !s32i), !cir.bool loc(#loc21)
    cir.brcond %4 ^bb2, ^bb10 loc(#loc182)
  ^bb2:  // pred: ^bb1
    cir.br ^bb3 loc(#loc183)
  ^bb3:  // pred: ^bb2
    %5 = cir.const #cir.int<0> : !s32i loc(#loc18)
    %6 = cir.cast(int_to_float, %5 : !s32i), !cir.double loc(#loc18)
    cir.store %6, %1 : !cir.double, !cir.ptr<!cir.double> loc(#loc179)
    cir.br ^bb4 loc(#loc184)
  ^bb4:  // pred: ^bb3
    %7 = cir.cast(array_to_ptrdecay, %0 : !cir.ptr<!cir.array<!s8i x 256>>), !cir.ptr<!s8i> loc(#loc28)
    %8 = cir.const #cir.int<256> : !s32i loc(#loc29)
    %9 = cir.get_global @stdin : !cir.ptr<!cir.ptr<!ty__IO_FILE>> loc(#loc173)
    %10 = cir.load %9 : !cir.ptr<!cir.ptr<!ty__IO_FILE>>, !cir.ptr<!ty__IO_FILE> loc(#loc30)
    %11 = cir.call @fgets(%7, %8, %10) : (!cir.ptr<!s8i>, !s32i, !cir.ptr<!ty__IO_FILE>) -> !cir.ptr<!s8i> loc(#loc31)
    %12 = cir.const #cir.ptr<null> : !cir.ptr<!void> loc(#loc32)
    %13 = cir.cast(bitcast, %12 : !cir.ptr<!void>), !cir.ptr<!s8i> loc(#loc32)
    %14 = cir.cmp(ne, %11, %13) : !cir.ptr<!s8i>, !cir.bool loc(#loc185)
    cir.brcond %14 ^bb5, ^bb6 loc(#loc186)
  ^bb5:  // pred: ^bb4
    %15 = cir.cast(array_to_ptrdecay, %0 : !cir.ptr<!cir.array<!s8i x 256>>), !cir.ptr<!s8i> loc(#loc36)
    %16 = cir.call @atof(%15) : (!cir.ptr<!s8i>) -> !cir.double extra(#fn_attr) loc(#loc37)
    cir.store %16, %1 : !cir.double, !cir.ptr<!cir.double> loc(#loc187)
    cir.br ^bb7 loc(#loc34)
  ^bb6:  // pred: ^bb4
    %17 = cir.get_global @".str" : !cir.ptr<!cir.array<!s8i x 16>> loc(#loc9)
    %18 = cir.cast(array_to_ptrdecay, %17 : !cir.ptr<!cir.array<!s8i x 16>>), !cir.ptr<!s8i> loc(#loc9)
    cir.call @printLine(%18) : (!cir.ptr<!s8i>) -> () loc(#loc40)
    cir.br ^bb7 loc(#loc27)
  ^bb7:  // 2 preds: ^bb5, ^bb6
    cir.br ^bb8 loc(#loc27)
  ^bb8:  // pred: ^bb7
    %19 = cir.load %1 : !cir.ptr<!cir.double>, !cir.double loc(#loc41)
    %20 = cir.call @sqrt(%19) : (!cir.double) -> !cir.double extra(#fn_attr) loc(#loc42)
    %21 = cir.cast(float_to_int, %20 : !cir.double), !s32i loc(#loc42)
    cir.call @printIntLine(%21) : (!s32i) -> () loc(#loc43)
    cir.br ^bb9 loc(#loc25)
  ^bb9:  // pred: ^bb8
    cir.br ^bb10 loc(#loc20)
  ^bb10:  // 2 preds: ^bb1, ^bb9
    cir.br ^bb11 loc(#loc20)
  ^bb11:  // pred: ^bb10
    cir.return loc(#loc14)
  } loc(#loc177)
  cir.func no_proto @CWE681_Incorrect_Conversion_Between_Numeric_Types__doubleNaN2int_08_good() extra(#fn_attr1) {
    %0 = cir.get_global @good1 : !cir.ptr<!cir.func<!void ()>> loc(#loc189)
    cir.call %0() : (!cir.ptr<!cir.func<!void ()>>) -> () loc(#loc46)
    %1 = cir.get_global @good2 : !cir.ptr<!cir.func<!void ()>> loc(#loc190)
    cir.call %1() : (!cir.ptr<!cir.func<!void ()>>) -> () loc(#loc48)
    cir.return loc(#loc45)
  } loc(#loc188)
  cir.func private @srand(!u32i) extra(#fn_attr) loc(#loc191)
  cir.func private @time(!cir.ptr<!s64i>) -> !s64i extra(#fn_attr) loc(#loc192)
  cir.global "private" constant cir_private dsolocal @".str.1" = #cir.const_array<"Calling good()...\00" : !cir.array<!s8i x 18>> : !cir.array<!s8i x 18> {alignment = 1 : i64} loc(#loc54)
  cir.global "private" constant cir_private dsolocal @".str.2" = #cir.const_array<"Finished good()\00" : !cir.array<!s8i x 16>> : !cir.array<!s8i x 16> {alignment = 1 : i64} loc(#loc55)
  cir.global "private" constant cir_private dsolocal @".str.3" = #cir.const_array<"Calling bad()...\00" : !cir.array<!s8i x 17>> : !cir.array<!s8i x 17> {alignment = 1 : i64} loc(#loc56)
  cir.global "private" constant cir_private dsolocal @".str.4" = #cir.const_array<"Finished bad()\00" : !cir.array<!s8i x 15>> : !cir.array<!s8i x 15> {alignment = 1 : i64} loc(#loc57)
  cir.func @main(%arg0: !s32i loc(fused[#loc60, #loc61]), %arg1: !cir.ptr<!cir.ptr<!s8i>> loc(fused[#loc62, #loc63])) -> !s32i extra(#fn_attr1) {
    %0 = cir.alloca !s32i, !cir.ptr<!s32i>, ["argc", init] {alignment = 4 : i64} loc(#loc194)
    %1 = cir.alloca !cir.ptr<!cir.ptr<!s8i>>, !cir.ptr<!cir.ptr<!cir.ptr<!s8i>>>, ["argv", init] {alignment = 8 : i64} loc(#loc195)
    %2 = cir.alloca !s32i, !cir.ptr<!s32i>, ["__retval"] {alignment = 4 : i64} loc(#loc59)
    cir.store %arg0, %0 : !s32i, !cir.ptr<!s32i> loc(#loc64)
    cir.store %arg1, %1 : !cir.ptr<!cir.ptr<!s8i>>, !cir.ptr<!cir.ptr<!cir.ptr<!s8i>>> loc(#loc64)
    %3 = cir.const #cir.ptr<null> : !cir.ptr<!s64i> loc(#loc65)
    %4 = cir.call @time(%3) : (!cir.ptr<!s64i>) -> !s64i extra(#fn_attr) loc(#loc66)
    %5 = cir.cast(integral, %4 : !s64i), !u32i loc(#loc66)
    cir.call @srand(%5) : (!u32i) -> () extra(#fn_attr) loc(#loc67)
    %6 = cir.get_global @".str.1" : !cir.ptr<!cir.array<!s8i x 18>> loc(#loc54)
    %7 = cir.cast(array_to_ptrdecay, %6 : !cir.ptr<!cir.array<!s8i x 18>>), !cir.ptr<!s8i> loc(#loc54)
    cir.call @printLine(%7) : (!cir.ptr<!s8i>) -> () loc(#loc68)
    %8 = cir.get_global @CWE681_Incorrect_Conversion_Between_Numeric_Types__doubleNaN2int_08_good : !cir.ptr<!cir.func<!void ()>> loc(#loc196)
    cir.call @CWE681_Incorrect_Conversion_Between_Numeric_Types__doubleNaN2int_08_good() : () -> () loc(#loc69)
    %9 = cir.get_global @".str.2" : !cir.ptr<!cir.array<!s8i x 16>> loc(#loc55)
    %10 = cir.cast(array_to_ptrdecay, %9 : !cir.ptr<!cir.array<!s8i x 16>>), !cir.ptr<!s8i> loc(#loc55)
    cir.call @printLine(%10) : (!cir.ptr<!s8i>) -> () loc(#loc71)
    %11 = cir.get_global @".str.3" : !cir.ptr<!cir.array<!s8i x 17>> loc(#loc56)
    %12 = cir.cast(array_to_ptrdecay, %11 : !cir.ptr<!cir.array<!s8i x 17>>), !cir.ptr<!s8i> loc(#loc56)
    cir.call @printLine(%12) : (!cir.ptr<!s8i>) -> () loc(#loc72)
    %13 = cir.get_global @CWE681_Incorrect_Conversion_Between_Numeric_Types__doubleNaN2int_08_bad : !cir.ptr<!cir.func<!void ()>> loc(#loc197)
    cir.call @CWE681_Incorrect_Conversion_Between_Numeric_Types__doubleNaN2int_08_bad() : () -> () loc(#loc73)
    %14 = cir.get_global @".str.4" : !cir.ptr<!cir.array<!s8i x 15>> loc(#loc57)
    %15 = cir.cast(array_to_ptrdecay, %14 : !cir.ptr<!cir.array<!s8i x 15>>), !cir.ptr<!s8i> loc(#loc57)
    cir.call @printLine(%15) : (!cir.ptr<!s8i>) -> () loc(#loc75)
    %16 = cir.const #cir.int<0> : !s32i loc(#loc76)
    cir.store %16, %2 : !s32i, !cir.ptr<!s32i> loc(#loc198)
    %17 = cir.load %2 : !cir.ptr<!s32i>, !s32i loc(#loc198)
    cir.return %17 : !s32i loc(#loc198)
  } loc(#loc193)
  cir.func no_proto internal private @staticReturnsTrue() -> !s32i extra(#fn_attr1) {
    %0 = cir.alloca !s32i, !cir.ptr<!s32i>, ["__retval"] {alignment = 4 : i64} loc(#loc79)
    %1 = cir.const #cir.int<1> : !s32i loc(#loc80)
    cir.store %1, %0 : !s32i, !cir.ptr<!s32i> loc(#loc200)
    %2 = cir.load %0 : !cir.ptr<!s32i>, !s32i loc(#loc200)
    cir.return %2 : !s32i loc(#loc200)
  } loc(#loc199)
  cir.global "private" constant cir_private dsolocal @".str.5" = #cir.const_array<"Benign, fixed string\00" : !cir.array<!s8i x 21>> : !cir.array<!s8i x 21> {alignment = 1 : i64} loc(#loc82)
  cir.global "private" constant cir_private dsolocal @".str.6" = #cir.const_array<"Value is negative\00" : !cir.array<!s8i x 18>> : !cir.array<!s8i x 18> {alignment = 1 : i64} loc(#loc83)
  cir.func no_proto internal private @good1() extra(#fn_attr1) {
    %0 = cir.alloca !cir.array<!s8i x 256>, !cir.ptr<!cir.array<!s8i x 256>>, ["inputBuffer"] {alignment = 16 : i64} loc(#loc202)
    %1 = cir.alloca !cir.double, !cir.ptr<!cir.double>, ["doubleNumber", init] {alignment = 8 : i64} loc(#loc203)
    cir.br ^bb1 loc(#loc204)
  ^bb1:  // pred: ^bb0
    %2 = cir.get_global @staticReturnsFalse : !cir.ptr<!cir.func<!s32i ()>> loc(#loc205)
    %3 = cir.call %2() : (!cir.ptr<!cir.func<!s32i ()>>) -> !s32i loc(#loc92)
    %4 = cir.cast(int_to_bool, %3 : !s32i), !cir.bool loc(#loc92)
    cir.brcond %4 ^bb2, ^bb3 loc(#loc206)
  ^bb2:  // pred: ^bb1
    %5 = cir.get_global @".str.5" : !cir.ptr<!cir.array<!s8i x 21>> loc(#loc82)
    %6 = cir.cast(array_to_ptrdecay, %5 : !cir.ptr<!cir.array<!s8i x 21>>), !cir.ptr<!s8i> loc(#loc82)
    cir.call @printLine(%6) : (!cir.ptr<!s8i>) -> () loc(#loc97)
    cir.br ^bb16 loc(#loc95)
  ^bb3:  // pred: ^bb1
    cir.br ^bb4 loc(#loc207)
  ^bb4:  // pred: ^bb3
    %7 = cir.const #cir.int<0> : !s32i loc(#loc89)
    %8 = cir.cast(int_to_float, %7 : !s32i), !cir.double loc(#loc89)
    cir.store %8, %1 : !cir.double, !cir.ptr<!cir.double> loc(#loc203)
    cir.br ^bb5 loc(#loc208)
  ^bb5:  // pred: ^bb4
    %9 = cir.cast(array_to_ptrdecay, %0 : !cir.ptr<!cir.array<!s8i x 256>>), !cir.ptr<!s8i> loc(#loc102)
    %10 = cir.const #cir.int<256> : !s32i loc(#loc103)
    %11 = cir.get_global @stdin : !cir.ptr<!cir.ptr<!ty__IO_FILE>> loc(#loc173)
    %12 = cir.load %11 : !cir.ptr<!cir.ptr<!ty__IO_FILE>>, !cir.ptr<!ty__IO_FILE> loc(#loc104)
    %13 = cir.call @fgets(%9, %10, %12) : (!cir.ptr<!s8i>, !s32i, !cir.ptr<!ty__IO_FILE>) -> !cir.ptr<!s8i> loc(#loc105)
    %14 = cir.const #cir.ptr<null> : !cir.ptr<!void> loc(#loc106)
    %15 = cir.cast(bitcast, %14 : !cir.ptr<!void>), !cir.ptr<!s8i> loc(#loc106)
    %16 = cir.cmp(ne, %13, %15) : !cir.ptr<!s8i>, !cir.bool loc(#loc209)
    cir.brcond %16 ^bb6, ^bb7 loc(#loc210)
  ^bb6:  // pred: ^bb5
    %17 = cir.cast(array_to_ptrdecay, %0 : !cir.ptr<!cir.array<!s8i x 256>>), !cir.ptr<!s8i> loc(#loc110)
    %18 = cir.call @atof(%17) : (!cir.ptr<!s8i>) -> !cir.double extra(#fn_attr) loc(#loc111)
    cir.store %18, %1 : !cir.double, !cir.ptr<!cir.double> loc(#loc211)
    cir.br ^bb8 loc(#loc108)
  ^bb7:  // pred: ^bb5
    %19 = cir.get_global @".str" : !cir.ptr<!cir.array<!s8i x 16>> loc(#loc114)
    %20 = cir.cast(array_to_ptrdecay, %19 : !cir.ptr<!cir.array<!s8i x 16>>), !cir.ptr<!s8i> loc(#loc114)
    cir.call @printLine(%20) : (!cir.ptr<!s8i>) -> () loc(#loc115)
    cir.br ^bb8 loc(#loc101)
  ^bb8:  // 2 preds: ^bb6, ^bb7
    cir.br ^bb9 loc(#loc101)
  ^bb9:  // pred: ^bb8
    cir.br ^bb10 loc(#loc212)
  ^bb10:  // pred: ^bb9
    %21 = cir.load %1 : !cir.ptr<!cir.double>, !cir.double loc(#loc118)
    %22 = cir.const #cir.int<0> : !s32i loc(#loc119)
    %23 = cir.cast(int_to_float, %22 : !s32i), !cir.double loc(#loc119)
    %24 = cir.cmp(lt, %21, %23) : !cir.double, !cir.bool loc(#loc213)
    cir.brcond %24 ^bb11, ^bb12 loc(#loc214)
  ^bb11:  // pred: ^bb10
    %25 = cir.get_global @".str.6" : !cir.ptr<!cir.array<!s8i x 18>> loc(#loc83)
    %26 = cir.cast(array_to_ptrdecay, %25 : !cir.ptr<!cir.array<!s8i x 18>>), !cir.ptr<!s8i> loc(#loc83)
    cir.call @printLine(%26) : (!cir.ptr<!s8i>) -> () loc(#loc123)
    cir.br ^bb13 loc(#loc121)
  ^bb12:  // pred: ^bb10
    %27 = cir.get_global @sqrt : !cir.ptr<!cir.func<!cir.double (!cir.double)>> loc(#loc124)
    %28 = cir.load %1 : !cir.ptr<!cir.double>, !cir.double loc(#loc125)
    %29 = cir.call @sqrt(%28) : (!cir.double) -> !cir.double extra(#fn_attr) loc(#loc124)
    %30 = cir.cast(float_to_int, %29 : !cir.double), !s32i loc(#loc124)
    cir.call @printIntLine(%30) : (!s32i) -> () loc(#loc126)
    cir.br ^bb13 loc(#loc117)
  ^bb13:  // 2 preds: ^bb11, ^bb12
    cir.br ^bb14 loc(#loc117)
  ^bb14:  // pred: ^bb13
    cir.br ^bb15 loc(#loc99)
  ^bb15:  // pred: ^bb14
    cir.br ^bb16 loc(#loc91)
  ^bb16:  // 2 preds: ^bb2, ^bb15
    cir.br ^bb17 loc(#loc91)
  ^bb17:  // pred: ^bb16
    cir.return loc(#loc85)
  } loc(#loc201)
  cir.func no_proto internal private @staticReturnsFalse() -> !s32i extra(#fn_attr1) {
    %0 = cir.alloca !s32i, !cir.ptr<!s32i>, ["__retval"] {alignment = 4 : i64} loc(#loc128)
    %1 = cir.const #cir.int<0> : !s32i loc(#loc129)
    cir.store %1, %0 : !s32i, !cir.ptr<!s32i> loc(#loc216)
    %2 = cir.load %0 : !cir.ptr<!s32i>, !s32i loc(#loc216)
    cir.return %2 : !s32i loc(#loc216)
  } loc(#loc215)
  cir.func no_proto internal private @good2() extra(#fn_attr1) {
    %0 = cir.alloca !cir.array<!s8i x 256>, !cir.ptr<!cir.array<!s8i x 256>>, ["inputBuffer"] {alignment = 16 : i64} loc(#loc218)
    %1 = cir.alloca !cir.double, !cir.ptr<!cir.double>, ["doubleNumber", init] {alignment = 8 : i64} loc(#loc219)
    cir.br ^bb1 loc(#loc220)
  ^bb1:  // pred: ^bb0
    %2 = cir.get_global @staticReturnsTrue : !cir.ptr<!cir.func<!s32i ()>> loc(#loc221)
    %3 = cir.call @staticReturnsTrue() : () -> !s32i loc(#loc139)
    %4 = cir.cast(int_to_bool, %3 : !s32i), !cir.bool loc(#loc139)
    cir.brcond %4 ^bb2, ^bb15 loc(#loc222)
  ^bb2:  // pred: ^bb1
    cir.br ^bb3 loc(#loc223)
  ^bb3:  // pred: ^bb2
    %5 = cir.const #cir.int<0> : !s32i loc(#loc136)
    %6 = cir.cast(int_to_float, %5 : !s32i), !cir.double loc(#loc136)
    cir.store %6, %1 : !cir.double, !cir.ptr<!cir.double> loc(#loc219)
    cir.br ^bb4 loc(#loc224)
  ^bb4:  // pred: ^bb3
    %7 = cir.cast(array_to_ptrdecay, %0 : !cir.ptr<!cir.array<!s8i x 256>>), !cir.ptr<!s8i> loc(#loc146)
    %8 = cir.const #cir.int<256> : !s32i loc(#loc147)
    %9 = cir.get_global @stdin : !cir.ptr<!cir.ptr<!ty__IO_FILE>> loc(#loc173)
    %10 = cir.load %9 : !cir.ptr<!cir.ptr<!ty__IO_FILE>>, !cir.ptr<!ty__IO_FILE> loc(#loc148)
    %11 = cir.call @fgets(%7, %8, %10) : (!cir.ptr<!s8i>, !s32i, !cir.ptr<!ty__IO_FILE>) -> !cir.ptr<!s8i> loc(#loc149)
    %12 = cir.const #cir.ptr<null> : !cir.ptr<!void> loc(#loc150)
    %13 = cir.cast(bitcast, %12 : !cir.ptr<!void>), !cir.ptr<!s8i> loc(#loc150)
    %14 = cir.cmp(ne, %11, %13) : !cir.ptr<!s8i>, !cir.bool loc(#loc225)
    cir.brcond %14 ^bb5, ^bb6 loc(#loc226)
  ^bb5:  // pred: ^bb4
    %15 = cir.cast(array_to_ptrdecay, %0 : !cir.ptr<!cir.array<!s8i x 256>>), !cir.ptr<!s8i> loc(#loc154)
    %16 = cir.call @atof(%15) : (!cir.ptr<!s8i>) -> !cir.double extra(#fn_attr) loc(#loc155)
    cir.store %16, %1 : !cir.double, !cir.ptr<!cir.double> loc(#loc227)
    cir.br ^bb7 loc(#loc152)
  ^bb6:  // pred: ^bb4
    %17 = cir.get_global @".str" : !cir.ptr<!cir.array<!s8i x 16>> loc(#loc158)
    %18 = cir.cast(array_to_ptrdecay, %17 : !cir.ptr<!cir.array<!s8i x 16>>), !cir.ptr<!s8i> loc(#loc158)
    cir.call @printLine(%18) : (!cir.ptr<!s8i>) -> () loc(#loc159)
    cir.br ^bb7 loc(#loc145)
  ^bb7:  // 2 preds: ^bb5, ^bb6
    cir.br ^bb8 loc(#loc145)
  ^bb8:  // pred: ^bb7
    cir.br ^bb9 loc(#loc228)
  ^bb9:  // pred: ^bb8
    %19 = cir.load %1 : !cir.ptr<!cir.double>, !cir.double loc(#loc162)
    %20 = cir.const #cir.int<0> : !s32i loc(#loc163)
    %21 = cir.cast(int_to_float, %20 : !s32i), !cir.double loc(#loc163)
    %22 = cir.cmp(lt, %19, %21) : !cir.double, !cir.bool loc(#loc229)
    cir.brcond %22 ^bb10, ^bb11 loc(#loc230)
  ^bb10:  // pred: ^bb9
    %23 = cir.get_global @".str.6" : !cir.ptr<!cir.array<!s8i x 18>> loc(#loc167)
    %24 = cir.cast(array_to_ptrdecay, %23 : !cir.ptr<!cir.array<!s8i x 18>>), !cir.ptr<!s8i> loc(#loc167)
    cir.call @printLine(%24) : (!cir.ptr<!s8i>) -> () loc(#loc168)
    cir.br ^bb12 loc(#loc165)
  ^bb11:  // pred: ^bb9
    %25 = cir.get_global @sqrt : !cir.ptr<!cir.func<!cir.double (!cir.double)>> loc(#loc169)
    %26 = cir.load %1 : !cir.ptr<!cir.double>, !cir.double loc(#loc170)
    %27 = cir.call @sqrt(%26) : (!cir.double) -> !cir.double extra(#fn_attr) loc(#loc169)
    %28 = cir.cast(float_to_int, %27 : !cir.double), !s32i loc(#loc169)
    cir.call @printIntLine(%28) : (!s32i) -> () loc(#loc171)
    cir.br ^bb12 loc(#loc161)
  ^bb12:  // 2 preds: ^bb10, ^bb11
    cir.br ^bb13 loc(#loc161)
  ^bb13:  // pred: ^bb12
    cir.br ^bb14 loc(#loc143)
  ^bb14:  // pred: ^bb13
    cir.br ^bb15 loc(#loc138)
  ^bb15:  // 2 preds: ^bb1, ^bb14
    cir.br ^bb16 loc(#loc138)
  ^bb16:  // pred: ^bb15
    cir.return loc(#loc132)
  } loc(#loc217)
} loc(#loc)
#loc = loc("/home/ladisgin/git_proj/juliet-c/testcases/CWE681_Incorrect_Conversion_Between_Numeric_Types/CWE681_Incorrect_Conversion_Between_Numeric_Types__doubleNaN2int_08.c":0:0)
#loc1 = loc("/usr/include/stdio.h":654:1)
#loc2 = loc("/usr/include/stdio.h":655:59)
#loc3 = loc("/usr/include/stdio.h":149:1)
#loc4 = loc("/usr/include/stdio.h":149:14)
#loc5 = loc("/usr/include/stdlib.h":102:1)
#loc6 = loc("/usr/include/stdlib.h":103:33)
#loc7 = loc("../../testcasesupport/std_testcase_io.h":14:1)
#loc8 = loc("../../testcasesupport/std_testcase_io.h":14:33)
#loc9 = loc("CWE681_Incorrect_Conversion_Between_Numeric_Types__doubleNaN2int_08.c":54:27)
#loc10 = loc("../../testcasesupport/std_testcase_io.h":18:1)
#loc11 = loc("../../testcasesupport/std_testcase_io.h":18:33)
#loc12 = loc("/usr/include/bits/mathcalls.h":158:1)
#loc13 = loc("CWE681_Incorrect_Conversion_Between_Numeric_Types__doubleNaN2int_08.c":36:1)
#loc14 = loc("CWE681_Incorrect_Conversion_Between_Numeric_Types__doubleNaN2int_08.c":60:1)
#loc15 = loc("CWE681_Incorrect_Conversion_Between_Numeric_Types__doubleNaN2int_08.c":41:13)
#loc16 = loc("CWE681_Incorrect_Conversion_Between_Numeric_Types__doubleNaN2int_08.c":41:45)
#loc17 = loc("CWE681_Incorrect_Conversion_Between_Numeric_Types__doubleNaN2int_08.c":42:13)
#loc18 = loc("CWE681_Incorrect_Conversion_Between_Numeric_Types__doubleNaN2int_08.c":42:35)
#loc19 = loc("CWE681_Incorrect_Conversion_Between_Numeric_Types__doubleNaN2int_08.c":38:5)
#loc20 = loc("CWE681_Incorrect_Conversion_Between_Numeric_Types__doubleNaN2int_08.c":59:5)
#loc21 = loc("CWE681_Incorrect_Conversion_Between_Numeric_Types__doubleNaN2int_08.c":38:8)
#loc22 = loc("CWE681_Incorrect_Conversion_Between_Numeric_Types__doubleNaN2int_08.c":38:26)
#loc23 = loc("CWE681_Incorrect_Conversion_Between_Numeric_Types__doubleNaN2int_08.c":39:5)
#loc24 = loc("CWE681_Incorrect_Conversion_Between_Numeric_Types__doubleNaN2int_08.c":40:9)
#loc25 = loc("CWE681_Incorrect_Conversion_Between_Numeric_Types__doubleNaN2int_08.c":58:9)
#loc26 = loc("CWE681_Incorrect_Conversion_Between_Numeric_Types__doubleNaN2int_08.c":47:13)
#loc27 = loc("CWE681_Incorrect_Conversion_Between_Numeric_Types__doubleNaN2int_08.c":55:13)
#loc28 = loc("CWE681_Incorrect_Conversion_Between_Numeric_Types__doubleNaN2int_08.c":47:23)
#loc29 = loc("CWE681_Incorrect_Conversion_Between_Numeric_Types__doubleNaN2int_08.c":47:36)
#loc30 = loc("CWE681_Incorrect_Conversion_Between_Numeric_Types__doubleNaN2int_08.c":47:53)
#loc31 = loc("CWE681_Incorrect_Conversion_Between_Numeric_Types__doubleNaN2int_08.c":47:17)
#loc32 = loc("CWE681_Incorrect_Conversion_Between_Numeric_Types__doubleNaN2int_08.c":47:63)
#loc33 = loc("CWE681_Incorrect_Conversion_Between_Numeric_Types__doubleNaN2int_08.c":48:13)
#loc34 = loc("CWE681_Incorrect_Conversion_Between_Numeric_Types__doubleNaN2int_08.c":51:13)
#loc35 = loc("CWE681_Incorrect_Conversion_Between_Numeric_Types__doubleNaN2int_08.c":53:13)
#loc36 = loc("CWE681_Incorrect_Conversion_Between_Numeric_Types__doubleNaN2int_08.c":50:37)
#loc37 = loc("CWE681_Incorrect_Conversion_Between_Numeric_Types__doubleNaN2int_08.c":50:32)
#loc38 = loc("CWE681_Incorrect_Conversion_Between_Numeric_Types__doubleNaN2int_08.c":50:17)
#loc39 = loc("CWE681_Incorrect_Conversion_Between_Numeric_Types__doubleNaN2int_08.c":50:48)
#loc40 = loc("CWE681_Incorrect_Conversion_Between_Numeric_Types__doubleNaN2int_08.c":54:17)
#loc41 = loc("CWE681_Incorrect_Conversion_Between_Numeric_Types__doubleNaN2int_08.c":57:37)
#loc42 = loc("CWE681_Incorrect_Conversion_Between_Numeric_Types__doubleNaN2int_08.c":57:32)
#loc43 = loc("CWE681_Incorrect_Conversion_Between_Numeric_Types__doubleNaN2int_08.c":57:13)
#loc44 = loc("CWE681_Incorrect_Conversion_Between_Numeric_Types__doubleNaN2int_08.c":141:1)
#loc45 = loc("CWE681_Incorrect_Conversion_Between_Numeric_Types__doubleNaN2int_08.c":145:1)
#loc46 = loc("CWE681_Incorrect_Conversion_Between_Numeric_Types__doubleNaN2int_08.c":143:5)
#loc47 = loc("CWE681_Incorrect_Conversion_Between_Numeric_Types__doubleNaN2int_08.c":143:11)
#loc48 = loc("CWE681_Incorrect_Conversion_Between_Numeric_Types__doubleNaN2int_08.c":144:5)
#loc49 = loc("CWE681_Incorrect_Conversion_Between_Numeric_Types__doubleNaN2int_08.c":144:11)
#loc50 = loc("/usr/include/stdlib.h":575:1)
#loc51 = loc("/usr/include/stdlib.h":575:41)
#loc52 = loc("/usr/include/time.h":76:1)
#loc53 = loc("/usr/include/time.h":76:38)
#loc54 = loc("CWE681_Incorrect_Conversion_Between_Numeric_Types__doubleNaN2int_08.c":161:15)
#loc55 = loc("CWE681_Incorrect_Conversion_Between_Numeric_Types__doubleNaN2int_08.c":163:15)
#loc56 = loc("CWE681_Incorrect_Conversion_Between_Numeric_Types__doubleNaN2int_08.c":166:15)
#loc57 = loc("CWE681_Incorrect_Conversion_Between_Numeric_Types__doubleNaN2int_08.c":168:15)
#loc58 = loc("CWE681_Incorrect_Conversion_Between_Numeric_Types__doubleNaN2int_08.c":156:1)
#loc59 = loc("CWE681_Incorrect_Conversion_Between_Numeric_Types__doubleNaN2int_08.c":171:1)
#loc64 = loc("CWE681_Incorrect_Conversion_Between_Numeric_Types__doubleNaN2int_08.c":157:1)
#loc65 = loc("CWE681_Incorrect_Conversion_Between_Numeric_Types__doubleNaN2int_08.c":159:27)
#loc66 = loc("CWE681_Incorrect_Conversion_Between_Numeric_Types__doubleNaN2int_08.c":159:22)
#loc67 = loc("CWE681_Incorrect_Conversion_Between_Numeric_Types__doubleNaN2int_08.c":159:5)
#loc68 = loc("CWE681_Incorrect_Conversion_Between_Numeric_Types__doubleNaN2int_08.c":161:5)
#loc69 = loc("CWE681_Incorrect_Conversion_Between_Numeric_Types__doubleNaN2int_08.c":162:5)
#loc70 = loc("CWE681_Incorrect_Conversion_Between_Numeric_Types__doubleNaN2int_08.c":162:78)
#loc71 = loc("CWE681_Incorrect_Conversion_Between_Numeric_Types__doubleNaN2int_08.c":163:5)
#loc72 = loc("CWE681_Incorrect_Conversion_Between_Numeric_Types__doubleNaN2int_08.c":166:5)
#loc73 = loc("CWE681_Incorrect_Conversion_Between_Numeric_Types__doubleNaN2int_08.c":167:5)
#loc74 = loc("CWE681_Incorrect_Conversion_Between_Numeric_Types__doubleNaN2int_08.c":167:77)
#loc75 = loc("CWE681_Incorrect_Conversion_Between_Numeric_Types__doubleNaN2int_08.c":168:5)
#loc76 = loc("CWE681_Incorrect_Conversion_Between_Numeric_Types__doubleNaN2int_08.c":170:12)
#loc77 = loc("CWE681_Incorrect_Conversion_Between_Numeric_Types__doubleNaN2int_08.c":170:5)
#loc78 = loc("CWE681_Incorrect_Conversion_Between_Numeric_Types__doubleNaN2int_08.c":24:1)
#loc79 = loc("CWE681_Incorrect_Conversion_Between_Numeric_Types__doubleNaN2int_08.c":27:1)
#loc80 = loc("CWE681_Incorrect_Conversion_Between_Numeric_Types__doubleNaN2int_08.c":26:12)
#loc81 = loc("CWE681_Incorrect_Conversion_Between_Numeric_Types__doubleNaN2int_08.c":26:5)
#loc82 = loc("CWE681_Incorrect_Conversion_Between_Numeric_Types__doubleNaN2int_08.c":72:19)
#loc83 = loc("CWE681_Incorrect_Conversion_Between_Numeric_Types__doubleNaN2int_08.c":96:27)
#loc84 = loc("CWE681_Incorrect_Conversion_Between_Numeric_Types__doubleNaN2int_08.c":67:1)
#loc85 = loc("CWE681_Incorrect_Conversion_Between_Numeric_Types__doubleNaN2int_08.c":104:1)
#loc86 = loc("CWE681_Incorrect_Conversion_Between_Numeric_Types__doubleNaN2int_08.c":77:13)
#loc87 = loc("CWE681_Incorrect_Conversion_Between_Numeric_Types__doubleNaN2int_08.c":77:45)
#loc88 = loc("CWE681_Incorrect_Conversion_Between_Numeric_Types__doubleNaN2int_08.c":78:13)
#loc89 = loc("CWE681_Incorrect_Conversion_Between_Numeric_Types__doubleNaN2int_08.c":78:35)
#loc90 = loc("CWE681_Incorrect_Conversion_Between_Numeric_Types__doubleNaN2int_08.c":69:5)
#loc91 = loc("CWE681_Incorrect_Conversion_Between_Numeric_Types__doubleNaN2int_08.c":103:5)
#loc92 = loc("CWE681_Incorrect_Conversion_Between_Numeric_Types__doubleNaN2int_08.c":69:8)
#loc93 = loc("CWE681_Incorrect_Conversion_Between_Numeric_Types__doubleNaN2int_08.c":69:27)
#loc94 = loc("CWE681_Incorrect_Conversion_Between_Numeric_Types__doubleNaN2int_08.c":70:5)
#loc95 = loc("CWE681_Incorrect_Conversion_Between_Numeric_Types__doubleNaN2int_08.c":73:5)
#loc96 = loc("CWE681_Incorrect_Conversion_Between_Numeric_Types__doubleNaN2int_08.c":75:5)
#loc97 = loc("CWE681_Incorrect_Conversion_Between_Numeric_Types__doubleNaN2int_08.c":72:9)
#loc98 = loc("CWE681_Incorrect_Conversion_Between_Numeric_Types__doubleNaN2int_08.c":76:9)
#loc99 = loc("CWE681_Incorrect_Conversion_Between_Numeric_Types__doubleNaN2int_08.c":102:9)
#loc100 = loc("CWE681_Incorrect_Conversion_Between_Numeric_Types__doubleNaN2int_08.c":83:13)
#loc101 = loc("CWE681_Incorrect_Conversion_Between_Numeric_Types__doubleNaN2int_08.c":91:13)
#loc102 = loc("CWE681_Incorrect_Conversion_Between_Numeric_Types__doubleNaN2int_08.c":83:23)
#loc103 = loc("CWE681_Incorrect_Conversion_Between_Numeric_Types__doubleNaN2int_08.c":83:36)
#loc104 = loc("CWE681_Incorrect_Conversion_Between_Numeric_Types__doubleNaN2int_08.c":83:53)
#loc105 = loc("CWE681_Incorrect_Conversion_Between_Numeric_Types__doubleNaN2int_08.c":83:17)
#loc106 = loc("CWE681_Incorrect_Conversion_Between_Numeric_Types__doubleNaN2int_08.c":83:63)
#loc107 = loc("CWE681_Incorrect_Conversion_Between_Numeric_Types__doubleNaN2int_08.c":84:13)
#loc108 = loc("CWE681_Incorrect_Conversion_Between_Numeric_Types__doubleNaN2int_08.c":87:13)
#loc109 = loc("CWE681_Incorrect_Conversion_Between_Numeric_Types__doubleNaN2int_08.c":89:13)
#loc110 = loc("CWE681_Incorrect_Conversion_Between_Numeric_Types__doubleNaN2int_08.c":86:37)
#loc111 = loc("CWE681_Incorrect_Conversion_Between_Numeric_Types__doubleNaN2int_08.c":86:32)
#loc112 = loc("CWE681_Incorrect_Conversion_Between_Numeric_Types__doubleNaN2int_08.c":86:17)
#loc113 = loc("CWE681_Incorrect_Conversion_Between_Numeric_Types__doubleNaN2int_08.c":86:48)
#loc114 = loc("CWE681_Incorrect_Conversion_Between_Numeric_Types__doubleNaN2int_08.c":90:27)
#loc115 = loc("CWE681_Incorrect_Conversion_Between_Numeric_Types__doubleNaN2int_08.c":90:17)
#loc116 = loc("CWE681_Incorrect_Conversion_Between_Numeric_Types__doubleNaN2int_08.c":94:13)
#loc117 = loc("CWE681_Incorrect_Conversion_Between_Numeric_Types__doubleNaN2int_08.c":101:13)
#loc118 = loc("CWE681_Incorrect_Conversion_Between_Numeric_Types__doubleNaN2int_08.c":94:17)
#loc119 = loc("CWE681_Incorrect_Conversion_Between_Numeric_Types__doubleNaN2int_08.c":94:32)
#loc120 = loc("CWE681_Incorrect_Conversion_Between_Numeric_Types__doubleNaN2int_08.c":95:13)
#loc121 = loc("CWE681_Incorrect_Conversion_Between_Numeric_Types__doubleNaN2int_08.c":97:13)
#loc122 = loc("CWE681_Incorrect_Conversion_Between_Numeric_Types__doubleNaN2int_08.c":99:13)
#loc123 = loc("CWE681_Incorrect_Conversion_Between_Numeric_Types__doubleNaN2int_08.c":96:17)
#loc124 = loc("CWE681_Incorrect_Conversion_Between_Numeric_Types__doubleNaN2int_08.c":100:36)
#loc125 = loc("CWE681_Incorrect_Conversion_Between_Numeric_Types__doubleNaN2int_08.c":100:41)
#loc126 = loc("CWE681_Incorrect_Conversion_Between_Numeric_Types__doubleNaN2int_08.c":100:17)
#loc127 = loc("CWE681_Incorrect_Conversion_Between_Numeric_Types__doubleNaN2int_08.c":29:1)
#loc128 = loc("CWE681_Incorrect_Conversion_Between_Numeric_Types__doubleNaN2int_08.c":32:1)
#loc129 = loc("CWE681_Incorrect_Conversion_Between_Numeric_Types__doubleNaN2int_08.c":31:12)
#loc130 = loc("CWE681_Incorrect_Conversion_Between_Numeric_Types__doubleNaN2int_08.c":31:5)
#loc131 = loc("CWE681_Incorrect_Conversion_Between_Numeric_Types__doubleNaN2int_08.c":107:1)
#loc132 = loc("CWE681_Incorrect_Conversion_Between_Numeric_Types__doubleNaN2int_08.c":139:1)
#loc133 = loc("CWE681_Incorrect_Conversion_Between_Numeric_Types__doubleNaN2int_08.c":112:13)
#loc134 = loc("CWE681_Incorrect_Conversion_Between_Numeric_Types__doubleNaN2int_08.c":112:45)
#loc135 = loc("CWE681_Incorrect_Conversion_Between_Numeric_Types__doubleNaN2int_08.c":113:13)
#loc136 = loc("CWE681_Incorrect_Conversion_Between_Numeric_Types__doubleNaN2int_08.c":113:35)
#loc137 = loc("CWE681_Incorrect_Conversion_Between_Numeric_Types__doubleNaN2int_08.c":109:5)
#loc138 = loc("CWE681_Incorrect_Conversion_Between_Numeric_Types__doubleNaN2int_08.c":138:5)
#loc139 = loc("CWE681_Incorrect_Conversion_Between_Numeric_Types__doubleNaN2int_08.c":109:8)
#loc140 = loc("CWE681_Incorrect_Conversion_Between_Numeric_Types__doubleNaN2int_08.c":109:26)
#loc141 = loc("CWE681_Incorrect_Conversion_Between_Numeric_Types__doubleNaN2int_08.c":110:5)
#loc142 = loc("CWE681_Incorrect_Conversion_Between_Numeric_Types__doubleNaN2int_08.c":111:9)
#loc143 = loc("CWE681_Incorrect_Conversion_Between_Numeric_Types__doubleNaN2int_08.c":137:9)
#loc144 = loc("CWE681_Incorrect_Conversion_Between_Numeric_Types__doubleNaN2int_08.c":118:13)
#loc145 = loc("CWE681_Incorrect_Conversion_Between_Numeric_Types__doubleNaN2int_08.c":126:13)
#loc146 = loc("CWE681_Incorrect_Conversion_Between_Numeric_Types__doubleNaN2int_08.c":118:23)
#loc147 = loc("CWE681_Incorrect_Conversion_Between_Numeric_Types__doubleNaN2int_08.c":118:36)
#loc148 = loc("CWE681_Incorrect_Conversion_Between_Numeric_Types__doubleNaN2int_08.c":118:53)
#loc149 = loc("CWE681_Incorrect_Conversion_Between_Numeric_Types__doubleNaN2int_08.c":118:17)
#loc150 = loc("CWE681_Incorrect_Conversion_Between_Numeric_Types__doubleNaN2int_08.c":118:63)
#loc151 = loc("CWE681_Incorrect_Conversion_Between_Numeric_Types__doubleNaN2int_08.c":119:13)
#loc152 = loc("CWE681_Incorrect_Conversion_Between_Numeric_Types__doubleNaN2int_08.c":122:13)
#loc153 = loc("CWE681_Incorrect_Conversion_Between_Numeric_Types__doubleNaN2int_08.c":124:13)
#loc154 = loc("CWE681_Incorrect_Conversion_Between_Numeric_Types__doubleNaN2int_08.c":121:37)
#loc155 = loc("CWE681_Incorrect_Conversion_Between_Numeric_Types__doubleNaN2int_08.c":121:32)
#loc156 = loc("CWE681_Incorrect_Conversion_Between_Numeric_Types__doubleNaN2int_08.c":121:17)
#loc157 = loc("CWE681_Incorrect_Conversion_Between_Numeric_Types__doubleNaN2int_08.c":121:48)
#loc158 = loc("CWE681_Incorrect_Conversion_Between_Numeric_Types__doubleNaN2int_08.c":125:27)
#loc159 = loc("CWE681_Incorrect_Conversion_Between_Numeric_Types__doubleNaN2int_08.c":125:17)
#loc160 = loc("CWE681_Incorrect_Conversion_Between_Numeric_Types__doubleNaN2int_08.c":129:13)
#loc161 = loc("CWE681_Incorrect_Conversion_Between_Numeric_Types__doubleNaN2int_08.c":136:13)
#loc162 = loc("CWE681_Incorrect_Conversion_Between_Numeric_Types__doubleNaN2int_08.c":129:17)
#loc163 = loc("CWE681_Incorrect_Conversion_Between_Numeric_Types__doubleNaN2int_08.c":129:32)
#loc164 = loc("CWE681_Incorrect_Conversion_Between_Numeric_Types__doubleNaN2int_08.c":130:13)
#loc165 = loc("CWE681_Incorrect_Conversion_Between_Numeric_Types__doubleNaN2int_08.c":132:13)
#loc166 = loc("CWE681_Incorrect_Conversion_Between_Numeric_Types__doubleNaN2int_08.c":134:13)
#loc167 = loc("CWE681_Incorrect_Conversion_Between_Numeric_Types__doubleNaN2int_08.c":131:27)
#loc168 = loc("CWE681_Incorrect_Conversion_Between_Numeric_Types__doubleNaN2int_08.c":131:17)
#loc169 = loc("CWE681_Incorrect_Conversion_Between_Numeric_Types__doubleNaN2int_08.c":135:36)
#loc170 = loc("CWE681_Incorrect_Conversion_Between_Numeric_Types__doubleNaN2int_08.c":135:41)
#loc171 = loc("CWE681_Incorrect_Conversion_Between_Numeric_Types__doubleNaN2int_08.c":135:17)
#loc172 = loc(fused[#loc1, #loc2])
#loc173 = loc(fused[#loc3, #loc4])
#loc174 = loc(fused[#loc5, #loc6])
#loc175 = loc(fused[#loc7, #loc8])
#loc176 = loc(fused[#loc10, #loc11])
#loc177 = loc(fused[#loc13, #loc14])
#loc178 = loc(fused[#loc15, #loc16])
#loc179 = loc(fused[#loc17, #loc18])
#loc180 = loc(fused[#loc19, #loc20])
#loc181 = loc(fused[#loc21, #loc22])
#loc182 = loc(fused[#loc23, #loc20])
#loc183 = loc(fused[#loc24, #loc25])
#loc184 = loc(fused[#loc26, #loc27])
#loc185 = loc(fused[#loc31, #loc32])
#loc186 = loc(fused[#loc33, #loc34, #loc35, #loc27])
#loc187 = loc(fused[#loc38, #loc39])
#loc188 = loc(fused[#loc44, #loc45])
#loc189 = loc(fused[#loc46, #loc47])
#loc190 = loc(fused[#loc48, #loc49])
#loc191 = loc(fused[#loc50, #loc51])
#loc192 = loc(fused[#loc52, #loc53])
#loc193 = loc(fused[#loc58, #loc59])
#loc196 = loc(fused[#loc69, #loc70])
#loc197 = loc(fused[#loc73, #loc74])
#loc198 = loc(fused[#loc77, #loc76])
#loc199 = loc(fused[#loc78, #loc79])
#loc200 = loc(fused[#loc81, #loc80])
#loc201 = loc(fused[#loc84, #loc85])
#loc202 = loc(fused[#loc86, #loc87])
#loc203 = loc(fused[#loc88, #loc89])
#loc204 = loc(fused[#loc90, #loc91])
#loc205 = loc(fused[#loc92, #loc93])
#loc206 = loc(fused[#loc94, #loc95, #loc96, #loc91])
#loc207 = loc(fused[#loc98, #loc99])
#loc208 = loc(fused[#loc100, #loc101])
#loc209 = loc(fused[#loc105, #loc106])
#loc210 = loc(fused[#loc107, #loc108, #loc109, #loc101])
#loc211 = loc(fused[#loc112, #loc113])
#loc212 = loc(fused[#loc116, #loc117])
#loc213 = loc(fused[#loc118, #loc119])
#loc214 = loc(fused[#loc120, #loc121, #loc122, #loc117])
#loc215 = loc(fused[#loc127, #loc128])
#loc216 = loc(fused[#loc130, #loc129])
#loc217 = loc(fused[#loc131, #loc132])
#loc218 = loc(fused[#loc133, #loc134])
#loc219 = loc(fused[#loc135, #loc136])
#loc220 = loc(fused[#loc137, #loc138])
#loc221 = loc(fused[#loc139, #loc140])
#loc222 = loc(fused[#loc141, #loc138])
#loc223 = loc(fused[#loc142, #loc143])
#loc224 = loc(fused[#loc144, #loc145])
#loc225 = loc(fused[#loc149, #loc150])
#loc226 = loc(fused[#loc151, #loc152, #loc153, #loc145])
#loc227 = loc(fused[#loc156, #loc157])
#loc228 = loc(fused[#loc160, #loc161])
#loc229 = loc(fused[#loc162, #loc163])
#loc230 = loc(fused[#loc164, #loc165, #loc166, #loc161])
