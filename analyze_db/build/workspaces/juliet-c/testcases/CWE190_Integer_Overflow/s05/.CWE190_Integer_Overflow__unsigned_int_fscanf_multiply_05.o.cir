!s32i = !cir.int<s, 32>
!s64i = !cir.int<s, 64>
!s8i = !cir.int<s, 8>
!ty__IO_codecvt = !cir.record<struct "_IO_codecvt" incomplete>
!ty__IO_marker = !cir.record<struct "_IO_marker" incomplete>
!ty__IO_wide_data = !cir.record<struct "_IO_wide_data" incomplete>
!u16i = !cir.int<u, 16>
!u32i = !cir.int<u, 32>
!u64i = !cir.int<u, 64>
!void = !cir.void
#fn_attr = #cir<extra({inline = #cir.inline<no>, nothrow = #cir.nothrow, optnone = #cir.optnone, uwtable = #cir.uwtable<async>})>
!ty__IO_FILE = !cir.record<struct "_IO_FILE" {!s32i, !cir.ptr<!s8i>, !cir.ptr<!s8i>, !cir.ptr<!s8i>, !cir.ptr<!s8i>, !cir.ptr<!s8i>, !cir.ptr<!s8i>, !cir.ptr<!s8i>, !cir.ptr<!s8i>, !cir.ptr<!s8i>, !cir.ptr<!s8i>, !cir.ptr<!s8i>, !cir.ptr<!ty__IO_marker>, !cir.ptr<!cir.record<struct "_IO_FILE">>, !s32i, !s32i, !s64i, !u16i, !s8i, !cir.array<!s8i x 1>, !cir.ptr<!void>, !s64i, !cir.ptr<!ty__IO_codecvt>, !cir.ptr<!ty__IO_wide_data>, !cir.ptr<!cir.record<struct "_IO_FILE">>, !cir.ptr<!void>, !u64i, !s32i, !cir.array<!s8i x 20>} #cir.record.decl.ast>
module @"/workspaces/juliet-c/testcases/CWE190_Integer_Overflow/s05/CWE190_Integer_Overflow__unsigned_int_fscanf_multiply_05.c" attributes {cir.lang = #cir.lang<c>, cir.sob = #cir.signed_overflow_behavior<undefined>, cir.triple = "x86_64-unknown-linux-gnu", cir.type_size_info = #cir.type_size_info<char = 8, int = 32, size_t = 64>, cir.uwtable = #cir.uwtable<async>, dlti.dl_spec = #dlti.dl_spec<f128 = dense<128> : vector<2xi64>, f16 = dense<16> : vector<2xi64>, f64 = dense<64> : vector<2xi64>, i32 = dense<32> : vector<2xi64>, i16 = dense<16> : vector<2xi64>, i8 = dense<8> : vector<2xi64>, i1 = dense<8> : vector<2xi64>, !llvm.ptr = dense<64> : vector<4xi64>, f80 = dense<128> : vector<2xi64>, i128 = dense<128> : vector<2xi64>, i64 = dense<64> : vector<2xi64>, !llvm.ptr<271> = dense<32> : vector<4xi64>, !llvm.ptr<272> = dense<64> : vector<4xi64>, !llvm.ptr<270> = dense<32> : vector<4xi64>, "dlti.stack_alignment" = 128 : i64, "dlti.endianness" = "little", "dlti.mangling_mode" = "e">} {
  cir.global "private" internal dsolocal @staticTrue = #cir.int<1> : !s32i {alignment = 4 : i64} loc(#loc186)
  cir.func private @__isoc99_fscanf(!cir.ptr<!ty__IO_FILE>, !cir.ptr<!s8i>, ...) -> !s32i loc(#loc187)
  cir.global "private" external @stdin : !cir.ptr<!ty__IO_FILE> {alignment = 8 : i64} loc(#loc188)
  cir.global "private" constant cir_private dsolocal @".str" = #cir.const_array<"%u\00" : !cir.array<!s8i x 3>> : !cir.array<!s8i x 3> {alignment = 1 : i64} loc(#loc7)
  cir.func private @printUnsignedLine(!u32i) loc(#loc189)
  cir.func no_proto @CWE190_Integer_Overflow__unsigned_int_fscanf_multiply_05_bad() extra(#fn_attr) {
    %0 = cir.alloca !u32i, !cir.ptr<!u32i>, ["data"] {alignment = 4 : i64} loc(#loc191)
    %1 = cir.const #cir.int<0> : !s32i loc(#loc14)
    %2 = cir.cast(integral, %1 : !s32i), !u32i loc(#loc14)
    cir.store %2, %0 : !u32i, !cir.ptr<!u32i> loc(#loc192)
    cir.scope {
      %3 = cir.get_global @staticTrue : !cir.ptr<!s32i> loc(#loc186)
      %4 = cir.load %3 : !cir.ptr<!s32i>, !s32i loc(#loc18)
      %5 = cir.cast(int_to_bool, %4 : !s32i), !cir.bool loc(#loc18)
      cir.if %5 {
        %6 = cir.get_global @__isoc99_fscanf : !cir.ptr<!cir.func<(!cir.ptr<!ty__IO_FILE>, !cir.ptr<!s8i>, ...) -> !s32i>> loc(#loc20)
        %7 = cir.get_global @stdin : !cir.ptr<!cir.ptr<!ty__IO_FILE>> loc(#loc188)
        %8 = cir.load %7 : !cir.ptr<!cir.ptr<!ty__IO_FILE>>, !cir.ptr<!ty__IO_FILE> loc(#loc21)
        %9 = cir.get_global @".str" : !cir.ptr<!cir.array<!s8i x 3>> loc(#loc7)
        %10 = cir.cast(array_to_ptrdecay, %9 : !cir.ptr<!cir.array<!s8i x 3>>), !cir.ptr<!s8i> loc(#loc7)
        %11 = cir.call @__isoc99_fscanf(%8, %10, %0) : (!cir.ptr<!ty__IO_FILE>, !cir.ptr<!s8i>, !cir.ptr<!u32i>) -> !s32i loc(#loc20)
      } loc(#loc194)
    } loc(#loc193)
    cir.scope {
      %3 = cir.get_global @staticTrue : !cir.ptr<!s32i> loc(#loc186)
      %4 = cir.load %3 : !cir.ptr<!s32i>, !s32i loc(#loc24)
      %5 = cir.cast(int_to_bool, %4 : !s32i), !cir.bool loc(#loc24)
      cir.if %5 {
        cir.scope {
          %6 = cir.load %0 : !cir.ptr<!u32i>, !u32i loc(#loc28)
          %7 = cir.const #cir.int<0> : !s32i loc(#loc29)
          %8 = cir.cast(integral, %7 : !s32i), !u32i loc(#loc29)
          %9 = cir.cmp(gt, %6, %8) : !u32i, !cir.bool loc(#loc198)
          cir.if %9 {
            %10 = cir.alloca !u32i, !cir.ptr<!u32i>, ["result", init] {alignment = 4 : i64} loc(#loc200)
            %11 = cir.load %0 : !cir.ptr<!u32i>, !u32i loc(#loc33)
            %12 = cir.const #cir.int<2> : !s32i loc(#loc32)
            %13 = cir.cast(integral, %12 : !s32i), !u32i loc(#loc32)
            %14 = cir.binop(mul, %11, %13) : !u32i loc(#loc201)
            cir.store %14, %10 : !u32i, !cir.ptr<!u32i> loc(#loc200)
            %15 = cir.load %10 : !cir.ptr<!u32i>, !u32i loc(#loc34)
            cir.call @printUnsignedLine(%15) : (!u32i) -> () loc(#loc35)
          } loc(#loc199)
        } loc(#loc197)
      } loc(#loc196)
    } loc(#loc195)
    cir.return loc(#loc11)
  } loc(#loc190)
  cir.func no_proto @CWE190_Integer_Overflow__unsigned_int_fscanf_multiply_05_good() extra(#fn_attr) {
    %0 = cir.get_global @goodB2G1 : !cir.ptr<!cir.func<()>> loc(#loc203)
    cir.call %0() : (!cir.ptr<!cir.func<()>>) -> () loc(#loc38)
    %1 = cir.get_global @goodB2G2 : !cir.ptr<!cir.func<()>> loc(#loc204)
    cir.call %1() : (!cir.ptr<!cir.func<()>>) -> () loc(#loc40)
    %2 = cir.get_global @goodG2B1 : !cir.ptr<!cir.func<()>> loc(#loc205)
    cir.call %2() : (!cir.ptr<!cir.func<()>>) -> () loc(#loc42)
    %3 = cir.get_global @goodG2B2 : !cir.ptr<!cir.func<()>> loc(#loc206)
    cir.call %3() : (!cir.ptr<!cir.func<()>>) -> () loc(#loc44)
    cir.return loc(#loc37)
  } loc(#loc202)
  cir.global "private" internal dsolocal @staticFalse = #cir.int<0> : !s32i {alignment = 4 : i64} loc(#loc207)
  cir.func private @printLine(!cir.ptr<!s8i>) loc(#loc208)
  cir.global "private" constant cir_private dsolocal @".str.1" = #cir.const_array<"Benign, fixed string\00" : !cir.array<!s8i x 21>> : !cir.array<!s8i x 21> {alignment = 1 : i64} loc(#loc50)
  cir.global "private" constant cir_private dsolocal @".str.2" = #cir.const_array<"data value is too large to perform arithmetic safely.\00" : !cir.array<!s8i x 54>> : !cir.array<!s8i x 54> {alignment = 1 : i64} loc(#loc51)
  cir.func no_proto internal private @goodB2G1() extra(#fn_attr) {
    %0 = cir.alloca !u32i, !cir.ptr<!u32i>, ["data"] {alignment = 4 : i64} loc(#loc210)
    %1 = cir.const #cir.int<0> : !s32i loc(#loc56)
    %2 = cir.cast(integral, %1 : !s32i), !u32i loc(#loc56)
    cir.store %2, %0 : !u32i, !cir.ptr<!u32i> loc(#loc211)
    cir.scope {
      %3 = cir.get_global @staticTrue : !cir.ptr<!s32i> loc(#loc186)
      %4 = cir.load %3 : !cir.ptr<!s32i>, !s32i loc(#loc60)
      %5 = cir.cast(int_to_bool, %4 : !s32i), !cir.bool loc(#loc60)
      cir.if %5 {
        %6 = cir.get_global @__isoc99_fscanf : !cir.ptr<!cir.func<(!cir.ptr<!ty__IO_FILE>, !cir.ptr<!s8i>, ...) -> !s32i>> loc(#loc62)
        %7 = cir.get_global @stdin : !cir.ptr<!cir.ptr<!ty__IO_FILE>> loc(#loc188)
        %8 = cir.load %7 : !cir.ptr<!cir.ptr<!ty__IO_FILE>>, !cir.ptr<!ty__IO_FILE> loc(#loc63)
        %9 = cir.get_global @".str" : !cir.ptr<!cir.array<!s8i x 3>> loc(#loc64)
        %10 = cir.cast(array_to_ptrdecay, %9 : !cir.ptr<!cir.array<!s8i x 3>>), !cir.ptr<!s8i> loc(#loc64)
        %11 = cir.call @__isoc99_fscanf(%8, %10, %0) : (!cir.ptr<!ty__IO_FILE>, !cir.ptr<!s8i>, !cir.ptr<!u32i>) -> !s32i loc(#loc62)
      } loc(#loc213)
    } loc(#loc212)
    cir.scope {
      %3 = cir.get_global @staticFalse : !cir.ptr<!s32i> loc(#loc207)
      %4 = cir.load %3 : !cir.ptr<!s32i>, !s32i loc(#loc67)
      %5 = cir.cast(int_to_bool, %4 : !s32i), !cir.bool loc(#loc67)
      cir.if %5 {
        %6 = cir.get_global @".str.1" : !cir.ptr<!cir.array<!s8i x 21>> loc(#loc50)
        %7 = cir.cast(array_to_ptrdecay, %6 : !cir.ptr<!cir.array<!s8i x 21>>), !cir.ptr<!s8i> loc(#loc50)
        cir.call @printLine(%7) : (!cir.ptr<!s8i>) -> () loc(#loc71)
      } else {
        cir.scope {
          %6 = cir.load %0 : !cir.ptr<!u32i>, !u32i loc(#loc74)
          %7 = cir.const #cir.int<0> : !s32i loc(#loc75)
          %8 = cir.cast(integral, %7 : !s32i), !u32i loc(#loc75)
          %9 = cir.cmp(gt, %6, %8) : !u32i, !cir.bool loc(#loc217)
          cir.if %9 {
            cir.scope {
              %10 = cir.load %0 : !cir.ptr<!u32i>, !u32i loc(#loc79)
              %11 = cir.const #cir.int<2147483647> : !s32i loc(#loc80)
              %12 = cir.cast(integral, %11 : !s32i), !u32i loc(#loc80)
              %13 = cir.const #cir.int<2> : !u32i loc(#loc80)
              %14 = cir.binop(mul, %12, %13) : !u32i loc(#loc80)
              %15 = cir.const #cir.int<1> : !u32i loc(#loc80)
              %16 = cir.binop(add, %14, %15) : !u32i loc(#loc80)
              %17 = cir.const #cir.int<2> : !s32i loc(#loc81)
              %18 = cir.cast(integral, %17 : !s32i), !u32i loc(#loc81)
              %19 = cir.binop(div, %16, %18) : !u32i loc(#loc220)
              %20 = cir.cmp(lt, %10, %19) : !u32i, !cir.bool loc(#loc221)
              cir.if %20 {
                %21 = cir.alloca !u32i, !cir.ptr<!u32i>, ["result", init] {alignment = 4 : i64} loc(#loc223)
                %22 = cir.load %0 : !cir.ptr<!u32i>, !u32i loc(#loc88)
                %23 = cir.const #cir.int<2> : !s32i loc(#loc87)
                %24 = cir.cast(integral, %23 : !s32i), !u32i loc(#loc87)
                %25 = cir.binop(mul, %22, %24) : !u32i loc(#loc224)
                cir.store %25, %21 : !u32i, !cir.ptr<!u32i> loc(#loc223)
                %26 = cir.load %21 : !cir.ptr<!u32i>, !u32i loc(#loc89)
                cir.call @printUnsignedLine(%26) : (!u32i) -> () loc(#loc90)
              } else {
                %21 = cir.get_global @".str.2" : !cir.ptr<!cir.array<!s8i x 54>> loc(#loc51)
                %22 = cir.cast(array_to_ptrdecay, %21 : !cir.ptr<!cir.array<!s8i x 54>>), !cir.ptr<!s8i> loc(#loc51)
                cir.call @printLine(%22) : (!cir.ptr<!s8i>) -> () loc(#loc91)
              } loc(#loc222)
            } loc(#loc219)
          } loc(#loc218)
        } loc(#loc216)
      } loc(#loc215)
    } loc(#loc214)
    cir.return loc(#loc53)
  } loc(#loc209)
  cir.func no_proto internal private @goodB2G2() extra(#fn_attr) {
    %0 = cir.alloca !u32i, !cir.ptr<!u32i>, ["data"] {alignment = 4 : i64} loc(#loc226)
    %1 = cir.const #cir.int<0> : !s32i loc(#loc96)
    %2 = cir.cast(integral, %1 : !s32i), !u32i loc(#loc96)
    cir.store %2, %0 : !u32i, !cir.ptr<!u32i> loc(#loc227)
    cir.scope {
      %3 = cir.get_global @staticTrue : !cir.ptr<!s32i> loc(#loc186)
      %4 = cir.load %3 : !cir.ptr<!s32i>, !s32i loc(#loc100)
      %5 = cir.cast(int_to_bool, %4 : !s32i), !cir.bool loc(#loc100)
      cir.if %5 {
        %6 = cir.get_global @__isoc99_fscanf : !cir.ptr<!cir.func<(!cir.ptr<!ty__IO_FILE>, !cir.ptr<!s8i>, ...) -> !s32i>> loc(#loc102)
        %7 = cir.get_global @stdin : !cir.ptr<!cir.ptr<!ty__IO_FILE>> loc(#loc188)
        %8 = cir.load %7 : !cir.ptr<!cir.ptr<!ty__IO_FILE>>, !cir.ptr<!ty__IO_FILE> loc(#loc103)
        %9 = cir.get_global @".str" : !cir.ptr<!cir.array<!s8i x 3>> loc(#loc104)
        %10 = cir.cast(array_to_ptrdecay, %9 : !cir.ptr<!cir.array<!s8i x 3>>), !cir.ptr<!s8i> loc(#loc104)
        %11 = cir.call @__isoc99_fscanf(%8, %10, %0) : (!cir.ptr<!ty__IO_FILE>, !cir.ptr<!s8i>, !cir.ptr<!u32i>) -> !s32i loc(#loc102)
      } loc(#loc229)
    } loc(#loc228)
    cir.scope {
      %3 = cir.get_global @staticTrue : !cir.ptr<!s32i> loc(#loc186)
      %4 = cir.load %3 : !cir.ptr<!s32i>, !s32i loc(#loc107)
      %5 = cir.cast(int_to_bool, %4 : !s32i), !cir.bool loc(#loc107)
      cir.if %5 {
        cir.scope {
          %6 = cir.load %0 : !cir.ptr<!u32i>, !u32i loc(#loc111)
          %7 = cir.const #cir.int<0> : !s32i loc(#loc112)
          %8 = cir.cast(integral, %7 : !s32i), !u32i loc(#loc112)
          %9 = cir.cmp(gt, %6, %8) : !u32i, !cir.bool loc(#loc233)
          cir.if %9 {
            cir.scope {
              %10 = cir.load %0 : !cir.ptr<!u32i>, !u32i loc(#loc116)
              %11 = cir.const #cir.int<2147483647> : !s32i loc(#loc117)
              %12 = cir.cast(integral, %11 : !s32i), !u32i loc(#loc117)
              %13 = cir.const #cir.int<2> : !u32i loc(#loc117)
              %14 = cir.binop(mul, %12, %13) : !u32i loc(#loc117)
              %15 = cir.const #cir.int<1> : !u32i loc(#loc117)
              %16 = cir.binop(add, %14, %15) : !u32i loc(#loc117)
              %17 = cir.const #cir.int<2> : !s32i loc(#loc118)
              %18 = cir.cast(integral, %17 : !s32i), !u32i loc(#loc118)
              %19 = cir.binop(div, %16, %18) : !u32i loc(#loc236)
              %20 = cir.cmp(lt, %10, %19) : !u32i, !cir.bool loc(#loc237)
              cir.if %20 {
                %21 = cir.alloca !u32i, !cir.ptr<!u32i>, ["result", init] {alignment = 4 : i64} loc(#loc239)
                %22 = cir.load %0 : !cir.ptr<!u32i>, !u32i loc(#loc125)
                %23 = cir.const #cir.int<2> : !s32i loc(#loc124)
                %24 = cir.cast(integral, %23 : !s32i), !u32i loc(#loc124)
                %25 = cir.binop(mul, %22, %24) : !u32i loc(#loc240)
                cir.store %25, %21 : !u32i, !cir.ptr<!u32i> loc(#loc239)
                %26 = cir.load %21 : !cir.ptr<!u32i>, !u32i loc(#loc126)
                cir.call @printUnsignedLine(%26) : (!u32i) -> () loc(#loc127)
              } else {
                %21 = cir.get_global @".str.2" : !cir.ptr<!cir.array<!s8i x 54>> loc(#loc128)
                %22 = cir.cast(array_to_ptrdecay, %21 : !cir.ptr<!cir.array<!s8i x 54>>), !cir.ptr<!s8i> loc(#loc128)
                cir.call @printLine(%22) : (!cir.ptr<!s8i>) -> () loc(#loc129)
              } loc(#loc238)
            } loc(#loc235)
          } loc(#loc234)
        } loc(#loc232)
      } loc(#loc231)
    } loc(#loc230)
    cir.return loc(#loc93)
  } loc(#loc225)
  cir.func no_proto internal private @goodG2B1() extra(#fn_attr) {
    %0 = cir.alloca !u32i, !cir.ptr<!u32i>, ["data"] {alignment = 4 : i64} loc(#loc242)
    %1 = cir.const #cir.int<0> : !s32i loc(#loc134)
    %2 = cir.cast(integral, %1 : !s32i), !u32i loc(#loc134)
    cir.store %2, %0 : !u32i, !cir.ptr<!u32i> loc(#loc243)
    cir.scope {
      %3 = cir.get_global @staticFalse : !cir.ptr<!s32i> loc(#loc207)
      %4 = cir.load %3 : !cir.ptr<!s32i>, !s32i loc(#loc138)
      %5 = cir.cast(int_to_bool, %4 : !s32i), !cir.bool loc(#loc138)
      cir.if %5 {
        %6 = cir.get_global @".str.1" : !cir.ptr<!cir.array<!s8i x 21>> loc(#loc142)
        %7 = cir.cast(array_to_ptrdecay, %6 : !cir.ptr<!cir.array<!s8i x 21>>), !cir.ptr<!s8i> loc(#loc142)
        cir.call @printLine(%7) : (!cir.ptr<!s8i>) -> () loc(#loc143)
      } else {
        %6 = cir.const #cir.int<2> : !s32i loc(#loc144)
        %7 = cir.cast(integral, %6 : !s32i), !u32i loc(#loc144)
        cir.store %7, %0 : !u32i, !cir.ptr<!u32i> loc(#loc246)
      } loc(#loc245)
    } loc(#loc244)
    cir.scope {
      %3 = cir.get_global @staticTrue : !cir.ptr<!s32i> loc(#loc186)
      %4 = cir.load %3 : !cir.ptr<!s32i>, !s32i loc(#loc148)
      %5 = cir.cast(int_to_bool, %4 : !s32i), !cir.bool loc(#loc148)
      cir.if %5 {
        cir.scope {
          %6 = cir.load %0 : !cir.ptr<!u32i>, !u32i loc(#loc152)
          %7 = cir.const #cir.int<0> : !s32i loc(#loc153)
          %8 = cir.cast(integral, %7 : !s32i), !u32i loc(#loc153)
          %9 = cir.cmp(gt, %6, %8) : !u32i, !cir.bool loc(#loc250)
          cir.if %9 {
            %10 = cir.alloca !u32i, !cir.ptr<!u32i>, ["result", init] {alignment = 4 : i64} loc(#loc252)
            %11 = cir.load %0 : !cir.ptr<!u32i>, !u32i loc(#loc157)
            %12 = cir.const #cir.int<2> : !s32i loc(#loc156)
            %13 = cir.cast(integral, %12 : !s32i), !u32i loc(#loc156)
            %14 = cir.binop(mul, %11, %13) : !u32i loc(#loc253)
            cir.store %14, %10 : !u32i, !cir.ptr<!u32i> loc(#loc252)
            %15 = cir.load %10 : !cir.ptr<!u32i>, !u32i loc(#loc158)
            cir.call @printUnsignedLine(%15) : (!u32i) -> () loc(#loc159)
          } loc(#loc251)
        } loc(#loc249)
      } loc(#loc248)
    } loc(#loc247)
    cir.return loc(#loc131)
  } loc(#loc241)
  cir.func no_proto internal private @goodG2B2() extra(#fn_attr) {
    %0 = cir.alloca !u32i, !cir.ptr<!u32i>, ["data"] {alignment = 4 : i64} loc(#loc255)
    %1 = cir.const #cir.int<0> : !s32i loc(#loc164)
    %2 = cir.cast(integral, %1 : !s32i), !u32i loc(#loc164)
    cir.store %2, %0 : !u32i, !cir.ptr<!u32i> loc(#loc256)
    cir.scope {
      %3 = cir.get_global @staticTrue : !cir.ptr<!s32i> loc(#loc186)
      %4 = cir.load %3 : !cir.ptr<!s32i>, !s32i loc(#loc168)
      %5 = cir.cast(int_to_bool, %4 : !s32i), !cir.bool loc(#loc168)
      cir.if %5 {
        %6 = cir.const #cir.int<2> : !s32i loc(#loc170)
        %7 = cir.cast(integral, %6 : !s32i), !u32i loc(#loc170)
        cir.store %7, %0 : !u32i, !cir.ptr<!u32i> loc(#loc259)
      } loc(#loc258)
    } loc(#loc257)
    cir.scope {
      %3 = cir.get_global @staticTrue : !cir.ptr<!s32i> loc(#loc186)
      %4 = cir.load %3 : !cir.ptr<!s32i>, !s32i loc(#loc174)
      %5 = cir.cast(int_to_bool, %4 : !s32i), !cir.bool loc(#loc174)
      cir.if %5 {
        cir.scope {
          %6 = cir.load %0 : !cir.ptr<!u32i>, !u32i loc(#loc178)
          %7 = cir.const #cir.int<0> : !s32i loc(#loc179)
          %8 = cir.cast(integral, %7 : !s32i), !u32i loc(#loc179)
          %9 = cir.cmp(gt, %6, %8) : !u32i, !cir.bool loc(#loc263)
          cir.if %9 {
            %10 = cir.alloca !u32i, !cir.ptr<!u32i>, ["result", init] {alignment = 4 : i64} loc(#loc265)
            %11 = cir.load %0 : !cir.ptr<!u32i>, !u32i loc(#loc183)
            %12 = cir.const #cir.int<2> : !s32i loc(#loc182)
            %13 = cir.cast(integral, %12 : !s32i), !u32i loc(#loc182)
            %14 = cir.binop(mul, %11, %13) : !u32i loc(#loc266)
            cir.store %14, %10 : !u32i, !cir.ptr<!u32i> loc(#loc265)
            %15 = cir.load %10 : !cir.ptr<!u32i>, !u32i loc(#loc184)
            cir.call @printUnsignedLine(%15) : (!u32i) -> () loc(#loc185)
          } loc(#loc264)
        } loc(#loc262)
      } loc(#loc261)
    } loc(#loc260)
    cir.return loc(#loc161)
  } loc(#loc254)
} loc(#loc)
#loc = loc("/workspaces/juliet-c/testcases/CWE190_Integer_Overflow/s05/CWE190_Integer_Overflow__unsigned_int_fscanf_multiply_05.c":0:0)
#loc1 = loc("CWE190_Integer_Overflow__unsigned_int_fscanf_multiply_05.c":23:1)
#loc2 = loc("CWE190_Integer_Overflow__unsigned_int_fscanf_multiply_05.c":23:25)
#loc3 = loc("/usr/include/stdio.h":463:1)
#loc4 = loc("/usr/include/stdio.h":465:33)
#loc5 = loc("/usr/include/stdio.h":149:1)
#loc6 = loc("/usr/include/stdio.h":149:14)
#loc7 = loc("CWE190_Integer_Overflow__unsigned_int_fscanf_multiply_05.c":35:24)
#loc8 = loc("../../../testcasesupport/std_testcase_io.h":34:1)
#loc9 = loc("../../../testcasesupport/std_testcase_io.h":34:47)
#loc10 = loc("CWE190_Integer_Overflow__unsigned_int_fscanf_multiply_05.c":28:1)
#loc11 = loc("CWE190_Integer_Overflow__unsigned_int_fscanf_multiply_05.c":46:1)
#loc12 = loc("CWE190_Integer_Overflow__unsigned_int_fscanf_multiply_05.c":30:5)
#loc13 = loc("CWE190_Integer_Overflow__unsigned_int_fscanf_multiply_05.c":30:18)
#loc14 = loc("CWE190_Integer_Overflow__unsigned_int_fscanf_multiply_05.c":31:12)
#loc15 = loc("CWE190_Integer_Overflow__unsigned_int_fscanf_multiply_05.c":31:5)
#loc16 = loc("CWE190_Integer_Overflow__unsigned_int_fscanf_multiply_05.c":32:5)
#loc17 = loc("CWE190_Integer_Overflow__unsigned_int_fscanf_multiply_05.c":36:5)
#loc18 = loc("CWE190_Integer_Overflow__unsigned_int_fscanf_multiply_05.c":32:8)
#loc19 = loc("CWE190_Integer_Overflow__unsigned_int_fscanf_multiply_05.c":33:5)
#loc20 = loc("CWE190_Integer_Overflow__unsigned_int_fscanf_multiply_05.c":35:9)
#loc21 = loc("CWE190_Integer_Overflow__unsigned_int_fscanf_multiply_05.c":35:17)
#loc22 = loc("CWE190_Integer_Overflow__unsigned_int_fscanf_multiply_05.c":37:5)
#loc23 = loc("CWE190_Integer_Overflow__unsigned_int_fscanf_multiply_05.c":45:5)
#loc24 = loc("CWE190_Integer_Overflow__unsigned_int_fscanf_multiply_05.c":37:8)
#loc25 = loc("CWE190_Integer_Overflow__unsigned_int_fscanf_multiply_05.c":38:5)
#loc26 = loc("CWE190_Integer_Overflow__unsigned_int_fscanf_multiply_05.c":39:9)
#loc27 = loc("CWE190_Integer_Overflow__unsigned_int_fscanf_multiply_05.c":44:9)
#loc28 = loc("CWE190_Integer_Overflow__unsigned_int_fscanf_multiply_05.c":39:12)
#loc29 = loc("CWE190_Integer_Overflow__unsigned_int_fscanf_multiply_05.c":39:19)
#loc30 = loc("CWE190_Integer_Overflow__unsigned_int_fscanf_multiply_05.c":40:9)
#loc31 = loc("CWE190_Integer_Overflow__unsigned_int_fscanf_multiply_05.c":42:13)
#loc32 = loc("CWE190_Integer_Overflow__unsigned_int_fscanf_multiply_05.c":42:42)
#loc33 = loc("CWE190_Integer_Overflow__unsigned_int_fscanf_multiply_05.c":42:35)
#loc34 = loc("CWE190_Integer_Overflow__unsigned_int_fscanf_multiply_05.c":43:31)
#loc35 = loc("CWE190_Integer_Overflow__unsigned_int_fscanf_multiply_05.c":43:13)
#loc36 = loc("CWE190_Integer_Overflow__unsigned_int_fscanf_multiply_05.c":160:1)
#loc37 = loc("CWE190_Integer_Overflow__unsigned_int_fscanf_multiply_05.c":166:1)
#loc38 = loc("CWE190_Integer_Overflow__unsigned_int_fscanf_multiply_05.c":162:5)
#loc39 = loc("CWE190_Integer_Overflow__unsigned_int_fscanf_multiply_05.c":162:14)
#loc40 = loc("CWE190_Integer_Overflow__unsigned_int_fscanf_multiply_05.c":163:5)
#loc41 = loc("CWE190_Integer_Overflow__unsigned_int_fscanf_multiply_05.c":163:14)
#loc42 = loc("CWE190_Integer_Overflow__unsigned_int_fscanf_multiply_05.c":164:5)
#loc43 = loc("CWE190_Integer_Overflow__unsigned_int_fscanf_multiply_05.c":164:14)
#loc44 = loc("CWE190_Integer_Overflow__unsigned_int_fscanf_multiply_05.c":165:5)
#loc45 = loc("CWE190_Integer_Overflow__unsigned_int_fscanf_multiply_05.c":165:14)
#loc46 = loc("CWE190_Integer_Overflow__unsigned_int_fscanf_multiply_05.c":24:1)
#loc47 = loc("CWE190_Integer_Overflow__unsigned_int_fscanf_multiply_05.c":24:26)
#loc48 = loc("../../../testcasesupport/std_testcase_io.h":14:1)
#loc49 = loc("../../../testcasesupport/std_testcase_io.h":14:33)
#loc50 = loc("CWE190_Integer_Overflow__unsigned_int_fscanf_multiply_05.c":65:19)
#loc51 = loc("CWE190_Integer_Overflow__unsigned_int_fscanf_multiply_05.c":79:27)
#loc52 = loc("CWE190_Integer_Overflow__unsigned_int_fscanf_multiply_05.c":53:1)
#loc53 = loc("CWE190_Integer_Overflow__unsigned_int_fscanf_multiply_05.c":83:1)
#loc54 = loc("CWE190_Integer_Overflow__unsigned_int_fscanf_multiply_05.c":55:5)
#loc55 = loc("CWE190_Integer_Overflow__unsigned_int_fscanf_multiply_05.c":55:18)
#loc56 = loc("CWE190_Integer_Overflow__unsigned_int_fscanf_multiply_05.c":56:12)
#loc57 = loc("CWE190_Integer_Overflow__unsigned_int_fscanf_multiply_05.c":56:5)
#loc58 = loc("CWE190_Integer_Overflow__unsigned_int_fscanf_multiply_05.c":57:5)
#loc59 = loc("CWE190_Integer_Overflow__unsigned_int_fscanf_multiply_05.c":61:5)
#loc60 = loc("CWE190_Integer_Overflow__unsigned_int_fscanf_multiply_05.c":57:8)
#loc61 = loc("CWE190_Integer_Overflow__unsigned_int_fscanf_multiply_05.c":58:5)
#loc62 = loc("CWE190_Integer_Overflow__unsigned_int_fscanf_multiply_05.c":60:9)
#loc63 = loc("CWE190_Integer_Overflow__unsigned_int_fscanf_multiply_05.c":60:17)
#loc64 = loc("CWE190_Integer_Overflow__unsigned_int_fscanf_multiply_05.c":60:24)
#loc65 = loc("CWE190_Integer_Overflow__unsigned_int_fscanf_multiply_05.c":62:5)
#loc66 = loc("CWE190_Integer_Overflow__unsigned_int_fscanf_multiply_05.c":82:5)
#loc67 = loc("CWE190_Integer_Overflow__unsigned_int_fscanf_multiply_05.c":62:8)
#loc68 = loc("CWE190_Integer_Overflow__unsigned_int_fscanf_multiply_05.c":63:5)
#loc69 = loc("CWE190_Integer_Overflow__unsigned_int_fscanf_multiply_05.c":66:5)
#loc70 = loc("CWE190_Integer_Overflow__unsigned_int_fscanf_multiply_05.c":68:5)
#loc71 = loc("CWE190_Integer_Overflow__unsigned_int_fscanf_multiply_05.c":65:9)
#loc72 = loc("CWE190_Integer_Overflow__unsigned_int_fscanf_multiply_05.c":69:9)
#loc73 = loc("CWE190_Integer_Overflow__unsigned_int_fscanf_multiply_05.c":81:9)
#loc74 = loc("CWE190_Integer_Overflow__unsigned_int_fscanf_multiply_05.c":69:12)
#loc75 = loc("CWE190_Integer_Overflow__unsigned_int_fscanf_multiply_05.c":69:19)
#loc76 = loc("CWE190_Integer_Overflow__unsigned_int_fscanf_multiply_05.c":70:9)
#loc77 = loc("CWE190_Integer_Overflow__unsigned_int_fscanf_multiply_05.c":72:13)
#loc78 = loc("CWE190_Integer_Overflow__unsigned_int_fscanf_multiply_05.c":80:13)
#loc79 = loc("CWE190_Integer_Overflow__unsigned_int_fscanf_multiply_05.c":72:17)
#loc80 = loc("CWE190_Integer_Overflow__unsigned_int_fscanf_multiply_05.c":72:25)
#loc81 = loc("CWE190_Integer_Overflow__unsigned_int_fscanf_multiply_05.c":72:34)
#loc82 = loc("CWE190_Integer_Overflow__unsigned_int_fscanf_multiply_05.c":72:35)
#loc83 = loc("CWE190_Integer_Overflow__unsigned_int_fscanf_multiply_05.c":73:13)
#loc84 = loc("CWE190_Integer_Overflow__unsigned_int_fscanf_multiply_05.c":76:13)
#loc85 = loc("CWE190_Integer_Overflow__unsigned_int_fscanf_multiply_05.c":78:13)
#loc86 = loc("CWE190_Integer_Overflow__unsigned_int_fscanf_multiply_05.c":74:17)
#loc87 = loc("CWE190_Integer_Overflow__unsigned_int_fscanf_multiply_05.c":74:46)
#loc88 = loc("CWE190_Integer_Overflow__unsigned_int_fscanf_multiply_05.c":74:39)
#loc89 = loc("CWE190_Integer_Overflow__unsigned_int_fscanf_multiply_05.c":75:35)
#loc90 = loc("CWE190_Integer_Overflow__unsigned_int_fscanf_multiply_05.c":75:17)
#loc91 = loc("CWE190_Integer_Overflow__unsigned_int_fscanf_multiply_05.c":79:17)
#loc92 = loc("CWE190_Integer_Overflow__unsigned_int_fscanf_multiply_05.c":86:1)
#loc93 = loc("CWE190_Integer_Overflow__unsigned_int_fscanf_multiply_05.c":111:1)
#loc94 = loc("CWE190_Integer_Overflow__unsigned_int_fscanf_multiply_05.c":88:5)
#loc95 = loc("CWE190_Integer_Overflow__unsigned_int_fscanf_multiply_05.c":88:18)
#loc96 = loc("CWE190_Integer_Overflow__unsigned_int_fscanf_multiply_05.c":89:12)
#loc97 = loc("CWE190_Integer_Overflow__unsigned_int_fscanf_multiply_05.c":89:5)
#loc98 = loc("CWE190_Integer_Overflow__unsigned_int_fscanf_multiply_05.c":90:5)
#loc99 = loc("CWE190_Integer_Overflow__unsigned_int_fscanf_multiply_05.c":94:5)
#loc100 = loc("CWE190_Integer_Overflow__unsigned_int_fscanf_multiply_05.c":90:8)
#loc101 = loc("CWE190_Integer_Overflow__unsigned_int_fscanf_multiply_05.c":91:5)
#loc102 = loc("CWE190_Integer_Overflow__unsigned_int_fscanf_multiply_05.c":93:9)
#loc103 = loc("CWE190_Integer_Overflow__unsigned_int_fscanf_multiply_05.c":93:17)
#loc104 = loc("CWE190_Integer_Overflow__unsigned_int_fscanf_multiply_05.c":93:24)
#loc105 = loc("CWE190_Integer_Overflow__unsigned_int_fscanf_multiply_05.c":95:5)
#loc106 = loc("CWE190_Integer_Overflow__unsigned_int_fscanf_multiply_05.c":110:5)
#loc107 = loc("CWE190_Integer_Overflow__unsigned_int_fscanf_multiply_05.c":95:8)
#loc108 = loc("CWE190_Integer_Overflow__unsigned_int_fscanf_multiply_05.c":96:5)
#loc109 = loc("CWE190_Integer_Overflow__unsigned_int_fscanf_multiply_05.c":97:9)
#loc110 = loc("CWE190_Integer_Overflow__unsigned_int_fscanf_multiply_05.c":109:9)
#loc111 = loc("CWE190_Integer_Overflow__unsigned_int_fscanf_multiply_05.c":97:12)
#loc112 = loc("CWE190_Integer_Overflow__unsigned_int_fscanf_multiply_05.c":97:19)
#loc113 = loc("CWE190_Integer_Overflow__unsigned_int_fscanf_multiply_05.c":98:9)
#loc114 = loc("CWE190_Integer_Overflow__unsigned_int_fscanf_multiply_05.c":100:13)
#loc115 = loc("CWE190_Integer_Overflow__unsigned_int_fscanf_multiply_05.c":108:13)
#loc116 = loc("CWE190_Integer_Overflow__unsigned_int_fscanf_multiply_05.c":100:17)
#loc117 = loc("CWE190_Integer_Overflow__unsigned_int_fscanf_multiply_05.c":100:25)
#loc118 = loc("CWE190_Integer_Overflow__unsigned_int_fscanf_multiply_05.c":100:34)
#loc119 = loc("CWE190_Integer_Overflow__unsigned_int_fscanf_multiply_05.c":100:35)
#loc120 = loc("CWE190_Integer_Overflow__unsigned_int_fscanf_multiply_05.c":101:13)
#loc121 = loc("CWE190_Integer_Overflow__unsigned_int_fscanf_multiply_05.c":104:13)
#loc122 = loc("CWE190_Integer_Overflow__unsigned_int_fscanf_multiply_05.c":106:13)
#loc123 = loc("CWE190_Integer_Overflow__unsigned_int_fscanf_multiply_05.c":102:17)
#loc124 = loc("CWE190_Integer_Overflow__unsigned_int_fscanf_multiply_05.c":102:46)
#loc125 = loc("CWE190_Integer_Overflow__unsigned_int_fscanf_multiply_05.c":102:39)
#loc126 = loc("CWE190_Integer_Overflow__unsigned_int_fscanf_multiply_05.c":103:35)
#loc127 = loc("CWE190_Integer_Overflow__unsigned_int_fscanf_multiply_05.c":103:17)
#loc128 = loc("CWE190_Integer_Overflow__unsigned_int_fscanf_multiply_05.c":107:27)
#loc129 = loc("CWE190_Integer_Overflow__unsigned_int_fscanf_multiply_05.c":107:17)
#loc130 = loc("CWE190_Integer_Overflow__unsigned_int_fscanf_multiply_05.c":114:1)
#loc131 = loc("CWE190_Integer_Overflow__unsigned_int_fscanf_multiply_05.c":137:1)
#loc132 = loc("CWE190_Integer_Overflow__unsigned_int_fscanf_multiply_05.c":116:5)
#loc133 = loc("CWE190_Integer_Overflow__unsigned_int_fscanf_multiply_05.c":116:18)
#loc134 = loc("CWE190_Integer_Overflow__unsigned_int_fscanf_multiply_05.c":117:12)
#loc135 = loc("CWE190_Integer_Overflow__unsigned_int_fscanf_multiply_05.c":117:5)
#loc136 = loc("CWE190_Integer_Overflow__unsigned_int_fscanf_multiply_05.c":118:5)
#loc137 = loc("CWE190_Integer_Overflow__unsigned_int_fscanf_multiply_05.c":127:5)
#loc138 = loc("CWE190_Integer_Overflow__unsigned_int_fscanf_multiply_05.c":118:8)
#loc139 = loc("CWE190_Integer_Overflow__unsigned_int_fscanf_multiply_05.c":119:5)
#loc140 = loc("CWE190_Integer_Overflow__unsigned_int_fscanf_multiply_05.c":122:5)
#loc141 = loc("CWE190_Integer_Overflow__unsigned_int_fscanf_multiply_05.c":124:5)
#loc142 = loc("CWE190_Integer_Overflow__unsigned_int_fscanf_multiply_05.c":121:19)
#loc143 = loc("CWE190_Integer_Overflow__unsigned_int_fscanf_multiply_05.c":121:9)
#loc144 = loc("CWE190_Integer_Overflow__unsigned_int_fscanf_multiply_05.c":126:16)
#loc145 = loc("CWE190_Integer_Overflow__unsigned_int_fscanf_multiply_05.c":126:9)
#loc146 = loc("CWE190_Integer_Overflow__unsigned_int_fscanf_multiply_05.c":128:5)
#loc147 = loc("CWE190_Integer_Overflow__unsigned_int_fscanf_multiply_05.c":136:5)
#loc148 = loc("CWE190_Integer_Overflow__unsigned_int_fscanf_multiply_05.c":128:8)
#loc149 = loc("CWE190_Integer_Overflow__unsigned_int_fscanf_multiply_05.c":129:5)
#loc150 = loc("CWE190_Integer_Overflow__unsigned_int_fscanf_multiply_05.c":130:9)
#loc151 = loc("CWE190_Integer_Overflow__unsigned_int_fscanf_multiply_05.c":135:9)
#loc152 = loc("CWE190_Integer_Overflow__unsigned_int_fscanf_multiply_05.c":130:12)
#loc153 = loc("CWE190_Integer_Overflow__unsigned_int_fscanf_multiply_05.c":130:19)
#loc154 = loc("CWE190_Integer_Overflow__unsigned_int_fscanf_multiply_05.c":131:9)
#loc155 = loc("CWE190_Integer_Overflow__unsigned_int_fscanf_multiply_05.c":133:13)
#loc156 = loc("CWE190_Integer_Overflow__unsigned_int_fscanf_multiply_05.c":133:42)
#loc157 = loc("CWE190_Integer_Overflow__unsigned_int_fscanf_multiply_05.c":133:35)
#loc158 = loc("CWE190_Integer_Overflow__unsigned_int_fscanf_multiply_05.c":134:31)
#loc159 = loc("CWE190_Integer_Overflow__unsigned_int_fscanf_multiply_05.c":134:13)
#loc160 = loc("CWE190_Integer_Overflow__unsigned_int_fscanf_multiply_05.c":140:1)
#loc161 = loc("CWE190_Integer_Overflow__unsigned_int_fscanf_multiply_05.c":158:1)
#loc162 = loc("CWE190_Integer_Overflow__unsigned_int_fscanf_multiply_05.c":142:5)
#loc163 = loc("CWE190_Integer_Overflow__unsigned_int_fscanf_multiply_05.c":142:18)
#loc164 = loc("CWE190_Integer_Overflow__unsigned_int_fscanf_multiply_05.c":143:12)
#loc165 = loc("CWE190_Integer_Overflow__unsigned_int_fscanf_multiply_05.c":143:5)
#loc166 = loc("CWE190_Integer_Overflow__unsigned_int_fscanf_multiply_05.c":144:5)
#loc167 = loc("CWE190_Integer_Overflow__unsigned_int_fscanf_multiply_05.c":148:5)
#loc168 = loc("CWE190_Integer_Overflow__unsigned_int_fscanf_multiply_05.c":144:8)
#loc169 = loc("CWE190_Integer_Overflow__unsigned_int_fscanf_multiply_05.c":145:5)
#loc170 = loc("CWE190_Integer_Overflow__unsigned_int_fscanf_multiply_05.c":147:16)
#loc171 = loc("CWE190_Integer_Overflow__unsigned_int_fscanf_multiply_05.c":147:9)
#loc172 = loc("CWE190_Integer_Overflow__unsigned_int_fscanf_multiply_05.c":149:5)
#loc173 = loc("CWE190_Integer_Overflow__unsigned_int_fscanf_multiply_05.c":157:5)
#loc174 = loc("CWE190_Integer_Overflow__unsigned_int_fscanf_multiply_05.c":149:8)
#loc175 = loc("CWE190_Integer_Overflow__unsigned_int_fscanf_multiply_05.c":150:5)
#loc176 = loc("CWE190_Integer_Overflow__unsigned_int_fscanf_multiply_05.c":151:9)
#loc177 = loc("CWE190_Integer_Overflow__unsigned_int_fscanf_multiply_05.c":156:9)
#loc178 = loc("CWE190_Integer_Overflow__unsigned_int_fscanf_multiply_05.c":151:12)
#loc179 = loc("CWE190_Integer_Overflow__unsigned_int_fscanf_multiply_05.c":151:19)
#loc180 = loc("CWE190_Integer_Overflow__unsigned_int_fscanf_multiply_05.c":152:9)
#loc181 = loc("CWE190_Integer_Overflow__unsigned_int_fscanf_multiply_05.c":154:13)
#loc182 = loc("CWE190_Integer_Overflow__unsigned_int_fscanf_multiply_05.c":154:42)
#loc183 = loc("CWE190_Integer_Overflow__unsigned_int_fscanf_multiply_05.c":154:35)
#loc184 = loc("CWE190_Integer_Overflow__unsigned_int_fscanf_multiply_05.c":155:31)
#loc185 = loc("CWE190_Integer_Overflow__unsigned_int_fscanf_multiply_05.c":155:13)
#loc186 = loc(fused[#loc1, #loc2])
#loc187 = loc(fused[#loc3, #loc4])
#loc188 = loc(fused[#loc5, #loc6])
#loc189 = loc(fused[#loc8, #loc9])
#loc190 = loc(fused[#loc10, #loc11])
#loc191 = loc(fused[#loc12, #loc13])
#loc192 = loc(fused[#loc15, #loc14])
#loc193 = loc(fused[#loc16, #loc17])
#loc194 = loc(fused[#loc19, #loc17])
#loc195 = loc(fused[#loc22, #loc23])
#loc196 = loc(fused[#loc25, #loc23])
#loc197 = loc(fused[#loc26, #loc27])
#loc198 = loc(fused[#loc28, #loc29])
#loc199 = loc(fused[#loc30, #loc27])
#loc200 = loc(fused[#loc31, #loc32])
#loc201 = loc(fused[#loc33, #loc32])
#loc202 = loc(fused[#loc36, #loc37])
#loc203 = loc(fused[#loc38, #loc39])
#loc204 = loc(fused[#loc40, #loc41])
#loc205 = loc(fused[#loc42, #loc43])
#loc206 = loc(fused[#loc44, #loc45])
#loc207 = loc(fused[#loc46, #loc47])
#loc208 = loc(fused[#loc48, #loc49])
#loc209 = loc(fused[#loc52, #loc53])
#loc210 = loc(fused[#loc54, #loc55])
#loc211 = loc(fused[#loc57, #loc56])
#loc212 = loc(fused[#loc58, #loc59])
#loc213 = loc(fused[#loc61, #loc59])
#loc214 = loc(fused[#loc65, #loc66])
#loc215 = loc(fused[#loc68, #loc69, #loc70, #loc66])
#loc216 = loc(fused[#loc72, #loc73])
#loc217 = loc(fused[#loc74, #loc75])
#loc218 = loc(fused[#loc76, #loc73])
#loc219 = loc(fused[#loc77, #loc78])
#loc220 = loc(fused[#loc80, #loc81])
#loc221 = loc(fused[#loc79, #loc82])
#loc222 = loc(fused[#loc83, #loc84, #loc85, #loc78])
#loc223 = loc(fused[#loc86, #loc87])
#loc224 = loc(fused[#loc88, #loc87])
#loc225 = loc(fused[#loc92, #loc93])
#loc226 = loc(fused[#loc94, #loc95])
#loc227 = loc(fused[#loc97, #loc96])
#loc228 = loc(fused[#loc98, #loc99])
#loc229 = loc(fused[#loc101, #loc99])
#loc230 = loc(fused[#loc105, #loc106])
#loc231 = loc(fused[#loc108, #loc106])
#loc232 = loc(fused[#loc109, #loc110])
#loc233 = loc(fused[#loc111, #loc112])
#loc234 = loc(fused[#loc113, #loc110])
#loc235 = loc(fused[#loc114, #loc115])
#loc236 = loc(fused[#loc117, #loc118])
#loc237 = loc(fused[#loc116, #loc119])
#loc238 = loc(fused[#loc120, #loc121, #loc122, #loc115])
#loc239 = loc(fused[#loc123, #loc124])
#loc240 = loc(fused[#loc125, #loc124])
#loc241 = loc(fused[#loc130, #loc131])
#loc242 = loc(fused[#loc132, #loc133])
#loc243 = loc(fused[#loc135, #loc134])
#loc244 = loc(fused[#loc136, #loc137])
#loc245 = loc(fused[#loc139, #loc140, #loc141, #loc137])
#loc246 = loc(fused[#loc145, #loc144])
#loc247 = loc(fused[#loc146, #loc147])
#loc248 = loc(fused[#loc149, #loc147])
#loc249 = loc(fused[#loc150, #loc151])
#loc250 = loc(fused[#loc152, #loc153])
#loc251 = loc(fused[#loc154, #loc151])
#loc252 = loc(fused[#loc155, #loc156])
#loc253 = loc(fused[#loc157, #loc156])
#loc254 = loc(fused[#loc160, #loc161])
#loc255 = loc(fused[#loc162, #loc163])
#loc256 = loc(fused[#loc165, #loc164])
#loc257 = loc(fused[#loc166, #loc167])
#loc258 = loc(fused[#loc169, #loc167])
#loc259 = loc(fused[#loc171, #loc170])
#loc260 = loc(fused[#loc172, #loc173])
#loc261 = loc(fused[#loc175, #loc173])
#loc262 = loc(fused[#loc176, #loc177])
#loc263 = loc(fused[#loc178, #loc179])
#loc264 = loc(fused[#loc180, #loc177])
#loc265 = loc(fused[#loc181, #loc182])
#loc266 = loc(fused[#loc183, #loc182])
